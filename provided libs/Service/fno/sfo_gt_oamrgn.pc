/******************************************************************************/
/*	Program	    			:	SFO_GT_OAMRGN                                         */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_RQST_TYP                                          */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                                                                            */
/*  Output            : FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_OPT_TYP                                           */
/*                                                                            */
/*  Description       : To get the records for running the EOD add margin     */
/*                      process and pass it on to the Calling batch program   */
/*                                                                            */
/******************************************************************************/
/*  02-Feb-2010     Ver 1.0        Vidyayini Krish      Release 1.0           */
/*  08-Sep-2023     Ver TOL        Shraddha Karande     Tux on linux          */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fn_battmpt.h>
#include <fn_tuxlib.h>
#include <fn_log.h>			
#include <fn_read_debug_lvl.h>  

void print_qry_mrgn(char * str, int i_cnt,char * c_ServiceName);

void SFO_GT_OAMRGN( TPSVCINFO *rqst )
{

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];

  int i_returncode;
  int *ind_undrlyng;

	char	c_und_present='Y';

  EXEC SQL BEGIN DECLARE SECTION;
  	varchar select_stmt[500];
    char c_xchng_cd [ 4 ];
    char c_prd_typ;
    char c_rqst_typ;
    char c_undrlyng_str [ 200 ];
    char c_match_str [ 200 ];

    char sql_mtch_accnt [ 11 ];
    char sql_xchng_cd [ 4 ];
    char sql_prd_typ;
    char sql_indstk;
    char sql_undrlyng [ 7 ];
    char sql_exer_typ;
    char sql_opt_typ;
    char sql_expry_dt [ LEN_DATE ];

		long sql_strk_prc;

		char	c_exg_stts;

  EXEC SQL END DECLARE SECTION;


  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );


	INITDBGLVL(c_ServiceName);       

  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                    c_err_msg,
                                    ptr_fml_Ibuf,
                                    5,
                                    FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                                    FFO_PRDCT_TYP, ( char * )&c_prd_typ, NULL,
                                    FFO_RQST_TYP, ( char * )&c_rqst_typ, NULL,
                                    FFO_EBA_MTCH_ACT_NO, ( char * )c_match_str, NULL,
                                    FFO_UNDRLYNG, ( char * )c_undrlyng_str, &ind_undrlyng);

  if( i_returncode != 0 )
  {
   	fn_errlog( c_ServiceName, "S31005", LIBMSG , c_err_msg );
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog( c_ServiceName, "c_xchng_cd :%s:", c_xchng_cd );
  	fn_userlog( c_ServiceName, "c_prd_typ  :%c:", c_prd_typ );
  	fn_userlog( c_ServiceName, "c_rqst_typ :%c:", c_rqst_typ );
	}

	if( c_rqst_typ == MTM_ALL_PSTN )
	{
		fn_userlog(c_ServiceName,"MTM_ALL_PSTN");
		strcpy( (char *)select_stmt.arr,"SELECT FOP_CLM_MTCH_ACCNT,FOP_XCHNG_CD,FOP_PRDCT_TYP,FOP_INDSTK,FOP_UNDRLYNG,TO_CHAR(FOP_EXPRY_DT,'DD-Mon-YYYY'),FOP_STRK_PRC,FOP_EXER_TYP,FOP_OPT_TYP FROM FOP_FO_OPTIONS_PSTN WHERE FOP_XCHNG_CD = '");
		strcat((char *)select_stmt.arr, c_xchng_cd);
		strcat((char *)select_stmt.arr,"' AND FOP_PRDCT_TYP = 'O' AND FOP_OPNPSTN_QTY < 0 ORDER BY FOP_UNDRLYNG");

	}
	else if( c_rqst_typ == MTM_FOR_UNDRLYNG )
	{
    fn_userlog(c_ServiceName,"MTM_FOR_UNDRLYNG");
		strcpy( (char *)select_stmt.arr,"SELECT FOP_CLM_MTCH_ACCNT,FOP_XCHNG_CD,FOP_PRDCT_TYP,FOP_INDSTK,FOP_UNDRLYNG,TO_CHAR(FOP_EXPRY_DT,'DD-Mon-YYYY'),FOP_STRK_PRC,FOP_EXER_TYP,FOP_OPT_TYP FROM FOP_FO_OPTIONS_PSTN WHERE FOP_XCHNG_CD = '");

		strcat((char *)select_stmt.arr,c_xchng_cd);

		strcat((char *)select_stmt.arr,"' AND FOP_PRDCT_TYP = 'O' AND FOP_OPNPSTN_QTY < 0 AND FOP_UNDRLYNG in (");

		strcat((char *)select_stmt.arr,	c_undrlyng_str);

		strcat((char *)select_stmt.arr,	")");

		strcat((char *)select_stmt.arr,	"  ORDER BY FOP_UNDRLYNG");

	}
  else if( c_rqst_typ == MTM_FOR_MATCH_ALL_UNDRLYNG )
  {
	    fn_userlog(c_ServiceName,"MTM_FOR_MATCH_ALL_UNDRLYNG");
		strcpy( (char *)select_stmt.arr,"SELECT FOP_CLM_MTCH_ACCNT,FOP_XCHNG_CD,FOP_PRDCT_TYP,FOP_INDSTK,FOP_UNDRLYNG,TO_CHAR(FOP_EXPRY_DT,'DD-Mon-YYYY'),FOP_STRK_PRC,FOP_EXER_TYP,FOP_OPT_TYP FROM FOP_FO_OPTIONS_PSTN WHERE FOP_XCHNG_CD = '");

		strcat((char *)select_stmt.arr,c_xchng_cd);

		strcat((char *)select_stmt.arr,"' AND FOP_PRDCT_TYP = 'O' AND FOP_OPNPSTN_QTY < 0 AND FOP_CLM_MTCH_ACCNT not in (");

		strcat((char *)select_stmt.arr,	c_match_str);
		strcat((char *)select_stmt.arr,	")");
		strcat((char *)select_stmt.arr,	"  ORDER BY FOP_UNDRLYNG");
	}

	select_stmt.len = strlen((char *)select_stmt.arr);	

	print_qry_mrgn((char*)select_stmt.arr,select_stmt.len,c_ServiceName);


	EXEC SQL PREPARE sql_stmt FROM :select_stmt;

	if(SQLCODE != 0)
	{
		fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  ptr_fml_Obuf = NULL;

	EXEC SQL DECLARE cur_dyn CURSOR FOR sql_stmt;

	EXEC SQL OPEN cur_dyn ;
	if(SQLCODE != 0)
	{
		fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg );
		tpfree ( ( char * ) ptr_fml_Obuf );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  for (;;)
  {
		EXEC SQL FETCH cur_dyn 
             INTO :sql_mtch_accnt,
                  :sql_xchng_cd,
                  :sql_prd_typ,
                  :sql_indstk,
                  :sql_undrlyng,
                  :sql_expry_dt,
									:sql_strk_prc,
									:sql_exer_typ,
									:sql_opt_typ;

		if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        break;
      }
			fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg );
			tpfree ( ( char * ) ptr_fml_Obuf );
    	EXEC SQL CLOSE cur_dyn;
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		rtrim ( sql_mtch_accnt );
		rtrim ( sql_undrlyng );
		rtrim ( sql_expry_dt );

    i_returncode = fn_pack_vartofml( c_ServiceName,
                                     c_err_msg,
                                     &ptr_fml_Obuf,
                                     9,
                                 		 FFO_EBA_MTCH_ACT_NO, ( char * )sql_mtch_accnt,
                                 		 FFO_XCHNG_CD, ( char * )sql_xchng_cd,
                                 		 FFO_PRDCT_TYP, ( char * )&sql_prd_typ,
                                 		 FFO_CTGRY_INDSTK, ( char * )&sql_indstk,
                                 		 FFO_UNDRLYNG, ( char * )sql_undrlyng,
                                 		 FFO_EXPRY_DT, ( char * )sql_expry_dt,
																 		 FFO_STRK_PRC, (char *)	&sql_strk_prc,
																 		 FFO_EXER_TYP, (char *) &sql_exer_typ,
																 		 FFO_OPT_TYP,	 (char *) &sql_opt_typ);

		if( i_returncode == -1 )
		{
			fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg );
    	EXEC SQL CLOSE cur_dyn;
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
    EXEC SQL CLOSE cur_dyn;

  tpreturn(TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
}

void print_qry_mrgn(char * str, int i_cnt,char * c_ServiceName)
{
  int idx;
  char c_tmp_str1[100];

  MEMSET(c_tmp_str1);

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Printing query");
  }

  for (idx = 0;idx < i_cnt; idx += 60)
  {
    strncpy(c_tmp_str1,str + idx,60);
		if( DEBUG_MSG_LVL_3 )
		{
    	fn_userlog(c_ServiceName,"%s",c_tmp_str1);
		}
  }

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Finished printing query");
  }
}

