/********************************************************************************/
/*  Program           : SFO_UPD_FUT_POS                                         */
/*                                                                              */
/*  Input             : vw_pstn_actn                                            */
/*                                                                              */
/*  Output            : vw_err_msg                                              */
/*                                                                              */
/*  Description       : This service updates the futures positions based on     */
/*                      action.                                                 */
/*                                                                              */
/*  Log               : 1.0   01-Dec-2001  Vinod Banjan                         */
/*  Log               : 1.1   11-Apr-2004  Sangeet|Infotech                     */
/*  Log               : 1.2   23-Oct-2006  Shailesh|Infotech             			  */
/*  Log               : 1.3   21-Jun-2007  Abhishek|Infotech             			  */
/*  Log               : 1.4   10-Mar-2008  Shailesh|Infotech             			  */
/*  Log               : 1.5   03-Jul-2008  Shailesh|Infotech             			  */
/*	Log								:	1.6		14-Aug-2008	 Sandeep |Infotech									  */			
/*	Log								: 1.7		19-Jan-2009	 Sandeep |Infotech					          */
/*	Log								: 1.8		03-Apr-2009	 Sandeep |Infotech										*/
/*	Log								:	1.9		09-Sep-2009	 Shamili |Infotech										*/
/*	Log								:	2.0		18-Feb-2010	 Sandeep |Infotech										*/
/*	Log								:	2.1		30-Apr-2010	 Sandeep |Infotech										*/
/*  Log               : 2.2   03-Mar-2011  Sachin  |Infotech                    */
/*  Log               : 2.3   16-Sep-2011  Renuka  |Infotech                    */
/*  Log								:	2.4		16-Jan-2012	 Mahesh  |Infotech										*/
/*  Log               : 2.5   03-Apr-2012  Sachin  |Infotech                    */
/*  Log               : 2.6   20-Jul-2012  Mahesh  |Infotech                    */
/*  Log               : 2.7   13-Aug-2012  Shamili |Infotech                    */
/*	Log 							: 2.8		26-Oct-2012	 Vishnu	 |Infotech										*/
/*  Log               : 2.9   05-Nov-2012  Vishnu  |Infotech                    */
/*  Log               : 3.0   13-Feb-2013  Swati A |Infotech                    */
/*  Log               : 3.1   23-Apr-2013  Mahesh S|Infotech                    */
/*  Log               : 3.2   12-Sep-2013  Mahesh S|Infotech                    */
/*  Log               : 3.3   12-Sep-2013  Mahesh S|Infotech                    */
/*	Log								: 3.4		08-Jan-2014	 Sachin B|Infotech										*/
/*  Log               : 3.5   02-Apr-2014  Sachin B|Infotech                    */
/*  Log               : 3.6   15-Apr-2014  Ritesh D|Infotech                    */
/*	Log								: 3.7		17-Apr-2014	 Navina D|Infotech										*/
/*  Log               : 3.8   12-Mar-2014  Shashi K|Infotech                    */
/*  Log               : 3.9   09-Oct-2014  Sachin B|Infotech                    */
/*  Log               : 4.0   22-Jan-2015  Anand Dhopte|Infotech                */
/*  Log               : 4.1   29-Jun-2015  Ritesh Deolekar|Infotech             */
/*  Log               : 4.2   09-Nov-2015  Sachin Birje   |Infotech             */
/*  Log               : 4.3   08-Dec-2015  Navina D.|Infotech                   */
/*  Log               : 4.4   03-Feb-2016  Tanmay W.|Infotech                   */
/*	Log								:	4.6		04-Jul-2016	 Kishor Borkar | Infotech							*/
/*  Log               : 4.7   07-Sep-2017  Tanmay Patel  | Infotech             */ 
/*  Log               : 4.8   20-Apr-2017  Bhupendra Malik                      */
/*  Log               : 4.9   20-Nov-2017  mrinal Kishore                       */
/*  Log               : 5.0   15-Jan-2019  Suchita Dabir | Infotech             */
/*  Log               : 5.1   08-Mar-2019  Mrinal Kishore| Infotech             */
/*  Log               : 5.3   24-Jul-2019  Suchita Dabir | Infotech             */
/*  Log               : 5.4   28-Jul-2021  Tanmay Patel  | Infotech             */
/*  Log               : 5.5   06-Dec-2022  Karthik Sujit						            */
/********************************************************************************/
/*  1.0    -  New Release                                                       */
/*  1.1    -  IMTM Report                                                       */
/*  1.2    -  NRI FNO                                                   			  */
/*  1.3    -  Limit Mismatch during Intraday MTM                                */
/*  1.4    -  FuturePlus fresh-cover qty calculation													  */
/*  1.5    -  DL-2 Order Placement Issue fixing																  */
/*	1.6		 -  Trade Margin & Trade Date Added In EOD-MTM Report For Margin Mail	*/
/*	1.7		 -  Partial Execution & Cancellation Case Handeling										*/
/*	1.8		 -	Expiry Date Change For IMTM Report																*/											
/*	1.9		 -  Add Contract Details in Narration																	*/
/*	2.0		 -	CRCON40299	( Adhoc Margin Request)																*/
/*	2.1		 -	CRCSN43314	( Limit Mismatch	)																		*/
/*  2.2    -  CRARP44502	Release of User Add Margin in case of Spread Order    */
/*  2.3    -  CRCSN43521	CRCSN43521  EQSAM-To capture pledge values            */
/*  2.4    -  CR-ISEC10-18963 Convert From Future to Future Plus and 						*/
/*														business error handling														*/
/*  2.5    -  FNO BSE Changes                                                   */
/*  2.6    -  Add margin and PNL should released/blocked as per number of lots  */
/*						getting Convert From Future to Future Plus.												*/
/*						( Reported in testing of convert From Future plus to Future )     */
/*	2.7		-   Margin percentage storage datatype is changed to double from long	*/ 
/*	2.8		-		ROLLOVER Changes																									*/
/*  2.9   -   Changes for Overnight orders                                      */
/*  3.0   -   Removal of Limit Alloc/Dealloc in Corp Action Changes             */
/*  3.1   -   Bug fix while converting from future to future plus	              */
/*  3.2   -   CR-ISEC14-42392 Missmatch FNO limit page and cash projection page */
/*  3.3   -   CR-ISEC14-41247  Correct order flow on converted positions page		*/
/*	3.4		-		MTM automation																										*/
/*  3.5   -   FDR Module Changes                                                */
/*  3.6   -   Service call to SFO_GET_QT commented and function introduced      */
/*	3.7		-		Enabling FP for NRI clients  (Navina D. ) 												*/
/*  3.8   -   Stoped to write the file for system square off records            */
/*  3.9   -   View to FML Changes                                               */
/*  4.0   -   Updating Trade Date in Underlying Position table when Position		*/
/* 						already exists for same underlying & Contract Tag                 */ 
/*            and also while converting position from Future to FuturePLUS      */  
/*	4.1		-   Contract master & Trade Quote merger Changes.											*/
/*  4.2   -   Minimum Margin calculation in event of SYS or User Add margin     */
/*  4.3   -   Channel added in conversion log table.                            */
/*  4.4   -   Migration of RI to NRI                                            */
/*	4.6		-		Log Maintenance																										*/
/*  4.7   -   Add userlog                                                       */
/*  4.8   -   Cash Projecton Changes                                            */
/*  4.9   -   EOD MTM AND SPLIT functonality marged                             */
/*  5.0   -   Position mismatch ( Executed qty from packet is used )            */ 
/*  5.1   -   Rollover with Spread Changes                                      */
/*  5.3   -   Long Option Delivery Margin Changes                               */
/*  5.4   -   CR-ISEC10-156987 MarginShotfall_Communication                     */ 
/*  5.5   -   CR-ISEC14-162075 Sam in Currency & Commodity 		                  */
/*  5.6   -   Margin Reporting Regulatory Changes ( Nikhil Soni)              */
/********************************************************************************/



#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <eba_to_ors.h>
#include <fo_fml_def.h>
/** #include <fo_view_def.h> ** Ver 3.9 **/
#include <fo_view_def.h>   /** Ver 3.9 **/
#include <fml_rout.h>        /** Ver 3.9 **/
#include <sqlca.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_pos.h>
#include <fn_ddr.h>
#include <fn_read_debug_lvl.h>					  /* Ver 1.3 */
#include <math.h>							 						/* Ver 2.4 */
#include <fo_get_records.h>               /* Ver 3.6 */
#define MAX(a,b) ((a) > (b) ? (a) : (b))	/* Ver 2.4 */
#define MIN(a,b) ((a) < (b) ? (a) : (b))	/* Ver 2.4 */

/** Applies an action on an existing position **/
int	fn_apply_cnt_actn ( 	char *c_ServiceName,
													struct vw_pstn_actn *ptr_st_pstn_actn,
												 	struct vw_cntfut_pos *ptr_st_cntfut_pos,
                  				struct vw_err_msg *ptr_st_err_msg);

/** Given a position and a type of action performed calculates the new **/
/** margin to be                                                       **/
int fn_upd_mrgn( char *c_ServiceName,
								 struct vw_pstn_actn *ptr_st_pstn_actn,
                 struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                 struct vw_undfut_pos *ptr_st_undfut_pos,
                 struct vw_err_msg *ptr_st_err_msg);
                 

int fn_call_actn_grp1( char *c_ServiceName,
											 struct vw_pstn_actn *ptr_st_pstn_actn,
                  		 struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                  		 struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                  	 	 struct vw_err_msg *ptr_st_err_msg);

int fn_call_actn_add_mrgn( char *c_ServiceName,
													 struct vw_pstn_actn *ptr_st_pstn_actn,
                  				 struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                  				 struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                  	   		 struct vw_err_msg *ptr_st_err_msg,
                           char *c_imtm_addmrgn_flg);  /*** Ver 3.4 ***/

int fn_call_actn_imtm( char *c_ServiceName,
											 struct vw_pstn_actn *ptr_st_pstn_actn,
                  		 struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                  		 struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                  	 	 struct vw_err_msg *ptr_st_err_msg,
                       char   *c_imtm_addmrgn_flg);  /*** Ver 3.4 ***/

int fn_call_actn_cntrct_split ( char *c_ServiceName,
											 					struct vw_pstn_actn *ptr_st_pstn_actn,
                  		 					struct vw_undfut_pos *ptr_st_undfut_pos_crrnt_1,
                  		 					struct vw_undfut_pos *ptr_st_undfut_pos_to_be_1,
                  	 	 					struct vw_err_msg *ptr_st_err_msg);

int fn_call_addhoc_add_mrgn ( char *c_ServiceName,			/***	2.0	***/
	                            struct vw_pstn_actn *ptr_st_pstn_actn,
   		                        struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
      		                    struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
          	                  struct vw_err_msg *ptr_st_err_msg);

int fn_call_actn_conv_fut_to_futpls( char *c_ServiceName,			/*** Ver 2.4 ***/
                             				 struct vw_pstn_actn *ptr_st_pstn_actn,
                             				 struct vw_undfut_pos *ptr_undfut_pos_crrnt,
                             				 struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                             				 struct vw_err_msg *ptr_st_err_msg);

int fn_call_actn_create_futpls( char *c_ServiceName,         /*** Ver 2.4 ***/
                             		struct vw_pstn_actn *ptr_st_pstn_actn,
																double d_rlsd_mrgn,
                             		struct vw_err_msg *ptr_st_err_msg);

int fn_calc_min_mrgn( char *c_ServiceName,                                 /** Ver 4.2 ***/
                       struct vw_pstn_actn *ptr_st_pstn_actn,
                       struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                       struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                       struct vw_err_msg *ptr_st_err_msg,
                       char   *c_imtm_addmrgn_flg);

/*****************DECLARATION FOR 1.1*************/
double d_pl_MTM ;
double d_avl_mrgn_MTM ;
double d_trd_mrgn_MTM_b ;
double d_ord_mrgn_MTM_b ;
double d_spread_mrgn_MTM_b ;
double d_add_mrgn_MTM ;
double d_trd_mrgn_MTM_a ;
double d_ord_mrgn_MTM_a ;
double d_spread_mrgn_MTM_a ;
long 	 l_opnpstn_MTM ;
long	 int li_cmp_MTM;
long	 int li_cmp;			/***	2.0	***/

char	 c_expry_dt_MTM[22];
char	 c_bnk_accnt_MTM[13];
char	 c_time[21];
char	 c_filetime[9];
char	 c_filename[100];
char	 c_filedata[1000];
double d_bft_amt_MTM ;
double d_alctd_amt_MTM ;
double d_plg_amt_MTM ;
double d_nwb_amt_MTM=0;       		/***  Ver 2.3 ***/
double d_tot_shr_plgd_amt_MTM=0;  /***  Ver 2.3 ***/
double d_eab_amt_MTM=0;           /***  Ver 2.3 ***/
double d_cab_amt_MTM=0;           /***  Ver 5.5 ***/
double d_cab_amt_mco_MTM=0;       /***  Ver 5.5 ***/
double d_fdr_amt_MTM=0;           /***  Ver 3.5 ***/
double d_exec_rt;	 


/******* Commented in Ver 2.7  **********

long  l_init_mrgn_prcnt_MTM ;
long  l_min_mrgn_prcnt_MTM ;
long  l_somc_prcnt_MTM ;
long  l_spread_mrgn_MTM ;
long  l_init_mrgn_prcnt_MTM ;
long  l_avm_prcnt_MTM ;

****************************************/

/*********** Ver 2.7 starts *************/

double d_init_mrgn_prcnt_MTM ;
double d_min_mrgn_prcnt_MTM ;
double d_somc_prcnt_MTM ;
double d_spread_mrgn_MTM ;
double d_avm_prcnt_MTM ;

/*********** Ver 2.7 ends   *************/

long  l_exctd_opn_pstn_MTM ;
long  l_ord_opn_pstn_MTM ;
FILE 	*fp ;

/*****************DECLARATION FOR 1.1 *************/

void SFO_UPD_FUT_POS( TPSVCINFO *rqst )
{
	char c_ServiceName[33];
  char c_err_msg[256];
  char c_upos_avl;
	char c_currexp_dt[23];  /***	Ver 1.8 ***/
  char c_imtm_addmrgn_flg ='N'; /** Ver 3.4 **/
  char c_temp_str[500];  /*** Ver 3.8 ***/
  char c_ucc_cd[13]; /*ver 5.6*/ 
  int i_returncode;
  int i_ip_len;
  int i_op_len;
  int i_trnsctn;

	long l_frs_qty ;		/** Ver 1.4 **/
	long l_cvr_qty ;    /** Ver 1.4 **/
	long l_can_qty=0;   /** Ver 1.8 **/

  EXEC SQL BEGIN DECLARE SECTION;
		/** Input action to be performed **/
    struct vw_pstn_actn *ptr_st_pstn_actn; 

		/** Current underlying level position **/
    struct vw_undfut_pos st_undfut_pos_crrnt; 
		/** Undelying level position to be **/
    struct vw_undfut_pos st_undfut_pos_to_be;

		char	c_cntrct_tag;
		char	c_mtm_flag;
    varchar c_trade_dt[12];
  EXEC SQL END DECLARE SECTION;

  struct vw_err_msg *ptr_st_err_msg;
  struct vw_undfut_pos st_undfut_pos_to_be_tmp; /** ver 4.2 **/
  struct vw_pstn_actn st_pstn_actn_tmp; /** ver 4.2 **/
  struct vw_undfut_pos st_undfut_pos_crrnt_tmp;  /** ver 4.2 **/

  MEMSET(st_undfut_pos_to_be_tmp);  /** ver 4.2 **/
  MEMSET(st_pstn_actn_tmp);         /** ver 4.2 **/
  MEMSET(st_undfut_pos_crrnt_tmp);  /** ver 4.2 **/

  TPTRANID tranid;                  /** ver 4.2 **/

	if(DEBUG_MSG_LVL_3)
  {	
		fn_userlog ( c_ServiceName, "*********** Start of SFO_UPD_FUT_POS **********" );
	}

  ptr_st_pstn_actn = ( struct vw_pstn_actn *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);

  ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
  if ( ptr_st_err_msg ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31005", TPMSG, c_err_msg );
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }
  memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

	rtrim(ptr_st_pstn_actn->c_cln_mtch_accnt);
	rtrim(ptr_st_pstn_actn->c_undrlyng);
	rtrim(ptr_st_pstn_actn->c_expry_dt);
	rtrim(ptr_st_pstn_actn->c_ref_rmrks);

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_pstn_actn->c_rout_crt );

  if(DEBUG_MSG_LVL_1)		/**** Ver 4.6 ****/
  {
    fn_userlog ( c_ServiceName,"c_cln_mtch_accnt :%s: c_xchng_cd :%s: c_undrlyng :%s: c_trnsctn_flw :%c: l_actn_typ :%ld:",ptr_st_pstn_actn->c_cln_mtch_accnt,ptr_st_pstn_actn->c_xchng_cd,ptr_st_pstn_actn->c_undrlyng,ptr_st_pstn_actn->c_trnsctn_flw,ptr_st_pstn_actn->l_actn_typ );
  	fn_userlog ( c_ServiceName,"c_prd_typ :%c: c_expry_dt :%s: l_orgnl_qty :%ld: l_orgnl_rt :%ld:",ptr_st_pstn_actn->c_prd_typ,ptr_st_pstn_actn->c_expry_dt,ptr_st_pstn_actn->l_orgnl_qty,ptr_st_pstn_actn->l_orgnl_rt );
  	fn_userlog ( c_ServiceName,"l_new_qty :%ld:,l_new_rt :%ld:,l_exec_qty :%ld:,l_exec_rt :%ld:",ptr_st_pstn_actn->l_new_qty,ptr_st_pstn_actn->l_new_rt,ptr_st_pstn_actn->l_exec_qty,ptr_st_pstn_actn->l_exec_rt);
	}
	

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "SFO_UPD_FUT_POS - I" );
  	fn_userlog ( c_ServiceName,"c_user_id 	     :%s:",ptr_st_pstn_actn->c_user_id );
  	fn_userlog ( c_ServiceName,"l_session_id      :%ld:",ptr_st_pstn_actn->l_session_id );
  	fn_userlog ( c_ServiceName,"c_prd_typ        :%c:",ptr_st_pstn_actn->c_prd_typ );
  	fn_userlog ( c_ServiceName,"c_expry_dt       :%s:",ptr_st_pstn_actn->c_expry_dt );
  	fn_userlog ( c_ServiceName,"c_exrc_typ       :%c:",ptr_st_pstn_actn->c_exrc_typ );
  	fn_userlog ( c_ServiceName,"l_actn_typ       :%ld:",ptr_st_pstn_actn->l_actn_typ );
  	fn_userlog ( c_ServiceName,"l_orgnl_qty      :%ld:",ptr_st_pstn_actn->l_orgnl_qty );
  	fn_userlog ( c_ServiceName,"l_orgnl_rt       :%ld:",ptr_st_pstn_actn->l_orgnl_rt );
  	fn_userlog ( c_ServiceName,"l_new_qty        :%ld:",ptr_st_pstn_actn->l_new_qty );
  	fn_userlog ( c_ServiceName,"l_new_rt         :%ld:",ptr_st_pstn_actn->l_new_rt );
  	fn_userlog ( c_ServiceName,"l_exec_qty       :%ld:",ptr_st_pstn_actn->l_exec_qty );
  	fn_userlog ( c_ServiceName,"l_exec_rt        :%ld:",ptr_st_pstn_actn->l_exec_rt );
  	fn_userlog ( c_ServiceName,"l_fresh_qty      :%ld:",ptr_st_pstn_actn->l_fresh_qty );
  	fn_userlog ( c_ServiceName,"l_cover_qty      :%ld:",ptr_st_pstn_actn->l_cover_qty );
  	fn_userlog ( c_ServiceName,"d_add_mrgn_amt   :%lf:",ptr_st_pstn_actn->d_add_mrgn_amt );
  	fn_userlog ( c_ServiceName,"l_curr_rt        :%ld:",ptr_st_pstn_actn->l_curr_rt );
  	fn_userlog ( c_ServiceName,"c_ref_rmrks      :%s:",ptr_st_pstn_actn->c_ref_rmrks );
  	fn_userlog ( c_ServiceName,"c_cntrct_tag      :%c:",ptr_st_pstn_actn->c_cntrct_tag );
		fn_userlog ( c_ServiceName,"c_prc_flg      :%c:",ptr_st_pstn_actn->c_nkd_blkd_flg );			/***	Ver 2.0 Price Flag	***/
  	fn_userlog ( c_ServiceName,"ptr_st_pstn_actn->l_actn_typ      :%ld| ",ptr_st_pstn_actn->l_actn_typ );
		
	}	

	if(DEBUG_MSG_LVL_5)  /*** Ver 3.0 ***/
  {
    fn_userlog ( c_ServiceName,"ptr_st_pstn_actn->c_nkd_blkd_flg :%c| ",ptr_st_pstn_actn->c_nkd_blkd_flg);
  }


	if ( ( ptr_st_pstn_actn->l_actn_typ != ADD_MARGIN  ) &&
	     ( ptr_st_pstn_actn->l_actn_typ != CONTRACT_SPLIT ) &&
	     ( ptr_st_pstn_actn->l_actn_typ != CLOSE_OUT_DEALS ) &&
	     ( ptr_st_pstn_actn->l_actn_typ != INTRADAY_MTM_REPORT ) &&
			 ( ptr_st_pstn_actn->l_actn_typ != INTRADAY_MTM )	&&
			 ( ptr_st_pstn_actn->l_actn_typ != ADHOC_ADD_MRGN_RQST) &&					 /***  Ver 2.0 ***/                
			 ( ptr_st_pstn_actn->l_actn_typ != CONV_TO_FUTPLS) &&
			 ( ptr_st_pstn_actn->l_actn_typ != CONV_TO_PART_FUTPLS	) )		/*** Ver 2.4 Added for Conversion from future to future plus ****/	
	{
		/******** Fetch the c_tag for the contract from contract master ******/

		/*** Commented In Ver 4.1 ***	

  	EXEC SQL
    	SELECT  FCM_CNTRCT_TAG
			INTO		:c_cntrct_tag
			FROM		FCM_FO_CNTRCT_MSTR
    	WHERE 	FCM_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
    	AND   	FCM_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
    	AND   	FCM_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
    	AND   	FCM_EXPRY_DT        = to_date( :ptr_st_pstn_actn->c_expry_dt,
                                           	'dd-mon-yyyy' )
    	AND   	fcm_exer_typ        = :ptr_st_pstn_actn->c_exrc_typ;

		*** Ver 4.1 Comment Ends ***/
		
		/*** Ver 4.1  Starts ***/
				
		EXEC SQL
      SELECT  FTQ_CNTRCT_TAG
      INTO    :c_cntrct_tag
      FROM    FTQ_FO_TRD_QT
      WHERE   FTQ_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
      AND     FTQ_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
      AND     FTQ_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
      AND     FTQ_EXPRY_DT        = to_date( :ptr_st_pstn_actn->c_expry_dt,
                                            'dd-mon-yyyy' )
      AND     FTQ_EXER_TYP        = :ptr_st_pstn_actn->c_exrc_typ;

    /*** Ver 4.1 Ends ***/

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31010", SQLMSG, ptr_st_err_msg->c_err_msg );
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }
		
		ptr_st_pstn_actn->c_cntrct_tag = c_cntrct_tag;
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Getting the current unerlying position" );
	}

	/******** Get underlying level position for the Exchange, client, ********/
  /******** underlying, tag combination into UPOS_crrnt             ********/
	c_upos_avl = 'Y';

  EXEC SQL
    SELECT  FUP_CLM_MTCH_ACCNT,
						FUP_XCHNG_CD,
						FUP_PRDCT_TYP,
						FUP_INDSTK,
						FUP_UNDRLYNG,
						FUP_CNTRCT_TAG,
						FUP_UIBUY_QTY,
						FUP_UIBUY_VAL,
						FUP_UISELL_QTY,
						FUP_UISELL_VAL,
						FUP_UEXBUY_QTY,
						FUP_UEXBUY_VAL,
						FUP_UEXSELL_QTY,
						FUP_UEXSELL_VAL,
						FUP_UBUY_EXCTD_QTY,
						FUP_USELL_EXCTD_QTY,
						FUP_UOPNPSTN_FLW,
						FUP_UOPNPSTN_QTY,
						FUP_UOPNPSTN_VAL,
						FUP_UMTM_OPN_VAL,
						FUP_ADD_MRGN_VAL,
						FUP_UORDR_MRGN,
						FUP_UEXCTD_MRGN,
						FUP_USPREAD_MRGN,
						FUP_USPREAD_PNL,
						FUP_UTRD_MRGN,
						NVL(FUP_MTM_FLG,'O'),
						NVL(FUP_UMIN_TRD_MRGN,0)
		INTO		:st_undfut_pos_crrnt.c_cln_mtch_accnt,
            :st_undfut_pos_crrnt.c_xchng_cd,
            :st_undfut_pos_crrnt.c_prd_typ,
            :st_undfut_pos_crrnt.c_ctgry_indstk,
            :st_undfut_pos_crrnt.c_undrlyng,
            :st_undfut_pos_crrnt.c_cntrct_tag,
            :st_undfut_pos_crrnt.l_ibuy_qty,
            :st_undfut_pos_crrnt.d_ibuy_ord_vl,
            :st_undfut_pos_crrnt.l_isell_qty,
            :st_undfut_pos_crrnt.d_isell_ord_vl,
            :st_undfut_pos_crrnt.l_exbuy_qty,
            :st_undfut_pos_crrnt.d_exbuy_ord_vl,
            :st_undfut_pos_crrnt.l_exsell_qty,
            :st_undfut_pos_crrnt.d_exsell_ord_vl,
            :st_undfut_pos_crrnt.l_buy_exctd_qty,
            :st_undfut_pos_crrnt.l_sell_exctd_qty,
            :st_undfut_pos_crrnt.c_opnpstn_flw,
            :st_undfut_pos_crrnt.l_opnpstn_qty,
            :st_undfut_pos_crrnt.d_org_opn_val,
            :st_undfut_pos_crrnt.d_mtm_opn_val,
            :st_undfut_pos_crrnt.d_add_mrgn_val,
            :st_undfut_pos_crrnt.d_ordr_mrgn,
            :st_undfut_pos_crrnt.d_exctd_mrgn,
            :st_undfut_pos_crrnt.d_sprd_mrgn,
            :st_undfut_pos_crrnt.d_sprd_pl,
            :st_undfut_pos_crrnt.d_trd_mrgn,
						:c_mtm_flag,
            :st_undfut_pos_crrnt.d_mm_trd_mrgn
		FROM		FUP_FUT_UNDRLYNG_PSTN
    WHERE FUP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND   FUP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
    AND   FUP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
    AND   FUP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
    AND   FUP_CNTRCT_TAG      = :ptr_st_pstn_actn->c_cntrct_tag;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31015", SQLMSG, ptr_st_err_msg->c_err_msg );
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

  /**** If a position doesnot exists, initialise the position values to ****/
	/**** default                                                         ****/
  if ( SQLCODE == NO_DATA_FOUND )
  {
    strcpy( st_undfut_pos_crrnt.c_cln_mtch_accnt,
																	ptr_st_pstn_actn->c_cln_mtch_accnt );
    strcpy( st_undfut_pos_crrnt.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
    strcpy( st_undfut_pos_crrnt.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
    st_undfut_pos_crrnt.c_prd_typ  = ptr_st_pstn_actn->c_prd_typ;
    st_undfut_pos_crrnt.c_ctgry_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
    st_undfut_pos_crrnt.c_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;
    st_undfut_pos_crrnt.l_ibuy_qty = 0;
    st_undfut_pos_crrnt.d_ibuy_ord_vl = 0;
    st_undfut_pos_crrnt.l_isell_qty = 0;
    st_undfut_pos_crrnt.d_isell_ord_vl = 0;
    st_undfut_pos_crrnt.l_exbuy_qty = 0;
    st_undfut_pos_crrnt.d_exbuy_ord_vl = 0;
    st_undfut_pos_crrnt.l_exsell_qty = 0;
    st_undfut_pos_crrnt.d_exsell_ord_vl = 0;
    st_undfut_pos_crrnt.l_buy_exctd_qty = 0;
    st_undfut_pos_crrnt.l_sell_exctd_qty = 0;
    st_undfut_pos_crrnt.c_opnpstn_flw = 'N';
    st_undfut_pos_crrnt.l_opnpstn_qty = 0;
    st_undfut_pos_crrnt.d_org_opn_val = 0;
    st_undfut_pos_crrnt.d_mtm_opn_val = 0;
    st_undfut_pos_crrnt.d_add_mrgn_val = 0;
    st_undfut_pos_crrnt.l_opn_buyqty = 0;
    st_undfut_pos_crrnt.l_opn_sellqty = 0;
    st_undfut_pos_crrnt.d_ibuy_mrgn = 0;
    st_undfut_pos_crrnt.d_isell_mrgn = 0;
    st_undfut_pos_crrnt.d_exbuy_mrgn = 0;
    st_undfut_pos_crrnt.d_exsell_mrgn = 0;
    st_undfut_pos_crrnt.d_ordr_mrgn = 0;
    st_undfut_pos_crrnt.d_exctd_mrgn = 0;
    st_undfut_pos_crrnt.d_sprd_mrgn = 0;
    st_undfut_pos_crrnt.d_sprd_pl = 0;
    st_undfut_pos_crrnt.d_trd_mrgn = 0;
    st_undfut_pos_crrnt.c_oprn_typ = '*';
  	st_undfut_pos_crrnt.d_ordr_mrgn = 0;
  	st_undfut_pos_crrnt.d_imtm_opn_val = 0;
  	st_undfut_pos_crrnt.d_imtm_exctd_mrgn = 0;
  	st_undfut_pos_crrnt.d_imtm_sprd_mrgn = 0;
  	st_undfut_pos_crrnt.d_imtm_sprd_pl = 0;
  	st_undfut_pos_crrnt.d_imtm_trd_mrgn = 0;
  	st_undfut_pos_crrnt.d_mm_exctd_mrgn = 0;
  	st_undfut_pos_crrnt.d_mm_sprd_mrgn = 0;
  	st_undfut_pos_crrnt.d_mm_sprd_pl = 0;
  	st_undfut_pos_crrnt.d_mm_trd_mrgn = 0;
    c_mtm_flag = 'O';
		c_upos_avl = 'N';
	}

	if ( ( c_mtm_flag == UNDER_MTM )             									&&
			 ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) &&
			 ( ptr_st_pstn_actn->l_session_id != 0 )                   )
	{
    fn_errlog(c_ServiceName, "B28009", DEFMSG, ptr_st_err_msg->c_err_msg );
   	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}

	/******** Set UPOS_to_be fields to default ********/
  strcpy( st_undfut_pos_to_be.c_cln_mtch_accnt,
															ptr_st_pstn_actn->c_cln_mtch_accnt );
  strcpy( st_undfut_pos_to_be.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
  strcpy( st_undfut_pos_to_be.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
  st_undfut_pos_to_be.c_prd_typ  = ptr_st_pstn_actn->c_prd_typ;
  st_undfut_pos_to_be.c_ctgry_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
  st_undfut_pos_to_be.c_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;
  st_undfut_pos_to_be.l_ibuy_qty = 0;
  st_undfut_pos_to_be.d_ibuy_ord_vl = 0;
  st_undfut_pos_to_be.l_isell_qty = 0;
  st_undfut_pos_to_be.d_isell_ord_vl = 0;
  st_undfut_pos_to_be.l_exbuy_qty = 0;
  st_undfut_pos_to_be.d_exbuy_ord_vl = 0;
  st_undfut_pos_to_be.l_exsell_qty = 0;
  st_undfut_pos_to_be.d_exsell_ord_vl = 0;
  st_undfut_pos_to_be.l_buy_exctd_qty = 0;
  st_undfut_pos_to_be.l_sell_exctd_qty = 0;
  st_undfut_pos_to_be.c_opnpstn_flw = 'N';
  st_undfut_pos_to_be.l_opnpstn_qty = 0;
  st_undfut_pos_to_be.d_org_opn_val = 0;
  st_undfut_pos_to_be.d_mtm_opn_val = 0;
  st_undfut_pos_to_be.l_opn_buyqty = 0;
  st_undfut_pos_to_be.l_opn_sellqty = 0;
  st_undfut_pos_to_be.d_ibuy_mrgn = 0;
  st_undfut_pos_to_be.d_isell_mrgn = 0;
  st_undfut_pos_to_be.d_exbuy_mrgn = 0;
  st_undfut_pos_to_be.d_exsell_mrgn = 0;
  st_undfut_pos_to_be.d_add_mrgn_val = st_undfut_pos_crrnt.d_add_mrgn_val;
  st_undfut_pos_to_be.d_exctd_mrgn = st_undfut_pos_crrnt.d_exctd_mrgn;
  st_undfut_pos_to_be.d_sprd_mrgn = st_undfut_pos_crrnt.d_sprd_mrgn;
  st_undfut_pos_to_be.d_sprd_pl = st_undfut_pos_crrnt.d_sprd_pl;
  st_undfut_pos_to_be.d_trd_mrgn = st_undfut_pos_crrnt.d_trd_mrgn;
  st_undfut_pos_to_be.c_oprn_typ = '*';

  st_undfut_pos_to_be.d_mm_trd_mrgn = st_undfut_pos_crrnt.d_mm_trd_mrgn;

	if ( ptr_st_pstn_actn->l_actn_typ == ADD_MARGIN  ) 
	{
  	st_undfut_pos_to_be.d_ordr_mrgn = st_undfut_pos_crrnt.d_ordr_mrgn;
	}
	else
	{
  	st_undfut_pos_to_be.d_ordr_mrgn = 0;
	}
  st_undfut_pos_to_be.d_imtm_opn_val = 0;
  st_undfut_pos_to_be.d_imtm_exctd_mrgn = 0;
  st_undfut_pos_to_be.d_imtm_sprd_mrgn = 0;
  st_undfut_pos_to_be.d_imtm_sprd_pl = 0;
  st_undfut_pos_to_be.d_imtm_trd_mrgn = 0;
  st_undfut_pos_to_be.d_mm_exctd_mrgn = 0;
  st_undfut_pos_to_be.d_mm_sprd_mrgn = 0;
  st_undfut_pos_to_be.d_mm_sprd_pl = 0;
/***********************************************************
  st_undfut_pos_to_be.d_mm_trd_mrgn = 0;
***********************************************************/

	if ( ( ptr_st_pstn_actn->l_actn_typ != INTRADAY_MTM ) &&
	     ( ptr_st_pstn_actn->l_actn_typ != INTRADAY_MTM_REPORT ) &&
	     ( ptr_st_pstn_actn->l_actn_typ != CONTRACT_SPLIT ) &&
	     ( ptr_st_pstn_actn->l_actn_typ != ADD_MARGIN     ) &&
			 ( ptr_st_pstn_actn->l_actn_typ != ADHOC_ADD_MRGN_RQST) &&				   /***  Ver 2.0 ***/
			 ( ptr_st_pstn_actn->l_actn_typ != CONV_TO_FUTPLS) &&
       ( ptr_st_pstn_actn->l_actn_typ != CONV_TO_PART_FUTPLS  ) )   /*** Ver 2.4 Added for Conversion from future to future p
lus ****/		
	{
		/**************Ver 1.4 starts *****************/
		l_frs_qty = 0;
	  l_cvr_qty = 0;

		if ( ptr_st_pstn_actn->l_actn_typ == ORS_TRD_CONF )
    {
       i_returncode  = fn_cal_frscvr_qty ( c_ServiceName,
                                         ptr_st_pstn_actn,
                                         ptr_st_err_msg );
       if ( i_returncode != 0 )
       {
         tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
       }

			 l_frs_qty = ptr_st_pstn_actn->l_fresh_qty;
			 l_cvr_qty = ptr_st_pstn_actn->l_cover_qty;

  		if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"The Fresh Qty is:%ld:",ptr_st_pstn_actn->l_fresh_qty);
				fn_userlog(c_ServiceName,"The Cover Qty is:%ld:",ptr_st_pstn_actn->l_cover_qty);
  		}
    }

		/**************Ver 1.4 ends *******************/

		i_returncode 	= fn_call_actn_grp1 ( c_ServiceName, 
                               			ptr_st_pstn_actn, 
											         			&st_undfut_pos_crrnt, 
											         			&st_undfut_pos_to_be, 
                               			ptr_st_err_msg );

 		if ( i_returncode != 0 )
 		{
			/* Ver 2.8 Starts */
 
			if(i_returncode == -3)
			{
			tpreturn ( TPFAIL,INSUFFICIENT_LIMITS, ( char * )ptr_st_err_msg, 0, 0 );	
			}
			else
			{
			/* Ver 2.8 Ends */
   		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
			}/* Ver 2.8 */
 		}

		/*******Added in Ver 1.4 *******/
		if ( ptr_st_pstn_actn->l_actn_typ == ORS_TRD_CONF )
    {
			 ptr_st_pstn_actn->l_fresh_qty = l_frs_qty;
			 ptr_st_pstn_actn->l_cover_qty = l_cvr_qty;
		}
	}
	
	if ( ptr_st_pstn_actn->l_actn_typ == ADD_MARGIN )
	{
    memcpy ( &st_pstn_actn_tmp, ptr_st_pstn_actn ,sizeof( struct vw_pstn_actn) );   /** Ver 4.2 **/
    memcpy ( &st_undfut_pos_crrnt_tmp, &st_undfut_pos_crrnt,sizeof( struct vw_undfut_pos) ); /** Ver 4.2 **/
    memcpy ( &st_undfut_pos_to_be_tmp, &st_undfut_pos_to_be,sizeof( struct vw_undfut_pos) ); /** Ver 4.2 **/
 
    c_imtm_addmrgn_flg='N';  /** Ver 3.4 **/
		i_returncode 	= fn_call_actn_add_mrgn ( c_ServiceName, 
                               							ptr_st_pstn_actn, 
											         							&st_undfut_pos_crrnt, 
											         							&st_undfut_pos_to_be, 
                               							ptr_st_err_msg,
                                            &c_imtm_addmrgn_flg );  /*** Ver 3.4 ***/

 		if ( i_returncode != 0 )
 		{
   		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
 		}

    /**** Ver 4.2 Starts here ****/

    i_returncode = tpsuspend ( &tranid, 0 );
    if ( i_returncode == -1 )
    {
       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }

    i_trnsctn = fn_begintran( c_ServiceName, ptr_st_err_msg->c_err_msg);
    if ( i_trnsctn == -1 )
    {
       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }

    st_pstn_actn_tmp.l_actn_typ = INTRADAY_MTM;

    i_returncode  = fn_calc_min_mrgn ( c_ServiceName,
                                        &st_pstn_actn_tmp,
                                        &st_undfut_pos_crrnt_tmp,
                                        &st_undfut_pos_to_be_tmp,
                                        ptr_st_err_msg,
                                        &c_imtm_addmrgn_flg );
    if ( i_returncode != 0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg);
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 ); 
    }

    i_trnsctn = fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg);
    if ( i_trnsctn == -1 )
    {
       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }
    st_undfut_pos_to_be.d_mm_trd_mrgn = st_undfut_pos_to_be_tmp.d_mm_trd_mrgn;
    if(DEBUG_MSG_LVL_2)	/*** Ver 4.6 ***/
    {
  		fn_userlog ( c_ServiceName, "Minimum Margin to be updated :%lf:",st_undfut_pos_to_be.d_mm_trd_mrgn); 
		}

    i_returncode = tpresume(&tranid, 0);
    if ( i_returncode == -1 )
    {
       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 ); 
    }
    /**** ver 4.2 Ends here *****/
	}

	if ( ( ptr_st_pstn_actn->l_actn_typ == INTRADAY_MTM ) ||
	     ( ptr_st_pstn_actn->l_actn_typ == INTRADAY_MTM_REPORT )	||
			 ( ptr_st_pstn_actn->l_actn_typ == ADHOC_ADD_MRGN_RQST	) )					/***	Ver 2.0	***/
	{
		/*******1.1 starts********/
    /*d_limit_MTM = ptr_st_pstn_actn->d_add_mrgn_amt ;*/
    ptr_st_pstn_actn->d_add_mrgn_amt = 0;
		/*******1.1 ends**********/

		MEMSET(c_expry_dt_MTM); /* Ver 1.8 */
    c_imtm_addmrgn_flg ='N';  /*** Ver 3.4 ***/
		i_returncode 	= fn_call_actn_imtm ( c_ServiceName, 
                               					ptr_st_pstn_actn, 
											         					&st_undfut_pos_crrnt, 
											         					&st_undfut_pos_to_be, 
                               					ptr_st_err_msg,
                                        &c_imtm_addmrgn_flg ); /** Ver 3.4 ***/

 		if ( i_returncode != 0 )
 		{
			switch ( i_returncode )
			{
				case INSUFFICIENT_LIMITS :
				if(DEBUG_MSG_LVL_3)
				{
  				fn_userlog(c_ServiceName,"STAGE I for INSUFF LMT -:%s:",ptr_st_pstn_actn->c_cln_mtch_accnt );
    			fn_userlog(c_ServiceName,"Limit :%lf: for :%s:",d_limit_MTM,ptr_st_pstn_actn->c_cln_mtch_accnt);
				}

					if ( ptr_st_pstn_actn->l_actn_typ == ADHOC_ADD_MRGN_RQST )			/***	Ver 2.0	***/
					{
						fn_userlog(c_ServiceName,"Inside INSUFFICIENT_LIMITS For ADHOC_ADD_MRGN_RQST");
						tpfree ( ( char * ) ptr_st_err_msg );
          	tpreturn ( TPFAIL, INSUFFICIENT_LIMITS, (char * )ptr_st_pstn_actn, 0, 0 );
					}
					else
					{
							/*******1.1 Start*******/
							l_exctd_opn_pstn_MTM = st_undfut_pos_to_be.l_opnpstn_qty ;
							EXEC SQL
							SELECT 	NVL(FMM_INIT_MRGN_PRCNT,0),
											NVL(FMM_MIN_MRGN_PRCNT,0),
											NVL(FMM_SOMC_PRCNT,0),
											NVL(FMM_SPREAD_MRGN,0),
											NVL(FMM_AVM_PRCNT,0)
							INTO   	:d_init_mrgn_prcnt_MTM,  /* 2.7 datatype of margin var change to double */
											:d_min_mrgn_prcnt_MTM,
											:d_somc_prcnt_MTM,
											:d_spread_mrgn_MTM,
											:d_avm_prcnt_MTM
							FROM   FMM_FO_MRGN_MSTR
							WHERE  FMM_PRDCT_TYP = 'F'
							AND    FMM_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
              AND    FMM_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd    /*** Ver 2.5 ***/
							AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
                                           FROM    FCB_FO_CLN_BSKT_ALLTD
                                           WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                           FROM    CLM_CLNT_MSTR
                                           WHERE   CLM_MTCH_ACCNT =:ptr_st_pstn_actn->c_cln_mtch_accnt)) ; 
							if ( SQLCODE != 0 )
							{
								fn_userlog(c_ServiceName,"COULDN'T INSERT DATA INTO IMTM REPORT TABLE I");
								fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
							}

							d_nwb_amt_MTM = 0; /* Ver 2.3 */
              d_fdr_amt_MTM = 0; /* Ver 3.5 */

							EXEC SQL
							SELECT  FAB_BNK_ACCNT,
											FAB_ALCTD_AMT,
											FAB_BFT_AMT,
											FAB_PLG_AMT,
										  nvl(FAB_NWB_AMT,0),     /* Ver 2.3 */
                      nvl(FAB_FDR_AMT,0)      /* Ver 3.5 */
							INTO    :c_bnk_accnt_MTM,
											:d_alctd_amt_MTM,
											:d_bft_amt_MTM,
											:d_plg_amt_MTM,
											:d_nwb_amt_MTM,   			 /* Ver 2.3 */
                      :d_fdr_amt_MTM           /* Ver 3.5 */
							FROM    FAB_FO_ALC_BFT_SMRY
							WHERE   FAB_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt ;
							if ( SQLCODE != 0 )
							{
								fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
							}

							EXEC SQL
							SELECT  TO_CHAR(sysdate,'dd-Mon-yyyy hh24:mi:ss'),TO_CHAR(sysdate,'yyyymmdd')
							INTO    :c_time,
											:c_filetime
							FROM    dual ;
							if ( SQLCODE != 0 )
							{
								fn_userlog(c_ServiceName,"COULDN'T INSERT DATA INTO IMTM REPORT TABLE II");
								fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
							}

							/******** Ver 2.3.Starts ********/
            	d_tot_shr_plgd_amt_MTM  = 0;
							d_eab_amt_MTM           = 0;
            	EXEC SQL
              	SELECT  nvl(EAB_PLG_AMT,0) * 100 /* To be inserted in paise */
              	INTO    :d_eab_amt_MTM
              	FROM    EAB_EQ_ALC_BFT_SMRY
              	WHERE   EAB_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

              	if ( SQLCODE != 0 )
              	{
                	fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
              	}

            	/** d_tot_shr_plgd_amt_MTM  = d_nwb_amt_MTM + d_plg_amt_MTM + d_eab_amt_MTM; commented in ver 5.5 **/

							/***** End of Ver 2.3 ****/

				/** Ver 5.5 starts **/

        				d_cab_amt_MTM=0;

                EXEC SQL
                SELECT  nvl(CAB_PLG_AMT,0) * 100 /* To be inserted in paise */
                INTO    :d_cab_amt_MTM
                FROM    CAB_CDX_ALC_BFT_SMRY
                WHERE   CAB_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

                if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
                {
                    fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
                }

                d_cab_amt_mco_MTM=0;

                EXEC SQL
                SELECT  nvl(CAB_PLG_AMT,0) 
                INTO    :d_cab_amt_mco_MTM
                FROM    CAB_COD_ALC_BFT_SMRY
                WHERE   CAB_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

                if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
                {
                    fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
                }

            	d_tot_shr_plgd_amt_MTM  = d_nwb_amt_MTM + d_plg_amt_MTM + d_eab_amt_MTM + d_cab_amt_MTM + d_cab_amt_mco_MTM; 
 
				/** Ver 5.5 ends **/

							/****************** Ver 1.8 Starts ***********************/

							EXEC SQL
              SELECT  FFP_IBUY_QTY + ABS( FFP_ISELL_QTY) + FFP_EXBUY_QTY  + ABS(FFP_EXSELL_QTY)
              INTO    :l_can_qty
              FROM    FFP_FO_FUTURES_PSTN
              WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
              AND     FFP_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
              AND     FFP_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
              AND     FFP_INDSTK = :ptr_st_pstn_actn->c_ctgry_indstk
              AND     FFP_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
              AND     FFP_CNTRCT_TAG = :ptr_st_pstn_actn->c_cntrct_tag
              AND     FFP_OPNPSTN_QTY = 0
              AND     (FFP_IBUY_QTY > 0 OR FFP_ISELL_QTY < 0 OR FFP_EXBUY_QTY > 0
                        OR FFP_EXSELL_QTY < 0)
              ORDER BY FFP_EXPRY_DT;

              if ( SQLCODE != 0 )
              {
                fn_userlog(c_ServiceName,"Failed While Getting Cancelled Qty");
              }
							
							if ( l_can_qty > 0 )
              {
								/*** Commented In Ver 4.2 ***
			
                EXEC SQL
                SELECT  FOD_EXPRY_DT
                INTO    :c_currexp_dt
                FROM    FOD_FO_ORDR_DTLS
                WHERE   FOD_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
                AND     FOD_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
                AND     FOD_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
                AND     FOD_INDSTK = :ptr_st_pstn_actn->c_ctgry_indstk
                AND     FOD_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
                AND     FOD_ORDR_STTS IN ( 'R','O','P','Q')
                AND     FOD_EXPRY_DT IN ( SELECT  FCM_EXPRY_DT
                                          FROM    FCM_FO_CNTRCT_MSTR
                                          WHERE   FCM_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
                                          AND     FCM_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
                                          AND     FCM_INDSTK = :ptr_st_pstn_actn->c_ctgry_indstk
                                          AND     FCM_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
                                          AND     FCM_CNTRCT_TAG = :ptr_st_pstn_actn->c_cntrct_tag
                                          );

								*** Ver 4.1 Comment Ends ***/
			
								/*** ver 4.1 Starts ***/						

								EXEC SQL
                SELECT  FOD_EXPRY_DT
                INTO    :c_currexp_dt
                FROM    FOD_FO_ORDR_DTLS
                WHERE   FOD_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
                AND     FOD_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
                AND     FOD_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
                AND     FOD_INDSTK = :ptr_st_pstn_actn->c_ctgry_indstk
                AND     FOD_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
                AND     FOD_ORDR_STTS IN ( 'R','O','P','Q')
                AND     FOD_EXPRY_DT IN ( SELECT  FTQ_EXPRY_DT
                                          FROM    FTQ_FO_TRD_QT
                                          WHERE   FTQ_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
                                          AND     FTQ_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
                                          AND     FTQ_INDSTK = :ptr_st_pstn_actn->c_ctgry_indstk
                                          AND     FTQ_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
                                          AND     FTQ_CNTRCT_TAG = :ptr_st_pstn_actn->c_cntrct_tag
                                          );

								/*** Ver 4.1 Ends ***/

                if ( SQLCODE != 0  && SQLCODE == NO_DATA_FOUND)
                {
                  fn_userlog(c_ServiceName,"Failed While Getting Expiry Date");
                }

                rtrim( c_currexp_dt );
                strcpy(c_expry_dt_MTM,c_currexp_dt);
                if(DEBUG_MSG_LVL_3)
  							{
									fn_userlog(c_ServiceName,"Here Expiry Date Is :%s:",c_currexp_dt);
								}
              }

              /************************ Ver 1.8 Ends  ************************/
	
							if(DEBUG_MSG_LVL_3)
  						{
								fn_userlog(c_ServiceName,"Expiry Date Before .TXT Is :%s:",c_currexp_dt);
							}

							sprintf(c_filename,"%s/%s/fno/imtm.txt",tuxgetenv("EBALOG_PATH"),c_filetime);
							
							/***Amts d_tot_shr_plgd_amt_MTM,d_plg_amt_MTM added in Ver 2.3*/
              /*** d_fdr_amt_MTM added in ver 3.5 ***/

							sprintf(c_filedata,"%s|%s|%s|%s|%c|%ld|%s|%c|%c|%c|%s|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%ld|%ld|%lf|%lf|%lf",c_time,ptr_st_pstn_actn->c_cln_mtch_accnt,ptr_st_pstn_actn->c_xchng_cd,ptr_st_pstn_actn->c_undrlyng,ptr_st_pstn_actn->c_prd_typ,ptr_st_pstn_actn->l_strike_prc,c_expry_dt_MTM,ptr_st_pstn_actn->c_exrc_typ,ptr_st_pstn_actn->c_opt_typ,ptr_st_pstn_actn->c_cntrct_tag,c_bnk_accnt_MTM,d_limit_MTM,d_alctd_amt_MTM,d_bft_amt_MTM,d_init_mrgn_prcnt_MTM,d_min_mrgn_prcnt_MTM,d_somc_prcnt_MTM,d_spread_mrgn_MTM,d_ord_mrgn_MTM_b,d_trd_mrgn_MTM_b,d_spread_mrgn_MTM_b,d_ord_mrgn_MTM_a,d_trd_mrgn_MTM_a,d_spread_mrgn_MTM_a,d_add_mrgn_MTM,l_opnpstn_MTM,li_cmp_MTM,d_plg_amt_MTM,d_tot_shr_plgd_amt_MTM,d_fdr_amt_MTM); /*** 2.7 Margin var datatype chnage to double **/

							/***************************/
							/****Inserting into file ***/
							/***************************/
							/**** Commented in Ver 3.8 *****
							fp = (FILE *)fopen(c_filename,"a") ;
							if(fp == NULL)
							{
									fn_userlog(c_ServiceName,"UNABLE TO OPEN FILE FOR MTM");
							}
							fprintf(fp,"%s\n",c_filedata);
							fclose(fp);
							Commented in Ver 3.8 Ends *****/
							/****Completed Inserting ***/
							/***************************/
							/* Uncomment the log in Ver 3.8 ***/
              if(DEBUG_MSG_LVL_3)	/*** Ver 4.6	***/
              {
								fn_userlog(c_ServiceName,"FINAL LOG STARTS_____________________________");
							}

							if(DEBUG_MSG_LVL_3)
							{
								/*** coomented in Ver 3.8 ****
								fn_userlog(c_ServiceName,"c_filedata             	|%s|",c_filedata);
								fn_userlog(c_ServiceName,"c_filetime             	|%s|",c_filetime);
								fn_userlog(c_ServiceName,"c_filename             	|%s|",c_filename); ****/

								fn_userlog(c_ServiceName,"c_time             			|%s|",c_time);
								fn_userlog(c_ServiceName,"d_limit_MTM             |%lf|",d_limit_MTM);
								fn_userlog(c_ServiceName,"c_bnk_accnt_MTM         |%s|",c_bnk_accnt_MTM);
								fn_userlog(c_ServiceName,"d_alctd_amt_MTM         |%lf|",d_alctd_amt_MTM);
								fn_userlog(c_ServiceName,"d_bft_amt_MTM           |%lf|",d_bft_amt_MTM);
								fn_userlog(c_ServiceName,"d_somc_prcnt_MTM        |%lf|",d_somc_prcnt_MTM);
								fn_userlog(c_ServiceName,"d_avm_prcnt_MTM        |%lf|",d_avm_prcnt_MTM);
								fn_userlog( c_ServiceName,"d_add_mrgn_MTM         |:%lf:|", d_add_mrgn_MTM );
								fn_userlog( c_ServiceName, "Match Account |%s|", ptr_st_pstn_actn->c_cln_mtch_accnt );
								fn_userlog( c_ServiceName, "Exchange code |%s|", ptr_st_pstn_actn->c_xchng_cd );
								fn_userlog( c_ServiceName, "Product Type  |%c|", ptr_st_pstn_actn->c_prd_typ );
								fn_userlog( c_ServiceName, "Underlyng     |%s|", ptr_st_pstn_actn->c_undrlyng );
								fn_userlog( c_ServiceName, "Category      |%c|", ptr_st_pstn_actn->c_ctgry_indstk );
								fn_userlog( c_ServiceName, "Contract tag  |%c|", ptr_st_pstn_actn->c_cntrct_tag );
								fn_userlog( c_ServiceName, "IMTM Remarks  |%s|", ptr_st_pstn_actn->c_imtm_rmrks );
								fn_userlog( c_ServiceName, "Expiry Date   |%s|", ptr_st_pstn_actn->c_expry_dt );
								fn_userlog( c_ServiceName, "Exercise Type |%c|", ptr_st_pstn_actn->c_exrc_typ );
								fn_userlog( c_ServiceName, "Opt Type      |%c|", ptr_st_pstn_actn->c_opt_typ );
								fn_userlog( c_ServiceName, "Strike Price  |%ld|", ptr_st_pstn_actn->l_strike_prc );
								fn_userlog( c_ServiceName, "Plg amt       |%lf|", d_plg_amt_MTM );
								fn_userlog(c_ServiceName,"FINAL LOG ENDS__________________________________");
							}

              if(DEBUG_MSG_LVL_2) /*** Ver 4.6  ***/
              {
                fn_userlog(c_ServiceName,"d_init_mrgn_prcnt_MTM   |%lf|",d_init_mrgn_prcnt_MTM);
                fn_userlog(c_ServiceName,"d_min_mrgn_prcnt_MTM    |%lf|",d_min_mrgn_prcnt_MTM);
                fn_userlog(c_ServiceName,"d_spread_mrgn_MTM       |%lf|",d_spread_mrgn_MTM);
                fn_userlog(c_ServiceName,"d_ord_mrgn_MTM_b        |%lf|",d_ord_mrgn_MTM_b);
                fn_userlog(c_ServiceName,"d_trd_mrgn_MTM_b        |%lf|",d_trd_mrgn_MTM_b);
                fn_userlog(c_ServiceName,"d_spread_mrgn_MTM_b     |%lf|",d_spread_mrgn_MTM_b);
                fn_userlog(c_ServiceName,"d_ord_mrgn_MTM_a        |%lf|",d_ord_mrgn_MTM_a);
                fn_userlog(c_ServiceName,"d_trd_mrgn_MTM_a        |%lf|",d_trd_mrgn_MTM_a);
                fn_userlog(c_ServiceName,"d_spread_mrgn_MTM_a     |%lf|",d_spread_mrgn_MTM_a);
							}

              if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
              {
								fn_userlog(c_ServiceName,"FINAL LOG ENDS_____________________________");
							}

						/**** uncomment for log in Ver 3.8 *******
						*********Commented by Sangeet in IBM *********************************************/
					/*******1.1 ends*******/
  				tpfree ( ( char * ) ptr_st_err_msg );

            /***START OF VER 3.8 ***/

            if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
            {
            	fn_userlog(c_ServiceName,"Error case shashi");
						}

            if( ptr_st_pstn_actn->l_actn_typ == INTRADAY_MTM )
            {
          sprintf(c_temp_str,"^%s^%lf^%lf^%lf^%lf^%lf^%lf^%lf^%ld^%ld^%lf",c_expry_dt_MTM,d_ord_mrgn_MTM_b,d_trd_mrgn_MTM_b,d_spread_mrgn_MTM_b,d_ord_mrgn_MTM_a,d_trd_mrgn_MTM_a,d_spread_mrgn_MTM_a,d_add_mrgn_MTM,l_opnpstn_MTM,li_cmp_MTM,d_limit_MTM);

          strcat(ptr_st_pstn_actn->c_imtm_rmrks,c_temp_str);
          tpreturn ( TPFAIL, -7, (char * )ptr_st_pstn_actn, 0, 0 );
            }
            else
            tpreturn ( TPFAIL, INSUFFICIENT_LIMITS, (char * )ptr_st_pstn_actn, 0, 0 );

             /***END OF VER 3.8 ***/
  				tpreturn ( TPFAIL, INSUFFICIENT_LIMITS, (char * )ptr_st_pstn_actn, 0, 0 );

				}
					break;
				default :
   				 tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
					 break;
			}
 		}
 		else if ( ( i_returncode == 0 )                     &&
	            ( ptr_st_pstn_actn->l_actn_typ == INTRADAY_MTM_REPORT ) )
 		{
  		tpfree ( ( char * ) ptr_st_err_msg );
  		tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_pstn_actn, 0, 0 );
		}
	}

	if ( ptr_st_pstn_actn->l_actn_typ == CONTRACT_SPLIT )
	{
		i_returncode 	= fn_call_actn_cntrct_split ( c_ServiceName, 
                               									ptr_st_pstn_actn, 
											         									&st_undfut_pos_crrnt, 
											         									&st_undfut_pos_to_be, 
                               									ptr_st_err_msg );

 		if ( i_returncode != 0 )
 		{
   		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
 		}
	}

	
	/* Ver 2.4 Added for Conversion of Part Future Positions to Future Plus Position */

  if ( ptr_st_pstn_actn->l_actn_typ == CONV_TO_FUTPLS || ptr_st_pstn_actn->l_actn_typ == CONV_TO_PART_FUTPLS )
  {
		if(DEBUG_MSG_LVL_3)
    {
    	fn_userlog(c_ServiceName,"**********inside conv_to_part_fut****************");
    	fn_userlog(c_ServiceName,"ptr_st_pstn_actn->l_actn_typ   [%d]",ptr_st_pstn_actn->l_actn_typ);
    	fn_userlog(c_ServiceName,"ptr_st_pstn_actn->c_undrlyng   [%s]",ptr_st_pstn_actn->c_undrlyng);
    	fn_userlog(c_ServiceName,"ptr_st_pstn_actn->l_orgnl_qty  [%ld]",ptr_st_pstn_actn->l_orgnl_qty);
    	fn_userlog(c_ServiceName,"ptr_st_pstn_actn->l_orgnl_rt   [%ld]",ptr_st_pstn_actn->l_orgnl_rt);
    	fn_userlog(c_ServiceName,"ptr_st_pstn_actn->l_new_qty    [%ld]",ptr_st_pstn_actn->l_new_qty);
    	fn_userlog(c_ServiceName,"ptr_st_pstn_actn->l_new_rt     [%ld]",ptr_st_pstn_actn->l_new_rt);
    	fn_userlog(c_ServiceName,"ptr_st_pstn_actn->l_fresh_qty  [%ld]",ptr_st_pstn_actn->l_fresh_qty);
		}

    i_returncode  = fn_call_actn_conv_fut_to_futpls( 	c_ServiceName,
                                    		          	  ptr_st_pstn_actn,
                                            					&st_undfut_pos_crrnt,
                                            					&st_undfut_pos_to_be,
                                            					ptr_st_err_msg );

    if ( i_returncode != 0 )
    {
      switch ( i_returncode )
      {
        case INSUFFICIENT_LIMITS :
					fn_userlog(c_ServiceName,"*******INSUFFICIENT_LIMITS********");
          tpreturn ( TPFAIL, INSUFFICIENT_LIMITS, ( char * )ptr_st_err_msg, 0, 0 );
          break;

        default :
           tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
           break;
      }
    }
  }

  if ( ptr_st_pstn_actn->l_actn_typ != EOD_MRGN_REP ) /** If condition added in Ver 5.4 **/
  {

  	if( DEBUG_MSG_LVL_5 )   /*** Added in Ver 2.6 ***/
    {
      fn_userlog(c_ServiceName,"Additional Margin before update       |%lf|",st_undfut_pos_to_be.d_add_mrgn_val);
    }

	  if ( st_undfut_pos_to_be.l_opnpstn_qty > 0 )
	  {
		  st_undfut_pos_to_be.c_opnpstn_flw = BUY;
	  }
	  else if ( st_undfut_pos_to_be.l_opnpstn_qty < 0 )
	  {
		  st_undfut_pos_to_be.c_opnpstn_flw = SELL;
	  }
    else
    {
	  	st_undfut_pos_to_be.c_opnpstn_flw = NEUTRAL;
    }	

	  /** Update the underlying level position on to the table **/
	  if( c_upos_avl == 'N')
	  {
	
      EXEC SQL
      /** SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY') Commented in ver 2.9 **/
      /* SELECT  to_char( GREATEST(exg_nxt_trd_dt,exg_tmp_trd_dt), 'DD-Mon-YYYY' )** Ver 2.9 ** Reverted In Ver 2.9 Bug Fix*/
      SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY') /*** Reverted In Ver 2.9 Bug Fix **/
      INTO   :c_trade_dt
      FROM   EXG_XCHNG_MSTR
      WHERE  EXG_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
      AND    EXG_MKT_TYP = 'D';

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31020", SQLMSG, ptr_st_err_msg->c_err_msg );
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      }
      MEMSET(c_ucc_cd);/*** Added in VER 5.6 Starts here : Fetching UCC code for client ***/

        EXEC SQL
        SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
        INTO  :c_ucc_cd
        FROM  CLM_CLNT_MSTR
        WHERE CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt;

        if ( SQLCODE != 0 )
        {
           fn_errlog(c_ServiceName, "S31025", SQLMSG, ptr_st_err_msg->c_err_msg );
           tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
        }

        rtrim(c_ucc_cd);

        if(DEBUG_MSG_LVL_3)
          fn_userlog(c_ServiceName," VER 5.6 -- Match ID :%s: have UCC code :%s:", ptr_st_pstn_actn->c_cln_mtch_accnt, c_ucc_cd);

        /*** VER 5.6 ends here ***/

      EXEC SQL
      INSERT INTO FUP_FUT_UNDRLYNG_PSTN
      (
    		FUP_CLM_MTCH_ACCNT,
				FUP_XCHNG_CD,
				FUP_PRDCT_TYP,
				FUP_INDSTK,
				FUP_UNDRLYNG,
				FUP_CNTRCT_TAG,
				FUP_UIBUY_QTY,
				FUP_UIBUY_VAL,
				FUP_UISELL_QTY,
				FUP_UISELL_VAL,
				FUP_UEXBUY_QTY,
				FUP_UEXBUY_VAL,
				FUP_UEXSELL_QTY,
				FUP_UEXSELL_VAL,
				FUP_UBUY_EXCTD_QTY,
				FUP_USELL_EXCTD_QTY,
				FUP_UOPNPSTN_FLW,
				FUP_UOPNPSTN_QTY,
				FUP_UOPNPSTN_VAL,
				FUP_UMTM_OPN_VAL,
				FUP_UORDR_MRGN,
				FUP_UEXCTD_MRGN,
				FUP_USPREAD_MRGN,
				FUP_USPREAD_PNL,
				FUP_ADD_MRGN_VAL,
				FUP_UTRD_MRGN,
        FUP_TRD_DT,
				FUP_UMIN_TRD_MRGN,
			   FUP_UCC_CD         /*ver 5.6*/
     )
      VALUES
      (
				:st_undfut_pos_to_be.c_cln_mtch_accnt,
        :st_undfut_pos_to_be.c_xchng_cd,
        :st_undfut_pos_to_be.c_prd_typ,
        :st_undfut_pos_to_be.c_ctgry_indstk,
        :st_undfut_pos_to_be.c_undrlyng,
        :st_undfut_pos_to_be.c_cntrct_tag,
        :st_undfut_pos_to_be.l_ibuy_qty,
        :st_undfut_pos_to_be.d_ibuy_ord_vl,
        :st_undfut_pos_to_be.l_isell_qty,
        :st_undfut_pos_to_be.d_isell_ord_vl,
        :st_undfut_pos_to_be.l_exbuy_qty,
        :st_undfut_pos_to_be.d_exbuy_ord_vl,
        :st_undfut_pos_to_be.l_exsell_qty,
        :st_undfut_pos_to_be.d_exsell_ord_vl,
        :st_undfut_pos_to_be.l_buy_exctd_qty,
        :st_undfut_pos_to_be.l_sell_exctd_qty,
        :st_undfut_pos_to_be.c_opnpstn_flw,
        :st_undfut_pos_to_be.l_opnpstn_qty,
        :st_undfut_pos_to_be.d_org_opn_val,
        :st_undfut_pos_to_be.d_mtm_opn_val,
        :st_undfut_pos_to_be.d_ordr_mrgn,
        :st_undfut_pos_to_be.d_exctd_mrgn,
        :st_undfut_pos_to_be.d_sprd_mrgn,
        :st_undfut_pos_to_be.d_sprd_pl,
        :st_undfut_pos_to_be.d_add_mrgn_val,
        :st_undfut_pos_to_be.d_trd_mrgn,
        :c_trade_dt,
        :st_undfut_pos_to_be.d_mm_trd_mrgn,
		    :c_ucc_cd           /*ver 5.6*/
    	);

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31030", SQLMSG, ptr_st_err_msg->c_err_msg );
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      }
	  }
	  else
	  {

      /***  Ver 4.0 starts ***/

      EXEC SQL
      SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY') 
      INTO   :c_trade_dt
      FROM   EXG_XCHNG_MSTR
      WHERE  EXG_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
      AND    EXG_MKT_TYP = 'D';

      if ( SQLCODE != 0 )
      {
         fn_errlog(c_ServiceName, "S31035", SQLMSG, ptr_st_err_msg->c_err_msg );
         tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      }
      /***  Ver 4.0 ends ***/
	  
  	  EXEC SQL
      UPDATE  FUP_FUT_UNDRLYNG_PSTN
			SET			FUP_UIBUY_QTY       = :st_undfut_pos_to_be.l_ibuy_qty,
							FUP_UIBUY_VAL       = :st_undfut_pos_to_be.d_ibuy_ord_vl,
							FUP_UISELL_QTY      = :st_undfut_pos_to_be.l_isell_qty,
							FUP_UISELL_VAL      = :st_undfut_pos_to_be.d_isell_ord_vl,
							FUP_UEXBUY_QTY      = :st_undfut_pos_to_be.l_exbuy_qty,
							FUP_UEXBUY_VAL      = :st_undfut_pos_to_be.d_exbuy_ord_vl,
							FUP_UEXSELL_QTY     = :st_undfut_pos_to_be.l_exsell_qty,
							FUP_UEXSELL_VAL     = :st_undfut_pos_to_be.d_exsell_ord_vl,
							FUP_UBUY_EXCTD_QTY  = :st_undfut_pos_to_be.l_buy_exctd_qty,
							FUP_USELL_EXCTD_QTY = :st_undfut_pos_to_be.l_sell_exctd_qty,
							FUP_UOPNPSTN_FLW    = :st_undfut_pos_to_be.c_opnpstn_flw,
							FUP_UOPNPSTN_QTY    = :st_undfut_pos_to_be.l_opnpstn_qty,
							FUP_UOPNPSTN_VAL    = :st_undfut_pos_to_be.d_org_opn_val,
							FUP_UMTM_OPN_VAL    = :st_undfut_pos_to_be.d_mtm_opn_val,
							FUP_UORDR_MRGN      = :st_undfut_pos_to_be.d_ordr_mrgn,
							FUP_UEXCTD_MRGN     = :st_undfut_pos_to_be.d_exctd_mrgn,
							FUP_USPREAD_MRGN    = :st_undfut_pos_to_be.d_sprd_mrgn,
							FUP_USPREAD_PNL     = :st_undfut_pos_to_be.d_sprd_pl,
							FUP_ADD_MRGN_VAL    = :st_undfut_pos_to_be.d_add_mrgn_val,
							FUP_UTRD_MRGN    		= :st_undfut_pos_to_be.d_trd_mrgn,
							FUP_UMIN_TRD_MRGN		= :st_undfut_pos_to_be.d_mm_trd_mrgn,
              FUP_TRD_DT          = :c_trade_dt                            /*** Ver 4.0 ***/	
      WHERE 	FUP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
    	AND   	FUP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
    	AND   	FUP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
    	AND   	FUP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
    	AND   	FUP_CNTRCT_TAG      = :ptr_st_pstn_actn->c_cntrct_tag;

     	if ( SQLCODE != 0 )
     	{
       	fn_errlog(c_ServiceName, "S31040", SQLMSG, ptr_st_err_msg->c_err_msg );
     	  tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
   	  }

   

  		/** Ver 3.4 Starts **/
      if ( DEBUG_MSG_LVL_3 )
      {
        fn_userlog(c_ServiceName,"ptr_st_pstn_actn->l_actn_typ :%ld:",ptr_st_pstn_actn->l_actn_typ);
        fn_userlog(c_ServiceName," st_undfut_pos_to_be.l_opnpstn_qty :%ld:",st_undfut_pos_to_be.l_opnpstn_qty);
        fn_userlog(c_ServiceName," ptr_st_pstn_actn->c_prd_typ :%c:",ptr_st_pstn_actn->c_prd_typ);  
      }
 
      if ( DEBUG_MSG_LVL_2 ) /**** Ver 4.6 ****/
      {
        fn_userlog(c_ServiceName," c_imtm_addmrgn_flg 4 :%c:",c_imtm_addmrgn_flg);
 	  	}

  		if((	ptr_st_pstn_actn->l_actn_typ == ORS_TRD_CONF  ||
	  			  ptr_st_pstn_actn->l_actn_typ == EOD_MTM       ||
		  		  ptr_st_pstn_actn->l_actn_typ == INTRADAY_MTM  ||
            ptr_st_pstn_actn->l_actn_typ == ADD_MARGIN    ||
            c_imtm_addmrgn_flg           == 'Y'           ||
            ptr_st_pstn_actn->l_actn_typ == CONTRACT_SPLIT ||
            ptr_st_pstn_actn->l_actn_typ == CONV_TO_FUTPLS ||
            ptr_st_pstn_actn->l_actn_typ == CONV_TO_PART_FUTPLS ||
            ptr_st_pstn_actn->l_actn_typ == CLOSE_PART_FUT) &&  
			  	  st_undfut_pos_to_be.l_opnpstn_qty != 0 			  &&
			  	  ptr_st_pstn_actn->c_prd_typ != SLTP_FUTUREPLUS  &&
            c_mtm_flag != UNDER_MTM 
			   )
		   {
         i_returncode =  fn_calc_trgprc_on_chngmrgn(c_ServiceName,
                                                ptr_st_pstn_actn,
                                                ptr_st_err_msg);
         if ( i_returncode != 0 )
         {
           fn_errlog(c_ServiceName, "S31045", LIBMSG, ptr_st_err_msg->c_err_msg );
           fn_userlog(c_ServiceName,"Pls check, Error in calcualting Auto MTM Trigger Price");
         }
       }

	   	/** Ver 3.4 Ends **/
  	}

  } /** Ver 5.4 **/

  ptr_st_pstn_actn->c_mtm_flag = 'O'; /* default */

	if ( ( c_mtm_flag == UNDER_MTM ) &&				
			 ( st_undfut_pos_to_be.l_ibuy_qty == 0 )   &&
			 ( st_undfut_pos_to_be.l_exbuy_qty == 0 )  &&
			 ( st_undfut_pos_to_be.l_isell_qty == 0 )  &&
			 ( st_undfut_pos_to_be.l_exsell_qty == 0 ) )
	{
		ptr_st_pstn_actn->c_mtm_flag = NO_OPEN_ORDERS;
	}
	else if ( c_mtm_flag == UNDER_MTM )
	{
		ptr_st_pstn_actn->c_mtm_flag = FOR_REMARKS_ENTRY;
	}
  tpfree ( ( char * ) ptr_st_err_msg );
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_pstn_actn, 0, 0 );
}

/** Applies an action on an existing position **/
int 	fn_apply_cnt_actn ( 	char *c_ServiceName,
													struct vw_pstn_actn *ptr_st_pstn_actn,
												 	struct vw_cntfut_pos *ptr_st_cntfut_pos,
                  				struct vw_err_msg *ptr_st_err_msg)
{
	long int li_temp_qty;
	long int li_tmp_opnqty;
	long int li_flg_tmp_qty;
	long int li_temp_opn_qty;/*** Ver 2.4 ***/

  int i_returncode;
  int i_ip_len;
  int i_op_len;
	double 	 d_amv_rlsd;

  struct vw_contract st_cntrct;
  struct vw_cntrct_qt st_cntrct_qt;

  switch ( ptr_st_pstn_actn->l_actn_typ )
  {
    case  SYSTEM_PLACE_ORDER:
    case  JOINT_SQUARE_OFF_ORDER:
    case  ORS_NEW_ORD_REQ:
					/** Increase the IWTL position by the order qty and order rate **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
						fn_add_pos( ptr_st_pstn_actn->l_new_qty,
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_ibuy_qty),
												&(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );
					}
					else
					{
						fn_add_pos( ( ptr_st_pstn_actn->l_new_qty * (-1) ),
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_isell_qty),
												&(ptr_st_cntfut_pos->d_isell_ord_vl ) );
					}
					break;

    case  ORS_NEW_ORD_ACPT:
					/** Increase the EXCH position by the order qty and order rate **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
						fn_add_pos( ptr_st_pstn_actn->l_new_qty,
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_exbuy_qty),
												&(ptr_st_cntfut_pos->d_exbuy_ord_vl ) );
					}
					else
					{
						fn_add_pos( ( ptr_st_pstn_actn->l_new_qty * (-1) ),
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_exsell_qty),
												&(ptr_st_cntfut_pos->d_exsell_ord_vl ) );
					}
					break;

    case  ORS_NEW_ORD_RJCT:
					/** Decrease the IWTL position by the order qty and order rate **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
						fn_del_pos( ptr_st_pstn_actn->l_new_qty,
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_ibuy_qty),
												&(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );
					}
					else
					{
						fn_del_pos( ( ptr_st_pstn_actn->l_new_qty * (-1) ),
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_isell_qty),
												&(ptr_st_cntfut_pos->d_isell_ord_vl ) );
					}
					break;

    case  ORS_MOD_ORD_REQ:
					/** Decrease the IWTL position by the unexecuted order qty and **/
          /** order rate. Increase the IWTL position by the unexecuted   **/
					/** new qty and new rate                                       **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
						fn_del_pos( ptr_st_pstn_actn->l_orgnl_qty - 
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_ibuy_qty),
												&(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );

						fn_add_pos( ptr_st_pstn_actn->l_new_qty -
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_ibuy_qty),
												&(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );
					}
					else
					{
						fn_del_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_isell_qty),
												&(ptr_st_cntfut_pos->d_isell_ord_vl ) );

						fn_add_pos( ( ( ptr_st_pstn_actn->l_new_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_isell_qty),
												&(ptr_st_cntfut_pos->d_isell_ord_vl ) );
					}
					break;

    case  ORS_MOD_ORD_ACPT:
					/** Decrease the EXCH position by the unexecuted order qty and **/
          /** order rate. Increase the EXCH position by the unexecuted   **/
					/** new qty and new rate                                       **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
						fn_del_pos( ptr_st_pstn_actn->l_orgnl_qty - 
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_exbuy_qty),
												&(ptr_st_cntfut_pos->d_exbuy_ord_vl ) );

						fn_add_pos( ptr_st_pstn_actn->l_new_qty -
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_exbuy_qty),
												&(ptr_st_cntfut_pos->d_exbuy_ord_vl ) );
					}
					else
					{
						fn_del_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_exsell_qty),
												&(ptr_st_cntfut_pos->d_exsell_ord_vl ) );

						fn_add_pos( ( ( ptr_st_pstn_actn->l_new_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_exsell_qty),
												&(ptr_st_cntfut_pos->d_exsell_ord_vl ) );
					}
					break;

    case  ORS_MOD_ORD_RJCT:
					/** Decrease the IWTL position by the unexecuted new qty and **/
          /** new rate. Increase the IWTL position by the unexecuted   **/
					/** order qty and order rate                                 **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
						fn_del_pos( ptr_st_pstn_actn->l_new_qty - 
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_ibuy_qty),
												&(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );

						fn_add_pos( ptr_st_pstn_actn->l_orgnl_qty -
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_ibuy_qty),
												&(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );
					}
					else
					{
						fn_del_pos( ( ( ptr_st_pstn_actn->l_new_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_isell_qty),
												&(ptr_st_cntfut_pos->d_isell_ord_vl ) );

						fn_add_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_isell_qty),
												&(ptr_st_cntfut_pos->d_isell_ord_vl ) );
					}
					break;

    case  ORS_CAN_ORD_REQ:
					/** Decrease the IWTL position by the unexecuted order qty  **/
					/** and order rate                                          **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
						fn_del_pos( ptr_st_pstn_actn->l_orgnl_qty - 
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_ibuy_qty),
												&(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );
					}
					else
					{
						fn_del_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_isell_qty),
												&(ptr_st_cntfut_pos->d_isell_ord_vl ) );
					}
					break;

    case  ORS_CAN_ORD_ACPT:
					/** Decrease the EXCH position by the unexecuted order qty  **/
					/** and order rate                                          **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
						fn_del_pos( ptr_st_pstn_actn->l_orgnl_qty - 
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_exbuy_qty),
												&(ptr_st_cntfut_pos->d_exbuy_ord_vl ) );

						/**	Following code added to handel position mismatch in case **/
						/** of partial execution & cancellation.Unprocessed executed **/
						/**	quantity & rate added back to the IWTL side,to make IWTL **/
						/** & EXCH in sync.																					***/
          
            /** if(ptr_st_cntfut_pos->l_ibuy_qty != ptr_st_cntfut_pos->l_exbuy_qty)   *** Ver 1.7 *** commented in ver 5.0 ***/
            if( ptr_st_pstn_actn->l_new_qty > 0 ) /*** ver 5.0 ***/
            {
              if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
              {
                fn_userlog(c_ServiceName,"Inside Buy Qty Check For Position MisMatch Handling");
              }

              /*** ver 5.0 starts ***/
              if(DEBUG_MSG_LVL_0)
              {
                 fn_userlog(c_ServiceName,"PosiTion MisMatch 1: iBuy Quantity before adding the unprocessed executed quantity is :%ld: and total unprocessed executed quantity is :%ld:",ptr_st_cntfut_pos->l_ibuy_qty,ptr_st_pstn_actn->l_new_qty);
              }
              /*** ver 5.0 ends ***/

              fn_add_pos(ptr_st_pstn_actn->l_new_qty,
                        ptr_st_pstn_actn->l_orgnl_rt,
                        &(ptr_st_cntfut_pos->l_ibuy_qty),
                        &(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );

              /*** ver 5.0 starts ***/
              if(DEBUG_MSG_LVL_0)
              {
                  fn_userlog(c_ServiceName,"PosiTion MisMatch 2: Corrected iBuy qty l_ibuy_qty is :%ld: Corrected exBuy Qty l_exbuy_qty is :%ld:",ptr_st_cntfut_pos->l_ibuy_qty,ptr_st_cntfut_pos->l_exbuy_qty);
              }
              /*** ver 5.0 ends ***/

            }     
					}
					else
					{
						fn_del_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_exsell_qty),
												&(ptr_st_cntfut_pos->d_exsell_ord_vl ) );

						/** Following code added to handel position mismatch in case **/
						/** of partial execution & cancellation.Unprocessed executed **/
						/** quantity & rate added back to the IWTL side,to make IWTL **/
						/** & EXCH in sync.                                         ***/
            /** if(ptr_st_cntfut_pos->l_isell_qty != ptr_st_cntfut_pos->l_exsell_qty)   *** Ver 1.7 *** commented in ver 5.0 ***/
            if( ptr_st_pstn_actn->l_new_qty > 0 ) /*** ver 5.0 ***/
            {
              if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
              {
                fn_userlog(c_ServiceName,"Inside Sell Qty Check For Position MisMatch Handling");
              }

              /*** ver 5.0 starts ***/
              if(DEBUG_MSG_LVL_0)
              {
                fn_userlog(c_ServiceName,"PosiTion MisMatch a: iSell Quantity before adding the unprocessed executed quantity is :%ld: and total unprocessed executed quantity is :%ld:",ptr_st_cntfut_pos->l_isell_qty,ptr_st_pstn_actn->l_new_qty);
              }
              /*** ver 5.0 ends ***/

              fn_add_pos(ptr_st_pstn_actn->l_new_qty * (-1),
                         ptr_st_pstn_actn->l_orgnl_rt,
                         &(ptr_st_cntfut_pos->l_isell_qty),
                         &(ptr_st_cntfut_pos->d_isell_ord_vl ) );


              /*** ver 5.0 starts ***/
              if(DEBUG_MSG_LVL_0)
              {
                fn_userlog(c_ServiceName,"PosiTion MisMatch b: Corrected iSell Qty l_isell_qty is :%ld: and Corrected exSell Qty l_exsell_qty is :%ld:",ptr_st_cntfut_pos->l_isell_qty,ptr_st_cntfut_pos->l_exsell_qty);
              }
              /*** ver 5.0 ends ***/
            }
					}
					break;

    case  ORS_CAN_ORD_RJCT:
					/** Increase the IWTL position by the unexecuted order qty  **/
					/** and order rate                                          **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
						fn_add_pos( ptr_st_pstn_actn->l_orgnl_qty - 
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_ibuy_qty),
												&(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );
					}
					else
					{
            if(DEBUG_MSG_LVL_2) /*** Ver 4.6  ***/
            {
							fn_userlog(c_ServiceName," ptr_st_pstn_actn->l_orgnl_qty :%ld:", ptr_st_pstn_actn->l_orgnl_qty);
							fn_userlog(c_ServiceName," ptr_st_pstn_actn->l_exec_qty :%ld:", ptr_st_pstn_actn->l_exec_qty);
						}

						fn_add_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_isell_qty),
												&(ptr_st_cntfut_pos->d_isell_ord_vl ) );
					}
					break;

    case  ORS_TRD_CONF:
					/** Decrease the IWTL, EXCH position by the executed qty **/
					/** order rate. Increase the OPEN position by the        **/
					/** executed qty and executed rate. Calculate the fresh  **/
					/** and cover quantity in the transaction. Increase the  **/
					/** MTMed position too by the executed quantity and      **/
					/** executed rate. Update the buy executed and sell      **/
					/** executed quantity                                    **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {

						fn_del_pos( ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_ibuy_qty),
												&(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );

						fn_del_pos( ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_exbuy_qty),
												&(ptr_st_cntfut_pos->d_exbuy_ord_vl ) );

						if( ptr_st_cntfut_pos->l_opnpstn_qty > 0 )
						{
							ptr_st_pstn_actn->l_fresh_qty = ptr_st_pstn_actn->l_exec_qty;
							ptr_st_pstn_actn->l_cover_qty = 0;
						}
						else
						{
							ptr_st_pstn_actn->l_cover_qty = 
												fn_minl(ptr_st_pstn_actn->l_exec_qty,
															  labs(ptr_st_cntfut_pos->l_opnpstn_qty) );

							ptr_st_pstn_actn->l_fresh_qty = 
												fn_maxl(ptr_st_pstn_actn->l_exec_qty - 
															  ptr_st_pstn_actn->l_cover_qty,
																0 );
						}

						if ( ptr_st_pstn_actn->l_cover_qty > 0 )
						{
							li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

							fn_add_pos_in_val( 	ptr_st_pstn_actn->l_cover_qty,
                          			 	ptr_st_cntfut_pos->d_org_opn_val,
																	li_temp_qty,
																	&(ptr_st_cntfut_pos->l_opnpstn_qty),
																	&(ptr_st_cntfut_pos->d_org_opn_val ) );

							fn_add_pos_in_val( 	ptr_st_pstn_actn->l_cover_qty,
                          				ptr_st_cntfut_pos->d_mtm_opn_val,
																	li_temp_qty,
																	&li_temp_qty,
																	&(ptr_st_cntfut_pos->d_mtm_opn_val ) );
						}

						if ( ptr_st_pstn_actn->l_fresh_qty > 0 )
						{
							li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

							fn_add_pos( ptr_st_pstn_actn->l_fresh_qty,
													ptr_st_pstn_actn->l_exec_rt,
													&(ptr_st_cntfut_pos->l_opnpstn_qty),
													&(ptr_st_cntfut_pos->d_org_opn_val ) );

							fn_add_pos( ptr_st_pstn_actn->l_fresh_qty,
													ptr_st_pstn_actn->l_exec_rt,
													&li_temp_qty,
													&(ptr_st_cntfut_pos->d_mtm_opn_val ) );
						}

						ptr_st_cntfut_pos->l_buy_exctd_qty = 
																			ptr_st_cntfut_pos->l_buy_exctd_qty + 
																			ptr_st_pstn_actn->l_exec_qty;
					}
					else
					{

						fn_del_pos( ptr_st_pstn_actn->l_exec_qty * (-1),
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_isell_qty),
												&(ptr_st_cntfut_pos->d_isell_ord_vl ) );

						fn_del_pos( ptr_st_pstn_actn->l_exec_qty * (-1),
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_exsell_qty),
												&(ptr_st_cntfut_pos->d_exsell_ord_vl ) );

						if ( ptr_st_cntfut_pos->l_opnpstn_qty < 0 )
						{
							ptr_st_pstn_actn->l_fresh_qty = ptr_st_pstn_actn->l_exec_qty;
							ptr_st_pstn_actn->l_cover_qty = 0;
						}
						else
						{
							ptr_st_pstn_actn->l_cover_qty = 
												fn_minl(ptr_st_pstn_actn->l_exec_qty,
															  ptr_st_cntfut_pos->l_opnpstn_qty );

							ptr_st_pstn_actn->l_fresh_qty = 
												fn_maxl(ptr_st_pstn_actn->l_exec_qty - 
															  ptr_st_pstn_actn->l_cover_qty,
																0 );
						}

						if ( ptr_st_pstn_actn->l_cover_qty > 0 )
						{
							li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

							fn_add_pos_in_val( 	ptr_st_pstn_actn->l_cover_qty * ( -1 ),
                          				ptr_st_cntfut_pos->d_org_opn_val,
																	li_temp_qty,
																	&(ptr_st_cntfut_pos->l_opnpstn_qty),
																	&(ptr_st_cntfut_pos->d_org_opn_val ) );

							fn_add_pos_in_val( 	ptr_st_pstn_actn->l_cover_qty * ( -1 ),
                          				ptr_st_cntfut_pos->d_mtm_opn_val,
																	li_temp_qty,
																	&li_temp_qty,
																	&(ptr_st_cntfut_pos->d_mtm_opn_val ) );
						}

						if ( ptr_st_pstn_actn->l_fresh_qty > 0 )
						{
							li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

							fn_add_pos( ptr_st_pstn_actn->l_fresh_qty * (-1),
													ptr_st_pstn_actn->l_exec_rt,
													&(ptr_st_cntfut_pos->l_opnpstn_qty),
													&(ptr_st_cntfut_pos->d_org_opn_val ) );

							fn_add_pos( ptr_st_pstn_actn->l_fresh_qty * (-1),
													ptr_st_pstn_actn->l_exec_rt,
													&li_temp_qty,
													&(ptr_st_cntfut_pos->d_mtm_opn_val ) );
						}

						ptr_st_cntfut_pos->l_sell_exctd_qty = 
																		ptr_st_cntfut_pos->l_sell_exctd_qty + 
																		(ptr_st_pstn_actn->l_exec_qty *(-1));
					}
					break;

    case  CLOSE_OUT_DEALS:
					/** Increase the OPEN position by the close out qty and  **/
					/** WEP rate.executed rate. Calculate the cover quantity **/
					/** in the transaction. Increase the MTMed position too  **/
					/** by the close out quantity and WEP rate.              **/

					ptr_st_pstn_actn->l_cover_qty = 
															  ptr_st_cntfut_pos->l_opnpstn_qty;

					li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

					li_flg_tmp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

					ptr_st_pstn_actn->l_orgnl_qty = 
                     ptr_st_cntfut_pos->l_opnpstn_qty * -1;
					ptr_st_pstn_actn->c_trnsctn_flw = ptr_st_cntfut_pos->c_opnpstn_flw;

					fn_add_pos_in_val( 	li_temp_qty * (-1),
                       			 	ptr_st_cntfut_pos->d_org_opn_val,
															li_temp_qty,
															&(ptr_st_cntfut_pos->l_opnpstn_qty),
															&(ptr_st_cntfut_pos->d_org_opn_val ) );

					fn_add_pos_in_val( 	li_temp_qty * (-1),
                       				ptr_st_cntfut_pos->d_mtm_opn_val,
															li_temp_qty,
															&li_temp_qty,
															&(ptr_st_cntfut_pos->d_mtm_opn_val ) );

					/** Added on 26-Apr-02 to get displayed on portfolio page **/
					if ( li_flg_tmp_qty > 0 )
					{
						ptr_st_cntfut_pos->l_sell_exctd_qty = (-1) * 
																					ptr_st_cntfut_pos->l_buy_exctd_qty ;
					}
					else if ( li_flg_tmp_qty < 0 )
					{
						ptr_st_cntfut_pos->l_buy_exctd_qty = (-1) * 
																					ptr_st_cntfut_pos->l_sell_exctd_qty ;
					}

/********************************************************************
					ptr_st_cntfut_pos->l_buy_exctd_qty = 0;
					ptr_st_cntfut_pos->l_sell_exctd_qty = 0;
********************************************************************/

					break;

    case  ORS_ORD_EXP:
					/** Decrease the IWTL,EXCH position by the unexecuted order qty  **/
					/** and order rate                                               **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
						fn_del_pos( ptr_st_pstn_actn->l_orgnl_qty - 
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_ibuy_qty),
												&(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );

						fn_del_pos( ptr_st_pstn_actn->l_orgnl_qty -
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_exbuy_qty),
												&(ptr_st_cntfut_pos->d_exbuy_ord_vl ) );
					}
					else
					{
						fn_del_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_isell_qty),
												&(ptr_st_cntfut_pos->d_isell_ord_vl ) );

						fn_del_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_exsell_qty),
												&(ptr_st_cntfut_pos->d_exsell_ord_vl ) );

					}
					break;

    case  EOD_MTM:
    case  EOD_MRGN_REP:   /** Ver 5.4 **/
						/** Decrease the open position by open qty and open rt and **/
						/** increase the open position by open qty and CMP rate    **/

						li_tmp_opnqty = ptr_st_cntfut_pos->l_opnpstn_qty;
						fn_del_pos_in_val( 	ptr_st_cntfut_pos->l_opnpstn_qty,
																ptr_st_cntfut_pos->d_mtm_opn_val,
																ptr_st_cntfut_pos->l_opnpstn_qty,
																&(ptr_st_cntfut_pos->l_opnpstn_qty),
																&(ptr_st_cntfut_pos->d_mtm_opn_val ) );

						fn_add_pos( li_tmp_opnqty,
												ptr_st_pstn_actn->l_curr_rt,
												&(ptr_st_cntfut_pos->l_opnpstn_qty),
												&(ptr_st_cntfut_pos->d_mtm_opn_val ) );

					break;

    case  INTRADAY_MTM:
    case  INTRADAY_MTM_REPORT:
		case	ADHOC_ADD_MRGN_RQST:				/***	Ver 2.0	***/

  					strcpy( st_cntrct.c_xchng_cd, ptr_st_cntfut_pos->c_xchng_cd );
  					st_cntrct.c_prd_typ = ptr_st_cntfut_pos->c_prd_typ;
  					strcpy( st_cntrct.c_undrlyng, ptr_st_cntfut_pos->c_undrlyng );
  					strcpy( st_cntrct.c_expry_dt, ptr_st_cntfut_pos->c_expry_dt );
  					st_cntrct.c_exrc_typ =  ptr_st_cntfut_pos->c_exrc_typ;
  					st_cntrct.c_ctgry_indstk = ptr_st_cntfut_pos->c_ctgry_indstk;
  					st_cntrct.c_opt_typ = '*';
  					st_cntrct.l_strike_prc = 0;

						/*** Commented in Ver 3.6 ****

            i_ip_len = sizeof ( struct vw_contract );
            i_op_len = sizeof ( struct vw_cntrct_qt );

             *** Added for Order Routing ***
            fn_cpy_ddr ( st_cntrct.c_rout_crt );

            i_returncode = fn_call_svc( c_ServiceName,
                                        ptr_st_err_msg->c_err_msg,
                                        &st_cntrct,
                                        &st_cntrct_qt,
                                        "vw_contract",
                                        "vw_cntrct_qt",
                                        i_ip_len,
                                        i_op_len,
                                        0,
                                        "SFO_GET_QT" );
            if ( i_returncode != 0 )
            {
              return FAILURE;
            }

            ***** ver 3.6 comment ends ******/

            /**** ver 3.6 Start ****/

            i_returncode = fn_get_qt( c_ServiceName,
                                      &st_cntrct,
                                      &st_cntrct_qt,
                                      ptr_st_err_msg->c_err_msg );
            if ( i_returncode != 0 )
            {
              return FAILURE;
            }

            /** Ver 3.6 Ends **/

						li_cmp = st_cntrct_qt.l_lst_trdd_prc;
						li_cmp_MTM = st_cntrct_qt.l_lst_trdd_prc;

						/****	Ver 2.0	Starts	****/

						if( ptr_st_pstn_actn->l_actn_typ == ADHOC_ADD_MRGN_RQST &&  ptr_st_pstn_actn->c_nkd_blkd_flg  ==  'C' )
						{
              if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
              {
								fn_userlog(c_ServiceName,"Inside Condition For ADHOC_ADD_MRGN_RQST && Price Flag C");
								fn_userlog(c_ServiceName,"LTP Is :%ld:",li_cmp);
							}

						/**** Commented In Ver 4.1 ***					
	
							EXEC SQL
								SELECT  FCM_CLS_PRC
								INTO    :li_cmp
								FROM		FCM_FO_CNTRCT_MSTR
								WHERE		FCM_PRDCT_TYP	=	:ptr_st_cntfut_pos->c_prd_typ
							  AND     FCM_XCHNG_CD  = :ptr_st_cntfut_pos->c_xchng_cd 
              	AND			FCM_INDSTK		=	:ptr_st_cntfut_pos->c_ctgry_indstk
								AND			FCM_UNDRLYNG	=	:ptr_st_cntfut_pos->c_undrlyng
								AND			FCM_EXPRY_DT	=	to_date( :ptr_st_cntfut_pos->c_expry_dt,'dd-Mon-yyyy' )
								AND			FCM_EXER_TYP	=	:ptr_st_cntfut_pos->c_exrc_typ;
			
						*** Ver 4.1 Comment Ends ***/
			
						/*** ver 4.1 Starts ***/

						EXEC SQL
                SELECT  FTQ_CLS_PRC
                INTO    :li_cmp
                FROM    FTQ_FO_TRD_QT
                WHERE   FTQ_PRDCT_TYP = :ptr_st_cntfut_pos->c_prd_typ
                AND     FTQ_XCHNG_CD  = :ptr_st_cntfut_pos->c_xchng_cd
                AND     FTQ_INDSTK    = :ptr_st_cntfut_pos->c_ctgry_indstk
                AND     FTQ_UNDRLYNG  = :ptr_st_cntfut_pos->c_undrlyng
                AND     FTQ_EXPRY_DT  = to_date( :ptr_st_cntfut_pos->c_expry_dt,'dd-Mon-yyyy' )
                AND     FTQ_EXER_TYP  = :ptr_st_cntfut_pos->c_exrc_typ;

						/*** Ver 4.1 Ends ***/				
	
						 	if ( SQLCODE != 0 )
    					{
      					fn_errlog ( c_ServiceName, "S31050", SQLMSG, ptr_st_err_msg->c_err_msg );
      					tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    					}

              if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
              {
								fn_userlog(c_ServiceName,"Closing Price Is :%ld:",li_cmp);
							}
						}

						/** Decrease the open position by open qty and open rt and **/
						/** increase the open position by open qty and CMP rate    **/
						/** of the contract                                        **/

						li_tmp_opnqty = ptr_st_cntfut_pos->l_opnpstn_qty;

						fn_del_pos_in_val( 	ptr_st_cntfut_pos->l_opnpstn_qty,
																ptr_st_cntfut_pos->d_imtm_opn_val,
																ptr_st_cntfut_pos->l_opnpstn_qty,
																&(ptr_st_cntfut_pos->l_opnpstn_qty),
																&(ptr_st_cntfut_pos->d_imtm_opn_val ) );

						fn_add_pos( li_tmp_opnqty,
												li_cmp,
												&(ptr_st_cntfut_pos->l_opnpstn_qty),
												&(ptr_st_cntfut_pos->d_imtm_opn_val ) );

					break;
		/*** Ver 2.4 Switch cases added for conversion of future position to future plus ***/
		/*** Ver 2.4 Close Future Position ***/
	
	case CLOSE_FUT :  
	
					if(DEBUG_MSG_LVL_3)
    			{	
						fn_userlog ( c_ServiceName," ****** Inside Close fut.*******");
					}

					ptr_st_pstn_actn->l_cover_qty = abs(ptr_st_pstn_actn->l_new_qty);
					li_temp_qty 									= ptr_st_cntfut_pos->l_opnpstn_qty;
        	li_flg_tmp_qty 								= ptr_st_cntfut_pos->l_opnpstn_qty;
        	ptr_st_pstn_actn->l_orgnl_qty = ptr_st_cntfut_pos->l_opnpstn_qty * -1;
        	ptr_st_pstn_actn->c_trnsctn_flw = ptr_st_cntfut_pos->c_opnpstn_flw;
					d_exec_rt 										= ptr_st_cntfut_pos->d_mtm_opn_val/ptr_st_cntfut_pos->l_opnpstn_qty;
        	ptr_st_pstn_actn->l_exec_rt   = d_exec_rt ; /***  Ver 2.0 ***/

          fn_add_pos_in_val(  li_temp_qty * (-1),
                              ptr_st_cntfut_pos->d_org_opn_val,
                              li_temp_qty,
                              &(ptr_st_cntfut_pos->l_opnpstn_qty),
                              &(ptr_st_cntfut_pos->d_org_opn_val ) );

          fn_add_pos_in_val(  li_temp_qty * (-1),
                              ptr_st_cntfut_pos->d_mtm_opn_val,
                              li_temp_qty,
                              &li_temp_qty,
                              &(ptr_st_cntfut_pos->d_mtm_opn_val ) );

          /** Added to get displayed on portfolio page **/
          if ( li_flg_tmp_qty > 0 )
          {
            ptr_st_cntfut_pos->l_sell_exctd_qty = (-1) *
                                          ptr_st_cntfut_pos->l_buy_exctd_qty ;
          }
          else if ( li_flg_tmp_qty < 0 )
          {
            ptr_st_cntfut_pos->l_buy_exctd_qty = (-1) *
                                          ptr_st_cntfut_pos->l_sell_exctd_qty ;
          }
          break;

		/*** Ver 2.4 Close Part Future Position ***/

	case CLOSE_PART_FUT :  
					
					ptr_st_pstn_actn->l_cover_qty 	= abs(ptr_st_pstn_actn->l_new_qty);
          li_temp_qty 										= ptr_st_pstn_actn->l_new_qty;
          li_temp_opn_qty 								= ptr_st_cntfut_pos->l_opnpstn_qty;
          li_flg_tmp_qty 									= ptr_st_pstn_actn->l_new_qty;
          ptr_st_pstn_actn->l_orgnl_qty 	= ptr_st_pstn_actn->l_new_qty * -1;
          ptr_st_pstn_actn->c_trnsctn_flw = ptr_st_cntfut_pos->c_opnpstn_flw;
          d_exec_rt 											= ptr_st_cntfut_pos->d_mtm_opn_val/ptr_st_cntfut_pos->l_opnpstn_qty; 
          ptr_st_pstn_actn->l_exec_rt 		= d_exec_rt ;   


          fn_add_pos_in_val(  li_temp_qty * (-1),
                              ptr_st_cntfut_pos->d_org_opn_val,
                              ptr_st_cntfut_pos->l_opnpstn_qty,
                              &(ptr_st_cntfut_pos->l_opnpstn_qty),
                              &(ptr_st_cntfut_pos->d_org_opn_val ) );

          fn_add_pos_in_val(  li_temp_qty * (-1),
                              ptr_st_cntfut_pos->d_mtm_opn_val,
                              li_temp_opn_qty,
                              &li_temp_opn_qty,
                              &(ptr_st_cntfut_pos->d_mtm_opn_val ) );

          /** Added to get displayed on portfolio page **/
          	
					if ( li_flg_tmp_qty > 0 )
          {
            ptr_st_cntfut_pos->l_sell_exctd_qty = ptr_st_cntfut_pos->l_sell_exctd_qty + (-1) * ptr_st_pstn_actn->l_new_qty ;
          }
          else if ( li_flg_tmp_qty < 0 )
          {
            ptr_st_cntfut_pos->l_buy_exctd_qty 	= ptr_st_cntfut_pos->l_buy_exctd_qty 	+ (-1) *  ptr_st_pstn_actn->l_new_qty ;
          }
          break;
		
	/*** Ver 2.4 Create New Future Plus Position ***/

  case CREATE_FUTPLS:

          /** Increase the OPEN position by the                    **/
          /** executed qty and executed rate. Calculate the fresh  **/
          /** and cover quantity in the transaction. Increase the  **/
          /** MTMed position too by the executed quantity and      **/
          /** executed rate. Update the buy executed and sell      **/
          /** executed quantity                                    **/
						
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
            if( ptr_st_cntfut_pos->l_opnpstn_qty > 0 )
            {
              ptr_st_pstn_actn->l_fresh_qty = ptr_st_pstn_actn->l_exec_qty;
              ptr_st_pstn_actn->l_cover_qty = 0;
            }
            else
            {
              ptr_st_pstn_actn->l_cover_qty = fn_minl(ptr_st_pstn_actn->l_exec_qty, labs(ptr_st_cntfut_pos->l_opnpstn_qty) );

              ptr_st_pstn_actn->l_fresh_qty = fn_maxl(ptr_st_pstn_actn->l_exec_qty - ptr_st_pstn_actn->l_cover_qty, 0 );
            }
	
				 		if ( ptr_st_pstn_actn->l_cover_qty > 0 )
            {
              li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

              fn_add_pos_in_val(  ptr_st_pstn_actn->l_cover_qty,
                                  ptr_st_cntfut_pos->d_org_opn_val,
                                  li_temp_qty,
                                  &(ptr_st_cntfut_pos->l_opnpstn_qty),
                                  &(ptr_st_cntfut_pos->d_org_opn_val ) );

              fn_add_pos_in_val(  ptr_st_pstn_actn->l_cover_qty,
                                  ptr_st_cntfut_pos->d_mtm_opn_val,
                                  li_temp_qty,
                                  &li_temp_qty,
                                  &(ptr_st_cntfut_pos->d_mtm_opn_val ) );

            }
          	if ( ptr_st_pstn_actn->l_fresh_qty > 0 )
            {
              li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;
							
							fn_add_fplspos  ( ptr_st_pstn_actn->l_fresh_qty,    
                                d_exec_rt,
                                &(ptr_st_cntfut_pos->l_opnpstn_qty),
                                &(ptr_st_cntfut_pos->d_org_opn_val ) );

              fn_add_fplspos( ptr_st_pstn_actn->l_fresh_qty,     
                              d_exec_rt,
                              &li_temp_qty,
                              &(ptr_st_cntfut_pos->d_mtm_opn_val ) );

            }

            ptr_st_cntfut_pos->l_buy_exctd_qty = ptr_st_cntfut_pos->l_buy_exctd_qty + ptr_st_pstn_actn->l_exec_qty;
         }
		 		 else
         {
            if ( ptr_st_cntfut_pos->l_opnpstn_qty < 0 )
            {
              ptr_st_pstn_actn->l_fresh_qty = ptr_st_pstn_actn->l_exec_qty;
              ptr_st_pstn_actn->l_cover_qty = 0;
            }
            else
            {
							if(DEBUG_MSG_LVL_3)
    					{
               fn_userlog(c_ServiceName,"Inside CRT FUT ptr_st_pstn_actn->l_exec_qty Is :%ld:",ptr_st_pstn_actn->l_exec_qty);
               fn_userlog(c_ServiceName,"FUT ptr_st_cntfut_pos->l_opnpstn_qty Is :%ld:",ptr_st_cntfut_pos->l_opnpstn_qty);
							}

              ptr_st_pstn_actn->l_cover_qty = fn_minl(ptr_st_pstn_actn->l_exec_qty, ptr_st_cntfut_pos->l_opnpstn_qty );

              ptr_st_pstn_actn->l_fresh_qty = fn_maxl(ptr_st_pstn_actn->l_exec_qty - ptr_st_pstn_actn->l_cover_qty, 0 );
            }

            if ( ptr_st_pstn_actn->l_cover_qty > 0 )
            {
              li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

              fn_add_pos_in_val(  ptr_st_pstn_actn->l_cover_qty * ( -1 ),
                                  ptr_st_cntfut_pos->d_org_opn_val,
                                  li_temp_qty,
                                  &(ptr_st_cntfut_pos->l_opnpstn_qty),
                                  &(ptr_st_cntfut_pos->d_org_opn_val ) );

              fn_add_pos_in_val(  ptr_st_pstn_actn->l_cover_qty * ( -1 ),
                                  ptr_st_cntfut_pos->d_mtm_opn_val,
                                  li_temp_qty,
                                  &li_temp_qty,
                                  &(ptr_st_cntfut_pos->d_mtm_opn_val ) );

            }

            if ( ptr_st_pstn_actn->l_fresh_qty > 0 )
            {
              li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

			 				fn_add_fplspos( ptr_st_pstn_actn->l_fresh_qty * (-1), 
                              d_exec_rt,
                              &(ptr_st_cntfut_pos->l_opnpstn_qty),
                              &(ptr_st_cntfut_pos->d_org_opn_val ) );

              fn_add_fplspos( ptr_st_pstn_actn->l_fresh_qty * (-1),
                              d_exec_rt,
                              &li_temp_qty,
                              &(ptr_st_cntfut_pos->d_mtm_opn_val ) );

            }

            ptr_st_cntfut_pos->l_sell_exctd_qty = ptr_st_cntfut_pos->l_sell_exctd_qty + (ptr_st_pstn_actn->l_exec_qty *(-1));
          }

          break;
	} /*** End Of Switch Case ***/

	if(DEBUG_MSG_LVL_2) /*** ver 4.6 ***/
	{
		fn_userlog ( c_ServiceName, "Contract after updation inside INTRADAY_MTM : " );
		fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:",ptr_st_cntfut_pos->l_ibuy_qty );
		fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", ptr_st_cntfut_pos->d_ibuy_ord_vl );
		fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", ptr_st_cntfut_pos->l_isell_qty );
		fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", ptr_st_cntfut_pos->d_isell_ord_vl );
		fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", ptr_st_cntfut_pos->l_exbuy_qty );
		fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", ptr_st_cntfut_pos->d_exbuy_ord_vl );
		fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", ptr_st_cntfut_pos->l_exsell_qty );
		fn_userlog ( c_ServiceName, "EXCH sell val      :%lf:", ptr_st_cntfut_pos->d_exsell_ord_vl );
		fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", ptr_st_cntfut_pos->l_buy_exctd_qty );
		fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", ptr_st_cntfut_pos->l_sell_exctd_qty );
		fn_userlog ( c_ServiceName, "Open qty          :%ld:", ptr_st_cntfut_pos->l_opnpstn_qty );
		fn_userlog ( c_ServiceName, "Original open val :%lf:", ptr_st_cntfut_pos->d_org_opn_val );
		fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", ptr_st_cntfut_pos->d_mtm_opn_val );
	} 
  return SUCCESS;
}

/**************Risk Functions *******************************************/
/** Given a position and a type of action performed calculates the new **/
/** margin to be                                                       **/
int fn_upd_mrgn( char *c_ServiceName,
									struct vw_pstn_actn *ptr_st_pstn_actn,
                  struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                  struct vw_undfut_pos *ptr_st_undfut_pos,
                  struct vw_err_msg *ptr_st_err_msg)
                  
{

	int		i_returncode;

	long int	li_ose_qty;
	long int	li_ibm_qty;
	long int	li_ebm_qty;
	long int	li_obe_qty;
	long int	li_ism_qty;
	long int	li_esm_qty;
	long int 	li_opn_qty;
	long int 	li_unmtchd_qty;
	long int 	li_sum_CUOQ;
	long int 	li_spd_qty;

	double d_initial_mrgn;
	double d_spread_mrgn;
	double d_min_mrgn;
	double d_min_spread_mrgn;
	double d_i_exp = 0.0;
	double d_e_exp = 0.0;
	double d_sum_CUOV;
	double d_sum_CUOV_cmp;
	double d_diff_AMV;
	double d_und_opn_val_imtm;
	
	char	c_pos_opn;

	struct vw_cntfut_pos st_cntfut_pos;

  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;             /* a cursor variable */
		char	sql_cntrct_tag;
		char	sql_cln_mtch_accnt[11];
		char	sql_xchng_cd[4];
		char	sql_prd_typ;
		char	sql_undrlyng[7];
		double d_far_mtm_opn_val;
		long int 	li_far_opnpstn_qty;
  EXEC SQL END DECLARE SECTION;

	strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
	strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
	strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
	sql_prd_typ = ptr_st_pstn_actn->c_prd_typ;
	sql_cntrct_tag = ptr_st_undfut_pos->c_cntrct_tag;

	/** Get the margin percentages **/
  i_returncode = fn_get_im_prcntg( c_ServiceName,
                                   ptr_st_pstn_actn,
                                   ptr_st_err_msg,
                                   &d_initial_mrgn,
																   &d_spread_mrgn, 
                                   &d_min_mrgn,
																   &d_min_spread_mrgn,
                                   ptr_st_undfut_pos->c_cntrct_tag );

  if ( i_returncode == -1 )
  {
		return ( -1 );
  }
		
	if(DEBUG_MSG_LVL_5)	/*** Ver 4.6 ***/
  {
		fn_userlog ( c_ServiceName, " Initial Margin is 			 |%lf|",d_initial_mrgn );    /*** Ver 2.4 ***/
		fn_userlog ( c_ServiceName, " Spread Margin Is  			 |%lf|",d_spread_mrgn );		 /*** Ver 2.4 ***/
		fn_userlog ( c_ServiceName, " Minimum Margin Is 			 |%lf|",d_min_mrgn );				 /*** Ver 2.4 ***/
		fn_userlog ( c_ServiceName, " Minimum Spread Margin Is |%lf|",d_min_spread_mrgn ); /*** Ver 2.4 ***/
	}		

	/** Calculation of order level margin **/
	/** Maximum risk is - All buy position getting executed and joining the **/
	/**                   executed position or all sell position getting    **/
	/**                   executed and joining the executed position.       **/
	/** We treat the IWTL and EXCH as two different system accpeting orders **/
	/** with a delay ( EXCH following the IWTL ). Hence we will have postion**/
	/** in both the system with the EXCH following suit with the IWTL with a**/
	/** small time lag. So the maximum risk is redifined as -               **/
	/** Maximum of ( maximum risk in IWTL system and EXCH system )          **/

	/** To find buy exposure                                                **/
	/** Open sell qty = max ( ( Sell executed qty - Buy executed qty ), 0 ) **/
	/** Buy marginable qty = max ( ( Buy ordered qty - Open sell qty ), 0 ) **/
	/** Buy exposure = Buy marginable qty * Buy ordered rt * IM / 100       **/
	/** To find sell exposure                                               **/
	/** Open buy qty = max ( ( Buy executed qty - Sell executed qty ), 0 )  **/
	/** Sell marginable qty = max ( ( Sell ordered qty - Open buy qty ), 0 )**/
	/** Sell exposure = Sell marginable qty * Sell ordered rt * IM / 100    **/

	/** Calculation of IWTL buy exposure **/
	if ( ptr_st_undfut_pos->l_ibuy_qty != 0 )
	{

		li_ose_qty = fn_maxl( ( ptr_st_undfut_pos->l_sell_exctd_qty * (-1)) -
													 ptr_st_undfut_pos->l_buy_exctd_qty,
													0 );

		li_ibm_qty = fn_maxl( (ptr_st_undfut_pos->l_ibuy_qty -
													li_ose_qty),
													0 );

		ptr_st_undfut_pos->d_ibuy_mrgn = li_ibm_qty * 
																		(ptr_st_undfut_pos->d_ibuy_ord_vl / 
																		 ptr_st_undfut_pos->l_ibuy_qty) *
																			d_initial_mrgn / 100.0 ;									
	}
	else
	{
		ptr_st_undfut_pos->d_ibuy_mrgn = 0;
	}

	/** Calculation of EXCH buy exposure **/
	if ( ptr_st_undfut_pos->l_exbuy_qty != 0 )
	{
		
		li_ose_qty = fn_maxl( (ptr_st_undfut_pos->l_sell_exctd_qty * (-1)) -
													 ptr_st_undfut_pos->l_buy_exctd_qty,
													0 );
		li_ebm_qty = fn_maxl( (ptr_st_undfut_pos->l_exbuy_qty -
													li_ose_qty),
													0 );
		ptr_st_undfut_pos->d_exbuy_mrgn = li_ebm_qty * 
																		(ptr_st_undfut_pos->d_exbuy_ord_vl / 
																		 ptr_st_undfut_pos->l_exbuy_qty) *
																			d_initial_mrgn / 100.0 ;									
	}
	else
	{
		ptr_st_undfut_pos->d_exbuy_mrgn = 0;
	}

	/** Calculation of IWTL sell exposure **/
	if ( ptr_st_undfut_pos->l_isell_qty != 0 )
	{

		li_obe_qty = fn_maxl( ptr_st_undfut_pos->l_buy_exctd_qty -
													(ptr_st_undfut_pos->l_sell_exctd_qty * (-1) ),
													0 );

		li_ism_qty = fn_maxl( ( ( ptr_st_undfut_pos->l_isell_qty * (-1)) -
													li_obe_qty),
													0 );
		ptr_st_undfut_pos->d_isell_mrgn = li_ism_qty * 
																		(ptr_st_undfut_pos->d_isell_ord_vl / 
																		 ptr_st_undfut_pos->l_isell_qty) *
																		d_initial_mrgn / 100.0 ;									
	}
	else
	{
		ptr_st_undfut_pos->d_isell_mrgn = 0;
	}

	/** Calculation of EXCH sell exposure **/
	if ( ptr_st_undfut_pos->l_exsell_qty != 0 )
	{

		li_obe_qty = fn_maxl( ptr_st_undfut_pos->l_buy_exctd_qty -
												 ( ptr_st_undfut_pos->l_sell_exctd_qty * (-1) ),
													0 );

		li_esm_qty = fn_maxl( ( ( ptr_st_undfut_pos->l_exsell_qty * (-1)) -
													li_obe_qty),
													0 );
		ptr_st_undfut_pos->d_exsell_mrgn = li_esm_qty * 
																		(ptr_st_undfut_pos->d_exsell_ord_vl / 
																		 ptr_st_undfut_pos->l_exsell_qty) *
																			d_initial_mrgn / 100.0 ;									
	}
	else
	{
		ptr_st_undfut_pos->d_exsell_mrgn = 0;
	}

	d_i_exp = fn_maxd(ptr_st_undfut_pos->d_ibuy_mrgn,
										ptr_st_undfut_pos->d_isell_mrgn);

	d_e_exp = fn_maxd(ptr_st_undfut_pos->d_exbuy_mrgn,
										ptr_st_undfut_pos->d_exsell_mrgn);

	ptr_st_undfut_pos->d_ordr_mrgn = fn_maxd( d_i_exp, d_e_exp );

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Total order level margin" );
		fn_userlog ( c_ServiceName, "IWTL buy exposure   :%lf:", ptr_st_undfut_pos->d_ibuy_mrgn );
		fn_userlog ( c_ServiceName, "IWTL sell exposure  :%lf:", ptr_st_undfut_pos->d_isell_mrgn );
		fn_userlog ( c_ServiceName, "EXCH buy exposure   :%lf:", ptr_st_undfut_pos->d_exbuy_mrgn );
		fn_userlog ( c_ServiceName, "EXCH sell exposure  :%lf:", ptr_st_undfut_pos->d_exsell_mrgn );
	}

  if(DEBUG_MSG_LVL_2) /*** Ver 4.6 ***/
  {
    fn_userlog ( c_ServiceName, "IWTL total exposure :%lf:", d_i_exp );
    fn_userlog ( c_ServiceName, "EXCH total exposure :%lf:", d_e_exp );
    fn_userlog ( c_ServiceName, "Final exposure      :%lf:", ptr_st_undfut_pos->d_ordr_mrgn );
	}
	/** Calculate the Executed margin, Spread margin and Spread PL.        **/
	/** They need to be recalculated only if the executed position changes **/
	if ( ( ptr_st_pstn_actn->l_actn_typ == ORS_TRD_CONF      ) || 
			 ( ptr_st_pstn_actn->l_actn_typ == CLOSE_OUT_DEALS   ) ||
			 ( ptr_st_pstn_actn->l_actn_typ == EOD_MTM           ) ||
			 ( ptr_st_pstn_actn->l_actn_typ == CONTRACT_SPLIT    ) ||
			 ( ptr_st_pstn_actn->l_actn_typ == INTRADAY_MTM_REPORT ) ||
			 ( ptr_st_pstn_actn->l_actn_typ == INTRADAY_MTM      )   ||
			 ( ptr_st_pstn_actn->l_actn_typ == ADHOC_ADD_MRGN_RQST) ||  			/***	Ver 2.0	***/
			 ( ptr_st_pstn_actn->l_actn_typ == CLOSE_FUT) 		||	/* Ver 2.4 Added for convert from future to future plus */			 
			 ( ptr_st_pstn_actn->l_actn_typ == CLOSE_PART_FUT)  ||
			 ( ptr_st_pstn_actn->l_actn_typ == CREATE_FUTPLS ) ||
       ( ptr_st_pstn_actn->l_actn_typ == EOD_MRGN_REP ) ) /** Ver 5.4 added for Margin report **/   
				
	{

		/** Calculation of spread margin **/
		/** Spread qty = min ( sum of open buy qty at contract level,   **/
		/**                    sum of open sell qty at contract level ) **/
		/** Spread margin = Spread qty * Far month contract rate * SM / 100 **/
		li_spd_qty = fn_minl( ptr_st_undfut_pos->l_opn_buyqty,
										labs(ptr_st_undfut_pos->l_opn_sellqty) );

 		EXEC SQL
   		SELECT  FFP_MTM_OPN_VAL,
							FFP_OPNPSTN_QTY
			INTO		:d_far_mtm_opn_val,
							:li_far_opnpstn_qty
			FROM		FFP_FO_FUTURES_PSTN
			WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
			AND			FFP_XCHNG_CD       = :sql_xchng_cd
			AND			FFP_PRDCT_TYP      = :sql_prd_typ
			AND			FFP_UNDRLYNG       = :sql_undrlyng
			AND			FFP_CNTRCT_TAG		 = :sql_cntrct_tag
			AND			FFP_EXPRY_DT  		 = 
							( SELECT  MAX(FFP_EXPRY_DT)
							FROM		FFP_FO_FUTURES_PSTN
							WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
							AND			FFP_XCHNG_CD       = :sql_xchng_cd
							AND			FFP_PRDCT_TYP      = :sql_prd_typ
							AND			FFP_UNDRLYNG       = :sql_undrlyng
							AND			FFP_CNTRCT_TAG		 = :sql_cntrct_tag 
              AND     FFP_OPNPSTN_QTY    != 0 );

  	if ( ( SQLCODE != 0 ) && 
         ( SQLCODE != NO_DATA_FOUND ) )
  	{
    	fn_errlog( c_ServiceName, "S31055", SQLMSG, ptr_st_err_msg->c_err_msg );
    	return FAILURE;
  	}

		if(DEBUG_MSG_LVL_3)
    {
			fn_userlog(c_ServiceName," d_far_mtm_opn_val     |%lf| ",d_far_mtm_opn_val);				 /*** Ver 2.4 ***/
			fn_userlog(c_ServiceName," li_far_opnpstn_qty		 |%ld| ",li_far_opnpstn_qty);				 /*** Ver 2.4 ***/
		}

		if ( SQLCODE == 0 )
		{
			ptr_st_undfut_pos->d_sprd_mrgn = li_spd_qty *
				( d_far_mtm_opn_val / li_far_opnpstn_qty ) * d_spread_mrgn / 100.0;

			ptr_st_undfut_pos->d_imtm_sprd_mrgn = ptr_st_undfut_pos->d_sprd_mrgn;

			ptr_st_undfut_pos->d_mm_sprd_mrgn = li_spd_qty *
				( d_far_mtm_opn_val / li_far_opnpstn_qty ) * d_min_spread_mrgn / 100.0;
		}
		else
		{
			ptr_st_undfut_pos->d_sprd_mrgn = 0;
			ptr_st_undfut_pos->d_imtm_sprd_mrgn = 0;
			ptr_st_undfut_pos->d_mm_sprd_mrgn = 0;
		}

		/** Calculation of spread profit and loss **/
		/** Objective :- Assume that the contracts of same underlying are of **/
		/**              the same type. Summing at the contract level we will**/
		/**              arrive at a contract level position which will be   **/
		/**              either buy or sell in nature. Now assume that each  **/
		/**              of the contract level position is a trade. It is buy**/
		/**              trade if the summation is a buy position else it is **/
		/**              sell trade. Now from the list of trade at hand find **/
		/**              of each trade how much is closed and how much is    **/
		/**              open. The rule to be applied here is close the      **/
		/**              nearest month contract trade first. For those trade **/
		/**              which acts as cover find profit and loss at their   **/
		/**              value.                                              **/
		/** To follow the procedure as specified in the objective is a little**/
		/** tedious. Hence we use a method of exclusion.                     **/
		/** Sum of open value at contract level =                            **/
		/**      Sum of actual open value at contract level + PL             **/
		/** We can arrive at PL using this formula. This formula will appear **/
		/** to have come out of blue, I have understood it for you to        **/
		/** understand please refer to Vishal's excel sheet.                 **/
		/** Well this formula is not the method of exclusion, finding the    **/
		/** Sum of actual open value at contract level is done using method  **/
		/** exclusion. Let us now get into it. Instead of finding which trade**/
		/** is covering which find how much of a trade is open.              **/
		/**                                                                  **/
		/** If underlying open position is buy                               **/
		/**   Preapare a list of all contract level buy open position in desc**/
		/**   order of date                                                  **/
		/** else                                                             **/
		/**   Preapare a list of all contract level sell open position in    **/
		/**   desc order of date                                             **/
		/**                                                                  **/
		/** Total unmatched quantity = Open position quantity at underlying  **/
		/**                            level                                 **/
		/** Sum of actual open quantity = 0                                  **/
		/** Sum of actual open value    = 0                                  **/
		/**                                                                  **/
		/** While unmatched quantity > 0 do                                  **/
		/**   Fetch a record from the list                                   **/
		/**   Actual open quantity = min ( Contract level open qty,          **/
		/**                                Unmatched quantity       )        **/
		/**   Sum of actual open quantity = Sum of actual open quantity +    **/
		/**                                 Actual open quantity             **/
		/**   Sum of actual open value = Sum of actual open value +          **/
		/**                              Actual open value                   **/
		/**   umatched quantity = umatched quantity - Actual open quantity   **/
		/**                                                                  **/
		/** Spread PL = Sum of actual open value - Sum of open value at      **/
		/**                                        underlying level          **/
		/**                                                                  **/
		/** Hope you understand this. The code down below is a little        **/
		/** complicated as we use signed open qty and value.                 **/

		c_pos_opn = 'Y';

		EXEC SQL ALLOCATE :sys_cursor;

		if( ptr_st_undfut_pos->l_opnpstn_qty > 0)
		{
   		EXEC SQL EXECUTE
     		BEGIN
         	OPEN :sys_cursor FOR
   					SELECT  FFP_MTM_OPN_VAL,
										FFP_OPNPSTN_QTY,
										FFP_IMTM_OPN_VAL
						FROM		FFP_FO_FUTURES_PSTN
						WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
						AND			FFP_XCHNG_CD       = :sql_xchng_cd
						AND			FFP_PRDCT_TYP      = :sql_prd_typ
						AND			FFP_UNDRLYNG       = :sql_undrlyng
						AND			FFP_CNTRCT_TAG		 = :sql_cntrct_tag
						AND			FFP_OPNPSTN_QTY    > 0
						ORDER BY FFP_EXPRY_DT Desc;
     			END;
   			END-EXEC;

		}
		else if( ptr_st_undfut_pos->l_opnpstn_qty < 0)
		{
   		EXEC SQL EXECUTE
     		BEGIN
         	OPEN :sys_cursor FOR
   					SELECT  FFP_MTM_OPN_VAL,
										FFP_OPNPSTN_QTY,
										FFP_IMTM_OPN_VAL
						FROM		ffp_fo_futures_pstn
						WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
						AND			FFP_XCHNG_CD       = :sql_xchng_cd
						AND			FFP_PRDCT_TYP      = :sql_prd_typ
						AND			FFP_UNDRLYNG       = :sql_undrlyng
						AND			FFP_CNTRCT_TAG		 = :sql_cntrct_tag
						AND			FFP_OPNPSTN_QTY    < 0
						ORDER BY FFP_EXPRY_DT desc;
     			END;
   			END-EXEC;

		}
		else
		{
			d_sum_CUOV = 0;
			d_sum_CUOV_cmp = 0;
			ptr_st_undfut_pos->d_sprd_pl = (-1) * ptr_st_undfut_pos->d_mtm_opn_val;
			ptr_st_undfut_pos->d_imtm_sprd_pl = (-1) * 
																					ptr_st_undfut_pos->d_imtm_opn_val;
			ptr_st_undfut_pos->d_mm_sprd_pl = ptr_st_undfut_pos->d_sprd_pl; 

			ptr_st_undfut_pos->d_exctd_mrgn = 0;
			ptr_st_undfut_pos->d_imtm_exctd_mrgn = 0;
			ptr_st_undfut_pos->d_mm_exctd_mrgn = 0;
			c_pos_opn = 'N';

			/*** Set add margin amount to 0 ***/
			ptr_st_undfut_pos->d_add_mrgn_val = 0;

			SQLCODE = 0;
		}

 		if ( SQLCODE != 0 )
 		{
   		fn_errlog( c_ServiceName, "S31060", SQLMSG, ptr_st_err_msg->c_err_msg  );
   		EXEC SQL FREE :sys_cursor;
			return ( -1 );
 		}

		if ( c_pos_opn == 'Y' )
		{
			li_opn_qty = ptr_st_undfut_pos->l_opnpstn_qty;
			li_unmtchd_qty = li_opn_qty;
			li_sum_CUOQ = 0;
			d_sum_CUOV = 0;
			d_sum_CUOV_cmp = 0;

  		while ( li_unmtchd_qty != 0)
 			{
   			EXEC SQL FETCH :sys_cursor
           		 	INTO :st_cntfut_pos.d_mtm_opn_val,
										 :st_cntfut_pos.l_opnpstn_qty,
										 :st_cntfut_pos.d_imtm_opn_val;

   			if ( SQLCODE != 0 )
   			{
     			fn_errlog( c_ServiceName, "S31065", SQLMSG, 
																					ptr_st_err_msg->c_err_msg  );
     			EXEC SQL CLOSE :sys_cursor;
     			EXEC SQL FREE :sys_cursor;
					return ( -1 );
   			}

				if ( li_opn_qty > 0 )
				{
					st_cntfut_pos.l_und_opn_qty = fn_minl( st_cntfut_pos.l_opnpstn_qty,
																				li_unmtchd_qty );
				}
				else
				{
					st_cntfut_pos.l_und_opn_qty = fn_maxl( st_cntfut_pos.l_opnpstn_qty,
																				li_unmtchd_qty );
				}

				st_cntfut_pos.d_und_opn_val = st_cntfut_pos.l_und_opn_qty * 
									(st_cntfut_pos.d_mtm_opn_val / st_cntfut_pos.l_opnpstn_qty);

				d_und_opn_val_imtm = st_cntfut_pos.l_und_opn_qty *
									(st_cntfut_pos.d_imtm_opn_val / st_cntfut_pos.l_opnpstn_qty);
			
				li_sum_CUOQ = li_sum_CUOQ + st_cntfut_pos.l_und_opn_qty;
				d_sum_CUOV = d_sum_CUOV + st_cntfut_pos.d_und_opn_val;
				d_sum_CUOV_cmp = d_sum_CUOV_cmp + d_und_opn_val_imtm;
				
				li_unmtchd_qty = li_unmtchd_qty - st_cntfut_pos.l_und_opn_qty;
			}

 			EXEC SQL CLOSE :sys_cursor;
 			EXEC SQL FREE :sys_cursor;

			/** Calculation of Executed margin **/
			/** Executed margin = d_sum_CUOV * IM / 100 **/

			ptr_st_undfut_pos->d_sprd_pl = d_sum_CUOV -
																		 ptr_st_undfut_pos->d_mtm_opn_val;

			ptr_st_undfut_pos->d_imtm_sprd_pl = d_sum_CUOV_cmp -
																		 			ptr_st_undfut_pos->d_imtm_opn_val;

			ptr_st_undfut_pos->d_mm_sprd_pl = ptr_st_undfut_pos->d_sprd_pl; 
     

			if ( li_opn_qty > 0 )
			{
				ptr_st_undfut_pos->d_exctd_mrgn = d_sum_CUOV *
																					d_initial_mrgn / 100.0;

				ptr_st_undfut_pos->d_imtm_exctd_mrgn = d_sum_CUOV_cmp *
																							 d_initial_mrgn / 100.0;

				ptr_st_undfut_pos->d_mm_exctd_mrgn = d_sum_CUOV *
																						 d_min_mrgn / 100.0;

			}
			else if ( li_opn_qty < 0 )
			{

				ptr_st_undfut_pos->d_exctd_mrgn = ( (-1) * d_sum_CUOV )*
																						d_initial_mrgn / 100.0;

				ptr_st_undfut_pos->d_imtm_exctd_mrgn = ( (-1) * d_sum_CUOV_cmp )*
																								d_initial_mrgn / 100.0;

				ptr_st_undfut_pos->d_mm_exctd_mrgn = ( (-1) * d_sum_CUOV )*
																							d_min_mrgn / 100.0;

			}
			if ( ptr_st_pstn_actn->l_actn_typ == EOD_MTM  || ptr_st_pstn_actn->l_actn_typ == EOD_MRGN_REP ) /** EOD_MRGN_REP Addedin Ver 5.4 **/
			{
				ptr_st_undfut_pos->d_add_mrgn_val = 0;
			}

			if ( ( ptr_st_undfut_pos->l_opnpstn_qty == 0 ) ||
					 ( ( ptr_st_undfut_pos->l_opnpstn_qty > 0 ) &&
					   ( ptr_st_undfut_pos_crrnt->l_opnpstn_qty < 0 ) ) ||
					 ( ( ptr_st_undfut_pos->l_opnpstn_qty < 0 ) &&
					   ( ptr_st_undfut_pos_crrnt->l_opnpstn_qty > 0 ) ) )
			{
				ptr_st_undfut_pos->d_add_mrgn_val = 0;
			}
							
		}
		else
		{
 			EXEC SQL CLOSE :sys_cursor;
 			EXEC SQL FREE :sys_cursor;
		}

		if ( ( ptr_st_undfut_pos->d_exctd_mrgn + 
					 ptr_st_undfut_pos->d_sprd_mrgn ) <=
					 ptr_st_undfut_pos->d_sprd_pl )
		{
			ptr_st_undfut_pos->d_trd_mrgn = 0;
		}
		else
		{
			ptr_st_undfut_pos->d_trd_mrgn = ptr_st_undfut_pos->d_exctd_mrgn +
																			ptr_st_undfut_pos->d_sprd_mrgn -
																			ptr_st_undfut_pos->d_sprd_pl;
		}

		if ( ( ptr_st_undfut_pos->d_imtm_exctd_mrgn + 
					 ptr_st_undfut_pos->d_imtm_sprd_mrgn ) <=
					 ptr_st_undfut_pos->d_imtm_sprd_pl )
		{
			ptr_st_undfut_pos->d_imtm_trd_mrgn = 0;
		}
		else
		{
			ptr_st_undfut_pos->d_imtm_trd_mrgn = 
																		ptr_st_undfut_pos->d_imtm_exctd_mrgn +
																		ptr_st_undfut_pos->d_imtm_sprd_mrgn -
																		ptr_st_undfut_pos->d_imtm_sprd_pl;
		}

		if ( ( ptr_st_undfut_pos->d_mm_exctd_mrgn + 
					 ptr_st_undfut_pos->d_mm_sprd_mrgn ) <=
					 ptr_st_undfut_pos->d_mm_sprd_pl )
		{
			ptr_st_undfut_pos->d_mm_trd_mrgn = 0;
		}
		else
		{
			ptr_st_undfut_pos->d_mm_trd_mrgn = ptr_st_undfut_pos->d_mm_exctd_mrgn +
																			ptr_st_undfut_pos->d_mm_sprd_mrgn -
																			ptr_st_undfut_pos->d_mm_sprd_pl;
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog ( c_ServiceName, "Actual net open value  :%lf:", d_sum_CUOV );
			fn_userlog ( c_ServiceName, "MTMed open val         :%lf:", ptr_st_undfut_pos->d_mtm_opn_val );
			fn_userlog ( c_ServiceName, "Spread PL              :%lf:", ptr_st_undfut_pos->d_sprd_pl );

			fn_userlog ( c_ServiceName, "Act net open value -CMP:%lf:", d_sum_CUOV_cmp );
/*************************************************
	fn_userlog ( c_ServiceName, "Intra MTMed open val   :%lf:", 
                              ptr_st_undfut_pos->d_imtm_opn_val );
*************************************************/
			fn_userlog ( c_ServiceName, "Spread PL at IMTM      :%lf:", ptr_st_undfut_pos->d_imtm_sprd_pl );
		}

    if(DEBUG_MSG_LVL_4) /** Ver 4.6 **/ /*** Debug level change from 2 to 4 in Ver 4.7   ***/
    {
      fn_userlog ( c_ServiceName, "Executed Margin        :%lf:", ptr_st_undfut_pos->d_exctd_mrgn );
      fn_userlog ( c_ServiceName, "Total Trade Margin     :%lf:", ptr_st_undfut_pos->d_trd_mrgn );
      fn_userlog ( c_ServiceName, "Executed Margin at IMTM:%lf:", ptr_st_undfut_pos->d_imtm_exctd_mrgn );
      fn_userlog ( c_ServiceName, "Total IMTM Trade Margin:%lf:", ptr_st_undfut_pos->d_imtm_trd_mrgn );
      fn_userlog ( c_ServiceName, "Spread PL at MM        :%lf:", ptr_st_undfut_pos->d_mm_sprd_pl );
      fn_userlog ( c_ServiceName, "Executed Margin at MM  :%lf:", ptr_st_undfut_pos->d_mm_exctd_mrgn );
      fn_userlog ( c_ServiceName, "Total Trade Mrgn at MM :%lf:", ptr_st_undfut_pos->d_mm_trd_mrgn );
		}
    /***  Ver 4.7 start ***/
   if(DEBUG_MSG_LVL_0)  
    {
     fn_userlog ( c_ServiceName, "Executed Margin        :%lf:", ptr_st_undfut_pos->d_exctd_mrgn );
     fn_userlog ( c_ServiceName, "Total Trade Margin     :%lf:", ptr_st_undfut_pos->d_trd_mrgn );
     fn_userlog ( c_ServiceName, "Spread PL              :%lf:", ptr_st_undfut_pos->d_sprd_pl );
     fn_userlog ( c_ServiceName, "Spread Margin :%lf:",ptr_st_undfut_pos->d_sprd_mrgn);
    }
    /***  Ver 4.7 end ***/
	}
	return SUCCESS;
}

int fn_call_actn_grp1( char *c_ServiceName,
											 struct vw_pstn_actn *ptr_st_pstn_actn,
                  		 struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                  		 struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                  	 	 struct vw_err_msg *ptr_st_err_msg)
{
  int i_returncode;

	double d_pl_amt;
	double d_diff_UEM;
	double d_diff_amv;
	double d_diff_UTM;
	double d_diff_UOM;
	double d_diff_UAM;
	double d_UTM_amt;
	double d_balance_amt;
	double d_bal_to_apply;
  char  c_setllmnt_flg = '\0'; /*** ver 5.3 ***/
  int   i_cnt = 0;/*** ver 5.3 ***/
	 /*** Ver 5.1 Starts ***/
	double d_diff_amv1 = 0.0;
	double d_diff_amv2 = 0.0;
	double d_wgt_roll_diff_amt = 0.0;
	double d_wgt_roll_diff_pnl = 0.0;
	double d_roll_diff_amt = 0.0;
	double d_roll_diff_pnl = 0.0;
	char    c_ordr_rfrnc[19];
  char    c_ordr_rfrnc_tmp[25];
	char 		*c_ordr_rfrnc_ref = '\0';
  char    c_trade_ref_num [ 25 ] = "\0";
	MEMSET	(c_ordr_rfrnc);
	MEMSET	(c_ordr_rfrnc_tmp);
	 /*** Ver 5.1 Ends ***/

  char c_narration_id[4];
  char c_dr_without_lmt_flg;
  char c_pos_avl;
	varchar c_trade_dt[12];					/** Ver 4.9 **/
  char  c_tmp_roll_rmrks [ 133 ] ="\0"; /*** Ver 5.1 ***/

	char	c_tmp_rmrks [ 133 ] ;
	char c_reason_cd [ 2000 ];							/*** Ver 1.2 ***/
	MEMSET(c_trade_dt);             /** Ver 4.9 **/
  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;             /* a cursor variable */
		char	sql_cln_mtch_accnt[11];
		char	sql_xchng_cd[4];
		char	sql_prd_typ;
		char	sql_cntrct_tag;
		char	sql_undrlyng[7];
    varchar c_exp_dt[LEN_DATE];
		varchar c_trd_dt[12];								/*** Ver 1.6 ***/
		double d_mrgn_blkd = 0.0;

    EXEC SQL INCLUDE "table/iai_info_account_info.h"; /* Ver 4.4 */

		/** Current contract level positions of other contracts in the same  **/
    /** underlying                                                       **/
    struct vw_cntfut_pos st_cntpos_crrnt;
		/** Copy of contract level position on which action is to be done taken **/
    /** before applying the action                                          **/
    struct vw_cntfut_pos st_cntpos_old;
		/** Contract level position on which action is to be done **/
    struct vw_cntfut_pos st_cntpos_md_rc;
  EXEC SQL END DECLARE SECTION;

	strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
	strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
	strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
	sql_prd_typ = ptr_st_pstn_actn->c_prd_typ;
	sql_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;

  if ( ptr_st_pstn_actn->c_nkd_blkd_flg == ROLLOVER )
  {
  strcpy ( c_tmp_roll_rmrks, ptr_st_pstn_actn->c_ref_rmrks ); /*** ver 5.1 ***/
  fn_userlog( c_ServiceName ,"ROLLOVER LIVE ISSUE REMARKS :%s:",c_tmp_roll_rmrks); /*** 5.1 ***/
  }
	/** This bit of code down below will fetch all the contract level **/
	/** positions. Then it will find the contract on which the input  **/
	/** action is to be performed and then perform it. It then summs  **/
	/** up all the contract level postion to arrive at a consolidated **/
	/** underlying level position. It then recalculates the margin.   **/
	/** This bit of code need not be performed for actions which do   **/
	/** not involve a change in postion                               **/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Building new underlying position" );
		fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->c_nkd_blkd_flg Is :%c:", ptr_st_pstn_actn->c_nkd_blkd_flg ); /* Ver 3.0 */
	}

	/** Prepare a list of contracts from contract position table **/
	EXEC SQL ALLOCATE :sys_cursor;

   	EXEC SQL EXECUTE
     	BEGIN
         OPEN :sys_cursor FOR
   				SELECT  FFP_CLM_MTCH_ACCNT,
									FFP_XCHNG_CD,
									FFP_PRDCT_TYP,
									FFP_INDSTK,
									FFP_UNDRLYNG,
									TO_CHAR (FFP_EXPRY_DT,'DD-Mon-YYYY'),
									FFP_EXER_TYP,
									FFP_CNTRCT_TAG,
									FFP_IBUY_QTY,
									FFP_IBUY_ORD_VAL,
									FFP_ISELL_QTY,
									FFP_ISELL_ORD_VAL,
									FFP_EXBUY_QTY,
									FFP_EXBUY_ORD_VAL,
									FFP_EXSELL_QTY,
									FFP_EXSELL_ORD_VAL,
									FFP_BUY_EXCTD_QTY,
									FFP_SELL_EXCTD_QTY,
									FFP_OPNPSTN_FLW,
									FFP_OPNPSTN_QTY,
									FFP_OPNPSTN_VAL,
									FFP_MTM_OPN_VAl
					FROM		FFP_FO_FUTURES_PSTN
					WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
					AND			FFP_XCHNG_CD       = :sql_xchng_cd
					AND			FFP_PRDCT_TYP      = :sql_prd_typ
					AND			FFP_UNDRLYNG       = :sql_undrlyng
					AND			FFP_CNTRCT_TAG		 = :sql_cntrct_tag
					ORDER BY FFP_EXPRY_DT asc;
     		END;
   		END-EXEC;

 	if ( SQLCODE != 0 )
  {
   	EXEC SQL FREE :sys_cursor;
   	fn_errlog ( c_ServiceName, "S31070", SQLMSG, ptr_st_err_msg->c_err_msg );
   	return FAILURE;
  }

	c_pos_avl = 'N';

	/** Fetch one contract at a time from the list. If the fetched  **/
	/** contract is the one we need to apply the change apply it.   **/
	/** Else simply add the contract to  underlying level position  **/
	 while ( 1 )
  {
   		EXEC SQL 	FETCH   :sys_cursor
								INTO		:st_cntpos_crrnt.c_cln_mtch_accnt,
           							:st_cntpos_crrnt.c_xchng_cd,
           							:st_cntpos_crrnt.c_prd_typ,
           							:st_cntpos_crrnt.c_ctgry_indstk,
           							:st_cntpos_crrnt.c_undrlyng,
           							:c_exp_dt,
           							:st_cntpos_crrnt.c_exrc_typ,
           							:st_cntpos_crrnt.c_cntrct_tag,
           							:st_cntpos_crrnt.l_ibuy_qty,
           							:st_cntpos_crrnt.d_ibuy_ord_vl,
           							:st_cntpos_crrnt.l_isell_qty,
           							:st_cntpos_crrnt.d_isell_ord_vl,
           							:st_cntpos_crrnt.l_exbuy_qty,
           							:st_cntpos_crrnt.d_exbuy_ord_vl,
           							:st_cntpos_crrnt.l_exsell_qty,
           							:st_cntpos_crrnt.d_exsell_ord_vl,
           							:st_cntpos_crrnt.l_buy_exctd_qty,
           							:st_cntpos_crrnt.l_sell_exctd_qty,
           							:st_cntpos_crrnt.c_opnpstn_flw,
           							:st_cntpos_crrnt.l_opnpstn_qty,
           							:st_cntpos_crrnt.d_org_opn_val,
           							:st_cntpos_crrnt.d_mtm_opn_val;

   		if ( SQLCODE != 0 )
   		{
     		if ( SQLCODE == NO_DATA_FOUND )
     		{
       		break;
     		}

     		EXEC SQL CLOSE :sys_cursor;
     		EXEC SQL FREE :sys_cursor;
   			fn_errlog ( c_ServiceName, "S31075", SQLMSG, 
																					ptr_st_err_msg->c_err_msg );
   			return FAILURE;
   		}
			SETNULL( c_exp_dt );
			strcpy ( st_cntpos_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
			rtrim(st_cntpos_crrnt.c_xchng_cd);
			rtrim(st_cntpos_crrnt.c_undrlyng);
			rtrim(st_cntpos_crrnt.c_expry_dt);

			if(DEBUG_MSG_LVL_2) /*** Ver 4.6 ***/
			{
				fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_exp_dt.arr );
				fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntpos_crrnt.l_ibuy_qty );
				fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntpos_crrnt.d_ibuy_ord_vl );
				fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntpos_crrnt.l_isell_qty );
				fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntpos_crrnt.d_isell_ord_vl );
				fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntpos_crrnt.l_exbuy_qty );
				fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntpos_crrnt.d_exbuy_ord_vl );
				fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntpos_crrnt.l_exsell_qty );
				fn_userlog ( c_ServiceName, "EXCH sell val      :%lf:", st_cntpos_crrnt.d_exsell_ord_vl );
				fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntpos_crrnt.l_buy_exctd_qty );
				fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntpos_crrnt.l_sell_exctd_qty );
				fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntpos_crrnt.l_opnpstn_qty );
				fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntpos_crrnt.d_org_opn_val );
				fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntpos_crrnt.d_mtm_opn_val ); 
			} 

			if( (strcmp(st_cntpos_crrnt.c_xchng_cd,
																ptr_st_pstn_actn->c_xchng_cd) == 0 ) &&
					(st_cntpos_crrnt.c_prd_typ == ptr_st_pstn_actn->c_prd_typ) && 
			    (strcmp(st_cntpos_crrnt.c_undrlyng,
																ptr_st_pstn_actn->c_undrlyng) == 0 ) &&
					/***Commented for Ver 1.5
			    (strcmp(st_cntpos_crrnt.c_expry_dt,
																ptr_st_pstn_actn->c_expry_dt) == 0 ) 
					Comment ends**/
					/**Ver 1.5 added for DL-2 order placement issue **/
			    (strcasecmp(st_cntpos_crrnt.c_expry_dt,
																ptr_st_pstn_actn->c_expry_dt) == 0 ) &&
					(st_cntpos_crrnt.c_exrc_typ == ptr_st_pstn_actn->c_exrc_typ) )
			{
				
				memcpy ( &st_cntpos_old, 
                 &st_cntpos_crrnt, 
                 sizeof( st_cntpos_old ) );

				i_returncode =	fn_apply_cnt_actn ( c_ServiceName,
																						ptr_st_pstn_actn, 
                            								&st_cntpos_crrnt,
                        										ptr_st_err_msg );
  			if ( i_returncode == -1 )
  			{
  				return FAILURE;
  			}

  			memcpy ( &st_cntpos_md_rc, 
                 &st_cntpos_crrnt, 
								 sizeof( st_cntpos_md_rc ) );

				c_pos_avl = 'Y';
			} 
				
			fn_sum_cpos ( st_cntpos_crrnt, 
                    ptr_st_undfut_pos_to_be );
	}

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

	/** If the client is building a position for the first time in the **/
	/** contract then it will not appear in the above list. Hence we   **/
	/** process them seperately                                        **/
	if ( c_pos_avl == 'N' )
	{
   	strcpy( st_cntpos_md_rc.c_cln_mtch_accnt,
																ptr_st_pstn_actn->c_cln_mtch_accnt );
   	strcpy( st_cntpos_md_rc.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
   	strcpy( st_cntpos_md_rc.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
   	strcpy( st_cntpos_md_rc.c_expry_dt, ptr_st_pstn_actn->c_expry_dt );
   	st_cntpos_md_rc.c_prd_typ  = ptr_st_pstn_actn->c_prd_typ;
   	st_cntpos_md_rc.c_exrc_typ  = ptr_st_pstn_actn->c_exrc_typ;
   	st_cntpos_md_rc.c_opt_typ  = ptr_st_pstn_actn->c_opt_typ;
   	st_cntpos_md_rc.l_strike_prc  = ptr_st_pstn_actn->l_strike_prc;
   	st_cntpos_md_rc.c_ctgry_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
   	st_cntpos_md_rc.c_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;
   	st_cntpos_md_rc.l_ibuy_qty = 0;
   	st_cntpos_md_rc.d_ibuy_ord_vl = 0;
   	st_cntpos_md_rc.l_isell_qty = 0;
   	st_cntpos_md_rc.d_isell_ord_vl = 0;
   	st_cntpos_md_rc.l_exbuy_qty = 0;
   	st_cntpos_md_rc.d_exbuy_ord_vl = 0;
   	st_cntpos_md_rc.l_exsell_qty = 0;
   	st_cntpos_md_rc.d_exsell_ord_vl = 0;
   	st_cntpos_md_rc.l_buy_exctd_qty = 0;
   	st_cntpos_md_rc.l_sell_exctd_qty = 0;
   	st_cntpos_md_rc.c_opnpstn_flw = 'N';
   	st_cntpos_md_rc.l_opnpstn_qty = 0;
   	st_cntpos_md_rc.d_org_opn_val = 0;
   	st_cntpos_md_rc.d_mtm_opn_val = 0;
   	st_cntpos_md_rc.l_und_opn_qty = 0;
   	st_cntpos_md_rc.d_und_opn_val = 0;
   	st_cntpos_md_rc.d_ibuy_mrgn = 0;
   	st_cntpos_md_rc.d_isell_mrgn = 0;
   	st_cntpos_md_rc.d_exbuy_mrgn = 0;
   	st_cntpos_md_rc.d_exsell_mrgn = 0;
   	st_cntpos_md_rc.d_ordr_mrgn = 0;
   	st_cntpos_md_rc.c_oprn_typ = '*';

		i_returncode =	fn_apply_cnt_actn ( c_ServiceName,
																				ptr_st_pstn_actn, 
                        								&st_cntpos_md_rc,
                        								ptr_st_err_msg );
  	if ( i_returncode == -1 )
  	{
  		return FAILURE;
  	}

		fn_sum_cpos ( st_cntpos_md_rc, 
                  ptr_st_undfut_pos_to_be );
	}

	if ( st_cntpos_md_rc.l_opnpstn_qty > 0 )
	{
		st_cntpos_md_rc.c_opnpstn_flw = BUY;
	}
	else if ( st_cntpos_md_rc.l_opnpstn_qty < 0 )
	{
		st_cntpos_md_rc.c_opnpstn_flw = SELL;
	}	
  else 
  {
		st_cntpos_md_rc.c_opnpstn_flw = NEUTRAL;
  }

	/** Update the contract level position on which the action has been **/
	/** applied                                                         **/
	if( c_pos_avl == 'N' && ptr_st_pstn_actn->l_actn_typ != EOD_MRGN_REP ) /**  action typ condition added in Ver 5.4 **/
	{
   	EXEC SQL
     	INSERT INTO FFP_FO_FUTURES_PSTN
     	(
				FFP_CLM_MTCH_ACCNT,
				FFP_XCHNG_CD,
				FFP_PRDCT_TYP,
				FFP_INDSTK,
				FFP_UNDRLYNG,
				FFP_EXPRY_DT,
				FFP_EXER_TYP,
				FFP_CNTRCT_TAG,
				FFP_IBUY_QTY,
				FFP_IBUY_ORD_VAL,
				FFP_ISELL_QTY,
				FFP_ISELL_ORD_VAL,
				FFP_EXBUY_QTY,
				FFP_EXBUY_ORD_VAL,
				FFP_EXSELL_QTY,
				FFP_EXSELL_ORD_VAL,
				FFP_BUY_EXCTD_QTY,
				FFP_SELL_EXCTD_QTY,
				FFP_OPNPSTN_FLW,
				FFP_OPNPSTN_QTY,
				FFP_OPNPSTN_VAL,
				FFP_MTM_OPN_VAL
			)
			VALUES
			(
				:st_cntpos_md_rc.c_cln_mtch_accnt,
     		:st_cntpos_md_rc.c_xchng_cd,
     		:st_cntpos_md_rc.c_prd_typ,
     		:st_cntpos_md_rc.c_ctgry_indstk,
     		:st_cntpos_md_rc.c_undrlyng,
     		to_date(:st_cntpos_md_rc.c_expry_dt,'DD-Mon-YYYY'),
     		:st_cntpos_md_rc.c_exrc_typ,
     		:st_cntpos_md_rc.c_cntrct_tag,
     		:st_cntpos_md_rc.l_ibuy_qty,
     		:st_cntpos_md_rc.d_ibuy_ord_vl,
     		:st_cntpos_md_rc.l_isell_qty,
     		:st_cntpos_md_rc.d_isell_ord_vl,
     		:st_cntpos_md_rc.l_exbuy_qty,
     		:st_cntpos_md_rc.d_exbuy_ord_vl,
     		:st_cntpos_md_rc.l_exsell_qty,
     		:st_cntpos_md_rc.d_exsell_ord_vl,
     		:st_cntpos_md_rc.l_buy_exctd_qty,
     		:st_cntpos_md_rc.l_sell_exctd_qty,
     		:st_cntpos_md_rc.c_opnpstn_flw,
     		:st_cntpos_md_rc.l_opnpstn_qty,
     		:st_cntpos_md_rc.d_org_opn_val,
     		:st_cntpos_md_rc.d_mtm_opn_val
			);

		if ( SQLCODE != 0 )
   	{
   		fn_errlog(c_ServiceName, "S31080", SQLMSG, ptr_st_err_msg->c_err_msg );
   		return FAILURE;
   	}
	}
  else if ( ptr_st_pstn_actn->l_actn_typ != EOD_MRGN_REP ) /** Ver 5.4 **/
  {
		/***  Ver 4.9 starts ***/
		if( ptr_st_pstn_actn->l_actn_typ == EOD_MTM ) 
		{
    	EXEC SQL
      	SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY')
      	INTO   :c_trade_dt
      	FROM   EXG_XCHNG_MSTR
      	WHERE  EXG_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
      	AND    EXG_MKT_TYP = 'D';

	    if ( SQLCODE != 0 )
  	  {
    	   fn_errlog(c_ServiceName, "S31085", SQLMSG, ptr_st_err_msg->c_err_msg );
      	 return FAILURE;
    	}
			if(DEBUG_MSG_LVL_3)
			{
			fn_userlog ( c_ServiceName, "For ACTION TYPE :EOD_MTM:1" );
			}
		}
		SETNULL(c_trade_dt);
		if(DEBUG_MSG_LVL_3)
  	{
			fn_userlog ( c_ServiceName, "Trade Date For Updation is :%s:",c_trade_dt.arr );
		}
		/***  Ver 4.9 end ***/

    EXEC SQL
      UPDATE  FFP_FO_FUTURES_PSTN
      SET     FFP_IBUY_QTY       = :st_cntpos_md_rc.l_ibuy_qty,
              FFP_IBUY_ORD_VAL   = :st_cntpos_md_rc.d_ibuy_ord_vl,
              FFP_ISELL_QTY      = :st_cntpos_md_rc.l_isell_qty,
              FFP_ISELL_ORD_VAL  = :st_cntpos_md_rc.d_isell_ord_vl,
              FFP_EXBUY_QTY      = :st_cntpos_md_rc.l_exbuy_qty,
              FFP_EXBUY_ORD_VAL  = :st_cntpos_md_rc.d_exbuy_ord_vl,
              FFP_EXSELL_QTY     = :st_cntpos_md_rc.l_exsell_qty,
              FFP_EXSELL_ORD_VAL = :st_cntpos_md_rc.d_exsell_ord_vl,
              FFP_BUY_EXCTD_QTY  = :st_cntpos_md_rc.l_buy_exctd_qty,
              FFP_SELL_EXCTD_QTY = :st_cntpos_md_rc.l_sell_exctd_qty,
              FFP_OPNPSTN_FLW    = :st_cntpos_md_rc.c_opnpstn_flw,
              FFP_OPNPSTN_QTY    = :st_cntpos_md_rc.l_opnpstn_qty,
              FFP_OPNPSTN_VAL    = :st_cntpos_md_rc.d_org_opn_val,
              FFP_MTM_OPN_VAL    = :st_cntpos_md_rc.d_mtm_opn_val,
              FFP_TRG_PRC        = DECODE(:st_cntpos_md_rc.c_opnpstn_flw,'N',0,FFP_TRG_PRC), /** Ver 3.4 **/
              FFP_MIN_TRG_PRC    = DECODE(:st_cntpos_md_rc.c_opnpstn_flw,'N',0,FFP_MIN_TRG_PRC), /* Ver 3.4 **/
              FFP_EODMTM_DT      = DECODE(:ptr_st_pstn_actn->l_actn_typ,2,:c_trade_dt,FFP_EODMTM_DT)/** Ver 4.9 **/
      WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
      AND     FFP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
      AND     FFP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
      AND     FFP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
      AND     FFP_EXPRY_DT       = to_date(:ptr_st_pstn_actn->c_expry_dt,
                                      'DD-Mon-YYYY')
      AND     FFP_EXER_TYP       = :ptr_st_pstn_actn->c_exrc_typ
      AND     FFP_CNTRCT_TAG     = :ptr_st_pstn_actn->c_cntrct_tag;

		if ( SQLCODE != 0 )
   	{
   		fn_errlog(c_ServiceName, "S31090", SQLMSG, ptr_st_err_msg->c_err_msg );
   		return FAILURE;
	 	}
	}

	if(DEBUG_MSG_LVL_2) /*** ver 4.6 ***/
	{
		fn_userlog ( c_ServiceName, "Calcualted underlying level position" );
		fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_ibuy_qty );
		fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", ptr_st_undfut_pos_to_be->d_ibuy_ord_vl );
		fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_isell_qty );
		fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", ptr_st_undfut_pos_to_be->d_isell_ord_vl );
		fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_exbuy_qty );
		fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", ptr_st_undfut_pos_to_be->d_exbuy_ord_vl );
		fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_exsell_qty );
		fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", ptr_st_undfut_pos_to_be->d_exsell_ord_vl );
		fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", ptr_st_undfut_pos_to_be->l_buy_exctd_qty );
		fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", ptr_st_undfut_pos_to_be->l_sell_exctd_qty );
		fn_userlog ( c_ServiceName, "Open qty          :%ld:", ptr_st_undfut_pos_to_be->l_opnpstn_qty );
		fn_userlog ( c_ServiceName, "Original open val :%lf:", ptr_st_undfut_pos_to_be->d_org_opn_val );
		fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", ptr_st_undfut_pos_to_be->d_mtm_opn_val );
		fn_userlog ( c_ServiceName, "Add Margin val    :%lf:", ptr_st_undfut_pos_to_be->d_add_mrgn_val );
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Calculating margin" );
	}
	/** Calculate the margin on the new underlying position **/

	i_returncode = fn_upd_mrgn ( c_ServiceName, 
                               ptr_st_pstn_actn, 
											         ptr_st_undfut_pos_crrnt, 
											         ptr_st_undfut_pos_to_be, 
                               ptr_st_err_msg);
                              

  if ( i_returncode != 0 )
  {
  	return FAILURE;
  }

	/**   if(DEBUG_MSG_LVL_3) **/
	if(DEBUG_MSG_LVL_2) /** changed to 0 in Ver 4.6 **/
	{
		/*** fn_userlog ( c_ServiceName, "Current margin values" ); *** Commented in Ver 4.6 ***/
		fn_userlog ( c_ServiceName, "Current Margin Values : Order level margin     :%lf:", ptr_st_undfut_pos_crrnt->d_ordr_mrgn );
		fn_userlog ( c_ServiceName, "Executed level margin  :%lf:", ptr_st_undfut_pos_crrnt->d_exctd_mrgn );
		fn_userlog ( c_ServiceName, "Spread level margin    :%lf:", ptr_st_undfut_pos_crrnt->d_sprd_mrgn );
		fn_userlog ( c_ServiceName, "Spread profit and loss :%lf:", ptr_st_undfut_pos_crrnt->d_sprd_pl );
		fn_userlog ( c_ServiceName, "Trade level margin  		:%lf:", ptr_st_undfut_pos_crrnt->d_trd_mrgn );
		/*** fn_userlog ( c_ServiceName, "To be margin values" ); *** Commented in Ver 4.6 ***/
	 	fn_userlog ( c_ServiceName, "To be margin values : Order level margin :%lf:", ptr_st_undfut_pos_to_be->d_ordr_mrgn );
 		fn_userlog ( c_ServiceName, "Executed level margin  :%lf:", ptr_st_undfut_pos_to_be->d_exctd_mrgn );
 		fn_userlog ( c_ServiceName, "Spread level margin    :%lf:", ptr_st_undfut_pos_to_be->d_sprd_mrgn );
 		fn_userlog ( c_ServiceName, "Spread profit and loss :%lf:", ptr_st_undfut_pos_to_be->d_sprd_pl );
		fn_userlog ( c_ServiceName, "Trade level margin  		:%lf:", ptr_st_undfut_pos_to_be->d_trd_mrgn );
	}


	/** The code from this point onwards does the following activity   **/
	/** Based on the type of action compare the current margin with    **/
	/** required margin and update them. Do the profit loss correction **/

	/** This bit of code down below checks the difference betweend the  **/
	/** current order level margin with the required order level margin **/
	/** then take a corrective measure. This code need not be called for**/
	/** action which do not involve any order level margin change       **/
	if (  ( ptr_st_pstn_actn->l_actn_typ != EOD_MTM           ) &&
				( ptr_st_pstn_actn->l_actn_typ != CLOSE_OUT_DEALS ) &&
        ( ptr_st_pstn_actn->l_actn_typ != EOD_MRGN_REP  ) )  /** EOD_MRGN_REP added in ver 5.4 **/
	{
  	switch ( ptr_st_pstn_actn->l_actn_typ )
  	{
    	case  SYSTEM_PLACE_ORDER:
     				strcpy( c_narration_id , ON_ORDER_PLACEMENT);
      			c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; 
          	break;

    	case  JOINT_SQUARE_OFF_ORDER:
     				strcpy( c_narration_id , ON_ORDER_PLACEMENT);
      			c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; 
          	break;

    	case  ORS_NEW_ORD_REQ:
     				strcpy( c_narration_id , ON_ORDER_PLACEMENT);
						if ( ptr_st_pstn_actn->c_nkd_blkd_flg == 'P') /*** Ver 3.0 -- If condition Added ***/
            {
              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
							if(DEBUG_MSG_LVL_3)    /*** Ver 3.0 ***/
              {
                fn_userlog ( c_ServiceName, "Inside case DEBIT_TILL_LIMIT for Corp actn ..." );
              }
            }
            else
            {
      				c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT; 
						}

          	break;

    	case  ORS_NEW_ORD_ACPT:
     				strcpy( c_narration_id , ON_ORDER_ACCEPTANCE);
						if ( ptr_st_pstn_actn->c_mtm_flag == ORD_ACCPT_FOR_SYSTEM_SQ_OFF )
						{
							c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
						}
						else
						{
      				c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;
						}
          	break;

    	case  ORS_NEW_ORD_RJCT:
     				strcpy( c_narration_id , ON_ORDER_REJECTION);
      			c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT; 
          	break;

    	case  ORS_MOD_ORD_REQ:
     				strcpy( c_narration_id , ON_MODIFICATION_PLACEMENT);
      			c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT; 
          	break;

    	case  ORS_MOD_ORD_ACPT:
     				strcpy( c_narration_id , ON_MODIFICATION_ACCEPTANCE);
      			c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;
          	break;

    	case  ORS_MOD_ORD_RJCT:
     				strcpy( c_narration_id , ON_MODIFICATION_REJECTION);
      			c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT; 
          	break;

    	case  ORS_CAN_ORD_REQ:
     				strcpy( c_narration_id , ON_CANCELLATION_PLACEMENT);
      			/********************************************************
            Modified to support the Increase in Initial Margin % and 
            the cancellation of the order
            c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT; 
            ********************************************************/
      			c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; 
          	break;

    	case  ORS_CAN_ORD_ACPT:
     				strcpy( c_narration_id , ON_CANCELLATION_ACCEPTANCE);
      			/********************************************************
            Modified to support the Increase in Initial Margin % and 
            the cancellation of the order
            c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT; 
            ********************************************************/
      			c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; 
          	break;

    	case  ORS_CAN_ORD_RJCT:
     				strcpy( c_narration_id , ON_CANCELLATION_REJECT);
      			/********************************************************
            Modified to support the Increase in Initial Margin % and 
            the cancellation of the order
            c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT; 
            ********************************************************/
      			c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; 
          	break;

    	case  ORS_TRD_CONF:
     				strcpy( c_narration_id , ON_TRADE_EXECUTION);
      			c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT; 
          	break;

    	case  ORS_ORD_EXP:
     				strcpy( c_narration_id , ON_EXPIRY);
      			c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT; 
          	break;

    	default:
          	strcpy( ptr_st_err_msg->c_err_msg, "Invalid action type");
  					fn_userlog ( c_ServiceName,"Invalid action type");
    				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
          	break;
		}
	
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog ( c_ServiceName, " ptr_st_pstn_actn->c_nkd_blkd_flg |%c|",ptr_st_pstn_actn->c_nkd_blkd_flg);
		}

	/*** at the time of ROLLOVER order placement we are not blocking order margin so order margin is 0 ***/

	if ( ptr_st_pstn_actn->c_nkd_blkd_flg == ROLLOVER )  /*** Added in ver 2.8 ***/
  {
 		if ( ptr_st_pstn_actn->l_actn_typ == ORS_ORD_EXP || ptr_st_pstn_actn->l_actn_typ == ORS_NEW_ORD_RJCT || ptr_st_pstn_actn->l_actn_typ == ORS_IOC_CAN_ACPT )  /*** To Handle RollOver Order Cancellation Response  ***/
    {
/***      d_diff_amv = ptr_st_undfut_pos_crrnt->d_add_mrgn_val;	*** Commented in Ver 5.1 ***/
/***      ptr_st_undfut_pos_to_be->d_add_mrgn_val = 0;	 *** Commented in Ver 5.1 ***/

			/*** Ver 5.1 Starts ***/
 
			strcpy(c_ordr_rfrnc_tmp,ptr_st_pstn_actn->c_ref_rmrks);
  		c_ordr_rfrnc_ref = strtok(c_ordr_rfrnc_tmp,"-");
			strcpy(c_ordr_rfrnc,c_ordr_rfrnc_ref);				

			if(DEBUG_MSG_LVL_3)
  		{
    		fn_userlog( c_ServiceName,"Order Refernce is :%s:",c_ordr_rfrnc);
      }

			EXEC SQL
			SELECT NVL(FOD_SROLL_DIFF_AMT,0),
						 NVL(FOD_SROLL_LSS_AMT,0)
			INTO	 :d_roll_diff_amt,
						 :d_roll_diff_pnl
			FROM	 FOD_FO_ORDR_DTLS
			WHERE	 FOD_ORDR_RFRNC =	:c_ordr_rfrnc;

			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
			{
				fn_errlog(c_ServiceName, "S31095", SQLMSG, ptr_st_err_msg->c_err_msg );
      	return FAILURE;
			}

            d_diff_amv = d_roll_diff_amt + d_roll_diff_pnl;

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"d_roll_diff_amt is :%lf:",d_roll_diff_amt);
				fn_userlog(c_ServiceName,"ptr_st_pstn_actn->l_orgnl_qty is :%ld:",ptr_st_pstn_actn->l_orgnl_qty);
				fn_userlog(c_ServiceName,"d_roll_diff_pnl is :%lf:",d_roll_diff_pnl);
				fn_userlog(c_ServiceName,"ptr_st_pstn_actn->l_orgnl_qty is :%ld:",ptr_st_pstn_actn->l_orgnl_qty);
				fn_userlog(c_ServiceName,"d_diff_amv is :%lf:",d_diff_amv);
			}

			/*** Ver 5.1 Ends ***/

      if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
      {
      	fn_userlog(c_ServiceName,"RollOver Amount To Be Released :%lf:",d_diff_amv);
			}
      if( d_diff_amv != 0 )
      {
        i_returncode = fn_upd_limits( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      RELEASE_OF_ADD_MARGIN,
                                      DEBIT_WITHOUT_LIMIT,
                                      d_diff_amv,
                                      &d_balance_amt);
        if ( i_returncode != 0 )
        {
          return i_returncode;
        }

				/*** Ver 5.1 Starts ***/
				ptr_st_undfut_pos_to_be->d_add_mrgn_val =	ptr_st_undfut_pos_crrnt->d_add_mrgn_val - d_diff_amv;

				EXEC SQL
				UPDATE FOD_FO_ORDR_DTLS
				SET		 FOD_SROLL_DIFF_AMT = FOD_SROLL_DIFF_AMT - :d_roll_diff_amt,
							 FOD_SROLL_LSS_AMT	= FOD_SROLL_LSS_AMT - :d_roll_diff_pnl
				WHERE  FOD_ORDR_RFRNC 		= :c_ordr_rfrnc;

				if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      	{
        	fn_errlog(c_ServiceName, "S31100", SQLMSG, ptr_st_err_msg->c_err_msg );
        	return FAILURE;
      	}
				/*** Ver 5.1 Ends ***/
      }
    }

		ptr_st_undfut_pos_to_be->d_ordr_mrgn = ptr_st_undfut_pos_crrnt->d_ordr_mrgn;
	}
  else if ( ptr_st_pstn_actn->c_nkd_blkd_flg == ROLLOVER_WITH_SPREAD ) /** Ver 5.1 **/
  {
     ptr_st_undfut_pos_to_be->d_ordr_mrgn = ptr_st_undfut_pos_crrnt->d_ordr_mrgn;
     /** Do nothing Here *** to be done in calling service ***/
  }
	else
	{
		d_diff_UOM = ptr_st_undfut_pos_crrnt->d_ordr_mrgn - ptr_st_undfut_pos_to_be->d_ordr_mrgn ;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog ( c_ServiceName, "Difference in UOM :%lf:", d_diff_UOM );
		}

		if ( d_diff_UOM != 0 )
		{
			i_returncode = fn_upd_limits( c_ServiceName,
										 								ptr_st_pstn_actn,
                  	 								ptr_st_err_msg,
										 								c_narration_id,
										 								c_dr_without_lmt_flg,
										 								d_diff_UOM,
																		&d_balance_amt);
      if ( i_returncode != 0 )
      {
    		return i_returncode;
      }
		
			/*** Added to take care of balance amount in case of ***/
			/*** DEBIT_TILL_LIMIT. d_balance_amt is added        ***/
      /*** since it is always negative or Zero             ***/	
			ptr_st_undfut_pos_to_be->d_ordr_mrgn =
													ptr_st_undfut_pos_to_be->d_ordr_mrgn +
													d_balance_amt ;
		}
	 }
	}	

	/** The code down below is to take care of trade confirmations **/
	/** First we check the current executed level margin with the  **/
	/** required margin and correct it. The same is then done to   **/
	/** spread level margin followed by the spread profit and loss **/
	/** If it is a cover leg at the contract level we apply the    **/
	/** profit and loss at the contract level.                     **/
	if (  ptr_st_pstn_actn->l_actn_typ == ORS_TRD_CONF )
	{

    fn_userlog( c_ServiceName," Sachin ptr_st_pstn_actn->l_cover_qty :%ld:, ptr_st_pstn_actn->c_nkd_blkd_flg :%c:",ptr_st_pstn_actn->l_cover_qty,ptr_st_pstn_actn->c_nkd_blkd_flg);

		if ( ptr_st_pstn_actn->l_cover_qty > 0 )
		{
			if ( ptr_st_pstn_actn->c_nkd_blkd_flg == ROLLOVER )  /*** Added in ver 2.8 ***/
  		{
		/**			d_diff_amv = ptr_st_undfut_pos_crrnt->d_add_mrgn_val;
					 ptr_st_undfut_pos_to_be->d_add_mrgn_val = 0; commented in ver 5.1 ***/
          /**** ver 5.1 starts ****/
         strcpy(c_ordr_rfrnc_tmp,ptr_st_pstn_actn->c_ref_rmrks);
         c_ordr_rfrnc_ref = strtok(c_ordr_rfrnc_tmp,"-"); /** This the trade ref number taken ****/
         strcpy(c_trade_ref_num,c_ordr_rfrnc_ref);
         fn_userlog( c_ServiceName," INSIDE ROLLOVER TRADE :%lf:",ptr_st_undfut_pos_crrnt->d_add_mrgn_val);
         fn_userlog( c_ServiceName,"Rollover Live Issue Trd:ptr_st_undfut_pos_to_be->l_opnpstn_qty :%ld",ptr_st_undfut_pos_to_be->l_opnpstn_qty);


         EXEC SQL
         SELECT FTD_ORDR_RFRNC
           INTO :c_ordr_rfrnc
          FROM  FTD_FO_TRD_DTLS
         WHERE  FTD_EBA_TRD_REF = :c_trade_ref_num;

         if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
         {
           fn_errlog(c_ServiceName, "S31105", SQLMSG, ptr_st_err_msg->c_err_msg );
           return FAILURE;
         }
         if ( SQLCODE == NO_DATA_FOUND )
         {
           fn_userlog( c_ServiceName,"NODATA FOUND ROLLLOVER WHILE FETCHING ORDR REF");
         }

         if(DEBUG_MSG_LVL_3)
         {
           fn_userlog( c_ServiceName,"Order Refernce is :%s:",c_ordr_rfrnc);
         }

         EXEC SQL
         SELECT NVL(FOD_SROLL_DIFF_AMT,0),
                NVL(FOD_SROLL_LSS_AMT,0)
         INTO   :d_roll_diff_amt,
                :d_roll_diff_pnl
         FROM   FOD_FO_ORDR_DTLS
         WHERE  FOD_ORDR_RFRNC = :c_ordr_rfrnc;
         if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
         {
           fn_errlog(c_ServiceName, "S31110", SQLMSG, ptr_st_err_msg->c_err_msg );
           return FAILURE;
         }

         if( ptr_st_undfut_pos_to_be->l_opnpstn_qty == 0 )
         {
           fn_userlog(c_ServiceName,"Rollover Live Issue Trd:INSIDE OPEN POSITION QTY 0");
           d_diff_amv = ptr_st_undfut_pos_crrnt->d_add_mrgn_val - ptr_st_undfut_pos_to_be->d_add_mrgn_val; 
         }
         else
         {
            fn_userlog(c_ServiceName,"Rollover Live Issue Trd:INSIDE OPEN POSITION QTY NOT EQ TO 0"); 
            d_diff_amv = d_roll_diff_amt+d_roll_diff_pnl;
         }

         ptr_st_undfut_pos_to_be->d_add_mrgn_val = ptr_st_undfut_pos_crrnt->d_add_mrgn_val - d_diff_amv;

         fn_userlog( c_ServiceName,"d_diff_amv :%lf:",d_diff_amv);
         fn_userlog( c_ServiceName,"ptr_st_undfut_pos_to_be->d_add_mrgn_val :%lf:",ptr_st_undfut_pos_to_be->d_add_mrgn_val);

           EXEC SQL
           UPDATE FOD_FO_ORDR_DTLS
           SET    FOD_SROLL_DIFF_AMT = FOD_SROLL_DIFF_AMT - :d_roll_diff_amt,
                  FOD_SROLL_LSS_AMT  = FOD_SROLL_LSS_AMT - :d_roll_diff_pnl
           WHERE  FOD_ORDR_RFRNC     = :c_ordr_rfrnc;

           if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
           {
             fn_errlog(c_ServiceName, "S31115", SQLMSG, ptr_st_err_msg->c_err_msg );
             return FAILURE;
           }

             /*** ver 5.1 ends ***/	
			}
			else
			{
					d_diff_amv = ptr_st_undfut_pos_crrnt->d_add_mrgn_val - ptr_st_undfut_pos_to_be->d_add_mrgn_val;
			}

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog ( c_ServiceName, "Difference in UAMV :%lf:", d_diff_amv );
			}

			if( d_diff_amv != 0 )
			{
				i_returncode = fn_upd_limits( c_ServiceName,
								 											ptr_st_pstn_actn,
               	 											ptr_st_err_msg,
								 											RELEASE_OF_ADD_MARGIN,
								 											DEBIT_WITHOUT_LIMIT,
								 											d_diff_amv,
																			&d_balance_amt);
      	if ( i_returncode != 0 )
      	{
    			return i_returncode;
      	}
			}

			if (ptr_st_pstn_actn->c_trnsctn_flw == BUY )
			{
				d_pl_amt = ( (st_cntpos_old.d_mtm_opn_val /
											st_cntpos_old.l_opnpstn_qty ) -
										 ptr_st_pstn_actn->l_exec_rt ) * 
										 ptr_st_pstn_actn->l_cover_qty ;
			}
			else
			{
				d_pl_amt = ( ptr_st_pstn_actn->l_exec_rt -
										( st_cntpos_old.d_mtm_opn_val / 
											st_cntpos_old.l_opnpstn_qty) ) *
									    ptr_st_pstn_actn->l_cover_qty ;
			} 

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog (c_ServiceName,"Profit/Loss at contract level on execution :%lf:",d_pl_amt );
			}

     	if ( d_pl_amt != 0 )
     	{

				strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks );

				sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s-",		/** Added - in Ver 4.8 **/
									ptr_st_pstn_actn->c_undrlyng,
									ptr_st_pstn_actn->c_expry_dt);
        strcat(ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks); /** Added in Ver 4.8 **/

				 /***** Ver 1.2 NRI FNO TDS starts *****/

        /*** if(strncmp(ptr_st_pstn_actn->c_cln_mtch_accnt, "751", 3) == 0)   Commented in Ver 4.4 ***/

        /****** Added in Ver 4.4  Starts *******/

      	MEMSET(sql_iai_type.arr);
        EXEC SQL
        SELECT  IAI_TYPE
        INTO    :sql_iai_type
        FROM    IAI_INFO_ACCOUNT_INFO
        WHERE   IAI_MATCH_ACCOUNT_NO  = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

      	if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
      	{
        	fn_userlog(c_ServiceName, "CUST TYPE 1 IS :%s:", sql_iai_type.arr );
				}

        if ( SQLCODE != 0 )
        {
          fn_errlog(c_ServiceName, "S31120", SQLMSG, ptr_st_err_msg->c_err_msg );
          return FAILURE;
        }

        /****** Added Ver 4.4 Ends *******/

        if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") == 0)   /****** check Added in Ver 4.4 *****/
        {
            strcpy(c_narration_id,TDS_NRI);
	    			strcpy(c_reason_cd,"Profit Loss on Cover Leg");

            i_returncode = fn_tds( c_ServiceName,
                                   ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    c_reason_cd,
                                    DEBIT_WITHOUT_LIMIT,
                                    d_pl_amt,
                                    &d_balance_amt);

            if ( i_returncode != 0 )
            {
              return i_returncode;
            }
        }



        /***** Ver 1.2 NRI FNO TDS ends*****/
					
				i_returncode = fn_upd_limits( c_ServiceName,
									 										ptr_st_pstn_actn,
                 	 										ptr_st_err_msg,
									 										PROFIT_LOSS_ON_COVER_LEG,
									 										DEBIT_WITHOUT_LIMIT,
									 										d_pl_amt,
																			&d_balance_amt);
     		if ( i_returncode != 0 )
     		{
    			return i_returncode;
     		}
				strcpy ( ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks );
			}
		} /*********** if-end of cover qty >  0 *************/


    /***	Ver 2.2 Starts ***/

    /***	In case of Spread Order,margin added by user was not getting released,	***/
		/***	but same is getting updated as zero in position table.									***/
		/***	To release the same following else part is included. 										***/

 
    else if((ptr_st_pstn_actn->l_fresh_qty != 0 )          
             && (ptr_st_undfut_pos_crrnt->d_add_mrgn_val != 0) 
             && (ptr_st_undfut_pos_to_be->d_add_mrgn_val == 0) 
             && ((ptr_st_undfut_pos_to_be->d_sprd_mrgn !=0 ) || ( ptr_st_undfut_pos_to_be->d_sprd_pl != 0)))
    {
      if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
      {
				fn_userlog(c_ServiceName,"Inside User Add Margin Check.");
			}
			
			/**   if(DEBUG_MSG_LVL_3) **/	
			if(DEBUG_MSG_LVL_2) /*** Changed to 0 in ver 4.6 ***/
			{
     		fn_userlog(c_ServiceName,"Current Add Margin Value :%lf:",ptr_st_undfut_pos_crrnt->d_add_mrgn_val);
     		fn_userlog(c_ServiceName,"To Be Add Margin Value :%lf:",ptr_st_undfut_pos_to_be->d_add_mrgn_val);
     		fn_userlog(c_ServiceName,"Fresh Qty :%ld:", ptr_st_pstn_actn->l_fresh_qty);
     		fn_userlog(c_ServiceName,"Spread Margin :%lf:", ptr_st_undfut_pos_to_be->d_sprd_mrgn);
     		fn_userlog(c_ServiceName,"Spread Profit / Loss :%lf:", ptr_st_undfut_pos_to_be->d_sprd_pl);
			}

     	d_diff_amv = ptr_st_undfut_pos_crrnt->d_add_mrgn_val - ptr_st_undfut_pos_to_be->d_add_mrgn_val;

      if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
      {
   			fn_userlog ( c_ServiceName, "Difference in UAMV :%lf:", d_diff_amv );
			}
	
     	if( d_diff_amv != 0 )
     	{
       	i_returncode = fn_upd_limits( c_ServiceName,
        	                             ptr_st_pstn_actn,
          	                           ptr_st_err_msg,
            	                         RELEASE_OF_ADD_MARGIN,
              	                       DEBIT_WITHOUT_LIMIT,
                	                     d_diff_amv,
                  	                   &d_balance_amt);
       	if ( i_returncode != 0 )
       	{
         	return i_returncode;
       	}
     	}
    }  
   
    /********* Ver 2.2 Ends here *************/
  
		d_diff_UTM = ptr_st_undfut_pos_crrnt->d_trd_mrgn -
								 ptr_st_undfut_pos_to_be->d_trd_mrgn;	

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog ( c_ServiceName, "Difference in UTM :%lf:", d_diff_UTM );
		}
		
		/***  Added in ver 2.8 ***/
		if (ptr_st_pstn_actn->c_nkd_blkd_flg == ROLLOVER )
		{
			if( d_diff_UTM != 0 )
			{ 
				i_returncode = fn_upd_limits( c_ServiceName,
        	                            ptr_st_pstn_actn,
          	                          ptr_st_err_msg,
            	                        MARGIN_ADJ_ON_TRD_EXEC,
              	                      DEBIT_WITHOUT_LIMIT,
                	                    d_diff_UTM,
                  	                  &d_balance_amt);
      	if ( i_returncode != 0 )
      	{
        	return i_returncode;
      	}		
			}
		}
		else
		{

		if ( d_diff_UTM != 0 )
		{
			i_returncode = fn_upd_limits( c_ServiceName,
									 									ptr_st_pstn_actn,
                 	 									ptr_st_err_msg,
									 									MARGIN_ADJ_ON_TRD_EXEC,
									 									DEBIT_TILL_LIMIT,
									 									d_diff_UTM,
																		&d_balance_amt);
     	if ( i_returncode != 0 )
     	{
    		return i_returncode;
     	}
			/*** Added to take care of balance amount in case ***/
			/***  of DEBIT_TILL_LIMIT. d_balance_amt is added ***/
      /*** since it is always negative or Zero             ***/	

			ptr_st_undfut_pos_to_be->d_trd_mrgn =
												ptr_st_undfut_pos_to_be->d_trd_mrgn +
												d_balance_amt;

			d_bal_to_apply = d_balance_amt;

			if ( (d_bal_to_apply*-1.0) > ptr_st_undfut_pos_to_be->d_exctd_mrgn )
			{
				ptr_st_undfut_pos_to_be->d_exctd_mrgn = 0;
				d_bal_to_apply = d_bal_to_apply +
												 ptr_st_undfut_pos_to_be->d_exctd_mrgn;
			}
			else
			{
				ptr_st_undfut_pos_to_be->d_exctd_mrgn = 
														ptr_st_undfut_pos_to_be->d_exctd_mrgn +
														d_bal_to_apply ;
				d_bal_to_apply = 0;
			}

			if ( (d_bal_to_apply*-1.0) > ptr_st_undfut_pos_to_be->d_sprd_mrgn )
			{
				ptr_st_undfut_pos_to_be->d_sprd_mrgn = 0;
				d_bal_to_apply = d_bal_to_apply +
												 ptr_st_undfut_pos_to_be->d_sprd_mrgn;
			}
			else
			{
				ptr_st_undfut_pos_to_be->d_sprd_mrgn = 
														ptr_st_undfut_pos_to_be->d_sprd_mrgn +
														d_bal_to_apply ;
				d_bal_to_apply = 0;
			}
			ptr_st_undfut_pos_to_be->d_sprd_pl = 
													ptr_st_undfut_pos_to_be->d_sprd_pl -
													d_bal_to_apply;
		}
	 }
	}  /*********** if-end of ORS_TRD_CONF  *************/

	/** The code down below is to take care of close out of open pos**/
	/** First we check the current trade level margin with the     **/
	/** required margin and correct it.                            **/
	if (  ptr_st_pstn_actn->l_actn_typ == CLOSE_OUT_DEALS )
	{
		strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks );

		sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s",
							ptr_st_pstn_actn->c_undrlyng,
							ptr_st_pstn_actn->c_expry_dt);

		d_diff_amv = ptr_st_undfut_pos_crrnt->d_add_mrgn_val -
								 ptr_st_undfut_pos_to_be->d_add_mrgn_val;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog ( c_ServiceName, "Difference in UAMV :%lf:", d_diff_amv );
		}

		if( d_diff_amv != 0 )
		{
			i_returncode = fn_upd_limits( c_ServiceName,
							 											ptr_st_pstn_actn,
             	 											ptr_st_err_msg,
							 											RELEASE_OF_ADD_MARGIN,
							 											DEBIT_WITHOUT_LIMIT,
							 											d_diff_amv,
																		&d_balance_amt);
     	if ( i_returncode != 0 )
     	{
    		return i_returncode;
     	}
		}

		d_diff_UTM = ptr_st_undfut_pos_crrnt->d_trd_mrgn -
								 ptr_st_undfut_pos_to_be->d_trd_mrgn;	

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog ( c_ServiceName, "Difference in UTM :%lf:", d_diff_UTM );
		}

		if ( d_diff_UTM != 0 )
		{
			i_returncode = fn_upd_limits( c_ServiceName,
									 									ptr_st_pstn_actn,
                 	 									ptr_st_err_msg,
									 									MARGIN_ADJ_ON_CLOSE_OUT,
									 									DEBIT_WITHOUT_LIMIT,
									 									d_diff_UTM,
																		&d_balance_amt);
     	if ( i_returncode != 0 )
     	{
    		return i_returncode;
     	}
		}

    /*** ver 5.3 starts ***/
      EXEC SQL
      SELECT  NVL(FTQ_SETLMNT_FLG,'C')
      INTO    :c_setllmnt_flg
      FROM    FTQ_FO_TRD_QT
      WHERE   FTQ_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
      AND     FTQ_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
      AND     FTQ_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
      AND     FTQ_INDSTK          = :ptr_st_pstn_actn->c_ctgry_indstk
      AND     FTQ_EXPRY_DT        = to_date( :ptr_st_pstn_actn->c_expry_dt,'dd-mon-yyyy' )
      AND     FTQ_EXER_TYP        = :ptr_st_pstn_actn->c_exrc_typ;

    if ( SQLCODE != 0 )
    {
          fn_errlog(c_ServiceName, "S31125", SQLMSG, ptr_st_err_msg->c_err_msg );
          return FAILURE;
    }

    fn_userlog ( c_ServiceName, "nspan:clsout c_setllmnt_flg :%c:",c_setllmnt_flg);
    if( c_setllmnt_flg == 'P' )
    {
         i_cnt = 0;

         EXEC SQL
         SELECT count(*)
         INTO :i_cnt
         FROM DUAL
         WHERE to_date( :ptr_st_pstn_actn->c_expry_dt,'dd-mon-yyyy') = ( SELECT MIN(FTQ_EXPRY_DT) FROM FTQ_FO_TRD_QT WHERE FTQ_XCHNG_CD ='NFO' AND FTQ_PRDCT_TYP='F' and FTQ_UNDRLYNG='NIFTY' );

       if ( SQLCODE != 0 )
       {
          fn_errlog(c_ServiceName, "S31130", SQLMSG, ptr_st_err_msg->c_err_msg );
          return FAILURE;
       }

     if( i_cnt == 1 )
     {
        sprintf(ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s-%ld-%c%c",ptr_st_pstn_actn->c_undrlyng,ptr_st_pstn_actn->c_expry_dt,ptr_st_pstn_actn->l_strike_prc,ptr_st_pstn_actn->c_opt_typ,ptr_st_pstn_actn->c_exrc_typ);

     rtrim(ptr_st_pstn_actn->c_ref_rmrks);
     fn_userlog(c_ServiceName,"nspan:clsout Future Remarks :%s:",ptr_st_pstn_actn->c_ref_rmrks);
     fn_userlog(c_ServiceName,"nspan:clsout relase mrgn :%lf:",d_diff_UTM);
        if ( d_diff_UTM != 0 )
        {
            i_returncode = fn_upd_limits( c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    BLK_DLVRY_OBLIGATION,
                                    DEBIT_TILL_LIMIT,
                                    (-1)*d_diff_UTM,
                                    &d_balance_amt);
            if ( i_returncode != 0 )
            {
               return i_returncode;
            }
         }
     }
    else if( i_cnt == 0 )
    {
     fn_userlog(c_ServiceName,"nspan:clsout Fut not current month exp :%s:",ptr_st_pstn_actn->c_expry_dt);
    }
   }
    /*** ver 5.3 ends ***/
		strcpy ( ptr_st_pstn_actn->c_ref_rmrks, c_tmp_rmrks );

	}  /*********** if-end of CLOSE_OUT_DEALS  ********/

	/** In EOD MTM we carry forward the curren position to the next day **/
	/** at the closing price of the day. In order to do this we need to **/
	/** block margin at the new rate and give the benifit of profit and **/
	/** loss at contract level                                          **/
	if ( ptr_st_pstn_actn->l_actn_typ == EOD_MTM  || ptr_st_pstn_actn->l_actn_typ == EOD_MRGN_REP ) /** EOD_MRGN_REP Added in Ver 5.4 **/
	{
		strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks );

		sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s",
							ptr_st_pstn_actn->c_undrlyng,
							ptr_st_pstn_actn->c_expry_dt);

		d_diff_UAM = ptr_st_undfut_pos_crrnt->d_add_mrgn_val -
								 ptr_st_undfut_pos_to_be->d_add_mrgn_val;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog ( c_ServiceName, "Difference in UAM :%lf:", d_diff_UAM );
		}

		if ( d_diff_UAM != 0 && ptr_st_pstn_actn->l_actn_typ != EOD_MRGN_REP ) /** EOD_MRGN_REP Added in Ver 5.4 **/
		{
			i_returncode = fn_upd_limits( c_ServiceName,
								 										ptr_st_pstn_actn,
               	 										ptr_st_err_msg,
								 										RELEASE_OF_ADDMARGIN_ON_EODMTM,
								 										DEBIT_WITHOUT_LIMIT,
								 										d_diff_UAM,
																		&d_balance_amt);
      if ( i_returncode != 0 )
      {
    		return i_returncode;
      }

		}

		if ( ptr_st_undfut_pos_crrnt->d_trd_mrgn != 0 && ptr_st_pstn_actn->l_actn_typ != EOD_MRGN_REP ) /** EOD_MRGN_REP Added in Ver 5.4 **/
		{
    	i_returncode = fn_upd_limits( c_ServiceName,
                                  	ptr_st_pstn_actn,
                                  	ptr_st_err_msg,
                                  	RELEASE_OF_TRD_MRGN_ON_EODMTM,
                                  	DEBIT_WITHOUT_LIMIT,
                                  	ptr_st_undfut_pos_crrnt->d_trd_mrgn,
																		&d_balance_amt);
    	if ( i_returncode != 0 )
    	{
      	return i_returncode;
    	}
    }

/*** the below st_cntpos_md_rc.l_opnpstn_qty > 0 means that the ***/
/*** st_cntpos_md_rc.c_opnpstn_flw is BUY                       ***/
    if ( st_cntpos_md_rc.l_opnpstn_qty > 0 )
    {
			d_pl_amt = ( ptr_st_pstn_actn->l_curr_rt - 
									(st_cntpos_old.d_mtm_opn_val /
									 st_cntpos_old.l_opnpstn_qty) ) *
									 st_cntpos_md_rc.l_opnpstn_qty;
		}
		else
		{
			d_pl_amt = ( (st_cntpos_old.d_mtm_opn_val /
										st_cntpos_old.l_opnpstn_qty ) -
									 ptr_st_pstn_actn->l_curr_rt ) *
								   labs( st_cntpos_md_rc.l_opnpstn_qty);
	
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog (c_ServiceName,"Profit/Loss at contract level on eod mtm :%lf:", d_pl_amt );
		}

		if ( d_pl_amt != 0 && ptr_st_pstn_actn->l_actn_typ != EOD_MRGN_REP ) /** EOD_MRGN_REP Added in Ver 5.4 **/ 
		{
			
        /*****	Ver 1.2  NRI FNO TDS starts *****/

        /*** if(strncmp(ptr_st_pstn_actn->c_cln_mtch_accnt, "751", 3) == 0)  Commented in Ver 4.4 ***/

        /****** Added in Ver 4.4 *******/

        MEMSET(sql_iai_type.arr);
        EXEC SQL
        SELECT  IAI_TYPE
        INTO    :sql_iai_type
        FROM    IAI_INFO_ACCOUNT_INFO
        WHERE   IAI_MATCH_ACCOUNT_NO  = :ptr_st_pstn_actn->c_cln_mtch_accnt;

      	if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
      	{
        	fn_userlog(c_ServiceName, "CUST TYPE 2 IS :%s:", sql_iai_type.arr );
				}

        if ( SQLCODE != 0 )
        {
          fn_errlog(c_ServiceName, "S31135", SQLMSG, ptr_st_err_msg->c_err_msg );
          return FAILURE;
        }

        /****** Added  Ver 4.4 Ends *****/

        if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") == 0)   /****** check Added in Ver 4.4 *****/
        {
            strcpy(c_narration_id,TDS_NRI);
	    			strcpy(c_reason_cd,"Profit_Loss_on_EODMTM");

            i_returncode = fn_tds( c_ServiceName,
                                   ptr_st_pstn_actn,
                                   ptr_st_err_msg,
                                   c_narration_id,
                                   c_reason_cd,
                                   DEBIT_WITHOUT_LIMIT,
                                   d_pl_amt,
                                   &d_balance_amt);

            if ( i_returncode != 0 )
            {
              return i_returncode;
            }
        }



        /***** Ver 1.2  NRI FNO TDS ends*****/

			i_returncode = fn_upd_limits( c_ServiceName,
								 										ptr_st_pstn_actn,
               	 										ptr_st_err_msg,
								 										PROFIT_LOSS_ON_EOD_MTM,
								 										DEBIT_WITHOUT_LIMIT,
								 										d_pl_amt,
																		&d_balance_amt);
      if ( i_returncode != 0 )
      {
    		return i_returncode;
      }
		}

    d_UTM_amt = (-1) * ptr_st_undfut_pos_to_be->d_trd_mrgn;
 
    if(DEBUG_MSG_LVL_0)    /***  Add in Ver 4.7   ***/
    {
    fn_userlog(c_ServiceName,"d_UTM_amt :%lf:",d_UTM_amt);
    }

		if ( d_UTM_amt != 0 && ptr_st_pstn_actn->l_actn_typ != EOD_MRGN_REP ) /** EOD_MRGN_REP Added in Ver 5.4 **/ 
		{	

			EXEC SQL													/*** Added In Ver 1.6 To Store Trade Date In FER ***/
      	/** SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY') Commented in ver 2.9 **/
      	/** SELECT  to_char( GREATEST(exg_nxt_trd_dt,exg_tmp_trd_dt), 'DD-Mon-YYYY' )* Ver 2.9 Reverted In Ver 2.9 Bug Fix */
      	SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY') /*** Reverted In Ver 2.9 Bug Fix ***/
				INTO   :c_trd_dt
				FROM   EXG_XCHNG_MSTR
				WHERE  EXG_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
				AND    EXG_MKT_TYP = 'D';
	
			if ( SQLCODE != 0 )
    	{
      	fn_errlog(c_ServiceName, "S31140", SQLMSG, ptr_st_err_msg->c_err_msg );
      	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    	}
			i_returncode = fn_upd_limits( c_ServiceName,
							 											ptr_st_pstn_actn,
             	 											ptr_st_err_msg,
							 											MARGIN_BLOCKED_ON_EODMTM,
							 											DEBIT_TILL_LIMIT,
							 											d_UTM_amt,
																		&d_balance_amt);
    	if ( i_returncode != 0 )
    	{
   			return i_returncode;
    	}

			/**** d_balance_amt is added since it is always negative or Zero ***/

      if(DEBUG_MSG_LVL_2) /*** Ver 4.6  ***/
      {
				fn_userlog(c_ServiceName,"Trd_mrgn Is :%ld:", ptr_st_undfut_pos_to_be->d_trd_mrgn);
			}
			d_mrgn_blkd = ptr_st_undfut_pos_to_be->d_trd_mrgn + d_balance_amt;

      EXEC SQL
      INSERT INTO FER_FUT_EODMTM_REP
      (
				FER_REPORT_NO,
				FER_CLM_MTCH_ACCNT,
				FER_XCHNG_CD,
				FER_PRDCT_TYP,
				FER_INDSTK,
				FER_UNDRLYNG,
				FER_EXPRY_DT,
				FER_EXER_TYP,
				FER_CNTRCT_TAG,
				FER_RPRT_TM_STMP,
				FER_CLS_PRC,
				FER_OPNPSTN_FLW,
				FER_OPNPSTN_QTY,
				FER_PRFT_LSS_AMT,
				FER_MRGN_BLKD,
				FER_TRD_MRGN,          /*** Ver 1.6 ***/
				FER_TRD_DT						/*** Ver 1.6 ***/
  	  )	
		  VALUES
		  (
				:ptr_st_pstn_actn->l_report_no,
				:ptr_st_pstn_actn->c_cln_mtch_accnt,
				:ptr_st_pstn_actn->c_xchng_cd,
				:ptr_st_pstn_actn->c_prd_typ,
				:ptr_st_pstn_actn->c_ctgry_indstk,
				:ptr_st_pstn_actn->c_undrlyng,
				to_date(:ptr_st_pstn_actn->c_expry_dt,'DD-Mon-YYYY'),
				:ptr_st_pstn_actn->c_exrc_typ,
				:ptr_st_pstn_actn->c_cntrct_tag,
				sysdate,
				:ptr_st_pstn_actn->l_curr_rt,
				:st_cntpos_md_rc.c_opnpstn_flw,
				:st_cntpos_md_rc.l_opnpstn_qty,
				:d_pl_amt,
				:d_mrgn_blkd,
				:ptr_st_undfut_pos_to_be->d_trd_mrgn,       /*** Ver 1.6 ***/
				:c_trd_dt																	  /*** Ver 1.6 ***/
	    );

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31145", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }

			/*** Added to take care of balance amount in case of ***/
			/*** DEBIT_TILL_LIMIT. d_balance_amt is added        ***/
      /*** since it is always negative or Zero             ***/	
			ptr_st_undfut_pos_to_be->d_trd_mrgn =
													ptr_st_undfut_pos_to_be->d_trd_mrgn +
													d_balance_amt ;

			d_bal_to_apply = d_balance_amt;

			if ( (d_bal_to_apply*-1.0) > ptr_st_undfut_pos_to_be->d_exctd_mrgn )
			{
				ptr_st_undfut_pos_to_be->d_exctd_mrgn = 0;
				d_bal_to_apply = d_bal_to_apply +
												 ptr_st_undfut_pos_to_be->d_exctd_mrgn;
			}
			else
			{
				ptr_st_undfut_pos_to_be->d_exctd_mrgn = 
														ptr_st_undfut_pos_to_be->d_exctd_mrgn +
														d_bal_to_apply ;
				d_bal_to_apply = 0;
			}

			if ( (d_bal_to_apply*-1.0) > ptr_st_undfut_pos_to_be->d_sprd_mrgn )
			{
				ptr_st_undfut_pos_to_be->d_sprd_mrgn = 0;
				d_bal_to_apply = d_bal_to_apply +
												 ptr_st_undfut_pos_to_be->d_sprd_mrgn;
			}
			else
			{
				ptr_st_undfut_pos_to_be->d_sprd_mrgn = 
														ptr_st_undfut_pos_to_be->d_sprd_mrgn +
														d_bal_to_apply ;
				d_bal_to_apply = 0;
			}

			ptr_st_undfut_pos_to_be->d_sprd_pl = 
													ptr_st_undfut_pos_to_be->d_sprd_pl -
													d_bal_to_apply;
		}
		strcpy ( ptr_st_pstn_actn->c_ref_rmrks, c_tmp_rmrks );

    /*** Ver 5.4 Starts ***/
    if ( ptr_st_pstn_actn->l_actn_typ == EOD_MRGN_REP )
    {
       EXEC SQL
       Insert into FMR_FNO_MRGN_REPORT
       (
        FMR_CLM_MTCH_ACCNT,
        FMR_XCHNG_CD,
        FMR_PRDCT_TYP,
        FMR_INDSTK,
        FMR_UNDRLYNG,
        FMR_EXPRY_DT,
        FMR_EXER_TYP,
        FMR_CNTRCT_TAG,
        FMR_TYP,
        FMR_BLCK_MRGN,
        FMR_LOSS_VL,
        FMR_REQR_MRGN,
        FMR_TRD_DT
       )
       Values
       (
        :ptr_st_pstn_actn->c_cln_mtch_accnt,
        :ptr_st_pstn_actn->c_xchng_cd,
        :ptr_st_pstn_actn->c_prd_typ,
        :ptr_st_pstn_actn->c_ctgry_indstk,
        :ptr_st_pstn_actn->c_undrlyng,
        to_date(:ptr_st_pstn_actn->c_expry_dt,'DD-Mon-YYYY'),
        :ptr_st_pstn_actn->c_exrc_typ,
        :ptr_st_pstn_actn->c_cntrct_tag,
        'F',
        :d_diff_UAM + :ptr_st_undfut_pos_crrnt->d_trd_mrgn,
        :d_pl_amt,
        :ptr_st_undfut_pos_to_be->d_trd_mrgn,
        SYSDATE
       );

       if ( SQLCODE != 0 )
       {
         fn_errlog(c_ServiceName, "S31150", SQLMSG, ptr_st_err_msg->c_err_msg );
         return FAILURE;
       }
     }
     /** Ver 5.4 Ends **/
  }  /*********** if-end of EOD_MTM  *************/

		return SUCCESS;
}

int fn_call_actn_add_mrgn( char *c_ServiceName,
													 struct vw_pstn_actn *ptr_st_pstn_actn,
                  				 struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                  				 struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                  	   		 struct vw_err_msg *ptr_st_err_msg,
                           char *c_imtm_addmrgn_flg)  /** Ver 3.4 ***/
{
  int i_returncode;
	double d_amount;
	double d_balance_amt;
  char c_narration_id[4];
	char c_tmp_rmrks [ 133 ] ;  /** 1.9 **/
	varchar c_exp_dt[LEN_DATE]; /** 1.9 **/

	/** On add margin we add up margin to the executed level margin at **/
	/** underlying level                                               **/

  	memcpy ( ptr_st_undfut_pos_to_be, 
             ptr_st_undfut_pos_crrnt, 
             sizeof( struct vw_undfut_pos ) );

		ptr_st_undfut_pos_to_be->d_add_mrgn_val = 
																ptr_st_undfut_pos_to_be->d_add_mrgn_val +
															  ptr_st_pstn_actn->d_add_mrgn_amt ;

		d_amount = (-1) * ptr_st_pstn_actn->d_add_mrgn_amt ;

		/***   if(DEBUG_MSG_LVL_3) ***/
		if(DEBUG_MSG_LVL_2) /*** Changed to 0 in Ver 4.6 ***/
		{
			fn_userlog ( c_ServiceName, "Add margin amount :%lf:", d_amount );
			fn_userlog ( c_ServiceName, "To be Add margin value :%lf:", ptr_st_undfut_pos_to_be->d_add_mrgn_val );
		}

		if ( ptr_st_pstn_actn->l_actn_typ == ADD_MARGIN  )
		{
  		strcpy(c_narration_id,ON_USER_ADD_MARGIN);
		}
		else
		{
  		strcpy(c_narration_id,ON_SYSTEM_ADD_MARGIN);
		}

		/***************** Ver 1.9 Starts *****************************/
		if(DEBUG_MSG_LVL_3)
  	{
			fn_userlog ( c_ServiceName, " ---------------- Remark Added ----------------------");
		}

		MEMSET(c_exp_dt);

		EXEC SQL
		SELECT FFP_EXPRY_DT
		INTO :c_exp_dt
		FROM FFP_FO_FUTURES_PSTN 
		WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND     FFP_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
		AND     FFP_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
		AND     FFP_INDSTK = :ptr_st_pstn_actn->c_ctgry_indstk
		AND     FFP_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
		AND     FFP_CNTRCT_TAG = :ptr_st_pstn_actn->c_cntrct_tag;

		if ( SQLCODE != 0  && SQLCODE == NO_DATA_FOUND)
    {
      fn_userlog(c_ServiceName,"Failed While Getting Expiry Date");
    }
	
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog ( c_ServiceName, "c_narration_id :%s",c_narration_id);
			fn_userlog ( c_ServiceName, "Underlying I:%s",ptr_st_pstn_actn->c_undrlyng);
			fn_userlog ( c_ServiceName, "Expiry date :%s", ptr_st_pstn_actn->c_expry_dt);
			fn_userlog ( c_ServiceName, "Expiry date :%s", c_exp_dt.arr);
		}

		strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks );

    sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s",
              ptr_st_pstn_actn->c_undrlyng,
              c_exp_dt.arr);	
		
    if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
    {
			fn_userlog ( c_ServiceName, "Remark :%s",ptr_st_pstn_actn->c_ref_rmrks);
		}
		/***************** Ver 1.9 Ends *****************************/

		if ( d_amount != 0 )
		{
			i_returncode = fn_upd_limits( c_ServiceName,
								 										ptr_st_pstn_actn,
         	     	 										ptr_st_err_msg,
								 										c_narration_id,
								 										DEBIT_WHEN_LIMIT,				
								 										d_amount,
																		&d_balance_amt);

      if ( i_returncode != 0 )
      {
				switch ( i_returncode )
				{
					case INSUFFICIENT_LIMITS :
						d_limit_MTM	= d_balance_amt	;		/*1.1*/
           /* fn_errlog(c_ServiceName,"B28558",DEFMSG,ptr_st_err_msg->c_err_msg);	** Commented in ver 2.4 ***/
						fn_userlog ( c_ServiceName," inside INSUFFICIENT_LIMITS ");					/*** Added in ver 2.4  ***/
						return INSUFFICIENT_LIMITS;
						break;

					default :
						return FAILURE;
						break;
				}
			}
      *c_imtm_addmrgn_flg='Y'; /** Ver 3.4 **/
			strcpy ( ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks ); /*1.9*/
		}

		return SUCCESS;
}
int fn_call_actn_imtm( char *c_ServiceName,
											 struct vw_pstn_actn *ptr_st_pstn_actn,
                  		 struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                  		 struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                  	 	 struct vw_err_msg *ptr_st_err_msg,
                       char   *c_imtm_addmrgn_flg )  /** Ver 3.4 *** c_imtm_addmrgn_flg ***/
{

	double	d_loss_prcnt;
	double	d_thrshld_mtm_lss_pcntg;
	double	d_balance_amt;
	double	d_diff_TM = 0.0;
	double	d_bal_to_apply;
	double	d_base_prc;							/***	Ver	2.0	***/
	double	d_amnt_blckd	=	0.0;		/***  Ver 2.0 ***/
  double  d_mm_trd_mrgn=0.0;      /***  Ver 4.2 ***/

  char c_pos_avl;
	char	c_err_msg[256];
	char	c_imtm_rmrks[256];

  int i_returncode;
  int i_ret_val;
  int i_trnsctn;

	/*long	l_init_mrgn_prcnt;*			***	Ver	2.0	***/ /** Ver 2.7 **/
	double d_init_mrgn_prcnt;			/*** Ver 2.7 ***/
	long	l_run_no;								/***	Ver	2.0	***/

	TPTRANID tranid ;

  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;             /* a cursor variable */
		char	sql_cln_mtch_accnt[11];
		char	sql_xchng_cd[4];
		char	sql_prd_typ;
		char	sql_cntrct_tag;
		char	c_openpstn_flow;
		char	sql_undrlyng[7];
    varchar c_exp_dt[LEN_DATE];
		long		l_count ;
		double	d_prft_loss;
		double	d_avl_mrgn;
		double	d_addnl_mrgn_needed;
		double	d_adhoc_mrgn_needed = 0.0;			/***	Ver	2.0	***/

		/** Current contract level positions of other contracts in the same  **/
    /** underlying                                                       **/
    struct vw_cntfut_pos st_cntpos_crrnt;
		/** Copy of contract level position on which action is to be done taken **/
    /** before applying the action                                          **/
    struct vw_cntfut_pos st_cntpos_old;
		/** Contract level position on which action is to be done **/
    struct vw_cntfut_pos st_cntpos_md_rc;
  EXEC SQL END DECLARE SECTION;

	strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
	strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
	strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
	sql_prd_typ = ptr_st_pstn_actn->c_prd_typ;
	sql_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;

	/** This bit of code down below will fetch all the contract level **/
	/** positions. Then it will find the contract on which the input  **/
	/** action is to be performed and then perform it. It then summs  **/
	/** up all the contract level postion to arrive at a consolidated **/
	/** underlying level position. It then recalculates the margin.   **/
	/** This bit of code need not be performed for actions which do   **/
	/** not involve a change in postion                               **/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Building new underlying position -IMTM" );
	}

	/** Prepare a list of contracts from contract position table **/
	EXEC SQL ALLOCATE :sys_cursor;

   	EXEC SQL EXECUTE
     	BEGIN
         OPEN :sys_cursor FOR
   				SELECT  FFP_CLM_MTCH_ACCNT,
									FFP_XCHNG_CD,
									FFP_PRDCT_TYP,
									FFP_INDSTK,
									FFP_UNDRLYNG,
									TO_CHAR (FFP_EXPRY_DT,'DD-Mon-YYYY'),
									FFP_EXER_TYP,
									FFP_CNTRCT_TAG,
									FFP_IBUY_QTY,
									FFP_IBUY_ORD_VAL,
									FFP_ISELL_QTY,
									FFP_ISELL_ORD_VAL,
									FFP_EXBUY_QTY,
									FFP_EXBUY_ORD_VAL,
									FFP_EXSELL_QTY,
									FFP_EXSELL_ORD_VAL,
									FFP_BUY_EXCTD_QTY,
									FFP_SELL_EXCTD_QTY,
									FFP_OPNPSTN_FLW,
									FFP_OPNPSTN_QTY,
									FFP_OPNPSTN_VAL,
									FFP_MTM_OPN_VAL,
									FFP_IMTM_OPN_VAL
					FROM		FFP_FO_FUTURES_PSTN
					WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
					AND			FFP_XCHNG_CD       = :sql_xchng_cd
					AND			FFP_PRDCT_TYP      = :sql_prd_typ
					AND			FFP_UNDRLYNG       = :sql_undrlyng
					AND			FFP_CNTRCT_TAG		 = :sql_cntrct_tag
					AND			( FFP_OPNPSTN_QTY   != 0 
									OR (FFP_IBUY_QTY + ABS(FFP_ISELL_QTY) ) > 0 )/***OR Condition Added in V 1.3 *************/
					ORDER BY FFP_EXPRY_DT ASC;
     		END;
   		END-EXEC;

 	if ( SQLCODE != 0 )
  {
   	EXEC SQL FREE :sys_cursor;
   	fn_errlog ( c_ServiceName, "S31155", SQLMSG, ptr_st_err_msg->c_err_msg );
   	return FAILURE;
  }

	c_pos_avl = 'N';

	/** Fetch one contract at a time from the list. If the fetched  **/
	/** contract is the one we need to apply the change apply it.   **/
	/** Else simply add the contract to  underlying level position  **/
	 while ( 1 )
  {
   		EXEC SQL 	FETCH   :sys_cursor
								INTO		:st_cntpos_crrnt.c_cln_mtch_accnt,
           							:st_cntpos_crrnt.c_xchng_cd,
           							:st_cntpos_crrnt.c_prd_typ,
           							:st_cntpos_crrnt.c_ctgry_indstk,
           							:st_cntpos_crrnt.c_undrlyng,
           							:c_exp_dt,
           							:st_cntpos_crrnt.c_exrc_typ,
           							:st_cntpos_crrnt.c_cntrct_tag,
           							:st_cntpos_crrnt.l_ibuy_qty,
           							:st_cntpos_crrnt.d_ibuy_ord_vl,
           							:st_cntpos_crrnt.l_isell_qty,
           							:st_cntpos_crrnt.d_isell_ord_vl,
           							:st_cntpos_crrnt.l_exbuy_qty,
           							:st_cntpos_crrnt.d_exbuy_ord_vl,
           							:st_cntpos_crrnt.l_exsell_qty,
           							:st_cntpos_crrnt.d_exsell_ord_vl,
           							:st_cntpos_crrnt.l_buy_exctd_qty,
           							:st_cntpos_crrnt.l_sell_exctd_qty,
           							:st_cntpos_crrnt.c_opnpstn_flw,
           							:st_cntpos_crrnt.l_opnpstn_qty,
           							:st_cntpos_crrnt.d_org_opn_val,
           							:st_cntpos_crrnt.d_mtm_opn_val,
           							:st_cntpos_crrnt.d_imtm_opn_val;

   		if ( SQLCODE != 0 )
   		{
     		if ( SQLCODE == NO_DATA_FOUND )
     		{
       		break;
     		}
     		EXEC SQL CLOSE :sys_cursor;
     		EXEC SQL FREE :sys_cursor;
   			fn_errlog ( c_ServiceName, "S31160", SQLMSG, 
																					ptr_st_err_msg->c_err_msg );
   			return FAILURE;
   		}
			SETNULL( c_exp_dt );
			strcpy ( st_cntpos_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
			rtrim(st_cntpos_crrnt.c_xchng_cd);
			rtrim(st_cntpos_crrnt.c_undrlyng);
			rtrim(st_cntpos_crrnt.c_expry_dt);

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Contract fetched -IMTM : " );
		fn_userlog ( c_ServiceName, "Expiry date       :%s:",c_exp_dt.arr );
		fn_userlog ( c_ServiceName, "Exercise Type     :%c:",st_cntpos_crrnt.c_exrc_typ );
		fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:",st_cntpos_crrnt.l_ibuy_qty );
		fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:",st_cntpos_crrnt.d_ibuy_ord_vl );
		fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:",st_cntpos_crrnt.l_isell_qty );
		fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:",st_cntpos_crrnt.d_isell_ord_vl );
		fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:",st_cntpos_crrnt.l_exbuy_qty );
		fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:",st_cntpos_crrnt.d_exbuy_ord_vl );
		fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:",st_cntpos_crrnt.l_exsell_qty );
		fn_userlog ( c_ServiceName, "EXCH sell val      :%lf:",st_cntpos_crrnt.d_exsell_ord_vl );
		fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:",st_cntpos_crrnt.l_buy_exctd_qty );
		fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:",st_cntpos_crrnt.l_sell_exctd_qty );
		fn_userlog ( c_ServiceName, "Open qty          :%ld:",st_cntpos_crrnt.l_opnpstn_qty );
	} 

  if(DEBUG_MSG_LVL_2) /*** Ver 4.6 ***/
  {
    fn_userlog ( c_ServiceName, "Original open val :%lf:",st_cntpos_crrnt.d_org_opn_val );
    fn_userlog ( c_ServiceName, "MTMed open val    :%lf:",st_cntpos_crrnt.d_mtm_opn_val );
    fn_userlog ( c_ServiceName, "IMTMed open val   :%lf:",st_cntpos_crrnt.d_imtm_opn_val );
	}
		/*** Ver 1.8 Started ***/
		if(strcmp(c_expry_dt_MTM,NULL)==0)
		{
      if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
      {
				fn_userlog(c_ServiceName,"Inside Expiry Date Check");
			}
    	strcpy(c_expry_dt_MTM,(char *)c_exp_dt.arr);
		}
		/*** Ver 1.8 Ended ***/

		i_returncode =	fn_apply_cnt_actn ( c_ServiceName,
																				ptr_st_pstn_actn, 
                      									&st_cntpos_crrnt,
                        								ptr_st_err_msg );
  	if ( i_returncode == -1 )
  	{
  		return FAILURE;
  	}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog ( c_ServiceName, "Intraday MTMed open val    :%lf:",st_cntpos_crrnt.d_imtm_opn_val );
		}	 

		memcpy ( &st_cntpos_md_rc, &st_cntpos_crrnt,sizeof( st_cntpos_md_rc ) );

		fn_sum_cpos ( st_cntpos_crrnt, 
                	ptr_st_undfut_pos_to_be );

   	EXEC SQL
     	UPDATE  FFP_FO_FUTURES_PSTN
			SET			FFP_IMTM_OPN_VAL   = :st_cntpos_md_rc.d_imtm_opn_val
			WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
			AND			FFP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
			AND			FFP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
			AND			FFP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
     	AND     FFP_EXPRY_DT       = to_date(:st_cntpos_md_rc.c_expry_dt,
																			'DD-Mon-YYYY')
     	AND     FFP_EXER_TYP       = :st_cntpos_md_rc.c_exrc_typ
			AND			FFP_CNTRCT_TAG		 = :ptr_st_pstn_actn->c_cntrct_tag;

		if ( SQLCODE != 0 )
   	{
   		fn_errlog(c_ServiceName, "S31165", SQLMSG, ptr_st_err_msg->c_err_msg );
   		return FAILURE;
	 	}
	}

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Calculating margin - IMTM" );
	}

	/** Calculate the margin on the new underlying position **/
	i_returncode = fn_upd_mrgn ( c_ServiceName, 
                               ptr_st_pstn_actn, 
											         ptr_st_undfut_pos_crrnt, 
											         ptr_st_undfut_pos_to_be, 
                               ptr_st_err_msg);

  if ( i_returncode == -1 )
  {
  	return FAILURE;
  }


	d_ord_mrgn_MTM_b = ptr_st_undfut_pos_crrnt->d_ordr_mrgn  ;   /****1.1****/
	d_trd_mrgn_MTM_b = ptr_st_undfut_pos_crrnt->d_exctd_mrgn ;   /****1.1****/
	d_spread_mrgn_MTM_b = ptr_st_undfut_pos_crrnt->d_sprd_mrgn ; /****1.1****/
	ptr_st_undfut_pos_to_be->d_ordr_mrgn	=	ptr_st_undfut_pos_crrnt->d_ordr_mrgn  ;			/***	Ver	2.1	***/
	d_ord_mrgn_MTM_a = ptr_st_undfut_pos_to_be->d_ordr_mrgn  ;   /****1.1****/
	d_trd_mrgn_MTM_a = ptr_st_undfut_pos_to_be->d_exctd_mrgn ;   /****1.1****/
	d_spread_mrgn_MTM_a = ptr_st_undfut_pos_to_be->d_sprd_mrgn ; /****1.1****/
	l_opnpstn_MTM = st_cntpos_crrnt.l_opnpstn_qty ; 			 /****1.1****/


	/***   if(DEBUG_MSG_LVL_3) ***/
	if(DEBUG_MSG_LVL_2) /*** changed to 0 in Ver 4.6 ***/
	{
		fn_userlog ( c_ServiceName, "Current margin values - IMTM" );
		fn_userlog ( c_ServiceName, "Order level margin     :%lf:", ptr_st_undfut_pos_crrnt->d_ordr_mrgn );
		fn_userlog ( c_ServiceName, "Executed level margin  :%lf:", ptr_st_undfut_pos_crrnt->d_exctd_mrgn );
		fn_userlog ( c_ServiceName, "Spread level margin    :%lf:", ptr_st_undfut_pos_crrnt->d_sprd_mrgn );
		fn_userlog ( c_ServiceName, "Spread profit and loss :%lf:", ptr_st_undfut_pos_crrnt->d_sprd_pl );
		fn_userlog ( c_ServiceName, "Trade level margin  		:%lf:", ptr_st_undfut_pos_crrnt->d_trd_mrgn );
		fn_userlog ( c_ServiceName, "To be margin values - IMTM" );
		fn_userlog ( c_ServiceName, "Order level margin     :%lf:", ptr_st_undfut_pos_to_be->d_ordr_mrgn );
		fn_userlog ( c_ServiceName, "Executed level margin  :%lf:", ptr_st_undfut_pos_to_be->d_exctd_mrgn );
		fn_userlog ( c_ServiceName, "Spread level margin    :%lf:", ptr_st_undfut_pos_to_be->d_sprd_mrgn );
		fn_userlog ( c_ServiceName, "Spread profit and loss :%lf:", ptr_st_undfut_pos_to_be->d_sprd_pl );
		fn_userlog ( c_ServiceName, "Trade level margin  		:%lf:", ptr_st_undfut_pos_to_be->d_trd_mrgn );
		fn_userlog ( c_ServiceName, "Before Order Margin Is :%lf: , After Order Margin Is :%lf:",
															ptr_st_undfut_pos_crrnt->d_ordr_mrgn,ptr_st_undfut_pos_to_be->d_ordr_mrgn);			/***	Ver	2.1	***/
	}

	/** code added on 10-Apr-02 for taking care of change in **/
	/** Margin percentages (initial,spread margin %) b/w day **/


	if ( ptr_st_undfut_pos_crrnt->d_trd_mrgn != ptr_st_undfut_pos_to_be->d_trd_mrgn )
		{


		d_diff_TM = ptr_st_undfut_pos_crrnt->d_trd_mrgn - ptr_st_undfut_pos_to_be->d_trd_mrgn;	
	/*
	fn_userlog(c_ServiceName,"The value of d_trd_mrgn crrnt is :%lf:",ptr_st_undfut_pos_crrnt->d_trd_mrgn);
	fn_userlog(c_ServiceName,"The value of d_trd_mrgn is  to be :%lf:",ptr_st_undfut_pos_to_be->d_trd_mrgn);
	*/

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog ( c_ServiceName, "Difference in TM :%lf:", d_diff_TM );
		}

		d_add_mrgn_MTM = d_diff_TM ; 								/***1.1***/

		if ( d_diff_TM != 0 )
		{
			i_returncode = fn_upd_limits( c_ServiceName,
									 									ptr_st_pstn_actn,
         	       	 									ptr_st_err_msg,
									 									MARGIN_ADJ_ON_CHG_OF_MRGN_PRCNT,
									 									DEBIT_TILL_LIMIT,
									 									d_diff_TM,
																		&d_balance_amt);
     	if ( i_returncode != 0 )
     	{
 				fn_errlog(c_ServiceName, "S31170", LIBMSG, ptr_st_err_msg->c_err_msg );
 				return FAILURE;
     	}

			/***	Below changes gives exact amount blocked by system	***/

			d_amnt_blckd	=	(d_diff_TM * -1) + d_balance_amt	;										 /***	Ver	2.0	***/
			if(DEBUG_MSG_LVL_3)
  		{
				fn_userlog(c_ServiceName,"Amount Blocked Is :%lf:",d_amnt_blckd);			 /***  Ver 2.0 ***/
			}

			/**** d_balance_amt is added since it is always negative or Zero ***/

			ptr_st_undfut_pos_crrnt->d_trd_mrgn = ptr_st_undfut_pos_to_be->d_trd_mrgn + d_balance_amt;


			/*** Added on 26-Apr-20 to take care of balance amount in case ***/
			/***  of DEBIT_TILL_LIMIT. d_balance_amt is added              ***/
      /*** since it is always negative or Zero                       ***/	

			ptr_st_undfut_pos_to_be->d_trd_mrgn =
												ptr_st_undfut_pos_to_be->d_trd_mrgn +
												d_balance_amt;

			d_bal_to_apply = d_balance_amt;

			if ( (d_bal_to_apply*-1.0) > ptr_st_undfut_pos_to_be->d_exctd_mrgn )
			{
				ptr_st_undfut_pos_to_be->d_exctd_mrgn = 0;
				d_bal_to_apply = d_bal_to_apply +
												 ptr_st_undfut_pos_to_be->d_exctd_mrgn;
			}
			else
			{
				ptr_st_undfut_pos_to_be->d_exctd_mrgn = 
														ptr_st_undfut_pos_to_be->d_exctd_mrgn +
														d_bal_to_apply ;
				d_bal_to_apply = 0;
			}

			if ( (d_bal_to_apply*-1.0) > ptr_st_undfut_pos_to_be->d_sprd_mrgn )
			{
				ptr_st_undfut_pos_to_be->d_sprd_mrgn = 0;
				d_bal_to_apply = d_bal_to_apply +
												 ptr_st_undfut_pos_to_be->d_sprd_mrgn;
			}
			else
			{
				ptr_st_undfut_pos_to_be->d_sprd_mrgn = 
														ptr_st_undfut_pos_to_be->d_sprd_mrgn +
														d_bal_to_apply ;
				d_bal_to_apply = 0;
			}

			ptr_st_undfut_pos_to_be->d_sprd_pl = 
													ptr_st_undfut_pos_to_be->d_sprd_pl -
													d_bal_to_apply;

		}
	}

	d_prft_loss = ptr_st_undfut_pos_to_be->d_imtm_opn_val -
								ptr_st_undfut_pos_to_be->d_mtm_opn_val;

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog ( c_ServiceName,"Profit/Loss in IMTM     :%lf:",d_prft_loss);
	}

/** Following code commented on 16-Apr-2002 since Profit position **/
/** should also come under Intra day MTM process                  **/
/** Profit/Loss is added since Loss will be a negative value **/

/****************************************
08-Apr-2002 - Correction
Formula is wrong, it should be current trade margin and current add
margin should also be taken care of

	d_avl_mrgn = ptr_st_undfut_pos_to_be->d_trd_mrgn +
							 d_prft_loss;
****************************************/
 if(DEBUG_MSG_LVL_3)
 {		
 	fn_userlog(c_ServiceName,"The value of d_trd_mrgn crrnt is :%lf:",ptr_st_undfut_pos_crrnt->d_trd_mrgn);
 	fn_userlog(c_ServiceName,"The value of d_add_mrgn_val is  to be :%lf:",ptr_st_undfut_pos_crrnt->d_add_mrgn_val);
 }
	
	d_avl_mrgn = ptr_st_undfut_pos_crrnt->d_trd_mrgn +
               ptr_st_undfut_pos_crrnt->d_add_mrgn_val +
							 d_prft_loss;

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog ( c_ServiceName,"Available Margin       :%lf:",d_avl_mrgn);
  	fn_userlog ( c_ServiceName,"Trade margin at MM     :%lf:", ptr_st_undfut_pos_to_be->d_mm_trd_mrgn);
	}

  d_avl_mrgn_MTM = d_avl_mrgn ;                                   /* 1.1 */

	if(DEBUG_MSG_LVL_3)
  {
		fn_userlog(c_ServiceName,"IMTM Trade Margin Is :%lf:",ptr_st_undfut_pos_to_be->d_imtm_trd_mrgn);
		fn_userlog(c_ServiceName,"Available Margin Is :%lf:",d_avl_mrgn);
	}

	/***	Ver	2.0	Starts	***/

 	/*** It is added here for adhoc margin cr ,incase no margin  % change but change in ltp of underlying entry should be there in FAD	***/

	if(ptr_st_pstn_actn->l_actn_typ == ADHOC_ADD_MRGN_RQST)
	{
		d_adhoc_mrgn_needed = ptr_st_undfut_pos_to_be->d_imtm_trd_mrgn - d_avl_mrgn;
	}

	if( ptr_st_pstn_actn->l_actn_typ == ADHOC_ADD_MRGN_RQST  && ( d_diff_TM != 0  || d_adhoc_mrgn_needed != 0 ) )
	{

		d_base_prc	=		st_cntpos_crrnt.d_org_opn_val	/	st_cntpos_crrnt.l_opnpstn_qty	;

		if ( ptr_st_undfut_pos_to_be->l_opnpstn_qty > 0 )
 		{
   		c_openpstn_flow = BUY;
 		}
 		else if ( ptr_st_undfut_pos_to_be->l_opnpstn_qty < 0 )
 		{
   		c_openpstn_flow = SELL;
 		}
 		else
 		{
   		c_openpstn_flow = NEUTRAL;
 		}

		EXEC SQL
			SELECT	FMM_INIT_MRGN_PRCNT
			INTO		:d_init_mrgn_prcnt  /** Ver 2.7 **/
			FROM		FMM_FO_MRGN_MSTR
			WHERE		FMM_PRDCT_TYP					=	:ptr_st_pstn_actn->c_prd_typ
			AND			FMM_UNDRLYNG					=	:ptr_st_pstn_actn->c_undrlyng
			AND			FMM_UNDRLYNG_BSKT_ID	=	1
      AND     FMM_XCHNG_CD          = :ptr_st_pstn_actn->c_xchng_cd; /*** Ver 2.5 ***/

		if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31175", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

		EXEC SQL
			SELECT	LAST_NUMBER	-	1
			INTO		:l_run_no
			FROM    ALL_SEQUENCES
			WHERE		SEQUENCE_NAME	=	'FAD_ADDMRGN_SEQ';

		if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31180", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }
		
		if(DEBUG_MSG_LVL_3)
  	{
 			fn_userlog(c_ServiceName,"RUN NO IS :%ld:",l_run_no);
 			fn_userlog(c_ServiceName,"Before Inserting Record Into fad_addhoc_mrgn_dtls");
		}

 		EXEC SQL
   		INSERT  INTO  FAD_ADDHOC_MRGN_DTLS
   		(
     		FAD_CLM_MTCH_ACCNT,
     		FAD_XCHNG_CD,
     		FAD_PRDCT_TYP,
     		FAD_INDSTK,
     		FAD_UNDRLYNG,
     		FAD_CNTRCT_TAG,
     		FAD_EXPRY_DT,
     		FAD_RPRT_TM_STMP,
     		FAD_OPNPSTN_FLW,
     		FAD_OPNPSTN_QTY,
     		FAD_OPNPSTN_VAL,
				FAD_INIT_MRGN_PRCNT,
     		FAD_MTM_OPN_VAL,
     		FAD_OLD_TRD_MRGN,
     		FAD_IM_TRD_MRGN,
     		FAD_PRFT_LSS_AMT,
     		FAD_MIN_TRD_MRGN,
     		FAD_AVL_MRGN,
     		FAD_ADDNL_MRGN_REQ,
				FAD_RUN_NO,
				FAD_BASE_PRC,
				FAD_LTPCLS_PRC,
     		FAD_PRC_FLG
   		)
		 	VALUES
   		(
     		:ptr_st_pstn_actn->c_cln_mtch_accnt,
     		:ptr_st_pstn_actn->c_xchng_cd,
     		:ptr_st_pstn_actn->c_prd_typ,
     		:ptr_st_pstn_actn->c_ctgry_indstk,
     		:ptr_st_pstn_actn->c_undrlyng,
     		:ptr_st_pstn_actn->c_cntrct_tag,
     		to_date(:st_cntpos_md_rc.c_expry_dt,'DD-Mon-YYYY'),
     		sysdate,
     		:c_openpstn_flow,
     		:ptr_st_undfut_pos_to_be->l_opnpstn_qty,
     		:ptr_st_undfut_pos_to_be->d_org_opn_val,
				:d_init_mrgn_prcnt,                      /*** Ver 2.7 *** Datatype chnaged to double***/
     		:ptr_st_undfut_pos_to_be->d_mtm_opn_val,
     		:d_trd_mrgn_MTM_b,
				:ptr_st_undfut_pos_to_be->d_trd_mrgn,
     		:d_prft_loss,
     		:ptr_st_undfut_pos_to_be->d_mm_trd_mrgn,
     		:d_avl_mrgn,
     		:d_amnt_blckd,
				:l_run_no,
				:d_base_prc,
				:li_cmp,
     		:ptr_st_pstn_actn->c_nkd_blkd_flg
   		);

   	if ( SQLCODE != 0 )
   	{
    	fn_errlog(c_ServiceName, "S31185", SQLMSG, ptr_st_err_msg->c_err_msg );
     	return FAILURE;
   	}

 	}

	/***	Ver	2.0	Ends	***/


	if ( d_avl_mrgn >= ptr_st_undfut_pos_to_be->d_mm_trd_mrgn )
	{
		return SUCCESS;
	}
	

	d_addnl_mrgn_needed = ptr_st_undfut_pos_to_be->d_imtm_trd_mrgn - d_avl_mrgn;


  if( ptr_st_pstn_actn->l_actn_typ == INTRADAY_MTM_REPORT )  
	{
		i_ret_val = tpsuspend ( &tranid, 0 );
  	if ( i_ret_val == -1 )
  	{
 			fn_errlog(c_ServiceName, "S31190", DEFMSG, ptr_st_err_msg->c_err_msg );
 			return FAILURE;
  	}

  	i_trnsctn = fn_begintran( c_ServiceName, ptr_st_err_msg->c_err_msg );
  	if ( i_trnsctn == -1 )
  	{
 			fn_errlog(c_ServiceName, "S31195", LIBMSG, ptr_st_err_msg->c_err_msg );
 			return FAILURE;
  	}

		/** Added on 09/04/2002 to get the correct position flow **/

  	if ( ptr_st_undfut_pos_to_be->l_opnpstn_qty > 0 )
  	{
    	c_openpstn_flow = BUY;
  	}
  	else if ( ptr_st_undfut_pos_to_be->l_opnpstn_qty < 0 )
  	{
    	c_openpstn_flow = SELL;
  	}
  	else
  	{
    	c_openpstn_flow = NEUTRAL;
  	}
		/***   if(DEBUG_MSG_LVL_3) ***/
		if(DEBUG_MSG_LVL_2) /*** changed to 0 in Ver 4.6 ***/
  	{
			fn_userlog ( c_ServiceName, "Margin To be Inserted is  :%lf:",
                              ptr_st_undfut_pos_to_be->d_exctd_mrgn );
			fn_userlog ( c_ServiceName, "Margin Previously Inserted is :%lf:",
				ptr_st_undfut_pos_crrnt->d_trd_mrgn + ptr_st_undfut_pos_crrnt->d_add_mrgn_val);
		}

   	EXEC SQL
   		INSERT INTO FIR_FUT_IMTM_REP
   			(
					FIR_REPORT_NO,
					FIR_CLM_MTCH_ACCNT,
					FIR_XCHNG_CD,
					FIR_PRDCT_TYP,
					FIR_INDSTK,
					FIR_UNDRLYNG,
					FIR_CNTRCT_TAG,
					FIR_MTM_FLG,
					FIR_RPRT_TM_STMP,
					FIR_OPNPSTN_FLW,
					FIR_OPNPSTN_QTY,
					FIR_OPNPSTN_VAL,
					FIR_MTM_OPN_VAL,
					FIR_OLD_TRD_MRGN,
					FIT_IM_TRD_MRGN,
					FIR_PRFT_LSS_AMT,
					FIR_MIN_TRD_MRGN,
					FIR_AVL_MRGN,
					FIR_ADDNL_MRGN_REQ,
					FIR_EXPRY_DT
				)
				VALUES
				(
					:ptr_st_pstn_actn->l_report_no,
					:ptr_st_pstn_actn->c_cln_mtch_accnt,
					:ptr_st_pstn_actn->c_xchng_cd,
					:ptr_st_pstn_actn->c_prd_typ,
					:ptr_st_pstn_actn->c_ctgry_indstk,
					:ptr_st_pstn_actn->c_undrlyng,
					:ptr_st_pstn_actn->c_cntrct_tag,
					'Y',
					sysdate,
					:c_openpstn_flow,
					:ptr_st_undfut_pos_to_be->l_opnpstn_qty,
					:ptr_st_undfut_pos_to_be->d_org_opn_val,
					:ptr_st_undfut_pos_to_be->d_mtm_opn_val,
					:ptr_st_undfut_pos_to_be->d_exctd_mrgn,  /*Changed by sangeet for IMTM*/
					:ptr_st_undfut_pos_to_be->d_imtm_trd_mrgn,
					:d_prft_loss,
					:ptr_st_undfut_pos_to_be->d_mm_trd_mrgn,
					:d_avl_mrgn,
					:d_addnl_mrgn_needed,
     			to_date(:st_cntpos_md_rc.c_expry_dt,'DD-Mon-YYYY')  /*Changed by sangeet for IMTM*/
				);
	
			if ( SQLCODE != 0 )
  		{
 				fn_errlog(c_ServiceName, "S31200", SQLMSG, ptr_st_err_msg->c_err_msg );
     		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 				return FAILURE;
  		}
	
    if ( fn_committran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31205",LIBMSG,ptr_st_err_msg->c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return ( FAILURE );
    }

	
		i_ret_val = tpresume ( &tranid, 0 );
  	if ( i_ret_val == -1 )
  	{
 			fn_errlog(c_ServiceName, "S31210", DEFMSG, ptr_st_err_msg->c_err_msg );
 			return FAILURE;
  	}
		return SUCCESS;
	}

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog ( c_ServiceName,"Addn. Mrgn needed      :%lf:", d_addnl_mrgn_needed);
	}

	ptr_st_pstn_actn->d_add_mrgn_amt = d_addnl_mrgn_needed ;
	
	d_add_mrgn_MTM = d_addnl_mrgn_needed ; 								/***1.1***/

	if( ptr_st_pstn_actn->l_actn_typ == ADHOC_ADD_MRGN_RQST	)			/***	Ver	2.0	***/
	{
    d_mm_trd_mrgn = ptr_st_undfut_pos_to_be->d_mm_trd_mrgn;  /** Ver 4.2 **/

		i_returncode	=	fn_call_addhoc_add_mrgn	( c_ServiceName,
                                            	ptr_st_pstn_actn,
                                            	ptr_st_undfut_pos_crrnt,
                                            	ptr_st_undfut_pos_to_be,
                                            	ptr_st_err_msg );

		if ( i_returncode != 0 )
		{
			fn_userlog(c_ServiceName,"Failed While Calling fn_call_addhoc_add_mrgn");
			return FAILURE;
		}
		
		if(DEBUG_MSG_LVL_3)
  	{
			fn_userlog(c_ServiceName,"ptr_st_undfut_pos_to_be->d_add_mrgn_val Is :%lf:",ptr_st_undfut_pos_to_be->d_add_mrgn_val);
		}

		EXEC SQL
    	UPDATE  FAD_ADDHOC_MRGN_DTLS
    	SET     FAD_ADDNL_MRGN_REQ  = FAD_ADDNL_MRGN_REQ  + :ptr_st_undfut_pos_to_be->d_add_mrgn_val
    	WHERE   FAD_CLM_MTCH_ACCNT  =	:ptr_st_pstn_actn->c_cln_mtch_accnt
    	AND     FAD_XCHNG_CD        =	:ptr_st_pstn_actn->c_xchng_cd
    	AND     FAD_PRDCT_TYP       =	:ptr_st_pstn_actn->c_prd_typ
    	AND     FAD_UNDRLYNG        =	:ptr_st_pstn_actn->c_undrlyng
    	AND     FAD_CNTRCT_TAG      =	:ptr_st_pstn_actn->c_cntrct_tag
    	AND     FAD_EXPRY_DT        =	to_date(:st_cntpos_md_rc.c_expry_dt,'DD-Mon-YYYY')
    	AND     FAD_RUN_NO          =	:l_run_no	;

		if ( SQLCODE != 0 )
    {
    	fn_errlog(c_ServiceName, "S31215", SQLMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return FAILURE;
    }
  
    ptr_st_undfut_pos_to_be->d_mm_trd_mrgn = d_mm_trd_mrgn;  /*** Ver 4.2 **/

	}
	else			
	{

    d_mm_trd_mrgn = ptr_st_undfut_pos_to_be->d_mm_trd_mrgn;  /** Ver 4.2 **/
 
		i_returncode 	= fn_call_actn_add_mrgn ( c_ServiceName, 
     					                 							ptr_st_pstn_actn, 
						  					       							ptr_st_undfut_pos_crrnt, 
						         												ptr_st_undfut_pos_to_be, 
                     												ptr_st_err_msg,
                                            c_imtm_addmrgn_flg );  /** Ver 3.4 c_imtm_addmrgn_flg added **/
		if ( i_returncode != 0 )
 		{
			switch ( i_returncode )
			{
				case INSUFFICIENT_LIMITS :

					sprintf(ptr_st_pstn_actn->c_imtm_rmrks,
					"INSUFFICIENT LIMIT FOR ADDMARGIN-[%lf]",d_addnl_mrgn_needed);
        	/** fn_errlog(c_ServiceName,"B28558",DEFMSG,ptr_st_err_msg->c_err_msg);	** Commented in ver 2.4 ***/
					fn_userlog (c_ServiceName ,"INSUFFICIENT LIMIT FOR ADDMARGIN-");			 /*** Added in ver 2.4    ***/	
					return INSUFFICIENT_LIMITS;
					break;

				default :
					return FAILURE;
					break;
			}
 		}

    ptr_st_undfut_pos_to_be->d_mm_trd_mrgn = d_mm_trd_mrgn;  /*** Ver 4.2 **/   
	}

	if( ptr_st_pstn_actn->l_actn_typ == ADHOC_ADD_MRGN_RQST  )			/***	Ver 2.0	***/
	{
		sprintf(c_imtm_rmrks,"ADHOC MARGIN ADDED FOR POSITION - [%lf]",d_addnl_mrgn_needed);

	}
	else
	{
		sprintf(c_imtm_rmrks,"ADDED MARGIN FOR POSITION - [%lf]",d_addnl_mrgn_needed);
	}

  i_returncode = fn_ins_rep_tbl ( c_ServiceName,
                                  c_err_msg,
                                  ptr_st_pstn_actn,
                                  c_imtm_rmrks );

  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31220",LIBMSG,c_err_msg);
		return FAILURE;
  }

	return SUCCESS;
}

int fn_call_actn_cntrct_split ( char *c_ServiceName,
											 					struct vw_pstn_actn *ptr_st_pstn_actn,
                  		 					struct vw_undfut_pos *ptr_st_undfut_pos_crrnt_1,
                  		 					struct vw_undfut_pos *ptr_st_undfut_pos_to_be_1,
                  	 	 					struct vw_err_msg *ptr_st_err_msg)
{
  char c_upos2_avl;
	int			i_returncode;

	double	d_mrgn_rlsd;
	double	d_diff_UOM_1;
	double	d_diff_UOM_2;
	double	d_diff_UTM_1;
	double	d_diff_UTM_2;
	double	d_balance_amt;
	double	d_bal_to_apply;

  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;             /* a cursor variable */
		char	sql_cln_mtch_accnt[11];
		char	sql_xchng_cd[4];
		char	sql_prd_typ;
		char	sql_cntrct_tag;
		char	sql_new_cntrct_tag;
		char	sql_undrlyng[7];
    varchar c_exp_dt[12];
    varchar c_trade_dt[12];
    char c_ucc_cd[13];  /*ver 5.6*/
    struct vw_cntfut_pos st_cntpos_crrnt_1;
    struct vw_cntfut_pos st_cntpos_crrnt_2;

    struct vw_undfut_pos st_undfut_pos_crrnt_2;
    struct vw_undfut_pos st_undfut_pos_to_be_2;
    struct vw_pstn_actn  st_pstn_actn_frtrg;       /*** Ver 3.4 ***/
  EXEC SQL END DECLARE SECTION;

	memset ( &st_cntpos_crrnt_1, '\0', sizeof(struct vw_cntfut_pos) ) ;
	memset ( &st_cntpos_crrnt_2, '\0', sizeof(struct vw_cntfut_pos) ) ;

	memset ( &st_undfut_pos_crrnt_2, '\0', sizeof(struct vw_undfut_pos) ) ;
	memset ( &st_undfut_pos_to_be_2, '\0', sizeof(struct vw_undfut_pos) ) ;

   	EXEC SQL
     	UPDATE  FFP_FO_FUTURES_PSTN
			SET			FFP_CNTRCT_TAG     = :ptr_st_pstn_actn->c_new_cntrct_tag
			WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
			AND			FFP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
			AND			FFP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
			AND			FFP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
     	AND     FFP_EXPRY_DT       = to_date(:ptr_st_pstn_actn->c_expry_dt,
																			'DD-Mon-YYYY')
     	AND     FFP_EXER_TYP       = :ptr_st_pstn_actn->c_exrc_typ
			AND			FFP_CNTRCT_TAG		 = :ptr_st_pstn_actn->c_cntrct_tag;

		if ( SQLCODE != 0 )
   	{
   		fn_errlog(c_ServiceName, "S31225", SQLMSG, ptr_st_err_msg->c_err_msg );
   		return FAILURE;
	 	}

	/******** Get underlying level position for the Exchange, client, ********/
  /******** underlying and new tag combination into UPOS_crrnt_2    ********/

	c_upos2_avl = 'Y';

  EXEC SQL
    SELECT  FUP_CLM_MTCH_ACCNT,
						FUP_XCHNG_CD,
						FUP_PRDCT_TYP,
						FUP_INDSTK,
						FUP_UNDRLYNG,
						FUP_CNTRCT_TAG,
						FUP_UIBUY_QTY,
						FUP_UIBUY_VAL,
						FUP_UISELL_QTY,
						FUP_UISELL_VAL,
						FUP_UEXBUY_QTY,
						FUP_UEXBUY_VAL,
						FUP_UEXSELL_QTY,
						FUP_UEXSELL_VAL,
						FUP_UBUY_EXCTD_QTY,
						FUP_USELL_EXCTD_QTY,
						FUP_UOPNPSTN_FLW,
						FUP_UOPNPSTN_QTY,
						FUP_UOPNPSTN_VAL,
						FUP_UMTM_OPN_VAL,
						FUP_ADD_MRGN_VAL,
						FUP_UORDR_MRGN,
						FUP_UEXCTD_MRGN,
						FUP_USPREAD_MRGN,
						FUP_USPREAD_PNL,
						FUP_UTRD_MRGN,
						FUP_UMIN_TRD_MRGN
		INTO		:st_undfut_pos_crrnt_2.c_cln_mtch_accnt,
            :st_undfut_pos_crrnt_2.c_xchng_cd,
            :st_undfut_pos_crrnt_2.c_prd_typ,
            :st_undfut_pos_crrnt_2.c_ctgry_indstk,
            :st_undfut_pos_crrnt_2.c_undrlyng,
            :st_undfut_pos_crrnt_2.c_cntrct_tag,
            :st_undfut_pos_crrnt_2.l_ibuy_qty,
            :st_undfut_pos_crrnt_2.d_ibuy_ord_vl,
            :st_undfut_pos_crrnt_2.l_isell_qty,
            :st_undfut_pos_crrnt_2.d_isell_ord_vl,
            :st_undfut_pos_crrnt_2.l_exbuy_qty,
            :st_undfut_pos_crrnt_2.d_exbuy_ord_vl,
            :st_undfut_pos_crrnt_2.l_exsell_qty,
            :st_undfut_pos_crrnt_2.d_exsell_ord_vl,
            :st_undfut_pos_crrnt_2.l_buy_exctd_qty,
            :st_undfut_pos_crrnt_2.l_sell_exctd_qty,
            :st_undfut_pos_crrnt_2.c_opnpstn_flw,
            :st_undfut_pos_crrnt_2.l_opnpstn_qty,
            :st_undfut_pos_crrnt_2.d_org_opn_val,
            :st_undfut_pos_crrnt_2.d_mtm_opn_val,
            :st_undfut_pos_crrnt_2.d_add_mrgn_val,
            :st_undfut_pos_crrnt_2.d_ordr_mrgn,
            :st_undfut_pos_crrnt_2.d_exctd_mrgn,
            :st_undfut_pos_crrnt_2.d_sprd_mrgn,
            :st_undfut_pos_crrnt_2.d_sprd_pl,
            :st_undfut_pos_crrnt_2.d_trd_mrgn,
            :st_undfut_pos_crrnt_2.d_mm_trd_mrgn
		FROM		FUP_FUT_UNDRLYNG_PSTN
    WHERE FUP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND   FUP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
    AND   FUP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
    AND   FUP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
    AND   FUP_CNTRCT_TAG      = :ptr_st_pstn_actn->c_new_cntrct_tag;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31230", SQLMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
  }

  /**** If a position doesnot exists, initialise the position values to ****/
	/**** default                                                         ****/
  if ( SQLCODE == NO_DATA_FOUND )
  {
    strcpy( st_undfut_pos_crrnt_2.c_cln_mtch_accnt,
																	ptr_st_pstn_actn->c_cln_mtch_accnt );
    strcpy( st_undfut_pos_crrnt_2.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
    strcpy( st_undfut_pos_crrnt_2.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
    st_undfut_pos_crrnt_2.c_prd_typ  = ptr_st_pstn_actn->c_prd_typ;
    st_undfut_pos_crrnt_2.c_ctgry_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
    st_undfut_pos_crrnt_2.c_cntrct_tag = ptr_st_pstn_actn->c_new_cntrct_tag;
    st_undfut_pos_crrnt_2.l_ibuy_qty = 0;
    st_undfut_pos_crrnt_2.d_ibuy_ord_vl = 0;
    st_undfut_pos_crrnt_2.l_isell_qty = 0;
    st_undfut_pos_crrnt_2.d_isell_ord_vl = 0;
    st_undfut_pos_crrnt_2.l_exbuy_qty = 0;
    st_undfut_pos_crrnt_2.d_exbuy_ord_vl = 0;
    st_undfut_pos_crrnt_2.l_exsell_qty = 0;
    st_undfut_pos_crrnt_2.d_exsell_ord_vl = 0;
    st_undfut_pos_crrnt_2.l_buy_exctd_qty = 0;
    st_undfut_pos_crrnt_2.l_sell_exctd_qty = 0;
    st_undfut_pos_crrnt_2.c_opnpstn_flw = 'N';
    st_undfut_pos_crrnt_2.l_opnpstn_qty = 0;
    st_undfut_pos_crrnt_2.d_org_opn_val = 0;
    st_undfut_pos_crrnt_2.d_mtm_opn_val = 0;
    st_undfut_pos_crrnt_2.d_add_mrgn_val = 0;
    st_undfut_pos_crrnt_2.l_opn_buyqty = 0;
    st_undfut_pos_crrnt_2.l_opn_sellqty = 0;
    st_undfut_pos_crrnt_2.d_ibuy_mrgn = 0;
    st_undfut_pos_crrnt_2.d_isell_mrgn = 0;
    st_undfut_pos_crrnt_2.d_exbuy_mrgn = 0;
    st_undfut_pos_crrnt_2.d_exsell_mrgn = 0;
    st_undfut_pos_crrnt_2.d_ordr_mrgn = 0;
    st_undfut_pos_crrnt_2.d_exctd_mrgn = 0;
    st_undfut_pos_crrnt_2.d_sprd_mrgn = 0;
    st_undfut_pos_crrnt_2.d_sprd_pl = 0;
    st_undfut_pos_crrnt_2.d_trd_mrgn = 0;
    st_undfut_pos_crrnt_2.c_oprn_typ = '*';
  	st_undfut_pos_crrnt_2.d_ordr_mrgn = 0;
  	st_undfut_pos_crrnt_2.d_imtm_opn_val = 0;
  	st_undfut_pos_crrnt_2.d_imtm_exctd_mrgn = 0;
  	st_undfut_pos_crrnt_2.d_imtm_sprd_mrgn = 0;
  	st_undfut_pos_crrnt_2.d_imtm_sprd_pl = 0;
  	st_undfut_pos_crrnt_2.d_imtm_trd_mrgn = 0;
  	st_undfut_pos_crrnt_2.d_mm_exctd_mrgn = 0;
  	st_undfut_pos_crrnt_2.d_mm_sprd_mrgn = 0;
  	st_undfut_pos_crrnt_2.d_mm_sprd_pl = 0;

  	st_undfut_pos_crrnt_2.d_mm_trd_mrgn = 0;
		c_upos2_avl = 'N';
	}

	/******** Set UPOS_to_be_2 fields to default *******/
  strcpy( st_undfut_pos_to_be_2.c_cln_mtch_accnt,
															ptr_st_pstn_actn->c_cln_mtch_accnt );
  strcpy( st_undfut_pos_to_be_2.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
  strcpy( st_undfut_pos_to_be_2.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
  st_undfut_pos_to_be_2.c_prd_typ  = ptr_st_pstn_actn->c_prd_typ;
  st_undfut_pos_to_be_2.c_ctgry_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
  st_undfut_pos_to_be_2.c_cntrct_tag = ptr_st_pstn_actn->c_new_cntrct_tag;
  st_undfut_pos_to_be_2.l_ibuy_qty = 0;
  st_undfut_pos_to_be_2.d_ibuy_ord_vl = 0;
  st_undfut_pos_to_be_2.l_isell_qty = 0;
  st_undfut_pos_to_be_2.d_isell_ord_vl = 0;
  st_undfut_pos_to_be_2.l_exbuy_qty = 0;
  st_undfut_pos_to_be_2.d_exbuy_ord_vl = 0;
  st_undfut_pos_to_be_2.l_exsell_qty = 0;
  st_undfut_pos_to_be_2.d_exsell_ord_vl = 0;
  st_undfut_pos_to_be_2.l_buy_exctd_qty = 0;
  st_undfut_pos_to_be_2.l_sell_exctd_qty = 0;
  st_undfut_pos_to_be_2.c_opnpstn_flw = 'N';
  st_undfut_pos_to_be_2.l_opnpstn_qty = 0;
  st_undfut_pos_to_be_2.d_org_opn_val = 0;
  st_undfut_pos_to_be_2.d_mtm_opn_val = 0;
  st_undfut_pos_to_be_2.l_opn_buyqty = 0;
  st_undfut_pos_to_be_2.l_opn_sellqty = 0;
  st_undfut_pos_to_be_2.d_ibuy_mrgn = 0;
  st_undfut_pos_to_be_2.d_isell_mrgn = 0;
  st_undfut_pos_to_be_2.d_exbuy_mrgn = 0;
  st_undfut_pos_to_be_2.d_exsell_mrgn = 0;
  st_undfut_pos_to_be_2.d_add_mrgn_val = 0;
  st_undfut_pos_to_be_2.d_exctd_mrgn = 0;
  st_undfut_pos_to_be_2.d_sprd_mrgn = 0;
  st_undfut_pos_to_be_2.d_sprd_pl = 0;
  st_undfut_pos_to_be_2.d_trd_mrgn = 0;
  st_undfut_pos_to_be_2.c_oprn_typ = '*';  
 	st_undfut_pos_to_be_2.d_ordr_mrgn = 0;
 	st_undfut_pos_to_be_2.d_imtm_opn_val = 0;
 	st_undfut_pos_to_be_2.d_imtm_exctd_mrgn = 0;
 	st_undfut_pos_to_be_2.d_imtm_sprd_mrgn = 0;
 	st_undfut_pos_to_be_2.d_imtm_sprd_pl = 0;
 	st_undfut_pos_to_be_2.d_imtm_trd_mrgn = 0;
 	st_undfut_pos_to_be_2.d_mm_exctd_mrgn = 0;
 	st_undfut_pos_to_be_2.d_mm_sprd_mrgn = 0;
 	st_undfut_pos_to_be_2.d_mm_sprd_pl = 0;

  st_undfut_pos_to_be_2.d_mm_trd_mrgn = st_undfut_pos_crrnt_2.d_mm_trd_mrgn;

	/******** Set UPOS_to_be_1 fields to default ********
  strcpy( ptr_st_undfut_pos_to_be_1->c_cln_mtch_accnt,
															ptr_st_pstn_actn->c_cln_mtch_accnt );
  strcpy( ptr_st_undfut_pos_to_be_1->c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
  strcpy( ptr_st_undfut_pos_to_be_1->c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
  ptr_st_undfut_pos_to_be_1->c_prd_typ  = ptr_st_pstn_actn->c_prd_typ;
  ptr_st_undfut_pos_to_be_1->c_ctgry_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
  ptr_st_undfut_pos_to_be_1->c_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;
  ptr_st_undfut_pos_to_be_1->l_ibuy_qty = 0;
  ptr_st_undfut_pos_to_be_1->d_ibuy_ord_vl = 0;
  ptr_st_undfut_pos_to_be_1->l_isell_qty = 0;
  ptr_st_undfut_pos_to_be_1->d_isell_ord_vl = 0;
  ptr_st_undfut_pos_to_be_1->l_exbuy_qty = 0;
  ptr_st_undfut_pos_to_be_1->d_exbuy_ord_vl = 0;
  ptr_st_undfut_pos_to_be_1->l_exsell_qty = 0;
  ptr_st_undfut_pos_to_be_1->d_exsell_ord_vl = 0;
  ptr_st_undfut_pos_to_be_1->l_buy_exctd_qty = 0;
  ptr_st_undfut_pos_to_be_1->l_sell_exctd_qty = 0;
  ptr_st_undfut_pos_to_be_1->c_opnpstn_flw = 'N';
  ptr_st_undfut_pos_to_be_1->l_opnpstn_qty = 0;
  ptr_st_undfut_pos_to_be_1->d_org_opn_val = 0;
  ptr_st_undfut_pos_to_be_1->d_mtm_opn_val = 0;
  ptr_st_undfut_pos_to_be_1->l_opn_buyqty = 0;
  ptr_st_undfut_pos_to_be_1->l_opn_sellqty = 0;
  ptr_st_undfut_pos_to_be_1->d_ibuy_mrgn = 0;
  ptr_st_undfut_pos_to_be_1->d_isell_mrgn = 0;
  ptr_st_undfut_pos_to_be_1->d_exbuy_mrgn = 0;
  ptr_st_undfut_pos_to_be_1->d_exsell_mrgn = 0;
  ptr_st_undfut_pos_to_be_1->d_add_mrgn_val = 0;
  ptr_st_undfut_pos_to_be_1->d_exctd_mrgn = 0;
  ptr_st_undfut_pos_to_be_1->d_sprd_mrgn = 0;
  ptr_st_undfut_pos_to_be_1->d_sprd_pl = 0;
  ptr_st_undfut_pos_to_be_1->d_trd_mrgn = 0;
  ptr_st_undfut_pos_to_be_1->c_oprn_typ = '*';  
  ******************************************************/

	strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
	strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
	strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
	sql_prd_typ = ptr_st_pstn_actn->c_prd_typ;
	sql_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;

	/** This bit of code down below will fetch all the contract level **/
	/** position for from tag. It then summs up all the contract level**/
  /** postion to arrive at a consolidated underlying level position **/
  /** of from tag. It then recalculates the margin.                 **/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog (c_ServiceName,"Building new underlying position for from tag");
	}

	/** Prepare a list of contracts from contract position table **/
	EXEC SQL ALLOCATE :sys_cursor;

   	EXEC SQL EXECUTE
     	BEGIN
         OPEN :sys_cursor FOR
   				SELECT  FFP_CLM_MTCH_ACCNT,
									FFP_XCHNG_CD,
									FFP_PRDCT_TYP,
									FFP_INDSTK,
									FFP_UNDRLYNG,
									TO_CHAR (FFP_EXPRY_DT,'DD-Mon-YYYY'),
									FFP_EXER_TYP,
									FFP_CNTRCT_TAG,
									FFP_IBUY_QTY,
									FFP_IBUY_ORD_VAL,
									FFP_ISELL_QTY,
									FFP_ISELL_ORD_VAL,
									FFP_EXBUY_QTY,
									FFP_EXBUY_ORD_VAL,
									FFP_EXSELL_QTY,
									FFP_EXSELL_ORD_VAL,
									FFP_BUY_EXCTD_QTY,
									FFP_SELL_EXCTD_QTY,
									FFP_OPNPSTN_FLW,
									FFP_OPNPSTN_QTY,
									FFP_OPNPSTN_VAL,
									FFP_MTM_OPN_VAL,
									FFP_IMTM_OPN_VAL
					FROM		FFP_FO_FUTURES_PSTN
					WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
					AND			FFP_XCHNG_CD       = :sql_xchng_cd
					AND			FFP_PRDCT_TYP      = :sql_prd_typ
					AND			FFP_UNDRLYNG       = :sql_undrlyng
					AND			FFP_CNTRCT_TAG		 = :sql_cntrct_tag
					ORDER BY FFP_EXPRY_DT ASC;
     		END;
   		END-EXEC;

 	if ( SQLCODE != 0 )
  {
   	EXEC SQL FREE :sys_cursor;
   	fn_errlog ( c_ServiceName, "S31235", SQLMSG, ptr_st_err_msg->c_err_msg );
   	return FAILURE;
  }

	/** Fetch one contract at a time from the list. Then add the   **/
  /** contract to  underlying level position                     **/
	 while ( 1 )
  {
   		EXEC SQL 	FETCH   :sys_cursor
								INTO		:st_cntpos_crrnt_1.c_cln_mtch_accnt,
           							:st_cntpos_crrnt_1.c_xchng_cd,
           							:st_cntpos_crrnt_1.c_prd_typ,
           							:st_cntpos_crrnt_1.c_ctgry_indstk,
           							:st_cntpos_crrnt_1.c_undrlyng,
           							:c_exp_dt,
           							:st_cntpos_crrnt_1.c_exrc_typ,
           							:st_cntpos_crrnt_1.c_cntrct_tag,
           							:st_cntpos_crrnt_1.l_ibuy_qty,
           							:st_cntpos_crrnt_1.d_ibuy_ord_vl,
           							:st_cntpos_crrnt_1.l_isell_qty,
           							:st_cntpos_crrnt_1.d_isell_ord_vl,
           							:st_cntpos_crrnt_1.l_exbuy_qty,
           							:st_cntpos_crrnt_1.d_exbuy_ord_vl,
           							:st_cntpos_crrnt_1.l_exsell_qty,
           							:st_cntpos_crrnt_1.d_exsell_ord_vl,
           							:st_cntpos_crrnt_1.l_buy_exctd_qty,
           							:st_cntpos_crrnt_1.l_sell_exctd_qty,
           							:st_cntpos_crrnt_1.c_opnpstn_flw,
           							:st_cntpos_crrnt_1.l_opnpstn_qty,
           							:st_cntpos_crrnt_1.d_org_opn_val,
           							:st_cntpos_crrnt_1.d_mtm_opn_val,
           							:st_cntpos_crrnt_1.d_imtm_opn_val;

   		if ( SQLCODE != 0 )
   		{
     		if ( SQLCODE == NO_DATA_FOUND )
     		{
       		break;
     		}

     		EXEC SQL CLOSE :sys_cursor;
     		EXEC SQL FREE :sys_cursor;
   			fn_errlog ( c_ServiceName, "S31240", SQLMSG, 
																					ptr_st_err_msg->c_err_msg );
   			return FAILURE;
   		}
			SETNULL( c_exp_dt );
			strcpy ( st_cntpos_crrnt_1.c_expry_dt, (char *) c_exp_dt.arr );
			rtrim(st_cntpos_crrnt_1.c_xchng_cd);
			rtrim(st_cntpos_crrnt_1.c_undrlyng);
			rtrim(st_cntpos_crrnt_1.c_expry_dt);


			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog ( c_ServiceName, "Contract fetched in from tag: " );
				fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_exp_dt.arr );
				fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntpos_crrnt_1.l_ibuy_qty );
				fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntpos_crrnt_1.d_ibuy_ord_vl );
				fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntpos_crrnt_1.l_isell_qty );
				fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntpos_crrnt_1.d_isell_ord_vl );
				fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntpos_crrnt_1.l_exbuy_qty );
				fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntpos_crrnt_1.d_exbuy_ord_vl );
				fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntpos_crrnt_1.l_exsell_qty );
				fn_userlog ( c_ServiceName, "EXCH sell val      :%lf:", st_cntpos_crrnt_1.d_exsell_ord_vl );
				fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntpos_crrnt_1.l_buy_exctd_qty );
				fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntpos_crrnt_1.l_sell_exctd_qty );
			} 

      if(DEBUG_MSG_LVL_2) /*** Ver 4.6 ***/
      {
        fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntpos_crrnt_1.l_opnpstn_qty );
        fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntpos_crrnt_1.d_org_opn_val );
        fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntpos_crrnt_1.d_mtm_opn_val );
			}
			fn_sum_cpos ( st_cntpos_crrnt_1, 
                    ptr_st_undfut_pos_to_be_1 );
	} /* end of cursor while loop */

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Calcualted underlying level pos for From tag" );
		fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", ptr_st_undfut_pos_to_be_1->l_ibuy_qty );
		fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", ptr_st_undfut_pos_to_be_1->d_ibuy_ord_vl );
		fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", ptr_st_undfut_pos_to_be_1->l_isell_qty );
		fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", ptr_st_undfut_pos_to_be_1->d_isell_ord_vl );
		fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", ptr_st_undfut_pos_to_be_1->l_exbuy_qty );
		fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", ptr_st_undfut_pos_to_be_1->d_exbuy_ord_vl );
		fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", ptr_st_undfut_pos_to_be_1->l_exsell_qty );
		fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", ptr_st_undfut_pos_to_be_1->d_exsell_ord_vl );
		fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", ptr_st_undfut_pos_to_be_1->l_buy_exctd_qty );
		fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", ptr_st_undfut_pos_to_be_1->l_sell_exctd_qty );
		fn_userlog ( c_ServiceName, "Open qty          :%ld:", ptr_st_undfut_pos_to_be_1->l_opnpstn_qty );
	}

  if(DEBUG_MSG_LVL_2) /*** Ver 4.6 ***/
  {
    fn_userlog ( c_ServiceName, "Original open val :%lf:", ptr_st_undfut_pos_to_be_1->d_org_opn_val );
    fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", ptr_st_undfut_pos_to_be_1->d_mtm_opn_val );
    fn_userlog ( c_ServiceName, "Add Margin val    :%lf:", ptr_st_undfut_pos_to_be_1->d_add_mrgn_val );
	}
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Calculating margin for from tag" );
	}
	/** Calculate the margin on the new underlying position **/
	i_returncode = fn_upd_mrgn ( c_ServiceName, 
                               ptr_st_pstn_actn, 
											         ptr_st_undfut_pos_crrnt_1, 
											         ptr_st_undfut_pos_to_be_1, 
                               ptr_st_err_msg);
                            

  if ( i_returncode != 0 )
  {
  	return FAILURE;
  }


	sql_new_cntrct_tag = ptr_st_pstn_actn->c_new_cntrct_tag;

	/** This bit of code down below will fetch all the contract level **/
	/** position for to tag. It then summs up all the contract level  **/
  /** postion to arrive at a consolidated underlying level position **/
  /** of to tag. It then recalculates the margin at to tag position.**/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog (c_ServiceName,"Building new underlying position for to tag");
	}

	/** Prepare a list of contracts from contract position table **/
	EXEC SQL ALLOCATE :sys_cursor;

   	EXEC SQL EXECUTE
     	BEGIN
         OPEN :sys_cursor FOR
   				SELECT  FFP_CLM_MTCH_ACCNT,
									FFP_XCHNG_CD,
									FFP_PRDCT_TYP,
									FFP_INDSTK,
									FFP_UNDRLYNG,
									TO_CHAR (FFP_EXPRY_DT,'DD-Mon-YYYY'),
									FFP_EXER_TYP,
									FFP_CNTRCT_TAG,
									FFP_IBUY_QTY,
									FFP_IBUY_ORD_VAL,
									FFP_ISELL_QTY,
									FFP_ISELL_ORD_VAL,
									FFP_EXBUY_QTY,
									FFP_EXBUY_ORD_VAL,
									FFP_EXSELL_QTY,
									FFP_EXSELL_ORD_VAL,
									FFP_BUY_EXCTD_QTY,
									FFP_SELL_EXCTD_QTY,
									FFP_OPNPSTN_FLW,
									FFP_OPNPSTN_QTY,
									FFP_OPNPSTN_VAL,
									FFP_MTM_OPN_VAL,
									FFP_IMTM_OPN_VAL
					FROM		FFP_FO_FUTURES_PSTN
					WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
					AND			FFP_XCHNG_CD       = :sql_xchng_cd
					AND			FFP_PRDCT_TYP      = :sql_prd_typ
					AND			FFP_UNDRLYNG       = :sql_undrlyng
					AND			FFP_CNTRCT_TAG		 = :sql_new_cntrct_tag
					ORDER BY FFP_EXPRY_DT ASC;
     		END;
   		END-EXEC;

 	if ( SQLCODE != 0 )
  {
   	EXEC SQL FREE :sys_cursor;
   	fn_errlog ( c_ServiceName, "S31245", SQLMSG, ptr_st_err_msg->c_err_msg );
   	return FAILURE;
  }

	/** Fetch one contract at a time from the list. Then add the   **/
  /** contract to  underlying level position of to tag.          **/
	 while ( 1 )
  {
   		EXEC SQL 	FETCH   :sys_cursor
								INTO		:st_cntpos_crrnt_2.c_cln_mtch_accnt,
           							:st_cntpos_crrnt_2.c_xchng_cd,
           							:st_cntpos_crrnt_2.c_prd_typ,
           							:st_cntpos_crrnt_2.c_ctgry_indstk,
           							:st_cntpos_crrnt_2.c_undrlyng,
           							:c_exp_dt,
           							:st_cntpos_crrnt_2.c_exrc_typ,
           							:st_cntpos_crrnt_2.c_cntrct_tag,
           							:st_cntpos_crrnt_2.l_ibuy_qty,
           							:st_cntpos_crrnt_2.d_ibuy_ord_vl,
           							:st_cntpos_crrnt_2.l_isell_qty,
           							:st_cntpos_crrnt_2.d_isell_ord_vl,
           							:st_cntpos_crrnt_2.l_exbuy_qty,
           							:st_cntpos_crrnt_2.d_exbuy_ord_vl,
           							:st_cntpos_crrnt_2.l_exsell_qty,
           							:st_cntpos_crrnt_2.d_exsell_ord_vl,
           							:st_cntpos_crrnt_2.l_buy_exctd_qty,
           							:st_cntpos_crrnt_2.l_sell_exctd_qty,
           							:st_cntpos_crrnt_2.c_opnpstn_flw,
           							:st_cntpos_crrnt_2.l_opnpstn_qty,
           							:st_cntpos_crrnt_2.d_org_opn_val,
           							:st_cntpos_crrnt_2.d_mtm_opn_val,
           							:st_cntpos_crrnt_2.d_imtm_opn_val;

   		if ( SQLCODE != 0 )
   		{
     		if ( SQLCODE == NO_DATA_FOUND )
     		{
       		break;
     		}

     		EXEC SQL CLOSE :sys_cursor;
     		EXEC SQL FREE :sys_cursor;
   			fn_errlog ( c_ServiceName, "S31250", SQLMSG, 
																					ptr_st_err_msg->c_err_msg );
   			return FAILURE;
   		}
			SETNULL( c_exp_dt );
			strcpy ( st_cntpos_crrnt_2.c_expry_dt, (char *) c_exp_dt.arr );
			rtrim(st_cntpos_crrnt_2.c_xchng_cd);
			rtrim(st_cntpos_crrnt_2.c_undrlyng);
			rtrim(st_cntpos_crrnt_2.c_expry_dt);


			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog ( c_ServiceName, "Contract fetched in to tag: " );
				fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_exp_dt.arr );
				fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntpos_crrnt_2.l_ibuy_qty );
				fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntpos_crrnt_2.d_ibuy_ord_vl );
				fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntpos_crrnt_2.l_isell_qty );
				fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntpos_crrnt_2.d_isell_ord_vl );
				fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntpos_crrnt_2.l_exbuy_qty );
				fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntpos_crrnt_2.d_exbuy_ord_vl );
				fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntpos_crrnt_2.l_exsell_qty );
				fn_userlog ( c_ServiceName, "EXCH sell val      :%lf:", st_cntpos_crrnt_2.d_exsell_ord_vl );
				fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntpos_crrnt_2.l_buy_exctd_qty );
				fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntpos_crrnt_2.l_sell_exctd_qty );
			} 
      if(DEBUG_MSG_LVL_2) /*** Ver 4.6 ***/
      {
        fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntpos_crrnt_2.l_opnpstn_qty );
        fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntpos_crrnt_2.d_org_opn_val );
        fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntpos_crrnt_2.d_mtm_opn_val );
			}

			fn_sum_cpos ( st_cntpos_crrnt_2, 
                    &st_undfut_pos_to_be_2 );
	} /* end of cursor while loop */

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Calcualted underlying level position for to tag" );
		fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_undfut_pos_to_be_2.l_ibuy_qty );
		fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_undfut_pos_to_be_2.d_ibuy_ord_vl );
		fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_undfut_pos_to_be_2.l_isell_qty );
		fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_undfut_pos_to_be_2.d_isell_ord_vl );
		fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_undfut_pos_to_be_2.l_exbuy_qty );
		fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_undfut_pos_to_be_2.d_exbuy_ord_vl );
		fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_undfut_pos_to_be_2.l_exsell_qty );
		fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", st_undfut_pos_to_be_2.d_exsell_ord_vl );
		fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_undfut_pos_to_be_2.l_buy_exctd_qty );
		fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_undfut_pos_to_be_2.l_sell_exctd_qty );
		fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_undfut_pos_to_be_2.l_opnpstn_qty );
	}

  if(DEBUG_MSG_LVL_2) /*** Ver 4.6 ***/
  {
    fn_userlog ( c_ServiceName, "Original open val :%lf:", st_undfut_pos_to_be_2.d_org_opn_val );
    fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_undfut_pos_to_be_2.d_mtm_opn_val );
    fn_userlog ( c_ServiceName, "Add Margin val    :%lf:", st_undfut_pos_to_be_2.d_add_mrgn_val );
	}
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Calculating margin for to tag" );
	}
	/** Calculate the margin on the new underlying position **/
	i_returncode = fn_upd_mrgn ( c_ServiceName, 
                               ptr_st_pstn_actn, 
											         &st_undfut_pos_crrnt_2, 
											         &st_undfut_pos_to_be_2, 
                               ptr_st_err_msg);
                           

  if ( i_returncode != 0 )
  {
  	return FAILURE;
  }

	/** Release the order level margin, Total trade level margin **/
	/** and the add margin amount blocked for cuurect position   **/
	/** of From tag at underlying level                          **/

	d_mrgn_rlsd = ptr_st_undfut_pos_crrnt_1->d_ordr_mrgn +
								ptr_st_undfut_pos_crrnt_1->d_trd_mrgn +
								ptr_st_undfut_pos_crrnt_1->d_add_mrgn_val ;
								
	if ( d_mrgn_rlsd != 0)
	{
   	i_returncode = fn_upd_limits( c_ServiceName,
                                 	ptr_st_pstn_actn,
                                 	ptr_st_err_msg,
                                 	RELEASE_OF_MRGN_ON_CONTRACT_SPLIT,
                                 	DEBIT_WITHOUT_LIMIT,
                                 	d_mrgn_rlsd,
																	&d_balance_amt);
   	if ( i_returncode != 0 )
   	{
     	return i_returncode;
   	}
  }
	ptr_st_undfut_pos_crrnt_1->d_ordr_mrgn = 0;
	ptr_st_undfut_pos_crrnt_1->d_trd_mrgn = 0;
	ptr_st_undfut_pos_crrnt_1->d_add_mrgn_val = 0;
  
	d_diff_UOM_2 = st_undfut_pos_crrnt_2.d_ordr_mrgn -
							   st_undfut_pos_to_be_2.d_ordr_mrgn ;
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Diff in UOM of TO tag :%lf:", d_diff_UOM_2 );
	}

	if ( d_diff_UOM_2 != 0 )
	{
		i_returncode = fn_upd_limits( c_ServiceName,
									 								ptr_st_pstn_actn,
                 	 								ptr_st_err_msg,
									 								ORD_MRGN_ADJ_ON_CONTRACT_SPLIT,
									 								DEBIT_WITHOUT_LIMIT,
									 								d_diff_UOM_2,
																	&d_balance_amt);
    if ( i_returncode != 0 )
    {
   		return i_returncode;
    }

		/*** Added to take care of balance amount in case of ***/
		/*** DEBIT_TILL_LIMIT. d_balance_amt is added        ***/
    /*** since it is always negative or Zero             ***/	
		st_undfut_pos_to_be_2.d_ordr_mrgn =
													st_undfut_pos_to_be_2.d_ordr_mrgn +
													d_balance_amt ;

	}

	d_diff_UTM_2 = st_undfut_pos_crrnt_2.d_trd_mrgn -
								 st_undfut_pos_to_be_2.d_trd_mrgn;	

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Diff in UTM of TO tag :%lf:", d_diff_UTM_2 );
	}

	if ( d_diff_UTM_2 != 0 )
	{
		i_returncode = fn_upd_limits( c_ServiceName,
								 									ptr_st_pstn_actn,
               	 									ptr_st_err_msg,
								 									TRD_MRGN_ADJ_ON_CONTRACT_SPLIT,
								 									DEBIT_TILL_LIMIT,
								 									d_diff_UTM_2,
																	&d_balance_amt);
   	if ( i_returncode != 0 )
   	{
   		return i_returncode;
   	}

		/*** Added to take care of balance amount in case ***/
		/***  of DEBIT_TILL_LIMIT. d_balance_amt is added ***/
    /*** since it is always negative or Zero             ***/	

		st_undfut_pos_to_be_2.d_trd_mrgn =
												st_undfut_pos_to_be_2.d_trd_mrgn +
												d_balance_amt;

		d_bal_to_apply = d_balance_amt;

		if ( (d_bal_to_apply*-1.0) > st_undfut_pos_to_be_2.d_exctd_mrgn )
		{
			st_undfut_pos_to_be_2.d_exctd_mrgn = 0;
			d_bal_to_apply = d_bal_to_apply +
										 st_undfut_pos_to_be_2.d_exctd_mrgn;
		}
		else
		{
			st_undfut_pos_to_be_2.d_exctd_mrgn = 
													st_undfut_pos_to_be_2.d_exctd_mrgn +
													d_bal_to_apply ;
			d_bal_to_apply = 0;
		}

		if ( (d_bal_to_apply*-1.0) > st_undfut_pos_to_be_2.d_sprd_mrgn )
		{
			st_undfut_pos_to_be_2.d_sprd_mrgn = 0;
			d_bal_to_apply = d_bal_to_apply +
											 st_undfut_pos_to_be_2.d_sprd_mrgn;
		}
		else
		{
			st_undfut_pos_to_be_2.d_sprd_mrgn = 
													st_undfut_pos_to_be_2.d_sprd_mrgn +
													d_bal_to_apply ;
			d_bal_to_apply = 0;
		}
		st_undfut_pos_to_be_2.d_sprd_pl = 
													st_undfut_pos_to_be_2.d_sprd_pl -
													d_bal_to_apply;
	}

	if(DEBUG_MSG_LVL_3)
  {
  	fn_userlog(c_ServiceName,"Open Position Qty Is :%ld:",st_undfut_pos_to_be_2.l_opnpstn_qty);
	}

/***************Ver 2.1 **************/
  if ( st_undfut_pos_to_be_2.l_opnpstn_qty > 0 )
  {
    st_undfut_pos_to_be_2.c_opnpstn_flw = 'B';
  }
  else if ( st_undfut_pos_to_be_2.l_opnpstn_qty < 0 )
  {
    st_undfut_pos_to_be_2.c_opnpstn_flw = 'S';
  }
  else
  {
    st_undfut_pos_to_be_2.c_opnpstn_flw = 'N' ;
  }
/***************Ver 2.1 ends **************/

	/** Update the underlying level position on to the table **/

	if( c_upos2_avl == 'N')
	{
    EXEC SQL
      /** SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY') Commented in Ver 2.9 **/
      /*** SELECT  to_char( GREATEST(exg_nxt_trd_dt,exg_tmp_trd_dt), 'DD-Mon-YYYY' )* Ver 2.9 Reverted In Ver 2.9 Bug Fix **/
      SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY') /** Reverted In Ver 2.9 Bug Fix **/
      INTO   :c_trade_dt
      FROM   EXG_XCHNG_MSTr
      WHERE  EXG_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
      AND    EXG_MKT_TYP = 'D';

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31255", SQLMSG, ptr_st_err_msg->c_err_msg );
	  	return FAILURE;
    }
   MEMSET(c_ucc_cd);/*** Added in VER 5.6 Starts here : Fetching UCC code for client ***/

        EXEC SQL
        SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
        INTO  :c_ucc_cd
        FROM  CLM_CLNT_MSTR
        WHERE CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt;

        if ( SQLCODE != 0 )
        {
         fn_errlog(c_ServiceName, "S31260", SQLMSG, ptr_st_err_msg->c_err_msg );
         return FAILURE;
        }

        rtrim(c_ucc_cd);

        if(DEBUG_MSG_LVL_3)
          fn_userlog(c_ServiceName," VER 5.6 -- Match ID :%s: have UCC code :%s:", ptr_st_pstn_actn->c_cln_mtch_accnt, c_ucc_cd);

        /*** VER 5.6 ends here ***/

    EXEC SQL
      INSERT INTO FUP_FUT_UNDRLYNG_PSTN
      (
    		FUP_CLM_MTCH_ACCNT,
				FUP_XCHNG_CD,
				FUP_PRDCT_TYP,
				FUP_INDSTK,
				FUP_UNDRLYNG,
				FUP_CNTRCT_TAG,
				FUP_UIBUY_QTY,
				FUP_UIBUY_VAL,
				FUP_UISELL_QTY,
				FUP_UISELL_VAL,
				FUP_UEXBUY_QTY,
				FUP_UEXBUY_VAL,
				FUP_UEXSELL_QTY,
				FUP_UEXSELL_VAL,
				FUP_UBUY_EXCTD_QTY,
				FUP_USELL_EXCTD_QTY,
				FUP_UOPNPSTN_FLW,
				FUP_UOPNPSTN_QTY,
				FUP_UOPNPSTN_VAL,
				FUP_UMTM_OPN_VAL,
				FUP_UORDR_MRGN,
				FUP_UEXCTD_MRGN,
				FUP_USPREAD_MRGN,
				FUP_USPREAD_PNL,
				FUP_ADD_MRGN_VAL,
				FUP_UTRD_MRGN,
        FUP_TRD_DT,
        FUP_UMIN_TRD_MRGN,
        FUP_UCC_CD   /*ver 5.6*/
			)
      VALUES
      (
				:st_undfut_pos_to_be_2.c_cln_mtch_accnt,
        :st_undfut_pos_to_be_2.c_xchng_cd,
        :st_undfut_pos_to_be_2.c_prd_typ,
        :st_undfut_pos_to_be_2.c_ctgry_indstk,
        :st_undfut_pos_to_be_2.c_undrlyng,
        :st_undfut_pos_to_be_2.c_cntrct_tag,
        :st_undfut_pos_to_be_2.l_ibuy_qty,
        :st_undfut_pos_to_be_2.d_ibuy_ord_vl,
        :st_undfut_pos_to_be_2.l_isell_qty,
        :st_undfut_pos_to_be_2.d_isell_ord_vl,
        :st_undfut_pos_to_be_2.l_exbuy_qty,
        :st_undfut_pos_to_be_2.d_exbuy_ord_vl,
        :st_undfut_pos_to_be_2.l_exsell_qty,
        :st_undfut_pos_to_be_2.d_exsell_ord_vl,
        :st_undfut_pos_to_be_2.l_buy_exctd_qty,
        :st_undfut_pos_to_be_2.l_sell_exctd_qty,
        :st_undfut_pos_to_be_2.c_opnpstn_flw,
        :st_undfut_pos_to_be_2.l_opnpstn_qty,
        :st_undfut_pos_to_be_2.d_org_opn_val,
        :st_undfut_pos_to_be_2.d_mtm_opn_val,
        :st_undfut_pos_to_be_2.d_ordr_mrgn,
        :st_undfut_pos_to_be_2.d_exctd_mrgn,
        :st_undfut_pos_to_be_2.d_sprd_mrgn,
        :st_undfut_pos_to_be_2.d_sprd_pl,
        :st_undfut_pos_to_be_2.d_add_mrgn_val,
        :st_undfut_pos_to_be_2.d_trd_mrgn,
        :c_trade_dt,
        :st_undfut_pos_to_be_2.d_mm_trd_mrgn,
		    :c_ucc_cd           /*ver 5.6*/  
   	);

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31265", SQLMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
      }
	}
	else
	{
  	EXEC SQL
    	UPDATE  FUP_FUT_UNDRLYNG_PSTN
			SET			FUP_UIBUY_QTY       = :st_undfut_pos_to_be_2.l_ibuy_qty,
							FUP_UIBUY_VAL       = :st_undfut_pos_to_be_2.d_ibuy_ord_vl,
							FUP_UISELL_QTY      = :st_undfut_pos_to_be_2.l_isell_qty,
							FUP_UISELL_VAL      = :st_undfut_pos_to_be_2.d_isell_ord_vl,
							FUP_UEXBUY_QTY      = :st_undfut_pos_to_be_2.l_exbuy_qty,
							FUP_UEXBUY_VAL      = :st_undfut_pos_to_be_2.d_exbuy_ord_vl,
							FUP_UEXSELL_QTY     = :st_undfut_pos_to_be_2.l_exsell_qty,
							FUP_UEXSELL_VAL     = :st_undfut_pos_to_be_2.d_exsell_ord_vl,
							FUP_UBUY_EXCTD_QTY  = :st_undfut_pos_to_be_2.l_buy_exctd_qty,
							FUP_USELL_EXCTD_QTY = :st_undfut_pos_to_be_2.l_sell_exctd_qty,
							FUP_UOPNPSTN_FLW    = :st_undfut_pos_to_be_2.c_opnpstn_flw,
							FUP_UOPNPSTN_QTY    = :st_undfut_pos_to_be_2.l_opnpstn_qty,
							FUP_UOPNPSTN_VAL    = :st_undfut_pos_to_be_2.d_org_opn_val,
							FUP_UMTM_OPN_VAL    = :st_undfut_pos_to_be_2.d_mtm_opn_val,
							FUP_UORDR_MRGN      = :st_undfut_pos_to_be_2.d_ordr_mrgn,
							FUP_UEXCTD_MRGN     = :st_undfut_pos_to_be_2.d_exctd_mrgn,
							FUP_USPREAD_MRGN    = :st_undfut_pos_to_be_2.d_sprd_mrgn,
							FUP_USPREAD_PNL     = :st_undfut_pos_to_be_2.d_sprd_pl,
							FUP_ADD_MRGN_VAL    = :st_undfut_pos_to_be_2.d_add_mrgn_val,
							FUP_UTRD_MRGN    		= :st_undfut_pos_to_be_2.d_trd_mrgn,
							FUP_UMIN_TRD_MRGN 	= :st_undfut_pos_to_be_2.d_mm_trd_mrgn
   		WHERE 	FUP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
   		AND   	FUP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
   		AND   	FUP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
   		AND   	FUP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
   		AND   	FUP_CNTRCT_TAG      = :ptr_st_pstn_actn->c_new_cntrct_tag;

  	if ( SQLCODE != 0 )
  	{
   		fn_errlog(c_ServiceName, "S31270", SQLMSG, ptr_st_err_msg->c_err_msg );
			return FAILURE;
  	}
	}

	d_diff_UOM_1 = ptr_st_undfut_pos_crrnt_1->d_ordr_mrgn -
							   ptr_st_undfut_pos_to_be_1->d_ordr_mrgn ;
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Diff in UOM of FROM tag :%lf:", d_diff_UOM_1 );
	}

	if ( d_diff_UOM_1 != 0 )
	{
		i_returncode = fn_upd_limits( c_ServiceName,
									 								ptr_st_pstn_actn,
                 	 								ptr_st_err_msg,
									 								ORD_MRGN_ADJ_ON_CONTRACT_SPLIT,
									 								DEBIT_WITHOUT_LIMIT,
									 								d_diff_UOM_1,
																	&d_balance_amt);
    if ( i_returncode != 0 )
    {
   		return i_returncode;
    }

		/*** Added to take care of balance amount in case of ***/
		/*** DEBIT_TILL_LIMIT. d_balance_amt is added        ***/
    /*** since it is always negative or Zero             ***/	
		ptr_st_undfut_pos_to_be_1->d_ordr_mrgn =
													ptr_st_undfut_pos_to_be_1->d_ordr_mrgn +
													d_balance_amt ;
	}

	d_diff_UTM_1 = ptr_st_undfut_pos_crrnt_1->d_trd_mrgn -
								 ptr_st_undfut_pos_to_be_1->d_trd_mrgn;	

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Diff in UTM of FROM tag :%lf:", d_diff_UTM_1 );
	}

	if ( d_diff_UTM_1 != 0 )
	{
		i_returncode = fn_upd_limits( c_ServiceName,
								 									ptr_st_pstn_actn,
               	 									ptr_st_err_msg,
								 									TRD_MRGN_ADJ_ON_CONTRACT_SPLIT,
								 									DEBIT_TILL_LIMIT,
								 									d_diff_UTM_1,
																	&d_balance_amt);
   	if ( i_returncode != 0 )
   	{
   		return i_returncode;
   	}

		/*** Added to take care of balance amount in case ***/
		/***  of DEBIT_TILL_LIMIT. d_balance_amt is added ***/
    /*** since it is always negative or Zero             ***/	

		ptr_st_undfut_pos_to_be_1->d_trd_mrgn =
												ptr_st_undfut_pos_to_be_1->d_trd_mrgn +
												d_balance_amt;

		d_bal_to_apply = d_balance_amt;

		if ( (d_bal_to_apply*-1.0) > ptr_st_undfut_pos_to_be_1->d_exctd_mrgn )
		{
			ptr_st_undfut_pos_to_be_1->d_exctd_mrgn = 0;
			d_bal_to_apply = d_bal_to_apply +
										 ptr_st_undfut_pos_to_be_1->d_exctd_mrgn;
		}
		else
		{
			ptr_st_undfut_pos_to_be_1->d_exctd_mrgn = 
													ptr_st_undfut_pos_to_be_1->d_exctd_mrgn +
													d_bal_to_apply ;
			d_bal_to_apply = 0;
		}

		if ( (d_bal_to_apply*-1.0) > ptr_st_undfut_pos_to_be_1->d_sprd_mrgn )
		{
			ptr_st_undfut_pos_to_be_1->d_sprd_mrgn = 0;
			d_bal_to_apply = d_bal_to_apply +
											 ptr_st_undfut_pos_to_be_1->d_sprd_mrgn;
		}
		else
		{
			ptr_st_undfut_pos_to_be_1->d_sprd_mrgn = 
													ptr_st_undfut_pos_to_be_1->d_sprd_mrgn +
													d_bal_to_apply ;
			d_bal_to_apply = 0;
		}
		ptr_st_undfut_pos_to_be_1->d_sprd_pl = 
													ptr_st_undfut_pos_to_be_1->d_sprd_pl -
													d_bal_to_apply;
	}
  
  /**** Ver 3.4 Starts Here ****/
  MEMSET(st_pstn_actn_frtrg);
 
  strcpy((char*)st_pstn_actn_frtrg.c_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
  strcpy((char*) st_pstn_actn_frtrg.c_xchng_cd , ptr_st_pstn_actn->c_xchng_cd);
  st_pstn_actn_frtrg.c_prd_typ = ptr_st_pstn_actn->c_prd_typ;
  strcpy((char*)st_pstn_actn_frtrg.c_undrlyng , ptr_st_pstn_actn->c_undrlyng);
  st_pstn_actn_frtrg.c_cntrct_tag = ptr_st_pstn_actn->c_new_cntrct_tag;

  i_returncode =  fn_calc_trgprc_on_chngmrgn(c_ServiceName,
                                             &st_pstn_actn_frtrg,
                                             ptr_st_err_msg);
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "S31275", LIBMSG, ptr_st_err_msg->c_err_msg );
    fn_userlog(c_ServiceName,"Pls check, Error in calcualting Auto MTM Trigger Price");
  }
  /**** Ver 3.4 Ends Here ****/

	return SUCCESS;
}

int fn_call_addhoc_add_mrgn ( char *c_ServiceName,      /***  2.0 ***/
                              struct vw_pstn_actn *ptr_st_pstn_actn,
                              struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                              struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                              struct vw_err_msg *ptr_st_err_msg)
{

  int i_returncode;
  double d_amount;
  double d_balance_amt;
  char c_narration_id[4];
  char c_tmp_rmrks [ 133 ] ;  
  varchar c_exp_dt[LEN_DATE]; 

  memcpy ( ptr_st_undfut_pos_to_be,ptr_st_undfut_pos_crrnt,sizeof( struct vw_undfut_pos ) );

	ptr_st_undfut_pos_to_be->d_add_mrgn_val = ptr_st_undfut_pos_to_be->d_add_mrgn_val + ptr_st_pstn_actn->d_add_mrgn_amt ;

	d_amount = (-1) * ptr_st_pstn_actn->d_add_mrgn_amt ;

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog ( c_ServiceName, "Add margin amount :%lf:", d_amount );
  	fn_userlog ( c_ServiceName, "To be Add margin value :%lf:", ptr_st_undfut_pos_to_be->d_add_mrgn_val );
	}

  if ( ptr_st_pstn_actn->l_actn_typ == ADD_MARGIN  )
  {
    strcpy(c_narration_id,ON_USER_ADD_MARGIN);
  }
  else
  {
    strcpy(c_narration_id,ON_SYSTEM_ADD_MARGIN);
  }

	  MEMSET(c_exp_dt);

    EXEC SQL
    SELECT FFP_EXPRY_DT
    INTO :c_exp_dt
    FROM FFP_FO_FUTURES_PSTN
    WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND     FFP_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
    AND     FFP_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
    AND     FFP_INDSTK = :ptr_st_pstn_actn->c_ctgry_indstk
    AND     FFP_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
    AND     FFP_CNTRCT_TAG = :ptr_st_pstn_actn->c_cntrct_tag;

    if ( SQLCODE != 0  && SQLCODE == NO_DATA_FOUND)
    {
      fn_userlog(c_ServiceName,"Failed While Getting Expiry Date");
    }

    if( DEBUG_MSG_LVL_3 )
		{
    	fn_userlog ( c_ServiceName, "c_narration_id :%s",c_narration_id);
    	fn_userlog ( c_ServiceName, "Underlying I:%s",ptr_st_pstn_actn->c_undrlyng);
    	fn_userlog ( c_ServiceName, "Expiry date :%s", ptr_st_pstn_actn->c_expry_dt);
    	fn_userlog ( c_ServiceName, "Expiry date :%s", c_exp_dt.arr);
    }

    strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks );

    sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s", ptr_st_pstn_actn->c_undrlyng,c_exp_dt.arr);

    if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
    {
    	fn_userlog ( c_ServiceName, "Remark :%s",ptr_st_pstn_actn->c_ref_rmrks);
		}

		if ( d_amount != 0 )
		{
      if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
      {
				fn_userlog(c_ServiceName,"Inside fn_call_addhoc_add_mrgn For ADHOC_ADD_MRGN_RQST With DEBIT_TILL_LIMIT");
			}

			i_returncode = fn_upd_limits( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      c_narration_id,
                                      DEBIT_TILL_LIMIT,
                                      d_amount,
																			&d_balance_amt);	
		
			if ( i_returncode != 0 )
			{
				fn_userlog(c_ServiceName,"Failed While Calling fn_upd_limits For ADHOC_ADD_MRGN_RQST");
				return i_returncode;

			}

			strcpy ( ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks );
		}

	ptr_st_undfut_pos_to_be->d_add_mrgn_val	=	ptr_st_undfut_pos_to_be->d_add_mrgn_val	+	d_balance_amt;

	if (DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"ADD MARGIN ptr_st_undfut_pos_to_be->d_add_mrgn_val Is :%lf:",ptr_st_undfut_pos_to_be->d_add_mrgn_val);
		fn_userlog(c_ServiceName,"ADD MARGIN d_balance_amt Is :%lf:",d_balance_amt);
	}

	return SUCCESS;
}

/*** Added in Ver 2.4 for convert future position to future plus ***/

int fn_call_actn_conv_fut_to_futpls(  char *c_ServiceName,
                             					struct vw_pstn_actn  *ptr_st_pstn_actn,
                             					struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                             					struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                             					struct vw_err_msg *ptr_st_err_msg)
{

  int i_returncode;

  double d_pl_amt 	= 0.0;
  double d_diff_UEM = 0.0;
  double d_diff_amv = 0.0;
  double d_diff_UTM = 0.0;
  double d_diff_UOM = 0.0;
  double d_diff_UAM = 0.0;
  double d_UTM_amt  = 0.0;
  double d_balance_amt = 0.0;
  double d_bal_to_apply = 0.0;
	double d_rlsd_mrgn = 0.0;
	double d_num_of_lots =0.0;         /*** Ver 2.6 ***/
	long   l_ip_len;
	/*** double   d_lot;					Commented in Ver 2.6 ***
	long   l_lot_sz = 0 ;	***/

  char  c_cntrct_tag;
  char  c_tmp_rmrks [ 133 ] ;
  char  c_limit_chk;
  char  c_conv_chk;
	char c_narration_id[4] = "\0";	/*** Ver 3.7 ***/
	char c_reason_cd [ 2000 ];			/*** Ver 3.7 ***/

  struct vw_gt_lmt_dtls st_gt_lmt;

  EXEC SQL BEGIN DECLARE SECTION;

    sql_cursor     sys_cursor;         
    long   l_close_qty;
    char  sql_cln_mtch_accnt[11];
    char  sql_xchng_cd[4];
    char  sql_prd_typ;
    char  sql_cntrct_tag;
    char  c_openpstn_flow;
    char  sql_undrlyng[7];
    char  c_futpls_create;
    char  c_trn_flw;
    char  c_prdct_type;

    varchar c_exp_dt[LEN_DATE];
    varchar c_trade_dt[12];
    EXEC SQL INCLUDE "table/iai_info_account_info.h"; /* Ver 4.4 */

		
  /** Copy of contract level position on which action is to be done taken **/
  /** before applying the action                                          **/
    struct vw_cntfut_pos st_cntpos_old;

  /** Contract level position in other contracts of same underlyng **/
    struct vw_cntfut_pos st_cntpos_crrnt;

  /** Contract level position on which action is to be done **/
    struct vw_cntfut_pos st_cntpos_md_rc;

  /** Position action used to create futures plus position **/
  struct vw_pstn_actn st_pstn_actn_fut;

  EXEC SQL END DECLARE SECTION;

    memset ( &st_pstn_actn_fut, '\0', sizeof(struct vw_pstn_actn ) ) ;
    memcpy ( &st_pstn_actn_fut, ptr_st_pstn_actn, sizeof( struct vw_pstn_actn ) );

    strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
    strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
    strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
    sql_prd_typ = ptr_st_pstn_actn->c_prd_typ;
    sql_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;
    c_conv_chk = ptr_st_pstn_actn->c_nkd_blkd_flg;

    c_limit_chk = 'N';

  /***********************************************************************/
  /** This bit of code down below will fetch all the contract level     **/
  /** positions. Then it will find the contract in which the open       **/
  /** position exists, then it will perform the closing action on it    **/
  /** It summs up all the contract level postions to arrive             **/
  /** at a consolidated underlying level position. It then recalculates **/
  /** the margin. This bit of code should be performed for all contrats **/
  /** irrespective of open position exists or not, because the order    **/
  /** level margin need to  be recomputed                               **/
  /***********************************************************************/


  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog ( c_ServiceName, "************* Inside  fn_call_actn_conv_fut_to_futpls  *************");
    fn_userlog ( c_ServiceName, "Closing current position-CLOSE_FUT " );
  }


	/** Prepare a list of contracts from contract position table **/
  
	EXEC SQL ALLOCATE :sys_cursor;

    EXEC SQL EXECUTE
      BEGIN
         OPEN :sys_cursor FOR
          SELECT  FFP_CLM_MTCH_ACCNT,
                  FFP_XCHNG_CD,
                  FFP_PRDCT_TYP,
                  FFP_INDSTK,
                  FFP_UNDRLYNG,
                  TO_CHAR (FFP_EXPRY_DT,'DD-Mon-YYYY'),
                  FFP_EXER_TYP,
                  FFP_CNTRCT_TAG,
                  FFP_IBUY_QTY,
                  FFP_IBUY_ORD_VAL,
                  FFP_ISELL_QTY,
                  FFP_ISELL_ORD_VAL,
                  FFP_EXBUY_QTY,
                  FFP_EXBUY_ORD_VAL,
                  FFP_EXSELL_QTY,
                  FFP_EXSELL_ORD_VAL,
                  FFP_BUY_EXCTD_QTY,
                  FFP_SELL_EXCTD_QTY,
                  FFP_OPNPSTN_FLW,
                  FFP_OPNPSTN_QTY,
                  FFP_OPNPSTN_VAL,
                  FFP_MTM_OPN_VAL
          FROM    FFP_FO_FUTURES_PSTN
          WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
          AND     FFP_XCHNG_CD       = :sql_xchng_cd
          AND     FFP_PRDCT_TYP      = :sql_prd_typ
          AND     FFP_UNDRLYNG       = :sql_undrlyng
          AND     FFP_CNTRCT_TAG     = :sql_cntrct_tag
          ORDER BY FFP_EXPRY_DT asc;
        END;
      END-EXEC;

  if ( SQLCODE != 0 )
  {
    EXEC SQL FREE :sys_cursor;
    fn_errlog ( c_ServiceName, "S31280", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  /*****************************************************************/
  /** Fetch one contract at a time from the list. If the fetched  **/
  /** contract is the one we need to apply the change apply it.   **/
  /** Else simply add the contract to  underlying level position  **/
  /*****************************************************************/


  while ( 1 )
  {

      EXEC SQL  FETCH   :sys_cursor
                INTO    :st_cntpos_crrnt.c_cln_mtch_accnt,
                        :st_cntpos_crrnt.c_xchng_cd,
                        :st_cntpos_crrnt.c_prd_typ,
                        :st_cntpos_crrnt.c_ctgry_indstk,
                        :st_cntpos_crrnt.c_undrlyng,
                        :c_exp_dt,
                        :st_cntpos_crrnt.c_exrc_typ,
                        :st_cntpos_crrnt.c_cntrct_tag,
                        :st_cntpos_crrnt.l_ibuy_qty,
                        :st_cntpos_crrnt.d_ibuy_ord_vl,
                        :st_cntpos_crrnt.l_isell_qty,
                        :st_cntpos_crrnt.d_isell_ord_vl,
                        :st_cntpos_crrnt.l_exbuy_qty,
                        :st_cntpos_crrnt.d_exbuy_ord_vl,
                        :st_cntpos_crrnt.l_exsell_qty,
                        :st_cntpos_crrnt.d_exsell_ord_vl,
                        :st_cntpos_crrnt.l_buy_exctd_qty,
                        :st_cntpos_crrnt.l_sell_exctd_qty,
                        :st_cntpos_crrnt.c_opnpstn_flw,
                        :st_cntpos_crrnt.l_opnpstn_qty,
                        :st_cntpos_crrnt.d_org_opn_val,
                        :st_cntpos_crrnt.d_mtm_opn_val;

      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31285", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }

      SETNULL( c_exp_dt );
      strcpy (st_cntpos_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
      rtrim(st_cntpos_crrnt.c_xchng_cd);
      rtrim(st_cntpos_crrnt.c_undrlyng);
      rtrim(st_cntpos_crrnt.c_expry_dt);

		
      if ( ptr_st_pstn_actn->l_actn_typ == CONV_TO_FUTPLS )
      ptr_st_pstn_actn->l_actn_typ = CLOSE_FUT;

      if( ptr_st_pstn_actn->l_actn_typ == CONV_TO_PART_FUTPLS)
      ptr_st_pstn_actn->l_actn_typ = CLOSE_PART_FUT;   

      ptr_st_pstn_actn->c_exrc_typ = st_cntpos_crrnt.c_exrc_typ;
      c_futpls_create = 'N';

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog ( c_ServiceName, "Contract fetched -CLOSE_FUT : " );
    fn_userlog ( c_ServiceName, "FPLS Expiry date       :%s:", c_exp_dt.arr );
    fn_userlog ( c_ServiceName, "FPLS Exercise Type     :%c:", st_cntpos_crrnt.c_exrc_typ );
    fn_userlog ( c_ServiceName, "FPLS IWTL buy qty      :%ld:", st_cntpos_crrnt.l_ibuy_qty );
    fn_userlog ( c_ServiceName, "FPLS IWTL buy val      :%lf:", st_cntpos_crrnt.d_ibuy_ord_vl );
    fn_userlog ( c_ServiceName, "FPLS IWTL sell qty     :%ld:", st_cntpos_crrnt.l_isell_qty );
    fn_userlog ( c_ServiceName, "FPLS IWTL sell val     :%lf:", st_cntpos_crrnt.d_isell_ord_vl );
    fn_userlog ( c_ServiceName, "FPLS EXCH buy qty      :%ld:", st_cntpos_crrnt.l_exbuy_qty );
    fn_userlog ( c_ServiceName, "FPLS EXCH buy val      :%lf:", st_cntpos_crrnt.d_exbuy_ord_vl );
    fn_userlog ( c_ServiceName, "FPLS EXCH sell qty     :%ld:", st_cntpos_crrnt.l_exsell_qty );
    fn_userlog ( c_ServiceName, "FPLS EXCH sell val      :%lf:", st_cntpos_crrnt.d_exsell_ord_vl );
    fn_userlog ( c_ServiceName, "FPLS Buy exctd qty     :%ld:", st_cntpos_crrnt.l_buy_exctd_qty );
    fn_userlog ( c_ServiceName, "FPLS Sell exctd qty    :%ld:", st_cntpos_crrnt.l_sell_exctd_qty );
    fn_userlog ( c_ServiceName, "FPLS Open qty          :%ld:", st_cntpos_crrnt.l_opnpstn_qty );
  }

  if( DEBUG_MSG_LVL_2 ) /*** Ver 4.6 ***/
  {
    fn_userlog ( c_ServiceName, "FPLS Original open val :%lf:", st_cntpos_crrnt.d_org_opn_val );
    fn_userlog ( c_ServiceName, "FPLS MTMed open val    :%lf:", st_cntpos_crrnt.d_mtm_opn_val );
    fn_userlog ( c_ServiceName, "FPLS IMTMed open val   :%lf:", st_cntpos_crrnt.d_imtm_opn_val );
	}
	if( DEBUG_MSG_LVL_3 )
  {	
  	fn_userlog( c_ServiceName,"ptr_st_pstn_actn->l_actn_typ  :%ld:",  ptr_st_pstn_actn->l_actn_typ);
  	fn_userlog( c_ServiceName,"The spl flag:%c:",ptr_st_pstn_actn->c_nkd_blkd_flg);
  	fn_userlog( c_ServiceName,"Expiry :%s:",st_cntpos_crrnt.c_expry_dt);
  	fn_userlog( c_ServiceName,"pstn Expiry :%s:",ptr_st_pstn_actn->c_expry_dt);
	}

  memcpy ( &st_cntpos_old, &st_cntpos_crrnt, sizeof( st_cntpos_old ) );

  memcpy ( &st_cntpos_md_rc, &st_cntpos_crrnt, sizeof( st_cntpos_md_rc ) );

	/**** Commented in ver 3.1 *****************************************
  if(st_cntpos_crrnt.c_opnpstn_flw == 'S')
  {
    ptr_st_pstn_actn->l_new_qty = -1 * ptr_st_pstn_actn->l_new_qty;
  }
	********************************************************************/

	if( st_cntpos_crrnt.c_opnpstn_flw != 'N' )
  {
    if( (( ptr_st_pstn_actn->c_nkd_blkd_flg == SINGLE_CONVERSION ) &&
         ( strcmp(ptr_st_pstn_actn->c_expry_dt,st_cntpos_crrnt.c_expry_dt ) == 0 )) ||
       ( ( strcmp(ptr_st_pstn_actn->c_user_id,"system") == 0 ) && (ptr_st_pstn_actn->l_session_id == 0 )))
      {
      		if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
      		{
						fn_userlog(c_ServiceName," Inside Single F+ Conversion .");
					}

					/*** Added in ver 3.1 ****/
					if(st_cntpos_crrnt.c_opnpstn_flw == 'S')
  				{
    				ptr_st_pstn_actn->l_new_qty = -1 * ptr_st_pstn_actn->l_new_qty;
  				}
					/*** Ver 3.1 ends *******/

          c_futpls_create = 'Y';
          i_returncode =  fn_apply_cnt_actn ( c_ServiceName,
                                              ptr_st_pstn_actn,
                                              &st_cntpos_md_rc,
                                              ptr_st_err_msg );
          if ( i_returncode == -1 )
          {
            return FAILURE;
          }
      		if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
      		{
						fn_userlog(c_ServiceName," Future Position getz closed ");
					}
      }
      else if ( ptr_st_pstn_actn->c_nkd_blkd_flg == JOINT_CONVERSION )
      {
      	if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
      	{
					fn_userlog(c_ServiceName," Inside Joint F+ Conversion. ");
        }
  
					/*** Added in ver 3.1 ****/
          if(st_cntpos_crrnt.c_opnpstn_flw == 'S')
          {
            ptr_st_pstn_actn->l_new_qty = -1 * ptr_st_pstn_actn->l_new_qty;
          }
          /*** Ver 3.1 ends *******/

					strcpy( ptr_st_pstn_actn->c_expry_dt , st_cntpos_crrnt.c_expry_dt );
          c_futpls_create = 'Y';
          i_returncode =  fn_apply_cnt_actn ( c_ServiceName,
                                              ptr_st_pstn_actn,
                                              &st_cntpos_md_rc,
                                              ptr_st_err_msg );
          if ( i_returncode == -1 )
          {
             return FAILURE;
          }

      }
  }

	/*** Release part additional margin for part conversion Ver 2.6 ***/

	d_num_of_lots = ((double) (abs(st_cntpos_crrnt.l_opnpstn_qty))) / ((double)(abs(ptr_st_pstn_actn->l_new_qty))) ;

 	fn_sum_cpos ( st_cntpos_md_rc, ptr_st_undfut_pos_to_be );

  if ( st_cntpos_md_rc.l_opnpstn_qty > 0 )
  {
     st_cntpos_md_rc.c_opnpstn_flw = BUY;
  }
  else if ( st_cntpos_md_rc.l_opnpstn_qty < 0 )
  {
    st_cntpos_md_rc.c_opnpstn_flw = SELL;
  }
  else
  {
    st_cntpos_md_rc.c_opnpstn_flw = NEUTRAL;
  }

    EXEC SQL
      UPDATE  FFP_FO_FUTURES_PSTN
      SET     FFP_IBUY_QTY       = :st_cntpos_md_rc.l_ibuy_qty,
              FFP_IBUY_ORD_VAL   = :st_cntpos_md_rc.d_ibuy_ord_vl,
              FFP_ISELL_QTY      = :st_cntpos_md_rc.l_isell_qty,
              FFP_ISELL_ORD_VAL  = :st_cntpos_md_rc.d_isell_ord_vl,
              FFP_EXBUY_QTY      = :st_cntpos_md_rc.l_exbuy_qty,
              FFP_EXBUY_ORD_VAL  = :st_cntpos_md_rc.d_exbuy_ord_vl,
              FFP_EXSELL_QTY     = :st_cntpos_md_rc.l_exsell_qty,
              FFP_EXSELL_ORD_VAL = :st_cntpos_md_rc.d_exsell_ord_vl,
              FFP_BUY_EXCTD_QTY  = :st_cntpos_md_rc.l_buy_exctd_qty,
              FFP_SELL_EXCTD_QTY = :st_cntpos_md_rc.l_sell_exctd_qty,
              FFP_OPNPSTN_FLW    = :st_cntpos_md_rc.c_opnpstn_flw,
              FFP_OPNPSTN_QTY    = :st_cntpos_md_rc.l_opnpstn_qty,
              FFP_OPNPSTN_VAL    = :st_cntpos_md_rc.d_org_opn_val,
              FFP_MTM_OPN_VAL    = :st_cntpos_md_rc.d_mtm_opn_val,
              FFP_TRG_PRC        = DECODE(:st_cntpos_md_rc.c_opnpstn_flw,'N',0,FFP_TRG_PRC), /** Ver 3.4 **/
              FFP_MIN_TRG_PRC    = DECODE(:st_cntpos_md_rc.c_opnpstn_flw,'N',0,FFP_MIN_TRG_PRC) /** Ver 3.4 **/
      WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
      AND     FFP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
      AND     FFP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
      AND     FFP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
      AND     FFP_EXPRY_DT       = to_date(:st_cntpos_crrnt.c_expry_dt,
                                      'DD-Mon-YYYY')
      AND     FFP_EXER_TYP       = :ptr_st_pstn_actn->c_exrc_typ
      AND     FFP_CNTRCT_TAG     = :ptr_st_pstn_actn->c_cntrct_tag;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31290", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

	if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog ( c_ServiceName, "*************  SFO_UPD_FUT_PLS - IV  *************");
    fn_userlog ( c_ServiceName, "Calcualted underlying level position" );
    fn_userlog ( c_ServiceName, "FPLS IWTL buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_ibuy_qty );
    fn_userlog ( c_ServiceName, "FPLS IWTL buy val      :%lf:", ptr_st_undfut_pos_to_be->d_ibuy_ord_vl );
    fn_userlog ( c_ServiceName, "FPLS IWTL sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_isell_qty );
    fn_userlog ( c_ServiceName, "FPLS IWTL sell val     :%lf:", ptr_st_undfut_pos_to_be->d_isell_ord_vl );
    fn_userlog ( c_ServiceName, "FPLS EXCH buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_exbuy_qty );
    fn_userlog ( c_ServiceName, "FPLS EXCH buy val      :%lf:", ptr_st_undfut_pos_to_be->d_exbuy_ord_vl );
    fn_userlog ( c_ServiceName, "FPLS EXCH sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_exsell_qty );
    fn_userlog ( c_ServiceName, "FPLS EXCH sell val     :%lf:", ptr_st_undfut_pos_to_be->d_exsell_ord_vl );
    fn_userlog ( c_ServiceName, "FPLS Buy exctd qty     :%ld:", ptr_st_undfut_pos_to_be->l_buy_exctd_qty );
    fn_userlog ( c_ServiceName, "FPLS Sell exctd qty    :%ld:", ptr_st_undfut_pos_to_be->l_sell_exctd_qty );
    fn_userlog ( c_ServiceName, "FPLS Open qty          :%ld:", ptr_st_undfut_pos_to_be->l_opnpstn_qty );
  }

  if( DEBUG_MSG_LVL_2 ) /*** Ver 4.6 ***/
  {
    fn_userlog ( c_ServiceName, "FPLS Original open val :%lf:", ptr_st_undfut_pos_to_be->d_org_opn_val );
    fn_userlog ( c_ServiceName, "FPLS MTMed open val    :%lf:", ptr_st_undfut_pos_to_be->d_mtm_opn_val );
    fn_userlog ( c_ServiceName, "FPLS Add Margin val    :%lf:", ptr_st_undfut_pos_to_be->d_add_mrgn_val );
	}
  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog ( c_ServiceName, "*************  SFO_UPD_FUT_POS - V *************");
    fn_userlog ( c_ServiceName, "Calculating margin for future " );
  }

  /** Calculate the margin on the new underlying position **/
	i_returncode = fn_upd_mrgn( c_ServiceName,
                              ptr_st_pstn_actn,
                              ptr_st_undfut_pos_crrnt,
                              ptr_st_undfut_pos_to_be,
                              ptr_st_err_msg);
                             

  if ( i_returncode != 0 )
  {
    return FAILURE;
  }

	if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog ( c_ServiceName, "*************  After Closing Futures Position  *************");
    fn_userlog ( c_ServiceName, "Calcualted underlying level position" );
    fn_userlog ( c_ServiceName, "FPLS IWTL buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_ibuy_qty );
    fn_userlog ( c_ServiceName, "FPLS IWTL buy val      :%lf:", ptr_st_undfut_pos_to_be->d_ibuy_ord_vl );
    fn_userlog ( c_ServiceName, "FPLS IWTL sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_isell_qty );
    fn_userlog ( c_ServiceName, "FPLS IWTL sell val     :%lf:", ptr_st_undfut_pos_to_be->d_isell_ord_vl );
    fn_userlog ( c_ServiceName, "FPLS EXCH buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_exbuy_qty );
    fn_userlog ( c_ServiceName, "FPLS EXCH buy val      :%lf:", ptr_st_undfut_pos_to_be->d_exbuy_ord_vl );
    fn_userlog ( c_ServiceName, "FPLS EXCH sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_exsell_qty );
    fn_userlog ( c_ServiceName, "FPLS EXCH sell val     :%lf:", ptr_st_undfut_pos_to_be->d_exsell_ord_vl );
    fn_userlog ( c_ServiceName, "FPLS Buy exctd qty     :%ld:", ptr_st_undfut_pos_to_be->l_buy_exctd_qty );
    fn_userlog ( c_ServiceName, "FPLS Sell exctd qty    :%ld:", ptr_st_undfut_pos_to_be->l_sell_exctd_qty );
    fn_userlog ( c_ServiceName, "FPLS Open qty          :%ld:", ptr_st_undfut_pos_to_be->l_opnpstn_qty );
  }

  if( DEBUG_MSG_LVL_2 ) /*** Ver 4.6 ***/
  {
    fn_userlog ( c_ServiceName, "FPLS Original open val :%lf:", ptr_st_undfut_pos_to_be->d_org_opn_val );
    fn_userlog ( c_ServiceName, "FPLS MTMed open val    :%lf:", ptr_st_undfut_pos_to_be->d_mtm_opn_val );
    fn_userlog ( c_ServiceName, "FPLS Add Margin val    :%lf:", ptr_st_undfut_pos_to_be->d_add_mrgn_val );
	}

  /** if( DEBUG_MSG_LVL_3 ) **/
	if( DEBUG_MSG_LVL_2 ) /*** Changed to 0 in Ver 4.6 ***/
  {
    fn_userlog ( c_ServiceName, "Current margin values" );
    fn_userlog ( c_ServiceName, "FPLS Order level margin     :%lf:", ptr_st_undfut_pos_crrnt->d_ordr_mrgn );
    fn_userlog ( c_ServiceName, "FPLS Executed level margin  :%lf:", ptr_st_undfut_pos_crrnt->d_exctd_mrgn );
    fn_userlog ( c_ServiceName, "FPLS Spread level margin    :%lf:", ptr_st_undfut_pos_crrnt->d_sprd_mrgn );
    fn_userlog ( c_ServiceName, "FPLS Spread profit and loss :%lf:", ptr_st_undfut_pos_crrnt->d_sprd_pl );
    fn_userlog ( c_ServiceName, "FPLS Trade level margin     :%lf:", ptr_st_undfut_pos_crrnt->d_trd_mrgn );
    fn_userlog ( c_ServiceName, "To be margin values" );
    fn_userlog ( c_ServiceName, "FPLS Order level margin     :%lf:", ptr_st_undfut_pos_to_be->d_ordr_mrgn );
    fn_userlog ( c_ServiceName, "FPLS Executed level margin  :%lf:", ptr_st_undfut_pos_to_be->d_exctd_mrgn );
    fn_userlog ( c_ServiceName, "FPLS Spread level margin    :%lf:", ptr_st_undfut_pos_to_be->d_sprd_mrgn );
    fn_userlog ( c_ServiceName, "FPLS Spread profit and loss :%lf:", ptr_st_undfut_pos_to_be->d_sprd_pl );
    fn_userlog ( c_ServiceName, "FPLS Trade level margin     :%lf:", ptr_st_undfut_pos_to_be->d_trd_mrgn );
  }

	d_rlsd_mrgn = 0;
  strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks );

  sprintf(ptr_st_pstn_actn->c_ref_rmrks,"FUTPLS-%s-%s-%c", ptr_st_pstn_actn->c_undrlyng,
                  																			ptr_st_pstn_actn->c_expry_dt,
                  																			ptr_st_pstn_actn->c_prd_typ);

  d_diff_UOM = ptr_st_undfut_pos_crrnt->d_ordr_mrgn - ptr_st_undfut_pos_to_be->d_ordr_mrgn ;
	d_rlsd_mrgn = d_rlsd_mrgn + d_diff_UOM;

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog ( c_ServiceName, "FPLS Difference in UOM :%lf:", d_diff_UOM );
  }
 
	if ( d_diff_UOM != 0 )
  {

    i_returncode = fn_upd_limits( c_ServiceName,
                                  ptr_st_pstn_actn,
                                  ptr_st_err_msg,
                                  ORDER_MARGIN_ADJ_ON_FUTPLUS_CONV,
                                  DEBIT_WITHOUT_LIMIT,
                                  d_diff_UOM,
                                  &d_balance_amt);
    if ( i_returncode != 0 )
    {
      return i_returncode;
    }
  }

  if ( ptr_st_pstn_actn->l_cover_qty > 0 )
  {
		if(DEBUG_MSG_LVL_3)
  	{	
			fn_userlog ( c_ServiceName, "In Cover Quantity Check ");
		}

    /** The added margin, if any will be released in the processing of first leg of Future and thus  ***/
    /** will be made available to Futures Plus position creation                                     ***/

    d_diff_amv = ptr_st_undfut_pos_crrnt->d_add_mrgn_val; /** Changed for Release of add Margin **/

		/*d_rlsd_mrgn = d_rlsd_mrgn + d_diff_amv;*/

  	if( DEBUG_MSG_LVL_3 )
  	{
    	fn_userlog ( c_ServiceName, "FPLS Difference in UAMV :%lf:", d_diff_amv );
  	}

    if( d_diff_amv != 0 )
    {
			/*** Commented in ver 2.6
			EXEC SQL
        SELECT  FCM_LOT_SZ
        INTO    :l_lot_sz
        FROM    FCM_FO_CNTRCT_MSTR
        WHERE   FCM_XCHNG_CD  = :ptr_st_pstn_actn->c_xchng_cd
        AND     FCM_UNDRLYNG  = :ptr_st_pstn_actn->c_undrlyng
        AND     FCM_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ 
        AND     ROWNUM < 2;

      if ( SQLCODE != 0 && SQLCODE !=NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S31295", SQLMSG, ptr_st_err_msg->c_err_msg  );
      	return FAILURE;
      }
			********************************/

      if (DEBUG_MSG_LVL_3)  
      {
       	/***  fn_userlog(c_ServiceName,"Lot Size:%ld:",l_lot_sz);		Commented in ver 2.6 ***/
				fn_userlog ( c_ServiceName," st_cntpos_crrnt.l_opnpstn_qty  |%ld|",st_cntpos_crrnt.l_opnpstn_qty);
				fn_userlog ( c_ServiceName," ptr_st_pstn_actn->l_new_qty    |%ld|",ptr_st_pstn_actn->l_new_qty);
			}

			/*** l_lot = ptr_st_pstn_actn->l_new_qty / l_lot_sz;	Release margin partly	ver 2.6 ****/
			
			d_diff_amv = d_diff_amv / d_num_of_lots;		 									/*** Added in ver 2.6 ***/

			d_rlsd_mrgn = d_rlsd_mrgn + d_diff_amv;
			
			if(DEBUG_MSG_LVL_3)
  		{	
		  	fn_userlog ( c_ServiceName,"d_diff_amv  |%lf|",d_diff_amv);
			}

			if (d_diff_amv > 99)		/* Release Add Margin Only If it is Rs. 1 or Greater */
			{
      	i_returncode = fn_upd_limits( c_ServiceName,
        	                            ptr_st_pstn_actn,
          	                          ptr_st_err_msg,
            	                        RELEASE_OF_ADD_MARGIN_ON_FUTPLUS_CONV,
              	                      DEBIT_WITHOUT_LIMIT,
                	                    /** d_diff_amv * (-1),  commented in ver 2.6 ***/
																			d_diff_amv,							/*** Added in ver 2.6 ***/	
                  	                  &d_balance_amt);
      	if ( i_returncode != 0 )
      	{
        	return i_returncode;
      	}
				/*** In fn_upd_mrgn function we set tobe value 0 after converting all position to FutPlus ***/

				/**	ptr_st_undfut_pos_to_be->d_add_mrgn_val = ptr_st_undfut_pos_to_be->d_add_mrgn_val - d_diff_amv; ** Ver 2.6**/
			
				ptr_st_undfut_pos_to_be->d_add_mrgn_val = ptr_st_undfut_pos_crrnt->d_add_mrgn_val - d_diff_amv; /** Added Ver 2.6**/
		
			}
     }

		if( DEBUG_MSG_LVL_3 )   /*** Ver 2.6 ***/
  	{
    	fn_userlog(c_ServiceName,"Additional Margin |%lf|",ptr_st_undfut_pos_to_be->d_add_mrgn_val);
  	}

 			/*** The profit/loss amount will always come as zero as we are closing the open position by base   ***/
      /*** price, the following activity is done in order to check the same and can be removed after testing ***/

   	 if (ptr_st_pstn_actn->c_trnsctn_flw == BUY )
     {
       d_pl_amt = ((st_cntpos_old.d_mtm_opn_val / st_cntpos_old.l_opnpstn_qty ) - d_exec_rt) * ptr_st_pstn_actn->l_cover_qty ;  
   	 }
   	 else
     {
       d_pl_amt = (d_exec_rt - (st_cntpos_old.d_mtm_opn_val / st_cntpos_old.l_opnpstn_qty) ) * ptr_st_pstn_actn->l_cover_qty ;   
		 }
		 d_rlsd_mrgn = d_rlsd_mrgn + d_pl_amt;

   	 if( DEBUG_MSG_LVL_3 )
   	 {
     		fn_userlog (c_ServiceName,"FPLS Profit/Loss at contract level on execution :%lf:", d_pl_amt );
   	 }

   	 if ( d_pl_amt != 0 )
     {
        sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s",
                  ptr_st_pstn_actn->c_undrlyng,
                  ptr_st_pstn_actn->c_expry_dt);
       
	  		/***** Ver 3.7 NRI FNO TDS starts *****/

        /**** if(strncmp(ptr_st_pstn_actn->c_cln_mtch_accnt, "751", 3) == 0)   ** Commented in Ver 4.4 ****/

        /****** Added in Ver 4.4 *******/

        MEMSET(sql_iai_type.arr);
        EXEC SQL
        SELECT  IAI_TYPE
        INTO    :sql_iai_type
        FROM    IAI_INFO_ACCOUNT_INFO
        WHERE   IAI_MATCH_ACCOUNT_NO  = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

      	if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
      	{
        	fn_userlog(c_ServiceName, "CUST TYPE 3 IS :%s:", sql_iai_type.arr );
				}

        if ( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S31300", SQLMSG, ptr_st_err_msg->c_err_msg  );
          return FAILURE;
        }
        /****** Added Ver 4.4 Ends *****/

        if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") == 0)   /****** Check Added in Ver 4.4 *****/
        {
            strcpy(c_narration_id,TDS_NRI);
	    			strcpy(c_reason_cd,"Profit Loss on Cover Leg");

            i_returncode = fn_tds( c_ServiceName,
                                   ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    c_reason_cd,
                                    DEBIT_WITHOUT_LIMIT,
                                    d_pl_amt,
                                    &d_balance_amt);

            if ( i_returncode != 0 )
            {
              return i_returncode;
            }
        }
        /***** Ver 3.7 NRI FNO TDS ends*****/

		 i_returncode = fn_upd_limits( c_ServiceName,
                                   ptr_st_pstn_actn,
                                   ptr_st_err_msg,
                                   /* PROFIT_LOSS_ON_COVER_LEG_FUTPLUS_CONV, Commented in Ver 3.2 ***/
																	 PROFIT_LOSS_ON_COVER_LEG,                /** Added in Ver 3.2  ***/
                                   DEBIT_WITHOUT_LIMIT,
                                   d_pl_amt,
                                   &d_balance_amt);
        
		 if ( i_returncode != 0 )
     {
        return i_returncode;
     }
     strcpy ( ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks );
    }
   } /***** if-end of cover qty >  0 *******/

    /*** In case of Joint conversion, in the processing of first leg itself, the entire trade margin is     ***/
    /*** released, and is now available for Futures plus Position.                                               ***/
    /*** Only the excessive order margin  to be charged in second leg of Futures will be blocked/released***/

    d_diff_UTM = ptr_st_undfut_pos_crrnt->d_trd_mrgn - ptr_st_undfut_pos_to_be->d_trd_mrgn;
		d_rlsd_mrgn = d_rlsd_mrgn + d_diff_UTM;

  	if( DEBUG_MSG_LVL_3 )
  	{
    	fn_userlog ( c_ServiceName, " FPLS Difference in UTM :%lf:", d_diff_UTM );
  	}

    if ( d_diff_UTM != 0 )
    {
      i_returncode = fn_upd_limits( c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    TRD_MARGIN_ADJ_ON_FUTPLUS_CONV,
                                    DEBIT_WITHOUT_LIMIT,
                                    d_diff_UTM,
                                    &d_balance_amt);
      if ( i_returncode != 0 )
      {
        return i_returncode;
      }
    }

    strcpy ( ptr_st_pstn_actn->c_ref_rmrks, c_tmp_rmrks );

    /*** Add margin value is made zero, as we have closed the net open position in the contract                  **/
    /*** The tobe values are needed to assign to current as we are not updating the fup in processing of 1st leg **/

    ptr_st_undfut_pos_crrnt->d_add_mrgn_val = 0;
    ptr_st_undfut_pos_crrnt->d_exctd_mrgn 	= ptr_st_undfut_pos_to_be->d_exctd_mrgn;
    ptr_st_undfut_pos_crrnt->d_sprd_mrgn 		= ptr_st_undfut_pos_to_be->d_sprd_mrgn;
    ptr_st_undfut_pos_crrnt->d_sprd_pl 			= ptr_st_undfut_pos_to_be->d_sprd_pl;
    ptr_st_undfut_pos_crrnt->d_trd_mrgn 		= ptr_st_undfut_pos_to_be->d_trd_mrgn;
    ptr_st_undfut_pos_crrnt->d_ordr_mrgn 		= ptr_st_undfut_pos_to_be->d_ordr_mrgn;

    ptr_st_undfut_pos_to_be->d_imtm_opn_val 		= 0;
    ptr_st_undfut_pos_to_be->d_imtm_exctd_mrgn  = 0;
    ptr_st_undfut_pos_to_be->d_imtm_sprd_mrgn 	= 0;
    ptr_st_undfut_pos_to_be->d_imtm_sprd_pl 		= 0;
    ptr_st_undfut_pos_to_be->d_imtm_trd_mrgn 		= 0;
    ptr_st_undfut_pos_to_be->d_mm_exctd_mrgn 		= 0;
    ptr_st_undfut_pos_to_be->d_mm_sprd_mrgn 		= 0;
    ptr_st_undfut_pos_to_be->d_mm_sprd_pl 			= 0;

		if(DEBUG_MSG_LVL_3)
  	{
    	fn_userlog(c_ServiceName," The futPLUS_creation flg is:%c:",c_futpls_create );
    	fn_userlog(c_ServiceName," The Open Pstn flg is:%c:",st_cntpos_crrnt.c_opnpstn_flw);
 		}

		if( st_cntpos_crrnt.c_opnpstn_flw != 'N'  && c_futpls_create =='Y' )
    {

      /************************************************************************************/
      /** Initialize the position action which will be used for creating futures plus position**/
      /************************************************************************************/

      st_pstn_actn_fut.c_prd_typ = FUTURES; /** In contract Master we have differant tags for identify future & future plus */

      strcpy( st_pstn_actn_fut.c_cln_mtch_accnt , ptr_st_pstn_actn->c_cln_mtch_accnt);
      strcpy( st_pstn_actn_fut.c_xchng_cd 			, ptr_st_pstn_actn->c_xchng_cd);
      strcpy( st_pstn_actn_fut.c_undrlyng 			, ptr_st_pstn_actn->c_undrlyng);

      strcpy( st_pstn_actn_fut.c_expry_dt 			, st_cntpos_crrnt.c_expry_dt );
      st_pstn_actn_fut.c_exrc_typ = st_cntpos_crrnt.c_exrc_typ;

			if( DEBUG_MSG_LVL_3 )
  		{	
				fn_userlog(c_ServiceName,"st_pstn_actn_fut.c_cln_mtch_accnt |%s|",st_pstn_actn_fut.c_cln_mtch_accnt);
				fn_userlog(c_ServiceName,"st_pstn_actn_fut.c_xchng_cd       |%s|",st_pstn_actn_fut.c_xchng_cd);
				fn_userlog(c_ServiceName,"st_pstn_actn_fut.c_undrlyng       |%s|",st_pstn_actn_fut.c_undrlyng);
				fn_userlog(c_ServiceName," st_pstn_actn_fut.c_expry_dt             |%s|",st_pstn_actn_fut.c_expry_dt);
				fn_userlog(c_ServiceName," st_pstn_actn_fut.c_exrc_typ             |%c|",st_pstn_actn_fut.c_exrc_typ);
				fn_userlog(c_ServiceName," st_pstn_actn_fut.c_prd_typ              |%c|",st_pstn_actn_fut.c_prd_typ);
			}

			/*** Commented In Ver 4.1 ***

      EXEC SQL
        SELECT  FCM_FP_CNTRCT_TAG
        INTO    :c_cntrct_tag
        FROM    FCM_FO_CNTRCT_MSTR
        WHERE   FCM_XCHNG_CD        = :st_pstn_actn_fut.c_xchng_cd
        AND     FCM_PRDCT_TYP       = :st_pstn_actn_fut.c_prd_typ
        AND     FCM_UNDRLYNG        = :st_pstn_actn_fut.c_undrlyng
        AND     FCM_EXPRY_DT        = to_date( :st_pstn_actn_fut.c_expry_dt,
                                              'dd-mon-yyyy' )
        AND     FCM_EXER_TYP        = :st_pstn_actn_fut.c_exrc_typ;

			*** Ver 4.1 Ends ***/

			/*** Ver 4.1 Starts ***/

			EXEC SQL
        SELECT  FTQ_FP_CNTRCT_TAG
        INTO    :c_cntrct_tag
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD        = :st_pstn_actn_fut.c_xchng_cd
        AND     FTQ_PRDCT_TYP       = :st_pstn_actn_fut.c_prd_typ
        AND     FTQ_UNDRLYNG        = :st_pstn_actn_fut.c_undrlyng
        AND     FTQ_EXPRY_DT        = to_date( :st_pstn_actn_fut.c_expry_dt,
                                              'dd-mon-yyyy' )
        AND     FTQ_EXER_TYP        = :st_pstn_actn_fut.c_exrc_typ;

			/*** Ver 4.1 Starts ***/

      if ( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31305", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }

      st_pstn_actn_fut.c_cntrct_tag  = c_cntrct_tag;
      st_pstn_actn_fut.c_trnsctn_flw = st_cntpos_crrnt.c_opnpstn_flw;
      st_pstn_actn_fut.l_orgnl_qty   = 0;
      st_pstn_actn_fut.l_orgnl_rt    = 0;
      st_pstn_actn_fut.l_new_qty     = 0;
      st_pstn_actn_fut.l_new_rt      = 0;

			/* partial convertion of future to future plus*/
			/* Transaction flow are Opposite for FFF Insert **/

      if ( ptr_st_pstn_actn->l_actn_typ == CLOSE_PART_FUT)
      {
        if( st_pstn_actn_fut.c_trnsctn_flw == BUY )
        {
          st_pstn_actn_fut.l_exec_qty = ptr_st_pstn_actn->l_new_qty;
          /* c_trn_flw = SELL; Commented in ver 3.3 ***/
					c_trn_flw = BUY;   /*** Added in Ver 3.3 ***/
        }
        else
        {
          st_pstn_actn_fut.l_exec_qty = -1*( ptr_st_pstn_actn->l_new_qty );
          /* c_trn_flw = BUY;  Commented in ver 3.3 ***/
          c_trn_flw = SELL;			/*** Added in Ver 3.3 ***/
        }
      }
      else
      {
        if( st_pstn_actn_fut.c_trnsctn_flw == BUY )
        {
          st_pstn_actn_fut.l_exec_qty = st_cntpos_crrnt.l_opnpstn_qty;
          /* c_trn_flw = SELL; Commented in ver 3.3 ***/
          c_trn_flw = BUY;		/*** Added in Ver 3.3 ***/
        }
        else
        {
          st_pstn_actn_fut.l_exec_qty = -1*( st_cntpos_crrnt.l_opnpstn_qty );
          /* c_trn_flw = BUY;   Commented in ver 3.3 ***/
          c_trn_flw = SELL;			/*** Added in Ver 3.3 ***/
        }
      }

      st_pstn_actn_fut.l_actn_typ = CREATE_FUTPLS;

      /* END  Ver 1.5 for partial convertion of future to future plus*/

      c_prdct_type = FUTURES;   /** For Inserting in FFF converted position **/
      l_close_qty  = st_pstn_actn_fut.l_exec_qty;
      st_pstn_actn_fut.l_exec_rt      = ptr_st_pstn_actn->l_exec_rt;
      st_pstn_actn_fut.c_nkd_blkd_flg = c_conv_chk;

      st_pstn_actn_fut.l_fresh_qty  		= 0;
      st_pstn_actn_fut.l_cover_qty  		= 0;
      st_pstn_actn_fut.d_add_mrgn_amt   = 0;
      st_pstn_actn_fut.l_curr_rt 				= 0;
      ptr_st_pstn_actn->l_fresh_qty  		= 0;
      ptr_st_pstn_actn->l_cover_qty  		= 0;
		
    if( ptr_st_pstn_actn->c_nkd_blkd_flg == JOINT_CONVERSION )
    {
        c_conv_chk  = SINGLE_CONVERSION;
        c_limit_chk = 'Y';
    }

    if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog(c_ServiceName,"Inputs Passed for Future plus Creation");
      fn_userlog(c_ServiceName,"Action Type  :%ld:",st_pstn_actn_fut.l_actn_typ);
      fn_userlog(c_ServiceName,"Exchng cd    :%s:",st_pstn_actn_fut.c_xchng_cd);
      fn_userlog(c_ServiceName,"Prdct typ    :%c:",st_pstn_actn_fut.c_prd_typ);
      fn_userlog(c_ServiceName,"Undrlyng     :%s:",st_pstn_actn_fut.c_undrlyng);
      fn_userlog(c_ServiceName,"Expiry Date  :%s:",st_pstn_actn_fut.c_expry_dt);
      fn_userlog(c_ServiceName,"Exer typ     :%c:",st_pstn_actn_fut.c_exrc_typ);
      fn_userlog(c_ServiceName,"Cntrct tag   :%c:",st_pstn_actn_fut.c_cntrct_tag);
      fn_userlog(c_ServiceName,"Trd flw      :%c:",st_pstn_actn_fut.c_trnsctn_flw);
      fn_userlog(c_ServiceName,"Exe Qty      :%ld:",st_pstn_actn_fut.l_exec_qty);
      fn_userlog(c_ServiceName,"Exe Rate     :%ld:",st_pstn_actn_fut.l_exec_rt);
      fn_userlog(c_ServiceName,"Spl Flag     :%c:",st_pstn_actn_fut.c_nkd_blkd_flg);
      fn_userlog(c_ServiceName,"Spl Flag for 2nd leg   :%c:",ptr_st_pstn_actn->c_nkd_blkd_flg);
			fn_userlog(c_ServiceName,"Product Type |%c|",c_prdct_type);
    }

			st_pstn_actn_fut.c_prd_typ = 'P'; /** Product type P for Creating Future PLUS Position **/

      i_returncode  = fn_call_actn_create_futpls( c_ServiceName,
                                                  &st_pstn_actn_fut,
																									d_rlsd_mrgn,
                                                  ptr_st_err_msg 
																								);
      if ( i_returncode == -1 )
      {
         return FAILURE;
      }
      
	/**insert record of future closed position,  this is needed to keep Future portfolio screen in sync ****/

 EXEC SQL
    INSERT INTO FFF_FO_FUT_FPLSCNV
           (
              FFF_CLM_MTCH_ACCNT,
              FFF_XCHNG_CD,
              FFF_PRDCT_TYP,
              FFF_INDSTK,
              FFF_UNDRLYNG,
              FFF_EXPRY_DT,
              FFF_EXER_TYP,
              FFF_OPT_TYP,
              FFF_STRK_PRC,
              FFF_ORDR_FLW,
              FFF_CLS_QTY,
              FFF_CLS_RT,
              FFF_CLS_TM,
              FFF_CNTRCT_TAG,
              FFF_UPLD_FLG,
              FFF_CHANNEL     /*** Ver 4.3 ***/
           )
           VALUES
           (
              :st_pstn_actn_fut.c_cln_mtch_accnt,
              :st_pstn_actn_fut.c_xchng_cd,
              :c_prdct_type,
              :st_pstn_actn_fut.c_ctgry_indstk,
              :st_pstn_actn_fut.c_undrlyng,
              :st_pstn_actn_fut.c_expry_dt,
              :st_pstn_actn_fut.c_exrc_typ,
              :st_pstn_actn_fut.c_opt_typ,
              :st_pstn_actn_fut.l_strike_prc,
              :c_trn_flw,
              :l_close_qty,
              :d_exec_rt,  
              sysdate,
              :st_cntpos_crrnt.c_cntrct_tag,
              'N',
              decode(:st_pstn_actn_fut.c_user_id,'system','SYS','WEB')    /*** Ver 4.3 ***/
           );

  	if( SQLCODE != 0 )
  	{
     	fn_errlog(c_ServiceName, "S31310", SQLMSG, ptr_st_err_msg->c_err_msg );
     	return FAILURE;
  	}
  	if( DEBUG_MSG_LVL_3 )
  	{
    	fn_userlog(c_ServiceName,"Inserted record into FFF:%s:",st_pstn_actn_fut.c_cln_mtch_accnt);
  	}

 	}

 } /**End of while loop **/

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog( c_ServiceName,"User Id:%s:",ptr_st_pstn_actn->c_user_id);
    fn_userlog( c_ServiceName,"Limit Check Flag:%c:",c_limit_chk);
    fn_userlog( c_ServiceName,"Session Id:%c:",ptr_st_pstn_actn->l_session_id);
  }
	/*** Discuss ***/
  /****************************************************************************************************/
  /***** The following portion gets the Limits avaliable for the user in case of Joint conversion  ****/
  /***** and checks whether it is sufficient to support conversion to Futures , the same check     ****/
  /***** need not be performed with system                                                         ****/
  /***** This case may arrive in Joint conversion, when first leg conversion cause huge debit which****/
  /***** make limit negative and  second leg yields credit. The second credit will not help in     ****/
  /***** debit when limit check, hence there is mandate of following check                         ****/
  /****************************************************************************************************/


  if( ( c_limit_chk == 'Y')  && ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) && ( ptr_st_pstn_actn->l_session_id != 0 ))
  {
  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog( c_ServiceName,"Checking Limit Available with client");
  }
    memset(&st_gt_lmt,'\0' , sizeof( struct vw_gt_lmt_dtls) );
    strcpy(st_gt_lmt.c_xchng_cd , ptr_st_pstn_actn->c_xchng_cd );

    EXEC SQL
      /** SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY') Commented in Ver 2.9 **/
      /** SELECT  to_char( GREATEST(exg_nxt_trd_dt,exg_tmp_trd_dt), 'DD-Mon-YYYY' )* Ver 2.9 Reverted In Ver 2.9 Bug Fix **/
      SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY') /** Reverted In Ver 2.9 Bug Fix **/
      INTO   :c_trade_dt
      FROM   EXG_XCHNG_MSTR
      WHERE  EXG_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
      AND    EXG_MKT_TYP = 'D';

    if ( SQLCODE != 0 )
    {
       fn_errlog(c_ServiceName, "S31315", SQLMSG, ptr_st_err_msg->c_err_msg );
       return FAILURE;
    }

    strcpy(st_gt_lmt.c_trd_dt, (char *) c_trade_dt.arr);
    strcpy(st_gt_lmt.c_cln_mtch_accnt, ptr_st_pstn_actn->c_cln_mtch_accnt);
    l_ip_len = (long) sizeof ( struct vw_gt_lmt_dtls);
    st_gt_lmt.c_rqst_typ = LIMIT_X;
    strcpy( st_gt_lmt.c_rout_crt, ptr_st_pstn_actn->c_rout_crt);
    /**** Commented in Ver 3.9 Starts Here **************************************
    i_returncode = fn_call_svc( c_ServiceName, 
																ptr_st_err_msg->c_err_msg, &st_gt_lmt, 
																&st_gt_lmt,
                                "vw_gt_lmt_dtls", 
																"vw_gt_lmt_dtls", 
																l_ip_len,
                                l_ip_len, 
																0, 
																"SFO_GET_LIMITS" );

    if ( i_returncode == -1 )
    {
      fn_userlog(c_ServiceName,"SFO_GET_LIMITS FAIL  ");
      fn_errlog(c_ServiceName, "S31320", DEFMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }
    ******************** Ver 3.9 Ends Here *************************************/

    /***** Ver 3.9 Starts here *********/
     i_returncode = fo_get_trd_limit(c_ServiceName,
                                    st_gt_lmt.c_cln_mtch_accnt,
                                    st_gt_lmt.c_trd_dt,
                                    st_gt_lmt.c_rqst_typ,
                                    st_gt_lmt.c_xchng_cd,
                                    st_gt_lmt.l_gid,
                                    &st_gt_lmt.d_amt,
                                    ptr_st_err_msg->c_err_msg 
                                    );
     if( i_returncode != 0)
     {
      fn_errlog(c_ServiceName, "S31325", LIBMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE; 
     }
    /***** Ver 3.9 Ends Here ***********/


  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog( c_ServiceName,"Limit Calculated :%lf:",st_gt_lmt.d_amt);
  }

	if( st_gt_lmt.d_amt < 0 )
  {
    if(DEBUG_MSG_LVL_2) /*** Ver 4.6  ***/
    {
    	fn_userlog(c_ServiceName,"Final check for Joint converted orders limit is found Insufficient [%lf]", st_gt_lmt.d_amt);
		}

    fn_userlog(c_ServiceName,"Cannot convert to Futures as limit has gone negative.");
    strcpy( ptr_st_err_msg->c_err_msg,"Available Cash Limit is unsufficient to convert the trade to Futures.");
    fn_errlog(c_ServiceName, "S31330", LIBMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }
  
	if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog( c_ServiceName,"Limit Check Successful for Match Accnt:%s:%lf:", st_gt_lmt.c_cln_mtch_accnt,st_gt_lmt.d_amt);
  }

 }

	return SUCCESS;

}

/* Ver 2.4 Create New Future PLUS Position */

int fn_call_actn_create_futpls( char *c_ServiceName,
                             		struct vw_pstn_actn *ptr_st_pstn_actn,
																double d_rlsd_mrgn,
                             		struct vw_err_msg *ptr_st_err_msg)
{
  int i_returncode;

  double d_pl_amt;
  double d_diff_UEM;
  double d_diff_amv;
  double d_diff_UTM;
  double d_diff_UOM;
  double d_diff_UAM;
  double d_UTM_amt;
  double d_balance_amt;
  double d_bal_to_apply;
  double d_avl_mrgn_fut;
  double d_addnl_mrgn_needed;
	double d_blkd_mrgn   = 0.0;
	double d_undrlyng_pl = 0.0;
	double d_cntrct_pl   = 0.0;
	double d_ltp         = 0.0;
	double d_diff_rlsd_blkd = 0.0;
	double d_max_diff				= 0.0;
  double d_min_diff				= 0.0;
	double d_num_of_lots    = 0.0;						/*** Ver 2.6 ***/
   char c_ucc_cd[13];    /*ver 5.6*/
  char c_narration_id[4];
	char c_reason_cd [ 2000 ];			/*** Ver 3.7 ***/
  char c_dr_without_lmt_flg;
  char c_pos_avl;
  char c_upos_avl;
  char c_tmp_rmrks [ 133 ] ;

	EXEC SQL BEGIN DECLARE SECTION;

 	char  c_cntrct_tag;
 	char  c_mtm_flag;
 	char  sql_cln_mtch_accnt[11];
 	char  sql_xchng_cd[4];
 	char  sql_prd_typ;
 	char  sql_cntrct_tag;
 	char  sql_undrlyng[7];
 	varchar c_exp_dt[LEN_DATE];
	varchar c_trade_dt[12];
 	double  d_mrgn_blkd = 0.0;

	sql_cursor  sys_cursor;             /* a cursor variable */
  EXEC SQL INCLUDE "table/iai_info_account_info.h"; /* Ver 4.4 */


  /** Current underlying level position **/
  struct vw_undfut_pos st_undfut_pos_crrnt;

  /** Undelying level position to be **/
  struct vw_undfut_pos st_undfut_pos_to_be;

  /** Current contract level positions of other contracts in the same  **/
  /** underlying                                                       **/
  struct vw_cntfut_pos st_cntpos_crrnt;

  /** Copy of contract level position on which action is to be done taken **/
  /** before applying the action                                          **/
  struct vw_cntfut_pos st_cntpos_old;

  /** Contract level position on which action is to be done **/
  struct vw_cntfut_pos st_cntpos_md_rc;

 EXEC SQL END DECLARE SECTION;

	if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog ( c_ServiceName, "*************  fn_call_actn_create_futpls - I *************");
    fn_userlog ( c_ServiceName,"FUT c_user_id        :%s:", ptr_st_pstn_actn->c_user_id );
    fn_userlog ( c_ServiceName,"FUT l_session_id     :%ld:", ptr_st_pstn_actn->l_session_id );
    fn_userlog ( c_ServiceName,"FUT c_cln_mtch_accnt :%s:", ptr_st_pstn_actn->c_cln_mtch_accnt );
    fn_userlog ( c_ServiceName,"FUT c_xchng_cd       :%s:", ptr_st_pstn_actn->c_xchng_cd );
    fn_userlog ( c_ServiceName,"FUT c_prd_typ        :%c:", ptr_st_pstn_actn->c_prd_typ );
    fn_userlog ( c_ServiceName,"FUT c_undrlyng       :%s:", ptr_st_pstn_actn->c_undrlyng );
    fn_userlog ( c_ServiceName,"FUT c_expry_dt       :%s:", ptr_st_pstn_actn->c_expry_dt );
    fn_userlog ( c_ServiceName,"FUT c_exrc_typ       :%c:", ptr_st_pstn_actn->c_exrc_typ );
    fn_userlog ( c_ServiceName,"FUT l_actn_typ       :%ld:", ptr_st_pstn_actn->l_actn_typ );
    fn_userlog ( c_ServiceName,"FUT c_trnsctn_flw    :%c:", ptr_st_pstn_actn->c_trnsctn_flw );
    fn_userlog ( c_ServiceName,"FUT l_orgnl_qty      :%ld:", ptr_st_pstn_actn->l_orgnl_qty );
    fn_userlog ( c_ServiceName,"FUT l_orgnl_rt       :%ld:", ptr_st_pstn_actn->l_orgnl_rt );
    fn_userlog ( c_ServiceName,"FUT l_new_qty        :%ld:", ptr_st_pstn_actn->l_new_qty );
    fn_userlog ( c_ServiceName,"FUT l_new_rt         :%ld:", ptr_st_pstn_actn->l_new_rt );
    fn_userlog ( c_ServiceName,"FUT l_exec_qty       :%ld:", ptr_st_pstn_actn->l_exec_qty );
    fn_userlog ( c_ServiceName,"FUT l_exec_rt        :%ld:", ptr_st_pstn_actn->l_exec_rt );
    fn_userlog ( c_ServiceName,"FUT l_fresh_qty      :%ld:", ptr_st_pstn_actn->l_fresh_qty );
    fn_userlog ( c_ServiceName,"FUT l_cover_qty      :%ld:", ptr_st_pstn_actn->l_cover_qty );
    fn_userlog ( c_ServiceName,"FUT d_add_mrgn_amt   :%lf:", ptr_st_pstn_actn->d_add_mrgn_amt );
    fn_userlog ( c_ServiceName,"FUT l_curr_rt        :%ld:", ptr_st_pstn_actn->l_curr_rt );
    fn_userlog ( c_ServiceName,"FUT c_ref_rmrks      :%s:", ptr_st_pstn_actn->c_ref_rmrks );
    fn_userlog ( c_ServiceName,"FUT c_cntrct_tag     :%c:", ptr_st_pstn_actn->c_cntrct_tag );
  }

  /******** Get underlying level position for the Exchange, client, ********/
  /******** underlying, tag combination into UPOS_crrnt             ********/
  c_upos_avl = 'Y';
	
	EXEC SQL
    SELECT  FUP_CLM_MTCH_ACCNT,
            FUP_XCHNG_CD,
            FUP_PRDCT_TYP,
            FUP_INDSTK,
            FUP_UNDRLYNG,
            FUP_CNTRCT_TAG,
            FUP_UIBUY_QTY,
            FUP_UIBUY_VAL,
            FUP_UISELL_QTY,
            FUP_UISELL_VAL,
            FUP_UEXBUY_QTY,
            FUP_UEXBUY_VAL,
            FUP_UEXSELL_QTY,
            FUP_UEXSELL_VAL,
            FUP_UBUY_EXCTD_QTY,
            FUP_USELL_EXCTD_QTY,
            FUP_UOPNPSTN_FLW,
            FUP_UOPNPSTN_QTY,
            FUP_UOPNPSTN_VAL,
            FUP_UMTM_OPN_VAL,
            FUP_ADD_MRGN_VAL,
            FUP_UORDR_MRGN,
            FUP_UEXCTD_MRGN,
            FUP_USPREAD_MRGN,
            FUP_USPREAD_PNL,
            FUP_UTRD_MRGN,
            NVL(FUP_MTM_FLG,'O'),
            NVL(FUP_UMIN_TRD_MRGN,0)
    INTO    :st_undfut_pos_crrnt.c_cln_mtch_accnt,
            :st_undfut_pos_crrnt.c_xchng_cd,
            :st_undfut_pos_crrnt.c_prd_typ,
            :st_undfut_pos_crrnt.c_ctgry_indstk,
            :st_undfut_pos_crrnt.c_undrlyng,
            :st_undfut_pos_crrnt.c_cntrct_tag,
            :st_undfut_pos_crrnt.l_ibuy_qty,
            :st_undfut_pos_crrnt.d_ibuy_ord_vl,
            :st_undfut_pos_crrnt.l_isell_qty,
            :st_undfut_pos_crrnt.d_isell_ord_vl,
            :st_undfut_pos_crrnt.l_exbuy_qty,
            :st_undfut_pos_crrnt.d_exbuy_ord_vl,
            :st_undfut_pos_crrnt.l_exsell_qty,
            :st_undfut_pos_crrnt.d_exsell_ord_vl,
            :st_undfut_pos_crrnt.l_buy_exctd_qty,
            :st_undfut_pos_crrnt.l_sell_exctd_qty,
            :st_undfut_pos_crrnt.c_opnpstn_flw,
            :st_undfut_pos_crrnt.l_opnpstn_qty,
            :st_undfut_pos_crrnt.d_org_opn_val,
            :st_undfut_pos_crrnt.d_mtm_opn_val,
            :st_undfut_pos_crrnt.d_add_mrgn_val,
            :st_undfut_pos_crrnt.d_ordr_mrgn,
            :st_undfut_pos_crrnt.d_exctd_mrgn,
            :st_undfut_pos_crrnt.d_sprd_mrgn,
            :st_undfut_pos_crrnt.d_sprd_pl,
            :st_undfut_pos_crrnt.d_trd_mrgn,
					  :c_mtm_flag,
            :st_undfut_pos_crrnt.d_mm_trd_mrgn
    FROM    FUP_FUT_UNDRLYNG_PSTN
    WHERE FUP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND   FUP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
    AND   FUP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
    AND   FUP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
    AND   FUP_CNTRCT_TAG      = :ptr_st_pstn_actn->c_cntrct_tag;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31335", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

	/**** If a position doesnot exists, initialise the position values to ****/
  /**** default                                                         ****/
  
	if ( SQLCODE == NO_DATA_FOUND )
  {
    if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
    {
			fn_userlog(c_ServiceName,"Inside NO DATA found FUP in F+");
		}
    strcpy( st_undfut_pos_crrnt.c_cln_mtch_accnt, ptr_st_pstn_actn->c_cln_mtch_accnt );
    strcpy( st_undfut_pos_crrnt.c_xchng_cd			, ptr_st_pstn_actn->c_xchng_cd );
    strcpy( st_undfut_pos_crrnt.c_undrlyng			, ptr_st_pstn_actn->c_undrlyng );
    st_undfut_pos_crrnt.c_prd_typ  			=	ptr_st_pstn_actn->c_prd_typ;
    st_undfut_pos_crrnt.c_ctgry_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
    st_undfut_pos_crrnt.c_cntrct_tag 		= ptr_st_pstn_actn->c_cntrct_tag;
    st_undfut_pos_crrnt.l_ibuy_qty 			= 0;
    st_undfut_pos_crrnt.d_ibuy_ord_vl 	= 0;
    st_undfut_pos_crrnt.l_isell_qty 		= 0;
    st_undfut_pos_crrnt.d_isell_ord_vl 	= 0;
    st_undfut_pos_crrnt.l_exbuy_qty 		= 0;
    st_undfut_pos_crrnt.d_exbuy_ord_vl 	= 0;
    st_undfut_pos_crrnt.l_exsell_qty 		=	0;
    st_undfut_pos_crrnt.d_exsell_ord_vl = 0;
    st_undfut_pos_crrnt.l_buy_exctd_qty = 0;
    st_undfut_pos_crrnt.l_sell_exctd_qty = 0;
    st_undfut_pos_crrnt.c_opnpstn_flw 	= 'N';
    st_undfut_pos_crrnt.l_opnpstn_qty 	= 0;
    st_undfut_pos_crrnt.d_org_opn_val 	= 0;
    st_undfut_pos_crrnt.d_mtm_opn_val 	= 0;
    st_undfut_pos_crrnt.d_add_mrgn_val 	= 0;
    st_undfut_pos_crrnt.l_opn_buyqty 		= 0;
    st_undfut_pos_crrnt.l_opn_sellqty 	= 0;
    st_undfut_pos_crrnt.d_ibuy_mrgn 		= 0;
    st_undfut_pos_crrnt.d_isell_mrgn 		= 0;
    st_undfut_pos_crrnt.d_exbuy_mrgn 		= 0;
    st_undfut_pos_crrnt.d_exsell_mrgn 	= 0;
    st_undfut_pos_crrnt.d_ordr_mrgn 		=	0;
    st_undfut_pos_crrnt.d_exctd_mrgn    = 0;
    st_undfut_pos_crrnt.d_sprd_mrgn     = 0;
    st_undfut_pos_crrnt.d_sprd_pl       = 0;
    st_undfut_pos_crrnt.d_trd_mrgn      = 0;
    st_undfut_pos_crrnt.c_oprn_typ      = '*';
    st_undfut_pos_crrnt.d_ordr_mrgn     = 0;
    st_undfut_pos_crrnt.d_imtm_opn_val  = 0;
    st_undfut_pos_crrnt.d_imtm_exctd_mrgn = 0;
    st_undfut_pos_crrnt.d_imtm_sprd_mrgn  = 0;
    st_undfut_pos_crrnt.d_imtm_sprd_pl    = 0;
    st_undfut_pos_crrnt.d_imtm_trd_mrgn   = 0;
    st_undfut_pos_crrnt.d_mm_exctd_mrgn   = 0;
    st_undfut_pos_crrnt.d_mm_sprd_mrgn 		= 0;
    st_undfut_pos_crrnt.d_mm_sprd_pl 			= 0;
    st_undfut_pos_crrnt.d_mm_trd_mrgn 		= 0;
    c_mtm_flag = 'O';
    c_upos_avl = 'N';
  }

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog ( c_ServiceName, "Getting the current underlying position in F+" );
    fn_userlog ( c_ServiceName, "FUT IWTL buy qty      :%ld:", st_undfut_pos_crrnt.l_ibuy_qty );
    fn_userlog ( c_ServiceName, "FUT IWTL buy val      :%lf:", st_undfut_pos_crrnt.d_ibuy_ord_vl );
    fn_userlog ( c_ServiceName, "FUT IWTL sell qty     :%ld:", st_undfut_pos_crrnt.l_isell_qty );
    fn_userlog ( c_ServiceName, "FUT IWTL sell val     :%lf:", st_undfut_pos_crrnt.d_isell_ord_vl );
    fn_userlog ( c_ServiceName, "FUT EXCH buy qty      :%ld:", st_undfut_pos_crrnt.l_exbuy_qty );
    fn_userlog ( c_ServiceName, "FUT EXCH buy val      :%lf:", st_undfut_pos_crrnt.d_exbuy_ord_vl );
    fn_userlog ( c_ServiceName, "FUT EXCH sell qty     :%ld:", st_undfut_pos_crrnt.l_exsell_qty );
    fn_userlog ( c_ServiceName, "FUT EXCH sell val     :%lf:", st_undfut_pos_crrnt.d_exsell_ord_vl );
    fn_userlog ( c_ServiceName, "FUT Buy exctd qty     :%ld:", st_undfut_pos_crrnt.l_buy_exctd_qty );
    fn_userlog ( c_ServiceName, "FUT Sell exctd qty    :%ld:", st_undfut_pos_crrnt.l_sell_exctd_qty );
    fn_userlog ( c_ServiceName, "FUT Open qty          :%ld:", st_undfut_pos_crrnt.l_opnpstn_qty );
  }

  if( DEBUG_MSG_LVL_2 ) /*** Ver 4.6 ***/
  {
    fn_userlog ( c_ServiceName, "FUT Original open val :%lf:", st_undfut_pos_crrnt.d_org_opn_val );
    fn_userlog ( c_ServiceName, "FUT MTMed open val    :%lf:", st_undfut_pos_crrnt.d_mtm_opn_val );
    fn_userlog ( c_ServiceName, "FUT Add Margin val    :%lf:", st_undfut_pos_crrnt.d_add_mrgn_val );
	}
	/******** Set UPOS_to_be fields to default ********/

  strcpy( st_undfut_pos_to_be.c_cln_mtch_accnt, ptr_st_pstn_actn->c_cln_mtch_accnt );
  strcpy( st_undfut_pos_to_be.c_xchng_cd, 			ptr_st_pstn_actn->c_xchng_cd );
  strcpy( st_undfut_pos_to_be.c_undrlyng, 			ptr_st_pstn_actn->c_undrlyng );
  st_undfut_pos_to_be.c_prd_typ  				= ptr_st_pstn_actn->c_prd_typ;
  st_undfut_pos_to_be.c_ctgry_indstk  	= ptr_st_pstn_actn->c_ctgry_indstk;
  st_undfut_pos_to_be.c_cntrct_tag 			= ptr_st_pstn_actn->c_cntrct_tag;
  st_undfut_pos_to_be.l_ibuy_qty 				= 0;
  st_undfut_pos_to_be.d_ibuy_ord_vl 		= 0;
  st_undfut_pos_to_be.l_isell_qty 			= 0;
  st_undfut_pos_to_be.d_isell_ord_vl 		= 0;
  st_undfut_pos_to_be.l_exbuy_qty 			= 0;
  st_undfut_pos_to_be.d_exbuy_ord_vl 		= 0;
  st_undfut_pos_to_be.l_exsell_qty 			= 0;
  st_undfut_pos_to_be.d_exsell_ord_vl 	= 0;
  st_undfut_pos_to_be.l_buy_exctd_qty 	= 0;
  st_undfut_pos_to_be.l_sell_exctd_qty 	= 0;
  st_undfut_pos_to_be.c_opnpstn_flw 		= 'N';
  st_undfut_pos_to_be.l_opnpstn_qty 		= 0;
  st_undfut_pos_to_be.d_org_opn_val 		= 0;
  st_undfut_pos_to_be.d_mtm_opn_val 		= 0;
  st_undfut_pos_to_be.l_opn_buyqty 			= 0;
  st_undfut_pos_to_be.l_opn_sellqty 		= 0;
  st_undfut_pos_to_be.d_ibuy_mrgn 			= 0;
  st_undfut_pos_to_be.d_isell_mrgn 			= 0;
  st_undfut_pos_to_be.d_exbuy_mrgn 			= 0;
  st_undfut_pos_to_be.d_exsell_mrgn 		= 0;
  st_undfut_pos_to_be.d_add_mrgn_val 		= st_undfut_pos_crrnt.d_add_mrgn_val;
  st_undfut_pos_to_be.d_exctd_mrgn 			= st_undfut_pos_crrnt.d_exctd_mrgn;
  st_undfut_pos_to_be.d_sprd_mrgn 			= st_undfut_pos_crrnt.d_sprd_mrgn;
  st_undfut_pos_to_be.d_sprd_pl 				= st_undfut_pos_crrnt.d_sprd_pl;
  st_undfut_pos_to_be.d_trd_mrgn 				= st_undfut_pos_crrnt.d_trd_mrgn;
  st_undfut_pos_to_be.c_oprn_typ 				= '*';
  st_undfut_pos_to_be.d_mm_trd_mrgn 		= st_undfut_pos_crrnt.d_mm_trd_mrgn;
  st_undfut_pos_to_be.d_ordr_mrgn 			= 0;
  st_undfut_pos_to_be.d_imtm_opn_val 		= 0;
  st_undfut_pos_to_be.d_imtm_exctd_mrgn = 0;
  st_undfut_pos_to_be.d_imtm_sprd_mrgn 	= 0;
  st_undfut_pos_to_be.d_imtm_sprd_pl 		= 0;
  st_undfut_pos_to_be.d_imtm_trd_mrgn 	= 0;
  st_undfut_pos_to_be.d_mm_exctd_mrgn 	= 0;
  st_undfut_pos_to_be.d_mm_sprd_mrgn 		= 0;
  st_undfut_pos_to_be.d_mm_sprd_pl 			= 0;

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog ( c_ServiceName, "After getting the current underlying position" );
  }

 	strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,			 ptr_st_pstn_actn->c_xchng_cd);
  strcpy( sql_undrlyng,			 ptr_st_pstn_actn->c_undrlyng);
  sql_prd_typ 		= ptr_st_pstn_actn->c_prd_typ;
  sql_cntrct_tag  = ptr_st_pstn_actn->c_cntrct_tag;

  /** This bit of code down below will fetch all the contract level **/
  /** positions. Then it will find the contract on which the input  **/
  /** action is to be performed and then perform it. It then summs  **/
  /** up all the contract level postion to arrive at a consolidated **/
  /** underlying level position. It then recalculates the margin.   **/
  /** This bit of code need not be performed for actions which do   **/
  /** not involve a change in postion                               **/

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog ( c_ServiceName, "*************  SFO_UPD_FUT_POS - II *************");
    fn_userlog ( c_ServiceName, "Fetched current contract position for f+ Creation" );
  }

  /** Prepare a list of contracts from contract position table **/

  EXEC SQL ALLOCATE :sys_cursor;
  EXEC SQL EXECUTE
      BEGIN
         OPEN :sys_cursor FOR
          SELECT  FFP_CLM_MTCH_ACCNT,
                  FFP_XCHNG_CD,
                  FFP_PRDCT_TYP,
                  FFP_INDSTK,
                  FFP_UNDRLYNG,
                  TO_CHAR (FFP_EXPRY_DT,'DD-Mon-YYYY'),
                  FFP_EXER_TYP,
                  FFP_CNTRCT_TAG,
                  FFP_IBUY_QTY,
                  FFP_IBUY_ORD_VAL,
                  FFP_ISELL_QTY,
                  FFP_ISELL_ORD_VAL,
                  FFP_EXBUY_QTY,
                  FFP_EXBUY_ORD_VAL,
                  FFP_EXSELL_QTY,
                  FFP_EXSELL_ORD_VAL,
                  FFP_BUY_EXCTD_QTY,
                  FFP_SELL_EXCTD_QTY,
                  FFP_OPNPSTN_FLW,
                  FFP_OPNPSTN_QTY,
                  FFP_OPNPSTN_VAL,
                  FFP_MTM_OPN_VAL
          FROM    FFP_FO_FUTURES_PSTN
          WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
          AND     FFP_XCHNG_CD       = :sql_xchng_cd
          AND     FFP_PRDCT_TYP      = :sql_prd_typ
          AND     FFP_UNDRLYNG       = :sql_undrlyng
          AND     FFP_CNTRCT_TAG     = :sql_cntrct_tag
          ORDER BY FFP_EXPRY_DT asc;
        END;
      END-EXEC;

  if ( SQLCODE != 0 )
  {
    EXEC SQL FREE :sys_cursor;
    fn_errlog ( c_ServiceName, "S31340", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  c_pos_avl = 'N';

  /** Fetch one contract at a time from the list. If the fetched  **/
  /** contract is the one we need to apply the change apply it.   **/
  /** Else simply add the contract to  underlying level position  **/

  while ( 1 )
  {
			d_cntrct_pl       = 0.0;	

      EXEC SQL  FETCH   :sys_cursor
                INTO    :st_cntpos_crrnt.c_cln_mtch_accnt,
                        :st_cntpos_crrnt.c_xchng_cd,
                        :st_cntpos_crrnt.c_prd_typ,
                        :st_cntpos_crrnt.c_ctgry_indstk,
                        :st_cntpos_crrnt.c_undrlyng,
                        :c_exp_dt,
                        :st_cntpos_crrnt.c_exrc_typ,
                        :st_cntpos_crrnt.c_cntrct_tag,
                        :st_cntpos_crrnt.l_ibuy_qty,
                        :st_cntpos_crrnt.d_ibuy_ord_vl,
                        :st_cntpos_crrnt.l_isell_qty,
                        :st_cntpos_crrnt.d_isell_ord_vl,
                        :st_cntpos_crrnt.l_exbuy_qty,
                        :st_cntpos_crrnt.d_exbuy_ord_vl,
                        :st_cntpos_crrnt.l_exsell_qty,
                        :st_cntpos_crrnt.d_exsell_ord_vl,
                        :st_cntpos_crrnt.l_buy_exctd_qty,
                        :st_cntpos_crrnt.l_sell_exctd_qty,
                        :st_cntpos_crrnt.c_opnpstn_flw,
                        :st_cntpos_crrnt.l_opnpstn_qty,
                        :st_cntpos_crrnt.d_org_opn_val,
                        :st_cntpos_crrnt.d_mtm_opn_val;
    	if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }

        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31345", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
      
			SETNULL( c_exp_dt );
      strcpy ( st_cntpos_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
      rtrim(st_cntpos_crrnt.c_xchng_cd);
      rtrim(st_cntpos_crrnt.c_undrlyng);
      rtrim(st_cntpos_crrnt.c_expry_dt);

  		if( DEBUG_MSG_LVL_3 )
  		{
    		fn_userlog ( c_ServiceName, "FUT Expiry date       :%s:", c_exp_dt.arr );
    		fn_userlog ( c_ServiceName, "FUT IWTL buy qty      :%ld:", st_cntpos_crrnt.l_ibuy_qty );
    		fn_userlog ( c_ServiceName, "FUT IWTL buy val      :%lf:", st_cntpos_crrnt.d_ibuy_ord_vl );
    		fn_userlog ( c_ServiceName, "FUT IWTL sell qty     :%ld:", st_cntpos_crrnt.l_isell_qty );
    		fn_userlog ( c_ServiceName, "FUT IWTL sell val     :%lf:", st_cntpos_crrnt.d_isell_ord_vl );
    		fn_userlog ( c_ServiceName, "FUT EXCH buy qty      :%ld:", st_cntpos_crrnt.l_exbuy_qty );
    		fn_userlog ( c_ServiceName, "FUT EXCH buy val      :%lf:", st_cntpos_crrnt.d_exbuy_ord_vl );
    		fn_userlog ( c_ServiceName, "FUT EXCH sell qty     :%ld:", st_cntpos_crrnt.l_exsell_qty );
    		fn_userlog ( c_ServiceName, "FUT EXCH sell val      :%lf:", st_cntpos_crrnt.d_exsell_ord_vl );
    		fn_userlog ( c_ServiceName, "FUT Buy exctd qty     :%ld:", st_cntpos_crrnt.l_buy_exctd_qty );
    		fn_userlog ( c_ServiceName, "FUT Sell exctd qty    :%ld:", st_cntpos_crrnt.l_sell_exctd_qty );
    		fn_userlog ( c_ServiceName, "FUT Open qty          :%ld:", st_cntpos_crrnt.l_opnpstn_qty );
  		}

      if( DEBUG_MSG_LVL_2) /*** Ver 4.6 ***/ 
      {
        fn_userlog ( c_ServiceName, "FUT Original open val :%lf:", st_cntpos_crrnt.d_org_opn_val );
        fn_userlog ( c_ServiceName, "FUT MTMed open val    :%lf:", st_cntpos_crrnt.d_mtm_opn_val );
			}

      if( (strcmp(st_cntpos_crrnt.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd) == 0 ) &&
          (st_cntpos_crrnt.c_prd_typ == ptr_st_pstn_actn->c_prd_typ) &&
          (strcmp(st_cntpos_crrnt.c_undrlyng, ptr_st_pstn_actn->c_undrlyng) == 0 ) &&
          (strcmp(st_cntpos_crrnt.c_expry_dt, ptr_st_pstn_actn->c_expry_dt) == 0 ) &&
          (st_cntpos_crrnt.c_exrc_typ == ptr_st_pstn_actn->c_exrc_typ) )
      {
        memcpy ( &st_cntpos_old, &st_cntpos_crrnt, sizeof( st_cntpos_old ) );
				
				if(DEBUG_MSG_LVL_3)
  			{
					fn_userlog ( c_ServiceName, " Match Found for F+ Creation ");
				}

        i_returncode =  fn_apply_cnt_actn ( c_ServiceName,
                                            ptr_st_pstn_actn,
                                            &st_cntpos_crrnt,
                                            ptr_st_err_msg );
        if ( i_returncode == -1 )
        {
          return FAILURE;
        }

        memcpy ( &st_cntpos_md_rc, &st_cntpos_crrnt, sizeof( st_cntpos_md_rc ) );

        c_pos_avl = 'Y';
      }

			if( DEBUG_MSG_LVL_3 )
  		{
				fn_userlog ( c_ServiceName, " st_cntpos_crrnt.c_xchng_cd |%s|",st_cntpos_crrnt.c_xchng_cd);	
				fn_userlog ( c_ServiceName, " st_cntpos_crrnt.c_prd_typ  |%c|",st_cntpos_crrnt.c_prd_typ);	
				fn_userlog ( c_ServiceName, " st_cntpos_crrnt.c_undrlyng |%s|",st_cntpos_crrnt.c_undrlyng);	
				fn_userlog ( c_ServiceName, " c_exp_dt                   |%s|",c_exp_dt.arr);	
				fn_userlog ( c_ServiceName, " st_cntpos_crrnt.c_exrc_typ |%c|",st_cntpos_crrnt.c_exrc_typ);	
			}

			EXEC SQL
        SELECT  FTQ_LST_TRD_PRC
        INTO    :d_ltp
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :st_cntpos_crrnt.c_xchng_cd
        AND     FTQ_PRDCT_TYP =	'F' 
        AND     FTQ_UNDRLYNG  = :st_cntpos_crrnt.c_undrlyng
        AND     FTQ_EXPRY_DT  = :c_exp_dt
        AND     FTQ_EXER_TYP  = :st_cntpos_crrnt.c_exrc_typ;

      if(SQLCODE  !=  0 )
      {
        fn_errlog ( c_ServiceName, "S31350", SQLMSG, ptr_st_err_msg->c_err_msg );
 				EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;       
				return FAILURE;
      }
		
			if( DEBUG_MSG_LVL_3 )
  		{	
				fn_userlog ( c_ServiceName, " d_ltp                   		  |%lf|",d_ltp);		
				fn_userlog ( c_ServiceName, " st_cntpos_crrnt.l_opnpstn_qty |%ld|",st_cntpos_crrnt.l_opnpstn_qty);		
				fn_userlog ( c_ServiceName, " st_cntpos_crrnt.d_org_opn_val |%lf|",st_cntpos_crrnt.d_org_opn_val);		
			}

		  if( st_cntpos_crrnt.l_opnpstn_qty  > 0 )
      {
         d_cntrct_pl = ( d_ltp * (double) st_cntpos_crrnt.l_opnpstn_qty ) - st_cntpos_crrnt.d_org_opn_val;
      }
      else if ( st_cntpos_crrnt.l_opnpstn_qty < 0 )
      {
         d_cntrct_pl = fabs(st_cntpos_crrnt.d_org_opn_val)  -  ( d_ltp * (double) abs(st_cntpos_crrnt.l_opnpstn_qty) )  ;
      }

			if( DEBUG_MSG_LVL_3 )
  		{
				fn_userlog(c_ServiceName,"Contract Level PNL  |%lf|",d_cntrct_pl);
				fn_userlog(c_ServiceName,"Underlying Level PNL  |%lf|",d_undrlyng_pl);
			}

			d_undrlyng_pl = d_undrlyng_pl + d_cntrct_pl;

			/*** Added in ver 2.6 ***/
			d_num_of_lots = ((double) (abs(st_cntpos_crrnt.l_opnpstn_qty))) / ((double)(abs(ptr_st_pstn_actn->l_exec_qty))) ;			

      fn_sum_cpos ( st_cntpos_crrnt, &st_undfut_pos_to_be );

  } /*** End of While Loop ***/

	EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE  :sys_cursor;


  /** If the client is building a position for the first time in the **/
  /** contract then it will not appear in the above list. Hence we   **/
  /** process them seperately                                        **/
  
	if ( c_pos_avl == 'N' )
  {
		d_num_of_lots = 1.0;  /*** Ver 2.6 ***/
    strcpy( st_cntpos_md_rc.c_cln_mtch_accnt, ptr_st_pstn_actn->c_cln_mtch_accnt );
    strcpy( st_cntpos_md_rc.c_xchng_cd, 			ptr_st_pstn_actn->c_xchng_cd );
    strcpy( st_cntpos_md_rc.c_undrlyng, 			ptr_st_pstn_actn->c_undrlyng );
    strcpy( st_cntpos_md_rc.c_expry_dt, 			ptr_st_pstn_actn->c_expry_dt );
    st_cntpos_md_rc.c_prd_typ  			= ptr_st_pstn_actn->c_prd_typ;
    st_cntpos_md_rc.c_exrc_typ  		= ptr_st_pstn_actn->c_exrc_typ;
    st_cntpos_md_rc.c_opt_typ  			= ptr_st_pstn_actn->c_opt_typ;
    st_cntpos_md_rc.l_strike_prc  	= ptr_st_pstn_actn->l_strike_prc;
    st_cntpos_md_rc.c_ctgry_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
    st_cntpos_md_rc.c_cntrct_tag 		= ptr_st_pstn_actn->c_cntrct_tag;
    st_cntpos_md_rc.l_ibuy_qty 			= 0;
    st_cntpos_md_rc.d_ibuy_ord_vl 	= 0;
    st_cntpos_md_rc.l_isell_qty 		= 0;
    st_cntpos_md_rc.d_isell_ord_vl  = 0;
    st_cntpos_md_rc.l_exbuy_qty 		= 0;
    st_cntpos_md_rc.d_exbuy_ord_vl  = 0;
    st_cntpos_md_rc.l_exsell_qty 		= 0;
    st_cntpos_md_rc.d_exsell_ord_vl = 0;
    st_cntpos_md_rc.l_buy_exctd_qty = 0;
    st_cntpos_md_rc.l_sell_exctd_qty = 0;
    st_cntpos_md_rc.c_opnpstn_flw 	= 'N';
    st_cntpos_md_rc.l_opnpstn_qty 	= 0;
    st_cntpos_md_rc.d_org_opn_val 	= 0;
    st_cntpos_md_rc.d_mtm_opn_val 	= 0;
    st_cntpos_md_rc.l_und_opn_qty 	= 0;
    st_cntpos_md_rc.d_und_opn_val 	= 0;
    st_cntpos_md_rc.d_ibuy_mrgn 		= 0;
    st_cntpos_md_rc.d_isell_mrgn 		= 0;
    st_cntpos_md_rc.d_exbuy_mrgn 		= 0;
    st_cntpos_md_rc.d_exsell_mrgn 	= 0;
    st_cntpos_md_rc.d_ordr_mrgn 		= 0;
    st_cntpos_md_rc.c_oprn_typ 			= '*';

    i_returncode =  fn_apply_cnt_actn ( c_ServiceName,
                                        ptr_st_pstn_actn,
                                        &st_cntpos_md_rc,
                                        ptr_st_err_msg );

    if ( i_returncode == -1 )
    {
      return FAILURE;
    }

		/*** Calculating Contract Level Loss while converting from future to future plus ***/

		EXEC SQL
        SELECT  FTQ_LST_TRD_PRC
        INTO    :d_ltp
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :st_cntpos_md_rc.c_xchng_cd
        AND     FTQ_PRDCT_TYP = 'F'
        AND     FTQ_UNDRLYNG  = :st_cntpos_md_rc.c_undrlyng
        AND     FTQ_EXPRY_DT  = :st_cntpos_md_rc.c_expry_dt
        AND     FTQ_EXER_TYP  = :st_cntpos_md_rc.c_exrc_typ;

      if(SQLCODE  !=  0 )
      {
        fn_errlog ( c_ServiceName, "S31355", SQLMSG, ptr_st_err_msg->c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        return FAILURE;
      }

			if(DEBUG_MSG_LVL_3)
  		{
      	fn_userlog ( c_ServiceName, " d_ltp                         |%lf|",d_ltp);
      	fn_userlog ( c_ServiceName, " st_cntpos_crrnt.l_opnpstn_qty |%ld|",st_cntpos_md_rc.l_opnpstn_qty);
      	fn_userlog ( c_ServiceName, " st_cntpos_crrnt.d_org_opn_val |%lf|",st_cntpos_md_rc.d_org_opn_val);
			}
			
      if( st_cntpos_md_rc.l_opnpstn_qty  > 0 )
      {
         d_cntrct_pl = ( d_ltp * (double) st_cntpos_md_rc.l_opnpstn_qty ) - st_cntpos_md_rc.d_org_opn_val;
      }
      else if ( st_cntpos_md_rc.l_opnpstn_qty < 0 )
      {
         d_cntrct_pl = fabs(st_cntpos_md_rc.d_org_opn_val)  -  ( d_ltp * (double) abs(st_cntpos_md_rc.l_opnpstn_qty) )  ;
      }

			if( DEBUG_MSG_LVL_3 )
  		{	
     	 	fn_userlog(c_ServiceName,"Contract Level PNL  |%lf|",d_cntrct_pl);
      	fn_userlog(c_ServiceName,"Underlying Level PNL  |%lf|",d_undrlyng_pl);
			}
		
			d_undrlyng_pl = d_undrlyng_pl + d_cntrct_pl;

    	fn_sum_cpos ( st_cntpos_md_rc, &st_undfut_pos_to_be );
  }

  if ( st_cntpos_md_rc.l_opnpstn_qty > 0 )
  {
    st_cntpos_md_rc.c_opnpstn_flw = BUY;
  }
  else if ( st_cntpos_md_rc.l_opnpstn_qty < 0 )
  {
    st_cntpos_md_rc.c_opnpstn_flw = SELL;
  }
  else
  {
    st_cntpos_md_rc.c_opnpstn_flw = NEUTRAL;
  }

  /** Update the contract level position on which the action has been **/
  /** applied                                                         **/

 if( c_pos_avl == 'N')
  {
		if (DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Inside NO DATA FOUND FFP 12");
			fn_userlog ( c_ServiceName, "st_cntpos_md_rc.c_cln_mtch_accnt  |%s|",st_cntpos_md_rc.c_cln_mtch_accnt );
    	fn_userlog ( c_ServiceName, "st_cntpos_md_rc.c_xchng_cd        |%s|",st_cntpos_md_rc.c_xchng_cd );
    	fn_userlog ( c_ServiceName, "st_cntpos_md_rc.c_prd_typ         |%c| ",st_cntpos_md_rc.c_prd_typ );
    	fn_userlog ( c_ServiceName, "st_cntpos_md_rc.c_ctgry_indstk    |%c|",st_cntpos_md_rc.c_ctgry_indstk );
    	fn_userlog ( c_ServiceName, "st_cntpos_md_rc.c_undrlyng        |%s|",st_cntpos_md_rc.c_undrlyng );
    	fn_userlog ( c_ServiceName, "st_cntpos_md_rc.c_expry_dt        |%s| ",st_cntpos_md_rc.c_expry_dt );
    	fn_userlog ( c_ServiceName, "st_cntpos_md_rc.c_exrc_typ        |%c|",st_cntpos_md_rc.c_exrc_typ );
    	fn_userlog ( c_ServiceName, "st_cntpos_md_rc.c_cntrct_tag      |%c|",st_cntpos_md_rc.c_cntrct_tag );
    	fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_ibuy_qty        |%ld|",st_cntpos_md_rc.l_ibuy_qty );
    	fn_userlog ( c_ServiceName, "st_cntpos_md_rc.d_ibuy_ord_vl     |%lf|",st_cntpos_md_rc.d_ibuy_ord_vl );
    	fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_isell_qty       |%ld| ",st_cntpos_md_rc.l_isell_qty );
    	fn_userlog ( c_ServiceName, "st_cntpos_md_rc.d_isell_ord_vl     |%lf|",st_cntpos_md_rc.d_isell_ord_vl );
    	fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_exbuy_qty        |%ld|",st_cntpos_md_rc.l_exbuy_qty );
    	fn_userlog ( c_ServiceName, "st_cntpos_md_rc.d_exbuy_ord_vl     |%lf|",st_cntpos_md_rc.d_exbuy_ord_vl );
    	fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_exsell_qty       |%ld|",st_cntpos_md_rc.l_exsell_qty );
    	fn_userlog ( c_ServiceName, "st_cntpos_md_rc.d_exsell_ord_vl    |%lf|",st_cntpos_md_rc.d_exsell_ord_vl );
    	fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_buy_exctd_qty    |%ld|",st_cntpos_md_rc.l_buy_exctd_qty );
    	fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_sell_exctd_qty   |%ld|",st_cntpos_md_rc.l_sell_exctd_qty );
    	fn_userlog ( c_ServiceName, " st_cntpos_md_rc.c_opnpstn_flw     |%c|",st_cntpos_md_rc.c_opnpstn_flw);
    	fn_userlog ( c_ServiceName, " st_cntpos_md_rc.l_opnpstn_qty     |%ld|",st_cntpos_md_rc.l_opnpstn_qty);
    	fn_userlog ( c_ServiceName, " st_cntpos_md_rc.d_org_opn_val     |%lf|",st_cntpos_md_rc.d_org_opn_val);
    	fn_userlog ( c_ServiceName, " st_cntpos_md_rc.d_mtm_opn_val     |%lf|",st_cntpos_md_rc.d_mtm_opn_val);
		}
		
    EXEC SQL
      INSERT INTO FFP_FO_FUTURES_PSTN
      (
        FFP_CLM_MTCH_ACCNT,
        FFP_XCHNG_CD,
        FFP_PRDCT_TYP,
        FFP_INDSTK,
        FFP_UNDRLYNG,
        FFP_EXPRY_DT,
        FFP_EXER_TYP,
        FFP_CNTRCT_TAG,
        FFP_IBUY_QTY,
        FFP_IBUY_ORD_VAL,
        FFP_ISELL_QTY,
        FFP_ISELL_ORD_VAL,
        FFP_EXBUY_QTY,
        FFP_EXBUY_ORD_VAL,
        FFP_EXSELL_QTY,
        FFP_EXSELL_ORD_VAL,
        FFP_BUY_EXCTD_QTY,
        FFP_SELL_EXCTD_QTY,
        FFP_OPNPSTN_FLW,
        FFP_OPNPSTN_QTY,
        FFP_OPNPSTN_VAL,
        FFP_MTM_OPN_VAL
      )
     VALUES
     (
        :st_cntpos_md_rc.c_cln_mtch_accnt,
        :st_cntpos_md_rc.c_xchng_cd,
        :st_cntpos_md_rc.c_prd_typ,
        :st_cntpos_md_rc.c_ctgry_indstk,
        :st_cntpos_md_rc.c_undrlyng,
        to_date(:st_cntpos_md_rc.c_expry_dt,'DD-Mon-YYYY'),
        :st_cntpos_md_rc.c_exrc_typ,
        :st_cntpos_md_rc.c_cntrct_tag,
        :st_cntpos_md_rc.l_ibuy_qty,
        :st_cntpos_md_rc.d_ibuy_ord_vl,
        :st_cntpos_md_rc.l_isell_qty,
        :st_cntpos_md_rc.d_isell_ord_vl,
        :st_cntpos_md_rc.l_exbuy_qty,
        :st_cntpos_md_rc.d_exbuy_ord_vl,
        :st_cntpos_md_rc.l_exsell_qty,
        :st_cntpos_md_rc.d_exsell_ord_vl,
        :st_cntpos_md_rc.l_buy_exctd_qty,
        :st_cntpos_md_rc.l_sell_exctd_qty,
        :st_cntpos_md_rc.c_opnpstn_flw,
        :st_cntpos_md_rc.l_opnpstn_qty,
        :st_cntpos_md_rc.d_org_opn_val,
        :st_cntpos_md_rc.d_mtm_opn_val
     );

 		if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31360", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }
  }
  else
  {
    EXEC SQL
      UPDATE  FFP_FO_FUTURES_PSTN
      SET     FFP_IBUY_QTY       = :st_cntpos_md_rc.l_ibuy_qty,
              FFP_IBUY_ORD_VAL   = :st_cntpos_md_rc.d_ibuy_ord_vl,
              FFP_ISELL_QTY      = :st_cntpos_md_rc.l_isell_qty,
              FFP_ISELL_ORD_VAL  = :st_cntpos_md_rc.d_isell_ord_vl,
              FFP_EXBUY_QTY      = :st_cntpos_md_rc.l_exbuy_qty,
              FFP_EXBUY_ORD_VAL  = :st_cntpos_md_rc.d_exbuy_ord_vl,
              FFP_EXSELL_QTY     = :st_cntpos_md_rc.l_exsell_qty,
              FFP_EXSELL_ORD_VAL = :st_cntpos_md_rc.d_exsell_ord_vl,
              FFP_BUY_EXCTD_QTY  = :st_cntpos_md_rc.l_buy_exctd_qty,
              FFP_SELL_EXCTD_QTY = :st_cntpos_md_rc.l_sell_exctd_qty,
              FFP_OPNPSTN_FLW    = :st_cntpos_md_rc.c_opnpstn_flw,
              FFP_OPNPSTN_QTY    = :st_cntpos_md_rc.l_opnpstn_qty,
              FFP_OPNPSTN_VAL    = :st_cntpos_md_rc.d_org_opn_val,
              FFP_MTM_OPN_VAL    = :st_cntpos_md_rc.d_mtm_opn_val,
              FFP_TRG_PRC        = DECODE(:st_cntpos_md_rc.c_opnpstn_flw,'N',0,FFP_TRG_PRC), /** Ver 3.4 **/
              FFP_MIN_TRG_PRC    = DECODE(:st_cntpos_md_rc.c_opnpstn_flw,'N',0,FFP_MIN_TRG_PRC) /** Ver 3.4 **/
      WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
      AND     FFP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
      AND     FFP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
      AND     FFP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
      AND     FFP_EXPRY_DT       = to_date(:ptr_st_pstn_actn->c_expry_dt, 'DD-Mon-YYYY')
      AND     FFP_EXER_TYP       = :ptr_st_pstn_actn->c_exrc_typ
      AND     FFP_CNTRCT_TAG     = :ptr_st_pstn_actn->c_cntrct_tag;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31365", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }
  }

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog ( c_ServiceName, "*************  SFO_UPD_FUT_POS - F+ *************");
    fn_userlog ( c_ServiceName, "Calcualted underlying level position" );
    fn_userlog ( c_ServiceName, "FUT IWTL buy qty      :%ld:", st_undfut_pos_to_be.l_ibuy_qty );
    fn_userlog ( c_ServiceName, "FUT IWTL buy val      :%lf:", st_undfut_pos_to_be.d_ibuy_ord_vl );
    fn_userlog ( c_ServiceName, "FUT IWTL sell qty     :%ld:", st_undfut_pos_to_be.l_isell_qty );
    fn_userlog ( c_ServiceName, "FUT IWTL sell val     :%lf:", st_undfut_pos_to_be.d_isell_ord_vl );
    fn_userlog ( c_ServiceName, "FUT EXCH buy qty      :%ld:", st_undfut_pos_to_be.l_exbuy_qty );
    fn_userlog ( c_ServiceName, "FUT EXCH buy val      :%lf:", st_undfut_pos_to_be.d_exbuy_ord_vl );
    fn_userlog ( c_ServiceName, "FUT EXCH sell qty     :%ld:", st_undfut_pos_to_be.l_exsell_qty );
    fn_userlog ( c_ServiceName, "FUT EXCH sell val     :%lf:", st_undfut_pos_to_be.d_exsell_ord_vl );
    fn_userlog ( c_ServiceName, "FUT Buy exctd qty     :%ld:", st_undfut_pos_to_be.l_buy_exctd_qty );
    fn_userlog ( c_ServiceName, "FUT Sell exctd qty    :%ld:", st_undfut_pos_to_be.l_sell_exctd_qty );
    fn_userlog ( c_ServiceName, "FUT Open qty          :%ld:", st_undfut_pos_to_be.l_opnpstn_qty );
  }

  if( DEBUG_MSG_LVL_2) /*** Ver 4.6 ***/
  {
    fn_userlog ( c_ServiceName, "FUT Original open val :%lf:", st_undfut_pos_to_be.d_org_opn_val );
    fn_userlog ( c_ServiceName, "FUT MTMed open val    :%lf:", st_undfut_pos_to_be.d_mtm_opn_val );
    fn_userlog ( c_ServiceName, "FUT Add Margin val    :%lf:", st_undfut_pos_to_be.d_add_mrgn_val );
	}

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog ( c_ServiceName, "*************  SFO_UPD_FUT_POS - F+  *************");
    fn_userlog ( c_ServiceName, "Calculating margin" );
  }

  /** Calculate the margin on the new underlying position **/
	i_returncode = fn_upd_mrgn ( c_ServiceName,
                               ptr_st_pstn_actn,
                               &st_undfut_pos_crrnt,
                               &st_undfut_pos_to_be,
                               ptr_st_err_msg);

  if ( i_returncode != 0 )
  {
    return FAILURE;
  }
	/***   if( DEBUG_MSG_LVL_3 ) ***/
	if( DEBUG_MSG_LVL_2 ) /*** Changed to 0 in Ver 4.6 ***/
  {
    fn_userlog ( c_ServiceName, "Current margin values" );
    fn_userlog ( c_ServiceName, "FUT Order level margin     :%lf:", st_undfut_pos_crrnt.d_ordr_mrgn );
    fn_userlog ( c_ServiceName, "FUT Executed level margin  :%lf:", st_undfut_pos_crrnt.d_exctd_mrgn );
    fn_userlog ( c_ServiceName, "FUT Spread level margin    :%lf:", st_undfut_pos_crrnt.d_sprd_mrgn );
    fn_userlog ( c_ServiceName, "FUT Spread profit and loss :%lf:", st_undfut_pos_crrnt.d_sprd_pl );
    fn_userlog ( c_ServiceName, "FUT Trade level margin     :%lf:", st_undfut_pos_crrnt.d_trd_mrgn );
    fn_userlog ( c_ServiceName, "To be margin values" );
    fn_userlog ( c_ServiceName, "FUT Order level margin     :%lf:", st_undfut_pos_to_be.d_ordr_mrgn );
    fn_userlog ( c_ServiceName, "FUT Executed level margin  :%lf:", st_undfut_pos_to_be.d_exctd_mrgn );
    fn_userlog ( c_ServiceName, "FUT Spread level margin    :%lf:", st_undfut_pos_to_be.d_sprd_mrgn );
    fn_userlog ( c_ServiceName, "FUT Spread profit and loss :%lf:", st_undfut_pos_to_be.d_sprd_pl );
    fn_userlog ( c_ServiceName, "FUT Trade level margin     :%lf:", st_undfut_pos_to_be.d_trd_mrgn );
  }

  strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks );
	
  if( ptr_st_pstn_actn->c_nkd_blkd_flg == JOINT_CONVERSION )
  {	
		if(DEBUG_MSG_LVL_3)
  	{
			fn_userlog ( c_ServiceName, " Inside Joined Conversion ");
		}
	
    if ( ptr_st_pstn_actn->l_cover_qty > 0 )
    {
      /**** Commented in ver 2.6 as add margin allready released at the time of close fut position
      d_diff_amv = st_undfut_pos_crrnt.d_add_mrgn_val - st_undfut_pos_to_be.d_add_mrgn_val;
			d_blkd_mrgn = d_blkd_mrgn + d_diff_amv;
			
      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog ( c_ServiceName, "FUT-In Fut Conversion-Difference in UAMV :%lf:", d_diff_amv );
      }

      if( d_diff_amv != 0 )
      {
        i_returncode = fn_upd_limits( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      RELEASE_OF_ADD_MARGIN_ON_FUTPLUS_CONV,
                                      DEBIT_WITHOUT_LIMIT,
                                      d_diff_amv,
                                      &d_balance_amt);
        if ( i_returncode != 0 )
        {
          return i_returncode;
        }
      }
			******************************************************************************************/

  		if (ptr_st_pstn_actn->c_trnsctn_flw == BUY )
      {
        d_pl_amt = ( (st_cntpos_old.d_mtm_opn_val / st_cntpos_old.l_opnpstn_qty ) - d_exec_rt) * ptr_st_pstn_actn->l_cover_qty ;  
      }
      else
      {
        d_pl_amt = ( d_exec_rt - ( st_cntpos_old.d_mtm_opn_val / st_cntpos_old.l_opnpstn_qty) ) * ptr_st_pstn_actn->l_cover_qty ; 
      }

  		if( DEBUG_MSG_LVL_3 )
  		{
    		fn_userlog (c_ServiceName,"FUT-Fut Conversion-Profit/Loss at contract level on execution :%lf:", d_pl_amt );
  		}
			d_blkd_mrgn = d_blkd_mrgn + d_pl_amt;		

      if ( d_pl_amt != 0 )
      {


        sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s",
                  ptr_st_pstn_actn->c_undrlyng,
                  ptr_st_pstn_actn->c_expry_dt);

				/***** Ver 3.7 NRI FNO TDS starts *****/

        /*** if(strncmp(ptr_st_pstn_actn->c_cln_mtch_accnt, "751", 3) == 0)  Commented in Ver 4.4 ******/

        /****** Added in Ver 4.4 *******/

        MEMSET(sql_iai_type.arr);
        EXEC SQL
        SELECT  IAI_TYPE
        INTO    :sql_iai_type
        FROM    IAI_INFO_ACCOUNT_INFO
        WHERE   IAI_MATCH_ACCOUNT_NO  = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

      	if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
      	{
        	fn_userlog(c_ServiceName, "CUST TYPE 4 IS :%s:", sql_iai_type.arr );
				}

        if ( SQLCODE != 0 )
        {
          fn_errlog(c_ServiceName, "S31370", SQLMSG, ptr_st_err_msg->c_err_msg );
          return FAILURE;
        }
        /****** Added Ver 4.4 Ends *****/

        if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") == 0)   /****** Check Added in Ver 4.4 *******/
        {
            strcpy(c_narration_id,TDS_NRI);
	    			strcpy(c_reason_cd,"Profit Loss on Cover Leg");

            i_returncode = fn_tds( c_ServiceName,
                                   ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    c_reason_cd,
                                    DEBIT_WITHOUT_LIMIT,
                                    d_pl_amt,
                                    &d_balance_amt);

            if ( i_returncode != 0 )
            {
              return i_returncode;
            }
        }
        /***** Ver 3.7 NRI FNO TDS ends*****/

        i_returncode = fn_upd_limits( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      /** PROFIT_LOSS_ON_COVER_LEG_FUTPLUS_CONV, Commented in Ver 3.2 ***/
																			PROFIT_LOSS_ON_COVER_LEG,                /** Added in Ver 3.2  ***/	
                                      DEBIT_WITHOUT_LIMIT,
                                      d_pl_amt,
                                      &d_balance_amt);
        if ( i_returncode != 0 )
        {
          return i_returncode;
        }

    }
   } /*********** if-end of cover qty >  0 *************/


    d_diff_UOM = st_undfut_pos_crrnt.d_ordr_mrgn - st_undfut_pos_to_be.d_ordr_mrgn ;
		d_blkd_mrgn = d_blkd_mrgn + d_diff_UOM;

  	if( DEBUG_MSG_LVL_3 )
  	{
    	fn_userlog ( c_ServiceName, "FUT-Order level- Difference in UOM :%lf:", d_diff_UOM );
  	}

    if ( d_diff_UOM != 0 )
    {
      sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s-%c",
              ptr_st_pstn_actn->c_undrlyng,
              ptr_st_pstn_actn->c_expry_dt,
              ptr_st_pstn_actn->c_prd_typ);

      i_returncode = fn_upd_limits( c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    ORDER_MARGIN_ADJ_ON_FUTPLUS_CONV,
                                    DEBIT_WITHOUT_LIMIT,
                                    d_diff_UOM,
                                    &d_balance_amt);
      if ( i_returncode != 0 )
      {
        return FAILURE;
      }

    }


    d_diff_UTM = st_undfut_pos_crrnt.d_trd_mrgn - st_undfut_pos_to_be.d_trd_mrgn;
		d_blkd_mrgn = d_blkd_mrgn + d_diff_UTM;

  	if( DEBUG_MSG_LVL_3 )
  	{
    	fn_userlog ( c_ServiceName, "FUT-In Fut Conversion-Difference in UTM :%lf:", d_diff_UTM );
  	}

 		if ( d_diff_UTM != 0 )
    {
      sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s-%c",
              ptr_st_pstn_actn->c_undrlyng,
              ptr_st_pstn_actn->c_expry_dt,
              ptr_st_pstn_actn->c_prd_typ);

      i_returncode = fn_upd_limits( c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    TRD_MARGIN_ADJ_ON_FUTPLUS_CONV,
                                    DEBIT_WHEN_LIMIT,
                                    d_diff_UTM,
                                    &d_balance_amt);
      if ( i_returncode != 0 )
      {
        return FAILURE;
      }
    }

  } /***Joint Conversion check ends here **/
  else
  {
    if ( ptr_st_pstn_actn->l_cover_qty > 0 )
    {
			/**** Commented in ver 2.6 as add margin allready released at the time of closed fut position 
      d_diff_amv = st_undfut_pos_crrnt.d_add_mrgn_val - st_undfut_pos_to_be.d_add_mrgn_val;
			d_blkd_mrgn = d_blkd_mrgn + d_diff_amv; 

      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog ( c_ServiceName, "FUT-In Fut + Conversion-Difference in UAMV :%lf:", d_diff_amv );
      }

      if( ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) && ( ptr_st_pstn_actn->l_session_id != 0 ) )
            c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
      else
            c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;


      if( d_diff_amv != 0 )
      {
        i_returncode = fn_upd_limits( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      RELEASE_OF_ADD_MARGIN_ON_FUTPLUS_CONV,
                                      c_dr_without_lmt_flg,
                                      d_diff_amv,
                                      &d_balance_amt);
        if ( i_returncode != 0 )
        {
          return FAILURE;
        }
      }
			******************************************/

 			if (ptr_st_pstn_actn->c_trnsctn_flw == BUY )
      {
        d_pl_amt = ( (st_cntpos_old.d_mtm_opn_val / st_cntpos_old.l_opnpstn_qty ) - d_exec_rt ) * ptr_st_pstn_actn->l_cover_qty ;  
      }
      else
      {
        d_pl_amt = ( d_exec_rt - ( st_cntpos_old.d_mtm_opn_val / st_cntpos_old.l_opnpstn_qty) ) * ptr_st_pstn_actn->l_cover_qty ;  
      }
			d_blkd_mrgn = d_blkd_mrgn + d_pl_amt;

  		if( DEBUG_MSG_LVL_3 )
  		{
    		fn_userlog (c_ServiceName,"FUT-In Fut Conversion-Profit/Loss at contract level on execution :%lf:", d_pl_amt );
  		}

      if ( d_pl_amt != 0 )
      {
        sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s",
                  ptr_st_pstn_actn->c_undrlyng,
                  ptr_st_pstn_actn->c_expry_dt);

      if( ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) && ( ptr_st_pstn_actn->l_session_id != 0 ) )
            c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
      else
            c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;

				/***** Ver 3.7 NRI FNO TDS starts *****/

        /*** if(strncmp(ptr_st_pstn_actn->c_cln_mtch_accnt, "751", 3) == 0)   ** Commented in Ver 4.4 *****/

        /***** Added in Ver 4.4 ******/

        MEMSET(sql_iai_type.arr);
        EXEC SQL
        SELECT  IAI_TYPE
        INTO    :sql_iai_type
        FROM    IAI_INFO_ACCOUNT_INFO
        WHERE   IAI_MATCH_ACCOUNT_NO  = :ptr_st_pstn_actn->c_cln_mtch_accnt;

      	if(DEBUG_MSG_LVL_3) /*** Ver 4.6  ***/
      	{
        	fn_userlog(c_ServiceName, "CUST TYPE 5 IS :%s:", sql_iai_type.arr );
				}

        if ( SQLCODE != 0 )
        {
          fn_errlog(c_ServiceName, "S31375", SQLMSG, ptr_st_err_msg->c_err_msg );
          return FAILURE;
        }
        /***** Added Ver 4.4 Ends *****/

        if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") == 0)   /****** check Added in Ver 4.4 *****/
        {
            strcpy(c_narration_id,TDS_NRI);
	    			strcpy(c_reason_cd,"Profit Loss on Cover Leg");

            i_returncode = fn_tds( c_ServiceName,
                                   ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    c_reason_cd,
                                    c_dr_without_lmt_flg,
                                    d_pl_amt,
                                    &d_balance_amt);

            if ( i_returncode != 0 )
            {
              return FAILURE;
            }
        }
        /***** Ver 3.7 NRI FNO TDS ends*****/

        i_returncode = fn_upd_limits( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      /*** PROFIT_LOSS_ON_COVER_LEG_FUTPLUS_CONV, Commented in ver 3.2 */
																			PROFIT_LOSS_ON_COVER_LEG,                /** Added in Ver 3.2  ***/
                                      c_dr_without_lmt_flg,
                                      d_pl_amt,
                                      &d_balance_amt);
  			if ( i_returncode != 0 )
        {
          return FAILURE;
        }
      }
    } /*********** if-end of cover qty >  0 *************/

		/**** Commented in ver 2.6 as add margin allready released at the time of close fut position

    else if ( ptr_st_pstn_actn->l_fresh_qty != 0
              && st_undfut_pos_crrnt.d_add_mrgn_val != 0
              && st_undfut_pos_to_be.d_add_mrgn_val == 0
              &&  ( st_undfut_pos_to_be.d_sprd_mrgn != 0 || st_undfut_pos_to_be.d_sprd_pl != 0  )
            )
    {

      if ( DEBUG_MSG_LVL_3 )
      {
        fn_userlog(c_ServiceName,"Fresh Qty :%ld:",ptr_st_pstn_actn->l_fresh_qty);
        fn_userlog(c_ServiceName,"Current Add Margin Value :%lf:",st_undfut_pos_crrnt.d_add_mrgn_val);
        fn_userlog(c_ServiceName,"To Be Add margin Value :%lf:",st_undfut_pos_to_be.d_add_mrgn_val);
        fn_userlog(c_ServiceName,"Spread Margin :%lf:",st_undfut_pos_to_be.d_sprd_mrgn);
        fn_userlog(c_ServiceName,"Spread Profit / Loss :%lf:",st_undfut_pos_to_be.d_sprd_pl);

      }
		
      d_diff_amv = st_undfut_pos_crrnt.d_add_mrgn_val - st_undfut_pos_to_be.d_add_mrgn_val;
			d_blkd_mrgn = d_blkd_mrgn + d_diff_amv;
		
			if(DEBUG_MSG_LVL_3)
  		{	
      	fn_userlog ( c_ServiceName, "FUT-In Fut + Conversion-Difference in UAMV :%lf:", d_diff_amv );
			}

      if( ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) && ( ptr_st_pstn_actn->l_session_id != 0 ) )
      {
        c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
      }
      else
      {
        c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;
      }

     if( d_diff_amv != 0 )
     {
        i_returncode = fn_upd_limits( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      RELEASE_OF_ADD_MARGIN_ON_FUTPLUS_CONV,
                                      c_dr_without_lmt_flg,
                                      d_diff_amv,
                                      &d_balance_amt);
        if ( i_returncode != 0 )
        {
          return FAILURE;
        }
     }
 		}
		**************************************************************/

  	d_diff_UOM = st_undfut_pos_crrnt.d_ordr_mrgn - st_undfut_pos_to_be.d_ordr_mrgn ;
		d_blkd_mrgn = d_blkd_mrgn + d_diff_UOM;

  	if( DEBUG_MSG_LVL_3 )
  	{
    	fn_userlog ( c_ServiceName, "FUT-Order level- Difference in UOM :%lf:", d_diff_UOM );
 	 	}

    if ( d_diff_UOM != 0 )
    {
			if( DEBUG_MSG_LVL_3 )
    	{
      	fn_userlog ( c_ServiceName, "FUT-In Fut Conversion-Difference in UoM :%lf:", d_diff_UOM );
    	}

      if( ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) && ( ptr_st_pstn_actn->l_session_id != 0 ) )
              c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
      else
              c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;

      sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s-%c",
              	ptr_st_pstn_actn->c_undrlyng,
              	ptr_st_pstn_actn->c_expry_dt,
              	ptr_st_pstn_actn->c_prd_typ);

      i_returncode = fn_upd_limits( c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    ORDER_MARGIN_ADJ_ON_FUTPLUS_CONV,
                                    c_dr_without_lmt_flg,
                                    d_diff_UOM,
                                    &d_balance_amt);
      if ( i_returncode != 0 )
      {
        return FAILURE;
      }

    }

    d_diff_UTM = st_undfut_pos_crrnt.d_trd_mrgn - st_undfut_pos_to_be.d_trd_mrgn;
		d_blkd_mrgn = d_blkd_mrgn + d_diff_UTM;

  	if( DEBUG_MSG_LVL_3 )
  	{
    	fn_userlog ( c_ServiceName, "FUT-In Fut Conversion-Difference in UTM :%lf:", d_diff_UTM );
  	}	

	  if ( d_diff_UTM != 0 )
    {
     /*  if( ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) && ( ptr_st_pstn_actn->l_session_id != 0 ) )
              c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
      else
              c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;
			*/
      sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s-%c",
              	ptr_st_pstn_actn->c_undrlyng,
              	ptr_st_pstn_actn->c_expry_dt,
              	ptr_st_pstn_actn->c_prd_typ);

      i_returncode = fn_upd_limits( c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    TRD_MARGIN_ADJ_ON_FUTPLUS_CONV,
                                    DEBIT_WHEN_LIMIT,
                                    d_diff_UTM,
                                    &d_balance_amt);
      if ( i_returncode != 0 )
      {
        return FAILURE;
      }
    }

  } /***Single Conversion check ends here **/

	if(DEBUG_MSG_LVL_3)
  {
		fn_userlog(c_ServiceName," Debit Notional LOSS |%lf|",d_undrlyng_pl);
		fn_userlog(c_ServiceName," Released Amount is  |%lf|",d_rlsd_mrgn);
		fn_userlog(c_ServiceName," Blocked Amount is   |%lf|",d_blkd_mrgn );
	}

 	if (d_undrlyng_pl < 0) 
	{
		 if( DEBUG_MSG_LVL_3 )
  	 {	
		 		fn_userlog(c_ServiceName," Debit Notional LOSS |%lf|",d_undrlyng_pl);	
		 		fn_userlog(c_ServiceName," Number of Lots			 |%lf|",d_num_of_lots);	
		 }
		 d_undrlyng_pl 		= d_undrlyng_pl / d_num_of_lots;			/*** Added in ver 2.6 ***/		
	   d_diff_rlsd_blkd = d_rlsd_mrgn - fabs(d_blkd_mrgn);
		 d_max_diff       = MAX ( d_diff_rlsd_blkd , 0 );
		 d_min_diff			  = MIN (fabs( d_undrlyng_pl) ,d_max_diff); 
		
		 if( DEBUG_MSG_LVL_3 )
  	 {				 
		 		fn_userlog(c_ServiceName," Debit Notional LOSS MAX |%lf|",d_min_diff);
		 }	

		 if (d_min_diff != 0)	/*** Check Added in ver 2.6 ***/
		 {	
		 	i_returncode = fn_upd_limits( c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    BLK_NOTIONAL_LOSS_ON_FUTPLUS_CONV,
                                    DEBIT_TILL_LIMIT,
                                    d_min_diff * (-1),
                                    &d_balance_amt);
       if ( i_returncode != 0 )
       {
        return FAILURE;
       }
			}		
	} 

	/*Notional P/L added in Add Margin Column */

	st_undfut_pos_to_be.d_add_mrgn_val = st_undfut_pos_to_be.d_add_mrgn_val + d_min_diff ;

	strcpy ( ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks );

  /**Underlyng level position will be updated after margin requirement check done above **/

  if ( st_undfut_pos_to_be.l_opnpstn_qty > 0 )
  {
    st_undfut_pos_to_be.c_opnpstn_flw = BUY;
  }
  else if ( st_undfut_pos_to_be.l_opnpstn_qty < 0 )
  {
    st_undfut_pos_to_be.c_opnpstn_flw = SELL;
  }
  else
  {
    st_undfut_pos_to_be.c_opnpstn_flw = NEUTRAL;
  }

  /** Update the underlying level position on to the table **/
  
	if( c_upos_avl == 'N')
  {
		if(DEBUG_MSG_LVL_3)
  	{
			fn_userlog(c_ServiceName,"Inside Position Not available FUP");	
		}

    EXEC SQL
      /** SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY') Commented in Ver 2.9 **/
      /*** SELECT  to_char( GREATEST(exg_nxt_trd_dt,exg_tmp_trd_dt), 'DD-Mon-YYYY' ) * Ver 2.9 Reverted In Ver 2.9 Bug Fix */
      SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY') /** Reverted In Ver 2.9 Bug Fix **/
      INTO   :c_trade_dt
      FROM   EXG_XCHNG_MSTR
      WHERE  EXG_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
      AND    EXG_MKT_TYP = 'D';

    if ( SQLCODE != 0 )
    {
       fn_errlog(c_ServiceName, "S31380", SQLMSG, ptr_st_err_msg->c_err_msg );
       return FAILURE;
    }
   MEMSET(c_ucc_cd);/*** Added in VER 5.6 Starts here : Fetching UCC code for client ***/

        EXEC SQL
        SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
        INTO  :c_ucc_cd
        FROM  CLM_CLNT_MSTR
        WHERE CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt;

        if ( SQLCODE != 0 )
        {
         fn_errlog(c_ServiceName, "S31385", SQLMSG, ptr_st_err_msg->c_err_msg );
         return FAILURE;
        }

        rtrim(c_ucc_cd);

        if(DEBUG_MSG_LVL_3)
          fn_userlog(c_ServiceName," VER 5.6 -- Match ID :%s: have UCC code :%s:", ptr_st_pstn_actn->c_cln_mtch_accnt, c_ucc_cd);

        /*** VER 5.6 ends here ***/

		EXEC SQL
      INSERT INTO FUP_FUT_UNDRLYNG_PSTN
      (
        FUP_CLM_MTCH_ACCNT,
        FUP_XCHNG_CD,
        FUP_PRDCT_TYP,
        FUP_INDSTK,
        FUP_UNDRLYNG,
        FUP_CNTRCT_TAG,
        FUP_UIBUY_QTY,
        FUP_UIBUY_VAL,
        FUP_UISELL_QTY,
        FUP_UISELL_VAL,
        FUP_UEXBUY_QTY,
        FUP_UEXBUY_VAL,
        FUP_UEXSELL_QTY,
        FUP_UEXSELL_VAL,
        FUP_UBUY_EXCTD_QTY,
        FUP_USELL_EXCTD_QTY,
        FUP_UOPNPSTN_FLW,
        FUP_UOPNPSTN_QTY,
        FUP_UOPNPSTN_VAL,
        FUP_UMTM_OPN_VAL,
        FUP_UORDR_MRGN,
        FUP_UEXCTD_MRGN,
        FUP_USPREAD_MRGN,
        FUP_USPREAD_PNL,
        FUP_ADD_MRGN_VAL,
        FUP_UTRD_MRGN,
        FUP_TRD_DT,
        FUP_UMIN_TRD_MRGN,
        FUP_UCC_CD    /*ver 5.6*/ 
     )
      VALUES
      (
        :st_undfut_pos_to_be.c_cln_mtch_accnt,
        :st_undfut_pos_to_be.c_xchng_cd,
        :st_undfut_pos_to_be.c_prd_typ,
        :st_undfut_pos_to_be.c_ctgry_indstk,
        :st_undfut_pos_to_be.c_undrlyng,
        :st_undfut_pos_to_be.c_cntrct_tag,
        :st_undfut_pos_to_be.l_ibuy_qty,
        :st_undfut_pos_to_be.d_ibuy_ord_vl,
        :st_undfut_pos_to_be.l_isell_qty,
        :st_undfut_pos_to_be.d_isell_ord_vl,
        :st_undfut_pos_to_be.l_exbuy_qty,
        :st_undfut_pos_to_be.d_exbuy_ord_vl,
        :st_undfut_pos_to_be.l_exsell_qty,
        :st_undfut_pos_to_be.d_exsell_ord_vl,
        :st_undfut_pos_to_be.l_buy_exctd_qty,
        :st_undfut_pos_to_be.l_sell_exctd_qty,
        :st_undfut_pos_to_be.c_opnpstn_flw,
        :st_undfut_pos_to_be.l_opnpstn_qty,
        :st_undfut_pos_to_be.d_org_opn_val,
        :st_undfut_pos_to_be.d_mtm_opn_val,
				:st_undfut_pos_to_be.d_ordr_mrgn,
        :st_undfut_pos_to_be.d_exctd_mrgn,
        :st_undfut_pos_to_be.d_sprd_mrgn,
        :st_undfut_pos_to_be.d_sprd_pl,
        :st_undfut_pos_to_be.d_add_mrgn_val,
        :st_undfut_pos_to_be.d_trd_mrgn,
        :c_trade_dt,
        :st_undfut_pos_to_be.d_mm_trd_mrgn,
        :c_ucc_cd     /* ver 5.6*/  
      );

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31390", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
  }
 	else
  {
 
     /***  Ver 4.0 starts ***/

    EXEC SQL
      SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY')
      INTO   :c_trade_dt
      FROM   EXG_XCHNG_MSTR
      WHERE  EXG_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
      AND    EXG_MKT_TYP = 'D';

    if ( SQLCODE != 0 )
    {
       fn_errlog(c_ServiceName, "S31395", SQLMSG, ptr_st_err_msg->c_err_msg );
       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }
    /***  Ver 4.0 ends ***/

    EXEC SQL
      UPDATE  FUP_FUT_UNDRLYNG_PSTN
      SET     FUP_UIBUY_QTY       = :st_undfut_pos_to_be.l_ibuy_qty,
              FUP_UIBUY_VAL       = :st_undfut_pos_to_be.d_ibuy_ord_vl,
              FUP_UISELL_QTY      = :st_undfut_pos_to_be.l_isell_qty,
              FUP_UISELL_VAL      = :st_undfut_pos_to_be.d_isell_ord_vl,
              FUP_UEXBUY_QTY      = :st_undfut_pos_to_be.l_exbuy_qty,
              FUP_UEXBUY_VAL      = :st_undfut_pos_to_be.d_exbuy_ord_vl,
              FUP_UEXSELL_QTY     = :st_undfut_pos_to_be.l_exsell_qty,
              FUP_UEXSELL_VAL     = :st_undfut_pos_to_be.d_exsell_ord_vl,
              FUP_UBUY_EXCTD_QTY  = :st_undfut_pos_to_be.l_buy_exctd_qty,
              FUP_USELL_EXCTD_QTY = :st_undfut_pos_to_be.l_sell_exctd_qty,
              FUP_UOPNPSTN_FLW    = :st_undfut_pos_to_be.c_opnpstn_flw,
              FUP_UOPNPSTN_QTY    = :st_undfut_pos_to_be.l_opnpstn_qty,
              FUP_UOPNPSTN_VAL    = :st_undfut_pos_to_be.d_org_opn_val,
              FUP_UMTM_OPN_VAL    = :st_undfut_pos_to_be.d_mtm_opn_val,
              FUP_UORDR_MRGN      = :st_undfut_pos_to_be.d_ordr_mrgn,
              FUP_UEXCTD_MRGN     = :st_undfut_pos_to_be.d_exctd_mrgn,
              FUP_USPREAD_MRGN    = :st_undfut_pos_to_be.d_sprd_mrgn,
              FUP_USPREAD_PNL     = :st_undfut_pos_to_be.d_sprd_pl,
              FUP_ADD_MRGN_VAL    = :st_undfut_pos_to_be.d_add_mrgn_val,
              FUP_UTRD_MRGN       = :st_undfut_pos_to_be.d_trd_mrgn,
              FUP_UMIN_TRD_MRGN   = :st_undfut_pos_to_be.d_mm_trd_mrgn,
              FUP_TRD_DT          = :c_trade_dt                            /*** Ver 4.0 ***/ 
      WHERE   FUP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
      AND     FUP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
      AND     FUP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
      AND     FUP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
      AND     FUP_CNTRCT_TAG      = :ptr_st_pstn_actn->c_cntrct_tag;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31400", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }
  }

  /**** Ver 3.4 Starts here ****/
  i_returncode =  fn_calc_trgprc_on_chngmrgn(c_ServiceName,
                                             ptr_st_pstn_actn,
                                             ptr_st_err_msg);
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "S31405", LIBMSG, ptr_st_err_msg->c_err_msg );
    fn_userlog(c_ServiceName,"Pls check, Error in calcualting Auto MTM Trigger Price");
  }
  /**** Ver 3.4 Ends Here ***/


	if(DEBUG_MSG_LVL_3)
  {	
  	fn_userlog(c_ServiceName , "Sucessfully converted Future Position to Futures Plus match a/c - [%s], Underlying - [%s], Expirydate - [%s], Tag - [%c] ", ptr_st_pstn_actn->c_cln_mtch_accnt,
        										 ptr_st_pstn_actn->c_undrlyng,
        										 ptr_st_pstn_actn->c_expry_dt,
        										 ptr_st_pstn_actn->c_cntrct_tag );

	}

  return SUCCESS;
 }

/******* Ver 4.2 Starts here ********/
int fn_calc_min_mrgn( char *c_ServiceName,
                       struct vw_pstn_actn *ptr_st_pstn_actn,
                       struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                       struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                       struct vw_err_msg *ptr_st_err_msg,
                       char   *c_imtm_addmrgn_flg) /*fn_cal_min_mrgn to fn_calc_min_mrgn in Ver TOL */
{

  double  d_loss_prcnt= 0.0;
  double  d_thrshld_mtm_lss_pcntg= 0.0;
  double  d_balance_amt= 0.0;
  double  d_diff_TM = 0.0;
  double  d_bal_to_apply= 0.0;
  double  d_base_prc= 0.0;
  double  d_amnt_blckd  = 0.0;

  char c_pos_avl;
  char  c_err_msg[256];
  char  c_imtm_rmrks[256];

  int i_returncode;
  int i_ret_val;
  int i_trnsctn;

  double d_init_mrgn_prcnt= 0.0;
  long  l_run_no;
  
  TPTRANID tranid ;

  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;
    char  sql_cln_mtch_accnt[11];
    char  sql_xchng_cd[4];
    char  sql_prd_typ;
    char  sql_cntrct_tag;
    char  c_openpstn_flow;
    char  sql_undrlyng[7];
    varchar c_exp_dt[LEN_DATE];
    long    l_count ;
    double  d_prft_loss;
    double  d_avl_mrgn;
    double  d_addnl_mrgn_needed;
    double  d_adhoc_mrgn_needed = 0.0;

    /** Current contract level positions of other contracts in the same  **/
    /** underlying                                                       **/
    struct vw_cntfut_pos st_cntpos_crrnt;
    /** Copy of contract level position on which action is to be done taken **/
    /** before applying the action                                          **/
    struct vw_cntfut_pos st_cntpos_old;
    /** Contract level position on which action is to be done **/
    struct vw_cntfut_pos st_cntpos_md_rc;
  EXEC SQL END DECLARE SECTION;

  strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
  strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
  sql_prd_typ = ptr_st_pstn_actn->c_prd_typ;
  sql_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;

  /** This bit of code down below will fetch all the contract level **/
  /** positions. Then it will find the contract on which the input  **/
  /** action is to be performed and then perform it. It then summs  **/
  /** up all the contract level postion to arrive at a consolidated **/
  /** underlying level position. It then recalculates the margin.   **/
  /** This bit of code need not be performed for actions which do   **/
  /** not involve a change in postion                               **/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Building new underlying position -IMTM" );
  }

  /** Prepare a list of contracts from contract position table **/
  EXEC SQL ALLOCATE :sys_cursor;

    EXEC SQL EXECUTE
      BEGIN
         OPEN :sys_cursor FOR
          SELECT  FFP_CLM_MTCH_ACCNT,
                  FFP_XCHNG_CD,
                  FFP_PRDCT_TYP,
                  FFP_INDSTK,
                  FFP_UNDRLYNG,
                  TO_CHAR (FFP_EXPRY_DT,'DD-Mon-YYYY'),
                  FFP_EXER_TYP,
                  FFP_CNTRCT_TAG,
                  FFP_IBUY_QTY,
                  FFP_IBUY_ORD_VAL,
                  FFP_ISELL_QTY,
                  FFP_ISELL_ORD_VAL,
                  FFP_EXBUY_QTY,
                  FFP_EXBUY_ORD_VAL,
                  FFP_EXSELL_QTY,
                  FFP_EXSELL_ORD_VAL,
                  FFP_BUY_EXCTD_QTY,
                  FFP_SELL_EXCTD_QTY,
                  FFP_OPNPSTN_FLW,
                  FFP_OPNPSTN_QTY,
                  FFP_OPNPSTN_VAL,
                  FFP_MTM_OPN_VAL,
                  FFP_IMTM_OPN_VAL
          FROM    FFP_FO_FUTURES_PSTN
          WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
          AND     FFP_XCHNG_CD       = :sql_xchng_cd
          AND     FFP_PRDCT_TYP      = :sql_prd_typ
          AND     FFP_UNDRLYNG       = :sql_undrlyng
          AND     FFP_CNTRCT_TAG     = :sql_cntrct_tag
          AND     ( FFP_OPNPSTN_QTY   != 0
                  OR (FFP_IBUY_QTY + ABS(FFP_ISELL_QTY) ) > 0 )
          ORDER BY FFP_EXPRY_DT ASC;
        END;
      END-EXEC;

  if ( SQLCODE != 0 )
  {
    EXEC SQL FREE :sys_cursor;
    fn_errlog ( c_ServiceName, "S31410", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  c_pos_avl = 'N';

  /** Fetch one contract at a time from the list. If the fetched  **/
  /** contract is the one we need to apply the change apply it.   **/
  /** Else simply add the contract to  underlying level position  **/
   while ( 1 )
  {
      EXEC SQL  FETCH   :sys_cursor
                INTO    :st_cntpos_crrnt.c_cln_mtch_accnt,
                        :st_cntpos_crrnt.c_xchng_cd,
                        :st_cntpos_crrnt.c_prd_typ,
                        :st_cntpos_crrnt.c_ctgry_indstk,
                        :st_cntpos_crrnt.c_undrlyng,
                        :c_exp_dt,
                        :st_cntpos_crrnt.c_exrc_typ,
                        :st_cntpos_crrnt.c_cntrct_tag,
                        :st_cntpos_crrnt.l_ibuy_qty,
                        :st_cntpos_crrnt.d_ibuy_ord_vl,
                        :st_cntpos_crrnt.l_isell_qty,
                        :st_cntpos_crrnt.d_isell_ord_vl,
                        :st_cntpos_crrnt.l_exbuy_qty,
                        :st_cntpos_crrnt.d_exbuy_ord_vl,
                        :st_cntpos_crrnt.l_exsell_qty,
                        :st_cntpos_crrnt.d_exsell_ord_vl,
                        :st_cntpos_crrnt.l_buy_exctd_qty,
                        :st_cntpos_crrnt.l_sell_exctd_qty,
                        :st_cntpos_crrnt.c_opnpstn_flw,
                        :st_cntpos_crrnt.l_opnpstn_qty,
                        :st_cntpos_crrnt.d_org_opn_val,
                        :st_cntpos_crrnt.d_mtm_opn_val,
                        :st_cntpos_crrnt.d_imtm_opn_val;

      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31415", SQLMSG,
                                          ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
      SETNULL( c_exp_dt );
      strcpy ( st_cntpos_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
      rtrim(st_cntpos_crrnt.c_xchng_cd);
      rtrim(st_cntpos_crrnt.c_undrlyng);
      rtrim(st_cntpos_crrnt.c_expry_dt);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Contract fetched -IMTM : " );
    fn_userlog ( c_ServiceName, "Expiry date       :%s:",c_exp_dt.arr );
    fn_userlog ( c_ServiceName, "Exercise Type     :%c:",st_cntpos_crrnt.c_exrc_typ );
    fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:",st_cntpos_crrnt.l_ibuy_qty );
    fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:",st_cntpos_crrnt.d_ibuy_ord_vl );
    fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:",st_cntpos_crrnt.l_isell_qty );
    fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:",st_cntpos_crrnt.d_isell_ord_vl );
    fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:",st_cntpos_crrnt.l_exbuy_qty );
    fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:",st_cntpos_crrnt.d_exbuy_ord_vl );
    fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:",st_cntpos_crrnt.l_exsell_qty );
    fn_userlog ( c_ServiceName, "EXCH sell val      :%lf:",st_cntpos_crrnt.d_exsell_ord_vl );
    fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:",st_cntpos_crrnt.l_buy_exctd_qty );
    fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:",st_cntpos_crrnt.l_sell_exctd_qty );
    fn_userlog ( c_ServiceName, "Open qty          :%ld:",st_cntpos_crrnt.l_opnpstn_qty );
    fn_userlog ( c_ServiceName, "Original open val :%lf:",st_cntpos_crrnt.d_org_opn_val );
    fn_userlog ( c_ServiceName, "MTMed open val    :%lf:",st_cntpos_crrnt.d_mtm_opn_val );
    fn_userlog ( c_ServiceName, "IMTMed open val   :%lf:",st_cntpos_crrnt.d_imtm_opn_val );
  }


    if(strcmp(c_expry_dt_MTM,NULL)==0)
    {
			if(DEBUG_MSG_LVL_3) /*** Ver 4.6 ***/
			{
				fn_userlog(c_ServiceName,"Inside Expiry Date Check");
			}
      strcpy(c_expry_dt_MTM,(char *)c_exp_dt.arr);
    }

    i_returncode =  fn_apply_cnt_actn ( c_ServiceName,
                                        ptr_st_pstn_actn,
                                        &st_cntpos_crrnt,
                                        ptr_st_err_msg );
    if ( i_returncode == -1 )
    {
      return FAILURE;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog ( c_ServiceName, "Intraday MTMed open val    :%lf:",st_cntpos_crrnt.d_imtm_opn_val );
    }

    memcpy ( &st_cntpos_md_rc, &st_cntpos_crrnt,sizeof( st_cntpos_md_rc ) );

    fn_sum_cpos ( st_cntpos_crrnt,
                  ptr_st_undfut_pos_to_be );

    EXEC SQL
      UPDATE  FFP_FO_FUTURES_PSTN
      SET     FFP_IMTM_OPN_VAL   = :st_cntpos_md_rc.d_imtm_opn_val
      WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
      AND     FFP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
      AND     FFP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
      AND     FFP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
      AND     FFP_EXPRY_DT       = to_date(:st_cntpos_md_rc.c_expry_dt,
                                      'DD-Mon-YYYY')
      AND     FFP_EXER_TYP       = :st_cntpos_md_rc.c_exrc_typ
      AND     FFP_CNTRCT_TAG     = :ptr_st_pstn_actn->c_cntrct_tag;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31420", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }
  }
  
  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Calculating margin - IMTM" );
  }

  /** Calculate the margin on the new underlying position **/
  i_returncode = fn_upd_mrgn ( c_ServiceName,
                               ptr_st_pstn_actn,
                               ptr_st_undfut_pos_crrnt,
                               ptr_st_undfut_pos_to_be,
                               ptr_st_err_msg);

  if ( i_returncode == -1 )
  {
    return FAILURE;
  }

return 0;
}
/******* Ver 4.2 Ends Here **********/
   
