/******************************************************************************/
/*	Program	    			:	SFO_UPD_LONG_QT                                       */
/*                                                                            */
/*  Input             : vw_cntrctlong_qt                                      */
/*                                                                            */
/*  Output            : vw_cntrctlong_qt                                      */
/*										  vw_err_msg                                            */
/*                                                                            */
/*  Description       : This service inserts/updates detailed quotes of a     *//*											contract viz: Last traded time, last traded price,    *//*                      last traded qty, avg. traded price, best five bids    *//*                      and offers, total qty and value traded, total bid     *//*                      and offer qty and open interest details.              */
/*                                                                            */
/*  Log               : 1.0	22-Sep-2001	Ramesh Reddy.V                        */
/*                    : 1.1 18-Dec-2007 Vidyayini Krish                       */
/*                    : 1.2 19-Aug-2008 Shailesh Hinge                        */
/*                    : 1.3 24-Feb-2014 Sachin Birje                          */
/*                                                                            */
/******************************************************************************/
/*	1.0		-		New Release                                                     */
/*  1.1   -   IBM Changes                                                     */
/*  1.2  -    Quote changes of Best five bids & Offer                         */
/*  1.3  -    Replacing fn_begintran & fn_committran with new functions       */
/*       -    fn_nolog_begintran & fn_nolog_committran.                       */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h> /* Ver 1.1 */
#include <fn_read_debug_lvl.h> /* Ver 1.1 */

void SFO_UPD_LONG_QT( TPSVCINFO *rqst )
{
  char  c_ServiceName[33];
  char  c_errmsg[256];
	
	int		i_trnsctn = 0;

  EXEC SQL BEGIN DECLARE SECTION;
    struct  vw_cntrctlong_qt *ptr_st_cntrctlong_qt;
    varchar c_expiry_dt [ LEN_DATE ];
    varchar c_lst_trd_tm [ LEN_DATE ];
    double  d_date_diff;
  EXEC SQL END DECLARE SECTION;

  struct vw_err_msg *ptr_st_err_msg;

  ptr_st_cntrctlong_qt = ( struct vw_cntrctlong_qt * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);

  ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
  if ( ptr_st_err_msg ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31005", TPMSG, c_errmsg );
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }

  memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_cntrctlong_qt->c_expry_dt );
  SETLEN ( c_expiry_dt );
  strcpy ( (char *)c_lst_trd_tm.arr, ptr_st_cntrctlong_qt->c_lst_trdd_time );
  SETLEN ( c_lst_trd_tm );


  /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_cntrctlong_qt->c_rout_crt );

			/*** i_trnsctn =  fn_begintran( c_ServiceName, c_errmsg ); *** Ver 1.3 ***/
      i_trnsctn =  fn_nolog_begintran( c_ServiceName, c_errmsg ); /*** Ver 1.3 ***/
			if ( i_trnsctn == -1 )
			{
      	strcpy ( ptr_st_err_msg->c_err_msg, c_errmsg );
      	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
			}
  
			switch (ptr_st_cntrctlong_qt->c_rqst_typ)
			{
				case UPDATE_PRICE_QT:
					/**if(strcmp((char *)c_lst_trd_tm.arr,"01-Jan-1980 00:00:00")!= 0) **commented for Ver 1.2**/
					if(strcmp((char *)c_lst_trd_tm.arr,"01-Jan-1980 00:00:00")!= 0 || ptr_st_cntrctlong_qt->l_bst_bid_qty[0] !=0 || ptr_st_cntrctlong_qt->l_bst_offr_qty[0] !=0) /**Ver 1.2**/
          {
					EXEC SQL
						UPDATE ftq_fo_trd_qt
							 SET ftq_lst_trd_prc   = :ptr_st_cntrctlong_qt->l_lst_trdd_prc,
									 ftq_lst_trd_tm    = to_date( :c_lst_trd_tm,
														                  'dd-Mon-yyyy hh24:mi:ss' ),
									 ftq_lst_trd_qty   = :ptr_st_cntrctlong_qt->l_lst_trdd_qty,
                   ftq_tot_qty_trdd  = :ptr_st_cntrctlong_qt->l_tot_trdd_qty,
									 ftq_avrg_trd_prc  = :ptr_st_cntrctlong_qt->l_avg_trdd_prc,
						       ftq_bst1_bid_prc  = :ptr_st_cntrctlong_qt->l_bst_bid_prc[0],
       		         ftq_bst2_bid_prc  = :ptr_st_cntrctlong_qt->l_bst_bid_prc[1], 
	                 ftq_bst3_bid_prc  = :ptr_st_cntrctlong_qt->l_bst_bid_prc[2],
 		               ftq_bst4_bid_prc  = :ptr_st_cntrctlong_qt->l_bst_bid_prc[3],
                   ftq_bst5_bid_prc  = :ptr_st_cntrctlong_qt->l_bst_bid_prc[4],
                   ftq_bst1_bid_qty  = :ptr_st_cntrctlong_qt->l_bst_bid_qty[0],
                   ftq_bst2_bid_qty  = :ptr_st_cntrctlong_qt->l_bst_bid_qty[1],
								   ftq_bst3_bid_qty  = :ptr_st_cntrctlong_qt->l_bst_bid_qty[2],
                   ftq_bst4_bid_qty  = :ptr_st_cntrctlong_qt->l_bst_bid_qty[3],
                   ftq_bst5_bid_qty  = :ptr_st_cntrctlong_qt->l_bst_bid_qty[4],
			             ftq_bst1_offr_prc = :ptr_st_cntrctlong_qt->l_bst_offr_prc[0],
								   ftq_bst2_offr_prc = :ptr_st_cntrctlong_qt->l_bst_offr_prc[1],
							     ftq_bst3_offr_prc = :ptr_st_cntrctlong_qt->l_bst_offr_prc[2],
                   ftq_bst4_offr_prc = :ptr_st_cntrctlong_qt->l_bst_offr_prc[3],
                   ftq_bst5_offr_prc = :ptr_st_cntrctlong_qt->l_bst_offr_prc[4],
								   ftq_bst1_offr_qty = :ptr_st_cntrctlong_qt->l_bst_offr_qty[0],
                   ftq_bst2_offr_qty = :ptr_st_cntrctlong_qt->l_bst_offr_qty[1],
                   ftq_bst3_offr_qty = :ptr_st_cntrctlong_qt->l_bst_offr_qty[2],
                   ftq_bst4_offr_qty = :ptr_st_cntrctlong_qt->l_bst_offr_qty[3],
                   ftq_bst5_offr_qty = :ptr_st_cntrctlong_qt->l_bst_offr_qty[4],
  								 ftq_tot_bid_qty   = :ptr_st_cntrctlong_qt->d_tot_bid_qty,
  								 ftq_tot_offr_qty  = :ptr_st_cntrctlong_qt->d_tot_offr_qty
					 WHERE	 ftq_xchng_cd      = :ptr_st_cntrctlong_qt->c_xchng_cd
					   AND	 ftq_prdct_typ     = :ptr_st_cntrctlong_qt->c_prd_typ
						 AND   ftq_indstk        = :ptr_st_cntrctlong_qt->c_ctgry_indstk	
						 AND   ftq_undrlyng	     = :ptr_st_cntrctlong_qt->c_undrlyng
						 AND   ftq_expry_dt      = to_date ( :c_expiry_dt, 'dd-Mon-yyyy' )
		  			 AND	 ftq_exer_typ	     = :ptr_st_cntrctlong_qt->c_exrc_typ
			 			 AND	 ftq_opt_typ		   = :ptr_st_cntrctlong_qt->c_opt_typ
						 AND	 ftq_strk_prc	     = :ptr_st_cntrctlong_qt->l_strike_prc;	

    			if ( SQLCODE != 0 )
    			{
      			fn_errlog ( c_ServiceName, "S31010", SQLMSG, 
																				ptr_st_err_msg->c_err_msg );
						fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    			}
				}
				else
				{
					if(DEBUG_MSG_LVL_3){
					fn_userlog ( c_ServiceName,"c_xchng_cd    :%s:", ptr_st_cntrctlong_qt->c_xchng_cd );
					fn_userlog ( c_ServiceName, "c_prd_typ    :%c:", ptr_st_cntrctlong_qt->c_prd_typ );
					fn_userlog ( c_ServiceName, "c_undrlyng   :%s:", ptr_st_cntrctlong_qt->c_undrlyng );
					fn_userlog ( c_ServiceName, "c_expiry_dt  :%s:",  c_expiry_dt.arr );
					fn_userlog ( c_ServiceName, "c_exrc_typ   :%c:", ptr_st_cntrctlong_qt->c_exrc_typ );
					fn_userlog ( c_ServiceName, "c_opt_typ    :%c:", ptr_st_cntrctlong_qt->c_opt_typ );
					fn_userlog ( c_ServiceName, "l_strike_prc :%ld:", ptr_st_cntrctlong_qt->l_strike_prc );
					fn_userlog ( c_ServiceName, "c_rqst_typ :%c:", ptr_st_cntrctlong_qt->c_rqst_typ );
					fn_userlog ( c_ServiceName, "l_lst_trdd_prc :%ld:", ptr_st_cntrctlong_qt->l_lst_trdd_prc );
					fn_userlog ( c_ServiceName, "ftq_lst_trd_tm :%s:", c_lst_trd_tm.arr );
					}
				}
				break;
	    default:
 	      fn_errlog ( c_ServiceName, "S31015", "Invalid Operation Type", 
																			ptr_st_err_msg->c_err_msg);
      	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      	break;
		}
		/*** if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 ) ** Ver 1.3 ***/
    if ( fn_nolog_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )
    {
      strcpy ( ptr_st_err_msg->c_err_msg, c_errmsg );
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }
	tpfree ( ( char * ) ptr_st_err_msg );
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_cntrctlong_qt, 0, 0 );
}

