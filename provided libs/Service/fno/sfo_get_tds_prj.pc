/******************************************************************************/
/*	Program	    			:	SFO_GET_TDS_PRJ                                       */
/*                                                                            */
/*  Input             : FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_FROM_DT                                           */
/*                      FFO_TO_DT                                             */
/*                      FFO_ROUT_CRT                                          */
/*                                                                            */
/*  Output            : FFO_TRD_DT  		                                      */
/*                      FFO_NARRATION_ID                                      */
/*                      FFO_AMOUNT                                            */
/*                      FFO_REF_NO                                            */
/*                                                                            */
/*  Description       : This service gives you TDS  projection details for    */
/*                      the given parameters. User has to specify the         */
/*                      parameters viz. Match account number, from date,      */
/*                      to date, session id and user id.                      */
/*                                                                            */
/*  Log               :                                                       */
/*                                                                            */
/******************************************************************************/
/*      08-Mar-2007     Version 1.0      ABHISHEK 					Release 1.0       */
/*      03-Mar-2008			Version 1.1      Sandeep						IBM CHANGES				*/
/*			21-Apr-2010     Version 1.2			 Sandeep          	CRCSN43261				*/
/*																											NRI Set Off N Changes	*/
/*			19-Nov-2010			Version	1.3			 Sandeep						Silver Light			*/
/*			18-Apr-2011			Version 1.4			 Shamili					Buffer size increase*/
/*      12-Sep-2011     Version 1.5      Mahesh           FNO_OPTIMISATION    */
/*      20-Dec-2021			Version 1.6      Bilal					  Minor Changes 		  */
/*      23-May-2023     Version 1.7      Vipul Sharma     Core Fix   					*/
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */

#include <fo.h>
#include <fml_def.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>			/*** Ver 1.1 ***/
#include <fn_read_debug_lvl.h>			/*** Ver 1.1 ***/


void SFO_GET_TDS_PRJ( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Obuf;
	FBFR32 *ptr_fml_temp_buffer;          /* Ver 1.5 Temp Buffer Pointer for Reallocation */
 
	char c_ServiceName[33];
	char c_err_msg[256];
	int i_returncode;
	int i_err[5];			/***	Ver	1.3	***/
	int i_ferr[5];		/***	Ver	1.3	***/
	int i_cnt;
	int i_mnth_cnt = 1;
	int	i_rec_cnt;			/***	Ver	1.3	***/
	char c_rqst_typ = '\0' ;    /***  Ver 1.6  ***/

	EXEC SQL BEGIN DECLARE SECTION;
	struct vw_usr_prfl st_usr_prfl;
	char 			c_from_dt [LEN_DATE];
	char 			c_to_dt [LEN_DATE];
	char			c_cln_mtch_accnt[11];			/***	Ver	1.3	***/
	varchar 	c_date [ LEN_DATE ];
	varchar 	c_narration[20];
	varchar		c_rmrks[2500];
	varchar		c_tds[2500];
	double 		d_amount;
	double 		d_cum_pl;
	double		d_tds;                    /***  Ver 1.6  ***/
	char      c_user_id[ 15 ];          /** Ver 1.5 **/

	EXEC SQL END DECLARE SECTION;

	MEMSET(c_date.arr);                 /***  Ver 1.6  ***/	

	sql_cursor cur_tds_prj;             /** Ver 1.5 **/

	struct vw_err_msg st_err_msg;

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );

	INITDBGLVL(c_ServiceName);			/*** Ver 1.1 ***/
	
	/* Store the input value in the view vw_usr_prfl */
  i_returncode = Fvftos32( ptr_fml_Ibuf, (char *)&st_usr_prfl, "vw_usr_prfl" );

  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );
	
	i_err[0] = Fget32( ptr_fml_Ibuf, FFO_FROM_DT, 0, (char *)c_from_dt,0);
  i_ferr [0] = Ferror32;

	i_err[1] = Fget32( ptr_fml_Ibuf, FFO_TO_DT, 0, (char *)c_to_dt,0);
  i_ferr [1] = Ferror32;

	if (DEBUG_MSG_LVL_3) 			 /*** Ver 1.1 ***/
	{
		fn_userlog( c_ServiceName, "In tds projection");
	}

	for ( i_cnt = 0; i_cnt < 2;i_cnt++ )  
	{
  	if ( i_err[i_cnt] == -1 )
  	{
			fn_userlog( c_ServiceName, "Error occured while fget %d",i_err[i_cnt] );
     	fn_errlog( c_ServiceName, "S31010", Fstrerror32(i_ferr[0]),c_err_msg);
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
	}

	if (DEBUG_MSG_LVL_3) 			 /*** Ver 1.1 ***/
	{
		fn_userlog( c_ServiceName, " c_user_id : [%s] ", st_usr_prfl.c_user_id );
		fn_userlog( c_ServiceName, " c_session id : [%ld] ", st_usr_prfl.l_session_id );
		fn_userlog( c_ServiceName, " c_cln_mtch_accnt : [%s] ", st_usr_prfl.c_cln_mtch_accnt );
		fn_userlog( c_ServiceName, " c_from_dt : [%s] ", c_from_dt );
		fn_userlog( c_ServiceName, " c_to_dt : [%s] ", c_to_dt );
	}

  /* Check the session */
  i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl, &st_err_msg ) ;

  if ( i_returncode == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


	EXEC SQL
	SELECT 	to_number(to_char(to_date(:c_from_dt, 'DD-Mon-YYYY'),'MM'))-
					to_number(to_char(to_date(:c_to_dt, 'DD-Mon-YYYY'),'MM'))
	INTO		:i_mnth_cnt				
	FROM 		DUAL;

	if ( SQLCODE != 0 )
	{
  	fn_errlog( c_ServiceName, "S31015", SQLMSG,c_err_msg);
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	/***	Commented In Ver 1.2
	if( i_mnth_cnt > 0 )
	{
  	fn_errlog( c_ServiceName, "S31020", "To date cannot be greater than from date",c_err_msg);
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	******************************/

	else if( i_mnth_cnt == 0 )
	{
		i_mnth_cnt = 1;
	}

	/*********	Commented In Ver 1.2
	ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN * (i_mnth_cnt + 1) );
	***************/


	/***	Ver	1.3	Starts	***/
	/***************** Ver 1.5 Comment Starts ********************************

	if(tpbegin( TRAN_TIMEOUT, 0 ) == -1)
  {
    fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if(	strcmp(st_usr_prfl.c_cln_mtch_accnt	,	"*" )	==	0	)
	{
		if ( st_usr_prfl.c_user_id[0] == BPID )
		{
			EXEC SQL
				INSERT INTO	FDM_DT_MTCH
				SELECT	CLM_MTCH_ACCNT
				FROM	 	CLM_CLNT_MSTR
				WHERE 	CLM_BP_ID = :st_usr_prfl.c_user_id;
	
			if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg );
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpcommit(0);
        tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
      }
      i_rec_cnt = sqlca.sqlerrd[2];
		}
		else
		{
			EXEC SQL
				INSERT  INTO  FDM_DT_MTCH
				SELECT  UAC_CLM_MTCH_ACCNT
				FROM 		UAC_USR_ACCNTS
				WHERE   UAC_USR_ID = :st_usr_prfl.c_user_id ;

			if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpcommit(0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		}

	  i_rec_cnt = sqlca.sqlerrd[2];
	}
	else
	{
		EXEC SQL
			INSERT  INTO  FDM_DT_MTCH
			VALUES	(:st_usr_prfl.c_cln_mtch_accnt);
	
		if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpcommit(0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		i_rec_cnt	=	1;

	}
	********************* Ver 1.5 Comment Ends ****************/

	/**** Ver 1.4	Changed from i_rec_cnt to i_rec_cnt * 10 ****/

	/***	Commented In Ver 1.5 As Globel Table FDM_DT_MTCH Removed i_rec_cnt remains 0
  
	ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN * i_rec_cnt * 10 ); 	***	Ver 1.2	***	***	Ver	1.3  Changed From 10 To i_rec_cnt	***

	********************************/


	/*****************************************	Commented In Ver	1.3

  if ( Fadd32 ( ptr_fml_Obuf, FFO_EBA_MTCH_ACT_NO, (char *)st_usr_prfl.c_cln_mtch_accnt, 0 ) == -1 )
  {
    fn_errlog( c_ServiceName, "S31045", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpcommit(0);			
    tpfree ( ( char * ) ptr_fml_Obuf );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	************************************************************************/
 
	/************* Ver 1.5 Changes Start ****************************/
	
	EXEC SQL ALLOCATE :cur_tds_prj;                 /****** Ver 1.5 Allocate cursor  ***********/

/***  Ver 1.6 Starts  ***/
	if((strcmp(st_usr_prfl.c_user_id,"system")== 0 ) && ( st_usr_prfl.l_session_id == 0 ))
	{
		i_err[0] = Fget32( ptr_fml_Ibuf, FFO_RQST_TYP, 0, (char *)&c_rqst_typ,0);
		if(( i_err[0] == -1 ) && ( Ferror32 != FNOTPRES))	
		{
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		if( c_rqst_typ == 'T' ) 
		{
			strcpy ( c_cln_mtch_accnt, st_usr_prfl.c_cln_mtch_accnt);

			EXEC SQL EXECUTE
			BEGIN
			OPEN :cur_tds_prj for
			SELECT MTS_CLM_MTCH_ACCNT,
						 MTS_TRD_DATE,
						 MTS_CURR_PL,
						 MTS_TDS_LIAB
			FROM MTS_MON_TDS_SMRY
			WHERE MTS_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
			AND	MTS_TRD_DATE BETWEEN :c_from_dt AND :c_to_dt;
			END;
			END-EXEC;
			
			i_rec_cnt = sqlca.sqlerrd[2];

			if ( SQLCODE != 0 || SQLCODE == NO_DATA_FOUND )
  		{
    		fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}

			ptr_fml_Obuf = NULL;
	
			while(1)
			{
				EXEC SQL 
				FETCH :cur_tds_prj
				INTO :c_cln_mtch_accnt,
						 :c_date,
						 :d_cum_pl,
						 :d_tds;
 
				if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
   	 	  {
      	 	fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg );
     		 	EXEC SQL FREE :cur_tds_prj;
     		 	tpfree ( ( char * ) ptr_fml_Obuf );
     		 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   			}
				if ( SQLCODE == NO_DATA_FOUND )
				{
					break;	
				}
				
				i_returncode = fn_pack_vartofml( c_ServiceName,
																				 c_err_msg,
																				 &ptr_fml_Obuf,
																				 3,
																				 FFO_TRD_DT, (char *)c_date.arr,
																				 FFO_TOTAL_PL, (char *)&d_cum_pl,
																				 FFO_RATE, (char *)&d_tds);
				
				if( i_returncode == -1 )
				{
        	fn_errlog( c_ServiceName, "S31060", LIBMSG, c_err_msg );
          EXEC SQL FREE :cur_tds_prj;
        	tpfree ( ( char * ) ptr_fml_Obuf );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
				}


			}
			EXEC SQL FREE :cur_tds_prj;
			tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );
}}
/***  Ver 1.6 ENDS  ***/ 
	if( strcmp( st_usr_prfl.c_cln_mtch_accnt , "*" ) == 0 )
  {
  	fn_userlog(c_ServiceName," Match id is '*' ");
    strcpy ( c_user_id, st_usr_prfl.c_user_id);

		if( st_usr_prfl.c_user_id[0] == BPID )
    {
    	fn_userlog(c_ServiceName,"BPID");

			EXEC SQL EXECUTE
            BEGIN
            	OPEN  	:cur_tds_prj for
            	SELECT  MTS_CLM_MTCH_ACCNT,
            					TO_CHAR( MTS_TRD_DATE, 'DD-Mon-YYYY' ),
            					'WHT For NRI',
            					ROUND(MTS_CUM_TDS_LIAB),
            					'B/F PL : ' || to_char(MTS_CUMPL_CARRY_FRWRD/100,'9999999999990.00')||', Curr Mth :'||to_char (MTS_CURR_PL/100,'9999999999990.00')||',CUM PL :'||to_char(MTS_CUM_PL/100,'999999999999.00')||', CUM WHT : ',
            					TO_CHAR(MTS_CUM_TDS_LIAB/100,'999999999999.00'),
            					TRUNC(MTS_CUM_PL/100,2)
             	FROM    MTS_MON_TDS_SMRY,
                    	CLM_CLNT_MSTR
             WHERE  	MTS_UPLD_FLG ='Y'
             AND    	MTS_TRD_DATE BETWEEN :c_from_dt AND :c_to_dt
             AND    	CLM_BP_ID  = :c_user_id
             AND    	MTS_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
             ORDER BY MTS_TRD_DATE;

             END;
             END-EXEC;

             i_rec_cnt = sqlca.sqlerrd[2];  

    }
    else
    {
      fn_userlog(c_ServiceName,"NON BPID");
      	
		  EXEC SQL EXECUTE
         	  BEGIN
         	    OPEN  	:cur_tds_prj for
         	    SELECT  MTS_CLM_MTCH_ACCNT,
         			    		to_char( MTS_TRD_DATE, 'DD-Mon-YYYY' ),
         					    'WHT For NRI',
            					ROUND(MTS_CUM_TDS_LIAB),
            					'B/F PL : ' || to_char(MTS_CUMPL_CARRY_FRWRD/100,'9999999999990.00')||', Curr Mth :'||to_char (MTS_CURR_PL/100,'9999999999990.00')||', CUM PL :'||to_char(MTS_CUM_PL/100,'999999999999.00')||', CUM WHT : ',
            					TO_CHAR(MTS_CUM_TDS_LIAB/100,'999999999999.00'),
            					TRUNC(MTS_CUM_PL/100,2)
             FROM    	MTS_MON_TDS_SMRY,
                     	UAC_USR_ACCNTS
            WHERE  		MTS_UPLD_FLG ='Y'
            AND     	MTS_TRD_DATE BETWEEN :c_from_dt AND :c_to_dt
						AND       UAC_USR_ID = :c_user_id
            AND   		MTS_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
            ORDER BY  MTS_TRD_DATE;

            END;
            END-EXEC;

            i_rec_cnt = sqlca.sqlerrd[2];
		}

  }
  else
  {

    fn_userlog(c_ServiceName," Match id from user profile ");
    strcpy ( c_cln_mtch_accnt, st_usr_prfl.c_cln_mtch_accnt);
 
						
    EXEC SQL EXECUTE
     			BEGIN
     				OPEN  	 :cur_tds_prj for
     				SELECT   MTS_CLM_MTCH_ACCNT,
         						 TO_CHAR( MTS_TRD_DATE, 'DD-Mon-YYYY' ),
         						 'WHT For NRI',
         						 ROUND(MTS_CUM_TDS_LIAB),
         						 'B/F PL : ' || to_char(MTS_CUMPL_CARRY_FRWRD/100,'9999999999990.00')||', Curr Mth :'||to_char (MTS_CURR_PL/100 ,'9999999999990.00')||', CUM PL :'||to_char(MTS_CUM_PL/100,'999999999999.00')||', CUM WHT : ',
         						 TO_CHAR(MTS_CUM_TDS_LIAB/100,'999999999999.00'),
         						 TRUNC(MTS_CUM_PL/100,2)
         	 FROM      MTS_MON_TDS_SMRY
         	 WHERE     MTS_UPLD_FLG ='Y'
         	 AND       MTS_TRD_DATE
         	 BETWEEN   :c_from_dt AND :c_to_dt
         	 AND       MTS_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
         	 ORDER BY  MTS_TRD_DATE;

     			 END;
     			 END-EXEC;
            				
					 i_rec_cnt = sqlca.sqlerrd[2];
	}

	/**************** Ver 1.5 End **************/	
	/**************** Ver 1.5 Commented *********

	EXEC SQL
    DECLARE cur_tds_prj CURSOR for
    SELECT	MTS_CLM_MTCH_ACCNT,			***	Ver	1.3	***
					 	to_char( MTS_TRD_DATE, 'DD-Mon-YYYY' ),
						'WHT For NRI',
           	round(MTS_CUM_TDS_LIAB),
					
						***	Commented In Ver 1.2
						'CUM PL : '||to_char(MTS_CUM_PL/100,'999999999999.00')||' , CUM TDS : ',
						to_char(MTS_CUM_TDS_LIAB/100,'999999999999.00'),
						**********************

						***	Added In Ver 1.2	***

						'B/F PL : ' || to_char(MTS_CUMPL_CARRY_FRWRD/100,'9999999999990.00')||', Curr Mth :'|| 
						to_char (MTS_CURR_PL/100 ,'9999999999990.00')||', CUM PL : '||to_char(MTS_CUM_PL/100,'999999999999.00')||', CUM WHT : ',
						to_char(MTS_CUM_TDS_LIAB/100,'999999999999.00'),
						trunc(MTS_CUM_PL/100,2)
    FROM   	MTS_MON_TDS_SMRY,FDM_DT_MTCH			***	Ver	1.3	***
    WHERE  	MTS_CLM_MTCH_ACCNT = FDM_CLM_MTCH_ACCNT			***	Ver	1.3	***
**    WHERE  	MTS_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt			Commented In Ver	1.3	***
		AND			MTS_TRD_DATE
		BETWEEN	:c_from_dt AND :c_to_dt
		AND     MTS_UPLD_FLG ='Y'
		ORDER BY MTS_TRD_DATE; 

	EXEC SQL
		OPEN cur_tds_prj;	
	
	*************************** Ver 1.5 *******************/
	
	if ( SQLCODE != 0 ) 
  {
    fn_errlog( c_ServiceName, "S31065", SQLMSG, c_err_msg );
    tpfree ( ( char * ) ptr_fml_Obuf );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		/*** tpcommit(0);        Commented in Ver 1.5 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if (DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"i_rec_cnt is |%d|",i_rec_cnt);
	}

	ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN * i_rec_cnt * 10 );/***	Ver	1.5	Allocation of Memory ***/
	
	while(1) 
	{

		EXEC SQL
			FETCH :cur_tds_prj
			INTO	:c_cln_mtch_accnt,			/***	Ver	1.3	***/
						:c_date,
						:c_narration,
						:d_amount,
						:c_rmrks,
						:c_tds,
						:d_cum_pl;

		if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "S31070", SQLMSG, c_err_msg );
     /******** EXEC SQL
     ********* CLOSE cur_tds_prj; *************************** Ver 1.5  ***/
			EXEC SQL FREE :cur_tds_prj;
      tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		 /***	tpcommit(0);      Commented in Ver 1.5 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if( SQLCODE == NO_DATA_FOUND )
    {
      break;
    }

		SETNULL(c_rmrks);
		SETNULL(c_tds);
		SETNULL(c_date);
		SETNULL(c_narration);

		d_amount = d_amount/100.00;

		if ( d_cum_pl <= 0.0)
		{
			d_amount =0.0;
			strcat((char *)c_rmrks.arr,"0.00");
		}
		else
		{
			strcat((char *)c_rmrks.arr,(char *)c_tds.arr);
		}

		if (DEBUG_MSG_LVL_3) 			 /*** Ver 1.1 ***/
		{
			fn_userlog( c_ServiceName, "In the cursor" );
			fn_userlog( c_ServiceName, "Trade date [%s] ",c_date.arr );
			fn_userlog( c_ServiceName, "Match  Account Is :%s:",c_cln_mtch_accnt);			/***	Ver	1.3	***/
			fn_userlog( c_ServiceName, "Amount [%lf] ",d_amount );
			fn_userlog( c_ServiceName, "Cum PL [%lf] ",d_cum_pl );
			fn_userlog( c_ServiceName, "CTDS [%s] ",c_tds.arr );
			fn_userlog( c_ServiceName, "Remarks [%s]",c_rmrks.arr );
		}

	  fn_userlog( c_ServiceName, "Remarks [%s]",c_rmrks.arr );

		/********* Ver 1.5 Memory Reallocation *******/
		
    if (Funused32(ptr_fml_Obuf) < Fneeded32(1,MIN_FML_BUF_LEN ))
    {
			 if (DEBUG_MSG_LVL_3)
			 {	
			 		fn_userlog(c_ServiceName,"-----************* Inside Memory Reallocation. *********------");
			 }
	
			 i_rec_cnt++;
		
       ptr_fml_temp_buffer = (FBFR32*)tprealloc((char*)ptr_fml_Obuf,MIN_FML_BUF_LEN * i_rec_cnt * 10 );
       
			 if (ptr_fml_temp_buffer == NULL)
       {
          tpfree((char* )ptr_fml_Obuf);
          fn_errlog( c_ServiceName, "S31075", TPMSG, c_err_msg );
       }
       else
       {
          ptr_fml_Obuf = ptr_fml_temp_buffer;
					fn_userlog ( c_ServiceName,"  Memory Reallocation done.");
       }
    }
		/********* Ver 1.5 End of Reallocation ***************/
			
		i_err[0] = Fadd32 ( ptr_fml_Obuf, FFO_TRD_DT, (char *)c_date.arr, 0 );
    i_ferr[0] = Ferror32;

		i_err[1] = Fadd32 ( ptr_fml_Obuf, FFO_NARRATION_ID,(char *)c_narration.arr, 0 );
    i_ferr[1] = Ferror32;

    i_err[2] = Fadd32 ( ptr_fml_Obuf, FFO_AMOUNT, (char *)&d_amount, 0 );
    i_ferr[2] = Ferror32;

    i_err[3] = Fadd32 ( ptr_fml_Obuf, FFO_REF_NO, (char *)c_rmrks.arr, 0 );
    i_ferr[3] = Ferror32;

    i_err[4] = Fadd32 ( ptr_fml_Obuf, FFO_EBA_MTCH_ACT_NO, (char *)c_cln_mtch_accnt, 0 );			/***	Ver	1.3	***/
    i_ferr[4] = Ferror32;
		
		for(i_cnt = 0; i_cnt < 5; i_cnt++)
    {
    	if ( i_err [ i_cnt ] == -1 )
    	{
    		fn_userlog(c_ServiceName,"i_cnt : %d",i_cnt);
    		fn_errlog( c_ServiceName, "S31080", Fstrerror32 ( i_ferr[i_cnt] ), c_err_msg  );
    	/*********	EXEC SQL
    				      CLOSE cur_tds_prj;       ********* Ver 1.5 ******/
				EXEC SQL FREE :cur_tds_prj;	
    		tpfree ( ( char * ) ptr_fml_Obuf );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				/***     tpcommit(0);      Commented in Ver 1.5 ***/
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
    }
	}

  /********* EXEC SQL CLOSE cur_tds_prj;   ******* Ver 1.5 Commented *******/
 	EXEC SQL FREE :cur_tds_prj;             /******* Ver 1.5 Free Cursor *****/ 	
	/*Commented Ver 1.7 tpfree( (char *) ptr_fml_Ibuf ); */

	/******	tpcommit(0);       Ver 1.5 Commented ********/

	tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );
}
