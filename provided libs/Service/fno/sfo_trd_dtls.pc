/******************************************************************************/
/*	Program	    			:	SFO_TRD_DTLS                                          */
/*                                                                            */
/*  Input             : FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_ORDR_RFRNC                                        */
/*                      FFO_ROUT_CRT                                          */
/*                                                                            */
/*  Output            : FFO_XCHNG_CD                                          */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_TRD_RFRNC                                         */
/*                      FFO_ORDR_RFRNC                                        */
/*                      FFO_ACK_NMBR                                          */
/*                      FFO_XCHNG_TRD_NO                                      */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_TRD_DT                                            */
/*                      FFO_TRNSCTN_TYP                                       */
/*                      FFO_TRD_FLW                                           */
/*                      FFO_EXEC_QTY                                          */
/*                      FFO_EXCTD_RT                                          */
/*                      FFO_FRS_BRKG                                          */
/*                      FFO_CVR_BRKG                                          */
/*                                                                            */
/*  Description       : To display all the trades for a given order           */
/*                      reference                                             */
/*                                                                            */
/*  Log               : 1.0  10-Oct-2001   S. Swaminathan                     */
/*										:	1.1	 19-Dec-2007	 S.K.S.	-		IBM Migration						*/
/*                    : 1.2  06-Mar-2013   Sachin Birje                       */
/*                    : 1.4  27-Feb-2016   Sandip Tambe                       */
/*                    : 1.6  28-Jun-2016   Sandip Tambe                       */
/*                    : 1.7  10-Mar-2017   Anand Dhopte                       */
/*                    : VQC  23-Jan-2017   Vishal Borhade                     */
/*                    : 1.8  14-Oct-2017   Samip M														*/
/*                    : 1.9  08-Aug-2018   Parag Kanojia                      */
/*                    : 2.0  24-Dec-2019   Anand Dhopte                       */
/*                    : 2.1  19-Nov-2020   Akash B                            */      
/*                    : 2.2  29-Apr-2021   Navina D.                          */      
/******************************************************************************/
/*  1.0   -  New Release                                                      */
/*  1.2   -  GAME Simulator Changes                                           */
/*  1.4   -  Trade Book Changes for scheme details Display										*/
/*  1.6   -  Core fix tpfree handling                     										*/
/*  1.7   -  Optimization Changes                                             */
/*  VQC   -  Verion Quality Control                                           */
/*  1.8   -  Bullet Brokerage Plan                                            */
/*  1.9   -  Rollover With Spread Changes                                     */
/*  2.0   -  CR_ISEC14_131137 - Option 20 Brokerage Changes                   */
/*  2.1   -  Full and Lite brokerage model changes                            */
/*  2.2   -  Brokerage and charges for itrade                                 */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_session.h> 
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>             /*  Ver 1.1 : Added 	*/
#include <fn_read_debug_lvl.h>  /*  Ver 1.1 : Added   */

void SFO_TRD_DTLS( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Obuf;

	char c_ServiceName[33];

	varchar c_errmsg[256];   /** Datatype of variable changed from char to varchar in Ver VQC **/
	MEMSET(c_errmsg);        /** Added in Ver VQC **/

  char c_rqst_typ='N';	/** Ver 1.4 **/
	char c_brkg_typ='N';  /** Ver 1.4 **/
	char c_mtch_accnt_no[11]={'\0'}; /** Ver 1.4 **/

	/** Commented following unused variable in Ver VQC **

	char c_undrlyng[6] ={'\0'};    ** Ver 1.4 **
	
	***/

	char c_prd_typ = '\0';                /** Ver 1.4 **/  /** Initialised in Ver VQC **/

	/*** Commented unused following variables in Ver VQC **

	char c_clm_brkr_cmpt_flg;			 ** Ver 1.4 **
	char c_clm_igain_op_flg;			 ** Ver 1.4 **
	char c_clm_igain_fp_flg;			 ** Ver 1.4 **
	char c_xchng_cd[4];  					 ** Ver 1.4 **

	***/
 	
	int i_returncode = 0;            /** Initialised in Ver VQC **/
	int i_err[20];
	int i_ferr[20];									/** Ver 1.4 **/
	int i_counter=1;
	 EXEC SQL INCLUDE "table/pism_prepaid_info_sch_mstr.h"; /*** ver 1.4 **/

	EXEC SQL BEGIN DECLARE SECTION;
		struct vw_tradebook *ptr_st_tradebook;
		struct vw_usr_prfl st_usr_prfl;
		sql_cursor  sys_cursor;
		sql_cursor  sys_iod_cursor;      	/** Ver 1.4 **/
		sql_cursor  sys_osm_osd_desc_sil; /** Ver 1.4 **/
		varchar c_exp_date[ LEN_DATE ];
		varchar c_trd_date[ LEN_DATE ];
		char c_ordr_rfrnc[19];
	  int i_rec_cnt_ordr_ref =0;
   varchar c_igain_schm_code[10];     /** Ver 1.4 **/
   varchar c_igain_schm_desc[30];     /** Ver 1.4 **/
   varchar c_igain_ordr_rfrnc [ 100 ];/** Ver 1.4 **/
   varchar c_igain_ordr_dtls[300];    /** Ver 1.4 **/
   varchar c_igain_ordr_dtls1[300];   /** Ver 1.4 **/
   varchar c_osm_schm_code[10];				/** Ver 1.4 **/
   varchar c_period[50];							/** Ver 1.4 **/
   varchar c_osd_lwr_rng_lotsz[30];		/** Ver 1.4 **/
   varchar c_osd_upr_rng_lotsz[30];		/** Ver 1.4 **/
   varchar c_osd_brkr_rng_rate[30];		/** Ver 1.4 **/
   varchar c_osd_chrg_base[30];				/** Ver 1.4 **/
   varchar c_osm_carry_frwd[30];			/** Ver 1.4 **/
   varchar c_below_range_charges[30];	/** Ver 1.4 **/
   varchar c_schm_desc[30];						/** Ver 1.4 **/
   varchar c_below_range[30];					/** Ver 1.4 **/
   varchar c_lot_range[30];						/** Ver 1.4 **/
   varchar c_lot_range_charges[30];		/** Ver 1.4 **/
   varchar c_above_range[30];					/** Ver 1.4 **/
   varchar c_above_range_charges[30];	/** Ver 1.4 **/
   varchar c_carry_fwd_charges[30];		/** Ver 1.4 **/
   varchar c_lot_charges_range[150];	/** Ver 1.4 **/
   varchar c_lot_charges_min[150];		/** Ver 1.4 **/
   varchar c_lot_charges_max[150];		/** Ver 1.4 **/

	 /*** Commented following unused variables in Ver VQC **

	 varchar c_clm_fno_schm_code[10];   ** Ver 1.4 **
	 varchar c_clm_igain_op_schm[10];   ** Ver 1.4 **
	 varchar c_clm_igain_fp_schm[10];   ** Ver 1.4 **
	
   ***/	
 
  /*** Ver 2.0 Starts ***/
  varchar c_op20_schm_code[10];
  varchar c_op20_schm_desc[100];
  double d_op20_fxd_brkg_rate = 0.0;
  double d_op20_var_brkg_rate = 0.0;
	/*** Ver 2.0 Ends ***/ 	

	 varchar c_user_id[9];							/** Ver 1.4 **/
	EXEC SQL END DECLARE SECTION;				
   double d_profit_rate=0;           /** Ver 1.4 **/
   double d_loss_rate = 0;           /** Ver 1.4 **/
   int   	i_ordr_cnt=0;              /** Ver 1.4 **/
   int 		i_total_lots = 0;					 /** Ver 1.4 **/
   int 		i_intra_day_lots = 0;			 /** Ver 1.4 **/
   int 		i_inrange_lots = 0;				 /** Ver 1.4 **/
   int 		i_below_range_lots = 0;		 /** Ver 1.4 **/
   int 		i_above_range_lots = 0;		 /** Ver 1.4 **/
   int 		i_obc_carry_fwd_lot = 0;	 /** Ver 1.4 **/
   long 	l_inrange_charges = 0;		 /** Ver 1.4 **/
   double l_below_range_charges = 0; /** Ver 1.4 **/
   long 	l_above_range_charges = 0; /** Ver 1.4 **/
   double l_carry_fwd_charges = 0; 	 /** Ver 1.4 **/
   long 	l_total_charges = 0;			 /** Ver 1.4 **/
   int 		i_loop_cnt = 0;						 /** Ver 1.4 **/
   char 	c_prepaid_flg='N';             /** Ver 1.4 **/
   char 	c_source_flg = '\0';   				 /** Ver 1.4 **/    /** Initialised in Ver VQC **/
	 int    i_buf_len=0;
	struct vw_err_msg st_err_msg;

	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
	strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.1 : Added   */
	
	i_returncode = Fvftos32( ptr_fml_Ibuf, 
                           (char *)&st_usr_prfl,
                           "vw_usr_prfl" );

	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31005", FMLMSG, c_errmsg.arr ); /** VQC Changed from c_errmsg to c_errmsg.arr **/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );           /** VQC Changed from c_errmsg to c_errmsg.arr **/  
		tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

	i_returncode = fn_chk_sssn( c_ServiceName, 
                              &st_usr_prfl,
                              &st_err_msg );

	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31010", LIBMSG, st_err_msg.c_err_msg );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
		tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	i_err[0] = Fget32( ptr_fml_Ibuf, FFO_ORDR_RFRNC, 0,
                                   ( char *)c_ordr_rfrnc, 0 );

	if ( i_err[0] == -1 )
	{
		fn_errlog( c_ServiceName, "S31015", FMLMSG, c_errmsg.arr ); /** VQC Changed from c_errmsg to c_errmsg.arr **/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );       /** VQC Changed from c_errmsg to c_errmsg.arr **/
		tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.1 : Debug level Change  */
		fn_userlog( c_ServiceName, "c_ordr_rfrnc  :%s:", c_ordr_rfrnc );
	}
	i_err[0] = Fget32( ptr_fml_Ibuf, FFO_RQST_TYP, 0,( char *)&c_rqst_typ, 0 );
	i_ferr[0]= Ferror32;
	if ( i_err[0] == -1 )
	{
		if(i_ferr[0] == FNOTPRES)
  	{
    	c_rqst_typ='N';
  	}
	  else
		{	
			fn_errlog( c_ServiceName, "S31020", FMLMSG, c_errmsg.arr ); /** VQC Changed from c_errmsg to c_errmsg.arr **/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );       /** VQC Changed from c_errmsg to c_errmsg.arr **/
			tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
	
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Request For %s Details",c_rqst_typ=='N'?"Trade":"Scheme");
		fn_userlog(c_ServiceName,"Brokergae Type Flag is:%c:",c_brkg_typ);
	}
	EXEC SQL
		SELECT 1
		INTO	:i_rec_cnt_ordr_ref
		FROM	DUAL
		WHERE EXISTS ( SELECT 1 FROM	 ftd_fo_trd_dtls WHERE	 
									 ftd_ordr_rfrnc = :c_ordr_rfrnc
                 );

	if ( ( SQLCODE !=0 ) &&  ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog( c_ServiceName, "S31025", SQLMSG, c_errmsg.arr  );   /** VQC Changed from c_errmsg to c_errmsg.arr **/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );          /** VQC Changed from c_errmsg to c_errmsg.arr **/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	/*** Ver 1.4 taken outside **/
 	  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN * 10  );

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31030", TPMSG, c_errmsg.arr  );   /** VQC Changed from c_errmsg to c_errmsg.arr **/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );         /** VQC Changed from c_errmsg to c_errmsg.arr **/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	if(c_rqst_typ == 'N' )			/** ver 1.4 if Introduced for Normal trade details call **/
	{ 
		EXEC SQL ALLOCATE :sys_cursor;

		if ( i_rec_cnt_ordr_ref == 1 )
		{
			if( DEBUG_MSG_LVL_3 ) 
			{          /*  Ver 1.1 : Debug level Change  */
				fn_userlog(c_ServiceName,"INSIDE TODAYS TRADE TABLE");
			}
			EXEC SQL  EXECUTE
    		BEGIN
      	OPEN  :sys_cursor FOR
					SELECT	ftd_xchng_cd,
									ftd_clm_mtch_accnt,
								  ftd_eba_trd_ref,
									ftd_ordr_rfrnc,
									ftd_ord_ack_nmbr,
									ftd_xchng_trd_no, 
									ftd_prdct_typ,
									ftd_indstk,
									ftd_undrlyng,
									to_char ( ftd_expry_dt, 'dd-Mon-yyyy' ),
									ftd_exer_typ,
									ftd_opt_typ,
									ftd_strk_prc,
									rtrim(to_char ( ftd_trd_dt, 'dd-Mon-yyyy hh24:mi:ss' )),
									ftd_trd_flw,
									ftd_exctd_qty,
									ftd_exctd_rt,
									NVL(ftd_frs_brkg,0),
									NVL(ftd_cvr_brkg,0),
									NVL(fod_spl_flag,'N'),           /*** Ver 1.9 ***/
									NVL(ftd_brkg,0),	/*** Ver 2.2 ***/
									nvl(ftd_stt,0)+		
									nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0) +
									nvl(ftd_sebi_tt,0) +
									nvl(ftd_tran_chrg,0) +
									nvl(ftd_stamp_duty,0) /*** Ver 2.2 ***/
            FROM  ftd_fo_trd_dtls,fod_fo_ordr_dtls  /*** Ver 1.9 FOD table joined ***/
           WHERE 	ftd_ordr_rfrnc = :c_ordr_rfrnc
					 AND    ftd_ordr_rfrnc = fod_ordr_rfrnc;      /*** Ver 1.9 ***/
		 		END;
			END-EXEC;
		}
		else
		{
			if( DEBUG_MSG_LVL_3 ) 
			{          /*  Ver 1.1 : Debug level Change  */
					fn_userlog(c_ServiceName,"INSIDE HISTORY TRADE TABLE");
			}
			EXEC SQL  EXECUTE
    		BEGIN
      		OPEN  :sys_cursor FOR
					SELECT	ftd_xchng_cd,
									ftd_clm_mtch_accnt,
								  ftd_eba_trd_ref,
									ftd_ordr_rfrnc,
									ftd_ord_ack_nmbr,
									ftd_xchng_trd_no, 
									ftd_prdct_typ,
									ftd_indstk,
									ftd_undrlyng,
									to_char ( ftd_expry_dt, 'dd-Mon-yyyy' ),
									ftd_exer_typ,
									ftd_opt_typ,
									ftd_strk_prc,
									rtrim(to_char ( ftd_trd_dt, 'dd-Mon-yyyy hh24:mi:ss' )),
									ftd_trd_flw,
									ftd_exctd_qty,
									ftd_exctd_rt,
									NVL(ftd_frs_brkg,0),
									NVL(ftd_cvr_brkg,0),
									NVL(fod_spl_flag,'N'),           /*** Ver 1.9 ***/
                  NVL(ftd_brkg,0),  /*** Ver 2.2 ***/
                  nvl(ftd_stt,0)+
                  nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0) +
                  nvl(ftd_sebi_tt,0) +
                  nvl(ftd_tran_chrg,0) +
                  nvl(ftd_stamp_duty,0) /*** Ver 2.2 ***/
            FROM  ftd_fo_trd_dtls_hstry,fod_fo_ordr_dtls_hstry  /*** Ver 1.9 FOD table joined ***/
           WHERE 	ftd_ordr_rfrnc = :c_ordr_rfrnc
					 AND    ftd_ordr_rfrnc = fod_ordr_rfrnc;      /*** Ver 1.9 ***/
		 		END;
			END-EXEC;
		}

		if ( SQLCODE != 0 )
  	{
    	fn_errlog( c_ServiceName, "S31035", SQLMSG, c_errmsg.arr  );   /** VQC Changed from c_errmsg to c_errmsg.arr **/
		  EXEC SQL CLOSE :sys_cursor;                         /** Added in Ver VQC **/ 
    	EXEC SQL FREE :sys_cursor;
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );          /** VQC Changed from c_errmsg to c_errmsg.arr **/
			tpfree ( ( char * ) ptr_fml_Obuf );     						/** Added in Ver VQC **/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
/* Ver 1.4 moved at start**	
 	  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN * 10  );  ** Ver 1.4 size increased **

  	if ( ptr_fml_Obuf == NULL )
  	{
    	fn_errlog( c_ServiceName, "S31040", TPMSG, c_errmsg  );
    	EXEC SQL CLOSE :sys_cursor;
    	EXEC SQL FREE :sys_cursor;
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
*/
 	 	ptr_st_tradebook = ( struct vw_tradebook * ) tpalloc ( "VIEW32",
                                                         "vw_tradebook",
                                               sizeof ( struct vw_tradebook ) );
  	if ( ptr_st_tradebook == NULL )
  	{
    	fn_errlog( c_ServiceName, "S31045", TPMSG, c_errmsg.arr  );  /** VQC Changed from c_errmsg to c_errmsg.arr **/
    	EXEC SQL CLOSE :sys_cursor; 
    	EXEC SQL FREE :sys_cursor;
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );        /** VQC Changed from c_errmsg to c_errmsg.arr **/
		  tpfree ( ( char * ) ptr_fml_Obuf );                     /** Added in Ver VQC **/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

  	memset ( ptr_st_tradebook, 0, sizeof ( struct vw_tradebook ) );
	  
		i_counter = 1;

		for ( ; ; )
		{
			if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.1 : Debug level Change  */
				fn_userlog(c_ServiceName,"INSIDE FETCH");
			}
			EXEC SQL FETCH :sys_cursor
						  INTO :ptr_st_tradebook->c_xchng_cd,
        					 :ptr_st_tradebook->c_cln_mtch_accnt,
        				   :ptr_st_tradebook->c_trd_rfrnc,
        					 :ptr_st_tradebook->c_ordr_rfrnc,
        					 :ptr_st_tradebook->c_xchng_ack,
        					 :ptr_st_tradebook->l_xchng_trd_no,
        					 :ptr_st_tradebook->c_prd_typ,
        					 :ptr_st_tradebook->c_ctgry_indstk,
        					 :ptr_st_tradebook->c_undrlyng,
									 :c_exp_date,
        					 :ptr_st_tradebook->c_exrc_typ,
        					 :ptr_st_tradebook->c_opt_typ,
        					 :ptr_st_tradebook->l_strike_prc,
									 :c_trd_date,
        					 :ptr_st_tradebook->c_trd_flw,
        					 :ptr_st_tradebook->l_exctd_qty,
        				   :ptr_st_tradebook->l_exctd_rt,
                   :ptr_st_tradebook->l_frs_brkg_val,
                   :ptr_st_tradebook->l_cvr_brkg_val,
									 :ptr_st_tradebook->c_rms_prcsd_flg,    /*** Ver 1.9 ***/
									 :ptr_st_tradebook->l_brkg_val,	/*** Ver 2.2 ***/
									 :ptr_st_tradebook->l_trn_chrg; /*** Ver 2.2 ***/

			if ( SQLCODE != 0 )
    	{
      	if ( SQLCODE == NO_DATA_FOUND )
      	{
					if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.1 : Debug level Change  */
							fn_userlog(c_ServiceName,"INSIDE NO DATA FOUND IN FETCH");
						}
        	break;
      	}
      	else
      	{
        	fn_errlog( c_ServiceName, "S31050", SQLMSG, c_errmsg.arr  );  /** VQC Changed from c_errmsg to c_errmsg.arr **/
        	EXEC SQL CLOSE :sys_cursor;
        	EXEC SQL FREE :sys_cursor;
					free ( ( char * ) ptr_st_tradebook );     /** Added in Ver VQC  **/
					ptr_st_tradebook  = NULL;              /** VQC NULL value assigned to avoid generation of dangling pointer **/
 
        /**	tpfree ( ( char * ) ptr_st_tradebook ); ** Commented in Ver VQC **/

        	tpfree ( ( char * ) ptr_fml_Obuf );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );  /** VQC Changed from c_errmsg to c_errmsg.arr **/
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
    	}

			SETNULL(c_trd_date);
    	SETNULL(c_exp_date);  /*** Ver 1.2 ***/
			strcpy ( ptr_st_tradebook->c_expry_dt, ( char * ) c_exp_date.arr );
    	strcpy ( ptr_st_tradebook->c_trd_dt, ( char * ) c_trd_date.arr );

			i_returncode = Fvstof32( ptr_fml_Obuf, (char *) ptr_st_tradebook,
                              FCONCAT, "vw_tradebook" );
    	if ( i_returncode == -1 )
    	{
      	if( Ferror32 == FNOSPACE )
      	{
        	i_counter++;
        	ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
                            i_counter * MIN_FML_BUF_LEN * 10);			/** ver 1.4 size increased **/

        	if ( ptr_fml_Obuf == NULL )
        	{
          	fn_errlog( c_ServiceName, "S31055", TPMSG, c_errmsg.arr  );  /** VQC Changed from c_errmsg to c_errmsg.arr **/
          	EXEC SQL CLOSE :sys_cursor;
          	EXEC SQL FREE :sys_cursor;
		
					  tpfree ( ( char * ) ptr_fml_Obuf );         /** Added in Ver VQC **/
            free ( ( char * ) ptr_st_tradebook );       /** Added in Ver VQC **/
            ptr_st_tradebook  = NULL;         /*** VQC NULL value assigned to avoid generation of dangling pointer ***/

            /*** Commented in Ver VQC ***
            tpfree ( ( char * ) ptr_st_tradebook ); ***/			
 
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );  /** VQC Changed from c_errmsg to c_errmsg.arr **/
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}

        	i_returncode = Fvstof32( ptr_fml_Obuf, (char *) ptr_st_tradebook,
                                 FCONCAT, "vw_tradebook" );

        	if ( i_returncode == -1 )
        	{
          	fn_errlog( c_ServiceName, "S31060", FMLMSG, c_errmsg.arr  );  /** VQC Changed from c_errmsg to c_errmsg.arr **/
          	EXEC SQL CLOSE :sys_cursor;
          	EXEC SQL FREE :sys_cursor;

						free ( ( char * ) ptr_st_tradebook );       /** Added in Ver VQC **/
            ptr_st_tradebook  = NULL;         /*** VQC NULL value assigned to avoid generation of dangling pointer ***/

            /** Commented in Ver VQC ***
            tpfree ( ( char * ) ptr_st_tradebook );  ***/		
 
          	tpfree ( ( char * ) ptr_fml_Obuf );
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );  /** VQC Changed from c_errmsg to c_errmsg.arr **/
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}
      	}
      	else
      	{
        	fn_errlog( c_ServiceName, "S31065", FMLMSG, c_errmsg.arr  ); /** VQC Changed from c_errmsg to c_errmsg.arr **/
        	EXEC SQL CLOSE :sys_cursor;
        	EXEC SQL FREE :sys_cursor;

					free ( ( char * ) ptr_st_tradebook );       /** Added in Ver VQC **/
          ptr_st_tradebook  = NULL;         /*** VQC NULL value assigned to avoid generation of dangling pointer ***/

          /** Commented in Ver VQC ***
          tpfree ( ( char * ) ptr_st_tradebook ); ***/		
 
        	tpfree ( ( char * ) ptr_fml_Obuf );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );  /** VQC Changed from c_errmsg to c_errmsg.arr **/
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
    	}
	 }

	 /*** Added in Ver VQC ***/

   EXEC SQL CLOSE :sys_cursor;
   EXEC SQL FREE :sys_cursor;

   /** Ver VQC Ends ***/

   free ( ( char * ) ptr_st_tradebook );       /** Added in Ver VQC **/
   ptr_st_tradebook  = NULL;               /*** VQC NULL value assigned to avoid generation of dangling pointer ***/

   /** Commented in Ver VQC ***
   tpfree ( ( char * ) ptr_st_tradebook );    ** ver 1.6 **  ***/
	}
  else if(c_rqst_typ == 'D' )
  {
		if(DEBUG_MSG_LVL_0)   /** Added in Ver VQC **/
		{
			fn_userlog(c_ServiceName,"Inside Scheme Details Display");
		}

		MEMSET(c_osm_schm_code);
    MEMSET(c_period);
    MEMSET(c_osd_lwr_rng_lotsz);
    MEMSET(c_osd_upr_rng_lotsz);
    MEMSET(c_osd_brkr_rng_rate);
    MEMSET(c_osd_chrg_base);
    MEMSET(c_osm_carry_frwd);
    MEMSET(c_schm_desc);
    MEMSET(c_lot_range);
    MEMSET(c_lot_range_charges);
    MEMSET(c_below_range);
    MEMSET(c_below_range_charges);
    MEMSET(c_above_range_charges);
    MEMSET(c_carry_fwd_charges);
    MEMSET(c_lot_charges_range);
    MEMSET(c_lot_charges_min);
    MEMSET(c_lot_charges_max);
    MEMSET(c_user_id);
		c_brkg_typ='N';
     

		if(i_rec_cnt_ordr_ref == 0 )
		{
			if(DEBUG_MSG_LVL_0)  /** Added in Ver VQC **/
      {
				fn_userlog(c_ServiceName,"Inside scheme details history");
			}
	
			EXEC SQL
				SELECT distinct nvl(ftd_brkg_type,'N'),
												ftd_prdct_typ,

											/** Commented in Ver VQC **

                        ftd_undrlyng,
                        ftd_xchng_cd,  ***/

												UAC_USR_ID,
												trunc(ftd_trd_dt)
				INTO    :c_brkg_typ,
								:c_prd_typ,

						  /*** Commented in Ver VQC **
								:c_undrlyng,
							  :c_xchng_cd,  ***/

								:c_user_id,
								:c_trd_date
				FROM  ftd_fo_trd_dtls_hstry ,uac_usr_accnts
				where ftd_clm_mtch_accnt=uac_clm_mtch_accnt
				and 	ftd_ordr_rfrnc=:c_ordr_rfrnc;
		}
		else
		{
			fn_userlog(c_ServiceName,"Inside scheme details main");

			EXEC SQL
				SELECT distinct nvl(ftd_brkg_type,'N'),
												ftd_prdct_typ,
	
											/** Commented in Ver VQC **

												ftd_undrlyng,
												ftd_xchng_cd, ***/

												UAC_USR_ID,
												trunc(ftd_trd_dt)
				INTO    :c_brkg_typ,
								:c_prd_typ,

							/*** Commented in Ver VQC **

                :c_undrlyng,
                :c_xchng_cd,  ***/

								:c_user_id,
								:c_trd_date
				FROM  ftd_fo_trd_dtls ,uac_usr_accnts
				where ftd_clm_mtch_accnt=uac_clm_mtch_accnt
				and 	ftd_ordr_rfrnc=:c_ordr_rfrnc;
		}	

		if(SQLCODE != 0 )
		{
       fn_errlog( c_ServiceName, "S31070", FMLMSG, c_errmsg.arr  );  /** VQC Changed from c_errmsg to c_errmsg.arr **/
       tpfree ( ( char * ) ptr_fml_Obuf ); 
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );  /** VQC Changed from c_errmsg to c_errmsg.arr **/
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		} 
		SETNULL(c_trd_date);
		SETNULL(c_user_id);

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Brokergae Type Flag is:%c:",c_brkg_typ);
			fn_userlog(c_ServiceName,"c_prd_typ Type Flag is:%c:",c_prd_typ);

			/*** Commented in Ver VQC ***

			fn_userlog(c_ServiceName,"c_undrlyng is:%s:",c_undrlyng);
			fn_userlog(c_ServiceName,"c_xchng_cd is:%s:",c_xchng_cd);
			***/

			fn_userlog(c_ServiceName,"c_user_id  is:%s:",c_user_id.arr);
			fn_userlog(c_ServiceName,"c_trd_date is:%s:",c_trd_date.arr);
		}
		if(c_brkg_typ == 'I')
		{
			if(DEBUG_MSG_LVL_0)  /** Added in Ver VQC **/
      {
			  fn_userlog(c_ServiceName,"Inside Prepaid scheme details main");
			}

  		EXEC SQL
    		SELECT 	'Y',
        	   		nvl(PISM_FUTURES_PRCNTG,0),
          	 		nvl(PISM_OPTIONS_LOT,0)
    		into  	:c_prepaid_flg,
        	  		:sql_pism_futures_prcntg,
         		 		:sql_pism_options_lot
    		FROM
        				INSD_INFO_NTST_SCHEME_DTLS,
        				IMSM_INFO_MATCH_SCHEME_MASTER,
        				PISM_PREPAID_INFO_SCH_MSTR
    		WHERE 	INSD_MATCH_ACCOUNT_NO      = :c_mtch_accnt_no
    		AND   	nvl(PISM_SCH_TYP,'') = ( select decode(nvl(ICD_CUST_TYPE,''),'NRI','NRI','RI')
                                           from ICD_INFO_CLIENT_DTLS
                                           where icd_clnt_cd=:c_mtch_accnt_no
                                           and icd_user_id =trim(:c_user_id)
                                   	 )
  			AND   INSD_EQ_SCHEMECODE         = IMSM_SCHEMECODE
  			AND   INSD_PREPAID_SCHEMECODE    = PISM_GLOBAL_SCH_CD(+);
  		if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  		{
      	fn_errlog( c_ServiceName, "S31075", SQLMSG, c_errmsg.arr  );  /** VQC Changed from c_errmsg to c_errmsg.arr **/
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );         /** VQC Changed from c_errmsg to c_errmsg.arr **/
				tpfree ( ( char * ) ptr_fml_Obuf );     /*** Added in Ver VQC ***/
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}
		}
		else
		{
    		c_prepaid_flg='N';
    		sql_pism_futures_prcntg=0;
    		sql_pism_options_lot=0;
   			d_profit_rate=0;
   			d_loss_rate = 0; 
				i_total_lots = 0;
				i_intra_day_lots = 0;
				i_inrange_lots = 0;
				i_below_range_lots = 0;
				i_above_range_lots = 0;
				i_obc_carry_fwd_lot = 0;
				l_inrange_charges = 0;
				l_below_range_charges = 0;
				l_above_range_charges = 0;
				l_carry_fwd_charges = 0;
				l_total_charges = 0;
		}
		if(DEBUG_MSG_LVL_3)
		{
				fn_userlog(c_ServiceName,"c_prepaid_flg is :%c:",c_prepaid_flg);
				fn_userlog(c_ServiceName,"sql_pism_futures_prcntg=:%f:",sql_pism_futures_prcntg);
				fn_userlog(c_ServiceName,"sql_pism_options_lot=:%f:",sql_pism_options_lot);
		}
		if(c_brkg_typ == 'O')
		{
			c_source_flg = c_brkg_typ;
			EXEC SQL ALLOCATE :sys_osm_osd_desc_sil; 
			if(i_rec_cnt_ordr_ref == 0 )
			{
				if(DEBUG_MSG_LVL_0)  /** Added in Ver VQC **/
        {
					fn_userlog(c_ServiceName,"Inside scheme details history OPM ");
				}

			 EXEC SQL  EXECUTE
				BEGIN
				 OPEN :sys_osm_osd_desc_sil for
				SELECT
							osm_schm_code,
    					osm_schm_start_date || ' to ' || osm_schm_end_date PERIOD,
    					osd_lwr_rng_lotsz,
    					osd_upr_rng_lotsz,
    					osd_brkr_rng_rate,
    					osd_chrg_base,
    					osm_carry_frwd,
    					TOTAL_LOTS,
    					INTRA_DAY_LOTS,
    					INRANGE_LOTS,
    					BELOW_RANGE_LOTS,
    					ABOVE_RANGE_LOTS,
    					CARRY_FWD_LOTS,
    					INRANGE_CHARGES,
    					BELOW_RANGE_CHARGS,
    					ABOVE_RANGE_CHARGS,
    					CARRY_FWD_CHARGES,
    					TOTAL_CHARGES
			FROM 		OSD_OPTION_SCHEME_DTLS OSD,
     					OSM_OPTION_SCHEME_MSTR OSM,
     					( SELECT 	distinct nvl(OTD_SCHM_CODE,'*') OTD_SCHM,
              					decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) TOTAL_LOTS,
              					(decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) - OBC_CARRY_FWD_LOT) INTRA_DAY_LOTS,
              					OBC_INRANGE_QTY INRANGE_LOTS,
              					OBC_BELOW_QTY BELOW_RANGE_LOTS,
              					OBC_ABOVE_QTY ABOVE_RANGE_LOTS,
              					OBC_CARRY_FWD_LOT CARRY_FWD_LOTS,
              					OBC_INRANGE_CHARGES INRANGE_CHARGES,
              					decode(OBC_BELOW_QTY,'0','0',decode(OBC_BUY_BRKG,'0',OBC_SELL_BRKG,OBC_BUY_BRKG)) BELOW_RANGE_CHARGS,
              					OBC_ABOVE_CHARGES ABOVE_RANGE_CHARGS,
              					OBC_CARRY_FWD_BRKG CARRY_FWD_CHARGES,
              					OBC_TOTAL_BRKG TOTAL_CHARGES
								FROM  	OTD_OPTION_TRD_DTLS_HSTRY,OBC_OPT_BRKR_SMRY_HSTRY
								WHERE 	OTD_XCHNG_CD=OBC_XCHNG_CD
								AND   	OTD_CLM_MTCH_ACCNT=OBC_CLM_MTCH_ACCNT
								AND   	OBC_ORDR_RFRNC=:c_ordr_rfrnc
								AND   	OTD_TRD_DT = to_date(:c_trd_date,'DD-MON-YYYY')
     					 )OTD
				WHERE osd.osd_schm_code = osm.osm_schm_code
				AND   osm.osm_schm_code =  otd.OTD_SCHM
				AND   to_date(:c_trd_date,'DD-MON-YYYY') between trunc(osm.osm_schm_start_date) and trunc(osm.osm_schm_end_date)
				Order By osd_lwr_rng_lotsz;
			END;
			END-EXEC;
		 }
		 else
		 {
				if(DEBUG_MSG_LVL_0)  /** Added in Ver VQC **/
        {
					fn_userlog(c_ServiceName,"Inside scheme details  OPM Main ");
				}

			 EXEC SQL  EXECUTE
				BEGIN
				 OPEN :sys_osm_osd_desc_sil for
				SELECT 
    					osm_schm_code,
    					osm_schm_start_date || ' to ' || osm_schm_end_date PERIOD,
    					osd_lwr_rng_lotsz,
    					osd_upr_rng_lotsz,
    					osd_brkr_rng_rate,
    					osd_chrg_base,
    					osm_carry_frwd,
    					TOTAL_LOTS,
    					INTRA_DAY_LOTS,
    					INRANGE_LOTS,
    					BELOW_RANGE_LOTS,
    					ABOVE_RANGE_LOTS,
    					CARRY_FWD_LOTS,
    					INRANGE_CHARGES,
    					BELOW_RANGE_CHARGS,
    					ABOVE_RANGE_CHARGS,
    					CARRY_FWD_CHARGES,
    					TOTAL_CHARGES
			FROM 		OSD_OPTION_SCHEME_DTLS OSD,
     					OSM_OPTION_SCHEME_MSTR OSM,
     					( SELECT 	distinct nvl(OTD_SCHM_CODE,'*') OTD_SCHM,
              					decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) TOTAL_LOTS,
              					(decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) - OBC_CARRY_FWD_LOT) INTRA_DAY_LOTS,
              					OBC_INRANGE_QTY INRANGE_LOTS,
              					OBC_BELOW_QTY BELOW_RANGE_LOTS,
              					OBC_ABOVE_QTY ABOVE_RANGE_LOTS,
              					OBC_CARRY_FWD_LOT CARRY_FWD_LOTS,
              					OBC_INRANGE_CHARGES INRANGE_CHARGES,
              					decode(OBC_BELOW_QTY,'0','0',decode(OBC_BUY_BRKG,'0',OBC_SELL_BRKG,OBC_BUY_BRKG)) BELOW_RANGE_CHARGS,
              					OBC_ABOVE_CHARGES ABOVE_RANGE_CHARGS,
              					OBC_CARRY_FWD_BRKG CARRY_FWD_CHARGES,
              					OBC_TOTAL_BRKG TOTAL_CHARGES
								FROM  	OTD_OPTION_TRD_DTLS,OBC_OPTION_BRKR_CMPT_SMRY
								WHERE 	OTD_XCHNG_CD=OBC_XCHNG_CD
								AND   	OTD_CLM_MTCH_ACCNT=OBC_CLM_MTCH_ACCNT
								AND   	OBC_ORDR_RFRNC=:c_ordr_rfrnc
								AND   	OTD_TRD_DT = to_date(:c_trd_date,'DD-MON-YYYY')
     					 )OTD
				WHERE osd.osd_schm_code = osm.osm_schm_code
				AND   osm.osm_schm_code =  otd.OTD_SCHM
				AND   to_date(:c_trd_date,'DD-MON-YYYY') between trunc(osm.osm_schm_start_date) and trunc(osm.osm_schm_end_date)
				Order By osd_lwr_rng_lotsz;
			END;
			END-EXEC;
		 } 
     if( SQLCODE != 0 )
     {
       fn_errlog( c_ServiceName, "S31080", SQLMSG, c_errmsg.arr  );   /** VQC Changed from c_errmsg to c_errmsg.arr **/ 
       EXEC SQL CLOSE :sys_osm_osd_desc_sil; 
       EXEC SQL FREE :sys_osm_osd_desc_sil;
       tpfree ( ( char * ) ptr_fml_Obuf );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );   /** VQC Changed from c_errmsg to c_errmsg.arr **/
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
     MEMSET(c_osm_schm_code);
     MEMSET(c_period);
     MEMSET(c_osd_lwr_rng_lotsz);
     MEMSET(c_osd_upr_rng_lotsz);
     MEMSET(c_osd_brkr_rng_rate);
     MEMSET(c_osd_chrg_base);
     MEMSET(c_osm_carry_frwd);
     MEMSET(c_schm_desc);
     MEMSET(c_lot_range);
     MEMSET(c_lot_range_charges);
     MEMSET(c_below_range);
     MEMSET(c_below_range_charges);
     MEMSET(c_above_range_charges);
     MEMSET(c_carry_fwd_charges);
     MEMSET(c_lot_charges_range);
     MEMSET(c_lot_charges_min);
     MEMSET(c_lot_charges_max);
     while(1)
     {
        i_loop_cnt = i_loop_cnt + 1;

        EXEC SQL
           FETCH  :sys_osm_osd_desc_sil
					 INTO   :c_osm_schm_code,
						 			:c_period,
						 			:c_osd_lwr_rng_lotsz,
						 			:c_osd_upr_rng_lotsz,
						 			:c_osd_brkr_rng_rate,
						 			:c_osd_chrg_base,
						 			:c_osm_carry_frwd, 
						 			:i_total_lots ,
             			:i_intra_day_lots ,
             			:i_inrange_lots ,
             			:i_below_range_lots ,
             			:i_above_range_lots ,
             			:i_obc_carry_fwd_lot ,
             			:l_inrange_charges ,
             			:l_below_range_charges ,
             			:l_above_range_charges ,
             			:l_carry_fwd_charges ,
             			:l_total_charges;
        if(SQLCODE !=0)
        {
           if(SQLCODE == NO_DATA_FOUND)
           {
			  			fn_userlog(c_ServiceName,"Inside no data found for OPM Details");
            	break;
           }
           else
           {
                fn_errlog( c_ServiceName, "S31085", SQLMSG, c_errmsg.arr  ); /** VQC Changed from c_errmsg to c_errmsg.arr **/
              	EXEC SQL CLOSE :sys_osm_osd_desc_sil; 
              	EXEC SQL FREE :sys_osm_osd_desc_sil;
                tpfree ( ( char * ) ptr_fml_Obuf );
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );  /** VQC Changed from c_errmsg to c_errmsg.arr **/
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
           }
        }

        SETNULL(c_osm_schm_code);
        SETNULL(c_period);
        SETNULL(c_osd_lwr_rng_lotsz);
        SETNULL(c_osd_upr_rng_lotsz);
        SETNULL(c_osd_brkr_rng_rate);
        SETNULL(c_osd_chrg_base);
        SETNULL(c_osm_carry_frwd);

				if( DEBUG_MSG_LVL_3 )
        {
            fn_userlog( c_ServiceName, " Value of i_loop_cnt initially in -SL  : [%d] ",i_loop_cnt);
            fn_userlog( c_ServiceName, " Value of c_osm_schm_code initially  in -SL : [%s] ",c_osm_schm_code.arr);
            fn_userlog( c_ServiceName, " Value of c_period initially  in -SL : [%s] ",c_period.arr);
            fn_userlog( c_ServiceName, " Value of c_osd_lwr_rng_lotsz initially in -SL  : [%s] ",c_osd_lwr_rng_lotsz.arr);
            fn_userlog( c_ServiceName, " Value of c_osd_upr_rng_lotsz initially  in -SL : [%s] ",c_osd_upr_rng_lotsz.arr);
            fn_userlog( c_ServiceName, " Value of c_osd_brkr_rng_rate initially  in -SL : [%s] ",c_osd_brkr_rng_rate.arr);
            fn_userlog( c_ServiceName, " Value of c_osd_chrg_base initially  in -SL : [%s] ",c_osd_chrg_base.arr);
            fn_userlog( c_ServiceName, " Value of c_osm_carry_frwd initially  in -SL : [%s] ",c_osm_carry_frwd.arr);
        }

        if(i_loop_cnt == 1)
        {
            strcpy(c_below_range_charges.arr,c_osd_brkr_rng_rate.arr);
            strcat(c_below_range_charges.arr, "  ");
            strcat(c_below_range_charges.arr, c_osd_chrg_base.arr);
            fn_userlog( c_ServiceName, " Value of c_below_range_charges in -SL : [%s] ",c_below_range_charges.arr);
        }

        if(i_loop_cnt == 2)
        {
            strcpy(c_schm_desc.arr,c_osd_lwr_rng_lotsz.arr);
            strcat(c_schm_desc.arr, " to ");
            strcat(c_schm_desc.arr,c_osd_upr_rng_lotsz.arr);
            strcat(c_schm_desc.arr, " Lots ");
            fn_userlog( c_ServiceName, " Value of c_schm_desc in -SL : [%s] ",c_schm_desc.arr);


            strcpy(c_lot_range.arr,c_osd_lwr_rng_lotsz.arr);
            strcat(c_lot_range.arr, " - ");
            strcat(c_lot_range.arr,c_osd_upr_rng_lotsz.arr);
            strcat(c_lot_range.arr, " Intra Day ");
            fn_userlog( c_ServiceName, " Value of c_lot_range in -SL : [%s] ",c_lot_range.arr);
            strcpy(c_below_range.arr," < ");
            strcat(c_below_range.arr,c_osd_lwr_rng_lotsz.arr);
            strcat(c_below_range.arr, " Intra Day ");
            fn_userlog( c_ServiceName, " Value of c_below_range in -SL : [%s] ",c_below_range.arr);

            strcpy(c_above_range.arr," > ");
            strcat(c_above_range.arr,c_osd_upr_rng_lotsz.arr);
            strcat(c_above_range.arr, " Lots Intra Day ");
            fn_userlog( c_ServiceName, " Value of c_above_range in -SL : [%s] ",c_above_range.arr);

            strcpy(c_lot_range_charges.arr,c_osd_brkr_rng_rate.arr);
            strcat(c_lot_range_charges.arr, "  ");
            strcat(c_lot_range_charges.arr,c_osd_chrg_base.arr);
            fn_userlog( c_ServiceName, " Value of c_lot_range_charges in -SL : [%s] ",c_lot_range_charges.arr);
        }

        if(i_loop_cnt == 3)
        {
            strcpy(c_above_range_charges.arr,c_osd_brkr_rng_rate.arr);
            strcat(c_above_range_charges.arr, "  ");
            strcat(c_above_range_charges.arr, c_osd_chrg_base.arr);
            fn_userlog( c_ServiceName, " Value of c_above_range_charges in -SL : [%s] ",c_above_range_charges.arr);

            strcpy(c_carry_fwd_charges.arr,c_osm_carry_frwd.arr);
            strcat(c_carry_fwd_charges.arr, "  ");
            strcat(c_carry_fwd_charges.arr, c_osd_chrg_base.arr);
            fn_userlog( c_ServiceName, " Value of c_carry_fwd_charges in -SL : [%s] ",c_carry_fwd_charges.arr);

        }
           fn_userlog(c_ServiceName,"Completed One Loop for scheme details in -SL ");
      }
      strcpy(c_lot_charges_range.arr,c_lot_range.arr);
      strcat(c_lot_charges_range.arr, "|*");
      strcat(c_lot_charges_range.arr, c_lot_range_charges.arr);
      fn_userlog( c_ServiceName, " Value of c_lot_charges_range : [%s] ",c_lot_charges_range.arr);

      strcpy(c_lot_charges_min.arr,c_below_range.arr);
      strcat(c_lot_charges_min.arr, "|*");
      strcat(c_lot_charges_min.arr, c_below_range_charges.arr);
      fn_userlog( c_ServiceName, " Value of c_lot_charges_min : [%s] ",c_lot_charges_min.arr);

      strcpy(c_lot_charges_max.arr,c_above_range.arr);
      strcat(c_lot_charges_max.arr, "|*");
      strcat(c_lot_charges_max.arr, c_above_range_charges.arr);
      fn_userlog( c_ServiceName, " Value of c_lot_charges_max : [%s] ",c_lot_charges_max.arr);
      if( DEBUG_MSG_LVL_5 )
      {
        fn_userlog(c_ServiceName,"Value for OPM of c_period in -SL     [%s] ",c_period.arr);
        fn_userlog(c_ServiceName,"Value for OPM of c_osm_schm_code in -SL     [%s] ",c_osm_schm_code.arr);
        fn_userlog(c_ServiceName,"Value for OPM of c_schm_desc in -SL     [%s] ",c_schm_desc.arr);
        fn_userlog(c_ServiceName,"Value for OPM of c_lot_charges_range in -SL     [%s] ",c_lot_charges_range.arr);
        fn_userlog(c_ServiceName,"Value for OPM of c_lot_charges_min in -SL     [%s] ",c_lot_charges_min.arr);
        fn_userlog(c_ServiceName,"Value for OPM of c_lot_charges_max in -SL     [%s] ",c_lot_charges_max.arr);
        fn_userlog(c_ServiceName,"Value for OPM of c_carry_fwd_charges in -SL      [%s] ",c_carry_fwd_charges.arr);
      }

	
		  if (DEBUG_MSG_LVL_5)
      {
      	fn_userlog(c_ServiceName,"Value of c_source_flg is         [%c] ",c_source_flg);

				/*** Commneted following userlog in Ver VQC ***

      	fn_userlog(c_ServiceName,"Value of c_clm_fno_schm_code is   [%s]",c_clm_fno_schm_code.arr);
      	fn_userlog(c_ServiceName,"Value of c_clm_brkr_cmpt_flg is      [%c] ",c_clm_brkr_cmpt_flg);

				***/

      	fn_userlog(c_ServiceName,"Value of c_osm_schm_code is   [%s]",c_osm_schm_code.arr);
      	fn_userlog(c_ServiceName,"Value of c_period is   [%s]",c_period.arr);
      	fn_userlog(c_ServiceName,"Value of c_osd_lwr_rng_lotsz is   [%s] ",c_osd_lwr_rng_lotsz.arr);
      	fn_userlog(c_ServiceName,"Value of c_osd_upr_rng_lotsz is      [%s] ",c_osd_upr_rng_lotsz.arr);
      	fn_userlog(c_ServiceName,"Value of c_osd_brkr_rng_rate is       [%s] ",c_osd_brkr_rng_rate.arr);
      	fn_userlog(c_ServiceName,"Value of c_osd_chrg_base is     [%s] ",c_osd_chrg_base.arr);
      	fn_userlog(c_ServiceName,"Value of c_osm_carry_frwd is     [%s] ",c_osm_carry_frwd.arr);
      	fn_userlog(c_ServiceName,"Value of i_total_lots is     [%d] ",i_total_lots);
      	fn_userlog(c_ServiceName,"Value of i_intra_day_lots is    [%d] ",i_intra_day_lots);
      	fn_userlog(c_ServiceName,"Value of i_inrange_lots is     [%d] ",i_inrange_lots);
      	fn_userlog(c_ServiceName,"Value of i_above_range_lots is        [%d] ",i_above_range_lots);
      	fn_userlog(c_ServiceName,"Value of i_obc_carry_fwd_lot is        [%d] ",i_obc_carry_fwd_lot);
      	fn_userlog(c_ServiceName,"Value of l_inrange_charges is        [%lf] ",l_inrange_charges);
      	fn_userlog(c_ServiceName,"Value of l_below_range_charges is        [%lf] ",l_below_range_charges);
      	fn_userlog(c_ServiceName,"Value of l_above_range_charges is        [%lf] ",l_above_range_charges);
      	fn_userlog(c_ServiceName,"Value of l_carry_fwd_charges is        [%lf] ",l_carry_fwd_charges);
      	fn_userlog(c_ServiceName,"Value of l_total_charges is        [%lf] ",l_total_charges);
      }
     EXEC SQL CLOSE :sys_osm_osd_desc_sil; 
     EXEC SQL FREE :sys_osm_osd_desc_sil;
		}
		else if (c_brkg_typ == 'I' || c_brkg_typ == 'B' )		
		{
			fn_userlog(c_ServiceName,"Inside I-Gain Bullet display.");

			EXEC SQL ALLOCATE :sys_iod_cursor ;

			/** If part added for Ver 1.8 **/
			if (c_brkg_typ == 'B'  )
			{
				c_source_flg = c_brkg_typ;
			}
			else
			{
				c_source_flg = c_prd_typ;
			}
			/** End of Ver 1.8 **/

			if(i_rec_cnt_ordr_ref == 0 )
			{
		  	EXEC SQL  EXECUTE
       		BEGIN
            OPEN  :sys_iod_cursor FOR
            select  distinct IOD_ORDR_RFRNC || ',' ||
                    decode(IOD_BUY_SELL,'B','Buy','S','Sell') || ',' ||
                    /** to_char(decode(:c_prd_typ,'U',IOD_ORDR_QTY,IOD_TOTAL_LOTS)) || ',' || ** Commented for Ver 1.8 **/
										to_char(decode(:c_brkg_typ,'B',IOD_ORDR_QTY,decode(:c_prd_typ,'U',IOD_ORDR_QTY,IOD_TOTAL_LOTS))) || ',' ||		/** Ver 1.8 **/
                    to_char(NVL(IOD_AVRG_TRD_PRC,0)) || ',' ||
                    decode(nvl(IOD_PRFT_LOSS_FLG,'L'),'P','Profit','L','Loss','B','') || ',' ||
                    decode(nvl(IOD_PRFT_LOSS_FLG,'L'),'B',0,to_char(NVL(IOD_PROFIT_RATE,0))) || ',' || 
                    to_char(NVL(IOD_ORDR_LVL_BRKG,0)) ORDR_STR
            from    iod_igain_ordr_dtls_hstry ,itd_igain_trd_dtls_hstry
            where   itd_clm_mtch_accnt = iod_clm_mtch_accnt
            and     trunc(itd_trd_dt) = :c_trd_date             /*** Ver 1.7 ***/
            and     trunc(itd_trd_dt) = trunc(iod_ordr_dt)
            and     ( ITD_FRSH_ORDR_RFRNC = IOD_ORDR_RFRNC OR
                      ITD_COVER_ORDR_RFRNC = IOD_ORDR_RFRNC  OR
                      ITD_C2_ORDR_RFRNC = IOD_ORDR_RFRNC )
            and     ( ITD_FRSH_ORDR_RFRNC = :c_ordr_rfrnc OR
                      ITD_COVER_ORDR_RFRNC = :c_ordr_rfrnc  OR
                      ITD_C2_ORDR_RFRNC = :c_ordr_rfrnc 
		    						);
       	  END;
          END-EXEC;
			}
			else
			{
		  	EXEC SQL  EXECUTE
       		BEGIN
            OPEN  :sys_iod_cursor FOR
            select  distinct IOD_ORDR_RFRNC || ',' ||
                    decode(IOD_BUY_SELL,'B','Buy','S','Sell') || ',' ||
                    /** to_char(decode(:c_prd_typ,'U',IOD_ORDR_QTY,IOD_TOTAL_LOTS)) || ',' || ** Commented for Ver 1.8 **/
										to_char(decode(:c_brkg_typ,'B',IOD_ORDR_QTY,decode(:c_prd_typ,'U',IOD_ORDR_QTY,IOD_TOTAL_LOTS))) || ',' ||		/** Ver 1.8 **/
                    to_char(NVL(IOD_AVRG_TRD_PRC,0)) || ',' ||
                    decode(nvl(IOD_PRFT_LOSS_FLG,'L'),'P','Profit','L','Loss','B','') || ',' ||
                    decode(nvl(IOD_PRFT_LOSS_FLG,'L'),'B',0,to_char(NVL(IOD_PROFIT_RATE,0))) || ',' || 
                    to_char(NVL(IOD_ORDR_LVL_BRKG,0)) ORDR_STR
            from    iod_igain_ordr_dtls ,itd_igain_trd_dtls
            where   itd_clm_mtch_accnt = iod_clm_mtch_accnt
            and     trunc(itd_trd_dt) = trunc(iod_ordr_dt)
            and     ( ITD_FRSH_ORDR_RFRNC = IOD_ORDR_RFRNC OR
                      ITD_COVER_ORDR_RFRNC = IOD_ORDR_RFRNC  OR
                      ITD_C2_ORDR_RFRNC = IOD_ORDR_RFRNC )
            and     ( ITD_FRSH_ORDR_RFRNC = :c_ordr_rfrnc OR
                      ITD_COVER_ORDR_RFRNC = :c_ordr_rfrnc  OR
                      ITD_C2_ORDR_RFRNC = :c_ordr_rfrnc 
		    						);
       	  END;
          END-EXEC;
			}
	    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
              fn_errlog( c_ServiceName, "S31090", SQLMSG, c_errmsg.arr  );  /** VQC Changed from c_errmsg to c_errmsg.arr **/
              EXEC SQL CLOSE :sys_iod_cursor; 
              EXEC SQL FREE :sys_iod_cursor;
              tpfree ( ( char * ) ptr_fml_Obuf ); 
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 ); /** VQC Changed from c_errmsg to c_errmsg.arr **/
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
			if(c_brkg_typ == 'I' )
			{
      	if(i_rec_cnt_ordr_ref == 0 )
      	{
					EXEC SQL
					SELECT  osm_schm_code,
        					OSM_SCHM_DESC,
        					OSM_PROFIT_RATE,
        					OSM_LOSS_RATE
					INTO    :c_igain_schm_code,
								  :c_igain_schm_desc,
									:d_profit_rate,
									:d_loss_rate
					FROM    OSM_OPTION_SCHEME_MSTR OSM,
  							(select distinct ITD_SCHM_CODE
   							 from   iod_igain_ordr_dtls_hstry ,itd_igain_trd_dtls_hstry
    						 where  itd_clm_mtch_accnt = iod_clm_mtch_accnt
								 and  	trunc(itd_trd_dt) = trunc(iod_ordr_dt)
    						 and    trunc(itd_trd_dt)=to_date(:c_trd_date,'DD-MON-YYYY')
    						 and    ITD_CLM_MTCH_ACCNT = IOD_CLM_MTCH_ACCNT
    						 and    (IOD_ORDR_RFRNC = ITD_FRSH_ORDR_RFRNC OR 
												 IOD_ORDR_RFRNC=ITD_COVER_ORDR_RFRNC OR 
												 IOD_ORDR_RFRNC=ITD_C2_ORDR_RFRNC
												)
    						and    IOD_ORDR_RFRNC=:c_ordr_rfrnc
   							) ITD
					WHERE trim(ITD.ITD_SCHM_CODE)= trim(OSM.OSM_SCHM_CODE)
					AND   trim(ITD.ITD_SCHM_CODE) <> 'BULLET';
				 }
				 else
				 {
					EXEC SQL
					SELECT  osm_schm_code,
        					OSM_SCHM_DESC,
        					OSM_PROFIT_RATE,
        					OSM_LOSS_RATE
					INTO    :c_igain_schm_code,
								  :c_igain_schm_desc,
									:d_profit_rate,
									:d_loss_rate
					FROM    OSM_OPTION_SCHEME_MSTR OSM,
  							(select distinct ITD_SCHM_CODE
   							 from   iod_igain_ordr_dtls ,itd_igain_trd_dtls
    						 where  itd_clm_mtch_accnt = iod_clm_mtch_accnt
								 and  	trunc(itd_trd_dt) = trunc(iod_ordr_dt)
    						 and    trunc(itd_trd_dt)=to_date(:c_trd_date,'DD-MON-YYYY')
    						 and    ITD_CLM_MTCH_ACCNT = IOD_CLM_MTCH_ACCNT
    						 and    (IOD_ORDR_RFRNC = ITD_FRSH_ORDR_RFRNC OR 
												 IOD_ORDR_RFRNC=ITD_COVER_ORDR_RFRNC OR 
												 IOD_ORDR_RFRNC=ITD_C2_ORDR_RFRNC
												)
    						and    IOD_ORDR_RFRNC=:c_ordr_rfrnc
   							) ITD
					WHERE trim(ITD.ITD_SCHM_CODE)= trim(OSM.OSM_SCHM_CODE)
					AND   trim(ITD.ITD_SCHM_CODE) <> 'BULLET';
				 }
	       if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
         {
              fn_errlog( c_ServiceName, "S31095", SQLMSG, c_errmsg.arr  ); /** VQC Changed from c_errmsg to c_errmsg.arr **/ 
              EXEC SQL CLOSE :sys_iod_cursor; 
              EXEC SQL FREE :sys_iod_cursor;
              tpfree ( ( char * ) ptr_fml_Obuf ); 
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 ); /** VQC Changed from c_errmsg to c_errmsg.arr **/
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }
      	 if(c_prepaid_flg == 'Y' && c_prd_typ == 'I')
       	 {
        	 	d_profit_rate = sql_pism_options_lot;
       	 }
       	 else if(c_prepaid_flg == 'Y' && c_prd_typ == 'U')
       	 {
         		d_profit_rate= sql_pism_futures_prcntg;
       	 }
			}
			else
			{
				strcpy(c_igain_schm_code.arr,"");
				SETLEN(c_igain_schm_code);
				strcpy(c_igain_schm_desc.arr,"");
				SETLEN(c_igain_schm_desc);
				d_profit_rate=0;
			  d_loss_rate=0;	
			}
      SETNULL(c_igain_schm_code);
      SETNULL(c_igain_schm_desc);
      if(DEBUG_MSG_LVL_3)
      {
          fn_userlog(c_ServiceName,"c_igain_schm_code= :%s:",c_igain_schm_code.arr);
          fn_userlog(c_ServiceName,"c_igain_schm_desc=:%s:",c_igain_schm_desc.arr);
          fn_userlog(c_ServiceName,"d_profit_rate =:%lf:",d_profit_rate);
          fn_userlog(c_ServiceName,"d_loss_rate =:%lf:",d_loss_rate);
      }
      i_err[0] = Fadd32(ptr_fml_Obuf,FFO_STCK_CD,(char *)c_igain_schm_code.arr,0) ;
      i_err[1] = Fadd32(ptr_fml_Obuf,FFO_ACK_NMBR,(char *)c_igain_schm_desc.arr,0) ;
      i_err[2] = Fadd32(ptr_fml_Obuf,FFO_RATE,(char *)&d_profit_rate,0) ;
      i_err[3] = Fadd32(ptr_fml_Obuf,FFO_FUT_PRC,(char *)&d_loss_rate,0) ;
      for(i_loop_cnt=0;i_loop_cnt<4 ;i_loop_cnt++ )
      {
           if(i_err[i_loop_cnt] == -1)
           {
             fn_userlog(c_ServiceName,"Error in Fadd of IGAIN-scheme details for i_loop_cnt [%d]",i_loop_cnt);
             fn_errlog( c_ServiceName, "S31100", FMLMSG, c_errmsg.arr  );  /** VQC Changed from c_errmsg to c_errmsg.arr **/
             EXEC SQL CLOSE :sys_iod_cursor;
             EXEC SQL FREE  :sys_iod_cursor;
             tpfree ( ( char * ) ptr_fml_Obuf );
             Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );     /** VQC Changed from c_errmsg to c_errmsg.arr **/
             /**  tpcommit(0);                                        **  Commented in Ver VQC  **/ 
             tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
           }
      }
      MEMSET(c_igain_ordr_dtls);
      MEMSET(c_igain_ordr_dtls1);
      i_ordr_cnt=0;
      while(1)
      {
         MEMSET(c_igain_ordr_rfrnc);


          EXEC SQL
            FETCH :sys_iod_cursor
            INTO  :c_igain_ordr_rfrnc;

          if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
          {
            fn_errlog( c_ServiceName, "S31105", SQLMSG, c_errmsg.arr  ); /** VQC Changed from c_errmsg to c_errmsg.arr **/
            EXEC SQL CLOSE :sys_iod_cursor;
            EXEC SQL FREE :sys_iod_cursor;
            tpfree ( ( char * ) ptr_fml_Obuf );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );  /** VQC Changed from c_errmsg to c_errmsg.arr **/
            /**   tpcommit(0);                                        ** Commented in Ver VQC **/ 
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

          if(SQLCODE == NO_DATA_FOUND )
          {
            fn_userlog(c_ServiceName,"Inside No Data found in sys_iod_cursor");
            break;
          }

          if(i_ordr_cnt == 0 )
          {
            strcpy(c_igain_ordr_dtls.arr,c_igain_ordr_rfrnc.arr);
            i_ordr_cnt = i_ordr_cnt +1;
          }
          else if(i_ordr_cnt ==1 || i_ordr_cnt == 2 )
          {
            strcat(c_igain_ordr_dtls.arr,"|^");
            strcat(c_igain_ordr_dtls.arr,c_igain_ordr_rfrnc.arr);
            if(i_ordr_cnt == 1 )
            {
              strcpy(c_igain_ordr_dtls1.arr,"2|^");
            }
            else
            {
              strcpy(c_igain_ordr_dtls1.arr,"3|^");
            }
            i_ordr_cnt = i_ordr_cnt +1;
          }
					
					if(DEBUG_MSG_LVL_0)   /** Added in Ver VQC **/
          {
          	fn_userlog(c_ServiceName," i_ordr_cnt in I-Gain Loop =:%d:",i_ordr_cnt);
					}

       }/** End of while of Igain Details **/
			strcat(c_igain_ordr_dtls1.arr,c_igain_ordr_dtls.arr);
      i_buf_len = sizeof(c_igain_ordr_dtls)+
                    + 1024;

      if(Fneeded32(1,i_buf_len) > Funused32(ptr_fml_Obuf))
      {
          ptr_fml_Obuf = (FBFR32 *)tprealloc((char *)ptr_fml_Obuf,
                                       (Fsizeof32(ptr_fml_Obuf) + MIN_FML_BUF_LEN));
          if(ptr_fml_Obuf == NULL)
          {
            fn_errlog( c_ServiceName, "S31110", FMLMSG, c_errmsg.arr  );  /** VQC Changed from c_errmsg to c_errmsg.arr **/
       			EXEC SQL CLOSE :sys_iod_cursor; 
       			EXEC SQL FREE :sys_iod_cursor;
            tpfree ( ( char * ) ptr_fml_Obuf );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );  /** VQC Changed from c_errmsg to c_errmsg.arr **/
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
       }
       if(DEBUG_MSG_LVL_3)
       {
          fn_userlog(c_ServiceName,"c_igain_ordr_dtls =:%s:",c_igain_ordr_dtls.arr);
          fn_userlog(c_ServiceName,"c_igain_ordr_dtls1 =:%s:",c_igain_ordr_dtls1.arr);
       }
       if(Fadd32(ptr_fml_Obuf,FFO_TRNSCTN_TYP,(char *)c_igain_ordr_dtls1.arr,0) == -1 )
       {
          fn_userlog(c_ServiceName,"Error in Adding Igain Order reference Details");
          fn_errlog( c_ServiceName, "S31115", FMLMSG, c_errmsg.arr  ); /** VQC Changed from c_errmsg to c_errmsg.arr **/
       		EXEC SQL CLOSE :sys_iod_cursor; 
       		EXEC SQL FREE :sys_iod_cursor;
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 ); /** VQC Changed from c_errmsg to c_errmsg.arr **/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }

       EXEC SQL CLOSE :sys_iod_cursor; 
       EXEC SQL FREE :sys_iod_cursor;
		}
		else if(c_brkg_typ == 'N' )
		{
				/***  c_clm_brkr_cmpt_flg = '*';  *** Commeted in Ver VQC ***/
	
				c_source_flg = '*';

				/*** Commented following statement in Ver VQC ***
				strcpy(c_clm_fno_schm_code.arr, "*");
				c_clm_igain_op_flg ='*';              
				strcpy(c_clm_igain_op_schm.arr, "*"); 
				c_clm_igain_fp_flg ='*';              
				strcpy(c_clm_igain_fp_schm.arr, "*");

				***/
 
				strcpy(c_osm_schm_code.arr, "*");
				strcpy(c_period.arr, "*");
				strcpy(c_osd_lwr_rng_lotsz.arr, "*");
				strcpy(c_osd_upr_rng_lotsz.arr, "*");
				strcpy(c_osd_brkr_rng_rate.arr, "*");
				strcpy(c_osd_chrg_base.arr, "*");
				strcpy(c_osm_carry_frwd.arr, "*");

				/*** Commented following statement in Ver VQC **

        strcpy(c_igain_ordr_dtls1.arr,"");
			  strcpy(c_igain_ordr_dtls1.arr,"");
        ***/
 
        strcpy(c_igain_schm_code.arr,"");
        strcpy(c_igain_schm_desc.arr,"");
				i_total_lots = 0;
				i_intra_day_lots = 0;
				i_inrange_lots = 0;
				i_below_range_lots = 0;
				i_above_range_lots = 0;
				i_obc_carry_fwd_lot = 0;
				l_inrange_charges = 0;
				l_below_range_charges = 0;
				l_above_range_charges = 0;
				l_carry_fwd_charges = 0;
				l_total_charges = 0;

		}
   /*** Ver 2.0 Starts ***/   
    else if ( c_brkg_typ == 'X' || c_brkg_typ == 'D')   /*** Changed in ver 2.1 ***/
    {

     fn_userlog(c_ServiceName," Inside Brokerage Type 'X' (c_brkg_typ=:%c:)",c_brkg_typ);

    /**** commented       c_source_flg = 'X';  ***/

     c_source_flg = c_brkg_typ;   /***** changed in ver 2.1 ******/
		 MEMSET(c_op20_schm_code);	/** Ver 2.1 **/
		 MEMSET(c_op20_schm_desc);  /** Ver 2.1 **/
		 d_op20_fxd_brkg_rate=0.0;	/** Ver 2.1 **/
		 d_op20_var_brkg_rate=0.0;	/** Ver 2.1 **/


        if(i_rec_cnt_ordr_ref == 0 )
        {
          EXEC SQL
          SELECT  osm_schm_code,
                  OSM_SCHM_DESC,
                  decode(:c_prd_typ,'O',OSM_PROFIT_RATE,'I',OSM_PROFIT_RATE,NVL(OSM_FUT_FIXED_BRKG,0)),    /**** Ver 2.1 ****/
                  decode(:c_prd_typ,'O',OSM_VAR_BRKRG_RT,'I',OSM_VAR_BRKRG_RT,NVL(OSM_FUT_VAR_BRKG_RT,0))  /**** Ver 2.1 ****/ 
          INTO    :c_op20_schm_code,
                  :c_op20_schm_desc,
                  :d_op20_fxd_brkg_rate,
                  :d_op20_var_brkg_rate 
          FROM    OSM_OPTION_SCHEME_MSTR OSM,
                (select distinct IOD_SCHM_CD 
                 from   iod_igain_ordr_dtls_hstry 
                 where  IOD_ORDR_RFRNC=:c_ordr_rfrnc
                )IOD 
          WHERE trim(IOD.IOD_SCHM_CD)= trim(OSM.OSM_SCHM_CODE);
         }
         else
         {
          EXEC SQL
          SELECT  osm_schm_code,
                  OSM_SCHM_DESC,
                  decode(:c_prd_typ,'O',OSM_PROFIT_RATE,'I',OSM_PROFIT_RATE,NVL(OSM_FUT_FIXED_BRKG,0)),  /**** Ver 2.1 ****/
                  decode(:c_prd_typ,'O',OSM_VAR_BRKRG_RT,'I',OSM_VAR_BRKRG_RT,NVL(OSM_FUT_VAR_BRKG_RT,0)) /**** Ver 2.1 ****/
          INTO    :c_op20_schm_code,
                  :c_op20_schm_desc,
                  :d_op20_fxd_brkg_rate,
                  :d_op20_var_brkg_rate
          FROM    OSM_OPTION_SCHEME_MSTR OSM,
                (select distinct IOD_SCHM_CD
                 from   iod_igain_ordr_dtls
                 where  IOD_ORDR_RFRNC=:c_ordr_rfrnc
                )IOD
          WHERE trim(IOD.IOD_SCHM_CD)= trim(OSM.OSM_SCHM_CODE); 
         }
         if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
         {
              fn_errlog( c_ServiceName, "S31120", SQLMSG, c_errmsg.arr  ); 
              tpfree ( ( char * ) ptr_fml_Obuf );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 ); 
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }

      fn_userlog(c_ServiceName,"c_op20_schm_code.arr :%s:",c_op20_schm_code.arr);
      fn_userlog(c_ServiceName,"c_op20_schm_desc.arr :%s:",c_op20_schm_desc.arr);
      fn_userlog(c_ServiceName,"d_op20_fxd_brkg_rate :%lf:",d_op20_fxd_brkg_rate);
      fn_userlog(c_ServiceName,"d_op20_var_brkg_rate :%lf:",d_op20_var_brkg_rate);
      fn_userlog(c_ServiceName,"c_source_flg :%c:",c_source_flg);

      i_err[0] = Fadd32(ptr_fml_Obuf,FFO_STCK_CD,(char *)c_op20_schm_code.arr,0) ;
      i_err[1] = Fadd32(ptr_fml_Obuf,FFO_ACK_NMBR,(char *)c_op20_schm_desc.arr,0) ;
      i_err[2] = Fadd32(ptr_fml_Obuf,FFO_RATE,(char *)&d_op20_fxd_brkg_rate,0) ;
      i_err[3] = Fadd32(ptr_fml_Obuf,FFO_FUT_PRC,(char *)&d_op20_var_brkg_rate,0) ;
      i_err[4] = Fadd32(ptr_fml_Obuf,FFO_SOURCE_FLG,(char *)&c_source_flg,0) ;

      for(i_loop_cnt=0;i_loop_cnt<5 ;i_loop_cnt++ )
      {
           if(i_err[i_loop_cnt] == -1)
           {
             fn_userlog(c_ServiceName,"Error in Fadd of OP20-scheme details for i_loop_cnt [%d]",i_loop_cnt);
             fn_errlog( c_ServiceName, "S31125", FMLMSG, c_errmsg.arr  );  
             tpfree ( ( char * ) ptr_fml_Obuf );
             Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );     
             tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
           }
      }

      MEMSET(c_igain_ordr_dtls);

      if(i_rec_cnt_ordr_ref == 0 )
      {
        EXEC SQL 
            select  distinct IOD_ORDR_RFRNC || ',' ||
                    to_char(NVL(IOD_TOTAL_LOTS,0)) || ',' ||
                    to_char(NVL(IOD_PROFIT_RATE,0)/100) || ',' ||   
                    to_char(NVL(IOD_VAR_BRKRG,0)/100) || ',' ||
                    to_char(NVL(IOD_ORDR_LVL_BRKG,0)/100)
            into    :c_igain_ordr_dtls 
            from    iod_igain_ordr_dtls_hstry 
            where   IOD_ORDR_RFRNC = :c_ordr_rfrnc ;
      }
      else
      {
        EXEC SQL
            select  distinct IOD_ORDR_RFRNC || ',' ||
                    to_char(NVL(IOD_TOTAL_LOTS,0)) || ',' ||
                    to_char(NVL(IOD_PROFIT_RATE,0)/100) || ',' ||
                    to_char(NVL(IOD_VAR_BRKRG,0)/100) || ',' ||
                    to_char(NVL(IOD_ORDR_LVL_BRKG,0)/100)
             into   :c_igain_ordr_dtls 
             from   iod_igain_ordr_dtls
            where   IOD_ORDR_RFRNC = :c_ordr_rfrnc ;
      }
      if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S31130", SQLMSG, c_errmsg.arr  ); 
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 ); 
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

       if(DEBUG_MSG_LVL_3)
       {
          fn_userlog(c_ServiceName,"c_igain_ordr_dtls =:%s:",c_igain_ordr_dtls.arr);
       }
       if(Fadd32(ptr_fml_Obuf,FFO_TRNSCTN_TYP,(char *)c_igain_ordr_dtls.arr,0) == -1 )
       {
          fn_userlog(c_ServiceName,"Error in Adding Igain Order reference Details");
          fn_errlog( c_ServiceName, "S31135", FMLMSG, c_errmsg.arr  ); 
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 ); 
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }
     }
   /*** Ver 2.0 Ends ***/

    i_buf_len = sizeof(c_osm_schm_code) +
                sizeof(c_period) +
                sizeof(c_schm_desc) +
                sizeof(c_lot_charges_range)+
                sizeof(c_lot_charges_min)+
                sizeof(c_lot_charges_max)+
                sizeof(c_carry_fwd_charges.arr)+
                sizeof(i_total_lots)+
                sizeof(i_intra_day_lots)+
                sizeof(i_inrange_lots)+
                sizeof(i_below_range_lots)+
                sizeof(i_above_range_lots)+
                sizeof(i_obc_carry_fwd_lot)+
                sizeof(l_inrange_charges)+
                sizeof(l_below_range_charges)+
                sizeof(l_above_range_charges)+
                sizeof(l_carry_fwd_charges)+
                sizeof(l_total_charges)+
                + 512;

    if(Fneeded32(1,i_buf_len) > Funused32(ptr_fml_Obuf))
    {
        ptr_fml_Obuf = (FBFR32 *)tprealloc((char *)ptr_fml_Obuf,
                                        (Fsizeof32(ptr_fml_Obuf) + MIN_FML_BUF_LEN));
        if(ptr_fml_Obuf == NULL)
        {
          fn_errlog( c_ServiceName, "S31140", FMLMSG, c_errmsg.arr  ); /** VQC Changed from c_errmsg to c_errmsg.arr **/
   				/***  EXEC SQL CLOSE :sys_cursor; *** Commeted in Ver VQC ***/
          /***  EXEC SQL FREE  :sys_cursor; *** Commeted in Ver VQC ***/     
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );  /** VQC Changed from c_errmsg to c_errmsg.arr **/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
    }

    i_err[0] = Fadd32(ptr_fml_Obuf,FFO_ORD_TOT_QTY,(char *)&i_total_lots,0) ;
    i_err[1] = Fadd32(ptr_fml_Obuf,FFO_TOT_QTY_TRDD,(char *)&i_intra_day_lots,0) ;
    i_err[2] = Fadd32(ptr_fml_Obuf,FFO_EXCR_EXCTD_QTY,(char *)&i_inrange_lots,0) ;
    i_err[3] = Fadd32(ptr_fml_Obuf,FFO_MIN_LOT_QTY,(char *)&i_below_range_lots,0) ;
    i_err[4] = Fadd32(ptr_fml_Obuf,FFO_FRS_QTY,(char *)&i_above_range_lots,0) ;
    i_err[5] = Fadd32(ptr_fml_Obuf,FFO_EXCR_REQ_QTY,(char *)&i_obc_carry_fwd_lot,0) ;
    i_err[6] = Fadd32(ptr_fml_Obuf,FFO_NET_TRD_VAL,(char *)&l_inrange_charges,0) ;
    i_err[7] = Fadd32(ptr_fml_Obuf,FFO_BASE_ORD_VAL,(char *)&l_below_range_charges,0) ;
    i_err[8] = Fadd32(ptr_fml_Obuf,FFO_INTERVAL,(char *)&l_above_range_charges,0) ;
    i_err[9] = Fadd32(ptr_fml_Obuf,FFO_C_ORG_OPN_VAL,(char *)&l_carry_fwd_charges,0) ;
    i_err[10] = Fadd32(ptr_fml_Obuf,FFO_TOT_VAL_TRDD,(char *)&l_total_charges,0) ;

    i_err[11] = Fadd32(ptr_fml_Obuf,FFO_SOURCE_FLG,(char *)&c_source_flg,0) ;
    i_err[12] = Fadd32(ptr_fml_Obuf,FFO_RCRD_DT,(char *)c_period.arr,0) ;
    i_err[13] = Fadd32(ptr_fml_Obuf,FFO_INDX_CD,(char *)c_osm_schm_code.arr,0) ;
    i_err[14] = Fadd32(ptr_fml_Obuf,FFO_PRDCT_DESC,(char *)c_schm_desc.arr,0) ;
    i_err[15] = Fadd32(ptr_fml_Obuf,FFO_TOTAL_COST,(char *)c_lot_charges_range.arr,0) ;
    i_err[16] = Fadd32(ptr_fml_Obuf,FFO_LOW_PT,(char *)c_lot_charges_min.arr,0) ;
    i_err[17] = Fadd32(ptr_fml_Obuf,FFO_HIGH_PT,(char *)c_lot_charges_max.arr,0) ;
		i_err[18] = Fadd32(ptr_fml_Obuf,FFO_CSH_INFLW,(char *)c_carry_fwd_charges.arr,0) ;

    for(i_loop_cnt=0;i_loop_cnt<=18;i_loop_cnt++)
    {
      if(i_err[i_loop_cnt] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd of OPM-scheme details for i_loop_cnt [%d]",i_loop_cnt);
        fn_errlog( c_ServiceName, "S31145", FMLMSG, c_errmsg.arr  );  /** VQC Changed from c_errmsg to c_errmsg.arr **/
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 ); /** VQC Changed from c_errmsg to c_errmsg.arr **/
        /**  tpcommit(0);                                         *** Commented in Ver VQC ***/ 
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
 }

 if(DEBUG_MSG_LVL_0)   /** Added in Ver VQC **/
 {		
   fn_userlog(c_ServiceName,"End of SFO_TRD_DTLS");
 }

 /*** EXEC SQL CLOSE :sys_cursor; *** Commeted in Ver VQC ***/
 /*** EXEC SQL FREE :sys_cursor;  *** Commeted in Ver VQC ***/	

 /*tpfree ( ( char * ) ptr_st_tradebook ); *** ver 1.6 comment **/
 tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
}
