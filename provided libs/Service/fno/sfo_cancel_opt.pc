/******************************************************************************/
/*	Program	    			:	SFO_CANCEL_OPT                                        */
/*                                                                            */
/*  Input             : FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_ORDR_RFRNC                                        */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PIPE_ID                                           */
/*                                                                            */
/*  Output            : FFO_ERR_MSG                                           */
/*                                                                            */
/*  Description       : To cancel a Options order                             */
/*                                                                            */
/*  Log               : 1.0   17-Oct-2001    S. Swaminathan                   */
/*  Log               : 1.1   17-Jul-2002   Infotec|Sangeet                   */
/*  Log               : 1.2   06-Feb-2003   Sridhar|Sangeet                   */
/*  Log               : 1.3   17-Apr-2007   Infotech|Shailesh                 */
/*  Log               : 1.4   24-Jan-2008   Infotech|Shailesh                 */
/*  Log								: 1.5   16-Mar-2007		Rohit|                            */
/*  Log               : 1.6		07-Feb-2008		Infotech|SKS											*/
/*	Log								: 1.7   02-Jan-2009		Infotech|Sandeep									*/
/*  Log               : 1.8   13-Mar-2009   Infotech|Vidyayini Krish					*/
/*	Log								:	1.9		25-Oct-2010		Infotech|Sandeep									*/
/*  Log               : 2.0   23-Nov-2010   Shailesh Hinge| Infotech          */
/*  Log               : 2.1   07-Jul-2011   Infotech|Mahesh                   */
/*  Log               : 2.2   24-Feb-2012   Infotech|Sandip                   */
/*  Log               : 2.3   02-Jul-2012   Infotech|Swati A.B                */
/*  Log               : 2.4   03-Jul-2012   Infotech|Navina D                 */
/*  Log               : 2.5   30-Oct-2012   Infotech|Swati A.B                */
/*  Log               : 2.6   05-Dec-2012   Infotech|Mahesh                   */
/*  Log               : 2.7   25-Jan-2013   Infotech|Navina D.                */
/*  Log               : 2.9   31-May-2013   Infotech|Bhushan S.               */
/*  Log               : 3.0   16-Sep-2013   Infotech|Swati A.B								*/
/*  Log               : 3.1   10-Apr-2014   Infotech|Bhushan S.               */
/*  Log               : 3.2   18-Jun-2014   Infotech|Anand Dhopte             */
/*  Log               : 3.3   08-Aug-2014   Infotech|Sachin Birje             */
/*  Log               : 3.4   05-Aug-2015   Infotech|Anand Dhopte             */      
/*  Log               : 3.6   05-Oct-2015   Infotech|Bhupendra Malik          */
/*  Log               : 3.7   01-Mar-2016   Infotech|Vishal Borhade           */      
/*	Log								:	3.8	 	10-Mar-2016		Infotech|Kishor Borkar						*/
/*  Log               : 3.9   14-Jul-2016   Infotech|Bhupendra Malik          */
/*  Log               : 4.0   23-Aug-2016   Infotech|Bhupendra Malik          */
/*  Log               : 4.2   26-Oct-2016   Infotech|Kishor Borkar            */
/*  Log               : 4.3   05-Dec-2016   Infotech|Kishor Borkar            */
/*  Log               : 4.4   12-Dec-2017   Infotech|Anand Dhopte             */
/*  Log  							: 4.5   13-Dec-2017		Infotech|Parag Kanojia						*/
/*	Log								: VQC		14-Dec-2017		Infotech|Parag Kanojia						*/
/*  Log               : 4.6   11-Jul-2018   Infotech|Suchita Dabir            */
/*  Log               : 4.7   13-May-2019   Infotech|Parag Kanojia            */
/*  Log               : 4.8   21-May-2019   Infotech|Suchita Dabir            */
/*  Log               : 4.9   24-Oct-2019   Infotech|Tanmay Patel             */
/*  Log               : 5.0   13-Nov-2019   Infotech|Anand Dhopte             */
/*	Log								:	5.1		02-Feb-2021		Infotech|Kiran Itkar							*/
/*	Log								:	5.2		07-Mar-2023		Infotech|pranav anand							*/
/*	Log								:	5.3		07-Mar-2023		Infotech|Mahesh Shinde						*/
/******************************************************************************/
/*  1.0  -  New Release                                                       */
/*  1.1  -  For the implementation of BP                                      */
/*  1.2  -  for blocking multiple cancellation for same order                 */
/*  1.3  -  Broker status check for NNF 803                                   */
/*  1.4  -  Handling of cancellation  rejection in case of partial execution  */
/*  1.5  -  No modification allowed check added																*/ 
/*	1.6	 -  AIX Migration                                                     */
/*	1.7  -  NNF Changes For Extended Market Hours															*/
/*  1.8  -  New view variables implemented																		*/
/*	1.9	 -  Product Type Check Added.																					*/
/*  2.0  -  SilverLight                                                     	*/
/*  2.1  -  SPAN Changes                                                      */
/*  2.2  -  BSE Changes                                                       */
/*  2.3  -  SPAN T&C Handling                                                 */
/*	2.4	 -	Storing ip address in Exchange book														    */
/*	2.5	 -	CR-Overnight Orders Changes 																			*/
/*  2.6  -  Broker closeout changes                                           */
/*  2.7  -  SPAN FuturePLUS handling                                          */
/*  2.9  -  Restrict DBC mapped customer to cancel order if CLM_TRD_FLG = 'N' */
/*  3.0  -  OptionPLUS Changes 																							  */
/*  3.1  -  Pipe Id Check for BSE																							*/
/*  3.2  -  Multiple DB Hits to CLM_CLNT_MSTR reduced by fetching all required */
/*          details into single DB hit.                                       */
/*  3.3  -  FO Auto MTM Changes                                               */
/*  3.4  -  Contract Master and Trade Quote Table Merger Changes              */
/*  3.6  -  Market to Limit option plus changes                               */
/*  3.7  -  Check to restrict Cancellation of Invalid combination             */
/*          of Order reference and Match Account.                             */
/*  3.8  -  Transaction Flag in Check Session IP                              */
/*  3.9  -  Log Maintenance                                                   */
/*  4.0  -  My Eos Changes                                                    */
/*  4.2  -  Future Trail Changes                                              */
/*  4.3  -  Transaction through IP for Option plus                            */
/*  4.4  -  FML with data type char used instead of long for storing          */
/*          wrapper flag                                                      */
/*	4.5	 -	Reducing Hard Parsing.																						*/
/*  VQC  -  Version Quality Control Changes                                   */
/*  4.6  -  Physical Settlement of stock derivative changes                   */ 
/*	4.7  - 	EOS enhancements for Physical settlement in F&O Changes						*/
/*  4.8  -  Updating the executed quantity to 0 and version correction        */
/*          ver 4.8 changed to 4.6 in version correction                      */
/*  4.9  -  Ipv6 Format                                                       */
/*  5.0  -  CR-ISEC18-127640 Sub-broker dual order placement changes          */
/*	5.1	 -	Separate EOS for Stock and Index Underlyings in OptionPlus				*/
/*  5.2  -  CR-ISEC18-175354_ Unique Device Identifiers for orders placed through IBT & STWT(pranav anand)*/
/*  5.3  -  FNO lock user changes																							*/
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <eba_to_ors.h>
/**	#include <fml_def.h>		Commented in VQC **/
#include <fo_fml_def.h>
#include <fo_view_def.h> 
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>             /*  Ver 1.6 : Added   */
#include <fn_val_ord.h>         /*  Ver 1.6 : Added   */
#include <fml_rout.h>           /*  Ver 1.6 : Added   */
#include <fn_read_debug_lvl.h>  /*  Ver 1.6 : Added   */
#include <fn_pos.h>							/*	Ver 2.4 */

int fn_check_ord_opt( char *c_ServiceName,
                  struct vw_orderbook *ptr_o_st_ordbook,
									char *c_fcm_mkt_typ,												/* Ver 1.7 */
									char *c_fum_mkt_typ,												/* Ver 1.7 */
                  struct vw_err_msg *ptr_st_err_msg );

void SFO_CANCEL_OPT( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;

	char c_ServiceName[33];
	varchar c_err_msg[256];		/** Data type changed from char to varchar in VQC **/ 
/**  char c_usm_sup_usr_typ;	
  char c_channel[4];					Commented In VQC **/			/*1.1 BP*/
  char c_alias[9];/*1.1 BP*/
  char c_bp_id[9];/*1.1 BP*/

	int i_returncode = 0;				/** VQC - Variable initialized **/		
	int i_level_exists = 0;			/** VQC - Variable initialized **/
	int i_trnsctn = 0;					/** VQC - Variable initialized **/
	int i_err[5];								/** VQC - Array size changed from 16 to 5 **/
	int i_ferr[5];							/** VQC - Array size changed from 16 to 5 **/
	long  l_xchng_seq_num = 0;	/** VQC - Variable initialized **/
/**	int   i_counter = 1;				Commented In VQC **/
	int i_ip_len = 0;						/** VQC - Variable initialized **/
	int i_op_len = 0;						/** VQC - Variable initialized **/
  int i_actn_id=-1;           /*2.0*/
/**  int i_is_dbc_cust = 0;     Commented In VQC **/       /***  Ver 2.9 ***/
  char c_psswd_req_flg = '\0';/** VQC - Variable initialized **/
  char c_xchng_remarks[257];

	char c_fno_dmn_nm [ 16 ];
  char c_fno_trg_nm [ 16 ];
  char c_fno_trg_dat [ 256 ];
	char c_fcm_mkt_typ = '\0'; /* Ver 1.7 */			/** VQC - Variable initialized **/
	char c_fum_mkt_typ = '\0';      /* Ver 1.7 */	/** VQC - Variable initialized **/
  /*** char c_spn_flg;          * Ver 2.1 * commented In Ver 2.3 ***/
  char c_spn_flg = 'N';          /* Ver 2.3 */
  char c_bse_spn_flg = '\0';          /* Ver 2.2 */	/** VQC - Variable initialized **/
	char c_ip_address[45+1]="\0";	/** Changed to 45 from 15 in Ver 4.9  **/ /* Ver 2.4 */
  char c_request_typ = 'C' ;          /* Ver 2.6 */
  char c_txn_flg='Y';             /*** Ver 3.8 ***/
  long l_init_sltp_rt=0;  /*** Ver 4.2 ***/
  long l_init_lmt_rt=0;   /*** Ver 4.2 ***/
  long l_lTP=0;           /*** Ver 4.2 ***/
  long l_trail_amt=0;     /*** Ver 4.2 ***/
  long l_lmt_offset=0;    /*** Ver 4.2 ***/
  char c_prcimpv_flg='\0';  /*** Ver 4.2 ***/

	/*** Ver 3.0 Starts ***/

	/* char c_sys_msg[4]; Commented in Ver 4.0 */
	char c_sys_msg[11];  /* Ver 4.0 */        
	varchar c_err_msg1[256];		/** Data type changed from char to varchar in VQC**/    
	char c_mtm_op_eos = '\0'; 
	int  i_mtm_flg = 0 ; 

	/*** Ver 3.0 Ends   ***/

  /** Ver 3.6 Starts **/
  char c_ordr_stts='\0';
  char c_tag_ordr_stts='\0';
  char c_check_flag='\0';
  char c_tag_ordr_ref[19]="\0";
  /** Ver 3.6 Ends **/

  /** ver 4.6 started **/
  char c_dlvry_pos_allwd = 'Y';
  char c_setlmnt_flg = 'C';
  char c_dlvry_eos_flg = 'N';
  /** ver 4.6 ended **/
  
  char c_trd_flg = '\0';    /*** Ver 3.2 ***/	/** VQC - Variable initialized **/
  char c_alias_nm[9];/*** Ver 3.2 ***/
	char c_exg_mkt_typ = 'D'; /*** Ver 4.5 ***/
 
 EXEC SQL BEGIN DECLARE SECTION;
		struct vw_usr_prfl st_usr_prfl;
		struct vw_orderbook st_o_ordbook;
		struct vw_xchngbook st_xchngbook;
		varchar c_usr_usr_psswrd[50];
    varchar c_trd_dt[LEN_DATE];
    varchar c_sys_dt[LEN_DATE];

	EXEC SQL END DECLARE SECTION;

	struct vw_orderbook st_i_ordbook;
/**	struct vw_xchngbook st_s_xchngbk;			Commented In VQC **/  
	struct vw_sequence st_s_sequence;
	struct vw_sequence st_r_sequence;
	struct vw_pstn_actn st_pstn_actn;
	struct vw_err_msg st_err_msg;
  struct vw_contract st_cntrct;							/*** Ver 2.6 ***/
  

	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
	strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.6 : Added   */
 
	MEMSET(st_i_ordbook);  /** Ver 4.0 **/ 
  MEMSET(st_o_ordbook); /** Ver 4.0 **/
	MEMSET(st_usr_prfl);		/**	MEMSET done in VQC **/	
	MEMSET(st_xchngbook);		/** MEMSET done in VQC **/
	MEMSET(st_s_sequence);	/** MEMSET done in VQC **/
	MEMSET(st_r_sequence);	/** MEMSET done in VQC **/
	MEMSET(st_pstn_actn);		/** MEMSET done in VQC **/		
	MEMSET(st_err_msg);			/** MEMSET done in VQC **/	
	MEMSET(st_cntrct);			/** MEMSET done in VQC **/

	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_usr_prfl,
                           "vw_usr_prfl" );
	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg.arr  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_xchngbook,
                           "vw_xchngbook" );
	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg.arr  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  /*** Ver 3.6 Starts ***/

   /*** Commented in Ver 4.4 as data-type of FML used is long and variable data-type is char ***
   i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_USR_FLG,0,(char *)&c_check_flag,0);
   ***/
  
   i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_CLSR_TYP,0,(char *)&c_check_flag,0); /*** Ver 4.4 ***/ 
   i_ferr [0] = Ferror32;
   if ( i_err[0] == -1  && Ferror32 != FNOTPRES)
     {
       fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg.arr  );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
   if(DEBUG_MSG_LVL_3) /*** DEBUG_MSG_LVL_3 Added in Ver 3.9 ***/
	 {
		 fn_userlog(c_ServiceName,":c_check_flag ---------------------------------- %c :",c_check_flag);
	 }
	/*** Ver 3.6 ends ***/

  /* Ver 4.3 Starts */
  if(c_check_flag == 'W')
  {
    MEMSET(c_ip_address);

   i_err[1]  = Fget32(ptr_fml_Ibuf,FFO_OI_INDCTR,0,(char *)c_ip_address,0);
   i_ferr [1] = Ferror32;

   if ( i_err[1] == -1  && Ferror32 != FNOTPRES)
   {
     fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg.arr  );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
     Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
  }

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName, "c_ip_address is...:%s:",c_ip_address);
  }
  /* Ver 4.3 Ends */

  /***  Ver 2.9 Starts  ***/

  /***  Ver 3.2  Starts  ***/

    MEMSET(c_bp_id);
    MEMSET(c_alias_nm);
    c_trd_flg ='\0';
    c_spn_flg='\0';
    c_bse_spn_flg='\0';

		/*** Below query changed to capital case in Ver 4.5 ***/

    EXEC SQL  
    SELECT CLM_TRD_FLG,
           NVL(CLM_BP_ID,'*'),
           NVL(CLM_SPAN_ALLWD,'N'),
           NVL(CLM_BSESPAN_ALLWD,'N'),
           NVL(CLM_ALIAS_NAME,'*')
    INTO   :c_trd_flg,
           :c_bp_id,
           :c_spn_flg,
           :c_bse_spn_flg,
           :c_alias_nm
    FROM   CLM_CLNT_MSTR
    WHERE  CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt;

   if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName, "Failed To Get SPAN Flag.");
    fn_errlog(c_ServiceName, "S31025", SQLMSG, c_err_msg.arr);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

   rtrim(c_bp_id);
   rtrim(c_alias_nm);

  if(DEBUG_MSG_LVL_3) /*** DEBUG_MSG_LVL_3 Added in Ver 3.9 ***/
	{
		fn_userlog(c_ServiceName,"Trade flag :%c:",c_trd_flg);
		fn_userlog(c_ServiceName,"BP id :%s:",c_bp_id);
		fn_userlog(c_ServiceName," NSE span flag :%c:,Bse Span Flag :%c:",c_spn_flg,c_bse_spn_flg);
		fn_userlog(c_ServiceName,"Nick Name :%s:",c_alias_nm);
	}
   /** Ver 3.2 Ends **/

  if(st_usr_prfl.c_user_id[0] != BPID && strcmp(st_usr_prfl.c_user_id,"system") != 0)
  {
/**    i_is_dbc_cust = 0;   Commented In VQC **/
  /*****************  Ver 3.2 comment starts ***************
    EXEC SQL
        SELECT 1
            INTO :i_is_dbc_cust
        FROM  CLM_CLNT_MSTR
        WHERE CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
        AND   CLM_TRD_FLG = 'N'
        AND   CLM_BP_ID IS NOT NULL;

    if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
    {
      fn_errlog( c_ServiceName, "S31030",SQLMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if ( i_is_dbc_cust == 1 )
 *********************  Ver 3.2 comment ends **************/

   if(c_trd_flg=='N' && strcmp(c_bp_id,"*")!=0)   /** Ver 3.2 **/
   {
      fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst, this facility has been Disabled");
      fn_errlog( c_ServiceName, "B35018", "", c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
 
  }

  /***  Ver 2.9  Ends  ***/

  /*** Ver 5.0 Starts ***/

  if(st_usr_prfl.c_user_id[0] ==BPID)
   {
     if( fn_simaltns_ssn_term ( c_ServiceName,st_usr_prfl.c_user_id,st_usr_prfl.l_session_id,st_usr_prfl.c_cln_mtch_accnt,c_err_msg.arr) == -1 )
     {
      fn_errlog(c_ServiceName,"S31035","Error while checking simultaneous active session",c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

  /*** Ver 5.0 Ends ***/

	 /***  Ver 2.1 SPAN Flag Check ***/
  /**************************  Ver 3.2 comment starts ***********
  EXEC SQL
    SELECT  NVL(CLM_SPAN_ALLWD,'N'),
						NVL(CLM_BSESPAN_ALLWD,'N')			*** Ver 2.2 **
    INTO    :c_spn_flg,
						:c_bse_spn_flg 									*** Ver 2.2 **
    FROM    CLM_CLNT_MSTR
    WHERE   CLM_MTCH_ACCNT  = :st_usr_prfl.c_cln_mtch_accnt;

  if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName, "Failed To Get SPAN Flag.");
    fn_errlog(c_ServiceName, "S31040", SQLMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

  ********************************** Ver 3.2 comment ends ********/

  if(DEBUG_MSG_LVL_3) /*** DEBUG_MSG_LVL_3 Added in Ver 3.9 ***/
	{
		fn_userlog(c_ServiceName,"SPAN Allowed Flag Is :%c:",c_spn_flg);
		fn_userlog(c_ServiceName,"BSE SPAN Allowed Flag Is :%c:",c_bse_spn_flg);
	}
  /*if ( c_spn_flg == 'Y' )			*** ver 2.2 comment***/


  /*** Ver 3.1 Starts ***/

	if(DEBUG_MSG_LVL_3) /*** DEBUG_MSG_LVL_3 Added in Ver 3.9 ***/
	{
		fn_userlog(c_ServiceName, "st_xchngbook.c_ordr_rfrnc[8] :%c:",st_xchngbook.c_ordr_rfrnc[8]);
	}
  if(st_xchngbook.c_ordr_rfrnc[8] == 'A')
  {
    if(DEBUG_MSG_LVL_3) /*** DEBUG_MSG_LVL_3 Added in Ver 3.9 ***/
		{
			fn_userlog(c_ServiceName, "BSE Exchange Code :%s:",st_xchngbook.c_xchng_cd);
		}

    MEMSET(st_xchngbook.c_xchng_cd);
    strcpy(st_xchngbook.c_xchng_cd,"BFO");
  }

	if(DEBUG_MSG_LVL_3) /*** DEBUG_MSG_LVL_3 Added in Ver 3.9 ***/
	{
		fn_userlog(c_ServiceName, "Exchange Code :%s:",st_xchngbook.c_xchng_cd);
	}
  /*** Ver 3.1 Ends ***/


  /*** if ( ( c_spn_flg == 'Y' && strcmp(st_xchngbook.c_xchng_cd,"NFO") == 0 ) || commented In Ver 2.3 ***/
  if ( ( ( c_spn_flg == 'Y' || c_spn_flg == 'Z') && strcmp(st_xchngbook.c_xchng_cd,"NFO") == 0 ) ||
			 ( c_bse_spn_flg == 'Y' && strcmp(st_xchngbook.c_xchng_cd,"BFO") == 0 )
		 )		/*** Ver 2.2 **/ /*** Ver 2.3 ***/
  {
    fn_userlog(c_ServiceName, "SPAN Customer Trying To Place Order Under Normal Margining System.");
    strcpy(c_err_msg.arr,"You Are Marked Under SPAN.Can Cancel Order Only Through New Site.");
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }
  /**** END Ver 2.1 ***/
	fn_init_ddr_pop ( st_xchngbook.c_pipe_id,TRADING_SECTION,O_CS);

  /*** Added in Ver 4.0 ***/
  MEMSET(c_sys_msg);
  if(Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0) == -1)
  {
    if (Ferror32 != FNOTPRES)
    {
      fn_errlog( c_ServiceName, "S31045",FMLMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  /*** Added in Ver 4.0 Ends ***/

    /***1.1 start ***/

    if(st_usr_prfl.c_user_id[0] == BPID  && strcmp(c_sys_msg,"MY_EOS") != 0) /*** MY_EOS added in Ver 4.0 ***/
    {
      if(Fget32(ptr_fml_Ibuf,FFO_ALIAS,0,(char *)c_alias,0) == -1)
      {
            fn_errlog( c_ServiceName, "S31050", FMLMSG, c_err_msg.arr  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    i_level_exists = 0;
    
   /********************  Ver 3.2 comment starts    *********  
      EXEC SQL
        SELECT 1
        INTO   :i_level_exists
        FROM   clm_clnt_mstr
        WHERE  clm_mtch_accnt = :st_usr_prfl.c_cln_mtch_accnt
        AND    clm_bp_id      = :st_usr_prfl.c_user_id
        AND    clm_alias_name = :c_alias;

      fn_userlog(c_ServiceName,"BP alias  is :%s:",c_alias);
      fn_userlog(c_ServiceName,"BP channel  is :%s:",c_channel);
      if(i_level_exists != 1 )
   ***********************  Ver 3.2 comment ends     **********/

      if(strcmp(c_alias_nm,c_alias)!=0 )  /*** Ver 3.2 ***/
     {
            fn_errlog( c_ServiceName, "B55006", "", c_err_msg.arr  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      strcpy(c_bp_id,st_usr_prfl.c_user_id);
    }
    else
    {
      strcpy(c_bp_id," ");
    }
	
		/*** 1.1 Ends ***/

	if( DEBUG_MSG_LVL_3 ) {         /*  Ver 1.6 : Debug level Change  */
    fn_userlog( c_ServiceName, "User id       :%s:",
                                  st_usr_prfl.c_user_id );
    fn_userlog( c_ServiceName, "Session id    :%ld:",
                                  st_usr_prfl.l_session_id );
    fn_userlog( c_ServiceName, "Match Account :%s:",
                                  st_usr_prfl.c_cln_mtch_accnt );
	}
	if( DEBUG_MSG_LVL_1) /** DEBUG_MSG_LVL_1 Added in Ver 3.9 **/
	{
   	fn_userlog( c_ServiceName, "Order Reference :%s:",
                                 st_xchngbook.c_ordr_rfrnc );
	}
	if( DEBUG_MSG_LVL_3 ) /** DEBUG_MSG_LVL_3 Added in Ver 3.9 **/
	{
   	fn_userlog( c_ServiceName, "Pipe ID :%s:", st_xchngbook.c_pipe_id );
   	fn_userlog( c_ServiceName, "Remarks :%s:", st_xchngbook.c_xchng_rmrks );
	}

  strcpy ( c_xchng_remarks, st_xchngbook.c_xchng_rmrks );
  rtrim ( c_xchng_remarks );

  c_psswd_req_flg = NO;
 
  /**********1.3 Starts *********************/
 
	/*** Commented in ver 2.6 
  i_returncode=fn_chk_closeout(c_ServiceName,
                            &st_xchngbook,
                            &st_err_msg);

  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31055", "Broker Under Closeout", c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   **Ver 2.0**
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  ************************************/

  /**********1.3 Ends*********************/


	/*** Commented in Ver 2.4 ***
	i_returncode =  fn_check_user ( c_ServiceName,
                                  &st_usr_prfl ,
                                  c_usr_usr_psswrd.arr,			* Ver 1.6 : Extention .arr added *
                                  c_psswd_req_flg,
                                  &st_err_msg );
	*****************************/

	/*** Added in Ver 2.4 ***/
  if( c_check_flag !='W')    /*** Condition  added in Ver 3.6 ***/
  {
	i_returncode =  fn_check_user_ip ( c_ServiceName,
																		 &st_usr_prfl ,
																		 c_usr_usr_psswrd.arr,
																		 c_psswd_req_flg,
																		 c_ip_address,
                                     c_txn_flg,                   /*** Ver 3.8 ***/
																		 &st_err_msg );
	/*************************/

  if ( i_returncode == -1 )
  {
		fn_errlog( c_ServiceName, "S31060", LIBMSG, c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  }

	if(DEBUG_MSG_LVL_3)	/*** Ver 2.4 ***/
	{
		fn_userlog(c_ServiceName,"ip address:%s:",c_ip_address);
	}

  /*** Ver 3.3 Starts Here ***/
  if (st_xchngbook.c_mkrt_typ == 'A' ) /** Auto MTM Cancel Order Placement ***/
  {
   MEMSET(c_ip_address);
   strcpy(c_ip_address,"A");
  }
  /*** Ver 3.3 Ends Heer  ***/

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr );
  if ( i_trnsctn == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  strcpy( st_i_ordbook.c_ordr_rfrnc,st_xchngbook.c_ordr_rfrnc);
	fn_cpy_ddr ( st_i_ordbook.c_rout_crt );
	st_i_ordbook.c_oprn_typ = FOR_UPDATE;

	i_ip_len = sizeof ( struct vw_orderbook );
  i_op_len = sizeof ( struct vw_orderbook );
  
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg.arr,
                              &st_i_ordbook,
                              &st_o_ordbook,
                              "vw_orderbook",
                              "vw_orderbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_REF_TO_ORD" );
   
  if ( i_returncode != SUCC_BFR )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /** Ver 3.7 Starts **/

  rtrim(st_usr_prfl.c_cln_mtch_accnt);
  rtrim(st_o_ordbook.c_cln_mtch_accnt);

  if( DEBUG_MSG_LVL_1 ) /****DEBUG_MSG_LVL_1 Added in Ver 3.9 ***/ 
  {
    fn_userlog( c_ServiceName, "From SFO_CANCEL_OPT Match Account  :%s:", st_usr_prfl.c_cln_mtch_accnt );
	}
	if(DEBUG_MSG_LVL_3) /****DEBUG_MSG_LVL_3 Added in Ver 3.9 ***/
	{
    fn_userlog( c_ServiceName, "From SFO_REF_TO_ORD Match Account :%s:", st_o_ordbook.c_cln_mtch_accnt );
  }

  if( strcmp(st_usr_prfl.c_cln_mtch_accnt,st_o_ordbook.c_cln_mtch_accnt) != 0 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    fn_errlog(c_ServiceName, "S31065", "Invalid Combination of Order Reference And Match Account.", c_err_msg.arr);
    fn_userlog(c_ServiceName,"Invalid Combination of Order Reference And Match Account.");
    MEMSET(c_err_msg.arr);
    strcpy(c_err_msg.arr,"Invalid Combination of Order Reference And Match Account.");
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

  /** Ver 3.7 Ends **/

	/*** Commentd in ver 4.7 ***
  ** Ver 4.6 starts **

  if( st_o_ordbook.c_prd_typ == 'F' || st_o_ordbook.c_prd_typ == 'O' )
  {
  EXEC SQL
       SELECT NVL( ftq_dlvry_pos_allwd, 'Y' )
       INTO   :c_dlvry_pos_allwd
       FROM   FTQ_FO_TRD_QT
       WHERE  FTQ_XCHNG_CD  = :st_o_ordbook.c_xchng_cd
         AND  FTQ_PRDCT_TYP = :st_o_ordbook.c_prd_typ
         AND  FTQ_UNDRLYNG  = :st_o_ordbook.c_undrlyng
         AND  FTQ_EXPRY_DT  = :st_o_ordbook.c_expry_dt
         AND  FTQ_EXER_TYP  = :st_o_ordbook.c_exrc_typ
         AND  FTQ_OPT_TYP   = :st_o_ordbook.c_opt_typ
         AND  FTQ_STRK_PRC  = :st_o_ordbook.l_strike_prc;

  if( SQLCODE != 0 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    fn_errlog( c_ServiceName, "S31070", LIBMSG, c_err_msg.arr );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }
  
  if (c_dlvry_pos_allwd == 'N')
  {
    if( Fget32(ptr_fml_Ibuf,FFO_BK_UBK_FLG,0,(char *)&c_dlvry_eos_flg,0) == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
           fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
           Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
           Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0); 
      }
      else if( Ferror32 == FNOTPRES )
      {
           c_dlvry_eos_flg='N';
      }
    }
    if (c_dlvry_eos_flg!='E')
    {
           fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
           fn_userlog(c_ServiceName,"Currently Trading is not allowed in this contract");
           MEMSET(c_err_msg.arr);
           strcpy(c_err_msg.arr,"Currently Trading is not allowed in this contract");
           Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
           Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
    }
   }
  }
  ** Ver 4.6 ends **	*** Ver 4.7 ***/

	/*** Added in ver 2.6 ***/

  if( DEBUG_MSG_LVL_5 )
  {
    fn_userlog(c_ServiceName, "Underlying is [%s] ", st_o_ordbook.c_undrlyng);
  }

	strcpy(st_cntrct.c_undrlyng,st_o_ordbook.c_undrlyng);
  strcpy(st_cntrct.c_xchng_cd,st_o_ordbook.c_xchng_cd);
  strcpy(st_cntrct.c_expry_dt,st_o_ordbook.c_expry_dt);
  st_cntrct.c_prd_typ     = st_o_ordbook.c_prd_typ;
  st_cntrct.c_exrc_typ    = st_o_ordbook.c_exrc_typ;
  st_cntrct.c_ctgry_indstk =st_o_ordbook.c_ctgry_indstk;
  st_cntrct.c_opt_typ     = st_o_ordbook.c_opt_typ;
  st_cntrct.l_strike_prc  = st_o_ordbook.l_strike_prc;

  i_returncode=fn_chk_closeout(c_ServiceName,
                            st_usr_prfl.c_cln_mtch_accnt,
														c_request_typ,	
														st_cntrct,				
                            &st_xchngbook,
                            &st_err_msg);

  if( i_returncode == -1 )
  {
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );  /** Added in VQC **/
    fn_errlog( c_ServiceName, "S31075", "Broker Under Closeout", c_err_msg.arr);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /*** end of  ver 2.6 ***/

	/***	Ver	1.9	Starts	***/

	/*** if( st_o_ordbook.c_prd_typ !=	'O') Commented In Ver 3.0 ***/
	if( st_o_ordbook.c_prd_typ !=	'O' && st_o_ordbook.c_prd_typ != 'I' )  /*** Ver 3.0 ***/
	{
		/*** fn_userlog(c_ServiceName,"Product Type Received For Option Cancellation IS :%c:",st_o_ordbook.c_prd_typ); Commnted In Ver 3.0 ***/
		fn_userlog(c_ServiceName,"Product Type Received For Option/OptionPLUS Cancellation IS :%c:",st_o_ordbook.c_prd_typ); /* Ver 3.0 */
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	/***	Ver	1.9	Ends	***/

  /* i_returncode = fn_lock_usr( c_ServiceName, st_usr_prfl.c_cln_mtch_accnt ); ** Ver 5.3 **/
  i_returncode = fn_lock_fno( c_ServiceName, st_usr_prfl.c_cln_mtch_accnt );   /** Ver 5.3 **/
  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	i_returncode = fn_check_ord_opt( c_ServiceName,
                               		 &st_o_ordbook, 
																	 &c_fcm_mkt_typ,			/* Ver 1.7 */
																	 &c_fum_mkt_typ,		  /* Ver 1.7 */
                               		 &st_err_msg );
  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	
	if(DEBUG_MSG_LVL_3) /** DEBUG_MSG_LVL_3 Added in Ver 3.9 **/
	{
		fn_userlog(c_ServiceName,"After Call To fn_check_ord_opt FCM Market Type Is :%c:",c_fcm_mkt_typ);
	}
	st_xchngbook.l_mdfctn_cntr = st_o_ordbook.l_mdfctn_cntr ;
	fn_cpy_ddr ( st_xchngbook.c_rout_crt );
	st_xchngbook.c_oprn_typ = WITHOUT_ORS_MSG_TYP;

	i_ip_len = sizeof ( struct vw_xchngbook );
  i_op_len = sizeof ( struct vw_xchngbook );
 
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg.arr,
                              &st_xchngbook,
                              &st_xchngbook,
                              "vw_xchngbook",
                              "vw_xchngbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_REF_TO_OMD" );
  
  if ( i_returncode != SUCC_BFR )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /*** Ver 3.3 Starts Here *****************************
  rtrim ( st_xchngbook.c_xchng_rmrks );
  strcat ( st_xchngbook.c_xchng_rmrks, c_xchng_remarks );
	*********************** Ver 3.3 Ends Here ************/

  /**** Ver 3.3 Starts Here ****/
  MEMSET(st_xchngbook.c_xchng_rmrks);
  if( strcmp (st_usr_prfl.c_user_id,"system")!= 0 )
  {
   strcpy(st_xchngbook.c_xchng_rmrks, c_xchng_remarks );
   strcat(st_xchngbook.c_xchng_rmrks,"User placed Cancellation");
  }
  else
  {
   strcpy ( st_xchngbook.c_xchng_rmrks, c_xchng_remarks );
  }
  /*** Ver 3.3 Ends Here *******/

  /*** Code Moved from line 861 in ver 4.0 Starts ***/
  if( st_o_ordbook.c_prd_typ == 'I' )
  {
    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
        if (Ferror32 != FNOTPRES)
        {
          fn_userlog(c_ServiceName," 444");
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg1.arr );
          fn_errlog( c_ServiceName, "S31080", FMLMSG, c_err_msg.arr  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        else if( Ferror32 == FNOTPRES )
        {
					if(DEBUG_MSG_LVL_3)
					{
          	fn_userlog(c_ServiceName,"Called by FP Customer from ASP");
					}
          i_mtm_flg =2;       /* if called by FP Customer from ASP */
        }
      }
      else /* success condition */
      {
				if(DEBUG_MSG_LVL_3)
				{
        	fn_userlog(c_ServiceName,"c_sys_msg =:%s:",c_sys_msg); /* if called from backoffice EOS  */
				}
        if (strcmp(c_sys_msg,"EOS") == 0 || strcmp(c_sys_msg,"EXCPT_EOS") == 0) /*** check EXCPT_EOS added in Ver 4.0 ***/
        {
          i_mtm_flg=1;
        }
        else if (strcmp(c_sys_msg,"MY_EOS") == 0) /*** else if loop Added in Ver 4.0 ***/
        {
           i_mtm_flg =2;
        }
      }
   }
   /*** Code Moved from line 861 in ver 4.0 Ends ***/

     /*** Ver 4.0 Starts ***/
  if ( strcmp(c_sys_msg,"EOS")==0  )
  {
     st_o_ordbook.c_req_typ='N';
  }
  else if( strcmp(c_sys_msg ,"MY_EOS")==0 )
  {
    st_o_ordbook.c_req_typ='M';
  }
  else if( strcmp(c_sys_msg ,"EXCPT_EOS") == 0 )
  {
     st_o_ordbook.c_req_typ='E';
  }
  if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog ( c_ServiceName, "st_o_ordbook.c_req_typ is :%c: ",st_o_ordbook.c_req_typ ) ;
	}
  /** Ver 4.0 Ends **/

    /*Validations added  ver 1.5 starts */ 
  if( (strcmp (st_usr_prfl.c_user_id,"system")!= 0 ) &&
    ( (strcmp (st_o_ordbook.c_channel,"SYS")==0 && strcmp(c_sys_msg,"MY_EOS")!=0 )||(strcmp(st_o_ordbook.c_channel,"OFF")==0))) /*** ver 4.0 ***/
  {
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    fn_errlog( c_ServiceName, "B22008",DEFMSG,c_err_msg.arr);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }  

	if((st_o_ordbook.c_ordr_stts == ORDERED )  && ((st_xchngbook.c_req_typ == CANCELLED ) 
																									&& (st_xchngbook.c_plcd_stts !=REJECT ))) 
	{
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    fn_errlog( c_ServiceName, "B28533",DEFMSG,c_err_msg.arr);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

    /* validations End  ver 1.5 ends */


	/**************** Ver 3.0 Starts *******************/

  if( DEBUG_MSG_LVL_5 )
  {
    fn_userlog(c_ServiceName,"c_req_typ = :%c:",st_xchngbook.c_req_typ);
    fn_userlog(c_ServiceName,"c_prd_typ =:%c:",st_o_ordbook.c_prd_typ);
  }
	if(DEBUG_MSG_LVL_3) /** DEBUG_MSG_LVL_3 Added in Ver 3.9 **/
	{
    fn_userlog(c_ServiceName,"c_prd_typ =:%c:",st_o_ordbook.c_prd_typ);
	}
  /**** Code moved at line 770 In  Ver 4.0 Starts ****
	if( st_o_ordbook.c_prd_typ == 'I' )    
  {
    fn_userlog(c_ServiceName," 333");
    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
        if (Ferror32 != FNOTPRES)
        {
          fn_userlog(c_ServiceName," 444");
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg1.arr );
          fn_errlog( c_ServiceName, "S31085", FMLMSG, c_err_msg.arr  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        else if( Ferror32 == FNOTPRES )
        {
          fn_userlog(c_ServiceName," 666");
          i_mtm_flg =2;       * if called by FP Customer from ASP *
        }
      }
      else * success condition *
      {
        fn_userlog(c_ServiceName," 777");
        fn_userlog(c_ServiceName,"c_sys_msg =:%s:",c_sys_msg); * if called from backoffice EOS  *
        if (strcmp(c_sys_msg,"EOS") == 0)
        {
          i_mtm_flg=1;
        }
    	}
   }
    ** Code Moved to line 770 in Ver 4.0 Ends *****/

		/*** Below query changed to capital case in Ver 4.5 ***/

	 if (st_o_ordbook.c_prd_typ == 'I' && i_mtm_flg == 2)
	 {
		fn_userlog( c_ServiceName, "CR-ISEC14-144377 Index/Stock :%c:",  st_o_ordbook.c_ctgry_indstk );   /*** Added in Ver 5.1 ***/
		
  	 EXEC SQL
  		 SELECT /*** MTM_OP_EOS_FLG Commented in Ver 5.1 ***/
							DECODE( :st_o_ordbook.c_ctgry_indstk,'I',MTM_OP_EOS_FLG,'S',MTM_OP_EOS_FLG_S,'N' )	/*** Ver 5.1 ***/ 
  		 INTO   :c_mtm_op_eos
  		 FROM   MTM_APPLN_STTS 
  		 WHERE  MTM_XCHNG_CD =  :st_xchngbook.c_xchng_cd
  		 AND    MTM_PIPE_ID  =  :st_xchngbook.c_pipe_id;

  	 if( SQLCODE != 0 )
  	 {
    	 fn_errlog( c_ServiceName, "S31090", SQLMSG,c_err_msg.arr  );
    	 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    	 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg1.arr );
    	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	 }

  	 if ( c_mtm_op_eos == 'Y')
  	 {
    	 fn_errlog( c_ServiceName, "B35020",DEFMSG, c_err_msg.arr  );
    	 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    	 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg1.arr );
    	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	 }
	 }


   /**************** Ver 3.0 Ends *******************/

  /******  Ver 3.6 Starts  ******************************/

   if(strcmp(c_sys_msg,"EOS")!=0 && st_o_ordbook.c_prd_typ=='I'  && strcmp(c_sys_msg,"MY_EOS")!=0 && strcmp(c_sys_msg,"EXCPT_EOS")!=0) /*** MY_EOS & EXCPT_EOS Added in Ver 4.0 ***/
   {
      EXEC SQL
       SELECT FOD_ORDR_STTS,
              FOD_SLTP_ORDR_RFRNC
       INTO   :c_ordr_stts,
              :c_tag_ordr_ref
       FROM   FOD_FO_ORDR_DTLS
       WHERE  FOD_ORDR_RFRNC = :st_xchngbook.c_ordr_rfrnc
       AND    FOD_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt;

  if( SQLCODE != 0 && SQLCODE == NO_DATA_FOUND)
  {
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );	  /** Added in VQC **/ 
    fn_errlog(c_ServiceName, "S31095", SQLMSG, c_err_msg.arr);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

  EXEC SQL
   SELECT FOD_ORDR_STTS
   INTO   :c_tag_ordr_stts
   FROM   FOD_FO_ORDR_DTLS
   WHERE  FOD_ORDR_RFRNC = :c_tag_ordr_ref;
  if( SQLCODE != 0 && SQLCODE == NO_DATA_FOUND)
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );		/** Added in VQC **/ 
    fn_errlog(c_ServiceName, "S31100", SQLMSG, c_err_msg.arr);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

    if
    (
      (
        (  c_ordr_stts == 'O' && c_tag_ordr_stts == 'O') ||
        (  c_ordr_stts == 'O' && c_tag_ordr_stts == 'J'  )||
        (  c_ordr_stts == 'O' && c_tag_ordr_stts == 'C' ) ||
        (  c_ordr_stts == 'J' && c_tag_ordr_stts == 'O' ) ||
        (  c_ordr_stts == 'C' && c_tag_ordr_stts == 'O')
         ) &&
      ( c_ordr_stts !='C' ) &&
      ( c_ordr_stts !='J')
    )
    {
      fn_userlog(c_ServiceName,"Order is valid for Cancellation..continue...");
    }
    else
    {
      fn_errlog(c_ServiceName, "S31105", LIBMSG, c_err_msg.arr);
      strcpy(c_err_msg.arr,"Cancellation not allowed, please verify the order status ");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
    }
  }
 /********** ** Ver 3.6 Ends *******************/

		/*** Below query changed to capital case in Ver 4.5 ***/

  EXEC SQL
  	/** SELECT to_char(exg_nxt_trd_dt,'DD-Mon-YYYY'), Commented In Ver 2.5 ***/
		SELECT TO_CHAR( GREATEST(EXG_NXT_TRD_DT,EXG_TMP_TRD_DT),'DD-Mon-YYYY'), /*** Ver 2.5 ***/
					 TO_CHAR(SYSDATE,'DD-Mon-YYYY hh24:mi:ss')
   	INTO   :c_trd_dt,
					 :c_sys_dt
   	FROM   EXG_XCHNG_MSTR 
   	WHERE  EXG_XCHNG_CD = :st_xchngbook.c_xchng_cd
/** AND    EXG_MKT_TYP  = 'D';	Commented In Ver 4.5	***/
   	AND    EXG_MKT_TYP  = :c_exg_mkt_typ;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31110",SQLMSG,c_err_msg.arr);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  SETNULL ( c_trd_dt );
  SETNULL ( c_sys_dt );
  strcpy( st_xchngbook.c_mod_trd_dt, (char *) c_trd_dt.arr);

		/* Ver 1.2 */
	if ( (st_xchngbook.c_plcd_stts == 'R'    )   && /* Request Placed */
		   ( st_xchngbook.c_req_typ == 'C'     )   )  /* Request Cancelled */
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    fn_errlog( c_ServiceName, "B28568",DEFMSG,c_err_msg.arr);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
		/* Ver 1.2 */

	if ( st_o_ordbook.c_ordr_stts == REQUESTED )
  {
		st_xchngbook.c_plcd_stts = ACCEPT;
		st_xchngbook.c_rms_prcsd_flg = NOT_PROCESSED;
		st_xchngbook.l_ors_msg_typ = ORS_NEW_ORD_ACPT;
  	strcpy( st_xchngbook.c_ack_tm, (char *) c_sys_dt.arr);
		strcpy( st_xchngbook.c_entry_dt_tm, (char *) c_sys_dt.arr);
  /** strcpy( st_xchngbook.c_xchng_rmrks, "CANCELLED BY CLIENT"); commented in ver 4.6 version correction ***/

		if (strcmp(c_xchng_remarks,"BAN") == 0)   /*** Ver 2.5 ***/
    {
      strcpy( st_xchngbook.c_xchng_rmrks ,"System placed Cancellation as stock under BAN period");
    }
    else if( strstr( st_xchngbook.c_xchng_rmrks ,"Physical Settlement EOS")) /** ver 4.6 starts version correction **/
    {
      fn_userlog(c_ServiceName,"Existing  remarks are  :%s:  and  :%s: ",c_xchng_remarks,st_xchngbook.c_xchng_rmrks); 
      strcpy( st_xchngbook.c_xchng_rmrks,"Physical Settlement EOS System placed Cancellation");
    }
    else
    {
      strcpy( st_xchngbook.c_xchng_rmrks, "CANCELLED BY CLIENT");
    }
    /** ver 4.6 ends version correction **/
		 st_xchngbook.l_dwnld_flg = NOT_DOWNLOAD;
		 st_xchngbook.d_jiffy = 0;
		 fn_cpy_ddr ( st_xchngbook.c_rout_crt );
		st_xchngbook.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;

		i_ip_len = sizeof ( struct vw_xchngbook );
  	i_op_len = sizeof ( struct vw_xchngbook );
    
  	i_returncode = fn_call_svc( c_ServiceName,
                              	c_err_msg.arr,
                              	&st_xchngbook,
                              	&st_xchngbook,
                              	"vw_xchngbook",
                              	"vw_xchngbook",
                              	i_ip_len,
                              	i_op_len,
                              	0,
                              	"SFO_UPD_XCHNGBK" );
        
  	if ( i_returncode != SUCC_BFR )
  	{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

		fn_cpy_ddr ( st_xchngbook.c_rout_crt );
  
  	i_returncode = fn_call_svc( c_ServiceName,
                              	c_err_msg.arr,
                              	&st_xchngbook,
                              	&st_xchngbook,
                              	"vw_xchngbook",
                              	"vw_xchngbook",
                              	i_ip_len,
                              	i_op_len,
                              	0,
                              	"SFO_OPT_ACK" );
      
  	if ( i_returncode != SUCC_BFR )
  	{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

	} /* End of order in REQUESTED state */

  /** Ver 1.4 added to handle cancellation rejection in case of partial execution  **/

  if ( ( ( st_o_ordbook.c_ordr_stts == ORDERED ) || (st_o_ordbook.c_ordr_stts == PARTIALLY_EXECUTED ) ) &&
     ( st_xchngbook.c_plcd_stts == 'R'     )   )  /* Request Placed */
  {
		st_xchngbook.c_plcd_stts = REJECT;
		st_xchngbook.c_rms_prcsd_flg = NOT_PROCESSED;
		st_xchngbook.l_ors_msg_typ = ORS_MOD_ORD_RJCT;
  	strcpy( st_xchngbook.c_ack_tm, (char *) c_sys_dt.arr);
		strcpy( st_xchngbook.c_entry_dt_tm, (char *) c_sys_dt.arr);
  	/** strcpy( st_xchngbook.c_xchng_rmrks, "CANCELLED BY CLIENT"); commented in ver 4.6 version correction ***/
    /*** ver 4.6 starts version correction ***/
    if( strstr( st_xchngbook.c_xchng_rmrks,"Physical Settlement EOS") )
    {
        fn_userlog(c_ServiceName,"Existing remarks :%s:",st_xchngbook.c_xchng_rmrks );
        strcpy( st_xchngbook.c_xchng_rmrks,"Physical Settlement EOS System placed Cancellation");
    }
    else 
    {
        strcpy( st_xchngbook.c_xchng_rmrks, "CANCELLED BY CLIENT");
    }
    /*** ver 4.6 ends version correction ***/
		st_xchngbook.l_dwnld_flg = NOT_DOWNLOAD;
		st_xchngbook.d_jiffy = 0;
		fn_cpy_ddr ( st_xchngbook.c_rout_crt );
		st_xchngbook.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;

		i_ip_len = sizeof ( struct vw_xchngbook );
  	i_op_len = sizeof ( struct vw_xchngbook );
  
  	i_returncode = fn_call_svc( c_ServiceName,
                              	c_err_msg.arr,
                              	&st_xchngbook,
                              	&st_xchngbook,
                              	"vw_xchngbook",
                              	"vw_xchngbook",
                              	i_ip_len,
                              	i_op_len,
                              	0,
                              	"SFO_UPD_XCHNGBK" );
      
  	if ( i_returncode != SUCC_BFR )
  	{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

		fn_cpy_ddr ( st_xchngbook.c_rout_crt );
    
  	i_returncode = fn_call_svc( c_ServiceName,
                              	c_err_msg.arr,
                              	&st_xchngbook,
                              	&st_xchngbook,
                              	"vw_xchngbook",
                              	"vw_xchngbook",
                              	i_ip_len,
                              	i_op_len,
                              	0,
                              	"SFO_OPT_ACK" );
    
    if ( i_returncode != SUCC_BFR )
  	{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

	}

  strcpy(st_pstn_actn.c_user_id, st_usr_prfl.c_user_id);
  st_pstn_actn.l_session_id  = st_usr_prfl.l_session_id;
  strcpy(st_pstn_actn.c_cln_mtch_accnt,st_o_ordbook.c_cln_mtch_accnt);
  st_pstn_actn.l_eba_cntrct_id = st_o_ordbook.l_eba_cntrct_id;
  strcpy(st_pstn_actn.c_xchng_cd,st_o_ordbook.c_xchng_cd);
  st_pstn_actn.c_prd_typ = st_o_ordbook.c_prd_typ;
  strcpy(st_pstn_actn.c_undrlyng,st_o_ordbook.c_undrlyng);
  strcpy(st_pstn_actn.c_expry_dt,st_o_ordbook.c_expry_dt);
  st_pstn_actn.c_exrc_typ = st_o_ordbook.c_exrc_typ;
  st_pstn_actn.c_opt_typ = st_o_ordbook.c_opt_typ;
  st_pstn_actn.l_strike_prc = st_o_ordbook.l_strike_prc;
  st_pstn_actn.c_ctgry_indstk = st_o_ordbook.c_ctgry_indstk;
  st_pstn_actn.l_ca_lvl = st_o_ordbook.l_ca_lvl;
  st_pstn_actn.c_cntrct_tag = '*';

  st_pstn_actn.l_actn_typ = ORS_CAN_ORD_REQ;
  st_pstn_actn.c_trnsctn_flw = st_o_ordbook.c_ordr_flw;
  st_pstn_actn.l_orgnl_qty = st_o_ordbook.l_ord_tot_qty;
  st_pstn_actn.l_orgnl_rt  = st_o_ordbook.l_ord_lmt_rt;
  st_pstn_actn.l_new_qty = 0;
  st_pstn_actn.l_new_rt  = 0;
  st_pstn_actn.l_exec_qty  = st_o_ordbook.l_exctd_qty;
  st_pstn_actn.l_exec_rt  = 0;
  st_pstn_actn.l_fresh_qty  = 0;
  st_pstn_actn.l_cover_qty  = 0;
  st_pstn_actn.d_add_mrgn_amt  = 0;

  st_pstn_actn.l_curr_rt = 0;
  sprintf(st_pstn_actn.c_ref_rmrks,"%s-%ld",st_o_ordbook.c_ordr_rfrnc,
                               st_o_ordbook.l_mdfctn_cntr + 1);
  rtrim(st_pstn_actn.c_ref_rmrks);
	fn_cpy_ddr ( st_pstn_actn.c_rout_crt );

  i_ip_len = sizeof ( struct vw_pstn_actn );
  i_op_len = sizeof ( struct vw_pstn_actn );
	
	if ( st_o_ordbook.c_prd_typ != 'I' ) /*** Ver 3.0 if condition added ***/ 
	{
   
  	i_returncode = fn_call_svc( c_ServiceName,
    	                          c_err_msg.arr,
      	                        &st_pstn_actn,
        	                      &st_pstn_actn,
          	                    "vw_pstn_actn",
            	                  "vw_pstn_actn",
              	                i_ip_len,
                	              i_op_len,
                  	            0,
                    	          "SFO_UPD_OPT_POS" );
   
  	if ( i_returncode != SUCC_BFR )
  	{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

	}
		i_ip_len = sizeof ( struct vw_sequence );
    i_op_len = sizeof ( struct vw_sequence );

    strcpy( st_s_sequence.c_pipe_id, st_xchngbook.c_pipe_id );
    strcpy( st_s_sequence.c_trd_dt, st_xchngbook.c_mod_trd_dt );
		fn_cpy_ddr ( st_s_sequence.c_rout_crt );
    st_s_sequence.c_rqst_typ = GET_XCHNG_SEQ;
    
		i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg.arr,
                                &st_s_sequence,
                                &st_r_sequence,
                                "vw_sequence",
                                "vw_sequence",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_GET_SEQ" );
   
    if ( i_returncode != SUCC_BFR )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		l_xchng_seq_num = st_r_sequence.l_seq_num;

		st_xchngbook.l_mdfctn_cntr = st_o_ordbook.l_mdfctn_cntr + 1;

    st_xchngbook.l_ord_seq = l_xchng_seq_num;

    st_xchngbook.c_req_typ = CANCEL;
    st_xchngbook.c_ex_ordr_typ = ORDINARY_ORDER;
		st_xchngbook.l_ord_tot_qty = st_o_ordbook.l_ord_tot_qty; 

		strcpy( st_xchngbook.c_valid_dt ,st_o_ordbook.c_valid_dt);
	  st_xchngbook.c_slm_flg = st_o_ordbook.c_slm_flg;
		st_xchngbook.l_dsclsd_qty = st_o_ordbook.l_dsclsd_qty;
		st_xchngbook.l_ord_lmt_rt = st_o_ordbook.l_ord_lmt_rt;
		st_xchngbook.l_stp_lss_tgr = st_o_ordbook.l_stp_lss_tgr;
		st_xchngbook.c_plcd_stts = 'R'; /* Request Placed */
		st_xchngbook.c_spl_flg = st_o_ordbook.c_spl_flg;

    strcpy ( st_xchngbook.c_rqst_tm , (char *)c_sys_dt.arr );	
  	strcpy( st_xchngbook.c_qt_tm, "\0" );
		st_xchngbook.l_quote = 0;
/*****************************************************
    strcpy ( st_xchngbook.c_xchng_rmrks , "*" );	
*****************************************************/
		fn_cpy_ddr ( st_xchngbook.c_rout_crt );
		st_xchngbook.c_oprn_typ = INSERTION_ON_ORDER_MODIFICATION;

		/* Ver 1.8 Begins */
	
		if(c_fcm_mkt_typ == EXTND_MRKT && c_fum_mkt_typ == EXTND_MRKT )
		{
			st_xchngbook.c_mkrt_typ = 'X';
		}
		else
		{
			st_xchngbook.c_mkrt_typ = 'N';
		}
		/* Ver 1.8 Ends */

		i_ip_len = sizeof ( struct vw_xchngbook );
  	i_op_len = sizeof ( struct vw_xchngbook );

		/*** Commented in Ver 2.4 ***
		i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_xchngbook,
                              &st_xchngbook,
                              "vw_xchngbook",
                              "vw_xchngbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_XCHNGBK" );
		*************************/
    
		/*** Added in Ver 2.4 ***/
		i_returncode = fn_upd_xchngbk  ( c_ServiceName,
																		 &st_xchngbook,
																		 c_ip_address,
																		 st_usr_prfl.c_cln_mtch_accnt,		/*** Ver 2.7 ***/
																		 c_err_msg.arr,
                                     l_init_sltp_rt,  /*** Ver 4.2 ****/
                                     l_init_lmt_rt,   /*** Ver 4.2 ****/
                                     l_lTP,           /*** Ver 4.2 ****/
                                     l_trail_amt,     /*** Ver 4.2 ****/
                                     l_lmt_offset,    /*** Ver 4.2 ****/
                                     c_prcimpv_flg  , /*** Ver 4.2 ****/
																       st_usr_prfl.l_session_id	); /**ver 5.2**/

		/************************/

  if ( i_returncode != SUCC_BFR )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/* Ver 1.8 Comment Begins

	*********************            Ver 1.7 Starts               ************************
  **** Code for temporary usage of immediate compliance release for extended market  ***
  **** Shall be aligned with order book and exchange book views in next view release ***
	
	if(c_fcm_mkt_typ == EXTND_MRKT && c_fum_mkt_typ == EXTND_MRKT )
	{
		fn_userlog(c_ServiceName,"Inside Check Market Type Is :%c:",c_fcm_mkt_typ);

 		EXEC SQL
  		UPDATE  fxb_fo_xchng_book
    	SET     fxb_mrkt_typ = 'X'
    	WHERE   fxb_ordr_rfrnc = :st_xchngbook.c_ordr_rfrnc
    	AND     fxb_mdfctn_cntr = :st_xchngbook.l_mdfctn_cntr ;

  	if(SQLCODE != 0)
  	{
  		fn_errlog ( c_ServiceName, "S31115", SQLMSG, c_err_msg);
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  	}

	}

 *** Ver 1.7 Ends ***

	Ver 1.8 Comment Ends */


	fn_cpy_ddr ( st_o_ordbook.c_rout_crt );
  st_o_ordbook.c_oprn_typ = UPDATE_MOD_CNTR;

	i_ip_len = sizeof ( struct vw_orderbook );
  i_op_len = sizeof ( struct vw_orderbook );
 
	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg.arr,
                              &st_o_ordbook,
                              &st_o_ordbook,
                              "vw_orderbook",
                              "vw_orderbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_ORDRBK" );
 
  if ( i_returncode != SUCC_BFR )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if ( st_o_ordbook.c_ordr_stts == REQUESTED )
  {
		st_xchngbook.c_plcd_stts = ACCEPT;
		st_xchngbook.c_rms_prcsd_flg = NOT_PROCESSED;
		st_xchngbook.l_ors_msg_typ = ORS_CAN_ORD_ACPT;
  	strcpy( st_xchngbook.c_ack_tm, (char *) c_sys_dt.arr);

		rtrim ( st_xchngbook.c_xchng_rmrks);
  	strcat( st_xchngbook.c_xchng_rmrks, "\0");

		st_xchngbook.l_dwnld_flg = NOT_DOWNLOAD;
		st_xchngbook.d_jiffy = 0;
		fn_cpy_ddr ( st_xchngbook.c_rout_crt );
		st_xchngbook.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;

    /*** ver 4.8 starts ***/
    if( DEBUG_MSG_LVL_0 )
    { 
      fn_userlog(c_ServiceName,"REQUESTED ORS_CAN_ORD_ACPT st_xchngbook.l_xchng_can_qty is :%ld: and st_xchngbook.l_ors_msg_typ is :%ld:",st_xchngbook.l_xchng_can_qty,st_xchngbook.l_ors_msg_typ);
    }

    st_xchngbook.l_xchng_can_qty = 0; 
    /*** ver 4.8 ends ***/
    
		i_ip_len = sizeof ( struct vw_xchngbook );
  	i_op_len = sizeof ( struct vw_xchngbook );
   
  	i_returncode = fn_call_svc( c_ServiceName,
                              	c_err_msg.arr,
                              	&st_xchngbook,
                              	&st_xchngbook,
                              	"vw_xchngbook",
                              	"vw_xchngbook",
                              	i_ip_len,
                              	i_op_len,
                              	0,
                              	"SFO_UPD_XCHNGBK" );
    
  	if ( i_returncode != SUCC_BFR )
  	{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

		fn_cpy_ddr ( st_xchngbook.c_rout_crt );
    
  	i_returncode = fn_call_svc( c_ServiceName,
                              	c_err_msg.arr,
                              	&st_xchngbook,
                              	&st_xchngbook,
                              	"vw_xchngbook",
                              	"vw_xchngbook",
                              	i_ip_len,
                              	i_op_len,
                              	0,
                              	"SFO_OPT_ACK" );
   
  	if ( i_returncode != SUCC_BFR )
  	{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

	}

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )
  {
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );  /** Added in VQC **/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


	if ( i_trnsctn == LOCAL_TRNSCTN )
	{
		/********************************************************/
    /****Changes for Tux4 Triggers***************************/
    /********************************************************/
		/*
  	fn_pst_trg( c_ServiceName, "TRG_LOOK_TAB", "TRG_LOOK_TAB",
                             st_xchngbook.c_pipe_id );
		*/

		/* To post the Trigger in Tux3 Domain Call the service SFO_FOS_TRG */
    strcpy ( c_fno_dmn_nm, "FNO" );
    strcpy ( c_fno_trg_nm, "TRG_LOOK_TAB" );
    strcpy ( c_fno_trg_dat, "TRG_LOOK_TAB" );

    i_returncode = fn_call_svc_fml ( c_ServiceName,
                                    c_err_msg.arr,
                                    "SFO_FOS_TRG",
                                    0,
                                    4,
																		0,
                                    FFO_DMN_NM, (char *)c_fno_dmn_nm,
                                    FFO_TRG_NM, (char *)c_fno_trg_nm,
                                    FFO_ABT_TRG_DATA, (char *)c_fno_trg_dat,
                                    FFO_ABT_FILTER, (char *)st_xchngbook.c_pipe_id);

    if ( i_returncode != SUCC_BFR )
    {
      fn_errlog( c_ServiceName, "S31120", LIBMSG, c_err_msg.arr  );
    }

    /********************************************************/
    /****Changes for Tux4 Triggers***************************/
    /********************************************************/

	}


  i_actn_id = 0;    /**Ver 2.0**/
  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.0**/
  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Ibuf, 0 , 0 );
}

int fn_check_ord_opt( char *c_ServiceName,
                  struct vw_orderbook *ptr_o_st_ordbook,
									char *c_fcm_mkt_typ,												/* Ver 1.7 */
									char *c_fum_mkt_typ,												/* Ver 1.7 */
                  struct vw_err_msg *ptr_st_err_msg ) 
{

/*char c_err_msg[256];				Commented In VQC	***/
  char c_exg_crrnt_stts;		
	char c_exg_extnd_stts;			/*	Ver 1.7	*/
	char c_fum_mrkt_typ;			  /*  Ver 1.7 */
	char c_fcm_mrkt_typ;		   	/*  Ver 1.7 */
	char c_exg_ovrnght_stts;    			/***  Ver 2.5 ***/
  char c_exg_ovrnght_trd_dt[23];    /***  Ver 2.5 ***/

		/*** Below query changed to capital case in Ver 4.5 ***/

  EXEC SQL
    SELECT EXG_CRRNT_STTS,
					 EXG_EXTND_MRKT_STTS,       /* Ver 1.7 */
					 EXG_TMP_MKT_STTS,          /*** Ver 2.5  ***/
           TO_CHAR ( EXG_TMP_TRD_DT , 'dd-Mon-yyyy' ) /*** Ver 2.5  ***/
    INTO   :c_exg_crrnt_stts,
					 :c_exg_extnd_stts,        /* Ver 1.7 */
					 :c_exg_ovrnght_stts,      /*** Ver 2.5  ***/
           :c_exg_ovrnght_trd_dt     /*** Ver 2.5  ***/
    FROM   EXG_XCHNG_MSTR 
    where  EXG_XCHNG_CD = :ptr_o_st_ordbook->c_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31125",SQLMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

  /*** Commented in Ver 3.4 ***
	EXEC SQL
		SELECT fcm_mrkt_typ
		INTO   :c_fcm_mrkt_typ
		FROM   fcm_fo_cntrct_mstr
		WHERE  fcm_xchng_cd   =:ptr_o_st_ordbook->c_xchng_cd
    *** AND    fcm_prdct_typ  =:ptr_o_st_ordbook->c_prd_typ  Commented In Ver 3.0 ***
    AND    fcm_prdct_typ  = DECODE (:ptr_o_st_ordbook->c_prd_typ,'I','O',:ptr_o_st_ordbook->c_prd_typ) *** Ver 3.0 ***
    AND    fcm_undrlyng   =:ptr_o_st_ordbook->c_undrlyng
    AND    fcm_expry_dt   =:ptr_o_st_ordbook->c_expry_dt
    AND    fcm_exer_typ   =:ptr_o_st_ordbook->c_exrc_typ
    AND    fcm_opt_typ    =:ptr_o_st_ordbook->c_opt_typ
    AND    fcm_strk_prc   =:ptr_o_st_ordbook->l_strike_prc;
	***/
  /*** Ver 3.4 Starts ***/

		/*** Below query changed to capital case in Ver 4.5 ***/
 
  EXEC SQL
    SELECT FTQ_MRKT_TYP 
    INTO   :c_fcm_mrkt_typ
    FROM   FTQ_FO_TRD_QT      
    WHERE  FTQ_XCHNG_CD   =:ptr_o_st_ordbook->c_xchng_cd
    AND    FTQ_PRDCT_TYP  = DECODE (:ptr_o_st_ordbook->c_prd_typ,'I','O',:ptr_o_st_ordbook->c_prd_typ) 
    AND    FTQ_UNDRLYNG   =:ptr_o_st_ordbook->c_undrlyng
    AND    FTQ_EXPRY_DT   =:ptr_o_st_ordbook->c_expry_dt
    AND    FTQ_EXER_TYP   =:ptr_o_st_ordbook->c_exrc_typ
    AND    FTQ_OPT_TYP    =:ptr_o_st_ordbook->c_opt_typ
    AND    FTQ_STRK_PRC   =:ptr_o_st_ordbook->l_strike_prc; 

  /*** Ver 3.4 Ends   ***/

	if ( SQLCODE != 0 )
	{
		 fn_errlog( c_ServiceName, "S31130",SQLMSG,ptr_st_err_msg->c_err_msg);
     return FAILURE;
	}

	*c_fcm_mkt_typ = c_fcm_mrkt_typ;

	/** fn_userlog(c_ServiceName,"Here FCM Market Type Is :%c:",c_fcm_mrkt_typ); **/
	if(DEBUG_MSG_LVL_3) /***DEBUG_MSG_LVL_3 Added in Ver 3.9 ***/
	{
		fn_userlog(c_ServiceName,"Here FTQ Market Type Is :%c:",c_fcm_mrkt_typ); /** Added in Ver 3.4 **/
	}
		/*** Below query changed to capital case in Ver 4.5 ***/

	 EXEC SQL
     SELECT FUM_MRKT_TYP	
     INTO   :c_fum_mrkt_typ
     FROM   FUM_FO_UNDRLYNG_MSTR 
     WHERE  FUM_XCHNG_CD  =:ptr_o_st_ordbook->c_xchng_cd
     /*** AND    fum_prdct_typ =:ptr_o_st_ordbook->c_prd_typ Commented In Ver 3.0 ***/
     AND    FUM_PRDCT_TYP = DECODE(:ptr_o_st_ordbook->c_prd_typ , 'I','O',:ptr_o_st_ordbook->c_prd_typ) /*** Ver 3.0 ***/
     AND    FUM_UNDRLYNG  =:ptr_o_st_ordbook->c_undrlyng;

   if ( SQLCODE != 0 )
   {
     fn_errlog( c_ServiceName, "S31135",SQLMSG,ptr_st_err_msg->c_err_msg);
     return FAILURE;
   }

	 *c_fum_mkt_typ = c_fum_mrkt_typ;

  /** Orders cannnot be cancelled when the Exchange is under Expiry **/
  /*** if ( c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY ) Commented In Ver 2.5 ***/
  if ( c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY &&  c_exg_ovrnght_stts != EXCHANGE_OPEN ) /*** Ver 2.5 ***/
  {
		/*** Ver 1.7 Starts ***/

		/*** if( c_exg_extnd_stts == EXCHANGE_UNDER_EXPIRY ) Commented In Ver 2.5 ***/
		if( c_exg_extnd_stts == EXCHANGE_UNDER_EXPIRY || c_exg_ovrnght_stts != EXCHANGE_OPEN )   /*** Ver 2.5 ***/
    {
      fn_errlog( c_ServiceName, "B28518",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
		else if (c_fum_mrkt_typ == NORMAL_MRKT )      /***  Underlying Level Check  ***/
	  {
			fn_userlog( c_ServiceName,"This Underlying Is Disabled For Extended Market Hours");
     	fn_errlog( c_ServiceName, "B66066",DEFMSG,ptr_st_err_msg->c_err_msg);
     	return FAILURE;
   	}
   	else if ( c_fcm_mrkt_typ == NORMAL_MRKT )     /***  Contract Level Check  ***/
   	{
     	fn_userlog( c_ServiceName,"This Contract Is Disabled For Extended Market Hours");
     	fn_errlog( c_ServiceName, "B66066",DEFMSG,ptr_st_err_msg->c_err_msg);
     	return FAILURE;
   	}

		/*** Commented In Ver 1.7

    fn_errlog( c_ServiceName, "B28518",DEFMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;

		***/

		/*** Ver 1.7 Ends **/
  }

	/** Orders placed during Market hour cannnot be cancelled when the Exchange is under Expiry even if ON market is open  **/

  /*** Checking if order placed during market hour ***/

  if( c_exg_ovrnght_stts == EXCHANGE_OPEN && c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY) /*** Ver 2.5 ***/
  {
    if ( strcmp(c_exg_ovrnght_trd_dt,ptr_o_st_ordbook->c_trd_dt)!=0)
    {
      fn_userlog( c_ServiceName," Cannot Cancel a order placed in Normal Market hour when market is under expiry ");
      fn_errlog( c_ServiceName, "B66066",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }

  }

  /** Cancellation of order is possible only in REQUESTED, ORDERED **/
  /** and PARTIALLY_EXECUTED states                                **/
  if ( ( ptr_o_st_ordbook->c_ordr_stts != REQUESTED ) &&
       ( ptr_o_st_ordbook->c_ordr_stts != ORDERED ) &&
       ( ptr_o_st_ordbook->c_ordr_stts != PARTIALLY_EXECUTED ) )
  {
    fn_errlog( c_ServiceName, "B28533", DEFMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

	return  SUCCESS;
}
