/******************************************************************************/
/*	Program	    			:	SFO_OPNPOS_DWLD                                       */
/*  Input             :                                                       */
/*  Output            :                                                       */
/*  Description       :                                                       */
/*  Log               :                                                       */
/******************************************************************************/
/*     01-Dec-2001       Ver 1.0        Infotech|sangeet   Release 1.0        */
/*		 01-Mar-2008			 Ver 1.1				Infotech|Sushil		 AIX Migration			*/
/*     03-Aug-2011       Ver 1.2        Infotech|Mahesh    SPAN Changes       */
/*     29-Dec-2011       Ver 1.3        Infotech|Mahesh    BSE ORS Changes    */	
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <atmi.h>
#include <sqlca.h>
/*Add header files here */
#include <fml32.h>
#include <fo_fml_def.h>
#include <fo.h>
#include <fn_log.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_read_debug_lvl.h>  /*  Ver 1.1 : Added */

void SFO_OPNPOS_DWLD( TPSVCINFO *rqst )
{

	FBFR32 *ptr_fml_Ibuf;

	char c_ServiceName [33];
  char c_err_msg [256];
	int  i_returncode;
	int  i_ip_len;
	int  i_op_len;
	char c_tag [ 256 ];
	long int li_rec_no;
	char c_cln_mtch_accnt[11];
	long l_opnpstn_qty;
	int  i_rec_exists;
	int  i_trnsctn;
	char c_msg[256];
  time_t ud_tm_stmp;
	char c_buy_sell ;
	char c_spn_allwd;         /*   Ver 1.2 : span flag   */
	char c_bse_spn_allwd;         /*   Ver 1.3  */
	char c_xchng_cd [ 4 ];    /*   Ver 1.3 : Exchange Code */

	struct vw_mtch_cntrct st_mtch_cntrct;
	struct vw_mkt_msg st_mkt_msg;
	struct vw_contract st_contract;

	ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
	strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.1 : Added   */

	i_returncode = Fvftos32( ptr_fml_Ibuf,
													 ( char * )&st_mtch_cntrct,
                           "vw_mtch_cntrct" );
	if( i_returncode == -1 )
	{
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );		
	}

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_mtch_cntrct.c_rout_crt );
	
  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                      c_err_msg,
																		  ptr_fml_Ibuf,
																		  3,                                   /* Ver 1.3 Change from 2 to 3 */
					 FFO_EBA_MTCH_ACT_NO , ( char * )c_cln_mtch_accnt, NULL,
					 FFO_OPNPSTN_QTY  , ( char * )&l_opnpstn_qty, NULL,
					 FFO_XCHNG_CD  ,    ( char * )c_xchng_cd, NULL );								/* Ver 1.3 Exchange Code Added */
 
	if( i_returncode == SYSTEM_ERROR )
	{
		fn_errlog( c_ServiceName, "S31010", LIBMSG , c_err_msg );
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}
																
	i_ip_len = sizeof( struct vw_mtch_cntrct );
	i_op_len = sizeof( struct vw_contract );

	fn_userlog(c_ServiceName,"The FRP_STRIKE_PRC before CALL is :%lf:",st_mtch_cntrct.d_strike_prc) ;
	fn_userlog(c_ServiceName,"OPTION TYP before SFO_CNT_FOR_ENT is :%s:",st_mtch_cntrct.c_opt_typ) ;
	fn_userlog(c_ServiceName,"expry date before SFO_CNT_FOR_ENT is :%s:",st_mtch_cntrct.c_expry_dt) ;


	/** code addition starts here **/
  fn_cpy_ddr(st_mtch_cntrct.c_rout_crt);
  st_mtch_cntrct.c_rqst_typ = MATCH_ID_TO_CONTRACT;

  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_mtch_cntrct,
                              &st_contract,
                              "vw_mtch_cntrct",
                              "vw_contract",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_CNT_FOR_ENT" );

	/** code addition ends here **/

	if( i_returncode != SUCC_BFR )
	{
		fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    sprintf ( c_msg, "Failed callind SFO_CNT_FOR_ENT for %s",c_err_msg );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}


 	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
 	if ( i_trnsctn == -1 )
 	{
 		fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg  );
 		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	sprintf ( c_msg, "%s",c_err_msg );
   	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
   	tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
 	}


	if(l_opnpstn_qty	> 0)
	{
		c_buy_sell = 'B' ;
	}
	else if(l_opnpstn_qty < 0)
	{
		c_buy_sell = 'S' ;
	}
	else
	{
		fn_userlog(c_ServiceName,"The l_opnpstn_qty is :%ld:",l_opnpstn_qty) ;
	}

		fn_userlog(c_ServiceName,"The FRP_STRIKE_PRC before INSERT is :%ld:",st_contract.l_strike_prc) ;
  						
	EXEC SQL
	INSERT INTO FRP_FO_RECO_PSTN
	(
	FRP_CLM_MTCH_ACCNT,
	FRP_XCHNG_CD,
	FRP_PRDCT_TYP,
	FRP_UNDRLYNG,
	FRP_EXPRY_DT,
	FRP_EXER_TYP,
	FRP_OPNPSTN_QTY,
	FRP_STRIKE_PRC,
	FRP_OPT_TYP,
	FRP_BUY_SELL
	)
	values
	(
	:c_cln_mtch_accnt,
	/*	 'NFO',               Commented in Ver 1.3 */
	:c_xchng_cd,							/* Added In Ver  1.3 */	
	:st_contract.c_prd_typ,
 	:st_contract.c_undrlyng,
 	:st_contract.c_expry_dt,
 	:st_contract.c_exrc_typ,
 	:l_opnpstn_qty,
	:st_contract.l_strike_prc,
	:st_contract.c_opt_typ,
	:c_buy_sell
	) ;

	if ( SQLCODE != 0 )
 	{
  		fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg  );
  	  sprintf ( c_msg, "The match id :%s: is Failed for :%S:"
																,c_cln_mtch_accnt,st_contract.c_undrlyng );
   	  fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
  		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}

 	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
 	{
  		fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg  );
    sprintf ( c_msg, "The match id :%s: is Failed for :%S:"
																,c_cln_mtch_accnt,st_contract.c_undrlyng );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
  		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	 	tpreturn ( TPFAIL, ERR_BFR, ( char *)ptr_fml_Ibuf, 0, 0);
 	}
	/********** Ver 1.2 SPAN Changes  ************/	
	EXEC SQL 
			SELECT NVL(CLM_SPAN_ALLWD,'N'),
						 NVL(CLM_BSESPAN_ALLWD,'N')				/*** Ver 1.3 ***/
			INTO   :c_spn_allwd,
						 :c_bse_spn_allwd									/*** Ver 1.3 ***/
			FROM   CLM_CLNT_MSTR
			WHERE  CLM_MTCH_ACCNT=:c_cln_mtch_accnt; 

	
  if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName, "Failed To Get SPAN Flag.");
    fn_errlog(c_ServiceName, "S31035", SQLMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }
	
/**	if (c_spn_allwd == 'Y')				*** Ver 1.3 comment **/

	if ( ( c_spn_allwd == 'Y' 	 && strcmp(st_contract.c_xchng_cd,"NFO")== 0 ) ||
			 ( c_bse_spn_allwd =='Y' && strcmp(st_contract.c_xchng_cd,"BFO") == 0)
		 )		/*** Ver 1.3 **/
	{
		  fn_userlog(c_ServiceName, "SPAN Flag is |%c|",c_spn_allwd);		
		  fn_userlog(c_ServiceName, "BSE SPAN Flag is |%c|",c_bse_spn_allwd);	/** Ver 1.3 **/	
    
		  EXEC SQL
      SELECT  1
      INTO :i_rec_exists
      FROM       dual
      WHERE   EXISTS
      ( SELECT 1
			FROM FCP_FO_SPN_CNTRCT_PSTN
			WHERE FCP_CLM_MTCH_ACCNT  =:c_cln_mtch_accnt
			AND   FCP_XCHNG_CD        =:st_contract.c_xchng_cd
			AND   FCP_PRDCT_TYP       =:st_contract.c_prd_typ
			AND   FCP_UNDRLYNG        =:st_contract.c_undrlyng
			AND   FCP_EXPRY_DT				= to_date( :st_contract.c_expry_dt,'dd-mon-yyyy')
			AND   FCP_EXER_TYP        =:st_contract.c_exrc_typ
			AND   FCP_OPNPSTN_QTY     =:l_opnpstn_qty
			);
			
			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg  );
        sprintf ( c_msg, "The match id :%s: is Failed for :%S:" ,c_cln_mtch_accnt,st_contract.c_undrlyng );
        fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }	
	}
/*	else			*** Ver 1.3 comment **/

	else if ( ( c_spn_allwd == 'N' 	 && strcmp(st_contract.c_xchng_cd,"NFO")== 0 ) ||
			 			 ( c_bse_spn_allwd =='N' && strcmp(st_contract.c_xchng_cd,"BFO") == 0)
		 			 )		/*** Ver 1.3 **/
	{	
		if ( st_contract.c_prd_typ == FUTURES )
		{
			EXEC SQL
			SELECT  1
			INTO :i_rec_exists	
			FROM 	     dual
			WHERE   EXISTS
			( SELECT 1
	  	FROM FFP_FO_FUTURES_PSTN
	 		WHERE ffp_clm_mtch_accnt  = :c_cln_mtch_accnt
			AND   ffp_xchng_cd        = :st_contract.c_xchng_cd
			AND   ffp_prdct_typ       = :st_contract.c_prd_typ
			AND   ffp_undrlyng        = :st_contract.c_undrlyng
			AND   ffp_expry_dt        =  to_date( :st_contract.c_expry_dt,'dd-mon-yyyy')
			AND   ffp_exer_typ        = :st_contract.c_exrc_typ
			AND   ffp_opnpstn_qty  		= :l_opnpstn_qty

			);
	  	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
	 		{
   			fn_errlog( c_ServiceName, "S31045", SQLMSG, c_err_msg  );
    		sprintf ( c_msg, "The match id :%s: is Failed for :%S:"
																,c_cln_mtch_accnt,st_contract.c_undrlyng );
    		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
   			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 			}
		}
		else if ( st_contract.c_prd_typ == OPTIONS )
		{
			EXEC SQL
			SELECT  1
			INTO :i_rec_exists
			FROM  dual
			WHERE   EXISTS
			( SELECT 1
	 		FROM FOP_FO_OPTIONS_PSTN
	 		WHERE fop_clm_mtch_accnt  = :c_cln_mtch_accnt
	 		AND   fop_xchng_cd        = :st_contract.c_xchng_cd
	 		AND   fop_prdct_typ       = :st_contract.c_prd_typ
	 		AND   fop_undrlyng        = :st_contract.c_undrlyng
	 		AND   fop_expry_dt        =  to_date( :st_contract.c_expry_dt,
            			                         'dd-mon-yyyy' )
	 		AND   fop_exer_typ        = :st_contract.c_exrc_typ
	 		AND   fop_opnpstn_qty  	 = :l_opnpstn_qty
	 		);
	  	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  		{
    		fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg  );
    		sprintf ( c_msg, "The match id :%s: is Failed for :%S:"
																,c_cln_mtch_accnt,st_contract.c_undrlyng );
    		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}
		}
		
		else
		{
			fn_errlog( c_ServiceName, "S31055", "Invalid Product Type" , c_err_msg );
    	sprintf ( c_msg, "The match id :%s: is Failed for :%S:"
																,c_cln_mtch_accnt,st_contract.c_undrlyng );
    	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
			Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}
	}

	if ( i_rec_exists == 1 )
	{	
  	fn_userlog(c_ServiceName,"Processed successfully"); 						
    sprintf ( c_msg, "The match id :%s: is Present in EBA for :%S:"
																,c_cln_mtch_accnt,st_contract.c_undrlyng );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
		tpreturn(TPSUCCESS, SUCC_BFR, NULL, 0, 0 );
	}
	else
	{


	sprintf( c_msg, "|%s|%s|%c|%s|%s|%c|%ld|",
													  c_cln_mtch_accnt,
											st_contract.c_xchng_cd,
											st_contract.c_prd_typ,
											st_contract.c_undrlyng,
											st_contract.c_expry_dt,
											st_contract.c_exrc_typ,
											l_opnpstn_qty );
	strcpy(st_mkt_msg.c_xchng_cd, st_contract.c_xchng_cd );
	strcpy( st_mkt_msg.c_brkr_id, "9999" ); /*to be confirmed by vishal*/
	st_mkt_msg.c_msg_id = '9';/*to be confirmed by vishal*/
	strcpy( st_mkt_msg.c_msg, c_msg );
	fn_cpy_ddr(st_mkt_msg.c_rout_crt);
	
	i_ip_len = sizeof( struct vw_mkt_msg );

  ud_tm_stmp = time (NULL);
  strftime(st_mkt_msg.c_tm_stmp, 21, "%d-%b-%Y %H:%M:%S",localtime(&ud_tm_stmp));	

	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
   														&st_mkt_msg,
   														&st_mkt_msg,
															"vw_mkt_msg",
															"vw_mkt_msg",
 															i_ip_len,
 															i_ip_len,
															0,
															"SFO_UPD_MSG" );

		if( i_returncode != SUCC_BFR )
		{
		fn_errlog( c_ServiceName, "S31060", LIBMSG , c_err_msg );
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    sprintf ( c_msg, "The match id :%s: is Failed for :%S:"
																,c_cln_mtch_accnt,st_contract.c_undrlyng );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}
	fn_userlog(c_ServiceName,"Processed successfully position download.");
	tpreturn(TPSUCCESS, SUCC_BFR, NULL, 0, 0 );
	
	}
}

