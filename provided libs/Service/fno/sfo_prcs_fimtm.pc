/******************************************************************************/
/*	Program	    			:	SFO_PRCS_FIMTM                                        */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_CNTRCT_TAG                                        */
/*                      FFO_IMTM_RMRKS                                        */
/*                      FFO_PIPE_ID                                           */
/*                                                                            */
/*  Output            :                                                       */
/*                                                                            */
/*  Description       : This program calls the update position service with   */
/*                      the Intra  day MTM flag. If the return value is       */
/*                      success , then it means sufficient margin exists to   */
/*                      maintain the position. If the update position returns */
/*                      failure then call the cancel_square off service to    */
/*                      initiate the cancel/square off process for the nearest*/
/*                      expiring contract in which positions exists for the   */
/*                      client.                                               */
/*                                                                            */
/*  Log               :                                                       */
/*                                                                            */
/******************************************************************************/
/*  26-Dec-2001     Ver 1.0        Vinod Banjan      Release 1.0              */
/*  17-Dec-2007     Ver 1.1        Vidyayini Krish   IBM Changes              */
/*  13-Mar-2008			Ver 1.2				 Sandeep Patil		 Future Plus							*/
/*	15-Feb-2010			Ver 1.3				 Sandeep Patil		 CRCON40299								*/
/*																									 Addhoc Margin Changes	  */
/*  13-Feb-2012			Ver 1.4				 Nitin Save		     FNO- BSE Changes   		  */
/*	08-Aug-2013			Ver 1.5				 Bhushan S.	 CR-ISEC14-40619_MTM_LGC_CHNGS	*/
/*	18-Jul-2014			Ver 1.6				 Sachin B.	 FO Auto MTM Changes          	*/
/*  14-Mar-2014     Ver 1.7        Shashi			 Insert records of system 			*/
/*																							sqruare off       						*/
/* 	18-Dec-2014			Ver 1.8				 Tanmay W.		addition of min. ers prc			*/
/*  18-Oct-2015     Ver 1.9        Sachin B.    Trigger price Changes         */
/*  14-Dec-2015     Ver 2.0        Sachin B.    Releasing the pointer memory  */
/*  16-Feb-2016     Ver 2.1        Sachin B.    Passing Expiry Date to CANSQ  */
/*  22-Dec-2015     Ver 2.2        Tanmay W.    Cancellation of Pending order */
/*  14-Jun-2016     Ver 2.4        Bhupendra    Log Maintainance              */
/*  20-Jun-2016     Ver 2.5        Tanmay W.   	Cancellation of intraday &		*/
/*																							LimitNeg orders only					*/
/*  14-Jul-2016     Ver 2.6        Tanmay w.  Query  Optimization             */
/*  29-Oct-2018			Ver 2.7				 Bhushan Harekar  Hadling for Auto-MTM 			*/
/*																									Algo orders.              */
/*  22-Aug-2019     Ver 2.8        Mrinal Kishore  Userlog handling           */
/*  22-Dec-2020     Ver 2.9        Tanmay Patel CR-ISEC18-134966 Notifications, */
/*                                              SMS for Square off  due to MTM  */ 
/*  02-Feb-2021     Ver 3.0        Kiran Itkar  Separate EOS for Stock and    	*/
/*                                              Index Underlyings in FPSL     	*/
/*  07-Mar-2023     Ver 3.1        Samip M -Changes for Client level lock     */
/*  06-12-2022		  Ver 3.2		   Karthik Sujit  CR-ISEC14-162075 SAM in Currency & Commodity */
/*  08-04-2023		  Ver 3.3		   Sachin Birje   FO Real Time Margin Reporting Changes */
/*********************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fml_def.h>
/* COMMENTED IN VER TOL : TUX on LINUX (Ravindra) * #include <fo_view_def.h> */
#include <fn_log.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fo.h>
#include <fn_pos.h>
#include <fn_ddr.h>
#include <fn_session.h> /* Ver 1.1 */
#include <fml_rout.h> /* Ver 1.1 */
#include <fn_read_debug_lvl.h> /* Ver 1.1 */

/** Ver 2.9 Starts **/
int fn_mrgn_shrtfll_sms_mail (char *c_ServiceName,
                              char *c_clm_mtch_accnt,
                              char *c_xchng_cd,
                              char  c_prdct_typ,
                              char  c_indstk,
                              char *c_undrlyng,
                              char *c_expry_dt,
                              char  c_exer_typ,
                              char  c_opt_typ,
                              long  l_strk_prc,
                              char  c_typ);
/** Ve 2.9 Ends **/

void SFO_PRCS_FIMTM( TPSVCINFO *rqst )
{
  FBFR32 *ptr_fml_Ibuf;

  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
  char c_pipe_id [ 3 ];
  char c_fno_dmn_nm [ 16 ];
  char c_fno_trg_nm [ 16 ];
  char c_fno_trg_dat [ 256 ];
  char c_flg='N';   /** Ver 1.6 **/
  int i_returncode;
  int i_returnval;
  int i_ip_len;
  int i_op_len;
  int i_trnsctn;
	int i_cnt;			/*** Ver 1.2 ***/
  int i_ers_cnt=0; /*** Ver 1.8 **/

/****Start of Ver 1.7 *********/

char* strptr;
char c_temp_rmrks[500];

double d_trd_mrgn_MTM_b=0 ;
double d_ord_mrgn_MTM_b =0;
double d_spread_mrgn_MTM_b=0 ;
double d_add_mrgn_MTM =0;
double d_trd_mrgn_MTM_a=0 ;
double d_ord_mrgn_MTM_a =0;
double d_spread_mrgn_MTM_a=0 ;
long   l_opnpstn_MTM=0 ;
long   int li_cmp_MTM=0;
long   int li_cmp=0;
char   c_expry_dt_MTM[22];
char   c_expry_dt[22];
char   c_bnk_accnt_MTM[13];
char   c_time[21];
char   c_ers_flg='\0';  /** Ver 1.8**/
char *null_ptr  = 0; /** Ver 2.9 **/
/*** Ver 2.2 Starts ****/
char   c_alias[9] ="\0" ;      
char   c_usr_id[100]={0}; 
char c_cln_mtch_accnt [11] ="\0" ;
char c_xchng_cd[4] ="\0" ;
char c_undrlyng[7]  ="\0" ;
char c_prd_typ              ='\0';
char c_ctgry_indstk   ='\0' ;
/*** Ver 2.2 Ends ****/

double d_bft_amt_MTM =0;
double d_alctd_amt_MTM =0;
double d_plg_amt_MTM =0;
double d_nwb_amt_MTM=0;
double d_tot_shr_plgd_amt_MTM=0;
double d_eab_amt_MTM=0;
double d_cab_amt_MTM=0;     /** Ver 3.2 **/
double d_cab_amt_mco_MTM=0; /** Ver 3.2 **/

double d_init_mrgn_prcnt_MTM=0;
double d_min_mrgn_prcnt_MTM =0;
double d_somc_prcnt_MTM =0;
double d_spread_mrgn_MTM =0;
double d_avm_prcnt_MTM =0;
double d_limit_MTM =0.0;
double d_fdr_amt_MTM=0.0;
double d_ers_trg_prcnt=0.0;   /** Ver 1.8 **/

long  l_init_mrgn_prcnt_MTM =0;
long  l_min_mrgn_prcnt_MTM =0;
long  l_somc_prcnt_MTM =0;
long  l_spread_mrgn_MTM =0;
long  l_avm_prcnt_MTM =0;
long  l_sssn_id = 0;        /** Ver 2.2 **/

EXEC SQL INCLUDE "table/fod_fo_ordr_dtls.h"; /**** Ver 2.2 ****/

/****End of Ver 1.7 *********/
  int i_rec_exists=0;  /** Ver 1.6 **/
int i_exists=0;  /** Ver 2.2 **/

  char c_tag [ 256 ];
  char c_msg [ 256 ];
	char c_prc_flg;			/***	Ver 1.3 Price Flag	***/

  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_pstn_actn st_pstn_actn;
    varchar   c_trd_dt[LEN_DATE];
    sql_cursor trd_cursor;              /**** Ver 2.2 ****/
  EXEC SQL END DECLARE SECTION;

  struct vw_err_msg *ptr_st_err_msg;   /** ver 1.8 **/
 
  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);

  /** Ver 1.8 Starts here **/
  ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
  if ( ptr_st_err_msg ==  NULL )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /*** Ver 1.8 Ends here ***/

  i_returncode = Fvftos32( ptr_fml_Ibuf,
                         ( char * )&st_pstn_actn,
                         "vw_pstn_actn" );

  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                    c_err_msg,
                                    ptr_fml_Ibuf,
                                    3,																				/***	Ver 1.3	***/
                                    FFO_PIPE_ID, ( char * )c_pipe_id, NULL,
                                    FFO_BAT_TAG, ( char * )c_tag, NULL,
																		FFO_SPL_FLG, ( char * )&c_prc_flg, NULL);	/***	Ver 1.3	***/

  if( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Added for Order Routing ***/
  fn_init_ddr_pop( c_pipe_id, TRADING_SECTION, F_CS );

	rtrim (st_pstn_actn.c_cln_mtch_accnt);
	rtrim (st_pstn_actn.c_xchng_cd);
	rtrim (st_pstn_actn.c_undrlyng);
	rtrim (st_pstn_actn.c_imtm_rmrks);

  if(DEBUG_MSG_LVL_4)						/*** Ver 2.8 Debug level changed to 4 from 3 ***/
	{
		fn_userlog(c_ServiceName,"c_prc_flg Is :%c:",c_prc_flg);      /***  Ver 1.3 ***/
  	fn_userlog( c_ServiceName, "Match Account :%s:",st_pstn_actn.c_cln_mtch_accnt );
    fn_userlog( c_ServiceName, "Exchange code :%s:",st_pstn_actn.c_xchng_cd );
    fn_userlog( c_ServiceName, "Product Type  :%c:",st_pstn_actn.c_prd_typ );
    fn_userlog( c_ServiceName, "Underlyng     :%s:",st_pstn_actn.c_undrlyng );
    fn_userlog( c_ServiceName, "Category      :%c:",st_pstn_actn.c_ctgry_indstk );
    fn_userlog( c_ServiceName, "Contract tag  :%c:",st_pstn_actn.c_cntrct_tag );
    fn_userlog( c_ServiceName, "IMTM Remarks  :%s:",st_pstn_actn.c_imtm_rmrks );
    fn_userlog( c_ServiceName, "c_expry_dt :%s:",st_pstn_actn.c_expry_dt);
    fn_userlog( c_ServiceName, "c_exrc_typ :%c:",st_pstn_actn.c_exrc_typ);
    fn_userlog( c_ServiceName, "c_opt_typ  :%c:",st_pstn_actn.c_opt_typ);
    fn_userlog( c_ServiceName, "l_strike_prc :%ld:",st_pstn_actn.l_strike_prc);
  }
	/*** Ver 2.8 start ***/

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"c_prc_flg :%c: Match Account :%s: Underlyng :%s: Contract tag  :%c: c_expry_dt :%s: IMTM Remarks  :%s:",c_prc_flg,st_pstn_actn.c_cln_mtch_accnt,st_pstn_actn.c_undrlyng,st_pstn_actn.c_cntrct_tag,st_pstn_actn.c_expry_dt,st_pstn_actn.c_imtm_rmrks);
  }

	/*** Ver 2.8 Ends ***/

  /*** Ver 1.6 Starts Here ***/
  if(  c_prc_flg == 'A' )
  {
    i_rec_exists =0;
    EXEC SQL 
      SELECT count(rowid)
        INTO :i_rec_exists
        FROM MEM_MTM_EXPTN_MSTR
       WHERE MEM_MTCH_ACCNT = :st_pstn_actn.c_cln_mtch_accnt 
         AND MEM_SEGMENT = DECODE (:st_pstn_actn.c_prd_typ,'F','FNOIM','FPIM')
         AND     SYSDATE BETWEEN MEM_FROM_DT AND MEM_TO_DT ;
    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
     fn_errlog( c_ServiceName, "S31020",SQLMSG,c_err_msg);
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     strcpy ( c_msg, "System error. Contact system support" );
     fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);  /** Ver 1.9 **/
     fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
     tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    
    if(   i_rec_exists > 0 ) 
    {
      if(DEBUG_MSG_LVL_4)  /***** Added ver 2.4 ******/ /*** Ver 2.8 Debug level changed to 4 from 3 ***/
			{
				fn_userlog(c_ServiceName," Exception Case :%s:",st_pstn_actn.c_cln_mtch_accnt);
			}
      fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg); 
      tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
      tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Ibuf, 0 , 0 );
    } 

    MEMSET(c_expry_dt);  /** ver 2.1 **/
    if(Fget32(ptr_fml_Ibuf,FFO_EXPRY_DT,0,(char *)c_expry_dt,0) == -1 )
    {
      fn_errlog( c_ServiceName, "S31025",FMLMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
      tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
    }
    rtrim(c_expry_dt);  /** 2.1 **/
  } 

  /**** ver 1.6 Ends Here ***/

  sprintf ( c_msg, "Processing match a/c - [%s], Underlying - [%s], Tag - [%c]",
        st_pstn_actn.c_cln_mtch_accnt,
        st_pstn_actn.c_undrlyng,
        st_pstn_actn.c_cntrct_tag );

	if(st_pstn_actn.c_prd_typ =='P')            /*** Ver 1.2 ***/
  {
    i_cnt=0;  /** Ver 2.1 **/
    EXEC SQL
      SELECT 1
      INTO  :i_cnt
      FROM  MTM_APPLN_STTS
      /* WHERE MTM_XCHNG_CD='NFO' */
      WHERE MTM_XCHNG_CD = :st_pstn_actn.c_xchng_cd /* Replaced hardcoding of exchange code in Ver- 1.4 */
      /* AND  MTM_PIPE_ID = :c_pipe_id */ /** Added pipe id in Ver 1.4 - Need to confirm  **/
      AND ( MTM_ROLL_STTS = 'N'
      OR    MTM_CAN_SQR_OFF ='Y'
      OR    MTM_CAN_REQ = 'Y'
			OR    MTM_ROLL_STTS_S = 'N'   /*** Ver 3.0 ***/
      OR    MTM_CAN_SQR_OFF_S = 'Y' /*** Ver 3.0 ***/
      OR    MTM_CAN_REQ_S = 'Y' );  /*** Ver 3.0 ***/

    if (i_cnt==1)
    {
      fn_bat_pst_msg_fno ( c_ServiceName, "Can/Sqroff Under Process For Future Plus,Can Not Run Intra Day MTM",
				c_tag );
      fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);  /** ver 2.1 **/
      tpfree((char*)ptr_st_err_msg);   /*** Ver 2.1 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );  /*** Ver 2.1 ***/
      exit(0);
    }
  }

/****SR
  fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );*/

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    if( c_prc_flg == 'A' ) /** Ver 1.6 **/
    {
     fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);  
    }
    tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /** Commented and changed below for Ver 3.1 **

  i_returncode = fn_lock_usr( c_ServiceName,
                              st_pstn_actn.c_cln_mtch_accnt );
  ** Ver 3.1 **/

  i_returncode = fn_lock_fno( c_ServiceName,
                              st_pstn_actn.c_cln_mtch_accnt );
  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog( c_ServiceName, "S31035", LIBMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    if( c_prc_flg == 'A' ) /** Ver 1.6 **/
    {
     fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
    } 
    tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  EXEC SQL
		UPDATE  FUP_FUT_UNDRLYNG_PSTN
		SET   	FUP_MTM_FLG = 'M'
		WHERE   FUP_CLM_MTCH_ACCNT 	= :st_pstn_actn.c_cln_mtch_accnt
		AND 		FUP_XCHNG_CD 			 	= :st_pstn_actn.c_xchng_cd
		AND 		FUP_PRDCT_TYP 			= :st_pstn_actn.c_prd_typ
		AND 		FUP_INDSTK 					= :st_pstn_actn.c_ctgry_indstk
		AND 		FUP_UNDRLYNG 				= :st_pstn_actn.c_undrlyng
		AND 		FUP_CNTRCT_TAG 			= :st_pstn_actn.c_cntrct_tag;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31040",SQLMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    if( c_prc_flg == 'A' ) /** Ver 1.6 **/
    {
     fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
    } 
    tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	i_returncode = fn_ins_rep_tbl ( c_ServiceName,
                    							c_err_msg,
                    							&st_pstn_actn,
                    							st_pstn_actn.c_imtm_rmrks );

  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31045",LIBMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    if( c_prc_flg == 'A' ) /** Ver 1.6 **/
    {
     fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
    } 
    tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	strcpy(st_pstn_actn.c_user_id,"system");
  st_pstn_actn.l_session_id  = 0;
	strcpy(st_pstn_actn.c_expry_dt,"*");
  st_pstn_actn.c_exrc_typ = '*';
  st_pstn_actn.c_opt_typ = '*';
  st_pstn_actn.l_strike_prc  = 0;

	/***	Ver 1.3	Starts	***/

	if(c_prc_flg == 'C' || c_prc_flg	==	'L')
	{
		if(DEBUG_MSG_LVL_4) /**** Added in Ver 2.4 ****/ /*** Ver 2.8 Debug level changed to 4 from 3 ***/
		{
			fn_userlog(c_ServiceName,"Inside Price Flag Check c_prc_flg Is :%c:",c_prc_flg);
		}

		st_pstn_actn.l_actn_typ	=	ADHOC_ADD_MRGN_RQST;
		st_pstn_actn.c_nkd_blkd_flg	=	c_prc_flg;

		if(DEBUG_MSG_LVL_4) /***** Added in Ver 2.4 *****/	/*** Ver 2.8 Debug level changed to 4 from 3 ***/
		{
			fn_userlog(c_ServiceName,"Inside Price Flag Check st_pstn_actn.l_actn_typ Is :%ld:",st_pstn_actn.l_actn_typ);
			fn_userlog(c_ServiceName,"Inside Price Flag Check st_pstn_actn.c_nkd_blkd_flg Is :%c:",st_pstn_actn.c_nkd_blkd_flg);
		}
	}
	else
	{
  	st_pstn_actn.l_actn_typ = INTRADAY_MTM;
    st_pstn_actn.c_nkd_blkd_flg = 'A';  /*** Auto MTM ** Ver 1.6 **/
	}

	/***	Ver 1.3	Ends	***/

  st_pstn_actn.c_trnsctn_flw = '*';
  st_pstn_actn.l_orgnl_qty = 0;
  st_pstn_actn.l_orgnl_rt  = 0;
  st_pstn_actn.l_new_qty = 0;
  st_pstn_actn.l_new_rt  = 0;
  st_pstn_actn.l_exec_qty  = 0;
  st_pstn_actn.l_exec_rt  = 0;
  st_pstn_actn.l_fresh_qty  = 0;
  st_pstn_actn.l_cover_qty  = 0;
  st_pstn_actn.d_add_mrgn_amt = 0;
	fn_cpy_ddr(st_pstn_actn.c_rout_crt);

  i_ip_len = sizeof ( struct vw_pstn_actn );
  i_op_len = sizeof ( struct vw_pstn_actn );

	fn_cpy_ddr(st_pstn_actn.c_rout_crt);

	if(st_pstn_actn.c_prd_typ =='P')            /*** Ver 1.2 ***/
  {
    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_pstn_actn,
                                &st_pstn_actn,
                                "vw_pstn_actn",
                                "vw_pstn_actn",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_UPD_FUT_PLS" );

     if(DEBUG_MSG_LVL_4)		/*** Ver 2.8 Debug level changed to 4 from 3 ***/
		 {
      	fn_userlog( c_ServiceName, "Return code from SFO_UPD_FUT_PLUS :%d:",
                                  i_returncode );
		 }
  }

	else
	{
  	i_returncode = fn_call_svc( c_ServiceName,
                              	c_err_msg,
                              	&st_pstn_actn,
                              	&st_pstn_actn,
                              	"vw_pstn_actn",
                              	"vw_pstn_actn",
                              	i_ip_len,
                              	i_op_len,
                              	0,
                              	"SFO_UPD_FUT_POS" );

		if(DEBUG_MSG_LVL_4){		/*** Ver 2.8 Debug level changed to 4 from 3 ***/
    	fn_userlog( c_ServiceName, "Return code from SFO_UPD_FUT_POS :%d:",
                                  i_returncode );
}
	}

  MEMSET(st_pstn_actn.c_expry_dt);  /** ver 2.1 **/
  strcpy(st_pstn_actn.c_expry_dt,c_expry_dt); /** ver 2.1 **/

	switch ( i_returncode )
	{
		case SUCC_BFR :
     if(DEBUG_MSG_LVL_4){						/*** Ver 2.8 Debug level changed to 4 from 3 ***/
          fn_userlog( c_ServiceName, "SFO_UPD_FUT_POS- SUCC_BFR" );
     }

  		EXEC SQL
				UPDATE  FUP_FUT_UNDRLYNG_PSTN
				SET   	FUP_MTM_FLG = 'O'
				WHERE   FUP_CLM_MTCH_ACCNT 	= :st_pstn_actn.c_cln_mtch_accnt
				AND 		FUP_XCHNG_CD 			 	= :st_pstn_actn.c_xchng_cd
				AND 		FUP_PRDCT_TYP 			= :st_pstn_actn.c_prd_typ
				AND 		FUP_INDSTK 					= :st_pstn_actn.c_ctgry_indstk
				AND 		FUP_UNDRLYNG 				= :st_pstn_actn.c_undrlyng
				AND 		FUP_CNTRCT_TAG 			= :st_pstn_actn.c_cntrct_tag;

  		if ( SQLCODE != 0 )
  		{
    		fn_errlog( c_ServiceName, "S31050",SQLMSG,c_err_msg);
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		strcpy ( c_msg, "System error. Contact system support" );
    		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
        if( c_prc_flg == 'A' ) /** Ver 1.6 **/
        {
          fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
        }  
        tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}

      /**** Ver 1.6 Starts Here ****/
       i_returncode = fn_calc_trgprc_on_chngmrgn(c_ServiceName,
                                                 &st_pstn_actn,
                                                ptr_st_err_msg
                                                );
       if ( i_returncode != 0 )
       {
         fn_errlog( c_ServiceName, "S31055",LIBMSG,ptr_st_err_msg->c_err_msg);
         fn_userlog(c_ServiceName,"Pls check, Error in calcualting Auto MTM Trigger Price");  
       }
      /**** Ver 1.6 Ends here ****/

/*****************************************************************
			i_returncode = fn_ins_rep_tbl ( c_ServiceName,
                   										c_err_msg,
                   										&st_pstn_actn,
                   										st_pstn_actn.c_imtm_rmrks );

  		if ( i_returncode != 0 )
  		{
    		fn_errlog( c_ServiceName, "S31060",LIBMSG,c_err_msg);
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}
*****************************************************************/

			i_returncode = fn_ins_rep_tbl ( c_ServiceName,
                    									c_err_msg,
                    									&st_pstn_actn,
                    									"POSITION EXITING MTM" );

  		if ( i_returncode != 0 )
  		{
    		fn_errlog( c_ServiceName, "S31065",LIBMSG,c_err_msg);
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		strcpy ( c_msg, "System error. Contact system support" );
    		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
        if( c_prc_flg == 'A' ) /** Ver 1.6 **/
        {
          fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
        } 
        tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}

      if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
      {
        fn_errlog( c_ServiceName, "S31070",LIBMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        strcpy ( c_msg, "System error. Contact system support" );
        fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
        if( c_prc_flg == 'A' ) /** Ver 1.6 **/
        {
          fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
        }
        tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      /*** Ver 3.3 Starts Here *****/

      i_returncode = fn_upd_nrmlmrgn_reporting(st_pstn_actn.c_cln_mtch_accnt,
                                       st_pstn_actn.c_xchng_cd,
                                       c_ServiceName,
                                       c_err_msg
                                      );
      if ( i_returncode != 0 )
      {
        fn_errlog( c_ServiceName, "S31075",LIBMSG,ptr_st_err_msg->c_err_msg);
        fn_userlog(c_ServiceName,"Pls check, fn_upd_nrmlmrgn_reporting");
      }
      /*** Ver 3.3 Ends Here ***/


      /** Ver 2.9 Starts **/


      if(DEBUG_MSG_LVL_3)
      {      
        fn_userlog ( c_ServiceName, " c_imtm_rmrks :%s: ",st_pstn_actn.c_imtm_rmrks);
      }

      MEMSET(sql_fod_ordr_rfrnc);

      strtok(st_pstn_actn.c_imtm_rmrks,"[");
      strcpy(sql_fod_ordr_rfrnc,strtok(null_ptr,"]"));
      fn_userlog ( c_ServiceName, " c_order_ref_no :%s:",sql_fod_ordr_rfrnc);


      if ( strstr (st_pstn_actn.c_imtm_rmrks, "SQUAREOFF ORDER"))
      {

        EXEC SQL
        SELECT FOD_EXPRY_DT,
               FOD_EXER_TYP
        INTO   :st_pstn_actn.c_expry_dt,
               :st_pstn_actn.c_exrc_typ
        FROM   FOD_FO_ORDR_DTLS
        WHERE  FOD_ORDR_RFRNC     = :sql_fod_ordr_rfrnc
        AND    FOD_CLM_MTCH_ACCNT = :st_pstn_actn.c_cln_mtch_accnt;

        if ( SQLCODE != 0 )
        {
          fn_userlog(c_ServiceName,"Error in Margin_shrtfll SMS .."); 
          fn_errlog( c_ServiceName, "S31080",SQLMSG,c_err_msg);
        }
        else
        {
          fn_userlog ( c_ServiceName, " fn_mrgn_shrtfll_sms_mail calling...");

          i_returncode = fn_mrgn_shrtfll_sms_mail ( c_ServiceName,
                                                    st_pstn_actn.c_cln_mtch_accnt,
                                                    st_pstn_actn.c_xchng_cd,
                                                    st_pstn_actn.c_prd_typ,
                                                    st_pstn_actn.c_ctgry_indstk,
                                                    st_pstn_actn.c_undrlyng,
                                                    st_pstn_actn.c_expry_dt, 
                                                    st_pstn_actn.c_exrc_typ,
                                                    st_pstn_actn.c_opt_typ,
                                                    st_pstn_actn.l_strike_prc, 
                                                    'M' 
                                                  );
          if ( i_returncode != 0 )
          {
            fn_userlog(c_ServiceName,"Error in Margin_shrtfll SMS ..");
            fn_errlog( c_ServiceName, "S31085",LIBMSG,c_err_msg);
          }
        }
      }
      /** Ver 2.9 Ends **/

    /****************** Added Ver 2.2 *********************/

			rtrim(st_pstn_actn.c_cln_mtch_accnt);
			rtrim(st_pstn_actn.c_xchng_cd);
			rtrim(st_pstn_actn.c_undrlyng);

      EXEC SQL
           SELECT count(1) 
           INTO   :i_exists
           FROM   FOD_FO_ORDR_DTLS
           WHERE  FOD_CLM_MTCH_ACCNT = :st_pstn_actn.c_cln_mtch_accnt    /** trim removed in Ver 2.6 **/
           AND    FOD_XCHNG_CD  = :st_pstn_actn.c_xchng_cd				 /** trim removed in Ver 2.6 **/
           AND    trim(FOD_UNDRLYNG)  = :st_pstn_actn.c_undrlyng
           AND    FOD_PRDCT_TYP = :st_pstn_actn.c_prd_typ					  /** trim removed in Ver 2.6 **/
           AND    FOD_INDSTK    = :st_pstn_actn.c_ctgry_indstk			 /** trim removed in Ver 2.6 **/
           AND    FOD_ORDR_STTS in ('O','R','P')
					 AND    FOD_CHANNEL = 'SYS' ;
			
			if(DEBUG_MSG_LVL_3) /**** Added in Ver 2.4 ****/
			{
				fn_userlog(c_ServiceName," i_exists :%d: ",i_exists );
			}
	
      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S31090",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        strcpy ( c_msg, "System error. Contact system support" );
        fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
        if( c_prc_flg == 'A' ) /** Ver 1.6 **/
        {
         fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
        }
    		tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if(i_exists > 0 )
      {
        MEMSET(c_cln_mtch_accnt ) ;
        MEMSET(c_xchng_cd);
        MEMSET(c_undrlyng);

         strcpy( c_cln_mtch_accnt , st_pstn_actn.c_cln_mtch_accnt);
         strcpy( c_xchng_cd , st_pstn_actn.c_xchng_cd );
         strcpy( c_undrlyng , st_pstn_actn.c_undrlyng );
         c_prd_typ = st_pstn_actn.c_prd_typ;
         c_ctgry_indstk = st_pstn_actn.c_ctgry_indstk;

	       EXEC SQL ALLOCATE :trd_cursor;

         EXEC SQL EXECUTE
         BEGIN
         OPEN   :trd_cursor FOR
         SELECT FOD_ORDR_RFRNC,
								FOD_CHANNEL,
                FOD_PIPE_ID,
								FOD_SPL_FLAG								/** Added in Ver 2.7 **/
         FROM   FOD_FO_ORDR_DTLS
         WHERE  FOD_CLM_MTCH_ACCNT =:c_cln_mtch_accnt
         AND    FOD_XCHNG_CD  = :c_xchng_cd
         AND    trim(FOD_UNDRLYNG)  = :c_undrlyng    /*** trim added in ver 2.6 **/
         AND    FOD_PRDCT_TYP = :c_prd_typ
         AND    FOD_INDSTK    = :c_ctgry_indstk
				 AND    FOD_ORDR_STTS in ('O','R','P')
         AND    FOD_SPL_FLAG in ('L','M')           /** Ver 2.5 **/
         AND    FOD_CHANNEL   = 'SYS';
         END;
         END-EXEC;

       if ( SQLCODE != 0 )
       {
       	/** if ( SQLCODE == NO_DATA_FOUND )        ****** commented in Ver 2.5 **
       	{
       	    break;
       	}
       	else
       	{  ******** Ver 2.5 ***********/
       	 fn_errlog( c_ServiceName, "S31095",SQLMSG,c_err_msg);
       	 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       	 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       	 strcpy ( c_msg, "System error. Contact system support" );
       	 fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
       	 if( c_prc_flg == 'A' ) /** Ver 1.6 **/
       	 {
       	  fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
       	 }
    		 tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
 				 EXEC SQL FREE :trd_cursor;		 /*** ver 2.5 **/
       	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       	/** }  *** Ver 2.5 **/
       }


       while( 1 )
       {
        EXEC SQL
        FETCH :trd_cursor
        INTO  :sql_fod_ordr_rfrnc,
							:sql_fod_channel,
              :sql_fod_pipe_id,
							:sql_fod_spl_flag;		/** Added in Ver 2.7 **/

				if(DEBUG_MSG_LVL_4) /**** Added in Ver 2.4 ****/		/*** Ver 2.8 Debug level changed to 4 from 3 ***/
				{
					fn_userlog(c_ServiceName," sql_fod_ordr_rfrnc :%s:",sql_fod_ordr_rfrnc );
					fn_userlog(c_ServiceName," sql_fod_spl_flag :%c:",sql_fod_spl_flag);   /*** added in Ver 2.7 ***/
        }
				/*** ver 2.8 Starts ***/
				if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName," sql_fod_ordr_rfrnc :%s: sql_fod_spl_flag :%c:",sql_fod_ordr_rfrnc,sql_fod_spl_flag );
        }
				/*** Ver 2.8 Ends ***/
				if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
             fn_userlog(c_ServiceName," no data found");
        		EXEC SQL CLOSE :trd_cursor;    		/*** ver 2.5 **/
        		EXEC SQL FREE :trd_cursor;     		/*** ver 2.5 **/
            break;
          }
          else
          {
            fn_errlog( c_ServiceName, "S31100",SQLMSG,c_err_msg);
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            strcpy ( c_msg, "System error. Contact system support" );
            fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
            if( c_prc_flg == 'A' ) /** Ver 1.6 **/
            {
             fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
            }
        		EXEC SQL CLOSE :trd_cursor;    		/*** ver 2.5 **/
        		EXEC SQL FREE :trd_cursor;     		/*** ver 2.5 **/
    				tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        }

          strcpy(c_usr_id,"system");
          strcpy(c_alias,"*");
          l_sssn_id = 0;

					/*** Ver 2.7 Starts ***/

					if( sql_fod_spl_flag == 'M' )
					{
						i_returncode = fn_acall_svc_fml ( c_ServiceName,
                                     c_err_msg,
                                     "SFO_CANCEL_FUT",
                                     0,
                                     9, 
                                     FFO_USR_ID, (char *)c_usr_id ,
                                     FFO_SSSN_ID, (char *)&l_sssn_id ,
                                     FFO_XCHNG_CD, (char *)st_pstn_actn.c_xchng_cd ,
                                     FFO_EBA_MTCH_ACT_NO, (char *)st_pstn_actn.c_cln_mtch_accnt ,
                                     FFO_ORDR_RFRNC, (char *)sql_fod_ordr_rfrnc,
                                     FFO_CHANNEL, (char *)sql_fod_channel.arr,
                                     FFO_ALIAS,(char *)c_alias,
                                     FFO_PIPE_ID, (char *)sql_fod_pipe_id,
                                     FFO_MKT_TYP,(char *)&st_pstn_actn.c_nkd_blkd_flg);
					}
					else 
					{
					/*** Ver 2.7 Ends ***/
					
            i_returncode = fn_acall_svc_fml ( c_ServiceName,
                                     c_err_msg,
                                     "SFO_CANCEL_FUT",
                                     0,
                                     8,
                                     FFO_USR_ID, (char *)c_usr_id ,
                                     FFO_SSSN_ID, (char *)&l_sssn_id ,
                                     FFO_XCHNG_CD, (char *)st_pstn_actn.c_xchng_cd ,
                                     FFO_EBA_MTCH_ACT_NO, (char *)st_pstn_actn.c_cln_mtch_accnt ,
                                     FFO_ORDR_RFRNC, (char *)sql_fod_ordr_rfrnc,
                                     FFO_CHANNEL, (char *)sql_fod_channel.arr,
                                     FFO_ALIAS,(char *)c_alias,
                                     FFO_PIPE_ID, (char *)sql_fod_pipe_id);
					}

          if ( i_returncode != SUCC_BFR )
          {
            fn_errlog( c_ServiceName, "S31105",SQLMSG,c_err_msg);
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            strcpy ( c_msg, "System error. Contact system support" );
            fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
            if( c_prc_flg == 'A' ) /** Ver 1.6 **/
            {
             fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
            }
        		EXEC SQL CLOSE :trd_cursor;    /*** ver 2.5 **/
        		EXEC SQL FREE :trd_cursor;     /*** ver 2.5 **/
        		tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        }
       }
      /******************** Ver 2.2 Ends  ******************/

			break;
		case INSUFFICIENT_LIMITS :
 		case  -7 :    /*** Ver 1.7 ***/
     
       if(DEBUG_MSG_LVL_4) /**** Added in Ver 2.4 ****/			/*** Ver 2.8 Debug level changed to 4 from 3 ***/
			 {
					fn_userlog( c_ServiceName, "SFO_UPD_FUT_POS- INSUFFICIENT_LIMITS" );

        /********* Start of Ver 1.7 *************/

        fn_userlog(c_ServiceName,"Remarks Is :%s",st_pstn_actn.c_imtm_rmrks);

			 }

         strptr = strtok(st_pstn_actn.c_imtm_rmrks,"^");

         if(strptr != NULL)
          {
            strcpy(c_temp_rmrks, strptr);
            strptr = strtok(NULL, "^");
          }

           if(strptr != NULL)
           {
           sscanf(strptr, "%s", c_expry_dt_MTM);
           strptr = strtok(NULL, "^");
           }

          if(strptr != NULL)
          {
           sscanf(strptr, "%lf", &d_ord_mrgn_MTM_b);
           strptr = strtok(NULL, "^");
          }

          if(strptr != NULL)
          {
           sscanf(strptr, "%lf", &d_trd_mrgn_MTM_b);
           strptr = strtok(NULL, "^");
          }

         if(strptr != NULL)
          {
           sscanf(strptr, "%lf", &d_spread_mrgn_MTM_b);
           strptr = strtok(NULL, "^");
          }
          if(strptr != NULL)
          {
           sscanf(strptr, "%lf", &d_ord_mrgn_MTM_a);
           strptr = strtok(NULL, "^");
          }
          if(strptr != NULL)
          {
           sscanf(strptr, "%lf", &d_trd_mrgn_MTM_a);
           strptr = strtok(NULL, "^");
          }
          if(strptr != NULL)
          {
           sscanf(strptr, "%lf", &d_spread_mrgn_MTM_a);
           strptr = strtok(NULL, "^");
          }
          if(strptr != NULL)
          {
           sscanf(strptr, "%lf", &d_add_mrgn_MTM);
           strptr = strtok(NULL, "^");
          }
          if(strptr != NULL)
          {
           sscanf(strptr, "%ld", &l_opnpstn_MTM);
           strptr = strtok(NULL, "^");
          }
          if(strptr != NULL)
          {
           sscanf(strptr, "%ld", &li_cmp_MTM);
           strptr = strtok(NULL, "^");
          }
          if(strptr != NULL)
          {
           sscanf(strptr, "%lf", &d_limit_MTM);
           strptr = strtok(NULL, "^");
          }

        strcpy(st_pstn_actn.c_imtm_rmrks,c_temp_rmrks);

        /********* End of Ver 1.7 *************/



				if(st_pstn_actn.l_actn_typ == INTRADAY_MTM )			/***	Ver	1.3	***/
				{
    			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );

  				i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  				if ( i_trnsctn == -1 )
  				{
    				fn_errlog( c_ServiceName, "S31110", LIBMSG, c_err_msg  );
    				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    				strcpy ( c_msg, "System error. Contact system support" );
    				fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
            if( c_prc_flg == 'A' ) /** Ver 1.6 **/
            {
              fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
            } 
            tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
    				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  				}

          /** Commented and changed below for Ver 3.1 **
          i_returncode = fn_lock_usr( c_ServiceName,
                                        st_pstn_actn.c_cln_mtch_accnt );
          ** Ver 3.1 **/
          i_returncode = fn_lock_fno( c_ServiceName,
                                        st_pstn_actn.c_cln_mtch_accnt );
  				if ( i_returncode == -1 )
  				{
    				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    				fn_errlog( c_ServiceName, "S31115", LIBMSG, c_err_msg  );
    				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    				strcpy ( c_msg, "System error. Contact system support" );
    				fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
            if( c_prc_flg == 'A' ) /** Ver 1.6 **/
            {
              fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
            }
            tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/ 
    				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  				}
  /********* Start of Ver 1.7 *************/

					d_init_mrgn_prcnt_MTM = 0.0 ;
					d_min_mrgn_prcnt_MTM	= 0.0 ;
					d_somc_prcnt_MTM	= 0.0 ;
					d_spread_mrgn_MTM = 0.0;
					d_avm_prcnt_MTM	= 0.0 ;
          d_ers_trg_prcnt = 0;

						if ( st_pstn_actn.c_prd_typ == 'F')
						{
			
            	EXEC SQL
            		SELECT  NVL(FMM_INIT_MRGN_PRCNT,0),
            		NVL(FMM_MIN_MRGN_PRCNT,0),
            		NVL(FMM_SOMC_PRCNT,0),
            		NVL(FMM_SPREAD_MRGN,0),
            		NVL(FMM_AVM_PRCNT,0),
                NVL(FMM_MIN_TRG_PRCNT,0)   /** Ver 1.8 **/
            		INTO    :d_init_mrgn_prcnt_MTM,
            		:d_min_mrgn_prcnt_MTM,
            		:d_somc_prcnt_MTM,
            		:d_spread_mrgn_MTM,
            		:d_avm_prcnt_MTM,
                :d_ers_trg_prcnt           /** Ver 1.8 **/
            		FROM   FMM_FO_MRGN_MSTR
            		WHERE  FMM_PRDCT_TYP = 'F'
            		AND    FMM_UNDRLYNG = :st_pstn_actn.c_undrlyng
            		AND    FMM_XCHNG_CD = :st_pstn_actn.c_xchng_cd
            		AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
                                     					FROM    FCB_FO_CLN_BSKT_ALLTD
                                     					WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                     					FROM    CLM_CLNT_MSTR
                                     					WHERE   CLM_MTCH_ACCNT =:st_pstn_actn.c_cln_mtch_accnt)) ;
            	if ( SQLCODE != 0 )
            	{
              	fn_userlog(c_ServiceName,"COULDN'T INSERT DATA INTO IMTM REPORT TABLE I,SQLCODE IS |%ld|",SQLCODE);		/*** Ver 2.8 ***/	
              	/* fn_userlog(c_ServiceName,"COULDN'T INSERT DATA INTO IMTM REPORT TABLE I");
              	fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE); *** Commented in Ver 2.8 ***/
              	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                strcpy ( c_msg, "System error. Contact system support" );
                fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
                if( c_prc_flg == 'A' ) /** Ver 1.6 **/
                {
                 fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
                }
                tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/  
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            	}
              
              /*** Ver 1.8 Starts Here ***/
              i_ers_cnt=0;
              EXEC SQL
                  Select count(1) 
                    INTO :i_ers_cnt
                    from FEM_FOMTM_ERS_MSTR 
                   where FEM_CLM_MTCH_ACCNT = :st_pstn_actn.c_cln_mtch_accnt
                     AND FEM_ACT_DACT_FLG ='A';
              if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
              {
                fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                strcpy ( c_msg, "System error. Contact system support" );
                fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
                if( c_prc_flg == 'A' ) /** Ver 1.6 **/
                {
                 fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
                }
                tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              }
              
              if(i_ers_cnt > 0)
              {   
                c_ers_flg ='Y';
              }
              else
              {
                c_ers_flg='N';
              }
                  
              /*** Ver 1.8 Ends here ***/             
						}
						else if ( st_pstn_actn.c_prd_typ == 'P')
            {

              EXEC SQL
								SELECT  nvl(FMM_SPAN_MRGN_PRCNT,0),            
                nvl(FMM_THRSHD_MRGN_PRCNT,0),
                nvl(FMM_SOMC_PRCNT,0),
                nvl(FMM_SPREAD_MRGN,0),
               	nvl(FMM_AVM_PRCNT,0)
                INTO    :d_init_mrgn_prcnt_MTM,
                :d_min_mrgn_prcnt_MTM,
                :d_somc_prcnt_MTM,
                :d_spread_mrgn_MTM,
                :d_avm_prcnt_MTM
                FROM   FMM_FO_MRGN_MSTR
                WHERE  FMM_PRDCT_TYP = 'F'
                AND    FMM_UNDRLYNG = :st_pstn_actn.c_undrlyng
                AND    FMM_XCHNG_CD = :st_pstn_actn.c_xchng_cd
                AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
                                              FROM    FCB_FO_CLN_BSKT_ALLTD
                                              WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                              FROM    CLM_CLNT_MSTR
                                              WHERE   CLM_MTCH_ACCNT =:st_pstn_actn.c_cln_mtch_accnt)) ;
              if ( SQLCODE != 0 )
              {
								fn_userlog(c_ServiceName,"COULDN'T INSERT DATA INTO IMTM REPORT TABLE I,SQLCODE IS |%ld|",SQLCODE);    /*** Ver 2.8 ***/
                /* fn_userlog(c_ServiceName,"COULDN'T INSERT DATA INTO IMTM REPORT TABLE I");
                fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);			*** commented in Ver 2.8 ***/
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                strcpy ( c_msg, "System error. Contact system support" );
                fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
                if( c_prc_flg == 'A' ) /** Ver 1.6 **/
                {
                 fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
                }
                tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              }

              c_ers_flg='N';  /** Ver 1.8 **/

            }
						if(DEBUG_MSG_LVL_4) /**** Added in Ver 2.4 ****/	/*** Ver 2.8 Debug level changed to 4 from 3 ***/
						{
							fn_userlog(c_ServiceName,"match id is :%s:",st_pstn_actn.c_cln_mtch_accnt);
						}


            d_nwb_amt_MTM = 0;
            d_fdr_amt_MTM = 0.0;

            EXEC SQL
            SELECT  FAB_BNK_ACCNT,
            FAB_ALCTD_AMT,
            FAB_BFT_AMT,
            FAB_PLG_AMT,
            nvl(FAB_NWB_AMT,0),
						nvl(FAB_FDR_AMT,0)
            INTO
            :c_bnk_accnt_MTM,
            :d_alctd_amt_MTM,
            :d_bft_amt_MTM,
            :d_plg_amt_MTM,
            :d_nwb_amt_MTM,
						:d_fdr_amt_MTM
            FROM    FAB_FO_ALC_BFT_SMRY
            WHERE   FAB_CLM_MTCH_ACCNT = :st_pstn_actn.c_cln_mtch_accnt ;
            if ( SQLCODE != 0 )
            {
              fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              strcpy ( c_msg, "System error. Contact system support" );
              fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
             if( c_prc_flg == 'A' ) /** Ver 1.6 **/
              {
               fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
              }
              tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/   
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
            }
						
						if( DEBUG_MSG_LVL_4 )  /**** Added in Ver 2.4 ****/	/** Ver 2.8 Debug level changed to 4 from 3 **/
						{
							fn_userlog(c_ServiceName,"Stage 1");
						}

            EXEC SQL
            SELECT  TO_CHAR(sysdate,'dd-Mon-yyyy hh24:mi:ss')
            INTO    :c_time
            FROM    dual ;
            if ( SQLCODE != 0 )
            {
                fn_userlog(c_ServiceName,"COULDN'T INSERT DATA INTO IMTM REPORT TABLE II,SQLCODE IS |%ld|",SQLCODE);    /*** Ver 2.8 ***/
                /* fn_userlog(c_ServiceName,"COULDN'T INSERT DATA INTO IMTM REPORT TABLE II");
                fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE); *** commented in ver 2.8 ***/
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                strcpy ( c_msg, "System error. Contact system support" );
                fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
                if( c_prc_flg == 'A' ) /** Ver 1.6 **/
                {
                 fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
                }
                tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/ 
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

            d_tot_shr_plgd_amt_MTM  = 0;
            d_eab_amt_MTM           = 0;

            EXEC SQL
            SELECT  nvl(EAB_PLG_AMT,0) * 100
            INTO    :d_eab_amt_MTM
            FROM    EAB_EQ_ALC_BFT_SMRY
            WHERE   EAB_CLM_MTCH_ACCNT = :st_pstn_actn.c_cln_mtch_accnt ;

            if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
            {
                fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                strcpy ( c_msg, "System error. Contact system support" );
                fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
                if( c_prc_flg == 'A' ) /** Ver 1.6 **/
                {
                 fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
                }
                tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/  
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

			/** Ver 3.2 starts **/
      			d_cab_amt_MTM = 0;

            EXEC SQL
            SELECT  nvl(CAB_PLG_AMT,0) * 100
            INTO    :d_cab_amt_MTM
            FROM    CAB_CDX_ALC_BFT_SMRY
            WHERE   CAB_CLM_MTCH_ACCNT = :st_pstn_actn.c_cln_mtch_accnt ;

      			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
			      {
          	  fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
      				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			      	strcpy ( c_msg, "System error. Contact system support" );
				      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
				      if( c_prc_flg == 'A' )
				      {
					     fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
				      }
				      tpfree((char*)ptr_st_err_msg);
				      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			      }

            d_cab_amt_mco_MTM = 0;

            EXEC SQL
            SELECT  nvl(CAB_PLG_AMT,0) 
            INTO    :d_cab_amt_mco_MTM
            FROM    CAB_COD_ALC_BFT_SMRY
            WHERE   CAB_CLM_MTCH_ACCNT = :st_pstn_actn.c_cln_mtch_accnt ;

            if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
            {
              fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              strcpy ( c_msg, "System error. Contact system support" );
              fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
              if( c_prc_flg == 'A' )
              {
                fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
              }
              tpfree((char*)ptr_st_err_msg);
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

		/** Ver 3.2 ends **/


            /** d_tot_shr_plgd_amt_MTM  = d_nwb_amt_MTM + d_plg_amt_MTM + d_eab_amt_MTM; commented in Ver 3.2 **/
			d_tot_shr_plgd_amt_MTM  = d_nwb_amt_MTM + d_plg_amt_MTM + d_eab_amt_MTM + d_cab_amt_MTM + d_cab_amt_mco_MTM; /** Ver 3.2 **/

						if( DEBUG_MSG_LVL_4 ) /**** Added in Ver 2.4 ****/ /** Ver 2.8 Debug level changed to 4 from 3 **/
						{
							fn_userlog(c_ServiceName,"STARTS INSERTING RECORD INTO ISS____________________________");
							fn_userlog(c_ServiceName,"TIME:%s:",c_time);
						}
				d_limit_MTM = d_limit_MTM * 100 ;

        EXEC SQL INSERT INTO ISS_FO_IMTM_SQ_SMRY
        (
          ISS_CLM_MTCH_ACCNT,
          ISS_XCHNG_CD,
          ISS_UNDRLYNG,
          ISS_PRDCT_TYP,
          ISS_EXPRY_DT,
          ISS_STRK_PRC,
          ISS_EXER_TYP,
          ISS_OPT_TYP,
          ISS_BNK_ACCNT,
          ISS_LIMIT,
          ISS_ALCTD_AMT,
          ISS_BFT_AMT,
          ISS_IM_P,
          ISS_MM_P,
          ISS_SOMC_P,
          ISS_SPRD_MRGN_P,
          ISS_ORD_MRGN_B,
          ISS_TRD_MRGN_B,
          ISS_SPRD_MRGN_B,
          ISS_ORD_MRGN_A,
          ISS_TRD_MRGN_A,
          ISS_SPRD_MRGN_A,
          ISS_ADD_MRGN_AMT,
          ISS_CNTRCT_TAG,
          ISS_OPN_PSTN,
          ISS_CMP,
          TIME,
          ISS_PLG_AMT,
          ISS_SHR_PLG_AMT,
					ISS_FDR_AMT,
					ISS_MIN_TRGPRC, /* Ver 1.8 */
          ISS_ERS_FLG
        )
        values
        (
            :st_pstn_actn.c_cln_mtch_accnt,
            :st_pstn_actn.c_xchng_cd,
            :st_pstn_actn.c_undrlyng,
            :st_pstn_actn.c_prd_typ,
            :c_expry_dt_MTM,
            :st_pstn_actn.l_strike_prc,
            :st_pstn_actn.c_exrc_typ,
            :st_pstn_actn.c_opt_typ,
            :c_bnk_accnt_MTM,
            :d_limit_MTM ,
            :d_alctd_amt_MTM,
            :d_bft_amt_MTM,
            :d_init_mrgn_prcnt_MTM,
            :d_min_mrgn_prcnt_MTM,
            :d_somc_prcnt_MTM,
            :d_spread_mrgn_MTM,
            :d_ord_mrgn_MTM_b,
            :d_trd_mrgn_MTM_b,
            :d_spread_mrgn_MTM_b,
            :d_ord_mrgn_MTM_a,
            :d_trd_mrgn_MTM_a,
            :d_spread_mrgn_MTM_a,
            :d_add_mrgn_MTM,
            :st_pstn_actn.c_cntrct_tag,
            :l_opnpstn_MTM,
            :li_cmp_MTM,
            to_date(:c_time,'DD-MON-YYYY HH24:MI:SS'),
            :d_plg_amt_MTM,
            :d_tot_shr_plgd_amt_MTM,
						:d_fdr_amt_MTM,
						:d_ers_trg_prcnt * 100, /* Ver 1.8 */
            :c_ers_flg        /* Ver 1.8 */
        ) ;

                  if ( SQLCODE != 0 )
          {
            fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            strcpy ( c_msg, "System error. Contact system support" );
            fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
            if( c_prc_flg == 'A' ) /** Ver 1.6 **/
            {
              fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
            }
            tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

        if(DEBUG_MSG_LVL_5)
        {
        	fn_userlog(c_ServiceName,"------- INSIDE MTM SERVICE---------");
        	fn_userlog(c_ServiceName,"FINAL LOG STARTS__________________________________");
        	fn_userlog(c_ServiceName,"Remarks is                    |%s|",c_temp_rmrks);
        	fn_userlog(c_ServiceName,"sh_c_expry_dt_MTM Date        |%s|", c_expry_dt_MTM );
        	fn_userlog(c_ServiceName,"sh_li_cmp_MTM                 |%ld|",li_cmp_MTM);
        	fn_userlog(c_ServiceName,"sh_l_opnpstn_MTM              |%ld|",l_opnpstn_MTM);
        	fn_userlog(c_ServiceName,"sh_tot_shr_plgd_amt_MTM       |%ld|",d_tot_shr_plgd_amt_MTM);
        	fn_userlog(c_ServiceName,"d_limit_MTM                   |%lf|",d_limit_MTM);
        	fn_userlog(c_ServiceName,"c_bnk_accnt_MTM               |%s|",c_bnk_accnt_MTM);
        	fn_userlog(c_ServiceName,"d_alctd_amt_MTM               |%lf|",d_alctd_amt_MTM);
        	fn_userlog(c_ServiceName,"d_bft_amt_MTM                 |%lf|",d_bft_amt_MTM);
        	fn_userlog(c_ServiceName,"d_init_mrgn_prcnt_MTM         |%lf|",d_init_mrgn_prcnt_MTM);
        	fn_userlog(c_ServiceName,"d_min_mrgn_prcnt_MTM          |%lf|",d_min_mrgn_prcnt_MTM);
        	fn_userlog(c_ServiceName,"d_somc_prcnt_MTM              |%lf|",d_somc_prcnt_MTM);
        	fn_userlog(c_ServiceName,"d_spread_mrgn_MTM             |%lf|",d_spread_mrgn_MTM);
        	fn_userlog(c_ServiceName,"d_avm_prcnt_MTM               |%lf|",d_avm_prcnt_MTM);
        	fn_userlog(c_ServiceName,"d_ord_mrgn_MTM_b              |%lf|",d_ord_mrgn_MTM_b);
        	fn_userlog(c_ServiceName,"d_trd_mrgn_MTM_b              |%lf|",d_trd_mrgn_MTM_b);
        	fn_userlog(c_ServiceName,"d_spread_mrgn_MTM_b           |%lf|",d_spread_mrgn_MTM_b);
       	 	fn_userlog(c_ServiceName,"d_ord_mrgn_MTM_a              |%lf|",d_ord_mrgn_MTM_a);
        	fn_userlog(c_ServiceName,"d_trd_mrgn_MTM_a              |%lf|",d_trd_mrgn_MTM_a);
        	fn_userlog(c_ServiceName,"d_spread_mrgn_MTM_a           |%lf|",d_spread_mrgn_MTM_a);
        	fn_userlog( c_ServiceName,"d_add_mrgn_MTM               |:%lf:|", d_add_mrgn_MTM );
        	fn_userlog( c_ServiceName, "Match Account               |%s|", st_pstn_actn.c_cln_mtch_accnt );
        	fn_userlog( c_ServiceName, "Exchange code               |%s|", st_pstn_actn.c_xchng_cd );
        	fn_userlog( c_ServiceName, "Product Type                |%c|", st_pstn_actn.c_prd_typ );
        	fn_userlog( c_ServiceName, "Underlyng                   |%s|", st_pstn_actn.c_undrlyng );
        	fn_userlog( c_ServiceName, "Category                    |%c|", st_pstn_actn.c_ctgry_indstk );
        	fn_userlog( c_ServiceName, "Contract tag                |%c|", st_pstn_actn.c_cntrct_tag );
        	fn_userlog( c_ServiceName, "IMTM Remarks                |%s|", st_pstn_actn.c_imtm_rmrks );
        	fn_userlog( c_ServiceName, "Expiry Date                 |%s|", st_pstn_actn.c_expry_dt );
        	fn_userlog( c_ServiceName, "Exercise Type               |%c|", st_pstn_actn.c_exrc_typ );
        	fn_userlog( c_ServiceName, "Opt Type                    |%c|", st_pstn_actn.c_opt_typ );
        	fn_userlog( c_ServiceName, "Strike Price                |%ld|",st_pstn_actn.l_strike_prc );
        	fn_userlog( c_ServiceName, "Plg amt                     |%lf|", d_plg_amt_MTM );
        	fn_userlog(c_ServiceName,"FINAL LOG ENDS__________________________________");
        }
   /******************End of Ver 1.7  ********************/


  				EXEC SQL
						UPDATE  FUP_FUT_UNDRLYNG_PSTN
						SET   	FUP_MTM_FLG = 'M'
						WHERE   FUP_CLM_MTCH_ACCNT 	= :st_pstn_actn.c_cln_mtch_accnt
						AND 		FUP_XCHNG_CD 			 	= :st_pstn_actn.c_xchng_cd
						AND 		FUP_PRDCT_TYP 			= :st_pstn_actn.c_prd_typ
						AND 		FUP_INDSTK 					= :st_pstn_actn.c_ctgry_indstk
						AND 		FUP_UNDRLYNG 				= :st_pstn_actn.c_undrlyng
						AND 		FUP_CNTRCT_TAG 			= :st_pstn_actn.c_cntrct_tag;

  				if ( SQLCODE != 0 )
  				{
    				fn_errlog( c_ServiceName, "S31120",SQLMSG,c_err_msg);
    				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    				strcpy ( c_msg, "System error. Contact system support" );
    				fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
            if( c_prc_flg == 'A' ) /** Ver 1.6 **/
            {
              fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
            } 
            tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
    				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  				}

					i_returncode = fn_ins_rep_tbl ( c_ServiceName,
          	          										c_err_msg,
         	  	         										&st_pstn_actn,
              	      										"POSITION ENTERING MTM" );
	
  				if ( i_returncode != 0 )
  				{
    				fn_errlog( c_ServiceName, "S31125",LIBMSG,c_err_msg);
    				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    				strcpy ( c_msg, "System error. Contact system support" );
    				fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
            if( c_prc_flg == 'A' ) /** Ver 1.6 **/
            {
              fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
            } 
            tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/ 
    				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  				}

					i_returncode = fn_ins_rep_tbl ( c_ServiceName,
          	          										c_err_msg,
            	        										&st_pstn_actn,
              	      										st_pstn_actn.c_imtm_rmrks );
	
  				if ( i_returncode != 0 )
  				{
    				fn_errlog( c_ServiceName, "S31130",LIBMSG,c_err_msg);
    				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    				strcpy ( c_msg, "System error. Contact system support" );
    				fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
            if( c_prc_flg == 'A' ) /** Ver 1.6 **/
            {
              fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
            }
            tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/ 
    				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  				}

  				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  				{
    				fn_errlog( c_ServiceName, "S31135",LIBMSG,c_err_msg);
    				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    				strcpy ( c_msg, "System error. Contact system support" );
    				fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
            if( c_prc_flg == 'A' ) /** Ver 1.6 **/
            {
              fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
            }
            tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/ 
    				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  				}

					fn_cpy_ddr(st_pstn_actn.c_rout_crt);
  				i_returnval = fn_acall_svc(	c_ServiceName,
          	                    			c_err_msg,
            	                  			&st_pstn_actn,
              	                			"vw_pstn_actn",
                	              			sizeof( st_pstn_actn ),
                  	            			TPNOREPLY,
                    	          			"SFO_CANSQ_FIMTM" );

  				if ( i_returnval == -1 )
  				{
    				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    				strcpy ( c_msg, "System error. Contact system support" );
    				fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
            if( c_prc_flg == 'A' ) /** Ver 1.6 **/
            {
              fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
            } 
            tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
    				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}

  				/* 			fn_pst_trg( c_ServiceName, "TRG_LOOK_TAB", "TRG_LOOK_TAB", c_pipe_id );  */
				
					/******************************************************/
    			/****Changes for Tux4 Triggers***************************/
    			/********************************************************/


      		/* To post the Trigger in Tux3 Domain Call the service SFO_FOS_TRG */
    			strcpy ( c_fno_dmn_nm, "FNO" );
    			strcpy ( c_fno_trg_nm, "TRG_LOOK_TAB" );
    			strcpy ( c_fno_trg_dat, "TRG_LOOK_TAB" );

    			i_returncode = fn_call_svc_fml ( 	c_ServiceName,
      	  			                            c_err_msg,
        	      	                      		"SFO_FOS_TRG",
          	      	                    		0,
            	      	                  		4,
              	      	                		0,
                	      	            	  	FFO_DMN_NM, (char *)c_fno_dmn_nm,
                  	      	        	    	FFO_TRG_NM, (char *)c_fno_trg_nm,
                    	      	    	      	FFO_ABT_TRG_DATA, (char *)c_fno_trg_dat,
                      	      		        	FFO_ABT_FILTER, (char *)c_pipe_id);

    			if ( i_returncode != SUCC_BFR )
    			{
      			fn_errlog( c_ServiceName, "S31140", LIBMSG, c_err_msg  );
    			}

    			/********************************************************/
    			/****Changes for Tux4 Triggers ends**********************/
    			/********************************************************/	

				}
				else if(st_pstn_actn.l_actn_typ == ADHOC_ADD_MRGN_RQST  )			/***	Ver	1.3	***/
				{
					if (DEBUG_MSG_LVL_0) /**** Added in Ver 2.4 ****/
					{
						fn_userlog(c_ServiceName,"Inside Insufficient Limit Case For ADHOC_ADD_MRGN_RQST ");
					}

					if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
          {
            fn_errlog( c_ServiceName, "S31145",LIBMSG,c_err_msg);
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            strcpy ( c_msg, "System error. Contact system support" );
            fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
            tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

				}

			break;

		case ERR_BFR :
        fn_userlog(c_ServiceName,"IMTM - Returned ERR_BFR");
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		strcpy ( c_msg, "System error. Contact system support" );
    		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
        if( c_prc_flg == 'A' ) /** Ver 1.6 **/
        {
          fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
        }
        tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/  
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

			break;

		default :			/***	Ver 1.5 Changed from DEFAULT to default	***/
        fn_userlog(c_ServiceName,"IMTM - Returned NOTHING- Abort");
				strcpy( c_err_msg, "Invalid return type from Update position");
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		strcpy ( c_msg, "System error. Contact system support" );
    		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
        if( c_prc_flg == 'A' ) /** Ver 1.6 **/
        {
          fn_upd_fmdstts(c_ServiceName,&st_pstn_actn,c_flg,c_err_msg);
        }
        tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/  
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

			break;
	}

  tpfree((char*)ptr_st_err_msg);   /*** Ver 2.0 ***/

  sprintf ( c_msg, "Successfully Processed match a/c - [%s], Underlying - [%s], Tag - [%c]",
        st_pstn_actn.c_cln_mtch_accnt,
        st_pstn_actn.c_undrlyng,
        st_pstn_actn.c_cntrct_tag );
/*ss	  fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );	*/
  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Ibuf, 0 , 0 );
}

