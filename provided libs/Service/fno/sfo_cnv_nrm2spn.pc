/********************************************************************************************************/
/*  Program             : SFO_CNV_NRML2SPN                                                              */
/*                                                                                                      */
/*                                                                                                      */
/*  Log                 : 1.0     07-Jul-2011     																											*/
/*  										: 1.3     02-Apr-2012     																											*/
/*    									:	1.4			16-May-2012                                                           */
/*											:	1.5			28-May-2012																														*/
/*                      : 1.6     19-Jun-2012                                                           */
/*                      : 1.7     26-Jun-2012                                                           */
/*											:	1.8     29-Jun-2012																														*/
/*											:	1.9     02-Jul-2012																														*/
/*											:	2.0     17-Jul-2012																														*/
/*											:	2.1			02-Aug-2012																														*/
/*                      : 2.2     24-Sep-2012                                                           */
/*                      : 2.3     29-Nov-2012                                                           */
/*                      : 2.4     18-Jun-2013                                                           */
/*                      : 2.5     11-Jul-2013                                                           */
/*                      : 2.6     02-Aug-2013                                                           */
/*                      : 2.7     02-Jun-2014                                                           */
/*                      : 2.8     21-Jul-2014                                                           */
/*                      : 2.9     09-Sep-2014                                                           */
/*											: 3.0			27-Nov-2014																														*/
/*											: 3.1			01-Jul-2016																														*/
/*                      : 3.2     14-Feb-2019                                                           */
/*                      : 3.3     19-Mar-2019                                                           */
/*                      : 3.4     22-Aug-2019                                                           */
/*                      : 3.5     24-Oct-2019                                                           */
/*                      : 3.6     24-Sep-2020                                                           */
/*                      : 3.7     26-Oct-2021                                                           */
/*                      : 3.8     15-Jul-2022                                                           */
/*                      : TOL     10-Aug-2023                                                           */
/********************************************************************************************************/
/*                                                                                                      */
/*  1.0   -   New Release                                                                               */
/*  1.1   -   Variable Initialisation  (Swati A.B)                                                      */
/*  1.2   -   Update of MTM flag for average price of options positions (Navina D.) - 26-Mar-2012       */
/*  1.3   -   Bug Fix (Swati A.B)   																																		*/
/*  1.4   -   Changes For Reports And Transaction Handeling(Mahesh Shinde)                              */
/*	1.5		-		T & C Changes	Sandeep Patil																																*/
/*  1.6   -   Front end option for mapping of clients to SPAN RMS (Navina) - 19-Jun-2012                */
/*  1.7   -   Bug Fix Handeling for option premium (mahesh shinde)				 - 26-Jun-2012								*/	
/*  1.8		-		Revert changes made in Ver 1.5 & TNC bug fix (Navina)	- 29-Jun-2012                       */
/*  1.9		-		Inserting MTM val of Normal margining system in open position val of SPAN 								*/
/*						because PNL is gets calculated on open position val	in SPAN margining system 							*/	
/*						and customer can convert in Closed market status only												- Mahesh  	  */
/*	2.0		-		Error Message Handling																											- Mahesh			*/
/*	2.1		-		TNC Changes Applied Again																										-	sandeep			*/
/*  2.2   -   Fix added to convert position when margin blocked is zero.  (Navina) - 24-Sep-2012        */
/*  2.3   -   FNO BSE Changes    | Sandip Tambe                                                         */
/*  2.4   -   SPAN bug Changes for reading string   | Mahesh Shinde																			*/
/*  2.5   -   SPAN bug Fix for NDF handling and variable intialisation |Swati A.B   										*/
/*  2.6   -  	SPAN/Non-SPAN conversion changes in RIA| Swati A.B   																			*/
/*  2.7   -   FNO Common TNC Changes                                                                    */
/*	2.8		-		Conversion calculator on trading screen	 |  Navina D.               											*/
/*  2.9   -   View to FML changes |  Samip M                                                            */	
/*  3.0  -   Channel WEH added for HTML5  | Anand Dhopte                                                */
/*  3.1   -   Check Session ip common function changes | Navina D.                                      */
/*  3.2		-		Eror message handling 	| Bhushan Harekar																									*/
/*  3.3   -   Anytime conversion request SPAN to Non SPAN and                                           */
/*            vice versa with existing online conversion  | Suchita Dabir                               */ 
/*  3.4   -   Delivery Margin Changes | Suchita Dabir                                                   */
/*  3.5   -   Ipv6 Format | Tanmay Patel                                                                */
/*  3.6   -   Trigger Price Changes | Suchita Dabir                                                     */
/*  3.7   -   Average Price for PNL (Mahesh Regulwar)                                                   */
/*  3.8   -   SPAN_BOD_MRGN_CR-ISEC14-172812(Sachin Birje)                                              */
/*  TOL   -   Tux on Linux  | Agam                                                                      */
/********************************************************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_pos.h>
#include <fo_fml_def.h>
#include <eba_to_ors.h>
/*** #include <fo_view_def.h> ***/  /** Commented for Ver 2.9 ***/
#include <fn_span_lib.h>
#include <fn_log.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_val_ord.h>
#include <fn_session.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>
#include <fo_view_def.h> /*** Ver 3.1 ***/
#include <ifa_app_hdr.h> /*** ver 3.3 ***/
#include <fml_def.h> /*** ver 3.3 ***/

EXEC SQL INCLUDE "table/fum_fo_undrlyng_mstr.h";
EXEC SQL INCLUDE "table/lsm_lck_sms_msg_mstr.h"; /*** Ver 3.3 ***/

#define MYMSG_AND_NOTFCN        'G' /*** Ver 3.3 ***/

char c_pipe_id[3];
char c_mtm_flag;


int fn_fut_clsout	(	char *c_ServiceName,
                    struct st_undfut_pos	*ptr_st_und_crrnt_pstn,
                    struct st_undfut_pos	*ptr_st_und_tobe_pstn,
										struct st_pstn_actn *ptr_st_pstn_actn,	
                  	char  *c_err_msg
									);

int fn_opt_clsout	(	char 		*c_ServiceName,
                    struct	st_cntopt_pos *ptr_st_opt_tobe_pstn,
										struct 	st_pstn_actn *ptr_st_pstn_actn,	
                    char  	c_drcr_flg,
                  	char  	*c_err_msg
									);

int fn_crt_spn_pstn	(	char *c_ServiceName,
											struct st_pstn_actn *ptr_st_pstn_actn,
											char 	c_drcr_flg,
											char  *c_err_msg,
											double *d_required_amount	/*** ver 3.3 ***/
										);


int fn_sum_clspos ( struct st_fcp_cntrct_pstn st_cntfut_pos,
                    struct st_undfut_pos  *ptr_st_undfut_pos
                  );

int fn_insert_report( char *c_ServiceName,
                      char *c_spn_mtch_accnt,
                      char *c_cnvrsn_rmrks,
                      char *c_status, 						/*** Ver 1.4	***/
											char *c_mrgn_typ,						/*** Ver 1.6	***/
											char  c_spl_flg,						/*** Ver 1.6  ***/
											char *c_xchng_cd,           /*** Ver 2.3  ***/
											char *c_usr_id,							/*** ver 3.3 ***/
											int  sql_lsm_sms_id,				/*** ver 3.3 ***/
                      char *c_cnvrsion_mode,			/*** ver 3.3 ***/
											double d_required_amount);	/*** ver 3.3 ***/

int fn_snd_mymsg_sms_notfcn(char *c_ServiceName,
                            FBFR32 **ptr_fml_Sbuffer,
                            char *c_user_id,
                            long l_sssn_id,
                            char *c_mtch_acc,
                            char *c_csm_msg_typ,
                            char c_msg_rqst_typ,
                            char *c_errmsg);  /*** Ver 3.3 ***/

struct st_fus_undrlyng_pstn st_undpstn_crrnt;
struct st_fus_undrlyng_pstn st_undpstn_tobe;
struct st_fus_undrlyng_pstn st_undrlyng_pstn;
struct st_fcp_cntrct_pstn st_cntrct_pstn;
struct st_pstn_actn st_pstn_actn;
struct st_pstn_actn *ptr_st_pstn_actn;
struct st_usr_prfl st_usrprfl;
struct st_err_msg *ptr_st_err_msg;
char c_extra_update='\0'; /** ver 3.6 **/
void SFO_CNV_NRM2SPN ( TPSVCINFO *rqst ) 	
{

	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

	ptr_fml_Obuf = NULL;			/*** Ver 2.8 ***/

  char  c_ServiceName[33];
	char	c_rout_crt[4];
	char 	c_clm_mtch_accnt[11];
	char  c_xchng_cd [4];
	char  c_undrlyng[7];
	char  c_cntrct_tag;
	char	c_drcr_flg;
	char 	c_rec_exst;
	char	c_trd_dt[23];
  char  c_tmp_rmrks [ 133 ] ;
	char  c_cnvrsn_rmrks[256];
	char  c_msg[256];
  char  c_tag[256];
  char  c_status[10] ;        /*** Ver 1.4 ***/
	char c_xchng_stts='\0';			/*** Ver 1.6 ***/
	char c_spl_flg='\0';				/*** Ver 1.6 ***/
	char c_spn_flg='\0';			  /*** Ver 1.6 ***/
	char c_bse_spn_flg='\0';		/*** Ver 2.3 ***/
	char c_mrgn_typ[200];				/*** Ver 1.6 ***/
	char c_nrm_flg;							/*** Ver 1.8 change introduced on 02Jul2012 ***/

  char c_txn_flg='Y';										/*** Ver 3.1 ***/
 	char c_ip_address[45+1]="\0";	/** Changed to 45 from 15 in Ver 3.5 **/		/*** Ver 3.1 ***/
	char c_psswd_req_flg = NO;						/*** Ver 3.1 ***/
  varchar c_usr_usr_psswrd[50];					/*** Ver 3.1 ***/

  int i_returncode = 0;      /*** Ver 2.5 Variable intialised ***/
  int i_trnsctn = 0 ;				 /*** Ver 2.5 Variable intialised ***/
  int i_usrprfl[7];					 /*** Ver 1.6 changed from 6 to 7 ***/
  int i_usrprflerr[7];			 /*** Ver 1.6 changed from 6 to 7 ***/
  int i = 0;								 /*** Ver 2.5 Variable intialised ***/
	int i_fut_rtr =0 ;				 /*** Ver 2.5 Variable intialised ***/
	int i_opt_rtrn = 0 ;       /*** Ver 2.5 Variable intialised ***/
	int i_opn_qty_chk = 0 ; /*** Ver 1.3 ***/
	int i_exist = 0 ;				/*** Ver 2.2 ***/
	int i_req_exist = 0;     /*** Ver 3.3 ***/

	long	l_total_qty = 0 ;			/*** Ver 2.5 Variable intialised ***/
	long	l_exectd_qty = 0;			/*** Ver 2.5 Variable intialised ***/
	long	l_cncl_qty = 0;				/*** Ver 2.5 Variable intialised ***/
	long	l_exprd_qty = 0;			/*** Ver 2.5 Variable intialised ***/
	long  l_opn_qty = 0;				/*** Ver 2.5 Variable intialised ***/	
	long	l_ibuy_qty = 0;				/*** Ver 2.5 Variable intialised ***/
	long  l_isell_qty = 0; 			/*** Ver 2.5 Variable intialised ***/
	long	l_Frcrd_exst	=	0;
	long	l_Orcrd_exst	=	0;

	double	d_diff_amv		=	0.0;
	double	d_balance_amt	=	0.0;
	double  d_diff_UTM		=	0.0;
  char c_cnvrsion_mode[8]; /*** ver 3.3 ***/
  MEMSET(c_cnvrsion_mode); /*** ver 3.3 ***/
	double d_required_amount = 0.0 ; /*** ver 3.3 ***/
	/*** Ver 2.8 starts ***/
	double d_mrgn_aft_cnv[100] = {0.0}; 
	double d_mrgn_bef_cnv[100] = {0.0}; 
	double d_totmrgn_bef_cnv = 0.0;
	double d_totmrgn_aft_cnv = 0.0;
	char   c_underlying [100][7] = {"\0"};
	MEMSET(c_underlying);
	/*** Ver 2.8 ends ***/

	MEMSET(sql_lsm_msg_txt); /*** Ver 3.3 ***/

  sql_cursor	undrlyng_cursor;

  struct 	st_usr_prfl st_usrprfl;
	struct	st_undfut_pos	st_und_Fcrrnt_pstn;				
	struct	st_undfut_pos	st_und_crrnt_pstn;				
	struct	st_undfut_pos	st_und_tobe_pstn;				
	struct	st_pstn_actn	st_actn;
	struct 	st_cntopt_pos	st_cntopt_pos_crrnt;
	struct 	st_cntopt_pos	st_cntopt_pos_tobe;
  struct 	st_err_msg st_errmsg;
	struct  vw_usr_prfl st_usrprfl_vw;		 /*** Ver 3.1 ***/
  struct  vw_err_msg st_err_msg_vw;		  /*** Ver 3.1 ***/

	EXEC SQL INCLUDE "table/usr_user_master.h";


  ptr_fml_Ibuf = (FBFR32 *)rqst->data;


  strcpy( c_ServiceName, rqst->name );

  INITDBGLVL(c_ServiceName);

	MEMSET(st_pstn_actn);
	MEMSET(st_und_Fcrrnt_pstn);  				 /*** Ver 2.5 - MEMSET ***/
	MEMSET(st_und_Fcrrnt_pstn);  /*** Ver 2.5 - MEMSET ***/
	MEMSET(st_und_crrnt_pstn);   /*** Ver 2.5 - MEMSET ***/
	MEMSET(st_und_tobe_pstn);    /*** Ver 2.5 - MEMSET ***/
	MEMSET(st_cntopt_pos_crrnt); /*** Ver 2.5 - MEMSET ***/
	MEMSET(st_cntopt_pos_tobe);  /*** Ver 2.5 - MEMSET ***/
	MEMSET(st_usrprfl_vw);	  /*** Ver 3.1 ***/
	MEMSET(st_err_msg_vw);	  /*** Ver 3.1 ***/
	MEMSET(c_usr_usr_psswrd); /*** Ver 3.1 ***/

	i_usrprfl     [ 0 ] = Fget32( ptr_fml_Ibuf ,FFO_USR_ID,0,(char *) st_usrprfl.c_user_id,0);
  i_usrprflerr  [ 0 ] = Ferror32;
  i_usrprfl     [ 1 ] = Fget32( ptr_fml_Ibuf ,FFO_SSSN_ID,0,(char *) &st_usrprfl.l_session_id,0);
  i_usrprflerr  [ 1 ] = Ferror32;
  i_usrprfl     [ 2 ] = Fget32( ptr_fml_Ibuf ,FFO_EBA_MTCH_ACT_NO,0,(char *) st_usrprfl.c_cln_mtch_accnt,0);
  i_usrprflerr  [ 2 ] = Ferror32;
  i_usrprfl     [ 3 ] = Fget32( ptr_fml_Ibuf ,FFO_DR_CR_FLG,0,(char *)&c_drcr_flg,0);
  i_usrprflerr  [ 3 ] = Ferror32;
  i_usrprfl     [ 4 ] = Fget32( ptr_fml_Ibuf ,FFO_ROUT_CRT,0,(char *) st_usrprfl.c_rout_crt,0);
  i_usrprflerr  [ 4 ] = Ferror32;
  i_usrprfl     [ 5 ] = Fget32( ptr_fml_Ibuf ,FFO_XCHNG_CD,0,(char *)c_xchng_cd ,0);
  i_usrprflerr  [ 5 ] = Ferror32;
  i_usrprfl     [ 6 ] = Fget32( ptr_fml_Ibuf ,FFO_SPL_FLG,0,(char *)&c_spl_flg ,0);			/*** Ver 1.6 ***/
  i_usrprflerr  [ 6 ] = Ferror32;																												/*** Ver 1.6 ***/

  for ( i=0 ; i < 7  ; i++ )  /*** Ver 1.6 changed from 5 to 7 ***/
  {
  	if ( i_usrprfl [ i ] == -1 && i_usrprflerr [ i ] !=  FNOTPRES )
    {
      fn_userlog( c_ServiceName, "Error in :%d:",i );
      fn_errlog( c_ServiceName, "S31005", Fstrerror32( i_usrprflerr [i]),c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
  }

	/*** Ver 1.6 starts here ***/
	/*** Commented in Ver 3.1 ***
	i_returncode = chk_sssn(c_ServiceName,st_usrprfl.c_user_id,st_usrprfl.l_session_id,c_err_msg);
	***/

	/*** Ver 3.1 starts ***/
	memcpy(&st_usrprfl_vw,&st_usrprfl,sizeof(st_usrprfl_vw));
		
	i_returncode =  fn_check_user_ip	(	c_ServiceName,
																			&st_usrprfl_vw ,
																			c_usr_usr_psswrd.arr,  
																			c_psswd_req_flg,
																			c_ip_address,
																			c_txn_flg,                
																			&st_err_msg_vw 
																	);
	/*** Ver 3.1 ends ***/

  if(i_returncode ==  -1)
  {
		 fn_userlog(c_ServiceName,"Session Timed Out");
     fn_errlog(c_ServiceName,"S31010", LIBMSG, c_err_msg);
     strcpy(c_err_msg,"Session Timed Out");
     Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if ( i_usrprfl [ 6 ] == -1 && i_usrprflerr [ 6 ] ==  FNOTPRES )
	{
		fn_userlog( c_ServiceName, "*** BACKEND CALL ***");
		c_spl_flg = 'B';
	}
	else if (c_spl_flg == 'C') /*** else if loop added in Ver 2.8 ***/
	{
		fn_userlog( c_ServiceName, "*** CONVERSION CAL CALLED FROM TRADING SCREEN ***");
	}	
	else if (c_spl_flg == 'K') /*** else if loop added in Ver 3.3 ***/
	{
		fn_userlog( c_ServiceName, "*** CALLED FROM HOUSEKEEP ***");
	}	
	else if (c_spl_flg == 'A') /*** else if loop added in Ver 3.3 ***/
	{
		fn_userlog( c_ServiceName, "*** CALLED FROM CRON ***");
	}	
	else
	{
		fn_userlog( c_ServiceName, "*** FRONTEND CALL ***");
	}

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog( c_ServiceName, "c_spl_flg = :%c:",c_spl_flg);
	}
	/*** Ver 1.6 ends here ***/


	if(DEBUG_MSG_LVL_0)
	{
  	fn_userlog( c_ServiceName, "Nrml2SPAN User id       :%s:",st_usrprfl.c_user_id );
  	fn_userlog( c_ServiceName, "Nrml2SPAN Session id    :%ld:", st_usrprfl.l_session_id );
  	fn_userlog( c_ServiceName, "Nrml2SPAN Match Account :%s:", st_usrprfl.c_cln_mtch_accnt );
  	fn_userlog( c_ServiceName, "Nrml2SPAN Rout CRT :%s:", st_usrprfl.c_rout_crt);
  	fn_userlog( c_ServiceName, "Nrml2SPAN Exchange Code :%s:",c_xchng_cd );
	}
	
  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	strcpy(c_clm_mtch_accnt,st_usrprfl.c_cln_mtch_accnt);

	/*** Ver 1.9 Customer can convert to SPAN when the market is in closed state ***/

	if (c_spl_flg != 'C') /*** if condition added in Ver 2.8 ***/
	{
	EXEC SQL
      SELECT  EXG_CRRNT_STTS
      INTO    :c_xchng_stts
      FROM    EXG_XCHNG_MSTR
      WHERE   EXG_XCHNG_CD  = :c_xchng_cd;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName,"S31015", SQLMSG, c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    /*** commented in ver 3.3 ****
    if ( c_xchng_stts != EXCHANGE_CLOSE )
    {
      fn_userlog(c_ServiceName,"This facility is available in closed market hours only."); 
			fn_errlog( c_ServiceName, "S31020",LIBMSG, c_err_msg );
      ** Commented in ver 2.0 
			strcpy(c_err_msg,"This facility is available in closed market hours only.Please try again after market closed.");
		  ************************************
			**** Commented in ver 3.2 ****
			strcpy(c_err_msg,"This facility is available when market is under 'Closed' status. Please view Buy/Sell order entry page to refer market status and try again later.");			*** Ver 2.0 ***  ****
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			strcpy(c_err_msg,"This facility is available after the completion of end of day process.");** Added in Ver 3.2 **
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    } *** ver 3.3 comment ends ***/
		/*** Added in Ver 3.3 starts ***/
		if ( c_xchng_stts == EXCHANGE_CLOSE )
		{
				strcpy( c_cnvrsion_mode,"ONLINE");
		}
		else
		{
			strcpy( c_cnvrsion_mode,"OFFLINE");
		}
		/*** Added in Ver 3.3 ends ***/
	} /*** Ver 2.8 ***/
	/*** Ver 1.9 Check ends ***/ 

	/*** Ver 1.6 starts here ***/
	/** if (c_spl_flg == 'F') *** FrontEnd Call *** Commented In Ver 2.6 ***/
	if (c_spl_flg == 'F' || c_spl_flg == 'S' || c_spl_flg == 'K' || c_spl_flg == 'A'  ) /*** Ver 2.6 FrontEnd Call or Silverlight Front-End Call ***/ /*** Ver 3.3 Housekeep or Cron call added ***/
	{
		/*** Commented in ver 1.9 ********************
		EXEC SQL
			SELECT	EXG_CRRNT_STTS
			INTO		:c_xchng_stts
			FROM    EXG_XCHNG_MSTR
			WHERE   EXG_XCHNG_CD  = :c_xchng_cd;

		if ( SQLCODE != 0 )
		{
			fn_errlog(c_ServiceName,"S31025", SQLMSG, c_err_msg);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if ( c_xchng_stts == EXCHANGE_OPEN )
		{
			fn_userlog(c_ServiceName,"This facility is available only during non market hours. Please try again after market hours.");
			fn_errlog( c_ServiceName, "S31030",LIBMSG, c_err_msg );
			strcpy(c_err_msg,"This facility is available only during non market hours. Please try again after market hours.");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		****************** Ver 1.9 ends ********************************************************/

		MEMSET(c_cnvrsn_rmrks); 
	  MEMSET(c_status);   
		MEMSET(c_mrgn_typ); 
	 	
		EXEC SQL
			SELECT  NVL(CLM_SPAN_ALLWD,'N'),
							NVL(CLM_BSESPAN_ALLWD,'N')	/*** Ver 2.3 ***/
			INTO    :c_spn_flg,
							:c_bse_spn_flg							/*** Ver 2.3 ***/
			FROM    CLM_CLNT_MSTR
			WHERE   CLM_MTCH_ACCNT  = :c_clm_mtch_accnt;

		if ( SQLCODE != 0 )
		{
			fn_userlog( c_ServiceName, "Failed To select SPAN Flag For Match Account :%s:",c_clm_mtch_accnt);
			fn_errlog( c_ServiceName, "S31035",SQLMSG, c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		/*** Ver 1.8 change introduced on 02Jul2012 starts here ***/
		EXEC SQL
			SELECT	USR_FNO_ACCPT_FLG
			INTO		:c_nrm_flg
			FROM		USR_USER_MASTER
			WHERE   USR_USR_ID  = (		SELECT  UAC_USR_ID
																FROM    UAC_USR_ACCNTS
																WHERE   UAC_CLM_MTCH_ACCNT  = :c_clm_mtch_accnt
														);

		if ( SQLCODE != 0 )		
		{
			fn_userlog( c_ServiceName, "Failed To select USR flag For Match Account :%s:",c_clm_mtch_accnt);
			fn_errlog( c_ServiceName, "S31040",SQLMSG, c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if ( c_nrm_flg == 'N' || c_nrm_flg == 'V')			/***	Ver	2.1 V Flag Added	***/
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); /*** Ver 3.3 ***/
      fn_errlog( c_ServiceName, "B31017",DEFMSG,c_err_msg);  /** Ver 2.7 **/
      /** Ver 2.7 Starts here *****
			fn_errlog( c_ServiceName, "S31045",LIBMSG, c_err_msg );
      ********** Ver 2.7 ***/
			fn_userlog(c_ServiceName,"Cant convert as FNO TNC not accepted.");
			/*** strcpy(c_err_msg,"Cant convert as FNO TNC not accepted.");  *** Commented in Ver 3.3 ***/
			strcpy  ( c_cnvrsn_rmrks, "Cant convert as FNO TNC not accepted.");
			strcpy  ( c_status, "FAIL"); 
			strcpy	( c_mrgn_typ,"Non SPAN (Existing I-Sec) Margining");
	    /*** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); *** Commented and taken above in Ver 3.3 ***/
			i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg,c_xchng_cd,st_usrprfl.c_user_id,0,c_cnvrsion_mode,d_required_amount);	/*** Ver 2.3 c_xchng_cd added ***//*** ver 3.3 ***/
		  if (i_returncode != 0)
			{
				fn_userlog(c_ServiceName,"Failed to Insert in Report Table ");
			}
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 ); 
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		/*** Ver 1.8 change introduced on 02Jul2012  Ends here ***/
		
		/*** if ( c_spn_flg == 'Y' )	Ver 1.8 change introduced on 02Jul2012 ***/
	/*	if ( (c_spn_flg == 'Y') || (c_spn_flg == 'Z') )	*** Ver 1.8 change introduced on 02Jul2012 ***/  /** Ver 2.3 comment ***/
		if ( ((c_spn_flg == 'Y') || (c_spn_flg == 'Z')) && strcmp(c_xchng_cd,"NFO")== 0 )/** Ver 2.3 **/
		{
			fn_errlog( c_ServiceName, "S31050",LIBMSG, c_err_msg );
			fn_userlog(c_ServiceName,"Please note you are already mapped to SPAN margin.");
			strcpy(c_err_msg,"Please note you are already mapped to SPAN margin.");
			strcpy  ( c_cnvrsn_rmrks, "NORMAL To SPAN : Match Account Is Already Mapped Under SPAN.");
			strcpy  ( c_status, "FAIL"); 
			strcpy	( c_mrgn_typ,"SPAN Based Margining");
	    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg,c_xchng_cd,st_usrprfl.c_user_id,0,c_cnvrsion_mode,d_required_amount);					/*** Ver 2.3 c_xchng_cd added ***//***ver 3.3 ***/
		  if (i_returncode != 0)
			{
				fn_userlog(c_ServiceName,"Failed to Insert in Report Table ");
			}
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		if ( c_bse_spn_flg == 'Y'  && strcmp(c_xchng_cd,"BFO")== 0 )/** Ver 2.3  starts **/
		{
			fn_errlog( c_ServiceName, "S31055",LIBMSG, c_err_msg );
			fn_userlog(c_ServiceName,"Please note you are already mapped to SPAN margin in BSE.");
			strcpy(c_err_msg,"Please note you are already mapped to SPAN margin in BSE.");
			strcpy  ( c_cnvrsn_rmrks, "NORMAL To SPAN : Match Account Is Already Mapped Under SPAN BSE.");
			strcpy  ( c_status, "FAIL"); 
			strcpy	( c_mrgn_typ," BSE SPAN Based Margining");
	    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg , c_xchng_cd,st_usrprfl.c_user_id,0,c_cnvrsion_mode,d_required_amount);/*** ver 3.3 **/
		  if (i_returncode != 0)
			{
				fn_userlog(c_ServiceName,"Failed to Insert in Report Table ");
			}
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}		/** Ver 2.3 Ends ***/
	}
	/*** Ver 1.6 ends here ***/

  /*** ver 3.3 starts ***/
  if( strcmp(c_cnvrsion_mode,"OFFLINE")== 0 && ( c_spl_flg == 'F' || c_spl_flg == 'S' || c_spl_flg == 'H' ) ) /*** Front End Call And OFFLINE Mode Log The request and return ***/
  {
			fn_userlog(c_ServiceName,"Request for NORMAL To SPAN conversion");
	    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );

			EXEC SQL
			SELECT count(0)
			INTO   :i_req_exist
			FROM   FSC_SPNNRML_CNV
			WHERE  FSC_CNVRSN_TIME >= (SELECT to_date(MAX(FBC_TRD_DT) || ' 09:15:00','DD-Mon-YYYY HH24:Mi:SS') 
																	FROM		FBC_FO_BRNCH_CAL 
																	WHERE	FBC_XCHNG_CD=:c_xchng_cd 
																	AND		FBC_TRD_DT < (SELECT EXG_NXT_TRD_DT FROM EXG_XCHNG_MSTR WHERE EXG_XCHNG_CD = :c_xchng_cd) 
																	AND		FBC_GRP_ID=1 
																	AND		FBC_BRANCH='0004' 
																 )
			AND  FSC_XCHNG_CD = :c_xchng_cd
			AND  FSC_CLM_MTCH_ACCNT = :c_clm_mtch_accnt
			AND  FSC_MODE = 'OFFLINE'
			AND  FSC_CNVRSN_RMRKS in ('Request for NORMAL To SPAN conversion')
			AND  FSC_CNVRSN_STTS in ('PENDING','FAIL');

			if ( SQLCODE != 0 )
			{
				fn_errlog( c_ServiceName, "S31060",SQLMSG, c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			if(i_req_exist == 0 )
			{
				strcpy( c_status,"PENDING");
				strcpy( c_mrgn_typ,"Non SPAN (Existing I-Sec) Margining");
				strcpy ( c_cnvrsn_rmrks,"Request for NORMAL To SPAN conversion"); 

				i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg,c_xchng_cd,st_usrprfl.c_user_id,126,c_cnvrsion_mode,d_required_amount);

				if (i_returncode != 0)
				{
					fn_userlog(c_ServiceName,"Failed to Insert in Report Table ");
					fn_errlog(c_ServiceName,"S31065", LIBMSG, c_err_msg);
					strcpy(c_err_msg,"Could not log your request");
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
	 
				strcpy(c_err_msg,"Your request has been placed and will be processed for conversion after end of day processing tentatively around or after 11pm. You may please check your \'my message\' updated with success  or failure for this conversion request. Please note that your conversion request may get rejected due to following reasons:a. Pending orders in Order Book. b. Insufficient Limits");    
			}
			else
			{
				strcpy(c_err_msg,"Your request has been already placed. You may please check your \'my message\'.");    
			}

	    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }
  /*** ver 3.3 ends ***/  


	/*** Ver 1.1 ***/

	MEMSET(l_total_qty);
	MEMSET(l_exectd_qty);
	MEMSET(l_cncl_qty);
	MEMSET(l_exprd_qty);

	/*** Ver 1.1 ***/

	MEMSET(c_cnvrsn_rmrks); /*** Ver 1.4 ***/
  MEMSET(c_status);       /*** Ver 1.4 ***/
	MEMSET(c_mrgn_typ);			/*** Ver 1.6 ***/

	EXEC SQL
		SELECT	NVL(SUM(FOD_ORDR_TOT_QTY),0),
						NVL(SUM(FOD_EXEC_QTY),0),
						NVL(SUM(FOD_CNCL_QTY),0),
						NVL(SUM(FOD_EXPRD_QTY),0)
		INTO		:l_total_qty,
						:l_exectd_qty,
						:l_cncl_qty,
						:l_exprd_qty
		FROM		FOD_FO_ORDR_DTLS
		WHERE		FOD_CLM_MTCH_ACCNT	=	:c_clm_mtch_accnt
		AND			FOD_XCHNG_CD				=	:c_xchng_cd
    AND     FOD_ORDR_STTS     IN ('R','O','P');
	if( SQLCODE != 0	&&	SQLCODE !=	NO_DATA_FOUND )
	{
		fn_userlog( c_ServiceName, "Failed To Get Qty Details From Order Book.");
		fn_errlog( c_ServiceName, "S31070",SQLMSG, c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );		/** Ver 1.4	***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

	}
	
	if(DEBUG_MSG_LVL_3)
	{					
		fn_userlog(c_ServiceName,"Nrml2SPAN Total Qty Is :%ld:",l_total_qty);
		fn_userlog(c_ServiceName,"Nrml2SPAN Executed Qty Is :%ld:",l_exectd_qty);
		fn_userlog(c_ServiceName,"Nrml2SPAN Cancel Qty Is :%ld:",l_cncl_qty);
		fn_userlog(c_ServiceName,"Nrml2SPAN Expired Qty Is :%ld:",l_exprd_qty);
	}
	
	if (	l_total_qty > (	l_exectd_qty + l_cncl_qty + l_exprd_qty	)	)
	{
		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Can't Convert To SPAN As Pending Order Exist.");
		}
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); /*** Ver 3.3 taken up ***/
		/*** strcpy(c_err_msg,"Can't Convert To SPAN As Pending Order Exist."); Commented in Ver 1.6 ***/
		fn_errlog( c_ServiceName, "S31075",LIBMSG,c_err_msg );	/*** Ver 1.6 changed from SQLMSG to LIBMSG ***/
		/*** strcpy(c_err_msg,"Please try after some time as there is an order pending and expiry process is underway.");	*** Ver 1.6 *** Commented in Ver 3.3 ***/
		strcpy(c_err_msg,"Your F&O margining conversion request has been rejected due to pending order in your account. Please cancel the same and try again.");	/*** Ver 3.3 ***/
		/*** Ver 1.4 ***/
   	strcpy(c_cnvrsn_rmrks,"Can't Convert To SPAN As Pending Order Exist.");
    strcpy(c_status,"FAIL");  /*** Ver 1.2 ***/
		strcpy	( c_mrgn_typ,"Non SPAN (Existing I-Sec) Margining");	/*** Ver 1.6 ***/
   	/*** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); *** Commented in Ver 3.3 ***/
    /*i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status);*/				/*** Ver 1.6 ***/
    /*** i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg,c_xchng_cd);  *** Ver 1.6***      *** Ver 2.3 c_xchng_cd added *** Commented in Ver 3.3 ***/
		/*** Ver 3.3 starts ***/
		if ( strcmp(c_cnvrsion_mode,"OFFLINE") == 0 && ( c_spl_flg == 'K' ) )
		{
				i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg,c_xchng_cd,st_usrprfl.c_user_id,127,c_cnvrsion_mode,d_required_amount);	
		}
		else
		{
				i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg,c_xchng_cd,st_usrprfl.c_user_id,131,c_cnvrsion_mode,d_required_amount);	
		}
		/*** Ver 3.3 ends ***/
    if (i_returncode != 0)
    {
      fn_userlog(c_ServiceName,"Failed to Insert in Report Table ");
    }

    /*** Ver 1.4 ***/ 
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,(char*) c_err_msg, 0 );
 		/*** Commented in Ver 1.6 
		sprintf (c_msg,"Can't Convert To SPAN As Pending Order Exist In NORMAL :%s:",c_clm_mtch_accnt);
    fn_bat_pst_msg_fno (c_ServiceName, c_msg, c_tag ); ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	EXEC SQL
		SELECT	NVL(SUM(FUP_UOPNPSTN_QTY),0),
					 	NVL(SUM(FUP_UIBUY_QTY),0),
					 	NVL(SUM(FUP_UISELL_QTY),0)
		INTO	 	:l_opn_qty,
						:l_ibuy_qty,
						:l_isell_qty
		FROM		FUP_FUT_UNDRLYNG_PSTN
		WHERE		FUP_CLM_MTCH_ACCNT	=	:c_clm_mtch_accnt	
		AND			FUP_XCHNG_CD				=	:c_xchng_cd
		AND			FUP_PRDCT_TYP				=	'P';

	if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_userlog( c_ServiceName, "Failed To Get Future Plus Records.");
    fn_errlog( c_ServiceName, "S31080",SQLMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

  }

	if ( l_opn_qty != 0 || l_ibuy_qty != 0 || l_isell_qty != 0 )
	{
		fn_userlog(c_ServiceName,"Can't Convert To SPAN As Future Plus Order Exist.");
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); /*** Ver 3.3  taken up ***/
    /*** strcpy(c_err_msg,"Can't Convert To SPAN As Future Plus Order Exist."); *** Commented in Ver 3.3 ***/
    fn_errlog( c_ServiceName, "S31085",LIBMSG,c_err_msg );		/*** Ver 1.6 changed from SQLMSG to LIBMSG ***/
		strcpy(c_err_msg,"Your F&O margining conversion request has been rejected due to pending FuturePlus order/position in your account. Please cancel the same and try again."); /*** Ver 3.3 ***/
    /*** Ver 1.4 ***/
    strcpy(c_cnvrsn_rmrks,"Can't Convert To SPAN As Future Plus Exist.");
    strcpy(c_status,"FAIL");  /*** Ver 1.2 ***/
		strcpy	( c_mrgn_typ,"Non SPAN (Existing I-Sec) Margining");	/*** Ver 1.6 ***/
    /*** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); *** Commented in Ver 3.3 ***/
    /*i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status);*/				/*** Ver 1.6 ***/
		/*** i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg , c_xchng_cd);		*** Ver 1.6 ***  *** Ver 2.3 c_xchng_cd added *** Commented in Ver 3.3 ***/
		/*** Ver 3.3 starts ***/
		if ( strcmp(c_cnvrsion_mode,"OFFLINE") == 0 && ( c_spl_flg == 'K' ) )
		{
				i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg,c_xchng_cd,st_usrprfl.c_user_id,128,c_cnvrsion_mode,d_required_amount);	
		}
		else
		{
				i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg,c_xchng_cd,st_usrprfl.c_user_id,132,c_cnvrsion_mode,d_required_amount);	
		}
		/*** Ver 3.3 ends ***/
    if (i_returncode != 0)
    {
      fn_userlog(c_ServiceName,"Failed to Insert in Report Table ");
    }
    /*** Ver 1.4 ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,(char*) c_err_msg, 0 );
 		sprintf (c_msg,"Can't Convert To SPAN As Future Plus Order Exist :%s:.",c_clm_mtch_accnt);
    fn_bat_pst_msg_fno (c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

	} 


	/*** Ver 1.3 Starts *** -- As per Discussion with Vishal G on 09-May-2012 , this check has been commented

	EXEC SQL                                                        
	SELECT 1                                                        
	INTO  :i_opn_qty_chk
	FROM  DUAL                                                      
	WHERE EXISTS ( 	SELECT 1 FROM   FFP_FO_FUTURES_PSTN              
	   							WHERE FFP_CLM_MTCH_ACCNT   = :c_clm_mtch_accnt   
	   							AND    FFP_XCHNG_CD        = :c_xchng_cd         
	   							AND    FFP_OPNPSTN_QTY     !=0                   
	   							UNION                                            
	   							SELECT 1 FROM   FOP_FO_OPTIONS_PSTN              
	   							WHERE  FOP_CLM_MTCH_ACCNT  = :c_clm_mtch_accnt   
	   							AND    FOP_XCHNG_CD        = :c_xchng_cd         
	   							AND   FOP_OPNPSTN_QTY !=0                        
                                                                
             		);   

	if ( i_opn_qty_chk != 0 )
  {
    fn_userlog(c_ServiceName,"Can't Convert To SPAN As Open Position Exists.");
    strcpy(c_err_msg,"Can't Convert To SPAN As Open Position Exists..");
    fn_errlog( c_ServiceName, "S31090",SQLMSG,c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,(char*) c_err_msg, 0 );
    sprintf (c_msg,"Can't Convert To SPAN As  Open Position Exists For :%s:.",c_clm_mtch_accnt);
    fn_bat_pst_msg_fno (c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

  }                                              

	*** Ver 1.3 Ends   ***/


	/*** Ver 1.6 starts here ***/
	/*** if (c_spl_flg == 'F') *** Front end call *** Commented In Ver 2.6 ***/
	if (c_spl_flg == 'F' || c_spl_flg == 'S' || c_spl_flg == 'C' ) /*** Ver 2.6  Front end call or Silverlight Front-end Call ***//*** Conversion flag added Ver 2.8 ***/
	{
		EXEC SQL
			SELECT	PAR_FO_DRCR_FLG
			INTO		:c_drcr_flg
			FROM		PAR_SYSTM_PRMTR;

		if ( SQLCODE != 0 )
		{
			fn_userlog(c_ServiceName,"Error While Selecting DRCR Flag.");
			fn_errlog( c_ServiceName, "S31095", SQLMSG, c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		fn_userlog(c_ServiceName,"c_drcr_flg = :%c: ",c_drcr_flg);
	}
	/*** Ver 1.6 ends here ***/

	if ( c_spl_flg == 'C' )	/*** if loop added in Ver 2.8 ***/
	{
		MEMSET(d_mrgn_bef_cnv);
		MEMSET(c_underlying);
		d_totmrgn_bef_cnv = 0.0;

		ptr_fml_Obuf = NULL;			
	
		ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*100);
		if ( ptr_fml_Obuf == NULL )
		{
			fn_errlog( c_ServiceName, "S31100", TPMSG, c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		EXEC SQL 
			SELECT NVL(SUM (margin),0),
						 undrlyng
			INTO	:d_mrgn_bef_cnv,
						:c_underlying
			FROM
			(
				SELECT	SUM( FUP_UTRD_MRGN + FUP_UORDR_MRGN + FUP_ADD_MRGN_VAL )	margin,
							 FUP_UNDRLYNG undrlyng
				FROM	 FUP_FUT_UNDRLYNG_PSTN
				WHERE  FUP_CLM_MTCH_ACCNT		=	:c_clm_mtch_accnt	
				AND		 FUP_XCHNG_CD					= :c_xchng_cd
				GROUP BY FUP_UNDRLYNG
				UNION ALL
				SELECT SUM( FOP_UEXCTD_MRGN + FOP_UORDR_MRGN ) margin,
							 FOP_UNDRLYNG undrlyng
				FROM	 FOP_FO_OPTIONS_PSTN
				WHERE  FOP_CLM_MTCH_ACCNT		=	:c_clm_mtch_accnt	
				AND		 FOP_XCHNG_CD					= :c_xchng_cd
				GROUP BY FOP_UNDRLYNG
				UNION ALL
				SELECT SUM( FOD_AMT_BLCKD + FOD_LSS_AMT_BLCKD )  margin,
               FOD_UNDRLYNG undrlyng
      	FROM   FOD_FO_ORDR_DTLS
      	WHERE  FOD_CLM_MTCH_ACCNT   =   :c_clm_mtch_accnt
      	AND    FOD_XCHNG_CD         =   :c_xchng_cd
      	AND    FOD_PRDCT_TYP        in  ('U','I')
      	GROUP BY FOD_UNDRLYNG
			)
			GROUP BY undrlyng
			HAVING NVL(SUM (margin),0) > 0
			ORDER BY undrlyng;

		if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
		{
			tpfree((char *)ptr_fml_Obuf);
			fn_userlog(c_ServiceName,"Error While Selecting Margin Blocked.");
			fn_errlog( c_ServiceName, "S31105", SQLMSG, c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		fn_userlog(c_ServiceName,"Count of records :%d:",sqlca.sqlerrd[2]);
		
		for (i=0; i < sqlca.sqlerrd[2] ; i++ )
		{
			d_totmrgn_bef_cnv = d_totmrgn_bef_cnv + d_mrgn_bef_cnv[i];
		}

		fn_userlog(c_ServiceName,"Total margin before conversion = :%lf:",d_totmrgn_bef_cnv);

		if ( Fadd32 (ptr_fml_Obuf,FFO_UNDRLYNG,"ALL",0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31110", FMLMSG, c_err_msg  );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			tpfree((char *)ptr_fml_Obuf);
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if ( Fadd32 (ptr_fml_Obuf,FFO_C_BLKD_TRD_MRGN,(char *)&d_totmrgn_bef_cnv,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31115", FMLMSG, c_err_msg  );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			tpfree((char *)ptr_fml_Obuf);
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		for (i=0; i < sqlca.sqlerrd[2] ; i++ )
		{
			fn_userlog(c_ServiceName,"Margin before conversion = :%s:%lf: ",c_underlying[i],d_mrgn_bef_cnv[i]);

			if ( Fadd32 (ptr_fml_Obuf,FFO_UNDRLYNG,(char *) c_underlying[i],0)  ==  -1 )
			{
				fn_errlog( c_ServiceName, "S31120", FMLMSG, c_err_msg  );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
				tpfree((char *)ptr_fml_Obuf);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			if ( Fadd32 (ptr_fml_Obuf,FFO_C_BLKD_TRD_MRGN,(char *)&d_mrgn_bef_cnv[i],0)  ==  -1 )
			{
				fn_errlog( c_ServiceName, "S31125", FMLMSG, c_err_msg  );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
				tpfree((char *)ptr_fml_Obuf);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}		 
	}

	EXEC SQL ALLOCATE	:undrlyng_cursor;

	EXEC SQL EXECUTE
		BEGIN
			OPEN		:undrlyng_cursor	FOR
			SELECT	DISTINCT FUP_UNDRLYNG
			FROM		FUP_FUT_UNDRLYNG_PSTN	
			WHERE		FUP_CLM_MTCH_ACCNT	 =	:c_clm_mtch_accnt	
			AND			FUP_PRDCT_TYP				 =	'F'
    	AND     FUP_XCHNG_CD         = :c_xchng_cd
			AND		( FUP_UTRD_MRGN				!=	0
			OR			FUP_USPREAD_MRGN		!=	0
			OR      FUP_UOPNPSTN_QTY		!=  0 )		/*** Ver 2.2 ***/
			UNION
			SELECT	DISTINCT FOP_UNDRLYNG
			FROM		FOP_FO_OPTIONS_PSTN
			WHERE		FOP_CLM_MTCH_ACCNT	=	:c_clm_mtch_accnt
    	AND     FOP_XCHNG_CD        = :c_xchng_cd
			AND		(	FOP_UEXCTD_MRGN	!=	0
			OR			FOP_OPNPSTN_VAL	!=	0	
			OR      FOP_OPNPSTN_QTY !=  0 );		  /*** Ver 2.2 ***/
		END;
	END-EXEC;

	if( SQLCODE != 0 )
  {
    fn_userlog( c_ServiceName, "Failed To Get Future Records.");
    fn_errlog( c_ServiceName, "S31130",SQLMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/ 
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

  }

	while(1)
	{
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Inside Main While loop.");
		}

		EXEC SQL FETCH	:undrlyng_cursor
			INTO					:c_undrlyng;

		if( SQLCODE != 0	) 
  	{
			if ( SQLCODE == NO_DATA_FOUND )
			{
				break;
			}

    	EXEC SQL FREE :undrlyng_cursor;
    	fn_userlog( c_ServiceName, "Failed To Get Future Records.");
    	fn_errlog( c_ServiceName, "S31135",SQLMSG, c_err_msg );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"After Undrlying Fetch.");
		}
		rtrim(c_undrlyng);

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName," Underlying Is :%s:",c_undrlyng);
			fn_userlog(c_ServiceName," Match Account Is :%s:",c_clm_mtch_accnt);
		}

		EXEC SQL DECLARE	fut_cursor CURSOR FOR
				SELECT	FUP_CLM_MTCH_ACCNT,
        	   		FUP_XCHNG_CD,
            		FUP_PRDCT_TYP,
            		FUP_INDSTK,
            		FUP_UNDRLYNG,
            		FUP_CNTRCT_TAG,
            		FUP_UIBUY_QTY,
            		FUP_UIBUY_VAL,
            		FUP_UISELL_QTY,
            		FUP_UISELL_VAL,
            		FUP_UEXBUY_QTY,
            		FUP_UEXBUY_VAL,
            		FUP_UEXSELL_QTY,
            		FUP_UEXSELL_VAL,
            		FUP_UBUY_EXCTD_QTY,
            		FUP_USELL_EXCTD_QTY,
            		FUP_UOPNPSTN_FLW,
            		FUP_UOPNPSTN_QTY,
            		FUP_UOPNPSTN_VAL,
            		FUP_UMTM_OPN_VAL,
            		FUP_ADD_MRGN_VAL,
            		FUP_UORDR_MRGN,
            		FUP_UEXCTD_MRGN,
            		FUP_USPREAD_MRGN,
            		FUP_USPREAD_PNL,
            		FUP_UTRD_MRGN,
            		NVL(FUP_MTM_FLG,'O'),
            		NVL(FUP_UMIN_TRD_MRGN,0),
								FUP_TRD_DT
    		FROM    FUP_FUT_UNDRLYNG_PSTN
    		WHERE   FUP_CLM_MTCH_ACCNT  = :c_clm_mtch_accnt
				AND			FUP_UNDRLYNG				=	:c_undrlyng
      	AND     FUP_XCHNG_CD        = :c_xchng_cd
				AND			FUP_PRDCT_TYP				=	'F'
				AND		(	FUP_UTRD_MRGN     	!=  0
				OR      FUP_USPREAD_MRGN  	!=  0	
				OR      FUP_UOPNPSTN_QTY		!=  0 )		/*** Ver 2.2 ***/
				FOR UPDATE OF FUP_CLM_MTCH_ACCNT;

		if( SQLCODE != 0  &&  SQLCODE !=  NO_DATA_FOUND )
  	{
			EXEC SQL FREE :undrlyng_cursor;
    	fn_userlog( c_ServiceName, "Failed To Get Future Records.");
    	fn_errlog( c_ServiceName, "S31140",SQLMSG, c_err_msg );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/ 
   		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

		EXEC SQL	OPEN	fut_cursor;

		while ( 1 )
		{
			
			l_Frcrd_exst = 0 ; /** Ver 1.1 **/

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Inside Future While Loop.");
			}

			EXEC SQL FETCH	fut_cursor	
							 INTO 	:st_und_Fcrrnt_pstn.c_cln_mtch_accnt,
 											:st_und_Fcrrnt_pstn.c_xchng_cd,
 											:st_und_Fcrrnt_pstn.c_prd_typ,
 											:st_und_Fcrrnt_pstn.c_ctgry_indstk,
 											:st_und_Fcrrnt_pstn.c_undrlyng,
 											:st_und_Fcrrnt_pstn.c_cntrct_tag,
 											:st_und_Fcrrnt_pstn.l_ibuy_qty,
 											:st_und_Fcrrnt_pstn.d_ibuy_ord_vl,
 											:st_und_Fcrrnt_pstn.l_isell_qty,
 											:st_und_Fcrrnt_pstn.d_isell_ord_vl,
 											:st_und_Fcrrnt_pstn.l_exbuy_qty,
 											:st_und_Fcrrnt_pstn.d_exbuy_ord_vl,
 											:st_und_Fcrrnt_pstn.l_exsell_qty,
 											:st_und_Fcrrnt_pstn.d_exsell_ord_vl,
 											:st_und_Fcrrnt_pstn.l_buy_exctd_qty,
 											:st_und_Fcrrnt_pstn.l_sell_exctd_qty,
 											:st_und_Fcrrnt_pstn.c_opnpstn_flw,
 											:st_und_Fcrrnt_pstn.l_opnpstn_qty,
 											:st_und_Fcrrnt_pstn.d_org_opn_val,
 											:st_und_Fcrrnt_pstn.d_mtm_opn_val,
 											:st_und_Fcrrnt_pstn.d_add_mrgn_val,
 											:st_und_Fcrrnt_pstn.d_ordr_mrgn,
 											:st_und_Fcrrnt_pstn.d_exctd_mrgn,
 											:st_und_Fcrrnt_pstn.d_sprd_mrgn,
 											:st_und_Fcrrnt_pstn.d_sprd_pl,
 											:st_und_Fcrrnt_pstn.d_trd_mrgn,
 											:c_mtm_flag,
 											:st_und_Fcrrnt_pstn.d_mm_trd_mrgn,
											:c_trd_dt;

			if ( SQLCODE !=	0	)
			{
				if ( SQLCODE == NO_DATA_FOUND )
				{
					break;
				}

				EXEC SQL FREE :undrlyng_cursor;
				fn_userlog( c_ServiceName, "Failed To Fetch Future Records.");
				fn_errlog( c_ServiceName, "S31145",SQLMSG, c_err_msg );
	    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/	
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			EXEC SQL
				SELECT	1
				INTO		:l_Frcrd_exst
				FROM		FUS_FO_UNDRLYNG_SPN_PSTN
				WHERE		FUS_CLM_MTCH_ACCNT	=	:st_und_Fcrrnt_pstn.c_cln_mtch_accnt
				AND			FUS_XCHNG_CD				=	:st_und_Fcrrnt_pstn.c_xchng_cd
				AND			FUS_UNDRLYNG				=	:st_und_Fcrrnt_pstn.c_undrlyng;

			if ( SQLCODE !=	0	&& SQLCODE != NO_DATA_FOUND	)
			{
				
        EXEC SQL FREE :undrlyng_cursor;
        fn_userlog( c_ServiceName, "Failed To Fetch Future Records.");
        fn_errlog( c_ServiceName, "S31150",SQLMSG, c_err_msg );
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/
	      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			if (	SQLCODE == NO_DATA_FOUND	)
			{
				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"NRML2SPAN	Inside No Data Found Case .");
				}
				c_rec_exst	=	'N'	;

				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"NRML2SPAN Record Exist Flag  Is :%c:",c_rec_exst);
				}
			}
	
			if ( l_Frcrd_exst == 1 )
			{
				c_rec_exst	=	'Y';
	
			}

			strcpy(st_undpstn_tobe.c_cln_mtch_accnt,st_und_Fcrrnt_pstn.c_cln_mtch_accnt);
			strcpy(st_undpstn_tobe.c_xchng_cd,st_und_Fcrrnt_pstn.c_xchng_cd);
			strcpy(st_undpstn_tobe.c_undrlyng,st_und_Fcrrnt_pstn.c_undrlyng);
			strcpy(st_undpstn_tobe.c_trd_dt,c_trd_dt);
			st_undpstn_tobe.c_indstk					=	st_und_Fcrrnt_pstn.c_ctgry_indstk;
			st_undpstn_tobe.l_uibuy_qty				= st_und_Fcrrnt_pstn.l_ibuy_qty;
			st_undpstn_tobe.d_uibuy_val				=	st_und_Fcrrnt_pstn.d_ibuy_ord_vl;
			st_undpstn_tobe.l_uisell_qty			=	st_und_Fcrrnt_pstn.l_isell_qty;
			st_undpstn_tobe.d_uisell_val			=	st_und_Fcrrnt_pstn.d_isell_ord_vl;
			st_undpstn_tobe.l_uexbuy_qty			=	st_und_Fcrrnt_pstn.l_exbuy_qty;
			st_undpstn_tobe.d_uexbuy_val			=	st_und_Fcrrnt_pstn.d_exbuy_ord_vl;
			st_undpstn_tobe.l_uexsell_qty			=	st_und_Fcrrnt_pstn.l_exsell_qty;
			st_undpstn_tobe.d_uexsell_val			=	st_und_Fcrrnt_pstn.d_exsell_ord_vl;
			st_undpstn_tobe.l_ubuy_exctd_qty	=	st_und_Fcrrnt_pstn.l_buy_exctd_qty;
			st_undpstn_tobe.l_usell_exctd_qty	=	st_und_Fcrrnt_pstn.l_sell_exctd_qty;
			st_undpstn_tobe.c_uopnpstn_flw		=	st_und_Fcrrnt_pstn.c_opnpstn_flw;
			st_undpstn_tobe.l_uopnpstn_qty		=	st_und_Fcrrnt_pstn.l_opnpstn_qty;
			st_undpstn_tobe.d_uopnpstn_val		=	st_und_Fcrrnt_pstn.d_org_opn_val;
			st_undpstn_tobe.d_umtm_opn_val		=	st_und_Fcrrnt_pstn.d_mtm_opn_val;
			st_undpstn_tobe.c_mtm_flg					=	c_mtm_flag;
		

	  	strcpy( st_und_tobe_pstn.c_cln_mtch_accnt,st_und_Fcrrnt_pstn.c_cln_mtch_accnt);
  		strcpy( st_und_tobe_pstn.c_xchng_cd,st_und_Fcrrnt_pstn.c_xchng_cd );
  		strcpy( st_und_tobe_pstn.c_undrlyng,st_und_Fcrrnt_pstn.c_undrlyng );
  		st_und_tobe_pstn.c_prd_typ          = st_und_Fcrrnt_pstn.c_prd_typ ;
  		st_und_tobe_pstn.c_ctgry_indstk     = st_und_Fcrrnt_pstn.c_ctgry_indstk ;
  		st_und_tobe_pstn.c_cntrct_tag       = st_und_Fcrrnt_pstn.c_cntrct_tag ;
  		st_und_tobe_pstn.l_ibuy_qty         = 0;
  		st_und_tobe_pstn.d_ibuy_ord_vl      = 0.0;
  		st_und_tobe_pstn.l_isell_qty        = 0;
  		st_und_tobe_pstn.d_isell_ord_vl     = 0.0;
  		st_und_tobe_pstn.l_exbuy_qty        = 0;
 	 		st_und_tobe_pstn.d_exbuy_ord_vl     = 0.0;
  		st_und_tobe_pstn.l_exsell_qty       = 0;
  		st_und_tobe_pstn.d_exsell_ord_vl    = 0.0;
  		st_und_tobe_pstn.l_buy_exctd_qty    = 0;
  		st_und_tobe_pstn.l_sell_exctd_qty   = 0;
  		st_und_tobe_pstn.c_opnpstn_flw      = 'N';
  		st_und_tobe_pstn.l_opnpstn_qty      = 0;
  		st_und_tobe_pstn.d_org_opn_val      = 0.0;
  		st_und_tobe_pstn.d_mtm_opn_val      = 0.0;
  		st_und_tobe_pstn.l_opn_buyqty       = 0;
  		st_und_tobe_pstn.l_opn_sellqty      = 0;
  		st_und_tobe_pstn.d_ibuy_mrgn        = 0.0;
  		st_und_tobe_pstn.d_isell_mrgn       = 0.0;
  		st_und_tobe_pstn.d_exbuy_mrgn       = 0.0;
  		st_und_tobe_pstn.d_exsell_mrgn      = 0.0;
  		st_und_tobe_pstn.d_add_mrgn_val     = 0.0;
  		st_und_tobe_pstn.d_exctd_mrgn       = 0.0;
  		st_und_tobe_pstn.d_sprd_mrgn        = 0.0;
  		st_und_tobe_pstn.d_sprd_pl          = 0.0;
  		st_und_tobe_pstn.d_trd_mrgn         = 0.0;
  		st_und_tobe_pstn.c_oprn_typ         = '*';
  		st_und_tobe_pstn.d_mm_trd_mrgn      = 0.0;
  		st_und_tobe_pstn.d_ordr_mrgn        = 0.0;
  		st_und_tobe_pstn.d_imtm_opn_val     = 0.0;
  		st_und_tobe_pstn.d_imtm_exctd_mrgn  = 0.0;
  		st_und_tobe_pstn.d_imtm_sprd_mrgn   = 0.0;
  		st_und_tobe_pstn.d_imtm_sprd_pl     = 0.0;
  		st_und_tobe_pstn.d_imtm_trd_mrgn    = 0.0;
  		st_und_tobe_pstn.d_mm_exctd_mrgn    = 0.0;
  		st_und_tobe_pstn.d_mm_sprd_mrgn     = 0.0;
  		st_und_tobe_pstn.d_mm_sprd_pl       = 0.0;

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Before Call To fn_fut_clsout.");
			}

			i_returncode  = fn_fut_clsout ( c_ServiceName,
        	                            &st_und_Fcrrnt_pstn,
          	                          &st_und_tobe_pstn,
																			&st_actn,
            	                        c_err_msg );

			if ( i_returncode	!=	0	)
			{
      	fn_errlog( c_ServiceName, "S31155",LIBMSG, c_err_msg );
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/
	    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"NRML2SPN - After call to fn_fut_clsout.");
			}
    	sprintf ( st_actn.c_ref_rmrks,"FUT-%s-%s",st_actn.c_undrlyng, st_actn.c_expry_dt);

			strcpy(st_pstn_actn.c_xchng_cd,st_und_Fcrrnt_pstn.c_xchng_cd);
			strcpy(st_pstn_actn.c_cln_mtch_accnt,st_und_Fcrrnt_pstn.c_cln_mtch_accnt);
			strcpy(st_pstn_actn.c_undrlyng,st_und_Fcrrnt_pstn.c_undrlyng);
			strcpy(st_pstn_actn.c_rout_crt,st_usrprfl.c_rout_crt);

			fn_cpy_ddr (st_actn.c_rout_crt) ;

    	d_diff_amv = st_und_Fcrrnt_pstn.d_add_mrgn_val ;

			if(DEBUG_MSG_LVL_0)
			{
     		fn_userlog ( c_ServiceName, "Difference in UAMV :%lf:", d_diff_amv );
			}

    	if( d_diff_amv != 0 )
    	{
				d_balance_amt  = 0.0;   /*** Ver 1.3 ***/			
			
      	i_returncode = fn_upd_spnlimits( c_ServiceName,
																			&st_actn,
                	                    ptr_st_err_msg,
              	                      RELEASE_OF_ADD_MARGIN,
            	                        DEBIT_WITHOUT_LIMIT,
          	                          d_diff_amv,
        	                            &d_balance_amt);
      	if ( i_returncode != 0 )
      	{
					fn_errlog( c_ServiceName, "S31160",LIBMSG, c_err_msg );
      		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/
	      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
    	}

   	 	d_diff_UTM = st_und_Fcrrnt_pstn.d_trd_mrgn ;

			if(DEBUG_MSG_LVL_0)
			{
     		fn_userlog ( c_ServiceName, "Difference in UTM :%lf:", d_diff_UTM );
			}

		 	if ( d_diff_UTM != 0 )
    	{
				d_balance_amt  = 0.0;   /*** Ver 1.3 ***/
      	i_returncode = fn_upd_spnlimits( c_ServiceName,
																			&st_actn,
                	                    ptr_st_err_msg,
              	                      MARGIN_ADJ_ON_CLOSE_OUT,
            	                        DEBIT_WITHOUT_LIMIT,
          	                          d_diff_UTM,
        	                            &d_balance_amt);
      	if ( i_returncode != 0 )
      	{
					fn_errlog( c_ServiceName, "S31165",LIBMSG, c_err_msg );
      		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/
	      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
    	}
	
    	strcpy ( st_pstn_actn.c_ref_rmrks, c_tmp_rmrks );

      st_und_tobe_pstn.d_org_opn_val      = 0.0;

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"NRML2SPN st_und_tobe_pstn.l_buy_exctd_qty Is :%ld:",st_und_tobe_pstn.l_buy_exctd_qty);
				fn_userlog(c_ServiceName,"NRML2SPN st_und_tobe_pstn.l_sell_exctd_qty Is :%ld:",st_und_tobe_pstn.l_sell_exctd_qty);
				fn_userlog(c_ServiceName,"NRML2SPN st_und_tobe_pstn.c_opnpstn_flw Is :%c:",st_und_tobe_pstn.c_opnpstn_flw);
				fn_userlog(c_ServiceName,"NRML2SPN st_und_tobe_pstn.l_opnpstn_qty Is :%ld:",st_und_tobe_pstn.l_opnpstn_qty);
				fn_userlog(c_ServiceName,"NRML2SPN st_und_tobe_pstn.d_org_opn_val Is :%lf:",st_und_tobe_pstn.d_org_opn_val);
			}



			EXEC SQL
        UPDATE  FUP_FUT_UNDRLYNG_PSTN
        SET     FUP_UIBUY_QTY       = :st_und_tobe_pstn.l_ibuy_qty,
                FUP_UIBUY_VAL       = :st_und_tobe_pstn.d_ibuy_ord_vl,
                FUP_UISELL_QTY      = :st_und_tobe_pstn.l_isell_qty,
                FUP_UISELL_VAL      = :st_und_tobe_pstn.d_isell_ord_vl,
                FUP_UEXBUY_QTY      = :st_und_tobe_pstn.l_exbuy_qty,
                FUP_UEXBUY_VAL      = :st_und_tobe_pstn.d_exbuy_ord_vl,
                FUP_UEXSELL_QTY     = :st_und_tobe_pstn.l_exsell_qty,
                FUP_UEXSELL_VAL     = :st_und_tobe_pstn.d_exsell_ord_vl,
                FUP_UBUY_EXCTD_QTY  = :st_und_tobe_pstn.l_buy_exctd_qty,
                FUP_USELL_EXCTD_QTY = :st_und_tobe_pstn.l_sell_exctd_qty,
                FUP_UOPNPSTN_FLW    = :st_und_tobe_pstn.c_opnpstn_flw,
                FUP_UOPNPSTN_QTY    = :st_und_tobe_pstn.l_opnpstn_qty,
                FUP_UOPNPSTN_VAL    = :st_und_tobe_pstn.d_org_opn_val,
                FUP_UMTM_OPN_VAL    = :st_und_tobe_pstn.d_mtm_opn_val,
                FUP_UORDR_MRGN      = :st_und_tobe_pstn.d_ordr_mrgn,
                FUP_UEXCTD_MRGN     = :st_und_tobe_pstn.d_exctd_mrgn,
                FUP_USPREAD_MRGN    = :st_und_tobe_pstn.d_sprd_mrgn,
                FUP_USPREAD_PNL     = :st_und_tobe_pstn.d_sprd_pl,
                FUP_ADD_MRGN_VAL    = :st_und_tobe_pstn.d_add_mrgn_val,
                FUP_UTRD_MRGN       = :st_und_tobe_pstn.d_trd_mrgn,
                FUP_UMIN_TRD_MRGN   = :st_und_tobe_pstn.d_mm_trd_mrgn
      WHERE CURRENT OF fut_cursor;

      if ( SQLCODE != 0 )
      {
        EXEC SQL FREE :undrlyng_cursor;
        fn_errlog( c_ServiceName, "S31170",SQLMSG, c_err_msg );
     		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/
	      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

			/***	Creating New Postion In SPAN	***/

			if(DEBUG_MSG_LVL_3)
			{
      	fn_userlog(c_ServiceName,"NRML2SPAN Record Exist Flag  Is :%c:",c_rec_exst);
			}

			if( c_rec_exst  ==  'N' )
			{
				EXEC SQL
					INSERT INTO	FUS_FO_UNDRLYNG_SPN_PSTN
					(	
						FUS_CLM_MTCH_ACCNT,
        		FUS_XCHNG_CD,
        		FUS_UNDRLYNG,
        		FUS_INDSTK,
        		FUS_UIBUY_QTY,
        		FUS_UIBUY_VAL,
        		FUS_UISELL_QTY,
        		FUS_UISELL_VAL,
        		FUS_UEXBUY_QTY,
        		FUS_UEXBUY_VAL,
        		FUS_UEXSELL_QTY,
        		FUS_UEXSELL_VAL,
        		FUS_UBUY_EXCTD_QTY,
        		FUS_USELL_EXCTD_QTY,
        		FUS_UOPNPSTN_FLW,
        		FUS_UOPNPSTN_QTY,
        		FUS_UOPNPSTN_VAL,
        		FUS_UMTM_OPN_VAL,
        		FUS_MTM_FLG,
        		FUS_TRD_DT
      		)
      		VALUES
      		(
						:st_undpstn_tobe.c_cln_mtch_accnt,
						:st_undpstn_tobe.c_xchng_cd,
						:st_undpstn_tobe.c_undrlyng,
						:st_undpstn_tobe.c_indstk,
						:st_undpstn_tobe.l_uibuy_qty,
						:st_undpstn_tobe.d_uibuy_val,
						:st_undpstn_tobe.l_uisell_qty,      
    				:st_undpstn_tobe.d_uisell_val,      
    				:st_undpstn_tobe.l_uexbuy_qty,      
    				:st_undpstn_tobe.d_uexbuy_val,     
    				:st_undpstn_tobe.l_uexsell_qty,    
    				:st_undpstn_tobe.d_uexsell_val,   
    				:st_undpstn_tobe.l_ubuy_exctd_qty,  
    				:st_undpstn_tobe.l_usell_exctd_qty, 
    				:st_undpstn_tobe.c_uopnpstn_flw,
    				:st_undpstn_tobe.l_uopnpstn_qty,
    /***				:st_undpstn_tobe.d_uopnpstn_val,	Commented in ver 1.9	***/
    				:st_undpstn_tobe.d_umtm_opn_val,			/*** Added in ver 1.9 ***/
    				:st_undpstn_tobe.d_umtm_opn_val,
    				:st_undpstn_tobe.c_mtm_flg,
						:c_trd_dt
					);
				
				 	if ( SQLCODE != 0 )
      		{
        		EXEC SQL FREE :undrlyng_cursor;
        		fn_errlog( c_ServiceName, "S31175",SQLMSG, c_err_msg );
          	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/  
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      		}
			}
			else
			{
				EXEC SQL
					UPDATE	FUS_FO_UNDRLYNG_SPN_PSTN
					SET			FUS_UIBUY_QTY					=	:st_undpstn_tobe.l_uibuy_qty,
									FUS_UIBUY_VAL					=	:st_undpstn_tobe.d_uibuy_val,
									FUS_UISELL_QTY				= :st_undpstn_tobe.l_uisell_qty,
									FUS_UISELL_VAL				=	:st_undpstn_tobe.d_uisell_val,
									FUS_UEXBUY_QTY				=	:st_undpstn_tobe.l_uexbuy_qty,
									FUS_UEXBUY_VAL				=	:st_undpstn_tobe.d_uexbuy_val,
									FUS_UEXSELL_QTY				=	:st_undpstn_tobe.l_uexsell_qty,
									FUS_UEXSELL_VAL				=	:st_undpstn_tobe.d_uexsell_val,
									FUS_UBUY_EXCTD_QTY		=	FUS_UBUY_EXCTD_QTY	+	:st_undpstn_tobe.l_ubuy_exctd_qty,
									FUS_USELL_EXCTD_QTY		=	FUS_USELL_EXCTD_QTY	+	:st_undpstn_tobe.l_usell_exctd_qty,
									FUS_UOPNPSTN_QTY			=	FUS_UOPNPSTN_QTY		+	:st_undpstn_tobe.l_uopnpstn_qty,
			/***				FUS_UOPNPSTN_VAL			=	FUS_UOPNPSTN_VAL		+ :st_undpstn_tobe.d_uopnpstn_val, Commented in ver 1.9  ***/
									FUS_UOPNPSTN_VAL			=	FUS_UOPNPSTN_VAL		+ :st_undpstn_tobe.d_umtm_opn_val, /*** Added in ver 1.9 ***/
									FUS_UMTM_OPN_VAL			=	FUS_UMTM_OPN_VAL		+	:st_undpstn_tobe.d_umtm_opn_val,
									FUS_MTM_FLG						=	:st_undpstn_tobe.c_mtm_flg
					WHERE		FUS_CLM_MTCH_ACCNT		=	:st_undpstn_tobe.c_cln_mtch_accnt
      		AND     FUS_XCHNG_CD          = :st_undpstn_tobe.c_xchng_cd
					AND			FUS_UNDRLYNG					=	:st_undpstn_tobe.c_undrlyng;

				if ( SQLCODE != 0 )
      	{
        	EXEC SQL FREE :undrlyng_cursor;
        	fn_errlog( c_ServiceName, "S31180",SQLMSG, c_err_msg );
     			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/
       		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}

			}

			strcpy(st_actn.c_xchng_cd,st_und_Fcrrnt_pstn.c_xchng_cd);
      strcpy(st_actn.c_cln_mtch_accnt,st_und_Fcrrnt_pstn.c_cln_mtch_accnt);
      strcpy(st_actn.c_undrlyng,st_und_Fcrrnt_pstn.c_undrlyng);
      strcpy(st_actn.c_expry_dt,st_actn.c_expry_dt);
      strcpy(st_actn.c_rout_crt,st_usrprfl.c_rout_crt);

      st_actn.c_prd_typ       = st_und_Fcrrnt_pstn.c_prd_typ;
      st_actn.c_ctgry_indstk  = st_und_Fcrrnt_pstn.c_ctgry_indstk;
      st_actn.c_exrc_typ      = 'E';
      st_actn.c_opt_typ       = '*';
      st_actn.l_strike_prc    = 0;

		}	/***	Future While Loop	***/

		EXEC SQL DECLARE opt_cursor CURSOR FOR 
		 		SELECT	FOP_CLM_MTCH_ACCNT,
        	      FOP_XCHNG_CD,
          	    FOP_PRDCT_TYP,
            	  FOP_INDSTK,
               	FOP_UNDRLYNG,
              	FOP_EXPRY_DT,
       	       	FOP_EXER_TYP,
        	      FOP_OPT_TYP,
          	    FOP_STRK_PRC,
								FOP_IBUY_QTY,
								FOP_IBUY_ORD_VAL,
								FOP_ISELL_QTY,
								FOP_ISELL_ORD_VAL,
								FOP_EXBUY_QTY,
								FOP_EXBUY_ORD_VAL,
								FOP_EXSELL_QTY,
								FOP_EXSELL_ORD_VAL,
								FOP_BUY_EXCTD_QTY,
								FOP_SELL_EXCTD_QTY,
								FOP_OPNPSTN_FLW,
								FOP_OPNPSTN_QTY,
								FOP_OPNPSTN_VAL,
								NVL(FOP_MTM_FLG,'O'),
								NVL(FOP_UEXCTD_MRGN,0),
								FOP_TRD_DT
      	FROM    FOP_FO_OPTIONS_PSTN
      	WHERE   FOP_CLM_MTCH_ACCNT  = :c_clm_mtch_accnt
				AND			FOP_UNDRLYNG				=	:c_undrlyng
        AND     FOP_XCHNG_CD        = :c_xchng_cd
				AND		(	FOP_UEXCTD_MRGN		 !=	0
				OR			FOP_OPNPSTN_VAL		 !=	0	
			  OR      FOP_OPNPSTN_QTY		 != 0 )		/*** Ver 2.2 ***/
				FOR UPDATE OF FOP_CLM_MTCH_ACCNT;

		if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND   )
  	{
    	fn_userlog( c_ServiceName, "Failed To Get Option Records.");
    	fn_errlog( c_ServiceName, "S31185",SQLMSG, c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/
	  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		EXEC SQL OPEN opt_cursor;

		while ( 1 )
  	{
			l_Orcrd_exst	=	0;

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"NRML2SPN INSIDE OPTION WHILE LOOP.");
			}

			EXEC SQL FETCH	opt_cursor
								INTO	:st_und_crrnt_pstn.c_cln_mtch_accnt,
											:st_und_crrnt_pstn.c_xchng_cd,
											:st_pstn_actn.c_prd_typ,
											:st_und_crrnt_pstn.c_ctgry_indstk,
											:st_und_crrnt_pstn.c_undrlyng,	
											:st_pstn_actn.c_expry_dt,
											:st_pstn_actn.c_exrc_typ,
											:st_pstn_actn.c_opt_typ,
											:st_pstn_actn.l_strike_prc,
											:st_und_crrnt_pstn.l_ibuy_qty,
								 			:st_und_crrnt_pstn.d_ibuy_ord_vl,
								 			:st_und_crrnt_pstn.l_isell_qty,
								 			:st_und_crrnt_pstn.d_isell_ord_vl,
								 			:st_und_crrnt_pstn.l_exbuy_qty,
								 			:st_und_crrnt_pstn.d_exbuy_ord_vl,
								 			:st_und_crrnt_pstn.l_exsell_qty,
								 			:st_und_crrnt_pstn.d_exsell_ord_vl,
								 			:st_und_crrnt_pstn.l_buy_exctd_qty,
								 			:st_und_crrnt_pstn.l_sell_exctd_qty,
								 			:st_und_crrnt_pstn.c_opnpstn_flw,
								 			:st_und_crrnt_pstn.l_opnpstn_qty,
								 			:st_und_crrnt_pstn.d_org_opn_val,
								 			:c_mtm_flag,
											:st_und_crrnt_pstn.d_exctd_mrgn,
								 			:c_trd_dt;

    	if ( SQLCODE != 0 )
    	{
      	if ( SQLCODE == NO_DATA_FOUND )
      	{
        	break;
      	}

      	fn_userlog( c_ServiceName, "Failed To Fetch option Records");
      	fn_errlog( c_ServiceName, "S31190",SQLMSG, c_err_msg );
 	    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/ 
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
			
			strcpy(st_pstn_actn.c_cln_mtch_accnt,st_und_crrnt_pstn.c_cln_mtch_accnt);
			strcpy(st_pstn_actn.c_xchng_cd,st_und_crrnt_pstn.c_xchng_cd);
			strcpy(st_pstn_actn.c_undrlyng,st_und_crrnt_pstn.c_undrlyng);
			st_pstn_actn.c_ctgry_indstk	=	st_und_crrnt_pstn.c_ctgry_indstk;
			

			EXEC SQL
        SELECT  1
        INTO    :l_Orcrd_exst
        FROM    FUS_FO_UNDRLYNG_SPN_PSTN
        WHERE   FUS_CLM_MTCH_ACCNT  = :st_und_crrnt_pstn.c_cln_mtch_accnt
        AND     FUS_XCHNG_CD        = :st_und_crrnt_pstn.c_xchng_cd
        AND     FUS_UNDRLYNG        = :st_und_crrnt_pstn.c_undrlyng;

      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {

        EXEC SQL FREE :undrlyng_cursor;
        fn_userlog( c_ServiceName, "Failed To Fetch Future Records.");
        fn_errlog( c_ServiceName, "S31195",SQLMSG, c_err_msg );
     		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/
	      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if (  SQLCODE == NO_DATA_FOUND  )
      {
        fn_userlog(c_ServiceName,"NRML2SPAN Inside No Data Found Case .");

        c_rec_exst  = 'N' ;

        fn_userlog(c_ServiceName,"NRML2SPAN Record Exist Flag  Is :%c:",c_rec_exst);

      }

      if ( l_Orcrd_exst == 1 )
      {
        c_rec_exst  = 'Y';

      }

			strcpy(st_undpstn_tobe.c_cln_mtch_accnt,st_und_crrnt_pstn.c_cln_mtch_accnt);
			strcpy(st_undpstn_tobe.c_xchng_cd,st_und_crrnt_pstn.c_xchng_cd);
			strcpy(st_undpstn_tobe.c_undrlyng,st_und_crrnt_pstn.c_undrlyng);
			strcpy(st_undpstn_tobe.c_trd_dt,c_trd_dt);
			st_undpstn_tobe.c_indstk          = st_und_crrnt_pstn.c_ctgry_indstk;
			st_undpstn_tobe.l_uibuy_qty       = st_und_crrnt_pstn.l_ibuy_qty;
			st_undpstn_tobe.d_uibuy_val       = st_und_crrnt_pstn.d_ibuy_ord_vl;
			st_undpstn_tobe.l_uisell_qty      = st_und_crrnt_pstn.l_isell_qty;
			st_undpstn_tobe.d_uisell_val      = st_und_crrnt_pstn.d_isell_ord_vl;
			st_undpstn_tobe.l_uexbuy_qty      = st_und_crrnt_pstn.l_exbuy_qty;
			st_undpstn_tobe.d_uexbuy_val      = st_und_crrnt_pstn.d_exbuy_ord_vl;
			st_undpstn_tobe.l_uexsell_qty     = st_und_crrnt_pstn.l_exsell_qty;
			st_undpstn_tobe.d_uexsell_val     = st_und_crrnt_pstn.d_exsell_ord_vl;
			st_undpstn_tobe.l_ubuy_exctd_qty  = st_und_crrnt_pstn.l_buy_exctd_qty;
			st_undpstn_tobe.l_usell_exctd_qty = st_und_crrnt_pstn.l_sell_exctd_qty;
			st_undpstn_tobe.c_uopnpstn_flw    = st_und_crrnt_pstn.c_opnpstn_flw;
			st_undpstn_tobe.l_uopnpstn_qty    = st_und_crrnt_pstn.l_opnpstn_qty;
			st_undpstn_tobe.d_uopnpstn_val    = st_und_crrnt_pstn.d_org_opn_val;
			st_undpstn_tobe.d_umtm_opn_val    = st_und_crrnt_pstn.d_mtm_opn_val;
			st_undpstn_tobe.c_mtm_flg         = c_mtm_flag;
			
			
			st_cntopt_pos_tobe.l_ibuy_qty					=	0;
			st_cntopt_pos_tobe.d_ibuy_ord_vl			=	0.0;
			st_cntopt_pos_tobe.l_isell_qty				=	0;
			st_cntopt_pos_tobe.d_isell_ord_vl			=	0.0;
			st_cntopt_pos_tobe.l_exbuy_qty				=	0;
			st_cntopt_pos_tobe.d_exbuy_ord_vl			=	0.0;
			st_cntopt_pos_tobe.l_exsell_qty				=	0;
			st_cntopt_pos_tobe.d_exsell_ord_vl		=	0.0;
			st_cntopt_pos_tobe.l_buy_exctd_qty		=	0;
			st_cntopt_pos_tobe.l_sell_exctd_qty		=	0;
			st_cntopt_pos_tobe.c_opnpstn_flw			=	'N';
			st_cntopt_pos_tobe.l_opnpstn_qty			=	0;
			st_cntopt_pos_tobe.d_org_opn_val			=	0.0;
			st_cntopt_pos_tobe.d_ordr_mrgn				=	0.0;
			st_cntopt_pos_tobe.d_trd_mrgn					=	0.0;
			st_cntopt_pos_tobe.l_iexrc_qty				=	0;
			st_cntopt_pos_tobe.l_exexrc_qty				=	0;
			st_cntopt_pos_tobe.l_exrc_qty					=	0;
			st_cntopt_pos_tobe.l_ord_dp_qty				=	0;
			st_cntopt_pos_tobe.l_asgnd_qty				=	0;
			st_cntopt_pos_tobe.l_mtm_trg_prc			=	0;
			st_cntopt_pos_tobe.l_idont_exrc_qty		=	0;
			st_cntopt_pos_tobe.l_exdont_exrc_qty	=	0;
			st_cntopt_pos_tobe.d_trd_mrgn					=	0.0;
			st_cntopt_pos_tobe.l_mtm_trg_prc			=	0.0;

			rtrim(st_pstn_actn.c_undrlyng);
			rtrim(st_pstn_actn.c_expry_dt);
			
			/*** sprintf ( st_pstn_actn.c_ref_rmrks,"OPT-%s-%s-%ld-%c%c",st_pstn_actn.c_undrlyng,
 																															st_pstn_actn.c_expry_dt,
																															st_pstn_actn.l_strike_prc/100,
																															st_pstn_actn.c_opt_typ,
																															st_pstn_actn.c_exrc_typ);  *** Commented in Ver 1.3 ***/

			sprintf ( st_pstn_actn.c_ref_rmrks,"OPT-%s-%s-%0.2lf-%c%c",st_pstn_actn.c_undrlyng,
 																															st_pstn_actn.c_expry_dt,
																															(double) st_pstn_actn.l_strike_prc/100.00,
																															st_pstn_actn.c_opt_typ,
																															st_pstn_actn.c_exrc_typ);  /*** Ver 1.3 ***/

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"NRML2SPN RECORD EXIST FLAG IS :%c:",c_rec_exst);
			}

    	i_opt_rtrn  = fn_opt_clsout ( c_ServiceName,
                                    &st_cntopt_pos_tobe,	
                                    &st_pstn_actn,
																		c_drcr_flg,
                                    c_err_msg );

    	if ( i_opt_rtrn !=  0 )
    	{
      	fn_errlog( c_ServiceName, "S31200",LIBMSG, c_err_msg );
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
			

			if ( st_cntopt_pos_tobe.l_opnpstn_qty > 0 )
  		{
    		st_cntopt_pos_tobe.c_opnpstn_flw = BUY;
  		}
  		else if ( st_cntopt_pos_tobe.l_opnpstn_qty < 0 )
  		{
    		st_cntopt_pos_tobe.c_opnpstn_flw = SELL;
 	 		}
  		else
  		{
    		st_cntopt_pos_tobe.c_opnpstn_flw = NEUTRAL;
  		}

  		EXEC SQL
    		UPDATE  FOP_FO_OPTIONS_PSTN
    		SET     FOP_IBUY_QTY        = :st_cntopt_pos_tobe.l_ibuy_qty,
        	    	FOP_IBUY_ORD_VAL    = :st_cntopt_pos_tobe.d_ibuy_ord_vl,
            		FOP_ISELL_QTY       = :st_cntopt_pos_tobe.l_isell_qty,
            		FOP_ISELL_ORD_VAL   = :st_cntopt_pos_tobe.d_isell_ord_vl,
            		FOP_EXBUY_QTY       = :st_cntopt_pos_tobe.l_exbuy_qty,
            		FOP_EXBUY_ORD_VAL   = :st_cntopt_pos_tobe.d_exbuy_ord_vl,
            		FOP_EXSELL_QTY      = :st_cntopt_pos_tobe.l_exsell_qty,
            		FOP_EXSELL_ORD_VAL  = :st_cntopt_pos_tobe.d_exsell_ord_vl,
            		FOP_BUY_EXCTD_QTY   = :st_cntopt_pos_tobe.l_buy_exctd_qty,
            		FOP_SELL_EXCTD_QTY  = :st_cntopt_pos_tobe.l_sell_exctd_qty,
            		FOP_OPNPSTN_FLW     = :st_cntopt_pos_tobe.c_opnpstn_flw,
            		FOP_OPNPSTN_QTY     = :st_cntopt_pos_tobe.l_opnpstn_qty,
            		FOP_OPNPSTN_VAL     = :st_cntopt_pos_tobe.d_org_opn_val,
            		FOP_UORDR_MRGN      = :st_cntopt_pos_tobe.d_ordr_mrgn,
            		FOP_UEXCTD_MRGN     = :st_cntopt_pos_tobe.d_trd_mrgn,
            		FOP_IEXRC_QTY       = :st_cntopt_pos_tobe.l_iexrc_qty,
            		FOP_EXEXRC_QTY      = :st_cntopt_pos_tobe.l_exexrc_qty,
            		FOP_EXRC_QTY        = :st_cntopt_pos_tobe.l_exrc_qty,
           	 		FOP_DP_QTY          = :st_cntopt_pos_tobe.l_ord_dp_qty,
            		FOP_ASGND_QTY       = :st_cntopt_pos_tobe.l_asgnd_qty,
            		FOP_TRGGR_PRC       = :st_cntopt_pos_tobe.l_mtm_trg_prc,
            		FOP_IDONTEXRC_QTY   = :st_cntopt_pos_tobe.l_idont_exrc_qty,
            		FOP_EXDONTEXRC_QTY  = :st_cntopt_pos_tobe.l_exdont_exrc_qty,
                FOP_UDLVRY_MRGN     = 0     /*** ver 3.4 ***/
    		WHERE CURRENT OF opt_cursor;

				if ( SQLCODE != 0 )
  			{
    			fn_errlog(c_ServiceName, "S31205", SQLMSG, ptr_st_err_msg->c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  			}


			/***  Creating New Postion In SPAN  ***/

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"NRML2SPAN Record Exist Flag  Is :%c:",c_rec_exst);
			}

			if( c_rec_exst  ==  'N' )
			{
  			EXEC SQL
    			INSERT INTO FUS_FO_UNDRLYNG_SPN_PSTN
    			(
						FUS_CLM_MTCH_ACCNT,
						FUS_XCHNG_CD,
						FUS_UNDRLYNG,
						FUS_INDSTK,
						FUS_UIBUY_QTY,
						FUS_UIBUY_VAL,
						FUS_UISELL_QTY,
						FUS_UISELL_VAL,
						FUS_UEXBUY_QTY,
						FUS_UEXBUY_VAL,
						FUS_UEXSELL_QTY,
						FUS_UEXSELL_VAL,
						FUS_UBUY_EXCTD_QTY,
						FUS_USELL_EXCTD_QTY,
						FUS_UOPNPSTN_FLW,
						FUS_UOPNPSTN_QTY,
						FUS_UOPNPSTN_VAL,
						FUS_UMTM_OPN_VAL,
						FUS_MTM_FLG,
						FUS_TRD_DT
    			)
    			VALUES
    			(
      			:st_undpstn_tobe.c_cln_mtch_accnt,
      			:st_undpstn_tobe.c_xchng_cd,
      			:st_undpstn_tobe.c_undrlyng,
      			:st_undpstn_tobe.c_indstk,
      			:st_undpstn_tobe.l_uibuy_qty,
      			:st_undpstn_tobe.d_uibuy_val,
      			:st_undpstn_tobe.l_uisell_qty,
      			:st_undpstn_tobe.d_uisell_val,
      			:st_undpstn_tobe.l_uexbuy_qty,
      			:st_undpstn_tobe.d_uexbuy_val,
      			:st_undpstn_tobe.l_uexsell_qty,
      			:st_undpstn_tobe.d_uexsell_val,
      			:st_undpstn_tobe.l_ubuy_exctd_qty,
      			:st_undpstn_tobe.l_usell_exctd_qty,
      			:st_undpstn_tobe.c_uopnpstn_flw,
      			:st_undpstn_tobe.l_uopnpstn_qty,
      			:st_undpstn_tobe.d_uopnpstn_val,
						:st_undpstn_tobe.d_umtm_opn_val,
            :st_undpstn_tobe.c_mtm_flg,
            :c_trd_dt
          );

        if ( SQLCODE != 0 )
        {
          EXEC SQL FREE :undrlyng_cursor;
          fn_errlog( c_ServiceName, "S31210",SQLMSG, c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/ 
				  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
      }
      else
      {
        EXEC SQL
          UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
          SET     FUS_UIBUY_QTY         =	:st_undpstn_tobe.l_uibuy_qty,
                  FUS_UIBUY_VAL         =	:st_undpstn_tobe.d_uibuy_val,
                  FUS_UISELL_QTY        = :st_undpstn_tobe.l_uisell_qty,
                  FUS_UISELL_VAL        =	:st_undpstn_tobe.d_uisell_val,
                  FUS_UEXBUY_QTY        =	:st_undpstn_tobe.l_uexbuy_qty,
                  FUS_UEXBUY_VAL        =	:st_undpstn_tobe.d_uexbuy_val,
                  FUS_UEXSELL_QTY       =	:st_undpstn_tobe.l_uexsell_qty,
                  FUS_UEXSELL_VAL       =	:st_undpstn_tobe.d_uexsell_val,
                  FUS_UBUY_EXCTD_QTY    =	FUS_UBUY_EXCTD_QTY	+	:st_undpstn_tobe.l_ubuy_exctd_qty,
                  FUS_USELL_EXCTD_QTY   =	FUS_USELL_EXCTD_QTY	+	:st_undpstn_tobe.l_usell_exctd_qty,
                  FUS_UOPNPSTN_QTY      =	FUS_UOPNPSTN_QTY		+	:st_undpstn_tobe.l_uopnpstn_qty,
                  FUS_UOPNPSTN_VAL      =	FUS_UOPNPSTN_VAL		+	:st_undpstn_tobe.d_uopnpstn_val,
                  FUS_UMTM_OPN_VAL      =	FUS_UMTM_OPN_VAL		+	:st_undpstn_tobe.d_umtm_opn_val,
                  FUS_MTM_FLG           = :st_undpstn_tobe.c_mtm_flg
          WHERE   FUS_CLM_MTCH_ACCNT    = :st_undpstn_tobe.c_cln_mtch_accnt
          AND     FUS_XCHNG_CD          = :c_xchng_cd
          AND     FUS_UNDRLYNG          = :st_undpstn_tobe.c_undrlyng;

        if ( SQLCODE != 0 )
        {
          EXEC SQL FREE :undrlyng_cursor;
          fn_errlog( c_ServiceName, "S31215",SQLMSG, c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/    
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

      }

			strcpy(st_actn.c_xchng_cd,st_und_crrnt_pstn.c_xchng_cd);
  		strcpy(st_actn.c_cln_mtch_accnt,st_und_crrnt_pstn.c_cln_mtch_accnt);
  		strcpy(st_actn.c_undrlyng,st_und_crrnt_pstn.c_undrlyng);
  		strcpy(st_actn.c_expry_dt,st_pstn_actn.c_expry_dt);
  		strcpy(st_actn.c_rout_crt,st_usrprfl.c_rout_crt);

  		st_actn.c_prd_typ       = st_pstn_actn.c_prd_typ;
  		st_actn.c_ctgry_indstk  = st_und_crrnt_pstn.c_ctgry_indstk;
  		st_actn.c_exrc_typ      = st_pstn_actn.c_exrc_typ;
  		st_actn.c_opt_typ       = st_pstn_actn.c_opt_typ;
  		st_actn.l_strike_prc    = st_pstn_actn.l_strike_prc;

  	}	/***	End Of Option While	***/

		if ( (strcmp(st_usrprfl.c_user_id,"system") != 0) && st_usrprfl.l_session_id  !=  0 )
  	{
    	st_actn.l_actn_typ  = ORS_NEW_ORD_REQ ;
  	}
  	else
  	{
    	st_actn.l_actn_typ  = SYSTEM_PLACE_ORDER;
  	}

		if(DEBUG_MSG_LVL_3)
		{
  		fn_userlog(c_ServiceName,"Before Call To Function fn_crt_spn_pstn.");
		}

  	i_returncode  = fn_crt_spn_pstn ( c_ServiceName,
    	                                &st_actn,
      	                              c_drcr_flg,
        	                            c_err_msg,
																			&d_required_amount	/*** ver 3.3 ***/
          	                        );

  	if ( i_returncode != 0 )
  	{
			switch ( i_returncode )
  		{
    		case INSUFFICIENT_LIMITS  :

      		fn_userlog(c_ServiceName,"Inside  INSUFFICIENT_LIMITS Case.");
      		sprintf (c_msg, "Insufficient Limit For Match Account :%s:",st_actn.c_cln_mtch_accnt);
      		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/
					/*** Ver 1.4  Added for Report  ***/
					/*** strcpy(c_err_msg,"Please allocate additional funds to increase your limit.");		*** Ver 1.6 *** *** Commened in Ver 3.3 ***/
					sprintf(c_err_msg,"Your F&O margining conversion request has been rejected due to insufficient limits in your account. Please add required additional limits of Rs. %.2lf/- and try again.",d_required_amount);	 /*** Ver 3.3 ***/
          strcpy(c_cnvrsn_rmrks,"Insufficient Limit For Match Account");
          strcpy(c_status,"FAIL");
					strcpy	( c_mrgn_typ,"Non SPAN (Existing I-Sec) Margining");		/*** Ver 1.6 ***/
          /*i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status);*/				/*** Ver 1.6 ***/
					/*** i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg,c_xchng_cd);	*** Ver 1.6 ***  *** Ver 2.3 c_xchng_cd added *** *** Commented in ver 3.3 **/
					/*** Ver 3.3 starts ***/
					if ( strcmp(c_cnvrsion_mode,"OFFLINE") == 0 && ( c_spl_flg == 'K' ) )
					{
							i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg,c_xchng_cd,st_usrprfl.c_user_id,129,c_cnvrsion_mode,d_required_amount);	
					}
					else
					{
							i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg,c_xchng_cd,st_usrprfl.c_user_id,133,c_cnvrsion_mode,d_required_amount);	
					}
					/*** Ver 3.3 ends ***/
					
          if (i_returncode != 0)
         	{ 
             fn_userlog(c_ServiceName,"Failed to Insert in Report Table ");
          }
          /**** Ver 1.4 ****/
    		break;
  		}
    	fn_errlog( c_ServiceName, "S31220",LIBMSG, c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

	}	/***	End Of Main While	***/


	/*** Ver 2.2  code added to ensure futute conversion in case of perfect spread and margin blocked is zero.
								Here FOP is not checked since there are no spread orders in options ***/
	i_exist = 0; 

	EXEC SQL
		SELECT	1
		INTO		:i_exist
		FROM		DUAL 
		WHERE   EXISTS
		(	SELECT 1  
			FROM	 FFP_FO_FUTURES_PSTN
			WHERE  FFP_CLM_MTCH_ACCNT   = :c_clm_mtch_accnt   
			AND    FFP_XCHNG_CD					= :c_xchng_cd  
			AND		 FFP_OPNPSTN_FLW			!= 'N'
		);

	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
		fn_userlog( c_ServiceName, "Failed while checking record exist");
    fn_errlog( c_ServiceName, "S31225",SQLMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	if ( i_exist == 1)
	{
		fn_userlog( c_ServiceName, "Unable to convert");
    fn_errlog( c_ServiceName, "S31230",LIBMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	/*** Ver 2.2 Ends here ***/

	/***	Commented In Ver	2.1	For Common TNC Changes

	***	Commented In Ver	1.5		Uncomment in ver 1.8 strats here ***

	EXEC SQL
		UPDATE	CLM_CLNT_MSTR
		SET			CLM_SPAN_ALLWD	=	'Z'
		WHERE		CLM_MTCH_ACCNT	=	:c_clm_mtch_accnt ;

	if ( SQLCODE != 0 )  
  {
    fn_userlog( c_ServiceName, "Failed To Update SPAN Flag For Match Account :%s:",c_clm_mtch_accnt);
    fn_errlog( c_ServiceName, "S31235",SQLMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    ** Ver 1.4 ***
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	*** Comment Ends	Ver	1.5	***	Ver 1.8 Ends here ***


			Comment Ends	Ver	2.1	***/


	/***	Added In Ver	1.5	***		Commented in Ver 1.8 starts here ***/

	/***		Uncommented In Ver 2.1	For Common TNC Changes			***/
	if(strcmp(c_xchng_cd,"NFO") == 0)				/*** Ver 2.3 ***/
	{																				/*** Ver 2.3 ***/
	 	EXEC SQL
    	UPDATE  CLM_CLNT_MSTR
    	SET     CLM_SPAN_ALLWD  = 'Y'
    	WHERE   CLM_MTCH_ACCNT  = :c_clm_mtch_accnt ;
	}																					/*** Ver 2.3 starts **/
	if(strcmp(c_xchng_cd,"BFO") == 0)
	{
		EXEC SQL
			UPDATE  CLM_CLNT_MSTR
			SET     CLM_BSESPAN_ALLWD = 'Y'
			WHERE   CLM_MTCH_ACCNT  = :c_clm_mtch_accnt ;
	}																						/*** Ver 2.3 Ends ***/

  if ( SQLCODE != 0 )
  {
    fn_userlog( c_ServiceName, "Failed To Update SPAN Flag For Match Account :%s:",c_clm_mtch_accnt);
    fn_errlog( c_ServiceName, "S31240",SQLMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/***	Ver	1.5	Ends	***	Ver 1.8 Ends here ***/

	/*** sprintf ( c_msg, "NORMAL To SPAN Conversion For Match Account :%s: .",c_clm_mtch_accnt);
	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );	Commented in Ver 1.6 ***/

	
	/*** MEMSET(c_cnvrsn_rmrks);	Commented in ver 1.4 ****/

	/*** strcpy(c_cnvrsn_rmrks,"NORMAL To SPAN.");	Commented in ver 1.4 ****/

	strcpy(c_cnvrsn_rmrks,"NORMAL To SPAN Successful.");	/** Ver 1.4 ***/
  strcpy(c_status,"SUCCESS");          /**** Ver 1.4 ****/
	strcpy	( c_mrgn_typ,"SPAN Based Margining");		/*** Ver 1.6 ***/
	rtrim(c_status);                    /**** Ver 1.4 ****/
	rtrim(c_cnvrsn_rmrks);

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"c_cnvrsn_rmrks Is :%s:",c_cnvrsn_rmrks);
	}
  /*** Commented in ver 1.4 ****
	EXEC SQL
		INSERT INTO FSC_SPNNRML_CNV
							(	FSC_CLM_MTCH_ACCNT,
								FSC_CNVRSN_TIME,
								FSC_CNVRSN_RMRKS
							)
						VALUES
							(	:c_clm_mtch_accnt,
								SYSDATE,
								:c_cnvrsn_rmrks
							);

	if ( SQLCODE != 0 )
  {
		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog( c_ServiceName, "Failed To Insert Record In Log Table For Match Account :%s:",c_clm_mtch_accnt);
		}
 
    fn_errlog( c_ServiceName, "S31245",SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	********************************************/

	/*** Added In ver 1.4 *****/

  /*i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status);*/				/*** Ver 1.6 ***/
	if(strcmp(c_xchng_cd,"NFO") == 0) /*** if condition added in Ver 3.3 ***/
	{
		i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg , c_xchng_cd,st_usrprfl.c_user_id,130,c_cnvrsion_mode,d_required_amount);	/*** Ver 1.6 ***/  /*** Ver 2.3 c_xchng_cd added ***//***ver 3.3 **/
	}
	else if(strcmp(c_xchng_cd,"BFO") == 0) /*** Ver 3.3 ***/
	{
		i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg , c_xchng_cd,st_usrprfl.c_user_id,137,c_cnvrsion_mode,d_required_amount);
	}
  if (i_returncode != 0)
  {
     fn_userlog(c_ServiceName,"Failed to Insert in Report Table ");
     fn_errlog( c_ServiceName, "S31250",SQLMSG, c_err_msg );
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /****** Ver 1.4 ****************/

	/*** Ver 2.8 starts ***/
	if ( c_spl_flg == 'C')
	{
		MEMSET(d_mrgn_aft_cnv);
		MEMSET(c_underlying);
		d_totmrgn_aft_cnv = 0.0;
		sqlca.sqlerrd[2] = 0;

		EXEC SQL 
		SELECT NVL(SUM (margin),0),
					 undrlyng
		INTO	:d_mrgn_aft_cnv,
					:c_underlying
		FROM
		(
			SELECT SUM( FUP_UTRD_MRGN + FUP_UORDR_MRGN + FUP_ADD_MRGN_VAL )	margin,
						 FUP_UNDRLYNG undrlyng
			FROM	 FUP_FUT_UNDRLYNG_PSTN
			WHERE  FUP_CLM_MTCH_ACCNT		=	 :c_clm_mtch_accnt
			AND		 FUP_XCHNG_CD					=	 :c_xchng_cd
			AND		 FUP_PRDCT_TYP				=  'P'
			GROUP BY FUP_UNDRLYNG
			UNION ALL
			SELECT SUM( FUS_INITIAL_MRGN + FUS_BLCKD_PL )  margin,
						 FUS_UNDRLYNG undrlyng
			FROM	 FUS_FO_UNDRLYNG_SPN_PSTN
			WHERE  FUS_CLM_MTCH_ACCNT		=		:c_clm_mtch_accnt
			AND		 FUS_XCHNG_CD					=		:c_xchng_cd
			GROUP BY FUS_UNDRLYNG
			UNION ALL
			SELECT SUM( FOD_AMT_BLCKD + FOD_LSS_AMT_BLCKD )  margin,
             FOD_UNDRLYNG undrlyng
      FROM   FOD_FO_ORDR_DTLS
      WHERE  FOD_CLM_MTCH_ACCNT   =   :c_clm_mtch_accnt
      AND    FOD_XCHNG_CD         =   :c_xchng_cd
      AND    FOD_PRDCT_TYP        in  ('U','I')
      GROUP BY FOD_UNDRLYNG
		)
		GROUP BY undrlyng
		HAVING NVL(SUM (margin),0) > 0
		ORDER BY undrlyng;
		
		if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
		{
			tpfree((char *)ptr_fml_Obuf);
			fn_userlog(c_ServiceName,"Error While Selecting Margin Required.");
			fn_errlog( c_ServiceName, "S31255", SQLMSG, c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		fn_userlog(c_ServiceName,"Count of records :%d:",sqlca.sqlerrd[2]);
		
		for (i=0; i < sqlca.sqlerrd[2] ; i++ )
		{
			d_totmrgn_aft_cnv = d_totmrgn_aft_cnv + d_mrgn_aft_cnv[i];
		}

		fn_userlog(c_ServiceName,"Total margin after conversion = :%lf:",d_totmrgn_aft_cnv);

		if ( Fadd32 (ptr_fml_Obuf,FFO_C_TRD_MRGN,(char *)&d_totmrgn_aft_cnv,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31260", FMLMSG, c_err_msg  );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			tpfree((char *)ptr_fml_Obuf);
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		for (i=0; i < sqlca.sqlerrd[2] ; i++ )
		{
			fn_userlog(c_ServiceName,"Margin after conversion = :%s:%lf: ",c_underlying[i],d_mrgn_aft_cnv[i]);

			if ( Fadd32 (ptr_fml_Obuf,FFO_C_TRD_MRGN,(char *)&d_mrgn_aft_cnv[i],0)  ==  -1 )
			{
				fn_errlog( c_ServiceName, "S31265", FMLMSG, c_err_msg  );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
				tpfree((char *)ptr_fml_Obuf);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}	
		
		fn_userlog(c_ServiceName,"ABORT the transaction for conversion calculator");
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   
		tpreturn(TPSUCCESS, SUCC_BFR, (char *)ptr_fml_Obuf, 0L, 0 ); 
	}
	/*** Ver 2.8 ends ***/

  /** ver 3.6 starts ***/
  c_extra_update = 'N';
  i_returncode  = fn_cal_trg_prc( c_ServiceName , &st_actn,c_extra_update,ptr_st_err_msg  );

  if( i_returncode != 0 )
  {
        fn_errlog( c_ServiceName, "S31270", FMLMSG, c_err_msg  );
        fn_userlog(c_ServiceName,"ERROR in fn_cal_trg_prc");
   }
		
  /** ver 3.6 ends ***/
					
	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
		fn_errlog( c_ServiceName, "S31275",TPMSG, c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** Ver 1.4 ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	/* tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );*/ 	/*** Ver 1.6 ***/
	tpreturn(TPSUCCESS, 0, (char *)NULL, 0, 0);										/*** Ver 1.6 ***/
}


int fn_fut_clsout ( char *c_ServiceName,
                    struct st_undfut_pos	*ptr_st_und_crrnt_pstn,
                    struct st_undfut_pos	*ptr_st_und_tobe_pstn,
					        	struct st_pstn_actn 	*ptr_st_pstn_actn,
                    char  *c_err_msg
                  )
{

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Inside Function fn_fut_clsout.");
	}

	int i_returncode;
	int	i_Frec_exst	=	0;

	long  li_temp_qty;
	long	li_flg_tmp_qty;

  char sql_cln_mtch_accnt[11];
  char sql_xchng_cd[4];
  char sql_prd_typ;
  char sql_cntrct_tag;
  char sql_undrlyng[7];
  double d_avg_prcs=0.0; /*** Ver 3.7 ***/

  varchar c_exp_dt[LEN_DATE];
  varchar c_trd_dt[12];          

  sql_cursor     sys_cursor;      

  struct 	st_fcp_cntrct_pstn	st_cntpos_crrnt;
  struct	st_fcp_cntrct_pstn	st_cntpos_old;
  struct	st_fcp_cntrct_pstn	st_cntpos_md_rc;
	

	strcpy( sql_cln_mtch_accnt,ptr_st_und_crrnt_pstn->c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,ptr_st_und_crrnt_pstn->c_xchng_cd);
  strcpy( sql_undrlyng,ptr_st_und_crrnt_pstn->c_undrlyng);
  sql_prd_typ 		= ptr_st_und_crrnt_pstn->c_prd_typ;
  sql_cntrct_tag 	= ptr_st_und_crrnt_pstn->c_cntrct_tag;

	EXEC SQL ALLOCATE :sys_cursor;

  EXEC SQL EXECUTE
      BEGIN
         OPEN :sys_cursor FOR
          SELECT  FFP_CLM_MTCH_ACCNT,
                  FFP_XCHNG_CD,
                  FFP_PRDCT_TYP,
                  FFP_INDSTK,
                  FFP_UNDRLYNG,
                  TO_CHAR (FFP_EXPRY_DT,'DD-Mon-YYYY'),
                  FFP_EXER_TYP,
                  FFP_CNTRCT_TAG,
                  FFP_IBUY_QTY,
                  FFP_IBUY_ORD_VAL,
                  FFP_ISELL_QTY,
                  FFP_ISELL_ORD_VAL,
                  FFP_EXBUY_QTY,
                  FFP_EXBUY_ORD_VAL,
                  FFP_EXSELL_QTY,
                  FFP_EXSELL_ORD_VAL,
                  FFP_BUY_EXCTD_QTY,
                  FFP_SELL_EXCTD_QTY,
                  FFP_OPNPSTN_FLW,
                  FFP_OPNPSTN_QTY,
                  FFP_OPNPSTN_VAL,
                  FFP_MTM_OPN_VAL,
									FFP_IMTM_OPN_VAL,
									NVL(FFP_AVG_PRC,0) /*** Ver 3.7 ***/
          FROM    FFP_FO_FUTURES_PSTN
          WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
          AND     FFP_XCHNG_CD       = :sql_xchng_cd
          AND     FFP_PRDCT_TYP      = :sql_prd_typ
          AND     FFP_UNDRLYNG       = :sql_undrlyng
          AND     FFP_CNTRCT_TAG     = :sql_cntrct_tag
          ORDER BY FFP_EXPRY_DT asc;
        END;
      END-EXEC;

  if ( SQLCODE != 0 )
  {
    EXEC SQL FREE :sys_cursor;
    fn_errlog ( c_ServiceName, "S31280", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

	while ( 1 )
  {
		i_Frec_exst = 0;
		d_avg_prcs= 0.0; /*** Ver 3.7 ***/

  	EXEC SQL  FETCH   :sys_cursor
              INTO    :st_cntpos_crrnt.c_cln_mtch_accnt,
                      :st_cntpos_crrnt.c_xchng_cd,
                      :st_cntpos_crrnt.c_prd_typ,
                      :st_cntpos_crrnt.c_ctgry_indstk,
                      :st_cntpos_crrnt.c_undrlyng,
                      :c_exp_dt,
                      :st_cntpos_crrnt.c_exer_typ,
                      :st_cntpos_crrnt.c_cntrct_tag,
                      :st_cntpos_crrnt.l_ibuy_qty,
                      :st_cntpos_crrnt.d_ibuy_ord_val,
                      :st_cntpos_crrnt.l_isell_qty,
                      :st_cntpos_crrnt.d_isell_ord_val,
                      :st_cntpos_crrnt.l_exbuy_qty,
                      :st_cntpos_crrnt.d_exbuy_ord_val,
                      :st_cntpos_crrnt.l_exsell_qty,
                      :st_cntpos_crrnt.d_exsell_ord_val,
                      :st_cntpos_crrnt.l_buy_exctd_qty,
                      :st_cntpos_crrnt.l_sell_exctd_qty,
                      :st_cntpos_crrnt.c_opnpstn_flw,
                      :st_cntpos_crrnt.l_opnpstn_qty,
                      :st_cntpos_crrnt.d_org_opn_val,
                      :st_cntpos_crrnt.d_mtm_opn_val,
                      :st_cntpos_crrnt.d_imtm_opn_val,
											:d_avg_prcs; /*** Ver 3.7 ***/

		if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        break;
      }

      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      fn_errlog ( c_ServiceName, "S31285", SQLMSG, ptr_st_err_msg->c_err_msg );
      return -1;
    }

		SETNULL( c_exp_dt );

    strcpy ( st_cntpos_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
    rtrim(st_cntpos_crrnt.c_xchng_cd);
    rtrim(st_cntpos_crrnt.c_undrlyng);
    rtrim(st_cntpos_crrnt.c_expry_dt);

		strcpy(ptr_st_pstn_actn->c_cln_mtch_accnt,st_cntpos_crrnt.c_cln_mtch_accnt);
		strcpy(ptr_st_pstn_actn->c_xchng_cd,st_cntpos_crrnt.c_xchng_cd);
		strcpy(ptr_st_pstn_actn->c_expry_dt,st_cntpos_crrnt.c_expry_dt);
		strcpy(ptr_st_pstn_actn->c_undrlyng,st_cntpos_crrnt.c_undrlyng);
		ptr_st_pstn_actn->c_exrc_typ		=	st_cntpos_crrnt.c_exer_typ;
		ptr_st_pstn_actn->c_prd_typ			=	st_cntpos_crrnt.c_prd_typ	;
		ptr_st_pstn_actn->c_opt_typ			=	'*';
		ptr_st_pstn_actn->l_strike_prc	=	0	;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"NRML2SPN c_cln_mtch_accnt IS :%s:",ptr_st_pstn_actn->c_cln_mtch_accnt);
			fn_userlog(c_ServiceName,"NRML2SPN c_xchng_cd IS :%s:",ptr_st_pstn_actn->c_xchng_cd);
			fn_userlog(c_ServiceName,"NRML2SPN c_expry_dt IS :%s:",ptr_st_pstn_actn->c_expry_dt);
			fn_userlog(c_ServiceName,"NRML2SPN c_undrlyng  IS :%s:",ptr_st_pstn_actn->c_undrlyng);
			fn_userlog(c_ServiceName,"NRML2SPN Before Insert Into FCP_FO_SPN_CNTRCT_PSTN");
		}

		EXEC SQL
      SELECT  1
      INTO    :i_Frec_exst
      FROM    FCP_FO_SPN_CNTRCT_PSTN
      WHERE   FCP_CLM_MTCH_ACCNT  = :st_cntpos_crrnt.c_cln_mtch_accnt
      AND     FCP_PRDCT_TYP       = :st_cntpos_crrnt.c_prd_typ
      AND     FCP_XCHNG_CD        = :sql_xchng_cd
      AND     FCP_INDSTK          = :st_cntpos_crrnt.c_ctgry_indstk
      AND     FCP_UNDRLYNG        = :st_cntpos_crrnt.c_undrlyng
      AND     FCP_EXPRY_DT        = :st_cntpos_crrnt.c_expry_dt;

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      fn_errlog ( c_ServiceName, "S31290", SQLMSG, ptr_st_err_msg->c_err_msg );
      return -1;
    }

		if ( SQLCODE	==	NO_DATA_FOUND	)
		{
			i_Frec_exst	=	0;
		}

		if ( i_Frec_exst	==	0	)
		{

			EXEC SQL
				INSERT INTO	FCP_FO_SPN_CNTRCT_PSTN
									(	FCP_CLM_MTCH_ACCNT,
										FCP_XCHNG_CD,
										FCP_PRDCT_TYP,
										FCP_INDSTK,
										FCP_UNDRLYNG,
										FCP_EXPRY_DT,
										FCP_EXER_TYP,
										FCP_STRK_PRC,
										FCP_OPT_TYP,
										FCP_IBUY_QTY,
										FCP_IBUY_ORD_VAL,
										FCP_ISELL_QTY,
										FCP_ISELL_ORD_VAL,
										FCP_EXBUY_QTY,
										FCP_EXBUY_ORD_VAL,
										FCP_EXSELL_QTY,
										FCP_EXSELL_ORD_VAL,
										FCP_BUY_EXCTD_QTY,
										FCP_SELL_EXCTD_QTY,
										FCP_OPNPSTN_FLW,
										FCP_OPNPSTN_QTY,
										FCP_OPNPSTN_VAL,
										FCP_EXRC_QTY,
										FCP_ASGND_QTY,
										FCP_OPT_PREMIUM,
										FCP_MTM_OPN_VAL,
										FCP_IMTM_OPN_VAL,
                    FCP_AVG_PRC        /* Ver 3.7 */
									)
								VALUES
									(	:st_cntpos_crrnt.c_cln_mtch_accnt,
										:st_cntpos_crrnt.c_xchng_cd,
										:st_cntpos_crrnt.c_prd_typ,
										:st_cntpos_crrnt.c_ctgry_indstk,
										:st_cntpos_crrnt.c_undrlyng,
										:st_cntpos_crrnt.c_expry_dt,
										:st_cntpos_crrnt.c_exer_typ,
										0,
										'*',
										:st_cntpos_crrnt.l_ibuy_qty,
                  	:st_cntpos_crrnt.d_ibuy_ord_val,
                  	:st_cntpos_crrnt.l_isell_qty,
                  	:st_cntpos_crrnt.d_isell_ord_val,
                  	:st_cntpos_crrnt.l_exbuy_qty,
                  	:st_cntpos_crrnt.d_exbuy_ord_val,
                  	:st_cntpos_crrnt.l_exsell_qty,
                  	:st_cntpos_crrnt.d_exsell_ord_val,
                  	:st_cntpos_crrnt.l_buy_exctd_qty,
                  	:st_cntpos_crrnt.l_sell_exctd_qty,
										:st_cntpos_crrnt.c_opnpstn_flw,
                  	:st_cntpos_crrnt.l_opnpstn_qty,
                /*  	:st_cntpos_crrnt.d_org_opn_val,	Commented in Ver 1.9 */
										:st_cntpos_crrnt.d_mtm_opn_val,		 /* Added in Ver 1.9 */
										0,
										0,
										0,
										:st_cntpos_crrnt.d_mtm_opn_val,
										:st_cntpos_crrnt.d_imtm_opn_val,
                    :d_avg_prcs       /* Ver 3.7 */
									);

			if ( SQLCODE != 0 )
    	{
    		EXEC SQL CLOSE :sys_cursor;
     		EXEC SQL FREE :sys_cursor;
     		fn_errlog ( c_ServiceName, "S31295", SQLMSG, ptr_st_err_msg->c_err_msg );
     		return -1;
   		}

		}
		else if ( i_Frec_exst == 1 )
		{
			EXEC SQL
				UPDATE	FCP_FO_SPN_CNTRCT_PSTN
				SET		 	FCP_IBUY_QTY        = :st_cntpos_crrnt.l_ibuy_qty,
                FCP_IBUY_ORD_VAL    = :st_cntpos_crrnt.d_ibuy_ord_val,
                FCP_ISELL_QTY       =	:st_cntpos_crrnt.l_isell_qty,
                FCP_ISELL_ORD_VAL   =	:st_cntpos_crrnt.d_isell_ord_val,
                FCP_EXBUY_QTY       =	:st_cntpos_crrnt.l_exbuy_qty,
                FCP_EXBUY_ORD_VAL   =	:st_cntpos_crrnt.d_exbuy_ord_val,
                FCP_EXSELL_QTY      =	:st_cntpos_crrnt.l_exsell_qty,
                FCP_EXSELL_ORD_VAL  =	:st_cntpos_crrnt.d_exsell_ord_val,
                FCP_BUY_EXCTD_QTY   = :st_cntpos_crrnt.l_buy_exctd_qty,
                FCP_SELL_EXCTD_QTY  = :st_cntpos_crrnt.l_sell_exctd_qty,
                FCP_OPNPSTN_FLW     = :st_cntpos_crrnt.c_opnpstn_flw,
                FCP_OPNPSTN_QTY     = :st_cntpos_crrnt.l_opnpstn_qty,
          /*      FCP_OPNPSTN_VAL     = :st_cntpos_crrnt.d_org_opn_val,		Commented in Ver 1.9 */
                FCP_OPNPSTN_VAL     = :st_cntpos_crrnt.d_mtm_opn_val,				/* Added in Ver 1.9 */			
                FCP_MTM_OPN_VAL     = :st_cntpos_crrnt.d_mtm_opn_val,
                FCP_IMTM_OPN_VAL    = :st_cntpos_crrnt.d_imtm_opn_val,
                FCP_AVG_PRC         = :d_avg_prcs          /* Ver 3.7 */
        WHERE 	FCP_CLM_MTCH_ACCNT  = :st_cntpos_crrnt.c_cln_mtch_accnt
        AND     FCP_XCHNG_CD        = :sql_xchng_cd
        AND     FCP_PRDCT_TYP       = :st_cntpos_crrnt.c_prd_typ
        AND     FCP_INDSTK          = :st_cntpos_crrnt.c_ctgry_indstk
        AND     FCP_UNDRLYNG        = :st_cntpos_crrnt.c_undrlyng
        AND     FCP_EXPRY_DT        = :st_cntpos_crrnt.c_expry_dt;

      if ( SQLCODE != 0 )
      {
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31300", SQLMSG, ptr_st_err_msg->c_err_msg );
        return -1;
      }
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"NRML2SPN After Insert Into FCP_FO_SPN_CNTRCT_PSTN");
    	fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_exp_dt.arr );
    	fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntpos_crrnt.l_ibuy_qty );
    	fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntpos_crrnt.d_ibuy_ord_val );
    	fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntpos_crrnt.l_isell_qty );
    	fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntpos_crrnt.d_isell_ord_val );
    	fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntpos_crrnt.l_exbuy_qty );
    	fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntpos_crrnt.d_exbuy_ord_val );
    	fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntpos_crrnt.l_exsell_qty );
    	fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", st_cntpos_crrnt.d_exsell_ord_val );
    	fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntpos_crrnt.l_buy_exctd_qty );
    	fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntpos_crrnt.l_sell_exctd_qty );
    	fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntpos_crrnt.l_opnpstn_qty );
    	fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntpos_crrnt.d_org_opn_val );
    	fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntpos_crrnt.d_mtm_opn_val );
		}

    memcpy ( &st_cntpos_old,&st_cntpos_crrnt,sizeof(st_cntpos_old ) );

   	li_temp_qty = st_cntpos_crrnt.l_opnpstn_qty;

   	li_flg_tmp_qty = st_cntpos_crrnt.l_opnpstn_qty;

   	fn_add_pos_in_val	(	li_temp_qty * (-1),
                       	st_cntpos_crrnt.d_org_opn_val,
                       	li_temp_qty,
                       	&(st_cntpos_crrnt.l_opnpstn_qty),
                       	&(st_cntpos_crrnt.d_org_opn_val)
	 										);

		fn_add_pos_in_val	(	li_temp_qty * (-1),
                       	st_cntpos_crrnt.d_mtm_opn_val,
                       	li_temp_qty,
                       	&li_temp_qty,
                       	&(st_cntpos_crrnt.d_mtm_opn_val)
 											);

		if ( li_flg_tmp_qty > 0 )
   	{
			if(DEBUG_MSG_LVL_0)
			{
     		fn_userlog(c_ServiceName,"NRML2SPN Inside li_flg_tmp_qty > 0");
			}
     	st_cntpos_crrnt.l_sell_exctd_qty = (-1) * st_cntpos_crrnt.l_buy_exctd_qty ;
   	}
   	else if ( li_flg_tmp_qty < 0 )
   	{
			if(DEBUG_MSG_LVL_0)
			{
     		fn_userlog(c_ServiceName,"NRML2SPN Inside li_flg_tmp_qty < 0");
			}
     	st_cntpos_crrnt.l_buy_exctd_qty = (-1) * st_cntpos_crrnt.l_sell_exctd_qty ;
   	}

		if(DEBUG_MSG_LVL_3)
		{
   		fn_userlog(c_ServiceName,"NRML2SPN st_cntpos_crrnt.l_sell_exctd_qty :%ld:",st_cntpos_crrnt.l_sell_exctd_qty);
 	  	fn_userlog(c_ServiceName,"NRML2SPN st_cntpos_crrnt.l_buy_exctd_qty  :%ld:",st_cntpos_crrnt.l_buy_exctd_qty);
		}

    memcpy ( &st_cntpos_md_rc,&st_cntpos_crrnt,sizeof( st_cntpos_md_rc ) );
    fn_sum_clspos ( st_cntpos_crrnt,ptr_st_und_tobe_pstn);

		if ( st_cntpos_md_rc.l_opnpstn_qty > 0 )
  	{
    	st_cntpos_md_rc.c_opnpstn_flw = BUY;
  	}
  	else if ( st_cntpos_md_rc.l_opnpstn_qty < 0 )
  	{
    	st_cntpos_md_rc.c_opnpstn_flw = SELL;
  	}
  	else
  	{
    	st_cntpos_md_rc.c_opnpstn_flw = NEUTRAL;
  	}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"NRML2SPN Before Update.");
		}

		EXEC SQL
  		UPDATE  FFP_FO_FUTURES_PSTN
    	SET     FFP_IBUY_QTY       = :st_cntpos_md_rc.l_ibuy_qty,
      	      FFP_IBUY_ORD_VAL   = :st_cntpos_md_rc.d_ibuy_ord_val,
        	    FFP_ISELL_QTY      = :st_cntpos_md_rc.l_isell_qty,
          	  FFP_ISELL_ORD_VAL  = :st_cntpos_md_rc.d_isell_ord_val,
            	FFP_EXBUY_QTY      = :st_cntpos_md_rc.l_exbuy_qty,
      	      FFP_EXBUY_ORD_VAL  = :st_cntpos_md_rc.d_exbuy_ord_val,
     	       	FFP_EXSELL_QTY     = :st_cntpos_md_rc.l_exsell_qty,
            	FFP_EXSELL_ORD_VAL = :st_cntpos_md_rc.d_exsell_ord_val,
            	FFP_BUY_EXCTD_QTY  = :st_cntpos_md_rc.l_buy_exctd_qty,
            	FFP_SELL_EXCTD_QTY = :st_cntpos_md_rc.l_sell_exctd_qty,
            	FFP_OPNPSTN_FLW    = :st_cntpos_md_rc.c_opnpstn_flw,
            	FFP_OPNPSTN_QTY    = :st_cntpos_md_rc.l_opnpstn_qty,
            	FFP_OPNPSTN_VAL    = :st_cntpos_md_rc.d_org_opn_val,
            	FFP_MTM_OPN_VAL    = :st_cntpos_md_rc.d_mtm_opn_val
    	WHERE   FFP_CLM_MTCH_ACCNT = :st_cntpos_crrnt.c_cln_mtch_accnt
    	AND     FFP_XCHNG_CD       = :st_cntpos_crrnt.c_xchng_cd
    	AND     FFP_PRDCT_TYP      = :st_cntpos_crrnt.c_prd_typ
    	AND     FFP_UNDRLYNG       = :st_cntpos_crrnt.c_undrlyng
    	AND     FFP_EXPRY_DT       = to_date(:st_cntpos_crrnt.c_expry_dt,'DD-Mon-YYYY')
    	AND     FFP_EXER_TYP       = :st_cntpos_crrnt.c_exer_typ
    	AND     FFP_CNTRCT_TAG     = :st_cntpos_crrnt.c_cntrct_tag;

  	if ( SQLCODE != 0 )
  	{
    	fn_errlog(c_ServiceName, "S31305", SQLMSG, ptr_st_err_msg->c_err_msg );
    	return -1;
  	}

	}

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

	return 0;
}


int fn_opt_clsout ( char 		*c_ServiceName,
                    struct	st_cntopt_pos *ptr_st_opt_tobe_pstn,	
                    struct 	st_pstn_actn  *ptr_st_pstn_actn,
										char    c_drcr_flg,
                    char  	*c_err_msg
                  )

{
  char c_narration_id[4];
  char c_dr_without_lmt_flg;
 	char sql_cln_mtch_accnt[11];
 	char sql_xchng_cd[4];
 	char sql_prd_typ;
 	char sql_cntrct_tag;
 	char sql_undrlyng[7];
	char c_indstk;
	char c_exer_typ;
	char c_opt_typ;
	char c_expry_dt[12];

 	varchar c_exp_dt[LEN_DATE];

	int i_returncode;
  int i_Orec_exst = 0;
  double d_dlvry_mrgn = 0.0; /*** ver 3.4 ***/
  char   c_fcp_mtm_flg = '\0'; /*** ver 3.4 ***/

	long int li_temp_qty;
  long int li_flg_tmp_qty;
	long int l_strike_prc;

  double d_min_mrgn = 0.0;
  double d_curr_TLM = 0.0;
 	double d_balance_amt;
 	double d_bal_to_apply;

	sql_cursor     optn_cursor;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Inside function fn_opt_clsout.");
	}

	struct  st_cntopt_pos	st_cntopt_crrnt;
  struct  st_cntopt_pos	st_cntopt_old;

	strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
  strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
	strcpy(c_expry_dt,ptr_st_pstn_actn->c_expry_dt);
  sql_prd_typ		= ptr_st_pstn_actn->c_prd_typ;
	c_indstk			=	ptr_st_pstn_actn->c_ctgry_indstk;						
	c_exer_typ		= ptr_st_pstn_actn->c_exrc_typ;
	c_opt_typ			= ptr_st_pstn_actn->c_opt_typ;
	l_strike_prc	=	ptr_st_pstn_actn->l_strike_prc;

	rtrim(c_expry_dt);


	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"OPTION sql_cln_mtch_accnt Is :%s:",sql_cln_mtch_accnt);
		fn_userlog(c_ServiceName,"OPTION sql_xchng_cd Is :%s:",sql_xchng_cd);
		fn_userlog(c_ServiceName,"OPTION sql_undrlyng Is :%s:",sql_undrlyng);
		fn_userlog(c_ServiceName,"OPTION c_expry_dt Is :%s:",c_expry_dt);
		fn_userlog(c_ServiceName,"OPTION sql_prd_typ Is :%c:",sql_prd_typ);
		fn_userlog(c_ServiceName,"OPTION c_indstk Is :%c:",c_indstk);
		fn_userlog(c_ServiceName,"OPTION c_exer_typ Is :%c:",c_exer_typ);
		fn_userlog(c_ServiceName,"OPTION c_opt_typ Is :%c:",c_opt_typ);
		fn_userlog(c_ServiceName,"OPTION l_strike_prc Is :%ld:",l_strike_prc);
	}


	EXEC SQL ALLOCATE :optn_cursor;

	EXEC SQL EXECUTE
      BEGIN
         OPEN 	:optn_cursor FOR
				 SELECT	FOP_CLM_MTCH_ACCNT,
								FOP_XCHNG_CD,
								FOP_PRDCT_TYP,
								FOP_INDSTK,
								FOP_UNDRLYNG,
								FOP_EXPRY_DT,
								FOP_STRK_PRC,
								FOP_EXER_TYP,
								FOP_OPT_TYP,
								FOP_IBUY_QTY,
								FOP_IBUY_ORD_VAL,
								FOP_ISELL_QTY,
								FOP_ISELL_ORD_VAL,
								FOP_EXBUY_QTY,
								FOP_EXBUY_ORD_VAL,
								FOP_EXSELL_QTY,
								FOP_EXSELL_ORD_VAL,
								FOP_BUY_EXCTD_QTY,
								FOP_SELL_EXCTD_QTY,
								FOP_OPNPSTN_FLW,
								FOP_OPNPSTN_QTY,
								FOP_OPNPSTN_VAL,
								FOP_UORDR_MRGN,
								FOP_UEXCTD_MRGN,
								FOP_EXRC_QTY,
								FOP_DP_QTY,
								FOP_ASGND_QTY,
								FOP_ORD_BLKD_QTY,
								FOP_TRD_BLKD_QTY,
								FOP_IEXRC_QTY,
								FOP_EXEXRC_QTY,
								FOP_TRGGR_PRC,
								FOP_IDONTEXRC_QTY,
								FOP_EXDONTEXRC_QTY,
                NVL( FOP_UDLVRY_MRGN , 0.0 ), /**** ver 3.4 ***/
                NVL( FOP_MTM_FLG , 'O' ) /*** ver 3.4 ***/
					FROM	FOP_FO_OPTIONS_PSTN
					WHERE	FOP_CLM_MTCH_ACCNT	=	:sql_cln_mtch_accnt
          AND   FOP_XCHNG_CD        = :sql_xchng_cd
					AND		FOP_PRDCT_TYP				=	:sql_prd_typ
					AND		FOP_INDSTK					=	:c_indstk
					AND		FOP_UNDRLYNG				=	:sql_undrlyng
					AND		FOP_EXPRY_DT				=	:c_expry_dt
					AND		FOP_STRK_PRC				=	:l_strike_prc
					AND		FOP_EXER_TYP				=	:c_exer_typ
					AND		FOP_OPT_TYP					=	:c_opt_typ	;
			END;
		END-EXEC;

		if ( SQLCODE != 0 )
  	{
    	EXEC SQL FREE :optn_cursor;
    	fn_errlog ( c_ServiceName, "S31310", SQLMSG, ptr_st_err_msg->c_err_msg );
    	return FAILURE;
  	}

		while ( 1 )
		{
			i_Orec_exst = 0;  /*** Ver 1.1 ***/
			EXEC SQL FETCH	:optn_cursor
							INTO		:st_cntopt_crrnt.c_cln_mtch_accnt,
											:st_cntopt_crrnt.c_xchng_cd,
											:st_cntopt_crrnt.c_prd_typ,
											:st_cntopt_crrnt.c_ctgry_indstk,
											:st_cntopt_crrnt.c_undrlyng,
											:c_exp_dt,
											:st_cntopt_crrnt.l_strike_prc,
											:st_cntopt_crrnt.c_exrc_typ,
											:st_cntopt_crrnt.c_opt_typ,
											:st_cntopt_crrnt.l_ibuy_qty,
											:st_cntopt_crrnt.d_ibuy_ord_vl,
											:st_cntopt_crrnt.l_isell_qty,
											:st_cntopt_crrnt.d_isell_ord_vl,
											:st_cntopt_crrnt.l_exbuy_qty,
											:st_cntopt_crrnt.d_exbuy_ord_vl,
											:st_cntopt_crrnt.l_exsell_qty,
											:st_cntopt_crrnt.d_exsell_ord_vl,
											:st_cntopt_crrnt.l_buy_exctd_qty,
											:st_cntopt_crrnt.l_sell_exctd_qty,
											:st_cntopt_crrnt.c_opnpstn_flw,
											:st_cntopt_crrnt.l_opnpstn_qty,
											:st_cntopt_crrnt.d_org_opn_val,
											:st_cntopt_crrnt.d_ordr_mrgn,
											:st_cntopt_crrnt.d_trd_mrgn,
											:st_cntopt_crrnt.l_exrc_qty,
											:st_cntopt_crrnt.l_ord_dp_qty,
											:st_cntopt_crrnt.l_asgnd_qty,
											:st_cntopt_crrnt.l_blkd_ordr_qty,
											:st_cntopt_crrnt.l_blkd_trd_qty,
											:st_cntopt_crrnt.l_iexrc_qty,
											:st_cntopt_crrnt.l_exexrc_qty,
											:st_cntopt_crrnt.l_mtm_trg_prc,
											:st_cntopt_crrnt.l_idont_exrc_qty,
											:st_cntopt_crrnt.l_exdont_exrc_qty,
                      :d_dlvry_mrgn, /*** ver 3.4 ***/
                      :c_fcp_mtm_flg; /*** ver 3.4 ***/

			if ( SQLCODE !=	0	)
			{
				if ( SQLCODE == NO_DATA_FOUND )
      	{
					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"Option NO DATA FOUND.");
					}
       		break;
      	}

      	EXEC SQL CLOSE 	:optn_cursor;
      	EXEC SQL FREE 	:optn_cursor;
      	fn_errlog ( c_ServiceName, "S31315", SQLMSG, ptr_st_err_msg->c_err_msg );
      	return -1;

			}

			SETNULL( c_exp_dt );

			strcpy ( st_cntopt_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
 			rtrim(st_cntopt_crrnt.c_xchng_cd);
 			rtrim(st_cntopt_crrnt.c_undrlyng);
 			rtrim(st_cntopt_crrnt.c_expry_dt);

		  EXEC SQL
       	SELECT  1
        INTO    :i_Orec_exst
        FROM    FCP_FO_SPN_CNTRCT_PSTN
        WHERE   FCP_CLM_MTCH_ACCNT  = :st_cntopt_crrnt.c_cln_mtch_accnt
				AND			FCP_XCHNG_CD				=	:st_cntopt_crrnt.c_xchng_cd
        AND     FCP_PRDCT_TYP       = :st_cntopt_crrnt.c_prd_typ
        AND     FCP_INDSTK          = :st_cntopt_crrnt.c_ctgry_indstk
        AND     FCP_UNDRLYNG        = :st_cntopt_crrnt.c_undrlyng
        AND     FCP_EXPRY_DT        = :st_cntopt_crrnt.c_expry_dt
        AND     FCP_STRK_PRC        = :st_cntopt_crrnt.l_strike_prc
        AND     FCP_EXER_TYP        = :st_cntopt_crrnt.c_exrc_typ
        AND     FCP_OPT_TYP         = :st_cntopt_crrnt.c_opt_typ;

     if ( SQLCODE != 0 &&  SQLCODE != NO_DATA_FOUND )
     {
       EXEC SQL CLOSE :optn_cursor;
       EXEC SQL FREE :optn_cursor;
       fn_errlog ( c_ServiceName, "S31320", SQLMSG, ptr_st_err_msg->c_err_msg );
       return -1;
     }


		if ( i_Orec_exst == 0 )
		{
			EXEC SQL
      	INSERT INTO FCP_FO_SPN_CNTRCT_PSTN
                	( FCP_CLM_MTCH_ACCNT,
                  	FCP_XCHNG_CD,
                  	FCP_PRDCT_TYP,
             	    	FCP_INDSTK,
              	    FCP_UNDRLYNG,
                	  FCP_EXPRY_DT,
        	          FCP_EXER_TYP,
          	        FCP_STRK_PRC,
            	      FCP_OPT_TYP,
              	    FCP_IBUY_QTY,
                	  FCP_IBUY_ORD_VAL,
                  	FCP_ISELL_QTY,
           	       	FCP_ISELL_ORD_VAL,
            	      FCP_EXBUY_QTY,
              	    FCP_EXBUY_ORD_VAL,
                	  FCP_EXSELL_QTY,
       	  	        FCP_EXSELL_ORD_VAL,
        	          FCP_BUY_EXCTD_QTY,
                  	FCP_SELL_EXCTD_QTY,
                  	FCP_OPNPSTN_FLW,
                  	FCP_OPNPSTN_QTY,
                  	FCP_OPNPSTN_VAL,
                  	FCP_EXRC_QTY,
                  	FCP_ASGND_QTY,
                  	FCP_OPT_PREMIUM,
                  	FCP_MTM_OPN_VAL,
                  	FCP_IMTM_OPN_VAL,
                    FCP_UDLVRY_MRGN, /*** ver 3.4 ***/
                    FCP_MTM_FLG /*** ver 3.4 ***/
                	)
              	VALUES
									(	
										:st_cntopt_crrnt.c_cln_mtch_accnt,
										:st_cntopt_crrnt.c_xchng_cd,
										:st_cntopt_crrnt.c_prd_typ,
										:st_cntopt_crrnt.c_ctgry_indstk,
										:st_cntopt_crrnt.c_undrlyng,
										:st_cntopt_crrnt.c_expry_dt,
										:st_cntopt_crrnt.c_exrc_typ,
										:st_cntopt_crrnt.l_strike_prc,
										:st_cntopt_crrnt.c_opt_typ,
										:st_cntopt_crrnt.l_ibuy_qty,
										:st_cntopt_crrnt.d_ibuy_ord_vl,
										:st_cntopt_crrnt.l_isell_qty,
										:st_cntopt_crrnt.d_isell_ord_vl,
										:st_cntopt_crrnt.l_exbuy_qty,
										:st_cntopt_crrnt.d_exbuy_ord_vl,
										:st_cntopt_crrnt.l_exsell_qty,
										:st_cntopt_crrnt.d_exsell_ord_vl,
										:st_cntopt_crrnt.l_buy_exctd_qty,
										:st_cntopt_crrnt.l_sell_exctd_qty,
										:st_cntopt_crrnt.c_opnpstn_flw,
										:st_cntopt_crrnt.l_opnpstn_qty,
										:st_cntopt_crrnt.d_org_opn_val,
										:st_cntopt_crrnt.l_exrc_qty,
										:st_cntopt_crrnt.l_asgnd_qty,
										0,
										:st_cntopt_crrnt.d_org_opn_val,
										0,
                    :d_dlvry_mrgn, /*** ver 3.4  ***/
                    :c_fcp_mtm_flg /*** ver 3.4  ***/
									);


				if ( SQLCODE != 0 )
    		{
    			EXEC SQL CLOSE :optn_cursor;
      		EXEC SQL FREE :optn_cursor;
      		fn_errlog ( c_ServiceName, "S31325", SQLMSG, ptr_st_err_msg->c_err_msg );
      		return -1;
    		}

			}
			else if ( i_Orec_exst == 1 )
			{
				EXEC SQL
          UPDATE  FCP_FO_SPN_CNTRCT_PSTN
          SET     FCP_IBUY_QTY        =	:st_cntopt_crrnt.l_ibuy_qty,
                  FCP_IBUY_ORD_VAL    =	:st_cntopt_crrnt.d_ibuy_ord_vl,
                  FCP_ISELL_QTY       = :st_cntopt_crrnt.l_isell_qty,
                  FCP_ISELL_ORD_VAL   = :st_cntopt_crrnt.d_isell_ord_vl,
                  FCP_EXBUY_QTY       =	:st_cntopt_crrnt.l_exbuy_qty,
                  FCP_EXBUY_ORD_VAL   = :st_cntopt_crrnt.d_exbuy_ord_vl,
                  FCP_EXSELL_QTY      = :st_cntopt_crrnt.l_exsell_qty,
                  FCP_EXSELL_ORD_VAL  =	:st_cntopt_crrnt.d_exsell_ord_vl,
                  FCP_BUY_EXCTD_QTY   = :st_cntopt_crrnt.l_buy_exctd_qty,
                  FCP_SELL_EXCTD_QTY  = :st_cntopt_crrnt.l_sell_exctd_qty,
                  FCP_OPNPSTN_FLW     = :st_cntopt_crrnt.c_opnpstn_flw,
                  FCP_OPNPSTN_QTY     = :st_cntopt_crrnt.l_opnpstn_qty,
                  FCP_OPNPSTN_VAL     = :st_cntopt_crrnt.d_org_opn_val,
                  FCP_EXRC_QTY        = :st_cntopt_crrnt.l_exrc_qty,
                  FCP_ASGND_QTY       = :st_cntopt_crrnt.l_asgnd_qty,
                  FCP_MTM_OPN_VAL     = :st_cntopt_crrnt.d_org_opn_val,  /*** Ver 1.2 ***/
                  FCP_UDLVRY_MRGN     = :d_dlvry_mrgn, /*** ver 3.4  ***/
                  FCP_MTM_FLG         = :c_fcp_mtm_flg /*** ver 3.4 ***/ 
          WHERE   FCP_CLM_MTCH_ACCNT  = :st_cntopt_crrnt.c_cln_mtch_accnt
        	AND     FCP_XCHNG_CD        = :st_cntopt_crrnt.c_xchng_cd
          AND     FCP_PRDCT_TYP       = :st_cntopt_crrnt.c_prd_typ
          AND     FCP_INDSTK          = :st_cntopt_crrnt.c_ctgry_indstk
          AND     FCP_UNDRLYNG        = :st_cntopt_crrnt.c_undrlyng
          AND     FCP_EXPRY_DT        = :st_cntopt_crrnt.c_expry_dt
          AND     FCP_STRK_PRC        = :st_cntopt_crrnt.l_strike_prc
          AND     FCP_EXER_TYP        = :st_cntopt_crrnt.c_exrc_typ
          AND     FCP_OPT_TYP         = :st_cntopt_crrnt.c_opt_typ;

        if ( SQLCODE != 0 )
        {
          EXEC SQL CLOSE :optn_cursor;
          EXEC SQL FREE :optn_cursor;
          fn_errlog ( c_ServiceName, "S31330", SQLMSG, ptr_st_err_msg->c_err_msg );
          return -1;
        }

			}

			if(DEBUG_MSG_LVL_3)
			{
    		fn_userlog(c_ServiceName,"NRML2SPN After Insert Into FCP_FO_SPN_CNTRCT_PSTN");
			}

			/*** Commented in Ver 1.7 At position level there is no premium for option buy position 

			if ( st_cntopt_crrnt.c_prd_typ == 'O' && st_cntopt_crrnt.l_opnpstn_qty > 0 )
    	{
      	EXEC SQL
        	UPDATE  FCP_FO_SPN_CNTRCT_PSTN
        	SET     FCP_OPT_PREMIUM     = :st_cntopt_crrnt.d_org_opn_val
        	WHERE   FCP_CLM_MTCH_ACCNT  = :st_cntopt_crrnt.c_cln_mtch_accnt
        	AND     FCP_XCHNG_CD        = :st_cntopt_crrnt.c_xchng_cd
        	AND     FCP_PRDCT_TYP       = :st_cntopt_crrnt.c_prd_typ
        	AND     FCP_INDSTK          = :st_cntopt_crrnt.c_ctgry_indstk
        	AND     FCP_UNDRLYNG        = :st_cntopt_crrnt.c_undrlyng
        	AND     FCP_EXPRY_DT        = :st_cntopt_crrnt.c_expry_dt
        	AND     FCP_EXER_TYP        = :st_cntopt_crrnt.c_exrc_typ
        	AND     FCP_STRK_PRC        = :st_cntopt_crrnt.l_strike_prc
        	AND     FCP_OPT_TYP         = :st_cntopt_crrnt.c_opt_typ;

		 		if ( SQLCODE != 0 )
      	{
        	EXEC SQL CLOSE :optn_cursor;
        	EXEC SQL FREE :optn_cursor;
        	fn_errlog ( c_ServiceName, "S31335", SQLMSG, ptr_st_err_msg->c_err_msg );
        	return -1;
      	}
    }

		**********************************************************************************/

      memcpy ( &st_cntopt_old,&st_cntopt_crrnt,sizeof(st_cntopt_old ) );

			ptr_st_pstn_actn->l_orgnl_qty 	= st_cntopt_crrnt.l_opnpstn_qty * -1;
      ptr_st_pstn_actn->c_trnsctn_flw = st_cntopt_crrnt.c_opnpstn_flw;

      li_temp_qty 		= st_cntopt_crrnt.l_opnpstn_qty;
      li_flg_tmp_qty 	=	st_cntopt_crrnt.l_opnpstn_qty;

      fn_add_pos_in_val ( li_temp_qty * (-1),
                          st_cntopt_crrnt.d_org_opn_val,
                          li_temp_qty,
                          &(st_cntopt_crrnt.l_opnpstn_qty),
                          &(st_cntopt_crrnt.d_org_opn_val ) );

    if ( li_flg_tmp_qty > 0 )
    {
   		st_cntopt_crrnt.l_sell_exctd_qty = (-1) * st_cntopt_crrnt.l_buy_exctd_qty ;
    }
    else if ( li_flg_tmp_qty < 0 )
    {
    	st_cntopt_crrnt.l_buy_exctd_qty = (-1) * st_cntopt_crrnt.l_sell_exctd_qty ;
    }

    memcpy ( ptr_st_opt_tobe_pstn,&st_cntopt_crrnt,sizeof( st_cntopt_crrnt) );
		
	}

	strcpy( c_narration_id , MARGIN_ADJ_ON_CLOSE_OUT);
	
	d_curr_TLM = st_cntopt_crrnt.d_trd_mrgn ;

	if ( d_curr_TLM != 0 )
	{
		d_balance_amt  = 0.0;   /*** Ver 1.3 ***/

  	i_returncode = fn_upd_spnlimits( c_ServiceName,
                                  ptr_st_pstn_actn,
                                  ptr_st_err_msg,
                                  RELEASE_OF_TRADE_MRGN,
                                  DEBIT_WITHOUT_LIMIT,
                                  d_curr_TLM,
                                  &d_balance_amt);
    if ( i_returncode != 0 )
    {
			EXEC SQL FREE :optn_cursor;
      return i_returncode;
   	}
  }

	ptr_st_opt_tobe_pstn->l_mtm_trg_prc  = 0;
  ptr_st_opt_tobe_pstn->d_trd_mrgn     = 0.0;

	return 0;

}


int fn_crt_spn_pstn ( char *c_ServiceName,
											struct st_pstn_actn *ptr_st_pstn_actn,
											char	c_drcr_flg,
                      char  *c_err_msg,
											double *d_required_amount /*** Ver 3.3 ***/
                    )
{

	FBFR32 *ptr_fml_ibuf;
 	FBFR32 *ptr_fml_obuf;

 	char c_narration_id[4];
 	char c_dr_without_lmt_flg;
	char c_prmum_dr_without_lmt_flg;
 	char c_pos_avl;
 	char c_inp_strng1[ 8000 ];
 	char c_inp_strng11[ 8000 ];
 	char c_inp_strng2[ 8000 ];
 	char c_inp_strng22[ 8000 ];
 	char c_inp_strng[ 16000 ];
 	char c_op_strng[ 16000 ];
 	char c_op_strng1[ 16000 ];
 	char c_op_strng2[ 16000 ];
 	char c_seq_num1[12000];
 	char c_seq_num2[12000];
 	char c_max_opn_qty[200];
 	char c_min_opn_qty[200];
 	char c_ltp[2000];
 	char c_strk_prc[20];
 	char c_mrgn_indctr[3];
 	char c_opseq_num1[20];
 	char c_opseq_num2[20];
 	char c_mtch_accnt1[11];
 	char c_mtch_accnt2[11];
 	char c_spn_mrgn1[20];
 	char c_spn_mrgn2[20];
 	char c_nov1[20];
 	char c_nov2[20];
 	char c_total_mrgn1[20];
 	char c_total_mrgn2[20];
 	char c_expry_dt[10];
	char c_xchng_cd1[3];				/**** Ver 2.3 ***/
	char c_xchng_cd2[3];				/**** Ver 2.3 ***/
	char c_mrgn_insufficient_flg = '\0';  /**** Ver 3.3 ***/
 	char *null_ptr  = 0;
	char c_balance_flg = 'N';   /*** Ver 3.3 ***/

 	int i_returncode;
	int i_rec_cnt	=	0;
  int i_rtrn_cd;
	int i_expsr_rtrn;
	int i_cntrct_cnt = 0;		/*** Ver 1.1 ***/

	long  l_max_opn_qty;
	long  l_min_opn_qty;
	long  l_temp_qty;
	long  l_prtfl_seq1;
	long  l_prtfl_seq2;
	long  li_len_tobuf;
	long  l_length1;
	long  l_length2;
	/*** long  l_strike_prc;	*** Ver 1.3 ***/
	long  l_cntr  = 0;
	long  l_prmum_qty;
  long  l_basket_id;
	long	l_buy_qty;
	long	l_sell_qty;

	double d_diff_mrgn					=	0.0;
	double d_diff_pl						=	0.0;
	double d_balance_amt				=	0.0;
	double d_bal_to_apply				=	0.0;
	double d_ltp								=	0.0;
	double d_clsng_prc					=	0.0;
	double d_spn_mrgn1					=	0.0;
	double d_spn_mrgn2					=	0.0;
	double d_spn_mrgn						=	0.0;
	double d_nov1								=	0.0;
	double d_nov2								=	0.0;
	double d_nov								=	0.0;
	double d_total_mrgn1				=	0.0;
	double d_total_mrgn2				=	0.0;	
	double d_total_mrgn					=	0.0;
	double d_cntrct_pl    			= 0.0;
	double d_ntnl_pl      			= 0.0;
	double d_blckd_amnt   			= 0.0;
	double d_mrgn_blkd    			= 0.0;
  double d_intl_mrgn					=	0.0;		
	double d_initial_mrgn				=	0.0;
	double d_min_mrgn						=	0.0;
	double d_reqd_initial_mrgn	=	0.0;
	double d_expsr       				= 0.0;
	double d_expsr_mrgn     		= 0.0;
  double d_min_expsr_mrgn 		= 0.0;
	double d_min_expsr					=	0.0;
  double d_mltplr         		= 0.0;
	double d_undrlyng_pl 				= 0.0;
	double d_eba_expr_mrgn			= 0.0;
	double d_blkd_prmum					=	0.0;
	double d_opt_prmum					= 0.0;
	double d_total_prmum				=	0.0;
	double d_oblckd_amnt 				= 0.0;
	double d_strike_prc					= 0.0;		/*** Ver 1.3 ***/
	double d_balance_amt_tmp	  = 0.0;		/** Ver 3.3 **/
	double d_total_amount				= 0.0;		/** Ver 3.3 **/

  /*** Ver 3.8  Starts Here ***/
  int    i_ret_val=0;

  double d_spn_bmrgn1=0;
  double d_bnov1=0;
  double d_total_bmrgn1=0;

  double d_spn_bmrgn2=0;
  double d_bnov2=0;
  double d_total_bmrgn2=0;

  double d_spn_bmrgn=0;
  double d_bnov=0;
  double d_total_bmrgn=0;
  /*** Ver 3.8  Ends here ***/ 

  struct st_fcp_cntrct_pstn  st_cntpos_crrnt;
	struct st_fus_undrlyng_pstn	*ptr_st_und_tobe_pstn;
	struct st_fus_undrlyng_pstn	st_undpstn_tobe;

	MEMSET(st_undpstn_tobe);

	EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;
    char  sql_cln_mtch_accnt[11];
    char  sql_xchng_cd[4];
    char  sql_prd_typ;
    char  sql_undrlyng[7];
    varchar c_exp_dt[LEN_DATE];
    varchar c_trd_dt[12];
    varchar c_stock_cd [20];

  	struct st_fcp_cntrct_pstn st_cntrct_pstn_crrnt  ;
  	struct st_fcp_cntrct_pstn st_cntrct_pstn_old  ;
  	struct st_fcp_cntrct_pstn st_cntrct_pstn_md_rc;

  EXEC SQL END DECLARE SECTION;

  ptr_fml_obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if ( ptr_fml_obuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31340", TPMSG, c_err_msg);
    return -1;
  }

  ptr_fml_ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN*10);  
												/** Ver 1.3 - Size increased by multiple of 10 to accomodate the big sized portfolio**/

  if ( ptr_fml_ibuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31345", TPMSG, c_err_msg);
    tpfree((char *)ptr_fml_obuf);
    return -1;
  }

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Inside Function fn_crt_spn_pstn.");
	}

  strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
  strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Building new underlying position" );
  }

  EXEC  SQL
    SELECT  SPN_PRTFL1_SEQ.nextval
    INTO    :l_prtfl_seq1
    FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31350",SQLMSG, c_err_msg);
    return  -1;
  }

  EXEC  SQL
    SELECT  SPN_PRTFL1_SEQ.nextval
    INTO    :l_prtfl_seq2
    FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31355",SQLMSG, c_err_msg);
    return  -1;
  }

	MEMSET(c_inp_strng);     /*** Ver 1.3 ***/
	MEMSET(c_inp_strng1);  	 /*** Ver 1.3 ***/
	MEMSET(c_inp_strng11);   /*** Ver 1.3 ***/
	MEMSET(c_inp_strng22);   /*** Ver 1.3 ***/
	MEMSET(c_inp_strng2);    /*** Ver 1.3 ***/

  strcpy(c_inp_strng1,"1^");
  strcpy(c_inp_strng2,"|");
	/** Ver 2.3 starts ***/
	if(strcmp(sql_xchng_cd,"NFO") == 0)
	{
  	strcat(c_inp_strng1,"NSE^");
	}
	if(strcmp(sql_xchng_cd,"BFO") == 0)
	{
  	strcat(c_inp_strng1,"BSE^");
	}
	/** Ver 2.3 Ends   ***/
  sprintf(c_seq_num1,"%ld",l_prtfl_seq1);
  sprintf(c_seq_num2,"%ld",l_prtfl_seq2);

	strcat( c_inp_strng1 , c_seq_num1 );
  strcat( c_inp_strng2 , c_seq_num2 );

  strcat(c_inp_strng1,"^");
  strcat(c_inp_strng2,"^");

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"NRML2SPN	sql_cln_mtch_accnt	Is :%s:",sql_cln_mtch_accnt );
		fn_userlog(c_ServiceName,"NRML2SPN sql_xchng_cd Is :%s:",sql_xchng_cd);
		fn_userlog(c_ServiceName,"NRML2SPN sql_undrlyng Is :%s:",sql_undrlyng);
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"NRML2SPN ptr_st_pstn_actn->c_xchng_cd Is :%s:",ptr_st_pstn_actn->c_xchng_cd);
  	fn_userlog(c_ServiceName,"NRML2SPN ptr_st_pstn_actn->c_undrlyng Is :%s:",ptr_st_pstn_actn->c_undrlyng);
  	fn_userlog(c_ServiceName,"NRML2SPN ptr_st_pstn_actn->c_expry_dt Is :%s:",ptr_st_pstn_actn->c_expry_dt);
		fn_userlog(c_ServiceName,"NRML2SPN ptr_st_pstn_actn->c_prd_typ Is :%c:",ptr_st_pstn_actn->c_prd_typ);
		fn_userlog(c_ServiceName,"NRML2SPN ptr_st_pstn_actn->c_exrc_typ Is :%c:",ptr_st_pstn_actn->c_exrc_typ);
		fn_userlog(c_ServiceName,"NRML2SPN ptr_st_pstn_actn->c_opt_typ Is :%c:",ptr_st_pstn_actn->c_opt_typ);
		fn_userlog(c_ServiceName,"NRML2SPN ptr_st_pstn_actn->l_strike_prc Is :%ld:",ptr_st_pstn_actn->l_strike_prc);
	}

	EXEC SQL
    SELECT  FCB_UNDRLYNG_BSKT_ID
    INTO    :l_basket_id
    FROM    FCB_FO_CLN_BSKT_ALLTD
    WHERE   FCB_CLN_LVL = ( SELECT  CLM_CLNT_LVL
                            FROM    CLM_CLNT_MSTR
                            WHERE   CLM_MTCH_ACCNT = :sql_cln_mtch_accnt);
  if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName,"Error While Basket ID .");
    fn_errlog(c_ServiceName,"S31360",SQLMSG, c_err_msg);
    tpfree((char *)ptr_fml_obuf);
    return  -1;
  }


  EXEC SQL ALLOCATE :sys_cursor;

  EXEC SQL EXECUTE
    BEGIN
      OPEN    :sys_cursor FOR
      SELECT  FCP_CLM_MTCH_ACCNT,
              FCP_XCHNG_CD,
              FCP_PRDCT_TYP,
              FCP_INDSTK,
              FCP_UNDRLYNG,
              TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
              FCP_EXER_TYP,
              FCP_STRK_PRC,
              FCP_OPT_TYP,
              FCP_IBUY_QTY,
              FCP_IBUY_ORD_VAL,
              FCP_ISELL_QTY,
              FCP_ISELL_ORD_VAL,
              FCP_EXBUY_QTY,
              FCP_EXBUY_ORD_VAL,
              FCP_EXSELL_QTY,
              FCP_EXSELL_ORD_VAL,
              FCP_BUY_EXCTD_QTY,
              FCP_SELL_EXCTD_QTY,
              FCP_OPNPSTN_FLW,
              FCP_OPNPSTN_QTY,
              FCP_OPNPSTN_VAL,
              FCP_MTM_OPN_VAL,
              FCP_OPT_PREMIUM
        FROM  FCP_FO_SPN_CNTRCT_PSTN
        WHERE FCP_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
        AND   FCP_XCHNG_CD        = :sql_xchng_cd
        AND   FCP_UNDRLYNG        = :sql_undrlyng
		    ORDER BY FCP_EXPRY_DT ASC;
      END;
    END-EXEC;

	
	if ( SQLCODE != 0 )
	{
  	EXEC SQL FREE :sys_cursor;
  	fn_errlog ( c_ServiceName, "S31365", SQLMSG, c_err_msg );
  	return -1;
	}

	c_pos_avl = 'N';

	while ( 1 )
  {
  	d_opt_prmum   		= 0.0;
	  d_expsr_mrgn      = 0.0;
 		d_min_expsr_mrgn  = 0.0;
		d_cntrct_pl				=	0.0;
		d_strike_prc = 0.0;		/*** Ver 1.3 ***/

    MEMSET(c_exp_dt);

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"NRML2SPN 2");
		}

    EXEC SQL FETCH  :sys_cursor
             INTO   :st_cntrct_pstn_crrnt.c_cln_mtch_accnt,
                    :st_cntrct_pstn_crrnt.c_xchng_cd,
                    :st_cntrct_pstn_crrnt.c_prd_typ,
                    :st_cntrct_pstn_crrnt.c_ctgry_indstk,
                    :st_cntrct_pstn_crrnt.c_undrlyng,
                    :c_exp_dt,
                    :st_cntrct_pstn_crrnt.c_exer_typ,
                    :st_cntrct_pstn_crrnt.l_strike_prc,
                    :st_cntrct_pstn_crrnt.c_opt_typ,
                    :st_cntrct_pstn_crrnt.l_ibuy_qty,
                    :st_cntrct_pstn_crrnt.d_ibuy_ord_val,
                    :st_cntrct_pstn_crrnt.l_isell_qty,
                    :st_cntrct_pstn_crrnt.d_isell_ord_val,
                    :st_cntrct_pstn_crrnt.l_exbuy_qty,
                    :st_cntrct_pstn_crrnt.d_exbuy_ord_val,
                    :st_cntrct_pstn_crrnt.l_exsell_qty,
                    :st_cntrct_pstn_crrnt.d_exsell_ord_val,
                    :st_cntrct_pstn_crrnt.l_buy_exctd_qty,
                    :st_cntrct_pstn_crrnt.l_sell_exctd_qty,
                    :st_cntrct_pstn_crrnt.c_opnpstn_flw,
                    :st_cntrct_pstn_crrnt.l_opnpstn_qty,
                    :st_cntrct_pstn_crrnt.d_opnpstn_val,
                    :st_cntrct_pstn_crrnt.d_mtm_opn_val,
                    :d_blkd_prmum;

    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        fn_userlog(c_ServiceName," Inside NO_DATA_FOUND .");
        break;
      }

      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      fn_errlog ( c_ServiceName, "S31370", SQLMSG, c_err_msg );
      return -1;
    }

		i_cntrct_cnt++;							/*** Ver 1.3 ***/

    SETNULL( c_exp_dt );
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"NRML2SPN 3");
		}

		strcpy(st_undpstn_tobe.c_cln_mtch_accnt,st_cntrct_pstn_crrnt.c_cln_mtch_accnt);
		strcpy(st_undpstn_tobe.c_xchng_cd,st_cntrct_pstn_crrnt.c_xchng_cd);
		strcpy(st_undpstn_tobe.c_undrlyng,st_cntrct_pstn_crrnt.c_undrlyng);
		st_undpstn_tobe.c_indstk	=	st_cntrct_pstn_crrnt.c_ctgry_indstk;
		st_undpstn_tobe.c_uopnpstn_flw			=	'N';

		strcpy ( st_cntrct_pstn_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
    rtrim(st_cntrct_pstn_crrnt.c_xchng_cd);
    rtrim(st_cntrct_pstn_crrnt.c_undrlyng);
    rtrim(st_cntrct_pstn_crrnt.c_expry_dt);

		rtrim(ptr_st_pstn_actn->c_xchng_cd);
		rtrim(ptr_st_pstn_actn->c_undrlyng);
		rtrim(ptr_st_pstn_actn->c_expry_dt);

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"NRML2SPN 4");

			fn_userlog(c_ServiceName," Contract st_cntrct_pstn_crrnt.c_xchng_cd Is :%s:",st_cntrct_pstn_crrnt.c_xchng_cd);
			fn_userlog(c_ServiceName," Contract st_cntrct_pstn_crrnt.c_prd_typ Is :%c:",st_cntrct_pstn_crrnt.c_prd_typ);
			fn_userlog(c_ServiceName," Contract st_cntrct_pstn_crrnt.c_undrlyng Is :%s:",st_cntrct_pstn_crrnt.c_undrlyng);
			fn_userlog(c_ServiceName," Contract st_cntrct_pstn_crrnt.c_expry_dt Is :%s:",st_cntrct_pstn_crrnt.c_expry_dt);
			fn_userlog(c_ServiceName," Contract st_cntrct_pstn_crrnt.c_opt_typ Is :%c:",st_cntrct_pstn_crrnt.c_opt_typ);
			fn_userlog(c_ServiceName," Contract	st_cntrct_pstn_crrnt.l_strike_prc	Is :%ld:",st_cntrct_pstn_crrnt.l_strike_prc); 
			fn_userlog(c_ServiceName," Contract st_cntrct_pstn_crrnt.c_exer_typ Is :%c:",st_cntrct_pstn_crrnt.c_exer_typ);
			fn_userlog(c_ServiceName," Input	ptr_st_pstn_actn->c_xchng_cd	Is :%s:",ptr_st_pstn_actn->c_xchng_cd);
			fn_userlog(c_ServiceName," Input	ptr_st_pstn_actn->c_prd_typ	Is :%c:",ptr_st_pstn_actn->c_prd_typ);
			fn_userlog(c_ServiceName," Input	ptr_st_pstn_actn->c_undrlyng Is :%s:",ptr_st_pstn_actn->c_undrlyng);
			fn_userlog(c_ServiceName," Input	ptr_st_pstn_actn->c_expry_dt	Is :%s:",ptr_st_pstn_actn->c_expry_dt);
			fn_userlog(c_ServiceName," Input	ptr_st_pstn_actn->c_opt_typ	Is :%c:",ptr_st_pstn_actn->c_opt_typ);
			fn_userlog(c_ServiceName," Input	ptr_st_pstn_actn->l_strike_prc	Is :%ld:",ptr_st_pstn_actn->l_strike_prc);
			fn_userlog(c_ServiceName," Input	ptr_st_pstn_actn->c_exrc_typ	Is :%c:",ptr_st_pstn_actn->c_exrc_typ);
		}

 
    if( (strcmp(st_cntrct_pstn_crrnt.c_xchng_cd,ptr_st_pstn_actn->c_xchng_cd) == 0 ) &&
        (st_cntrct_pstn_crrnt.c_prd_typ == ptr_st_pstn_actn->c_prd_typ) &&
        (strcmp(st_cntrct_pstn_crrnt.c_undrlyng,ptr_st_pstn_actn->c_undrlyng) == 0 ) &&
        (strcasecmp(st_cntrct_pstn_crrnt.c_expry_dt,ptr_st_pstn_actn->c_expry_dt) == 0 ) &&
        (st_cntrct_pstn_crrnt.c_opt_typ == ptr_st_pstn_actn->c_opt_typ) &&
        (st_cntrct_pstn_crrnt.l_strike_prc == ptr_st_pstn_actn->l_strike_prc) &&
        (st_cntrct_pstn_crrnt.c_exer_typ == ptr_st_pstn_actn->c_exrc_typ) )
    {
			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog(c_ServiceName,"NRML2SPN 5");
			}
      memcpy ( &st_cntrct_pstn_old, &st_cntrct_pstn_crrnt, sizeof(st_cntrct_pstn_old));

      i_returncode =  fn_apply_spn_actn ( c_ServiceName,
                                          ptr_st_pstn_actn,
                                          &st_cntrct_pstn_crrnt,
                                          ptr_st_err_msg );
      if ( i_returncode == -1 )
      {
        fn_errlog( c_ServiceName, "S31375",LIBMSG , c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        tpfree((char *)ptr_fml_obuf);
        tpfree((char *)ptr_fml_ibuf);
        return -1;
      }

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"NRML2SPN 6");
			}
      memcpy ( &st_cntrct_pstn_md_rc, &st_cntrct_pstn_crrnt, sizeof( st_cntrct_pstn_md_rc ));

      c_pos_avl = 'Y';
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"NRML2SPN 7");
		}

		fn_sum_spnpos	(st_cntrct_pstn_crrnt ,&st_undpstn_tobe);

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"NRML2SPN1 st_undpstn_tobe.l_uibuy_qty Is :%ld:",st_undpstn_tobe.l_uibuy_qty);
			fn_userlog(c_ServiceName,"NRML2SPN1 st_undpstn_tobe.d_uibuy_val Is :%lf:",st_undpstn_tobe.d_uibuy_val);
			fn_userlog(c_ServiceName,"NRML2SPN1 st_undpstn_tobe.l_uisell_qty	Is :%ld:",st_undpstn_tobe.l_uisell_qty);
			fn_userlog(c_ServiceName,"NRML2SPN1 st_undpstn_tobe.d_uisell_val	Is :%lf:",st_undpstn_tobe.d_uisell_val);
			fn_userlog(c_ServiceName,"NRML2SPN1 st_undpstn_tobe.l_uexbuy_qty Is :%ld:",st_undpstn_tobe.l_uexbuy_qty);
			fn_userlog(c_ServiceName,"NRML2SPN1 st_undpstn_tobe.d_uexbuy_val	Is :%lf:",st_undpstn_tobe.d_uexbuy_val);
			fn_userlog(c_ServiceName,"NRML2SPN1 st_undpstn_tobe.l_uexsell_qty Is :%ld:",st_undpstn_tobe.l_uexsell_qty);
			fn_userlog(c_ServiceName,"NRML2SPN1 st_undpstn_tobe.d_uexsell_val Is :%lf:",st_undpstn_tobe.d_uexsell_val);
			fn_userlog(c_ServiceName,"NRML2SPN1 st_undpstn_tobe.l_ubuy_exctd_qty Is :%ld:",st_undpstn_tobe.l_ubuy_exctd_qty);
			fn_userlog(c_ServiceName,"NRML2SPN1 st_undpstn_tobe.l_usell_exctd_qty Is :%ld:",st_undpstn_tobe.l_usell_exctd_qty);
			fn_userlog(c_ServiceName,"NRML2SPN1 st_undpstn_tobe.c_uopnpstn_flw Is :%c:",st_undpstn_tobe.c_uopnpstn_flw);
			fn_userlog(c_ServiceName,"NRML2SPN1 st_undpstn_tobe.l_uopnpstn_qty	Is :%ld:",st_undpstn_tobe.l_uopnpstn_qty);
			fn_userlog(c_ServiceName,"NRML2SPN1 st_undpstn_tobe.d_uopnpstn_val	Is :%lf:",st_undpstn_tobe.d_uopnpstn_val);
			fn_userlog(c_ServiceName,"NRML2SPN1 st_undpstn_tobe.d_umtm_opn_val	Is :%lf:",st_undpstn_tobe.d_umtm_opn_val);

		}

    l_max_opn_qty = st_cntrct_pstn_crrnt.l_opnpstn_qty  + fn_maxl(st_cntrct_pstn_crrnt.l_ibuy_qty,st_cntrct_pstn_crrnt.l_exbuy_qty) ;
    l_min_opn_qty = st_cntrct_pstn_crrnt.l_opnpstn_qty  + fn_maxl(abs(st_cntrct_pstn_crrnt.l_isell_qty),abs(st_cntrct_pstn_crrnt.l_exsell_qty)) * -1   ;

		
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Max Opn Qty Is :%ld:",l_max_opn_qty);
			fn_userlog(c_ServiceName,"Min Opn Qty Is :%ld:",l_min_opn_qty);
    	fn_userlog(c_ServiceName,"SPAN  - Before d_opt_prmum Is :%lf:",d_opt_prmum);
    	fn_userlog(c_ServiceName,"SPAN  - Before d_blkd_prmum Is :%lf:",d_blkd_prmum);
		}

		if ( st_cntrct_pstn_crrnt.c_prd_typ ==  'O' )
    {
      l_temp_qty  = fn_minl ( l_max_opn_qty , l_min_opn_qty );
      l_max_opn_qty = l_temp_qty  ;
      l_min_opn_qty = l_temp_qty  ;
		}	
		/****************************************** Commented in ver 1.7
 
      if(	st_undpstn_tobe.l_uopnpstn_qty	> 0 )
      {
				if(DEBUG_MSG_LVL_3)
				{
        	fn_userlog(c_ServiceName,"SPAN Inside Option Buy Position.");
				}
        d_opt_prmum = st_cntrct_pstn_crrnt.d_opnpstn_val;
      }

      d_total_prmum = d_blkd_prmum -  d_opt_prmum ;

			if(DEBUG_MSG_LVL_3)
			{
      	fn_userlog(c_ServiceName,"SPAN  - d_opt_prmum Is :%lf:",d_opt_prmum);
      	fn_userlog(c_ServiceName,"SPAN  - d_total_prmum Is :%lf:",d_total_prmum);
      	fn_userlog(c_ServiceName,"SPAN  - d_blkd_prmum  Is :%lf:",d_blkd_prmum);
				fn_userlog(c_ServiceName,"SPAN  - c_drcr_flg Is :%c:",c_drcr_flg);
			}

			switch ( ptr_st_pstn_actn->l_actn_typ )
 			{
   			case  ORS_NEW_ORD_REQ:

     			strcpy( c_narration_id , ON_ORDER_PLACEMENT);
     			c_prmum_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;

     		break;

   			case  SYSTEM_PLACE_ORDER:

     			strcpy( c_narration_id , ON_ORDER_PLACEMENT);
    	 		c_prmum_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
     		break;

   			default:
     			strcpy( c_err_msg, "Invalid action type");
     			fn_userlog ( c_ServiceName,"Invalid action type");
     			tpfree((char *)ptr_fml_obuf);
     			tpfree((char *)ptr_fml_ibuf);
     			return -1;
     		break;
 			}



			if ( d_total_prmum  <  0 )
      {
				d_balance_amt  = 0.0;   *** Ver 1.3 ***

        i_returncode = fn_upd_spnlimits( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      c_narration_id,
                                      c_prmum_dr_without_lmt_flg,
                                      d_total_prmum,
                                      &d_balance_amt);
        if ( i_returncode != 0 )
        {
          switch ( i_returncode )
          {
            case  INSUFFICIENT_LIMITS :

              fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg );
              EXEC SQL CLOSE :sys_cursor;
              tpfree((char *)ptr_fml_obuf);
              tpfree((char *)ptr_fml_ibuf);
              return INSUFFICIENT_LIMITS  ;

            default:

              fn_errlog( c_ServiceName, "S31380",LIBMSG , c_err_msg );
              EXEC SQL CLOSE :sys_cursor;
              tpfree((char *)ptr_fml_obuf);
              tpfree((char *)ptr_fml_ibuf);
              return -1;
          }
        }
      }

      EXEC SQL
        UPDATE  FCP_FO_SPN_CNTRCT_PSTN
        SET     FCP_OPT_PREMIUM     = :d_total_prmum * (-1)  +  FCP_OPT_PREMIUM
        WHERE   FCP_CLM_MTCH_ACCNT  = :st_cntrct_pstn_crrnt.c_cln_mtch_accnt
        AND     FCP_XCHNG_CD        = :st_cntrct_pstn_crrnt.c_xchng_cd
        AND     FCP_PRDCT_TYP       = :st_cntrct_pstn_crrnt.c_prd_typ
        AND     FCP_UNDRLYNG        = :st_cntrct_pstn_crrnt.c_undrlyng
        AND     FCP_EXPRY_DT        = :c_exp_dt
        AND     FCP_EXER_TYP        = :st_cntrct_pstn_crrnt.c_exer_typ
        AND     FCP_OPT_TYP         = :st_cntrct_pstn_crrnt.c_opt_typ
        AND     FCP_STRK_PRC        = :st_cntrct_pstn_crrnt.l_strike_prc;

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31385", SQLMSG, c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        tpfree((char *)ptr_fml_obuf);
        tpfree((char *)ptr_fml_ibuf);
        return -1;
      }
			
		**********************************/ 

		i_expsr_rtrn  = fn_cal_expsr  ( c_ServiceName,
                                    st_cntrct_pstn_crrnt,
                                    l_basket_id,
                                    &d_expsr_mrgn,
                                    &d_min_expsr_mrgn,
                                    &d_mltplr,
                                    c_err_msg
                                  );

    if ( i_expsr_rtrn != 0 )
    {
       fn_errlog(c_ServiceName, "S31390", LIBMSG, c_err_msg );
       EXEC SQL CLOSE :sys_cursor;
       tpfree((char *)ptr_fml_obuf);
       tpfree((char *)ptr_fml_ibuf);
       return -1;
    }
		
		if(DEBUG_MSG_LVL_3)
		{	
			fn_userlog(c_ServiceName,"NRML2SPN st_cntrct_pstn_crrnt.c_xchng_cd Is :%s:",st_cntrct_pstn_crrnt.c_xchng_cd);
			fn_userlog(c_ServiceName,"NRML2SPN	st_cntrct_pstn_crrnt.c_prd_typ Is :%c:",st_cntrct_pstn_crrnt.c_prd_typ);
			fn_userlog(c_ServiceName,"NRML2SPN st_cntrct_pstn_crrnt.c_undrlyng Is :%s:",st_cntrct_pstn_crrnt.c_undrlyng);
			fn_userlog(c_ServiceName,"NRML2SPN c_exp_dt Is :%s:",c_exp_dt.arr);
			fn_userlog(c_ServiceName,"NRML2SPN st_cntrct_pstn_crrnt.c_exer_typ Is :%c:",st_cntrct_pstn_crrnt.c_exer_typ);
			fn_userlog(c_ServiceName,"NRML2SPN st_cntrct_pstn_crrnt.c_opt_typ Is :%c:",st_cntrct_pstn_crrnt.c_opt_typ);
			fn_userlog(c_ServiceName,"NRML2SPN st_cntrct_pstn_crrnt.l_strike_prc Is :%ld:",st_cntrct_pstn_crrnt.l_strike_prc);
		}


		EXEC SQL
     	SELECT  NVL( FTQ_LST_TRD_PRC , 0),  /*** Ver 1.3 ***/
             	NVL(FTQ_CLS_PRC	, 0 )			 /*** Ver 1.3 ***/
     	INTO    :d_ltp,
      	      :d_clsng_prc
     	FROM    FTQ_FO_TRD_QT
     	WHERE		FTQ_XCHNG_CD	=	:st_cntrct_pstn_crrnt.c_xchng_cd
			AND	   	FTQ_PRDCT_TYP = :st_cntrct_pstn_crrnt.c_prd_typ
     	AND     FTQ_UNDRLYNG  = :st_cntrct_pstn_crrnt.c_undrlyng
     	AND     FTQ_EXPRY_DT  = :c_exp_dt
     	AND     FTQ_EXER_TYP  = :st_cntrct_pstn_crrnt.c_exer_typ
     	AND     FTQ_OPT_TYP   = :st_cntrct_pstn_crrnt.c_opt_typ
     	AND     FTQ_STRK_PRC  = :st_cntrct_pstn_crrnt.l_strike_prc;

   	if(SQLCODE  !=  0  && SQLCODE != NO_DATA_FOUND )  /*** Ver 2.5 NDF handled ***/
   	{
    	fn_errlog ( c_ServiceName, "S31395", SQLMSG, c_err_msg );
     	EXEC SQL CLOSE :sys_cursor;
     	tpfree((char *)ptr_fml_obuf);
     	tpfree((char *)ptr_fml_ibuf);
     	return -1;
   	}

		if( SQLCODE == NO_DATA_FOUND )    /*** Ver 2.5 :NO_DATA_FOUND handling Added For CorpActn Issue ***/
    {
      d_ltp = 0.0;
      d_clsng_prc = 0.0;
    }


		if ( st_cntrct_pstn_crrnt.l_opnpstn_qty != 0 )
    {
    	if ( st_cntrct_pstn_crrnt.c_prd_typ == 'O' && st_cntrct_pstn_crrnt.l_opnpstn_qty < 0 )
      {

				if(DEBUG_MSG_LVL_3)
				{
      		fn_userlog(c_ServiceName,"SPAN - Inside Option Profit / Loss Case.");
					fn_userlog(c_ServiceName,"SPAN - st_cntrct_pstn_crrnt.l_opnpstn_qty Is :%ld:",st_cntrct_pstn_crrnt.l_opnpstn_qty);
					fn_userlog(c_ServiceName,"SPAN - d_clsng_prc Is :%lf:",d_clsng_prc);
					fn_userlog(c_ServiceName,"SPAN - d_ltp Is :%lf:",d_ltp);
				}


        d_cntrct_pl = (double) abs(st_cntrct_pstn_crrnt.l_opnpstn_qty) * ( d_clsng_prc - d_ltp );

				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"SPAN - d_cntrct_pl Is :%lf:",d_cntrct_pl);
				}
      }
      else
      {
      	if (  st_cntrct_pstn_crrnt.c_prd_typ  ==  'F' )
        {
					if(DEBUG_MSG_LVL_3)
					{
        		fn_userlog(c_ServiceName,"SPAN - Inside Future Profit / Loss Case.");
					}

          if( st_cntrct_pstn_crrnt.l_opnpstn_qty  > 0 )
          {
          	d_cntrct_pl = ( d_ltp * (double) st_cntrct_pstn_crrnt.l_opnpstn_qty ) - st_cntrct_pstn_crrnt.d_opnpstn_val;
          }
          else if ( st_cntrct_pstn_crrnt.l_opnpstn_qty < 0 )
          {
          	d_cntrct_pl = st_cntrct_pstn_crrnt.d_opnpstn_val  -  ( d_ltp * (double) st_cntrct_pstn_crrnt.l_opnpstn_qty )  ;
          }

        }

     	}
    }

		d_ltp = d_ltp / 100;

			EXEC SQL
      	SELECT  SEM_MAP_VL
      	INTO    :c_stock_cd
      	FROM    SEM_STCK_MAP
      	WHERE   SEM_STCK_CD = :st_cntrct_pstn_crrnt.c_undrlyng
      /*	AND     SEM_ENTTY   = 3;				***** Ver 2.3 Comment ****/
      	AND     SEM_ENTTY   = decode(:sql_xchng_cd,'NFO',3,'BFO',14);	/*** Ver 2.3 ***/

	 		if(SQLCODE  !=  0 )
   		{
    		fn_errlog ( c_ServiceName, "S31400", SQLMSG, c_err_msg );
     	 	EXEC SQL CLOSE :sys_cursor;
     		tpfree((char *)ptr_fml_obuf);
     		tpfree((char *)ptr_fml_ibuf);
     		return -1;
   		}
		SETNULL(c_stock_cd);

    EXEC SQL
      SELECT to_char(to_date(:st_cntrct_pstn_crrnt.c_expry_dt,'DD-Mon-YYYY'),'dd-Mon-YY')
      INTO  :c_expry_dt
      FROM  DUAL;

    if ( SQLCODE  !=  0 )
    {
      fn_errlog ( c_ServiceName, "S31405", SQLMSG, c_err_msg );
      EXEC SQL CLOSE :sys_cursor;
      tpfree((char *)ptr_fml_obuf);
      tpfree((char *)ptr_fml_ibuf);
      return -1;
    }

    /*** l_strike_prc  = st_cntrct_pstn_crrnt.l_strike_prc/100  ;	*** Commented in Ver 1.3 ***/

		/*** Ver 1.3 starts here ***/
		d_strike_prc  = (double) st_cntrct_pstn_crrnt.l_strike_prc / 100.00  ;	
		sprintf(c_strk_prc,"%lf",d_strike_prc);

		fn_spn_rtrim(c_strk_prc,'0');
		fn_spn_rtrim(c_strk_prc,'.');
		/*** Ver 1.3 ends here ***/

		if( l_cntr  ==  0 )
    {
			if(DEBUG_MSG_LVL_3)
			{
    		fn_userlog(c_ServiceName,"SPAN  - l_cntr Is :%ld:",l_cntr);
			}

      if(st_cntrct_pstn_crrnt.c_prd_typ ==  'F')
      {
      	sprintf(c_inp_strng11,"%s^%s~%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);

        strcat(c_inp_strng1,c_inp_strng11);

        sprintf(c_inp_strng22,"%s^%s~%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);

        strcat(c_inp_strng2,c_inp_strng22);

       }
       else
       {
      		sprintf(c_inp_strng11,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.3 ***/

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.3 ***/

          strcat(c_inp_strng2,c_inp_strng22);

       }
     }
		else
    {
    	if(st_cntrct_pstn_crrnt.c_prd_typ  ==  'F')
      {
      	sprintf(c_inp_strng11,"%s~%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);

        strcat(c_inp_strng1,c_inp_strng11);

        sprintf(c_inp_strng22,"%s~%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);

        strcat(c_inp_strng2,c_inp_strng22);

      }
      else
      {
      	sprintf(c_inp_strng11,"%s~%c:%s:%c%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.3 ***/

        strcat(c_inp_strng1,c_inp_strng11);

        sprintf(c_inp_strng22,"%s~%c:%s:%c%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.3 ***/

         strcat(c_inp_strng2,c_inp_strng22);

      }
    }

		if(DEBUG_MSG_LVL_3)
    {
    	fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_exp_dt.arr );
      fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntrct_pstn_crrnt.l_ibuy_qty );
      fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntrct_pstn_crrnt.d_ibuy_ord_val);
      fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntrct_pstn_crrnt.l_isell_qty );
      fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntrct_pstn_crrnt.d_isell_ord_val );
      fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntrct_pstn_crrnt.l_exbuy_qty );
      fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntrct_pstn_crrnt.d_exbuy_ord_val );
      fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntrct_pstn_crrnt.l_exsell_qty );
      fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", st_cntrct_pstn_crrnt.d_exsell_ord_val );
      fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntrct_pstn_crrnt.l_buy_exctd_qty );
      fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntrct_pstn_crrnt.l_sell_exctd_qty );
      fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntrct_pstn_crrnt.l_opnpstn_qty );
      fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntrct_pstn_crrnt.d_opnpstn_val);
      fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntrct_pstn_crrnt.d_mtm_opn_val );
    }

    strcat(c_inp_strng1,",");
    strcat(c_inp_strng2,",");

    l_cntr  ++;
    d_undrlyng_pl = d_undrlyng_pl + d_cntrct_pl ;
    d_blkd_prmum  = 0.0 ;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"NRML2SPN 	d_expsr_mrgn	Is :%lf:",d_expsr_mrgn);
			fn_userlog(c_ServiceName,"NRML2SPN 	d_expsr	Is :%lf:",d_expsr);
			fn_userlog(c_ServiceName,"NRML2SPN 	d_min_expsr_mrgn	iS :%lf:",d_min_expsr_mrgn);
			fn_userlog(c_ServiceName,"NRML2SPN 	d_min_expsr	iS :%lf:",d_min_expsr);
		}

		d_expsr     = d_expsr_mrgn  + d_expsr ;
  	d_min_expsr = d_min_expsr_mrgn  + d_min_expsr ;
	
  }

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

	d_undrlyng_pl	=	(long long) d_undrlyng_pl ;

	if ( c_pos_avl == 'N' )
  {
		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"INSIDE c_pos_avl == N ");
		}

		d_expsr_mrgn      = 0.0;
    d_min_expsr_mrgn  = 0.0;
		d_strike_prc = 0.0;		/*** Ver 1.3 ***/

		i_cntrct_cnt++;             /*** Ver 1.3 ***/

    MEMSET(st_cntrct_pstn_md_rc.c_expry_dt);

    strcpy( st_cntrct_pstn_md_rc.c_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt );
    strcpy( st_cntrct_pstn_md_rc.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
    strcpy( st_cntrct_pstn_md_rc.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
    strcpy( st_cntrct_pstn_md_rc.c_expry_dt, ptr_st_pstn_actn->c_expry_dt );
    st_cntrct_pstn_md_rc.c_prd_typ        = ptr_st_pstn_actn->c_prd_typ;
    st_cntrct_pstn_md_rc.c_exer_typ       = ptr_st_pstn_actn->c_exrc_typ;
    st_cntrct_pstn_md_rc.c_opt_typ        = ptr_st_pstn_actn->c_opt_typ;
    st_cntrct_pstn_md_rc.l_strike_prc     = ptr_st_pstn_actn->l_strike_prc;
    st_cntrct_pstn_md_rc.c_ctgry_indstk   = ptr_st_pstn_actn->c_ctgry_indstk;
    st_cntrct_pstn_md_rc.l_ibuy_qty       = 0;
    st_cntrct_pstn_md_rc.d_ibuy_ord_val   = 0;
    st_cntrct_pstn_md_rc.l_isell_qty      = 0;
    st_cntrct_pstn_md_rc.d_isell_ord_val  = 0;
    st_cntrct_pstn_md_rc.l_exbuy_qty      = 0;
    st_cntrct_pstn_md_rc.d_exbuy_ord_val  = 0;
    st_cntrct_pstn_md_rc.l_exsell_qty     = 0;
    st_cntrct_pstn_md_rc.d_exsell_ord_val = 0;
    st_cntrct_pstn_md_rc.l_buy_exctd_qty  = 0;
    st_cntrct_pstn_md_rc.l_sell_exctd_qty = 0;
    st_cntrct_pstn_md_rc.c_opnpstn_flw    = 'N';
    st_cntrct_pstn_md_rc.l_opnpstn_qty    = 0;
    st_cntrct_pstn_md_rc.d_opnpstn_val    = 0;
    st_cntrct_pstn_md_rc.d_mtm_opn_val    = 0;
    st_cntrct_pstn_md_rc.d_imtm_opn_val   = 0;
    d_opt_prmum   = 0.0;
    d_blkd_prmum  = 0.0;
 		l_buy_qty     = 0;
    l_sell_qty    = 0;
	
		if(DEBUG_MSG_LVL_3)
		{	
			fn_userlog(c_ServiceName,"NRML2SPN st_cntrct_pstn_md_rc.c_prd_typ Is :%c:",st_cntrct_pstn_md_rc.c_prd_typ);
			fn_userlog(c_ServiceName,"NRML2SPN	st_cntrct_pstn_md_rc.c_undrlyng	Is :%s:",st_cntrct_pstn_md_rc.c_undrlyng);
			fn_userlog(c_ServiceName,"NRML2SPN st_cntrct_pstn_md_rc.c_expry_dt Is :%s:",st_cntrct_pstn_md_rc.c_expry_dt);
			fn_userlog(c_ServiceName,"NRML2SPN st_cntrct_pstn_md_rc.c_exer_typ Is :%c:",st_cntrct_pstn_md_rc.c_exer_typ);
			fn_userlog(c_ServiceName,"NRML2SPN st_cntrct_pstn_md_rc.c_opt_typ Is :%c:",st_cntrct_pstn_md_rc.c_opt_typ);
			fn_userlog(c_ServiceName,"NRML2SPN st_cntrct_pstn_md_rc.l_strike_prc Is :%ld:",st_cntrct_pstn_md_rc.l_strike_prc);
		}

		
    EXEC SQL
      SELECT  NVL(FTQ_LST_TRD_PRC,0)    /*** Ver 1.3 ***/
      INTO    :d_ltp
      FROM    FTQ_FO_TRD_QT
      WHERE   FTQ_PRDCT_TYP = :st_cntrct_pstn_md_rc.c_prd_typ
			AND			FTQ_XCHNG_CD	=	:st_cntrct_pstn_md_rc.c_xchng_cd
      AND     FTQ_UNDRLYNG  = :st_cntrct_pstn_md_rc.c_undrlyng
      AND     FTQ_EXPRY_DT  = :st_cntrct_pstn_md_rc.c_expry_dt
      AND     FTQ_EXER_TYP  = :st_cntrct_pstn_md_rc.c_exer_typ
      AND     FTQ_OPT_TYP   = :st_cntrct_pstn_md_rc.c_opt_typ
      AND     FTQ_STRK_PRC  = :st_cntrct_pstn_md_rc.l_strike_prc;

    if(SQLCODE  !=  0 )
    {
      fn_errlog ( c_ServiceName, "S31410", SQLMSG, c_err_msg );
      /*** EXEC SQL CLOSE :sys_cursor;  *** Commented in Ver 3.3 ***/
      tpfree((char *)ptr_fml_obuf);
      tpfree((char *)ptr_fml_ibuf);
      return -1;
    }

    i_returncode =  fn_apply_spn_actn ( c_ServiceName,
                                        ptr_st_pstn_actn,
                                        &st_cntrct_pstn_md_rc,
                                        ptr_st_err_msg );
    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31415",LIBMSG , c_err_msg );
      /*** EXEC SQL CLOSE :sys_cursor;  *** Commented in Ver 3.3 ***/
      tpfree((char *)ptr_fml_obuf);
      tpfree((char *)ptr_fml_ibuf);
      return -1;
    }

		fn_sum_spnpos (st_cntrct_pstn_md_rc ,&st_undpstn_tobe);

		i_expsr_rtrn  = fn_cal_expsr  ( c_ServiceName,
                                    st_cntrct_pstn_crrnt,
                                    l_basket_id,
                                     &d_expsr_mrgn,
                                     &d_min_expsr_mrgn,
                                     &d_mltplr,
                                     c_err_msg
                                   );

      if ( i_expsr_rtrn != 0 )
      {
         fn_errlog(c_ServiceName, "S31420", LIBMSG, c_err_msg );
         /*** EXEC SQL CLOSE :sys_cursor; *** Commented in Ver 3.3 ***/
         tpfree((char *)ptr_fml_obuf);
         tpfree((char *)ptr_fml_ibuf);
         return -1;
      }

    l_max_opn_qty = st_cntrct_pstn_md_rc.l_ibuy_qty ;
    l_min_opn_qty = st_cntrct_pstn_md_rc.l_isell_qty ;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN BUY QTY :%ld:",st_cntrct_pstn_md_rc.l_ibuy_qty);
    	fn_userlog(c_ServiceName,"SPAN SELL QTY :%ld:",st_cntrct_pstn_md_rc.l_isell_qty);
    	fn_userlog(c_ServiceName,"SPAN l_min_opn_qty :%ld:",l_min_opn_qty);
		}

    if (st_cntrct_pstn_md_rc.c_prd_typ  ==  'O' )
    {
      l_temp_qty  = fn_minl ( l_max_opn_qty , l_min_opn_qty );
      l_max_opn_qty = l_temp_qty  ;
      l_min_opn_qty = l_temp_qty  ;


			/************ Commented in Ver 1.7 **************************************
      if( st_cntrct_pstn_md_rc.l_ibuy_qty  > 0 )
      {
				if(DEBUG_MSG_LVL_3)
				{
        	fn_userlog(c_ServiceName,"SPAN Inside Option Buy Position.");
				}

        d_opt_prmum = ptr_st_pstn_actn->l_new_qty * ptr_st_pstn_actn->l_new_rt;
      }
			****************************************************************************/
    }

    d_ltp = d_ltp / 100;

		 EXEC SQL
       SELECT  SEM_MAP_VL
       INTO    :c_stock_cd
       FROM    SEM_STCK_MAP
       WHERE   SEM_STCK_CD = :st_cntrct_pstn_md_rc.c_undrlyng
       AND     SEM_ENTTY   = decode(:st_cntrct_pstn_md_rc.c_xchng_cd,'NFO',3,2);

		if ( SQLCODE  !=  0 )
    {
      fn_errlog ( c_ServiceName, "S31425", SQLMSG, c_err_msg );
      /*** EXEC SQL CLOSE :sys_cursor;  *** Commented in Ver 3.3 ***/
      tpfree((char *)ptr_fml_obuf);
      tpfree((char *)ptr_fml_ibuf);
      return -1;
    }
	
		SETNULL(c_stock_cd);

    EXEC SQL
      SELECT to_char(to_date(:st_cntrct_pstn_md_rc.c_expry_dt,'DD-Mon-YYYY'),'dd-Mon-YY')
      INTO  :c_expry_dt
      FROM  DUAL;

    if ( SQLCODE  !=  0 )
    {
      fn_errlog ( c_ServiceName, "S31430", SQLMSG, c_err_msg );
      /*** EXEC SQL CLOSE :sys_cursor;  *** Commented in Ver 3.3 ***/
      tpfree((char *)ptr_fml_obuf);
      tpfree((char *)ptr_fml_ibuf);
      return -1;
    }

    /*** l_strike_prc  = st_cntrct_pstn_md_rc.l_strike_prc/100 ; *** Commented in Ver 1.3 ***/

		/*** Ver 1.3 starts here ***/
		d_strike_prc  = (double) st_cntrct_pstn_md_rc.l_strike_prc / 100.00  ;	
		sprintf(c_strk_prc,"%lf",d_strike_prc);

		fn_spn_rtrim(c_strk_prc,'0');
		fn_spn_rtrim(c_strk_prc,'.');
		/*** Ver 1.3 ends here ***/


		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"SPAN c_expry_dt Is :%s:",c_expry_dt);
		}

		if( l_cntr  ==  0 )
    {
    	if(st_cntrct_pstn_md_rc.c_prd_typ ==  'F')
      {
        sprintf(c_inp_strng11,"%s^%s~%c:%s^%ld^%2.2lf",st_cntrct_pstn_md_rc.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_md_rc.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);

        strcat(c_inp_strng1,c_inp_strng11);

        sprintf(c_inp_strng22,"%s^%s~%c:%s^%ld^%2.2lf",st_cntrct_pstn_md_rc.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_md_rc.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);

        strcat(c_inp_strng2,c_inp_strng22);

      }
      else if ( st_cntrct_pstn_md_rc.c_prd_typ  == 'O' )
      {
        sprintf(c_inp_strng11,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn_md_rc.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_md_rc.c_prd_typ,c_expry_dt,st_cntrct_pstn_md_rc.c_opt_typ,st_cntrct_pstn_md_rc.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.3 ***/


        strcat(c_inp_strng1,c_inp_strng11);

        sprintf(c_inp_strng22,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn_md_rc.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_md_rc.c_prd_typ,c_expry_dt,st_cntrct_pstn_md_rc.c_opt_typ,st_cntrct_pstn_md_rc.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.3 ***/

        strcat(c_inp_strng2,c_inp_strng22);
      }
    }
		else
    {
      if(st_cntrct_pstn_md_rc.c_prd_typ ==  'F')
      {
        sprintf(c_inp_strng11,"%s~%c:%s^%ld^%2.2lf",c_stock_cd.arr,st_cntrct_pstn_md_rc.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);

        strcat(c_inp_strng1,c_inp_strng11);

        sprintf(c_inp_strng22,"%s~%c:%s^%ld^%2.2lf",c_stock_cd.arr,st_cntrct_pstn_md_rc.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);

        strcat(c_inp_strng2,c_inp_strng22);

      }
      else if ( st_cntrct_pstn_md_rc.c_prd_typ  == 'O' )
      {
        sprintf(c_inp_strng11,"%s~%c:%s:%c%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_md_rc.c_prd_typ,c_expry_dt,st_cntrct_pstn_md_rc.c_opt_typ,st_cntrct_pstn_md_rc.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.3 ***/

        strcat(c_inp_strng1,c_inp_strng11);

        sprintf(c_inp_strng22,"%s~%c:%s:%c%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_md_rc.c_prd_typ,c_expry_dt,st_cntrct_pstn_md_rc.c_opt_typ,st_cntrct_pstn_md_rc.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.3 ***/

        strcat(c_inp_strng2,c_inp_strng22);

      }
    }

		/************ Commented in Ver 1.7 **************************************

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"SPAN  - Option Premium Is :%lf:",d_opt_prmum);
		}

    d_total_prmum = d_opt_prmum * (-1)  ;

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"SPAN  - Total Premium Is :%lf:",d_total_prmum);
		}

		if ( d_total_prmum  <  0 )
    {
			d_balance_amt  = 0.0;   *** Ver 1.3 ***

      i_returncode = fn_upd_spnlimits( c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    c_drcr_flg,
                                    d_total_prmum,
                                    &d_balance_amt);
      if ( i_returncode != 0 )
      {
        switch ( i_returncode )
        {
          case  INSUFFICIENT_LIMITS :

            fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg );
            EXEC SQL CLOSE :sys_cursor;
            tpfree((char *)ptr_fml_obuf);
            tpfree((char *)ptr_fml_ibuf);
            return INSUFFICIENT_LIMITS  ;

          default:

            fn_errlog( c_ServiceName, "S31435",LIBMSG , c_err_msg );
            EXEC SQL CLOSE :sys_cursor;
            tpfree((char *)ptr_fml_obuf);
            tpfree((char *)ptr_fml_ibuf);
            return -1;
        }
      }
    }
		****************************************************************************/

		if(DEBUG_MSG_LVL_0)
		{
     	fn_userlog(c_ServiceName,"SPAN - d_undrlyng_pl Is :%lf:",d_undrlyng_pl);
		}
  }	

	l_length1 = strlen(c_inp_strng1);

  if( c_inp_strng1[l_length1  - 1 ] == ',')
  {
    c_inp_strng1[l_length1 -1]  ='\0';
  }

  l_length2 = strlen(c_inp_strng2);

  if( c_inp_strng2[l_length2  - 1 ] == ',')
  {
    c_inp_strng2[l_length2 -1]  ='\0';
  }

  if ( st_cntrct_pstn_md_rc.l_opnpstn_qty > 0 )
  {
    st_cntrct_pstn_md_rc.c_opnpstn_flw = BUY;
  }
  else if ( st_cntrct_pstn_md_rc.l_opnpstn_qty < 0 )
  {
    st_cntrct_pstn_md_rc.c_opnpstn_flw = SELL;
  }
  else
  {
    st_cntrct_pstn_md_rc.c_opnpstn_flw = NEUTRAL;
  }

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName,"SPAN - Before Update d_total_prmum Is :%lf:",d_total_prmum);

		fn_userlog(c_ServiceName,"NRML2SPN ptr_st_pstn_actn->c_cln_mtch_accnt Is :%s:",ptr_st_pstn_actn->c_cln_mtch_accnt);
		fn_userlog(c_ServiceName,"NRML2SPN ptr_st_pstn_actn->c_xchng_cd	Is :%s:",ptr_st_pstn_actn->c_xchng_cd);
		fn_userlog(c_ServiceName,"NRML2SPN ptr_st_pstn_actn->c_prd_typ Is :%c:",ptr_st_pstn_actn->c_prd_typ);
		fn_userlog(c_ServiceName,"NRML2SPN ptr_st_pstn_actn->c_undrlyng	Is :%s:",ptr_st_pstn_actn->c_undrlyng);
		fn_userlog(c_ServiceName,"NRML2SPN ptr_st_pstn_actn->c_opt_typ	Is :%c:",ptr_st_pstn_actn->c_opt_typ);
		fn_userlog(c_ServiceName,"NRML2SPN ptr_st_pstn_actn->l_strike_prc Is :%ld:",ptr_st_pstn_actn->l_strike_prc);
		fn_userlog(c_ServiceName,"NRML2SPN ptr_st_pstn_actn->c_expry_dt Is :%s:",ptr_st_pstn_actn->c_expry_dt);
		fn_userlog(c_ServiceName,"NRML2SPN ptr_st_pstn_actn->c_exrc_typ Is :%c:",ptr_st_pstn_actn->c_exrc_typ);
	}

  EXEC SQL
    UPDATE  FCP_FO_SPN_CNTRCT_PSTN
    SET     FCP_IBUY_QTY       = :st_cntrct_pstn_md_rc.l_ibuy_qty,
            FCP_IBUY_ORD_VAL   = :st_cntrct_pstn_md_rc.d_ibuy_ord_val,
            FCP_ISELL_QTY      = :st_cntrct_pstn_md_rc.l_isell_qty,
            FCP_ISELL_ORD_VAL  = :st_cntrct_pstn_md_rc.d_isell_ord_val,
            FCP_EXBUY_QTY      = :st_cntrct_pstn_md_rc.l_exbuy_qty,
            FCP_EXBUY_ORD_VAL  = :st_cntrct_pstn_md_rc.d_exbuy_ord_val,
            FCP_EXSELL_QTY     = :st_cntrct_pstn_md_rc.l_exsell_qty,
            FCP_EXSELL_ORD_VAL = :st_cntrct_pstn_md_rc.d_exsell_ord_val,
            FCP_BUY_EXCTD_QTY  = :st_cntrct_pstn_md_rc.l_buy_exctd_qty,
            FCP_SELL_EXCTD_QTY = :st_cntrct_pstn_md_rc.l_sell_exctd_qty,
            FCP_OPNPSTN_FLW    = :st_cntrct_pstn_md_rc.c_opnpstn_flw,
            FCP_OPNPSTN_QTY    = :st_cntrct_pstn_md_rc.l_opnpstn_qty,
         /*   FCP_OPNPSTN_VAL    = :st_cntrct_pstn_md_rc.d_opnpstn_val,	Commented in ver 1.9 */
            FCP_OPNPSTN_VAL    = :st_cntrct_pstn_md_rc.d_mtm_opn_val,		/* Added in Ver 1.9 */
            FCP_MTM_OPN_VAL    = :st_cntrct_pstn_md_rc.d_mtm_opn_val
    WHERE   FCP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND     FCP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
    AND     FCP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
    AND     FCP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
    AND     FCP_OPT_TYP        = :ptr_st_pstn_actn->c_opt_typ
    AND     FCP_STRK_PRC       = :ptr_st_pstn_actn->l_strike_prc
		AND     FCP_EXPRY_DT       = to_date(:ptr_st_pstn_actn->c_expry_dt,'DD-Mon-YYYY')
    AND     FCP_EXER_TYP       = :ptr_st_pstn_actn->c_exrc_typ;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31440", SQLMSG, c_err_msg );
    /*** EXEC SQL CLOSE :sys_cursor;  *** Commented in Ver 3.3 ***/
    tpfree((char *)ptr_fml_obuf);
    tpfree((char *)ptr_fml_ibuf);
    return -1;
  }

	/*** Ver 1.3 starts here ***/
  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName, "i_cntrct_cnt = :%d:",i_cntrct_cnt);
  }

  if (i_cntrct_cnt > 10)
	{
		if ( Fadd32 (ptr_fml_ibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)	==	-1 )
		{
			fn_errlog( c_ServiceName, "S31445",FMLMSG , c_err_msg );
			tpfree((char *)ptr_fml_obuf);
			tpfree((char *)ptr_fml_ibuf);
			return -1;
		}
		fn_cpy_ddr ( ptr_st_pstn_actn->c_rout_crt );

		MEMSET(c_inp_strng);
		strcpy(c_inp_strng,c_inp_strng1);
		strcat(c_inp_strng,"\n");
			
		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"c_inp_strng 1 = :%s:",c_inp_strng);
		}

		if ( Fadd32 (ptr_fml_ibuf,FFO_REMARKS,(char *)c_inp_strng,0)	==	-1 )
		{
			fn_errlog( c_ServiceName, "S31450",FMLMSG , c_err_msg );
			tpfree((char *)ptr_fml_obuf);
			tpfree((char *)ptr_fml_ibuf);
			return -1;
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}

		i_rtrn_cd =	tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_ibuf,0,(char **)&ptr_fml_obuf,&li_len_tobuf,0);

		if(	i_rtrn_cd != 0	)
		{
			fn_errlog( c_ServiceName, "S31455",TPMSG , c_err_msg );
			tpfree((char *)ptr_fml_obuf);
			tpfree((char *)ptr_fml_ibuf);
			return -1;
		}

		if ( Fget32 (ptr_fml_obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng1,0)  ==  -1 )
		{	
			fn_errlog( c_ServiceName, "S31460",FMLMSG , c_err_msg );
			tpfree((char *)ptr_fml_obuf);
			tpfree((char *)ptr_fml_ibuf);
			return -1;
		}

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Output String 1 Is :%s:",c_op_strng1);
		}

    /*** Ver 3.8  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31465",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_obuf);
      tpfree((char *)ptr_fml_ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 3.8 Ends here ***/
		MEMSET(c_inp_strng);

		/**** Ver 2.3 BUG bix Starts Here *****/

    if( strcmp(sql_xchng_cd,"NFO") == 0 )
    {
      strcpy( c_inp_strng ,"1^NSE^");
    }
    else
    {
        strcpy( c_inp_strng ,"1^BSE^");
    }
    /**** Ver 2.3 Ends Here ******/

		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"Initial c_inp_strng2 = :%s:",c_inp_strng2);
		}

		fn_spn_ltrim(c_inp_strng2,'|');
		/*** sprintf(c_inp_strng,"1^%s",c_inp_strng2); ** Commented in ver 2.3 ***/ 
		/*** sprintf(c_inp_strng,"%s",c_inp_strng2); 	 ** Added in ver 2.3 ***/	
		strcat(c_inp_strng,c_inp_strng2);	             /*** Added in ver 2.3 ***/
		strcat(c_inp_strng,"\n");	

		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"c_inp_strng 2 = :%s:",c_inp_strng);
		}

		if ( Fchg32 (ptr_fml_ibuf,FFO_REMARKS,0,(char *)c_inp_strng,0)	==	-1 )
		{
			fn_errlog( c_ServiceName, "S31470",FMLMSG , c_err_msg );
			tpfree((char *)ptr_fml_obuf);
			tpfree((char *)ptr_fml_ibuf);
			return -1;
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}

		i_rtrn_cd =	tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_ibuf,0,(char **)&ptr_fml_obuf,&li_len_tobuf,0);

		if(	i_rtrn_cd != 0	)
		{
			fn_errlog( c_ServiceName, "S31475",TPMSG , c_err_msg );
			tpfree((char *)ptr_fml_obuf);
			tpfree((char *)ptr_fml_ibuf);
			return -1;
		}

		if ( Fget32 (ptr_fml_obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng2,0)  ==  -1 )
		{	
			fn_errlog( c_ServiceName, "S31480",FMLMSG , c_err_msg );
			tpfree((char *)ptr_fml_obuf);
			tpfree((char *)ptr_fml_ibuf);
			return -1;
		}
		
		fn_spn_ltrim(c_op_strng2,'1');
		fn_spn_ltrim(c_op_strng2,'^');

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Output String 2 Is :%s:",c_op_strng2);
		}

    /*** Ver 3.8  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn2,
                                    &d_bnov2,
                                    &d_total_bmrgn2,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31485",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_obuf);
      tpfree((char *)ptr_fml_ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn2 :%lf: d_bnov2:%lf: d_total_bmrgn2:%lf:",d_spn_bmrgn2,d_bnov2,d_total_bmrgn2);
    }
    /*** Ver 3.8  Ends here ***/
	}
	else
  {
  	/*** Ver 1.3 Ends here ***/

  	strcpy(c_inp_strng,c_inp_strng1);
  	strcat(c_inp_strng,c_inp_strng2);
  	strcat(c_inp_strng,"\n");

  	if ( Fadd32 (ptr_fml_ibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)  ==  -1 )
  	{
    	fn_errlog( c_ServiceName, "S31490",FMLMSG , c_err_msg );
    	/*** EXEC SQL CLOSE :sys_cursor;  *** Commented in Ver 3.3 ***/
    	tpfree((char *)ptr_fml_obuf);
    	tpfree((char *)ptr_fml_ibuf);
    	return -1;
  	}

  	if ( Fadd32 (ptr_fml_ibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
  	{
    	fn_errlog( c_ServiceName, "S31495",FMLMSG , c_err_msg );
    	/*** EXEC SQL CLOSE :sys_cursor;  *** Commented in Ver 3.3 ***/
    	tpfree((char *)ptr_fml_obuf);
    	tpfree((char *)ptr_fml_ibuf);
    	return -1;
  	}

		if(DEBUG_MSG_LVL_3)
		{
  		fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}
	
  	fn_cpy_ddr ( ptr_st_pstn_actn->c_rout_crt );

		i_rtrn_cd  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_ibuf,0,(char **)&ptr_fml_obuf,&li_len_tobuf,0);

  	if( i_rtrn_cd != 0 )
  	{
    	fn_errlog( c_ServiceName, "S31500",TPMSG , c_err_msg );
   	 	/*** EXEC SQL CLOSE :sys_cursor;  *** Commented in Ver 3.3 ***/
    	tpfree((char *)ptr_fml_obuf);
    	tpfree((char *)ptr_fml_ibuf);
    	return -1;
  	}

  	if ( Fget32 (ptr_fml_obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng,0)  ==  -1 )
  	{
    	fn_errlog( c_ServiceName, "S31505",FMLMSG , c_err_msg );
    	/*** EXEC SQL CLOSE :sys_cursor;  *** Commented in Ver 3.3 ***/
    	tpfree((char *)ptr_fml_obuf);
    	tpfree((char *)ptr_fml_ibuf);
    	return -1;
 	 	}

  	strcpy(c_op_strng1,strtok(c_op_strng,"|"));
  	strcpy(c_op_strng2,strtok(null_ptr,"|"));

    /*** Ver 3.8  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31510",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_obuf);
      tpfree((char *)ptr_fml_ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 3.8  Ends here ***/

	} /*** End Of Else ***/  /*** Ver 1.3 ***/

  strcpy(c_mrgn_indctr,strtok(c_op_strng1,"^"));
  strcpy(c_xchng_cd1,strtok(null_ptr,"^"));			/** Ver 2.3 ***/
  strcpy(c_seq_num1,strtok(null_ptr,"^"));
  strcpy(c_mtch_accnt1,strtok(null_ptr,"^"));
  strcpy(c_spn_mrgn1,strtok(null_ptr,"^"));
  strcpy(c_nov1,strtok(null_ptr,"^"));
  strcpy(c_total_mrgn1,strtok(null_ptr,"^"));

	if (i_cntrct_cnt > 10)				/*** Condition added in ver 2.4 ***/
  {
	strcpy(c_xchng_cd2,strtok(c_op_strng2,"^"));    /** Ver 2.3 ***/
  /* strcpy(c_seq_num2,strtok(c_op_strng2,"^"));   ** Ver 2.3 ***/
  strcpy(c_seq_num2,strtok(null_ptr,"^"));        /** Ver 2.3 ***/
	}
	else
	{
		strcpy(c_seq_num2,strtok(c_op_strng2,"^"));   /*** Added in ver 2.4 ***/
	}
  strcpy(c_mtch_accnt2,strtok(null_ptr,"^"));
  strcpy(c_spn_mrgn2,strtok(null_ptr,"^"));
  strcpy(c_nov2,strtok(null_ptr,"^"));
  strcpy(c_total_mrgn2,strtok(null_ptr,"^"));

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName,"SPAN c_mtch_accnt1 Is :%s:",c_mtch_accnt1);
		fn_userlog(c_ServiceName,"SPAN c_xchng_cd2 Is :%s:",c_xchng_cd2); /** Ver 2.3 ***/
    fn_userlog(c_ServiceName,"SPAN c_seq_num2 Is :%s:",c_seq_num2);  /** Ver 2.3 ***/
    fn_userlog(c_ServiceName,"SPAN c_spn_mrgn2 Is :%s:",c_spn_mrgn2); /** Ver 2.3 ***/
    fn_userlog(c_ServiceName,"SPAN c_nov2 Is :%s:",c_nov2);            /** Ver 2.3 ***/
    fn_userlog(c_ServiceName,"SPAN c_total_mrgn2 Is :%s:",c_total_mrgn2); /** Ver 2.3 ***/
	}

	if ( c_mtch_accnt1[0] == '1' || c_mtch_accnt1[0] == '2' || c_mtch_accnt1[0] == '3' )  /*** Ver 1.3 ***/
  {
  	fn_errlog( c_ServiceName, "S31515",LIBMSG , c_err_msg );
    fn_userlog(c_ServiceName,"Service Return Error.");
    /*** EXEC SQL CLOSE :sys_cursor;  *** Commented in Ver 3.3 ***/
    tpfree((char *)ptr_fml_obuf);
    tpfree((char *)ptr_fml_ibuf);
    return -1 ;
  }

  /*** Ver 3.8  Starts here ***/
  d_spn_bmrgn = fn_maxd(d_spn_bmrgn1,d_spn_bmrgn2) * 100;
  d_bnov      = fn_maxd(d_bnov1,d_bnov2) * 100;
  d_total_bmrgn = fn_maxd(d_total_bmrgn1,d_total_bmrgn2) * 100;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"d_spn_bmrgn :%lf: d_bnov :%lf: d_total_bmrgn:%lf:",d_spn_bmrgn,d_bnov,d_total_bmrgn);
  }
  /*** Ver 3.8  Ends here ***/
  
  d_spn_mrgn1   = atof(c_spn_mrgn1);
  d_spn_mrgn2   = atof(c_spn_mrgn2);
  d_nov1        = atof(c_nov1);
  d_nov2        = atof(c_nov2);
  d_total_mrgn1 = atof(c_total_mrgn1);
  d_total_mrgn2 = atof(c_total_mrgn2);

  st_undpstn_tobe.d_uspan_nenov_mrgn  = fn_maxd(d_spn_mrgn1,d_spn_mrgn2) * 100;
  st_undpstn_tobe.d_net_optn_val      = fn_maxd(d_nov1,d_nov2) * 100;
  st_undpstn_tobe.d_uspan_wenov_mrgn  = fn_maxd(d_total_mrgn1,d_total_mrgn2) * 100 ;

  /*** Ver 3.8  Starts Here ***/
  st_undpstn_tobe.d_uspan_nenov_mrgn  = fn_maxd(st_undpstn_tobe.d_uspan_nenov_mrgn,d_spn_bmrgn);
  st_undpstn_tobe.d_net_optn_val = fn_maxd(st_undpstn_tobe.d_net_optn_val,d_bnov);
  st_undpstn_tobe.d_uspan_wenov_mrgn = fn_maxd(st_undpstn_tobe.d_uspan_wenov_mrgn,d_total_bmrgn);
  /*** Ver 3.8  Ends Here ***/

  d_spn_mrgn    = st_undpstn_tobe.d_uspan_nenov_mrgn    ;   
  d_nov         = st_undpstn_tobe.d_net_optn_val        ;  
  d_total_mrgn  = st_undpstn_tobe.d_uspan_wenov_mrgn    ; 

	if(DEBUG_MSG_LVL_0)
	{
  	fn_userlog(c_ServiceName,"SPAN - SPAN MARGIN Is :%lf:",d_spn_mrgn);
	}

	i_returncode  = fn_cal_mrgn ( c_ServiceName,
                                d_total_mrgn,
                                d_mltplr,
                                d_expsr,
                                d_min_expsr,
                                &d_min_mrgn,
                                &d_intl_mrgn,
                                c_err_msg
                              );

  if ( i_returncode !=  0 )
  {
    fn_errlog( c_ServiceName, "S31520",LIBMSG , c_err_msg );
    fn_userlog(c_ServiceName,"Service Return Error.");
    /*** EXEC SQL CLOSE :sys_cursor;  *** Commented in Ver 3.3 ***/
    tpfree((char *)ptr_fml_obuf);
    tpfree((char *)ptr_fml_ibuf);
    return -1 ;
  }

	if(DEBUG_MSG_LVL_0)
	{
  	fn_userlog(c_ServiceName,"SPAN  - SPAN MARGIN IS :%lf:",d_spn_mrgn);
		fn_userlog(c_ServiceName,"SPAN  - NOV IS :%lf:",d_nov);
  	fn_userlog(c_ServiceName,"SPAN  - Total Margin  IS :%lf:",d_total_mrgn);
  	fn_userlog(c_ServiceName,"SPAN  - Exposure  IS :%lf:",d_expsr);
  	fn_userlog(c_ServiceName,"SPAN  - Min. Margin IS :%lf:",d_min_mrgn);
  	fn_userlog(c_ServiceName,"SPAN  - Initial Margin IS :%lf:",d_intl_mrgn);
	}


  st_undpstn_tobe.d_multpr            = d_mltplr      ;
  st_undpstn_tobe.d_eba_expr_mrgn     = (long long)d_expsr;
  st_undpstn_tobe.d_span_wemult_mrgn  = (long long)d_total_mrgn * d_mltplr  ;
  st_undpstn_tobe.d_min_mrgn          = d_min_mrgn    ;
  st_undpstn_tobe.d_reqd_initial_mrgn = (long long)d_intl_mrgn   ;
  st_undpstn_tobe.d_ntnl_pl           = d_undrlyng_pl ;


	if ( c_pos_avl	==	'Y'	)
	{
  	EXEC SQL	SELECT
							NVL(FUS_BLCKD_PL,0),
							NVL(FUS_INITIAL_MRGN,0)
    	INTO  	:d_oblckd_amnt,
							:d_initial_mrgn
    	FROM  	FUS_FO_UNDRLYNG_SPN_PSTN
    	WHERE 	FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
			AND			FUS_XCHNG_CD				=	:sql_xchng_cd
     	AND     FUS_UNDRLYNG        = :sql_undrlyng;

    if ( SQLCODE != 0 && SQLCODE  !=  NO_DATA_FOUND)
    {
     	fn_errlog( c_ServiceName, "S31525",SQLMSG , c_err_msg );
     	/*** EXEC SQL CLOSE :sys_cursor;  *** Commented in Ver 3.3 ***/
     	tpfree((char *)ptr_fml_obuf);
     	tpfree((char *)ptr_fml_ibuf);
     	return -1;
    }

	}
	else
	{
		d_oblckd_amnt		=	0.0;
		d_initial_mrgn	=	0.0;
	}

	if (	d_initial_mrgn	!= 0 )
	{
		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"SPAN	-	Inside Margin Release on Conversion From NORMAL To SPAN.");
			fn_userlog(c_ServiceName,"SPAN  -	Margin To Be Released On Conversion From NORMAL To SPAN Is :%lf:",d_initial_mrgn);
		}

		/* strcpy(c_narration_id,"Release Trd margin on Conv from Normal to SPAN");  commented in Ver TOL */
                strcpy(c_narration_id, REL_TRDMRGN_CONV_NORM_TO_SPAN);  /* Added in Ver TOL */
		
		d_balance_amt  = 0.0;   /*** Ver 1.3 ***/

		i_returncode = fn_upd_spnlimits ( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      c_narration_id,
                                      c_drcr_flg,
                                      d_initial_mrgn,
                                      &d_balance_amt);
    if ( i_returncode != 0 )
    {
      switch ( i_returncode )
      {
        case  INSUFFICIENT_LIMITS :

          fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg );
          /*** EXEC SQL CLOSE :sys_cursor;  *** Commented in Ver 3.3 ***/
          tpfree((char *)ptr_fml_obuf);
          tpfree((char *)ptr_fml_ibuf);
          return INSUFFICIENT_LIMITS  ;

        default:

          fn_errlog( c_ServiceName, "S31530",LIBMSG , c_err_msg );
          /*** EXEC SQL CLOSE :sys_cursor;  *** Commented in Ver 3.3 ***/
          tpfree((char *)ptr_fml_obuf);
          tpfree((char *)ptr_fml_ibuf);
          return -1;
      }
    }


	}

	/**** Commented in ver 1.9 Customer can convert when market is closed and not having pending orders
	 **** There is no need to release or block PNL which is allready calculated in EODMTM					****	
		
	if ( d_oblckd_amnt	!=	0	)
	{

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"SPAN  - Inside Blocked Loss Release On Conversion From NORMAL To SPAN.");
    	fn_userlog(c_ServiceName,"SPAN  - Blocked Loss To Be Released On Conversion From NORMAL To SPAN Is :%lf:",d_oblckd_amnt);
		}

	  strcpy(c_narration_id,"Release blocked loss on Conv from Normal to SPAN");
		
		d_balance_amt  = 0.0;   *** Ver 1.3 ***

		i_returncode = fn_upd_spnlimits ( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      c_narration_id,
                                      c_drcr_flg,
                                      d_oblckd_amnt,
                                      &d_balance_amt);
    if ( i_returncode != 0 )
    {
      switch ( i_returncode )
      {
        case  INSUFFICIENT_LIMITS :

          fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg );
          EXEC SQL CLOSE :sys_cursor;
          tpfree((char *)ptr_fml_obuf);
          tpfree((char *)ptr_fml_ibuf);
          return INSUFFICIENT_LIMITS  ;

        default:

          fn_errlog( c_ServiceName, "S31535",LIBMSG , c_err_msg );
          EXEC SQL CLOSE :sys_cursor;
          tpfree((char *)ptr_fml_obuf);
          tpfree((char *)ptr_fml_ibuf);
          return -1;
      }
    }



	}
	*************************************************************************************************/

	d_initial_mrgn	=	st_undpstn_tobe.d_span_wemult_mrgn	*	(-1);

	if ( d_initial_mrgn != 0 )
	{

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"NRML2SPN Initial Margin To Be Blocked Is :%lf:",d_initial_mrgn);
		}

    strcpy(c_narration_id,BLK_TRDMRGN_CONV_NORM_TO_SPAN);

		sprintf(ptr_st_pstn_actn->c_ref_rmrks,"NRML2SPAN Margin-%s",ptr_st_pstn_actn->c_undrlyng); 

		d_balance_amt  = 0.0;   /*** Ver 1.3 ***/

		i_returncode = fn_upd_spnlimits ( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      c_narration_id,
                                      c_drcr_flg,
                                      d_initial_mrgn,
                                      &d_balance_amt
																		);

    if ( i_returncode != 0 )
    {
      switch ( i_returncode )
      {
        case  INSUFFICIENT_LIMITS :

					fn_userlog(c_ServiceName,"SPAN	-	Inside INSUFFICIENT_LIMITS Case For Initial Margin.");
          fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg );
					if( c_balance_flg != 'Y' ) /*** Ver 3.3 ***/
				  {
						d_balance_amt_tmp = d_balance_amt;	
						c_balance_flg = 'Y';
				  }
					c_mrgn_insufficient_flg ='Y';				/*** Ver 3.3 ***/
          /*** 
					EXEC SQL CLOSE :sys_cursor;
          tpfree((char *)ptr_fml_obuf);
          tpfree((char *)ptr_fml_ibuf);
          return INSUFFICIENT_LIMITS  ; *** Commented in Ver 3.3 ***/
					break; /*** Ver 3.3 ***/

        default:

          fn_errlog( c_ServiceName, "S31540",LIBMSG , c_err_msg );
          /*** EXEC SQL CLOSE :sys_cursor;  *** Commented in Ver 3.3 ***/
          tpfree((char *)ptr_fml_obuf);
          tpfree((char *)ptr_fml_ibuf);
          return -1;
      }
    }

 		st_undpstn_tobe.d_span_wemult_mrgn	=	st_undpstn_tobe.d_span_wemult_mrgn	+	d_balance_amt	;      

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"NRML2SPN	Balance Amount Is :%lf:",d_balance_amt);
			fn_userlog(c_ServiceName,"NRML2SPN	Initial Margin	With Balance Amount Is :%lf:",st_undpstn_tobe.d_span_wemult_mrgn);
		}
		if( c_balance_flg == 'Y' ) /*** Ver 3.3 ***/
		{
			d_total_amount = d_total_amount + d_initial_mrgn;
			fn_userlog(c_ServiceName,"NRML2SPN d_total_amount:%lf",d_total_amount); 
		}

	}

	d_eba_expr_mrgn	=	st_undpstn_tobe.d_eba_expr_mrgn	*	(-1);

	if ( d_eba_expr_mrgn	!=	0	)
	{
		strcpy(c_narration_id,BLK_EXPR_MRGN_CONV_NORM_TO_SPAN);

    sprintf(ptr_st_pstn_actn->c_ref_rmrks,"NRML2SPAN Exposure-%s",ptr_st_pstn_actn->c_undrlyng);

		d_balance_amt  = 0.0;   /*** Ver 1.3 ***/

		i_returncode = fn_upd_spnlimits ( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      c_narration_id,
                                      c_drcr_flg,
                                      d_eba_expr_mrgn,
                                      &d_balance_amt);
    if ( i_returncode != 0 )
    {
      switch ( i_returncode )
      {
        case  INSUFFICIENT_LIMITS :

          fn_userlog(c_ServiceName,"SPAN  - Inside INSUFFICIENT_LIMITS Case For Exposure Margin.");
					if( c_balance_flg != 'Y' ) /*** Ver 3.3 ***/
				  {
						d_balance_amt_tmp = d_balance_amt;	
						c_balance_flg = 'Y';
				  }					
					c_mrgn_insufficient_flg ='Y';				/*** Ver 3.3 ***/
					fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg );
          /*** 
					EXEC SQL CLOSE :sys_cursor;
          tpfree((char *)ptr_fml_obuf);
          tpfree((char *)ptr_fml_ibuf);
          return INSUFFICIENT_LIMITS  ; *** Commented in Ver 3.3 ***/
					break; /*** Ver 3.3 ***/

				default:

          fn_errlog( c_ServiceName, "S31545",LIBMSG , c_err_msg );
          /*** EXEC SQL CLOSE :sys_cursor;  *** Commented in Ver 3.3 ***/
          tpfree((char *)ptr_fml_obuf);
          tpfree((char *)ptr_fml_ibuf);
          return -1;
      }
    }

		st_undpstn_tobe.d_eba_expr_mrgn	=	st_undpstn_tobe.d_eba_expr_mrgn	+	d_balance_amt	;

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"NRML2SPN	Balance Amount Is ;%lf:",d_balance_amt);
			fn_userlog(c_ServiceName,"NRML2SPN	Exposure With Balance Amount Is ;%lf:",st_undpstn_tobe.d_eba_expr_mrgn);

			fn_userlog(c_ServiceName,"NRML2SPN	Total Initial Margin Calculation.");
			fn_userlog(c_ServiceName,"NRML2SPN   Initial Margin With Balance Amount Is :%lf:",st_undpstn_tobe.d_span_wemult_mrgn);
			fn_userlog(c_ServiceName,"NRML2SPN  Exposure With Balance Amount Is ;%lf:",st_undpstn_tobe.d_eba_expr_mrgn);
		}
	
		st_undpstn_tobe.d_initial_mrgn	=	st_undpstn_tobe.d_span_wemult_mrgn	+	st_undpstn_tobe.d_eba_expr_mrgn;

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"NRML2SPN Total Initial Margin Is :%lf:",st_undpstn_tobe.d_initial_mrgn);
		}
		if( c_balance_flg == 'Y' ) /*** Ver 3.3 ***/
		{
			d_total_amount = d_total_amount + d_eba_expr_mrgn;
			fn_userlog(c_ServiceName,"NRML2SPN d_total_amount:%lf",d_total_amount); 
		}
	}

	/*** Ver 3.3 starts ***/
	*d_required_amount = 0.0;
	if (c_mrgn_insufficient_flg == 'Y' )
	{
		*d_required_amount = d_total_amount + d_balance_amt_tmp;
		*d_required_amount = ( *d_required_amount * (-1) ) / 100 ;
		fn_userlog(c_ServiceName,"NRML2SPN d_total_amount:%lf: d_balance_amt_tmp:%lf: d_required_amount Is :%lf:",d_total_amount,d_balance_amt_tmp,*d_required_amount);
		tpfree((char *)ptr_fml_obuf);
		tpfree((char *)ptr_fml_ibuf);
		return INSUFFICIENT_LIMITS  ;
	}
	/*** Ver 3.3 ends ***/

	/**** Commented in ver 1.9 Customer can convert when market is closed and not having pending orders
   **** There is no need to release or block PNL which is allready calculated in EODMTM         ****

	if ( d_undrlyng_pl	<	0	)
	{

    strcpy(c_narration_id,REL_BLKDLOSS_CONV_NORM_TO_SPAN);

    sprintf(ptr_st_pstn_actn->c_ref_rmrks,"NRML2SPAN PNL-%s",ptr_st_pstn_actn->c_undrlyng);

		d_balance_amt  = 0.0;   *** Ver 1.3 ***

		i_returncode = fn_upd_spnlimits ( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      c_narration_id,
                                      c_drcr_flg,
                                      d_undrlyng_pl,
                                      &d_balance_amt);
    if ( i_returncode != 0 )
    {
      switch ( i_returncode )
      {
        case  INSUFFICIENT_LIMITS :

          fn_userlog(c_ServiceName,"SPAN  - Inside INSUFFICIENT_LIMITS Case For Loss .");
          fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg );
          EXEC SQL CLOSE :sys_cursor;
          tpfree((char *)ptr_fml_obuf);
          tpfree((char *)ptr_fml_ibuf);
          return INSUFFICIENT_LIMITS  ;

        default:

          fn_errlog( c_ServiceName, "S31550",LIBMSG , c_err_msg );
          EXEC SQL CLOSE :sys_cursor;
          tpfree((char *)ptr_fml_obuf);
          tpfree((char *)ptr_fml_ibuf);
          return -1;
      }
    }

		st_undpstn_tobe.d_blckd_pl  = ( d_undrlyng_pl * (-1)) + d_balance_amt  ;

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"NRML2SPN Underlying Level PNL Is :%lf:",d_undrlyng_pl);
			fn_userlog(c_ServiceName,"NRML2SPN Balance Amount Is :%lf:",d_balance_amt);
			fn_userlog(c_ServiceName,"NRML2SPN Total PNL Is :%lf:",st_undpstn_tobe.d_blckd_pl);
		}

	}
	******************************************************************************************************/

	if ( st_undpstn_tobe.l_uopnpstn_qty > 0 )
  {
    st_undpstn_tobe.c_uopnpstn_flw = BUY;
  }
  else if ( st_undpstn_tobe.l_uopnpstn_qty < 0 )
  {
    st_undpstn_tobe.c_uopnpstn_flw = SELL;
  }
  else
  {
    st_undpstn_tobe.c_uopnpstn_flw = NEUTRAL;
  }

	EXEC SQL
     UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
     SET     FUS_INITIAL_MRGN      = :st_undpstn_tobe.d_initial_mrgn,
             FUS_SPAN_WEMULT_MRGN  = :st_undpstn_tobe.d_span_wemult_mrgn,
             FUS_EBA_EXPR_MRGN     = :st_undpstn_tobe.d_eba_expr_mrgn,
             FUS_USPAN_WENOV_MRGN  = :st_undpstn_tobe.d_uspan_wenov_mrgn,
             FUS_MULTIPLIER        = :st_undpstn_tobe.d_multpr,
             FUS_USPAN_NENOV_MRGN  = :st_undpstn_tobe.d_uspan_nenov_mrgn,
             FUS_NET_OPTN_VAL      = :st_undpstn_tobe.d_net_optn_val,
             FUS_MTM_FLG           = :st_undpstn_tobe.c_mtm_flg,
             FUS_NTNL_PL           = :st_undpstn_tobe.d_ntnl_pl,
             FUS_BLCKD_PL          = :st_undpstn_tobe.d_blckd_pl ,
             FUS_MIN_MRGN          = :st_undpstn_tobe.d_min_mrgn,
             FUS_REQD_INITIAL_MRGN = :st_undpstn_tobe.d_reqd_initial_mrgn,
	           FUS_UOPNPSTN_FLW      = :st_undpstn_tobe.c_uopnpstn_flw
     WHERE   FUS_CLM_MTCH_ACCNT    = :ptr_st_pstn_actn->c_cln_mtch_accnt
     AND     FUS_XCHNG_CD          = :ptr_st_pstn_actn->c_xchng_cd
     AND     FUS_UNDRLYNG          = :ptr_st_pstn_actn->c_undrlyng;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31555", SQLMSG, c_err_msg );
    return -1;
  }

	tpfree((char *)ptr_fml_obuf);
  tpfree((char *)ptr_fml_ibuf);
	return 0;
}




int fn_sum_clspos ( struct st_fcp_cntrct_pstn st_cntfut_pos,
                    struct st_undfut_pos	*ptr_st_undfut_pos
                  )
{


  ptr_st_undfut_pos->l_ibuy_qty      = ptr_st_undfut_pos->l_ibuy_qty + st_cntfut_pos.l_ibuy_qty;

  ptr_st_undfut_pos->d_ibuy_ord_vl	= ptr_st_undfut_pos->d_ibuy_ord_vl	+ st_cntfut_pos.d_ibuy_ord_val;

  ptr_st_undfut_pos->l_isell_qty     = ptr_st_undfut_pos->l_isell_qty + st_cntfut_pos.l_isell_qty;

  ptr_st_undfut_pos->d_isell_ord_vl	= ptr_st_undfut_pos->d_isell_ord_vl+ st_cntfut_pos.d_isell_ord_val;

  ptr_st_undfut_pos->l_exbuy_qty     = ptr_st_undfut_pos->l_exbuy_qty + st_cntfut_pos.l_exbuy_qty;

  ptr_st_undfut_pos->d_exbuy_ord_vl	= ptr_st_undfut_pos->d_exbuy_ord_vl	+ st_cntfut_pos.d_exbuy_ord_val;

  ptr_st_undfut_pos->l_exsell_qty    = ptr_st_undfut_pos->l_exsell_qty + st_cntfut_pos.l_exsell_qty;

  ptr_st_undfut_pos->d_exsell_ord_vl	= ptr_st_undfut_pos->d_exsell_ord_vl	+ st_cntfut_pos.d_exsell_ord_val;

  ptr_st_undfut_pos->l_buy_exctd_qty = ptr_st_undfut_pos->l_buy_exctd_qty + st_cntfut_pos.l_buy_exctd_qty;

  ptr_st_undfut_pos->l_sell_exctd_qty  = ptr_st_undfut_pos->l_sell_exctd_qty + st_cntfut_pos.l_sell_exctd_qty;

  ptr_st_undfut_pos->l_opnpstn_qty     = ptr_st_undfut_pos->l_opnpstn_qty + st_cntfut_pos.l_opnpstn_qty;

  ptr_st_undfut_pos->d_org_opn_val	= ptr_st_undfut_pos->d_org_opn_val	+ st_cntfut_pos.d_opnpstn_val;

  ptr_st_undfut_pos->d_mtm_opn_val     = ptr_st_undfut_pos->d_mtm_opn_val + st_cntfut_pos.d_mtm_opn_val;

  ptr_st_undfut_pos->d_imtm_opn_val  = ptr_st_undfut_pos->d_imtm_opn_val + st_cntfut_pos.d_imtm_opn_val;

  return 0;

}

/**** Added In ver 1.4 ******/

int fn_insert_report( char *c_ServiceName,
                      char *c_spn_mtch_accnt,
                      char *c_cnvrsn_rmrks,
                      char *c_status,
											char *c_mrgn_typ,				/*** Ver 1.6 ***/
											char  c_spl_flg,				/*** Ver 1.6 ***/
											char *c_xchng_cd,				/*** Ver 2.3 ***/
											char *c_usr_id,					/*** ver 3.3 ***/
											int  sql_lsm_sms_id,		/*** ver 3.3 ***/
                      char *c_cnvrsion_mode, /*** ver 3.3 ***/
											double d_required_amount) /*** ver 3.3 ***/
{
    int i_trnsctn = 0;
		char c_cnvrsn_src[8] = "\0";		/*** Ver 1.6 ***/ /*** Variable initialized in Ver 2.8 ***/
		/*** Ver 3.3 starts ***/
		FBFR32  *ptr_fml_Sbuffer;
		ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
    if(ptr_fml_Sbuffer == NULL)
    {
      fn_errlog( c_ServiceName, "S31560",LIBMSG, c_err_msg );
			return -1;
    }
		/*** Ver 3.3 ends ***/

    fn_userlog(c_ServiceName," Inside Function fn_insert_report ");

    if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog(c_ServiceName," Inside Function fn_insert_report ");
      fn_userlog(c_ServiceName," c_ServiceName    |%s|",c_ServiceName);
      fn_userlog(c_ServiceName," c_spn_mtch_accnt |%s|",c_spn_mtch_accnt);
      fn_userlog(c_ServiceName," c_cnvrsn_rmrks   |%s|",c_cnvrsn_rmrks);
      fn_userlog(c_ServiceName," c_status         |%s|",c_status);
			fn_userlog(c_ServiceName," c_mrgn_typ       |%s|",c_mrgn_typ);			/*** Ver 1.6 ***/
			fn_userlog(c_ServiceName," c_spl_flg				|%c|",c_spl_flg);				/*** Ver 1.6 ***/
			fn_userlog(c_ServiceName," c_xchng_cd				|%s|",c_xchng_cd);			/*** Ver 2.3 ***/
    }

		/*** Ver 1.6 starts here ***/
		if (c_spl_flg == 'F')
			strcpy	( c_cnvrsn_src, "WEB");		/*** Ver 1.8 ***/
		else if (c_spl_flg == 'B' || c_spl_flg == 'K' || c_spl_flg == 'A' ) /*** Ver 3.3 ***/
			strcpy	( c_cnvrsn_src, "OFF");		/*** Ver 1.8 ***/
		else if (c_spl_flg == 'S')
			strcpy	( c_cnvrsn_src, "WE4");	/*** Ver 2.6 ***/
		else if (c_spl_flg == 'H')
      strcpy  ( c_cnvrsn_src, "WEH");  /*** Ver 3.0 ***/
		/*** Ver 1.6 ends here ***/

    i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
    if ( i_trnsctn == -1 )
    {
       fn_errlog ( c_ServiceName, "S31565", LIBMSG, c_err_msg );
			 tpfree((char *)ptr_fml_Sbuffer); /*** Ver 3.3 ***/
       return -1;
    }
	
  	rtrim(c_cnvrsn_rmrks);
    rtrim(c_status);

    EXEC SQL
        INSERT INTO FSC_SPNNRML_CNV
            ( FSC_CLM_MTCH_ACCNT,
              FSC_CNVRSN_TIME,
              FSC_CNVRSN_RMRKS,
              FSC_CNVRSN_STTS,
							FSC_MARGINING_TYP,		/*** Ver 1.6 ***/
							FSC_CNVRSN_SRC,				/*** Ver 1.6 ***/
							FSC_XCHNG_CD,					/*** Ver 2.3 ***/
              FSC_MODE              /*** Ver 3.3 ***/ 
            )
            VALUES
            ( :c_spn_mtch_accnt,
              SYSDATE,
              :c_cnvrsn_rmrks,
              :c_status,
							:c_mrgn_typ,					/*** Ver 1.6 ***/
							:c_cnvrsn_src,				/*** Ver 1.6 ***/
							:c_xchng_cd,						/*** Ver 2.3 ***/
              :c_cnvrsion_mode        /*** Ver 3.3 ***/
            );

    if ( SQLCODE != 0 )
    {
       fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
       fn_userlog( c_ServiceName, "Failed To Insert Into Log Table For Match Account :%s:",c_spn_mtch_accnt);
       fn_errlog( c_ServiceName, "S31570",SQLMSG, c_err_msg );
 			 tpfree((char *)ptr_fml_Sbuffer); /*** Ver 3.3 ***/
       return -1;
    }

		/*** Ver 3.3 starts ***/
		if (sql_lsm_sms_id != 126)
	  {
			EXEC SQL
				UPDATE FSC_SPNNRML_CNV
				SET		 FSC_CNVRSN_STTS = :c_status
				WHERE  FSC_CLM_MTCH_ACCNT = :c_spn_mtch_accnt
				AND		 FSC_CNVRSN_STTS in ('PENDING','FAIL')
				AND    FSC_CNVRSN_RMRKS in ('Request for NORMAL To SPAN conversion')
				AND    FSC_CNVRSN_TIME >= (SELECT to_date(MAX(FBC_TRD_DT) || ' 09:15:00','DD-Mon-YYYY HH24:Mi:SS')
																		FROM	 FBC_FO_BRNCH_CAL 
																		WHERE	 FBC_XCHNG_CD = :c_xchng_cd 
																		AND		 FBC_TRD_DT < (SELECT EXG_NXT_TRD_DT FROM EXG_XCHNG_MSTR WHERE EXG_XCHNG_CD = :c_xchng_cd)  
																		AND		 FBC_GRP_ID=1 
																		AND		 FBC_BRANCH='0004' 
																	) 
				AND    FSC_XCHNG_CD = :c_xchng_cd;

			if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
			{
				 fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
				 fn_errlog( c_ServiceName, "S31575",SQLMSG, c_err_msg );
				 tpfree((char *)ptr_fml_Sbuffer); 
				 return -1;		
			}
		}

		if (sql_lsm_sms_id != 0)
	  {
			if (sql_lsm_sms_id == 129 || sql_lsm_sms_id == 133 )
			{
				EXEC SQL
					SELECT REPLACE(LSM_MSG_TXT,'XXXXX',:d_required_amount)
					INTO   :sql_lsm_msg_txt
					FROM   LSM_LCK_SMS_MSG_MSTR
					WHERE  LSM_SMS_ID = :sql_lsm_sms_id;
			}
			else
		  {
				EXEC SQL
					SELECT LSM_MSG_TXT 
					INTO   :sql_lsm_msg_txt
					FROM   LSM_LCK_SMS_MSG_MSTR
					WHERE  LSM_SMS_ID = :sql_lsm_sms_id;
			}
			if( SQLCODE != 0 )
			{
				 fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
				 fn_errlog( c_ServiceName, "S31580",SQLMSG, c_err_msg );
				 tpfree((char *)ptr_fml_Sbuffer); 
				 return -1;		
			}

			SETNULL(sql_lsm_msg_txt);

			if( Fadd32(ptr_fml_Sbuffer,FML_SYS_MSG,(char *)sql_lsm_msg_txt.arr,0) == -1 )
			{
				 fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
				 fn_errlog( c_ServiceName, "S31585",LIBMSG, c_err_msg );
				 tpfree((char *)ptr_fml_Sbuffer);
				 return -1;		
			}

			if(fn_snd_mymsg_sms_notfcn(c_ServiceName,
																&ptr_fml_Sbuffer,
																c_usr_id,
																DEF_SSSN,
																c_spn_mtch_accnt,
																"CONV",
																MYMSG_AND_NOTFCN,
																c_err_msg) != 0)
			{
				 fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
				 fn_errlog( c_ServiceName, "S31590",LIBMSG, c_err_msg );
				 tpfree((char *)ptr_fml_Sbuffer); 
				 return -1;	
			}
		}
		/*** Ver 3.3 ends ***/

    if ( fn_committran( c_ServiceName, i_trnsctn,c_err_msg ) == -1 )
    {
       fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
       fn_errlog ( c_ServiceName, "S31595", LIBMSG, c_err_msg );
			 tpfree((char *)ptr_fml_Sbuffer); /*** Ver 3.3 ***/
       return -1;
    }
		tpfree((char *)ptr_fml_Sbuffer); 
    return 0;
}
