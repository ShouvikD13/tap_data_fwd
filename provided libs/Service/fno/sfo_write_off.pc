/*  Program           :   SFO_WRITE_OFF                                       */
/*                                                                            */
/*  Input             :   FFO_EBA_MTCH_ACT_NO																	*/
/*												FFO_XCHNG_CD																				*/
/*												FFO_TRD_DT																					*/
/*											  FFO_PI_PO_AMT 							    										*/
/*											  FFO_DR_CR_FLG    																		*/
/*                                                                            */
/*  Output            :                                                       */
/*                                                                            */
/*  Desription        :                                                       */
/*                                                                            */
/*                                                                            */
/******************************************************************************/
/*                                                                            */
/*            Ver 1.0        Ritesh Deolekar     Release 1.0                  */
/*            Ver 1.1        Samip M			Release 1.1 - View to FML Changes   */
/*                                                                            */  
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fml_def.h>
/** #include <fo_view_def.h> ** Ver 1.2 **/
#include <fo_view_def.h>    /** Ver 1.2 **/
#include <fml_rout.h>         /** Ver 1.2 */
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <userlog.h>

#include <fn_session.h> /* Ver 1.2 */
#include <fn_tuxlib.h>
#include <fo.h>
#include <fo_bank.h>
#include <fn_ddr.h>
#include <fn_log.h> 
#include <fml_rout.h> 
#include <fn_read_debug_lvl.h> 

int fn_pass_cls_entry_w( char *c_ServiceName,
                        char *c_err_msg,
                        char *c_cln_mtch_accnt,
                        char *c_xchng_cd,
                        char *c_trd_dt,
                        char *c_tag,
                        char  c_dr_cr_flg,
                        double d_amt_to_be_clsd,
                        char  *c_reference); 

int fn_do_db_on_bft_w ( char *c_ServiceName,
                      char *c_err_msg,
                      char *c_cln_mtch_accnt,
                      char *c_xchng_cd,
                      char *c_trd_dt,
                      char *c_bnk_accnt,
                      char *c_tag,
                      double d_amt,
											char c_dr_cr_flg);

int fn_do_db_on_alloc_w ( char *c_ServiceName,
                        char *c_err_msg,
                        char *c_cln_mtch_accnt,
                        char *c_xchng_cd,
                        char *c_trd_dt,
                        char *c_bnk_accnt,
                        char *c_tag,
                        double d_amt,
												char c_dr_cr_flg);

int fn_do_cr_w ( char *, char *, char *, char *, char *,char *, double, char );


int fn_upd_bnk_drcr_w(  char *c_ServiceName,
                      char *c_xchng_cd,
                      char *c_cln_mtch_accnt,
                      char *c_trd_dt,
                      char  c_dr_cr_flg,
                      int   i_grp_id,
                      double d_amount);

int fn_do_db_on_clr_bal_w ( char *c_ServiceName,
                          char *c_err_msg,
                          char *c_cln_mtch_accnt,
                          char *c_xchng_cd,
                          char *c_trd_dt,
                          char *c_bnk_accnt,
                          char *c_tag,
                          double d_amt,
													char c_dr_cr_flg);


int fn_ins_pipo_dtls_w( char *c_xchng_cd,
                      char *c_trd_dt ,
                      char *c_bill_no ,
                      double d_amount,
                      char *c_reference); 

int fn_call_upd_limits_w( char *c_ServiceName,
                        struct vw_upd_limits *ptr_st_upd_lmts,
                        char  *c_err_msg,
                        int   i_grp_id,
                        char  c_lmt_prj_flg );

int fn_do_bft_w ( char *c_ServiceName,
                char *c_err_msg,
                char *c_cln_mtch_accnt,
                char *c_bnk_accnt,
                char *c_tag,
               double d_amt);


/**********



int fn_insrt_pipo_rpt_tbl(  char   *c_ServiceName,
                            char   *c_xchng_cd,
                            char   *c_cln_mtch_accnt,
                            char   *c_trd_dt,
                            double d_payout_amt,
                            double d_blk4trd_amt,
                            double d_payin_amt,
                            double d_intadj_amt,
                            double d_bnk_pipo_amt,
                            double d_eba_pipo_amt,
                            double d_bnk_bft_amt,
                            double d_eba_bft_amt,
                            long   c_pi_po_amt,
                            char   *c_bnk_narration ); 

*********/

void SFO_WRITE_OFF( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;

  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
  char c_dr_cr_flg ;
  char c_msg [ 256 ];
  char c_rout [ 4 ];
  char c_timestamp [ 14 + 1 ];
  char c_bnk_narration[21]; 
  char c_tag [ 256 ];
	
  int i_returncode;
  int i;
int i_trnsctn ;
/***  int i_ip_len; *****/
/***  int i_op_len; ***/
/***  int i_trnsctn; ***/
  int i_err[11];
  int i_ferr[11];


  double d_pipo_amt = 0;
  double d_limit= 0.0;
  double d_amt= 0.0;

  struct vw_usr_prfl st_usr_prfl;
  struct vw_upd_limits ptr_st_upd_lmts;

  EXEC SQL BEGIN DECLARE SECTION;
  char c_xchng_cd[4];
  char c_narration_id[4];
  char c_lmt_prj_flg;
  char c_cln_mtch_accnt[11];
  char c_bnk_accnt[21];
  char c_reference[16];
  int i_grp_id;
	int i_exist_flg = 0;
  double d_payin_amt;
	double d_cr_amt;
  double d_dr_amt = 0.0;
  double d_amount;
  double d_alctd_amt;
  double d_bft_amt;
  double d_amt_to_be_clsd;
  double d_adj_amt;
  double d_min_payin_amt;
  double d_min_payout_amt;
	double d_bal_amt = 0.0;
	double d_bnk_pipo_amt = 0.0;
	double d_new_bft = 0.0;
  char c_trd_dt[12];
  char c_payin_dt[12];
  char c_payout_dt[12];
  char c_sys_dt[12];
	char c_pipo_amt[30];
	char c_dr_amt[30];

  double d_eba_pipo_amt;
  double d_bnk_bft_amt;
  double d_eba_bft_amt;

  double d_dr_tds_amt;  

	
  EXEC SQL END DECLARE SECTION;

  d_eba_pipo_amt = 0.0;
  d_bnk_bft_amt  = 0.0;
  d_eba_bft_amt  = 0.0;
  d_dr_tds_amt   = 0.0; 

  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, "SFO_WRITE_OFF" );
  INITDBGLVL(c_ServiceName);

/*The Copied date will notify that it is not for rerun but for fresh run
  The code below is commented because it was decided during testing to keep
  date as date variable in the rerun table*/

  /*strcpy( c_timestamp, "N" );*/
  strcpy( c_timestamp, "01-Jan-1980" );       /*1.1*/

  i_err[0] = Fget32( ptr_fml_Ibuf, FFO_XCHNG_CD, 0,
                                   (char *)c_xchng_cd, 0 );
  i_ferr[0] = Ferror32;
  i_err[1] = Fget32( ptr_fml_Ibuf, FFO_TRD_DT, 0,
                                   (char *)c_trd_dt, 0 );
  i_ferr[1] = Ferror32;
  i_err[2] = Fget32( ptr_fml_Ibuf, FFO_EBA_MTCH_ACT_NO, 0,
                                   (char *)c_cln_mtch_accnt, 0 );
  i_ferr[2] = Ferror32;
  i_err[3] = Fget32( ptr_fml_Ibuf, FFO_PI_PO_AMT, 0,
                                   (char *)&d_pipo_amt, 0 );
  i_ferr[3] = Ferror32;
  i_err[4] = Fget32( ptr_fml_Ibuf, FFO_DR_CR_FLG, 0,
                                   (char *)&c_dr_cr_flg, 0 );
  i_ferr[4] = Ferror32;

  for (i=0;i<5;i++)         
  {
     if (i_err[i] == -1)
     {
        fn_userlog(c_ServiceName,"Error in Fget at [%d],[%s]",
                                          i,Fstrerror32( i_ferr[i]));
        fn_errlog(c_ServiceName, "S31005", FMLMSG, c_err_msg  );
				Fadd32(ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
  }
	
	 fn_userlog(c_ServiceName,"BEFORE d_pipo_amt[%lf]",d_pipo_amt);
		MEMSET(c_pipo_amt);
		sprintf(c_pipo_amt,"%ld",(long)d_pipo_amt);
	 fn_userlog(c_ServiceName,"BEFORE c_pipo_amt[%s]",c_pipo_amt);

		d_pipo_amt = (double) (d_pipo_amt * 100.0);

 /*** Added for Order Routing ***/
  fn_init_ddr_val ( c_rout );

/**************** to be commented at the time of movement *******
  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31010", LIBMSG, c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

**************** to be commented at the time of movement *******/

  /*sprintf ( c_msg, "Processing match account no %s ", c_cln_mtch_accnt );
  fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_dr_cr_flg ); */

	fn_userlog(c_ServiceName,"c_cln_mtch_accnt [%s]",c_cln_mtch_accnt);

  EXEC SQL
    SELECT  FAB_BNK_ACCNT ,
            FAB_ALCTD_AMT,
            FAB_BFT_AMT
    INTO    :c_bnk_accnt,
            :d_alctd_amt,
            :d_bft_amt
    FROM FAB_FO_ALC_BFT_SMRY , CLB_BNK_ACCTS
    WHERE FAB_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
    AND CLB_CLM_MTCH_ACCNT = FAB_CLM_MTCH_ACCNT;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31015",SQLMSG,c_err_msg);
		Fadd32(ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	fn_userlog(c_ServiceName,"c_cln_mtch_accnt %s",c_cln_mtch_accnt);

  rtrim(c_bnk_accnt);

/***  strcpy(st_usr_prfl.c_user_id,"system");
  strcpy(st_usr_prfl.c_cln_mtch_accnt,c_cln_mtch_accnt);
  strcpy(st_usr_prfl.c_bnk_accnt_nmbr[0],c_bnk_accnt);
  st_usr_prfl.l_session_id = 0;

	******************* rit Comment end *************/


	EXEC SQL
        /** SELECT  NVL(SUM(FBD_DC_AMT - FBD_PI_PO_AMT - FBD_INT_ADJ_AMT),0) ***/
        SELECT  round ((FBD_DC_AMT - FBD_PI_PO_AMT - FBD_INT_ADJ_AMT) / 100,2) * 100
        INTO  :d_dr_amt
        FROM  FBD_FO_BNK_DRCR
        WHERE FBD_XCHNG_CD = :c_xchng_cd
        AND   FBD_DC_FLG = :c_dr_cr_flg 
        AND   FBD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
        AND   FBD_TRD_DT = to_date(:c_trd_dt, 'dd-Mon-yyyy' )
        AND   FBD_DC_AMT != FBD_PI_PO_AMT + FBD_INT_ADJ_AMT
        AND   FBD_GRP_ID <> 9;              /** Ver 1.2 add **/

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31020",SQLMSG,c_err_msg);
		fn_userlog(c_ServiceName, "No data found as per the input");
		sprintf(c_err_msg,"%s","No record found for Input");
		Fadd32(ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


	EXEC SQL
		SELECT 1 INTO :i_exist_flg
		FROM DUAL WHERE :d_pipo_amt - :d_dr_amt <>0;

  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_errlog(c_ServiceName, "S31025",SQLMSG,c_err_msg);
    fn_userlog(c_ServiceName, "%s",c_err_msg);
		Fadd32(ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	fn_userlog(c_ServiceName,"Exsit flag :%d:",i_exist_flg);
		MEMSET(c_pipo_amt);
	sprintf(c_pipo_amt,"%15.15lf",d_pipo_amt);
	fn_userlog(c_ServiceName," c_pipo_amt : |%s|",c_pipo_amt);
	sprintf(c_dr_amt,"%15.15lf",d_dr_amt);
	fn_userlog(c_ServiceName," c_dr_amt : |%s|",c_dr_amt);

	fn_userlog(c_ServiceName,"d_pipo_amt[%lf]",d_pipo_amt);
	fn_userlog(c_ServiceName,"d_dr_amt[%lf]",d_dr_amt);
	fn_userlog(c_ServiceName,"c_trd_dt[%s]",c_trd_dt);
  	
	
	/**if((double) d_pipo_amt != (double)d_dr_amt)**/
	if(i_exist_flg != 0)
	{
		fn_userlog(c_ServiceName,"amount not match d_pipo_amt != d_dr_amt");
		sprintf(c_err_msg,"%s","Amount not matched");
		Fadd32(ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	} 

		if(d_pipo_amt >= 0 )
		{
				d_new_bft = d_pipo_amt ;
        i_returncode =  fn_do_cr_w (  c_ServiceName,
                                    c_err_msg,
                                    c_cln_mtch_accnt,
                                    c_xchng_cd,
                                    c_trd_dt,
                                    c_tag,
                                    d_pipo_amt,
																		c_dr_cr_flg);
        if ( i_returncode != 0 )
        {
          fn_errlog(c_ServiceName, "S31030",LIBMSG,c_err_msg);
          strcpy ( c_msg, "System error. Contact system support" );
          fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
					Fadd32(ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

/***				if ( d_new_bft > 0 ) * Handling BFT *
        {
					i_returncode =  fn_do_bft_w ( c_ServiceName,
                                      c_err_msg,
                                      c_cln_mtch_accnt,
                                      c_bnk_accnt,
                                      c_tag,
                                      d_new_bft);
					if ( i_returncode != 0 )
					{
						fn_errlog(c_ServiceName, "S31035",LIBMSG,c_err_msg);
						strcpy ( c_msg, "System error. Contact system support" );
						fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
						Fadd32(ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
				} ******/

		}
		if(d_pipo_amt  < 0)
		{

			c_dr_cr_flg = DEBIT;
			d_bal_amt = d_pipo_amt ;
      d_amount = 0;
      c_reference[0] = '\0';
/***
      if(( d_bft_amt > 0 ) && ( d_bal_amt < 0 ))
      {
				fn_userlog(c_ServiceName,"Inside DEBIT d_bft_amt");
				d_amount =  fn_mind(d_bft_amt, -1.0 * d_bal_amt );
				d_bnk_pipo_amt = d_amount * (-1.0);
				i_returncode =  fn_do_db_on_bft_w ( c_ServiceName,
                                                c_err_msg,
                                                c_cln_mtch_accnt,
                                                c_xchng_cd,
                                                c_trd_dt,
                                                c_bnk_accnt,
                                                c_tag,
                                                d_amount,
																								c_dr_cr_flg);

        if ( i_returncode != 0 )
        {
					fn_errlog(c_ServiceName, "S31040",LIBMSG,c_err_msg);
					fn_bat_pst_msg_fno ( c_ServiceName, c_err_msg, c_tag );
					Fadd32(ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				d_eba_pipo_amt = d_amount * (-1.0);
				d_bal_amt = d_bal_amt + d_amount;
				
			}
			
			if(( d_alctd_amt > 0 ) && ( d_bal_amt < 0 ))
			{
				fn_userlog(c_ServiceName,"Inside DEBIT d_alctd_amt");
				d_amount =  fn_mind(d_alctd_amt, -1.0 * d_bal_amt );
				d_bnk_pipo_amt = d_bnk_pipo_amt + ( d_amount * (-1.0) );
				i_returncode =    fn_do_db_on_alloc_w ( c_ServiceName,
                                                  c_err_msg,
                                                  c_cln_mtch_accnt,
                                                  c_xchng_cd,
                                                  c_trd_dt,
                                                  c_bnk_accnt,
                                                  c_tag,
                                                  d_amount,
																									c_dr_cr_flg);

        if ( i_returncode != 0 )
        {
          fn_errlog(c_ServiceName, "S31045",LIBMSG,c_err_msg);
          fn_bat_pst_msg_fno ( c_ServiceName, c_err_msg, c_tag );
					Fadd32(ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        d_eba_pipo_amt = d_eba_pipo_amt + ( d_amount * (-1.0) );
        d_bal_amt = d_bal_amt + d_amount;

			}
********/
			if( d_bal_amt < 0 )
			{
				fn_userlog(c_ServiceName,"Inside DEBIT Clear bal");
				d_amount =  -1.0 * d_bal_amt ;
				d_bnk_pipo_amt = d_bnk_pipo_amt + ( d_amount * (-1.0) );
        i_returncode =  fn_do_db_on_clr_bal_w ( c_ServiceName,
                                                      c_err_msg,
                                                      c_cln_mtch_accnt,
                                                      c_xchng_cd,
                                                      c_trd_dt,
                                                      c_bnk_accnt,
                                                      c_tag,
                                                      d_amount,
																											c_dr_cr_flg);

        if ( i_returncode != 0 )
        {
          fn_errlog(c_ServiceName, "S31050",LIBMSG,c_err_msg);
          fn_bat_pst_msg_fno ( c_ServiceName, c_err_msg, c_tag );
					Fadd32(ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        d_eba_pipo_amt = d_eba_pipo_amt + ( d_amount * (-1.0) );
        d_bal_amt = d_bal_amt + d_amount;
			}

		}
/*************** Commented for same transation *******
  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "S31055",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
*************/

			tpreturn( TPSUCCESS, SUCC_BFR, NULL, 0, 0 );

}


int fn_do_cr_w ( char *c_ServiceName,
               char *c_err_msg,
               char *c_cln_mtch_accnt,
               char *c_xchng_cd,
               char *c_trd_dt,
               char *c_tag,
               double d_amt,
						   char c_dr_cr_flg)
{

  char c_msg [ 256 ];
  int i_trnsctn;
  int i_returncode;
  EXEC SQL BEGIN DECLARE SECTION;
    char    c_reference[16];
  EXEC SQL END DECLARE SECTION;


  fn_userlog(c_ServiceName,"Inside fn_do_cr_w ----- II");

/****************** Commented for same transation *************
  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31060", LIBMSG, c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  i_returncode = fn_lock_usr( c_ServiceName, c_cln_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "S31065",LIBMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }
*************/

  EXEC SQL
    SELECT to_char(sysdate,'DDMONYYYY')||LPAD(piposeq.nextval,6,0)
    INTO : c_reference
    FROM   DUAL;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31070",SQLMSG,c_err_msg);
    /** fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg ); ***/
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  fn_userlog(c_ServiceName,"before calling fn_pas ----- III");

  i_returncode = fn_pass_cls_entry_w (  c_ServiceName,
                                      c_err_msg,
                                      c_cln_mtch_accnt,
                                      c_xchng_cd,
                                      c_trd_dt,
                                      c_tag,
                                      c_dr_cr_flg,
                                      d_amt,
                                      c_reference);
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "S31075",LIBMSG,c_err_msg);
		/** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); ***/
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  fn_userlog(c_ServiceName,"After calling fn_pas ----- III");

/*********** Commented for same transaction **********
  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "S31080",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }
**************************/

  return ( 0 );
}


int fn_pass_cls_entry_w ( char *c_ServiceName,
                        char *c_err_msg,
                        char *c_cln_mtch_accnt,
                        char *c_xchng_cd,
                        char *c_trd_dt,
                        char *c_tag,
                        char c_dr_cr_flg,
                        double d_amt_to_be_clsd,
                        char  *c_reference)
{
  char c_msg [ 256 ];
  int i_returncode;
  struct vw_upd_limits ptr_st_upd_lmts;
    char    c_bill_no[51];
   /**  char    c_trd_dt[12];***/
    int     i_grp_id;
    double  d_amount;
    double  d_adj_amt;
    char c_lmt_prj_flg = 'P';

  fn_userlog(c_ServiceName,"Inside fn_pas");
  fn_userlog(c_ServiceName,"Value of  c_dr_cr_flg is [%c]",c_dr_cr_flg);
  fn_userlog(c_ServiceName,"d_amt_to_be_clsd in fn_pas  is [%lf]",d_amt_to_be_clsd);


			 EXEC SQL
            SELECT  to_char( FBD_TRD_DT , 'dd-Mon-yyyy' ),
                    FBD_GRP_ID,
                    FBD_DC_AMT - FBD_PI_PO_AMT - FBD_INT_ADJ_AMT,
                    FBD_BILL_NO
						INTO		:c_trd_dt,	
										:i_grp_id,
										:d_adj_amt,
										:c_bill_no
            FROM    FBD_FO_BNK_DRCR
            WHERE   FBD_XCHNG_CD = :c_xchng_cd
            AND     FBD_DC_FLG = :c_dr_cr_flg
            AND     FBD_TRD_DT = to_date(:c_trd_dt, 'dd-Mon-yyyy')
            AND     FBD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
 	          AND     FBD_DC_AMT != FBD_PI_PO_AMT + FBD_INT_ADJ_AMT;

	if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31085",SQLMSG,c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }
    if ( d_adj_amt > 0 )
    {
      d_amount = fn_mind( d_adj_amt , d_amt_to_be_clsd );
      fn_userlog(c_ServiceName,"+++++++ d_amount <%lf>",d_amount);
    }
    else
    {
      d_amount = fn_mind( d_adj_amt*-1.0 , d_amt_to_be_clsd );
      d_amount = d_amount * -1.0;
      fn_userlog(c_ServiceName,"------ d_amount <%lf>",d_amount);
    }
		 strcpy( ptr_st_upd_lmts.c_xchng_cd,c_xchng_cd);
     strcpy( ptr_st_upd_lmts.c_cln_mtch_accnt,c_cln_mtch_accnt);
     strcpy( ptr_st_upd_lmts.c_trd_dt,c_trd_dt);
     strcpy( ptr_st_upd_lmts.c_remarks,c_reference);

		 ptr_st_upd_lmts.c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;
		
		if( c_dr_cr_flg == 'D' )
	  {
			ptr_st_upd_lmts.c_dr_cr_flg = 'C';
		}

		if( c_dr_cr_flg == 'C' )
	  {
			ptr_st_upd_lmts.c_dr_cr_flg = 'D';
		}
		 ptr_st_upd_lmts.d_amount = -1.0 * d_amount; 

/**		 ptr_st_upd_lmts.c_dr_cr_flg = c_dr_cr_flg;**/
		 /** ptr_st_upd_lmts.d_amount = -1.0 * d_amount; ***/
/**		 ptr_st_upd_lmts.d_amount = d_amount;**/

		 i_returncode =   fn_call_upd_limits_w(c_ServiceName,
                                          &ptr_st_upd_lmts,
                                          c_err_msg,
                                          i_grp_id,
                                          c_lmt_prj_flg );

      if ( i_returncode != 0 )
      {
        fn_errlog( c_ServiceName, "S31090",SQLMSG,c_err_msg);
        strcpy ( c_msg, "System error. Contact system support" );
        fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      	return -1;
			}

/********* Commented as per user request ****

		 i_returncode = fn_ins_pipo_dtls_w( c_xchng_cd ,
                                        c_trd_dt ,
                                        c_bill_no ,
                                        d_amount ,
                                        c_reference);
      if ( i_returncode != 0 )
      {
        fn_errlog( c_ServiceName, "S31095",SQLMSG,c_err_msg);
        strcpy ( c_msg, "System error. Contact system support" );
        fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      	return -1;
			}
		********** Comment end ********/


      i_returncode =  fn_upd_bnk_drcr_w(c_ServiceName,
                                        c_xchng_cd,
                                        c_cln_mtch_accnt,
                                        c_trd_dt,
                                        c_dr_cr_flg,
                                        i_grp_id,
                                        d_amount);

      if ( i_returncode != 0 )
      {
        fn_errlog( c_ServiceName, "S31100",SQLMSG,c_err_msg);
        strcpy ( c_msg, "System error. Contact system support" );
        fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      	return -1;
			}



	return ( 0 );
}



int fn_ins_pipo_dtls_w( char *c_xchng_cd,
                      char *c_trd_dt ,
                      char *c_bill_no ,
                      double d_amount,
                      char *c_reference) 
{            /* Add to the existing match bill upload record */

      EXEC SQL
           UPDATE FBS_FO_BILL_STLMNT
           SET    FBS_PI_PO_AMT = FBS_PI_PO_AMT + :d_amount,
					        FBS_WRITEOFF_FLG = 'Y'
           WHERE  FBS_RUN_DT = :c_trd_dt
           AND    FBS_BILL_NO = :c_bill_no
           AND    FBS_PIPO_RFRNC = :c_reference
           AND    FBS_MTCH_UPLD_FLG = 'N'
           AND    FBS_XCHNG_CD = :c_xchng_cd;   /*** Ver 1.6 ***/

      if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
      {
          return -1;
      }

      if ( SQLCODE == NO_DATA_FOUND )
      {

              EXEC SQL
                   INSERT INTO FBS_FO_BILL_STLMNT
                   (
                       FBS_XCHNG_CD,
                       FBS_RUN_DT,
                       FBS_BILL_NO,
                       FBS_PI_PO_AMT,
                       FBS_PIPO_RFRNC,
                       FBS_MTCH_UPLD_FLG,
											 FBS_WRITEOFF_FLG
                   )
                   VALUES
                   (
                       :c_xchng_cd,
                       :c_trd_dt,
                       :c_bill_no,
                       :d_amount,
                       :c_reference,
                       'N',
										   'Y' 
                   );
              if ( SQLCODE != 0 )
              {
                 return -1;
              }
         }


   return 0;
}


int fn_upd_bnk_drcr_w(  char *c_ServiceName,
                      char *c_xchng_cd,
                      char *c_cln_mtch_accnt,
                      char *c_trd_dt,
                      char  c_dr_cr_flg,
                      int   i_grp_id,
                      double d_amount)
{
  char c_err_msg[256];

      fn_userlog( c_ServiceName, "Inside fn_upd_bnk_drcr_w");


    EXEC SQL
      UPDATE  FBD_FO_BNK_DRCR
      SET     FBD_INT_ADJ_AMT = FBD_INT_ADJ_AMT + :d_amount,
			        FBD_WRITEOFF_FLG = 'Y'
      WHERE   FBD_XCHNG_CD    = :c_xchng_cd
      AND     FBD_DC_FLG      = :c_dr_cr_flg
      AND     FBD_TRD_DT      = :c_trd_dt
      AND     FBD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
      AND     FBD_GRP_ID      =  :i_grp_id;

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31105",SQLMSG,c_err_msg);
      return ( FAILURE );
    }

  return ( SUCCESS );
}


int fn_call_upd_limits_w( char *c_ServiceName,
                        struct vw_upd_limits *ptr_st_upd_lmts,
                        char  *c_err_msg,
                        int   i_grp_id,
                        char  c_lmt_prj_flg )
{
  int i_ip_len;
  int i_op_len;
  int i_returncode;
  FBFR32 *ptr_fml_Sbuf;   /** Ver 1.2 **/
  FBFR32 *ptr_fml_Rbuf;   /** Ver 1.2 **/
  int i_err[10];      /* Ver 1.2 */
  int i_ferr[10];     /* Ver 1.2 */
  int i;              /* Ver 1.2 */
  long l_recvbuf=0;   /* Ver 1.2 */

      fn_userlog( c_ServiceName, "Inside fn_call_upd_limits_w");

  EXEC SQL
    SELECT  FNM_NARRATION_ID
    INTO    :ptr_st_upd_lmts->c_narration_id
    FROM    FNM_FO_NARRATION_MSTR
    WHERE   FNM_GRP_ID = :i_grp_id
		AND FNM_NARRATION_ID = 'MR'
   /**  AND   FNM_LMT_PRJ_FLG = :c_lmt_prj_flg; **/
    AND   FNM_LMT_PRJ_FLG = :c_lmt_prj_flg	;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31110",SQLMSG,c_err_msg);
    return ( FAILURE );
  }

  i_ip_len = sizeof ( struct vw_upd_limits );
  i_op_len = sizeof ( struct vw_upd_limits );

  strcpy ( ptr_st_upd_lmts->c_rout_crt,"000");

      fn_userlog( c_ServiceName, "Before calling SFO_UPD_LIMITS");

  strcpy ( ptr_st_upd_lmts->c_rout_crt,"000");

      fn_userlog( c_ServiceName, "Before calling SFO_UPD_LIMITS");

	/*** Commented for Ver 1.2 ****
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              ptr_st_upd_lmts,
                              ptr_st_upd_lmts,
                              "vw_upd_limits",
                              "vw_upd_limits",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_LIMITS" );

  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "S31115",LIBMSG,c_err_msg);
    return ( i_returncode );
  }

	******* Ver 1.2 *****/

  /***** Ver 1.2 Starts Here *********/
	ptr_fml_Sbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );
	if ( ptr_fml_Sbuf == NULL )
	{
		fn_errlog( c_ServiceName, "S31120", TPMSG, c_err_msg );
		return (FAILURE);
	}

	ptr_fml_Rbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );
	if ( ptr_fml_Rbuf == NULL )
	{
		fn_errlog( c_ServiceName, "S31125", TPMSG, c_err_msg );
		tpfree ((char *)ptr_fml_Sbuf);
		return (FAILURE);
	}

	i_err [0] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CD, (char *)ptr_st_upd_lmts->c_xchng_cd,0);
	i_ferr[0] = Ferror32;
	i_err [1] = Fadd32(ptr_fml_Sbuf,FFO_EBA_MTCH_ACT_NO, (char *)ptr_st_upd_lmts->c_cln_mtch_accnt,0);
	i_ferr[1] = Ferror32;
	i_err [2] = Fadd32(ptr_fml_Sbuf,FFO_TRD_DT, (char *)ptr_st_upd_lmts->c_trd_dt,0);
	i_ferr[2] = Ferror32;
	i_err [3] = Fadd32(ptr_fml_Sbuf,FFO_NARRATION_ID, (char *)ptr_st_upd_lmts->c_narration_id,0);
	i_ferr[3] = Ferror32;
	i_err [4] = Fadd32(ptr_fml_Sbuf,FFO_REMARKS, (char *)ptr_st_upd_lmts->c_remarks,0);
	i_ferr[4] = Ferror32;
	i_err [5] = Fadd32(ptr_fml_Sbuf,FFO_DR_CR_FLG, (char *)&ptr_st_upd_lmts->c_dr_cr_flg,0);
	i_ferr[5] = Ferror32;
	i_err [6] = Fadd32(ptr_fml_Sbuf,FFO_AMOUNT, (char *)&ptr_st_upd_lmts->d_amount,0);
	i_ferr[6] = Ferror32;
	i_err [7] = Fadd32(ptr_fml_Sbuf,FFO_BAL_AMT, (char *)&ptr_st_upd_lmts->d_bal_amt,0);
	i_ferr[7] = Ferror32;
	i_err [8] = Fadd32(ptr_fml_Sbuf,FFO_DWL_FLG, (char *)&ptr_st_upd_lmts->c_dr_without_lmt_flg,0);
	i_ferr[8] = Ferror32;
	i_err [9] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)ptr_st_upd_lmts->c_rout_crt,0);
	i_ferr[9] = Ferror32;
	for (i = 0;i < 10 ;i++)
	{
		if(i_err[i] == -1 )
		{
			fn_userlog( c_ServiceName, "Error in :%d:",i );
			fn_errlog( c_ServiceName, "S31130", Fstrerror32( i_ferr[i]),c_err_msg);
			fn_errlog( c_ServiceName, "S31135", TPMSG, c_err_msg );
			tpfree ((char *)ptr_fml_Sbuf);
			tpfree ((char *)ptr_fml_Rbuf);
			return (FAILURE);
		}
	}

	i_returncode  = tpcall  ( "SFO_UPD_LIMITS",( char * ) ptr_fml_Sbuf,0,( char ** ) &ptr_fml_Rbuf,&l_recvbuf,0);
	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31140", TPMSG, c_err_msg );
		tpfree ((char *)ptr_fml_Sbuf);
		tpfree ((char *)ptr_fml_Rbuf); 
		return (FAILURE);
	}

	/***** Ver 1.2 Ends Here ***********/


  return ( SUCCESS );
}

int fn_do_db_on_bft_w ( char *c_ServiceName,
                      char *c_err_msg,
                      char *c_cln_mtch_accnt,
                      char *c_xchng_cd,
                      char *c_trd_dt,
                      char *c_bnk_accnt,
                      char *c_tag,
                      double d_amt,
											char c_dr_cr_flg)
{

  char c_msg [ 256 ];
  int i_trnsctn;
  int i_returncode;
  EXEC SQL BEGIN DECLARE SECTION;
    char    c_reference[16];
  EXEC SQL END DECLARE SECTION;

  EXEC SQL
    SELECT to_char(sysdate,'DDMONYYYY')||LPAD(piposeq.nextval,6,0)
    INTO : c_reference
    FROM   DUAL;

  fn_userlog(c_ServiceName,"Inside fn_do_db_on_bft ----A");

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31145",SQLMSG,c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }
  fn_userlog(c_ServiceName,"Before calling fn_upd_alloc_dtls -- A");

  i_returncode = fn_upd_alloc_dtls (  c_ServiceName,
                                      c_err_msg,
                                      c_cln_mtch_accnt,
                                      c_bnk_accnt,
                                      c_tag,
                                      d_amt * (-1.0),
                                      0 );
  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31150",LIBMSG,c_err_msg);
    /** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); ***/
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }
  fn_userlog(c_ServiceName,"After calling fn_upd_alloc_dtls -- A");
  fn_userlog(c_ServiceName,"Before calling fn_pass_cls_entry -- B");

  i_returncode = fn_pass_cls_entry_w (  c_ServiceName,
                                      c_err_msg,
                                      c_cln_mtch_accnt,
                                      c_xchng_cd,
                                      c_trd_dt,
                                      c_tag,
                                      c_dr_cr_flg,
                                      d_amt,
                                      c_reference);
  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31155",LIBMSG,c_err_msg);
    /** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); ***/
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }
  fn_userlog(c_ServiceName,"After calling fn_pass_cls_entry -- B");
  return ( 0 );
}

int fn_do_db_on_alloc_w ( char *c_ServiceName,
                        char *c_err_msg,
                        char *c_cln_mtch_accnt,
                        char *c_xchng_cd,
                        char *c_trd_dt,
                        char *c_bnk_accnt,
                        char *c_tag,
                        double d_amt,
												char c_dr_cr_flg)
{
  char c_msg [ 256 ];
  int i_trnsctn;
  int i_returncode;
  EXEC SQL BEGIN DECLARE SECTION;
    char    c_reference[16];
  EXEC SQL END DECLARE SECTION;
  fn_userlog(c_ServiceName,"Inside fn_do_db_on_alloc -- C");

  EXEC SQL
    SELECT to_char(sysdate,'DDMONYYYY')||LPAD(piposeq.nextval,6,0)
    INTO : c_reference
    FROM   DUAL;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31160",SQLMSG,c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  fn_userlog(c_ServiceName,"Before calling fn_upd_alloc_dtls -- C");

  i_returncode = fn_upd_alloc_dtls (  c_ServiceName,
                                      c_err_msg,
                                      c_cln_mtch_accnt,
                                      c_bnk_accnt,
                                      c_tag,
                                      0,
                                      d_amt * (-1.0));
  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31165",LIBMSG,c_err_msg);
   /** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); ***/
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  fn_userlog(c_ServiceName,"After calling fn_upd_alloc_dtls -- C");

  i_returncode = fn_pass_cls_entry_w (  c_ServiceName,
                                      c_err_msg,
                                      c_cln_mtch_accnt,
                                      c_xchng_cd,
                                      c_trd_dt,
                                      c_tag,
                                      c_dr_cr_flg,
                                      d_amt,
                                      c_reference);

  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31170",LIBMSG,c_err_msg);
   /** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); ***/
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  fn_userlog(c_ServiceName,"After calling fn_pass_cls_entry -- C");
  return ( 0 );
}

int fn_do_db_on_clr_bal_w ( char *c_ServiceName,
                          char *c_err_msg,
                          char *c_cln_mtch_accnt,
                          char *c_xchng_cd,
                          char *c_trd_dt,
                          char *c_bnk_accnt,
                          char *c_tag,
                          double d_amt,
													char c_dr_cr_flg)
{

  char c_msg [ 256 ];
  int i_trnsctn;
  int i_returncode;
  EXEC SQL BEGIN DECLARE SECTION;
    char    c_reference[16];
  EXEC SQL END DECLARE SECTION;

  fn_userlog(c_ServiceName,"Inside fn_do_db_on_clr_bal -- C");

  EXEC SQL
    SELECT to_char(sysdate,'DDMONYYYY')||LPAD(piposeq.nextval,6,0)
    INTO : c_reference
    FROM   DUAL;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31175",SQLMSG,c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }
  fn_userlog(c_ServiceName,"Inside do_db_on_clr_bal before calling fn_pass_cls_entry");

  i_returncode = fn_pass_cls_entry_w (  c_ServiceName,
                                      c_err_msg,
                                      c_cln_mtch_accnt,
                                      c_xchng_cd,
                                      c_trd_dt,
                                      c_tag,
                                      c_dr_cr_flg,
                                      d_amt,
                                      c_reference);

  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31180",LIBMSG,c_err_msg);
   /***  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); ***/
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  fn_userlog(c_ServiceName,"After fn_pass_cls_entry -- D");
  return ( 0 );
}

int fn_do_bft_w ( char *c_ServiceName,
                char *c_err_msg,
                char *c_cln_mtch_accnt,
                char *c_bnk_accnt,
                char *c_tag,
               double d_amt)
{
  char c_msg [ 256 ];
  int i_trnsctn;
  int i_returncode;


  fn_userlog(c_ServiceName,"Inside fn_do_bft ----");
  fn_userlog(c_ServiceName,"Before Calling fn_upd_alloc_dtls ----A");

  i_returncode = fn_upd_alloc_dtls (  c_ServiceName,
                                      c_err_msg,
                                      c_cln_mtch_accnt,
                                      c_bnk_accnt,
                                      c_tag,
                                      d_amt,
                                      0 );
  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "L31170",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return ( -1 );
  }

  fn_userlog(c_ServiceName,"After Calling fn_upd_alloc_dtls ----A");
  return ( 0 );
}
