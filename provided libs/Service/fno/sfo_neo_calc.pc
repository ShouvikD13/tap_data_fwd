/***************************************************************************
 Service Name      : SFO_NEO_CALC

 Description       : This service calculates the Neo Brokerage for Intraday Equity,FNO and Option

 Input Parameters  :
                      FML_STR_TRD_QTY
                      FML_STR_TRD_PRC
                      FML_STR_BUY_SELL
                      FML_XCHNG_CD
                      FML_ARD_PRDCT_TYP_RQSTD

 Output Parameter  :  FML_CAPITAL_VAL
                      FML_STR_BRK 
                      FML_MMD_NM
                      FML_MDC_ISMARGIN
                      FML_BARRA_VAL
                      FML_STR_BRK_TYP
                      FML_STATLIN
                      FML_MDC_AMOUNT
                      FML_DELSQR_OFF
                      FML_MRGN_PRCNTG
                      FML_UWL_WTCH_NM
                      FML_ARD_ARN_NMBR
 Description       :  This service calculate Neo Brokerage charges based on Buy price,Sell Price and qty.
                      
 Author            : Sanjeet Pawar
 Ver               : 1.0 Initial Release  
***************************************************************************************************
	Version	  	DATE        NAME 	        	Description
	ver 1.1   18-Apr-2023  Viraj Yadav 			Spira-IN-1697 charge in the NEO Brokerage Calculator 

****************************************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <fml_def.h>
#include <fo.h>
#include <eba_to_ors.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <sqlca.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_session.h>
#include <fn_pos.h>
#include <fn_ddr.h>
#include <fn_read_debug_lvl.h>
#include <fn_span_lib.h>
#include <fml_rout.h>
#include <fn_val_ord.h>
#include <math.h>


void SFO_NEO_CALC( TPSVCINFO *rqst )
{
  FBFR32  *ptr_fml_Ibuf;     /* Pointer to FML input buffer   */
  FBFR32  *ptr_fml_Obuf;     /* Pointer to FML output buffer   */

  int i_err[20];
  int i_ferr[20];
  char c_ServiceName[33];
  varchar c_errmsg[256];
  char token[] = "^";

  int i,j,count = 1;
  int i_fml_count;
  char c_product_type[10]={"\0"};
  char c_exchange_type[15]={"\0"};

  char c_qty[3][5]={"\0"};
  char c_buy_price[3][5]={"\0"};
  char c_sell_price[3][5]={"\0"};
  char c_xchng_code[3][5]={"\0"};   //Exchange Code
  char c_prod_type[3][5]={"\0"};

  char c_temp_qty[100]={"\0"};
  char c_temp_buy_price[100]={"\0"};
  char c_temp_sell_price[100]={"\0"};
  char c_temp_xchng_code[100]={"\0"};   //Stock Code
  char c_temp_product_type[100]={"\0"};

  char c_turnover[100] = {"\0"};
  char c_brokerage[100] = {"\0"};
  char c_exchng_trsctn_chrgs[100] = {"\0"}; //Exchange Transaction Charges
  char c_sebi_chrgs[100] = {"\0"};
  char c_stamp_duty[100] = {"\0"};
  char c_stt[100] = {"\0"};
  char c_gst[100] = {"\0"};
  char c_ttl_tax_n_chrgs[100] = {"\0"}; //Total Tax and Charges
  char c_pts_to_brkvn[100] = {"\0"};    //points to breakeven
  char c_net_pnl[100] = {"\0"};     //Net P&L

  char c_temp_turnover[100] = {"\0"};
  char c_temp_brokerage[100] = {"\0"};
  char c_temp_exchng_trsctn_chrgs[100] = {"\0"};
  char c_temp_sebi_chrgs[100] = {"\0"};
  char c_temp_stamp_duty[100] = {"\0"};
  char c_temp_stt[100]= {"\0"};
  char c_temp_gst[100] = {"\0"};
  char c_temp_ttl_tax_n_chrgs[100] = {"\0"};
  char c_temp_pts_to_brkvn[100] = {"\0"};
  char c_temp_net_pnl[100] = {"\0"};

  double d_gst_buy_total=0.0;
  double d_gst_sell_total=0.0;  
  double d_EXCH_TXN_CHRG_BUY=0.0;
  double d_EXCH_TXN_CHRG_SELL=0.0;

  double d_turnover=0.0;
  double d_buy_turnover=0.0;
  double d_sell_turnover=0.0;
  double d_brokerage=0.0;
  double d_exchng_trsctn_chrgs=0.0; //Exchange Transaction Charges
  double d_sebi_chrgs=0.0;
  double d_stamp_duty=0.0;
  double d_stt=0.0;
  double d_gst=0.0;
  double d_ttl_tax_n_chrgs=0.0; //Total Tax and Charges
  double d_pts_to_brkvn=0.0;  //points to breakeven
  double d_net_pnl=0.0;     //Net P&L

//For table transaction
  double d_BUY_BRKG_PER_ORDR=0.0;
  double d_SELL_BRKG_PER_ORDR=0.0;
  double d_STT_BUY_PER=0.0;
  double d_STT_SELL_PER=0.0;
  double d_EXCH_CHRG_PER_BUY=0.0;
  double d_EXCH_CHRG_PER_SELL=0.0;
  double d_CLEAR_CHRG_BUY=0.0;
  double d_CLEAR_CHRG_SELL=0.0;
  double d_GST_BUY=0.0;
  double d_GST_SELL=0.0;
  double d_SEBI_CHRG_BUY=0.0;
  double d_SEBI_CHRG_SELL=0.0;
  double d_STMP_DUTY_BUY=0.0;
  double d_STMP_DUTY_SELL=0.0;
  if(DEBUG_MSG_LVL_3)
  {
  fn_userlog(c_ServiceName,"Service SFO_NEO_CALC started.........");
  }
  MEMSET(c_temp_qty);
  MEMSET(c_temp_buy_price);
  MEMSET(c_temp_sell_price);
  MEMSET(c_temp_xchng_code);
  MEMSET(c_temp_product_type);

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
  INITDBGLVL(c_ServiceName);
  i_err[0]   = Fget32( ptr_fml_Ibuf,FML_STR_TRD_QTY, 0,(char *)c_temp_qty, 0 );
  i_ferr [0] = Ferror32;
  i_err[1]   = Fget32( ptr_fml_Ibuf,FML_STR_TRD_PRC, 0,(char *)c_temp_buy_price, 0 );
  i_ferr [1] = Ferror32;
  i_err[2]   = Fget32( ptr_fml_Ibuf,FML_STR_BUY_SELL , 0, (char *)c_temp_sell_price, 0 );
  i_ferr [2] = Ferror32;
  i_err[3]   = Fget32(ptr_fml_Ibuf,FML_XCHNG_CD,0,(char *)c_temp_xchng_code,0);
  i_ferr [3] = Ferror32;
  i_err[4]   = Fget32(ptr_fml_Ibuf,FML_ARD_PRDCT_TYP_RQSTD,0,(char *)c_temp_product_type,0);
  i_ferr [4] = Ferror32;

 for(i=0;i<5;i++)
  {
    if(i_err[i] == -1 )
    {
      fn_userlog( c_ServiceName, " Error in field no %d", i);
      errlog(c_ServiceName, "S31005", Fstrerror32(i_ferr[i]),(char *)DEF_USR,DEF_SSSN, c_err_msg);
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
    }
  }
  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN * 4 );

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31010", TPMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0 );
  }
  i_err[0]= Fadd32(ptr_fml_Obuf, FML_STR_TRD_QTY,(char *) c_temp_qty, 0);
  i_err[1]= Fadd32(ptr_fml_Obuf,  FML_STR_TRD_PRC,( char * )c_temp_buy_price, 0);
  i_err[2]= Fadd32(ptr_fml_Obuf, FML_STR_BUY_SELL,(char *) c_temp_sell_price, 0);
  i_err[3]= Fadd32(ptr_fml_Obuf, FML_ARD_PRDCT_TYP_RQSTD,(char *)c_temp_product_type, 0);
  i_err[4]= Fadd32(ptr_fml_Obuf, FML_XCHNG_CD,(char *)c_temp_xchng_code,0);
  if(DEBUG_MSG_LVL_0)
  {
  fn_userlog(c_ServiceName,"Neo Brkg Qty  :%s:",c_temp_qty);
  fn_userlog(c_ServiceName,"Neo Brkg BuY amt  :%s:",c_temp_buy_price);
  fn_userlog(c_ServiceName,"Neo Brkg Sell amt :%s:",c_temp_sell_price);
  fn_userlog(c_ServiceName,"Product type :%s:",c_temp_product_type);
  fn_userlog(c_ServiceName,"Exchange Code:%s:",c_temp_xchng_code);
  }
  j = 0;
  while(c_temp_product_type[j] != '\0')
  {
    if(c_temp_product_type[j] == '^')
      count++;
    j++;
  }

  if(count == 1)		//If there's only 1 type of product in input
  {
    strcpy(c_qty[0],c_temp_qty);
    strcpy(c_buy_price[0],c_temp_buy_price);
    strcpy(c_sell_price[0],c_temp_sell_price);
    strcpy(c_xchng_code[0],c_temp_xchng_code);
    strcpy(c_prod_type[0],c_temp_product_type);
  }
  else				//If all EQ,DF,DO etc in input
  {
    j=0;
    //c_qty[j] = strtok(c_temp_qty,token);
    strcpy(c_qty[j],strtok(c_temp_qty,token));
    while(j < count)
    {
      //fn_userlog(c_ServiceName,"Quantity %d = %s:",j,c_qty[j]);
      j++;
      strcpy(c_qty[j],strtok(NULL,token));
      //c_qty[j] = strtok(NULL,token);
    }

    j=0;
    //c_buy_price[j] = strtok(c_temp_buy_price,token);
    strcpy(c_buy_price[j],strtok(c_temp_buy_price,token));
    while(j < count)
    {
      //fn_userlog(c_ServiceName,"Buy Price %d = %s:",j,c_buy_price[j]);
      j++;
      strcpy(c_buy_price[j],strtok(NULL,token));
      //c_buy_price[j] = strtok(NULL,token);
    }

    j=0;
    //c_sell_price[j] = strtok(c_temp_sell_price,token);
    strcpy(c_sell_price[j],strtok(c_temp_sell_price,token));
    while(j < count)
    {
      //fn_userlog(c_ServiceName,"Sell Price %d = %s:",j,c_sell_price[j]);
      j++;
      strcpy(c_sell_price[j],strtok(NULL,token));
      //c_sell_price[j] = strtok(NULL,token);
    }

    j=0;
    //c_xchng_code[j] = strtok(c_temp_xchng_code,token);
    strcpy(c_xchng_code[j],strtok(c_temp_xchng_code,token));
    while(j < count)
    {
      //fn_userlog(c_ServiceName,"Exchange code %d = %s:",j,c_xchng_code[j]);
      j++;
      strcpy(c_xchng_code[j],strtok(NULL,token));
     //c_xchng_code[j] = strtok(NULL,token);
    }

    j=0;
    //c_prod_type[j] = strtok(c_temp_product_type,token);
    strcpy(c_prod_type[j],strtok(c_temp_product_type,token));
    while(j < count)
    {
      //fn_userlog(c_ServiceName,"Product type %d = %s:",j,c_prod_type[j]);
      j++;
      strcpy(c_prod_type[j],strtok(NULL,token));
      //c_prod_type[j] = strtok(NULL,token);
    }
  }

  j = 0;
  do
  {
    MEMSET(c_product_type);
    MEMSET(c_exchange_type);
    strcpy(c_exchange_type,c_xchng_code[0]);
    strcpy(c_product_type,c_prod_type[j]);
    d_BUY_BRKG_PER_ORDR=0.0;
    d_SELL_BRKG_PER_ORDR=0.0;
    d_STT_BUY_PER=0.0;
    d_STT_SELL_PER=0.0;
    d_EXCH_CHRG_PER_BUY=0.0;
    d_EXCH_CHRG_PER_SELL=0.0;
    d_CLEAR_CHRG_BUY=0.0;
    d_CLEAR_CHRG_SELL=0.0;
    d_GST_BUY=0.0;
    d_GST_SELL=0.0;
    d_SEBI_CHRG_BUY=0.0;
    d_SEBI_CHRG_SELL=0.0;
    d_STMP_DUTY_BUY=0.0;
    d_STMP_DUTY_SELL=0.0;
  
  if(DEBUG_MSG_LVL_3)
  { 
   fn_userlog(c_ServiceName,"Fetching value from neo table for Product-%s ",c_product_type);
   fn_userlog(c_ServiceName,"Fetching value from neo table for exchange code-%s",c_exchange_type);
  } 
   EXEC SQL
    SELECT
      Buy_Brokerage_per_order,
      Sell_Brokerage_per_order,
      STT_buy_per,
      STT_Sell_per,
      exch_chrg_per_buy,
      exch_chrg_per_sell,
      Clear_chrg_buy,
      Clear_chrg_sell,
      GST_Buy,
      GST_Sell,
      Sebi_chrg_buy,
      Sebi_chrg_sell,
      stmp_duty_buy,
      stmp_duty_sell
    into
      :d_BUY_BRKG_PER_ORDR,
      :d_SELL_BRKG_PER_ORDR,
      :d_STT_BUY_PER,
      :d_STT_SELL_PER,
      :d_EXCH_CHRG_PER_BUY,
      :d_EXCH_CHRG_PER_SELL,
      :d_CLEAR_CHRG_BUY,
      :d_CLEAR_CHRG_SELL,
      :d_GST_BUY,
      :d_GST_SELL,
      :d_SEBI_CHRG_BUY,
      :d_SEBI_CHRG_SELL,
      :d_STMP_DUTY_BUY,
      :d_STMP_DUTY_SELL
     from
     NEO_INTRADAY_BRKG_CALC
     where
     NEO_EXG_XCHNG_CD = :c_exchange_type
     and Product_typ = :c_product_type;
    
     if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND  )
      {
      fn_errlog ( c_ServiceName, "S31015", SQLMSG, c_err_msg );
      fn_userlog(c_ServiceName,"No data found for product :%s:",c_product_type);
			/*	return; Commented in Ver 1.1 */
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );  /* added in  Ver 1.1 */
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0); /* added in Ver 1.1 */
      }
    if(DEBUG_MSG_LVL_3)
   {
     fn_userlog(c_ServiceName,"%s Neo Brkg buy order   :%lf:",c_product_type,d_BUY_BRKG_PER_ORDR);
     fn_userlog(c_ServiceName,"%s Neo Brkg sell order   :%lf:",c_product_type,d_SELL_BRKG_PER_ORDR);
     fn_userlog(c_ServiceName,"%s Neo STT buy per   :%lf:",c_product_type,d_STT_BUY_PER);
     fn_userlog(c_ServiceName,"%s Neo STT sell per    :%lf:",c_product_type,d_STT_SELL_PER);
     fn_userlog(c_ServiceName,"%s Neo Exchange Buy per    :%lf:",c_product_type,d_EXCH_CHRG_PER_BUY);
     fn_userlog(c_ServiceName,"%s Neo Exchange Sell per   :%lf:",c_product_type,d_EXCH_CHRG_PER_SELL);
     fn_userlog(c_ServiceName,"%s Neo Brkg Clear charges Buy    :%lf:",c_product_type,d_CLEAR_CHRG_BUY);
     fn_userlog(c_ServiceName,"%s Neo Brkg Clear charges Sell   :%lf:",c_product_type,d_CLEAR_CHRG_SELL);
     fn_userlog(c_ServiceName,"%s Neo Brkg  GST bUY per  :%lf:",c_product_type,d_GST_BUY);
     fn_userlog(c_ServiceName,"%s Neo Brkg  GST sell per  :%lf:",c_product_type,d_GST_SELL);
     fn_userlog(c_ServiceName,"%s Neo Brkg  Sebi charges buy per :%lf:",c_product_type,d_SEBI_CHRG_BUY);
     fn_userlog(c_ServiceName,"%s Neo Brkg  Sebi Charges Sell per :%lf:",c_product_type,d_SEBI_CHRG_SELL);
     fn_userlog(c_ServiceName,"%s Neo Brkg  Stamp Duty Buy per :%lf:",c_product_type,d_STMP_DUTY_BUY);
     fn_userlog(c_ServiceName,"%s Neo Brkg  Stamp Duty Sell per :%lf:",c_product_type,d_STMP_DUTY_SELL);
   }
     
    d_turnover=0.0;
    d_brokerage=0.0;
    d_EXCH_TXN_CHRG_BUY=0.0;
    d_EXCH_TXN_CHRG_SELL=0.0;
    d_exchng_trsctn_chrgs=0.0;
    d_sebi_chrgs=0.0;
    d_stamp_duty=0.0;
    d_stt=0.0;
    d_gst=0.0;
    d_ttl_tax_n_chrgs=0.0;
    d_pts_to_brkvn=0.0;
    d_net_pnl=0.0;
    if(DEBUG_MSG_LVL_5)
    { 
    fn_userlog(c_ServiceName,"%s Calculation starts ",c_product_type);
    }    
    if(strcmp(c_product_type,"EQ") == 0 || strcmp(c_product_type,"DF") == 0 || strcmp(c_product_type,"DO") == 0)
    {
      d_buy_turnover = atof(c_buy_price[j]) * atof(c_qty[j]);
      d_sell_turnover = atof(c_sell_price[j]) * atof(c_qty[j]);

      d_turnover = d_buy_turnover + d_sell_turnover;	//	Turnover = (Buy Price + Sell Price) * quantity
    if(DEBUG_MSG_LVL_5)
    {  
      fn_userlog(c_ServiceName,"%s Buy Turnover-%lf ",c_product_type,d_buy_turnover);
      fn_userlog(c_ServiceName,"%s SELL Turnover-%lf ",c_product_type,d_sell_turnover);
      fn_userlog(c_ServiceName,"%s Total Turnover-%lf ",c_product_type,d_turnover); 
    }  
   if(strcmp(c_product_type,"EQ") == 0 && d_turnover < 40000)
	    {
      d_BUY_BRKG_PER_ORDR  = 0.05 / 100 * d_buy_turnover;
      d_SELL_BRKG_PER_ORDR = 0.05 / 100 * d_sell_turnover;
      d_brokerage = d_BUY_BRKG_PER_ORDR + d_SELL_BRKG_PER_ORDR;
      }
      else
     {
      d_brokerage = d_BUY_BRKG_PER_ORDR + d_SELL_BRKG_PER_ORDR;
     }
      d_EXCH_TXN_CHRG_BUY = (d_EXCH_CHRG_PER_BUY / 100 * d_buy_turnover);
      d_EXCH_TXN_CHRG_SELL = (d_EXCH_CHRG_PER_SELL / 100 * d_sell_turnover);

      d_exchng_trsctn_chrgs = d_EXCH_TXN_CHRG_BUY + d_EXCH_TXN_CHRG_SELL;

      d_sebi_chrgs = (d_SEBI_CHRG_BUY / 100 * d_buy_turnover) + (d_SEBI_CHRG_SELL / 100 * d_sell_turnover);
      d_stamp_duty = (d_STMP_DUTY_BUY / 100 * d_buy_turnover) + (d_STMP_DUTY_SELL / 100 * d_sell_turnover);
      d_stt = (d_STT_BUY_PER / 100 * d_buy_turnover) + (d_STT_SELL_PER / 100 * d_sell_turnover);
    
      if(strcmp(c_product_type,"EQ") == 0)
      {
        d_gst_buy_total = (d_GST_BUY / 100 * (d_BUY_BRKG_PER_ORDR + d_EXCH_TXN_CHRG_BUY + (d_SEBI_CHRG_BUY / 100 * d_buy_turnover))); 
        d_gst_sell_total = (d_GST_SELL / 100 * (d_SELL_BRKG_PER_ORDR + d_EXCH_TXN_CHRG_SELL + (d_SEBI_CHRG_SELL / 100 * d_sell_turnover)));  
      }
      else if(strcmp(c_product_type,"DF") == 0)
      {
        d_gst_buy_total = (d_GST_BUY / 100 * (d_BUY_BRKG_PER_ORDR + d_EXCH_TXN_CHRG_BUY + (d_SEBI_CHRG_BUY / 100 * d_buy_turnover)));
        d_gst_sell_total =  (d_GST_SELL / 100 * (d_SELL_BRKG_PER_ORDR + d_EXCH_TXN_CHRG_SELL + (d_SEBI_CHRG_SELL / 100 * d_sell_turnover)));
      }
      else if(strcmp(c_product_type,"DO") == 0)
      {
        d_gst_buy_total = (d_GST_BUY / 100 * (d_BUY_BRKG_PER_ORDR + d_EXCH_TXN_CHRG_BUY + (d_SEBI_CHRG_BUY / 100 * d_buy_turnover)));
        d_gst_sell_total =  (d_GST_SELL / 100 * (d_SELL_BRKG_PER_ORDR + d_EXCH_TXN_CHRG_SELL + (d_SEBI_CHRG_SELL / 100 * d_sell_turnover)));
      }
     	
      //	18% of (Sebi Tax + brokerage + transaction charges)
      d_gst = d_gst_buy_total + d_gst_sell_total;

      //	Total Tax and charges = Brokerage + STT+ Exchange txn charge + GST + SEBI charges + Stamp duty + Total tax and duty charges)
      d_ttl_tax_n_chrgs = d_brokerage + d_stt + d_exchng_trsctn_chrgs + d_gst + d_sebi_chrgs + d_stamp_duty;
    
      //	Points to be break even = Total Tax and charges/ quantity
      d_pts_to_brkvn = d_ttl_tax_n_chrgs / atof(c_qty[j]);
    
      d_net_pnl = d_sell_turnover - d_buy_turnover - d_ttl_tax_n_chrgs;
    }

    if(DEBUG_MSG_LVL_5)
    {
    fn_userlog(c_ServiceName,"%s Neo Brkg Turnover   :%lf:",c_product_type,d_turnover);
    fn_userlog(c_ServiceName,"%s Neo Brokerage  :%lf:",c_product_type,d_brokerage);
    fn_userlog(c_ServiceName,"%s Exchange trncs charges Buy  :%lf:",c_product_type,d_EXCH_TXN_CHRG_BUY);
    fn_userlog(c_ServiceName,"%s Exchange trncs charges Sell  :%lf:",c_product_type,d_EXCH_TXN_CHRG_SELL);
    fn_userlog(c_ServiceName,"%s Total Exchange Charges  :%lf:",c_product_type,d_exchng_trsctn_chrgs);
    fn_userlog(c_ServiceName,"%s Sebi charges  :%lf:",c_product_type,d_sebi_chrgs);
    fn_userlog(c_ServiceName,"%s Stamp Duty  :%lf:",c_product_type,d_stamp_duty);
    fn_userlog(c_ServiceName,"%s STT charges  :%lf:",c_product_type,d_stt);
    fn_userlog(c_ServiceName,"%s GST charges  :%lf:",c_product_type,d_gst);
    fn_userlog(c_ServiceName,"%s Total tax and charges  :%lf:",c_product_type,d_ttl_tax_n_chrgs);
    fn_userlog(c_ServiceName,"%s Point to Breakeven   :%lf:",c_product_type,d_pts_to_brkvn);
    fn_userlog(c_ServiceName,"%s Net Profit Loss  :%lf:",c_product_type,d_net_pnl);
    }


    MEMSET(c_temp_turnover);
    MEMSET(c_temp_brokerage);
    MEMSET(c_temp_exchng_trsctn_chrgs);
    MEMSET(c_temp_sebi_chrgs);
    MEMSET(c_temp_stamp_duty);
    MEMSET(c_temp_stt);
    MEMSET(c_temp_gst);
    MEMSET(c_temp_ttl_tax_n_chrgs);
    MEMSET(c_temp_pts_to_brkvn);
    MEMSET(c_temp_net_pnl);

    sprintf(c_temp_turnover,"%0.2f",d_turnover);
    sprintf(c_temp_brokerage,"%0.2f",d_brokerage);
    sprintf(c_temp_exchng_trsctn_chrgs,"%0.2f",d_exchng_trsctn_chrgs);
    sprintf(c_temp_sebi_chrgs,"%0.2f",d_sebi_chrgs);
    sprintf(c_temp_stamp_duty,"%0.2f",d_stamp_duty);
    sprintf(c_temp_stt,"%0.2f",d_stt);
    sprintf(c_temp_gst,"%0.2f",d_gst);
    sprintf(c_temp_ttl_tax_n_chrgs,"%0.2f",d_ttl_tax_n_chrgs);
    sprintf(c_temp_pts_to_brkvn,"%0.2f",d_pts_to_brkvn);
    sprintf(c_temp_net_pnl,"%0.2f",d_net_pnl);

    strcat(c_turnover,c_temp_turnover);
    strcat(c_brokerage,c_temp_brokerage);
    strcat(c_exchng_trsctn_chrgs,c_temp_exchng_trsctn_chrgs);
    strcat(c_sebi_chrgs,c_temp_sebi_chrgs);
    strcat(c_stamp_duty,c_temp_stamp_duty);
    strcat(c_stt,c_temp_stt);
    strcat(c_gst,c_temp_gst);
    strcat(c_ttl_tax_n_chrgs,c_temp_ttl_tax_n_chrgs);
    strcat(c_pts_to_brkvn,c_temp_pts_to_brkvn);
    strcat(c_net_pnl,c_temp_net_pnl);

    if(j < (count - 1))
    {
      strcat(c_turnover,"^");
      strcat(c_brokerage,"^");
      strcat(c_exchng_trsctn_chrgs,"^");
      strcat(c_sebi_chrgs,"^");
      strcat(c_stamp_duty,"^");
      strcat(c_stt,"^");
      strcat(c_gst,"^");
      strcat(c_ttl_tax_n_chrgs,"^");
      strcat(c_pts_to_brkvn,"^");
      strcat(c_net_pnl,"^");
    }

    j++;

  }while(j<count);
  
  if(DEBUG_MSG_LVL_3)
  {
  fn_userlog(c_ServiceName,"Neo Brkg Turnover  :%s:",c_turnover);
  fn_userlog(c_ServiceName,"Neo Brokerage  :%s:",c_brokerage);
  fn_userlog(c_ServiceName,"Total Exchange Charges  :%s:",c_exchng_trsctn_chrgs);
  fn_userlog(c_ServiceName,"Sebi charges  :%s:",c_sebi_chrgs);
  fn_userlog(c_ServiceName,"Stamp Duty  :%s:",c_stamp_duty);
  fn_userlog(c_ServiceName,"STT charges  :%s:",c_stt);
  fn_userlog(c_ServiceName,"GST charges  :%s:",c_gst);
  fn_userlog(c_ServiceName,"Total tax and charges  :%s:",c_ttl_tax_n_chrgs);
  fn_userlog(c_ServiceName,"Point to Breakeven   :%s:",c_pts_to_brkvn);
  fn_userlog(c_ServiceName,"Net Profit Loss  :%s:",c_net_pnl);
  } 
  i_err[4]= Fadd32(ptr_fml_Obuf, FML_CAPITAL_VAL,(char *) c_turnover, 0);
  i_err[5]= Fadd32(ptr_fml_Obuf, FML_STR_BRK,(char *)c_brokerage, 0);
  i_err[6]= Fadd32(ptr_fml_Obuf, FML_MMD_NM,(char *)c_exchng_trsctn_chrgs, 0);
  i_err[7]= Fadd32(ptr_fml_Obuf, FML_MDC_ISMARGIN,(char *)c_sebi_chrgs, 0);
  i_err[8]= Fadd32(ptr_fml_Obuf, FML_BARRA_VAL,(char *)c_stamp_duty, 0);
  i_err[9]= Fadd32(ptr_fml_Obuf, FML_STR_BRK_TYP,(char *)c_stt, 0);
  i_err[10]= Fadd32(ptr_fml_Obuf, FML_STATLIN,(char *)c_gst, 0);
  i_err[11]= Fadd32(ptr_fml_Obuf, FML_MDC_AMOUNT,(char *) c_ttl_tax_n_chrgs, 0);
  i_err[12]= Fadd32(ptr_fml_Obuf, FML_DELSQR_OFF, (char *) c_pts_to_brkvn, 0);
  i_err[13]= Fadd32(ptr_fml_Obuf, FML_MRGN_PRCNTG, (char *)c_net_pnl, 0);
  //i_err[14]= Fadd32(ptr_fml_Obuf, FML_UWL_WTCH_NM, (char *)c_per_lot_expense, 0);
  //i_err[15]= Fadd32(ptr_fml_Obuf, FML_ARD_ARN_NMBR, (char *)c_tics_to_brkvn, 0);

  for(i_fml_count=0; i_fml_count < 14; i_fml_count++)
    {
     if(i_err[i_fml_count] == -1)
     {
      fn_userlog(c_ServiceName,"value of i_fml_count is :%d:",i_fml_count);
      fn_errlog( c_ServiceName , "S31020", FMLMSG, c_errmsg.arr);
      Fadd32(ptr_fml_Ibuf,FML_ERR_MSG,(char*)c_errmsg.arr,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
    }
  if(DEBUG_MSG_LVL_3)
  {
  fn_userlog(c_ServiceName,"completed successfully");
  }
  tpreturn(TPSUCCESS, SUCC_BFR, (char *)ptr_fml_Obuf, 0, 0 );

}
