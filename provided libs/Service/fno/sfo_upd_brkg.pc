/******************************************************************************/
/*  Program           : SFO_UPD_BROK                                          */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                      FFO_TRD_DT                                            */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_ACK_NMBR                                          */
/*                      FFO_BRKRG_VL                                          */
/*                      FFO_AMOUNT                                            */
/*                      FFO_ROUT_CRT                                          */
/*                      FFO_BAT_TAG                                           */
/*                      FFO_REC_NO                                            */
/*                                                                            */
/*  Output            :                                                       */
/*                                                                            */
/*  Description       : This service updates the brokerage details for a      */
/*                      match account trade date wise.                        */
/*                                                                            */
/*  Log               : 1.0   11-Apr-2002  Vinod Banjan                       */
/*	Log								:	1.1		17-Oct-2006	 Abhishek | Infotech								*/
/*										:	1.2		19-Dec-2007	 Sushil															*/
/*										:	1.3		18-Nov-2014	 Sachin Birje      									*/
/*                    : 1.4   29-Jan-2016  Bhupendra Malik										*/
/*                    : 1.5   16-Dec-2021  Sachin Birje   										*/
/*                    : 1.6   07-Mar-2023  Sachin Birje   										*/
/*                                                                            */
/******************************************************************************/
/*  1.0    -  New Release                                                     */
/*	1.1		 -  TDS for NRIs on Brokerage																				*/
/*	1.2		 -	AIX Migration																										*/
/*	1.3		 -	View to FML Changes       																			*/
/*	1.4		 -  Migration of RI to NRI																					*/ 
/*	1.5		 -  CR-ISEC14-162094_NRI_TDS_UNSETTLED_PROF													*/ 
/*	1.6		 -  Minor Change: Client Lock Changes              									*/ 
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fo.h>
/** #include <fo_view_def.h> ** Ver 1.3 **/
#include <fo_view_def.h>   /** Ver 1.3 **/
#include <fml_rout.h>        /** Ver 1.3 */
#include <fo_fml_def.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_pos.h>
#include <fn_session.h>         /*  Ver 1.2 : Added 	*/
#include <fn_read_debug_lvl.h>  /*  Ver 1.2 : Added   */

void SFO_UPD_BRKG( TPSVCINFO *rqst )
{

	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Sbuf;   /** Ver 1.3 **/
  FBFR32 *ptr_fml_Rbuf;   /** Ver 1.3 **/

	char 		c_ServiceName[33];
  char 		c_err_msg [256];
  char 		c_msg[256];
  char 		c_tag[256];
	int 		i_returncode;
	int 		i_ip_len;
	int  		i_record_exists;
	int  		i_trnsctn;
  int i;              /* Ver 1.3 */
  int i_err[10];      /* Ver 1.3 */
  int i_ferr[10];     /* Ver 1.3 */
  long l_recvbuf=0;   /* Ver 1.3 */

	long 		l_amount;
	double 	d_amount;
	char c_narration_id [ 4 ];			/* Ver 1.1	**/
	char c_reason_cd [ 25 ];				/* Ver 1.1	**/
	double d_balance_amt = 0;					/* Ver 1.1	**/		/*	Ver 1.2 : Data type changed from long to double	*/
	struct vw_pstn_actn ptr_st_pstn_actn;	/* Ver 1.1	**/


	EXEC SQL BEGIN DECLARE SECTION;
		struct vw_upd_limits st_upd_limits;
  	struct vw_err_msg *ptr_st_err_msg;
		char 		c_eba_ordr_nmbr[21];
		char 		c_ordr_rfrnc[21];
		long 		l_brokerage;
	EXEC SQL END DECLARE SECTION;
	EXEC SQL INCLUDE "table/iai_info_account_info.h"; /*** Added in Ver 1.4 ***/

	ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
	strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.2 : Added   */

  memset( &st_upd_limits, 0, sizeof( struct vw_upd_limits ) );
  /******* Commented in Ver 1.3 Starts here *****
	i_returncode = Fvftos32( ptr_fml_Ibuf,
													 ( char * )&st_upd_limits,
                           "vw_upd_limits" );
  *********** Ver 1.3 Ends Here *****************/
  /***** Ver 1.3 Starts Here *****/
  i_returncode = fn_unpack_fmltovar_dflt ( c_ServiceName,
                                      c_err_msg,
                                      ptr_fml_Ibuf,
                                      10,
                                      FFO_XCHNG_CD,(char *)st_upd_limits.c_xchng_cd, "NULL",
                                      FFO_EBA_MTCH_ACT_NO,(char *)st_upd_limits.c_cln_mtch_accnt, "NULL",
                                      FFO_TRD_DT,(char *)st_upd_limits.c_trd_dt, "NULL",
                                      FFO_NARRATION_ID,(char *)st_upd_limits.c_narration_id, "**",
                                      FFO_REMARKS,(char *)st_upd_limits.c_remarks, "-",
                                      FFO_DR_CR_FLG,(char *)&st_upd_limits.c_dr_cr_flg, "-",
                                      FFO_AMOUNT,(char *)&st_upd_limits.d_amount, "0",
                                      FFO_BAL_AMT,(char *)&st_upd_limits.d_bal_amt, "0",
                                      FFO_DWL_FLG,(char *)&st_upd_limits.c_dr_without_lmt_flg, "-",
                                      FFO_ROUT_CRT,(char *)st_upd_limits.c_rout_crt, "***"
                                      );
  /*** Ver 1.3 Ends Here ****/ 
	if( i_returncode == SYSTEM_ERROR )
	{
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );		
	}

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_upd_limits.c_rout_crt );

	i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                      c_err_msg,
                                      ptr_fml_Ibuf,
                                      3,
           									FFO_ACK_NMBR, (char * )c_eba_ordr_nmbr, NULL,
           									FFO_BRKRG_VL, (char * )&l_brokerage, NULL,
           									FFO_BAT_TAG, (char * )c_tag, NULL);
  
	if( i_returncode  == SYSTEM_ERROR )
  {
    fn_errlog( c_ServiceName, "S31010", LIBMSG , c_err_msg );
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    sprintf (c_msg, "Failed in Processing record for Match_id no.:%s:",
																				st_upd_limits.c_cln_mtch_accnt);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }

/*  sprintf (c_msg, "Processing record for Match_id no.:%s:",
																						st_upd_limits.c_cln_mtch_accnt);
  fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );*/
	

if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.2 : Debug level Change  */	
	fn_userlog( c_ServiceName, "c_xchng_cd [%s]",
																			st_upd_limits.c_xchng_cd );
	fn_userlog( c_ServiceName, "c_trd_dt [%s]",
																			st_upd_limits.c_trd_dt );
	fn_userlog( c_ServiceName, "c_cln_mtch_accnt [%s]",
																			st_upd_limits.c_cln_mtch_accnt );
	fn_userlog( c_ServiceName, "c_eba_ordr_nmbr [%s]",
																			c_eba_ordr_nmbr );
	fn_userlog( c_ServiceName, "l_brokerage  [%ld]",
																			l_brokerage );
	fn_userlog( c_ServiceName, "d_amount  [%lf]",
																			st_upd_limits.d_amount );
}

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog( c_ServiceName, "S31015", LIBMSG , c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    sprintf (c_msg, "Failed in Processing record for Match_id no.:%s:",
																				st_upd_limits.c_cln_mtch_accnt);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /** i_returncode = fn_lock_usr( c_ServiceName, st_upd_limits.c_cln_mtch_accnt ); ** Ver 1.6 **/
  i_returncode = fn_lock_fno( c_ServiceName, st_upd_limits.c_cln_mtch_accnt ); /** Ver 1.6 **/
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31020", LIBMSG , c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    sprintf (c_msg, "Failed in Processing record for Match_id no.:%s:",
																				st_upd_limits.c_cln_mtch_accnt);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  i_record_exists = 0;

	EXEC SQL
		SELECT   1  
		INTO  :i_record_exists
		FROM   FBL_FO_BRKG_LOG
		WHERE FBL_XCHNG_CD = :st_upd_limits.c_xchng_cd
		AND FBL_CLM_MTCH_ACCNT = :st_upd_limits.c_cln_mtch_accnt
		AND FBL_TRD_DT = to_date(:st_upd_limits.c_trd_dt,'dd-Mon-yyyy');
				
	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
 	{
    fn_errlog( c_ServiceName, "S31025", SQLMSG , c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    sprintf (c_msg, "Failed in Processing record for Match_id no.:%s:",
																				st_upd_limits.c_cln_mtch_accnt);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}

	if (i_record_exists == 1) 
	{ 

  	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  	{
    	fn_errlog( c_ServiceName, "S31030", LIBMSG , c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	sprintf (c_msg, "Failed in Processing record for Match_id no.:%s:",
																				st_upd_limits.c_cln_mtch_accnt);
    	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

		sprintf (c_msg, "Record already exist for Match_id no.:%s:",
																			st_upd_limits.c_cln_mtch_accnt);
 		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
 		tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Ibuf, 0 , 0 );
	}

	/************************************************************/
	/*  Insert the data into the daily  brokerage log  					*/
	/************************************************************/

	fn_userlog(c_ServiceName,"Before converting to Long d_amount is :%lf:",st_upd_limits.d_amount);
	
	l_amount = (long)st_upd_limits.d_amount * -1 ;

	fn_userlog(c_ServiceName,"After converting d_amount to long l_amount is :%ld:",l_amount);

	EXEC SQL
		INSERT INTO  fbl_fo_brkg_log
		( fbl_clm_mtch_accnt,
			fbl_xchng_cd,
			fbl_trd_dt,
			fbl_total_brkg
		)
		VALUES
		( :st_upd_limits.c_cln_mtch_accnt,
		  :st_upd_limits.c_xchng_cd,
		  :st_upd_limits.c_trd_dt,
		  (:l_amount)
		);
				

	if(SQLCODE != 0 )
	{
    fn_errlog( c_ServiceName, "S31035", SQLMSG , c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    sprintf (c_msg, "Failed in Processing record for Match_id no.:%s:",
																				st_upd_limits.c_cln_mtch_accnt);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	if ( l_amount != 0 )
	{
		st_upd_limits.c_narration_id[0] = '\0';
		strcpy(st_upd_limits.c_narration_id , MATCH_BROKERAGE );
		st_upd_limits.c_dr_cr_flg =  'D';
		st_upd_limits.d_amount  =  (st_upd_limits.d_amount*-1);
		st_upd_limits.c_dr_without_lmt_flg  = 'Y' ;
		st_upd_limits.c_remarks[0] = '\0';
		strcpy(st_upd_limits.c_remarks ,"Brokerage");

		fn_cpy_ddr(st_upd_limits.c_rout_crt);

    /**** Commented in Ver 1.3 *************************
		i_ip_len = sizeof( struct vw_upd_limits );

		i_returncode = fn_call_svc( c_ServiceName,
																c_err_msg,
																&st_upd_limits,
																&st_upd_limits,
																"vw_upd_limits",
																"vw_upd_limits",
																i_ip_len,
																i_ip_len,
																0,
																"SFO_UPD_LIMITS" );

		if( i_returncode != SUCC_BFR )
		{
			fn_errlog( c_ServiceName, "S31040", LIBMSG , c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	sprintf (c_msg, "Failed in Processing record for Match_id no.:%s:",
																				st_upd_limits.c_cln_mtch_accnt);
    	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
    ******** Ver 1.3 Ends Here **************************/

    /******* Ver 1.3 Starts Here ******/
    ptr_fml_Sbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );
    if ( ptr_fml_Sbuf == NULL )
    {
      fn_errlog( c_ServiceName, "S31045", TPMSG , c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      sprintf (c_msg, "Failed in Processing record for Match_id no.:%s:",
                                        st_upd_limits.c_cln_mtch_accnt);
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

    }
  
    ptr_fml_Rbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );
    if ( ptr_fml_Rbuf == NULL )
    {
      fn_errlog( c_ServiceName, "S31050", TPMSG , c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      sprintf (c_msg, "Failed in Processing record for Match_id no.:%s:",
                                        st_upd_limits.c_cln_mtch_accnt);
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      tpfree ((char *)ptr_fml_Sbuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    i_err [0] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CD, (char *)st_upd_limits.c_xchng_cd,0);
    i_ferr[0] = Ferror32;
    i_err [1] = Fadd32(ptr_fml_Sbuf,FFO_EBA_MTCH_ACT_NO, (char *)st_upd_limits.c_cln_mtch_accnt,0);
    i_ferr[1] = Ferror32;
    i_err [2] = Fadd32(ptr_fml_Sbuf,FFO_TRD_DT, (char *)st_upd_limits.c_trd_dt,0);
    i_ferr[2] = Ferror32;
    i_err [3] = Fadd32(ptr_fml_Sbuf,FFO_NARRATION_ID, (char *)st_upd_limits.c_narration_id,0);
    i_ferr[3] = Ferror32;
    i_err [4] = Fadd32(ptr_fml_Sbuf,FFO_REMARKS, (char *)st_upd_limits.c_remarks,0);
    i_ferr[4] = Ferror32;
    i_err [5] = Fadd32(ptr_fml_Sbuf,FFO_DR_CR_FLG, (char *)&st_upd_limits.c_dr_cr_flg,0);
    i_ferr[5] = Ferror32;
    i_err [6] = Fadd32(ptr_fml_Sbuf,FFO_AMOUNT, (char *)&st_upd_limits.d_amount,0);
    i_ferr[6] = Ferror32;
    i_err [7] = Fadd32(ptr_fml_Sbuf,FFO_BAL_AMT, (char *)&st_upd_limits.d_bal_amt,0);
    i_ferr[7] = Ferror32;
    i_err [8] = Fadd32(ptr_fml_Sbuf,FFO_DWL_FLG, (char *)&st_upd_limits.c_dr_without_lmt_flg,0);
    i_ferr[8] = Ferror32;
    i_err [9] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_upd_limits.c_rout_crt,0);
    i_ferr[9] = Ferror32;
    for (i = 0;i < 10 ;i++)
    {
      if(i_err[i] == -1 )
      {
        fn_errlog( c_ServiceName, "S31055", FMLMSG , c_err_msg );
        fn_userlog( c_ServiceName, "Error in :%d:",i );
        fn_errlog( c_ServiceName, "S31060", Fstrerror32( i_ferr[i]),c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        sprintf (c_msg, "Failed in Processing record for Match_id no.:%s:",
                                        st_upd_limits.c_cln_mtch_accnt);
        fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
        tpfree ((char *)ptr_fml_Sbuf);
        tpfree ((char *)ptr_fml_Rbuf);  
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

      }
    }

    /**** Ver 1.5 Starts here ****/
    MEMSET(sql_iai_type);
    EXEC SQL
          SELECT  IAI_TYPE
          INTO    :sql_iai_type
          FROM    IAI_INFO_ACCOUNT_INFO
          WHERE   IAI_MATCH_ACCOUNT_NO  = :st_upd_limits.c_cln_mtch_accnt;
    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31065", SQLMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        sprintf (c_msg, "Failed in Processing record for Match_id no.:%s:",
                                        st_upd_limits.c_cln_mtch_accnt);
        fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
        tpfree ((char *)ptr_fml_Sbuf);
        tpfree ((char *)ptr_fml_Rbuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    SETNULL(sql_iai_type);
    
    /*** Ver 1.5 Ends Here ***/

   if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") != 0)  /** Ver 1.5 NRI UPD LMT exculded here and added in NRI Block below after TDS ***/
   {  
    i_returncode  = tpcall  ( "SFO_UPD_LIMITS",( char * ) ptr_fml_Sbuf,0,( char ** ) &ptr_fml_Rbuf,&l_recvbuf,0);
    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31070", LIBMSG , c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      sprintf (c_msg, "Failed in Processing record for Match_id no.:%s:",
                                        st_upd_limits.c_cln_mtch_accnt);
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      tpfree ((char *)ptr_fml_Sbuf);
      tpfree ((char *)ptr_fml_Rbuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );     
    } 
    tpfree ((char *)ptr_fml_Sbuf);
    tpfree ((char *)ptr_fml_Rbuf);
   }
    /******* Ver 1.3 Ends Here ******/
   
		/*****		Ver 1.1 Starts		********/
		
		/*** Commented in Ver 1.4 
    if (  strncmp( st_upd_limits.c_cln_mtch_accnt, "751", 3) == 0 ) ****/

    /*** COmmented in Ver 1.5 ****
		*** Ver 1.4 Starts ***
		MEMSET(sql_iai_type);
		EXEC SQL
          SELECT  IAI_TYPE
          INTO    :sql_iai_type
          FROM    IAI_INFO_ACCOUNT_INFO
          WHERE   IAI_MATCH_ACCOUNT_NO  = :st_upd_limits.c_cln_mtch_accnt;
		if ( SQLCODE != 0 )
		{
			fn_errlog( c_ServiceName, "S31075", SQLMSG, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		SETNULL(sql_iai_type);
		**** Ver 1.4 Ends **** 
    ******** Commented in Ver 1.5 ****/

		if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") == 0) /*** if condition changed in ver 1.4 ***/
    {
			d_amount = l_amount;
			/****		filling details like match accnt and exchange code		******/
  		sprintf( ptr_st_pstn_actn.c_ref_rmrks, "TDS on Brokerage-:%s:",st_upd_limits.c_cln_mtch_accnt); 

	  	/*** Added for Order Routing ***/
		  strcpy( ptr_st_pstn_actn.c_rout_crt, st_upd_limits.c_rout_crt);
			
			strcpy ( ptr_st_pstn_actn.c_cln_mtch_accnt , st_upd_limits.c_cln_mtch_accnt );
			strcpy ( ptr_st_pstn_actn.c_xchng_cd , st_upd_limits.c_xchng_cd );
			
			/****  details filled up							****************************/
			strcpy( c_narration_id, "TD" );
      strcpy( c_reason_cd, "Brokerage (incl Taxes)" );
      fn_userlog( c_ServiceName, "Calling fn_tds because of :%s:",c_reason_cd );

			memset( &st_upd_limits, 0, sizeof( struct vw_upd_limits ) );

      i_returncode = fn_tds( c_ServiceName,
                             &ptr_st_pstn_actn,
														 ptr_st_err_msg,
                             c_narration_id,
                             c_reason_cd,
                             DEBIT_WITHOUT_LIMIT,
                             d_amount,
                             &d_balance_amt );

      if ( i_returncode != 0 )
      {
				fn_errlog( c_ServiceName, "S31080", LIBMSG , c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				sprintf(c_msg, "Failed in processing TDS for match id no. :%s:", ptr_st_pstn_actn.c_cln_mtch_accnt );
				fn_bat_pst_msg_fno( c_ServiceName, c_msg, c_tag );
				tpreturn( TPFAIL, ERR_BFR, (char *) ptr_fml_Ibuf, 0, 0);
      }
  
      /**** Ver 1.5 Starts Here ******/
      i_returncode  = tpcall  ( "SFO_UPD_LIMITS",( char * ) ptr_fml_Sbuf,0,( char ** ) &ptr_fml_Rbuf,&l_recvbuf,0);
      if ( i_returncode == -1 )
      {
        fn_errlog( c_ServiceName, "S31085", LIBMSG , c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        sprintf (c_msg, "Failed in Processing record for Match_id no.:%s:",
                                        st_upd_limits.c_cln_mtch_accnt);
        fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
        tpfree ((char *)ptr_fml_Sbuf);
        tpfree ((char *)ptr_fml_Rbuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      tpfree ((char *)ptr_fml_Sbuf);
      tpfree ((char *)ptr_fml_Rbuf);
      /**** Ver 1.5 Ends HEre ****/
    }		
		/*****		Ver 1.1 Ends			*******/
	}

 	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
 	{
   	fn_errlog( c_ServiceName, "S31090", LIBMSG , c_err_msg );
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   	sprintf (c_msg, "Failed in Processing record for Match_id no.:%s:",
																				st_upd_limits.c_cln_mtch_accnt);
   	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}

  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Ibuf, 0 , 0 );
}
