/**************************************************************************************/
/*		Program Name 	 : SFO_PRCS_PRPD  																								*/
/*																																										*/
/*			Input		 	 	 : FFO_EBA_MTCH_ACT_NO																						*/
/*									 	 FFO_USR_ID																											*/
/*									 	 FFO_CNTRCT_TAG																									*/
/*									 	 FFO_STATUS_FLG																									*/
/*			Output   	 	 : FFO_ERR_MSG																										*/
/*																																										*/
/*			Description	 : This Service will enable or disable the Prepaid Link						*/
/*									 	 for the input match account and as per the enable 							*/
/*                     disable Flag.																									*/
/*			Log				 	 :																																*/
/**************************************************************************************/
/*		Ver 1.0      : Initial Release 31-Oct-2012  Sandip Tambe												*/
/*		Ver 1.1      : CR_ISEC03_46121_NRI_PREPAID - 21-May-2014 - Vinod								*/
/*	  Ver 1.2      : Changes to handle SEBI records - Sandip Tambe 										*/
/**************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
	
#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fn_battmpt.h>
#include <fn_tuxlib.h>
#include <fn_log.h>
#include <fn_read_debug_lvl.h>

int fn_shcm_chng_bookmark(char *c_usr_id,
                          char *c_imm_code,
                          char  c_bk_flag,
                          char *c_ServiceName,
													char *c_remarks,
                          char *c_err_msg);
int fn_process_client(char * c_ServiceName,
											char * c_xchng_cd,
											char * i_mtch_acnt_id ,
											double l_seq_nbr,
											char * i_usr_id, 
											char c_fno_validation_flag, 
											char c_act_deact_flag );				/*** ver 1.2 **/

void SFO_PRCS_PRPD( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Obuf;
	char c_ServiceName [ 33 ];
	char c_err_msg [ 256 ] = {'\0'};
	char c_remarks [ 256 ] = {'\0'};
	char c_enable_flg='N';
	char c_cust_type='*';
	char c_run_mode='N';
	char c_run_for='P';				/** Ver 1.2 **/
	int i_returncode;
	int i_trnsctn;
	int i_ret_val;
	int i_ndf_flg=0;
	int i_ferr[16];
	int i_err[16];

	EXEC SQL BEGIN DECLARE SECTION;
	char c_user_id[9];
	char c_mtch_accnt[11];
	double  d_serial_no = 0.0;
	long l_l_seq_nbr=0;								/** ver 1.2 ***/
	varchar c_xchng_cd[4]={'\0'};			/** ver 1.2 ***/
	varchar c_usr_id[11];							/** ver 1.2 ***/
	varchar c_mtch_acnt_id[11]={'\0'};/** ver 1.2 ***/
	char c_act_deact_flag;						/** ver 1.2 ***/
	char c_fno_validation_flag='N';		/** ver 1.2 ***/
	char c_cdx_validation_flag='N';		/** ver 1.2 ***/
	char c_old_uac_flag='N';					/** ver 1.2 ***/
	char c_success_flg;								/** ver 1.2 ***/
	char c_error_msg[200];						/** ver 1.2 ***/
	char c_master_mode;								/** ver 1.2 ***/

	EXEC SQL END DECLARE SECTION;
	
	ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
	strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);
	MEMSET(c_mtch_accnt);
	MEMSET(c_user_id);
	
	/** Ver 1.2 starts ***/
	i_err[0]= Fget32(ptr_fml_Ibuf,FFO_ORD_TYP, 0,(char *)&c_run_for,0 );
	i_ferr[0]= Ferror32;
	if(i_ferr[0] == -1 && i_ferr[0] != FNOTPRES )
	{
    fn_userlog (c_ServiceName,"Failed in getting run for[SEBI/Prepaid] flag.");
    fn_errlog ( c_ServiceName, "S31005", TPMSG, c_err_msg  );
		Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
	}
	if(i_ferr[0] == FNOTPRES)
	{
		c_run_for='N';
	}
	fn_userlog(c_ServiceName,"Input c_run_for flag is :%c:",c_run_for);

 	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    	fn_userlog (c_ServiceName,"Failed in begin transaction.");
    	fn_errlog ( c_ServiceName, "S31010", TPMSG, c_err_msg  );
			Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
  }
	/** Ver 1.2 Ends ***/
	if(c_run_for == 'P' )				/** Ver 1.2 if loop introduced **/
	{
		i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                    c_err_msg,
                                    ptr_fml_Ibuf,
                                    5,
                                    FFO_EBA_MTCH_ACT_NO, ( char * )c_mtch_accnt, NULL,
																		FFO_USR_ID , (char *) c_user_id,NULL,
																		FFO_STATUS_FLG , (char *)&c_cust_type,NULL,
																		FFO_CNTRCT_TAG ,(char*)&c_enable_flg,NULL,
																		FFO_OPT_TYP,(char *)&c_run_mode,NULL
																		);

  	if( i_returncode != 0 )
  	{
    	fn_errlog( c_ServiceName, "S31015", LIBMSG , c_err_msg );
    	Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
  	}
		rtrim(c_mtch_accnt);	
		rtrim(c_user_id);	

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Input Match Account :%s:",c_mtch_accnt);
			fn_userlog(c_ServiceName,"Input Customer Flag :%c:",c_cust_type);
			fn_userlog(c_ServiceName,"Input Enable Flag   :%c:",c_enable_flg); 
			fn_userlog(c_ServiceName,"Input User Id is    :%s:",c_user_id); 
			fn_userlog(c_ServiceName,"Input run_mode flag is :%c:",c_run_mode); 
		}

  /*	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  	if ( i_trnsctn == -1 )
  	{
    	fn_userlog (c_ServiceName,"Failed in begin transaction for IBF Insert ");
    	fn_errlog ( c_ServiceName, "S31020", TPMSG, c_err_msg  );
			Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
  	} *** Ver 1.2 moved at starts **/

		if(c_enable_flg == 'E' )
		{
			sprintf(c_remarks,"Enabled for Prepaid link.");
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Before IBF processing for Enable ");
				fn_userlog(c_ServiceName,"C_REMARKS to Function is :%s:",c_remarks);
			}

			i_ret_val = fn_shcm_chng_bookmark(  c_user_id,
																				"PREPAID_CUSTOMER",
																				'A',
																				c_ServiceName,
																			  c_remarks,
																				(char *)&c_err_msg
																			);
		

			if(i_ret_val != 0 )
			{
				i_ndf_flg = 2;
				fn_userlog(c_ServiceName,"i_ret_val = :%d:",i_ret_val);
   			fn_userlog (c_ServiceName,"Failed in Enabling Bookmark for :%s:",c_user_id);
    		fn_errlog ( c_ServiceName, "S31025", TPMSG, c_err_msg  );
				Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
			}
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"i_ret_val = :%d:",i_ret_val);
				fn_userlog(c_ServiceName,"Message returned from function for :%s: is :%s:",c_user_id,c_err_msg);
				fn_userlog(c_ServiceName,"IBF processing for Enabling  Done for :%s:",c_user_id);
			}
		}
		else if(c_enable_flg == 'D' )
		{
			sprintf(c_remarks,"Disabled for Prepaid link.");
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Before IBF processing for Disable ");
				fn_userlog(c_ServiceName,"C_REMARKS to Function is :%s:",c_remarks);
			}

			i_ret_val = fn_shcm_chng_bookmark( c_user_id,
																			 "PREPAID_CUSTOMER",
																				'C',
																				c_ServiceName,
																				c_remarks,
																				(char *)&c_err_msg
																		  );
		

			if(i_ret_val != 0 )
			{
				i_ndf_flg = 2;
				fn_userlog(c_ServiceName,"i_ret_val = :%d:",i_ret_val);
   			fn_userlog (c_ServiceName,"Failed in Disabling Bookmark for :%s:",c_user_id);
    		fn_errlog ( c_ServiceName, "S31030", TPMSG, c_err_msg  );
				Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
			}

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"i_ret_val = :%d:",i_ret_val);
				fn_userlog(c_ServiceName,"Message returned from function for :%s: is :%s:",c_user_id,c_err_msg);
				fn_userlog(c_ServiceName,"IBF processing for Disabling  Done for :%s:",c_user_id);
			}
		}
		else
		{
			i_ndf_flg = 2;
    	fn_userlog (c_ServiceName,"Invalid Enable Disable Flag for :%s:",c_mtch_accnt);
    	fn_errlog ( c_ServiceName, "S31035", TPMSG, c_err_msg  );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
		}
		if(i_ndf_flg != 2 )
		{
			fn_userlog(c_ServiceName,"now updating CLM Prepaid Flag for :%s:",c_mtch_accnt );

			/******************Added in Ver Ver 1.1 start******************/
			EXEC SQL
				UPDATE	USR_USER_MASTER
				SET			USR_PREPAID_ALLWD = DECODE(:c_enable_flg,'E','Y','D','N')
				WHERE		USR_USR_ID = :c_user_id;

			if(SQLCODE !=0)
    	{
      	 fn_errlog(c_ServiceName,"S31040",SQLMSG,c_err_msg);
       	 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       	 Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
       	 tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
   	  }
			/******************Added in Ver Ver 1.1 end******************/

			EXEC SQL
				UPDATE clm_clnt_mstr 
				SET 	 /*clm_prepaid_allwd =decode(:c_enable_flg,'E','Y','D','N'), ***Commented in Ver Ver 1.1**/
						 	 clm_prpd_cust_typ = :c_cust_type
				WHERE  clm_mtch_accnt =:c_mtch_accnt;

				if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND )
				{
					fn_errlog(c_ServiceName,"S31045",SQLMSG,c_err_msg);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
				}
				if(SQLCODE == NO_DATA_FOUND )
				{
					i_ndf_flg = 1;
					fn_userlog(c_ServiceName," NDF in CLM for match acc:%s:",c_mtch_accnt);
					fn_userlog(c_ServiceName," Failed in updating CLM for match acc:%s:",c_mtch_accnt);
				}		
		}
		EXEC SQL
			UPDATE ppd_prepaid_enable_dtls
			SET    ppd_prcs_flg=decode(:i_ndf_flg,1,'M',2,'F','Y')	/** M - match account missing in CLM **/
																														/** F - Bookmark update faiure in IBF**/
			WHERE  ppd_clm_mtch_accnt=:c_mtch_accnt;

			if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND )
			{
				fn_errlog(c_ServiceName,"S31050",SQLMSG,c_err_msg);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
			}
			if(SQLCODE == NO_DATA_FOUND )
			{
				fn_userlog(c_ServiceName,"NDF in PPD for match:%s:check if for disable flg:%s:",c_mtch_accnt,c_enable_flg);
			}
			fn_userlog(c_ServiceName,":%s: prepaid processing done successfully",c_mtch_accnt);
	}
	if(c_run_for == 'S' ) /** Ver 1.2 if loop introduced for SEBI ***/
	{
		fn_userlog(c_ServiceName,"Inside SEBI loop.");
		MEMSET(c_usr_id);
		MEMSET(c_mtch_acnt_id);
		MEMSET(c_xchng_cd);

		i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                    c_err_msg,
                                    ptr_fml_Ibuf,
                                    8,
																		FFO_ORD_TYP,(char *)&c_run_for,NULL,
																		FFO_XCHNG_CD,(char *)c_xchng_cd.arr,NULL,
																	  FFO_SEQ_NUM, (char *)&l_l_seq_nbr,NULL,	
                                    FFO_EBA_MTCH_ACT_NO, ( char * )c_mtch_acnt_id.arr, NULL,
																		FFO_USR_ID , (char *) c_usr_id.arr,NULL,
																		FFO_STATUS_FLG , (char *)&c_act_deact_flag,NULL,
																		FFO_CNTRCT_TAG ,(char*)&c_old_uac_flag,NULL,
																		FFO_OPT_TYP,(char *)&c_master_mode,NULL
																		);

  	if( i_returncode != 0 )
  	{
    	fn_errlog( c_ServiceName, "S31055", LIBMSG , c_err_msg );
    	Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
  	}
		 SETLEN(c_usr_id);
 		 SETLEN(c_mtch_acnt_id); 
 		 SETLEN(c_xchng_cd); 

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"c_run_for=:%c:",c_run_for);
			fn_userlog(c_ServiceName,"c_xchng_cd=:%s:",c_xchng_cd.arr);
			fn_userlog(c_ServiceName,"c_mtch_acnt_id=:%s:",c_mtch_acnt_id.arr);
			fn_userlog(c_ServiceName,"l_l_seq_nbr=:%ld:",l_l_seq_nbr);
			fn_userlog(c_ServiceName,"c_usr_id=:%s:",c_usr_id.arr);
			fn_userlog(c_ServiceName,"c_act_deact_flag=:%c:",c_act_deact_flag);
			fn_userlog(c_ServiceName,"c_old_uac_flag=:%c:",c_old_uac_flag);
			fn_userlog(c_ServiceName,"c_master_mode=:%c:",c_master_mode);
		}
		c_run_mode=	c_master_mode;
		if(strcmp(c_xchng_cd.arr,"NFO") == 0)
		{
    	/**EXEC SQL
      	UPDATE    FDT_FNO_DISABLE_TRACK_SEBI
      	SET       FDT_PRCS_FLG='P'
      	WHERE     FDT_MATCH_ACNT = trim(:c_mtch_acnt_id)
      	AND       FDT_SEQ_ID = :l_l_seq_nbr;

      	if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
      	{
					fn_errlog(c_ServiceName,"S31060",SQLMSG,c_err_msg);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
      	} **/
      	if (DEBUG_MSG_LVL_0)
      	{
        fn_userlog(c_ServiceName,"Calling SP_FNO_CDX_VALIDATIONS procedure for userid:<%s> match id:<%s>  Act-Deact Flag<%c>																	  SeqNo<%ld>", c_usr_id.arr ,c_mtch_acnt_id.arr, c_act_deact_flag, l_l_seq_nbr);
      	}
      	c_fno_validation_flag='N'; 
      	EXEC SQL
          EXECUTE
              BEGIN
              SP_FNO_CDX_VALIDATIONS
              (
                trim(:c_mtch_acnt_id),
                'BAT_ACTV_ACCT_E',
                'Y',             
                'FNO',
                :c_fno_validation_flag,
                :c_success_flg,
                :c_error_msg,
                :c_ServiceName, 
                :c_ServiceName 
               );
               END;
        END-EXEC;
		}
		if(strcmp(c_xchng_cd.arr,"CDX") == 0)
		{
    	/**EXEC SQL
      	UPDATE    CDT_CDX_DISABLE_TRACK_SEBI
      	SET       CDT_PRCS_FLG='P'
      	WHERE     CDT_MATCH_ACNT = trim(:c_mtch_acnt_id)
      	AND       CDT_SEQ_ID = :l_l_seq_nbr;

      	if ( SQLCODE != 0 )
      	{
					fn_errlog(c_ServiceName,"S31065",SQLMSG,c_err_msg);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
      	} **/
      	if (DEBUG_MSG_LVL_0)
      	{
        	fn_userlog(c_ServiceName,"CDX-Calling SP_FNO_CDX_VALIDATIONS procedure for userid:<%s> match id:<%s>Act-Deact Flag<%c>SeqNo<%ld>", c_usr_id.arr , c_mtch_acnt_id.arr, c_act_deact_flag, l_l_seq_nbr);
      	}
      	c_cdx_validation_flag='N'; 
      	EXEC SQL
          EXECUTE
              BEGIN
              SP_FNO_CDX_VALIDATIONS
              (
                trim(:c_mtch_acnt_id),
                'BAT_ACTV_ACCT_E',
                'Y',             
                'CDX',
                :c_cdx_validation_flag,
                :c_success_flg,
                :c_error_msg,
                :c_ServiceName, 
                :c_ServiceName 
               );
               END;
        END-EXEC;
		}


        fn_userlog (c_ServiceName,"Val of c_mtch_acnt_id<%s> c_success_flg<%c> after procedure execution", c_mtch_acnt_id.arr																		, c_success_flg);
      if (strcmp(c_xchng_cd.arr,"NFO") == 0)
      {
        fn_userlog (c_ServiceName,"Val of c_fno_validation_flag<%c> c_error_msg<%s> after procedure execution",c_fno_validation_flag, c_error_msg);
      }
      if (strcmp(c_xchng_cd.arr,"CDX") == 0)
      {
        fn_userlog (c_ServiceName,"Val of c_cdx_validation_flag<%c> c_error_msg<%s> after procedure execution",c_cdx_validation_flag, c_error_msg);
      }
      if ( c_success_flg =='N' || c_success_flg =='F')  /** Ver 1.4 ***, c_success_flg =='F' added **/
      {
        fn_userlog(c_ServiceName,"Procedure failure returned flag as %c for <%s>",c_success_flg,c_mtch_acnt_id.arr);
      }


      if ((
					(
						(c_fno_validation_flag =='Y' || c_fno_validation_flag =='Z' || c_fno_validation_flag =='D' ) 
																			&& 
						(strcmp(c_xchng_cd.arr,"NFO") ==0)
					) || 
					(
						(c_cdx_validation_flag =='Y' || c_cdx_validation_flag =='Z' || c_cdx_validation_flag =='D' ) 
																			&& 
						(strcmp(c_xchng_cd.arr,"CDX") ==0)
					) )
																				&& 
					(c_master_mode  == 'R' )
				 ) 
      {
        if( (c_old_uac_flag != c_fno_validation_flag && strcmp(c_xchng_cd.arr,"NFO") == 0 ) ||
						(c_old_uac_flag != c_cdx_validation_flag && strcmp(c_xchng_cd.arr,"CDX") == 0 )
					)
        {
					if(strcmp(c_xchng_cd.arr,"NFO") == 0)
					{	
         		fn_userlog(c_ServiceName,"Before Update -FNO_ALLOWED_flag of proc <%c> for <%s><%s>",c_fno_validation_flag ,c_mtch_acnt_id.arr ,c_usr_id.arr);
       			i_returncode = fn_process_client(c_ServiceName,
																					c_xchng_cd.arr,
																					c_mtch_acnt_id.arr,
																					l_l_seq_nbr, 
																					c_usr_id.arr, 
																					c_fno_validation_flag, 
																					c_act_deact_flag);

       			if (i_returncode != 0)
       			{
          		fn_userlog(c_ServiceName,"Error in fn_process_client for match id:<%s> ",c_mtch_acnt_id.arr);
          		strcpy ( c_err_msg, "System error. Contact system support - Error in Calling fn_process_client" );
          		fn_errlog ( c_ServiceName, "S31070", c_err_msg, c_err_msg  );

          		EXEC SQL
                UPDATE    FDT_FNO_DISABLE_TRACK_SEBI
                SET       FDT_PRCS_FLG='F'
                WHERE     FDT_MATCH_ACNT =trim(:c_mtch_acnt_id)
                AND       FDT_SEQ_ID = :l_l_seq_nbr;
         	 		if ( SQLCODE != 0 )
           		{
								fn_errlog(c_ServiceName,"S31075",SQLMSG,c_err_msg);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
								tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
           		}
           		if (DEBUG_MSG_LVL_3)
           		{
           	 		fn_userlog (c_ServiceName,"After updating fdt_prcs_flg to F to continue process");
           		}
       	  	}
       			if (DEBUG_MSG_LVL_0)
       			{
          		fn_userlog (c_ServiceName,"FNO After function fn_process_client to update <%s>", c_mtch_acnt_id);
       			}
          	EXEC SQL
                UPDATE    FDT_FNO_DISABLE_TRACK_SEBI
                SET       FDT_PRCS_FLG='Y'
                WHERE     FDT_MATCH_ACNT = trim(:c_mtch_acnt_id)
                AND       FDT_SEQ_ID = :l_l_seq_nbr;
         		if ( SQLCODE != 0 )
          	{
								fn_errlog(c_ServiceName,"S31080",SQLMSG,c_err_msg);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
								tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
          	}
				  }
					else if(strcmp(c_xchng_cd.arr,"CDX") == 0)
					{	
         		fn_userlog(c_ServiceName,"Before Update -CDX_ALLOWED_flag of proc <%c> for <%s><%s>",c_cdx_validation_flag ,c_mtch_acnt_id.arr ,c_usr_id.arr);
       			i_returncode = fn_process_client(c_ServiceName,
																					c_xchng_cd.arr,
																					c_mtch_acnt_id.arr,
																					l_l_seq_nbr, 
																					c_usr_id.arr, 
																					c_cdx_validation_flag, 
																					c_act_deact_flag);

       			if (i_returncode != 0)
       			{
          		fn_userlog(c_ServiceName,"Error in fn_process_client for match id:<%s> ",c_mtch_acnt_id.arr);
          		strcpy ( c_err_msg, "System error. Contact system support - Error in Calling fn_process_client" );
          		fn_errlog ( c_ServiceName, "S31085", c_err_msg, c_err_msg  );

          		EXEC SQL
                UPDATE    CDT_CDX_DISABLE_TRACK_SEBI
                SET       CDT_PRCS_FLG='F'
                WHERE     CDT_MATCH_ACNT =trim(:c_mtch_acnt_id)
                AND       CDT_SEQ_ID = :l_l_seq_nbr;
         	 		if ( SQLCODE != 0 )
           		{
								fn_errlog(c_ServiceName,"S31090",SQLMSG,c_err_msg);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
								tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
           		}
           		if (DEBUG_MSG_LVL_3)
           		{
           	 		fn_userlog (c_ServiceName,"After updating cdt_prcs_flg to F to continue process");
           		}
       	  	}
       			if (DEBUG_MSG_LVL_0)
       			{
          		fn_userlog (c_ServiceName,"CDX After function fn_process_client to update <%s>", c_mtch_acnt_id);
       			}
          	EXEC SQL
                UPDATE    CDT_CDX_DISABLE_TRACK_SEBI
                SET       CDT_PRCS_FLG='Y'
                WHERE     CDT_MATCH_ACNT = trim(:c_mtch_acnt_id)
                AND       CDT_SEQ_ID = :l_l_seq_nbr;
         		if ( SQLCODE != 0 )
          	{
								fn_errlog(c_ServiceName,"S31095",SQLMSG,c_err_msg);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
								tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
          	}
				  }
        }
        else
        {
          fn_userlog(c_ServiceName,"Old and New FNO/CDX Flag for :%s: are same hence continue",c_mtch_acnt_id.arr);
        } 
     }
     if ( c_fno_validation_flag =='N' || c_cdx_validation_flag == 'N' )
      {
        fn_userlog (c_ServiceName,"Procedure returned %s_allowed_flag as N for <%s>", c_xchng_cd.arr,c_mtch_acnt_id.arr);
      }
	} /*** Ver 1.2 Ends ***/		
	if(c_run_mode == 'S' )
	{
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_userlog (c_ServiceName,"Transaction aborted as run for Simulation mode");
		Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
	}
	else if(c_run_mode == 'R' )
	{
  		if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  		{
    		fn_userlog (c_ServiceName,"Failed in commit transaction for IBF Insert- ");
    		fn_errlog ( c_ServiceName, "S31100", SQLMSG, c_err_msg);
				Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
  		}
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"After Commit Transaction");
			}
	}
  fn_userlog(c_ServiceName,"End of program SFO_PRCS_PRPD ");
	tpfree((char *) ptr_fml_Ibuf);
  tpreturn(TPSUCCESS,SUCC_BFR, NULL, 0L, 0);
}
/** Ver 1.2 Function introduced for SEBI Processing ****/
int fn_process_client(c_ServiceName,c_xchng_cd,i_mtch_acnt_id , l_seq_nbr, i_usr_id, c_validation_flag, c_act_deact_flag)

	EXEC SQL BEGIN DECLARE SECTION;
	char  *  c_ServiceName;
	char  *  c_xchng_cd;
	char  *  i_mtch_acnt_id;
	double  l_seq_nbr;
	char *  i_usr_id;
	char    c_validation_flag;
	char    c_act_deact_flag; 
  EXEC SQL END   DECLARE SECTION;
{
	char c_err_msg[ 256 ] = {'\0'};
  long val=0;

  if (DEBUG_MSG_LVL_0)
  {
    fn_userlog (c_ServiceName,"Check n update|%s|%s||%c| for :%s:",i_usr_id,i_mtch_acnt_id,c_validation_flag,c_xchng_cd);
  }

	if(strcmp(c_xchng_cd,"NFO")== 0)
	{
  	EXEC SQL
    	INSERT INTO FDT_FNO_DISABLE_TRACK
   	 	SELECT FDT_SEQ_ID,
           FDT_USR_ID,
           FDT_MATCH_ACNT,
           '',
           FDT_UAC_FNO_ALLWD,
           :c_validation_flag, 
           FDT_PLG_AMT,
           FDT_EQ_AMT,
           FDT_FO_AMT,
           FDT_MF_AMT,
           FDT_CR_AMT,
           FDT_COMMENT,
           FDT_PRCS_DATE,
           '',
           '',
           'Y'
     	FROM FDT_FNO_DISABLE_TRACK_SEBI
     	WHERE FDT_MATCH_ACNT = :i_mtch_acnt_id
     	AND FDT_SEQ_ID = :l_seq_nbr
     	AND FDT_USR_ID = :i_usr_id
     	AND FDT_PRCS_FLG='P';

  	if ( SQLCODE != 0 )
  	{
     	fn_userlog (c_ServiceName," Failed in Inserting into FDT from Temp");
     	fn_errlog  (c_ServiceName, "S31105", SQLMSG, c_err_msg  );
     	return (-1);
  	}
		if (DEBUG_MSG_LVL_3)
  	{
     	fn_userlog (c_ServiceName,"Record inserted from temp to FDT: <%ld> <%s> <%ld>",sqlca.sqlerrd[2], i_usr_id, l_seq_nbr);
  	}

  	EXEC SQL
    	UPDATE   FDT_FNO_DISABLE_TRACK_SEBI
    	SET      FDT_PRCS_FLG='Y'
    	WHERE    FDT_MATCH_ACNT = trim(:i_mtch_acnt_id)
    	AND      FDT_SEQ_ID = :l_seq_nbr
    	AND  FDT_USR_ID = trim(:i_usr_id)
    	AND      FDT_PRCS_FLG='P';

  	if ( SQLCODE != 0 )
  	{
    	fn_errlog  (c_ServiceName, "S31110", SQLMSG, c_err_msg  );
    	return (-1);
  	}

  	EXEC SQL
    	UPDATE UAC_USR_ACCNTS
    	SET    UAC_FNO_ALLWD = :c_validation_flag,
    			 	 UAC_LST_UPDT_DATE=sysdate
    	WHERE  UAC_CLM_MTCH_ACCNT = trim(:i_mtch_acnt_id);

  	if ( SQLCODE != 0 )
  	{
     	fn_errlog ( c_ServiceName, "S31115", SQLMSG, c_err_msg  );
     	return (-1);
  	}

  	if (
        (strncmp(i_mtch_acnt_id,"750",3)== 0) || (strncmp(i_mtch_acnt_id,"751",3)== 0) ||
        (strncmp(i_mtch_acnt_id,"650",3)== 0) || (strncmp(i_mtch_acnt_id,"651",3)== 0)
     	 )
  	{
     	EXEC SQL
       	UPDATE clm_clnt_mstr
       	SET    clm_clnt_lvl      = '1',
              	clm_plg_allwd_flg = 'N'
       	WHERE  clm_mtch_accnt    = trim(:i_mtch_acnt_id);

     	if ( SQLCODE != 0 )
     	{
         fn_errlog ( c_ServiceName, "S31120", SQLMSG, c_err_msg  );
         return (-1);
     	}
  	}
  	else
  	{
     	EXEC SQL
       	UPDATE  CLM_CLNT_MSTR
        SET     CLM_CLNT_LVL = '1',
                CLM_PLG_ALLWD_FLG = 'Y'
        WHERE   CLM_MTCH_ACCNT = :i_mtch_acnt_id;

          if ( SQLCODE != 0 )
          {
           fn_errlog ( c_ServiceName, "S31125", SQLMSG, c_err_msg  );
           return (-1);
          }
  	}
	}
	if(strcmp(c_xchng_cd,"CDX")== 0)
	{
     EXEC SQL
       INSERT INTO CDT_CDX_DISABLE_TRACK
       SELECT CDT_SEQ_ID,
              CDT_USR_ID,
              CDT_MATCH_ACNT,
              '',
              CDT_UAC_CDX_ALLWD,
              :c_validation_flag, 
              CDT_PLG_AMT,
              CDT_EQ_AMT,
              CDT_FO_AMT,
              CDT_MF_AMT,
              CDT_CR_AMT,
              CDT_COMMENT,
              CDT_PRCS_DATE,
              '',
              '',
              'Y'
       FROM CDT_CDX_DISABLE_TRACK_SEBI
       WHERE CDT_MATCH_ACNT = :i_mtch_acnt_id
       AND CDT_SEQ_ID = :l_seq_nbr
       AND CDT_USR_ID = :i_usr_id
       AND CDT_PRCS_FLG='P';

     if ( SQLCODE != 0 )
     {
        fn_userlog (c_ServiceName," Failed in Inserting into CDT from Temp");
        fn_errlog  (c_ServiceName, "S31130", SQLMSG, c_err_msg  );
        return (-1);
     }

     if (DEBUG_MSG_LVL_3)
     {
        fn_userlog(c_ServiceName,"Record inserted from temp to CDT: <%ld> <%s> <%ld>",sqlca.sqlerrd[2],i_usr_id,l_seq_nbr);
     }

		 EXEC SQL
        UPDATE   CDT_CDX_DISABLE_TRACK_SEBI
        SET      CDT_PRCS_FLG='Y'
        WHERE    CDT_MATCH_ACNT = :i_mtch_acnt_id
        AND      CDT_SEQ_ID = :l_seq_nbr
        AND      CDT_USR_ID = :i_usr_id
        AND      CDT_PRCS_FLG='P';

     if ( SQLCODE != 0 )
     {
        fn_errlog  (c_ServiceName, "S31135", SQLMSG, c_err_msg  );
        return (-1);
     }

     EXEC SQL
        UPDATE UAC_USR_ACCNTS
        SET    UAC_CDX_ALLWD = :c_validation_flag,
               UAC_LST_UPDT_DATE=sysdate
        WHERE  UAC_CLM_MTCH_ACCNT = :i_mtch_acnt_id;

     if ( SQLCODE != 0 )
     {
        fn_errlog ( c_ServiceName, "S31140", SQLMSG, c_err_msg  );
        return (-1);
     }

	 	 EXEC SQL
        UPDATE  CLM_CLNT_MSTR
        SET     CLM_CDX_CLNT_LVL = '1'
        WHERE   CLM_MTCH_ACCNT = :i_mtch_acnt_id;

     if ( SQLCODE != 0 )
     {
        fn_errlog ( c_ServiceName, "S31145", SQLMSG, c_err_msg  );
        return (-1);
     }
		}
  	EXEC SQL
     INSERT INTO ADH_ACT_DEACT_HSTRY
             (
              ADH_USR_ID,
              ADH_CLM_MTCH_ACCNT,
              ADH_ACT_DEACT_FLG,
              ADH_ACT_DEACT_DT,
              ADH_ACT_DEACT_SRC,
              ADH_RMRKS,
              ADH_UPGRD_FLG
             )                   
      VALUES
            (:i_usr_id ,
						 :i_mtch_acnt_id , 
						 :c_act_deact_flag, 
						 SYSDATE,
						 decode(:c_xchng_cd,'NFO','FNO_SEBI_TIME','CDX','CDX SEBI TIE'),
             decode(:c_validation_flag,'Z','FNO/CDX enabled linked Bank account more than 6 months old',
																					 'D','FNO/CDX enabled linked Bank account less than 6 months old',
																					 'Y',decode(:c_xchng_cd,'NFO','SEBI FNO Allowd','CDX','SEBI CDX Allowd')), 'N' 
						);
  	if ( SQLCODE != 0 )
  	{
     	fn_errlog ( c_ServiceName, "S31150", SQLMSG, c_err_msg  );
     	return (-1);
  	}
  	return (0);
}
/*** ver 1.2 Ends ***/
