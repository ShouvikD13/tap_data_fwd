/**********************************************************************************/
/*    Program             : SFO_CONV_TO_FP                                   	 		*/
/*                                                                             		*/
/*    Input               : FFO_PRDCT_TYP                                      		*/
/*                          FFO_UNDRLYNG                                       		*/
/*                          FFO_CNTRCT_TAG                                     		*/
/*                          FFO_CTGRY_INDSTK                                   		*/
/*                          FFO_XCHNG_CD                                       		*/
/*                          FFO_EBA_MTCH_ACT_NO                                		*/
/*                                                                             		*/
/*    Output              :                                                    		*/
/*                                                                             		*/
/*    Description         : This service converts future position to           		*/
/*                          Future Plus.                                       		*/
/*                                                                             		*/
/*                                                                             		*/
/*    Log                 : 1.0   10-Jan-2012      Mahesh Shinde               		*/
/*    		                : 1.1   17-Oct-2012      Mahesh Shinde               		*/
/*                        : 1.2   16-Oct-2012      Vishnu Nair                 		*/
/*												:	1.3		22-Oct-2012			 Vishnu	Nair								 		*/
/*												: 1.4   12-Nov-2012			 Vishnu Nair								 		*/
/*												: 1.5   23-Jan-2013			 Vishnu Nair								 		*/
/*												: 1.6   06-Feb-2013			 Mahesh Shinde							 		*/
/*												: 1.7		31-May-2013			 Vishnu Nair								 		*/
/*												: 1.8		17-Sep-2013			 Mahesh Shinde							 		*/
/*                        : 1.9   14-Feb-2014      Navina D.                   		*/
/*												: 2.0		28-Feb-2014			 Sandeep Patil							 		*/
/*                        : 2.1   23-Jun-2014   	 Sandeep Patil                  */
/*                        : 2.2   15-May-2014      Bhushan Sonwane             		*/
/*												:	2.3   01-Aug-2014			 Bhushan Sonwane                */
/*                        : 2.4   03-Jul-2015      Anand Dhopte                   */ 
/*                        : 2.6   20-Jun-2016     Sachin Birje                    */
/*                        : 2.7   01-Jul-2016     Samip M													*/
/*                        : 2.8   06-Mar-2016     Bhupendra Malik                 */
/*												: 2.9		03-May-2018			Parag Kanojia										*/
/*                        : 3.0   07-Sep-2018     Mrinal Kishore               		*/
/*                        : 3.1   23-Oct-2019     Tanmay Patel                    */
/*												:	3.2		02-Feb-2021			Kiran Itkar											*/
/*                        : 3.3   08-Dec-2021     Mahesh Regulwar                 */
/*                        : 3.4   16-Sep-2022     Dipin                           */    
/*                        : 3.5   07-Mar-2023     Mahesh                          */   
/*												: 3.6   30-Mar-2023 	(	Bhavana )				    						*/ 
/**********************************************************************************/
/*    1.0   							-   New Release                                      		*/
/*    1.1   							-   Check for Unable/disable future plus contract 	 		*/
/*														added and changed remarks for converted future 	 		*/
/*														plus position on portfolio page (CR-ISEC14-32327)		*/		
/*    1.2                 -   Check for open qty added for SilverLight         		*/
/*                            and Windows APP                                  		*/
/*		1.3									-   Disable FuturePlus for BSE											 		*/
/*		1.4									-		Restricting futplus order placement for					 		*/ 
/*								  					NRI customers																		 		*/
/*		1.5									-		Change to append DL Setup No with userid while   		*/
/*														inserting into FOD_FO_ORDR_DTLS									 		*/		
/*    1.6                 -   SPAN FuturePLUS handling                         		*/
/*		1.7									-   Restrict DBC mapped customer to convert position 		*/
/*														if trading is not allowed												 		*/						
/*	  1.8									-		CR-ISEC14-41247  Correct order flow on converted 		*/
/*														positions page																			*/
/*    1.9                 -   Enabling FP for NRI clients                      		*/						
/*		2.0									-		Error Message changed in case user tries to convert */
/*														more quantity than his open position								*/
/*    2.1   							-   Pending Qty Selection Query Changed                 */
/*    2.2                 -   Nick Name Check Commented For DBC Customers         */
/*		2.3									-		Changes For HTML5																		*/
/*    2.4                 -   FCM-FTQ Merger Changes                              */
/*    2.6                 -   Trade insert  and process time changes              */
/*    2.7                 -   Check Session IP Common Function										*/
/*    2.8                 -   Optimization                                        */
/*		2.9									-   NNF_7.21_CHANGES(PAN CHANGES)												*/
/*    3.0   							-   Physicall Settlement of Stock Derivatives 					*/
/*														phase 2 changes      																*/
/*    3.1                 -   Ipv6 Format                                         */
/*		3.2									-   Separate EOS for Stock and Index Underlyings in FPSL*/
/*    3.3                 -   Average Price for PNL                               */
/*    3.4                 -   Unique device identifiers                           */ 
/*    3.5                 -   FNO lock user changes																*/
/*		3.6 								- 	Margin reporting regulatory changes 								*/
/**********************************************************************************/

#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <eba_to_ors.h>
#include <fo_view_def.h>
#include <fn_ddr.h>
#include <fn_session.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_read_debug_lvl.h>
#include <fn_val_ord.h> /* Ver 1.5 */
#include <fn_pos.h>   /** Ver 2.8 **/

int fn_ins_ordrbook ( char  *c_ServiceName,                   /***  Ver 1.5 ***/
                      char  *c_user_id,
                      struct vw_orderbook *ptr_st_ordbook,
											char  c_spn_flg,												/*** Ver 1.6 ***/
											char *c_pan_no,													/*** Added In Ver 2.9 ***/
                      char c_setlment_flag,                   /*** Added in Ver 3.0 ***/
                      struct vw_err_msg *ptr_st_err_msg
                    );


void SFO_CONV_TO_FP( TPSVCINFO *rqst )
{
	
	FBFR32  *ptr_fml_Ibuf;

  char c_ServiceName[33];
  char c_err_msg[256];
  char c_xchng_ack[ LEN_XCHNG_ACK ];
  char c_bp_id[9];
  char c_ctcl_id[17];
  char c_alias[9];
  char c_roll_stts;
 	char c_user_id[16];           /* Ver 1.5 */	
  char c_setlmnt_flg     ='\0';    /** Ver 3.0 **/
 	char c_cntrct_tag = '\0';     /* Ver 1.6 */	
	char 	c_temp_psswrd1[LEN_USR_TRDNG_PSSWRD];		/** Ver 2.7 **/
	char 	c_trdng_psswrd_flg = 'N';								/** Ver 2.7 **/
	char	c_txn_flg='Y';													/** Ver 2.7 **/
	char 	c_ip_address[45+1]; /** Changed from 15 to 45 in Ver 3.1 **/	/** Ver 2.7 **/

  double d_prtfl_avgprc = 0.0; /** Ver 3.3 **/
	
	int i_returncode;
  int i_level_exists;
  int i_trnsctn;
  int i_ip_len;
  int i_op_len;
  int i_count=0;
  int i_is_dbc_cust = 0;   /** Ver 1.7 **/

	EXEC SQL BEGIN DECLARE SECTION;
    varchar c_systm[LEN_DATE];
    varchar c_trd_dt[LEN_DATE];
    varchar c_trd_ref [ 10 + 1];
    varchar c_trd_rfrnc [ 10 + 1]; 
    varchar c_trd_tm [ LEN_DATE];
    varchar v_user_id [ 9 ];    
    varchar v_user_id_bkup [ 9 ];
		varchar v_pan_no[30+1];						/*** Added In Ver 2.9 ***/
    
		struct vw_usr_prfl st_usr_prfl;
    struct vw_pstn_actn st_pstn_actn;
    struct vw_xchngbook st_xchngbook;
    struct vw_orderbook st_orderbook;
    struct vw_tradebook st_tradebook;
    struct vw_sequence st_s_sequence;
    struct vw_sequence st_r_sequence;
	  struct vw_err_msg st_err_msg; 		/* Ver 1.5 */

    char  c_expry_dt[12];
    char  c_spl_flag;
    char  c_span_flg = '\0';					/*** Ver 1.6 ***/
    char  c_pipe_id[3];
    char  sql_cln_mtch_accnt[11];
    char  sql_xchng_cd[4];
    char  sql_prd_typ;
    char  sql_undrlyng[7];
    char  sql_cntrct_tag;
    char  sql_exer_typ;
    char  sql_opt_typ;
    char  c_seq_num[9];
		char  c_fp_trdng_flg;
		char  c_fcm_trdng_flg;

    long  sql_strike_prc;
    long  l_xchng_seq_num;
    long  l_ord_seq_num;
    long  l_lot_size=0;
		long  l_qty = 0;      /* Ver 1.2 */
    long  l_seq_num=0; /** Ver 2.8 **/

    short int si_null;
  EXEC SQL END  DECLARE SECTION;

	EXEC SQL INCLUDE "table/usr_user_master.h";     
  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );

  INITDBGLVL(c_ServiceName);        

	MEMSET(st_err_msg);			/** Ver 2.7 **/
	MEMSET(v_pan_no);				/*** Added In Ver 2.9 ***/

  i_returncode = Fvftos32( ptr_fml_Ibuf, ( char * )&st_pstn_actn, "vw_pstn_actn" );

  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  i_returncode = Fvftos32( ptr_fml_Ibuf, (char *) &st_usr_prfl, "vw_usr_prfl" );
  
	if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  i_returncode = Fvftos32( ptr_fml_Ibuf, (char *) &st_xchngbook, "vw_xchngbook" );

  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  i_returncode = Fvftos32( ptr_fml_Ibuf, (char *) &st_orderbook, "vw_orderbook" );

  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	i_returncode = Fget32 ( ptr_fml_Ibuf, FFO_SPL_FLG, 0, (char *)&c_spl_flag, 0 );
  
	if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31025", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  i_returncode = Fget32 ( ptr_fml_Ibuf, FFO_CTCL_ID, 0, (char *)c_ctcl_id, 0 );
  
	if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31030", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/*** Added for Ver 2.7 ****/

	i_returncode =  fn_check_user_ip ( c_ServiceName,
																			&st_usr_prfl ,
																			c_temp_psswrd1,
																			c_trdng_psswrd_flg,
																			c_ip_address,
																			c_txn_flg,
																			&st_err_msg );

	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31035", LIBMSG, c_err_msg );
		fn_userlog(c_ServiceName,"error message :%s:",st_err_msg.c_err_msg);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"ip address:%s:",c_ip_address);
	}

	/** Ver 2.7 ***/

	if( strcmp(st_usr_prfl.c_user_id ,"system")!=0 && st_usr_prfl.l_session_id != 0)
  {
    i_returncode = Fget32 ( ptr_fml_Ibuf, FFO_EXPRY_DT, 0, (char *) c_expry_dt, 0 );
    
		if( i_returncode == -1 && i_returncode != FNOTPRES )
    {
      fn_errlog( c_ServiceName, "S31040", FMLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    else if( ( i_returncode == -1 ) && ( i_returncode == FNOTPRES ) )
    {
      if( c_spl_flag == SINGLE_CONVERSION )
      {
        fn_errlog( c_ServiceName, "S31045", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
  }

  /*These values were not being pssed from Front End in certain conditions hence hardcoded */

	st_pstn_actn.c_exrc_typ 	= 'E';
  st_pstn_actn.c_opt_typ 		= '*';
  st_pstn_actn.l_strike_prc = 0;

  fn_init_ddr_val ( st_pstn_actn.c_rout_crt );

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog( c_ServiceName, "Match Account :%s:", st_pstn_actn.c_cln_mtch_accnt );
    fn_userlog( c_ServiceName, "Exchange code :%s:", st_pstn_actn.c_xchng_cd );
    fn_userlog( c_ServiceName, "Product Type  :%c:", st_pstn_actn.c_prd_typ );
    fn_userlog( c_ServiceName, "Underlyng     :%s:", st_pstn_actn.c_undrlyng );
    fn_userlog( c_ServiceName, "Expiry date   :%s:", st_pstn_actn.c_expry_dt );
    fn_userlog( c_ServiceName, "Excercise Type:%c:", st_pstn_actn.c_exrc_typ );
    fn_userlog( c_ServiceName, "Option Type   :%c:", st_pstn_actn.c_opt_typ );
    fn_userlog( c_ServiceName, "Strike Price  :%ld:",st_pstn_actn.l_strike_prc);
    fn_userlog( c_ServiceName, "Category      :%c:", st_pstn_actn.c_ctgry_indstk );
    fn_userlog( c_ServiceName, "Contract tag  :%c:", st_pstn_actn.c_cntrct_tag );
    fn_userlog( c_ServiceName, "Special Flag  :%c:", c_spl_flag );
    fn_userlog( c_ServiceName, "c_ctcl_id  		:%s:", c_ctcl_id );
    fn_userlog( c_ServiceName, "c_expry_dt  	:%s:", c_expry_dt );
    fn_userlog( c_ServiceName, " All Values get successfully. " );
  }

	strcpy(sql_cln_mtch_accnt,st_pstn_actn.c_cln_mtch_accnt);
  strcpy(sql_xchng_cd,st_pstn_actn.c_xchng_cd);
  strcpy(sql_undrlyng,st_pstn_actn.c_undrlyng);
  sql_prd_typ 	  = st_pstn_actn.c_prd_typ;
  sql_exer_typ 	  = st_pstn_actn.c_exrc_typ;
  sql_strike_prc  = st_pstn_actn.l_strike_prc;
  sql_opt_typ     = st_pstn_actn.c_opt_typ;
  sql_cntrct_tag  = st_pstn_actn.c_cntrct_tag;

 	 /***  Ver 1.7 Starts  ***/

  if(st_usr_prfl.c_user_id[0] != BPID && strcmp(st_usr_prfl.c_user_id ,"system")!=0)
  {
    i_is_dbc_cust = 0;

    EXEC SQL
        SELECT 1
            INTO :i_is_dbc_cust
        FROM  CLM_CLNT_MSTR
        WHERE CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
        AND   CLM_TRD_FLG = 'N'
        AND   CLM_BP_ID IS NOT NULL;

    if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
    {
      fn_errlog( c_ServiceName, "S31050",SQLMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if ( i_is_dbc_cust == 1 )
    {
      fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst, this facility has been Disabled");
      fn_errlog( c_ServiceName, "B35018", "", c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

  /***  Ver 1.7  Ends  ***/


	 /*** Ver 1.4 Starts ***/

	/*** Commented in Ver 1.9 ***
	if ( (strncmp(st_usr_prfl.c_cln_mtch_accnt, "750", 3)  == 0 ) ||
       (strncmp(st_usr_prfl.c_cln_mtch_accnt, "751", 3)  == 0 ) ||
       (strncmp(st_usr_prfl.c_cln_mtch_accnt, "650", 3)  == 0 ) ||
 	     (strncmp(st_usr_prfl.c_cln_mtch_accnt, "651", 3)  == 0 )
      )
  {
  	if(DEBUG_MSG_LVL_3)
   	{
    	fn_userlog(c_ServiceName,"NRI Customer Trying To Place  FuturePlus order.");
   	}

   	fn_errlog( c_ServiceName, "S31055", "This facility is not enabled for NRI customers", c_err_msg  );
   	strcpy(c_err_msg," This facility is not enabled for NRI customers.");
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	***/

  /*** Ver 1.4 Ends ***/	

/******************************* Ver 1.3 Starts ********************/

  if( strcmp(st_pstn_actn.c_xchng_cd,"BFO") == 0 && st_pstn_actn.c_prd_typ == 'F' )
  {
    fn_errlog( c_ServiceName, "S31060", "This facility is currently not enabled for BSE", c_err_msg);
    strcpy(c_err_msg,"This facility is currently not enabled for BSE.");
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

/****************************** Ver 1.3 Ends **********************/

	if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog( c_ServiceName,"st_xchngbook.c_xchng_cd   |%s|",st_xchngbook.c_xchng_cd);
    fn_userlog( c_ServiceName,"st_xchngbook.c_pipe_id		 |%s|	",st_xchngbook.c_pipe_id);
	}		

	fn_userlog( c_ServiceName, "CR-ISEC14-144377 Index/Stock :%c:",  st_pstn_actn.c_ctgry_indstk );   /*** Added in Ver 3.2 ***/

	EXEC SQL
     SELECT /*** MTM_ROLL_STTS Commented in Ver 3.2 ***/
						/*** DECODE added in Ver 3.2 ***/
						DECODE ( :st_pstn_actn.c_ctgry_indstk,'I',MTM_ROLL_STTS,'S',MTM_ROLL_STTS_S,'N' )
     INTO   :c_roll_stts
     FROM   MTM_APPLN_STTS
     WHERE  MTM_XCHNG_CD =  :st_xchngbook.c_xchng_cd
     AND    MTM_PIPE_ID  =  :st_xchngbook.c_pipe_id;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31065", SQLMSG,c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if (c_roll_stts == 'N' )
    {
      fn_errlog( c_ServiceName, "B31027",DEFMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		EXEC SQL
			SELECT NVL(FUM_FP_TRDNG_FLG,'N') 
			INTO   :c_fp_trdng_flg	
			FROM FUM_FO_UNDRLYNG_MSTR 
			WHERE FUM_UNDRLYNG = :st_pstn_actn.c_undrlyng 
			AND FUM_PRDCT_TYP  = decode(:st_pstn_actn.c_prd_typ,'P','F',:st_pstn_actn.c_prd_typ) /*** Ver 1.1 ***/ 
			AND FUM_XCHNG_CD	 = :st_pstn_actn.c_xchng_cd	;	

    if( (SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND) )
    {
      fn_errlog( c_ServiceName, "S31070", SQLMSG,c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		
		/*** Commented in ver 1.1 ***********
    if (c_fp_trdng_flg == 'N' )
		************************************/
		
		/*** Added in ver 1.1 ***/
		
		if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "c_fp_trdng_flg		:%c:", c_fp_trdng_flg);
		}
	
		if ( (c_fp_trdng_flg != 'T') || ( SQLCODE == NO_DATA_FOUND) )
    {
			fn_errlog( c_ServiceName, "B28513", DEFMSG,c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    /*** Ver 2.4 Starts ***/
   
    EXEC SQL
       SELECT FTQ_FP_QT_TRDNG_FLG,
              FTQ_MIN_LOT_QTY,
              FTQ_CNTRCT_TAG,
							NVL(FTQ_SETLMNT_FLG,'C')       /*** added in Ver 3.0 ***/
         INTO :c_fcm_trdng_flg,
              :l_lot_size,
              :c_cntrct_tag,
							:c_setlmnt_flg                 /*** added in Ver 3.0 ***/
         FROM FTQ_FO_TRD_QT
        WHERE FTQ_XCHNG_CD = :st_pstn_actn.c_xchng_cd
          AND FTQ_PRDCT_TYP = decode(:st_pstn_actn.c_prd_typ,'P','F',:st_pstn_actn.c_prd_typ)
          AND FTQ_UNDRLYNG  = :st_pstn_actn.c_undrlyng 
          AND FTQ_EXER_TYP  = :st_pstn_actn.c_exrc_typ 
          AND FTQ_EXPRY_DT  = to_date ( :st_pstn_actn.c_expry_dt,'dd-Mon-yyyy' );  

    /*** Ver 2.4 Ends   ***/

    /*** Commented in Ver 2.4  and columnn selected in below query is selected from FTQ in above select***	
		EXEC SQL
    SELECT fcm_fp_qt_trdng_flg   
    INTO   :c_fcm_trdng_flg
    FROM   fcm_fo_cntrct_mstr
    WHERE   fcm_xchng_cd = :st_pstn_actn.c_xchng_cd 
    AND     fcm_prdct_typ = decode(:st_pstn_actn.c_prd_typ,'P','F',:st_pstn_actn.c_prd_typ)
    AND     fcm_undrlyng = :st_pstn_actn.c_undrlyng
    AND     fcm_expry_dt = to_date ( :st_pstn_actn.c_expry_dt,'dd-Mon-yyyy' )
    AND     fcm_exer_typ = :st_pstn_actn.c_exrc_typ;
    ***/
  
    if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
    {
			fn_errlog( c_ServiceName, "S31075", SQLMSG,c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if(DEBUG_MSG_LVL_0)
    {
     fn_userlog(c_ServiceName,"FTQ FP QT TRDNG FLG :%c:",c_fcm_trdng_flg);
     fn_userlog(c_ServiceName,"FTQ Lot Size :%ld:",l_lot_size);
     fn_userlog(c_ServiceName,"FTQ Contract Tag :%c:",c_cntrct_tag);
     fn_userlog(c_ServiceName,"c_setlmnt_flg :%c:",c_setlmnt_flg);         /** Ver 3.0 **/
    } 

		if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "c_fcm_trdng_flg		:%c:", c_fcm_trdng_flg);
    }

		if ( (c_fcm_trdng_flg != 'T') || ( SQLCODE == NO_DATA_FOUND ) )
		{
			fn_userlog( c_ServiceName, "This Contract is not enable for Future Plus");
			fn_errlog( c_ServiceName, "B28514", DEFMSG,c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		} 

		/*** Ver 1.1 Ended ***/
		
		/*** Commented in Ver 2.2 **
	  if(st_usr_prfl.c_user_id[0] == BPID)
  	{
      if(Fget32(ptr_fml_Ibuf,FFO_ALIAS,0,(char *)c_alias,0) == -1)
      {
        fn_errlog( c_ServiceName, "S31080", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      }

			if( DEBUG_MSG_LVL_3 )
  		{
  	   	fn_userlog (c_ServiceName," Inside BPID Alias is |%s|",c_alias); 
			}

			i_level_exists = 0;
      
			EXEC SQL
        SELECT 1
        INTO   :i_level_exists
        FROM   CLM_CLNT_MSTR
        WHERE  CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
        AND    CLM_BP_ID      = :st_usr_prfl.c_user_id
        AND    CLM_ALIAS_NAME = :c_alias;

      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog(c_ServiceName,"BP alias  is :%s:",c_alias);
      }

      if(i_level_exists != 1 )
      {
            fn_errlog( c_ServiceName, "B55006", "", c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      }
      strcpy(c_bp_id,st_usr_prfl.c_user_id);
  	}
		** Ver 2.2 ** Comment Ends ***/

    if(st_usr_prfl.c_user_id[0] == BPID)       /*** Ver 2.2 ***/
    {
      strcpy(c_bp_id,st_usr_prfl.c_user_id);
    }
  	else
  	{
     	strcpy(c_bp_id,"*");
  	}
  
		if( DEBUG_MSG_LVL_3 )
  	{
    	fn_userlog(c_ServiceName,"The BP id is :%s: ,:%s:", c_bp_id,st_usr_prfl.c_user_id);
    	fn_userlog(c_ServiceName,"The Alias is :%s: ", c_alias);
  	}

	  EXEC SQL
  	SELECT TO_CHAR ( EXG_NXT_TRD_DT, 'yyyymmdd' ),
         	 TO_CHAR ( EXG_NXT_TRD_DT, 'mmddyyyy' ),    /**Added to avoid duplicate trd_rfrnc in FTD **/
         	 TO_CHAR ( EXG_NXT_TRD_DT, 'DD-Mon-yyyy' ),
         	 TO_CHAR ( sysdate, 'DD-Mon-yyyy hh24:mi:ss' )
  	INTO   :c_trd_ref,
       		 :c_trd_rfrnc,
       		 :c_trd_dt,
       		 :c_trd_tm
  	FROM EXG_XCHNG_MSTR, OPM_ORD_PIPE_MSTR
  	WHERE OPM_PIPE_ID =  :st_usr_prfl.c_pipe_id
  	AND EXG_XCHNG_CD = OPM_XCHNG_CD;

  	if ( SQLCODE != 0 )
  	{
    	fn_errlog( c_ServiceName, "S31085",SQLMSG,c_err_msg);
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	strcpy ( c_err_msg, "System error. Contact system support" );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}	

  	SETNULL ( c_trd_ref );
  	SETNULL ( c_trd_rfrnc);
  	SETNULL ( c_trd_dt );
  	SETNULL ( c_trd_tm );
  	SETLEN(c_trd_ref);
  	SETLEN(c_trd_rfrnc);

  	if( DEBUG_MSG_LVL_3 )
  	{
    	fn_userlog( c_ServiceName, "c_trd_ref = 	[%s]",c_trd_ref.arr);
    	fn_userlog( c_ServiceName, "c_trd_rfrnc = [%s]",c_trd_rfrnc.arr);
    	fn_userlog( c_ServiceName, "c_trd_tm = 		[%s]",c_trd_tm.arr);
    	fn_userlog( c_ServiceName, "c_trd_dt = 		[%s]",c_trd_dt.arr);
  	}
	
	
	  strcpy((char *)v_user_id.arr,st_usr_prfl.c_user_id);

		SETLEN(v_user_id);

		if(DEBUG_MSG_LVL_3)
		{
  		fn_userlog(c_ServiceName,"st_usr_prfl.c_user_id IS  :%s:", st_usr_prfl.c_user_id);
  		fn_userlog(c_ServiceName,"v_user_id IS  :%s:", v_user_id.arr );
		}
		
		if ( strcmp((char *)v_user_id.arr,"system") == 0 )
		{
  		if(DEBUG_MSG_LVL_3)
  		{
  			fn_userlog(c_ServiceName,"SYSTEM Convert");
  		}
 			EXEC SQL  SELECT  DECODE(NVL(CLM_BP_ID,'*'),'*',UAC_USR_ID,CLM_BP_ID)
    		        INTO    :v_user_id
      		      FROM    UAC_USR_ACCNTS, CLM_CLNT_MSTR
        		    WHERE   CLM_MTCH_ACCNT      = :st_usr_prfl.c_cln_mtch_accnt
          		  AND     UAC_CLM_MTCH_ACCNT  = CLM_MTCH_ACCNT;

  		if(( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
  		{
    		fn_errlog( c_ServiceName, "S31090", SQLMSG, c_err_msg  );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}

  		SETNULL(v_user_id);
  		if(DEBUG_MSG_LVL_3)
  		{
  			fn_userlog(c_ServiceName,"BP ID IS  :%s:", v_user_id.arr);
  		}
		}

		EXEC SQL  SELECT  USR_DT_ALLWD_FLG
    		      INTO    :sql_usr_dt_allwd_flg
        		  FROM    USR_USER_MASTER
          		WHERE   USR_USR_ID  = :v_user_id;

		if( SQLCODE != 0 )
		{
  		fn_errlog( c_ServiceName, "S31095", SQLMSG, c_err_msg  );
  		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if( sql_usr_dt_allwd_flg != 'Y' )
		{
  		MEMSET(v_user_id);
		}

		if(DEBUG_MSG_LVL_3)
		{
  		fn_userlog(c_ServiceName,"DT ALLOWED FLAG IS  :%c:", sql_usr_dt_allwd_flg);
  		fn_userlog(c_ServiceName,"USER ID IS  :%s:", v_user_id.arr);
		}

		if( strcmp(st_usr_prfl.c_user_id ,"system")!=0 && st_usr_prfl.l_session_id != 0) 
  	{
      /*** Commented in Ver 2.4 and below column is selected in FTQ select statement above ***
    	EXEC SQL
      	SELECT FCM_LOT_SZ
      	INTO   :l_lot_size
      	FROM   FCM_FO_CNTRCT_MSTR
      	WHERE  FCM_PRDCT_TYP = 'F'
      	AND    FCM_XCHNG_CD = :st_pstn_actn.c_xchng_cd
      	AND    FCM_UNDRLYNG = :st_pstn_actn.c_undrlyng
      	AND    FCM_EXPRY_DT = :st_pstn_actn.c_expry_dt;

    	if ( SQLCODE != 0 )
    	{
      	fn_errlog( c_ServiceName, "S31100",SQLMSG,c_err_msg);
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	strcpy ( c_err_msg, "System error. Contact system support" );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
      ***/     

    	if( st_pstn_actn.l_new_qty%l_lot_size != 0 )
    	{
      	fn_errlog( c_ServiceName, "B31030",DEFMSG, c_err_msg  );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
  	}
 	
	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  
	if ( i_trnsctn == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /* i_returncode = fn_lock_usr( c_ServiceName, st_pstn_actn.c_cln_mtch_accnt ); ** Ver 3.5 ***/
  i_returncode = fn_lock_fno( c_ServiceName, st_pstn_actn.c_cln_mtch_accnt ); 	/** Ver 3.5 ***/
  
	if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if( strcmp(st_usr_prfl.c_user_id ,"system")==0 && st_usr_prfl.l_session_id == 0)
  {
    fn_userlog(c_ServiceName,"Calling from batch");
    st_pstn_actn.l_actn_typ = CONV_TO_FUTPLS;
    st_pstn_actn.l_new_qty = 0;
  }
  else
  {
    fn_userlog(c_ServiceName,"Calling from Fron End");
    st_pstn_actn.l_actn_typ = CONV_TO_PART_FUTPLS;
  }

	if( DEBUG_MSG_LVL_3 )
  {
		fn_userlog(c_ServiceName," Lot Size Is |%ld|",l_lot_size );
  	fn_userlog(c_ServiceName,"The new quantity is :%ld:", st_pstn_actn.l_new_qty);
	}
	
	st_pstn_actn.c_trnsctn_flw  = '*';
  st_pstn_actn.l_orgnl_qty 		= 0;
  st_pstn_actn.l_orgnl_rt  		= 0;
  st_pstn_actn.l_new_rt  			= 0;
  st_pstn_actn.l_exec_qty  		= 0;
  st_pstn_actn.l_exec_rt  		= 0;
  st_pstn_actn.l_fresh_qty  	= 0;
  st_pstn_actn.l_cover_qty  	= 0;
  st_pstn_actn.d_add_mrgn_amt = 0;

  st_pstn_actn.c_nkd_blkd_flg = c_spl_flag ;
/******** Ver 1.2 Starts ********/

  if(DEBUG_MSG_LVL_3)
  {
  fn_userlog(c_ServiceName,"Checking for available position");
  }

	/*** Ver 1.6 starts ***/
  EXEC SQL
    SELECT NVL(CLM_SPAN_ALLWD,'N')
    INTO   :c_span_flg
    FROM   CLM_CLNT_MSTR
    WHERE  CLM_MTCH_ACCNT = :st_pstn_actn.c_cln_mtch_accnt;

  if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
  {
     fn_userlog ( c_ServiceName, " Error while selecting SPAN flag ");
   	 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     fn_errlog( c_ServiceName, "S31105", SQLMSG, c_err_msg  );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	/*** Ver 1.6 Ends ***/

	if ( c_span_flg == 'N')   /*** Condition Added in ver 1.6 ***/ 
	{
		fn_userlog(c_ServiceName,"st_pstn_actn.c_cln_mtch_accnt Is :%s:",st_pstn_actn.c_cln_mtch_accnt);
		fn_userlog(c_ServiceName,"st_pstn_actn.c_xchng_cd Is :%s:",st_pstn_actn.c_xchng_cd);
		fn_userlog(c_ServiceName,"st_pstn_actn.c_prd_typ IS :%c:",st_pstn_actn.c_prd_typ);
		fn_userlog(c_ServiceName,"st_pstn_actn.c_ctgry_indstk Is :%c:",st_pstn_actn.c_ctgry_indstk);
		fn_userlog(c_ServiceName,"st_pstn_actn.c_undrlyng Is :%s:",st_pstn_actn.c_undrlyng);
		fn_userlog(c_ServiceName,"st_pstn_actn.c_expry_dt Is :%s:",st_pstn_actn.c_expry_dt);
		fn_userlog(c_ServiceName,"st_pstn_actn.c_exrc_typ Is :%c:",st_pstn_actn.c_exrc_typ);
		fn_userlog(c_ServiceName,"st_pstn_actn.c_cntrct_tag Is :%c:",st_pstn_actn.c_cntrct_tag);

  	EXEC SQL
		/***	Commented In Ver 2.1	
  	SELECT ABS(FFP_OPNPSTN_QTY)- DECODE(FFP_OPNPSTN_FLW,'B',ABS(FFP_ISELL_QTY),'S',FFP_IBUY_QTY)	***/

		SELECT ABS(FFP_OPNPSTN_QTY)- DECODE(FFP_OPNPSTN_FLW,'S',GREATEST(ABS(FFP_IBUY_QTY),ABS(FFP_EXBUY_QTY)),'B',GREATEST(ABS(FFP_ISELL_QTY), ABS(FFP_EXSELL_QTY)),0) /***  Added In Ver 2.1  ***/
  	INTO :l_qty
  	FROM FFP_FO_FUTURES_PSTN
  	WHERE FFP_CLM_MTCH_ACCNT =:st_pstn_actn.c_cln_mtch_accnt
  	AND FFP_XCHNG_CD  =:st_pstn_actn.c_xchng_cd
  	AND FFP_PRDCT_TYP =:st_pstn_actn.c_prd_typ
  	AND FFP_INDSTK =  :st_pstn_actn.c_ctgry_indstk
  	AND FFP_UNDRLYNG = :st_pstn_actn.c_undrlyng
  	AND FFP_EXPRY_DT = :st_pstn_actn.c_expry_dt
  	AND FFP_EXER_TYP = :st_pstn_actn.c_exrc_typ
  	AND FFP_CNTRCT_TAG = :st_pstn_actn.c_cntrct_tag;

  	if( SQLCODE !=0 )
  	{
   		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	fn_errlog( c_ServiceName, "S31110", SQLMSG, c_err_msg );
   		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
	}
	else if ( c_span_flg == 'Y' || c_span_flg == 'Z' )  /*** Ver 1.6 ***/
	{
		EXEC SQL
		/***	Commented In Ver 2.1
    SELECT ABS(FCP_OPNPSTN_QTY) - DECODE(FCP_OPNPSTN_FLW,'B',ABS(FCP_ISELL_QTY),'S',FCP_IBUY_QTY) ***/
    SELECT ABS(FCP_OPNPSTN_QTY) - DECODE(FCP_OPNPSTN_FLW,'S',GREATEST(ABS(FCP_IBUY_QTY),ABS(FCP_EXBUY_QTY)),'B',
                     GREATEST( ABS(FCP_ISELL_QTY), ABS(FCP_EXSELL_QTY)),0)			/***	Added In Ver 2.1	***/
    INTO :l_qty
    FROM FCP_FO_SPN_CNTRCT_PSTN
    WHERE FCP_CLM_MTCH_ACCNT 	=:st_pstn_actn.c_cln_mtch_accnt
    AND FCP_XCHNG_CD  			 	=:st_pstn_actn.c_xchng_cd
    AND FCP_PRDCT_TYP 				=:st_pstn_actn.c_prd_typ
    AND FCP_INDSTK 						=:st_pstn_actn.c_ctgry_indstk
    AND FCP_UNDRLYNG 					=:st_pstn_actn.c_undrlyng
    AND FCP_EXPRY_DT 					=:st_pstn_actn.c_expry_dt
    AND FCP_EXER_TYP 					=:st_pstn_actn.c_exrc_typ;

    if( SQLCODE !=0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S31115", SQLMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	}
	else
	{
		fn_userlog ( c_ServiceName, " Invalid SPAN flag ");
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog( c_ServiceName, "S31120", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	/**** Ver 1.6 Ends ***/
	
	/*** Commented In  Ver 2.0

	if(l_qty < st_pstn_actn.l_new_qty || l_qty == 0 || st_pstn_actn.l_new_qty == 0)
	
	*********************/
	
	if( l_qty == 0 || st_pstn_actn.l_new_qty == 0)			/***	Ver 2.0	***/
  {
  	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  	fn_userlog(c_ServiceName, "Invalid Quantity");
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,"Invalid Quantity",0);
  	fn_errlog( c_ServiceName, "B24507", "", c_err_msg  );
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if(l_qty < st_pstn_actn.l_new_qty )			/***	Ver 2.0	***/
	{
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  	fn_userlog(c_ServiceName, "Quantity Entered Can Not Be Greater Than Open Position Quantity.");
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,"Quantity Entered Can Not Be Greater Than Open Position Quantity.",0);
  	fn_errlog( c_ServiceName, "B24507", "", c_err_msg  );
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  /****** Ver 1.2 Ends ***/


  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog( c_ServiceName, "Pstn Actn Single/Joint Flag :%c:", st_pstn_actn.c_nkd_blkd_flg);
    fn_userlog( c_ServiceName, "Pstn Actn Expiry date       :%s:", st_pstn_actn.c_expry_dt );

    fn_userlog(c_ServiceName , "Processing match a/c - [%s], Underlying - [%s], Expiry date - [%s], Tag - [%c] ",
        												st_pstn_actn.c_cln_mtch_accnt,
        												st_pstn_actn.c_undrlyng,
        												st_pstn_actn.c_expry_dt,
        												st_pstn_actn.c_cntrct_tag );
  }
	
  fn_cpy_ddr(st_pstn_actn.c_rout_crt);
	
	if( DEBUG_MSG_LVL_3 )
  {
		fn_userlog( c_ServiceName,"st_pstn_actn.c_rout_crt |%s|",st_pstn_actn.c_rout_crt);
	}

  i_ip_len = sizeof ( struct vw_pstn_actn );
  i_op_len = sizeof ( struct vw_pstn_actn );

	if ( c_span_flg == 'N' )  /*** Condition Added in ver 1.6 ***/
	{
		if( DEBUG_MSG_LVL_3 )
  	{
			fn_userlog( c_ServiceName," Mahesh Before Call To SFO_UPD_FUT_POS");
 		}

		i_returncode = fn_call_svc( c_ServiceName,
                              	c_err_msg,
                              	&st_pstn_actn,
                              	&st_pstn_actn,
                              	"vw_pstn_actn",
                              	"vw_pstn_actn",
                              	i_ip_len,
                              	i_op_len,
                              	0,
                              	"SFO_UPD_FUT_POS" );

		if ( i_returncode != SUCC_BFR )
  	{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	fn_errlog( c_ServiceName, "S31125", LIBMSG, c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
	}
	else if ( c_span_flg =='Y' || c_span_flg == 'Z')  /*** Condition Added in Ver 1.6 ***/
	{
		if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog( c_ServiceName," Mahesh Before Call To SFO_SPN_CNV_2FP");
    }

    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_pstn_actn,
                                &st_pstn_actn,
                                "vw_pstn_actn",
                                "vw_pstn_actn",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_SPN_CNV_2FP" );

    if ( i_returncode != SUCC_BFR )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S31130", LIBMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	}
	else
	{
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog( c_ServiceName, "S31135", LIBMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}	

	/*** Added in ver 1.6 ***/
 
  /*** Commented in Ver 2.4 and below column is selected in FTQ select statement above ***
	EXEC SQL
      SELECT  FCM_CNTRCT_TAG
      INTO    :c_cntrct_tag
      FROM    FCM_FO_CNTRCT_MSTR
      WHERE   FCM_XCHNG_CD        = :st_pstn_actn.c_xchng_cd
      AND     FCM_PRDCT_TYP       = :st_pstn_actn.c_prd_typ
      AND     FCM_UNDRLYNG        = :st_pstn_actn.c_undrlyng
      AND     FCM_EXPRY_DT        = to_date( :st_pstn_actn.c_expry_dt,'dd-mon-yyyy' )
      AND     FCM_EXER_TYP        = :st_pstn_actn.c_exrc_typ;

  if ( SQLCODE != 0 )
  {
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog( c_ServiceName, "S31140", LIBMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
	}
  ***/ 

  fn_userlog(c_ServiceName,"st_pstn_actn.c_cntrct_tag=:%c: c_cntrct_tag=:%c:",st_pstn_actn.c_cntrct_tag,c_cntrct_tag);
	st_pstn_actn.c_cntrct_tag = c_cntrct_tag;	

	/*** Ver 1.6 Ends ***/

	if( DEBUG_MSG_LVL_3 )
  {
		fn_userlog( c_ServiceName," After Call To SFO_UPD_FUT_POS");
		fn_userlog( c_ServiceName," st_pstn_actn.c_cln_mtch_accnt    |%s|",st_pstn_actn.c_cln_mtch_accnt);
		fn_userlog( c_ServiceName," st_pstn_actn.c_xchng_cd					 |%s|",st_pstn_actn.c_xchng_cd);
		fn_userlog( c_ServiceName," st_pstn_actn.c_prd_typ					 |%c|",st_pstn_actn.c_prd_typ);
		fn_userlog( c_ServiceName," st_pstn_actn.c_ctgry_indstk			 |%c|",st_pstn_actn.c_ctgry_indstk);
		fn_userlog( c_ServiceName," st_pstn_actn.c_undrlyng					 |%s|",st_pstn_actn.c_undrlyng);
		fn_userlog( c_ServiceName," st_pstn_actn.c_exrc_typ					 |%c|",st_pstn_actn.c_exrc_typ);
		fn_userlog( c_ServiceName," st_pstn_actn.c_opt_typ					 |%c|",st_pstn_actn.c_opt_typ);
		fn_userlog( c_ServiceName," st_pstn_actn.l_strike_prc				 |%ld|",st_pstn_actn.l_strike_prc);
		fn_userlog( c_ServiceName," st_pstn_actn.c_cntrct_tag				 |%c|",st_pstn_actn.c_cntrct_tag);
 	}

	EXEC SQL
  	DECLARE cur_updbk cursor for
  	SELECT FFF_CLM_MTCH_ACCNT,
           FFF_XCHNG_CD,
           FFF_PRDCT_TYP,
           FFF_INDSTK,
           FFF_UNDRLYNG,
           FFF_EXPRY_DT,
           FFF_EXER_TYP,
         	 FFF_OPT_TYP,
         	 FFF_STRK_PRC,
         	 FFF_ORDR_FLW,
         	 FFF_CLS_QTY,
         	 FFF_CLS_RT
  	FROM   FFF_FO_FUT_FPLSCNV
  	WHERE  FFF_CLM_MTCH_ACCNT = :st_pstn_actn.c_cln_mtch_accnt
  	AND    FFF_XCHNG_CD       = :st_pstn_actn.c_xchng_cd
  	AND    FFF_PRDCT_TYP      = :st_pstn_actn.c_prd_typ
  	AND    FFF_INDSTK         = :st_pstn_actn.c_ctgry_indstk
  	AND    FFF_UNDRLYNG       = :st_pstn_actn.c_undrlyng
  	AND    FFF_EXER_TYP       = :st_pstn_actn.c_exrc_typ
  	AND    FFF_OPT_TYP        = :st_pstn_actn.c_opt_typ
  	AND    FFF_STRK_PRC       = :st_pstn_actn.l_strike_prc
  	AND    FFF_CNTRCT_TAG     = :st_pstn_actn.c_cntrct_tag
  	AND    FFF_UPLD_FLG       = 'N'
  	ORDER BY FFF_EXPRY_DT ASC ;

  EXEC SQL
  OPEN cur_updbk;
  
	if(SQLCODE != 0)
  {
    EXEC SQL CLOSE cur_updbk;
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog( c_ServiceName, "S31145", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

  }

	if( DEBUG_MSG_LVL_3 )
  {
		fn_userlog(c_ServiceName ,"Before While Loop");
	}

 	while(1)
  {
    EXEC SQL
    FETCH cur_updbk
    INTO :st_orderbook.c_cln_mtch_accnt,
         :st_orderbook.c_xchng_cd,
         :st_orderbook.c_prd_typ,
         :st_orderbook.c_ctgry_indstk,
         :st_orderbook.c_undrlyng,
         :st_orderbook.c_expry_dt,
         :st_orderbook.c_exrc_typ,
         :st_orderbook.c_opt_typ,
         :st_orderbook.l_strike_prc,
         :st_orderbook.c_ordr_flw,
         :st_orderbook.l_ord_tot_qty,
         :st_orderbook.l_ord_lmt_rt;

    if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
    {
      EXEC SQL CLOSE cur_updbk;
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S31150", LIBMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if ( SQLCODE == NO_DATA_FOUND )
    {
      break;
    }
		
    rtrim  (st_xchngbook.c_rqst_tm);
		
		if( DEBUG_MSG_LVL_3 )
  	{
			fn_userlog(c_ServiceName ," Before For Loop");
		}

    for ( i_count = 0; i_count <= 1; i_count++)
    {
			if( DEBUG_MSG_LVL_3 )
  		{
				fn_userlog(c_ServiceName ," INSIDE For Loop i_count |%d|",i_count);
      }

			if( i_count == 1)
      {
        st_orderbook.c_prd_typ = FUTURE_PLUS;
				
				/*************** Commented in Ver 1.8 **********
        if( st_orderbook.c_ordr_flw == BUY )
            st_orderbook.c_ordr_flw = SELL;
        else
            st_orderbook.c_ordr_flw = BUY;
				
				*************** Ver 1.8 ************************/
      }

			/******** Added in Ver 1.8 *********/

			if( st_orderbook.c_ordr_flw == BUY )
          st_orderbook.c_ordr_flw = SELL;
      else
          st_orderbook.c_ordr_flw = BUY;

			/****** Ver 1.8 Ends *********/

      strcpy ( st_xchngbook.c_mod_trd_dt,(char *) c_trd_dt.arr);
      strcpy ( st_xchngbook.c_valid_dt, (char *)c_trd_dt.arr );
      strcpy ( st_xchngbook.c_ack_tm, (char *)c_trd_tm.arr);
      strcpy ( st_xchngbook.c_rqst_tm, (char *)c_trd_tm.arr);
      strcpy ( st_xchngbook.c_qt_tm, (char *)c_trd_tm.arr);
      strcpy ( st_xchngbook.c_pipe_id, st_usr_prfl.c_pipe_id );

      i_ip_len = sizeof ( struct vw_sequence );
      i_op_len = sizeof ( struct vw_sequence );

	  	strcpy( st_s_sequence.c_pipe_id, st_xchngbook.c_pipe_id);
      strcpy( st_s_sequence.c_trd_dt, st_xchngbook.c_mod_trd_dt );
      st_s_sequence.c_rqst_typ = GET_XCHNG_SEQ;


      fn_cpy_ddr ( st_s_sequence.c_rout_crt );
 
			 /***** Commented in Ver 2.8 ***
	    i_returncode = fn_call_svc( c_ServiceName,
                                  c_err_msg,
                                  &st_s_sequence,
                                  &st_r_sequence,
                                  "vw_sequence",
                                  "vw_sequence",
                                  i_ip_len,
                                  i_op_len,
                                  0,
                                  "SFO_GET_SEQ" );
        commment end in Ver 2.8 ****/
      /***** Ver 2.8 Starts here ************/
      i_returncode = fn_get_seq(c_ServiceName,c_err_msg,st_s_sequence.c_pipe_id,&l_seq_num,st_s_sequence.c_rqst_typ);
      /******* Ver 2.8 Ends Here *******/
		  if ( i_returncode != SUCC_BFR )
      {
        EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31155", LIBMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
  		if(DEBUG_MSG_LVL_3)
  		{
	      fn_userlog(c_ServiceName,"Sequence number is *****:%ld:",l_seq_num); /** Ver 2.8 **/
  		}
      st_r_sequence.l_seq_num=l_seq_num; /*** Ver 2.8***/
      l_xchng_seq_num = st_r_sequence.l_seq_num;

      strcpy( st_s_sequence.c_pipe_id, st_xchngbook.c_pipe_id);
      strcpy( st_s_sequence.c_trd_dt, st_xchngbook.c_mod_trd_dt );
      st_s_sequence.c_rqst_typ = GET_ORDER_SEQ;

      fn_cpy_ddr ( st_s_sequence.c_rout_crt );
      
			i_returncode = fn_call_svc( c_ServiceName,
                                  c_err_msg,
                                  &st_s_sequence,
                                  &st_r_sequence,
                                  "vw_sequence",
                                  "vw_sequence",
                                  i_ip_len,
                                  i_op_len,
                                  0,
                                  "SFO_GET_SEQ" );

      if ( i_returncode != SUCC_BFR )
      {
        EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31160", LIBMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      l_ord_seq_num = st_r_sequence.l_seq_num;

      sprintf( c_seq_num, "%08d", l_ord_seq_num );
      strcpy( st_xchngbook.c_ordr_rfrnc, (char *)c_trd_ref.arr );
      strcat( st_xchngbook.c_ordr_rfrnc, st_xchngbook.c_pipe_id );
      strcat( st_xchngbook.c_ordr_rfrnc, c_seq_num );
      strcpy( st_orderbook.c_ordr_rfrnc, st_xchngbook.c_ordr_rfrnc);

      strcpy( st_xchngbook.c_xchng_cd,st_orderbook.c_xchng_cd );

      st_xchngbook.l_ord_seq = l_xchng_seq_num;
      st_xchngbook.c_slm_flg = LIMIT;
      st_xchngbook.c_rms_prcsd_flg = PROCESSED;

      st_xchngbook.l_dsclsd_qty = 0;
      st_xchngbook.l_ord_tot_qty = st_orderbook.l_ord_tot_qty;
      st_xchngbook.l_ord_lmt_rt = st_orderbook.l_ord_lmt_rt;
      st_xchngbook.l_stp_lss_tgr = 0;
      st_xchngbook.l_mdfctn_cntr = 1;

      st_xchngbook.c_ord_typ = GOOD_TILL_TODAY;
      st_xchngbook.c_sprd_ord_ind = '*';

      st_xchngbook.c_req_typ = NEW;
      st_xchngbook.l_quote = 0;

      st_xchngbook.c_plcd_stts = ACCEPT;

      strcpy(st_xchngbook.c_xchng_rmrks, "Converted from Future to FuturesPlus ");
      st_xchngbook.d_jiffy = 0;
      st_xchngbook.l_dwnld_flg = NOT_DOWNLOAD;

      st_xchngbook.c_ex_ordr_typ = ORDINARY_ORDER;

      st_xchngbook.c_spl_flg = NORMAL_ORDER;

      i_ip_len = sizeof ( struct vw_xchngbook );
      i_op_len = sizeof ( struct vw_xchngbook );

      st_xchngbook.c_oprn_typ = UPDATION_ON_FUT_CONVERSION;

      fn_cpy_ddr ( st_xchngbook.c_rout_crt );
			/*********** Commented in Ver 2.8 *****
      i_returncode = fn_call_svc( c_ServiceName,
                                  c_err_msg,
                                  &st_xchngbook,
                                  &st_xchngbook,
                                  "vw_xchngbook",
                                  "vw_xchngbook",
                                  i_ip_len,
                                  i_op_len,
                                  0,
                                  "SFO_UPD_XCHNGBK" );
      *********** Ver 2.8 Comment Ends **********************/
      /********* Ver 2.8 Starts ***************/

      i_returncode= fn_upd_xchngbk(c_ServiceName,&st_xchngbook,NULL,NULL,c_err_msg,0,0,0,0,0,'N',st_usr_prfl.l_session_id); /**Ver 3.4**/

      /********* ver 2.8 Ends *************/

      if ( i_returncode != SUCC_BFR )
      {
        EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31165", LIBMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }


      EXEC SQL
        SELECT  CLM_CLNT_CTGRY_ID
        INTO    :st_orderbook.l_clnt_ctgry
        FROM    CLM_CLNT_MSTR
        WHERE   CLM_MTCH_ACCNT = :st_orderbook.c_cln_mtch_accnt;

      if ( SQLCODE != 0 )
      {
        EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31170", LIBMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      EXEC SQL
        SELECT  CCG_PRO_CLI_IND
        INTO    :st_orderbook.c_pro_cli_ind
        FROM    CCG_CLNT_CTGRY
        WHERE   CCG_CLNT_CTGRY_ID = :st_orderbook.l_clnt_ctgry;

      if ( SQLCODE != 0 )
      {
        EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31175", LIBMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      strcpy( st_orderbook.c_pipe_id, st_xchngbook.c_pipe_id );
      st_orderbook.c_slm_flg = LIMIT;

      st_orderbook.l_dsclsd_qty = 0;
      st_orderbook.l_stp_lss_tgr = 0;
      st_orderbook.c_ord_typ = GOOD_TILL_TODAY;
      strcpy(st_orderbook.c_valid_dt, (char *) c_trd_dt.arr);
      strcpy( st_orderbook.c_trd_dt, (char *) c_trd_dt.arr);
      st_orderbook.c_ordr_stts = EXECUTED;

      st_orderbook.l_exctd_qty = st_orderbook.l_ord_tot_qty;
      st_orderbook.l_can_qty = 0;
      st_orderbook.l_exprd_qty = 0;
      st_orderbook.l_mdfctn_cntr = 1;

      EXEC SQL
        SELECT TO_CHAR(sysdate,'yymmdd')||LPAD(CORP_ACTN_SEQ.NEXTVAL,10,0)
        INTO   :c_xchng_ack
        FROM   DUAL ;
        
				if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
        {
          EXEC SQL CLOSE cur_updbk;
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          fn_errlog( c_ServiceName, "S31180", LIBMSG, c_err_msg );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

      strcpy( st_orderbook.c_xchng_ack ,c_xchng_ack );
      st_orderbook.c_spl_flg = NORMAL_ORDER;
      strcpy ( st_orderbook.c_ack_tm, st_xchngbook.c_ack_tm);
      strcpy ( st_orderbook.c_prev_ack_tm, (char *)c_trd_tm.arr);
      st_orderbook.l_exctd_qty_day = st_orderbook.l_exctd_qty;
      strcpy( st_orderbook.c_bp_id, c_bp_id );

      strcpy( st_orderbook.c_user_id,st_usr_prfl.c_user_id);
      strcpy( st_orderbook.c_ctcl_id,c_ctcl_id);

			if( DEBUG_MSG_LVL_3 )
  		{
      	fn_userlog(c_ServiceName,"The channel is:%s:",st_orderbook.c_channel);
      	fn_userlog(c_ServiceName,"st_orderbook.c_prev_ack_tm is:%s:",st_orderbook.c_prev_ack_tm);
      	fn_userlog(c_ServiceName,"st_orderbook.c_ack_tm is:%s:",st_orderbook.c_ack_tm);
      	fn_userlog(c_ServiceName,"st_xchngbook.c_ack_tm is:%s:",st_xchngbook.c_ack_tm);
			}

      /* Update Orderbook */

      i_ip_len = sizeof ( struct vw_orderbook );
      i_op_len = sizeof ( struct vw_orderbook );

      st_orderbook.c_oprn_typ = UPDATE_FUT_CONVERSION;

			strcpy((char*)v_user_id_bkup.arr,st_orderbook.c_user_id);
			SETLEN(v_user_id_bkup);
			strcpy(st_orderbook.c_user_id,(char *)v_user_id.arr);

			if(DEBUG_MSG_LVL_3)
			{
					fn_userlog(c_ServiceName,"v_user_id_bkup is   :%s:",v_user_id_bkup.arr);
					fn_userlog(c_ServiceName,"st_orderbook.c_user_id is   :%s:",st_orderbook.c_user_id);
					fn_userlog(c_ServiceName,"CALLING SFO_UPD_ORDRBK");
			}
		
			/** Ver 1.5 Starts  **/
			i_returncode  = fn_chk_dtallwd  ( c_ServiceName,
                                        &st_usr_prfl,
                                       	c_user_id, 
                                        &st_err_msg
                                      );


      if ( i_returncode != 0 )
      {
        fn_userlog(c_ServiceName,"Error While Selecting DL Set Up No. ");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"User ID from DT allowed function Is :%s:",c_user_id);
        fn_userlog(c_ServiceName," st_orderbook.c_user_id :%s:",st_orderbook.c_user_id);
			
      }
		
    /*** Ver 2.9 Starts ***/
        EXEC SQL
        SELECT  NVL(ICD_PAN_NO,'*')
        INTO    :v_pan_no
        FROM    ICD_INFO_CLIENT_DTLS,
                IAI_INFO_ACCOUNT_INFO
        WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
        AND     IAI_MATCH_ACCOUNT_NO  =	:st_orderbook.c_cln_mtch_accnt; 

      if ( SQLCODE != 0 )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31185", LIBMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
			SETNULL(v_pan_no);
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Fetched Pan is :%s:",v_pan_no.arr);
			}
			if (v_pan_no.len != 10)
    	{
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog( c_ServiceName, "B91176", DEFMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    /*** Ver 2.9 Ends ***/
	
			i_returncode  = fn_ins_ordrbook ( c_ServiceName,
                                      c_user_id,
                                      &st_orderbook,
																			c_span_flg,					/*** Ver 1.6 ***/
																			v_pan_no.arr,				/*** Added In Ver 2.9 ***/
																			c_setlmnt_flg,      /*** Added in Ver 3.0 ***/
                                      &st_err_msg
                                    );

    	if ( i_returncode != 0 )
    	{
      	fn_errlog( c_ServiceName, "S31190", LIBMSG, c_err_msg  );
      	fn_userlog(c_ServiceName,"Error while inserting into order book ");
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

      /** Ver 1.5 Ends **/

  		/*** Ver 2.3 Starts ***/
      fn_userlog(c_ServiceName,"st_tradebook.l_exctd_qty :%ld:",st_tradebook.l_exctd_qty);
      fn_userlog(c_ServiceName,"st_tradebook.l_exctd_rt :%ld:", st_tradebook.l_exctd_rt);
			fn_userlog(c_ServiceName,"st_orderbook.c_ordr_rfrnc :%s:",st_orderbook.c_ordr_rfrnc);

   		EXEC SQL
        	 UPDATE  fod_fo_ordr_dtls
           SET     fod_trd_val = NVL(fod_trd_val,0) + (:st_tradebook.l_exctd_qty * :st_tradebook.l_exctd_rt)
        	 WHERE   fod_ordr_rfrnc      = :st_orderbook.c_ordr_rfrnc;

  		if ( SQLCODE != 0 )
  		{
        EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31195", LIBMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   		}

  		/*** Ver 2.3 Ends **/

			/** Commented in Ver 1.5 **

      fn_cpy_ddr ( st_orderbook.c_rout_crt );
      	
			i_returncode = fn_call_svc( c_ServiceName,
                                  c_err_msg,
                                  &st_orderbook,
                                  &st_orderbook,
                                  "vw_orderbook",
                                  "vw_orderbook",
                                  i_ip_len,
                                  i_op_len,
                                  0,
                                "SFO_UPD_ORDRBK" );

      if ( i_returncode != SUCC_BFR )
      {
        EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31200", LIBMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
			******/

      strcpy ( st_s_sequence.c_pipe_id, st_orderbook.c_pipe_id );
      strcpy ( st_s_sequence.c_trd_dt,st_xchngbook.c_mod_trd_dt );
      fn_cpy_ddr(st_s_sequence.c_rout_crt);
      st_s_sequence.c_rqst_typ = GET_TRD_SEQ;
      
			i_returncode = fn_call_svc ( c_ServiceName,
     		                           c_err_msg,
         		                       &st_s_sequence,
             		                   &st_s_sequence,
                 		               "vw_sequence",
                     		           "vw_sequence",
                         		       sizeof ( st_s_sequence),
                             		   sizeof ( st_s_sequence),
                               		 0,
                               		 "SFO_GET_SEQ" );

      if ( i_returncode != SUCC_BFR )
      {
        EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31205", LIBMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

			if( DEBUG_MSG_LVL_3 )
  		{
      	fn_userlog(c_ServiceName,"st_tradebook.c_trd_rfrnc:%s",c_trd_rfrnc.arr);
      	fn_userlog(c_ServiceName,"st_usr_prfl.c_pipe_id:%s",st_usr_prfl.c_pipe_id);
      	fn_userlog(c_ServiceName,"st_s_sequence.l_seq_num:%ld",st_s_sequence.l_seq_num);
			
      }

   		sprintf ( st_tradebook.c_trd_rfrnc, "%s%s%08ld",( char * )c_trd_rfrnc.arr, st_usr_prfl.c_pipe_id, st_s_sequence.l_seq_num );

      strcpy ( st_tradebook.c_cln_mtch_accnt , st_orderbook.c_cln_mtch_accnt );
      strcpy ( st_tradebook.c_xchng_cd , st_orderbook.c_xchng_cd );
      st_tradebook.c_prd_typ = st_orderbook.c_prd_typ;
      strcpy ( st_tradebook.c_undrlyng , st_orderbook.c_undrlyng );
      strcpy ( st_tradebook.c_expry_dt , st_orderbook.c_expry_dt );
      st_tradebook.c_exrc_typ = st_orderbook.c_exrc_typ;
      st_tradebook.c_opt_typ = st_orderbook.c_opt_typ;
      st_tradebook.l_strike_prc = st_orderbook.l_strike_prc;
      st_tradebook.c_ctgry_indstk = st_orderbook.c_ctgry_indstk;
      strcpy ( st_tradebook.c_ordr_rfrnc , st_orderbook.c_ordr_rfrnc );
      strcpy ( st_tradebook.c_xchng_ack , st_orderbook.c_xchng_ack );
      st_tradebook.l_xchng_trd_no = st_s_sequence.l_seq_num;
      strcpy ( st_tradebook.c_trd_dt , st_xchngbook.c_ack_tm);
      st_tradebook.c_trd_flw = st_orderbook.c_ordr_flw;
      st_tradebook.l_exctd_qty = st_orderbook.l_exctd_qty;
      st_tradebook.l_exctd_rt = st_orderbook.l_ord_lmt_rt;
      st_tradebook.d_jiffy = 0;
      st_tradebook.l_dwnld_flg = NOT_DOWNLOAD;
      st_tradebook.l_ca_lvl = 99;   

      strcpy( st_tradebook.c_user_id,(char *)v_user_id.arr); 

      fn_cpy_ddr(st_tradebook.c_rout_crt);

      st_tradebook.c_oprn_typ = INSERT_TRADE_CONF;

      /******Commented in Ver 2.8 *******
      i_returncode = fn_call_svc ( c_ServiceName,
                              c_err_msg,
                              &st_tradebook,
                              &st_tradebook,
                              "vw_tradebook",
                              "vw_tradebook",
                              sizeof ( st_tradebook ),
                              sizeof ( st_tradebook ),
                              0,
                              "SFO_UPD_TRDBK" );
      *********** Ver 2.8 Comment Ends **********************/
      /********* Ver 2.8 Starts ***************/
      i_returncode=fn_upd_trade_book(c_ServiceName,c_err_msg,&st_tradebook);
      /********* ver 2.8 Ends *************/
      
			if ( i_returncode != SUCC_BFR )
      {
        EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31210", LIBMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      

      EXEC SQL
        UPDATE FTD_FO_TRD_DTLS
        /***      SET FTD_UPLD_MTCH_FLG = 'Y',FTD_RMS_PRCSD_FLG = 'P',FTD_FUT_CONV_FLG = 'Y' Commented in ver 1.1 ***/
							SET FTD_UPLD_MTCH_FLG = 'Y',FTD_RMS_PRCSD_FLG = 'P',FTD_FUT_CONV_FLG = 'X',     /*** Added in ver 1.1 **/	
              FTD_PRCS_TM = sysdate /** Ver 2.6 **/
        WHERE FTD_EBA_TRD_REF = :st_tradebook.c_trd_rfrnc
        AND   FTD_ORDR_RFRNC  = :st_tradebook.c_ordr_rfrnc;

      if ( SQLCODE != 0 )
      {
        EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog ( c_ServiceName, "S31215", SQLMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
     
   }/***For loop ends here  **/

  }/***While loop ends here **/

				if( DEBUG_MSG_LVL_3 )
  			{
					fn_userlog( c_ServiceName," After While Loop");
		  		fn_userlog( c_ServiceName," st_pstn_actn.c_cln_mtch_accnt     |%s|",st_pstn_actn.c_cln_mtch_accnt);
		  		fn_userlog( c_ServiceName," st_pstn_actn.c_xchng_cd           |%s|",st_pstn_actn.c_xchng_cd);
		  		fn_userlog( c_ServiceName," st_pstn_actn.c_prd_typ            |%c|",st_pstn_actn.c_prd_typ);
		  		fn_userlog( c_ServiceName," st_pstn_actn.c_ctgry_indstk       |%c|",st_pstn_actn.c_ctgry_indstk);
		  		fn_userlog( c_ServiceName," st_pstn_actn.c_undrlyng						|%s|",st_pstn_actn.c_undrlyng);
		  		fn_userlog( c_ServiceName," st_pstn_actn.c_exrc_typ						|%c|",st_pstn_actn.c_exrc_typ);
		  		fn_userlog( c_ServiceName," st_pstn_actn.c_opt_typ						|%c|",st_pstn_actn.c_opt_typ);
		  		fn_userlog( c_ServiceName," st_pstn_actn.l_strike_prc					|%ld|",st_pstn_actn.l_strike_prc);
		  		fn_userlog( c_ServiceName," st_pstn_actn.c_cntrct_tag					|%c|",st_pstn_actn.c_cntrct_tag);
				}

    EXEC SQL
        UPDATE FFF_FO_FUT_FPLSCNV
           SET FFF_UPLD_FLG = 'Y'
        WHERE  FFF_CLM_MTCH_ACCNT = :st_pstn_actn.c_cln_mtch_accnt
        AND    FFF_XCHNG_CD       = :st_pstn_actn.c_xchng_cd
        AND    FFF_PRDCT_TYP      = :st_pstn_actn.c_prd_typ
        AND    FFF_INDSTK         = :st_pstn_actn.c_ctgry_indstk
        AND    FFF_UNDRLYNG       = :st_pstn_actn.c_undrlyng
        AND    FFF_EXER_TYP       = :st_pstn_actn.c_exrc_typ
        AND    FFF_OPT_TYP        = :st_pstn_actn.c_opt_typ
        AND    FFF_STRK_PRC       = :st_pstn_actn.l_strike_prc
        AND    FFF_CNTRCT_TAG     = :st_pstn_actn.c_cntrct_tag
        AND    FFF_UPLD_FLG       = 'N';

      if ( SQLCODE != 0 )
      {
        EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog ( c_ServiceName, "S31220", SQLMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

	       /*** Ver 3.3 starts  ***/

		   EXEC SQL
        SELECT  FTQ_FP_CNTRCT_TAG
        INTO    :st_pstn_actn.c_cntrct_tag
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD        = :st_pstn_actn.c_xchng_cd
        AND     FTQ_PRDCT_TYP       = :st_pstn_actn.c_prd_typ
        AND     FTQ_UNDRLYNG        = :st_pstn_actn.c_undrlyng
        AND     FTQ_EXPRY_DT        = to_date( :st_pstn_actn.c_expry_dt,'dd-mon-yyyy' )
        AND     FTQ_EXER_TYP        = :st_pstn_actn.c_exrc_typ;

    if ( SQLCODE != 0 )
    {
        EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog ( c_ServiceName, "S31225", SQLMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		st_pstn_actn.c_prd_typ = 'P';

		fn_userlog(c_ServiceName,"FuturePlus Avg prc calc st_pstn_actn.c_prd_typ=:%c: st_pstn_actn.c_cntrct_tag=:%c:",st_pstn_actn.c_prd_typ,st_pstn_actn.c_cntrct_tag);

     i_returncode =fn_avg_prc_cal(c_ServiceName,
                                   &st_pstn_actn,
                                   &d_prtfl_avgprc);
    if ( i_returncode != 0 )
    {
      fn_userlog(c_ServiceName,"Error in Average Price Calculation ..");
        EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog ( c_ServiceName, "S31230", SQLMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    fn_userlog(c_ServiceName," Average Price  :%lf:",d_prtfl_avgprc);

      EXEC SQL
        UPDATE   FFP_FO_FUTURES_PSTN
        SET   FFP_AVG_PRC = :d_prtfl_avgprc
        WHERE  FFP_CLM_MTCH_ACCNT  = :st_pstn_actn.c_cln_mtch_accnt
        AND    FFP_XCHNG_CD        = :st_pstn_actn.c_xchng_cd
        AND    FFP_PRDCT_TYP       = :st_pstn_actn.c_prd_typ
        AND    FFP_EXER_TYP        = :st_pstn_actn.c_exrc_typ
        AND    FFP_UNDRLYNG        = :st_pstn_actn.c_undrlyng
        AND    FFP_EXPRY_DT        = :st_pstn_actn.c_expry_dt
       AND    FFP_CNTRCT_TAG      = :st_pstn_actn.c_cntrct_tag;  

	  if ( SQLCODE != 0 )
    {
        EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog ( c_ServiceName, "S31235", SQLMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

 /*** Ver 3.3  *****/

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog( c_ServiceName, "S31240", LIBMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
 
  /*** Ver 3.6 Starts here *****************/ 
  i_returncode = 0;

  i_returncode = fn_upd_nrmlmrgn_reporting( st_pstn_actn.c_cln_mtch_accnt,
                                        st_pstn_actn.c_xchng_cd,
                                        c_ServiceName,
                                        c_err_msg);
  if ( i_returncode != 0 )
  {
    fn_userlog(c_ServiceName,"Error in fn_upd_mrgn_reporting");
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /*** Ver 3.6 Ends here ***/

  tpreturn( TPSUCCESS, 0, (char *)NULL, 0 , 0 );
} 

int fn_ins_ordrbook ( char  *c_ServiceName,                   /***  Ver 1.5 ***/
                      char  *c_user_id,
                      struct vw_orderbook *ptr_st_ordbook,
											char c_spn_flg,												/*** Ver 1.6 ***/
											char *c_pan_no,												/*** Added In Ver 2.9 ***/
											char c_setlment_flag,                 /*** Added in Ver 3.0 ***/
                      struct vw_err_msg *ptr_st_err_msg
                    )
{
 	char c_ucc_cd[13]; /***Ver 3.6 ***/

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"User ID Inside Function Insert Order book IS :%s:",c_user_id);
    fn_userlog(c_ServiceName,"The SPAN flag IS :%c:",c_spn_flg);      /*** Ver 1.6 ***/
  }

  if( ptr_st_ordbook->c_channel[0] == ' ' || ptr_st_ordbook->c_channel[0]  == '\0' )
  {
    fn_userlog(c_ServiceName,"CHANNEL NOT PRESENT.");
    fn_userlog(c_ServiceName,"Channel Is :%s:",ptr_st_ordbook->c_channel);

    ptr_st_ordbook->c_channel[0] = '$';

    fn_userlog(c_ServiceName,"Channel Is :%s:",ptr_st_ordbook->c_channel);

  }
	/***Ver 3.6 starts ***/
	MEMSET(c_ucc_cd);
  EXEC SQL
    SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT ) 
     INTO  :c_ucc_cd
     FROM  CLM_CLNT_MSTR
     WHERE CLM_MTCH_ACCNT =:ptr_st_ordbook->c_cln_mtch_accnt;

   if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_userlog(c_ServiceName," Error while fetching UCC code for :%s:", ptr_st_ordbook->c_cln_mtch_accnt);
		fn_errlog( c_ServiceName, "S31245", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }
	
	rtrim(c_ucc_cd);
  if(DEBUG_MSG_LVL_3)
    fn_userlog(c_ServiceName," MAtch ID :%s: have ucc code :%s:", ptr_st_ordbook->c_cln_mtch_accnt, c_ucc_cd);

  /***Ver 3.6 ends here ***/
  EXEC SQL
    INSERT INTO FOD_FO_ORDR_DTLS
    (
      FOD_CLM_MTCH_ACCNT,
      FOD_CLNT_CTGRY,
      FOD_ORDR_RFRNC,
      FOD_PIPE_ID,
      FOD_XCHNG_CD,
      FOD_PRDCT_TYP,
      FOD_UNDRLYNG,
      FOD_EXPRY_DT,
			FOD_EXER_TYP,
      FOD_OPT_TYP,
      FOD_STRK_PRC,
      FOD_ORDR_FLW,
      FOD_LMT_MRKT_SL_FLG,
      FOD_DSCLSD_QTY,
      FOD_ORDR_TOT_QTY,
      FOD_LMT_RT,
      FOD_STP_LSS_TGR,
      FOD_ORDR_TYPE,
      FOD_ORDR_VALID_DT,
      FOD_TRD_DT,
      FOD_ORDR_STTS,
      FOD_SPRD_ORDR_REF,
      FOD_MDFCTN_CNTR,
      FOD_SETTLOR,
      FOD_SPL_FLAG,
      FOD_INDSTK,
      FOD_PRO_CLI_IND,
      FOD_CHANNEL,
      FOD_BP_ID,
      FOD_CTCL_ID,
      FOD_USR_ID,
      FOD_MRKT_TYP,
      FOD_CSE_ID,
			FOD_SPN_FLG,														/*** Added in ver 1.6 ***/
			FOD_PAN_NO,														/*** Added In Ver 2.9 ***/	
			FOD_SETLMNT_FLG,                       /*** Added in Ver 3.0 ***/
			FOD_UCC_CD /**Added in Ver 3.6 **/
    )
    VALUES
    (
      :ptr_st_ordbook->c_cln_mtch_accnt,
      :ptr_st_ordbook->l_clnt_ctgry,
      :ptr_st_ordbook->c_ordr_rfrnc,
      :ptr_st_ordbook->c_pipe_id,
			:ptr_st_ordbook->c_xchng_cd,
      :ptr_st_ordbook->c_prd_typ,
      :ptr_st_ordbook->c_undrlyng,
      to_date( :ptr_st_ordbook->c_expry_dt, 'dd-mon-yyyy' ),
      :ptr_st_ordbook->c_exrc_typ,
      :ptr_st_ordbook->c_opt_typ,
      :ptr_st_ordbook->l_strike_prc,
      :ptr_st_ordbook->c_ordr_flw,
      :ptr_st_ordbook->c_slm_flg,
      :ptr_st_ordbook->l_dsclsd_qty,
      :ptr_st_ordbook->l_ord_tot_qty,
      :ptr_st_ordbook->l_ord_lmt_rt,
      :ptr_st_ordbook->l_stp_lss_tgr,
      :ptr_st_ordbook->c_ord_typ,
      to_date( :ptr_st_ordbook->c_valid_dt,'dd-mon-yyyy' ),
      to_date( :ptr_st_ordbook->c_trd_dt,'dd-mon-yyyy' ),
      :ptr_st_ordbook->c_ordr_stts,
      :ptr_st_ordbook->c_sprd_ord_rfrnc,
      :ptr_st_ordbook->l_mdfctn_cntr,
      :ptr_st_ordbook->c_settlor,
      :ptr_st_ordbook->c_spl_flg,
      :ptr_st_ordbook->c_ctgry_indstk,
      :ptr_st_ordbook->c_pro_cli_ind,
      :ptr_st_ordbook->c_channel,
      :ptr_st_ordbook->c_bp_id,
      :ptr_st_ordbook->c_ctcl_id,
      :c_user_id,
			:ptr_st_ordbook->c_mrkt_typ,
      :ptr_st_ordbook->l_cse_id,
			DECODE(:c_spn_flg,'N',null,'S'),							/*** Added in ver 1.6 ***/
			:c_pan_no,																			/*** Added In Ver 2.9 ***/
			:c_setlment_flag,                              /*** Added in Ver 3.0 ***/
			:c_ucc_cd /***Added in Ver 3.6 ***/
    );

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31250", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

    return 0;
}
