/********************************************************************************/
/*  Program           : SFO_PRCS_SLTP                                          	*/
/*                                                                             	*/
/*  Input             : 																											 	*/
/*                                                                             	*/
/*  Output            :                                                        	*/
/*                                                                             	*/
/*  Description       : This Program Will Process SLTP Reponses From Exchange. 	*/
/*                                                                             	*/
/*  Log               : 1.0   15-Dec-2009     Sandeep Patil                    	*/
/*	Log								:	1.1		05-Mar-2010			Sandeep Patil										 	*/
/*	Log								:	1.2		18-Nov-2011			Sandeep Patil										 	*/
/*	Log								:	1.3		31-Jan-2014			Sandeep Patil										 	*/
/*	Log								:	1.4		22-Apr-2016			Sachin Birje 										 	*/
/*	Log								:	1.5		30-May-2016			Navina D.   										 	*/
/*	Log								:	1.6   10-Jun-2016			Kishor B.													*/
/*	Log								:	1.8   07-Dec-2016			Tanmay W.													*/
/*	Log								: 1.9		25-Feb-2019			Parag Kanojia											*/
/********************************************************************************/
/*  Version 1.0 - New Release                                                  	*/
/*	Version	1.1	-	IOC & Exercise Response Handling															*/
/*	Version	1.2	-	SPAN Changes																									*/
/*	Version	1.3	-	Ack Number Size Increased From 17 To 20												*/
/*	Version	1.4	-	Sleep time reduced                    												*/
/*  Version 1.5 - Write error into error queue                                  */
/*	Version 1.6 - Log Maintenance																								*/ 
/*	Version 1.8 - Core Fix																											*/ 
/*	Version 1.9 - Fo Direct Connectivity																				*/ 
/********************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <atmi.h>
#include <fml32.h>
#include <Usysflds.h>
#include <sqlca.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fo.h>
#include <fn_env.h>
#include <fn_tuxlib.h>
#include <fn_fil_log.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fml_rout.h>
#include <fml_def.h>
#include <userlog.h>
#include <fn_session.h>
#include <fo_exg_rcv_lib.h>
#include <fo_spn_rcv_lib.h>     /***  Ver 1.2 ***/
#include <fn_read_debug_lvl.h>
#include <netinet/in.h>											/*** Ver 1.9 ***/
#include <fn_nw_to_host_format_nse.h>				/*** Ver 1.9 ***/

void SFO_PRCS_SLTP ( TPSVCINFO *rqst )
{
  FBFR32 *ptr_fml_ibuf;

  FLDLEN32  ud_len;
  char c_ServiceName[33];
  char *ptr_car_sbuf;
  char c_pipe_id[ 2 + 1 ];
  char c_qspacename[32];
  char c_err_qn[32];
  char c_err_msg[256];
  char c_xchng_cd [ 3+1 ];
  varchar c_trd_dt [ 20 + 1 ];
  varchar c_trd_ref [8 + 1];
  char c_skpord_ref[18 + 1];
  char c_rout_str [ 4 ];
  char c_span_flg;      		/***  Ver 1.2 ***/
	char c_xchng_ack[20];			/***	Ver	1.2	***/			/*** Ver 1.3	***/


  int i_rtrn_cd ;
  int i_ret_val ;
  int i_dwnld_flg ;
  int i_errno;
  int i_err [ 7 ];
  int i_ferr [ 7 ];
  int i_cnt;
  int li_sbuf_len;
  int i_deferred_dwnld_flg;


  struct st_cmn_header st_hdr;
  struct st_trade_confirm st_trd_conf;
  struct st_ex_pl_reqres st_expl_reqres_data;
	struct st_oe_reqres st_oe_reqres_data;
	struct st_oe_rspn_tr st_oe_res_data_tr;		/*** Ver 1.9 ***/

  strcpy(c_ServiceName, "SFO_PRCS_SLTP" );

  INITDBGLVL(c_ServiceName);

  ptr_fml_ibuf = (FBFR32 *)rqst->data;

	MEMSET (c_pipe_id);

  i_err [ 0 ] = Fget32(ptr_fml_ibuf,FFO_PIPE_ID,0,(char *)c_pipe_id, 0);
  i_ferr [ 0 ] = Ferror32;
  i_err [ 1 ] = Fget32(ptr_fml_ibuf,FFO_BIT_FLG,0,(char *)&i_dwnld_flg,0);
  i_ferr [ 1 ] = Ferror32;
  i_err [ 2 ] = Fget32(ptr_fml_ibuf,FFO_NXT_TRD_DT,0,(char *)c_trd_dt.arr,0);
  i_ferr [ 2 ] = Ferror32;
  i_err [ 3 ] = Fget32(ptr_fml_ibuf,FFO_XCHNG_CD,0,(char *)c_xchng_cd,0);
  i_ferr [ 3 ] = Ferror32;
  i_err [ 4 ] = Fget32(ptr_fml_ibuf,FFO_REF_NO,0,(char *)c_trd_ref.arr,0);
  i_ferr [ 4 ] = Ferror32;
  i_err [ 5 ] = Fget32(ptr_fml_ibuf,FFO_ORDR_RFRNC,0,(char *)c_skpord_ref,0);
  i_ferr [ 5 ] = Ferror32;
  i_err [ 6 ] = Fget32(ptr_fml_ibuf,FFO_DWNLD_FLG,0,(char *)&i_deferred_dwnld_flg,0);
  i_ferr [ 6 ] = Ferror32;

  for ( i_cnt=0; i_cnt<=6; i_cnt++ )
  {
    if (i_err[i_cnt] == -1)
    {
      fn_userlog(c_ServiceName, "Error in field no. %d",i_cnt);
      fn_errlog(c_ServiceName, "S31005", Fstrerror32(i_ferr[i_cnt]),c_err_msg );
      tpfree ( ( char * )ptr_fml_ibuf);
      tpreturn(TPFAIL,0 , (char *)NULL, 0, 0 );
    }
  }

  if (DEBUG_MSG_LVL_0)		/*** Ver 1.6 ***/
	{
		fn_userlog(c_ServiceName,"Inside SFO_PRCS_SLTP");
    fn_userlog(c_ServiceName,"I/P Skip Order Ref Is :%s:",c_skpord_ref);
	}
	if (DEBUG_MSG_LVL_2)		/** Debug level change from 0 to 2 in Ver 1.6 **/
	{
		fn_userlog(c_ServiceName,"Inside SFO_PRCS_SLTP");
		fn_userlog(c_ServiceName,"I/P Pipe ID Is :%s:",c_pipe_id);
  	fn_userlog(c_ServiceName,"I/P Down Load Flag Is :%d:",i_dwnld_flg);
  	fn_userlog(c_ServiceName,"I/P Exchange Code Is :%s:",c_xchng_cd);
  	fn_userlog(c_ServiceName,"I/P Next Trade Date :%s:",c_trd_dt.arr);
  	fn_userlog(c_ServiceName,"I/P Trade Ref Is :%s:",c_trd_ref.arr);
  	fn_userlog(c_ServiceName,"I/P Skip Order Ref Is :%s:",c_skpord_ref);
  	fn_userlog(c_ServiceName,"I/P Deffered DownLoad Flag Is :%d:",i_deferred_dwnld_flg);
	}

  ptr_car_sbuf =(char *)tpalloc("CARRAY", NULL, MIN_FML_BUF_LEN);

  if (ptr_car_sbuf == NULL)
  {
    fn_errlog( c_ServiceName, "S31010", TPMSG, c_err_msg  );
    tpfree ( ( char * )ptr_fml_ibuf);
    tpreturn(TPFAIL, 0, (char *)NULL, 0, 0 );
  }

  MEMSET(c_qspacename);
  MEMSET(c_err_qn);

  sprintf(c_err_qn,"ERR_%s_Q",c_pipe_id);
  sprintf(c_qspacename,"%s_QSPACE",c_pipe_id);

  if( Fadd32(ptr_fml_ibuf,FML_FILE_NAME, (char *)c_err_qn, 0) == -1)
  {
    fn_errlog( c_ServiceName, "S31015", UNXMSG, c_err_msg  );
    tpfree ( ( char * )ptr_car_sbuf );

    if ( tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
    {
      fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
    }
    tpfree ( ( char * )ptr_fml_ibuf);
    tpreturn(TPFAIL, 0, (char *)NULL, 0, 0 );
  }
	

	if ( Fadd32(ptr_fml_ibuf,FML_GMS_NM, (char *)c_qspacename, 0) == -1 )
  {
    fn_errlog( c_ServiceName, "S31020", UNXMSG, c_err_msg  );

    tpfree ( ( char * )ptr_car_sbuf );

    if ( tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
    {
       fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
    }
    tpfree ( ( char * )ptr_fml_ibuf);
    tpreturn(TPFAIL, 0, (char *)NULL, 0, 0 );
  }

  ud_len = (FLDLEN32)sizeof(li_sbuf_len);
  i_ret_val = Fget32(ptr_fml_ibuf, FFO_TMPLT, 0,(char *)&li_sbuf_len, &ud_len);

  if(i_ret_val == -1 )
  {
    fn_errlog(c_ServiceName,"S31025", DEF_USR,c_err_msg);
    tpfree ( ( char * )ptr_car_sbuf );
    if( tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
    {
       fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
    }
    tpfree ( ( char * )ptr_fml_ibuf);
    tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
  }

	ud_len = (FLDLEN32)li_sbuf_len;
  i_ret_val = Fget32(ptr_fml_ibuf, FFO_CBUF, 0,(char *)ptr_car_sbuf, &ud_len);

  if (i_ret_val == -1)
  {
    fn_errlog(c_ServiceName,"S31030",DEF_USR,c_err_msg);
    tpfree ( ( char * )ptr_car_sbuf );
    if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
    {
       fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
    }
    tpfree ( ( char * )ptr_fml_ibuf);
    tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
  }

  strcpy(c_rout_str,"000");

  MEMSET(st_hdr);
/***  memcpy (&st_hdr,ptr_car_sbuf,sizeof (struct st_cmn_header));	*** Commented in Ver 1.9 ***/
	memcpy (&st_hdr,ptr_car_sbuf,sizeof (struct st_cmn_header_tr));		/*** Ver 1.9 ***/

	/***	Ver 1.1 Strats	***/

	switch (st_hdr.si_transaction_code)
	{
		case	ON_STOP_NOTIFICATION:

			MEMSET(st_trd_conf);
  		memcpy (&st_trd_conf,ptr_car_sbuf,sizeof (struct st_trade_confirm ));

			fn_cnvt_nth_trade_confirm(&st_trd_conf);		/*** Ver 1.9 ***/

			if (DEBUG_MSG_LVL_0) 
			{
	  		fn_userlog(c_ServiceName,"Transaction Code Received From Exchange Is :%d:",st_hdr.si_transaction_code);
  			fn_userlog(c_ServiceName,"Exchange Ack Is :%d:",st_trd_conf.d_response_order_number);
			}

  		if(i_dwnld_flg == DOWNLOAD && i_deferred_dwnld_flg == 1 )
  		{
    		fn_userlog(c_ServiceName,"Inside Deffered Download Condition");
    		if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
    		{
      		fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
    		}
    		tpfree ( ( char * )ptr_fml_ibuf);
    		tpfree ( ( char * )ptr_car_sbuf );      /** ver 1.8 **/
    		tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
  		}

			if (DEBUG_MSG_LVL_2)  /** Debug level change from 0 to 2 in Ver 1.6 **/
			{
  			/** fn_userlog(c_ServiceName,"Before Going To Sleep For 3 Seconds In ON_STOP_NOTIFICATION Case"); **/
         fn_userlog(c_ServiceName,"Before Going To Sleep For 100 millseconds In ON_STOP_NOTIFICATION Case"); /** Ver 1.4 **/
			}

  		/*** sleep(3);    **** ver 1.4 **/   /**Added to differ execution till order confirmation is processed **/

      /*** usleep(100000) ; *** Ver 1.4 ** sleep removed later ***/
			
 	 		i_ret_val =  fn_stpls_trg ( &st_trd_conf,
      		                        c_xchng_cd,
          		                    c_pipe_id,
              		                c_rout_str, 
                  		            c_trd_dt.arr,
                      		        TRIGGERED,
                          		    c_ServiceName,
                              		i_dwnld_flg,
                              		c_err_msg );

  		if(i_ret_val == -1)
  		{
    		if ( tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
    		{
      		fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
    		}
  		}

			if (DEBUG_MSG_LVL_2)   /** Debug level change from 0 to 2 in Ver 1.6 **/
			{
  			fn_userlog(c_ServiceName,"After Successful Call To fn_stpls_trg");
			}

			break;

		case EX_PL_CXL_CONFIRMATION :
    case EX_PL_MOD_CONFIRMATION :
    case EX_PL_CONFIRMATION :
    case EX_PL_ENTRY_IN :

    	if (DEBUG_MSG_LVL_3)    /** Ver 1.6 **/
    	{
      	fn_userlog(c_ServiceName,"Inside Exercise Conformation Case ");
      }
			MEMSET (st_expl_reqres_data);

      memcpy (&st_expl_reqres_data,ptr_car_sbuf,sizeof (struct st_ex_pl_reqres ));

			fn_cnvt_nth_ex_pl_reqres(&st_expl_reqres_data);		/*** Ver 1.9 ***/

      if(i_dwnld_flg == DOWNLOAD && i_deferred_dwnld_flg == 1 )
      {
    		if (DEBUG_MSG_LVL_3)    /** Ver 1.6 **/
    		{
        	fn_userlog(c_ServiceName,"Inside Deffered Download Condition");
        }

				if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
        {
          fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
        }
        tpfree ( ( char * )ptr_fml_ibuf);
        tpfree ( ( char * )ptr_car_sbuf );      /** ver 1.8 **/
        tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
      }

      /*** sleep(3);   *** ver 1.4 ***/

      /**** usleep(100000) ; *** Ver 1.4 ** sleep removed later ***/

      i_ret_val =  fn_expl_confirmation ( &st_expl_reqres_data,
                                          c_xchng_cd,
                                          c_pipe_id,
                                          c_rout_str,    
                                          c_trd_dt.arr,
                                          c_ServiceName,
                                          i_dwnld_flg,
                                          c_err_msg );

      if(i_ret_val == -1)
      {
        if ( tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
        {
          fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
        }
      }

    	if (DEBUG_MSG_LVL_3)    /** Ver 1.6 **/
    	{
      	fn_userlog(c_ServiceName,"After Successful Call To fn_expl_cnfrmtn");
      }
				break;

		case	ORDER_CANCEL_CONFIRM_OUT:
    	if (DEBUG_MSG_LVL_3)    /** Ver 1.6 **/
    	{			
				fn_userlog(c_ServiceName,"Inside ORDER CONFERMATION/REJECTION Case ");
			}

      MEMSET(st_oe_reqres_data);
      memcpy (&st_oe_reqres_data,ptr_car_sbuf,sizeof (struct st_oe_reqres ));

			fn_cnvt_nth_oe_reqres(&st_oe_reqres_data);		/*** Ver 1.9 ***/

    	if (DEBUG_MSG_LVL_0)    /** Ver 1.6 **/
    	{
      	fn_userlog(c_ServiceName,"Sequence Number Is :%d:",st_oe_reqres_data.i_ordr_sqnc);
			}

      if(i_dwnld_flg == DOWNLOAD && i_deferred_dwnld_flg == 1 )
      {
        fn_userlog(c_ServiceName,"Inside Deffered Download Condition");
        if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
        {
          fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
        }
        tpfree ( ( char * )ptr_fml_ibuf);
        tpfree ( ( char * )ptr_car_sbuf );      /** ver 1.8 **/
        tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
      }

			/***	Ver	1.2	Starts	***/

			sprintf(c_xchng_ack,"%16.0lf",st_oe_reqres_data.d_order_number);

  		rtrim(c_xchng_ack);

    	if (DEBUG_MSG_LVL_0)    /** Ver 1.6 **/
    	{
				fn_userlog(c_ServiceName,"c_xchng_ack Is :%s:",c_xchng_ack);
				fn_userlog(c_ServiceName,"c_span_flg Is :%c:",c_span_flg);
			}

			/**** sleep (3); *** ver 1.4 ***/

      /***usleep(200) ; *** Ver 1.4 **/
      usleep(10000) ; /*** Ver 1.4 **/
			
			c_span_flg = '\0';	/*** Ver 1.5 ***/

			EXEC SQL
        SELECT  NVL(FOD_SPN_FLG,'N')
        INTO    :c_span_flg
        FROM    FOD_FO_ORDR_DTLS
        WHERE   FOD_ACK_NMBR  = :c_xchng_ack
        AND     ROWNUM < 2;

      if ( SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_userlog(c_ServiceName,"Error While Selecting Span Flag.");

        if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
        {
          fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
        }
        tpfree ( ( char * )ptr_fml_ibuf);
        tpfree ( ( char * )ptr_car_sbuf );      /** ver 1.8 **/
        tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );

      }

			/***  Ver 1.2 Ends	***/

			if ( c_span_flg == 'S' )
			{
				i_ret_val	=	fn_spnord_confirmation	( 	&st_oe_reqres_data,
                                         				c_xchng_cd,
                                         				c_pipe_id,
                                         				c_rout_str,
                                         				c_trd_dt.arr,
                                         				c_skpord_ref,
                                         				i_dwnld_flg,
                                         				c_ServiceName,
                                         				c_err_msg
	 																					);


			}
			else if ( c_span_flg == 'N' )
			{
      	i_ret_val = fn_ord_confirmation( &st_oe_reqres_data,
        	                               c_xchng_cd,
          	                             c_pipe_id,
            	                           c_rout_str, 
              	                         c_trd_dt.arr,
                	                       c_skpord_ref,
                  	                     i_dwnld_flg,
                    	                   c_ServiceName,
                      	                 c_err_msg );

			}
			else /*** else loop added in Ver 1.5 ***/
			{
    		if (DEBUG_MSG_LVL_0)    /** Ver 1.6 **/
    		{
        	fn_userlog(c_ServiceName,"Incorrect Span Flag Selected");
				}

        if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
        {
          fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
        }
        tpfree ( ( char * )ptr_fml_ibuf);
        tpfree ( ( char * )ptr_car_sbuf );      /** ver 1.8 **/
        tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
			}

      if(i_ret_val == -1)
      {
        if ( tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
        {
          fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
        }
      }

  	if (DEBUG_MSG_LVL_0)    /** Ver 1.6 **/
  	{
      fn_userlog(c_ServiceName,"After Successful Call To fn_ord_cnfrmtn");
		}
      break;

		/*** Ver 1.9 Starts ***/

		case  ORDER_CXL_CONFIRMATION_TR:
      if (DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside ORDER_CXL_CONFIRMATION_TR Case ");
      }

      MEMSET(st_oe_res_data_tr);
      memcpy (&st_oe_res_data_tr,ptr_car_sbuf,sizeof (struct st_oe_rspn_tr ));

			fn_cnvt_nth_oe_rspn_tr(&st_oe_res_data_tr);

      if (DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"Sequence Number Is :%ld:",st_oe_res_data_tr.li_ordr_sqnc);
      }

      if(i_dwnld_flg == DOWNLOAD && i_deferred_dwnld_flg == 1 )
      {
        fn_userlog(c_ServiceName,"Inside Deffered Download Condition");
        if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
        {
          fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
        }
        tpfree ( ( char * )ptr_fml_ibuf);
        tpfree ( ( char * )ptr_car_sbuf );
        tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
      }

      sprintf(c_xchng_ack,"%16.0lf",st_oe_res_data_tr.d_order_number);

      rtrim(c_xchng_ack);

			if (DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"c_xchng_ack Is :%s:",c_xchng_ack);
        fn_userlog(c_ServiceName,"c_span_flg Is :%c:",c_span_flg);
      }

      usleep(10000) ;

      c_span_flg = '\0';

      EXEC SQL
        SELECT  NVL(FOD_SPN_FLG,'N')
        INTO    :c_span_flg
        FROM    FOD_FO_ORDR_DTLS
        WHERE   FOD_ACK_NMBR  = :c_xchng_ack
        AND     ROWNUM < 2;

      if ( SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_userlog(c_ServiceName,"Error While Selecting Span Flag.");

        if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
        {
          fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
        }
        tpfree ( ( char * )ptr_fml_ibuf);
        tpfree ( ( char * )ptr_car_sbuf );
        tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
				}

      if ( c_span_flg == 'S' )
      {
        i_ret_val = fn_spnord_confirmation_trim  (   &st_oe_res_data_tr,
                                                		 c_xchng_cd,
                                                		 c_pipe_id,
                                                		 c_rout_str,
                                                		 c_trd_dt.arr,
                                                		 c_skpord_ref,
                                                		 i_dwnld_flg,
                                                		 c_ServiceName,
                                                		 c_err_msg
                                            		 );


      }
      else if ( c_span_flg == 'N' )
      {
        i_ret_val = fn_ord_confirmation_trim( &st_oe_res_data_tr,
                                         			c_xchng_cd,
                                         			c_pipe_id,
                                         			c_rout_str,
                                         			c_trd_dt.arr,
                                         			c_skpord_ref,
                                         			i_dwnld_flg,
                                         			c_ServiceName,
                                         			c_err_msg );

      }
			else
      {
        if (DEBUG_MSG_LVL_0)
        {
          fn_userlog(c_ServiceName,"Incorrect Span Flag Selected");
        }

        if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
        {
          fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
        }
        tpfree ( ( char * )ptr_fml_ibuf);
        tpfree ( ( char * )ptr_car_sbuf );
        tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
      }

      if(i_ret_val == -1)
      {
        if ( tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
        {
          fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
        }
      }

    if (DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"After Successful Call To fn_ord_cnfrmtn_trim");
    }
      break;

		/*** Ver 1.9 Ends ***/

		default:
    	fn_userlog( c_ServiceName, "Protocol error %d", st_hdr.si_transaction_code);
      i_ret_val = -1;
    break;

	}

	/***	Ver 1.1 Ends ***/

  tpfree ( (char *)ptr_car_sbuf );
	tpfree ( (char *)ptr_fml_ibuf );

	if ( i_ret_val == -1 )
  {
		tpreturn(TPFAIL, 0, (char *)NULL, 0, 0);
 	}	

	tpreturn(TPSUCCESS, 0, (char *)NULL, 0, 0);

}
