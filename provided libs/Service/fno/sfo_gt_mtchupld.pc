/******************************************************************************/
/*	Program	    			:	SFO_GT_MTCHUPLD                                       */
/*  Input             :                                                       */
/*  Output            :                                                       */
/*  Description       :                                                       */
/*  Log               :                                                       */
/******************************************************************************/
/*     07-Dec-2001       Ver 1.0        Infotech|sangeet   Release 1.0        */
/*     25-Apr-2006       Ver 1.1        Infotech|Firoz     Release 1.1        */
/*		 28-Aug-2006       Ver 1.2				Infotech|shailesh	 Release 1.2			  */		
/*		 01-Oct-2007			 Ver 1.3				Infotech|Sushil		 AIX Migration			*/
/* 		 11-May-2008			 Ver 1.4 				Infotech|Rohit Change for Reallocation*/
/******************************************************************************/
/*What is the use of c_eba_trade_no?****/
/*Why FFO_STATUS_FLAG is not populated?****/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fo_fml_def.h>
#include <fo.h>
#include <fn_log.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_read_debug_lvl.h>  /*  Ver 1.3 : Added   */

void SFO_GT_MTCHUPLD( TPSVCINFO *rqst )
{

	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Obuf;

	char c_ServiceName [33];
  char c_err_msg [256];
	int  i_returncode;
	int  i;
	int  i_ip_len;
	int  i_op_len;
	char c_tag [ 256 ];
	long int li_rec_no;
	char c_cln_mtch_accnt[11];
	long l_opnpstn_qty;
	int  i_rec_exists;
	char c_msg[256];
	int	 i_err[25];
	int	 i_count = 5;
	int	 i_Obuffer_len;											 	 /***	Ver 1.3 : Data Type changed from long to int	***/
	EXEC SQL BEGIN DECLARE SECTION;
  sql_cursor     mtch_upld_cursor;             /* a cursor variable */
	EXEC SQL END DECLARE SECTION;
	
char    c_pro_cli_flg;
char 		c_settlor[13];
char 		c_eba_trd_no [20];
long  	l_cvr_brkg_val;
char  	c_xchng_cd[4];
char  	c_clnt_mtch_accnt [11];
char 		c_trd_dt[12];
char 		c_rqst_typ;
char    c_trd_ack_tm[23] ; /**  1.1 **/

	struct   vw_tradebook *ptr_st_tradebook;

	ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
	strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.3 : Added   */
	i_Obuffer_len = MIN_FML_BUF_LEN ;						/*** Ver 1.3 : l_Obuffer_len changed to i_Obuffer_len	***/
  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                      c_err_msg,
																		  ptr_fml_Ibuf,
																		  3,
					 FFO_XCHNG_CD , ( char * )c_xchng_cd, NULL,
					 FFO_TRD_DT , ( char * )c_trd_dt, NULL,
					 FFO_RQST_TYP  , ( char * )&c_rqst_typ, NULL);
	if( i_returncode != 0 )
	{
		fn_errlog( c_ServiceName, "S31005", LIBMSG , c_err_msg );
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}
	if(c_rqst_typ == UPLD_FOR_MTCH_ACCNT)
		{
			if(Fget32(ptr_fml_Ibuf,FFO_EBA_MTCH_ACT_NO,0,(char *)c_cln_mtch_accnt,0) == -1)
			{
			fn_errlog( c_ServiceName, "S31010", TPMSG , c_err_msg );
			Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
			}
		}
 	

	ptr_st_tradebook = ( struct vw_tradebook * ) tpalloc ( "VIEW32",
                                                       "vw_tradebook",
                                               sizeof ( struct vw_tradebook ) );
  if ( ptr_st_tradebook == NULL )
  {
    fn_errlog( c_ServiceName, "S31015", TPMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  memset ( ptr_st_tradebook, 0, sizeof ( struct vw_tradebook ) );	


if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.3 : Debug level Change  */
	fn_userlog(c_ServiceName,"FFO_XCHNG_CD is :%s:",c_xchng_cd);	
	fn_userlog(c_ServiceName,"FFO_TRD_DT is :%s:",c_trd_dt);	
	fn_userlog(c_ServiceName,"FFO_RQST_TYP is :%c:",c_rqst_typ);	
	fn_userlog(c_ServiceName,"FFO_EBA_MTCH_ACT_NO is :%s:",c_cln_mtch_accnt);	
} 
	
	EXEC SQL ALLOCATE :mtch_upld_cursor;
	if(c_rqst_typ == MTCH_UPLD_FOR_XCHNG)
	{
		EXEC SQL EXECUTE 
		BEGIN
			OPEN : mtch_upld_cursor FOR	
						SELECT FTD.FTD_XCHNG_CD,
							 FTD.FTD_ORDR_RFRNC,
							 FTD.FTD_ORD_ACK_NMBR,
							 FTD.FTD_XCHNG_TRD_NO,
							 FTD.FTD_EBA_TRD_REF,
							 FTD.FTD_PRDCT_TYP,
							 FTD.FTD_INDSTK,
		           NVL( FTD.FTD_UNDRLYNG,'*'),
               FTD.FTD_EXPRY_DT,
               NVL( FTD.FTD_OPT_TYP,'*'),
               NVL( FTD.FTD_EXER_TYP,'*'),
               NVL( FTD.FTD_STRK_PRC,0),
               NVL( FTD.FTD_TRD_FLW,'*'),
               NVL( FTD.FTD_FRESH_QTY,0),
               NVL( FTD.FTD_EXCTD_RT,0),
               NVL( FTD.FTD_CLM_MTCH_ACCNT,'*'),
               NVL( FTD.FTD_FRS_BRKG,0),
               NVL( FTD.FTD_CVR_BRKG,0),
               NVL(FTD.FTD_COVER_QTY,0),
               TO_CHAR(FTD.FTD_TRD_DT,'dd-Mon-yyyy hh24:mi:ss'),
               NVL(FTD.FTD_TRNSCTN_TYP,'F'),
               NVL(FOD.FOD_SETTLOR,0),
               NVL(FOD.FOD_PRO_CLI_IND,0) ,
               to_char (FXB_ACK_TM,'dd-Mon-yyyy hh24:mi:ss') /** 1.1 **/
/* 1.1		FROM  	FTD_FO_TRD_DTLS FTD, FOD_FO_ORDR_DTLS FOD
		WHERE  	FTD.FTD_ORDR_RFRNC = FOD.FOD_ORDR_RFRNC 
		AND   	FTD. FTD_XCHNG_CD = :c_xchng_cd
		AND   	FTD.FTD_TRD_DT >= to_date(:c_trd_dt,'dd-Mon-yyyy')
		AND 		FTD. FTD_UPLD_MTCH_FLG = 'N'; */

/*    FROM   FTD_FO_TRD_DTLS FTD, FOD_FO_ORDR_DTLS FOD ,FXB_FO_XCHNG_BOOK FXB
		WHERE  FTD.FTD_ORDR_RFRNC = FXB.FXB_ORDR_RFRNC 
    AND    FTD.FTD_ORDR_RFRNC = FOD.FOD_ORDR_RFRNC  
		AND    FTD. FTD_XCHNG_CD = :c_xchng_cd
		AND    FTD.FTD_TRD_DT >= to_date(:c_trd_dt,'dd-Mon-yyyy')		
    AND    FXB_MDFCTN_CNTR  in ( SELECT max(FXB_MDFCTN_CNTR)
                                 FROM   FXB_FO_XCHNG_BOOK
                                 WHERE  FXB_ORDR_RFRNC = FTD.FTD_ORDR_RFRNC
                                 AND    FXB_PLCD_STTS  = 'A'
                                 AND    FXB_MOD_TRD_DT <= to_date(:c_trd_dt,'dd-Mon-yyyy') ) 
		AND    FTD. FTD_UPLD_MTCH_FLG = 'N'; */

/*** Ver 1.2 ***/
		FROM   FTD_FO_TRD_DTLS FTD, FOD_FO_ORDR_DTLS FOD ,FXB_FO_XCHNG_BOOK FXB
WHERE  FTD.FTD_ORDR_RFRNC = FXB.FXB_ORDR_RFRNC
AND    FTD.FTD_ORDR_RFRNC = FOD.FOD_ORDR_RFRNC
AND    FTD. FTD_XCHNG_CD = 'NFO'
AND    FTD.FTD_TRD_DT >= to_date(:c_trd_dt,'dd-Mon-yyyy')
AND   (FXB.FXB_MDFCTN_CNTR, fxb.fxb_ack_tm) = (SELECT max(FXB_MDFCTN_CNTR), f1.FXB_ACK_TM
                            FROM   FXB_FO_XCHNG_BOOK f1
                            WHERE  f1.FXB_ORDR_RFRNC = FTD.FTD_ORDR_RFRNC
                            AND    f1.FXB_PLCD_STTS  in ('A','T')
                            and    f1.FXB_ACK_TM = ( SELECT max(FXB_ACK_TM)
                                                    FROM   FXB_FO_XCHNG_BOOK f2
                                                    WHERE  f2.FXB_ORDR_RFRNC =  FTD.FTD_ORDR_RFRNC
                                                    AND    f2.FXB_PLCD_STTS  in ('A','T')
                                                    AND    f2.FXB_ACK_TM <=(FTD.FTD_TRD_DT+1/(60*60*24))) 
																										group by f1.FXB_ACK_TM) 
AND    FTD. FTD_UPLD_MTCH_FLG = 'N';	
		END;
    END-EXEC;

	}
	else if(c_rqst_typ == UPLD_FOR_MTCH_ACCNT)
	{
 	EXEC SQL EXECUTE
    	BEGIN
    		OPEN :mtch_upld_cursor FOR
						SELECT FTD.FTD_XCHNG_CD,
							 FTD.FTD_ORDR_RFRNC,
							 FTD.FTD_ORD_ACK_NMBR,
							 FTD.FTD_XCHNG_TRD_NO,
							 FTD.FTD_EBA_TRD_REF,
							 FTD.FTD_PRDCT_TYP,
							 FTD.FTD_INDSTK,
							 NVL(FTD.FTD_UNDRLYNG,'*'),
							 FTD.FTD_EXPRY_DT,
							 NVL(FTD.FTD_OPT_TYP,'*'),
							 NVL(FTD.FTD_EXER_TYP,'*'),
							 NVL(FTD.FTD_STRK_PRC,0),
							 NVL(FTD.FTD_TRD_FLW,'*'),
							 NVL(FTD.FTD_FRESH_QTY,0),
							 NVL(FTD.FTD_EXCTD_RT,0),
							 NVL(FTD.FTD_CLM_MTCH_ACCNT,'*'),
							 NVL(FTD.FTD_FRS_BRKG,0),
							 NVL(FTD.FTD_CVR_BRKG,0),
							 NVL(FTD.FTD_COVER_QTY,0),
               TO_CHAR(FTD.FTD_TRD_DT,'dd-Mon-yyyy hh24:mi:ss'),
							 NVL(FTD.FTD_TRNSCTN_TYP,'F'),
							 NVL(FOD.FOD_SETTLOR,0),
							 NVL(FOD.FOD_PRO_CLI_IND,0) ,
               to_char (FXB_ACK_TM,'dd-Mon-yyyy hh24:mi:ss')  /** 1.1 **/
/* 1.1		FROM  FTD_FO_TRD_DTLS FTD, FOD_FO_ORDR_DTLS FOD
		WHERE  FTD.FTD_ORDR_RFRNC = FOD.FOD_ORDR_RFRNC 
		AND   FTD. FTD_XCHNG_CD = :c_xchng_cd
		AND   FTD.FTD_TRD_DT >= to_date(:c_trd_dt,'dd-Mon-yyyy')
		AND FTD.FTD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
		AND FTD. FTD_UPLD_MTCH_FLG = 'N'; */

/*    FROM   FTD_FO_TRD_DTLS FTD, FOD_FO_ORDR_DTLS FOD ,FXB_FO_XCHNG_BOOK FXB
		WHERE  FTD.FTD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
    AND    FTD. FTD_XCHNG_CD = :c_xchng_cd
    AND    FTD.FTD_TRD_DT >= to_date(:c_trd_dt,'dd-Mon-yyyy')
    AND    FTD.FTD_ORDR_RFRNC = FXB.FXB_ORDR_RFRNC 
    AND    FTD.FTD_ORDR_RFRNC = FOD.FOD_ORDR_RFRNC 				
    AND    FXB_MDFCTN_CNTR  in ( SELECT max(FXB_MDFCTN_CNTR)
                                 FROM   FXB_FO_XCHNG_BOOK
                                 WHERE  FXB_ORDR_RFRNC = FTD.FTD_ORDR_RFRNC
                                 AND    FXB_PLCD_STTS  = 'A'
                                 AND    FXB_MOD_TRD_DT >= to_date(:c_trd_dt,'dd-Mon-yyyy') ) 
		AND    FTD. FTD_UPLD_MTCH_FLG = 'N'; */ 

/*** Ver 1.2 ***/
FROM   FTD_FO_TRD_DTLS FTD, FOD_FO_ORDR_DTLS FOD ,FXB_FO_XCHNG_BOOK FXB
WHERE  FTD.FTD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
AND    FTD.FTD_ORDR_RFRNC = FXB.FXB_ORDR_RFRNC
AND    FTD.FTD_ORDR_RFRNC = FOD.FOD_ORDR_RFRNC
AND    FTD. FTD_XCHNG_CD = 'NFO'
AND    FTD.FTD_TRD_DT >= to_date(:c_trd_dt,'dd-Mon-yyyy')
AND   (FXB.FXB_MDFCTN_CNTR, fxb.fxb_ack_tm) = (SELECT max(FXB_MDFCTN_CNTR), f1.FXB_ACK_TM
                            FROM   FXB_FO_XCHNG_BOOK f1
                            WHERE  f1.FXB_ORDR_RFRNC = FTD.FTD_ORDR_RFRNC
                            AND    f1.FXB_PLCD_STTS  in ('A','T')
                            and    f1.FXB_ACK_TM = ( SELECT max(FXB_ACK_TM)
                                                    FROM   FXB_FO_XCHNG_BOOK f2
                                                    WHERE  f2.FXB_ORDR_RFRNC =  FTD.FTD_ORDR_RFRNC
                                                    AND    f2.FXB_PLCD_STTS  in ('A','T')
                                                    AND    f2.FXB_ACK_TM <=(FTD.FTD_TRD_DT+1/(60*60*24))) 
																										group by f1.FXB_ACK_TM)
    AND    FTD. FTD_UPLD_MTCH_FLG = 'N';

  	END;
    END-EXEC;

	}
	else
	{
	tpfree((char *)ptr_fml_Obuf);
  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	fn_errlog( c_ServiceName, "S31020", "INVALID RQST TYP" , c_err_msg );
  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	ptr_fml_Obuf = (FBFR32 *)tpalloc("FML32", NULL , MIN_FML_BUF_LEN ) ;
	if(ptr_fml_Obuf == NULL)
	{
		fn_errlog( c_ServiceName, "S31025", TPMSG , c_err_msg );
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}	

	while (1)
	{
	memset(c_trd_ack_tm,'\0',sizeof(c_trd_ack_tm));  
  /*memset(ptr_st_tradebook->c_xchng_cd,'\0',sizeof(ptr_st_tradebook->c_xchng_cd));
  memset(ptr_st_tradebook->c_ordr_rfrnc,'\0',sizeof(ptr_st_tradebook->c_ordr_rfrnc));
 memset(ptr_st_tradebook->c_xchng_ack,'\0',sizeof(ptr_st_tradebook->c_xchng_ack));
  memset(ptr_st_tradebook->c_trd_rfrnc,'\0',sizeof(ptr_st_tradebook->c_trd_rfrnc));
  memset(ptr_st_tradebook->c_undrlyng,'\0',sizeof(ptr_st_tradebook->c_undrlyng));
  memset(ptr_st_tradebook->c_expry_dt,'\0',sizeof(ptr_st_tradebook->c_expry_dt));
 memset(ptr_st_tradebook->c_cln_mtch_accnt,'\0',sizeof(ptr_st_tradebook->c_cln_mtch_accnt));
  memset(ptr_st_tradebook->c_trd_dt,'\0',sizeof(ptr_st_tradebook->c_trd_dt));*/


  EXEC SQL FETCH :mtch_upld_cursor  
	INTO 
    : ptr_st_tradebook->c_xchng_cd,
		: ptr_st_tradebook->c_ordr_rfrnc,
		: ptr_st_tradebook->c_xchng_ack,
		: ptr_st_tradebook->l_xchng_trd_no,
		: ptr_st_tradebook->c_trd_rfrnc,
		: ptr_st_tradebook->c_prd_typ,
		: ptr_st_tradebook->c_ctgry_indstk,
		: ptr_st_tradebook->c_undrlyng,
		: ptr_st_tradebook->c_expry_dt,
		: ptr_st_tradebook->c_opt_typ,
		: ptr_st_tradebook->c_exrc_typ,
		: ptr_st_tradebook->l_strike_prc,
		: ptr_st_tradebook->c_trd_flw	,
		: ptr_st_tradebook->l_fresh_qty,
		: ptr_st_tradebook->l_exctd_rt,
		: ptr_st_tradebook->c_cln_mtch_accnt,
		: ptr_st_tradebook->l_frs_brkg_val,
		: ptr_st_tradebook->l_cvr_brkg_val,
		: ptr_st_tradebook->l_cover_qty,
		: ptr_st_tradebook->c_trd_dt,
		: ptr_st_tradebook->c_trnsctn_typ,
		: c_settlor,
		: c_pro_cli_flg ,
    : c_trd_ack_tm; /** 1.1 **/
	

    if( SQLCODE != 0 )
    {
      if(SQLCODE == NO_DATA_FOUND )
      {
        break;    													/*End  of  data  selection*/
      }
			EXEC SQL CLOSE :mtch_upld_cursor;
    	EXEC SQL FREE :mtch_upld_cursor;
			tpfree((char *)ptr_fml_Obuf);
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			fn_errlog( c_ServiceName, "S31030", SQLMSG , c_err_msg );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		rtrim(ptr_st_tradebook->c_xchng_ack);
		rtrim(ptr_st_tradebook->c_undrlyng);
		rtrim(ptr_st_tradebook->c_trd_dt);
		rtrim(ptr_st_tradebook->c_trnsctn_typ);
		rtrim(ptr_st_tradebook->c_cln_mtch_accnt);
		rtrim(c_settlor);

		/***************************************************************/
		/* concatenating 1 for the fresh trade 												 */
		/***************************************************************/
   	strcpy(c_eba_trd_no,"");  /* initialize */
		strcpy(c_eba_trd_no ,ptr_st_tradebook->c_trd_rfrnc);
		strcat(c_eba_trd_no , "1");
	

 if(ptr_st_tradebook->l_fresh_qty > 0 ) /*Added to prevent the posting of 0 fresh qty */
 {
if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.3 : Debug level Change  */
	fn_userlog(c_ServiceName , "INSIDE THE LOGIC OF FRESH QTY");
	fn_userlog(c_ServiceName , "c_xchng_cd is :%s: ",ptr_st_tradebook->c_xchng_cd); 
/*  fn_userlog(c_ServiceName , "c_xchng_cd is :%s: ",c_xchng_cd);*/
	fn_userlog(c_ServiceName , "c_ordr_rfrnc is :%s: ",ptr_st_tradebook->c_ordr_rfrnc);
	fn_userlog(c_ServiceName , "c_xchng_ack is :%s: ",ptr_st_tradebook->c_xchng_ack);
	fn_userlog(c_ServiceName , "c_trd_rfrnc is :%s: ",ptr_st_tradebook->c_trd_rfrnc);
	fn_userlog(c_ServiceName , "c_prd_typ is :%c: ",ptr_st_tradebook->c_prd_typ);
	fn_userlog(c_ServiceName , "c_ctgry_indstk is :%c: ",ptr_st_tradebook->c_ctgry_indstk);
	fn_userlog(c_ServiceName , "c_undrlyng is :%s: ",ptr_st_tradebook->c_undrlyng);
	fn_userlog(c_ServiceName , "c_expry_dt is :%s: ",ptr_st_tradebook->c_expry_dt);
	fn_userlog(c_ServiceName , "c_opt_typ is :%c: ",ptr_st_tradebook->c_opt_typ);
	fn_userlog(c_ServiceName , "c_exrc_typ is :%c: ",ptr_st_tradebook->c_exrc_typ);
	fn_userlog(c_ServiceName , "l_strike_prc is :%ld: ",ptr_st_tradebook->l_strike_prc);
	fn_userlog(c_ServiceName , "c_trd_flw is :%c: ",ptr_st_tradebook->c_trd_flw);
	fn_userlog(c_ServiceName , "l_fresh_qty is :%ld: ",ptr_st_tradebook->l_fresh_qty);
	fn_userlog(c_ServiceName , "l_exctd_rt is :%ld: ",ptr_st_tradebook->l_exctd_rt);
	fn_userlog(c_ServiceName , "c_cln_mtch_accnt is :%s: ",ptr_st_tradebook->c_cln_mtch_accnt);
	fn_userlog(c_ServiceName , "l_frs_brkg_val is :%ld: ",ptr_st_tradebook->l_frs_brkg_val);
	fn_userlog(c_ServiceName , "l_cvr_brkg_val is :%ld: ",ptr_st_tradebook->l_cvr_brkg_val);
	fn_userlog(c_ServiceName , "l_cover_qty is :%ld: ",ptr_st_tradebook->l_cover_qty);
	fn_userlog(c_ServiceName , "c_trd_dt is :%s: ",ptr_st_tradebook->c_trd_dt);
	fn_userlog(c_ServiceName , "c_trnsctn_typ is :%s: ",ptr_st_tradebook->c_trnsctn_typ);
	fn_userlog(c_ServiceName , "c_settlor is :%s: ",c_settlor);
	fn_userlog(c_ServiceName , "c_pro_cli_flg is :%c: ",c_pro_cli_flg);
  fn_userlog(c_ServiceName , "c_trd_ack_tm is :%s: ",c_trd_ack_tm); /** 1.1 **/
}

  for(i =0;i<22 ;i++)
  {
		i_err[i] =0 ;			
  }
	  

  i_err[0] = Fadd32(ptr_fml_Obuf,FFO_XCHNG_CD,	(char *)&ptr_st_tradebook->c_xchng_cd,0) ;


	i_err[1] = Fadd32(ptr_fml_Obuf,FFO_ACK_NMBR,(char *)ptr_st_tradebook->c_xchng_ack,0) ;
	i_err[2] = Fadd32(ptr_fml_Obuf,FFO_XCHNG_TRD_NO,(char *)&ptr_st_tradebook->l_xchng_trd_no,0) ;
	
  fn_userlog( c_ServiceName, "323  c_eba_trd_rfrnc  [%s]", c_eba_trd_no );
  fn_userlog( c_ServiceName, "323  c_trd_rfrnc  [%s]", ptr_st_tradebook->c_trd_rfrnc );
  
/*  i_err[3] = Fadd32(ptr_fml_Obuf,FFO_TRD_RFRNC,(char *)c_eba_trd_no,0) ; */
  i_err[3] = Fadd32(ptr_fml_Obuf,FFO_TRD_RFRNC,(char *)ptr_st_tradebook->c_trd_rfrnc,0) ; 

	i_err[4] = Fadd32(ptr_fml_Obuf,FFO_PRDCT_TYP,(char *)&ptr_st_tradebook->c_prd_typ,0) ;
	i_err[5] = Fadd32(ptr_fml_Obuf,FFO_CTGRY_INDSTK,(char *)&ptr_st_tradebook->c_ctgry_indstk,0) ;
	i_err[6] = Fadd32(ptr_fml_Obuf,FFO_UNDRLYNG,(char *)ptr_st_tradebook->c_undrlyng,0) ;
	i_err[7] = Fadd32(ptr_fml_Obuf,FFO_EXPRY_DT,(char *)ptr_st_tradebook->c_expry_dt,0) ;
	i_err[8] = Fadd32(ptr_fml_Obuf,FFO_OPT_TYP,(char *)&ptr_st_tradebook->c_opt_typ,0) ;
	i_err[9] = Fadd32(ptr_fml_Obuf,FFO_EXER_TYP,(char *)&ptr_st_tradebook->c_exrc_typ,0) ;
	i_err[10] = Fadd32(ptr_fml_Obuf,FFO_STRK_PRC,(char *)&ptr_st_tradebook->l_strike_prc,0) ;
	i_err[11] = Fadd32(ptr_fml_Obuf,FFO_TRD_FLW,(char *)&ptr_st_tradebook->c_trd_flw,0) ;
	i_err[12] = Fadd32(ptr_fml_Obuf,FFO_EXEC_QTY,(char *)&ptr_st_tradebook->l_fresh_qty,0) ;
	i_err[13] = Fadd32(ptr_fml_Obuf,FFO_EXCTD_RT,(char *)&ptr_st_tradebook->l_exctd_rt,0) ;
	i_err[14] = Fadd32(ptr_fml_Obuf,FFO_EBA_MTCH_ACT_NO,(char *)ptr_st_tradebook->c_cln_mtch_accnt,0) ;
	i_err[15] = Fadd32(ptr_fml_Obuf,FFO_BRKRG_VL,(char *)&ptr_st_tradebook->l_frs_brkg_val,0) ;
	i_err[16] = Fadd32(ptr_fml_Obuf,FFO_TM_STMP,(char *)ptr_st_tradebook->c_trd_dt,0) ;
	i_err[17] = Fadd32(ptr_fml_Obuf,FFO_TRNSCTN_TYP,(char *)ptr_st_tradebook->c_trnsctn_typ,0) ;
	i_err[18] = Fadd32(ptr_fml_Obuf,FFO_SETTLOR,(char *)c_settlor,0) ;
	i_err[19] = Fadd32(ptr_fml_Obuf,FFO_SPL_FLG,(char *)&c_pro_cli_flg,0);
	i_err[20] = Fadd32(ptr_fml_Obuf,FFO_ORDR_RFRNC,	(char *)ptr_st_tradebook->c_ordr_rfrnc,0) ;
	/*if((Fadd32(ptr_fml_Obuf,FFO_STATUS_FLG,(char *)c_pro_cli_flg,0); To get confirmation */

  /** 1.1 **/
  i_err[21] = Fadd32(ptr_fml_Obuf,FFO_EXECN_DT,	(char *)c_trd_ack_tm,0) ;
  /** 1.1 **/
  

/**1.1		for(i =0;i < 21;i++) **/
		for(i=0;i<22 ;i++)
    {
			if(i_err[i] == -1)
			{
				fn_userlog(c_ServiceName,"Failed in Fadd at :%d:", i);	
			  EXEC SQL CLOSE :mtch_upld_cursor;
   		 	EXEC SQL FREE :mtch_upld_cursor;
   		 	tpfree((char *)ptr_fml_Obuf);
   		 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   		 	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}
 }	
 if(ptr_st_tradebook->l_cover_qty > 0 )
 {
if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.3 : Debug level Change  */
	fn_userlog(c_ServiceName , "INSIDE THE LOGIC OF COVER QTY");
	fn_userlog(c_ServiceName , "c_xchng_cd is :%s: ",ptr_st_tradebook->c_xchng_cd);
	fn_userlog(c_ServiceName , "c_ordr_rfrnc is :%s: ",ptr_st_tradebook->c_ordr_rfrnc);
	fn_userlog(c_ServiceName , "c_xchng_ack is :%s: ",ptr_st_tradebook->c_xchng_ack);
	fn_userlog(c_ServiceName , "c_trd_rfrnc is :%s: ",ptr_st_tradebook->c_trd_rfrnc);
	fn_userlog(c_ServiceName , "c_prd_typ is :%c: ",ptr_st_tradebook->c_prd_typ);
	fn_userlog(c_ServiceName , "c_ctgry_indstk is :%c: ",ptr_st_tradebook->c_ctgry_indstk);
	fn_userlog(c_ServiceName , "c_undrlyng is :%s: ",ptr_st_tradebook->c_undrlyng);
	fn_userlog(c_ServiceName , "c_expry_dt is :%s: ",ptr_st_tradebook->c_expry_dt);
	fn_userlog(c_ServiceName , "c_opt_typ is :%c: ",ptr_st_tradebook->c_opt_typ);
	fn_userlog(c_ServiceName , "c_exrc_typ is :%c: ",ptr_st_tradebook->c_exrc_typ);
	fn_userlog(c_ServiceName , "l_strike_prc is :%ld: ",ptr_st_tradebook->l_strike_prc);
	fn_userlog(c_ServiceName , "c_trd_flw is :%c: ",ptr_st_tradebook->c_trd_flw);
	fn_userlog(c_ServiceName , "l_fresh_qty is :%ld: ",ptr_st_tradebook->l_fresh_qty);
	fn_userlog(c_ServiceName , "l_exctd_rt is :%ld: ",ptr_st_tradebook->l_exctd_rt);
	fn_userlog(c_ServiceName , "c_cln_mtch_accnt is :%s: ",ptr_st_tradebook->c_cln_mtch_accnt);
	fn_userlog(c_ServiceName , "l_frs_brkg_val is :%ld: ",ptr_st_tradebook->l_frs_brkg_val);
	fn_userlog(c_ServiceName , "l_cvr_brkg_val is :%ld: ",ptr_st_tradebook->l_cvr_brkg_val);
	fn_userlog(c_ServiceName , "l_cover_qty is :%ld: ",ptr_st_tradebook->l_cover_qty);
	fn_userlog(c_ServiceName , "c_trd_dt is :%s: ",ptr_st_tradebook->c_trd_dt);
	fn_userlog(c_ServiceName , "c_trnsctn_typ is :%s: ",ptr_st_tradebook->c_trnsctn_typ);
	fn_userlog(c_ServiceName , "c_settlor is :%s: ",c_settlor);
	fn_userlog(c_ServiceName , "c_pro_cli_flg is :%c: ",c_pro_cli_flg);
  fn_userlog(c_ServiceName , "c_trd_ack_tm is :%s: ",c_trd_ack_tm);
}
		/***************************************************************/
		/* concatenating 2 for the cover trade 												 */
		/***************************************************************/
   strcpy(c_eba_trd_no,"");  /* initialize */
		strcpy(c_eba_trd_no ,ptr_st_tradebook->c_trd_rfrnc);
		strcpy(ptr_st_tradebook->c_trnsctn_typ,"C");	/*Cover */
		strcat(c_eba_trd_no , "2");

	i_err[0] = Fadd32(ptr_fml_Obuf,FFO_XCHNG_CD,	(char *)ptr_st_tradebook->c_xchng_cd,0) ;
	i_err[1] = Fadd32(ptr_fml_Obuf,FFO_ACK_NMBR,(char *)ptr_st_tradebook->c_xchng_ack,0) ;
	i_err[2] = Fadd32(ptr_fml_Obuf,FFO_XCHNG_TRD_NO,(char *)&ptr_st_tradebook->l_xchng_trd_no,0) ;
	
  
  i_err[3] = Fadd32(ptr_fml_Obuf,FFO_TRD_RFRNC,(char *)ptr_st_tradebook->c_trd_rfrnc,0) ;
	i_err[4] = Fadd32(ptr_fml_Obuf,FFO_PRDCT_TYP,(char *)&ptr_st_tradebook->c_prd_typ,0) ;
	i_err[5] = Fadd32(ptr_fml_Obuf,FFO_CTGRY_INDSTK,(char *)&ptr_st_tradebook->c_ctgry_indstk,0) ;
	i_err[6] = Fadd32(ptr_fml_Obuf,FFO_UNDRLYNG,(char *)ptr_st_tradebook->c_undrlyng,0) ;
	i_err[7] = Fadd32(ptr_fml_Obuf,FFO_EXPRY_DT,(char *)ptr_st_tradebook->c_expry_dt,0) ;
	i_err[8] = Fadd32(ptr_fml_Obuf,FFO_OPT_TYP,(char *)&ptr_st_tradebook->c_opt_typ,0) ;
	i_err[9] = Fadd32(ptr_fml_Obuf,FFO_EXER_TYP,(char *)&ptr_st_tradebook->c_exrc_typ,0) ;
	i_err[10] = Fadd32(ptr_fml_Obuf,FFO_STRK_PRC,(char *)&ptr_st_tradebook->l_strike_prc,0) ;
	i_err[11] = Fadd32(ptr_fml_Obuf,FFO_TRD_FLW,(char *)&ptr_st_tradebook->c_trd_flw,0) ;
	i_err[12] = Fadd32(ptr_fml_Obuf,FFO_EXEC_QTY,(char *)&ptr_st_tradebook->l_cover_qty,0) ;
	i_err[13] = Fadd32(ptr_fml_Obuf,FFO_EXCTD_RT,(char *)&ptr_st_tradebook->l_exctd_rt,0) ;
	i_err[14] = Fadd32(ptr_fml_Obuf,FFO_EBA_MTCH_ACT_NO,(char *)ptr_st_tradebook->c_cln_mtch_accnt,0) ;
	i_err[15] = Fadd32(ptr_fml_Obuf,FFO_BRKRG_VL,(char *)&ptr_st_tradebook->l_cvr_brkg_val,0) ;
	i_err[16] = Fadd32(ptr_fml_Obuf,FFO_TM_STMP,(char *)ptr_st_tradebook->c_trd_dt,0) ;
	i_err[17] = Fadd32(ptr_fml_Obuf,FFO_TRNSCTN_TYP,(char *)ptr_st_tradebook->c_trnsctn_typ,0) ;
	i_err[18] = Fadd32(ptr_fml_Obuf,FFO_SETTLOR,(char *)c_settlor,0) ;
	i_err[19] = Fadd32(ptr_fml_Obuf,FFO_SPL_FLG,(char *)&c_pro_cli_flg,0);
	i_err[20] = Fadd32(ptr_fml_Obuf,FFO_ORDR_RFRNC,	(char *)ptr_st_tradebook->c_ordr_rfrnc,0) ;
	/*if((Fadd32(ptr_fml_Obuf,FFO_STATUS_FLG,(char *)c_pro_cli_flg,0); To get confirmation */
  /** 1.1 **/
  i_err[21] = Fadd32(ptr_fml_Obuf,FFO_EXECN_DT,	(char *)c_trd_ack_tm,0) ;
  /** 1.1 **/
	
/** 1.1 		for(i =0;i < 21;i++) **/

		for(i =0;i < 22 ;i++)
    {
			if(i_err[i] == -1)
			{
				fn_userlog(c_ServiceName,"Failed in Fget at :%d:", i_err[i]);	
			  EXEC SQL CLOSE :mtch_upld_cursor;
   	 	EXEC SQL FREE :mtch_upld_cursor;
   	 	tpfree((char *)ptr_fml_Obuf);
   	 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	 	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}
	}

	if(Fneeded32( 1, i_Obuffer_len) > Funused32(ptr_fml_Obuf))	/* Ver 1.3 : l_Obuffer_len converted to i_Obuffer_len */
	{
	/*	ptr_fml_Obuf = (FBFR32 *)tprealloc((char *)ptr_fml_Obuf,i_count*i_Obuffer_len); */

		/* Ver 1.4 Starts */
			ptr_fml_Obuf = (FBFR32 *)tprealloc((char *)ptr_fml_Obuf,(Fsizeof32(ptr_fml_Obuf) + (i_count * i_Obuffer_len )));
		/* Ver 1.4 Ends */	
			
		
		/* Ver 1.3 : l_Obuffer_len converted to i_Obuffer_len */
		i_count++ ;
	}
	

 }/* end of while */	
	
	EXEC SQL CLOSE :mtch_upld_cursor;
  EXEC SQL FREE :mtch_upld_cursor;
  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
 }

