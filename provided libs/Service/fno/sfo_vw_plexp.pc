/*                                                                            */
/*  Input             : User Id                   FFO_USR_ID                  */
/*                      Session ID                FFO_SSSN_ID                 */
/*                      Route  create             FFO_ROUT_CRT                */
/*                      Run Number 								FFO_RUN_NUM                 */
/*                      Trade date								FFO_TRD_DT        	        */
/*                      Number of clients					FFO_NMR										  */
/*                      Selection criteria				FFO_REQ_TYP								  */
/*                      [Exposure - E / Pnl - P / Oop -O ]                    */
/*                      Lower value								FFO_LOW_PRC         		   	*/
/*                      Higher value							FFO_HGH_PRC            			*/
/*                      Filter level							FFO_ABT_FILTER         			*/
/*                      Details flag							FFO_SPL_FLG                 */
/*                      [VIEW_DETAILS -D / OUT_OF_POC - O ]                   */
/*                      User flag									FFO_IS_FLG      	          */
/*                      Product type							FFO_PRDCT_TYP    	          */
/*                      Match Account 						FFO_MTCH_CNTCT_KEY		      */
/*                     	Underlying								FFO_UNDRLYNG 			          */
/*                                                                            */
/*  Output            : Intial spot level         FFO_NET_TRD_VAL					    */
/*                      Interval									FFO_INTERVAL 		           	*/
/*                      Number of spot levels			FFO_COUNT			            	*/
/*                      Exchange code							FFO_XCHNG_CD	            	*/
/*                      Run Number 								FFO_RUN_NUM                 */
/*                      Trade date								FFO_TRD_DT        	        */
/*  										Nifty Spot level at run   FFO_INDX_VAL                */  
/*											Timestamp at run          FFO_TM_STMP                 */ 
/*                      Status flag								FFO_STATUS_FLG     	        */
/*                      Match Account 						FFO_MTCH_CNTCT_KEY[n]       */
/*                      Net profit and loss				FFO_MAX_PROFIT[n]           */
/*                      Gross Allocation					FFO_AMOUNT[n]	            	*/
/*                      Free Limit								FFO_LIMIT[n]	            	*/
/*                      Margin blocked						FFO_ADD_MRGN_AMT[n]	       	*/
/*                      Cash											FFO_PSTN_AMT_BLKD[n]	     	*/
/*                      Non cash									FFO_ADDL_AMT_BLKD[n]	     	*/
/*                      Options obligation				FFO_OPNPSTN_VAL[n]	       	*/
/*                      Open position value				FFO_BASE_ORD_VAL[n]	       	*/
/*                     	Underlying								FFO_UNDRLYNG[n]             */
/*                     	Product type							FFO_PRDCT_TYP[n]           	*/
/*                     	Option type								FFO_OPT_TYP[n]           		*/
/*                     	Exercise type 						FFO_EXER_TYP[n]            	*/
/*                     	Expiry date								FFO_EXPRY_DT[n]            	*/
/*                     	Strike Price 							FFO_STRIKE_PRC[n]          	*/
/*                      Executed quantity					FFO_EXEC_QTY[n]            	*/
/*                      Open position flow 				FFO_OPNPSTN_FLW[n]          */
/*                      Open position flow 				FFO_CTGRY_INDSTK[n]         */
/*                      Open position flow 				FFO_EFF_LTP[n]   			      */
/*                      Out of pocket levels			FFO_BRK_EVN_PT[n]           */
/*                      Out of pocket at level		FFO_CA_LVL[n]	            	*/
/*                      Out of pocket level in															  */ 
/*											up market                 FFO_HGH_INDX_VAL            */
/*                      Out of pocket level in							                  */ 
/*										  down market               FFO_LOW_INDX_VAL            */
/*                      Error message							FFO_ERR_MSG		            	*/
/*                                                                            */
/*                      n = number of records returned by the service         */
/*                                                                            */
/*  Description       : This service displays the risk details of top[n]			*/ 
/*                      clients based on the profit or loss /exposure 				*/
/*                      at various levels of nifty.                           */
/*                                                                            */
/*  Log               : Ver 1.0			New Release                               */
/*                      Ver 1.1     CRARE43554-Changes in the Risk Analyzer   */
/*																	tool (Risk Exposure Phase -II)            */   
/******************************************************************************/
/* 08-Dec-2009    Ver 1.0           Indrajit Bhadange                         */
/* 29-Sep-2010		Ver	1.1						Sandeep  Patil and Swati.A.B  						*/
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>

/*Add header files here */

#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h> 
#include <fn_val_ord.h> 
#include <fml_rout.h> 
#include <fn_read_debug_lvl.h> 
#include <fn_pos.h> 

#define BUF_MULTIPLY 						7
#define VIEW_CLIENTS 						1
#define VIEW_DETAILS 						2
#define VIEW_CLIENT_PRDCT_TYP 	3
#define OUT_OF_POC							4  /** Ver 1.1 **/
#define VIEW_CLIENTS_FOR_OFP    5  /** Ver 1.1 **/
#define NUM_OF_LEVELS 10
#define NULLTERM(a) a[strlen(a) - 1]='\0'

void print_qry1(char * str, int i_cnt,char * c_ServiceName);
void uppercase( char* c_input_str);

void SFO_VW_PLEXP( TPSVCINFO *rqst )
{
  char 	c_ServiceName[33];
  char 	c_err_msg[256];
  char 	c_temp_var[10];
  char 	c_usr_flg;
  char 	c_req_typ;
  char 	c_details_flg;
  char 	c_status_flg;
  char 	c_grp_inp_c;
  char 	c_level[3];
  char 	c_delim[8];
  char 	c_delimiter;
  char 	c_filename[100];
  char 	c_filetime[9];
  char 	c_output[5];
  char 	c_fileheader[500];
  char 	c_filedata[90000];
	double d_grp_inp;
	int   i_limit_flg;
	int   i_upcnt=0;         /** Ver 1.1 **/
  int	  i_dwncnt=0;        /** Ver 1.1 **/	
  int   i_net_dwn=0;       /** Ver 1.1 **/
  int   i_net_up=0;        /** Ver 1.1 **/
  int   i_dn_poc_lvl =0;   /** Ver 1.1 **/
  int   i_up_poc_lvl =0;   /** Ver 1.1 **/
  long  li_dwn_sptlvl=0;   /** Ver 1.1 **/
  long  li_uppr_sptlvl=0;  /** Ver 1.1 **/
	int   i_row_id =0;       /** Ver 1.1 **/
	int   k = 0;             /** Ver 1.1 For View detail case **/
	int   l = 0;             /** Ver 1.1 For View detail case **/

	FILE  *fp ;	
	


  EXEC SQL BEGIN DECLARE SECTION;
		struct vw_usr_prfl st_usr_prfl;
  	varchar	c_match_acc[13];
  	varchar	c_sprd_match_acc[13];
  	varchar	c_match_acc_in[13];
  	varchar	c_match_acc_temp[13];
		varchar	c_undrlyng[7];
		varchar	c_undrlyng_temp[7];
		varchar	c_sprd_undrlyng[7];
		varchar	c_prev_undrlyng[7];
		varchar	c_xchng_cd[4];
		varchar stmnt[4900];
		varchar c_pnl[900];
		varchar c_grp_pnl[900];
		varchar c_total_pnl[900];
		varchar c_out_of_poc[900];
		varchar c_grp_out_of_poc[900];
		varchar c_total_out_of_poc[900];
		varchar c_intrvl_up[900];       /** Ver 1.1 **/ 
		varchar c_intrvl_dwn[900];      /** Ver 1.1 **/
		varchar c_count_up[900];        /** Ver 1.1 **/
		varchar c_count_dwn[900];       /** Ver 1.1 **/
		varchar c_up_prc[900];          /** Ver 1.1 **/
		varchar c_dwn_prc[900];         /** Ver 1.1 **/
		varchar c_run_timestamp[31];    /** Ver 1.1 **/
		varchar c_copy_out_of_poc[900]; /** Ver 1.1 **/

		char c_user_id[256];
  	char	c_prdct_typ;
  	char	c_prdct_typ_temp;
		char	c_undrlyng_ind;
  	char	c_exer_typ;
  	char	c_sprd_tag;
  	char 	c_opt_typ;
  	char 	c_ctgry_indstk;
		char 	c_rout_crt[256];
  	varchar	c_expry_dt[LEN_DATE];
  	varchar c_grp_inp_s[2];
  	varchar	c_trd_dt[LEN_DATE];

		char	c_ordr_flw;
		double d_strk_prc = 0.0;
		double d_ltp = 0.0;
		double d_grs_alloc = 0.0;
		double d_mrgn_blocked = 0.0;
		double d_sprd_mrgn = 0.0;
		double d_total_sprd_mrgn = 0.0;
		double d_grp_mrgn_blocked = 0.0;
		double d_total_mrgn_blocked = 0.0;
		double d_free_limit = 0.0;
		double d_cash = 0.0;
		double d_non_cash = 0.0;
		double d_opt_obgltn = 0.0;
		double d_grp_opt_obgltn = 0.0;
		double d_total_opt_obgltn = 0.0;
		double d_sort_col = 0;
		double d_opn_pstn_val = 0.0;
		double d_out_of_pocket_by = 0.0;
		double d_arr_total_pnl[NUM_OF_LEVELS] = {0.0};	
		double d_arr_grp_pnl[NUM_OF_LEVELS] = {0.0};	
		double d_arr_total_opoc[NUM_OF_LEVELS] = {0.0};	
		double d_arr_grp_opoc[NUM_OF_LEVELS] = {0.0};	
		double d_arr_dwn_prc[NUM_OF_LEVELS] = {0.0};     /** Ver 1.1 **/ 
		double d_arr_up_prc[NUM_OF_LEVELS] = {0.0};      /** Ver 1.1 **/
		double d_arr_total_ofp[NUM_OF_LEVELS] = {0.0};   /** Ver 1.1 **/
		double d_levels[NUM_OF_LEVELS] = {0.0};          /** Ver 1.1 **/
		double d_nifty_spot = 0.0 ;                      /** Ver 1.1 **/

	  long l_count_dwn[NUM_OF_LEVELS] = {0};           /** Ver 1.1 **/
    long l_count_up[NUM_OF_LEVELS] = {0};            /** Ver 1.1 **/
		long i_arr_intrvl_dwn[NUM_OF_LEVELS] = {0};      /** Ver 1.1 **/
		long i_arr_intrvl_up[NUM_OF_LEVELS] = {0};       /** Ver 1.1 **/
		long l_out_of_poc_at = 0;
		long l_grp_out_of_poc_at = 0;
		long l_total_out_of_poc_at = 0;
		long l_run_num = 0;
		long l_cnt = 0;
		long l_no_of_clients = 0;
		long l_max_clnts = 0;
		long l_lower_limit = 0;
		long l_upper_limit = 0;
		long l_init_spot = 0;
    long li_nifty_spot = 0;                           /** Ver 1.1 **/  
    long l_nifty_spot = 0;                            /** Ver 1.1 **/  
		long l_interval = 0;
		long l_no_of_levels = 0;
		long l_quantity = 0;
		long l_grp_quantity = 0;
		long l_total_quantity = 0;
		long l_req_buff_sz = 0;

		sql_cursor crt_cur;                               /**  Ver 1.1 **/
	
  EXEC SQL END DECLARE SECTION;

	long l_session_id = 0.0;
	long li_recvbuf;

	int		i_err[ 25 ]; 
	int		i_ferr[ 25 ]; 
	int		i = 0;
	int		j = 0;
	int 	i_ch_val = 0;
	int		i_request = 0;

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  struct vw_err_msg 	st_err_msg;

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy(c_ServiceName, rqst->name);
	INITDBGLVL(c_ServiceName);

 	i_ch_val = Fvftos32( ptr_fml_Ibuf,
                      (char *) &st_usr_prfl,
                      "vw_usr_prfl" );
  if ( i_ch_val == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	
	/*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

  i_ch_val = fn_chk_sssn( c_ServiceName, &st_usr_prfl, &st_err_msg );
  if ( i_ch_val == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", LIBMSG, st_err_msg.c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if(DEBUG_MSG_LVL_3)
	{
    fn_userlog( c_ServiceName, "User id       :%s:",
                                  st_usr_prfl.c_user_id );
    fn_userlog( c_ServiceName, "Session id    :%ld:",
                                  st_usr_prfl.l_session_id );
    fn_userlog( c_ServiceName, "Match Account :%s:",
                                  st_usr_prfl.c_cln_mtch_accnt );
    fn_userlog( c_ServiceName, "Pipe id :%s:",
                                  st_usr_prfl.c_pipe_id );
  }
	strcpy(c_user_id,st_usr_prfl.c_user_id);
	l_session_id = st_usr_prfl.l_session_id;
	strcpy(c_rout_crt,(char *)st_usr_prfl.c_rout_crt);
	strcpy(c_delim,"||'^'||");
	c_delimiter = '^';

  fn_init_ddr_pop ( st_usr_prfl.c_pipe_id,TRADING_SECTION,COMMON);
	
	tpfree ( ( char * )ptr_fml_Obuf);
  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN * BUF_MULTIPLY );
  if (ptr_fml_Obuf == NULL)
  {
    fn_errlog(c_ServiceName, "S31015", TPMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
  }

	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_RUN_NUM ,0,(char *)&l_run_num, 0);
  i_ferr [ 0 ] = Ferror32;
	if(i_err[0] == -1)
  {
  	fn_userlog(c_ServiceName,"RUN NUMER NOT PRESENT");
    fn_errlog( c_ServiceName, "S31020",Fstrerror32(i_ferr[0]),c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char *)ptr_fml_Obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_TRD_DT ,0,(char *)c_trd_dt.arr, 0);
  i_ferr [ 0 ] = Ferror32;
	if(i_err[0] == -1)
  {
    fn_userlog(c_ServiceName,"TRADE DATE NOT PRESENT");
    fn_errlog( c_ServiceName, "S31025",Fstrerror32(i_ferr[0]),c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char *)ptr_fml_Obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	SETLEN(c_trd_dt);

	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_NMR ,0,(char *)&l_no_of_clients, 0);
  i_ferr [ 0 ] = Ferror32;
	if(i_err[0] == -1)
  {
    fn_userlog(c_ServiceName,"NUMBER OF CLIENTS NOT PRESENT");
    fn_errlog( c_ServiceName, "S31030",Fstrerror32(i_ferr[0]),c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char *)ptr_fml_Obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	
	EXEC SQL
	SELECT PAR_MAX_RSK_CLNTS
	INTO :l_max_clnts
	from PAR_SYSTM_PRMTR;
	
	if(SQLCODE != 0)
	{
		fn_errlog( c_ServiceName, "S31035",SQLMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char *)ptr_fml_Obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	if( l_no_of_clients == 0)
	{
		strcpy(c_output,"FILE");
	}	
	else
	{
		strcpy(c_output,"FMLS");
	}	
		
	if(l_no_of_clients >l_max_clnts)
	{
    fn_userlog(c_ServiceName,"NUMBER OF CLIENTS NOT CANNOT BE GREATER THAN :%ld:",l_max_clnts);
    fn_errlog( c_ServiceName, "S31040","NUMBER OF CLIENTS EXCEEDS SET LIMIT",c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, "Number of clients exceed the set limit", 0 );
    tpfree((char *)ptr_fml_Obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	l_no_of_clients = l_no_of_clients +1;

	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_REQ_TYP ,0,(char *)&c_req_typ, 0);
  i_ferr [ 0 ] = Ferror32;
	if(i_err[0] == -1)
  {
    fn_userlog(c_ServiceName,"REQUEST TYPE (EXPOSURE/PROFIT-LOSS) NOT PRESENT"); 
    fn_errlog( c_ServiceName, "S31045",Fstrerror32(i_ferr[0]),c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char *)ptr_fml_Obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_LOW_PRC ,0,(char *)&l_lower_limit, 0);
  i_ferr [ 0 ] = Ferror32;
	if(i_err[0] == -1)
  {
		if(i_ferr [ 0 ] == FNOTPRES)
		{
    	fn_userlog(c_ServiceName,"LOWER LIMIT NOT PRESENT, SETTING DEFAULT TO **** 0");
			l_lower_limit = 0;
		}
		else
		{
    	fn_errlog( c_ServiceName, "S31050",Fstrerror32(i_ferr[0]),c_err_msg);
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpfree((char *)ptr_fml_Obuf);
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}

	l_lower_limit = l_lower_limit*100;

	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_HGH_PRC ,0,(char *)&l_upper_limit, 0);
  i_ferr [ 0 ] = Ferror32;
	if(i_err[0] == -1)
  {
		if(i_ferr [ 0 ] == FNOTPRES)
		{
    	fn_userlog(c_ServiceName,"UPPER LIMIT NOT PRESENT, SETTING DEFAULT TO **** -10000000");
			l_upper_limit = -10000000;
		}
		else
		{
    	fn_errlog( c_ServiceName, "S31055",Fstrerror32(i_ferr[0]),c_err_msg);
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpfree((char *)ptr_fml_Obuf);
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}

	l_upper_limit = l_upper_limit*100;

	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_ABT_FILTER ,0,(char *)c_level, 0);
  i_ferr [ 0 ] = Ferror32;
	if(i_err[0] == -1)
  {
    fn_userlog(c_ServiceName,"FILTER LEVEL NOT PRESENT");
    fn_errlog( c_ServiceName, "S31060",Fstrerror32(i_ferr[0]),c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char *)ptr_fml_Obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_SPL_FLG ,0,(char *)&c_details_flg, 0);
  i_ferr [ 0 ] = Ferror32;
	if(i_err[0] == -1)
  {
    fn_userlog(c_ServiceName,"DETAILS FLAG NOT PRESENT"); 
    fn_errlog( c_ServiceName, "S31065",Fstrerror32(i_ferr[0]),c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char *)ptr_fml_Obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_IS_FLG ,0,(char *)&c_usr_flg, 0);
  i_ferr [ 0 ] = Ferror32;
	if(i_err[0] == -1)
  {
    fn_userlog(c_ServiceName,"USER TYPE NOT PRESENT"); 
    fn_errlog( c_ServiceName, "S31070",Fstrerror32(i_ferr[0]),c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char *)ptr_fml_Obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	if(l_lower_limit == 0 && l_upper_limit == 0)
	{
		i_limit_flg = 0;
	}
	else
	{
		i_limit_flg = 1;
	}

	if(DEBUG_MSG_LVL_0)
  {
		fn_userlog(c_ServiceName,"MANDATORY INPUT");
		fn_userlog(c_ServiceName,"***************************");
		fn_userlog(c_ServiceName," SFO_VW_PLEXP STARTED ----");
		fn_userlog(c_ServiceName,"Run No. is  :%ld:",l_run_num );
		fn_userlog(c_ServiceName,"Run date. is  :%s:",c_trd_dt.arr);
		fn_userlog(c_ServiceName,"No. of clients requested is  :%ld:",l_no_of_clients );
		fn_userlog(c_ServiceName,"Sort criteria is :%c:",c_req_typ );
		fn_userlog(c_ServiceName,"Lower limit is :%ld:",l_lower_limit );
		fn_userlog(c_ServiceName,"Upper limit is :%ld:",l_upper_limit );
		fn_userlog(c_ServiceName,"limit flag is :%d:",i_limit_flg );
		fn_userlog(c_ServiceName,"Filter level is :%s:",c_level );
		fn_userlog(c_ServiceName,"Details Flag is :%c:",c_details_flg );
		fn_userlog(c_ServiceName,"User Flag is :%c:",c_usr_flg );
		fn_userlog(c_ServiceName,"***************************");
	}
	

	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_PRDCT_TYP ,0,(char *)&c_prdct_typ, 0);
  i_ferr [ 0 ] = Ferror32;
	if(i_err[0] == -1)
  {
		if(i_ferr [ 0 ] == FNOTPRES)
		{
    	fn_userlog(c_ServiceName,"PRODUCT TYPE NOT PRESENT, SETTING DEFAULT TO **** :*: ");
			c_prdct_typ = '*';
		}
		else
		{
    	fn_errlog( c_ServiceName, "S31075",Fstrerror32(i_ferr[0]),c_err_msg);
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpfree((char *)ptr_fml_Obuf);
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}

	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_MTCH_CNTCT_KEY ,0,(char *)c_match_acc_in.arr, 0);
  i_ferr [ 0 ] = Ferror32;
	if(i_err[0] == -1)
  {
		if(i_ferr [ 0 ] == FNOTPRES)
		{
    	fn_userlog(c_ServiceName,"MATCH ACCOUNT NOT PRESENT, SETTING DEFAULT TO **** :null_acc:");
			strcpy(c_match_acc_in.arr,"null_acc");
		}
		else
		{
    	fn_errlog( c_ServiceName, "S31080",Fstrerror32(i_ferr[0]),c_err_msg);
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpfree((char *)ptr_fml_Obuf);
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			
		}
	}
	SETLEN(c_match_acc_in);
	
	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_UNDRLYNG ,0,(char *)c_undrlyng.arr, 0);
  i_ferr [ 0 ] = Ferror32;
	if(i_err[0] == -1)
  {
		if(i_ferr [ 0 ] == FNOTPRES)
		{
    	fn_userlog(c_ServiceName,"UNDERLYING NOT PRESENT, SETTING DEFAULT TO **** :DFLT:");
			strcpy(c_undrlyng.arr,"DFLT");
		}
		else
		{
    	fn_errlog( c_ServiceName, "S31085",Fstrerror32(i_ferr[0]),c_err_msg);
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpfree((char *)ptr_fml_Obuf);
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
	SETLEN(c_undrlyng);	
	uppercase(c_undrlyng.arr);
	

	if(DEBUG_MSG_LVL_0)
  {
		fn_userlog(c_ServiceName,"OPTIONAL INPUT");
		fn_userlog(c_ServiceName,"***************************");
		fn_userlog(c_ServiceName,"Match Account is  :%s:",c_match_acc_in.arr );
		fn_userlog(c_ServiceName,"Underlying is  :%s:",c_undrlyng.arr);
		fn_userlog(c_ServiceName,"Product type is :%c:",c_prdct_typ );
		fn_userlog(c_ServiceName,"***************************");
	}


	fn_userlog(c_ServiceName,"-------------- Processing input-------------------");

	if(c_details_flg == 'D')
	{
		i_request = VIEW_DETAILS;
	}
	else if(c_details_flg == 'O')               /** Ver 1.1 **/
	{
    i_request = OUT_OF_POC;
  }	
	else 
	{
		i_request = VIEW_CLIENTS;

		if(c_prdct_typ != '*')
		{
			i_request = VIEW_CLIENT_PRDCT_TYP;
		}
	}
	
	if(c_req_typ == 'U' || c_req_typ == 'D')    /** Ver 1.1 **/
	{
	 i_request = VIEW_CLIENTS_FOR_OFP ;
	}
		
	
	MEMSET(c_xchng_cd);	

	EXEC SQL             
		SELECT FRC_FO_SPOT_LEV1,
					 FRC_FO_SPOT_INTERVAL,
					 FRC_FO_NO_OF_SPOTLVLS ,
					 FRC_FO_XCHNG_CD,
			   	 nvl(FRC_FO_RUN_SPTLVL,0),
					 nvl(FRC_FO_TIMESTAMP,sysdate)	   /** Ver 1.1 -nifty spot and timestamp added**/
		INTO 	:l_init_spot,
					:l_interval,
					:l_no_of_levels,
					:c_xchng_cd,
					:d_nifty_spot,
					:c_run_timestamp
	FROM 		FRC_FO_RSK_CUMLTV
	WHERE 	FRC_FO_RUN_NO = :l_run_num
	AND 		FRC_FO_TRD_DT = :c_trd_dt
	AND 		ROWNUM <2;

	if ( SQLCODE != 0 )
  {
		fn_errlog( c_ServiceName, "S31090",SQLMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char *)ptr_fml_Obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	l_nifty_spot  = d_nifty_spot*100;          /** Ver 1.1 **/
  li_nifty_spot = d_nifty_spot ;             /** Ver 1.1 **/	

	SETLEN(c_xchng_cd);
  SETLEN(c_run_timestamp);                   /** Ver 1.1 **/ 
		

	i_err[0]= Fadd32( ptr_fml_Obuf, FFO_NET_TRD_VAL, (char *)&l_init_spot, 0 );
 	i_ferr [ 0 ] = Ferror32;
	i_err[1]= Fadd32( ptr_fml_Obuf, FFO_INTERVAL, (char *)&l_interval, 0 );
 	i_ferr [ 1 ] = Ferror32;
	i_err[2]= Fadd32( ptr_fml_Obuf, FFO_COUNT, (char *)&l_no_of_levels, 0 );
 	i_ferr [ 2 ] = Ferror32;
	i_err[3]= Fadd32( ptr_fml_Obuf, FFO_XCHNG_CD, (char *)c_xchng_cd.arr, 0 );
  i_ferr [ 3 ] = Ferror32;
	for(j=0;j<4;j++)
  {
  	if(i_err[j] == -1)
    {
    	fn_errlog( c_ServiceName, "S31095",Fstrerror32(i_ferr[j]),c_err_msg);
      fn_userlog(c_ServiceName,"Error in adding spot level FMLs ,field %d",j );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   	}
  }
	if(DEBUG_MSG_LVL_0)
  {
		fn_userlog(c_ServiceName,"Initial Spot is :%ld:" ,l_init_spot );
		fn_userlog(c_ServiceName,"Interval between two spot levels is :%ld:" ,l_interval );
		fn_userlog(c_ServiceName,"Total number of spot levels is :%ld:" ,l_no_of_levels );
	}
	c_status_flg = 'A';	

	
	strcpy(c_undrlyng_temp.arr,(char*)c_undrlyng.arr);
	SETLEN(c_undrlyng_temp);
	c_prdct_typ_temp = c_prdct_typ;	


	/********** Code for file operations *********/
	if( strcmp(c_output,"FILE") == 0) 
	{
		EXEC SQL
		SELECT to_char(sysdate,'yyyymmdd')
		INTO :c_filetime
		FROM DUAL;
	
		if(SQLCODE != 0)
		{
  		fn_errlog( c_ServiceName, "S31100",SQLMSG,c_err_msg);
    	fn_userlog(c_ServiceName,"Error in selecting file time" );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpfree((char *)ptr_fml_Obuf);
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		sprintf(c_filename,"%s/%s/fno/pnl_all_clients_%ld_%s.csv",tuxgetenv("EBALOG_PATH"),c_filetime,l_run_num,
																														c_trd_dt.arr);

  	fn_userlog(c_ServiceName,"File is :%s: ",c_filename);
		c_delimiter = ',';

		fp = (FILE *)fopen(c_filename,"w") ;
		if(fp == NULL)	
    {
    	fn_userlog(c_ServiceName,"UNABLE TO OPEN FILE %s",c_filename);
    }
		MEMSET(c_fileheader);   
    sprintf(c_fileheader,"Match Account,Run No,Nifty Spot level at run,Timestamp at run:%s ,Pnl @ %ld,Pnl @ %ld,Pnl @ %ld,Pnl @ %ld,Pnl @ %ld,Pnl @ %ld,Pnl @ %ld,Pnl @ %ld,Pnl @ %ld,Pnl @ %ld,Option obligation,Out of pocket level,Out of pocket @ %ld,Out of pocket @ %ld,Out of pocket @ %ld,Out of pocket @ %ld,Out of pocket @ %ld,Out of pocket @ %ld,Out of pocket @ %ld,Out of pocket @ %ld,Out of pocket @ %ld,Out of pocket @ %ld,Out of pocket level for down Market,Out of pocket level for up  Market,Cash,Non Cash,Gross allocation,Free limit,Margin blocked",
								(l_init_spot),(l_init_spot + (1*l_interval)),(l_init_spot + (2*l_interval)),
								(l_init_spot + (3*l_interval)),(l_init_spot + (4*l_interval)),
								(l_init_spot + (5*l_interval)),(l_init_spot + (6*l_interval)),
								(l_init_spot + (7*l_interval)),(l_init_spot + (8*l_interval)),
								(l_init_spot + (9*l_interval)),
								(l_init_spot),(l_init_spot + (1*l_interval)),(l_init_spot + (2*l_interval)),
                (l_init_spot + (3*l_interval)),(l_init_spot + (4*l_interval)),
                (l_init_spot + (5*l_interval)),(l_init_spot + (6*l_interval)),
                (l_init_spot + (7*l_interval)),(l_init_spot + (8*l_interval)),
                (l_init_spot + (9*l_interval))
                );
		fprintf(fp,"%s\n",c_fileheader);

	}
	
	/*********************************************/


	fn_userlog(c_ServiceName , "i_request typ before switch : %d ",i_request);
	
	switch	(i_request)
	{
		case VIEW_CLIENTS:

				if(DEBUG_MSG_LVL_0)   
    		{
      		fn_userlog(c_ServiceName,"Run no.:%ld: in VIEW_CLIENTS case",l_run_num);
      		fn_userlog(c_ServiceName,"Run date :%s: in VIEW_CLIENTS case",c_trd_dt.arr);
					fn_userlog(c_ServiceName," Nifty Spot level at run:%ld: in VIEW_CLIENTS case",l_nifty_spot);
					fn_userlog(c_ServiceName,"Timestamp at run :%s: in VIEW_CLIENTS case",c_run_timestamp.arr);
    		}

				if( strcmp(c_output,"FMLS") == 0)
				{

					i_err[0]= Fadd32( ptr_fml_Obuf, FFO_RUN_NUM, (char *)&l_run_num, 0 );
  				i_ferr [ 0 ] = Ferror32;
					i_err[1]= Fadd32( ptr_fml_Obuf,FFO_TRD_DT, (char *)c_trd_dt.arr, 0 );
  				i_ferr [ 1 ] = Ferror32;
					i_err[2]= Fadd32( ptr_fml_Obuf,FFO_INDX_VAL , (char *)&l_nifty_spot, 0 );			  /***	Ver 1.1	***/
          i_ferr [ 2 ] = Ferror32;
					i_err[3]= Fadd32( ptr_fml_Obuf,FFO_TM_STMP, (char *)c_run_timestamp.arr, 0 );		/***  Ver 1.1 ***/
          i_ferr [ 3 ] = Ferror32;

					i_err[4]= Fadd32( ptr_fml_Obuf, FFO_STATUS_FLG, (char *)&c_status_flg, 0);
      		i_ferr [ 4 ] = Ferror32;

					for(j=0;j<5;j++)
  				{
    				if(i_err[j] == -1)
    				{
      				fn_errlog( c_ServiceName, "S31105",Fstrerror32(i_ferr[j]),c_err_msg);
      				fn_userlog(c_ServiceName,"Error in adding header row for VIEW_CLIENTS case ,field %d",j );
      				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      				tpfree((char *)ptr_fml_Obuf);
      				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    				}
  				}
	
					if(strcmp(c_undrlyng.arr,"DFLT")!=0)
        	{
						i_err[0]= Fadd32( ptr_fml_Obuf, FFO_UNDRLYNG, (char *)c_undrlyng.arr, 0 );
        		i_ferr [ 0 ] = Ferror32;
    				if(i_err[0] == -1)
    				{
      				fn_errlog( c_ServiceName, "S31110",Fstrerror32(i_ferr[0]),c_err_msg);
      				fn_userlog(c_ServiceName,"Error in adding underlying in  VIEW_CLIENTS case ");
      				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      				tpfree((char *)ptr_fml_Obuf);
      				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    				}
					}
				}	

				if(DEBUG_MSG_LVL_3)
    		{
      		fn_userlog(c_ServiceName,"Delimiter is :%s:",c_delim);
      		fn_userlog(c_ServiceName,"level is :%s:",c_level);
				}

				strcpy ((char *)stmnt.arr,"select MATCH_ACC, PNL1, PNL2, PNL3, PNL4, PNL5,");
				strcat ((char *)stmnt.arr,"	PNL6, PNL7, PNL8, PNL9, PNL10,");
				strcat ((char *)stmnt.arr," GROSS_ALLOCTN, FREE_LIMIT, MRGN_BLKD, CASH, NON_CASH, OPT_OBGLTN from ( ");
				strcat ((char *)stmnt.arr,"select FRC_FO_MTCH_ACC MATCH_ACC,");
				if( c_req_typ == 'P')
				{
					strcat ((char *)stmnt.arr," sum(FRC_FO_NETPNL_LEV");
					strcat ((char *)stmnt.arr,c_level);
					strcat ((char *)stmnt.arr,") sort_col,");
				}
				else 
				{
					strcat ((char *)stmnt.arr," abs(sum(FRC_FO_NETEXP)) sort_col,");
				}
        
							
				strcat ((char *)stmnt.arr," sum(FRC_FO_NETPNL_LEV1) PNL1");
				strcat ((char *)stmnt.arr,",");
				strcat ((char *)stmnt.arr," sum(FRC_FO_NETPNL_LEV2) PNL2");
				strcat ((char *)stmnt.arr,",");
				strcat ((char *)stmnt.arr," sum(FRC_FO_NETPNL_LEV3) PNL3");
				strcat ((char *)stmnt.arr,",");
				strcat ((char *)stmnt.arr," sum(FRC_FO_NETPNL_LEV4) PNL4");
				strcat ((char *)stmnt.arr,",");
				strcat ((char *)stmnt.arr," sum(FRC_FO_NETPNL_LEV5) PNL5");
				strcat ((char *)stmnt.arr,",");
				strcat ((char *)stmnt.arr," sum(FRC_FO_NETPNL_LEV6) PNL6");
				strcat ((char *)stmnt.arr,",");
				strcat ((char *)stmnt.arr," sum(FRC_FO_NETPNL_LEV7) PNL7");
				strcat ((char *)stmnt.arr,",");
				strcat ((char *)stmnt.arr," sum(FRC_FO_NETPNL_LEV8) PNL8");
				strcat ((char *)stmnt.arr,",");
				strcat ((char *)stmnt.arr," sum(FRC_FO_NETPNL_LEV9) PNL9");
				strcat ((char *)stmnt.arr,",");
				strcat ((char *)stmnt.arr," sum(FRC_FO_NETPNL_LEV10) PNL10,");
				strcat ((char *)stmnt.arr," min(FRC_FO_GROSS_ALLOC) GROSS_ALLOCTN,");
				strcat ((char *)stmnt.arr," min(FRC_FO_FREE_LIMIT) FREE_LIMIT,");
				strcat ((char *)stmnt.arr," sum(FRC_FO_MRGN_BLKD) MRGN_BLKD,");
				strcat ((char *)stmnt.arr," min(FRC_FO_CASH) CASH,");
				strcat ((char *)stmnt.arr," min(FRC_FO_NONCASH) NON_CASH, ");
				strcat ((char *)stmnt.arr," sum(FRC_FO_OPT_OBGLTN) OPT_OBGLTN ");
				if(strcmp(c_undrlyng.arr,"DFLT")!=0)
				{
					strcat ((char *)stmnt.arr," , FRC_FO_UNDRLYNG ");
				}
				strcat ((char *)stmnt.arr," FROM FRC_FO_RSK_CUMLTV  WHERE FRC_FO_RUN_NO = '");
				MEMSET(c_temp_var);
				sprintf(c_temp_var,"%ld",l_run_num);
				strcat ((char *)stmnt.arr,c_temp_var);
				strcat ((char *)stmnt.arr,"' AND  FRC_FO_TRD_DT = '");
				strcat ((char *)stmnt.arr,c_trd_dt.arr);

				if(strcmp(c_match_acc_in.arr,"null_acc")!=0)
				{
					strcat ((char *)stmnt.arr,"' AND  FRC_FO_MTCH_ACC = '");
					strcat ((char *)stmnt.arr,c_match_acc_in.arr);
				}

				if(strcmp(c_undrlyng.arr,"DFLT")!=0)
				{
					strcat ((char *)stmnt.arr,"' AND  FRC_FO_UNDRLYNG = '");
					strcat ((char *)stmnt.arr,c_undrlyng.arr);
				}
			
				if( i_limit_flg == 1)
				{
					if( c_req_typ == 'P')
					{
						strcat ((char *)stmnt.arr,"' HAVING(sum(FRC_FO_NETPNL_LEV");
						strcat ((char *)stmnt.arr,c_level);
						strcat ((char *)stmnt.arr," ))");
					}
					else 
					{
						strcat ((char *)stmnt.arr,"' HAVING(abs(sum(FRC_FO_NETEXP)))");
					}
					strcat ((char *)stmnt.arr," BETWEEN '");
					MEMSET(c_temp_var);
					sprintf(c_temp_var,"%ld",l_lower_limit);
					strcat ((char *)stmnt.arr,c_temp_var);
					strcat ((char *)stmnt.arr,"' AND '");
					MEMSET(c_temp_var);
					sprintf(c_temp_var,"%ld",l_upper_limit);
					strcat ((char *)stmnt.arr,c_temp_var);
				}

				strcat ((char *)stmnt.arr,"' GROUP BY FRC_FO_MTCH_ACC ");
				if(strcmp(c_undrlyng.arr,"DFLT")!=0)
				{
					strcat ((char *)stmnt.arr," ,FRC_FO_UNDRLYNG ");
				}
				if( c_req_typ == 'P')
				{	
					strcat ((char *)stmnt.arr," ORDER BY sort_col ASC )");
				}
				else 
				{
					strcat ((char *)stmnt.arr," ORDER BY sort_col DESC )");
				}

				if( strcmp(c_output,"FMLS") == 0)
				{
					strcat ((char *)stmnt.arr," where rownum < '");
				
					MEMSET(c_temp_var);
					sprintf(c_temp_var,"%ld",l_no_of_clients);
					strcat ((char *)stmnt.arr,c_temp_var);
					strcat ((char *)stmnt.arr,"'");
				}

				stmnt.len = strlen((char *)stmnt.arr);

				print_qry1((char*)stmnt.arr,stmnt.len,c_ServiceName);

				if(DEBUG_MSG_LVL_0)
    		{
      		fn_userlog(c_ServiceName,"Preparing query.... ");
				}
				
				EXEC SQL PREPARE sql_stmnt FROM :stmnt;	
				
				EXEC SQL DECLARE sys_cur CURSOR FOR sql_stmnt;
		
				EXEC SQL OPEN sys_cur ;
		
				if(SQLCODE != 0)
  			{
    			fn_errlog( c_ServiceName, "S31115", SQLMSG, c_err_msg );
    			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			tpfree((char *)ptr_fml_Obuf);
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	 			}

				if(DEBUG_MSG_LVL_3)
    		{
      		fn_userlog(c_ServiceName,"Entering while loop.... ");
				}
				
				l_req_buff_sz = sizeof(c_match_acc)+
												sizeof(c_pnl)+
												sizeof(d_grs_alloc)+
												sizeof(d_free_limit)+
												sizeof(d_mrgn_blocked)+
												sizeof(d_cash)+
												sizeof(d_non_cash)+
												sizeof(d_opt_obgltn)+
												sizeof(l_out_of_poc_at)+
												sizeof(c_out_of_poc)+
												sizeof(i_up_poc_lvl)+  /** Ver 1.1 **/
												sizeof(i_dn_poc_lvl);  /** Ver 1.1 **/

				/**  Ver 1.1  Starts **/
			
				i_upcnt=0;
        i_dwncnt=0;

				li_nifty_spot = d_nifty_spot;
				
				d_levels[0]   = l_init_spot;
	
				for(k = 1 ; k < 10 ; k++)
        {
         d_levels[k]= d_levels[k-1] + l_interval ;
        }
		
				for( k = 0 ; k < 10 ; k++)
        {
         if(d_levels[k]>=li_nifty_spot)
         {
          i_upcnt = k;
          break;
         }
        }	
				
        i_dwncnt = i_upcnt - 1 ;
			  
				if( i_upcnt == 0)
        {
         if( li_nifty_spot > d_levels[9] )
         {
          i_upcnt  = 10;
          i_dwncnt = 9;
         }
        }	
						
				/** Ver 1.1 Ends **/ 
				
				while(1)
				{
					i++;


					MEMSET(c_match_acc);
					MEMSET(c_pnl);
					MEMSET(c_out_of_poc);
					MEMSET(c_copy_out_of_poc);      /** Ver 1.1 **/
					MEMSET(i_up_poc_lvl);           /** Ver 1.1 **/
					MEMSET(i_dn_poc_lvl);           /** Ver 1.1 **/

					d_grs_alloc = 0.0;
					d_free_limit = 0.0;
					d_mrgn_blocked = 0.0;
					d_cash = 0.0;
					d_non_cash = 0.0;
					d_opt_obgltn = 0.0;
					l_out_of_poc_at = 0.0;
					
					EXEC SQL FETCH sys_cur	
									 INTO :c_match_acc,
												:d_arr_total_pnl[0],:d_arr_total_pnl[1],
												:d_arr_total_pnl[2],:d_arr_total_pnl[3],
												:d_arr_total_pnl[4],:d_arr_total_pnl[5],
												:d_arr_total_pnl[6],:d_arr_total_pnl[7],
												:d_arr_total_pnl[8],:d_arr_total_pnl[9],
												:d_grs_alloc,
												:d_free_limit,
												:d_mrgn_blocked,
												:d_cash,
												:d_non_cash,
												:d_opt_obgltn;

					SETLEN(c_match_acc);

					if ( SQLCODE != 0 )
    			{
						if( SQLCODE == NO_DATA_FOUND )
						{
      				fn_userlog(c_ServiceName,"Finished :%d: records in  VIEW_CLIENTS case ",sqlca.sqlerrd[2] );
							break;
						}
						else
						{
							fn_errlog( c_ServiceName, "S31120", SQLMSG, c_err_msg );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							tpfree((char *)ptr_fml_Obuf);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
					}
					for (i=0; i<NUM_OF_LEVELS ; i++)	
					{
						d_out_of_pocket_by = 0.0;
					
						if( d_arr_total_pnl[i] < 0)
						{
							d_out_of_pocket_by = d_arr_total_pnl[i]+d_mrgn_blocked+d_opt_obgltn;	
							if (d_out_of_pocket_by > 0)
							{
								d_out_of_pocket_by = 0;	
							}
						}	
						d_arr_total_opoc[i]=d_out_of_pocket_by;


						/***********Out of pocket at calculation **************/

						if(d_arr_total_opoc[i]<0)
						{
							if(l_out_of_poc_at == 0)
							{
								l_out_of_poc_at = l_init_spot + (i*l_interval);  
							}
						}
				
			
						/*******************************************************/
						if(strcmp(c_output,"FILE") == 0)
						{	
							d_arr_total_pnl[i] = d_arr_total_pnl[i]/100;
							d_arr_total_opoc[i] = d_arr_total_opoc[i]/100;
						}
						sprintf(c_temp_var,"%0.2lf%c",d_arr_total_pnl[i],c_delimiter);
						strcat(c_pnl.arr,c_temp_var);
						MEMSET(c_temp_var);

						sprintf(c_temp_var,"%0.2lf%c",d_arr_total_opoc[i],c_delimiter);
						strcat(c_out_of_poc.arr,c_temp_var);
						MEMSET(c_temp_var);

					}
					
					
					NULLTERM(c_pnl.arr);
					NULLTERM(c_out_of_poc.arr);

					SETLEN(c_pnl);
					SETLEN(c_out_of_poc);
					
					/** Ver 1.1 Begins **/
					
					i_dn_poc_lvl = 0;
          i_up_poc_lvl = 0;

					for ( i_net_dwn = i_dwncnt  ; i_net_dwn >= 0  ; i_net_dwn -- )
				  {
      	   if(d_arr_total_opoc[i_net_dwn]!=0)
       	   {
             i_dn_poc_lvl = l_init_spot + (i_net_dwn*l_interval);
             break;	
       	   }
     	 	  }
    
				  for ( i_net_up = i_upcnt ; i_net_up <= 9 ; i_net_up ++  )
					{  
           if(d_arr_total_opoc[i_net_up]!=0)
           {
				     i_up_poc_lvl=l_init_spot + (i_net_up*l_interval);
             break; 
           }
          }

					if(DEBUG_MSG_LVL_0)
          {
          fn_userlog(c_ServiceName,"Current Nifty Spot Level Is :%ld:",l_nifty_spot);
          fn_userlog(c_ServiceName,"DownWard Nifty Spot Level Is :%ld:",li_dwn_sptlvl);
          fn_userlog(c_ServiceName,"UpWard Nifty Spot Level Is :%ld:",li_uppr_sptlvl);
          fn_userlog(c_ServiceName,"Intial Spot Level at Is :%ld:",l_init_spot);
          fn_userlog(c_ServiceName,"i_dwncnt Is :%d:",i_dwncnt);
          fn_userlog(c_ServiceName,"i_upcnt Is :%d:",i_upcnt);
          fn_userlog(c_ServiceName,"i_dn_poc_lvl Is :%d:",i_dn_poc_lvl);
          fn_userlog(c_ServiceName,"i_up_poc_lvl Is :%d:",i_up_poc_lvl);
  				}
			
          /** ver 1.1 ends **/

          SETLEN(c_pnl);
          SETLEN(c_out_of_poc);


				
					if(DEBUG_MSG_LVL_3)
    			{
      			fn_userlog(c_ServiceName,"Row :%d: Match account :%s: in VIEW_CLIENTS case",i,c_match_acc.arr);
      			fn_userlog(c_ServiceName,"Row :%d: Profit and loss :%s: in VIEW_CLIENTS case",i,c_pnl.arr);
      			fn_userlog(c_ServiceName,"Row :%d: Out of pocket at level :%ld: in VIEW_CLIENTS case",i,l_out_of_poc_at);
      			fn_userlog(c_ServiceName,"Row :%d: Out of pocket levels :%s: in VIEW_CLIENTS case",i,c_out_of_poc.arr);
		        fn_userlog(c_ServiceName,"Row :%d: Out of pocket level for Up Market :%d: in VIEW_CLIENTS case",i,i_up_poc_lvl);
						fn_userlog(c_ServiceName,"Row :%d: Out of pocket level for Down Market :%d: in VIEW_CLIENTS case",i,i_dn_poc_lvl);
      			fn_userlog(c_ServiceName,"Row :%d: Gross allocation :%lf: in VIEW_CLIENTS case",i,d_grs_alloc);
      			fn_userlog(c_ServiceName,"Row :%d: Free Limit :%lf: in VIEW_CLIENTS case",i,d_free_limit);
      			fn_userlog(c_ServiceName,"Row :%d: Margin blocked :%lf: in VIEW_CLIENTS case",i,d_mrgn_blocked);
      			fn_userlog(c_ServiceName,"Row :%d: Cash :%lf: in VIEW_CLIENTS case",i,d_cash);
      			fn_userlog(c_ServiceName,"Row :%d: Non cash :%lf: in VIEW_CLIENTS case",i,d_non_cash);
      			fn_userlog(c_ServiceName,"Row :%d: Option obligation :%lf: in VIEW_CLIENTS case",i,d_opt_obgltn);
            fn_userlog(c_ServiceName,"i_dn_poc_lvl Is :%d: in VIEW_CLIENTS case",i_dn_poc_lvl);
            fn_userlog(c_ServiceName,"i_up_poc_lvl Is :%d: in VIEW_CLIENTS case",i_up_poc_lvl);
    			}
				
					if(strcmp(c_output,"FMLS") == 0)
					{
						if( Fneeded32( 1, l_req_buff_sz ) > Funused32( ptr_fml_Obuf ) )
						{
      				fn_userlog(c_ServiceName,"SPACE NEEDED :%ld: SPACE AVAILABLE IN BUFFER :%ld:", 
																				Fneeded32( 1, l_req_buff_sz ),
																				Funused32( ptr_fml_Obuf ));

							ptr_fml_Obuf = ( FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
           			           	( Fsizeof32(ptr_fml_Obuf) + (i*l_req_buff_sz )));
						
							if (ptr_fml_Obuf == NULL)
							{
								fn_errlog(c_ServiceName, "S31125", TPMSG, c_err_msg);
								EXEC SQL CLOSE sys_cur;
								Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
							}
      				fn_userlog(c_ServiceName,"SPACE AVAILABLE AFTER REALLOCATION :%ld:", Fsizeof32(ptr_fml_Obuf));
						}

						i_err[0]= Fadd32( ptr_fml_Obuf, FFO_MTCH_CNTCT_KEY, (char *)c_match_acc.arr, 0 );
  					i_ferr [ 0 ] = Ferror32;
						i_err[1]= Fadd32( ptr_fml_Obuf, FFO_MAX_PROFIT, (char *)c_pnl.arr, 0 );
  					i_ferr [ 1 ] = Ferror32;

						i_err[2]= Fadd32( ptr_fml_Obuf, FFO_AMOUNT, (char *)&d_grs_alloc, 0 );
  					i_ferr [ 2 ] = Ferror32;
						i_err[3]= Fadd32( ptr_fml_Obuf, FFO_LIMIT, (char *)&d_free_limit, 0 );
  					i_ferr [ 3 ] = Ferror32;
						i_err[4]= Fadd32( ptr_fml_Obuf, FFO_ADD_MRGN_AMT, (char *)&d_mrgn_blocked, 0 );
  					i_ferr [ 4 ] = Ferror32;
						i_err[5]= Fadd32( ptr_fml_Obuf, FFO_PSTN_AMT_BLKD, (char *)&d_cash, 0 );
  					i_ferr [ 5 ] = Ferror32;
						i_err[6]= Fadd32( ptr_fml_Obuf, FFO_ADDL_AMT_BLKD, (char *)&d_non_cash, 0 );
  					i_ferr [ 6 ] = Ferror32;
						i_err[7]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_VAL, (char *)&d_opt_obgltn, 0 );
  					i_ferr [ 7 ] = Ferror32;
				
						for(j=0;j<8;j++)
  					{
    					if(i_err[j] == -1)
    					{
      					fn_errlog( c_ServiceName, "S31130",Fstrerror32(i_ferr[j]),c_err_msg);
								EXEC SQL CLOSE sys_cur;
      					fn_userlog(c_ServiceName,"Error in Fadd32 for VIEW_CLIENTS case ,field %d",j );
      					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      					tpfree((char *)ptr_fml_Obuf);
      					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    					}
  					}
						if(c_usr_flg != 'C')
						{
      				fn_userlog(c_ServiceName,"User is :%c:, hence adding out of pocket data in VIEW_CLIENTS case ",c_usr_flg );
							i_err[0]= Fadd32( ptr_fml_Obuf, FFO_CA_LVL, (char *)&l_out_of_poc_at, 0 );
  						i_ferr [ 0 ] = Ferror32;
							i_err[1]= Fadd32( ptr_fml_Obuf, FFO_BRK_EVN_PT, (char *)c_out_of_poc.arr, 0 );
  						i_ferr [ 1 ] = Ferror32;
							
							i_err[2]= Fadd32( ptr_fml_Obuf,FFO_HGH_INDX_VAL, (char *)&i_up_poc_lvl, 0 );    /** Ver 1.1 **/ 
              i_ferr [ 2 ] = Ferror32;
		          i_err[3]= Fadd32( ptr_fml_Obuf,FFO_LOW_INDX_VAL, (char *)&i_dn_poc_lvl, 0 );    /** Ver 1.1 **/
              i_ferr [ 3 ] = Ferror32;								

								for(j=0;j<4;j++)
  						{
    						if(i_err[j] == -1)
    						{
      						fn_errlog( c_ServiceName, "S31135",Fstrerror32(i_ferr[j]),c_err_msg);
									EXEC SQL CLOSE sys_cur;
      						fn_userlog(c_ServiceName,"Error in Fadd32 for VIEW_CLIENTS case ,field %d",j );
      						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      						tpfree((char *)ptr_fml_Obuf);
      						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    						}
  						}
						}


					}/******** End of loop for adding output to FMLS ***********/
					else  
					{
						MEMSET(c_filedata);
						sprintf(c_filedata,"%s,%ld,%ld,%s,%lf,%ld,%s,%d,%d,%lf,%lf,%lf,%lf,%lf",						
												c_match_acc.arr,l_run_num,l_nifty_spot,c_run_timestamp.arr,  /** Ver 1.1 RunNo,
																																											nifty Spt,timestmp **/
										  	c_pnl.arr,(d_opt_obgltn/100),l_out_of_poc_at,
												c_out_of_poc.arr,i_dn_poc_lvl,i_up_poc_lvl,(d_cash/100),(d_non_cash/100),
											 (d_grs_alloc/100),(d_free_limit/100),
												(d_mrgn_blocked/100));                                       /** Ver 1.1 Up & 
																																											Dwn Pockt Lvl Added **/
						fprintf(fp,"%s\n",c_filedata);
						
					}/******** End of loop for adding output to FILE ***********/
				}
				fclose(fp);

				EXEC SQL CLOSE sys_cur;
     		fn_userlog(c_ServiceName,"************Service completed succesfully in VIEW_CLIENTS case**********");


				if(strcmp(c_output,"FMLS") == 0)
        {
					tpreturn(TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
				}
				else
				{
					sprintf(c_err_msg,"PNL of all clients has been downloaded to csv file");
					fn_userlog(c_ServiceName,"##### %s #####",c_err_msg);
    			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
    			tpfree((char *)ptr_fml_Obuf);
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

		case VIEW_CLIENT_PRDCT_TYP:

				if(DEBUG_MSG_LVL_0) 
    		{
      		fn_userlog(c_ServiceName,"Run no.:%ld: in VIEW_CLIENT_PRDCT_TYP case",l_run_num);
      		fn_userlog(c_ServiceName,"Run date :%s: in VIEW_CLIENT_PRDCT_TYP case",c_trd_dt.arr);
		      fn_userlog(c_ServiceName,"Spot level at run:%ld: in VIEW_CLIENT_PRDCT_TYP case",l_nifty_spot); 
				   /** Ver 1.1 **/
          fn_userlog(c_ServiceName,"Timestamp at run :%s: in VIEW_CLIENT_PRDCT_TYP case",c_run_timestamp.arr);																																						                                 					      /**Verr 1.1 **/	
    		}

				if(strcmp(c_output,"FMLS") == 0) 
				{
					i_err[0]= Fadd32( ptr_fml_Obuf, FFO_RUN_NUM, (char *)&l_run_num, 0 );
  				i_ferr [ 0 ] = Ferror32;
					i_err[1]= Fadd32( ptr_fml_Obuf, FFO_TRD_DT, (char *)c_trd_dt.arr, 0 );
  				i_ferr [ 1 ] = Ferror32;
					i_err[2]= Fadd32( ptr_fml_Obuf,FFO_INDX_VAL , (char *)&l_nifty_spot, 0 );         /** Ver 1.1 **/
          i_ferr [ 2 ] = Ferror32;
          i_err[3]= Fadd32( ptr_fml_Obuf,FFO_TM_STMP, (char *)c_run_timestamp.arr, 0 );     /** Ver 1.1 **/
          i_ferr [ 3 ] = Ferror32;
					i_err[4]= Fadd32( ptr_fml_Obuf, FFO_STATUS_FLG, (char *)&c_status_flg, 0);
      		i_ferr [ 4 ] = Ferror32;
					for(j=0;j<5;j++)
  				{
    				if(i_err[j] == -1)
    				{
      				fn_errlog( c_ServiceName, "S31140",Fstrerror32(i_ferr[j]),c_err_msg);
      				fn_userlog(c_ServiceName,"Error in adding header row for VIEW_CLIENT_PRDCT_TYP case ,field %d",j );
      				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      				tpfree((char *)ptr_fml_Obuf);
      				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    				}
  				}


					if(strcmp(c_undrlyng.arr,"DFLT")!=0)
        	{
          	i_err[0]= Fadd32( ptr_fml_Obuf, FFO_UNDRLYNG, (char *)c_undrlyng.arr, 0 );
          	i_ferr [ 0 ] = Ferror32;
          	if(i_err[0] == -1)
          	{
            	fn_errlog( c_ServiceName, "S31145",Fstrerror32(i_ferr[0]),c_err_msg);
            	fn_userlog(c_ServiceName,"Error in adding underlying in  VIEW_CLIENT_PRDCT_TYP case ");
            	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            	tpfree((char *)ptr_fml_Obuf);
            	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          	}
        	}

					if(c_prdct_typ != '*')
        	{
          	i_err[0]= Fadd32( ptr_fml_Obuf, FFO_PRDCT_TYP, (char *)&c_prdct_typ, 0 );
          	i_ferr [ 0 ] = Ferror32;
          	if(i_err[0] == -1)
          	{
            	fn_errlog( c_ServiceName, "S31150",Fstrerror32(i_ferr[0]),c_err_msg);
            	fn_userlog(c_ServiceName,"Error in adding product type in VIEW_CLIENT_PRDCT_TYP case ");
            	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            	tpfree((char *)ptr_fml_Obuf);
            	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          	}
        	}
				}

				if(DEBUG_MSG_LVL_3)
    		{
      		fn_userlog(c_ServiceName,"Delimiter is :%s:",c_delim);
      		fn_userlog(c_ServiceName,"level is :%s:",c_level);
				}
				strcpy ((char *)stmnt.arr,"select MATCH_ACC,PNL1,PNL2,PNL3,PNL4,PNL5,PNL6,");
				strcat ((char *)stmnt.arr,"	PNL7,PNL8,PNL9,PNL10,");
				strcat ((char *)stmnt.arr," MRGN_BLKD,OPT_OBGLTN from ( ");
				strcat ((char *)stmnt.arr,"select FRB_FO_MTCH_ACC MATCH_ACC,");
				strcat ((char *)stmnt.arr," sum(FRB_FO_PNL_LEV");
				strcat ((char *)stmnt.arr,c_level);
				strcat ((char *)stmnt.arr," ) sort_col,");
				strcat ((char *)stmnt.arr," sum(FRB_FO_PNL_LEV1) PNL1");
				strcat ((char *)stmnt.arr,",");
				strcat ((char *)stmnt.arr," sum(FRB_FO_PNL_LEV2) PNL2");
				strcat ((char *)stmnt.arr,",");
				strcat ((char *)stmnt.arr," sum(FRB_FO_PNL_LEV3) PNL3");
				strcat ((char *)stmnt.arr,",");
				strcat ((char *)stmnt.arr," sum(FRB_FO_PNL_LEV4) PNL4");
				strcat ((char *)stmnt.arr,",");
				strcat ((char *)stmnt.arr," sum(FRB_FO_PNL_LEV5) PNL5");
				strcat ((char *)stmnt.arr,",");
				strcat ((char *)stmnt.arr," sum(FRB_FO_PNL_LEV6) PNL6");
				strcat ((char *)stmnt.arr,",");
				strcat ((char *)stmnt.arr," sum(FRB_FO_PNL_LEV7) PNL7");
				strcat ((char *)stmnt.arr,",");
				strcat ((char *)stmnt.arr," sum(FRB_FO_PNL_LEV8) PNL8");
				strcat ((char *)stmnt.arr,",");
				strcat ((char *)stmnt.arr," sum(FRB_FO_PNL_LEV9) PNL9");
				strcat ((char *)stmnt.arr,",");
				strcat ((char *)stmnt.arr," sum(FRB_FO_PNL_LEV10) PNL10,");
				strcat ((char *)stmnt.arr," sum(FRB_FO_MRGN_BLKD) MRGN_BLKD,");
				strcat ((char *)stmnt.arr," sum(FRB_FO_OPT_OBGLTN) OPT_OBGLTN ");
				if(strcmp(c_undrlyng.arr,"DFLT")!=0)
				{
					strcat ((char *)stmnt.arr," ,FRB_FO_UNDRLYNG ");
				}
				if(c_prdct_typ != '*')
				{
					strcat ((char *)stmnt.arr," ,FRB_FO_PRD_TYP ");
				}
				strcat ((char *)stmnt.arr," FROM FRB_FO_RSK_BRKUP WHERE FRB_FO_RUN_NO = '");
				MEMSET(c_temp_var);
				sprintf(c_temp_var,"%ld",l_run_num);
				strcat ((char *)stmnt.arr,c_temp_var);
				strcat ((char *)stmnt.arr,"' AND  FRB_FO_TRD_DT = '");
				strcat ((char *)stmnt.arr,c_trd_dt.arr);

				if(c_prdct_typ != '*')
				{
					strcat ((char *)stmnt.arr,"' AND  FRB_FO_PRD_TYP = '");
					MEMSET(c_temp_var);
					sprintf(c_temp_var,"%c",c_prdct_typ);
      		fn_userlog(c_ServiceName," c_temp_var is :%s:",c_temp_var);
					strcat ((char *)stmnt.arr,c_temp_var);
				}

				if(strcmp(c_match_acc_in.arr,"null_acc")!=0)
				{
					strcat ((char *)stmnt.arr,"' AND  FRB_FO_MTCH_ACC = '");
					strcat ((char *)stmnt.arr,c_match_acc_in.arr);
				}

				if(strcmp(c_undrlyng.arr,"DFLT")!=0)
				{
					strcat ((char *)stmnt.arr,"' AND  FRB_FO_UNDRLYNG = '");
					strcat ((char *)stmnt.arr,c_undrlyng.arr);
				}
				if( i_limit_flg == 1)
				{
					strcat ((char *)stmnt.arr,"' HAVING(sum(FRB_FO_PNL_LEV");
					strcat ((char *)stmnt.arr,c_level);
					strcat ((char *)stmnt.arr," ))");
					strcat ((char *)stmnt.arr," BETWEEN '");
					MEMSET(c_temp_var);
					sprintf(c_temp_var,"%ld",l_lower_limit);
					strcat ((char *)stmnt.arr,c_temp_var);
					strcat ((char *)stmnt.arr,"' AND '");
					MEMSET(c_temp_var);
					sprintf(c_temp_var,"%ld",l_upper_limit);
					strcat ((char *)stmnt.arr,c_temp_var);
				}
				strcat ((char *)stmnt.arr,"' GROUP BY FRB_FO_MTCH_ACC ");
				if(c_prdct_typ != '*')
				{
					strcat ((char *)stmnt.arr," ,FRB_FO_PRD_TYP ");
				}
				if(strcmp(c_undrlyng.arr,"DFLT")!=0)
				{
					strcat ((char *)stmnt.arr," ,FRB_FO_UNDRLYNG ");
				}
				strcat ((char *)stmnt.arr," ORDER BY sort_col ASC )");

				if( strcmp(c_output,"FMLS") == 0)
				{
					strcat ((char *)stmnt.arr," where rownum < '");
					MEMSET(c_temp_var);
					sprintf(c_temp_var,"%ld",l_no_of_clients);
					strcat ((char *)stmnt.arr,c_temp_var);
					strcat ((char *)stmnt.arr,"'");
				}

				stmnt.len = strlen((char *)stmnt.arr);

				print_qry1((char*)stmnt.arr,stmnt.len,c_ServiceName);

				if(DEBUG_MSG_LVL_0)
    		{
      		fn_userlog(c_ServiceName,"Preparing query.... ");
				}
			
				EXEC SQL PREPARE sql_stmnt FROM :stmnt;	
				
				EXEC SQL DECLARE sys_cur1 CURSOR FOR sql_stmnt;
		
				EXEC SQL OPEN sys_cur1 ;
		
				if(SQLCODE != 0)
  			{
    			fn_errlog( c_ServiceName, "S31155", SQLMSG, c_err_msg );
    			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			tpfree((char *)ptr_fml_Obuf);
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	 			}

				if(DEBUG_MSG_LVL_3)
    		{
      		fn_userlog(c_ServiceName,"Entering while loop.... ");
				}

				l_req_buff_sz = sizeof(c_match_acc)+
												sizeof(c_pnl)+
												sizeof(d_grs_alloc)+
												sizeof(d_free_limit)+
												sizeof(d_mrgn_blocked)+
												sizeof(d_cash)+
												sizeof(d_non_cash)+
												sizeof(d_opt_obgltn)+
												sizeof(l_out_of_poc_at)+
												sizeof(c_out_of_poc)+
												sizeof(i_up_poc_lvl)+       /** Ver 1.1 **/
                        sizeof(i_dn_poc_lvl);       /** Ver 1.1 **/

				
				while(1)
				{
					i++;
					MEMSET(c_match_acc);
					MEMSET(c_pnl);
					MEMSET(c_out_of_poc);
				  MEMSET(i_up_poc_lvl);  
					MEMSET(i_dn_poc_lvl);  
					d_grs_alloc = 0.0;
					d_free_limit = 0.0;
					d_mrgn_blocked = 0.0;
					d_cash = 0.0;
					d_non_cash = 0.0;
					d_opt_obgltn = 0.0;
					l_out_of_poc_at = 0.0;
					
					EXEC SQL FETCH sys_cur1
									 INTO :c_match_acc,
										  	:d_arr_total_pnl[0],:d_arr_total_pnl[1],
                        :d_arr_total_pnl[2],:d_arr_total_pnl[3],
                        :d_arr_total_pnl[4],:d_arr_total_pnl[5],
                        :d_arr_total_pnl[6],:d_arr_total_pnl[7],
                        :d_arr_total_pnl[8],:d_arr_total_pnl[9],
												:d_mrgn_blocked,
												:d_opt_obgltn;

			
					SETLEN(c_match_acc);

					if ( SQLCODE != 0 )
    			{
						if( SQLCODE == NO_DATA_FOUND )
						{
      				fn_userlog(c_ServiceName,"Finished :%d: records in  VIEW_CLIENT_PRDCT_TYP case ",sqlca.sqlerrd[2] );
							break;
						}
						else
						{
							fn_errlog( c_ServiceName, "S31160", SQLMSG, c_err_msg );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							tpfree((char *)ptr_fml_Obuf);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
					}

					/********** Check if there is any case of spread margin to be deducted from total margin *********/
					EXEC SQL
					DECLARE cur_sprd_mrgn CURSOR FOR
					SELECT 	FRB_FO_MTCH_ACC,
									FRB_FO_UNDRLYNG,
									FRB_FO_CNTRCT_TAG,
									FRB_FO_MRGN_BLKD,
									count(*)
					FROM FRB_FO_RSK_BRKUP 
					WHERE FRB_FO_MTCH_ACC = :c_match_acc 
					AND FRB_FO_TRD_DT = :c_trd_dt 
					AND FRB_FO_RUN_NO = :l_run_num
					AND TRIM(FRB_FO_UNDRLYNG) = decode(:c_undrlyng_temp,'DFLT',TRIM(FRB_FO_UNDRLYNG),:c_undrlyng_temp)
					AND FRB_FO_PRD_TYP = decode(:c_prdct_typ,'F','F','O','O',FRB_FO_PRD_TYP)
					HAVING COUNT(*) > 1
					GROUP BY FRB_FO_MTCH_ACC,FRB_FO_UNDRLYNG,FRB_FO_CNTRCT_TAG ,FRB_FO_MRGN_BLKD;

					EXEC SQL OPEN cur_sprd_mrgn;

					if ( SQLCODE != 0 )
          {
            fn_errlog( c_ServiceName, "S31165",SQLMSG,c_err_msg);
						EXEC SQL CLOSE sys_cur1;
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpfree((char *)ptr_fml_Obuf);
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
					d_total_sprd_mrgn =0.0;
					while(1)
					{
						EXEC SQL
						FETCH cur_sprd_mrgn
						INTO 	:c_sprd_match_acc,
									:c_sprd_undrlyng,
									:c_sprd_tag,
									:d_sprd_mrgn,
									:l_cnt;

						if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
          	{
            	fn_errlog( c_ServiceName, "S31170",SQLMSG,c_err_msg);
							EXEC SQL CLOSE sys_cur1;
            	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            	tpfree((char *)ptr_fml_Obuf);
            	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          	}

						if ( SQLCODE == NO_DATA_FOUND)
          	{
      				fn_userlog(c_ServiceName,"Total Spread margin to be deducted is :%lf: ",d_total_sprd_mrgn );
							break;
						}
					
      			fn_userlog(c_ServiceName,"Spread margin on :%s: is :%lf: ",c_sprd_undrlyng.arr,d_sprd_mrgn );
						d_total_sprd_mrgn = d_total_sprd_mrgn+d_sprd_mrgn;
						
					}
					EXEC SQL CLOSE cur_sprd_mrgn;
      		fn_userlog(c_ServiceName,"Margin before spread deduction is :%lf:",d_mrgn_blocked);
					d_mrgn_blocked = d_mrgn_blocked - d_total_sprd_mrgn;
      		fn_userlog(c_ServiceName,"Margin after spread deduction is :%lf:",d_mrgn_blocked);
				
					/************************************************************************/
					for (j=0; j<NUM_OF_LEVELS ; j++)	
					{
						d_out_of_pocket_by = 0.0;	
						if( d_arr_total_pnl[j] < 0)
						{
							d_out_of_pocket_by = d_arr_total_pnl[j]+d_mrgn_blocked+d_opt_obgltn;
							if (d_out_of_pocket_by > 0)
							{
								d_out_of_pocket_by = 0;	
							}
						}	
						d_arr_total_opoc[j]=d_out_of_pocket_by;

						/***********Out of pocket at calculation **************/

						if(d_arr_total_opoc[j]<0)
						{
							if(l_out_of_poc_at == 0)
							{
								l_out_of_poc_at = l_init_spot + (j*l_interval);  
							}
						}

						/*******************************************************/
						if(strcmp(c_output,"FILE") == 0)
						{	
							d_arr_total_pnl[j] = d_arr_total_pnl[j]/100;
							d_arr_total_opoc[j] = d_arr_total_opoc[j]/100;	
						}
						sprintf(c_temp_var,"%0.2lf%c",d_arr_total_pnl[j],c_delimiter);
						strcat(c_pnl.arr,c_temp_var);
						MEMSET(c_temp_var);

						sprintf(c_temp_var,"%0.2lf%c",d_arr_total_opoc[j],c_delimiter);
						strcat(c_out_of_poc.arr,c_temp_var);
						MEMSET(c_temp_var);

					}

					NULLTERM(c_pnl.arr);
					NULLTERM(c_out_of_poc.arr);

					SETLEN(c_pnl);
					SETLEN(c_out_of_poc);
				
				
          /** Ver 1.1 Begins **/
		
					i_dn_poc_lvl = 0;
          i_up_poc_lvl = 0;
					i_upcnt  = 0 ;
          i_dwncnt = 0;
					
					li_nifty_spot = d_nifty_spot ;

          d_levels[0]   = l_init_spot;
 
          for(k = 1 ; k < 10 ; k++)
          {
           d_levels[k]= d_levels[k-1] + l_interval ;
          }

          for( k = 0 ; k < 10 ; k++)
          {
           if(d_levels[k]>=li_nifty_spot)
           {
            i_upcnt = k;
            break;
           }
          }

          i_dwncnt = i_upcnt - 1 ;

          if( i_upcnt == 0)
          {
           if( li_nifty_spot > d_levels[9] )
           {
            i_upcnt  = 10 ;
            i_dwncnt = 9;
           }
          }
			

	  			for ( i_net_dwn = i_dwncnt  ; i_net_dwn >= 0  ; i_net_dwn -- )
          {
           if(d_arr_total_opoc[i_net_dwn]!=0)
           {
            i_dn_poc_lvl=l_init_spot+ (i_net_dwn*l_interval);
				    break;
           }
          }

          for ( i_net_up = i_upcnt ; i_net_up <= 9 ; i_net_up ++  )
          {
           if(d_arr_total_opoc[i_net_up]!=0)
           {
            i_up_poc_lvl= l_init_spot + (i_net_up*l_interval);
				    break;	
           }
          }
	
  			  if(DEBUG_MSG_LVL_0)
          {
           fn_userlog(c_ServiceName,"Current Nifty Spot Level Is :%ld:",l_nifty_spot);
           fn_userlog(c_ServiceName,"DownWard Nifty Spot Level Is :%ld:",li_dwn_sptlvl);
           fn_userlog(c_ServiceName,"UpWard Nifty Spot Level Is :%ld:",li_uppr_sptlvl);
           fn_userlog(c_ServiceName,"Intial Spot Level at Is :%ld:",l_init_spot);
           fn_userlog(c_ServiceName,"i_dwncnt Is :%d:",i_dwncnt);
 	         fn_userlog(c_ServiceName,"i_upcnt Is :%d:",i_upcnt);
				   fn_userlog(c_ServiceName,"i_dn_poc_lvl Is :%d:",i_dn_poc_lvl);
				   fn_userlog(c_ServiceName,"i_up_poc_lvl Is :%d:",i_up_poc_lvl); 
          }
          /** Ver 1.1 Ends **/	
 
					EXEC SQL
				  	SELECT NVL(FRC_FO_GROSS_ALLOC,0) , 
					         NVL(FRC_FO_FREE_LIMIT,0),
									 NVL(FRC_FO_CASH,0),NVL(FRC_FO_NONCASH,0)
					  INTO   :d_grs_alloc,
									 :d_free_limit,
									 :d_cash,:d_non_cash
					  FROM FRC_FO_RSK_CUMLTV
					  WHERE	FRC_FO_RUN_NO = :l_run_num 
					  AND FRC_FO_TRD_DT =  :c_trd_dt
					  AND FRC_FO_MTCH_ACC = :c_match_acc
					  AND ROWNUM <2;

					if ( SQLCODE != 0 )
    			{
						fn_errlog( c_ServiceName, "S31175",SQLMSG,c_err_msg);
						EXEC SQL CLOSE sys_cur1;
      			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      			tpfree((char *)ptr_fml_Obuf);
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}

					if(DEBUG_MSG_LVL_3)
    			{
      			fn_userlog(c_ServiceName,"Row :%d: Match account :%s: in VIEW_CLIENT_PRDCT_TYP case",i,c_match_acc.arr);
      			fn_userlog(c_ServiceName,"Row :%d: Profit and loss :%s: in VIEW_CLIENT_PRDCT_TYP case",i,c_pnl.arr);
      			fn_userlog(c_ServiceName,"Row :%d: Out of pocket at level :%ld: in VIEW_CLIENT_PRDCT_TYP case",i,l_out_of_poc_at);
      			fn_userlog(c_ServiceName,"Row :%d: Out of pocket levels :%s: in VIEW_CLIENT_PRDCT_TYP case",i,c_out_of_poc.arr);
						
            fn_userlog(c_ServiceName,"Row :%d: Out of pocket level for Up Market :%d: in VIEW_CLIENT_PRDCT_TYP case",i,i_up_poc_lvl);
            fn_userlog(c_ServiceName,"Row :%d: Out of pocket level for Down Market :%d: in VIEW_CLIENT_PRDCT_TYP case",i,i_dn_poc_lvl);

      			fn_userlog(c_ServiceName,"Row :%d: Gross allocation :%lf: in VIEW_CLIENT_PRDCT_TYP case",i,d_grs_alloc);
      			fn_userlog(c_ServiceName,"Row :%d: Free Limit :%lf: in VIEW_CLIENT_PRDCT_TYP case",i,d_free_limit);
      			fn_userlog(c_ServiceName,"Row :%d: Margin blocked :%lf: in VIEW_CLIENT_PRDCT_TYP case",i,d_mrgn_blocked);
      			fn_userlog(c_ServiceName,"Row :%d: Option obligation :%lf: in VIEW_CLIENT_PRDCT_TYP case",i,d_opt_obgltn);
      			fn_userlog(c_ServiceName,"Row :%d: Cash :%lf: in VIEW_CLIENT_PRDCT_TYP case",i,d_cash);
      			fn_userlog(c_ServiceName,"Row :%d: Non cash :%lf: in VIEW_CLIENT_PRDCT_TYP case",i,d_non_cash);
    			}

					if( strcmp(c_output,"FMLS") == 0)
					{
						if( Fneeded32( 1, l_req_buff_sz ) > Funused32( ptr_fml_Obuf ) )
						{
      				fn_userlog(c_ServiceName,"Space needed :%ld: space available in buffer :%ld:", 
																				Fneeded32( 1, l_req_buff_sz ),
																				Funused32( ptr_fml_Obuf ));

							ptr_fml_Obuf = ( FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
           				           ( Fsizeof32(ptr_fml_Obuf) + (i*l_req_buff_sz )));
						
							if (ptr_fml_Obuf == NULL)
							{
								fn_errlog(c_ServiceName, "S31180", TPMSG, c_err_msg);
								EXEC SQL CLOSE sys_cur1;
								Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
							}
						}

						i_err[0]= Fadd32( ptr_fml_Obuf, FFO_MTCH_CNTCT_KEY, (char *)c_match_acc.arr, 0 );
  					i_ferr [ 0 ] = Ferror32;
						i_err[1]= Fadd32( ptr_fml_Obuf, FFO_MAX_PROFIT, (char *)c_pnl.arr, 0 );
  					i_ferr [ 1 ] = Ferror32;
						i_err[2]= Fadd32( ptr_fml_Obuf, FFO_AMOUNT, (char *)&d_grs_alloc, 0 );
  					i_ferr [ 2 ] = Ferror32;
						i_err[3]= Fadd32( ptr_fml_Obuf, FFO_LIMIT, (char *)&d_free_limit, 0 );
  					i_ferr [ 3 ] = Ferror32;
						i_err[4]= Fadd32( ptr_fml_Obuf, FFO_ADD_MRGN_AMT, (char *)&d_mrgn_blocked, 0 );
  					i_ferr [ 4 ] = Ferror32;
						i_err[5]= Fadd32( ptr_fml_Obuf, FFO_PSTN_AMT_BLKD, (char *)&d_cash, 0 );
  					i_ferr [ 5 ] = Ferror32;
						i_err[6]= Fadd32( ptr_fml_Obuf, FFO_ADDL_AMT_BLKD, (char *)&d_non_cash, 0 );
  					i_ferr [ 6 ] = Ferror32;
						i_err[7]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_VAL, (char *)&d_opt_obgltn, 0 );
  					i_ferr [ 7 ] = Ferror32;
				
						for(j=0;j<8;j++)
  					{
    					if(i_err[j] == -1)
    					{
      					fn_errlog( c_ServiceName, "S31185",Fstrerror32(i_ferr[j]),c_err_msg);
								EXEC SQL CLOSE sys_cur1;
      					fn_userlog(c_ServiceName,"Error in Fadd32 for VIEW_CLIENT_PRDCT_TYP case ,field %d",j );
      					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      					tpfree((char *)ptr_fml_Obuf);
      					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    					}
  					}
						if(c_usr_flg != 'C')
						{   
      				fn_userlog(c_ServiceName,"User is :%c:, hence adding out of pocket data in VIEW_CLIENT_PRDCT_TYP case ",c_usr_flg );
							i_err[0]= Fadd32( ptr_fml_Obuf, FFO_CA_LVL, (char *)&l_out_of_poc_at, 0 );
							i_ferr [ 0 ] = Ferror32;
							i_err[1]= Fadd32( ptr_fml_Obuf, FFO_BRK_EVN_PT, (char *)c_out_of_poc.arr, 0 );
							i_ferr [ 1 ] = Ferror32;
							i_err[2]= Fadd32( ptr_fml_Obuf,FFO_HGH_INDX_VAL, (char *)&i_up_poc_lvl, 0 );    /** Ver 1.1 **/
              i_ferr [ 2 ] = Ferror32;
              i_err[3]= Fadd32( ptr_fml_Obuf,FFO_LOW_INDX_VAL, (char *)&i_dn_poc_lvl, 0 );    /** Ver 1.1 **/
              i_ferr [ 3 ] = Ferror32;						

							for(j=0;j<4;j++)
  						{
    						if(i_err[j] == -1)
    						{
      						fn_errlog( c_ServiceName, "S31190",Fstrerror32(i_ferr[j]),c_err_msg);
									EXEC SQL CLOSE sys_cur1;
      						fn_userlog(c_ServiceName,"Error in Fadd32 for VIEW_CLIENT_PRDCT_TYP case ,field %d",j );
      						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      						tpfree((char *)ptr_fml_Obuf);
      						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    						}
  						}
						}
					}/******** End of loop for adding output to FMLS ***********/
					else  
					{
						MEMSET(c_filedata);
						sprintf(c_filedata,"%s,%ld,%ld,%s,%lf,%ld,%s,%lf,%lf,%lf,%lf,%lf",
												c_match_acc.arr,l_run_num,l_nifty_spot,c_run_timestamp.arr,  /** Ver 1.1 RunNo,
																																											  	Nifty Spt,Timstmp**/ 
                        c_match_acc.arr,c_pnl.arr,(d_opt_obgltn/100),l_out_of_poc_at,
                        c_out_of_poc.arr,i_dn_poc_lvl,i_up_poc_lvl,(d_cash/100),(d_non_cash/100),
												(d_grs_alloc/100),(d_free_limit/100),
												(d_mrgn_blocked/100));                                       /** Ver 1.1 Up& Dwn
																																												 Poc Lvl added **/
						fprintf(fp,"%s\n",c_filedata);
						 		

					}/******** End of loop for adding output to FILE ***********/
				}
				fclose(fp);

				EXEC SQL CLOSE sys_cur1;
     		fn_userlog(c_ServiceName,"************Service completed succesfully in VIEW_CLIENT_PRDCT_TYP case**********");
				if(strcmp(c_output,"FMLS") == 0)
				{
					tpreturn(TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
				}
				else
        {	
					sprintf(c_err_msg,"PNL of all clients has been downloaded to csv file");
     			fn_userlog(c_ServiceName,"##### %s #####",c_err_msg);
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
          tpfree((char *)ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }


		case VIEW_DETAILS:

				EXEC SQL
				SELECT min(NVL(FRC_FO_GROSS_ALLOC,0)) , min(NVL(FRC_FO_FREE_LIMIT,0)),
							 min(NVL(FRC_FO_CASH,0)) , min(NVL(FRC_FO_NONCASH,0))
				INTO :d_grs_alloc,:d_free_limit,:d_cash,d_non_cash
				FROM FRC_FO_RSK_CUMLTV
				WHERE	FRC_FO_RUN_NO = :l_run_num 
				AND FRC_FO_TRD_DT =  :c_trd_dt
				AND FRC_FO_MTCH_ACC = :c_match_acc_in
				AND ROWNUM <2;

				if ( SQLCODE != 0 )
    		{
					fn_errlog( c_ServiceName, "S31195",SQLMSG,c_err_msg);
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpfree((char *)ptr_fml_Obuf);
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				if(DEBUG_MSG_LVL_3)  
    		{
      		fn_userlog(c_ServiceName,"Selected Match account is :%s: in VIEW_DETAILS case",c_match_acc_in.arr);
					fn_userlog(c_ServiceName,"Gross allocation is :%lf: in VIEW_DETAILS case" ,d_grs_alloc);
					fn_userlog(c_ServiceName,"Free Limit is :%lf: in VIEW_DETAILS case" ,d_free_limit);
					fn_userlog(c_ServiceName,"Cash component is :%lf: in VIEW_DETAILS case" ,d_cash);
					fn_userlog(c_ServiceName,"Non Cash component is :%lf: in VIEW_DETAILS case" ,d_non_cash);
					fn_userlog(c_ServiceName,"Spot level at run:%ld: in VIEW_DETAILS  case",l_nifty_spot);/** Ver 1.1 **/
          fn_userlog(c_ServiceName,"Timestamp at run :%s: in  VIEW_DETAILS case",c_run_timestamp.arr); 
																																																/** Ver 1.1 **/
    		}

				i_err[0]= Fadd32( ptr_fml_Obuf, FFO_MTCH_CNTCT_KEY, (char *)c_match_acc_in.arr, 0 );
  			i_ferr [ 0 ] = Ferror32;
				i_err[1]= Fadd32( ptr_fml_Obuf, FFO_RUN_NUM, (char *)&l_run_num, 0 );
  			i_ferr [ 1 ] = Ferror32;
				i_err[2]= Fadd32( ptr_fml_Obuf, FFO_TRD_DT, (char *)c_trd_dt.arr, 0 );
  			i_ferr [ 2 ] = Ferror32;
				i_err[3]= Fadd32( ptr_fml_Obuf,FFO_INDX_VAL , (char *)&l_nifty_spot, 0 );      /** Ver 1.1 **/
        i_ferr [ 3 ] = Ferror32;
        i_err[4]= Fadd32( ptr_fml_Obuf,FFO_TM_STMP, (char *)c_run_timestamp.arr, 0 );  /** Ver 1.1 **/
        i_ferr [ 4 ] = Ferror32;
				i_err[5]= Fadd32( ptr_fml_Obuf, FFO_AMOUNT, (char *)&d_grs_alloc, 0 );
  			i_ferr [ 5 ] = Ferror32;
				i_err[6]= Fadd32( ptr_fml_Obuf, FFO_LIMIT, (char *)&d_free_limit, 0 );
  			i_ferr [ 6 ] = Ferror32;
				i_err[7]= Fadd32( ptr_fml_Obuf, FFO_PSTN_AMT_BLKD, (char *)&d_cash, 0 );
  			i_ferr [ 7 ] = Ferror32;
				i_err[8]= Fadd32( ptr_fml_Obuf, FFO_ADDL_AMT_BLKD, (char *)&d_non_cash, 0 );
  			i_ferr [ 8 ] = Ferror32;

		
				for(j=0;j<9;j++)
       	{
       		if(i_err[j] == -1)
         	{
         		fn_errlog( c_ServiceName, "S31200",Fstrerror32(i_ferr[j]),c_err_msg);
           	fn_userlog(c_ServiceName,"Error in adding header row for VIEW_DETAILS case ,field %d",j );
           	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           	tpfree((char *)ptr_fml_Obuf);
           	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         	}
       	}

				strcpy ((char *)stmnt.arr,"select FRB_FO_UNDRLYNG, FRB_FO_INDSTK,FRB_FO_PRD_TYP, FRB_FO_OPT_TYP, ");
				strcat ((char *)stmnt.arr," FRB_FO_EXER_TYP, FRB_FO_EXPIRY_DT, FRB_FO_STRK_PRC, FRB_FO_OPNPSTN_QTY,");
				strcat ((char *)stmnt.arr," FRB_FO_OPNPSTN_FLW, FRB_FO_MRGN_BLKD, ");
				strcat ((char *)stmnt.arr," FRB_FO_PNL_LEV");
				strcat ((char *)stmnt.arr,c_level);
				strcat ((char *)stmnt.arr,"  sort_col,");
				strcat ((char *)stmnt.arr," FRB_FO_PNL_LEV1");
				strcat ((char *)stmnt.arr,c_delim);
				strcat ((char *)stmnt.arr," FRB_FO_PNL_LEV2");
				strcat ((char *)stmnt.arr,c_delim);
				strcat ((char *)stmnt.arr," FRB_FO_PNL_LEV3");
				strcat ((char *)stmnt.arr,c_delim);
				strcat ((char *)stmnt.arr," FRB_FO_PNL_LEV4");
				strcat ((char *)stmnt.arr,c_delim);
				strcat ((char *)stmnt.arr," FRB_FO_PNL_LEV5");
				strcat ((char *)stmnt.arr,c_delim);
				strcat ((char *)stmnt.arr," FRB_FO_PNL_LEV6");
				strcat ((char *)stmnt.arr,c_delim);
				strcat ((char *)stmnt.arr," FRB_FO_PNL_LEV7");
				strcat ((char *)stmnt.arr,c_delim);
				strcat ((char *)stmnt.arr," FRB_FO_PNL_LEV8");
				strcat ((char *)stmnt.arr,c_delim);
				strcat ((char *)stmnt.arr," FRB_FO_PNL_LEV9");
				strcat ((char *)stmnt.arr,c_delim);
				strcat ((char *)stmnt.arr," FRB_FO_PNL_LEV10 PNL,");
				strcat ((char *)stmnt.arr," FRB_FO_OUT_POC_AT_LEV OUT_OF_PKT_AT,");
				strcat ((char *)stmnt.arr," FRB_FO_OUT_POC_LEV1");
				strcat ((char *)stmnt.arr,c_delim);
				strcat ((char *)stmnt.arr," FRB_FO_OUT_POC_LEV2");
				strcat ((char *)stmnt.arr,c_delim);
				strcat ((char *)stmnt.arr," FRB_FO_OUT_POC_LEV3");
				strcat ((char *)stmnt.arr,c_delim);
				strcat ((char *)stmnt.arr," FRB_FO_OUT_POC_LEV4");
				strcat ((char *)stmnt.arr,c_delim);
				strcat ((char *)stmnt.arr," FRB_FO_OUT_POC_LEV5");
				strcat ((char *)stmnt.arr,c_delim);
				strcat ((char *)stmnt.arr," FRB_FO_OUT_POC_LEV6");
				strcat ((char *)stmnt.arr,c_delim);
				strcat ((char *)stmnt.arr," FRB_FO_OUT_POC_LEV7");
				strcat ((char *)stmnt.arr,c_delim);
				strcat ((char *)stmnt.arr," FRB_FO_OUT_POC_LEV8");
				strcat ((char *)stmnt.arr,c_delim);
				strcat ((char *)stmnt.arr," FRB_FO_OUT_POC_LEV9");
				strcat ((char *)stmnt.arr,c_delim);
				strcat ((char *)stmnt.arr," FRB_FO_OUT_POC_LEV10 OUT_OF_POC,");
				strcat ((char *)stmnt.arr," FRB_FO_OPT_OBGLTN OPT_OBGLTN, ");
				strcat ((char *)stmnt.arr," FRB_FO_OPNPSTN_VAL ");
				strcat ((char *)stmnt.arr," from FRB_FO_RSK_BRKUP where FRB_FO_RUN_NO = '");
				MEMSET(c_temp_var);
				sprintf(c_temp_var,"%ld",l_run_num);
				strcat ((char *)stmnt.arr,c_temp_var);
				strcat ((char *)stmnt.arr,"' and  FRB_FO_TRD_DT = '");
				strcat ((char *)stmnt.arr,c_trd_dt.arr);
				strcat ((char *)stmnt.arr,"' and  FRB_FO_MTCH_ACC = '");
				strcat ((char *)stmnt.arr,c_match_acc_in.arr);
				if(c_prdct_typ != '*')
        {
          strcat ((char *)stmnt.arr,"' and FRB_FO_PRD_TYP = '");
					MEMSET(c_temp_var);
					sprintf(c_temp_var,"%c",c_prdct_typ);
          strcat ((char *)stmnt.arr,c_temp_var);
        }	
				if(strcmp(c_undrlyng.arr,"DFLT")!=0)
        {
          strcat ((char *)stmnt.arr,"' and FRB_FO_UNDRLYNG = '");
          strcat ((char *)stmnt.arr,c_undrlyng.arr);
        }	
				strcat ((char *)stmnt.arr,"' ORDER BY FRB_FO_UNDRLYNG,FRB_FO_PRD_TYP,FRB_FO_EXPIRY_DT ");

				stmnt.len = strlen((char *)stmnt.arr);
			
				print_qry1((char*)stmnt.arr,stmnt.len,c_ServiceName);

				if(DEBUG_MSG_LVL_0)
    		{
      		fn_userlog(c_ServiceName,"Preparing query.... ");
				}
		
				EXEC SQL PREPARE sql_stmnt FROM :stmnt;	
			
				EXEC SQL DECLARE sys_cur2 CURSOR FOR sql_stmnt;
	
				EXEC SQL OPEN sys_cur2 ;
	
				if(SQLCODE != 0)
 				{
   				fn_errlog( c_ServiceName, "S31205", SQLMSG, c_err_msg );
   				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   				tpfree((char *)ptr_fml_Obuf);
   				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  			}
		
				/** Following are the default inputs to be passed to output FML in case of group total **/	
				c_grp_inp_c = '*';
				d_grp_inp = 0.0;
				strcpy(c_grp_inp_s.arr,"-");
				/******************************************************************************************/	
				l_req_buff_sz = sizeof(c_undrlyng)+
												sizeof(c_prdct_typ)+
												sizeof(c_opt_typ)+
												sizeof(c_exer_typ)+
												sizeof(c_expry_dt)+
												sizeof(d_strk_prc)+
												sizeof(l_quantity)+
												sizeof(d_opt_obgltn)+
												sizeof(c_ordr_flw)+
												sizeof(d_mrgn_blocked)+
												sizeof(c_pnl)+
												sizeof(c_status_flg)+
												sizeof(c_ctgry_indstk)+
												sizeof(d_ltp)+
												sizeof(d_opn_pstn_val)+
												sizeof(c_out_of_poc)+
												sizeof(l_out_of_poc_at)+
												sizeof(i_up_poc_lvl)+          /** Ver 1.1 **/
                        sizeof(i_dn_poc_lvl);          /** Ver 1.1 **/

				
				while(1)
				{	
					i++;
					MEMSET(c_undrlyng);
					MEMSET(c_expry_dt);
					MEMSET(c_pnl);
					MEMSET(c_out_of_poc);
					MEMSET(i_up_poc_lvl);                        /** Ver 1.1 **/
					MEMSET(i_dn_poc_lvl);                        /** Ver 1.1 **/
					l_quantity = 0;
					d_mrgn_blocked =0.0;	
					l_out_of_poc_at = 0;
					d_opt_obgltn = 0.0;
					d_opn_pstn_val = 0.0;

					if( Fneeded32( 1, l_req_buff_sz ) > Funused32( ptr_fml_Obuf ) )
					{
      			fn_userlog(c_ServiceName,"Space needed :%ld: space available in buffer :%ld:", 
																			Fneeded32( 1, l_req_buff_sz ),
																			Funused32( ptr_fml_Obuf ));

						ptr_fml_Obuf = ( FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
           			           ( Fsizeof32(ptr_fml_Obuf) + (i*l_req_buff_sz )));
						
						if (ptr_fml_Obuf == NULL)
						{
							fn_errlog(c_ServiceName, "S31210", TPMSG, c_err_msg);
							EXEC SQL CLOSE sys_cur1;
							Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
						}
					 }

					EXEC SQL FETCH sys_cur2	
									 INTO :c_undrlyng,
											  :c_ctgry_indstk,
											  :c_prdct_typ,
												:c_opt_typ,
												:c_exer_typ,
												:c_expry_dt,
												:d_strk_prc,
												:l_quantity,	
												:c_ordr_flw,	
												:d_mrgn_blocked,	
												:d_sort_col,	
												:c_pnl,
												:l_out_of_poc_at,
												:c_out_of_poc,
												:d_opt_obgltn,
												:d_opn_pstn_val;

					if ( SQLCODE != 0 )
   				{
						if( SQLCODE == NO_DATA_FOUND )
						{  

						fn_userlog(c_ServiceName , " Testing: Inside NDF ");
							/****** Loop for adding group total of last record ********/
							MEMSET(c_grp_pnl);
							MEMSET(c_grp_out_of_poc);
							MEMSET(d_arr_grp_pnl);
							MEMSET(d_arr_grp_opoc);
							MEMSET(i_dn_poc_lvl);
							MEMSET(i_up_poc_lvl);
							l_grp_out_of_poc_at = 0;
							d_grp_mrgn_blocked =0.0;
							d_grp_opt_obgltn = 0.0;
							c_status_flg = 'C';
							/*****************
							EXEC SQL
							SELECT 	FRB_FO_NETPNL_LEV1||'^'||
											FRB_FO_NETPNL_LEV2||'^'||	
											FRB_FO_NETPNL_LEV3||'^'||	
											FRB_FO_NETPNL_LEV4||'^'||	
											FRB_FO_NETPNL_LEV5||'^'||	
											FRB_FO_NETPNL_LEV6||'^'||	
											FRB_FO_NETPNL_LEV7||'^'||	
											FRB_FO_NETPNL_LEV8||'^'||	
											FRB_FO_NETPNL_LEV9||'^'||	
											FRB_FO_NETPNL_LEV10,
											FRB_FO_OUT_POC_AT_LEV,	
											FRC_FO_OUT_POC_LEV1||'^'||	
											FRC_FO_OUT_POC_LEV2||'^'||
											FRC_FO_OUT_POC_LEV3||'^'||	
											FRC_FO_OUT_POC_LEV4||'^'||	
											FRC_FO_OUT_POC_LEV5||'^'||	
											FRC_FO_OUT_POC_LEV6||'^'||	
											FRC_FO_OUT_POC_LEV7||'^'||	
											FRC_FO_OUT_POC_LEV8||'^'||	
											FRC_FO_OUT_POC_LEV9||'^'||	
											FRC_FO_OUT_POC_LEV10,
											FRC_FO_MRGN_BLKD,
											FRC_FO_OPT_OBGLTN			
							INTO 	:c_grp_pnl,
										:l_grp_out_of_poc_at,
										:c_grp_out_of_poc,
										:d_grp_mrgn_blocked,
										:d_grp_opt_obgltn
							FROM FRC_FO_RSK_CUMLTV
							WHERE	FRC_FO_RUN_NO = :l_run_num 
							AND FRC_FO_TRD_DT =  :c_trd_dt
							AND FRC_FO_MTCH_ACC = :c_match_acc_in
							AND FRC_FO_UNDRLYNG = :c_prev_undrlyng; *************/

							EXEC SQL
							SELECT 	SUM(FRB_FO_PNL_LEV1),
											SUM(FRB_FO_PNL_LEV2),
											SUM(FRB_FO_PNL_LEV3),
											SUM(FRB_FO_PNL_LEV4),
											SUM(FRB_FO_PNL_LEV5),
											SUM(FRB_FO_PNL_LEV6),
											SUM(FRB_FO_PNL_LEV7),
											SUM(FRB_FO_PNL_LEV8),
											SUM(FRB_FO_PNL_LEV9),
											SUM(FRB_FO_PNL_LEV10),
											SUM(FRB_FO_MRGN_BLKD),
											SUM(FRB_FO_OPT_OBGLTN)
							INTO 	:d_arr_grp_pnl[0],:d_arr_grp_pnl[1],
										:d_arr_grp_pnl[2],:d_arr_grp_pnl[3],
										:d_arr_grp_pnl[4],:d_arr_grp_pnl[5],
										:d_arr_grp_pnl[6],:d_arr_grp_pnl[7],
										:d_arr_grp_pnl[8],:d_arr_grp_pnl[9],
										:d_grp_mrgn_blocked,
										:d_grp_opt_obgltn
							FROM FRB_FO_RSK_BRKUP
							WHERE	FRB_FO_RUN_NO = :l_run_num 
							AND FRB_FO_TRD_DT = :c_trd_dt
							AND FRB_FO_MTCH_ACC = :c_match_acc_in
							AND FRB_FO_UNDRLYNG = :c_prev_undrlyng 
							AND FRB_FO_PRD_TYP = decode(:c_prdct_typ_temp,'F','F','O','O',FRB_FO_PRD_TYP)
							GROUP BY FRB_FO_MTCH_ACC,FRB_FO_UNDRLYNG;

							if ( SQLCODE != 0 )
							{
								fn_errlog( c_ServiceName, "S31215",SQLMSG,c_err_msg);
								EXEC SQL CLOSE sys_cur2;
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								tpfree((char *)ptr_fml_Obuf);
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}

							/******** Check if there is any case of spread margin to be deducted from total margin *********/
							EXEC SQL
							DECLARE cur_sprd_mrgn_lstgrp CURSOR FOR
							SELECT 	FRB_FO_MTCH_ACC,
											FRB_FO_UNDRLYNG,
											FRB_FO_CNTRCT_TAG,
											FRB_FO_MRGN_BLKD,
											count(*)
							FROM FRB_FO_RSK_BRKUP 
							WHERE FRB_FO_MTCH_ACC = :c_match_acc_in 
							AND FRB_FO_TRD_DT = :c_trd_dt 
							AND FRB_FO_RUN_NO = :l_run_num
							AND FRB_FO_UNDRLYNG = :c_prev_undrlyng
          		AND FRB_FO_PRD_TYP = decode(:c_prdct_typ_temp,'F','F','O','O',FRB_FO_PRD_TYP) 
							HAVING COUNT(*) > 1
							GROUP BY FRB_FO_MTCH_ACC,FRB_FO_UNDRLYNG,FRB_FO_CNTRCT_TAG ,FRB_FO_MRGN_BLKD;

							EXEC SQL OPEN cur_sprd_mrgn_lstgrp;

							if ( SQLCODE != 0 )
          		{
            		fn_errlog( c_ServiceName, "S31220",SQLMSG,c_err_msg);
								EXEC SQL CLOSE sys_cur2;
            		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            		tpfree((char *)ptr_fml_Obuf);
            		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          		}
							d_total_sprd_mrgn = 0.0;
							while(1)
							{
								MEMSET(c_sprd_match_acc);
								MEMSET(c_sprd_undrlyng);
								MEMSET(c_sprd_tag);
								d_sprd_mrgn = 0.0;
								l_cnt = 0;

								EXEC SQL
								FETCH cur_sprd_mrgn_lstgrp
								INTO 	:c_sprd_match_acc,
											:c_sprd_undrlyng,
											:c_sprd_tag,
											:d_sprd_mrgn,
											:l_cnt;

								if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
          			{
            			fn_errlog( c_ServiceName, "S31225",SQLMSG,c_err_msg);
									EXEC SQL CLOSE sys_cur2;
            			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            			tpfree((char *)ptr_fml_Obuf);
            			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          			}

								if ( SQLCODE == NO_DATA_FOUND)
          			{
      						fn_userlog(c_ServiceName,"Total Spread margin to be deducted is :%lf: ",d_total_sprd_mrgn );
									break;
								}
					
      					fn_userlog(c_ServiceName,"Spread margin on :%s: is :%lf: ",c_sprd_undrlyng.arr,d_sprd_mrgn );
								d_total_sprd_mrgn = d_total_sprd_mrgn+d_sprd_mrgn;
						
							}
							EXEC SQL CLOSE cur_sprd_mrgn_lstgrp;
      				fn_userlog(c_ServiceName,"Group Margin before spread deduction is :%lf:",d_grp_mrgn_blocked);
							d_grp_mrgn_blocked = d_grp_mrgn_blocked - d_total_sprd_mrgn;
      				fn_userlog(c_ServiceName,"Group Margin after spread deduction is :%lf:",d_grp_mrgn_blocked);
				
							/************************************************************************/
							for (i=0; i<NUM_OF_LEVELS ; i++)	
							{
								d_out_of_pocket_by = 0.0;	
								if( d_arr_grp_pnl[i] < 0)
								{
									d_out_of_pocket_by = d_arr_grp_pnl[i]+d_grp_mrgn_blocked+d_grp_opt_obgltn;	
									if (d_out_of_pocket_by > 0)
									{
										d_out_of_pocket_by = 0;	
									}
								}	
								d_arr_grp_opoc[i]=d_out_of_pocket_by;

								/***********Out of pocket at calculation **************/

								if(d_arr_grp_opoc[i]<0)
								{
									if(l_grp_out_of_poc_at == 0)
									{
										l_grp_out_of_poc_at = l_init_spot + (i*l_interval);  
									}
								}

								/*******************************************************/

								sprintf(c_temp_var,"%0.2lf%c",d_arr_grp_pnl[i],c_delimiter);
								strcat(c_grp_pnl.arr,c_temp_var);
								MEMSET(c_temp_var);

								sprintf(c_temp_var,"%0.2lf%c",d_arr_grp_opoc[i],c_delimiter);
								strcat(c_grp_out_of_poc.arr,c_temp_var);
								MEMSET(c_temp_var);

							}

							NULLTERM(c_grp_pnl.arr);
							NULLTERM(c_grp_out_of_poc.arr);

							SETLEN(c_grp_pnl);
							SETLEN(c_grp_out_of_poc);

							/** Ver 1.1 Begins **/
						
							i_dn_poc_lvl = 0;
              i_up_poc_lvl = 0;
							i_upcnt  = 0;
							i_dwncnt = 0;
	
							li_nifty_spot = d_nifty_spot;

              d_levels[0]   = l_init_spot;

              for(k = 1 ; k < 10 ; k++)
              {
               d_levels[k]= d_levels[k-1] + l_interval ;
              }

              for( k = 0 ; k < 10 ; k++)
              {
               if(d_levels[k]>=li_nifty_spot)
               {
                i_upcnt = k;
                break;
               }
              }

              i_dwncnt = i_upcnt - 1 ;

              if( i_upcnt == 0)
              {
               if( li_nifty_spot > d_levels[9] )
               {
                i_upcnt  = 10 ;
                i_dwncnt = 9;
               }
              } 	
			
              for ( i_net_dwn = i_dwncnt  ; i_net_dwn >= 0  ; i_net_dwn -- )
              {
               if(d_arr_grp_opoc[i_net_dwn]!=0)
               {
                i_dn_poc_lvl=l_init_spot+ (i_net_dwn*l_interval);
						    break;
               }
              }

              for ( i_net_up = i_upcnt ; i_net_up <= 9 ; i_net_up ++  )
              {
               if(d_arr_grp_opoc[i_net_up]!=0)
               {
                i_up_poc_lvl= l_init_spot + (i_net_up*l_interval);
						    break;		
               }
              }

              if(DEBUG_MSG_LVL_0)
              {
               fn_userlog(c_ServiceName,"Current Nifty Spot Level Is :%ld:",l_nifty_spot);
               fn_userlog(c_ServiceName,"DownWard Nifty Spot Level Is :%ld:",li_dwn_sptlvl);
               fn_userlog(c_ServiceName,"UpWard Nifty Spot Level Is :%ld:",li_uppr_sptlvl);
               fn_userlog(c_ServiceName,"Intial Spot Level at Is :%ld:",l_init_spot);
               fn_userlog(c_ServiceName,"i_dwncnt Is :%d:",i_dwncnt);
               fn_userlog(c_ServiceName,"i_upcnt Is :%d:",i_upcnt);
               fn_userlog(c_ServiceName,"i_dn_poc_lvl Is :%d:",i_dn_poc_lvl);
               fn_userlog(c_ServiceName,"i_up_poc_lvl Is :%d:",i_up_poc_lvl);
 		          }

              /** Ver 1.1 Ends **/

							/** Following are the default inputs to be passed to output FML in case of group total **/	
							c_grp_inp_c = '*';
							d_grp_inp = 0.0;
							strcpy(c_grp_inp_s.arr,"-");
							/******************************************************************************************/	

							if(DEBUG_MSG_LVL_3) 
							{
								fn_userlog(c_ServiceName,"***********************************************");
								fn_userlog(c_ServiceName,"Group PNL for :%s: is :%s: VIEW_DETAILS case",c_prev_undrlyng.arr,c_grp_pnl.arr);
								fn_userlog(c_ServiceName,"Group Out of pocket for :%s: is :%s: VIEW_DETAILS case",c_prev_undrlyng.arr,c_grp_out_of_poc.arr);
								fn_userlog(c_ServiceName,"Group OUT OF POCKET AT for :%s: is :%ld: VIEW_DETAILS case",c_prev_undrlyng.arr,l_grp_out_of_poc_at);
					  	 fn_userlog(c_ServiceName,"Group OUT OF POCKET FOR DOWN MARKET is :%s: is :%d: VIEW_DETAILS case",c_prev_undrlyng.arr,i_dn_poc_lvl);
							   fn_userlog(c_ServiceName,"Group OUT OF POCKET FOR UP MARKET is  :%s: is :%d: VIEW_DETAILS case",c_prev_undrlyng.arr,i_up_poc_lvl);
								
								fn_userlog(c_ServiceName,"Group Margin blocked for :%s: is :%lf: VIEW_DETAILS case",c_prev_undrlyng.arr,d_grp_mrgn_blocked);
								fn_userlog(c_ServiceName,"Group Quantity for :%s: is :%ld: VIEW_DETAILS case",c_prev_undrlyng.arr,l_grp_quantity);
								fn_userlog(c_ServiceName,"Group Option obligation for :%s: is :%lf: VIEW_DETAILS case",c_prev_undrlyng.arr,d_grp_opt_obgltn);
								fn_userlog(c_ServiceName,"Group Input char is :%c: VIEW_DETAILS case",c_grp_inp_c);
								fn_userlog(c_ServiceName,"Group Input string is :%s: VIEW_DETAILS case",c_grp_inp_s.arr);
								fn_userlog(c_ServiceName,"Group Input double is :%lf: VIEW_DETAILS case",d_grp_inp);
								fn_userlog(c_ServiceName,"***********************************************");
							}


							i_err[0]= Fadd32( ptr_fml_Obuf, FFO_UNDRLYNG, (char *)c_prev_undrlyng.arr, 0 );
							i_ferr [ 0 ] = Ferror32;
							i_err[1]= Fadd32( ptr_fml_Obuf, FFO_PRDCT_TYP, (char *)&c_grp_inp_c, 0 );
							i_ferr [ 1 ] = Ferror32;
							i_err[2]= Fadd32( ptr_fml_Obuf, FFO_OPT_TYP, (char *)&c_grp_inp_c, 0 );
							i_ferr [ 2 ] = Ferror32;
							i_err[3]= Fadd32( ptr_fml_Obuf, FFO_EXER_TYP, (char *)&c_grp_inp_c, 0 );
							i_ferr [ 3 ] = Ferror32;
							i_err[4]= Fadd32( ptr_fml_Obuf, FFO_EXPRY_DT, (char *)c_grp_inp_s.arr, 0 );
							i_ferr [ 4 ] = Ferror32;
							i_err[5]= Fadd32( ptr_fml_Obuf, FFO_STRIKE_PRC, (char *)&d_grp_inp, 0 );
							i_ferr [ 5 ] = Ferror32;
							i_err[6]= Fadd32( ptr_fml_Obuf, FFO_EXEC_QTY, (char *)&l_grp_quantity, 0 );
							i_ferr [ 6 ] = Ferror32;
							l_grp_quantity = 0;
							i_err[7]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_VAL, (char *)&d_grp_opt_obgltn, 0 );
							i_ferr [ 7 ] = Ferror32;
							i_err[8]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_FLW, (char *)&c_grp_inp_c, 0 );
							i_ferr [ 8 ] = Ferror32;
							i_err[9]= Fadd32( ptr_fml_Obuf, FFO_ADD_MRGN_AMT, (char *)&d_grp_mrgn_blocked, 0 );
							i_ferr [ 9 ] = Ferror32;
							i_err[10]= Fadd32( ptr_fml_Obuf, FFO_MAX_PROFIT, (char *)c_grp_pnl.arr, 0 );
							i_ferr [ 10 ] = Ferror32;
							i_err[11]= Fadd32( ptr_fml_Obuf, FFO_STATUS_FLG, (char *)&c_status_flg, 0);
							i_ferr [ 11 ] = Ferror32;
							i_err[12]= Fadd32( ptr_fml_Obuf, FFO_CTGRY_INDSTK, (char *)&c_grp_inp_c, 0);
							i_ferr [ 12 ] = Ferror32;
							i_err[13]= Fadd32( ptr_fml_Obuf, FFO_EFF_LTP, (char *)&d_grp_inp, 0);
							i_ferr [ 13 ] = Ferror32;
							i_err[14]= Fadd32( ptr_fml_Obuf, FFO_BASE_ORD_VAL, (char *)&d_grp_inp, 0);
      				i_ferr [ 14 ] = Ferror32;
						
							for(j=0;j<15;j++)
							{
								if(i_err[j] == -1)
								{
									fn_errlog( c_ServiceName, "S31230",Fstrerror32(i_ferr[j]),c_err_msg);
									EXEC SQL CLOSE sys_cur2;
									fn_userlog(c_ServiceName,"Error in Fadd32 for VIEW_DETAILS case ,field %d",j );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
									tpfree((char *)ptr_fml_Obuf);
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}
							}

							if(c_usr_flg != 'C')  
							{
						fn_userlog(c_ServiceName ," -- 1 --");
								i_err[0]= Fadd32( ptr_fml_Obuf, FFO_BRK_EVN_PT, (char *)c_grp_out_of_poc.arr, 0 );
								i_ferr [ 0 ] = Ferror32;
								i_err[1]= Fadd32( ptr_fml_Obuf, FFO_CA_LVL, (char *)&l_grp_out_of_poc_at, 0 );
								i_ferr [ 1 ] = Ferror32;
								i_err[2]= Fadd32( ptr_fml_Obuf,FFO_HGH_INDX_VAL, (char *)&i_up_poc_lvl, 0 );  /** Ver 1.1 **/
                i_ferr [ 2 ] = Ferror32;
                i_err[3]= Fadd32( ptr_fml_Obuf,FFO_LOW_INDX_VAL, (char *)&i_dn_poc_lvl, 0 );  /** Ver 1.1 **/
                i_ferr [ 3 ] = Ferror32;							

								for(j=0;j<4;j++)
								{
									if(i_err[j] == -1)
									{
										fn_errlog( c_ServiceName, "S31235",Fstrerror32(i_ferr[j]),c_err_msg);
										EXEC SQL CLOSE sys_cur2;
										fn_userlog(c_ServiceName,"Error in Fadd32 for VIEW_DETAILS case ,field %d",j );
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
										tpfree((char *)ptr_fml_Obuf);
										tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
									}
								}
							}
					
							/********** End of Loop for adding group total of last record ********/
							/********** Loop for adding Total Profit and loss of a match account ********/
		
							MEMSET(c_total_pnl);
							MEMSET(c_total_out_of_poc);
							MEMSET(c_match_acc_temp);
							MEMSET(i_up_poc_lvl);               /** Ver 1.1 **/
							MEMSET(i_dn_poc_lvl);               /** Ver 1.1 **/
							l_total_out_of_poc_at = 0;
							d_total_mrgn_blocked = 0.0;
							d_total_opt_obgltn = 0.0;
							c_status_flg = 'C';
				
							/* Commented for rectifying the total out of pocket calculation 	
							EXEC SQL
							SELECT 	FRC_FO_MTCH_ACC,
											SUM(FRC_FO_NETPNL_LEV1)||'^'||
											SUM(FRC_FO_NETPNL_LEV2)||'^'||	
											SUM(FRC_FO_NETPNL_LEV3)||'^'||	
											SUM(FRC_FO_NETPNL_LEV4)||'^'||	
											SUM(FRC_FO_NETPNL_LEV5)||'^'||	
											SUM(FRC_FO_NETPNL_LEV6)||'^'||	
											SUM(FRC_FO_NETPNL_LEV7)||'^'||	
											SUM(FRC_FO_NETPNL_LEV8)||'^'||	
											SUM(FRC_FO_NETPNL_LEV9)||'^'||	
											SUM(FRC_FO_NETPNL_LEV10),
											MIN(FRC_FO_OUT_POC_AT_LEV),	
											SUM(FRC_FO_OUT_POC_LEV1)||'^'||	
											SUM(FRC_FO_OUT_POC_LEV2)||'^'||
											SUM(FRC_FO_OUT_POC_LEV3)||'^'||	
											SUM(FRC_FO_OUT_POC_LEV4)||'^'||	
											SUM(FRC_FO_OUT_POC_LEV5)||'^'||	
											SUM(FRC_FO_OUT_POC_LEV6)||'^'||	
											SUM(FRC_FO_OUT_POC_LEV7)||'^'||	
											SUM(FRC_FO_OUT_POC_LEV8)||'^'||	
											SUM(FRC_FO_OUT_POC_LEV9)||'^'||	
											SUM(FRC_FO_OUT_POC_LEV10),
											SUM(FRC_FO_MRGN_BLKD),
											SUM(FRC_FO_OPT_OBGLTN)
							INTO 		:c_match_acc_temp,
											:c_total_pnl,
											:l_total_out_of_poc_at,
											:c_total_out_of_poc,
											:d_total_mrgn_blocked,
											:d_total_opt_obgltn
							FROM FRC_FO_RSK_CUMLTV
							WHERE	FRC_FO_RUN_NO = :l_run_num 
							AND FRC_FO_TRD_DT =  :c_trd_dt
							AND FRC_FO_MTCH_ACC = :c_match_acc_in
							GROUP BY FRC_FO_MTCH_ACC;
							**********************************************************************************/

							fn_userlog(c_ServiceName,"c_undrlyng_temp:%s:c_prdct_typ_temp:%c:",c_undrlyng_temp.arr,c_prdct_typ_temp);
							fn_userlog(c_ServiceName,"l_run_num :%ld: c_trd_dt :%s: c_match_acc_in :%s:",l_run_num,c_trd_dt.arr,c_match_acc_in.arr);
							EXEC SQL
							SELECT 	SUM(FRB_FO_PNL_LEV1),
											SUM(FRB_FO_PNL_LEV2),
											SUM(FRB_FO_PNL_LEV3),
											SUM(FRB_FO_PNL_LEV4),
											SUM(FRB_FO_PNL_LEV5),
											SUM(FRB_FO_PNL_LEV6),
											SUM(FRB_FO_PNL_LEV7),
											SUM(FRB_FO_PNL_LEV8),
											SUM(FRB_FO_PNL_LEV9),
											SUM(FRB_FO_PNL_LEV10),
											SUM(FRB_FO_MRGN_BLKD),
											SUM(FRB_FO_OPT_OBGLTN)
							INTO 		:d_arr_total_pnl[0],:d_arr_total_pnl[1],
											:d_arr_total_pnl[2],:d_arr_total_pnl[3],
											:d_arr_total_pnl[4],:d_arr_total_pnl[5],
											:d_arr_total_pnl[6],:d_arr_total_pnl[7],
											:d_arr_total_pnl[8],:d_arr_total_pnl[9],
											:d_total_mrgn_blocked,
											:d_total_opt_obgltn
							FROM FRB_FO_RSK_BRKUP
							WHERE	FRB_FO_RUN_NO = :l_run_num 
							AND FRB_FO_TRD_DT =  :c_trd_dt
							AND FRB_FO_MTCH_ACC = :c_match_acc_in
            	AND TRIM(FRB_FO_UNDRLYNG) = decode(:c_undrlyng_temp,'DFLT',TRIM(FRB_FO_UNDRLYNG),:c_undrlyng_temp) 
              AND FRB_FO_PRD_TYP = decode(:c_prdct_typ_temp,'F','F','O','O',FRB_FO_PRD_TYP)
              GROUP BY FRB_FO_MTCH_ACC;

							if ( SQLCODE != 0 )
							{
								fn_errlog( c_ServiceName, "S31240",SQLMSG,c_err_msg);
								EXEC SQL CLOSE sys_cur2;
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								tpfree((char *)ptr_fml_Obuf);
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
							/******** Check if there is any case of spread margin to be deducted from total margin *********/
							EXEC SQL
							DECLARE cur_sprd_mrgn_total CURSOR FOR
							SELECT 	FRB_FO_MTCH_ACC,
											FRB_FO_UNDRLYNG,
											FRB_FO_CNTRCT_TAG,
											FRB_FO_MRGN_BLKD,
											count(*)
							FROM FRB_FO_RSK_BRKUP 
							WHERE FRB_FO_MTCH_ACC = :c_match_acc_in 
							AND FRB_FO_TRD_DT = :c_trd_dt 
							AND FRB_FO_RUN_NO = :l_run_num
							AND TRIM(FRB_FO_UNDRLYNG) = decode(:c_undrlyng_temp,'DFLT',TRIM(FRB_FO_UNDRLYNG),:c_undrlyng_temp)
							AND FRB_FO_PRD_TYP = decode(:c_prdct_typ_temp,'F','F','O','O',FRB_FO_PRD_TYP) 
							HAVING COUNT(*) > 1
							GROUP BY FRB_FO_MTCH_ACC,FRB_FO_UNDRLYNG,FRB_FO_CNTRCT_TAG ,FRB_FO_MRGN_BLKD;

							EXEC SQL OPEN cur_sprd_mrgn_total;

							if ( SQLCODE != 0 )
          		{
            		fn_errlog( c_ServiceName, "S31245",SQLMSG,c_err_msg);
								EXEC SQL CLOSE sys_cur2;
            		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            		tpfree((char *)ptr_fml_Obuf);
            		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          		}
							d_total_sprd_mrgn = 0.0;
							while(1)
							{
								MEMSET(c_sprd_match_acc);
								MEMSET(c_sprd_undrlyng);
								MEMSET(c_sprd_tag);
								d_sprd_mrgn = 0.0;
								l_cnt = 0;

								EXEC SQL
								FETCH cur_sprd_mrgn_total
								INTO 	:c_sprd_match_acc,
											:c_sprd_undrlyng,
											:c_sprd_tag,
											:d_sprd_mrgn,
											:l_cnt;

								if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
          			{
            			fn_errlog( c_ServiceName, "S31250",SQLMSG,c_err_msg);
									EXEC SQL CLOSE sys_cur2;
            			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            			tpfree((char *)ptr_fml_Obuf);
            			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          			}

								if ( SQLCODE == NO_DATA_FOUND)
          			{
      						fn_userlog(c_ServiceName,"Total Spread margin to be deducted is :%lf: ",d_total_sprd_mrgn );
									break;
								}
					
      					fn_userlog(c_ServiceName,"Spread margin on :%s: is :%lf: ",c_sprd_undrlyng.arr,d_sprd_mrgn );
								d_total_sprd_mrgn = d_total_sprd_mrgn+d_sprd_mrgn;
						
							}
							EXEC SQL CLOSE cur_sprd_mrgn_lstgrp;
      				fn_userlog(c_ServiceName,"Total Margin before spread deduction is :%lf:",d_total_mrgn_blocked);
							d_total_mrgn_blocked = d_total_mrgn_blocked - d_total_sprd_mrgn;
      				fn_userlog(c_ServiceName,"Total Margin after spread deduction is :%lf:",d_total_mrgn_blocked);
				
							/************************************************************************/

							for (j=0; j<NUM_OF_LEVELS ; j++)	
							{
								d_out_of_pocket_by = 0.0;	
								if( d_arr_total_pnl[j] < 0)
								{
									d_out_of_pocket_by = d_arr_total_pnl[j]+d_total_mrgn_blocked+d_total_opt_obgltn;	
									if (d_out_of_pocket_by > 0)
									{
										d_out_of_pocket_by = 0;	
									}
								}	
								d_arr_total_opoc[j]=d_out_of_pocket_by;

								/***********Out of pocket at calculation **************/

								if(d_arr_total_opoc[j]<0)
								{
									if(l_total_out_of_poc_at == 0)
									{
										l_total_out_of_poc_at = l_init_spot + (j*l_interval);  
									}
								}

								/*******************************************************/

								sprintf(c_temp_var,"%0.2lf%c",d_arr_total_pnl[j],c_delimiter);
								strcat(c_total_pnl.arr,c_temp_var);
								MEMSET(c_temp_var);

								sprintf(c_temp_var,"%0.2lf%c",d_arr_total_opoc[j],c_delimiter);
								strcat(c_total_out_of_poc.arr,c_temp_var);
								MEMSET(c_temp_var);

							}

							NULLTERM(c_total_pnl.arr);
							NULLTERM(c_total_out_of_poc.arr);

							SETLEN(c_total_pnl);
							SETLEN(c_total_out_of_poc);
							SETLEN(c_match_acc_temp);

						
			        /** Ver 1.1 Begins **/
  					
							i_dn_poc_lvl = 0;
              i_up_poc_lvl = 0;
							i_upcnt  = 0;
							i_dwncnt = 0;
	
              li_nifty_spot = d_nifty_spot;
    
              d_levels[0]   = l_init_spot;

              for(k = 1 ; k < 10 ; k++)
              {
               d_levels[k]= d_levels[k-1] + l_interval ;
              }

              for( k = 0 ; k < 10 ; k++)
              {
                if(d_levels[k]>=li_nifty_spot)
                {
                 i_upcnt = k;
                 break;
                }
              }

              i_dwncnt = i_upcnt - 1 ;

              if( i_upcnt == 0)
              {
               if( li_nifty_spot > d_levels[9] )
               {
                i_upcnt  = 10 ;
                i_dwncnt = 9;
               }
              }


             for ( i_net_dwn = i_dwncnt  ; i_net_dwn >= 0  ; i_net_dwn -- )
             {
              if(d_arr_total_opoc[i_net_dwn]!=0)
              {
 	             i_dn_poc_lvl=l_init_spot + (i_net_dwn*l_interval);
						   break;
 		          }
    	       }

 		         for ( i_net_up = i_upcnt ; i_net_up <= 9 ; i_net_up ++  )
    	       {
 		  	      if(d_arr_total_opoc[i_net_up]!=0)
        		  {
               i_up_poc_lvl=l_init_spot + (i_net_up*l_interval);
						   break;	
 		          }
    	       }
 	          
             if(DEBUG_MSG_LVL_0)
      	     {
              fn_userlog(c_ServiceName,"Current Nifty Spot Level Is :%ld:",l_nifty_spot);
              fn_userlog(c_ServiceName,"DownWard Nifty Spot Level Is :%ld:",li_dwn_sptlvl);
              fn_userlog(c_ServiceName,"UpWard Nifty Spot Level Is :%ld:",li_uppr_sptlvl);
              fn_userlog(c_ServiceName,"Intial Spot Level at Is :%ld:",l_init_spot);
              fn_userlog(c_ServiceName,"i_dwncnt Is :%d:",i_dwncnt);
              fn_userlog(c_ServiceName,"i_upcnt Is :%d:",i_upcnt);
              fn_userlog(c_ServiceName,"i_dn_poc_lvl Is :%d:",i_dn_poc_lvl);
              fn_userlog(c_ServiceName,"i_up_poc_lvl Is :%d:",i_up_poc_lvl);
             }

             /** Ver 1.1 Ends **/	
	 
 						if(DEBUG_MSG_LVL_3)  
							{
								fn_userlog(c_ServiceName,"***********************************************");
								fn_userlog(c_ServiceName,"Total PNL for :%s: is :%s: VIEW_DETAILS case",c_match_acc_in.arr,c_total_pnl.arr);
								fn_userlog(c_ServiceName,"Total out of pocket for :%s: is :%s: VIEW_DETAILS case",c_match_acc_in.arr,c_total_out_of_poc.arr);
								fn_userlog(c_ServiceName,"Total OUT OF POCKET AT for :%s: is :%ld: VIEW_DETAILS case",c_match_acc_in.arr,l_total_out_of_poc_at);
								fn_userlog(c_ServiceName,"Total OUT OF POCKET FOR DOWN MARKET is:%s: is :%d: VIEW_DETAILS case",c_match_acc_in.arr,i_dn_poc_lvl);
								fn_userlog(c_ServiceName,"Total OUT OF POCKET FOR UP MARKET is:%s: is :%d: VIEW_DETAILS case",c_match_acc_in.arr,i_up_poc_lvl);								
								fn_userlog(c_ServiceName,"Total margin blocked for :%s: is :%lf: VIEW_DETAILS case",c_match_acc_in.arr,d_total_mrgn_blocked);
								fn_userlog(c_ServiceName,"Total quantity with :%s: is :%ld: VIEW_DETAILS case",c_match_acc_in.arr,l_total_quantity);
								fn_userlog(c_ServiceName,"Total option obligation for :%s: is :%lf: VIEW_DETAILS case",c_match_acc_in.arr,d_total_opt_obgltn);
								fn_userlog(c_ServiceName,"######input char is :%c: VIEW_DETAILS case",c_grp_inp_c);
								fn_userlog(c_ServiceName,"######input string is :%s: VIEW_DETAILS case",c_grp_inp_s.arr);
								fn_userlog(c_ServiceName,"######input double is :%lf: VIEW_DETAILS case",d_grp_inp);
								fn_userlog(c_ServiceName,"***********************************************");
							}


							i_err[0]= Fadd32( ptr_fml_Obuf, FFO_UNDRLYNG, (char *)c_grp_inp_s.arr, 0 );
							i_ferr [ 0 ] = Ferror32;
							i_err[1]= Fadd32( ptr_fml_Obuf, FFO_PRDCT_TYP, (char *)&c_grp_inp_c, 0 );
							i_ferr [ 1 ] = Ferror32;
							i_err[2]= Fadd32( ptr_fml_Obuf, FFO_OPT_TYP, (char *)&c_grp_inp_c, 0 );
							i_ferr [ 2 ] = Ferror32;
							i_err[3]= Fadd32( ptr_fml_Obuf, FFO_EXER_TYP, (char *)&c_grp_inp_c, 0 );
							i_ferr [ 3 ] = Ferror32;
							i_err[4]= Fadd32( ptr_fml_Obuf, FFO_EXPRY_DT, (char *)c_grp_inp_s.arr, 0 );
							i_ferr [ 4 ] = Ferror32;
							i_err[5]= Fadd32( ptr_fml_Obuf, FFO_STRIKE_PRC, (char *)&d_grp_inp, 0 );
							i_ferr [ 5 ] = Ferror32;
							i_err[6]= Fadd32( ptr_fml_Obuf, FFO_EXEC_QTY, (char *)&l_total_quantity, 0 );
							i_ferr [ 6 ] = Ferror32;
							i_err[7]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_VAL, (char *)&d_total_opt_obgltn, 0 );
  						i_ferr [ 7 ] = Ferror32;
							i_err[8]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_FLW, (char *)&c_grp_inp_c, 0 );
							i_ferr [ 8 ] = Ferror32;
							i_err[9]= Fadd32( ptr_fml_Obuf, FFO_ADD_MRGN_AMT, (char *)&d_total_mrgn_blocked, 0 );
							i_ferr [ 9 ] = Ferror32;
							i_err[10]= Fadd32( ptr_fml_Obuf, FFO_MAX_PROFIT, (char *)c_total_pnl.arr, 0 );
							i_ferr [ 10 ] = Ferror32;
							i_err[11]= Fadd32( ptr_fml_Obuf, FFO_STATUS_FLG, (char *)&c_status_flg, 0);
      				i_ferr [ 11 ] = Ferror32;
							i_err[12]= Fadd32( ptr_fml_Obuf, FFO_CTGRY_INDSTK, (char *)&c_grp_inp_c, 0);
      				i_ferr [ 12 ] = Ferror32;
							i_err[13]= Fadd32( ptr_fml_Obuf, FFO_EFF_LTP, (char *)&d_grp_inp, 0);
      				i_ferr [ 13 ] = Ferror32;
							i_err[14]= Fadd32( ptr_fml_Obuf, FFO_BASE_ORD_VAL, (char *)&d_grp_inp, 0);
      				i_ferr [ 14 ] = Ferror32;
						
							for(j=0;j<15;j++)
							{
								if(i_err[j] == -1)
								{
									fn_errlog( c_ServiceName, "S31255",Fstrerror32(i_ferr[j]),c_err_msg);
									EXEC SQL CLOSE sys_cur2;
									fn_userlog(c_ServiceName,"Error in Fadd32 for VIEW_DETAILS case ,field %d",j );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
									tpfree((char *)ptr_fml_Obuf);
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}
							}
						  if(c_usr_flg != 'C')
          		{
								fn_userlog(c_ServiceName , " -- 2 -- ");
								i_err[0]= Fadd32( ptr_fml_Obuf, FFO_BRK_EVN_PT, (char *)c_total_out_of_poc.arr, 0 );
								i_ferr [ 0 ] = Ferror32;
								i_err[1]= Fadd32( ptr_fml_Obuf, FFO_CA_LVL, (char *)&l_total_out_of_poc_at, 0 );
								i_ferr [ 1 ] = Ferror32;
								i_err[2]= Fadd32( ptr_fml_Obuf,FFO_HGH_INDX_VAL, (char *)&i_up_poc_lvl, 0 );   /** Ver 1.1 **/
 	              i_ferr [ 2 ] = Ferror32;
                i_err[3]= Fadd32( ptr_fml_Obuf,FFO_LOW_INDX_VAL, (char *)&i_dn_poc_lvl, 0 );   /** Ver 1.1 **/
                i_ferr [ 3 ] = Ferror32;

            		for(j=0;j<4;j++)
            		{
              		if(i_err[j] == -1)
              		{
                		fn_errlog( c_ServiceName, "S31260",Fstrerror32(i_ferr[j]),c_err_msg);
										EXEC SQL CLOSE sys_cur2;
                		fn_userlog(c_ServiceName,"Error in Fadd32 for VIEW_DETAILS case ,field %d",j );
                		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                		tpfree((char *)ptr_fml_Obuf);
                		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              		}
            		}
          		}
     					fn_userlog(c_ServiceName,"Finished :%d: records in VIEW_DETAILS case ",sqlca.sqlerrd[2]);
							break;
						}
						else
						{
							fn_errlog( c_ServiceName, "S31265", SQLMSG, c_err_msg );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							tpfree((char *)ptr_fml_Obuf);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
					}/* End of loop for adding the total profit and loss of a match account */ 

					SETLEN(c_undrlyng);
					SETLEN(c_expry_dt);
					SETLEN(c_pnl);
					SETLEN(c_out_of_poc);

					if(strcmp(c_prev_undrlyng.arr,c_undrlyng.arr)!=0 && i > 1)
					{

					fn_userlog(c_ServiceName , " Inside strcmp of c_prev_undrlyng.arr and c_undrlyng.arr ");
					fn_userlog(c_ServiceName ," Testing :Value of c_prev_undrlyng and c_undrlyng is : <%s> and <%s> ",c_prev_undrlyng.arr,c_undrlyng.arr);
						MEMSET(c_grp_pnl);
						MEMSET(c_grp_out_of_poc);
						MEMSET(d_arr_grp_pnl);
						MEMSET(d_arr_grp_opoc);
						MEMSET(i_up_poc_lvl);         /*** Ver 1.1 ***/
						MEMSET(i_dn_poc_lvl);         /*** Ver 1.1 ***/

						l_grp_out_of_poc_at = 0;
						d_grp_mrgn_blocked =0.0;
						d_grp_opt_obgltn = 0.0;
						c_status_flg = 'C';
						/*************
						EXEC SQL
						SELECT FRC_FO_NETPNL_LEV1||'^'||
									 FRC_FO_NETPNL_LEV2||'^'||	
									 FRC_FO_NETPNL_LEV3||'^'||	
									 FRC_FO_NETPNL_LEV4||'^'||	
									 FRC_FO_NETPNL_LEV5||'^'||	
									 FRC_FO_NETPNL_LEV6||'^'||	
									 FRC_FO_NETPNL_LEV7||'^'||	
									 FRC_FO_NETPNL_LEV8||'^'||	
									 FRC_FO_NETPNL_LEV9||'^'||	
									 FRC_FO_NETPNL_LEV10,
									 FRC_FO_OUT_POC_AT_LEV,	
									 FRC_FO_OUT_POC_LEV1||'^'||	
									 FRC_FO_OUT_POC_LEV2||'^'||
									 FRC_FO_OUT_POC_LEV3||'^'||	
									 FRC_FO_OUT_POC_LEV4||'^'||	
									 FRC_FO_OUT_POC_LEV5||'^'||	
									 FRC_FO_OUT_POC_LEV6||'^'||	
									 FRC_FO_OUT_POC_LEV7||'^'||	
									 FRC_FO_OUT_POC_LEV8||'^'||	
									 FRC_FO_OUT_POC_LEV9||'^'||	
									 FRC_FO_OUT_POC_LEV10,
									 FRC_FO_MRGN_BLKD,
									 FRC_FO_OPT_OBGLTN			
						INTO 	:c_grp_pnl,
									:l_grp_out_of_poc_at,
									:c_grp_out_of_poc,
									:d_grp_mrgn_blocked,
									:d_grp_opt_obgltn
						FROM FRC_FO_RSK_CUMLTV
						WHERE	FRC_FO_RUN_NO = :l_run_num 
						AND FRC_FO_TRD_DT =  :c_trd_dt
						AND FRC_FO_MTCH_ACC = :c_match_acc_in
						AND FRC_FO_UNDRLYNG = :c_prev_undrlyng; ************/

						EXEC SQL
						SELECT 	SUM(FRB_FO_PNL_LEV1),
										SUM(FRB_FO_PNL_LEV2),
										SUM(FRB_FO_PNL_LEV3),
										SUM(FRB_FO_PNL_LEV4),
										SUM(FRB_FO_PNL_LEV5),
										SUM(FRB_FO_PNL_LEV6),
										SUM(FRB_FO_PNL_LEV7),
										SUM(FRB_FO_PNL_LEV8),
										SUM(FRB_FO_PNL_LEV9),
										SUM(FRB_FO_PNL_LEV10),
										SUM(FRB_FO_MRGN_BLKD),
										SUM(FRB_FO_OPT_OBGLTN)
						INTO 	:d_arr_grp_pnl[0],:d_arr_grp_pnl[1],
									:d_arr_grp_pnl[2],:d_arr_grp_pnl[3],
									:d_arr_grp_pnl[4],:d_arr_grp_pnl[5],
									:d_arr_grp_pnl[6],:d_arr_grp_pnl[7],
									:d_arr_grp_pnl[8],:d_arr_grp_pnl[9],
									:d_grp_mrgn_blocked,
									:d_grp_opt_obgltn
						FROM FRB_FO_RSK_BRKUP
						WHERE	FRB_FO_RUN_NO = :l_run_num 
						AND FRB_FO_TRD_DT = :c_trd_dt
						AND FRB_FO_MTCH_ACC = :c_match_acc_in
						AND FRB_FO_UNDRLYNG = :c_prev_undrlyng 
						AND FRB_FO_PRD_TYP = decode(:c_prdct_typ_temp,'F','F','O','O',FRB_FO_PRD_TYP)
						GROUP BY FRB_FO_MTCH_ACC,FRB_FO_UNDRLYNG;

						if ( SQLCODE != 0 )
						{
							fn_errlog( c_ServiceName, "S31270",SQLMSG,c_err_msg);
							EXEC SQL CLOSE sys_cur2;
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							tpfree((char *)ptr_fml_Obuf);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
						/******** Check if there is any case of spread margin to be deducted from total margin *********/
						EXEC SQL
						DECLARE cur_sprd_mrgn_grp CURSOR FOR
						SELECT 	FRB_FO_MTCH_ACC,
										FRB_FO_UNDRLYNG,
										FRB_FO_CNTRCT_TAG,
										FRB_FO_MRGN_BLKD,
										count(*)
						FROM FRB_FO_RSK_BRKUP 
						WHERE FRB_FO_MTCH_ACC = :c_match_acc_in 
						AND FRB_FO_TRD_DT = :c_trd_dt 
						AND FRB_FO_RUN_NO = :l_run_num
						AND FRB_FO_UNDRLYNG = :c_prev_undrlyng
          	AND FRB_FO_PRD_TYP = decode(:c_prdct_typ_temp,'F','F','O','O',FRB_FO_PRD_TYP) 
						HAVING COUNT(*) > 1
						GROUP BY FRB_FO_MTCH_ACC,FRB_FO_UNDRLYNG,FRB_FO_CNTRCT_TAG ,FRB_FO_MRGN_BLKD;

						EXEC SQL OPEN cur_sprd_mrgn_grp;

						if ( SQLCODE != 0 )
          	{
            	fn_errlog( c_ServiceName, "S31275",SQLMSG,c_err_msg);
							EXEC SQL CLOSE sys_cur2;
            	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            	tpfree((char *)ptr_fml_Obuf);
            	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          	}
						d_total_sprd_mrgn =0.0;	
						while(1)
						{
							MEMSET(c_sprd_match_acc);
							MEMSET(c_sprd_undrlyng);
							MEMSET(c_sprd_tag);
							d_sprd_mrgn = 0.0;
							l_cnt = 0;

							EXEC SQL
							FETCH cur_sprd_mrgn_grp
							INTO 	:c_sprd_match_acc,
										:c_sprd_undrlyng,
										:c_sprd_tag,
										:d_sprd_mrgn,
										:l_cnt;

							if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
          		{
            		fn_errlog( c_ServiceName, "S31280",SQLMSG,c_err_msg);
								EXEC SQL CLOSE sys_cur2;
            		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            		tpfree((char *)ptr_fml_Obuf);
            		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          		}

							if ( SQLCODE == NO_DATA_FOUND)
          		{
      					fn_userlog(c_ServiceName,"Total Spread margin to be deducted is :%lf: ",d_total_sprd_mrgn );
								break;
							}
					
      				fn_userlog(c_ServiceName,"Spread margin on :%s: is :%lf: ",c_sprd_undrlyng.arr,d_sprd_mrgn );
							d_total_sprd_mrgn = d_total_sprd_mrgn+d_sprd_mrgn;
						
						}
						EXEC SQL CLOSE cur_sprd_mrgn_grp;
      			fn_userlog(c_ServiceName,"Group Margin before spread deduction is :%lf:",d_grp_mrgn_blocked);
						d_grp_mrgn_blocked = d_grp_mrgn_blocked - d_total_sprd_mrgn;
      			fn_userlog(c_ServiceName,"Group Margin after spread deduction is :%lf:",d_grp_mrgn_blocked);
				
						/************************************************************************/
						for (j=0; j<NUM_OF_LEVELS ; j++)	
						{
							d_out_of_pocket_by = 0.0;	
							if( d_arr_grp_pnl[j] < 0)
							{
								d_out_of_pocket_by = d_arr_grp_pnl[j]+d_grp_mrgn_blocked+d_grp_opt_obgltn;	
								if (d_out_of_pocket_by > 0)
								{
									d_out_of_pocket_by = 0;	
								}
							}	
							d_arr_grp_opoc[j]=d_out_of_pocket_by;

							/***********Out of pocket at calculation **************/

							if(d_arr_grp_opoc[j]<0)
							{
								if(l_grp_out_of_poc_at == 0)
								{
									l_grp_out_of_poc_at = l_init_spot + (j*l_interval);  
								}
							}

							/*******************************************************/

							sprintf(c_temp_var,"%0.2lf%c",d_arr_grp_pnl[j],c_delimiter);
							strcat(c_grp_pnl.arr,c_temp_var);
							MEMSET(c_temp_var);

							sprintf(c_temp_var,"%0.2lf%c",d_arr_grp_opoc[j],c_delimiter);
							strcat(c_grp_out_of_poc.arr,c_temp_var);
							MEMSET(c_temp_var);

						}

						NULLTERM(c_grp_pnl.arr);
						NULLTERM(c_grp_out_of_poc.arr);

						SETLEN(c_grp_pnl);
						SETLEN(c_grp_out_of_poc);
           

						
            /** Ver 1.1 Begins **/
					
						i_dn_poc_lvl = 0;
            i_up_poc_lvl = 0;
						i_upcnt  = 0;
						i_dwncnt = 0;
	
						li_nifty_spot = d_nifty_spot;

            d_levels[0]   = l_init_spot;

            for(k = 1 ; k < 10 ; k++)
            {
             d_levels[k]= d_levels[k-1] + l_interval ;
            }

            for( k = 0 ; k < 10 ; k++)
            {
             if(d_levels[k]>=li_nifty_spot)
             {
              i_upcnt = k;
              break;
             }
            }

            i_dwncnt = i_upcnt - 1 ;

            if( i_upcnt == 0)
            {
             if( li_nifty_spot > d_levels[9] )
             {
              i_upcnt  = 10 ;
              i_dwncnt = 9;
             }
            }
	
            for ( i_net_dwn = i_dwncnt  ; i_net_dwn >= 0  ; i_net_dwn -- )
            {
             if(d_arr_grp_opoc[i_net_dwn]!=0)
             {
              i_dn_poc_lvl=l_init_spot + (i_net_dwn*l_interval);
					    break;
             }
            }

            for ( i_net_up = i_upcnt ; i_net_up <= 9 ; i_net_up ++  )
            {
             if(d_arr_grp_opoc[i_net_up]!=0)
             {
              i_up_poc_lvl=l_init_spot + (i_net_up*l_interval);
				      break;
             }
            }
	
            if(DEBUG_MSG_LVL_0)
            {
             fn_userlog(c_ServiceName,"Current Nifty Spot Level Is :%ld:",l_nifty_spot);
             fn_userlog(c_ServiceName,"DownWard Nifty Spot Level Is :%ld:",li_dwn_sptlvl);
             fn_userlog(c_ServiceName,"UpWard Nifty Spot Level Is :%ld:",li_uppr_sptlvl);
             fn_userlog(c_ServiceName,"Intial Spot Level at Is :%ld:",l_init_spot);
             fn_userlog(c_ServiceName,"i_dwncnt Is :%d:",i_dwncnt);
             fn_userlog(c_ServiceName,"i_upcnt Is :%d:",i_upcnt);
             fn_userlog(c_ServiceName,"i_dn_poc_lvl Is :%d:",i_dn_poc_lvl);
             fn_userlog(c_ServiceName,"i_up_poc_lvl Is :%d:",i_up_poc_lvl);
            }

            /** Ver 1.1 Ends **/

						/** Following are the default inputs to be passed to output FML in case of group total **/	
						c_grp_inp_c = '*';
						d_grp_inp = 0.0;
						strcpy(c_grp_inp_s.arr,"-");
						/******************************************************************************************/	

						if(DEBUG_MSG_LVL_0)   
   					{
							fn_userlog(c_ServiceName," INSIDE -- 3 --  ");
     					fn_userlog(c_ServiceName,"***********************************************");
     					fn_userlog(c_ServiceName,"Group PNL for :%s: is :%s: VIEW_DETAILS case",c_prev_undrlyng.arr,c_grp_pnl.arr);
     					fn_userlog(c_ServiceName,"Group Out of pocket for :%s: is :%s: VIEW_DETAILS case",c_prev_undrlyng.arr,c_grp_out_of_poc.arr);
     					fn_userlog(c_ServiceName,"Group OUT OF POCKET AT for :%s: is :%ld: VIEW_DETAILS case",c_prev_undrlyng.arr,l_grp_out_of_poc_at);
     					fn_userlog(c_ServiceName,"Group OUT OF POCKET LEVEL FOR DOWN MARKET :%s: is :%ld: VIEW_DETAILS case",c_prev_undrlyng.arr,i_dn_poc_lvl);
							fn_userlog(c_ServiceName,"Group OUT OF POCKET LEVEL FOR UP MARKET :%s: is :%ld: VIEW_DETAILS case",c_prev_undrlyng.arr,i_up_poc_lvl);


							fn_userlog(c_ServiceName,"Group Margin blocked for :%s: is :%lf: VIEW_DETAILS case",c_prev_undrlyng.arr,d_grp_mrgn_blocked);
     					fn_userlog(c_ServiceName,"Group Quantity for :%s: is :%ld: VIEW_DETAILS case",c_prev_undrlyng.arr,l_grp_quantity);
     					fn_userlog(c_ServiceName,"Group Option obligation for :%s: is :%lf: VIEW_DETAILS case",c_prev_undrlyng.arr,d_grp_opt_obgltn);
     					fn_userlog(c_ServiceName,"Group Input char is :%c: VIEW_DETAILS case",c_grp_inp_c);
     					fn_userlog(c_ServiceName,"Group Input string is :%s: VIEW_DETAILS case",c_grp_inp_s.arr);
     					fn_userlog(c_ServiceName,"Group Input double is :%lf: VIEW_DETAILS case",d_grp_inp);
     					fn_userlog(c_ServiceName,"***********************************************");
						}


						i_err[0]= Fadd32( ptr_fml_Obuf, FFO_UNDRLYNG, (char *)c_prev_undrlyng.arr, 0 );
  					i_ferr [ 0 ] = Ferror32;
						i_err[1]= Fadd32( ptr_fml_Obuf, FFO_PRDCT_TYP, (char *)&c_grp_inp_c, 0 );
  					i_ferr [ 1 ] = Ferror32;
						i_err[2]= Fadd32( ptr_fml_Obuf, FFO_OPT_TYP, (char *)&c_grp_inp_c, 0 );
  					i_ferr [ 2 ] = Ferror32;
						i_err[3]= Fadd32( ptr_fml_Obuf, FFO_EXER_TYP, (char *)&c_grp_inp_c, 0 );
  					i_ferr [ 3 ] = Ferror32;
						i_err[4]= Fadd32( ptr_fml_Obuf, FFO_EXPRY_DT, (char *)c_grp_inp_s.arr, 0 );
  					i_ferr [ 4 ] = Ferror32;
						i_err[5]= Fadd32( ptr_fml_Obuf, FFO_STRIKE_PRC, (char *)&d_grp_inp, 0 );
  					i_ferr [ 5 ] = Ferror32;
						i_err[6]= Fadd32( ptr_fml_Obuf, FFO_EXEC_QTY, (char *)&l_grp_quantity, 0 );
  					i_ferr [ 6 ] = Ferror32;
						l_grp_quantity = 0;
						i_err[7]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_VAL, (char *)&d_grp_opt_obgltn, 0 );
  					i_ferr [ 7 ] = Ferror32;
						i_err[8]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_FLW, (char *)&c_grp_inp_c, 0 );
  					i_ferr [ 8 ] = Ferror32;
						i_err[9]= Fadd32( ptr_fml_Obuf, FFO_ADD_MRGN_AMT, (char *)&d_grp_mrgn_blocked, 0 );
  					i_ferr [ 9 ] = Ferror32;
						i_err[10]= Fadd32( ptr_fml_Obuf, FFO_MAX_PROFIT, (char *)c_grp_pnl.arr, 0 );
  					i_ferr [ 10 ] = Ferror32;
						i_err[11]= Fadd32( ptr_fml_Obuf, FFO_STATUS_FLG, (char *)&c_status_flg, 0);
      			i_ferr [ 11 ] = Ferror32;
						i_err[12]= Fadd32( ptr_fml_Obuf, FFO_CTGRY_INDSTK, (char *)&c_grp_inp_c, 0);
      			i_ferr [ 12 ] = Ferror32;
						i_err[13]= Fadd32( ptr_fml_Obuf, FFO_EFF_LTP, (char *)&d_grp_inp, 0);
      			i_ferr [ 13 ] = Ferror32;
						i_err[14]= Fadd32( ptr_fml_Obuf, FFO_BASE_ORD_VAL, (char *)&d_grp_inp, 0);
      			i_ferr [ 14 ] = Ferror32;
			
						for(j=0;j<15;j++)
  					{
   						if(i_err[j] == -1)
   						{
     						fn_errlog( c_ServiceName, "S31285",Fstrerror32(i_ferr[j]),c_err_msg);
								EXEC SQL CLOSE sys_cur2;
     						fn_userlog(c_ServiceName,"Error in Fadd32 for VIEW_DETAILS case ,field %d",j );
     						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     						tpfree((char *)ptr_fml_Obuf);
     						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   						}
  					}

	  				if(c_usr_flg != 'C')
          	{  
							fn_userlog(c_ServiceName, " -- 3 --");
							i_err[0]= Fadd32( ptr_fml_Obuf, FFO_BRK_EVN_PT, (char *)c_grp_out_of_poc.arr, 0 );
							i_ferr [ 0 ] = Ferror32;
							i_err[1]= Fadd32( ptr_fml_Obuf, FFO_CA_LVL, (char *)&l_grp_out_of_poc_at, 0 );
							i_ferr [ 1 ] = Ferror32;
							i_err[2]= Fadd32( ptr_fml_Obuf,FFO_HGH_INDX_VAL, (char *)&i_up_poc_lvl, 0 );
              i_ferr [ 2 ] = Ferror32;
              i_err[3]= Fadd32( ptr_fml_Obuf,FFO_LOW_INDX_VAL, (char *)&i_dn_poc_lvl, 0 );
              i_ferr [ 3 ] = Ferror32;         


							for(j=0;j<4;j++)   
            	{
              	if(i_err[j] == -1)
              	{
                	fn_errlog( c_ServiceName, "S31290",Fstrerror32(i_ferr[j]),c_err_msg);
									EXEC SQL CLOSE sys_cur2;
                	fn_userlog(c_ServiceName,"Error in Fadd32 for VIEW_DETAILS case ,field %d",j );
                	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                	tpfree((char *)ptr_fml_Obuf);
                	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              	}
            	}
          	}
	
					} /** End of loop for adding group total of previous underlying ****/
			
					l_grp_quantity = l_grp_quantity + l_quantity;
					l_total_quantity = l_total_quantity + l_quantity;
					c_status_flg = 'A';

					if(DEBUG_MSG_LVL_0)  
   				{
     				fn_userlog(c_ServiceName,"Row :%d: Exchange code is :%s: VIEW_DETAILS case",i,c_xchng_cd.arr);
     				fn_userlog(c_ServiceName,"Row :%d: Underlying is :%s: VIEW_DETAILS case",i,c_undrlyng.arr);
     				fn_userlog(c_ServiceName,"Row :%d: Category is :%c: VIEW_DETAILS case",i,c_ctgry_indstk);
     				fn_userlog(c_ServiceName,"Row :%d: Product type is :%c: VIEW_DETAILS case",i,c_prdct_typ);
     				fn_userlog(c_ServiceName,"Row :%d: Option type is :%c: VIEW_DETAILS case",i,c_opt_typ);
     				fn_userlog(c_ServiceName,"Row :%d: Exercise type is :%c: VIEW_DETAILS case",i,c_exer_typ);
     				fn_userlog(c_ServiceName,"Row :%d: Expiry date is  :%s: VIEW_DETAILS case",i,c_expry_dt.arr);
     				fn_userlog(c_ServiceName,"Row :%d: Strike price is  :%lf: VIEW_DETAILS case",i,d_strk_prc);
     				fn_userlog(c_ServiceName,"Row :%d: Executed quantity is :%ld: VIEW_DETAILS case",i,l_quantity);
     				fn_userlog(c_ServiceName,"Row :%d: Order flow is :%c: VIEW_DETAILS case",i,c_ordr_flw);
     				fn_userlog(c_ServiceName,"Row :%d: Margin blocked is :%lf: VIEW_DETAILS case",i,d_mrgn_blocked);
     				fn_userlog(c_ServiceName,"Row :%d: Open position val is :%lf: VIEW_DETAILS case",i,d_opn_pstn_val);
     				fn_userlog(c_ServiceName,"Row :%d: Option obligation is :%lf: VIEW_DETAILS case",i,d_opt_obgltn);
     				fn_userlog(c_ServiceName,"Row :%d: Sort column is :%lf: VIEW_DETAILS case",i,d_sort_col);
     				fn_userlog(c_ServiceName,"Row :%d: Profit and loss is :%s: VIEW_DETAILS case",i,c_pnl.arr);
     				fn_userlog(c_ServiceName,"Row :%d: Out of pocket at is :%ld: VIEW_DETAILS case",i,l_out_of_poc_at);
     				fn_userlog(c_ServiceName,"Row :%d: Out of pocket lvls :%s: VIEW_DETAILS case",i,c_out_of_poc.arr);
   				}

					/***	Commented In Ver	1.1
					EXEC SQL
    			SELECT NVL(FTQ_LST_TRD_PRC,0)
    			INTO :d_ltp
    			FROM FTQ_FO_TRD_QT
    			WHERE FTQ_XCHNG_CD = :c_xchng_cd
    			AND FTQ_PRDCT_TYP = :c_prdct_typ
    			AND FTQ_INDSTK = :c_ctgry_indstk
    			AND FTQ_UNDRLYNG = :c_undrlyng
    			AND FTQ_EXPRY_DT = :c_expry_dt
					AND FTQ_EXER_TYP = :c_exer_typ
					AND FTQ_OPT_TYP = :c_opt_typ
					AND FTQ_STRK_PRC = :d_strk_prc;

					************************************************/

					EXEC SQL												/***	Ver 1.1	***/
						SELECT	FRB_FO_ASSMNT_PRC
						INTO		:d_ltp
						FROM		FRB_FO_RSK_BRKUP
						WHERE		FRB_FO_MTCH_ACC	=	:c_match_acc_in
						AND			FRB_FO_XCHNG_CD	= :c_xchng_cd
						AND			FRB_FO_PRD_TYP	= :c_prdct_typ
						AND			FRB_FO_INDSTK		= :c_ctgry_indstk
						AND			FRB_FO_UNDRLYNG	= :c_undrlyng
						AND			FRB_FO_EXPIRY_DT= :c_expry_dt
						AND			FRB_FO_EXER_TYP	= :c_exer_typ
						AND			FRB_FO_OPT_TYP	= :c_opt_typ
						AND			FRB_FO_STRK_PRC	= :d_strk_prc
					  AND     FRB_FO_RUN_NO   = :l_run_num   
						AND     FRB_FO_TRD_DT   = :c_trd_dt
						AND     rownum < 2;      
					

					if ( SQLCODE != 0 )
					{
						fn_errlog( c_ServiceName, "S31295",SQLMSG,c_err_msg);
						EXEC SQL CLOSE sys_cur2;
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						tpfree((char *)ptr_fml_Obuf);
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}

					if(DEBUG_MSG_LVL_3)
   				{
     				fn_userlog(c_ServiceName,"Row :%d: LTP is :%lf: VIEW_DETAILS case",i,d_ltp);
					}

					i_err[0]= Fadd32( ptr_fml_Obuf, FFO_UNDRLYNG, (char *)c_undrlyng.arr, 0 );
  				i_ferr [ 0 ] = Ferror32;
					i_err[1]= Fadd32( ptr_fml_Obuf, FFO_PRDCT_TYP, (char *)&c_prdct_typ, 0 );
  				i_ferr [ 1 ] = Ferror32;
					i_err[2]= Fadd32( ptr_fml_Obuf, FFO_OPT_TYP, (char *)&c_opt_typ, 0 );
  				i_ferr [ 2 ] = Ferror32;
					i_err[3]= Fadd32( ptr_fml_Obuf, FFO_EXER_TYP, (char *)&c_exer_typ, 0 );
  				i_ferr [ 3 ] = Ferror32;
					i_err[4]= Fadd32( ptr_fml_Obuf, FFO_EXPRY_DT, (char *)c_expry_dt.arr, 0 );
  				i_ferr [ 4 ] = Ferror32;
					i_err[5]= Fadd32( ptr_fml_Obuf, FFO_STRIKE_PRC, (char *)&d_strk_prc, 0 );
  				i_ferr [ 5 ] = Ferror32;
					i_err[6]= Fadd32( ptr_fml_Obuf, FFO_EXEC_QTY, (char *)&l_quantity, 0 );
  				i_ferr [ 6 ] = Ferror32;
					i_err[7]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_VAL, (char *)&d_opt_obgltn, 0 );
  				i_ferr [ 7 ] = Ferror32;
					i_err[8]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_FLW, (char *)&c_ordr_flw, 0 );
  				i_ferr [ 8 ] = Ferror32;
					i_err[9]= Fadd32( ptr_fml_Obuf, FFO_ADD_MRGN_AMT, (char *)&d_mrgn_blocked, 0 );
  				i_ferr [ 9 ] = Ferror32;
					i_err[10]= Fadd32( ptr_fml_Obuf, FFO_MAX_PROFIT, (char *)c_pnl.arr, 0 );
  				i_ferr [ 10 ] = Ferror32;
					i_err[11]= Fadd32( ptr_fml_Obuf, FFO_STATUS_FLG, (char *)&c_status_flg, 0);
      		i_ferr [ 11 ] = Ferror32;
					i_err[12]= Fadd32( ptr_fml_Obuf, FFO_CTGRY_INDSTK, (char *)&c_ctgry_indstk, 0);
      		i_ferr [ 12 ] = Ferror32;
					i_err[13]= Fadd32( ptr_fml_Obuf, FFO_EFF_LTP, (char *)&d_ltp, 0);
      		i_ferr [ 13 ] = Ferror32;
					i_err[14]= Fadd32( ptr_fml_Obuf, FFO_BASE_ORD_VAL, (char *)&d_opn_pstn_val, 0);
      		i_ferr [ 14 ] = Ferror32;
			
					for(j=0;j<15;j++)
  				{
   					if(i_err[j] == -1)
   					{
     					fn_errlog( c_ServiceName, "S31300",Fstrerror32(i_ferr[j]),c_err_msg);
							EXEC SQL CLOSE sys_cur2;
     					fn_userlog(c_ServiceName,"Error in Fadd32 for VIEW_DETAILS case ,field %d",j );
     					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     					tpfree((char *)ptr_fml_Obuf);
     					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   					}
  				}

				  /** Ver 1.1 Begins **/

					i_dn_poc_lvl = 0;
					i_up_poc_lvl = 0;
					i_upcnt  = 0;
					i_dwncnt = 0;
			

          li_nifty_spot = d_nifty_spot;

          d_levels[0]   = l_init_spot;

          for(k = 1 ; k < 10 ; k++)
          {
           d_levels[k]= d_levels[k-1] + l_interval ;
          }

          for( k = 0 ; k < 10 ; k++)
          {
           if(d_levels[k]>=li_nifty_spot)
           {
             i_upcnt = k;
             break;
           }
          }

          i_dwncnt = i_upcnt - 1 ;

          if( i_upcnt == 0)
          {
           if( li_nifty_spot > d_levels[9] )
           {
            i_upcnt  = 10 ;
            i_dwncnt = 9;
           }
          }

	
          strcpy(c_copy_out_of_poc.arr,c_out_of_poc.arr);
    			d_arr_total_opoc[0] =  atof(strtok(c_copy_out_of_poc.arr,"^"));
						
					for (k =1; k<=9 ; k++)
				  {
  				  d_arr_total_opoc[k]= atof(strtok(NULL,"^"));
 				  }

          for ( i_net_dwn = i_dwncnt  ; i_net_dwn >= 0  ; i_net_dwn -- )
          {
           if(d_arr_total_opoc[i_net_dwn]!=0)
           {
            i_dn_poc_lvl=l_init_spot+ (i_net_dwn*l_interval);
			   		break;
           }
          }

          for ( i_net_up = i_upcnt ; i_net_up <= 9 ; i_net_up ++  )
          {
           if(d_arr_total_opoc[i_net_up]!=0)
           {
            i_up_poc_lvl= l_init_spot + (i_net_up*l_interval);
					  break;
           }
          }

          if(DEBUG_MSG_LVL_0)
          {
           fn_userlog(c_ServiceName," I AM HERE IN -- 4 -- ");
           fn_userlog(c_ServiceName,"Current Nifty Spot Level Is :%ld:",l_nifty_spot);
           fn_userlog(c_ServiceName,"DownWard Nifty Spot Level Is :%ld:",li_dwn_sptlvl);
           fn_userlog(c_ServiceName,"UpWard Nifty Spot Level Is :%ld:",li_uppr_sptlvl);
           fn_userlog(c_ServiceName,"Intial Spot Level at Is :%ld:",l_init_spot);
           fn_userlog(c_ServiceName,"i_dwncnt Is :%d:",i_dwncnt);
           fn_userlog(c_ServiceName,"i_upcnt Is :%d:",i_upcnt);
           fn_userlog(c_ServiceName,"i_dn_poc_lvl Is :%d:",i_dn_poc_lvl);
           fn_userlog(c_ServiceName,"i_up_poc_lvl Is :%d:",i_up_poc_lvl);
          }

          /** Ver 1.1 Ends **/


					if(c_usr_flg != 'C')
       		{  
						fn_userlog(c_ServiceName , " -- 4 -- ");
						i_err[0]= Fadd32( ptr_fml_Obuf, FFO_BRK_EVN_PT, (char *)c_out_of_poc.arr, 0 );
						i_ferr [ 0 ] = Ferror32;
						i_err[1]= Fadd32( ptr_fml_Obuf, FFO_CA_LVL, (char *)&l_out_of_poc_at, 0 );
						i_ferr [ 1 ] = Ferror32;
			      i_err[2]= Fadd32( ptr_fml_Obuf,FFO_HGH_INDX_VAL, (char *)&i_up_poc_lvl, 0 );  /** Ver 1.1 **/
            i_ferr [ 2 ] = Ferror32;
            i_err[3]= Fadd32( ptr_fml_Obuf,FFO_LOW_INDX_VAL, (char *)&i_dn_poc_lvl, 0 );  /** Ver 1.1 **/
            i_ferr [ 3 ] = Ferror32;

        		for(j=0;j<4;j++) 
        		{
          		if(i_err[j] == -1)
           		{
             		fn_errlog( c_ServiceName, "S31305",Fstrerror32(i_ferr[j]),c_err_msg);
								EXEC SQL CLOSE sys_cur2;
             		fn_userlog(c_ServiceName,"Error in Fadd32 for VIEW_DETAILS case ,field %d",j );
             		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
             		tpfree((char *)ptr_fml_Obuf);
             		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
           		}
         		}
       		}
	
					strcpy(c_prev_undrlyng.arr,c_undrlyng.arr);
					SETLEN(c_prev_undrlyng);
				}

				EXEC SQL CLOSE sys_cur2;
     		fn_userlog(c_ServiceName,"************Service completed succesfully in VIEW_DETAILS case**********");
				tpreturn(TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );

			
				
				case OUT_OF_POC:   /** Ver 1.1 **/

        if(DEBUG_MSG_LVL_0)
        {
        	fn_userlog(c_ServiceName,"Run no.:%ld: in OUT_OF_POC_SUMMARY case",l_run_num);
        	fn_userlog(c_ServiceName,"Run date :%s: in OUT_OF_POC_SUMMARY case",c_trd_dt.arr);
        	fn_userlog(c_ServiceName," Nifty Spot level at run:%ld: in OUT_OF_POC_SUMMARY case",l_nifty_spot);
        	fn_userlog(c_ServiceName,"Timestamp at run :%s: in OUT_OF_POC_SUMMARY case",c_run_timestamp.arr);
        }

        i_err[0]= Fadd32( ptr_fml_Obuf, FFO_RUN_NUM, (char *)&l_run_num, 0 );
        i_ferr [ 0 ] = Ferror32;
        i_err[1]= Fadd32( ptr_fml_Obuf,FFO_TRD_DT, (char *)c_trd_dt.arr, 0 );
        i_ferr [ 1 ] = Ferror32;
        i_err[2]= Fadd32( ptr_fml_Obuf,FFO_INDX_VAL , (char *)&l_nifty_spot, 0 );
        i_ferr [ 2 ] = Ferror32;
        i_err[3]= Fadd32( ptr_fml_Obuf,FFO_TM_STMP, (char *)c_run_timestamp.arr, 0 );
        i_ferr [ 3 ] = Ferror32;
		
	
        for(j=0;j<4;j++)
        {
        	if(i_err[j] == -1)
        	{
        		fn_errlog( c_ServiceName, "S31310",Fstrerror32(i_ferr[j]),c_err_msg);
        		fn_userlog(c_ServiceName,"Error in adding header row for OUT_OF_POC case ,field %d",j );
        		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        		tpfree((char *)ptr_fml_Obuf);
        		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}
        }
	
		
				EXEC SQL 
				DECLARE cur_matc_prof CURSOR FOR
				SELECT   FRC_FO_MTCH_ACC,
								 sum(FRC_FO_NETPNL_LEV1) PNL1,
								 sum(FRC_FO_NETPNL_LEV2) PNL2,
								 sum(FRC_FO_NETPNL_LEV3) PNL3,
								 sum(FRC_FO_NETPNL_LEV4) PNL4,
								 sum(FRC_FO_NETPNL_LEV5) PNL5,
								 sum(FRC_FO_NETPNL_LEV6) PNL6,
								 sum(FRC_FO_NETPNL_LEV7) PNL7,
								 sum(FRC_FO_NETPNL_LEV8) PNL8,
								 sum(FRC_FO_NETPNL_LEV9) PNL9,
								 sum(FRC_FO_NETPNL_LEV10) PNL10
       	FROM     FRC_FO_RSK_CUMLTV
				WHERE    FRC_FO_RUN_NO   = :l_run_num 
				AND      FRC_FO_TRD_DT   = :c_trd_dt 
				GROUP BY FRC_FO_MTCH_ACC;
			
				EXEC SQL OPEN cur_matc_prof ;
        if(SQLCODE != 0)
        {
         fn_errlog( c_ServiceName, "S31315", SQLMSG, c_err_msg );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         tpfree((char *)ptr_fml_Obuf);
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }


        i_dn_poc_lvl = 0;
        i_up_poc_lvl = 0;

        li_nifty_spot = d_nifty_spot;

        d_levels[0]   = l_init_spot;

        for(k = 1 ; k < 10 ; k++)
        {
          d_levels[k]= d_levels[k-1] + l_interval ;
        }

        for( k = 0 ; k < 10 ; k++)
        {
         if(d_levels[k]>=li_nifty_spot)
         {
           i_upcnt = k;
           break;
         }
        }

        i_dwncnt = i_upcnt - 1 ;

        if( i_upcnt == 0)
        {
         if( li_nifty_spot > d_levels[9] )
         {
           i_upcnt  = 10 ;
           i_dwncnt = 9;
         }
        }


        /*************** Allocating size of the Buffer************************/

		 		l_req_buff_sz = sizeof(c_intrvl_up)+
			                	sizeof(c_intrvl_dwn)+        
     									 	sizeof(c_count_up)+       
    								  	sizeof(c_count_dwn)+     
												sizeof(c_up_prc) +
												sizeof(c_dwn_prc);
                   
        /**************** Fetching Records in While Loop**********************/


				while(1)
				{
	
				 MEMSET(c_match_acc);
				 MEMSET(i_arr_intrvl_dwn);
				 MEMSET(i_arr_intrvl_up);
				 MEMSET(d_arr_dwn_prc);
				 MEMSET(d_arr_up_prc);
				 MEMSET(d_arr_grp_pnl);
	
         EXEC SQL
  		 	 FETCH cur_matc_prof 
	  	 	       INTO
	  	         :c_match_acc,
	    				 :d_arr_grp_pnl[0],
				 			 :d_arr_grp_pnl[1],
       	 			 :d_arr_grp_pnl[2],
				 			 :d_arr_grp_pnl[3],
       	 			 :d_arr_grp_pnl[4],
							 :d_arr_grp_pnl[5],
       				 :d_arr_grp_pnl[6],
					     :d_arr_grp_pnl[7],
        			 :d_arr_grp_pnl[8],
							 :d_arr_grp_pnl[9];

				i_row_id = sqlca.sqlerrd[2];    
				fn_userlog(c_ServiceName,"No. of rows fetched :<%d>", i_row_id);
	
        if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
        {
         fn_errlog( c_ServiceName, "S31320",SQLMSG,c_err_msg);
         EXEC SQL CLOSE cur_matc_prof ;
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         tpfree((char *)ptr_fml_Obuf);
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if ( SQLCODE == NO_DATA_FOUND && i_row_id == 0)
        {
         fn_userlog(c_ServiceName,"Inside NO Data found");
         break;
        }

	      if ( SQLCODE == NO_DATA_FOUND && i_row_id != 0) 
        {
         fn_userlog(c_ServiceName,"No more data to be fetched");
			   fn_userlog(c_ServiceName,"No. of rows fetched :<%d>", i_row_id);
         break;
        }

			  if(DEBUG_MSG_LVL_3)
        {
         fn_userlog(c_ServiceName,"Match Account  Is :%s:",c_match_acc.arr);
         fn_userlog(c_ServiceName,"Total Profit and Loss at level 1 Is :%lf:",d_arr_grp_pnl[0]);
         fn_userlog(c_ServiceName,"Total Profit and Loss at level 2 Is :%lf:",d_arr_grp_pnl[1]);
	 		   fn_userlog(c_ServiceName,"Total Profit and Loss at level 3 Is :%lf:",d_arr_grp_pnl[2]);
	       fn_userlog(c_ServiceName,"Total Profit and Loss at level 4 Is :%lf:",d_arr_grp_pnl[3]);
	       fn_userlog(c_ServiceName,"Total Profit and Loss at level 5 Is :%lf:",d_arr_grp_pnl[4]);
	       fn_userlog(c_ServiceName,"Total Profit and Loss at level 6 Is :%lf:",d_arr_grp_pnl[5]);
	       fn_userlog(c_ServiceName,"Total Profit and Loss at level 7 Is :%lf:",d_arr_grp_pnl[6]);
         fn_userlog(c_ServiceName,"Total Profit and Loss at level 8 Is :%lf:",d_arr_grp_pnl[7]);
         fn_userlog(c_ServiceName,"Total Profit and Loss at level 9 Is :%lf:",d_arr_grp_pnl[8]);
         fn_userlog(c_ServiceName,"Total Profit and Loss at level 10 Is :%lf:",d_arr_grp_pnl[9]);
        }

			  /** Calculating d_mrgn_blocked and d_opt_obgltn **/

				EXEC SQL
			  	SELECT sum(FRC_FO_MRGN_BLKD),
			           sum(FRC_FO_OPT_OBGLTN) 
				  INTO   :d_mrgn_blocked,
			           :d_opt_obgltn
			    FROM   FRC_FO_RSK_CUMLTV 
				  WHERE  FRC_FO_RUN_NO   = :l_run_num
				  AND    FRC_FO_TRD_DT   = :c_trd_dt
				  AND    FRC_FO_MTCH_ACC = :c_match_acc  ;

				/** Calculation of  d_mrgn_blocked and d_mrgn_blocked Ends **/		
 					                
				/**** Calculating Out of pocket *****/

        for (i=0; i<NUM_OF_LEVELS ; i++)  
        {
         d_out_of_pocket_by = 0.0;
         if( d_arr_grp_pnl[i] < 0)
         {   
           d_out_of_pocket_by = d_arr_grp_pnl[i]+d_mrgn_blocked+d_opt_obgltn;

           if (d_out_of_pocket_by > 0)
           {
            d_out_of_pocket_by = 0;
           }
         }

         d_arr_total_opoc[i]=d_out_of_pocket_by;

        /**** Out of Pocket At Calculation Ends ****/


         if(d_arr_total_opoc[i]<0)
         {
          if(l_out_of_poc_at == 0)
          {
           l_out_of_poc_at = l_init_spot + (i*l_interval);
          }
         } 	
				 fn_userlog(c_ServiceName,"d_arr_total_opoc[%d] is :%lf ",i,d_arr_total_opoc[i]);	
				}
				/**** out of pocket calculation ends *****/
					
        if(DEBUG_MSG_LVL_3)
        {
				 fn_userlog(c_ServiceName,"*************New Log *************");	
         fn_userlog(c_ServiceName,"Current Nifty Spot Level Is :%ld:",l_nifty_spot);
         fn_userlog(c_ServiceName,"DownWard Nifty Spot Level Is :%ld:",li_dwn_sptlvl);
         fn_userlog(c_ServiceName,"UpWard Nifty Spot Level Is :%ld:",li_uppr_sptlvl);
         fn_userlog(c_ServiceName,"Intial Spot Level at Is :%ld:",l_init_spot);
         fn_userlog(c_ServiceName,"i_dwncnt Is :%d:",i_dwncnt);
         fn_userlog(c_ServiceName,"i_upcnt Is :%d:",i_upcnt);
         fn_userlog(c_ServiceName,"i_dn_poc_lvl Is :%d:",i_dn_poc_lvl);
         fn_userlog(c_ServiceName,"i_up_poc_lvl Is :%d:",i_up_poc_lvl);
        }

			  /*** counting match acc. falling  in resp. out of poc lvls ***/

        for ( i_net_dwn = i_dwncnt  ; i_net_dwn >= 0 ; i_net_dwn --)
        { 
         if(d_arr_total_opoc[i_net_dwn]!= 0)   
         {
          l_count_dwn[i_net_dwn]=l_count_dwn[i_net_dwn] + 1; /** No.of clients array for down market **/
			  	break;
         }
        }

        for ( i_net_up = i_upcnt ; i_net_up <= 9 ; i_net_up ++  )
        {
         if(d_arr_total_opoc[i_net_up] != 0)  
         {
          l_count_up[i_net_up]=  l_count_up[i_net_up]+1; /** No.of clients array for up  market **/
				  break; 	  
         }
        }
					i++;   
				}  /**** End of While Loop ****/



				/**********  Calculating Percentage And Interval Level Starts   *********/	
	
				if (i_row_id!=0)   
				{  
	   	  	for(i_net_dwn=0;i_net_dwn<=i_dwncnt;i_net_dwn++)
	   		  {
							
	  		   d_arr_dwn_prc[i_net_dwn]= (l_count_dwn[i_net_dwn]*100)/i_row_id;  
		 																				      	/** Percentage Array for Dwn Market **/
				   i_arr_intrvl_dwn[i_net_dwn]=(l_init_spot + (i_net_dwn*l_interval));
																							      /** Interval Array for Dwn Market   **/
          }
	    
				  for( i_net_up= i_upcnt ; i_net_up<= 9; i_net_up++)
	   		  {

	   		  	d_arr_up_prc[i_net_up]= (l_count_up[i_net_up]*100)/i_row_id;   
																				         /** Percentage Array for Up Market **/	
				    i_arr_intrvl_up[i_net_up]=(l_init_spot + (i_net_up*l_interval)); 
																					       /** Interval Array for Up Market   **/ 
	  	    } 
				}

        /**********  Calculating Percentage And Interval Level Ends     *********/	
	

		  	/***	Praparing data to be sent to front end ***/
	
				MEMSET(c_intrvl_up);	
				MEMSET(c_intrvl_dwn);	
				MEMSET(c_count_up);	
				MEMSET(c_count_dwn);	
				MEMSET(c_up_prc);	
				MEMSET(c_dwn_prc);
				MEMSET(c_temp_var);

			  for(i_net_dwn=0;i_net_dwn<=i_dwncnt;i_net_dwn++)
	 	    {
         sprintf(c_temp_var,"%ld%c",i_arr_intrvl_dwn[i_net_dwn],c_delimiter);
         strcat(c_intrvl_dwn.arr,c_temp_var);
         MEMSET(c_temp_var);
		
         sprintf(c_temp_var,"%ld%c",l_count_dwn[i_net_dwn],c_delimiter);
         strcat(c_count_dwn.arr,c_temp_var);
         MEMSET(c_temp_var);
		
         sprintf(c_temp_var,"%0.2lf%c",d_arr_dwn_prc[i_net_dwn],c_delimiter);
         strcat(c_dwn_prc.arr,c_temp_var);
         MEMSET(c_temp_var);
	      }



        for( i_net_up= i_upcnt ; i_net_up<= 9 ; i_net_up++)
	      {
         sprintf(c_temp_var,"%ld%c",i_arr_intrvl_up[i_net_up],c_delimiter);
         strcat(c_intrvl_up.arr,c_temp_var);
         MEMSET(c_temp_var);
	  		    
         sprintf(c_temp_var,"%ld%c",l_count_up[i_net_up],c_delimiter);
         strcat(c_count_up.arr,c_temp_var);
         MEMSET(c_temp_var);
		
	    	 sprintf(c_temp_var,"%0.2lf%c",d_arr_up_prc[i_net_up],c_delimiter);
         strcat(c_up_prc.arr,c_temp_var);
         MEMSET(c_temp_var);
	      }

        NULLTERM(c_intrvl_up.arr);	
        NULLTERM(c_intrvl_dwn.arr);	
        NULLTERM(c_count_up.arr);	
        NULLTERM(c_count_dwn.arr);	
        NULLTERM(c_up_prc.arr);	
        NULLTERM(c_dwn_prc.arr);

        SETLEN(c_intrvl_up);	
        SETLEN(c_intrvl_dwn);	
        SETLEN(c_count_up);	
        SETLEN(c_count_dwn);	
        SETLEN(c_up_prc);	
        SETLEN(c_dwn_prc);

        if(DEBUG_MSG_LVL_0)
        {
         fn_userlog(c_ServiceName,"Market Up ::%s: in OUT_OF_POC case",c_intrvl_up.arr);
	       fn_userlog(c_ServiceName,"No.of clients for up market::%s: in OUT_OF_POC case",c_count_up.arr);
	       fn_userlog(c_ServiceName,"Percentage of clients for up market ::%s: in OUT_OF_POC case",c_up_prc.arr);
	       fn_userlog(c_ServiceName,"Market Down ::%s: in OUT_OF_POC case",c_intrvl_dwn.arr);
	       fn_userlog(c_ServiceName,"No.of clients for downn market ::%s: in OUT_OF_POC case",c_count_dwn.arr);
	       fn_userlog(c_ServiceName,"Percentage of clients for down market::%s: in OUT_OF_POC case",
																																														 c_dwn_prc.arr);
        }

			  if( Fneeded32( 1, l_req_buff_sz ) > Funused32( ptr_fml_Obuf ) )
        {
         fn_userlog(c_ServiceName,"SPACE NEEDED :%ld: SPACE AVAILABLE IN BUFFER :%ld:", 
																 Fneeded32( 1, l_req_buff_sz ), Funused32( ptr_fml_Obuf ));

         ptr_fml_Obuf =( FBFR32 *)tprealloc((char *)ptr_fml_Obuf,(Fsizeof32(ptr_fml_Obuf)+(i*l_req_buff_sz )));

         if (ptr_fml_Obuf == NULL)
         {
          fn_errlog(c_ServiceName, "S31325", TPMSG, c_err_msg);
          EXEC SQL CLOSE cur_matc_prof;
          Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
         }
         fn_userlog(c_ServiceName,"SPACE AVAILABLE AFTER REALLOCATION :%ld:", Fsizeof32(ptr_fml_Obuf));
        }	
		
	      i_err[0]= Fadd32( ptr_fml_Obuf, FFO_STRIKE1, (char *)c_intrvl_up.arr, 0 );
        i_ferr [ 0 ] = Ferror32;
        i_err[1]= Fadd32( ptr_fml_Obuf, FFO_HIGH_PT, (char *)c_count_up.arr, 0 );
        i_ferr [ 1 ] = Ferror32;
	      i_err[2]= Fadd32( ptr_fml_Obuf, FFO_UP_SIDE_PRCNTG, (char *)c_up_prc.arr, 0 );
        i_ferr [ 2 ] = Ferror32;
        i_err[3]= Fadd32( ptr_fml_Obuf, FFO_STRIKE2, (char *)c_intrvl_dwn.arr, 0 );
        i_ferr [ 3 ] = Ferror32;
	      i_err[4]= Fadd32( ptr_fml_Obuf, FFO_LOW_PT, (char *)c_count_dwn.arr, 0 );
        i_ferr [ 4 ] = Ferror32;
        i_err[5]= Fadd32( ptr_fml_Obuf, FFO_DWN_SIDE_PRCNTG, (char *)c_dwn_prc.arr, 0 );
        i_ferr [ 5 ] = Ferror32;


        for(j=0;j<6;j++)
        {
         if(i_err[j] == -1)
         {
          fn_errlog( c_ServiceName, "S31330",Fstrerror32(i_ferr[j]),c_err_msg);
          fn_userlog(c_ServiceName,"Error in Fadd32 for OUT_OF_POC  case ,field %d",j );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpfree((char *)ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }
        }
		
	    	 EXEC SQL CLOSE cur_matc_prof;
         fn_userlog(c_ServiceName,"************Service completed succesfully in OUT_OF_POC case**********");
         tpreturn(TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );

		
       case VIEW_CLIENTS_FOR_OFP:   /** ver 1.1 **/
		
		   if(DEBUG_MSG_LVL_0)
       {
        fn_userlog(c_ServiceName,"Run no.:%ld: in VIEW_CLIENTS_FOR_OFP case",l_run_num);
        fn_userlog(c_ServiceName,"Run date :%s: in VIEW_CLIENTS_FOR_OFP case",c_trd_dt.arr);
        fn_userlog(c_ServiceName," Nifty Spot level at run:%ld: in VIEW_CLIENTS_FOR_OFP case",l_nifty_spot);
        fn_userlog(c_ServiceName,"Timestamp at run :%s: in VIEW_CLIENTS_FOR_OFP case",c_run_timestamp.arr);
        fn_userlog(c_ServiceName,"Sort criteria is :%c:",c_req_typ );
        fn_userlog(c_ServiceName,"No. of clients :%ld:",l_no_of_clients);
       }
		
       EXEC SQL ALLOCATE :crt_cur;

       if(c_req_typ =='U')
       {

        fn_userlog(c_ServiceName, "Inside c_req_typ U");

        EXEC SQL EXECUTE
        BEGIN
        OPEN  :crt_cur FOR
         SELECT FNO_FO_MTCH_ACCNT,
                FNO_FO_NETPNL_LEV1,
      				  FNO_FO_NETPNL_LEV2,
       				  FNO_FO_NETPNL_LEV3,
       				  FNO_FO_NETPNL_LEV4,
     				    FNO_FO_NETPNL_LEV5,
       				  FNO_FO_NETPNL_LEV6,
       				  FNO_FO_NETPNL_LEV7,
       					FNO_FO_NETPNL_LEV8,
       					FNO_FO_NETPNL_LEV9,
       					FNO_FO_NETPNL_LEV10,
       					FNO_FO_OUT_PCKT1,
       					FNO_FO_OUT_PCKT2,
       					FNO_FO_OUT_PCKT3,
       					FNO_FO_OUT_PCKT4,
       					FNO_FO_OUT_PCKT5,
       					FNO_FO_OUT_PCKT6,
       					FNO_FO_OUT_PCKT7,
       					FNO_FO_OUT_PCKT8,
       					FNO_FO_OUT_PCKT9,
       					FNO_FO_OUT_PCKT10,
       					FNO_FO_CMLTV_UP,
       					FNO_FO_CMLTV_DWN,
			 					DECODE(FNO_FO_CMLTV_UP,0,2,1) PRIORITY  /*** Only Used For Sorting ***/
        FROM 
				 ( SELECT FNO_FO_MTCH_ACCNT,
                FNO_FO_NETPNL_LEV1,
                FNO_FO_NETPNL_LEV2,
                FNO_FO_NETPNL_LEV3,
                FNO_FO_NETPNL_LEV4,
                FNO_FO_NETPNL_LEV5,
                FNO_FO_NETPNL_LEV6,
                FNO_FO_NETPNL_LEV7,
                FNO_FO_NETPNL_LEV8,
                FNO_FO_NETPNL_LEV9,
                FNO_FO_NETPNL_LEV10,
                FNO_FO_OUT_PCKT1,
                FNO_FO_OUT_PCKT2,
                FNO_FO_OUT_PCKT3,
                FNO_FO_OUT_PCKT4,
                FNO_FO_OUT_PCKT5,
                FNO_FO_OUT_PCKT6,
                FNO_FO_OUT_PCKT7,
                FNO_FO_OUT_PCKT8,
                FNO_FO_OUT_PCKT9,
                FNO_FO_OUT_PCKT10,
                FNO_FO_CMLTV_UP,
                FNO_FO_CMLTV_DWN,
                DECODE(FNO_FO_CMLTV_UP,0,2,1) PRIORITY  /*** Only Used For Sorting ***/ 
			     FROM   FNO_FO_CMLTV_PNL
           WHERE  FNO_FO_RUN_NO     = :l_run_num
           AND    FNO_FO_TRD_DT     = :c_trd_dt
           ORDER BY PRIORITY,FNO_FO_CMLTV_UP
				 )
				WHERE ROWNUM < :l_no_of_clients;
		    END;
        END-EXEC;	
 
       }
	     else
       {

       fn_userlog(c_ServiceName, "Inside c_req_typ D ");

       EXEC SQL EXECUTE
       BEGIN
       OPEN  :crt_cur FOR
        SELECT FNO_FO_MTCH_ACCNT,
			         FNO_FO_NETPNL_LEV1,
       				 FNO_FO_NETPNL_LEV2,
       				 FNO_FO_NETPNL_LEV3,
       				 FNO_FO_NETPNL_LEV4,
       				 FNO_FO_NETPNL_LEV5,
      				 FNO_FO_NETPNL_LEV6,
      				 FNO_FO_NETPNL_LEV7,
      				 FNO_FO_NETPNL_LEV8,
      				 FNO_FO_NETPNL_LEV9,
      				 FNO_FO_NETPNL_LEV10,
      				 FNO_FO_OUT_PCKT1,
     				   FNO_FO_OUT_PCKT2,
       				 FNO_FO_OUT_PCKT3,
      				 FNO_FO_OUT_PCKT4,
      				 FNO_FO_OUT_PCKT5,
      				 FNO_FO_OUT_PCKT6,
      				 FNO_FO_OUT_PCKT7,
      				 FNO_FO_OUT_PCKT8,
      				 FNO_FO_OUT_PCKT9,
      				 FNO_FO_OUT_PCKT10,
      				 FNO_FO_CMLTV_UP,
      				 FNO_FO_CMLTV_DWN
				FROM  
				 ( SELECT FNO_FO_MTCH_ACCNT,
               FNO_FO_NETPNL_LEV1,
               FNO_FO_NETPNL_LEV2,
               FNO_FO_NETPNL_LEV3,
               FNO_FO_NETPNL_LEV4,
               FNO_FO_NETPNL_LEV5,
               FNO_FO_NETPNL_LEV6,
               FNO_FO_NETPNL_LEV7,
               FNO_FO_NETPNL_LEV8,
               FNO_FO_NETPNL_LEV9,
               FNO_FO_NETPNL_LEV10,
               FNO_FO_OUT_PCKT1,
               FNO_FO_OUT_PCKT2,
               FNO_FO_OUT_PCKT3,
               FNO_FO_OUT_PCKT4,
               FNO_FO_OUT_PCKT5,
               FNO_FO_OUT_PCKT6,
               FNO_FO_OUT_PCKT7,
               FNO_FO_OUT_PCKT8,
               FNO_FO_OUT_PCKT9,
               FNO_FO_OUT_PCKT10,
               FNO_FO_CMLTV_UP,
               FNO_FO_CMLTV_DWN   
           FROM FNO_FO_CMLTV_PNL
           WHERE FNO_FO_RUN_NO   = :l_run_num
           AND FNO_FO_TRD_DT     = :c_trd_dt
           ORDER BY FNO_FO_CMLTV_DWN DESC
				 )
				 WHERE ROWNUM < :l_no_of_clients;
		   END;
       END-EXEC;
       }	

	
       l_req_buff_sz     = sizeof(c_match_acc)+
                           sizeof(c_pnl)+
                           sizeof(d_grs_alloc)+
                      	   sizeof(d_free_limit)+
                        	 sizeof(d_mrgn_blocked)+
                        	 sizeof(d_cash)+
                        	 sizeof(d_non_cash)+
                        	 sizeof(d_opt_obgltn)+
                        	 sizeof(c_out_of_poc)+
                        	 sizeof(i_up_poc_lvl)+  
                        	 sizeof(i_dn_poc_lvl); 

       while(1)
       {
        i++;
        MEMSET(c_match_acc);
        MEMSET(c_pnl);
        MEMSET(c_out_of_poc);
        MEMSET(c_copy_out_of_poc);
        MEMSET(i_up_poc_lvl);
        MEMSET(i_dn_poc_lvl);

        d_grs_alloc = 0.0;
        d_free_limit = 0.0;
        d_mrgn_blocked = 0.0;
        d_cash = 0.0;
        d_non_cash = 0.0;
        d_opt_obgltn = 0.0;
        l_out_of_poc_at = 0.0;	
		
		    EXEC SQL FETCH :crt_cur
        INTO     :c_match_acc,
                 :d_arr_total_pnl[0],
                 :d_arr_total_pnl[1],
                 :d_arr_total_pnl[2],
					  	   :d_arr_total_pnl[3],
                 :d_arr_total_pnl[4],
								 :d_arr_total_pnl[5],
                 :d_arr_total_pnl[6],
								 :d_arr_total_pnl[7],
                 :d_arr_total_pnl[8],
								 :d_arr_total_pnl[9],
                 :d_arr_total_ofp[0],
								 :d_arr_total_ofp[1],
                 :d_arr_total_ofp[2],
								 :d_arr_total_ofp[3],
                 :d_arr_total_ofp[4],
								 :d_arr_total_ofp[5],
                 :d_arr_total_ofp[6],
								 :d_arr_total_ofp[7],
  						   :d_arr_total_ofp[8],
								 :d_arr_total_ofp[9],
  					     :i_up_poc_lvl,
								 i_dn_poc_lvl; 

  	    if ( SQLCODE != 0 )
        {
         if( SQLCODE == NO_DATA_FOUND )
         {
          fn_userlog(c_ServiceName,"Finished :%d: records in  VIEW_CLIENTS_FOR_OFP case ",sqlca.sqlerrd[2] );
          break;
         }
         else
         {
          fn_errlog( c_ServiceName, "S31335", SQLMSG, c_err_msg );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpfree((char *)ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }
        }

	      for (i=0; i<NUM_OF_LEVELS ; i++)
        {
         sprintf(c_temp_var,"%0.2lf%c",d_arr_total_pnl[i],c_delimiter);
         strcat(c_pnl.arr,c_temp_var);
         MEMSET(c_temp_var);

         sprintf(c_temp_var,"%0.2lf%c",d_arr_total_ofp[i],c_delimiter);
         strcat(c_out_of_poc.arr,c_temp_var);
         MEMSET(c_temp_var);
        }

		    NULLTERM(c_pnl.arr);
        NULLTERM(c_out_of_poc.arr);

        SETLEN(c_pnl);
        SETLEN(c_out_of_poc);	
        SETLEN(c_match_acc);
 
	      EXEC SQL
         SELECT   min(FRC_FO_GROSS_ALLOC) GROSS_ALLOCTN,
                  min(FRC_FO_FREE_LIMIT) FREE_LIMIT,
                  sum(FRC_FO_MRGN_BLKD) MRGN_BLKD,
                  min(FRC_FO_CASH) CASH,
                  min(FRC_FO_NONCASH) NON_CASH,
                  sum(FRC_FO_OPT_OBGLTN) OPT_OBGLTN
         INTO    :d_grs_alloc,
                 :d_free_limit,
                 :d_mrgn_blocked,
                 :d_cash,
                 :d_non_cash,
                 :d_opt_obgltn
         FROM    FRC_FO_RSK_CUMLTV 
	  	   WHERE   FRC_FO_RUN_NO       =  :l_run_num
         AND     FRC_FO_TRD_DT       =  :c_trd_dt
         AND     FRC_FO_MTCH_ACC     =  :c_match_acc ;

        if ( SQLCODE != 0 )
        {
         fn_errlog( c_ServiceName, "S31340",SQLMSG,c_err_msg);
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         tpfree((char *)ptr_fml_Obuf);
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if(DEBUG_MSG_LVL_3)
        {
         fn_userlog(c_ServiceName,"Row :%d: Match account :%s: in VIEW_CLIENTS_FOR_OFP case",
																  	i,c_match_acc.arr);
         fn_userlog(c_ServiceName,"Row :%d: Profit and loss :%s: in VIEW_CLIENTS_FOR_OFP case",i,c_pnl.arr);
         fn_userlog(c_ServiceName,"Row :%d: Out of pocket levels :%s: in VIEW_CLIENTS_FOR_OFP case",
																   i,c_out_of_poc.arr);
         fn_userlog(c_ServiceName,"Row :%d: Out of pocket level for Up Mrkt :%d: in VIEW_CLIENTS_FOR_OFP case",                                   i,i_up_poc_lvl);  
		     fn_userlog(c_ServiceName,"Row :%d: Out of pocket level for Dwn Mrkt :%d: in VIEW_CLIENTS_FOR_OFP case"                                   ,i,i_dn_poc_lvl);   
			   fn_userlog(c_ServiceName,"Row :%d: Gross allocation :%lf: in VIEW_CLIENTS_FOR_OFP case",
																	 i,d_grs_alloc);
         fn_userlog(c_ServiceName,"Row :%d: Free Limit :%lf: in VIEW_CLIENTS_FOR_OFP case",i,d_free_limit);
         fn_userlog(c_ServiceName,"Row :%d: Margin blocked :%lf: in VIEW_CLIENTS_FOR_OFP case",
																  	i,d_mrgn_blocked);
         fn_userlog(c_ServiceName,"Row :%d: Cash :%lf: in VIEW_CLIENTS_FOR_OFP case",i,d_cash);
         fn_userlog(c_ServiceName,"Row :%d: Non cash :%lf: in VIEW_CLIENTS_FOR_OFP case",i,d_non_cash);
         fn_userlog(c_ServiceName,"Row :%d: Option obligation :%lf: in VIEW_CLIENTS_FOR_OFP case",
																		i,d_opt_obgltn);
        }
	
		    if(strcmp(c_output,"FMLS") == 0)
        {
         if( Fneeded32( 1, l_req_buff_sz ) > Funused32( ptr_fml_Obuf ) )
         {
          fn_userlog(c_ServiceName,"SPACE NEEDED :%ld: SPACE AVAILABLE IN BUFFER :%ld:", 
																	  Fneeded32( 1, l_req_buff_sz ), Funused32      ( ptr_fml_Obuf ));

          ptr_fml_Obuf = ( FBFR32 *)tprealloc((char *)ptr_fml_Obuf,(Fsizeof32(ptr_fml_Obuf) + 
					                 (i*l_req_buff_sz )));

          if (ptr_fml_Obuf == NULL)
          {
           fn_errlog(c_ServiceName, "S31345", TPMSG, c_err_msg);
           EXEC SQL CLOSE :crt_cur;
           EXEC SQL FREE :crt_cur;
           Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
          }
          fn_userlog(c_ServiceName,"SPACE AVAILABLE AFTER REALLOCATION :%ld:", Fsizeof32(ptr_fml_Obuf));
         }

			
         i_err[0]= Fadd32( ptr_fml_Obuf, FFO_MTCH_CNTCT_KEY, (char *)c_match_acc.arr, 0 );
         i_ferr [ 0 ] = Ferror32;
         i_err[1]= Fadd32( ptr_fml_Obuf, FFO_MAX_PROFIT, (char *)c_pnl.arr, 0 );
         i_ferr [ 1 ] = Ferror32;
         i_err[2]= Fadd32( ptr_fml_Obuf, FFO_BRK_EVN_PT, (char *)c_out_of_poc.arr, 0 );
         i_ferr [ 2 ] = Ferror32;
         i_err[3]= Fadd32( ptr_fml_Obuf,FFO_HGH_INDX_VAL, (char *)&i_up_poc_lvl, 0 );
         i_ferr [ 3 ] = Ferror32;
         i_err[4]= Fadd32( ptr_fml_Obuf,FFO_LOW_INDX_VAL, (char *)&i_dn_poc_lvl, 0 );
         i_ferr [ 4 ] = Ferror32;
         i_err[5]= Fadd32( ptr_fml_Obuf, FFO_AMOUNT, (char *)&d_grs_alloc, 0 );
         i_ferr [ 5 ] = Ferror32;
         i_err[6]= Fadd32( ptr_fml_Obuf, FFO_LIMIT, (char *)&d_free_limit, 0 );
         i_ferr [ 6] = Ferror32;
         i_err[7]= Fadd32( ptr_fml_Obuf, FFO_ADD_MRGN_AMT, (char *)&d_mrgn_blocked, 0 );
         i_ferr [ 7 ] = Ferror32;
         i_err[8]= Fadd32( ptr_fml_Obuf, FFO_PSTN_AMT_BLKD, (char *)&d_cash, 0 );
         i_ferr [ 8 ] = Ferror32;
         i_err[9]= Fadd32( ptr_fml_Obuf, FFO_ADDL_AMT_BLKD, (char *)&d_non_cash, 0 );
         i_ferr [ 9 ] = Ferror32;
         i_err[10]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_VAL, (char *)&d_opt_obgltn, 0 );
         i_ferr [10 ] = Ferror32;
         i_err[11]= Fadd32( ptr_fml_Obuf, FFO_RUN_NUM, (char *)&l_run_num, 0 );
         i_ferr [11 ] = Ferror32;
         i_err[12]= Fadd32( ptr_fml_Obuf,FFO_TRD_DT, (char *)c_trd_dt.arr, 0 );
         i_ferr [ 12 ] = Ferror32;
         i_err[13]= Fadd32( ptr_fml_Obuf,FFO_INDX_VAL , (char *)&l_nifty_spot, 0 );    
         i_ferr [13] = Ferror32;
         i_err[14]= Fadd32( ptr_fml_Obuf,FFO_TM_STMP, (char *)c_run_timestamp.arr, 0 );   
         i_ferr [14 ] = Ferror32;

         for(j=0;j<15;j++)
         {
		      if(i_err[j] == -1)
          {
           fn_errlog( c_ServiceName, "S31350",Fstrerror32(i_ferr[j]),c_err_msg);
           EXEC SQL CLOSE :crt_cur;
           EXEC SQL FREE :crt_cur;
           fn_userlog(c_ServiceName,"Error in Fadd32 for VIEW_CLIENTS_FOR_OFP case ,field %d",j );
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           tpfree((char *)ptr_fml_Obuf);
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          } 
		     }
         }/******** End of loop for adding output to FMLS ***********/
		     else
         {
          MEMSET(c_filedata);
          sprintf(c_filedata,"%s,%ld,%ld,%s,%lf,%ld,%s,%d,%d,%lf,%lf,%lf,%lf,%lf",
                  c_match_acc.arr,l_run_num,l_nifty_spot,c_run_timestamp.arr,/** ver 1.1-run no,nifty spot,
								                                                                         timestamp added **/
                  c_pnl.arr,(d_opt_obgltn/100),l_out_of_poc_at,
                  c_out_of_poc.arr,i_dn_poc_lvl,i_up_poc_lvl,(d_cash/100),(d_non_cash/100),
                  (d_grs_alloc/100),(d_free_limit/100),
                  (d_mrgn_blocked/100));  /** ver 1.1 -up_poc_lvl & dwn_poc_lvl added **/
          fprintf(fp,"%s\n",c_filedata);

         }/******** End of loop for adding output to FILE ***********/

       }//END OF WHILE LOOP
		
		
       fclose(fp);
 
       EXEC SQL CLOSE :crt_cur;
       EXEC SQL FREE :crt_cur;
       fn_userlog(c_ServiceName,"*****Service completed succesfully in VIEW_CLIENTS_FOR_OFP case**********");
		

       if(strcmp(c_output,"FMLS") == 0)
       {
        tpreturn(TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
       }
       else
       {
        sprintf(c_err_msg,"PNL of all clients has been downloaded to csv file");
        fn_userlog(c_ServiceName,"##### %s #####",c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
        tpfree((char *)ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }
	
		
		   default:	
			 fn_userlog(c_ServiceName,"i_request :%d:" ,i_request );
    	 fn_errlog( c_ServiceName, "S31355","Invalid request",c_err_msg);
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       tpfree((char *)ptr_fml_Obuf);
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
}

   void print_qry1(char * str, int i_cnt,char * c_ServiceName)
   {
     int idx;
     char c_tmp_str1[100];

     MEMSET(c_tmp_str1);
     if( DEBUG_MSG_LVL_3 )
     {
      fn_userlog(c_ServiceName,"Printing query");
     }

     for (idx = 0;idx < i_cnt; idx += 60)
     {
      strncpy(c_tmp_str1,str + idx,60);
      fn_userlog(c_ServiceName,"%s",c_tmp_str1);
     }

     if( DEBUG_MSG_LVL_3 )
     {
      fn_userlog(c_ServiceName,"Finished printing query");
     }
   }

   void uppercase( char* c_input_str)
   {
    int i, length;
    length = strlen(c_input_str);
    for(i=0;i<=length;i++)
    {
     if(c_input_str[i] > 96 )
     {
      c_input_str[i] =c_input_str[i]-32;
     }
    }
    c_input_str[length] = '\0';
    return;
   }

