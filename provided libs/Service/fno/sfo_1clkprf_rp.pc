

/***********************************************************************************/
/* Program           : SFO_1CLKPRF_RP                                             */
/*                                                                                 */
/* Input             : FFO_USR_ID                                                  */
/*                     FFO_SSSN_ID                                                 */
/*                     FFO_EBA_MTCH_ACT_NO                                         */
/*                     FFO_RQST_TYP                                                */
/*                     FFO_FROM_DT                                                 */
/*                     FFO_TO_DT                                                   */
/*                                                                                 */
/*                                                                                 */
/*                                                                                 */
/*                                                                                 */
/*                                                                                 */
/*                                                                                 */
/*                                                                                 */
/*                                                                                 */
/*                                                                                 */
/* Output            :   FFO_TRD_DT                                                */
/*                       FFO_MOD_TRD_DT                                             */
/*                       FFO_QUEUE_NAME                                            */
/*                       FFO_QSPACE_NAME                                           */
/*                       FFO_UNDRLYNG                                              */
/*                       FFO_PRDCT_TYP                                             */
/*                       FFO_EXPRY_DT                                              */
/*                       FFO_OPT_TYP                                               */
/*                       FFO_STRK_PRC                                              */
/*                       FFO_ORDR_FLW                                              */
/*                       FFO_ADD_MRGN_AMT                                          */
/*                       FFO_LMT_RT                                                */
/*                       FFO_EXCTD_RT                                              */
/*                       FFO_CURR_RT                                               */
/*                       FFO_ORD_TOT_QTY                                           */
/*                       FFO_PI_PO_AMT                                             */
/*                       FFO_ACTN_ID                                               */
/*                       FFO_COUNTER                                               */
/*                       FFO_INTRST_RT                                              */
/*                       FFO_PI_PO_AMT                                             */
/*                                                                                 */
/*                                                                                 */
/* Description       :                                                             */
/*                                                                                 */
/*                                                                                 */
/* Log               : 1.0   PRANAV ANAND | ISEC | 07-Oct-2022                     */
/***********************************************************************************/
/* 1.0     -      Initial release                                                  */
/***********************************************************************************/



#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fo_view_def.h>
#include <sqlca.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_session.h>
#include <fn_pos.h>
#include <fn_ddr.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>

void SFO_1CLKPRF_RP(TPSVCINFO * rqst)
{
  char  c_match_accnt[11];
  char  c_prdct_typ = '\0';
  char  c_undrlyng[7];
  char  c_expry_dt[22];
  char  c_opt_typ = '\0';
  char  c_call_action[22];
  char  c_rqst_type ='\0'; /* request type to decide operation */
  char  c_from_dt[22] ;                /*from date*/
  char  c_to_dt[22]   ;                /* to date*/
  char c_entry_date[22];
  char c_exit_date[22];
  char c_prfl_name[51];
  char c_buysel='\0';
  char  c_indstk = '\0';/*preference */

  double  d_sltp_prc = 0;
  double d_mtd_pfm_score=0;  /*performance score of the calls*/
  double d_ytd_pfm_score=0;
  double d_expctd_prftloss=0;
  double d_mtd_expctd_prftloss=0;     /* total profit of the calls */
  double d_ytd_expctd_prftloss=0;

  long  l_strk_prc=0;
  long  l_ordr_qty=0;
  long l_mtd_tot_calls=0;  /***total number of calls***/
  long l_ytd_tot_calls=0;
  long l_mtd_profit_calls=0; /**profit call **/
  long l_ytd_profit_calls=0;
  long l_trg=0;
  long l_entry_price=0;
  long l_exit_price=0;
  long l_prfl_id=0;

  /* variables used for main function */
  char  c_err_msg[256];
  int  i_err[36];
  int  i_ferr[36];
  int  i_cnt;
  int  counter = 0;
  int  i_ch_val = 0;
  int  i_returncode = 0;
  char  c_ServiceName[33];

 /* tuxedo variables */
    FBFR32 *ptr_fml_Ibuf; /* pointer to FML input */
    FBFR32 *ptr_fml_Obuf; /* pointer to FML output */

      ptr_fml_Ibuf = (FBFR32 *)rqst->data;
    strcpy(c_ServiceName, rqst->name);

    INITDBGLVL(c_ServiceName);

    struct vw_usr_prfl st_usr_prfl;
    struct vw_err_msg st_err_msg;
    MEMSET(c_err_msg);

    if( DEBUG_MSG_LVL_0 )
        fn_userlog(c_ServiceName, "----------------- service %s starts here --------------------",c_ServiceName);

    /* user authentication */
    i_returncode = fn_unpack_fmltovar_dflt (c_ServiceName ,
                                        c_err_msg,
                                        ptr_fml_Ibuf,
                                        3,
                                        FFO_EBA_MTCH_ACT_NO, (char*)st_usr_prfl.c_cln_mtch_accnt, "*",
                                        FFO_USR_ID, (char*)st_usr_prfl.c_user_id, "NULL",
                                        FFO_SSSN_ID, (char*)&st_usr_prfl.l_session_id, "0"
                                        );
    if ( i_returncode != 0  )
    {
        fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if ( strcmp(st_usr_prfl.c_user_id,"system") != 0 && st_usr_prfl.l_session_id != 0)
    {
        i_returncode = fn_chk_sssn(c_ServiceName , &st_usr_prfl, &st_err_msg );

           if ( i_returncode == -1 )
        {
            fn_errlog(c_ServiceName,"S31010", LIBMSG, st_err_msg.c_err_msg );
            fn_userlog(c_ServiceName," Failed to Authenticate the user and user session");
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
    }

    if( DEBUG_MSG_LVL_1 )
    {
        fn_userlog(c_ServiceName, "Client Match ID is :%s:",st_usr_prfl.c_cln_mtch_accnt);
        fn_userlog(c_ServiceName, "User ID is :%s:",st_usr_prfl.c_user_id);
        fn_userlog(c_ServiceName, "Session ID is :%ld:",st_usr_prfl.l_session_id);
    }
    /** user authentication ends here **/

 if (Fget32(ptr_fml_Ibuf, FFO_RQST_TYP, 0, (char * )&c_rqst_type, 0) == -1)
  {
    fn_userlog(c_ServiceName, "error occured while fetching c_reqst_type ---- request type not available");
    fn_errlog(c_ServiceName, "S31015", LIBMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);

  }
  /** if( DEBUG_MSG_LVL_0)**/
    fn_userlog(c_ServiceName, "Retreived reqst_type sucessfully is :%c:",c_rqst_type);

  /* Allocating memory to output-buffer */
  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN  );

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  strcpy(c_match_accnt,st_usr_prfl.c_cln_mtch_accnt);
  rtrim(c_match_accnt);

  if( c_rqst_type == 'S' )  /** rqst_type = 'S', summary for different request i.e. today,MTD  and YTD **/
  {
   /* if( DEBUG_MSG_LVL_0)*/
      fn_userlog(c_ServiceName, "Performing Operation on summary here ");
     
    if (Fget32(ptr_fml_Ibuf, FFO_CTGRY_INDSTK, 0, (char * )&c_indstk, 0) == -1)
    {
    fn_userlog(c_ServiceName, "error occured while fetching c_indstk ----  preference not available");
    fn_errlog(c_ServiceName, "S31025", LIBMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);

    }


       /*total number of calls for mtd*/
     EXEC SQL
        select
        count(distinct(FSB_PRTFL_ID))
        INTO :l_mtd_tot_calls
        from FSB_FO1CLICK_BUCKTDTLS_LOG,
             FSL_FO1CLICK_LEGDTLS_LOG
        where TO_CHAR(FSB_STRTGY_LAUNCH_DT,'Mon-YYYY')=TO_CHAR(sysdate,'Mon-YYYY')
        AND   FSL_INDSTK  LIKE :c_indstk
        AND   FSB_PRTFL_ID=FSL_PRTFLO_ID
        AND   FSB_CUST_RCMEND_FLG='R'
        AND   FSB_CALL_ACTION != 'Call Initiated'
        AND   FSL_CNTRCT_LTP is not null
        AND  RTRIM(FSB_CALL_ACTION) is not null;



     if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char*)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if( DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"----------------------------------------------");
      fn_userlog(c_ServiceName,"Match account :%s:",c_match_accnt);
    }
    /** Moving values to buffer **/
     if(Fadd32(ptr_fml_Obuf, FFO_COUNTER, (char *)&l_mtd_tot_calls, 0)==-1)
     {
        fn_userlog(c_ServiceName,"Error in Fadd ",0);
        fn_errlog( c_ServiceName, "S31035", FMLMSG, c_err_msg  );
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
     /*performance score of MTD*/
     EXEC SQL

     select  count(distinct(id))
     INTO :l_mtd_profit_calls
     FROM
     (
       SELECT
             PRTFL_ID id,
             sum(((DECODE(BUYSELL,'S',(avg_PRICE_TO- CNTRCT_LTP) * QTY ,'B', (CNTRCT_LTP-avg_PRICE_TO) * QTY ))/100)) AS PNL
             from
             (
           SELECT
             Entry_DATE,
             USER_ID,
             PRTFL_NAME,
             PRTFL_ID,
             UNDRLYING,
             PRDCT_TYP,
             EXPRY_DT,
             OPT_TYP,
             STRIKE_PRC,
             BUYSELL,
             QTY,
             avg(A.FSL_CNTRCT_LTP) CNTRCT_LTP,
             avg(PRICE_TO) avg_PRICE_TO
          FROM
          FSL_FO1cLICK_LEGDTLS_LOG A, FSB_FO1CLICK_BUCKTDTLS_LOG C,
          (
          select DISTINCT trunc(FSB_CALL_DATE) Entry_DATE,
          FSB_LST_MODIFIED_BY USER_ID,
          rtrim(FIS_STRTGY_NAME) STRATEGY_BUCKET,
          FSB_PRTFL_NAME PRTFL_NAME,
          FSB_PRTFL_ID PRTFL_ID,
          FSB_CALL_ACTION  CALL_ACTION,
          FSL_UNDRLYNG UNDRLYING,
          FSL_PRDCT_TYP PRDCT_TYP,
          FSL_EXPRY_DT EXPRY_DT,
          FSL_OPT_TYP OPT_TYP,
          FSL_STRK_PRC/100 STRIKE_PRC,
          FSL_ACTION BUYSELL,
          FSL_ORDR_QTY QTY,
          ((FSL_RCMEND_PRC_FRM + FSL_RCMEND_PRC_TO)/2) PRICE_TO,
          FSB_TRGT_PRC/100 Target,
          FSB_SLTP_PRC/100 SLTP_PRC,
          FSB_BOOK_PART_PROFT_PERC/100 BOOK_PRTFL,
          FSB_BOOK_PROFIT/100 BOOK_PROFIT,
          FSB_EXIT_PRICE/100 EXIT_PRC,
          rtrim(FTD_TIMEFRAME_RNF) TIME_FRAME,
          FSL_CNTRCT_LTP,
          FSL_LEG_NO,
          FSB_CALL_DATE
      from FSB_FO1CLICK_BUCKTDTLS_LOG,
           FSL_FO1CLICK_LEGDTLS_LOG,
           FIS_FO1CLICK_STRTGYBUSKTS,
           FTD_FO1CLICK_TIMEFRAME_DTLS
       WHERE FSB_PRTFL_ID=FSL_PRTFLO_ID
         AND FSB_STRGY_ID = FIS_STRTGY_ID
         AND FSB_CALL_DATE  IS not null
         AND FTD_TIMEFRAME_ID = FSB_TIME_FRAME
         AND to_char(FSB_STRTGY_LAUNCH_DT,'Mon-yyyy')=to_Char(sysdate,'Mon-YYYY')
         AND FSB_CUST_RCMEND_FLG='R'
         AND FSB_CALL_ACTION = 'Call Initiated'
         AND   FSL_INDSTK  LIKE :c_indstk
         AND  RTRIM(FSB_CALL_ACTION) is not null
         AND  FSL_CNTRCT_LTP is not null
     order by to_number(FSB_PRTFL_ID) ASC, FSB_CALL_DATE ASC
    ) B
      WHERE  A.FSL_PRTFLO_ID = B.PRTFL_ID
       AND   C.FSB_PRTFL_ID = B.PRTFL_ID
       AND   C.FSB_CALL_ACTION != 'Call Initiated'
       AND   A.FSL_LEG_NO = B.FSL_LEG_NO
       AND   A.FSL_CNTRCT_LTP is not null
       AND  RTRIM(C.FSB_CALL_ACTION) is not null
    Group by
       Entry_DATE,
       USER_ID,
       PRTFL_NAME,
       PRTFL_ID,
       UNDRLYING,
       PRDCT_TYP,
       EXPRY_DT,
       OPT_TYP,
       STRIKE_PRC,
       BUYSELL,
       QTY
     ) D,FSB_FO1CLICK_STRTGY_BUCKTDTLS E
    WHERE D.PRTFL_ID = FSB_PRTFL_ID
     group by PRTFL_ID
     having sum(((DECODE(BUYSELL,'S',(avg_PRICE_TO- CNTRCT_LTP) * QTY ,'B', (CNTRCT_LTP-avg_PRICE_TO) * QTY ))/100)) >0
   order by PRTFL_ID
     );
    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char*)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if( DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"----------------------------------------------");
      fn_userlog(c_ServiceName,"Match account :%s:",c_match_accnt);
    }

      d_mtd_pfm_score=((double)l_mtd_profit_calls/l_mtd_tot_calls)*100;
     d_mtd_pfm_score   = (int)(d_mtd_pfm_score * 100 + .5);
       d_mtd_pfm_score= (double)d_mtd_pfm_score / 100;
     

    /** Moving values to buffer **/
      if(Fadd32(ptr_fml_Obuf, FFO_INTRST_RT, (char *)&d_mtd_pfm_score, 0)==-1)
     {
        fn_userlog(c_ServiceName,"Error in Fadd ",0);
        fn_errlog( c_ServiceName, "S31045", FMLMSG, c_err_msg  );
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
      /*Total profit of mtd*/
    EXEC SQL
     select nvl(round(sum(PNL),2),0) 
     INTO :d_mtd_expctd_prftloss
     FROM
     (
       SELECT
             PRTFL_ID,
             sum(((DECODE(BUYSELL,'S',(avg_PRICE_TO- CNTRCT_LTP) * QTY ,'B', (CNTRCT_LTP-avg_PRICE_TO) * QTY ))/100)) AS PNL
             from
             (
           SELECT
             Entry_DATE,
             USER_ID,
             PRTFL_NAME,
             PRTFL_ID,
             UNDRLYING,
             PRDCT_TYP,
             EXPRY_DT,
             OPT_TYP,
             STRIKE_PRC,
             BUYSELL,
             QTY,
             avg(A.FSL_CNTRCT_LTP) CNTRCT_LTP,
             avg(PRICE_TO) avg_PRICE_TO
          FROM
          FSL_FO1cLICK_LEGDTLS_LOG A, FSB_FO1CLICK_BUCKTDTLS_LOG C,
          (
          select DISTINCT trunc(FSB_CALL_DATE) Entry_DATE,
          FSB_LST_MODIFIED_BY USER_ID,
          rtrim(FIS_STRTGY_NAME) STRATEGY_BUCKET,
          FSB_PRTFL_NAME PRTFL_NAME,
          FSB_PRTFL_ID PRTFL_ID,
          FSB_CALL_ACTION  CALL_ACTION,
          FSL_UNDRLYNG UNDRLYING,
          FSL_PRDCT_TYP PRDCT_TYP,
          FSL_EXPRY_DT EXPRY_DT,
          FSL_OPT_TYP OPT_TYP,
          FSL_STRK_PRC/100 STRIKE_PRC,
          FSL_ACTION BUYSELL,
          FSL_ORDR_QTY QTY,
          ((FSL_RCMEND_PRC_FRM + FSL_RCMEND_PRC_TO)/2) PRICE_TO,
          FSB_TRGT_PRC/100 Target,
          FSB_SLTP_PRC/100 SLTP_PRC,
          FSB_BOOK_PART_PROFT_PERC/100 BOOK_PRTFL,
          FSB_BOOK_PROFIT/100 BOOK_PROFIT,
          FSB_EXIT_PRICE/100 EXIT_PRC,
          rtrim(FTD_TIMEFRAME_RNF) TIME_FRAME,
          FSL_CNTRCT_LTP,
          FSL_LEG_NO,
          FSB_CALL_DATE
      from FSB_FO1CLICK_BUCKTDTLS_LOG,
           FSL_FO1CLICK_LEGDTLS_LOG,
           FIS_FO1CLICK_STRTGYBUSKTS,
           FTD_FO1CLICK_TIMEFRAME_DTLS
       WHERE FSB_PRTFL_ID=FSL_PRTFLO_ID
         AND FSB_STRGY_ID = FIS_STRTGY_ID
         AND FSB_CALL_DATE  IS not null
         AND FTD_TIMEFRAME_ID = FSB_TIME_FRAME
         AND to_char(FSB_STRTGY_LAUNCH_DT,'Mon-yyyy')=to_Char(sysdate,'Mon-YYYY')
         AND FSB_CUST_RCMEND_FLG='R'
         AND FSB_CALL_ACTION = 'Call Initiated'
         AND   FSL_INDSTK  LIKE :c_indstk
         AND  RTRIM(FSB_CALL_ACTION) is not null
         AND  FSL_CNTRCT_LTP is not null
     order by to_number(FSB_PRTFL_ID) ASC, FSB_CALL_DATE ASC
    ) B
      WHERE  A.FSL_PRTFLO_ID = B.PRTFL_ID
       AND   C.FSB_PRTFL_ID = B.PRTFL_ID
       AND   C.FSB_CALL_ACTION != 'Call Initiated'
       AND   A.FSL_LEG_NO = B.FSL_LEG_NO
       AND   A.FSL_CNTRCT_LTP is not null
       AND  RTRIM(C.FSB_CALL_ACTION) is not null
    Group by
       Entry_DATE,
       USER_ID,
       PRTFL_NAME,
       PRTFL_ID,
       UNDRLYING,
       PRDCT_TYP,
       EXPRY_DT,
       OPT_TYP,
       STRIKE_PRC,
       BUYSELL,
       QTY
     ) D,FSB_FO1CLICK_STRTGY_BUCKTDTLS E
    WHERE D.PRTFL_ID = FSB_PRTFL_ID
     group by PRTFL_ID
     order by PRTFL_ID
     );


      if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char*)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if( DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"----------------------------------------------");
      fn_userlog(c_ServiceName,"Match account :%s:",c_match_accnt);
    }
    /** Moving values to buffer **/
    d_mtd_expctd_prftloss = d_mtd_expctd_prftloss *100;  /** To make in Paise as on front end it displayed in Rupees. **/
    if(Fadd32(ptr_fml_Obuf, FFO_PI_PO_AMT, (char *)&d_mtd_expctd_prftloss, 0)==-1)
     {
        fn_userlog(c_ServiceName,"Error in Fadd ",0);
        fn_errlog( c_ServiceName, "S31055", FMLMSG, c_err_msg  );
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

      /*total number of calls for ytd*/
   EXEC SQL
      select
      count(distinct(FSB_PRTFL_ID))
      INTO :l_ytd_tot_calls
      from FSB_FO1CLICK_BUCKTDTLS_LOG,
           FSL_FO1CLICK_LEGDTLS_LOG
      where  trunc(FSB_STRTGY_LAUNCH_DT)>
           ( select CASE WHEN trunc(sysdate)>=TO_CHAR(ADD_MONTHS(trunc(sysdate,'year'),3)) THEN
               TO_CHAR(ADD_MONTHS(trunc(sysdate,'year'),3))
           ELSE  TO_CHAR(ADD_MONTHS(trunc(sysdate,'year'),-9))
           END
           from dual)
          AND  trunc(FSB_STRTGY_LAUNCH_DT) <=trunc(SYSDATE)
          AND  FSL_INDSTK  LIKE :c_indstk
          AND  FSB_PRTFL_ID=FSL_PRTFLO_ID
          AND  FSB_CUST_RCMEND_FLG='R'
          AND  FSB_CALL_ACTION != 'Call Initiated'
          AND  FSL_CNTRCT_LTP is not null
          AND  RTRIM(FSB_CALL_ACTION) is not null;


     if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char*)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if( DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"----------------------------------------------");
      fn_userlog(c_ServiceName,"Match account :%s:",c_match_accnt);
    }
    /** Moving values to buffer **/
     if(Fadd32(ptr_fml_Obuf, FFO_COUNTER, (char *)&l_ytd_tot_calls, 0)==-1)
     {
        fn_userlog(c_ServiceName,"Error in Fadd ",0);
        fn_errlog( c_ServiceName, "S31065", FMLMSG, c_err_msg  );
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
     /*performance score of YTD*/
     EXEC SQL
      select  count(distinct(id))
      INTO :l_ytd_profit_calls
      FROM
      (
       SELECT      PRTFL_ID id,
                   SUM(((DECODE(BUYSELL,'S',(avg_PRICE_TO- CNTRCT_LTP) * QTY ,'B', (CNTRCT_LTP-avg_PRICE_TO) * QTY ))/100)) AS PNL
              from
             (
           SELECT
             Entry_DATE,
             USER_ID,
             PRTFL_NAME,
             PRTFL_ID,
             UNDRLYING,
             PRDCT_TYP,
             EXPRY_DT,
             OPT_TYP,
             STRIKE_PRC,
             BUYSELL,
             QTY,
             avg(A.FSL_CNTRCT_LTP) CNTRCT_LTP,
             avg(PRICE_TO) avg_PRICE_TO
          FROM
          FSL_FO1cLICK_LEGDTLS_LOG A, FSB_FO1CLICK_BUCKTDTLS_LOG C,
          (
          select DISTINCT trunc(FSB_CALL_DATE) Entry_DATE,
          FSB_LST_MODIFIED_BY USER_ID,
          rtrim(FIS_STRTGY_NAME) STRATEGY_BUCKET,
          FSB_PRTFL_NAME PRTFL_NAME,
          FSB_PRTFL_ID PRTFL_ID,
          FSB_CALL_ACTION  CALL_ACTION,
          FSL_UNDRLYNG UNDRLYING,
          FSL_PRDCT_TYP PRDCT_TYP,
          FSL_EXPRY_DT EXPRY_DT,
          FSL_OPT_TYP OPT_TYP,
          FSL_STRK_PRC/100 STRIKE_PRC,
          FSL_ACTION BUYSELL,
          FSL_ORDR_QTY QTY,
          ((FSL_RCMEND_PRC_FRM + FSL_RCMEND_PRC_TO)/2) PRICE_TO,
          FSB_TRGT_PRC/100 Target,
          FSB_SLTP_PRC/100 SLTP_PRC,
          FSB_BOOK_PART_PROFT_PERC/100 BOOK_PRTFL,
          FSB_BOOK_PROFIT/100 BOOK_PROFIT,
          FSB_EXIT_PRICE/100 EXIT_PRC,
          rtrim(FTD_TIMEFRAME_RNF) TIME_FRAME,
          FSL_CNTRCT_LTP,
          FSL_LEG_NO,
          FSB_CALL_DATE
      from FSB_FO1CLICK_BUCKTDTLS_LOG,
           FSL_FO1CLICK_LEGDTLS_LOG,
           FIS_FO1CLICK_STRTGYBUSKTS,
           FTD_FO1CLICK_TIMEFRAME_DTLS
       WHERE FSB_PRTFL_ID=FSL_PRTFLO_ID
         AND FSB_STRGY_ID = FIS_STRTGY_ID
         AND FSB_CALL_DATE  IS not null
         AND FTD_TIMEFRAME_ID = FSB_TIME_FRAME
         AND trunc(FSB_STRTGY_LAUNCH_DT)>
           (   select CASE WHEN trunc(sysdate)>=TO_CHAR(ADD_MONTHS(trunc(sysdate,'year'),3)) THEN
               TO_CHAR(ADD_MONTHS(trunc(sysdate,'year'),3))
               ELSE  TO_CHAR(ADD_MONTHS(trunc(sysdate,'year'),-9))
               END
              from dual
            )
          AND  trunc(FSB_STRTGY_LAUNCH_DT) <=trunc(SYSDATE)
         AND FSB_CUST_RCMEND_FLG='R'
         AND FSB_CALL_ACTION = 'Call Initiated'
         AND  RTRIM(FSB_CALL_ACTION) is not null
         AND   FSL_INDSTK  LIKE :c_indstk
         AND  FSL_CNTRCT_LTP is not null
     order by to_number(FSB_PRTFL_ID) ASC, FSB_CALL_DATE ASC
    ) B
      WHERE  A.FSL_PRTFLO_ID = B.PRTFL_ID
       AND   C.FSB_PRTFL_ID = B.PRTFL_ID
       AND   C.FSB_CALL_ACTION != 'Call Initiated'
       AND   A.FSL_LEG_NO = B.FSL_LEG_NO
       AND   A.FSL_CNTRCT_LTP is not null
       AND  RTRIM(C.FSB_CALL_ACTION) is not null
    Group by
       Entry_DATE,
       USER_ID,
       PRTFL_NAME,
       PRTFL_ID,
       UNDRLYING,
       PRDCT_TYP,
       EXPRY_DT,
       OPT_TYP,
       STRIKE_PRC,
       BUYSELL,
       QTY
     ) D,FSB_FO1CLICK_STRTGY_BUCKTDTLS E
    WHERE D.PRTFL_ID = FSB_PRTFL_ID
      group by D.PRTFL_ID 
      having SUM(((DECODE(BUYSELL,'S',(avg_PRICE_TO- CNTRCT_LTP) * QTY ,'B', (CNTRCT_LTP-avg_PRICE_TO) * QTY ))/100)) > 0 
      order by D.PRTFL_ID
    );

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31070", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char*)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if( DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"----------------------------------------------");
      fn_userlog(c_ServiceName,"Match account :%s:",c_match_accnt);
    }

    d_ytd_pfm_score=((double)l_ytd_profit_calls/l_ytd_tot_calls)*100;
    d_ytd_pfm_score = (int)(d_ytd_pfm_score * 100 + .5);
    d_ytd_pfm_score= (double)d_ytd_pfm_score / 100;
    
    /** Moving values to buffer **/
      if(Fadd32(ptr_fml_Obuf, FFO_INTRST_RT, (char *)&d_ytd_pfm_score, 0)==-1)
     {
        fn_userlog(c_ServiceName,"Error in Fadd ",0);
        fn_errlog( c_ServiceName, "S31075", FMLMSG, c_err_msg  );
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
       /*Total profit of ytd*/
   EXEC SQL
     select nvl(round(sum(PNL),2),0) 
     INTO :d_ytd_expctd_prftloss
     FROM
     (
      SELECT        PRTFL_ID,
                   SUM(((DECODE(BUYSELL,'S',(avg_PRICE_TO- CNTRCT_LTP) * QTY ,'B', (CNTRCT_LTP-avg_PRICE_TO) * QTY ))/100)) AS PNL
              from
             (
           SELECT
             Entry_DATE,
             USER_ID,
             PRTFL_NAME,
             PRTFL_ID,
             UNDRLYING,
             PRDCT_TYP,
             EXPRY_DT,
             OPT_TYP,
             STRIKE_PRC,
             BUYSELL,
             QTY,
             avg(A.FSL_CNTRCT_LTP) CNTRCT_LTP,
             avg(PRICE_TO) avg_PRICE_TO
          FROM
          FSL_FO1cLICK_LEGDTLS_LOG A, FSB_FO1CLICK_BUCKTDTLS_LOG C,
          (
          select DISTINCT trunc(FSB_CALL_DATE) Entry_DATE,
          FSB_LST_MODIFIED_BY USER_ID,
          rtrim(FIS_STRTGY_NAME) STRATEGY_BUCKET,
          FSB_PRTFL_NAME PRTFL_NAME,
          FSB_PRTFL_ID PRTFL_ID,
          FSB_CALL_ACTION  CALL_ACTION,
          FSL_UNDRLYNG UNDRLYING,
          FSL_PRDCT_TYP PRDCT_TYP,
          FSL_EXPRY_DT EXPRY_DT,
          FSL_OPT_TYP OPT_TYP,
          FSL_STRK_PRC/100 STRIKE_PRC,
          FSL_ACTION BUYSELL,
          FSL_ORDR_QTY QTY,
          ((FSL_RCMEND_PRC_FRM + FSL_RCMEND_PRC_TO)/2) PRICE_TO,
          FSB_TRGT_PRC/100 Target,
          FSB_SLTP_PRC/100 SLTP_PRC,
          FSB_BOOK_PART_PROFT_PERC/100 BOOK_PRTFL,
          FSB_BOOK_PROFIT/100 BOOK_PROFIT,
          FSB_EXIT_PRICE/100 EXIT_PRC,
          rtrim(FTD_TIMEFRAME_RNF) TIME_FRAME,
          FSL_CNTRCT_LTP,
          FSL_LEG_NO,
          FSB_CALL_DATE
      from FSB_FO1CLICK_BUCKTDTLS_LOG,
           FSL_FO1CLICK_LEGDTLS_LOG,
           FIS_FO1CLICK_STRTGYBUSKTS,
           FTD_FO1CLICK_TIMEFRAME_DTLS
       WHERE FSB_PRTFL_ID=FSL_PRTFLO_ID
         AND FSB_STRGY_ID = FIS_STRTGY_ID
         AND FSB_CALL_DATE  IS not null
         AND FTD_TIMEFRAME_ID = FSB_TIME_FRAME
         AND trunc(FSB_STRTGY_LAUNCH_DT)>
           (   select CASE WHEN trunc(sysdate)>=TO_CHAR(ADD_MONTHS(trunc(sysdate,'year'),3)) THEN
               TO_CHAR(ADD_MONTHS(trunc(sysdate,'year'),3))
               ELSE  TO_CHAR(ADD_MONTHS(trunc(sysdate,'year'),-9))
               END
              from dual
            )
          AND  trunc(FSB_STRTGY_LAUNCH_DT) <=trunc(SYSDATE)
         AND FSB_CUST_RCMEND_FLG='R'
         AND FSB_CALL_ACTION = 'Call Initiated'
         AND  RTRIM(FSB_CALL_ACTION) is not null
         AND   FSL_INDSTK  LIKE :c_indstk
         AND  FSL_CNTRCT_LTP is not null
     order by to_number(FSB_PRTFL_ID) ASC, FSB_CALL_DATE ASC
    ) B
      WHERE  A.FSL_PRTFLO_ID = B.PRTFL_ID
       AND   C.FSB_PRTFL_ID = B.PRTFL_ID
       AND   C.FSB_CALL_ACTION != 'Call Initiated'
       AND   A.FSL_LEG_NO = B.FSL_LEG_NO
       AND   A.FSL_CNTRCT_LTP is not null
       AND  RTRIM(C.FSB_CALL_ACTION) is not null
    Group by
       Entry_DATE,
       USER_ID,
       PRTFL_NAME,
       PRTFL_ID,
       UNDRLYING,
       PRDCT_TYP,
       EXPRY_DT,
       OPT_TYP,
       STRIKE_PRC,
       BUYSELL,
       QTY
     ) D,FSB_FO1CLICK_STRTGY_BUCKTDTLS E
    WHERE D.PRTFL_ID = FSB_PRTFL_ID
      group by PRTFL_ID 
      order by PRTFL_ID
     );


      if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31080", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char*)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if( DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"----------------------------------------------");
      fn_userlog(c_ServiceName,"Match account :%s:",c_match_accnt);
    }
    /** Moving values to buffer **/
    d_ytd_expctd_prftloss = d_ytd_expctd_prftloss * 100;  /** To make it in Paise **/
    if(Fadd32(ptr_fml_Obuf, FFO_PI_PO_AMT, (char *)&d_ytd_expctd_prftloss, 0)==-1)
     {
        fn_userlog(c_ServiceName,"Error in Fadd ",0);
        fn_errlog( c_ServiceName, "S31085", FMLMSG, c_err_msg  );
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }


   }/***** End of Request type S *****/
  else if(c_rqst_type == 'D')  /** Download **/
      {
         if (DEBUG_MSG_LVL_0)
             fn_userlog(c_ServiceName, "download for given range of date");
       /** Retreiving Input values **/
          i_err[0] = Fget32(ptr_fml_Ibuf, FFO_FROM_DT, 0, (char * )c_from_dt, 0);
          i_ferr[0] = Ferror32;
          i_err[1] = Fget32(ptr_fml_Ibuf, FFO_TO_DT, 0, (char * )c_to_dt, 0);
           i_ferr[1] = Ferror32;


           for (i_cnt = 0; i_cnt < 2; i_cnt++)
          {
             if (i_err[i_cnt] == -1)
             {
            fn_errlog(c_ServiceName, "S31090", Fstrerror32(i_ferr[i_cnt]),c_err_msg);
             fn_userlog(c_ServiceName, "Unable to fget for i :[%d]",i_cnt);
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            tpfree((char*)ptr_fml_Obuf);
             tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
              }
         }

		if (DEBUG_MSG_LVL_0)
		{
      fn_userlog(c_ServiceName,"Pranav : From date value is :%s:", c_from_dt);
			fn_userlog(c_ServiceName,"Pranav : To date value is :%s:", c_to_dt);
		}


         EXEC SQL
                 DECLARE prf_rpt CURSOR FOR
             SELECT
                nvl(TO_CHAR(Entry_DATE),'NA'),
                nvl(TO_CHAR(FSB_DATE),'NA'),
                nvl( PRTFL_NAME,'NA'),
                PRTFL_ID,
                nvl( FSB_CALL_ACTION,'NA'),
                nvl( UNDRLYING,'NA'),
                nvl( PRDCT_TYP,'*'),
                nvl(TO_CHAR(EXPRY_DT),'NA'),
                nvl( OPT_TYP,'*'),
                nvl( STRIKE_PRC,0),
                nvl( BUYSELL,'*'),
                nvl( SL,0.0),
                nvl( FSB_TRGT_PRC,0),
                nvl( avg_PRICE_TO,0),
                nvl( CNTRCT_LTP,0),
                nvl( QTY,0),
                nvl( round(PNL,2),0.0)
              FROM
                (
               SELECT
               Entry_DATE,
               E.FSB_CALL_DATE FSB_DATE,
               PRTFL_NAME ,
               PRTFL_ID ,
               FSB_CALL_ACTION,
               UNDRLYING ,
               PRDCT_TYP,
               EXPRY_DT,
               OPT_TYP,
               STRIKE_PRC,
               BUYSELL ,
               DECODE(FSB_CALL_ACTION,'Book Profit',FSB_BOOK_PROFIT/100,'Book part Profit',FSB_BOOK_PART_PROFT_PERC/100,'Stoploss hit'
,FSB_SLTP_PRC/100,'Target Achieved',FSB_TRGT_PRC/100) as SL,
              FSB_TRGT_PRC ,
              avg_PRICE_TO,
              CNTRCT_LTP,
              QTY,
             ((DECODE(BUYSELL,'S',(avg_PRICE_TO- CNTRCT_LTP) * QTY ,'B', (CNTRCT_LTP-avg_PRICE_TO) * QTY ))/100) AS PNL
              from
             (
           SELECT
             Entry_DATE,
             USER_ID,
             PRTFL_NAME,
             PRTFL_ID,
             UNDRLYING,
             PRDCT_TYP,
             EXPRY_DT,
             OPT_TYP,
             STRIKE_PRC,
             BUYSELL,
             QTY,
             avg(A.FSL_CNTRCT_LTP) CNTRCT_LTP,
             avg(PRICE_TO) avg_PRICE_TO
          FROM
          FSL_FO1cLICK_LEGDTLS_LOG A, FSB_FO1CLICK_BUCKTDTLS_LOG C,
          (
          select DISTINCT trunc(FSB_CALL_DATE) Entry_DATE,
          FSB_LST_MODIFIED_BY USER_ID,
          rtrim(FIS_STRTGY_NAME) STRATEGY_BUCKET,
          FSB_PRTFL_NAME PRTFL_NAME,
          FSB_PRTFL_ID PRTFL_ID,
          FSB_CALL_ACTION  CALL_ACTION,
          FSL_UNDRLYNG UNDRLYING,
          FSL_PRDCT_TYP PRDCT_TYP,
          FSL_EXPRY_DT EXPRY_DT,
          FSL_OPT_TYP OPT_TYP,
          FSL_STRK_PRC STRIKE_PRC,
          FSL_ACTION BUYSELL,
          FSL_ORDR_QTY QTY,
          ((FSL_RCMEND_PRC_FRM + FSL_RCMEND_PRC_TO)/2) PRICE_TO,
          FSB_TRGT_PRC/100 Target,
          FSB_SLTP_PRC/100 SLTP_PRC,
          FSB_BOOK_PART_PROFT_PERC/100 BOOK_PRTFL,
          FSB_BOOK_PROFIT/100 BOOK_PROFIT,
          FSB_EXIT_PRICE/100 EXIT_PRC,
          rtrim(FTD_TIMEFRAME_RNF) TIME_FRAME,
          FSL_CNTRCT_LTP,
          FSL_LEG_NO,
          FSB_CALL_DATE
      from FSB_FO1CLICK_BUCKTDTLS_LOG,
           FSL_FO1CLICK_LEGDTLS_LOG,
           FIS_FO1CLICK_STRTGYBUSKTS,
           FTD_FO1CLICK_TIMEFRAME_DTLS
       WHERE FSB_PRTFL_ID=FSL_PRTFLO_ID
         AND FSB_STRGY_ID = FIS_STRTGY_ID
         AND FSB_CALL_DATE  IS not null
         AND FTD_TIMEFRAME_ID = FSB_TIME_FRAME
         AND trunc(FSB_STRTGY_LAUNCH_DT) BETWEEN TO_DATE(:c_from_dt , 'DD MON YYYY' ) AND  TO_DATE(:c_to_dt , 'DD MON YYYY' )
         AND FSB_CUST_RCMEND_FLG='R'
         AND FSB_CALL_ACTION = 'Call Initiated'
         AND  RTRIM(FSB_CALL_ACTION) is not null
         AND  FSL_CNTRCT_LTP is not null
     order by to_number(FSB_PRTFL_ID) ASC, FSB_CALL_DATE ASC
    ) B
      WHERE  A.FSL_PRTFLO_ID = B.PRTFL_ID
       AND   C.FSB_PRTFL_ID = B.PRTFL_ID
       AND   C.FSB_CALL_ACTION != 'Call Initiated'
       AND   A.FSL_LEG_NO = B.FSL_LEG_NO
       AND   A.FSL_CNTRCT_LTP is not null
       AND  RTRIM(C.FSB_CALL_ACTION) is not null
    Group by
       Entry_DATE,
       USER_ID,
       PRTFL_NAME,
       PRTFL_ID,
       UNDRLYING,
       PRDCT_TYP,
       EXPRY_DT,
       OPT_TYP,
       STRIKE_PRC,
       BUYSELL,
       QTY
     ) D,FSB_FO1CLICK_STRTGY_BUCKTDTLS E
    WHERE D.PRTFL_ID = FSB_PRTFL_ID
      order by PRTFL_ID
   );

 EXEC SQL
    OPEN prf_rpt;    /** Opening prf_rpt Cursor **/
    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31095", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      EXEC SQL CLOSE prf_rpt;
      tpfree((char*)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    /** Moving CURSOR content to buffer **/

     while(1)  /** Infinite for loop start **/
    {
      EXEC SQL
      FETCH   prf_rpt
      INTO       :c_entry_date,
                 :c_exit_date,
                 :c_prfl_name,
                 :l_prfl_id,
                 :c_call_action,
                 :c_undrlyng,
                 :c_prdct_typ,
                 :c_expry_dt,
                 :c_opt_typ,
                 :l_strk_prc,
                 :c_buysel,
                 :d_sltp_prc,
                 :l_trg,
                 :l_entry_price,
                 :l_exit_price,
                 :l_ordr_qty,
                 :d_expctd_prftloss;
                

     if ( SQLCODE != 0 )
       {
         if ( SQLCODE == NO_DATA_FOUND )
         {
           fn_userlog(c_ServiceName,"NO DATA FOUND ");
           break;
         }
         else
         {
           fn_errlog( c_ServiceName, "S31100", SQLMSG, c_err_msg  );
           EXEC SQL CLOSE prf_rpt;
           tpfree ( ( char * ) ptr_fml_Obuf );
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }
        }

        d_sltp_prc =d_sltp_prc*100; 
        d_expctd_prftloss=d_expctd_prftloss*100;
    
        i_returncode = fn_pack_vartofml(c_ServiceName,
                                    c_err_msg,
                                    &ptr_fml_Obuf,
                                    17,
                                    FFO_TRD_DT, (char *)c_entry_date,
                                    FFO_MOD_TRD_DT, (char *)c_exit_date,
                                    FFO_QUEUE_NAME, (char *)c_prfl_name,
                                    FFO_QSPACE_NAME, (char *)c_call_action, 
                                    FFO_UNDRLYNG, (char *)c_undrlyng,
                                    FFO_PRDCT_TYP, (char *)&c_prdct_typ,
                                    FFO_EXPRY_DT, (char *)c_expry_dt,
                                    FFO_OPT_TYP, (char *)&c_opt_typ,
                                    FFO_STRK_PRC, (char *)&l_strk_prc,							
																		FFO_ORDR_FLW, (char *)&c_buysel,
                                    FFO_ADD_MRGN_AMT, (char *)&d_sltp_prc,
                                    FFO_LMT_RT, (char *)&l_trg,
                                    FFO_EXCTD_RT, (char *)&l_entry_price,
                                    FFO_CURR_RT, (char *)&l_exit_price,
                                    FFO_ORD_TOT_QTY, (char *)&l_ordr_qty,
                                    FFO_PI_PO_AMT, (char *)&d_expctd_prftloss,
                                    FFO_ACTN_ID, (char *)&l_prfl_id);

        if ( i_returncode != 0 )
        {
          fn_errlog( c_ServiceName, "S31105", LIBMSG, c_err_msg);
          fn_userlog( c_ServiceName, "prf_rpt : Error while packing variable to fml.");
          EXEC SQL CLOSE prf_rpt;
          tpfree((char * ) ptr_fml_Obuf);
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        } 
    
    } /** Infinite for loop for prf_rpt closed here **/


    EXEC SQL
    CLOSE prf_rpt; /**  prf_rpt CURSOR closed **/

    if(DEBUG_MSG_LVL_0)
      fn_userlog( c_ServiceName,"prf_rpt_cursor contents moved sucessfully");





      }

      if( DEBUG_MSG_LVL_0 )
        fn_userlog(c_ServiceName, "----------------- service %s ends here --------------------",c_ServiceName);

    tpreturn(TPSUCCESS, SUCC_BFR, (char *)ptr_fml_Obuf, 0, 0 );
}
