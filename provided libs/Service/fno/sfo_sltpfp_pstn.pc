/*  Program          	: SFO_SLTPFP_PSTN                		                 	                    */
/*                                                                                              */
/*  Description      	: This service retrieves the values of the entire                         */
/*                      contract SLTP open position given different input                       */
/*                      parameters based on two different operation types:                      */
/*                      U - Underlying as Input                                                 */
/*                      W - Without Underlying                                                  */
/*                                                                         										 	*/
/* 	Input Parameters 	:																																					*/ 
/*												  User ID                     	FFO_USR_ID           		              */
/*													Session ID                  	FFO_SSSN_ID										 				*/
/*													Match Account      	        	FFO_EBA_MTCH_ACT_NO										*/
/*													Exchange Code               	FFO_XCHNG_CD													*/
/*													Product Type                	FFO_PRDCT_TYP													*/
/*													Operation Type              	FFO_OPERATION_TYP											*/
/*													Routing Information         	FFO_ROUT_CRT													*/
/*													Underlying 										FFO_UNDRLYNG													*/
/*  																																														*/	
/*	Output Parameters	:																																					*/
/*													Match Account               	FFO_EBA_MTCH_ACT_NO 									*/
/*													Exchange Code									FFO_XCHNG_CD                          */
/*													Product Type									FFO_PRDCT_TYP													*/
/*													Category											FFO_CTGRY_INDSTK											*/
/*													Underlying										FFO_UNDRLYNG													*/
/*													Expiry Date										FFO_EXPRY_DT													*/
/*													Exercise Type									FFO_EXER_TYP													*/
/*													Option Type										FFO_OPT_TYP														*/
/*													Strike Price									FFO_STRK_PRC													*/
/*													Orde Valid Date 			        FFO_ORD_VALID_DT 											*/
/*													Open Position Flow						FFO_C_OPNPSTN_FLW											*/
/*													Open Position Qty							FFO_C_OPNPSTN_QTY											*/
/*													Open Position Average price		FFO_U_IMTM_SPRD_PL										*/
/*													Cover sltp order flow					FFO_ORDR_FLW													*/
/*													Cover SLTP Trigger Price			FFO_STP_LSS_TGR												*/
/*												  Cover SLTP Executed qty				FFO_EXEC_QTY													*/
/*													Cover SLTP Limit Price				FFO_LMT_RT														*/
/*													Action on Cover Order					FFO_MOD_CAN_FLG												*/
/*													CMP														FFO_CUR_MKT_PRC												*/
/*													Unrealized PNL								FFO_UNRLZD_PL													*/
/*													Blocked Margin								FFO_U_ORDR_MRGN												*/
/*													SLTP Order Ref.								FFO_ORDR_RFRNC												*/
/*													Error Message									FFO_ERR_MSG														*/
/*																																															*/
/*	 Log             	: 1.0     10-Dec-2012  							Bhushan Sonwane                       */
/*	 Log             	: 1.1     11-Jun-2013  							SH                      						  */
/*   Log              : 1.2     18-Jul-2013               SH                                    */
/*   Log              : 1.3     18-Jul-2013               Navina D.                             */
/*	 Log							:	1.4			17-Sep-2013               Bhushan Sonwane                       */
/*   Log              : 1.5     07-May-2014               Bhushan Sonwane                       */
/*   Log              : 1.6     06-Aug-2014               Swati A.B                             */
/*   Log              : 1.7     03-Jul-2014								Bhushan Sonwane                       */
/*   Log              : 1.8			27-Aug-2014               Bhushan Sonwane                       */
/*   Log              : 1.9			22-July-2015              Aakash Chavan                         */
/*   Log              : 2.0     27-Oct-2015               Anand Dhopte                          */
/*	 Log				      :	2.1		  02-Nov-2015				        Aakash			  					              */
/*   Log              : 2.2     02-Dec-2015               Samip M																*/
/*   Log              : 2.3     08-Jan-2016               Anand Dhopte                          */
/*   Log              : 2.5     11-Apr-2016               Anand Dhopte                          */
/*   Log              : 2.6     04-Julr-2016              Navina D.                             */
/*   Log              : 2.7     19-Jul-2016              Sachin Birje                           */
/*   Log              : 2.8     05-Aug-2016               Tanmay Warkhade                       */
/*   Log              : 2.9     12-Jun-2016               Swapnil More                          */
/*   Log              : 3.0     24-Oct-2016               Kishor Borkar                         */
/*	 Log							:	3.1			01-Oct-2018								Parag Kanojia													*/
/*   Log              : 3.2     21-Dec-2018               Akash Balasubramanian                 */
/*   Log							: 3.3			18-Feb-2019								Afzal K.															*/
/*   Log							: 3.4			17-Jan-2020               Sandip T.															*/
/*   Log							: 3.5			21-Jun-2021               Abhinav Kumbhar       								*/
/*   Log              : 3.6     25-Sep-2021								Kalpesh Patil													*/
/*   Log              : 3.7     23-Jun-2022               Ravi Malla                            */
/*   Log              : 3.8     22-Dec-2022               Ravi Malla                            */
/*   Log              : 3.9     22-Feb-2023               Ankita Satav                          */ 
/************************************************************************************************/
/*                                                                                              */
/*  1.0   -   New Release                                                                       */
/*  1.1   -   Output buffer size increased                                                      */
/*  1.2   -   Output buffer size increased from 10 to 30                                        */
/*  1.3   -   Buffer reallocation                                                               */
/*  1.4		-		OptionPlus Changes																																*/
/*  1.5   -   In WHERE Clause Underlying Matching Condition Changed for All Match Account case  */
/*  1.6   -   Log added for DL .net product typ issue                                           */
/*  1.7   -   Changes to identify span/nonspan customer in DBC to send data and also to send    */
/*            total order quantity in output for RIA																						*/
/*  1.8   -   Underlying Variable initialised with '%'.                                         */
/*  1.9   -   CR_ISEC14_64402 Limit Order Type in FPSLTP (Aakash Chavan)                        */
/*  2.0   -   Session Check Introduced                                                          */
/*  2.1 -     CR-ISEC14-67417 Market to Limit in OptionPLUS										                  */
/*  2.2   -   Bullet timing on Open Position page																								*/
/*  2.3   -   Market to Limit in FPSLTP and OptionPLUS changes for other front ends             */  
/*  2.5   -   Fprint32 of output buffer commented                                               */ 
/*  2.6   -   Log maintainance                                                                  */ 
/*  2.7   -   Debug level changes                                                               */ 
/*  2.8   -   My EOS changes                                                                    */ 
/*  2.9   -   CR-ISEC14-79794 Spot Price Display on Options & Option Plus Open Position screen  */
/*  3.0   -   Check Session IP - PHASE_III                                                      */
/*	3.1		-		CR-ISEC14-114802_FNO_LIVE_ISSUES Changes																					*/
/*  3.2   -   Logs introduced before and after calling function Check Session                   */
/*	3.3		-		Advisor Screen Open Position Changes																						  */
/*	3.4		-		Bullet time display for Option 20 customers																			  */
/*	3.5		-		CR-ISEC14-149749_Open_Position_Sorting          																  */
/*	3.6		-		CR-ISEC14-150750_Introduction of Profit Order in FPSL															*/
/*  3.7   -   Flash Trade Position Display                                                      */
/*  3.8   -   Flash Trade OptionPlus			                                                      */
/*  3.9   -   Flash Trade in F&O Segment,Till Expiry Spira Changes                              */
/************************************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_fml_def.h>
/* COMMENTED IN VER TOL : TUX on LINUX (Ravindra) * #include <fo_view_def.h> */
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fml_def.h>        
#include <fn_log.h>        
#include <fn_session.h>   
#include <fn_read_debug_lvl.h>  
#include <fn_span_lib.h>

#define FUNCTION
#define DATE_LEN  12
#define SUCCESS 0
#define FAIL  -1

#define TOTAL_FML 32
#define ARRAY_SIZE  2


#define MEMSET(A) memset(&A,'\0',sizeof(A))

char c_ServiceName [ 33 ];


void SFO_SLTPFP_PSTN(	TPSVCINFO *rqst	)
{
	/* Tuxedo specific variables                        */
  FBFR32  *ptr_fml_Ibuf;     /* Pointer to FML input buffer   */
  FBFR32  *ptr_fml_Obuf;     /* Pointer to FML output buffer   */
	
	char c_ServiceName[33];
 	char c_errmsg[256];
 	char c_null = '-';
 	char ch_null[2] = "-";
	char c_prev_mt_acnt[11];
  char c_user_id[ 15 ];
	char c_rqst_typ = '\0';					/***	Ver 2.1	***/
	char c_spl_flg='A';
	char c_valid_date[20] = "\0";

	int  i_returncode = 0;					/***	Ver 2.1	***/
  int  i_counter = 1;
  int  i_err[TOTAL_FML];
  int  i_ferr[TOTAL_FML];
  int  i_tot_rec = 0; 
  int  i = 0;
 	int  i_cnt;
 	int  i_cntr = 0;
 	int  rec_cnt=0;
  int  i_buf_len=0;	/*** Ver 1.3 ***/
	
	double d_null = 0.0;
  long   l_cmp = 0;      /* Current Market Price of a specified Stock */
  double  d_unlz_pl = 0.0;  /* Unrealized Profit & Loss */

	char  c_fxb_rqst_typ = '\0';			/***	Ver 2.1	***/
	char	c_fxb_plcd_stts = '\0';			/***	Ver 2.1	***/

	long l_null = 0;
  long l_spot_prc=0;                    /*** Ver 2.9 ***/
	/*** double d_frsh_exe_val = 0.0;  *** Commented in Ver 2.8 ***/
	/*** long  li_tot_exec_qty = 0;			    *** Commented in Ver 2.8 ***/
	double d_frs_exe_val = 0.0;  /*** Ver 2.8 ***/
	double d_frs_exe_qty = 0.0;  /*** Ver 2.8 ***/
	double d_cvr_exe_val = 0.0;  /*** Ver 2.8 ***/
	double d_cvr_exe_qty = 0.0;  /*** Ver 2.8 ***/
	double d_wgt_avrg_price = 0.0;
	double d_tot_mrgn = 0.0;
	double d_tot_pl = 0;
	double d_tot_profit_loss = 0.0;
	double d_grnd_utrd_mrgn =0.0;
	double d_grnd_tot_pl=0;

	EXEC SQL BEGIN DECLARE SECTION;
    struct st_usr_prfl st_user_profile;
		struct  st_err_msg st_er_msg;  			/***	Ver 2.0	***/
		sql_cursor cur_sltp_pstn;
		char c_opr_typ = '\0';					/***	Ver 2.1	***/
		char c_mtch_accnt_no[11];
		char c_xchng_cd[4];
		char c_undrlyng[7];
    char c_prev_undrlyng[7];	
		char c_prd_typ  = '\0';					/***	Ver 2.1	***/
		char c_spn_flg = 'A';									/*** Ver 1.7  ***/
 		char c_clnt_ctgry = '\0';					/***	Ver 2.1	***/
 		char c_ordr_rfrnc[19];
 		char c_sltp_ordr_rfrnc[19];
 		char c_frsh_ordr_flw='\0';
		char c_mod_can_flg = 'N';
		char c_mtm_flg = 'N';
 		char c_fc_flg = '\0';
		char c_cvr_fc_flg = '\0';			/*** Ver 1.9  ***/
		char c_dwl_flg = '\0';				/*** Ver 1.9  ***/
    char c_frsh_ordr_channel[4] = "\0";           /*** Ver 1.9 ***/
    char c_cvr_ordr_channel[4] = "\0";           /*** Ver 1.9 ***/
		char c_exer_typ = '\0';
 		char c_opt_typ = '\0';
 		long l_strike_prc= 0;
 		double d_utrd_mrgn = 0.0;
 		char c_ctgry_indstk = '\0';					/***	Ver 2.1	***/
 		char  c_pipe_id[3];
 		varchar c_trd_dt[12];
 		char c_cvr_ordr_flw = '\0';					/***	Ver 2.1	***/
 		long l_cvr_ordr_tot_qty = 0;
 		long l_lmt_rt = 0;
		long l_frsh_lmt_rt= 0;					/*** Ver 1.9  ***/
		long l_frsh_unexec_qty = 0;     /*** Ver 1.9  ***/
		long l_cvr_unexec_qty = 0;      /*** Ver 1.9  ***/
 		long li_stp_lss_tgr_prc = 0;
 		long  l_frsh_exctd_qty = 0;
		long  l_cvr_exctd_qty = 0;
		long l_mdfctn_cntr = 0;
 		char c_slm_flg = '\0';
		char c_frsh_slm_flg = '\0';				/*** Ver 1.9  ***/
 		char c_cvr_ordr_stts ='\0';
 		char c_frsh_ordr_stts ='\0'; 
 		long l_opnpstn_qty = 0;
		varchar c_expry_dt[12];
		long l_qty = 0;
		varchar c_bullet_param[5];		/*** Ver 2.2 ***/
		varchar c_bullet_frm_time[10];	/*** Ver 2.2 ***/
		varchar c_bullet_end_time[10];	/*** Ver 2.2 ***/
    char c_call_mod_serv_flag = '\0';               /*** Ver 2.3 ***/
    char c_sqoff_at_mkt_flag = '\0';                /*** Ver 2.3 ***/
		char c_bullet_schm_flg = '\0';									/*** Ver 3.1 ***/
		char c_prft_alwd_flg= 'N';											/*** Ver3.6 ***/
		char c_fum_prft_alwd_flg= '\0'; 								/*** Ver3.6 ***/
		long l_profit_ordr_exist= 0;										/*** Ver3.6 ***/		
	  char c_prft_ordr_stts  = '\0';  								/*** Ver3.6 ***/
    long l_prft_lmt_rt = 0;													/*** Ver3.6 ***/
    char c_prft_mod_can_flg = 'N';									/*** Ver3.6 ***/
    char c_prft_pend = 'N';													/*** Ver 3.6 ***/
    char c_prft_ordr_rfrnc[19] = "\0";              /*** Ver 3.6 ***/	
    char c_flash_prd_typ  = '\0';         /***  Ver 3.7 ***/
		int i_flash_mode=0;	/***  Ver 3.9 ***/
	
	EXEC SQL END DECLARE SECTION;	

  /*** Ver 3.0 Starts Here ***/
  struct vw_usr_prfl st_usr_prfl_vw;
  struct vw_err_msg st_err_msg_vw;

  MEMSET(st_usr_prfl_vw);
  MEMSET(st_err_msg_vw);
  /*** Ver 3.0 Ends Here ***/
	
  MEMSET(c_frsh_ordr_channel);  /** ver 1.9 **/
  MEMSET(c_cvr_ordr_channel);    /** Ver 1.9 **/
	MEMSET(st_user_profile);			/***	Ver 2.0	***/
  /***	Ver 2.0	Starts***/
  MEMSET(c_prev_mt_acnt);
  MEMSET(c_user_id);
  MEMSET(c_mtch_accnt_no);
  MEMSET(c_xchng_cd);
  MEMSET(c_prev_undrlyng);
  MEMSET(c_ordr_rfrnc);
  MEMSET(c_sltp_ordr_rfrnc);
  MEMSET(c_pipe_id);
  /***	Ver 2.0	Ends***/

	MEMSET(c_bullet_param);			/** Ver 2.2 **/
	MEMSET(c_bullet_frm_time);	/** Ver 2.2 **/
	MEMSET(c_bullet_end_time);	/** Ver 2.2 **/
	
  if( DEBUG_MSG_LVL_3 ) {
	fn_userlog(c_ServiceName,"Service FNO_SLTPFP_PSTN Started.........");
	}			/*** Ver 2.6 ***/

	/* Retrieve the FML buffer from the input request. */
	
	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
	strcpy( c_ServiceName, rqst->name );
  INITDBGLVL(c_ServiceName);
  ptr_fml_Obuf = (FBFR32 *)NULL;

  strcpy(c_undrlyng,"%");      /*** Ver 1.8 Variable initialised as we are facing problem of No Data Found because this variable holds value of previous request. ***/

	i_err[0] 	 = Fget32( ptr_fml_Ibuf, FFO_USR_ID, 0,(char *)st_user_profile.c_user_id, 0 );
 	i_ferr [0] = Ferror32;
 	i_err[1]   = Fget32( ptr_fml_Ibuf, FFO_SSSN_ID, 0,(char *)&st_user_profile.l_session_id, 0 ); /*** Ver 2.0 '&' was missing ***/
 	i_ferr [1] = Ferror32;
 	i_err[2]   = Fget32( ptr_fml_Ibuf, FFO_EBA_MTCH_ACT_NO, 0,(char *)st_user_profile.c_cln_mtch_accnt, 0 );
 	i_ferr [2] = Ferror32;
 	i_err[3]   = Fget32( ptr_fml_Ibuf, FFO_OPERATION_TYP, 0,(char *)&c_opr_typ, 0 );
 	i_ferr [3] = Ferror32;
 	i_err[4]   = Fget32( ptr_fml_Ibuf, FFO_XCHNG_CD, 0, (char *)c_xchng_cd, 0 );
 	i_ferr [4] = Ferror32;
 	i_err[5]   = Fget32( ptr_fml_Ibuf, FFO_PRDCT_TYP, 0, (char *)&c_prd_typ, 0 );	/* X- Flash Day Product,T - OverNight Product */
 	i_ferr [5] = Ferror32;
	i_err[6]   = Fget32( ptr_fml_Ibuf, FFO_UNDRLYNG, 0, (char *)c_undrlyng, 0 );
 	i_ferr [6] = Ferror32;

 	for(i_cnt =0; i_cnt <=5; i_cnt++) 
 	{
   	if ( (i_err[ i_cnt ] == -1 ) )
   	{
     	fn_userlog( c_ServiceName, "Error in field no. [%d] ",i_cnt);
     	fn_errlog( c_ServiceName, "S31005", Fstrerror32(i_ferr[i_cnt]),c_errmsg);
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   	}
  }
		
	if ( (i_err[6] == -1) && (i_ferr[6] != FNOTPRES ))
  {
   	fn_errlog( c_ServiceName, "S31010", Fstrerror32( i_ferr[6] ), c_errmsg  );
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  else if ( (i_err[6] == -1) && (i_ferr[6] == FNOTPRES))
  {
   	if ( c_opr_typ == WITH_UNDERLYING )
   	{
     	fn_errlog( c_ServiceName, "S31015", Fstrerror32( i_ferr[6] ), c_errmsg  );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
  }
	
	i_err[7] =Fget32(ptr_fml_Ibuf,FML_RQST_TYP,0, (char *)&c_rqst_typ,0);
  i_ferr[7] = Ferror32;

  if ( i_err[7] == -1 )
  {
    if( DEBUG_MSG_LVL_5 ) 
		{
    	fn_userlog(c_ServiceName,"Normal User ");
    }
    c_rqst_typ = 'N';
  }


	/*** Ver 1.7 Starts ***/
	if( Fget32( ptr_fml_Ibuf, FFO_IS_FLG, 0, (char *)&c_spn_flg,0) ==  -1 )
	{
		if ( Ferror32 == FNOTPRES )
		{
      if( DEBUG_MSG_LVL_3 )  /** Ver 2.7 **/
      {
			  fn_userlog(c_ServiceName,"Inside FNOTPRES check for input fml FFO_IS_FLG " );
      }
		}
		else if( Ferror32 != FNOTPRES )
		{
			fn_errlog( c_ServiceName, "S31020", FMLMSG, c_errmsg  );
			fn_userlog(c_ServiceName,"Error while getting input FFO_IS_FLG" );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
	/*** Ver 1.7 Ends ***/

	/*** Ver 1.9 Ends ***/
	if( Fget32( ptr_fml_Ibuf, FFO_DWL_FLG, 0, (char *)&c_dwl_flg,0) ==  -1 )
	{
		if( Ferror32 != FNOTPRES )
		{
			fn_errlog( c_ServiceName, "S31025", FMLMSG, c_errmsg  );
			fn_userlog(c_ServiceName,"Error while getting input FFO_DWL_FLG" );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}

	/*** Ver 1.9 Ends ***/

	strcpy ( ( char * )c_mtch_accnt_no, st_user_profile.c_cln_mtch_accnt );
  strcpy ( ( char * )c_expry_dt.arr, "\0");

  /*** Ver 2.0 Starts ***/

  /***** Ver 3.0 Starts Here *****/
    memcpy(&st_usr_prfl_vw,&st_user_profile,sizeof(struct vw_usr_prfl));

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl_vw.c_rout_crt );

	fn_userlog( c_ServiceName,"Before Calling fn_chk_sssn ");   /*** Ver 3.2 ***/

	if ( st_user_profile.l_session_id != 0 ) /****Added in Ver 3.3 ****/
 {
  i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl_vw,
                                             &st_err_msg_vw) ;

	fn_userlog( c_ServiceName,"After calling fn_chk_sssn ");   /*** Ver 3.2 ***/

  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31030", LIBMSG,st_err_msg_vw.c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg_vw.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
 }
  /***** Ver 3.0 Ends Here *****/
  /*** Commented in Ver 3.0 *******
    i_returncode = fn_chkspn_sssn ( c_ServiceName,
                                    &st_user_profile,
                                    &st_er_msg
                                  ) ;

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31035", LIBMSG,st_er_msg.c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_er_msg.c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

  Comment Ends for Ver 3.0 *******/

    /*** Ver 2.0 Ends ***/

  if( DEBUG_MSG_LVL_3 ) {
    fn_userlog( c_ServiceName,"*************INPUT PARAMETERS*************");
	} /*** Ver 2.6 ***/


    /*** Ver 3.7 starts ***/
    if ( c_prd_typ == 'X' || c_prd_typ == 'T' )	 /** Ver 3.9 added 'T' **/
    {
      c_flash_prd_typ=c_prd_typ;
      c_spn_flg = '*';
    }
    /*** Ver 3.7 end ***/

  if( DEBUG_MSG_LVL_1 ) {  /*** Ver 2.7 , Debug changed from 0 to 1 ***/
    fn_userlog( c_ServiceName,"c_mtch_accnt_no :%s:", c_mtch_accnt_no );
    fn_userlog( c_ServiceName,"c_opr_typ   :%c:", c_opr_typ );
    fn_userlog( c_ServiceName,"c_xchng_cd  :%s:", c_xchng_cd );
    fn_userlog( c_ServiceName,"c_undrlyng  :%s:", c_undrlyng );
		fn_userlog( c_ServiceName,"c_prd_typ	 :%c:", c_prd_typ );								/*** Ver 1.4 ***/
		fn_userlog( c_ServiceName,"c_spn_flg   :%c:", c_spn_flg );					 /*** Ver 1.7 ***/
		fn_userlog( c_ServiceName,"c_rqst_typ   :%c:", c_rqst_typ );   /***ver 3.3***/
	} /*** ver 2.6 ***/

  if( DEBUG_MSG_LVL_3 ) {
    fn_userlog( c_ServiceName,"******************************************");
  } /*** Ver 2.6 ***/

/*****

	if(tpbegin( TRAN_TIMEOUT, 0 ) == -1)
  {
    fn_errlog( c_ServiceName, "S31040", SQLMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

****/

	EXEC SQL ALLOCATE :cur_sltp_pstn;

  /*if ( c_prd_typ != 'U' && c_prd_typ != 'I' )    commented for ver 3.7 */      /*** Check Added in Ver 1.4 ***/
  if (c_prd_typ != 'U' && c_prd_typ != 'I' && c_prd_typ!='X' && c_prd_typ!='T') /*Added 'T' for Ver3.9*/
	{
		fn_errlog( c_ServiceName, "S31045", "Invalid Product Type", c_errmsg  );
    EXEC SQL FREE :cur_sltp_pstn;
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
	}

if( DEBUG_MSG_LVL_3 ) {
fn_userlog(c_ServiceName,"User ID :%s:",st_user_profile.c_user_id);
}	/*** Ver 2.6 ***/

   strcpy(c_user_id,st_user_profile.c_user_id);   /*** Ver 3.3 ***/

	if( strcmp( c_mtch_accnt_no, "*" ) == 0 )
  {
		if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog(c_ServiceName,"Inside All mtch accnnt's");
    }

 	/*** 	strcpy(c_user_id,st_user_profile.c_user_id); Commented here in Ver 3.3 and taken above ***/

		if( c_spn_flg == 'A' ) 												/** Condition added in Ver 1.7 **/
		{

     if( st_user_profile.c_user_id[0] == BPID )						/** User is DBC **/
     {
			EXEC SQL EXECUTE
        BEGIN
          OPEN 	:cur_sltp_pstn FOR
  	      SELECT  
		  					FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_CLNT_CTGRY,
                FRESH.FOD_ORDR_RFRNC,
		  					FRESH.FOD_SLTP_ORDR_RFRNC,                  
                FRESH.FOD_XCHNG_CD,                 
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
                DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW),		/*** Ver 2.8 ***/
		  					FRESH.FOD_FC_FLAG,
								FRESH.FOD_EXEC_QTY,
								FRESH.FOD_EXER_TYP,
								FRESH.FOD_OPT_TYP,
								FRESH.FOD_STRK_PRC,
								COVER.FOD_ORDR_VALID_DT,
								COVER.FOD_MDFCTN_CNTR,
		  					(FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD),
		  					COVER.FOD_INDSTK,
		  					COVER.FOD_PIPE_ID,
		  					COVER.FOD_TRD_DT,
		  					COVER.FOD_ORDR_FLW,
                COVER.FOD_ORDR_TOT_QTY,
		  					COVER.FOD_LMT_RT,                
		  					COVER.FOD_STP_LSS_TGR,
		  					PSTN.EXEC_QTY,
		  					COVER.FOD_LMT_MRKT_SL_FLG,
		  					COVER.FOD_ORDR_STTS,	  
                PSTN.OPEN_QTY, 
								FRESH.FOD_ORDR_STTS,
								FRESH.FOD_LMT_RT,							/*** Ver 1.9  ***/
								COVER.FOD_FC_FLAG,						/*** Ver 1.9  ***/
								FRESH.FOD_LMT_MRKT_SL_FLG,		/*** Ver 1.9  ***/
								FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY), /*** Ver 1.9  ***/
								COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY), /*** Ver 1.9  ***/
                FRESH.FOD_CHANNEL,             /*** Ver 1.9  ***/
                COVER.FOD_CHANNEL,              /*** Ver 1.9  ***/
                FRESH.FOD_PRDCT_TYP           /*** Ver 3.7 ***/
								
          FROM    
		  					FOD_FO_ORDR_DTLS FRESH,
		  					FOD_FO_ORDR_DTLS COVER,
								(
                  SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
                    		 SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, /*** Profit added in Ver 3.6 ***/
                    		 SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY
                  FROM   FOD_FO_ORDR_DTLS
                  WHERE  FOD_XCHNG_CD = :c_xchng_cd 
                  /*** AND    FOD_PRDCT_TYP = 'U'  			*** Commented In Ver 1.4 ***/
									AND    FOD_PRDCT_TYP= :c_prd_typ   		/*** Ver 1.4 ***/
									/*** AND		 FOD_UNDRLYNG = :c_undrlyng **  Commented in Ver 1.5 ***/
									AND     TRIM(FOD_UNDRLYNG)  LIKE  :c_undrlyng   /*** Ver 1.5 ***/
                  GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
                  HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY,FOD_EXEC_QTY ) ) != 0   /** Ver 2.8 **//***VEr 3.6 added Profit order ***/
                ) PSTN,
		  					CLM_CLNT_MSTR
          WHERE   
		  					CLM_BP_ID = :c_user_id
	  			AND   CLM_ALIAS_NAME  is not NULL
          AND   FRESH.FOD_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
	  			AND   COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC
          AND   FRESH.FOD_XCHNG_CD = :c_xchng_cd
          AND   FRESH.FOD_PRDCT_TYP = :c_prd_typ
          /*** AND   FRESH.FOD_UNDRLYNG = :c_undrlyng   **  Commented in Ver 1.5 ***/
					AND   TRIM(FRESH.FOD_UNDRLYNG)  LIKE  :c_undrlyng   /*** Ver 1.5 ***/
          AND   FRESH.FOD_EXER_TYP = 'E'
          AND   FRESH.FOD_FC_FLAG = 'F'
	  			AND   PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC
          ORDER BY
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
								FRESH.FOD_OPT_TYP,             /*** Ver 3.5 ***/
								FRESH.FOD_STRK_PRC;            /*** Ver 3.5 ***/
				END;
    	END-EXEC;

		}							/** End of DBC user. **/

		else
		{
			EXEC SQL EXECUTE
        BEGIN
          OPEN :cur_sltp_pstn FOR
		SELECT
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_CLNT_CTGRY,
                FRESH.FOD_ORDR_RFRNC,
                FRESH.FOD_SLTP_ORDR_RFRNC,
                FRESH.FOD_XCHNG_CD,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
                DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW),		/*** Ver 2.8 ***/
                FRESH.FOD_FC_FLAG,
								FRESH.FOD_EXEC_QTY,
								FRESH.FOD_EXER_TYP,
                FRESH.FOD_OPT_TYP,
                FRESH.FOD_STRK_PRC,
								COVER.FOD_ORDR_VALID_DT,
                COVER.FOD_MDFCTN_CNTR,
                (FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD),
                COVER.FOD_INDSTK,
                COVER.FOD_PIPE_ID,
                COVER.FOD_TRD_DT,
                COVER.FOD_ORDR_FLW,
                COVER.FOD_ORDR_TOT_QTY,
                COVER.FOD_LMT_RT,
                COVER.FOD_STP_LSS_TGR,
                PSTN.EXEC_QTY,
                COVER.FOD_LMT_MRKT_SL_FLG,
                COVER.FOD_ORDR_STTS,
                PSTN.OPEN_QTY, 
								FRESH.FOD_ORDR_STTS,
								FRESH.FOD_LMT_RT,						/*** Ver 1.9  ***/
								COVER.FOD_FC_FLAG,					/*** Ver 1.9  ***/
								FRESH.FOD_LMT_MRKT_SL_FLG,	/*** Ver 1.9  ***/
								FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY), /*** Ver 1.9  ***/
								COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY),  /*** Ver 1.9  ***/
                FRESH.FOD_CHANNEL,             /*** Ver 1.9  ***/
                COVER.FOD_CHANNEL,              /*** Ver 1.9  ***/
                FRESH.FOD_PRDCT_TYP           /*** Ver 3.7 ***/

          FROM
                FOD_FO_ORDR_DTLS FRESH,
                FOD_FO_ORDR_DTLS COVER,
                (
                  SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
                         SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, /*** Ver 3.6 ***/
                         SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY 
                  FROM   FOD_FO_ORDR_DTLS
                  WHERE  FOD_XCHNG_CD = :c_xchng_cd
                  /*** AND    FOD_PRDCT_TYP = 'U'          *** Commented In Ver 1.4 ***/
									AND    FOD_PRDCT_TYP=	:c_prd_typ				 /*** Ver 1.4 ***/
									/*** AND		 FOD_UNDRLYNG = :c_undrlyng  **  Commented in Ver 1.5 ***/
									AND     TRIM(FOD_UNDRLYNG) LIKE  :c_undrlyng   /*** Ver 1.5 ***/
                  GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
                  HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0   /** 2.8 **/ /*** Ver 3.6 ***/
                ) PSTN,
                UAC_USR_ACCNTS
          WHERE
                UAC_USR_ID = :c_user_id
          AND   FRESH.FOD_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT 
          AND   COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC
          AND   FRESH.FOD_XCHNG_CD = :c_xchng_cd
          AND   FRESH.FOD_PRDCT_TYP = :c_prd_typ
          /*** AND   FRESH.FOD_UNDRLYNG = :c_undrlyng   **  Commented in Ver 1.5 ***/
					AND   TRIM(FRESH.FOD_UNDRLYNG)  LIKE :c_undrlyng   /*** Ver 1.5 ***/
          AND   FRESH.FOD_EXER_TYP = 'E'
          AND   FRESH.FOD_FC_FLAG = 'F'
          AND   PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC 
          ORDER BY
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
								FRESH.FOD_OPT_TYP,             /*** Ver 3.5 ***/
								FRESH.FOD_STRK_PRC;            /*** Ver 3.5 ***/
        END;
      END-EXEC;

     }
		}

		/*** Ver 1.7 starts ***/
		else if( c_spn_flg != 'A' )
		{
	/****Ver 3.3 starts *****/
		if ( c_rqst_typ == 'Y' ) 
		{
      
      if (c_opr_typ == WITH_UNDERLYING)
      {

			EXEC SQL EXECUTE
			BEGIN
  		OPEN :cur_sltp_pstn FOR	
 						SELECT
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_CLNT_CTGRY,
                FRESH.FOD_ORDR_RFRNC,
                FRESH.FOD_SLTP_ORDR_RFRNC,
                FRESH.FOD_XCHNG_CD,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
                DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW),  
                FRESH.FOD_FC_FLAG,
                FRESH.FOD_EXEC_QTY,
                FRESH.FOD_EXER_TYP,
                FRESH.FOD_OPT_TYP,
                FRESH.FOD_STRK_PRC,
                COVER.FOD_ORDR_VALID_DT,
                COVER.FOD_MDFCTN_CNTR,
                (FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD),
                COVER.FOD_INDSTK,
                COVER.FOD_PIPE_ID,
                COVER.FOD_TRD_DT,
                COVER.FOD_ORDR_FLW,
                COVER.FOD_ORDR_TOT_QTY,
                COVER.FOD_LMT_RT,
                COVER.FOD_STP_LSS_TGR,
                PSTN.EXEC_QTY,
                COVER.FOD_LMT_MRKT_SL_FLG,
                COVER.FOD_ORDR_STTS,
                PSTN.OPEN_QTY,
                FRESH.FOD_ORDR_STTS,
                FRESH.FOD_LMT_RT,          
                COVER.FOD_FC_FLAG,         
                FRESH.FOD_LMT_MRKT_SL_FLG, 
                FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + 	FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY), 
                COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + 	COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY), 
                FRESH.FOD_CHANNEL,            
                COVER.FOD_CHANNEL ,
                FRESH.FOD_PRDCT_TYP           /*** Ver 3.7 ***/
          FROM
                FOD_FO_ORDR_DTLS FRESH,
                FOD_FO_ORDR_DTLS COVER,
                (
                  SELECT DECODE( FOD_FC_FLAG, 'F',FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
                     SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY 	) ) OPEN_QTY, /*** Ver 3.6 ***/
                         SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY 
                  FROM   FOD_FO_ORDR_DTLS
                  WHERE  FOD_XCHNG_CD = :c_xchng_cd
                  AND    FOD_PRDCT_TYP= :c_prd_typ
                  AND     TRIM(FOD_UNDRLYNG) =  :c_undrlyng
                  GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC )
                  HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY,'T', -1 * FOD_EXEC_QTY,FOD_EXEC_QTY ) ) != 0 /*** Ver 3.6 ***/
                ) PSTN,
								ACM_ADV_CLNT_MAP
				WHERE		ACM_ADVISOR_ID = :c_user_id
	 		    AND   ACM_ACTV_FLG='A'  
          AND   FRESH.FOD_CLM_MTCH_ACCNT = ACM_MTCH_ACCNT
          AND   COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC
          AND   FRESH.FOD_XCHNG_CD = :c_xchng_cd
          AND   FRESH.FOD_PRDCT_TYP = :c_prd_typ
          AND   TRIM(FRESH.FOD_UNDRLYNG)  = :c_undrlyng
          AND   FRESH.FOD_EXER_TYP = 'E'
          AND   FRESH.FOD_FC_FLAG = 'F'
          AND   PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC
          AND   NVL(FRESH.FOD_SPN_FLG, 'N') =:c_spn_flg
          ORDER BY
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
								FRESH.FOD_OPT_TYP,             /*** Ver 3.5 ***/
								FRESH.FOD_STRK_PRC;            /*** Ver 3.5 ***/
		    END;
		 END-EXEC;

      } 
      else if (c_opr_typ == WITHOUT_UNDERLYING)
      {

      EXEC SQL EXECUTE
      BEGIN
      OPEN :cur_sltp_pstn FOR
            SELECT
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_CLNT_CTGRY,
                FRESH.FOD_ORDR_RFRNC,
                FRESH.FOD_SLTP_ORDR_RFRNC,
                FRESH.FOD_XCHNG_CD,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
                DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW
),
                FRESH.FOD_FC_FLAG,
                FRESH.FOD_EXEC_QTY,
                FRESH.FOD_EXER_TYP,
                FRESH.FOD_OPT_TYP,
                FRESH.FOD_STRK_PRC,
                COVER.FOD_ORDR_VALID_DT,
                COVER.FOD_MDFCTN_CNTR,
                (FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD),
                COVER.FOD_INDSTK,
                COVER.FOD_PIPE_ID,
                COVER.FOD_TRD_DT,
                COVER.FOD_ORDR_FLW,
                COVER.FOD_ORDR_TOT_QTY,
                COVER.FOD_LMT_RT,
                COVER.FOD_STP_LSS_TGR,
                PSTN.EXEC_QTY,
                COVER.FOD_LMT_MRKT_SL_FLG,
                COVER.FOD_ORDR_STTS,
                PSTN.OPEN_QTY,
                FRESH.FOD_ORDR_STTS,
                FRESH.FOD_LMT_RT,
                COVER.FOD_FC_FLAG,
                FRESH.FOD_LMT_MRKT_SL_FLG,
                FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY +  FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY),
                COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY +  COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY),
                FRESH.FOD_CHANNEL,
                COVER.FOD_CHANNEL,
                FRESH.FOD_PRDCT_TYP           /*** Ver 3.7 ***/
          FROM
                FOD_FO_ORDR_DTLS FRESH,
                FOD_FO_ORDR_DTLS COVER,
                (
                  SELECT DECODE( FOD_FC_FLAG, 'F',FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
                     SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY   ) ) OPEN_QTY, /*** Ver 3.6 ***/
                         SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY
                  FROM   FOD_FO_ORDR_DTLS
                  WHERE  FOD_XCHNG_CD = :c_xchng_cd
                  AND    FOD_PRDCT_TYP= :c_prd_typ
                  GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC )
                  HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0 /*** Ver 3. 6 ***/
                ) PSTN,
   						  ACM_ADV_CLNT_MAP
 				WHERE	  ACM_ADVISOR_ID = :c_user_id
    			AND   ACM_ACTV_FLG='A'
          AND   FRESH.FOD_CLM_MTCH_ACCNT = ACM_MTCH_ACCNT
          AND   COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC
          AND   FRESH.FOD_XCHNG_CD = :c_xchng_cd
          AND   FRESH.FOD_PRDCT_TYP = :c_prd_typ
          AND   FRESH.FOD_EXER_TYP = 'E'
          AND   FRESH.FOD_FC_FLAG = 'F'
          AND   PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC
          AND   NVL(FRESH.FOD_SPN_FLG, 'N') =:c_spn_flg
          ORDER BY
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
								FRESH.FOD_OPT_TYP,             /*** Ver 3.5 ***/
								FRESH.FOD_STRK_PRC;            /*** Ver 3.5 ***/
        END;
     END-EXEC;

      }
     

			}
		/***Ver 3.3 ends****/

		else if( st_user_profile.c_user_id[0] == BPID )           /** User is DBC **/ /***Change from if to elese in Ver 3.3 ***/
     {
      EXEC SQL EXECUTE
        BEGIN
          OPEN  :cur_sltp_pstn FOR
          SELECT
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_CLNT_CTGRY,
                FRESH.FOD_ORDR_RFRNC,
                FRESH.FOD_SLTP_ORDR_RFRNC,
                FRESH.FOD_XCHNG_CD,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
                DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW),		/*** Ver 2.8 ***/
                FRESH.FOD_FC_FLAG,
                FRESH.FOD_EXEC_QTY,
                FRESH.FOD_EXER_TYP,
                FRESH.FOD_OPT_TYP,
                FRESH.FOD_STRK_PRC,
                COVER.FOD_ORDR_VALID_DT,
                COVER.FOD_MDFCTN_CNTR,
                (FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD),
                COVER.FOD_INDSTK,
                COVER.FOD_PIPE_ID,
                COVER.FOD_TRD_DT,
                COVER.FOD_ORDR_FLW,
                COVER.FOD_ORDR_TOT_QTY,
                COVER.FOD_LMT_RT,
                COVER.FOD_STP_LSS_TGR,
                PSTN.EXEC_QTY,
                COVER.FOD_LMT_MRKT_SL_FLG,
                COVER.FOD_ORDR_STTS,
                PSTN.OPEN_QTY,
                FRESH.FOD_ORDR_STTS,
								FRESH.FOD_LMT_RT,						/*** Ver 1.9  ***/
								COVER.FOD_FC_FLAG,					/*** Ver 1.9  ***/
								FRESH.FOD_LMT_MRKT_SL_FLG,	/*** Ver 1.9  ***/
								FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY), /*** Ver 1.9  ***/
								COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY), /*** Ver 1.9  ***/
                FRESH.FOD_CHANNEL,             /*** Ver 1.9  ***/
                COVER.FOD_CHANNEL,              /*** Ver 1.9  ***/
                FRESH.FOD_PRDCT_TYP           /*** Ver 3.7 ***/

          FROM
                FOD_FO_ORDR_DTLS FRESH,
                FOD_FO_ORDR_DTLS COVER,
                (
                  SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
                         SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY,  FOD_EXEC_QTY ) ) OPEN_QTY, /*** Ver 3.6 ***/
                         SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY
                  FROM   FOD_FO_ORDR_DTLS
                  WHERE  FOD_XCHNG_CD = :c_xchng_cd
                  AND    FOD_PRDCT_TYP= :c_prd_typ      
                  AND     TRIM(FOD_UNDRLYNG)  LIKE  :c_undrlyng   
                  GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
                  HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) !=  0   /** Ver 2.8 **//** Ver 3.6 ***/
                ) PSTN,
                CLM_CLNT_MSTR
          WHERE
                CLM_BP_ID = :c_user_id
          AND   CLM_ALIAS_NAME  is not NULL
          AND   FRESH.FOD_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
          AND   COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC
          AND   FRESH.FOD_XCHNG_CD = :c_xchng_cd
          AND   FRESH.FOD_PRDCT_TYP = :c_prd_typ
          AND   TRIM(FRESH.FOD_UNDRLYNG)  LIKE  :c_undrlyng   
          AND   FRESH.FOD_EXER_TYP = 'E'
          AND   FRESH.FOD_FC_FLAG = 'F'
          AND   PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC
          AND   DECODE( FRESH.FOD_SPN_FLG, 'S','S','N') =:c_spn_flg     
          ORDER BY
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
								FRESH.FOD_OPT_TYP,             /*** Ver 3.5 ***/
								FRESH.FOD_STRK_PRC;            /*** Ver 3.5 ***/
        END;
      END-EXEC;

    }             /** End of DBC user. **/

    else
    {
      EXEC SQL EXECUTE
        BEGIN
          OPEN :cur_sltp_pstn FOR
          SELECT
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_CLNT_CTGRY,
                FRESH.FOD_ORDR_RFRNC,
                FRESH.FOD_SLTP_ORDR_RFRNC,
                FRESH.FOD_XCHNG_CD,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
                DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW),		/*** Ver 2.8 ***/
                FRESH.FOD_FC_FLAG,
                FRESH.FOD_EXEC_QTY,
                FRESH.FOD_EXER_TYP,
                FRESH.FOD_OPT_TYP,
                FRESH.FOD_STRK_PRC,
                COVER.FOD_ORDR_VALID_DT,
                COVER.FOD_MDFCTN_CNTR,
                (FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD),
                COVER.FOD_INDSTK,
                COVER.FOD_PIPE_ID,
                COVER.FOD_TRD_DT,
                COVER.FOD_ORDR_FLW,
                COVER.FOD_ORDR_TOT_QTY,
                COVER.FOD_LMT_RT,
                COVER.FOD_STP_LSS_TGR,
                PSTN.EXEC_QTY,
                COVER.FOD_LMT_MRKT_SL_FLG,
                COVER.FOD_ORDR_STTS,
                PSTN.OPEN_QTY,
                FRESH.FOD_ORDR_STTS,
								FRESH.FOD_LMT_RT,						/*** Ver 1.9  ***/
								COVER.FOD_FC_FLAG,					/*** Ver 1.9  ***/
								FRESH.FOD_LMT_MRKT_SL_FLG,	/*** Ver 1.9  ***/
								FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY), /*** Ver 1.9  ***/
								COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY), /*** Ver 1.9  ***/
                FRESH.FOD_CHANNEL,             /*** Ver 1.9  ***/
                COVER.FOD_CHANNEL,              /*** Ver 1.9  ***/
                FRESH.FOD_PRDCT_TYP           /*** Ver 3.7 ***/
          FROM
                FOD_FO_ORDR_DTLS FRESH,
                FOD_FO_ORDR_DTLS COVER,
                (
                  SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
                         SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, /*** Ver 3.6 ***/
                         SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY
                  FROM   FOD_FO_ORDR_DTLS
                  WHERE  FOD_XCHNG_CD = :c_xchng_cd
                  AND    FOD_PRDCT_TYP= :c_prd_typ         
                  AND     TRIM(FOD_UNDRLYNG) LIKE  :c_undrlyng   
                  GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
                  HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY,  FOD_EXEC_QTY ) ) != 0    /** Ver 2.8 **/ /*** Ver 3.6 ***/
                ) PSTN,
                UAC_USR_ACCNTS
          WHERE
                UAC_USR_ID = :c_user_id
          AND   FRESH.FOD_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
          AND   COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC
          AND   FRESH.FOD_XCHNG_CD = :c_xchng_cd
          AND   FRESH.FOD_PRDCT_TYP = :c_prd_typ
          AND   TRIM(FRESH.FOD_UNDRLYNG)  LIKE :c_undrlyng   
          AND   FRESH.FOD_EXER_TYP = 'E'
          AND   FRESH.FOD_FC_FLAG = 'F'
          AND   PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC
          AND   DECODE( FRESH.FOD_SPN_FLG, 'S','S','N') =:c_spn_flg     
          ORDER BY
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
								FRESH.FOD_OPT_TYP,             /*** Ver 3.5 ***/
								FRESH.FOD_STRK_PRC;            /*** Ver 3.5 ***/
        END;
      END-EXEC;

     }	
		}
		/*** Ver 1.7 ends ***/
		
		if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31050", SQLMSG, c_errmsg  );
      EXEC SQL CLOSE :cur_sltp_pstn;
      EXEC SQL FREE :cur_sltp_pstn;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }		
		
	}/* End of - all match accounts */

	else
  {
    if( DEBUG_MSG_LVL_3 ) 
		{
      fn_userlog(c_ServiceName,"INSIDE SINGLE MTCH ACCNNT");
    }

/****if ( c_opr_typ == WITH_UNDERLYING ) **Commented in Ver  3.3**/
 		if ( c_opr_typ == WITH_UNDERLYING &&  c_rqst_typ == 'N' )  /**** Ver 3.3 ****/
    {
      if( DEBUG_MSG_LVL_3 ) 
			{
        fn_userlog( c_ServiceName,"INSIDE WITH_UNDERLYING :%s:", c_undrlyng );
      }
	

	
			EXEC SQL EXECUTE
        BEGIN
          OPEN :cur_sltp_pstn FOR
					SELECT
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_CLNT_CTGRY,
                FRESH.FOD_ORDR_RFRNC,
                FRESH.FOD_SLTP_ORDR_RFRNC,
                FRESH.FOD_XCHNG_CD,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
                DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW),		/*** Ver 2.8 ***/
                FRESH.FOD_FC_FLAG,
								FRESH.FOD_EXEC_QTY,
								FRESH.FOD_EXER_TYP,
                FRESH.FOD_OPT_TYP,
                FRESH.FOD_STRK_PRC,
								COVER.FOD_ORDR_VALID_DT,
                COVER.FOD_MDFCTN_CNTR,
                (FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD),
                COVER.FOD_INDSTK,
                COVER.FOD_PIPE_ID,
                COVER.FOD_TRD_DT,
                COVER.FOD_ORDR_FLW,
                COVER.FOD_ORDR_TOT_QTY,
                COVER.FOD_LMT_RT,
                COVER.FOD_STP_LSS_TGR,
                PSTN.EXEC_QTY, 
                COVER.FOD_LMT_MRKT_SL_FLG,
                COVER.FOD_ORDR_STTS,
                PSTN.OPEN_QTY, 
								FRESH.FOD_ORDR_STTS,
								FRESH.FOD_LMT_RT,						/*** Ver 1.9  ***/
								COVER.FOD_FC_FLAG,					/*** Ver 1.9  ***/
								FRESH.FOD_LMT_MRKT_SL_FLG,	/*** Ver 1.9  ***/
								FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY), /*** Ver 1.9  ***/
								COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY),  /*** Ver 1.9  ***/
                FRESH.FOD_CHANNEL,             /*** Ver 1.9  ***/
                COVER.FOD_CHANNEL,              /*** Ver 1.9  ***/
                FRESH.FOD_PRDCT_TYP           /*** Ver 3.7 ***/
          FROM
                FOD_FO_ORDR_DTLS FRESH,
                FOD_FO_ORDR_DTLS COVER,
								(
                  SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
                         SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY,'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, /*** Ver 3.6 ***/
                         SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY
                  FROM   FOD_FO_ORDR_DTLS
                  WHERE  FOD_XCHNG_CD = :c_xchng_cd
                  /*** AND    FOD_PRDCT_TYP = 'U'						*** Commented In Ver 1.4 ***/
									AND    FOD_PRDCT_TYP= :c_prd_typ         	/*** Ver 1.4 ***/
									AND		 FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
                  AND    FOD_UNDRLYNG = :c_undrlyng
                  GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
                  HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0   /** Ver 2.8 **/ /*Ver 3.6 ***/
                ) PSTN
          WHERE
             		FRESH.FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
          AND   COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC
          AND   FRESH.FOD_XCHNG_CD = :c_xchng_cd
          AND   FRESH.FOD_PRDCT_TYP = :c_prd_typ
          AND   FRESH.FOD_UNDRLYNG = :c_undrlyng
          AND   FRESH.FOD_EXER_TYP = 'E'
          AND   FRESH.FOD_FC_FLAG = 'F'
          AND   PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC 
          ORDER BY
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
								FRESH.FOD_OPT_TYP,             /*** Ver 3.5 ***/
								FRESH.FOD_STRK_PRC;            /*** Ver 3.5 ***/
        END;
      END-EXEC;

		}

/****Ver 3.3 starts *****/
	
		else if ( c_opr_typ == WITH_UNDERLYING &&  c_rqst_typ == 'Y' )	
					{

        fn_userlog(c_ServiceName,"Inside WITH_UNDERLYING and c_rqst_typ == 'Y'" );
				EXEC SQL EXECUTE
				BEGIN
 				OPEN :cur_sltp_pstn FOR
				SELECT
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_CLNT_CTGRY,
                FRESH.FOD_ORDR_RFRNC,
                FRESH.FOD_SLTP_ORDR_RFRNC,
                FRESH.FOD_XCHNG_CD,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
                DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW),  
                FRESH.FOD_FC_FLAG,
                FRESH.FOD_EXEC_QTY,
                FRESH.FOD_EXER_TYP,
                FRESH.FOD_OPT_TYP,
                FRESH.FOD_STRK_PRC,
                COVER.FOD_ORDR_VALID_DT,
                COVER.FOD_MDFCTN_CNTR,
                (FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD),
                COVER.FOD_INDSTK,
                COVER.FOD_PIPE_ID,
                COVER.FOD_TRD_DT,
                COVER.FOD_ORDR_FLW,
                COVER.FOD_ORDR_TOT_QTY,
                COVER.FOD_LMT_RT,
                COVER.FOD_STP_LSS_TGR,
                PSTN.EXEC_QTY,
                COVER.FOD_LMT_MRKT_SL_FLG,
                COVER.FOD_ORDR_STTS,
                PSTN.OPEN_QTY,
                FRESH.FOD_ORDR_STTS,
                FRESH.FOD_LMT_RT,          
                COVER.FOD_FC_FLAG,         
                FRESH.FOD_LMT_MRKT_SL_FLG, 
                FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + 	 	FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY), 
                COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + 	COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY), 
                FRESH.FOD_CHANNEL,             
                COVER.FOD_CHANNEL,
                FRESH.FOD_PRDCT_TYP           /*** Ver 3.7 ***/            
          FROM
                FOD_FO_ORDR_DTLS FRESH,
                FOD_FO_ORDR_DTLS COVER,
                (
             SELECT DECODE( FOD_FC_FLAG, 'F', 	FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC, SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY,'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) )  OPEN_QTY, /*** ver 3.6 ***/
                  SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY
                  FROM   FOD_FO_ORDR_DTLS
                  WHERE  FOD_XCHNG_CD = :c_xchng_cd
                  AND    FOD_PRDCT_TYP= :c_prd_typ       
                  AND    FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
                  AND    FOD_UNDRLYNG = :c_undrlyng
                  GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, 	FOD_SLTP_ORDR_RFRNC )
                  HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, 	FOD_EXEC_QTY ) ) != 0  /*** Ver 3.6 ***/
                ) PSTN,
							ACM_ADV_CLNT_MAP
							WHERE
							ACM_ADVISOR_ID = :c_user_id
						AND 	ACM_ACTV_FLG ='A'  
					  AND   FRESH.FOD_CLM_MTCH_ACCNT = ACM_MTCH_ACCNT
						AND   FRESH.FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
						AND   COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC
						AND   FRESH.FOD_XCHNG_CD = :c_xchng_cd
						AND   FRESH.FOD_PRDCT_TYP = :c_prd_typ
						AND   FRESH.FOD_UNDRLYNG = :c_undrlyng
						AND   FRESH.FOD_EXER_TYP = 'E'
						AND   FRESH.FOD_FC_FLAG = 'F'
						AND   PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC
						AND   NVL(FRESH.FOD_SPN_FLG, 'N') = :c_spn_flg
							ORDER BY
    				FRESH.FOD_CLM_MTCH_ACCNT,
    				FRESH.FOD_UNDRLYNG,
    				FRESH.FOD_EXPRY_DT,
						FRESH.FOD_OPT_TYP,             /*** Ver 3.5 ***/
						FRESH.FOD_STRK_PRC;            /*** Ver 3.5 ***/
		    	END;
	 		END-EXEC;	
					}
	/****Ver 3.3 ends ******/	
		
	/**		else if ( c_opr_typ == WITHOUT_UNDERLYING ) ****commented in ver 3.3 ****/
		else if ( c_opr_typ == WITHOUT_UNDERLYING  &&  c_rqst_typ == 'N' ) /***Ver 3.3 ***/
    {
      if( DEBUG_MSG_LVL_3 ) 
			{
        fn_userlog( c_ServiceName,"INSIDE WITHOUT_UNDERLYING :%s:", c_undrlyng );
      }

			/* Ver 3.9 Start */
			if( c_flash_prd_typ == 'X')
			{

				i_flash_mode=0;
				EXEC SQL SELECT 'T',1 into :c_flash_prd_typ,:i_flash_mode from FFS_FO_FLASH_SETTING 
				WHERE FFS_CLM_MTCH_ACCNT=:c_mtch_accnt_no and FFS_PRDCT_TYP in ('O','F') and NVL(FFS_MARGIN,0)=-1;

				if(SQLCODE != 0)
				{
					if(SQLCODE == NO_DATA_FOUND )
					{
						i_flash_mode=0;
						c_flash_prd_typ='X';
					}
					else
					{
					fn_errlog( c_ServiceName, "S31055", SQLMSG, c_errmsg  );
					EXEC SQL FREE :cur_sltp_pstn;
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
				}
			}
			/* Ver 3.9 End*/

			if ( c_flash_prd_typ =='X' )  /*** 3.7 Start ***/
      {
    		fn_userlog( c_ServiceName,"Insode c_flash_prd_typ X"); 
     EXEC SQL  EXECUTE
       BEGIN
          OPEN :cur_sltp_pstn FOR
          SELECT
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_CLNT_CTGRY,
                FRESH.FOD_ORDR_RFRNC,
                FRESH.FOD_SLTP_ORDR_RFRNC,
                FRESH.FOD_XCHNG_CD,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
                DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW),   /*** Ver 2.8 ***/
                FRESH.FOD_FC_FLAG,
                FRESH.FOD_EXEC_QTY,
                FRESH.FOD_EXER_TYP,
                FRESH.FOD_OPT_TYP,
                FRESH.FOD_STRK_PRC,
                COVER.FOD_ORDR_VALID_DT,
                COVER.FOD_MDFCTN_CNTR,
                (FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD),
                FRESH.FOD_INDSTK,
                COVER.FOD_PIPE_ID,
                COVER.FOD_TRD_DT,
                COVER.FOD_ORDR_FLW,
                COVER.FOD_ORDR_TOT_QTY,
                COVER.FOD_LMT_RT,
                COVER.FOD_STP_LSS_TGR,
                PSTN.EXEC_QTY,
                COVER.FOD_LMT_MRKT_SL_FLG,
                COVER.FOD_ORDR_STTS,
                PSTN.OPEN_QTY,
                FRESH.FOD_ORDR_STTS,
                FRESH.FOD_LMT_RT,           /*** Ver 1.9  ***/
                COVER.FOD_FC_FLAG,          /*** Ver 1.9  ***/
                FRESH.FOD_LMT_MRKT_SL_FLG,  /*** Ver 1.9  ***/
                FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY), /*** Ver 1.9  ***/
                COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY), /*** Ver 1.9  ***/
                FRESH.FOD_CHANNEL,             /*** Ver 1.9  ***/
                COVER.FOD_CHANNEL,              /*** Ver 1.9  ***/
                FRESH.FOD_PRDCT_TYP           /*** Ver 3.7 ***/
          FROM
                FOD_FO_ORDR_DTLS FRESH,
                FOD_FO_ORDR_DTLS COVER,
                 (
                  SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
                         SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, /*** Ver 3.6 ***/
                         SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY
                  FROM   FOD_FO_ORDR_DTLS,FFS_FO_FLASH_SETTING
                  WHERE  FOD_XCHNG_CD = :c_xchng_cd 
									AND 	FFS_CLM_MTCH_ACCNT  = FOD_CLM_MTCH_ACCNT
                  AND   FOD_PRDCT_TYP  in ('F','O','I')			/** Ver 3.8 added "I"**/
                  AND   FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
									AND   FFS_CLM_MTCH_ACCNT=FOD_CLM_MTCH_ACCNT AND FFS_PRDCT_TYP=FOD_PRDCT_TYP AND FFS_UNDRLYNG=FOD_UNDRLYNG
									AND   FFS_EXPRY_DT=FOD_EXPRY_DT AND FFS_STRK_PRC=FOD_STRK_PRC AND FFS_OPT_TYP=FOD_OPT_TYP
                  GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
                  HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0   /** Ver 2.8 **/ /*** Ver 3.6 ***/
                ) PSTN
          WHERE
                FRESH.FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
          AND   COVER.FOD_ORDR_RFRNC(+) = FRESH.FOD_SLTP_ORDR_RFRNC
          AND   FRESH.FOD_XCHNG_CD = :c_xchng_cd
          AND   FRESH.FOD_PRDCT_TYP in ('F','O','I')  /** Ver 3.8 added "I"**/
          AND   FRESH.FOD_EXER_TYP = 'E'
          AND   FRESH.FOD_FC_FLAG = 'F'
          AND   FRESH.FOD_SOURCE_FLG = 'F' /*** Flash trade ***/
          AND   PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC
          ORDER BY 
                   FRESH.FOD_CLM_MTCH_ACCNT,
                   FRESH.FOD_UNDRLYNG,
                   FRESH.FOD_EXPRY_DT,
                   FRESH.FOD_OPT_TYP,             /*** Ver 3.5 ***/
                   FRESH.FOD_STRK_PRC; 
        END;
      END-EXEC;

      } /* 3.7 End */
      /*Ver 3.9 Start*/
      else if ( c_flash_prd_typ =='T' )  
      {
        fn_userlog( c_ServiceName,"Insode c_flash_prd_typ T");
     EXEC SQL  EXECUTE
				 BEGIN
          OPEN :cur_sltp_pstn FOR
          SELECT
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_CLNT_CTGRY,
                FRESH.FOD_ORDR_RFRNC,
                FRESH.FOD_SLTP_ORDR_RFRNC,
                FRESH.FOD_XCHNG_CD,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
                DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW),   
                FRESH.FOD_FC_FLAG,
                FRESH.FOD_EXEC_QTY,
                FRESH.FOD_EXER_TYP,
                FRESH.FOD_OPT_TYP,
                FRESH.FOD_STRK_PRC,
                COVER.FOD_ORDR_VALID_DT,
                COVER.FOD_MDFCTN_CNTR,
                (FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD),
                FRESH.FOD_INDSTK,
                COVER.FOD_PIPE_ID,
                COVER.FOD_TRD_DT,
                COVER.FOD_ORDR_FLW,
                COVER.FOD_ORDR_TOT_QTY,
			        	COVER.FOD_LMT_RT,
                COVER.FOD_STP_LSS_TGR,
                PSTN.EXEC_QTY,
                COVER.FOD_LMT_MRKT_SL_FLG,
                COVER.FOD_ORDR_STTS,
                PSTN.OPEN_QTY,
                FRESH.FOD_ORDR_STTS,
                FRESH.FOD_LMT_RT,           
                COVER.FOD_FC_FLAG,          
                FRESH.FOD_LMT_MRKT_SL_FLG,  
                FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY), 
                COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY), 
                FRESH.FOD_CHANNEL,             
                COVER.FOD_CHANNEL,              
                FRESH.FOD_PRDCT_TYP          
          FROM
                FO_ORDR_DTLS_VW FRESH,
                FO_ORDR_DTLS_VW COVER,
                 (
                  SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
                         SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, 
                         SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY
                  FROM   FO_ORDR_DTLS_VW
                  WHERE  FOD_XCHNG_CD = :c_xchng_cd
                  AND  	FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no 
		  AND   (FOD_XCHNG_CD,FOD_CLM_MTCH_ACCNT,FOD_PRDCT_TYP,FOD_UNDRLYNG,FOD_EXPRY_DT,FOD_OPT_TYP,FOD_STRK_PRC) not in (select FCO_XCHNG_CD,FCO_CLM_MTCH_ACCNT,FCO_PRDCT_TYP,FCO_UNDRLYNG,FCO_EXPRY_DT,FCO_OPT_TYP,FCO_STRK_PRC FROM FCO_FO_FCLSOUT WHERE FCO_CLM_MTCH_ACCNT=:c_mtch_accnt_no and FCO_XCHNG_CD=:c_xchng_cd and TRUNC(FCO_CLS_TM)=trunc(sysdate))
                  GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
                  HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0  
                ) PSTN
          WHERE
                FRESH.FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
          AND   COVER.FOD_ORDR_RFRNC(+) = FRESH.FOD_SLTP_ORDR_RFRNC
          AND   FRESH.FOD_XCHNG_CD = :c_xchng_cd
          AND   FRESH.FOD_PRDCT_TYP in ('F','O')  
          AND   FRESH.FOD_EXER_TYP = 'E'
          AND   FRESH.FOD_FC_FLAG = 'F'
		  		AND   FRESH.FOD_SOURCE_FLG = 'F' 
          AND   PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC;
				END;
      END-EXEC;
      } 
      /*Ver 3.9 End*/
     else
      {
		EXEC SQL  EXECUTE
       BEGIN
					OPEN :cur_sltp_pstn FOR
					SELECT
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_CLNT_CTGRY,
                FRESH.FOD_ORDR_RFRNC,
                FRESH.FOD_SLTP_ORDR_RFRNC,
                FRESH.FOD_XCHNG_CD,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
                DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW),		/*** Ver 2.8 ***/
                FRESH.FOD_FC_FLAG,
								FRESH.FOD_EXEC_QTY,
								FRESH.FOD_EXER_TYP,
                FRESH.FOD_OPT_TYP,
                FRESH.FOD_STRK_PRC,
								COVER.FOD_ORDR_VALID_DT,
                COVER.FOD_MDFCTN_CNTR,
                (FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD),
                COVER.FOD_INDSTK,
                COVER.FOD_PIPE_ID,
                COVER.FOD_TRD_DT,
                COVER.FOD_ORDR_FLW,
                COVER.FOD_ORDR_TOT_QTY,
                COVER.FOD_LMT_RT,
                COVER.FOD_STP_LSS_TGR,
                PSTN.EXEC_QTY, 
                COVER.FOD_LMT_MRKT_SL_FLG,
                COVER.FOD_ORDR_STTS,
                PSTN.OPEN_QTY, 
								FRESH.FOD_ORDR_STTS,
								FRESH.FOD_LMT_RT,						/*** Ver 1.9  ***/
								COVER.FOD_FC_FLAG,					/*** Ver 1.9  ***/
								FRESH.FOD_LMT_MRKT_SL_FLG,	/*** Ver 1.9  ***/
								FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY), /*** Ver 1.9  ***/
								COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY), /*** Ver 1.9  ***/
                FRESH.FOD_CHANNEL,             /*** Ver 1.9  ***/
                COVER.FOD_CHANNEL,              /*** Ver 1.9  ***/
                FRESH.FOD_PRDCT_TYP           /*** Ver 3.7 ***/
          FROM
                FOD_FO_ORDR_DTLS FRESH,
                FOD_FO_ORDR_DTLS COVER,
								 (
                  SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
                         SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, /*** Ver 3.6 ***/
                         SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY
                  FROM   FOD_FO_ORDR_DTLS
                  WHERE  FOD_XCHNG_CD = :c_xchng_cd
                  /*** AND    FOD_PRDCT_TYP = 'U'							 *** Commented In Ver 1.4 ***/
									AND    FOD_PRDCT_TYP= :c_prd_typ         /*** Ver 1.4 ***/
									AND 	 FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
                  GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
                  HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0   /** Ver 2.8 **/ /*** Ver 3.6 ***/
                ) PSTN
          WHERE
          		  FRESH.FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
          AND   COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC
          AND   FRESH.FOD_XCHNG_CD = :c_xchng_cd
          AND   FRESH.FOD_PRDCT_TYP = :c_prd_typ
          AND   FRESH.FOD_EXER_TYP = 'E'
          AND   FRESH.FOD_FC_FLAG = 'F'
          AND   PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC 
          ORDER BY
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
								FRESH.FOD_OPT_TYP,             /*** Ver 3.5 ***/
								FRESH.FOD_STRK_PRC;            /*** Ver 3.5 ***/
        END;
      END-EXEC;
	
		}

		}
		/***Ver 3.3 starts ***/

				else if ( c_opr_typ == WITHOUT_UNDERLYING &&  c_rqst_typ == 'Y' )	
				{

          fn_userlog(c_ServiceName,"Inside WITHOUT_UNDERLYING and c_rqst_typ == 'Y'" );
          fn_userlog(c_ServiceName,"c_mtch_accnt_no :%s:",c_mtch_accnt_no );
          fn_userlog(c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd);
          fn_userlog(c_ServiceName,"c_prd_typ :%c:",c_prd_typ); 
          fn_userlog(c_ServiceName,"c_user_id :%s:",c_user_id);
					
					EXEC SQL EXECUTE
					BEGIN
  				OPEN :cur_sltp_pstn FOR
					SELECT
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_CLNT_CTGRY,
                FRESH.FOD_ORDR_RFRNC,
                FRESH.FOD_SLTP_ORDR_RFRNC,
                FRESH.FOD_XCHNG_CD,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
                DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW),  
                FRESH.FOD_FC_FLAG,
                FRESH.FOD_EXEC_QTY,
                FRESH.FOD_EXER_TYP,
                FRESH.FOD_OPT_TYP,
                FRESH.FOD_STRK_PRC,
                COVER.FOD_ORDR_VALID_DT,
                COVER.FOD_MDFCTN_CNTR,
                (FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD),
                COVER.FOD_INDSTK,
                COVER.FOD_PIPE_ID,
                COVER.FOD_TRD_DT,
                COVER.FOD_ORDR_FLW,
                COVER.FOD_ORDR_TOT_QTY,
                COVER.FOD_LMT_RT,
                COVER.FOD_STP_LSS_TGR,
                PSTN.EXEC_QTY,
                COVER.FOD_LMT_MRKT_SL_FLG,
                COVER.FOD_ORDR_STTS,
                PSTN.OPEN_QTY,
                FRESH.FOD_ORDR_STTS,
                FRESH.FOD_LMT_RT,           
                COVER.FOD_FC_FLAG,         
                FRESH.FOD_LMT_MRKT_SL_FLG, 
                FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + 	FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY), 
                COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + 	COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY), 
                FRESH.FOD_CHANNEL,             
                COVER.FOD_CHANNEL, 
                FRESH.FOD_PRDCT_TYP           /*** Ver 3.7 ***/
          FROM
                FOD_FO_ORDR_DTLS FRESH,
                FOD_FO_ORDR_DTLS COVER,
                 (
                 SELECT DECODE( FOD_FC_FLAG, 'F', 			 				      FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
                 SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY,'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, /*** Ver 3.6 ***/
                 SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY
                 FROM   FOD_FO_ORDR_DTLS
                 WHERE  FOD_XCHNG_CD = :c_xchng_cd
                 AND    FOD_PRDCT_TYP= :c_prd_typ  
                 AND    FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
                 GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,  		 	      FOD_SLTP_ORDR_RFRNC )
                 HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY,'T', -1 * FOD_EXEC_QTY, 	FOD_EXEC_QTY ) ) != 0   /*** Ver 3.6 ***/
                ) PSTN,
								ACM_ADV_CLNT_MAP
				WHERE 	ACM_ADVISOR_ID = :c_user_id
					AND   ACM_ACTV_FLG='A'  
          AND   FRESH.FOD_CLM_MTCH_ACCNT = ACM_MTCH_ACCNT
          AND   FRESH.FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
          AND   COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC
          AND   FRESH.FOD_XCHNG_CD = :c_xchng_cd
          AND   FRESH.FOD_PRDCT_TYP = :c_prd_typ
          AND   FRESH.FOD_EXER_TYP = 'E'
          AND   FRESH.FOD_FC_FLAG = 'F'
          AND   PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC
					AND   NVL(FRESH.FOD_SPN_FLG, 'N') =:c_spn_flg
          ORDER BY
                FRESH.FOD_CLM_MTCH_ACCNT,
                FRESH.FOD_UNDRLYNG,
                FRESH.FOD_EXPRY_DT,
								FRESH.FOD_OPT_TYP,             /*** Ver 3.5 ***/
								FRESH.FOD_STRK_PRC;            /*** Ver 3.5 ***/
				    END;
			 END-EXEC;
				}

		/***Ver 3.3 ends ****/
	
		else
    {
      EXEC SQL FREE :cur_sltp_pstn;
			fn_errlog( c_ServiceName, "S31060", "Invalid Option Type", c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	
		if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31065", SQLMSG, c_errmsg  );
      EXEC SQL CLOSE :cur_sltp_pstn;
      EXEC SQL FREE :cur_sltp_pstn;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	
	}
		
	if ( SQLCODE != 0 )
  {
		fn_userlog( c_ServiceName,"Invalir user id - match account combination.");
    fn_errlog( c_ServiceName, "S31070", SQLMSG, c_errmsg  );
    EXEC SQL CLOSE :cur_sltp_pstn;
		EXEC SQL FREE :cur_sltp_pstn;
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	
	tpfree ( ( char * )ptr_fml_Obuf); 

	/**Commented in ver 1.2 ...Uncommented in Ver 1.3 **/	

  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*10 );		/**VER 1.1, increased from 3 to 10 **/

	/*** Commented in Ver 1.3 
	ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*30 );    **VER 1.2, increased from 3 to 10 **/

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31075", TPMSG, c_errmsg  );
    EXEC SQL CLOSE :cur_sltp_pstn;
    EXEC SQL FREE :cur_sltp_pstn;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	
	/*** Ver 1.3 starts ***/
	i_buf_len = sizeof(c_mtch_accnt_no) +
							sizeof(c_clnt_ctgry) +
							sizeof(c_ordr_rfrnc) +
							sizeof(c_sltp_ordr_rfrnc) +
							sizeof(c_xchng_cd) +
							sizeof(c_undrlyng) +
							sizeof(c_expry_dt) +
							sizeof(c_frsh_ordr_flw) +
							sizeof(c_fc_flg) +
							sizeof(l_frsh_exctd_qty) +
							sizeof(c_exer_typ) +
							sizeof(c_opt_typ) +
							sizeof(l_strike_prc) +
							sizeof(c_valid_date) +
							sizeof(l_mdfctn_cntr) +
							sizeof(d_utrd_mrgn) +
							sizeof(c_ctgry_indstk) +
							sizeof(c_pipe_id) +
							sizeof(c_trd_dt) +
							sizeof(c_cvr_ordr_flw) +
							sizeof(l_cvr_ordr_tot_qty) +
							sizeof(l_lmt_rt) +
							sizeof(li_stp_lss_tgr_prc) +
							sizeof(l_cvr_exctd_qty) +
							sizeof(c_slm_flg) +
							sizeof(c_cvr_ordr_stts) +
							sizeof(l_opnpstn_qty) +
							sizeof(c_frsh_ordr_stts) +
							sizeof(l_frsh_lmt_rt) +				/*** Ver 1.9 ***/
							sizeof(c_cvr_fc_flg) +				/*** Ver 1.9 ***/
							sizeof(c_frsh_slm_flg) +			/*** Ver 1.9 ***/
							sizeof(l_frsh_unexec_qty) +		/*** Ver 1.9 ***/
							sizeof(l_cvr_unexec_qty) +		/*** Ver 1.9 ***/
							sizeof(c_frsh_ordr_channel) + /*** Ver 1.9 ***/
							sizeof(c_cvr_ordr_channel) +  /*** Ver 1.9 ***/
              sizeof(l_spot_prc)            /*** Ver 2.9 ***/
							+ 512;
	/*** Ver 1.3 ends ***/

 	i_counter = 1 ;

  i_cntr = 0 ; 

	/*** Added for Ver 2.2 ***/

	EXEC SQL
		SELECT PAR_BULLET_TIME_INTRVL
		INTO	:c_bullet_param
		FROM	PAR_SYSTM_PRMTR;

	if( SQLCODE != 0 )
	{
		fn_errlog( c_ServiceName, "S31080", SQLMSG, c_errmsg  );
		EXEC SQL CLOSE :cur_sltp_pstn;
		EXEC SQL FREE :cur_sltp_pstn;
		tpfree ( ( char * ) ptr_fml_Obuf );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	SETLEN(c_bullet_param);

	/*** End for Ver 2.2 ***/

	for ( ; ; )
  { 
		l_cvr_ordr_tot_qty = 0;
		l_lmt_rt = 0;
		li_stp_lss_tgr_prc = 0;
		l_cvr_exctd_qty = 0;
		l_frsh_exctd_qty = 0;
		l_opnpstn_qty = 0;
		l_mdfctn_cntr = 0;
		l_strike_prc= 0;

		MEMSET(c_bullet_frm_time);	/** Ver 2.2 **/
		MEMSET(c_bullet_end_time);	/** Ver 2.2 **/

		EXEC SQL FETCH 	:cur_sltp_pstn
						 INTO 	:c_mtch_accnt_no,    
										:c_clnt_ctgry,           
										:c_ordr_rfrnc,       
										:c_sltp_ordr_rfrnc,  
										:c_xchng_cd,          
										:c_undrlyng,          
										:c_expry_dt,      
										:c_frsh_ordr_flw,        
										:c_fc_flg,
										:l_frsh_exctd_qty,
										:c_exer_typ,
										:c_opt_typ,
										:l_strike_prc,
										:c_valid_date,
										:l_mdfctn_cntr,	
										:d_utrd_mrgn,    
										:c_ctgry_indstk,         
										:c_pipe_id,          
										:c_trd_dt,        
										:c_cvr_ordr_flw,         
										:l_cvr_ordr_tot_qty, 
										:l_lmt_rt,       
										:li_stp_lss_tgr_prc, 
										:l_cvr_exctd_qty,   
										:c_slm_flg,              
										:c_cvr_ordr_stts,        
										:l_opnpstn_qty,
										:c_frsh_ordr_stts,
										:l_frsh_lmt_rt,				/*** Ver 1.9  ***/
										:c_cvr_fc_flg,				/*** Ver 1.9  ***/
										:c_frsh_slm_flg,			/*** Ver 1.9  ***/
										:l_frsh_unexec_qty,		/*** Ver 1.9  ***/
										:l_cvr_unexec_qty,		/*** Ver 1.9  ***/
                    :c_frsh_ordr_channel,  /*** Ver 1.9  ***/
                    :c_cvr_ordr_channel,   /*** Ver 1.9  ***/
										:c_prd_typ;   					/*** Ver 3.7 ***/

		SETNULL(c_expry_dt);      
		SETNULL(c_trd_dt);

		if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog(c_ServiceName,"@@@@@@@@@@@@@@@@ FETCH RECORD @@@@@@@@@@@@@@@@:");
      fn_userlog(c_ServiceName,":c_mtch_accnt_no :%s:",c_mtch_accnt_no);
      fn_userlog(c_ServiceName,":c_clnt_ctgry :%c:",c_clnt_ctgry);
      fn_userlog(c_ServiceName,":c_ordr_rfrnc :%s:",c_ordr_rfrnc);
      fn_userlog(c_ServiceName,":c_sltp_ordr_rfrnc  :%s:",c_sltp_ordr_rfrnc);
      fn_userlog(c_ServiceName,":c_xchng_cd :%s:",c_xchng_cd);
      fn_userlog(c_ServiceName,":c_undrlyng :%s:",c_undrlyng);
      fn_userlog(c_ServiceName,":c_expry_dt :%s:",(char *)c_expry_dt.arr);
      fn_userlog(c_ServiceName,":c_frsh_ordr_flw :%c:",c_frsh_ordr_flw);
      fn_userlog(c_ServiceName,":c_fc_flg :%c:",c_fc_flg);
      fn_userlog(c_ServiceName,":c_exer_typ :%c:",c_exer_typ);
      fn_userlog(c_ServiceName,":c_opt_typ :%c:",c_opt_typ);
      fn_userlog(c_ServiceName,":l_strike_prc :%ld:",l_strike_prc);
			fn_userlog(c_ServiceName,":l_opnpstn_qty :%ld:",l_opnpstn_qty);	/*** Ver 1.3 ***/
      fn_userlog(c_ServiceName,":l_cvr_ordr_tot_qty :%ld:",l_cvr_ordr_tot_qty);  /*** Ver 1.7 ***/
      fn_userlog(c_ServiceName,":c_flash_prd_typ:%c:",c_flash_prd_typ);  /*** Ver 3.7 ***/
      fn_userlog(c_ServiceName,":c_prd_typ:%c:",c_prd_typ);  /*** Ver 3.7 ***/
		} /*** Ver 1.3 ***/

		if( DEBUG_MSG_LVL_5 )	/*** Ver 1.3 ***/
		{
      fn_userlog(c_ServiceName,":l_mdfctn_cntr :%ld:",l_mdfctn_cntr);
      fn_userlog(c_ServiceName,":l_frsh_exctd_qty:%ld:",l_frsh_exctd_qty);
      fn_userlog(c_ServiceName,":d_utrd_mrgn  :%lf:",d_utrd_mrgn);
      fn_userlog(c_ServiceName,":c_ctgry_indstk :%c:",c_ctgry_indstk);
      fn_userlog(c_ServiceName,":c_pipe_id  :%s:",c_pipe_id);
      fn_userlog(c_ServiceName,":c_trd_dt :%s:", (char *) c_trd_dt.arr);
      fn_userlog(c_ServiceName,":c_cvr_ordr_flw :%c:",c_cvr_ordr_flw);
      fn_userlog(c_ServiceName,":l_cvr_ordr_tot_qty :%ld:",l_cvr_ordr_tot_qty);
      fn_userlog(c_ServiceName,":l_lmt_rt :%ld:",l_lmt_rt);
      fn_userlog(c_ServiceName,":li_stp_lss_tgr_prc :%ld:",li_stp_lss_tgr_prc);
      fn_userlog(c_ServiceName,":l_cvr_exctd_qty :%ld:",l_cvr_exctd_qty);
      fn_userlog(c_ServiceName,":c_slm_flg :%c:",c_slm_flg);
      fn_userlog(c_ServiceName,":c_cvr_ordr_stts :%c:",c_cvr_ordr_stts);
      fn_userlog(c_ServiceName,":l_opnpstn_qty :%ld:",l_opnpstn_qty);
      fn_userlog(c_ServiceName,"i_tot_rec      :%d:",i_tot_rec);
      fn_userlog(c_ServiceName,":c_frsh_ordr_stts :%c:",c_frsh_ordr_stts);
			fn_userlog(c_ServiceName,"i_buf_len = :%d:",i_buf_len);	/*** Ver 1.3 ***/
			fn_userlog(c_ServiceName,"Fneeded32= :%d: | Funused32 = :%d:",Fneeded32(1,i_buf_len),Funused32(ptr_fml_Obuf)); /*** Ver 1.3 ***/
    }
		
	 if(Fneeded32(1,i_buf_len) > Funused32(ptr_fml_Obuf))		/*** Ver 1.3 ***/
	 {
	    if( DEBUG_MSG_LVL_3 ) {
			fn_userlog(c_ServiceName,"Reallocating Output buffer...");
			} /*** Ver 2.6 ***/
			ptr_fml_Obuf = (FBFR32 *)tprealloc((char *)ptr_fml_Obuf,(Fsizeof32(ptr_fml_Obuf) + MIN_FML_BUF_LEN * 10));
			if(ptr_fml_Obuf == NULL)
			{
				fn_errlog( c_ServiceName, "S31085", TPMSG, c_errmsg  );
				EXEC SQL CLOSE :cur_sltp_pstn;
				EXEC SQL FREE :cur_sltp_pstn;
				tpfree ( ( char * ) ptr_fml_Obuf );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		  if( DEBUG_MSG_LVL_3 ) {  /*** ver 2.7, debug changed from 0 to 3 ***/
			fn_userlog(c_ServiceName,"After reallocation : Fneeded32= :%d: | Funused32 = :%d:",Fneeded32(1,i_buf_len),Funused32(ptr_fml_Obuf));
			}	/*** Ver 2.6 ***/
	 }

	 if( DEBUG_MSG_LVL_5 )	/*** Ver 1.3 ***/
	 {
		fn_userlog(c_ServiceName,"SQLCODE.... :%d:",SQLCODE);
	 }

		if(SQLCODE != 0)
      {
        if(SQLCODE == NO_DATA_FOUND )
        {
            if(i_tot_rec <= 0)
            { 
              if( DEBUG_MSG_LVL_3 )  /** ver 2.7 debug added **/
              {
                fn_userlog(c_ServiceName,"No records found....BREAK....");
              }
            }
            else
            {
              if( DEBUG_MSG_LVL_3 )  /** Ver 2.7 ***/
              {
                fn_userlog(c_ServiceName,":%d: Records collected.....",i_tot_rec);
              }
							c_spl_flg='C';
							
							if(DEBUG_MSG_LVL_5)	/*** Ver 1.3 ***/
          		{
            		fn_userlog( c_ServiceName,"l_qty is |%ld|",l_qty);
          		}
				
							if( DEBUG_MSG_LVL_3 )
          		{
            		fn_userlog(c_ServiceName,"***Packing group level data for :%s:%s:***",c_prev_mt_acnt,c_prev_undrlyng);
								fn_userlog( c_ServiceName,"Special Flag |%c|",c_spl_flg);
								fn_userlog( c_ServiceName,"Total profit Loss is |%lf|",d_tot_pl);
								fn_userlog( c_ServiceName,"Available Margin is |%lf|",d_tot_mrgn);
                fn_userlog(c_ServiceName,"c_spl_flg :%c:",c_spl_flg);               /*** Ver 1.6 ***/
                fn_userlog(c_ServiceName,"c_mtch_accnt_no :%s:",c_mtch_accnt_no);   /*** Ver 1.6 ***/
                fn_userlog(c_ServiceName,"c_prev_undrlyng :%s:",c_prev_undrlyng);   /*** Ver 1.6 ***/
                fn_userlog(c_ServiceName,"c_expry_dt.arr :%s:",c_expry_dt.arr);     /*** Ver 1.6 ***/
                fn_userlog(c_ServiceName,"c_prd_typ :%c:",c_prd_typ);               /*** Ver 1.6 ***/
                fn_userlog(c_ServiceName,"c_flash_prd_typ :%c:",c_flash_prd_typ);               /*** Ver 3.7 ***/
							}
							
						
		
						 	i_returncode = fn_pack_vartofml ( c_ServiceName,
																											c_errmsg,
																											&ptr_fml_Obuf,
																										/*	25,                   *** Ver 1.7 ** Changed from 24 to 25 ***/
																											44,                   /*** Ver 1.9 ** Changed from 25 to 35 ***//*** Ver 2.2 ** Changed from 35 to 37 **/  /* Ver 2.9 changed from 37 to 38 */  /*** changed from 38 to 40 in Ver 2.3 ***/ /*** changed from 40 to 44 in Ver 3.6 ***/
																									/**	FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no, **Commented in Ver 1.7 **/
																											FFO_EBA_MTCH_ACT_NO,(char *)c_prev_mt_acnt,  /** Ver 1.7 **/
																											FFO_XCHNG_CD,(char *)c_xchng_cd,
																											FFO_PRDCT_TYP,(char *)&c_null,
																											FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,      
																											FFO_UNDRLYNG,(char *)c_prev_undrlyng,          
																											FFO_EXPRY_DT,(char *)c_expry_dt.arr,          
																											FFO_EXER_TYP,(char *)&c_null,          
																											FFO_OPT_TYP,(char *)&c_null,           
																											FFO_STRK_PRC,(char *)&l_null,  
																											FFO_ORD_VALID_DT,(char *)ch_null,
																											FFO_C_OPNPSTN_FLW,(char *)&c_null,     
																											FFO_C_OPNPSTN_QTY,(char *)&l_null,     
																											FFO_U_IMTM_SPRD_PL,(char *)&d_null,    
																											FFO_ORDR_FLW,(char *)&c_null,          
																											FFO_STP_LSS_TGR,(char *)&l_null,       
																											FFO_LMT_RT,(char *)&d_null,            
																											FFO_MOD_CAN_FLG,(char *)&c_null,       
																											FFO_UNRLZD_PL,(char *)&d_tot_pl,         
																											FFO_CUR_MKT_PRC,(char *)&l_null,       
																											FFO_U_ORDR_MRGN,(char *)&d_tot_mrgn,
																											FFO_SPL_FLG,(char *)&c_spl_flg,
																											FFO_ORDR_RFRNC,(char *)ch_null,
																											FFO_STATUS_FLG,(char *)&c_null,
																											FFO_EXEC_QTY,(char *)&l_null,
																											FFO_ORD_TOT_QTY,(char *)&l_null,   /*** Ver 1.7 ***/
																											FFO_MTM_FLG,(char *)&c_null,				 /*** Ver 1.9 ***/
																											FFO_SPRD_ORD_REF,(char *)ch_null,	/*** Ver 1.9 ***/
																											FFO_CURR_RT,(char *)&l_null,	/*** Ver 1.9  FOD_LMT_RT of fresh order ***/		
																											FFO_IS_FLG,(char *)&c_null,	/*** Ver 1.9 FOD_FC_FLAG of cover order ***/		 
																											FFO_LMT_MKT_SL_FLG,(char *)&c_null,	/*** Ver 1.9 FFO_LMT_MKT_SL_FLG of fresh order ***/ 
																											FFO_REQ_TYP,(char *)&c_null,		/*** Ver 1.9 FFO_LMT_MKT_SL_FLG of cover order ***/	 
																											FFO_DR_CR_FLG,(char *)&c_null,		/*** Ver 1.9 ***/
																											FFO_EXRC_QTY,(char *)&l_null,			/*** Ver 1.9 ***/ 
																											FFO_IBUY_QTY,(char *)&l_null,		/*** Ver 1.9 ***/ 
																											FFO_EXBUY_QTY,(char *)&l_null,		/*** Ver 1.9 ***/ 
																											FFO_ND_STRT_DT, (char *)ch_null,	/*** Ver 2.2 ***/
																											FFO_ND_END_DT, (char *)ch_null,		/*** Ver 2.2 ***/
                                                      FFO_DAM_TRNSCTN, (char *)&c_null, /*** Ver 2.3 ***/
                                                      FFO_STLMNT_TYP,(char *)&c_null,   /*** Ver 2.3 ***/
                                                      FFO_EXCTD_RT, (char *)&l_null,     /*** Ver 2.9 Spot Price ***/
																											FFO_SOURCE_FLG,(char *)&c_null,   /*** Ver 3.6 ***/
                                                      FFO_EXEC_QTY_DAY,(char *)&l_null,  /*** Ver 3.6 ***/
                                                      FFO_CNTRCT_TAG, (char *)&c_null,   /*** Ver 3.6 ***/
																											FFO_ASGN_RFRNC,(char *)ch_null      /*** Ver 3.6 ***/
																											);

									if ( i_returncode == -1 )
									{
										fn_errlog( c_ServiceName, "S31090", FMLMSG, c_errmsg  );
										EXEC SQL CLOSE :cur_sltp_pstn;
										EXEC SQL FREE :cur_sltp_pstn;
										tpfree ( ( char * ) ptr_fml_Obuf );
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
            			}
									if( DEBUG_MSG_LVL_5 ) /*** Ver 1.3 ***/
									{
            			fn_userlog(c_ServiceName,"size of ptr_fml_Obuf:%ld:",Fsizeof32(ptr_fml_Obuf));
          				}
				
							d_grnd_utrd_mrgn = d_grnd_utrd_mrgn +  d_tot_mrgn;
              d_grnd_tot_pl = d_grnd_tot_pl +  d_tot_pl;
							
							c_spl_flg = 'G';

							if( DEBUG_MSG_LVL_3 ) 
							{
            		fn_userlog(c_ServiceName,"********* GRAND TOTAL *********");
            		fn_userlog(c_ServiceName,"GRAND MARGIN ON POS:%lf:",d_grnd_utrd_mrgn);
								fn_userlog(c_ServiceName,"GRAND PNL ON POS:%lf:",d_grnd_tot_pl);
                fn_userlog(c_ServiceName,"c_spl_flg :%c:",c_spl_flg);               /*** Ver 1.6 ***/
                fn_userlog(c_ServiceName,"c_mtch_accnt_no :%s:",c_mtch_accnt_no);   /*** Ver 1.6 ***/
                fn_userlog(c_ServiceName,"c_prev_undrlyng :%s:",c_prev_undrlyng);   /*** Ver 1.6 ***/
                fn_userlog(c_ServiceName,"c_expry_dt.arr :%s:",c_expry_dt.arr);     /*** Ver 1.6 ***/
                fn_userlog(c_ServiceName,"c_prd_typ :%c:",c_prd_typ);               /*** Ver 1.6 ***/
							}

						 	i_returncode = fn_pack_vartofml ( c_ServiceName,
																											c_errmsg,
																											&ptr_fml_Obuf,
																										/*	25,                   *** Ver 1.7 ** Changed from 24 to 25 ***/
																											44,                   /*** Ver 1.9 ** Changed from 25 to 35 ***//*** Ver 2.2 ** Changed from 35 to 37 **/ /* Ver 2.9 changed from 37 to 38 */ /*** changed from 38 to 40 in Ver 2.3 ***/ /*** changed from 40 to 44 in Ver 3.6 ***/	
                                                  /** FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no, **Commented in Ver 1.7 **/
                                                      FFO_EBA_MTCH_ACT_NO,(char *)c_prev_mt_acnt,  /** Ver 1.7 **/
																											FFO_XCHNG_CD,(char *)c_xchng_cd,
																											FFO_PRDCT_TYP,(char *)&c_null,
																											FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,      
																											FFO_UNDRLYNG,(char *)c_prev_undrlyng,          
																											FFO_EXPRY_DT,(char *)c_expry_dt.arr,          
																											FFO_EXER_TYP,(char *)&c_null,          
																											FFO_OPT_TYP,(char *)&c_null,           
																											FFO_STRK_PRC,(char *)&l_null,  
																											FFO_ORD_VALID_DT,(char *)ch_null,
																											FFO_C_OPNPSTN_FLW,(char *)&c_null,     
																											FFO_C_OPNPSTN_QTY,(char *)&l_null,     
																											FFO_U_IMTM_SPRD_PL,(char *)&d_null,    
																											FFO_ORDR_FLW,(char *)&c_null,          
																											FFO_STP_LSS_TGR,(char *)&l_null,       
																											FFO_LMT_RT,(char *)&d_null,            
																											FFO_MOD_CAN_FLG,(char *)&c_null,       
																											FFO_UNRLZD_PL,(char *)&d_grnd_tot_pl,         
																											FFO_CUR_MKT_PRC,(char *)&l_null,       
																											FFO_U_ORDR_MRGN,(char *)&d_grnd_utrd_mrgn,
																											FFO_SPL_FLG,(char *)&c_spl_flg,
																											FFO_ORDR_RFRNC,(char *)ch_null,
																											FFO_STATUS_FLG,(char *)&c_null,
																										  FFO_EXEC_QTY,(char *)&l_null,
																											FFO_ORD_TOT_QTY,(char *)&l_null,   /*** Ver 1.7 ***/
																											FFO_MTM_FLG,(char *)&c_null,				 /*** Ver 1.9 ***/
																											FFO_SPRD_ORD_REF,(char *)ch_null,	/*** Ver 1.9 ***/
																											FFO_CURR_RT,(char *)&l_null,	/*** Ver 1.9  FOD_LMT_RT of fresh order ***/		
																											FFO_IS_FLG,(char *)&c_null,	/*** Ver 1.9 FOD_FC_FLAG of cover order ***/		 
																											FFO_LMT_MKT_SL_FLG,(char *)&c_null,	/*** Ver 1.9 FFO_LMT_MKT_SL_FLG of fresh order ***/ 
																											FFO_REQ_TYP,(char *)&c_null,		/*** Ver 1.9 FFO_LMT_MKT_SL_FLG of cover order ***/	 
																											FFO_DR_CR_FLG,(char *)&c_null,		/*** Ver 1.9 ***/
																											FFO_EXRC_QTY,(char *)&l_null,			/*** Ver 1.9 ***/ 
																											FFO_IBUY_QTY,(char *)&l_null,		/*** Ver 1.9 ***/ 
																											FFO_EXBUY_QTY,(char *)&l_null,		/*** Ver 1.9 ***/ 
																											FFO_ND_STRT_DT, (char *)ch_null,	/*** Ver 2.2 ***/
																											FFO_ND_END_DT, (char *)ch_null,		/*** Ver 2.2 ***/
                                                      FFO_DAM_TRNSCTN, (char *)&c_null, /*** Ver 2.3 ***/
                                                      FFO_STLMNT_TYP,(char *)&c_null,   /*** Ver 2.3 ***/
                                                      FFO_EXCTD_RT, (char *)&l_null,   /*** ver 2.9 Spot Price ***/
																											FFO_SOURCE_FLG,(char *)&c_null,   /*** Ver 3.6 ***/
                                                      FFO_EXEC_QTY_DAY,(char *)&l_null,  /*** Ver 3.6 ***/
                                                      FFO_CNTRCT_TAG, (char *)&c_null,   /*** Ver 3.6 ***/	
																											FFO_ASGN_RFRNC,(char *)ch_null      /*** Ver 3.6 ***/
																										);

									if ( i_returncode == -1 )
									{
										fn_errlog( c_ServiceName, "S31095", FMLMSG, c_errmsg  );
										EXEC SQL CLOSE :cur_sltp_pstn;
										EXEC SQL FREE :cur_sltp_pstn;
										tpfree ( ( char * ) ptr_fml_Obuf );
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
            			}
         	}
           break;
				}
				else
        {
    			fn_errlog( c_ServiceName, "S31100", SQLMSG, c_errmsg  );
    			EXEC SQL CLOSE :cur_sltp_pstn;
    			EXEC SQL FREE :cur_sltp_pstn;
					tpfree ( ( char * ) ptr_fml_Obuf );
    			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			} /* End of SQLCODE if */
		
		rtrim(c_undrlyng);
		
		if ( i_cntr == 0 )
    {
      if( DEBUG_MSG_LVL_3 ) {
        fn_userlog(c_ServiceName,"Inside i_cntr is 0");
      }
      strcpy(c_prev_undrlyng,c_undrlyng);
      strcpy(c_prev_mt_acnt,c_mtch_accnt_no);
      i_cntr++ ;
    }
	
		if (
         (( strcmp(c_prev_undrlyng,c_undrlyng) != 0) && ( i_counter != 1 )) || ((strcmp(c_prev_mt_acnt,c_mtch_accnt_no) !=0 ) && ( i_counter != 1 ))
       )
		{
      /******The group level data from fus of same mtch accnt is sent here ********/
      if( DEBUG_MSG_LVL_3 ) 
			{
        fn_userlog(c_ServiceName,"Inside same underlyng but diff match acc OR diff undrlyng of samemtch accnt  OR Diff match accnt and diff undrlyng");
      }
		
			 c_spl_flg='C';

              if(DEBUG_MSG_LVL_5) /*** Ver 1.3 ***/
              {
                fn_userlog( c_ServiceName,"l_qty is |%ld|",l_qty);
              }

              if( DEBUG_MSG_LVL_3 )
              {
                fn_userlog(c_ServiceName,"***Packing group level data for :%s:%s:***",c_prev_mt_acnt,c_prev_undrlyng);
                fn_userlog( c_ServiceName,"Special Flag |%c|",c_spl_flg);
                fn_userlog( c_ServiceName,"Total profit Loss is |%lf|",d_tot_pl);
                fn_userlog( c_ServiceName,"Available Margin is |%lf|",d_tot_mrgn);
                fn_userlog(c_ServiceName,"c_spl_flg :%c:",c_spl_flg);               /*** Ver 1.6 ***/
                fn_userlog(c_ServiceName,"c_mtch_accnt_no :%s:",c_mtch_accnt_no);   /*** Ver 1.6 ***/
                fn_userlog(c_ServiceName,"c_prev_undrlyng :%s:",c_prev_undrlyng);   /*** Ver 1.6 ***/
                fn_userlog(c_ServiceName,"c_expry_dt.arr :%s:",c_expry_dt.arr);     /*** Ver 1.6 ***/
                fn_userlog(c_ServiceName,"c_prd_typ :%c:",c_prd_typ);               /*** Ver 1.6 ***/
              }



              i_returncode = fn_pack_vartofml ( c_ServiceName,
                                                      c_errmsg,
                                                      &ptr_fml_Obuf,
																										/*	25,                   *** Ver 1.7 ** Changed from 24 to 25 ***/
																											44,                   /*** Ver 1.9 ** Changed from 25 to 35 ***//*** Ver 2.2 ** Changed from 35 to 37 **/ /* Ver 2.9 changed from 37 to 38 */ /*** Changed from 38 to 40 in Ver 2.3 ***/ /*** Changed from 40 to 44 in Ver 3.6 ***/ 
                                                  /** FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no, **Commented in Ver 1.7 **/
                                                      FFO_EBA_MTCH_ACT_NO,(char *)c_prev_mt_acnt,  /** Ver 1.7 **/
                                                      FFO_XCHNG_CD,(char *)c_xchng_cd,
                                                      FFO_PRDCT_TYP,(char *)&c_null,
                                                      FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,
                                                      FFO_UNDRLYNG,(char *)c_prev_undrlyng,
                                                      FFO_EXPRY_DT,(char *)c_expry_dt.arr,
                                                      FFO_EXER_TYP,(char *)&c_null,
                                                      FFO_OPT_TYP,(char *)&c_null,
                                                      FFO_STRK_PRC,(char *)&l_null,
																											FFO_ORD_VALID_DT,(char *)ch_null,
                                                      FFO_C_OPNPSTN_FLW,(char *)&c_null,
                                                      FFO_C_OPNPSTN_QTY,(char *)&l_null,
                                                      FFO_U_IMTM_SPRD_PL,(char *)&d_null,
                                                      FFO_ORDR_FLW,(char *)&c_null,
                                                      FFO_STP_LSS_TGR,(char *)&l_null,
                                                      FFO_LMT_RT,(char *)&d_null,
                                                      FFO_MOD_CAN_FLG,(char *)&c_null,
                                                      FFO_UNRLZD_PL,(char *)&d_tot_pl,
                                                      FFO_CUR_MKT_PRC,(char *)&l_null,
                                                      FFO_U_ORDR_MRGN,(char *)&d_tot_mrgn,
                                                      FFO_SPL_FLG,(char *)&c_spl_flg,
																											FFO_ORDR_RFRNC,(char *)ch_null,
																											FFO_STATUS_FLG,(char *)&c_null,
																											FFO_EXEC_QTY,(char *)&l_null,
																											FFO_ORD_TOT_QTY,(char *)&l_null,   /*** Ver 1.7 ***/
																											FFO_MTM_FLG,(char *)&c_null,				 /*** Ver 1.9 ***/
																											FFO_SPRD_ORD_REF,(char *)ch_null,	/*** Ver 1.9 ***/
																											FFO_CURR_RT,(char *)&l_null,	/*** Ver 1.9  FOD_LMT_RT of fresh order ***/		
																											FFO_IS_FLG,(char *)&c_null,	/*** Ver 1.9 FOD_FC_FLAG of cover order ***/		 
																											FFO_LMT_MKT_SL_FLG,(char *)&c_null,	/*** Ver 1.9 FFO_LMT_MKT_SL_FLG of fresh order ***/ 
																											FFO_REQ_TYP,(char *)&c_null,		/*** Ver 1.9 FFO_LMT_MKT_SL_FLG of cover order ***/	 
																											FFO_DR_CR_FLG,(char *)&c_null,		/*** Ver 1.9 ***/
																											FFO_EXRC_QTY,(char *)&l_null,			/*** Ver 1.9 ***/ 
																											FFO_IBUY_QTY,(char *)&l_null,		/*** Ver 1.9 ***/ 
																											FFO_EXBUY_QTY,(char *)&l_null,
																											FFO_ND_STRT_DT, (char *)ch_null,	/*** Ver 2.2 ***/
																											FFO_ND_END_DT, (char *)ch_null,		/*** Ver 2.2 ***/
                                                      FFO_DAM_TRNSCTN, (char *)&c_null, /*** Ver 2.3 ***/
                                                      FFO_STLMNT_TYP,(char *)&c_null,     /*** Ver 2.3 ***/
                                                      FFO_EXCTD_RT, (char *)&l_null,    /*** ver 2.9 Spot Price***/
																											FFO_SOURCE_FLG,(char *)&c_null,   /*** Ver 3.6 ***/
																											FFO_EXEC_QTY_DAY,(char *)&l_null,  /*** Ver 3.6 ***/
																											FFO_CNTRCT_TAG, (char *)&c_null,   /*** Ver 3.6 ***/
																											FFO_ASGN_RFRNC,(char *)ch_null      /*** Ver 3.6 ***/
																												);		/*** Ver 1.9 ***/ 

                  if ( i_returncode == -1 )
                  {
                    fn_errlog( c_ServiceName, "S31105", FMLMSG, c_errmsg  );
                    EXEC SQL CLOSE :cur_sltp_pstn;
                    EXEC SQL FREE :cur_sltp_pstn;
                    tpfree ( ( char * ) ptr_fml_Obuf );
                    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
                  }
                  if( DEBUG_MSG_LVL_5 ) /*** Ver 1.3 ***/
                  {
                  fn_userlog(c_ServiceName,"size of ptr_fml_Obuf:%ld:",Fsizeof32(ptr_fml_Obuf));
                  }

              d_grnd_utrd_mrgn = d_grnd_utrd_mrgn + d_tot_mrgn;
              d_grnd_tot_pl = d_grnd_tot_pl +  d_tot_pl;
							l_qty = 0;
              d_tot_mrgn = 0.0;
              d_tot_pl = 0.0;
	
		}
		 i_counter++;

		 strcpy(c_prev_undrlyng,c_undrlyng);
		 strcpy(c_prev_mt_acnt,c_mtch_accnt_no);
			
		
	/** 	if( l_opnpstn_qty <= 0)
		{
			i_tot_rec++;
			fn_userlog(c_ServiceName, "PSTN NOT OPEN - Open qty :%ld: FE :%ld: CE :%ld: ",
                  l_opnpstn_qty, l_frsh_exctd_qty, l_cvr_exctd_qty );
        continue; * This pstn is not open, continue with next fresh order *
		}**Ver 2.8 **/	
	
		/*** Commented in Ver 2.8 ***
		** Getting the total executed value and quantity of FRESH order. **
    EXEC SQL
    SELECT  SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),
            SUM(FTD_EXCTD_QTY)
    INTO    :d_frsh_exe_val,
            :li_tot_exec_qty
    FROM    FTD_FO_TRD_DTLS
    WHERE   FTD_ORDR_RFRNC = :c_ordr_rfrnc;
		**** Ver 2.8 ends ***/

    /*Ver 3.9 Start*/
    if(c_flash_prd_typ == 'T')
    {
     EXEC SQL
       SELECT   NVL( SUM(FRESHQTY ), 0 ),
                NVL( SUM(CVRQTY ), 0 ),
                NVL( SUM(FRESHVAL ),0),
                NVL( SUM(CVRVAL ),0)
        INTO    :d_frs_exe_qty,
                :d_cvr_exe_qty,
                :d_frs_exe_val,
                :d_cvr_exe_val
        FROM    (SELECT  DECODE( FOD_FC_FLAG, 'C',0, FTD_EXCTD_QTY ) FRESHQTY, 
	                       DECODE( FOD_FC_FLAG, 'C', FTD_EXCTD_QTY, 0 ) CVRQTY,
				                 DECODE( FOD_FC_FLAG, 'C',0, FTD_EXCTD_QTY * FTD_EXCTD_RT ) FRESHVAL,
				                 DECODE( FOD_FC_FLAG, 'C', FTD_EXCTD_QTY * FTD_EXCTD_RT, 0 ) CVRVAL
	                 FROM	FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
								  WHERE   FTD_ORDR_RFRNC  = FOD_ORDR_RFRNC
									AND    FOD_CLM_MTCH_ACCNT =  FTD_CLM_MTCH_ACCNT
									AND    FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
								  AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_ordr_rfrnc
		              UNION ALL
		             SELECT  DECODE( FOD_FC_FLAG, 'C',0, FTD_EXCTD_QTY ) FRESHQTY, 
	                       DECODE( FOD_FC_FLAG, 'C', FTD_EXCTD_QTY, 0 ) CVRQTY,
				                 DECODE( FOD_FC_FLAG, 'C',0, FTD_EXCTD_QTY * FTD_EXCTD_RT ) FRESHVAL,
				                 DECODE( FOD_FC_FLAG, 'C', FTD_EXCTD_QTY * FTD_EXCTD_RT, 0 ) CVRVAL
	                FROM	FOD_FO_ORDR_DTLS_HSTRY, FTD_FO_TRD_DTLS_HSTRY
                 WHERE   FTD_ORDR_RFRNC  = FOD_ORDR_RFRNC
								 AND    FOD_CLM_MTCH_ACCNT =  FTD_CLM_MTCH_ACCNT
								 AND 		FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
                 AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_ordr_rfrnc);
		}/*Ver 3.9 Ends*/
		else
		{
		/*** Ver 2.8 starts ***/
		EXEC SQL
     SELECT   NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FTD_EXCTD_QTY ) ), 0 ),
              NVL( SUM( DECODE( FOD_FC_FLAG, 'C', FTD_EXCTD_QTY, 0 ) ), 0 ),
              NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FTD_EXCTD_QTY * FTD_EXCTD_RT ) ),0),
              NVL( SUM( DECODE( FOD_FC_FLAG, 'C', FTD_EXCTD_QTY * FTD_EXCTD_RT, 0 ) ),0)
      INTO    :d_frs_exe_qty,
              :d_cvr_exe_qty,
              :d_frs_exe_val,
              :d_cvr_exe_val
      FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
      WHERE   FTD_ORDR_RFRNC  = FOD_ORDR_RFRNC
			AND    FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_ordr_rfrnc;
		/**** Ver 2.8 ends ***/
    }
    if( SQLCODE != 0 )
    {
	  	fn_errlog( c_ServiceName, "S31110", SQLMSG, c_errmsg  );
      EXEC SQL CLOSE :cur_sltp_pstn;
      EXEC SQL FREE :cur_sltp_pstn;
			tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
			
		/** Calculating the Weight Average Price for the executed quantity of FRESH Order. **/
		d_wgt_avrg_price = 0.0;

		/*** Ver 2.8 starts ***/
		if (l_opnpstn_qty > 0) /*** Fresh open postion ***/
		{
			d_wgt_avrg_price = d_frs_exe_val / d_frs_exe_qty;	 
		}
		else if (l_opnpstn_qty < 0) /*** Cover open Qty ***/
		{
			d_wgt_avrg_price = d_cvr_exe_val / d_cvr_exe_qty;	 
		}
		/**** Ver 2.8 ends ***/

		/*** d_wgt_avrg_price = (double) (d_frsh_exe_val / li_tot_exec_qty);	  *** Commented in Ver 2.8 ***/

		if( DEBUG_MSG_LVL_5 ) /*** Ver 1.3 ***/
		{
		 fn_userlog(c_ServiceName,"d_wgt_avrg_price:%lf:",d_wgt_avrg_price);
		}

		/*** Added for Ver 2.2 ***/
		strcpy(c_bullet_frm_time.arr,"NA");
		strcpy(c_bullet_end_time.arr,"NA");

		if (c_frsh_ordr_stts == EXECUTED  ) 
		{
			/*** Ver 3.1 Starts ***/

			EXEC SQL
			SELECT  decode(nvl(clm_op20_flg,'N'),'Y','Y',NVL(CLM_BULLET_SCHM_FLG,'N'))/** Ver 3.4 decode for OP20 */
			INTO		:c_bullet_schm_flg
			FROM		CLM_CLNT_MSTR
			WHERE		CLM_MTCH_ACCNT =:c_mtch_accnt_no;

			if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31115", SQLMSG, c_errmsg  );
        EXEC SQL CLOSE :cur_sltp_pstn;
        EXEC SQL FREE :cur_sltp_pstn;
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

			/*** Ver 3.1 Ends ***/

		 if ( c_bullet_schm_flg == 'Y' && c_flash_prd_typ != 'T')		/*** Check Added in Ver 3.1 ***//*Added c_flash_prd_typ for Ver 3.9*/
		 {
			EXEC SQL
			SELECT  TO_CHAR(MAX(FTD_TRD_DT),'HH24:MI:SS'),
							TO_CHAR(MAX(FTD_TRD_DT) + :c_bullet_param * 1/24/60/60,'HH24:MI:SS')
				INTO	:c_bullet_frm_time,
							:c_bullet_end_time
			FROM    FTD_FO_TRD_DTLS
			WHERE   FTD_ORDR_RFRNC = :c_ordr_rfrnc;

			if( SQLCODE != 0 )
			{
				fn_errlog( c_ServiceName, "S31120", SQLMSG, c_errmsg  );
				EXEC SQL CLOSE :cur_sltp_pstn;
				EXEC SQL FREE :cur_sltp_pstn;
				tpfree ( ( char * ) ptr_fml_Obuf );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			if( c_cvr_ordr_stts == 'D' || c_cvr_ordr_stts == 'C' )
			{
				strcpy(c_bullet_frm_time.arr,"NA");
				strcpy(c_bullet_end_time.arr,"NA");
			}

		  if( DEBUG_MSG_LVL_3 ) {
			fn_userlog(c_ServiceName,"Start time :%s:",c_bullet_frm_time.arr);
			fn_userlog(c_ServiceName,"Bullet time :%s:",c_bullet_end_time.arr);
			} /*** Ver 2.6 ***/

		 }		/*** Ver 3.1 ***/

   if(c_flash_prd_typ == 'X')
    {
			MEMSET(c_bullet_frm_time);
			MEMSET(c_bullet_end_time);
			
      EXEC SQL
      SELECT  TO_CHAR(MAX(FTD_TRD_DT),'HH24:MI:SS')
        INTO  :c_bullet_frm_time
      FROM    FTD_FO_TRD_DTLS
      WHERE   FTD_ORDR_RFRNC = :c_ordr_rfrnc;

      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31125", SQLMSG, c_errmsg  );
        EXEC SQL CLOSE :cur_sltp_pstn;
        EXEC SQL FREE :cur_sltp_pstn;
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      EXEC SQL
      SELECT TO_CHAR(TO_DATE(:c_bullet_frm_time,'HH24:MI:SS')+FOD_SQROFF_TM*1/24/60,'HH24:MI:SS')
      INTO :c_bullet_end_time
      FROM FOD_FO_ORDR_DTLS
      WHERE FOD_ORDR_RFRNC = :c_ordr_rfrnc;

      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31130", SQLMSG, c_errmsg  );
        EXEC SQL CLOSE :cur_sltp_pstn;
        EXEC SQL FREE :cur_sltp_pstn;
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		
		  fn_userlog(c_ServiceName,"Start Flash time :%s:",c_bullet_frm_time.arr);
      fn_userlog(c_ServiceName,"End Flash time :%s:",c_bullet_end_time.arr);
		 }
		 if(c_flash_prd_typ == 'T') /***  Ver 3.9 Start***/
		 {
			MEMSET(c_bullet_frm_time);
			MEMSET(c_bullet_end_time);
			strcpy(c_bullet_frm_time.arr,"NA");
			strcpy(c_bullet_end_time.arr,"NA");
		  fn_userlog(c_ServiceName,"Start Flash time :%s:",c_bullet_frm_time.arr);
      fn_userlog(c_ServiceName,"End Flash time :%s:",c_bullet_end_time.arr);
				
		 }/***  Ver 3.9 End ***/
		}


		SETLEN(c_bullet_frm_time);
		SETLEN(c_bullet_end_time);

	   if( DEBUG_MSG_LVL_3 ) { /*** Ver 3.7 ***/ 
      fn_userlog(c_ServiceName,"Start time :%s:",c_bullet_frm_time.arr);
      fn_userlog(c_ServiceName,"Bullet time :%s:",c_bullet_end_time.arr);
     }	

		/*** End for Ver 2.2 ***/
		
		  fn_userlog(c_ServiceName,"c_xchng_cd:%s:",c_xchng_cd);
      fn_userlog(c_ServiceName,"c_mtch_accnt_no :%s:",c_mtch_accnt_no);   
      fn_userlog(c_ServiceName,"c_undrlyng :%s:",c_undrlyng);            
      fn_userlog(c_ServiceName,"c_expry_dt.arr :%s:",c_expry_dt.arr);   
      fn_userlog(c_ServiceName,"c_opt_typ :%c:",c_opt_typ);            
      fn_userlog(c_ServiceName,"l_strike_prc :%ld:",l_strike_prc);    
			fn_userlog(c_ServiceName,"c_exer_typ :%c:", c_exer_typ);
			fn_userlog(c_ServiceName,"c_ctgry_indstk:%c:", c_ctgry_indstk);
      fn_userlog(c_ServiceName,"c_prd_typ :%c:",c_prd_typ);        


		EXEC SQL
      SELECT  NVL(FTQ_LST_TRD_PRC,0)
      INTO    :l_cmp
      FROM    FTQ_FO_TRD_QT
      WHERE   FTQ_XCHNG_CD  = :c_xchng_cd 
      /*** AND     FTQ_PRDCT_TYP = 'F'                    *** Commented In Ver 1.4 ***/
       /*** AND      FTQ_PRDCT_TYP = decode(:c_prd_typ,'I','O','F') Commented in Ver 3.7 **/      /*** Ver 1.4 ***/
			AND     FTQ_PRDCT_TYP = decode(:c_prd_typ,'I','O','U','F','P','F',:c_prd_typ) /*** Ver 3.7 ***/
			AND     FTQ_UNDRLYNG  = :c_undrlyng
      AND     FTQ_EXPRY_DT  = :c_expry_dt
			AND			FTQ_INDSTK		=	:c_ctgry_indstk												 /*** Ver 1.4 ***/
			AND			FTQ_OPT_TYP		=	:c_opt_typ														 /*** Ver 1.4 ***/
			AND 		FTQ_STRK_PRC	=	:l_strike_prc													 /*** Ver 1.4 ***/
      AND     FTQ_EXER_TYP  = :c_exer_typ;

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog( c_ServiceName, "S31135", SQLMSG, c_errmsg  );
      EXEC SQL CLOSE :cur_sltp_pstn;
      EXEC SQL FREE :cur_sltp_pstn;
      tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if( DEBUG_MSG_LVL_5 ) /*** Ver 1.3 ***/
    {
      fn_userlog(c_ServiceName,"l_cmp:%lf:",l_cmp);
    }

		/* Calculating the Unrealized Profit & Loss on Current Market Price */
    if ( c_frsh_ordr_flw == BUY )
    {
			if (l_opnpstn_qty > 0 ) /*** If condition added in Ver 2.8 ***/
			{
				d_unlz_pl = ((double)l_cmp - d_wgt_avrg_price) * (double)l_opnpstn_qty;
			}
			else	/*** Else loop added in Ver 2.8 ***/
			{
	      d_unlz_pl = (d_wgt_avrg_price - (double)l_cmp) * (double)l_opnpstn_qty;
			}
    }
    else if ( c_frsh_ordr_flw == SELL )
    {
			if (l_opnpstn_qty > 0 ) /*** If condition added in Ver 2.8 ***/
			{
				d_unlz_pl = (d_wgt_avrg_price - (double)l_cmp) * (double)l_opnpstn_qty;
			}
			else	/*** Else loop added in Ver 2.8 ***/
			{
				d_unlz_pl = ((double)l_cmp - d_wgt_avrg_price) * (double)l_opnpstn_qty;
			}
    }

 		/*** 3.6 Starts here ***/ 

		c_prft_alwd_flg  = 'N';															/*** Ver 3.6 ***/
		l_profit_ordr_exist= 0;
	
		EXEC SQL	
	   SELECT (1) 
     INTO :l_profit_ordr_exist 
     FROM FOD_FO_ORDR_DTLS
     WHERE FOD_FC_FLAG = 'T' 
     AND DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC) = :c_ordr_rfrnc 
	/***	 AND FOD_ORDR_STTS IN ('Q','R','O','P','E'); ***/
		AND FOD_ORDR_STTS NOT IN ('C','X','J');

      if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S31140", SQLMSG, c_errmsg  );
        EXEC SQL CLOSE :cur_sltp_pstn;
        EXEC SQL FREE :cur_sltp_pstn;
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
	

		c_prft_mod_can_flg = 'N';
		c_prft_ordr_stts  = '\0';
		l_prft_lmt_rt = 0;
	
		EXEC SQL
		 SELECT NVL(FUM_PRFT_ALLWD_FLG,'N')
     INTO :c_fum_prft_alwd_flg
     FROM fum_fo_undrlyng_mstr
     WHERE FUM_XCHNG_CD = :c_xchng_cd
     AND   FUM_PRDCT_TYP= 'F'      
     AND   FUM_UNDRLYNG = :c_undrlyng;

      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31145", SQLMSG, c_errmsg  );
        EXEC SQL CLOSE :cur_sltp_pstn;
        EXEC SQL FREE :cur_sltp_pstn;
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }


     if( c_fum_prft_alwd_flg == 'Y'  && l_profit_ordr_exist == 0 && c_frsh_ordr_stts== 'E' && c_slm_flg == 'S'  &&  c_cvr_ordr_stts == 'O')
     {
        c_prft_alwd_flg = 'Y';
     }
     else
	   {
        c_prft_alwd_flg  = 'N';
	   }

		if( DEBUG_MSG_LVL_3 ) /*** Ver 3.6 ***/
    { 
			fn_userlog(c_ServiceName,"ORDER Reference and cover order stts  :%s:%c: " ,c_ordr_rfrnc,c_cvr_ordr_stts);
      fn_userlog(c_ServiceName,"profit order link display  :%c:%c:%ld:%c:%c:%c: ", c_prft_alwd_flg,c_fum_prft_alwd_flg,l_profit_ordr_exist,c_frsh_ordr_stts,c_slm_flg,c_cvr_ordr_stts);
    }
    
		c_prft_pend = 'N';

		if(c_flash_prd_typ == 'X' || c_flash_prd_typ == 'T') /***  Ver 3.9 Added T ***/
		{

				 if(c_flash_prd_typ == 'T') /***  Ver 3.9 Start ***/
				 {
					c_prft_pend='Y';
				 } /***  Ver 3.9 End***/
				 else
				 {
				 	EXEC SQL 
					SELECT 'Y' INTO :c_prft_pend
					FROM FOD_FO_ORDR_DTLS 
					WHERE FOD_FC_FLAG='C'  
					AND NVL(FOD_SPL_FLAG,'N')!='N'	/** Ver 3.8**/
					/** AND DECODE(FOD_FC_FLAG, 'C',FOD_SLTP_ORDR_RFRNC,FOD_ORDR_RFRNC) = :c_ordr_rfrnc *** Commented in Ver 3.7 ***/
					AND DECODE(FOD_FC_FLAG, 'F',FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC) = :c_ordr_rfrnc /*** Ver 3.7 ***/
					AND FOD_ORDR_STTS in ( 'O','R','Q','P');
				 }

		}
		else
		{
						EXEC SQL
						SELECT 'Y' 
						INTO :c_prft_pend
						FROM FOD_FO_ORDR_DTLS
						WHERE FOD_FC_FLAG = 'T'
						AND DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC) = :c_ordr_rfrnc
						AND FOD_ORDR_STTS in ( 'O','R','Q','P');
		}

    if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S31150", SQLMSG, c_errmsg  );
        EXEC SQL CLOSE :cur_sltp_pstn;
        EXEC SQL FREE :cur_sltp_pstn;
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		
		c_prft_mod_can_flg = 'N';

		EXEC SQL
		SELECT FOD_ORDR_STTS,FOD_LMT_RT    
    INTO :c_prft_ordr_stts, :l_prft_lmt_rt
    FROM FOD_FO_ORDR_DTLS
    WHERE FOD_FC_FLAG = 'T'
    AND DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC) = :c_ordr_rfrnc
    AND FOD_ORDR_STTS in ('Q', 'R', 'O','P','D','B','E');

		if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S31155", SQLMSG, c_errmsg  );
        EXEC SQL CLOSE :cur_sltp_pstn;
        EXEC SQL FREE :cur_sltp_pstn;
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

 	  if( c_frsh_ordr_stts == EXECUTED && c_prft_ordr_stts == ORDERED )
    {
      c_prft_mod_can_flg = 'Y';
    }
    else
    {
      c_prft_mod_can_flg = 'N';
    }

		if( DEBUG_MSG_LVL_3 ) /*** Ver 3.6 ***/
    {
      fn_userlog(c_ServiceName,"Modify link display  :%c:%c:%ld:%c: ",c_prft_mod_can_flg,c_prft_ordr_stts,l_prft_lmt_rt,c_frsh_ordr_stts );
    }


    MEMSET(c_prft_ordr_rfrnc);

    EXEC SQL
    SELECT FOD_ORDR_RFRNC 
    INTO :c_prft_ordr_rfrnc
    FROM FOD_FO_ORDR_DTLS
    WHERE FOD_FC_FLAG = 'T'
    AND DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC) = :c_ordr_rfrnc
    AND FOD_ORDR_STTS in ('R','Q','O','P');

    if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S31160", SQLMSG, c_errmsg  );
        EXEC SQL CLOSE :cur_sltp_pstn;
        EXEC SQL FREE :cur_sltp_pstn;
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		fn_userlog(c_ServiceName,"Profit order ref:%s:",c_prft_ordr_rfrnc);
		/*** 3.6 Ends here ***/

		c_mod_can_flg = 'N';
	/*** Ver 1.9 Starts ***/	
	c_mtm_flg = 'N';
  c_sqoff_at_mkt_flag = 'N';   /*** Ver 2.3 ***/
  c_call_mod_serv_flag = 'N';  /*** Ver 2.3 ***/
 	
	if(c_dwl_flg != 'N')
	{
		if ( ( c_frsh_ordr_stts == EXECUTED ) && ( c_cvr_ordr_stts == ORDERED  || c_cvr_ordr_stts == PARTIALLY_EXECUTED ) ) 
		{
		  c_mod_can_flg = 'Y';
      c_call_mod_serv_flag = 'M';   /*** Ver 2.3 ***/
      c_sqoff_at_mkt_flag = 'Y';    /*** Ver 2.3 ***/
		}
    else if ( (c_frsh_ordr_stts == PARTIALLY_EXECUTED ) && ( c_cvr_ordr_stts == ORDERED) )  /*** Condition added in Ver 2.3 ***/
    {
      c_mod_can_flg = 'Y';
      c_call_mod_serv_flag = 'P';
      c_sqoff_at_mkt_flag = 'N';
    }

    if( DEBUG_MSG_LVL_0)
    {
     fn_userlog(c_ServiceName," Call Modify Service Flag IS :%c:",c_call_mod_serv_flag);
     fn_userlog(c_ServiceName," Modify Flag IS :%c:",c_mod_can_flg);
     fn_userlog(c_ServiceName," SquareOff at Market Flag IS :%c",c_sqoff_at_mkt_flag);
    }
	}
	else if(c_dwl_flg == 'N') /*** Called from New site identification ***/
	{
	  if( DEBUG_MSG_LVL_3 ) {
		fn_userlog(c_ServiceName," @@@@@@@@@@ :c_frsh_ordr_stts :%c:",c_frsh_ordr_stts);
		fn_userlog(c_ServiceName," @@@@@@@@@@ :c_cvr_ordr_stts :%c:",c_cvr_ordr_stts);
		}	/*** Ver 2.6 ***/

		if( (c_frsh_ordr_stts == ORDERED && c_cvr_ordr_stts == ORDERED) ||
				(c_frsh_ordr_stts == EXECUTED && c_cvr_ordr_stts == ORDERED) ||
				(c_frsh_ordr_stts == EXECUTED && c_cvr_ordr_stts == PARTIALLY_EXECUTED)||
				(c_frsh_ordr_stts == PARTIALLY_EXECUTED && c_cvr_ordr_stts == ORDERED) ) 
		{
		  if( DEBUG_MSG_LVL_3 ) {
			fn_userlog(c_ServiceName,"c_frsh_ordr_channel :%s:",c_frsh_ordr_channel);
			fn_userlog(c_ServiceName,"c_cvr_ordr_channel :%s:",c_cvr_ordr_channel);
			} /*** Ver 2.6 ***/

		  if ( (strcmp(c_frsh_ordr_channel,"SYS") == 0 ) || (strcmp( c_cvr_ordr_channel,"SYS") == 0) )
			{
				c_mod_can_flg = 'N';
			}
			else
			{
				c_mod_can_flg = 'Y';
			}
		}

		if(	(c_frsh_ordr_stts == ORDERED && c_cvr_ordr_stts == ORDERED) ||
			(c_frsh_ordr_stts == ORDERED && c_cvr_ordr_stts == REJECT) ||
			(c_frsh_ordr_stts == ORDERED && c_cvr_ordr_stts == CANCELLED))
		{
			c_mtm_flg = 'Y';
		}
	}
	/*** Ver 1.9 Ends ***/		

    if ( ( c_cvr_ordr_stts == ORDERED ) ||
         ( c_cvr_ordr_stts == PARTIALLY_EXECUTED ) )
    {
			 if( DEBUG_MSG_LVL_5 ) /*** Ver 1.3 ***/
			 {
				fn_userlog(c_ServiceName," ptr_st_orderbook->c_xchng_cd :%s:",c_xchng_cd);
				fn_userlog(c_ServiceName," ptr_st_orderbook->c_sltp_ordr_rfrnc :%s:",c_sltp_ordr_rfrnc);
				fn_userlog(c_ServiceName," ptr_st_orderbook->l_mdfctn_cntr :%ld:",l_mdfctn_cntr);
			 }

       EXEC SQL
           SELECT fxb_rqst_typ,
                  fxb_plcd_stts
           INTO   :c_fxb_rqst_typ,
                  :c_fxb_plcd_stts
           FROM 	fxb_fo_xchng_book
           WHERE 	fxb_xchng_cd    = :c_xchng_cd
           AND   	fxb_ordr_rfrnc  = :c_sltp_ordr_rfrnc
           AND   	fxb_mdfctn_cntr = :l_mdfctn_cntr;
       if ( SQLCODE != 0 )
       {
          fn_errlog( c_ServiceName, "S31165", SQLMSG, c_errmsg  );
          EXEC SQL CLOSE :cur_sltp_pstn;
          EXEC SQL FREE :cur_sltp_pstn;
          tpfree ( ( char * ) ptr_fml_Obuf );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }
       if (( c_fxb_rqst_typ == CANCELLED ) && ( c_fxb_plcd_stts != REJECT ))
       {
           c_mod_can_flg = 'N';
			 }
    }
		
		if( DEBUG_MSG_LVL_3 ) /*** Ver 1.3 ***/
		{
			fn_userlog(c_ServiceName,"c_mod_can_flg :%c:", c_mod_can_flg);
		}

		c_spl_flg='A';

		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName,"d_wgt_avrg_price:%lf:",d_wgt_avrg_price);
			fn_userlog(c_ServiceName,"d_utrd_mrgn:%lf:",d_utrd_mrgn);
			fn_userlog(c_ServiceName,"d_unlz_pl:%lf:",d_unlz_pl);
      fn_userlog(c_ServiceName,"c_spl_flg :%c:",c_spl_flg);               /*** Ver 1.6 ***/
      fn_userlog(c_ServiceName,"c_mtch_accnt_no :%s:",c_mtch_accnt_no);   /*** Ver 1.6 ***/
      fn_userlog(c_ServiceName,"c_undrlyng :%s:",c_undrlyng);             /*** Ver 1.6 ***/
      fn_userlog(c_ServiceName,"c_expry_dt.arr :%s:",c_expry_dt.arr);     /*** Ver 1.6 ***/
      fn_userlog(c_ServiceName,"c_opt_typ :%c:",c_opt_typ);               /*** Ver 1.6 ***/
      fn_userlog(c_ServiceName,"l_strike_prc :%ld:",l_strike_prc);        /*** Ver 1.6 ***/
      fn_userlog(c_ServiceName,"c_prd_typ :%c:",c_prd_typ);               /*** Ver 1.6 ***/
		}

		if( DEBUG_MSG_LVL_3 ) {
		fn_userlog(c_ServiceName,"~c_mtm_flg : %c ~c_ordr_rfrnc : %s ~ c_sltp_ordr_rfrnc : %s ~ l_frsh_lmt_rt: %ld ~ c_cvr_fc_flg: %c", 
					c_mtm_flg, c_ordr_rfrnc,c_sltp_ordr_rfrnc, l_frsh_lmt_rt, c_cvr_fc_flg); /*** Ver 1.9 ***/
		fn_userlog(c_ServiceName,"li_stp_lss_tgr_prc:%ld:",li_stp_lss_tgr_prc);
		fn_userlog(c_ServiceName,"l_lmt_rt:%ld:",l_lmt_rt);
		fn_userlog(c_ServiceName,"c_frsh_slm_flg:%c:",c_frsh_slm_flg);
		fn_userlog(c_ServiceName,"c_slm_flg:%c:",c_slm_flg);
		}		/*** ver 2.6 ***/

		/*** Ver 1.9 starts ***/
		if(c_dwl_flg != 'N') /*** Called from old or other sites identification ***/
		{
			if (c_frsh_ordr_stts == PARTIALLY_EXECUTED && c_cvr_ordr_stts == REJECTED )
			{
				c_cvr_ordr_stts = 'Z';	/*** In order to disable order link from old and other sites ***/
			}
		}

		if( DEBUG_MSG_LVL_2 )
		{
			fn_userlog(c_ServiceName,"Fresh :: c_ordr_rfrnc:%s:, c_frsh_ordr_stts :%c:, l_frsh_exctd_qty :%ld:, l_frsh_unexec_qty = :%ld: ",c_ordr_rfrnc, c_frsh_ordr_stts, l_frsh_exctd_qty, l_frsh_unexec_qty);
			fn_userlog(c_ServiceName,"Cover :: c_sltp_ordr_rfrnc:%s:, l_cvr_ordr_tot_qty=%ld:, c_cvr_ordr_stts :%c:, l_cvr_exctd_qty :%ld:, l_cvr_unexec_qty = :%ld:",c_sltp_ordr_rfrnc, l_cvr_ordr_tot_qty, c_cvr_ordr_stts, l_cvr_exctd_qty, l_cvr_unexec_qty);
		}
		/*** Ver 1.9 ends ***/

		if(l_opnpstn_qty < 0 )  /*** Ver 2.8 ***/
		{
			l_opnpstn_qty = (-1) * l_opnpstn_qty;   /** Ver 2.8 **/
		}
  /**** Ver 2.9 Starts ****/
    l_spot_prc  = 0;

    if ( c_prd_typ == 'I')
    {
      EXEC SQL
        SELECT LTQ_RT * 100
        INTO :l_spot_prc
        FROM LTQ_TRD_QT
        WHERE LTQ_STCK_CD = :c_undrlyng
        AND LTQ_XCHNG_CD  = DECODE(:c_xchng_cd,'NFO','NSE','BFO','BSE');


        if (SQLCODE != 0)
        {
        	fn_errlog( c_ServiceName, "S31170", SQLMSG, c_errmsg  );
          EXEC SQL CLOSE :cur_sltp_pstn;
          EXEC SQL FREE :cur_sltp_pstn;
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName, "Spot Price:%ld", l_spot_prc);
        }
    }

	/***** Ver 2.9 Ends *****/

		i_returncode = fn_pack_vartofml ( c_ServiceName,
                                      c_errmsg,
                                      &ptr_fml_Obuf,
                                      45,                   /*** Ver 1.7 ** Changed from 24 to 25 ***/ /*** Ver 1.9 ***/	/*** Ver 2.2 ** Changed from 35 to 37 **/ /* Ver 2.9 changed from 37 to 38 */ /*** changed from 38 to 40 in Ver 2.3 ***/ /*** changed from 40 to 45 in Ver 3.6 ***/
																			FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no,
																			FFO_XCHNG_CD,(char *)c_xchng_cd,
																			FFO_PRDCT_TYP,(char *)&c_prd_typ,
																			FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,      
 																			FFO_UNDRLYNG,(char *)c_undrlyng,          
 																			FFO_EXPRY_DT,(char *)c_expry_dt.arr,          
 																			FFO_EXER_TYP,(char *)&c_exer_typ,          
 																			FFO_OPT_TYP,(char *)&c_opt_typ,           
 																			FFO_STRK_PRC,(char *)&l_strike_prc,  
																			FFO_ORD_VALID_DT,(char *)c_valid_date,
 																			FFO_C_OPNPSTN_FLW,(char *)&c_frsh_ordr_flw,     
 																			FFO_C_OPNPSTN_QTY,(char *)&l_opnpstn_qty,     
 																			FFO_U_IMTM_SPRD_PL,(char *)&d_wgt_avrg_price,    
 																			FFO_ORDR_FLW,(char *)&c_cvr_ordr_flw,          
 																			FFO_STP_LSS_TGR,(char *)&li_stp_lss_tgr_prc,       
 																			FFO_LMT_RT,(char *)&l_lmt_rt,            
 																			FFO_MOD_CAN_FLG,(char *)&c_mod_can_flg,       
 																			FFO_UNRLZD_PL,(char *)&d_unlz_pl,         
 																			FFO_CUR_MKT_PRC,(char *)&l_cmp,       
 																			FFO_U_ORDR_MRGN,(char *)&d_utrd_mrgn,
 																			FFO_SPL_FLG,(char *)&c_spl_flg,
																			FFO_ORDR_RFRNC,(char *)c_sltp_ordr_rfrnc,
																			FFO_STATUS_FLG,(char *)&c_cvr_ordr_stts,
																			FFO_EXEC_QTY,(char *)&l_cvr_exctd_qty,
																			FFO_ORD_TOT_QTY,(char *)&l_cvr_ordr_tot_qty,   /*** Ver 1.7 ***/
																			FFO_MTM_FLG,(char *)&c_mtm_flg,				 /*** Ver 1.9 ***/
																			FFO_SPRD_ORD_REF,(char *)c_ordr_rfrnc,	/*** Ver 1.9 ***/
																			FFO_CURR_RT,(char *)&l_frsh_lmt_rt,	/*** Ver 1.9  FOD_LMT_RT of fresh order ***/		
																			FFO_IS_FLG,(char *)&c_cvr_fc_flg,	/*** Ver 1.9 FOD_FC_FLAG of cover order ***/		 
																			FFO_LMT_MKT_SL_FLG,(char *)&c_frsh_slm_flg,	/*** Ver 1.9 FFO_LMT_MKT_SL_FLG of fresh order ***/ 
																			FFO_REQ_TYP,(char *)&c_slm_flg,		/*** Ver 1.9 FFO_LMT_MKT_SL_FLG of cover order ***/	 
																			FFO_DR_CR_FLG,(char *)&c_frsh_ordr_stts,		/*** Ver 1.9 ***/
																			FFO_EXRC_QTY,(char *)&l_frsh_exctd_qty,			/*** Ver 1.9 ***/ 
																			FFO_IBUY_QTY,(char *)&l_frsh_unexec_qty,		/*** Ver 1.9 ***/ 
																			FFO_EXBUY_QTY,(char *)&l_cvr_unexec_qty,		/*** Ver 1.9 ***/ 
																			FFO_ND_STRT_DT, (char *)c_bullet_frm_time.arr,	/*** Ver 2.2 ***/
																			FFO_ND_END_DT, (char *)c_bullet_end_time.arr,		/*** Ver 2.2 ***/
                                      FFO_DAM_TRNSCTN, (char *)&c_call_mod_serv_flag,     /*** Ver 2.3 ***/
                                      FFO_STLMNT_TYP,(char *)&c_sqoff_at_mkt_flag,      /*** Ver 2.3 ***/
                                      FFO_EXCTD_RT, (char *)&l_spot_prc,                 /*** Ver 2.9 ***/
																			FFO_SOURCE_FLG, (char *)&c_prft_alwd_flg,         /*** Ver 3.6 ***/ 
																			FFO_EXEC_QTY_DAY,(char *)&l_prft_lmt_rt,          /*** Ver 3.6 ***/
																			FFO_CNTRCT_TAG,(char *)&c_prft_mod_can_flg,      /*** Ver 3.6 ***/ 
																			FFO_ASGN_RFRNC,(char *)c_prft_ordr_rfrnc,      /*** Ver 3.6 ***/ 
																			FFO_PRC_INDCTR , (char *)&c_prft_pend); 											/*** Ver 3.6 ***/

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31175", FMLMSG, c_errmsg  );
      EXEC SQL CLOSE :cur_sltp_pstn;
      EXEC SQL FREE :cur_sltp_pstn;
      tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if( DEBUG_MSG_LVL_5 )  /*** Ver 1.3 ***/
		{
      fn_userlog(c_ServiceName,"size of ptr_fml_Obuf:%ld:",Fsizeof32(ptr_fml_Obuf));
    }
			
		i_tot_rec++;
		d_tot_mrgn = d_tot_mrgn + d_utrd_mrgn;
		d_tot_pl = d_tot_pl + d_unlz_pl;
		l_qty = l_qty + l_opnpstn_qty ;
		d_utrd_mrgn = 0.0;
		d_unlz_pl = 0.0;	
	}	/* For loop */

	EXEC SQL CLOSE :cur_sltp_pstn;
  EXEC SQL FREE :cur_sltp_pstn;

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName,"Service Complected Successfully....");
	}
	 /* Return the output FML buffer to the client. */
 /***	Fprint32(ptr_fml_Obuf);   *** Commented in Ver 2.5 ***/
  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );	
}
