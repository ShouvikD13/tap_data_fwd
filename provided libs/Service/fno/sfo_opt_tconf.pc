/******************************************************************************/
/*	Program	    			:	SFO_OPT_TCONF                                         */
/*                                                                            */
/*  Input             : vw_tradebook                                          */
/*                                                                            */
/*  Output            : vw_tradebook                                          */
/*                                                                            */
/*  Description       : This service updates the order book, trade book,      */
/*                      positions and the limits on getting Trade confirmation*/
/*                      Response from the Exchange for Options orders         */
/*                                                                            */
/*  Log               : 1.0  12-Nov-2001  S. Swaminathan                      */
/*											1.1	 19-Dec-2007	Sushil Sharma			IBM Migration			*/
/*                    : 1.2  17-Jul-2009  Shailesh                            */
/*                    : 1.3  12-Aug-2009  Shailesh                            */
/*										: 1.4  09-Sep-2009	Sandeep															*/
/*										: 1.5  02-Feb-2011	Sandeep															*/
/*										: 1.6  02-Feb-2011	Shailesh														*/
/*										: 1.7  24-Feb-2012	Sandip	  													*/
/*										: 1.8  02-Jul-2012	Mahesh	  													*/
/*										:	1.9	 16-Sep-2013	Bhushan Sonwane											*/
/*										:	2.0	 26-Nov-2013	Samip M															*/
/*										:	2.1	 06-Jun-2014	Navina 															*/
/*                    : 2.2  11-Jun-2014  Navina D.                           */
/*                    : 2.3  08-Jul-2014  Vishnu N.                           */
/*                    : 2.4  05-Aug-2014  Navina D.                           */
/*                    : 2.5  27-Jul-2015  Sachin Birje.                       */
/*                    : 2.7  07-Oct-2015  Tanmay W.                           */
/*                    : 2.8  18-Nov-2015  Kishor/Aakash                       */
/*                    : 2.9  16-Dec-2015  Aakash   				                    */
/*                    : 3.0  29-Feb-2016  Kishor                              */
/*                    : 3.1  06-Jun-2016  Navina/Tanmay W.                    */
/*										: 3.3	 29-Aug-2016	Kishor B.														*/
/*                    : 3.4  29-Sep-2016  Bhupendra Malik                     */
/*                    : 3.5  08-Nov-2016  Kishor B./Tanmay W. 								*/
/*                    : 3.6  30-Oct-2017  Varadraj Gramopadhye 								*/
/*                    : 3.7  09-Dec-2016  Bhupendra Malik                     */
/*                    : 3.8  22-Aug-2017  Mrinal Kishore                      */
/*                    : 3.9  27-Sep-2017  Bhushan Harekr                      */
/*                    : 4.0  04-Apr-2018  Mrinal Kishore                      */
/*                    : 4.1  25-Sep-2018  Suchita Dabir                       */
/*                    : 4.2  01-Apr-2019  Parag Kanojia                       */
/*                    : 4.3  25-Jul-2019  Kiran Itkar                         */
/*                    : 4.4  29-Aug-2019  Suchita Dabir                       */
/*                    : 4.5  14-May-2020  Sachin Birje                        */
/*                    : 4.6  12-oct-2020  Suchita Dabir                       */
/*                    : 4.7  22-Dec-2020  Tanmay Patel                        */
/*                    : 4.8  12-Jul-2021  Suchita Dabir                       */
/*                    : 4.9  06-Mar-2023  Ravi Malla 		                      */
/******************************************************************************/
/* 1.0  -  New Release                                                        */
/* 1.2  - Distri Lock Fix                                                     */
/* 1.3  - Commented Distri Lock fix(Ver 1.3) & added default routing for call */
/*        sfo_ref_to_ord                                                      */
/* 1.4	-	Partial Execution And Cancellation Case Handling										*/
/* 1.5	-	Elimination of Mail formatter call																	*/
/* 1.6	- Avoid SPAN Trades to get Processed in this service if ack not       */
/*        processed																														*/
/* 1.7	-	BSE Changes 																												*/
/* 1.8	-	Span TNC flag handling																							*/
/* 1.9	-	OptionPlus Changes																									*/
/* 2.0  - Real time SMS for Executed orders of CNT & Limit										*/
/* 2.1  - Unsolicated cancellation resp Optionplus          									*/
/* 2.2  - Execption EOS for Optionplus                                        */
/* 2.3  - Changes for HTML 5                                                  */
/* 2.4  - Fresh qty update on squareoff of cover excess position.             */
/* 2.5  - Auto MTM Changes                                                    */
/* 2.7  - MKT to Limit OPTPLUS                                                */
/* 2.8  - Fix for Modify rej & self cancellation and trade received at same time*/
/* 2.9  - Patch for deadlock condition                                        */
/* 3.0  - Changes for Core Product                                            */
/* 3.1  - Changes for part executed trade on calling Ack processing/Log Maintainance*/
/* 3.3	-	fn_ors_rms  include																									*/	
/* 3.4  - fix Ors issue                                                       */
/* 3.5  - Processing trades on functional exit  & Fill Qty Fetch              */
/* 3.6 - Hard Parsing Changes                 																*/
/* 3.7  - Cash Projection Changes                                             */
/* 3.8  - Service call with TPNOTRAN & TPNOREPLY option introduced            */
/* 3.9  - Ack Time handling                                                   */
/* 4.0  - ORDER REJECTION STATUS CLASH with My EOS                            */
/* 4.1  - Calculate Obligation for new fresh placed with 'E' flag for SLTP    */
/*        products                                                            */
/* 4.2  - FO TAP Last Activity Ref Changes ( Parag K. )                       */
/* 4.3  - Physical delivery margin changes                                    */
/* 4.4  - Changes For Updating The Recent Last Activity Ref In Table ( Suchita Dabir ) */
/* 4.5  - tpfree the error message pointer                                    */
/* 4.6  - CR_ISEC14_139243 Opls margin changes ( Suchita )                    */
/* 4.7  - CR-ISEC18-134966 Notifications,SMS for Square off  due to MTM       */
/* 4.8  - CR_ISEC04_132410 changes ( Suchita )                                */
/* 4.9  - changing fn_lock_usr to fn_lock_fno														*/
/* 5.0  -  Margin Reporting Regulatory Changes (Nikhil SOni)                    */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fn_val_ord.h>
#include <eba_to_ors.h>
/* COMMENTED IN VER TOL : TUX on LINUX (Ravindra) * #include <fo_view_def.h> */
#include <fo_fml_def.h>
#include <fml_def.h>						/* Ver 2.0 */
#include <fn_tuxlib.h>
#include <fn_pos.h>
#include <fn_ddr.h>
#include <fn_log.h>             /*  Ver 1.1 : Added */
#include <fn_session.h>					/*  Ver 1.1 : Added */
#include <fml_rout.h>						/*  Ver 1.1 : Added */
#include <fn_read_debug_lvl.h>  /*  Ver 1.1 : Added */
#include <fn_ors_rms.h>					/*  Ver 3.3 : Added */

/**** Ver 4.7 Starts ****/
int fn_mrgn_shrtfll_sms_mail (char *c_ServiceName,
                              char *c_clm_mtch_accnt,
                              char *c_xchng_cd,
                              char  c_prdct_typ,
                              char  c_indstk,
                              char *c_undrlyng,
                              char *c_expry_dt,
                              char  c_exer_typ,
                              char  c_opt_typ,
                              long  l_strk_prc,
                              char  c_typ);
/**** Ver 4.7 Ends ****/

void SFO_OPT_TCONF( TPSVCINFO *rqst )
{
	char	c_ServiceName[33];
	char	c_err_msg[256];
  char  c_tag [ 256 ];
  char  c_imtm_remarks[256];
	char  c_span_flg='N';
	char  c_bse_span_flg='N';			/** Ver 1.7 ***/
  char 	c_fxb_rms_prcsd_flag='N'; /* ver 3.6 Added for FXB_RMS_PRCSD_FLG*/
  char 	c_fod_fc_flag='C';       /* ver 3.6 Added for FOD_FC_FLAG*/
  char  c_call_typ[4] ="\0";    /** Ver 4.7 **/
/**Commented under Ver 1.3
  char  c_rowid[ 18+1 ];          *Ver 1.2*
**/

  /*** Ver 1.9 Starts ***/
  struct vw_pstn_actn *ptr_st_pstn_actn;

  char c_sltp_ord_rfrnc[19];
  char c_fc_flg;
  char c_ord_stts = '\0' ;
  char c_narration_id[4];
  char c_ord_flw = '\0';
  char c_reason_cd [ 2000 ] = "\0";      /*** Ver 2.7 ***/
  char c_tmp_rmrks [ 133 ] = "\0";       /*** Ver 2.7 ***/
  char c_frsh_ordr_rfrnc[19];            /*** ver 2.7 ***/
  char c_cvr_ordr_rfrnc[19];             /*** Ver 2.7 ***/
  char c_trgt_ord_rfrnc[19] = "\0";		 /*** Ver 2.7 ***/
  long l_net_open = 0; 									 /*** Ver 2.7 ***/
  char c_cvr_ordr_stts = 'Q';     			 /*** Ver 2.7 ***/
  char c_frsh_ordr_stts = 'Q';      		 /*** Ver 2.7 ***/
  char	frsh_rms_prcsd_flg = '\0';			/*** Ver 2.7 ***/
  char	cvr_rms_prcsd_flg = '\0';			/*** Ver 2.7 ***/
  char c_ordr_rfrnc_lck[2][19]; /**** Ver 2.9 ****/
  char c_sltp_ord_rfrnc_lck[2][19]; /*** Ver 2.9 ***/
  char c_ordr_rfrnc_core[19]; /*** Ver 3.0 ***/
	char c_rqst_typ='\0';       /*** Ver 4.3 ***/

	char c_ipord_ref[19]; /** Ver 3.1 **/
  long l_ors_msg_typ=0;	 /** Ver 3.1 **/

	double d_amt_blkd = 0.0;
  double d_lss_amt_blkd = 0.0;
  double d_ord_lmt_rt = 0.0;
  double d_fmm_sltp_prcnt = 0.0;
  double d_cvr_lmt_rt = 0.0;
  double d_new_mrgn_amt = 0.0;
  double d_new_lss_amt = 0.0;
  double d_exe_mrgn_amt = 0.0;
  double d_exe_lss_amt = 0.0;
  double d_diff_mrgn_amt = 0.0;
  double d_diff_lss_amt = 0.0;
  double d_exe_val = 0.0;
  double d_avg_prc = 0.0;
  double d_balance_amt = 0.0;
  double d_obli_pl = 0.0;
	double d_frm_diffrnc_mrgn  = 0.0;

/** ver 4.8 starts ***/
  double d_existing_dlvry_mrgn_val =0.0;
  double d_ltp = 0.0;
  long l_blcked_qty = 0;
  long l_blocked_qty = 0;
  int i_return_cd = 0;
  long l_opnpos_qty = 0;
  char c_ordr_flw = '\0';
  double d_opn_pos_val = 0.0;
  double d_funds_to_be_rqrd =0.0;
  double l_open_pos_qty = 0;
  double d_wght_price = 0.0;
  double d_val = 0.0;
  double d_funds_to_release = 0.0;
  char c_setllmnt_flg = '\0';
  long l_qty_to_unblock = 0;
/** ver 4.8 ends ***/
  char c_ref_rmrks[133] = "\0"; /*** Ver 4.6 ***/

  double d_comp1_mrgn = 0.0;  /*** Ver 4.6 ***/
  double d_comp1_pl = 0.0;    /*** Ver 4.6 ***/
  double d_xchng_amt = 0.0;   /*** Ver 4.6 ***/
  double d_prem_amt = 0.0;    /*** Ver 4.6 ***/
  double d_spn_mrgn = 0.0;    /*** Ver 4.6 ***/
  double d_expr_mrgn = 0.0;   /*** Ver 4.6 ***/

	long l_temp_stp_lss_tgr = 0;
  long l_tot_ord_qty = 0;
  long l_ord_exe_qty = 0;
  long l_rmn_qty = 0;
  long l_exe_qty = 0;
  long l_cv_exe_qty = 0;
  long l_mdfctn_cntr = 0;		/**** Ver 2.8 ****/
  long l_ftd_ord_exe_qty = 0;	/**** Ver 2.8 ****/

	/*** Ver 1.9 Ends ***/
	long l_open_qty = 0; /*** Ver 2.2 ***/


	int		i_trnsctn;
	int		i_returncode;
	int		i_ip_len;
	int		i_op_len;
	int   i_exec_rng = 0; /*** Ver 2.1 ***/
  int   i_ack_tm=0;     /**** Ver 2.8 ****/

	short int si_null;			/********* Ver 2.9 *******/

  sql_cursor     sys_cursor;    /** Ver 3.1 **/ 
	struct vw_spdxchbk st_spd_xchbk; /** Ver 3.1 **/	

	/*** FBFR32   *ptr_fml_Ibuf;	*** ver 2.7 ***/
  FBFR32   *ptr_fml_Obuf;	/*** ver 2.7 ***/

  struct vw_xchngbook st_cvr_xchngbk;	/*** ver 2.7 ***/	
	char c_lst_act_ref [22];                  /*** Ver 4.2 ***/

  int  i_recent_act_ref = 0;  /*** Ver 4.4 ***/
  long long ll_fod_last_act_no = 0; /*** Ver 4.4 ***/
  long long ll_lst_act_ref  = 0; /*** Ver 4.4 ***/
  char c_fod_last_act_no[22]; /*** Ver 4.4 ***/
  MEMSET(c_fod_last_act_no); /*** Ver 4.4 ***/

  MEMSET(c_lst_act_ref);                    /*** Ver 4.2 ***/

	EXEC SQL BEGIN DECLARE SECTION;
		struct vw_orderbook st_orderbook;
		struct vw_tradebook st_tradebook;			/********* Ver 2.9 *******/
		struct vw_tradebook *ptr_st_tradebook;
		struct vw_pstn_actn st_pstn_actn;
		struct vw_xchngbook st_xchngbook;
	EXEC SQL END DECLARE SECTION;
	
	struct vw_err_msg *ptr_st_err_msg;

	ptr_st_tradebook = ( struct vw_tradebook *)rqst->data;
	strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.1 : Added   */

	MEMSET(c_ordr_rfrnc_lck);    /********* Ver 2.9 *******/
	MEMSET(c_sltp_ord_rfrnc_lck); /********* Ver 2.9 *******/

	/*** ver 2.7 Starts***/	
	MEMSET(c_cvr_ordr_rfrnc);
	MEMSET(c_trgt_ord_rfrnc);
	MEMSET(st_cvr_xchngbk);	
	/*** ver 2.7 Ends***/	

	ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
	if ( ptr_st_err_msg ==  NULL )
	{
		fn_errlog ( c_ServiceName, "S31005", TPMSG, c_err_msg );
		tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
	}
	memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_tradebook->c_rout_crt );

  /**Commented under Ver 1.3
	**********************************************************************************

  *Ver 1.2 starts *
  fn_userlog ( c_ServiceName, "SH1-c_ordr_rfrnc:%s:", ptr_st_tradebook->c_ordr_rfrnc);

  EXEC SQL
  SELECT ROWID
  INTO   :c_rowid
  FROM  FOD_FO_ORDR_DTLS
  WHERE FOD_ORDR_RFRNC=:ptr_st_tradebook->c_ordr_rfrnc;

  if(SQLCODE != 0)
  {
    fn_errlog ( c_ServiceName, "S31010", SQLMSG, ptr_st_err_msg->c_err_msg );
    strcpy ( ptr_st_err_msg->c_err_msg, c_err_msg );
    tpfree ( ( char * ) ptr_st_tradebook );
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

  fn_userlog ( c_ServiceName, "SH2-c_row_id:%s:",c_rowid);

  i_returncode = fn_check_lock(c_ServiceName,
                           c_rowid,
                           "FOD_FO_ORDR_DTLS",
                           c_err_msg);
  if( i_returncode != NOT_LOCKED )
  {
    strcpy ( ptr_st_err_msg->c_err_msg, c_err_msg );
    tpfree ( ( char * ) ptr_st_tradebook );
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

  fn_userlog ( c_ServiceName, "SH7-After function check");

  *Ver 1.2 ends *
	**********************************************************************************
  **Comment Ends under Ver 1.3 **/

	/*** Ver 2.7 start ***/
  if(ptr_st_tradebook->c_prd_typ == OPTIONPLUS)
  {
		if(DEBUG_MSG_LVL_0)  /** Ver 3.1 **/
		{
			fn_userlog(c_ServiceName,"Trade processing started for Input Order:%s: | :%s: ",ptr_st_tradebook->c_ordr_rfrnc, ptr_st_tradebook->c_trd_rfrnc);
		}
    EXEC SQL
        SELECT
           FOD_ORDR_STTS /* 3.6 */
        INTO
          :c_cvr_ordr_stts
        FROM FOD_FO_ORDR_DTLS
        WHERE FOD_ORDR_RFRNC = (SELECT FOD_SLTP_ORDR_RFRNC FROM FOD_FO_ORDR_DTLS WHERE FOD_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc);/* 3.6 */
    if(SQLCODE != 0)
    {
      fn_errlog(c_ServiceName, "S31015", SQLMSG,  ptr_st_err_msg->c_err_msg );
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }

    EXEC SQL   /* 3.6 */
          SELECT
           FOD_ORDR_STTS,
		     	FOD_SLTP_ORDR_RFRNC
          INTO
            :c_frsh_ordr_stts,
	      		:c_cvr_ordr_rfrnc
          FROM FOD_FO_ORDR_DTLS
          WHERE FOD_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc;
	if(SQLCODE != 0)
	{
		fn_errlog(c_ServiceName, "S31020", SQLMSG,  ptr_st_err_msg->c_err_msg);
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}

  if(DEBUG_MSG_LVL_0)  /** Ver 3.1 **/
  {
		fn_userlog(c_ServiceName,"c_cvr_ordr_stts :%c c_frsh_ordr_stts : %c",c_cvr_ordr_stts, c_frsh_ordr_stts);
		fn_userlog ( c_ServiceName, " ~~~~~~~~~~~~~~~~~~ptr_st_tradebook->c_ordr_rfrnc:%s  c_cvr_ordr_rfrnc: %s ~~~~~~~~~~~~~~~~~~", ptr_st_tradebook->c_ordr_rfrnc, c_cvr_ordr_rfrnc);
	}

    if ((c_cvr_ordr_stts == QUEUED) || (c_frsh_ordr_stts == QUEUED))
    {
		MEMSET(st_cvr_xchngbk);
    /**** Commented in Ver 3.4 
		EXEC SQL
		  SELECT
			 fxb_rms_prcsd_flg
		  INTO
			  :frsh_rms_prcsd_flg
		  FROM FXB_FO_XCHNG_BOOK
		  WHERE FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc
		  AND    FXB_MDFCTN_CNTR = (select max(FXB_MDFCTN_CNTR)
								from   FXB_FO_XCHNG_BOOK
								where  FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc);  Ver 3.4 Ends ***/
			/*** Ver 3.4 Starts **********/
			EXEC SQL /* 3.6 */
			SELECT  FXB_RMS_PRCSD_FLG
			INTO		:frsh_rms_prcsd_flg
			FROM    FXB_FO_XCHNG_BOOK
			WHERE		FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc
			AND    FXB_MDFCTN_CNTR = (SELECT MIN(FXB_MDFCTN_CNTR)
																FROM	 FXB_FO_XCHNG_BOOK
																WHERE	 FXB_ORDR_RFRNC= :ptr_st_tradebook->c_ordr_rfrnc
																AND		 FXB_JIFFY     = (SELECT MIN(FXB_JIFFY)
																												FROM	 FXB_FO_XCHNG_BOOK
																												WHERE	 FXB_ORDR_RFRNC= :ptr_st_tradebook->c_ordr_rfrnc
												 																AND		 FXB_RMS_PRCSD_FLG=:c_fxb_rms_prcsd_flag)
																AND			FXB_RMS_PRCSD_FLG=:c_fxb_rms_prcsd_flag)
			AND		FXB_RMS_PRCSD_FLG=:c_fxb_rms_prcsd_flag;
			/**** Ver 3.4 Ends **************/			
		if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND) /*** SQLCODE != NO_DATA_FOUND Added in Ver 3.4 ***/
		{
			fn_errlog(c_ServiceName, "S31025", SQLMSG,  ptr_st_err_msg->c_err_msg);
			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
		}
		 /********* commented in Ver 3.4 **
		EXEC SQL
		  SELECT
			 fxb_rms_prcsd_flg
		  INTO
			  :cvr_rms_prcsd_flg 
		  FROM FXB_FO_XCHNG_BOOK
		  WHERE FXB_ORDR_RFRNC = :c_cvr_ordr_rfrnc
		  AND    FXB_MDFCTN_CNTR = (select max(FXB_MDFCTN_CNTR)
									from   FXB_FO_XCHNG_BOOK
									where  FXB_ORDR_RFRNC = :c_cvr_ordr_rfrnc); Ver 3.4 Ends**/
			/**** Ver 3.4 Starts ****/
			EXEC SQL /* 3.6 */
			SELECT  FXB_RMS_PRCSD_FLG
			INTO		:cvr_rms_prcsd_flg
			FROM    FXB_FO_XCHNG_BOOK
			WHERE		FXB_ORDR_RFRNC = :c_cvr_ordr_rfrnc
			AND    FXB_MDFCTN_CNTR = (SELECT MIN(FXB_MDFCTN_CNTR)
																FROM	 FXB_FO_XCHNG_BOOK
																WHERE	 FXB_ORDR_RFRNC= :c_cvr_ordr_rfrnc
																AND		 FXB_JIFFY     = (SELECT MIN(FXB_JIFFY)
																												FROM	 FXB_FO_XCHNG_BOOK
																												WHERE	 FXB_ORDR_RFRNC= :c_cvr_ordr_rfrnc
												 																AND		 FXB_RMS_PRCSD_FLG=:c_fxb_rms_prcsd_flag)
																AND			FXB_RMS_PRCSD_FLG=:c_fxb_rms_prcsd_flag)
			AND		FXB_RMS_PRCSD_FLG=:c_fxb_rms_prcsd_flag;
			/*** Ver 3.4 Ends ****/
		if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND) /*** SQLCODE != NO_DATA_FOUND Added in  Ver 3.4 ***/
		{
			fn_errlog(c_ServiceName, "S31030", SQLMSG,  ptr_st_err_msg->c_err_msg);
			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
		}

		if(frsh_rms_prcsd_flg == 'N' && cvr_rms_prcsd_flg == 'N')
			strcpy( c_trgt_ord_rfrnc, ptr_st_tradebook->c_ordr_rfrnc);
		else if (frsh_rms_prcsd_flg == 'N' && cvr_rms_prcsd_flg != 'N')
			strcpy( c_trgt_ord_rfrnc, ptr_st_tradebook->c_ordr_rfrnc);
		else if (frsh_rms_prcsd_flg != 'N' && cvr_rms_prcsd_flg == 'N')
			strcpy( c_trgt_ord_rfrnc, c_cvr_ordr_rfrnc);

		/******* Commented in Ver 3.4 ***	
		EXEC SQL
		  SELECT FXB_ORS_MSG_TYP,
				 FXB_MDFCTN_CNTR,
				 nvl(to_char(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-')
		  INTO   :st_cvr_xchngbk.l_ors_msg_typ,
				 :st_cvr_xchngbk.l_mdfctn_cntr,
				 :st_cvr_xchngbk.c_ack_tm
		  FROM   FXB_FO_XCHNG_BOOK
		  WHERE  FXB_ORDR_RFRNC = :c_trgt_ord_rfrnc
		  AND    FXB_MDFCTN_CNTR = (select max(FXB_MDFCTN_CNTR)
									from   FXB_FO_XCHNG_BOOK
									where  FXB_ORDR_RFRNC = :c_trgt_ord_rfrnc)
		  AND    FXB_RMS_PRCSD_FLG = 'N'; Ver 3.4 Ends ***/
						/***** Ver 3.4 Starts *******/
			EXEC SQL /* 3.6 */
			SELECT FXB_ORS_MSG_TYP,
						 FXB_MDFCTN_CNTR,
						 NVL(TO_CHAR(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-'),
             NVL(FXB_XCHNG_CNCLD_QTY,0)                                   /**** Ver 3.5 *****/
			INTO   :st_cvr_xchngbk.l_ors_msg_typ,
						 :st_cvr_xchngbk.l_mdfctn_cntr,
						 :st_cvr_xchngbk.c_ack_tm,
             :st_cvr_xchngbk.l_xchng_can_qty                              /***** Ver 3.5 ***/
			FROM   FXB_FO_XCHNG_BOOK
			WHERE  FXB_ORDR_RFRNC = :c_trgt_ord_rfrnc
			AND    FXB_MDFCTN_CNTR =(SELECT MIN(FXB_MDFCTN_CNTR)
																FROM	 FXB_FO_XCHNG_BOOK
																WHERE	 FXB_ORDR_RFRNC= :c_trgt_ord_rfrnc
																AND		 FXB_JIFFY     = (SELECT MIN(FXB_JIFFY)
																												FROM	 FXB_FO_XCHNG_BOOK
																												WHERE	 FXB_ORDR_RFRNC= :c_trgt_ord_rfrnc
												 																AND		 FXB_RMS_PRCSD_FLG=:c_fxb_rms_prcsd_flag)
																AND			FXB_RMS_PRCSD_FLG=:c_fxb_rms_prcsd_flag)
			AND		FXB_RMS_PRCSD_FLG=:c_fxb_rms_prcsd_flag; 
			/***** Ver 3.4 Ends *******/

		if(SQLCODE !=0)
		{
			fn_errlog(c_ServiceName, "S31035", SQLMSG,  ptr_st_err_msg->c_err_msg);
			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
		}

		strcpy(st_cvr_xchngbk.c_entry_dt_tm , st_cvr_xchngbk.c_ack_tm);

		st_cvr_xchngbk.d_jiffy       = 0;
		st_cvr_xchngbk.l_dwnld_flg   = 0;
		fn_cpy_ddr ( st_cvr_xchngbk.c_rout_crt );
		strcpy(st_cvr_xchngbk.c_xchng_rmrks,"*");
		strcpy(st_cvr_xchngbk.c_ordr_rfrnc, c_trgt_ord_rfrnc); 


		/*** Ver 3.1 starts *** **** Commented in Ver 3.5  ******
		l_ftd_ord_exe_qty = 0;

		EXEC SQL
			SELECT  NVL(SUM(ftd_exctd_qty),0)
			INTO    :l_ftd_ord_exe_qty
			FROM    ftd_fo_trd_dtls
			WHERE   ftd_ordr_rfrnc = :st_cvr_xchngbk.c_ordr_rfrnc;

		if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
		{
			fn_errlog(c_ServiceName, "S31040", SQLMSG,  ptr_st_err_msg->c_err_msg);
			tpfree((char*)ptr_fml_Obuf);
			free((char *) ptr_st_tradebook);
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}

    if(DEBUG_MSG_LVL_0)
    {
			fn_userlog( c_ServiceName, "l_ftd_ord_exe_qty: %ld",l_ftd_ord_exe_qty);
		}
		st_cvr_xchngbk.l_xchng_can_qty = l_ftd_ord_exe_qty;
		*** Ver 3.1 ends ***

		********** Commented ver 3.5 Ends ************/

		i_returncode = fn_acall_svc ( c_ServiceName,
								 c_err_msg,
								 &st_cvr_xchngbk,
								 "vw_xchngbook",
								 sizeof ( st_cvr_xchngbk ),
								 TPNOREPLY,
								 "SFO_OPT_ACK" );
		  if ( i_returncode != 0 )
		  {
				fn_errlog ( c_ServiceName, "S31045", LIBMSG, ptr_st_err_msg->c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		  }
      fn_errlog(c_ServiceName, "S31050", LIBMSG,  ptr_st_err_msg->c_err_msg);
      tpfree((char*) ptr_st_err_msg);  /** Ver 4.5 **/
      tpreturn(TPSUCCESS, SUCC_BFR, NULL ,0, 0 );
    }
  }
  /*** Ver 2.7 End ***/
  /*** Ver 3.0 Starts ***/
  else if(ptr_st_tradebook->c_prd_typ == OPTIONS )
  {
    if(DEBUG_MSG_LVL_0)  /** Ver 3.1 **/
    {
 			fn_userlog(c_ServiceName,"Trade processing started for Input Order:%s: | :%s: ",ptr_st_tradebook->c_ordr_rfrnc, ptr_st_tradebook->c_trd_rfrnc);
		}
    EXEC SQL
          SELECT
           FOD_ORDR_STTS /* 3.6 */
          INTO
            :c_frsh_ordr_stts
          FROM FOD_FO_ORDR_DTLS
          WHERE FOD_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc;

  if(SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31055", SQLMSG,  ptr_st_err_msg->c_err_msg);
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

  if(DEBUG_MSG_LVL_3)  /** Ver 3.1 **/
  {
  	fn_userlog(c_ServiceName,"c_frsh_ordr_stts : %c",c_frsh_ordr_stts);
		fn_userlog ( c_ServiceName, " ~~~~~~~~~~~~~~~~~~ptr_st_tradebook->c_ordr_rfrnc:%s~~~~~~~~~~~~~~~~~~", ptr_st_tradebook->c_ordr_rfrnc);
	}
    if (c_frsh_ordr_stts == QUEUED)
    {
    MEMSET(st_cvr_xchngbk);

    if(DEBUG_MSG_LVL_3)  /** Ver 3.1 **/
    {
        fn_userlog( c_ServiceName, "Size of st_cvr_xchngbk :%d:", sizeof(st_cvr_xchngbk));
		}
		/** Ver 3.1 **
    EXEC SQL
      SELECT FXB_ORS_MSG_TYP,
         		 FXB_MDFCTN_CNTR,
         		 nvl(to_char(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-')
      INTO   :st_cvr_xchngbk.l_ors_msg_typ,
         		 :st_cvr_xchngbk.l_mdfctn_cntr,
         		 :st_cvr_xchngbk.c_ack_tm
      FROM   FXB_FO_XCHNG_BOOK
      WHERE  FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc
      AND    FXB_MDFCTN_CNTR = (select max(FXB_MDFCTN_CNTR)
                  from   FXB_FO_XCHNG_BOOK
                  where  FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc)
      AND    FXB_RMS_PRCSD_FLG = 'N';

		*** Ver 3.1 ***/

		/** Ver 3.1 Added **/

		
      EXEC SQL /* 3.6 */
      	SELECT 	FXB_ORS_MSG_TYP,
           			FXB_MDFCTN_CNTR,
          			NVL(TO_CHAR(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-'),
           	 		NVL(FXB_XCHNG_CNCLD_QTY,0)                                   /**** Ver 3.5 *****/
      	INTO   	:st_cvr_xchngbk.l_ors_msg_typ,
          	 		:st_cvr_xchngbk.l_mdfctn_cntr,
          	 		:st_cvr_xchngbk.c_ack_tm,
             		:st_cvr_xchngbk.l_xchng_can_qty                              /***** Ver 3.5 ***/
      	FROM   	FXB_FO_XCHNG_BOOK
      	WHERE  	FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc
      	AND    	FXB_JIFFY =
                        (SELECT MIN(FXB_JIFFY)
                           FROM   FXB_FO_XCHNG_BOOK
                          WHERE  FXB_ORDR_RFRNC =:ptr_st_tradebook->c_ordr_rfrnc
                            AND  FXB_RMS_PRCSD_FLG = :c_fxb_rms_prcsd_flag)
      AND    FXB_RMS_PRCSD_FLG = :c_fxb_rms_prcsd_flag;

		/** Ver 3.1 Added **/

    if(SQLCODE !=0)
    {
      fn_errlog(c_ServiceName, "S31060", SQLMSG,  ptr_st_err_msg->c_err_msg);
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }

		/*** Ver 3.1 *** Starts ***/
		if((st_cvr_xchngbk.l_ors_msg_typ == ORS_2LN_ORD_ACPT)|| (st_cvr_xchngbk.l_ors_msg_typ == ORS_3LN_ORD_ACPT))
		{ 
			MEMSET(c_ipord_ref);	
		  l_ors_msg_typ=st_cvr_xchngbk.l_ors_msg_typ;
      strcpy(c_ipord_ref,ptr_st_tradebook->c_ordr_rfrnc);	
    
			if(DEBUG_MSG_LVL_3)  /** Ver 3.1 **/
    	{
    	  fn_userlog(c_ServiceName,"l_ors_msg_typ*****:%ld:",l_ors_msg_typ);
    	  fn_userlog(c_ServiceName,"st_cvr_xchngbk.l_ors_msg_typ*****:%ld:",st_cvr_xchngbk.l_ors_msg_typ);
			}
			i_returncode = fn_spd_acpt(c_ServiceName,c_ipord_ref,l_ors_msg_typ);

			  if( i_returncode == -1)
        {
          fn_errlog(c_ServiceName, "S31065", SQLMSG,  ptr_st_err_msg->c_err_msg);
          /** free((char*) ptr_st_err_msg); *** Commented in Ver 4.5 **/
          tpfree((char*)ptr_fml_Obuf);
          /***free((char *) ptr_st_tradebook);**Ver 4.5 **/
          tpfree ( ( char * ) ptr_st_tradebook );  /** Ver 4.5 **/      
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
        }
        
        tpfree((char*) ptr_st_err_msg);  /** Ver 4.5 **/ 
        tpreturn(TPSUCCESS, SUCC_BFR, NULL ,0, 0 );
		}
			/*** Ver 3.1 *** Ends ***/

    	strcpy(st_cvr_xchngbk.c_entry_dt_tm , st_cvr_xchngbk.c_ack_tm);

 	   st_cvr_xchngbk.d_jiffy       = 0;
 	   st_cvr_xchngbk.l_dwnld_flg   = 0;
 	   fn_cpy_ddr ( st_cvr_xchngbk.c_rout_crt );
 	   strcpy(st_cvr_xchngbk.c_xchng_rmrks,"*");
 	   strcpy(st_cvr_xchngbk.c_ordr_rfrnc, ptr_st_tradebook->c_ordr_rfrnc);
        
		if(DEBUG_MSG_LVL_3)  /** Ver 3.1 **/
    {	
			fn_userlog( c_ServiceName, "Size of ptr_st_tradebook->c_ordr_rfrnc :%d:", sizeof(ptr_st_tradebook->c_ordr_rfrnc));
		}

		/*** Ver 3.1 starts *** ****Commented in ver 3.5 ********
		l_ftd_ord_exe_qty = 0 ;

		EXEC SQL
			SELECT  NVL(SUM(ftd_exctd_qty),0)
			INTO    :l_ftd_ord_exe_qty
			FROM    ftd_fo_trd_dtls
			WHERE   ftd_ordr_rfrnc = :st_cvr_xchngbk.c_ordr_rfrnc;

		if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
		{
      fn_errlog(c_ServiceName, "S31070", SQLMSG,  ptr_st_err_msg->c_err_msg);
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
		}

    if(DEBUG_MSG_LVL_3)  ** Ver 3.1 **
    {
			fn_userlog( c_ServiceName, "l_ftd_ord_exe_qty: %ld",l_ftd_ord_exe_qty);
		}
		st_cvr_xchngbk.l_xchng_can_qty = l_ftd_ord_exe_qty;
		*** Ver 3.1 ends ***
		********* Commented in ver 3.5 Ends **********/

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog( c_ServiceName, "Before Calling  SFO_OPT_ACK for Order Ref:%s:", ptr_st_tradebook->c_ordr_rfrnc);
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_entry_dt_tm:%s:", st_cvr_xchngbk.c_entry_dt_tm);
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_ack_tm:%s:", st_cvr_xchngbk.c_ack_tm);
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_mdfctn_cntrm:%ld:", st_cvr_xchngbk.l_mdfctn_cntr);
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_ors_msg_typ:%ld:", st_cvr_xchngbk.l_ors_msg_typ);
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_ordr_rfrnc:%s:", st_cvr_xchngbk.c_ordr_rfrnc);
        fn_userlog( c_ServiceName, "Size of st_cvr_xchngbk :%d:", sizeof(st_cvr_xchngbk));
        fn_userlog( c_ServiceName, "Size of st_cvr_xchngbk.c_ordr_rfrnc:%d:", sizeof(st_cvr_xchngbk.c_ordr_rfrnc));
      }
    i_returncode = fn_acall_svc ( c_ServiceName,
                 c_err_msg,
                 &st_cvr_xchngbk,
                 "vw_xchngbook",
                 sizeof ( st_cvr_xchngbk ),
                 TPNOREPLY,
                 "SFO_OPT_ACK" );
      if ( i_returncode != 0 )
      {
        fn_errlog ( c_ServiceName, "S31075", LIBMSG, ptr_st_err_msg->c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
      }
      tpfree((char*) ptr_st_err_msg);  /** Ver 4.5 **/
      tpreturn(TPSUCCESS, SUCC_BFR, NULL ,0, 0 );
   }
  }
  /***  Ver 3.0 Ends ***/

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
	if ( i_trnsctn == -1 )
	{
  	fn_errlog ( c_ServiceName, "S31080", LIBMSG, ptr_st_err_msg->c_err_msg );
		strcpy ( ptr_st_err_msg->c_err_msg, c_err_msg );
		tpfree ( ( char * ) ptr_st_tradebook );
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}

   /*************** Ver 2.9 starts ***********************/

	if(DEBUG_MSG_LVL_3)  /** Ver 3.1 **/
  {
		fn_userlog( c_ServiceName, "ptr_st_tradebook->c_prd_typ : %c", ptr_st_tradebook->c_prd_typ);
	}
	if(ptr_st_tradebook->c_prd_typ == OPTIONPLUS)
	{
		MEMSET(c_sltp_ord_rfrnc);

		EXEC SQL /* 3.6 */
		  SELECT
			  FOD_SLTP_ORDR_RFRNC
		  INTO
			  :c_sltp_ord_rfrnc
		  FROM  FOD_FO_ORDR_DTLS
		  WHERE FOD_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc; 
		if(SQLCODE !=0)
		{
		  fn_errlog ( c_ServiceName, "S31085", SQLMSG, ptr_st_err_msg->c_err_msg );
		  fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
		  tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
		}

    if(DEBUG_MSG_LVL_3)  /** Ver 3.1 **/
    {
			fn_userlog( c_ServiceName, "Ak2.9 : ptr_st_tradebook->c_ordr_rfrnc :%s:,c_sltp_ord_rfrnc = :%s:",ptr_st_tradebook->c_ordr_rfrnc ,c_sltp_ord_rfrnc);
		}
		EXEC  SQL
		SELECT  FOD_ORDR_RFRNC,
			FOD_SLTP_ORDR_RFRNC
		INTO    :c_ordr_rfrnc_lck,
			:c_sltp_ord_rfrnc_lck
		FROM    FOD_FO_ORDR_DTLS
		WHERE   FOD_ORDR_RFRNC in (:ptr_st_tradebook->c_ordr_rfrnc ,:c_sltp_ord_rfrnc)
		FOR   UPDATE OF FOD_ORDR_RFRNC NOWAIT;
		if ( SQLCODE != 0)
		{
		  if (SQLCODE == -54)
		  {
			fn_userlog( c_ServiceName, "Resource busy and acquire with NOWAIT specified or timeout expired");
		  }
		  fn_errlog ( c_ServiceName, "S31090", SQLMSG, ptr_st_err_msg->c_err_msg );
		  fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}
		else
		{
		  fn_userlog( c_ServiceName, "Ak2.9 :Sucessfully acquired FOR UPDATE NOWAIT on :%s: and :%s:",ptr_st_tradebook->c_ordr_rfrnc ,c_sltp_ord_rfrnc);
		}

		fn_userlog( c_ServiceName, "Ak2.9 :After NOWAIT on :%s: and :%s:",ptr_st_tradebook->c_ordr_rfrnc ,c_sltp_ord_rfrnc);
	}
  /*************** Ver 2.9 Ends ***********************/
  /******** Ver 3.0 Starts *********/
  else if(ptr_st_tradebook->c_prd_typ == OPTIONS )
  {

    if(DEBUG_MSG_LVL_3)  /** Ver 3.1 **/
    {
    	fn_userlog( c_ServiceName, "ptr_st_tradebook->c_ordr_rfrnc :%s:",ptr_st_tradebook->c_ordr_rfrnc);
		}
    EXEC  SQL
    SELECT  FOD_ORDR_RFRNC
    INTO    :c_ordr_rfrnc_core
    FROM    FOD_FO_ORDR_DTLS
    WHERE   FOD_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc
    FOR   UPDATE OF FOD_ORDR_RFRNC NOWAIT;
    if ( SQLCODE != 0)
    {
      if (SQLCODE == -54)
      {
      fn_userlog( c_ServiceName, "Resource busy and acquire with NOWAIT specified or timeout expired");
      }
      fn_errlog ( c_ServiceName, "S31095", SQLMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }
    else
    {
      fn_userlog( c_ServiceName, "Sucessfully acquired FOR UPDATE NOWAIT on :%s:",ptr_st_tradebook->c_ordr_rfrnc);
    }
  }
  /******** Ver 3.0 Ends *********/

	strcpy( st_orderbook.c_ordr_rfrnc, ptr_st_tradebook->c_ordr_rfrnc );
	st_orderbook.c_oprn_typ = FOR_UPDATE;
	
	i_ip_len = sizeof ( struct vw_orderbook );
	i_op_len = sizeof ( struct vw_orderbook );

  /*** Added for Order Routing ***/

  /**Commented under Ver 1.3
	fn_cpy_ddr ( st_orderbook.c_rout_crt );
  **/

  strcpy( st_orderbook.c_rout_crt,"000" ); /**Ver 1.3 Default routing to get different grp than pack client **/
	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_orderbook,
                              &st_orderbook,
                              "vw_orderbook",
                              "vw_orderbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_REF_TO_ORD" );

	if ( i_returncode != SUCC_BFR )
	{
  	fn_errlog ( c_ServiceName, "S31100", LIBMSG, ptr_st_err_msg->c_err_msg );
  	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
	}

  /****Ver 1.6 starts ****/

  EXEC SQL
  SELECT NVL(CLM_SPAN_ALLWD,'N'),
				 NVL(CLM_BSESPAN_ALLWD,'N')			/** Ver 1.7 ***/
  INTO   :c_span_flg,
				 :c_bse_span_flg								/** Ver 1.7 **/
  FROM   CLM_CLNT_MSTR
  WHERE  CLM_MTCH_ACCNT = :st_orderbook.c_cln_mtch_accnt;
  if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
  {
    fn_errlog ( c_ServiceName, "S31105", SQLMSG, ptr_st_err_msg->c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  }

  if(DEBUG_MSG_LVL_3)  /** Ver 3.1 **/
  {
  	fn_userlog(c_ServiceName,"SPAN FLAG =:%c:",c_span_flg);
  	fn_userlog(c_ServiceName,"BSE SPAN FLAG =:%c:",c_bse_span_flg);
	}
  /*** if(c_span_flg == 'Y')	Ver 1.8					*** Ver 1.7 comment **/

	/*** Ver 1.8 SPAN flag Z added in condition for customer who not accepted TNC ***/

  if( ( ( c_span_flg == 'Y' || c_span_flg =='Z' ) && strcmp(st_orderbook.c_xchng_cd,"NFO") == 0 )|| 
			( c_bse_span_flg == 'Y' && strcmp(st_orderbook.c_xchng_cd,"BFO") == 0 )
		 ) /*** Ver 1.7 **/
  {
    fn_userlog(c_ServiceName,"CANNOT PROCESS SPAN TRADE IN NORMAL SERVICE");
    strcpy(ptr_st_err_msg->c_err_msg,"CANNOT PROCESS SPAN TRADE IN NORMAL SERVICE");
    fn_errlog ( c_ServiceName, "S31110", LIBMSG, ptr_st_err_msg->c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  }

  /****Ver 1.6 ends ****/

	if(ptr_st_tradebook->c_prd_typ != OPTIONPLUS)			    /****Added in Ver 2.9 ****/
	{
		/* i_returncode = fn_lock_usr( c_ServiceName,  st_orderbook.c_cln_mtch_accnt ); commented in Ver 4.9 */
		i_returncode = fn_lock_fno( c_ServiceName,  st_orderbook.c_cln_mtch_accnt ); /* added in Ver 4.9 */
		if ( i_returncode != 0 )
		{
		fn_errlog ( c_ServiceName, "S31115", LIBMSG, ptr_st_err_msg->c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}
	}

	EXEC SQL /* 3.6 */
		SELECT	FTD_RMS_PRCSD_FLG,
						NVL(FTD_LST_ACT_REF,'0')          /*** Ver 4.2 ***/ /** ver 4.4 null replaced with '*' changed to '0' ***/
		INTO		:ptr_st_tradebook->c_rms_prcsd_flg,
						:c_lst_act_ref          					/*** Ver 4.2 ***/
		FROM		FTD_FO_TRD_DTLS
		WHERE		FTD_ORDR_RFRNC	=	:ptr_st_tradebook->c_ordr_rfrnc
		AND 		FTD_EBA_TRD_REF	=	:ptr_st_tradebook->c_trd_rfrnc;

	if ( SQLCODE != 0 )
	{
  	fn_errlog ( c_ServiceName, "S31120", SQLMSG, ptr_st_err_msg->c_err_msg );
  	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
	}

	rtrim(c_lst_act_ref);             /*** Ver 4.2 ***/

	if ( ( st_orderbook.c_ordr_stts  == QUEUED ) || 
       ( ptr_st_tradebook->c_rms_prcsd_flg == 'P' ) )
	{
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    /*** Ver 3.5 Starts Here ***/
    i_returncode= fn_prcs_ack(c_ServiceName,c_err_msg, ptr_st_tradebook->c_prd_typ,ptr_st_tradebook->c_ordr_rfrnc);

    if(i_returncode != 0)
    {
      fn_errlog ( c_ServiceName, "S31125", LIBMSG, ptr_st_err_msg->c_err_msg );
    }

    i_returncode= fn_prcs_trd(c_ServiceName,c_err_msg,ptr_st_tradebook->c_prd_typ,ptr_st_tradebook->c_ordr_rfrnc);

    if(i_returncode != 0)
    {
      fn_errlog ( c_ServiceName, "S31130", LIBMSG, ptr_st_err_msg->c_err_msg );
    }
    /*** Ver 3.5 Ends Here ***/
    tpfree((char*) ptr_st_err_msg);  /** Ver 4.5 **/
  	tpreturn(TPSUCCESS, SUCC_BFR, (char *)ptr_st_tradebook, 0, 0 );
	}

  /*** The trade confirmation should not be updated, if any ***/
  /*** outstanding mod/cancel order is pending              ***/
  EXEC SQL /* 3.6 */
    SELECT FXB_RQST_TYP,
           FXB_PLCD_STTS
    INTO  :st_xchngbook.c_req_typ,
          :st_xchngbook.c_plcd_stts
    FROM FXB_FO_XCHNG_BOOK
    WHERE FXB_ORDR_RFRNC = :st_orderbook.c_ordr_rfrnc
    AND FXB_MDFCTN_CNTR = :st_orderbook.l_mdfctn_cntr;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31135", SQLMSG, ptr_st_err_msg->c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  }

  if ( ( st_xchngbook.c_plcd_stts  == QUEUED ) ||
       ( st_xchngbook.c_plcd_stts  == REQUESTED ) )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    /*** Ver 3.5 Starts Here ***/
    i_returncode= fn_prcs_ack(c_ServiceName,c_err_msg, ptr_st_tradebook->c_prd_typ,ptr_st_tradebook->c_ordr_rfrnc);

    if(i_returncode != 0)
    {
      fn_errlog ( c_ServiceName, "S31140", LIBMSG, ptr_st_err_msg->c_err_msg );
    }
    /*** Ver 3.5 Ends Here ***/
    tpfree((char*) ptr_st_err_msg);  /** Ver 4.5 **/
    tpreturn(TPSUCCESS, SUCC_BFR, (char *)ptr_st_tradebook, 0, 0 );
  }

  strcpy(st_pstn_actn.c_user_id,"system");
  st_pstn_actn.l_session_id  = 0;
	strcpy( st_pstn_actn.c_cln_mtch_accnt , ptr_st_tradebook->c_cln_mtch_accnt );
	st_pstn_actn.l_eba_cntrct_id = ptr_st_tradebook->l_eba_cntrct_id;
	strcpy( st_pstn_actn.c_xchng_cd , ptr_st_tradebook->c_xchng_cd );
	st_pstn_actn.c_prd_typ = ptr_st_tradebook->c_prd_typ;
	strcpy( st_pstn_actn.c_undrlyng , ptr_st_tradebook->c_undrlyng );
	strcpy( st_pstn_actn.c_expry_dt , ptr_st_tradebook->c_expry_dt );
	st_pstn_actn.c_exrc_typ  = ptr_st_tradebook->c_exrc_typ;
	st_pstn_actn.c_opt_typ = ptr_st_tradebook->c_opt_typ;
	st_pstn_actn.l_strike_prc = ptr_st_tradebook->l_strike_prc;
	st_pstn_actn.c_ctgry_indstk = ptr_st_tradebook->c_ctgry_indstk;
	st_pstn_actn.l_ca_lvl  = ptr_st_tradebook->l_ca_lvl;
	st_pstn_actn.c_cntrct_tag  = '*';

	st_pstn_actn.l_actn_typ = ORS_TRD_CONF;
	st_pstn_actn.c_trnsctn_flw = ptr_st_tradebook->c_trd_flw;
	st_pstn_actn.l_orgnl_qty = st_orderbook.l_ord_tot_qty;
	st_pstn_actn.l_orgnl_rt = st_orderbook.l_ord_lmt_rt;
	st_pstn_actn.l_new_qty = 0;
	st_pstn_actn.l_new_rt = 0;
	st_pstn_actn.l_exec_qty = ptr_st_tradebook->l_exctd_qty;
	st_pstn_actn.l_exec_rt = ptr_st_tradebook->l_exctd_rt;
	st_pstn_actn.l_fresh_qty  = 0;
	st_pstn_actn.l_cover_qty  = 0;
	st_pstn_actn.d_add_mrgn_amt  = 0;
  st_pstn_actn.l_curr_rt = 0;

  sprintf(st_pstn_actn.c_ref_rmrks,"%s-T",ptr_st_tradebook->c_trd_rfrnc);
  rtrim(st_pstn_actn.c_ref_rmrks);

	i_ip_len = sizeof ( struct vw_pstn_actn );
	i_op_len = sizeof ( struct vw_pstn_actn );

  /*** Added for Order Routing ***/
	fn_cpy_ddr ( st_pstn_actn.c_rout_crt );

	if( ptr_st_tradebook->c_prd_typ != OPTIONPLUS )   /*** Ver 1.9 ** if Condition Added To Skip OptionPlus ***/
	{
		i_returncode = fn_call_svc( c_ServiceName,
    	                          c_err_msg,
      	                        &st_pstn_actn,
        	                      &st_pstn_actn,
          	                    "vw_pstn_actn",
            	                  "vw_pstn_actn",
              	                i_ip_len,
                	              i_op_len,
                  	            0,
                    	          "SFO_UPD_OPT_POS" );

		if ( i_returncode != SUCC_BFR )
		{
  		fn_errlog ( c_ServiceName, "S31145", LIBMSG, ptr_st_err_msg->c_err_msg );
  		fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
  		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}

  	if ( st_pstn_actn.c_mtm_flag == FOR_REMARKS_ENTRY )
  	{
    	sprintf(c_imtm_remarks,
      	      "SQUAREOFF ORDER [%s] EXECUTED ,TRADE REF - [%s], QTY - [%ld]",
        	    ptr_st_tradebook->c_ordr_rfrnc,
          	  ptr_st_tradebook->c_trd_rfrnc,
            	ptr_st_tradebook->l_exctd_qty );

	    i_returncode = fn_ins_opt_rep_tbl ( c_ServiceName,
  	                                  		c_err_msg,
    	                                		&st_pstn_actn,
      	                              		c_imtm_remarks );
    	if ( i_returncode != 0 )
    	{
      	fn_errlog ( c_ServiceName, "S31150", LIBMSG, c_err_msg );
      	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    	}
  	}
    /*** ver 4.8 starts ***/
      EXEC SQL
      SELECT  NVL(FTQ_SETLMNT_FLG,'C'),
              NVL(FTQ_LST_TRD_PRC,0)
      INTO    :c_setllmnt_flg,
              :d_ltp
      FROM    FTQ_FO_TRD_QT
      WHERE   FTQ_XCHNG_CD        = :st_pstn_actn.c_xchng_cd
      AND     FTQ_PRDCT_TYP       = :st_pstn_actn.c_prd_typ
      AND     FTQ_UNDRLYNG        = :st_pstn_actn.c_undrlyng
      AND     FTQ_INDSTK          = :st_pstn_actn.c_ctgry_indstk
      AND     FTQ_STRK_PRC        = :st_pstn_actn.l_strike_prc
      AND     FTQ_OPT_TYP         = :st_pstn_actn.c_opt_typ  
      AND     FTQ_EXPRY_DT        = to_date( :st_pstn_actn.c_expry_dt,'dd-mon-yyyy' )
      AND     FTQ_EXER_TYP        = :st_pstn_actn.c_exrc_typ;
    if (SQLCODE != 0)
    {
      fn_errlog ( c_ServiceName, "S31155", SQLMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }

    if(DEBUG_MSG_LVL_3){
    fn_userlog ( c_ServiceName, "SUCHITAAA :%c:%lf:",c_setllmnt_flg,d_ltp );
    }

     if( c_setllmnt_flg == 'P' )
     {

        EXEC SQL
        SELECT ABS(FOP_OPNPSTN_QTY),
               NVL(FOP_DLVRY_OBLGAMT_BLCKD,0.0),
               FOP_OPNPSTN_FLW,
               NVL(FOP_DLVRY_QTY_BLCKD,0) 
        INTO   :l_opnpos_qty,
               :d_existing_dlvry_mrgn_val,
               :c_ordr_flw,
               :l_blocked_qty
        FROM   FOP_FO_OPTIONS_PSTN
        WHERE  FOP_CLM_MTCH_ACCNT  = :st_pstn_actn.c_cln_mtch_accnt
        AND    FOP_XCHNG_CD        = :st_pstn_actn.c_xchng_cd
        AND    FOP_PRDCT_TYP       = :st_pstn_actn.c_prd_typ
        AND    FOP_OPT_TYP         = :st_pstn_actn.c_opt_typ
        AND    FOP_EXER_TYP        = :st_pstn_actn.c_exrc_typ
        AND    FOP_UNDRLYNG        = :st_pstn_actn.c_undrlyng
        AND    FOP_EXPRY_DT        = :st_pstn_actn.c_expry_dt
        AND    FOP_STRK_PRC        = :st_pstn_actn.l_strike_prc;
    if (SQLCODE != 0)
    {
      fn_errlog ( c_ServiceName, "S31160", SQLMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }

    if(DEBUG_MSG_LVL_3){
    fn_userlog ( c_ServiceName, "SUCHITAAA :%ld:%lf:%c:%lf: ",l_opnpos_qty,d_existing_dlvry_mrgn_val,c_ordr_flw,d_opn_pos_val );
    }
	  if( st_pstn_actn.c_trnsctn_flw != c_ordr_flw )
		{	

     if( d_existing_dlvry_mrgn_val > 0)
     {

       d_funds_to_be_rqrd = l_opnpos_qty * st_pstn_actn.l_strike_prc;
 
       d_funds_to_release =d_existing_dlvry_mrgn_val - d_funds_to_be_rqrd;

       
      if( d_funds_to_release > 0 )
      {
        i_returncode = fn_upd_limits( c_ServiceName,
                                    &st_pstn_actn,
                                    ptr_st_err_msg,
                                    REL_PHYSICAL_DELIVERY_MARGIN,
                                    DEBIT_WITHOUT_LIMIT,
                                    d_funds_to_release,
                                    &d_balance_amt);
      if ( i_returncode != 0 )
      {
       fn_errlog ( c_ServiceName, "S31165", LIBMSG, ptr_st_err_msg->c_err_msg );
       fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
      }

        EXEC SQL
        UPDATE   FOP_FO_OPTIONS_PSTN
          SET  FOP_DLVRY_OBLGAMT_BLCKD =NVL( FOP_DLVRY_OBLGAMT_BLCKD,0) - :d_funds_to_release
        WHERE  FOP_CLM_MTCH_ACCNT  = :st_pstn_actn.c_cln_mtch_accnt
        AND    FOP_XCHNG_CD        = :st_pstn_actn.c_xchng_cd
        AND    FOP_PRDCT_TYP       = :st_pstn_actn.c_prd_typ
        AND    FOP_OPT_TYP         = :st_pstn_actn.c_opt_typ
        AND    FOP_EXER_TYP        = :st_pstn_actn.c_exrc_typ
        AND    FOP_UNDRLYNG        = :st_pstn_actn.c_undrlyng
        AND    FOP_EXPRY_DT        = :st_pstn_actn.c_expry_dt
        AND    FOP_STRK_PRC        = :st_pstn_actn.l_strike_prc;
    if (SQLCODE != 0)
    {
      fn_errlog ( c_ServiceName, "S31170", SQLMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }
   }
  }
  else if (  l_blocked_qty > 0 )
  {
      l_qty_to_unblock = l_blocked_qty - l_opnpos_qty;
     
      if( l_qty_to_unblock > 0 )
      {
      i_return_cd =  fn_call_dp_dealloc(c_ServiceName,st_pstn_actn.c_cln_mtch_accnt,st_pstn_actn.c_undrlyng,l_qty_to_unblock);
      if(i_return_cd != 0)
      {
      fn_errlog ( c_ServiceName, "S31175", LIBMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
      }

        EXEC SQL
        UPDATE   FOP_FO_OPTIONS_PSTN
          SET  FOP_DLVRY_QTY_BLCKD = NVL(FOP_DLVRY_QTY_BLCKD,0) - :l_qty_to_unblock 
        WHERE  FOP_CLM_MTCH_ACCNT  = :st_pstn_actn.c_cln_mtch_accnt
        AND    FOP_XCHNG_CD        = :st_pstn_actn.c_xchng_cd
        AND    FOP_PRDCT_TYP       = :st_pstn_actn.c_prd_typ
        AND    FOP_OPT_TYP         = :st_pstn_actn.c_opt_typ
        AND    FOP_EXER_TYP        = :st_pstn_actn.c_exrc_typ
        AND    FOP_UNDRLYNG        = :st_pstn_actn.c_undrlyng
        AND    FOP_EXPRY_DT        = :st_pstn_actn.c_expry_dt
        AND    FOP_STRK_PRC        = :st_pstn_actn.l_strike_prc;
       if (SQLCODE != 0)
       {
        fn_errlog ( c_ServiceName, "S31180", SQLMSG, ptr_st_err_msg->c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
       }
      }
  }

  if( l_qty_to_unblock > 0  || d_funds_to_release > 0 )
  {
  EXEC SQL
       UPDATE FDD_FO_DLVRYMODE_DTLS
          SET FDD_SHARES_BLCKD =NVL( FDD_SHARES_BLCKD,0) - :l_qty_to_unblock, 
              FDD_DLVERY_AMT = NVL(FDD_DLVERY_AMT,0) - :d_funds_to_release
        WHERE  FDD_CLM_MTCH_ACCNT  = :st_pstn_actn.c_cln_mtch_accnt
        AND    FDD_XCHNG_CD        = :st_pstn_actn.c_xchng_cd
        AND    FDD_PRDCT_TYP       = :st_pstn_actn.c_prd_typ
        AND    FDD_OPT_TYP         = :st_pstn_actn.c_opt_typ
        AND    FDD_EXER_TYP        = :st_pstn_actn.c_exrc_typ
        AND    FDD_UNDRLYNG        = :st_pstn_actn.c_undrlyng
        AND    FDD_EXPRY_DT        = :st_pstn_actn.c_expry_dt
        AND    FDD_STRK_PRC        = :st_pstn_actn.l_strike_prc;
    if (SQLCODE != 0)
    {
      fn_errlog ( c_ServiceName, "S31185", SQLMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }
  }

	}
 } /*** ver 4.8 ends ***/
     
	}   /*** Ver 1.9 ***/

	/*********** Ver 1.9 ** Starts ************/

	/*************************** Commented in Ver 2.7 ***************************

  if(ptr_st_tradebook->c_prd_typ == OPTIONPLUS )
  {
    EXEC SQL
      SELECT
            fod_sltp_ordr_rfrnc,
            nvl(fod_amt_blckd,0),
            nvl(fod_lss_amt_blckd,0),
            nvl(fod_fc_flag,'*'),
            nvl(FOD_LMT_RT,0),
						nvl(FOD_STP_LSS_TGR,0),
            nvl(FOD_ORDR_TOT_QTY,0),
            nvl(FOD_EXEC_QTY,0),
            FOD_ORDR_FLW
      INTO
            :c_sltp_ord_rfrnc,
            :d_amt_blkd,
            :d_lss_amt_blkd,
            :c_fc_flg,
            :d_ord_lmt_rt,
						:l_temp_stp_lss_tgr,
            :l_tot_ord_qty,
            :l_ord_exe_qty,
            :c_ord_flw
      FROM  fod_fo_ordr_dtls
      WHERE fod_ordr_rfrnc = :st_orderbook.c_ordr_rfrnc;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31190", SQLMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); 
    }

    *Get the current margin percentage from the database *

    EXEC SQL
     SELECT     FMM_SLTP_PRCNT
     INTO       :d_fmm_sltp_prcnt
     FROM       FMM_FO_MRGN_MSTR
     WHERE      FMM_XCHNG_CD = :st_orderbook.c_xchng_cd
     AND        FMM_PRDCT_TYP = 'O'
     AND        FMM_UNDRLYNG = :st_orderbook.c_undrlyng
     AND        FMM_UNDRLYNG_BSKT_ID =( SELECT  FCB_UNDRLYNG_BSKT_ID
                                        FROM    FCB_FO_CLN_BSKT_ALLTD
                                        WHERE   FCB_CLN_LVL = ( SELECT CLM_CLNT_LVL
                                                                FROM    CLM_CLNT_MSTR
                                                                WHERE   CLM_MTCH_ACCNT =:ptr_st_tradebook->c_cln_mtch_accnt)
                                      );

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31195", SQLMSG, ptr_st_err_msg->c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  }

  if (DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"SLTP order Ref :%s:",c_sltp_ord_rfrnc);
    fn_userlog(c_ServiceName,"Amount blocked  :%lf:",d_amt_blkd);
    fn_userlog(c_ServiceName,"Loss amount :%lf:",d_lss_amt_blkd);
    fn_userlog(c_ServiceName," Fresh/Cover flag :%c:",c_fc_flg);
    fn_userlog(c_ServiceName,"Limit Rate :%lf:",d_ord_lmt_rt);
		fn_userlog(c_ServiceName,"SLTP price :%ld:",l_temp_stp_lss_tgr);
    fn_userlog(c_ServiceName,"Order qty :%ld:",l_tot_ord_qty);
    fn_userlog(c_ServiceName,"Executed Qty :%ld:",l_ord_exe_qty);
    fn_userlog(c_ServiceName,"Order flow :%c:",c_ord_flw);
  }

  if(c_fc_flg == 'F')
  {

    *** Calculate margin and loss on total executed qty ***

    EXEC SQL
         SELECT nvl(FOD_LMT_RT,0),
								nvl(FOD_STP_LSS_TGR,0)
         INTO   :d_cvr_lmt_rt,
								:l_temp_stp_lss_tgr
         FROM   FOD_FO_ORDR_DTLS
         WHERE  FOD_ORDR_RFRNC =  :c_sltp_ord_rfrnc;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31200", SQLMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); 
    }

		if (DEBUG_MSG_LVL_3)
    {
			fn_userlog(c_ServiceName,"SLTP price :%ld:",l_temp_stp_lss_tgr);
			fn_userlog(c_ServiceName,"Cover order limit rate :%lf:",d_cvr_lmt_rt);
		}

  	EXEC SQL
    	   SELECT nvl(FRM_DIFFRNC_MRGN,0)
      	 INTO   :d_frm_diffrnc_mrgn
       	 FROM   FRM_FO_RANGE_MSTR
       	 WHERE  FRM_XCHNG_CD  = TRIM(:st_orderbook.c_xchng_cd)
         AND    TRIM(FRM_UNDRLYNG ) = TRIM(:st_orderbook.c_undrlyng)
         AND    FRM_ORDR_FLOW = :c_ord_flw
				 AND    FRM_FROM_RANGE <= :l_temp_stp_lss_tgr
				 AND    :l_temp_stp_lss_tgr   < FRM_TO_RANGE;

  	if ( SQLCODE  !=  0  && SQLCODE != NO_DATA_FOUND)
  	{
    	fn_errlog ( c_ServiceName, "S31205", SQLMSG, ptr_st_err_msg->c_err_msg );
    	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); 
  	}

  	if(DEBUG_MSG_LVL_3)
  	{
    	fn_userlog(c_ServiceName,"d_frm_diffrnc_mrgn = :%lf:", d_frm_diffrnc_mrgn);
    	fn_userlog(c_ServiceName,"d_fmm_sltp_prcnt = :%lf:", d_fmm_sltp_prcnt );
  	}

    EXEC SQL
         SELECT SUM( (FTD_EXCTD_QTY * FTD_EXCTD_RT) * (:d_fmm_sltp_prcnt/100.0) ),
                SUM(FTD_EXCTD_QTY)  
          INTO  :d_exe_mrgn_amt,
                :l_exe_qty
          FROM  FTD_FO_TRD_DTLS
          WHERE FTD_ORDR_RFRNC = :st_orderbook.c_ordr_rfrnc;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31210", SQLMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }

		******* bhushan ** new added ******

      if( c_ord_flw == 'B' )
      {
        if( d_frm_diffrnc_mrgn < 100 )
        {
        	fn_userlog(c_ServiceName,"Inside frm mrgn < 100 check");
					EXEC 	SQL
							 	SELECT SUM( FTD_EXCTD_QTY * (FTD_EXCTD_RT - :d_cvr_lmt_rt))
								INTO	 :d_exe_lss_amt
								FROM  FTD_FO_TRD_DTLS
          			WHERE FTD_ORDR_RFRNC = :st_orderbook.c_ordr_rfrnc;				
	
        }
        else if ( d_frm_diffrnc_mrgn == 100 )
        {
          fn_userlog(c_ServiceName,"Inside frm mrgn = 100 check");
					EXEC  SQL
                SELECT SUM( FTD_EXCTD_QTY * FTD_EXCTD_RT )
                INTO   :d_exe_lss_amt
                FROM  FTD_FO_TRD_DTLS
                WHERE FTD_ORDR_RFRNC = :st_orderbook.c_ordr_rfrnc;
        }

		    if ( SQLCODE != 0 )
    		{
      		fn_errlog ( c_ServiceName, "S31215", SQLMSG, ptr_st_err_msg->c_err_msg );
      		fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    		}
      }
      else
      {
        fn_userlog(c_ServiceName,"Inside  ordr_flw sell.");
				EXEC  SQL
                SELECT SUM( FTD_EXCTD_QTY * (:d_cvr_lmt_rt - FTD_EXCTD_RT ))
                INTO   :d_exe_lss_amt
                FROM  FTD_FO_TRD_DTLS
                WHERE FTD_ORDR_RFRNC = :st_orderbook.c_ordr_rfrnc;
				
				if ( SQLCODE != 0 )
        {
          fn_errlog ( c_ServiceName, "S31220", SQLMSG, ptr_st_err_msg->c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
        }
      }	

    l_rmn_qty = l_tot_ord_qty - l_exe_qty;

    if (DEBUG_MSG_LVL_3) 
    {
      fn_userlog ( c_ServiceName, "l_rmn_qty = :%ld:", l_rmn_qty);
    }

    if (l_rmn_qty >= 0)   *** skip margin calculation in case of excess qty ***
    {
    	d_new_mrgn_amt = (double) d_exe_mrgn_amt + ( (l_rmn_qty * d_ord_lmt_rt) * (d_fmm_sltp_prcnt /100.0) );

    	if (c_ord_flw == 'B')
    	{
				if( d_frm_diffrnc_mrgn < 100 )
        {
        	fn_userlog(c_ServiceName,"Inside frm mrgn < 100 check");
					d_new_lss_amt = (double)  d_exe_lss_amt + ( l_rmn_qty * (d_ord_lmt_rt - d_cvr_lmt_rt) );
				}
				else if ( d_frm_diffrnc_mrgn == 100 )
        {
					fn_userlog(c_ServiceName,"Inside frm mrgn = 100 check");
					d_new_lss_amt = (double)  d_exe_lss_amt + ( l_rmn_qty *	d_ord_lmt_rt );	
				}
    	}
    	else if (c_ord_flw == 'S')
    	{	
				fn_userlog(c_ServiceName,"Inside  ordr_flw sell.");
      	d_new_lss_amt = (double) d_exe_lss_amt + ( l_rmn_qty * (d_ord_lmt_rt - d_cvr_lmt_rt) * -1 );
    	}

    	d_diff_mrgn_amt = d_amt_blkd - d_new_mrgn_amt;

 	   	d_diff_lss_amt  = d_lss_amt_blkd - d_new_lss_amt;

    	d_diff_mrgn_amt = (long long)d_diff_mrgn_amt;

    	d_diff_lss_amt  = (long long)d_diff_lss_amt;

    	if (DEBUG_MSG_LVL_3)
    	{
      	fn_userlog(c_ServiceName," l_rmn_qty :%ld:",l_rmn_qty);
      	fn_userlog(c_ServiceName,"d_exe_mrgn_amt :%lf:",d_exe_mrgn_amt);
      	fn_userlog(c_ServiceName,"d_exe_lss_amt :%lf:",d_exe_lss_amt);
      	fn_userlog(c_ServiceName,"d_cvr_lmt_rt :%lf:",d_cvr_lmt_rt);
      	fn_userlog(c_ServiceName,"d_new_mrgn_amt :%lf:",d_new_mrgn_amt);
      	fn_userlog(c_ServiceName,"d_new_lss_amt:%lf:",d_new_lss_amt);
      	fn_userlog(c_ServiceName,"d_diff_mrgn_amt :%lf:",d_diff_mrgn_amt);
      	fn_userlog(c_ServiceName,"d_diff_lss_amt :%lf:",d_diff_lss_amt);
    	}

    	if (DEBUG_MSG_LVL_3)
    	{
      	fn_userlog(c_ServiceName,"Block or Release diff margin :%lf:",d_diff_mrgn_amt);
    	}

    	strcpy( c_narration_id , ON_TRADE_EXECUTION);

    	if( d_diff_mrgn_amt != 0 )
    	{
      	d_balance_amt = 0.0;

      	i_returncode = fn_upd_limits( c_ServiceName,
        	                              &st_pstn_actn,
          	                            ptr_st_err_msg,
            	                          c_narration_id,
              	                        DEBIT_WITHOUT_LIMIT,
                	                      d_diff_mrgn_amt,
                  	                    &d_balance_amt);
      	if ( i_returncode != 0 )
      	{
        	fn_errlog ( c_ServiceName, "S31225", LIBMSG, c_err_msg );
        	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
      	}

      	d_diff_mrgn_amt = d_diff_mrgn_amt - d_balance_amt;

      	if (DEBUG_MSG_LVL_3)
      	{
        	fn_userlog(c_ServiceName,"Actual d_diff_mrgn_amt is  :%lf:",d_diff_mrgn_amt);
      	}
    	}

    	if (DEBUG_MSG_LVL_3)
    	{
      	fn_userlog(c_ServiceName,"Block or release diff loss :%lf:",d_diff_lss_amt);
    	}

    	strcpy( c_narration_id , ON_TRADE_EXECUTION);
    	
			if( d_diff_lss_amt != 0)
    	{
      	d_balance_amt = 0.0;

      	i_returncode = fn_upd_limits( c_ServiceName,
        	                              &st_pstn_actn,
          	                            ptr_st_err_msg,
            	                          c_narration_id,
              	                        DEBIT_WITHOUT_LIMIT,
                	                      d_diff_lss_amt,
                  	                    &d_balance_amt);

      	if ( i_returncode != 0 )
      	{
        	fn_errlog ( c_ServiceName, "S31230", LIBMSG, c_err_msg );
        	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
      	}

      	d_diff_lss_amt = d_diff_lss_amt - d_balance_amt;

      	if (DEBUG_MSG_LVL_3)
      	{
        	fn_userlog(c_ServiceName,"Actual d_diff_lss_amt is  :%lf:",d_diff_lss_amt);
      	}
    	}

    	if (DEBUG_MSG_LVL_3)
    	{
      	fn_userlog(c_ServiceName,"Update new margin & loss");
    	}

    	EXEC SQL
     	    UPDATE FOD_FO_ORDR_DTLS
       	  SET    FOD_AMT_BLCKD 			= :d_amt_blkd - :d_diff_mrgn_amt,
               	 FOD_LSS_AMT_BLCKD 	= :d_lss_amt_blkd - :d_diff_lss_amt
         	WHERE  FOD_ORDR_RFRNC = :st_orderbook.c_ordr_rfrnc;

    	if ( SQLCODE != 0 )
    	{
      	fn_errlog ( c_ServiceName, "S31235", SQLMSG, ptr_st_err_msg->c_err_msg );
      	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    	}
		}
  }
  else if(c_fc_flg == 'C')
  {
    l_tot_ord_qty = 0;
    l_rmn_qty = 0;

    EXEC SQL
      SELECT
            fod_ordr_stts,
            nvl(fod_amt_blckd,0),
            nvl(fod_lss_amt_blckd,0),
            fod_ordr_flw,
            nvl(FOD_ORDR_TOT_QTY - (FOD_EXEC_QTY + FOD_CNCL_QTY + FOD_EXPRD_QTY),0)  
      INTO
            :c_ord_stts,
            :d_amt_blkd,
            :d_lss_amt_blkd,
            :c_ord_flw,
            :l_tot_ord_qty
      FROM  fod_fo_ordr_dtls
      WHERE fod_ordr_rfrnc = :c_sltp_ord_rfrnc;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31240", SQLMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }

		*** Ver 2.1 starts *** Commented in Ver 2.2 ***
		i_exec_rng = 0;

		if ( c_ord_stts == 'C' )
		{
			EXEC SQL
				SELECT 1
				INTO   :i_exec_rng
				FROM   FXB_FO_XCHNG_BOOK
				WHERE  FXB_ORDR_RFRNC		= :c_sltp_ord_rfrnc
				AND		 FXB_XCHNG_RMRKS  like '%The Price is out of the current execution range%'
				AND    FXB_MDFCTN_CNTR = '99';

			if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
			{
				fn_errlog ( c_ServiceName, "S31245", SQLMSG, ptr_st_err_msg->c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
			}
		}
		if (i_exec_rng != 1)
		{
		*** Ver 2.1 ends ***
		
		*** start in Ver 2.2 ***
		if ( c_ord_stts != 'C' && c_ord_stts != 'J' && c_ord_stts != 'X' )
		{
		*** end in Ver 2.2 ***

    if ( c_ord_stts != 'E' && c_ord_stts !='P' && c_ord_stts !='B' &&  c_ord_stts != 'D')
    {
      fn_errlog ( c_ServiceName, "S31250","Fresh order is not executed", ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }

   EXEC SQL
     SELECT NVL(SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),0),
            NVL(SUM(FTD_EXCTD_QTY),0)
     INTO   :d_exe_val,
            :l_exe_qty
     FROM   FTD_FO_TRD_DTLS
     WHERE  FTD_ORDR_RFRNC = :c_sltp_ord_rfrnc;

   if ( SQLCODE != 0 )
   {
    fn_errlog ( c_ServiceName, "S31255", SQLMSG, ptr_st_err_msg->c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
   }

  EXEC SQL
    SELECT nvl(FOD_LMT_RT,0),
					 nvl(FOD_STP_LSS_TGR,0)
    INTO   :d_ord_lmt_rt,
           :l_temp_stp_lss_tgr
    FROM   FOD_FO_ORDR_DTLS
    WHERE  FOD_ORDR_RFRNC = (
                              SELECT min(FOD_ORDR_RFRNC)
                              FROM   FOD_FO_ORDR_DTLS
                              WHERE  FOD_SLTP_ORDR_RFRNC  = :c_sltp_ord_rfrnc
                              AND    FOD_FC_FLAG = 'C'
                            );

   if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31260", SQLMSG, ptr_st_err_msg->c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  }

   if (DEBUG_MSG_LVL_3)
   {
    fn_userlog ( c_ServiceName, "Limit Rate during Order placement :%lf: ", d_ord_lmt_rt);
		fn_userlog(c_ServiceName,"SLTP price during Order placement :%ld:",l_temp_stp_lss_tgr);
   }

   EXEC SQL
        SELECT nvl(FRM_DIFFRNC_MRGN,0)
        INTO   :d_frm_diffrnc_mrgn
        FROM   FRM_FO_RANGE_MSTR
        WHERE  FRM_XCHNG_CD  = TRIM(:st_orderbook.c_xchng_cd)
        AND    TRIM(FRM_UNDRLYNG ) = TRIM(:st_orderbook.c_undrlyng)
        AND    FRM_ORDR_FLOW = :c_ord_flw
				AND    FRM_FROM_RANGE <= :l_temp_stp_lss_tgr
        AND    :l_temp_stp_lss_tgr   < FRM_TO_RANGE;
	
   if ( SQLCODE  !=  0  && SQLCODE != NO_DATA_FOUND)
   {
     fn_errlog ( c_ServiceName, "S31265", SQLMSG, ptr_st_err_msg->c_err_msg );
     fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
   }

   if(DEBUG_MSG_LVL_3)
   {
     fn_userlog(c_ServiceName,"d_frm_diffrnc_mrgn = :%lf:", d_frm_diffrnc_mrgn);
     fn_userlog(c_ServiceName,"d_fmm_sltp_prcnt = :%lf:", d_fmm_sltp_prcnt );
   }

   EXEC SQL
    SELECT NVL(SUM(FTD_EXCTD_QTY),0)
     INTO   :l_cv_exe_qty
     FROM   FTD_FO_TRD_DTLS
     WHERE  FTD_ORDR_RFRNC in ( select FOD_ORDR_RFRNC
                                from FOD_FO_ORDR_DTLS
                                where FOD_SLTP_ORDR_RFRNC = :c_sltp_ord_rfrnc);

   if ( SQLCODE != 0 )
   {
    fn_errlog ( c_ServiceName, "S31270", SQLMSG, ptr_st_err_msg->c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
   }

   d_avg_prc = 0;

   if (l_exe_qty != 0)
   {
      d_avg_prc =  (double)  d_exe_val / l_exe_qty;
   }

   l_rmn_qty = (l_exe_qty + l_tot_ord_qty) - l_cv_exe_qty ; 
	
   if (DEBUG_MSG_LVL_3)
   {
    	fn_userlog ( c_ServiceName, "l_rmn_qty = :%ld:", l_rmn_qty);
   } 

   if (l_rmn_qty >= 0)    *** skip margin calculation in case of excess qty***
	 {
   		d_new_mrgn_amt = (double) ( (l_rmn_qty * d_avg_prc) *  (d_fmm_sltp_prcnt / 100.0) );

   		if (c_ord_flw == 'B')
   		{
				if( d_frm_diffrnc_mrgn < 100 )
        {
					d_new_lss_amt  = (double)  l_rmn_qty *(d_avg_prc - d_ord_lmt_rt);
				}
				else if ( d_frm_diffrnc_mrgn == 100 )
        {
					 d_new_lss_amt  = (double)  l_rmn_qty * d_avg_prc;
				}
   		}
   		else if (c_ord_flw == 'S')
   		{
    		d_new_lss_amt = (double) l_rmn_qty *(d_avg_prc - d_ord_lmt_rt) * -1;
   		}

   		d_diff_mrgn_amt = d_amt_blkd - d_new_mrgn_amt;

   		d_diff_lss_amt = d_lss_amt_blkd - d_new_lss_amt;

   		d_diff_mrgn_amt = (long long)d_diff_mrgn_amt;

   		d_diff_lss_amt = (long long)d_diff_lss_amt;

    	*** Calculate the  Profit / Loss on current executed quantity ***

    	if (c_ord_flw == 'B')
    	{
				d_obli_pl = (double)  ptr_st_tradebook->l_exctd_qty * ( d_avg_prc - ptr_st_tradebook->l_exctd_rt );
    	}
    	else if (c_ord_flw == 'S')
    	{
      	d_obli_pl = (double)  ptr_st_tradebook->l_exctd_qty * ( d_avg_prc - ptr_st_tradebook->l_exctd_rt ) * -1;
    	}

    	d_obli_pl = (long long)d_obli_pl;

    	if( DEBUG_MSG_LVL_3 )
    	{
      	fn_userlog(c_ServiceName,"d_avg_prc :%lf:",d_avg_prc);
      	fn_userlog(c_ServiceName," l_rmn_qty :%ld:",l_rmn_qty);
      	fn_userlog(c_ServiceName,"d_new_mrgn_amt :%lf:",d_new_mrgn_amt);
      	fn_userlog(c_ServiceName,"d_new_lss_amt:%lf:",d_new_lss_amt);
      	fn_userlog(c_ServiceName,"d_diff_mrgn_amt :%lf:",d_diff_mrgn_amt);
      	fn_userlog(c_ServiceName,"d_diff_lss_amt :%lf:",d_diff_lss_amt);
      	fn_userlog(c_ServiceName,"d_amt_blkd :%lf:",d_amt_blkd);
      	fn_userlog(c_ServiceName,"d_lss_amt_blkd :%lf:",d_lss_amt_blkd);
      	fn_userlog(c_ServiceName,"Obligation profit loss :%lf:",d_obli_pl);
      	fn_userlog(c_ServiceName,"Fresh order Qty l_tot_ord_qty :%ld:",l_tot_ord_qty);
      	fn_userlog(c_ServiceName,"Cover Order executed qty :%ld:",l_cv_exe_qty);
      	fn_userlog(c_ServiceName,"Fresh Executed Qty :%ld:",l_exe_qty);
    	}
    	strcpy( c_narration_id , PROFIT_LOSS_ON_COVER_LEG);

    	if( d_obli_pl != 0)
    	{
      	i_returncode = fn_upd_limits( c_ServiceName,
      	                                &st_pstn_actn,
       	                                ptr_st_err_msg,
                                      	c_narration_id,
                                      	DEBIT_WITHOUT_LIMIT,
                                      	d_obli_pl * -1,
                                      	&d_balance_amt);
      	if ( i_returncode != 0 )
      	{
        	fn_errlog ( c_ServiceName, "S31275", LIBMSG, c_err_msg );
       	 	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
      	}
    	}

    	if( DEBUG_MSG_LVL_3 )
    	{
      	fn_userlog(c_ServiceName,"Block or Release diff margin :%lf:",d_diff_mrgn_amt);
    	}

    	strcpy( c_narration_id , ON_TRADE_EXECUTION);
    	if( d_diff_mrgn_amt != 0 )
    	{
      	d_balance_amt = 0.0;

      	i_returncode = fn_upd_limits( c_ServiceName,
        	                              &st_pstn_actn,
         	                              ptr_st_err_msg,
                                      	c_narration_id,
                                      	DEBIT_TILL_LIMIT,
                                      	d_diff_mrgn_amt,
                                      	&d_balance_amt);

      	if ( i_returncode != 0 )
      	{
        	fn_errlog ( c_ServiceName, "S31280", LIBMSG, c_err_msg );
        	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
      	}
      	d_diff_mrgn_amt = d_diff_mrgn_amt - d_balance_amt;

      	if( DEBUG_MSG_LVL_3 )
      	{
        	fn_userlog(c_ServiceName,"Actual diff margin :%lf:",d_diff_mrgn_amt);
      	}
    	}

    	if( DEBUG_MSG_LVL_3 )
    	{
      	fn_userlog(c_ServiceName,"Block or release diff loss :%lf:",d_diff_lss_amt);
    	}

    	strcpy( c_narration_id , ON_TRADE_EXECUTION);
    	if( d_diff_lss_amt != 0)
    	{
      	d_balance_amt = 0.0;

      	i_returncode = fn_upd_limits( c_ServiceName,
                                      &st_pstn_actn,
                                      ptr_st_err_msg,
                                      c_narration_id,
                                      DEBIT_TILL_LIMIT,
                                      d_diff_lss_amt,
                                      &d_balance_amt);

      	if ( i_returncode != 0 )
      	{
        	fn_errlog ( c_ServiceName, "S31285", LIBMSG, c_err_msg );
        	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
      	}
      	d_diff_lss_amt = d_diff_lss_amt - d_balance_amt;

      	if( DEBUG_MSG_LVL_3 )
      	{
        	fn_userlog(c_ServiceName,"Actual diff profit loss :%lf:",d_diff_lss_amt);
      	}
    	}

    	if( DEBUG_MSG_LVL_3 )
    	{
      	fn_userlog(c_ServiceName,"Update new margin & loss");
    	}

    	EXEC SQL
         	UPDATE FOD_FO_ORDR_DTLS
         	SET    FOD_AMT_BLCKD     = :d_amt_blkd - :d_diff_mrgn_amt,
          	     FOD_LSS_AMT_BLCKD = :d_lss_amt_blkd - :d_diff_lss_amt
         	WHERE  FOD_ORDR_RFRNC    = :c_sltp_ord_rfrnc;

    	if ( SQLCODE != 0 )
    	{
      	fn_errlog ( c_ServiceName, "S31290", SQLMSG, ptr_st_err_msg->c_err_msg );
      	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    	}
		}
	  } *** End of if condition Ver 2.1 ***
   }
	 *** if loop added in Ver 2.2 ***
	
		*********************** Commented in ver 2.7 Ends *****************/

   /***************** Added in Ver 2.7 starts ********************/

	if(ptr_st_tradebook->c_prd_typ == OPTIONPLUS )
  {

	  	EXEC SQL /* 3.6 */
    	SELECT
       	     FOD_SLTP_ORDR_RFRNC,
    	       NVL(FOD_FC_FLAG,'*')
    	INTO
     	       :c_sltp_ord_rfrnc,
         	   :c_fc_flg
    	FROM  FOD_FO_ORDR_DTLS
    	WHERE FOD_ORDR_RFRNC = :st_orderbook.c_ordr_rfrnc;

  		if ( SQLCODE != 0 )
  		{
    		fn_errlog ( c_ServiceName, "S31295", SQLMSG, ptr_st_err_msg->c_err_msg );
    		fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  		}
	
		    EXEC SQL /* 3.6 */
    SELECT
          FOD_ORDR_RFRNC,
          FOD_SLTP_ORDR_RFRNC,
          NVL(FOD_AMT_BLCKD,0),
          NVL(FOD_LSS_AMT_BLCKD,0),
          NVL(FOD_LMT_RT,0),
          FOD_ORDR_FLW
    INTO
          :c_frsh_ordr_rfrnc,
          :c_cvr_ordr_rfrnc,
          :d_amt_blkd,
          :d_lss_amt_blkd,
          :d_ord_lmt_rt,
          :c_ord_flw
    FROM  FOD_FO_ORDR_DTLS
    WHERE FOD_ORDR_RFRNC = DECODE(:c_fc_flg,'F',:st_orderbook.c_ordr_rfrnc,:c_sltp_ord_rfrnc);

   if ( SQLCODE != 0 )
   {
     fn_errlog ( c_ServiceName, "S31300", SQLMSG, ptr_st_err_msg->c_err_msg );
     fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
   }

	/**Added in Ver 2.9 starts **/
  if(DEBUG_MSG_LVL_3)  /** Ver 3.1 **/
  {
		fn_userlog(c_ServiceName," Ak47 fn_lock_fno : %s",st_orderbook.c_ordr_rfrnc);
	}
	/* i_returncode = fn_lock_usr( c_ServiceName,  st_orderbook.c_cln_mtch_accnt ); commented in Ver 4.9 */
	i_returncode = fn_lock_fno( c_ServiceName,  st_orderbook.c_cln_mtch_accnt ); /* added in Ver 4.9 */
	if ( i_returncode != 0 )
	{
		fn_userlog(c_ServiceName," Ak47 fn_lock_fno FAILED : %s",st_orderbook.c_ordr_rfrnc);
		fn_errlog ( c_ServiceName, "S31305", LIBMSG, ptr_st_err_msg->c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
	}
	/**Ver 2.9 ends**/

	 if(c_fc_flg == 'F' || c_fc_flg == 'C')
	 {
		if (c_fc_flg == 'F')
		{
			EXEC SQL /* 3.6 */
			SELECT
						NVL(FOD_LMT_RT,0)
			INTO
						:d_cvr_lmt_rt
			FROM  FOD_FO_ORDR_DTLS
			WHERE FOD_ORDR_RFRNC = :c_cvr_ordr_rfrnc;
		}
		else if (c_fc_flg == 'C' )
		{
				EXEC SQL /* 3.6 */
					SELECT NVL(FOD_LMT_RT,0)
					INTO   :d_cvr_lmt_rt
					FROM   FOD_FO_ORDR_DTLS
					WHERE  FOD_ORDR_RFRNC = (
																		SELECT MIN(FOD_ORDR_RFRNC)
																		FROM	 FOD_FO_ORDR_DTLS 
																		WHERE  FOD_SLTP_ORDR_RFRNC  = :c_frsh_ordr_rfrnc
																		AND    FOD_FC_FLAG =:c_fod_fc_flag
																	);
			
		}

    if ( SQLCODE != 0 )
    {
        fn_errlog ( c_ServiceName, "S31310", SQLMSG, ptr_st_err_msg->c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }


       /*** Margin calcluation ***/
     i_returncode =  fn_cal_mrgn_sltp_op(c_ServiceName,
                                       c_frsh_ordr_rfrnc,
                                       d_ord_lmt_rt,
                                       d_cvr_lmt_rt,
                                       &d_new_mrgn_amt,
                                       &d_new_lss_amt,
																			c_ref_rmrks,  /*** Ver 4.6***/
																			&d_comp1_mrgn,/*** Ver 4.6***/
																			&d_comp1_pl,  /*** Ver 4.6***/
																			&d_xchng_amt, /*** Ver 4.6***/
																			&d_prem_amt,  /*** Ver 4.6***/
																	  	&d_spn_mrgn,  /*** Ver 4.6***/
																			&d_expr_mrgn, /*** Ver 4.6***/
                                       'E',
                                       c_err_msg);
    if ( i_returncode == -1 )
    {
      fn_errlog ( c_ServiceName, "S31315", LIBMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }

    d_diff_mrgn_amt = d_amt_blkd - d_new_mrgn_amt;

    d_diff_lss_amt  = d_lss_amt_blkd - d_new_lss_amt;

    d_diff_mrgn_amt = (long long)d_diff_mrgn_amt;

    d_diff_lss_amt  = (long long)d_diff_lss_amt;
		
		if (DEBUG_MSG_LVL_3)
    {
        fn_userlog(c_ServiceName," l_rmn_qty :%ld:",l_rmn_qty);
        fn_userlog(c_ServiceName,"d_exe_mrgn_amt :%lf:",d_exe_mrgn_amt);
        fn_userlog(c_ServiceName,"d_exe_lss_amt :%lf:",d_exe_lss_amt);
        fn_userlog(c_ServiceName,"d_cvr_lmt_rt :%lf:",d_cvr_lmt_rt);
        fn_userlog(c_ServiceName,"d_new_mrgn_amt :%lf:",d_new_mrgn_amt);
        fn_userlog(c_ServiceName,"d_new_lss_amt:%lf:",d_new_lss_amt);
        fn_userlog(c_ServiceName,"d_diff_mrgn_amt :%lf:",d_diff_mrgn_amt);
        fn_userlog(c_ServiceName,"d_diff_lss_amt :%lf:",d_diff_lss_amt);
    }

    if (DEBUG_MSG_LVL_3)
    {
       fn_userlog(c_ServiceName,"Block or Release diff margin :%lf:",d_diff_mrgn_amt);
    }

    strcpy( c_narration_id , ON_TRADE_EXECUTION);

     if( d_diff_mrgn_amt != 0 )
     {
        d_balance_amt = 0.0;

        i_returncode = fn_upd_limits( c_ServiceName,
                                        &st_pstn_actn,
                                        ptr_st_err_msg,
                                        c_narration_id,
                                        DEBIT_WITHOUT_LIMIT,
                                        d_diff_mrgn_amt,
                                        &d_balance_amt);
        if ( i_returncode != 0 )
        {
          fn_errlog ( c_ServiceName, "S31320", LIBMSG, c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
          /*** Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
          free((char*) ptr_st_err_msg);
          tpfree((char*)ptr_fml_Obuf);
          free((char *) ptr_st_tradebook); 
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); *** Commented in Ver 2.7 ***/
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
        }

				d_diff_mrgn_amt = d_diff_mrgn_amt - d_balance_amt;

        if (DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Actual d_diff_mrgn_amt is  :%lf:",d_diff_mrgn_amt);
        }
      }

      if (DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Block or release diff loss :%lf:",d_diff_lss_amt);
      }

      strcpy( c_narration_id , ON_TRADE_EXECUTION);

      /*** Ver 4.6 started ***/
      MEMSET(c_tmp_rmrks);
      strcpy ( c_tmp_rmrks, st_pstn_actn.c_ref_rmrks );
      sprintf(st_pstn_actn.c_ref_rmrks,"%s%s",c_ref_rmrks,c_tmp_rmrks);
      /*** Ver 4.6 ends ***/



      if( d_diff_lss_amt != 0)
      {
        d_balance_amt = 0.0;

        i_returncode = fn_upd_limits( c_ServiceName,
                                        &st_pstn_actn,
                                        ptr_st_err_msg,
                                        c_narration_id,
                                        DEBIT_WITHOUT_LIMIT,
                                        d_diff_lss_amt,
                                        &d_balance_amt);

        if ( i_returncode != 0 )
        {
          fn_errlog ( c_ServiceName, "S31325", LIBMSG, c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
          /*** Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
          free((char*) ptr_st_err_msg);
          tpfree((char*)ptr_fml_Obuf);
          free((char *) ptr_st_tradebook); 
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); *** Commented in Ver 2.7 ***/
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
        }

        d_diff_lss_amt = d_diff_lss_amt - d_balance_amt;

        if (DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Actual d_diff_lss_amt is  :%lf:",d_diff_lss_amt);
        }
      }

      strcpy ( st_pstn_actn.c_ref_rmrks, c_tmp_rmrks);    /**** Ver 4.6 ***/
      MEMSET(c_tmp_rmrks);                                    /**** Ver 4.6 ***/

    if (DEBUG_MSG_LVL_3)
    {
        fn_userlog(c_ServiceName,"Update new margin & loss");
    }
			
		if (DEBUG_MSG_LVL_3)
    {
        fn_userlog(c_ServiceName,"Update new margin & loss");
    }

      EXEC SQL
          UPDATE FOD_FO_ORDR_DTLS
          SET    FOD_AMT_BLCKD      = :d_amt_blkd - :d_diff_mrgn_amt,
                 FOD_LSS_AMT_BLCKD  = :d_lss_amt_blkd - :d_diff_lss_amt,
              	 FOD_SLTP_MRGN = :d_comp1_mrgn,/*** Ver 4.6 ***/
              	 FOD_SLTP_PL   = :d_comp1_pl,  /*** Ver 4.6 ***/
              	 FOD_SLTP_SEBI_MRGN = :d_xchng_amt, /*** Ver 4.6 ***/
              	 FOD_OPLUS_PREMIUM  = :d_prem_amt,  /*** Ver 4.6 ***/
              	 FOD_SPAN_MRGN = :d_spn_mrgn,       /*** Ver 4.6 ***/
                 FOD_EXPR_MRGN = :d_expr_mrgn       /*** Ver 4.6 ***/
          WHERE  FOD_ORDR_RFRNC			= :c_frsh_ordr_rfrnc;

      if ( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31330", SQLMSG, ptr_st_err_msg->c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
        /*** Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
        free((char*) ptr_st_err_msg);
        tpfree((char*)ptr_fml_Obuf);
        free((char *) ptr_st_tradebook);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); *** Commented in Ver 2.7 ***/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );

      }

 	}

		/********************* Added part in Ver 2.7 Ends**********************/

	else if(c_fc_flg == 'E')	
	{
				/* Calculate open quantity */
				EXEC SQL
					SELECT  NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FTD_EXCTD_QTY,
																													 FTD_EXCTD_QTY ) ), 0 )
					INTO    :l_open_qty
					FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
					WHERE   FTD_ORDR_RFRNC  = FOD_ORDR_RFRNC
					AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_sltp_ord_rfrnc;

			if( SQLCODE != 0 )
			{
				fn_errlog ( c_ServiceName, "S31335", SQLMSG, ptr_st_err_msg->c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
			}

			if (l_open_qty == 0)
			{
				/*** Release the margin and loss amount blocked ***/
				EXEC SQL
					SELECT
								NVL(FOD_AMT_BLCKD,0),
								NVL(FOD_LSS_AMT_BLCKD,0)
					INTO  :d_amt_blkd,
								:d_lss_amt_blkd
					FROM  FOD_FO_ORDR_DTLS
					WHERE FOD_ORDR_RFRNC = :c_sltp_ord_rfrnc;

					if( SQLCODE != 0 )
					{
						fn_errlog ( c_ServiceName, "S31340", SQLMSG, ptr_st_err_msg->c_err_msg );
						fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
					}
					
					strcpy( c_narration_id , ON_TRADE_EXECUTION);
					
					if(d_amt_blkd > 0)
					{
						d_balance_amt  = 0.0;

						if(DEBUG_MSG_LVL_3)
						{
							fn_userlog(c_ServiceName,"Release old margin amount blocked");
						}
						
						i_returncode = fn_upd_limits( c_ServiceName,
																				&st_pstn_actn,
																				ptr_st_err_msg,
																				c_narration_id, 
																				DEBIT_WITHOUT_LIMIT,
																				d_amt_blkd,
																				&d_balance_amt);


						if ( i_returncode != 0 )
						{
							fn_errlog ( c_ServiceName, "S31345", SQLMSG, ptr_st_err_msg->c_err_msg );
							fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
						}
					}
									
					if(d_lss_amt_blkd > 0)
					{
						d_balance_amt  = 0.0;

						if(DEBUG_MSG_LVL_3)
						{
							fn_userlog(c_ServiceName,"Release old loss amount");
						}
						i_returncode = fn_upd_limits( c_ServiceName,
																				&st_pstn_actn,
																				ptr_st_err_msg,
																				c_narration_id, 
																				DEBIT_WITHOUT_LIMIT,
																				d_lss_amt_blkd,
																				&d_balance_amt);


						if ( i_returncode != 0 )
						{
							fn_errlog ( c_ServiceName, "S31350", SQLMSG, ptr_st_err_msg->c_err_msg );
							fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
						}
					}

					if( DEBUG_MSG_LVL_3 )
					{
						fn_userlog(c_ServiceName,"Update margin & loss released");
					}

					EXEC SQL
							 UPDATE FOD_FO_ORDR_DTLS
							 SET    FOD_AMT_BLCKD			= 0,
											FOD_LSS_AMT_BLCKD = 0,
              			  FOD_SLTP_MRGN = 0,/*** Ver 4.6 ***/
              			  FOD_SLTP_PL   = 0,  /*** Ver 4.6 ***/
              			  FOD_SLTP_SEBI_MRGN = 0, /*** Ver 4.6 ***/
              			  FOD_OPLUS_PREMIUM  = 0,  /*** Ver 4.6 ***/
              				FOD_SPAN_MRGN = 0,       /*** Ver 4.6 ***/
              				FOD_EXPR_MRGN = 0       /*** Ver 4.6 ***/
							 WHERE  FOD_ORDR_RFRNC		= :c_sltp_ord_rfrnc; 
					
					if ( SQLCODE != 0 )
					{
						fn_errlog ( c_ServiceName, "S31355", SQLMSG, ptr_st_err_msg->c_err_msg );
						fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
					}
			}
	 }	
		/*** Ver 2.2 if loop ended ***/
	
	/*************** Added in Ver 2.7 ******************/

  EXEC SQL
     SELECT  NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ), 0 )
     INTO   :l_net_open
     FROM   FOD_FO_ORDR_DTLS
     WHERE  DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_frsh_ordr_rfrnc;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31360", SQLMSG, ptr_st_err_msg->c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  }

  /*** Obligation to be calculated only when Incoming Fresh Trade and net open position is in Cover OR Incoming Cover Trade a
nd net open position is in Fresh ***/
  if ( ((c_fc_flg == 'F' || c_fc_flg == 'E') && l_net_open < 0) || (c_fc_flg == 'C' && l_net_open > 0) ) /*** handling for E is added in ver 4.1 ***/
  {
   /*** ver 4.1 started ***/
   if( c_fc_flg == 'E' )
   {
     EXEC SQL
          SELECT FOD_ORDR_RFRNC
          INTO   :c_sltp_ord_rfrnc
          FROM   FOD_FO_ORDR_DTLS
          WHERE  FOD_SLTP_ORDR_RFRNC  = :c_frsh_ordr_rfrnc
          AND    FOD_FC_FLAG = :c_fod_fc_flag
          AND    FOD_ORDR_STTS in ('E','D','B');

      if ( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31365", SQLMSG, ptr_st_err_msg->c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
      }

      if( DEBUG_MSG_LVL_3 )
      {
       fn_userlog(c_ServiceName,"******** c_fc_flg is :%c: c_frsh_ordr_rfrnc is :%s: c_sltp_ord_rfrnc is :%s: ***********",c_fc_flg,c_frsh_ordr_rfrnc,c_sltp_ord_rfrnc );
      }
    }
   /*** ver 4.1 ended ***/

    EXEC SQL
       SELECT NVL(SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),0) ,
              NVL(SUM(FTD_EXCTD_QTY),0)
       INTO   :d_exe_val,
              :l_exe_qty
       FROM   FTD_FO_TRD_DTLS
       WHERE  FTD_ORDR_RFRNC = :c_sltp_ord_rfrnc;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31370", SQLMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }

		    if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog(c_ServiceName,"*****************OBLIGATION*****************");
      fn_userlog(c_ServiceName,"Stored OLD l_net_open = :%ld:",l_net_open);
      fn_userlog(c_ServiceName,"Opposite order Execution Val = :%lf:",d_exe_val);
      fn_userlog(c_ServiceName,"Opposite order Execution Qty = :%ld:",l_exe_qty);
    }

    d_avg_prc = 0;

    if (l_exe_qty != 0)
    {
      d_avg_prc =  (double)  d_exe_val / l_exe_qty;
    }

    if (c_ord_flw == 'B') /*** Fresh Buy ***/
    {
      if ( c_fc_flg == 'F' || c_fc_flg == 'E' ) /*** Trade Flow ***/  /*** handling for E is added in ver 4.1 ***/
      {
        d_obli_pl = (double) fn_minl( ptr_st_tradebook->l_exctd_qty, abs(l_net_open) ) * ( d_avg_prc - (double)  ptr_st_tradebook->l_exctd_rt );
      }
      else
      {
        d_obli_pl = (double) fn_minl( ptr_st_tradebook->l_exctd_qty, abs(l_net_open) ) * ( d_avg_prc - (double)  ptr_st_tradebook->l_exctd_rt ) * -1;
      }
    }
    else if (c_ord_flw == 'S') /*** Fresh Sell ***/
    {
      if (c_fc_flg == 'F' || c_fc_flg == 'E' ) /*** Trade Flow ***/  /*** handling for E is added in ver 4.1 ***/
      {
        d_obli_pl = (double) fn_minl( ptr_st_tradebook->l_exctd_qty, abs(l_net_open) ) * ( d_avg_prc - (double)  ptr_st_tradebook->l_exctd_rt ) * -1;
      }
      else
      {
        d_obli_pl = (double) fn_minl( ptr_st_tradebook->l_exctd_qty, abs(l_net_open) ) * ( d_avg_prc - (double)  ptr_st_tradebook->l_exctd_rt );
      }
    }

		    if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog(c_ServiceName,"c_ord_flw :%c: c_fc_flg :%c:",c_ord_flw, c_fc_flg);
      fn_userlog(c_ServiceName,"d_avg_prc :%lf: Executed Rate :%ld: Executed Qty :%ld:",d_avg_prc, ptr_st_tradebook->l_exctd_rt, ptr_st_tradebook->l_exctd_qty);
      fn_userlog(c_ServiceName," fn_minl( ptr_st_tradebook->l_exctd_qty, l_net_open ) :%ld:", fn_minl( ptr_st_tradebook->l_exctd_qty, l_net_open ) );
      fn_userlog(c_ServiceName,"Obligation profit loss :%lf:",d_obli_pl);
      fn_userlog(c_ServiceName,"*****************************************");
    }
    strcpy( c_narration_id , PROFIT_LOSS_ON_COVER_LEG);

    if( d_obli_pl != 0)
    {
          /** Ver 3.7 Starts ***/
        MEMSET(c_tmp_rmrks);
        strcpy ( c_tmp_rmrks, st_pstn_actn.c_ref_rmrks );
        sprintf ( st_pstn_actn.c_ref_rmrks,"OPT-%s-%s-%ld-%c%c-",
                  st_pstn_actn.c_undrlyng,
                  st_pstn_actn.c_expry_dt,
                  st_pstn_actn.l_strike_prc/100,
                  st_pstn_actn.c_opt_typ,
                  st_pstn_actn.c_exrc_typ );
        strcat(st_pstn_actn.c_ref_rmrks,c_tmp_rmrks);
        /**** Ver 3.7 Ends *****/
		      i_returncode = fn_upd_limits( c_ServiceName,
                                      &st_pstn_actn,
                                      ptr_st_err_msg,
                                      c_narration_id,
                                      DEBIT_WITHOUT_LIMIT,
                                      d_obli_pl,
                                      &d_balance_amt);
      if ( i_returncode != 0 )
      {
        fn_errlog ( c_ServiceName, "S31375", LIBMSG, c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
      }
      strcpy (st_pstn_actn.c_ref_rmrks,c_tmp_rmrks); /*** Ver 3.7 ***/
		 }
	  } 
 	}

	/************* Ver 2.7 Ends *******************/

  /************** Ver 1.9 ** Ends ***************/

	st_orderbook.l_exctd_qty += ptr_st_tradebook->l_exctd_qty;
	st_orderbook.l_exctd_qty_day += ptr_st_tradebook->l_exctd_qty;
	strcpy(st_orderbook.c_ack_tm, ptr_st_tradebook->c_trd_dt);

  if(DEBUG_MSG_LVL_3)  /** Ver 3.1 **/
  {
		fn_userlog(c_ServiceName,"Total Order Qty Is :%ld:",st_orderbook.l_ord_tot_qty);      /* Ver 1.4 */
		fn_userlog(c_ServiceName,"Executed Qty Is :%ld:",st_orderbook.l_exctd_qty);           /* Ver 1.4 */
		fn_userlog(c_ServiceName,"Order Status Is :%c:",st_orderbook.c_ordr_stts);            /* Ver 1.4 */
	}

  if ( st_orderbook.c_ordr_stts == CANCELLED || st_orderbook.c_ordr_stts == PARTIALLY_EXECUTED_AND_CANCELLED )       /* Ver 1.4 */
  {
    st_orderbook.c_ordr_stts = PARTIALLY_EXECUTED_AND_CANCELLED;
  }
  else
  {
		if ( st_orderbook.l_exctd_qty < st_orderbook.l_ord_tot_qty )
		{
      /* Ver 4.0 Starts */
			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog(c_ServiceName, "st_orderbook.l_can_qty:%ld:", st_orderbook.l_can_qty);
			}
      if ( (st_orderbook.l_exctd_qty + st_orderbook.l_can_qty) == st_orderbook.l_ord_tot_qty )
      {
        st_orderbook.c_ordr_stts = PARTIALLY_EXECUTED_AND_CANCELLED;
      }
      else
      /* Ver 4.0 Ends */
			st_orderbook.c_ordr_stts = PARTIALLY_EXECUTED;
		}
		else
		{
			st_orderbook.c_ordr_stts = EXECUTED;
		}
	}

  /** Commented in Ver 2.3 *****

	st_orderbook.c_oprn_typ = UPDATE_TRADE_CONFIRMATION;

	i_ip_len = sizeof ( struct vw_orderbook );
	i_op_len = sizeof ( struct vw_orderbook );
				
  *** Added for Order Routing ***
	fn_cpy_ddr ( st_orderbook.c_rout_crt );

	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_orderbook,
                              &st_orderbook,
                              "vw_orderbook",
                              "vw_orderbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_ORDRBK" );
				
	if ( i_returncode != SUCC_BFR )
	{
  	fn_errlog ( c_ServiceName, "S31380", LIBMSG, ptr_st_err_msg->c_err_msg );
  	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
	}

	************/
    /*** ver 4.4 starts ***/

    EXEC SQL
    SELECT   NVL(FOD_LST_ACT_REF,'0') 
    INTO     :c_fod_last_act_no 
    FROM     FOD_FO_ORDR_DTLS
    WHERE    FOD_ORDR_RFRNC = :st_orderbook.c_ordr_rfrnc;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31385", SQLMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }

    rtrim(c_fod_last_act_no);
    sscanf(c_fod_last_act_no,"%lld",&ll_fod_last_act_no);
    sscanf(c_lst_act_ref,"%lld",&ll_lst_act_ref);

    /** Input Last Act Ref is greater than the existing in FOD table ***
        Then, input Last Act Ref is recent, set flag to 1 ************/

    i_recent_act_ref = ( ll_fod_last_act_no < ll_lst_act_ref ) ? 1 : 0;

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Last act no flag.:%d: c_ordr_rfrnc :%s: ll_fod_last_act_no :%lld: ll_lst_act_ref :%lld:",i_recent_act_ref,st_orderbook.c_ordr_rfrnc,ll_fod_last_act_no,ll_lst_act_ref);
    }
    /*** ver 4.4 ends ***/


/**** Ver 2.8  starts ****/
 if ( ptr_st_tradebook->c_prd_typ == 'I' )  
 {
		EXEC SQL /* 3.6 */
					SELECT 1
						INTO :i_ack_tm
						FROM FOD_FO_ORDR_DTLS
					 WHERE FOD_LST_RQST_ACK_TM < TO_DATE (:st_orderbook.c_ack_tm,'dd-mon-yyyy hh24:mi:ss' )
						 AND FOD_ORDR_RFRNC      = :st_orderbook.c_ordr_rfrnc;

		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
		{
			fn_errlog ( c_ServiceName, "S31390", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}

    if(DEBUG_MSG_LVL_3)  /** Ver 3.1 **/
    {
			fn_userlog(c_ServiceName,"i_ack_tm................................ :%d:",i_ack_tm);
			fn_userlog(c_ServiceName,"st_orderbook.c_ack_tm........................ :%s:",st_orderbook.c_ack_tm);
		}
		EXEC SQL /* 3.6 */ 
		 UPDATE  FOD_FO_ORDR_DTLS
		 SET     FOD_EXEC_QTY        = :st_orderbook.l_exctd_qty,
						 FOD_EXEC_QTY_DAY    = :st_orderbook.l_exctd_qty_day,
						 FOD_ORDR_STTS       = :st_orderbook.c_ordr_stts,
						 FOD_LST_RQST_ACK_TM = DECODE(:i_ack_tm,1,TO_DATE (:st_orderbook.c_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),FOD_LST_RQST_ACK_TM),   /** DECODE added in Ver 2.8 **/
						 FOD_TRD_VAL = NVL(FOD_TRD_VAL,0) + (:ptr_st_tradebook->l_exctd_qty * :ptr_st_tradebook->l_exctd_rt),
						 FOD_LST_ACT_REF     = DECODE(:i_recent_act_ref,1,:c_lst_act_ref,FOD_LST_ACT_REF)  /*** Ver 4.2 ***/ /** Ver 4.4 **/
		 WHERE   FOD_ORDR_RFRNC      = :st_orderbook.c_ordr_rfrnc;

		if ( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "S31395", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}
	}
	else
	{
	/**** Ver 2.8 Ends ****/
  /*** Ver 3.9 Starts ***/

      EXEC SQL
          SELECT 1
            INTO :i_ack_tm
            FROM fod_fo_ordr_dtls
           WHERE fod_lst_rqst_ack_tm < to_date (:st_orderbook.c_ack_tm,'dd-mon-yyyy hh24:mi:ss' )
             AND fod_ordr_rfrnc      = :st_orderbook.c_ordr_rfrnc;

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog ( c_ServiceName, "S31400", SQLMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"i_ack_tm................................ :%d:",i_ack_tm);
      fn_userlog(c_ServiceName,"st_orderbook.c_ordr_rfrnc................:%s:",st_orderbook.c_ordr_rfrnc);
      fn_userlog(c_ServiceName,"st_orderbook.c_ack_tm....................:%s:",st_orderbook.c_ack_tm);
    }

  /*** Ver 3.9 Ends ***/

	/*** Ver 2.3 Starts ***/
	 
	EXEC SQL /* 3.6 */
			 UPDATE  FOD_FO_ORDR_DTLS
			 SET     FOD_EXEC_QTY        = :st_orderbook.l_exctd_qty,
							 FOD_EXEC_QTY_DAY    = :st_orderbook.l_exctd_qty_day,
							 FOD_ORDR_STTS       = :st_orderbook.c_ordr_stts,
				 /***	 FOD_LST_RQST_ACK_TM = TO_DATE (:st_orderbook.c_ack_tm,'dd-mon-yyyy hh24:mi:ss' ), *** Commented in Ver 3.9 ***/
               FOD_LST_RQST_ACK_TM = DECODE(:i_ack_tm,1,to_date (:st_orderbook.c_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),fod_lst_rqst_ack_tm ),        /**** Ver 3.9 ***/
							 FOD_TRD_VAL = NVL(FOD_TRD_VAL,0) + (:ptr_st_tradebook->l_exctd_qty * :ptr_st_tradebook->l_exctd_rt),
							 FOD_LST_ACT_REF     = DECODE(:i_recent_act_ref,1,:c_lst_act_ref,FOD_LST_ACT_REF) /*** Ver 4.2 ***/ /** Ver 4.4 **/
			 WHERE   FOD_ORDR_RFRNC      = :st_orderbook.c_ordr_rfrnc;

	if ( SQLCODE != 0 )
	{
		fn_errlog ( c_ServiceName, "S31405", SQLMSG, ptr_st_err_msg->c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
	}	
	}
  /*** Ver 2.3 Ends **/

	ptr_st_tradebook->c_rms_prcsd_flg	= PROCESSED;

	ptr_st_tradebook->l_fresh_qty			= st_pstn_actn.l_fresh_qty;
	ptr_st_tradebook->l_cover_qty			= st_pstn_actn.l_cover_qty;

	ptr_st_tradebook->c_oprn_typ = UPDATE_TRADE_CONF;

	/*** Ver 1.9 ** Starts ***/

  if (ptr_st_tradebook->c_prd_typ == 'I')  
  {
    if (c_fc_flg == 'F' || c_fc_flg == 'E' ) /*** 'E' flag added in Ver 2.4 ***/
    {
      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog(c_ServiceName,"Inside Fresh");
      }
      ptr_st_tradebook->l_fresh_qty = ptr_st_tradebook->l_exctd_qty;
      ptr_st_tradebook->l_cover_qty = 0;
    }
    else
    if (c_fc_flg == 'C')
    {
      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog(c_ServiceName,"Inside Cover");
      }
      ptr_st_tradebook->l_fresh_qty = 0;
      ptr_st_tradebook->l_cover_qty = ptr_st_tradebook->l_exctd_qty;
    }
  }

  if(DEBUG_MSG_LVL_3)  /** Ver 3.1 **/
  {
  	fn_userlog(c_ServiceName,"ptr_st_tradebook->l_fresh_qty = :%ld:",ptr_st_tradebook->l_fresh_qty);
  	fn_userlog(c_ServiceName,"ptr_st_tradebook->l_cover_qty = :%ld:",ptr_st_tradebook->l_cover_qty);
	}
 /*** Ver 1.9 ** Ends ***/

	i_ip_len = sizeof ( struct vw_tradebook );
	i_op_len = sizeof ( struct vw_tradebook );
				
  /*** Added for Order Routing ***/
	fn_cpy_ddr ( ptr_st_tradebook->c_rout_crt );

	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              ptr_st_tradebook,
                              ptr_st_tradebook,
                              "vw_tradebook",
                              "vw_tradebook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_TRDBK" );
				
	if ( i_returncode != SUCC_BFR )
	{
  	fn_errlog ( c_ServiceName, "S31410", LIBMSG, ptr_st_err_msg->c_err_msg );
  	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
	}

  /***  Ver 4.3 started *********/
  if (ptr_st_tradebook->c_prd_typ == 'O')
  {
  i_returncode =  fn_cal_dlvry_mrgn( c_ServiceName,&st_pstn_actn,ptr_st_err_msg);

  if ( i_returncode != 0 )
  {
    fn_errlog ( c_ServiceName, "S31415", LIBMSG, ptr_st_err_msg->c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  }
  }
  /***  Ver 4.3 ended ***********/

	if ( fn_committran( c_ServiceName, i_trnsctn, 
                                     ptr_st_err_msg->c_err_msg ) == -1 )
	{
  	fn_errlog ( c_ServiceName, "S31420", LIBMSG, ptr_st_err_msg->c_err_msg );
  	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}

  /*** Ver 5.0 : starts here ***/
  i_returncode = 0;

  i_returncode = fn_upd_nrmlmrgn_reporting( st_orderbook.c_cln_mtch_accnt,
                                        st_orderbook.c_xchng_cd,
                                        c_ServiceName,
                                        c_err_msg);

  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "S31425", LIBMSG, ptr_st_err_msg->c_err_msg );
    fn_userlog(c_ServiceName,"Pls check, Nikhil Error while calling function fn_upd_mrgn_reporting..");
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  }
  /*** Ver 5.0 : Ends here ***/

	/** Ver 2.9 Starts**/ 
	if(ptr_st_tradebook->c_prd_typ == OPTIONPLUS)
	{
    /*** Ver 3.5 Starts Here ***/
    i_returncode= fn_prcs_trd(c_ServiceName,c_err_msg,ptr_st_tradebook->c_prd_typ,ptr_st_tradebook->c_ordr_rfrnc);

    if(i_returncode != 0)
    {
      fn_errlog ( c_ServiceName, "S31430", LIBMSG, ptr_st_err_msg->c_err_msg );
    }
    /*** Ver 3.5 Ends Here ***/

    /*** Commented in Ver 3.5
		MEMSET(st_tradebook);

    if(DEBUG_MSG_LVL_3)  ** Ver 3.1 **
    {
			fn_userlog( c_ServiceName, "Fetching starts");
		}
		EXEC SQL
		  SELECT
			  fod_sltp_ordr_rfrnc
		  INTO
			  :c_sltp_ord_rfrnc
		  FROM  FOD_FO_ORDR_DTLS
		  WHERE fod_ordr_rfrnc = :ptr_st_tradebook->c_ordr_rfrnc; 
		if(SQLCODE !=0)
		{
		  fn_errlog ( c_ServiceName, "S31435", SQLMSG, ptr_st_err_msg->c_err_msg );
		  fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
		  tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
		}

    if(DEBUG_MSG_LVL_3)  ** Ver 3.1 **
    {
			fn_userlog( c_ServiceName, "ptr_st_tradebook->c_ordr_rfrnc is :%s:",ptr_st_tradebook->c_ordr_rfrnc);
			fn_userlog( c_ServiceName, "c_sltp_ord_rfrnc is :%s:",c_sltp_ord_rfrnc);
		}
			EXEC SQL
			SELECT	ftd_clm_mtch_accnt,
							ftd_xchng_cd,
							ftd_prdct_typ,
							ftd_indstk,
							ftd_undrlyng,
							to_char(ftd_expry_dt,'DD-Mon-YYYY'),
							ftd_exer_typ,
							ftd_opt_typ,
							ftd_strk_prc,
							ftd_ordr_rfrnc,
							ftd_eba_trd_ref,
							ftd_ord_ack_nmbr,
							ftd_xchng_trd_no,
							to_char(ftd_trd_dt,'DD-Mon-YYYY hh24:mi:ss'),
							ftd_trnsctn_typ,
							ftd_trd_flw,
							ftd_exctd_qty,
							ftd_exctd_rt
					INTO	:st_tradebook.c_cln_mtch_accnt,
							:st_tradebook.c_xchng_cd,
							:st_tradebook.c_prd_typ,
							:st_tradebook.c_ctgry_indstk,
							:st_tradebook.c_undrlyng,
							:st_tradebook.c_expry_dt,
							:st_tradebook.c_exrc_typ,
							:st_tradebook.c_opt_typ,
							:st_tradebook.l_strike_prc,
							:st_tradebook.c_ordr_rfrnc,
							:st_tradebook.c_trd_rfrnc,
							:st_tradebook.c_xchng_ack,
							:st_tradebook.l_xchng_trd_no,
							:st_tradebook.c_trd_dt,
							:st_tradebook.c_trnsctn_typ:si_null,
							:st_tradebook.c_trd_flw,
							:st_tradebook.l_exctd_qty,
							:st_tradebook.l_exctd_rt
			FROM		ftd_fo_trd_dtls
			WHERE		ftd_ordr_rfrnc IN(:ptr_st_tradebook->c_ordr_rfrnc,:c_sltp_ord_rfrnc)
			AND			ftd_rms_prcsd_flg = 'N'
			AND			ROWNUM < 2
			ORDER		BY FTD_TRD_DT;

		  if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
		  {
				fn_errlog ( c_ServiceName, "S31440", SQLMSG, ptr_st_err_msg->c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)&ptr_st_err_msg, 0, 0 );
		  } 

		if( SQLCODE != NO_DATA_FOUND )
		{
			rtrim(st_tradebook.c_trd_dt);

			fn_cpy_ddr ( st_tradebook.c_rout_crt );

    if(DEBUG_MSG_LVL_3)  ** Ver 3.1 **
    {
			fn_userlog( c_ServiceName, "Calling SFO_OP_CVRTCONF");
		}
			i_returncode = fn_acall_svc( c_ServiceName,
										ptr_st_err_msg->c_err_msg,
										&st_tradebook,
										"vw_tradebook",
										sizeof( struct vw_tradebook),
										TPNOREPLY,
										"SFO_OP_CVRTCONF" );
			if ( i_returncode != SUCC_BFR )
			{
				fn_errlog ( c_ServiceName, "S31445", LIBMSG, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
			}
		}
		else
			fn_userlog( c_ServiceName, "NO_DATA_FOUND");
    *** Comment Ends for Ver 3.5 ****/
	}
	/** Ver 2.9 Ends**/ 	
/** Ver 3.0 Starts **/
  else if(ptr_st_tradebook->c_prd_typ == OPTIONS )
  {
    /*** Ver 3.5 Starts Here ***/
    i_returncode= fn_prcs_trd(c_ServiceName,c_err_msg,ptr_st_tradebook->c_prd_typ,ptr_st_tradebook->c_ordr_rfrnc);

    if(i_returncode != 0)
    {
      fn_errlog ( c_ServiceName, "S31450", LIBMSG, ptr_st_err_msg->c_err_msg );
    }
    /*** Ver 3.5 Ends Here ***/
    /**** Commented in Ver 3.5
    MEMSET(st_tradebook);

    if(DEBUG_MSG_LVL_3)  ** Ver 3.1 **
    {
    	fn_userlog( c_ServiceName, "Fetching starts");
    	fn_userlog( c_ServiceName, "ptr_st_tradebook->c_ordr_rfrnc is :%s:",ptr_st_tradebook->c_ordr_rfrnc);
		}	
      EXEC SQL
      SELECT  ftd_clm_mtch_accnt,
              ftd_xchng_cd,
              ftd_prdct_typ,
              ftd_indstk,
              ftd_undrlyng,
              to_char(ftd_expry_dt,'DD-Mon-YYYY'),
              ftd_exer_typ,
              ftd_opt_typ,
              ftd_strk_prc,
              ftd_ordr_rfrnc,
              ftd_eba_trd_ref,
              ftd_ord_ack_nmbr,
              ftd_xchng_trd_no,
              to_char(ftd_trd_dt,'DD-Mon-YYYY hh24:mi:ss'),
              ftd_trnsctn_typ,
              ftd_trd_flw,
              ftd_exctd_qty,
              ftd_exctd_rt
          INTO  :st_tradebook.c_cln_mtch_accnt,
              :st_tradebook.c_xchng_cd,
              :st_tradebook.c_prd_typ,
              :st_tradebook.c_ctgry_indstk,
              :st_tradebook.c_undrlyng,
              :st_tradebook.c_expry_dt,
              :st_tradebook.c_exrc_typ,
              :st_tradebook.c_opt_typ,
              :st_tradebook.l_strike_prc,
              :st_tradebook.c_ordr_rfrnc,
              :st_tradebook.c_trd_rfrnc,
              :st_tradebook.c_xchng_ack,
              :st_tradebook.l_xchng_trd_no,
              :st_tradebook.c_trd_dt,
              :st_tradebook.c_trnsctn_typ:si_null,
              :st_tradebook.c_trd_flw,
              :st_tradebook.l_exctd_qty,
              :st_tradebook.l_exctd_rt
      FROM    ftd_fo_trd_dtls
      WHERE   ftd_ordr_rfrnc = :ptr_st_tradebook->c_ordr_rfrnc
      AND     ftd_rms_prcsd_flg = 'N'
      AND     ROWNUM < 2
      ORDER   BY FTD_TRD_DT;

      if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog ( c_ServiceName, "S31455", SQLMSG, ptr_st_err_msg->c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
      }

    if( SQLCODE != NO_DATA_FOUND )
    {
      rtrim(st_tradebook.c_trd_dt);

      fn_cpy_ddr ( st_tradebook.c_rout_crt );

    if(DEBUG_MSG_LVL_3)  ** Ver 3.1 **
    {
      fn_userlog( c_ServiceName, "Calling SFO_OP_CVRTCONF");
		}
      i_returncode = fn_acall_svc( c_ServiceName,
                    ptr_st_err_msg->c_err_msg,
                    &st_tradebook,
                    "vw_tradebook",
                    sizeof( struct vw_tradebook),
                    TPNOREPLY,
                    "SFO_OP_CVRTCONF" );

      if ( i_returncode != SUCC_BFR )
      {
        fn_errlog ( c_ServiceName, "S31460", LIBMSG, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
      }
    }
    else
      fn_userlog( c_ServiceName, "NO_DATA_FOUND");
    **** Comment Ends For Ver 3.5 ****/
  }
  /** Ver 3.0 Ends **/
	/** Ver 2.8 Starts**/ 	
	 /** if(ptr_st_tradebook->c_prd_typ == OPTIONPLUS ) Commented in Ver 3.0 **/
  if(ptr_st_tradebook->c_prd_typ == OPTIONPLUS || ptr_st_tradebook->c_prd_typ == OPTIONS )
	{
	   MEMSET(st_cvr_xchngbk);
		/****** Commented in Ver 3.4 **
	   EXEC SQL
			 SELECT	fxb_rms_prcsd_flg,
		  				fxb_mdfctn_cntr
			 INTO
						 :frsh_rms_prcsd_flg,
						 :l_mdfctn_cntr
			 FROM		FXB_FO_XCHNG_BOOK
			 WHERE	FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc
			 AND    FXB_MDFCTN_CNTR = (select max(FXB_MDFCTN_CNTR)
			 FROM   FXB_FO_XCHNG_BOOK
			 WHERE  FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc); ** Ver 3.4 **/
			 /*** Ver 3.4 Starts ********/
			 EXEC SQL /* 3.6 */
			SELECT  FXB_RMS_PRCSD_FLG,
							FXB_MDFCTN_CNTR
			INTO		:frsh_rms_prcsd_flg,
							:l_mdfctn_cntr
			FROM    FXB_FO_XCHNG_BOOK
			WHERE		FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc
			AND    FXB_MDFCTN_CNTR = (SELECT MIN(FXB_MDFCTN_CNTR)
																FROM	 FXB_FO_XCHNG_BOOK
																WHERE	 FXB_ORDR_RFRNC= :ptr_st_tradebook->c_ordr_rfrnc
																AND		 FXB_JIFFY     = (SELECT MIN(FXB_JIFFY)
																												FROM	 FXB_FO_XCHNG_BOOK
																												WHERE	 FXB_ORDR_RFRNC= :ptr_st_tradebook->c_ordr_rfrnc
												 																AND		 FXB_RMS_PRCSD_FLG=:c_fxb_rms_prcsd_flag)
																AND			FXB_RMS_PRCSD_FLG=:c_fxb_rms_prcsd_flag)
			AND		FXB_RMS_PRCSD_FLG=:c_fxb_rms_prcsd_flag;
    /****** Ver 3.4 Ends *****/
    if(DEBUG_MSG_LVL_3)  /** Ver 3.1 **/
    {
			fn_userlog( c_ServiceName, "ptr_st_tradebook->c_ordr_rfrnc is :%s:",ptr_st_tradebook->c_ordr_rfrnc);
			fn_userlog( c_ServiceName, "frsh_rms_prcsd_flg is :%c: l_mdfctn_cntr: %ld",frsh_rms_prcsd_flg, l_mdfctn_cntr);
		}
	  if(SQLCODE != 0)
	  { 
			/*** Ver 3.4 Starts ***/
			if( SQLCODE == NO_DATA_FOUND && ptr_st_tradebook->c_prd_typ == OPTIONPLUS)
			{
					EXEC SQL /* 3.6 */
					SELECT  FXB_RMS_PRCSD_FLG,
									FXB_MDFCTN_CNTR
					INTO		:cvr_rms_prcsd_flg,
									:l_mdfctn_cntr
					FROM    FXB_FO_XCHNG_BOOK
					WHERE		FXB_ORDR_RFRNC = :c_cvr_ordr_rfrnc
					AND    FXB_MDFCTN_CNTR = (SELECT MIN(FXB_MDFCTN_CNTR)
																		FROM	 FXB_FO_XCHNG_BOOK
																		WHERE	 FXB_ORDR_RFRNC= :c_cvr_ordr_rfrnc
																		AND		 FXB_JIFFY     = (SELECT MIN(FXB_JIFFY)
																														FROM	 FXB_FO_XCHNG_BOOK
																														WHERE	 FXB_ORDR_RFRNC= :c_cvr_ordr_rfrnc
												 																		AND		 FXB_RMS_PRCSD_FLG=:c_fxb_rms_prcsd_flag)
																		AND			FXB_RMS_PRCSD_FLG=:c_fxb_rms_prcsd_flag)
					AND		FXB_RMS_PRCSD_FLG=:c_fxb_rms_prcsd_flag;
					if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
					{
						fn_errlog ( c_ServiceName, "S31465", SQLMSG, ptr_st_err_msg->c_err_msg );
						fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)&ptr_st_err_msg, 0, 0 );
					}
			  /***** Ver 3.4 Ends ****/
				/***** Commented in Ver 3.4 
			fn_errlog ( c_ServiceName, "S31470", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)&ptr_st_err_msg, 0, 0 ); Ver 3.4 Ends ***/
			}
		}
	  
		if( frsh_rms_prcsd_flg != 'N'  && cvr_rms_prcsd_flg != 'N' ) /***** cvr_rms_prcsd_flg check added in Ver 3.4 **/
	  {
			fn_userlog( c_ServiceName, "No unprocessed record");
	  }
    /** else if( frsh_rms_prcsd_flg == 'N' && l_mdfctn_cntr == 99) Commented in Ver 3.0 **/
    else if( frsh_rms_prcsd_flg == 'N' || cvr_rms_prcsd_flg =='N')  /***  cvr_rms_prcsd_flg =='N' added in Ver 3.4 ***/
	  {
			fn_userlog( c_ServiceName, "unprocessed record exist so process it...");
			/****** Ver 3.4 Starts ********/
      if( frsh_rms_prcsd_flg == 'N' )
			{
				strcpy(c_ordr_rfrnc_core,ptr_st_tradebook->c_ordr_rfrnc);
			}
			else if (cvr_rms_prcsd_flg == 'N')
			{
				strcpy(c_ordr_rfrnc_core,c_cvr_ordr_rfrnc);
			}
			fn_userlog(c_ServiceName,"c_ordr_rfrnc_core  :%s:",c_ordr_rfrnc_core);
			/***** Ver 3.4 Ends *****/
			/***** Commented in Ver 3.4 ***
		  EXEC SQL
				SELECT	FXB_ORS_MSG_TYP,
								FXB_MDFCTN_CNTR,
								nvl(to_char(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-')
				INTO   :st_cvr_xchngbk.l_ors_msg_typ,
							 :st_cvr_xchngbk.l_mdfctn_cntr,
							 :st_cvr_xchngbk.c_ack_tm
				FROM   FXB_FO_XCHNG_BOOK
				WHERE  FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc
				AND    FXB_MDFCTN_CNTR = (select max(FXB_MDFCTN_CNTR)
				FROM   FXB_FO_XCHNG_BOOK
				WHERE  FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc)
				AND    FXB_RMS_PRCSD_FLG = 'N'; **** Ver 3.4 *****/
				/***** Ver 3.4 Starts ******/
				EXEC SQL /* 3.6 */
			SELECT  FXB_ORS_MSG_TYP,
							FXB_MDFCTN_CNTR,
							NVL(TO_CHAR(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-'),
              NVL(FXB_XCHNG_CNCLD_QTY,0)                                   /**** Ver 3.5 *****/
			INTO		:st_cvr_xchngbk.l_ors_msg_typ,
							:st_cvr_xchngbk.l_mdfctn_cntr,
							:st_cvr_xchngbk.c_ack_tm,
              :st_cvr_xchngbk.l_xchng_can_qty                              /***** Ver 3.5 ***/
			FROM    FXB_FO_XCHNG_BOOK
			WHERE		FXB_ORDR_RFRNC = :c_ordr_rfrnc_core
			AND    FXB_MDFCTN_CNTR = (SELECT MIN(FXB_MDFCTN_CNTR)
																FROM	 FXB_FO_XCHNG_BOOK
																WHERE	 FXB_ORDR_RFRNC= :c_ordr_rfrnc_core
																AND		 FXB_JIFFY     = (SELECT MIN(FXB_JIFFY)
																												FROM	 FXB_FO_XCHNG_BOOK
																												WHERE	 FXB_ORDR_RFRNC= :c_ordr_rfrnc_core
												 																AND		 FXB_RMS_PRCSD_FLG=:c_fxb_rms_prcsd_flag)
																AND			FXB_RMS_PRCSD_FLG=:c_fxb_rms_prcsd_flag)
			AND		FXB_RMS_PRCSD_FLG=:c_fxb_rms_prcsd_flag;
      /******** Ver 3.4 ***** Ends **********/

		if(SQLCODE !=0)
		{
			fn_errlog ( c_ServiceName, "S31475", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)&ptr_st_err_msg, 0, 0 );
		}	

		strcpy(st_cvr_xchngbk.c_entry_dt_tm , st_cvr_xchngbk.c_ack_tm);
		st_cvr_xchngbk.d_jiffy       = 0;
		st_cvr_xchngbk.l_dwnld_flg   = 0;
		fn_cpy_ddr ( st_cvr_xchngbk.c_rout_crt );
		strcpy(st_cvr_xchngbk.c_xchng_rmrks,"*");
		/**strcpy(st_cvr_xchngbk.c_ordr_rfrnc, ptr_st_tradebook->c_ordr_rfrnc); Commented in Ver 3.4 ****/
		strcpy(st_cvr_xchngbk.c_ordr_rfrnc,c_ordr_rfrnc_core);  /*** Ver 3.4 ***/
	
		/** l_ftd_ord_exe_qty = 0 ; *** Ver 3.1 *** Commented in ver 3.5 *****

		EXEC SQL
			SELECT  NVL(SUM(ftd_exctd_qty),0) *** NVL added in Ver 3.1 ***
			INTO		:l_ftd_ord_exe_qty
			FROM		ftd_fo_trd_dtls
			*** WHERE		ftd_ordr_rfrnc = :ptr_st_tradebook->c_ordr_rfrnc; **** Commented in Ver 3.4 ***
			WHERE    ftd_ordr_rfrnc=:c_ordr_rfrnc_core; *** Ver 3.4 ***

		if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
		{
			fn_errlog ( c_ServiceName, "S31480", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)&ptr_st_err_msg, 0, 0 );
		}

    if(DEBUG_MSG_LVL_3)  ** Ver 3.1 **
    {
			fn_userlog( c_ServiceName, "l_ftd_ord_exe_qty: %ld",l_ftd_ord_exe_qty);
		}
		st_cvr_xchngbk.l_xchng_can_qty = l_ftd_ord_exe_qty;

		 ********* Commented in ver 3.5 Ends **********/

		i_returncode = fn_acall_svc ( c_ServiceName,
								  c_err_msg,
								  &st_cvr_xchngbk,
								  "vw_xchngbook",
								  sizeof ( st_cvr_xchngbk),
								  TPNOREPLY,
								  "SFO_OPT_ACK" );
		
		if ( i_returncode != 0 )
		{
			fn_userlog( c_ServiceName, "Error while calling SFO_OPT_ACK");
			fn_errlog ( c_ServiceName, "S31485", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)&ptr_st_err_msg, 0, 0 );
		}
	 }
 }
 /** Ver 2.8 Ends**/ 	

  if( st_orderbook.c_ordr_stts == EXECUTED )
  {
    ptr_st_tradebook->c_oprn_typ = 'T';
  }
  else
  {
    ptr_st_tradebook->c_oprn_typ = 'P';
  }

/************ Ver 1.5
	fn_cpy_ddr ( ptr_st_tradebook->c_rout_crt );

  i_returncode = fn_acall_svc( c_ServiceName,
                               ptr_st_err_msg->c_err_msg,
                               ptr_st_tradebook,
                               "vw_tradebook",
                               sizeof( struct vw_tradebook),
                               (TPNOREPLY|TPNOTRAN),
                               "SFO_ML_FRMTTR" );
  if ( i_returncode != SUCC_BFR )
  {
    fn_errlog ( c_ServiceName, "S31490", LIBMSG, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  }
************/

  if ( st_pstn_actn.c_mtm_flag == NO_OPEN_ORDERS )
  {
   	sprintf(st_pstn_actn.c_imtm_rmrks,
   	"SQUAREOFF ORDER [%s] EXECUTED ,TRADE REF - [%s], QTY - [%ld]",
   																						ptr_st_tradebook->c_ordr_rfrnc,
   																						ptr_st_tradebook->c_trd_rfrnc,
   																						ptr_st_tradebook->l_exctd_qty );

   	sprintf( c_tag,"bat_opt_imtm_%s",st_pstn_actn.c_xchng_cd);

    /*************************************
    fn_cpy_ddr ( st_pstn_actn.c_rout_crt );
    **************************************/

    i_returncode = fn_acall_svc_fml ( c_ServiceName,
                                      ptr_st_err_msg->c_err_msg,
                                      "SFO_PRCS_OIMTM",
                                      /***0, *** Ver 3.8 ***/
                                      TPNOTRAN|TPNOREPLY, /*** Ver 3.8 ***/
                                      12,
                    FFO_EBA_MTCH_ACT_NO, ( char *)st_pstn_actn.c_cln_mtch_accnt,
                    FFO_XCHNG_CD, ( char * )st_pstn_actn.c_xchng_cd,
                    FFO_PRDCT_TYP, ( char * )&st_pstn_actn.c_prd_typ,
                    FFO_UNDRLYNG, ( char * )st_pstn_actn.c_undrlyng,
                    FFO_CTGRY_INDSTK, ( char * )&st_pstn_actn.c_ctgry_indstk,
                    FFO_EXPRY_DT, ( char * )st_pstn_actn.c_expry_dt,
                    FFO_STRK_PRC, ( char * )&st_pstn_actn.l_strike_prc,
                    FFO_EXER_TYP, ( char * )&st_pstn_actn.c_exrc_typ,
                    FFO_OPT_TYP, ( char * )&st_pstn_actn.c_opt_typ,
                    FFO_IMTM_RMRKS, ( char * )st_pstn_actn.c_imtm_rmrks,
                    FFO_PIPE_ID, ( char * )st_orderbook.c_pipe_id,
                    FFO_BAT_TAG, ( char * )c_tag);

    if ( i_returncode != SUCC_BFR )
    {
      fn_errlog ( c_ServiceName, "S31495", LIBMSG, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }

  }

	 /** Ver 4.3 Starts Here ***/
  else if (st_pstn_actn.c_mtm_flag == NO_PHYDLVRY_OPEN_ORDERS )
  {
    c_rqst_typ='I';
    strcpy(c_call_typ,"TRD"); /** Ver 4.7 **/
    /*** call service for Dlvry ***/
    i_returncode = fn_acall_svc_fml ( c_ServiceName,
                                      c_err_msg,
                                      "SFO_DLVMRG_PRC",
                                      TPNOTRAN|TPNOREPLY,
                                      12, /** Changes to 12 from 11 in Ver 4.7 **/
                                      FFO_EBA_MTCH_ACT_NO, ( char *)st_pstn_actn.c_cln_mtch_accnt,
                                      FFO_XCHNG_CD, ( char * )st_pstn_actn.c_xchng_cd,
                                      FFO_PRDCT_TYP, ( char * )&st_pstn_actn.c_prd_typ,
                                      FFO_UNDRLYNG, ( char * )st_pstn_actn.c_undrlyng,
                                      FFO_EXPRY_DT, ( char * )st_pstn_actn.c_expry_dt,
                                      FFO_EXER_TYP, ( char * )&st_pstn_actn.c_exrc_typ,
                                      FFO_OPT_TYP, ( char * )&st_pstn_actn.c_opt_typ,
                                      FFO_STRK_PRC, ( char * )&st_pstn_actn.l_strike_prc,
                                      FFO_CTGRY_INDSTK, ( char * )&st_pstn_actn.c_ctgry_indstk,
                                      FFO_RQST_TYP, (char *)&c_rqst_typ,
																			FFO_STATUS_FLG,(char *)&c_span_flg,
                                      FFO_USER_CODE,(char *) c_call_typ ); /** Added in Ver 4.7 **/ 

    if ( i_returncode == -1 )
    {
      fn_errlog ( c_ServiceName, "S31500", LIBMSG, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }
  }
  /**** Ver 4.3 Ends Here ****/

  /***** Ver 2.5 Starts here ****/
  if(
      ( strcmp(st_orderbook.c_channel, "SYS") == 0 )      &&
      st_orderbook.c_spl_flg == 'M'
    )
  {
    fo_ins_sqofford(c_ServiceName,c_err_msg,&st_orderbook,'D',st_pstn_actn.c_cntrct_tag);
  }
  
  /***** Ver 2.5 Ends here ****/ 

  /**** Ver 4.7 Starts ****/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName," c_spl_flg :%c:",st_orderbook.c_spl_flg);
    fn_userlog(c_ServiceName," c_channel :%s:",st_orderbook.c_channel);
  }

  if ( (strcmp(st_orderbook.c_channel, "SYS") == 0 ) &&  st_orderbook.c_spl_flg == 'L') 
  {

       fn_userlog(c_ServiceName," Calling fn_mrgn_shrtfll_sms_mail ....");

       i_returncode = fn_mrgn_shrtfll_sms_mail ( c_ServiceName,
                                                 st_pstn_actn.c_cln_mtch_accnt,
                                                 st_pstn_actn.c_xchng_cd,
                                                 st_pstn_actn.c_prd_typ,
                                                 st_pstn_actn.c_ctgry_indstk,
                                                 st_pstn_actn.c_undrlyng,
                                                 st_pstn_actn.c_expry_dt,
                                                 st_pstn_actn.c_exrc_typ,
                                                 st_pstn_actn.c_opt_typ,
                                                 st_pstn_actn.l_strike_prc,
                                                 'L');
       if ( i_returncode != 0 )
       {
          fn_userlog(c_ServiceName,"Error in Margin_shrtfll SMS ..");
          fn_errlog ( c_ServiceName, "S31505", LIBMSG, ptr_st_err_msg->c_err_msg);
       }
  }

  /**** Ver 4.7 Ends ****/
 
/*** Start for Ver 2.0 ***/

	if (st_orderbook.c_ordr_stts == EXECUTED && !(strcmp(st_orderbook.c_channel,"SYS") == 0 || strcmp(st_orderbook.c_ctcl_id,"111111111111") == 0 || strcmp(st_orderbook.c_ctcl_id,"1111111111111") == 0 || strcmp(st_orderbook.c_ctcl_id,"333333333333") == 0))
  {
    if(DEBUG_MSG_LVL_3)  /** Ver 3.1 **/
    {
    	fn_userlog(c_ServiceName,"Inside SMS Condition");
		}
    d_ord_lmt_rt = (double) st_orderbook.l_ord_lmt_rt;

    i_returncode = fn_acall_svc_fml ( c_ServiceName,
                                      ptr_st_err_msg->c_err_msg,
                                      "SVC_SET_SMSALRT",
                                      0,
                                      17,
                    FML_ORD_CLM_MTCH_ACCNT, (char *)st_orderbook.c_cln_mtch_accnt,
                    FML_PRDCT_TYP, ( char * )&st_orderbook.c_prd_typ,
                    FML_ORD_STCK_CD, ( char * )st_orderbook.c_undrlyng,
                    FML_EXPIRY_DATE, (char *)st_orderbook.c_expry_dt,
                    FML_ORD_PRDCT_TYP, (char *)&st_orderbook.c_exrc_typ,
                    FML_TRN_PRDT_TYP, (char *)&st_orderbook.c_opt_typ,
                    FML_TRADE_PRICE, (char *)&st_orderbook.l_strike_prc,
                    FML_ORD_ORDR_RFRNC, (char *)st_orderbook.c_ordr_rfrnc,
                    FML_TOTAL_QTY, (char *)&st_orderbook.l_ord_tot_qty,
                    FML_ORD_TRD_DT, (char *)st_orderbook.c_trd_dt,
                    FML_ORD_ORDR_STTS, (char *)&st_orderbook.c_ordr_stts,
                    FML_EXEC_QTY, (char *)&st_orderbook.l_exctd_qty,
                    FML_CANC_QTY, (char *)&st_orderbook.l_can_qty,
                    FML_EXPR_QTY, (char *)&st_orderbook.l_exprd_qty,
                    FML_ORD_ORDR_FLW,(char *)&st_orderbook.c_ordr_flw,
                    FML_ORD_LMT_RT,(char *)&d_ord_lmt_rt,
                    FML_ORD_LMT_MRKT_FLG,(char *)&st_orderbook.c_slm_flg);

    if ( i_returncode != SUCC_BFR )
    {
      fn_errlog ( c_ServiceName, "S31510", LIBMSG, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }

  }

/*** End for Ver 2.0 ***/

	tpfree ( ( char * ) ptr_st_err_msg );
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_tradebook, 0, 0 );
} 
