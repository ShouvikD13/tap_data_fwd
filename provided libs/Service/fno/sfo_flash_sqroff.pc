/*  Program           : SFO_FLASH_SQROFF                                      */
/*                                                                            */
/* Input              : FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_ORDR_RFRNC                                        */
/*                                                                            */
/*                                                                            */
/******************************************************************************/
/*  Initial release:  Naveena   17-Jun-2022                                   */
/*                                                                            */
/******************************************************************************/
/*  This service is called by CEP to close position                           */
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fml_def.h>
#include <fo.h>
#include <fo_view_def.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>
#include <fn_session.h>

int fn_tag_ordr( char  *c_ServiceName,
							   char  *c_inp_ordr_ref,
								 char  *c_sqroff_ordr_ref,
							   char  *c_err_msg
							  );

void SFO_FLASH_SQROFF( TPSVCINFO *rqst )
{
  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;
	FBFR32 *ptr_fml_Sbuffer;
	FBFR32 *ptr_fml_Rbuffer;

  char  c_ServiceName[33];
  char  c_err_msg[256];
  int i_err[24];
  int i_ferr[24];
	char c_inp_ordr_ref[19] = "\0";
	char c_tag_ordr_ref[19] = "\0";
	int i_fml_loop = 0;
	char  c_cln_mtch_accnt[11]="\0";     
	char c_xchng_cd[4]="\0";           
	char c_prd_typ = '\0';
	char c_ctgry_indstk= '\0';      
	char c_undrlyng[7]="\0";           
	char c_expry_dt[11+1]="\0";           
	char c_exrc_typ = '\0';           
	char c_opt_typ = '\0';            
	long l_strike_prc = 0;         
	char c_trnsctn_flw = '\0';        
	long l_ord_qty = 0;     
	char c_span_flag = '\0';
	char c_bse_span_flag = '\0';
	char c_sqroff_ordr_ref[19] = "\0";
	long l_sssn_id = 0;
	char c_slm_flg= '\0';
	char c_ord_typ= '\0';
	long int li_dsclsd_qty = 0;
  long int li_stp_lss_tgr_prc = 0;
	long int li_lmt_rt = 0;
	char c_spl_flg = '\0';
	char c_channel[4]="\0";
	char c_alias[9]="\0";
	char c_svc_nm[33] = "\0";
  char c_src_flg = '\0';
  long l_open_qty = 0;
  varchar c_ven_id[50+1];
  int i_cnt =0;

	char c_user_id[9] = "\0";
	
  int i_returncode  = 0;
	long    l_recvbuff    = 0;

  struct vw_usr_prfl st_usr_prfl;
  struct vw_err_msg st_err_msg;

  ptr_fml_Obuf = NULL;

 EXEC SQL BEGIN DECLARE SECTION;
 EXEC SQL END DECLARE SECTION;

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );

  INITDBGLVL(c_ServiceName);

  MEMSET(c_err_msg);
	MEMSET(i_err);
	MEMSET(i_ferr);
	MEMSET (c_ven_id);
  MEMSET(st_usr_prfl);
	MEMSET(st_err_msg);


	i_err  [ 0 ]   = Fget32( ptr_fml_Ibuf ,FFO_ORDR_RFRNC,0,(char *) c_inp_ordr_ref,0);
  i_ferr [ 0 ]     = Ferror32;

	if ( i_err[ 0 ] == -1 )
	{
		fn_errlog( c_ServiceName, "S31005", Fstrerror32( i_ferr[0]),c_err_msg );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	c_spl_flg = CLIENT_SQROFF;

  i_err[ 0 ]   = Fget32( ptr_fml_Ibuf ,FFO_USR_ID,0,(char *) c_user_id,0);
  i_ferr[ 0 ]   = Ferror32;
  i_err[ 1 ]   = Fget32( ptr_fml_Ibuf ,FFO_SSSN_ID,0,(char *) &l_sssn_id,0);
  i_ferr[ 1 ]   = Ferror32;
	i_err  [ 2 ]   = Fget32( ptr_fml_Ibuf ,FFO_SPL_FLG,0,(char *) &c_spl_flg,0);  /*** S - SYSTEM_SQUAREOFF ***/ 
  i_ferr [ 2 ]     = Ferror32;

	for(i_cnt =0; i_cnt <=2; i_cnt++)
	{
  	if ( i_err[ i_cnt ] == -1 )
		{
			if( (i_cnt == 0) && i_ferr[i_cnt] == FNOTPRES )
			{
				strcpy(c_user_id,DEF_USR);
			}
			else if( (i_cnt == 1) && i_ferr[i_cnt] == FNOTPRES )
  		{
				l_sssn_id = 0;
			}
			else if ( (i_cnt == 2) && i_ferr[i_cnt] == FNOTPRES )
			{
				c_spl_flg = CLIENT_SQROFF;
				strcpy(c_channel,"WEB");
			}
			else
			{
    		fn_errlog( c_ServiceName, "S31005", Fstrerror32( i_ferr[i_cnt]),c_err_msg );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
 		}
	}

	if (l_sssn_id != 0 || c_spl_flg == CLIENT_SQROFF)
	{
 		i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_usr_prfl,
                           "vw_usr_prfl" );

 	 if ( i_returncode == -1 )
   {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
   
	 i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl,
                                             &st_err_msg ) ;
   if ( i_returncode == -1 )
   {
    fn_errlog(c_ServiceName,"S31015",LIBMSG, c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }	
	}

	 if( DEBUG_MSG_LVL_3 ) {
		fn_userlog(c_ServiceName,"c_inp_ordr_ref:%s: c_spl_flg=:%c:",c_inp_ordr_ref,c_spl_flg);
	 }

	 EXEC SQL
     SELECT FOD_SLTP_ORDR_RFRNC,
						FOD_CLM_MTCH_ACCNT,  					           
						FOD_XCHNG_CD,          
						FOD_PRDCT_TYP,         
						FOD_INDSTK,            
						FOD_UNDRLYNG,          
						FOD_EXPRY_DT,          
						FOD_EXER_TYP,          
						FOD_OPT_TYP,           
						FOD_STRK_PRC,          
						decode(FOD_ORDR_FLW,'B','S','B'),          
						NVL(FOD_EXEC_QTY,0) ,
						FOD_SOURCE_FLG,
						FOD_ESP_ID
      INTO :c_tag_ordr_ref,
					 :c_cln_mtch_accnt,
					 :c_xchng_cd,
					 :c_prd_typ,
					 :c_ctgry_indstk,
					 :c_undrlyng,
					 :c_expry_dt,
					 :c_exrc_typ,
					 :c_opt_typ,
					 :l_strike_prc,
					 :c_trnsctn_flw,
					 :l_ord_qty,
					 :c_src_flg,
					 :c_ven_id 
      FROM FOD_FO_ORDR_DTLS
      WHERE FOD_ORDR_RFRNC = :c_inp_ordr_ref;

		if( DEBUG_MSG_LVL_3 ) {
		fn_userlog(c_ServiceName,"c_tag_ordr_ref:%s:",c_tag_ordr_ref);
		}

		if ( SQLCODE != 0 && SQLCODE != NULL_RETURN)
		{
			fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

	SETNULL(c_ven_id);

  if(SQLCODE != NULL_RETURN )
	{
			strcpy(c_err_msg,"Squareoff order is already placed");
			fn_userlog(c_ServiceName,"Squareoff order is already placed");
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );			
	}
	else
	{

		/* If open position exist then only go for squareoff */
		EXEC SQL
			select 	SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY
			INTO 		:l_open_qty
			FROM 		FOD_FO_ORDR_DTLS
			WHERE   FOD_XCHNG_CD =	:c_xchng_cd
			AND     FOD_PRDCT_TYP = :c_prd_typ
			AND			DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_inp_ordr_ref;

    if ( SQLCODE != 0)
    {
      fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if( DEBUG_MSG_LVL_3 ) {
		fn_userlog( c_ServiceName,"l_open_qty =:%ld:",l_open_qty);
		}

		if (l_open_qty == 0)
		{
			fn_userlog(c_ServiceName,"Position already squared off");
      fn_errlog( c_ServiceName, "S31011", LIBMSG, c_err_msg  );
		  strcpy(c_err_msg,"Position already squared off");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		
		/* Place square off order */

		if((ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32", NULL, MIN_FML_BUF_LEN)) == NULL)
		{
			fn_errlog( c_ServiceName, "S31020", TPMSG, c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

	  if ( (ptr_fml_Rbuffer = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN)) == NULL)
		{
			fn_errlog( c_ServiceName, "S31025", TPMSG, c_err_msg  );
      tpfree ( ( char * ) ptr_fml_Sbuffer );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		/*** l_sssn_id = 0; ***/
		c_slm_flg=MARKET;
		c_ord_typ=GOOD_TILL_TODAY;
		li_dsclsd_qty = 0;
		li_stp_lss_tgr_prc = 0;
		li_lmt_rt = 0;
		/*** c_spl_flg = SYSTEM_SQUAREOFF; ***/
		if (c_spl_flg == SYSTEM_SQUAREOFF)
		{
			strcpy(c_channel,"SYS");
		}
		strcpy(c_alias,"*");

    EXEC SQL
      SELECT NVL(CLM_SPAN_ALLWD,'N'),
             NVL(CLM_BSESPAN_ALLWD,'N')
      INTO   :c_span_flag,
             :c_bse_span_flag
      FROM    CLM_CLNT_MSTR
      WHERE   CLM_MTCH_ACCNT = :c_cln_mtch_accnt;

      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
        tpfree ( ( char * ) ptr_fml_Sbuffer );
        tpfree ( ( char * ) ptr_fml_Rbuffer );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if ( ( c_span_flag == 'Y'    && strcmp(c_xchng_cd,"NFO") == 0) ||
           ( c_bse_span_flag =='Y' && strcmp(c_xchng_cd,"BFO") == 0)
         )
      {
        strcpy( c_svc_nm, "SFO_SPN_PLC_ORD");
      }
      else
      {
        if (c_prd_typ == 'F')
        {
          strcpy( c_svc_nm, "SFO_FUT_PLC_ORD");
        }
        else if(c_prd_typ == 'O')
        {
          strcpy( c_svc_nm, "SFO_OPT_PLC_ORD");
        }
        else
        {
          fn_userlog(c_ServiceName , "Product type not handled");
        }
      }

		i_err[0]  = Fadd32(ptr_fml_Sbuffer, FFO_USR_ID, (char *)c_user_id, 0);
		i_ferr[0] = Ferror32;
		i_err[1]  = Fadd32(ptr_fml_Sbuffer, FFO_SSSN_ID, (char *)&l_sssn_id, 0);
		i_ferr[1] = Ferror32;
		i_err[2]  = Fadd32(ptr_fml_Sbuffer, FFO_LMT_MKT_SL_FLG , (char *)&c_slm_flg, 0);
		i_ferr[2] = Ferror32;
		i_err[3]  = Fadd32(ptr_fml_Sbuffer, FFO_ORD_TYP,  (char *)&c_ord_typ, 0);
		i_ferr[3] = Ferror32;
		i_err[4]  = Fadd32(ptr_fml_Sbuffer, FFO_XCHNG_CD,  (char *)c_xchng_cd, 0);
		i_ferr[4] = Ferror32;
		i_err[5]  = Fadd32(ptr_fml_Sbuffer, FFO_OPT_TYP,  (char *)&c_opt_typ, 0);
		i_ferr[5] = Ferror32;
		i_err[6]  = Fadd32(ptr_fml_Sbuffer, FFO_STRK_PRC, (char *)&l_strike_prc, 0);
		i_ferr[6] = Ferror32;
		i_err[7]  = Fadd32(ptr_fml_Sbuffer, FFO_PRDCT_TYP, (char *)&c_prd_typ, 0);
		i_ferr[7] = Ferror32;
		i_err[8]  = Fadd32(ptr_fml_Sbuffer, FFO_CHANNEL, (char *)c_channel, 0);
		i_ferr[8] = Ferror32;
		i_err[9] = Fadd32(ptr_fml_Sbuffer, FFO_ALIAS, (char *)&c_alias, 0);
		i_ferr[9]= Ferror32;
		i_err[10] = Fadd32(ptr_fml_Sbuffer, FFO_DSCLSD_QTY, (char *)&li_dsclsd_qty, 0);
		i_ferr[10]= Ferror32;
		i_err[11] = Fadd32(ptr_fml_Sbuffer, FFO_STP_LSS_TGR, (char *)&li_stp_lss_tgr_prc, 0);
		i_ferr[11]= Ferror32;
		i_err[12] = Fadd32(ptr_fml_Sbuffer, FFO_LMT_RT, (char *)&li_lmt_rt, 0);
		i_ferr[12]= Ferror32;
		i_err[13] = Fadd32(ptr_fml_Sbuffer, FFO_SPL_FLG, (char *)&c_spl_flg, 0);
		i_ferr[13]= Ferror32;
    i_err[14]  = Fadd32(ptr_fml_Sbuffer, FFO_EBA_MTCH_ACT_NO, (char *)c_cln_mtch_accnt, 0);
		i_ferr[14] = Ferror32;
		i_err[15]  = Fadd32(ptr_fml_Sbuffer, FFO_UNDRLYNG, (char *)c_undrlyng, 0);
		i_ferr[15] = Ferror32;
		i_err[16]  = Fadd32(ptr_fml_Sbuffer, FFO_EXPRY_DT, (char *)c_expry_dt, 0);
		i_ferr[16] = Ferror32;
		i_err[17]  = Fadd32(ptr_fml_Sbuffer, FFO_EXER_TYP, (char *)&c_exrc_typ, 0);
		i_ferr[17] = Ferror32;
		i_err[18]  = Fadd32(ptr_fml_Sbuffer, FFO_CTGRY_INDSTK, (char *)&c_ctgry_indstk, 0);
		i_ferr[18] = Ferror32;
		i_err[19]  = Fadd32(ptr_fml_Sbuffer, FFO_ORDR_FLW, (char *)&c_trnsctn_flw, 0);
		i_ferr[19] = Ferror32;
		i_err[20]  = Fadd32(ptr_fml_Sbuffer, FFO_ORD_TOT_QTY, (char *)&l_open_qty, 0);
		i_ferr[20] = Ferror32;
		i_err[21]  = Fadd32(ptr_fml_Sbuffer, FFO_SVC_NAME, (char *)c_svc_nm, 0);
		i_ferr[21] = Ferror32;
		i_err[22]  = Fadd32(ptr_fml_Sbuffer, FFO_STATUS_FLG, (char *)&c_src_flg, 0);
		i_ferr[22] = Ferror32;
		i_err[23]  = Fadd32(ptr_fml_Sbuffer,FFO_USER_CODE , (char *)c_ven_id.arr, 0);
		i_ferr[23] = Ferror32;

		for(i_fml_loop = 0; i_fml_loop < 24 ; i_fml_loop++)
		{
			if(i_err[i_fml_loop] == -1)
			{
				fn_userlog(c_ServiceName,"The field number is %d", i_fml_loop);
				fn_errlog(c_ServiceName, "S31030", Fstrerror32(i_ferr[i_fml_loop]), c_err_msg);
        tpfree ( ( char * ) ptr_fml_Sbuffer );
        tpfree ( ( char * ) ptr_fml_Rbuffer );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );			
			}
		}

      i_returncode = tpcall("SFO_ORD_ROUT", (char *)ptr_fml_Sbuffer, 0, (char **)&ptr_fml_Rbuffer, &l_recvbuff, 0);
			
			if(i_returncode != 0 )
			{
				i_err[0]   = Fget32( ptr_fml_Rbuffer, FFO_ERR_MSG, 0, c_err_msg, 0 );
				fn_userlog(c_ServiceName,"c_err_msg:%s:",c_err_msg);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        fn_errlog( c_ServiceName, "S31040", TPMSG, c_err_msg  );
        tpfree ( ( char * ) ptr_fml_Sbuffer );
        tpfree ( ( char * ) ptr_fml_Rbuffer );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

			i_err[0]   = Fget32( ptr_fml_Rbuffer, FFO_ORDR_RFRNC, 0, c_sqroff_ordr_ref, 0 );
      i_ferr [0] = Ferror32;

			if ( i_err[0] == -1 )
			{
				fn_errlog( c_ServiceName, "S31045", TPMSG, c_err_msg  );
        tpfree ( ( char * ) ptr_fml_Sbuffer );
        tpfree ( ( char * ) ptr_fml_Rbuffer );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

      tpfree ( ( char * ) ptr_fml_Sbuffer);
      tpfree ( ( char * ) ptr_fml_Rbuffer);

			if( DEBUG_MSG_LVL_3 ) {
			fn_userlog( c_ServiceName,"New Squareoff order placed =:%s:",c_sqroff_ordr_ref);
			}

			i_returncode = fn_tag_ordr( c_ServiceName,
																  c_inp_ordr_ref,
																  c_sqroff_ordr_ref,
																  c_err_msg
																);
			if ( i_returncode != 0 )
			{
				fn_errlog( c_ServiceName, "S31050", LIBMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

	}

  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
}

int fn_tag_ordr( char  *c_ServiceName,
							   char  *c_inp_ordr_ref,
								 char  *c_sqroff_ordr_ref,
							   char  *c_err_msg
							  )
{

			int i_trnsctn = 0;

      i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
      if ( i_trnsctn == -1 )
      {
        fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg );
        return FAILURE;
      }

	    EXEC SQL
       UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_SLTP_ORDR_RFRNC = :c_sqroff_ordr_ref
									/*** FOD_FC_FLAG = 'F' ***/
       WHERE      FOD_ORDR_RFRNC = :c_inp_ordr_ref;

			if(SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg );
        return FAILURE;
      }

			EXEC SQL
       UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_SLTP_ORDR_RFRNC = :c_inp_ordr_ref,
									FOD_FC_FLAG    = 'C'
       WHERE      FOD_ORDR_RFRNC = :c_sqroff_ordr_ref;

      if(SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S31065", SQLMSG, c_err_msg );
        return FAILURE;
      }
			
			if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
			{
        fn_errlog( c_ServiceName, "S31070", SQLMSG, c_err_msg );
        return FAILURE;
			}
}



