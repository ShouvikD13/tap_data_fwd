/******************************************************************************/
/*  Program           : SFO_UNRLYNG_MWP                                       */
/*                                                                            */
/*  Input             :                                                       */
/*                      FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_ROUT_CRT                                          */
/*                                                                            */
/*  Output            : FFO_UNDRLYNG                                          */
/*                      FFO_OPNPSTN_QTY - long   Market wide limit            */
/*                      FFO_CRNT_OI     - double Underlying wise open position*/
/*                      FFO_PRCNTG_CHNG - long   Percentage attained          */
/*                      FFO_FROM_DT     - string Date in - "Mon YYYY" format  */
/*                      FFO_SUB_BUF_CNT - long   No. of occurrences					  */
/*                      FFO_ACTN_ID			- long   0 - Success / -1 - Error.	  */
/*                      FFO_ERR_MSG                                           */
/*                                                                            */
/*                                                                            */
/*  Description       : To get the details of the market wide open positions  */
/*                      and percentage attained                               */
/*                                                                            */
/*  Log               : 1.0   17-Jun-2003   Infotech|Mohit Mehrotra           */
/*										:	1.1		19-Dec-2007		Infotech|Sushil	-	AIX Migration		*/
/*                                                                            */
/******************************************************************************/
/*  1.0  -  New release                                                       */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>             /*  Ver 1.1 : Added 	*/
#include <fn_session.h>         /*  Ver 1.1 : Added 	*/
#include <fn_read_debug_lvl.h>  /*  Ver 1.1 : Added   */

void SFO_UNRLYNG_MWP( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Obuf;

	char c_ServiceName[ 33];
	char c_err_msg[256];
	int  i_returncode;
	int	 i_cnt = 0;
	long l_acnt_id;

	EXEC SQL BEGIN DECLARE SECTION;
		struct vw_usr_prfl st_usr_prfl;
		varchar c_month_year[ LEN_DATE ];
		char c_xchng_cd [ 4 ];
		char c_undrlyng[7];
		long l_mwp;
		long l_prcnt;
		double d_oi;
	EXEC SQL END DECLARE SECTION;

	struct vw_err_msg *ptr_st_err_msg;

	ptr_fml_Ibuf = ( FBFR32 *)rqst->data;
	strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.1 : Added   */

	ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
	                                                   "vw_err_msg",
	                                               sizeof ( struct vw_err_msg ) );
	if ( ptr_st_err_msg ==  NULL )
	{
		fn_errlog ( c_ServiceName, "S31005", TPMSG, c_err_msg );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		l_acnt_id = -1;
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}
	memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

	i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                    c_err_msg,
                                    ptr_fml_Ibuf,
                                    1,
                                    FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL);

  if( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31010", LIBMSG , c_err_msg );
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    l_acnt_id = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }

if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.1 : Debug level Change  */
	fn_userlog( c_ServiceName, "xchng_cd 		:%s:", c_xchng_cd );
}

	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_usr_prfl,
                           "vw_usr_prfl" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    l_acnt_id = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

	i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl,
                                             ptr_st_err_msg ) ;

  if ( i_returncode == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
    l_acnt_id = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


	EXEC SQL
		DECLARE	get_mwp CURSOR FOR
		SELECT  distinct(MWP.fum_undrlyng),
						nvl(MWP.fum_mwp,0),
						nvl(MSTR.fum_oi,0)*100, /* fum_io is multipied by 100 because it was
																		stored in database after dividing by 100. */
						nvl(round((((MSTR.fum_oi * 100) / MWP.fum_mwp) * 100)),0), /* fum_io is multi
																																			 -pied by 100 
																																			 because it was 
																																			 stored in database
																																			 after dividing 
																																			 by 100. */
						to_char(MWP.fum_month_year,'Mon YYYY')
		FROM		fum_fo_undrlyng_mwp MWP, 
						fum_fo_undrlyng_mstr MSTR
		WHERE		MWP.fum_xchng_cd									 	 = :c_xchng_cd
		AND			MWP.fum_xchng_cd 									 	 = MSTR.fum_xchng_cd
		AND			to_char(MWP.fum_month_year,'YYYYMM') = to_char(sysdate,'YYYYMM')
		AND     MWP.fum_undrlyng 									 	 = MSTR.fum_undrlyng
/*    AND     MSTR.fum_prdct_typ                   = 'F' */
		ORDER BY
					 	MWP.fum_undrlyng ASC;

	EXEC SQL
		OPEN get_mwp;

	if ( SQLCODE != 0 )
	{
		fn_errlog( c_ServiceName, "S31020", SQLMSG, ptr_st_err_msg->c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
    l_acnt_id = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	ptr_fml_Obuf = NULL;
	while (1)
	{
		EXEC SQL
			FETCH	get_mwp
			INTO	:c_undrlyng,
						:l_mwp,
						:d_oi,
						:l_prcnt,
						:c_month_year;

		if ( SQLCODE != 0 )
		{
			if ( SQLCODE == NO_DATA_FOUND )
			{
				if ( i_cnt == 0 )
				{
					fn_errlog( c_ServiceName, "B56019", " ", ptr_st_err_msg->c_err_msg  );	/***	Ver 1.1 : 3rd Arg. Changed from ' ' to " " ***/
					EXEC SQL CLOSE get_mwp;
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
    			l_acnt_id = -1;
    			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				break;
			}
			fn_errlog( c_ServiceName, "S31025", SQLMSG, ptr_st_err_msg->c_err_msg  );
			EXEC SQL
				CLOSE get_mwp;
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
    	l_acnt_id = -1;
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		} 

    SETNULL ( c_month_year );

		i_returncode = fn_pack_vartofml( c_ServiceName,
                                     c_err_msg,
                                     &ptr_fml_Obuf,
                                     5,
                            FFO_UNDRLYNG, ( char * )c_undrlyng,
                            FFO_OPNPSTN_QTY, ( char * )&l_mwp, 
                            FFO_CRNT_OI, ( char * )&d_oi, 
                            FFO_PRCNTG_CHNG, ( char * )&l_prcnt, 
                            FFO_FROM_DT, ( char * )c_month_year.arr); 

    if( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg );
      tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	l_acnt_id = -1;
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
    }

		if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.1 : Debug level Change  */
			fn_userlog(c_ServiceName,"********Record Number :%ld:*********",i_cnt+1);
			fn_userlog(c_ServiceName,"c_undrlyng			:%s:",c_undrlyng);
			fn_userlog(c_ServiceName,"l_mwp						:%ld:",l_mwp);
			fn_userlog(c_ServiceName,"d_oi						:%lf:",d_oi);
			fn_userlog(c_ServiceName,"l_prcnt					:%ld:",l_prcnt);
			fn_userlog(c_ServiceName,"c_month_year		:%s:",c_month_year.arr);
		}

		i_cnt++;
	}
	EXEC SQL
		CLOSE get_mwp;
 	
	if(Fadd32( ptr_fml_Obuf, FFO_SUB_BUF_CNT, (char *)&i_cnt, 0 ) == -1)
 	{
   	fn_errlog( c_ServiceName, "S31035", FMLMSG, c_err_msg  );
   	tpfree ( ( char * ) ptr_fml_Obuf );
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	l_acnt_id = -1;
   	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

 	l_acnt_id = 0;
 	if(Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ) == -1)
 	{
   	fn_errlog( c_ServiceName, "S31040", FMLMSG, c_err_msg  );
   	tpfree ( ( char * ) ptr_fml_Obuf );
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	l_acnt_id = -1;
   	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.1 : Debug level Change  */
		fn_userlog(c_ServiceName,"No of occurrences :%d:",i_cnt);
    fn_userlog(c_ServiceName,"Action id 	      :%ld:",l_acnt_id);
  }


	tpfree ( ( char * ) ptr_st_err_msg );
	tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
}
