/******************************************************************************/
/*  Program           : SFO_PLG_ORDRBK                               					*/
/*                                                                            */
/*  Input             : FFO_USR_ID																						*/
/*											FFO_SSSN_ID																						*/
/*											FFO_FROM_DT																						*/
/*											FFO_TO_DT																							*/
/*											FFO_ STCK_CD																					*/
/*											FFO_ORD_TYP																						*/
/*											FFO_DPID																							*/
/*											FFO_DP_CLNT_ID 																				*/
/*											FFO_EBA_MTCH_ACT_NO																		*/
/*																																						*/
/*                                                                            */
/*  Output            : FFO_ERR_MSG																						*/
/*											FFO_ACTN_ID																						*/	
/*											FFO_EBA_MTCH_ACT_NO																		*/
/*											FFO_DP_CLNT_ID 																				*/	
/*											FFO_DPID																							*/
/*											FFO_CHANNEL																						*/
/*											FFO_ORD_DT 																						*/
/*											FFO_PLG_ORDR_RFRNC 																		*/	
/*											FFO_STCK_CD 																					*/
/*											FFO_ORD_TOT_QTY																				*/
/*											FFO_HAIRCUT																						*/	
/*											FFO_PLG_RT																						*/
/*											FFO_ORD_TYP																						*/
/*											FFO_ORDR_STTS																					*/
/*											FFO_XCHNG_RMRKS 																			*/
/*																																						*/
/*                                                                            */
/*  Description       :  This serviece will be called by Front-end (ASP/DL)		*/
/*											 to view the order book of client.Depending upon			*/
/*											 filters use by user it will get records from					*/
/*											 POD_PLG_ORDR_DTLS Table							  							*/
/*																																						*/
/*  Log               : 1.0		15-Sep-2004		Infotech|Himanshu Ahire						*/
/*	Reviewed By				:	1.0		14-Sep-2004	  Infotech|Smitha	Nuti	            */
/*										:	1.1		14-Aug-2007		Infotech|Sushil Sharma						*/
/*                    : 1.2   17-Dec-2007   Infotech|Vidyayini Krish/Shamili  */
/*                    :	1.3		11-May-2008		Infotech|Rohit                    */
/*                    : 1.4   08-Feb-2011   Infotech|Swati Bharankar          */
/*                    : 1.5   28-Aug-2014   Infotech|Sachin Birje             */
/*										:	1.6		06-Oct-2014		Infotech|Tanmay Warkhade					*/	
/*										:	VQC		23-Jun-2016		Infotech|Ritesh Deolekar  				*/	
/*                    : 1.7   07-Jul-2020   Infotech|Tanmay patel             */ 
/*                    : 1.8   25-Nov-2020   Infotech|Saurabh Patil            */
/*                    : 1.9   05-May-2021   Infotech|Tanmay Patel             */
/*                    : 2.0   02-Jun-2021   Infotech|Anand Dhopte             */    
/*                    : 2.1   17-Jun-2021   Infotech|Saurabh Patil            */
/*                    : 2.2   28-May-2022   Infotech|Samip M									*/
/******************************************************************************/
/*   1.0  -  New release	                                                    */
/*	 1.1	-	 DL Revamp																												*/
/*   1.2  -  IBM Changes                                                      */
/*	 1.3	-  Change for Reallocation																					*/
/*   1.4  -  Silverlight Changes (Auto-Refresh Requirement)                   */
/*   1.5  -  View to FML Changes                                              */
/*	 1.6	-  the process will consider SAM Block/Unblock model 								*/
/*	 VQC  -	 VERSION QUALITY CONTROL																					*/
/*   1.7  -  CR_ISEC14_138293 Margin pledge                                   */ 
/*   1.8  -  CR_142905 : Simplification of Shares as Margin Pages             */
/*   1.9  -  Core fix                                                         */
/*   2.0  -  Core Fix                                                         */
/*   2.2  -  Margin Repledge																									*/
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>     
#include <sqlca.h>
#include <atmi.h>
#include <userlog.h>
#include <fml32.h>
#include <Usysflds.h>   
#include <fo_fml_def.h> 
/**** #include <fo_view_def.h> ** Ver 1.5 **/
#include <fo_view_def.h>  /*** Ver 1.5 ***/
#include <fo.h>
#include <fn_tuxlib.h>
#include <fn_log.h> /* Ver 1.2 */
#include <fn_ddr.h> /* Ver 1.2 */
#include <fn_session.h> /* Ver 1.2 */
#include <string.h> /* Ver 1.2 */
#include <fn_read_debug_lvl.h>        /* ver 1.2 -- debug level handling */ 

#define	 BUF_MULTIPLY 1

void SFO_PLG_ORDRBK( TPSVCINFO *rqst )
{
	int i_returncode;
  int i_trnsctn = 0;
	int i_err[14];		/** Changed from 12 to 13 for Ver 1.6 **/ /** Changed from 13 to 14 for Ver 1.8 **/
  int i_ferr[14];		/** Changed from 12 to 13 for Ver 1.6 **/ /** Changed from 13 to 14 for Ver 1.8 **/
	int i_cnt;
	int i_counter =1;

	long li_sssn_id;
	long l_acnt_id;

	char c_ServiceName [ 33 ];
  char c_err_msg[256 + 1];
	char c_usr_id   [8+1];
	char c_ip_plg_ordr_rfrnc[19];    /**  Ver 1.4  **/
  char c_flag = 'Y';               /**  Ver 1.4 --set default to 'Y' **/
  
	FBFR32  *ptr_fml_ibuf = (FBFR32 *)NULL;		/* Pointer to FML Input buffer    			*/
  FBFR32  *ptr_fml_obuf = (FBFR32 *)NULL;		/* Pointer to FML Output buffer   	 		*/
 /* FBFR32  *ptr_fml_temp = (FBFR32 *)NULL;		Pointer to FML Output buffer commented in VQC By Suchita   	 		*/
	struct vw_usr_prfl st_usr_prfl;
	struct vw_err_msg st_err_msg;

	EXEC SQL BEGIN DECLARE SECTION;
	
	char	c_from_dt[12];
	char	c_to_dt[12];
	char	c_stck_cd[7];
	char	c_ord_typ;
	char	c_dp_id[9];
	char	c_dp_clnt_id[9];
	char	c_mtch_accnt_no[11];

	char	c_channel[4];
	char	c_ord_dt[22];
	char	c_plg_ordr_rfrnc[19];
	long	l_ord_tot_qty;
	char	c_ordr_stts;
	char	c_xchng_rmrks[256];

	/*** Added for Ver 1.6 ***/
	long  l_plg_haircut = 0.0;
	double d_bkubk_vl = 0.0;
	/** Ver 1.6 **/
  /** Added in Ver 1.8 **
	varchar c_pon_no[15];
	varchar c_ord_pon_no[500];
	** Ver 1.8 End ** ** Commented for Ver 2.1 **/

  char c_pon_no[15];   /** Ver 2.1 **/ 

	EXEC SQL END DECLARE SECTION;

  /**************************** Calculate Buffer Length **************************/

  const long l_bufferlength = (  sizeof(long)  *2        )
                            + (  sizeof(char)*2          )
                            + (  sizeof(c_err_msg)       )
                            + (  sizeof(c_mtch_accnt_no) )
                            + (  sizeof(c_dp_clnt_id)    )
                            + (  sizeof(c_dp_id)         )
                            + (  sizeof(c_stck_cd)       )
                            + (  sizeof(c_xchng_rmrks)   )
                            + (  sizeof(c_plg_ordr_rfrnc))
                            + (  sizeof(c_ord_dt)  			 )
                            + (  sizeof(c_channel)   		 )
														+ (  sizeof(c_ip_plg_ordr_rfrnc) ) 
														/** + (  sizeof(c_ord_pon_no)        )  ;    ** Ver 1.8 **/ /** Commented for Ver 2.1 **/
														+ (  sizeof(c_pon_no)        )  ;    /** Ver 2.1 **/ 
	
  ptr_fml_ibuf = (FBFR32 *)rqst->data;
  strcpy(c_ServiceName, rqst->name);

	memset(c_ip_plg_ordr_rfrnc,0,sizeof(c_ip_plg_ordr_rfrnc));            /** Ver 1.4 **/


	
	/************************* Take Input From FML Buffer ***************************/

	
	i_err[0] = Fget32( ptr_fml_ibuf,	FFO_USR_ID					,0,(char *)	c_usr_id						,0);
	i_ferr [0] = Ferror32;
  i_err[1] = Fget32( ptr_fml_ibuf,	FFO_SSSN_ID					,0,(char *)&li_sssn_id	,0);
	i_ferr [1] = Ferror32;
  i_err[2] = Fget32( ptr_fml_ibuf,	FFO_FROM_DT					,0,(char *)	c_from_dt						,0);
	i_ferr [2] = Ferror32;
  i_err[3] = Fget32( ptr_fml_ibuf,	FFO_TO_DT						,0,(char *)	c_to_dt							,0);
	i_ferr [3] = Ferror32;
  i_err[4] = Fget32( ptr_fml_ibuf,	FFO_STCK_CD					,0,(char *)	c_stck_cd						,0);
	i_ferr [4] = Ferror32;
  i_err[5] = Fget32( ptr_fml_ibuf,	FFO_ORD_TYP					,0,(char *)&c_ord_typ						,0);
	i_ferr [5] = Ferror32;
  i_err[6] = Fget32( ptr_fml_ibuf,	FFO_DPID						,0,(char *)	c_dp_id							,0);
	i_ferr [6] = Ferror32;
  i_err[7] = Fget32( ptr_fml_ibuf,	FFO_DP_CLNT_ID 			,0,(char *)	c_dp_clnt_id				,0);
	i_ferr [7] = Ferror32;
  i_err[8] = Fget32( ptr_fml_ibuf,	FFO_EBA_MTCH_ACT_NO	,0,(char *)	c_mtch_accnt_no			,0);
	i_ferr [8] = Ferror32;

  for ( i_cnt=0; i_cnt < 9; i_cnt++ )
  {
    if ( i_err[ i_cnt ] == -1 )
    {
     	fn_userlog( c_ServiceName, "AT FIELD NO %d",i_cnt);
      fn_errlog( c_ServiceName, "S31005", Fstrerror32(i_err[i_cnt]), c_err_msg  );
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	l_acnt_id = -1;
    	Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
    }
  }

	/** Ver 1.4 starts **/

  if (Fget32( ptr_fml_ibuf,FFO_PLG_ORDR_RFRNC,0,c_ip_plg_ordr_rfrnc,0)== -1 )
  {   if(Ferror32 == FNOTPRES)
    {
    c_flag = 'N';
    fn_userlog(c_ServiceName, "For Normal Service Call flag is set to N");
    }
    else
    {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }
  }

	if(strcmp(c_ip_plg_ordr_rfrnc,"*") ==0)
  { c_flag='N';}


  /** Ver 1.4 ends **/

	if(c_ord_typ== 'A')
	{
		c_ord_typ = '%';
	}

	if(strcmp(c_stck_cd,"A") == 0 )
	{		
		memset(c_stck_cd ,0,sizeof(c_stck_cd));
		strcpy(c_stck_cd,"%");
	}

	if(DEBUG_MSG_LVL_0)		/*** Added in VQC ***/
	{
	 fn_userlog(c_ServiceName,"User ID :%s:",c_usr_id);
	 fn_userlog(c_ServiceName,"User ID :%ld:",li_sssn_id);
	 fn_userlog(c_ServiceName,"User ID :From Date %s:",c_from_dt);
	 fn_userlog(c_ServiceName,"User ID :To Date %s:",c_to_dt);
	 fn_userlog(c_ServiceName,"User ID :Stock Code %s:",c_stck_cd);
	 fn_userlog(c_ServiceName,"User ID :order Type %c:",c_ord_typ);
	 fn_userlog(c_ServiceName,"User ID :Dp Id %s:",c_dp_id);
	 fn_userlog(c_ServiceName,"User ID :DP Client Id %s:",c_dp_clnt_id);
	 fn_userlog(c_ServiceName,"User ID :Match Account %s:",c_mtch_accnt_no);
   fn_userlog(c_ServiceName,"User ID :c_flag :%c:"   ,c_flag);                /** Ver 1.4 **/
	}
	
	/**************************** Check Session of User ****************************/

    strcpy( st_usr_prfl.c_user_id, c_usr_id );
    st_usr_prfl.l_session_id = li_sssn_id;
    strcpy( st_usr_prfl.c_cln_mtch_accnt,c_mtch_accnt_no);
		
    fn_cpy_ddr ( st_usr_prfl.c_rout_crt );			 /*** Added for Order Routing ***/

    i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl, &st_err_msg );

    if ( i_returncode == -1 )
    {
			fn_errlog( c_ServiceName,"S31015",LIBMSG , st_err_msg.c_err_msg  );
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg,0);
    	l_acnt_id = -1;
    	Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
    }
	
  	ptr_fml_obuf = (FBFR32 *)tpalloc( "FML32", NULL, l_bufferlength * BUF_MULTIPLY );

  	if ( ptr_fml_obuf == NULL )
  	{
    		fn_errlog( c_ServiceName, "S31020", TPMSG, c_err_msg  );
    		Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				l_acnt_id = -1;
        Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		/***	tpfree ( ( char * )ptr_fml_obuf);			** Commented in VQC ***/
    		tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
  	}			

	/****************** IF There are Multiple Match A/c **************************/


	if(strcmp(c_mtch_accnt_no,"*") == 0)
	{

		/**************************** Begain Transaction ***************************/

		if(DEBUG_MSG_LVL_0)		/*** Added in VQC ***/
		{
    	fn_userlog(c_ServiceName,"Inside Match account is *   ");
		}

		i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
  	
		if ( i_trnsctn == -1 )
  	{
   		/**  fn_errlog( c_ServiceName, "S31025", TPMSG, c_err_msg  ); commented in VQC **/
      fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg  ); /** added in VQC **/
			Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	l_acnt_id = -1;
    	Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
			tpfree ( ( char * )ptr_fml_obuf);
    	tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
  	}	

	
		/******************* Put Match Accounts to FDM table **********************/


    if ( (st_usr_prfl.c_user_id[0] == BPID) )
    {
			if(DEBUG_MSG_LVL_0)		/*** Added in VQC ***/
			{
      	fn_userlog(c_ServiceName,"Selecting match accounts linked to the BP user [%s]", st_usr_prfl.c_user_id);
			}
      EXEC SQL
      INSERT  INTO  FDM_DT_MTCH
      SELECT  CLM_MTCH_ACCNT
			FROM 		CLM_CLNT_MSTR
      WHERE   CLM_BP_ID = :st_usr_prfl.c_user_id ;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				l_acnt_id = -1; 
				if(SQLCODE == NO_DATA_FOUND)
					l_acnt_id = 1;
    		Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpfree ( ( char * )ptr_fml_obuf);
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
      }
    }
    else
    {
      EXEC SQL
      INSERT  INTO  FDM_DT_MTCH
      SELECT  UAC_CLM_MTCH_ACCNT
			FROM 		uac_usr_accnts
      WHERE   UAC_USR_ID = :st_usr_prfl.c_user_id ;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				l_acnt_id = -1; 

				if(SQLCODE == NO_DATA_FOUND)
					l_acnt_id = 1;

    		Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpfree ( ( char * )ptr_fml_obuf);
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
      }
    }		

		/***	Ver. 1.1 : Comment Starts	***
		if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  	{
     	fn_errlog( c_ServiceName, "S31045",TPMSG ,c_err_msg);
     	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		 	Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			l_acnt_id = -1;
		 	Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );	
			tpfree ( ( char * )ptr_fml_obuf);
			tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
  	}	
		***	Ver. 1.1 : Comment Ends	***/

		/**************** Get each Position of each Match Account **********************/
		
		if(DEBUG_MSG_LVL_0)		/*** Added in VQC ***/
		{
      fn_userlog(c_ServiceName,"Selecting Data ");
		}	

			if(DEBUG_MSG_LVL_3)     /** Ver 1.4 **/
			{	
			if(c_flag=='Y') 
      {
      fn_userlog(c_ServiceName,"The Service is called for Auto-refresh in Silverlight");
      fn_userlog(c_ServiceName,"The order referne no.(request id ) passesd is :: %s",c_ip_plg_ordr_rfrnc);
      }
			else
			{
			 fn_userlog(c_ServiceName,"Normal Service Call");
			}
			}



			/*****************************		Commented In ver 1.6
				EXEC SQL
      DECLARE ord_cursor CURSOR FOR
        SELECT    to_char (POD_ORDR_DT,'DD-Mon-YYYY hh24:mi:ss'),
                  POD_ORDR_NO,
                  POD_STCK_CD,
                  POD_DP_CLNT_ACCNT,
                  POD_DP_ACCNT,
                  POD_ORDR_QTY,
                  POD_PLG_REV_TYP,
                  POD_ORDR_STTS,
                  NVL(POD_CHANNEL,''),
                  POD_CLNT_MTCH_ACCNT,
                  NVL(trim(POD_RMRKS),' ')
          FROM    POD_PLG_ORDR_DTLS,
                  FDM_DT_MTCH
          WHERE   POD_CLNT_MTCH_ACCNT = FDM_CLM_MTCH_ACCNT
*         AND     POD_DP_ACCNT        =   :c_dp_id
          AND     POD_DP_CLNT_ACCNT   =   :c_dp_clnt_id     *** Ver 1.1 : Commented ***
          AND     POD_PLG_REV_TYP   LIKE  :c_ord_typ
          AND     trim(POD_STCK_CD) LIKE  trim(:c_stck_cd)
          AND     trim(POD_ORDR_NO)   = DECODE (:c_flag,'Y',:c_ip_plg_ordr_rfrnc,trim(POD_ORDR_NO))  ** Ver 1.4 **
          AND     trunc(POD_ORDR_DT) >= to_date(:c_from_dt,'dd-mon-yyyy')
          AND     trunc(POD_ORDR_DT) <= to_date(:c_to_dt  ,'dd-mon-yyyy')
          ORDER BY POD_ORDR_DT DESC;

				******************************/

				/****************************** added in ver 1.6 ******************************/ 
	
				 EXEC SQL
				 DECLARE ord_cursor CURSOR FOR
         SELECT order_date,order_no,stk_cd,dp_clnt_id,dp_id,qnty,haircut,value,type,status,channel,match_id,remarks from( 
				 SELECT    to_char (SBD_BKUBK_DT,'DD-Mon-YYYY hh24:mi:ss') order_date,
                            SBD_BKUBK_DT ordr_dt,
				 										SBD_ORDR_NO order_no,
				 										SBD_STCK_CD stk_cd,
 				 										SBD_DP_CLNT_ACCNT dp_clnt_id,
				 										SBD_DP_ACCNT dp_id,
				 										SBD_BKUBK_QTY qnty,
														SBD_HAIRCUT haircut,
														SBD_BKUBK_VL value,
														DECODE(SBD_SAM_BKUBK_TYP,'P','P','B','P','U','W','W','W','%') type, /** 'I' to 'W' remove in ** Ver 1.7 **/   
 				 										SBD_BKUBK_STTS status,
				 										NVL(SBD_CHANNEL,'') channel,
				 										SBD_CLNT_MTCH_ACCNT match_id,
 				 										NVL(trim(SBD_RMRKS),' ') remarks
				 FROM    						SBD_SAM_BKUBK_DTLS,
 								 						FDM_DT_MTCH
				 WHERE   						SBD_CLNT_MTCH_ACCNT = FDM_CLM_MTCH_ACCNT
				 /*** AND  						SBD_SAM_BKUBK_TYP    LIKE   DECODE(:c_ord_typ,'A','%','B','B','U','U','P','B','W','U','I','U','%')***/
				 AND  							((:c_ord_typ in ('A','B','P') AND SBD_SAM_BKUBK_TYP = 'B') OR (:c_ord_typ in ('A','U','W') AND SBD_SAM_BKUBK_TYP in ('U','I')) OR (:c_ord_typ not in ('A','B','P','U','W','I') AND SBD_SAM_BKUBK_TYP like '%'))
				 AND     						trim(SBD_STCK_CD) LIKE  trim(:c_stck_cd)
 				 AND    	 					trim(SBD_ORDR_NO)   = DECODE (:c_flag,'Y',:c_ip_plg_ordr_rfrnc,trim(SBD_ORDR_NO))
				 AND    	 					trunc( SBD_BKUBK_DT) >= to_date(:c_from_dt,'dd-mon-yyyy')
	   		 AND     						trunc(SBD_BKUBK_DT) <= to_date(:c_to_dt  ,'dd-mon-yyyy')
 			/**	 ORDER BY SBD_BKUBK_DT DESC;  commented in Ver 1.7**/
			 /****************************** added in ver 1.6 ******************************/
       /**************** POD table added in Ver 1.7 **********************************/
         UNION ALL
         SELECT   to_char (POD_ORDR_DT,'DD-Mon-YYYY hh24:mi:ss') order_date,
                  POD_ORDR_DT ordr_dt,
                  POD_ORDR_NO order_no,
                  POD_STCK_CD stk_cd,
                  POD_DP_CLNT_ACCNT dp_clnt_id,
                  POD_DP_ACCNT dp_id,
                  POD_ORDR_QTY qnty,
                  POD_HAIRCUT haircut,
                  POD_ORDR_VL value,
                  POD_PLG_REV_TYP type, 
                  POD_ORDR_STTS status,
                  NVL(POD_CHANNEL,'') channel,
                  POD_CLNT_MTCH_ACCNT match_id,
                  NVL(trim(POD_RMRKS),' ') remarks
          FROM    POD_PLG_ORDR_DTLS,
                  FDM_DT_MTCH
          WHERE   POD_CLNT_MTCH_ACCNT = FDM_CLM_MTCH_ACCNT
          AND     POD_DP_ACCNT        =   :c_dp_id
          AND     POD_DP_CLNT_ACCNT   =   :c_dp_clnt_id
          AND     POD_PLG_REV_TYP   LIKE  :c_ord_typ
					AND     POD_PLG_REV_TYP	IN ('P','W','I')			/** Added for Ver 2.2 **/
          AND     trim(POD_STCK_CD) LIKE  trim(:c_stck_cd)
          AND     trim(POD_ORDR_NO)   = DECODE (:c_flag,'Y',:c_ip_plg_ordr_rfrnc,trim(POD_ORDR_NO))
          AND     trunc(POD_ORDR_DT) >= to_date(:c_from_dt,'dd-mon-yyyy')
          AND     trunc(POD_ORDR_DT) <= to_date(:c_to_dt  ,'dd-mon-yyyy')
         UNION ALL
         SELECT   to_char (POD_ORDR_DT,'DD-Mon-YYYY hh24:mi:ss') order_date,
                  POD_ORDR_DT ordr_dt,
                  POD_ORDR_NO order_no,
                  POD_STCK_CD stk_cd,
                  POD_DP_CLNT_ACCNT dp_clnt_id,
                  POD_DP_ACCNT dp_id,
                  POD_ORDR_QTY qnty,
                  POD_HAIRCUT haircut,
                  POD_ORDR_VL value,
                  POD_PLG_REV_TYP type,
                  POD_ORDR_STTS status,
                  NVL(POD_CHANNEL,'') channel,
                  POD_CLNT_MTCH_ACCNT match_id,
                  NVL(trim(POD_RMRKS),' ') remarks
          FROM    POD_PLG_ORDR_DTLS_HSTRY,
                  FDM_DT_MTCH
          WHERE   POD_CLNT_MTCH_ACCNT = FDM_CLM_MTCH_ACCNT
          AND     POD_DP_ACCNT        =   :c_dp_id
          AND     POD_DP_CLNT_ACCNT   =   :c_dp_clnt_id
          AND     POD_PLG_REV_TYP   LIKE  :c_ord_typ
					AND     POD_PLG_REV_TYP	IN ('P','W','I')			/** Added for Ver 2.2 **/
          AND     trim(POD_STCK_CD) LIKE  trim(:c_stck_cd)
          AND     trim(POD_ORDR_NO)   = DECODE (:c_flag,'Y',:c_ip_plg_ordr_rfrnc,trim(POD_ORDR_NO))
          AND     trunc(POD_ORDR_DT) >= to_date(:c_from_dt,'dd-mon-yyyy')
          AND     trunc(POD_ORDR_DT) <= to_date(:c_to_dt  ,'dd-mon-yyyy')
         UNION ALL
         SELECT   to_char (POD_ORDR_DT,'DD-Mon-YYYY hh24:mi:ss') order_date,
                  POD_ORDR_DT ordr_dt,
                  POD_ORDR_NO order_no,
                  POD_STCK_CD stk_cd,
                  POD_DP_CLNT_ACCNT dp_clnt_id,
                  POD_DP_ACCNT dp_id,
                  POD_ORDR_QTY qnty,
                  POD_HAIRCUT haircut,
                  POD_ORDR_VL value,
                  POD_PLG_REV_TYP type,
                  POD_ORDR_STTS status,
                  NVL(POD_CHANNEL,'') channel,
                  POD_CLNT_MTCH_ACCNT match_id,
                  'Convert Request - '||NVL(trim(POD_RMRKS),' ') remarks
          FROM    POD_PLG_ORDR_DTLS,
                  FDM_DT_MTCH
          WHERE   POD_CLNT_MTCH_ACCNT = FDM_CLM_MTCH_ACCNT
          AND     POD_DP_ACCNT        =   :c_dp_id
          AND     POD_DP_CLNT_ACCNT   =   :c_dp_clnt_id
          AND     POD_PLG_REV_TYP   LIKE  :c_ord_typ
					AND     POD_PLG_REV_TYP	IN ('P','W','I')			/** Added for Ver 2.2 **/
          AND     trim(POD_STCK_CD) LIKE  trim(:c_stck_cd)
          AND     trim(POD_ORDR_NO)   = DECODE (:c_flag,'Y',:c_ip_plg_ordr_rfrnc,trim(POD_ORDR_NO))
          AND     trunc(POD_ORDR_DT) >= to_date(:c_from_dt,'dd-mon-yyyy')
          AND     trunc(POD_ORDR_DT) <= to_date(:c_to_dt  ,'dd-mon-yyyy')
					ORDER BY ordr_dt DESC,stk_cd );
       /**************** Ver 1.7 Ends ******************/
	
      EXEC SQL OPEN ord_cursor;

			if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg  );
				EXEC SQL CLOSE ord_cursor;

        Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				l_acnt_id = -1;

        if(SQLCODE == NO_DATA_FOUND)
          l_acnt_id = 1;

				tpfree ( ( char * )ptr_fml_obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );				/***	Ver. .1.1 : Added	***/
        Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
      }
		
		/**************** For Each Position of Match Account Loop **********************/


			i_counter = 1;	
			while(1)
			{
				EXEC SQL FETCH ord_cursor
				INTO		:c_ord_dt,
								:c_plg_ordr_rfrnc,
								:c_stck_cd,
								:c_dp_clnt_id,
								:c_dp_id,
								:l_ord_tot_qty,
								:l_plg_haircut,
								:d_bkubk_vl,
								:c_ord_typ,
								:c_ordr_stts,
								:c_channel,
								:c_mtch_accnt_no,
								:c_xchng_rmrks;
								
				if ( SQLCODE != 0 )
        {
        	if ( SQLCODE == NO_DATA_FOUND )
          {
              EXEC SQL CLOSE ord_cursor;
              break;
          }
          else
          {
						fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg  );
        		Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        		l_acnt_id = -1;
       			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );        /***  Ver. .1.1 : Added ***/
						Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						EXEC SQL CLOSE ord_cursor;
						tpfree ( ( char * )ptr_fml_obuf);
        		tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
          }
				}		
				
	
				/*************** Allocate Memory and add to buffer ************************/

				 if ( Fneeded32( 1, l_bufferlength ) > Funused32( ptr_fml_obuf ) ) 
				 {
						i_counter++;
						/* Ver 1.3 starts */
      			/*ptr_fml_temp = ( FBFR32 *)tprealloc( (char *)ptr_fml_obuf,
                       		 (i_counter * l_bufferlength * BUF_MULTIPLY)); */

						/** commented in VQC version	
            ptr_fml_temp = ( FBFR32 *)tprealloc( (char *)ptr_fml_obuf,
													 (Fsizeof32(ptr_fml_obuf) + (i_counter * l_bufferlength )));

							* Ver 1.3 Ends *
				
      			if ( ptr_fml_temp == NULL )
      			{
        				fn_errlog( c_ServiceName, "S31060", TPMSG, c_err_msg  );
        				EXEC SQL CLOSE	ord_cursor;
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    ***  Ver. .1.1 : Added ***
        				Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        				tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
      			}
						else
            {
              ptr_fml_obuf = ptr_fml_temp;
						  ptr_fml_temp = (FBFR32 *) NULL	;
            }	***/

            /*** Added in VQC by Suchita ***/
            ptr_fml_obuf = ( FBFR32 *)tprealloc( (char *)ptr_fml_obuf,
                           (Fsizeof32(ptr_fml_obuf) + (i_counter * l_bufferlength )));
      
            if( ptr_fml_obuf == NULL )
            {
                fn_errlog( c_ServiceName, "S31065", TPMSG, c_err_msg  );
                EXEC SQL CLOSE  ord_cursor;
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  
                Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );    
            } 
           /*** VQC ends ***/	
				}		


				/******************** Fill Output Buffer with Output  *********************/

				i_err[0] =	Fadd32( ptr_fml_obuf	,FFO_EBA_MTCH_ACT_NO	,(char *)c_mtch_accnt_no,0);
				i_ferr [0] = Ferror32;
				i_err[1] =	Fadd32( ptr_fml_obuf	,FFO_DP_CLNT_ID 			,(char *)c_dp_clnt_id		,0);
				i_ferr [1] = Ferror32;
				i_err[2] =	Fadd32( ptr_fml_obuf	,FFO_DPID 						,(char *)c_dp_id				,0);
				i_ferr [2] = Ferror32;
				i_err[3] =	Fadd32( ptr_fml_obuf	,FFO_CHANNEL					,(char *)c_channel			,0);
				i_ferr [3] = Ferror32;
				i_err[4] =	Fadd32( ptr_fml_obuf	,FFO_ORD_DT   				,(char *)c_ord_dt			,0);
				i_ferr [4] = Ferror32;
				i_err[5] =	Fadd32( ptr_fml_obuf	,FFO_PLG_ORDR_RFRNC		,(char *)c_plg_ordr_rfrnc,0);
				i_ferr [5] = Ferror32;
				i_err[6] =	Fadd32( ptr_fml_obuf	,FFO_STCK_CD 					,(char *)c_stck_cd 			,0);
				i_ferr [6] = Ferror32;
				i_err[7] =	Fadd32( ptr_fml_obuf	,FFO_ORD_TOT_QTY			,(char*)&l_ord_tot_qty	,0);
				i_ferr [7] = Ferror32;
				i_err[8] =	Fadd32( ptr_fml_obuf	,FFO_ORD_TYP					,(char *)&c_ord_typ			,0);
				i_ferr [8] = Ferror32;
				i_err[9] =	Fadd32( ptr_fml_obuf	,FFO_ORDR_STTS				,(char *)&c_ordr_stts		,0);
				i_ferr [9] = Ferror32;
				i_err[10] =	Fadd32( ptr_fml_obuf	,FFO_XCHNG_RMRKS 			,(char *)c_xchng_rmrks,0);
				i_ferr [10] = Ferror32;
				i_err[11] = Fadd32( ptr_fml_obuf  ,FFO_HAIRCUT          ,(char*)&l_plg_haircut  ,0);
				i_ferr [11] = Ferror32;
				i_err[12] = Fadd32( ptr_fml_obuf  ,FFO_PLG_RT						,(char*)&d_bkubk_vl , 0);
				i_ferr [12] = Ferror32;
			
				for ( i_cnt=0; i_cnt < 13; i_cnt++ )		/*** Changed from 11 to 13 for Ver 1.6 ***/
  			{
    			if ( i_err[ i_cnt ] == -1 )
    			{
      			fn_errlog( c_ServiceName, "S31070", Fstrerror32(i_ferr[i_cnt]), c_err_msg  );
      			Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      			l_acnt_id = -1;
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );        /***  Ver. .1.1 : Added ***/
      			Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						EXEC SQL CLOSE  ord_cursor;
						tpfree ( ( char * )ptr_fml_obuf);	
      			tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
    			}
  			}	

		}/* while Loop */

    /***  Ver. 1.1 : Addition Starts  ***/
    if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    {
      /** fn_errlog( c_ServiceName, "S31075",TPMSG ,c_err_msg); ** commented in VQC **/
      fn_errlog( c_ServiceName, "S31080",LIBMSG ,c_err_msg); /*** Added in VQC ***/
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      l_acnt_id = -1;
      Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpfree ( ( char * )ptr_fml_obuf);
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
    }

    if(DEBUG_MSG_LVL_3){
      fn_userlog( c_ServiceName,"Service Completed Successfully");
    }
    /***  Ver. 1.1 : Addition Ends  ***/

		tpreturn( TPSUCCESS, 0, (char *)ptr_fml_obuf, 0 , 0 );

	}/* End if match A/c == * */


	
	/************************* There is Single Match Account ************************/

	/** Ver 1.4 starts **/

  if(DEBUG_MSG_LVL_3)
	{ 		
	if(c_flag=='Y') 
      {
      fn_userlog(c_ServiceName,"Inside Single Match Account ");
      fn_userlog(c_ServiceName,"The Service is called for Auto-refresh in Silverlight");
      fn_userlog(c_ServiceName,"The order referne no.(request id ) passesd is :: %s",c_ip_plg_ordr_rfrnc);
      }	
	else
			{
			fn_userlog(c_ServiceName,"Inside Single Match Account ");
			fn_userlog(c_ServiceName,"Normal Service Call");
			}
   }
	/** Ver 1.4 ends **/
	
  /****************************** Commented in ver 1.6  
	 EXEC SQL
   DECLARE sys_cursor CURSOR FOR
			SELECT 		to_char (POD_ORDR_DT,'DD-Mon-YYYY hh24:mi:ss'),
								POD_ORDR_NO,
								POD_STCK_CD,
								POD_DP_CLNT_ACCNT,
								POD_DP_ACCNT,
								POD_ORDR_QTY,
								POD_PLG_REV_TYP,
								POD_ORDR_STTS,
								NVL(POD_CHANNEL,' '),
								NVL(POD_RMRKS,' ')
			FROM	   	POD_PLG_ORDR_DTLS 
			WHERE			POD_CLNT_MTCH_ACCNT			= :c_mtch_accnt_no
			AND				POD_DP_ACCNT 		  			=	:c_dp_id 
			AND	   		POD_DP_CLNT_ACCNT 			=	:c_dp_clnt_id
			AND	   		POD_PLG_REV_TYP		LIKE 		:c_ord_typ
			AND	  		trim(POD_STCK_CD) LIKE		trim(:c_stck_cd )
			AND       trim(POD_ORDR_NO)   = DECODE (:c_flag,'Y',:c_ip_plg_ordr_rfrnc,trim(POD_ORDR_NO))  ** Ver 1.4 **  
			AND     	trunc(POD_ORDR_DT) >= to_date(:c_from_dt,'dd-mm-yyyy')
      AND     	trunc(POD_ORDR_DT) <= to_date(:c_to_dt  ,'dd-mm-yyyy')
			ORDER BY	POD_ORDR_DT DESC ;

		******************************/
  
				/*********** ver 1.6 Starts*********/
			   EXEC SQL
         DECLARE sys_cursor CURSOR FOR
         SELECT order_date,order_no,stk_cd,dp_clnt_id,dp_id,qnty,haircut,value,type,status,channel,match_id,remarks,pon_no from (		/** Adder pon_no Ver 2.1 **/
         SELECT    to_char (SBD_BKUBK_DT,'DD-Mon-YYYY hh24:mi:ss') order_date,
                            SBD_BKUBK_DT ordr_dt,
                            SBD_ORDR_NO order_no,
														SBD_STCK_CD stk_cd,
                            SBD_DP_CLNT_ACCNT dp_clnt_id,
                            SBD_DP_ACCNT dp_id,
                            SBD_BKUBK_QTY qnty,
                            SBD_HAIRCUT haircut,
                            SBD_BKUBK_VL value,
   /**	DECODE(SBD_SAM_BKUBK_TYP,'P','P','B','P','U','W','W','W','%') type,** 'I' to 'W' remove in *Ver 1.7* Commented in Ver 1.8 **/
                            DECODE(SBD_SAM_BKUBK_TYP,'B','B','U') type,  /** Ver 1.8 **/
                            SBD_BKUBK_STTS status,
                            NVL(SBD_CHANNEL,'') channel,
                            SBD_CLNT_MTCH_ACCNT match_id,
                            NVL(trim(SBD_RMRKS),' ') remarks,
														'NA' pon_no                           /** Ver 2.1 **/
         FROM               SBD_SAM_BKUBK_DTLS
         WHERE              SBD_CLNT_MTCH_ACCNT 	= :c_mtch_accnt_no
				 AND       					SBD_DP_ACCNT          = :c_dp_id
				 AND       					SBD_DP_CLNT_ACCNT     = :c_dp_clnt_id
         AND  							((:c_ord_typ in ('A','B','P') AND SBD_SAM_BKUBK_TYP = 'B') OR (:c_ord_typ in ('A','U','W') AND SBD_SAM_BKUBK_TYP in ('U','I')) OR (:c_ord_typ not in ('A','B','P','U','W','I') AND SBD_SAM_BKUBK_TYP like '%'))
         AND                trim(SBD_STCK_CD) 	 LIKE  trim(:c_stck_cd)
         AND                trim(SBD_ORDR_NO)   	= DECODE (:c_flag,'Y',:c_ip_plg_ordr_rfrnc,trim(SBD_ORDR_NO))
         AND                trunc( SBD_BKUBK_DT) >= to_date(:c_from_dt,'dd-mon-yyyy')
         AND                trunc(SBD_BKUBK_DT)  <= to_date(:c_to_dt  ,'dd-mon-yyyy')
			UNION ALL
			SELECT 		to_char (POD_ORDR_DT,'DD-Mon-YYYY hh24:mi:ss') order_date,
                POD_ORDR_DT ordr_dt,
								POD_ORDR_NO order_no,
								POD_STCK_CD stk_cd,
								POD_DP_CLNT_ACCNT dp_clnt_id,
								POD_DP_ACCNT dp_id,
								/** POD_ORDR_QTY qnty, ** Commented for Ver 2.1 **/
								PTD_TIFP_QTY qnty,                                  /** Ver 2.1 **/
								POD_HAIRCUT haircut,
								POD_ORDR_VL value,
								POD_PLG_REV_TYP type,
								/** POD_ORDR_STTS status, ** Commented for Ver 2.1 **/
								DECODE( PTD_TIFP_STTS,'J','J','P',(DECODE(PTD_LEG_NO,'L1','I','W1','I','I1','I','L5','C','W3','C','I3','C')),PTD_TIFP_STTS) status,
								NVL(POD_CHANNEL,' ') channel,
								POD_CLNT_MTCH_ACCNT match_id,
								/** NVL(POD_RMRKS,' ') remarks	** COmmented for Ver 2.1 **/
								NVL(PTD_RMRKS,' ') remarks,                         /** Ver 2.1 **/ 
                NVL(to_char(PTD_DPM_NMBR),' ') pon_no               /** Ver 2.1 **/
			FROM	   	POD_PLG_ORDR_DTLS,PTD_TIFP_DTLS                     /** Ver 2.1 **/
			/** FROM	   	POD_PLG_ORDR_DTLS *** Commented for Ver 2.1 **/
			WHERE			POD_CLNT_MTCH_ACCNT			= :c_mtch_accnt_no
			AND				POD_DP_ACCNT 		  			=	:c_dp_id 
			AND	   		POD_DP_CLNT_ACCNT 			=	:c_dp_clnt_id
			AND	   		POD_PLG_REV_TYP		LIKE 		:c_ord_typ
			AND     	POD_PLG_REV_TYP	IN ('P','W','I')			/** Added for Ver 2.2 **/
			AND	  		trim(POD_STCK_CD) LIKE		trim(:c_stck_cd )
			AND       trim(POD_ORDR_NO)   = DECODE (:c_flag,'Y',:c_ip_plg_ordr_rfrnc,trim(POD_ORDR_NO))
      AND       trim(PTD_POD_REF_NO) =   trim(POD_ORDR_NO)           /** Ver 2.1 **/
      AND       PTD_CLM_MTCH_ACCNT = POD_CLNT_MTCH_ACCNT             /** Ver 2.1 **/
		  AND       trunc(POD_ORDR_DT) >= to_date(:c_from_dt,'dd-mm-yyyy')
      AND       trunc(POD_ORDR_DT) <= to_date(:c_to_dt  ,'dd-mm-yyyy')
      UNION ALL
      SELECT    to_char (POD_ORDR_DT,'DD-Mon-YYYY hh24:mi:ss') order_date,
                POD_ORDR_DT ordr_dt,
                POD_ORDR_NO order_no,
                POD_STCK_CD stk_cd,
                POD_DP_CLNT_ACCNT dp_clnt_id,
                POD_DP_ACCNT dp_id,
                /** POD_ORDR_QTY qnty,	** Commented for Ver 2.1 **/
								PTD_TIFP_QTY qnty,                                   /** Ver 2.1 **/
                POD_HAIRCUT haircut,
                POD_ORDR_VL value,
                POD_PLG_REV_TYP type,
                POD_ORDR_STTS status,
                NVL(POD_CHANNEL,' ') channel,
                POD_CLNT_MTCH_ACCNT match_id,
                NVL(POD_RMRKS,' ') remarks,                           /** Ver 2.1 **/
                NVL(to_char(PTD_DPM_NMBR),' ') pon_no                 /** Ver 2.1 **/
      FROM      POD_PLG_ORDR_DTLS_HSTRY,PTD_TIFP_DTLS_HSTRY           /** Ver 2.1 **/
      /*** FROM      POD_PLG_ORDR_DTLS_HSTRY ** Commented for Ver 2.1 **/
      WHERE     POD_CLNT_MTCH_ACCNT     = :c_mtch_accnt_no
      AND       POD_DP_ACCNT            = :c_dp_id
      AND       POD_DP_CLNT_ACCNT       = :c_dp_clnt_id
      AND       POD_PLG_REV_TYP   LIKE    :c_ord_typ
			AND     	POD_PLG_REV_TYP	IN ('P','W','I')			/** Added for Ver 2.2 **/
      AND       trim(POD_STCK_CD) LIKE    trim(:c_stck_cd )
      AND       trim(POD_ORDR_NO)   = DECODE (:c_flag,'Y',:c_ip_plg_ordr_rfrnc,trim(POD_ORDR_NO))
      AND       trim(PTD_POD_REF_NO) =   trim(POD_ORDR_NO)            /** Ver 2.1 **/ 
      AND       PTD_CLM_MTCH_ACCNT = POD_CLNT_MTCH_ACCNT              /** Ver 2.1 **/
      AND       trunc(POD_ORDR_DT) >= to_date(:c_from_dt,'dd-mm-yyyy')
      AND       trunc(POD_ORDR_DT) <= to_date(:c_to_dt  ,'dd-mm-yyyy')
			UNION ALL
      SELECT    to_char (POD_ORDR_DT,'DD-Mon-YYYY hh24:mi:ss') order_date,
                POD_ORDR_DT ordr_dt,
                POD_ORDR_NO order_no,
                POD_STCK_CD stk_cd,
                POD_DP_CLNT_ACCNT dp_clnt_id,
                POD_DP_ACCNT dp_id,
                /** POD_ORDR_QTY qnty,	*** Commented for Ver 2.1 **/
								PTD_TIFP_QTY qnty,                                     /** Ver 2.1 **/ 
                POD_HAIRCUT haircut,
                POD_ORDR_VL value,
                POD_PLG_REV_TYP type,
                POD_ORDR_STTS status,
                NVL(POD_CHANNEL,' ') channel,
                POD_CLNT_MTCH_ACCNT match_id,
                'Convert Request - '||NVL(trim(POD_RMRKS),' ') remarks ,
								NVL(to_char(PTD_DPM_NMBR),' ') pon_no                  /** Ver 2.1 **/ 
      /** FROM      POD_PLG_ORDR_DTLS_CNV *** Commented for Ver 2.1 **/
			FROM      POD_PLG_ORDR_DTLS_CNV,PTD_TIFP_DTLS_CNV                /** Ver 2.1 **/
      WHERE     POD_CLNT_MTCH_ACCNT     = :c_mtch_accnt_no
      AND       POD_DP_ACCNT            = :c_dp_id
      AND       POD_DP_CLNT_ACCNT       = :c_dp_clnt_id
      AND       POD_PLG_REV_TYP   LIKE :c_ord_typ
			AND     	POD_PLG_REV_TYP	IN ('P','W','I')			/** Added for Ver 2.2 **/
      AND       trim(POD_STCK_CD) LIKE trim(:c_stck_cd )
      AND       trim(POD_ORDR_NO)   = DECODE (:c_flag,'Y',:c_ip_plg_ordr_rfrnc,trim(POD_ORDR_NO))
      AND       trim(PTD_POD_REF_NO) =   trim(POD_ORDR_NO)            /** Ver 2.1 **/ 
      AND       PTD_CLM_MTCH_ACCNT = POD_CLNT_MTCH_ACCNT              /** Ver 2.1 **/
			AND       trunc(POD_ORDR_DT) >= to_date(:c_from_dt,'dd-mm-yyyy')
      AND       trunc(POD_ORDR_DT) <= to_date(:c_to_dt  ,'dd-mm-yyyy')
			UNION ALL
      /************* Ver 2.1 ****************/
      SELECT    to_char (POD_ORDR_DT,'DD-Mon-YYYY hh24:mi:ss') order_date,
                POD_ORDR_DT ordr_dt,
                POD_ORDR_NO order_no,
                POD_STCK_CD stk_cd,
                POD_DP_CLNT_ACCNT dp_clnt_id,
                POD_DP_ACCNT dp_id,
                POD_ORDR_QTY qnty,
                POD_HAIRCUT haircut,
                POD_ORDR_VL value,
                POD_PLG_REV_TYP type,
                POD_ORDR_STTS status,
                NVL(POD_CHANNEL,' ') channel,
                POD_CLNT_MTCH_ACCNT match_id,
                NVL(POD_RMRKS,' ') remarks,
                'NA' pon_no
      FROM      POD_PLG_ORDR_DTLS
      WHERE     POD_CLNT_MTCH_ACCNT     = :c_mtch_accnt_no
      AND       POD_DP_ACCNT            = :c_dp_id
      AND       POD_DP_CLNT_ACCNT       = :c_dp_clnt_id
      AND       POD_PLG_REV_TYP   LIKE    :c_ord_typ
			AND     	POD_PLG_REV_TYP	IN ('P','W','I')			/** Added for Ver 2.2 **/
      AND       trim(POD_STCK_CD) LIKE    trim(:c_stck_cd )
      AND       trim(POD_ORDR_NO)   = DECODE (:c_flag,'Y',:c_ip_plg_ordr_rfrnc,trim(POD_ORDR_NO))
      AND       (POD_ORDR_NO, POD_CLNT_MTCH_ACCNT) not in (select PTD_POD_REF_NO,PTD_CLM_MTCH_ACCNT 
                                                            from  PTD_TIFP_DTLS
                                                            where PTD_CLM_MTCH_ACCNT = :c_mtch_accnt_no  
                                                            AND   PTD_DP_ID = :c_dp_id
                                                            AND   PTD_DP_CLNT_ID = :c_dp_clnt_id) 
      AND       trunc(POD_ORDR_DT) >= to_date(:c_from_dt,'dd-mm-yyyy')
      AND       trunc(POD_ORDR_DT) <= to_date(:c_to_dt  ,'dd-mm-yyyy')
      UNION ALL
      SELECT    to_char (POD_ORDR_DT,'DD-Mon-YYYY hh24:mi:ss') order_date,
                POD_ORDR_DT ordr_dt,
                POD_ORDR_NO order_no,
                POD_STCK_CD stk_cd,
                POD_DP_CLNT_ACCNT dp_clnt_id,
                POD_DP_ACCNT dp_id,
                POD_ORDR_QTY qnty,
                POD_HAIRCUT haircut,
                POD_ORDR_VL value,
                POD_PLG_REV_TYP type,
                POD_ORDR_STTS status,
                NVL(POD_CHANNEL,' ') channel,
                POD_CLNT_MTCH_ACCNT match_id,
                NVL(POD_RMRKS,' ') remarks,
                'NA' pon_no
      FROM      POD_PLG_ORDR_DTLS_HSTRY
      WHERE     POD_CLNT_MTCH_ACCNT     = :c_mtch_accnt_no
      AND       POD_DP_ACCNT            = :c_dp_id
      AND       POD_DP_CLNT_ACCNT       = :c_dp_clnt_id
      AND       POD_PLG_REV_TYP   LIKE    :c_ord_typ
			AND     	POD_PLG_REV_TYP	IN ('P','W','I')			/** Added for Ver 2.2 **/
      AND       trim(POD_STCK_CD) LIKE    trim(:c_stck_cd )
      AND       trim(POD_ORDR_NO)   = DECODE (:c_flag,'Y',:c_ip_plg_ordr_rfrnc,trim(POD_ORDR_NO))
      AND       (POD_ORDR_NO, POD_CLNT_MTCH_ACCNT) not in (select PTD_POD_REF_NO,PTD_CLM_MTCH_ACCNT
                                                            from  PTD_TIFP_DTLS_HSTRY
                                                            where PTD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
                                                            AND   PTD_DP_ID = :c_dp_id
                                                            AND   PTD_DP_CLNT_ID = :c_dp_clnt_id)
      AND       trunc(POD_ORDR_DT) >= to_date(:c_from_dt,'dd-mm-yyyy')
      AND       trunc(POD_ORDR_DT) <= to_date(:c_to_dt  ,'dd-mm-yyyy')
      /************ Ver 2.1 end *********/
			ORDER BY ordr_dt DESC,stk_cd);


			/************ ver 1.7 Ends ************/
    EXEC SQL OPEN sys_cursor;

    if ( SQLCODE != 0 )
    {
       fn_errlog( c_ServiceName, "S31085", SQLMSG, c_err_msg );
       EXEC SQL CLOSE sys_cursor;
       Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       l_acnt_id = -1;

      if(SQLCODE == NO_DATA_FOUND)
         l_acnt_id = 1;

        tpfree ( ( char * )ptr_fml_obuf);
       Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
    }

		/**************** For Each Position of Match Account Loop **********************/

		i_counter = 1;

    while(1)
    {

        EXEC SQL FETCH sys_cursor
				INTO    :c_ord_dt,
                :c_plg_ordr_rfrnc,
                :c_stck_cd,
                :c_dp_clnt_id,
                :c_dp_id,
                :l_ord_tot_qty,
                :l_plg_haircut,
                :d_bkubk_vl,
								:c_ord_typ,
                :c_ordr_stts,
								:c_channel,
								:c_mtch_accnt_no,
								:c_xchng_rmrks,
								:c_pon_no;          /** Ver 2.1 **/

        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
              EXEC SQL CLOSE sys_cursor;
              break;
          }
					else
          {
            fn_errlog( c_ServiceName, "S31090", SQLMSG, c_err_msg  );
            Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            EXEC SQL CLOSE  sys_cursor;
            tpfree ( ( char * )ptr_fml_obuf);
            tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
          }
				}

     /************** commented in Ver 2.1 ***********************************
          rtrim(c_plg_ordr_rfrnc);

  	 *****************Ver 1.8 Start Fetch Cursor for Pon No *****************	

          EXEC SQL
          DECLARE pon_cursor CURSOR FOR
          SELECT NVL(to_char(PTD_DPM_NMBR),' ') 
          FROM   PTD_TIFP_DTLS 
          WHERE  trim(PTD_POD_REF_NO) = :c_plg_ordr_rfrnc 
          AND    PTD_CLM_MTCH_ACCNT   = :c_mtch_accnt_no
          UNION ALL
          SELECT NVL(to_char(PTD_DPM_NMBR),' ')
          FROM   PTD_TIFP_DTLS_HSTRY 
          WHERE  trim(PTD_POD_REF_NO) = :c_plg_ordr_rfrnc  
          AND    PTD_CLM_MTCH_ACCNT   = :c_mtch_accnt_no
          AND NOT EXISTS ( SELECT to_char(PTD_DPM_NMBR)
                           FROM   PTD_TIFP_DTLS
                           WHERE  trim(PTD_POD_REF_NO) = :c_plg_ordr_rfrnc
                           AND    PTD_CLM_MTCH_ACCNT   = :c_mtch_accnt_no );            

          EXEC SQL OPEN pon_cursor;

          if ( SQLCODE != 0 )
          {
            fn_errlog( c_ServiceName, "S31095", SQLMSG, c_err_msg );
            EXEC SQL CLOSE pon_cursor;
            Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;

            if(SQLCODE == NO_DATA_FOUND)
            l_acnt_id = 1;

            tpfree ( ( char * )ptr_fml_obuf);
            Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
          }
         fn_userlog(c_ServiceName,"Ref :%s:",c_plg_ordr_rfrnc);

        MEMSET(c_ord_pon_no);

				while(1)
				{
          MEMSET(c_pon_no);
 
		  		EXEC SQL FETCH pon_cursor
          INTO    :c_pon_no;

          if ( SQLCODE != 0 )
          {
            if ( SQLCODE == NO_DATA_FOUND )
            {
              EXEC SQL CLOSE pon_cursor;
              break;
            }
            else
            {
              fn_errlog( c_ServiceName, "S31100", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              l_acnt_id = -1;
              Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
              EXEC SQL CLOSE  pon_cursor;
              tpfree ( ( char * )ptr_fml_obuf);
              tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
            }
          }

         fn_userlog(c_ServiceName,"inside while loop 2:");           
          SETLEN(c_pon_no);
          SETNULL(c_pon_no);	
	  			strcat(c_ord_pon_no.arr,c_pon_no.arr);
		  	strcat(c_ord_pon_no.arr,"-");

		    }

       SETLEN(c_ord_pon_no);
       SETNULL(c_ord_pon_no);

     *****************Ver 1.8 End of Fetch Cursor for Pon No ***************************/

     /*************** Allocate Memory and add to buffer ****************/
			
         if ( Fneeded32( 1, l_bufferlength ) > Funused32( ptr_fml_obuf ) ) 
        {
            i_counter++;
						/* Ver 1.3 Starts */
            /*ptr_fml_temp = ( FBFR32 *)tprealloc( (char *)ptr_fml_obuf,
                           (i_counter * l_bufferlength * BUF_MULTIPLY)); */

						/**  Commented in VQC version 
             ptr_fml_temp = ( FBFR32 *)tprealloc( (char *)ptr_fml_obuf,
														(Fsizeof32(ptr_fml_obuf)+ (i_counter *l_bufferlength)));
						* Ver 1.3 Ends *

            if ( ptr_fml_temp == NULL )
            {
                fn_errlog( c_ServiceName, "S31105", TPMSG, c_err_msg  );
                EXEC SQL CLOSE  sys_cursor;
                Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
            }
						else
            {
              ptr_fml_obuf = ptr_fml_temp;
							ptr_fml_temp = (FBFR32 *) NULL  ;
            } **/
            
            /*** Added in VQC by Suchita ***/
            ptr_fml_obuf = ( FBFR32 *)tprealloc( (char *)ptr_fml_obuf,
                            (Fsizeof32(ptr_fml_obuf)+ (i_counter *l_bufferlength)));
          
            if( ptr_fml_obuf == NULL )
            {
                fn_errlog( c_ServiceName, "S31110", TPMSG, c_err_msg  );
                EXEC SQL CLOSE  sys_cursor;
                Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
            }
            /*** VQC version ends ***/ 
        }		

				/******************** Fill Output Buffer with Output  *********************/

				if(DEBUG_MSG_LVL_0)		/*** Added in VQC ***/
				{	
     			fn_userlog( c_ServiceName, "Filling Output Buffer ");
				}
	
				i_err[0] =  Fadd32( ptr_fml_obuf  ,FFO_EBA_MTCH_ACT_NO  ,(char *)c_mtch_accnt_no ,0);
				i_ferr [0] = Ferror32;
        i_err[1] =  Fadd32( ptr_fml_obuf  ,FFO_DP_CLNT_ID       ,(char *)c_dp_clnt_id   ,0);
				i_ferr [1] = Ferror32;
        i_err[2] =  Fadd32( ptr_fml_obuf  ,FFO_DPID             ,(char *)c_dp_id        ,0);
				i_ferr [2] = Ferror32;
        i_err[3] =  Fadd32( ptr_fml_obuf  ,FFO_CHANNEL          ,(char *)c_channel      ,0);
				i_ferr [3] = Ferror32;
        i_err[4] =  Fadd32( ptr_fml_obuf  ,FFO_ORD_DT           ,(char *)c_ord_dt      ,0);
				i_ferr [4] = Ferror32;
        i_err[5] =  Fadd32( ptr_fml_obuf  ,FFO_PLG_ORDR_RFRNC   ,(char *)c_plg_ordr_rfrnc,0);
				i_ferr [5] = Ferror32;
        i_err[6] =  Fadd32( ptr_fml_obuf  ,FFO_STCK_CD          ,(char *)c_stck_cd      ,0);
				i_ferr [6] = Ferror32;
        i_err[7] =  Fadd32( ptr_fml_obuf  ,FFO_ORD_TOT_QTY      ,(char*)&l_ord_tot_qty  ,0);
				i_ferr [7] = Ferror32;
        i_err[8] =  Fadd32( ptr_fml_obuf  ,FFO_ORD_TYP          ,(char *)&c_ord_typ      ,0);
				i_ferr [8] = Ferror32;
        i_err[9] =  Fadd32( ptr_fml_obuf  ,FFO_ORDR_STTS        ,(char *)&c_ordr_stts    ,0);
				i_ferr [9] = Ferror32;
        i_err[10] =  Fadd32( ptr_fml_obuf  ,FFO_XCHNG_RMRKS      ,(char *)c_xchng_rmrks  ,0);
				i_ferr [10] = Ferror32;
				i_err[11] =  Fadd32( ptr_fml_obuf  ,FFO_HAIRCUT          ,(char*)&l_plg_haircut  ,0);
				i_ferr [11] = Ferror32;
				i_err[12] = Fadd32( ptr_fml_obuf  ,FFO_PLG_RT							,(char*)&d_bkubk_vl , 0);
        i_ferr [12] = Ferror32;
	 /*** i_err[13] = Fadd32( ptr_fml_obuf  ,FFO_PIPO_RFRNC       ,(char*)&c_ord_pon_no.arr , 0); ** Added in Ver 1.8 ** Commented in Ver 2.0 ***/
        /** i_err[13] = Fadd32( ptr_fml_obuf  ,FFO_PIPO_RFRNC       ,(char*)c_ord_pon_no.arr , 0);  ** Added in Ver 2.0 **/ /** Commented for Ver 2.1 **/
				i_err[13] = Fadd32( ptr_fml_obuf  ,FFO_PIPO_RFRNC       ,(char*)&c_pon_no , 0); /** Added in Ver 2.1 **/
        i_ferr [13] = Ferror32;  /** Added in Ver 1.8 **/ 
	
        for ( i_cnt=0; i_cnt < 14; i_cnt++ )  /** Change from 13 to 14 **/
        {
          if ( i_err[ i_cnt ] == -1 )
          {
            fn_errlog( c_ServiceName, "S31115", Fstrerror32(i_ferr[i_cnt]), c_err_msg  );
            Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            EXEC SQL CLOSE  sys_cursor;
            tpfree ( ( char * )ptr_fml_obuf);
            tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
          }
        }

		}	 /* End of While Loop  */
	
    
   if( DEBUG_MSG_LVL_0) /*** Added in VQC Version ***/
   {	
      fn_userlog( c_ServiceName, "ALL DONE");
   }
		tpreturn( TPSUCCESS, 0, (char *)ptr_fml_obuf, 0 , 0 );
}

