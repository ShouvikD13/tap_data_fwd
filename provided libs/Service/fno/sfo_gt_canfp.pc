/******************************************************************************/
/*  Program           : SFO_GT_CANFP                                          */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_RQST_TYP                                          */
/*                                                                            */
/*  Optional          : FFO_UNDRLYNG                                          */
/* 										: FFO_PIPE_ID																						*/
/*                                                                            */
/*  Output            : FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_CNTRCT_TAG                                        */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_CTGRY_INDSTK                                      */
/*                                                                            */
/*  Description       : To get the records for running EOS FP Cancellation    */ 
/*                      and pass it on to the Calling batch program           */
/*                                                                            */
/*  Log               :                                                       */
/*                    : ver VQC :   VQC changes           - 24-Mar-2017       */
/*                                                                            */
/******************************************************************************/
/*  14-Mar-2008     Ver 1.0        Vidyayini Krish     Initial Release				*/
/*  13-Jun-2008     Ver 1.1        Shailesh| Sandeep	 Revamp								  */
/*  15-Mar-2012     Ver 1.2        Sandip  | FNO BSE Changes								  */
/*  24-Mar-2017     Ver VQC        Mrinal Kishore                             */
/*	08-Dec-2020			Ver 1.3				 Kiran Itkar																*/
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fo.h>
#include <fo_fml_def.h> 			
#include <fml_def.h>
/** #include <fn_battmpt.h>         *** Commented in VQC***/
#include <fn_tuxlib.h>
#include <fml_rout.h>
#include <fn_log.h>
/***** Commented in VQC***** 
#include <fn_session.h>         
#include <string.h>
****** Commented in VQC *****/
#include <fn_read_debug_lvl.h>


void SFO_GT_CANFP( TPSVCINFO *rqst )
{

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

/**	EXEC SQL INCLUDE "table/ffp_fo_futures_pstn.h";         *** Commented in VQC***/
  EXEC SQL INCLUDE "table/fod_fo_ordr_dtls.h";
/***** Commented in VQC*****
EXEC SQL INCLUDE "table/usr_user_master.h";        			  
EXEC SQL INCLUDE "table/clm_clnt_mstr.h";         			
****** Commented in VQC *****/

  char c_ServiceName [ 33 ];
  varchar c_err_msg [ 256 ];						/***Converted to VARCHAR in VQC***/

  int i_returncode = 0;									/*** initialized with 0 in VQC ***/

	EXEC SQL BEGIN DECLARE SECTION;
    varchar select_stmt[3000];
/***** Commented in VQC*****
    char c_xchng_cd [ 4 ];		        
    char c_prd_typ;            			 
****** Commented in VQC *****/
    char c_rqst_typ = '\0';						/*** initialized in VQC ***/
		char c_indstk_typ = '\0'; /*** Ver 1.3 ***/	
		char c_indstk_typ_str[2]= "\0"; /*** Ver 1.3 ***/	
/***** Commented in VQC*****
    char c_undrlyng_str [ 200 ];      
    char c_match_str [ 200 ];	       

    char sql_mtch_accnt [ 11 ];     
    char sql_xchng_cd [ 4 ];       
    char sql_prd_typ;         				 
    char sql_indstk;                  
    char sql_undrlyng [ 7 ];         
    char sql_cntrct_tag;            

    char  c_exg_stts;              
****** Commented in VQC *****/

  EXEC SQL END DECLARE SECTION;

  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
  INITDBGLVL(c_ServiceName);	

	memset(sql_fod_pipe_id,'\0',sizeof(sql_fod_pipe_id));
	memset(sql_fod_undrlyng,'\0',sizeof(sql_fod_undrlyng));				
	memset(sql_fod_xchng_cd,'\0',sizeof(sql_fod_xchng_cd));

  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                    c_err_msg.arr,					/* DataType of c_err_msg changed from char to varchar in VQC */	
                                    ptr_fml_Ibuf,
                                    /** 5,Commented in Ver 1.3 ***/
																		6,	/*** Added in ver 1.3 ***/
                                    FFO_XCHNG_CD, ( char * )sql_fod_xchng_cd, NULL,
                                    FFO_PRDCT_TYP, ( char * )&sql_fod_prdct_typ, NULL,
                                    FFO_RQST_TYP, ( char * )&c_rqst_typ, NULL,
                                    FFO_UNDRLYNG, ( char * )sql_fod_undrlyng, NULL,		
																		FFO_PIPE_ID, ( char * )sql_fod_pipe_id, NULL,
																		FFO_CTGRY_INDSTK, ( char * )&c_indstk_typ, NULL );		/*** Ver 1.3 ***/

	if( i_returncode != 0 )
  {
      fn_errlog( c_ServiceName, "S31005", LIBMSG , c_err_msg.arr );    /* DataType of c_err_msg changed from char to varchar in VQC */ 
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );    			 /* DataType of c_err_msg changed from char to varchar in VQC */	 
      tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }

	rtrim( sql_fod_pipe_id );
	rtrim( sql_fod_undrlyng );
	rtrim( sql_fod_xchng_cd );

c_indstk_typ_str[0] = c_indstk_typ; /*** Ver 1.3 ***/
c_indstk_typ_str[1] = '\0'; /*** Ver 1.3 ***/


	if( DEBUG_MSG_LVL_3 )                           /** DEBUG_MSG_LVL is added in Ver VQC **/
  {
  	fn_userlog ( c_ServiceName,"EXCHANGE CODE IS :%s:",sql_fod_xchng_cd );
  	fn_userlog ( c_ServiceName,"PRODUCT TYPE IS :%c:",sql_fod_prdct_typ );
  	fn_userlog ( c_ServiceName,"UNDERLYNG IS :%s:",sql_fod_undrlyng );
		fn_userlog ( c_ServiceName,"REQUEST TYPE IS :%c:",c_rqst_typ );
		fn_userlog ( c_ServiceName,"PIPE ID IS :%s:",sql_fod_pipe_id );
		fn_userlog ( c_ServiceName,"INDEX/STOCK TYPE IS :%c:",c_indstk_typ );		/*** Added in Ver 1.3 ***/
	}
	

	fn_userlog ( c_ServiceName,"INDEX/STOCK TYPE IS :%c:",c_indstk_typ );			/*** Added in Ver 1.3 ***/	
	fn_userlog ( c_ServiceName,"INDEX/STOCK TYPE IS :%s:",c_indstk_typ_str );		/*** Added in Ver 1.3 ***/
	memset(select_stmt.arr,0,sizeof(select_stmt.arr));                    /*** Memset in VQC ***/

	if ( c_rqst_typ == FPEOS_ALL_UND_ALL_PIPE)
	{
/***Commented for Ver 1.1
		strcpy ((char *)select_stmt.arr,"SELECT distinct(ffp_clm_mtch_accnt),ffp_undrlyng,ffp_expry_dt,ffp_indstk,ffp_cntrct_tag,ffp_xchng_cd,fod_pipe_id,ABS(ffp_opnpstn_val) FROM ffp_fo_futures_pstn,fod_fo_ordr_dtls WHERE ffp_prdct_typ = 'P'");
		strcat((char *)select_stmt.arr," and (ffp_ibuy_qty > 0 OR ffp_isell_qty < 0 OR ffp_exbuy_qty > 0 OR ffp_exsell_qty < 0 	   OR ffp_opnpstn_flw != 'N' ) and ffp_clm_mtch_accnt = fod_clm_mtch_accnt and ffp_prdct_typ = fod_prdct_typ and                ffp_indstk = fod_indstk and ffp_undrlyng = fod_undrlyng and ffp_expry_dt = fod_expry_dt and fod_ordr_stts in ('R','O','P') order by ABS(FFP_OPNPSTN_VAL) DESC" );
****/
		strcpy ((char *)select_stmt.arr,"SELECT fod_ordr_rfrnc,fod_clm_mtch_accnt,fod_undrlyng,fod_expry_dt,fod_indstk,fod_xchng_cd,fod_pipe_id FROM fod_fo_ordr_dtls WHERE fod_prdct_typ = 'P'");
    strcat((char *)select_stmt.arr," and FOD_XCHNG_CD = '"); /** Ver 1.2 ***/
		strcat((char *)select_stmt.arr,sql_fod_xchng_cd);			/*** Ver 1.2 ***/
   	strcat((char *)select_stmt.arr,"' and FOD_INDSTK LIKE  '"); /*** Ver 1.3 ***/
    strcat((char *)select_stmt.arr,c_indstk_typ_str);         /*** Ver 1.3 ***/ 
		strcat((char *)select_stmt.arr,"' and fod_ordr_stts in ('R','O','P') " );
	}
	else if ( c_rqst_typ == FPEOS_ALL_UND_PIPE )
	{

/***		fn_userlog (c_ServiceName,"FPEOS_ALL_UND_PIPE");						*** Commented in VQC as Request type is already Printed********/
/**Commented for Ver 1.1
		strcpy ((char *)select_stmt.arr,"SELECT distinct(ffp_clm_mtch_accnt),ffp_undrlyng,ffp_expry_dt,ffp_indstk,ffp_cntrct_tag,    ffp_xchng_cd,fod_pipe_id,ABS(ffp_opnpstn_val) FROM ffp_fo_futures_pstn,fod_fo_ordr_dtls WHERE ffp_prdct_typ = 'P'");

    strcat((char *)select_stmt.arr," and (ffp_ibuy_qty > 0 OR ffp_isell_qty < 0 OR ffp_exbuy_qty > 0 OR ffp_exsell_qty < 0  OR ffp_opnpstn_flw != 'N' ) and ffp_clm_mtch_accnt = fod_clm_mtch_accnt and ffp_prdct_typ = fod_prdct_typ and 	ffp_indstk = fod_indstk and ffp_undrlyng = fod_undrlyng and ffp_expry_dt = fod_expry_dt and fod_pipe_id = '");
		strcat((char *)select_stmt.arr, sql_fod_pipe_id);

		strcat( (char *)select_stmt.arr,"' and fod_ordr_stts in ('R','O','P') order by ABS(FFP_OPNPSTN_VAL) DESC");
*********/
		strcpy ((char *)select_stmt.arr,"SELECT fod_ordr_rfrnc,fod_clm_mtch_accnt,fod_undrlyng,fod_expry_dt,fod_indstk,fod_xchng_cd,fod_pipe_id FROM fod_fo_ordr_dtls WHERE fod_prdct_typ = 'P'");

    strcat((char *)select_stmt.arr," and fod_pipe_id = '");

		strcat((char *)select_stmt.arr, sql_fod_pipe_id);

		strcat( (char *)select_stmt.arr,"' and FOD_XCHNG_CD = '");	/*** Ver 1.2 **/
		strcat((char *)select_stmt.arr,sql_fod_xchng_cd );					/** Ver 1.2 **/
   	strcat((char *)select_stmt.arr,"' and FOD_INDSTK LIKE  '"); /*** Ver 1.3 ***/
    strcat((char *)select_stmt.arr,c_indstk_typ_str);         /*** Ver 1.3 ***/ 
		strcat( (char *)select_stmt.arr,"' and fod_ordr_stts in ('R','O','P')");

		if( DEBUG_MSG_LVL_3 )                           /** DEBUG_MSG_LVL is added in Ver VQC **/
      {
				fn_userlog (c_ServiceName,"FPEOS_ALL_UND_PIPE CREATED");
			}
	} 
	else if ( c_rqst_typ == FPEOS_UND_ALL_PIPE )
	{
/******Commented for Ver 1.1
		strcpy ((char *)select_stmt.arr,"SELECT distinct(ffp_clm_mtch_accnt),ffp_undrlyng,ffp_expry_dt,ffp_indstk,ffp_cntrct_tag,    ffp_xchng_cd,fod_pipe_id,ABS(ffp_opnpstn_val) FROM ffp_fo_futures_pstn,fod_fo_ordr_dtls WHERE ffp_prdct_typ = 'P'");

		strcat((char *)select_stmt.arr," and ffp_undrlyng = '");

		strcat( (char *)select_stmt.arr,sql_ffp_undrlyng);
		
		strcat((char *)select_stmt.arr,"' and (ffp_ibuy_qty > 0 OR ffp_isell_qty < 0 OR ffp_exbuy_qty > 0 OR ffp_exsell_qty < 0      OR ffp_opnpstn_flw != 'N' ) and ffp_clm_mtch_accnt = fod_clm_mtch_accnt and ffp_prdct_typ = fod_prdct_typ and                ffp_indstk = fod_indstk and ffp_undrlyng = fod_undrlyng and ffp_expry_dt = fod_expry_dt and fod_ordr_stts in ('R','O','P') order by ABS(FFP_OPNPSTN_VAL) DESC");
********/
		strcpy ((char *)select_stmt.arr,"SELECT fod_ordr_rfrnc,fod_clm_mtch_accnt,fod_undrlyng,fod_expry_dt,fod_indstk,fod_xchng_cd,fod_pipe_id FROM fod_fo_ordr_dtls WHERE fod_prdct_typ = 'P'");

		strcat((char *)select_stmt.arr," and fod_undrlyng = '");

		strcat( (char *)select_stmt.arr,sql_fod_undrlyng);
		
		strcat( (char *)select_stmt.arr,"' and FOD_XCHNG_CD = '");	/*** Ver 1.2 **/
		strcat((char *)select_stmt.arr,sql_fod_xchng_cd );					/** Ver 1.2 **/
   	 strcat((char *)select_stmt.arr,"' and FOD_INDSTK LIKE  '"); /*** Ver 1.3 ***/
    strcat((char *)select_stmt.arr,c_indstk_typ_str);         /*** Ver 1.3 ***/ 
		strcat((char *)select_stmt.arr,"' and fod_ordr_stts in ('R','O','P') ");
	}
	else if ( c_rqst_typ == FPEOS_UNDRLYNG_PIPE )
	{
/*****Commented for Ver 1.1
		strcpy ((char *)select_stmt.arr,"SELECT distinct(ffp_clm_mtch_accnt),ffp_undrlyng,ffp_expry_dt,ffp_indstk,ffp_cntrct_tag,    ffp_xchng_cd,fod_pipe_id,ABS(ffp_opnpstn_val) FROM ffp_fo_futures_pstn,fod_fo_ordr_dtls WHERE ffp_prdct_typ = 'P'");

		strcat((char *)select_stmt.arr," and ffp_undrlyng = '");

		strcat( (char *)select_stmt.arr,sql_ffp_undrlyng);

		strcat( (char *)select_stmt.arr,"' and (ffp_ibuy_qty > 0 OR ffp_isell_qty < 0 OR ffp_exbuy_qty > 0 OR ffp_exsell_qty < 0     OR ffp_opnpstn_flw != 'N' ) and ffp_clm_mtch_accnt = fod_clm_mtch_accnt and ffp_prdct_typ = fod_prdct_typ and ffp_indstk     = fod_indstk and ffp_undrlyng = fod_undrlyng and ffp_expry_dt = fod_expry_dt and fod_pipe_id = '");

		strcat((char *)select_stmt.arr, sql_fod_pipe_id);

		strcat( (char *)select_stmt.arr,"' and fod_ordr_stts in ('R','O','P') order by ABS(FFP_OPNPSTN_VAL) DESC" ); 
********/
		strcpy ((char *)select_stmt.arr,"SELECT fod_ordr_rfrnc,fod_clm_mtch_accnt,fod_undrlyng,fod_expry_dt,fod_indstk,fod_xchng_cd,fod_pipe_id FROM fod_fo_ordr_dtls WHERE fod_prdct_typ = 'P'");

		strcat((char *)select_stmt.arr," and fod_undrlyng = '");

		strcat( (char *)select_stmt.arr,sql_fod_undrlyng);

		strcat( (char *)select_stmt.arr,"' and fod_pipe_id = '");

		strcat((char *)select_stmt.arr, sql_fod_pipe_id);

		strcat( (char *)select_stmt.arr,"' and FOD_XCHNG_CD = '");	/*** Ver 1.2 **/
		strcat((char *)select_stmt.arr,sql_fod_xchng_cd );					/** Ver 1.2 **/
   	 strcat((char *)select_stmt.arr,"' and FOD_INDSTK LIKE  '"); /*** Ver 1.3 ***/
    strcat((char *)select_stmt.arr,c_indstk_typ_str);         /*** Ver 1.3 ***/ 
		strcat( (char *)select_stmt.arr,"' and fod_ordr_stts in ('R','O','P') " );
	}
	else
	{
		if( DEBUG_MSG_LVL_3 )                           /** DEBUG_MSG_LVL is added in Ver VQC **/
      {
				fn_userlog(c_ServiceName,"Invalid request type");
			}
	  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );		
	}

	select_stmt.len = strlen((char *)select_stmt.arr);
	if( DEBUG_MSG_LVL_3 )                           /** DEBUG_MSG_LVL is added in Ver VQC **/
  {
		fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",select_stmt.len );
	}

  EXEC SQL PREPARE sql_stmt FROM :select_stmt;

	if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg.arr );    /* DataType of c_err_msg changed from char to varchar in VQC */ 
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );          /* DataType of c_err_msg changed from char to varchar in VQC */
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	ptr_fml_Obuf = NULL;

	EXEC SQL DECLARE cur_dyn CURSOR FOR sql_stmt;

	EXEC SQL OPEN cur_dyn ;
  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg.arr );    /* DataType of c_err_msg changed from char to varchar in VQC */ 
/**    tpfree ( ( char * ) ptr_fml_Obuf );			     *** Commented in VQC***/	
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );          /* DataType of c_err_msg changed from char to varchar in VQC */
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  for (;;)
  {

		memset(sql_fod_ordr_rfrnc,'\0',sizeof(sql_fod_ordr_rfrnc));
		memset(sql_fod_clm_mtch_accnt,'\0',sizeof(sql_fod_clm_mtch_accnt));
		memset(sql_fod_undrlyng,'\0',sizeof(sql_fod_undrlyng));
		memset(sql_fod_xchng_cd,'\0',sizeof(sql_fod_xchng_cd));
		memset(sql_fod_pipe_id,'\0',sizeof(sql_fod_pipe_id));
	
/**		SETNULL(sql_ffp_expry_dt);              *** Commented in VQC***/

    EXEC SQL FETCH cur_dyn
             INTO :sql_fod_ordr_rfrnc,
             			:sql_fod_clm_mtch_accnt,
                  :sql_fod_undrlyng,
                  :sql_fod_expry_dt,
                  :sql_fod_indstk,
									:sql_fod_xchng_cd,
									:sql_fod_pipe_id;

    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        break;
      }
      fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg.arr );    /* DataType of c_err_msg changed from char to varchar in VQC */ 
/**      tpfree ( ( char * ) ptr_fml_Obuf );	          *** Commented in VQC***/	
      EXEC SQL CLOSE cur_dyn;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );          /* DataType of c_err_msg changed from char to varchar in VQC */ 
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		rtrim(sql_fod_clm_mtch_accnt);
		rtrim(sql_fod_undrlyng);
		rtrim(sql_fod_xchng_cd);
		rtrim(sql_fod_pipe_id);
/**		sql_fod_expry_dt.len = strlen((char *)sql_fod_expry_dt.arr); 							*** Commented in VQC***/
	  if( DEBUG_MSG_LVL_3 )                           /** DEBUG_MSG_LVL is added in Ver VQC **/
    {
			fn_userlog ( c_ServiceName,"EXCHANGE CODE IS :%s:",sql_fod_xchng_cd );
  		fn_userlog ( c_ServiceName,"PRODUCT TYPE IS :%c:",sql_fod_prdct_typ );
  		fn_userlog ( c_ServiceName,"UNDERLYNG IS :%s:",sql_fod_undrlyng );
  		fn_userlog ( c_ServiceName,"REQUEST TYPE IS :%c:",c_rqst_typ );
  		fn_userlog ( c_ServiceName,"PIPE ID IS :%s:",sql_fod_pipe_id );
			fn_userlog ( c_ServiceName,"EXPIRY DATE IS :%s:",sql_fod_expry_dt.arr );
			fn_userlog ( c_ServiceName,"INDEX/STOCK TYPE IS :%c:",sql_fod_indstk );		/*** Ver 1.3 ***/	
		}
		

    i_returncode = fn_pack_vartofml( c_ServiceName,
                                     c_err_msg.arr,  /* DataType of c_err_msg changed from char to varchar in VQC */ 
                                     &ptr_fml_Obuf,
                                     8,
                                 		 FFO_EBA_MTCH_ACT_NO, ( char * )sql_fod_clm_mtch_accnt,
                                 		 FFO_XCHNG_CD, ( char * )sql_fod_xchng_cd,
                                 		 FFO_PRDCT_TYP, ( char * )&sql_fod_prdct_typ,
                                 		 FFO_CTGRY_INDSTK, ( char * )&sql_fod_indstk,
                                 		 FFO_UNDRLYNG, ( char * )sql_fod_undrlyng,
                                 		 FFO_ORDR_RFRNC, ( char * )sql_fod_ordr_rfrnc,
																		 FFO_EXPRY_DT, (char * )sql_fod_expry_dt.arr,
																		 FFO_PIPE_ID, ( char * )sql_fod_pipe_id );

    if( i_returncode == -1 )
    {
      /*  fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg );  **commented in VQC ***/
      fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg.arr );  /* DataType of c_err_msg changed from char to varchar and SQLMSG is replaced with LIBMSG in VQC */
      EXEC SQL CLOSE cur_dyn;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );        /* DataType of c_err_msg changed from char to varchar in VQC */
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
    EXEC SQL CLOSE cur_dyn;
  tpreturn(TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );

}

