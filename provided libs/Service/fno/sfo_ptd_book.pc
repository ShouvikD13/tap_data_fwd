/******************************************************************************/
/*  Program           : SFO_PTD_BOOK		                            					*/
/*                                                                            */
/*  Input             : FFO_USR_ID																						*/
/*											FFO_SSSN_ID																						*/
/*											FFO_EBA_MTCH_ACT_NO																		*/
/*											FFO_DPID																							*/	
/*											FFO_DP_CLNT_ID      																	*/
/*											FFO_FROM_DT																						*/
/*											FFO_TO_DT																							*/
/*											FFO_ STCK_CD																					*/
/*											FFO_PLG_TYP      																			*/
/*																																						*/			
/*                                                                            */
/*  Output            : FFO_ERR_MSG																						*/
/*											FFO_ACTN_ID																						*/
/*											FFO_EBA_MTCH_ACT_NO																		*/
/*											FFO_DP_CLNT_ID																				*/ 
/*											FFO_DPID																							*/
/*											FFO_ORD_DT																						*/
/*											FFO_REF_NO 																						*/	
/*											FFO_SLIP_NO																						*/ 
/*											FFO_DPM_NO	--commented for ver 1.4										*/
/*                      FFO_JIFFY   -- ver 1.4                                */ 
/*											FFO_STCK_CD 																					*/
/*											FFO_TIFP_QTY																					*/
/*											FFO_PLG_REV_TYP																				*/
/*																																						*/
/*                                                                            */
/*  Description       : This serviece will be called by Front-end (ASP/DL)		*/
/*										  to get Trade book details .				  		 							*/
/*																																						*/
/*  Log               : 1.0		16-Sep-2004		Infotech|Himanshu Ahire						*/
/*	Reviewed By				: 1.0   24-Sep-2004   Infotech|Smitha  Nutii	          */
/*										:	1.1		14-Aug-2007		Infotech|Sushil Sharma						*/
/*										:	1.2		20-Dec-2007		Infotech|Sushil Sharma						*/
/*                      1.3	  11-May-2008		Infotech|Rohit                    */
/*                      1.4   13-May-2008   Infotech|Swati A.B                */
/*                      1.5   28-Aug-2014   Infotech|Sachin Birje             */
/*                      1.6   18-Jul-2020   Infotech|Samip M									*/
/******************************************************************************/
/*   1.0  -  New release	                                                    */
/*	 1.1	-  DL Revamp																												*/
/*	 1.2	-  AIX Migration																										*/
/*	 1.3  -  Change for Reallocation																					*/
/*   1.3  -  2010-0123-Policy-Operationalisation of New Depository System     */
/*        - (DPM number size change from 10 to 14 )                           */
/*   1.5  -  View to FML Changes                                              */
/*   1.6  -  CR-ISEC14-138293 Margin Pledge Changes														*/
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>     
#include <sqlca.h>
#include <atmi.h>
#include <userlog.h>
#include <fml32.h>
#include <Usysflds.h>   
#include <fo_fml_def.h> 
/*** #include <fo_view_def.h>  **** Ver 1.5 ***/
#include <fo_view_def.h>   /**** Ver 1.5 ***/
#include <fo.h>
#include <fn_tuxlib.h>
#include <fn_log.h>             /*  Ver 1.2 : Added   */
#include <fn_ddr.h>             /*  Ver 1.2 : Added   */
#include <fn_session.h>         /*  Ver 1.2 : Added   */
#include <string.h>             /*  Ver 1.2 : Added   */
#include <fn_read_debug_lvl.h>  /*  Ver 1.2 : Added   */
#define	 BUF_MULTIPLY 1

void SFO_PTD_BOOK( TPSVCINFO *rqst )
{
	int i_returncode;
  int i_trnsctn = 0;
	int i_err[10];
  int i_ferr[10];
	int i_cnt;
	int i_counter =1;

	long li_sssn_id;
	long l_acnt_id;

	char c_ServiceName [ 33 ];
  char c_err_msg[256 + 1];
	char c_usr_id   [8+1];
	char c_mtch_accnt_no[11];
	char select[700];
	char from[250];
	char where[100];
  char select_hstry[700];
  char from_hstry[250];
  char where_hstry[100];

  FBFR32  *ptr_fml_ibuf=(FBFR32 *)NULL;			/* Pointer to FML Input buffer    			*/
  FBFR32  *ptr_fml_obuf=(FBFR32 *)NULL;   	/* Pointer to FML Output buffer   	 		*/
  FBFR32  *ptr_fml_temp=(FBFR32 *)NULL;   	/* Pointer to FML Output buffer   	 		*/

	struct vw_usr_prfl st_usr_prfl;
	struct vw_err_msg st_err_msg;

	EXEC SQL BEGIN DECLARE SECTION;

	char c_from_dt[15];
	char c_to_dt[15];
	char c_dp_id[9];
	char c_dp_clnt_id[9];
	char clm_mtch_accnt[11];
	char c_plg_typ;

	char c_ord_dt[15];
	char c_ref_no[20];
	long long l_slip_no;		/** Data type changed for Ver 1.6 ***/
	double d_slip_no;		/** Ver 1.6 ***/
 /**	long l_dpm_no;  --commented for ver 1.4 **/
	double d_dpm_no=0.0; /** ver 1.4 **/
	char c_plg_rev_typ;
	char c_stck_cd[7];

	long	l_tifp_qty;
	
	EXEC SQL END DECLARE SECTION;


	/******************* calculate size of buffer for later use **********************/

	 FLDLEN32  l_bufferlength =   (  sizeof(long)   * 3      )	/* Ver 1.2 : l_bufferlength Data type changed from const long */
                         			+ (  sizeof(char)  			     )
                         			+ (  sizeof(clm_mtch_accnt)  )
                         			+ (  sizeof(c_dp_clnt_id)    )
                         			+ (  sizeof(c_dp_id)         )
                         			+ (  sizeof(c_ord_dt)        )
                         			+ (  sizeof(c_ref_no)        )
                         			+ (  sizeof(d_dpm_no)        )      /**  ver 1.4 **/
                         			+ (  sizeof(c_stck_cd)       );

	
	/************************* Take Input From FML Buffer ***************************/

  ptr_fml_ibuf = (FBFR32 *)rqst->data;
  strcpy(c_ServiceName, rqst->name);
	INITDBGLVL(c_ServiceName);            /*  Ver 1.2 : Added   */

	if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.2 : Debug level Change  */
   fn_userlog( c_ServiceName, "Service Started.. ");
	}


	i_err[0] = Fget32( ptr_fml_ibuf, FFO_USR_ID, 0,c_usr_id,0 );
  i_ferr [0] = Ferror32;
  i_err[1] = Fget32( ptr_fml_ibuf, FFO_SSSN_ID,0,(char *)&li_sssn_id,0 );
  i_ferr [1] = Ferror32;
  i_err[2] = Fget32( ptr_fml_ibuf,FFO_EBA_MTCH_ACT_NO,0,c_mtch_accnt_no,0);
  i_ferr [2] = Ferror32;
  i_err[3] = Fget32( ptr_fml_ibuf,FFO_DPID,0,c_dp_id,0);
  i_ferr [3] = Ferror32;
  i_err[4] = Fget32( ptr_fml_ibuf,FFO_DP_CLNT_ID,0,c_dp_clnt_id,0);
  i_ferr [4] = Ferror32;
  i_err[5] = Fget32( ptr_fml_ibuf,FFO_FROM_DT,0,c_from_dt,0);
  i_ferr [5] = Ferror32;
  i_err[6] = Fget32( ptr_fml_ibuf,FFO_TO_DT,0,c_to_dt,0);
  i_ferr [6] = Ferror32;
  i_err[7] = Fget32( ptr_fml_ibuf,FFO_STCK_CD,0,c_stck_cd,0);
  i_ferr [7] = Ferror32;
  i_err[8] = Fget32( ptr_fml_ibuf, FFO_PLG_TYP ,0,(char*)&c_plg_typ,0);
  i_ferr [8] = Ferror32;

  for ( i_cnt=0; i_cnt < 9; i_cnt++ )
  {
    if ( i_err[ i_cnt ] == -1 )
    {
      fn_errlog( c_ServiceName, "S31005", Fstrerror32(i_ferr[i_cnt]), c_err_msg  );
   		fn_userlog( c_ServiceName, "At Field %d", i_cnt);
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	l_acnt_id = -1;
    	Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
    }
  }

  fn_userlog( c_ServiceName, "c_usr_id        :%s:"   ,c_usr_id);
  fn_userlog( c_ServiceName, "li_sssn_id      :%ld:"  ,li_sssn_id);
  fn_userlog( c_ServiceName, "c_mtch_accnt_no :%s:"   ,c_mtch_accnt_no);
  fn_userlog( c_ServiceName, "c_dp_id  				:%s:"   ,c_dp_id);
  fn_userlog( c_ServiceName, "c_dp_clnt_id  	:%s:"   ,c_dp_clnt_id);
  fn_userlog( c_ServiceName, "c_from_dt  			:%s:"   ,c_from_dt);
  fn_userlog( c_ServiceName, "c_to_dt  				:%s:"   ,c_to_dt);
  fn_userlog( c_ServiceName, "c_stck_cd  			:%s:"   ,c_stck_cd);
  fn_userlog( c_ServiceName, "c_plg_typ  			:%c:"   ,c_plg_typ);
  fn_userlog( c_ServiceName, "l_bufferlength  :%ld:"  ,l_bufferlength);


	/**************************** Check Session of User ****************************/

    fn_userlog( c_ServiceName, "Checking Session ");
    strcpy( st_usr_prfl.c_user_id, c_usr_id );
    st_usr_prfl.l_session_id = li_sssn_id;
    strcpy( st_usr_prfl.c_cln_mtch_accnt,c_mtch_accnt_no);
		
    fn_cpy_ddr ( st_usr_prfl.c_rout_crt );			 /*** Added for Order Routing ***/

    i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl, &st_err_msg );

    if ( i_returncode == -1 )
    {
			fn_errlog( c_ServiceName,"S31010",LIBMSG , st_err_msg.c_err_msg  );
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg,0);
    	l_acnt_id = -1;
    	Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
    }
		

	/****************** IF There are Multiple Match A/c **************************/


	if(strcmp(c_mtch_accnt_no,"*") == 0)
	{

		/**************************** Begain Transaction ***************************/



		i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );
  	if ( i_trnsctn == -1 )
  	{
   		fn_errlog( c_ServiceName, "S31015", TPMSG, c_err_msg  );
			Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	l_acnt_id = -1;
    	Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    	tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
  	}	

	
		/******************* Put Match Accounts to FDM table **********************/


    if ( (st_usr_prfl.c_user_id[0] == BPID) )
    {
      fn_userlog(c_ServiceName,"Selecting match accounts linked to the BP user [%s]",
                  st_usr_prfl.c_user_id);
      EXEC SQL
      INSERT  INTO  FDM_DT_MTCH
      SELECT  CLM_MTCH_ACCNT
			FROM 		CLM_CLNT_MSTR
      WHERE   CLM_BP_ID = :st_usr_prfl.c_user_id ;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				l_acnt_id = -1; 
		
				if(SQLCODE == NO_DATA_FOUND)
					l_acnt_id = 1;

    		Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
      }
    }
    else
    {
      EXEC SQL
      INSERT  INTO  FDM_DT_MTCH
      SELECT  UAC_CLM_MTCH_ACCNT
			FROM 		uac_usr_accnts
      WHERE   UAC_USR_ID = :st_usr_prfl.c_user_id ;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				l_acnt_id = -1; 

				if(SQLCODE == NO_DATA_FOUND)
					l_acnt_id = 1;

    		Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
      }
    }		

		/***		Ver. 1.1 : Commit Starts		***
		if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  	{
     	fn_errlog( c_ServiceName, "S31030",TPMSG,c_err_msg);
     	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		 	Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			l_acnt_id = -1;
		 	Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );	
			tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
  	}	
		***    Ver. 1.1 : Commit Ends    ***/
	}
		/******************* Building String For Dynamic Quarry **********************/

		memset(select,0,sizeof(select));
	
		sprintf(select,"\
SELECT PTD_STCK_CD,\n\
PTD_DP_ID,\n\
PTD_DP_CLNT_ID,\n\
PTD_TIFP_QTY,\n\
PTD_PLG_REV_TYP,\n\
NVL(PTD_POD_REF_NO,' '),\n\
DECODE(PTD_PLG_REV_TYP,'P',NVL(PTD_SLIPNO_L1,0),'W',NVL(PTD_SLIPNO_W1,0),\n\
'I',NVL(PTD_SLIPNO_I1,0)),\n\
NVL(PTD_DPM_NMBR,0),\n\
NVL(to_char(PTD_EXCTN_DT,'DD-Mon-YYYY'),' '),\n\
PTD_CLM_MTCH_ACCNT\n\
FROM PTD_TIFP_DTLS " );

    if(strcmp(c_mtch_accnt_no,"*") == 0)
    {
		    memset(from,0,sizeof(from));
        sprintf (from,"\
, FDM_DT_MTCH \n\
WHERE PTD_CLM_MTCH_ACCNT = FDM_CLM_MTCH_ACCNT\n\
AND trunc(PTD_EXCTN_DT) >= to_date('%s','dd-mm-yyyy')\n\
AND trunc(PTD_EXCTN_DT) <= to_date('%s','dd-mm-yyyy')\n", c_from_dt , c_to_dt);
          strcat(select,from); 
    }
    else
    {
			 memset(from,0,sizeof(from));
       sprintf( from,"\nWHERE PTD_CLM_MTCH_ACCNT='%s'\n\
AND trunc(PTD_EXCTN_DT) >= to_date('%s','dd-mm-yyyy')\n\
AnD trunc(PTD_EXCTN_DT) <= to_date('%s','dd-mm-yyyy')\n\
AND PTD_DP_CLNT_ID = '%s'\n\
AND PTD_DP_ID = '%s'\n"
,c_mtch_accnt_no ,c_from_dt , c_to_dt , c_dp_clnt_id , c_dp_id);
        strcat(select,from);  
		
    }

    if(c_plg_typ != 'A') 
    {
			fn_userlog( c_ServiceName, "c Pladge Type is not A");
			memset(where,0,sizeof(where));
      sprintf(where ,"AND PTD_PLG_REV_TYP = '%c'\n", c_plg_typ) ;
      strcat(select,where); 
    }


    if(strcmp(c_stck_cd,"A") != 0 )
    {
			memset(where,0,sizeof(where));
      sprintf( where , "AND   PTD_STCK_CD = '%s'\n ",c_stck_cd);
      strcat(select,where); 
    }

		memset(where,0,sizeof(where));
    strcpy( where ,"AND PTD_TIFP_STTS <> 'J'");
    strcat(select,where); 

		memset(where,0,sizeof(where));
		/** sprintf( where ," ORDER BY PTD_EXCTN_DT DESC \n"); ** Commented for Ver 1.6 **/
		/** sprintf( where ," ORDER BY PTD_TIFP_RUN_DT DESC \n");		** Added by Ver 1.6 **/
    /** strcat(select,where);  *** Ver 1.6 **/

/******* Ver 1.6 Starts ********/

    memset(select_hstry,0,sizeof(select_hstry));

    sprintf(select_hstry,"\
UNION ALL \n\
SELECT PTD_STCK_CD,\n\
PTD_DP_ID,\n\
PTD_DP_CLNT_ID,\n\
PTD_TIFP_QTY,\n\
PTD_PLG_REV_TYP,\n\
NVL(PTD_POD_REF_NO,' '),\n\
DECODE(PTD_PLG_REV_TYP,'P',NVL(PTD_SLIPNO_L1,0),'W',NVL(PTD_SLIPNO_W1,0),\n\
'I',NVL(PTD_SLIPNO_I1,0)),\n\
NVL(PTD_DPM_NMBR,0),\n\
NVL(to_char(PTD_EXCTN_DT,'DD-Mon-YYYY'),' '),\n\
PTD_CLM_MTCH_ACCNT\n\
FROM PTD_TIFP_DTLS_HSTRY" );

    if(strcmp(c_mtch_accnt_no,"*") == 0)
    {
        memset(from_hstry,0,sizeof(from_hstry));
        sprintf (from_hstry,"\
, FDM_DT_MTCH \n\
WHERE PTD_CLM_MTCH_ACCNT = FDM_CLM_MTCH_ACCNT\n\
AND trunc(PTD_EXCTN_DT) >= to_date('%s','dd-mm-yyyy')\n\
AND trunc(PTD_EXCTN_DT) <= to_date('%s','dd-mm-yyyy')\n", c_from_dt , c_to_dt);
          strcat(select_hstry,from_hstry);
    }
    else
    {
       memset(from_hstry,0,sizeof(from_hstry));
       sprintf( from_hstry,"\nWHERE PTD_CLM_MTCH_ACCNT='%s'\n\
AND trunc(PTD_EXCTN_DT) >= to_date('%s','dd-mm-yyyy')\n\
AnD trunc(PTD_EXCTN_DT) <= to_date('%s','dd-mm-yyyy')\n\
AND PTD_DP_CLNT_ID = '%s'\n\
AND PTD_DP_ID = '%s'\n"
,c_mtch_accnt_no ,c_from_dt , c_to_dt , c_dp_clnt_id , c_dp_id);
        strcat(select_hstry,from_hstry);

    }
    if(c_plg_typ != 'A')
    {
      fn_userlog( c_ServiceName, "c Pladge Type is not A");
      memset(where_hstry,0,sizeof(where_hstry));
      sprintf(where_hstry ,"AND PTD_PLG_REV_TYP = '%c'\n", c_plg_typ) ;
      strcat(select_hstry,where_hstry);
    }


    if(strcmp(c_stck_cd,"A") != 0 )
    {
      memset(where_hstry,0,sizeof(where_hstry));
      sprintf( where , "AND   PTD_STCK_CD = '%s'\n ",c_stck_cd);
      strcat(select,where);
    }

    memset(where_hstry,0,sizeof(where_hstry));
    strcpy( where ,"AND PTD_TIFP_STTS <> 'J'");
    strcat(select_hstry,where_hstry);

    memset(where_hstry,0,sizeof(where_hstry));
    sprintf( where_hstry ," ORDER BY 10 DESC \n");
    strcat(select_hstry,where_hstry);
     
    strcat(select,select_hstry);

/******* Ver 1.6 Ends   *******/ 

		EXEC SQL PREPARE PTD FROM :select;

		if ( SQLCODE != 0 )
    {
       fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
       Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       l_acnt_id = -1;
			 if(strcmp(c_mtch_accnt_no,"*") == 0)
			 	 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );				/***	Ver. 1.1 : Added	***/
       Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
    }

		EXEC SQL DECLARE pos_cursor CURSOR FOR PTD;

		if ( SQLCODE != 0 )
    {
       fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg  );
       Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       l_acnt_id = -1;
			 if(strcmp(c_mtch_accnt_no,"*") == 0)
			   fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );       /***  Ver. 1.1 : Added  ***/
       Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
    }

		EXEC SQL OPEN pos_cursor;

		if ( SQLCODE != 0 )
    {
       fn_errlog( c_ServiceName, "S31045", SQLMSG, c_err_msg  );
       Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       l_acnt_id = -1;
			 if(strcmp(c_mtch_accnt_no,"*") == 0)
			   fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );       /***  Ver. 1.1 : Added  ***/
       Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       EXEC SQL CLOSE  pos_cursor;
       tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
    }


  	ptr_fml_obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN * BUF_MULTIPLY );
		if ( ptr_fml_obuf == NULL )
    {
        fn_errlog( c_ServiceName, "S31050", TPMSG, c_err_msg  );
        Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
				if(strcmp(c_mtch_accnt_no,"*") == 0)
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );       /***  Ver. 1.1 : Added  ***/
        Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
    }
	


		i_counter = 1;	
		while(1)
		{
				EXEC SQL FETCH pos_cursor
				INTO	:c_stck_cd,	
							:c_dp_id,
							:c_dp_clnt_id,
              :l_tifp_qty,
							:c_plg_rev_typ,
							:c_ref_no,
							/** :l_slip_no,		** Commented for Ver 1.6 **/
							:d_slip_no,					/** Ver 1.6 **/
							:d_dpm_no,        /** ver 1.4 **/
							:c_ord_dt,
							:clm_mtch_accnt;

				if ( SQLCODE != 0 )
        {
        	if ( SQLCODE == NO_DATA_FOUND )
          {
              EXEC SQL CLOSE pos_cursor;
              break;
          }
          else
          {
						fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg  );
        		Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        		l_acnt_id = -1;
						if(strcmp(c_mtch_accnt_no,"*") == 0)
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );       /***  Ver. 1.1 : Added  ***/
						Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						EXEC SQL CLOSE  pos_cursor;
						tpfree ( ( char * )ptr_fml_obuf);
        		tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
          }
				}		

				/*************** Allocate Memory and add to buffer ************************/

		
				if ( Fneeded32( 1, l_bufferlength ) > Funused32( ptr_fml_obuf ) )
				{
		 				fn_userlog( c_ServiceName, "Reallocating " );
						i_counter++;

						/* Ver 1.3 Starts */
      				/*	ptr_fml_temp = ( FBFR32 *)tprealloc( (char *)ptr_fml_obuf,
                       		 (i_counter * MIN_FML_BUF_LEN * BUF_MULTIPLY)); */
							ptr_fml_temp =  ( FBFR32 *)tprealloc( (char *)ptr_fml_obuf,
															(Fsizeof32(ptr_fml_obuf) + (i_counter * MIN_FML_BUF_LEN )));
							/* Ver 1.3 ends */
      			
		 				fn_userlog( c_ServiceName, "Reallocation done ");
						if ( ptr_fml_temp == NULL )
      			{
        				fn_errlog( c_ServiceName, "S31060", TPMSG, c_err_msg  );
        				EXEC SQL CLOSE	pos_cursor;
								if(strcmp(c_mtch_accnt_no,"*") == 0)
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );       /***  Ver. 1.1 : Added  ***/
        				Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								tpfree ( ( char * )ptr_fml_obuf);
        				tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
      			}
						else
            {
              ptr_fml_obuf = ptr_fml_temp;
							ptr_fml_temp = (FBFR32 *)NULL;
            }		
				}		

						if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.2 : Debug level Change  */
							 fn_userlog( c_ServiceName, "c_ref_no :%s:",c_ref_no);
							 fn_userlog( c_ServiceName, "c_stck_cd :%s:",c_stck_cd);
							 fn_userlog( c_ServiceName, "l_slip_no :%lld:",l_slip_no);		/** Changed type for Ver 1.6 **/
							 fn_userlog( c_ServiceName, "d_slip_no :%lf:",d_slip_no);		/** Changed type for Ver 1.6 **/
				/**    fn_userlog( c_ServiceName, "l_dpm_no :%ld:",l_dpm_no);	  --commented for ver 1.4 **/		
							 fn_userlog( c_ServiceName, "d_dpm_no :%lf:",d_dpm_no);        /** ver 1.4 **/
							 fn_userlog( c_ServiceName, "l_tifp_qty :%ld:",l_tifp_qty);
						}

				/******************** Fill Output Buffer with Output  *********************/


				i_err[0] =	Fadd32( ptr_fml_obuf	,FFO_EBA_MTCH_ACT_NO	,clm_mtch_accnt			,0);
				i_ferr[0] = Ferror32;
				i_err[1] =	Fadd32( ptr_fml_obuf	,FFO_DP_CLNT_ID 			,c_dp_clnt_id				,0);
				i_ferr[1] = Ferror32;
				i_err[2] =	Fadd32( ptr_fml_obuf	,FFO_DPID 						,c_dp_id						,0);
				i_ferr[2] = Ferror32;
				i_err[3] =	Fadd32( ptr_fml_obuf	,FFO_ORD_DT 					,c_ord_dt						,0);
				i_ferr[3] = Ferror32;
				i_err[4] =	Fadd32( ptr_fml_obuf	,FFO_REF_NO 					,c_ref_no						,0);
				i_ferr[4] = Ferror32;
				/** i_err[5] =	Fadd32( ptr_fml_obuf	,FFO_SLIP_NO 					,(char*)&l_slip_no	,0); ** Commented for Ver 1.6 **/
				i_err[5] =	Fadd32( ptr_fml_obuf	,FFO_INDEX 					,(char*)&d_slip_no	,0);			/** Ver 1.6 **/
				i_ferr[5] = Ferror32;
				/** i_err[6] =	Fadd32( ptr_fml_obuf	,FFO_DPM_NO 					,(char*)&l_dpm_no		,0); --commented for ver 1.4 **/
				i_err[6] =  Fadd32( ptr_fml_obuf  ,FFO_JIFFY           ,(char*)&d_dpm_no   ,0);     /** ver 1.4 **/
				i_ferr[6] = Ferror32;
				i_err[7] =	Fadd32( ptr_fml_obuf	,FFO_STCK_CD  				,c_stck_cd					,0);
				i_ferr[7] = Ferror32;
				i_err[8] =	Fadd32( ptr_fml_obuf	,FFO_TIFP_QTY 	 			,(char*)&l_tifp_qty	,0);
				i_ferr[8] = Ferror32;
				i_err[9] =	Fadd32( ptr_fml_obuf	,FFO_PLG_REV_TYP			,(char*)&c_plg_rev_typ,0);
				i_ferr[9] = Ferror32;


				

				for ( i_cnt=0; i_cnt < 10; i_cnt++ )
  			{
    			if ( i_err[ i_cnt ] == -1 )
    			{
      			fn_errlog( c_ServiceName, "S31065", Fstrerror32(i_ferr[i_cnt]), c_err_msg  );
						fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
      			Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      			l_acnt_id = -1;
						if(strcmp(c_mtch_accnt_no,"*") == 0)
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );       /***  Ver. 1.1 : Added  ***/
      			Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						EXEC SQL CLOSE  pos_cursor;
						tpfree ( ( char * )ptr_fml_obuf);	
      			tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
    			}
  			}	

		}/* while Loop */
 
    /***  Ver. 1.1 : Addition Starts  ***/
	  if(strcmp(c_mtch_accnt_no,"*") == 0)
  	{
    	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    	{
      	fn_errlog( c_ServiceName, "S31070",TPMSG,c_err_msg);
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	l_acnt_id = -1;
      	Fadd32( ptr_fml_ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      	tpreturn(TPFAIL, 0L, (char *)ptr_fml_ibuf, 0, 0 );
    	}	/***  Ver. 1.1 : Addition Ends  ***/
		}

		Fprint32(ptr_fml_obuf);

		fn_userlog( c_ServiceName, "ALL DONE ");
		tpreturn( TPSUCCESS, 0, (char *)ptr_fml_obuf, 0 , 0 );
}
