/******************************************************************************/
/*	Program	    			:	SFO_GT_SIMTM                                          */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                      FFO_RQST_TYP                                          */
/*                      FFO_EBA_MTCH_ACT_NO  (optional)                       */
/*                                                                            */
/*  Optional          : FFO_UNDRLYNG                                          */
/*                                                                            */
/*  Output            : FFO_XCHNG_CD                                          */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_CTGRY_INDSTK                                      */
/*                                                                            */
/*  Description       : To get the records for running the Intra day MTM      */
/*                      and pass it on to the Calling batch program           */
/*                                                                            */
/*  Log               :                                                       */
/*                                                                            */
/******************************************************************************/
/*  28-Apr-2011     Ver 1.0       Shailesh Hinge     Release 1.0              */
/*	13-Apr-2012			Ver 1.1				Mahesh Shinde			 BUG FIX									*/
/*  15-May-2013			Ver 1.2       Swati A.B      CR-ISEC03-37658(ATS Migration*/
/*  14-Mar-2013     Ver 1.3       Sachin Birje      Process Negativity Changes*/
/*  01-Aug-2013     Ver 1.4       Sachin Birje      NVL handling for MTM Flag */
/*  10-Sep-2022     Ver 1.5       Sachin Birje    CR-ISEC14-171371 Zero Margin*/
/*                                                Condition to be removed     */
/*  08-Sep-2023     Ver TOL       Shraddha Karande Tux on linux               */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fn_battmpt.h>
#include <fn_tuxlib.h>
#include <fn_log.h>						
#include <fn_read_debug_lvl.h> 
/*replace print_qry to print_qry_simtm in ver TOL*/
void print_qry_simtm(char * str, int i_cnt,char * c_ServiceName);

int fn_prcs_stmt ( char *c_ServiceName,	
                   char *select_stmt,
                   char *c_err_msg);

FBFR32 *ptr_fml_Ibuf;		
FBFR32 *ptr_fml_Obuf;	

void SFO_GT_SIMTM( TPSVCINFO *rqst )
{

  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];

  int i_returncode;
	int	i_ret_val;		
  int *ind_undrlyng;
	int *i_match_acnt;	
  long li_len;

	char	c_und_present='Y';

  EXEC SQL BEGIN DECLARE SECTION;
  	/** varchar select_stmt[500]; **/
  	varchar select_stmt[1500];/** ver 1.5**/
    char c_xchng_cd [ 4 ];
    char c_rqst_typ;
    char c_undrlyng_str [ 200 ];
    char c_match_str [ 200 ];
		char c_fpm_mtch_accnt[11];			

    char sql_mtch_accnt [ 11 ];
    char sql_xchng_cd [ 4 ];
    char sql_indstk;
    char sql_undrlyng [ 7 ];
		char	c_exg_stts;

  EXEC SQL END DECLARE SECTION;

  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);       

	 ptr_fml_Obuf = NULL;		

	MEMSET(c_fpm_mtch_accnt);

  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                    c_err_msg,
                                    ptr_fml_Ibuf,
                                    4,
                                    FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                                    FFO_RQST_TYP, ( char * )&c_rqst_typ, NULL,
                                    FFO_EBA_MTCH_ACT_NO, ( char * )c_match_str,&i_match_acnt,
                                    FFO_UNDRLYNG, ( char * )c_undrlyng_str,&ind_undrlyng
																		);

  if( i_returncode != 0 )
  {
		if ( *ind_undrlyng == -1 )
		{
			c_und_present = 'N';
		}
		else
		{
			if (*i_match_acnt == -1)
			{
				fn_userlog(c_ServiceName,"SPAN called for Report simtm.");
			}
			else
			{
    		fn_errlog( c_ServiceName, "S31005", LIBMSG , c_err_msg );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
			}	
		}
  }


  if( DEBUG_MSG_LVL_3 ) {
		if ( c_und_present == 'Y')
		{
    	fn_userlog( c_ServiceName, "c_undrlyng_str :%c:", c_undrlyng_str );
		}

    fn_userlog( c_ServiceName, "c_xchng_cd :%s:", c_xchng_cd );
    fn_userlog( c_ServiceName, "c_rqst_typ :%c:", c_rqst_typ );
    fn_userlog( c_ServiceName, "c_match_str :%s:", c_match_str );
  }

    fn_userlog( c_ServiceName, "c_xchng_cd :%s:", c_xchng_cd );
    fn_userlog( c_ServiceName, "c_rqst_typ :%c:", c_rqst_typ );
    fn_userlog( c_ServiceName, "c_rqst_typ :%d:", c_rqst_typ );
    fn_userlog( c_ServiceName, "c_match_str :%s:", c_match_str );

	if ( ( c_und_present == 'N' ) && 
			 ( ( c_rqst_typ == MTM_FOR_UNDRLYNG       ) ||
				 ( c_rqst_typ == MTM_FOR_MATCH_UNDRLYNG )   )  )
	{
    fn_userlog( c_ServiceName, "Error occurred :%s:", c_err_msg );
		strcpy(c_err_msg,"Invalid reuest type"); 
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

		if( c_rqst_typ == MTM_ALL_PSTN )
		{
			fn_userlog(c_ServiceName,"Inside MTM_ALL_PSTN ");

			strcpy ((char *)select_stmt.arr,"SELECT FUS_CLM_MTCH_ACCNT,FUS_XCHNG_CD,FUS_INDSTK,FUS_UNDRLYNG FROM FUS_FO_UNDRLYNG_SPN_PSTN WHERE FUS_XCHNG_CD = '");
			strcat((char *)select_stmt.arr, c_xchng_cd);
    	/*strcat((char *)select_stmt.arr,"' AND FUS_UOPNPSTN_QTY != 0 AND FUS_MTM_FLG='M' ORDER BY FUS_UNDRLYNG");*/
       strcat((char *)select_stmt.arr,"' AND (FUS_UOPNPSTN_QTY != 0 OR FUS_INITIAL_MRGN != 0)");  /** Ver 1.1 CUG BUG FIX **/
			strcat((char *)select_stmt.arr,"AND FUS_CLM_MTCH_ACCNT  NOT IN (SELECT MEM_MTCH_ACCNT FROM MEM_MTM_EXPTN_MSTR WHERE  MEM_SEGMENT = 'FNOIM' and SYSDATE BETWEEN MEM_FROM_DT AND MEM_TO_DT )");  /*** Ver 1.2 ***/
   /** 	strcat((char *)select_stmt.arr," AND FUS_MTM_FLG='M' ORDER BY FUS_UNDRLYNG"); commented in ver 1.5 **/
   /** ver 1.5 starts***/
      strcat((char *)select_stmt.arr," AND FUS_MTM_FLG='M' ");
      strcat((char *)select_stmt.arr," UNION SELECT distinct FUS_CLM_MTCH_ACCNT,FUS_XCHNG_CD,FUS_INDSTK,FUS_UNDRLYNG FROM FUS_FO_UNDRLYNG_SPN_PSTN, FCP_FO_SPN_CNTRCT_PSTN WHERE FUS_XCHNG_CD = '");
      strcat((char *)select_stmt.arr,c_xchng_cd);
strcat((char *)select_stmt.arr,"' AND (FUS_UOPNPSTN_QTY = 0 AND FUS_INITIAL_MRGN = 0) AND FCP_CLM_MTCH_ACCNT=FUS_CLM_MTCH_ACCNT AND FCP_XCHNG_CD=FUS_XCHNG_CD AND FCP_UNDRLYNG=FUS_UNDRLYNG AND FCP_OPNPSTN_QTY<>0  AND ( (FCP_PRDCT_TYP='O' AND FCP_OPNPSTN_FLW!='B' ) OR FCP_PRDCT_TYP!='O') AND FUS_CLM_MTCH_ACCNT NOT IN (SELECT MEM_MTCH_ACCNT FROM MEM_MTM_EXPTN_MSTR WHERE  MEM_SEGMENT = 'FNOIM' and SYSDATE BETWEEN MEM_FROM_DT AND MEM_TO_DT ) AND FUS_MTM_FLG='M' ORDER BY FUS_UNDRLYNG");
   /*** ver 1.5 ends ***/
		}
		else if( c_rqst_typ == MTM_FOR_UNDRLYNG )
		{
			fn_userlog(c_ServiceName,"Inside MTM_FOR_UNDRLYNG ");
			strcpy ((char *)select_stmt.arr,"SELECT FUS_CLM_MTCH_ACCNT,FUS_XCHNG_CD,FUS_INDSTK,FUS_UNDRLYNG FROM FUS_FO_UNDRLYNG_SPN_PSTN WHERE FUS_XCHNG_CD = '");
			strcat((char *)select_stmt.arr,c_xchng_cd);
			/*strcat((char *)select_stmt.arr,"'AND FUS_UOPNPSTN_QTY != 0 AND FUS_UNDRLYNG in (");*/
strcat((char *)select_stmt.arr,"' AND (FUS_UOPNPSTN_QTY != 0 OR FUS_INITIAL_MRGN != 0)");  /** Ver 1.1CUG BUG FIX **/
      strcat((char *)select_stmt.arr,"AND FUS_CLM_MTCH_ACCNT  NOT IN (SELECT MEM_MTCH_ACCNT FROM MEM_MTM_EXPTN_MSTR WHERE  MEM_SEGMENT = 'FNOIM' and SYSDATE BETWEEN MEM_FROM_DT AND MEM_TO_DT )");  /*** Ver 1.2 ***/
	strcat((char *)select_stmt.arr," AND FUS_UNDRLYNG in (");
    	strcat((char *)select_stmt.arr, c_undrlyng_str);
    	strcat((char *)select_stmt.arr, ")");
    /**	strcat((char *)select_stmt.arr, " AND FUS_MTM_FLG='M' ORDER BY FUS_UNDRLYNG"); commented in ver 1.5 ***/
     /*** ver 1.5 starts ***/
      strcat((char *)select_stmt.arr, " AND FUS_MTM_FLG='M' ");
      strcat((char *)select_stmt.arr," UNION SELECT distinct FUS_CLM_MTCH_ACCNT,FUS_XCHNG_CD,FUS_INDSTK,FUS_UNDRLYNG FROM FUS_FO_UNDRLYNG_SPN_PSTN, FCP_FO_SPN_CNTRCT_PSTN WHERE FUS_XCHNG_CD = '");
      strcat((char *)select_stmt.arr,c_xchng_cd);
      strcat((char *)select_stmt.arr,"' AND (FUS_UOPNPSTN_QTY = 0 AND FUS_INITIAL_MRGN = 0) AND FCP_CLM_MTCH_ACCNT=FUS_CLM_MTCH_ACCNT AND FCP_XCHNG_CD=FUS_XCHNG_CD AND FCP_UNDRLYNG=FUS_UNDRLYNG AND FCP_OPNPSTN_QTY<>0  AND ( (FCP_PRDCT_TYP='O' AND FCP_OPNPSTN_FLW!='B' ) OR FCP_PRDCT_TYP!='O') AND FUS_CLM_MTCH_ACCNT NOT IN (SELECT MEM_MTCH_ACCNT FROM MEM_MTM_EXPTN_MSTR WHERE  MEM_SEGMENT = 'FNOIM' and SYSDATE BETWEEN MEM_FROM_DT AND MEM_TO_DT ) AND FUS_MTM_FLG='M' ORDER BY FUS_UNDRLYNG");
   /*** ver 1.5 ends ***/
		}
		else if( c_rqst_typ == MTM_FOR_MATCH_ALL_UNDRLYNG )
		{
			fn_userlog(c_ServiceName,"Inside MTM_FOR_MATCH_ALL_UNDRLYNG ");
			strcpy ((char *)select_stmt.arr,"SELECT FUS_CLM_MTCH_ACCNT,FUS_XCHNG_CD,FUS_INDSTK,FUS_UNDRLYNG FROM FUS_FO_UNDRLYNG_SPN_PSTN WHERE FUS_XCHNG_CD = '");
			strcat((char *)select_stmt.arr, c_xchng_cd);
	      strcat((char *)select_stmt.arr,"' AND (FUS_UOPNPSTN_QTY != 0 OR FUS_INITIAL_MRGN != 0)");  /** Ver 1.1CUG BUG FIX **/
				strcat((char *)select_stmt.arr,"AND FUS_CLM_MTCH_ACCNT  NOT IN (SELECT MEM_MTCH_ACCNT FROM MEM_MTM_EXPTN_MSTR WHERE  MEM_SEGMENT = 'FNOIM' and SYSDATE BETWEEN MEM_FROM_DT AND MEM_TO_DT )");  /*** Ver 1.2 ***/
		/*strcat((char *)select_stmt.arr,"' AND FUS_UOPNPSTN_QTY != 0 AND FUS_CLM_MTCH_ACCNT NOT in (");*/
			strcat((char *)select_stmt.arr," AND FUS_CLM_MTCH_ACCNT NOT in (");
    	strcat((char *)select_stmt.arr, c_match_str);
    	strcat((char *)select_stmt.arr, ")");
    	/** strcat((char *)select_stmt.arr, " AND FUS_MTM_FLG='M' ORDER BY FUS_UNDRLYNG"); commented in ver 1.5 **/
     /*** ver 1.5 starts ***/
      strcat((char *)select_stmt.arr, " AND FUS_MTM_FLG='M'");
      strcat((char *)select_stmt.arr," UNION SELECT distinct FUS_CLM_MTCH_ACCNT,FUS_XCHNG_CD,FUS_INDSTK,FUS_UNDRLYNG FROM FUS_FO_UNDRLYNG_SPN_PSTN, FCP_FO_SPN_CNTRCT_PSTN WHERE FUS_XCHNG_CD = '");
      strcat((char *)select_stmt.arr,c_xchng_cd);
      strcat((char *)select_stmt.arr,"' AND (FUS_UOPNPSTN_QTY = 0 AND FUS_INITIAL_MRGN = 0) AND FCP_CLM_MTCH_ACCNT=FUS_CLM_MTCH_ACCNT AND FCP_XCHNG_CD=FUS_XCHNG_CD AND FCP_UNDRLYNG=FUS_UNDRLYNG AND FCP_OPNPSTN_QTY<>0  AND ( (FCP_PRDCT_TYP='O' AND FCP_OPNPSTN_FLW!='B' ) OR FCP_PRDCT_TYP!='O') AND FUS_CLM_MTCH_ACCNT NOT IN (SELECT MEM_MTCH_ACCNT FROM MEM_MTM_EXPTN_MSTR WHERE  MEM_SEGMENT = 'FNOIM' and SYSDATE BETWEEN MEM_FROM_DT AND MEM_TO_DT ) AND FUS_MTM_FLG='M' ORDER BY FUS_UNDRLYNG");
   /*** ver 1.5 ends ***/
		}
		else if( c_rqst_typ == MTM_FOR_MATCH_UNDRLYNG )
		{
			fn_userlog(c_ServiceName,"Inside MTM_FOR_MATCH_UNDRLYNG ");

			strcpy ((char *)select_stmt.arr,"SELECT FUS_CLM_MTCH_ACCNT,FUS_XCHNG_CD,FUS_INDSTK,FUS_UNDRLYNG FROM FUS_FO_UNDRLYNG_SPN_PSTN WHERE FUS_XCHNG_CD = '");
			strcat((char *)select_stmt.arr,c_xchng_cd);
	      strcat((char *)select_stmt.arr,"' AND (FUS_UOPNPSTN_QTY != 0 OR FUS_INITIAL_MRGN != 0)");  /** Ver 1.1CUG BUG FIX **/
				strcat((char *)select_stmt.arr,"AND FUS_CLM_MTCH_ACCNT  NOT IN (SELECT MEM_MTCH_ACCNT FROM MEM_MTM_EXPTN_MSTR WHERE  MEM_SEGMENT = 'FNOIM' and SYSDATE BETWEEN MEM_FROM_DT AND MEM_TO_DT )");  /*** Ver 1.2 ***/
		/*strcat((char *)select_stmt.arr,"' AND FUS_UOPNPSTN_QTY != 0 AND FUS_UNDRLYNG in (");*/
			strcat((char *)select_stmt.arr," AND FUS_UNDRLYNG in (");
    	strcat((char *)select_stmt.arr, c_undrlyng_str);
    	strcat((char *)select_stmt.arr, ") AND FUS_CLM_MTCH_ACCNT NOT in (");
    	strcat((char *)select_stmt.arr, c_match_str);
    	strcat((char *)select_stmt.arr, ")");
    /**	strcat((char *)select_stmt.arr, "  AND FUS_MTM_FLG='M' ORDER BY FUS_UNDRLYNG"); commented in ver 1.5 **/
    /** ver 1.5 starts **/
      strcat((char *)select_stmt.arr, "  AND FUS_MTM_FLG='M' ");
      strcat((char *)select_stmt.arr," UNION SELECT distinct FUS_CLM_MTCH_ACCNT,FUS_XCHNG_CD,FUS_INDSTK,FUS_UNDRLYNG FROM FUS_FO_UNDRLYNG_SPN_PSTN, FCP_FO_SPN_CNTRCT_PSTN WHERE FUS_XCHNG_CD = '");
      strcat((char *)select_stmt.arr,c_xchng_cd);
 strcat((char *)select_stmt.arr,"' AND (FUS_UOPNPSTN_QTY = 0 AND FUS_INITIAL_MRGN = 0) AND FCP_CLM_MTCH_ACCNT=FUS_CLM_MTCH_ACCNT AND FCP_XCHNG_CD=FUS_XCHNG_CD AND FCP_UNDRLYNG=FUS_UNDRLYNG AND FCP_OPNPSTN_QTY<>0  AND ( (FCP_PRDCT_TYP='O' AND FCP_OPNPSTN_FLW!='B' ) OR FCP_PRDCT_TYP!='O') AND FUS_CLM_MTCH_ACCNT NOT IN (SELECT MEM_MTCH_ACCNT FROM MEM_MTM_EXPTN_MSTR WHERE  MEM_SEGMENT = 'FNOIM' and SYSDATE BETWEEN MEM_FROM_DT AND MEM_TO_DT ) AND FUS_MTM_FLG='M' ORDER BY FUS_UNDRLYNG");
   /*** ver 1.5 ends ***/
		}
		else if( c_rqst_typ == MARK_ALL_PSTN )
		{
			fn_userlog(c_ServiceName,"Inside MARK_ALL_PSTN");

			strcpy ((char *)select_stmt.arr,"SELECT FUS_CLM_MTCH_ACCNT,FUS_XCHNG_CD,FUS_INDSTK,FUS_UNDRLYNG FROM FUS_FO_UNDRLYNG_SPN_PSTN WHERE FUS_XCHNG_CD = '");
			strcat((char *)select_stmt.arr, c_xchng_cd);
       strcat((char *)select_stmt.arr,"' AND (FUS_UOPNPSTN_QTY != 0 OR FUS_INITIAL_MRGN != 0)");  /**Ver 1.1 CUG BUG FIX **/ 
       strcat((char *)select_stmt.arr," AND nvl(FUS_MTM_FLG,'O') != 'L' ");    /*** Ver 1.3 ** Ver 1.4 ***/
       /** Ver 1.5 Starts Here ***/
       strcat((char *)select_stmt.arr, " UNION ");
       strcat((char *)select_stmt.arr, "SELECT FCP_CLM_MTCH_ACCNT,FCP_XCHNG_CD,FCP_INDSTK,FCP_UNDRLYNG FROM FCP_FO_SPN_CNTRCT_PSTN WHERE FCP_OPNPSTN_QTY<>0 AND FCP_XCHNG_CD = '");
      strcat((char *)select_stmt.arr, c_xchng_cd);
       strcat((char *)select_stmt.arr, "' AND ( (FCP_PRDCT_TYP='O' AND FCP_OPNPSTN_FLW!='B' ) OR FCP_PRDCT_TYP!='O') ");
       /**** Ver 1.5 Ends Here ***/
  	strcat((char *)select_stmt.arr," ORDER BY FUS_UNDRLYNG");
		}
		else if( c_rqst_typ == MARK_FOR_UNDRLYNG )
		{
			fn_userlog(c_ServiceName,"Inside MARK_FOR_UNDRLYNG");
			strcpy ((char *)select_stmt.arr,"SELECT FUS_CLM_MTCH_ACCNT,FUS_XCHNG_CD,FUS_INDSTK,FUS_UNDRLYNG FROM FUS_FO_UNDRLYNG_SPN_PSTN WHERE FUS_XCHNG_CD = '");
			strcat((char *)select_stmt.arr,c_xchng_cd);
			strcat((char *)select_stmt.arr,"' AND FUS_UNDRLYNG in (");
    	strcat((char *)select_stmt.arr, c_undrlyng_str);
    	strcat((char *)select_stmt.arr, ")");
       strcat((char *)select_stmt.arr," AND (FUS_UOPNPSTN_QTY != 0 OR FUS_INITIAL_MRGN != 0)");  /**Ver 1.1 CUG BUG FIX **/
      strcat((char *)select_stmt.arr," AND nvl(FUS_MTM_FLG,'O') != 'L' ");    /*** Ver 1.3 ** Ver 1.4 ***/ 
      /**** Ver 1.5 starts Here ***/
      strcat((char *)select_stmt.arr, " UNION ");
      strcat((char *)select_stmt.arr, "SELECT FCP_CLM_MTCH_ACCNT,FCP_XCHNG_CD,FCP_INDSTK,FCP_UNDRLYNG FROM FCP_FO_SPN_CNTRCT_PSTN WHERE FCP_OPNPSTN_QTY<>0 AND FCP_XCHNG_CD = '");
      strcat((char *)select_stmt.arr, c_xchng_cd);
      strcat((char *)select_stmt.arr, "' AND FCP_UNDRLYNG in(");
      strcat((char *)select_stmt.arr, c_undrlyng_str);
      strcat((char *)select_stmt.arr, ")");
      strcat((char *)select_stmt.arr," AND ( (FCP_PRDCT_TYP='O' AND FCP_OPNPSTN_FLW!='B' ) OR FCP_PRDCT_TYP !='O') ");
      /**** Ver 1.5 ends Here ***/
  	strcat((char *)select_stmt.arr, " ORDER BY FUS_UNDRLYNG");
		}

  select_stmt.len = strlen((char *)select_stmt.arr);
	li_len = select_stmt.len;
	fn_userlog(c_ServiceName,"Length |%ld|",li_len);

  print_qry_simtm((char*)select_stmt.arr,li_len,c_ServiceName);

  EXEC SQL PREPARE sql_stmt FROM :select_stmt;
  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  ptr_fml_Obuf = NULL;

  EXEC SQL DECLARE cur_dyn CURSOR FOR sql_stmt;

  EXEC SQL OPEN cur_dyn ;
  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg );
    tpfree ( ( char * ) ptr_fml_Obuf );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

 	for (;;)
  {
    EXEC SQL FETCH cur_dyn
             INTO :sql_mtch_accnt,
                  :sql_xchng_cd,
                  :sql_indstk,
                  :sql_undrlyng;

    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        break;
      }
      fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg );
      tpfree ( ( char * ) ptr_fml_Obuf );
      EXEC SQL CLOSE cur_dyn;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    i_returncode = fn_pack_vartofml( c_ServiceName,
                                     c_err_msg,
                                     &ptr_fml_Obuf,
                                     4,
                                 FFO_EBA_MTCH_ACT_NO, ( char * )sql_mtch_accnt,
                                 FFO_XCHNG_CD, ( char * )sql_xchng_cd,
                                 FFO_CTGRY_INDSTK, ( char * )&sql_indstk,
                                 FFO_UNDRLYNG, ( char * )sql_undrlyng
																	);

    if( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg );
      EXEC SQL CLOSE cur_dyn;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
    EXEC SQL CLOSE cur_dyn;
  tpreturn(TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
}

void print_qry_simtm(char * str, int i_cnt,char * c_ServiceName)
{
  int idx;
  char c_tmp_str1[100];

  MEMSET(c_tmp_str1);

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Printing query");
  }

  for (idx = 0;idx < i_cnt; idx += 60)
  {
    strncpy(c_tmp_str1,str + idx,60);

    if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog(c_ServiceName,"%s",c_tmp_str1);
    }
  }

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Finished printing query");
  }
}
