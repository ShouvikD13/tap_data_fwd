/**************************************************************************************
Service       : sfo_us_dtls

Purpose       : To get the details of contract notes for user verification  

Input Param   :
										FFO_EBA_MTCH_ACT_NO - Match no
										FFO_NARRATION_ID		- Cntrt no /E/A conf nt
										FFO_PRDCT_TYP 	- 'F' or 'E'

Output        :  FOR 'FNO' 
									FFO_IP_VIEW_NM - Client name 
									FFO_INDX_CD Address ln 1
									FFO_UNDRLYNG Address ln 2
									FFO_UND_PRC_TM Address ln 3
									FFO_OP_VIEW_NM - Address ln 4
									FFO_OI_INDCTR - Tel no 
									FFO_BOARD_LOT_QTY - PAN no 
									FFO_EBA_MTCH_ACT_NO	- Match no
									FFO_NARRATION_ID	- Contract no
									FFO_RCRD_DT - Contract date 
									FFO_SPRD_ORD_REF - Order reference 
									FFO_TRD_DT	- Trade date 
									FFO_LST_TRD_QTY - Quantity 
									FFO_CLS_PRC - Price
									FFO_BST_BID_PRC - Total Brokerage value 
									FFO_MTCH_CNTCT_KEY - Service tax
									FFO_BAL_AMT - Amount 
									FFO_SYMBOL - Contract specifications 
									(INFOSYSTCH-FUTSTK-26SEP2002-PA3200)
									FFO_TOTAL_PL - Amount 
									FFO_TRD_FLW	- Buy/Sell
									FFO_CTCL_ID - ucc code

								FOR 'EA'
									FFO_IP_VIEW_NM - Client name 
									FFO_INDX_CD Address ln 1
									FFO_UNDRLYNG Address ln 2
									FFO_UND_PRC_TM Address ln 3
									FFO_OP_VIEW_NM - Address ln 4
									FFO_OI_INDCTR - Tel no 
									FFO_BOARD_LOT_QTY - PAN no 
									FFO_EBA_MTCH_ACT_NO	- Match no
									FFO_NARRATION_ID	- E/A note 
									FFO_RCRD_DT - E/A  date 
									FFO_ORDR_RFRNC-  Call /Put 
									FFO_TRD_DT - Expiry date 
									FFO_LST_TRD_QTY - Quantity 
									FFO_CLS_PRC - Sttlmnt Price
									FFO_BST_BID_PRC - Total Brokerage 
									FFO_MTCH_CNTCT_KEY - Service tax
									FFO_BAL_AMT - Amount 
									FFO_SYMBOL - Contract code 
									FFO_TOTAL_PL - Amount Payable
									FFO_TRD_FLW- E or A flag 
									FFO_STRIKE_PRC - Strike Price 


Tables        : FNO_CNTRCT_MSTR			 S
								FNO_CNTRCT_DTLS			 S
								EA_CONF_MSTR				 S
								EA_CONF_DTLS				 S

Author        : ICICI Infotech

Date          : 
								1.1 STT changes by SN for sending stt as well as data for Annexure III
                1.2 Changes by Firoz as per CR-1610
								1.3 UCC FML Change by Payal
								1.4	EA cntrct date added by Payal
								1.5 Changes for NNF808 by Vidyayini Krish
								1.6 Changes for IBM by Vidyayini Krish
								1.7	STT changes for EXERCISE by Shamili on 28-May-2008
								1.8	SN changes for array initialization 
								1.9 10g  order by clause in selection	Shamili on 03-Jun-2008	
							  2.0 Display of additional charges on contract notes Shamili 
								2.1 Bug fixing  Shamili
************************************************************************************/

/* Standard include files */
#include <stdio.h>
#include <stdlib.h>
# include <atmi.h>
# include <fml32.h>
# include <string.h>
# include <sqlca.h>
# define REC_LENGTH 3250			/* Ver 1.8 */

/*  User defined header files   */

#include <fn_log.h>
#include <fo.h>
#include <fo_view_def.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fo_fml_def.h>
#include <eba_to_ors.h> /* Ver 1.5 */
#include <fn_read_debug_lvl.h> /* Ver 1.6 */

char 	c_ServiceName[33] ;
char 	code[20] ;
char 	c_string[100];


/*#define CURSOR_OUTPUT_FML 13 **Ver 1.1 replaces 9 by 10 *** * ver 1.6 10 to 13 */
#define CURSOR_OUTPUT_FML 17	/**Ver 2.0**/
#define UNIQUE_OUTPUT_FML 10	/*Ver 1.8 */

void SFO_US_DTLS(TPSVCINFO* rqst)
{
	/*	Local variables		*/

	int   i;                            /*    Loop counter */
	int   j;                            /*    Loop counter */
	int   arr_otpt[UNIQUE_OUTPUT_FML+1] ;    /*  Error code array for FML's  */
	int   cur_otpt[CURSOR_OUTPUT_FML+1] ;    /*  Error code array for FML's	 */ 
	char  c_user_id[9],match_accnt_no[12],trd_ref[16];
	char  c_oper_type;
	char  c_src_tx[10];
	
	 /*** Ver 2.0 **/
	EXEC SQL BEGIN DECLARE SECTION; 
	varchar  c_ecm_add_ln1[100 + 1];
  varchar  c_ecm_add_ln2[100 + 1];
  varchar  c_ecm_add_ln3[100 + 1];
  varchar  c_ecm_add_ln4[100 + 1];
	EXEC SQL END DECLARE SECTION; 

  /*** Ver 2.0 ends **/
		
	long  li_session_id ;
	long  l_tm_val=0;   /*Ver 2.0*/
		
	char temp_ord[LEN_XCHNG_ACK]; /* Ver 1.5 changed from 16 to 17 */
	char temp_trd[16];
	long  l_space_avl;
	long  l_space_rqd;
	long  l_bufferlength;
	FBFR32  *ptr_ffo_temp_buffer;

	double 	d_fut_value;	/*** Ver 1.1 ***/
	double 	d_opt_value;	/*** Ver 1.1 ***/
	double	d_fut_stt;		/*** Ver 1.1 ***/
	double	d_opt_stt;		/*** Ver 1.1 ***/
	double  d_exer_stt;		/*** Ver 1.7 ***/
	double  d_exer_value; /*** Ver 1.7 ***/

	EXEC SQL INCLUDE "table/fno_cntrct_mstr.h";
	EXEC SQL INCLUDE "table/fno_cntrct_dtls.h";
	EXEC SQL INCLUDE "table/ea_conf_mstr.h";
	EXEC SQL INCLUDE "table/ea_conf_dtls.h";

/*   Tuxedo specific variables */

	FBFR32      *ptr_ffo_Ibuffer ;      /*   Input Buffer */
	FBFR32      *ptr_ffo_Obuffer ;      /*   Output Buffer */
	char        c_errmsg[256] ;

	strcpy(c_ServiceName,rqst->name) ;
	INITDBGLVL(c_ServiceName);

/*		Initializations */

	ptr_ffo_Ibuffer = (FBFR32*)rqst->data ;
	ptr_ffo_Obuffer = (FBFR32*)NULL ;


	if(Fget32(ptr_ffo_Ibuffer,FFO_USR_ID,0,(char*)c_user_id,0) == -1)
	{
		fn_errlog(c_ServiceName,"S31005",FMLMSG,c_errmsg) ;
		Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
		tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
	}

	if(DEBUG_MSG_LVL_3){
		fn_userlog(c_ServiceName,"User id :<%s> ",c_user_id) ;
	}

	if(Fget32(ptr_ffo_Ibuffer,FFO_SSSN_ID,0,(char*)&li_session_id,0) == -1)
	{
		fn_errlog(c_ServiceName,"S31010",FMLMSG,c_errmsg) ;
		Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
		tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
	}

	if(DEBUG_MSG_LVL_3){
		fn_userlog(c_ServiceName,"Session id :<%ld>",li_session_id);
	} 


	if(Fget32(ptr_ffo_Ibuffer,FFO_EBA_MTCH_ACT_NO,0,(char*)sql_fcm_usr_mtch_accno.arr,0) == -1)
	{
		fn_errlog(c_ServiceName,"S31015",FMLMSG,c_errmsg) ;
		Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
		tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
	}
	SETLEN(sql_fcm_usr_mtch_accno);

	if(DEBUG_MSG_LVL_3){
		fn_userlog(c_ServiceName,"Match Accnt No :<%s>",sql_fcm_usr_mtch_accno.arr);
	}

	if(Fget32(ptr_ffo_Ibuffer,FFO_NARRATION_ID,0,(char*)sql_fcm_cntrct_nmbr.arr,0) == -1)
	{
		fn_errlog(c_ServiceName,"S31020",FMLMSG,c_errmsg) ;
		Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
		tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
	}
	SETLEN(sql_fcm_cntrct_nmbr);

	if(DEBUG_MSG_LVL_3){
		fn_userlog(c_ServiceName,"Cntrct No :<%s>",sql_fcm_cntrct_nmbr.arr);
	}

	if(Fget32(ptr_ffo_Ibuffer,FFO_PRDCT_TYP,0,(char*)&c_oper_type,0) == -1)
	{
		fn_errlog(c_ServiceName,"S31025",FMLMSG,c_errmsg) ;
		Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
		tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
	}

	if(DEBUG_MSG_LVL_3){
		fn_userlog(c_ServiceName,"Oper Type :<%c>",c_oper_type);
	}
			
	l_space_rqd = Fneeded32(1,REC_LENGTH);

	/** Allocate memory for output buffer **/
		
	if((ptr_ffo_Obuffer=(FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN * 3))==NULL)
	{
		fn_errlog(c_ServiceName,"S31030",TPMSG,c_errmsg) ;
		Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
		tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
	}

	/*	Selecting data from FNO_CNTRCT_MSTR */

	/* Ver 1.8 */

	MEMSET(arr_otpt);
	MEMSET(cur_otpt);

	/* Ver 1.8 ends */

	if(c_oper_type == 'F')
	{
		EXEC SQL 
		SELECT 
				nvl(FCM_USR_NM,' '),
				nvl(FCM_ADD_LN1,' '),
				nvl(FCM_ADD_LN2,' '),
				nvl(FCM_ADD_LN3,' '),
				nvl(FCM_ADD_LN4,' '),
				NVL(FCM_PAN_NO,' '),
				NVL(FCM_TEL_NO,' '),
				FCM_CNTRCT_DT,
				nvl(FCM_CNTRCT_FLG,'N'),   /*** Ver 1.1 ***/
        nvl (FCM_UCC_CD,' ')      /***** 1.2 ***/
		INTO
				:sql_fcm_usr_nm,
				:sql_fcm_add_ln1,
				:sql_fcm_add_ln2,
				:sql_fcm_add_ln3,
				:sql_fcm_add_ln4,
				:sql_fcm_pan_no,
				:sql_fcm_tel_no,
				:sql_fcm_cntrct_dt,
				:sql_fcm_cntrct_flg,
        :sql_fcm_ucc_cd          /**** 1.2 ***/
		FROM FNO_CNTRCT_MSTR
		WHERE FCM_USR_MTCH_ACCNO=:sql_fcm_usr_mtch_accno
		AND FCM_CNTRCT_NMBR=:sql_fcm_cntrct_nmbr
		AND FCM_SIGN IS NOT NULL;

		if(SQLCODE == NO_DATA_FOUND)
		{
			fn_errlog(c_ServiceName,"S31035",SQLMSG,c_errmsg) ;
			Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,"signed contract note not available",0);
			tpfree((char*)ptr_ffo_Obuffer) ;
			tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		}
		else if (SQLCODE)
		{
			fn_errlog(c_ServiceName,"S31040",SQLMSG,c_errmsg) ;
			Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,"signed contract note not available",0);
			tpfree((char*)ptr_ffo_Obuffer) ;
			tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		}

		SETNULL(sql_fcm_usr_nm);
		SETNULL(sql_fcm_add_ln1);
		SETNULL(sql_fcm_add_ln2);
		SETNULL(sql_fcm_add_ln3);
		SETNULL(sql_fcm_add_ln4);
		SETNULL(sql_fcm_pan_no);
		SETNULL(sql_fcm_tel_no);
		SETNULL(sql_fcm_cntrct_dt);
    SETNULL(sql_fcm_ucc_cd); /** 1.2 **/

		if(DEBUG_MSG_LVL_3){
			fn_userlog(c_ServiceName,"Data for Contract note <%s>",sql_fcm_cntrct_nmbr.arr);
			fn_userlog(c_ServiceName,"Contract date	<%s>",sql_fcm_cntrct_dt.arr);
		} 

/** Populate the output buffer with the unique values **/
		fn_userlog(c_ServiceName,"111");
		arr_otpt[0] = Fadd32(ptr_ffo_Obuffer,FFO_IP_VIEW_NM,(char*)sql_fcm_usr_nm.arr,0);
		fn_userlog(c_ServiceName,"112");
		arr_otpt[1] = Fadd32(ptr_ffo_Obuffer,FFO_INDX_CD,(char*)sql_fcm_add_ln1.arr,0);
		fn_userlog(c_ServiceName,"113");
		arr_otpt[2] = Fadd32(ptr_ffo_Obuffer,FFO_UNDRLYNG,(char*)sql_fcm_add_ln2.arr,0);
		fn_userlog(c_ServiceName,"114");
		arr_otpt[3] = Fadd32(ptr_ffo_Obuffer,FFO_UND_PRC_TM,(char*)sql_fcm_add_ln3.arr,0);
		arr_otpt[4] = Fadd32(ptr_ffo_Obuffer,FFO_OP_VIEW_NM,(char*)sql_fcm_add_ln4.arr,0);
		fn_userlog(c_ServiceName,"115");
		arr_otpt[5] = Fadd32(ptr_ffo_Obuffer,FFO_SERIES,(char*)sql_fcm_pan_no.arr,0);
		fn_userlog(c_ServiceName,"116");
		arr_otpt[6] = Fadd32(ptr_ffo_Obuffer,FFO_OI_INDCTR,(char*)sql_fcm_tel_no.arr,0);
		fn_userlog(c_ServiceName,"117");
		arr_otpt[7] = Fadd32(ptr_ffo_Obuffer,FFO_RCRD_DT,(char*)sql_fcm_cntrct_dt.arr,0);
		fn_userlog(c_ServiceName,"118");
		arr_otpt[8] = Fadd32(ptr_ffo_Obuffer,FFO_BILL_NO,(char*)&sql_fcm_cntrct_flg,0); /*** Ver 1.1 ***/

/******* commented in ver 1.3 
    arr_otpt[8] = Fadd32(ptr_ffo_Obuffer,FFO_ERR_CD,(char*)sql_fcm_ucc_cd.arr,0);    1.2   
******** 1.3 end */							

		fn_userlog(c_ServiceName,"119");
	 arr_otpt[9] = Fadd32(ptr_ffo_Obuffer,FFO_CTCL_ID,(char*)sql_fcm_ucc_cd.arr,0);    /* 1.3 */

	/* 1.2	for(i=0;i < UNIQUE_OUTPUT_FML;i++) */

		for(i=0;i < UNIQUE_OUTPUT_FML+1;i++) 
    {
			fn_userlog(c_ServiceName,"Values of i <%d>",i);

			if(arr_otpt[i]==-1)
			{
				fn_userlog(c_ServiceName,"Error Values of i <%d>",i);
				fn_errlog(c_ServiceName,"S31045",FMLMSG,c_errmsg);
				Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
				tpfree((char*)ptr_ffo_Obuffer) ;
				tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
			}
		}

		if(DEBUG_MSG_LVL_3){
			fn_userlog(c_ServiceName,"before declaring cursor <%s>,<%s>",sql_fcm_usr_mtch_accno.arr,sql_fcm_cntrct_nmbr.arr);
		} /* ver 1.6 removed ; */
			
		EXEC SQL 
			DECLARE get_fno_det CURSOR for
			SELECT 	nvl (to_char(FCD_ORDR_REF),' '),
							to_char(FCD_TRD_REF),
		 					to_char(FCD_TRD_DT,'HH24:MI:SS'),
		 					FCD_TRD_FLW,
		 					FCD_PRC,
		 					FCD_QTY,
		 					FCD_BRKG,
		 					to_char(FCD_SRC_TX),
							FCD_STT,							/*** Ver 1.1 ***/
		 					FCD_STRK_PRC,
		 					FCD_CNTRCT_AMT,
							FCD_CNTRCT_SPECS,
              nvl (to_char(FCD_ORD_DT_TM,'dd-mm-yyyy hh24:mi:ss'),'NA'), /*1.2*/
              nvl(FCD_AMT_INSTT,0),   /* 1.2 */
              nvl(FCD_TOTAL,0),
							nvl(FCD_STAMP_DUTY,0),					/** Ver 2.0 **/
							nvl(FCD_SEBI_TT,0),	  					/** Ver 2.0 **/
							nvl(FCD_TRAN_CHRG,0),  					/** Ver 2.0 **/
							nvl(FCD_OTHER_CHRG,0) 					/** Ver 2.0 **/
			FROM FNO_CNTRCT_DTLS
			WHERE FCD_CNTRCT_NMBR=:sql_fcm_cntrct_nmbr
			ORDER BY FCD_ORDR_REF,FCD_TRD_FLW,FCD_TRD_REF,FCD_BRKG;								/**1.9**/
			/*ORDER BY FCD_ORDR_REF,FCD_TRD_FLW;*/								               	/**1.9**/

		if(SQLCODE)
		{
			fn_errlog(c_ServiceName,"S31050",SQLMSG,c_errmsg) ;
			Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
			tpfree((char*)ptr_ffo_Obuffer) ;
			tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		}

		/* Open the cursor */

		EXEC SQL
			OPEN get_fno_det;
			
		if(SQLCODE)
		{
			fn_errlog(c_ServiceName,"S31055",SQLMSG,c_errmsg) ;
			Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
			tpfree((char*)ptr_ffo_Obuffer) ;
			tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		}
		j=0;
		while(1)
		{
			EXEC SQL 	
					FETCH get_fno_det 
					INTO :temp_ord,
							 :temp_trd,
							 :sql_fcd_trd_dt,
							 :sql_fcd_trd_flw,
							 :sql_fcd_prc,
							 :sql_fcd_qty,
							 :sql_fcd_brkg,
							 :c_src_tx,
							 :sql_fcd_stt,					/*** Ver 1.1 ***/
							 :sql_fcd_strk_prc,
							 :sql_fcd_cntrct_amt,
							 :sql_fcd_cntrct_specs,
               :sql_fcd_ord_dt_tm,
               :sql_fcd_amt_instt,
               :sql_fcd_total,
							 :sql_fcd_stamp_duty,			/** Ver 2.0 **/
							 :sql_fcd_sebi_tt,				/** Ver 2.0 **/
							 :sql_fcd_tran_chrg,			/** Ver 2.0 **/
							 :sql_fcd_other_chrg;			/** Ver 2.0 **/
			
			if((SQLCODE==NO_DATA_FOUND)&&(j==0))
			{
				EXEC SQL
					CLOSE get_fno_det;
				fn_errlog(c_ServiceName,"S31060",SQLMSG,c_errmsg);
				Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,"matching data not found",0) ;
				tpfree((char*)ptr_ffo_Obuffer) ;
				tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
			}
			else if(SQLCODE==NO_DATA_FOUND)
			{
				EXEC SQL
				CLOSE get_fno_det;
				break;
			}
			else if(SQLCODE)
			{
				EXEC SQL
					CLOSE get_fno_det;
				fn_errlog(c_ServiceName,"S31065",SQLMSG,c_errmsg);
				Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
				tpfree((char*)ptr_ffo_Obuffer) ;
				tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
			}
			SETNULL(sql_fcd_trd_dt);
			SETNULL(sql_fcd_cntrct_specs);
      SETNULL(sql_fcd_ord_dt_tm);  /* 1.2 */
		

			l_space_avl = Funused32(ptr_ffo_Obuffer);

			if (l_space_avl < l_space_rqd)
			{
				fn_userlog(c_ServiceName,"Inside space unavailable ");
					/* Reallocate a output buffer */

				/*l_bufferlength = Fsizeof32(ptr_ffo_Obuffer) + MIN_FML_BUF_LEN * 10;*/	 /** Ver 2.1 **/
				l_bufferlength = Fsizeof32(ptr_ffo_Obuffer) + MIN_FML_BUF_LEN * 100;		 /** Ver 2.1 **/
				ptr_ffo_temp_buffer=(FBFR32 *)tprealloc((char *)ptr_ffo_Obuffer,l_bufferlength);

				if (ptr_ffo_temp_buffer == NULL)
				{
					fn_errlog(c_ServiceName,"S31070",FMLMSG,c_errmsg);
					Fadd32( ptr_ffo_Ibuffer,FFO_ERR_MSG, c_errmsg, 0 );
					tpfree((char *)ptr_ffo_Obuffer);
					tpreturn(TPFAIL,0L, (char *)ptr_ffo_Ibuffer, 0L, 0);
				}
				else
				{
					fn_userlog(c_ServiceName,"Inside else space unavailable ");
					ptr_ffo_Obuffer = ptr_ffo_temp_buffer;
				/*	Finit32(ptr_ffo_temp_buffer, Fsizeof32(ptr_ffo_temp_buffer)); MG*//* Ver 1.6 */
				}
			}
			fn_userlog(c_ServiceName,"temp_ord <%s>",temp_ord);
			fn_userlog(c_ServiceName,"temp_trd <%s>",temp_trd);
			fn_userlog(c_ServiceName,"sql_fcd_prc <%lf>",sql_fcd_prc);
			fn_userlog(c_ServiceName,"sql_fcd_brkg <%lf>",sql_fcd_brkg);
			fn_userlog(c_ServiceName,"sql_fcd_stt <%lf>",sql_fcd_stt);
		
			/** Ver 2.0 ***/
			fn_userlog(c_ServiceName,"sql_fcd_stamp_duty <%lf>",sql_fcd_stamp_duty);
			fn_userlog(c_ServiceName,"sql_fcd_sebi_tt <%lf>",sql_fcd_sebi_tt);
			fn_userlog(c_ServiceName,"sql_fcd_tran_chrg <%lf>",sql_fcd_tran_chrg);
			fn_userlog(c_ServiceName,"sql_fcd_other_chrg <%lf>",sql_fcd_other_chrg);
			/** Ver 2.0 **/
      
      /** 1.2 **/
      fn_userlog(c_ServiceName,"sql_fcd_amt_instt <%lf>",sql_fcd_amt_instt);
			fn_userlog(c_ServiceName,"sql_fcd_ord_dt_tm <%s>",sql_fcd_ord_dt_tm.arr);
      /** 1.2 **/

			cur_otpt[0]=Fadd32(ptr_ffo_Obuffer,FFO_SPRD_ORD_REF,(char*)temp_ord,0);
			cur_otpt[1]=Fadd32(ptr_ffo_Obuffer,FFO_TRD_RFRNC,(char*)temp_trd,0);
			cur_otpt[2]=Fadd32(ptr_ffo_Obuffer,FFO_TRD_DT,(char*)sql_fcd_trd_dt.arr,0);
			cur_otpt[3]=Fadd32(ptr_ffo_Obuffer,FFO_LST_TRD_QTY,(char*)&sql_fcd_qty,0);
			cur_otpt[4]=Fadd32(ptr_ffo_Obuffer,FFO_CLS_PRC,(char*)&sql_fcd_prc,0);
			cur_otpt[5]=Fadd32(ptr_ffo_Obuffer,FFO_BST_BID_PRC,(char*)&sql_fcd_brkg,0);
			cur_otpt[6]=Fadd32(ptr_ffo_Obuffer,FFO_MTCH_CNTCT_KEY,(char*)c_src_tx,0);
			cur_otpt[7]=Fadd32(ptr_ffo_Obuffer,FFO_BAL_AMT,(char*)&sql_fcd_cntrct_amt,0);
			cur_otpt[8]=Fadd32(ptr_ffo_Obuffer,FFO_TRD_FLW,(char*)&sql_fcd_trd_flw,0);
			cur_otpt[9]=Fadd32(ptr_ffo_Obuffer,FFO_SYMBOL,(char*)sql_fcd_cntrct_specs.arr,0);
			cur_otpt[10]=Fadd32(ptr_ffo_Obuffer,FFO_LIMIT,(char*)&sql_fcd_stt,0); /*** Ver 1.1 ***/

      /*** 1.2 ***/
      cur_otpt[11]=Fadd32(ptr_ffo_Obuffer,FFO_ORD_DT,(char*)sql_fcd_ord_dt_tm.arr,0);
			cur_otpt[12]=Fadd32(ptr_ffo_Obuffer,FFO_INIT_MRGN_PRCNT,(char*)&sql_fcd_amt_instt,0); 
      cur_otpt[13]=Fadd32(ptr_ffo_Obuffer,FFO_OLD_EFF_RT,(char*)&sql_fcd_total,0); 
			/*** 1.2 ***/

			cur_otpt[14]=Fadd32(ptr_ffo_Obuffer,FFO_CHNG_OI,(char*)&sql_fcd_stamp_duty,0); /*** Ver 2.0 ***/
			cur_otpt[15]=Fadd32(ptr_ffo_Obuffer,FFO_CRNT_OI,(char*)&sql_fcd_sebi_tt,0); 		/*** Ver 2.0 ***/
			cur_otpt[16]=Fadd32(ptr_ffo_Obuffer,FFO_MKT_CPTLTN,(char*)&sql_fcd_tran_chrg,0); /*** Ver 2.0 ***/
			cur_otpt[17]=Fadd32(ptr_ffo_Obuffer,FFO_EFF_LTP,(char*)&sql_fcd_other_chrg,0); /*** Ver 2.0 ***/


/* 1.2      for(i=0;i <= CURSOR_OUTPUT_FML;i++) */
			/*for(i=0;i <= CURSOR_OUTPUT_FML+3;i++)*/									/*ver 2.0*/
			for(i=0;i <= CURSOR_OUTPUT_FML;i++)
      {
				if(cur_otpt[i]==-1)
				{
					fn_errlog(c_ServiceName,"S31075",FMLMSG,c_errmsg);
					Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
					tpfree((char*)ptr_ffo_Obuffer) ;
					tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
				}
			}
			j++;

		}/*End of while */
		EXEC SQL
			CLOSE get_fno_det;

		if(SQLCODE)
		{
			fn_errlog(c_ServiceName,"S31080",SQLMSG,c_errmsg) ;
			Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
			tpfree((char*)ptr_ffo_Obuffer) ;
			tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		}


		/*** Ver 1.1 ***/

		EXEC SQL
				 DECLARE get_stt_det CURSOR for
					SELECT FCD_CNTRCT_SPECS,
								 FCD_EXPR_DT,
								 sum(decode(rtrim(FCD_CNTRCT_OPTN_TYP),'F',FCD_PRC*FCD_QTY,0)),
								 sum(decode(rtrim(FCD_CNTRCT_OPTN_TYP),'F',0,FCD_PRC*FCD_QTY)),
								 sum(decode(rtrim(FCD_CNTRCT_OPTN_TYP),'F',FCD_STT,0)),
								 sum(decode(rtrim(FCD_CNTRCT_OPTN_TYP),'F',0,FCD_STT))
  				FROM FNO_CNTRCT_DTLS
  				WHERE FCD_CNTRCT_NMBR=:sql_fcm_cntrct_nmbr
					AND   FCD_TRD_FLW='S'
  				GROUP BY FCD_CNTRCT_SPECS,FCD_EXPR_DT;

		if(SQLCODE)
		{
  		fn_errlog(c_ServiceName,"S31085",SQLMSG,c_errmsg) ;
  		Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
  		tpfree((char*)ptr_ffo_Obuffer) ;
  		tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		}

		/* Open the cursor */

		EXEC SQL
  			 OPEN get_stt_det;

		if(SQLCODE)
		{
  		fn_errlog(c_ServiceName,"S31090",SQLMSG,c_errmsg) ;
  		Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
  		tpfree((char*)ptr_ffo_Obuffer) ;
  		tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		}
		j=0;
		while(1)
		{
  		EXEC SQL
      		FETCH get_stt_det
      		INTO :sql_fcd_cntrct_specs,
							 :sql_fcd_expr_dt,
							 :d_fut_value,
							 :d_opt_value,
							 :d_fut_stt,
							 :d_opt_stt;

  		if((SQLCODE==NO_DATA_FOUND)&&(j==0))
  		{
    		EXEC SQL
      		CLOSE get_stt_det;
				tpreturn(TPSUCCESS,0,(char *)ptr_ffo_Obuffer,0L,0) ;
  		}
			else if(SQLCODE==NO_DATA_FOUND)
			{
  			EXEC SQL
  			CLOSE get_stt_det;
  			break;
			}
			else if(SQLCODE)
			{
  			EXEC SQL
    			CLOSE get_stt_det;
  			fn_errlog(c_ServiceName,"S31095",SQLMSG,c_errmsg);
  			Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
  			tpfree((char*)ptr_ffo_Obuffer) ;
  			tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
			}
			SETNULL(sql_fcd_expr_dt);								/** Ver 2.0 **/
			SETNULL(sql_fcd_trd_dt);
			SETNULL(sql_fcd_cntrct_specs);

			l_space_avl = Funused32(ptr_ffo_Obuffer);
			if (l_space_avl < l_space_rqd)
			{
    		/* Reallocate a output buffer */

  				l_bufferlength = Fsizeof32(ptr_ffo_Obuffer) + MIN_FML_BUF_LEN * 10;
  				ptr_ffo_temp_buffer=(FBFR32 *)tprealloc((char *)ptr_ffo_Obuffer,l_bufferlength);

  				if (ptr_ffo_temp_buffer == NULL)
  				{
    				fn_errlog(c_ServiceName,"S31100",FMLMSG,c_errmsg);
    				Fadd32( ptr_ffo_Ibuffer,FFO_ERR_MSG, c_errmsg, 0 );
    				tpfree((char *)ptr_ffo_Obuffer);
    				tpreturn(TPFAIL,0L, (char *)ptr_ffo_Ibuffer, 0L, 0);
  				}
  				else
  				{
    				ptr_ffo_Obuffer = ptr_ffo_temp_buffer;
    	/*			Finit32(ptr_ffo_temp_buffer, Fsizeof32(ptr_ffo_temp_buffer)); *MG*//* Ver 1.6 */
  				}
			}

			fn_userlog(c_ServiceName,"sql_fcd_cntrct_specs <%s>",sql_fcd_cntrct_specs.arr);
			fn_userlog(c_ServiceName,"sql_fcd_expr_dt <%s>",sql_fcd_expr_dt.arr);
			fn_userlog(c_ServiceName,"FUT Value <%lf>",d_fut_value);
			fn_userlog(c_ServiceName,"FUT STT <%lf>",d_fut_stt);
			fn_userlog(c_ServiceName,"OPT Value  <%lf>",d_opt_value);
			fn_userlog(c_ServiceName,"OPT STT  <%lf>",d_opt_stt);

			strcpy(c_string,(char *)sql_fcd_cntrct_specs.arr);
			strcat(c_string,",");
			strcat(c_string,(char *)sql_fcd_expr_dt.arr);

			fn_userlog(c_ServiceName,"c_string  <%s>",c_string);

			cur_otpt[0]=Fadd32(ptr_ffo_Obuffer,FFO_FRWD_TM,(char*)c_string,0);
			cur_otpt[1]=Fadd32(ptr_ffo_Obuffer,FFO_JIFFY,(char*)&d_fut_value,0);
			cur_otpt[2]=Fadd32(ptr_ffo_Obuffer,FFO_MIN_MRGN_PRCNT,(char*)&d_fut_stt,0);
			cur_otpt[3]=Fadd32(ptr_ffo_Obuffer,FFO_OI_HIGH,(char*)&d_opt_value,0);
			cur_otpt[4]=Fadd32(ptr_ffo_Obuffer,FFO_OI_LOW,(char*)&d_opt_stt,0);
	
			for(i=0;i <= CURSOR_OUTPUT_FML;i++)
   		{
     		if(cur_otpt[i]==-1)
     		{
       		fn_errlog(c_ServiceName,"S31105",FMLMSG,c_errmsg);
       		Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
       		tpfree((char*)ptr_ffo_Obuffer) ;
       		tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
     		}
   		}
   		j++;

		}/*** End of while ***/

		EXEC SQL
  			 CLOSE get_stt_det;

		if(SQLCODE)
		{
  		fn_errlog(c_ServiceName,"S31110",SQLMSG,c_errmsg) ;
  		Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
  		tpfree((char*)ptr_ffo_Obuffer) ;
  		tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		}

		/*** End of 1.1 ***/


	}/*** End of F ***/
	else if (c_oper_type =='E')
	{

		MEMSET(c_ecm_add_ln1);   /* Ver 2.0 */
    MEMSET(c_ecm_add_ln2);   /* Ver 2.0 */
    MEMSET(c_ecm_add_ln3);   /* Ver 2.0 */
    MEMSET(c_ecm_add_ln4);   /* Ver 2.0 */

		EXEC SQL 
		SELECT nvl(ECM_USR_NM,' '),
					 nvl(ECM_ADD_LN1,' '),
					 nvl(ECM_ADD_LN2,' '),
					 nvl(ECM_ADD_LN3,' '),
					 nvl(ECM_ADD_LN4,' '),
					 nvl(ECM_PAN_NO,' '),
					 nvl(ECM_TEL_NO,' '),
					 ECM_CNTRCT_DT,					/* 1.4 */	
					 ECM_TOTAL_AMOUNT
		INTO 	:sql_ecm_usr_nm,
					/*************** Commented in 2.0
					:sql_ecm_add_ln1,
					:sql_ecm_add_ln2,
					:sql_ecm_add_ln3,
					:sql_ecm_add_ln4,
					******************/
          :c_ecm_add_ln1,           /* 2.0 */
          :c_ecm_add_ln2,           /* 2.0 */
          :c_ecm_add_ln3,           /* 2.0 */
          :c_ecm_add_ln4,           /* 2.0 */
					:sql_ecm_pan_no,
					:sql_ecm_tel_no,
					:sql_ecm_cntrct_dt,				/* 1.4 */
					:sql_ecm_total_amount
		FROM EA_CONF_MSTR
		WHERE ECM_USR_MTCH_ACCNO=:sql_fcm_usr_mtch_accno
		AND ECM_CNTRCT_NMBR=:sql_fcm_cntrct_nmbr
		AND ECM_SIGN IS NOT NULL;
		
		if(SQLCODE == NO_DATA_FOUND)
		{
			fn_errlog(c_ServiceName,"S31115",SQLMSG,c_errmsg) ;
			Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,"signed contract note not available",0);
			tpfree((char*)ptr_ffo_Obuffer) ;
			tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		}
		else if ((SQLCODE !=0 ) && (SQLCODE != NO_DATA_FOUND ))				/** Ver 2.1**/
		{
			fn_errlog(c_ServiceName,"S31120",SQLMSG,c_errmsg) ;
			Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,"signed contract note not available",0);
			tpfree((char*)ptr_ffo_Obuffer) ;
			tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		}
		SETNULL(sql_ecm_usr_nm);
		/************ Commented in 2.0****
		SETNULL(sql_ecm_add_ln1);
		SETNULL(sql_ecm_add_ln2);
		SETNULL(sql_ecm_add_ln3);
		SETNULL(sql_ecm_add_ln4);
		*******************************/
		SETNULL(c_ecm_add_ln1);   /*2.0*/
		SETNULL(c_ecm_add_ln2);		/*2.0*/
		SETNULL(c_ecm_add_ln3);		/*2.0*/
		SETNULL(c_ecm_add_ln4);		/*2.0*/

		SETNULL(sql_ecm_pan_no);
		SETNULL(sql_ecm_tel_no);
		SETNULL(sql_ecm_cntrct_dt);			/* 1.4 */

		if(DEBUG_MSG_LVL_3){
				fn_userlog(c_ServiceName,"Data for Contract note <%s>",sql_fcm_cntrct_nmbr.arr);
		}

		/********* Ver 2.0 Starts ****************/

		/******* After 15-Sep-2008,taking country details from ICIS **********/
		
		EXEC SQL
		SELECT 1 into :l_tm_val
		FROM dual 
		WHERE to_date(:sql_ecm_cntrct_dt,'dd-Mon-yyyy') >= '15-Sep-2008';	

		/*if (SQLCODE)*/
		if ((SQLCODE !=0 ) && (SQLCODE != NO_DATA_FOUND )) /*Ver 2.1**/
    {
      fn_errlog(c_ServiceName,"S31125",SQLMSG,c_errmsg) ;
      Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,"signed contract note not available",0);
      tpfree((char*)ptr_ffo_Obuffer) ;
      tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
    }
		else if (SQLCODE == NO_DATA_FOUND)		
		{
			l_tm_val=0;
			fn_userlog(c_ServiceName," INSDIDE NO DATA  ");
		}
		
		if(l_tm_val == 1)
		{
			fn_userlog(c_ServiceName,"Taking Address details from ICIS ");
			MEMSET(c_ecm_add_ln1);  
			MEMSET(c_ecm_add_ln2); 
			MEMSET(c_ecm_add_ln3);
			MEMSET(c_ecm_add_ln4); 

			EXEC SQL
			SELECT IAD_ADDRESS_1   || ' ' || IAD_ADDRESS_2, 
						 IAD_ADDRESS_3 || ' ' || IAD_ADDRESS_4,   
						 IAD_CITY_CD   || ' ' || IAD_PIN,        
						 IAD_STATE_CD  || ' ' || IAD_COUNTRY_CD   
			INTO  :c_ecm_add_ln1,
						:c_ecm_add_ln2,
						:c_ecm_add_ln3,
						:c_ecm_add_ln4
			FROM IAD_INFO_ADDRESS_DTLS, IAI_INFO_ACCOUNT_INFO      
			WHERE IAI_MATCH_ACCOUNT_NO=:sql_fcm_usr_mtch_accno
			AND IAI_SERIAL_NO         = IAD_SERIAL_NO       
			AND IAD_ADDRESS_TYPE      = 'APPLICANT_CORR';    

			if(SQLCODE == NO_DATA_FOUND)
			{
				fn_errlog(c_ServiceName,"S31130",SQLMSG,c_errmsg) ;
				Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,"signed contract note details not available",0);
				tpfree((char*)ptr_ffo_Obuffer) ;
				tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
			}
			else if ((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))	/** Ver 2.1 ***/
			{
				fn_errlog(c_ServiceName,"S31135",SQLMSG,c_errmsg) ;
				Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,"signed contract note details not available",0);
				tpfree((char*)ptr_ffo_Obuffer) ;
				tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
			}

			SETNULL(c_ecm_add_ln1);
			SETNULL(c_ecm_add_ln2);   
			SETNULL(c_ecm_add_ln3);  
			SETNULL(c_ecm_add_ln4); 
		
		}		

	/********** Ver 2.0 Ends *********/
			

		/*	Populate  output buffer */

		arr_otpt[0] = Fadd32(ptr_ffo_Obuffer,FFO_IP_VIEW_NM,(char*)sql_ecm_usr_nm.arr,0);
		 /*************************  Commented in Ver 2.0 ******************************
		arr_otpt[1] = Fadd32(ptr_ffo_Obuffer,FFO_INDX_CD,(char*)sql_ecm_add_ln1.arr,0);
		arr_otpt[2] = Fadd32(ptr_ffo_Obuffer,FFO_UNDRLYNG,(char*)sql_ecm_add_ln2.arr,0);
		arr_otpt[3] = Fadd32(ptr_ffo_Obuffer,FFO_UND_PRC_TM,(char*)sql_ecm_add_ln3.arr,0);
		arr_otpt[4] = Fadd32(ptr_ffo_Obuffer,FFO_OP_VIEW_NM,(char*)sql_ecm_add_ln4.arr,0);
		*******************************************************************************/
		arr_otpt[1] = Fadd32(ptr_ffo_Obuffer,FFO_INDX_CD,(char*)c_ecm_add_ln1.arr,0);   /* 2.0 */
    arr_otpt[2] = Fadd32(ptr_ffo_Obuffer,FFO_UNDRLYNG,(char*)c_ecm_add_ln2.arr,0);  /* 2.0 */
    arr_otpt[3] = Fadd32(ptr_ffo_Obuffer,FFO_UND_PRC_TM,(char*)c_ecm_add_ln3.arr,0);/* 2.0 */
    arr_otpt[4] = Fadd32(ptr_ffo_Obuffer,FFO_OP_VIEW_NM,(char*)c_ecm_add_ln4.arr,0);/* 2.0 */
		arr_otpt[5] = Fadd32(ptr_ffo_Obuffer,FFO_SERIES,(char*)sql_ecm_pan_no.arr,0);
		arr_otpt[6] = Fadd32(ptr_ffo_Obuffer,FFO_OI_INDCTR,(char*)sql_ecm_tel_no.arr,0);
		arr_otpt[7] = Fadd32(ptr_ffo_Obuffer,FFO_TOTAL_PL,(char*)&sql_ecm_total_amount,0);
		arr_otpt[8] = Fadd32(ptr_ffo_Obuffer,FFO_RCRD_DT,(char*)sql_ecm_cntrct_dt.arr,0);		/* 1.4 */
		

		for(i=0;i < UNIQUE_OUTPUT_FML;i++)
		{
		fn_userlog(c_ServiceName,"SD111");	
			if(arr_otpt[i]==-1)
			{
				fn_userlog(c_ServiceName,"SD222");
				fn_errlog(c_ServiceName,"S31140",FMLMSG,c_errmsg);
				Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
				tpfree((char*)ptr_ffo_Obuffer) ;
				tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
			}
		}
		if(DEBUG_MSG_LVL_3){
			fn_userlog(c_ServiceName,"before declaring EA cursor <%s>,<%s>",sql_fcm_usr_mtch_accno.arr,sql_fcm_cntrct_nmbr.arr);
		} /* ver 1.6 removed ; */
		EXEC SQL
			DECLARE get_ea_det CURSOR for
			SELECT substr(ECD_CNTRCT_SPECS,instr(ECD_CNTRCT_SPECS,'-',1,2)+1,9),
						 ECD_QTY,
						 ECD_BRKG,
						 to_char(ECD_SRC_TX),
					   nvl(ECD_STT,0),              /*** Ver 1.7 ***  **2.1 nvl**/ 	
						 ECD_STRK_PRC,
						 ECD_EA_FLG,
						 ECD_SETLMNT_PRC,
						 ECD_EXPR_DT,
						 ECD_CNTRCT_AMT,
						 ECD_CNTRCT_OPTN_TYP,
						 ECD_CNTRCT_INST_TYP,
						 ECD_CNTRCT_SYMBL,
						 nvl(ECD_STAMP_DUTY,0),	  		/** Ver 2.0 **/ 
						 nvl(ECD_SEBI_TT,0),					/** Ver 2.0 **/
						 nvl(ECD_TRAN_CHRG,0),				/** Ver 2.0 **/
						 nvl(ECD_OTHER_CHRG,0)				 /** Ver 2.0 **/
			FROM EA_CONF_DTLS
			WHERE ECD_CNTRCT_NMBR=:sql_fcm_cntrct_nmbr
			ORDER BY ECD_CNTRCT_OPTN_TYP;

		/*if(SQLCODE != 0)		**Ver 2.1**/
		if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)		/**Ver 2.1**/
		{
			fn_errlog(c_ServiceName,"S31145",SQLMSG,c_errmsg);
			Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0);
			tpfree((char*)ptr_ffo_Obuffer);
			tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0);
		}

		/*Open the cursor */

		EXEC SQL
			OPEN get_ea_det;

		if(SQLCODE != 0)			/**Ver 2.1**/
		{
			fn_errlog(c_ServiceName,"S31150",SQLMSG,c_errmsg) ;
			Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
			tpfree((char*)ptr_ffo_Obuffer) ;
			tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		}
		j=0;
		while(1)
		{
			EXEC SQL
				FETCH get_ea_det
				INTO :sql_ecd_ea_dt,
						 :sql_ecd_qty,
						 :sql_ecd_brkg,
						 :c_src_tx,
						 :sql_ecd_stt,          /*** Ver 1.7 ***/
						 :sql_ecd_strk_prc,
						 :sql_ecd_ea_flg,
						 :sql_ecd_setlmnt_prc,
						 :sql_ecd_expr_dt,
						 :sql_ecd_cntrct_amt,
						 :sql_ecd_cntrct_optn_typ,
						 :sql_ecd_cntrct_inst_typ,
						 :sql_ecd_cntrct_symbl,
						 :sql_ecd_stamp_duty,						/** Ver 2.0**/
						 :sql_ecd_sebi_tt,							/** Ver 2.0**/
						 :sql_ecd_tran_chrg,						/** Ver 2.0**/
						 :sql_ecd_other_chrg;						/** Ver 2.0**/

			if((SQLCODE==NO_DATA_FOUND)&&(j==0))
			{
				EXEC SQL
					CLOSE get_ea_det;
				fn_errlog(c_ServiceName,"S31155",SQLMSG,c_errmsg);
				Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,"matching data not found",0) ;
				tpfree((char*)ptr_ffo_Obuffer) ;
				tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
			}
			else if(SQLCODE==NO_DATA_FOUND)
			{
				EXEC SQL
				CLOSE get_ea_det;
				break;
			}
			else if(SQLCODE != 0)
			{
				EXEC SQL
				/*CLOSE get_fno_det;*/							/**Ver 2.1**/
				CLOSE get_ea_det;
				fn_errlog(c_ServiceName,"S31160",SQLMSG,c_errmsg);
				Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
				tpfree((char*)ptr_ffo_Obuffer) ;
				tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
			}
			SETNULL(sql_ecd_ea_dt);
			SETNULL(sql_ecd_expr_dt);
			SETNULL(sql_ecd_cntrct_optn_typ);
			SETNULL(sql_ecd_cntrct_inst_typ);
			SETNULL(sql_ecd_cntrct_symbl);

			strcpy(code,"");
			strcpy(code,(char *)sql_ecd_cntrct_symbl.arr);
			strcat(code,"-");
			strcat(code,(char *)sql_ecd_cntrct_inst_typ.arr);

			l_space_avl = Funused32(ptr_ffo_Obuffer);

			if (l_space_avl < l_space_rqd)
			{
				/* Reallocate a output buffer */

				l_bufferlength = Fsizeof32(ptr_ffo_Obuffer) + MIN_FML_BUF_LEN * 10;
				ptr_ffo_temp_buffer=(FBFR32 *)tprealloc((char *)ptr_ffo_Obuffer,l_bufferlength);
				if (ptr_ffo_temp_buffer == NULL)
				{
					fn_errlog(c_ServiceName,"S31165",FMLMSG,c_errmsg);
					Fadd32( ptr_ffo_Ibuffer,FFO_ERR_MSG, c_errmsg, 0 );
					tpfree((char *)ptr_ffo_Obuffer);
					tpreturn(TPFAIL,0L, (char *)ptr_ffo_Ibuffer, 0L, 0);
				}
				else
				{
					ptr_ffo_Obuffer = ptr_ffo_temp_buffer;
			/*		Finit32(ptr_ffo_temp_buffer, Fsizeof32(ptr_ffo_temp_buffer)); *MG*//* Ver 1.6 */
				}
			}

			cur_otpt[0]=Fadd32(ptr_ffo_Obuffer,FFO_ORDR_RFRNC,(char*)sql_ecd_cntrct_optn_typ.arr,0);
			cur_otpt[1]=Fadd32(ptr_ffo_Obuffer,FFO_TRD_DT,(char*)sql_ecd_ea_dt.arr,0);
			cur_otpt[2]=Fadd32(ptr_ffo_Obuffer,FFO_LST_TRD_QTY,(char*)&sql_ecd_qty,0);
			cur_otpt[3]=Fadd32(ptr_ffo_Obuffer,FFO_CLS_PRC,(char*)&sql_ecd_setlmnt_prc,0);
			cur_otpt[4]=Fadd32(ptr_ffo_Obuffer,FFO_BST_BID_PRC,(char*)&sql_ecd_brkg,0);
			cur_otpt[5]=Fadd32(ptr_ffo_Obuffer,FFO_MTCH_CNTCT_KEY,(char*)c_src_tx,0);
			cur_otpt[6]=Fadd32(ptr_ffo_Obuffer,FFO_BAL_AMT,(char*)&sql_ecd_cntrct_amt,0);
			cur_otpt[7]=Fadd32(ptr_ffo_Obuffer,FFO_TRD_FLW,(char*)&sql_ecd_ea_flg,0);
			cur_otpt[8]=Fadd32(ptr_ffo_Obuffer,FFO_STRIKE_PRC,(char*)&sql_ecd_strk_prc,0);
			cur_otpt[9]=Fadd32(ptr_ffo_Obuffer,FFO_SYMBOL,(char *)code,0);
			cur_otpt[10]=Fadd32(ptr_ffo_Obuffer,FFO_LIMIT,(char*)&sql_ecd_stt,0); /*** Ver 1.7 ***/
			cur_otpt[11]=Fadd32(ptr_ffo_Obuffer,FFO_CHNG_OI,(char*)&sql_ecd_stamp_duty,0); 		  /*** Ver 2.0 ***/
			cur_otpt[12]=Fadd32(ptr_ffo_Obuffer,FFO_CRNT_OI,(char*)&sql_ecd_sebi_tt,0); 				/*** Ver 2.0 ***/
			cur_otpt[13]=Fadd32(ptr_ffo_Obuffer,FFO_MKT_CPTLTN,(char*)&sql_ecd_tran_chrg,0); 		/*** Ver 2.0 ***/
			cur_otpt[14]=Fadd32(ptr_ffo_Obuffer,FFO_EFF_LTP,(char*)&sql_ecd_other_chrg,0); 		  /*** Ver 2.0 ***/

			for(i=0;i <= CURSOR_OUTPUT_FML;i++)
			{
				if(cur_otpt[i]==-1)
				{
					fn_errlog(c_ServiceName,"S31170",FMLMSG,c_errmsg);
					Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
					tpfree((char*)ptr_ffo_Obuffer) ;
					tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
				}
			}
			j++;
		}/*End of while */
		EXEC SQL
			CLOSE get_ea_det;

		if(SQLCODE)
		{
			fn_errlog(c_ServiceName,"S31175",SQLMSG,c_errmsg) ;
			Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
			tpfree((char*)ptr_ffo_Obuffer) ;
			tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		}

		/******* Ver 1.7 **********/ 

		if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName," STEP 1") ;
      fn_userlog(c_ServiceName," ntrct NMBR :%s:" ,sql_fcm_cntrct_nmbr.arr);
    }

		EXEC SQL
		DECLARE get_estt_det CURSOR for
		SELECT ECD_CNTRCT_SPECS,
           ECD_EXPR_DT,
					 sum(ECD_SETLMNT_PRC*ECD_QTY),
					 sum(ECD_STT)
	 FROM EA_CONF_DTLS				
	 WHERE ECD_CNTRCT_NMBR=:sql_fcm_cntrct_nmbr
	 AND ECD_EA_FLG ='E'
	 /*	 AND substr(ECD_CNTRCT_OPTN_TYP,1,1) ='P' */
	 GROUP BY ECD_CNTRCT_SPECS,ECD_EXPR_DT; 
		
	 if(SQLCODE)
    {
      fn_errlog(c_ServiceName,"S31180",SQLMSG,c_errmsg) ;
      Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
      tpfree((char*)ptr_ffo_Obuffer) ;
      tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
    }

    /* Open the cursor */
		if(DEBUG_MSG_LVL_3)
		{
		  fn_userlog(c_ServiceName," STEP 2") ;
		}

    EXEC SQL
         OPEN get_estt_det;

		if(SQLCODE)
    {
      fn_errlog(c_ServiceName,"S31185",SQLMSG,c_errmsg) ;
      Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
      tpfree((char*)ptr_ffo_Obuffer) ;
      tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
    }
    j=0;
		if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName," STEP 3") ;
    }

    while(1)
    {
      EXEC SQL
          FETCH get_estt_det
          INTO :sql_ecd_cntrct_specs,
               :sql_ecd_expr_dt,
							 :d_exer_value,
							 :d_exer_stt;

		 if((SQLCODE==NO_DATA_FOUND)&&(j==0))
      {
				      fn_userlog(c_ServiceName," STEP 4") ;
        EXEC SQL
          CLOSE get_estt_det;
        tpreturn(TPSUCCESS,0,(char *)ptr_ffo_Obuffer,0L,0) ;
      }
      else if(SQLCODE==NO_DATA_FOUND)
      {
        EXEC SQL
        CLOSE get_estt_det;
        break;
      }
      else if(SQLCODE)
      {
        EXEC SQL
          CLOSE get_estt_det;
				      fn_userlog(c_ServiceName," STEP 5") ;
        fn_errlog(c_ServiceName,"S31190",SQLMSG,c_errmsg);
        Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
        tpfree((char*)ptr_ffo_Obuffer) ;
        tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
      }
      SETNULL(sql_ecd_cntrct_specs);

			l_space_avl = Funused32(ptr_ffo_Obuffer);
      if (l_space_avl < l_space_rqd)
      {
        /* Reallocate a output buffer */

          l_bufferlength = Fsizeof32(ptr_ffo_Obuffer) + MIN_FML_BUF_LEN * 10;
          ptr_ffo_temp_buffer=(FBFR32 *)tprealloc((char *)ptr_ffo_Obuffer,l_bufferlength);

          if (ptr_ffo_temp_buffer == NULL)
          {
            fn_errlog(c_ServiceName,"S31195",FMLMSG,c_errmsg);
            Fadd32( ptr_ffo_Ibuffer,FFO_ERR_MSG, c_errmsg, 0 );
            tpfree((char *)ptr_ffo_Obuffer);
            tpreturn(TPFAIL,0L, (char *)ptr_ffo_Ibuffer, 0L, 0);
          }
          else
          {
            ptr_ffo_Obuffer = ptr_ffo_temp_buffer;
         /*   Finit32(ptr_ffo_temp_buffer, Fsizeof32(ptr_ffo_temp_buffer)); *//* Ver 1.6 */
          }
      }

				      fn_userlog(c_ServiceName," STEP 6") ;
			if(DEBUG_MSG_LVL_3){
			fn_userlog(c_ServiceName,"sql_ecd_cntrct_specs <%s>",sql_ecd_cntrct_specs.arr);
      fn_userlog(c_ServiceName,"sql_ecd_expr_dt <%s>",sql_ecd_expr_dt.arr);
      fn_userlog(c_ServiceName,"Exer Value <%lf>",d_exer_value);
      fn_userlog(c_ServiceName,"Exercise STT <%lf>",d_exer_stt);
			}

			strcpy(c_string,(char *)sql_ecd_cntrct_specs.arr);
      strcat(c_string,",");
      strcat(c_string,(char *)sql_ecd_expr_dt.arr);

			 if(DEBUG_MSG_LVL_3){
      fn_userlog(c_ServiceName,"c_string  <%s>",c_string);
			}

			cur_otpt[0]=Fadd32(ptr_ffo_Obuffer,FFO_FRWD_TM,(char*)c_string,0);
      cur_otpt[1]=Fadd32(ptr_ffo_Obuffer,FFO_JIFFY,(char*)&d_exer_value,0);
      cur_otpt[2]=Fadd32(ptr_ffo_Obuffer,FFO_MIN_MRGN_PRCNT,(char*)&d_exer_stt,0);

			/*for(i=0;i <= CURSOR_OUTPUT_FML;i++)*/
				for(i=0;i <= 2;i++)
      {
        if(cur_otpt[i]==-1)
        {
          fn_errlog(c_ServiceName,"S31200",FMLMSG,c_errmsg);
          Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
          tpfree((char*)ptr_ffo_Obuffer) ;
          tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
        }
      }
      j++;

    }/*** End of while ***/	


		EXEC SQL
         CLOSE get_estt_det;

    if(SQLCODE)
    {
      fn_errlog(c_ServiceName,"S31205",SQLMSG,c_errmsg) ;
      Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
      tpfree((char*)ptr_ffo_Obuffer) ;
      tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
    }

    /*** End of 1.7 ***/

	
	}
	Fprint32(ptr_ffo_Obuffer);
	if(DEBUG_MSG_LVL_3){
		fn_userlog(c_ServiceName,"Service completed succesfully  ");
	}

	tpreturn(TPSUCCESS,0,(char *)ptr_ffo_Obuffer,0L,0) ;
}/*End of service */
