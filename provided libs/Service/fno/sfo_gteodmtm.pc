/******************************************************************************/
/*	Program	    			:	SFO_GTEODMTM                                          */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                                                                            */
/*  Output            : FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_CTGRY_INDSTK                                      */
/*                                                                            */
/*  Description       : To get the records for running the End-of-day MTM     */
/*                      for SPAN customers and pass it on to the Calling      */
/*                      batch program                                         */
/*                                                                            */
/*  Log               : 1.0   25-Jun-2011   																	*/
/*                                                                            */
/******************************************************************************/
/*  Ver 1.0           : New  Release                                          */
/*  Ver 1.1           : 10-Sep-2022 CR-ISEC14-171371_Zero_Margin_pos_MTM - Devesh */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */

#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fn_battmpt.h>
#include <fn_tuxlib.h>
#include <fn_log.h>     /* ver 1.1 */
#include <fn_read_debug_lvl.h>	/* ver 1.1 */

void SFO_GTEODMTM( TPSVCINFO *rqst )
{

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];

  int i_returncode;

  EXEC SQL BEGIN DECLARE SECTION;
    char c_xchng_cd [ 4 ];
    char sql_clm_mtch_accnt [ 11 ];
    char sql_xchng_cd [ 4 ];
    char sql_undrlyng [ 7 ];
    char sql_indstk;

  EXEC SQL END DECLARE SECTION;

  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);		/* ver 1.1 */

  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                    c_err_msg,
                                    ptr_fml_Ibuf,
                                    1,
                                    FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL);

  if( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31005", LIBMSG , c_err_msg );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpfree ( ( char * ) ptr_fml_Obuf );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }

 	if(DEBUG_MSG_LVL_3)
	{ 
    fn_userlog( c_ServiceName, "c_xchng_cd :%s:", c_xchng_cd );
 	} 

	ptr_fml_Obuf = NULL;
	
	 EXEC SQL
      DECLARE cur_eodmtm_rec CURSOR FOR
      SELECT  FUS_CLM_MTCH_ACCNT,
							FUS_XCHNG_CD,
              FUS_UNDRLYNG,
							FUS_INDSTK
      FROM    FUS_FO_UNDRLYNG_SPN_PSTN
      WHERE   FUS_XCHNG_CD = :c_xchng_cd
      AND    ( FUS_UOPNPSTN_QTY != 0 OR FUS_INITIAL_MRGN !=0 )
      UNION  /*** Ver 1.1 starts here ***/
       SELECT FCP_CLM_MTCH_ACCNT,
              FCP_XCHNG_CD,
              FCP_UNDRLYNG,
              FCP_INDSTK
       FROM   FCP_FO_SPN_CNTRCT_PSTN
       WHERE  FCP_OPNPSTN_QTY<>'0'
       AND    FCP_XCHNG_CD = :c_xchng_cd
       AND ( (FCP_PRDCT_TYP='O' AND FCP_OPNPSTN_FLW!='B' ) OR FCP_PRDCT_TYP!='O')  /** Ver 1.1 Ends Here ***/
      ORDER BY FUS_CLM_MTCH_ACCNT,FUS_UNDRLYNG ;	
		

    EXEC SQL
      OPEN cur_eodmtm_rec;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpfree ( ( char * ) ptr_fml_Obuf );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    while(1)
    {
      EXEC SQL
        FETCH cur_eodmtm_rec
        INTO  :sql_clm_mtch_accnt,
              :sql_xchng_cd,
              :sql_undrlyng,
              :sql_indstk;

        if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
        {
          fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg );
          EXEC SQL
            CLOSE cur_eodmtm_rec;
          tpfree ( ( char * ) ptr_fml_Obuf );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpfree ( ( char * ) ptr_fml_Obuf );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        if( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }

				rtrim(sql_undrlyng);
				rtrim(sql_clm_mtch_accnt);
				rtrim(sql_xchng_cd);

				if( DEBUG_MSG_LVL_3 )
       {
        fn_userlog( c_ServiceName, "Just Before Sending to BATCH PROCESS");
        fn_userlog( c_ServiceName, "Match Account :%s:", sql_clm_mtch_accnt);
        fn_userlog( c_ServiceName, "Exchange code :%s:", sql_xchng_cd);
        fn_userlog( c_ServiceName, "Underlyng     :%s:", sql_undrlyng);
        fn_userlog( c_ServiceName, "Category      :%c:", sql_indstk);
       }	


        i_returncode = fn_pack_vartofml( c_ServiceName,
                                         c_err_msg,
                                         &ptr_fml_Obuf,
                                         4,
                             FFO_EBA_MTCH_ACT_NO, ( char * )sql_clm_mtch_accnt,
                             FFO_XCHNG_CD, ( char * )sql_xchng_cd,
                             FFO_UNDRLYNG, ( char * )sql_undrlyng,
                             FFO_CTGRY_INDSTK, ( char * )&sql_indstk );

        if( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg );
          EXEC SQL
            CLOSE cur_eodmtm_rec;
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpfree ( ( char * ) ptr_fml_Obuf );
          tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }
     }

    EXEC SQL
      CLOSE cur_eodmtm_rec;
	tpfree ( ( char * ) ptr_fml_Ibuf);
  tpreturn(TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
}

