/******************************************************************************/
/*	Program	    			:	SFO_FIND_FO_US                                        */
/*                                                                            */
/*  Input             : FML				                                            */
/*                                                                            */
/*  Output            : FML				                                            */
/*                                                                            */
/*  Description       : To get the details of the underlying stock code & name*/
/*                                                                            */
/*  Log               : 1.0   30-Oct-2001   S. Balamurugan                    */
/*										: 1.1		20-Dec-2007		Ranjit														*/
/*										: 1.2		19-Mar-2008		Smitha Nuti												*/
/*										: 1.3		17-Mar-2011		Sangeet S 												*/
/*                    : 1.4   20-Aug-2012   Sachin Birje                      */
/*                    : 1.5   19-Dec-2012   Navina D.                         */
/*                    : 1.6   23-Sep-2013   Navina D.                         */
/*                    : TOL   07-Aug-2023   Agam                              */
/******************************************************************************/
/*  1.0  -  New release                                                       */
/*	1.1	 - 	IBM Migration																											*/
/*	1.2	 - 	FP  Changes																												*/
/*	1.3	 - 	Issue fix to search on Stock Name than Stock Code									*/
/*  1.4  -  BSE exchange code validation                                      */
/*  1.5  -  SLTP FuturePLUS handling                                          */
/*  1.6  -  OptionPLUS handling                                               */
/*  TOl  -  Tux on Linux                                                      */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_log.h>		/* ver 1.1 */
#include <fn_read_debug_lvl.h>	/* ver 1.1 */

void SFO_FIND_FO_US( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Obuf;

  EXEC SQL BEGIN DECLARE SECTION;
      char c_hv_stck_str[30];
	EXEC SQL END DECLARE SECTION;

	char c_ServiceName[ 33];
	char c_err_msg[256];
	char c_msg[256]; 
	char c_xchng_cd[4];
	char c_stck_cd[7];
	char c_stck_nm[31];
	char c_prd_typ;
	int  i_counter;
	int  i_rownum;
	int  i;
	int  i_returncode;
  int  i_err[5];
  int  i_ferr[5];

	ptr_fml_Ibuf = ( FBFR32 *)rqst->data;
	strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);	/* ver 1.1 */

  i_err[0]  = Fget32( ptr_fml_Ibuf,FFO_XCHNG_CD,0,(char *)c_xchng_cd, 0 );
	i_ferr[0] = Ferror32; 
  
  i_err[1]  = Fget32( ptr_fml_Ibuf,FFO_PRDCT_TYP,0,(char *)&c_prd_typ, 0 );
	i_ferr[1] = Ferror32; 

  i_err[2]  = Fget32( ptr_fml_Ibuf,FFO_UNDRLYNG,0,(char *)c_stck_cd, 0 );
	i_ferr[2] = Ferror32; 
	for ( i=0; i < 3; i++ )
	{
 		 if ( i_err[ i ] == -1 )
  	 {
    		fn_userlog( c_ServiceName, "Error in :%d:",i );
    		fn_errlog( c_ServiceName, "S31005", Fstrerror32( i_ferr [i] ),
       				                                             c_err_msg  );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	 }
  }
 
  strcpy(c_hv_stck_str,c_stck_cd);
  strcat(c_hv_stck_str,"%");  /* Ver 1.3*/
/*
  if ( strlen(c_stck_cd) < 6 )
  {
  	strcat(c_hv_stck_str,"%"); 
  }
*/
	if(DEBUG_MSG_LVL_3)
	{ 
		fn_userlog( c_ServiceName, "c_xchng_cd:%s:",c_xchng_cd ); 
		fn_userlog( c_ServiceName, "c_prd_typ:%c:",c_prd_typ ); 
		fn_userlog( c_ServiceName, "c_stck_cd:%s:",c_stck_cd ); 
		fn_userlog( c_ServiceName, "c_hv_stck_str:%s:",c_hv_stck_str ); 
	} 

  /***** Ver 1.4 starts here ******/

  if( strcmp(c_xchng_cd,"NFO") != 0 && strcmp(c_xchng_cd,"BFO") != 0 )
  {
   fn_userlog( c_ServiceName, "Exchange code received is junk value");
   MEMSET(c_xchng_cd);
   strcpy(c_xchng_cd,"NFO");
  }
  
  if( c_prd_typ == '\0' )   /* '\0' Added in Ver TOL */
  {
   fn_userlog( c_ServiceName, "Product code received is null  value");
   c_prd_typ='F'; 
  }  
  /***** ver 1.4 Ends here *******/

	EXEC SQL
		DECLARE	get_undrlyng CURSOR FOR
		SELECT  fum.fum_undrlyng,
					  stk.stk_stck_nm	
		FROM		stk_stk_mstr stk, fum_fo_undrlyng_mstr fum
		WHERE		stk.stk_stck_cd   =  fum.fum_undrlyng
	  AND			fum.fum_xchng_cd	=	:c_xchng_cd
	/*** 	AND			fum.fum_prdct_typ = decode(:c_prd_typ,'P','F',:c_prd_typ)	*Ver 1.2*   *** commented in Ver 1.5 ***/
	/***	AND			fum.fum_prdct_typ = decode(:c_prd_typ,'P','F','U','F',:c_prd_typ)	*** Ver 1.5 ***  Commented in Ver 1.6 ***/
		AND			fum.fum_prdct_typ = decode(:c_prd_typ,'P','F','U','F','I','O',:c_prd_typ)	/*** Ver 1.6 ***/
    AND			stk.stk_stck_nm  LIKE :c_hv_stck_str; /*Ver 1.3*/
    /*AND			fum.fum_undrlyng  LIKE :c_hv_stck_str; Ver 1.3*/

	EXEC SQL
		OPEN get_undrlyng;

	if ( SQLCODE != 0 ) 
	{
		fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

	if ( ptr_fml_Obuf == NULL )
	{
		fn_errlog( c_ServiceName, "S31015", TPMSG, c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	i_counter=1;
	i_rownum=0;

	while (1)
	{
		EXEC SQL
			FETCH	get_undrlyng
			INTO	:c_stck_cd,
 						:c_stck_nm;

		if ( SQLCODE != 0 )
		{
			if ( SQLCODE == NO_DATA_FOUND )
			{
				break;
			}
			fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg  );
			EXEC SQL
				CLOSE get_undrlyng;
			tpfree ( ( char * ) ptr_fml_Obuf );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		} 
    

    i_err[0] = Fadd32(ptr_fml_Obuf,FFO_UNDRLYNG,(char *)c_stck_cd,0);
		i_ferr[0] = Ferror32;

    i_err[1] = Fadd32(ptr_fml_Obuf,FFO_SYMBOL,(char *)c_stck_nm,0);
		i_ferr[1] = Ferror32;

		fn_userlog( c_ServiceName, "c_stck_nm:%s:",c_stck_nm ); 
	  for ( i=0; i< 2; i++ )
	  {
 		 if ( i_err[ i ] == -1 )
  	 {
        if( i_ferr[i] == FNOSPACE )
        {
        	i_counter++;
        	ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
         					                   i_counter * MIN_FML_BUF_LEN );
					if ( ptr_fml_Obuf == NULL )
					{
						fn_errlog( c_ServiceName, "S31025", TPMSG, c_err_msg  );
						EXEC SQL
							CLOSE get_undrlyng;
						tpfree ( ( char * ) ptr_fml_Obuf );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
					if ( i == 0 )
          {
    				i_err[0] = Fadd32(ptr_fml_Obuf,FFO_UNDRLYNG,(char *)c_stck_cd,0);
    				i_err[1] = Fadd32(ptr_fml_Obuf,FFO_SYMBOL,(char *)c_stck_nm,0);
          }
          else
          {
            i_err[0] = 0;
    				i_err[1] = Fadd32(ptr_fml_Obuf,FFO_SYMBOL,(char *)c_stck_nm,0);
          } 
    			if (( i_err[0] == -1 ) || ( i_err[1] == -1 ))
    			{
						fn_errlog( c_ServiceName, "S31030", TPMSG, c_err_msg  );
						EXEC SQL
							CLOSE get_undrlyng;
						tpfree ( ( char * ) ptr_fml_Obuf );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
        }
        else
        {
    				fn_userlog( c_ServiceName, "Error in :%d:",i );
    				fn_errlog( c_ServiceName, "S31035", Fstrerror32( i_ferr [i] ),
       				                                             c_err_msg  );
    				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
  	 }
    }
    i_rownum++;
	}
  if ( i_rownum == 0 )
  {
			fn_errlog( c_ServiceName, "B21033", DEFMSG, c_err_msg  );
			EXEC SQL
				CLOSE get_undrlyng;
			tpfree ( ( char * ) ptr_fml_Obuf );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	EXEC SQL
		CLOSE get_undrlyng;
	tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
}
