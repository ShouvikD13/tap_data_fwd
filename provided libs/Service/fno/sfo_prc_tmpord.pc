/******************************************************************************/
/*	Program	    			:	SFO_PRC_TMPORD                                        */
/*                                                                            */
/*  Input             : FFO_SPRD_ORD_REF                                      */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_BAT_TAG                                           */
/*                      FFO_REC_NO                                            */
/*                                                                            */
/*  Output            :                                                       */
/*                                                                            */
/*  Description       : This program calls the place order service which will */
/*                      do the RMS validation of the input temporary order    */
/*                                                                            */
/*  Log               :                                                       */
/*                                                                            */
/******************************************************************************/
/*  29-May-2002     Ver 1.0        Vinod Banjan      Release 1.0              */
/*  18-Jul-2002     Ver 1.1        Infotec|Sangeet   Release 1.0              */
/*  18-Feb-2004     Ver 1.2        Infotec|Kaushik   Release 1.0              */
/*  29-Feb-2008     Ver 1.3        Infotech|Vidyayini Krish                   */
/*  03-May-2018     Ver 1.4        Infotech|Suchita Dabir                     */
/*	04-Sep-2018			Ver 1.5				 Infotech|Parag Kanojia											*/
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fml_def.h>
#include <fo_view_def.h>
#include <fn_log.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fo.h>
#include <fn_read_debug_lvl.h> /* Ver 1.3 */

void SFO_PRC_TMPORD( TPSVCINFO *rqst )
{
  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Sbuf;
  FBFR32 *ptr_fml_Obuf;

  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
  char c_svc_name [ 33 ];
  char c_user_id [ 9 ];
  int i_returncode;
  int i_ip_len;
  int i_op_len;
  int i_trnsctn;
  int i_err_flg;
  int i_ch_val;
  char c_msg [ 256 ];
  char c_tag [ 256 ];
  char c_alias [9]; /*1.1*/
	long int	li_sssn_id;
	long int	li_len_tobuf;
	long int	li_rec_no;
  varchar v_pan_no[31]; /** Added in ver 1.4  **/
  MEMSET( v_pan_no ); /** Added in ver 1.4  **/
	char c_setlmnt_flg = 'C';	/** Added in Ver 1.5 **/

  struct vw_sequence st_s_sequence;
  struct vw_sequence st_r_sequence;

	EXEC SQL INCLUDE "table/pcm_pipe_clm_map.h";	/* 1.2 added */

  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_orderbook st_ordbook;
  	char 	c_ord_remarks[257];
  	char 	c_order_rfrnc[19];
   	long l_ord_seq_num;
   	long l_xchng_seq_num;
   	char c_seq_num[9];
   	varchar c_date[9];
   	varchar c_trd_dt[LEN_DATE];
   	char c_qt_tm[LEN_DATE];
   	char c_frwd_tm[LEN_DATE];
   	char c_acknow_tm[LEN_DATE];
  EXEC SQL END DECLARE SECTION;

  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);

	memset( &st_ordbook,'\0', sizeof( struct vw_orderbook ) );
  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                    c_err_msg,
                                    ptr_fml_Ibuf,
                                    4,
									FFO_EBA_MTCH_ACT_NO, (char *)st_ordbook.c_cln_mtch_accnt,NULL,
									FFO_SPRD_ORD_REF, (char *)st_ordbook.c_sprd_ord_rfrnc,NULL,
                  FFO_BAT_TAG, ( char * )c_tag, NULL,
                  FFO_REC_NO, ( char * )&li_rec_no, NULL);

  if( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  rtrim (st_ordbook.c_cln_mtch_accnt);
  rtrim (st_ordbook.c_sprd_ord_rfrnc);

  if(DEBUG_MSG_LVL_3){
    fn_userlog( c_ServiceName, "Match account no :%s:",
                                 							st_ordbook.c_cln_mtch_accnt );
    fn_userlog( c_ServiceName, "Temporary order reference :%s:",
                                 							st_ordbook.c_sprd_ord_rfrnc );
  }

  sprintf ( c_msg, "Processing record no [%ld] Temp order ref no - [%s]",
																			li_rec_no,st_ordbook.c_sprd_ord_rfrnc);
  fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_errlog( c_ServiceName, "S31010", LIBMSG, c_err_msg  );
		sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																								st_ordbook.c_sprd_ord_rfrnc);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/*** No need to lock here since the lock exists in place order service **/
/*******************************************************************
  i_returncode = fn_lock_usr( c_ServiceName, st_ordbook.c_cln_mtch_accnt );
  if ( i_returncode == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg  );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
*******************************************************************/


  EXEC SQL
		SELECT
			fto_clm_mtch_accnt,
			fto_xchng_cd,
			fto_prdct_typ,
			fto_indstk,
			fto_undrlyng,
			to_char(fto_expry_dt,'dd-Mon-yyyy'),
			fto_exer_typ,
			fto_opt_typ,
			fto_strk_prc,
			fto_ordr_flw,
			fto_lmt_mrkt_sl_flg,
			fto_dsclsd_qty,
			fto_ordr_tot_qty,
			fto_lmt_rt,
			fto_stp_lss_tgr,
			fto_ordr_type,
			to_char(fto_ordr_valid_dt,'dd-Mon-yyyy'),
			to_char(fto_trd_dt,'dd-Mon-yyyy'),
			fto_ordr_stts,
			fto_mdfctn_cntr,
			NVL(fto_settlor,'*'),
			fto_spl_flag,
			to_char(fto_rqst_tm,'dd-Mon-yyyy hh24:mi:ss'),
			fto_rms_prcsd_flg,
			fto_channel,																		/***1.1***/
			fto_bp_id,																			/***1.1***/
			fto_alias																				/***1.1***/
		INTO 
			:st_ordbook.c_cln_mtch_accnt,
			:st_ordbook.c_xchng_cd,
			:st_ordbook.c_prd_typ,
			:st_ordbook.c_ctgry_indstk,
			:st_ordbook.c_undrlyng,
			:st_ordbook.c_expry_dt,
			:st_ordbook.c_exrc_typ,
			:st_ordbook.c_opt_typ,
			:st_ordbook.l_strike_prc,
			:st_ordbook.c_ordr_flw,
			:st_ordbook.c_slm_flg,
			:st_ordbook.l_dsclsd_qty,
			:st_ordbook.l_ord_tot_qty,
			:st_ordbook.l_ord_lmt_rt,
			:st_ordbook.l_stp_lss_tgr,
			:st_ordbook.c_ord_typ,
			:st_ordbook.c_valid_dt,
			:st_ordbook.c_trd_dt,
			:st_ordbook.c_ordr_stts,
			:st_ordbook.l_mdfctn_cntr,
			:st_ordbook.c_settlor,
			:st_ordbook.c_spl_flg,
			:st_ordbook.c_ack_tm,
			:st_ordbook.c_req_typ,
			:st_ordbook.c_channel,													/***1.1***/
			:st_ordbook.c_bp_id,														/***1.1***/
			:c_alias																				/***1.1***/
		FROM 	fto_fo_tmp_ord_dtls
		WHERE fto_tmp_ordr_rfrnc = :st_ordbook.c_sprd_ord_rfrnc;

  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  rtrim (st_ordbook.c_cln_mtch_accnt);
  rtrim (st_ordbook.c_xchng_cd);
  rtrim (st_ordbook.c_undrlyng);
  rtrim (st_ordbook.c_expry_dt);
  rtrim (st_ordbook.c_valid_dt);
  rtrim (st_ordbook.c_trd_dt);
  rtrim (st_ordbook.c_settlor);
  rtrim (st_ordbook.c_ack_tm);

	if ( st_ordbook.c_prd_typ == FUTURES )
	{
		strcpy( c_svc_name, "SFO_FUT_PLC_ORD" );
	}
	else if ( st_ordbook.c_prd_typ == OPTIONS )
	{
		strcpy( c_svc_name, "SFO_OPT_PLC_ORD" );
	}
	else
	{
    fn_errlog( c_ServiceName, "S31025", "Invalid Product type", c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  strcpy (c_user_id, "system" );
  li_sssn_id=0;

  ptr_fml_Sbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Sbuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31030", TPMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  i_returncode = fn_pack_vartofml ( c_ServiceName,
                                    c_err_msg,
                                    &ptr_fml_Sbuf,
                                    25,
                      FFO_USR_ID, (char *)c_user_id,
                      FFO_SSSN_ID, (char *)&li_sssn_id,
                      FFO_EBA_MTCH_ACT_NO, (char *)st_ordbook.c_cln_mtch_accnt,
                      FFO_XCHNG_CD, (char *)st_ordbook.c_xchng_cd,
                      FFO_PRDCT_TYP, (char *)&st_ordbook.c_prd_typ,
                      FFO_UNDRLYNG, (char *)st_ordbook.c_undrlyng,
                      FFO_EXPRY_DT, (char *)st_ordbook.c_expry_dt,
                      FFO_EXER_TYP, (char *)&st_ordbook.c_exrc_typ,
                      FFO_OPT_TYP, (char *)&st_ordbook.c_opt_typ,
                      FFO_STRK_PRC, (char *)&st_ordbook.l_strike_prc,
                      FFO_CTGRY_INDSTK, (char *)&st_ordbook.c_ctgry_indstk,
                      FFO_ORDR_FLW, (char *)&st_ordbook.c_ordr_flw,
                      FFO_LMT_MKT_SL_FLG, (char *)&st_ordbook.c_slm_flg,
                      FFO_ORD_TYP, (char *)&st_ordbook.c_ord_typ,
                      FFO_DSCLSD_QTY, (char *)&st_ordbook.l_dsclsd_qty,
                      FFO_ORD_TOT_QTY, (char *)&st_ordbook.l_ord_tot_qty,
                      FFO_LMT_RT, (char *)&st_ordbook.l_ord_lmt_rt,
                      FFO_STP_LSS_TGR, (char *)&st_ordbook.l_stp_lss_tgr,
                      FFO_ORD_VALID_DT, (char *)st_ordbook.c_valid_dt,
                      FFO_ACK_TM, (char *)st_ordbook.c_ack_tm,
                      FFO_SPL_FLG, (char *)&st_ordbook.c_spl_flg,
                      FFO_SVC_NAME, (char *)c_svc_name,
                      FFO_CHANNEL, (char *)st_ordbook.c_channel,   	/***1.1***/
                      FFO_BP_ID, (char *)st_ordbook.c_bp_id,   			/***1.1***/
                      FFO_ALIAS, (char *)c_alias   									/***1.1***/
                                  	);

  if( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31035", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpfree ( ( char * ) ptr_fml_Sbuf );
		sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


	if ( strcmp(st_ordbook.c_settlor,"*") != 0 )
	{
  	if ( Fadd32 ( ptr_fml_Sbuf, FFO_SETTLOR,
                	( char *)st_ordbook.c_settlor, 0 ) == -1 )
  	{
    	fn_errlog( c_ServiceName, "S31040", FMLMSG, c_err_msg  );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	tpfree ( ( char * ) ptr_fml_Sbuf );
			sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
    	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
  }

  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31045", TPMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpfree ( ( char * ) ptr_fml_Sbuf );
		sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	i_err_flg = 0 ;

  i_ch_val = tpcall( "SFO_ORD_ROUT", (char *)ptr_fml_Sbuf, 0,
                     (char **)&ptr_fml_Obuf, &li_len_tobuf, 0);
  if (i_ch_val == -1)
  {
    if ( tperrno != TPESVCFAIL )
    {
      fn_errlog( c_ServiceName, "S31050", TPMSG, c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	tpfree ( ( char * ) ptr_fml_Sbuf );
    	tpfree ( ( char * ) ptr_fml_Obuf );
			sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
    	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    else
    {
      i_returncode = Fget32(ptr_fml_Obuf, FFO_ERR_MSG, 0, 
																										(char *)c_ord_remarks, 0);
      if (i_returncode == -1)
      {
      	fn_errlog( c_ServiceName, "S31055", TPMSG, c_err_msg );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		tpfree ( ( char * ) ptr_fml_Sbuf );
    		tpfree ( ( char * ) ptr_fml_Obuf );
				sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
    		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     	}
			i_err_flg = 1 ;
    }
  }

  tpfree ( ( char * ) ptr_fml_Sbuf );

	if ( i_err_flg == 1 )
	{
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpfree ( ( char * ) ptr_fml_Obuf );

    i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
    if ( i_trnsctn == -1 )
    {
    	fn_errlog( c_ServiceName, "S31060", LIBMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
    	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

 		EXEC SQL
			UPDATE 	fto_fo_tmp_ord_dtls
			SET			fto_ordr_stts 	= 'J',
							fto_rms_prcsd_flg = 'F',
							fto_remarks     = :c_ord_remarks
			WHERE		fto_tmp_ordr_rfrnc 	= :st_ordbook.c_sprd_ord_rfrnc;

  	if( SQLCODE != 0 )
  	{
    	fn_errlog( c_ServiceName, "S31065", SQLMSG, c_err_msg  );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
    	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

	  EXEC SQL
	    SELECT to_char( exg_nxt_trd_dt, 'DD-Mon-YYYY' ),
	           to_char( exg_nxt_trd_dt, 'YYYYMMDD' )
	    INTO   :c_trd_dt,
	           :c_date
	    FROM   exg_xchng_mstr
	    WHERE  exg_xchng_cd = :st_ordbook.c_xchng_cd
	    AND    exg_mkt_typ  = 'D';
	
  	if( SQLCODE != 0 )
  	{
    	fn_errlog( c_ServiceName, "S31070", SQLMSG, c_err_msg  );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
    	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	
	  SETNULL ( c_trd_dt );
	  SETNULL ( c_date );
		
	  i_ip_len = sizeof ( struct vw_sequence );
	  i_op_len = sizeof ( struct vw_sequence );

		/* 1.2 addition starts */
	  EXEC SQL
      SELECT    pcm_crnt_pipe_id
        INTO    :sql_pcm_crnt_pipe_id
        FROM    pcm_pipe_clm_map
       WHERE    pcm_xchng_cd         = :st_ordbook.c_xchng_cd
         AND    pcm_clm_mtch_accnt   = :st_ordbook.c_cln_mtch_accnt;

	  if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31075", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      sprintf(c_msg, "Failed in getting the pipe id");
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }	
		strcpy( st_s_sequence.c_pipe_id, sql_pcm_crnt_pipe_id);

		/* 1.2 addition ends */
		/* 1.2 commented
    strcpy( st_s_sequence.c_pipe_id, "11" );
    */

	  strcpy( st_s_sequence.c_trd_dt, (char *) c_trd_dt.arr );
	  st_s_sequence.c_rqst_typ = GET_XCHNG_SEQ;
	
		strcpy( st_s_sequence.c_rout_crt, "000" );	
	  i_returncode = fn_call_svc( c_ServiceName,
	                              c_err_msg,
	                              &st_s_sequence,
	                              &st_r_sequence,
	                              "vw_sequence",
	                              "vw_sequence",
	                              i_ip_len,
	                              i_op_len,
	                              0,
	                              "SFO_GET_SEQ" );
	  if ( i_returncode != SUCC_BFR )
	  {
	    fn_errlog( c_ServiceName, "S31080", LIBMSG, c_err_msg  );
	    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																								st_ordbook.c_sprd_ord_rfrnc);
	   	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
	   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	  }
	
	  l_xchng_seq_num = st_r_sequence.l_seq_num;
	
		strcpy( st_s_sequence.c_pipe_id, sql_pcm_crnt_pipe_id); /* 1.2 added */
		/* strcpy( st_s_sequence.c_pipe_id, "11" );								 1.2 commented */
		strcpy( st_s_sequence.c_trd_dt, (char *) c_trd_dt.arr );
	  st_s_sequence.c_rqst_typ = GET_ORDER_SEQ;
		
		strcpy( st_s_sequence.c_rout_crt, "000" );	
	  i_returncode = fn_call_svc( c_ServiceName,
	                              c_err_msg,
	                              &st_s_sequence,
	                              &st_r_sequence,
	                              "vw_sequence",
	                              "vw_sequence",
	                              i_ip_len,
	                              i_op_len,
	                              0,
	                              "SFO_GET_SEQ" );
	  if ( i_returncode != SUCC_BFR )
	  {
	    fn_errlog( c_ServiceName, "S31085", LIBMSG, c_err_msg  );
	    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	  }
		
	  l_ord_seq_num = st_r_sequence.l_seq_num;
	
 		sprintf( c_seq_num, "%08d", l_ord_seq_num );
	
 		strcpy( c_order_rfrnc, (char *)c_date.arr );
 		strcat( c_order_rfrnc, "11");
 		strcat( c_order_rfrnc, c_seq_num );

    strcpy( c_qt_tm, "\0" );
    strcpy( c_frwd_tm, "\0" );
    strcpy( c_acknow_tm, "\0" );

    EXEC SQL
			INSERT INTO fxb_fo_xchng_book
      (
        fxb_xchng_cd,
        fxb_ordr_rfrnc,
        fxb_pipe_id,
       	fxb_mod_trd_dt,
        fxb_ordr_sqnc,
	      fxb_lmt_mrkt_sl_flg,
	      fxb_dsclsd_qty,
	      fxb_ordr_tot_qty,
	      fxb_lmt_rt,
	      fxb_stp_lss_tgr,
	      fxb_mdfctn_cntr,
	      fxb_ordr_valid_dt,
	      fxb_ordr_type,
	      fxb_rqst_typ,
	      fxb_rqst_tm,
	      fxb_plcd_stts,
	      fxb_ex_ordr_typ,
	      fxb_spl_flag,
				fxb_sprd_ord_ind,
				fxb_quote,
				fxb_qt_tm,
				fxb_frwd_tm,
				fxb_rms_prcsd_flg,
				fxb_ors_msg_typ,
				fxb_ack_tm,
				fxb_xchng_rmrks,
				fxb_xchng_cncld_qty,
				fxb_jiffy
	    )
	    VALUES
	    (
	      :st_ordbook.c_xchng_cd,
	      :c_order_rfrnc,
				:st_ordbook.c_pipe_id,	/* 1.2 Changed from the hardcoded value of '11' */
	     	to_date( :st_ordbook.c_trd_dt,'dd-mon-yyyy' ),
				:l_xchng_seq_num,
	      :st_ordbook.c_slm_flg,
	      :st_ordbook.l_dsclsd_qty,
	     	:st_ordbook.l_ord_tot_qty,
	      :st_ordbook.l_ord_lmt_rt,
	      :st_ordbook.l_stp_lss_tgr,
				1,
	      to_date( :st_ordbook.c_valid_dt,'dd-mon-yyyy' ),
	      :st_ordbook.c_ord_typ,
				'N',
	     	to_date( :st_ordbook.c_ack_tm,'dd-mon-yyyy  hh24:mi:ss' ),
				'F',
				'O',
				'T',
				'*',
				0,
        to_date(:c_qt_tm, 'DD-Mon-yyyy hh24:mi:ss' ),
        to_date(:c_frwd_tm, 'DD-Mon-yyyy hh24:mi:ss' ),
				'*',
				0,
        to_date(:c_acknow_tm, 'DD-Mon-yyyy hh24:mi:ss' ),
				'*',
				0,
				0
	    );
	
  	if( SQLCODE != 0 )
  	{
    	fn_errlog( c_ServiceName, "S31090", SQLMSG, c_err_msg  );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
    	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

	  EXEC SQL
	    SELECT  clm_clnt_ctgry_id
	    INTO    :st_ordbook.l_clnt_ctgry
	    FROM    clm_clnt_mstr
	    WHERE   clm_mtch_accnt = :st_ordbook.c_cln_mtch_accnt;

  	if( SQLCODE != 0 )
  	{
    	fn_errlog( c_ServiceName, "S31095", SQLMSG, c_err_msg  );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
    	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	
	  EXEC SQL
	    SELECT  ccg_pro_cli_ind
	    INTO    :st_ordbook.c_pro_cli_ind
	    FROM    ccg_clnt_ctgry
	    WHERE   ccg_clnt_ctgry_id = :st_ordbook.l_clnt_ctgry;

  	if( SQLCODE != 0 )
  	{
    	fn_errlog( c_ServiceName, "S31100", SQLMSG, c_err_msg  );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
    	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

   /** ver 1.4 starts**/
   EXEC SQL
    SELECT  NVL(ICD_PAN_NO,'*') 
    INTO    :v_pan_no 
    FROM    ICD_INFO_CLIENT_DTLS,
            IAI_INFO_ACCOUNT_INFO
    WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
    AND     IAI_MATCH_ACCOUNT_NO  = :st_ordbook.c_cln_mtch_accnt;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31105", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      sprintf(c_msg, "Failed in fetching pan number");
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    SETNULL(v_pan_no); 

    if(DEBUG_MSG_LVL_3)
    {     
       fn_userlog(c_ServiceName,"PAN NO IS :%s: and length is :%d:",v_pan_no.arr,v_pan_no.len);
    }

    if( v_pan_no.len != 10 )
    {
      fn_errlog( c_ServiceName, "B91176", DEFMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
            
    /** ver 1.4 ends **/

		/*** Ver 1.5 Starts ***/

			EXEC SQL
       SELECT NVL( FTQ_SETLMNT_FLG, 'C' )
       INTO   :c_setlmnt_flg
       FROM   FTQ_FO_TRD_QT
       WHERE  FTQ_XCHNG_CD  = :st_ordbook.c_xchng_cd
         AND  FTQ_PRDCT_TYP = :st_ordbook.c_prd_typ
         AND  FTQ_UNDRLYNG  = :st_ordbook.c_undrlyng
         AND  FTQ_EXPRY_DT  = :st_ordbook.c_expry_dt
         AND  FTQ_EXER_TYP  = :st_ordbook.c_exrc_typ
         AND  FTQ_OPT_TYP   = :st_ordbook.c_opt_typ
         AND  FTQ_STRK_PRC  = :st_ordbook.l_strike_prc;

			if( SQLCODE != 0 )
    	{
      	fn_errlog( c_ServiceName, "S31110", SQLMSG, c_err_msg  );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	sprintf(c_msg, "Failed in fetching settlement flag from ftq");
      	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

    /*** Ver 1.5 Ends ***/

    EXEC SQL
      INSERT INTO fod_fo_ordr_dtls
      (
        fod_clm_mtch_accnt,
        fod_clnt_ctgry,
        fod_ordr_rfrnc,
        fod_pipe_id,
        fod_xchng_cd,
        fod_prdct_typ,
        fod_undrlyng,
        fod_expry_dt,
        fod_exer_typ,
        fod_opt_typ,
        fod_strk_prc,
        fod_ordr_flw,
        fod_lmt_mrkt_sl_flg,
        fod_dsclsd_qty,
        fod_ordr_tot_qty,
        fod_lmt_rt,
        fod_stp_lss_tgr,
        fod_ordr_type,
        fod_ordr_valid_dt,
        fod_trd_dt,
        fod_ordr_stts,
        fod_mdfctn_cntr,
        fod_settlor,
        fod_spl_flag,
        fod_indstk,
        fod_pro_cli_ind,
				fod_remarks,
				fod_channel,
				fod_bp_id,
        fod_pan_no, /** added in ver 1.4 **/
				fod_setlmnt_flg		/*** Added in Ver 1.5 ***/
      )
      VALUES
      (
        :st_ordbook.c_cln_mtch_accnt,
        :st_ordbook.l_clnt_ctgry,
	    	:c_order_rfrnc,
				:st_ordbook.c_pipe_id,  /* 1.2 Changed from the hardcoded value of '11' */
        :st_ordbook.c_xchng_cd,
        :st_ordbook.c_prd_typ,
        :st_ordbook.c_undrlyng,
        to_date( :st_ordbook.c_expry_dt, 'dd-mon-yyyy' ),
        :st_ordbook.c_exrc_typ,
        :st_ordbook.c_opt_typ,
        :st_ordbook.l_strike_prc,
        :st_ordbook.c_ordr_flw,
        :st_ordbook.c_slm_flg,
        :st_ordbook.l_dsclsd_qty,
        :st_ordbook.l_ord_tot_qty,
        :st_ordbook.l_ord_lmt_rt,
        :st_ordbook.l_stp_lss_tgr,
        :st_ordbook.c_ord_typ,
        to_date( :st_ordbook.c_valid_dt,'dd-mon-yyyy' ),
        to_date( :st_ordbook.c_trd_dt,'dd-mon-yyyy' ),
				'M',
				1,
        :st_ordbook.c_settlor,
				'T',
        :st_ordbook.c_ctgry_indstk,
        :st_ordbook.c_pro_cli_ind,
				:c_ord_remarks,
				:st_ordbook.c_channel,
				:st_ordbook.c_bp_id,
        :v_pan_no, /** added in ver 1.4 **/
				:c_setlmnt_flg		/*** Added in Ver 1.5 ***/
      );

  	if( SQLCODE != 0 )
  	{
    	fn_errlog( c_ServiceName, "S31115", SQLMSG, c_err_msg  );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
    	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

	}
	else
	{
		i_returncode = Fget32(ptr_fml_Obuf, FFO_ORDR_RFRNC, 0, 
																				(char *)st_ordbook.c_ordr_rfrnc, 0);
		if (i_returncode == -1)
		{
    	fn_errlog( c_ServiceName, "S31120", TPMSG, c_err_msg  );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	tpfree ( ( char * ) ptr_fml_Obuf );
			sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
    	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

  	tpfree ( ( char * ) ptr_fml_Obuf );

 		EXEC SQL
			UPDATE 	fto_fo_tmp_ord_dtls
			SET			fto_ordr_stts 	    = 'A',
							fto_rms_prcsd_flg   = 'P',
							fto_eba_ordr_rfrnc  = :st_ordbook.c_ordr_rfrnc
			WHERE		fto_tmp_ordr_rfrnc 	= :st_ordbook.c_sprd_ord_rfrnc;

  	if( SQLCODE != 0 )
  	{
    	fn_errlog( c_ServiceName, "S31125", SQLMSG, c_err_msg  );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
    	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

  }

	EXEC SQL
	  INSERT INTO fto_fo_tmp_ord_dtls_log
	  (
			fto_clm_mtch_accnt,
			fto_tmp_ordr_rfrnc,
			fto_xchng_cd,
			fto_prdct_typ,
			fto_indstk,
			fto_undrlyng,
			fto_expry_dt,
			fto_exer_typ,
			fto_opt_typ,
			fto_strk_prc,
			fto_ordr_flw,
			fto_lmt_mrkt_sl_flg,
			fto_dsclsd_qty,
			fto_ordr_tot_qty,
			fto_lmt_rt,
			fto_stp_lss_tgr,
			fto_ordr_type,
			fto_ordr_valid_dt,
			fto_trd_dt,
			fto_ordr_stts,
			fto_mdfctn_cntr,
			fto_settlor,
			fto_spl_flag,
			fto_rqst_tm,
			fto_rms_prcsd_flg,
			fto_eba_ordr_rfrnc,
			fto_remarks,
			fto_channel,																							/***1.1***/
			fto_bp_id,																								/***1.1***/
			fto_alias																									/***1.1***/
		)
	  (
	     SELECT  	fto_clm_mtch_accnt,
								fto_tmp_ordr_rfrnc,
								fto_xchng_cd,
								fto_prdct_typ,
								fto_indstk,
								fto_undrlyng,
								fto_expry_dt,
								fto_exer_typ,
								fto_opt_typ,
								fto_strk_prc,
								fto_ordr_flw,
								fto_lmt_mrkt_sl_flg,
								fto_dsclsd_qty,
								fto_ordr_tot_qty,
								fto_lmt_rt,
								fto_stp_lss_tgr,
								fto_ordr_type,
								fto_ordr_valid_dt,
								fto_trd_dt,
								fto_ordr_stts,
								fto_mdfctn_cntr,
								fto_settlor,
								fto_spl_flag,
								fto_rqst_tm,
								fto_rms_prcsd_flg,
								fto_eba_ordr_rfrnc,
								fto_remarks,
								fto_channel,
								fto_bp_id,
								fto_alias
	     	FROM  	fto_fo_tmp_ord_dtls
				WHERE		fto_tmp_ordr_rfrnc 	= :st_ordbook.c_sprd_ord_rfrnc
	  );
	
	if( SQLCODE != 0 )
	{
	 	fn_errlog( c_ServiceName, "S31130", SQLMSG, c_err_msg  );
	 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	 	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
	 	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
	 	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	
	EXEC SQL
	  DELETE  fto_fo_tmp_ord_dtls
		WHERE		fto_tmp_ordr_rfrnc 	= :st_ordbook.c_sprd_ord_rfrnc;
	
	if( SQLCODE != 0 )
	{
	 	fn_errlog( c_ServiceName, "S31135", SQLMSG, c_err_msg  );
	 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	 	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																						st_ordbook.c_sprd_ord_rfrnc);
	 	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
	 	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

 	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
 	{
   	fn_errlog( c_ServiceName, "S31140",LIBMSG,c_err_msg);
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		sprintf(c_msg, "Failed in processing temp order ref no.[%s]",
																							st_ordbook.c_sprd_ord_rfrnc);
 		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}

	if ( i_err_flg == 1 )
	{
		sprintf(c_msg, "temp order ref no.[%s] rejected",
																						st_ordbook.c_sprd_ord_rfrnc);
  	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );

	}
	else
	{
		sprintf(c_msg, "Successfully Processed temp order ref no.[%s]",
																						st_ordbook.c_sprd_ord_rfrnc);
  	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
	}

  tpreturn( TPSUCCESS, SUCC_BFR, (char *)ptr_fml_Ibuf, 0 , 0 );

}
