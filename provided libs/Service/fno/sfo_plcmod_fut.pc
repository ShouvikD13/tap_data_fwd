/******************************************************************************/
/*  Program           : SFO_PLCMOD_FUT                                        */
/*                                                                            */
/*  Input             : FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_ORDR_FLW                                          */
/*                      FFO_LMT_MKT_SL_FLG                                    */
/*                      FFO_DSCLSD_QTY                                        */
/*                      FFO_ORD_TOT_QTY                                       */
/*                      FFO_LMT_RT                                            */
/*                      FFO_STP_LSS_TGR                                       */
/*                      FFO_ORD_TYP                                           */
/*                      FFO_ORDR_RFRNC                                        */
/*                      FFO_PIPE_ID                                           */
/*                                                                            */
/*  Optional          : FFO_ORD_VALID_DT                                      */
/*                                                                            */
/*  Output            : FFO_ERR_MSG                                           */
/*                                                                            */
/*  Description       : To place a modify futures order                       */
/*                                                                            */
/*  Log               : 1.0   16-Oct-2001   S. Swaminathan                    */
/*  Log               : 1.1   17-Jul-2002   Infotech|sangeet                  */
/*  Log               : 1.2   17-Sep-2002   Infotech|sangeet                  */
/*  Log               : 1.3   03-Nov-2003   Zubin for remarks coming wrong    */
/*                                          when order is modified(CR1240)		*/
/*	Log								: 1.4		03-Mar-2004		Kaushik | GTD orders 							*/
/*	Log								: 1.5		29-Jul-2004		Sangeet | Infotech								*/
/*  Log               : 1.6   17-Apr-2007   Vikash| Infotech                  */
/*  Log               : 1.7   24-Jan-2008   Shailesh| Infotech                */
/*  log               : 1.8   08-Jan-2007   Vikash  | Infotech                */
/*  Log               : 1.9   07-Feb-2008   Vidyayini | Infotech              */
/*	Log								: 2.0   14-Mar-2008   Shamili | Infotech                */
/*  Log               : 2.1   07-Nov-2008   Shailesh | Infotech               */
/*  Log               : 2.2   02-Jan-2009   Shailesh & Prakash | Infotech     */
/*  Log               : 2.3   13-Mar-2009   Vidyayini Krish										*/
/*  Log               : 2.4   12-Jun-2009   Vidyayini Krish										*/
/*  Log               : 2.5   16-Dec-2009   Shamili Dalvi	| Infotech  				*/
/*	Log								:	2.6		10-May-2010		Sandeep Patil	|	Infotech					*/
/*	Log								:	2.7		23-Nov-2010		Shailesh Hinge|	Infotech					*/
/*  Log               : 2.8   07-Jul-2011   Infotech|Mahesh                   */
/*  Log               : 2.9   24-Feb-2012   Infotech|Sandip                   */
/*  Log               : 3.0   28-Jun-2012   Infotech|Sachin                   */
/*  Log               : 3.1   02-Jul-2012   Infotech|Navina                   */
/*  Log               : 3.2   03-Jul-2012   Infotech|Navina 									*/
/*  Log               : 3.3   05-Nov-2012   Infotech|Swati A.B								*/
/*  Log               : 3.4   26-Nov-2012   Infotech|Sandip Tambe             */
/*  Log               : 3.5   03-Dec-2012   Infotech|Bhushan Sonwane          */
/*  Log               : 3.6   20-Dec-2012   Infotech|Mahesh                   */
/*  Log               : 3.7   28-Jan-2013   Infotech|Swati A.B                */
/*	Log								:	3.8		30-Jan-2013		Infotech|Sandeep									*/
/*	Log								:	3.9		31-Jan-2013		Infotech|Shamili									*/
/*  Log               : 4.0   04-Feb-2013   Infotech|Navina   								*/
/*  Log               : 4.1   10-Jun-2013   Infotech|Vishnu                   */
/*  Log               : 4.2   13-May-2013   Infotech|Samip M                  */
/*  Log               : 4.3   30-May-2013   Infotech|Swati A.B                */
/*  Log               : 4.4   14-Jun-2013   Infotech|Swati A.B                */
/*  Log               : 4.5   09-Jul-2013   Infotech|Navina D.                */
/*  Log               : 4.6   06-Nov-2013   Infotech|Swati A.B                */
/*  Log               : 4.7   17-Dec-2013   Infotech|Swati A.B                */
/*  Log               : 4.8   04-Dec-2013   Infotech|Sachin Birje             */
/*  Log               : 5.0   21-Jan-2014   Infotech|Bhushan Sonwane          */
/*  Log               : 5.2		22-Apr-2014   Infotech|Anand D                  */     
/*  Log 							: 5.3		17-Jun-2014		Infotech|Ritesh Deolekar					*/
/*  Log               : 5.5   06-Feb-2015		Infotech|Anand Dhopte             */ 
/*  Log               : 5.6   22-Jul-2015	  Infotech|Aakash Chavan            */
/*  Log               : 5.7   07-Aug-2015   Infotech|Bhupendra Malik          */ 
/*  Log               : 5.8   10-Aug-2015   Infotech|Ritesh D                 */
/*  Log               : 6.0   01-Mar-2016   Infotech|Anand Dhopte             */
/*  Log               : 6.1   10-Mar-2016   Infotech|Kishor Borkar            */
/*  Log               : 6.2   05-Jul-2016   Infotech|Bhupendra Malik          */
/*  Log               : 6.3   19-Jul-2016   Infotech|Sachin Birje             */
/*	Log 							: 6.4		01_sep-2016		Infotech|Kishor Borkar/Vishal B.	*/
/*  Log               : 6.6   05-Dec-2016   Infotech|Kishor Borkar            */
/*  Log               : 6.7   14-Feb-2017   Infotech|Tanmay W									*/
/*  Log               : 6.8   20-Mar-2017   Infotech|Anand Dhopte             */
/*  Log               : 6.9   03-May-2017   Infotech|Kishor Borkar/mrinal     */
/*  Log               : 7.1   12-Dec-2017   infotech|Anand Dhopte             */
/*  Log               : 7.2   27-Dec-2018   Infotech|Suchita Dabir            */
/*  Log               : 7.3   25-Apr-2018   Infotech|Navina D.                */
/*  Log								: 7.4		11-Jul-2018		Infotech|Bhushan Harekar					*/
/*  Log               : 7.5   17-Jul-2018   Infotech|Tanmay Patel             */
/*  Log               : 7.6		13-May-2019   Infotech|Parag Kanojia            */
/*  Log               : 7.7   24-Oct-2019   Infotech|Tanmay Patel             */
/*  Log               : 7.8   13-Nov-2019   Infotech|Anand Dhopte             */
/*	Log								: 7.9   04-Mar-2020   Infotech|Navina D.                */
/*	Log								: 8.0		02-Feb-2021		Infotech|Kiran Itkar							*/
/*	Log								: 8.1		18-May-2021		Infotech|Sandip Tambe   					*/
/*	Log								: 8.2		28-Sep-2021		Infotech|Shlok Ghan								*/
/*	Log								:	8.3		17-Mar-2022		Infotech|Shlok Ghan               */
/*  Log               : 8.4   23-May-2022   Infotech|Roshni Pawar             */	
/*  Log               : 8.5   24-Jun-2022   Infotech|Naveena R.               */
/*  Log               : 8.6   																	              */
/*  Log               : 8.7   06-Mar-2023   ISec|Ravi Malla			              */
/******************************************************************************/
/*  1.0   - New release                                                       */
/*  1.1   -   BP Changes                                                      */
/*  1.1   -   Change for restricted Martket orders                          	*/
/*	1.4		- 	To validate the revised valid date of any GTD order							*/
/*	1.5		- 	To Block GTD Orders																							*/
/*  1.6   -   Broker status check for NNF 803                                 */
/*  1.7   -   Handling of mod rejection in case of partial execution          */
/*  1.8   -   DLrevamp for SLTP check and exchange status check               */  
/*						conditions added for modifications of order.										*/
/*  1.9   -   IBM Changes                                                     */
/*	2.0		-		FuturePlus                                                      */
/*  2.1   -   Trading Limit Password check introduced                         */
/*  2.2   -   NNF Changes For Extended Market Hours                           */  
/*  2.3   -   New view variables implemented																	*/
/*  2.4   -   Additional check added for CRCON31530 Freeze qty                */
/*	2.5		-		Blocking SLM Flag and Order Typ null bug		               			*/
/*	2.6		-		NNF DownLoad Changes																						*/
/*	2.7		-		SilverLight																											*/
/*  2.8   -   SPAN Changes                                                    */
/*  2.9   -   BSE Changes                                                     */
/*  3.0   -   BSE SLTP Changes as per modified structure                      */
/*  3.1   -   SPAN TNC flag handling                                          */
/*	3.2	  -		Storing ip address in Exchange book															*/
/*	3.3	  -		CR- Overnight Orders Changes 																		*/
/*  3.4   -   Restricting customer from converting from Normal to SLTP for BSE */
/*  3.5   -   SLTP FuturePlus                                                 */
/*  3.6   -   Broker closeout changes                                         */
/*  3.7   -   Consolidated Order Validation changes                           */
/*	3.8		-		BSE Derivative SLTP To Limit Changes														*/
/*	3.9		-		Price band Relaxation Changes																		*/
/*  4.0   -   SPAN FuturePLUS handling                                        */
/*  4.1   -   Bug Fix                                                         */
/*  4.2   -   Modify Allocation Changes                                       */
/*  4.3   -   Restrict DBC mapped customer to convert position                */
/*            if trading is not allowed                                       */
/*  4.4   -   Changes to allow modification of order for scrip under ban period */
/*  4.5   -   Check to restrict modification of order qty in FP SLTP          */
/*  4.6   -   FNO limit Logging (Swati A.B)                                   */
/*  4.7   -   SLTP F+ in  DL .net Changes (Swati A.B)                         */
/*  4.8   -   FNO VTC Order Placement  (Sachin Birje )                        */
/*            (Changes to set SLTP flag and part-executed fresh order         */
/*              check added )                                                 */
/*  5.0   -   Contract Note Changes                                           */
/*  5.2   -   Service call to SFO_GET_QT commented and function introduced    */
/*  5.3   -   Multiple DB Hits to CLM_CLNT_MSTR reduced by fetching all       */
/*            required details into single DB hit.                            */
/*  5.5   -   Insufficient Limits - Modify Allocation changes for DL .Net     */
/*  5.6   -   CR_ISEC14_64402 Limit Order Type in FPSLTP (Aakash Chavan)      */
/*  5.7   -   Include changes for Insider trading check                       */
/*  5.8   -   Contract Master and Trade Quote Table Merger Changes            */
/*  6.0   -   Check to restrict modification for Invalid combination of       */
/*            Order Reference and Match Account.                              */
/*  6.1   -   Transaction Flag in Check Session IP                            */
/*  6.2   -   Log Maitainence                                                 */
/*  6.3   -   Debug log changes                                               */
/*  6.4   -   Trail Future.																										*/	
/*  6.6   -   Transaction through IP for SLTP Futureplus                      */
/*  6.7   -   Insider function bug fix																				*/
/*  6.8   -   VTC Order Changes for Other Front End                           */
/*  6.9   -   Optimization                                                    */
/*  7.1   -   FML with data type char used instead of long for storing        */
/*            wrapper flag                                                    */
/*  7.2   -   Rollover with spread changes                                    */
/*  7.3   -   Position Mismatch                                               */
/*  7.4		-		Physical Settlement of Stock Derivative Changes									*/
/*  7.5   -   Disallow clients with outstanding form taking fresh exposure    */
/*	7.6		-		EOS enhancements for Physical settlement in F&O Changes					*/
/*  7.7   -   Ipv6 Format                                                     */
/*  7.8   -   CR-ISEC18-127640 Sub-broker dual order placement changes        */
/*  7.9   -   FPSL margin change CR-ISEC14-133200   - Navina D.               */
/*  8.0		-		Separate EOS for Stock and Index Underlyings in FPSL - Kiran I. */
/*  8.1		-		Derivative_trd_restrict_CR_ISEC04_152948                        */
/*	8.2		-		Introduction of Profit Order in FPSL	CR-ISEC14-150750					*/
/*	8.3		-		CR-ISEC14-165712 Enhancements to Physical settlement Stocks disable contracts and EOS for Options Buy (Shlok Ghan) */
/*  8.4   -   CR-ISEC14-163069 Disable market order placement for illiquid options contracts under F&O segment */
/*  8.5   -   Validation for API live issue (Naveena R)                       */
/*  8.6   -   CR-ISEC18-175354_ Unique Device Identifiers for orders placed through IBT & STWT(pranav anand)*/
/*  8.7   -   changing fn_lock_usr to fn_lock_fno			                        */
/*  8.8   -   Margin Reporting Regulatory Changes (Nikhil Soni)                       */
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <eba_to_ors.h>
#include <fo_fml_def.h>
#include <fml_def.h>
/* COMMENTED IN VER TOL : TUX on LINUX (Ravindra) * #include <fo_view_def.hi> */ 
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h> /* Ver 1.9 */
#include <fn_val_ord.h> /* Ver 1.9 */
#include <fml_rout.h> /* Ver 1.9 */
#include <fn_read_debug_lvl.h> /* Ver 1.9 */
#include <fn_pos.h>		/* Ver 3.2 */
/* #include <fn_span_lib.h>  * Ver 3.5 *  Commented in ver 5.2 **/
#include <fo_get_records.h>  /* Ver 5.2 */

EXEC SQL INCLUDE "table/fum_fo_undrlyng_mstr.h"; /* Ver 2.4 */

int fn_check_inp_fut( char *c_ServiceName,
                  struct vw_xchngbook *ptr_st_xchngbook, 
                  struct vw_cntrct_qt *ptr_st_cntrct_qt, 
                  char c_fum_mrkt_typ,                 /* Ver 2.2 */
                  char c_fcm_mrkt_typ,                 /* Ver 2.2 */
                  int i_rollover_ord_ind,                      /* Ver 7.2 */
                  char *c_sprd_expiry_date1, /* Ver 7.2 */
                  char *c_sprd_expiry_date2, /* Ver 7.2 */
                  struct vw_err_msg *ptr_st_err_msg );

int fn_check_ord_fut( char *c_ServiceName,
                  struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf, 
                  struct vw_xchngbook *ptr_st_xchngbook, 
                  struct vw_orderbook *ptr_o_st_ordbook, 
                  struct vw_err_msg *ptr_st_err_msg );

int fn_chk_cntrctfp(char * c_ServiceName,
                  struct vw_contract *ptr_st_cntrct,
                  char *c_fum_mrkt_typ,                 /* Ver 2.2 */
                  char *c_fcm_mrkt_typ,                 /* Ver 2.2 */
                  struct vw_err_msg *ptr_st_err_msg );        /* Ver 2.0 */

int fn_5paisa(long); /*** Added in Ver 3.5 ****/


int fn_stts_trail_ord(char * );  /** Ver 6.4 **/

int fn_upd_trail_ord(char *c_order_ref);  /** Ver 6.4 **/

int fn_vrfy_prc_band_mkt_loc ( char c_ServiceName [ 33 ],
                           char c_xchng_cd [ 4 ],
                           char c_prd_typ,
                           char c_undrlyng [ 7 ],
                           long l_ord_limit_rt,
                           char c_expry_dt[ 21 ],
                           struct vw_err_msg *ptr_st_err_msg );				/*** Added in Ver 6.4 ***/
/*** ver 7.2 starts***/
int fn_vrfy_prc_band_mkt_rws_loc  ( char c_ServiceName [ 33 ],
                           char c_xchng_cd [ 4 ],
                           char c_prd_typ,
                           char c_undrlyng [ 7 ],
                           long l_ord_limit_rt,
                           char *c_sprd_expiry_date1,                  
                           char *c_sprd_expiry_date2,
                           struct vw_err_msg *ptr_st_err_msg );
/*** ver 7.2 ends ***/

int fn_get_quote_zero ( char *c_ServiceName, char c_ord_flw, long l_best_bid_price, long l_best_offer_price, long l_previous_close_price, long *l_quote_zero);   /*** Added in Ver 7.6 ***/

void SFO_PLCMOD_FUT( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;

	char c_ServiceName[33];
	char c_err_msg[256];
  char c_channel[4];/*1.1 BP*/
  char c_bp_id[9];/*1.1 BP*/
  char c_alias[9];/*1.1 BP*/
  int i_level_exists =0; /*1.1*/
  char  c_trdng_psswrd_flg = YES;
	char  c_pipe_id[3];
  char  c_temp_psswrd[LEN_USR_TRDNG_PSSWRD];
	char  c_roll_stts;              /*2.0*/
	char c_err_msg1[256];           /*2.0*/
  char c_fum_mrkt_typ;          /* Ver 2.2 */
  char c_fcm_mrkt_typ;          /* Ver 2.2 */
  char c_spn_flg = 'N';         /* Ver 2.8 *** Initialized in Ver 3.1 */
  char c_bse_spn_flg;               /* Ver 2.9 */
	char c_ip_address[45+1]="\0";	/** Changed to 45 from 15 in Ver 7.7 **/ /* Ver 3.2 */
  char c_lmt_mrkt_flg ;         /*** Ver 3.4 ***/
  char c_request_typ = 'M' ;    /*** Ver 3.6 ***/
	char c_ord_val_flg = 'N';     /*** Ver 3.7 ***/
	char c_cumopn_val_flg = 'N';     /*** Ver 3.7 ***/
	char c_serv_call_flg = '\0';     /*** Ver 3.7 ***/
	char c_trd_flg;                  /*** Ver 5.3 * ***/
	char c_alias_name[9]; 			/*** Ver 5.3 ***/ 
  char  c_ref[19];   /** Ver 4.8 **/
  /*** char  c_source[10]; ** Ver 4.8 ** Commented in Ver 6.8 ***/ 
  char c_txn_flg='Y';             /*** Ver 6.1 ***/
  char c_sltp_trail_flag='N';   /** Ver 6.4 **/
	char c_trail_allwd_flag='N';  /** Ver 6.4 **/
  long l_init_sltp_rt=0;	 /*** Ver 6.4 ***/
  long l_init_lmt_rt=0;	   /*** Ver 6.4 ***/
  long l_lTP=0;						 /*** Ver 6.4 ***/
  long l_trail_amt=0;			 /*** Ver 6.4 ***/
  long l_lmt_offset=0;		 /*** Ver 6.4 ***/
  char c_prcimpv_flg='\0';	/*** Ver 6.4 ***/
	char c_mtm_flg='\0';  /*** Ver 6.4 ***/
	char c_rmrks[33] = {'\0'};       /** Ver 6.4 **/
  char c_trail_usr_flg='\0';  /*** Ver 6.4 ***/
  char c_prcimp_flg_fxb='\0';  /*** Ver 6.4 ***/
	char c_dlvry_pos_allwd = 'Y'; /*** 7.4 ***/
	char  c_setlmnt_flg = 'C'; 		/*** 7.4 ***/
	char c_ordr_stts1='\0';		/** ver 8.2 **/
  double d_avg_prc = 0; /*** Ver 8.2 ***/
	char c_prft_pend = 'N';	/** ver 8.2 **/
	long	l_prft_amt	=	0;	/** ver 8.2 **/	
  long l_rws_qty = 0; /*** ver 7.2 ***/

	int i_returncode;
	int i_trnsctn;
	int i_err[16];
	int i_ferr[16];
	int i_ip_len;
	int i_op_len;
	int i_actn_id=-1;				/*Ver 2.7 */
  int i_is_dbc_cust = 0 ; /*** Ver 4.3 ***/
  int insider_exist = 0;  /*** Ver 5.7 ***/
	long l_xchng_seq_num;
  long l_ord_lmt_rt=0;  /* Ver 2.1*/
  long l_fsh_ord_lmt_rt=0;  /* Ver 5.6*/
	long l_stp_loss_trgr = 0; 	/***	Ver	2.9	***/
  long l_pending_qty = 0;   /** Ver 4.0 **/
  long l_tmp_ord_tot_qty = 0;   /** Ver 4.4 **/
  long l_tot_ord_qty = 0;   /** Ver 4.7 **/	
  double  d_fum_trail_amt =0;    /** Ver 6.4 **/
	int i=0;                        /** Ver 6.4 **/
	
	double d_fmm_prft_diff_prcnt = 0; /** ver 8.2**/
	char c_fno_dmn_nm [ 16 ];
  char c_fno_trg_nm [ 16 ];
  char c_fno_trg_dat [ 256 ];
  char c_fresh_ord_flg = '\0';   /*** Ver 4.4 ***/
  char c_actn_flg = '\0';      /*** Ver 4.6 ***/
  char c_sltpfp_lmt_allwd_flg = '\0';         /*** Ver 5.6 ***/
  char c_usr_flg = '\0';					 /*** Ver 5.6 ***/
  char c_fc_flag = '\0';
 /*** Ver 3.5 Starts ***/

  char c_vtc_ord='\0';         /*** Ver 4.8 ***/
  char c_fc_flg;
  char c_sltp_allwd_stts;
  char c_sltp_eos_flg;
  char c_frsh_ordr_stts;
  char c_cvr_ordr_stts = '\0';			 /*** Ver 5.6 ***/
  char c_sltp_ordr_refrnc[19];
  char c_narration_id[4];
  char c_ord_flw = '\0';
	char c_temp_slm_flg = '\0';
  long  l_exctd_qty = 0;
  long  l_frsh_xtd_qty = 0;
  long  li_tot_exec_qty = 0;
  long  l_open_qty = 0;
  long li_dsclsd_qty = 0;
  long li_stp_lss_tgr_prc = 0;
  long l_amt = 0;
  long int li_lmt_rt = 0;
  double d_amt_to_be_blckd = 0.0;
  double d_lss_amt_to_be_blckd = 0.0;
  double d_balance_amt = 0.0;
  double d_diff_amt= 0.0;
  double d_diff_loss= 0.0;
  double d_amt_blkd = 0.0;
  double d_lss_amt_blkd  = 0.0;
  double d_diff_amt_blckd = 0.0;
  double d_diff_lss_amt_blckd = 0.0;
  double d_wgt_avrg_price = 0.0;
  double d_fmm_sltp_prcnt= 0.0;
  double d_frsh_exe_val = 0.0;
  double d_fmm_sltp_diff_prcnt = 0.0;
  char c_sys_msg[4];
  int i_mtm_flg = 0;
  /*** Ver 3.5 Ends ***/

  long  l_vtcopnpstn_qty = 0;  /** Ver 4.8 **/
  long  l_vtccvr_qty = 0.0 ;   /** Ver 4.8 **/
  long  l_vtcopn_qty = 0.0 ;   /** Ver 4.8 **/
  long  l_modified_qty=0;      /** Ver 4.8 **/

	/*** Ver 3.7 Starts ***/
	double d_old_ord_val = 0.0 ;	 
	double d_new_ord_val = 0.0 ;	 
	double d_netadj_ord_val = 0.0 ;	 
	/*** Ver 3.7 Ends ***/

  /*  4.2 Starts  */
  double d_required_amt = 0.0;
  char c_insuff_flg = 'N';
  /*  4.2 Ends  */


 /***** Ver 7.2 Starts *****/
  int i_rollover_ord_ind = 0;
  char c_expry_dt2[LEN_DATE];
  char c_sprd_expiry_date1[LEN_DATE];
  char c_sprd_expiry_date2[LEN_DATE];
  long l_sprd_exp1 = 0;
  long l_sprd_exp2 = 0;
  MEMSET(c_expry_dt2);
  MEMSET(c_sprd_expiry_date1);
  MEMSET(c_sprd_expiry_date2);
  /***** Ver 7.2 Ends *****/
  
	/*** Ver 7.6 Starts ***/
  int  i_phy_sqroff_check = 0;
  long l_quote_zero = 0;
  long l_best_bid_price = 0;
  long l_best_offer_price = 0;
  long l_previous_close_price = 0;
  /*** Ver 7.6 Ends ***/

	/*** ver 8.2 start ***/
  char c_buy_allwd = '\0';
  char c_sell_allwd = '\0';
  /*** ver 8.2 end ***/
  
  char c_mrkt_ordr_flg = '\0'; /** ver 8.4 ***/

	char c_ref_rmrks[100] = "\0";			 /*** Ver 7.9 ***/
	char	c_tmp_rmrks [ 100 ] = "\0";	 /*** Ver 7.9 ***/
    double d_comp1_mrgn = 0.0;  /*** Ver 7.9 ***/
    double d_comp1_pl = 0.0;    /*** Ver 7.9 ***/
    double d_xchng_amt = 0.0;   /*** Ver 7.9 ***/


  TPTRANID tranid  ; /*** Ver 4.6 ***/

	EXEC SQL BEGIN DECLARE SECTION;
		struct vw_contract st_cntrct;
		struct vw_usr_prfl st_usr_prfl;
		struct vw_orderbook st_i_ordbook;
		struct vw_orderbook st_o_ordbook;
		struct vw_orderbook st_op_ordbook;  /*** Ver 3.7 ***/
    struct vw_xchngbook st_xchngbook;
		varchar c_trd_dt[LEN_DATE];
		varchar c_sysdate[LEN_DATE];
    varchar c_usr_trd_psswrd[ 50 + 1 ];
    varchar c_expiry_dt [ LEN_DATE ];  /** Ver 4.8 **/
		struct vw_contract st_cntrct_ins;  /** Ver 8.1 **/
	EXEC SQL END DECLARE SECTION;

	struct vw_err_msg st_err_msg;
  struct vw_sequence st_r_sequence;
  struct vw_sequence st_s_sequence;
  struct vw_pstn_actn st_pstn_actn;
	struct vw_cntrt_gen_inf st_cntrct_gen_inf;
	struct vw_cntrct_qt st_cntrct_qt;
  struct vw_xchngbook st_s_xchngbk;
  struct vw_xchngbook st_d_xchngbk;
	MEMSET(st_err_msg); 							/*** Ver 3.7 ***/
  MEMSET(st_xchngbook);             /*** Ver 4.5 ***/
  MEMSET(st_op_ordbook);            /*** Ver 4.5 ***/

  MEMSET(c_temp_psswrd) ;    /** Ver 4.2 **/
  MEMSET(c_usr_trd_psswrd);  /** Ver 4.2 **/
	MEMSET(st_o_ordbook);   /*** Ver 6.4 ***/
	MEMSET(st_i_ordbook);   /*** Ver 6.4 ***/
  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);

	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_usr_prfl,
                           "vw_usr_prfl" );
	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7 **/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/  
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  **/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_xchngbook,
                           "vw_xchngbook" );
	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  /***  Ver 4.3 Starts  ***/
	if(DEBUG_MSG_LVL_3) /*** DEBUG_MSG_LVL_3 Added in Ver 6.2 ****/
	{
		fn_userlog(c_ServiceName," st_usr_prfl.c_user_id[0] Is :%c:",st_usr_prfl.c_user_id[0]);
	}
	if(DEBUG_MSG_LVL_0) /*** DEBUG_MSG_LVL_0 Added in Ver 6.2 ****/
	{
		fn_userlog(c_ServiceName," st_usr_prfl.c_user_id Is :%s:",st_usr_prfl.c_user_id);
	}

    /**** Ver 6.4 Starts Here ****/
		MEMSET(c_rmrks);

    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_BNK_TRN_TYP,0,(char *)&c_sltp_trail_flag,0);
    i_ferr [0] = Ferror32;
		i_err[1] = Fget32(ptr_fml_Ibuf,FFO_SYMBOL,0,(char *)c_rmrks,0);
    i_ferr [1] = Ferror32;
		i_err[2] = Fget32(ptr_fml_Ibuf,FFO_LST_TRD_PRC, 0, (char *)&l_lTP, 0);
    i_ferr [2] = Ferror32;

		for( i = 0; i < 3; i++)
		{
			if (( i_err[i] == -1 ) && ( i_ferr [i] != FNOTPRES ))
			{
				fn_errlog( c_ServiceName, "S31015", Fstrerror32(i_ferr[0]),c_err_msg);
				fn_userlog( c_ServiceName, "Failed to get :%d:", i);
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}

		rtrim(c_rmrks);

    /**** Ver 6.4 Ends Here ****/

	/*************** Ver 5.3 Starts ******************/
	
	/*  Ver 5.6 Starts  */

  /*** Commented in Ver 7.1 as data-type of FML used is long and variable data-type is char ***
	i_err[0] = Fget32( ptr_fml_Ibuf, FFO_USR_FLG , 0,(char *)&c_usr_flg,0);
  ***/

  i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_CLSR_TYP,0,(char *)&c_usr_flg,0); /*** Ver 7.1 ***/
	i_ferr [0] = Ferror32;
	if (( i_err[0] == -1 ) && ( Ferror32 != FNOTPRES ))
	{
	 fn_errlog( c_ServiceName, "S31020", Fstrerror32(i_ferr[0]),c_err_msg);
	 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
	 {	
     fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                        /** Ver 6.4 **/
	 }	
	 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	if(DEBUG_MSG_LVL_3) /** DEBUG_MSG_LVL_3 Added in Ver 6.2 ****/
	{
		fn_userlog(c_ServiceName,"wrapper flag11111111111111111111111111111111111111111111111 :%c: l_ord_lmt_rt : %ld c_slm_flg : %c  c_ordr_rfrnc: %s ",c_usr_flg,st_xchngbook.l_ord_lmt_rt, st_xchngbook.c_slm_flg, st_xchngbook.c_ordr_rfrnc);
	}
	/*  Ver 5.6 Ends  */

  /* Ver 6.6 Starts */
  if(c_usr_flg == 'W')
  {
    MEMSET(c_ip_address);

    i_err[1] = Fget32( ptr_fml_Ibuf, FFO_OI_INDCTR, 0,(char *)c_ip_address,0);
    i_ferr [1] = Ferror32;

    if (( i_err[1] == -1 ) && ( Ferror32 != FNOTPRES ))
    {
      fn_errlog( c_ServiceName, "S31025", Fstrerror32(i_ferr[1]),c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName, "c_ip_address is...:%s:",c_ip_address);
  }
  /* Ver 6.6 Ends */

	  MEMSET(c_bp_id);
    MEMSET(c_alias_name);
    c_trd_flg ='\0';
    c_spn_flg='\0';
    c_bse_spn_flg='\0';
 
	  EXEC SQL
				SELECT  CLM_TRD_FLG,
					    	nvl(CLM_BP_ID,'*'),
	            	nvl(CLM_SPAN_ALLWD,'N'),
	            	nvl(CLM_BSESPAN_ALLWD,'N'),
	            	nvl(clm_alias_name,'*')
        INTO	  :c_trd_flg,
								:c_bp_id,
								:c_spn_flg,
								:c_bse_spn_flg,
								:c_alias_name
				FROM 		CLM_CLNT_MSTR
				WHERE	  CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt; 

	if( SQLCODE != 0 )
  {

    fn_errlog(c_ServiceName, "S31030", SQLMSG, c_err_msg);
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
 		{   
    	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
		}
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

	rtrim(c_bp_id);
  rtrim(c_alias_name);

  if(DEBUG_MSG_LVL_3) /*** DEBUG_MSG_LVL_3 Added in Ver 6.2 ***/
	{
		fn_userlog(c_ServiceName,"Trade flag :%c:",c_trd_flg);
		fn_userlog(c_ServiceName,"BP id :%s:",c_bp_id);
		fn_userlog(c_ServiceName," NSE span flag :%c:,Bse Span Flag :%c:",c_spn_flg,c_bse_spn_flg);
		fn_userlog(c_ServiceName,"Nick Name :%s:",c_alias_name);
	}
	/**************** Ver 5.3 Ends ************/

 if(st_usr_prfl.c_user_id[0] != BPID )
  {
      if(DEBUG_MSG_LVL_3) /** DEBUG_MSG_LVL_3 Added in Ver 6.2 **/
			{
				fn_userlog(c_ServiceName," Inside check if client Attached to a Direct Business Catalyst ");
			}
		i_is_dbc_cust = 0;


		/********** Commented in Ver 5.3 ************
    EXEC SQL
        SELECT 1
            INTO :i_is_dbc_cust
        FROM  CLM_CLNT_MSTR
        WHERE CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
        AND   CLM_TRD_FLG = 'N'
        AND   CLM_BP_ID IS NOT NULL;

    if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
    {
        fn_userlog(c_ServiceName, "Failed in check of DBC client mapped .");
        fn_errlog(c_ServiceName, "S31035", SQLMSG, c_err_msg);
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
    }

		if ( i_is_dbc_cust == 1 )
    {
       fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst, this facility has been Disabled");
       fn_errlog( c_ServiceName, "B35018", "", c_err_msg  );
       Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
    }
		************** Ver 5.3 Comment Ends ***************/

		if(c_trd_flg=='N' && strcmp(c_bp_id,"*")!=0) /*** Ver 5.3 ***/ 
		{
		  	fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst, this facility has been Disabled");
        fn_errlog( c_ServiceName, "B35018", "", c_err_msg  );
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	  {
      		fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    		}
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
		}
  }

  /***  Ver 4.3  Ends  ***/

   /*** Ver 7.8 Starts ***/

  if(st_usr_prfl.c_user_id[0] ==BPID)
   {
     if( fn_simaltns_ssn_term ( c_ServiceName,st_usr_prfl.c_user_id,st_usr_prfl.l_session_id,st_usr_prfl.c_cln_mtch_accnt,c_err_msg) == -1 )
     {
      fn_errlog(c_ServiceName,"S31040","Error while checking simultaneous active session",c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

  /*** Ver 7.8 Ends ***/

		/*** Ver 5.7 Starts ***/

/*****  commented in ver 6.7  *****
 i_returncode = fn_chk_und_insider(c_ServiceName,
                                    st_usr_prfl,
                                    st_cntrct.c_undrlyng,
                                    &insider_exist);
  if (i_returncode == -1)
  {
      fn_errlog( c_ServiceName, "S31045", "Error in Function fn_chk_und_insider", c_err_msg);
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     ** Ver 6.4 **
    	{
      	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       ** Ver 6.4 **
    	}	
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
   }

  if (insider_exist == 1)
  {
      fn_errlog( c_ServiceName, "B21042", DEFMSG, c_err_msg  );
		  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     ** Ver 6.4 **
    	{
      	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       ** Ver 6.4 **
    	}
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
   }

	*********** Ver 6.7 Ends **************/

 /*** Ver 5.7 Ends ***/

 /**************** Commented in Ver 5.3 ************** 
 
		***  Ver 2.8 SPAN Flag Check ***

  EXEC SQL
    SELECT  NVL(CLM_SPAN_ALLWD,'N'),
						NVL(CLM_BSESPAN_ALLWD,'N')				*** Ver 2.9 **
    INTO    :c_spn_flg,
						:c_bse_spn_flg										** Ver 2.9 **
    FROM    CLM_CLNT_MSTR
    WHERE   CLM_MTCH_ACCNT  = :st_usr_prfl.c_cln_mtch_accnt;

  if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName, "Failed To Get SPAN Flag.");
    fn_errlog(c_ServiceName, "S31050", SQLMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

	******************* Ver 5.3 Comment Ends *********************/
  if( DEBUG_MSG_LVL_3 ) /** DEBUG_MSG_LVL_3 Added in Ver 6.2 ***/
	{
		fn_userlog(c_ServiceName,"SPAN Allowed Flag Is :%c:",c_spn_flg);
		fn_userlog(c_ServiceName,"BSE SPAN Allowed Flag Is :%c:",c_bse_spn_flg); /** Ver 2.9 **/
	}
 /* if ( c_spn_flg == 'Y' )		**** Ver 2.9 comment ***/
 /*** Commented in Ver 4.0 ***
  if ( ( c_spn_flg == 'Y' 		&& strcmp(st_xchngbook.c_xchng_cd,"NFO")== 0 ) ||
			 ( c_spn_flg == 'Z' 		&& strcmp(st_xchngbook.c_xchng_cd,"NFO")== 0 ) ||			*** Ver 3.1 ***
			 ( c_bse_spn_flg == 'Y' && strcmp (st_xchngbook.c_xchng_cd,"BFO") == 0)
		 )
  {
    fn_userlog(c_ServiceName, "SPAN Customer Trying To Place Order Under Normal Margining System.");
    strcpy(c_err_msg,"You Are Marked Under SPAN. Can Modify Order Only Through New Site.");
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  } 
	***/
 		 /**** END Ver 2.8 ***/

	 /***1.1 start ***/

	memset(c_alias,'\0',sizeof(c_alias)); /* Ver 1.9 */
	memset(c_channel,'\0',sizeof(c_channel)); /* Ver 1.9 */

    if(st_usr_prfl.c_user_id[0] == BPID)
    {
      if(Fget32(ptr_fml_Ibuf,FFO_ALIAS,0,(char *)c_alias,0) == -1)
      {
            fn_errlog( c_ServiceName, "S31055", FMLMSG, c_err_msg  );
						if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    			  {
      				fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    				}
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
            Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
            Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
	/***************** commented in Ver 5.3 *******************
      EXEC SQL
        SELECT 1
        INTO   :i_level_exists
        FROM   clm_clnt_mstr
        WHERE  clm_mtch_accnt = :st_usr_prfl.c_cln_mtch_accnt and
               clm_bp_id      = :st_usr_prfl.c_user_id and
               clm_alias_name = :c_alias ;

      fn_userlog(c_ServiceName,"BP alias  is :%s:",c_alias);
      fn_userlog(c_ServiceName,"BP channel  is :%s:",c_channel);
 
	    if(i_level_exists != 1 )
      {
            fn_errlog( c_ServiceName, "B55006", "", c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
 
	******************** Ver 5.3 Comment Ends ******************/
  
			if(strcmp(c_alias_name,c_alias)!=0 )/*** Ver 5.3 ****/
			{
						fn_errlog( c_ServiceName, "B55006", "", c_err_msg  );
						if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    			  {
      			  fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    				}
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
            Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
            Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
      strcpy(c_bp_id,st_usr_prfl.c_user_id);
    }
    else
    {
      strcpy(c_bp_id," ");
    }
  if(DEBUG_MSG_LVL_3){
    fn_userlog(c_ServiceName,"The BP id is :%s: ,:%s:", c_bp_id,st_usr_prfl.c_user_id);
    fn_userlog(c_ServiceName,"The Alias is :%s: ", c_alias);
    fn_userlog(c_ServiceName,"BP channel  is :%s:",c_channel);
  }

  /***1.1 End  ***/

	if(DEBUG_MSG_LVL_3)
	{
    fn_userlog( c_ServiceName, "User id       :%s:", st_usr_prfl.c_user_id );
    fn_userlog( c_ServiceName, "Session id    :%ld:", st_usr_prfl.l_session_id );
    fn_userlog( c_ServiceName, "Match Account :%s:", st_usr_prfl.c_cln_mtch_accnt );
    fn_userlog( c_ServiceName, "Order Reference no  :%s:", st_xchngbook.c_ordr_rfrnc );
    fn_userlog( c_ServiceName, "Lmt/Mkt/StpLss:%c:", st_xchngbook.c_slm_flg );
    fn_userlog( c_ServiceName, "GTT/GTD Order :%c:", st_xchngbook.c_ord_typ );
    fn_userlog( c_ServiceName, "Valid date    :%s:", st_xchngbook.c_valid_dt );
    fn_userlog( c_ServiceName, "Disclosed Qty :%ld:", st_xchngbook.l_dsclsd_qty );
    fn_userlog( c_ServiceName, "Stop Loss Trgg:%ld:", st_xchngbook.l_stp_lss_tgr );
    fn_userlog( c_ServiceName, "Order Qty     :%ld:", st_xchngbook.l_ord_tot_qty );
    fn_userlog( c_ServiceName, "Limit Rate    :%ld:", st_xchngbook.l_ord_lmt_rt );
    fn_userlog( c_ServiceName, "Pipe id      :%s:", st_xchngbook.c_pipe_id );
		fn_userlog( c_ServiceName, "Xchng_cd     :%s:", st_xchngbook.c_xchng_cd ); /** ver 3.4 **/
  }

  /*** Ver 6.3 starts *****/
  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName, "Order Reference no:%s:Lmt/Mkt/StpLss:%c:GTT/GTD Order :%c:Valid date:%s:",st_xchngbook.c_ordr_rfrnc,st_xchngbook.c_slm_flg,st_xchngbook.c_ord_typ,st_xchngbook.c_valid_dt);
    fn_userlog( c_ServiceName, "Stop Loss Trgg:%ld:Order Qty:%ld:Limit Rate:%ld:",st_xchngbook.l_stp_lss_tgr,st_xchngbook.l_ord_tot_qty,st_xchngbook.l_ord_lmt_rt);
  } 
  /*** Ver 6.3 Ends here ***/  

  /** Ver 4.1 Starts **/
  MEMSET(st_xchngbook.c_pipe_id);
  st_xchngbook.c_pipe_id[0]=st_xchngbook.c_ordr_rfrnc[8];
  st_xchngbook.c_pipe_id[1]=st_xchngbook.c_ordr_rfrnc[9];
  st_xchngbook.c_pipe_id[2]='\0';

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, " After change Pipe id :%s:", st_xchngbook.c_pipe_id );
  }
  /** Ver 4.1 Ends **/
	
  /*** c_temp_slm_flg = st_xchngbook.c_slm_flg; *** Ver 3.5 *** Commented In Ver 4.7 & moved down  ***/
	
  /**********1.5 Starts *********************/
  if(st_xchngbook.c_ord_typ == GOOD_TILL_DATE)
  {
    fn_userlog( c_ServiceName, "GTD Orders are not allowed for FNO from 30-07-2004");
    fn_errlog( c_ServiceName, "B28572", "", c_err_msg  );
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /********** 1.5 Ends  *********************/

	/***	Ver	2.7	Starts	***/
	
	if(	st_xchngbook.l_stp_lss_tgr > 0	)
	{
    /*** Ver 3.4 Starts ****/
    if(strcmp(st_xchngbook.c_xchng_cd,"BFO") == 0 )
    {
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Checking Limit Market Flag before modification to SLTP for BFO");
      }
      EXEC SQL
          SELECT fod_lmt_mrkt_sl_flg
          INTO   :c_lmt_mrkt_flg
          FROM   fod_fo_ordr_dtls
          WHERE  fod_xchng_cd='BFO'
          AND    fod_ordr_rfrnc = :st_xchngbook.c_ordr_rfrnc
          AND    fod_mdfctn_cntr = (select max(FXB_MDFCTN_CNTR)
                                    from  fxb_fo_xchng_book
                                    where  FXB_ORDR_RFRNC = :st_xchngbook.c_ordr_rfrnc
                                   ) ;
      if(SQLCODE != 0)
      {
        fn_userlog( c_ServiceName, "failed in geting Limit Market flag for BSE ordr");
        fn_errlog( c_ServiceName, "S31060", "Invalid SLM Flag", c_err_msg  );
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    		{
      		fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    		}
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Limit Market flag from FOD is :%c:",c_lmt_mrkt_flg);
      }
      if(c_lmt_mrkt_flg !='S')
      {
        sprintf(st_err_msg.c_err_msg,"Please note orders cannot be modified from Limit to SLTP");
        fn_errlog(c_ServiceName,"S31065","Please note orders cannot be modified from Limit to SLTP",c_err_msg);
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    		{	
      		fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    		}
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    /*** Ver 3.4 Ends ***/
		if(DEBUG_MSG_LVL_3) /**** DEBUG_MSG_LVL_3 Added in Ver 6.2 **/
		{
			fn_userlog(c_ServiceName,"Inside Stop Loss Trigger Price Check.");
		}
		st_xchngbook.c_slm_flg  = 'S' ;
		if (DEBUG_MSG_LVL_3) /**** Added in Ver 6.2 ****/
		{
			fn_userlog(c_ServiceName," SLM Flag Is :%c:",st_xchngbook.c_slm_flg);
		}
	}

	/***	Ver	2.7	Ends	***/
  c_temp_slm_flg = st_xchngbook.c_slm_flg;  /*** Ver 4.7  ***/

	/**********2.5 Starts *********************/

  if(st_xchngbook.c_slm_flg !='L' && st_xchngbook.c_slm_flg  != 'S' && st_xchngbook.c_slm_flg !='M' )
  {
    fn_userlog( c_ServiceName, "c_slm_flg is NULL");
    fn_errlog( c_ServiceName, "S31070", "Invalid SLM Flag", c_err_msg  );
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  if(st_xchngbook.c_ord_typ !='T' && st_xchngbook.c_ord_typ  != 'I'  && st_xchngbook.c_ord_typ  != 'V' ) /** Ver 4.8 'V' **/ 
  {
    fn_userlog( c_ServiceName, "ORDER TYPE is NULL");
    fn_errlog( c_ServiceName, "S31075", "Invalid Order Type", c_err_msg  );
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /********** 2.5 Ends  *********************/

  /**********1.6 Starts *********************/

  /******* Commented in ver 3.6
  i_returncode=fn_chk_closeout(c_ServiceName,
                               &st_xchngbook,
                               &st_err_msg);

  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31080", "Broker Under Closeout", c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		**Ver 2.7**
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  *****************************************/

  /**********1.6 Ends*********************/
	

	fn_init_ddr_pop ( st_xchngbook.c_pipe_id,TRADING_SECTION,F_CS);

  c_trdng_psswrd_flg = YES;

  i_err[0] = Fget32( ptr_fml_Ibuf, FFO_TRD_PSSWD, 0,
                         (char *)c_usr_trd_psswrd.arr,0);
  i_ferr [0] = Ferror32;
  if (( i_err[0] == -1 ) && ( Ferror32 != FNOTPRES ))
  {
     fn_errlog( c_ServiceName, "S31085", Fstrerror32(i_ferr[0]),c_err_msg);
		 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
     {
       fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
     }
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
     Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
     Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
/**Commented for Ver 2.1
  else if (( i_err[0] == -1 ) && ( Ferror32 == FNOTPRES ))
  {
      c_trdng_psswrd_flg = NO;
  }
  else 
  {
      c_trdng_psswrd_flg = YES;
  }
*****/

/**Ver 2.1 starts **/
	if ( st_xchngbook.c_slm_flg == MARKET )
	{
		strcpy ( st_i_ordbook.c_ordr_rfrnc,st_xchngbook.c_ordr_rfrnc);
		st_i_ordbook.c_oprn_typ = FOR_VIEW;

		i_ip_len = sizeof ( struct vw_orderbook );
		i_op_len = sizeof ( struct vw_orderbook );

		fn_cpy_ddr ( st_i_ordbook.c_rout_crt );
		i_returncode = fn_call_svc( c_ServiceName,
																c_err_msg,
																&st_i_ordbook,
																&st_o_ordbook,
																"vw_orderbook",
																"vw_orderbook",
																i_ip_len,
																i_op_len,
																0,
																"SFO_REF_TO_ORD" );

		if ( i_returncode != SUCC_BFR )
		{
			fn_errlog( c_ServiceName, "S31090",LIBMSG,c_err_msg);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	{
      	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    	}
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
	    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
  		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		rtrim( st_o_ordbook.c_expry_dt );
		st_cntrct.l_eba_cntrct_id = st_o_ordbook.l_eba_cntrct_id;
		strcpy( st_cntrct.c_xchng_cd, st_o_ordbook.c_xchng_cd );
		st_cntrct.c_prd_typ = st_o_ordbook.c_prd_typ;
		strcpy( st_cntrct.c_undrlyng , st_o_ordbook.c_undrlyng  );
		strcpy( st_cntrct.c_expry_dt,  st_o_ordbook.c_expry_dt );
		st_cntrct.c_exrc_typ = st_o_ordbook.c_exrc_typ;
		st_cntrct.c_opt_typ = st_o_ordbook.c_opt_typ;
		st_cntrct.l_strike_prc =  st_o_ordbook.l_strike_prc;
		st_cntrct.c_ctgry_indstk = st_o_ordbook.c_ctgry_indstk;
		st_cntrct.l_ca_lvl = st_o_ordbook.l_ca_lvl;

		fn_userlog(c_ServiceName,"ip_adress is ******:%s:",c_ip_address); /***Test ***/
		
    /*** Commented in Ver 5.2 ***
		i_ip_len = sizeof ( struct vw_contract );
		i_op_len = sizeof ( struct vw_cntrct_qt );

		fn_cpy_ddr ( st_cntrct.c_rout_crt );
		i_returncode = fn_call_svc( c_ServiceName,
																c_err_msg,
																&st_cntrct,
																&st_cntrct_qt,
																"vw_contract",
																"vw_cntrct_qt",
																i_ip_len,
																i_op_len,
																0,
																"SFO_GET_QT" );
	  *** Ver 5.2 comment ends ***/
    
    /*** Ver 5.2 Starts ***/

    i_returncode = fn_get_qt( c_ServiceName,
                            &st_cntrct,
                            &st_cntrct_qt,
 	                           c_err_msg );   


    /*** Ver 5.2 Ends ***/
  
  	if ( i_returncode != SUCC_BFR )
		{
			fn_errlog( c_ServiceName, "S31095",LIBMSG,c_err_msg);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	{
      	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    	}
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
	    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/		
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
			l_ord_lmt_rt = st_cntrct_qt.l_lst_trdd_prc;
	}
	else
	{
		l_ord_lmt_rt = st_xchngbook.l_ord_lmt_rt;
	}

    /**Call function for trading limit check **/
    i_returncode = fn_chk_trdng_limit(c_ServiceName,
                                      st_xchngbook.l_ord_tot_qty,
                                      l_ord_lmt_rt,
                                      &c_trdng_psswrd_flg,
                                      &st_usr_prfl,
                                      &st_err_msg );
    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31100", LIBMSG, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	{
      	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    	}
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
/**Ver 2.1 ends **/

	if ( c_trdng_psswrd_flg == YES )
	{
  	SETLEN( c_usr_trd_psswrd ) ;
    strcpy( c_temp_psswrd, (char *)c_usr_trd_psswrd.arr );
	}

	/*** Ver 3.7 Starts ***/

  /**Call function for Ord Value Max limit check **/
  c_ord_val_flg = 'N' ;
  c_cumopn_val_flg = 'N' ;
	c_serv_call_flg = 'M';     /*** Set to 'M' for modification call ***/


	/**** Calculating Net modification value  																										 	****/
	/**** Here we are subtracting the old open val of the order calulated further in the function , ****/
	/**** while adding the new open val of the same  .Thus , the net value is the  total of	the	old	****/
	/****	open val and  the new open val	.																													****/
	/****	Net Qty = [(New qty - Executed qty - cancelled qty)*new rate ]														****/
	/****					- [(Old qty - Executed qty - cancelled qty)*old rate ]														****/
	/****	Executed qty ,cancelled qty and old rate are from fod table			 													****/


	/*** Calling SFO_REF_TO_ORD as it is called only for Market case ***/
	
	strcpy ( st_i_ordbook.c_ordr_rfrnc,st_xchngbook.c_ordr_rfrnc);
  st_i_ordbook.c_oprn_typ = FOR_VIEW;

  i_ip_len = sizeof ( struct vw_orderbook );
  i_op_len = sizeof ( struct vw_orderbook );

  fn_cpy_ddr ( st_i_ordbook.c_rout_crt );

  i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_i_ordbook,
                                &st_op_ordbook,
                                "vw_orderbook",
                                "vw_orderbook",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_REF_TO_ORD" );

  if ( i_returncode != SUCC_BFR )
  {
     fn_errlog( c_ServiceName, "S31105",LIBMSG,c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
     {
       fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
     }
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
     Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
     Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

 /*** Ver 8.5 starts ***/
  fn_userlog( c_ServiceName, "before st_xchngbook.c_ordr_flw:%c:",st_xchngbook.c_ordr_flw);
  if(st_xchngbook.c_ordr_flw !='B' && st_xchngbook.c_ordr_flw != 'S')
  {
    st_xchngbook.c_ordr_flw= st_op_ordbook.c_ordr_flw;
  }
  fn_userlog( c_ServiceName, "after st_xchngbook.c_ordr_flw:%c:",st_xchngbook.c_ordr_flw);
 /*** Ver 8.5 ends ***/

  /*** Ver 7.5 Starts ***/

   if( st_op_ordbook.c_prd_typ != 'U'  )
   {
    i_returncode = fn_disallow_frsh_expsre(c_ServiceName,
                                           st_usr_prfl.c_cln_mtch_accnt,
                                           c_spn_flg,
                                           st_xchngbook.c_ordr_flw,
                                           st_xchngbook.l_ord_tot_qty,
                                           st_o_ordbook.l_ord_tot_qty,
                                           &st_cntrct,
                                           &st_err_msg );

    if(i_returncode == -1 || i_returncode == -2)
    {
      fn_errlog( c_ServiceName, "S31110", "Error in Function fn_disallow_frsh_expsre", c_err_msg  );
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg , 0);
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
    }
   }
  /*** Ver 7.5 Ends ***/

  /*** Ver 6.0 Starts ***/
	 /** Ver 8.1 starts *****/
		MEMSET(st_cntrct_ins);	
		st_cntrct_ins.l_eba_cntrct_id = st_o_ordbook.l_eba_cntrct_id;
		strcpy( st_cntrct_ins.c_xchng_cd, st_o_ordbook.c_xchng_cd );
		st_cntrct_ins.c_prd_typ = st_o_ordbook.c_prd_typ;
		strcpy( st_cntrct_ins.c_undrlyng , st_o_ordbook.c_undrlyng  );
		strcpy( st_cntrct_ins.c_expry_dt,  st_o_ordbook.c_expry_dt );
		st_cntrct_ins.c_exrc_typ = st_o_ordbook.c_exrc_typ;
		st_cntrct_ins.c_opt_typ = st_o_ordbook.c_opt_typ;
		st_cntrct_ins.l_strike_prc =  st_o_ordbook.l_strike_prc;
		st_cntrct_ins.c_ctgry_indstk = st_o_ordbook.c_ctgry_indstk;
	 /** Ver 8.1 ends *****/
  /******* Added in ver 6.7 starts **************/

	fn_userlog(c_ServiceName, " st_op_ordbook.c_undrlyng is :%s:",st_op_ordbook.c_undrlyng );
 i_returncode = fn_chk_und_insider(c_ServiceName,
                                    st_usr_prfl,
																		st_cntrct_ins,					/** Ver 8.1 **/
                                    /**st_op_ordbook.c_undrlyng,  ** Ver 8.1 comment**/
                                    &insider_exist);
  if (i_returncode == -1)
  {
      fn_errlog( c_ServiceName, "S31115", "Error in Function fn_chk_und_insider", c_err_msg);
      if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      {
        fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      }
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
   }

  if (insider_exist == 1)
  {
      fn_errlog( c_ServiceName, "B91164", DEFMSG, c_err_msg  );		/** Ver 8.1 B21042 changed to B91164 **/
      if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      {
        fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      }
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
   }
  /******* Added in ver 6.7 Ends  **************/

   rtrim(st_op_ordbook.c_cln_mtch_accnt);
   rtrim(st_usr_prfl.c_cln_mtch_accnt);

   if(DEBUG_MSG_LVL_1)   /**** Ver 6.3 debug changed from 0 to 1 ***/
   {
    fn_userlog(c_ServiceName,"Input Match Account Is :%s:",st_usr_prfl.c_cln_mtch_accnt);
    fn_userlog(c_ServiceName,"Order Book Match Account Is :%s:",st_op_ordbook.c_cln_mtch_accnt);
   }

   if ( strcmp(st_op_ordbook.c_cln_mtch_accnt,st_usr_prfl.c_cln_mtch_accnt) != 0 )
   {
    fn_userlog(c_ServiceName,"Invalid Combination of Order Reference And Match Account.");
    fn_errlog(c_ServiceName, "S31120", "Invalid Combination of Order Reference And Match Account.", c_err_msg);
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }
    strcpy(c_err_msg,"Invalid Combination of Order Reference And Match Account.");
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

   /*** Ver 6.0 Ends   ***/ 

	if(DEBUG_MSG_LVL_3) 
  {
		fn_userlog( c_ServiceName, " st_op_ordbook.l_ord_tot_qty :%ld:",st_op_ordbook.l_ord_tot_qty);
  	fn_userlog( c_ServiceName, " st_op_ordbook.l_exctd_qty   :%ld:",st_op_ordbook.l_exctd_qty);
  	fn_userlog( c_ServiceName, " st_op_ordbook.l_can_qty :%ld:",st_op_ordbook.l_can_qty);
  	fn_userlog( c_ServiceName, " st_op_ordbook.l_ord_lmt_rt :%ld:",st_op_ordbook.l_ord_lmt_rt);
  	fn_userlog( c_ServiceName, " st_xchngbook.l_ord_tot_qty :%ld:",st_xchngbook.l_ord_tot_qty);
  	fn_userlog( c_ServiceName, " l_ord_lmt_rt :%ld:",l_ord_lmt_rt);
  }

  if (st_op_ordbook.c_prd_typ == SLTP_FUTUREPLUS) /*** Ver 4.5 ***/
  {
    if ( st_xchngbook.l_ord_tot_qty != st_op_ordbook.l_ord_tot_qty )
    {
      fn_userlog( c_ServiceName, "User is not allowed to modify FP SLTP order qty : Input Total ordered qty :%ld: and OrderBook qty :%ld: ",st_xchngbook.l_ord_tot_qty,st_op_ordbook.l_ord_tot_qty);
      fn_errlog( c_ServiceName, "B22008",DEFMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	{
      	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    	}
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
	
	d_old_ord_val = ((double)st_op_ordbook.l_ord_tot_qty - (double)st_op_ordbook.l_exctd_qty - (double)st_op_ordbook.l_can_qty) 									* (double)st_op_ordbook.l_ord_lmt_rt ;
	d_new_ord_val = ((double)st_xchngbook.l_ord_tot_qty - (double)st_op_ordbook.l_exctd_qty - (double)st_op_ordbook.l_can_qty) 									*  (double)l_ord_lmt_rt ;
	d_netadj_ord_val = d_new_ord_val - d_old_ord_val ; 

	if(DEBUG_MSG_LVL_3) 
  {
  	fn_userlog( c_ServiceName, " d_old_ord_val :%lf:",d_old_ord_val);
  	fn_userlog( c_ServiceName, " d_new_ord_val :%lf:",d_new_ord_val);
  	fn_userlog( c_ServiceName, " d_netadj_ord_val :%lf:",d_netadj_ord_val);

  }

  i_returncode = fn_chk_ord_max_limit(c_ServiceName,
                                      st_usr_prfl.c_cln_mtch_accnt ,
                                      st_xchngbook.l_ord_tot_qty,
                                      l_ord_lmt_rt,
                                      d_netadj_ord_val,
                                      c_serv_call_flg,
                                      st_xchngbook.c_slm_flg,
                                      st_xchngbook.c_xchng_cd,
                                      &c_ord_val_flg,
                                      &c_cumopn_val_flg,
                                      &st_err_msg );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31125", LIBMSG, c_err_msg );
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	if(DEBUG_MSG_LVL_3) /** DEBUG_MSG_LVL_3 Added in Ver 6.2 **/
	{
		fn_userlog( c_ServiceName, "c_ord_val_flg     :%c:", c_ord_val_flg );
		fn_userlog( c_ServiceName, "c_cumopn_val_flg  :%c:", c_cumopn_val_flg );
	}
  if(c_cumopn_val_flg == 'Y')
  {
    fn_userlog( c_ServiceName, "Order Value exceeding max Cumulative open order value.");
    fn_errlog( c_ServiceName, "B21077", "DEFMSG", c_err_msg  );
		strcat(c_err_msg,st_err_msg.c_err_msg);
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

  if(c_ord_val_flg == 'Y')
  {
    fn_userlog( c_ServiceName, "Order value Exceeding Max Market/Limit value allowed.");
    fn_errlog( c_ServiceName, "B23035", "DEFMSG", c_err_msg  );
		strcat(c_err_msg,st_err_msg.c_err_msg);
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

  /*** Ver 3.7 Ends ***/


	/*** Commented in Ver 3.2 ***
  i_returncode =  fn_check_user ( c_ServiceName,
                                  &st_usr_prfl ,
                                  c_temp_psswrd,
                                  c_trdng_psswrd_flg,
                                  &st_err_msg );
	*****************************/
	/*** Added in Ver 3.2 ***/

    fn_userlog( c_ServiceName, "st_usr_prfl.c_user_id************:%s:",st_usr_prfl.c_user_id);
    fn_userlog( c_ServiceName, "c_sltp_trail_flag***************:%c:",c_sltp_trail_flag);

	/*  If condiftion added in Ver 5.6 Starts  */
	if(c_usr_flg != 'W')
	{
			/*** Ver 6.4 Starts here ***/
		if((strcmp( st_usr_prfl.c_user_id, "system") == 0 && c_sltp_trail_flag == 'Y'))
		{
			c_trdng_psswrd_flg='N';
		}
			/*** Ver 6.4 Ends Here ***/
	i_returncode =  fn_check_user_ip ( c_ServiceName,
																		 &st_usr_prfl ,
																		 c_temp_psswrd,
																		 c_trdng_psswrd_flg,
																		 c_ip_address,
                                     c_txn_flg,                   /*** Ver 6.1 ***/
																		 &st_err_msg );
		/*************************/

	  if ( i_returncode == -1 )
	  {
		 fn_errlog( c_ServiceName, "S31130", LIBMSG, c_err_msg );
		 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
     {
       fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
     } 	
		 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );

				/**Ver 2.7 starts**/
				if(c_trdng_psswrd_flg == 'Y')
				{	
					i_actn_id = 1;
				}
				else
				{
					i_actn_id = -1;
				}

		  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		
				/**Ver 2.7 ends**/
		 Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
		 Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
		 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	  }
	}
	/*  Ver 5.6 Ends  */
	
	fn_userlog(c_ServiceName,"ip_adress is ******:%s:",c_ip_address); /***Test ***/
	if(DEBUG_MSG_LVL_3)	/*** Ver 3.2 ***/
	{
		fn_userlog(c_ServiceName,"ip address:%s:",c_ip_address);
	}

		  /****** Ver 6.4 Starts *****************/
		if( strcmp( st_usr_prfl.c_user_id, "system") == 0 && c_sltp_trail_flag == 'Y' )
		{
			MEMSET(c_ip_address);
			strcpy(c_ip_address,"T");
		}			
		/********** Ver 6.4 Ends **************/

	EXEC SQL
    /*** SELECT	to_char( exg_nxt_trd_dt, 'DD-Mon-YYYY' ),  Commented In Ver 3.3 ***/
    SELECT	to_char( GREATEST(exg_nxt_trd_dt,exg_tmp_trd_dt) , 'DD-Mon-YYYY' ),			/*** Ver 3.3 ***/
    				to_char( sysdate, 'DD-Mon-YYYY hh24:mi:ss' )
    INTO   	:c_trd_dt,
					  :c_sysdate	
    FROM		exg_xchng_mstr
    WHERE		exg_xchng_cd = :st_xchngbook.c_xchng_cd
    AND			exg_mkt_typ  = 'D';

  	if ( SQLCODE != 0 )
  	{
      fn_errlog( c_ServiceName, "S31135",SQLMSG,c_err_msg);
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	{
      	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    	}
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

 		SETNULL ( c_trd_dt );
 		SETNULL ( c_sysdate );
  	strcpy( st_xchngbook.c_mod_trd_dt, (char *) c_trd_dt.arr);

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
	if ( i_trnsctn == -1 )
	{
    fn_errlog( c_ServiceName, "S31140",LIBMSG,c_err_msg);
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
	  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	strcpy ( st_i_ordbook.c_ordr_rfrnc,st_xchngbook.c_ordr_rfrnc);
	st_i_ordbook.c_oprn_typ = FOR_UPDATE;

	i_ip_len = sizeof ( struct vw_orderbook );
	i_op_len = sizeof ( struct vw_orderbook );
  fn_cpy_ddr ( st_i_ordbook.c_rout_crt );

	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_i_ordbook,
                              &st_o_ordbook,
                              "vw_orderbook",
                              "vw_orderbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_REF_TO_ORD" );

	if ( i_returncode != SUCC_BFR )
	{
    fn_errlog( c_ServiceName, "S31145",LIBMSG,c_err_msg);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }	
	 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
	  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}


  /***** Ver 7.2 Starts *****/
  /*** For RWS order if the input flag and fod flag doesn't match then return ***/
  /*** This check is added to restrict calls from other frontends ***/
  fn_userlog(c_ServiceName, "INPUT SPL FLAG :%c: ORDER BOOK FLAG :%c:",st_xchngbook.c_spl_flg,st_o_ordbook.c_spl_flg);
  if( st_xchngbook.c_spl_flg != ROLLOVER_WITH_SPREAD && st_o_ordbook.c_spl_flg == ROLLOVER_WITH_SPREAD )
  {
        fn_errlog( c_ServiceName, "S31150", LIBMSG, c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        MEMSET(c_err_msg);
        strcpy(c_err_msg,"This is Spread Rollover Order, pls visit new site for mod/can");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );          
  }

  if ( st_xchngbook.c_spl_flg == ROLLOVER_WITH_SPREAD )
  {
    i_err[0] = Fget32(ptr_fml_Ibuf,FFO_EXECN_DT,0,(char *)c_expry_dt2,0);
    if ( i_err[0] == -1 )
    {
        fn_errlog( c_ServiceName, "S31155", FMLMSG, c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    /*** remove this 
    if ( strcmp(st_o_ordbook.c_expry_dt,c_expry_dt2) != 0 )
    {
       i_rollover_ord_ind = 1;   ****The i_rollover_ord_ind variable is set to 1 when it isthe 2nd Order of Rollover with Spread and it is used to skip the band check in fn_check_inp_fut 
    } ******/

    fn_timearr_to_long(st_o_ordbook.c_expry_dt,&l_sprd_exp1);
    fn_timearr_to_long(c_expry_dt2,&l_sprd_exp2);        
 
    if( l_sprd_exp1 - l_sprd_exp2 < 0 )
    {
       /** first order **/ 
       i_rollover_ord_ind = 1;
       strcpy( c_sprd_expiry_date1,st_o_ordbook.c_expry_dt);
       strcpy( c_sprd_expiry_date2,c_expry_dt2); 
    }
    else if ( l_sprd_exp1 - l_sprd_exp2 > 0 )
    {
       /** second order ***/
       i_rollover_ord_ind = 2;
       strcpy( c_sprd_expiry_date1,c_expry_dt2);
       strcpy( c_sprd_expiry_date2,st_o_ordbook.c_expry_dt);
    }
    else
    {
        fn_errlog( c_ServiceName, "S31160", FMLMSG, c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    } 
  }
  /***** Ver 7.2 Ends *****/
  /*** Commenetd in Ver 6.8 ***

  *** Ver 4.8 Starts Here Sachin *****
   MEMSET(c_source);

   i_err[0]  = Fget32(ptr_fml_Ibuf,FML_EVENT,0,(char *)c_source,0);
   i_ferr [0] = Ferror32;

   if ( i_err[0] == -1 )
   {
     if (Ferror32 != FNOTPRES)
     {
       fn_errlog( c_ServiceName, "S31165",LIBMSG,c_err_msg);
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     ** Ver 6.4 **
    	 {
      	 fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       ** Ver 6.4 **
    	 }		
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
       Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
     if ( Ferror32 == FNOTPRES )
     {
       if( st_o_ordbook.c_ord_typ == 'V' )
       {
          fn_errlog( c_ServiceName, "S31170",LIBMSG,c_err_msg);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     ** Ver 6.4 **
    			{
      		  fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       ** Ver 6.4 **
    			}		
          MEMSET(c_err_msg);
          strcpy(c_err_msg,"To modify order to VTC, please visit on website as this feature is not available on the application");
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
          Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }
     }
  }
  *** Ver 4.8 Ends here ******* 
 
  *** Ver 6.8 Comment Ends ***/
 
	rtrim( st_o_ordbook.c_expry_dt );
	st_cntrct.l_eba_cntrct_id = st_o_ordbook.l_eba_cntrct_id;
	strcpy( st_cntrct.c_xchng_cd, st_o_ordbook.c_xchng_cd );
	st_cntrct.c_prd_typ = st_o_ordbook.c_prd_typ;
	strcpy( st_cntrct.c_undrlyng , st_o_ordbook.c_undrlyng  );
	strcpy( st_cntrct.c_expry_dt,  st_o_ordbook.c_expry_dt );
	st_cntrct.c_exrc_typ = st_o_ordbook.c_exrc_typ;
 	st_cntrct.c_opt_typ = st_o_ordbook.c_opt_typ;
	st_cntrct.l_strike_prc =  st_o_ordbook.l_strike_prc;
	st_cntrct.c_ctgry_indstk = st_o_ordbook.c_ctgry_indstk;
	st_cntrct.l_ca_lvl = st_o_ordbook.l_ca_lvl;

	/*** Ver 4.0 starts ***/
	if ( ( c_spn_flg == 'Y' 		&& strcmp(st_xchngbook.c_xchng_cd,"NFO")== 0 ) ||
			 ( c_spn_flg == 'Z' 		&& strcmp(st_xchngbook.c_xchng_cd,"NFO")== 0 ) ||
			 ( c_bse_spn_flg == 'Y' && strcmp (st_xchngbook.c_xchng_cd,"BFO") == 0)
		 )
  {
	  if ( st_o_ordbook.c_prd_typ != 'P')
	  {
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	{
      	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    	}	
			fn_userlog(c_ServiceName, "SPAN Customer Trying To Place Order Under Normal Margining System.");
			strcpy(c_err_msg,"You Are Marked Under SPAN. Can Modify Order Only Through New Site.");
			Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
	    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
  		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
		}
	}
	/*** Ver 4.0 ends ***/

	/******* added in ver 3.6 ************/

  if( DEBUG_MSG_LVL_5 )
  {
    fn_userlog(c_ServiceName, "Underlying is [%s] ", st_o_ordbook.c_undrlyng);
  }

  i_returncode=fn_chk_closeout(c_ServiceName,
                               st_usr_prfl.c_cln_mtch_accnt,
                               c_request_typ,
                               st_cntrct,
                               &st_xchngbook,
                               &st_err_msg);

  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31175", "Broker Under Closeout", c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   /*** Ver 6.3 ***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }	
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /******** Ver 3.6 Ended **********/

  /******** Ver 4.8 Starts Here ****/
  if(DEBUG_MSG_LVL_3) /** DEBUG_MSG_LVL_3 Added in Ver 6.2 **/
	{
		fn_userlog(c_ServiceName,"st_cntrct.c_prd_typ :%c:",st_cntrct.c_prd_typ);
		fn_userlog(c_ServiceName,"st_xchngbook.c_ord_typ  :%c:",st_xchngbook.c_ord_typ);
	}
  l_vtcopnpstn_qty=0;
  l_vtccvr_qty=0;

  if( st_cntrct.c_prd_typ == 'F' && st_xchngbook.c_ord_typ == VTC_ORDER )
  {
   strcpy ( ( char * )c_expiry_dt.arr, st_cntrct.c_expry_dt );
   SETLEN ( c_expiry_dt );

   i_returncode=fn_chk_vtcord(c_ServiceName,
                                &st_xchngbook,
                                &st_cntrct,
                                &st_err_msg );
   if ( i_returncode == -1 )
   {
    fn_errlog( c_ServiceName, "S31180",LIBMSG,c_err_msg);  /** Ver 6.3 ***/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   /** Ver 6.3 ***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }	
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

   EXEC SQL
    SELECT  FFP_OPNPSTN_QTY,
            DECODE(FFP_OPNPSTN_FLW,'S',GREATEST(ABS(FFP_IBUY_QTY),ABS(FFP_EXBUY_QTY)),'B',GREATEST( ABS(FFP_ISELL_QTY), ABS(FFP_EXSELL_QTY)),0)
    INTO   :l_vtcopnpstn_qty,
           :l_vtccvr_qty
    FROM   FFP_FO_FUTURES_PSTN
    WHERE  FFP_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
    AND    FFP_UNDRLYNG       = :st_cntrct.c_undrlyng
    AND    FFP_EXPRY_DT       = :c_expiry_dt
    AND    FFP_PRDCT_TYP      = :st_cntrct.c_prd_typ
    AND    FFP_XCHNG_CD       = :st_cntrct.c_xchng_cd;

   if ( st_xchngbook.c_ordr_flw == 'B' )
   {
     l_vtcopn_qty = l_vtcopnpstn_qty * (-1);
   }
   else
   {
     l_vtcopn_qty = l_vtcopnpstn_qty ;
   }

        /*** ver 7.2 starts RWS ORDER IS PLACED AND CUST IS TRYING CLIENT SQOFF ***/
      l_rws_qty = 0;

EXEC SQL
SELECT NVL(SUM(NVL(FOD_ORDR_TOT_QTY,0)-NVL(FOD_EXEC_QTY,0)-NVL(FOD_CNCL_QTY,0)-NVL(FOD_EXPRD_QTY,0)),0)
INTO :l_rws_qty
FROM FOD_FO_ORDR_DTLS
WHERE FOD_PRDCT_TYP  = :st_cntrct.c_prd_typ
  AND FOD_EXPRY_DT   = :c_expiry_dt
  AND FOD_XCHNG_CD   = :st_cntrct.c_xchng_cd
  AND FOD_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
  AND FOD_SPL_FLAG = 'O'
  AND FOD_UNDRLYNG        = :st_cntrct.c_undrlyng
  AND FOD_ORDR_STTS IN ('R','P','Q','O');


if(SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
{
    fn_errlog( c_ServiceName, "S31185",LIBMSG,c_err_msg);  
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); 
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 } 
  l_vtccvr_qty = l_vtccvr_qty+l_rws_qty;
  /*** ver 7.2 ends ***/
 
	 if(DEBUG_MSG_LVL_3) /** DEBUG_MSG_LVL_3 Added in Ver 6.2 **/
	 {
		fn_userlog(c_ServiceName,"st_o_ordbook.l_ord_tot_qty :%ld:", st_o_ordbook.l_ord_tot_qty );
		fn_userlog(c_ServiceName,"l_vtccvr_qty    :%ld:", l_vtccvr_qty);
		fn_userlog(c_ServiceName,"l_vtcopn_qty    :%ld:", l_vtcopn_qty);
    fn_userlog(c_ServiceName,"l_rws_qty :%ld:",l_rws_qty); /*** ver 7.2 ***/
	 }
   l_modified_qty =0;
   l_modified_qty = st_o_ordbook.l_ord_tot_qty - st_xchngbook.l_ord_tot_qty ;

   if( l_modified_qty < 0 )
   {
    l_modified_qty = l_modified_qty * -1;

    fn_userlog(c_ServiceName,"l_modified_qty :%ld:",l_modified_qty);

    if( l_vtcopn_qty < ( (  l_modified_qty  + l_vtccvr_qty) ) )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
     {
       fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
     }
     fn_errlog( c_ServiceName, "S31190", "VTC Square Off Qty Can Not Be Greater Than Available Qty", c_err_msg );
     MEMSET(c_err_msg);
     strcpy(c_err_msg,"VTC Square Off Qty Can Not Be Greater Than Available Qty.");
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
   }
  }
  /******** Ver 4.8 Ends Here ******/ 
	/****  Ver 2.0 Starts *****/
  if(DEBUG_MSG_LVL_3) /** DEBUG_MSG_LVL_3 Added in Ver 6.2 **/
	{
		fn_userlog( c_ServiceName,"***** Prod_type 1= %c ",st_o_ordbook.c_prd_typ);
		fn_userlog( c_ServiceName,"***** Prod_type 2= %c ",st_pstn_actn.c_prd_typ);
	}
  if( st_o_ordbook.c_spl_flg != ROLLOVER_WITH_SPREAD) /** if condition added in ver 7.2 **/
  {
  if (st_o_ordbook.c_prd_typ == FUTURES)
  {
  	if( DEBUG_MSG_LVL_3 )                              /***  Ver 2.2 ***/
  	{
    	fn_userlog( c_ServiceName,"In fn_chk_cntrct" );
  	}
	      /*** Ver 6.4 starts **/
      if( c_sltp_trail_flag == 'Y')
      {
          c_trail_usr_flg='M';

          i_returncode=fn_chk_trail_cntrct( c_ServiceName,
                                    &st_cntrct,
                                    c_trail_usr_flg,
                                    &c_fum_mrkt_typ,
                                    &c_fcm_mrkt_typ,
                                    &st_err_msg );
      }
       /*** Ver 6.4 Ends ***/
		else 
		{
			i_returncode = fn_chk_cntrct( c_ServiceName,
      		                          &st_cntrct,
          		                      &c_fum_mrkt_typ,     /***  Ver 2.2 ***/
              		                  &c_fcm_mrkt_typ,     /***  Ver 2.2 ***/
                  		              &st_err_msg );
		}
	}
  else if (st_o_ordbook.c_prd_typ == FUTURE_PLUS)
  {

  if( DEBUG_MSG_LVL_3 )                                /***  Ver 2.2 ***/
  {
    fn_userlog( c_ServiceName,"In fn_chk_cntrctfp" );
  }
      i_returncode = fn_chk_cntrctfp( c_ServiceName,
                                  &st_cntrct,
                                  &c_fum_mrkt_typ,     /***  Ver 2.2 ***/
                                  &c_fcm_mrkt_typ,     /***  Ver 2.2 ***/
                                  &st_err_msg );

	}

  /****  Ver 2.0 Ends ******/

  if ( i_returncode == -1 )
  {
		 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
     {
       fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
     }		
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
     Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
     Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
     Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


  if ( i_returncode == -2 )   /*** Ver 4.4 ***/
  {

    l_tmp_ord_tot_qty = st_o_ordbook.l_ord_tot_qty ;
    st_o_ordbook.l_ord_tot_qty =  st_xchngbook.l_ord_tot_qty - st_o_ordbook.l_ord_tot_qty ; /** Getting the deficit ***/
		
		if(DEBUG_MSG_LVL_3) /** DEBUG_MSG_LVL_3 Added in Ver 6.2 **/
		{
     fn_userlog( c_ServiceName," st_o_ordbook.l_ord_tot_qty Is :%ld:" ,st_o_ordbook.l_ord_tot_qty);
		}
    c_fresh_ord_flg = '\0';

    i_returncode = fn_chk_frsh_cover_ord  ( c_ServiceName,
                                         &st_o_ordbook,
                                         &c_fresh_ord_flg,
                                         &st_err_msg
                                       );

    if ( i_returncode == -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	{
      	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    	}		
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );    /**Ver 2.7**/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if(DEBUG_MSG_LVL_3) /** DEBUG_MSG_LVL_3 Added in Ver 6.2 ***/
		{
			fn_userlog( c_ServiceName,"--- c_fresh_ord_flg Is :%c:" ,c_fresh_ord_flg);
		}

    if ( c_fresh_ord_flg == 'Y' )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg1 );
 			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	{
         fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc); 
    	}        
			else if(c_sltp_trail_flag == 'Y')     /** Ver 6.4 **/
			{
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
			}
			else
			{
				    /*** Ver 6.4  This fetch added for FO_FUTURE_TRAIL CR and can be optimized in next version ***/
    		EXEC SQL
    		SELECT NVL(FOD_PRCIMPV_FLG,'N')
      		INTO :c_trail_allwd_flag
      		FROM FOD_FO_ORDR_DTLS
     		 WHERE FOD_ORDR_RFRNC=:st_xchngbook.c_ordr_rfrnc;

     		if( SQLCODE != 0 )
     		{
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg1 );
        	if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )
        	{
          	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);
        	}
        	fn_errlog( c_ServiceName, "S31195", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        	Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        	Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}

				if(c_trail_allwd_flag=='Y' && c_sltp_trail_flag == 'N')
				{
          fn_errlog( c_ServiceName, "S31200", "Currently this Underlying has been disabled and you cannot modify the order. Youmay please cancel your order.", c_err_msg );
					strcpy(c_err_msg,"Currently this Underlying has been disabled and you cannot modify the order. You may please cancel your order.");
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				}
				else
				{
      		fn_errlog( c_ServiceName, "B29030", DEFMSG, c_err_msg );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				}
			}
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

    }
    else if (c_fresh_ord_flg == 'N' )
    {
      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog( c_ServiceName," This is not fresh order ...allow order modification" );
      }
    }

    st_o_ordbook.l_ord_tot_qty = l_tmp_ord_tot_qty ;

  }
 } /*** ver 7.2 if condition ends ***/

  /*** commented in ver 5.2 
	i_ip_len = sizeof ( struct vw_contract );
	i_op_len = sizeof ( struct vw_cntrct_qt );

  fn_cpy_ddr ( st_cntrct.c_rout_crt );
	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_cntrct,
                              &st_cntrct_qt,
                              "vw_contract",
                              "vw_cntrct_qt",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_GET_QT" );
  *** ver 5.2 comment ends ***/

	/*** Commented in Ver 7.4 ***
  *** ver 5.2 starts  ***
  i_returncode = fn_get_qt( c_ServiceName,
                            &st_cntrct,
                            &st_cntrct_qt,
                             c_err_msg );
  *** ver 5.2 ends ***
	*** Ver 7.4 Comment Ends ***/


  /** ver 7.2 starts **/
  if( st_o_ordbook.c_spl_flg == ROLLOVER_WITH_SPREAD )
  {
     i_returncode = fn_get_quote_rws(c_ServiceName,
                              &st_cntrct,
                              &st_cntrct_qt,
                              &c_setlmnt_flg,
                              &c_dlvry_pos_allwd,
                              c_sprd_expiry_date1,
                              c_sprd_expiry_date2,
                              c_err_msg); 

  }
  /*** ver 7.2 ends ***/
  else /** else added in ver 7.2 ***/ 
  {
	/*** Ver 7.4 Starts ***/
	
	i_returncode = fn_get_quote(c_ServiceName,
                              &st_cntrct,
                              &st_cntrct_qt,
                              &c_setlmnt_flg,
                              &c_dlvry_pos_allwd,
															&c_buy_allwd,   /*** ver 8.2 ***/
                              &c_sell_allwd,  /*** ver 8.2 ***/
                              &c_mrkt_ordr_flg, /*** ver 8.4 ***/
                              c_err_msg);

	/** Ver 7.4 Ends ***/
  } /** ver 7.2 else ends ***/

	if ( i_returncode != SUCC_BFR )
	{
    fn_errlog( c_ServiceName, "S31205",LIBMSG,c_err_msg);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }		
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
	  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	/*** Commented in Ver 7.6 ***
	*** Ver 7.4 Starts ***
	
	if (st_cntrct.c_prd_typ != 'P' && st_cntrct.c_prd_typ != 'U' && st_cntrct.c_prd_typ != 'I' )
	{
		if ( c_dlvry_pos_allwd == 'N' ) 
		{
			fn_userlog( c_ServiceName,"Currently trading is not allowed in this contract.");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			strcpy(c_err_msg,"Currently trading is not allowed in this contract.");
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
			Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
	*** Ver 7.4 Ends ***	*** Ver 7.6 ***/

	/*** Ver 7.6 Starts ***/

	if ( c_dlvry_pos_allwd == 'N' )
	{
		i_phy_sqroff_check = 1;
	}

/*** ver 7.2 starts ***/
if( st_o_ordbook.c_spl_flg == ROLLOVER_WITH_SPREAD )
{
  EXEC SQL
    SELECT FTQ_MIN_LOT_QTY,
           FTQ_TCK_SZ
    INTO   :st_cntrct_gen_inf.l_min_lot_qty,
           :st_cntrct_gen_inf.l_tick_sz
    FROM  FTQ_FO_TRD_QT
    WHERE FTQ_XCHNG_CD  =:st_cntrct.c_xchng_cd
    AND   FTQ_PRDCT_TYP ='S'
    AND   FTQ_UNDRLYNG  =:st_cntrct.c_undrlyng
    AND   FTQ_EXPRY_DT  =:c_sprd_expiry_date1
		AND   FTQ_EXPRY_DT2 =:c_sprd_expiry_date2;
}
else /*** ver 7.2 ends ***/
{
  EXEC SQL
    SELECT FTQ_MIN_LOT_QTY,
           FTQ_TCK_SZ,
					 NVL(FTQ_BST1_BID_PRC,0),
           NVL(FTQ_BST1_OFFR_PRC,0),
           NVL(FTQ_CLS_PRC,0)
    INTO   :st_cntrct_gen_inf.l_min_lot_qty,
           :st_cntrct_gen_inf.l_tick_sz,
					 :l_best_bid_price,
           :l_best_offer_price,
           :l_previous_close_price
    FROM  FTQ_FO_TRD_QT
    WHERE FTQ_XCHNG_CD  =:st_cntrct.c_xchng_cd
    AND   FTQ_PRDCT_TYP ='F'
    AND   FTQ_UNDRLYNG  =:st_cntrct.c_undrlyng
    AND   FTQ_EXPRY_DT  =:st_cntrct.c_expry_dt ;
}
  if(SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31210", SQLMSG, c_err_msg  );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /*** Ver 7.6 Ends ***/

	if ( st_xchngbook.c_slm_flg == MARKET )
	{
		st_xchngbook.l_quote = st_cntrct_qt.l_lst_trdd_prc;
		/*** Ver 7.6 Starts ***/
		if ( st_xchngbook.l_quote == 0 && i_phy_sqroff_check == 1 )
    {
      i_returncode = fn_get_quote_zero(c_ServiceName,st_xchngbook.c_ordr_flw,l_best_bid_price,l_best_offer_price,l_previous_close_price,&l_quote_zero);

			if( i_returncode != 1 )
      {
				fn_userlog( c_ServiceName,"function fn_get_quote_zero failure");
        strcpy( c_err_msg,"System Error.Contact Customer Support");
    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )
    		{
      		fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);
    		}
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    		Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
    		Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			st_xchngbook.l_quote = l_quote_zero;
			if(DEBUG_MSG_LVL_5)
      {
        fn_userlog( c_ServiceName,"After fn_get_quote_zero st_xchngbook.l_quote is :%ld:",st_xchngbook.l_quote);
      }
		}
		/*** Ver 7.6 Ends ***/

		strcpy ( st_xchngbook.c_qt_tm,st_cntrct_qt.c_lst_trdd_time );
	}

	 /********** Ver 2.0 Starts ***************/
  if(DEBUG_MSG_LVL_3) /*** DEBUG_MSG_LVL_3 Added in Ver 6.2 ***/
	{
		fn_userlog( c_ServiceName,"Prod type =%c ",st_o_ordbook.c_prd_typ);
		fn_userlog( c_ServiceName,"c_xchng_cd type =%s ",st_o_ordbook.c_xchng_cd);
		fn_userlog( c_ServiceName,"c_pipe_id =%s ",st_o_ordbook.c_pipe_id);
	}
	if(st_o_ordbook.c_prd_typ == FUTURE_PLUS)
  {
		fn_userlog( c_ServiceName, "CR-ISEC14-144377 Index/Stock :%c:",  st_o_ordbook.c_ctgry_indstk );   /*** Added in Ver 8.0 ***/

        EXEC SQL
         SELECT /*** mtm_roll_stts Commented in Ver 8.0 ***/
								/*** DECODE added in Ver 8.0 ***/
								decode ( :st_o_ordbook.c_ctgry_indstk,'I',mtm_roll_stts,'S',mtm_roll_stts_s,'N' ) 
         INTO   :c_roll_stts
         FROM   mtm_appln_stts
         WHERE  mtm_xchng_cd =  :st_o_ordbook.c_xchng_cd
         AND    mtm_pipe_id  =  :st_o_ordbook.c_pipe_id;

        if( SQLCODE != 0 )
        {
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg1 );
 					if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    		  {
      			fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    			}            
          fn_errlog( c_ServiceName, "S31215", SQLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
          Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if(DEBUG_MSG_LVL_3) /** DEBUG_MSG_LVL_3 Added in Ver 6.2 ***/
				{
					fn_userlog( c_ServiceName,"c_roll_stts =%c ",c_roll_stts);
				}
        if (c_roll_stts == 'N' )
        {
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg1 );
					if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    			{
      			fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    			}			  
          fn_errlog( c_ServiceName, "B31027", DEFMSG, c_err_msg );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
          Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
    }

   /********** Ver 2.0 Ends ***************/

 /********** Ver 3.5 Starts ***************/

  if(st_o_ordbook.c_prd_typ == SLTP_FUTUREPLUS)
  {
		MEMSET(c_sys_msg);
    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
      if (Ferror32 != FNOTPRES)
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    		{
      		fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    		}            
        fn_errlog( c_ServiceName, "S31220", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
        if(DEBUG_MSG_LVL_1)  /*** ver 6.3 debug added ***/
        {
          fn_userlog(c_ServiceName," 666");
        }

        i_mtm_flg =2;       /* if called by SLTP F+ Customer from ASP */
      }
    }
    else /* success condition */
    {
			if(DEBUG_MSG_LVL_1) /** DEBUG_MSG_LVL_0 Added in Ver 6.2 **/  /*** Ver 6.3 *** debug changed from 0 to 1 **/
			{
				fn_userlog(c_ServiceName," 777");
			  fn_userlog(c_ServiceName,"c_sys_msg =:%s:",c_sys_msg); /* if called from backoffice EOS  */
			}
			if (strcmp(c_sys_msg,"EOS") == 0)
      {
        i_mtm_flg=1;
      }
    }

    /********Check whether trading on SLTP is allowed******/
    if (i_mtm_flg == 2)
    {
			fn_userlog( c_ServiceName, "CR-ISEC14-144377 Index/Stock :%c:",  st_o_ordbook.c_ctgry_indstk );   /*** Added in Ver 8.0 ***/

     EXEC SQL
       SELECT /*** MTM_SLTP_ALLWD_STTS,
              MTM_SLTP_EOS_FLG Commented in Ver 8.0 ***/
							/*** DECODE added in Ver 8.0 ***/
							DECODE ( :st_o_ordbook.c_ctgry_indstk,'I',MTM_SLTP_ALLWD_STTS_I,'S',MTM_SLTP_ALLWD_STTS_S,'N' ),
							DECODE ( :st_o_ordbook.c_ctgry_indstk,'I',MTM_SLTP_EOS_FLG,'S',MTM_SLTP_EOS_FLG_S,'N' )
       INTO   :c_sltp_allwd_stts,
              :c_sltp_eos_flg
       FROM   mtm_appln_stts
       WHERE  mtm_xchng_cd =  :st_o_ordbook.c_xchng_cd
       AND    mtm_pipe_id  =  :st_o_ordbook.c_pipe_id;

      if( SQLCODE != 0 )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    		{
      		fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    		}
        fn_errlog( c_ServiceName, "S31225", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

			if(DEBUG_MSG_LVL_3) /** DEBUG_MSG_LVL_3 Added in Ver 6.2 ***/
			{
				fn_userlog( c_ServiceName,"c_sltp_allwd_stts =%c ",c_sltp_allwd_stts);
				fn_userlog( c_ServiceName,"c_sltp_eos_flg =%c ",c_sltp_eos_flg);
			}
      if (c_sltp_allwd_stts == 'N' || c_sltp_eos_flg =='Y' )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    		{
      		fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    		}			
				fn_errlog( c_ServiceName, "B35013",DEFMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

			if (  c_sltp_eos_flg =='Y' )
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    		{
      		fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    		}			
				fn_errlog( c_ServiceName, "B35014",DEFMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
    }
  }
   /********** Ver 3.5 Ends ***************/

	i_returncode = fn_check_inp_fut( c_ServiceName,
                               		 &st_xchngbook, 
                               		 &st_cntrct_qt, 
                                   c_fum_mrkt_typ,      /***  Ver 2.2 ***/
                                   c_fcm_mrkt_typ,      /***  Ver 2.2 ***/
                                   i_rollover_ord_ind,    /*** Ver 7.2 ***/
                                   c_sprd_expiry_date1, /*** ver 7.2 ***/
                                   c_sprd_expiry_date2, /*** ver 7.2 ***/
                               		 &st_err_msg );
  if ( i_returncode == -1 )
  {
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }		
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
		Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	else if(i_returncode == -2) /*** Added in Ver 6.4 ***/
	{
	  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )    
    {
      fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);                       
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); 
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); 
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}


	/* i_returncode = fn_lock_usr( c_ServiceName,
															st_usr_prfl.c_cln_mtch_accnt ); commented in 8.7 */
	i_returncode = fn_lock_fno( c_ServiceName, st_usr_prfl.c_cln_mtch_accnt ); /* added in 8.7 */
	if ( i_returncode == -1 )
	{
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }            
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
 		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	/** Commented in Ver 5.3 **
	i_ip_len = sizeof ( struct vw_contract );
  i_op_len = sizeof ( struct vw_cntrt_gen_inf );

  fn_cpy_ddr ( st_cntrct.c_rout_crt );
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_cntrct,
                              &st_cntrct_gen_inf,
                              "vw_contract",
                              "vw_cntrt_gen_inf",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_GETCNT_GEN" );

	if ( i_returncode != SUCC_BFR )
  {
    fn_errlog( c_ServiceName, "S31230",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		**Ver 2.7**
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	**********/
	
	/***** Ver 5.3 Starts ***/

	/*** Commented in Ver 5.8 ***
	
	EXEC SQL
    SELECT FCM_LOT_SZ,                
           FCM_TCK_SZ                 
    INTO   :st_cntrct_gen_inf.l_min_lot_qty, 
           :st_cntrct_gen_inf.l_tick_sz 
    FROM  FCM_FO_CNTRCT_MSTR
    WHERE FCM_XCHNG_CD  =:st_cntrct.c_xchng_cd
    AND   FCM_PRDCT_TYP ='F'
    AND   FCM_UNDRLYNG  =:st_cntrct.c_undrlyng
    AND   FCM_EXPRY_DT  =:st_cntrct.c_expry_dt ;

  *** Ver 5.8 commnet Ends ***/

	/*** Commented in Ver 7.6 (Query moved above)***
	*** Ver 5.8 Starts ***

  EXEC SQL
    SELECT FTQ_MIN_LOT_QTY,
           FTQ_TCK_SZ
    INTO   :st_cntrct_gen_inf.l_min_lot_qty,
           :st_cntrct_gen_inf.l_tick_sz
    FROM  FTQ_FO_TRD_QT
    WHERE FTQ_XCHNG_CD  =:st_cntrct.c_xchng_cd
    AND   FTQ_PRDCT_TYP ='F'
    AND   FTQ_UNDRLYNG  =:st_cntrct.c_undrlyng
    AND   FTQ_EXPRY_DT  =:st_cntrct.c_expry_dt ;

  *** Ver 5.8 Ends ***

  if(SQLCODE != 0 )
  {
  	fn_errlog( c_ServiceName, "S31235", SQLMSG, c_err_msg  );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );                    ** Ver 6.4 **  
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     ** Ver 6.4 **
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       ** Ver 6.4 **
    }
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 ); 
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  ***  Ver 5.5  ***
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   ***  Ver 5.5  *** 
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	*** Ver 7.6 ***/
	/** Ver 5.3 Ends **/	

  if( DEBUG_MSG_LVL_3 )   /*** Ver 6.3, debug changed from 0 to 3 ***/
	{
		fn_userlog(c_ServiceName, "Trade Quote Lot Size Is  :%ld: ",st_cntrct_gen_inf.l_min_lot_qty);
		fn_userlog(c_ServiceName, "Trade Quote Tick Size Is :%ld: ",st_cntrct_gen_inf.l_tick_sz);
	}	

	i_returncode = fn_check_ord_fut( c_ServiceName,
                               		 &st_cntrct_gen_inf,
                               		 &st_xchngbook,
                               		 &st_o_ordbook, 
                               		 &st_err_msg );
  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }	
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	else if( i_returncode == -2 ) /*** Added in Ver 6.4 ***/
	{
		fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
    if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) ) 
    {
      fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);                   
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );  
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}


	if ( st_xchngbook.c_slm_flg == MARKET )
	{
   	st_xchngbook.l_ord_lmt_rt = st_xchngbook.l_quote;

	}

  /*** Ver 4.8 Starts Here ***/
  c_vtc_ord='N';

  if( st_o_ordbook.c_prd_typ == 'F' )
  {

   /*** Ver 6.8 Starts ***/

   if(  st_o_ordbook.c_ord_typ == 'V'  &&  st_xchngbook.c_ord_typ == 'T' )
   {
    fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
    if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )
    {
     fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);
    }
    fn_errlog( c_ServiceName, "S31240", "VTC to DAY Order Modification is Not Allowed.", c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,"VTC to DAY Order Modification is Not Allowed." , 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }


   /*** Ver 6.8 Ends   ***/

   if( ( st_o_ordbook.c_ord_typ == 'T' || st_o_ordbook.c_ord_typ =='I' ) && ( st_xchngbook.c_ord_typ == 'V' ))
   {
    fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }	
    fn_errlog( c_ServiceName, "S31245", "Day to VTC Order Modification is Not Allowed.", c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,"Day to VTC Order Modification is Not Allowed." , 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

   if ( (st_xchngbook.c_slm_flg == st_o_ordbook.c_slm_flg)
    && (st_xchngbook.l_ord_lmt_rt == st_o_ordbook.l_ord_lmt_rt)
    && (st_xchngbook.l_ord_tot_qty == st_o_ordbook.l_ord_tot_qty)
    && (st_xchngbook.l_dsclsd_qty == st_o_ordbook.l_dsclsd_qty)
    && (st_xchngbook.l_stp_lss_tgr == st_o_ordbook.l_stp_lss_tgr)
    &&(  (st_xchngbook.c_ord_typ != st_o_ordbook.c_ord_typ)
    ||   (strcmp(st_xchngbook.c_valid_dt,st_o_ordbook.c_valid_dt) !=0 )  ) )
   {
     if( ( st_xchngbook.c_ord_typ == 'T' && st_o_ordbook.c_ord_typ == 'V' ) ||
         (strcmp(st_xchngbook.c_valid_dt,st_o_ordbook.c_valid_dt) !=0 && st_xchngbook.c_ord_typ !='I' ) )
     {
			 if(DEBUG_MSG_LVL_3) /** DEBUG_MSG_LVL_0 Added in Ver 6.2 **/  /*** Ver 6.3, Debug cahnged from 0 to 3 ***/
			 {
	      fn_userlog(c_ServiceName," Inside Setting c_vtc_ord ='Y' ");
			 }
			c_vtc_ord ='Y'; /* Process the modification in EBA only **/
     }
   }
  }
  /*** Ver 4.8 Ends Here ****/


	/***	Commented In Ver 3.8
 	***  Ver 3.0 Starts  ***
   
  if ( strcmp(st_xchngbook.c_xchng_cd,"BFO") == 0 )
  {
    fn_userlog(c_ServiceName,"Inside BSE SLTP To Normal Conversion Check.");
    fn_userlog(c_ServiceName,"Order Reference Is :%s:",st_xchngbook.c_ordr_rfrnc);

    if ( st_xchngbook.c_slm_flg  != 'S' )
    {
      EXEC SQL
        SELECT  NVL(FOD_STP_LSS_TGR,0)
        INTO    :l_stp_loss_trgr
        FROM    FOD_FO_ORDR_DTLS
        WHERE   FOD_ORDR_RFRNC  = :st_xchngbook.c_ordr_rfrnc ;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31250",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if ( l_stp_loss_trgr != 0 )
      {
        fn_userlog(c_ServiceName,"Stop Loss Trigger Price Is :%ld:",l_stp_loss_trgr);
        fn_userlog(c_ServiceName,"Before Limit/Market/Stop Loss Flag Is :%c:",st_xchngbook.c_slm_flg);

        st_xchngbook.c_slm_flg  = 'S' ;

        fn_userlog(c_ServiceName,"After Limit/Market/Stop Loss Flag Is :%c:",st_xchngbook.c_slm_flg);

      }

    }

  }

 	***  Ver 3.0 Ends  ***

	Ver	3.8	Comment Ends	***/

	strcpy(st_d_xchngbk.c_ordr_rfrnc,st_xchngbook.c_ordr_rfrnc);
  st_d_xchngbk.l_mdfctn_cntr = st_o_ordbook.l_mdfctn_cntr ;
  st_d_xchngbk.c_oprn_typ = WITHOUT_ORS_MSG_TYP;

  i_ip_len = sizeof ( struct vw_xchngbook );
  i_op_len = sizeof ( struct vw_xchngbook );

  fn_cpy_ddr ( st_d_xchngbk.c_rout_crt );

	/*** Commented in Ver 6.4  
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_d_xchngbk,
                              &st_d_xchngbk,
                              "vw_xchngbook",
                              "vw_xchngbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_REF_TO_OMD" );

			**** Comment Ends ****/

i_returncode=fn_fo_ref_to_omd(&st_d_xchngbk,&st_d_xchngbk,&c_mtm_flg,&l_init_sltp_rt,&l_init_lmt_rt,&c_prcimp_flg_fxb,c_ServiceName,c_err_msg);
							/*** fn_fo_ref_to_omd added in ver 6.4 ***/

  if ( i_returncode == -1)
  {
    fn_errlog( c_ServiceName, "S31255",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }	
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

		/*** added in Ver 6.4 ***/
	if(DEBUG_MSG_LVL_0)
	{
  	fn_userlog(c_ServiceName,"l_init_sltp_rt.....:%ld:",l_init_sltp_rt);
  	fn_userlog(c_ServiceName,"l_init_lmt_rt.....:%ld:",l_init_lmt_rt);
	}
	/*** Ver 6.4 Ends ***/

/* Ver 1.8  changes added for validation */

	if( strcmp( st_usr_prfl.c_user_id, "system" )  != 0)	
	{
		if( ( strcmp ( st_o_ordbook.c_channel ,"SYS" ) == 0 && st_o_ordbook.c_ord_typ !='V' ) || ( strcmp ( st_o_ordbook.c_channel ,"OFF" )  == 0 ) )          /** Ver 4.8 * st_o_ordbook.c_ord_typ !='V' added **/ 
		{
			 fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
			 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	 {
      	 fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    	 }		
			 fn_errlog( c_ServiceName, "B22008", DEFMSG, c_err_msg );
			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
  		 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
	     Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
       Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
  		 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
    if( st_o_ordbook.c_ord_typ != 'V') /*** if added in Ver 4.8 ***/
    {
      if ( st_o_ordbook.c_spl_flg == SYSTEM_SQUAREOFF || st_o_ordbook.c_spl_flg == L2_ORDER ||
         st_o_ordbook.c_spl_flg == L3_ORDER || st_o_ordbook.c_ord_typ == IMMEDIATE_OR_CANCEL ||
         st_o_ordbook.c_spl_flg == IMTM_SYS_SQUAREOFF || st_o_ordbook.c_spl_flg == LMTNEG_SYS_SQUAREOFF ) /*** Check added for IMTM_SYS_SQUAREOFF and LMTNEG_SYS_SQUAREOFF in Ver 5.0 ***/
    {
      fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	{
      	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    	}		
      fn_errlog( c_ServiceName, "B28533", DEFMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
   }
		if ( ( st_o_ordbook.c_ordr_stts == ORDERED ) || ( st_o_ordbook.c_ordr_stts == PARTIALLY_EXECUTED ) )
		{
			if( ( st_xchngbook.c_req_typ == CANCELLED ) && ( st_xchngbook.c_plcd_stts != REJECT ) )
			{
				fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    		{
      		fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    		}
				fn_errlog( c_ServiceName, "B28533", DEFMSG, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
  		  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
	      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
  			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}
	}

/* Ver 1.8 complete */

	/*** Ver 6.4 Starts ***/
	if( c_sltp_trail_flag == 'Y' && st_xchngbook.c_plcd_stts == QUEUED)
	{
    fn_errlog( c_ServiceName, "S31260",LIBMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }	
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); 
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	/*** Ver 6.4 Ends ***/

  if ( st_o_ordbook.c_ordr_stts == REQUESTED )
  {
    st_d_xchngbk.c_plcd_stts = ACCEPT;
    st_d_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;
    st_d_xchngbk.l_ors_msg_typ = ORS_NEW_ORD_RJCT;
    strcpy( st_d_xchngbk.c_ack_tm, (char *) c_sysdate.arr);
    strcpy( st_d_xchngbk.c_entry_dt_tm, (char *) c_sysdate.arr);
	
		/** Ver 6.4 Starts **/	
		if( strcmp(c_rmrks,"SYSTRAIL") == 0 )
		{
			strcpy( st_d_xchngbk.c_xchng_rmrks, "MODIFIED BY SYSTEM");  
		}
		else   /** Ver 6.4 Ends **/
	  {	
    	strcpy( st_d_xchngbk.c_xchng_rmrks, "MODIFIED BY CLIENT");/*1.3*/
		}
		st_d_xchngbk.l_dwnld_flg = NOT_DOWNLOAD;
		st_d_xchngbk.d_jiffy = 0;
		st_d_xchngbk.l_bit_flg	=	0;			/***	Ver	2.6	***/
    st_d_xchngbk.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;

    i_ip_len = sizeof ( struct vw_xchngbook );
    i_op_len = sizeof ( struct vw_xchngbook );

  	fn_cpy_ddr ( st_d_xchngbk.c_rout_crt );

    /********** Commented in Ver 6.9 *******
    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_d_xchngbk,
                                &st_d_xchngbk,
                                "vw_xchngbook",
                                "vw_xchngbook",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_UPD_XCHNGBK" );
		************* Comment ends in Ver 6.9 ***********************/
    /*** Added in Ver 6.9 ***/
       i_returncode = fn_upd_xchngbk(c_ServiceName,&st_d_xchngbk,NULL,NULL,c_err_msg,0,0,0,0,0,'N',st_usr_prfl.l_session_id);/*ver 8.6*/
    /*** Ver 6.9 Ends ***/	
  	if ( i_returncode != SUCC_BFR )
  	{
    	fn_errlog( c_ServiceName, "S31265",LIBMSG,c_err_msg);
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	{
      	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    	}			
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

  	fn_cpy_ddr ( st_d_xchngbk.c_rout_crt );

    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_d_xchngbk,
                                &st_d_xchngbk,
                                "vw_xchngbook",
                                "vw_xchngbook",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_FUT_ACK" );

  	if ( i_returncode != SUCC_BFR )
  	{
    	fn_errlog( c_ServiceName, "S31270",LIBMSG,c_err_msg);
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	{
      	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    	}		
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

	}   /* End of order in REQUESTED state */

  /** Ver 1.7 added to handle modification rejection in case of partial execution  **/

  if ((( st_o_ordbook.c_ordr_stts == ORDERED )|| (st_o_ordbook.c_ordr_stts == PARTIALLY_EXECUTED)) &&
     ( st_d_xchngbk.c_plcd_stts == 'R'     )   )  /* Request Placed */
  {
    st_d_xchngbk.c_plcd_stts = REJECT;
    st_d_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;
    /*** st_d_xchngbk.l_ors_msg_typ = ORS_MOD_ORD_RJCT;		*** Commented in Ver 7.3 ***/
		/*** Ver 7.3 starts ***/
    fn_userlog(c_ServiceName,"st_d_xchngbk.c_req_typ =:%c:",st_d_xchngbk.c_req_typ);
    if (st_d_xchngbk.c_req_typ == CANCELLED )
    {
         st_d_xchngbk.l_ors_msg_typ = ORS_CAN_ORD_RJCT;
    }
    else
    {
        st_d_xchngbk.l_ors_msg_typ = ORS_MOD_ORD_RJCT;
    }
    /*** Ver 7.3 ends ***/
    strcpy( st_d_xchngbk.c_ack_tm, (char *) c_sysdate.arr);
    strcpy( st_d_xchngbk.c_entry_dt_tm, (char *) c_sysdate.arr);
		/** Ver 6.4 Starts **/
    if( strcmp(c_rmrks,"SYSTRAIL") == 0 )
    {
			/*** Ver 7.3 starts ***/
			if (st_d_xchngbk.c_req_typ == CANCELLED )
      {
        strcpy( st_d_xchngbk.c_xchng_rmrks, "CANCELLED BY SYSTEM");
      }
      else
      {
			/*** Ver 7.3 ends ***/
      strcpy( st_d_xchngbk.c_xchng_rmrks, "MODIFIED BY SYSTEM");
			}/*** Ver 7.3 ***/
    }
    else   /** Ver 6.4 Ends **/
    {
			/*** Ver 7.3 starts ***/
      if (st_d_xchngbk.c_req_typ == CANCELLED )
      {
        strcpy( st_d_xchngbk.c_xchng_rmrks, "CANCELLED BY CLIENT");
      }
      else
      {
      /*** Ver 7.3 ends ***/
    	strcpy( st_d_xchngbk.c_xchng_rmrks, "MODIFIED BY CLIENT");/*1.3*/
			} /*** Ver 7.3 ***/
		}
		st_d_xchngbk.l_dwnld_flg = NOT_DOWNLOAD;
		st_d_xchngbk.d_jiffy = 0;
    st_d_xchngbk.l_bit_flg  = 0;      /***  Ver 2.6 ***/
    st_d_xchngbk.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;

    i_ip_len = sizeof ( struct vw_xchngbook );
    i_op_len = sizeof ( struct vw_xchngbook );

  	fn_cpy_ddr ( st_d_xchngbk.c_rout_crt );

    /***************** Commented in Ver 6.9 ************
    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_d_xchngbk,
                                &st_d_xchngbk,
                                "vw_xchngbook",
                                "vw_xchngbook",
                                i_ip_len,
                                i_op_len,
                                0,
 	                              "SFO_UPD_XCHNGBK" );
		************* Comment ends in Ver 6.9 ***********************/
    /*** Added in Ver 6.9 ***/
      i_returncode = fn_upd_xchngbk(c_ServiceName,&st_d_xchngbk,NULL,NULL,c_err_msg,0,0,0,0,0,'N',st_usr_prfl.l_session_id);/*ver 8.6*/ 
    /*** Ver 6.9 Ends ***/

    if ( i_returncode != SUCC_BFR )
    {
    	fn_errlog( c_ServiceName, "S31275",LIBMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      {
        fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      }		
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

  	fn_cpy_ddr ( st_d_xchngbk.c_rout_crt );

    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_d_xchngbk,
                                &st_d_xchngbk,
                                "vw_xchngbook",
                                "vw_xchngbook",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_FUT_ACK" );

    if ( i_returncode != SUCC_BFR )
    {
    	fn_errlog( c_ServiceName, "S31280",LIBMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      {
        fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      }		
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

	}
	if(DEBUG_MSG_LVL_3) /**DEBUG_MSG_LVL_3 Added in Ver 6.2 **/
	{
		fn_userlog(c_ServiceName,"********Product type PSTN = :%c:",st_pstn_actn.c_prd_typ);   /*2.0*/
		fn_userlog(c_ServiceName,"********Product type CNTRCT = :%c:",st_cntrct.c_prd_typ);    /*2.0*/
		fn_userlog(c_ServiceName,"********Product type ORDER = :%c:",st_o_ordbook.c_prd_typ);  /*2.0*/
	}
  strcpy(st_pstn_actn.c_user_id, st_usr_prfl.c_user_id);
  st_pstn_actn.l_session_id  = st_usr_prfl.l_session_id;
  strcpy(st_pstn_actn.c_cln_mtch_accnt,st_o_ordbook.c_cln_mtch_accnt);
  st_pstn_actn.l_eba_cntrct_id = st_cntrct.l_eba_cntrct_id;
  strcpy(st_pstn_actn.c_xchng_cd,st_cntrct.c_xchng_cd);
  /*st_pstn_actn.c_prd_typ = st_cntrct.c_prd_typ; */
	st_pstn_actn.c_prd_typ = st_o_ordbook.c_prd_typ;             /*2.0*/
  strcpy(st_pstn_actn.c_undrlyng,st_cntrct.c_undrlyng);
  strcpy(st_pstn_actn.c_expry_dt,st_cntrct.c_expry_dt);
  st_pstn_actn.c_exrc_typ = st_cntrct.c_exrc_typ;
  st_pstn_actn.c_opt_typ = st_cntrct.c_opt_typ;
  st_pstn_actn.l_strike_prc = st_cntrct.l_strike_prc;
  st_pstn_actn.c_ctgry_indstk = st_cntrct.c_ctgry_indstk;
  st_pstn_actn.l_ca_lvl = st_cntrct.l_ca_lvl;
  st_pstn_actn.c_cntrct_tag = '*';

  st_pstn_actn.c_trnsctn_flw = st_o_ordbook.c_ordr_flw;
  st_pstn_actn.l_orgnl_qty = st_o_ordbook.l_ord_tot_qty;
  st_pstn_actn.l_orgnl_rt  = st_o_ordbook.l_ord_lmt_rt;
  st_pstn_actn.l_new_qty = st_xchngbook.l_ord_tot_qty;
  st_pstn_actn.l_new_rt  = st_xchngbook.l_ord_lmt_rt;
  st_pstn_actn.l_exec_qty  = st_o_ordbook.l_exctd_qty;
  st_pstn_actn.l_exec_rt  = 0;
  st_pstn_actn.l_fresh_qty  = 0;
  st_pstn_actn.l_cover_qty  = 0;
  st_pstn_actn.d_add_mrgn_amt  = 0;

  st_pstn_actn.l_curr_rt = st_cntrct_qt.l_lst_trdd_prc;

  sprintf(st_pstn_actn.c_ref_rmrks,"%s-%ld",st_o_ordbook.c_ordr_rfrnc,
                               st_o_ordbook.l_mdfctn_cntr + 1);
  rtrim(st_pstn_actn.c_ref_rmrks);

  if ( st_d_xchngbk.c_spl_flg == ROLLOVER_WITH_SPREAD ) /* ver 7.2 */
  {
    st_pstn_actn.c_nkd_blkd_flg = ROLLOVER_WITH_SPREAD;
  }

  if ( st_o_ordbook.c_ordr_stts == REQUESTED )
	{
  	st_pstn_actn.l_actn_typ = ORS_NEW_ORD_REQ;
	}
	else
	{
  	st_pstn_actn.l_actn_typ = ORS_MOD_ORD_REQ;
	}

  i_ip_len = sizeof ( struct vw_pstn_actn );
  i_op_len = sizeof ( struct vw_pstn_actn );

  fn_cpy_ddr ( st_pstn_actn.c_rout_crt );

	if(DEBUG_MSG_LVL_3) /** DEBUG_MSG_LVL_3 Added in Ver 6.2 **/
	{
		fn_userlog(c_ServiceName,"********Product type = :%c:",st_pstn_actn.c_prd_typ);  /*2.0*/
	}
  if(st_pstn_actn.c_prd_typ == 'F' && st_o_ordbook.c_spl_flg != ROLLOVER_WITH_SPREAD) /*** Ver 7.2 added to skip for Rollover With Spread ***/
	{
  	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_pstn_actn,
                              &st_pstn_actn,
                              "vw_pstn_actn",
                              "vw_pstn_actn",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_FUT_POS" );

    if ( i_returncode !=  SUCC_BFR )
    {
    /* 4.2 Starts */
    if(i_returncode == INSUFFICIENT_LIMITS)
    {
      c_insuff_flg = 'Y';
      strcpy(c_err_msg,strtok(c_err_msg,"|"));
      d_required_amt = atof(strtok(NULL,"|"));
      fn_userlog(c_ServiceName,"c_err_msg :%s:",c_err_msg);
      fn_userlog(c_ServiceName,"d_required_amt :%lf:",d_required_amt);
    }
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
    /* 4.2 Ends */

     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     /*** Ver 4.6 Starts ***/
	
     c_actn_flg = 'M';

     i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
     if ( i_trnsctn == -1 )
     {
        fn_errlog( c_ServiceName, "S31285",LIBMSG,c_err_msg);

      	if(c_insuff_flg == 'Y' && c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0)) /** Ver 6.4 **/
				{
            fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);                     
				}
				else
				{
					if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      		{
        		fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      		}
				}
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }


     i_returncode =  fn_ins_ffl_log_tbl  (  c_ServiceName,
                                            st_o_ordbook,
                                            c_err_msg,
                                            d_required_amt,
                                            c_actn_flg
                                        );
     if ( i_returncode != 0 )
     {
        fn_errlog( c_ServiceName, "S31290", LIBMSG, c_err_msg  );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );

      	if(c_insuff_flg == 'Y' && c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0)) /** Ver 6.4 **/
        {
            fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);
        }
				else
				{
					if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      		{
        		fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      		}
				}
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

     }

     if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
     {
        fn_errlog( c_ServiceName, "S31295",LIBMSG,c_err_msg);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );									  /** Ver 6.4 **/

      	if(c_insuff_flg == 'Y' && c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0)) /** Ver 6.4 **/
        {
            fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);
        }
				else
				{
        	if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
        	{
          	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
        	}
				}		
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

     /*** Ver 4.6  Ends   ***/

			if(c_insuff_flg == 'Y' && c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0)) /** Ver 6.4 **/
      {
          fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);
      }
		  else
		  {		
		 	 	if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
     		{
       		fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
     		}
			}	
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	}

	/*********** 2.0 Starts ***************/
	else if(st_pstn_actn.c_prd_typ == 'P' )
	{
  i_returncode = fn_call_svc( c_ServiceName,
                            c_err_msg,
                            &st_pstn_actn,
                            &st_pstn_actn,
                            "vw_pstn_actn",
                            "vw_pstn_actn",
                            i_ip_len,
                            i_op_len,
                            0,
                            "SFO_UPD_FUT_PLS" );

   if ( i_returncode !=  SUCC_BFR )
   {
    /* 4.2 Starts */

    if(i_returncode == INSUFFICIENT_LIMITS)
    {
      c_insuff_flg = 'Y';
      strcpy(c_err_msg,strtok(c_err_msg,"|"));
      d_required_amt = atof(strtok(NULL,"|"));
      fn_userlog(c_ServiceName,"c_err_msg :%s:",c_err_msg);
      fn_userlog(c_ServiceName,"d_required_amt :%lf:",d_required_amt);
    }
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
    /* 4.2 Ends */

    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );

    /*** Ver 4.6 Starts ***/

     c_actn_flg = 'M';

     i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
     if ( i_trnsctn == -1 )
     {
        fn_errlog( c_ServiceName, "S31300",LIBMSG,c_err_msg);

        if(c_insuff_flg == 'Y' && c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0)) /** Ver 6.4 **/
        {
            fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);
        }
        else
        {
					if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
        	{
          	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
        	}
				}
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }


     i_returncode =  fn_ins_ffl_log_tbl  (  c_ServiceName,
                                            st_o_ordbook,
                                            c_err_msg,
                                            d_required_amt,
                                            c_actn_flg
                                        );
     if ( i_returncode != 0 )
     {
        fn_errlog( c_ServiceName, "S31305", LIBMSG, c_err_msg  );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );

        if(c_insuff_flg == 'Y' && c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0)) /** Ver 6.4 **/
        {
            fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);
        }
        else
        {
					if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
        	{
          	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
        	}
				}
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

     }

     if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
     {
        fn_errlog( c_ServiceName, "S31310",LIBMSG,c_err_msg);
			  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );                 /** Ver 6.4 **/
        if(c_insuff_flg == 'Y' && c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0)) /** Ver 6.4 **/
        {
            fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);
        }
        else
        {
					if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
        	{
          	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
        	}
				}
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

     /*** Ver 4.6  Ends   ***/

     if(c_insuff_flg == 'Y' && c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0)) /** Ver 6.4 **/
     {
        fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);
     }
     else
     {
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	{
      	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    	}
		}
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
 }
	/*********** 2.0 Ends ***************/

 /*** Ver 3.5 starts here ***/
  else if ( st_pstn_actn.c_prd_typ == SLTP_FUTUREPLUS )
  {
fn_userlog(c_ServiceName,"Check Point 1 shlok .........");

	/*** Ver 5.6 starts here ***/
	EXEC SQL
      SELECT
            fod_fc_flag,
						fod_ordr_stts		/*** Ver 8.2 ***/
     INTO
          :c_fc_flag,
					:c_ordr_stts1		/*** Ver 8.2 ***/
      FROM FOD_FO_ORDR_DTLS
      WHERE FOD_ORDR_RFRNC = :st_o_ordbook.c_ordr_rfrnc;
	if(SQLCODE != 0)
	{
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }
		fn_errlog( c_ServiceName, "S31315", SQLMSG, c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	
/***************** ver 8.2 *******************/

		fn_userlog(c_ServiceName,"Check Point 2 shlok .........");

		if (c_fc_flag == 'T' && c_ordr_stts1 != 'O' )
		{
 			 fn_userlog(c_ServiceName, "******Modification of Profit order is only allowed in ordered state. *********");
  		 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  		 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )    
       {
    		fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                      
  		 }
			 strcpy(c_err_msg,"Modification of Profit order is only allowed in ordered state");
  /***fn_errlog( c_ServiceName, "B23104", DEFMSG, c_err_msg  ); ***/
  		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	
/****************** ver 8.2 END *****************/

	if((st_xchngbook.c_slm_flg != MARKET) && (c_fc_flag == 'F'))	
	{
		EXEC SQL
		select	nvl(FUM_SLTPFP_LMT_ALLWD_FLG ,'N') 
		INTO	 :c_sltpfp_lmt_allwd_flg 
		FROM	  FUM_FO_UNDRLYNG_MSTR 
		WHERE	  FUM_UNDRLYNG = :st_cntrct.c_undrlyng 
		AND FUM_PRDCT_TYP = 'F';

		if(SQLCODE != 0)
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	{
      	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    	}
			fn_errlog( c_ServiceName, "S31320", SQLMSG, c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if(c_sltpfp_lmt_allwd_flg == 'N')
		{
			fn_userlog(c_ServiceName, "******Only modification to market is allowed for the stock. Please select market as order type to modify your order.*********");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	{
      	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    	}
			fn_errlog( c_ServiceName, "B23104", DEFMSG, c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );		
		}
	}
  
	if(c_fc_flag == 'F')
	{	
		EXEC SQL
		  SELECT
				fod_sltp_ordr_rfrnc,
				fod_ordr_stts
		  INTO
			  :c_sltp_ordr_refrnc,
			  :c_frsh_ordr_stts
		  FROM FOD_FO_ORDR_DTLS
		  WHERE FOD_ORDR_RFRNC = :st_o_ordbook.c_ordr_rfrnc;

		if(SQLCODE != 0)
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	{
      	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    	}
			fn_errlog( c_ServiceName, "S31325", SQLMSG, c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		 EXEC SQL
		  SELECT
						fod_ordr_stts
		  INTO
						:c_cvr_ordr_stts
		  FROM	FOD_FO_ORDR_DTLS
		  WHERE FOD_ORDR_RFRNC    = :c_sltp_ordr_refrnc;

		if(SQLCODE != 0)
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	{
      	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    	}
			fn_errlog( c_ServiceName, "S31330", SQLMSG, c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
	else if(c_fc_flag == 'C')
	{
		EXEC SQL
		  SELECT
				fod_sltp_ordr_rfrnc,
				fod_ordr_stts
		  INTO
			  :c_sltp_ordr_refrnc,
			  :c_cvr_ordr_stts
		  FROM FOD_FO_ORDR_DTLS
		  WHERE FOD_ORDR_RFRNC = :st_o_ordbook.c_ordr_rfrnc;
		if(SQLCODE != 0)
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      {
        fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      }
			fn_errlog( c_ServiceName, "S31335", SQLMSG, c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		EXEC SQL
		  SELECT
				fod_ordr_stts
		  INTO
			  :c_frsh_ordr_stts
		  FROM FOD_FO_ORDR_DTLS
		  WHERE      FOD_ORDR_RFRNC    = :c_sltp_ordr_refrnc;

		if(SQLCODE != 0)
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      {
        fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      }
			fn_errlog( c_ServiceName, "S31340", SQLMSG, c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		
		/*** Ver 8.2 starts ***/
    if(st_xchngbook.c_slm_flg == MARKET)
    {
      EXEC SQL
      select  FOD_ORDR_STTS
      INTO :c_prft_pend
      from FOD_FO_ORDR_DTLS
      where
      FOD_FC_FLAG= 'T'
      and FOD_ORDR_STTS in ('R','Q','P','O')
      and DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_sltp_ordr_refrnc;

     if( (SQLCODE !=0) && (SQLCODE !=NO_DATA_FOUND) )
     {
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     
      {
        fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                      
      }
      fn_errlog( c_ServiceName, "S31345", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
     if ( c_prft_pend == 'Q')
     {
      fn_userlog(c_ServiceName, "****** Request cannot be placed as other order request is under process. *********");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     
      {
        fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       
      }
      strcpy(c_err_msg,"Request cannot be placed as other order request is under process");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );     
		 }
     else  if ( c_prft_pend != 'N')
     {
        fn_userlog(c_ServiceName, "****** Conversion to market not allowed. Pls cancel the profit order. *********");
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )
        {
          fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);
        }
        strcpy(c_err_msg,"Conversion to market not allowed. Pls cancel the profit order");
        /***fn_errlog( c_ServiceName, "B23104", DEFMSG, c_err_msg  ); ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
    }
		/*** Ver 8.2 ends ***/
	}
/************************ver 8.2 ***********************/
	else if(c_fc_flag == 'T')
	{
	fn_userlog(c_ServiceName,"Check Point 3 shlok .........");
		EXEC SQL
        SELECT
        fod_sltp_ordr_rfrnc,            //fresh order ref
        fod_ordr_stts
      INTO
        :c_sltp_ordr_refrnc,
        :c_frsh_ordr_stts
      FROM FOD_FO_ORDR_DTLS
      WHERE FOD_ORDR_RFRNC = :st_o_ordbook.c_ordr_rfrnc;

		if(SQLCODE != 0)
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     
			{
				fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       
			}
			fn_errlog( c_ServiceName, "S31350", SQLMSG, c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	 }


  	EXEC SQL 
    select 
		FOD_STP_LSS_TGR 
		INTO    :l_stp_loss_trgr
		from FOD_FO_ORDR_DTLS 
		where FOD_FC_FLAG = 'C'
    AND 	FOD_LMT_MRKT_SL_FLG = 'S'
    AND 	FOD_ORDR_STTS='O'
    AND 	DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_sltp_ordr_refrnc;
   
		if(SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
		{
			fn_errlog( c_ServiceName, "S31355",LIBMSG,c_err_msg);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	
	}

/********************** ver 8.2 End ********************/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"c_fc_flag : %c ~ c_lmt_mrkt_flg : %c ~  c_frsh_ordr_stts : %c ",c_fc_flag, st_xchngbook.c_slm_flg, c_frsh_ordr_stts);
	}

	if(c_fc_flag == 'C' && st_xchngbook.c_slm_flg == 'M' && !(c_frsh_ordr_stts == EXECUTED))
	{
		fn_userlog(c_ServiceName, "******Modification of cover limit order to market is not allowed. Please check order status.*********");
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }	
		fn_errlog( c_ServiceName, "B23103", DEFMSG, c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
		Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );		
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"c_fc_flag : %c ~ c_sltpfp_lmt_allwd_flg : %c ~ c_frsh_ordr_stts : %c ~ c_cvr_ordr_stts : %c ~ c_lmt_mrkt_flg : %c ",c_fc_flag, c_sltpfp_lmt_allwd_flg, c_frsh_ordr_stts, c_cvr_ordr_stts, st_xchngbook.c_slm_flg);
	}

	if (c_fc_flag != 'T') /*** Skip Profit order in Ver 8.2 ***/
	{
	if(	!((c_frsh_ordr_stts == ORDERED && c_cvr_ordr_stts == ORDERED) ||
	   (c_frsh_ordr_stts == EXECUTED && c_cvr_ordr_stts == ORDERED) ||
	   (c_frsh_ordr_stts == EXECUTED && c_cvr_ordr_stts == PARTIALLY_EXECUTED)||
	   (c_frsh_ordr_stts == PARTIALLY_EXECUTED && c_cvr_ordr_stts == ORDERED)) )
	{
		fn_userlog(c_ServiceName, "******Modification of order is not allowed. Please check order status.*********");
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }
		fn_errlog( c_ServiceName, "B23103", DEFMSG, c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
		Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );		
	}
	}
	/*** Ver 5.6  Ends   ***/

    /** Get Cover order reference & fresh order status from FRESH order. **/
    EXEC SQL
      SELECT
            fod_sltp_ordr_rfrnc,
            fod_ordr_stts,
            nvl(fod_amt_blckd,0),
            nvl(fod_lss_amt_blckd,0),
            nvl(fod_fc_flag,'*'),
            nvl(fod_diff_amt_blckd,0),
            nvl(fod_diff_lss_amt_blckd,0)
      INTO
          :c_sltp_ordr_refrnc,
          :c_frsh_ordr_stts,
          :d_amt_blkd,
          :d_lss_amt_blkd,
          :c_fc_flg,
          :d_diff_amt_blckd,
          :d_diff_lss_amt_blckd
      FROM FOD_FO_ORDR_DTLS
      WHERE FOD_ORDR_RFRNC = :st_o_ordbook.c_ordr_rfrnc;

    if( SQLCODE != 0 )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      	{
        	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      	}
        fn_errlog( c_ServiceName, "S31360", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
			if(DEBUG_MSG_LVL_1) /** DEBUG_MSG_LVL_0 Added in Ver 6.2 **/ /** ver 6.3, debug changed from 0 to 1**/
			{
				fn_userlog(c_ServiceName,"Match Account :%s:",st_o_ordbook.c_cln_mtch_accnt);
				fn_userlog(c_ServiceName,"Fresh order reference :%s:",c_sltp_ordr_refrnc);
				fn_userlog(c_ServiceName,"order status  :%c:", c_frsh_ordr_stts);
				fn_userlog(c_ServiceName,"Modification Counter :%ld:",st_o_ordbook.l_mdfctn_cntr);

      /*** Ver 5.0 Starts ** Type specifier changed to %lf from %ld ***/
				fn_userlog(c_ServiceName,"amt_blckd   :%lf:",d_amt_blkd);
				fn_userlog(c_ServiceName,"lss_amt_blckd :%lf:",d_lss_amt_blkd);
				fn_userlog(c_ServiceName,"diff_amt_blckd :%lf:",d_diff_amt_blckd);
				fn_userlog(c_ServiceName,"diff_lss_amt_blckd :%lf:",d_diff_lss_amt_blckd);
				/*** Ver 5.0 ** Ends ***/
			}

    if(c_fc_flg == 'C') /*Cover*/
    {
      d_amt_blkd = 0;
      d_lss_amt_blkd = 0;

      EXEC SQL
         SELECT     FOD_AMT_BLCKD,
                    FOD_LSS_AMT_BLCKD,
                    FOD_ORDR_FLW
         INTO       :d_amt_blkd,
                    :d_lss_amt_blkd,
                    :c_ord_flw
         FROM       FOD_FO_ORDR_DTLS
         WHERE      FOD_ORDR_RFRNC = :c_sltp_ordr_refrnc;

      if(SQLCODE != 0)
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      	{
        	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      	}
        fn_errlog( c_ServiceName, "S31365", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Margin Amount of the fresh order :%lf:", d_amt_blkd);
        fn_userlog(c_ServiceName,"Loss Amount of the fresh order :%lf:", d_lss_amt_blkd);
      }
    }

  /*Get the current margin percentage and sltp % diff. from the database */
    EXEC SQL
      SELECT nvl(FMM_SLTP_DIFF_PRCNT,0),
             nvl(FMM_SLTP_PRCNT,0),
              abs(:st_xchngbook.l_stp_lss_tgr - :st_xchngbook.l_ord_lmt_rt),
						 nvl(FMM_SLTP_PRFT_DIFF_PRCNT,0), /*** Ver 8.2 ***/
							abs(:l_stp_loss_trgr - :st_xchngbook.l_ord_lmt_rt) /*** Ver 8.2 ***/
      INTO   :d_fmm_sltp_diff_prcnt,
             :d_fmm_sltp_prcnt,
             :l_amt,
						 :d_fmm_prft_diff_prcnt, /*** Ver 8.2 ***/
						 :l_prft_amt /*** Ver 8.2 ***/
      FROM   FMM_FO_MRGN_MSTR
      WHERE  FMM_PRDCT_TYP= 'F'
      AND    FMM_UNDRLYNG = :st_o_ordbook.c_undrlyng
      AND    FMM_XCHNG_CD = :st_o_ordbook.c_xchng_cd
      AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
                             FROM    FCB_FO_CLN_BSKT_ALLTD
                             WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                                   FROM CLM_CLNT_MSTR
                                                   WHERE CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt));

    if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_userlog(c_ServiceName,"******Invalid Stock Code*******");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      {
        fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      }
      fn_errlog( c_ServiceName, "S31370", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    else if(SQLCODE != 0)
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      {
        fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      }
      fn_errlog( c_ServiceName, "S31375", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"SLTP Percentage   :%lf:", d_fmm_sltp_prcnt);
      fn_userlog(c_ServiceName,"SLTP diff. Percentage   :%lf:", d_fmm_sltp_diff_prcnt);
      fn_userlog(c_ServiceName,"st_xchngbook.l_stp_lss_tgr  :%ld:", st_xchngbook.l_stp_lss_tgr);
      fn_userlog(c_ServiceName,"st_xchngbook.l_ord_lmt_rt   :%ld:", st_xchngbook.l_ord_lmt_rt);
      fn_userlog(c_ServiceName,"l_amt   :%ld:", l_amt);
    }

		/*** Ver 8.2 starts ***/
		if ( c_fc_flg  == 'T' )
    {
      if((( l_stp_loss_trgr * d_fmm_prft_diff_prcnt )/100)>  l_prft_amt )
      {
        fn_errlog( c_ServiceName, "S31380","Limit and trigger price difference of profit order is less than the defined value",c_err_msg);
        strcpy(c_err_msg,"Limit and trigger price difference of profit order is less than the defined value");
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )    
        {
          fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                      
        }
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); 
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);  
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
		/*** Ver 8.2 ends ***/

    if ( c_temp_slm_flg == 'S' )
    {
      if(((st_xchngbook.l_stp_lss_tgr * d_fmm_sltp_diff_prcnt)/100)> l_amt)
      {
        fn_errlog( c_ServiceName, "S31385","Limit and trigger price difference of cover order is less than the defined value",c_err_msg);
        strcpy(c_err_msg,"Limit and trigger price difference of cover order is less than the defined value");
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      	{
        	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      	}
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    /** Getting the total executed value and quantity of FRESH order. **/
    EXEC SQL
      SELECT  NVL(SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),0),
              NVL(SUM(FTD_EXCTD_QTY),0)
      INTO    :d_frsh_exe_val,
              :li_tot_exec_qty
      FROM    FTD_FO_TRD_DTLS
      WHERE   FTD_ORDR_RFRNC = :c_sltp_ordr_refrnc;


    if( SQLCODE != 0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      {
        fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      }
      fn_errlog( c_ServiceName, "S31390", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		/*** Ver 8.2 starts ***/
		if (c_fc_flg  == 'T' )
		{
		d_avg_prc  = (double) (d_frsh_exe_val / li_tot_exec_qty);
		
		fn_userlog( c_ServiceName, "st_o_ordbook.c_ordr_flw:%c: AVG :%lf:",st_o_ordbook.c_ordr_flw,d_avg_prc);

		/** Profit Limit Price cannot be less than Fresh Order Price In case of Fresh Buy Order **/
    if( st_o_ordbook.c_ordr_flw == 'S' && ( st_xchngbook.l_ord_lmt_rt < d_avg_prc ))
    {
      fn_userlog( c_ServiceName, "Profit Limit Price cannot be less than Fresh Order Price BUY");
      strcpy(c_err_msg,"Profit Limit Price cannot be less than Fresh Order Price");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )    
      { 
         fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       
      }
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); 
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);  
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
    if( st_o_ordbook.c_ordr_flw == 'B' && ( st_xchngbook.l_ord_lmt_rt > d_avg_prc))
    {
      fn_userlog( c_ServiceName, "Profit Limit Price cannot be greater than Fresh Order Price SELL");
      strcpy(c_err_msg,"Profit Limit Price cannot be greater than Fresh Order Price");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )
      {
         fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);
      }
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		}
		/*** Ver 8.2 ends ***/

    /*** Ver 4.7 Starts ***/
    EXEC SQL
      SELECT  NVL((FOD_ORDR_TOT_QTY - (FOD_CNCL_QTY + FOD_EXPRD_QTY)),0)
      INTO    :l_tot_ord_qty
      FROM    FOD_FO_ORDR_DTLS
      WHERE   FOD_ORDR_RFRNC = :c_sltp_ordr_refrnc;


    if( SQLCODE != 0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      {
        fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      }
      fn_errlog( c_ServiceName, "S31395", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"li_tot_exec_qty = :%ld:", li_tot_exec_qty);
      fn_userlog(c_ServiceName,"l_tot_ord_qty   = :%ld:", l_tot_ord_qty );
    }

    /*** Ver 4.7 Ends ***/

    /** Checking if Fresh order value & quantity is equals to zero. */
	if(c_usr_flg != 'W')
	{
		if (d_frsh_exe_val == 0 || li_tot_exec_qty == 0 || (l_tot_ord_qty != li_tot_exec_qty))
															/*** Ver 4.7 check added for Part-excuted fresh order ***/
		{
		  fn_userlog(c_ServiceName, "******Fresh order is not yet executed.*********");
		  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      {
        fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      }
		  fn_errlog( c_ServiceName, "B23007", DEFMSG, c_err_msg  );
		  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
		  Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}

    if (c_fc_flg == 'C')
    {
      /*Check if the limit price and the trigger price of the cover order are in multiples of 5 paise*/

      if( (fn_5paisa(st_xchngbook.l_ord_lmt_rt)!= 0) &&
          (fn_5paisa(st_xchngbook.l_stp_lss_tgr)!= 0))
        {
          fn_errlog( c_ServiceName, "S31400","limit price and the trigger price of the cover order must be in multiples of paise ",c_err_msg);
          strcpy(c_err_msg,"limit price and the trigger price of the cover order must be in multiples of paise ");
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      		{
        		fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      		}
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
          Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

      /** Calculating the Weight Average Price for the executed quantity of FRESH Order. **/
      d_wgt_avrg_price = (double) (d_frsh_exe_val / li_tot_exec_qty);


      /* Calculate open quantity */
      EXEC SQL
        SELECT  NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FTD_EXCTD_QTY,FTD_EXCTD_QTY ) ), 0 ),
                NVL( SUM( DECODE( FOD_FC_FLAG, 'F', FTD_EXCTD_QTY, 0 ) ), 0 )
        INTO    :l_open_qty,
                :l_frsh_xtd_qty
        FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
        WHERE   FOD_CLM_MTCH_ACCNT    = :st_o_ordbook.c_cln_mtch_accnt
        AND     FOD_TRD_DT            = :st_o_ordbook.c_trd_dt
        AND     FOD_PRDCT_TYP         = :st_o_ordbook.c_prd_typ
        AND     FTD_ORDR_RFRNC        = FOD_ORDR_RFRNC
        AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_sltp_ordr_refrnc;

      if( SQLCODE != 0 )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      	{
        	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      	}
        fn_errlog( c_ServiceName, "S31405", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if(l_open_qty <0 )
      {
        l_open_qty=0;
      }

			/*** Ver 5.6 starts here ***/

      /* Calculate Margin amount to be blocked */		
      /*** d_amt_to_be_blckd = ((double)(l_open_qty * d_wgt_avrg_price) * d_fmm_sltp_prcnt / 100.0);

      * Calculate Loss amount to be blocked *
      *if ( c_ord_flw == BUY )
      {
        d_lss_amt_to_be_blckd =(l_open_qty * (d_wgt_avrg_price - st_xchngbook.l_ord_lmt_rt ) );
      }
      else if ( c_ord_flw == SELL )
      {
        d_lss_amt_to_be_blckd =(l_open_qty * (d_wgt_avrg_price - st_xchngbook.l_ord_lmt_rt ) * -1 );
      }****/

		 EXEC SQL
		  SELECT
				fod_fc_flag
		 INTO
			  :c_fc_flag
		  FROM FOD_FO_ORDR_DTLS
		  WHERE FOD_ORDR_RFRNC = :st_o_ordbook.c_ordr_rfrnc;
		if(SQLCODE != 0)
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      {
        fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      }
			fn_errlog( c_ServiceName, "S31410", SQLMSG, c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~Total Quntity B4 fn_cal_mrgn_sltp :%d ~~~~~~~~~~~~~~~ ",l_tot_ord_qty);
		}
		
	  if(c_fc_flag == 'C')
	  {
		/*EXEC SQL
		  SELECT
				fod_lmt_rt
		  INTO
			  :l_fsh_ord_lmt_rt
		  FROM FOD_FO_ORDR_DTLS
		  WHERE FOD_ORDR_RFRNC = :c_sltp_ordr_refrnc;
			if(SQLCODE != 0)
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog( c_ServiceName, "S31415", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}*/

		  EXEC SQL
		  SELECT
				FXB_LMT_RT
		  INTO
			  :l_fsh_ord_lmt_rt
		  FROM FXB_FO_XCHNG_BOOK
		  WHERE FXB_ORDR_RFRNC = :c_sltp_ordr_refrnc
		  AND FXB_MDFCTN_CNTR = (select max(FXB_MDFCTN_CNTR) FROM FXB_FO_XCHNG_BOOK
		  WHERE FXB_ORDR_RFRNC = :c_sltp_ordr_refrnc);

			if(SQLCODE != 0)
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      	{
        	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      	}
				fn_errlog( c_ServiceName, "S31420", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

		  i_returncode =  fn_cal_mrgn_sltp (c_ServiceName,
											c_sltp_ordr_refrnc,
											l_fsh_ord_lmt_rt, 
											st_xchngbook.l_ord_lmt_rt,
											&d_amt_to_be_blckd,
											&d_lss_amt_to_be_blckd,
											c_ref_rmrks,  /*** Ver 7.9 ***/
											&d_comp1_mrgn,/*** Ver 7.9 ***/
											&d_comp1_pl,  /*** Ver 7.9 ***/
											&d_xchng_amt, /*** Ver 7.9 ***/
											c_err_msg);
		  if ( i_returncode != SUCC_BFR )
		  {
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      {
        fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      }
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
			Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
			Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		  }
	  }
	  /*** Ver 5.6 ends here ***/

      /* Difference margin & loss */
      d_diff_amt = (double) d_amt_blkd - d_amt_to_be_blckd;
      d_diff_loss = (double) d_lss_amt_blkd - d_lss_amt_to_be_blckd;

       if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"d_amt_blkd = :%lf:", d_amt_blkd);
        fn_userlog(c_ServiceName,"d_amt_to_be_blckd = :%lf:", d_amt_to_be_blckd);
        fn_userlog(c_ServiceName,"d_diff_amt = :%lf:", d_diff_amt);

        fn_userlog(c_ServiceName,"d_lss_amt_blkd = :%lf:", d_lss_amt_blkd);
        fn_userlog(c_ServiceName,"d_lss_amt_to_be_blckd = :%lf:", d_lss_amt_to_be_blckd);
        fn_userlog(c_ServiceName,"d_diff_loss = :%lf:", d_diff_loss);
      }

        /* Not releasing the profit */
        /* Block difference in the margin amount */
        strcpy( c_narration_id , ON_MODIFICATION_PLACEMENT);

        c_insuff_flg = 'N'; /*** Ver 4.2 ***/
        d_required_amt=0; /*** Ver 4.2 ***/
        if(d_diff_amt < 0) /***Ver 5.6 changed from != to < ***/
        {
          d_balance_amt = 0.0;

          if(DEBUG_MSG_LVL_3)
          {
            fn_userlog(c_ServiceName,"Block diff in margin amount");
          }
          i_returncode = fn_upd_limits( c_ServiceName,
                            &st_pstn_actn,
                            &st_err_msg,
                            c_narration_id,
                            DEBIT_WHEN_LIMIT,
                            d_diff_amt,
                            &d_balance_amt);

          if ( i_returncode != 0 )
          {
            /*** Ver 4.2 *** starts ***/
            switch (i_returncode)
            {
             case INSUFFICIENT_LIMITS :
             
                  c_insuff_flg = 'Y';
                  strcpy(c_err_msg,strtok(st_err_msg.c_err_msg,"|"));
                  d_required_amt = atof(strtok(NULL,"|"));
                  if( d_lss_amt_to_be_blckd < 0 )
                  {
                    if( d_lss_amt_blkd < 0 )
                    {
                     d_required_amt = d_required_amt + ( ( (-1) * d_lss_amt_blkd ) / 100) ;
                    }
                  }
                  else if( d_diff_loss < 0 )
                  {
                    d_required_amt = d_required_amt + ( ( (-1) * d_diff_loss) / 100 );
                  }
                  fn_userlog(c_ServiceName,"c_err_msg :%s:",c_err_msg);
                  fn_userlog(c_ServiceName,"d_required_amt :%lf:",d_required_amt);
                  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                  /*** Ver 4.6 Starts ***/

                     c_actn_flg = 'M';

                     i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
                     if ( i_trnsctn == -1 )
                     {
                        fn_errlog( c_ServiceName, "S31425",LIBMSG,c_err_msg);
        								if(c_insuff_flg == 'Y' && c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0)) /** Ver 6.4 **/
        								{
            							fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);
        								}
        								else
        								{
													if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      										{
        										fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      										}
												}

                        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
                        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
                        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
                        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                     }


                     i_returncode =  fn_ins_ffl_log_tbl  (  c_ServiceName,
                                                            st_o_ordbook,
                                                            c_err_msg,
                                                            d_required_amt,
                                                            c_actn_flg
                                        );
                     if ( i_returncode != 0 )
                     {
                        fn_errlog( c_ServiceName, "S31430", LIBMSG, c_err_msg  );
                        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        								if(c_insuff_flg == 'Y' && c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0)) /** Ver 6.4 **/
        								{
            							fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);
        								}
        								else
       							 		{
													if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
                        	{
                          	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
                        	}
												}
                        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
                        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
                        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
                        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

                     }

                     if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
                     {
                        fn_errlog( c_ServiceName, "S31435",LIBMSG,c_err_msg);
												fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );                    /** Ver 6.4 **/
        								if(c_insuff_flg == 'Y' && c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0)) /** Ver 6.4 **/
        								{
            							fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);
        								}
        								else
        								{
													if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
                        	{
                          	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
                        	}
												}	
                        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
                        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
                        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
                        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                     }

                  /*** Ver 4.6  Ends   ***/
                  fn_errlog( c_ServiceName, "S31440", LIBMSG, c_err_msg );
        					if(c_insuff_flg == 'Y' && c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0)) /** Ver 6.4 **/
        					{
            				fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);
        					}
        					else
        					{
									  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
                    {
                      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
                    }
                  }

                  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
                  Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
                  
                  sprintf(st_err_msg.c_err_msg,"%s<%lf>",c_err_msg,d_required_amt);

                  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
                  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
             default :
                  /**** Ver 4.2 Ends ***/ 
                  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
                  {
                    fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
                  }
                  fn_errlog( c_ServiceName, "S31445", LIBMSG, c_err_msg );
                  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
                  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
                  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
                  Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }
         }
          d_diff_amt = d_diff_amt - d_balance_amt ;
        }
				else /*** Ver 5.6 else loop added ***/
				{
						d_diff_amt = 0.0;	
				}

				/*** Ver 7.9 started ***/
        MEMSET(c_tmp_rmrks);    
        strcpy ( c_tmp_rmrks, st_pstn_actn.c_ref_rmrks ); 
        sprintf(st_pstn_actn.c_ref_rmrks,"%s%s",c_ref_rmrks,c_tmp_rmrks);  
				/*** Ver 7.9 ends ***/

        /* Block difference in the loss amount */
        strcpy( c_narration_id , ON_MODIFICATION_PLACEMENT);
        if( d_lss_amt_to_be_blckd < 0)
        {
					/*** Added in ver 5.6 start ***/
					d_diff_loss = 0.0;
          fn_userlog(c_ServiceName,"Not releasing Profit.....");
					/*** Added in ver 5.6 ends ***/

					/*** Commented in ver 5.6 ***
          if( d_lss_amt_blkd !=0)
          {
            i_returncode = fn_upd_limits( c_ServiceName,
                              &st_pstn_actn,
                              &st_err_msg,
                              c_narration_id,
                              DEBIT_WHEN_LIMIT,
                              d_lss_amt_blkd,
                              &d_balance_amt);


            if ( i_returncode != 0 )
            {  *** Ver 4.2 Starts here ***
              switch (i_returncode)
              {
               case INSUFFICIENT_LIMITS:
                  c_insuff_flg = 'Y';
                  strcpy(c_err_msg,strtok(st_err_msg.c_err_msg,"|"));
                  d_required_amt = atof(strtok(NULL,"|"));

                  fn_userlog(c_ServiceName,"c_err_msg :%s:",c_err_msg);
                  fn_userlog(c_ServiceName,"d_required_amt :%lf:",d_required_amt);
                  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                  *** Ver 4.6 Starts ***

                     c_actn_flg = 'M';

                     i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
                     if ( i_trnsctn == -1 )
                     {
                        fn_errlog( c_ServiceName, "S31450",LIBMSG,c_err_msg);
                        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
                        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  ***  Ver 5.5  ***
                        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   ***  Ver 5.5  ***
                        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                     }


                     i_returncode =  fn_ins_ffl_log_tbl  (  c_ServiceName,
                                                            st_o_ordbook,
                                                            c_err_msg,
                                                            d_required_amt,
                                                            c_actn_flg
                                                        );
                     if ( i_returncode != 0 )
                     {
                        fn_errlog( c_ServiceName, "S31455", LIBMSG, c_err_msg  );
                        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
                        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  ***  Ver 5.5  ***
                        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   ***  Ver 5.5  ***
                        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

                     }

                     if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
                     {
                        fn_errlog( c_ServiceName, "S31460",LIBMSG,c_err_msg);
                        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   **Ver 2.7**
                        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  ***  Ver 5.5  ***
                        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   ***  Ver 5.5  ***
                        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                     }

                  *** Ver 4.6  Ends   ***
                  fn_errlog( c_ServiceName, "S31465", LIBMSG, c_err_msg );
                  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
                  Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);

                  sprintf(st_err_msg.c_err_msg,"%s<%lf>",c_err_msg,d_required_amt);
                  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
                  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
               default :
                  **** Ver 4.2 Ends Here ****
                   fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                   fn_errlog( c_ServiceName, "S31470", LIBMSG, c_err_msg );
                   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
                   Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
                   Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  ***  Ver 5.5  ***
                   Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   ***  Ver 5.5  ***
                   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              }
            }
          }
           d_diff_loss= d_lss_amt_blkd ;  ***/
        }
        else  if(d_diff_loss < 0)		/*** Ver 5.6 condition changed from !=0 to < 0 ***/
        {
          d_balance_amt = 0.0;

           if(DEBUG_MSG_LVL_3)
           {
             fn_userlog(c_ServiceName,"Block diff in loss amount");
          }
          i_returncode = fn_upd_limits( c_ServiceName,
                            &st_pstn_actn,
                            &st_err_msg,
                            c_narration_id,
                            DEBIT_WHEN_LIMIT,
                            d_diff_loss,
                            &d_balance_amt);


          if ( i_returncode != 0 )
          { /*** Ver 4.2 Starts here ***/
              switch (i_returncode)
              {
               case INSUFFICIENT_LIMITS:
                  c_insuff_flg = 'Y';
                  strcpy(c_err_msg,strtok(st_err_msg.c_err_msg,"|"));
                  d_required_amt = atof(strtok(NULL,"|"));

                  if(DEBUG_MSG_LVL_3)  /*** ver 6.3 added in debug ***/
                  { 
                    fn_userlog(c_ServiceName,"c_err_msg :%s:",c_err_msg);
                    fn_userlog(c_ServiceName,"d_required_amt :%lf:",d_required_amt);
                  }

                  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                  /*** Ver 4.6 Starts ***/

                     c_actn_flg = 'M';

                     i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
                     if ( i_trnsctn == -1 )
                     {
                        fn_errlog( c_ServiceName, "S31475",LIBMSG,c_err_msg);
                        if(c_insuff_flg == 'Y' && c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0)) /** Ver 6.4 **/
                        {
                          fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);
                        }
                        else
                        {
													if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
                        	{
                          	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
                        	}
												}
                        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
                        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
                        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
                        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                     }


                     i_returncode =  fn_ins_ffl_log_tbl  (  c_ServiceName,
                                                            st_o_ordbook,
                                                            c_err_msg,
                                                            d_required_amt,
                                                            c_actn_flg
                                                        );
                     if ( i_returncode != 0 )
                     {
                        fn_errlog( c_ServiceName, "S31480", LIBMSG, c_err_msg  );
                        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                        if(c_insuff_flg == 'Y' && c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0)) /** Ver 6.4 **/
                        {
                          fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);
                        }
                        else
                        {
													if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
                        	{
                          	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
                        	}
												}
                        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
                        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
                        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
                        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

                     }

                     if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
                     {
                        fn_errlog( c_ServiceName, "S31485",LIBMSG,c_err_msg);
												fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );                   /** Ver 6.4 **/    	
                        if(c_insuff_flg == 'Y' && c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0)) /** Ver 6.4 **/
                        {
                          fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);
                        }
                        else
                        {
													if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
                        	{
                          	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
                        	}
												}	
                        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
                        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
                        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
                        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                     }

                  /*** Ver 4.6  Ends   ***/
                  fn_errlog( c_ServiceName, "S31490", LIBMSG, c_err_msg );
                  if(c_insuff_flg == 'Y' && c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0)) /** Ver 6.4 **/
                  {
                    fn_upd_trail_ord(st_xchngbook.c_ordr_rfrnc);
                  }
                  else
                  {
										if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
                  	{
                    	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
                  	}
									}	
                  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
                  Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);

                  sprintf(st_err_msg.c_err_msg,"%s<%lf>",c_err_msg,d_required_amt);
                  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
                  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

               default :
                  /**** Ver 4.2 Ends Here ****/
                  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
                  {
                    fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
                  }
                  fn_errlog( c_ServiceName, "S31495", LIBMSG, c_err_msg );
                  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
                  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
                  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
                  Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              }
          }
          d_diff_loss = d_diff_loss  - d_balance_amt ;
        }
				else if(d_diff_loss >= 0)		/*** Else If loop added in Ver 5.6 ***/
        {
          d_diff_loss = 0.0;
        }

				strcpy ( st_pstn_actn.c_ref_rmrks, c_tmp_rmrks);    /**** Ver 7.9 ***/
        MEMSET(c_tmp_rmrks);																/**** Ver 7.9 ***/

        EXEC SQL
         UPDATE     FOD_FO_ORDR_DTLS
         SET        FOD_AMT_BLCKD     = :d_amt_blkd - :d_diff_amt,
                    FOD_LSS_AMT_BLCKD = :d_lss_amt_blkd - :d_diff_loss,
										FOD_SLTP_MRGN = :d_comp1_mrgn,			/**** Ver 7.9 ***/			
										FOD_SLTP_PL   = :d_comp1_pl,				/**** Ver 7.9 ***/	 
										FOD_SLTP_SEBI_MRGN = :d_xchng_amt		/**** Ver 7.9 ***/
         WHERE      FOD_ORDR_RFRNC    = :c_sltp_ordr_refrnc;

        if(SQLCODE != 0)
        {
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
          {
            fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
          }
          fn_errlog( c_ServiceName, "S31500", SQLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
          Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

				/*** Commented in Ver 5.6 ***
        EXEC SQL
         UPDATE     FOD_FO_ORDR_DTLS
         SET        FOD_DIFF_AMT_BLCKD      =  :d_diff_amt,
                    FOD_DIFF_LSS_AMT_BLCKD  =  :d_diff_loss
         WHERE      FOD_ORDR_RFRNC          = :st_o_ordbook.c_ordr_rfrnc;

        if(SQLCODE != 0)
        {
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          fn_errlog( c_ServiceName, "S31505", SQLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  ***  Ver 5.5  ***
          Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   ***  Ver 5.5  ***
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        } ***/
    }
  }
  /*** Ver 3.5 ends here ***/
	
	i_ip_len = sizeof ( struct vw_sequence );
  i_op_len = sizeof ( struct vw_sequence );

  strcpy( st_s_sequence.c_pipe_id, st_xchngbook.c_pipe_id );
  strcpy( st_s_sequence.c_trd_dt, st_xchngbook.c_mod_trd_dt );
  st_s_sequence.c_rqst_typ = GET_XCHNG_SEQ;

	/***************** Commented in Ver 6.9 ************
  fn_cpy_ddr ( st_s_sequence.c_rout_crt );
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_s_sequence,
                              &st_r_sequence,
                              "vw_sequence",
                              "vw_sequence",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_GET_SEQ" );
	************* Comment ends in Ver 6.9 ***********************/
  /*** Added in ver 6.9 ***/
  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"Before Calling function fn_get_seq **********");
  }
  i_returncode = fn_get_seq(c_ServiceName,c_err_msg,st_s_sequence.c_pipe_id,&st_r_sequence.l_seq_num,st_s_sequence.c_rqst_typ);
  /*** Ver 6.9 Ends ***/
	if ( i_returncode != SUCC_BFR )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  l_xchng_seq_num = st_r_sequence.l_seq_num;

	if ( ( st_xchngbook.c_ord_typ == GOOD_TILL_TODAY ) ||
       ( st_xchngbook.c_ord_typ == IMMEDIATE_OR_CANCEL ) )
	{
		strcpy ( st_xchngbook.c_valid_dt, (char *)c_trd_dt.arr ); 
	}

  /**** Ver 6.4 Starts ****/
    if( c_prcimp_flg_fxb =='Y' && c_sltp_trail_flag == 'N' )
    {
      l_init_sltp_rt =0;
      l_init_lmt_rt =0;
    }
 
      c_prcimpv_flg='N';
    if( c_sltp_trail_flag == 'Y' )
    {
		  if( strcmp(c_rmrks,"SYSTRAIL") != 0 )	
			{
 		     EXEC SQL
    	    SELECT  NVL(FTQ_LST_TRD_PRC,0)
      	  INTO    :l_lTP
      	  FROM    FTQ_FO_TRD_QT
          WHERE   FTQ_XCHNG_CD  = :st_cntrct.c_xchng_cd
       	  AND     FTQ_PRDCT_TYP = :st_cntrct.c_prd_typ
        	AND     FTQ_UNDRLYNG  = :st_cntrct.c_undrlyng
        	AND     FTQ_EXPRY_DT  = :st_cntrct.c_expry_dt
        	AND     FTQ_EXER_TYP  = :st_cntrct.c_exrc_typ
        	AND     FTQ_OPT_TYP   = :st_cntrct.c_opt_typ
        	AND     FTQ_STRK_PRC  = :st_cntrct.l_strike_prc;

        	if ( SQLCODE !=0 )
        	{
          	fn_userlog(c_ServiceName, "Failed To Get LTP.");
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );                    /** Ver 6.4 **/  
          	fn_errlog(c_ServiceName, "S31510", SQLMSG, c_err_msg);
						if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
          	{
            	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
          	}
          	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
          	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
          	Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
          	Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
        	}
			 }	

    	  if(DEBUG_MSG_LVL_3)
				{
        	fn_userlog(c_ServiceName, "l_lTP******:%ld:",l_lTP);
				}

	      if(st_o_ordbook.c_ordr_flw == 'B' )
  	    { 
    	    l_trail_amt= st_xchngbook.l_stp_lss_tgr - l_lTP ;
     	  }
        else
       	{
          l_trail_amt= l_lTP - st_xchngbook.l_stp_lss_tgr;
        }
        l_lmt_offset=abs( st_xchngbook.l_ord_lmt_rt - st_xchngbook.l_stp_lss_tgr );
        c_prcimpv_flg=c_sltp_trail_flag;
        
        if( DEBUG_MSG_LVL_3 )
        {
          fn_userlog(c_ServiceName, "st_cntrct.c_xchng_cd ....:%s:",st_cntrct.c_xchng_cd);
          fn_userlog(c_ServiceName, "st_cntrct.c_prd_typ......:%c:",st_cntrct.c_prd_typ);
          fn_userlog(c_ServiceName, "st_cntrct.c_undrlyng.....:%s:",st_cntrct.c_undrlyng);
        }

        EXEC SQL
          SELECT NVL(FUM_TRAIL_AMT,0)*100
          INTO   :d_fum_trail_amt
          FROM   FUM_FO_UNDRLYNG_MSTR
          WHERE  FUM_XCHNG_CD  =:st_cntrct.c_xchng_cd
          AND    FUM_PRDCT_TYP =:st_cntrct.c_prd_typ
          AND    FUM_UNDRLYNG  =:st_cntrct.c_undrlyng;

        if ( SQLCODE !=0 )
        {
          fn_userlog(c_ServiceName, "Failed To Get FUM_TRAIL_AMT.");
          fn_errlog(c_ServiceName, "S31515", SQLMSG, c_err_msg);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );                    /** Ver 6.4 **/  
					if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
          {
            fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
          }
          Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
        }

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName, "l_fum_trail_amt*****:%ld:",d_fum_trail_amt);
        }

      if((double) l_trail_amt <  d_fum_trail_amt )
      {

          if( st_o_ordbook.c_ordr_flw == 'B' )
          {
            sprintf(c_err_msg,"The difference between SLTP and LTP should be greater than minimum difference of %lf in case of Buy order",(d_fum_trail_amt/100));
          }
          else
          {
            sprintf(c_err_msg,"The difference between LTP and SLTP should be greater than minimum difference of %lf in case of Buy order",(d_fum_trail_amt/100));

          }
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );                    /** Ver 6.4 **/  
				  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
          {
            fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
          }      
          Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
      }
    }
  
    if( c_prcimp_flg_fxb == 'N' && c_sltp_trail_flag == 'Y' )
    {
      l_init_sltp_rt = st_xchngbook.l_stp_lss_tgr;
      l_init_lmt_rt = st_xchngbook.l_ord_lmt_rt;
    }

  /****  Ver 6.4 Ends ****/


	st_xchngbook.l_mdfctn_cntr = st_o_ordbook.l_mdfctn_cntr + 1;

/*******************************************************
	st_xchngbook.c_spl_flg = NORMAL_ORDER;
*******************************************************/

	st_xchngbook.c_spl_flg = st_o_ordbook.c_spl_flg;

	st_xchngbook.l_ord_seq = l_xchng_seq_num;

 	if ( st_o_ordbook.c_ordr_stts == REQUESTED )
	{
		st_xchngbook.c_req_typ = NEW;
	}
	else
	{
			st_xchngbook.c_req_typ = MODIFY;
	}
	st_xchngbook.c_ex_ordr_typ = ORDINARY_ORDER;
	strcpy ( st_xchngbook.c_rqst_tm , (char *)c_sysdate.arr );
  st_xchngbook.c_plcd_stts = 'R'; /* Request Placed */
 	st_xchngbook.c_oprn_typ = INSERTION_ON_ORDER_MODIFICATION;

	/* Ver 2.3 Begins */
	if( c_fum_mrkt_typ == EXTND_MRKT && c_fcm_mrkt_typ == EXTND_MRKT )
  {
		st_xchngbook.c_mkrt_typ = 'X';
	}
	else
	{
		st_xchngbook.c_mkrt_typ = 'N';
	}
	/* Ver 2.3 Ends */

	i_ip_len = sizeof ( struct vw_xchngbook );
 	i_op_len = sizeof ( struct vw_xchngbook );

  fn_cpy_ddr ( st_xchngbook.c_rout_crt );

	/*** Commented in Ver 3.2 ***
  i_returncode = fn_call_svc( c_ServiceName,
  	                          c_err_msg,
                              &st_xchngbook,
                              &st_xchngbook,
                              "vw_xchngbook",
                              "vw_xchngbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_XCHNGBK" );
	*************************/
  
	/*** Added in Ver 3.2 ***/
	i_returncode = fn_upd_xchngbk  ( c_ServiceName,
																	 &st_xchngbook,
																	 c_ip_address,
																	 st_usr_prfl.c_cln_mtch_accnt,		/*** Ver 4.0 ***/
																	 c_err_msg,
																	 l_init_sltp_rt,  /*** Ver 6.4 ****/   
																	 l_init_lmt_rt,   /*** Ver 6.4 ****/   
																	 l_lTP,           /*** Ver 6.4 ****/   
																	 l_lmt_offset,    /*** Ver 6.4 ****/   
																	 l_trail_amt,     /*** Ver 6.4 ****/   
																	 c_prcimpv_flg,   /*** Ver 6.4 ****/   
																  st_usr_prfl.l_session_id ); /*ver 8.6*/ 
	/************************/

	if ( i_returncode != SUCC_BFR )
  {
   	fn_errlog( c_ServiceName, "S31520",LIBMSG,c_err_msg);
   	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/* Ver 2.3 Comment Begins

  ****************************     Ver 2.2 Starts          **************************
  *** Code for temporary usage of immediate compliance release for extended market.**
  *** Shall be aligned with Order book and xchnge book views in next view release. ** 

  if( c_fum_mrkt_typ == EXTND_MRKT && c_fcm_mrkt_typ == EXTND_MRKT )
  {
					EXEC SQL
						UPDATE  fxb_fo_xchng_book
						SET     fxb_mrkt_typ = 'X'
						WHERE   fxb_ordr_rfrnc = :st_xchngbook.c_ordr_rfrnc
						AND     fxb_mdfctn_cntr = :st_xchngbook.l_mdfctn_cntr ;

					if(SQLCODE != 0)
					{
						fn_errlog ( c_ServiceName, "S31525", SQLMSG, c_err_msg);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		**Ver 2.7**
						tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
					}
   }

  ******************     Ver 2.2 Ends            ************************

	Ve 2.3 Comment Ends */

  st_o_ordbook.c_oprn_typ = UPDATE_MOD_CNTR;
	i_ip_len = sizeof ( struct vw_orderbook );
  i_op_len = sizeof ( struct vw_orderbook );
  fn_cpy_ddr ( st_o_ordbook.c_rout_crt );
	/***** Comment starts in Ver 6.9 ******
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_o_ordbook,
                              &st_o_ordbook,
                              "vw_orderbook",
                              "vw_orderbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_ORDRBK" );
	if ( i_returncode != SUCC_BFR )
	***** Comment Ends in Ver 6.9 *****/
  /*** Add starts in Ver 6.9 ***/
  i_returncode = fn_upd_ordrbook (c_ServiceName,c_err_msg,&st_o_ordbook);
  if( i_returncode != 0 )
  /*** Add ends in Ver 6.9 ***/
  {
   	fn_errlog( c_ServiceName, "S31530",LIBMSG,c_err_msg);
   	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


  /* if ( st_o_ordbook.c_ordr_stts == REQUESTED ) ** Ver 4.8 **/
  if ( st_o_ordbook.c_ordr_stts == REQUESTED || ( c_vtc_ord == 'Y' ) ) /*** Ver 4.8  ( c_vtc_ord == 'Y' ) added **/ 
	{
		st_o_ordbook.c_slm_flg = st_xchngbook. c_slm_flg;
		st_o_ordbook.l_dsclsd_qty = st_xchngbook.l_dsclsd_qty;
		st_o_ordbook.l_ord_tot_qty = st_xchngbook.l_ord_tot_qty;
		st_o_ordbook.l_ord_lmt_rt = st_xchngbook.l_ord_lmt_rt;
		st_o_ordbook.l_stp_lss_tgr = st_xchngbook.l_stp_lss_tgr;
		st_o_ordbook.c_ord_typ = st_xchngbook.c_ord_typ;
		strcpy( st_o_ordbook.c_valid_dt , st_xchngbook.c_valid_dt);
		strcpy( st_o_ordbook.c_trd_dt , st_xchngbook.c_mod_trd_dt);

    if( c_vtc_ord != 'Y' )  /** Ver 4.8 **/
    {
		 strcpy( st_o_ordbook.c_ack_tm , "\0");
    }
    else  /** Ver 4.8 Starts Here ***/
    {
      if( st_o_ordbook.c_ordr_stts == REQUESTED )
      {
         strcpy( st_o_ordbook.c_ack_tm , "\0");
      }
      else
      {
        strcpy( st_o_ordbook.c_ack_tm , st_o_ordbook.c_prev_ack_tm);
      }
    }   /** Ver 4.8 Ends Here ***/

		st_o_ordbook.c_oprn_typ = UPDATE_ORDER_MODIFICATION;

		i_ip_len = sizeof ( struct vw_orderbook );
  	i_op_len = sizeof ( struct vw_orderbook );
  	fn_cpy_ddr ( st_o_ordbook.c_rout_crt );
		/***** Comment starts in Ver 6.9 ******
  	i_returncode = fn_call_svc( c_ServiceName,
                              	c_err_msg,
                              	&st_o_ordbook,
                              	&st_o_ordbook,
                              	"vw_orderbook",
                              	"vw_orderbook",
                              	i_ip_len,
                              	i_op_len,
                              	0,
                              	"SFO_UPD_ORDRBK" );

		if ( i_returncode != SUCC_BFR )
		***** Comment Ends in Ver 6.9 *****/
    /*** Add starts in Ver 6.9 ***/
    i_returncode = fn_upd_ordrbook (c_ServiceName,c_err_msg,&st_o_ordbook);
    if( i_returncode != 0 )
    /*** Add ends in Ver 6.9 ***/
  	{
   		fn_errlog( c_ServiceName, "S31535",LIBMSG,c_err_msg);
   		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	{
      	fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    	}
   		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
   		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

    /*** Ver 4.8 Starts Here ***/
    if( c_vtc_ord == 'Y' && st_o_ordbook.c_ordr_stts == ORDERED )    /*** Do not send the modification to exchnage ***/
    {
      EXEC SQL
        UPDATE FXB_FO_XCHNG_BOOK
           SET FXB_PLCD_STTS ='A',
               FXB_RMS_PRCSD_FLG='P',
               FXB_XCHNG_RMRKS = 'MODIFIED BY CLIENT'
         WHERE FXB_ORDR_RFRNC =:st_xchngbook.c_ordr_rfrnc
           AND FXB_MDFCTN_CNTR =:st_xchngbook.l_mdfctn_cntr;
      if ( SQLCODE != 0 )
      {
       fn_errlog( c_ServiceName, "S31540",SQLMSG,c_err_msg);
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    	 {
      	 fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    	 }	
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    /*** Ver 4.8 Ends Here ***/
	}

	if ( st_o_ordbook.c_ordr_stts == REQUESTED)
	{
     EXEC SQL
       UPDATE FOD_FO_ORDR_DTLS 
          SET FOD_PRCIMPV_FLG =:c_sltp_trail_flag,
              FOD_TRAIL_AMT =:l_trail_amt,
              FOD_LMT_OFFSET =:l_lmt_offset
        WHERE FOD_ORDR_RFRNC =:st_xchngbook.c_ordr_rfrnc;

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31545",SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
      {
        fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
      }
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	}

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "S31550",LIBMSG,c_err_msg);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );									 /** Ver 6.4 **/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 6.4 **/
    {
      fn_stts_trail_ord(st_xchngbook.c_ordr_rfrnc);                       /** Ver 6.4 **/
    }
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Ver 8.8 : starts here ***/
  i_returncode = 0;

  i_returncode = fn_upd_nrmlmrgn_reporting( st_usr_prfl.c_cln_mtch_accnt,
                                        st_xchngbook.c_xchng_cd,
                                        c_ServiceName,
                                        c_err_msg);

  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "S31555", LIBMSG, c_err_msg );
    fn_userlog(c_ServiceName,"Pls check, Nikhil Error while calling function fn_upd_mrgn_reporting..");
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /*** Ver 8.8 : Ends here ***/

	/********************************************************/
    /****Changes for Tux4 Triggers***************************/
    /********************************************************/
	/*
  fn_pst_trg( c_ServiceName, "TRG_LOOK_TAB", "TRG_LOOK_TAB",
                                st_xchngbook.c_pipe_id );
	*/

	/* To post the Trigger in Tux3 Domain Call the service SFO_FOS_TRG */
    strcpy ( c_fno_dmn_nm, "FNO" );
    strcpy ( c_fno_trg_nm, "TRG_LOOK_TAB" );
    strcpy ( c_fno_trg_dat, "TRG_LOOK_TAB" );

    /*i_returncode = fn_call_svc_fml ( c_ServiceName,
                                    c_err_msg,
                                    "SFO_FOS_TRG",
                                    0,
                                    4,
																		0,
                                    FFO_DMN_NM, (char *)c_fno_dmn_nm,
                                    FFO_TRG_NM, (char *)c_fno_trg_nm,
                                    FFO_ABT_TRG_DATA, (char *)c_fno_trg_dat,
                                    FFO_ABT_FILTER, (char *)st_xchngbook.c_pipe_id);

    if ( i_returncode != SUCC_BFR )
    {
      fn_errlog( c_ServiceName, "S31560", LIBMSG, c_err_msg  );
    }*/
	if(DEBUG_MSG_LVL_3) /** DEBUG_MSG_LVL_3 Added in Ver 6.2 **/
	{
		fn_userlog(c_ServiceName,"Returning Success ");
	}
	
    /********************************************************/
    /****Changes for Tux4 Triggers***************************/
    /********************************************************/
	i_actn_id = 0;		/**Ver 2.7**/
  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
  fn_userlog(c_ServiceName,"***TESTING***st_xchngbook.l_mdfctn_cntr is :%ld:",st_xchngbook.l_mdfctn_cntr);
  Fadd32(ptr_fml_Ibuf,FFO_MDFCTN_CNTR,(char *)&st_xchngbook.l_mdfctn_cntr,0); /*** Added in Ver 7.2 ***/
  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Ibuf, 0 , 0 );
}

int fn_check_inp_fut( char *c_ServiceName,
                  		struct vw_xchngbook *ptr_st_xchngbook, 
                  		struct vw_cntrct_qt *ptr_st_cntrct_qt, 
                      char c_fum_mrkt_typ,                 /* Ver 2.2 */
                      char c_fcm_mrkt_typ,                 /* Ver 2.2 */
                      int i_rollover_ord_ind,               /* Ver 7.2 */
                      char *c_sprd_expiry_date1,        /** ver 7.2 ***/
                      char *c_sprd_expiry_date2,        /** ver 7.2 ***/
                  		struct vw_err_msg *ptr_st_err_msg )
{
	int i_dategreater=0;
  int i_returncode;
	char c_exg_crrnt_stts;
  char c_exg_extnd_stts;      /* Ver 2.2  */
	char c_exg_ovrnght_stts ;   /* Ver 3.3 */
  varchar c_near_expry_dt [ LEN_DATE ];
	double d_min_ordr_val=0.0;
	double d_dsclsd_prcntg=0.0;
	char c_err_msg[256];
	long long	ll_ordr_val;
	long long ll_min_ordr_val;

	EXEC SQL
     SELECT exg_crrnt_stts,
            exg_extnd_mrkt_stts,      /* Ver 2.2  */
						exg_tmp_mkt_stts,         /* Ver 3.3  */
						exg_dsclsd_prcntg
     INTO   :c_exg_crrnt_stts,
            :c_exg_extnd_stts,        /* Ver 2.2  */
						:c_exg_ovrnght_stts,      /* Ver 3.3  */
						:d_dsclsd_prcntg
     FROM   exg_xchng_mstr
     where  exg_xchng_cd = :ptr_st_xchngbook->c_xchng_cd;

	if ( SQLCODE != 0 )
	{
 		fn_errlog( c_ServiceName, "S31565",SQLMSG,ptr_st_err_msg->c_err_msg);
		return FAILURE;
	}

  /** Orders cannnot be modified when the Exchange is under Expiry **/
	/*** if ( c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY ) COmmented In Ver 3.3 ***/
	if ( c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY  &&  ( c_exg_ovrnght_stts !=  EXCHANGE_OPEN ) ) /*** Ver 3.3 ***/
	{
 		/** commented in Ver 2.2
    fn_errlog( c_ServiceName, "B28518",DEFMSG,ptr_st_err_msg->c_err_msg);
		return FAILURE;
    comment ends **/

    /** Ver 2.2 Starts **/
    if( c_exg_extnd_stts == EXCHANGE_UNDER_EXPIRY )
    {
      fn_errlog( c_ServiceName, "B28518",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
    else if (c_fum_mrkt_typ == NORMAL_MRKT && ptr_st_xchngbook->c_slm_flg == MARKET &&
             ptr_st_xchngbook->c_ord_typ == IMMEDIATE_OR_CANCEL )      /**  Underlying Level Check  **/
    {
      fn_userlog( c_ServiceName,"This Underlying Is Disabled For Extended Market Hours");
      fn_errlog( c_ServiceName, "B66066",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
    else if ( c_fcm_mrkt_typ == NORMAL_MRKT && ptr_st_xchngbook->c_slm_flg == MARKET && 
              ptr_st_xchngbook->c_ord_typ == IMMEDIATE_OR_CANCEL )     /**  Contract Level Check  **/
    {
      fn_userlog( c_ServiceName,"This Contract Is Disabled For Extended Market Hours");
      fn_errlog( c_ServiceName, "B66066",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
    /** Ver 2.2 Ends **/ 

	} 

	if ( ( ptr_st_xchngbook->c_slm_flg == LIMIT ) || ( ptr_st_xchngbook->c_slm_flg == STOP_LOSS ) )
	{
    /** Limit rate cannot be less than or equal to Zero for Limit orders **/

		if ( (ptr_st_xchngbook->l_ord_lmt_rt <= 0 ) && (ptr_st_xchngbook->c_spl_flg != ROLLOVER_WITH_SPREAD ))/*** ROLLOVER_WITH_SPREAD condition added in ver 7.2 ***/
		{
 			fn_errlog( c_ServiceName, "B28519",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE;
		}

    /***  1.8 Added SL trigger price cannot be Zero for Stop Loss Order.  ***/

    if ( ( ptr_st_xchngbook->c_slm_flg == STOP_LOSS ) && ( ptr_st_xchngbook->l_stp_lss_tgr == 0 ) 
			 )
    {
      fn_errlog( c_ServiceName,"S31570","Stop Loss trigger price cannot be Zero for Stop Loss Order.",ptr_st_err_msg->c_err_msg  );
      return FAILURE; 
    } 

    fn_userlog( c_ServiceName,"*****TESTING*****i_rollover_ord_ind is :%d:",i_rollover_ord_ind);
    if ( i_rollover_ord_ind != 1 ) /*** Added in Ver 7.2 ***/
    {
				/*** ver 7.2 starts ***/
				if( ptr_st_xchngbook->c_spl_flg == ROLLOVER_WITH_SPREAD )
				{
					  i_returncode = fn_vrfy_prc_band_mkt_rws_loc( c_ServiceName,
																												ptr_st_cntrct_qt->c_xchng_cd,
																												ptr_st_cntrct_qt->c_prd_typ,
																												ptr_st_cntrct_qt->c_undrlyng,
																												ptr_st_xchngbook->l_ord_lmt_rt,
																												c_sprd_expiry_date1,
																												c_sprd_expiry_date2,
																												ptr_st_err_msg
					                                             );
						if ( i_returncode == -1 )
						{
						        fn_errlog( c_ServiceName, "B28006",DEFMSG,ptr_st_err_msg->c_err_msg);
						        return FAILURE;
						}
						else if(i_returncode == -2) 
						{
									  fn_errlog( c_ServiceName, "B28006",DEFMSG,ptr_st_err_msg->c_err_msg);
										return -2;
						}
        } /*** ver 7.2 ends ***/
        else /*** else added in ver 7.2 ***/
        {
		    /******************** Ver 3.9 Started ************************/
					  if ( c_exg_crrnt_stts == EXCHANGE_OPEN )
					  {
					    rtrim(ptr_st_cntrct_qt->c_expry_dt);
					    if(DEBUG_MSG_LVL_3) {
					     fn_userlog(c_ServiceName,"ptr_st_cntrct_qt->c_expry_dt:%s:",ptr_st_cntrct_qt->c_expry_dt);
					    }
					    /*** i_returncode = fn_vrfy_prc_band_mkt( c_ServiceName,
					                                        ptr_st_cntrct_qt->c_xchng_cd,
					                                        ptr_st_cntrct_qt->c_prd_typ,
					                                        ptr_st_cntrct_qt->c_undrlyng,
					                                        ptr_st_xchngbook->l_ord_lmt_rt,
					                                        ptr_st_cntrct_qt->c_expry_dt,
					                                        ptr_st_err_msg
					                                        ); Commented in Ver 6.4 and added local function as need to convert trail order into normal in this check. ***/

						i_returncode = fn_vrfy_prc_band_mkt_loc( c_ServiceName,
                                            ptr_st_cntrct_qt->c_xchng_cd,
                                            ptr_st_cntrct_qt->c_prd_typ,
                                            ptr_st_cntrct_qt->c_undrlyng,
                                            ptr_st_xchngbook->l_ord_lmt_rt,
                                            ptr_st_cntrct_qt->c_expry_dt,
                                            ptr_st_err_msg
                                            );    /*** Added in Ver 6.4 ***/

        if ( i_returncode == -1 )
        {
                fn_errlog( c_ServiceName, "B28006",DEFMSG,ptr_st_err_msg->c_err_msg);
                return FAILURE;
        }
				else if(i_returncode == -2)  /*** Added in ver 6.4 ***/
				{
				  fn_errlog( c_ServiceName, "B28006",DEFMSG,ptr_st_err_msg->c_err_msg);
          return -2;
				}
    }
		/******************** Ver 3.9 ends    ************************/
		else
		{
      /** Function to check the limit rate is with in price band **/
      /** percentage specified by the exchange                   **/
      i_returncode = fn_vrfy_prc_band( c_ServiceName,
                                     ptr_st_cntrct_qt->c_xchng_cd,
                                     ptr_st_cntrct_qt->c_prd_typ,
                                     ptr_st_cntrct_qt->c_undrlyng,
                                     ptr_st_xchngbook->l_ord_lmt_rt,
                                     ptr_st_cntrct_qt->l_base_prc,
                                     ptr_st_err_msg);
      if ( i_returncode == -1 )
      {
        fn_errlog( c_ServiceName, "B28006",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
		 }
        } /** else ends for ver 7.2 **/
     }     /*** Added in Ver 7.2 ***/
	 }
	 else if ( ptr_st_xchngbook->c_slm_flg == MARKET )
	 {
    /** Market orders can be placed only when the Exchange is open **/
		if ( c_exg_crrnt_stts != EXCHANGE_OPEN )
		{
 			/**  commented in Ver 2.2 
      fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE;
      comment ends   **/

     /** Ver 2.2 Starts **/
      if( c_exg_extnd_stts != EXCHANGE_OPEN )
      {
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
      else if (c_fum_mrkt_typ == NORMAL_MRKT )      /***  Underlying Level Check  ***/
      {
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
      else if ( c_fcm_mrkt_typ == NORMAL_MRKT )     /***  Contract Level Check  ***/
      {
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
      /** Ver 2.2 Ends **/ 
		} 

    /** Limit rate should be Zero for Market orders **/
		if ( ptr_st_xchngbook->l_ord_lmt_rt != 0 )
		{
 			fn_errlog( c_ServiceName, "B28521",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE;
		}

    if ( ptr_st_xchngbook->l_quote == 0 )
    {

      fn_errlog( c_ServiceName, "B28540",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
	}
  
  /*** 1.8 Added Cannot modify to Immediate or Cancel Order if Exchange is Not Open.***/ 
  if ( ( c_exg_crrnt_stts != EXCHANGE_OPEN ) &&  ( ptr_st_xchngbook->c_ord_typ == IMMEDIATE_OR_CANCEL ) )
  {
    /* fn_errlog( c_ServiceName, "B28011",DEFMSG,ptr_st_err_msg->c_err_msg); 
    return FAILURE;                                 commented in Ver 2.2 */
  
    /** Ver 2.2 Starts **/
      if( c_exg_extnd_stts != EXCHANGE_OPEN )
      {
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }

      else if (c_fum_mrkt_typ == NORMAL_MRKT )      /***  Underlying Level Check  ***/
      {
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
      else if ( c_fcm_mrkt_typ == NORMAL_MRKT )     /***  Contract Level Check  ***/
      {
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
    /** Ver 2.2 Ends **/
  }

  /*** 1.8 Added SLTP prc must not be present for Market or Limit Orders. ***/
  if((ptr_st_xchngbook->c_slm_flg == MARKET  || ptr_st_xchngbook->c_slm_flg == LIMIT) && ptr_st_xchngbook->l_stp_lss_tgr !=0)
  {
    fn_errlog( c_ServiceName,"S31575","Cannot enter Stop Loss trigger price for Market and Limit Ordres.",ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

  /** Disclosed Quantity cannot be greater than the order qty **/
	if ( ptr_st_xchngbook->l_dsclsd_qty > ptr_st_xchngbook->l_ord_tot_qty )
	{
 			fn_errlog( c_ServiceName, "B28522",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE;
	}

	if ( ptr_st_xchngbook->l_stp_lss_tgr != 0 )
	{	
		if ( ptr_st_xchngbook->c_ordr_flw == BUY )
		{
      /** Stop loss trigger price cannot be greater than limit rate **/
      /** for Buy order                                             **/
			if ( ptr_st_xchngbook->l_stp_lss_tgr > ptr_st_xchngbook->l_ord_lmt_rt )
			{
 				fn_errlog( c_ServiceName, "B28524",DEFMSG,ptr_st_err_msg->c_err_msg);
				return FAILURE;
			}

      /** Stop loss trigger price cannot be less than last traded   **/
      /** price for Buy order                                       **/
			if ( ptr_st_xchngbook->l_stp_lss_tgr < ptr_st_cntrct_qt->l_lst_trdd_prc )
			{
 				fn_errlog( c_ServiceName, "B22009",DEFMSG,ptr_st_err_msg->c_err_msg);
				return FAILURE;
			}
		}

		if ( ptr_st_xchngbook->c_ordr_flw == SELL )
		{
      /** Stop loss trigger price cannot be less  than limit rate   **/
      /** for Sell order                                            **/
			if ( ptr_st_xchngbook->l_stp_lss_tgr < ptr_st_xchngbook->l_ord_lmt_rt )
			{
 				fn_errlog( c_ServiceName, "B28525",DEFMSG,ptr_st_err_msg->c_err_msg);
				return FAILURE;
			}

      /** Stop loss trigger price cannot be greater than last traded **/
      /** price for Sell order                                       **/
			if ( ptr_st_xchngbook->l_stp_lss_tgr > ptr_st_cntrct_qt->l_lst_trdd_prc )
			{
 				fn_errlog( c_ServiceName, "B22010",DEFMSG,ptr_st_err_msg->c_err_msg);
				return FAILURE;
			}
		}
	}
  
  if( ptr_st_xchngbook->l_dsclsd_qty > 0 )
  {
  	/** Disclosed Quantity cannot be less than  Minimum disclosed      **/
  	/** percentage ratio of the order qty                              **/
	  if ( ptr_st_xchngbook->l_dsclsd_qty < 
              ( ( d_dsclsd_prcntg / 100 ) * ptr_st_xchngbook->l_ord_tot_qty ) )
	  {
 			fn_errlog( c_ServiceName, "B28526",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE;
	  }
  }
	/***************1.5 Starts****************************************
	if ( ptr_st_xchngbook->c_ord_typ == GOOD_TILL_DATE )
	{
		if ( strcmp( ptr_st_xchngbook->c_valid_dt, "*" ) == 0 )
		{
 			fn_errlog( c_ServiceName, "B28527",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE;
		}
		else
		{
      i_dategreater = 0;

      EXEC SQL
        SELECT  1
        INTO    :i_dategreater
        FROM    exg_xchng_mstr
        WHERE   exg_nxt_trd_dt < to_date( :ptr_st_xchngbook->c_valid_dt,
																		 'DD-Mon-YYYY' )
				AND			exg_xchng_cd = :ptr_st_xchngbook->c_xchng_cd;

			if (( SQLCODE != 0 )  && ( SQLCODE != NO_DATA_FOUND ))
			{
 				fn_errlog( c_ServiceName, "S31580", SQLMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}	

			if ( i_dategreater != 1 )
			{
 				fn_errlog( c_ServiceName, "B28528", DEFMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}

			i_dategreater = 0;

			EXEC SQL
				SELECT  1
				INTO    :i_dategreater
				FROM    DUAL
				WHERE   to_date( :ptr_st_cntrct_qt->c_expry_dt, 'DD-Mon-YYYY' )
								< to_date( :ptr_st_xchngbook->c_valid_dt, 'DD-Mon-YYYY' );

			if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
			{
  			fn_errlog( c_ServiceName, "S31585", SQLMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}

			if ( i_dategreater == 1 )
			{
				fn_errlog( c_ServiceName, "B28539", DEFMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}

      EXEC SQL
        SELECT  to_char ( min (FCM_EXPRY_DT),'dd-Mon-yyyy')
        INTO    :c_near_expry_dt
        FROM    fcm_fo_cntrct_mstr
        WHERE   fcm_xchng_cd    = :ptr_st_cntrct_qt->c_xchng_cd
        AND     fcm_prdct_typ   = :ptr_st_cntrct_qt->c_prd_typ
        AND     fcm_undrlyng    = :ptr_st_cntrct_qt->c_undrlyng
        AND     fcm_cntrct_tag  =
                (   SELECT  A.fcm_cntrct_tag
                    FROM    fcm_fo_cntrct_mstr A
                    WHERE   A.fcm_xchng_cd    = :ptr_st_cntrct_qt->c_xchng_cd
                    AND     A.fcm_prdct_typ   = :ptr_st_cntrct_qt->c_prd_typ
                    AND     A.fcm_undrlyng    = :ptr_st_cntrct_qt->c_undrlyng
                    AND     A.fcm_expry_dt    =
                                        to_date( :ptr_st_cntrct_qt->c_expry_dt,
                                        'dd-mon-yyyy' )
                    AND     A.fcm_exer_typ    = :ptr_st_cntrct_qt->c_exrc_typ );

      if ( SQLCODE != 0 )
			{
  			fn_errlog( c_ServiceName, "S31590", SQLMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}
      SETNULL ( c_near_expry_dt );

			i_dategreater = -1;

      EXEC SQL
        SELECT  to_date(:c_near_expry_dt, 'DD-Mon-YYYY' ) -
                to_date( :ptr_st_xchngbook->c_valid_dt, 'DD-Mon-YYYY' ) -
                exg_gtd_valid_days
        INTO    :i_dategreater
        FROM    exg_xchng_mstr
        WHERE   exg_xchng_cd = :ptr_st_xchngbook->c_xchng_cd
        AND     exg_nxt_trd_dt < to_date( :ptr_st_cntrct_qt->c_expry_dt,
                               'DD-Mon-YYYY' ) - exg_gtd_valid_days ;

			if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
			{
  			fn_errlog( c_ServiceName, "S31595", SQLMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}

		
     	if ( i_dategreater < 0 )
			{
				fn_errlog( c_ServiceName, "B28547", DEFMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}

		}
	}
  ***************1.5 Ends****************************************/

	return SUCCESS;
}


int fn_check_ord_fut( char *c_ServiceName,
                  		struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf, 
                  		struct vw_xchngbook *ptr_st_xchngbook, 
                  		struct vw_orderbook *ptr_o_st_ordbook ,
                  		struct vw_err_msg *ptr_st_err_msg )
{

	char c_mkt_allwd_flg;
	char c_err_msg[256];
	char c_gtd_msg[256];	/* 1.4 */
	char c_orig_ord_dt[9];	/* 1.4 */
	int  i_gtd_dt_greater = 0; /* 1.4 */
	char c_exg_ovrnght_stts ;   /* Ver 3.3 */
	char c_exg_crrnt_stts;      /* Ver 3.3 */
	char c_exg_ovrnght_trd_dt[23];    /***  Ver 3.3  ***/

  /** Order quantity should be in Multiples of Contract Lot size.   **/
	if ( ptr_st_xchngbook->l_ord_tot_qty % ptr_st_cntrct_gen_inf->l_min_lot_qty
                                                                != 0 )
	{
 		fn_errlog( c_ServiceName, "B28529", DEFMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

  /** Disclosed quantity should be in Multiples of Contract Lot size **/
	if ( ptr_st_xchngbook->l_dsclsd_qty % ptr_st_cntrct_gen_inf->l_min_lot_qty
                                                                != 0 )
	{
 		fn_errlog( c_ServiceName, "B28530", DEFMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

  /** Limit rate should be in Multiples of Contract Tick size        **/
	if ( ptr_st_xchngbook->l_ord_lmt_rt % ptr_st_cntrct_gen_inf->l_tick_sz != 0 )
	{
 		fn_errlog( c_ServiceName, "B28531", DEFMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

  /** Stop loss Trigger Price should be in Multiples of Contract Tick size **/
	if ( ptr_st_xchngbook->l_stp_lss_tgr % ptr_st_cntrct_gen_inf->l_tick_sz != 0 )
	{
 		fn_errlog( c_ServiceName, "B28532", DEFMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

  if ( ptr_st_xchngbook->c_ord_typ == IMMEDIATE_OR_CANCEL  )
  {
    if ( ptr_st_xchngbook->l_stp_lss_tgr != 0 )
    {
      fn_errlog( c_ServiceName, "B28012", DEFMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }
  }


	/*** Ver 3.3 Starts ***/
	EXEC SQL
    SELECT exg_crrnt_stts,
           exg_tmp_mkt_stts,
					 to_char ( exg_tmp_trd_dt , 'dd-Mon-yyyy' )
    INTO   :c_exg_crrnt_stts,
           :c_exg_ovrnght_stts,
					 :c_exg_ovrnght_trd_dt 
    FROM   exg_xchng_mstr
    where  exg_xchng_cd = :ptr_st_xchngbook->c_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31600",SQLMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }
	

	if( c_exg_ovrnght_stts == EXCHANGE_OPEN && c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY)
	{
  	if ( strcmp(c_exg_ovrnght_trd_dt,ptr_o_st_ordbook->c_trd_dt)!=0)
  	{
    	 	fn_userlog( c_ServiceName," Cannot Cancel a order placed in Normal Market hour when market is under expiry ");
     		fn_errlog( c_ServiceName, "B28518",DEFMSG,ptr_st_err_msg->c_err_msg);
     		return FAILURE;
  	}

	}
	/*** Ver 3.3 Ends ***/

	if ( ptr_st_xchngbook->c_slm_flg == MARKET )
	{
		EXEC SQL
			SELECT	opm_mkt_allwd
			INTO		:c_mkt_allwd_flg
			FROM		opm_ord_pipe_mstr
			WHERE		opm_pipe_id	=	:ptr_st_xchngbook->c_pipe_id;

		if ( SQLCODE != 0 )
		{
 			fn_errlog( c_ServiceName, "S31605", SQLMSG, ptr_st_err_msg->c_err_msg );
			return FAILURE;
		}

		if ( c_mkt_allwd_flg == NO )
		{
      if(ptr_st_xchngbook->c_spl_flg != SYSTEM_SQUAREOFF ||
         ptr_st_xchngbook->c_spl_flg != IMTM_SYS_SQUAREOFF ||
         ptr_st_xchngbook->c_spl_flg != LMTNEG_SYS_SQUAREOFF ) /*  1.2 */ /*** Check added for IMTM_SYS_SQUAREOFF and LMTNEG_SYS_SQUAREOFF in Ver 5.0 ***/
      {
      	fn_errlog( c_ServiceName, "B28001", DEFMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
		}
	}

	/** Modification of order is possible only in REQUESTED, ORDERED **/
  /** and PARTIALLY_EXECUTED states                                **/
	if ( ( ptr_o_st_ordbook->c_ordr_stts != REQUESTED ) && 
	     ( ptr_o_st_ordbook->c_ordr_stts != ORDERED ) && 
	     ( ptr_o_st_ordbook->c_ordr_stts != PARTIALLY_EXECUTED ) ) 
	{
 		fn_errlog( c_ServiceName, "B28533", DEFMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}


	/** check if any modifiable parameter has been modified        **/
	if ( (ptr_st_xchngbook->c_slm_flg == ptr_o_st_ordbook->c_slm_flg)
		&& (ptr_st_xchngbook->l_ord_lmt_rt == ptr_o_st_ordbook->l_ord_lmt_rt)
		&& (ptr_st_xchngbook->l_ord_tot_qty == ptr_o_st_ordbook->l_ord_tot_qty)
		&& (ptr_st_xchngbook->l_dsclsd_qty == ptr_o_st_ordbook->l_dsclsd_qty)
		&& (ptr_st_xchngbook->l_stp_lss_tgr == ptr_o_st_ordbook->l_stp_lss_tgr)
		&& (ptr_st_xchngbook->c_ord_typ == ptr_o_st_ordbook->c_ord_typ)
		&& (strcmp(ptr_st_xchngbook->c_valid_dt,ptr_o_st_ordbook->c_valid_dt)==0) )
	{
 		fn_errlog( c_ServiceName, "B28534", DEFMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

	/** The Modified qty cannot be less than or equal to the Executed qty **/
	if( ptr_st_xchngbook->l_ord_tot_qty <= ptr_o_st_ordbook->l_exctd_qty)
	{
 		fn_errlog( c_ServiceName, "B28535", DEFMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

	/*** The order valid date cannot be modified for the GTD orders ***/
	rtrim(ptr_o_st_ordbook->c_valid_dt);
	if ( ( ptr_st_xchngbook->c_ord_typ == 'D' ) &&
			 ( ptr_o_st_ordbook->c_ord_typ == 'D' ) &&
			 ( strcmp(ptr_st_xchngbook->c_valid_dt , 
				 ptr_o_st_ordbook->c_valid_dt) != 0 ) )
	{
 		fn_errlog( c_ServiceName, "B28571", DEFMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}
	/* 1.4 */

	memset(c_orig_ord_dt,'\0',sizeof(c_orig_ord_dt));
	strncpy(c_orig_ord_dt, ptr_o_st_ordbook->c_ordr_rfrnc, 8);
	if(DEBUG_MSG_LVL_3) /** DEBUG_MSG_LVL_3 Added in Ver 6.2 **/
	{
		fn_userlog( c_ServiceName, "Original order date: %s:", c_orig_ord_dt);
		fn_userlog( c_ServiceName, "Valid date of exchgbk: %s" , ptr_st_xchngbook->c_valid_dt);
	}
	if( ptr_st_xchngbook->c_ord_typ != 'V' )  /** Ver 4.8 , if condition added **/
  {
	 EXEC SQL
		SELECT	1 
			INTO	:i_gtd_dt_greater
			FROM 	dual
 			WHERE (to_date(:c_orig_ord_dt, 'YYYYMMDD')+ 6) 
						< to_date( :ptr_st_xchngbook->c_valid_dt, 'DD-Mon-YYYY');	
	
		if(i_gtd_dt_greater == 1 )
		{
			strcpy(c_gtd_msg, "Please enter a valid date for GTD orders");
			fn_errlog( c_ServiceName,"S31610",c_gtd_msg, ptr_st_err_msg->c_err_msg  );
			strcpy(ptr_st_err_msg->c_err_msg, "Please enter a valid date for GTD orders");
			return FAILURE;
		}
  }
	/* Ver 2.4 Additional check */

  if( DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName,"Exchange code is :%s:", ptr_st_xchngbook->c_xchng_cd );
    fn_userlog( c_ServiceName,"Product type is :%c:", ptr_o_st_ordbook->c_prd_typ );
    fn_userlog( c_ServiceName,"Underlying is :%s:", ptr_o_st_ordbook->c_undrlyng );
  }
  EXEC SQL
       SELECT fum_freeze_qty
       INTO   :sql_fum_freeze_qty
       FROM   fum_fo_undrlyng_mstr
       WHERE  fum_xchng_cd = :ptr_st_xchngbook->c_xchng_cd
    /***   AND    fum_prdct_typ = decode(:ptr_o_st_ordbook->c_prd_typ,'P','F',:ptr_o_st_ordbook->c_prd_typ)  Commented in Ver 3.5 ***/
       AND    fum_prdct_typ = decode(:ptr_o_st_ordbook->c_prd_typ,'P','F','U','F',:ptr_o_st_ordbook->c_prd_typ) /*** Ver 3.5 ***/
			 AND    fum_undrlyng = :ptr_o_st_ordbook->c_undrlyng;

  if ( SQLCODE != 0 )
  {
     fn_errlog( c_ServiceName, "S31615", SQLMSG, ptr_st_err_msg->c_err_msg );
     return FAILURE;
  }

  if( ptr_st_xchngbook->l_ord_tot_qty > sql_fum_freeze_qty && sql_fum_freeze_qty != 0 )
  {
    fn_errlog( c_ServiceName, "B66071", DEFMSG, ptr_st_err_msg->c_err_msg );
    /* sprintf(ptr_st_err_msg->c_err_msg,"%s:%ld",ptr_st_err_msg->c_err_msg,(sql_fum_freeze_qty-ptr_st_cntrct_gen_inf->l_min_lot_qty)); */
    sprintf(ptr_st_err_msg->c_err_msg,"%s:%ld",ptr_st_err_msg->c_err_msg,sql_fum_freeze_qty);
    /** return FAILURE; Commented in Ver 6.4 **/
		return -2;
  }

  /* Ver 2.4 Ends */

	return SUCCESS;
 
}


/******Ver 3.5*****Function for 5 paisa check**************/
int fn_5paisa(long l_temp)
{
  if((l_temp%5) != 0)
	{
    return -1;
	}
  return 0;
}
/*****/


/** Ver 6.4 starts here **/

int fn_stts_trail_ord(char *c_order_ref)
{
  char c_err_msg[256] = {'\0'};
	char c_ServiceName[33] = {'\0'};
	int  i_trnsctn = 0;

	strcpy(c_ServiceName,"SFO_PLCMOD_FUT");
	rtrim(c_ServiceName);

	fn_userlog(c_ServiceName,"fn_stts_trail_ord- c_order_ref :%s:",c_order_ref);	

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
	if(i_trnsctn == -1) 
  {
    fn_errlog( c_ServiceName, "S31620", LIBMSG, c_err_msg  );
    return -1;
  }

  EXEC SQL
    UPDATE FTO_FO_TRAIL_ORD
    SET    FTO_STATUS_FLG ='N',
					 FTO_CEP_RMV_FLG = 'A'
    WHERE  FTO_ORDR_RFRNC = :c_order_ref;

  if ( SQLCODE != 0 )
  {
     fn_errlog( c_ServiceName, "S31625", SQLMSG, c_err_msg );
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     return -1;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "S31630", LIBMSG, c_err_msg  );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }

  return 0;
}

int fn_upd_trail_ord(char *c_order_ref)
{
  char c_err_msg[256] = {'\0'};
  char c_ServiceName[33] = {'\0'};
  int  i_trnsctn = 0;

  strcpy(c_ServiceName,"SFO_PLCMOD_FUT");
  rtrim(c_ServiceName);

  fn_userlog(c_ServiceName,"fn_upd_trail_ord- c_order_ref :%s:",c_order_ref);

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if(i_trnsctn == -1)
  {
    fn_errlog( c_ServiceName, "S31635", LIBMSG, c_err_msg  );
    return -1;
  }

    EXEC SQL
    UPDATE FOD_FO_ORDR_DTLS
    SET    FOD_PRCIMPV_FLG='N'
    WHERE  FOD_ORDR_RFRNC= :c_order_ref ;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31640", SQLMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "S31645", LIBMSG, c_err_msg  );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return -1;
  }

  return 0;
}

int fn_vrfy_prc_band_mkt_loc ( char c_ServiceName [ 33 ],
                       char c_xchng_cd [ 4 ],
                       char c_prd_typ,
                       char c_undrlyng [ 7 ],
                       long l_ord_limit_rt,
                       char c_expry_dt[ LEN_DATE ],
                       struct vw_err_msg *ptr_st_err_msg )
{
  long l_upbnd_rt = 0;
  long l_lwbnd_rt = 0;

  EXEC SQL BEGIN DECLARE SECTION;
    char    sql_c_xchng_cd[4] ;
    char    sql_c_prd_typ ;
    char    sql_c_undrlyng[7] ;
    char    sql_c_expry_dt[LEN_DATE];
  EXEC SQL END DECLARE SECTION;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "c_xchng_cd:%s:", c_xchng_cd );
    fn_userlog( c_ServiceName, "c_prd_typ:%c:",c_prd_typ);
    fn_userlog( c_ServiceName, "c_undrlyng:%s:", c_undrlyng );
    fn_userlog( c_ServiceName, "l_ord_limit_rt:%ld:", l_ord_limit_rt );
    fn_userlog( c_ServiceName, "c_expry_dt:%s:", c_expry_dt);
  }


  strcpy ( sql_c_xchng_cd, c_xchng_cd );
  sql_c_prd_typ = c_prd_typ;
  strcpy ( sql_c_undrlyng, c_undrlyng );
  strcpy ( sql_c_expry_dt,c_expry_dt);

  EXEC SQL
       select FTQ_HGH_PRC_RNG,
              FTQ_LOW_PRC_RNG
       INTO   :l_upbnd_rt,
              :l_lwbnd_rt
       from   FTQ_FO_TRD_QT
       where  FTQ_XCHNG_CD =  :sql_c_xchng_cd
       and    FTQ_PRDCT_TYP = :sql_c_prd_typ
       and    FTQ_UNDRLYNG =  :sql_c_undrlyng
       and    FTQ_EXPRY_DT =  to_date(:sql_c_expry_dt,'dd-Mon-yyyy' );

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31005", SQLMSG, c_err_msg );
    return ( -1 );
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "l_upbnd_rt :%ld:", l_upbnd_rt);
    fn_userlog( c_ServiceName, "l_lwbnd_rt :%ld:", l_lwbnd_rt);
    fn_userlog( c_ServiceName, "l_ord_limit_rt :%ld:", l_ord_limit_rt);
  }

  if ( ( l_ord_limit_rt > l_upbnd_rt ) ||
       ( l_ord_limit_rt < l_lwbnd_rt )  )
  {
    fn_errlog( c_ServiceName, "B28006", " ",ptr_st_err_msg->c_err_msg );
    return ( -2 ) ;
  }
}
/** Ver 6.4 Ends here **/

/*** Ver 7.6 Starts ***/
int fn_get_quote_zero ( char *c_ServiceName, char c_ord_flw, long l_best_bid_price, long l_best_offer_price, long l_previous_close_price, long *l_quote_zero)
{
	if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"Inside function fn_get_quote_zero");
    fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_best_bid_price is :%ld:",l_best_bid_price);
    fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_best_offer_price is :%ld:",l_best_offer_price);
    fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_previous_close_price is :%ld:",l_previous_close_price);
  }
  if(c_ord_flw == 'B')
  {
    if(l_best_offer_price == 0)
    {
      *l_quote_zero = l_previous_close_price;
    }
    else
    {
      *l_quote_zero = l_best_offer_price;
    }
  }
  else if (c_ord_flw == 'S')
  {
    if(l_best_bid_price == 0)
    {
      *l_quote_zero = l_previous_close_price;
    }
    else
    {
      *l_quote_zero = l_best_bid_price;
    }
  }
  else
  {
    return -1;
  }
	if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_quote_zero is :%ld:",*l_quote_zero);
  }
  return 1;
}
/*** Ver 7.6 Ends ***/



/*** ver 7.2 starts ***/
int fn_vrfy_prc_band_mkt_rws_loc ( char c_ServiceName [ 33 ],
                       char c_xchng_cd [ 4 ],
                       char c_prd_typ,
                       char c_undrlyng [ 7 ],
                       long l_ord_limit_rt,
                       char *c_sprd_expiry_date1,
											 char *c_sprd_expiry_date2,
                       struct vw_err_msg *ptr_st_err_msg )
{
  long l_upbnd_rt = 0;
  long l_lwbnd_rt = 0;

  EXEC SQL BEGIN DECLARE SECTION;
    char    sql_c_xchng_cd[4] ;
    char    sql_c_prd_typ ;
    char    sql_c_undrlyng[7] ;
  EXEC SQL END DECLARE SECTION;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "c_xchng_cd:%s:", c_xchng_cd );
    fn_userlog( c_ServiceName, "c_prd_typ:%c:",c_prd_typ);
    fn_userlog( c_ServiceName, "c_undrlyng:%s:", c_undrlyng );
    fn_userlog( c_ServiceName, "l_ord_limit_rt:%ld:", l_ord_limit_rt );
    fn_userlog( c_ServiceName, "c_sprd_expiry_date1:%s:", c_sprd_expiry_date1);
    fn_userlog( c_ServiceName, "c_sprd_expiry_date2:%s:", c_sprd_expiry_date2);
  }


  strcpy ( sql_c_xchng_cd, c_xchng_cd );
  sql_c_prd_typ = c_prd_typ;
  strcpy ( sql_c_undrlyng, c_undrlyng );

  EXEC SQL
       select NVL(FTQ_HGH_PRC_RNG,0),
              NVL(FTQ_LOW_PRC_RNG,0)
       INTO   :l_upbnd_rt,
              :l_lwbnd_rt
       from   FTQ_FO_TRD_QT
       where  FTQ_XCHNG_CD =  :sql_c_xchng_cd
       and    FTQ_PRDCT_TYP = decode(:sql_c_prd_typ,'F','S',:sql_c_prd_typ)
       and    FTQ_UNDRLYNG =  :sql_c_undrlyng
       and    FTQ_EXPRY_DT =  to_date(:c_sprd_expiry_date1,'dd-Mon-yyyy' )
       and    FTQ_EXPRY_DT2=  to_date(:c_sprd_expiry_date2,'dd-Mon-yyyy' );

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31010", SQLMSG, c_err_msg );
    return ( -1 );
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "l_upbnd_rt :%ld:", l_upbnd_rt);
    fn_userlog( c_ServiceName, "l_lwbnd_rt :%ld:", l_lwbnd_rt);
    fn_userlog( c_ServiceName, "l_ord_limit_rt :%ld:", l_ord_limit_rt);
  }

  if ( ( l_ord_limit_rt > l_upbnd_rt ) ||
       ( l_ord_limit_rt < l_lwbnd_rt )  )
  {
    fn_errlog( c_ServiceName, "B28006", " ",ptr_st_err_msg->c_err_msg );
    return ( -2 ) ;
  }
}
/*** ver 7.2 ends ***/
