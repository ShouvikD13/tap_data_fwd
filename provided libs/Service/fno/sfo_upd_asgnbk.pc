/******************************************************************************/
/*	Program	    			:	SFO_UPD_ASGNBK                                        */
/*                                                                            */
/*  Input             : vw_asgnmt                                             */
/*                                                                            */
/*  Output            : vw_asgnmt                                             */
/*											vw_err_msg                                            */
/*                                                                            */
/*  Description       : This service will insert assignment details into      */
/*                      assignment book                                       */
/*                                                                            */
/*  Log               : 1.0    12-Oct-2001    S. Swaminathan                  */
/*										:	1.1		 19-Dec-2007		S.K.S.	-	AIX Migration					*/
/*										:	1.2		 23-Sep-2010		VM 	- Lot size changes    			*/
/*										:	1.4		 03-Aug-2015		Ritesh D. Contract Master and   */
/*                                            Trade Quote Table Merger Changes*/
/******************************************************************************/
/* 1.0	-	New Release                                                         */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>             /*  Ver 1.1 : Added 	*/
#include <fn_read_debug_lvl.h>  /*  Ver 1.1 : Added   */

void SFO_UPD_ASGNBK( TPSVCINFO *rqst )
{
	char  c_ServiceName[33];
  char  c_errmsg[256];
  int   i_trnsctn;  

  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_asgnmt *ptr_st_asgnmt;
    long  l_lot_size=0;		/* Ver 1.2 */
  EXEC SQL END DECLARE SECTION;

  struct vw_err_msg *ptr_st_err_msg;

  ptr_st_asgnmt = ( struct vw_asgnmt * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.1 : Added   */

  ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
  if ( ptr_st_err_msg ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31005", TPMSG, c_errmsg );
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }

  memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_asgnmt->c_rout_crt );

	i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );

  if ( i_trnsctn == -1 )
  {
  	strcpy ( ptr_st_err_msg->c_err_msg, c_errmsg );
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.1 : Debug level Change  */
  fn_userlog( c_ServiceName, "i_trnsctn:%d:", i_trnsctn );
	fn_userlog( c_ServiceName, ":%s:",ptr_st_asgnmt->c_xchng_cd);
  fn_userlog( c_ServiceName, ":%s:",ptr_st_asgnmt->c_cln_mtch_accnt);
  fn_userlog( c_ServiceName, ":%c:",ptr_st_asgnmt->c_prd_typ);
fn_userlog( c_ServiceName, ":%c:",ptr_st_asgnmt->c_ctgry_indstk);
fn_userlog( c_ServiceName, ":%s:",ptr_st_asgnmt->c_undrlyng);
fn_userlog( c_ServiceName, ":%s:",ptr_st_asgnmt->c_expry_dt);
fn_userlog( c_ServiceName, ":%c:",ptr_st_asgnmt->c_exrc_typ);
fn_userlog( c_ServiceName, ":%c:",ptr_st_asgnmt->c_opt_typ);
fn_userlog( c_ServiceName, ":%ld:",ptr_st_asgnmt->l_strike_prc);
fn_userlog( c_ServiceName, ":%s:",ptr_st_asgnmt->c_asgn_rfrnc);
fn_userlog( c_ServiceName, ":%s:",ptr_st_asgnmt->c_asgn_dt);
fn_userlog( c_ServiceName, ":%ld:",ptr_st_asgnmt->l_asgnd_qty);
fn_userlog( c_ServiceName, ":%ld:",ptr_st_asgnmt->l_opnpstn_qty);
fn_userlog( c_ServiceName, ":%ld:",ptr_st_asgnmt->l_sttlmnt_prc);
fn_userlog( c_ServiceName, ":%ld:",ptr_st_asgnmt->l_cur_mkt_prc);
}

/******************************************************************************/
/* Ver 1.2 start */

	/*** Commented in Ver 1.4 ***

	EXEC SQL
		SELECT 		FCM_LOT_SZ
		INTO  		:l_lot_size
		FROM			FCM_FO_CNTRCT_MSTR
		WHERE	FCM_XCHNG_CD			= :ptr_st_asgnmt->c_xchng_cd                        
		AND 	FCM_PRDCT_TYP     =	:ptr_st_asgnmt->c_prd_typ                        
		AND 	FCM_INDSTK        =	:ptr_st_asgnmt->c_ctgry_indstk                    
		AND 	FCM_UNDRLYNG      =	:ptr_st_asgnmt->c_undrlyng                        
		AND 	FCM_EXPRY_DT      =	to_date (:ptr_st_asgnmt->c_expry_dt,'DD-Mon-YYYY')
		AND 	FCM_EXER_TYP      =	:ptr_st_asgnmt->c_exrc_typ                        
		AND 	FCM_OPT_TYP       =	:ptr_st_asgnmt->c_opt_typ                         
		AND 	FCM_STRK_PRC      =	:ptr_st_asgnmt->l_strike_prc;                      

	*** Ver 1.4 Comment Ends ***/

  /*** Ver 1.4 Started ***/

  EXEC SQL
    SELECT    FTQ_MIN_LOT_QTY
    INTO      :l_lot_size
    FROM      FTQ_FO_TRD_QT
    WHERE FTQ_XCHNG_CD      = :ptr_st_asgnmt->c_xchng_cd
    AND   FTQ_PRDCT_TYP     = :ptr_st_asgnmt->c_prd_typ
    AND   FTQ_INDSTK        = :ptr_st_asgnmt->c_ctgry_indstk
    AND   FTQ_UNDRLYNG      = :ptr_st_asgnmt->c_undrlyng
    AND   FTQ_EXPRY_DT      = to_date (:ptr_st_asgnmt->c_expry_dt,'DD-Mon-YYYY')
    AND   FTQ_EXER_TYP      = :ptr_st_asgnmt->c_exrc_typ
    AND   FTQ_OPT_TYP       = :ptr_st_asgnmt->c_opt_typ
    AND   FTQ_STRK_PRC      = :ptr_st_asgnmt->l_strike_prc;

  /*** Ver 1.4 Ends ***/

	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31010",
                                SQLMSG, ptr_st_err_msg->c_err_msg );
    tpfree ( ( char * ) ptr_st_asgnmt );
    fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog(c_ServiceName,"Trade Quote Lot Size Is :%ld:",l_lot_size);	
	}
	
/* Ver 1.2 end */
/******************************************************************************/
	
	EXEC SQL
			INSERT INTO	fab_fo_asgnmnt_book
			(
				fab_clm_mtch_accnt,
        fab_xchng_cd,
        fab_prdct_typ,
        fab_indstk,
        fab_undrlyng,
        fab_expry_dt,
        fab_exer_typ,
        fab_opt_typ,
        fab_strk_prc,
        fab_asgn_rfrnc_no,
        fab_asgnd_dt,
        fab_asgnd_qty,
        fab_opnpstn_qty,
        fab_sttlmnt_prc,
        fab_curr_mkt_prc,
        FAB_MIN_LOT_SIZE						 /** 1.2 **/
			)
			VALUES
			(
				:ptr_st_asgnmt->c_cln_mtch_accnt,
				:ptr_st_asgnmt->c_xchng_cd,
				:ptr_st_asgnmt->c_prd_typ,
				:ptr_st_asgnmt->c_ctgry_indstk,
				:ptr_st_asgnmt->c_undrlyng,
				to_date ( :ptr_st_asgnmt->c_expry_dt, 'DD-Mon-yyyy' ),
				:ptr_st_asgnmt->c_exrc_typ,
				:ptr_st_asgnmt->c_opt_typ,
				:ptr_st_asgnmt->l_strike_prc,
				:ptr_st_asgnmt->c_asgn_rfrnc,
				to_date ( :ptr_st_asgnmt->c_asgn_dt, 'DD-Mon-yyyy hh24:mi:ss' ),
				:ptr_st_asgnmt->l_asgnd_qty,
				:ptr_st_asgnmt->l_opnpstn_qty,
				:ptr_st_asgnmt->l_sttlmnt_prc,
				:ptr_st_asgnmt->l_cur_mkt_prc,
				:l_lot_size										/** 1.2 **/
			);

	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31015",
                                SQLMSG, ptr_st_err_msg->c_err_msg );
    tpfree ( ( char * ) ptr_st_asgnmt );
    fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )
  {
    strcpy ( ptr_st_err_msg->c_err_msg, c_errmsg );
    tpfree ( ( char * ) ptr_st_asgnmt );
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

  tpfree ( ( char * ) ptr_st_err_msg );
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_asgnmt, 0, 0 );
}

