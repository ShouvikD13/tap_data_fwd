/****************************************************************************************************************/
/* Service name :	SFO_UPD_RECRD																																									*/
/*                                                                                                	            */
/* Description  : This service is called by batch process BAT_SUP_INVEST to compute PNL and update the same for */
/*                the input match account.															                                        */
/*                                                                                                  	          */
/* Input       	:                                                                                     	        */
/*                                                                                                        	    */
/*                                                                                                          	  */
/* Output      	:                                                                                               */
/*                                                                                                          	  */
/* Log         	:   Ver 1.0 |  Ravindra Panda                                                               	  */
/****************************************************************************************************************/
/* Ver 1.0  		:  New Release	| 22-Apr-2022                                                                   */
/****************************************************************************************************************/

/** Header files **/
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_ddr.h>
#include <string.h>
#include <stdlib.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>
#include <sqlca.h>
#include <fn_pos.h>
#include <stdio.h>
#include <fn_tuxlib.h>
#include <math.h>
#include <eba_to_ors.h>
#include <fo_view_def.h>
#include <fn_session.h>
#include <stdarg.h>

int fn_pack_vartofml_local ( char *c_ServiceName,
                       char *c_err_msg,
                       FBFR32 **ptr_fml_obuf,
                       int i_tot_ofields,
                       ... );

void SFO_UPD_RECRD ( TPSVCINFO *rqst )
{
	char c_msg[256] = {'\0'};
  char c_ServiceName [ 33 ]= {'\0'};
  char c_err_msg [ 256 ]= {'\0'};

	char  c_xchng_cd[4] = {'\0'};
  char  c_cln_mtch_accnt [ 11 ] = {'\0'};
  char  c_mon_name[4] = {'\0'};
  char  c_strt_dt[LEN_DATE] = {'\0'};
  char  c_end_dt[LEN_DATE] = {'\0'};
  char  c_prdct_typ_opt = 'O';
  char  c_prdct_typ_fut = 'F';
  char  c_rout_crt[5] = "111";
  char  c_user_id[21] = "system";
  char  c_strt_dt_temp[LEN_DATE] = {'\0'};
  char  c_undrlyng[11] = "A";
  char  c_end_dt_temp[LEN_DATE] = {'\0'};
  char  c_mon_yr[10] = {'\0'};
  char 	c_scrpt_cmd[256] = {'\0'};
  char  c_req_flg = 'S';
	char  c_nxt_chlng_srt_dt[LEN_DATE]="\0";
	char  c_nxt_chlng_end_dt[LEN_DATE]="\0";
	char  c_chlng_end_dt[LEN_DATE]="\0";
	char  c_err_chck_opt[256] = {'\0'};
	char  c_err_chck_fut[256] = {'\0'};

	long  l_session_id = 0;
  long  l_recvbuf = 0;
	long  l_charges_opt = 0;
	long  l_charges_fut = 0;
	long  l_charges_opt_temp = 0;
	long  l_charges_fut_temp = 0;
	long l_tot_charges = 0;

  int  i_returncode = 0;
  int  i_fbc_day_count = 0;
  int  i_cnt = 0;
  int  i_trnsctn = 0;
  int  i_err[10] = {0};
  int  i_ferr[10] = {0};
  int  i_opt_count = 0;
  int  i_fut_count = 0;
  int  i_opt_counter = 0;
  int  i_fut_counter = 0;
  int  i_err_cnt_fut = 0;
  int  i_err_cnt_opt = 0;
	int	 i_mtch_exst = 0;

	double  d_rlzd_pl_opt = 0.0;
  double  d_unrlzd_pl_opt = 0.0;
  double  d_rlzd_pl_fut = 0.0;
  double  d_unrlzd_pl_fut = 0.0;
  double  d_tot_pl = 0.0;
  double  d_rlzd_pl_opt_temp = 0.0;
  double  d_unrlzd_pl_opt_temp = 0.0;
  double  d_rlzd_pl_fut_temp = 0.0;
  double  d_unrlzd_pl_fut_temp = 0.0;
	double  d_tot_charges = 0.0;

	FBFR32 *ptr_fml_Ibuf = (FBFR32 *)NULL;
	FBFR32 *ptr_fml_Obuf = (FBFR32 *)NULL;
	FBFR32 *ptr_fml_IObuf = NULL;
  FBFR32 *ptr_fml_IFbuf = NULL;
  FBFR32 *ptr_fml_SObuf = NULL;  /*** Buffer used for Options ***/
  FBFR32 *ptr_fml_SFbuf = NULL;   /*** Buffer used for Futures ***/

	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
  INITDBGLVL(c_ServiceName);

	/**************************** Fetching input data *************************************/

	i_err [0] = Fget32( ptr_fml_Ibuf ,FFO_EBA_MTCH_ACT_NO,0,(char *)c_cln_mtch_accnt,0);
  i_ferr[0] = Ferror32;
  i_err [1] = Fget32( ptr_fml_Ibuf ,FFO_UNDRLYNG,0,(char *)c_undrlyng,0);
  i_ferr[1] = Ferror32;
	i_err [2] = Fget32( ptr_fml_Ibuf ,FFO_SSSN_ID,0,(char *)&l_session_id,0);
  i_ferr[2] = Ferror32;
  i_err [3] = Fget32( ptr_fml_Ibuf ,FFO_ROUT_CRT,0,(char *)c_rout_crt,0);
  i_ferr[3] = Ferror32;
  i_err [4] = Fget32( ptr_fml_Ibuf ,FFO_USR_ID,0,(char *)c_user_id,0);
  i_ferr[4] = Ferror32;
	i_err [5] = Fget32( ptr_fml_Ibuf ,FFO_XCHNG_CD,0,(char *)c_xchng_cd,0);
  i_ferr[5] = Ferror32;
  i_err [6] = Fget32( ptr_fml_Ibuf ,FFO_FROM_DT,0,(char *)c_strt_dt,0);
  i_ferr[6] = Ferror32;
  i_err [7] = Fget32( ptr_fml_Ibuf ,FFO_TO_DT,0,(char *)c_end_dt,0);
  i_ferr[7] = Ferror32;
	i_err [8] = Fget32( ptr_fml_Ibuf ,FFO_RQST_TYP,0,(char *)&c_req_flg,0);
  i_ferr[8] = Ferror32;
	i_err [9] = Fget32( ptr_fml_Ibuf ,FFO_RCRD_DT,0,(char *)c_chlng_end_dt,0);
  i_ferr[9] = Ferror32;

	for ( i_cnt =0; i_cnt<10; i_cnt++ )
	{
  	if(i_err[i_cnt] == -1 )
    {
      fn_userlog( c_ServiceName, "Error while Fetching INPUT FML values at feild number :%d:",i_cnt+1);
			fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }	

	if( DEBUG_MSG_LVL_3 )
  {
		fn_userlog( c_ServiceName, "----- Working on record with following details ----");
		fn_userlog( c_ServiceName, "Match account :%s:",c_cln_mtch_accnt);
		fn_userlog( c_ServiceName, "Request type :%c:",c_req_flg);
		fn_userlog( c_ServiceName, "From date :%s:",c_strt_dt);
		fn_userlog( c_ServiceName, "To date :%s:",c_end_dt);
		fn_userlog( c_ServiceName, "Exchange code :%s:",c_xchng_cd);
		fn_userlog( c_ServiceName, "Challenge end date passed :%s:", c_chlng_end_dt);
		fn_userlog( c_ServiceName, "---------------------------------------------------");	
	}

	/*** fetching startdate for challenge from FBC table for later use ***/

	EXEC SQL
  select min(FBC_TRD_DT)
  Into :c_nxt_chlng_srt_dt 
  from FBC_FO_BRNCH_CAL where FBC_TRD_DT <= last_day(add_months(:c_chlng_end_dt,1)) and FBC_XCHNG_CD= :c_xchng_cd and FBC_TRD_DT > :c_chlng_end_dt;

  if( SQLCODE != 0 )
  {
    fn_userlog( c_ServiceName, "Error while fetching start date of next challenge.");
    fn_errlog(c_ServiceName, "S31010", SQLMSG, c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  rtrim(c_nxt_chlng_srt_dt);
  if( DEBUG_MSG_LVL_3 )
    fn_userlog( c_ServiceName, "Fetched value for challeneg start date is :%s:",c_nxt_chlng_srt_dt);

	/*** Fetching end date for challenge from FBC table for later use ***/

	EXEC SQL
  select max(FBC_TRD_DT)
  Into : c_nxt_chlng_end_dt
  from FBC_FO_BRNCH_CAL where FBC_TRD_DT <= last_day(add_months(:c_chlng_end_dt,1)) and FBC_XCHNG_CD= :c_xchng_cd;

  if( SQLCODE != 0 )
  {
	  fn_userlog( c_ServiceName, "Error while fetching end date of next challenge.");
    fn_errlog(c_ServiceName, "S31015", SQLMSG, c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	rtrim(c_nxt_chlng_end_dt);	
	if( DEBUG_MSG_LVL_3 )
		fn_userlog( c_ServiceName, "Fetched value for challeneg end date is :%s:",c_nxt_chlng_end_dt);


	/*** Initiating transaction ***/
  i_trnsctn = fn_begintran(c_ServiceName, c_err_msg);

  if (i_trnsctn == -1)
  {
    fn_userlog(c_ServiceName, "Failed in initial begin transaction");
    fn_errlog(c_ServiceName, "S31020", TPMSG, c_err_msg);
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	/*********** calling service for computing OPTION p&l ***********/

	 ptr_fml_SObuf = ( FBFR32 *)NULL;
   i_returncode = fn_pack_vartofml_local ( c_ServiceName,
                  c_err_msg,
                  &ptr_fml_SObuf,
                  10,
                  FFO_PRDCT_TYP,      (char *)&c_prdct_typ_opt,
                  FFO_UNDRLYNG,       (char *)c_undrlyng,
                  FFO_SSSN_ID,             (char *) &l_session_id,
                  FFO_ROUT_CRT,        (char *)c_rout_crt,
                  FFO_USR_ID,              (char *)c_user_id,
                  FFO_XCHNG_CD,       (char *)c_xchng_cd,
                  FFO_EBA_MTCH_ACT_NO,  (char *)c_cln_mtch_accnt,
                  FFO_FROM_DT,         (char *)c_strt_dt,
                  FFO_TO_DT,               (char *)c_end_dt,
                  FFO_RQST_TYP,              (char *)&c_req_flg  );
   if ( i_returncode != 0 )
   {
     fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg);
     fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
		 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

	ptr_fml_IObuf = ( FBFR32 *)NULL;
  ptr_fml_IObuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if ( ptr_fml_IObuf  == NULL )
  {
    fn_errlog( c_ServiceName, "S31030", TPMSG, c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  i_returncode = tpcall ( "SFO_OPT_PRTFL",
               ( char *)ptr_fml_SObuf,
                0,
               ( char **)&ptr_fml_IObuf ,
               &l_recvbuf,
                0
                );
  if ( i_returncode != SUCC_BFR)
  {
    fn_errlog( c_ServiceName, "S31035",TPMSG,c_err_msg);
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	  fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    tpfree( ( char * )ptr_fml_IObuf);
    tpfree( ( char * )ptr_fml_SObuf);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if ( Fget32( ptr_fml_IObuf,FFO_ERR_MSG,0,(char *)c_err_chck_opt, 0)== -1)
  {
    if( Ferror32 != FNOTPRES )
    {
      fn_errlog( c_ServiceName, "S31040","Error while fetching value from FML FFO_ERR_MSG.",c_err_msg);
  		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      tpfree( ( char * )ptr_fml_IObuf);
      tpfree( ( char * )ptr_fml_SObuf);
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    else
      i_err_cnt_opt = 1;
  }

  if ( i_err_cnt_opt != 1 )
  {
    fn_userlog(c_ServiceName, "C_ERR_CHCK_OPT is :%s:.",c_err_chck_opt);
    if ( strcmp(c_err_chck_opt,"No record to be shown in this view") != 0 )
    {
      fn_errlog( c_ServiceName, "S31045","NOT THE EXPECTED ERROR MESSAGE.",c_err_msg);
  		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      tpfree( ( char * )ptr_fml_IObuf);
      tpfree( ( char * )ptr_fml_SObuf);
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    fn_userlog(c_ServiceName, "No records for for match id :%s: under OPTION PROTFOLIO.",c_cln_mtch_accnt);
  }

  /* Fetching total options record count returned by sfo_opt_prtfl service for particular match id */
  i_opt_count = Foccur32((FBFR32 * ) ptr_fml_IObuf, FFO_RLZD_PL);
 
  if( DEBUG_MSG_LVL_3 )
    fn_userlog(c_ServiceName, "Total count records returned by sfo_opt_prtfl for match id :%s: is :%d:", c_cln_mtch_accnt,i_opt_count);

  for ( i_opt_counter = 0; i_opt_counter < i_opt_count; i_opt_counter++ ) /** for loop to process values returned by sfo_opt_prtfl **/
  {
    d_rlzd_pl_opt_temp = 0.0;
    l_charges_opt_temp = 0.0;
    d_unrlzd_pl_opt_temp = 0.0;

    i_err [ 0 ] = Fget32( ptr_fml_IObuf ,FFO_RLZD_PL,i_opt_counter,(char *)&d_rlzd_pl_opt_temp ,0);
    i_ferr[0] = Ferror32;
    i_err [ 1 ] = Fget32( ptr_fml_IObuf ,FFO_BRKRG_VL,i_opt_counter,(char *)&l_charges_opt_temp ,0);
    i_ferr[1] = Ferror32;
    i_err [ 2] = Fget32( ptr_fml_IObuf ,FFO_UNRLZD_PL,i_opt_counter,(char *)&d_unrlzd_pl_opt_temp ,0);
    i_ferr[2] = Ferror32;

		for ( i_cnt =0; i_cnt<3; i_cnt++ )
    {
      if(i_err[i_cnt] == -1 )
      {
        fn_userlog( c_ServiceName, "Error in Fetching PL and Charges Vlues for Option trades");
  			fn_errlog( c_ServiceName, "S31050", FMLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
        tpfree( ( char * )ptr_fml_IObuf);
        tpfree( ( char * )ptr_fml_SObuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    d_rlzd_pl_opt = d_rlzd_pl_opt_temp + d_rlzd_pl_opt;
    l_charges_opt = l_charges_opt_temp + l_charges_opt;
    d_unrlzd_pl_opt = d_unrlzd_pl_opt_temp + d_unrlzd_pl_opt;

    if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog( c_ServiceName, "----- Options data for record no :%d: -----",i_opt_counter);
      fn_userlog( c_ServiceName, "Total options realized profit/loss is :%lf:",d_rlzd_pl_opt_temp);
      fn_userlog( c_ServiceName, "Total options unrealized profit/loss is :%lf:",d_unrlzd_pl_opt_temp);
      fn_userlog( c_ServiceName, "Total options charges are :%ld:",l_charges_opt_temp);
      fn_userlog( c_ServiceName, "-------------------------------------------");
    }

  }   /** FOR loop for options end here **/

	if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog( c_ServiceName, "----------------------------------------------------------------------------");
    fn_userlog( c_ServiceName, "--------- Total options realized profit/loss is :%lf:  -------",d_rlzd_pl_opt);
    fn_userlog( c_ServiceName, "--------- Total options unrealized profit/loss is :%lf:  -------",d_unrlzd_pl_opt);
    fn_userlog( c_ServiceName, "--------- Total options charges are :%ld: --------",l_charges_opt);
    fn_userlog( c_ServiceName, "----------------------------------------------------------------------------");
  }

  /**************************************** Calculations for Options trade ends here ******************************************/

	/*********** calling service for computing FUTURE p&l ***********/

	ptr_fml_SFbuf = ( FBFR32 *)NULL;
  i_returncode = fn_pack_vartofml_local ( c_ServiceName,
                 c_err_msg,
                 &ptr_fml_SFbuf,
                 10,
                 FFO_PRDCT_TYP,      (char *)&c_prdct_typ_fut,
                 FFO_UNDRLYNG,       (char *)c_undrlyng,
                 FFO_SSSN_ID,             (char *) &l_session_id,
                 FFO_ROUT_CRT,        (char *)c_rout_crt,
                 FFO_USR_ID,              (char *)c_user_id,
                 FFO_XCHNG_CD,       (char *)c_xchng_cd,
                 FFO_EBA_MTCH_ACT_NO,  (char *)c_cln_mtch_accnt,
                 FFO_FROM_DT,         (char *)c_strt_dt,
                 FFO_TO_DT,               (char *)c_end_dt,
                 FFO_RQST_TYP,              (char *)&c_req_flg);
  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31055", LIBMSG, c_err_msg);
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	  fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    tpfree( ( char * )ptr_fml_IObuf);
    tpfree( ( char * )ptr_fml_SObuf);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  ptr_fml_IFbuf = ( FBFR32 *)NULL;
  ptr_fml_IFbuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

	if ( ptr_fml_IFbuf  == NULL )
  {
    fn_errlog( c_ServiceName, "S31060", TPMSG, c_err_msg);
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	  fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    tpfree( ( char * )ptr_fml_SFbuf);
    tpfree( ( char * )ptr_fml_IObuf);
    tpfree( ( char * )ptr_fml_SObuf);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
  l_recvbuf = 0;

  i_returncode = tpcall ( "SFO_FUT_PRTFL",
                        ( char *)ptr_fml_SFbuf,
                         0,
                        ( char **)&ptr_fml_IFbuf ,
                        &l_recvbuf,
                         0
                        );

	if ( i_returncode != SUCC_BFR)
  {
    fn_errlog( c_ServiceName, "S31065","NOT THE EXPECTED ERROR MESSAGE.",c_err_msg);
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	  fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    tpfree( ( char * )ptr_fml_IFbuf);
    tpfree( ( char * )ptr_fml_SFbuf);
    tpfree( ( char * )ptr_fml_IObuf);
    tpfree( ( char * )ptr_fml_SObuf);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
	}

  if ( Fget32( ptr_fml_IFbuf,FFO_ERR_MSG,0,(char *)c_err_chck_fut, 0) == -1 )
  {
    if( Ferror32 != FNOTPRES )
    {
      fn_errlog( c_ServiceName, "S31070","Error while fetching value from FML FFO_ERR_MSG.",c_err_msg);
 			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	     fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      tpfree( ( char * )ptr_fml_IObuf);
      tpfree( ( char * )ptr_fml_SObuf);
      tpfree( ( char * )ptr_fml_IFbuf);
      tpfree( ( char * )ptr_fml_SFbuf);
  		tpfree( ( char * )ptr_fml_Ibuf);	
	  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
    else
      i_err_cnt_fut = 1;
  }

	if ( i_err_cnt_fut != 1 )
  {
    fn_userlog(c_ServiceName, "C_ERR_CHCK_FUT is :%s:.",c_err_chck_fut);
    if ( strcmp(c_err_chck_fut,"No record to be shown in this view") != 0 )
    {
      fn_errlog( c_ServiceName, "S31075","NOT THE EXPECTED ERROR MESSAGE.",c_err_msg);
  		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      tpfree( ( char * )ptr_fml_IFbuf);
      tpfree( ( char * )ptr_fml_SFbuf);
      tpfree( ( char * )ptr_fml_IObuf);
      tpfree( ( char * )ptr_fml_SObuf);
	  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
    fn_userlog(c_ServiceName, "No records for for match id :%s: under FUTURE PROTFOLIO.",c_cln_mtch_accnt);
  }

  /* Fetching total options record count returned by sfo_fut_prtfl service for particular match id */
  i_fut_count = Foccur32((FBFR32 * ) ptr_fml_IFbuf, FFO_RLZD_PL);
  
  if( DEBUG_MSG_LVL_3 )
   fn_userlog(c_ServiceName, "Total count records returned by sfo_fut_prtfl for match id :%s: is :%d:", c_cln_mtch_accnt,i_fut_count);

	for ( i_fut_counter = 0; i_fut_counter < i_fut_count; i_fut_counter++ ) /** for loop to process values returned by sfo_fut_prtfl **/
  {
    d_rlzd_pl_fut_temp = 0.0;
    l_charges_fut_temp = 0.0;
    d_unrlzd_pl_fut_temp = 0.0;

    i_err [ 0 ] = Fget32( ptr_fml_IFbuf ,FFO_RLZD_PL,i_fut_counter,(char *)&d_rlzd_pl_fut_temp ,0);
    i_ferr[0] = Ferror32;
    i_err [ 1 ] = Fget32( ptr_fml_IFbuf ,FFO_BRKRG_VL,i_fut_counter,(char *)&l_charges_fut_temp ,0);
    i_ferr[1] = Ferror32;
    i_err [ 2] = Fget32( ptr_fml_IFbuf ,FFO_UNRLZD_PL,i_fut_counter,(char *)&d_unrlzd_pl_fut_temp ,0);
    i_ferr[2] = Ferror32;

    for ( i_cnt =0; i_cnt<3; i_cnt++ )
    {
      if(i_err[i_cnt] == -1 )
      {
        fn_userlog( c_ServiceName, "Error in Fetching PL and Charges Vlues for Future trades");
        fn_errlog( c_ServiceName, "S31080", FMLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
        tpfree( ( char * )ptr_fml_IFbuf);
        tpfree( ( char * )ptr_fml_SFbuf);
        tpfree( ( char * )ptr_fml_IObuf);
        tpfree( ( char * )ptr_fml_SObuf);
	    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
    }	
	  d_rlzd_pl_fut = d_rlzd_pl_fut_temp + d_rlzd_pl_fut;
    l_charges_fut = l_charges_fut_temp + l_charges_fut;
    d_unrlzd_pl_fut = d_unrlzd_pl_fut_temp + d_unrlzd_pl_fut;

    if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog( c_ServiceName, "----- Futures data for record number :%d: ------",i_fut_counter);
      fn_userlog( c_ServiceName, "Total unrealized future profit/loss :%lf:",d_unrlzd_pl_fut_temp );
      fn_userlog( c_ServiceName, "Total realized futures profit/loss is :%lf:",d_rlzd_pl_fut_temp );
      fn_userlog( c_ServiceName, "Total futures charges are :%ld:",l_charges_fut_temp );
      fn_userlog( c_ServiceName, "-------------------------------------------------");
    }

  }   /*** For loop used for summing values returned by sfo_fut_prtfl ends here ***/

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog( c_ServiceName, "----------------------------------------------------------------------------");
    fn_userlog( c_ServiceName, "-- Total unrealized future profit/loss :%lf: --",d_unrlzd_pl_fut );
    fn_userlog( c_ServiceName, "-- Total realized futures profit/loss is :%lf: --",d_rlzd_pl_fut );
    fn_userlog( c_ServiceName, "-- Total futures charges are :%ld: --",l_charges_fut);
    fn_userlog( c_ServiceName, "----------------------------------------------------------------------------");
  }

  /*** Calculations for Futures ends here ***/

  /*** Total PL and Charges calculation ***/
  d_tot_pl = d_rlzd_pl_fut + d_rlzd_pl_opt + d_unrlzd_pl_fut + d_unrlzd_pl_opt;
  l_tot_charges = l_charges_fut + l_charges_opt;

	d_tot_charges = (double)l_tot_charges;

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog( c_ServiceName, "P/L and Charges for match id :%s:",c_cln_mtch_accnt);
    fn_userlog( c_ServiceName, "-- Total profit/loss is :%lf: --",d_tot_pl );
    fn_userlog( c_ServiceName, "-- Total charges are :%lf: --", d_tot_charges );
    fn_userlog( c_ServiceName, "--------------------------------");
  }

	/*** Updating records of client in table ***/
  EXEC SQL
  UPDATE FSI_FO_SUPER_INVESTER
  SET  FSI_STATUS = 'C',
       FSI_TOT_CHARGES = :d_tot_charges,
       FSI_PNL = :d_tot_pl
  WHERE FSI_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
  AND   FSI_END_DT = :c_chlng_end_dt 
	AND		FSI_STATUS = 'O'; 

  if( SQLCODE != 0 )
  {
		fn_userlog( c_ServiceName, "Error while updating PNL and Total charges for the client.");
    fn_errlog(c_ServiceName, "S31085", SQLMSG, c_err_msg);
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	  fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    tpfree( ( char * )ptr_fml_IFbuf);
    tpfree( ( char * )ptr_fml_SFbuf);
    tpfree( ( char * )ptr_fml_IObuf);
    tpfree( ( char * )ptr_fml_SObuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if( DEBUG_MSG_LVL_3 )
    fn_userlog( c_ServiceName, "Record for match id :%s: update",c_cln_mtch_accnt);

	/*** Check if entry for match id alredy exist for next month challenge ***/

	EXEC SQL
	select count(*)
	into	:i_mtch_exst
	from FSI_FO_SUPER_INVESTER
	where FSI_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
	and  FSI_STATUS = 'O'
	and  FSI_END_DT = :c_nxt_chlng_end_dt;

	if( SQLCODE != 0 )
  {
    fn_userlog( c_ServiceName, "Error while updating PNL and Total charges for the client.");
    fn_errlog(c_ServiceName, "S31090", SQLMSG, c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    tpfree( ( char * )ptr_fml_IFbuf);
    tpfree( ( char * )ptr_fml_SFbuf);
    tpfree( ( char * )ptr_fml_IObuf);
    tpfree( ( char * )ptr_fml_SObuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if( DEBUG_MSG_LVL_3 )
    fn_userlog( c_ServiceName, "Count of next month challenge record for match id :%s: is :%d:",c_cln_mtch_accnt,i_mtch_exst);

	if ( i_mtch_exst == 0 )   /*** If condition to check if record already exists ***/
  {
		/*** Creating next month challeneg entry for match id processed ***/

  	EXEC SQL
  	INSERT INTO FSI_FO_SUPER_INVESTER
         	(
          	FSI_CLM_MTCH_ACCNT,
          	FSI_REG_DT,
          	FSI_STRT_DT,
          	FSI_END_DT,
          	FSI_CHALLENGE,
          	FSI_STATUS
         	)
         	Values
         	(
          	:c_cln_mtch_accnt,
          	SYSDATE,
          	:c_nxt_chlng_srt_dt,
						:c_nxt_chlng_end_dt,
          	'FO',
          	'O'
         	);	

		if (SQLCODE != 0)
  	{
			fn_userlog( c_ServiceName, "Error while inserting record for next month challenge");
			fn_errlog(c_ServiceName, "S31095", SQLMSG, c_err_msg);
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    	tpfree( ( char * )ptr_fml_IFbuf);
    	tpfree( ( char * )ptr_fml_SFbuf);
    	tpfree( ( char * )ptr_fml_IObuf);
    	tpfree( ( char * )ptr_fml_SObuf);
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}		

		if( DEBUG_MSG_LVL_3 )
    	fn_userlog( c_ServiceName, "Inserted record for next month challenge for match id :%s:",c_cln_mtch_accnt);
	}  /*** END of if condition ***/

	/*** Commiting Transaction ***/

	if (fn_committran(c_ServiceName, i_trnsctn, c_err_msg) == -1)
  {
    fn_userlog(c_ServiceName, "Failed in committing transaction");
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog(c_ServiceName, "S31100", TPMSG, c_err_msg);
  	tpfree( ( char * )ptr_fml_IFbuf);
    tpfree( ( char * )ptr_fml_SFbuf);
    tpfree( ( char * )ptr_fml_IObuf);
    tpfree( ( char * )ptr_fml_SObuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	if( DEBUG_MSG_LVL_3 )
    fn_userlog( c_ServiceName, "--- Transaction commited successfully for match id :%s: ---",c_cln_mtch_accnt);	

	if( DEBUG_MSG_LVL_3 )
    fn_userlog( c_ServiceName, "Service ends for match id :%s:.",c_cln_mtch_accnt);

	tpreturn( TPSUCCESS, SUCC_BFR, NULL, 0, 0 );
}


int fn_pack_vartofml_local ( char *c_ServiceName,
                       char *c_err_msg,
                       FBFR32 **ptr_fml_obuf,
                       int i_tot_ofields,
                       ... )
{
  va_list c_arg_lst;
  int i_cnt;
  int i_ch_val;
  unsigned int i_op_fml;
  char *c_op_dat;
  static int i_buf_cnt;

  if ( *ptr_fml_obuf == NULL )
  {
    *ptr_fml_obuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
    if (*ptr_fml_obuf == NULL)
    {
      fn_errlog( c_ServiceName, "L31005", TPMSG, c_err_msg );
      return SYSTEM_ERROR;
    }
    i_buf_cnt = 1;
  }

  fn_userlog( c_ServiceName, "Inside Local pack to fml func");
  va_start ( c_arg_lst,i_tot_ofields );
	for ( i_cnt=1; i_cnt<=i_tot_ofields; i_cnt++ )
  {
    i_op_fml = va_arg ( c_arg_lst, unsigned int );
    c_op_dat = va_arg ( c_arg_lst, char* );
    i_ch_val = Fadd32(*ptr_fml_obuf, i_op_fml, (char *)c_op_dat, 0);
    if ( i_ch_val == -1 )
    {
      if ( Ferror32 == FNOSPACE )
      {
        i_buf_cnt++;
        *ptr_fml_obuf = ( FBFR32 * ) tprealloc ( ( char * )*ptr_fml_obuf,
                                                 i_buf_cnt * MIN_FML_BUF_LEN * 10 );
        if (*ptr_fml_obuf == NULL)
        {
          fn_errlog( c_ServiceName, "L31010", TPMSG, c_err_msg );
          return SYSTEM_ERROR;
        }

        i_ch_val = Fadd32(*ptr_fml_obuf, i_op_fml, (char *)c_op_dat, 0);
        if ( i_ch_val == -1 )
        {
          fn_userlog ( c_ServiceName, "Error in field :%d:", i_cnt );
          fn_errlog( c_ServiceName, "L31015", FMLMSG, c_err_msg );
          tpfree ( ( char * )*ptr_fml_obuf );
          return SYSTEM_ERROR;
        }
      }
			else
      {
        fn_userlog ( c_ServiceName, "Error in field :%d:", i_cnt );
        fn_errlog( c_ServiceName, "L31020", FMLMSG, c_err_msg );
        return SYSTEM_ERROR;
      }
    }
  }

  return 0;
}	
