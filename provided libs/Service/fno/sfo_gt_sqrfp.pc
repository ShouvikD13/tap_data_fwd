/******************************************************************************/
/*  Program           : SFO_GT_SQRFP                                          */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_RQST_TYP                                          */
/*                                                                            */
/*  Optional          : FFO_UNDRLYNG                                          */
/* 										: FFO_PIPE_ID																						*/
/*                                                                            */
/*  Output            : FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_CNTRCT_TAG                                        */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_CTGRY_INDSTK                                      */
/*                                                                            */
/*  Description       : To get the records for running EOS FP squareoff       */ 
/*                      and pass it on to the Calling batch program           */
/*                                                                            */
/*  Log               :                                                       */
/*                                                                            */
/******************************************************************************/
/*  14-Mar-2008     Ver 1.0        Vidyayini Krish      Initial Release				*/
/*  13-Jun-2008     Ver 1.1        Shailesh| Sandeep		Revamp								*/
/*  15-Mar-2012     Ver 1.2        Sandip  | FNO BSE Changes 									*/
/*	08-Dec-2020			Ver 1.3				 Kiran 	 | EOS changes											*/
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fn_battmpt.h>
#include <fn_tuxlib.h>
#include <fn_log.h>
#include <fml_rout.h>
#include <fn_session.h>
#include <fn_read_debug_lvl.h>

void print_qry(char * str, int i_cnt,char * c_ServiceName);

void SFO_GT_SQRFP( TPSVCINFO *rqst )
{

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

	EXEC SQL INCLUDE "table/ffp_fo_futures_pstn.h";
  /**Commented for Ver 1.1 EXEC SQL INCLUDE "table/fod_fo_ordr_dtls.h"; **/
  EXEC SQL INCLUDE "table/usr_user_master.h";
  EXEC SQL INCLUDE "table/clm_clnt_mstr.h";
  EXEC SQL INCLUDE "table/pcm_pipe_clm_map.h";			/**Ver 1.1 **/

  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
	char c_tag [ 256 ];
	char c_msg [ 256 ];

  int i_returncode;
	int i_order_in_queue_exists;
	int i_trnsctn;

	EXEC SQL BEGIN DECLARE SECTION;
    varchar select_stmt[800];
    char c_xchng_cd [ 4 ];
    char c_prd_typ;
    char c_rqst_typ;
		char c_indstk_typ = '\0'; /*** Ver 1.3 ***/
		char c_indstk_typ_str[2]= "\0"; /*** Ver 1.3 ***/
    char c_undrlyng_str [ 200 ];
    char c_match_str [ 200 ];
		char c_pipe_id [3];			/** Ver 1.1 **/

    char sql_mtch_accnt [ 11 ];
    char sql_xchng_cd [ 4 ];
    char sql_prd_typ;
    char sql_indstk;
    char sql_undrlyng [ 7 ];
    char sql_cntrct_tag;

    char  c_exg_stts;

  EXEC SQL END DECLARE SECTION;

  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
  INITDBGLVL(c_ServiceName);	

	/**Commented for Ver 1.1 
	memset(sql_ffp_pipe_id,'\0',sizeof(sql_ffp_pipe_id)); 
	**/
	memset(sql_ffp_undrlyng,'\0',sizeof(sql_ffp_undrlyng));
	memset(sql_ffp_xchng_cd,'\0',sizeof(sql_ffp_xchng_cd));

  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                      c_err_msg,
                                      ptr_fml_Ibuf,
                                      /** 5, Commented in Ver 1.3 ***/
																			6,
                                      FFO_XCHNG_CD, ( char * )sql_ffp_xchng_cd, NULL,
                                      FFO_PRDCT_TYP, ( char * )&sql_ffp_prdct_typ, NULL,
                                      FFO_RQST_TYP, ( char * )&c_rqst_typ, NULL,
                                      FFO_UNDRLYNG, ( char * )sql_ffp_undrlyng, NULL,
																			FFO_PIPE_ID, ( char *) c_pipe_id, NULL,			/** Ver 1.1 **/
																		  /**Commented for Ver 1.1 
																			FFO_PIPE_ID, ( char * )sql_ffp_pipe_id, NULL **/ 
																			FFO_CTGRY_INDSTK, ( char * )&c_indstk_typ, NULL);	/*** Ver 1.3 ***/
	if( i_returncode != 0 )
  {
      fn_errlog( c_ServiceName, "S31005", LIBMSG , c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }

	/**Commented for Ver 1.1
	rtrim( sql_ffp_pipe_id );**/

	rtrim( c_pipe_id);
	rtrim( sql_ffp_undrlyng );
	rtrim( sql_ffp_xchng_cd );

	c_indstk_typ_str[0] = c_indstk_typ; /*** Ver 1.3 ***/
	c_indstk_typ_str[1] = '\0'; /*** Ver 1.3 ***/

  fn_userlog ( c_ServiceName,"EXCHANGE CODE IS :%s:",sql_ffp_xchng_cd );
  fn_userlog ( c_ServiceName,"PRODUCT TYPE IS :%c:",sql_ffp_prdct_typ );
  fn_userlog ( c_ServiceName,"UNDERLYNG IS :%s:",sql_ffp_undrlyng );
	fn_userlog ( c_ServiceName,"REQUEST TYPE IS :%c:",c_rqst_typ );
	fn_userlog ( c_ServiceName,"PIPE ID IS :%s:",c_pipe_id );
	fn_userlog ( c_ServiceName,"INDEX/STOCK TYPE IS :%c:",c_indstk_typ );		/*** Ver 1.3 ***/
	fn_userlog ( c_ServiceName,"INDEX/STOCK TYPE IS :%s:",c_indstk_typ_str ); /*** Ver 1.3 ***/	

  /**Commented for Ver 1.1
	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", LIBMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	*********/

	if ( c_rqst_typ == FPEOS_ALL_UND_ALL_PIPE)
	{
		/***Commented for Ver 1.1 
		strcpy ((char *)select_stmt.arr,"SELECT distinct(ffp_clm_mtch_accnt),ffp_undrlyng,to_char(ffp_expry_dt,'DD-Mon-YYYY'),ffp_indstk,ffp_cntrct_tag,    ffp_xchng_cd,fod_pipe_id,ABS(ffp_opnpstn_val),DECODE(ffp_opnpstn_flw ,'B','S','S','B','N'),ABS(ffp_opnpstn_qty) FROM ffp_fo_futures_pstn,fod_fo_ordr_dtls WHERE ffp_prdct_typ = 'P'");

		strcat((char *)select_stmt.arr," and (ffp_ibuy_qty > 0 OR ffp_isell_qty < 0 OR ffp_exbuy_qty > 0 OR ffp_exsell_qty < 0 OR ffp_opnpstn_flw != 'N' ) and ffp_clm_mtch_accnt = fod_clm_mtch_accnt and ffp_prdct_typ = fod_prdct_typ and ffp_indstk = fod_indstk and ffp_undrlyng = fod_undrlyng and ffp_expry_dt = fod_expry_dt order by ABS(FFP_OPNPSTN_VAL) DESC");
	*****/
	
		strcpy ((char *)select_stmt.arr,"SELECT distinct(ffp_clm_mtch_accnt),ffp_undrlyng,to_char(ffp_expry_dt,'DD-Mon-YYYY'),ffp_indstk,ffp_cntrct_tag,ffp_xchng_cd,ABS(ffp_opnpstn_val),DECODE(ffp_opnpstn_flw ,'B','S','S','B'),ABS(ffp_opnpstn_qty) FROM ffp_fo_futures_pstn WHERE ffp_prdct_typ = 'P'");

    strcat((char *)select_stmt.arr," and FFP_XCHNG_CD = '"); /** Ver 1.2 ***/
    strcat((char *)select_stmt.arr,sql_ffp_xchng_cd);     /*** Ver 1.2 ***/
		strcat((char *)select_stmt.arr,"' and FFP_INDSTK LIKE  '"); /*** Ver 1.3 ***/
  	strcat((char *)select_stmt.arr,c_indstk_typ_str);         /*** Ver 1.3 ***/
		strcat((char *)select_stmt.arr,"'  and  ffp_opnpstn_flw != 'N' order by ABS(FFP_OPNPSTN_VAL) DESC");		/**** Ver 1. added "'" at start ***/

	}
	else if ( c_rqst_typ == FPEOS_ALL_UND_PIPE )
	{

		fn_userlog (c_ServiceName,"FPEOS_ALL_UND_PIPE");

		/***Commented for Ver 1.1	
		strcpy ((char *)select_stmt.arr,"SELECT distinct(ffp_clm_mtch_accnt),ffp_undrlyng,to_char(ffp_expry_dt,'DD-Mon-YYYY'),ffp_indstk,ffp_cntrct_tag,    ffp_xchng_cd,fod_pipe_id,ABS(ffp_opnpstn_val),DECODE(ffp_opnpstn_flw ,'B','S','S','B','N'),ABS(ffp_opnpstn_qty) FROM ffp_fo_futures_pstn,fod_fo_ordr_dtls WHERE ffp_prdct_typ = 'P'");

    strcat((char *)select_stmt.arr," and (ffp_ibuy_qty > 0 OR ffp_isell_qty < 0 OR ffp_exbuy_qty > 0 OR ffp_exsell_qty < 0      OR ffp_opnpstn_flw != 'N' ) and ffp_clm_mtch_accnt = fod_clm_mtch_accnt and ffp_prdct_typ = fod_prdct_typ and 								ffp_indstk = fod_indstk and ffp_undrlyng = fod_undrlyng and ffp_expry_dt = fod_expry_dt and fod_pipe_id = '");
		strcat((char *)select_stmt.arr, sql_fod_pipe_id);
		strcat( (char *)select_stmt.arr,"' order by ABS(FFP_OPNPSTN_VAL) DESC");
	****/

		strcpy ((char *)select_stmt.arr,"SELECT distinct(ffp_clm_mtch_accnt),ffp_undrlyng,to_char(ffp_expry_dt,'DD-Mon-YYYY'),ffp_indstk,ffp_cntrct_tag, ffp_xchng_cd,ABS(ffp_opnpstn_val),DECODE(ffp_opnpstn_flw ,'B','S','S','B'),ABS(ffp_opnpstn_qty) FROM ffp_fo_futures_pstn,pcm_pipe_clm_map WHERE ffp_clm_mtch_accnt = pcm_clm_mtch_accnt and ffp_xchng_cd = pcm_xchng_cd and ffp_prdct_typ = 'P'");

    strcat((char *)select_stmt.arr," and  ffp_opnpstn_flw != 'N' and pcm_crnt_pipe_id = '");

		strcat((char *)select_stmt.arr,c_pipe_id );
   
		strcat((char *)select_stmt.arr,"' and FFP_XCHNG_CD ='"); /** Ver 1.2 ***/
    strcat((char *) select_stmt.arr,sql_ffp_xchng_cd );     /*** Ver 1.2 ***/

		strcat((char *)select_stmt.arr,"' and FFP_INDSTK LIKE  '"); /*** Ver 1.3 ***/
    strcat((char *)select_stmt.arr,c_indstk_typ_str);         /*** Ver 1.3 ***/
		strcat( (char *)select_stmt.arr,"' order by ABS(FFP_OPNPSTN_VAL) DESC");

		fn_userlog (c_ServiceName,"FPEOS_ALL_UND_PIPE CREATED");

	} 
	else if ( c_rqst_typ == FPEOS_UND_ALL_PIPE )
	{

		/**Commented for Ver 1.1 
		strcpy ((char *)select_stmt.arr,"SELECT distinct(ffp_clm_mtch_accnt),ffp_undrlyng,to_char(ffp_expry_dt,'DD-Mon-YYYY'),ffp_indstk,ffp_cntrct_tag,    ffp_xchng_cd,fod_pipe_id,ABS(ffp_opnpstn_val),DECODE(ffp_opnpstn_flw ,'B','S','S','B','N'),ABS(ffp_opnpstn_qty) FROM ffp_fo_futures_pstn,fod_fo_ordr_dtls WHERE ffp_prdct_typ = 'P'");

		strcat((char *)select_stmt.arr," and ffp_undrlyng = '");

		strcat( (char *)select_stmt.arr,sql_ffp_undrlyng);
		
		strcat((char *)select_stmt.arr,"' and (ffp_ibuy_qty > 0 OR ffp_isell_qty < 0 OR ffp_exbuy_qty > 0 OR ffp_exsell_qty < 0      OR ffp_opnpstn_flw != 'N' ) and ffp_clm_mtch_accnt = fod_clm_mtch_accnt and ffp_prdct_typ = fod_prdct_typ and                ffp_indstk = fod_indstk and ffp_undrlyng = fod_undrlyng and ffp_expry_dt = fod_expry_dt order by ABS(FFP_OPNPSTN_VAL) DESC");
	****/

		strcpy ((char *)select_stmt.arr,"SELECT distinct(ffp_clm_mtch_accnt),ffp_undrlyng,to_char(ffp_expry_dt,'DD-Mon-YYYY'),ffp_indstk,ffp_cntrct_tag, ffp_xchng_cd,ABS(ffp_opnpstn_val),DECODE(ffp_opnpstn_flw ,'B','S','S','B'),ABS(ffp_opnpstn_qty) FROM ffp_fo_futures_pstn WHERE ffp_prdct_typ = 'P'");

		strcat((char *)select_stmt.arr," and ffp_undrlyng = '");

		strcat( (char *)select_stmt.arr,sql_ffp_undrlyng);

		strcat((char *)select_stmt.arr,"' and FFP_XCHNG_CD ='"); /** Ver 1.2 ***/
    strcat((char *) select_stmt.arr,sql_ffp_xchng_cd );     /*** Ver 1.2 ***/
	
   	strcat((char *)select_stmt.arr,"' and FFP_INDSTK LIKE  '"); /*** Ver 1.3 ***/
    strcat((char *)select_stmt.arr,c_indstk_typ_str);         /*** Ver 1.3 ***/ 
		strcat((char *)select_stmt.arr,"' and  ffp_opnpstn_flw != 'N' order by ABS(FFP_OPNPSTN_VAL) DESC");

	}
	else if ( c_rqst_typ == FPEOS_UNDRLYNG_PIPE )
	{

		/**Commented for Ver 1.1 
		strcpy ((char *)select_stmt.arr,"SELECT distinct(ffp_clm_mtch_accnt),ffp_undrlyng,to_char(ffp_expry_dt,'DD-Mon-YYYY'),ffp_indstk,ffp_cntrct_tag,    ffp_xchng_cd,fod_pipe_id,ABS(ffp_opnpstn_val),DECODE(ffp_opnpstn_flw ,'B','S','S','B','N'),ABS(ffp_opnpstn_qty) FROM ffp_fo_futures_pstn,fod_fo_ordr_dtls WHERE ffp_prdct_typ = 'P'");

		strcat((char *)select_stmt.arr," and ffp_undrlyng = '");

		strcat( (char *)select_stmt.arr,sql_ffp_undrlyng);

		strcat( (char *)select_stmt.arr,"' and (ffp_ibuy_qty > 0 OR ffp_isell_qty < 0 OR ffp_exbuy_qty > 0 OR ffp_exsell_qty < 0     OR ffp_opnpstn_flw != 'N' ) and ffp_clm_mtch_accnt = fod_clm_mtch_accnt and ffp_prdct_typ = fod_prdct_typ and ffp_indstk     = fod_indstk and ffp_undrlyng = fod_undrlyng and ffp_expry_dt = fod_expry_dt and fod_pipe_id = '");

		strcat((char *)select_stmt.arr, sql_fod_pipe_id);

		strcat( (char *)select_stmt.arr,"'order by ABS(FFP_OPNPSTN_VAL) DESC" ); 
		*****/

		strcpy ((char *)select_stmt.arr,"SELECT distinct(ffp_clm_mtch_accnt),ffp_undrlyng,to_char(ffp_expry_dt,'DD-Mon-YYYY'),ffp_indstk,ffp_cntrct_tag,ffp_xchng_cd,ABS(ffp_opnpstn_val),DECODE(ffp_opnpstn_flw ,'B','S','S','B'),ABS(ffp_opnpstn_qty) FROM ffp_fo_futures_pstn,pcm_pipe_clm_map WHERE ffp_clm_mtch_accnt = pcm_clm_mtch_accnt and ffp_xchng_cd = pcm_xchng_cd and ffp_prdct_typ = 'P'");

		strcat((char *)select_stmt.arr," and ffp_undrlyng = '");

		strcat( (char *)select_stmt.arr,sql_ffp_undrlyng);

		strcat( (char *)select_stmt.arr,"' and ffp_opnpstn_flw != 'N' and pcm_crnt_pipe_id = '");

		strcat((char *)select_stmt.arr, c_pipe_id);

		strcat((char *)select_stmt.arr,"' and FFP_XCHNG_CD ='"); /** Ver 1.2 ***/
    strcat((char *) select_stmt.arr,sql_ffp_xchng_cd );     /*** Ver 1.2 ***/

   	strcat((char *)select_stmt.arr,"' and FFP_INDSTK LIKE  '"); /*** Ver 1.3 ***/
    strcat((char *)select_stmt.arr,c_indstk_typ_str);         /*** Ver 1.3 ***/ 
		strcat( (char *)select_stmt.arr,"'order by ABS(FFP_OPNPSTN_VAL) DESC" ); 

	}
	else
	{
		fn_userlog(c_ServiceName,"Invalid request type");
	  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );		
	}

	select_stmt.len = strlen((char *)select_stmt.arr);

	fn_userlog ( c_ServiceName, "Length of stmt is :%ld:",select_stmt.len );
  print_qry((char*)select_stmt.arr,select_stmt.len,c_ServiceName);	

	
  EXEC SQL PREPARE sql_stmt FROM :select_stmt;

	if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	ptr_fml_Obuf = NULL;

	EXEC SQL DECLARE cur_dyn CURSOR FOR sql_stmt;

	EXEC SQL OPEN cur_dyn ;
  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg );
    tpfree ( ( char * ) ptr_fml_Obuf );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  for (;;)
  {

		memset(sql_ffp_clm_mtch_accnt,'\0',sizeof(sql_ffp_clm_mtch_accnt));
    memset(sql_ffp_undrlyng,'\0',sizeof(sql_ffp_undrlyng));
    memset(sql_ffp_xchng_cd,'\0',sizeof(sql_ffp_xchng_cd));
    /**Commented for Ver 1.1 memset(sql_fod_pipe_id,'\0',sizeof(sql_fod_pipe_id));**/
		memset(sql_ffp_expry_dt.arr,'\0',sizeof(sql_ffp_expry_dt.arr));

    EXEC SQL FETCH cur_dyn
             INTO :sql_ffp_clm_mtch_accnt,
									:sql_ffp_undrlyng,
									:sql_ffp_expry_dt,
									:sql_ffp_indstk,
									:sql_ffp_cntrct_tag,
									/**Commented for Ver 1.1 :sql_fod_xchng_cd,
									:sql_fod_pipe_id, **/
									:sql_ffp_xchng_cd,		/**Ver 1.1 **/
									:sql_ffp_opnpstn_val,
									:sql_ffp_opnpstn_flw,
									:sql_ffp_opnpstn_qty;

    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        break;
      }
      fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg );
      tpfree ( ( char * ) ptr_fml_Obuf );
      EXEC SQL CLOSE cur_dyn;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		rtrim(sql_ffp_clm_mtch_accnt);
		rtrim(sql_ffp_undrlyng);
    sql_ffp_expry_dt.len = strlen((char *)sql_ffp_expry_dt.arr);

		/**Commented for Ver 1.1 rtrim(sql_fod_xchng_cd);**/
		/**Commented for Ver 1.1 rtrim(sql_fod_pipe_id); **/

		rtrim(sql_ffp_xchng_cd);			/**Ver 1.1 **/

/**Commented for Ver 1.1 , the same check is now introduced in sfo_prcs_sqrfp
		i_order_in_queue_exists = 0;

		i_returncode = fn_lock_usr( c_ServiceName,
                              sql_ffp_clm_mtch_accnt );
  	if ( i_returncode == -1 )
  	{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg  );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	strcpy ( c_msg, "System error. Contact system support" );
    	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

  	EXEC SQL
       	 SELECT  1
       	 INTO    :i_order_in_queue_exists
       	 FROM    dual
       	 WHERE   exists
  	(
     SELECT  1
     FROM    fod_fo_ordr_dtls
     WHERE   fod_clm_mtch_accnt  = :sql_ffp_clm_mtch_accnt
     AND     fod_xchng_cd        = :sql_ffp_xchng_cd
     AND     fod_prdct_typ       = :sql_ffp_prdct_typ
     AND     fod_indstk          = :sql_ffp_indstk
     AND     fod_undrlyng        = :sql_ffp_undrlyng
     AND     fod_ordr_stts       =  'Q'
		 AND 		 fod_pipe_id         = :sql_fod_pipe_id 
     AND     fod_expry_dt        = :sql_ffp_expry_dt
  	);

  	if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  	{
   	 strcpy ( c_msg, "System error. Contact system support" );
   	 fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
   	 fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
   	 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   	 return;
  	}

  	fn_userlog ( c_ServiceName," STATUS of QUEUE is :%d:",i_order_in_queue_exists );

  	if ( i_order_in_queue_exists == 1 )
  	{

   	 fn_userlog(c_ServiceName,"Order in Queued state");
		 continue;

  	}
************************/	

		fn_userlog ( c_ServiceName,"Open position Flow is :%c:",sql_ffp_opnpstn_flw);
		fn_userlog ( c_ServiceName,"Open position qty is :%ld:",sql_ffp_opnpstn_qty);
		fn_userlog ( c_ServiceName,"EXCHANGE CODE IS :%s:",sql_ffp_xchng_cd );
    fn_userlog ( c_ServiceName,"PRODUCT TYPE IS :%c:",sql_ffp_prdct_typ );
    fn_userlog ( c_ServiceName,"UNDERLYNG IS :%s:",sql_ffp_undrlyng );
    fn_userlog ( c_ServiceName,"REQUEST TYPE IS :%c:",c_rqst_typ );
    fn_userlog ( c_ServiceName,"EXPIRY DATE IS :%s:",sql_ffp_expry_dt.arr );

    i_returncode = fn_pack_vartofml( c_ServiceName,
                                     c_err_msg,
                                     &ptr_fml_Obuf,
                                     9, /**ver 1.1 changed from 10 to 9 **/
                                 		 FFO_EBA_MTCH_ACT_NO, ( char * )sql_ffp_clm_mtch_accnt,
                                 		 FFO_XCHNG_CD, ( char * )sql_ffp_xchng_cd,
                                 		 FFO_PRDCT_TYP, ( char * )&sql_ffp_prdct_typ,
                                 		 FFO_CTGRY_INDSTK, ( char * )&sql_ffp_indstk,
                                 		 FFO_UNDRLYNG, ( char * )sql_ffp_undrlyng,
                                 		 FFO_CNTRCT_TAG, ( char * )&sql_ffp_cntrct_tag,
																		 FFO_EXPRY_DT, (char * )sql_ffp_expry_dt.arr,
																		/**Commented for Ver 1.1 FFO_PIPE_ID, ( char * )sql_fod_pipe_id, **/
																		 FFO_OPNPSTN_FLW, ( char * )&sql_ffp_opnpstn_flw,
																		 FFO_OPNPSTN_QTY, ( char * )&sql_ffp_opnpstn_qty );

    if( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg );
      EXEC SQL CLOSE cur_dyn;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  } /**for loop ends **/
  EXEC SQL CLOSE cur_dyn;

/***Commented for Ver 1.1
	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    fn_errlog( c_ServiceName, "S31045", LIBMSG, c_err_msg  );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    return;
  }
************************/

  tpreturn(TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );

}

void print_qry(char * str, int i_cnt,char * c_ServiceName)
{
  int idx;
  char c_tmp_str1[100];

  MEMSET(c_tmp_str1);
  fn_userlog(c_ServiceName,"Printing query");

  for (idx = 0;idx < i_cnt; idx += 60)
  {
    strncpy(c_tmp_str1,str + idx,60);
    fn_userlog(c_ServiceName,"%s",c_tmp_str1);
  }
  fn_userlog(c_ServiceName,"Finished printing query");
}

