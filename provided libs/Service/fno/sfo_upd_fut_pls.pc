/******************************************************************************/
/*  Program           : SFO_UPD_FUT_PLS                                    		*/	
/*                                                                            */
/*  Input             : vw_pstn_actn                                          */
/*                                                                            */
/*  Output            : vw_err_msg                                            */
/*                                                                            */
/*  Description       : This service updates the futures positions based on   */
/*                      action.                                               */
/*                                                                            */
/*  Log               : 1.0   10-Mar-2008 | Shailesh(Infotech)  						  */
/*  Log								: 1.1		01-Apr-2008 | Kunal(Infotech)										*/
/*  Log 							:	1.2	  07-Oct-2008 | Sandeep (Infotech)								*/
/*  Log								: 1.3   04-Dec-2008 | Sandeep (Infotech)								*/
/*	Log								: 1.4		20-Jan-2009	|	Sandeep	(Infotech)								*/
/*  Log               : 1.5   25-Feb-2009 | Wipro Infotech                    */
/*  Log               : 1.6   05-Jun-2009 | Vidyayini Krish(Infotech)         */
/*  Log               : 1.7   09-Sep-2009 | Shamili	(Infotech)                */
/*	Log								:	1.8		18-Feb-2010	|	Sandeep	(Infotech)								*/
/*	Log								:	1.9		27-Apr-2010	|	Sandeep	(Infotech)								*/
/*	Log								:	2.0		25-May-2010	|	Sandeep (Infotech)								*/
/*  Log               : 2.1   11-Mar-2011 | Sachin  (Infotech)                */ 
/*  Log               : 2.2   15-Aug-2011 | Renuka  (Infotech)                */
/*	Log								: 2.3		17-Feb-2012 | Sandip	(Infotech)								*/ 
/*	Log								: 2.4		08-Jun-2012 | Mahesh	(Infotech)								*/ 
/*	Log								: 2.5		13-Aug-2012 | Shamili (Infotech)								*/ 
/*  Log               : 2.6   07-Nov-2012 | Swati A.B (Infotech)              */
/*  Log               : 2.7   11-Apr-2013 | Bhushan Sonwane (Infotech)        */
/*	Log								:	2.8		18-Jan-2013	|	Bhushan Sonwane (Infotech)        */
/*  Log               : 2.9   23-May-2013 | Samip M (Infotech)                */
/*  Log               : 3.0   12-Sep-2013 | Mahesh Shinde (Infotech)          */
/*	Log								: 3.1   27-Jan-2013	| Vishnu Nair(Infotech)							*/
/*  Log               : 3.2   02-Apr-2014 | Sachin Birje(Infotech)            */
/*  Log               : 3.3   17-Apr-2014 | Ritesh Deolekar(Infotech)         */
/*	Log								: 3.4   13-Feb-2014	| Navina D. (Infotech)							*/
/*  Log               : 3.5   14-Mar-2014  Shashi K|Infotech                  */
/*  Log               : 3.6   30-Dec-2014  Samip M|Infotech                   */
/*  Log               : 3.7   20-Feb-2015 | Anand Dhopte (Infotech)           */ 
/*	Log								: 3.8   29-Jun-2015 | Ritesh Deolekar(Infotech)					*/
/*  Log               : 3.9   13-Nov-2015  Sachin Birje   |Infotech           */
/*	Log								: 4.0   08-Dec-2015 | Navina D. (Infotech)    					*/
/*  Log               : 4.1   29-Jan-2015 | Bhupendra Malik                   */
/*	Log 							:	4.3		23-Jun-2016	|	Kishor B(Infotech)								*/
/*  Log               : 4.4   21-Apr-2017 | Bhupendra Malik                   */
/*  Log               : 4.5   17-Jan-2019 | Suchita Dabir                     */
/*  Log	      			  : 4.6	  20-Dec-2022 | Karthik Sujit         					  */
/*  Log               : 4.7   31-Mar-2023 | Dipin                             */
/******************************************************************************/
/*	1.0				Initial Release																									*/
/*	1.1				IBM Migration Changes																						*/
/*	1.2				IOC Case And Expiry Handeling																		*/
/*	1.3				Pre-squareOff Report Changes																		*/
/*  1.4				Partial Execution & Cancellation Case Handeling									*/		
/*  1.5       Conversion of Part Future Plus Positions to Future Positions    */
/*  1.6       Bug fix of 1.5                                                  */
/*	1.7				Add Contract Details in Narration																*/	
/*	1.8				CRCON40299	Add Margin Request																	*/
/*	1.9				CRCSN43314	Limit MisMatch																			*/
/*  2.0       CRARP43453  Cash Projection Mismatch                            */
/*  2.1       CRARP44502	User Add Margin Release In Case Of Spread Order     */                   
/*  2.2       CRCSN43521	EQSAM-To capture pledge values                      */
/*	2.3				FNO BSE Changes																									*/                   
/*	2.4				CR-ISEC14-26850 (Additional Margin on conversion from 					*/
/*						future plus to future) and business error handeling  					  */                   
/*	2.5				Margin percentage storage datatype is changed to double from long*/
/*  2.6       CR-Overnight orders changes                                     */
/*  2.7       DL-2 Order Placement Issue fixing                               */
/*	2.8 			CR-ISEC14-35196 Condition Added To Calculate No. Of Lots				*/
/*  2.9       Modify Allocation changes                                       */
/*  3.0       CR-ISEC14-41247  Correct order flow on converted positions page */
/*  3.1       Changes for auto MTM																						*/
/*  3.2       FDR Module Changes                                              */
/*  3.3       Service call to SFO_GET_QT commented and function introduced    */
/*  3.4       Enabling FP for NRI clients  (Navina D. )						            */
/*  3.5   -   Stoped to write the file for system sqruare off records         */
/*  3.6   -   View to FML changes																							*/
/*  3.7   -   Updating Trade Date in Underlying Master when position already	*/
/* 						exist for same underlying & Contract Tag and also while         */
/*            converting position from FuturePLUS to Future.                  */
/*	3.8		-		Contract master & Trade Quote merger Changes.	  								*/
/*  3.9   -   Minimum Margin calculation in event of SYS or User Add margin   */
/*	4.0		-		Channel added in conversion log table.       	  								*/
/*  4.1   -   Migration of RI to NRI																					*/
/*	4.3		-		Log Maintenace.																									*/			
/*  4.4   -   cash projection changes                                         */					                  	
/*  4.5   -   Position Mismatch changes ( executed qty from packet is used )  */ 
/*	4.6	  -   CR-ISEC14-162075 SAM in Currency Commodity 		                  */
/*  4.7   -   Regulatory changes- Real time margin reporting                  */   
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <eba_to_ors.h>
#include <fo_fml_def.h>
 /** #include <fo_view_def.h> ** Ver 3.6 **/
#include <fo_view_def.h>   /** Ver 3.6 **/
#include <fml_rout.h>        /** Ver 3.6 **/ 
#include <sqlca.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_pos.h>
#include <fn_ddr.h>
#include <fn_read_debug_lvl.h>			/*  1.1  */
#include <userlog.h>            /* Ver 1.5 */
#include <math.h>								/* Ver 2.4 */
#include <fo_get_records.h>     /* Ver 3.3 */
EXEC SQL INCLUDE "table/iai_info_account_info.h"; /** Ver 4.1 **/
/** Applies an action on an existing position **/
int	fn_apply_cnt_actn_fpl ( 	char *c_ServiceName,
													struct vw_pstn_actn *ptr_st_pstn_actn,
												 	struct vw_cntfut_pos *ptr_st_cntfut_pos,
                  				struct vw_err_msg *ptr_st_err_msg);

/** Given a position and a type of action performed calculates the new **/
/** margin to be                                                       **/
int fn_upd_mrgn_fpl( char *c_ServiceName,
								 struct vw_pstn_actn *ptr_st_pstn_actn,
                 struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                 struct vw_undfut_pos *ptr_st_undfut_pos,
                 struct vw_err_msg *ptr_st_err_msg);

int fn_call_actn_grp1_fpl( char *c_ServiceName,
											 struct vw_pstn_actn *ptr_st_pstn_actn,
                  		 struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                  		 struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                  	 	 struct vw_err_msg *ptr_st_err_msg);

int fn_call_actn_add_mrgn_fpl( char *c_ServiceName,
													 struct vw_pstn_actn *ptr_st_pstn_actn,
                  				 struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                  				 struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                  	   		 struct vw_err_msg *ptr_st_err_msg,
													 char *c_imtm_addmrgn_flg);  /*** Ver 3.1 ***/

int fn_call_actn_imtm_fpl( char *c_ServiceName,
											 struct vw_pstn_actn *ptr_st_pstn_actn,
                  		 struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                  		 struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                  	 	 struct vw_err_msg *ptr_st_err_msg,
										   char   *c_imtm_addmrgn_flg);  /*** Ver 3.1 ***/

int fn_call_actn_conv_to_fut( char *c_ServiceName,
                             struct vw_pstn_actn *ptr_st_pstn_actn,
                             struct vw_undfut_pos *ptr_undfut_pos_crrnt,
                             struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                             struct vw_err_msg *ptr_st_err_msg);

/**** Commented in Ver 2.4 *****************************************************
int fn_call_actn_create_fut( char	*c_ServiceName,
													   struct vw_pstn_actn *ptr_st_pstn_actn,
                             struct vw_err_msg *ptr_st_err_msg);
*********************************************************************************/
/*** Added in Ver 2.4 *******/
int fn_call_actn_create_fut( char	*c_ServiceName,
													   struct vw_pstn_actn *ptr_st_pstn_actn,
														 double *d_fut_initial_mrgn,
														 double *d_fut_min_mrgn,	
                             double *d_fut_notional_pnl,
														 struct vw_err_msg *ptr_st_err_msg
                             ); 

int fn_call_addhoc_mrgn_fpl( char *c_ServiceName,			/***	Ver	1.8	***/
	                           struct vw_pstn_actn *ptr_st_pstn_actn,
  	                         struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
    	                       struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
      	                     struct vw_err_msg *ptr_st_err_msg);

int fn_cal_min_mrgn( char *c_ServiceName,                                 /** Ver 3.9 ***/
                       struct vw_pstn_actn *ptr_st_pstn_actn,
                       struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                       struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                       struct vw_err_msg *ptr_st_err_msg,
                       char   *c_imtm_addmrgn_flg);

double d_pl_MTM ;
double d_avl_mrgn_MTM ;
double d_trd_mrgn_MTM_b ;
double d_ord_mrgn_MTM_b ;
double d_spread_mrgn_MTM_b ;
double d_add_mrgn_MTM ;
double d_trd_mrgn_MTM_a ;
double d_ord_mrgn_MTM_a ;
double d_spread_mrgn_MTM_a ;
long 	 l_opnpstn_MTM ;
long	 int li_cmp_MTM;
long	 int li_cmp;			/***	Ver	1.8	***/

char	 c_expry_dt_MTM[22];
char	 c_bnk_accnt_MTM[13];
char	 c_time[21];
char	 c_filetime[9];
char	 c_filename[100];
char	 c_filedata[1000];
double d_bft_amt_MTM ;
double d_alctd_amt_MTM ;
double d_plg_amt_MTM ;
double d_exec_rt;     /***  Ver 2.0 ***/
double d_nwb_amt_MTM=0; 					/***  Ver 2.2 ***/
double d_tot_shr_plgd_amt_MTM=0;  /***  Ver 2.2 ***/
double d_eab_amt_MTM=0;           /***  Ver 2.2 ***/
double d_fdr_amt_MTM=0;           /***  Ver 3.2 ***/
double d_cab_amt_MTM=0;			      /***	Ver 4.6 ***/
double d_cab_amt_mco_MTM=0;			  /***	Ver 4.6 ***/

/******** Commented in Ver 2.5 *********

long  l_init_mrgn_prcnt_MTM ;
long  l_min_mrgn_prcnt_MTM ;
long  l_somc_prcnt_MTM ;
long  l_spread_mrgn_MTM ;
long  l_init_mrgn_prcnt_MTM ;
long  l_avm_prcnt_MTM ;

****************************************/


/********* Ver 2.5 Starts ******/

double d_init_mrgn_prcnt_MTM ;
double d_min_mrgn_prcnt_MTM ;
double d_somc_prcnt_MTM ;
double d_spread_mrgn_MTM ;
double d_avm_prcnt_MTM ;


/********* Ver 2.5 Ends   ******/



long  l_exctd_opn_pstn_MTM ;
long  l_ord_opn_pstn_MTM ;
FILE 	*fp ;

void SFO_UPD_FUT_PLS( TPSVCINFO *rqst )
{
	char c_ServiceName[33];
  char c_err_msg[256];
  char c_upos_avl;
	char c_imtm_addmrgn_flg ='N'; /** Ver 3.1 **/

  int i_returncode;
  int i_ip_len;
  int i_op_len;
  int i_trnsctn;

  long l_frs_qty ;    
  long l_cvr_qty ;   
  long l_tag_cnt ;   

  char c_temp_str[500];  /*** Ver 3.5 ***/
  char c_ucc_cd[13]; /**ver 4.7 **/

  EXEC SQL BEGIN DECLARE SECTION;
		/** Input action to be performed **/
    struct vw_pstn_actn *ptr_st_pstn_actn; 

		/** Current underlying level position **/
    struct vw_undfut_pos st_undfut_pos_crrnt; 
		/** Undelying level position to be **/
    struct vw_undfut_pos st_undfut_pos_to_be;

		char	c_cntrct_tag;
		char	c_mtm_flag;
    varchar c_trade_dt[12];
  EXEC SQL END DECLARE SECTION;

  struct vw_err_msg *ptr_st_err_msg;
  struct vw_undfut_pos st_undfut_pos_to_be_tmp; /** ver 3.9 **/
  struct vw_pstn_actn st_pstn_actn_tmp; /** ver 3.9 **/
  struct vw_undfut_pos st_undfut_pos_crrnt_tmp;  /** ver 3.9 **/

  MEMSET(st_undfut_pos_to_be_tmp);  /** ver 3.9 **/
  MEMSET(st_pstn_actn_tmp);         /** ver 3.9 **/
  MEMSET(st_undfut_pos_crrnt_tmp);  /** ver 3.9 **/

  TPTRANID tranid;                  /** ver 3.9 **/

  ptr_st_pstn_actn = ( struct vw_pstn_actn *)rqst->data;
  strcpy( c_ServiceName, rqst->name );

	INITDBGLVL(c_ServiceName);                /* Ver 1.1 */

  ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
  if ( ptr_st_err_msg ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31005", TPMSG, c_err_msg );
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }
  memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

	rtrim(ptr_st_pstn_actn->c_cln_mtch_accnt);
	rtrim(ptr_st_pstn_actn->c_undrlyng);
	rtrim(ptr_st_pstn_actn->c_expry_dt);
	rtrim(ptr_st_pstn_actn->c_ref_rmrks);

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_pstn_actn->c_rout_crt );

  if( DEBUG_MSG_LVL_1 ) /*** Ver 4.3 ***/
  {
    fn_userlog ( c_ServiceName,"c_cln_mtch_accnt :%s:,c_prd_typ:%c:,c_undrlyng:%s:", ptr_st_pstn_actn->c_cln_mtch_accnt,ptr_st_pstn_actn->c_prd_typ,ptr_st_pstn_actn->c_undrlyng );
		fn_userlog ( c_ServiceName,"c_xchng_cd:%s:,c_trnsctn_flw:%c:,c_cntrct_tag:%c:, c_expry_dt:%s:", ptr_st_pstn_actn->c_xchng_cd,ptr_st_pstn_actn->c_trnsctn_flw, ptr_st_pstn_actn->c_expry_dt );
		fn_userlog ( c_ServiceName,"l_session_id:%ld:,d_add_mrgn_amt:%lf:,c_ref_rmrks:%s:", ptr_st_pstn_actn->l_session_id ,ptr_st_pstn_actn->d_add_mrgn_amt,ptr_st_pstn_actn->c_ref_rmrks);
	}

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog ( c_ServiceName, "*************	SFO_UPD_FUT_PLS - I	*************");
		fn_userlog ( c_ServiceName, "Input Parameters passed to position service" );
  	fn_userlog ( c_ServiceName,"c_user_id 	     :%s:",ptr_st_pstn_actn->c_user_id );
  	fn_userlog ( c_ServiceName,"l_session_id      :%ld:", ptr_st_pstn_actn->l_session_id );
  	fn_userlog ( c_ServiceName,"c_xchng_cd       :%s:", ptr_st_pstn_actn->c_xchng_cd );
  	fn_userlog ( c_ServiceName,"c_expry_dt       :%s:", ptr_st_pstn_actn->c_expry_dt );
  	fn_userlog ( c_ServiceName,"c_exrc_typ       :%c:", ptr_st_pstn_actn->c_exrc_typ );
  	fn_userlog ( c_ServiceName,"l_actn_typ       :%ld:", ptr_st_pstn_actn->l_actn_typ );
  	fn_userlog ( c_ServiceName,"c_trnsctn_flw    :%c:", ptr_st_pstn_actn->c_trnsctn_flw );
  	fn_userlog ( c_ServiceName,"l_orgnl_qty      :%ld:", ptr_st_pstn_actn->l_orgnl_qty );
  	fn_userlog ( c_ServiceName,"l_orgnl_rt       :%ld:", ptr_st_pstn_actn->l_orgnl_rt );
  	fn_userlog ( c_ServiceName,"l_new_qty        :%ld:", ptr_st_pstn_actn->l_new_qty );
  	fn_userlog ( c_ServiceName,"l_new_rt         :%ld:", ptr_st_pstn_actn->l_new_rt );
  	fn_userlog ( c_ServiceName,"l_exec_qty       :%ld:", ptr_st_pstn_actn->l_exec_qty );
  	fn_userlog ( c_ServiceName,"l_exec_rt        :%ld:", ptr_st_pstn_actn->l_exec_rt );
  	fn_userlog ( c_ServiceName,"l_fresh_qty      :%ld:", ptr_st_pstn_actn->l_fresh_qty );
  	fn_userlog ( c_ServiceName,"l_cover_qty      :%ld:", ptr_st_pstn_actn->l_cover_qty );
  	fn_userlog ( c_ServiceName,"d_add_mrgn_amt   :%lf:", ptr_st_pstn_actn->d_add_mrgn_amt );
  	fn_userlog ( c_ServiceName,"l_curr_rt        :%ld:", ptr_st_pstn_actn->l_curr_rt );
  	fn_userlog ( c_ServiceName,"c_ref_rmrks      :%s:", ptr_st_pstn_actn->c_ref_rmrks );
  	fn_userlog ( c_ServiceName,"c_cntrct_tag      :%c:", ptr_st_pstn_actn->c_cntrct_tag );
		fn_userlog ( c_ServiceName,"c_nkd_blkd_flg	:%c:", ptr_st_pstn_actn->c_nkd_blkd_flg);			/***	Ver 1.8	***/
	}


	if ( ( ptr_st_pstn_actn->l_actn_typ != ADD_MARGIN  ) &&
	     ( ptr_st_pstn_actn->l_actn_typ != INTRADAY_MTM_REPORT ) &&
			 ( ptr_st_pstn_actn->l_actn_typ != INTRADAY_MTM ) &&
			 ( ptr_st_pstn_actn->l_actn_typ != ADHOC_ADD_MRGN_RQST ) &&			/***	Ver 1.8	***/
       ( ptr_st_pstn_actn->l_actn_typ != CONV_TO_FUT ) &&
      ( ptr_st_pstn_actn->l_actn_typ != CONV_TO_PART_FUT ) )  /* Ver 1.5 Added for Conversion of Part Future Plus Positions t
o Future Positions*/
	{
		/******** Fetch the c_tag for the contract from contract master ******/

		/**** Commneted in Ver 3.8 **********
			
  	EXEC SQL
    	SELECT  FCM_FP_CNTRCT_TAG
			INTO		:c_cntrct_tag
			FROM		FCM_FO_CNTRCT_MSTR
    	WHERE 	FCM_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
    	AND   	FCM_PRDCT_TYP       = decode(:ptr_st_pstn_actn->c_prd_typ,'P','F',:ptr_st_pstn_actn->c_prd_typ)
    	AND   	FCM_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
    	AND   	FCM_EXPRY_DT        = to_date( :ptr_st_pstn_actn->c_expry_dt,
                                           	'dd-mon-yyyy' )
    	AND   	FCM_EXER_TYP        = :ptr_st_pstn_actn->c_exrc_typ;

		**** Ver 3.8 Comment Ends ****/
		
		/***Ver 3.8 Starts ***/	

		EXEC SQL
      SELECT  FTQ_FP_CNTRCT_TAG
      INTO    :c_cntrct_tag
      FROM    FTQ_FO_TRD_QT
      WHERE   FTQ_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
      AND     FTQ_PRDCT_TYP       = decode(:ptr_st_pstn_actn->c_prd_typ,'P','F',:ptr_st_pstn_actn->c_prd_typ)
      AND     FTQ_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
      AND     FTQ_EXPRY_DT        = to_date( :ptr_st_pstn_actn->c_expry_dt,
                                            'dd-mon-yyyy' )
      AND     FTQ_EXER_TYP        = :ptr_st_pstn_actn->c_exrc_typ;

    /*** Ver 3.8 Ends ***/	

  	if ( SQLCODE != 0 )
  	{
    	fn_errlog ( c_ServiceName, "S31010", SQLMSG, ptr_st_err_msg->c_err_msg );
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  	}

		ptr_st_pstn_actn->c_cntrct_tag = c_cntrct_tag;
  if( DEBUG_MSG_LVL_3 ) /*** Ver 4.3 ***/
  {
  	fn_userlog ( c_ServiceName,"Futureplus:c_cntrct_tag      :%c:", ptr_st_pstn_actn->c_cntrct_tag );
	}

	/**********************************************************************************************/
	/** Added in order to avoid spread benifit to FuturePlus Clients, this check must be removed **/
	/** if spread orders are to be allowed in Future																				  	 **/	
	/**********************************************************************************************/

	/*** Commented In Ver 3.8 *** 

	EXEC SQL
		SELECT count(*)
		INTO   :l_tag_cnt
		FROM   FCM_FO_CNTRCT_MSTR
		WHERE	 FCM_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
    AND    FCM_PRDCT_TYP       = decode(:ptr_st_pstn_actn->c_prd_typ,'P','F',:ptr_st_pstn_actn->c_prd_typ)
    AND    FCM_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
		AND    FCM_EXER_TYP        = :ptr_st_pstn_actn->c_exrc_typ
		AND    FCM_FP_CNTRCT_TAG	 = :ptr_st_pstn_actn->c_cntrct_tag;
	
		**** Ver 3.8 Comment Ends ***********/

		/*** Ver 3.8 Starts ***/

  EXEC SQL
    SELECT count(*)
    INTO   :l_tag_cnt
    FROM   FTQ_FO_TRD_QT
    WHERE  FTQ_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
    AND    FTQ_PRDCT_TYP       = decode(:ptr_st_pstn_actn->c_prd_typ,'P','F',:ptr_st_pstn_actn->c_prd_typ)
    AND    FTQ_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
    AND    FTQ_EXER_TYP        = :ptr_st_pstn_actn->c_exrc_typ
    AND    FTQ_FP_CNTRCT_TAG   = :ptr_st_pstn_actn->c_cntrct_tag;
    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31015", SQLMSG, ptr_st_err_msg->c_err_msg );
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }

    /**** Ver 3.8 Ends ***********/

    if( DEBUG_MSG_LVL_3) /** Ver 4.3 Debug lvl changed 0 to 1 **/
    {
     fn_userlog(c_ServiceName, " Count FTQ :%ld:",l_tag_cnt);     
    }
     

  	if ( l_tag_cnt > 1 )
  	{
			fn_userlog(c_ServiceName,"Spread is not allowed in FuturePlus");
    	fn_errlog ( c_ServiceName, "S31020", DEFMSG, ptr_st_err_msg->c_err_msg );
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  	}
			
	}

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog ( c_ServiceName, "Getting the current underlying position" );
	}

	/******** Get underlying level position for the Exchange, client, ********/
  /******** underlying, tag combination into UPOS_crrnt             ********/
	c_upos_avl = 'Y';

  EXEC SQL
    SELECT  FUP_CLM_MTCH_ACCNT,
						FUP_XCHNG_CD,
						FUP_PRDCT_TYP,
						FUP_INDSTK,
						FUP_UNDRLYNG,
						FUP_CNTRCT_TAG,
						FUP_UIBUY_QTY,
						FUP_UIBUY_VAL,
						FUP_UISELL_QTY,
						FUP_UISELL_VAL,
						FUP_UEXBUY_QTY,
						FUP_UEXBUY_VAL,
						FUP_UEXSELL_QTY,
						FUP_UEXSELL_VAL,
						FUP_UBUY_EXCTD_QTY,
						FUP_USELL_EXCTD_QTY,
						FUP_UOPNPSTN_FLW,
						FUP_UOPNPSTN_QTY,
						FUP_UOPNPSTN_VAL,
						FUP_UMTM_OPN_VAL,
						FUP_ADD_MRGN_VAL,
						FUP_UORDR_MRGN,
						FUP_UEXCTD_MRGN,
						FUP_USPREAD_MRGN,
						FUP_USPREAD_PNL,
						FUP_UTRD_MRGN,
						NVL(FUP_MTM_FLG,'O'),
						NVL(FUP_UMIN_TRD_MRGN,0)
		INTO		:st_undfut_pos_crrnt.c_cln_mtch_accnt,
            :st_undfut_pos_crrnt.c_xchng_cd,
            :st_undfut_pos_crrnt.c_prd_typ,
            :st_undfut_pos_crrnt.c_ctgry_indstk,
            :st_undfut_pos_crrnt.c_undrlyng,
            :st_undfut_pos_crrnt.c_cntrct_tag,
            :st_undfut_pos_crrnt.l_ibuy_qty,
            :st_undfut_pos_crrnt.d_ibuy_ord_vl,
            :st_undfut_pos_crrnt.l_isell_qty,
            :st_undfut_pos_crrnt.d_isell_ord_vl,
            :st_undfut_pos_crrnt.l_exbuy_qty,
            :st_undfut_pos_crrnt.d_exbuy_ord_vl,
            :st_undfut_pos_crrnt.l_exsell_qty,
            :st_undfut_pos_crrnt.d_exsell_ord_vl,
            :st_undfut_pos_crrnt.l_buy_exctd_qty,
            :st_undfut_pos_crrnt.l_sell_exctd_qty,
            :st_undfut_pos_crrnt.c_opnpstn_flw,
            :st_undfut_pos_crrnt.l_opnpstn_qty,
            :st_undfut_pos_crrnt.d_org_opn_val,
            :st_undfut_pos_crrnt.d_mtm_opn_val,
            :st_undfut_pos_crrnt.d_add_mrgn_val,
            :st_undfut_pos_crrnt.d_ordr_mrgn,
            :st_undfut_pos_crrnt.d_exctd_mrgn,
            :st_undfut_pos_crrnt.d_sprd_mrgn,
            :st_undfut_pos_crrnt.d_sprd_pl,
            :st_undfut_pos_crrnt.d_trd_mrgn,
						:c_mtm_flag,
            :st_undfut_pos_crrnt.d_mm_trd_mrgn
		FROM		FUP_FUT_UNDRLYNG_PSTN
    WHERE FUP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND   FUP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
    AND   FUP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
    AND   FUP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
    AND   FUP_CNTRCT_TAG      = :ptr_st_pstn_actn->c_cntrct_tag;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31025", SQLMSG, ptr_st_err_msg->c_err_msg );
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

	/**** If a position doesnot exists, initialise the position values to ****/
	/**** default                                                         ****/
  if ( SQLCODE == NO_DATA_FOUND )
  {
    strcpy( st_undfut_pos_crrnt.c_cln_mtch_accnt,
																	ptr_st_pstn_actn->c_cln_mtch_accnt );
    strcpy( st_undfut_pos_crrnt.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
    strcpy( st_undfut_pos_crrnt.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
    st_undfut_pos_crrnt.c_prd_typ  = ptr_st_pstn_actn->c_prd_typ;
    st_undfut_pos_crrnt.c_ctgry_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
    st_undfut_pos_crrnt.c_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;
    st_undfut_pos_crrnt.l_ibuy_qty = 0;
    st_undfut_pos_crrnt.d_ibuy_ord_vl = 0;
    st_undfut_pos_crrnt.l_isell_qty = 0;
    st_undfut_pos_crrnt.d_isell_ord_vl = 0;
    st_undfut_pos_crrnt.l_exbuy_qty = 0;
    st_undfut_pos_crrnt.d_exbuy_ord_vl = 0;
    st_undfut_pos_crrnt.l_exsell_qty = 0;
    st_undfut_pos_crrnt.d_exsell_ord_vl = 0;
    st_undfut_pos_crrnt.l_buy_exctd_qty = 0;
    st_undfut_pos_crrnt.l_sell_exctd_qty = 0;
    st_undfut_pos_crrnt.c_opnpstn_flw = 'N';
    st_undfut_pos_crrnt.l_opnpstn_qty = 0;
    st_undfut_pos_crrnt.d_org_opn_val = 0;
    st_undfut_pos_crrnt.d_mtm_opn_val = 0;
    st_undfut_pos_crrnt.d_add_mrgn_val = 0;
    st_undfut_pos_crrnt.l_opn_buyqty = 0;
    st_undfut_pos_crrnt.l_opn_sellqty = 0;
    st_undfut_pos_crrnt.d_ibuy_mrgn = 0;
    st_undfut_pos_crrnt.d_isell_mrgn = 0;
    st_undfut_pos_crrnt.d_exbuy_mrgn = 0;
    st_undfut_pos_crrnt.d_exsell_mrgn = 0;
    st_undfut_pos_crrnt.d_ordr_mrgn = 0;
    st_undfut_pos_crrnt.d_exctd_mrgn = 0;
    st_undfut_pos_crrnt.d_sprd_mrgn = 0;
    st_undfut_pos_crrnt.d_sprd_pl = 0;
    st_undfut_pos_crrnt.d_trd_mrgn = 0;
    st_undfut_pos_crrnt.c_oprn_typ = '*';
  	st_undfut_pos_crrnt.d_ordr_mrgn = 0;
  	st_undfut_pos_crrnt.d_imtm_opn_val = 0;
  	st_undfut_pos_crrnt.d_imtm_exctd_mrgn = 0;
  	st_undfut_pos_crrnt.d_imtm_sprd_mrgn = 0;
  	st_undfut_pos_crrnt.d_imtm_sprd_pl = 0;
  	st_undfut_pos_crrnt.d_imtm_trd_mrgn = 0;
  	st_undfut_pos_crrnt.d_mm_exctd_mrgn = 0;
  	st_undfut_pos_crrnt.d_mm_sprd_mrgn = 0;
  	st_undfut_pos_crrnt.d_mm_sprd_pl = 0;
  	st_undfut_pos_crrnt.d_mm_trd_mrgn = 0;
    c_mtm_flag = 'O';
		c_upos_avl = 'N';
	}

	if ( ( c_mtm_flag == UNDER_MTM )             									&&
			 ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) &&
			 ( ptr_st_pstn_actn->l_session_id != 0 )                   )
	{
    fn_errlog(c_ServiceName, "B28009", DEFMSG, ptr_st_err_msg->c_err_msg );
   	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}
	/******** Set UPOS_to_be fields to default ********/
  strcpy( st_undfut_pos_to_be.c_cln_mtch_accnt,
															ptr_st_pstn_actn->c_cln_mtch_accnt );
  strcpy( st_undfut_pos_to_be.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
  strcpy( st_undfut_pos_to_be.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
  st_undfut_pos_to_be.c_prd_typ  = ptr_st_pstn_actn->c_prd_typ;
  st_undfut_pos_to_be.c_ctgry_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
  st_undfut_pos_to_be.c_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;
  st_undfut_pos_to_be.l_ibuy_qty = 0;
  st_undfut_pos_to_be.d_ibuy_ord_vl = 0;
  st_undfut_pos_to_be.l_isell_qty = 0;
  st_undfut_pos_to_be.d_isell_ord_vl = 0;
  st_undfut_pos_to_be.l_exbuy_qty = 0;
  st_undfut_pos_to_be.d_exbuy_ord_vl = 0;
  st_undfut_pos_to_be.l_exsell_qty = 0;
  st_undfut_pos_to_be.d_exsell_ord_vl = 0;
  st_undfut_pos_to_be.l_buy_exctd_qty = 0;
  st_undfut_pos_to_be.l_sell_exctd_qty = 0;
  st_undfut_pos_to_be.c_opnpstn_flw = 'N';
  st_undfut_pos_to_be.l_opnpstn_qty = 0;
  st_undfut_pos_to_be.d_org_opn_val = 0;
  st_undfut_pos_to_be.d_mtm_opn_val = 0;
  st_undfut_pos_to_be.l_opn_buyqty = 0;
  st_undfut_pos_to_be.l_opn_sellqty = 0;
  st_undfut_pos_to_be.d_ibuy_mrgn = 0;
  st_undfut_pos_to_be.d_isell_mrgn = 0;
  st_undfut_pos_to_be.d_exbuy_mrgn = 0;
  st_undfut_pos_to_be.d_exsell_mrgn = 0;
  st_undfut_pos_to_be.d_add_mrgn_val = st_undfut_pos_crrnt.d_add_mrgn_val;
  st_undfut_pos_to_be.d_exctd_mrgn = st_undfut_pos_crrnt.d_exctd_mrgn;
  st_undfut_pos_to_be.d_sprd_mrgn = st_undfut_pos_crrnt.d_sprd_mrgn;
  st_undfut_pos_to_be.d_sprd_pl = st_undfut_pos_crrnt.d_sprd_pl;
  st_undfut_pos_to_be.d_trd_mrgn = st_undfut_pos_crrnt.d_trd_mrgn;
  st_undfut_pos_to_be.c_oprn_typ = '*';

  st_undfut_pos_to_be.d_mm_trd_mrgn = st_undfut_pos_crrnt.d_mm_trd_mrgn;

	if ( ptr_st_pstn_actn->l_actn_typ == ADD_MARGIN  ) 
	{
		/*since fn_upd_mrgn_fpl is not called , the order margin will not be computed, hence we have to retain the order 
			level margin */
  	st_undfut_pos_to_be.d_ordr_mrgn = st_undfut_pos_crrnt.d_ordr_mrgn;
	}
	else
	{
  	st_undfut_pos_to_be.d_ordr_mrgn = 0;
	}
  st_undfut_pos_to_be.d_imtm_opn_val = 0;
  st_undfut_pos_to_be.d_imtm_exctd_mrgn = 0;
  st_undfut_pos_to_be.d_imtm_sprd_mrgn = 0;
  st_undfut_pos_to_be.d_imtm_sprd_pl = 0;
  st_undfut_pos_to_be.d_imtm_trd_mrgn = 0;
  st_undfut_pos_to_be.d_mm_exctd_mrgn = 0;
  st_undfut_pos_to_be.d_mm_sprd_mrgn = 0;
  st_undfut_pos_to_be.d_mm_sprd_pl = 0;

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog ( c_ServiceName, "After getting the current underlying position" );
	}

	if ( ( ptr_st_pstn_actn->l_actn_typ != INTRADAY_MTM ) &&
	     ( ptr_st_pstn_actn->l_actn_typ != INTRADAY_MTM_REPORT ) &&
	     ( ptr_st_pstn_actn->l_actn_typ != ADHOC_ADD_MRGN_RQST ) &&				/***	Ver 1.8	***/
	     ( ptr_st_pstn_actn->l_actn_typ != ADD_MARGIN     )	&& 
       ( ptr_st_pstn_actn->l_actn_typ != CONV_TO_FUT ) &&
       ( ptr_st_pstn_actn->l_actn_typ != CONV_TO_PART_FUT ) ) /* Ver 1.5 Added for Conversion of Part Future Plus Positions t
o Futur e Positions*/
	{
    l_frs_qty = 0;
    l_cvr_qty = 0;

		if ( ptr_st_pstn_actn->l_actn_typ == ORS_TRD_CONF ) 
		{
					i_returncode 	= fn_cal_frscvr_qty ( c_ServiceName, 
																					ptr_st_pstn_actn, 
																					ptr_st_err_msg );

					if ( i_returncode != 0 )
					{
						tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
					}

	     l_frs_qty = ptr_st_pstn_actn->l_fresh_qty;
       l_cvr_qty = ptr_st_pstn_actn->l_cover_qty;

			if( DEBUG_MSG_LVL_3 )
			 {
				 fn_userlog(c_ServiceName,"The Fresh Qty is:%ld:",ptr_st_pstn_actn->l_fresh_qty);
  	   	 fn_userlog(c_ServiceName,"The Cover Qty is:%ld:",ptr_st_pstn_actn->l_cover_qty);
			 }
		}

		i_returncode 	= fn_call_actn_grp1_fpl ( c_ServiceName, 
                               			ptr_st_pstn_actn, 
											         			&st_undfut_pos_crrnt, 
											         			&st_undfut_pos_to_be, 
                               			ptr_st_err_msg );

 		if ( i_returncode != 0 )
 		{
      /* 2.9 Starts */
      if(i_returncode == INSUFFICIENT_LIMITS)
      {
        tpreturn ( TPFAIL, INSUFFICIENT_LIMITS, ( char * )ptr_st_err_msg, 0, 0 );
      }
      else
      {
      /* 2.9 Ends */
   		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      }/* 2.9 */
 		}

		if ( ptr_st_pstn_actn->l_actn_typ == ORS_TRD_CONF )
    {
       ptr_st_pstn_actn->l_fresh_qty = l_frs_qty;
       ptr_st_pstn_actn->l_cover_qty = l_cvr_qty;
    }
	}
	
	if ( ptr_st_pstn_actn->l_actn_typ == ADD_MARGIN )
	{
    memcpy ( &st_pstn_actn_tmp, ptr_st_pstn_actn ,sizeof( struct vw_pstn_actn) );   /** Ver 3.9 **/
    memcpy ( &st_undfut_pos_crrnt_tmp, &st_undfut_pos_crrnt,sizeof( struct vw_undfut_pos) ); /** Ver 3.9 **/
    memcpy ( &st_undfut_pos_to_be_tmp, &st_undfut_pos_to_be,sizeof( struct vw_undfut_pos) ); /** Ver 3.9 **/

		c_imtm_addmrgn_flg='N';  /** Ver 3.1 **/
		i_returncode 	= fn_call_actn_add_mrgn_fpl ( c_ServiceName, 
                               							ptr_st_pstn_actn, 
											         							&st_undfut_pos_crrnt, 
											         							&st_undfut_pos_to_be, 
                               							ptr_st_err_msg,
																						&c_imtm_addmrgn_flg );  /*** Ver 3.1 ***/ 

 		if ( i_returncode != 0 )
 		{
   		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
 		}

    /**** Ver 3.9 Starts here ****/

    i_returncode = tpsuspend ( &tranid, 0 );
    if ( i_returncode == -1 )
    {
       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }

    i_trnsctn = fn_begintran( c_ServiceName, ptr_st_err_msg->c_err_msg);
    if ( i_trnsctn == -1 )
    {
       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }

    st_pstn_actn_tmp.l_actn_typ = INTRADAY_MTM;

    i_returncode  = fn_cal_min_mrgn ( c_ServiceName,
                                        &st_pstn_actn_tmp,
                                        &st_undfut_pos_crrnt_tmp,
                                        &st_undfut_pos_to_be_tmp,
                                        ptr_st_err_msg,
                                        &c_imtm_addmrgn_flg );
    if ( i_returncode != 0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg);
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }

    i_trnsctn = fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg);
    if ( i_trnsctn == -1 )
    {
       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }
    st_undfut_pos_to_be.d_mm_trd_mrgn = st_undfut_pos_to_be_tmp.d_mm_trd_mrgn;
  	if( DEBUG_MSG_LVL_3 ) /*** Ver 4.3 ***/
  	{
      fn_userlog ( c_ServiceName, "Minimum Margin to be updated :%lf:",st_undfut_pos_to_be.d_mm_trd_mrgn);
		}

    i_returncode = tpresume(&tranid, 0);
    if ( i_returncode == -1 )
    {
       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }
    /**** ver 3.9 Ends here *****/
	}

	if ( ( ptr_st_pstn_actn->l_actn_typ == INTRADAY_MTM ) ||
	     ( ptr_st_pstn_actn->l_actn_typ == INTRADAY_MTM_REPORT ) ||
	     ( ptr_st_pstn_actn->l_actn_typ == ADHOC_ADD_MRGN_RQST ) )				/***	Ver 1.8	***/
	{
    ptr_st_pstn_actn->d_add_mrgn_amt = 0;
		c_imtm_addmrgn_flg ='N';  /*** Ver 3.1 ***/
		i_returncode 	= fn_call_actn_imtm_fpl ( c_ServiceName, 
                               					ptr_st_pstn_actn, 
											         					&st_undfut_pos_crrnt, 
											         					&st_undfut_pos_to_be, 
                               					ptr_st_err_msg,
																				&c_imtm_addmrgn_flg ); /** Ver 3.1 ***/ 

 		if ( i_returncode != 0 )
 		{
			switch ( i_returncode )
			{
				case INSUFFICIENT_LIMITS :
				if( DEBUG_MSG_LVL_3 ) {
  				fn_userlog(c_ServiceName,"STAGE I for INSUFF LMT -:%s:",ptr_st_pstn_actn->c_cln_mtch_accnt );
    			fn_userlog(c_ServiceName,"Limit :%lf: for :%s:",d_limit_MTM,ptr_st_pstn_actn->c_cln_mtch_accnt);
				}

				if(	ptr_st_pstn_actn->l_actn_typ == ADHOC_ADD_MRGN_RQST )     /***  Ver 1.8 ***/
				{
					fn_userlog(c_ServiceName,"Inside INSUFFICIENT_LIMITS For ADHOC_ADD_MRGN_RQST");
					tpfree ( ( char * ) ptr_st_err_msg );
          tpreturn ( TPFAIL, INSUFFICIENT_LIMITS, (char * )ptr_st_pstn_actn, 0, 0 );
				}
				else
				{
					l_exctd_opn_pstn_MTM = st_undfut_pos_to_be.l_opnpstn_qty ;
					EXEC SQL
						SELECT 	/***nvl(FMM_MIN_MRGN_PRCNT,0),***/			/*** Ver 1.3 ***/
										nvl(FMM_SPAN_MRGN_PRCNT,0),							/*** Ver 1.3 ***/
										nvl(FMM_THRSHD_MRGN_PRCNT,0),
										nvl(FMM_SOMC_PRCNT,0),
										nvl(FMM_SPREAD_MRGN,0),
										nvl(FMM_AVM_PRCNT,0)
						INTO   	:d_init_mrgn_prcnt_MTM,	/* 2.5 datatype of margin var change to double */
										:d_min_mrgn_prcnt_MTM,
										:d_somc_prcnt_MTM,
										:d_spread_mrgn_MTM,
										:d_avm_prcnt_MTM
						FROM   FMM_FO_MRGN_MSTR
						WHERE  FMM_PRDCT_TYP = 'F'
						AND    FMM_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
						AND		 FMM_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd			/*** Ver 2.3 ***/
						AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
                                          FROM    FCB_FO_CLN_BSKT_ALLTD
                                          WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                          FROM    CLM_CLNT_MSTR
                                          WHERE   CLM_MTCH_ACCNT =:ptr_st_pstn_actn->c_cln_mtch_accnt)) ; 
						if ( SQLCODE != 0 )
						{
							fn_userlog(c_ServiceName,"COULDN'T INSERT DATA INTO IMTM REPORT TABLE I");
							fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
						}

						d_nwb_amt_MTM = 0; /* Ver 2.2 */
            d_fdr_amt_MTM = 0; /* Ver 3.2 */

						EXEC SQL
							SELECT  FAB_BNK_ACCNT,
											FAB_ALCTD_AMT,
											FAB_BFT_AMT,
											FAB_PLG_AMT,
											nvl(FAB_NWB_AMT,0),     /* Ver 2.2 */
                      nvl(FAB_FDR_AMT,0)     /* Ver 3.2 */
							INTO    :c_bnk_accnt_MTM,
											:d_alctd_amt_MTM,
											:d_bft_amt_MTM,
											:d_plg_amt_MTM,
									    :d_nwb_amt_MTM,   /* Ver 2.2 */
                      :d_fdr_amt_MTM    /* Ver 3.2 */
							FROM    FAB_FO_ALC_BFT_SMRY
							WHERE   FAB_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt ;
							if ( SQLCODE != 0 )
							{
								fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
							}

						/******** Ver 2.2.********/
						d_eab_amt_MTM 					= 0;
						d_tot_shr_plgd_amt_MTM 	= 0;
						EXEC SQL
              SELECT  nvl(EAB_PLG_AMT,0) * 100 /* To be inserted in paise */
              INTO    :d_eab_amt_MTM
              FROM    EAB_EQ_ALC_BFT_SMRY
              WHERE   EAB_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

              if ( SQLCODE != 0 )
              {
                fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
              }

				/** Ver 4.6 starts **/

				d_cab_amt_MTM=0;
				d_cab_amt_mco_MTM=0;

				EXEC SQL
				SELECT nvl(CAB_PLG_AMT,0)*100
				INTO :d_cab_amt_MTM 
				FROM CAB_CDX_ALC_BFT_SMRY
				WHERE CAB_CLM_MTCH_ACCNT=:ptr_st_pstn_actn->c_cln_mtch_accnt;

		  	if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
				{
          fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
				}

        EXEC SQL
        SELECT nvl(CAB_PLG_AMT,0)
        INTO :d_cab_amt_mco_MTM
        FROM CAB_COD_ALC_BFT_SMRY
        WHERE CAB_CLM_MTCH_ACCNT=:ptr_st_pstn_actn->c_cln_mtch_accnt;

		  	if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
				{
          fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
				}

				/** Ver 4.6 ends **/

				/**		d_tot_shr_plgd_amt_MTM  = d_nwb_amt_MTM + d_plg_amt_MTM + d_eab_amt_MTM; commented in Ver 4.6 **/

				d_tot_shr_plgd_amt_MTM  = d_nwb_amt_MTM + d_plg_amt_MTM + d_eab_amt_MTM + d_cab_amt_MTM + d_cab_amt_mco_MTM; /** Ver 4.6 **/

						/***** End of Ver 2.2 ****/

							EXEC SQL
							SELECT  TO_CHAR(sysdate,'dd-Mon-yyyy hh24:mi:ss'),TO_CHAR(sysdate,'yyyymmdd')
							INTO    :c_time,
											:c_filetime
							FROM    DUAL ;
							if ( SQLCODE != 0 )
							{
								fn_userlog(c_ServiceName,"COULDN'T INSERT DATA INTO IMTM REPORT TABLE II");
								fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
							}

							sprintf(c_filename,"%s/%s/fno/imtm_futplc.txt",tuxgetenv("EBALOG_PATH"),c_filetime);

							/***Amts d_tot_shr_plgd_amt_MTM,d_plg_amt_MTM added in Ver 2.2*/
              /*** d_fdr_amt_MTM added in Ver 3.2 ***/

							sprintf(c_filedata,"%s|%s|%s|%s|%c|%ld|%s|%c|%c|%c|%s|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%ld|%ld|%lf|%lf|%lf",c_time,ptr_st_pstn_actn->c_cln_mtch_accnt,ptr_st_pstn_actn->c_xchng_cd,ptr_st_pstn_actn->c_undrlyng,ptr_st_pstn_actn->c_prd_typ,ptr_st_pstn_actn->l_strike_prc,c_expry_dt_MTM,ptr_st_pstn_actn->c_exrc_typ,ptr_st_pstn_actn->c_opt_typ,ptr_st_pstn_actn->c_cntrct_tag,c_bnk_accnt_MTM,d_limit_MTM,d_alctd_amt_MTM,d_bft_amt_MTM,d_init_mrgn_prcnt_MTM,d_min_mrgn_prcnt_MTM,d_somc_prcnt_MTM,d_spread_mrgn_MTM,d_ord_mrgn_MTM_b,d_trd_mrgn_MTM_b,d_spread_mrgn_MTM_b,d_ord_mrgn_MTM_a,d_trd_mrgn_MTM_a,d_spread_mrgn_MTM_a,d_add_mrgn_MTM,l_opnpstn_MTM,li_cmp_MTM,d_plg_amt_MTM,d_tot_shr_plgd_amt_MTM,d_fdr_amt_MTM); /*** 2.5 Margin var datatype chnage to double **/
							/***************************/
							/****Inserting into file ***/
							/***************************/
							/**** Commented in Ver 3.5 *****
							fp = (FILE *)fopen(c_filename,"a") ;
							if(fp == NULL)
							{
									fn_userlog(c_ServiceName,"UNABLE TO OPEN FILE FOR MTM");
							}
							fprintf(fp,"%s\n",c_filedata);
							fclose(fp);
              ****************************/
							/***************************/
							/****Completed Inserting ***/
							/***************************/
    				if( DEBUG_MSG_LVL_3 ) /*** Ver 4.3 ***/
    				{
							  fn_userlog(c_ServiceName,"FINAL LOG STARTS_____________________________");
								fn_userlog(c_ServiceName,"c_filetime             	|%s|",c_filetime);
								fn_userlog(c_ServiceName,"c_filename             	|%s|",c_filename);
								fn_userlog(c_ServiceName,"c_time             			|%s|",c_time);
								fn_userlog(c_ServiceName,"d_limit_MTM             |%lf|",d_limit_MTM);
								fn_userlog(c_ServiceName,"c_bnk_accnt_MTM         |%s|",c_bnk_accnt_MTM);
								fn_userlog(c_ServiceName,"d_alctd_amt_MTM         |%lf|",d_alctd_amt_MTM);
								fn_userlog(c_ServiceName,"d_bft_amt_MTM           |%lf|",d_bft_amt_MTM);
								fn_userlog(c_ServiceName,"d_init_mrgn_prcnt_MTM   |%lf|",d_init_mrgn_prcnt_MTM);
								fn_userlog(c_ServiceName,"d_min_mrgn_prcnt_MTM    |%lf|",d_min_mrgn_prcnt_MTM);
								fn_userlog(c_ServiceName,"d_somc_prcnt_MTM        |%lf|",d_somc_prcnt_MTM);
								fn_userlog(c_ServiceName,"d_spread_mrgn_MTM       |%lf|",d_spread_mrgn_MTM);
								fn_userlog(c_ServiceName,"d_avm_prcnt_MTM        |%lf|",d_avm_prcnt_MTM);
								fn_userlog(c_ServiceName,"d_ord_mrgn_MTM_b        |%lf|",d_ord_mrgn_MTM_b);
								fn_userlog(c_ServiceName,"d_trd_mrgn_MTM_b        |%lf|",d_trd_mrgn_MTM_b);
								fn_userlog(c_ServiceName,"d_spread_mrgn_MTM_b     |%lf|",d_spread_mrgn_MTM_b);
								fn_userlog(c_ServiceName,"d_ord_mrgn_MTM_a        |%lf|",d_ord_mrgn_MTM_a);
								fn_userlog(c_ServiceName,"d_trd_mrgn_MTM_a        |%lf|",d_trd_mrgn_MTM_a);
								fn_userlog(c_ServiceName,"d_spread_mrgn_MTM_a     |%lf|",d_spread_mrgn_MTM_a);
								fn_userlog( c_ServiceName,"d_add_mrgn_MTM         |:%lf:|", d_add_mrgn_MTM );
								fn_userlog( c_ServiceName, "Match Account |%s|", ptr_st_pstn_actn->c_cln_mtch_accnt );
								fn_userlog( c_ServiceName, "Exchange code |%s|", ptr_st_pstn_actn->c_xchng_cd );
								fn_userlog( c_ServiceName, "Product Type  |%c|", ptr_st_pstn_actn->c_prd_typ );
								fn_userlog( c_ServiceName, "Underlyng     |%s|", ptr_st_pstn_actn->c_undrlyng );
								fn_userlog( c_ServiceName, "Category      |%c|", ptr_st_pstn_actn->c_ctgry_indstk );
								fn_userlog( c_ServiceName, "Contract tag  |%c|", ptr_st_pstn_actn->c_cntrct_tag );
								fn_userlog( c_ServiceName, "IMTM Remarks  |%s|", ptr_st_pstn_actn->c_imtm_rmrks );
								fn_userlog( c_ServiceName, "Expiry Date   |%s|", ptr_st_pstn_actn->c_expry_dt );
								fn_userlog( c_ServiceName, "Exercise Type |%c|", ptr_st_pstn_actn->c_exrc_typ );
								fn_userlog( c_ServiceName, "Opt Type      |%c|", ptr_st_pstn_actn->c_opt_typ );
								fn_userlog( c_ServiceName, "Strike Price  |%ld|", ptr_st_pstn_actn->l_strike_prc );
								fn_userlog( c_ServiceName, "Plg amt       |%lf|", d_plg_amt_MTM );
								fn_userlog( c_ServiceName, "Tot Shares Pleged amt |%lf|", d_tot_shr_plgd_amt_MTM );/*Ver2.2*/
								fn_userlog( c_ServiceName, "FNO SAM allocation |%lf|", d_plg_amt_MTM );     /* Ver 2.2 */
                fn_userlog( c_ServiceName, "Tot FDR amt |%lf|", d_fdr_amt_MTM);/*Ver3.2*/
								fn_userlog(c_ServiceName,"FINAL LOG ENDS__________________________________");
							}

  				tpfree ( ( char * ) ptr_st_err_msg );

          /***STARAT OF VER 3.5 ***/
    		if( DEBUG_MSG_LVL_3 ) /*** Ver 4.3 ***/
    		{
          fn_userlog(c_ServiceName,"Error case shashi");
				}

          if( ptr_st_pstn_actn->l_actn_typ == INTRADAY_MTM )
          {
          sprintf(c_temp_str,"^%s^%lf^%lf^%lf^%lf^%lf^%lf^%lf^%ld^%ld^%lf",c_expry_dt_MTM,d_ord_mrgn_MTM_b,d_trd_mrgn_MTM_b,d_spread_mrgn_MTM_b,d_ord_mrgn_MTM_a,d_trd_mrgn_MTM_a,d_spread_mrgn_MTM_a,d_add_mrgn_MTM,l_opnpstn_MTM,li_cmp_MTM,d_limit_MTM);

          strcat(ptr_st_pstn_actn->c_imtm_rmrks,c_temp_str);
          tpreturn ( TPFAIL, -7, (char * )ptr_st_pstn_actn, 0, 0 );
          }
            else
            tpreturn ( TPFAIL, INSUFFICIENT_LIMITS, (char * )ptr_st_pstn_actn, 0, 0 );

          /***END OF VER 3.5 ***/
  				tpreturn ( TPFAIL, INSUFFICIENT_LIMITS, (char * )ptr_st_pstn_actn, 0, 0 );
				}
					break;
				default :
   				 tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
					 break;
			}
 		}
 		else if ( ( i_returncode == 0 )                     &&
	            ( ptr_st_pstn_actn->l_actn_typ == INTRADAY_MTM_REPORT ) )
 		{
  		tpfree ( ( char * ) ptr_st_err_msg );
  		tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_pstn_actn, 0, 0 );
		}
	}

/* Ver 1.5 Added for Conversion of Part Future Plus Positions to Future Position */
  if ( ptr_st_pstn_actn->l_actn_typ == CONV_TO_FUT || ptr_st_pstn_actn->l_actn_typ == CONV_TO_PART_FUT)
  {
		userlog("inside conv_to_part_fut");
    userlog("ptr_st_pstn_actn->l_actn_typ  [%d]",ptr_st_pstn_actn->l_actn_typ);
    userlog("ptr_st_pstn_actn->c_undrlyng  [%s]",ptr_st_pstn_actn->c_undrlyng);
    userlog("ptr_st_pstn_actn->l_orgnl_qty  [%ld]",ptr_st_pstn_actn->l_orgnl_qty);
    userlog("ptr_st_pstn_actn->l_orgnl_rt   [%ld]",ptr_st_pstn_actn->l_orgnl_rt);
    userlog("ptr_st_pstn_actn->l_new_qty  [%ld]",ptr_st_pstn_actn->l_new_qty);
    userlog("ptr_st_pstn_actn->l_new_rt  [%ld]",ptr_st_pstn_actn->l_new_rt);
    userlog("ptr_st_pstn_actn->l_fresh_qty  [%ld]",ptr_st_pstn_actn->l_fresh_qty);
    
		i_returncode  = fn_call_actn_conv_to_fut( c_ServiceName,
                                            ptr_st_pstn_actn,
                                            &st_undfut_pos_crrnt,
                                            &st_undfut_pos_to_be,
                                            ptr_st_err_msg );

    if ( i_returncode != 0 )
    {
			switch ( i_returncode )
		  {
        case INSUFFICIENT_LIMITS :
					tpreturn ( TPFAIL, INSUFFICIENT_LIMITS, ( char * )ptr_st_err_msg, 0, 0 );
					break;

				default :
   				 tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
					 break;
			}
    }
  }

	if( DEBUG_MSG_LVL_5 )		/*** Added in Ver 2.4 ***/
  {
    fn_userlog(c_ServiceName,"Additional Margin before update       |%lf|",st_undfut_pos_to_be.d_add_mrgn_val);
	}
	
	if ( st_undfut_pos_to_be.l_opnpstn_qty > 0 )
	{
		st_undfut_pos_to_be.c_opnpstn_flw = BUY;
	}
	else if ( st_undfut_pos_to_be.l_opnpstn_qty < 0 )
	{
		st_undfut_pos_to_be.c_opnpstn_flw = SELL;
	}
  else
  {
		st_undfut_pos_to_be.c_opnpstn_flw = NEUTRAL;
  }	

	/** Update the underlying level position on to the table **/
	if( c_upos_avl == 'N')
	{
    EXEC SQL
      /*** SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY') Commented In Ver 2.6 ***/
      /*** SELECT TO_CHAR(GREATEST(EXG_NXT_TRD_DT,EXG_TMP_TRD_DT),'DD-Mon-YYYY')** Ver 2.6 * Reverted In Ver 2.6 Bug Fix ***/
      SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY') /*** Reverted In Ver 2.6 Bug Fix ***/
      INTO   :c_trade_dt
      FROM   EXG_XCHNG_MSTR
      WHERE  EXG_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
      AND    EXG_MKT_TYP = 'D';

    if ( SQLCODE != 0 )
    {
       fn_errlog(c_ServiceName, "S31030", SQLMSG, ptr_st_err_msg->c_err_msg );
       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }

    /** ver 4.7 start **/

		fn_userlog(c_ServiceName," VER 4.7 -- JUST BEFORE UCC CODE FETCH BLOCK...");

   MEMSET(c_ucc_cd);
   EXEC SQL
   SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
   INTO :c_ucc_cd
   FROM  CLM_CLNT_MSTR
   WHERE CLM_MTCH_ACCNT =:ptr_st_pstn_actn->c_cln_mtch_accnt;

   if ( SQLCODE != 0 )
    {
       fn_errlog(c_ServiceName, "S31035", SQLMSG, ptr_st_err_msg->c_err_msg );
       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }
   rtrim(c_ucc_cd);
   if(DEBUG_MSG_LVL_3)
          fn_userlog(c_ServiceName," VER 4.7 -- Match ID :%s: have UCC code :%s:", ptr_st_pstn_actn->c_cln_mtch_accnt, c_ucc_cd);
 
   /** ver 4.7 ends **/
  
    EXEC SQL
      INSERT INTO FUP_FUT_UNDRLYNG_PSTN
      (
    		FUP_CLM_MTCH_ACCNT,
				FUP_XCHNG_CD,
				FUP_PRDCT_TYP,
				FUP_INDSTK,
				FUP_UNDRLYNG,
				FUP_CNTRCT_TAG,
				FUP_UIBUY_QTY,
				FUP_UIBUY_VAL,
				FUP_UISELL_QTY,
				FUP_UISELL_VAL,
				FUP_UEXBUY_QTY,
				FUP_UEXBUY_VAL,
				FUP_UEXSELL_QTY,
				FUP_UEXSELL_VAL,
				FUP_UBUY_EXCTD_QTY,
				FUP_USELL_EXCTD_QTY,
				FUP_UOPNPSTN_FLW,
				FUP_UOPNPSTN_QTY,
				FUP_UOPNPSTN_VAL,
				FUP_UMTM_OPN_VAL,
				FUP_UORDR_MRGN,
				FUP_UEXCTD_MRGN,
				FUP_USPREAD_MRGN,
				FUP_USPREAD_PNL,
				FUP_ADD_MRGN_VAL,
				FUP_UTRD_MRGN,
        FUP_TRD_DT,
				FUP_UMIN_TRD_MRGN,
        FUP_UCC_CD         /**ver 4.7**/
			)
      VALUES
      (
				:st_undfut_pos_to_be.c_cln_mtch_accnt,
        :st_undfut_pos_to_be.c_xchng_cd,
        :st_undfut_pos_to_be.c_prd_typ,
        :st_undfut_pos_to_be.c_ctgry_indstk,
        :st_undfut_pos_to_be.c_undrlyng,
        :st_undfut_pos_to_be.c_cntrct_tag,
        :st_undfut_pos_to_be.l_ibuy_qty,
        :st_undfut_pos_to_be.d_ibuy_ord_vl,
        :st_undfut_pos_to_be.l_isell_qty,
        :st_undfut_pos_to_be.d_isell_ord_vl,
        :st_undfut_pos_to_be.l_exbuy_qty,
        :st_undfut_pos_to_be.d_exbuy_ord_vl,
        :st_undfut_pos_to_be.l_exsell_qty,
        :st_undfut_pos_to_be.d_exsell_ord_vl,
        :st_undfut_pos_to_be.l_buy_exctd_qty,
        :st_undfut_pos_to_be.l_sell_exctd_qty,
        :st_undfut_pos_to_be.c_opnpstn_flw,
        :st_undfut_pos_to_be.l_opnpstn_qty,
        :st_undfut_pos_to_be.d_org_opn_val,
        :st_undfut_pos_to_be.d_mtm_opn_val,
        :st_undfut_pos_to_be.d_ordr_mrgn,
        :st_undfut_pos_to_be.d_exctd_mrgn,
        :st_undfut_pos_to_be.d_sprd_mrgn,
        :st_undfut_pos_to_be.d_sprd_pl,
        :st_undfut_pos_to_be.d_add_mrgn_val,
        :st_undfut_pos_to_be.d_trd_mrgn,
        :c_trade_dt,
        :st_undfut_pos_to_be.d_mm_trd_mrgn,
        :c_ucc_cd           /**ver 4.7 **/
			);

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31040", SQLMSG, ptr_st_err_msg->c_err_msg );
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      }
	}
	else
	{
    /*** Ver 3.7 Starts ***/

    EXEC SQL
      SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY')
      INTO   :c_trade_dt
      FROM   EXG_XCHNG_MSTR
      WHERE  EXG_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
      AND    EXG_MKT_TYP = 'D';

    if ( SQLCODE != 0 )
    {
       fn_errlog(c_ServiceName, "S31045", SQLMSG, ptr_st_err_msg->c_err_msg );
       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }

    /*** Ver 3.7 Ends ***/

    EXEC SQL
      UPDATE  FUP_FUT_UNDRLYNG_PSTN
			SET			FUP_UIBUY_QTY       = :st_undfut_pos_to_be.l_ibuy_qty,
							FUP_UIBUY_VAL       = :st_undfut_pos_to_be.d_ibuy_ord_vl,
							FUP_UISELL_QTY      = :st_undfut_pos_to_be.l_isell_qty,
							FUP_UISELL_VAL      = :st_undfut_pos_to_be.d_isell_ord_vl,
							FUP_UEXBUY_QTY      = :st_undfut_pos_to_be.l_exbuy_qty,
							FUP_UEXBUY_VAL      = :st_undfut_pos_to_be.d_exbuy_ord_vl,
							FUP_UEXSELL_QTY     = :st_undfut_pos_to_be.l_exsell_qty,
							FUP_UEXSELL_VAL     = :st_undfut_pos_to_be.d_exsell_ord_vl,
							FUP_UBUY_EXCTD_QTY  = :st_undfut_pos_to_be.l_buy_exctd_qty,
							FUP_USELL_EXCTD_QTY = :st_undfut_pos_to_be.l_sell_exctd_qty,
							FUP_UOPNPSTN_FLW    = :st_undfut_pos_to_be.c_opnpstn_flw,
							FUP_UOPNPSTN_QTY    = :st_undfut_pos_to_be.l_opnpstn_qty,
							FUP_UOPNPSTN_VAL    = :st_undfut_pos_to_be.d_org_opn_val,
							FUP_UMTM_OPN_VAL    = :st_undfut_pos_to_be.d_mtm_opn_val,
							FUP_UORDR_MRGN      = :st_undfut_pos_to_be.d_ordr_mrgn,
							FUP_UEXCTD_MRGN     = :st_undfut_pos_to_be.d_exctd_mrgn,
							FUP_USPREAD_MRGN    = :st_undfut_pos_to_be.d_sprd_mrgn,
							FUP_USPREAD_PNL     = :st_undfut_pos_to_be.d_sprd_pl,
							FUP_ADD_MRGN_VAL    = :st_undfut_pos_to_be.d_add_mrgn_val,
							FUP_UTRD_MRGN    		= :st_undfut_pos_to_be.d_trd_mrgn,
							FUP_UMIN_TRD_MRGN		= :st_undfut_pos_to_be.d_mm_trd_mrgn, 
    	        FUP_TRD_DT          = :c_trade_dt                           /*** Ver 3.7 ***/
      WHERE 	FUP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
    	AND   	FUP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
    	AND   	FUP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
    	AND   	FUP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
    	AND   	FUP_CNTRCT_TAG      = :ptr_st_pstn_actn->c_cntrct_tag;

   	if ( SQLCODE != 0 )
   	{
     	fn_errlog(c_ServiceName, "S31050", SQLMSG, ptr_st_err_msg->c_err_msg );
     	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
   	}

		/** Ver 3.1  Starts **/

  	if((ptr_st_pstn_actn->l_actn_typ == ORS_TRD_CONF ||
        ptr_st_pstn_actn->l_actn_typ == INTRADAY_MTM || 
				ptr_st_pstn_actn->l_actn_typ == ADD_MARGIN   || 
				c_imtm_addmrgn_flg           == 'Y'          ||
				ptr_st_pstn_actn->l_actn_typ == CONV_TO_FUT	 || 
        ptr_st_pstn_actn->l_actn_typ == CONV_TO_PART_FUT ||
				ptr_st_pstn_actn->l_actn_typ == CLOSE_PART_FUTPLUS) 
			  && st_undfut_pos_to_be.l_opnpstn_qty != 0
        && c_mtm_flag != UNDER_MTM )
  	{
      if( DEBUG_MSG_LVL_3 ) /*** Ver 4.3 ***/
      {
			  fn_userlog(c_ServiceName," Inside Condition ");
		  }

     i_returncode =  fn_calc_trgprc_on_chngmrgn(c_ServiceName,
                                                ptr_st_pstn_actn,
                                                ptr_st_err_msg);
      if ( i_returncode != 0 )
      {
        fn_errlog(c_ServiceName, "S31055", LIBMSG, ptr_st_err_msg->c_err_msg );
        fn_userlog(c_ServiceName,"Pls check, Error in calcualting Auto MTM Trigger Price");
      }

  	}
  	/** Ver 3.1 Ends **/
	}

   ptr_st_pstn_actn->c_mtm_flag = 'O'; /* default */

	if ( ( c_mtm_flag == UNDER_MTM ) &&				
			 ( st_undfut_pos_to_be.l_ibuy_qty == 0 )   &&
			 ( st_undfut_pos_to_be.l_exbuy_qty == 0 )  &&
			 ( st_undfut_pos_to_be.l_isell_qty == 0 )  &&
			 ( st_undfut_pos_to_be.l_exsell_qty == 0 ) )
	{
		ptr_st_pstn_actn->c_mtm_flag = NO_OPEN_ORDERS;
	}
	else if ( c_mtm_flag == UNDER_MTM )
	{
		ptr_st_pstn_actn->c_mtm_flag = FOR_REMARKS_ENTRY;
	}
	if( DEBUG_MSG_LVL_3 )
  {	
		fn_userlog(c_ServiceName,"FINAL LOG ENDS_____________________________");
	}

  tpfree ( ( char * ) ptr_st_err_msg );
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_pstn_actn, 0, 0 );
}

/** Applies an action on an existing position **/
int 	fn_apply_cnt_actn_fpl ( 	char *c_ServiceName,
													struct vw_pstn_actn *ptr_st_pstn_actn,
												 	struct vw_cntfut_pos *ptr_st_cntfut_pos,
                  				struct vw_err_msg *ptr_st_err_msg)
{
	long int li_temp_qty;
	long int li_tmp_opnqty;
	long int li_flg_tmp_qty;
	long int li_temp_opn_qty; /* Ver1.5 */

  int i_returncode;
  int i_ip_len;
  int i_op_len;
	double 	 d_amv_rlsd;

  struct vw_contract st_cntrct;
  struct vw_cntrct_qt st_cntrct_qt;

  switch ( ptr_st_pstn_actn->l_actn_typ )
  {
    case  SYSTEM_PLACE_ORDER:
    case  JOINT_SQUARE_OFF_ORDER: 	/* Case maintained  as provision in future for spread */
    case  ORS_NEW_ORD_REQ:
					/** Increase the IWTL position by the order qty and order rate **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
						fn_add_pos( ptr_st_pstn_actn->l_new_qty,
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_ibuy_qty),
												&(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );
					}
					else
					{
						fn_add_pos( ( ptr_st_pstn_actn->l_new_qty * (-1) ),
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_isell_qty),
												&(ptr_st_cntfut_pos->d_isell_ord_vl ) );
					}
					break;

    case  ORS_NEW_ORD_ACPT:
					/** Increase the EXCH position by the order qty and order rate **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
						fn_add_pos( ptr_st_pstn_actn->l_new_qty,
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_exbuy_qty),
												&(ptr_st_cntfut_pos->d_exbuy_ord_vl ) );
					}
					else
					{
						fn_add_pos( ( ptr_st_pstn_actn->l_new_qty * (-1) ),
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_exsell_qty),
												&(ptr_st_cntfut_pos->d_exsell_ord_vl ) );
					}
					break;

    case  ORS_NEW_ORD_RJCT:
					/** Decrease the IWTL position by the order qty and order rate **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
						fn_del_pos( ptr_st_pstn_actn->l_new_qty,
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_ibuy_qty),
												&(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );
					}
					else
					{
						fn_del_pos( ( ptr_st_pstn_actn->l_new_qty * (-1) ),
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_isell_qty),
												&(ptr_st_cntfut_pos->d_isell_ord_vl ) );
					}
					break;

    case  ORS_MOD_ORD_REQ:
					/** Decrease the IWTL position by the unexecuted order qty and **/
          /** order rate. Increase the IWTL position by the unexecuted   **/
					/** new qty and new rate                                       **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
						fn_del_pos( ptr_st_pstn_actn->l_orgnl_qty - 
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_ibuy_qty),
												&(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );

						fn_add_pos( ptr_st_pstn_actn->l_new_qty -
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_ibuy_qty),
												&(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );
					}
					else
					{
						fn_del_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_isell_qty),
												&(ptr_st_cntfut_pos->d_isell_ord_vl ) );

						fn_add_pos( ( ( ptr_st_pstn_actn->l_new_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_isell_qty),
												&(ptr_st_cntfut_pos->d_isell_ord_vl ) );
					}
					break;

    case  ORS_MOD_ORD_ACPT:
					/** Decrease the EXCH position by the unexecuted order qty and **/
          /** order rate. Increase the EXCH position by the unexecuted   **/
					/** new qty and new rate                                       **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
						fn_del_pos( ptr_st_pstn_actn->l_orgnl_qty - 
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_exbuy_qty),
												&(ptr_st_cntfut_pos->d_exbuy_ord_vl ) );

						fn_add_pos( ptr_st_pstn_actn->l_new_qty -
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_exbuy_qty),
												&(ptr_st_cntfut_pos->d_exbuy_ord_vl ) );
					}
					else
					{
						fn_del_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_exsell_qty),
												&(ptr_st_cntfut_pos->d_exsell_ord_vl ) );

						fn_add_pos( ( ( ptr_st_pstn_actn->l_new_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_exsell_qty),
												&(ptr_st_cntfut_pos->d_exsell_ord_vl ) );
					}
					break;

    case  ORS_MOD_ORD_RJCT:
					/** Decrease the IWTL position by the unexecuted new qty and **/
          /** new rate. Increase the IWTL position by the unexecuted   **/
					/** order qty and order rate                                 **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
						fn_del_pos( ptr_st_pstn_actn->l_new_qty - 
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_ibuy_qty),
												&(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );

						fn_add_pos( ptr_st_pstn_actn->l_orgnl_qty -
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_ibuy_qty),
												&(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );
					}
					else
					{
						fn_del_pos( ( ( ptr_st_pstn_actn->l_new_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_new_rt,
												&(ptr_st_cntfut_pos->l_isell_qty),
												&(ptr_st_cntfut_pos->d_isell_ord_vl ) );

						fn_add_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_isell_qty),
												&(ptr_st_cntfut_pos->d_isell_ord_vl ) );
					}
					break;

    case  ORS_CAN_ORD_REQ:
					/** Decrease the IWTL position by the unexecuted order qty  **/
					/** and order rate                                          **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )	
          {
						fn_del_pos( ptr_st_pstn_actn->l_orgnl_qty - 
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_ibuy_qty),
												&(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );
					}
					else
					{
						fn_del_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_isell_qty),
												&(ptr_st_cntfut_pos->d_isell_ord_vl ) );
					}
					break;

    case  ORS_CAN_ORD_ACPT:
					/** Decrease the EXCH position by the unexecuted order qty  **/
					/** and order rate                                          **/
					if( DEBUG_MSG_LVL_3 )
  				{
						fn_userlog(c_ServiceName,"Inside ORS_CAN_ORD_ACPT ");			/* Ver 1.4 */
						fn_userlog(c_ServiceName,"Original Qty Is :%ld:",ptr_st_pstn_actn->l_orgnl_qty);			/* Ver 1.4 */
						fn_userlog(c_ServiceName,"Executed Qty Is :%ld:",ptr_st_pstn_actn->l_exec_qty);				/* Ver 1.4 */
					}

          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
						fn_del_pos( ptr_st_pstn_actn->l_orgnl_qty - 
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_exbuy_qty),
												&(ptr_st_cntfut_pos->d_exbuy_ord_vl ) );

						/***  Ver 1.4 Starts  ***/
						/** if(ptr_st_cntfut_pos->l_ibuy_qty != ptr_st_cntfut_pos->l_exbuy_qty) commented in ver 4.5 **/
            if( ptr_st_pstn_actn->l_new_qty > 0 ) /** ver 4.5 **/
						{
						 if( DEBUG_MSG_LVL_3 )
  					 {
								fn_userlog(c_ServiceName,"Before IWTL QTY IS :%ld:",ptr_st_cntfut_pos->l_ibuy_qty);
								fn_userlog(c_ServiceName,"Before EXCHNG QTY IS :%ld:", ptr_st_cntfut_pos->l_exbuy_qty);
								fn_userlog(c_ServiceName,"Here Executed QTY IS :%ld:",ptr_st_pstn_actn->l_new_qty);
						 }

              /*** ver 4.5 starts ***/
              if( DEBUG_MSG_LVL_0 )
              {
                 fn_userlog(c_ServiceName,"PosiTion MisMatch 1: iBuy Quantity before adding the unprocessed executed quantity is :%ld: and total unprocessed executed quantity is :%ld:",ptr_st_cntfut_pos->l_ibuy_qty,ptr_st_pstn_actn->l_new_qty);
             }
              /*** ver 4.5 ends ***/

							fn_add_pos(ptr_st_pstn_actn->l_new_qty,
												 ptr_st_pstn_actn->l_orgnl_rt,
												 &(ptr_st_cntfut_pos->l_ibuy_qty),
												 &(ptr_st_cntfut_pos->d_ibuy_ord_vl ) ); 

              /*** ver 4.5 starts ***/
              if( DEBUG_MSG_LVL_0 )
              {
                  fn_userlog(c_ServiceName,"PosiTion MisMatch 2: Corrected iBuy qty l_ibuy_qty is :%ld: and Corrected exBuy qty l_exbuy_qty :%ld:",ptr_st_cntfut_pos->l_ibuy_qty,ptr_st_cntfut_pos->l_exbuy_qty );
              }
              /*** ver 4.5 ends ***/
               
							if( DEBUG_MSG_LVL_3 )
  						{	
								fn_userlog(c_ServiceName,"After IWTL QTY IS :%ld:",ptr_st_cntfut_pos->l_ibuy_qty);
								fn_userlog(c_ServiceName,"After EXCHNG QTY IS :%ld:", ptr_st_cntfut_pos->l_exbuy_qty);	
							}
						}
						/***  Ver 1.4 Ends  ***/
					}
					else
					{
						fn_del_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_exsell_qty),
												&(ptr_st_cntfut_pos->d_exsell_ord_vl ) );

						/***  Ver 1.4 Starts  ***/
						/** if(ptr_st_cntfut_pos->l_isell_qty != ptr_st_cntfut_pos->l_exsell_qty) commented in ver 4.5 **/
            if( ptr_st_pstn_actn->l_new_qty > 0 ) /** ver 4.5 ***/
						{
						  if( DEBUG_MSG_LVL_3 )
  						{
								fn_userlog(c_ServiceName,"Before IWTL QTY IS :%ld:",ptr_st_cntfut_pos->l_isell_qty);
 								fn_userlog(c_ServiceName,"Before EXCHNG QTY IS :%ld:",ptr_st_cntfut_pos->l_exsell_qty);
 								fn_userlog(c_ServiceName,"Here Executed QTY IS :%ld:",ptr_st_pstn_actn->l_new_qty);
							}
              /*** ver 4.5 starts ***/
              if( DEBUG_MSG_LVL_0)
              {
                 fn_userlog(c_ServiceName,"PosiTion MisMatch a: iSell Quantity before adding the unprocessed executed quantity is :%ld: and total unprocessed executed quantity is :%ld:",ptr_st_cntfut_pos->l_isell_qty,ptr_st_pstn_actn->l_new_qty);
              }
              /*** ver 4.5 ends ***/
							fn_add_pos(ptr_st_pstn_actn->l_new_qty * (-1),
												 ptr_st_pstn_actn->l_orgnl_rt,
 												 &(ptr_st_cntfut_pos->l_isell_qty),
 												 &(ptr_st_cntfut_pos->d_isell_ord_vl ) ); 

              /*** ver 4.5 starts ***/
              if( DEBUG_MSG_LVL_0)
              {
                fn_userlog(c_ServiceName,"PosiTion MisMatch b: Corrected iSell Qty l_isell_qty is :%ld: and Corrected exSell Qty l_exsell_qty is :%ld:",ptr_st_cntfut_pos->l_isell_qty,ptr_st_cntfut_pos->l_exsell_qty);
              }
              /*** ver 4.5 ends ***/

							if( DEBUG_MSG_LVL_3 )
  						{
								fn_userlog(c_ServiceName,"After IWTL QTY IS :%ld:",ptr_st_cntfut_pos->l_isell_qty);
								fn_userlog(c_ServiceName,"After EXCHNG QTY IS :%ld:",ptr_st_cntfut_pos->l_exsell_qty);
							}

						}
						/***  Ver 1.4 Ends  ***/

					}
					break;

    case  ORS_CAN_ORD_RJCT:
					/** Increase the IWTL position by the unexecuted order qty  **/
					/** and order rate                                          **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
						fn_add_pos( ptr_st_pstn_actn->l_orgnl_qty - 
												ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_ibuy_qty),
												&(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );
					}
					else
					{
						fn_add_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty - 
										      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_isell_qty),
												&(ptr_st_cntfut_pos->d_isell_ord_vl ) );
					}
					break;

    case  ORS_TRD_CONF:
					/** Decrease the IWTL, EXCH position by the executed qty **/
					/** order rate. Increase the OPEN position by the        **/
					/** executed qty and executed rate. Calculate the fresh  **/
					/** and cover quantity in the transaction. Increase the  **/
					/** MTMed position too by the executed quantity and      **/
					/** executed rate. Update the buy executed and sell      **/
					/** executed quantity                                    **/
          if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {

						fn_del_pos( ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_ibuy_qty),
												&(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );

						fn_del_pos( ptr_st_pstn_actn->l_exec_qty,
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_exbuy_qty),
												&(ptr_st_cntfut_pos->d_exbuy_ord_vl ) );

						if( ptr_st_cntfut_pos->l_opnpstn_qty > 0 )
						{
							ptr_st_pstn_actn->l_fresh_qty = ptr_st_pstn_actn->l_exec_qty;
							ptr_st_pstn_actn->l_cover_qty = 0;
						}
						else
						{
							ptr_st_pstn_actn->l_cover_qty = 
												fn_minl(ptr_st_pstn_actn->l_exec_qty,
															  labs(ptr_st_cntfut_pos->l_opnpstn_qty) );

							ptr_st_pstn_actn->l_fresh_qty = 
												fn_maxl(ptr_st_pstn_actn->l_exec_qty - 
															  ptr_st_pstn_actn->l_cover_qty,
																0 );
						}

						if ( ptr_st_pstn_actn->l_cover_qty > 0 )
						{
							li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

							fn_add_pos_in_val( 	ptr_st_pstn_actn->l_cover_qty,
                          			 	ptr_st_cntfut_pos->d_org_opn_val,
																	li_temp_qty,
																	&(ptr_st_cntfut_pos->l_opnpstn_qty),
																	&(ptr_st_cntfut_pos->d_org_opn_val ) );

							fn_add_pos_in_val( 	ptr_st_pstn_actn->l_cover_qty,
                          				ptr_st_cntfut_pos->d_mtm_opn_val,
																	li_temp_qty,
																	&li_temp_qty,
																	&(ptr_st_cntfut_pos->d_mtm_opn_val ) );
						}

						if ( ptr_st_pstn_actn->l_fresh_qty > 0 )
						{
							li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

							fn_add_pos( ptr_st_pstn_actn->l_fresh_qty,
													ptr_st_pstn_actn->l_exec_rt,
													&(ptr_st_cntfut_pos->l_opnpstn_qty),
													&(ptr_st_cntfut_pos->d_org_opn_val ) );

							fn_add_pos( ptr_st_pstn_actn->l_fresh_qty,
													ptr_st_pstn_actn->l_exec_rt,
													&li_temp_qty,
													&(ptr_st_cntfut_pos->d_mtm_opn_val ) );
						}

						ptr_st_cntfut_pos->l_buy_exctd_qty = 
																			ptr_st_cntfut_pos->l_buy_exctd_qty + 
																			ptr_st_pstn_actn->l_exec_qty;
					}
					else
					{

						fn_del_pos( ptr_st_pstn_actn->l_exec_qty * (-1),
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_isell_qty),
												&(ptr_st_cntfut_pos->d_isell_ord_vl ) );

						fn_del_pos( ptr_st_pstn_actn->l_exec_qty * (-1),
												ptr_st_pstn_actn->l_orgnl_rt,
												&(ptr_st_cntfut_pos->l_exsell_qty),
												&(ptr_st_cntfut_pos->d_exsell_ord_vl ) );

						if ( ptr_st_cntfut_pos->l_opnpstn_qty < 0 )
						{
							ptr_st_pstn_actn->l_fresh_qty = ptr_st_pstn_actn->l_exec_qty;
							ptr_st_pstn_actn->l_cover_qty = 0;
						}
						else
						{
							ptr_st_pstn_actn->l_cover_qty = 
												fn_minl(ptr_st_pstn_actn->l_exec_qty,
															  ptr_st_cntfut_pos->l_opnpstn_qty );

							ptr_st_pstn_actn->l_fresh_qty = 
												fn_maxl(ptr_st_pstn_actn->l_exec_qty - 
															  ptr_st_pstn_actn->l_cover_qty,
																0 );
						}

						if ( ptr_st_pstn_actn->l_cover_qty > 0 )
						{
							li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

							fn_add_pos_in_val( 	ptr_st_pstn_actn->l_cover_qty * ( -1 ),
                          				ptr_st_cntfut_pos->d_org_opn_val,
																	li_temp_qty,
																	&(ptr_st_cntfut_pos->l_opnpstn_qty),
																	&(ptr_st_cntfut_pos->d_org_opn_val ) );

							fn_add_pos_in_val( 	ptr_st_pstn_actn->l_cover_qty * ( -1 ),
                          				ptr_st_cntfut_pos->d_mtm_opn_val,
																	li_temp_qty,
																	&li_temp_qty,
																	&(ptr_st_cntfut_pos->d_mtm_opn_val ) );
						}

						if ( ptr_st_pstn_actn->l_fresh_qty > 0 )
						{
							li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

							fn_add_pos( ptr_st_pstn_actn->l_fresh_qty * (-1),
													ptr_st_pstn_actn->l_exec_rt,
													&(ptr_st_cntfut_pos->l_opnpstn_qty),
													&(ptr_st_cntfut_pos->d_org_opn_val ) );

							fn_add_pos( ptr_st_pstn_actn->l_fresh_qty * (-1),
													ptr_st_pstn_actn->l_exec_rt,
													&li_temp_qty,
													&(ptr_st_cntfut_pos->d_mtm_opn_val ) );
						}

						ptr_st_cntfut_pos->l_sell_exctd_qty = 
																		ptr_st_cntfut_pos->l_sell_exctd_qty + 
																		(ptr_st_pstn_actn->l_exec_qty *(-1));
					}
					break;

		/********************* Ver 1.2 Starts  ************************/

		case  ORS_ORD_EXP:
      /** Decrease the IWTL,EXCH position by the unexecuted order qty  **/
      /** and order rate                                               **/
      if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
      {
        fn_del_pos( ptr_st_pstn_actn->l_orgnl_qty -
                    ptr_st_pstn_actn->l_exec_qty,
                    ptr_st_pstn_actn->l_orgnl_rt,
                    &(ptr_st_cntfut_pos->l_ibuy_qty),
                    &(ptr_st_cntfut_pos->d_ibuy_ord_vl ) );

        fn_del_pos( ptr_st_pstn_actn->l_orgnl_qty -
                    ptr_st_pstn_actn->l_exec_qty,
                    ptr_st_pstn_actn->l_orgnl_rt,
                    &(ptr_st_cntfut_pos->l_exbuy_qty),
                    &(ptr_st_cntfut_pos->d_exbuy_ord_vl ) );
      }
      else
      {
        fn_del_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty -
                      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
                    ptr_st_pstn_actn->l_orgnl_rt,
                    &(ptr_st_cntfut_pos->l_isell_qty),
                    &(ptr_st_cntfut_pos->d_isell_ord_vl ) );

        fn_del_pos( ( ( ptr_st_pstn_actn->l_orgnl_qty -
                      ptr_st_pstn_actn->l_exec_qty) * (-1) ),
                    ptr_st_pstn_actn->l_orgnl_rt,
                    &(ptr_st_cntfut_pos->l_exsell_qty),
                    &(ptr_st_cntfut_pos->d_exsell_ord_vl ) );

      }
      break;

		/************************ Ver 1.2 Ends *********************************/
    case  INTRADAY_MTM:
    case  INTRADAY_MTM_REPORT:
		case	ADHOC_ADD_MRGN_RQST:			/***	Ver 1.8	***/

  					strcpy( st_cntrct.c_xchng_cd, ptr_st_cntfut_pos->c_xchng_cd );
  					st_cntrct.c_prd_typ = ptr_st_cntfut_pos->c_prd_typ;
  					strcpy( st_cntrct.c_undrlyng, ptr_st_cntfut_pos->c_undrlyng );
  					strcpy( st_cntrct.c_expry_dt, ptr_st_cntfut_pos->c_expry_dt );
  					st_cntrct.c_exrc_typ =  ptr_st_cntfut_pos->c_exrc_typ;
  					st_cntrct.c_ctgry_indstk = ptr_st_cntfut_pos->c_ctgry_indstk;
  					st_cntrct.c_opt_typ = '*';
  					st_cntrct.l_strike_prc = 0;

            /*** Commented in ver 3.3 ***

            i_ip_len = sizeof ( struct vw_contract );
            i_op_len = sizeof ( struct vw_cntrct_qt );

            *** Added for Order Routing ***
            fn_cpy_ddr ( st_cntrct.c_rout_crt );

            i_returncode = fn_call_svc( c_ServiceName,
                                        ptr_st_err_msg->c_err_msg,
                                        &st_cntrct,
                                        &st_cntrct_qt,
                                        "vw_contract",
                                        "vw_cntrct_qt",
                                        i_ip_len,
                                        i_op_len,
                                        0,
                                        "SFO_GET_QT" );
            if ( i_returncode != 0 )
            {
              return FAILURE;
            }

            *** ver 3.3 Comment end ***/

            /*** ver 3.3 Start ***/

            i_returncode = fn_get_qt( c_ServiceName,
                                      &st_cntrct,
                                      &st_cntrct_qt,
                                      ptr_st_err_msg->c_err_msg );
            if ( i_returncode != 0 )
            {
              return FAILURE;
            }

            /*** ver 3.3 Ends ***/

						li_cmp = st_cntrct_qt.l_lst_trdd_prc;
						li_cmp_MTM = st_cntrct_qt.l_lst_trdd_prc;

						/***	Ver 1.8 Starts	***/

						if(ptr_st_pstn_actn->l_actn_typ == ADHOC_ADD_MRGN_RQST &&  ptr_st_pstn_actn->c_nkd_blkd_flg  ==  'C' )
						{
							/***** Commented In Ver 3.8 ******

							EXEC SQL
                SELECT  FCM_CLS_PRC
                INTO    :li_cmp
                FROM    FCM_FO_CNTRCT_MSTR
                WHERE   FCM_PRDCT_TYP = decode (:ptr_st_cntfut_pos->c_prd_typ,'P','F',:ptr_st_cntfut_pos->c_prd_typ)
                AND     FCM_XCHNG_CD  = :ptr_st_cntfut_pos->c_xchng_cd         
                AND     FCM_INDSTK    = :ptr_st_cntfut_pos->c_ctgry_indstk
                AND     FCM_UNDRLYNG  = :ptr_st_cntfut_pos->c_undrlyng
                AND     FCM_EXPRY_DT  = to_date( :ptr_st_cntfut_pos->c_expry_dt,'dd-Mon-yyyy' )
                AND     FCM_EXER_TYP  = :ptr_st_cntfut_pos->c_exrc_typ;

							***** Ver 3.8 Comment Ends ***/

							/***** Ver 3.8 Statrs *****/

						 EXEC SQL
                SELECT  FTQ_CLS_PRC
                INTO    :li_cmp
                FROM    FTQ_FO_TRD_QT
                WHERE   FTQ_PRDCT_TYP = decode (:ptr_st_cntfut_pos->c_prd_typ,'P','F',:ptr_st_cntfut_pos->c_prd_typ)
                AND     FTQ_XCHNG_CD  = :ptr_st_cntfut_pos->c_xchng_cd
                AND     FTQ_INDSTK    = :ptr_st_cntfut_pos->c_ctgry_indstk
                AND     FTQ_UNDRLYNG  = :ptr_st_cntfut_pos->c_undrlyng
                AND     FTQ_EXPRY_DT  = to_date( :ptr_st_cntfut_pos->c_expry_dt,'dd-Mon-yyyy' )
                AND     FTQ_EXER_TYP  = :ptr_st_cntfut_pos->c_exrc_typ;
	
							/***** Ver 3.8 Ends *****/

              if ( SQLCODE != 0 )
              {
                fn_errlog ( c_ServiceName, "S31060", SQLMSG, ptr_st_err_msg->c_err_msg );
                tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
              }

						}
						if( DEBUG_MSG_LVL_3 )
  					{
							fn_userlog(c_ServiceName," FTQ CLS PRC li_cmp Is :%ld:",li_cmp);
						}

						/** Decrease the open position by open qty and open rt and **/
						/** increase the open position by open qty and CMP rate    **/
						/** of the contract                                        **/

						li_tmp_opnqty = ptr_st_cntfut_pos->l_opnpstn_qty;

						fn_del_pos_in_val( 	ptr_st_cntfut_pos->l_opnpstn_qty,
																ptr_st_cntfut_pos->d_imtm_opn_val,
																ptr_st_cntfut_pos->l_opnpstn_qty,
																&(ptr_st_cntfut_pos->l_opnpstn_qty),
																&(ptr_st_cntfut_pos->d_imtm_opn_val ) );

						fn_add_pos( li_tmp_opnqty,
												li_cmp,
												&(ptr_st_cntfut_pos->l_opnpstn_qty),
												&(ptr_st_cntfut_pos->d_imtm_opn_val ) );

					break;

 		case CLOSE_FUTPLUS :

          /** Decrease the OPEN position by the open qty and   **/
          /** WEP rate.executed rate. Calculate the cover quantity **/
          /** in the transaction. Decrease the MTMed position too  **/
          /** by the open quantity and WEP rate.                   **/
	
					/************ Commented In Ver	2.1

					ptr_st_pstn_actn->l_cover_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

					**********************************************************************/

          ptr_st_pstn_actn->l_cover_qty = abs(ptr_st_pstn_actn->l_new_qty);							/***	Ver	2.1	***/


          li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

          li_flg_tmp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

          ptr_st_pstn_actn->l_orgnl_qty =
                     ptr_st_cntfut_pos->l_opnpstn_qty * -1;

          ptr_st_pstn_actn->c_trnsctn_flw = ptr_st_cntfut_pos->c_opnpstn_flw;

					/***	Commented In Ver	2.0
				  ptr_st_pstn_actn->l_exec_rt = ptr_st_cntfut_pos->d_mtm_opn_val/ptr_st_cntfut_pos->l_opnpstn_qty;	

					********************************************/

          d_exec_rt = ptr_st_cntfut_pos->d_mtm_opn_val/ptr_st_cntfut_pos->l_opnpstn_qty;      /***  Ver 2.0 ***/
          ptr_st_pstn_actn->l_exec_rt = d_exec_rt ; /***  Ver 2.0 ***/

          fn_add_pos_in_val(  li_temp_qty * (-1),
                              ptr_st_cntfut_pos->d_org_opn_val,
                              li_temp_qty,
                              &(ptr_st_cntfut_pos->l_opnpstn_qty),
                              &(ptr_st_cntfut_pos->d_org_opn_val ) );

          fn_add_pos_in_val(  li_temp_qty * (-1),
                              ptr_st_cntfut_pos->d_mtm_opn_val,
                              li_temp_qty,
                              &li_temp_qty,
                              &(ptr_st_cntfut_pos->d_mtm_opn_val ) );

          /** Added to get displayed on portfolio page **/
          if ( li_flg_tmp_qty > 0 )
          {
            ptr_st_cntfut_pos->l_sell_exctd_qty = (-1) *
                                          ptr_st_cntfut_pos->l_buy_exctd_qty ;
          }
          else if ( li_flg_tmp_qty < 0 )
          {
            ptr_st_cntfut_pos->l_buy_exctd_qty = (-1) *
                                          ptr_st_cntfut_pos->l_sell_exctd_qty ;
          }


          break;

 /* Ver 1.5 */

 case CLOSE_PART_FUTPLUS :

          /** Decrease the OPEN position by the open qty and   **/
          /** WEP rate.executed rate. Calculate the cover quantity **/
          /** in the transaction. Decrease the MTMed position too  **/
          /** by the open quantity and WEP rate.                   **/

          /***** Ver 2.1 starts  abs() added in ****/

          ptr_st_pstn_actn->l_cover_qty = abs(ptr_st_pstn_actn->l_new_qty);

          /********** Ver 2.1 ends ********/

          li_temp_qty = ptr_st_pstn_actn->l_new_qty;
          li_temp_opn_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

          li_flg_tmp_qty = ptr_st_pstn_actn->l_new_qty;

          ptr_st_pstn_actn->l_orgnl_qty =
                     ptr_st_pstn_actn->l_new_qty * -1;

          ptr_st_pstn_actn->c_trnsctn_flw = ptr_st_cntfut_pos->c_opnpstn_flw;

					/***	Commented In Ver	2.0
          ptr_st_pstn_actn->l_exec_rt = ptr_st_cntfut_pos->d_mtm_opn_val/ptr_st_cntfut_pos->l_opnpstn_qty;
					***************************************/

          d_exec_rt = ptr_st_cntfut_pos->d_mtm_opn_val/ptr_st_cntfut_pos->l_opnpstn_qty;      /***  Ver 2.0 ***/
          ptr_st_pstn_actn->l_exec_rt = d_exec_rt ;     /***  Ver 2.0 ***/


          fn_add_pos_in_val(  li_temp_qty * (-1),
                              ptr_st_cntfut_pos->d_org_opn_val,
                              ptr_st_cntfut_pos->l_opnpstn_qty,
                              &(ptr_st_cntfut_pos->l_opnpstn_qty),
                              &(ptr_st_cntfut_pos->d_org_opn_val ) );

          fn_add_pos_in_val(  li_temp_qty * (-1),
                              ptr_st_cntfut_pos->d_mtm_opn_val,
                              li_temp_opn_qty,
                              &li_temp_opn_qty,
                              &(ptr_st_cntfut_pos->d_mtm_opn_val ) );

          /** Added to get displayed on portfolio page **/
          /* Changed: executed qty = executed qty + new qty from executed qty = new qty in Ver 1.6 */
          if ( li_flg_tmp_qty > 0 )
          {
            ptr_st_cntfut_pos->l_sell_exctd_qty = ptr_st_cntfut_pos->l_sell_exctd_qty + (-1) *  /* Ver 1.6 */
                                          ptr_st_pstn_actn->l_new_qty ;
          }
          else if ( li_flg_tmp_qty < 0 )
          {
            ptr_st_cntfut_pos->l_buy_exctd_qty = ptr_st_cntfut_pos->l_buy_exctd_qty + (-1) *    /* Ver 1.6 */
                                          ptr_st_pstn_actn->l_new_qty ;
          }


          break;

      /*END Ver 1.5 */


	 	case CREATE_FUT:

          /**  Increase the OPEN position by the                   **/
          /** executed qty and executed rate. Calculate the fresh  **/
          /** and cover quantity in the transaction. Increase the  **/
          /** MTMed position too by the executed quantity and      **/
          /** executed rate. Update the buy executed and sell      **/
          /** executed quantity                                    **/

					if ( ptr_st_pstn_actn->c_trnsctn_flw == BUY )
          {
            if( ptr_st_cntfut_pos->l_opnpstn_qty > 0 )
            {
              ptr_st_pstn_actn->l_fresh_qty = ptr_st_pstn_actn->l_exec_qty;
              ptr_st_pstn_actn->l_cover_qty = 0;
            }
            else
            {
              ptr_st_pstn_actn->l_cover_qty =
                        fn_minl(ptr_st_pstn_actn->l_exec_qty,
                                labs(ptr_st_cntfut_pos->l_opnpstn_qty) );

              ptr_st_pstn_actn->l_fresh_qty =
                        fn_maxl(ptr_st_pstn_actn->l_exec_qty -
                                ptr_st_pstn_actn->l_cover_qty,
                                0 );
            }

					if ( ptr_st_pstn_actn->l_cover_qty > 0 )
            {
              li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

              fn_add_pos_in_val(  ptr_st_pstn_actn->l_cover_qty,
                                  ptr_st_cntfut_pos->d_org_opn_val,
                                  li_temp_qty,
                                  &(ptr_st_cntfut_pos->l_opnpstn_qty),
                                  &(ptr_st_cntfut_pos->d_org_opn_val ) );

              fn_add_pos_in_val(  ptr_st_pstn_actn->l_cover_qty,
                                  ptr_st_cntfut_pos->d_mtm_opn_val,
                                  li_temp_qty,
                                  &li_temp_qty,
                                  &(ptr_st_cntfut_pos->d_mtm_opn_val ) );

            }
				 	if ( ptr_st_pstn_actn->l_fresh_qty > 0 )
            {
              li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

							/***	Commented In Ver	2.0

              fn_add_pos( ptr_st_pstn_actn->l_fresh_qty,
                          ptr_st_pstn_actn->l_exec_rt,
                          &(ptr_st_cntfut_pos->l_opnpstn_qty),
                          &(ptr_st_cntfut_pos->d_org_opn_val ) );

              fn_add_pos( ptr_st_pstn_actn->l_fresh_qty,
                          ptr_st_pstn_actn->l_exec_rt,
                          &li_temp_qty,
                          &(ptr_st_cntfut_pos->d_mtm_opn_val ) );

							****************************/

						  fn_add_fplspos  ( ptr_st_pstn_actn->l_fresh_qty,      /***  Ver 2.0 ***/
                                d_exec_rt,
                                &(ptr_st_cntfut_pos->l_opnpstn_qty),
                                &(ptr_st_cntfut_pos->d_org_opn_val ) );

              fn_add_fplspos( ptr_st_pstn_actn->l_fresh_qty,        /***  Ver 2.0 ***/
                              d_exec_rt,
                              &li_temp_qty,
                              &(ptr_st_cntfut_pos->d_mtm_opn_val ) );

						}

            ptr_st_cntfut_pos->l_buy_exctd_qty =
                                      ptr_st_cntfut_pos->l_buy_exctd_qty +
                                      ptr_st_pstn_actn->l_exec_qty;
         }	
				 else
         {
            if ( ptr_st_cntfut_pos->l_opnpstn_qty < 0 )
            {
              ptr_st_pstn_actn->l_fresh_qty = ptr_st_pstn_actn->l_exec_qty;
              ptr_st_pstn_actn->l_cover_qty = 0;
            }
            else
            {
						 if( DEBUG_MSG_LVL_3 )
  					 {
								fn_userlog(c_ServiceName,"Inside CREATE FUT ptr_st_pstn_actn->l_exec_qty Is :%ld:",ptr_st_pstn_actn->l_exec_qty);
								fn_userlog(c_ServiceName,"Inside CREATE FUT ptr_st_cntfut_pos->l_opnpstn_qty Is :%ld:",ptr_st_cntfut_pos->l_opnpstn_qty);
						 }
              ptr_st_pstn_actn->l_cover_qty =
                        fn_minl(ptr_st_pstn_actn->l_exec_qty,
                                ptr_st_cntfut_pos->l_opnpstn_qty );

              ptr_st_pstn_actn->l_fresh_qty =
                        fn_maxl(ptr_st_pstn_actn->l_exec_qty -
                                ptr_st_pstn_actn->l_cover_qty,
                                0 );
            }
						if ( ptr_st_pstn_actn->l_cover_qty > 0 )
            {
              li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

              fn_add_pos_in_val(  ptr_st_pstn_actn->l_cover_qty * ( -1 ),
                                  ptr_st_cntfut_pos->d_org_opn_val,
                                  li_temp_qty,
                                  &(ptr_st_cntfut_pos->l_opnpstn_qty),
                                  &(ptr_st_cntfut_pos->d_org_opn_val ) );

              fn_add_pos_in_val(  ptr_st_pstn_actn->l_cover_qty * ( -1 ),
                                  ptr_st_cntfut_pos->d_mtm_opn_val,
                                  li_temp_qty,
                                  &li_temp_qty,
                                  &(ptr_st_cntfut_pos->d_mtm_opn_val ) );

            }

            if ( ptr_st_pstn_actn->l_fresh_qty > 0 )
            {
              li_temp_qty = ptr_st_cntfut_pos->l_opnpstn_qty;

							/***	Commented In Ver	2.0

              fn_add_pos( ptr_st_pstn_actn->l_fresh_qty * (-1),
                          ptr_st_pstn_actn->l_exec_rt,
                          &(ptr_st_cntfut_pos->l_opnpstn_qty),
                          &(ptr_st_cntfut_pos->d_org_opn_val ) );

              fn_add_pos( ptr_st_pstn_actn->l_fresh_qty * (-1),
                          ptr_st_pstn_actn->l_exec_rt,
                          &li_temp_qty,
                          &(ptr_st_cntfut_pos->d_mtm_opn_val ) );

							*********************************/

							fn_add_fplspos( ptr_st_pstn_actn->l_fresh_qty * (-1),     /***  Ver 2.0 ***/
                              d_exec_rt,
                              &(ptr_st_cntfut_pos->l_opnpstn_qty),
                              &(ptr_st_cntfut_pos->d_org_opn_val ) );

              fn_add_fplspos( ptr_st_pstn_actn->l_fresh_qty * (-1),     /***  Ver 2.0 ***/
                              d_exec_rt,
                              &li_temp_qty,
                              &(ptr_st_cntfut_pos->d_mtm_opn_val ) );

            }

            ptr_st_cntfut_pos->l_sell_exctd_qty =
                                    ptr_st_cntfut_pos->l_sell_exctd_qty +
                                    (ptr_st_pstn_actn->l_exec_qty *(-1));
          }

          break;
	}

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog ( c_ServiceName, "*************	SFO_UPD_FUT_PLS - III	*************");
		fn_userlog ( c_ServiceName, "Contract after updation by pstn_actn: " );
		fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", ptr_st_cntfut_pos->l_ibuy_qty );
		fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", ptr_st_cntfut_pos->d_ibuy_ord_vl );
		fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", ptr_st_cntfut_pos->l_isell_qty );
		fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", ptr_st_cntfut_pos->d_isell_ord_vl );
		fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", ptr_st_cntfut_pos->l_exbuy_qty );
		fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", ptr_st_cntfut_pos->d_exbuy_ord_vl );
		fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", ptr_st_cntfut_pos->l_exsell_qty );
		fn_userlog ( c_ServiceName, "EXCH sell val      :%lf:", ptr_st_cntfut_pos->d_exsell_ord_vl );
		fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", ptr_st_cntfut_pos->l_buy_exctd_qty );
		fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", ptr_st_cntfut_pos->l_sell_exctd_qty );
	}

  if( DEBUG_MSG_LVL_3 )/*** Ver 4.3 ***/
  {
    fn_userlog ( c_ServiceName, "Open qty          :%ld:", ptr_st_cntfut_pos->l_opnpstn_qty );
    fn_userlog ( c_ServiceName, "Original open val :%lf:", ptr_st_cntfut_pos->d_org_opn_val );
    fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", ptr_st_cntfut_pos->d_mtm_opn_val );
	} 
  return SUCCESS;
}

/**************Risk Functions *******************************************/
/** Given a position and a type of action performed calculates the new **/
/** margin to be                                                       **/
int fn_upd_mrgn_fpl( char *c_ServiceName,
									struct vw_pstn_actn *ptr_st_pstn_actn,
                  struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                  struct vw_undfut_pos *ptr_st_undfut_pos,
                  struct vw_err_msg *ptr_st_err_msg)
{

	int		i_returncode;

	long int	li_ose_qty;
	long int	li_ibm_qty;
	long int	li_ebm_qty;
	long int	li_obe_qty;
	long int	li_ism_qty;
	long int	li_esm_qty;
	long int 	li_opn_qty;
	long int 	li_unmtchd_qty;
	long int 	li_sum_CUOQ;
	long int 	li_spd_qty;

	double d_initial_mrgn;
	double d_spread_mrgn;
	double d_min_mrgn;
	double d_min_spread_mrgn;
	double d_i_exp = 0.0;
	double d_e_exp = 0.0;
	double d_sum_CUOV;
	double d_sum_CUOV_cmp;
	double d_diff_AMV;
	double d_und_opn_val_imtm;
	
	char	c_pos_opn;

	struct vw_cntfut_pos st_cntfut_pos;

  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;             /* a cursor variable */
		char	sql_cntrct_tag;
		char	sql_cln_mtch_accnt[11];
		char	sql_xchng_cd[4];
		char	sql_prd_typ;
		char	sql_undrlyng[7];
		double d_far_mtm_opn_val;
		long int 	li_far_opnpstn_qty;
  EXEC SQL END DECLARE SECTION;

	strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
	strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
	strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
	sql_prd_typ = ptr_st_pstn_actn->c_prd_typ;
	sql_cntrct_tag = ptr_st_undfut_pos->c_cntrct_tag;

	/** Get the margin percentages **/
  i_returncode = fn_get_im_prcntg( c_ServiceName,
                                   ptr_st_pstn_actn,
                                   ptr_st_err_msg,
                                   &d_initial_mrgn,
																   &d_spread_mrgn, 
                                   &d_min_mrgn,
																   &d_min_spread_mrgn,
                                   ptr_st_undfut_pos->c_cntrct_tag );

  if ( i_returncode == -1 )
  {
		return ( -1 );
  }

	/** Calculation of order level margin **/
	/** Maximum risk is - All buy position getting executed and joining the **/
	/**                   executed position or all sell position getting    **/
	/**                   executed and joining the executed position.       **/
	/** We treat the IWTL and EXCH as two different system accpeting orders **/
	/** with a delay ( EXCH following the IWTL ). Hence we will have postion**/
	/** in both the system with the EXCH following suit with the IWTL with a**/
	/** small time lag. So the maximum risk is redifined as -               **/
	/** Maximum of ( maximum risk in IWTL system and EXCH system )          **/

	/** To find buy exposure                                                **/
	/** Open sell qty = max ( ( Sell executed qty - Buy executed qty ), 0 ) **/
	/** Buy marginable qty = max ( ( Buy ordered qty - Open sell qty ), 0 ) **/
	/** Buy exposure = Buy marginable qty * Buy ordered rt * IM / 100       **/
	/** To find sell exposure                                               **/
	/** Open buy qty = max ( ( Buy executed qty - Sell executed qty ), 0 )  **/
	/** Sell marginable qty = max ( ( Sell ordered qty - Open buy qty ), 0 )**/
	/** Sell exposure = Sell marginable qty * Sell ordered rt * IM / 100    **/

	/** Calculation of IWTL buy exposure **/
	if ( ptr_st_undfut_pos->l_ibuy_qty != 0 )
	{
		li_ose_qty = fn_maxl( ( ptr_st_undfut_pos->l_sell_exctd_qty * (-1)) -
													 ptr_st_undfut_pos->l_buy_exctd_qty,
													0 );

		li_ibm_qty = fn_maxl( (ptr_st_undfut_pos->l_ibuy_qty -
													li_ose_qty),
													0 );

		ptr_st_undfut_pos->d_ibuy_mrgn = li_ibm_qty * 
																		(ptr_st_undfut_pos->d_ibuy_ord_vl / 
																		 ptr_st_undfut_pos->l_ibuy_qty) *
																			d_initial_mrgn / 100.0 ;									
	}
	else
	{
		ptr_st_undfut_pos->d_ibuy_mrgn = 0;
	}

	/** Calculation of EXCH buy exposure **/
	if ( ptr_st_undfut_pos->l_exbuy_qty != 0 )
	{
		li_ose_qty = fn_maxl( (ptr_st_undfut_pos->l_sell_exctd_qty * (-1)) -
													 ptr_st_undfut_pos->l_buy_exctd_qty,
													0 );
		li_ebm_qty = fn_maxl( (ptr_st_undfut_pos->l_exbuy_qty -
													li_ose_qty),
													0 );
		ptr_st_undfut_pos->d_exbuy_mrgn = li_ebm_qty * 
																		(ptr_st_undfut_pos->d_exbuy_ord_vl / 
																		 ptr_st_undfut_pos->l_exbuy_qty) *
																			d_initial_mrgn / 100.0 ;									
	}
	else
	{
		ptr_st_undfut_pos->d_exbuy_mrgn = 0;
	}

	/** Calculation of IWTL sell exposure **/
	if ( ptr_st_undfut_pos->l_isell_qty != 0 )
	{
		li_obe_qty = fn_maxl( ptr_st_undfut_pos->l_buy_exctd_qty -
													(ptr_st_undfut_pos->l_sell_exctd_qty * (-1) ),
													0 );

		li_ism_qty = fn_maxl( ( ( ptr_st_undfut_pos->l_isell_qty * (-1)) -
													li_obe_qty),
													0 );
		ptr_st_undfut_pos->d_isell_mrgn = li_ism_qty * 
																		(ptr_st_undfut_pos->d_isell_ord_vl / 
																		 ptr_st_undfut_pos->l_isell_qty) *
																		d_initial_mrgn / 100.0 ;									
	}
	else
	{
		ptr_st_undfut_pos->d_isell_mrgn = 0;
	}

	/** Calculation of EXCH sell exposure **/
	if ( ptr_st_undfut_pos->l_exsell_qty != 0 )
	{
		li_obe_qty = fn_maxl( ptr_st_undfut_pos->l_buy_exctd_qty -
												 ( ptr_st_undfut_pos->l_sell_exctd_qty * (-1) ),
													0 );

		li_esm_qty = fn_maxl( ( ( ptr_st_undfut_pos->l_exsell_qty * (-1)) -
													li_obe_qty),
													0 );
		ptr_st_undfut_pos->d_exsell_mrgn = li_esm_qty * 
																		(ptr_st_undfut_pos->d_exsell_ord_vl / 
																		 ptr_st_undfut_pos->l_exsell_qty) *
																			d_initial_mrgn / 100.0 ;									
	}
	else
	{
		ptr_st_undfut_pos->d_exsell_mrgn = 0;
	}

	d_i_exp = fn_maxd(ptr_st_undfut_pos->d_ibuy_mrgn,
										ptr_st_undfut_pos->d_isell_mrgn);

	d_e_exp = fn_maxd(ptr_st_undfut_pos->d_exbuy_mrgn,
										ptr_st_undfut_pos->d_exsell_mrgn);

	ptr_st_undfut_pos->d_ordr_mrgn = fn_maxd( d_i_exp, d_e_exp );

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog ( c_ServiceName, "Total order level margin" );
		fn_userlog ( c_ServiceName, "IWTL buy exposure   :%lf:", ptr_st_undfut_pos->d_ibuy_mrgn );
		fn_userlog ( c_ServiceName, "IWTL sell exposure  :%lf:", ptr_st_undfut_pos->d_isell_mrgn );
		fn_userlog ( c_ServiceName, "IWTL total exposure :%lf:", d_i_exp );
		fn_userlog ( c_ServiceName, "EXCH buy exposure   :%lf:", ptr_st_undfut_pos->d_exbuy_mrgn );
		fn_userlog ( c_ServiceName, "EXCH sell exposure  :%lf:", ptr_st_undfut_pos->d_exsell_mrgn );
	}

  if( DEBUG_MSG_LVL_3 ) /*** Ver 4.3 ***/
  {
    fn_userlog ( c_ServiceName, "EXCH total exposure :%lf:", d_e_exp );
    fn_userlog ( c_ServiceName, "Final exposure      :%lf:", ptr_st_undfut_pos->d_ordr_mrgn );
	}
					/** Calculate the Executed margin, Spread margin and Spread PL.        **/
					/** They need to be recalculated only if the executed position changes **/
					if ( ( ptr_st_pstn_actn->l_actn_typ == ORS_TRD_CONF      )   || 
							 ( ptr_st_pstn_actn->l_actn_typ == INTRADAY_MTM_REPORT ) ||
							 ( ptr_st_pstn_actn->l_actn_typ == INTRADAY_MTM      )   || 
							 ( ptr_st_pstn_actn->l_actn_typ == ADHOC_ADD_MRGN_RQST	)   || 			/***	Ver 1.8	***/
							 ( ptr_st_pstn_actn->l_actn_typ == CLOSE_FUTPLUS		)    || 
							 (ptr_st_pstn_actn->l_actn_typ  == CLOSE_PART_FUTPLUS ) || /* Ver 1.5 added for future Plus conversion*/
							 ( ptr_st_pstn_actn->l_actn_typ == CREATE_FUT				)   )
					{

						/** Calculation of spread margin **/
						/** Spread qty = min ( sum of open buy qty at contract level,   **/
						/**                    sum of open sell qty at contract level ) **/
						/** Spread margin = Spread qty * Far month contract rate * SM / 100 **/
						li_spd_qty = fn_minl( ptr_st_undfut_pos->l_opn_buyqty,
														labs(ptr_st_undfut_pos->l_opn_sellqty) );

						EXEC SQL
							SELECT  FFP_MTM_OPN_VAL,
											FFP_OPNPSTN_QTY
							INTO		:d_far_mtm_opn_val,
											:li_far_opnpstn_qty
							FROM		FFP_FO_FUTURES_PSTN
							WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
							AND			FFP_XCHNG_CD       = :sql_xchng_cd
							AND			FFP_PRDCT_TYP      = :sql_prd_typ
							AND			FFP_UNDRLYNG       = :sql_undrlyng
							AND			FFP_CNTRCT_TAG		 = :sql_cntrct_tag
							AND			FFP_EXPRY_DT  		 = 
											( SELECT  MAX(FFP_EXPRY_DT)
											FROM		FFP_FO_FUTURES_PSTN
											WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
											AND			FFP_XCHNG_CD       = :sql_xchng_cd
											AND			FFP_PRDCT_TYP      = :sql_prd_typ
											AND			FFP_UNDRLYNG       = :sql_undrlyng
											AND			FFP_CNTRCT_TAG		 = :sql_cntrct_tag 
											AND     FFP_OPNPSTN_QTY    != 0 );

						if ( ( SQLCODE != 0 ) && 
								 ( SQLCODE != NO_DATA_FOUND ) )
						{
							fn_errlog( c_ServiceName, "S31065", SQLMSG, ptr_st_err_msg->c_err_msg );
							return FAILURE;
						}

						if ( SQLCODE == 0 )
						{
							ptr_st_undfut_pos->d_sprd_mrgn = li_spd_qty *
								( d_far_mtm_opn_val / li_far_opnpstn_qty ) * d_spread_mrgn / 100.0;

							ptr_st_undfut_pos->d_imtm_sprd_mrgn = ptr_st_undfut_pos->d_sprd_mrgn;

							ptr_st_undfut_pos->d_mm_sprd_mrgn = li_spd_qty *
								( d_far_mtm_opn_val / li_far_opnpstn_qty ) * d_min_spread_mrgn / 100.0;
						}
						else
						{
							ptr_st_undfut_pos->d_sprd_mrgn = 0;
							ptr_st_undfut_pos->d_imtm_sprd_mrgn = 0;
							ptr_st_undfut_pos->d_mm_sprd_mrgn = 0;
						}

						/** Calculation of spread profit and loss **/
						/** Objective :- Assume that the contracts of same underlying are of **/
						/**              the same type. Summing at the contract level we will**/
						/**              arrive at a contract level position which will be   **/
						/**              either buy or sell in nature. Now assume that each  **/
						/**              of the contract level position is a trade. It is buy**/
						/**              trade if the summation is a buy position else it is **/
						/**              sell trade. Now from the list of trade at hand find **/
						/**              of each trade how much is closed and how much is    **/
						/**              open. The rule to be applied here is close the      **/
						/**              nearest month contract trade first. For those trade **/
						/**              which acts as cover find profit and loss at their   **/
						/**              value.                                              **/
						/** To follow the procedure as specified in the objective is a little**/
						/** tedious. Hence we use a method of exclusion.                     **/
						/** Sum of open value at contract level =                            **/
						/**      Sum of actual open value at contract level + PL             **/
						/** Well this formula is not the method of exclusion, finding the    **/
						/** Sum of actual open value at contract level is done using method  **/
						/** exclusion. Let us now get into it. Instead of finding which trade**/
						/** is covering which find how much of a trade is open.              **/
						/**                                                                  **/
						/** If underlying open position is buy                               **/
						/**   Preapare a list of all contract level buy open position in desc**/
						/**   order of date                                                  **/
						/** else                                                             **/
						/**   Preapare a list of all contract level sell open position in    **/
						/**   desc order of date                                             **/
						/**                                                                  **/
						/** Total unmatched quantity = Open position quantity at underlying  **/
						/**                            level                                 **/
						/** Sum of actual open quantity = 0                                  **/
						/** Sum of actual open value    = 0                                  **/
						/**                                                                  **/
						/** While unmatched quantity > 0 do                                  **/
						/**   Fetch a record from the list                                   **/
						/**   Actual open quantity = min ( Contract level open qty,          **/
						/**                                Unmatched quantity       )        **/
						/**   Sum of actual open quantity = Sum of actual open quantity +    **/
						/**                                 Actual open quantity             **/
						/**   Sum of actual open value = Sum of actual open value +          **/
						/**                              Actual open value                   **/
						/**   umatched quantity = umatched quantity - Actual open quantity   **/
						/**                                                                  **/
						/** Spread PL = Sum of actual open value - Sum of open value at      **/
						/**                                        underlying level          **/
						/**********************************************************************/ 

						c_pos_opn = 'Y';

						EXEC SQL ALLOCATE :sys_cursor;

						if( ptr_st_undfut_pos->l_opnpstn_qty > 0)
						{
							EXEC SQL EXECUTE
								BEGIN
									OPEN :sys_cursor FOR
										SELECT  FFP_MTM_OPN_VAL,
														FFP_OPNPSTN_QTY,
														FFP_IMTM_OPN_VAL
										FROM		FFP_FO_FUTURES_PSTN
										WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
										AND			FFP_XCHNG_CD       = :sql_xchng_cd
										AND			FFP_PRDCT_TYP      = :sql_prd_typ
										AND			FFP_UNDRLYNG       = :sql_undrlyng
										AND			FFP_CNTRCT_TAG		 = :sql_cntrct_tag
										AND			FFP_OPNPSTN_QTY    > 0
										ORDER BY FFP_EXPRY_DT desc;
									END;
								END-EXEC;

						}
						else if( ptr_st_undfut_pos->l_opnpstn_qty < 0)
						{
							EXEC SQL EXECUTE
								BEGIN
									OPEN :sys_cursor FOR
										SELECT  FFP_MTM_OPN_VAL,
														FFP_OPNPSTN_QTY,
														FFP_IMTM_OPN_VAL
										FROM		FFP_FO_FUTURES_PSTN
										WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
										AND			FFP_XCHNG_CD       = :sql_xchng_cd
										AND			FFP_PRDCT_TYP      = :sql_prd_typ
										AND			FFP_UNDRLYNG       = :sql_undrlyng
										AND			FFP_CNTRCT_TAG		 = :sql_cntrct_tag
										AND			FFP_OPNPSTN_QTY    < 0
										ORDER BY FFP_EXPRY_DT desc;
									END;
								END-EXEC;

						}
						else
						{
							d_sum_CUOV = 0;
							d_sum_CUOV_cmp = 0;
							ptr_st_undfut_pos->d_sprd_pl = (-1) * ptr_st_undfut_pos->d_mtm_opn_val;
							ptr_st_undfut_pos->d_imtm_sprd_pl = (-1) * 
																									ptr_st_undfut_pos->d_imtm_opn_val;
							ptr_st_undfut_pos->d_mm_sprd_pl = ptr_st_undfut_pos->d_sprd_pl; 

							ptr_st_undfut_pos->d_exctd_mrgn = 0;
							ptr_st_undfut_pos->d_imtm_exctd_mrgn = 0;
							ptr_st_undfut_pos->d_mm_exctd_mrgn = 0;
							c_pos_opn = 'N';

							/*** Set add margin amount to 0 ***/
							ptr_st_undfut_pos->d_add_mrgn_val = 0;

							SQLCODE = 0;
						}

						if ( SQLCODE != 0 )
						{
							fn_errlog( c_ServiceName, "S31070", SQLMSG, ptr_st_err_msg->c_err_msg  );
							EXEC SQL FREE :sys_cursor;
							return ( -1 );
						}

						if ( c_pos_opn == 'Y' )
						{
							li_opn_qty = ptr_st_undfut_pos->l_opnpstn_qty;
							li_unmtchd_qty = li_opn_qty;
							li_sum_CUOQ = 0;
							d_sum_CUOV = 0;
							d_sum_CUOV_cmp = 0;

							while ( li_unmtchd_qty != 0)
							{
								EXEC SQL FETCH :sys_cursor
												INTO :st_cntfut_pos.d_mtm_opn_val,
														 :st_cntfut_pos.l_opnpstn_qty,
														 :st_cntfut_pos.d_imtm_opn_val;

								if ( SQLCODE != 0 )
								{
									fn_errlog( c_ServiceName, "S31075", SQLMSG, 
																									ptr_st_err_msg->c_err_msg  );
									EXEC SQL CLOSE :sys_cursor;
									EXEC SQL FREE :sys_cursor;
									return ( -1 );
								}

								if ( li_opn_qty > 0 )
								{
									st_cntfut_pos.l_und_opn_qty = fn_minl( st_cntfut_pos.l_opnpstn_qty,
																								li_unmtchd_qty );
								}
								else
								{
									st_cntfut_pos.l_und_opn_qty = fn_maxl( st_cntfut_pos.l_opnpstn_qty,
																								li_unmtchd_qty );
								}
								st_cntfut_pos.d_und_opn_val = st_cntfut_pos.l_und_opn_qty * 
													(st_cntfut_pos.d_mtm_opn_val / st_cntfut_pos.l_opnpstn_qty);

								d_und_opn_val_imtm = st_cntfut_pos.l_und_opn_qty *
													(st_cntfut_pos.d_imtm_opn_val / st_cntfut_pos.l_opnpstn_qty);
							
								li_sum_CUOQ = li_sum_CUOQ + st_cntfut_pos.l_und_opn_qty;
								d_sum_CUOV = d_sum_CUOV + st_cntfut_pos.d_und_opn_val;
								d_sum_CUOV_cmp = d_sum_CUOV_cmp + d_und_opn_val_imtm;
								
								li_unmtchd_qty = li_unmtchd_qty - st_cntfut_pos.l_und_opn_qty;
								
							}

							EXEC SQL CLOSE :sys_cursor;
							EXEC SQL FREE :sys_cursor;

							/** Calculation of Executed margin **/
							/** Executed margin = d_sum_CUOV * IM / 100 **/

							ptr_st_undfut_pos->d_sprd_pl = d_sum_CUOV -
																						 ptr_st_undfut_pos->d_mtm_opn_val;

							ptr_st_undfut_pos->d_imtm_sprd_pl = d_sum_CUOV_cmp -
																									ptr_st_undfut_pos->d_imtm_opn_val;

							ptr_st_undfut_pos->d_mm_sprd_pl = ptr_st_undfut_pos->d_sprd_pl; 

							if ( li_opn_qty > 0 )
							{
								ptr_st_undfut_pos->d_exctd_mrgn = d_sum_CUOV *
																									d_initial_mrgn / 100.0;

								ptr_st_undfut_pos->d_imtm_exctd_mrgn = d_sum_CUOV_cmp *
																											 d_initial_mrgn / 100.0;

								ptr_st_undfut_pos->d_mm_exctd_mrgn = d_sum_CUOV *
																										 d_min_mrgn / 100.0;

							}
							else if ( li_opn_qty < 0 )
							{
								ptr_st_undfut_pos->d_exctd_mrgn = ( (-1) * d_sum_CUOV )*
																										d_initial_mrgn / 100.0;

								ptr_st_undfut_pos->d_imtm_exctd_mrgn = ( (-1) * d_sum_CUOV_cmp )*
																												d_initial_mrgn / 100.0;

								ptr_st_undfut_pos->d_mm_exctd_mrgn = ( (-1) * d_sum_CUOV )*
																											d_min_mrgn / 100.0;

							}	


							if ( ( ptr_st_undfut_pos->l_opnpstn_qty == 0 ) ||
									 ( ( ptr_st_undfut_pos->l_opnpstn_qty > 0 ) &&
										 ( ptr_st_undfut_pos_crrnt->l_opnpstn_qty < 0 ) ) ||
									 ( ( ptr_st_undfut_pos->l_opnpstn_qty < 0 ) &&
										 ( ptr_st_undfut_pos_crrnt->l_opnpstn_qty > 0 ) ) )
							{
								ptr_st_undfut_pos->d_add_mrgn_val = 0;
							}
											
						}
						else
						{
							EXEC SQL CLOSE :sys_cursor;
							EXEC SQL FREE :sys_cursor;
						}

						if ( ( ptr_st_undfut_pos->d_exctd_mrgn + 
									 ptr_st_undfut_pos->d_sprd_mrgn ) <=
									 ptr_st_undfut_pos->d_sprd_pl )
						{
							ptr_st_undfut_pos->d_trd_mrgn = 0;
						}
						else
						{
							ptr_st_undfut_pos->d_trd_mrgn = ptr_st_undfut_pos->d_exctd_mrgn +
																							ptr_st_undfut_pos->d_sprd_mrgn -
																							ptr_st_undfut_pos->d_sprd_pl;
						}

						if ( ( ptr_st_undfut_pos->d_imtm_exctd_mrgn + 
									 ptr_st_undfut_pos->d_imtm_sprd_mrgn ) <=
									 ptr_st_undfut_pos->d_imtm_sprd_pl )
						{
							ptr_st_undfut_pos->d_imtm_trd_mrgn = 0;
						}
						else
						{
							ptr_st_undfut_pos->d_imtm_trd_mrgn = 
																						ptr_st_undfut_pos->d_imtm_exctd_mrgn +
																						ptr_st_undfut_pos->d_imtm_sprd_mrgn -
																						ptr_st_undfut_pos->d_imtm_sprd_pl;
						}

						if ( ( ptr_st_undfut_pos->d_mm_exctd_mrgn + 
									 ptr_st_undfut_pos->d_mm_sprd_mrgn ) <=
									 ptr_st_undfut_pos->d_mm_sprd_pl )
						{
							ptr_st_undfut_pos->d_mm_trd_mrgn = 0;
						}
						else
						{
							ptr_st_undfut_pos->d_mm_trd_mrgn = ptr_st_undfut_pos->d_mm_exctd_mrgn +
																							ptr_st_undfut_pos->d_mm_sprd_mrgn -
																							ptr_st_undfut_pos->d_mm_sprd_pl;
						}

	if( DEBUG_MSG_LVL_3 ) 
	{
		fn_userlog ( c_ServiceName, "Actual net open value  :%lf:", d_sum_CUOV );
		fn_userlog ( c_ServiceName, "MTMed open val         :%lf:", ptr_st_undfut_pos->d_mtm_opn_val );
		fn_userlog ( c_ServiceName, "Spread PL              :%lf:", ptr_st_undfut_pos->d_sprd_pl );
		fn_userlog ( c_ServiceName, "Executed Margin        :%lf:", ptr_st_undfut_pos->d_exctd_mrgn );
		fn_userlog ( c_ServiceName, "Total Trade Margin     :%lf:", ptr_st_undfut_pos->d_trd_mrgn );
		fn_userlog ( c_ServiceName, "Act net open value -CMP:%lf:", d_sum_CUOV_cmp );
/*************************************************
	fn_userlog ( c_ServiceName, "Intra MTMed open val   :%lf:", 
                              ptr_st_undfut_pos->d_imtm_opn_val );
*************************************************
		fn_userlog ( c_ServiceName, "Spread PL at IMTM      :%lf:", ptr_st_undfut_pos->d_imtm_sprd_pl );
		fn_userlog ( c_ServiceName, "Executed Margin at IMTM:%lf:", ptr_st_undfut_pos->d_imtm_exctd_mrgn );
		fn_userlog ( c_ServiceName, "Total IMTM Trade Margin:%lf:", ptr_st_undfut_pos->d_imtm_trd_mrgn );

		fn_userlog ( c_ServiceName, "Spread PL at MM        :%lf:", ptr_st_undfut_pos->d_mm_sprd_pl );
		fn_userlog ( c_ServiceName, "Executed Margin at MM  :%lf:", ptr_st_undfut_pos->d_mm_exctd_mrgn );
		fn_userlog ( c_ServiceName, "Total Trade Mrgn at MM :%lf:", ptr_st_undfut_pos->d_mm_trd_mrgn );   	*********/
	}
	}
	return SUCCESS;
}

int fn_call_actn_grp1_fpl( char *c_ServiceName,
											 struct vw_pstn_actn *ptr_st_pstn_actn,
                  		 struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                  		 struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                  	 	 struct vw_err_msg *ptr_st_err_msg)
{
  int i_returncode;

	double d_pl_amt;
	double d_diff_UEM;
	double d_diff_amv;
	double d_diff_UTM;
	double d_diff_UOM;
	double d_diff_UAM;
	double d_UTM_amt;
	double d_balance_amt;
	double d_bal_to_apply;

  char c_narration_id[4];
  char c_dr_without_lmt_flg;
  char c_pos_avl;
  char c_reason_cd [ 2000 ];              /*** Ver 3.4 ***/

	char	c_tmp_rmrks [ 133 ] ;
  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;             /* a cursor variable */
		char	sql_cln_mtch_accnt[11];
		char	sql_xchng_cd[4];
		char	sql_prd_typ;
		char	sql_cntrct_tag;
		char	sql_undrlyng[7];
    varchar c_exp_dt[LEN_DATE];
		double d_mrgn_blkd = 0.0;

		/** Current contract level positions of other contracts in the same  **/
    /** underlying                                                       **/
    struct vw_cntfut_pos st_cntpos_crrnt;
		/** Copy of contract level position on which action is to be done taken **/
    /** before applying the action                                          **/
    struct vw_cntfut_pos st_cntpos_old;
		/** Contract level position on which action is to be done **/
    struct vw_cntfut_pos st_cntpos_md_rc;
  EXEC SQL END DECLARE SECTION;

	strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
	strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
	strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
	sql_prd_typ = ptr_st_pstn_actn->c_prd_typ;
	sql_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;

	/** This bit of code down below will fetch all the contract level **/
	/** positions. Then it will find the contract on which the input  **/
	/** action is to be performed and then perform it. It then summs  **/
	/** up all the contract level postion to arrive at a consolidated **/
	/** underlying level position. It then recalculates the margin.   **/
	/** This bit of code need not be performed for actions which do   **/
	/** not involve a change in postion                               **/

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog ( c_ServiceName, "*************	SFO_UPD_FUT_PLS - II	*************");
		fn_userlog ( c_ServiceName, "Fetched current contract position" );
	}

	/** Prepare a list of contracts from contract position table **/
	EXEC SQL ALLOCATE :sys_cursor;

   	EXEC SQL EXECUTE
     	BEGIN
         OPEN :sys_cursor FOR
   				SELECT  FFP_CLM_MTCH_ACCNT,
									FFP_XCHNG_CD,
									FFP_PRDCT_TYP,
									FFP_INDSTK,
									FFP_UNDRLYNG,
									TO_CHAR (FFP_EXPRY_DT,'DD-Mon-YYYY'),
									FFP_EXER_TYP,
									FFP_CNTRCT_TAG,
									FFP_IBUY_QTY,
									FFP_IBUY_ORD_VAL,
									FFP_ISELL_QTY,
									FFP_ISELL_ORD_VAL,
									FFP_EXBUY_QTY,
									FFP_EXBUY_ORD_VAL,
									FFP_EXSELL_QTY,
									FFP_EXSELL_ORD_VAL,
									FFP_BUY_EXCTD_QTY,
									FFP_SELL_EXCTD_QTY,
									FFP_OPNPSTN_FLW,
									FFP_OPNPSTN_QTY,
									FFP_OPNPSTN_VAL,
									FFP_MTM_OPN_VAL
					FROM		FFP_FO_FUTURES_PSTN
					WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
					AND			FFP_XCHNG_CD       = :sql_xchng_cd
					AND			FFP_PRDCT_TYP      = :sql_prd_typ
					AND			FFP_UNDRLYNG       = :sql_undrlyng
					AND			FFP_CNTRCT_TAG		 = :sql_cntrct_tag
					ORDER BY FFP_EXPRY_DT asc;
     		END;
   		END-EXEC;

 	if ( SQLCODE != 0 )
  {
   	EXEC SQL FREE :sys_cursor;
   	fn_errlog ( c_ServiceName, "S31080", SQLMSG, ptr_st_err_msg->c_err_msg );
   	return FAILURE;
  }

	c_pos_avl = 'N';

	/** Fetch one contract at a time from the list. If the fetched  **/
	/** contract is the one we need to apply the change apply it.   **/
	/** Else simply add the contract to  underlying level position  **/
	 while ( 1 )
  {
   		EXEC SQL 	FETCH   :sys_cursor
								INTO		:st_cntpos_crrnt.c_cln_mtch_accnt,
           							:st_cntpos_crrnt.c_xchng_cd,
           							:st_cntpos_crrnt.c_prd_typ,
           							:st_cntpos_crrnt.c_ctgry_indstk,
           							:st_cntpos_crrnt.c_undrlyng,
           							:c_exp_dt,
           							:st_cntpos_crrnt.c_exrc_typ,
           							:st_cntpos_crrnt.c_cntrct_tag,
           							:st_cntpos_crrnt.l_ibuy_qty,
           							:st_cntpos_crrnt.d_ibuy_ord_vl,
           							:st_cntpos_crrnt.l_isell_qty,
           							:st_cntpos_crrnt.d_isell_ord_vl,
           							:st_cntpos_crrnt.l_exbuy_qty,
           							:st_cntpos_crrnt.d_exbuy_ord_vl,
           							:st_cntpos_crrnt.l_exsell_qty,
           							:st_cntpos_crrnt.d_exsell_ord_vl,
           							:st_cntpos_crrnt.l_buy_exctd_qty,
           							:st_cntpos_crrnt.l_sell_exctd_qty,
           							:st_cntpos_crrnt.c_opnpstn_flw,
           							:st_cntpos_crrnt.l_opnpstn_qty,
           							:st_cntpos_crrnt.d_org_opn_val,
           							:st_cntpos_crrnt.d_mtm_opn_val;

   		if ( SQLCODE != 0 )
   		{
     		if ( SQLCODE == NO_DATA_FOUND )
     		{
       		break;
     		}

     		EXEC SQL CLOSE :sys_cursor;
     		EXEC SQL FREE :sys_cursor;
   			fn_errlog ( c_ServiceName, "S31085", SQLMSG, 
																					ptr_st_err_msg->c_err_msg );
   			return FAILURE;
   		}
			SETNULL( c_exp_dt );
			strcpy ( st_cntpos_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
			rtrim(st_cntpos_crrnt.c_xchng_cd);
			rtrim(st_cntpos_crrnt.c_undrlyng);
			rtrim(st_cntpos_crrnt.c_expry_dt);

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_exp_dt.arr );
		fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntpos_crrnt.l_ibuy_qty );
		fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntpos_crrnt.d_ibuy_ord_vl );
		fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntpos_crrnt.l_isell_qty );
		fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntpos_crrnt.d_isell_ord_vl );
		fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntpos_crrnt.l_exbuy_qty );
		fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntpos_crrnt.d_exbuy_ord_vl );
		fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntpos_crrnt.l_exsell_qty );
		fn_userlog ( c_ServiceName, "EXCH sell val      :%lf:", st_cntpos_crrnt.d_exsell_ord_vl );
		fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntpos_crrnt.l_buy_exctd_qty );
		fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntpos_crrnt.l_sell_exctd_qty );
	} 

  if( DEBUG_MSG_LVL_3 ) /*** Ver 4.3 ***/
  {
    fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntpos_crrnt.l_opnpstn_qty );
    fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntpos_crrnt.d_org_opn_val );
    fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntpos_crrnt.d_mtm_opn_val );
	}
			if( (strcmp(st_cntpos_crrnt.c_xchng_cd,
																ptr_st_pstn_actn->c_xchng_cd) == 0 ) &&
					(st_cntpos_crrnt.c_prd_typ == ptr_st_pstn_actn->c_prd_typ) && 
			    (strcmp(st_cntpos_crrnt.c_undrlyng,
																ptr_st_pstn_actn->c_undrlyng) == 0 ) &&
          /**** Commented for Ver  2.7
			    (strcmp(st_cntpos_crrnt.c_expry_dt,
																ptr_st_pstn_actn->c_expry_dt) == 0 )
          Comment ends ***/
          /*** Ver 2.7 added for DL-2 order placement issue ***/
          (strcasecmp(st_cntpos_crrnt.c_expry_dt,
                                ptr_st_pstn_actn->c_expry_dt) == 0 ) && 
					(st_cntpos_crrnt.c_exrc_typ == ptr_st_pstn_actn->c_exrc_typ) )
			{
  			memcpy ( &st_cntpos_old, 
                 &st_cntpos_crrnt, 
                 sizeof( st_cntpos_old ) );

				i_returncode =	fn_apply_cnt_actn_fpl ( c_ServiceName,
																						ptr_st_pstn_actn, 
                            								&st_cntpos_crrnt,
                        										ptr_st_err_msg );
  			if ( i_returncode == -1 )
  			{
  				return FAILURE;
  			}

  			memcpy ( &st_cntpos_md_rc, 
                 &st_cntpos_crrnt, 
								 sizeof( st_cntpos_md_rc ) );

				c_pos_avl = 'Y';
			} 
				
			fn_sum_cpos ( st_cntpos_crrnt, 
                    ptr_st_undfut_pos_to_be );
	}

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

	/** If the client is building a position for the first time in the **/
	/** contract then it will not appear in the above list. Hence we   **/
	/** process them seperately                                        **/
	if ( c_pos_avl == 'N' )
	{
   	strcpy( st_cntpos_md_rc.c_cln_mtch_accnt,
																ptr_st_pstn_actn->c_cln_mtch_accnt );
   	strcpy( st_cntpos_md_rc.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
   	strcpy( st_cntpos_md_rc.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
   	strcpy( st_cntpos_md_rc.c_expry_dt, ptr_st_pstn_actn->c_expry_dt );
   	st_cntpos_md_rc.c_prd_typ  = ptr_st_pstn_actn->c_prd_typ;
   	st_cntpos_md_rc.c_exrc_typ  = ptr_st_pstn_actn->c_exrc_typ;
   	st_cntpos_md_rc.c_opt_typ  = ptr_st_pstn_actn->c_opt_typ;
   	st_cntpos_md_rc.l_strike_prc  = ptr_st_pstn_actn->l_strike_prc;
   	st_cntpos_md_rc.c_ctgry_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
   	st_cntpos_md_rc.c_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;
   	st_cntpos_md_rc.l_ibuy_qty = 0;
   	st_cntpos_md_rc.d_ibuy_ord_vl = 0;
   	st_cntpos_md_rc.l_isell_qty = 0;
   	st_cntpos_md_rc.d_isell_ord_vl = 0;
   	st_cntpos_md_rc.l_exbuy_qty = 0;
   	st_cntpos_md_rc.d_exbuy_ord_vl = 0;
   	st_cntpos_md_rc.l_exsell_qty = 0;
   	st_cntpos_md_rc.d_exsell_ord_vl = 0;
   	st_cntpos_md_rc.l_buy_exctd_qty = 0;
   	st_cntpos_md_rc.l_sell_exctd_qty = 0;
   	st_cntpos_md_rc.c_opnpstn_flw = 'N';
   	st_cntpos_md_rc.l_opnpstn_qty = 0;
   	st_cntpos_md_rc.d_org_opn_val = 0;
   	st_cntpos_md_rc.d_mtm_opn_val = 0;
   	st_cntpos_md_rc.l_und_opn_qty = 0;
   	st_cntpos_md_rc.d_und_opn_val = 0;
   	st_cntpos_md_rc.d_ibuy_mrgn = 0;
   	st_cntpos_md_rc.d_isell_mrgn = 0;
   	st_cntpos_md_rc.d_exbuy_mrgn = 0;
   	st_cntpos_md_rc.d_exsell_mrgn = 0;
   	st_cntpos_md_rc.d_ordr_mrgn = 0;
   	st_cntpos_md_rc.c_oprn_typ = '*';

		i_returncode =	fn_apply_cnt_actn_fpl ( c_ServiceName,
																				ptr_st_pstn_actn, 
                        								&st_cntpos_md_rc,
                        								ptr_st_err_msg );
  	if ( i_returncode == -1 )
  	{
  		return FAILURE;
  	}

		fn_sum_cpos ( st_cntpos_md_rc, 
                  ptr_st_undfut_pos_to_be );
	}

	if ( st_cntpos_md_rc.l_opnpstn_qty > 0 )
	{
		st_cntpos_md_rc.c_opnpstn_flw = BUY;
	}
	else if ( st_cntpos_md_rc.l_opnpstn_qty < 0 )
	{
		st_cntpos_md_rc.c_opnpstn_flw = SELL;
	}	
  else 
  {
		st_cntpos_md_rc.c_opnpstn_flw = NEUTRAL;
  }

	/** Update the contract level position on which the action has been **/
	/** applied                                                         **/
	if( c_pos_avl == 'N')
	{

   	EXEC SQL
     	INSERT INTO FFP_FO_FUTURES_PSTN
     	(
				FFP_CLM_MTCH_ACCNT,
				FFP_XCHNG_CD,
				FFP_PRDCT_TYP,
				FFP_INDSTK,
				FFP_UNDRLYNG,
				FFP_EXPRY_DT,
				FFP_EXER_TYP,
				FFP_CNTRCT_TAG,
				FFP_IBUY_QTY,
				FFP_IBUY_ORD_VAL,
				FFP_ISELL_QTY,
				FFP_ISELL_ORD_VAL,
				FFP_EXBUY_QTY,
				FFP_EXBUY_ORD_VAL,
				FFP_EXSELL_QTY,
				FFP_EXSELL_ORD_VAL,
				FFP_BUY_EXCTD_QTY,
				FFP_SELL_EXCTD_QTY,
				FFP_OPNPSTN_FLW,
				FFP_OPNPSTN_QTY,
				FFP_OPNPSTN_VAL,
				FFP_MTM_OPN_VAL
			)
			VALUES
			(
				:st_cntpos_md_rc.c_cln_mtch_accnt,
     		:st_cntpos_md_rc.c_xchng_cd,
     		:st_cntpos_md_rc.c_prd_typ,
     		:st_cntpos_md_rc.c_ctgry_indstk,
     		:st_cntpos_md_rc.c_undrlyng,
     		to_date(:st_cntpos_md_rc.c_expry_dt,'DD-Mon-YYYY'),
     		:st_cntpos_md_rc.c_exrc_typ,
     		:st_cntpos_md_rc.c_cntrct_tag,
     		:st_cntpos_md_rc.l_ibuy_qty,
     		:st_cntpos_md_rc.d_ibuy_ord_vl,
     		:st_cntpos_md_rc.l_isell_qty,
     		:st_cntpos_md_rc.d_isell_ord_vl,
     		:st_cntpos_md_rc.l_exbuy_qty,
     		:st_cntpos_md_rc.d_exbuy_ord_vl,
     		:st_cntpos_md_rc.l_exsell_qty,
     		:st_cntpos_md_rc.d_exsell_ord_vl,
     		:st_cntpos_md_rc.l_buy_exctd_qty,
     		:st_cntpos_md_rc.l_sell_exctd_qty,
     		:st_cntpos_md_rc.c_opnpstn_flw,
     		:st_cntpos_md_rc.l_opnpstn_qty,
     		:st_cntpos_md_rc.d_org_opn_val,
     		:st_cntpos_md_rc.d_mtm_opn_val
			);

		if ( SQLCODE != 0 )
   	{
   		fn_errlog(c_ServiceName, "S31090", SQLMSG, ptr_st_err_msg->c_err_msg );
   		return FAILURE;
   	}
	}
	else
	{
   	EXEC SQL
     	UPDATE  FFP_FO_FUTURES_PSTN
			SET     FFP_IBUY_QTY       = :st_cntpos_md_rc.l_ibuy_qty,
							FFP_IBUY_ORD_VAL   = :st_cntpos_md_rc.d_ibuy_ord_vl,
							FFP_ISELL_QTY      = :st_cntpos_md_rc.l_isell_qty,
							FFP_ISELL_ORD_VAL  = :st_cntpos_md_rc.d_isell_ord_vl,
							FFP_EXBUY_QTY      = :st_cntpos_md_rc.l_exbuy_qty,
							FFP_EXBUY_ORD_VAL  = :st_cntpos_md_rc.d_exbuy_ord_vl,
							FFP_EXSELL_QTY     = :st_cntpos_md_rc.l_exsell_qty,
							FFP_EXSELL_ORD_VAL = :st_cntpos_md_rc.d_exsell_ord_vl,
							FFP_BUY_EXCTD_QTY  = :st_cntpos_md_rc.l_buy_exctd_qty,
							FFP_SELL_EXCTD_QTY = :st_cntpos_md_rc.l_sell_exctd_qty,
							FFP_OPNPSTN_FLW    = :st_cntpos_md_rc.c_opnpstn_flw,
							FFP_OPNPSTN_QTY    = :st_cntpos_md_rc.l_opnpstn_qty,
							FFP_OPNPSTN_VAL    = :st_cntpos_md_rc.d_org_opn_val,
							FFP_MTM_OPN_VAL    = :st_cntpos_md_rc.d_mtm_opn_val,
              FFP_TRG_PRC        = DECODE(:st_cntpos_md_rc.c_opnpstn_flw,'N',0,FFP_TRG_PRC), /** Ver 3.1 **/
              FFP_MIN_TRG_PRC    = DECODE(:st_cntpos_md_rc.c_opnpstn_flw,'N',0,FFP_MIN_TRG_PRC) /** Ver 3.1 **/
			WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
			AND			FFP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
			AND			FFP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
			AND			FFP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
     	AND     FFP_EXPRY_DT       = to_date(:ptr_st_pstn_actn->c_expry_dt,
																			'DD-Mon-YYYY')
     	AND     FFP_EXER_TYP       = :ptr_st_pstn_actn->c_exrc_typ
			AND			FFP_CNTRCT_TAG		 = :ptr_st_pstn_actn->c_cntrct_tag;

		if ( SQLCODE != 0 )
   	{
   		fn_errlog(c_ServiceName, "S31095", SQLMSG, ptr_st_err_msg->c_err_msg );
   		return FAILURE;
	 	}
	}

	if( DEBUG_MSG_LVL_3 )
  {
		fn_userlog ( c_ServiceName, "*************	SFO_UPD_FUT_PLS - IV	*************");
		fn_userlog ( c_ServiceName, "Calcualted underlying level position" );
		fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_ibuy_qty );
		fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", ptr_st_undfut_pos_to_be->d_ibuy_ord_vl );
		fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_isell_qty );
		fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", ptr_st_undfut_pos_to_be->d_isell_ord_vl );
		fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_exbuy_qty );
		fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", ptr_st_undfut_pos_to_be->d_exbuy_ord_vl );
		fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_exsell_qty );
		fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", ptr_st_undfut_pos_to_be->d_exsell_ord_vl );
		fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", ptr_st_undfut_pos_to_be->l_buy_exctd_qty );
		fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", ptr_st_undfut_pos_to_be->l_sell_exctd_qty );
		fn_userlog ( c_ServiceName, "Open qty          :%ld:", ptr_st_undfut_pos_to_be->l_opnpstn_qty );
	}

  if( DEBUG_MSG_LVL_3 ) /*** Ver 4.3 ***/
  {
    fn_userlog ( c_ServiceName, "Original open val :%lf:", ptr_st_undfut_pos_to_be->d_org_opn_val );
    fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", ptr_st_undfut_pos_to_be->d_mtm_opn_val );
    fn_userlog ( c_ServiceName, "Add Margin val    :%lf:", ptr_st_undfut_pos_to_be->d_add_mrgn_val );
	}

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog ( c_ServiceName, "*************	SFO_UPD_FUT_PLS - V	*************");
		fn_userlog ( c_ServiceName, "Calculating margin" );
	}
	/** Calculate the margin on the new underlying position **/
	i_returncode = fn_upd_mrgn_fpl ( c_ServiceName, 
                               ptr_st_pstn_actn, 
											         ptr_st_undfut_pos_crrnt, 
											         ptr_st_undfut_pos_to_be, 
                               ptr_st_err_msg );

  if ( i_returncode != 0 )
  {
  	return FAILURE;
  }


	if( DEBUG_MSG_LVL_3 ) 
	{
		fn_userlog ( c_ServiceName, "Current margin values" );
		fn_userlog ( c_ServiceName, "Order level margin     :%lf:", ptr_st_undfut_pos_crrnt->d_ordr_mrgn );
		fn_userlog ( c_ServiceName, "Executed level margin  :%lf:", ptr_st_undfut_pos_crrnt->d_exctd_mrgn );
		fn_userlog ( c_ServiceName, "Spread level margin    :%lf:", ptr_st_undfut_pos_crrnt->d_sprd_mrgn );
		fn_userlog ( c_ServiceName, "Spread profit and loss :%lf:", ptr_st_undfut_pos_crrnt->d_sprd_pl );
		fn_userlog ( c_ServiceName, "Trade level margin  		:%lf:", ptr_st_undfut_pos_crrnt->d_trd_mrgn );
		fn_userlog ( c_ServiceName, "To be margin values" );
		fn_userlog ( c_ServiceName, "Order level margin     :%lf:", ptr_st_undfut_pos_to_be->d_ordr_mrgn );
		fn_userlog ( c_ServiceName, "Executed level margin  :%lf:", ptr_st_undfut_pos_to_be->d_exctd_mrgn );
		fn_userlog ( c_ServiceName, "Spread level margin    :%lf:", ptr_st_undfut_pos_to_be->d_sprd_mrgn );
		fn_userlog ( c_ServiceName, "Spread profit and loss :%lf:", ptr_st_undfut_pos_to_be->d_sprd_pl );
		fn_userlog ( c_ServiceName, "Trade level margin  		:%lf:", ptr_st_undfut_pos_to_be->d_trd_mrgn );
	}

	/** The code from this point onwards does the following activity   **/
	/** Based on the type of action compare the current margin with    **/
	/** required margin and update them. Do the profit loss correction **/

	/** This bit of code down below checks the difference betweend the  **/
	/** current order level margin with the required order level margin **/
	/** then take a corrective measure. This code need not be called for**/
	/** action which do not involve any order level margin change       **/
  	switch ( ptr_st_pstn_actn->l_actn_typ )
  	{
    	case  SYSTEM_PLACE_ORDER:
     				strcpy( c_narration_id , ON_ORDER_PLACEMENT);
      			c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; 
          	break;

    	case  JOINT_SQUARE_OFF_ORDER:			/*Case maintained for provision of spread */
     				strcpy( c_narration_id , ON_ORDER_PLACEMENT);
      			c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; 
          	break;

    	case  ORS_NEW_ORD_REQ:
     				strcpy( c_narration_id , ON_ORDER_PLACEMENT);
      			c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT; 
          	break;

    	case  ORS_NEW_ORD_ACPT:
     				strcpy( c_narration_id , ON_ORDER_ACCEPTANCE);
						if ( ptr_st_pstn_actn->c_mtm_flag == ORD_ACCPT_FOR_SYSTEM_SQ_OFF )
						{
							c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
						}
						else
						{
      				c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;
						}
          	break;

    	case  ORS_NEW_ORD_RJCT:
     				strcpy( c_narration_id , ON_ORDER_REJECTION);
      			c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT; 
          	break;

    	case  ORS_MOD_ORD_REQ:
     				strcpy( c_narration_id , ON_MODIFICATION_PLACEMENT);
      			c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT; 
          	break;

    	case  ORS_MOD_ORD_ACPT:
     				strcpy( c_narration_id , ON_MODIFICATION_ACCEPTANCE);
      			c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;
          	break;

    	case  ORS_MOD_ORD_RJCT:
     				strcpy( c_narration_id , ON_MODIFICATION_REJECTION);
      			c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT; 
          	break;

    	case  ORS_CAN_ORD_REQ:
     				strcpy( c_narration_id , ON_CANCELLATION_PLACEMENT);
      			/********************************************************
            Modified to support the Increase in Initial Margin % and 
            the cancellation of the order
            c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT; 
            ********************************************************/
      			c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; 
          	break;

    	case  ORS_CAN_ORD_ACPT:
     				strcpy( c_narration_id , ON_CANCELLATION_ACCEPTANCE);
      			/********************************************************
            Modified to support the Increase in Initial Margin % and 
            the cancellation of the order
            c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT; 
            ********************************************************/
      			c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; 
          	break;

    	case  ORS_CAN_ORD_RJCT:
     				strcpy( c_narration_id , ON_CANCELLATION_REJECT);
      			/********************************************************
            Modified to support the Increase in Initial Margin % and 
            the cancellation of the order
            c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT; 
            ********************************************************/
      			c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; 
          	break;

    	case  ORS_TRD_CONF:
     				strcpy( c_narration_id , ON_TRADE_EXECUTION);
      			c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT; 
          	break;
		
			case  ORS_ORD_EXP:		/**** Ver 1.2 ****/
						strcpy( c_narration_id , ON_EXPIRY);
						c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;
						break;
    	default:
          	strcpy( ptr_st_err_msg->c_err_msg, "Invalid action type");
  					fn_userlog ( c_ServiceName,"Invalid action type");
    				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
          	break;
		}

		d_diff_UOM = ptr_st_undfut_pos_crrnt->d_ordr_mrgn -
								 ptr_st_undfut_pos_to_be->d_ordr_mrgn ;
	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog ( c_ServiceName, "Order level- Difference in UOM :%lf:", d_diff_UOM );
	}

		if ( d_diff_UOM != 0 )
		{
			i_returncode = fn_upd_limits( c_ServiceName,
										 								ptr_st_pstn_actn,
                  	 								ptr_st_err_msg,
										 								c_narration_id,
										 								c_dr_without_lmt_flg,
										 								d_diff_UOM,
																		&d_balance_amt);
      if ( i_returncode != 0 )
      {
    		return i_returncode;
      }
		
			/*** Added to take care of balance amount in case of ***/
			/*** DEBIT_TILL_LIMIT. d_balance_amt is added        ***/
      /*** since it is always negative or Zero             ***/	
			ptr_st_undfut_pos_to_be->d_ordr_mrgn =
													ptr_st_undfut_pos_to_be->d_ordr_mrgn +
													d_balance_amt ;
		}
	

	/** The code down below is to take care of trade confirmations **/
	/** First we check the current executed level margin with the  **/
	/** required margin and correct it. The same is then done to   **/
	/** spread level margin followed by the spread profit and loss **/
	/** If it is a cover leg at the contract level we apply the    **/
	/** profit and loss at the contract level.                     **/
	if (  ptr_st_pstn_actn->l_actn_typ == ORS_TRD_CONF )
	{

		if ( ptr_st_pstn_actn->l_cover_qty > 0 )
		{
			d_diff_amv = ptr_st_undfut_pos_crrnt->d_add_mrgn_val -
									 ptr_st_undfut_pos_to_be->d_add_mrgn_val;

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog ( c_ServiceName, "In Trade confirmation-Difference in UAMV :%lf:", d_diff_amv );
	}

			if( d_diff_amv != 0 )
			{
				i_returncode = fn_upd_limits( c_ServiceName,
								 											ptr_st_pstn_actn,
               	 											ptr_st_err_msg,
								 											RELEASE_OF_ADD_MARGIN,
								 											DEBIT_WITHOUT_LIMIT,
								 											d_diff_amv,
																			&d_balance_amt);
      	if ( i_returncode != 0 )
      	{
    			return i_returncode;
      	}
			}

			if (ptr_st_pstn_actn->c_trnsctn_flw == BUY )
			{
				d_pl_amt = ( (st_cntpos_old.d_mtm_opn_val /
											st_cntpos_old.l_opnpstn_qty ) -
										 ptr_st_pstn_actn->l_exec_rt ) * 
										 ptr_st_pstn_actn->l_cover_qty ;
			}
			else
			{
				d_pl_amt = ( ptr_st_pstn_actn->l_exec_rt -
										( st_cntpos_old.d_mtm_opn_val / 
											st_cntpos_old.l_opnpstn_qty) ) *
									    ptr_st_pstn_actn->l_cover_qty ;
			} 

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog (c_ServiceName,"In Trade confirmation-Profit/Loss at contract level on execution :%lf:", d_pl_amt );
	}

     	if ( d_pl_amt != 0 )
     	{

				strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks );

				 /*sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s", Commented in Ver 4.4 */
					 sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s-", /** Ver 4.4 **/
									ptr_st_pstn_actn->c_undrlyng,
									ptr_st_pstn_actn->c_expry_dt);
					strcat(ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks); /** Ver 4.4 **/

				/*****  NRI - TDS Starts under Ver 3.4 *****/

				/**** commnted in ver 4.1 
        if(strncmp(ptr_st_pstn_actn->c_cln_mtch_accnt, "751", 3) == 0)  ****/
				/*** Ver 4.1 Starts ****/
				
					MEMSET(sql_iai_type.arr);
          EXEC SQL
          SELECT  IAI_TYPE
          INTO    :sql_iai_type
          FROM    IAI_INFO_ACCOUNT_INFO
          WHERE   IAI_MATCH_ACCOUNT_NO  = :ptr_st_pstn_actn->c_cln_mtch_accnt;
				if ( SQLCODE != 0 )
				{
					fn_errlog( c_ServiceName, "S31100", SQLMSG,  ptr_st_err_msg->c_err_msg );
					return FAILURE;
				}
				/*** Ver 4.1 Ends ***/
				if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") == 0) /*** Condition addded in ver 4.1 ***/
        {
            strcpy(c_narration_id,TDS_NRI);
            strcpy(c_reason_cd,"Profit Loss on Cover Leg");

            i_returncode = fn_tds( c_ServiceName,
                                   ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    c_reason_cd,
                                    DEBIT_WITHOUT_LIMIT,
                                    d_pl_amt,
                                    &d_balance_amt);

            if ( i_returncode != 0 )
            {
              return i_returncode;
            }
        }
				/*****  NRI - TDS ends under Ver 3.4 *****/

				i_returncode = fn_upd_limits( c_ServiceName,
									 										ptr_st_pstn_actn,
                 	 										ptr_st_err_msg,
									 										PROFIT_LOSS_ON_COVER_LEG,
									 										DEBIT_WITHOUT_LIMIT,
									 										d_pl_amt,
																			&d_balance_amt);
     		if ( i_returncode != 0 )
     		{
    			return i_returncode;
     		}
				strcpy ( ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks );
			}
		} /*********** if-end of cover qty >  0 *************/

		d_diff_UTM = ptr_st_undfut_pos_crrnt->d_trd_mrgn -
								 ptr_st_undfut_pos_to_be->d_trd_mrgn;	

	if( DEBUG_MSG_LVL_3 )
  {
		fn_userlog ( c_ServiceName, "In Trade confirmation-Difference in UTM :%lf:", d_diff_UTM );
	}

		if ( d_diff_UTM != 0 )
		{
			i_returncode = fn_upd_limits( c_ServiceName,
									 									ptr_st_pstn_actn,
                 	 									ptr_st_err_msg,
									 									MARGIN_ADJ_ON_TRD_EXEC,
									 									DEBIT_TILL_LIMIT,
									 									d_diff_UTM,
																		&d_balance_amt);
     	if ( i_returncode != 0 )
     	{
    		return i_returncode;
     	}
			/*** Added to take care of balance amount in case ***/
			/***  of DEBIT_TILL_LIMIT. d_balance_amt is added ***/
      /*** since it is always negative or Zero             ***/	

			ptr_st_undfut_pos_to_be->d_trd_mrgn =
												ptr_st_undfut_pos_to_be->d_trd_mrgn +
												d_balance_amt;

			d_bal_to_apply = d_balance_amt;

			if ( (d_bal_to_apply*-1.0) > ptr_st_undfut_pos_to_be->d_exctd_mrgn )
			{
				ptr_st_undfut_pos_to_be->d_exctd_mrgn = 0;
				d_bal_to_apply = d_bal_to_apply +
												 ptr_st_undfut_pos_to_be->d_exctd_mrgn;
			}
			else
			{
				ptr_st_undfut_pos_to_be->d_exctd_mrgn = 
														ptr_st_undfut_pos_to_be->d_exctd_mrgn +
														d_bal_to_apply ;
				d_bal_to_apply = 0;
			}

			if ( (d_bal_to_apply*-1.0) > ptr_st_undfut_pos_to_be->d_sprd_mrgn )
			{
				ptr_st_undfut_pos_to_be->d_sprd_mrgn = 0;
				d_bal_to_apply = d_bal_to_apply +
												 ptr_st_undfut_pos_to_be->d_sprd_mrgn;
			}
			else
			{
				ptr_st_undfut_pos_to_be->d_sprd_mrgn = 
														ptr_st_undfut_pos_to_be->d_sprd_mrgn +
														d_bal_to_apply ;
				d_bal_to_apply = 0;
			}
			ptr_st_undfut_pos_to_be->d_sprd_pl = 
													ptr_st_undfut_pos_to_be->d_sprd_pl -
													d_bal_to_apply;
		}

	}  /*********** if-end of ORS_TRD_CONF  *************/

		return SUCCESS;
}

int fn_call_actn_add_mrgn_fpl( char *c_ServiceName,
													 struct vw_pstn_actn *ptr_st_pstn_actn,
                  				 struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                  				 struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                  	   		 struct vw_err_msg *ptr_st_err_msg,
													 char *c_imtm_addmrgn_flg)  /** Ver 3.1 ***/
{
  int i_returncode;
	double d_amount;
	double d_balance_amt;
  char c_narration_id[4];
	char c_tmp_rmrks [ 133 ] ;  /** 1.7 **/
  varchar c_exp_dt[LEN_DATE]; /** 1.7 **/

	/** On add margin we add up margin to the executed level margin at **/
	/** underlying level                                               **/

  	memcpy ( ptr_st_undfut_pos_to_be, 
             ptr_st_undfut_pos_crrnt, 
             sizeof( struct vw_undfut_pos ) );

		ptr_st_undfut_pos_to_be->d_add_mrgn_val = 
																ptr_st_undfut_pos_to_be->d_add_mrgn_val +
															  ptr_st_pstn_actn->d_add_mrgn_amt ;

		d_amount = (-1) * ptr_st_pstn_actn->d_add_mrgn_amt ;

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog ( c_ServiceName, "Add margin amount :%lf:", d_amount );
		fn_userlog ( c_ServiceName, "To be Add margin value :%lf:", 
															ptr_st_undfut_pos_to_be->d_add_mrgn_val );
	}

		if ( ptr_st_pstn_actn->l_actn_typ == ADD_MARGIN  )
		{
  		strcpy(c_narration_id,ON_USER_ADD_MARGIN);
		}
		else
		{
  		strcpy(c_narration_id,ON_SYSTEM_ADD_MARGIN);
		}


		 /***************** Ver 1.7 Starts *****************************/
		if( DEBUG_MSG_LVL_3 )
  	{
			fn_userlog ( c_ServiceName, " ---------------- Remark Added ----------------------");
		}

		MEMSET(c_exp_dt);

		EXEC SQL
        SELECT FFP_EXPRY_DT
        INTO :c_exp_dt
        FROM FFP_FO_FUTURES_PSTN
        WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
        AND     FFP_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
        AND     FFP_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
        AND     FFP_INDSTK = :ptr_st_pstn_actn->c_ctgry_indstk
        AND     FFP_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
        AND     FFP_CNTRCT_TAG = :ptr_st_pstn_actn->c_cntrct_tag;

        if ( SQLCODE != 0  && SQLCODE == NO_DATA_FOUND)
        {
          fn_userlog(c_ServiceName,"Failed While Getting Expiry Date");
        }	


			if( DEBUG_MSG_LVL_3 )
			{
      	fn_userlog ( c_ServiceName, "c_narration_id :%s",c_narration_id);
        fn_userlog ( c_ServiceName, "Underlying :%s",ptr_st_pstn_actn->c_undrlyng);
        fn_userlog ( c_ServiceName, "Product Type:%c",ptr_st_pstn_actn->c_prd_typ);
        fn_userlog ( c_ServiceName, "Contract Tag :%c", ptr_st_pstn_actn->c_cntrct_tag);
        fn_userlog ( c_ServiceName, "Expiry date :%s", c_exp_dt.arr);
      }


			sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s",
              ptr_st_pstn_actn->c_undrlyng,
              c_exp_dt.arr);
			if( DEBUG_MSG_LVL_3 )
  		{
    		fn_userlog ( c_ServiceName, "Remark :%s",ptr_st_pstn_actn->c_ref_rmrks);	
			}

		 /***************** Ver 1.7 Ends *****************************/

		if ( d_amount != 0 )
		{
			i_returncode = fn_upd_limits( c_ServiceName,
								 										ptr_st_pstn_actn,
         	     	 										ptr_st_err_msg,
								 										c_narration_id,
								 										DEBIT_WHEN_LIMIT,
								 										d_amount,
																		&d_balance_amt);
      if ( i_returncode != 0 )
      {
				switch ( i_returncode )
				{
					case INSUFFICIENT_LIMITS :
						d_limit_MTM	= d_balance_amt	;		
           /*	fn_errlog(c_ServiceName,"B28558",DEFMSG,ptr_st_err_msg->c_err_msg); ** Commented in ver 2.4 ***/
						fn_userlog ( c_ServiceName, "Inside INSUFFICIENT_LIMITS");						/*** Added in ver 2.4  ***/
						return INSUFFICIENT_LIMITS;
						break;

					default :
						return FAILURE;
						break;
				}
			}
			 *c_imtm_addmrgn_flg='Y'; /** Ver 3.1 **/
			 strcpy ( ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks ); /** 1.7 **/
		}
		return SUCCESS;
}

int fn_call_actn_imtm_fpl( char *c_ServiceName,
											 struct vw_pstn_actn *ptr_st_pstn_actn,
                  		 struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                  		 struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                  	 	 struct vw_err_msg *ptr_st_err_msg,
											 char   *c_imtm_addmrgn_flg )  /** Ver 3.1 ***/
{

	double	d_loss_prcnt;
	double	d_thrshld_mtm_lss_pcntg;
	double	d_balance_amt;
	double	d_diff_TM = 0.0;
	double	d_bal_to_apply;
	double	d_base_prc;								/***	Ver	1.8	***/
	double	d_amnt_blckd  = 0.0;			/***	Ver	1.8	***/
  double  d_mm_trd_mrgn=0.0;      /***  Ver 3.9 ***/

  char c_pos_avl;
	char	c_err_msg[256];
	char	c_imtm_rmrks[256];

  int i_returncode;
  int i_ret_val;
  int i_trnsctn;

	/*long	l_init_mrgn_prcnt;		***	Ver	1.8	***/  /*** Ver 2.5 ***/
	double d_init_mrgn_prcnt;     /*** Ver 2.5 ***/
	long	l_run_no;								/***	Ver	1.8	***/

	TPTRANID tranid ;

  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;             /* a cursor variable */
		char	sql_cln_mtch_accnt[11];
		char	sql_xchng_cd[4];
		char	sql_prd_typ;
		char	sql_cntrct_tag;
		char	c_openpstn_flow;
		char	sql_undrlyng[7];
    varchar c_exp_dt[LEN_DATE];
		long		l_count ;
		double	d_prft_loss;
		double	d_avl_mrgn;
		double	d_addnl_mrgn_needed;
    double  d_adhoc_mrgn_needed;      /***  Ver	1.8  ***/

		/** Current contract level positions of other contracts in the same  **/
    /** underlying                                                       **/
    struct vw_cntfut_pos st_cntpos_crrnt;
		/** Copy of contract level position on which action is to be done taken **/
    /** before applying the action                                          **/
    struct vw_cntfut_pos st_cntpos_old;
		/** Contract level position on which action is to be done **/
    struct vw_cntfut_pos st_cntpos_md_rc;
  EXEC SQL END DECLARE SECTION;

	strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
	strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
	strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
	sql_prd_typ = ptr_st_pstn_actn->c_prd_typ;
	sql_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;

	/** This bit of code down below will fetch all the contract level **/
	/** positions. Then it will find the contract on which the input  **/
	/** action is to be performed and then perform it. It then summs  **/
	/** up all the contract level postion to arrive at a consolidated **/
	/** underlying level position. It then recalculates the margin.   **/
	/** This bit of code need not be performed for actions which do   **/
	/** not involve a change in postion                               **/

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog ( c_ServiceName, "Building new underlying position -IMTM" );
	}

	/** Prepare a list of contracts from contract position table **/
	EXEC SQL ALLOCATE :sys_cursor;

   	EXEC SQL EXECUTE
     	BEGIN
         OPEN :sys_cursor FOR
   				SELECT  FFP_CLM_MTCH_ACCNT,
									FFP_XCHNG_CD,
									FFP_PRDCT_TYP,
									FFP_INDSTK,
									FFP_UNDRLYNG,
									TO_CHAR (FFP_EXPRY_DT,'DD-Mon-YYYY'),
									FFP_EXER_TYP,
									FFP_CNTRCT_TAG,
									FFP_IBUY_QTY,
									FFP_IBUY_ORD_VAL,
									FFP_ISELL_QTY,
									FFP_ISELL_ORD_VAL,
									FFP_EXBUY_QTY,
									FFP_EXBUY_ORD_VAL,
									FFP_EXSELL_QTY,
									FFP_EXSELL_ORD_VAL,
									FFP_BUY_EXCTD_QTY,
									FFP_SELL_EXCTD_QTY,
									FFP_OPNPSTN_FLW,
									FFP_OPNPSTN_QTY,
									FFP_OPNPSTN_VAL,
									FFP_MTM_OPN_VAL,
									FFP_IMTM_OPN_VAL
					FROM		FFP_FO_FUTURES_PSTN
					WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
					AND			FFP_XCHNG_CD       = :sql_xchng_cd
					AND			FFP_PRDCT_TYP      = :sql_prd_typ
					AND			FFP_UNDRLYNG       = :sql_undrlyng
					AND			FFP_CNTRCT_TAG		 = :sql_cntrct_tag
					AND			( FFP_OPNPSTN_QTY   != 0 
									OR (FFP_IBUY_QTY + abs(FFP_ISELL_QTY) ) > 0 )
					ORDER BY FFP_EXPRY_DT asc;
     		END;
   		END-EXEC;

 	if ( SQLCODE != 0 )
  {
   	EXEC SQL FREE :sys_cursor;
   	fn_errlog ( c_ServiceName, "S31105", SQLMSG, ptr_st_err_msg->c_err_msg );
   	return FAILURE;
  }

	c_pos_avl = 'N';

	/** Fetch one contract at a time from the list. If the fetched  **/
	/** contract is the one we need to apply the change apply it.   **/
	/** Else simply add the contract to  underlying level position  **/
	 while ( 1 )
  {
   		EXEC SQL 	FETCH   :sys_cursor
								INTO		:st_cntpos_crrnt.c_cln_mtch_accnt,
           							:st_cntpos_crrnt.c_xchng_cd,
           							:st_cntpos_crrnt.c_prd_typ,
           							:st_cntpos_crrnt.c_ctgry_indstk,
           							:st_cntpos_crrnt.c_undrlyng,
           							:c_exp_dt,
           							:st_cntpos_crrnt.c_exrc_typ,
           							:st_cntpos_crrnt.c_cntrct_tag,
           							:st_cntpos_crrnt.l_ibuy_qty,
           							:st_cntpos_crrnt.d_ibuy_ord_vl,
           							:st_cntpos_crrnt.l_isell_qty,
           							:st_cntpos_crrnt.d_isell_ord_vl,
           							:st_cntpos_crrnt.l_exbuy_qty,
           							:st_cntpos_crrnt.d_exbuy_ord_vl,
           							:st_cntpos_crrnt.l_exsell_qty,
           							:st_cntpos_crrnt.d_exsell_ord_vl,
           							:st_cntpos_crrnt.l_buy_exctd_qty,
           							:st_cntpos_crrnt.l_sell_exctd_qty,
           							:st_cntpos_crrnt.c_opnpstn_flw,
           							:st_cntpos_crrnt.l_opnpstn_qty,
           							:st_cntpos_crrnt.d_org_opn_val,
           							:st_cntpos_crrnt.d_mtm_opn_val,
           							:st_cntpos_crrnt.d_imtm_opn_val;

   		if ( SQLCODE != 0 )
   		{
     		if ( SQLCODE == NO_DATA_FOUND )
     		{
       		break;
     		}
     		EXEC SQL CLOSE :sys_cursor;
     		EXEC SQL FREE :sys_cursor;
   			fn_errlog ( c_ServiceName, "S31110", SQLMSG, 
																					ptr_st_err_msg->c_err_msg );
   			return FAILURE;
   		}
			SETNULL( c_exp_dt );
			strcpy ( st_cntpos_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
			rtrim(st_cntpos_crrnt.c_xchng_cd);
			rtrim(st_cntpos_crrnt.c_undrlyng);
			rtrim(st_cntpos_crrnt.c_expry_dt);

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog ( c_ServiceName, "Contract fetched -IMTM : " );
		fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_exp_dt.arr );
		fn_userlog ( c_ServiceName, "Exercise Type     :%c:", st_cntpos_crrnt.c_exrc_typ );
		fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntpos_crrnt.l_ibuy_qty );
		fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntpos_crrnt.d_ibuy_ord_vl );
		fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntpos_crrnt.l_isell_qty );
		fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntpos_crrnt.d_isell_ord_vl );
		fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntpos_crrnt.l_exbuy_qty );
		fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntpos_crrnt.d_exbuy_ord_vl );
		fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntpos_crrnt.l_exsell_qty );
		fn_userlog ( c_ServiceName, "EXCH sell val      :%lf:", st_cntpos_crrnt.d_exsell_ord_vl );
		fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntpos_crrnt.l_buy_exctd_qty );
		fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntpos_crrnt.l_sell_exctd_qty );
		fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntpos_crrnt.l_opnpstn_qty );
	} 

  if( DEBUG_MSG_LVL_3 ) /*** Ver 4.3 ***/
  {
    fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntpos_crrnt.d_org_opn_val );
    fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntpos_crrnt.d_mtm_opn_val );
    fn_userlog ( c_ServiceName, "IMTMed open val   :%lf:", st_cntpos_crrnt.d_imtm_opn_val );
	}
		strcpy(c_expry_dt_MTM,(char *)c_exp_dt.arr);
		i_returncode =	fn_apply_cnt_actn_fpl ( c_ServiceName,
																				ptr_st_pstn_actn, 
                      									&st_cntpos_crrnt,
                        								ptr_st_err_msg );
  	if ( i_returncode == -1 )
  	{
  		return FAILURE;
  	}

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog ( c_ServiceName, "Intraday MTMed open val    :%lf:", st_cntpos_crrnt.d_imtm_opn_val );
	} 

 		memcpy ( &st_cntpos_md_rc, 
           	 &st_cntpos_crrnt, 
					 	 sizeof( st_cntpos_md_rc ) );

		fn_sum_cpos ( st_cntpos_crrnt, 
                	ptr_st_undfut_pos_to_be );

   	EXEC SQL
     	UPDATE  FFP_FO_FUTURES_PSTN
			SET			FFP_IMTM_OPN_VAL   = :st_cntpos_md_rc.d_imtm_opn_val
			WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
			AND			FFP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
			AND			FFP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
			AND			FFP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
     	AND     FFP_EXPRY_DT       = to_date(:st_cntpos_md_rc.c_expry_dt,
																			'DD-Mon-YYYY')
     	AND     FFP_EXER_TYP       = :st_cntpos_md_rc.c_exrc_typ
			AND			FFP_CNTRCT_TAG		 = :ptr_st_pstn_actn->c_cntrct_tag;

		if ( SQLCODE != 0 )
   	{
   		fn_errlog(c_ServiceName, "S31115", SQLMSG, ptr_st_err_msg->c_err_msg );
   		return FAILURE;
	 	}
	}

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

	if( DEBUG_MSG_LVL_3 )
  {
		fn_userlog ( c_ServiceName, "Calculating margin - IMTM" );
	}
	/** Calculate the margin on the new underlying position **/
	i_returncode = fn_upd_mrgn_fpl ( c_ServiceName, 
                               ptr_st_pstn_actn, 
											         ptr_st_undfut_pos_crrnt, 
											         ptr_st_undfut_pos_to_be, 
                               ptr_st_err_msg );

  if ( i_returncode == -1 )
  {
  	return FAILURE;
  }


	d_ord_mrgn_MTM_b = ptr_st_undfut_pos_crrnt->d_ordr_mrgn  ;   
	d_trd_mrgn_MTM_b = ptr_st_undfut_pos_crrnt->d_exctd_mrgn ;   
	d_spread_mrgn_MTM_b = ptr_st_undfut_pos_crrnt->d_sprd_mrgn ; 
	ptr_st_undfut_pos_to_be->d_ordr_mrgn	=	ptr_st_undfut_pos_crrnt->d_ordr_mrgn  ;			/***	Ver	1.9	***/
	d_ord_mrgn_MTM_a = ptr_st_undfut_pos_to_be->d_ordr_mrgn  ;   

	d_trd_mrgn_MTM_a = ptr_st_undfut_pos_to_be->d_exctd_mrgn ;   
	d_spread_mrgn_MTM_a = ptr_st_undfut_pos_to_be->d_sprd_mrgn ; 
	l_opnpstn_MTM = st_cntpos_crrnt.l_opnpstn_qty ; 			 


	if( DEBUG_MSG_LVL_3 )
  {
		fn_userlog ( c_ServiceName, "Current margin values - IMTM" );
		fn_userlog ( c_ServiceName, "Order level margin     :%lf:", ptr_st_undfut_pos_crrnt->d_ordr_mrgn );
		fn_userlog ( c_ServiceName, "Executed level margin  :%lf:", ptr_st_undfut_pos_crrnt->d_exctd_mrgn );
		fn_userlog ( c_ServiceName, "Spread level margin    :%lf:", ptr_st_undfut_pos_crrnt->d_sprd_mrgn );
		fn_userlog ( c_ServiceName, "Spread profit and loss :%lf:", ptr_st_undfut_pos_crrnt->d_sprd_pl );
		fn_userlog ( c_ServiceName, "Trade level margin  		:%lf:", ptr_st_undfut_pos_crrnt->d_trd_mrgn );
		fn_userlog ( c_ServiceName, "To be margin values - IMTM" );
		fn_userlog ( c_ServiceName, "Order level margin     :%lf:", ptr_st_undfut_pos_to_be->d_ordr_mrgn );
		fn_userlog ( c_ServiceName, "Executed level margin  :%lf:", ptr_st_undfut_pos_to_be->d_exctd_mrgn );
		fn_userlog ( c_ServiceName, "Spread level margin    :%lf:", ptr_st_undfut_pos_to_be->d_sprd_mrgn );
		fn_userlog ( c_ServiceName, "Spread profit and loss :%lf:", ptr_st_undfut_pos_to_be->d_sprd_pl );
		fn_userlog ( c_ServiceName, "Trade level margin  		:%lf:", ptr_st_undfut_pos_to_be->d_trd_mrgn );
		fn_userlog ( c_ServiceName, "Before Order Margin :%lf: , After Order Margin :%lf:", ptr_st_undfut_pos_crrnt->d_ordr_mrgn,ptr_st_undfut_pos_to_be->d_ordr_mrgn);
	}


	if ( ptr_st_undfut_pos_crrnt->d_trd_mrgn != ptr_st_undfut_pos_to_be->d_trd_mrgn )
		{


		d_diff_TM = ptr_st_undfut_pos_crrnt->d_trd_mrgn -
							  ptr_st_undfut_pos_to_be->d_trd_mrgn;	

		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog ( c_ServiceName, "Difference in TM :%lf:", d_diff_TM );
		}

		d_add_mrgn_MTM = d_diff_TM ; 							

		if ( d_diff_TM != 0 )
		{
			i_returncode = fn_upd_limits( c_ServiceName,
									 									ptr_st_pstn_actn,
         	       	 									ptr_st_err_msg,
									 									MARGIN_ADJ_ON_CHG_OF_MRGN_PRCNT,
									 									DEBIT_TILL_LIMIT,
									 									d_diff_TM,
																		&d_balance_amt);
     	if ( i_returncode != 0 )
     	{
 				fn_errlog(c_ServiceName, "S31120", LIBMSG, ptr_st_err_msg->c_err_msg );
 				return FAILURE;
     	}

			/***  Below changes gives exact amount blocked by system  ***/

			d_amnt_blckd  = (d_diff_TM * -1) + d_balance_amt  ;     							/***  Ver 1.8 ***/
			
		  if( DEBUG_MSG_LVL_3 )
  		{
				fn_userlog(c_ServiceName,"Amount Blocked Is :%lf:",d_amnt_blckd);			/***  Ver 1.8 ***/
			}

			/**** d_balance_amt is added since it is always negative or Zero ***/
			ptr_st_undfut_pos_crrnt->d_trd_mrgn = 
										ptr_st_undfut_pos_to_be->d_trd_mrgn + 
										d_balance_amt;


			/*** Added to take care of balance amount in case 						 ***/
			/***  of DEBIT_TILL_LIMIT. d_balance_amt is added              ***/
      /*** since it is always negative or Zero                       ***/	

			ptr_st_undfut_pos_to_be->d_trd_mrgn =
												ptr_st_undfut_pos_to_be->d_trd_mrgn +
												d_balance_amt;

			d_bal_to_apply = d_balance_amt;

			if ( (d_bal_to_apply*-1.0) > ptr_st_undfut_pos_to_be->d_exctd_mrgn )
			{
				ptr_st_undfut_pos_to_be->d_exctd_mrgn = 0;
				d_bal_to_apply = d_bal_to_apply +
												 ptr_st_undfut_pos_to_be->d_exctd_mrgn;
			}
			else
			{
				ptr_st_undfut_pos_to_be->d_exctd_mrgn = 
														ptr_st_undfut_pos_to_be->d_exctd_mrgn +
														d_bal_to_apply ;
				d_bal_to_apply = 0;
			}

			if ( (d_bal_to_apply*-1.0) > ptr_st_undfut_pos_to_be->d_sprd_mrgn )
			{
				ptr_st_undfut_pos_to_be->d_sprd_mrgn = 0;
				d_bal_to_apply = d_bal_to_apply +
												 ptr_st_undfut_pos_to_be->d_sprd_mrgn;
			}
			else
			{
				ptr_st_undfut_pos_to_be->d_sprd_mrgn = 
														ptr_st_undfut_pos_to_be->d_sprd_mrgn +
														d_bal_to_apply ;
				d_bal_to_apply = 0;
			}

			ptr_st_undfut_pos_to_be->d_sprd_pl = 
													ptr_st_undfut_pos_to_be->d_sprd_pl -
													d_bal_to_apply;

		}
	}

	d_prft_loss = ptr_st_undfut_pos_to_be->d_imtm_opn_val -
								ptr_st_undfut_pos_to_be->d_mtm_opn_val;

	if( DEBUG_MSG_LVL_3 )
	{
  	fn_userlog ( c_ServiceName,"Profit/Loss in IMTM     :%lf:",d_prft_loss);
	}

	d_avl_mrgn = ptr_st_undfut_pos_crrnt->d_trd_mrgn +
               ptr_st_undfut_pos_crrnt->d_add_mrgn_val +
							 d_prft_loss;

	if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog ( c_ServiceName,"Available Margin       :%lf:",d_avl_mrgn);
  	fn_userlog ( c_ServiceName,"Trade margin at MM     :%lf:",ptr_st_undfut_pos_to_be->d_mm_trd_mrgn);
	}

  d_avl_mrgn_MTM = d_avl_mrgn ;                                   

	/***	Ver	1.8	Starts	***/
	
  /*** It is added here for adhoc margin cr ,incase no margin  % change but change in ltp of underlying entry should be there in FAD  ***/

	if(	ptr_st_pstn_actn->l_actn_typ == ADHOC_ADD_MRGN_RQST	)
	{
		d_adhoc_mrgn_needed = ptr_st_undfut_pos_to_be->d_imtm_trd_mrgn - d_avl_mrgn;
	}

	if( ptr_st_pstn_actn->l_actn_typ == ADHOC_ADD_MRGN_RQST &&  (d_diff_TM != 0 || d_adhoc_mrgn_needed != 0 ) )    
  {
		d_base_prc	=	st_cntpos_crrnt.d_org_opn_val	/	st_cntpos_crrnt.l_opnpstn_qty	;

    if ( ptr_st_undfut_pos_to_be->l_opnpstn_qty > 0 )
    {
      c_openpstn_flow = BUY;
    }
    else if ( ptr_st_undfut_pos_to_be->l_opnpstn_qty < 0 )
    {
      c_openpstn_flow = SELL;
    }
    else
    {
      c_openpstn_flow = NEUTRAL;
    }

		EXEC SQL
      SELECT  nvl(FMM_SPAN_MRGN_PRCNT,0)
      INTO    :d_init_mrgn_prcnt  /** Ver 2.7 shud be marked as 2.5 change **/ 
      FROM    FMM_FO_MRGN_MSTR
      WHERE   FMM_PRDCT_TYP         = 'F'
			AND		  FMM_XCHNG_CD 					= :ptr_st_pstn_actn->c_xchng_cd			/*** Ver 2.3 ***/
      AND     FMM_UNDRLYNG          = :ptr_st_pstn_actn->c_undrlyng
      AND     FMM_UNDRLYNG_BSKT_ID  = 1;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31125", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

		EXEC SQL
  		SELECT  LAST_NUMBER - 1
  		INTO    :l_run_no
  		FROM    ALL_SEQUENCES
  		WHERE   SEQUENCE_NAME = 'FAD_ADDMRGN_SEQ';

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31130", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }
		if( DEBUG_MSG_LVL_3 )
  	{
    	fn_userlog(c_ServiceName,"RUN NO IS :%ld:",l_run_no);
		}

    EXEC SQL
      INSERT  INTO  FAD_ADDHOC_MRGN_DTLS
      (
        FAD_CLM_MTCH_ACCNT,
        FAD_XCHNG_CD,
        FAD_PRDCT_TYP,
        FAD_INDSTK,
        FAD_UNDRLYNG,
        FAD_CNTRCT_TAG,
        FAD_EXPRY_DT,
        FAD_RPRT_TM_STMP,
        FAD_OPNPSTN_FLW,
        FAD_OPNPSTN_QTY,
        FAD_OPNPSTN_VAL,
        FAD_INIT_MRGN_PRCNT,
        FAD_MTM_OPN_VAL,
        FAD_OLD_TRD_MRGN,
        FAD_IM_TRD_MRGN,
        FAD_PRFT_LSS_AMT,
        FAD_MIN_TRD_MRGN,
        FAD_AVL_MRGN,
        FAD_ADDNL_MRGN_REQ,
        FAD_RUN_NO,
				FAD_BASE_PRC,
				FAD_LTPCLS_PRC,
        FAD_PRC_FLG
      )
    VALUES
      (
		    :ptr_st_pstn_actn->c_cln_mtch_accnt,
        :ptr_st_pstn_actn->c_xchng_cd,
        :ptr_st_pstn_actn->c_prd_typ,
        :ptr_st_pstn_actn->c_ctgry_indstk,
        :ptr_st_pstn_actn->c_undrlyng,
        :ptr_st_pstn_actn->c_cntrct_tag,
        to_date(:st_cntpos_md_rc.c_expry_dt,'DD-Mon-YYYY'),
        sysdate,
        :c_openpstn_flow,
        :ptr_st_undfut_pos_to_be->l_opnpstn_qty,
        :ptr_st_undfut_pos_to_be->d_org_opn_val,
        :d_init_mrgn_prcnt,       /*** Ver 2.5 *** Datatype chnaged to double***/
        :ptr_st_undfut_pos_to_be->d_mtm_opn_val,
        :d_trd_mrgn_MTM_b,
        :ptr_st_undfut_pos_to_be->d_trd_mrgn,
        :d_prft_loss,
        :ptr_st_undfut_pos_to_be->d_mm_trd_mrgn,
        :d_avl_mrgn,
        :d_amnt_blckd,
        :l_run_no,
				:d_base_prc,
				:li_cmp,
        :ptr_st_pstn_actn->c_nkd_blkd_flg
      );

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31135", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }

	}

	/***	Ver	1.8	Ends	***/
	
	if ( d_avl_mrgn >= ptr_st_undfut_pos_to_be->d_mm_trd_mrgn )
	{
		return SUCCESS;
	}


	d_addnl_mrgn_needed = ptr_st_undfut_pos_to_be->d_imtm_trd_mrgn - d_avl_mrgn;


  if ( ptr_st_pstn_actn->l_actn_typ == INTRADAY_MTM_REPORT )
	{
		i_ret_val = tpsuspend ( &tranid, 0 );
  	if ( i_ret_val == -1 )
  	{
 			fn_errlog(c_ServiceName, "S31140", DEFMSG, ptr_st_err_msg->c_err_msg );
 			return FAILURE;
  	}

  	i_trnsctn = fn_begintran( c_ServiceName, ptr_st_err_msg->c_err_msg );
  	if ( i_trnsctn == -1 )
  	{
 			fn_errlog(c_ServiceName, "S31145", LIBMSG, ptr_st_err_msg->c_err_msg );
 			return FAILURE;
  	}

  	if ( ptr_st_undfut_pos_to_be->l_opnpstn_qty > 0 )
  	{
    	c_openpstn_flow = BUY;
  	}
  	else if ( ptr_st_undfut_pos_to_be->l_opnpstn_qty < 0 )
  	{
    	c_openpstn_flow = SELL;
  	}
  	else
  	{
    	c_openpstn_flow = NEUTRAL;
  	}

		if( DEBUG_MSG_LVL_3 )
  	{
		fn_userlog ( c_ServiceName, "Margin To be Inserted is  :%lf:",
                              ptr_st_undfut_pos_to_be->d_exctd_mrgn );
		fn_userlog ( c_ServiceName, "Margin Previously Inserted is :%lf:",
				ptr_st_undfut_pos_crrnt->d_trd_mrgn + ptr_st_undfut_pos_crrnt->d_add_mrgn_val);
		}
	
    EXEC SQL
     	INSERT INTO FIR_FUT_IMTM_REP
     	(
				FIR_REPORT_NO,
				FIR_CLM_MTCH_ACCNT,
				FIR_XCHNG_CD,
				FIR_PRDCT_TYP,
				FIR_INDSTK,
				FIR_UNDRLYNG,
				FIR_CNTRCT_TAG,
				FIR_MTM_FLG,
				FIR_RPRT_TM_STMP,
				FIR_OPNPSTN_FLW,
				FIR_OPNPSTN_QTY,
				FIR_OPNPSTN_VAL,
				FIR_MTM_OPN_VAL,
				FIR_OLD_TRD_MRGN,
				FIT_IM_TRD_MRGN,
				FIR_PRFT_LSS_AMT,
				FIR_MIN_TRD_MRGN,
				FIR_AVL_MRGN,
				FIR_ADDNL_MRGN_REQ,
				FIR_EXPRY_DT
			)
			VALUES
			(
				:ptr_st_pstn_actn->l_report_no,
				:ptr_st_pstn_actn->c_cln_mtch_accnt,
				:ptr_st_pstn_actn->c_xchng_cd,
				:ptr_st_pstn_actn->c_prd_typ,
				:ptr_st_pstn_actn->c_ctgry_indstk,
				:ptr_st_pstn_actn->c_undrlyng,
				:ptr_st_pstn_actn->c_cntrct_tag,
				'Y',
				sysdate,
				:c_openpstn_flow,
				:ptr_st_undfut_pos_to_be->l_opnpstn_qty,
				:ptr_st_undfut_pos_to_be->d_org_opn_val,
				:ptr_st_undfut_pos_to_be->d_mtm_opn_val,
				:ptr_st_undfut_pos_to_be->d_exctd_mrgn,  
				:ptr_st_undfut_pos_to_be->d_imtm_trd_mrgn,
				:d_prft_loss,
				:ptr_st_undfut_pos_to_be->d_mm_trd_mrgn,
				:d_avl_mrgn,
				:d_addnl_mrgn_needed,
     		to_date(:st_cntpos_md_rc.c_expry_dt,'DD-Mon-YYYY')  
			);
	
		if ( SQLCODE != 0 )
  	{
 			fn_errlog(c_ServiceName, "S31150", SQLMSG, ptr_st_err_msg->c_err_msg );
     	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 			return FAILURE;
  	}

    if ( fn_committran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31155",LIBMSG,ptr_st_err_msg->c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return ( FAILURE );
    }
	
		i_ret_val = tpresume ( &tranid, 0 );
  	if ( i_ret_val == -1 )
  	{
 			fn_errlog(c_ServiceName, "S31160", DEFMSG, ptr_st_err_msg->c_err_msg );
 			return FAILURE;
  	}
		return SUCCESS;
	}

	if( DEBUG_MSG_LVL_3 )
	{
  	fn_userlog ( c_ServiceName,"Addn. Mrgn needed      :%lf:", d_addnl_mrgn_needed);
	}

	ptr_st_pstn_actn->d_add_mrgn_amt = d_addnl_mrgn_needed ;
	
	d_add_mrgn_MTM = d_addnl_mrgn_needed ; 								
  d_mm_trd_mrgn=0.0 ;  /** Ver 3.9 **/

	if ( ptr_st_pstn_actn->l_actn_typ == ADHOC_ADD_MRGN_RQST )			/***	Ver	1.8	***/
	{
    d_mm_trd_mrgn = ptr_st_undfut_pos_to_be->d_mm_trd_mrgn;  /** Ver 3.9 **/

		i_returncode  = fn_call_addhoc_mrgn_fpl	( c_ServiceName,
                                              ptr_st_pstn_actn,
                                              ptr_st_undfut_pos_crrnt,
                                              ptr_st_undfut_pos_to_be,
                                              ptr_st_err_msg );

		if ( i_returncode != 0 )
    {
      fn_userlog(c_ServiceName,"Failed While Calling fn_call_actn_add_mrgn_fpl");
			return FAILURE;
    }
		if( DEBUG_MSG_LVL_3 )
  	{
			fn_userlog(c_ServiceName,"ptr_st_undfut_pos_to_be->d_add_mrgn_val Is :%lf:",ptr_st_undfut_pos_to_be->d_add_mrgn_val);
		}

		EXEC SQL
      UPDATE  FAD_ADDHOC_MRGN_DTLS
      SET     FAD_ADDNL_MRGN_REQ  = FAD_ADDNL_MRGN_REQ  + :ptr_st_undfut_pos_to_be->d_add_mrgn_val
      WHERE   FAD_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
      AND     FAD_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
      AND     FAD_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
      AND     FAD_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
      AND     FAD_CNTRCT_TAG      = :ptr_st_pstn_actn->c_cntrct_tag
      AND     FAD_EXPRY_DT        = to_date(:st_cntpos_md_rc.c_expry_dt,'DD-Mon-YYYY')
      AND     FAD_RUN_NO          = :l_run_no ;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31165", SQLMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      return FAILURE;
    }

    ptr_st_undfut_pos_to_be->d_mm_trd_mrgn = d_mm_trd_mrgn;  /*** Ver 3.9 **/

	}
	else
	{
    d_mm_trd_mrgn = ptr_st_undfut_pos_to_be->d_mm_trd_mrgn;  /** Ver 3.9 **/

		i_returncode 	= fn_call_actn_add_mrgn_fpl ( c_ServiceName, 
    			                         							ptr_st_pstn_actn, 
													         							ptr_st_undfut_pos_crrnt, 
													         							ptr_st_undfut_pos_to_be, 
                      			       							ptr_st_err_msg,
																							  c_imtm_addmrgn_flg );  /** Ver 3.1 **/ 
		if ( i_returncode != 0 )
 		{
			switch ( i_returncode )
			{
				case INSUFFICIENT_LIMITS :

					sprintf(ptr_st_pstn_actn->c_imtm_rmrks,
					"INSUFFICIENT LIMIT FOR ADDMARGIN-[%lf]",d_addnl_mrgn_needed);
        	/** fn_errlog(c_ServiceName,"B28558",DEFMSG,ptr_st_err_msg->c_err_msg);  *** Commented in ver 2.4 ***/
					fn_userlog(c_ServiceName," Inside INSUFFICIENT LIMIT FOR ADDMARGIN");		/*** Added in ver 2.4     ***/
					return INSUFFICIENT_LIMITS;
					break;

				default :
					return FAILURE;
					break;
			}
 		}
  
    ptr_st_undfut_pos_to_be->d_mm_trd_mrgn = d_mm_trd_mrgn;  /*** Ver 3.9 **/

	}
	sprintf(c_imtm_rmrks,
					"ADDED MARGIN FOR POSITION - [%lf]",d_addnl_mrgn_needed);

  i_returncode = fn_ins_rep_tbl ( c_ServiceName,
                                  c_err_msg,
                                  ptr_st_pstn_actn,
                                  c_imtm_rmrks );

  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31170",LIBMSG,c_err_msg);
		return FAILURE;
  }

	return SUCCESS;
}

int fn_call_actn_conv_to_fut( char *c_ServiceName,
                             struct vw_pstn_actn *ptr_st_pstn_actn,
                             struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                             struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                             struct vw_err_msg *ptr_st_err_msg)
{

	int i_returncode;
	
  double d_pl_amt = 0;
  double d_diff_UEM;
  double d_diff_amv;
  double d_diff_UTM;
  double d_diff_UOM;
  double d_diff_UAM;
  double d_UTM_amt;
  double d_balance_amt;
  double d_bal_to_apply;

	double  d_diff_add_mrgn		 = 0.0;			/*** Ver 2.4 ***/
	double	d_fut_initial_mrgn = 0.0;	    /*** Ver 2.4 ***/
	double	d_fut_min_mrgn 		 = 0.0;			/*** Ver 2.4 ***/
	double	d_avl_mrgn_fut 		 = 0.0;			/*** Ver 2.4 ***/
	double	d_avl_mrgn_fp			 = 0.0;			/*** Ver 2.4 ***/
	double	d_add_mrgn 				 = 0.0;			/*** Ver 2.4 ***/
	double	d_fp_initial_mrgn  = 0.0;			/*** Ver 2.4 ***/
	double  d_ltp 						 = 0.0; 		/*** Ver 2.4 ***/
	double  d_cntrct_pl				 = 0.0; 		/*** Ver 2.4 ***/
	double  d_undrlyng_pl			 = 0.0; 		/*** Ver 2.4 ***/
	double  d_fut_notional_pnl = 0.0; 		/*** Ver 2.4 ***/
	
	char   c_dr_lmt_flg			 = '\0';			/*** Ver 2.4 ***/	
	long 	 l_ip_len;
	long   l_lot_sz          = 0;				/*** Ver 2.4 ***/
	double d_num_of_lots		 = 0.0;			/*** Ver 2.4 ***/

	char c_narration_id[4] = "\0";				/*** Ver 3.4 ***/
	char c_reason_cd [ 2000 ] = "\0";			/*** Ver 3.4 ***/

	char  c_cntrct_tag;	
	char  c_tmp_rmrks [ 133 ] ;
	char 	c_limit_chk;
	char  c_conv_chk;

	struct vw_gt_lmt_dtls st_gt_lmt;
	
	EXEC SQL BEGIN DECLARE SECTION;
		
    sql_cursor     sys_cursor;             /* a cursor variable */
		long   l_close_qty;
    char  sql_cln_mtch_accnt[11];
    char  sql_xchng_cd[4];
    char  sql_prd_typ;
    char  sql_cntrct_tag;
    char  c_openpstn_flow;
    char  sql_undrlyng[7];
		char 	c_fut_create;
		char	c_trn_flw;
		char  c_prdct_type;

    varchar c_exp_dt[LEN_DATE];
		varchar c_trade_dt[12];
		

	/** Copy of contract level position on which action is to be done taken **/
  /** before applying the action                                          **/
    struct vw_cntfut_pos st_cntpos_old;

  /** Contract level position in other contracts of same underlyng **/
    struct vw_cntfut_pos st_cntpos_crrnt;

  /** Contract level position on which action is to be done **/
    struct vw_cntfut_pos st_cntpos_md_rc;

	/** Position action used to create futures position **/
	struct vw_pstn_actn st_pstn_actn_fut;

  EXEC SQL END DECLARE SECTION;

		memset ( &st_pstn_actn_fut, '\0', sizeof(struct vw_pstn_actn ) ) ;
		memcpy ( &st_pstn_actn_fut, ptr_st_pstn_actn, sizeof( struct vw_pstn_actn ) );

	 	strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
    strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
    strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
    sql_prd_typ = ptr_st_pstn_actn->c_prd_typ;
    sql_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;
		c_conv_chk = ptr_st_pstn_actn->c_nkd_blkd_flg;

		c_limit_chk = 'N';
	
	/***********************************************************************/
	/** This bit of code down below will fetch all the contract level 		**/
  /** positions. Then it will find the contract in which the open  			**/ 
	/** position exists, then it will perform the closing action on it		**/
  /** It summs up all the contract level postions to arrive 						**/
  /**	at a consolidated underlying level position. It then recalculates	**/ 
	/**	the margin. This bit of code should be performed for all contrats	**/
	/**	irrespective of open position exists or not, because the order 		**/
	/**	level margin need to  be recomputed															  **/
	/***********************************************************************/


	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog ( c_ServiceName, "*************	SFO_UPD_FUT_PLS - II	*************");
  	fn_userlog ( c_ServiceName, "Closing current position-CLOSE_FUTPLUS" );
  	fn_userlog ( c_ServiceName, "ptr_st_undfut_pos_crrnt.d_trd_mrgn  |%lf",ptr_st_undfut_pos_crrnt->d_trd_mrgn);/*ver 2.4 */
	}
		
	d_fp_initial_mrgn	=	ptr_st_undfut_pos_crrnt->d_trd_mrgn;  /*** Ver 2.4 ***/

/** Prepare a list of contracts from contract position table **/
  EXEC SQL ALLOCATE :sys_cursor;

    EXEC SQL EXECUTE
      BEGIN
         OPEN :sys_cursor FOR
          SELECT  FFP_CLM_MTCH_ACCNT,
                  FFP_XCHNG_CD,
                  FFP_PRDCT_TYP,
                  FFP_INDSTK,
                  FFP_UNDRLYNG,
                  TO_CHAR (FFP_EXPRY_DT,'DD-Mon-YYYY'),
                  FFP_EXER_TYP,
                  FFP_CNTRCT_TAG,
                  FFP_IBUY_QTY,
                  FFP_IBUY_ORD_VAL,
                  FFP_ISELL_QTY,
                  FFP_ISELL_ORD_VAL,
                  FFP_EXBUY_QTY,
                  FFP_EXBUY_ORD_VAL,
                  FFP_EXSELL_QTY,
                  FFP_EXSELL_ORD_VAL,
                  FFP_BUY_EXCTD_QTY,
                  FFP_SELL_EXCTD_QTY,
                  FFP_OPNPSTN_FLW,
                  FFP_OPNPSTN_QTY,
                  FFP_OPNPSTN_VAL,
                  FFP_MTM_OPN_VAL
          FROM    FFP_FO_FUTURES_PSTN
          WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
          AND     FFP_XCHNG_CD       = :sql_xchng_cd
          AND     FFP_PRDCT_TYP      = :sql_prd_typ
          AND     FFP_UNDRLYNG       = :sql_undrlyng
          AND     FFP_CNTRCT_TAG     = :sql_cntrct_tag
          ORDER BY FFP_EXPRY_DT asc;
        END;
      END-EXEC;

	if ( SQLCODE != 0 )
  {
    EXEC SQL FREE :sys_cursor;
    fn_errlog ( c_ServiceName, "S31175", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

	/*****************************************************************/
	/** Fetch one contract at a time from the list. If the fetched  **/
  /** contract is the one we need to apply the change apply it.   **/
  /** Else simply add the contract to  underlying level position  **/
	/*****************************************************************/

   while ( 1 )
  {
			d_cntrct_pl = 0.0;	/*** Ver 2.4 ***/

      EXEC SQL  FETCH   :sys_cursor
                INTO    :st_cntpos_crrnt.c_cln_mtch_accnt,
                        :st_cntpos_crrnt.c_xchng_cd,
                        :st_cntpos_crrnt.c_prd_typ,
                        :st_cntpos_crrnt.c_ctgry_indstk,
                        :st_cntpos_crrnt.c_undrlyng,
                        :c_exp_dt,
                        :st_cntpos_crrnt.c_exrc_typ,
                        :st_cntpos_crrnt.c_cntrct_tag,
                        :st_cntpos_crrnt.l_ibuy_qty,
                        :st_cntpos_crrnt.d_ibuy_ord_vl,
                        :st_cntpos_crrnt.l_isell_qty,
                        :st_cntpos_crrnt.d_isell_ord_vl,
                        :st_cntpos_crrnt.l_exbuy_qty,
                        :st_cntpos_crrnt.d_exbuy_ord_vl,
                        :st_cntpos_crrnt.l_exsell_qty,
                        :st_cntpos_crrnt.d_exsell_ord_vl,
                        :st_cntpos_crrnt.l_buy_exctd_qty,
                        :st_cntpos_crrnt.l_sell_exctd_qty,
                        :st_cntpos_crrnt.c_opnpstn_flw,
                        :st_cntpos_crrnt.l_opnpstn_qty,
                        :st_cntpos_crrnt.d_org_opn_val,
                        :st_cntpos_crrnt.d_mtm_opn_val;

			if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31180", SQLMSG,
                                          ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }

			SETNULL( c_exp_dt );
      strcpy (st_cntpos_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
      rtrim(st_cntpos_crrnt.c_xchng_cd);
      rtrim(st_cntpos_crrnt.c_undrlyng);
      rtrim(st_cntpos_crrnt.c_expry_dt);

			if ( ptr_st_pstn_actn->l_actn_typ == CONV_TO_FUT ) /*Ver 1.5*/
      ptr_st_pstn_actn->l_actn_typ = CLOSE_FUTPLUS;

      if( ptr_st_pstn_actn->l_actn_typ == CONV_TO_PART_FUT)  /*Ver 1.5*/
      ptr_st_pstn_actn->l_actn_typ = CLOSE_PART_FUTPLUS;     /*Ver 1.5*/

/*			ptr_st_pstn_actn->l_actn_typ = CLOSE_FUTPLUS; Ver 1.5 */
    	ptr_st_pstn_actn->c_exrc_typ = st_cntpos_crrnt.c_exrc_typ;
			c_fut_create = 'N';

	if( DEBUG_MSG_LVL_3 )
	{
  	fn_userlog ( c_ServiceName, "Contract fetched -CLOSE_FUTPLUS : " );
  	fn_userlog ( c_ServiceName, "FPLS Expiry date       :%s:", c_exp_dt.arr );
  	fn_userlog ( c_ServiceName, "FPLS Exercise Type     :%c:", st_cntpos_crrnt.c_exrc_typ );
  	fn_userlog ( c_ServiceName, "FPLS IWTL buy qty      :%ld:", st_cntpos_crrnt.l_ibuy_qty );
  	fn_userlog ( c_ServiceName, "FPLS IWTL buy val      :%lf:", st_cntpos_crrnt.d_ibuy_ord_vl );
  	fn_userlog ( c_ServiceName, "FPLS IWTL sell qty     :%ld:", st_cntpos_crrnt.l_isell_qty );
  	fn_userlog ( c_ServiceName, "FPLS IWTL sell val     :%lf:", st_cntpos_crrnt.d_isell_ord_vl );
  	fn_userlog ( c_ServiceName, "FPLS EXCH buy qty      :%ld:", st_cntpos_crrnt.l_exbuy_qty );
  	fn_userlog ( c_ServiceName, "FPLS EXCH buy val      :%lf:", st_cntpos_crrnt.d_exbuy_ord_vl );
  	fn_userlog ( c_ServiceName, "FPLS EXCH sell qty     :%ld:", st_cntpos_crrnt.l_exsell_qty );
  	fn_userlog ( c_ServiceName, "FPLS EXCH sell val      :%lf:", st_cntpos_crrnt.d_exsell_ord_vl );
  	fn_userlog ( c_ServiceName, "FPLS Buy exctd qty     :%ld:", st_cntpos_crrnt.l_buy_exctd_qty );
  	fn_userlog ( c_ServiceName, "FPLS Sell exctd qty    :%ld:", st_cntpos_crrnt.l_sell_exctd_qty );
  	fn_userlog ( c_ServiceName, "FPLS Open qty          :%ld:", st_cntpos_crrnt.l_opnpstn_qty );
	}
  if( DEBUG_MSG_LVL_3 ) /*** Ver 4.3 ***/
  {
    fn_userlog ( c_ServiceName, "FPLS Original open val :%lf:", st_cntpos_crrnt.d_org_opn_val );
    fn_userlog ( c_ServiceName, "FPLS MTMed open val    :%lf:", st_cntpos_crrnt.d_mtm_opn_val );
    fn_userlog ( c_ServiceName, "FPLS IMTMed open val   :%lf:", st_cntpos_crrnt.d_imtm_opn_val );
	}
	if( DEBUG_MSG_LVL_3 )
  {
		fn_userlog( c_ServiceName,"Shailesh The spl flag:%c:",ptr_st_pstn_actn->c_nkd_blkd_flg);
		fn_userlog( c_ServiceName,"Shailesh Expiry :%s:",st_cntpos_crrnt.c_expry_dt);
		fn_userlog( c_ServiceName,"Shailesh pstn Expiry :%s:",ptr_st_pstn_actn->c_expry_dt);
	}

		memcpy ( &st_cntpos_old,
                 &st_cntpos_crrnt,
                 sizeof( st_cntpos_old ) );

	  memcpy ( &st_cntpos_md_rc,
                 &st_cntpos_crrnt,
                 sizeof( st_cntpos_md_rc ) );

		if(st_cntpos_crrnt.c_opnpstn_flw == 'S') /* Ver 1.5 Added for handling sell part */
    {
      ptr_st_pstn_actn->l_new_qty = -1 * ptr_st_pstn_actn->l_new_qty;
    }
	
		if( st_cntpos_crrnt.c_opnpstn_flw != 'N' )
		{
			if( (( ptr_st_pstn_actn->c_nkd_blkd_flg == SINGLE_CONVERSION ) && 
									( strcmp(ptr_st_pstn_actn->c_expry_dt,st_cntpos_crrnt.c_expry_dt ) == 0 )) || 
								 ( ( strcmp(ptr_st_pstn_actn->c_user_id,"system") == 0 ) && (ptr_st_pstn_actn->l_session_id == 0 ))) 
			{
					c_fut_create = 'Y';
					i_returncode =  fn_apply_cnt_actn_fpl ( c_ServiceName,
																								ptr_st_pstn_actn,
																								&st_cntpos_md_rc,
																								ptr_st_err_msg );
					if ( i_returncode == -1 )
					{
						return FAILURE;
					}
			}
			else if ( ptr_st_pstn_actn->c_nkd_blkd_flg == JOINT_CONVERSION )
					 {
							strcpy( ptr_st_pstn_actn->c_expry_dt , st_cntpos_crrnt.c_expry_dt );
							c_fut_create = 'Y';
							i_returncode =  fn_apply_cnt_actn_fpl ( c_ServiceName,
																										ptr_st_pstn_actn,
																										&st_cntpos_md_rc,
																										ptr_st_err_msg );
							if ( i_returncode == -1 )
							{
								return FAILURE;
							}

					 }
		}
	
 			/**************************** Ver 2.4 Starts ****************************/

      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog ( c_ServiceName, " st_cntpos_crrnt.c_xchng_cd |%s|",st_cntpos_crrnt.c_xchng_cd);
        fn_userlog ( c_ServiceName, " st_cntpos_crrnt.c_prd_typ  |%c|",st_cntpos_crrnt.c_prd_typ);
        fn_userlog ( c_ServiceName, " st_cntpos_crrnt.c_undrlyng |%s|",st_cntpos_crrnt.c_undrlyng);
        fn_userlog ( c_ServiceName, " c_exp_dt                   |%s|",c_exp_dt.arr);
        fn_userlog ( c_ServiceName, " st_cntpos_crrnt.c_exrc_typ |%c|",st_cntpos_crrnt.c_exrc_typ);
      }

      EXEC SQL
        SELECT  FTQ_LST_TRD_PRC
        INTO    :d_ltp
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :st_cntpos_crrnt.c_xchng_cd
        AND     FTQ_PRDCT_TYP = 'F'
        AND     FTQ_UNDRLYNG  = :st_cntpos_crrnt.c_undrlyng
        AND     FTQ_EXPRY_DT  = :c_exp_dt
        AND     FTQ_EXER_TYP  = :st_cntpos_crrnt.c_exrc_typ;

      if(SQLCODE  !=  0 )
      {
        fn_errlog ( c_ServiceName, "S31185", SQLMSG, ptr_st_err_msg->c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        return FAILURE;
      }
      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog ( c_ServiceName, " d_ltp                         |%lf|",d_ltp);
        fn_userlog ( c_ServiceName, " st_cntpos_crrnt.l_opnpstn_qty |%ld|",st_cntpos_crrnt.l_opnpstn_qty);
        fn_userlog ( c_ServiceName, " st_cntpos_crrnt.d_org_opn_val |%lf|",st_cntpos_crrnt.d_org_opn_val);
      }

      if( st_cntpos_crrnt.l_opnpstn_qty  > 0 )
      {
         d_cntrct_pl = ( d_ltp * (double) st_cntpos_crrnt.l_opnpstn_qty ) - st_cntpos_crrnt.d_org_opn_val;
      }
      else if ( st_cntpos_crrnt.l_opnpstn_qty < 0 )
      {
         d_cntrct_pl = fabs(st_cntpos_crrnt.d_org_opn_val)  -  ( d_ltp * (double) abs(st_cntpos_crrnt.l_opnpstn_qty) )  ;
      }

      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog(c_ServiceName,"Contract Level PNL    |%lf|",d_cntrct_pl);
        fn_userlog(c_ServiceName,"Underlying Level PNL  |%lf|",d_undrlyng_pl);
      }

      d_undrlyng_pl = d_undrlyng_pl + d_cntrct_pl;
		
			d_num_of_lots = ((double)(abs(st_cntpos_crrnt.l_opnpstn_qty))) / ((double)(abs(ptr_st_pstn_actn->l_new_qty))) ; 
	
			if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog ( c_ServiceName, " d_num_of_lots                         |%lf|",d_num_of_lots);
      }

     /********************************** Ver 2.4 Ends ************************************/
		
		fn_sum_cpos ( st_cntpos_md_rc, ptr_st_undfut_pos_to_be );

		if ( st_cntpos_md_rc.l_opnpstn_qty > 0 )
		{
			st_cntpos_md_rc.c_opnpstn_flw = BUY;
		}
		else if ( st_cntpos_md_rc.l_opnpstn_qty < 0 )
		{
			st_cntpos_md_rc.c_opnpstn_flw = SELL;
		}
		else
		{
			st_cntpos_md_rc.c_opnpstn_flw = NEUTRAL;
		}
		
  	EXEC SQL
      UPDATE  FFP_FO_FUTURES_PSTN
      SET     FFP_IBUY_QTY       = :st_cntpos_md_rc.l_ibuy_qty,
              FFP_IBUY_ORD_VAL   = :st_cntpos_md_rc.d_ibuy_ord_vl,
              FFP_ISELL_QTY      = :st_cntpos_md_rc.l_isell_qty,
              FFP_ISELL_ORD_VAL  = :st_cntpos_md_rc.d_isell_ord_vl,
              FFP_EXBUY_QTY      = :st_cntpos_md_rc.l_exbuy_qty,
              FFP_EXBUY_ORD_VAL  = :st_cntpos_md_rc.d_exbuy_ord_vl,
              FFP_EXSELL_QTY     = :st_cntpos_md_rc.l_exsell_qty,
              FFP_EXSELL_ORD_VAL = :st_cntpos_md_rc.d_exsell_ord_vl,
              FFP_BUY_EXCTD_QTY  = :st_cntpos_md_rc.l_buy_exctd_qty,
              FFP_SELL_EXCTD_QTY = :st_cntpos_md_rc.l_sell_exctd_qty,
              FFP_OPNPSTN_FLW    = :st_cntpos_md_rc.c_opnpstn_flw,
              FFP_OPNPSTN_QTY    = :st_cntpos_md_rc.l_opnpstn_qty,
              FFP_OPNPSTN_VAL    = :st_cntpos_md_rc.d_org_opn_val,
              FFP_MTM_OPN_VAL    = :st_cntpos_md_rc.d_mtm_opn_val,
              FFP_TRG_PRC        = DECODE(:st_cntpos_md_rc.c_opnpstn_flw,'N',0,FFP_TRG_PRC), /** Ver 3.1 **/
              FFP_MIN_TRG_PRC    = DECODE(:st_cntpos_md_rc.c_opnpstn_flw,'N',0,FFP_MIN_TRG_PRC) /** Ver 3.1 **/
      WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
      AND     FFP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
      AND     FFP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
      AND     FFP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
      AND     FFP_EXPRY_DT       = to_date(:st_cntpos_crrnt.c_expry_dt,
                                      'DD-Mon-YYYY')
      AND     FFP_EXER_TYP       = :ptr_st_pstn_actn->c_exrc_typ
      AND     FFP_CNTRCT_TAG     = :ptr_st_pstn_actn->c_cntrct_tag;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31190", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }	
	 
	if( DEBUG_MSG_LVL_3 )
  {
		fn_userlog ( c_ServiceName, "*************	SFO_UPD_FUT_PLS - IV	*************");
  	fn_userlog ( c_ServiceName, "Calcualted underlying level position" );
  	fn_userlog ( c_ServiceName, "FPLS IWTL buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_ibuy_qty );
  	fn_userlog ( c_ServiceName, "FPLS IWTL buy val      :%lf:", ptr_st_undfut_pos_to_be->d_ibuy_ord_vl );
  	fn_userlog ( c_ServiceName, "FPLS IWTL sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_isell_qty );
  	fn_userlog ( c_ServiceName, "FPLS IWTL sell val     :%lf:", ptr_st_undfut_pos_to_be->d_isell_ord_vl );
  	fn_userlog ( c_ServiceName, "FPLS EXCH buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_exbuy_qty );
  	fn_userlog ( c_ServiceName, "FPLS EXCH buy val      :%lf:", ptr_st_undfut_pos_to_be->d_exbuy_ord_vl );
  	fn_userlog ( c_ServiceName, "FPLS EXCH sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_exsell_qty );
  	fn_userlog ( c_ServiceName, "FPLS EXCH sell val     :%lf:", ptr_st_undfut_pos_to_be->d_exsell_ord_vl );
  	fn_userlog ( c_ServiceName, "FPLS Buy exctd qty     :%ld:", ptr_st_undfut_pos_to_be->l_buy_exctd_qty );
  	fn_userlog ( c_ServiceName, "FPLS Sell exctd qty    :%ld:", ptr_st_undfut_pos_to_be->l_sell_exctd_qty );
  	fn_userlog ( c_ServiceName, "FPLS Open qty          :%ld:", ptr_st_undfut_pos_to_be->l_opnpstn_qty );
  	fn_userlog ( c_ServiceName, "FPLS Original open val :%lf:", ptr_st_undfut_pos_to_be->d_org_opn_val );
	} 

  if( DEBUG_MSG_LVL_3 ) /*** Ver 4.3 ***/
  {
    fn_userlog ( c_ServiceName, "FPLS MTMed open val    :%lf:", ptr_st_undfut_pos_to_be->d_mtm_opn_val );
    fn_userlog ( c_ServiceName, "FPLS Add Margin val    :%lf:", ptr_st_undfut_pos_to_be->d_add_mrgn_val );
    fn_userlog ( c_ServiceName, "FPLS Add Margin val    :%lf:", ptr_st_undfut_pos_crrnt->d_add_mrgn_val );
	}
	
	if( DEBUG_MSG_LVL_3 )
  {
		fn_userlog ( c_ServiceName, "*************	SFO_UPD_FUT_PLS - V	*************");
  	fn_userlog ( c_ServiceName, "Calculating margin" );
	}
  /** Calculate the margin on the new underlying position **/
  i_returncode = fn_upd_mrgn_fpl( c_ServiceName,
																		 ptr_st_pstn_actn,
																		 ptr_st_undfut_pos_crrnt,
																		 ptr_st_undfut_pos_to_be,
																		 ptr_st_err_msg );

  if ( i_returncode != 0 )
  {
    return FAILURE;
  }

	if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog ( c_ServiceName, "Current margin values" );
  	fn_userlog ( c_ServiceName, "FPLS Order level margin     :%lf:", ptr_st_undfut_pos_crrnt->d_ordr_mrgn );
  	fn_userlog ( c_ServiceName, "FPLS Executed level margin  :%lf:", ptr_st_undfut_pos_crrnt->d_exctd_mrgn );
  	fn_userlog ( c_ServiceName, "FPLS Spread level margin    :%lf:", ptr_st_undfut_pos_crrnt->d_sprd_mrgn );
  	fn_userlog ( c_ServiceName, "FPLS Spread profit and loss :%lf:", ptr_st_undfut_pos_crrnt->d_sprd_pl );
  	fn_userlog ( c_ServiceName, "FPLS Trade level margin     :%lf:", ptr_st_undfut_pos_crrnt->d_trd_mrgn );
  	fn_userlog ( c_ServiceName, "To be margin values" );
		fn_userlog ( c_ServiceName, "FPLS Order level margin     :%lf:", ptr_st_undfut_pos_to_be->d_ordr_mrgn );
  	fn_userlog ( c_ServiceName, "FPLS Executed level margin  :%lf:", ptr_st_undfut_pos_to_be->d_exctd_mrgn );
  	fn_userlog ( c_ServiceName, "FPLS Spread level margin    :%lf:", ptr_st_undfut_pos_to_be->d_sprd_mrgn );
  	fn_userlog ( c_ServiceName, "FPLS Spread profit and loss :%lf:", ptr_st_undfut_pos_to_be->d_sprd_pl );
  	fn_userlog ( c_ServiceName, "FPLS Trade level margin     :%lf:", ptr_st_undfut_pos_to_be->d_trd_mrgn );
		fn_userlog ( c_ServiceName, "FPLS Add Margin val    :%lf:", ptr_st_undfut_pos_to_be->d_add_mrgn_val );	/* Testing */
    fn_userlog ( c_ServiceName, "FPLS Add Margin val    :%lf:", ptr_st_undfut_pos_crrnt->d_add_mrgn_val ); /* Testing */	
	}
	
	strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks );

	sprintf(ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s-%c",
                  ptr_st_pstn_actn->c_undrlyng,
                  ptr_st_pstn_actn->c_expry_dt,
									ptr_st_pstn_actn->c_prd_typ);

	d_diff_UOM = ptr_st_undfut_pos_crrnt->d_ordr_mrgn -
                 ptr_st_undfut_pos_to_be->d_ordr_mrgn ;

	if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog ( c_ServiceName, "FPLS Difference in UOM :%lf:", d_diff_UOM );
	}

    if ( d_diff_UOM != 0 )
    {

      i_returncode = fn_upd_limits( c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    ORDER_MARGIN_ADJ_ON_FUT_CONV,
                                    DEBIT_WITHOUT_LIMIT,
                                    d_diff_UOM,
                                    &d_balance_amt);
      if ( i_returncode != 0 )
      {
        return i_returncode;
      }
		}

		if ( ptr_st_pstn_actn->l_cover_qty > 0 )
    {
		/** The added margin, if any will be released in the processing of first leg of FuturePlus and thus  ***/
		/** will be made available to Futures position creation 																						 ***/
		/** Commented in ver 2.4 ************************************************************
      d_diff_amv = ptr_st_undfut_pos_crrnt->d_add_mrgn_val -
                   ptr_st_undfut_pos_to_be->d_add_mrgn_val;
		************************************************************************************/

		d_diff_amv = ptr_st_undfut_pos_crrnt->d_add_mrgn_val;					/** Added in Ver 2.4 ***/
	
		/** ver 2.4 In part conversion part additional amount should released ***/
			
		if ( d_diff_amv != 0 )
		{
			d_diff_add_mrgn = d_diff_amv / d_num_of_lots;								/*** Added in Ver 2.4 ***/
		}

		if( DEBUG_MSG_LVL_3 )
  	{
  		fn_userlog ( c_ServiceName, "FPLS Difference in UAMV :%lf:", d_diff_add_mrgn );
		}

 		/***   if( d_diff_amv != 0 )																	 Commented in Ver 2.4 ***/

      if( d_diff_add_mrgn != 0 )																	/*** added in Ver 2.4 ***/
      {
        i_returncode = fn_upd_limits( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      RELEASE_OF_ADD_MARGIN,
                                      DEBIT_WITHOUT_LIMIT,
                                      d_diff_add_mrgn,					  /*** change in Ver 2.4 for part release ***/
                                      &d_balance_amt);
        if ( i_returncode != 0 )
        {
          return i_returncode;
        }
      }	

			/*** The profit/loss amount will always come as zero as we are closing the open position by base   ***/
			/*** price, the following activity is done in order to check the same and can be removed after testing ***/  

			if (ptr_st_pstn_actn->c_trnsctn_flw == BUY )
      {
				/***	Commented In Ver 2.0
        d_pl_amt = ( (st_cntpos_old.d_mtm_opn_val /
                      st_cntpos_old.l_opnpstn_qty ) -
                     ptr_st_pstn_actn->l_exec_rt ) *
                     ptr_st_pstn_actn->l_cover_qty ;
				**********************************************/

				d_pl_amt = ( (st_cntpos_old.d_mtm_opn_val /			
                      st_cntpos_old.l_opnpstn_qty ) -
                      d_exec_rt) *
                      ptr_st_pstn_actn->l_cover_qty ;			/***	Ver	2.0	***/
      }
      else
      {
				/***	Commented In Ver	2.0
        d_pl_amt = ( ptr_st_pstn_actn->l_exec_rt -
                    ( st_cntpos_old.d_mtm_opn_val /
                      st_cntpos_old.l_opnpstn_qty) ) *
                      ptr_st_pstn_actn->l_cover_qty ;
				***********************************************/

        d_pl_amt = ( d_exec_rt -
                    ( st_cntpos_old.d_mtm_opn_val /
                      st_cntpos_old.l_opnpstn_qty) ) *
                      ptr_st_pstn_actn->l_cover_qty ;			/***	Ver	2.0	***/
      }
			
	if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog (c_ServiceName,"FPLS Profit/Loss at contract level on execution :%lf:", d_pl_amt );
	}

		
      if ( d_pl_amt != 0 )
      {


        sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s",
                  ptr_st_pstn_actn->c_undrlyng,
                  ptr_st_pstn_actn->c_expry_dt);

				/*****  NRI - TDS Starts under Ver 3.4 *****/
				/*** Commented in Ver 4.1 ***
        if(strncmp(ptr_st_pstn_actn->c_cln_mtch_accnt, "751", 3) == 0)  ****/
				  /**** Ver 4.1 Starts ***/

          MEMSET(sql_iai_type.arr);
					EXEC SQL
          SELECT  IAI_TYPE
          INTO    :sql_iai_type
          FROM    IAI_INFO_ACCOUNT_INFO
          WHERE   IAI_MATCH_ACCOUNT_NO  = :ptr_st_pstn_actn->c_cln_mtch_accnt;
					
				if ( SQLCODE != 0 )
				{
						fn_errlog( c_ServiceName, "S31195", SQLMSG, ptr_st_err_msg->c_err_msg );
						return FAILURE;
				}
				/*** Ver 4.1 Ends ***/
				if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") == 0) /*** Condition checked in Ver 4.1 ***/

        {
            strcpy(c_narration_id,TDS_NRI);
            strcpy(c_reason_cd,"Profit Loss on Cover Leg");

            i_returncode = fn_tds( c_ServiceName,
                                   ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    c_reason_cd,
                                    DEBIT_WITHOUT_LIMIT,
                                    d_pl_amt,
                                    &d_balance_amt);

            if ( i_returncode != 0 )
            {
              return i_returncode;
            }
        }
				/*****  NRI - TDS ends under Ver 3.4 *****/

				i_returncode = fn_upd_limits( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      PROFIT_LOSS_ON_COVER_LEG,
                                      DEBIT_WITHOUT_LIMIT,
                                      d_pl_amt,
                                      &d_balance_amt);
        if ( i_returncode != 0 )
        {
          return i_returncode;
        }
        strcpy ( ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks );
      }
    } /***** if-end of cover qty >  0 *******/


		/*** In case of Joint conversion, in the processing of first leg itself, the entire trade margin is     ***/
		/*** released, and is now available for Futures Position.																								***/
		/*** Only the excessive order margin  to be charged in second leg of FuturePlus will be blocked/released***/

		d_diff_UTM = ptr_st_undfut_pos_crrnt->d_trd_mrgn -
                 ptr_st_undfut_pos_to_be->d_trd_mrgn;

	if( DEBUG_MSG_LVL_3 )
	{
  	fn_userlog ( c_ServiceName, "FPLS Difference in UTM :%lf:", d_diff_UTM );
	}
		
		if ( d_diff_UTM != 0 )
    {
      i_returncode = fn_upd_limits( c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    TRD_MARGIN_ADJ_ON_FUT_CONV,
                                    DEBIT_WITHOUT_LIMIT,
                                    d_diff_UTM,
                                    &d_balance_amt);
      if ( i_returncode != 0 )
      {
        return i_returncode;
      }
		}

		strcpy ( ptr_st_pstn_actn->c_ref_rmrks, c_tmp_rmrks );

	  /*** Add margin value is made zero, as we have closed the net open position in the contract 								 **/	
		/*** The tobe values are needed to assign to current as we are not updating the fup in processing of 1st leg **/ 

		ptr_st_undfut_pos_crrnt->d_add_mrgn_val = 0;

		/*** Ver 2.4 As part conversion of future plus we are releasing part add margin 
								 so remaining add margin will remain on remaining position of future plus			****/
		
		ptr_st_undfut_pos_to_be->d_add_mrgn_val = d_diff_amv - d_diff_add_mrgn ;		/*** Ver 2.4 ***/ 

		ptr_st_undfut_pos_crrnt->d_exctd_mrgn = ptr_st_undfut_pos_to_be->d_exctd_mrgn;
		ptr_st_undfut_pos_crrnt->d_sprd_mrgn = ptr_st_undfut_pos_to_be->d_sprd_mrgn;
		ptr_st_undfut_pos_crrnt->d_sprd_pl = ptr_st_undfut_pos_to_be->d_sprd_pl;
		ptr_st_undfut_pos_crrnt->d_trd_mrgn = ptr_st_undfut_pos_to_be->d_trd_mrgn;
		ptr_st_undfut_pos_crrnt->d_ordr_mrgn = ptr_st_undfut_pos_to_be->d_ordr_mrgn;

		ptr_st_undfut_pos_to_be->d_imtm_opn_val = 0;
		ptr_st_undfut_pos_to_be->d_imtm_exctd_mrgn = 0;
		ptr_st_undfut_pos_to_be->d_imtm_sprd_mrgn = 0;
		ptr_st_undfut_pos_to_be->d_imtm_sprd_pl = 0;
		ptr_st_undfut_pos_to_be->d_imtm_trd_mrgn = 0;
		ptr_st_undfut_pos_to_be->d_mm_exctd_mrgn = 0;
		ptr_st_undfut_pos_to_be->d_mm_sprd_mrgn = 0;
		ptr_st_undfut_pos_to_be->d_mm_sprd_pl = 0;
		
		if( DEBUG_MSG_LVL_3 )
  	{
			fn_userlog(c_ServiceName," The fut_creation flg is:%c:",c_fut_create );
			fn_userlog(c_ServiceName," The Open Pstn flg is:%c:",st_cntpos_crrnt.c_opnpstn_flw);
		}

		if( st_cntpos_crrnt.c_opnpstn_flw != 'N'  && c_fut_create =='Y' )
		{

			/************************************************************************************/
			/** Initialize the position action which will be used for creating futures position**/
			/************************************************************************************/

/*			st_pstn_actn_fut.l_actn_typ = CREATE_FUT; */ /*commented in Ver 1.5 for partial convertion of future plus to future*/
			st_pstn_actn_fut.c_prd_typ = FUTURES;

			strcpy( st_pstn_actn_fut.c_cln_mtch_accnt , ptr_st_pstn_actn->c_cln_mtch_accnt);
			strcpy( st_pstn_actn_fut.c_xchng_cd , ptr_st_pstn_actn->c_xchng_cd);
			strcpy( st_pstn_actn_fut.c_undrlyng , ptr_st_pstn_actn->c_undrlyng);

			strcpy( st_pstn_actn_fut.c_expry_dt , st_cntpos_crrnt.c_expry_dt );
			st_pstn_actn_fut.c_exrc_typ = st_cntpos_crrnt.c_exrc_typ;

      /***** Commented In Ver 3.8 ********

			EXEC SQL
				SELECT  FCM_CNTRCT_TAG
				INTO    :c_cntrct_tag
				FROM    FCM_FO_CNTRCT_MSTR
				WHERE   FCM_XCHNG_CD        = :st_pstn_actn_fut.c_xchng_cd
				AND     FCM_PRDCT_TYP       = :st_pstn_actn_fut.c_prd_typ
				AND     FCM_UNDRLYNG        = :st_pstn_actn_fut.c_undrlyng
				AND     FCM_EXPRY_DT        = to_date( :st_pstn_actn_fut.c_expry_dt,
																							'dd-mon-yyyy' )
				AND     FCM_EXER_TYP        = :st_pstn_actn_fut.c_exrc_typ;

		  ***** Commented In Ver 3.8 ***/
 
		  /***** Ver 3.8 Starts ********/

			EXEC SQL
        SELECT  FTQ_CNTRCT_TAG
        INTO    :c_cntrct_tag
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD        = :st_pstn_actn_fut.c_xchng_cd
        AND     FTQ_PRDCT_TYP       = :st_pstn_actn_fut.c_prd_typ
        AND     FTQ_UNDRLYNG        = :st_pstn_actn_fut.c_undrlyng
        AND     FTQ_EXPRY_DT        = to_date( :st_pstn_actn_fut.c_expry_dt,
                                              'dd-mon-yyyy' )
        AND     FTQ_EXER_TYP        = :st_pstn_actn_fut.c_exrc_typ;

      if ( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31200", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
			/***** Ver 3.8 Ends ********/

      if(DEBUG_MSG_LVL_3) /** Ver 4.3 Debug lvl changed 0 to 3 **/
      {
       fn_userlog(c_ServiceName," FTQ Contract Tag Is :%c:",c_cntrct_tag);
      }


			st_pstn_actn_fut.c_cntrct_tag = c_cntrct_tag;

			st_pstn_actn_fut.c_trnsctn_flw = st_cntpos_crrnt.c_opnpstn_flw;
			st_pstn_actn_fut.l_orgnl_qty = 0;
			st_pstn_actn_fut.l_orgnl_rt = 0;
			st_pstn_actn_fut.l_new_qty = 0;
			st_pstn_actn_fut.l_new_rt = 0;

/*Ver 1.5 for partial convertion of future plus to future */
/*			if( st_pstn_actn_fut.c_trnsctn_flw == BUY )
		  {		
				st_pstn_actn_fut.l_exec_qty = st_cntpos_crrnt.l_opnpstn_qty;
				c_trn_flw = SELL;   
			}
			else
		  {		
				st_pstn_actn_fut.l_exec_qty = -1*( st_cntpos_crrnt.l_opnpstn_qty );
				c_trn_flw = BUY;
			} */

			if ( ptr_st_pstn_actn->l_actn_typ == CLOSE_PART_FUTPLUS)
      {
        if( st_pstn_actn_fut.c_trnsctn_flw == BUY )
        {
          st_pstn_actn_fut.l_exec_qty = ptr_st_pstn_actn->l_new_qty;
          /* c_trn_flw = SELL;  Commented in ver 3.0 ***/
          c_trn_flw = BUY;			/*** Added in ver 3.0 */
        }
        else
        {
          st_pstn_actn_fut.l_exec_qty = -1*( ptr_st_pstn_actn->l_new_qty );
          /* c_trn_flw = BUY;   Commented in ver 3.0 ***/
          c_trn_flw = SELL;			/*** Added in ver 3.0 */
        }
      }
      else
      {
        if( st_pstn_actn_fut.c_trnsctn_flw == BUY )
        {
          st_pstn_actn_fut.l_exec_qty = st_cntpos_crrnt.l_opnpstn_qty;
          /* c_trn_flw = SELL;		Commented in ver 3.0 ***/
          c_trn_flw = BUY;  /*** Added in ver 3.0 */
        }
        else
        {
          st_pstn_actn_fut.l_exec_qty = -1*( st_cntpos_crrnt.l_opnpstn_qty );
          /* c_trn_flw = BUY;   Commented in ver 3.0 ***/
          c_trn_flw = SELL;			/*** Added in ver 3.0 */
        }
      }

      st_pstn_actn_fut.l_actn_typ = CREATE_FUT;

      /* END  Ver 1.5 for partial convertion of future plus to future*/


			c_prdct_type = FUTURE_PLUS;
			l_close_qty = st_pstn_actn_fut.l_exec_qty;
			st_pstn_actn_fut.l_exec_rt = ptr_st_pstn_actn->l_exec_rt;
			st_pstn_actn_fut.c_nkd_blkd_flg = c_conv_chk;

			st_pstn_actn_fut.l_fresh_qty  = 0;
			st_pstn_actn_fut.l_cover_qty  = 0;
			st_pstn_actn_fut.d_add_mrgn_amt  = 0;
			st_pstn_actn_fut.l_curr_rt = 0;
			ptr_st_pstn_actn->l_fresh_qty  = 0;
			ptr_st_pstn_actn->l_cover_qty  = 0;

		if( ptr_st_pstn_actn->c_nkd_blkd_flg == JOINT_CONVERSION )
		{
				c_conv_chk = SINGLE_CONVERSION;
				c_limit_chk = 'Y';
		}

		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName,"Inputs Passed for Future Creation");
			fn_userlog(c_ServiceName,"Action Type  :%ld:",st_pstn_actn_fut.l_actn_typ);
			fn_userlog(c_ServiceName,"Exchng cd    :%s:",st_pstn_actn_fut.c_xchng_cd);
			fn_userlog(c_ServiceName,"Prdct typ    :%c:",st_pstn_actn_fut.c_prd_typ);
			fn_userlog(c_ServiceName,"Undrlyng     :%s:",st_pstn_actn_fut.c_undrlyng);
			fn_userlog(c_ServiceName,"Expiry Date  :%s:",st_pstn_actn_fut.c_expry_dt);
			fn_userlog(c_ServiceName,"Exer typ     :%c:",st_pstn_actn_fut.c_exrc_typ);
			fn_userlog(c_ServiceName,"Cntrct tag   :%c:",st_pstn_actn_fut.c_cntrct_tag);
			fn_userlog(c_ServiceName,"Trd flw      :%c:",st_pstn_actn_fut.c_trnsctn_flw);
			fn_userlog(c_ServiceName,"Exe Qty 		 :%ld:",st_pstn_actn_fut.l_exec_qty);
  		fn_userlog(c_ServiceName,"Exe Rate     :%ld:",st_pstn_actn_fut.l_exec_rt);
  		fn_userlog(c_ServiceName,"Spl Flag     :%c:",st_pstn_actn_fut.c_nkd_blkd_flg);
  		fn_userlog(c_ServiceName,"Spl Flag for 2nd leg   :%c:",ptr_st_pstn_actn->c_nkd_blkd_flg);
		}
	
		  /***************************** Commented in Ver 2.4 *********	
			i_returncode  = fn_call_actn_create_fut( c_ServiceName,
                                                  &st_pstn_actn_fut,
                                                  ptr_st_err_msg );
		  ***************************** Commented in Ver 2.4 **********/

			/*** Added in Ver 2.4 for additional margin while converting from future plus to future ***/

			i_returncode  = fn_call_actn_create_fut( c_ServiceName,
                             			 						 &st_pstn_actn_fut,
                             			 						 &d_avl_mrgn_fut,
                             			 						 &d_fut_min_mrgn,
																							 &d_fut_notional_pnl,	
                             			 						 ptr_st_err_msg
                                               );

			if ( i_returncode == -1 )
			{
				 return FAILURE;
			}

			if( DEBUG_MSG_LVL_3 )
    	{
				fn_userlog(c_ServiceName, "d_undrlyng_pl 		 	:%lf:",d_undrlyng_pl);
				fn_userlog(c_ServiceName, "d_fut_notional_pnl	:%lf:",d_fut_notional_pnl);
				fn_userlog(c_ServiceName, "d_fut_initial_mrgn :%lf:",d_fut_initial_mrgn);
				fn_userlog(c_ServiceName, "d_fut_min_mrgn 		:%lf:",d_fut_min_mrgn);
			}

			/*** d_avl_mrgn_fut = d_fut_initial_mrgn +  d_fut_notional_pnl;		***/

			d_avl_mrgn_fp	 = d_fp_initial_mrgn	+  d_undrlyng_pl;
			
			if( DEBUG_MSG_LVL_3 )
    	{
				fn_userlog(c_ServiceName, "d_notional_pnl for fp				  		:%lf:",d_undrlyng_pl);
				fn_userlog(c_ServiceName, "d_fp_initial_mrgn									:%lf:",d_fp_initial_mrgn);
				fn_userlog(c_ServiceName, "st_undfut_pos_crrnt.d_mm_trd_mrgn  :%lf:",ptr_st_undfut_pos_crrnt->d_mm_trd_mrgn);
				fn_userlog(c_ServiceName, "d_avl_mrgn_fut                     :%lf:",d_avl_mrgn_fut);
				fn_userlog(c_ServiceName, "d_avl_mrgn_fp											:%lf:",d_avl_mrgn_fp);
			}

			if (d_avl_mrgn_fut < d_fut_min_mrgn)
			{
	
					d_add_mrgn = d_fut_notional_pnl;

					if( DEBUG_MSG_LVL_3 )
      		{
        		fn_userlog(c_ServiceName, "Additional Margin is :%lf:",d_add_mrgn);
					}

					if(( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 )
                   && ( ptr_st_pstn_actn->l_session_id != 0 ))
					{
					   c_dr_lmt_flg  = DEBIT_WHEN_LIMIT;	
					}
					else
					{
						 c_dr_lmt_flg	=	DEBIT_WITHOUT_LIMIT;	
					}

					if ( d_add_mrgn < 0 )
    			{
      			i_returncode = fn_upd_limits( c_ServiceName,
        	                      		      ptr_st_pstn_actn,
          	                		          ptr_st_err_msg,
            	          		              BLK_NOTIONAL_LOSS_ON_FUT_CONV,
              	    		                  c_dr_lmt_flg,
                			                    d_add_mrgn,
             		     	              	    &d_balance_amt);
      			if ( i_returncode != 0 )
      			{
        			switch ( i_returncode )
        			{
          			case INSUFFICIENT_LIMITS :
              		fn_userlog(c_ServiceName, "Required Amount is :%lf:",d_balance_amt);	
        					fn_errlog(c_ServiceName,"S31205",LIBMSG,ptr_st_err_msg->c_err_msg);	
            			return INSUFFICIENT_LIMITS;
            			break;

          				default :
            			return FAILURE;
            			break;
        			}
     	 			}
		
						d_add_mrgn = d_add_mrgn * (-1);

		 				EXEC SQL
      				UPDATE  FUP_FUT_UNDRLYNG_PSTN
      				SET			FUP_ADD_MRGN_VAL 		=	FUP_ADD_MRGN_VAL + :d_add_mrgn 
							WHERE   FUP_CLM_MTCH_ACCNT  = :st_pstn_actn_fut.c_cln_mtch_accnt
      				AND     FUP_XCHNG_CD        = :st_pstn_actn_fut.c_xchng_cd
      				AND     FUP_PRDCT_TYP       = :st_pstn_actn_fut.c_prd_typ
      				AND     FUP_UNDRLYNG        = :st_pstn_actn_fut.c_undrlyng
      				AND     FUP_CNTRCT_TAG      = :st_pstn_actn_fut.c_cntrct_tag;
		
			
      			if( SQLCODE != 0 )
      			{
        			fn_errlog(c_ServiceName, "S31210", SQLMSG, ptr_st_err_msg->c_err_msg );
        			return FAILURE;
      			}
  				}		

					if( DEBUG_MSG_LVL_3 )
  				{
    				fn_userlog(c_ServiceName,"Updated record into FUF :%lf:",d_add_mrgn );
  				}
			 }
			/***************************** Ver 2.4 End *************************************/

			/**** Ver 3.1 Starts here ****/
      i_returncode =  fn_calc_trgprc_on_chngmrgn(c_ServiceName,
                                                  &st_pstn_actn_fut,
                                                 ptr_st_err_msg);
      if ( i_returncode != 0 )
      {
        fn_errlog(c_ServiceName, "S31215", LIBMSG, ptr_st_err_msg->c_err_msg );
        fn_userlog(c_ServiceName,"Pls check, Error in calcualting Auto MTM Trigger Price");
      }
      /**** Ver 3.1 Ends Here ***/
	
			/**insert record of futureplus closed position,  this is needed to keep FuturePlus portfolio screen in sync ****/

	EXEC SQL
    INSERT INTO FFF_FO_FUT_FPLSCNV
           (
              FFF_CLM_MTCH_ACCNT,
              FFF_XCHNG_CD,
              FFF_PRDCT_TYP,
              FFF_INDSTK,
              FFF_UNDRLYNG,
              FFF_EXPRY_DT,
              FFF_EXER_TYP,
              FFF_OPT_TYP,
              FFF_STRK_PRC,
              FFF_ORDR_FLW,
              FFF_CLS_QTY,
              FFF_CLS_RT,
              FFF_CLS_TM,
							FFF_CNTRCT_TAG,
							FFF_UPLD_FLG,
							FFF_CHANNEL			/*** Ver 4.0 ***/
           )
           VALUES
           (
              :st_pstn_actn_fut.c_cln_mtch_accnt,
              :st_pstn_actn_fut.c_xchng_cd,
              :c_prdct_type,
              :st_pstn_actn_fut.c_ctgry_indstk,
              :st_pstn_actn_fut.c_undrlyng,
              :st_pstn_actn_fut.c_expry_dt,
              :st_pstn_actn_fut.c_exrc_typ,
              :st_pstn_actn_fut.c_opt_typ,
              :st_pstn_actn_fut.l_strike_prc,
              :c_trn_flw,
							:l_close_qty,
              :d_exec_rt,     /***  Ver 2.0 ***/
          /**	:st_pstn_actn_fut.l_exec_rt,			Commented In Ver	2.0	***/
              sysdate,
							:st_cntpos_crrnt.c_cntrct_tag,
							'N',
							decode(:st_pstn_actn_fut.c_user_id,'system','SYS','WEB')		/*** Ver 4.0 ***/
           );

			if( SQLCODE != 0 )
			{
				fn_errlog(c_ServiceName, "S31220", SQLMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
  		}
	if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog(c_ServiceName,"Inserted record into FFF:%s:",st_pstn_actn_fut.c_cln_mtch_accnt);
	}

	 }

			 
  } /**End of while loop **/

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog( c_ServiceName,"User Id:%s:",ptr_st_pstn_actn->c_user_id);
		fn_userlog( c_ServiceName,"Limit Check Flag:%c:",c_limit_chk);
		fn_userlog( c_ServiceName,"Session Id:%c:",ptr_st_pstn_actn->l_session_id);
	}

	/****************************************************************************************************/
	/***** The following portion gets the Limits avaliable for the user in case of Joint conversion  ****/
  /***** and checks whether it is sufficient to support conversion to Futures , the same check     ****/
	/***** need not be performed with system																												 ****/
	/***** This case may arrive in Joint conversion, when first leg conversion cause huge debit which****/
  /***** make limit negative and  second leg yields credit. The second credit will not help in 		 ****/
	/***** debit when limit check, hence there is mandate of following check												 ****/ 
	/****************************************************************************************************/

	if( ( c_limit_chk == 'Y')  && ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) 
																						&& ( ptr_st_pstn_actn->l_session_id != 0 ))
	{
	if( DEBUG_MSG_LVL_3 )
  {
		fn_userlog( c_ServiceName,"Checking Limit Available with client");
	}
		memset(&st_gt_lmt,'\0' , sizeof( struct vw_gt_lmt_dtls) );
		strcpy(st_gt_lmt.c_xchng_cd , ptr_st_pstn_actn->c_xchng_cd );

		EXEC SQL
      /*** SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY')              Commented In Ver 2.6 ***/
      /*** SELECT TO_CHAR(GREATEST(EXG_NXT_TRD_DT,EXG_TMP_TRD_DT),'DD-Mon-YYYY') *** Ver 2.6 Reverted In Ver 2.6 Bug Fix ***/
      SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY')  /*** Reverted In Ver 2.6 Bug Fix ***/
      INTO   :c_trade_dt
      FROM   EXG_XCHNG_MSTR
      WHERE  EXG_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
      AND    EXG_MKT_TYP = 'D';

    if ( SQLCODE != 0 )
    {
       fn_errlog(c_ServiceName, "S31225", SQLMSG, ptr_st_err_msg->c_err_msg );
			 return FAILURE;
    }

		strcpy(st_gt_lmt.c_trd_dt, (char *) c_trade_dt.arr);
		strcpy(st_gt_lmt.c_cln_mtch_accnt, ptr_st_pstn_actn->c_cln_mtch_accnt);
		l_ip_len = (long) sizeof ( struct vw_gt_lmt_dtls);
		st_gt_lmt.c_rqst_typ = LIMIT_X;
		strcpy( st_gt_lmt.c_rout_crt, ptr_st_pstn_actn->c_rout_crt);

		/********* Commented for Ver 3.6 *******

		i_returncode = fn_call_svc( c_ServiceName, ptr_st_err_msg->c_err_msg, &st_gt_lmt, &st_gt_lmt,
																"vw_gt_lmt_dtls", "vw_gt_lmt_dtls", l_ip_len,
																l_ip_len, 0, "SFO_GET_LIMITS" );

		********* Ver 3.6 *************/

		/***** Added for Ver 3.6 ****/
    i_returncode = fo_get_trd_limit(c_ServiceName,
                                    st_gt_lmt.c_cln_mtch_accnt,
                                    st_gt_lmt.c_trd_dt,
                                    st_gt_lmt.c_rqst_typ,
                                    st_gt_lmt.c_xchng_cd,
                                    st_gt_lmt.l_gid,
                                    &st_gt_lmt.d_amt,
                                    ptr_st_err_msg->c_err_msg
                                    );
		/***** End of Ver 3.6 ***/

		if ( i_returncode == -1 )
		{
			fn_userlog(c_ServiceName,"SFO_GET_LIMITS FAIL  ");
      fn_errlog(c_ServiceName, "S31230", DEFMSG, ptr_st_err_msg->c_err_msg );
		  return FAILURE;
		}

	  if( DEBUG_MSG_LVL_3 )
    {
		  fn_userlog( c_ServiceName,"Limit Calculated :%lf:",st_gt_lmt.d_amt);
	  }

		if( st_gt_lmt.d_amt < 0 )
		{
      if( DEBUG_MSG_LVL_3 ) /*** Ver 4.3 ***/
      {
				fn_userlog(c_ServiceName,"In the Final check for Joint converted orders limit is found Insufficient [%lf]",
																					st_gt_lmt.d_amt);
				fn_userlog(c_ServiceName,"Cannot convert to Futures as limit has gone negative.");
			}
			strcpy( ptr_st_err_msg->c_err_msg,"Available Cash Limit is unsufficient to convert the trade to Futures.");
      fn_errlog(c_ServiceName, "S31235", LIBMSG, ptr_st_err_msg->c_err_msg );
			return FAILURE;
		}
	if( DEBUG_MSG_LVL_3 )
  {
		fn_userlog( c_ServiceName,"Limit Check Successful for Match Accnt:%s:%lf:", st_gt_lmt.c_cln_mtch_accnt,st_gt_lmt.d_amt);
	}

	}
	
	return SUCCESS;
}
/***************** Commented in Ver 2.4		************************
int fn_call_actn_create_fut( char *c_ServiceName,
                             struct vw_pstn_actn *ptr_st_pstn_actn,
                             struct vw_err_msg *ptr_st_err_msg)
***************** Commented in Ver 2.4		***********************/

/**************** d_fut_initial_mrgn and d_fut_min_mrgn Added in Ver 2.4 ******************************/

int fn_call_actn_create_fut( char *c_ServiceName,
                             struct vw_pstn_actn *ptr_st_pstn_actn,
                             double *d_fut_avl_mrgn,
                             double *d_fut_min_mrgn,
														 double *d_fut_notional_pnl,	
                             struct vw_err_msg *ptr_st_err_msg
                             ) 

{
	int i_returncode;
  char c_ucc_cd[13]; /**ver 4.7 **/
  double d_pl_amt;
  double d_diff_UEM;
  double d_diff_amv;
  double d_diff_UTM;
  double d_diff_UOM;
  double d_diff_UAM;
  double d_UTM_amt;
  double d_balance_amt;
  double d_bal_to_apply;
  double d_avl_mrgn_fut;
  double d_addnl_mrgn_needed;
	double d_cntrct_pl   = 0.0;         /*** Ver 2.4 ***/
	double d_undrlyng_pl = 0.0;         /*** Ver 2.4 ***/
	double d_ltp         = 0.0;         /*** Ver 2.4 ***/
	double d_num_of_lots = 0.0;         /*** Ver 2.4 ***/
	char c_narration_id[4];
  char c_dr_without_lmt_flg;
  char c_pos_avl;
  char c_upos_avl;
  char c_tmp_rmrks [ 133 ] ;
	char c_reason_cd [ 2000 ] = "\0";		/*** Ver 3.4 ***/

 EXEC SQL BEGIN DECLARE SECTION;

  char  c_cntrct_tag;
  char  c_mtm_flag;
  varchar c_trade_dt[12];
  sql_cursor     sys_cursor;             /* a cursor variable */
  char  sql_cln_mtch_accnt[11];
  char  sql_xchng_cd[4];
  char  sql_prd_typ;
  char  sql_cntrct_tag;
  char  sql_undrlyng[7];
  varchar c_exp_dt[LEN_DATE];
  double d_mrgn_blkd = 0.0;


  /** Current underlying level position **/
  struct vw_undfut_pos st_undfut_pos_crrnt;

	/** Undelying level position to be **/
  struct vw_undfut_pos st_undfut_pos_to_be;

  /** Current contract level positions of other contracts in the same  **/
  /** underlying                                                       **/
  struct vw_cntfut_pos st_cntpos_crrnt;

  /** Copy of contract level position on which action is to be done taken **/
  /** before applying the action                                          **/
  struct vw_cntfut_pos st_cntpos_old;

  /** Contract level position on which action is to be done **/
  struct vw_cntfut_pos st_cntpos_md_rc;

 EXEC SQL END DECLARE SECTION;



	if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog ( c_ServiceName, "*************  SFO_UPD_FUT_POS - I *************");
  	fn_userlog ( c_ServiceName,"FUT c_user_id        :%s:", ptr_st_pstn_actn->c_user_id );
  	fn_userlog ( c_ServiceName,"FUT l_session_id      :%ld:", ptr_st_pstn_actn->l_session_id );
  	fn_userlog ( c_ServiceName,"FUT c_cln_mtch_accnt :%s:", ptr_st_pstn_actn->c_cln_mtch_accnt );
  	fn_userlog ( c_ServiceName,"FUT c_xchng_cd       :%s:", ptr_st_pstn_actn->c_xchng_cd );
  	fn_userlog ( c_ServiceName,"FUT c_prd_typ        :%c:", ptr_st_pstn_actn->c_prd_typ );
  	fn_userlog ( c_ServiceName,"FUT c_undrlyng       :%s:", ptr_st_pstn_actn->c_undrlyng );
  	fn_userlog ( c_ServiceName,"FUT c_expry_dt       :%s:", ptr_st_pstn_actn->c_expry_dt );
  	fn_userlog ( c_ServiceName,"FUT c_exrc_typ       :%c:", ptr_st_pstn_actn->c_exrc_typ );
  	fn_userlog ( c_ServiceName,"FUT l_actn_typ       :%ld:", ptr_st_pstn_actn->l_actn_typ );
  	fn_userlog ( c_ServiceName,"FUT c_trnsctn_flw    :%c:", ptr_st_pstn_actn->c_trnsctn_flw );
  	fn_userlog ( c_ServiceName,"FUT l_orgnl_qty      :%ld:", ptr_st_pstn_actn->l_orgnl_qty );
  	fn_userlog ( c_ServiceName,"FUT l_orgnl_rt       :%ld:", ptr_st_pstn_actn->l_orgnl_rt );
  	fn_userlog ( c_ServiceName,"FUT l_new_qty        :%ld:", ptr_st_pstn_actn->l_new_qty );
  	fn_userlog ( c_ServiceName,"FUT l_new_rt         :%ld:", ptr_st_pstn_actn->l_new_rt );
  	fn_userlog ( c_ServiceName,"FUT l_exec_qty       :%ld:", ptr_st_pstn_actn->l_exec_qty );
  	fn_userlog ( c_ServiceName,"FUT l_exec_rt        :%ld:", ptr_st_pstn_actn->l_exec_rt );
  	fn_userlog ( c_ServiceName,"FUT l_fresh_qty      :%ld:", ptr_st_pstn_actn->l_fresh_qty );
  	fn_userlog ( c_ServiceName,"FUT l_cover_qty      :%ld:", ptr_st_pstn_actn->l_cover_qty );
		fn_userlog ( c_ServiceName,"FUT d_add_mrgn_amt   :%lf:", ptr_st_pstn_actn->d_add_mrgn_amt );
  	fn_userlog ( c_ServiceName,"FUT l_curr_rt        :%ld:", ptr_st_pstn_actn->l_curr_rt );
  	fn_userlog ( c_ServiceName,"FUT c_ref_rmrks      :%s:", ptr_st_pstn_actn->c_ref_rmrks );
  	fn_userlog ( c_ServiceName,"FUT c_cntrct_tag      :%c:", ptr_st_pstn_actn->c_cntrct_tag );
	}



  /******** Get underlying level position for the Exchange, client, ********/
  /******** underlying, tag combination into UPOS_crrnt             ********/
  c_upos_avl = 'Y';
	
	EXEC SQL
    SELECT  FUP_CLM_MTCH_ACCNT,
            FUP_XCHNG_CD,
            FUP_PRDCT_TYP,
            FUP_INDSTK,
            FUP_UNDRLYNG,
            FUP_CNTRCT_TAG,
            FUP_UIBUY_QTY,
            FUP_UIBUY_VAL,
            FUP_UISELL_QTY,
            FUP_UISELL_VAL,
            FUP_UEXBUY_QTY,
            FUP_UEXBUY_VAL,
            FUP_UEXSELL_QTY,
            FUP_UEXSELL_VAL,
            FUP_UBUY_EXCTD_QTY,
            FUP_USELL_EXCTD_QTY,
            FUP_UOPNPSTN_FLW,
            FUP_UOPNPSTN_QTY,
            FUP_UOPNPSTN_VAL,
            FUP_UMTM_OPN_VAL,
            FUP_ADD_MRGN_VAL,
            FUP_UORDR_MRGN,
            FUP_UEXCTD_MRGN,
            FUP_USPREAD_MRGN,
            FUP_USPREAD_PNL,
            FUP_UTRD_MRGN,
            NVL(FUP_MTM_FLG,'O'),
            NVL(FUP_UMIN_TRD_MRGN,0)
		INTO    :st_undfut_pos_crrnt.c_cln_mtch_accnt,
            :st_undfut_pos_crrnt.c_xchng_cd,
            :st_undfut_pos_crrnt.c_prd_typ,
            :st_undfut_pos_crrnt.c_ctgry_indstk,
            :st_undfut_pos_crrnt.c_undrlyng,
            :st_undfut_pos_crrnt.c_cntrct_tag,
            :st_undfut_pos_crrnt.l_ibuy_qty,
            :st_undfut_pos_crrnt.d_ibuy_ord_vl,
            :st_undfut_pos_crrnt.l_isell_qty,
            :st_undfut_pos_crrnt.d_isell_ord_vl,
            :st_undfut_pos_crrnt.l_exbuy_qty,
            :st_undfut_pos_crrnt.d_exbuy_ord_vl,
            :st_undfut_pos_crrnt.l_exsell_qty,
            :st_undfut_pos_crrnt.d_exsell_ord_vl,
            :st_undfut_pos_crrnt.l_buy_exctd_qty,
            :st_undfut_pos_crrnt.l_sell_exctd_qty,
            :st_undfut_pos_crrnt.c_opnpstn_flw,
            :st_undfut_pos_crrnt.l_opnpstn_qty,
            :st_undfut_pos_crrnt.d_org_opn_val,
            :st_undfut_pos_crrnt.d_mtm_opn_val,
            :st_undfut_pos_crrnt.d_add_mrgn_val,
            :st_undfut_pos_crrnt.d_ordr_mrgn,
            :st_undfut_pos_crrnt.d_exctd_mrgn,
            :st_undfut_pos_crrnt.d_sprd_mrgn,
            :st_undfut_pos_crrnt.d_sprd_pl,
            :st_undfut_pos_crrnt.d_trd_mrgn,
            :c_mtm_flag,
            :st_undfut_pos_crrnt.d_mm_trd_mrgn
    FROM    FUP_FUT_UNDRLYNG_PSTN
    WHERE FUP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND   FUP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
    AND   FUP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
    AND   FUP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
    AND   FUP_CNTRCT_TAG      = :ptr_st_pstn_actn->c_cntrct_tag;
		
	if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31240", SQLMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
  }

  /**** If a position doesnot exists, initialise the position values to ****/
  /**** default                                                         ****/
  if ( SQLCODE == NO_DATA_FOUND )
	{
    strcpy( st_undfut_pos_crrnt.c_cln_mtch_accnt,
                                  ptr_st_pstn_actn->c_cln_mtch_accnt );
    strcpy( st_undfut_pos_crrnt.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
    strcpy( st_undfut_pos_crrnt.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
    st_undfut_pos_crrnt.c_prd_typ  = ptr_st_pstn_actn->c_prd_typ;
    st_undfut_pos_crrnt.c_ctgry_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
    st_undfut_pos_crrnt.c_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;
    st_undfut_pos_crrnt.l_ibuy_qty = 0;
    st_undfut_pos_crrnt.d_ibuy_ord_vl = 0;
    st_undfut_pos_crrnt.l_isell_qty = 0;
    st_undfut_pos_crrnt.d_isell_ord_vl = 0;
    st_undfut_pos_crrnt.l_exbuy_qty = 0;
    st_undfut_pos_crrnt.d_exbuy_ord_vl = 0;
    st_undfut_pos_crrnt.l_exsell_qty = 0;
    st_undfut_pos_crrnt.d_exsell_ord_vl = 0;
    st_undfut_pos_crrnt.l_buy_exctd_qty = 0;
    st_undfut_pos_crrnt.l_sell_exctd_qty = 0;
    st_undfut_pos_crrnt.c_opnpstn_flw = 'N';
    st_undfut_pos_crrnt.l_opnpstn_qty = 0;
    st_undfut_pos_crrnt.d_org_opn_val = 0;
    st_undfut_pos_crrnt.d_mtm_opn_val = 0;
    st_undfut_pos_crrnt.d_add_mrgn_val = 0;
    st_undfut_pos_crrnt.l_opn_buyqty = 0;
    st_undfut_pos_crrnt.l_opn_sellqty = 0;
    st_undfut_pos_crrnt.d_ibuy_mrgn = 0;
    st_undfut_pos_crrnt.d_isell_mrgn = 0;
    st_undfut_pos_crrnt.d_exbuy_mrgn = 0;
    st_undfut_pos_crrnt.d_exsell_mrgn = 0;
    st_undfut_pos_crrnt.d_ordr_mrgn = 0;
    st_undfut_pos_crrnt.d_exctd_mrgn = 0;
    st_undfut_pos_crrnt.d_sprd_mrgn = 0;
    st_undfut_pos_crrnt.d_sprd_pl = 0;
    st_undfut_pos_crrnt.d_trd_mrgn = 0;
    st_undfut_pos_crrnt.c_oprn_typ = '*';
    st_undfut_pos_crrnt.d_ordr_mrgn = 0;
    st_undfut_pos_crrnt.d_imtm_opn_val = 0;
    st_undfut_pos_crrnt.d_imtm_exctd_mrgn = 0;
    st_undfut_pos_crrnt.d_imtm_sprd_mrgn = 0;
    st_undfut_pos_crrnt.d_imtm_sprd_pl = 0;
		st_undfut_pos_crrnt.d_imtm_trd_mrgn = 0;
    st_undfut_pos_crrnt.d_mm_exctd_mrgn = 0;
    st_undfut_pos_crrnt.d_mm_sprd_mrgn = 0;
    st_undfut_pos_crrnt.d_mm_sprd_pl = 0;
    st_undfut_pos_crrnt.d_mm_trd_mrgn = 0;
    c_mtm_flag = 'O';
    c_upos_avl = 'N';
  }

	if( DEBUG_MSG_LVL_3 )
	{
  	fn_userlog ( c_ServiceName, "Getting the current underlying position" );
  	fn_userlog ( c_ServiceName, "FUT IWTL buy qty      :%ld:", st_undfut_pos_crrnt.l_ibuy_qty );
  	fn_userlog ( c_ServiceName, "FUT IWTL buy val      :%lf:", st_undfut_pos_crrnt.d_ibuy_ord_vl );
  	fn_userlog ( c_ServiceName, "FUT IWTL sell qty     :%ld:", st_undfut_pos_crrnt.l_isell_qty );
  	fn_userlog ( c_ServiceName, "FUT IWTL sell val     :%lf:", st_undfut_pos_crrnt.d_isell_ord_vl );
  	fn_userlog ( c_ServiceName, "FUT EXCH buy qty      :%ld:", st_undfut_pos_crrnt.l_exbuy_qty );
  	fn_userlog ( c_ServiceName, "FUT EXCH buy val      :%lf:", st_undfut_pos_crrnt.d_exbuy_ord_vl );
  	fn_userlog ( c_ServiceName, "FUT EXCH sell qty     :%ld:", st_undfut_pos_crrnt.l_exsell_qty );
  	fn_userlog ( c_ServiceName, "FUT EXCH sell val     :%lf:", st_undfut_pos_crrnt.d_exsell_ord_vl );
  	fn_userlog ( c_ServiceName, "FUT Buy exctd qty     :%ld:", st_undfut_pos_crrnt.l_buy_exctd_qty );
  	fn_userlog ( c_ServiceName, "FUT Sell exctd qty    :%ld:", st_undfut_pos_crrnt.l_sell_exctd_qty );
  	fn_userlog ( c_ServiceName, "FUT Open qty          :%ld:", st_undfut_pos_crrnt.l_opnpstn_qty );
	}

  if( DEBUG_MSG_LVL_3 ) /*** Ver 4.3 ***/
  {
    fn_userlog ( c_ServiceName, "FUT Original open val :%lf:", st_undfut_pos_crrnt.d_org_opn_val );
    fn_userlog ( c_ServiceName, "FUT MTMed open val    :%lf:", st_undfut_pos_crrnt.d_mtm_opn_val );
    fn_userlog ( c_ServiceName, "FUT Add Margin val    :%lf:", st_undfut_pos_crrnt.d_add_mrgn_val );
	}
  /******** Set UPOS_to_be fields to default ********/
  strcpy( st_undfut_pos_to_be.c_cln_mtch_accnt,
                              ptr_st_pstn_actn->c_cln_mtch_accnt );
  strcpy( st_undfut_pos_to_be.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
  strcpy( st_undfut_pos_to_be.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
  st_undfut_pos_to_be.c_prd_typ  = ptr_st_pstn_actn->c_prd_typ;
  st_undfut_pos_to_be.c_ctgry_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
  st_undfut_pos_to_be.c_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;
  st_undfut_pos_to_be.l_ibuy_qty = 0;
  st_undfut_pos_to_be.d_ibuy_ord_vl = 0;
  st_undfut_pos_to_be.l_isell_qty = 0;
  st_undfut_pos_to_be.d_isell_ord_vl = 0;
  st_undfut_pos_to_be.l_exbuy_qty = 0;
  st_undfut_pos_to_be.d_exbuy_ord_vl = 0;
  st_undfut_pos_to_be.l_exsell_qty = 0;
  st_undfut_pos_to_be.d_exsell_ord_vl = 0;
  st_undfut_pos_to_be.l_buy_exctd_qty = 0;
  st_undfut_pos_to_be.l_sell_exctd_qty = 0;
  st_undfut_pos_to_be.c_opnpstn_flw = 'N';
  st_undfut_pos_to_be.l_opnpstn_qty = 0;
  st_undfut_pos_to_be.d_org_opn_val = 0;
  st_undfut_pos_to_be.d_mtm_opn_val = 0;
  st_undfut_pos_to_be.l_opn_buyqty = 0;
  st_undfut_pos_to_be.l_opn_sellqty = 0;
  st_undfut_pos_to_be.d_ibuy_mrgn = 0;
  st_undfut_pos_to_be.d_isell_mrgn = 0;
  st_undfut_pos_to_be.d_exbuy_mrgn = 0;
  st_undfut_pos_to_be.d_exsell_mrgn = 0;
  st_undfut_pos_to_be.d_add_mrgn_val = st_undfut_pos_crrnt.d_add_mrgn_val;
  st_undfut_pos_to_be.d_exctd_mrgn = st_undfut_pos_crrnt.d_exctd_mrgn;
  st_undfut_pos_to_be.d_sprd_mrgn = st_undfut_pos_crrnt.d_sprd_mrgn;
	st_undfut_pos_to_be.d_sprd_pl = st_undfut_pos_crrnt.d_sprd_pl;
  st_undfut_pos_to_be.d_trd_mrgn = st_undfut_pos_crrnt.d_trd_mrgn;
  st_undfut_pos_to_be.c_oprn_typ = '*';

  st_undfut_pos_to_be.d_mm_trd_mrgn = st_undfut_pos_crrnt.d_mm_trd_mrgn;
  st_undfut_pos_to_be.d_ordr_mrgn = 0;
  st_undfut_pos_to_be.d_imtm_opn_val = 0;
  st_undfut_pos_to_be.d_imtm_exctd_mrgn = 0;
  st_undfut_pos_to_be.d_imtm_sprd_mrgn = 0;
  st_undfut_pos_to_be.d_imtm_sprd_pl = 0;
  st_undfut_pos_to_be.d_imtm_trd_mrgn = 0;
  st_undfut_pos_to_be.d_mm_exctd_mrgn = 0;
  st_undfut_pos_to_be.d_mm_sprd_mrgn = 0;
  st_undfut_pos_to_be.d_mm_sprd_pl = 0;

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog ( c_ServiceName, "After getting the current underlying position" );
  }

  strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
  strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
  sql_prd_typ = ptr_st_pstn_actn->c_prd_typ;
  sql_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;

	/** This bit of code down below will fetch all the contract level **/
  /** positions. Then it will find the contract on which the input  **/
  /** action is to be performed and then perform it. It then summs  **/
  /** up all the contract level postion to arrive at a consolidated **/
  /** underlying level position. It then recalculates the margin.   **/
  /** This bit of code need not be performed for actions which do   **/
  /** not involve a change in postion                               **/

	if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog ( c_ServiceName, "*************  SFO_UPD_FUT_POS - II *************");
  	fn_userlog ( c_ServiceName, "Fetched current contract position" );
	}

  /** Prepare a list of contracts from contract position table **/
  EXEC SQL ALLOCATE :sys_cursor;

    EXEC SQL EXECUTE
      BEGIN
         OPEN :sys_cursor FOR
          SELECT  FFP_CLM_MTCH_ACCNT,
                  FFP_XCHNG_CD,
                  FFP_PRDCT_TYP,
                  FFP_INDSTK,
                  FFP_UNDRLYNG,
                  TO_CHAR (FFP_EXPRY_DT,'DD-Mon-YYYY'),
                  FFP_EXER_TYP,
                  FFP_CNTRCT_TAG,
                  FFP_IBUY_QTY,
                  FFP_IBUY_ORD_VAL,
                  FFP_ISELL_QTY,
                  FFP_ISELL_ORD_VAL,
                  FFP_EXBUY_QTY,
                  FFP_EXBUY_ORD_VAL,
                  FFP_EXSELL_QTY,
                  FFP_EXSELL_ORD_VAL,
                  FFP_BUY_EXCTD_QTY,
                  FFP_SELL_EXCTD_QTY,
                  FFP_OPNPSTN_FLW,
								  FFP_OPNPSTN_QTY,
                  FFP_OPNPSTN_VAL,
                  FFP_MTM_OPN_VAL
          FROM    FFP_FO_FUTURES_PSTN
          WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
          AND     FFP_XCHNG_CD       = :sql_xchng_cd
          AND     FFP_PRDCT_TYP      = :sql_prd_typ
          AND     FFP_UNDRLYNG       = :sql_undrlyng
          AND     FFP_CNTRCT_TAG     = :sql_cntrct_tag
          ORDER BY FFP_EXPRY_DT asc;
        END;
      END-EXEC;

  if ( SQLCODE != 0 )
  {
    EXEC SQL FREE :sys_cursor;
    fn_errlog ( c_ServiceName, "S31245", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  c_pos_avl = 'N';
	
  /** Fetch one contract at a time from the list. If the fetched  **/
  /** contract is the one we need to apply the change apply it.   **/
  /** Else simply add the contract to  underlying level position  **/
   while ( 1 )
  {
			d_cntrct_pl = 0.0;          /*** Ver 2.4 ***/
	
      EXEC SQL  FETCH   :sys_cursor
                INTO    :st_cntpos_crrnt.c_cln_mtch_accnt,
                        :st_cntpos_crrnt.c_xchng_cd,
                        :st_cntpos_crrnt.c_prd_typ,
                        :st_cntpos_crrnt.c_ctgry_indstk,
                        :st_cntpos_crrnt.c_undrlyng,
                        :c_exp_dt,
                        :st_cntpos_crrnt.c_exrc_typ,
                        :st_cntpos_crrnt.c_cntrct_tag,
                        :st_cntpos_crrnt.l_ibuy_qty,
                        :st_cntpos_crrnt.d_ibuy_ord_vl,
                        :st_cntpos_crrnt.l_isell_qty,
                        :st_cntpos_crrnt.d_isell_ord_vl,
                        :st_cntpos_crrnt.l_exbuy_qty,
                        :st_cntpos_crrnt.d_exbuy_ord_vl,
                        :st_cntpos_crrnt.l_exsell_qty,
                        :st_cntpos_crrnt.d_exsell_ord_vl,
                        :st_cntpos_crrnt.l_buy_exctd_qty,
                        :st_cntpos_crrnt.l_sell_exctd_qty,
                        :st_cntpos_crrnt.c_opnpstn_flw,
                        :st_cntpos_crrnt.l_opnpstn_qty,
                        :st_cntpos_crrnt.d_org_opn_val,
                        :st_cntpos_crrnt.d_mtm_opn_val;
		if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }

        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31250", SQLMSG,
                                          ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
      SETNULL( c_exp_dt );
      strcpy ( st_cntpos_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
      rtrim(st_cntpos_crrnt.c_xchng_cd);
      rtrim(st_cntpos_crrnt.c_undrlyng);
      rtrim(st_cntpos_crrnt.c_expry_dt);

	if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog ( c_ServiceName, "FUT Expiry date       :%s:", c_exp_dt.arr );
  	fn_userlog ( c_ServiceName, "FUT IWTL buy qty      :%ld:", st_cntpos_crrnt.l_ibuy_qty );
  	fn_userlog ( c_ServiceName, "FUT IWTL buy val      :%lf:", st_cntpos_crrnt.d_ibuy_ord_vl );
  	fn_userlog ( c_ServiceName, "FUT IWTL sell qty     :%ld:", st_cntpos_crrnt.l_isell_qty );
  	fn_userlog ( c_ServiceName, "FUT IWTL sell val     :%lf:", st_cntpos_crrnt.d_isell_ord_vl );
  	fn_userlog ( c_ServiceName, "FUT EXCH buy qty      :%ld:", st_cntpos_crrnt.l_exbuy_qty );
  	fn_userlog ( c_ServiceName, "FUT EXCH buy val      :%lf:", st_cntpos_crrnt.d_exbuy_ord_vl );
  	fn_userlog ( c_ServiceName, "FUT EXCH sell qty     :%ld:", st_cntpos_crrnt.l_exsell_qty );
  	fn_userlog ( c_ServiceName, "FUT EXCH sell val      :%lf:", st_cntpos_crrnt.d_exsell_ord_vl );
  	fn_userlog ( c_ServiceName, "FUT Buy exctd qty     :%ld:", st_cntpos_crrnt.l_buy_exctd_qty );
  	fn_userlog ( c_ServiceName, "FUT Sell exctd qty    :%ld:", st_cntpos_crrnt.l_sell_exctd_qty );
	}

  if( DEBUG_MSG_LVL_3 ) /*** Ver 4.3 ***/
  {
    fn_userlog ( c_ServiceName, "FUT Open qty          :%ld:", st_cntpos_crrnt.l_opnpstn_qty );
    fn_userlog ( c_ServiceName, "FUT Original open val :%lf:", st_cntpos_crrnt.d_org_opn_val );
    fn_userlog ( c_ServiceName, "FUT MTMed open val    :%lf:", st_cntpos_crrnt.d_mtm_opn_val );
	}
      if( (strcmp(st_cntpos_crrnt.c_xchng_cd,
                                ptr_st_pstn_actn->c_xchng_cd) == 0 ) &&
          (st_cntpos_crrnt.c_prd_typ == ptr_st_pstn_actn->c_prd_typ) &&
          (strcmp(st_cntpos_crrnt.c_undrlyng,
                                ptr_st_pstn_actn->c_undrlyng) == 0 ) &&
          (strcmp(st_cntpos_crrnt.c_expry_dt,
                                ptr_st_pstn_actn->c_expry_dt) == 0 ) &&
          (st_cntpos_crrnt.c_exrc_typ == ptr_st_pstn_actn->c_exrc_typ) )
      {
        memcpy ( &st_cntpos_old,
                 &st_cntpos_crrnt,
                 sizeof( st_cntpos_old ) );

        i_returncode =  fn_apply_cnt_actn_fpl ( c_ServiceName,
                                            ptr_st_pstn_actn,
                                            &st_cntpos_crrnt,
                                            ptr_st_err_msg );
        if ( i_returncode == -1 )
        {
          return FAILURE;
        }

        memcpy ( &st_cntpos_md_rc,
                 &st_cntpos_crrnt,
                 sizeof( st_cntpos_md_rc ) );

        c_pos_avl = 'Y';
     /** } *** commented in Ver 2.8 ***/

			 /**************************** Ver 2.4 Starts ****************************/

      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog ( c_ServiceName, " st_cntpos_crrnt.c_xchng_cd |%s|",st_cntpos_crrnt.c_xchng_cd);
        fn_userlog ( c_ServiceName, " st_cntpos_crrnt.c_prd_typ  |%c|",st_cntpos_crrnt.c_prd_typ);
        fn_userlog ( c_ServiceName, " st_cntpos_crrnt.c_undrlyng |%s|",st_cntpos_crrnt.c_undrlyng);
        fn_userlog ( c_ServiceName, " c_exp_dt                   |%s|",c_exp_dt.arr);
        fn_userlog ( c_ServiceName, " st_cntpos_crrnt.c_exrc_typ |%c|",st_cntpos_crrnt.c_exrc_typ);
      }

      EXEC SQL
        SELECT  FTQ_LST_TRD_PRC
        INTO    :d_ltp
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :st_cntpos_crrnt.c_xchng_cd
        AND     FTQ_PRDCT_TYP = 'F'
        AND     FTQ_UNDRLYNG  = :st_cntpos_crrnt.c_undrlyng
        AND     FTQ_EXPRY_DT  = :c_exp_dt
        AND     FTQ_EXER_TYP  = :st_cntpos_crrnt.c_exrc_typ;

      if(SQLCODE  !=  0 )
      {
        fn_errlog ( c_ServiceName, "S31255", SQLMSG, ptr_st_err_msg->c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        return FAILURE;
      }
      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog ( c_ServiceName, " d_ltp                         |%lf|",d_ltp);
        fn_userlog ( c_ServiceName, " st_cntpos_crrnt.l_opnpstn_qty |%ld|",st_cntpos_crrnt.l_opnpstn_qty);
        fn_userlog ( c_ServiceName, " st_cntpos_crrnt.d_org_opn_val |%lf|",st_cntpos_crrnt.d_org_opn_val);
      }
			if( st_cntpos_crrnt.l_opnpstn_qty  > 0 )
      {
         d_cntrct_pl = ( d_ltp * (double) st_cntpos_crrnt.l_opnpstn_qty ) - st_cntpos_crrnt.d_org_opn_val;
      }
      else if ( st_cntpos_crrnt.l_opnpstn_qty < 0 )
      {
         d_cntrct_pl = fabs(st_cntpos_crrnt.d_org_opn_val)  -  ( d_ltp * (double) abs(st_cntpos_crrnt.l_opnpstn_qty) )  ;
      }

			d_undrlyng_pl = d_undrlyng_pl + d_cntrct_pl;

      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog(c_ServiceName,"Contract Level PNL    |%lf|",d_cntrct_pl);
        fn_userlog(c_ServiceName,"Underlying Level PNL  |%lf|",d_undrlyng_pl);
      }

		/**** Condition Added in ver 2.8 ****/	
			if ( st_cntpos_crrnt.l_opnpstn_qty != 0 )
      {
      	if( DEBUG_MSG_LVL_3 ) /*** Ver 4.3 ***/
      	{
        	fn_userlog(c_ServiceName,"Inside Open Position Condition.");  /**** Ver 2.8 ****/
				}
        d_num_of_lots = ((double)(abs(st_cntpos_crrnt.l_opnpstn_qty))) / ((double)(abs(ptr_st_pstn_actn->l_exec_qty))) ;
      }
		/**** Ver 2.8 Ends ****/			

			if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog ( c_ServiceName, " d_num_of_lots   |%lf|",d_num_of_lots);
      }

		}			/**** Added in Ver 2.8 ****/	
      /********************************** Ver 2.4 Ends ************************************/

      fn_sum_cpos ( st_cntpos_crrnt,
                    &st_undfut_pos_to_be );
  }

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;


  /** If the client is building a position for the first time in the **/
  /** contract then it will not appear in the above list. Hence we   **/
  /** process them seperately                                        **/
  if ( c_pos_avl == 'N' )
  {
		d_num_of_lots = 1.0;  /*** Ver 2.4 ***/

    strcpy( st_cntpos_md_rc.c_cln_mtch_accnt,
                                ptr_st_pstn_actn->c_cln_mtch_accnt );
    strcpy( st_cntpos_md_rc.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
    strcpy( st_cntpos_md_rc.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
    strcpy( st_cntpos_md_rc.c_expry_dt, ptr_st_pstn_actn->c_expry_dt );
    st_cntpos_md_rc.c_prd_typ  = ptr_st_pstn_actn->c_prd_typ;
    st_cntpos_md_rc.c_exrc_typ  = ptr_st_pstn_actn->c_exrc_typ;
    st_cntpos_md_rc.c_opt_typ  = ptr_st_pstn_actn->c_opt_typ;
    st_cntpos_md_rc.l_strike_prc  = ptr_st_pstn_actn->l_strike_prc;
    st_cntpos_md_rc.c_ctgry_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
    st_cntpos_md_rc.c_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;
    st_cntpos_md_rc.l_ibuy_qty = 0;
    st_cntpos_md_rc.d_ibuy_ord_vl = 0;
    st_cntpos_md_rc.l_isell_qty = 0;
    st_cntpos_md_rc.d_isell_ord_vl = 0;
    st_cntpos_md_rc.l_exbuy_qty = 0;
     st_cntpos_md_rc.d_exbuy_ord_vl = 0;
    st_cntpos_md_rc.l_exsell_qty = 0;
    st_cntpos_md_rc.d_exsell_ord_vl = 0;
    st_cntpos_md_rc.l_buy_exctd_qty = 0;
    st_cntpos_md_rc.l_sell_exctd_qty = 0;
    st_cntpos_md_rc.c_opnpstn_flw = 'N';
    st_cntpos_md_rc.l_opnpstn_qty = 0;
    st_cntpos_md_rc.d_org_opn_val = 0;
    st_cntpos_md_rc.d_mtm_opn_val = 0;
    st_cntpos_md_rc.l_und_opn_qty = 0;
    st_cntpos_md_rc.d_und_opn_val = 0;
    st_cntpos_md_rc.d_ibuy_mrgn = 0;
    st_cntpos_md_rc.d_isell_mrgn = 0;
    st_cntpos_md_rc.d_exbuy_mrgn = 0;
    st_cntpos_md_rc.d_exsell_mrgn = 0;
    st_cntpos_md_rc.d_ordr_mrgn = 0;
    st_cntpos_md_rc.c_oprn_typ = '*';

    i_returncode =  fn_apply_cnt_actn_fpl ( c_ServiceName,
																						ptr_st_pstn_actn,
																						&st_cntpos_md_rc,
																						ptr_st_err_msg );
    if ( i_returncode == -1 )
    {
      return FAILURE;
    }

		/**************************** Ver 2.4 Starts ****************************/

    if( DEBUG_MSG_LVL_3 )
    {
       fn_userlog ( c_ServiceName, " st_cntpos_crrnt.c_xchng_cd |%s|",st_cntpos_md_rc.c_xchng_cd);
       fn_userlog ( c_ServiceName, " st_cntpos_crrnt.c_prd_typ  |%c|",st_cntpos_md_rc.c_prd_typ);
       fn_userlog ( c_ServiceName, " st_cntpos_crrnt.c_undrlyng |%s|",st_cntpos_md_rc.c_undrlyng);
       fn_userlog ( c_ServiceName, " c_exp_dt                   |%s|",st_cntpos_md_rc.c_expry_dt);
       fn_userlog ( c_ServiceName, " st_cntpos_crrnt.c_exrc_typ |%c|",st_cntpos_md_rc.c_exrc_typ);
    }

    EXEC SQL
       SELECT  FTQ_LST_TRD_PRC
       INTO    :d_ltp
       FROM    FTQ_FO_TRD_QT
       WHERE   FTQ_XCHNG_CD  = :st_cntpos_md_rc.c_xchng_cd
       AND     FTQ_PRDCT_TYP = 'F'
       AND     FTQ_UNDRLYNG  = :st_cntpos_md_rc.c_undrlyng
       AND     FTQ_EXPRY_DT  = :st_cntpos_md_rc.c_expry_dt
       AND     FTQ_EXER_TYP  = :st_cntpos_md_rc.c_exrc_typ;

    if(SQLCODE  !=  0 )
    {
       fn_errlog ( c_ServiceName, "S31260", SQLMSG, ptr_st_err_msg->c_err_msg );
       EXEC SQL CLOSE :sys_cursor;
       EXEC SQL FREE :sys_cursor;
       return FAILURE;
    }
    if( DEBUG_MSG_LVL_3 )
    {
  			fn_userlog ( c_ServiceName, " d_ltp                         |%lf|",d_ltp);
        fn_userlog ( c_ServiceName, " st_cntpos_crrnt.l_opnpstn_qty |%ld|",st_cntpos_md_rc.l_opnpstn_qty);
        fn_userlog ( c_ServiceName, " st_cntpos_crrnt.d_org_opn_val |%lf|",st_cntpos_md_rc.d_org_opn_val);
    }

	  if( st_cntpos_md_rc.l_opnpstn_qty  > 0 )
    {
        d_cntrct_pl = ( d_ltp * (double) st_cntpos_md_rc.l_opnpstn_qty ) - st_cntpos_md_rc.d_org_opn_val;
    }
    else if ( st_cntpos_md_rc.l_opnpstn_qty < 0 )
    {
        d_cntrct_pl = fabs(st_cntpos_md_rc.d_org_opn_val)  -  ( d_ltp * (double) abs(st_cntpos_md_rc.l_opnpstn_qty) )  ;
    }

    d_undrlyng_pl = d_undrlyng_pl + d_cntrct_pl;

		if( DEBUG_MSG_LVL_3 )
    {
       fn_userlog(c_ServiceName,"Contract Level PNL    |%lf|",d_cntrct_pl);
       fn_userlog(c_ServiceName,"Underlying Level PNL  |%lf|",d_undrlyng_pl);
    }

    if( DEBUG_MSG_LVL_3 )
    {
       fn_userlog ( c_ServiceName, " d_num_of_lots   |%lf|",d_num_of_lots);
    }

    /********************************** Ver 2.4 Ends ************************************/

    fn_sum_cpos ( st_cntpos_md_rc,
                  &st_undfut_pos_to_be );
  }

  if ( st_cntpos_md_rc.l_opnpstn_qty > 0 )
  {
    st_cntpos_md_rc.c_opnpstn_flw = BUY;
  }
  else if ( st_cntpos_md_rc.l_opnpstn_qty < 0 )
  {
    st_cntpos_md_rc.c_opnpstn_flw = SELL;
  }
  else
  {
    st_cntpos_md_rc.c_opnpstn_flw = NEUTRAL;
  }

  /** Update the contract level position on which the action has been **/
  /** applied                                                         **/

	if( c_pos_avl == 'N')
  {
    EXEC SQL
      INSERT INTO FFP_FO_FUTURES_PSTN
      (
        FFP_CLM_MTCH_ACCNT,
        FFP_XCHNG_CD,
        FFP_PRDCT_TYP,
        FFP_INDSTK,
        FFP_UNDRLYNG,
        FFP_EXPRY_DT,
        FFP_EXER_TYP,
        FFP_CNTRCT_TAG,
        FFP_IBUY_QTY,
        FFP_IBUY_ORD_VAL,
        FFP_ISELL_QTY,
        FFP_ISELL_ORD_VAL,
        FFP_EXBUY_QTY,
        FFP_EXBUY_ORD_VAL,
        FFP_EXSELL_QTY,
        FFP_EXSELL_ORD_VAL,
        FFP_BUY_EXCTD_QTY,
        FFP_SELL_EXCTD_QTY,
        FFP_OPNPSTN_FLW,
        FFP_OPNPSTN_QTY,
        FFP_OPNPSTN_VAL,
        FFP_MTM_OPN_VAL
      )
		 VALUES
     (
        :st_cntpos_md_rc.c_cln_mtch_accnt,
        :st_cntpos_md_rc.c_xchng_cd,
        :st_cntpos_md_rc.c_prd_typ,
        :st_cntpos_md_rc.c_ctgry_indstk,
        :st_cntpos_md_rc.c_undrlyng,
        to_date(:st_cntpos_md_rc.c_expry_dt,'DD-Mon-YYYY'),
        :st_cntpos_md_rc.c_exrc_typ,
        :st_cntpos_md_rc.c_cntrct_tag,
        :st_cntpos_md_rc.l_ibuy_qty,
        :st_cntpos_md_rc.d_ibuy_ord_vl,
        :st_cntpos_md_rc.l_isell_qty,
        :st_cntpos_md_rc.d_isell_ord_vl,
        :st_cntpos_md_rc.l_exbuy_qty,
        :st_cntpos_md_rc.d_exbuy_ord_vl,
        :st_cntpos_md_rc.l_exsell_qty,
        :st_cntpos_md_rc.d_exsell_ord_vl,
        :st_cntpos_md_rc.l_buy_exctd_qty,
        :st_cntpos_md_rc.l_sell_exctd_qty,
        :st_cntpos_md_rc.c_opnpstn_flw,
        :st_cntpos_md_rc.l_opnpstn_qty,
        :st_cntpos_md_rc.d_org_opn_val,
        :st_cntpos_md_rc.d_mtm_opn_val
     );

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31265", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }
  }
	else
  {
    EXEC SQL
      UPDATE  FFP_FO_FUTURES_PSTN
      SET     FFP_IBUY_QTY       = :st_cntpos_md_rc.l_ibuy_qty,
              FFP_IBUY_ORD_VAL   = :st_cntpos_md_rc.d_ibuy_ord_vl,
              FFP_ISELL_QTY      = :st_cntpos_md_rc.l_isell_qty,
              FFP_ISELL_ORD_VAL  = :st_cntpos_md_rc.d_isell_ord_vl,
              FFP_EXBUY_QTY      = :st_cntpos_md_rc.l_exbuy_qty,
              FFP_EXBUY_ORD_VAL  = :st_cntpos_md_rc.d_exbuy_ord_vl,
              FFP_EXSELL_QTY     = :st_cntpos_md_rc.l_exsell_qty,
              FFP_EXSELL_ORD_VAL = :st_cntpos_md_rc.d_exsell_ord_vl,
              FFP_BUY_EXCTD_QTY  = :st_cntpos_md_rc.l_buy_exctd_qty,
              FFP_SELL_EXCTD_QTY = :st_cntpos_md_rc.l_sell_exctd_qty,
              FFP_OPNPSTN_FLW    = :st_cntpos_md_rc.c_opnpstn_flw,
              FFP_OPNPSTN_QTY    = :st_cntpos_md_rc.l_opnpstn_qty,
              FFP_OPNPSTN_VAL    = :st_cntpos_md_rc.d_org_opn_val,
              FFP_MTM_OPN_VAL    = :st_cntpos_md_rc.d_mtm_opn_val,
              FFP_TRG_PRC        = DECODE(:st_cntpos_md_rc.c_opnpstn_flw,'N',0,FFP_TRG_PRC), /** Ver 3.1 **/
              FFP_MIN_TRG_PRC    = DECODE(:st_cntpos_md_rc.c_opnpstn_flw,'N',0,FFP_MIN_TRG_PRC) /** Ver 3.1 **/
      WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
      AND     FFP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
      AND     FFP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
      AND     FFP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
      AND     FFP_EXPRY_DT       = to_date(:ptr_st_pstn_actn->c_expry_dt,
                                      'DD-Mon-YYYY')
      AND     FFP_EXER_TYP       = :ptr_st_pstn_actn->c_exrc_typ
      AND     FFP_CNTRCT_TAG     = :ptr_st_pstn_actn->c_cntrct_tag;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31270", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }
  }

	if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog ( c_ServiceName, "*************  SFO_UPD_FUT_POS - IV *************");
  	fn_userlog ( c_ServiceName, "Calcualted underlying level position" );
  	fn_userlog ( c_ServiceName, "FUT IWTL buy qty      :%ld:", st_undfut_pos_to_be.l_ibuy_qty );
  	fn_userlog ( c_ServiceName, "FUT IWTL buy val      :%lf:", st_undfut_pos_to_be.d_ibuy_ord_vl );
  	fn_userlog ( c_ServiceName, "FUT IWTL sell qty     :%ld:", st_undfut_pos_to_be.l_isell_qty );
  	fn_userlog ( c_ServiceName, "FUT IWTL sell val     :%lf:", st_undfut_pos_to_be.d_isell_ord_vl );
  	fn_userlog ( c_ServiceName, "FUT EXCH buy qty      :%ld:", st_undfut_pos_to_be.l_exbuy_qty );
  	fn_userlog ( c_ServiceName, "FUT EXCH buy val      :%lf:", st_undfut_pos_to_be.d_exbuy_ord_vl );
  	fn_userlog ( c_ServiceName, "FUT EXCH sell qty     :%ld:", st_undfut_pos_to_be.l_exsell_qty );
  	fn_userlog ( c_ServiceName, "FUT EXCH sell val     :%lf:", st_undfut_pos_to_be.d_exsell_ord_vl );
  	fn_userlog ( c_ServiceName, "FUT Buy exctd qty     :%ld:", st_undfut_pos_to_be.l_buy_exctd_qty );
  	fn_userlog ( c_ServiceName, "FUT Sell exctd qty    :%ld:", st_undfut_pos_to_be.l_sell_exctd_qty );
  	fn_userlog ( c_ServiceName, "FUT Open qty          :%ld:", st_undfut_pos_to_be.l_opnpstn_qty );
  	fn_userlog ( c_ServiceName, "FUT Original open val :%lf:", st_undfut_pos_to_be.d_org_opn_val );
  	fn_userlog ( c_ServiceName, "FUT MTMed open val    :%lf:", st_undfut_pos_to_be.d_mtm_opn_val );
  	fn_userlog ( c_ServiceName, "FUT Add Margin val    :%lf:", st_undfut_pos_to_be.d_add_mrgn_val );
	}


	if( DEBUG_MSG_LVL_3 )
	{
  	fn_userlog ( c_ServiceName, "*************  SFO_UPD_FUT_POS - V  *************");
  	fn_userlog ( c_ServiceName, "Calculating margin" );
	}

  /** Calculate the margin on the new underlying position **/
  i_returncode = fn_upd_mrgn_fpl ( c_ServiceName,
                               ptr_st_pstn_actn,
                               &st_undfut_pos_crrnt,
                               &st_undfut_pos_to_be,
                               ptr_st_err_msg );

  if ( i_returncode != 0 )
  {
    return FAILURE;
  }


	if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog ( c_ServiceName, "Current margin values" );
  	fn_userlog ( c_ServiceName, "FUT Order level margin     :%lf:", st_undfut_pos_crrnt.d_ordr_mrgn );
  	fn_userlog ( c_ServiceName, "FUT Executed level margin  :%lf:", st_undfut_pos_crrnt.d_exctd_mrgn );
  	fn_userlog ( c_ServiceName, "FUT Spread level margin    :%lf:", st_undfut_pos_crrnt.d_sprd_mrgn );
  	fn_userlog ( c_ServiceName, "FUT Spread profit and loss :%lf:", st_undfut_pos_crrnt.d_sprd_pl );
  	fn_userlog ( c_ServiceName, "FUT Trade level margin     :%lf:", st_undfut_pos_crrnt.d_trd_mrgn );
  	fn_userlog ( c_ServiceName, "To be margin values" );
  	fn_userlog ( c_ServiceName, "FUT Order level margin     :%lf:", st_undfut_pos_to_be.d_ordr_mrgn );
  	fn_userlog ( c_ServiceName, "FUT Executed level margin  :%lf:", st_undfut_pos_to_be.d_exctd_mrgn );
  	fn_userlog ( c_ServiceName, "FUT Spread level margin    :%lf:", st_undfut_pos_to_be.d_sprd_mrgn );
  	fn_userlog ( c_ServiceName, "FUT Spread profit and loss :%lf:", st_undfut_pos_to_be.d_sprd_pl );
  	fn_userlog ( c_ServiceName, "FUT Trade level margin     :%lf:", st_undfut_pos_to_be.d_trd_mrgn );
	}

	strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks );


	if(	ptr_st_pstn_actn->c_nkd_blkd_flg == JOINT_CONVERSION )
	{
		if ( ptr_st_pstn_actn->l_cover_qty > 0 )
    {
			/*** Ver 2.4 Add margin allready released at the time of close future plus position **

      d_diff_amv = st_undfut_pos_crrnt.d_add_mrgn_val - st_undfut_pos_to_be.d_add_mrgn_val;

			if( DEBUG_MSG_LVL_3 )
  		{
  			fn_userlog ( c_ServiceName, "FUT-In Fut Conversion-Difference in UAMV :%lf:", d_diff_amv );
			}

      if( d_diff_amv != 0 )
      {
        i_returncode = fn_upd_limits( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      RELEASE_OF_ADD_MARGIN,
                                      DEBIT_WITHOUT_LIMIT,
                                      d_diff_amv,
                                      &d_balance_amt);
        if ( i_returncode != 0 )
        {
          return i_returncode;
        }
      }
			*******************************************************************************************/


			if (ptr_st_pstn_actn->c_trnsctn_flw == BUY )
      {
				/***	Commented In Ver 2.0

        d_pl_amt = ( (st_cntpos_old.d_mtm_opn_val /
                      st_cntpos_old.l_opnpstn_qty ) -
                     ptr_st_pstn_actn->l_exec_rt ) *
                     ptr_st_pstn_actn->l_cover_qty ;
				*******************************************/


        d_pl_amt = ( (st_cntpos_old.d_mtm_opn_val /
                      st_cntpos_old.l_opnpstn_qty ) -
                      d_exec_rt) *
                     ptr_st_pstn_actn->l_cover_qty ;      /***  Ver 2.0 ***/
      }
      else
      {
				/***	Commented In Ver	2.0
        d_pl_amt = ( ptr_st_pstn_actn->l_exec_rt -
                    ( st_cntpos_old.d_mtm_opn_val /
                      st_cntpos_old.l_opnpstn_qty) ) *
                      ptr_st_pstn_actn->l_cover_qty ;
				***********************************************/

				d_pl_amt = ( d_exec_rt -
                   ( st_cntpos_old.d_mtm_opn_val /
                     st_cntpos_old.l_opnpstn_qty) ) *
                     ptr_st_pstn_actn->l_cover_qty ;     /***  Ver 2.0 ***/
      }	
			
	if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog (c_ServiceName,"FUT-Fut Conversion-Profit/Loss at contract level on execution :%lf:", d_pl_amt );
	}

      if ( d_pl_amt != 0 )
      {


        sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s",
                  ptr_st_pstn_actn->c_undrlyng,
                  ptr_st_pstn_actn->c_expry_dt);

				/*****  NRI - TDS Starts under Ver 3.4 *****/
				/**** Commented in Ver 4.1 
        if(strncmp(ptr_st_pstn_actn->c_cln_mtch_accnt, "751", 3) == 0) ****/
				/*** Ver 4.1 Starts ***/

        MEMSET(sql_iai_type.arr);
				EXEC SQL
          SELECT  IAI_TYPE
          INTO    :sql_iai_type
          FROM    IAI_INFO_ACCOUNT_INFO
          WHERE   IAI_MATCH_ACCOUNT_NO  = :ptr_st_pstn_actn->c_cln_mtch_accnt;

				if ( SQLCODE != 0 )
				{
					fn_errlog( c_ServiceName, "S31275", SQLMSG, ptr_st_err_msg->c_err_msg );
					return FAILURE;
				}
				/*** Ver 4.1 Ends ***/
				if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") == 0) /*** Condition added in Ver 4.1 ***/

        {
            strcpy(c_narration_id,TDS_NRI);
            strcpy(c_reason_cd,"Profit Loss on Cover Leg");

            i_returncode = fn_tds( c_ServiceName,
                                   ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    c_reason_cd,
                                    DEBIT_WITHOUT_LIMIT,
                                    d_pl_amt,
                                    &d_balance_amt);

            if ( i_returncode != 0 )
            {
              return i_returncode;
            }
        }
				/*****  NRI - TDS ends under Ver 3.4 *****/

        i_returncode = fn_upd_limits( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      PROFIT_LOSS_ON_COVER_LEG,
                                      DEBIT_WITHOUT_LIMIT,
                                      d_pl_amt,
                                      &d_balance_amt);
        if ( i_returncode != 0 )
        {
          return i_returncode;
        }
      }
    } /*********** if-end of cover qty >  0 *************/

			
		 d_diff_UOM = st_undfut_pos_crrnt.d_ordr_mrgn - st_undfut_pos_to_be.d_ordr_mrgn ;	

	if( DEBUG_MSG_LVL_3 )
	{
  	fn_userlog ( c_ServiceName, "FUT-Order level- Difference in UOM :%lf:", d_diff_UOM );
	}
	
		if ( d_diff_UOM != 0 )
    {
			sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s-%c",
              ptr_st_pstn_actn->c_undrlyng,
              ptr_st_pstn_actn->c_expry_dt,
							ptr_st_pstn_actn->c_prd_typ);

      i_returncode = fn_upd_limits( c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    ORDER_MARGIN_ADJ_ON_FUT_CONV,
                                   	DEBIT_WITHOUT_LIMIT, 
                                    d_diff_UOM,
                                    &d_balance_amt);
      if ( i_returncode != 0 )
      {
        return FAILURE;
      }		
			
		}


 			d_diff_UTM = st_undfut_pos_crrnt.d_trd_mrgn -
                 st_undfut_pos_to_be.d_trd_mrgn;

	if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog ( c_ServiceName, "FUT-In Fut Conversion-Difference in UTM :%lf:", d_diff_UTM );
	}

    if ( d_diff_UTM != 0 )
    {
			sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s-%c",
              ptr_st_pstn_actn->c_undrlyng,
              ptr_st_pstn_actn->c_expry_dt,
							ptr_st_pstn_actn->c_prd_typ);

      i_returncode = fn_upd_limits( c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    TRD_MARGIN_ADJ_ON_FUT_CONV,
                                    DEBIT_WITHOUT_LIMIT,
                                    d_diff_UTM,
                                    &d_balance_amt);
      if ( i_returncode != 0 )
      {
        return FAILURE;
      }
		}

	}	/***Joint Conversion check ends here **/
	else
	{

		if ( ptr_st_pstn_actn->l_cover_qty > 0 )
    {
			
      /*** Ver 2.4 Add margin allready released at the time of close future plus position **

      d_diff_amv = st_undfut_pos_crrnt.d_add_mrgn_val - st_undfut_pos_to_be.d_add_mrgn_val;

			if( DEBUG_MSG_LVL_3 )
  		{
  			fn_userlog ( c_ServiceName, "FUT-In Fut Conversion-Difference in UAMV :%lf:", d_diff_amv );
			}

			if( ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) && ( ptr_st_pstn_actn->l_session_id != 0 )	)
							c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
			else
							c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;
						
			
      if( d_diff_amv != 0 )
      {
        i_returncode = fn_upd_limits( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      RELEASE_OF_ADD_MARGIN,
                                      c_dr_without_lmt_flg,
                                      d_diff_amv,
                                      &d_balance_amt);
        if ( i_returncode != 0 )
        {
          return FAILURE;
        }
      }
			***************************************************************************************/

			if (ptr_st_pstn_actn->c_trnsctn_flw == BUY )
      {
				/***	Commented In Ver 2.0
        d_pl_amt = ( (st_cntpos_old.d_mtm_opn_val /
                      st_cntpos_old.l_opnpstn_qty ) -
                     ptr_st_pstn_actn->l_exec_rt ) *
                     ptr_st_pstn_actn->l_cover_qty ;
				*******************************************/

 				d_pl_amt = ( (st_cntpos_old.d_mtm_opn_val /
                      st_cntpos_old.l_opnpstn_qty ) -
                      d_exec_rt ) *
                      ptr_st_pstn_actn->l_cover_qty ;     /***  Ver 2.0 ***/
      }
      else
      {
				/***	Commented In Ver	2.0
        d_pl_amt = ( ptr_st_pstn_actn->l_exec_rt -
                    ( st_cntpos_old.d_mtm_opn_val /
                      st_cntpos_old.l_opnpstn_qty) ) *
                      ptr_st_pstn_actn->l_cover_qty ;
				**********************************************/

      	d_pl_amt = ( d_exec_rt -
                    ( st_cntpos_old.d_mtm_opn_val /
                      st_cntpos_old.l_opnpstn_qty) ) *
                      ptr_st_pstn_actn->l_cover_qty ;     /***  Ver 2.0 ***/
      }	
			
	if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog (c_ServiceName,"FUT-In Fut Conversion-Profit/Loss at contract level on execution :%lf:", d_pl_amt );
	}

      if ( d_pl_amt != 0 )
      {


        sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s",
                  ptr_st_pstn_actn->c_undrlyng,
                  ptr_st_pstn_actn->c_expry_dt);

			if( ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) && ( ptr_st_pstn_actn->l_session_id != 0 )	)
							c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
			else
							c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;

				/*****  NRI - TDS Starts under Ver 3.4 *****/
				/*** Commnted in Ver 4.1 ****
        if(strncmp(ptr_st_pstn_actn->c_cln_mtch_accnt, "751", 3) == 0)   ****/
						/*** Ver 4.1 Starts ***/

        MEMSET(sql_iai_type.arr);
				EXEC SQL
          SELECT  IAI_TYPE
          INTO    :sql_iai_type
          FROM    IAI_INFO_ACCOUNT_INFO
          WHERE   IAI_MATCH_ACCOUNT_NO  = :ptr_st_pstn_actn->c_cln_mtch_accnt;

				if ( SQLCODE != 0 )
				{
					fn_errlog( c_ServiceName, "S31280", SQLMSG, ptr_st_err_msg->c_err_msg );
					return FAILURE;
				}
				/*** Ver 4.1 Ends ***/
				if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") == 0) /*** Condition added in Ver 4.1 ***/

        {
            strcpy(c_narration_id,TDS_NRI);
            strcpy(c_reason_cd,"Profit Loss on Cover Leg");

            i_returncode = fn_tds( c_ServiceName,
                                   ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    c_reason_cd,
                                    c_dr_without_lmt_flg,
                                    d_pl_amt,
                                    &d_balance_amt);

            if ( i_returncode != 0 )
            {
              return FAILURE;
            }
        }
				/*****  NRI - TDS ends under Ver 3.4 *****/

        i_returncode = fn_upd_limits( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      PROFIT_LOSS_ON_COVER_LEG,
                                      c_dr_without_lmt_flg,
                                      d_pl_amt,
                                      &d_balance_amt);
        if ( i_returncode != 0 )
        {
          return FAILURE;
        }
      }
    } /*********** if-end of cover qty >  0 *************/

 		/*** Ver 2.1 Starts ***/

    /*** Ver 2.4 Add margin allready released at the time of close future plus position **
		
    else if	(	ptr_st_pstn_actn->l_fresh_qty != 0
	 						&& st_undfut_pos_crrnt.d_add_mrgn_val != 0
 							&& st_undfut_pos_to_be.d_add_mrgn_val == 0
  						&& 	( st_undfut_pos_to_be.d_sprd_mrgn != 0 || st_undfut_pos_to_be.d_sprd_pl != 0	)
						)
    {
			if( DEBUG_MSG_LVL_3 )
  		{
				fn_userlog(c_ServiceName,"Inside User Add Margin Check.");
			}

     	if ( DEBUG_MSG_LVL_3 )
     	{
     		fn_userlog(c_ServiceName,"Fresh Qty :%ld:",ptr_st_pstn_actn->l_fresh_qty);
     		fn_userlog(c_ServiceName,"Current Add Margin Value :%lf:",st_undfut_pos_crrnt.d_add_mrgn_val);
     		fn_userlog(c_ServiceName,"To Be Add margin Value :%lf:",st_undfut_pos_to_be.d_add_mrgn_val);
     		fn_userlog(c_ServiceName,"Spread Margin :%lf:",st_undfut_pos_to_be.d_sprd_mrgn);
     		fn_userlog(c_ServiceName,"Spread Profit / Loss :%lf:",st_undfut_pos_to_be.d_sprd_pl);
     
     	}

    	d_diff_amv = st_undfut_pos_crrnt.d_add_mrgn_val - st_undfut_pos_to_be.d_add_mrgn_val;
			 
			if( DEBUG_MSG_LVL_3 )
  		{
   			fn_userlog ( c_ServiceName, "FUT-In Fut Conversion-Difference in UAMV :%lf:", d_diff_amv );
			}

    	if( ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) && ( ptr_st_pstn_actn->l_session_id != 0 ) )
		 	{	
      	c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
			}
    	else
			{
      	c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;
			}

     if( d_diff_amv != 0 )
     {
        i_returncode = fn_upd_limits( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      RELEASE_OF_ADD_MARGIN,
                                      c_dr_without_lmt_flg,
                                      d_diff_amv,
                                      &d_balance_amt);
        if ( i_returncode != 0 )
        {
          return FAILURE;
        }
     }
   }
	 ******************************************************************************************/	

   /*** Ver 2.1 Ends ***/
			
	d_diff_UOM = st_undfut_pos_crrnt.d_ordr_mrgn - st_undfut_pos_to_be.d_ordr_mrgn ;	

	if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog ( c_ServiceName, "FUT-Order level- Difference in UOM :%lf:", d_diff_UOM );
	}
	
		if ( d_diff_UOM != 0 )
    {
			if( ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) && ( ptr_st_pstn_actn->l_session_id != 0 )	)
							c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
			else
							c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;

			sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s-%c",
              ptr_st_pstn_actn->c_undrlyng,
              ptr_st_pstn_actn->c_expry_dt,
							ptr_st_pstn_actn->c_prd_typ);

      i_returncode = fn_upd_limits( c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    ORDER_MARGIN_ADJ_ON_FUT_CONV,
                                   	c_dr_without_lmt_flg, 
                                    d_diff_UOM,
                                    &d_balance_amt);
      if ( i_returncode != 0 )
      {
        return FAILURE;
      }		
			
		}

 			d_diff_UTM = st_undfut_pos_crrnt.d_trd_mrgn -
                 st_undfut_pos_to_be.d_trd_mrgn;

	if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog ( c_ServiceName, "FUT-In Fut Conversion-Difference in UTM :%lf:", d_diff_UTM );
	}

    if ( d_diff_UTM != 0 )
    {
			if( ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) && ( ptr_st_pstn_actn->l_session_id != 0 )	)
							c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
			else
							c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;

			sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s-%c",
              ptr_st_pstn_actn->c_undrlyng,
              ptr_st_pstn_actn->c_expry_dt,
							ptr_st_pstn_actn->c_prd_typ);

      i_returncode = fn_upd_limits( c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    TRD_MARGIN_ADJ_ON_FUT_CONV,
                                    c_dr_without_lmt_flg,
                                    d_diff_UTM,
                                    &d_balance_amt);
      if ( i_returncode != 0 )
      {
        return FAILURE;
      }
		}

	}	/***Single Conversion check ends here **/



		strcpy ( ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks );

		/**Underlyng level position will be updated after margin requirement check done above **/

	if ( st_undfut_pos_to_be.l_opnpstn_qty > 0 )
  {
    st_undfut_pos_to_be.c_opnpstn_flw = BUY;
  }
  else if ( st_undfut_pos_to_be.l_opnpstn_qty < 0 )
  {
    st_undfut_pos_to_be.c_opnpstn_flw = SELL;
  }
  else
  {
    st_undfut_pos_to_be.c_opnpstn_flw = NEUTRAL;
  }
	
	/*** Ver 2.4 ***/

	*d_fut_notional_pnl = d_undrlyng_pl / d_num_of_lots;	
	*d_fut_avl_mrgn	= st_undfut_pos_to_be.d_trd_mrgn + d_undrlyng_pl;
	*d_fut_min_mrgn			= st_undfut_pos_to_be.d_mm_trd_mrgn;	
	
	/*** Ver 2.4 ***/

  /** Update the underlying level position on to the table **/
  if( c_upos_avl == 'N')
  {
    EXEC SQL
      /*** SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY')              Commented In Ver 2.6 ***/
      /*** SELECT TO_CHAR(GREATEST(EXG_NXT_TRD_DT,EXG_TMP_TRD_DT),'DD-Mon-YYYY') *** Ver 2.6 Reverted In Ver 2.6 Bug Fix ***/
      SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY') /*** Reverted In Ver 2.6 Bug Fix ***/
      INTO   :c_trade_dt
      FROM   EXG_XCHNG_MSTR
      WHERE  EXG_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
      AND    EXG_MKT_TYP = 'D';

    if ( SQLCODE != 0 )
    {
       fn_errlog(c_ServiceName, "S31285", SQLMSG, ptr_st_err_msg->c_err_msg );
			 return FAILURE;
    }

    /** ver 4.7 start **/
    MEMSET(c_ucc_cd);
    EXEC SQL
    SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
    INTO :c_ucc_cd
    FROM  CLM_CLNT_MSTR
    WHERE CLM_MTCH_ACCNT =:ptr_st_pstn_actn->c_cln_mtch_accnt;
    
    if ( SQLCODE != 0 )
    {
       fn_errlog(c_ServiceName, "S31290", SQLMSG, ptr_st_err_msg->c_err_msg );
       return FAILURE;
    }
   rtrim(c_ucc_cd);
   /** ver 4.7 ends **/ 
    EXEC SQL
      INSERT INTO FUP_FUT_UNDRLYNG_PSTN
      (
        FUP_CLM_MTCH_ACCNT,
        FUP_XCHNG_CD,
        FUP_PRDCT_TYP,
        FUP_INDSTK,
        FUP_UNDRLYNG,
        FUP_CNTRCT_TAG,
        FUP_UIBUY_QTY,
        FUP_UIBUY_VAL,
        FUP_UISELL_QTY,
        FUP_UISELL_VAL,
        FUP_UEXBUY_QTY,
        FUP_UEXBUY_VAL,
        FUP_UEXSELL_QTY,
        FUP_UEXSELL_VAL,
        FUP_UBUY_EXCTD_QTY,
        FUP_USELL_EXCTD_QTY,
        FUP_UOPNPSTN_FLW,
        FUP_UOPNPSTN_QTY,
        FUP_UOPNPSTN_VAL,
        FUP_UMTM_OPN_VAL,
        FUP_UORDR_MRGN,
				FUP_UEXCTD_MRGN,
        FUP_USPREAD_MRGN,
        FUP_USPREAD_PNL,
        FUP_ADD_MRGN_VAL,
        FUP_UTRD_MRGN,
        FUP_TRD_DT,
        FUP_UMIN_TRD_MRGN,
        FUP_UCC_CD   /**ver 4.7 **/
      )
      VALUES
      (
        :st_undfut_pos_to_be.c_cln_mtch_accnt,
        :st_undfut_pos_to_be.c_xchng_cd,
        :st_undfut_pos_to_be.c_prd_typ,
        :st_undfut_pos_to_be.c_ctgry_indstk,
        :st_undfut_pos_to_be.c_undrlyng,
        :st_undfut_pos_to_be.c_cntrct_tag,
        :st_undfut_pos_to_be.l_ibuy_qty,
        :st_undfut_pos_to_be.d_ibuy_ord_vl,
        :st_undfut_pos_to_be.l_isell_qty,
        :st_undfut_pos_to_be.d_isell_ord_vl,
        :st_undfut_pos_to_be.l_exbuy_qty,
        :st_undfut_pos_to_be.d_exbuy_ord_vl,
        :st_undfut_pos_to_be.l_exsell_qty,
        :st_undfut_pos_to_be.d_exsell_ord_vl,
        :st_undfut_pos_to_be.l_buy_exctd_qty,
        :st_undfut_pos_to_be.l_sell_exctd_qty,
        :st_undfut_pos_to_be.c_opnpstn_flw,
        :st_undfut_pos_to_be.l_opnpstn_qty,
        :st_undfut_pos_to_be.d_org_opn_val,
        :st_undfut_pos_to_be.d_mtm_opn_val,
        :st_undfut_pos_to_be.d_ordr_mrgn,
        :st_undfut_pos_to_be.d_exctd_mrgn,
        :st_undfut_pos_to_be.d_sprd_mrgn,
        :st_undfut_pos_to_be.d_sprd_pl,
        :st_undfut_pos_to_be.d_add_mrgn_val,
        :st_undfut_pos_to_be.d_trd_mrgn,
        :c_trade_dt,
        :st_undfut_pos_to_be.d_mm_trd_mrgn,
        :c_ucc_cd        /**ver 4.7 **/
        );

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31295", SQLMSG, ptr_st_err_msg->c_err_msg );
			 	return FAILURE;
      }
  }
	else
  {

     /***  Ver 3.7 starts ***/

    EXEC SQL
      SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY')
      INTO   :c_trade_dt
      FROM   EXG_XCHNG_MSTR
      WHERE  EXG_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
      AND    EXG_MKT_TYP = 'D';

    if ( SQLCODE != 0 )
    {
       fn_errlog(c_ServiceName, "S31300", SQLMSG, ptr_st_err_msg->c_err_msg );
       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }
    /***  Ver 3.7 ends ***/

    EXEC SQL
      UPDATE  FUP_FUT_UNDRLYNG_PSTN
      SET     FUP_UIBUY_QTY       = :st_undfut_pos_to_be.l_ibuy_qty,
              FUP_UIBUY_VAL       = :st_undfut_pos_to_be.d_ibuy_ord_vl,
              FUP_UISELL_QTY      = :st_undfut_pos_to_be.l_isell_qty,
              FUP_UISELL_VAL      = :st_undfut_pos_to_be.d_isell_ord_vl,
              FUP_UEXBUY_QTY      = :st_undfut_pos_to_be.l_exbuy_qty,
              FUP_UEXBUY_VAL      = :st_undfut_pos_to_be.d_exbuy_ord_vl,
              FUP_UEXSELL_QTY     = :st_undfut_pos_to_be.l_exsell_qty,
              FUP_UEXSELL_VAL     = :st_undfut_pos_to_be.d_exsell_ord_vl,
              FUP_UBUY_EXCTD_QTY  = :st_undfut_pos_to_be.l_buy_exctd_qty,
              FUP_USELL_EXCTD_QTY = :st_undfut_pos_to_be.l_sell_exctd_qty,
              FUP_UOPNPSTN_FLW    = :st_undfut_pos_to_be.c_opnpstn_flw,
              FUP_UOPNPSTN_QTY    = :st_undfut_pos_to_be.l_opnpstn_qty,
              FUP_UOPNPSTN_VAL    = :st_undfut_pos_to_be.d_org_opn_val,
              FUP_UMTM_OPN_VAL    = :st_undfut_pos_to_be.d_mtm_opn_val,
              FUP_UORDR_MRGN      = :st_undfut_pos_to_be.d_ordr_mrgn,
              FUP_UEXCTD_MRGN     = :st_undfut_pos_to_be.d_exctd_mrgn,
              FUP_USPREAD_MRGN    = :st_undfut_pos_to_be.d_sprd_mrgn,
              FUP_USPREAD_PNL     = :st_undfut_pos_to_be.d_sprd_pl,
              FUP_ADD_MRGN_VAL    = :st_undfut_pos_to_be.d_add_mrgn_val,
              FUP_UTRD_MRGN       = :st_undfut_pos_to_be.d_trd_mrgn,
              FUP_UMIN_TRD_MRGN   = :st_undfut_pos_to_be.d_mm_trd_mrgn,
              FUP_TRD_DT          = :c_trade_dt                             /*** Ver 3.7 ***/ 
      WHERE   FUP_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
      AND     FUP_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
      AND     FUP_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
      AND     FUP_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
      AND     FUP_CNTRCT_TAG      = :ptr_st_pstn_actn->c_cntrct_tag;

	  if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31305", SQLMSG, ptr_st_err_msg->c_err_msg );
			return FAILURE;
    }
  }
	
	if( DEBUG_MSG_LVL_3 )
  {
	fn_userlog(c_ServiceName , "Sucessfully converted FuturePlus Position to Futures match a/c - [%s], Underlying - [%s], Expiry date - [%s], Tag - [%c] ",
        ptr_st_pstn_actn->c_cln_mtch_accnt,
        ptr_st_pstn_actn->c_undrlyng,
        ptr_st_pstn_actn->c_expry_dt,
        ptr_st_pstn_actn->c_cntrct_tag );
		}

		return SUCCESS;
}

int fn_call_addhoc_mrgn_fpl( char *c_ServiceName,     /***  Ver 1.8 ***/
                             struct vw_pstn_actn *ptr_st_pstn_actn,
                             struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                             struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                             struct vw_err_msg *ptr_st_err_msg)
{
	int i_returncode;
  double d_amount;
  double d_balance_amt;
  char c_narration_id[4];
  char c_tmp_rmrks [ 133 ] ;  
  varchar c_exp_dt[LEN_DATE];

	memcpy ( ptr_st_undfut_pos_to_be,
             ptr_st_undfut_pos_crrnt,
             sizeof( struct vw_undfut_pos ) );

 	ptr_st_undfut_pos_to_be->d_add_mrgn_val = ptr_st_undfut_pos_to_be->d_add_mrgn_val + ptr_st_pstn_actn->d_add_mrgn_amt ;

  d_amount = (-1) * ptr_st_pstn_actn->d_add_mrgn_amt ;

	if( DEBUG_MSG_LVL_3 )
	{
  	fn_userlog ( c_ServiceName, "Add margin amount :%lf:", d_amount );
  	fn_userlog ( c_ServiceName, "To be Add margin value :%lf:",ptr_st_undfut_pos_to_be->d_add_mrgn_val );
	}

  if ( ptr_st_pstn_actn->l_actn_typ == ADD_MARGIN  )
  {
  	strcpy(c_narration_id,ON_USER_ADD_MARGIN);
  }
  else
  {
    strcpy(c_narration_id,ON_SYSTEM_ADD_MARGIN);
  }

	MEMSET(c_exp_dt);

  EXEC SQL
     SELECT FFP_EXPRY_DT
     INTO :c_exp_dt
     FROM FFP_FO_FUTURES_PSTN
     WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
     AND     FFP_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
     AND     FFP_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
     AND     FFP_INDSTK = :ptr_st_pstn_actn->c_ctgry_indstk
     AND     FFP_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
     AND     FFP_CNTRCT_TAG = :ptr_st_pstn_actn->c_cntrct_tag;

  if ( SQLCODE != 0  && SQLCODE == NO_DATA_FOUND)
  {
    fn_userlog(c_ServiceName,"Failed While Getting Expiry Date");
  }

  if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog ( c_ServiceName, "c_narration_id :%s",c_narration_id);
    fn_userlog ( c_ServiceName, "Underlying :%s",ptr_st_pstn_actn->c_undrlyng);
    fn_userlog ( c_ServiceName, "Product Type:%c",ptr_st_pstn_actn->c_prd_typ);
    fn_userlog ( c_ServiceName, "Contract Tag :%c", ptr_st_pstn_actn->c_cntrct_tag);
    fn_userlog ( c_ServiceName, "Expiry date :%s", c_exp_dt.arr);
  }

  sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s", ptr_st_pstn_actn->c_undrlyng, c_exp_dt.arr);
 	
	if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog ( c_ServiceName, "Remark :%s",ptr_st_pstn_actn->c_ref_rmrks);
	}

	if ( d_amount != 0 )
	{
		 i_returncode = fn_upd_limits( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      c_narration_id,
                                      DEBIT_TILL_LIMIT,
                                      d_amount,
                                      &d_balance_amt);

		 if ( i_returncode != 0 )
		 {
        fn_userlog(c_ServiceName,"Failed While Calling fn_upd_limits For ADHOC_ADD_MRGN_RQST");
				return i_returncode;	
		 }

		strcpy ( ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks );	
	}

	ptr_st_undfut_pos_to_be->d_add_mrgn_val	=	 ptr_st_undfut_pos_to_be->d_add_mrgn_val	+	d_balance_amt;

	return SUCCESS;
}

/******* Ver 3.9 Starts here ********/
int fn_cal_min_mrgn( char *c_ServiceName,
                       struct vw_pstn_actn *ptr_st_pstn_actn,
                       struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                       struct vw_undfut_pos *ptr_st_undfut_pos_to_be,
                       struct vw_err_msg *ptr_st_err_msg,
                       char   *c_imtm_addmrgn_flg)
{

 
double  d_loss_prcnt=0;
  double  d_thrshld_mtm_lss_pcntg=0.0;
  double  d_balance_amt=0.0;
  double  d_diff_TM = 0.0;
  double  d_bal_to_apply=0.0;
  double  d_base_prc=0.0;           
  double  d_amnt_blckd  = 0.0;     
  double  d_mm_trd_mrgn=0.0;     

  char c_pos_avl;
  char  c_err_msg[256];
  char  c_imtm_rmrks[256];

  int i_returncode;
  int i_ret_val;
  int i_trnsctn;

  double d_init_mrgn_prcnt=0.0;   
  long  l_run_no;        

  TPTRANID tranid ;
  
  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;             /* a cursor variable */
    char  sql_cln_mtch_accnt[11];
    char  sql_xchng_cd[4];
    char  sql_prd_typ;
    char  sql_cntrct_tag;
    char  c_openpstn_flow;
    char  sql_undrlyng[7];
    varchar c_exp_dt[LEN_DATE];
    long    l_count ;
    double  d_prft_loss;
    double  d_avl_mrgn;
    double  d_addnl_mrgn_needed;
    double  d_adhoc_mrgn_needed; 

    /** Current contract level positions of other contracts in the same  **/
    /** underlying                                                       **/
    struct vw_cntfut_pos st_cntpos_crrnt;
    /** Copy of contract level position on which action is to be done taken **/
    /** before applying the action                                          **/
    struct vw_cntfut_pos st_cntpos_old;
    /** Contract level position on which action is to be done **/
    struct vw_cntfut_pos st_cntpos_md_rc;
  EXEC SQL END DECLARE SECTION;

  strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
  strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
  sql_prd_typ = ptr_st_pstn_actn->c_prd_typ;
  sql_cntrct_tag = ptr_st_pstn_actn->c_cntrct_tag;

  /** This bit of code down below will fetch all the contract level **/
  /** positions. Then it will find the contract on which the input  **/
  /** action is to be performed and then perform it. It then summs  **/
  /** up all the contract level postion to arrive at a consolidated **/
  /** underlying level position. It then recalculates the margin.   **/
  /** This bit of code need not be performed for actions which do   **/
  /** not involve a change in postion                               **/

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog ( c_ServiceName, "Building new underlying position -IMTM" );
  }

  /** Prepare a list of contracts from contract position table **/
  EXEC SQL ALLOCATE :sys_cursor;

    EXEC SQL EXECUTE
      BEGIN
         OPEN :sys_cursor FOR
          SELECT  FFP_CLM_MTCH_ACCNT,
                  FFP_XCHNG_CD,
                  FFP_PRDCT_TYP,
                  FFP_INDSTK,
                  FFP_UNDRLYNG,
                  TO_CHAR (FFP_EXPRY_DT,'DD-Mon-YYYY'),
                  FFP_EXER_TYP,
                  FFP_CNTRCT_TAG,
                  FFP_IBUY_QTY,
                  FFP_IBUY_ORD_VAL,
                  FFP_ISELL_QTY,
                  FFP_ISELL_ORD_VAL,
                  FFP_EXBUY_QTY,
                  FFP_EXBUY_ORD_VAL,
                  FFP_EXSELL_QTY,
                  FFP_EXSELL_ORD_VAL,
                  FFP_BUY_EXCTD_QTY,
                  FFP_SELL_EXCTD_QTY,
                  FFP_OPNPSTN_FLW,
                  FFP_OPNPSTN_QTY,
                  FFP_OPNPSTN_VAL,
                  FFP_MTM_OPN_VAL,
                  FFP_IMTM_OPN_VAL
          FROM    FFP_FO_FUTURES_PSTN
          WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
          AND     FFP_XCHNG_CD       = :sql_xchng_cd
          AND     FFP_PRDCT_TYP      = :sql_prd_typ
          AND     FFP_UNDRLYNG       = :sql_undrlyng
          AND     FFP_CNTRCT_TAG     = :sql_cntrct_tag
          AND     ( FFP_OPNPSTN_QTY   != 0
                  OR (FFP_IBUY_QTY + abs(FFP_ISELL_QTY) ) > 0 )
          ORDER BY FFP_EXPRY_DT asc;
        END;
      END-EXEC;

  if ( SQLCODE != 0 )
  {
    EXEC SQL FREE :sys_cursor;
    fn_errlog ( c_ServiceName, "S31310", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
    }

  c_pos_avl = 'N';

  /** Fetch one contract at a time from the list. If the fetched  **/
  /** contract is the one we need to apply the change apply it.   **/
  /** Else simply add the contract to  underlying level position  **/
   while ( 1 )
  {
      EXEC SQL  FETCH   :sys_cursor
                INTO    :st_cntpos_crrnt.c_cln_mtch_accnt,
                        :st_cntpos_crrnt.c_xchng_cd,
                        :st_cntpos_crrnt.c_prd_typ,
                        :st_cntpos_crrnt.c_ctgry_indstk,
                        :st_cntpos_crrnt.c_undrlyng,
                        :c_exp_dt,
                        :st_cntpos_crrnt.c_exrc_typ,
                        :st_cntpos_crrnt.c_cntrct_tag,
                        :st_cntpos_crrnt.l_ibuy_qty,
                        :st_cntpos_crrnt.d_ibuy_ord_vl,
                        :st_cntpos_crrnt.l_isell_qty,
                        :st_cntpos_crrnt.d_isell_ord_vl,
                        :st_cntpos_crrnt.l_exbuy_qty,
                        :st_cntpos_crrnt.d_exbuy_ord_vl,
                        :st_cntpos_crrnt.l_exsell_qty,
                        :st_cntpos_crrnt.d_exsell_ord_vl,
                        :st_cntpos_crrnt.l_buy_exctd_qty,
                        :st_cntpos_crrnt.l_sell_exctd_qty,
                        :st_cntpos_crrnt.c_opnpstn_flw,
                        :st_cntpos_crrnt.l_opnpstn_qty,
                        :st_cntpos_crrnt.d_org_opn_val,
                        :st_cntpos_crrnt.d_mtm_opn_val,
                        :st_cntpos_crrnt.d_imtm_opn_val;

      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31315", SQLMSG,
                                          ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
      SETNULL( c_exp_dt );
      strcpy ( st_cntpos_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
      rtrim(st_cntpos_crrnt.c_xchng_cd);
      rtrim(st_cntpos_crrnt.c_undrlyng);
      rtrim(st_cntpos_crrnt.c_expry_dt);

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog ( c_ServiceName, "Contract fetched -IMTM : " );
    fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_exp_dt.arr );
    fn_userlog ( c_ServiceName, "Exercise Type     :%c:", st_cntpos_crrnt.c_exrc_typ );
    fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntpos_crrnt.l_ibuy_qty );
    fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntpos_crrnt.d_ibuy_ord_vl );
    fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntpos_crrnt.l_isell_qty );
    fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntpos_crrnt.d_isell_ord_vl );
    fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntpos_crrnt.l_exbuy_qty );
    fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntpos_crrnt.d_exbuy_ord_vl );
    fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntpos_crrnt.l_exsell_qty );
    fn_userlog ( c_ServiceName, "EXCH sell val      :%lf:", st_cntpos_crrnt.d_exsell_ord_vl );
    fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntpos_crrnt.l_buy_exctd_qty );
    fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntpos_crrnt.l_sell_exctd_qty );
    fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntpos_crrnt.l_opnpstn_qty );
    fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntpos_crrnt.d_org_opn_val );
    fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntpos_crrnt.d_mtm_opn_val );
    fn_userlog ( c_ServiceName, "IMTMed open val   :%lf:", st_cntpos_crrnt.d_imtm_opn_val );
  }

    strcpy(c_expry_dt_MTM,(char *)c_exp_dt.arr);
    i_returncode =  fn_apply_cnt_actn_fpl ( c_ServiceName,
                                        ptr_st_pstn_actn,
                                        &st_cntpos_crrnt,
                                        ptr_st_err_msg );
    if ( i_returncode == -1 )
    {
      return FAILURE;
    }

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog ( c_ServiceName, "Intraday MTMed open val    :%lf:", st_cntpos_crrnt.d_imtm_opn_val );
  }
  
  memcpy ( &st_cntpos_md_rc,
             &st_cntpos_crrnt,
             sizeof( st_cntpos_md_rc ) );

    fn_sum_cpos ( st_cntpos_crrnt,
                  ptr_st_undfut_pos_to_be );

    EXEC SQL
      UPDATE  FFP_FO_FUTURES_PSTN
      SET     FFP_IMTM_OPN_VAL   = :st_cntpos_md_rc.d_imtm_opn_val
      WHERE   FFP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
      AND     FFP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
      AND     FFP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
      AND     FFP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
      AND     FFP_EXPRY_DT       = to_date(:st_cntpos_md_rc.c_expry_dt,
                                      'DD-Mon-YYYY')
      AND     FFP_EXER_TYP       = :st_cntpos_md_rc.c_exrc_typ
      AND     FFP_CNTRCT_TAG     = :ptr_st_pstn_actn->c_cntrct_tag;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31320", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }
  }

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;
  
  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog ( c_ServiceName, "Calculating margin - IMTM" );
  }
  /** Calculate the margin on the new underlying position **/
  i_returncode = fn_upd_mrgn_fpl ( c_ServiceName,
                               ptr_st_pstn_actn,
                               ptr_st_undfut_pos_crrnt,
                               ptr_st_undfut_pos_to_be,
                               ptr_st_err_msg );

  if ( i_returncode == -1 )
  {
    return FAILURE;
  }

return 0;
}
/******* Ver 3.9 Ends Here **********/

   
