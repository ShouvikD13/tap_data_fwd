/******************************************************************************/
/*  Program           : SFO_FNO_PSTN	                                        */
/*                                                                            */
/*  Input             : FFO_USR_ID                                            */
/*                                                                            */
/*  Output            : 									                                    */
/*                                                                            */
/*  Description       :             																					*/
/*                                                                            */
/*  Log               : 1.0     15-Sep-2014    Vishnu Nair/ Bhushan Sonwane   */
/*  Log               : 1.1     10-Sep-2015    Ritesh Deolekar								*/
/*	Log								:	1.2			15-Jun-2016		 Swapnil More										*/
/*  Log               : 1.3     25-Aug-2016    Anand Dhopte                   */
/*  Log               : 1.4     29-Aug-2016    Vishal Borhade                 */
/*  Log               : 1.5     29-Aug-2016    Swapnil More                   */
/*  Log               : 1.6     29-Aug-2016    Swapnil More                   */
/*  Log               : 1.7     19-Dec-2016    Anand Dhopte                   */
/*  Log               : 1.8     23-Oct-2017    Anand Dhopte                   */
/*  Log               : 1.9     25-Oct-2017    Anand Dhopte                   */
/*	Log								: 2.0			12-Apr-2018		 Bhushan Harekar								*/
/*	Log								: 2.1			16-Aug-2018		 Bhushan Harekar								*/
/*  Log               : 2.2     28-Aug-2018    Akash Balasubramanian          */
/*  Log               : 2.3     31-May-2019    Mrinal Kishore                 */
/*  Log               : 2.4     24-Jul-2019    Anuj Pancholi                  */
/*  Log               : 2.5     27-Sep-2019    Akash B                        */
/*  Log               : 2.6     17-Jan-2020    Sandip T                       */
/*  Log               : 2.7     01-Feb-2020    Mrinal Kishore                 */
/*  Log               : 2.9     10-Sep-2020    Suchita Dabir                  */
/*  Log               : 3.0     25-Aug-2020    Mrinal Kishore                 */
/*  Log               : 3.1     21-Jan-2021    Anand Dhopte                   */  
/*  Log               : 3.2     15-Mar-2021    Anuj Pancholi                  */
/*  Log               : 3.4     14-Jul-2021    Anand Dhopte                   */ 
/*  Log               : 3.5     29-Jul-2021    Abhinav Kumbhar                */ 
/*  Log               : 3.6     07-Oct-2021    Tanmay Patel                   */
/*  Log               : 3.7     15-Nov-2021    Anand Dhopte                   */
/*  Log               : 3.8     25-Feb-2022    Sachin Birje                   */
/*  Log               : 3.9     01-Jul-2022    Naveena R.                     */
/*  Log               : 4.0     30-May-2022    Naveena R.                     */
/*  Log               : 4.1     17-May-2023    Roshni Pawar                   */      
/*  Log               : 4.2     19-Jun-2023    Kunwar Prashant                */ 
/******************************************************************************/
/*  1.0  -  New release                                                       */
/*	1.1  -  Contract Master and Trade Quote Table Merger Changes							*/
/*	1.2	 -	CR-ISEC14-79794 Spot Price Display on Options & Option Plus 			*/
/*					Open Position screen																							*/
/*  1.3  -  Limit Order Type in FuturePLUS SLTP and OptionPLUS product        */
/*	1.4  -  Introduce the Square Off at Market flag to display on HTML5       */
/*  1.5  -  Introduced "Sqaure Off All Positions At Market" flag for HTML5    */
/*  1.6  -  Introduced "Cancel All" flag for HTML5                            */
/*  1.7  -  Changes for displaying product type ALL on Open Position          */ 
/*  1.8  -  Hard Coded Values in SQL Queries replaced with Bind Variables to  */
/*          reduce Hard Parsing of Queries.                                   */ 
/*  1.9  -  Quick Exit(My EOS) changes                                        */
/*	2.0	 -	Core Fixed.																												*/
/*	2.1  -  Physical Settlement of stock derivatives													*/
/*  2.2  -  Bullet timing on open position page                               */
/*  2.3  -  Rollover with spread changes                                      */
/*  2.4  -  Block delivery margin on ITM long Call & Put options from         */
/*          Expry-4 days till  Expiry                                         */
/*  2.5  -  Revised Delivery Margin Changes                                   */
/*  2.6  -  Option 20 bullet display  changes                                 */
/*  2.7  -  Rollover with spread Bug Fix                                      */
/*  2.9  -  Trigger Price changes ( Suchita )                                 */
/*  3.0  -  BO LODM New Master Change                                         */
/*  3.1  -  Whatsapp CR changes - handling for product type O for Span User   */
/*  3.2  -  CR-ISEC10-138149 Advance Pay-off Analyser changes                 */
/*  3.4  -  Hard Parsing Fix Changes                                          */
/*  3.5  -  Delivery and non-Delivery option CR_ISEC04_132410                 */
/*  3.6  -  Optimization(Delivery and non-Delivery option CR_ISEC04_132410)   */
/*  3.7  -  Minor Change CR -Live bug fix for Allocation of Buffer size issue */
/*  3.8  -  Minor Change Physical Delivery Mother app Changes                 */
/*  3.9  -  Payoff analyzer default underlying fetch fix                      */
/*  4.0  -  Avg price over API                                                */ 
/*  4.1  -  Debug level change                                                */
/*  4.2  -  Minor Change - Live bug fix for Allocation of Buffer size issue   */
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>     /***  Ver 1.7 ***/
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fn_val_ord.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>
#include <fn_pos.h>
#include <fn_span_lib.h>

#define ADVANCE_PAYOFF_ANALYSR 'A'  /** ver 3.2 **/

void print_qry(char * str, int i_cnt,char * c_ServiceName);

int fn_get_mm_and_smm(char *,char *,char *,char ,double *,double *,char,char *);

double fn_cal_min_mrgn( char *, char *, char *, char, char *, char, char, char, long, double,long);

int fn_cal_mtm_loss(char *,char *,char *,char ,char *,char ,char ,char,double * );


void SFO_FNO_PSTN( TPSVCINFO *rqst )
{
  
	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

	char c_opr_typ 						= '\0';
	char c_conv_flg 					= '\0';
	char c_mtm_flg						= '\0';
	char c_cntrct_tag					= '\0';
	char c_prd_type						= '\0';
	char c_rqst_typ 					= '\0';
	char c_spn_flg 						= '\0';
	char c_bse_spn_flg 				= '\0';
	char c_prd_typ 						= '\0';
	char c_ctgry_indstk				= '\0';
	char c_exrc_typ 					= '\0';
	char c_opt_typ 						= '\0';
	char c_opnpstn_flw 				= '\0';
	char c_frsh_ordr_stts			= '\0';
	char c_cvr_ordr_stts 			= '\0';
	char c_jointsqroff_flg		= '\0';
	char c_addmrgn_flg				= '\0';
	char c_sqroff_flg					= '\0';
	char c_prev_opnpstn_flw		= '\0';
	char c_uprdct_typ 				= '\0';
	char c_uindstk 						= '\0';
	char c_uopnpstn_flw				= '\0';
	char c_prev_tag						= '\0';
	char c_prev_cntrct_tag		= '\0';
	char c_prev_ctgry_indstk	= '\0';
	char c_prev_prdct_typ			= '\0';
	char c_rollover_flag			= '\0';
	char c_trg_prc_stts				= '\0';
	char c_spl_flg						= '\0';
	char c_fxb_rqst_typ				= '\0';
	char c_fxb_plcd_stts			= '\0';
	char c_mtm_flag						=	'\0';
	char c_prev_exrc_typ 			= '\0';
	char c_mod_can_flg				= '\0';
	char c_grp_opn_flw 				= '\0';
	char c_cvr_ordr_flw 			= '\0';
	char c_null 							= '\0';
	char c_setlmnt_flg				= '\0';		/*** Ver 2.1 ***/
  
  char c_ServiceName[33] 			= "\0";
  char c_err_msg[259] 				= "\0";
	char c_xchng_cd[4] 					= "\0"; 
	char c_undrlyng[7] 					= "\0";
	char c_prev_undrlyng[7] 		= "\0";
	char c_tmp_undrlying[7] 		= "\0";
	char c_mtch_accnt_no[11] 		= "\0";
	char c_expry_dt[20] 				= "\0";
	char c_prev_expry_dt[20] 		= "\0";
	char c_ordr_rfrnc[20] 			= "\0";
	char c_sltp_ordr_rfrnc[20] 	= "\0";
  char c_prd_typ_u          	= '\0';
  char c_ctgry_indstk_u     	= '\0';
  char c_undrlyng_u[7]      	= "\0";
  char c_expry_dt_u[20]     	= "\0";
  char c_exrc_typ_u         	= '\0';
  char c_opt_typ_u          	= '\0';
  char c_opnpstn_flw_u      	= '\0';
  char c_cvr_slm_flg          = '\0';                   /*** Ver 1.3 ***/
  char c_call_mod_serv_flag   = '\0';                   /*** Ver 1.3 ***/
  char c_sltp_sqoff_at_mkt_flag  = '\0';                /*** Ver 1.3 ***/
  char c_frsh_slm_flg            = '\0';                /*** Ver 1.3 ***/
  char c_sqroffmkt_flg           = 'N' ;                /*** Ver 1.4 ***/
  char c_sqr_off_all_at_mkt      = 'N' ;                /*** Ver 1.5 ***/
  char c_cancel_all_flag         = 'N' ;                /*** Ver 1.6 ***/
  char c_cntrct_lvl_cancel_flg   = 'N' ;                /*** Ver 1.6 ***/
  char c_plc_cvr_ordr_flg        = 'N' ;                /*** Ver 1.7 ***/
  char c_cvr_fc_flg              = '\0';                /*** Ver 1.7 ***/
  char c_ord_val_dt[12]          = "\0";                /*** Ver 1.7 ***/

	/*** Ver 2.3 Starts ***/
	char c_sprd_roll_flag 				 = '\0';
	char c_prd_typ1 							 = '\0';
	char c_rsprd_pos_flg = 'N';
	char c_r_opnpstn_flw = '\0';
	char c_r_cntrct_tag  = '\0';
	char c_r_expry_dt[20]  = "\0";
	double d_sroll_diff_amt = 0.0;
	double d_rordr_mrgn = 0.0;   
	double d_lwr_rng = 0.0;		/*** Ver 3.2 ***/
	double d_hghr_rng = 0.0; 	/*** Ver 3.2 ***/
	double d_trd_val=0.0;			/*** Ver 3.2 ***/
	double d_undrlyn_spot_prc = 0.0; /*** Ver 3.2 ***/
  double d_voltlty_prcnt = 0.0; /*** Ver 3.2 ***/
	long l_fod_qty=0;   
	long l_buy_qty=0;
	long l_sell_qty=0;
	long l_r_ltp = 0;
	/*** Ver 2.3 ends ***/

	/*** Ver 2.7 Starts ***/
	long int li_r_so_qty					=	0;
	long int li_r_bo_qty					=	0;
	/*** Ver 2.7 ends ***/
  char c_tmp_undlyn[7];                                 /*** Ver 2.4 ***/
  char c_tmp_prdct_typ = '\0';                          /*** Ver 2.4 ***/ 
  char c_errmsg[256] = "\0";                            /*** Ver 3.5 ***/
  char c_indx_indctr = '\0';                            /*** Ver 3.5 ***/
  char c_all_flg = 'N';                                 /*** Ver 3.5 ***/
  char c_flm_expr_dt[12] = "\0";                        /*** Ver 3.5 ***/
  char c_dlvry_enbl_flg = '\0';                         /*** Ver 3.5 ***/
  char c_dlvry_sttlmnt_typ = '\0';                      /*** Ver 3.5 ***/
  char c_dlvry_mode_flg = '\0';                         /*** Ver 3.5 ***/
  char c_settlement_indicator = '\0';                   /*** Ver 3.5 ***/
  long l_dlvry_oblgamt_blckd = 0;                       /*** Ver 3.5 ***/
  long l_dlvry_qty_blckd = 0;                           /*** Ver 3.5 ***/
	
  /*** Added in Ver 1.8 ***/
  
  char c_fut_prd_typ[2]   = "F";
  char c_fp_prd_typ[2]    = "P"; 
  char c_fpsl_prd_typ[2]  = "U";
  char c_oplus_prd_typ[2] = "I";
  char c_exer_typ[2]      = "E";
  char c_fresh_flg[2]     = "F";
  char c_fut_opt_typ      = '*';
  char c_opt_prd_typ      = 'O';
  long l_fut_strk_prc     = 0;
 
  /*** Ver 1.8 Ends ***/
  char c_bullet_schm_flg = '\0';                        /*** Ver 2.2 ***/

  char c_ltq_dt [12];            /*** Ver 2.4  ***/
  char c_update_dt [12];         /*** Ver 2.4  ***/
  char c_trade_dt[12] = "\0";    /*** Ver 3.0  ***/
  char c_call_ind = 'N';       /*** ver 3.2  N - Call from Normal open Position page ***/

	int i_sqroffmkt_flg_cnt = 0;                          /*** ver 1.5 ***/
	int i_pstn_count			=	0;
	int i_non_Obuy_count	= 0;
	int i_mtm_loss_stts 	= 0;
	int i_tag_cnt 				= 0;
	int i_prev_tag_cnt		=	0;
	int i_returncode 			= 0;
	int i_cnt							=	0;
	int i_grp_cnt 				= 0;
	int i_err[10];
	int i_ferr[10];
  int i_crnt_mnth_flg = 0;                               /** Ver 2.4 **/

	long int li_bo_rt						= 0;
	long int li_so_rt						= 0;
	long int li_stp_lss_tgr_prc	=	0;
  /* NOTE: li_stp_lss_tgr_prc variable is used for displaying Trigger Price for product type Future, FuturePLUS and Options 
           and Cover SLTP Price for product type FuturePLUS SLTP and OptionPLUS */
	long int li_so_qty					=	0;
	long int li_bo_qty					=	0;
	/*** long int li_tot_exec_qty 		= 0; Commented in Ver 1.9 as variable use is commented ***/

	long l_merge_counter   			= 0;
	long l_qty									=	0;
	long l_cmp									= 0;
	long l_prev_strike_prc 			= 0;
	long l_strike_prc 					= 0;
	long l_cvr_qty 							= 0;
	long l_ibuy_qty 						= 0;
	long l_isell_qty 						= 0;
	long l_mdfctn_cntr 					=	0;
	long l_uopnpstn_qty 				= 0;
	long l_prev_opnpstn_qty			= 0;
	long l_und_buy_opn_qty 			= 0;
	long l_und_sell_opn_qty 		= 0;
	long l_sprd_qty 						= 0;
	long l_lst_trdd_prc 				= 0;
	long l_lot_size 						= 0;
	long l_spot_prc 						= 0;
	long l_opnpstn_qty 					= 0;
	long l_prev_ibuy_qty		 		= 0;
	long l_prev_isell_qty 			= 0;
	long l_grp_opn_qty  				= 0;
	long l_null 								= 0;
	long l_lmt_rt 							= 0;
	long l_mtm_trg_prc					=	0;
	long l_prev_cvr_qty					=	0;
	long l_base_prc							= 0;
  long l_strike_prc_u       	= 0;
  long l_opnpstn_qty_u     		= 0;
  long l_lst_trdd_prc_u     	= 0;
  long l_base_prc_u         	= 0;
  long l_frsh_exctd_qty       = 0;   /*** Ver 1.3 ***/
  long l_frsh_unexctd_qty     = 0;   /*** Ver 1.3 ***/ 
  long l_cvr_unexctd_qty      = 0;   /*** Ver 1.3 ***/
  long l_tot_ord_qty          = 0;   /*** Ver 1.3 ***/ 
  long l_exrc_qty             = 0;   /*** Ver 1.7 ***/
 
  long l_spot_prc_tmp = 0;           /*** Ver 2.4 ***/
  long l_cls_prc = 0;                /*** Ver 2.4 ***/

	double d_base_prc           = 0.0;
	double d_prmum 							= 0.0;
	double d_profit_loss				=	0.0;
	double d_tot_profit_loss		=	0.0;
	double d_und_avail_mrgn			=	0.0;
	double d_clsng_prc 					= 0.0;
	double d_prev_price					= 0.0;
	double d_price 							= 0.0;
	double d_t2t_prc 						= 0.0; /*** 4.0 ***/
	double d_ord_mrgn 					= 0.0;
	double d_utrd_mrgn					= 0.0;	
	double d_sprd_mrgn					= 0.0;	
	double d_umin_trd_mrgn 			= 0.0;
	double d_prev_mtm_opn_val 	= 0.0;
	double d_curr_cnt_opn_val		= 0.0;
	double d_curr_uopn_val			= 0.0;
	double d_mtm_loss 					= 0.0;
	double d_avilable_amount		= 0.0;
	/*** double d_frsh_exe_val 			= 0.0; Commented in Ver 1.9 as variable use is commented ***/
	double d_wgt_avrg_price			= 0.0;
	double d_ordr_mrgn					= 0.0;
	double d_unlz_pl						= 0.0;
	double d_mtm_opn_val				= 0.0;
	double d_mrkt_wd_pstn 			= 0.0;
	double d_grp_ord_mrgn 			= 0.0;
  double d_grp_trd_mrgn				= 0.0;	
	double d_grp_pl 						=	0.0;
	double d_null 							= 0.0;
  double d_mtm_opn_val_u 			= 0.0;
	double d_clsng_prc_u 				= 0.0;
  double d_dlvry_mrgn_blk     = 0.0;  /** Ver 2.4 **/
  double d_dlvry_mrgn_req     = 0.0;  /** Ver 2.4 **/
  double d_var_mrgn           = 0.0;  /** Ver 2.4 **/
  double d_elm_mrgn           = 0.0;  /** Ver 2.4 **/
  double d_cntrct_val         = 0.0;  /** Ver 2.4 **/
  double d_mrggn_value        = 0.0;  /** Ver 2.4 **/ 
  double d_new_dlvry_mrgn           = 0.0;  /** Ver 2.4 **/
  double d_ISec_buff_mrgn_prcnt     = 0.0; /** Ver 2.4 **/
  double d_dlvry_min_mrgn_prcnt     = 0.0; /** Ver 2.4 **/
  double d_current_dlvry_mrgn_prcnt = 0.0; /** Ver 2.4 **/
   
  /*** Added in Ver 1.9 ***/

  double d_frs_exe_qty = 0.0;
  double d_cvr_exe_qty = 0.0;
  double d_frs_exe_val = 0.0;
  double d_cvr_exe_val = 0.0;

  /*** Ver 1.9 Ends ***/

  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_usr_prfl st_usr_prfl;
    varchar stmnt[5900];  /*** changed to 5900 from 4900 in Ver 1.3 ***/
    varchar c_bullet_param[5]; /*** Ver 2.2 ***/
    varchar c_bullet_frm_time[10]; /*** Ver 2.2 ***/
    varchar c_bullet_end_time[10]; /*** Ver 2.2 ***/
    
		sql_cursor cur_spn_pstn;
    sql_cursor  sys_cursor;    /*** Ver 3.4 ***/
  EXEC SQL END DECLARE SECTION;

  struct vw_err_msg st_err_msg;

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy(c_ServiceName, rqst->name);
  INITDBGLVL(c_ServiceName);


  MEMSET(st_usr_prfl);
	MEMSET(c_xchng_cd);
	MEMSET(c_undrlyng);
	MEMSET(c_prev_undrlyng);
	MEMSET(c_mtch_accnt_no);
	MEMSET(c_expry_dt);
	MEMSET(c_prev_expry_dt);
	MEMSET(c_ordr_rfrnc);
	MEMSET(c_sltp_ordr_rfrnc);
	MEMSET(c_tmp_undrlying);                                                                                                                        
	MEMSET(c_undrlyng_u);                                                                                                                                        
	MEMSET(c_expry_dt_u);
  MEMSET(c_bullet_param); /*** Ver 2.2 ***/
  MEMSET(c_bullet_frm_time); /*** Ver 2.2 ***/
  MEMSET(c_bullet_end_time); /*** Ver 2.2 ***/

  /*** Ver 1.8 Starts ***/
 
  c_fut_prd_typ[1]   = '\0';  
  c_fp_prd_typ[1]    = '\0';
  c_fpsl_prd_typ[1]  = '\0';
  c_oplus_prd_typ[1] = '\0'; 
  c_exer_typ[1]      = '\0';
  c_fresh_flg[1]     = '\0';

  /*** Ver 1.8 Ends ***/

  char c_adv_payoff_anlyzr = 'A';   /*** Ver 3.4 ***/


  i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_usr_prfl,
                           "vw_usr_prfl" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if( DEBUG_MSG_LVL_3 )	
	{
		fn_userlog( c_ServiceName, "User id       :%s:", st_usr_prfl.c_user_id );
  	fn_userlog( c_ServiceName, "Session id    :%ld:", st_usr_prfl.l_session_id );
  	fn_userlog( c_ServiceName, "Match Account :%s:", st_usr_prfl.c_cln_mtch_accnt );
  	fn_userlog( c_ServiceName, "Pipe id :%s:", st_usr_prfl.c_rout_crt );  /*** changed from c_pipe_id to c_rout_crt in Ver 1.7 ***/
	}

	strcpy(c_mtch_accnt_no,st_usr_prfl.c_cln_mtch_accnt); 

  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*150 ); /* Multiplier changed from 135 to 150 in Ver 4.2 */  /* Multiplier changed from 100 to 135 in Ver 3.7 */

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31010", TPMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /**** session check *****/

  if (st_usr_prfl.l_session_id !=0)
  {
    i_returncode = fn_chk_sssn( c_ServiceName,
                                &st_usr_prfl,
                                &st_err_msg ) ;

    if ( i_returncode == -1 )
    {
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
			tpfree ( ( char * ) ptr_fml_Obuf );		/*** Ver 2.0 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

 	i_err[0] = Fget32( ptr_fml_Ibuf, FFO_OPERATION_TYP, 0, (char *)&c_opr_typ, 0 );
  i_ferr [0] = Ferror32;

	i_err[1] = Fget32( ptr_fml_Ibuf, FFO_XCHNG_CD, 0, (char *)c_xchng_cd, 0 );
  i_ferr [1] = Ferror32;

  i_err[2] = Fget32( ptr_fml_Ibuf, FFO_UNDRLYNG, 0, (char *)c_undrlyng, 0 );
  i_ferr [2] = Ferror32;
	
	i_err[3] = Fget32( ptr_fml_Ibuf, FFO_PRDCT_TYP, 0, (char *)&c_prd_type, 0);
  i_ferr[3] = Ferror32;
	
	for ( i_cnt = 0;  i_cnt <=3; i_cnt++ )
  {

		if ( (i_err[i_cnt] == -1) )
		{
			fn_errlog( c_ServiceName, "S31015", Fstrerror32( i_ferr[i_cnt] ), c_err_msg  ); 
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpfree ( ( char * ) ptr_fml_Obuf );  /*** Ver 2.0 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}

  /*** ver 3.2 starts ***/
  
  i_err[4] = Fget32( ptr_fml_Ibuf, FFO_REQ_TYP, 0, (char *)&c_call_ind, 0);
  i_ferr[4] = Ferror32;
  
  if ( (i_err[4] == -1) && (i_ferr[4] != FNOTPRES ) )
  {
   fn_errlog( c_ServiceName, "S31020", Fstrerror32( i_ferr[i_cnt] ), c_err_msg  );
   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   tpfree ( ( char * ) ptr_fml_Obuf );  /*** Ver 2.0 ***/
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );  
  }
  else if ((i_err[4] == -1) && (i_ferr[4] == FNOTPRES ))
  {
    c_call_ind = 'N';  /** call from Normal Open Position page **/  
    fn_userlog(c_ServiceName, "Call From Normal Open Position Page :%c:",c_call_ind);
  }
   
  if( DEBUG_MSG_LVL_3 )   /** debug level added in ver 4.1 **/
  {
    fn_userlog(c_ServiceName, "Value of c_call_ind Flag is :%c: c_undrlyng:%s:",c_call_ind,c_undrlyng); /*** Ver 3.9 ***/
  }

  /*** ver 3.2 ends ***/

	/*** Ver 3.2 starts ***/
	rtrim(c_undrlyng);
	rtrim(c_xchng_cd);

	if (c_call_ind == ADVANCE_PAYOFF_ANALYSR )
	{
		if (strcmp(c_undrlyng,"%") == 0)
		{
				EXEC SQL
								select  A.tradevalue ,A.undrlyng
        into    :d_trd_val,
                :c_undrlyng
				FROM
				(
				select sum(tradevalue) tradevalue , undrlyng
				FROM
				(
				select  
					sum(FOD_STRK_PRC *  (( FOD_ORDR_TOT_QTY - (FOD_EXEC_QTY - FOD_CNCL_QTY - FOD_EXPRD_QTY) ) + FOD_EXEC_QTY )) tradevalue ,
					FOD_UNDRLYNG undrlyng
        from    FOD_FO_ORDR_DTLS
        where   FOD_ORDR_STTS in ('O','Q','P','E','D','B')
        and     FOD_PRDCT_TYP = 'I'
				and     FOD_FC_FLAG = 'F'
				and     FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
        group by FOD_UNDRLYNG
				UNION ALL
				select  sum(FCP_STRK_PRC* (abs(FCP_OPNPSTN_QTY) + FCP_IBUY_QTY + abs(FCP_ISELL_QTY)) ) tradevalue,
				FCP_UNDRLYNG undrlyng
				FROM  FCP_FO_SPN_CNTRCT_PSTN
				WHERE FCP_PRDCT_TYP= 'O'
				AND   FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
				group by FCP_UNDRLYNG
				UNION ALL
				select  sum(FOP_STRK_PRC* (abs(FOP_OPNPSTN_QTY) + FOP_IBUY_QTY + abs(FOP_ISELL_QTY)) ) tradevalue,
				FOP_UNDRLYNG undrlyng
				FROM  fop_fo_options_pstn
				WHERE FOP_PRDCT_TYP= 'O'
				AND   FOP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
				group by FOP_UNDRLYNG
				)
				group by undrlyng
        order by 1 desc 
				) A
				WHERE ROWNUM = 1;

      if( SQLCODE != 0 && ( SQLCODE != NO_DATA_FOUND ))
      {
        fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg  );
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		}
	
     EXEC SQL
       select  MIN(ftq_strk_prc),
               MAX(ftq_strk_prc)
       into    :d_lwr_rng,
               :d_hghr_rng
       from    ftq_fo_trd_qt
       where   ftq_undrlyng=:c_undrlyng
       and     ftq_xchng_cd=:c_xchng_cd
       and     ftq_expry_dt=( SELECT min(FTQ_EXPRY_DT) 
															FROM (   SELECT DISTINCT(FTQ_EXPRY_DT)
                                       FROM   FTQ_FO_TRD_QT
                                       WHERE  FTQ_XCHNG_CD =:c_xchng_cd
                                       AND    FTQ_PRDCT_TYP ='F'
                                       AND    FTQ_UNDRLYNG  ='NIFTY'
                                       AND    FTQ_QT_TRDNG_FLG='T'
                                       ORDER BY FTQ_EXPRY_DT
                                    )
                             )
       and     ftq_prdct_typ='O';

       if( DEBUG_MSG_LVL_3 )   /** debug level added in ver 4.1 **/
       {
         fn_userlog( c_ServiceName,"d_lwr_rng :%lf:",d_lwr_rng);
         fn_userlog( c_ServiceName,"d_hghr_rng :%lf:",d_hghr_rng);
       }
 
       if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND  && SQLCODE != -1405 )
       {
         fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg  );
         tpfree ( ( char * ) ptr_fml_Obuf );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }

       EXEC SQL
         SELECT NVL(ltq_rt,0) * 100
         into :d_undrlyn_spot_prc
         FROM ltq_trd_qt
         WHERE LTQ_STCK_CD = :c_undrlyng
         AND LTQ_XCHNG_CD = DECODE(:c_xchng_cd,'NFO','NSE','BFO','BSE');

       if( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
       {
         fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
         tpfree ( ( char * ) ptr_fml_Obuf );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }


			 EXEC SQL
			 	 SELECT sum(NVL(FTQ_CLS_IV,0))/2 
				 INTO :d_voltlty_prcnt
	 			 FROM		FTQ_FO_TRD_QT 
	       WHERE  FTQ_UNDRLYNG= :c_undrlyng 
	       AND    FTQ_XCHNG_CD= :c_xchng_cd
	       AND    FTQ_EXPRY_DT=
												(   SELECT MIN(FTQ_EXPRY_DT) FROM FTQ_FO_TRD_QT
														WHERE  FTQ_XCHNG_CD =:c_xchng_cd
														AND    FTQ_PRDCT_TYP = 'F'
														AND    FTQ_UNDRLYNG  = 'NIFTY'
														AND    FTQ_QT_TRDNG_FLG= 'T'
												)
				 AND    FTQ_OPT_TYP in ('C','P')  
   			 AND    FTQ_STRK_PRC=
															( SELECT FTQ_STRK_PRC
															 FROM
															 ( 
																	SELECT DISTINCT FTQ_STRK_PRC,ABS(FTQ_STRK_PRC - :d_undrlyn_spot_prc) DIFF FROM FTQ_FO_TRD_QT
																	WHERE FTQ_XCHNG_CD= :c_xchng_cd
																	AND FTQ_UNDRLYNG= :c_undrlyng
																	AND FTQ_EXPRY_DT= 
																									(   SELECT MIN(FTQ_EXPRY_DT) FROM FTQ_FO_TRD_QT
																											WHERE  FTQ_XCHNG_CD =:c_xchng_cd
																											AND    FTQ_PRDCT_TYP = 'F'
																											AND    FTQ_UNDRLYNG  = 'NIFTY'
																											AND    FTQ_QT_TRDNG_FLG= 'T'
																									)
																	AND FTQ_PRDCT_TYP='O'
																	AND DECODE(FTQ_INDSTK,'I',MOD(FTQ_STRK_PRC,10000),MOD(FTQ_STRK_PRC,1000) ) =0
																	ORDER BY DIFF
												 				)
															  WHERE ROWNUM < 2 
											 			);
       
			 if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND && SQLCODE != -1405 )
       {
         fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg  );
         tpfree ( ( char * ) ptr_fml_Obuf );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }

			 i_returncode = fn_pack_vartofml ( c_ServiceName,
																	c_err_msg,
																	&ptr_fml_Obuf,
																	4, 
																	FFO_TOT_BID_QTY,(char *)&d_lwr_rng,
																	FFO_TOT_OFFR_QTY,(char *)&d_hghr_rng,
																	FFO_ORD_AMT_BLKD,(char *)&d_voltlty_prcnt,
																  FFO_BASE_ORD_VAL,(char *)&d_undrlyn_spot_prc	
																);
		  if ( i_returncode == -1 )	
			{
				 fn_errlog( c_ServiceName, "S31045", SQLMSG, c_err_msg  );
         tpfree ( ( char * ) ptr_fml_Obuf );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
	}
	/*** Ver 3.2 ends ***/
	
	EXEC SQL
    SELECT  NVL(CLM_SPAN_ALLWD,'N'),
            NVL(CLM_BSESPAN_ALLWD,'N') 
    INTO    :c_spn_flg,
            :c_bse_spn_flg            
    FROM    CLM_CLNT_MSTR
    WHERE   CLM_MTCH_ACCNT  = :st_usr_prfl.c_cln_mtch_accnt;

  if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName, "Failed To Get SPAN Flag.");
    fn_errlog(c_ServiceName, "S31050", SQLMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
		tpfree ( ( char * ) ptr_fml_Obuf );  /*** Ver 2.0 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

  /** EXEC SQL ALLOCATE :cur_spn_pstn; ** Commented in Ver 2.0 **/

	rtrim(c_undrlyng);
	rtrim(c_xchng_cd);
	rtrim(c_mtch_accnt_no);

	if( DEBUG_MSG_LVL_3 )
	{	
		fn_userlog(c_ServiceName,"c_opr_typ :%c:",c_opr_typ);
		fn_userlog(c_ServiceName,"c_rqst_typ :%c:",c_rqst_typ);
		fn_userlog(c_ServiceName,"c_prd_type :%c:",c_prd_type);
		fn_userlog(c_ServiceName,"c_undrlyng :%s:",c_undrlyng);
		fn_userlog(c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd);
  	fn_userlog(c_ServiceName,"Match Account :%s:", c_mtch_accnt_no);
	}

  /*** Added for Ver 2.2 ***/

    EXEC SQL
      SELECT PAR_BULLET_TIME_INTRVL
      INTO  :c_bullet_param
      FROM  PAR_SYSTM_PRMTR;

    if(SQLCODE != 0)
    {
      fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    
    if( DEBUG_MSG_LVL_3 )
    { 
    fn_userlog(c_ServiceName,"Bullet param  :%s:",c_bullet_param.arr );
    }

     SETLEN(c_bullet_param);

     /*** End for Ver 2.2 ***/ 
  	

   EXEC SQL ALLOCATE :sys_cursor ;   /*** Ver 3.4 ***/

	if( ( ( c_spn_flg == 'Y') && strcmp(c_xchng_cd,"NFO") == 0 ) ||      
    ( c_bse_spn_flg == 'Y' && strcmp(c_xchng_cd,"BFO") == 0 ) )
	{

		EXEC SQL ALLOCATE :cur_spn_pstn;  /*** Ver 2.0 ***/

		if( c_prd_type =='F' || c_prd_type == ALL || c_prd_type == 'O')  /* Ver 3.1 prd typ O added */
    {

    /********* Commented in Ver 3.4 ****************

			strcpy ((char *)stmnt.arr,"SELECT FCP_PRDCT_TYP,FCP_INDSTK,FCP_UNDRLYNG, FCP_EXPRY_DT,FCP_EXER_TYP,FCP_STRK_PRC,FCP_OPT_TYP,'*',FCP_OPNPSTN_FLW,abs(FCP_OPNPSTN_QTY),FCP_MTM_OPN_VAL,decode(FCP_OPNPSTN_FLW,'S',greatest(abs(FCP_IBUY_QTY),abs(FCP_EXBUY_QTY)),'B',greatest(abs(FCP_ISELL_QTY),abs(FCP_EXSELL_QTY) ),0), FCP_IBUY_QTY, FCP_ISELL_QTY, decode(FCP_IBUY_QTY, 0, 0, FCP_IBUY_ORD_VAL/FCP_IBUY_QTY),  decode(FCP_ISELL_QTY, 0, 0, FCP_ISELL_ORD_VAL/FCP_ISELL_QTY), FCP_OPT_PREMIUM,decode(abs(FCP_OPNPSTN_QTY),0,0,abs(FCP_MTM_OPN_VAL)/abs(FCP_OPNPSTN_QTY)),'*',NVL(FCP_TRG_PRC,0),0,0,0,'*','*','*','*',0,'*',0,0,0,'*',0,0,'*','*',NVL(FCP_UDLVRY_MRGN,0),1 FROM FCP_FO_SPN_CNTRCT_PSTN WHERE FCP_CLM_MTCH_ACCNT ='");  **** FCP_TRG_PRC added in ver 2.9 ***
                             ** Ver 2.4 Added column dlvry mrgn **

			strcat((char *)stmnt.arr,c_mtch_accnt_no);
			strcat((char *)stmnt.arr,"' AND FCP_XCHNG_CD ='");
			strcat((char *)stmnt.arr,c_xchng_cd);
			strcat((char *)stmnt.arr,"' AND  trim(FCP_UNDRLYNG)  like '");
      strcat((char *)stmnt.arr,c_undrlyng);
      strcat((char *)stmnt.arr,"' AND (FCP_OPNPSTN_QTY != 0 OR FCP_IBUY_QTY != 0 OR FCP_ISELL_QTY   != 0 )");

      ** ver 3.2 starts ** 
      if ( c_call_ind ==  ADVANCE_PAYOFF_ANALYSR )
      {
       strcat((char *)stmnt.arr," AND  FCP_PRDCT_TYP = 'O'");
      }
      ** ver 3.2 Ends **

    **************************** Ver 3.4 Comment Ends **********/
   
  /*** Ver 3.4 Starts ***/

  if ( c_prd_type != ALL ) 
  {

  EXEC SQL EXECUTE
  BEGIN
  OPEN :sys_cursor FOR
  SELECT FCP_PRDCT_TYP,FCP_INDSTK,FCP_UNDRLYNG, FCP_EXPRY_DT,FCP_EXER_TYP,FCP_STRK_PRC,FCP_OPT_TYP,'*',FCP_OPNPSTN_FLW,abs(FCP_OPNPSTN_QTY),FCP_MTM_OPN_VAL,decode(FCP_OPNPSTN_FLW,'S',greatest(abs(FCP_IBUY_QTY),abs(FCP_EXBUY_QTY)),'B',greatest(abs(FCP_ISELL_QTY),abs(FCP_EXSELL_QTY) ),0), FCP_IBUY_QTY, FCP_ISELL_QTY, decode(FCP_IBUY_QTY, 0, 0, FCP_IBUY_ORD_VAL/FCP_IBUY_QTY),  decode(FCP_ISELL_QTY, 0, 0, FCP_ISELL_ORD_VAL/FCP_ISELL_QTY), FCP_OPT_PREMIUM,decode(abs(FCP_OPNPSTN_QTY),0,0,abs(FCP_MTM_OPN_VAL)/abs(FCP_OPNPSTN_QTY)),'*',NVL(FCP_TRG_PRC,0),0,0,0,'*','*','*','*',0,'*',0,0,0,'*',0,0,'*','*',NVL(FCP_UDLVRY_MRGN,0), NVL(FCP_AVG_PRC,0),1  FROM FCP_FO_SPN_CNTRCT_PSTN /*** FCP_AVG_PRC added in Ver 4.0 ***/
WHERE FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      AND FCP_XCHNG_CD = :c_xchng_cd
      /** AND  trim(FCP_UNDRLYNG)  like :c_undrlyng  ** 3.6 **/
      AND FCP_UNDRLYNG  like :c_undrlyng  /** trim Remove in Ver 3.6 **/
      AND (FCP_OPNPSTN_QTY != 0 OR FCP_IBUY_QTY != 0 OR FCP_ISELL_QTY   != 0 )
      AND  FCP_PRDCT_TYP = Decode(:c_call_ind,:c_adv_payoff_anlyzr,:c_opt_prd_typ,FCP_PRDCT_TYP)
      ORDER BY 3,29,1,4;

    END;
    END-EXEC;

    if(SQLCODE != 0)
    {
      fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      EXEC SQL FREE :cur_spn_pstn;
      EXEC SQL FREE :sys_cursor;
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

  }

  /*** Ver 3.4 Ends ***/


		/*** Ver 3.5 Starts ***/
    c_all_flg           = 'N';
    c_indx_indctr       = 'N';
    c_dlvry_sttlmnt_typ = '\0';
    c_dlvry_enbl_flg    = '\0';
    /***** Ver 3.8 **** Commented here shifted below ****
    if ( c_setlmnt_flg == 'P' ) *** Physical Settled contract only ***
    {
      if ( c_prd_typ == 'F' || c_prd_typ == 'O' )
      {
      if( l_opnpstn_qty == 0 )
      {
        c_indx_indctr = 'N';  ** Show Choose Delivery link **
      }
      else
      {
        EXEC SQL
          SELECT   NVL(FLM_DLVRYENBL_FLG,'N')
          INTO     :c_dlvry_enbl_flg
          FROM     FLM_FO_LODM_MSTR
          WHERE    FLM_UNDRLYNG = :c_undrlyng
          AND      FLM_EOS_DT >= (
          SELECT   EXG_NXT_TRD_DT
          FROM     EXG_XCHNG_MSTR
          WHERE    EXG_XCHNG_CD = 'NFO');
         *** AND      FLM_EOS_DT >= trunc(SYSDATE); ***

      if( (SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog( c_ServiceName, "S31065", SQLMSG, c_errmsg );
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
      }
			else if ( SQLCODE == NO_DATA_FOUND )
      {
        c_all_flg = 'Y';
        EXEC SQL
          SELECT    NVL(FLM_DLVRYENBL_FLG,'N'),FLM_EXP_DT
          INTO      :c_dlvry_enbl_flg,
                    :c_flm_expr_dt
          FROM      FLM_FO_LODM_MSTR
          WHERE     FLM_UNDRLYNG = 'ALL'
          AND      FLM_EOS_DT >= (
          SELECT   EXG_NXT_TRD_DT
          FROM     EXG_XCHNG_MSTR
          WHERE    EXG_XCHNG_CD = 'NFO');
          *** AND      FLM_EOS_DT >= trunc(SYSDATE); ***

        if((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
        {
          fn_errlog( c_ServiceName, "S31070", SQLMSG, c_errmsg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
				
        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Inside Underlying ALL CASE c_all_flg :%c:",c_all_flg);
        }
      }
		
			if ( ( c_dlvry_enbl_flg == 'Y' && ( strcmp(c_flm_expr_dt,c_expry_dt) == 0 ) && c_all_flg == 'Y' ) || ( c_dlvry_enbl_flg == 'Y' && c_all_flg == 'N' ) )
    {
    EXEC SQL
      SELECT      NVL(FCP_DLVRY_MODE_FLAG,'N'),
                  NVL(FCP_DLVRY_OBLGAMT_BLCKD,0),
                  NVL(FCP_DLVRY_QTY_BLCKD,0)
      INTO        :c_dlvry_mode_flg,
                  :l_dlvry_oblgamt_blckd,
                  :l_dlvry_qty_blckd
      FROM        FCP_FO_SPN_CNTRCT_PSTN
      WHERE       FCP_XCHNG_CD  = :c_xchng_cd
      AND         FCP_PRDCT_TYP = :c_prd_typ
      AND         FCP_INDSTK    = :c_ctgry_indstk
      AND         FCP_UNDRLYNG  = :c_undrlyng
      AND         FCP_EXPRY_DT  = :c_expry_dt
      AND         FCP_EXER_TYP  = :c_exrc_typ
      AND         FCP_STRK_PRC  = :l_strike_prc
      AND         FCP_OPT_TYP   = :c_opt_typ
      AND         FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no;

      if((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
      {
        fn_errlog( c_ServiceName, "S31075", SQLMSG, c_errmsg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
				
        *** Background color display ***
        if( l_dlvry_oblgamt_blckd == 0 && l_dlvry_qty_blckd == 0 )
        {
          c_dlvry_sttlmnt_typ = 'P';  ** Show Delivery in 'Pink' **
        }
        else
        {
          c_dlvry_sttlmnt_typ = 'G';  ** Show Delivery in  'Green' **
        }
        if ( c_dlvry_mode_flg == 'N' )
        {
          c_indx_indctr = 'D';  ** Show Choose Delivery link **
        }
        if ( c_dlvry_mode_flg == 'Y' )
        {
          c_indx_indctr = 'C';  ** Show Choose Non Delivery link **
        }
				
        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Settlement Flag :%c:",c_dlvry_sttlmnt_typ);
          fn_userlog(c_ServiceName,"Index Indicator Choose Delivery/Non-Delivery :%c:",c_indx_indctr);
        }
      }
      else
      {
        c_indx_indctr = 'N';  ** Dont show any link(Choose delivery or non delivery) **
      }
			if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Index Indicator Choose Delivery/Non-Delivery :%c:",c_indx_indctr);
      }	
     }
    }
    }
    *** Ver 3.5 Ends ***
    ****** Commented in Ver 3.8 ****/
	
		}	
		if( ( c_prd_type =='P' || c_prd_type == ALL ) && c_call_ind == 'N' )  /** ver 3.2 **/
    {
      /***** Commented in Ver 3.4 ************ 
     
			if( c_prd_type == ALL )
      {
      	strcat((char *)stmnt.arr," UNION ALL ");
      }
      else
      {
        strcpy((char *)stmnt.arr,"");
      }

			strcat((char *)stmnt.arr,"SELECT ffp_prdct_typ,ffp_indstk,ffp_undrlyng, ffp_expry_dt,ffp_exer_typ,0,'*',ffp_cntrct_tag,ffp_opnpstn_flw,abs(ffp_opnpstn_qty),ffp_mtm_opn_val,decode(ffp_opnpstn_flw,'S',greatest(abs(ffp_ibuy_qty),abs(ffp_exbuy_qty)) ,'B',greatest(abs(ffp_isell_qty),abs(ffp_exsell_qty) ),0),ffp_ibuy_qty,ffp_isell_qty,0,0,0,decode(ffp_opnpstn_qty,0,0,abs(ffp_mtm_opn_val)/abs(ffp_opnpstn_qty)),'*',NVL(FFP_TRG_PRC,0),0,0,0,'*','*','*','*',0,'*',0,0,0,'*',0,0,'*','*',0,2  FROM ffp_fo_futures_pstn WHERE ffp_clm_mtch_accnt ='"); 
                                                     ** Ver 2.4 added 0 for additional column **
			strcat((char *)stmnt.arr,c_mtch_accnt_no);
      strcat((char *)stmnt.arr,"' AND ffp_xchng_cd ='");
      strcat((char *)stmnt.arr,c_xchng_cd);
      strcat((char *)stmnt.arr,"' AND ffp_prdct_typ ='");
      strcat((char *)stmnt.arr,c_fp_prd_typ);
      strcat((char *)stmnt.arr,"' and trim(ffp_undrlyng) like '");
      strcat((char *)stmnt.arr,c_undrlyng);
      strcat((char *)stmnt.arr,"' AND  (ffp_opnpstn_qty != 0  OR ffp_ibuy_qty != 0 OR ffp_isell_qty != 0 )");

    *** Ver 1.8 Hard Coding of product type removed from above query ***

    ************ Ver 3.4 Comment Ends *************************************/

    /************ Ver 3.4 Starts *************/

  if ( c_prd_type != ALL )   
  {
  EXEC SQL EXECUTE
  BEGIN
  OPEN :sys_cursor FOR
  SELECT ffp_prdct_typ,ffp_indstk,ffp_undrlyng, ffp_expry_dt,ffp_exer_typ,0,'*',ffp_cntrct_tag,ffp_opnpstn_flw,abs(ffp_opnpstn_qty),ffp_mtm_opn_val,decode(ffp_opnpstn_flw,'S',greatest(abs(ffp_ibuy_qty),abs(ffp_exbuy_qty)) ,'B',greatest(abs(ffp_isell_qty),abs(ffp_exsell_qty) ),0),ffp_ibuy_qty,ffp_isell_qty,0,0,0,decode(ffp_opnpstn_qty,0,0,abs(ffp_mtm_opn_val)/abs(ffp_opnpstn_qty)),'*',NVL(FFP_TRG_PRC,0),0,0,0,'*','*','*','*',0,'*',0,0,0,'*',0,0,'*','*',0,NVL(FFP_AVG_PRC,0),2  FROM ffp_fo_futures_pstn /*** FFP_AVG_PRC added in Ver 4.0 ***/
  WHERE ffp_clm_mtch_accnt = :c_mtch_accnt_no
      AND ffp_xchng_cd = :c_xchng_cd
      AND ffp_prdct_typ = :c_fp_prd_typ
      /** and trim(ffp_undrlyng) like :c_undrlyng ** 3.6 **/
      and ffp_undrlyng like :c_undrlyng  /** trim Remove in Ver 3.6 **/
      AND  (ffp_opnpstn_qty != 0  OR ffp_ibuy_qty != 0 OR ffp_isell_qty != 0 )
      ORDER BY 3,29,1,4;

   END;
   END-EXEC;

   if(SQLCODE != 0)
    {
      fn_errlog( c_ServiceName, "S31080", SQLMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      EXEC SQL FREE :cur_spn_pstn;
      EXEC SQL FREE :sys_cursor;
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

   }

   
    /************ Ver 3.4 Ends **************/
		}
		if( ( c_prd_type =='U' || c_prd_type == ALL ) && c_call_ind == 'N' )  /** ver 3.2 **/
    {

    /********* Commented in Ver 3.4 ***********

      if( c_prd_type == ALL )
      {
        strcat((char *)stmnt.arr," UNION ALL ");
      }
      else
      {
        strcpy((char *)stmnt.arr,"");
      }

			strcat((char *)stmnt.arr,"SELECT FRESH.FOD_PRDCT_TYP, FRESH.FOD_INDSTK, FRESH.FOD_UNDRLYNG, FRESH.FOD_EXPRY_DT, FRESH.FOD_EXER_TYP, FRESH.FOD_STRK_PRC, FRESH.FOD_OPT_TYP, '*',DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW) * Commented and replaced in Ver 1.9 FRESH.FOD_ORDR_FLW *, PSTN.OPEN_QTY, 0, PSTN.EXEC_QTY, 0, 0, 0, 0, 0, FRESH.FOD_LMT_RT, COVER.FOD_ORDR_FLW, COVER.FOD_STP_LSS_TGR, COVER.FOD_LMT_RT,0, (FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD), FRESH.FOD_ORDR_STTS, COVER.FOD_ORDR_STTS, FRESH.FOD_ORDR_RFRNC, FRESH.FOD_SLTP_ORDR_RFRNC, COVER.FOD_MDFCTN_CNTR,FRESH.FOD_LMT_MRKT_SL_FLG,FRESH.FOD_EXEC_QTY,FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY),COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY),COVER.FOD_LMT_MRKT_SL_FLG,COVER.FOD_ORDR_TOT_QTY ,0,to_char(COVER.FOD_ORDR_VALID_DT, 'dd-Mon-yyyy'),COVER.FOD_FC_FLAG,0,3 FROM FOD_FO_ORDR_DTLS FRESH, FOD_FO_ORDR_DTLS COVER,( SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC, SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY FROM   FOD_FO_ORDR_DTLS WHERE  FOD_XCHNG_CD = '");
                                                        ** Ver 2.4 added 0 for additional column ** 
 		 	strcat((char *)stmnt.arr,c_xchng_cd);
     	strcat((char *)stmnt.arr,"' AND FOD_PRDCT_TYP = '");
      strcat((char *)stmnt.arr,c_fpsl_prd_typ); 
      strcat((char *)stmnt.arr,"' AND FOD_CLM_MTCH_ACCNT = '");
     	strcat((char *)stmnt.arr,c_mtch_accnt_no);
		 	strcat((char *)stmnt.arr,"' AND trim(FOD_UNDRLYNG) like '");
		 	strcat((char *)stmnt.arr,c_undrlyng);
    	strcat((char *)stmnt.arr,"' GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0 * '>' than replaced with '!=' in Ver 1.9 *) PSTN WHERE FRESH.FOD_CLM_MTCH_ACCNT = '");
     	strcat((char *)stmnt.arr,c_mtch_accnt_no);
     	strcat((char *)stmnt.arr,"' AND COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC AND FRESH.FOD_XCHNG_CD ='");
     	strcat((char *)stmnt.arr,c_xchng_cd);
     	strcat((char *)stmnt.arr,"' AND trim(FRESH.FOD_UNDRLYNG) like '");
     	strcat((char *)stmnt.arr,c_undrlyng);
     	strcat((char *)stmnt.arr,"' AND  FRESH.FOD_PRDCT_TYP = '");
      strcat((char *)stmnt.arr,c_fpsl_prd_typ); 
      strcat((char *)stmnt.arr,"' AND FRESH.FOD_EXER_TYP = '");
      strcat((char *)stmnt.arr,c_exer_typ);
      strcat((char *)stmnt.arr,"' AND FRESH.FOD_FC_FLAG = '");
      strcat((char *)stmnt.arr,c_fresh_flg);
      strcat((char *)stmnt.arr,"'AND PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC ");

    *** Ver 1.8 Hard Coding of product type, exercise type and fresh/cover flag removed from above query ***
    
    ******************* Ver 3.4 Comment Ends *******************************************************************/

    /*** Ver 3.4 Starts ***/

  if ( c_prd_type != ALL )   /*** if condition added in Ver 3.4 ***/
  {

  EXEC SQL EXECUTE
  BEGIN
  OPEN :sys_cursor FOR
  SELECT FRESH.FOD_PRDCT_TYP, FRESH.FOD_INDSTK, FRESH.FOD_UNDRLYNG, FRESH.FOD_EXPRY_DT, FRESH.FOD_EXER_TYP, FRESH.FOD_STRK_PRC, FRESH.FOD_OPT_TYP, '*',DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW) /* Commented and replaced in Ver 1.9 FRESH.FOD_ORDR_FLW */, PSTN.OPEN_QTY, 0, PSTN.EXEC_QTY, 0, 0, 0, 0, 0, FRESH.FOD_LMT_RT, COVER.FOD_ORDR_FLW, COVER.FOD_STP_LSS_TGR, COVER.FOD_LMT_RT,0, (FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD), FRESH.FOD_ORDR_STTS, COVER.FOD_ORDR_STTS, FRESH.FOD_ORDR_RFRNC, FRESH.FOD_SLTP_ORDR_RFRNC, COVER.FOD_MDFCTN_CNTR,FRESH.FOD_LMT_MRKT_SL_FLG,FRESH.FOD_EXEC_QTY,FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY),COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY),COVER.FOD_LMT_MRKT_SL_FLG,COVER.FOD_ORDR_TOT_QTY ,0,to_char(COVER.FOD_ORDR_VALID_DT, 'dd-Mon-yyyy'),COVER.FOD_FC_FLAG,0,0,3 FROM FOD_FO_ORDR_DTLS FRESH, FOD_FO_ORDR_DTLS COVER,( SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC, SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY FROM   FOD_FO_ORDR_DTLS /*** 0 added in Ver 4.0 ***/
  WHERE  FOD_XCHNG_CD = :c_xchng_cd
      AND FOD_PRDCT_TYP = :c_fpsl_prd_typ
      AND FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      /** AND trim(FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FOD_UNDRLYNG like :c_undrlyng /** trim Remove in Ver 3.6 **/
      GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0 ) PSTN
    WHERE FRESH.FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      AND COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC AND FRESH.FOD_XCHNG_CD = :c_xchng_cd
      /** AND trim(FRESH.FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FRESH.FOD_UNDRLYNG like :c_undrlyng /** trim Remove in Ver 3.6 **/
      AND  FRESH.FOD_PRDCT_TYP = :c_fpsl_prd_typ
      AND FRESH.FOD_EXER_TYP = :c_exer_typ
      AND FRESH.FOD_FC_FLAG = :c_fresh_flg
      AND PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC
      ORDER BY 3,29,1,4;

   END;
   END-EXEC;
 
   if(SQLCODE != 0)
    {
      fn_errlog( c_ServiceName, "S31085", SQLMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      EXEC SQL FREE :cur_spn_pstn;
      EXEC SQL FREE :sys_cursor;
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

   }

    /*** Ver 3.4 Ends ***/

    }
    if( c_prd_type =='I' || c_prd_type == ALL)
    {
     /****** Commented in Ver 3.4 *************

      if( c_prd_type == ALL )
      {
        strcat((char *)stmnt.arr," UNION ALL ");
      }
      else
      {
        strcpy((char *)stmnt.arr,"");
      }

			strcat((char *)stmnt.arr,"SELECT FRESH.FOD_PRDCT_TYP, FRESH.FOD_INDSTK, FRESH.FOD_UNDRLYNG, FRESH.FOD_EXPRY_DT, FRESH.FOD_EXER_TYP, FRESH.FOD_STRK_PRC, FRESH.FOD_OPT_TYP, '*', DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW) * Commented and replaced in Ver 1.9 FRESH.FOD_ORDR_FLW *, PSTN.OPEN_QTY, 0, PSTN.EXEC_QTY, 0, 0, 0, 0, 0, FRESH.FOD_LMT_RT, COVER.FOD_ORDR_FLW, COVER.FOD_STP_LSS_TGR, COVER.FOD_LMT_RT,0, (FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD), FRESH.FOD_ORDR_STTS, COVER.FOD_ORDR_STTS, FRESH.FOD_ORDR_RFRNC, FRESH.FOD_SLTP_ORDR_RFRNC, COVER.FOD_MDFCTN_CNTR,FRESH.FOD_LMT_MRKT_SL_FLG,FRESH.FOD_EXEC_QTY,FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY),COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY),COVER.FOD_LMT_MRKT_SL_FLG ,COVER.FOD_ORDR_TOT_QTY,0,to_char(COVER.FOD_ORDR_VALID_DT, 'dd-Mon-yyyy'),COVER.FOD_FC_FLAG,0,4 FROM FOD_FO_ORDR_DTLS FRESH, FOD_FO_ORDR_DTLS COVER,( SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC, SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY FROM   FOD_FO_ORDR_DTLS WHERE  FOD_XCHNG_CD = '");
                                                             ** Ver 2.4 added 0 for additional column **

			strcat((char *)stmnt.arr,c_xchng_cd);
     	strcat((char *)stmnt.arr,"' AND FOD_PRDCT_TYP = '");
      strcat((char *)stmnt.arr,c_oplus_prd_typ);
      strcat((char *)stmnt.arr,"' AND FOD_CLM_MTCH_ACCNT = '");
     	strcat((char *)stmnt.arr,c_mtch_accnt_no);
     	strcat((char *)stmnt.arr,"' AND trim(FOD_UNDRLYNG) like '");
     	strcat((char *)stmnt.arr,c_undrlyng);
  		strcat((char *)stmnt.arr,"' GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0 * '>' replaced by '!=' in Ver 1.9 *) PSTN WHERE FRESH.FOD_CLM_MTCH_ACCNT = '");
     	strcat((char *)stmnt.arr,c_mtch_accnt_no);
    	strcat((char *)stmnt.arr,"' AND COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC AND FRESH.FOD_XCHNG_CD ='");
     	strcat((char *)stmnt.arr,c_xchng_cd);
     	strcat((char *)stmnt.arr,"' AND trim(FRESH.FOD_UNDRLYNG) like '");
     	strcat((char *)stmnt.arr,c_undrlyng);
     	strcat((char *)stmnt.arr,"' AND  FRESH.FOD_PRDCT_TYP = '");
      strcat((char *)stmnt.arr,c_oplus_prd_typ);
      strcat((char *)stmnt.arr,"' AND FRESH.FOD_EXER_TYP = '");
      strcat((char *)stmnt.arr,c_exer_typ); 
      strcat((char *)stmnt.arr,"' AND FRESH.FOD_FC_FLAG = '");
      strcat((char *)stmnt.arr,c_fresh_flg);
      strcat((char *)stmnt.arr,"' AND PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC ");

      ********************* Ver 3.4 Comment Ends *********************************************/
   
  /*** Ver 3.4 Starts ***/

  if ( c_prd_type != ALL )
  {

  EXEC SQL EXECUTE
  BEGIN
  OPEN :sys_cursor FOR
  SELECT FRESH.FOD_PRDCT_TYP, FRESH.FOD_INDSTK, FRESH.FOD_UNDRLYNG, FRESH.FOD_EXPRY_DT, FRESH.FOD_EXER_TYP, FRESH.FOD_STRK_PRC, FRESH.FOD_OPT_TYP, '*', DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW) /* Commented and replaced in Ver 1.9 FRESH.FOD_ORDR_FLW */, PSTN.OPEN_QTY, 0, PSTN.EXEC_QTY, 0, 0, 0, 0, 0, FRESH.FOD_LMT_RT, COVER.FOD_ORDR_FLW, COVER.FOD_STP_LSS_TGR, COVER.FOD_LMT_RT,0, (FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD), FRESH.FOD_ORDR_STTS, COVER.FOD_ORDR_STTS, FRESH.FOD_ORDR_RFRNC, FRESH.FOD_SLTP_ORDR_RFRNC, COVER.FOD_MDFCTN_CNTR,FRESH.FOD_LMT_MRKT_SL_FLG,FRESH.FOD_EXEC_QTY,FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY),COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY),COVER.FOD_LMT_MRKT_SL_FLG ,COVER.FOD_ORDR_TOT_QTY,0,to_char(COVER.FOD_ORDR_VALID_DT, 'dd-Mon-yyyy'),COVER.FOD_FC_FLAG,0,0,4 FROM FOD_FO_ORDR_DTLS FRESH, FOD_FO_ORDR_DTLS COVER,( SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC, SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY FROM   FOD_FO_ORDR_DTLS  /*** 0 added in Ver 4.0 ***/
  WHERE  FOD_XCHNG_CD = :c_xchng_cd
      AND FOD_PRDCT_TYP = :c_oplus_prd_typ
      AND FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      /** AND trim(FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FOD_UNDRLYNG like :c_undrlyng /** trim Remove in Ver 3.6 **/
      GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0 ) PSTN WHERE FRESH.FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      AND COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC AND FRESH.FOD_XCHNG_CD = :c_xchng_cd
      /** AND trim(FRESH.FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FRESH.FOD_UNDRLYNG like :c_undrlyng  /** trim Remove in Ver 3.6 **/
      AND  FRESH.FOD_PRDCT_TYP = :c_oplus_prd_typ
      AND FRESH.FOD_EXER_TYP = :c_exer_typ
      AND FRESH.FOD_FC_FLAG = :c_fresh_flg
      AND PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC
      ORDER BY 3,29,1,4;

   END;
   END-EXEC;

   /*** Ver 3.4 Ends ***/



    /************** Commented in Ver 3.4 *****************************
 
    *** Ver 1.8 Hard Coding of product type, exercise type and fresh/cover flag removed from above query ***

		strcat((char *)stmnt.arr," ORDER BY 3,29,1,4 ");

    *** Ver 1.3 following columns added
   FRESH.FOD_LMT_MRKT_SL_FLG,FRESH.FOD_EXEC_QTY,FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY +
FRESH.FOD_EXPRD_QTY),COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY),
COVER.FOD_LMT_MRKT_SL_FLG ,COVER.FOD_ORDR_TOT_QTY ***
    *** FFP_TRG_PRC selected in case of product FuturePLUS in Ver 1.7 ***
     Also added Exercise Qty, Order Valid Date and Cover Flag in Ver 1.7  ***

		stmnt.len = strlen((char *)stmnt.arr);

    if(DEBUG_MSG_LVL_0)   *** Debug Level added in Ver 1.9 ***
    {
    	fn_userlog(c_ServiceName," stmnt.len :%d: Match Account :%s:",stmnt.len,c_mtch_accnt_no); *** Match Account added in        Ver 1.9 ***
    }

  	print_qry((char*)stmnt.arr,stmnt.len,c_ServiceName);

  	EXEC SQL PREPARE sql_stmnt FROM :stmnt;

  	EXEC SQL DECLARE sys_spn_cur CURSOR FOR sql_stmnt;

  	EXEC SQL OPEN sys_spn_cur ;
   
    ********** Ver 3.4 Comment Ends *************************************************/ 

  	if(SQLCODE != 0)
  	{
    	fn_errlog( c_ServiceName, "S31090", SQLMSG, c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
      EXEC SQL FREE :sys_cursor;      /*** Ver 3.4 ***/
    	tpfree((char *)ptr_fml_Obuf);
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
    }
   }
   /*** Ver 3.4 Starts ***/

  if ( c_prd_type == ALL   && c_call_ind == 'N')
  {

  EXEC SQL EXECUTE
  BEGIN
  OPEN :sys_cursor FOR
 SELECT FCP_PRDCT_TYP,FCP_INDSTK,FCP_UNDRLYNG, FCP_EXPRY_DT,FCP_EXER_TYP,FCP_STRK_PRC,FCP_OPT_TYP,'*',FCP_OPNPSTN_FLW,abs(FCP_OPNPSTN_QTY),FCP_MTM_OPN_VAL,decode(FCP_OPNPSTN_FLW,'S',greatest(abs(FCP_IBUY_QTY),abs(FCP_EXBUY_QTY)),'B',greatest(abs(FCP_ISELL_QTY),abs(FCP_EXSELL_QTY) ),0), FCP_IBUY_QTY, FCP_ISELL_QTY, decode(FCP_IBUY_QTY, 0, 0, FCP_IBUY_ORD_VAL/FCP_IBUY_QTY),  decode(FCP_ISELL_QTY, 0, 0, FCP_ISELL_ORD_VAL/FCP_ISELL_QTY), FCP_OPT_PREMIUM,decode(abs(FCP_OPNPSTN_QTY),0,0,abs(FCP_MTM_OPN_VAL)/abs(FCP_OPNPSTN_QTY)),'*',NVL(FCP_TRG_PRC,0),0,0,0,'*','*','*','*',0,'*',0,0,0,'*',0,0,'*','*',NVL(FCP_UDLVRY_MRGN,0),NVL(FCP_AVG_PRC,0),1 FROM FCP_FO_SPN_CNTRCT_PSTN WHERE FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no 
      AND FCP_XCHNG_CD = :c_xchng_cd
      /** AND  trim(FCP_UNDRLYNG)  like :c_undrlyng ** 3.6 **/
      AND  FCP_UNDRLYNG  like :c_undrlyng  /** trim Remove in Ver 3.6 **/
      AND (FCP_OPNPSTN_QTY != 0 OR FCP_IBUY_QTY != 0 OR FCP_ISELL_QTY   != 0 )
      AND  FCP_PRDCT_TYP = Decode(:c_call_ind,:c_adv_payoff_anlyzr,:c_opt_prd_typ,FCP_PRDCT_TYP) /*** FCP_AVG_PRC added in Ver 4.0 ***/

  UNION ALL

  SELECT ffp_prdct_typ,ffp_indstk,ffp_undrlyng, ffp_expry_dt,ffp_exer_typ,0,'*',ffp_cntrct_tag,ffp_opnpstn_flw,abs(ffp_opnpstn_qty),ffp_mtm_opn_val,decode(ffp_opnpstn_flw,'S',greatest(abs(ffp_ibuy_qty),abs(ffp_exbuy_qty)) ,'B',greatest(abs(ffp_isell_qty),abs(ffp_exsell_qty) ),0),ffp_ibuy_qty,ffp_isell_qty,0,0,0,decode(ffp_opnpstn_qty,0,0,abs(ffp_mtm_opn_val)/abs(ffp_opnpstn_qty)),'*',NVL(FFP_TRG_PRC,0),0,0,0,'*','*','*','*',0,'*',0,0,0,'*',0,0,'*','*',0,NVL(FFP_AVG_PRC,0),2  FROM ffp_fo_futures_pstn /*** FFP_AVG_PRC added in Ver 4.0 ***/
  WHERE ffp_clm_mtch_accnt = :c_mtch_accnt_no
      AND ffp_xchng_cd = :c_xchng_cd
      AND ffp_prdct_typ = :c_fp_prd_typ
      /** and trim(ffp_undrlyng) like :c_undrlyng ** 3.6 **/
      and ffp_undrlyng like :c_undrlyng /** trim Remove in Ver 3.6 **/
      AND  (ffp_opnpstn_qty != 0  OR ffp_ibuy_qty != 0 OR ffp_isell_qty != 0 )

   UNION ALL

   SELECT FRESH.FOD_PRDCT_TYP, FRESH.FOD_INDSTK, FRESH.FOD_UNDRLYNG, FRESH.FOD_EXPRY_DT, FRESH.FOD_EXER_TYP, FRESH.FOD_STRK_PRC, FRESH.FOD_OPT_TYP, '*',DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW) /* Commented and replaced in Ver 1.9 FRESH.FOD_ORDR_FLW */, PSTN.OPEN_QTY, 0, PSTN.EXEC_QTY, 0, 0, 0, 0, 0, FRESH.FOD_LMT_RT, COVER.FOD_ORDR_FLW, COVER.FOD_STP_LSS_TGR, COVER.FOD_LMT_RT,0, (FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD), FRESH.FOD_ORDR_STTS, COVER.FOD_ORDR_STTS, FRESH.FOD_ORDR_RFRNC, FRESH.FOD_SLTP_ORDR_RFRNC, COVER.FOD_MDFCTN_CNTR,FRESH.FOD_LMT_MRKT_SL_FLG,FRESH.FOD_EXEC_QTY,FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY),COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY),COVER.FOD_LMT_MRKT_SL_FLG,COVER.FOD_ORDR_TOT_QTY ,0,to_char(COVER.FOD_ORDR_VALID_DT, 'dd-Mon-yyyy'),COVER.FOD_FC_FLAG,0,0,3 FROM FOD_FO_ORDR_DTLS FRESH, FOD_FO_ORDR_DTLS COVER,( SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC, SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY FROM   FOD_FO_ORDR_DTLS /*** 0 added in Ver 4.0 ***/
  WHERE  FOD_XCHNG_CD = :c_xchng_cd
      AND FOD_PRDCT_TYP = :c_fpsl_prd_typ
      AND FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      /** AND trim(FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FOD_UNDRLYNG like :c_undrlyng   /** trim Remove in Ver 3.6 **/
      GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0 ) PSTN
    WHERE FRESH.FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      AND COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC AND FRESH.FOD_XCHNG_CD = :c_xchng_cd
      /** AND trim(FRESH.FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FRESH.FOD_UNDRLYNG like :c_undrlyng  /** trim Remove in Ver 3.6 **/
      AND  FRESH.FOD_PRDCT_TYP = :c_fpsl_prd_typ
      AND FRESH.FOD_EXER_TYP = :c_exer_typ
      AND FRESH.FOD_FC_FLAG = :c_fresh_flg
      AND PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC

   UNION ALL

   SELECT FRESH.FOD_PRDCT_TYP, FRESH.FOD_INDSTK, FRESH.FOD_UNDRLYNG, FRESH.FOD_EXPRY_DT, FRESH.FOD_EXER_TYP, FRESH.FOD_STRK_PRC, FRESH.FOD_OPT_TYP, '*', DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW) /* Commented and replaced in Ver 1.9 FRESH.FOD_ORDR_FLW */, PSTN.OPEN_QTY, 0, PSTN.EXEC_QTY, 0, 0, 0, 0, 0, FRESH.FOD_LMT_RT, COVER.FOD_ORDR_FLW, COVER.FOD_STP_LSS_TGR, COVER.FOD_LMT_RT,0, (FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD), FRESH.FOD_ORDR_STTS, COVER.FOD_ORDR_STTS, FRESH.FOD_ORDR_RFRNC, FRESH.FOD_SLTP_ORDR_RFRNC, COVER.FOD_MDFCTN_CNTR,FRESH.FOD_LMT_MRKT_SL_FLG,FRESH.FOD_EXEC_QTY,FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY),COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY),COVER.FOD_LMT_MRKT_SL_FLG ,COVER.FOD_ORDR_TOT_QTY,0,to_char(COVER.FOD_ORDR_VALID_DT, 'dd-Mon-yyyy'),COVER.FOD_FC_FLAG,0,0,4 FROM FOD_FO_ORDR_DTLS FRESH, FOD_FO_ORDR_DTLS COVER,( SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC, SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY FROM   FOD_FO_ORDR_DTLS /*** 0 added in Ver 4.0 ***/
  WHERE  FOD_XCHNG_CD = :c_xchng_cd
      AND FOD_PRDCT_TYP = :c_oplus_prd_typ
      AND FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      /** AND trim(FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FOD_UNDRLYNG like :c_undrlyng   /** trim Remove in Ver 3.6 **/
      GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0 ) PSTN WHERE FRESH.FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      AND COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC AND FRESH.FOD_XCHNG_CD = :c_xchng_cd
      /** AND trim(FRESH.FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FRESH.FOD_UNDRLYNG like :c_undrlyng   /** trim Remove in Ver 3.6 **/
      AND  FRESH.FOD_PRDCT_TYP = :c_oplus_prd_typ
      AND FRESH.FOD_EXER_TYP = :c_exer_typ
      AND FRESH.FOD_FC_FLAG = :c_fresh_flg
      AND PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC

  ORDER BY 3,29,1,4;
  END;
  END-EXEC;

   if(SQLCODE != 0)
    {
      fn_errlog( c_ServiceName, "S31095", SQLMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      EXEC SQL FREE :cur_spn_pstn;
      EXEC SQL FREE :sys_cursor;
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
   }

   else if ( c_prd_type == ALL && c_call_ind !='N' )
   {

    EXEC SQL EXECUTE
  BEGIN
  OPEN :sys_cursor FOR
  SELECT FCP_PRDCT_TYP,FCP_INDSTK,FCP_UNDRLYNG, FCP_EXPRY_DT,FCP_EXER_TYP,FCP_STRK_PRC,FCP_OPT_TYP,'*',FCP_OPNPSTN_FLW,abs(FCP_OPNPSTN_QTY),FCP_MTM_OPN_VAL,decode(FCP_OPNPSTN_FLW,'S',greatest(abs(FCP_IBUY_QTY),abs(FCP_EXBUY_QTY)),'B',greatest(abs(FCP_ISELL_QTY),abs(FCP_EXSELL_QTY) ),0), FCP_IBUY_QTY, FCP_ISELL_QTY, decode(FCP_IBUY_QTY, 0, 0, FCP_IBUY_ORD_VAL/FCP_IBUY_QTY),  decode(FCP_ISELL_QTY, 0, 0, FCP_ISELL_ORD_VAL/FCP_ISELL_QTY), FCP_OPT_PREMIUM,decode(abs(FCP_OPNPSTN_QTY),0,0,abs(FCP_MTM_OPN_VAL)/abs(FCP_OPNPSTN_QTY)),'*',NVL(FCP_TRG_PRC,0),0,0,0,'*','*','*','*',0,'*',0,0,0,'*',0,0,'*','*',NVL(FCP_UDLVRY_MRGN,0),NVL(FCP_AVG_PRC,0),1 FROM FCP_FO_SPN_CNTRCT_PSTN  /*** FCP_AVG_PRC added in Ver 3.8 ***/
WHERE FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      AND FCP_XCHNG_CD = :c_xchng_cd
      /** AND  trim(FCP_UNDRLYNG)  like :c_undrlyng ** 3.6 **/
      AND  FCP_UNDRLYNG  = :c_undrlyng  /** trim Remove in Ver 3.6 **/ /*** Like changed to = for payoff call in Ver 3.9 ***/
      AND (FCP_OPNPSTN_QTY != 0 OR FCP_IBUY_QTY != 0 OR FCP_ISELL_QTY   != 0 )
      AND  FCP_PRDCT_TYP = Decode(:c_call_ind,:c_adv_payoff_anlyzr,:c_opt_prd_typ,FCP_PRDCT_TYP)

  UNION ALL

   SELECT FRESH.FOD_PRDCT_TYP, FRESH.FOD_INDSTK, FRESH.FOD_UNDRLYNG, FRESH.FOD_EXPRY_DT, FRESH.FOD_EXER_TYP, FRESH.FOD_STRK_PRC, FRESH.FOD_OPT_TYP, '*', DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW) /* Commented and replaced in Ver 1.9 FRESH.FOD_ORDR_FLW */, PSTN.OPEN_QTY, 0, PSTN.EXEC_QTY, 0, 0, 0, 0, 0, FRESH.FOD_LMT_RT, COVER.FOD_ORDR_FLW, COVER.FOD_STP_LSS_TGR, COVER.FOD_LMT_RT,0, (FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD), FRESH.FOD_ORDR_STTS, COVER.FOD_ORDR_STTS, FRESH.FOD_ORDR_RFRNC, FRESH.FOD_SLTP_ORDR_RFRNC, COVER.FOD_MDFCTN_CNTR,FRESH.FOD_LMT_MRKT_SL_FLG,FRESH.FOD_EXEC_QTY,FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY),COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY),COVER.FOD_LMT_MRKT_SL_FLG ,COVER.FOD_ORDR_TOT_QTY,0,to_char(COVER.FOD_ORDR_VALID_DT, 'dd-Mon-yyyy'),COVER.FOD_FC_FLAG,0,0,4 FROM FOD_FO_ORDR_DTLS FRESH, FOD_FO_ORDR_DTLS COVER,( SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC, SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY FROM   FOD_FO_ORDR_DTLS  /*** 0 added in Ver 3.8 ***/
  WHERE  FOD_XCHNG_CD = :c_xchng_cd
      AND FOD_PRDCT_TYP = :c_oplus_prd_typ
      AND FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      /** AND trim(FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FOD_UNDRLYNG = :c_undrlyng  /** trim Remove in Ver 3.6 **/ /*** Like changed to = for payoff call in Ver 3.9 ***/
      GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0 ) PSTN WHERE FRESH.FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      AND COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC AND FRESH.FOD_XCHNG_CD = :c_xchng_cd
      /** AND trim(FRESH.FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FRESH.FOD_UNDRLYNG = :c_undrlyng  /** trim Remove in Ver 3.6 **/ /*** Like changed to = for payoff call in Ver 3.9 ***/
      AND  FRESH.FOD_PRDCT_TYP = :c_oplus_prd_typ
      AND FRESH.FOD_EXER_TYP = :c_exer_typ
      AND FRESH.FOD_FC_FLAG = :c_fresh_flg
      AND PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC

   ORDER BY 3,29,1,4;
  END;
  END-EXEC;

   if(SQLCODE != 0)
    {
      fn_errlog( c_ServiceName, "S31100", SQLMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      EXEC SQL FREE :cur_spn_pstn;
      EXEC SQL FREE :sys_cursor;
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
   }

   /*** Ver 3.4 Ends ***/
  
	
  	i_tag_cnt =0;
 

		for ( ; ; )
		{
   		l_cvr_qty = 0;
    	l_ibuy_qty = 0;
    	l_isell_qty = 0;
    	l_mdfctn_cntr = 0;

    	d_ord_mrgn = 0.0;
    	d_price = 0.0;
    	d_t2t_prc = 0.0; /*** Ver 4.0 ***/
    	d_unlz_pl = 0.0;
    	d_mtm_opn_val = 0.0;
    	d_utrd_mrgn = 0.0;
    	d_base_prc =0.0;
			d_mtm_loss = 0.0;			/***	Ver 1.7	***/

    	c_frsh_ordr_stts = '\0';
    	c_cvr_ordr_stts = '\0';
    	c_cvr_ordr_flw ='\0';
    	c_prd_typ = '\0';
    	c_ctgry_indstk ='\0';

			c_addmrgn_flg  = '\0';
			c_sqroff_flg  = '\0';
			c_jointsqroff_flg  = '\0';
			c_rollover_flag  = '\0';
			c_sprd_roll_flag = '\0';			/*** Ver 2.3 ***/
			c_conv_flg  = '\0';
			c_mtm_flg  = '\0';
			c_mod_can_flg  = '\0';
			c_cvr_ordr_stts  = '\0';
			c_spl_flg  = '\0';
			c_sqroffmkt_flg = 'N';       /** Ver 1.4 **/
      c_cvr_ordr_flw = '\0';       /** Ver 1.7 **/

			l_opnpstn_qty = 0;
			l_strike_prc = 0;
			d_mtm_opn_val = 0;
			li_bo_qty = 0;
			li_so_qty = 0;
			d_profit_loss = 0;
			d_prmum = 0;
			li_bo_rt = 0;
			li_so_rt = 0;
			d_curr_uopn_val  = 0.0;
      d_dlvry_mrgn_blk = 0.0; /** Ver 2.4 **/
      i_crnt_mnth_flg = 0; /** Ver 2.4 **/
      

      MEMSET(c_bullet_frm_time); /*** Ver 2.2 ***/
      MEMSET(c_bullet_end_time); /*** Ver 2.2 ***/


      
		 	/*** EXEC SQL
					FETCH sys_spn_cur *** Commented in Ver 3.4 and replaced with sys_cursor ***/

         EXEC SQL
          FETCH :sys_cursor
          INTO :c_prd_typ,
               :c_ctgry_indstk,
               :c_undrlyng,
               :c_expry_dt,
               :c_exrc_typ,
               :l_strike_prc,
               :c_opt_typ,
               :c_cntrct_tag,
               :c_opnpstn_flw,
               :l_opnpstn_qty,
               :d_mtm_opn_val,
               :l_cvr_qty,
               :l_ibuy_qty,
               :l_isell_qty,
 	       			 :li_bo_rt,
               :li_so_rt,
               :d_prmum,
               :d_price,
               :c_cvr_ordr_flw,
               :li_stp_lss_tgr_prc,
               :l_lmt_rt,
               :d_ord_mrgn,
               :d_utrd_mrgn,
               :c_frsh_ordr_stts,
               :c_cvr_ordr_stts,
               :c_ordr_rfrnc,
               :c_sltp_ordr_rfrnc,
               :l_mdfctn_cntr,
               :c_frsh_slm_flg,        /*** Ver 1.3 ***/
               :l_frsh_exctd_qty,      /*** Ver 1.3 ***/
               :l_frsh_unexctd_qty,    /*** Ver 1.3 ***/
               :l_cvr_unexctd_qty,     /*** Ver 1.3 ***/
               :c_cvr_slm_flg,         /*** Ver 1.3 ***/
               :l_tot_ord_qty,         /*** Ver 1.3 ***/
               :l_exrc_qty,            /*** Ver 1.7 ***/
               :c_ord_val_dt,          /*** Ver 1.7 ***/
               :c_cvr_fc_flg,          /*** Ver 1.7 ***/
               :d_dlvry_mrgn_blk,      /*** Ver 2.4 ***/
							 :d_t2t_prc;						 /*** Ver 4.0 ***/


			if (d_t2t_prc == 0) /*** Ver 4.0  ***/
			{
				d_t2t_prc = d_price;
			}

			rtrim(c_undrlyng);
		 	rtrim(c_expry_dt);
			rtrim(c_ordr_rfrnc);
			rtrim(c_sltp_ordr_rfrnc);


			if ( SQLCODE != 0 )
			{
				if ( SQLCODE == NO_DATA_FOUND )
				{
					/*** Ver 2.3 Starts ***/
					if( c_prd_type =='F' || c_prd_type == ALL )
					{
						if( DEBUG_MSG_LVL_3 )
						{
							fn_userlog(c_ServiceName,"Checking inside NO_DATA_FOUND for RSPREAD Records from ORDER BOOK Only");
						}
						c_prd_typ1 = 'F';
						EXEC SQL
							select	TO_CHAR( FOD_EXPRY_DT, 'DD-MON-YYYY' ),
								FOD_ORDR_FLW,
								FTQ_LST_TRD_PRC
							/*INTO	:c_expry_dt,
								:c_uopnpstn_flw,	*Commented in ver 2.7 */
							INTO	:c_r_expry_dt,						/* ver 2.7 */
								:c_r_opnpstn_flw,							/* ver 2.7 */
								:l_lst_trdd_prc
							FROM	FOD_FO_ORDR_DTLS, FTQ_FO_TRD_QT
							WHERE	FOD_EXPRY_DT NOT IN (SELECT DISTINCT(FCP_EXPRY_DT)
									FROM FCP_FO_SPN_CNTRCT_PSTN
									WHERE FCP_XCHNG_CD = :c_xchng_cd
									AND FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
									AND FCP_UNDRLYNG = :c_prev_undrlyng
									AND FCP_PRDCT_TYP = :c_prd_typ1
									AND (    FCP_OPNPSTN_QTY != 0
									OR FCP_IBUY_QTY    != 0
									OR FCP_ISELL_QTY   != 0 ))
							AND	FTQ_EXPRY_DT = FOD_EXPRY_DT
							AND	FOD_UNDRLYNG = FTQ_UNDRLYNG
							AND	FTQ_PRDCT_TYP = FOD_PRDCT_TYP
							AND	FOD_ORDR_STTS in ('P','O','R','Q')
							AND	FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
							AND	FOD_PRDCT_TYP= :c_prd_typ1
							AND	FOD_UNDRLYNG= :c_prev_undrlyng
							AND	FOD_SPL_FLAG='O'
							AND	FOD_XCHNG_CD = :c_xchng_cd
							AND	rownum < 2;

						if( SQLCODE != 0 && ( SQLCODE != NO_DATA_FOUND ))
						{
							fn_errlog( c_ServiceName, "S31105", SQLMSG, c_err_msg  );
              /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
              EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
              EXEC SQL FREE :sys_cursor;  /*** Ver 3.4 ***/
							EXEC SQL FREE :cur_spn_pstn; 
      				tpfree ( ( char * ) ptr_fml_Obuf );
      				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
						
						else if ( SQLCODE == NO_DATA_FOUND )
						{			
							fn_userlog(c_ServiceName,"inside NO_DATA_FOUND RSPREAD Records from ORDER BOOK Only not found");
							c_rsprd_pos_flg = 'N';
						}
						else
						{
							c_rsprd_pos_flg = 'Y';
							i_grp_cnt = 1;
            	if( DEBUG_MSG_LVL_3 )
            	{
								fn_userlog(c_ServiceName,"Records of RSPREAD inside NO_DATA_FOUND are available to be shown from ORDER BOOK Only");	
							}
							EXEC SQL
								SELECT nvl(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0),
									FOD_CLM_MTCH_ACCNT,
									FOD_INDSTK,
									FOD_UNDRLYNG,
									FOD_EXER_TYP,
									NVL(sum(FOD_SROLL_DIFF_AMT),0) + NVL(sum(FOD_SROLL_LSS_AMT),0)
								INTO
									:l_fod_qty,
									:c_mtch_accnt_no,
									:c_uindstk,
									:c_undrlyng,
									:c_exrc_typ,
									:d_rordr_mrgn
								FROM  FOD_FO_ORDR_DTLS
								WHERE FOD_ORDR_STTS in ('P','O','R','Q')
								AND FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
								AND FOD_PRDCT_TYP= :c_prd_typ1
								AND FOD_UNDRLYNG = :c_prev_undrlyng
								AND FOD_EXPRY_DT = :c_r_expry_dt				/* Ver 2.7 */
								AND FOD_XCHNG_CD = :c_xchng_cd
								and FOD_ORDR_FLW = :c_r_opnpstn_flw			/* Ver 2.7 */
								AND FOD_SPL_FLAG = 'O'
								GROUP BY FOD_CLM_MTCH_ACCNT,FOD_INDSTK,FOD_UNDRLYNG,FOD_EXER_TYP;
							if ( SQLCODE != 0 )
							{
								fn_errlog( c_ServiceName, "S31110", SQLMSG, c_err_msg  );
                /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
                EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
                EXEC SQL FREE :sys_cursor;  /*** Ver 3.4 ***/
								EXEC SQL FREE :cur_spn_pstn; 
      					tpfree ( ( char * ) ptr_fml_Obuf );
      					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
							c_spl_flg = CONTRACT_IP;
							/*c_opnpstn_flw = '-';
							l_cvr_qty = 0;
							li_bo_qty = 0;
							li_so_qty = 0;
							l_cvr_qty = l_cvr_qty + l_fod_qty;
							if(c_uopnpstn_flw == 'B')
							{
								li_bo_qty = li_bo_qty + l_fod_qty;
							}
							else if (c_uopnpstn_flw == 'S')
							{
								li_so_qty = li_so_qty - l_fod_qty;
							}				*** Commented in Ver 2.7 */
							/* Ver 2.7 Starts */
							li_r_bo_qty = 0;
							li_r_so_qty = 0;
							if(c_r_opnpstn_flw == 'B')
              {
                li_r_bo_qty = li_r_bo_qty + l_fod_qty;
              }
              else if (c_r_opnpstn_flw == 'S')
              {
                li_r_so_qty = li_r_so_qty - l_fod_qty;
              }
							/* Ver 2.7 Ends */
            	if( DEBUG_MSG_LVL_3 )
            	{
								fn_userlog(c_ServiceName,"*** Packing for NO_DATA_FOUND_RSPREAD_FOD_ONLY ***");
							}
							i_returncode = fn_pack_vartofml ( c_ServiceName,
												c_err_msg,
												&ptr_fml_Obuf,
												68/*** 65 to 67 ver 3.5 ***/, /*** 67 to 68 in Ver 4.0 ***/
												FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no, 
												FFO_PRDCT_TYP,(char *)&c_prd_typ1,
												FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,
												FFO_UNDRLYNG,(char *)c_prev_undrlyng,
												FFO_XCHNG_CD,(char *)c_xchng_cd,
												FFO_EXPRY_DT,(char *)c_expry_dt,
												FFO_OPT_TYP,(char *)&c_null,
												FFO_STRK_PRC,(char *)&l_null,
												FFO_EXER_TYP,(char *)&c_exrc_typ,
												FFO_CNTRCT_TAG,(char *)&c_null,
												FFO_C_OPNPSTN_QTY,(char *)&l_null,			/* Ver 2.7 */
												FFO_C_OPNPSTN_FLW,(char *)&c_null,			/* Ver 2.7 */
												FFO_CVR_QTY,(char *)&l_fod_qty,					/* Ver 2.7 */
												FFO_LST_TRD_PRC,(char *)&l_lst_trdd_prc,
												FFO_UI_BUY_QTY,(char *)&li_r_bo_qty,		/* Ver 2.7 */
												FFO_UI_SELL_QTY,(char *)&li_r_so_qty,		/* Ver 2.7 */
												FFO_MIN_LOT_QTY,(char *)&l_lot_size,
											/** FFO_STP_LSS_TGR,(char *)&l_null,commented in ver 2.9  **/
                        FFO_STP_LSS_TGR,(char *)&li_stp_lss_tgr_prc, /** ver 2.9 **/	
												FFO_LMT_RT,(char *)&l_merge_counter,
												FFO_ORDR_FLW,(char *)&c_null,
												FFO_PSTN_AMT_BLKD,(char *)&d_null,
												FFO_C_MTM_OPN_VAL,(char *)&d_null,
												FFO_U_IMTM_SPRD_PL,(char *)&d_null,
												FFO_EFF_CLS_PRC, (char *) &d_null, /*** Ver 4.0 ***/
												FFO_AMOUNT,(char *)&d_null,
												FFO_U_ORDR_MRGN,(char *)&d_null,				/* Ver 2.7 */
												FFO_U_MM_TRD_MRGN,(char *)&d_null,
												FFO_BAL_AMT,(char *)&d_null,
												FFO_UNRLZD_PL,(char *)&d_null,
												FFO_DWL_FLG,(char *)&c_null,
												FFO_SPL_FLG,(char *)&c_null,
												FFO_STATUS_FLG,(char *)&c_null,
												FFO_QT_TRDNG_FLG,(char *)&c_null,				/* Ver 2.7 */
												FFO_SETTLOR_STTS,(char *)&c_null,  			/* Ver 2.7 */
												FFO_FUT_CONV_FLG,(char *)&c_null,
												FFO_MTM_FLG,(char *)&c_null,
												FFO_MOD_CAN_FLG,(char *)&c_null,
												FFO_IS_FLG,(char *)&c_null,
												FFO_RQST_TYP,(char *)&c_spl_flg,
												FFO_COUNTER,(char *)&i_tag_cnt,
												FFO_ORDR_RFRNC,(char *)"",
												FFO_CURR_RT, (char *)&l_spot_prc,            
												FFO_DAM_TRNSCTN, (char *)&c_null,  
												FFO_STLMNT_TYP, (char *)&c_null,   
												FFO_DLVRY_ALLWD, (char *)&c_null,  
												FFO_ORD_TYP, (char *)&c_null,   
												FFO_BOARD_LOT_QTY, (char *)&l_null,
												FFO_TMPLT, (char *)&l_null,  
												FFO_XCHNG_CAN_QTY, (char *)&l_null,
												FFO_EX_ORDR_TYP, (char *)&c_null,  
												FFO_ORD_TOT_QTY, (char *)&l_null,  
												FFO_FUT_PRC, (char *)&d_null,      
												FFO_PLG_ORDR_RFRNC, (char *)"",   
												FFO_EXRC_STTS, (char *)&c_null,   
												FFO_RMS_PRCSD_FLG, (char *)&c_null,			/* Ver 2.7 */
												FFO_DR_CR_FLG, (char *)&c_null,             
												FFO_NKD_BLKD_FLG, (char *)&c_null,          
												FFO_UPLD_MTCH_FLG, (char *)&c_null,   
												FFO_EXRC_QTY, (char *)&l_null,        
												FFO_ORD_VALID_DT, (char *)" ",        
												FFO_EBA_STTS, (char *)&c_null,        
												FFO_BK_UBK_FLG,(char *)&c_null, 				/* Ver 2.7 */
												FFO_ND_STRT_DT, (char *)"",    
												FFO_ND_END_DT, (char *)"",    
												FFO_SO_AMT_BLKD, (char *)&d_null, 
												FFO_OPNPSTN_VAL, (char *)&d_null,
                        FFO_INDX_INDCTR, (char *)&c_indx_indctr,     /*** Ver 3.5 ***/
                        /** FFO_STLMNT_TYP, (char *)&c_dlvry_sttlmnt_typ *** Ver 3.5 *** Ver 3.8 **/
                        FFO_BNK_STTS, (char *)&c_dlvry_sttlmnt_typ /*** Ver 3.8 ***/
							    );
							if ( i_returncode == -1 )
							{
								fn_errlog( c_ServiceName, "S31115", FMLMSG, c_err_msg  );
                /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
                EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
                EXEC SQL FREE :sys_cursor;  /*** Ver 3.4 ***/
								EXEC SQL FREE :cur_spn_pstn; 
								tpfree ( ( char * ) ptr_fml_Obuf );
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
            	if( DEBUG_MSG_LVL_3 )
            	{
								fn_userlog(c_ServiceName,"**** After Packing Direct from FOD inside NO_DATA_FOUND *******");
								fn_userlog(c_ServiceName,"c_mtch_accnt_no:%s: c_prd_typ1:%c: c_undrlyng:%s: c_expry_dt:%s: l_opnpstn_qty:%ld: c_opnpstn_flw:%c:",c_mtch_accnt_no,c_prd_typ1,c_undrlyng,c_expry_dt,l_opnpstn_qty,c_opnpstn_flw);
								fn_userlog(c_ServiceName,"l_cvr_qty:%ld: l_lst_trdd_prc:%ld: l_ibuy_qty:%ld: l_isell_qty:%ld: l_lot_size:%ld: l_merge_counter:%ld:",l_cvr_qty,l_lst_trdd_prc,l_ibuy_qty,l_isell_qty,l_lot_size,l_merge_counter);
							}
						}
					}
					/*** Ver 2.3 Ends ***/

    			if( i_grp_cnt == 1)
    			{
    				if( l_grp_opn_qty > 0 )
    				{
      				c_grp_opn_flw = 'B';
    				}
    				else if( l_grp_opn_qty < 0)
    				{
      				c_grp_opn_flw = 'S';
      				l_grp_opn_qty = abs(l_grp_opn_qty);
    				}
    				else
    				{
      				c_grp_opn_flw = '\0';
    				}


						 /**** Ver 1.5 Start ****/
            if(i_sqroffmkt_flg_cnt == 0) 
            {
                c_sqr_off_all_at_mkt = 'Y';
            }
            else
            {
                c_sqr_off_all_at_mkt = 'N';
            }
            /**** Ver 1.5 Ends  ****/
			

				
						if( DEBUG_MSG_LVL_3 )
						{
          		fn_userlog( c_ServiceName,"Group Total profit Loss is |%lf|",d_tot_profit_loss);
          		fn_userlog( c_ServiceName,"Group Available Margin is |%lf|",d_und_avail_mrgn);
							fn_userlog( c_ServiceName,"SLTPFP and OPLUS Total profit Loss is |%lf|",d_grp_pl);
          		fn_userlog( c_ServiceName,"Group SPAN c_addmrgn_flg :%c:",c_addmrgn_flg);
          		fn_userlog( c_ServiceName,"Group SPAN c_mtm_flg :%c:",c_mtm_flg);
							fn_userlog( c_ServiceName,"Sqr off All:%c:",c_sqr_off_all_at_mkt);  /** ver 1.5 **/
							fn_userlog( c_ServiceName,"Cancl All:%c:",c_cancel_all_flag); 			 /** ver 1.6 **/
						}

			 			c_spl_flg = UNDERLYING_IP;
    				i_tag_cnt++;
          
            if( DEBUG_MSG_LVL_3 )   /** debug level added in ver 4.1 **/
            {  	
						  fn_userlog( c_ServiceName,"c_prev_undrlyng :%s:",c_prev_undrlyng);
						  fn_userlog( c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd);
						  fn_userlog( c_ServiceName,"c_prd_typ1 :%c:",c_prd_typ1);					
	          }
 
						if( DEBUG_MSG_LVL_3 )
						{
							fn_userlog(c_ServiceName,"c_tmp_undrlying :%s:,i_tag_cnt :%d:",c_tmp_undrlying,i_tag_cnt);
							fn_userlog(c_ServiceName,"l_grp_opn_qty :%ld:,c_grp_opn_flw :%c:,d_grp_ord_mrgn :%lf:,d_tot_profit_loss :%lf:,d_grp_trd_mrgn :%lf:",l_grp_opn_qty,c_grp_opn_flw,d_grp_ord_mrgn,d_tot_profit_loss,d_grp_trd_mrgn);
						}
    				i_returncode = fn_pack_vartofml ( c_ServiceName,
            			                          c_err_msg,
                  			                    &ptr_fml_Obuf,
                        			              68, /** Ver 1.2 changed from 39 to 40 **/ /* changed to 52 in ver 1.3 */  /** Ver 1.4 changed from 52 to 53  **/  /** ver 1.5 changed from 53 to 54 **/ /** ver 1.6 changed from 54 to 55 **//* changed to 59 in Ver 1.7 */ /* Ver 2.1 changed from 59 to 60 */ /* Changed to 62 in Ver 2.2 */ /* Ver 2.4 chnged from 62 to 64 */ /* Ver 2.3 changed from 64 to 65 */  /*** 67 to 68 in Ver 4.0 ***/
                         			  						/* Ver 3.5 changed from 65 to 67 */
																						/**  FFO_EBA_MTCH_ACT_NO,(char *)&c_mtch_accnt_no, ** Commented in Ver 2.0 **/
																						FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no,  /** Ver 2.0 **/
                                    			  FFO_PRDCT_TYP,(char *)&c_null,
  			                                    FFO_CTGRY_INDSTK,(char *)&c_null,
 	      		                                FFO_UNDRLYNG,(char *)c_tmp_undrlying,
             			                          FFO_XCHNG_CD,(char *)c_xchng_cd,
                   			                    FFO_EXPRY_DT,(char *)" ",
                         			              FFO_OPT_TYP,(char *)&c_null,
                               				      FFO_STRK_PRC,(char *)&l_null,
                                      			FFO_EXER_TYP,(char *)&c_null,
                                      			FFO_CNTRCT_TAG,(char *)&c_null,
                                      			FFO_C_OPNPSTN_QTY,(char *)&l_grp_opn_qty,
                                      			FFO_C_OPNPSTN_FLW,(char *)&c_grp_opn_flw,
                                      			FFO_CVR_QTY,(char *)&l_null,
                                      			FFO_LST_TRD_PRC,(char *)&l_null,
                                      			FFO_UI_BUY_QTY,(char *)&l_null,
                                      			FFO_UI_SELL_QTY,(char *)&l_null,
                                      			FFO_MIN_LOT_QTY,(char *)&l_null,
                                      		  /** FFO_STP_LSS_TGR,(char *)&l_null, commented in 2.9  **/
                                            FFO_STP_LSS_TGR,(char *)&li_stp_lss_tgr_prc, /** ver 2.9 **/	
                                      			FFO_LMT_RT,(char *)&l_null,
                                      			FFO_ORDR_FLW,(char *)&c_null,
                                      			FFO_PSTN_AMT_BLKD,(char *)&d_null,
                                      			FFO_C_MTM_OPN_VAL,(char *)&d_null,
                                      			FFO_U_IMTM_SPRD_PL,(char *)&d_null,
					    		FFO_EFF_CLS_PRC, (char *) &d_null, /*** Ver 4.0 ***/
                                      			FFO_AMOUNT,(char *)&d_grp_trd_mrgn,
                                      			FFO_U_ORDR_MRGN,(char *)&d_null,
                                      			FFO_U_MM_TRD_MRGN,(char *)&d_null,
                                      			FFO_BAL_AMT,(char *)&d_null,
                                      			FFO_UNRLZD_PL,(char *)&d_grp_pl,
                                      			FFO_DWL_FLG,(char *)&c_addmrgn_flg,
                                      			FFO_SPL_FLG,(char *)&c_null,
                                      			FFO_STATUS_FLG,(char *)&c_null,
                                      			FFO_QT_TRDNG_FLG,(char *)&c_null,
																						FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flag,     /***  Ver 2.3 ***/
                                      			FFO_FUT_CONV_FLG,(char *)&c_null,
                                      			FFO_MTM_FLG,(char *)&c_mtm_flg,
                                      			FFO_MOD_CAN_FLG,(char *)&c_null,
                                      			FFO_IS_FLG,(char *)&c_null,
                                      			FFO_RQST_TYP,(char *)&c_spl_flg,
                                      			FFO_COUNTER,(char *)&i_tag_cnt,
                                      			FFO_ORDR_RFRNC,(char *)"",
																						FFO_CURR_RT, (char *)&l_null,                 /*** ver 1.2 ***/
                                            FFO_DAM_TRNSCTN, (char *)&c_null,    /*** Ver 1.3 ***/
                                            FFO_STLMNT_TYP, (char *)&c_null,      /*** Ver 1.3 ***/
                                      			FFO_DLVRY_ALLWD, (char *)&c_null,  /*** Ver 1.3 ***/
                                      			FFO_ORD_TYP, (char *)&c_null,       /*** Ver 1.3 ***/
                                      			FFO_BOARD_LOT_QTY, (char *)&l_null, /*** Ver 1.3 ***/
                                      			FFO_TMPLT, (char *)&l_null,       /*** Ver 1.3 ***/
                                      			FFO_XCHNG_CAN_QTY, (char *)&l_null, /*** Ver 1.3 ***/
                                      			FFO_EX_ORDR_TYP, (char *)&c_null,       /*** Ver 1.3 ***/
                                      			FFO_ORD_TOT_QTY, (char *)&l_null,       /*** Ver 1.3 ***/
                                      			FFO_FUT_PRC, (char *)&d_null,            /*** Ver 1.3 ***/
                                      			FFO_PLG_ORDR_RFRNC, (char *)"",    /*** Ver 1.3 ***/
                                      			FFO_EXRC_STTS, (char *)&c_null,   /*** Ver 1.3 ***/
                                            FFO_RMS_PRCSD_FLG, (char *)&c_null,           /*** Ver 1.4 ***/
                                            FFO_DR_CR_FLG, (char *)&c_sqr_off_all_at_mkt, /*** Ver 1.5 ***/
                                            FFO_NKD_BLKD_FLG, (char *)&c_cancel_all_flag,       /*** Ver 1.6 ***/
                                            FFO_UPLD_MTCH_FLG, (char *)&c_null,   /*** Ver 1.7 ***/
                                            FFO_EXRC_QTY, (char *)&l_null,        /*** Ver 1.7 ***/ 
                                            FFO_ORD_VALID_DT, (char *)" ",         /*** Ver 1.7 ***/
                                            FFO_EBA_STTS, (char *)&c_null,         /*** Ver 1.7 ***/
                                            FFO_BK_UBK_FLG,(char *)&c_null,         /*** Ver 2.1 ***/	
                                            FFO_ND_STRT_DT, (char *)"", /*** Ver 2.2 ***/
                                            FFO_ND_END_DT, (char *)"",  /*** Ver 2.2 ***/ 
                                            FFO_SO_AMT_BLKD, (char *)&d_null , /* Ver 2.4 */
                                            FFO_OPNPSTN_VAL, (char *)&d_null, /* Ver 2.4 */
                                            FFO_INDX_INDCTR, (char *)&c_null,     /*** Ver 3.5 ***/
                                            /*** FFO_STLMNT_TYP, (char *)&c_null       *** Ver 3.5 *** ver 3.8 **/
                                            FFO_BNK_STTS, (char *)&c_null       /*** Ver 3.8 ***/
                                          );	

	   				if ( i_returncode == -1 )
    				{
      				fn_errlog( c_ServiceName, "S31120", FMLMSG, c_err_msg  );
              /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
              EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/ 
							EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
              EXEC SQL FREE :sys_cursor;  /*** Ver 3.4 ***/ 
      				tpfree ( ( char * ) ptr_fml_Obuf );
      				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    				}
					
						c_mtm_flg = '\0';
						c_addmrgn_flg = '\0';
    				c_grp_opn_flw = '\0';
    				l_grp_opn_qty = 0;
    				d_grp_ord_mrgn = 0.0;
						d_grp_pl	= 0.0;
						d_grp_trd_mrgn = 0.0;
						i_grp_cnt =0;
						d_tot_profit_loss = 0.0;
						d_und_avail_mrgn = 0.0;
						d_umin_trd_mrgn = 0.0;

    				l_qty = 0;
    				i_non_Obuy_count = 0;
    				i_pstn_count = 0;
						l_merge_counter = 0;
  				}
 
					if( DEBUG_MSG_LVL_3 ) {          
						fn_userlog(c_ServiceName,"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
					}
				
					break; 
				}
				else
				{
					fn_errlog( c_ServiceName, "S31125", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor;  /*** Ver 3.4 ***/
					EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

    		/*** Ver 2.3 Starts Here ***/
    		EXEC SQL
      		SELECT b_qty,
             		 s_qty
        	INTO :l_buy_qty,
             	 :l_sell_qty
        	FROM
      		(SELECT NVL(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0) b_qty
       		 FROM FOD_FO_ORDR_DTLS
       		 WHERE FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
       		 AND FOD_PRDCT_TYP=:c_prd_typ
       		 AND FOD_UNDRLYNG=:c_undrlyng
       		 AND FOD_EXPRY_DT=:c_expry_dt
       		 AND FOD_SPL_FLAG='O'
       		 AND FOD_ORDR_FLW='B'
           AND FOD_ORDR_STTS in ('P','O','R','Q')
      		) A,
      		(SELECT NVL(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0) s_qty
       		 FROM FOD_FO_ORDR_DTLS
       		 WHERE FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
       		 AND FOD_PRDCT_TYP=:c_prd_typ
       		 AND FOD_UNDRLYNG=:c_undrlyng
       		 AND FOD_EXPRY_DT=:c_expry_dt
       		 AND FOD_SPL_FLAG='O'
       		 AND FOD_ORDR_FLW='S'
       		 AND FOD_ORDR_STTS in ('P','O','R','Q')
      		) B;

    		if ( SQLCODE != 0 )
    		{
					fn_errlog( c_ServiceName, "S31130", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor;  /*** Ver 3.4 ***/
					EXEC SQL FREE :cur_spn_pstn;   
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

    		l_ibuy_qty = l_ibuy_qty + l_buy_qty;
    		l_isell_qty = l_isell_qty - l_sell_qty;
    		if(c_opnpstn_flw == 'B')
    		{
      		l_cvr_qty = l_cvr_qty + l_sell_qty;
    		}
    		else if (c_opnpstn_flw == 'S')
    		{
      		l_cvr_qty = l_cvr_qty + l_buy_qty;
    		}
				if( DEBUG_MSG_LVL_3 ) 
				{
    			fn_userlog(c_ServiceName,"Spread BUY :%ld: and SELL :%ld:",l_buy_qty,l_sell_qty);
    			fn_userlog(c_ServiceName,"Total BUY :%ld: and SELL :%ld:",li_bo_qty,li_so_qty);
				}
    		/***** Ver 2.3 Ends here ****/

			}

			if( c_prd_typ != 'I' && c_prd_typ != 'U')		/** ver 1.5 **/
			{
      	if(  l_opnpstn_qty != 0   &&  l_ibuy_qty == 0  && l_isell_qty == 0)       /** Ver 1.4 **/
      	{
        	c_sqroffmkt_flg = 'Y';
      	}
      	else    /*** ver 1.5 ***/
      	{
        	i_sqroffmkt_flg_cnt++;
      	}

				/*** Ver 1.6 Starts ****/
        if(l_ibuy_qty > 0 || l_isell_qty < 0)
        {
          c_cancel_all_flag = 'Y';
          c_cntrct_lvl_cancel_flg = 'Y';
        }
        else
        {
          c_cntrct_lvl_cancel_flg = 'N';
        }

        if( DEBUG_MSG_LVL_3 )
        {
         fn_userlog(c_ServiceName, "Contract wise Cancel Flag:%c:", c_cntrct_lvl_cancel_flg);
        } 
        /*** Ver 1.6 Ends ****/	
		
			}

      if( DEBUG_MSG_LVL_3 ) 
			{
        fn_userlog(c_ServiceName,"After :c_sqroffmkt_flg:%c:",c_sqroffmkt_flg);   /** 1.4 **/
        fn_userlog(c_ServiceName,"After SPAN customer record fetch");
        fn_userlog(c_ServiceName,"@@@@@@@@@@@@@@@@ FETCH RECORD @@@@@@@@@@@@@@@@:");
        fn_userlog(c_ServiceName,":c_mtch_accnt:%s:",c_mtch_accnt_no);
        fn_userlog(c_ServiceName,":c_prd_typ:%c:",c_prd_typ);
        fn_userlog(c_ServiceName,":c_ctgry_indstk:%c:",c_ctgry_indstk);
        fn_userlog(c_ServiceName,":c_undrlyng:%s:",c_undrlyng);
        fn_userlog(c_ServiceName,":c_expry_dt:%s:",(char *)c_expry_dt);
        fn_userlog(c_ServiceName,":c_exrc_typ:%c:",c_exrc_typ);
        fn_userlog(c_ServiceName,":c_opt_typ:%c:",c_opt_typ);
        fn_userlog(c_ServiceName,":l_strike_prc:%ld:",(char *)l_strike_prc);
        fn_userlog(c_ServiceName,":c_opnpstn_flw:%c:",c_opnpstn_flw);
        fn_userlog(c_ServiceName,":l_opnpstn_qty:%ld:",l_opnpstn_qty);
        fn_userlog(c_ServiceName,":d_mtm_opn_val:%lf:",d_mtm_opn_val);
        fn_userlog(c_ServiceName,":l_cvr_qty:%ld:",l_cvr_qty);
        fn_userlog(c_ServiceName,":li_bo_qty:%ld:",li_bo_qty);
        fn_userlog(c_ServiceName,":li_so_qty:%ld:",li_so_qty);
        fn_userlog(c_ServiceName,":d_prmum:%lf:",d_prmum);
        fn_userlog(c_ServiceName,":li_bo_rt:%ld:",li_bo_rt);
        fn_userlog(c_ServiceName,":li_so_rt:%ld:",li_so_rt);
        fn_userlog(c_ServiceName,":d_dlvry_mrgn_blk:%lf:",d_dlvry_mrgn_blk); /** Ver 2.4 **/
        fn_userlog(c_ServiceName,":d_dlvry_mrgn_req:%lf:",d_dlvry_mrgn_req); /** Ver 2.4 **/ 
	fn_userlog(c_ServiceName,":d_t2t_prc:%lf:",d_t2t_prc); /*** Ver 4.0 ***/
      }

  		if( strcmp(c_tmp_undrlying,c_undrlyng) != 0 && i_grp_cnt == 1)
  		{
				/*** ver 2.3 Starts ***/
				if( c_prd_type =='F' || c_prd_type == ALL )
				{
          if( DEBUG_MSG_LVL_5 )
          {
						fn_userlog( c_ServiceName," Before going for und chng: checking RSPREAD_FOD_ONLY Rec" );
						fn_userlog( c_ServiceName," c_tmp_undrlying:%s: c_prev_undrlyng :%s: c_undrlyng:%s:",c_tmp_undrlying,c_prev_undrlyng,c_undrlyng);
					}
					c_rsprd_pos_flg = '\0';
					c_prd_typ1 = 'F';
					EXEC SQL
						select  TO_CHAR( FOD_EXPRY_DT, 'DD-MON-YYYY' ),
						FOD_ORDR_FLW,
						FTQ_LST_TRD_PRC
						/* INTO  :c_expry_dt,
						:c_uopnpstn_flw,					*** Ver 2.7 ***/
						/* Ver 2.7 Starts */
						INTO  :c_r_expry_dt,
						:c_r_opnpstn_flw,
						/* Ver 2.7 Ends */
						:l_lst_trdd_prc
						FROM  FOD_FO_ORDR_DTLS, FTQ_FO_TRD_QT
						WHERE FOD_EXPRY_DT NOT IN (SELECT DISTINCT(FCP_EXPRY_DT)
						FROM FCP_FO_SPN_CNTRCT_PSTN
						WHERE FCP_XCHNG_CD = :c_xchng_cd
						AND FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
						AND FCP_UNDRLYNG = :c_prev_undrlyng
						AND FCP_PRDCT_TYP = :c_prd_typ1
						AND (    FCP_OPNPSTN_QTY != 0
						OR FCP_IBUY_QTY    != 0
						OR FCP_ISELL_QTY   != 0 ))
						AND FTQ_EXPRY_DT = FOD_EXPRY_DT
						AND FOD_UNDRLYNG = FTQ_UNDRLYNG
						AND FTQ_PRDCT_TYP = FOD_PRDCT_TYP
						AND FOD_ORDR_STTS in ('P','O','R','Q')
						AND FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
						AND FOD_PRDCT_TYP= :c_prd_typ1
						AND FOD_UNDRLYNG= :c_prev_undrlyng
						AND FOD_SPL_FLAG='O'
						AND FOD_XCHNG_CD = :c_xchng_cd
						AND rownum < 2;
					if( SQLCODE != 0 && ( SQLCODE != NO_DATA_FOUND ))
					{
						fn_errlog( c_ServiceName, "S31135", SQLMSG, c_err_msg  );
            /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
            EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :sys_cursor;  /*** Ver 3.4 ***/
						EXEC SQL FREE :cur_spn_pstn;   
      			tpfree ( ( char * ) ptr_fml_Obuf );
      			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
					else if ( SQLCODE == NO_DATA_FOUND )
					{
						fn_userlog(c_ServiceName,"No records of RSPREAD inside UND_CHNG can be shown from ORDER BOOKOnly");
						c_rsprd_pos_flg = 'N';
					}
					else
					{
            if( DEBUG_MSG_LVL_3 )
            {
							fn_userlog(c_ServiceName,"Record of RSPREAD Before UND_CHNG are available in ORDER BOOK Only");
							fn_userlog(c_ServiceName,"c_expry_dt:%s: c_uopnpstn_flw:%c: l_lst_trdd_prc:%ld: c_mtch_accnt_no :%s: c_prev_undrlyng:%s:",c_expry_dt,c_uopnpstn_flw,l_lst_trdd_prc,c_mtch_accnt_no,c_prev_undrlyng);
						}
						EXEC SQL
							SELECT nvl(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0),
								FOD_CLM_MTCH_ACCNT,
								FOD_INDSTK,
								FOD_UNDRLYNG,
								FOD_EXER_TYP,
								NVL(sum(FOD_SROLL_DIFF_AMT),0) + NVL(sum(FOD_SROLL_LSS_AMT),0)
							INTO
								:l_fod_qty,
								:c_mtch_accnt_no,
								:c_uindstk,
								:c_prev_undrlyng,
								:c_exrc_typ,
								:d_rordr_mrgn
							FROM  FOD_FO_ORDR_DTLS
							WHERE FOD_ORDR_STTS in ('P','O','R','Q')
							AND	FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
							AND	FOD_PRDCT_TYP= :c_prd_typ1
							AND	FOD_UNDRLYNG = :c_prev_undrlyng
							AND	FOD_EXPRY_DT = :c_r_expry_dt				/* Ver 2.7 */
							AND	FOD_XCHNG_CD = :c_xchng_cd
							AND	FOD_ORDR_FLW = :c_r_opnpstn_flw			/* Ver 2.7 */
							AND	FOD_SPL_FLAG = 'O'
							GROUP BY FOD_CLM_MTCH_ACCNT,FOD_INDSTK,FOD_UNDRLYNG,FOD_EXER_TYP;
						if ( SQLCODE != 0 )
						{
							fn_errlog( c_ServiceName, "S31140", SQLMSG, c_err_msg  );
              /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
              EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
              EXEC SQL FREE :sys_cursor;  /*** Ver 3.4 ***/
							EXEC SQL FREE :cur_spn_pstn;   
      				tpfree ( ( char * ) ptr_fml_Obuf );
      				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
						c_spl_flg = CONTRACT_IP;
						/* c_opnpstn_flw = '-';
						l_cvr_qty = 0;
						li_bo_qty = 0;
						li_so_qty = 0;
						l_cvr_qty = l_cvr_qty + l_fod_qty;
						if(c_uopnpstn_flw == 'B')
						{
							li_bo_qty = li_bo_qty + l_fod_qty;
						}
						else if (c_uopnpstn_flw == 'S')
						{
							li_so_qty = li_so_qty - l_fod_qty;
						}	*** ver 2.7 */
						/* Ver 2.7 Starts */
						li_r_bo_qty = 0;
						li_r_so_qty = 0;
						if(c_r_opnpstn_flw == 'B')
            {
              li_r_bo_qty = li_r_bo_qty + l_fod_qty;
            }
            else if (c_r_opnpstn_flw == 'S')
            {
              li_r_so_qty = li_r_so_qty - l_fod_qty;
            }
						/* Ver 2.7 Ends */
						if( DEBUG_MSG_LVL_3 )
            {
							fn_userlog(c_ServiceName,"*** Packing for UND_CHG_RSPREAD_FOD_ONLY ***");
							fn_userlog(c_ServiceName,"c_spl_flg:%c: l_cvr_qty:%ld: li_bo_qty:%ld: li_so_qty:%ld:",c_spl_flg,l_cvr_qty,li_bo_qty,li_so_qty);
						}
						i_returncode = fn_pack_vartofml ( c_ServiceName,
										c_err_msg,
										&ptr_fml_Obuf,
										68/* Ver 3.5 changed from 65 to 67 */, /*** 67 to 68 in Ver 4.0 ***/
										FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no,
										FFO_PRDCT_TYP,(char *)&c_prd_typ1,
										FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,
										FFO_UNDRLYNG,(char *)c_prev_undrlyng,
										FFO_XCHNG_CD,(char *)c_xchng_cd,
										FFO_EXPRY_DT,(char *)c_r_expry_dt,				/* Ver 2.7 */
										FFO_OPT_TYP,(char *)&c_null,
										FFO_STRK_PRC,(char *)&l_null,
										FFO_EXER_TYP,(char *)&c_exrc_typ,
										FFO_CNTRCT_TAG,(char *)&c_null,
										FFO_C_OPNPSTN_QTY,(char *)&l_null,				/* Ver 2.7 */
										FFO_C_OPNPSTN_FLW,(char *)&c_null,				/* Ver 2.7 */
										FFO_CVR_QTY,(char *)&l_fod_qty,						/* Ver 2.7 */
										FFO_LST_TRD_PRC,(char *)&l_lst_trdd_prc,
										FFO_UI_BUY_QTY,(char *)&li_r_bo_qty,			/* Ver 2.7 */
										FFO_UI_SELL_QTY,(char *)&li_r_so_qty,			/* Ver 2.7 */
										FFO_MIN_LOT_QTY,(char *)&l_lot_size,
									  /** FFO_STP_LSS_TGR,(char *)&l_null, commented in 2.9  **/
                    FFO_STP_LSS_TGR,(char *)&li_stp_lss_tgr_prc, /** ver 2.9 **/	
										FFO_LMT_RT,(char *)&l_merge_counter,
										FFO_ORDR_FLW,(char *)&c_null,
										FFO_PSTN_AMT_BLKD,(char *)&d_null,
										FFO_C_MTM_OPN_VAL,(char *)&d_null,
										FFO_U_IMTM_SPRD_PL,(char *)&d_null,
										FFO_EFF_CLS_PRC, (char *) &d_null, /*** Ver 4.0 ***/
										FFO_AMOUNT,(char *)&d_null,
										FFO_U_ORDR_MRGN,(char *)&d_null,					/* Ver 2.7 */
										FFO_U_MM_TRD_MRGN,(char *)&d_null,
										FFO_BAL_AMT,(char *)&d_null,
										FFO_UNRLZD_PL,(char *)&d_null,
										FFO_DWL_FLG,(char *)&c_null,
										FFO_SPL_FLG,(char *)&c_null,
										FFO_STATUS_FLG,(char *)&c_null,
										FFO_QT_TRDNG_FLG,(char *)&c_null,					/* Ver 2.7 */
										FFO_SETTLOR_STTS,(char *)&c_null,					/* Ver 2.7 */
										FFO_FUT_CONV_FLG,(char *)&c_null,
										FFO_MTM_FLG,(char *)&c_null,
										FFO_MOD_CAN_FLG,(char *)&c_null,
										FFO_IS_FLG,(char *)&c_null,
										FFO_RQST_TYP,(char *)&c_spl_flg,
										FFO_COUNTER,(char *)&i_tag_cnt,
										FFO_ORDR_RFRNC,(char *)"",
										FFO_CURR_RT, (char *)&l_spot_prc,
										FFO_DAM_TRNSCTN, (char *)&c_null,
										FFO_STLMNT_TYP, (char *)&c_null,
										FFO_DLVRY_ALLWD, (char *)&c_null,
										FFO_ORD_TYP, (char *)&c_null,
										FFO_BOARD_LOT_QTY, (char *)&l_null,
										FFO_TMPLT, (char *)&l_null,
										FFO_XCHNG_CAN_QTY, (char *)&l_null,
										FFO_EX_ORDR_TYP, (char *)&c_null,
										FFO_ORD_TOT_QTY, (char *)&l_null,
										FFO_FUT_PRC, (char *)&d_null,
										FFO_PLG_ORDR_RFRNC, (char *)"",
										FFO_EXRC_STTS, (char *)&c_null,
										FFO_RMS_PRCSD_FLG, (char *)&c_null,
										FFO_DR_CR_FLG, (char *)&c_null,
										FFO_NKD_BLKD_FLG, (char *)&c_null,
										FFO_UPLD_MTCH_FLG, (char *)&c_null,
										FFO_EXRC_QTY, (char *)&l_null,
										FFO_ORD_VALID_DT, (char *)" ",
										FFO_EBA_STTS, (char *)&c_null,
										FFO_BK_UBK_FLG,(char *)&c_setlmnt_flg,
										FFO_ND_STRT_DT, (char *)"",
										FFO_ND_END_DT, (char *)"",
										FFO_SO_AMT_BLKD, (char *)&d_null,
										FFO_OPNPSTN_VAL, (char *)&d_null,
                    FFO_INDX_INDCTR, (char *)&c_null,     /*** Ver 3.5 ***/
                    /**FFO_STLMNT_TYP, (char *)&c_null       *** Ver 3.5 *** *** Ver 3.8 **/
                    FFO_BNK_STTS, (char *)&c_null       /*** Ver 3.8 ***/ );
						if ( i_returncode == -1 )
						{
							fn_errlog( c_ServiceName, "S31145", FMLMSG, c_err_msg  );
              /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
              EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
              EXEC SQL FREE :sys_cursor;  /*** Ver 3.4 ***/ 
							EXEC SQL FREE :cur_spn_pstn;
							tpfree ( ( char * ) ptr_fml_Obuf );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
            if( DEBUG_MSG_LVL_3 )
            {
							fn_userlog(c_ServiceName,"**** After Packing from FOD inside BEFORE_UND_CHNG ****");
							fn_userlog(c_ServiceName,"c_mtch_accnt_no:%s: c_prd_typ1:%c: c_prev_undrlyng:%s: c_expry_dt:%s: l_opnpstn_qty:%ld: c_opnpstn_flw:%c:",c_mtch_accnt_no,c_prd_typ1,c_prev_undrlyng,c_expry_dt,l_opnpstn_qty,c_opnpstn_flw);
							fn_userlog(c_ServiceName,"l_cvr_qty:%ld: l_lst_trdd_prc:%ld: l_ibuy_qty:%ld: l_isell_qty:%ld: l_lot_size:%ld: l_merge_counter:%ld:",l_cvr_qty,l_lst_trdd_prc,l_ibuy_qty,l_isell_qty,l_lot_size,l_merge_counter);
						}
					}
				}

				/*** Ver 2.3 Ends ***/
				if( DEBUG_MSG_LVL_3 )   /** ver 4.1 debug level changed to 3 **/
				{
					fn_userlog(c_ServiceName,"Inside Underlying Change Condition");
				}
	
    		if( l_grp_opn_qty > 0 )
    		{
      		c_grp_opn_flw = 'B';
    		}
    		else if( l_grp_opn_qty < 0)
    		{
      		c_grp_opn_flw = 'S';
      		l_grp_opn_qty = abs(l_grp_opn_qty);
    		}
    		else
    		{
      		c_grp_opn_flw = '\0';
    		}

				if( DEBUG_MSG_LVL_3 )
				{
        	fn_userlog( c_ServiceName,"Group Total profit Loss is |%lf|",d_tot_profit_loss);
        	fn_userlog( c_ServiceName,"Group Available Margin is |%lf|",d_und_avail_mrgn);
					fn_userlog( c_ServiceName,"SLTPFP and OPLUS Total profit Loss is |%lf|",d_grp_pl);
        	fn_userlog( c_ServiceName,"Group SPAN c_addmrgn_flg :%c:",c_addmrgn_flg);
        	fn_userlog( c_ServiceName,"Group SPAN c_mtm_flg :%c:",c_mtm_flg);
				}

    		c_spl_flg = UNDERLYING_IP;
    		i_tag_cnt++;

				if( DEBUG_MSG_LVL_3 ) /** ver 4.1 debug level changed to 3 **/
				{
					fn_userlog(c_ServiceName,"c_tmp_undrlying :%s:,i_tag_cnt :%d:",c_tmp_undrlying,i_tag_cnt);
					fn_userlog(c_ServiceName,"l_grp_opn_qty :%ld:,c_grp_opn_flw :%c:,d_grp_ord_mrgn :%lf:,d_tot_profit_loss :%lf:,d_grp_trd_mrgn :%lf:",l_grp_opn_qty,c_grp_opn_flw,d_grp_ord_mrgn,d_tot_profit_loss,d_grp_trd_mrgn);
				}

    		i_returncode = fn_pack_vartofml ( c_ServiceName,
        		                              c_err_msg,
            		                          &ptr_fml_Obuf,
                		                      68,	/** Ver 1.2 changed from 39 to 40 **/ /* changed to 52 in ver 1.3 */  /** Ver 1.4 changed from 52 to 53  **/  /** ver 1.5 changed from 53 to 54 **/ /** ver 1.6 changed from 54 to 55 **//* changed to 59 in Ver 1.7 */ /** Ver 2.1 c hanged from 59 to 60 **//* Changed to 62 in Ver 2.2 */ /* Ver 2.4 changed from 62 to 64*/ /* Changed from 64 to 65 in Ver 2.3 */
                    		         					/* Ver 3.5 changed from 65 to 67 */ /*** 67 to 68 in Ver 4.0 ***/
																					/** FFO_EBA_MTCH_ACT_NO,(char *)&c_mtch_accnt_no, ** Commented in Ver 2.0 **/
																					FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no, /** Ver 2.0 **/
                        		              FFO_PRDCT_TYP,(char *)&c_null,
                            		          FFO_CTGRY_INDSTK,(char *)&c_null,
                                		      FFO_UNDRLYNG,(char *)c_tmp_undrlying,
                                    		  FFO_XCHNG_CD,(char *)c_xchng_cd,
     		                                  FFO_EXPRY_DT,(char *)" ",
        		                              FFO_OPT_TYP,(char *)&c_null,
            		                          FFO_STRK_PRC,(char *)&l_null,
                		                      FFO_EXER_TYP,(char *)&c_null,
                    		                  FFO_CNTRCT_TAG,(char *)&c_null,
                        		              FFO_C_OPNPSTN_QTY,(char *)&l_grp_opn_qty,
                            		          FFO_C_OPNPSTN_FLW,(char *)&c_grp_opn_flw,
                                		      FFO_CVR_QTY,(char *)&l_null,
                                    		  FFO_LST_TRD_PRC,(char *)&l_null,
                                      		FFO_UI_BUY_QTY,(char *)&l_null,
                                      		FFO_UI_SELL_QTY,(char *)&l_null,
  		                                    FFO_MIN_LOT_QTY,(char *)&l_null,
      		                                /** FFO_STP_LSS_TGR,(char *)&l_null, commented in 2.9  **/
                                          FFO_STP_LSS_TGR,(char *)&li_stp_lss_tgr_prc, /** ver 2.9 **/ 
          		                            FFO_LMT_RT,(char *)&l_null,
              		                        FFO_ORDR_FLW,(char *)&c_null,
                  		                    FFO_PSTN_AMT_BLKD,(char *)&d_null,
                      		                FFO_C_MTM_OPN_VAL,(char *)&d_null,
                          		            FFO_U_IMTM_SPRD_PL,(char *)&d_null,
						FFO_EFF_CLS_PRC, (char *) &d_null, /*** Ver 4.0 ***/
                              		        FFO_AMOUNT,(char *)&d_grp_trd_mrgn,
                                  		    FFO_U_ORDR_MRGN,(char *)&d_null,
                                      		FFO_U_MM_TRD_MRGN,(char *)&d_null,
    		                                  FFO_BAL_AMT,(char *)&d_null,
						      												FFO_UNRLZD_PL,(char *)&d_grp_pl,
            		                          FFO_DWL_FLG,(char *)&c_addmrgn_flg,
                		                      FFO_SPL_FLG,(char *)&c_null,
                    		                  FFO_STATUS_FLG,(char *)&c_null,
                        		              FFO_QT_TRDNG_FLG,(char *)&c_null,
																					FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flag,     /***  Ver 2.3 ***/
                            		          FFO_FUT_CONV_FLG,(char *)&c_null,
                                		      FFO_MTM_FLG,(char *)&c_mtm_flg,
                                    		  FFO_MOD_CAN_FLG,(char *)&c_null,
		                                      FFO_IS_FLG,(char *)&c_null,
    		                                  FFO_RQST_TYP,(char *)&c_spl_flg,
        		                              FFO_COUNTER,(char *)&i_tag_cnt,
            		                          FFO_ORDR_RFRNC,(char *)"",
																				  FFO_CURR_RT, (char *)&l_null,                  /*** ver 1.2 ***/
                                          FFO_DAM_TRNSCTN, (char *)&c_null,    /*** Ver 1.3 ***/
                                      		FFO_STLMNT_TYP, (char *)&c_null,      /*** Ver 1.3 ***/
                                      		FFO_DLVRY_ALLWD, (char *)&c_null,  /*** Ver 1.3 ***/
                                      		FFO_ORD_TYP, (char *)&c_null,       /*** Ver 1.3 ***/
                                      		FFO_BOARD_LOT_QTY, (char *)&l_null, /*** Ver 1.3 ***/
                                      		FFO_TMPLT, (char *)&l_null,       /*** Ver 1.3 ***/
                                      		FFO_XCHNG_CAN_QTY, (char *)&l_null, /*** Ver 1.3 ***/
                                      		FFO_EX_ORDR_TYP, (char *)&c_null,       /*** Ver 1.3 ***/
                                      		FFO_ORD_TOT_QTY, (char *)&l_null,       /*** Ver 1.3 ***/
                                      		FFO_FUT_PRC, (char *)&d_null,            /*** Ver 1.3 ***/
                                      		FFO_PLG_ORDR_RFRNC, (char *)"",    /*** Ver 1.3 ***/
                                      		FFO_EXRC_STTS, (char *)&c_null,   /*** Ver 1.3 ***/
                                          FFO_RMS_PRCSD_FLG, (char *)&c_null,            /*** Ver 1.4 ***/
                                          FFO_DR_CR_FLG, (char *)&c_null,                /*** Ver 1.5 ***/
																					FFO_NKD_BLKD_FLG, (char *)&c_null,                   /*** Ver 1.6 ***/
                                          FFO_UPLD_MTCH_FLG, (char *)&c_null,   /*** Ver 1.7 ***/
                                          FFO_EXRC_QTY, (char *)&l_null,        /*** Ver 1.7 ***/
                                          FFO_ORD_VALID_DT, (char *)" ",         /*** Ver 1.7 ***/
                                          FFO_EBA_STTS, (char *)&c_null,         /*** Ver 1.7 ***/
                                          FFO_BK_UBK_FLG,(char *)&c_null,        /*** Ver 2.1 **/
                                          FFO_ND_STRT_DT, (char *)"", /*** Ver 2.2 ***/
                                          FFO_ND_END_DT, (char *)"",  /*** Ver 2.2 ***/
                                          FFO_SO_AMT_BLKD, (char *)&d_null, /** Ver 2.4 **/
                                          FFO_OPNPSTN_VAL, (char *)&d_null, /** Ver 2.4 **/
                                          FFO_INDX_INDCTR, (char *)&c_null,     /*** Ver 3.5 ***/
                                          /*** FFO_STLMNT_TYP, (char *)&c_null       *** Ver 3.5 *** Ver 3.8 **/
                                          FFO_BNK_STTS, (char *)&c_null       /*** Ver 3.8 ***/
                                        );				

    		if ( i_returncode == -1 )
    		{
      		fn_errlog( c_ServiceName, "S31150", FMLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor;  /*** Ver 3.4 ***/
					EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

    		c_mtm_flg = '\0';
    		c_addmrgn_flg = '\0';
    		c_grp_opn_flw = '\0';
    		l_grp_opn_qty = 0;
    		d_grp_ord_mrgn = 0.0;
				d_grp_pl  = 0.0;
    		d_grp_trd_mrgn = 0.0;
    		i_grp_cnt =0;
				d_und_avail_mrgn = 0.0;
				d_umin_trd_mrgn = 0.0;
				d_tot_profit_loss= 0.0;

    		l_qty = 0;
    		i_non_Obuy_count = 0;
    		i_pstn_count = 0;
				l_merge_counter = 0;
  		}

			if( c_prd_typ == 'F' || c_prd_typ == 'O')
			{
   			rtrim(c_undrlyng);
				l_base_prc = 0;
      	l_lst_trdd_prc = 0;
      	c_addmrgn_flg = '\0';
      	c_sqroff_flg = '\0';
      	c_rollover_flag = '\0';
				c_sprd_roll_flag = '\0'; 		/*** Ver 2.3 ***/
      	c_conv_flg  = '\0';
      	c_mtm_flg   = '\0';
      	c_mod_can_flg = '\0';
        d_ordr_mrgn = 0.0;     /*** Ver 1.8 ***/
				c_setlmnt_flg = '\0';  /*** Ver 2.1 ***/
	
				i_tag_cnt++;
 			
				if(strcmp(c_undrlyng,c_prev_undrlyng) == 0)
				{
					i_tag_cnt = i_prev_tag_cnt;
				}

      	EXEC SQL
       		SELECT 	nvl(FTQ_LST_TRD_PRC,0),
          		    nvl(FTQ_CLS_PRC,0),
									FTQ_MIN_LOT_QTY,																			/*** Added in Ver 1.1 ***/	
                  DECODE(:c_prd_typ,'P','Q',NVL(FTQ_ROLLOVER_FLAG,'Q')),/*** Added in Ver 1.1 ***/
									NVL(FTQ_SETLMNT_FLG,'C')															/*** Added in Ver 2.1 ***/
       		INTO    :l_lst_trdd_prc,
              	  :d_clsng_prc,
									:l_lot_size,																					/*** Added in Ver 1.1 ***/
                  :c_rollover_flag,																			/*** Added in Ver 1.1 ***/
									:c_setlmnt_flg																				/*** Added in Ver 2.1 ***/
       		FROM    FTQ_FO_TRD_QT
       		WHERE   FTQ_XCHNG_CD = :c_xchng_cd
     			AND     FTQ_PRDCT_TYP = :c_prd_typ 
       		/** AND     trim(FTQ_UNDRLYNG) = :c_undrlyng ** 3.6 **/
          AND     FTQ_UNDRLYNG = :c_undrlyng  /** trim Remove in Ver 3.6 **/
          AND    	FTQ_EXER_TYP = :c_exrc_typ
       		AND     FTQ_OPT_TYP = :c_opt_typ
       		AND     FTQ_STRK_PRC = :l_strike_prc
       		AND     FTQ_EXPRY_DT = :c_expry_dt;

    		if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ))
    		{
      		fn_errlog( c_ServiceName, "S31155", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor;  /*** Ver 3.4 ***/  
					EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}
    		else if ( SQLCODE == NO_DATA_FOUND )
    		{
     			l_lst_trdd_prc = 0;
    		}
				/*** Add starts in ver 2.3 ***/
				if(c_prd_typ == 'F')
				{
					EXEC SQL
							SELECT NVL(FUM_ROLLOVER_SPRD_ALLWD_FLG,'N')
      				INTO   :c_sprd_roll_flag
      				FROM   FUM_FO_UNDRLYNG_MSTR
      				WHERE  FUM_XCHNG_CD   = :c_xchng_cd
      				AND    FUM_UNDRLYNG   = :c_undrlyng
      				AND    FUM_PRDCT_TYP  = :c_prd_typ;

					if( SQLCODE != 0 )
					{
						fn_errlog( c_ServiceName, "S31160", SQLMSG, c_err_msg  );
            /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
            EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :sys_cursor;  /*** Ver 3.4 ***/
						EXEC SQL FREE :cur_spn_pstn;
						tpfree ( ( char * ) ptr_fml_Obuf );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
				}
				/*** Add Ends in ver 2.3 ***/

        if(DEBUG_MSG_LVL_3)  /** ver 4.1 debug level changed to 3 **/
        {
         fn_userlog(c_ServiceName,"FTQ Lot Size :%ld:",l_lot_size);
         fn_userlog(c_ServiceName,"FTQ Rollover Flag :%c:",c_rollover_flag);
  			 fn_userlog(c_ServiceName,"FUM_ROLLOVER_SPRD_ALLWD_FLG :%c:",c_sprd_roll_flag); /*** Ver 2.3 ***/
				 fn_userlog(c_ServiceName,"FTQ Physical Settlement Flag :%c",c_setlmnt_flg);  /** Added in Ver 2.1 **/
        }

				if( DEBUG_MSG_LVL_0 )
				{
					fn_userlog(c_ServiceName,"c_prd_typ :%c:,c_undrlyng :%s:,c_exrc_typ :%c:,c_opt_typ :%c:,l_strike_prc :%ld:,c_expry_dt :%s:",c_prd_typ,c_undrlyng,c_exrc_typ,c_opt_typ,l_strike_prc,c_expry_dt);
				}

			/*** Commented in Ver 1.1  Fetching Lot size, Roll over Flag in Above fetch ***

    		EXEC SQL
      		SELECT  FCM_LOT_SZ,
           		    DECODE(:c_prd_typ,'P','Q',NVL(FCM_ROLLOVER_FLAG,'Q'))
      		INTO    :l_lot_size,
        		      :c_rollover_flag
      		FROM    FCM_FO_CNTRCT_MSTR
      		WHERE   FCM_XCHNG_CD  = :c_xchng_cd
      		AND     FCM_PRDCT_TYP = decode(:c_prd_typ, 'P', 'F','U','F','I','O', :c_prd_typ)
      		AND     FCM_UNDRLYNG  = :c_undrlyng
      		AND     FCM_EXER_TYP  = :c_exrc_typ
      		AND     FCM_OPT_TYP   = :c_opt_typ
      		AND     FCM_STRK_PRC = :l_strike_prc
      		AND     FCM_EXPRY_DT  = :c_expry_dt;

    		if( SQLCODE != 0)
    		{
      		fn_errlog( c_ServiceName, "S31165", SQLMSG, c_err_msg  );
          EXEC SQL CLOSE sys_spn_cur;  
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

      *** Ver 1.1 Comment Ends ***/

				EXEC SQL
					/*** Commented in Ver 2.3 ***
					SELECT   FUS_INDSTK,
      	 		       FUS_UOPNPSTN_FLW,
        	   		   abs(FUS_UOPNPSTN_QTY),
          	   		 FUS_INITIAL_MRGN + FUS_BLCKD_PL ,
            	 		 NVL(FUS_MIN_MRGN,0),
               		 FUS_MTM_FLG
    			INTO     :c_uindstk,
          		     :c_uopnpstn_flw,
               		 :l_uopnpstn_qty,
             		   :d_utrd_mrgn,
               		 :d_umin_trd_mrgn,
              		 :c_mtm_flag
      		FROM     FUS_FO_UNDRLYNG_SPN_PSTN
      		WHERE    FUS_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      		AND      FUS_XCHNG_CD = :c_xchng_cd
      		AND      FUS_UNDRLYNG = :c_undrlyng;
					**** Ver 2.3 ***/
					/*** Add starts in Ver 2.3 ***/
          SELECT  FUS_INDSTK,
                  FUS_UOPNPSTN_FLW,
                  abs(FUS_UOPNPSTN_QTY),
                  FUS_INITIAL_MRGN + FUS_BLCKD_PL ,
                  NVL(FUS_MIN_MRGN,0),
                  FUS_MTM_FLG,
                  NVL(sum(FOD_SROLL_DIFF_AMT),0) + NVL(sum(FOD_SROLL_LSS_AMT),0)
          INTO    :c_uindstk,
                  :c_uopnpstn_flw,
                  :l_uopnpstn_qty,
                  :d_utrd_mrgn,
                  :d_umin_trd_mrgn,
                  :c_mtm_flag,
                  :d_sroll_diff_amt     
          FROM    FUS_FO_UNDRLYNG_SPN_PSTN, FOD_FO_ORDR_DTLS    
          WHERE   FUS_CLM_MTCH_ACCNT = :c_mtch_accnt_no
          AND     FUS_XCHNG_CD = :c_xchng_cd
          AND     FUS_UNDRLYNG = :c_undrlyng
					AND			FOD_SPL_FLAG(+) = 'O'
          AND     FUS_CLM_MTCH_ACCNT  = FOD_CLM_MTCH_ACCNT(+)  
          AND     FUS_XCHNG_CD  = FOD_XCHNG_CD(+)             
          AND     FUS_UNDRLYNG  = FOD_UNDRLYNG(+)            
          GROUP By FUS_INDSTK,FUS_UOPNPSTN_FLW,
                  abs(FUS_UOPNPSTN_QTY),
                  FUS_INITIAL_MRGN + FUS_BLCKD_PL ,
                  NVL(FUS_MIN_MRGN,0),FUS_MTM_FLG;          
					/*** Add Ends in Ver 2.3 ***/
					

    		if( SQLCODE != 0)
    		{
      	 	fn_errlog( c_ServiceName, "S31170", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor;  /*** Ver 3.4 ***/
					EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
       		tpfree ( ( char * ) ptr_fml_Obuf );
       		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				d_utrd_mrgn = d_utrd_mrgn + d_sroll_diff_amt;   /*** ver 2.3 ***/

		/****  At contract level "Total PnL" is not available to calculate "Available Margin" and incorrect margin was getting calculated on respective contract PnL ***  Below code condition is written to calculate  "Total PnL" and "Available Margin" at  first contract itself ***/

				if(i_pstn_count == 0)
				{
					if( DEBUG_MSG_LVL_3 )  /** ver 4.1 debug level changed to 3 **/
					{
		 				fn_userlog(c_ServiceName,"Inside Available Margin cal condition");	
					}
		
			 		EXEC SQL EXECUTE
	 		 				BEGIN
	 		 				OPEN  	:cur_spn_pstn FOR
	 						SELECT  FCP_PRDCT_TYP,
	 										FCP_INDSTK,FCP_UNDRLYNG, 
	 										FCP_EXPRY_DT,
	 										FCP_EXER_TYP,
	 										FCP_STRK_PRC,
	 										FCP_OPT_TYP,
			 								FCP_OPNPSTN_FLW,
	 										abs(FCP_OPNPSTN_QTY),
	 										FCP_MTM_OPN_VAL
	 						FROM 		FCP_FO_SPN_CNTRCT_PSTN
	 						WHERE 	FCP_CLM_MTCH_ACCNT =:c_mtch_accnt_no
	 						AND 		FCP_XCHNG_CD = :c_xchng_cd
	 						AND 		FCP_PRDCT_TYP in ('F','O')
	 						/** AND 		trim(FCP_UNDRLYNG)  = :c_undrlyng ** 3.6 **/
              AND     FCP_UNDRLYNG  = :c_undrlyng /** trim Remove in Ver 3.6 **/
	 						AND 		(	FCP_OPNPSTN_QTY != 0			/***	Ver 1.7	condition uncommented and OR introduced	***/
							OR				FCP_IBUY_QTY    != 0			
							OR				FCP_ISELL_QTY   != 0
											);
			 		END;
			 		END-EXEC;
		
					if( SQLCODE != 0 )
    			{
      			fn_errlog( c_ServiceName, "S31175", SQLMSG, c_err_msg  );
      			EXEC SQL CLOSE :cur_spn_pstn;
						EXEC SQL FREE :cur_spn_pstn;
            /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
            EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :sys_cursor;  /*** Ver 3.4 ***/
      			tpfree ( ( char * ) ptr_fml_Obuf );
      			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    			}
					
		  		for ( ; ; )
    			{

						d_profit_loss = 0.0;
						l_strike_prc_u = 0;
						l_opnpstn_qty_u = 0;
						d_mtm_opn_val_u = 0.0;

						EXEC SQL
          		FETCH :cur_spn_pstn
          		INTO 	:c_prd_typ_u,
            		   	:c_ctgry_indstk_u,
               			:c_undrlyng_u,
               			:c_expry_dt_u,
               			:c_exrc_typ_u,
               			:l_strike_prc_u,
               			:c_opt_typ_u,
               			:c_opnpstn_flw_u,
               			:l_opnpstn_qty_u,
               			:d_mtm_opn_val_u;

						if ( SQLCODE != 0 )
      			{
        			if ( SQLCODE == NO_DATA_FOUND )
        			{
								fn_userlog(c_ServiceName,"Inside cur_spn_pstn NO_DATA_FOUND.");
								break;
							}

							fn_errlog( c_ServiceName, "S31180", SQLMSG, c_err_msg  );
          		EXEC SQL CLOSE :cur_spn_pstn;
          		EXEC SQL FREE :cur_spn_pstn;
              /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
              EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
              EXEC SQL FREE :sys_cursor;  /*** Ver 3.4 ***/
          		tpfree ( ( char * ) ptr_fml_Obuf );
          		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}

      			rtrim(c_undrlyng_u);
      			rtrim(c_expry_dt_u);

						if(DEBUG_MSG_LVL_3)
						{
							fn_userlog(c_ServiceName,"c_prd_typ_u :%c:",c_prd_typ_u);
							fn_userlog(c_ServiceName,"c_ctgry_indstk_u :%c:",c_ctgry_indstk_u);
							fn_userlog(c_ServiceName,"c_undrlyng_u :%s:",c_undrlyng_u);
							fn_userlog(c_ServiceName,"c_expry_dt_u :%s:",c_expry_dt_u);
							fn_userlog(c_ServiceName,"c_exrc_typ_u :%c:",c_exrc_typ_u);
							fn_userlog(c_ServiceName,"l_strike_prc_u :%ld:",l_strike_prc_u);
							fn_userlog(c_ServiceName,"c_opt_typ_u :%c:",c_opt_typ_u);
							fn_userlog(c_ServiceName,"c_opnpstn_flw_u :%c:",c_opnpstn_flw_u);
							fn_userlog(c_ServiceName,"l_opnpstn_qty_u :%ld:",l_opnpstn_qty_u);
							fn_userlog(c_ServiceName,"d_mtm_opn_val_u :%lf:",d_mtm_opn_val_u);
							fn_userlog(c_ServiceName,"c_sqroffmkt_flg:%c:",c_sqroffmkt_flg);     /** Ver 1.4 **/
						}
				

			  		EXEC SQL
       					SELECT 	nvl(FTQ_LST_TRD_PRC,0),
              					nvl(FTQ_CLS_PRC,0)
       					INTO   :l_lst_trdd_prc_u,
              				 :d_clsng_prc_u
       					FROM   FTQ_FO_TRD_QT
       					WHERE  FTQ_XCHNG_CD = :c_xchng_cd
       					AND    FTQ_PRDCT_TYP = :c_prd_typ_u
       					/** AND    trim(FTQ_UNDRLYNG) = :c_undrlyng_u ** 3.6 **/
                AND    FTQ_UNDRLYNG = :c_undrlyng_u  /** trim Remove in Ver 3.6 **/
       					AND    FTQ_EXER_TYP = :c_exrc_typ_u
       					AND    FTQ_OPT_TYP = :c_opt_typ_u
       					AND    FTQ_STRK_PRC = :l_strike_prc_u
       					AND    FTQ_EXPRY_DT = :c_expry_dt_u;
				
			  		if( SQLCODE != 0)
       			{
        			fn_errlog( c_ServiceName, "S31185", SQLMSG, c_err_msg  );
        			EXEC SQL CLOSE :cur_spn_pstn;
        			EXEC SQL FREE :cur_spn_pstn;
              /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
              EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
              EXEC SQL FREE :sys_cursor;  /*** Ver 3.4 ***/
        			tpfree ( ( char * ) ptr_fml_Obuf );
        			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			}
	
						if( DEBUG_MSG_LVL_3 )
						{
							fn_userlog(c_ServiceName,"l_lst_trdd_prc_u :%lf:",l_lst_trdd_prc_u);
							fn_userlog(c_ServiceName,"d_clsng_prc_u :%lf:",d_clsng_prc_u);
						}

        		EXEC SQL
      					SELECT decode(:l_opnpstn_qty_u, 0, 0, ( abs(:d_mtm_opn_val_u)/ :l_opnpstn_qty_u) )
      					INTO :l_base_prc_u
      					FROM  dual;

						if ( l_opnpstn_qty_u != 0 )   /***  Notional Profit / Loss Calculation Contractwise  ***/
    				{
      				if (c_prd_typ_u == 'O' && c_opnpstn_flw_u == BUY )  /*** For option Buy position Notional profit loss is Zero ***/
      				{
        				d_profit_loss = 0;
      				}
      				else if (c_prd_typ_u == 'O' && c_opnpstn_flw_u == SELL )
      				{
          			d_profit_loss = (double) l_opnpstn_qty_u  * ( d_clsng_prc_u - (double) l_lst_trdd_prc_u );
      				}
      				else if (c_prd_typ_u == 'F')
      				{
        				if(c_opnpstn_flw_u == BUY)
        				{
          				d_profit_loss = ( (double) l_lst_trdd_prc_u - (double) l_base_prc_u ) * (double) l_opnpstn_qty_u ;
        				}
        				else if (c_opnpstn_flw_u == SELL)
        				{
          				d_profit_loss = ( (double) l_base_prc_u - (double) l_lst_trdd_prc_u ) * (double) l_opnpstn_qty_u ;
        				}
      				}

						i_pstn_count++;

    				}

						if( DEBUG_MSG_LVL_3 )
						{
							fn_userlog(c_ServiceName,"d_profit_loss :%lf:",d_profit_loss);
						}

						d_tot_profit_loss = d_tot_profit_loss + d_profit_loss;
					
						l_merge_counter= l_merge_counter + 1 ;

					}  /** End of Inner for loop **/

					if( DEBUG_MSG_LVL_3 )
					{
						fn_userlog(c_ServiceName,"d_tot_profit_loss :%lf:",d_tot_profit_loss);
						fn_userlog(c_ServiceName,"d_utrd_mrgn :%lf:",d_utrd_mrgn);
						fn_userlog(c_ServiceName,"i_pstn_count :%d:",i_pstn_count);
					}

					EXEC SQL CLOSE :cur_spn_pstn;    /*** Ver 2.0 ***/

					if(i_pstn_count != 0)
					{
    				if ( d_tot_profit_loss > 0 )
    				{
      				d_und_avail_mrgn = d_utrd_mrgn;
    				}
    				else
    				{
      				d_und_avail_mrgn = d_utrd_mrgn + d_tot_profit_loss;
    				}
					}
					else
					{
						d_umin_trd_mrgn = 0.0;
						d_und_avail_mrgn = 0.0;
					}
				}	
				/*** Add starts in ver 2.3 ***/
				if(c_prd_typ == 'F')
				{
          EXEC SQL
            SELECT  b_qty,
              s_qty
            INTO  :l_buy_qty,
              :l_sell_qty
            FROM
              (select nvl(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0) b_qty
              from fod_fo_ordr_dtls
              where FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
              and FOD_PRDCT_TYP=:c_prd_typ
              and FOD_UNDRLYNG=:c_undrlyng
              and FOD_EXPRY_DT=:c_expry_dt
              and FOD_SPL_FLAG='O'
              and FOD_ORDR_FLW='B'
              and FOD_ORDR_STTS in ('P','O','R','Q')
              ) A,
              (select nvl(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0) s_qty
              from fod_fo_ordr_dtls
              where FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
              and FOD_PRDCT_TYP=:c_prd_typ
              and FOD_UNDRLYNG=:c_undrlyng
              and FOD_EXPRY_DT=:c_expry_dt
              and FOD_SPL_FLAG='O'
              and FOD_ORDR_FLW='S'
              and FOD_ORDR_STTS in ('P','O','R','Q')
              ) B;
          if( SQLCODE != 0 )
          {
            fn_errlog( c_ServiceName, "S31190", SQLMSG, c_err_msg  );
            /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
            EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :sys_cursor;  /*** Ver 3.4 ***/
            EXEC SQL FREE :cur_spn_pstn;
            tpfree ( ( char * ) ptr_fml_Obuf );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
          l_ibuy_qty = l_ibuy_qty + l_buy_qty;
          l_isell_qty = l_isell_qty + l_sell_qty;
        	if(c_uopnpstn_flw == 'B')
        	{
          	l_cvr_qty = l_cvr_qty + l_sell_qty;
        	}
        	if(c_uopnpstn_flw == 'S')
        	{
          	l_cvr_qty = l_cvr_qty + l_buy_qty;
        	}
          if( DEBUG_MSG_LVL_3 )
          {
        		fn_userlog(c_ServiceName,"l_cvr_qty:%ld: l_buy_qty:%ld: l_sell_qty:%ld l_ibuy_qty:%ld: l_isell_qty:%ld:",l_cvr_qty,l_buy_qty,l_sell_qty,l_ibuy_qty,l_isell_qty);
					}
				}
        if( DEBUG_MSG_LVL_3 )
        {
					fn_userlog(c_ServiceName,"l_opnpstn_qty:%ld: l_cvr_qty:%ld:",l_opnpstn_qty,l_cvr_qty);
				}
        /*** Ver 2.3 Ends ***/
    		if ( (l_opnpstn_qty - l_cvr_qty) <= 0 )
    		{
      		c_rollover_flag = 'Q';
          /*** Ver 2.3 Starts ***/
          c_sprd_roll_flag = 'N';
          c_sqroff_flg = 'N';
          c_sqroffmkt_flg = 'N';
          c_conv_flg = 'N';
          /*** Ver 2.3 Ends ***/
    		}

				if( DEBUG_MSG_LVL_3 )
				{
    			fn_userlog(c_ServiceName,"Rollover Flag :%c:",c_rollover_flag);
					fn_userlog(c_ServiceName,"c_sprd_roll_flag :%c: c_sqroff_flg:%c: c_sqroffmkt_flg:%c: c_conv_flg:%c:",c_sprd_roll_flag,c_sqroff_flg,c_sqroffmkt_flg,c_conv_flg);  /*** Ver 2.3 ***/
				}

    		if ( c_opnpstn_flw == BUY )
    		{
    			d_curr_cnt_opn_val = ((double)l_lst_trdd_prc * (double)l_opnpstn_qty);
    			l_und_buy_opn_qty  = l_und_buy_opn_qty + l_opnpstn_qty;
    		}
    		else
    		{
    			d_curr_cnt_opn_val = ((double)l_lst_trdd_prc * (double)l_opnpstn_qty * (-1));
    			l_und_sell_opn_qty = l_und_sell_opn_qty + l_opnpstn_qty;
    		}

    		d_curr_uopn_val = d_curr_uopn_val + d_curr_cnt_opn_val;

    		EXEC SQL
      		SELECT decode(:l_opnpstn_qty, 0, 0, ( abs(:d_mtm_opn_val)/ :l_opnpstn_qty) )
      		INTO :l_base_prc
      		FROM  dual; 
 
				if(DEBUG_MSG_LVL_3)
    		{
    			fn_userlog(c_ServiceName,"l_base_prc  is :%ld:",l_base_prc);
      		fn_userlog(c_ServiceName,"d_clsng_prc  Is :%lf:",d_clsng_prc);
      		fn_userlog(c_ServiceName,"l_lst_trdd_prc  Is :%ld:",l_lst_trdd_prc);
    		}

    		if ( l_opnpstn_qty != 0 )   /***  Notional Profit / Loss Calculation Contractwise  ***/
    		{
      		if (c_prd_typ == 'O' && c_opnpstn_flw == BUY )  /*** For option Buy position Notional profit loss is Zero ***/
      		{
        		d_profit_loss = 0;
      		}
      		else if (c_prd_typ == 'O' && c_opnpstn_flw == SELL ) 
      		{
          	d_profit_loss = (double) l_opnpstn_qty  * ( d_clsng_prc - (double) l_lst_trdd_prc );
      		}
      		else if (c_prd_typ == 'F')
      		{
        		if(c_opnpstn_flw == BUY)
        		{
          		d_profit_loss = ( (double) l_lst_trdd_prc - (double) l_base_prc ) * (double) l_opnpstn_qty ;
        		}
        		else if (c_opnpstn_flw == SELL)
        		{
          		d_profit_loss = ( (double) l_base_prc - (double) l_lst_trdd_prc ) * (double) l_opnpstn_qty ;
        		}
      		}
    		}

    		if( (c_prd_typ == 'O' && c_opnpstn_flw == 'S') || c_prd_typ == 'F' )
    		{
      		fn_userlog(c_ServiceName,"----Inside Non Option Buy COndition----");
      		i_non_Obuy_count++;
    		}

    		if( DEBUG_MSG_LVL_3 )  /** ver 4.1 debug level changed to 3 **/ {
    			fn_userlog(c_ServiceName,"------Printing while each contract fetch----");
    			fn_userlog(c_ServiceName,":i_non_Obuy_count:  :%d:",i_non_Obuy_count);
    			fn_userlog(c_ServiceName,":i_pstn_count:  :%d:",i_pstn_count);
    			fn_userlog(c_ServiceName,"c_undrlyng:%s:",c_undrlyng);
    		}

    		if( DEBUG_MSG_LVL_3 ) {
      		fn_userlog(c_ServiceName,"***Packing contract level data for:%s:%s***",c_mtch_accnt_no,c_undrlyng);
      		fn_userlog(c_ServiceName,"c_xchng_cd:%s:",c_xchng_cd);
      		fn_userlog(c_ServiceName,"c_prd_typ:%c:",c_prd_typ);
      		fn_userlog(c_ServiceName,"c_undrlyng:%s:",c_undrlyng);
      		fn_userlog(c_ServiceName,"c_exrc_typ:%c:",c_exrc_typ);
      		fn_userlog(c_ServiceName,"c_opt_typ:%c:",c_opt_typ);
      		fn_userlog(c_ServiceName,"l_strike_prc:%ld:",l_strike_prc);
      		fn_userlog(c_ServiceName,"c_expry_dt:%s:",(char*)c_expry_dt);
      		fn_userlog(c_ServiceName,"bhushan2 base price :%ld",l_base_prc );
      		fn_userlog(c_ServiceName,"bhushan2 profit Loss :%lf",d_profit_loss );
      		fn_userlog(c_ServiceName,"Open pstn qty is :%ld:",l_opnpstn_qty);
      		fn_userlog(c_ServiceName,"d_mtm_opn_val is :%lf:",d_mtm_opn_val);
      		fn_userlog(c_ServiceName,"Last traded price is |%ld|",l_lst_trdd_prc);
      		fn_userlog(c_ServiceName,"Open pstn flow is |%c|",c_opnpstn_flw);
      		fn_userlog(c_ServiceName,"Open Position value of contract is |%lf|",d_curr_cnt_opn_val);
    		}

      	if( abs(l_opnpstn_qty) - abs(l_cvr_qty) > 0)
      	{	
					if(c_prd_typ != 'O')
					{
       			c_conv_flg ='F';
       		}

					c_sqroff_flg = 'Y';
      	}

				if(d_utrd_mrgn !=0 && i_pstn_count > 0)
				{
        	c_addmrgn_flg = 'Y';
        	c_mtm_flg = 'Y';
      	}
      	else
      	{
        	c_addmrgn_flg = 'N';
        	c_mtm_flg = 'N';
      	}

      	if(DEBUG_MSG_LVL_3)
      	{
        	fn_userlog( c_ServiceName,"SPAN l_opnpstn_qty is |%ld|",l_opnpstn_qty);
        	fn_userlog(c_ServiceName,":Inside Underlying change :");
        	fn_userlog(c_ServiceName,":i_non_Obuy_count:  :%d:",i_non_Obuy_count);
        	fn_userlog(c_ServiceName,":i_pstn_count:  :%d:",i_pstn_count);
        	fn_userlog(c_ServiceName,":l_ibuy_qty:  :%ld:",l_ibuy_qty);
        	fn_userlog(c_ServiceName,":l_isell_qty:  :%ld:",l_isell_qty);
					fn_userlog( c_ServiceName,"Special Flag |%c|",c_spl_flg);
					fn_userlog( c_ServiceName,"c_mtm_flag Flag |%s|",c_mtm_flag);
					fn_userlog( c_ServiceName,"c_ctgry_indstk is |%c|",c_ctgry_indstk);
					fn_userlog( c_ServiceName,"l_uopnpstn_qty is |%ld|",l_uopnpstn_qty);
					fn_userlog( c_ServiceName,"Margin on position is |%lf|",d_utrd_mrgn);
					fn_userlog( c_ServiceName,"Margin on Order is |%lf|",d_ordr_mrgn);
					fn_userlog( c_ServiceName,"Total Buy Order Qty is |%ld|",l_ibuy_qty);
					fn_userlog( c_ServiceName,"Total Sell Ordr Qty is |%ld|",l_isell_qty);
					fn_userlog( c_ServiceName,"Min Margin amount is |%lf|",d_umin_trd_mrgn);
					fn_userlog( c_ServiceName,"Total profit Loss is |%lf|",d_profit_loss);
					fn_userlog( c_ServiceName,"Available Margin is |%lf|",d_und_avail_mrgn);

					fn_userlog( c_ServiceName,"SPAN c_addmrgn_flg :%c:",c_addmrgn_flg);
					fn_userlog( c_ServiceName,"SPAN c_sqroff_flg :%c:",c_sqroff_flg);
					fn_userlog( c_ServiceName,"SPAN c_rollover_flag :%c:",c_rollover_flag);
					fn_userlog( c_ServiceName,"SPAN Rollover SPREAD Flag :%c:",c_sprd_roll_flag);  /*** Ver 2.3 ***/
					fn_userlog( c_ServiceName,"SPAN c_conv_flg :%c:",c_conv_flg);
					fn_userlog( c_ServiceName,"SPAN c_mtm_flg :%c:",c_mtm_flg);
					fn_userlog( c_ServiceName,"SPAN Record l_merge_counter :%ld:",l_merge_counter);
					fn_userlog(c_ServiceName,":c_sqroffmkt_flg:%c:",c_sqroffmkt_flg);     /** Ver 1.4 **/
					fn_userlog(c_ServiceName,"SPAN Physical Settlment Flag :%c:",c_setlmnt_flg); /** Ver 2.1 **/

					fn_userlog(c_ServiceName,"*******************************************************");
				}

				c_spl_flg = CONTRACT_IP;

				if( DEBUG_MSG_LVL_3 )
				{
					fn_userlog(c_ServiceName,"c_undrlyng :%s:,c_prd_typ :%c:,c_expry_dt :%s:,i_tag_cnt :%d:",
											c_undrlyng,c_prd_typ,c_expry_dt,i_tag_cnt);
				}

			/*** Ver 1.2 Starts ***/

			if ( c_prd_typ == 'O') 
			{

        d_var_mrgn = 0.0;                       /** Ver 2.4 **/
        d_elm_mrgn = 0.0;                       /** Ver 2.4 **/
        d_dlvry_min_mrgn_prcnt = 0.0;           /** Ver 2.4 **/
        d_ISec_buff_mrgn_prcnt = 0.0;           /** Ver 2.4 **/
        d_current_dlvry_mrgn_prcnt = 0.0;       /** Ver 2.4 **/
        d_cntrct_val = 0.0;                     /** Ver 2.4 **/
        d_new_dlvry_mrgn = 0.0;                 /** Ver 2.4 **/
        d_dlvry_mrgn_req =0.0;                  /** Ver 2.4 **/
        d_mrggn_value    =0.0;                  /** Ver 2.4 **/
        i_crnt_mnth_flg =0;                     /** Ver 2.4 **/   
        c_tmp_prdct_typ = '\0';                 /** Ver 2.4 **/ 
        MEMSET(c_ltq_dt);                       /** Ver 2.4 **/ 
        l_spot_prc_tmp = 0;                     /** Ver 2.4 **/
        l_cls_prc = 0;                          /** Ver 2.4 **/
         
      
				EXEC SQL
      		SELECT ltq_rt * 100,
          NVL(LTQ_CLS_PRC,0) * 100,
          NVL(to_char(LTQ_DT,'DD-Mon-YYYY'),'NA')
      		into :l_spot_prc,
               :l_cls_prc, /** Ver 2.4 **/
               :c_ltq_dt  /** Ver 2.4 **/
      		FROM ltq_trd_qt
      		WHERE LTQ_STCK_CD = :c_undrlyng
      		AND LTQ_XCHNG_CD = DECODE(:c_xchng_cd,'NFO','NSE','BFO','BSE');	
		
			 	if( SQLCODE != 0) 
        {
          fn_errlog( c_ServiceName, "S31195", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Ver 2.0 *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/ 
          EXEC SQL FREE :sys_cursor;  /*** Ver 3.4 ***/ 
          EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if( DEBUG_MSG_LVL_3 )
        {	
				 fn_userlog(c_ServiceName, "SPAN Opn...Underlying:%s    Spot Price:%ld", c_undrlyng,l_spot_prc);
        }

      /** Ver 2.4 Started **/
       if((c_setlmnt_flg == 'P') && (c_opnpstn_flw == BUY))
       {     
        if( DEBUG_MSG_LVL_3 )
        {
         fn_userlog(c_ServiceName, "DELIVERY MARGIN COMPUTAION STARTS FOR SPAN");
        }
        c_tmp_prdct_typ = 'F';
        MEMSET(c_tmp_undlyn);
        strcpy(c_tmp_undlyn ,"NIFTY");       

        EXEC SQL
        SELECT 1
        INTO :i_crnt_mnth_flg
        FROM DUAL
        WHERE to_date(:c_expry_dt,'DD-Mon-YYYY') =(
        SELECT MIN(FTQ_EXPRY_DT)
        FROM  FTQ_FO_TRD_QT where FTQ_XCHNG_CD=:c_xchng_cd
        and FTQ_PRDCT_TYP=:c_tmp_prdct_typ
        /*    and FTQ_UNDRLYNG=:c_tmp_undlyn and FTQ_EXPRY_DT >=trunc(sysdate));  **** commented in ver 2.5 **/
        and FTQ_UNDRLYNG=:c_tmp_undlyn ); /** Ver 2.5 ***/   
 
        if( SQLCODE != 0 && (SQLCODE != NO_DATA_FOUND))
          {
           fn_errlog( c_ServiceName, "S31200", SQLMSG, c_err_msg  );
           /*** EXEC SQL CLOSE sys_spn_cur;  *** Ver 2.0 *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
           EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
           EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
           tpfree ( ( char * ) ptr_fml_Obuf );
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        
       if( SQLCODE == NO_DATA_FOUND )
       {
         i_crnt_mnth_flg=0;
       }
 

       /* if( c_opnpstn_flw == BUY && ( c_opt_typ=='C' || c_opt_typ=='P' ) && i_crnt_mnth_flg == 1 )  *** Ver 3.0 ***/
       if( c_opnpstn_flw == BUY && ( c_opt_typ=='C' || c_opt_typ=='P' ))      /*** Ver 3.0 ***/
       {
        /** Block Added for selecting spot price STARTS **/
            EXEC SQL
            SELECT NVL(VEM_VAR_MARGIN/100, 0),
                   NVL(VEM_EXTRM_LOSS_RT/100, 0)
                   /* NVL(FSP_DLVRY_MRGPRCNT/100, 0),
                   NVL(to_char(FSP_DLVRY_MRGPRCNT_UPDDT,'DD-Mon-YYYY'),'NA')			* Ver 3.0 */
            into  :d_var_mrgn,
                  :d_elm_mrgn
                  /* :d_current_dlvry_mrgn_prcnt,
                  :c_update_dt
            FROM VEM_VAR_ELM_MSTR,FSP_FO_SYSTM_PRMTR		* Ver 3.0 */
            FROM VEM_VAR_ELM_MSTR                         /* Ver 3.0 */
            WHERE VEM_STCK_CD = ( SELECT SEM_MAP_VL
                                  FROM SEM_STCK_MAP
                                  WHERE sem_stck_cd = :c_undrlyng
                                        AND SEM_ENTTY = 3 );

           if( SQLCODE != 0 && (SQLCODE != NO_DATA_FOUND))
           {
            fn_errlog( c_ServiceName, "S31205", SQLMSG, c_err_msg  );
            /*** EXEC SQL CLOSE sys_spn_cur;  *** Ver 2.0 *** Commented in Ver 3.4 ***/
            EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
            tpfree ( ( char * ) ptr_fml_Obuf );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
           } 
         
           /*** Ver 3.0 Starts ***/
           EXEC SQL
            SELECT  LODM_PRC,
                    MRGPRCNT_UPDDT
            INTO  :d_current_dlvry_mrgn_prcnt,
                  :c_update_dt
            FROM  (SELECT NVL(FLM_TODAYS_LODM_PERCNT/100,0.0) LODM_PRC,
                          NVL(to_char(FLM_DLVRY_MRGPRCNT_UPDDT,'DD-Mon-YYYY'),'NA') MRGPRCNT_UPDDT
                  FROM  FLM_FO_LODM_MSTR
                  /** WHERE rtrim(FLM_UNDRLYNG) = :c_undrlyng ** 3.6 **/
                  WHERE FLM_UNDRLYNG = :c_undrlyng   /** trim Remove in Ver 3.6 **/
                  AND FLM_PRDCT_TYP = :c_prd_typ
                  AND FLM_EOS_DT >= TRUNC(SYSDATE)
                  AND NVL(FLM_TODAYS_LODM_PERCNT,0.0) != 0);
           if( SQLCODE != 0 && (SQLCODE != NO_DATA_FOUND))
           {
            fn_errlog( c_ServiceName, "S31210", SQLMSG, c_err_msg  );
            /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
            EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :cur_spn_pstn;
            tpfree ( ( char * ) ptr_fml_Obuf );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
           }
           else if ((SQLCODE == NO_DATA_FOUND || d_current_dlvry_mrgn_prcnt == 0) && i_crnt_mnth_flg == 1)
           {
            EXEC SQL
              SELECT NVL(FLM_TODAYS_LODM_PERCNT/100,0.0) LODM_PRC,
                     NVL(to_char(FLM_DLVRY_MRGPRCNT_UPDDT,'DD-Mon-YYYY'),'NA') MRGPRCNT_UPDDT
              INTO  :d_current_dlvry_mrgn_prcnt,
                    :c_update_dt
              FROM  FLM_FO_LODM_MSTR
              WHERE FLM_UNDRLYNG = 'ALL'
              AND   FLM_PRDCT_TYP = :c_prd_typ
            	AND   NVL(FLM_TODAYS_LODM_PERCNT/100,0.0) != 0
              AND   FLM_EXP_DT = :c_expry_dt;
            if( SQLCODE != 0 && (SQLCODE != NO_DATA_FOUND))
            {
              fn_errlog( c_ServiceName, "S31215", SQLMSG, c_err_msg  );
              /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
              EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
              EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
              EXEC SQL FREE :cur_spn_pstn;
              tpfree ( ( char * ) ptr_fml_Obuf );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }
           }
           /*** Ver 3.0 Ends ***/

          if( strcmp(c_update_dt, c_ltq_dt) == 0 )
          {
           l_spot_prc_tmp = l_cls_prc;  
           if( DEBUG_MSG_LVL_3 )
           {
            fn_userlog(c_ServiceName,"Considering Closing Price for ITM check :%ld:",l_spot_prc_tmp);
           }
          }
          else
          {
           l_spot_prc_tmp = l_spot_prc;
           if( DEBUG_MSG_LVL_3 )
           {
            fn_userlog(c_ServiceName,"Considering Spot Price for ITM check :%ld:",l_spot_prc_tmp);
           }
          }

        /** Block Added for selecting spot price ENDS  **/ 


         if(( c_opt_typ=='C' && l_spot_prc_tmp >= l_strike_prc ) || ( c_opt_typ=='P' && l_spot_prc_tmp <= l_strike_prc))
         {
          EXEC SQL
           SELECT NVL( FMM_ISEC_DLVRY_MRGN_BFFR_PRCNT/100, 0.0 ), 
                  NVL( FMM_DLVRY_MIN_MRGN_PRCNT/100 , 0.0 ) 
           INTO :d_ISec_buff_mrgn_prcnt,
                :d_dlvry_min_mrgn_prcnt /*** Minimum margin percentage ***/
           FROM FMM_FO_MRGN_MSTR
           WHERE  FMM_PRDCT_TYP= :c_prd_typ
           AND    FMM_UNDRLYNG = :c_undrlyng
           AND    FMM_XCHNG_CD = :c_xchng_cd
           AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
                                  FROM    FCB_FO_CLN_BSKT_ALLTD
                                  WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                                        FROM   CLM_CLNT_MSTR
                                                        WHERE CLM_MTCH_ACCNT =:c_mtch_accnt_no));

         if( SQLCODE != 0 && (SQLCODE != NO_DATA_FOUND))
         {
          fn_errlog( c_ServiceName, "S31220", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :cur_spn_pstn;
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }
           
          d_cntrct_val = ((double)l_strike_prc * (double)l_opnpstn_qty);
          d_mrggn_value =  fn_maxd((d_var_mrgn + d_elm_mrgn + d_ISec_buff_mrgn_prcnt ),d_dlvry_min_mrgn_prcnt);
          d_new_dlvry_mrgn = d_cntrct_val * d_mrggn_value * d_current_dlvry_mrgn_prcnt;
          
         EXEC SQL
         SELECT ROUND(:d_new_dlvry_mrgn,2)
         INTO :d_new_dlvry_mrgn
         FROM DUAL;

         if( SQLCODE != 0 && (SQLCODE != NO_DATA_FOUND))
         {
          fn_errlog( c_ServiceName, "S31225", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :cur_spn_pstn;
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }
    
          d_dlvry_mrgn_req = d_dlvry_mrgn_blk - d_new_dlvry_mrgn;  
          
           if(d_dlvry_mrgn_req <0)
           {
            d_dlvry_mrgn_req = (-1) * d_dlvry_mrgn_req;
           }
           else
           {
            d_dlvry_mrgn_req =0.0;
           }
         }
       }
      }

    if( DEBUG_MSG_LVL_3 )
     {
      fn_userlog(c_ServiceName,"Delivery Margin Block is :%lf:",d_dlvry_mrgn_blk); /** Ver 3.2 **/
      fn_userlog(c_ServiceName,"Required delivery Margin is :%lf:",d_dlvry_mrgn_req); /** Ver 3.2 **/ 
     }
       /** Ver 2.4 Ends  **/
		}

    /*** Ver 3.8 Starts ***/
    c_all_flg           = 'N';
    c_indx_indctr       = 'N';
    c_dlvry_sttlmnt_typ = '\0';
    c_dlvry_enbl_flg    = '\0';
    if ( c_setlmnt_flg == 'P' ) /*** Physical Settled contract only ***/
    {
      if ( c_prd_typ == 'F' || c_prd_typ == 'O' )
      {
      if( l_opnpstn_qty == 0 )
      {
        c_indx_indctr = 'N';  /** Show Choose Delivery link **/
      }
      else
      {
        EXEC SQL
          SELECT   NVL(FLM_DLVRYENBL_FLG,'N')
          INTO     :c_dlvry_enbl_flg
          FROM     FLM_FO_LODM_MSTR
          WHERE    FLM_UNDRLYNG = :c_undrlyng
          AND      FLM_EOS_DT >= (
          SELECT   EXG_NXT_TRD_DT
          FROM     EXG_XCHNG_MSTR
          WHERE    EXG_XCHNG_CD = 'NFO');
          /*** AND      FLM_EOS_DT >= trunc(SYSDATE); ***/

      if( (SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog( c_ServiceName, "S31230", SQLMSG, c_errmsg );
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
      }
      else if ( SQLCODE == NO_DATA_FOUND )
      {
        c_all_flg = 'Y';
        EXEC SQL
          SELECT    NVL(FLM_DLVRYENBL_FLG,'N'),FLM_EXP_DT
          INTO      :c_dlvry_enbl_flg,
                    :c_flm_expr_dt
          FROM      FLM_FO_LODM_MSTR
          WHERE     FLM_UNDRLYNG = 'ALL'
          AND      FLM_EOS_DT >= (
          SELECT   EXG_NXT_TRD_DT
          FROM     EXG_XCHNG_MSTR
          WHERE    EXG_XCHNG_CD = 'NFO');
          /*** AND      FLM_EOS_DT >= trunc(SYSDATE); ***/

        if((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
        {
          fn_errlog( c_ServiceName, "S31235", SQLMSG, c_errmsg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Inside Underlying ALL CASE c_all_flg :%c:",c_all_flg);
        }
      }

      if ( ( c_dlvry_enbl_flg == 'Y' && ( strcmp(c_flm_expr_dt,c_expry_dt) == 0 ) && c_all_flg == 'Y' ) || ( c_dlvry_enbl_flg == 'Y' && c_all_flg =='N' ) )
    {
    EXEC SQL
      SELECT      NVL(FCP_DLVRY_MODE_FLAG,'N'),
                  NVL(FCP_DLVRY_OBLGAMT_BLCKD,0),
                  NVL(FCP_DLVRY_QTY_BLCKD,0)
      INTO        :c_dlvry_mode_flg,
                  :l_dlvry_oblgamt_blckd,
                  :l_dlvry_qty_blckd
      FROM        FCP_FO_SPN_CNTRCT_PSTN
      WHERE       FCP_XCHNG_CD  = :c_xchng_cd
        AND         FCP_PRDCT_TYP = :c_prd_typ
      AND         FCP_INDSTK    = :c_ctgry_indstk
      AND         FCP_UNDRLYNG  = :c_undrlyng
      AND         FCP_EXPRY_DT  = :c_expry_dt
      AND         FCP_EXER_TYP  = :c_exrc_typ
      AND         FCP_STRK_PRC  = :l_strike_prc
      AND         FCP_OPT_TYP   = :c_opt_typ
      AND         FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no;

      if((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
      {
        fn_errlog( c_ServiceName, "S31240", SQLMSG, c_errmsg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

        /*** Background color display ***/
        if( l_dlvry_oblgamt_blckd == 0 && l_dlvry_qty_blckd == 0 )
        {
          c_dlvry_sttlmnt_typ = 'P';  /** Show Delivery in 'Pink' **/
        }
        else
        {
          c_dlvry_sttlmnt_typ = 'G';  /** Show Delivery in  'Green' **/
        }
        if ( c_dlvry_mode_flg == 'N' )
        {
          c_indx_indctr = 'D';  /** Show Choose Delivery link **/
        }
        if ( c_dlvry_mode_flg == 'Y' )
        {
          c_indx_indctr = 'C';  /** Show Choose Non Delivery link **/
        }

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Settlement Flag1 :%c:",c_dlvry_sttlmnt_typ);
          fn_userlog(c_ServiceName,"Index Indicator Choose Delivery/Non-Delivery :%c:",c_indx_indctr);
        }
      }
      else
      {
        c_indx_indctr = 'N';  /** Dont show any link(Choose delivery or non delivery) **/
      }
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Index Indicator Choose Delivery/Non-Delivery :%c:",c_indx_indctr);
      }
     }
    }
    }
    /*** Ver 3.8 Ends ***/

     
     
      d_umin_trd_mrgn = trunc(d_umin_trd_mrgn);     /***  Ver 1.7 ***/ 
	
			/*** Ver 1.2 ends ***/
				
    	i_returncode = fn_pack_vartofml ( c_ServiceName,
                                      c_err_msg,
                                      &ptr_fml_Obuf,
                                      68,	/** Ver 1.2 changed from 39 to 40 **/ /* changed to 52 in ver 1.3 */  /** Ver 1.4 changed from 52 to 53  **/  /** ver 1.5 changed from 53 to 54 **/ /** ver 1.6 changed from 54 to 55 **//* changed to 59 in Ver 1.7 */ /* Ver 2.1 changed from 59 to 60 */ /* Changed to 62 in Ver 2.2 */ /* Changed to 63 in Ver 2.3 */ /* Ver 2.4 Changed from 63 to 65 */
                                 			/* Ver 3.5 changed from 65 to 67 */ /*** 67 to 68 in Ver 4.0 ***/
																			/** FFO_EBA_MTCH_ACT_NO,(char *)&c_mtch_accnt_no, ** Commented in Ver 2.0 **/
																			FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no, /** Ver 2.0 **/
                                      FFO_PRDCT_TYP,(char *)&c_prd_typ,
                                      FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,
                                      FFO_UNDRLYNG,(char *)c_undrlyng,
                                      FFO_XCHNG_CD,(char *)c_xchng_cd,
                                      FFO_EXPRY_DT,(char *)c_expry_dt,
                                      FFO_OPT_TYP,(char *)&c_opt_typ,
                                      FFO_STRK_PRC,(char *)&l_strike_prc,
                                      FFO_EXER_TYP,(char *)&c_exrc_typ,
                                      FFO_CNTRCT_TAG,(char *)&c_cntrct_tag,
                                      FFO_C_OPNPSTN_QTY,(char *)&l_opnpstn_qty,
                                      FFO_C_OPNPSTN_FLW,(char *)&c_opnpstn_flw,
                                      FFO_CVR_QTY,(char *)&l_cvr_qty,
                                      FFO_LST_TRD_PRC,(char *)&l_lst_trdd_prc,
                                      FFO_UI_BUY_QTY,(char *)&l_ibuy_qty,
                                      FFO_UI_SELL_QTY,(char *)&l_isell_qty,
                                      FFO_MIN_LOT_QTY,(char *)&l_lot_size,
                                      /** FFO_STP_LSS_TGR,(char *)&l_null, commented in 2.9  **/
                                      FFO_STP_LSS_TGR,(char *)&li_stp_lss_tgr_prc, /** ver 2.9 **/ 
                                      FFO_LMT_RT,(char *)&l_merge_counter,
                                      FFO_ORDR_FLW,(char *)&c_null,
                                      FFO_PSTN_AMT_BLKD,(char *)&d_null,
                                      FFO_C_MTM_OPN_VAL,(char *)&d_mtm_opn_val,
                                      FFO_U_IMTM_SPRD_PL,(char *)&d_price,
				      FFO_EFF_CLS_PRC,(char *)&d_t2t_prc, /*** Ver 4.0 ***/
                                      FFO_AMOUNT,(char *)&d_utrd_mrgn,
                                      FFO_U_ORDR_MRGN,(char *)&d_ordr_mrgn,
                                      FFO_U_MM_TRD_MRGN,(char *)&d_umin_trd_mrgn,
                                      FFO_BAL_AMT,(char *)&d_und_avail_mrgn,
                                      FFO_UNRLZD_PL,(char *)&d_null,
                                      FFO_DWL_FLG,(char *)&c_addmrgn_flg,
                                      FFO_SPL_FLG,(char *)&c_sqroff_flg,
                                      FFO_STATUS_FLG,(char *)&c_null,
                                      FFO_QT_TRDNG_FLG,(char *)&c_rollover_flag,
																			FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flag,     /***  Ver 2.3 ***/
                                      FFO_FUT_CONV_FLG,(char *)&c_conv_flg,
                                      FFO_MTM_FLG,(char *)&c_mtm_flg,
                                      FFO_MOD_CAN_FLG,(char *)&c_null,
                                      FFO_IS_FLG,(char *)&c_mtm_flag,
                                      FFO_RQST_TYP,(char *)&c_spl_flg,
                                      FFO_COUNTER,(char *)&i_tag_cnt,
																			FFO_ORDR_RFRNC,(char *)"",
																			FFO_CURR_RT, (char *)&l_spot_prc,                       /*** ver 1.2 ***/
                                      FFO_DAM_TRNSCTN, (char *)&c_null,    /*** Ver 1.3 ***/
                                      FFO_STLMNT_TYP, (char *)&c_null,      /*** Ver 1.3 ***/
                                      FFO_DLVRY_ALLWD, (char *)&c_null,  /*** Ver 1.3 ***/
                                      FFO_ORD_TYP, (char *)&c_null,       /*** Ver 1.3 ***/
                                      FFO_BOARD_LOT_QTY, (char *)&l_null, /*** Ver 1.3 ***/
                                      FFO_TMPLT, (char *)&l_null,       /*** Ver 1.3 ***/
                                      FFO_XCHNG_CAN_QTY, (char *)&l_null, /*** Ver 1.3 ***/
                                      FFO_EX_ORDR_TYP, (char *)&c_null,       /*** Ver 1.3 ***/
                                      FFO_ORD_TOT_QTY, (char *)&l_null,       /*** Ver 1.3 ***/
                                      FFO_FUT_PRC, (char *)&d_null,            /*** Ver 1.3 ***/
                                      FFO_PLG_ORDR_RFRNC, (char *)"",    /*** Ver 1.3 ***/
                                      FFO_EXRC_STTS, (char *)&c_null,   /*** Ver 1.3 ***/
                                      FFO_RMS_PRCSD_FLG, (char *)&c_sqroffmkt_flg,            /*** Ver 1.4 ***/
                                      FFO_DR_CR_FLG, (char *)&c_null,                         /*** ver 1.5 ***/
																			FFO_NKD_BLKD_FLG, (char *)&c_null,       											/*** Ver 1.6 ***/
                                      FFO_UPLD_MTCH_FLG, (char *)&c_null,   /*** Ver 1.7 ***/
                                      FFO_EXRC_QTY, (char *)&l_null,        /*** Ver 1.7 ***/
                                      FFO_ORD_VALID_DT, (char *)" ",         /*** Ver 1.7 ***/
                                      FFO_EBA_STTS, (char *)&c_null,         /*** Ver 1.7 ***/ 
																			FFO_BK_UBK_FLG,(char *)&c_setlmnt_flg,  /*** Ver 2.1 ***/
                                      FFO_ND_STRT_DT, (char *)"",    /*** Ver 2.2 ***/
                                      FFO_ND_END_DT, (char *)"",    /*** Ver 2.2 ***/
                                      FFO_SO_AMT_BLKD, (char *)&d_dlvry_mrgn_blk, /** Ver 2.4 **/ 
                                      FFO_OPNPSTN_VAL, (char *)&d_dlvry_mrgn_req, /** Ver 2.4 **/
                                      FFO_INDX_INDCTR, (char *)&c_indx_indctr,           /*** Ver 3.5 ***/
                                      /***FFO_STLMNT_TYP, (char *)&c_dlvry_sttlmnt_typ       *** Ver 3.5 *** ** Ver 3.8 **/
                                      FFO_BNK_STTS, (char *)&c_dlvry_sttlmnt_typ       /*** Ver 3.8 ***/
                                    );
	
     		if ( i_returncode == -1 )
     		{
          fn_errlog( c_ServiceName, "S31245", FMLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/ 
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
					EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     		}
				
				d_curr_cnt_opn_val	=	0;
				d_curr_uopn_val			=	0;
				l_und_buy_opn_qty		=	0;
				l_und_sell_opn_qty	=	0;
				l_qty 							= 0;
				l_spot_prc					=	0;

			}
			else if(c_prd_typ == 'P' )
			{
      	d_avilable_amount=0.0;
				l_base_prc = 0;
      	c_prev_prdct_typ = '\0';
      	l_lst_trdd_prc = 0;
      	d_umin_trd_mrgn = 0.0;
      	d_und_avail_mrgn =0.0;
      	c_addmrgn_flg = '\0';
      	c_sqroff_flg = '\0';
      	c_rollover_flag = '\0';
				c_sprd_roll_flag = 'N';			/*** Ver 2.3 ***/
      	c_conv_flg  = '\0';
      	c_mtm_flg   = '\0';
      	c_mod_can_flg = '\0';
				l_merge_counter = 0;

				EXEC SQL
         		SELECT nvl(FTQ_LST_TRD_PRC,0),
									 FTQ_MIN_LOT_QTY,																				/*** Added in Ver 1.1 ***/
                   NVL(FTQ_ROLLOVER_FLAG,'Q')															/*** Added in Ver 1.1 ***/
         		INTO :l_lst_trdd_prc,
								 :l_lot_size,																							/*** Added in Ver 1.1 ***/
                 :c_rollover_flag																					/*** Added in Ver 1.1 ***/
         		FROM ftq_fo_trd_qt
         		WHERE ftq_xchng_cd = :c_xchng_cd
     /*** 	AND  ftq_prdct_typ = 'F' 																			 *** Commented in Ver 1.1 ***/
		 /***		AND  ftq_prdct_typ = decode(:c_prd_typ, 'P', 'F', :c_prd_typ) ** Added in Ver 1.1 ** Commented in Ver 1.8 ***/
            AND  ftq_prdct_typ = :c_fut_prd_typ                           /*** Added in Ver 1.8 ***/ 
         		/** AND  trim(ftq_undrlyng) = :c_undrlyng ** 3.6 **/
            AND  ftq_undrlyng = :c_undrlyng   /** trim Remove in Ver 3.6 **/
         		AND  ftq_exer_typ = :c_exrc_typ
     /***  	AND  ftq_opt_typ =  '*'
         		AND  ftq_strk_prc = 0       *** Commented in Ver 1.8 to remove hard parsing ***/ 
         	  AND  ftq_opt_typ = :c_fut_opt_typ     /*** Ver 1.8 binding variable used instead of hard coded value ***/
            AND  ftq_strk_prc = :l_fut_strk_prc   /*** Ver 1.8 binding variable used instead of hard coded value ***/
          	AND  ftq_expry_dt = :c_expry_dt;

				if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    		{
      		fn_errlog( c_ServiceName, "S31250", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
					EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

        if(DEBUG_MSG_LVL_3)  /** ver 4.1 debug level changed to 3 **/
        {
         fn_userlog(c_ServiceName,"FTQ Lot Size :%ld:",l_lot_size);
         fn_userlog(c_ServiceName,"FTQ Rollover Flag :%c:",c_rollover_flag);
				 fn_userlog(c_ServiceName,"FTQ Rollover SPREAD Flag :%c:",c_sprd_roll_flag);  /*** Ver 2.3 ***/
        }
				EXEC SQL
         		SELECT  fup_prdct_typ,
           		      fup_indstk,
               	    fup_uopnpstn_flw,
                 		abs(fup_uopnpstn_qty),
                 		fup_utrd_mrgn + fup_add_mrgn_val,
                 		fup_uspread_mrgn,
                 		fup_uordr_mrgn,
                 		NVL(fup_umin_trd_mrgn,0)
         		INTO    :c_uprdct_typ,
            	      :c_uindstk,
   	                :c_uopnpstn_flw,
                 		:l_uopnpstn_qty,
   	             		:d_utrd_mrgn,
                 		:d_sprd_mrgn,
                 		:d_ordr_mrgn,
                 		:d_umin_trd_mrgn
   	     		FROM   fup_fut_undrlyng_pstn
         		WHERE  fup_clm_mtch_accnt = :c_mtch_accnt_no
         		AND    fup_xchng_cd = :c_xchng_cd
   	     		AND    fup_undrlyng = :c_undrlyng
         		AND    fup_cntrct_tag = :c_cntrct_tag
         		AND    fup_prdct_typ = :c_prd_typ;

				if( SQLCODE != 0 )
    		{
    			fn_errlog( c_ServiceName, "S31255", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/  
					EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}
    		if ( d_utrd_mrgn != 0 )
    		{
    			c_addmrgn_flg = 'Y';
			
					if( abs(l_opnpstn_qty) - abs(l_cvr_qty) > 0)
      		{
      			c_conv_flg ='P';
						c_sqroff_flg = 'Y';
      		}
    		}

    		EXEC SQL
      		SELECT decode(:l_opnpstn_qty, 0, 0, round(((:d_mtm_opn_val/:l_opnpstn_qty)/100),2) )
      		INTO :d_base_prc
      		FROM  dual;
			
					if ( c_opnpstn_flw == BUY )
  				{ 
    				d_curr_cnt_opn_val = ((double)d_base_prc * (double)l_opnpstn_qty * ( 100));
      			l_und_buy_opn_qty  = l_und_buy_opn_qty + l_opnpstn_qty;
    			}
    			else if(c_opnpstn_flw == SELL )
   				{ 
    				d_curr_cnt_opn_val = ((double)d_base_prc * (double)l_opnpstn_qty * (100));
      			l_und_sell_opn_qty = l_und_sell_opn_qty + l_opnpstn_qty;
    			}
    			else
    			{
      			d_curr_cnt_opn_val=0;
    			}

    			d_curr_uopn_val = d_curr_uopn_val + d_curr_cnt_opn_val;

    			l_sprd_qty = 0;
			
    			d_umin_trd_mrgn=fn_cal_min_mrgn(c_ServiceName,c_mtch_accnt_no,c_undrlyng,c_cntrct_tag,c_xchng_cd,c_uprdct_typ,c_ctgry_indstk,c_exrc_typ,l_lst_trdd_prc,d_curr_uopn_val,l_sprd_qty);

    			if(d_umin_trd_mrgn==-1)
    			{
    				fn_errlog( c_ServiceName, "S31260", "",c_err_msg  );
            /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
            EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
						EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
      			tpfree ( ( char * ) ptr_fml_Obuf );
      			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    			}

					i_mtm_loss_stts=fn_cal_mtm_loss(c_ServiceName,c_mtch_accnt_no,c_undrlyng,c_cntrct_tag,c_xchng_cd,c_prd_typ,c_ctgry_indstk,c_exrc_typ,&d_mtm_loss);
   
    			if(i_mtm_loss_stts==-1)
    			{
    				fn_errlog( c_ServiceName, "S31265", "",c_err_msg  );
            /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
            EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
						EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
      			tpfree ( ( char * ) ptr_fml_Obuf );
      			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    			}

    			d_avilable_amount = d_utrd_mrgn - d_mtm_loss;

				/*** Commented in Ver 1.1 ***

   				EXEC SQL
      				SELECT  FCM_LOT_SZ,
              				NVL(FCM_ROLLOVER_FLAG,'Q')
      				INTO    :l_lot_size,
              				:c_rollover_flag
      				FROM    FCM_FO_CNTRCT_MSTR
      				WHERE   FCM_XCHNG_CD  = :c_xchng_cd
      				AND     FCM_PRDCT_TYP = decode(:c_prd_typ, 'P', 'F', :c_prd_typ)
      				AND     FCM_UNDRLYNG  = :c_undrlyng
      				AND     FCM_EXER_TYP  = :c_exrc_typ
      				AND     FCM_EXPRY_DT  = :c_expry_dt;

					if( SQLCODE != 0)
    			{
      			fn_errlog( c_ServiceName, "S31270", SQLMSG, c_err_msg  );
      			EXEC SQL CLOSE sys_spn_cur;
      			tpfree ( ( char * ) ptr_fml_Obuf );
      			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    			}

				*** Ver 1.1 Comment Ends ***/

     			c_rollover_flag = 'Q'; 


    			c_spl_flg = CONTRACT_IP;

					i_tag_cnt++;

					if( DEBUG_MSG_LVL_5 )
					{
    				fn_userlog(c_ServiceName,"Before packing");
    				fn_userlog(c_ServiceName," c_mtch_accnt_no :%s:",c_mtch_accnt_no);
    				fn_userlog(c_ServiceName," c_prd_typ :%c:",c_prd_typ);
    				fn_userlog(c_ServiceName," c_ctgry_indstk :%c:",c_ctgry_indstk);
    				fn_userlog(c_ServiceName," c_undrlyng :%s:",c_undrlyng);
    				fn_userlog(c_ServiceName," c_xchng_cd :%s:",c_xchng_cd);
    				fn_userlog(c_ServiceName," c_expry_dt :%s:",c_expry_dt);
    				fn_userlog(c_ServiceName," c_opt_typ :%c:",c_opt_typ);
    				fn_userlog(c_ServiceName," l_strike_prc :%ld:",l_strike_prc);
    				fn_userlog(c_ServiceName," c_exrc_typ :%c:",c_exrc_typ);
    				fn_userlog(c_ServiceName," c_cntrct_tag :%c:",c_cntrct_tag);
    				fn_userlog(c_ServiceName," l_opnpstn_qty :%ld:",l_opnpstn_qty);
    				fn_userlog(c_ServiceName," c_opnpstn_flw :%c:",c_opnpstn_flw);
    				fn_userlog(c_ServiceName," l_cvr_qty :%ld:",l_cvr_qty);
    				fn_userlog(c_ServiceName," l_lst_trdd_prc :%ld:",l_lst_trdd_prc);
    				fn_userlog(c_ServiceName," l_ibuy_qty :%ld:",l_ibuy_qty);
    				fn_userlog(c_ServiceName," l_isell_qty :%ld:",l_isell_qty);
    				fn_userlog(c_ServiceName," l_lot_size :%ld:",l_lot_size);
    				fn_userlog(c_ServiceName," li_stp_lss_tgr_prc :%ld:",li_stp_lss_tgr_prc);
   	 				fn_userlog(c_ServiceName," l_lmt_rt :%ld:",l_lmt_rt);
    				fn_userlog(c_ServiceName," c_cvr_ordr_flw :%c:",c_cvr_ordr_flw);
    				fn_userlog(c_ServiceName," d_mrkt_wd_pstn :%lf:",d_mrkt_wd_pstn);
    				fn_userlog(c_ServiceName," d_mtm_opn_val :%lf:",d_mtm_opn_val);
    				fn_userlog(c_ServiceName," d_price :%lf:",d_price);
						fn_userlog(c_ServiceName," d_t2t_prc :%lf:",d_t2t_prc); /*** Ver 4.0 ***/
    				fn_userlog(c_ServiceName," d_utrd_mrgn :%lf:",d_utrd_mrgn);
    				fn_userlog(c_ServiceName," d_ord_mrgn :%lf:",d_ord_mrgn);
    				fn_userlog(c_ServiceName," d_umin_trd_mrgn :%lf:",d_umin_trd_mrgn);
    				fn_userlog(c_ServiceName," d_avilable_amount :%lf:",d_avilable_amount);
    				fn_userlog(c_ServiceName," d_unlz_pl :%lf:",d_unlz_pl);
    				fn_userlog(c_ServiceName," c_addmrgn_flg :%c:",c_addmrgn_flg);
    				fn_userlog(c_ServiceName," c_sqroff_flg :%c:",c_sqroff_flg);
    				fn_userlog(c_ServiceName," c_jointsqroff_flg :%c:",c_jointsqroff_flg);
    				fn_userlog(c_ServiceName," c_rollover_flag :%c:",c_rollover_flag);
						fn_userlog(c_ServiceName,"FTQ Rollover SPREAD Flag :%c:",c_sprd_roll_flag);  /*** Ver 2.3 ***/
    				fn_userlog(c_ServiceName," c_conv_flg :%c:",c_conv_flg);
    				fn_userlog(c_ServiceName," c_mtm_flg :%c:",c_mtm_flg);
    				fn_userlog(c_ServiceName," c_mod_can_flg :%c:",c_mod_can_flg);
    				fn_userlog(c_ServiceName," c_cvr_ordr_stts :%c:",c_cvr_ordr_stts);
    				fn_userlog(c_ServiceName," c_spl_flg :%c:",c_spl_flg);
					  fn_userlog(c_ServiceName,":c_sqroffmkt_flg:%c:",c_sqroffmkt_flg);     /** Ver 1.4 **/
					}

						if( DEBUG_MSG_LVL_0 )
						{
							fn_userlog(c_ServiceName,"c_undrlyng :%s:,c_expry_dt :%s:,c_cntrct_tag :%c:,i_tag_cnt :%d:",c_undrlyng, c_expry_dt ,c_cntrct_tag ,i_tag_cnt);
						}

    				i_returncode = fn_pack_vartofml ( c_ServiceName,
                                      c_err_msg,
                                      &ptr_fml_Obuf,
                                      68,	/** Ver 1.2 changed from 39 to 40 **/ /* changed to 52 in ver 1.3 */  /** Ver 1.4 changed from 52 to 53  **/  /** ver 1.5 changed from 53 to 54 **/ /** ver 1.6 changed from 54 to 55 **//* changed to 59 in Ver 1.7 */ /* Ver 2.1 changed from 59 to 60 */ /* changed to 62 in Ver 2.2 */ /* changed to 63 in Ver 2.3 */ /*Ver 2.4 Changed frm 63 to 65 */ /*** 67 to 68 in Ver 4.0 ***/
                              		   	/* Ver 3.5 changed from 65 to 67 */
																			/** FFO_EBA_MTCH_ACT_NO,(char *)&c_mtch_accnt_no, ** Commented in Ver 2.0 **/
																			FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no, /** Ver 2.0 **/
                                      FFO_PRDCT_TYP,(char *)&c_prd_typ,
                                      FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,
                                      FFO_UNDRLYNG,(char *)c_undrlyng,
                                      FFO_XCHNG_CD,(char *)c_xchng_cd,
                                      FFO_EXPRY_DT,(char *)c_expry_dt,
                                      FFO_OPT_TYP,(char *)&c_opt_typ,
                                      FFO_STRK_PRC,(char *)&l_strike_prc,
                                      FFO_EXER_TYP,(char *)&c_exrc_typ,
                                      FFO_CNTRCT_TAG,(char *)&c_cntrct_tag,
                                      FFO_C_OPNPSTN_QTY,(char *)&l_opnpstn_qty,
                                      FFO_C_OPNPSTN_FLW,(char *)&c_opnpstn_flw,
                                      FFO_CVR_QTY,(char *)&l_cvr_qty,
                                      FFO_LST_TRD_PRC,(char *)&l_lst_trdd_prc,
                                      FFO_UI_BUY_QTY,(char *)&l_ibuy_qty,
                                      FFO_UI_SELL_QTY,(char *)&l_isell_qty,
                                      FFO_MIN_LOT_QTY,(char *)&l_lot_size,
                                      FFO_STP_LSS_TGR,(char *)&li_stp_lss_tgr_prc,
                                      FFO_LMT_RT,(char *)&l_lmt_rt,
                                      FFO_ORDR_FLW,(char *)&c_cvr_ordr_flw,
                                      FFO_PSTN_AMT_BLKD,(char *)&d_mrkt_wd_pstn,
                                      FFO_C_MTM_OPN_VAL,(char *)&d_mtm_opn_val,
                                      FFO_U_IMTM_SPRD_PL,(char *)&d_price,
				      FFO_EFF_CLS_PRC, (char *)&d_t2t_prc, /*** Ver 4.0 ***/
                                      FFO_AMOUNT,(char *)&d_utrd_mrgn,
                                      FFO_U_ORDR_MRGN,(char *)&d_ordr_mrgn,
                                      FFO_U_MM_TRD_MRGN,(char *)&d_umin_trd_mrgn,
                                      FFO_BAL_AMT,(char *)&d_avilable_amount,
                                      FFO_UNRLZD_PL,(char *)&d_null,
                                      FFO_DWL_FLG,(char *)&c_addmrgn_flg,
                                      FFO_SPL_FLG,(char *)&c_sqroff_flg,
                                      FFO_STATUS_FLG,(char *)&c_jointsqroff_flg,
                                      FFO_QT_TRDNG_FLG,(char *)&c_rollover_flag,
																			FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flag,     /***  Ver 2.3 ***/
                                      FFO_FUT_CONV_FLG,(char *)&c_conv_flg,
                                      FFO_MTM_FLG,(char *)&c_mtm_flg,
                                      FFO_MOD_CAN_FLG,(char *)&c_mod_can_flg,
                                      FFO_IS_FLG,(char *)&c_cvr_ordr_stts,
                                      FFO_RQST_TYP,(char *)&c_spl_flg,
																			FFO_COUNTER,(char *)&i_tag_cnt,
																			FFO_ORDR_RFRNC,(char *)"",
																		  FFO_CURR_RT, (char *)&l_null,                       	/*** ver 1.2 ***/
                                      FFO_DAM_TRNSCTN, (char *)&c_null,    /*** Ver 1.3 ***/
                                      FFO_STLMNT_TYP, (char *)&c_null,      /*** Ver 1.3 ***/
                                      FFO_DLVRY_ALLWD, (char *)&c_null,  /*** Ver 1.3 ***/
                                      FFO_ORD_TYP, (char *)&c_null,       /*** Ver 1.3 ***/
                                      FFO_BOARD_LOT_QTY, (char *)&l_null, /*** Ver 1.3 ***/
                                      FFO_TMPLT, (char *)&l_null,       /*** Ver 1.3 ***/
                                      FFO_XCHNG_CAN_QTY, (char *)&l_null, /*** Ver 1.3 ***/
                                      FFO_EX_ORDR_TYP, (char *)&c_null,       /*** Ver 1.3 ***/
                                      FFO_ORD_TOT_QTY, (char *)&l_null,       /*** Ver 1.3 ***/
                                      FFO_FUT_PRC, (char *)&d_null,            /*** Ver 1.3 ***/
                                      FFO_PLG_ORDR_RFRNC, (char *)"",    /*** Ver 1.3 ***/
                                      FFO_EXRC_STTS, (char *)&c_null,   /*** Ver 1.3 ***/
                                      FFO_RMS_PRCSD_FLG, (char *)&c_sqroffmkt_flg,        	/*** Ver 1.4 ***/
                                      FFO_DR_CR_FLG, (char *)&c_null,                      	/*** ver 1.5 ***/
                                   		FFO_NKD_BLKD_FLG, (char *)&c_null,       										/*** Ver 1.6 ***/
                                      FFO_UPLD_MTCH_FLG, (char *)&c_null,   /*** Ver 1.7 ***/
                                      FFO_EXRC_QTY, (char *)&l_null,        /*** Ver 1.7 ***/
                                      FFO_ORD_VALID_DT, (char *)" ",         /*** Ver 1.7 ***/
                                      FFO_EBA_STTS, (char *)&c_null,         /*** Ver 1.7 ***/
                                      FFO_BK_UBK_FLG,(char *)&c_null,        /*** Ver 2.1 ***/
                                      FFO_ND_STRT_DT, (char *)"", /*** Ver 2.2 ***/
                                      FFO_ND_END_DT, (char *)"",  /*** Ver 2.2 ***/
                                      FFO_SO_AMT_BLKD, (char *)&d_null, /** Ver 2.4 **/
                                      FFO_OPNPSTN_VAL, (char *)&d_null,  /** Ver 2.4 **/
                                      FFO_INDX_INDCTR, (char *)&c_null,     /*** Ver 3.5 ***/
                                      /**FFO_STLMNT_TYP, (char *)&c_null       *** Ver 3.5 ***** Ver 3.8 **/
                                      FFO_BNK_STTS, (char *)&c_null       /*** Ver 3.8 ***/ 
																			 );		
	
        if ( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31275", FMLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
					EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
			}
			else if(c_prd_typ == 'U')
  		{
      	d_avilable_amount=0.0;
      	c_prev_prdct_typ = '\0';
      	l_cmp = 0;
      	d_umin_trd_mrgn = 0.0;
      	d_und_avail_mrgn =0.0;
      	c_addmrgn_flg = '\0';
      	c_sqroff_flg = '\0';
      	c_rollover_flag = '\0';
				c_sprd_roll_flag = 'N';			/*** Ver 2.3 ***/
      	c_conv_flg  = '\0';
      	c_mtm_flg   = '\0';
      	c_mod_can_flg = '\0';
				l_merge_counter = 0;

				/** Getting the total executed value and quantity of FRESH order. **/

       /*** Commented in Ver 1.9 ***

    		EXEC SQL
    			SELECT  SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),
            			SUM(FTD_EXCTD_QTY)
    			INTO    :d_frsh_exe_val,
         			    :li_tot_exec_qty
    			FROM    FTD_FO_TRD_DTLS
    			WHERE   FTD_ORDR_RFRNC = :c_ordr_rfrnc;

        **************************/

        /*** Ver 1.9 Starts ***/   

        EXEC SQL
          SELECT   NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FTD_EXCTD_QTY ) ), 0 ),
                   NVL( SUM( DECODE( FOD_FC_FLAG, 'C', FTD_EXCTD_QTY, 0 ) ), 0 ),
                   NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FTD_EXCTD_QTY * FTD_EXCTD_RT ) ),0),
                   NVL( SUM( DECODE( FOD_FC_FLAG, 'C', FTD_EXCTD_QTY * FTD_EXCTD_RT, 0 ) ),0)
           INTO    :d_frs_exe_qty,
                   :d_cvr_exe_qty,
                   :d_frs_exe_val,
                   :d_cvr_exe_val
           FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
           WHERE   FTD_ORDR_RFRNC  = FOD_ORDR_RFRNC
           AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_ordr_rfrnc;

        /*** Ver 1.9 Ends ***/ 

    		if( SQLCODE != 0 )
    		{
      		fn_errlog( c_ServiceName, "S31280", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
					EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

				if( DEBUG_MSG_LVL_3 )
				{
          /*** Commented in Ver 1.9 as variables are not used ***
					fn_userlog(c_ServiceName,"d_frsh_exe_val :%lf:",d_frsh_exe_val);
					fn_userlog(c_ServiceName,"li_tot_exec_qty :%ld:",li_tot_exec_qty);
          ***/
          /*** Ver 1.9 Starts ***/
 
          fn_userlog(c_ServiceName,"d_frs_exe_qty :%lf:",d_frs_exe_qty); 
          fn_userlog(c_ServiceName,"d_frs_exe_val :%lf:",d_frs_exe_val);
          fn_userlog(c_ServiceName,"d_cvr_exe_qty :%lf:",d_cvr_exe_qty);
          fn_userlog(c_ServiceName,"d_cvr_exe_val :%lf:",d_cvr_exe_val);

          /*** Ver 1.9 Ends ***/
          
				}

				d_wgt_avrg_price = 0.0;
    		/*** d_wgt_avrg_price = (double) (d_frsh_exe_val / li_tot_exec_qty); Commented in Ver 1.9 ***/

        /*** Ver 1.9 Starts ***/

        if (l_opnpstn_qty > 0) /*** Fresh open postion ***/
    		{
      		d_wgt_avrg_price = d_frs_exe_val / d_frs_exe_qty;
    		}
    		else if (l_opnpstn_qty < 0) /*** Cover open Qty ***/
    		{
      		d_wgt_avrg_price = d_cvr_exe_val / d_cvr_exe_qty;
    		}
       
        /*** Ver 1.9 Ends ***/

        /*** Added for Ver 2.2 ***/
        
     if (c_frsh_ordr_stts == EXECUTED )
       {
           EXEC SQL
               SELECT  decode(nvl(clm_op20_flg,'N'),'Y','Y',NVL(CLM_BULLET_SCHM_FLG,'N')) /** Ver 2.6 decode*/
               INTO    :c_bullet_schm_flg
               FROM    CLM_CLNT_MSTR
               WHERE   CLM_MTCH_ACCNT =:c_mtch_accnt_no ;
         
        if( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S31285", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
    

        strcpy(c_bullet_frm_time.arr,"NA");
        strcpy(c_bullet_end_time.arr,"NA");

        if (c_bullet_schm_flg == 'Y' )
           {
            EXEC SQL
              SELECT  TO_CHAR(MAX(FTD_TRD_DT),'HH24:MI:SS'),
                      TO_CHAR(MAX(FTD_TRD_DT) + :c_bullet_param * 1/24/60/60,'HH24:MI:SS')
              INTO    :c_bullet_frm_time,
                      :c_bullet_end_time
              FROM    FTD_FO_TRD_DTLS
              WHERE   FTD_ORDR_RFRNC = :c_ordr_rfrnc;

        if( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S31290", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
          EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if( c_cvr_ordr_stts == 'D' || c_cvr_ordr_stts == 'C' )
        {
         strcpy(c_bullet_frm_time.arr,"NA");
         strcpy(c_bullet_end_time.arr,"NA");
        }
      

        if( DEBUG_MSG_LVL_3 )    
        {
          fn_userlog(c_ServiceName,"------Bullet timing----");
          fn_userlog(c_ServiceName,"From time  :%s:",c_bullet_frm_time.arr );
          fn_userlog(c_ServiceName,"end time  :%s:",c_bullet_end_time.arr ); 
        }

        }
 
        }
        SETLEN(c_bullet_frm_time);
        SETLEN(c_bullet_end_time);
     

      /*** End for Ver 2.2 ***/              

				EXEC SQL
      		SELECT  NVL(FTQ_LST_TRD_PRC,0),
                  FTQ_MIN_LOT_QTY 
      		INTO    :l_cmp,
                  :l_lot_size
      		FROM    FTQ_FO_TRD_QT
      		WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
      		/*** AND     FTQ_PRDCT_TYP = 'F'  *** Commented in Ver 1.8 to remove hard parsing ***/
          AND     FTQ_PRDCT_TYP = :c_fut_prd_typ   /*** Ver 1.8 ***/ 
      		/** AND     trim(FTQ_UNDRLYNG)  = :c_undrlyng ** 3.6 **/
          AND  ftq_undrlyng = :c_undrlyng   /** trim Remove in Ver 3.6 **/
      		AND     FTQ_EXPRY_DT  = :c_expry_dt
      		/*** AND     FTQ_OPT_TYP   =  '*'    
      		AND     FTQ_STRK_PRC  =  0         *** Commented in Ver 1.8 to remove hard parsing ***/    
          AND     FTQ_OPT_TYP   = :c_fut_opt_typ    /*** Ver 1.8 binding variable used instead of hard coded value ***/
          AND     FTQ_STRK_PRC  = :l_fut_strk_prc   /*** Ver 1.8 binding variable used instead of hard coded value ***/ 
      		AND     FTQ_EXER_TYP  = :c_exrc_typ;

    		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    		{
      		fn_errlog( c_ServiceName, "S31295", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
					EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}
		
				if( DEBUG_MSG_LVL_3 )
				{
					fn_userlog(c_ServiceName,"l_cmp :%ld:",l_cmp);
				}
				if ( c_opnpstn_flw == BUY )
    		{
          if (l_opnpstn_qty > 0 ) /*** If condition added in Ver 1.9 ***/
          {
      		  d_unlz_pl = ((double)l_cmp - d_wgt_avrg_price) * (double)l_opnpstn_qty;
          }
          else  /*** Else block added in Ver 1.9 ***/ 
          {
            d_unlz_pl = (d_wgt_avrg_price - (double)l_cmp) * (double)l_opnpstn_qty;
          }
    		}
    		else if ( c_opnpstn_flw == SELL )
    		{
          if (l_opnpstn_qty > 0 ) /*** If condition added in Ver 1.9 ***/
          { 
      		  d_unlz_pl = (d_wgt_avrg_price - (double)l_cmp) * (double)l_opnpstn_qty;
          }
          else   /*** Else block added in Ver 1.9 ***/ 
          {
            d_unlz_pl = ((double)l_cmp - d_wgt_avrg_price) * (double)l_opnpstn_qty;
          } 
    		}

    		c_mod_can_flg = 'N';
        c_call_mod_serv_flag = 'N'; /*** Ver 1.3 ***/
        c_sltp_sqoff_at_mkt_flag = 'N';  /*** Ver 1.3 ***/
        c_plc_cvr_ordr_flg = 'N'; /*** Added in Ver 1.7 ***/

    		if ( ( c_frsh_ordr_stts == EXECUTED ) && ( c_cvr_ordr_stts == ORDERED  || c_cvr_ordr_stts == PARTIALLY_EXECUTED ) )
    		{
      		c_mod_can_flg = 'Y';
          c_call_mod_serv_flag = 'M'; /*** Ver 1.3 ***/
          c_sltp_sqoff_at_mkt_flag = 'Y';  /*** Ver 1.3 ***/ 
    		}
        else if ( (c_frsh_ordr_stts == PARTIALLY_EXECUTED ) && ( c_cvr_ordr_stts == ORDERED) )  /*** Ver 1.3 ***/
        {
         c_mod_can_flg = 'Y';
         c_call_mod_serv_flag = 'P';
         c_sltp_sqoff_at_mkt_flag = 'N';
        }

       if( DEBUG_MSG_LVL_3) /* Ver 1.3 */   /** ver 4.1 debug level changed to 3 **/
       {
        fn_userlog(c_ServiceName," Call Modify Service Flag IS :%c:",c_call_mod_serv_flag);
        fn_userlog(c_ServiceName," Modify Flag IS :%c:",c_mod_can_flg);
        fn_userlog(c_ServiceName," SquareOff at Market Flag IS :%c",c_sltp_sqoff_at_mkt_flag);
       }
    

				if ( ( c_cvr_ordr_stts == ORDERED ) ||
         		( c_cvr_ordr_stts == PARTIALLY_EXECUTED ) )
    		{
       		if( DEBUG_MSG_LVL_5 )
       		{
        		fn_userlog(c_ServiceName," ptr_st_orderbook->c_xchng_cd :%s:",c_xchng_cd);
        		fn_userlog(c_ServiceName," ptr_st_orderbook->c_sltp_ordr_rfrnc :%s:",c_sltp_ordr_rfrnc);
        		fn_userlog(c_ServiceName," ptr_st_orderbook->l_mdfctn_cntr :%ld:",l_mdfctn_cntr);
       		}

       		EXEC SQL
           		SELECT fxb_rqst_typ,
              	     fxb_plcd_stts
           		INTO   :c_fxb_rqst_typ,
              	     :c_fxb_plcd_stts
           		FROM   fxb_fo_xchng_book
           		WHERE  fxb_xchng_cd    = :c_xchng_cd
           		AND    fxb_ordr_rfrnc  = :c_sltp_ordr_rfrnc
           		AND    fxb_mdfctn_cntr = :l_mdfctn_cntr;
       		
					if ( SQLCODE != 0 )
       		{
          	fn_errlog( c_ServiceName, "S31300", SQLMSG, c_err_msg  );
            /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
            EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
						EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
          	tpfree ( ( char * ) ptr_fml_Obuf );
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       		}

       		if (( c_fxb_rqst_typ == CANCELLED ) && ( c_fxb_plcd_stts != REJECT ))
       		{
           	c_mod_can_flg = 'N';
       		}
    		}

        /*** Ver 1.3 Starts ***/     
  
        if (c_frsh_ordr_stts == PARTIALLY_EXECUTED && c_cvr_ordr_stts == REJECTED )
        {
         c_cvr_ordr_stts = 'Z';  /*** In order to disable place cover order link ***/
         c_plc_cvr_ordr_flg = 'N'; /*** Added in Ver 1.7 ***/
        }
        else if( c_cvr_ordr_stts == REJECTED )   /*** Added in Ver 1.7 ***/
        {
         c_plc_cvr_ordr_flg = 'Y';
        }
       
        /*** Ver 1.9 Starts ***/ 
     
        if(l_opnpstn_qty < 0 ) 
        {
          l_opnpstn_qty = (-1) * l_opnpstn_qty; 
        } 

        /*** Ver 1.9 Ends ***/

        if ( DEBUG_MSG_LVL_3 )  /** ver 4.1 debug level changed to 3 **/ 
        {
         fn_userlog(c_ServiceName," MARKET TO LIMIT CHANGES LOGS ");  /*** Ver 1.3 ***/ 
         fn_userlog(c_ServiceName," Cover Order Status IS :%c",c_cvr_ordr_stts);      /*** Ver 1.3 ***/
         fn_userlog(c_ServiceName," Fresh Limit/Market Flag IS :%c:",c_frsh_slm_flg); /*** Ver 1.3 ***/
         fn_userlog(c_ServiceName," Fresh Executed Qty IS :%ld:",l_frsh_exctd_qty);    /*** Ver 1.3 ***/
         fn_userlog(c_ServiceName," Fresh Unexecuted Qty IS :%ld:",l_frsh_unexctd_qty); /*** Ver 1.3 ***/
         fn_userlog(c_ServiceName," Cover Unexecuted Qty IS :%ld:",l_cvr_unexctd_qty);   /*** Ver 1.3 ***/
         fn_userlog(c_ServiceName," Cover Limit/Market Flag IS :%c:",c_cvr_slm_flg);   /*** Ver 1.3 ***/
         fn_userlog(c_ServiceName," Total Ordered Qty IS :%ld:",l_tot_ord_qty);       /*** Ver 1.3 ***/
         fn_userlog(c_ServiceName," Fresh Limit Price IS :%lf:", d_price);           /*** Ver 1.3 ***/
	 fn_userlog(c_ServiceName," d_t2t_prc :%lf:",d_t2t_prc); /*** Ver 4.0 ***/
         fn_userlog(c_ServiceName," Fresh Order Reference IS :%s:",c_ordr_rfrnc);    /*** Ver 1.3 ***/
         fn_userlog(c_ServiceName," Fresh Order Status IS :%c:",c_frsh_ordr_stts);   /*** Ver 1.3 ***/
        }     

        /*** Ver 1.3 Ends ***/

    		c_spl_flg = CONTRACT_IP;
				i_tag_cnt++;

				if( DEBUG_MSG_LVL_3)
				{
    			fn_userlog(c_ServiceName,"Before packing");
    			fn_userlog(c_ServiceName," c_mtch_accnt_no :%s:",c_mtch_accnt_no);
    			fn_userlog(c_ServiceName," c_prd_typ :%c:",c_prd_typ);
    			fn_userlog(c_ServiceName," c_ctgry_indstk :%c:",c_ctgry_indstk);
    			fn_userlog(c_ServiceName," c_undrlyng :%s:",c_undrlyng);
    			fn_userlog(c_ServiceName," c_xchng_cd :%s:",c_xchng_cd);
    			fn_userlog(c_ServiceName," c_expry_dt :%s:",c_expry_dt);
    			fn_userlog(c_ServiceName," c_opt_typ :%c:",c_opt_typ);
    			fn_userlog(c_ServiceName," l_strike_prc :%ld:",l_strike_prc);
    			fn_userlog(c_ServiceName," c_exrc_typ :%c:",c_exrc_typ);
    			fn_userlog(c_ServiceName," c_cntrct_tag :%c:",c_cntrct_tag);
    			fn_userlog(c_ServiceName," l_opnpstn_qty :%ld:",l_opnpstn_qty);
    			fn_userlog(c_ServiceName," c_opnpstn_flw :%c:",c_opnpstn_flw);
    			fn_userlog(c_ServiceName," l_cvr_qty :%ld:",l_cvr_qty);
    			fn_userlog(c_ServiceName," l_cmp :%ld:",l_cmp);
    			fn_userlog(c_ServiceName," l_ibuy_qty :%ld:",l_ibuy_qty);
    			fn_userlog(c_ServiceName," l_isell_qty :%ld:",l_isell_qty);
    			fn_userlog(c_ServiceName," l_lot_size :%ld:",l_lot_size);
    			fn_userlog(c_ServiceName," li_stp_lss_tgr_prc :%ld:",li_stp_lss_tgr_prc);
    			fn_userlog(c_ServiceName," l_lmt_rt :%ld:",l_lmt_rt);
    			fn_userlog(c_ServiceName," c_cvr_ordr_flw :%c:",c_cvr_ordr_flw);
    			fn_userlog(c_ServiceName," d_mrkt_wd_pstn :%lf:",d_mrkt_wd_pstn);
    			fn_userlog(c_ServiceName," d_mtm_opn_val :%lf:",d_mtm_opn_val);
    			fn_userlog(c_ServiceName," d_price :%lf:",d_price);
			fn_userlog(c_ServiceName," d_t2t_prc :%lf:",d_t2t_prc); /*** Ver 4.0 ***/
    			fn_userlog(c_ServiceName," d_wgt_avrg_price :%lf:",d_wgt_avrg_price);
    			fn_userlog(c_ServiceName," d_utrd_mrgn :%lf:",d_utrd_mrgn);
    			fn_userlog(c_ServiceName," d_ord_mrgn :%lf:",d_ord_mrgn);
    			fn_userlog(c_ServiceName," d_umin_trd_mrgn :%lf:",d_umin_trd_mrgn);
    			fn_userlog(c_ServiceName," d_avilable_amount :%lf:",d_avilable_amount);
    			fn_userlog(c_ServiceName," d_unlz_pl :%lf:",d_unlz_pl);
    			fn_userlog(c_ServiceName," c_addmrgn_flg :%c:",c_addmrgn_flg);
    			fn_userlog(c_ServiceName," c_sqroff_flg :%c:",c_sqroff_flg);
    			fn_userlog(c_ServiceName," c_jointsqroff_flg :%c:",c_jointsqroff_flg);
   	 			fn_userlog(c_ServiceName," c_rollover_flag :%c:",c_rollover_flag);
					fn_userlog(c_ServiceName,"FTQ Rollover SPREAD Flag :%c:",c_sprd_roll_flag);  /*** Ver 2.3 ***/
    			fn_userlog(c_ServiceName," c_conv_flg :%c:",c_conv_flg);
    			fn_userlog(c_ServiceName," c_mtm_flg :%c:",c_mtm_flg);
    			fn_userlog(c_ServiceName," c_mod_can_flg :%c:",c_mod_can_flg);
    			fn_userlog(c_ServiceName," c_cvr_ordr_stts :%c:",c_cvr_ordr_stts);
    			fn_userlog(c_ServiceName," c_spl_flg :%c:",c_spl_flg);
          fn_userlog(c_ServiceName," c_call_mod_serv_flag :%c:",c_call_mod_serv_flag);           /*** Ver 1.3 ***/ 
          fn_userlog(c_ServiceName," c_sltp_sqoff_at_mkt_flag :%c:",c_sltp_sqoff_at_mkt_flag); /*** Ver 1.3 ***/ 
				}

				if( DEBUG_MSG_LVL_0 )
				{
					fn_userlog(c_ServiceName,"c_undrlyng :%s:,c_expry_dt :%s:,c_cntrct_tag :%c:,i_tag_cnt :%d:",c_undrlyng, c_expry_dt ,c_cntrct_tag ,i_tag_cnt);
				}
        
        if( DEBUG_MSG_LVL_3 )   /** debug level added in ver 4.1 **/
        { 
          fn_userlog(c_ServiceName,"From time  :%s:",c_bullet_frm_time.arr );
          fn_userlog(c_ServiceName,"end time  :%s:",c_bullet_end_time.arr );         
        }   
    		i_returncode = fn_pack_vartofml ( c_ServiceName,
                                      c_err_msg,
                                      &ptr_fml_Obuf,
                                      68,	/** Ver 1.2 chnaged from 39 to 40 **/ /* changed to 52 in ver 1.3 */ 	/** Ver 1.4  changed from 52 to 53  **/  /** ver 1.5 changed from 53 to 54 **/ /** ver 1.6 changed from 54 to 55 **//* changed to 59 in Ver 1.7 */ /* Ver 2.1 changed from 59 to 60 */ /* Changed from 59 to 61 in Ver 2.2 ***/ /* Changed to 63 In Ver 2.3 */   /** Ver 2.4 changed from 63 to 65  **/    /*** 67 to 68 in Ver 4.0 ***/
                             					/* Ver 3.5 changed from 65 to 67 */
																	   	/** FFO_EBA_MTCH_ACT_NO,(char *)&c_mtch_accnt_no, ** Commented in Ver 2.0 **/
																			FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no, /** Ver 2.0 **/
                                      FFO_PRDCT_TYP,(char *)&c_prd_typ,
                                      FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,
                                      FFO_UNDRLYNG,(char *)c_undrlyng,
                                      FFO_XCHNG_CD,(char *)c_xchng_cd,
                                      FFO_EXPRY_DT,(char *)c_expry_dt,
                                      FFO_OPT_TYP,(char *)&c_opt_typ,
                                      FFO_STRK_PRC,(char *)&l_strike_prc,
                                      FFO_EXER_TYP,(char *)&c_exrc_typ,
                                      FFO_CNTRCT_TAG,(char *)&c_cntrct_tag,
                                      FFO_C_OPNPSTN_QTY,(char *)&l_opnpstn_qty,
                                      FFO_C_OPNPSTN_FLW,(char *)&c_opnpstn_flw,
                                      FFO_CVR_QTY,(char *)&l_cvr_qty,
                                      FFO_LST_TRD_PRC,(char *)&l_cmp,
                                      FFO_UI_BUY_QTY,(char *)&l_ibuy_qty,
                                      FFO_UI_SELL_QTY,(char *)&l_isell_qty,
                                      FFO_MIN_LOT_QTY,(char *)&l_lot_size,
                                      FFO_STP_LSS_TGR,(char *)&li_stp_lss_tgr_prc,
                                      FFO_LMT_RT,(char *)&l_lmt_rt,
                                      FFO_ORDR_FLW,(char *)&c_cvr_ordr_flw,
                                      FFO_PSTN_AMT_BLKD,(char *)&d_mrkt_wd_pstn,
                                      FFO_C_MTM_OPN_VAL,(char *)&d_mtm_opn_val,
                                      FFO_U_IMTM_SPRD_PL,(char *)&d_wgt_avrg_price,
				      FFO_EFF_CLS_PRC, (char *) &d_t2t_prc, /*** Ver 4.0 ***/
                                      FFO_AMOUNT,(char *)&d_utrd_mrgn,
                                      FFO_U_ORDR_MRGN,(char *)&d_ord_mrgn,
                                      FFO_U_MM_TRD_MRGN,(char *)&d_umin_trd_mrgn,
                                      FFO_BAL_AMT,(char *)&d_avilable_amount,
                                      FFO_UNRLZD_PL,(char *)&d_unlz_pl,
                                      FFO_DWL_FLG,(char *)&c_addmrgn_flg,
                                      FFO_SPL_FLG,(char *)&c_sqroff_flg,
                                      FFO_STATUS_FLG,(char *)&c_jointsqroff_flg,
                                      FFO_QT_TRDNG_FLG,(char *)&c_rollover_flag,
																			FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flag,     /***  Ver 2.3 ***/
                                      FFO_FUT_CONV_FLG,(char *)&c_conv_flg,
                                      FFO_MTM_FLG,(char *)&c_mtm_flg,
                                      FFO_MOD_CAN_FLG,(char *)&c_mod_can_flg,
                                      FFO_IS_FLG,(char *)&c_cvr_ordr_stts,
                                      FFO_RQST_TYP,(char *)&c_spl_flg,
																			FFO_COUNTER,(char *)&i_tag_cnt,	
																			FFO_ORDR_RFRNC,(char *)c_sltp_ordr_rfrnc,
																			FFO_CURR_RT, (char *)&l_null,    /*** ver 1.2  ***/
                                      FFO_DAM_TRNSCTN, (char *)&c_call_mod_serv_flag,    /*** Ver 1.3 ***/ 
                                      FFO_STLMNT_TYP, (char *)&c_sltp_sqoff_at_mkt_flag,      /*** Ver 1.3 ***/
                                      FFO_DLVRY_ALLWD, (char *)&c_cvr_ordr_stts,  /*** Ver 1.3 ***/
                                      FFO_ORD_TYP, (char *)&c_frsh_slm_flg,       /*** Ver 1.3 ***/
                                      FFO_BOARD_LOT_QTY, (char *)&l_frsh_exctd_qty, /*** Ver 1.3 ***/
                                      FFO_TMPLT, (char *)&l_frsh_unexctd_qty,       /*** Ver 1.3 ***/
                                      FFO_XCHNG_CAN_QTY, (char *)&l_cvr_unexctd_qty, /*** Ver 1.3 ***/ 
                                      FFO_EX_ORDR_TYP, (char *)&c_cvr_slm_flg,       /*** Ver 1.3 ***/
                                      FFO_ORD_TOT_QTY, (char *)&l_tot_ord_qty,       /*** Ver 1.3 ***/
                                      FFO_FUT_PRC, (char *)&d_price,            /*** Ver 1.3 ***/
                                      FFO_PLG_ORDR_RFRNC, (char *)c_ordr_rfrnc,    /*** Ver 1.3 ***/
                                      FFO_EXRC_STTS, (char *)&c_frsh_ordr_stts,   /*** Ver 1.3 ***/ 
																			FFO_RMS_PRCSD_FLG, (char *)&c_null,                          /*** Ver 1.4 ***/
                                      FFO_DR_CR_FLG, (char *)&c_null,                              /*** ver 1.5 ***/
																			FFO_NKD_BLKD_FLG, (char *)&c_null,       													 /*** Ver 1.6 ***/
                                      FFO_UPLD_MTCH_FLG, (char *)&c_plc_cvr_ordr_flg,   /*** Ver 1.7 ***/
                                      FFO_EXRC_QTY, (char *)&l_null,        /*** Ver 1.7 ***/
                                      FFO_ORD_VALID_DT, (char *)c_ord_val_dt,         /*** Ver 1.7 ***/
                                      FFO_EBA_STTS, (char *)&c_cvr_fc_flg,         /*** Ver 1.7 ***/
                                      FFO_BK_UBK_FLG,(char *)&c_null,              /*** Ver 2.1 ***/
                                      FFO_ND_STRT_DT, (char *)c_bullet_frm_time.arr, /*** Ver 2.2 ***/
                                      FFO_ND_END_DT, (char *)c_bullet_end_time.arr,   /*** Ver 2.2 ***/
                                      FFO_SO_AMT_BLKD, (char *)&d_null, /** Ver 2.4 **/
                                      FFO_OPNPSTN_VAL, (char *)&d_null, /** Ver 2.4 **/
                                      FFO_INDX_INDCTR, (char *)&c_null,     /*** Ver 3.5 ***/
                                      /**FFO_STLMNT_TYP, (char *)&c_null       *** Ver 3.5 *** ** Ver 3.8 **/
                                      FFO_BNK_STTS, (char *)&c_null       /*** Ver 3.8 ***/
                                     );
         

    		if ( i_returncode == -1 )
    		{
      		fn_errlog( c_ServiceName, "S31305", FMLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
					EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

			}
			else if(c_prd_typ == 'I')
  		{
    		c_prev_prdct_typ = '\0';
				d_avilable_amount=0.0;	
      	l_cmp = 0;
      	d_umin_trd_mrgn = 0.0;
      	d_und_avail_mrgn =0.0;
      	c_addmrgn_flg = '\0';
      	c_sqroff_flg = '\0';
      	c_rollover_flag = '\0';
				c_sprd_roll_flag = 'N';
      	c_conv_flg  = '\0';
      	c_mtm_flg   = '\0';
      	c_mod_can_flg = '\0';
				l_merge_counter =	0;

    		/** Getting the total executed value and quantity of FRESH order. **/
   
        /*** Commented in Ver 1.9 ***
 
				EXEC SQL
    			SELECT  SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),
            		  SUM(FTD_EXCTD_QTY)
    			INTO    :d_frsh_exe_val,
          			  :li_tot_exec_qty
    			FROM    FTD_FO_TRD_DTLS
    			WHERE   FTD_ORDR_RFRNC = :c_ordr_rfrnc;

        ************************/

        /*** Ver 1.9 Starts ***/

        EXEC SQL
     			SELECT   NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FTD_EXCTD_QTY ) ), 0 ),
          		     NVL( SUM( DECODE( FOD_FC_FLAG, 'C', FTD_EXCTD_QTY, 0 ) ), 0 ),
             			 NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FTD_EXCTD_QTY * FTD_EXCTD_RT ) ),0),
            		   NVL( SUM( DECODE( FOD_FC_FLAG, 'C', FTD_EXCTD_QTY * FTD_EXCTD_RT, 0 ) ),0)
      		 INTO    :d_frs_exe_qty,
                   :d_cvr_exe_qty,
                   :d_frs_exe_val,
                   :d_cvr_exe_val
           FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
           WHERE   FTD_ORDR_RFRNC  = FOD_ORDR_RFRNC
           AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_ordr_rfrnc; 
 
        /*** Ver 1.9 Ends ***/

				if( DEBUG_MSG_LVL_3 )
				{
          /*** Commentd in Ver 1.9 as variables are not used ***
					fn_userlog(c_ServiceName,"d_frsh_exe_val :%lf:",d_frsh_exe_val);
					fn_userlog(c_ServiceName,"li_tot_exec_qty :%ld:",li_tot_exec_qty);
          ***/
          /*** Ver 1.9 Starts ***/
      
          fn_userlog(c_ServiceName,"d_frs_exe_qty :%lf:",d_frs_exe_qty);
          fn_userlog(c_ServiceName,"d_frs_exe_val :%lf:",d_frs_exe_val);
          fn_userlog(c_ServiceName,"d_cvr_exe_qty :%lf:",d_cvr_exe_qty);
          fn_userlog(c_ServiceName,"d_cvr_exe_val :%lf:",d_cvr_exe_val);
   
          /*** Ver 1.9 Ends ***/
				}

    		if( SQLCODE != 0 )
    		{
      		fn_errlog( c_ServiceName, "S31310", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
					EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

    		d_wgt_avrg_price = 0.0;
    	  /*** 	d_wgt_avrg_price = (double) (d_frsh_exe_val / li_tot_exec_qty); Commented in Ver 1.9 ***/

       /*** Ver 1.9 Starts ***/

       if (l_opnpstn_qty > 0) /*** Fresh open postion ***/
       {
         d_wgt_avrg_price = d_frs_exe_val / d_frs_exe_qty;
       }
       else if (l_opnpstn_qty < 0) /*** Cover open Qty ***/
       {
         d_wgt_avrg_price = d_cvr_exe_val / d_cvr_exe_qty;
       }

       /*** Ver 1.9 Ends ***/

 
       /*** Added for Ver 2.2 ***/
        
       if (c_frsh_ordr_stts == EXECUTED )
       {
           EXEC SQL
               SELECT  NVL(CLM_BULLET_SCHM_FLG,'N')
               INTO    :c_bullet_schm_flg
               FROM    CLM_CLNT_MSTR
               WHERE   CLM_MTCH_ACCNT =:c_mtch_accnt_no ;

        if( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S31315", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
          EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        strcpy(c_bullet_frm_time.arr,"NA");
        strcpy(c_bullet_end_time.arr,"NA");

        if (c_bullet_schm_flg == 'Y'  )
           {
            EXEC SQL
              SELECT  TO_CHAR(MAX(FTD_TRD_DT),'HH24:MI:SS'),
                      TO_CHAR(MAX(FTD_TRD_DT) + :c_bullet_param * 1/24/60/60,'HH24:MI:SS')
              INTO    :c_bullet_frm_time,
                      :c_bullet_end_time
              FROM    FTD_FO_TRD_DTLS
              WHERE   FTD_ORDR_RFRNC = :c_ordr_rfrnc;

        if( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S31320", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if( c_cvr_ordr_stts == 'D' || c_cvr_ordr_stts == 'C' )
        {
         strcpy(c_bullet_frm_time.arr,"NA");
         strcpy(c_bullet_end_time.arr,"NA");
        }
       
       
       if( DEBUG_MSG_LVL_3 )
        {
          fn_userlog(c_ServiceName,"------Bullet timing----");
          fn_userlog(c_ServiceName,"From time  :%s:",c_bullet_frm_time.arr );
          fn_userlog(c_ServiceName,"end time  :%s:",c_bullet_end_time.arr );
        }

       }
      }
        SETLEN(c_bullet_frm_time);
        SETLEN(c_bullet_end_time);



      /*** End for Ver 2.2 ***/      

     		EXEC SQL
      		SELECT  NVL(FTQ_LST_TRD_PRC,0),
                  FTQ_MIN_LOT_QTY
      		INTO    :l_cmp,
                  :l_lot_size 
      		FROM    FTQ_FO_TRD_QT
      		WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
     /*** 		AND     FTQ_PRDCT_TYP = 'O'   Commented in Ver 1.8 to remove hard parsing ***/
          AND     FTQ_PRDCT_TYP = :c_opt_prd_typ  /*** Ver 1.8 hard coding replaced with binding variable ***/   
      		/** AND     trim(FTQ_UNDRLYNG)  = :c_undrlyng ** 3.6 **/
          AND     FTQ_UNDRLYNG  = :c_undrlyng     /** trim Remove in Ver 3.6 **/
      		AND     FTQ_EXPRY_DT  = :c_expry_dt
      		AND     FTQ_OPT_TYP   = :c_opt_typ
      		AND     FTQ_STRK_PRC  = :l_strike_prc
      		AND     FTQ_EXER_TYP  = :c_exrc_typ;

    		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    		{
      		fn_errlog( c_ServiceName, "S31325", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
					EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

				if( DEBUG_MSG_LVL_3 )
				{
					fn_userlog(c_ServiceName,"l_cmp :%ld:",l_cmp);
				}
    		if ( c_opnpstn_flw == BUY )
    		{
          if (l_opnpstn_qty > 0 ) /*** If condition added in Ver 1.9 ***/
          {
      		  d_unlz_pl = ((double)l_cmp - d_wgt_avrg_price) * (double)l_opnpstn_qty;
          }
          else  /*** Else block  added in Ver 1.9  ***/
          {
            d_unlz_pl = (d_wgt_avrg_price - (double)l_cmp) * (double)l_opnpstn_qty;
          }
    		}
    		else if ( c_opnpstn_flw == SELL )
    		{
          if (l_opnpstn_qty > 0 ) /*** If condition added in Ver 1.9 ***/
          {
      		  d_unlz_pl = (d_wgt_avrg_price - (double)l_cmp) * (double)l_opnpstn_qty;
          }
          else   /*** Else block  added in Ver 1.9  ***/
          {
            d_unlz_pl = ((double)l_cmp - d_wgt_avrg_price) * (double)l_opnpstn_qty;
          }
    		}

    		c_mod_can_flg = 'N';
        c_call_mod_serv_flag = 'N'; /*** Ver 1.3 ***/
        c_sltp_sqoff_at_mkt_flag = 'N';  /*** Ver 1.3 ***/
        c_plc_cvr_ordr_flg = 'N'; /*** Added in Ver 1.7 ***/

        if ( ( c_frsh_ordr_stts == EXECUTED ) && ( c_cvr_ordr_stts == ORDERED  || c_cvr_ordr_stts == PARTIALLY_EXECUTED ) )
        {
          c_mod_can_flg = 'Y';
          c_call_mod_serv_flag = 'M'; /*** Ver 1.3 ***/
          c_sltp_sqoff_at_mkt_flag = 'Y';  /*** Ver 1.3 ***/
        }
        else if ( (c_frsh_ordr_stts == PARTIALLY_EXECUTED ) && ( c_cvr_ordr_stts == ORDERED) )  /*** Ver 1.3 ***/
        {
         c_mod_can_flg = 'Y';
         c_call_mod_serv_flag = 'P';
         c_sltp_sqoff_at_mkt_flag = 'N';
        }

    		if ( ( c_cvr_ordr_stts == ORDERED ) ||
         		( c_cvr_ordr_stts == PARTIALLY_EXECUTED ) )
    		{
       		if( DEBUG_MSG_LVL_5 ) 
      	 	{
        		fn_userlog(c_ServiceName," ptr_st_orderbook->c_xchng_cd :%s:",c_xchng_cd);
        		fn_userlog(c_ServiceName," ptr_st_orderbook->c_sltp_ordr_rfrnc :%s:",c_sltp_ordr_rfrnc);
        		fn_userlog(c_ServiceName," ptr_st_orderbook->l_mdfctn_cntr :%ld:",l_mdfctn_cntr);
       		}

       		EXEC SQL
           	SELECT fxb_rqst_typ,
                   fxb_plcd_stts
           	INTO   :c_fxb_rqst_typ,
                   :c_fxb_plcd_stts
           	FROM   fxb_fo_xchng_book
           	WHERE  fxb_xchng_cd    = :c_xchng_cd
           	AND    fxb_ordr_rfrnc  = :c_sltp_ordr_rfrnc
           	AND    fxb_mdfctn_cntr = :l_mdfctn_cntr;
       
					if ( SQLCODE != 0 )
       		{
          	fn_errlog( c_ServiceName, "S31330", SQLMSG, c_err_msg  );
            /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
            EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
						EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
          	tpfree ( ( char * ) ptr_fml_Obuf );
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       		}
       		if (( c_fxb_rqst_typ == CANCELLED ) && ( c_fxb_plcd_stts != REJECT ))
       		{
           	c_mod_can_flg = 'N';
       		}
    		}

        /*** Ver 1.3 Starts ***/

        if (c_frsh_ordr_stts == PARTIALLY_EXECUTED && c_cvr_ordr_stts == REJECTED )
        {
         c_cvr_ordr_stts = 'Z';  /*** In order to disable place cover order link ***/
         c_plc_cvr_ordr_flg = 'N';    /*** Added in Ver 1.7 ***/
        }
        else if ( c_cvr_ordr_stts == REJECTED )  /*** Added in Ver 1.7 ***/ 
        {
         c_plc_cvr_ordr_flg = 'Y';
        }

        /*** Ver 1.9 Starts ***/

        if(l_opnpstn_qty < 0 ) 
        {
          l_opnpstn_qty = (-1) * l_opnpstn_qty;  
        }

        /*** Ver 1.9 Ends ***/

        if ( DEBUG_MSG_LVL_3 )  /** ver 4.1 debug level changed to 3 **/
        {
         fn_userlog(c_ServiceName," MARKET TO LIMIT CHANGES LOGS ");  
         fn_userlog(c_ServiceName," Cover Order Status IS :%c",c_cvr_ordr_stts);  
         fn_userlog(c_ServiceName," Fresh Limit/Market Flag IS :%c:",c_frsh_slm_flg); 
         fn_userlog(c_ServiceName," Fresh Executed Qty IS :%ld:",l_frsh_exctd_qty);   
         fn_userlog(c_ServiceName," Fresh Unexecuted Qty IS :%ld:",l_frsh_unexctd_qty);
         fn_userlog(c_ServiceName," Cover Unexecuted Qty IS :%ld:",l_cvr_unexctd_qty); 
         fn_userlog(c_ServiceName," Cover Limit/Market Flag IS :%c:",c_cvr_slm_flg);   
         fn_userlog(c_ServiceName," Total Ordered Qty IS :%ld:",l_tot_ord_qty);      
         fn_userlog(c_ServiceName," Fresh Limit Price IS :%lf:", d_price);          
	 fn_userlog(c_ServiceName," d_t2t_prc :%lf:",d_t2t_prc); /*** Ver 4.0 ***/
         fn_userlog(c_ServiceName," Fresh Order Reference IS :%s:",c_ordr_rfrnc);  
         fn_userlog(c_ServiceName," Fresh Order Status IS :%c:",c_frsh_ordr_stts);
        }

        /*** Ver 1.3 Ends ***/

    		c_spl_flg = CONTRACT_IP;
				i_tag_cnt++;
		
				if( DEBUG_MSG_LVL_3)
				{
    			fn_userlog(c_ServiceName,"Before packing");
    			fn_userlog(c_ServiceName," c_mtch_accnt_no :%s:",c_mtch_accnt_no);
    			fn_userlog(c_ServiceName," c_prd_typ :%c:",c_prd_typ);
    			fn_userlog(c_ServiceName," c_ctgry_indstk :%c:",c_ctgry_indstk);
    			fn_userlog(c_ServiceName," c_undrlyng :%s:",c_undrlyng);
    			fn_userlog(c_ServiceName," c_xchng_cd :%s:",c_xchng_cd);
    			fn_userlog(c_ServiceName," c_expry_dt :%s:",c_expry_dt);
   	 			fn_userlog(c_ServiceName," c_opt_typ :%c:",c_opt_typ);
    			fn_userlog(c_ServiceName," l_strike_prc :%ld:",l_strike_prc);
    			fn_userlog(c_ServiceName," c_exrc_typ :%c:",c_exrc_typ);
    			fn_userlog(c_ServiceName," c_cntrct_tag :%c:",c_cntrct_tag);
    			fn_userlog(c_ServiceName," l_opnpstn_qty :%ld:",l_opnpstn_qty);
    			fn_userlog(c_ServiceName," c_opnpstn_flw :%c:",c_opnpstn_flw);
    			fn_userlog(c_ServiceName," l_cvr_qty :%ld:",l_cvr_qty);
    			fn_userlog(c_ServiceName," l_cmp :%ld:",l_cmp);
    			fn_userlog(c_ServiceName," l_ibuy_qty :%ld:",l_ibuy_qty);
    			fn_userlog(c_ServiceName," l_isell_qty :%ld:",l_isell_qty);
    			fn_userlog(c_ServiceName," l_lot_size :%ld:",l_lot_size);
    			fn_userlog(c_ServiceName," li_stp_lss_tgr_prc :%ld:",li_stp_lss_tgr_prc);
    			fn_userlog(c_ServiceName," l_lmt_rt :%ld:",l_lmt_rt);
    			fn_userlog(c_ServiceName," c_cvr_ordr_flw :%c:",c_cvr_ordr_flw);
    			fn_userlog(c_ServiceName," d_mrkt_wd_pstn :%lf:",d_mrkt_wd_pstn);
    			fn_userlog(c_ServiceName," d_mtm_opn_val :%lf:",d_mtm_opn_val);
    			fn_userlog(c_ServiceName," d_price :%lf:",d_price);
			fn_userlog(c_ServiceName," d_t2t_prc :%lf:",d_t2t_prc); /*** Ver 4.0 ***/
    			fn_userlog(c_ServiceName," d_wgt_avrg_price :%lf:",d_wgt_avrg_price);
    			fn_userlog(c_ServiceName," d_utrd_mrgn :%lf:",d_utrd_mrgn);
    			fn_userlog(c_ServiceName," d_ord_mrgn :%lf:",d_ord_mrgn);
    			fn_userlog(c_ServiceName," d_umin_trd_mrgn :%lf:",d_umin_trd_mrgn);
    			fn_userlog(c_ServiceName," d_avilable_amount :%lf:",d_avilable_amount);
    			fn_userlog(c_ServiceName," d_unlz_pl :%lf:",d_unlz_pl);
    			fn_userlog(c_ServiceName," c_addmrgn_flg :%c:",c_addmrgn_flg);
    			fn_userlog(c_ServiceName," c_sqroff_flg :%c:",c_sqroff_flg);
    			fn_userlog(c_ServiceName," c_jointsqroff_flg :%c:",c_jointsqroff_flg);
    			fn_userlog(c_ServiceName," c_rollover_flag :%c:",c_rollover_flag);
					fn_userlog(c_ServiceName,"FTQ Rollover SPREAD Flag :%c:",c_sprd_roll_flag);  /*** Ver 2.3 ***/
    			fn_userlog(c_ServiceName," c_conv_flg :%c:",c_conv_flg);
    			fn_userlog(c_ServiceName," c_mtm_flg :%c:",c_mtm_flg);
    			fn_userlog(c_ServiceName," c_mod_can_flg :%c:",c_mod_can_flg);
    			fn_userlog(c_ServiceName," c_cvr_ordr_stts :%c:",c_cvr_ordr_stts);
    			fn_userlog(c_ServiceName," c_spl_flg :%c:",c_spl_flg);
          fn_userlog(c_ServiceName," c_call_mod_serv_flag :%c:",c_call_mod_serv_flag);           /*** Ver 1.3 ***/
          fn_userlog(c_ServiceName," c_sltp_sqoff_at_mkt_flag :%c:",c_sltp_sqoff_at_mkt_flag); /*** Ver 1.3 ***/
				}

				if( DEBUG_MSG_LVL_0 )
				{
					fn_userlog(	c_ServiceName,"c_undrlyng :%s:,c_expry_dt :%s:,c_cntrct_tag :%c:,i_tag_cnt :%d:",c_undrlyng, c_expry_dt ,c_cntrct_tag ,i_tag_cnt);
				}

	/*** Ver 1.2 Starts ****/
		
		 	EXEC SQL
          SELECT  LTQ_RT * 100
          into    :l_spot_prc
          FROM    LTQ_TRD_QT
          WHERE   LTQ_STCK_CD = :c_undrlyng
          AND     LTQ_XCHNG_CD = DECODE(:c_xchng_cd,'NFO','NSE','BFO','BSE');

        if( SQLCODE != 0) 
        {
          fn_errlog( c_ServiceName, "S31335", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Ver 2.0 *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
          EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

		fn_userlog(c_ServiceName, "Span OpnPlus....Underlying:%s    Spot Price:%ld", c_undrlyng,l_spot_prc);

	/*** Ver 1.2 Ends ****/

    		i_returncode = fn_pack_vartofml ( c_ServiceName,
                                      c_err_msg,
                                      &ptr_fml_Obuf,
                                      68, 	/** Ver 1.2 changed from 39 to 40 **/ /* changed to 52 in ver 1.3 */  /** Ver 1.4
changed from 52 to 53  **/  /** ver 1.5 changed from 53 to 54 **/ /** ver 1.6 changed from 54 to 55 **//*changed to 59 in Ver 1.7 */ /* Ver 2.1 changed from 59 to 60 */ /* Changed from 60 to 62 in Ver 2.2 */ /* Changed to 63 in Ver 2.3 */ /** Ver 2.4  changed from 63 to 65 **/
                                 			/* Ver 3.5 changed from 65 to 67 */ /*** 67 to 68 in Ver 4.0 ***/
																			/** FFO_EBA_MTCH_ACT_NO,(char *)&c_mtch_accnt_no, ** Commented in Ver 2.0 **/
																			FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no,	/** Ver 2.0 **/
                                      FFO_PRDCT_TYP,(char *)&c_prd_typ,
                                      FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,
                                      FFO_UNDRLYNG,(char *)c_undrlyng,
                                      FFO_XCHNG_CD,(char *)c_xchng_cd,
                                      FFO_EXPRY_DT,(char *)c_expry_dt,
                                      FFO_OPT_TYP,(char *)&c_opt_typ,
                                      FFO_STRK_PRC,(char *)&l_strike_prc,
                                      FFO_EXER_TYP,(char *)&c_exrc_typ,
                                      FFO_CNTRCT_TAG,(char *)&c_cntrct_tag,
                                      FFO_C_OPNPSTN_QTY,(char *)&l_opnpstn_qty,
                                      FFO_C_OPNPSTN_FLW,(char *)&c_opnpstn_flw,
                                      FFO_CVR_QTY,(char *)&l_cvr_qty,
                                      FFO_LST_TRD_PRC,(char *)&l_cmp,
                                      FFO_UI_BUY_QTY,(char *)&l_ibuy_qty,
                                      FFO_UI_SELL_QTY,(char *)&l_isell_qty,
                                      FFO_MIN_LOT_QTY,(char *)&l_lot_size,
                                      FFO_STP_LSS_TGR,(char *)&li_stp_lss_tgr_prc,
                                      FFO_LMT_RT,(char *)&l_lmt_rt,
                                      FFO_ORDR_FLW,(char *)&c_cvr_ordr_flw,
                                      FFO_PSTN_AMT_BLKD,(char *)&d_mrkt_wd_pstn,
                                      FFO_C_MTM_OPN_VAL,(char *)&d_mtm_opn_val,
                                      FFO_U_IMTM_SPRD_PL,(char *)&d_wgt_avrg_price,
				      FFO_EFF_CLS_PRC, (char *) &d_t2t_prc, /*** Ver 4.0 ***/
                                      FFO_AMOUNT,(char *)&d_utrd_mrgn,
                                      FFO_U_ORDR_MRGN,(char *)&d_ord_mrgn,
                                      FFO_U_MM_TRD_MRGN,(char *)&d_umin_trd_mrgn,
                                      FFO_BAL_AMT,(char *)&d_avilable_amount,
                                      FFO_UNRLZD_PL,(char *)&d_unlz_pl,
                                      FFO_DWL_FLG,(char *)&c_addmrgn_flg,
                                      FFO_SPL_FLG,(char *)&c_sqroff_flg,
                                      FFO_STATUS_FLG,(char *)&c_jointsqroff_flg,
                                      FFO_QT_TRDNG_FLG,(char *)&c_rollover_flag,
																			FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flag,     /***  Ver 2.3 ***/
                                      FFO_FUT_CONV_FLG,(char *)&c_conv_flg,
                                      FFO_MTM_FLG,(char *)&c_mtm_flg,
                                      FFO_MOD_CAN_FLG,(char *)&c_mod_can_flg,
                                      FFO_IS_FLG,(char *)&c_cvr_ordr_stts,
                                      FFO_RQST_TYP,(char *)&c_spl_flg,
																			FFO_COUNTER,(char *)&i_tag_cnt,
																			FFO_ORDR_RFRNC,(char *)c_sltp_ordr_rfrnc,
																			FFO_CURR_RT, (char *)&l_spot_prc,    /*** ver 1.2  ***/
                                      FFO_DAM_TRNSCTN, (char *)&c_call_mod_serv_flag,    /*** Ver 1.3 ***/
                                      FFO_STLMNT_TYP, (char *)&c_sltp_sqoff_at_mkt_flag,      /*** Ver 1.3 ***/
                                      FFO_DLVRY_ALLWD, (char *)&c_cvr_ordr_stts,  /*** Ver 1.3 ***/
                                      FFO_ORD_TYP, (char *)&c_frsh_slm_flg,       /*** Ver 1.3 ***/
                                      FFO_BOARD_LOT_QTY, (char *)&l_frsh_exctd_qty, /*** Ver 1.3 ***/
                                      FFO_TMPLT, (char *)&l_frsh_unexctd_qty,       /*** Ver 1.3 ***/
                                      FFO_XCHNG_CAN_QTY, (char *)&l_cvr_unexctd_qty, /*** Ver 1.3 ***/
                                      FFO_EX_ORDR_TYP, (char *)&c_cvr_slm_flg,       /*** Ver 1.3 ***/
                                      FFO_ORD_TOT_QTY, (char *)&l_tot_ord_qty,       /*** Ver 1.3 ***/
                                      FFO_FUT_PRC, (char *)&d_price,            /*** Ver 1.3 ***/
                                      FFO_PLG_ORDR_RFRNC, (char *)c_ordr_rfrnc,    /*** Ver 1.3 ***/
                                      FFO_EXRC_STTS, (char *)&c_frsh_ordr_stts,   /*** Ver 1.3 ***/
                                      FFO_RMS_PRCSD_FLG, (char *)&c_null,                     /*** Ver 1.4 ***/
                                      FFO_DR_CR_FLG, (char *)&c_null,                          /*** ver 1.5 ***/
																			FFO_NKD_BLKD_FLG, (char *)&c_null,       											/*** Ver 1.6 ***/
                                      FFO_UPLD_MTCH_FLG, (char *)&c_plc_cvr_ordr_flg,   /*** Ver 1.7 ***/
                                      FFO_EXRC_QTY, (char *)&l_null,        /*** Ver 1.7 ***/
                                      FFO_ORD_VALID_DT, (char *)c_ord_val_dt,         /*** Ver 1.7 ***/
                                      FFO_EBA_STTS, (char *)&c_cvr_fc_flg,        /*** Ver 1.7 ***/
                                      FFO_BK_UBK_FLG,(char *)&c_null,             /*** Ver 2.1 ***/
                                      FFO_ND_STRT_DT, (char *)c_bullet_frm_time.arr, /*** Ver 2.2 ***/
                                      FFO_ND_END_DT, (char *)c_bullet_end_time.arr,   /*** Ver 2.2 ***/
                                      FFO_SO_AMT_BLKD, (char *)&d_null, /** Ver 2.4 **/ 
                                      FFO_OPNPSTN_VAL, (char *)&d_null, /** Ver 2.4 **/
                                      FFO_INDX_INDCTR, (char *)&c_null,     /*** Ver 3.5 ***/
                                      /***FFO_STLMNT_TYP, (char *)&c_null       *** Ver 3.5 *** ver 3.8 **/
                                      FFO_BNK_STTS, (char *)&c_null       /*** Ver 3.8 ***/
                                      );

    		if ( i_returncode == -1 )
    		{
      		fn_errlog( c_ServiceName, "S31340", FMLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur;  *** Commented in Ver 3.4 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/  
					EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}


  		}

			if( DEBUG_MSG_LVL_0 )
			{
  			fn_userlog(c_ServiceName,"c_tmp_undrlying :%s:,c_undrlyng :%s:,i_grp_cnt :%d:",c_tmp_undrlying,c_undrlyng,i_grp_cnt);
			}

			if( c_opnpstn_flw == 'B' )
    		l_grp_opn_qty = l_grp_opn_qty + l_opnpstn_qty;
  		else if( c_opnpstn_flw == 'S' )
    		l_grp_opn_qty  = l_grp_opn_qty - l_opnpstn_qty;


  		if(i_prev_tag_cnt != i_tag_cnt )
			{
				d_grp_trd_mrgn = d_grp_trd_mrgn + d_utrd_mrgn; 
 			} 	

			d_grp_pl = d_grp_pl + d_unlz_pl;
  		d_grp_ord_mrgn = d_grp_ord_mrgn + d_ord_mrgn;

			if( DEBUG_MSG_LVL_3)
			{
  			fn_userlog(c_ServiceName,"d_grp_ord_mrgn2 :%lf:", d_grp_ord_mrgn);
  			fn_userlog(c_ServiceName,"d_grp_trd_mrgn2 :%lf:", d_grp_trd_mrgn);
  			fn_userlog(c_ServiceName,"d_grp_pl2 :%lf:", d_grp_pl);
  			fn_userlog(c_ServiceName,"SPAN d_tot_profit_loss :%lf:", d_tot_profit_loss);
			}

  		strcpy(c_tmp_undrlying,c_undrlyng);
			i_grp_cnt =1;


    	strcpy(c_prev_undrlyng,c_undrlyng);
    	strcpy(c_prev_expry_dt,c_expry_dt);
    	d_utrd_mrgn = 0;
    	c_prev_ctgry_indstk=c_ctgry_indstk;
    	c_prev_exrc_typ=c_exrc_typ;
    	c_prev_prdct_typ=c_prd_typ;
    	d_prev_mtm_opn_val = d_mtm_opn_val;
    	l_prev_strike_prc = l_strike_prc;
    	c_prev_cntrct_tag = c_cntrct_tag;
    	l_prev_opnpstn_qty = l_opnpstn_qty;
    	c_prev_opnpstn_flw = c_opnpstn_flw;
    	l_prev_cvr_qty = l_cvr_qty;
    	l_prev_ibuy_qty = l_ibuy_qty;
    	l_prev_isell_qty = l_isell_qty;
     	i_prev_tag_cnt = i_tag_cnt;
		}  /** END FOR LOOP **/

		EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
    /**** EXEC SQL CLOSE sys_spn_cur;     *** Ver 2.0 ***  Commented in Ver 3.4 ***/
    EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
    EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
	}
	else
	{
		if( ( c_prd_type =='F' || c_prd_type == ALL ) && c_call_ind == 'N' )   /** ver 3.2 **/
		{


     /*** Commented in Ver 3.4 **********

			strcpy ((char *)stmnt.arr,"SELECT ffp_prdct_typ,ffp_indstk,ffp_undrlyng,ffp_expry_dt,ffp_exer_typ,0,'*',ffp_cntrct_tag,ffp_opnpstn_flw,abs(ffp_opnpstn_qty),ffp_mtm_opn_val,decode(ffp_opnpstn_flw,'S',greatest(abs(ffp_ibuy_qty),abs(ffp_exbuy_qty)),'B',greatest(abs(ffp_isell_qty),abs(ffp_exsell_qty)),0),ffp_ibuy_qty,ffp_isell_qty,decode(abs(ffp_opnpstn_qty),0,0,abs(ffp_mtm_opn_val)/abs(ffp_opnpstn_qty)),'*',NVL(FFP_TRG_PRC,0),0,0,0,'*','*','*','*',0,'*',0,0,0,'*',0,0,'*','*',0,1 FROM ffp_fo_futures_pstn WHERE ffp_clm_mtch_accnt ='");  
                            ** Ver 2.4 Added 0 for additional column ** 

			strcat((char *)stmnt.arr,c_mtch_accnt_no);
			strcat((char *)stmnt.arr,"' AND ffp_xchng_cd ='");
			strcat((char *)stmnt.arr,c_xchng_cd);
			strcat((char *)stmnt.arr,"' AND ffp_prdct_typ ='");
      strcat((char *)stmnt.arr,c_fut_prd_typ);
      strcat((char *)stmnt.arr,"' and trim(ffp_undrlyng) like '");
			strcat((char *)stmnt.arr,c_undrlyng);
			strcat((char *)stmnt.arr,"' AND (ffp_opnpstn_qty != 0  OR ffp_ibuy_qty != 0 OR ffp_isell_qty != 0 )");

      *** Ver 1.8 Hard Coding of product type removed from above query ***

     ********* Ver 3.4 Comment Ends ************/
     
   /*** Ver 3.4 Starts ***/
   if (  c_prd_type != ALL )
   {
   EXEC SQL EXECUTE
   BEGIN
   OPEN :sys_cursor FOR
   SELECT ffp_prdct_typ,ffp_indstk,ffp_undrlyng,ffp_expry_dt,ffp_exer_typ,0,'*',ffp_cntrct_tag,ffp_opnpstn_flw,abs(ffp_opnpstn_qty),ffp_mtm_opn_val,decode(ffp_opnpstn_flw,'S',greatest(abs(ffp_ibuy_qty),abs(ffp_exbuy_qty)),'B',greatest(abs(ffp_isell_qty),abs(ffp_exsell_qty)),0),ffp_ibuy_qty,ffp_isell_qty,decode(abs(ffp_opnpstn_qty),0,0,abs(ffp_mtm_opn_val)/abs(ffp_opnpstn_qty)),'*',NVL(FFP_TRG_PRC,0),0,0,0,'*','*','*','*',0,'*',0,0,0,'*',0,0,'*','*',0, NVL(FFP_AVG_PRC,0),1 FROM ffp_fo_futures_pstn /*** FFP_AVG_PRC added in Ver 4.0 ***/
  WHERE ffp_clm_mtch_accnt = :c_mtch_accnt_no
      AND ffp_xchng_cd = :c_xchng_cd
      AND ffp_prdct_typ = :c_fut_prd_typ
      /** and trim(ffp_undrlyng) like :c_undrlyng ** 3.6 **/
      and ffp_undrlyng like :c_undrlyng  /** trim Remove in Ver 3.6 **/
      AND (ffp_opnpstn_qty != 0  OR ffp_ibuy_qty != 0 OR ffp_isell_qty != 0 )
      ORDER BY 3,26,1,8,4;

    END;
    END-EXEC;
    } 
    /*** Ver 3.4 Ends ***/
		}
		if( ( c_prd_type =='P' || c_prd_type == ALL )  && c_call_ind == 'N' )  /** ver 3.2 **/
    {

     /*** Commented in Ver 3.4 ***

			if( c_prd_type == ALL )
			{	
				strcat((char *)stmnt.arr," UNION ALL ");
			}
			else
			{
				strcpy((char *)stmnt.arr,"");
			}
			
	
			strcat((char *)stmnt.arr,"SELECT ffp_prdct_typ,ffp_indstk,ffp_undrlyng, ffp_expry_dt,ffp_exer_typ,0,'*',ffp_cntrct_tag,ffp_opnpstn_flw,abs(ffp_opnpstn_qty),ffp_mtm_opn_val,decode(ffp_opnpstn_flw,'S',greatest(abs(ffp_ibuy_qty),abs(ffp_exbuy_qty)) ,'B',greatest(abs(ffp_isell_qty),abs(ffp_exsell_qty) ),0),ffp_ibuy_qty,ffp_isell_qty,decode(abs(ffp_opnpstn_qty),0,0,abs(ffp_mtm_opn_val)/abs(ffp_opnpstn_qty)),'*',NVL(FFP_TRG_PRC,0),0,0,0,'*','*','*','*',0,'*',0,0,0,'*',0,0,'*','*',0,2  FROM ffp_fo_futures_pstn WHERE ffp_clm_mtch_accnt ='");
			strcat((char *)stmnt.arr,c_mtch_accnt_no);                                    ** Ver 2.4 Added 0 for additional column ** 
			strcat((char *)stmnt.arr,"' AND ffp_xchng_cd ='");
			strcat((char *)stmnt.arr,c_xchng_cd);
			strcat((char *)stmnt.arr,"' AND ffp_prdct_typ ='");
      strcat((char *)stmnt.arr,c_fp_prd_typ); 
      strcat((char *)stmnt.arr,"' and trim(ffp_undrlyng) like '");
			strcat((char *)stmnt.arr,c_undrlyng);
			strcat((char *)stmnt.arr,"' AND  (ffp_opnpstn_qty != 0  OR ffp_ibuy_qty != 0 OR ffp_isell_qty != 0 )");
  
     *** Ver 1.8 Hard coding for product type removed *** 

    ******** Ver 3.4 Comment Ends ******************************/
     
   /*** Ver 3.4 Starts ***/
   if (  c_prd_type != ALL )
   {
   EXEC SQL EXECUTE
   BEGIN
   OPEN :sys_cursor for
   SELECT ffp_prdct_typ,ffp_indstk,ffp_undrlyng, ffp_expry_dt,ffp_exer_typ,0,'*',ffp_cntrct_tag,ffp_opnpstn_flw,abs(ffp_opnpstn_qty),ffp_mtm_opn_val,decode(ffp_opnpstn_flw,'S',greatest(abs(ffp_ibuy_qty),abs(ffp_exbuy_qty)) ,'B',greatest(abs(ffp_isell_qty),abs(ffp_exsell_qty) ),0),ffp_ibuy_qty,ffp_isell_qty,decode(abs(ffp_opnpstn_qty),0,0,abs(ffp_mtm_opn_val)/abs(ffp_opnpstn_qty)),'*',NVL(FFP_TRG_PRC,0),0,0,0,'*','*','*','*',0,'*',0,0,0,'*',0,0,'*','*',0,NVL(FFP_AVG_PRC,0),2  FROM ffp_fo_futures_pstn /*** FFP_AVG_PRC added in Ver 4.0 ***/
   WHERE ffp_clm_mtch_accnt = :c_mtch_accnt_no
      AND ffp_xchng_cd = :c_xchng_cd
      AND ffp_prdct_typ = :c_fp_prd_typ
      /** and trim(ffp_undrlyng) like :c_undrlyng ** 3.6 **/
      and ffp_undrlyng like :c_undrlyng /** trim Remove in Ver 3.6 **/
      AND  (ffp_opnpstn_qty != 0  OR ffp_ibuy_qty != 0 OR ffp_isell_qty != 0 )
      ORDER BY 3,26,1,8,4;

    END;
    END-EXEC;    
    } 
    /*** Ver 3.4 Ends ***/
    }
		if( c_prd_type =='O' || c_prd_type == ALL)
		{
      /******** Commented in Ver 3.4 ******************
   
			if( c_prd_type == ALL && c_call_ind == 'N' ) ** ver 3.2 **
      {
        strcat((char *)stmnt.arr," UNION ALL ");
      }
      else
      {
        strcpy((char *)stmnt.arr,"");
      }

			strcat((char *)stmnt.arr,"select FOP_PRDCT_TYP, FOP_INDSTK,FOP_UNDRLYNG,fop_expry_dt,FOP_EXER_TYP,FOP_STRK_PRC,FOP_OPT_TYP,'*',FOP_OPNPSTN_FLW,abs(FOP_OPNPSTN_QTY),FOP_OPNPSTN_VAL,decode(fop_opnpstn_flw,'S',greatest(abs(fop_ibuy_qty),abs(fop_exbuy_qty)),'B',greatest(abs(fop_isell_qty),abs(fop_exsell_qty)),0),NVL(FOP_IBUY_QTY,0),NVL(FOP_ISELL_QTY,0),decode(FOP_OPNPSTN_QTY,0,0,abs(FOP_OPNPSTN_VAL)/abs(FOP_OPNPSTN_QTY)),'*',NVL( FOP_TRGGR_PRC, 0 ),0,NVL(FOP_UORDR_MRGN,0),NVL(FOP_UEXCTD_MRGN,0),'*','*','*','*',0,'*',0,0,0,'*',0,NVL(FOP_EXRC_QTY,0),'*','*',NVL(FOP_UDLVRY_MRGN,0),3 FROM fop_fo_options_pstn WHERE fop_clm_mtch_accnt = '");
                                   ** Ver 2.4 Added Dlvry mergin column **
       
			strcat((char *)stmnt.arr,c_mtch_accnt_no);
      strcat((char *)stmnt.arr,"' AND fop_xchng_cd ='");
			strcat((char *)stmnt.arr,c_xchng_cd);
     	strcat((char *)stmnt.arr,"' AND trim(FOP_UNDRLYNG) like '");
     	strcat((char *)stmnt.arr,c_undrlyng);
			strcat((char *)stmnt.arr,"' AND ( fop_opnpstn_qty != 0 OR  fop_ibuy_qty != 0 OR fop_isell_qty != 0 )");

    ************ Ver 3.4 Comment Ends ***/

    /*** Ver 3.4 Starts ***/

   if (  c_prd_type != ALL )
   {

   EXEC SQL EXECUTE
   BEGIN
   OPEN :sys_cursor FOR
   select FOP_PRDCT_TYP, FOP_INDSTK,FOP_UNDRLYNG,fop_expry_dt,FOP_EXER_TYP,FOP_STRK_PRC,FOP_OPT_TYP,'*',FOP_OPNPSTN_FLW,abs(FOP_OPNPSTN_QTY),FOP_OPNPSTN_VAL,decode(fop_opnpstn_flw,'S',greatest(abs(fop_ibuy_qty),abs(fop_exbuy_qty)),'B',greatest(abs(fop_isell_qty),abs(fop_exsell_qty)),0),NVL(FOP_IBUY_QTY,0),NVL(FOP_ISELL_QTY,0),decode(FOP_OPNPSTN_QTY,0,0,abs(FOP_OPNPSTN_VAL)/abs(FOP_OPNPSTN_QTY)),'*',NVL( FOP_TRGGR_PRC, 0 ),0,NVL(FOP_UORDR_MRGN,0),NVL(FOP_UEXCTD_MRGN,0),'*','*','*','*',0,'*',0,0,0,'*',0,NVL(FOP_EXRC_QTY,0),'*','*',NVL(FOP_UDLVRY_MRGN,0),0,3 FROM fop_fo_options_pstn WHERE fop_clm_mtch_accnt = :c_mtch_accnt_no	 /*** 0 added in Ver 4.0 ***/
      AND fop_xchng_cd = :c_xchng_cd
      /** AND trim(FOP_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FOP_UNDRLYNG like :c_undrlyng /** trim Remove in Ver 3.6 **/
      AND ( fop_opnpstn_qty != 0 OR  fop_ibuy_qty != 0 OR fop_isell_qty != 0 )
      ORDER BY 3,26,1,8,4 ;

    END;
    END-EXEC;

   }

    /*** Ver 3.4 Ends ***/
		}
		if( ( c_prd_type =='U' || c_prd_type == ALL ) && c_call_ind == 'N' )   /** ver 3.2 **/
		{
    
      /************************** Commented in Ver 3.4 ******

			if( c_prd_type == ALL )
      {
        strcat((char *)stmnt.arr," UNION ALL ");
      }
      else
      {
        strcpy((char *)stmnt.arr,"");
      }

			strcat((char *)stmnt.arr,"SELECT FRESH.FOD_PRDCT_TYP,FRESH.FOD_INDSTK,FRESH.FOD_UNDRLYNG,FRESH.FOD_EXPRY_DT,FRESH.FOD_EXER_TYP,FRESH.FOD_STRK_PRC,FRESH.FOD_OPT_TYP,'*',DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW) * Commented and replaced in Ver 1.9 FRESH.FOD_ORDR_FLW *,PSTN.OPEN_QTY,0,PSTN.EXEC_QTY,0,0,FRESH.FOD_LMT_RT, COVER.FOD_ORDR_FLW,COVER.FOD_STP_LSS_TGR,COVER.FOD_LMT_RT,0,(FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD),FRESH.FOD_ORDR_STTS,COVER.FOD_ORDR_STTS,FRESH.FOD_ORDR_RFRNC,FRESH.FOD_SLTP_ORDR_RFRNC,COVER.FOD_MDFCTN_CNTR,FRESH.FOD_LMT_MRKT_SL_FLG,FRESH.FOD_EXEC_QTY,FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY),COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY),COVER.FOD_LMT_MRKT_SL_FLG,COVER.FOD_ORDR_TOT_QTY,0,to_char(COVER.FOD_ORDR_VALID_DT,'dd-Mon-yyyy'),COVER.FOD_FC_FLAG,0,4 FROM FOD_FO_ORDR_DTLS FRESH, FOD_FO_ORDR_DTLS COVER, ( SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC, SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY FROM   FOD_FO_ORDR_DTLS WHERE  FOD_XCHNG_CD = '");   ** Ver 2.4 Added 0 for  additional column ** 
		 	strcat((char *)stmnt.arr,c_xchng_cd);
     	strcat((char *)stmnt.arr,"' AND FOD_PRDCT_TYP = '");
      strcat((char *)stmnt.arr,c_fpsl_prd_typ);
      strcat((char *)stmnt.arr,"' AND FOD_CLM_MTCH_ACCNT = '");
		 	strcat((char *)stmnt.arr,c_mtch_accnt_no);
      strcat((char *)stmnt.arr,"' AND trim(FOD_UNDRLYNG) like '");
      strcat((char *)stmnt.arr,c_undrlyng);
		 	strcat((char *)stmnt.arr,"' GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0 * '>' replaced by '!=' in Ver 1.9 *) PSTN WHERE FRESH.FOD_CLM_MTCH_ACCNT = '");
		 	strcat((char *)stmnt.arr,c_mtch_accnt_no);
		 	strcat((char *)stmnt.arr,"' AND COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC AND FRESH.FOD_XCHNG_CD ='");
		 	strcat((char *)stmnt.arr,c_xchng_cd);
      strcat((char *)stmnt.arr,"' AND trim(FRESH.FOD_UNDRLYNG) like '");
      strcat((char *)stmnt.arr,c_undrlyng);
	   	strcat((char *)stmnt.arr,"' AND  FRESH.FOD_PRDCT_TYP = '");
      strcat((char *)stmnt.arr,c_fpsl_prd_typ);
      strcat((char *)stmnt.arr,"' AND FRESH.FOD_EXER_TYP = '");
      strcat((char *)stmnt.arr,c_exer_typ);
      strcat((char *)stmnt.arr,"' AND FRESH.FOD_FC_FLAG = '");
      strcat((char *)stmnt.arr,c_fresh_flg); 
      strcat((char *)stmnt.arr,"' AND PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC ");

     *** Ver 1.8 Hard coding for product type, exercise type and fresh/cover flag removed ***

     ******************* Ver 3.4 Comment Ends ***************/

    /*** Ver 3.4 Starts ***/

   if( c_prd_type != ALL )  
    {

    EXEC SQL EXECUTE
    BEGIN
    OPEN :sys_cursor FOR
    SELECT FRESH.FOD_PRDCT_TYP,FRESH.FOD_INDSTK,FRESH.FOD_UNDRLYNG,FRESH.FOD_EXPRY_DT,FRESH.FOD_EXER_TYP,FRESH.FOD_STRK_PRC,FRESH.FOD_OPT_TYP,'*',DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW) /* Commented and replaced in Ver 1.9 FRESH.FOD_ORDR_FLW*/,PSTN.OPEN_QTY,0,PSTN.EXEC_QTY,0,0,FRESH.FOD_LMT_RT, COVER.FOD_ORDR_FLW,COVER.FOD_STP_LSS_TGR,COVER.FOD_LMT_RT,0,(FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD),FRESH.FOD_ORDR_STTS,COVER.FOD_ORDR_STTS,FRESH.FOD_ORDR_RFRNC,FRESH.FOD_SLTP_ORDR_RFRNC,COVER.FOD_MDFCTN_CNTR,FRESH.FOD_LMT_MRKT_SL_FLG,FRESH.FOD_EXEC_QTY,FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY),COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY),COVER.FOD_LMT_MRKT_SL_FLG,COVER.FOD_ORDR_TOT_QTY,0,to_char(COVER.FOD_ORDR_VALID_DT,'dd-Mon-yyyy'),COVER.FOD_FC_FLAG,0,0,4 FROM FOD_FO_ORDR_DTLS FRESH, FOD_FO_ORDR_DTLS COVER, ( SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC, SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY FROM   FOD_FO_ORDR_DTLS WHERE  FOD_XCHNG_CD = :c_xchng_cd /*** 0  added in Ver 4.0 ***/
      AND FOD_PRDCT_TYP = :c_fpsl_prd_typ
      AND FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      /** AND trim(FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FOD_UNDRLYNG like :c_undrlyng /** trim Remove in Ver 3.6 **/
      GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0 ) PSTN WHERE FRESH.FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      AND COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC AND FRESH.FOD_XCHNG_CD = :c_xchng_cd
      /** AND trim(FRESH.FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FRESH.FOD_UNDRLYNG like :c_undrlyng /** trim Remove in Ver 3.6 **/
      AND  FRESH.FOD_PRDCT_TYP = :c_fpsl_prd_typ
      AND FRESH.FOD_EXER_TYP = :c_exer_typ
      AND FRESH.FOD_FC_FLAG = :c_fresh_flg
      AND PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC
      ORDER BY 3,26,1,8,4;

    END;
    END-EXEC;

   }
	  

    /*** Ver 3.4 Ends ***/

		}
		if( c_prd_type =='I' || c_prd_type == ALL)
		{
     
     /*** Commented in Ver 3.4 **********************  

			if( c_prd_type == ALL )
      {
        strcat((char *)stmnt.arr," UNION ALL ");
      }
      else
      {
        strcpy((char *)stmnt.arr,"");
      }

  		strcat((char *)stmnt.arr,"SELECT FRESH.FOD_PRDCT_TYP,FRESH.FOD_INDSTK,FRESH.FOD_UNDRLYNG,FRESH.FOD_EXPRY_DT,FRESH.FOD_EXER_TYP,FRESH.FOD_STRK_PRC,FRESH.FOD_OPT_TYP,'*',DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW) * Commented and replaced in Ver 1.9 FRESH.FOD_ORDR_FLW *,PSTN.OPEN_QTY,0,PSTN.EXEC_QTY,0,0,FRESH.FOD_LMT_RT, COVER.FOD_ORDR_FLW,COVER.FOD_STP_LSS_TGR,COVER.FOD_LMT_RT,0,(FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD), FRESH.FOD_ORDR_STTS,COVER.FOD_ORDR_STTS,FRESH.FOD_ORDR_RFRNC,FRESH.FOD_SLTP_ORDR_RFRNC,COVER.FOD_MDFCTN_CNTR,FRESH.FOD_LMT_MRKT_SL_FLG,FRESH.FOD_EXEC_QTY,FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY),COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY),COVER.FOD_LMT_MRKT_SL_FLG,COVER.FOD_ORDR_TOT_QTY,0,to_char(COVER.FOD_ORDR_VALID_DT,'dd-Mon-yyyy'),COVER.FOD_FC_FLAG,0,5 FROM FOD_FO_ORDR_DTLS FRESH, FOD_FO_ORDR_DTLS COVER, ( SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC, SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY FROM FOD_FO_ORDR_DTLS WHERE  FOD_XCHNG_CD = '");   ** Ver 2.4 added 0 for additional column **
     	strcat((char *)stmnt.arr,c_xchng_cd);
     	strcat((char *)stmnt.arr,"' AND FOD_PRDCT_TYP = '");
      strcat((char *)stmnt.arr,c_oplus_prd_typ); 
      strcat((char *)stmnt.arr,"' AND FOD_CLM_MTCH_ACCNT = '");
     	strcat((char *)stmnt.arr,c_mtch_accnt_no);
      strcat((char *)stmnt.arr,"' AND trim(FOD_UNDRLYNG) like '");
      strcat((char *)stmnt.arr,c_undrlyng);
     	strcat((char *)stmnt.arr,"' GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) HAVING  SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0 * '>' replaced by '!=' in Ver 1.9 *) PSTN WHERE FRESH.FOD_CLM_MTCH_ACCNT = '");
     	strcat((char *)stmnt.arr,c_mtch_accnt_no);
     	strcat((char *)stmnt.arr,"' AND COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC AND FRESH.FOD_XCHNG_CD ='");
     	strcat((char *)stmnt.arr,c_xchng_cd);
      strcat((char *)stmnt.arr,"' AND trim(FRESH.FOD_UNDRLYNG) like '");
      strcat((char *)stmnt.arr,c_undrlyng);
     	strcat((char *)stmnt.arr,"' AND  FRESH.FOD_PRDCT_TYP = '");
      strcat((char *)stmnt.arr,c_oplus_prd_typ);
      strcat((char *)stmnt.arr,"' AND FRESH.FOD_EXER_TYP = '");
      strcat((char *)stmnt.arr,c_exer_typ);
      strcat((char *)stmnt.arr,"' AND FRESH.FOD_FC_FLAG = '");
      strcat((char *)stmnt.arr,c_fresh_flg);
      strcat((char *)stmnt.arr,"' AND PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC ");

     *** Ver 1.8 Hard coding for product type, exercise type and fresh/cover flag removed ***

     ***************** Ver 3.4 Comment Ends ***********************************************************/
 
    /*** Ver 3.4 Starts ***/ 

   if (c_prd_type != ALL) 
   {
    EXEC SQL EXECUTE
    BEGIN
    OPEN :sys_cursor FOR
     SELECT FRESH.FOD_PRDCT_TYP,FRESH.FOD_INDSTK,FRESH.FOD_UNDRLYNG,FRESH.FOD_EXPRY_DT,FRESH.FOD_EXER_TYP,FRESH.FOD_STRK_PRC,FRESH.FOD_OPT_TYP,'*',DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW) /* Commented and replaced in Ver 1.9 FRESH.FOD_ORDR_FLW */,PSTN.OPEN_QTY,0,PSTN.EXEC_QTY,0,0,FRESH.FOD_LMT_RT, COVER.FOD_ORDR_FLW,COVER.FOD_STP_LSS_TGR,COVER.FOD_LMT_RT,0,(FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD), FRESH.FOD_ORDR_STTS,COVER.FOD_ORDR_STTS,FRESH.FOD_ORDR_RFRNC,FRESH.FOD_SLTP_ORDR_RFRNC,COVER.FOD_MDFCTN_CNTR,FRESH.FOD_LMT_MRKT_SL_FLG,FRESH.FOD_EXEC_QTY,FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY),COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY),COVER.FOD_LMT_MRKT_SL_FLG,COVER.FOD_ORDR_TOT_QTY,0,to_char(COVER.FOD_ORDR_VALID_DT,'dd-Mon-yyyy'),COVER.FOD_FC_FLAG,0,0,5 FROM FOD_FO_ORDR_DTLS FRESH, FOD_FO_ORDR_DTLS COVER, ( SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC, SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY FROM FOD_FO_ORDR_DTLS WHERE  FOD_XCHNG_CD = :c_xchng_cd /*** 0  added in Ver 4.0 ***/
      AND FOD_PRDCT_TYP = :c_oplus_prd_typ
      AND FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      /** AND trim(FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FOD_UNDRLYNG like :c_undrlyng  /** trim Remove in Ver 3.6 **/
      GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) HAVING  SUM( DECODE( FOD_FC_FLAG, 'C', -1* FOD_EXEC_QTY, FOD_EXEC_QTY )) != 0 ) PSTN WHERE FRESH.FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      AND COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC AND FRESH.FOD_XCHNG_CD = :c_xchng_cd
      /** AND trim(FRESH.FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FRESH.FOD_UNDRLYNG like :c_undrlyng /** trim Remove in Ver 3.6 **/
      AND  FRESH.FOD_PRDCT_TYP = :c_oplus_prd_typ
      AND FRESH.FOD_EXER_TYP = :c_exer_typ
      AND FRESH.FOD_FC_FLAG = :c_fresh_flg
      AND PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC
      ORDER BY 3,26,1,8,4;

    END;
    END-EXEC;


    } 


    /*** Ver 3.4 Ends ***/

		} 


    /*** Commented in Ver 3.4 **********
 	
		strcat((char *)stmnt.arr," ORDER BY 3,26,1,8,4 ");
   
       *** Ver 1.3 following columns added
   FRESH.FOD_LMT_MRKT_SL_FLG,FRESH.FOD_EXEC_QTY,FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY +
FRESH.FOD_EXPRD_QTY),COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY),
COVER.FOD_LMT_MRKT_SL_FLG ,COVER.FOD_ORDR_TOT_QTY ***
      *** FFP_TRG_PRC selected in case of product Future & FuturePLUS in Ver 1.7 ***
       Also added Exercise Qty, Order Valid Date and Cover Flag in Ver 1.7  *** 
    
 
		stmnt.len = strlen((char *)stmnt.arr);
		
    if(DEBUG_MSG_LVL_0)  *** Debug Level added in Ver 1.9 ***
    {
      fn_userlog(c_ServiceName," stmnt.len :%d: Match Account :%s:",stmnt.len, c_mtch_accnt_no);  *** Match Account added in      Ver 1.9 ***
    }

  	print_qry((char*)stmnt.arr,stmnt.len,c_ServiceName);

 		EXEC SQL PREPARE sql_stmnt FROM :stmnt;

  	EXEC SQL DECLARE sys_cur CURSOR FOR sql_stmnt;

  	EXEC SQL OPEN sys_cur;

    ******************************* Ver 3.4 Comment Ends ***********************/

    /*********** Ver 3.4 Starts ********************/

    if (c_prd_type == ALL && c_call_ind == 'N')
    {

   EXEC SQL EXECUTE
   BEGIN
   OPEN :sys_cursor FOR
   SELECT ffp_prdct_typ,ffp_indstk,ffp_undrlyng,ffp_expry_dt,ffp_exer_typ,0,'*',ffp_cntrct_tag,ffp_opnpstn_flw,abs(ffp_opnpstn_qty),ffp_mtm_opn_val,decode(ffp_opnpstn_flw,'S',greatest(abs(ffp_ibuy_qty),abs(ffp_exbuy_qty)),'B',greatest(abs(ffp_isell_qty),abs(ffp_exsell_qty)),0),ffp_ibuy_qty,ffp_isell_qty,decode(abs(ffp_opnpstn_qty),0,0,abs(ffp_mtm_opn_val)/abs(ffp_opnpstn_qty)),'*',NVL(FFP_TRG_PRC,0),0,0,0,'*','*','*','*',0,'*',0,0,0,'*',0,0,'*','*',0, NVL(FFP_AVG_PRC,0), 1 FROM ffp_fo_futures_pstn WHERE ffp_clm_mtch_accnt = :c_mtch_accnt_no /*** FFP_AVG_PRC added in Ver 4.0 ***/
      AND ffp_xchng_cd = :c_xchng_cd
      AND ffp_prdct_typ = :c_fut_prd_typ
      /** and trim(ffp_undrlyng) like :c_undrlyng ** 3.6 **/
      and ffp_undrlyng like :c_undrlyng  /** trim Remove in Ver 3.6 **/
      AND (ffp_opnpstn_qty != 0  OR ffp_ibuy_qty != 0 OR ffp_isell_qty != 0 )

    UNION ALL

    SELECT ffp_prdct_typ,ffp_indstk,ffp_undrlyng, ffp_expry_dt,ffp_exer_typ,0,'*',ffp_cntrct_tag,ffp_opnpstn_flw,abs(ffp_opnpstn_qty),ffp_mtm_opn_val,decode(ffp_opnpstn_flw,'S',greatest(abs(ffp_ibuy_qty),abs(ffp_exbuy_qty)) ,'B',greatest(abs(ffp_isell_qty),abs(ffp_exsell_qty) ),0),ffp_ibuy_qty,ffp_isell_qty,decode(abs(ffp_opnpstn_qty),0,0,abs(ffp_mtm_opn_val)/abs(ffp_opnpstn_qty)),'*',NVL(FFP_TRG_PRC,0),0,0,0,'*','*','*','*',0,'*',0,0,0,'*',0,0,'*','*',0,NVL(FFP_AVG_PRC,0),2  FROM ffp_fo_futures_pstn /*** FFP_AVG_PRC added in Ver 4.0 ***/
   WHERE ffp_clm_mtch_accnt = :c_mtch_accnt_no
      AND ffp_xchng_cd = :c_xchng_cd
      AND ffp_prdct_typ = :c_fp_prd_typ
      /** and trim(ffp_undrlyng) like :c_undrlyng ** 3.6 **/
      and ffp_undrlyng like :c_undrlyng  /** trim Remove in Ver 3.6 **/
      AND  (ffp_opnpstn_qty != 0  OR ffp_ibuy_qty != 0 OR ffp_isell_qty != 0 )

    UNION ALL

    select FOP_PRDCT_TYP, FOP_INDSTK,FOP_UNDRLYNG,fop_expry_dt,FOP_EXER_TYP,FOP_STRK_PRC,FOP_OPT_TYP,'*',FOP_OPNPSTN_FLW,abs(FOP_OPNPSTN_QTY),FOP_OPNPSTN_VAL,decode(fop_opnpstn_flw,'S',greatest(abs(fop_ibuy_qty),abs(fop_exbuy_qty)),'B',greatest(abs(fop_isell_qty),abs(fop_exsell_qty)),0),NVL(FOP_IBUY_QTY,0),NVL(FOP_ISELL_QTY,0),decode(FOP_OPNPSTN_QTY,0,0,abs(FOP_OPNPSTN_VAL)/abs(FOP_OPNPSTN_QTY)),'*',NVL( FOP_TRGGR_PRC, 0 ),0,NVL(FOP_UORDR_MRGN,0),NVL(FOP_UEXCTD_MRGN,0),'*','*','*','*',0,'*',0,0,0,'*',0,NVL(FOP_EXRC_QTY,0),'*','*',NVL(FOP_UDLVRY_MRGN,0),0,3 FROM fop_fo_options_pstn WHERE fop_clm_mtch_accnt = :c_mtch_accnt_no /*** 0  added in Ver 4.0 ***/
      AND fop_xchng_cd = :c_xchng_cd
      /** AND trim(FOP_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FOP_UNDRLYNG like :c_undrlyng  /** trim Remove in Ver 3.6 **/
      AND ( fop_opnpstn_qty != 0 OR  fop_ibuy_qty != 0 OR fop_isell_qty != 0 )

    UNION ALL

    SELECT FRESH.FOD_PRDCT_TYP,FRESH.FOD_INDSTK,FRESH.FOD_UNDRLYNG,FRESH.FOD_EXPRY_DT,FRESH.FOD_EXER_TYP,FRESH.FOD_STRK_PRC,FRESH.FOD_OPT_TYP,'*',DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW) /* Commented and replaced in Ver 1.9 FRESH.FOD_ORDR_FLW*/,PSTN.OPEN_QTY,0,PSTN.EXEC_QTY,0,0,FRESH.FOD_LMT_RT, COVER.FOD_ORDR_FLW,COVER.FOD_STP_LSS_TGR,COVER.FOD_LMT_RT,0,(FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD),FRESH.FOD_ORDR_STTS,COVER.FOD_ORDR_STTS,FRESH.FOD_ORDR_RFRNC,FRESH.FOD_SLTP_ORDR_RFRNC,COVER.FOD_MDFCTN_CNTR,FRESH.FOD_LMT_MRKT_SL_FLG,FRESH.FOD_EXEC_QTY,FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY),COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY),COVER.FOD_LMT_MRKT_SL_FLG,COVER.FOD_ORDR_TOT_QTY,0,to_char(COVER.FOD_ORDR_VALID_DT,'dd-Mon-yyyy'),COVER.FOD_FC_FLAG,0,0,4 FROM FOD_FO_ORDR_DTLS FRESH, FOD_FO_ORDR_DTLS COVER, ( SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC, SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY FROM   FOD_FO_ORDR_DTLS WHERE  FOD_XCHNG_CD = :c_xchng_cd /*** 0  added in Ver 4.0 ***/
      AND FOD_PRDCT_TYP = :c_fpsl_prd_typ
      AND FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      /** AND trim(FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FOD_UNDRLYNG like :c_undrlyng  /** trim Remove in Ver 3.6 **/
      GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0 ) PSTN WHERE FRESH.FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      AND COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC AND FRESH.FOD_XCHNG_CD = :c_xchng_cd
      /** AND trim(FRESH.FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FRESH.FOD_UNDRLYNG like :c_undrlyng   /** trim Remove in Ver 3.6 **/
      AND  FRESH.FOD_PRDCT_TYP = :c_fpsl_prd_typ
      AND FRESH.FOD_EXER_TYP = :c_exer_typ
      AND FRESH.FOD_FC_FLAG = :c_fresh_flg
      AND PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC

   UNION ALL

   SELECT FRESH.FOD_PRDCT_TYP,FRESH.FOD_INDSTK,FRESH.FOD_UNDRLYNG,FRESH.FOD_EXPRY_DT,FRESH.FOD_EXER_TYP,FRESH.FOD_STRK_PRC,FRESH.FOD_OPT_TYP,'*',DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW) /* Commented and replaced in Ver 1.9 FRESH.FOD_ORDR_FLW*/,PSTN.OPEN_QTY,0,PSTN.EXEC_QTY,0,0,FRESH.FOD_LMT_RT, COVER.FOD_ORDR_FLW,COVER.FOD_STP_LSS_TGR,COVER.FOD_LMT_RT,0,(FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD), FRESH.FOD_ORDR_STTS,COVER.FOD_ORDR_STTS,FRESH.FOD_ORDR_RFRNC,FRESH.FOD_SLTP_ORDR_RFRNC,COVER.FOD_MDFCTN_CNTR,FRESH.FOD_LMT_MRKT_SL_FLG,FRESH.FOD_EXEC_QTY,FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY),COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY),COVER.FOD_LMT_MRKT_SL_FLG,COVER.FOD_ORDR_TOT_QTY,0,to_char(COVER.FOD_ORDR_VALID_DT,'dd-Mon-yyyy'),COVER.FOD_FC_FLAG,0,0,5 FROM FOD_FO_ORDR_DTLS FRESH, FOD_FO_ORDR_DTLS COVER, ( SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC, SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY FROM FOD_FO_ORDR_DTLS WHERE  FOD_XCHNG_CD = :c_xchng_cd /*** 0  added in Ver 4.0 ***/
      AND FOD_PRDCT_TYP = :c_oplus_prd_typ
      AND FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      /** AND trim(FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FOD_UNDRLYNG like :c_undrlyng /** trim Remove in Ver 3.6 **/
      GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) HAVING  SUM( DECODE( FOD_FC_FLAG, 'C', -1* FOD_EXEC_QTY, FOD_EXEC_QTY))!= 0 ) PSTN WHERE FRESH.FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      AND COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC AND FRESH.FOD_XCHNG_CD = :c_xchng_cd
      /** AND trim(FRESH.FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FRESH.FOD_UNDRLYNG like :c_undrlyng  /** trim Remove in Ver 3.6 **/
      AND  FRESH.FOD_PRDCT_TYP = :c_oplus_prd_typ
      AND FRESH.FOD_EXER_TYP = :c_exer_typ
      AND FRESH.FOD_FC_FLAG = :c_fresh_flg
      AND PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC
      ORDER BY 3,26,1,8,4;
     END;
     END-EXEC;

   }
   else if (c_prd_type == ALL && c_call_ind != 'N')
   {

   EXEC SQL EXECUTE
   BEGIN
   OPEN :sys_cursor FOR
	 select FOP_PRDCT_TYP, FOP_INDSTK,FOP_UNDRLYNG,fop_expry_dt,FOP_EXER_TYP,FOP_STRK_PRC,FOP_OPT_TYP,'*',FOP_OPNPSTN_FLW,abs(FOP_OPNPSTN_QTY),FOP_OPNPSTN_VAL,decode(fop_opnpstn_flw,'S',greatest(abs(fop_ibuy_qty),abs(fop_exbuy_qty)),'B',greatest(abs(fop_isell_qty),abs(fop_exsell_qty)),0),NVL(FOP_IBUY_QTY,0),NVL(FOP_ISELL_QTY,0),decode(FOP_OPNPSTN_QTY,0,0,abs(FOP_OPNPSTN_VAL)/abs(FOP_OPNPSTN_QTY)),'*',NVL( FOP_TRGGR_PRC, 0 ),0,NVL(FOP_UORDR_MRGN,0),NVL(FOP_UEXCTD_MRGN,0),'*','*','*','*',0,'*',0,0,0,'*',0,NVL(FOP_EXRC_QTY,0),'*','*',NVL(FOP_UDLVRY_MRGN,0),3 FROM fop_fo_options_pstn WHERE fop_clm_mtch_accnt = :c_mtch_accnt_no
    AND fop_xchng_cd = :c_xchng_cd
    AND FOP_UNDRLYNG = :c_undrlyng  
    AND ( fop_opnpstn_qty != 0 OR  fop_ibuy_qty != 0 OR fop_isell_qty != 0 ) /***Option Query added in Ver 3.9 ***/
    UNION ALL
   SELECT FRESH.FOD_PRDCT_TYP,FRESH.FOD_INDSTK,FRESH.FOD_UNDRLYNG,FRESH.FOD_EXPRY_DT,FRESH.FOD_EXER_TYP,FRESH.FOD_STRK_PRC,FRESH.FOD_OPT_TYP,'*',DECODE ( SIGN(PSTN.OPEN_QTY),-1,DECODE( FRESH.FOD_ORDR_FLW, 'B', 'S', 'B' ), FRESH.FOD_ORDR_FLW) /* Commented and replaced in Ver 1.9 FRESH.FOD_ORDR_FLW*/,PSTN.OPEN_QTY,0,PSTN.EXEC_QTY,0,0,FRESH.FOD_LMT_RT, COVER.FOD_ORDR_FLW,COVER.FOD_STP_LSS_TGR,COVER.FOD_LMT_RT,0,(FRESH.FOD_AMT_BLCKD + FRESH.FOD_LSS_AMT_BLCKD), FRESH.FOD_ORDR_STTS,COVER.FOD_ORDR_STTS,FRESH.FOD_ORDR_RFRNC,FRESH.FOD_SLTP_ORDR_RFRNC,COVER.FOD_MDFCTN_CNTR,FRESH.FOD_LMT_MRKT_SL_FLG,FRESH.FOD_EXEC_QTY,FRESH.FOD_ORDR_TOT_QTY - (FRESH.FOD_EXEC_QTY + FRESH.FOD_CNCL_QTY + FRESH.FOD_EXPRD_QTY),COVER.FOD_ORDR_TOT_QTY - (COVER.FOD_EXEC_QTY + COVER.FOD_CNCL_QTY + COVER.FOD_EXPRD_QTY),COVER.FOD_LMT_MRKT_SL_FLG,COVER.FOD_ORDR_TOT_QTY,0,to_char(COVER.FOD_ORDR_VALID_DT,'dd-Mon-yyyy'),COVER.FOD_FC_FLAG,0,5 FROM FOD_FO_ORDR_DTLS FRESH, FOD_FO_ORDR_DTLS COVER, ( SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC, SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY, SUM( DECODE( FOD_FC_FLAG, 'C',FOD_EXEC_QTY,0) ) EXEC_QTY FROM FOD_FO_ORDR_DTLS WHERE  FOD_XCHNG_CD = :c_xchng_cd
      AND FOD_PRDCT_TYP = :c_oplus_prd_typ
      AND FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      /** AND trim(FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/
      AND FOD_UNDRLYNG = :c_undrlyng /** trim Remove in Ver 3.6 **/ /*** Like changed to = for payoff call in Ver 3.9 ***/
      GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) HAVING  SUM( DECODE( FOD_FC_FLAG, 'C', -1* FOD_EXEC_QTY, FOD_EXEC_QTY)) != 0 ) PSTN WHERE FRESH.FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
      AND COVER.FOD_ORDR_RFRNC = FRESH.FOD_SLTP_ORDR_RFRNC AND FRESH.FOD_XCHNG_CD = :c_xchng_cd
      /** AND trim(FRESH.FOD_UNDRLYNG) like :c_undrlyng ** 3.6 **/ 
      AND FRESH.FOD_UNDRLYNG = :c_undrlyng  /** trim Remove in Ver 3.6 **/ /*** Like changed to = for payoff call in Ver 3.9 ***/
      AND  FRESH.FOD_PRDCT_TYP = :c_oplus_prd_typ
      AND FRESH.FOD_EXER_TYP = :c_exer_typ
      AND FRESH.FOD_FC_FLAG = :c_fresh_flg
      AND PSTN.FRSH_ORDR_RFRNC = FRESH.FOD_ORDR_RFRNC
      ORDER BY 3,26,1,8,4;

     END;
     END-EXEC;

    }

    /*********** Ver 3.4 Ends *********************/


		if(SQLCODE != 0)
  	{
    	fn_errlog( c_ServiceName, "S31345", SQLMSG, c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
    	tpfree((char *)ptr_fml_Obuf);
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

		i_cnt=0;

		while(1)
		{
			l_cvr_qty = 0;
			l_ibuy_qty = 0;
			l_opnpstn_qty = 0;
			l_isell_qty = 0;
			l_mdfctn_cntr = 0;

			d_ord_mrgn = 0.0;
			d_price = 0.0;
			d_unlz_pl = 0.0;
			d_mtm_opn_val = 0.0;
			d_umin_trd_mrgn	=	0.0;			/***	Ver 1.7	***/
			d_utrd_mrgn = 0.0;
			d_curr_uopn_val = 0.0;
			d_base_prc =0.0;
      d_dlvry_mrgn_blk = 0.0;    /** Ver 2.4 **/

			c_frsh_ordr_stts = '\0';
			c_cvr_ordr_stts = '\0';
			c_cvr_ordr_flw ='\0';
			c_prd_typ = '\0';
			c_ctgry_indstk ='\0';

 			c_addmrgn_flg	='\0';
 			c_sqroff_flg ='\0';
 			c_jointsqroff_flg ='\0';
 			c_rollover_flag	='\0';
			c_sprd_roll_flag = 'N';
 			c_conv_flg 	='\0';
 			c_mtm_flg 	='\0';
 			c_mod_can_flg ='\0';
 			c_cvr_ordr_stts	='\0';
 			c_spl_flg 	='\0';
			c_sqroffmkt_flg = 'N';       /** Ver 1.4 **/

			MEMSET(c_ordr_rfrnc);	
			MEMSET(c_sltp_ordr_rfrnc);
			MEMSET(c_undrlyng);
			MEMSET(c_expry_dt);
      MEMSET(c_ord_val_dt);       /** Ver 1.7 **/
		
		/***	EXEC SQL 
				FETCH sys_cur  Commented in Ver 3.4 and replaced with sys_cursor ***/

        EXEC SQL
        FETCH :sys_cursor
				INTO	 :c_prd_typ,
							 :c_ctgry_indstk,
							 :c_undrlyng,
							 :c_expry_dt,
							 :c_exrc_typ,
							 :l_strike_prc,
							 :c_opt_typ,
							 :c_cntrct_tag,
							 :c_opnpstn_flw,
							 :l_opnpstn_qty,
							 :d_mtm_opn_val,
							 :l_cvr_qty,
							 :l_ibuy_qty,
							 :l_isell_qty,		
							 :d_price,
							 :c_cvr_ordr_flw,
							 :li_stp_lss_tgr_prc,
							 :l_lmt_rt,
							 :d_ord_mrgn,
							 :d_utrd_mrgn,
							 :c_frsh_ordr_stts,
				       :c_cvr_ordr_stts,
							 :c_ordr_rfrnc,
							 :c_sltp_ordr_rfrnc,
							 :l_mdfctn_cntr,
               :c_frsh_slm_flg,        /*** Ver 1.3 ***/
               :l_frsh_exctd_qty,      /*** Ver 1.3 ***/
               :l_frsh_unexctd_qty,    /*** Ver 1.3 ***/
               :l_cvr_unexctd_qty,     /*** Ver 1.3 ***/
               :c_cvr_slm_flg,         /*** Ver 1.3 ***/
               :l_tot_ord_qty,         /*** Ver 1.3 ***/
               :l_exrc_qty,            /*** Ver 1.7 ***/
               :c_ord_val_dt,          /*** Ver 1.7 ***/
               :c_cvr_fc_flg,          /*** Ver 1.7 ***/ 
               :d_dlvry_mrgn_blk,      /*** Ver 2.4 ***/ 
							 :d_t2t_prc;             /*** Ver 4.0 ***/

      if (d_t2t_prc == 0) /*** Ver 4.0 ***/
      {
        d_t2t_prc = d_price;
      }

			if( SQLCODE != 0 )
			{
      	if( SQLCODE == NO_DATA_FOUND )
      	{
					/*** Ver 2.3 Starts ***/
					if( c_prd_type =='F' || c_prd_type == ALL )
					{
            if( DEBUG_MSG_LVL_5 )
            {
							fn_userlog(c_ServiceName,"Checking NO_DATA_FOUND_RSPREAD_FOD_ONLY for c_prev_undrlyng:%s: c_mtch_accnt_no:%s:", c_prev_undrlyng,c_mtch_accnt_no);
						}
						c_rsprd_pos_flg = '\0';
						c_prd_typ1 = 'F';
						EXEC SQL
							SELECT TO_CHAR( FOD_EXPRY_DT, 'DD-MON-YYYY' ),
								FOD_ORDR_FLW,
								FTQ_CNTRCT_TAG,
								FTQ_LST_TRD_PRC
							/*INTO  :c_expry_dt,
								:c_uopnpstn_flw,
								:c_cntrct_tag,		* Ver 2.7 */
								/* Ver 2.7 Starts */
								INTO	:c_r_expry_dt,
								:c_r_opnpstn_flw,
								:c_r_cntrct_tag,
								/* Ver 2.7 Ends */
								:l_lst_trdd_prc
							FROM  FOD_FO_ORDR_DTLS, FTQ_FO_TRD_QT
							WHERE FOD_EXPRY_DT NOT IN (SELECT DISTINCT(FFP_EXPRY_DT)
										FROM FFP_FO_FUTURES_PSTN
										WHERE FFP_XCHNG_CD = :c_xchng_cd
										AND FFP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
										AND FFP_UNDRLYNG = :c_prev_undrlyng
										AND FFP_PRDCT_TYP = :c_prd_typ1
										AND (    ffp_opnpstn_qty != 0
										OR ffp_ibuy_qty    != 0
										OR ffp_isell_qty   != 0 ))
							AND FTQ_EXPRY_DT = FOD_EXPRY_DT
							AND FOD_UNDRLYNG = FTQ_UNDRLYNG
							AND FTQ_PRDCT_TYP = FOD_PRDCT_TYP
							AND FOD_ORDR_STTS in ( 'O','P','Q','R' )
							AND FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
							AND FOD_PRDCT_TYP= :c_prd_typ1
							AND FOD_UNDRLYNG= :c_prev_undrlyng
							AND FOD_SPL_FLAG='O'
							AND FOD_XCHNG_CD = :c_xchng_cd
							AND rownum < 2;

						if( SQLCODE != 0 && ( SQLCODE != NO_DATA_FOUND ))
						{
							fn_errlog( c_ServiceName, "S31350", SQLMSG, c_err_msg );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							tpfree((char *)ptr_fml_Obuf);
              /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
              EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
              EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
						else if ( SQLCODE == NO_DATA_FOUND )
						{
							fn_userlog(c_ServiceName,"No Records of NO_DATA_FOUND_RSPREAD_FOD_ONLY is Available");
							c_rsprd_pos_flg = 'N';
						}
						else
						{
            	if( DEBUG_MSG_LVL_3 )
            	{
								fn_userlog(c_ServiceName,"Records for NO_DATA_FOUND_RSPREAD_FOD_ONLY is Available");
								fn_userlog(c_ServiceName,"c_expry_dt:%s: c_uopnpstn_flw:%c: c_cntrct_tag:%c: l_lst_trdd_prc:%ld:",c_expry_dt,c_uopnpstn_flw,c_cntrct_tag,l_lst_trdd_prc);
								fn_userlog(c_ServiceName,"c_mtch_accnt_no:%s: c_prd_typ1:%c: c_prev_undrlyng:%s:",c_mtch_accnt_no,c_prd_typ1,c_prev_undrlyng);
							}
							rtrim(c_expry_dt);
							c_rsprd_pos_flg = 'N';
							i_grp_cnt = 1;
							EXEC SQL
								SELECT nvl(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0),
									FOD_CLM_MTCH_ACCNT,
									FOD_INDSTK,
									FOD_UNDRLYNG,
									FOD_EXER_TYP,
									NVL(sum(FOD_SROLL_DIFF_AMT),0) + NVL(sum(FOD_SROLL_LSS_AMT),0)
								INTO
									:l_fod_qty,
									:c_mtch_accnt_no,
									:c_uindstk,
									:c_prev_undrlyng,
									:c_exrc_typ,
									:d_rordr_mrgn
								FROM  FOD_FO_ORDR_DTLS
								WHERE FOD_ORDR_STTS in ('P','O','R','Q')
								AND FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
								AND FOD_PRDCT_TYP= :c_prd_typ1
								AND FOD_UNDRLYNG = :c_prev_undrlyng
								AND FOD_EXPRY_DT = :c_r_expry_dt			/* Ver 2.7 */
								AND FOD_XCHNG_CD = :c_xchng_cd
								and FOD_ORDR_FLW = :c_r_opnpstn_flw		/* Ver 2.7 */
								AND FOD_SPL_FLAG = 'O'
								GROUP BY FOD_CLM_MTCH_ACCNT,FOD_INDSTK,FOD_UNDRLYNG,FOD_EXER_TYP;
							if ( SQLCODE != 0 )
							{			
								fn_errlog( c_ServiceName, "S31355", SQLMSG, c_err_msg );
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								tpfree((char *)ptr_fml_Obuf);
                /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
                EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
                EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
							c_spl_flg = CONTRACT_IP;
							/*l_cvr_qty = 0;
							li_bo_qty = 0;
							li_so_qty = 0;
							c_uprdct_typ = c_prd_typ1;
							l_cvr_qty = l_cvr_qty + l_fod_qty;
							if(c_uopnpstn_flw == 'B')
							{
								li_bo_qty = li_bo_qty + l_fod_qty;
							}
							else if (c_uopnpstn_flw == 'S')
							{
								li_so_qty = li_so_qty - l_fod_qty;
							}
							c_uopnpstn_flw = '-';	**** Ver 2.7 */
							/* ver 2.7 starts */
							li_r_bo_qty = 0;
							li_r_so_qty = 0;
							if(c_r_opnpstn_flw == 'B')
							{
								li_r_bo_qty = li_r_bo_qty + l_fod_qty;
							}
							else if (c_r_opnpstn_flw == 'S')
							{
								li_r_so_qty = li_r_so_qty - l_fod_qty;
							}
							/* ver 2.7 ends */
              if( DEBUG_MSG_LVL_3 )
              {
								fn_userlog(c_ServiceName,"*** Before packing NO_DATA_FOUND_RSPREAD_FOD_ONLY Records ***");
								fn_userlog(c_ServiceName,"c_mtch_accnt_no:%s: c_prd_typ1:%c: c_ctgry_indstk:%c: c_prev_undrlyng:%s: c_xchng_cd:%s: c_expry_dt:%s:",c_mtch_accnt_no,c_prd_typ1,c_ctgry_indstk,c_prev_undrlyng,c_xchng_cd,c_expry_dt);
								fn_userlog(c_ServiceName,"c_spl_flg:%c: i_tag_cnt:%ld: c_rollover_flag:%c: c_sprd_roll_flag:%c: c_exrc_typ:%c: c_prev_tag:%c: c_opnpstn_flw:%c: ",c_spl_flg,i_tag_cnt,c_rollover_flag,c_sprd_roll_flag,c_exrc_typ,c_prev_tag,c_opnpstn_flw);
								fn_userlog(c_ServiceName,"d_utrd_mrgn:%lf: d_rordr_mrgn:%lf: d_umin_trd_mrgn:%lf: d_avilable_amount:%lf: l_lst_trdd_prc:%ld:",d_utrd_mrgn,d_rordr_mrgn,d_umin_trd_mrgn,d_avilable_amount,l_lst_trdd_prc);
								fn_userlog(c_ServiceName,"l_cvr_qty:%ld: li_bo_qty:%ld: l_isell_qty:%ld: l_lot_size:%ld:",l_cvr_qty,l_ibuy_qty,l_isell_qty,l_lot_size);
							}

							i_returncode = fn_pack_vartofml ( c_ServiceName,
											    c_err_msg,
											    &ptr_fml_Obuf,
											    68/** 65 to 67 in ver 3.5 **/,  /*** 67 to 68 in Ver 4.0 ***/
											    FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no, 
											    FFO_PRDCT_TYP,(char *)&c_prd_typ1,
											    FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,
											    FFO_UNDRLYNG,(char *)c_prev_undrlyng,
											    FFO_XCHNG_CD,(char *)c_xchng_cd,
											    FFO_EXPRY_DT,(char *)c_r_expry_dt,							/* Ver 2.7 */
											    FFO_OPT_TYP,(char *)&c_null,
											    FFO_STRK_PRC,(char *)&l_null,
											    FFO_EXER_TYP,(char *)&c_exrc_typ,
											    FFO_CNTRCT_TAG,(char *)&c_r_cntrct_tag,					/* Ver 2.7 */
											    FFO_C_OPNPSTN_QTY,(char *)&l_null,
											    FFO_C_OPNPSTN_FLW,(char *)&c_null,							/* Ver 2.7 */
											    FFO_CVR_QTY,(char *)&l_fod_qty,									/* ver 2.7 */
											    FFO_LST_TRD_PRC,(char *)&l_lst_trdd_prc,
											    FFO_UI_BUY_QTY,(char *)&li_r_bo_qty,						/* Ver 2.7 */
											    FFO_UI_SELL_QTY,(char *)&li_r_so_qty,						/* Ver 2.7 */
											    FFO_MIN_LOT_QTY,(char *)&l_lot_size,
											    /** FFO_STP_LSS_TGR,(char *)&l_null, commented in 2.9  **/
                          FFO_STP_LSS_TGR,(char *)&li_stp_lss_tgr_prc, /** ver 2.9 **/ 
											    FFO_LMT_RT,(char *)&l_null,
											    FFO_ORDR_FLW,(char *)&c_null,
											    FFO_PSTN_AMT_BLKD,(char *)&d_null,
											    FFO_C_MTM_OPN_VAL,(char *)&d_null,
											    FFO_U_IMTM_SPRD_PL,(char *)&d_null,
											    FFO_EFF_CLS_PRC, (char *) &d_null, /*** Ver 4.0 ***/
											    FFO_AMOUNT,(char *)&d_null,											/* Ver 2.7 */
											    FFO_U_ORDR_MRGN,(char *)&d_null,								/* Ver 2.7 */
											    FFO_U_MM_TRD_MRGN,(char *)&d_null,							/* Ver 2.7 */
											    FFO_BAL_AMT,(char *)&d_null,										/* Ver 2.7 */
											    FFO_UNRLZD_PL,(char *)&d_null,
											    FFO_DWL_FLG,(char *)&c_null,
											    FFO_SPL_FLG,(char *)&c_null,
											    FFO_STATUS_FLG,(char *)&c_null,
											    FFO_QT_TRDNG_FLG,(char *)&c_null,								/* Ver 2.7 */
											    FFO_SETTLOR_STTS,(char *)&c_null,								/* Ver 2.7 */ 
											    FFO_FUT_CONV_FLG,(char *)&c_null,
											    FFO_MTM_FLG,(char *)&c_null,
											    FFO_MOD_CAN_FLG,(char *)&c_null,
											    FFO_IS_FLG,(char *)&c_null,
											    FFO_RQST_TYP,(char *)&c_spl_flg,
											    FFO_COUNTER,(char *)&i_tag_cnt,
											    FFO_ORDR_RFRNC,(char *)"",
											    FFO_CURR_RT, (char *)&l_null, 
											    FFO_DAM_TRNSCTN, (char *)&c_null,
											    FFO_STLMNT_TYP, (char *)&c_null,   
											    FFO_DLVRY_ALLWD, (char *)&c_null, 
											    FFO_ORD_TYP, (char *)&c_null,      
											    FFO_BOARD_LOT_QTY, (char *)&l_null, 
											    FFO_TMPLT, (char *)&l_null, 
											    FFO_XCHNG_CAN_QTY, (char *)&l_null,
											    FFO_EX_ORDR_TYP, (char *)&c_null,     
											    FFO_ORD_TOT_QTY, (char *)&l_null,    
											    FFO_FUT_PRC, (char *)&d_null,        
											    FFO_PLG_ORDR_RFRNC, (char *)"",   
											    FFO_EXRC_STTS, (char *)&c_null,   
											    FFO_RMS_PRCSD_FLG, (char *)&c_null, 
											    FFO_DR_CR_FLG, (char *)&c_null,          
											    FFO_NKD_BLKD_FLG, (char *)&c_null,
											    FFO_UPLD_MTCH_FLG, (char *)&c_null,
											    FFO_EXRC_QTY, (char *)&l_null,    
											    FFO_ORD_VALID_DT, (char *)&c_null,  
											    FFO_EBA_STTS, (char *)&c_null,    
											    FFO_BK_UBK_FLG, (char *)&c_null,
											    FFO_ND_STRT_DT, (char *)"",
											    FFO_ND_END_DT, (char *)"",
											    FFO_SO_AMT_BLKD, (char *)&d_null,
											    FFO_OPNPSTN_VAL, (char *)&d_null,
                          FFO_INDX_INDCTR, (char *)&c_null,     /*** Ver 3.5 ***/
                          /** FFO_STLMNT_TYP, (char *)&c_null       *** Ver 3.5 *** Ver 3.8 **/
                          FFO_BNK_STTS, (char *)&c_null       /*** Ver 3.8 ***/
											   );

							if ( i_returncode == -1 )
							{
								fn_errlog( c_ServiceName, "S31360", FMLMSG, c_err_msg  );
                /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
                EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
                EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
								tpfree ( ( char * ) ptr_fml_Obuf );
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
						}
            if( DEBUG_MSG_LVL_3 )
            {
							fn_userlog(c_ServiceName,"*** After fn_pack for RSPREAD_FOD_ONLY_NO_DATA_FOUND ***");
						}
					}
          if( DEBUG_MSG_LVL_3)
          {
						fn_userlog(c_ServiceName,"*** OUTSIDE RSPREAD_FOD_ONLY_NO_DATA_FOUND ***");
					}
					/*** Ver 2.3 Ends ***/
					if( DEBUG_MSG_LVL_3)
					{	
        		fn_userlog(c_ServiceName,"Finished :%d: records ",sqlca.sqlerrd[2] );
						fn_userlog(c_ServiceName,"c_prev_prdct_typ :%c:",c_prev_prdct_typ);
						fn_userlog(c_ServiceName,"c_prev_ctgry_indstk %c:",c_prev_ctgry_indstk);
						fn_userlog(c_ServiceName,"c_prev_expry_dt :%s:",c_prev_expry_dt);
						fn_userlog(c_ServiceName," c_prev_undrlyng :%s:",c_prev_undrlyng);
						fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
					}

		 			if( i_grp_cnt == 1)
  				{
    				if( l_grp_opn_qty > 0 )
    				{
      				c_grp_opn_flw = 'B';
    				}	
    				else if( l_grp_opn_qty < 0)
    				{
      				c_grp_opn_flw = 'S';
      				l_grp_opn_qty = abs(l_grp_opn_qty);
    				}
    				else
    				{
     	 				c_grp_opn_flw = '\0';
    				}
    				c_spl_flg = UNDERLYING_IP;

    				i_tag_cnt++;


						/**** Ver 1.5 Start ****/
            if(i_sqroffmkt_flg_cnt == 0)
            {
                c_sqr_off_all_at_mkt = 'Y';
            }
            else
            {
                c_sqr_off_all_at_mkt = 'N';
            }
            /**** Ver .15 Ends  ****/
						
						if( DEBUG_MSG_LVL_3 )  /** ver 4.1 debug level changed to 3 **/
						{
							fn_userlog(c_ServiceName,"c_tmp_undrlying :%s:,i_tag_cnt :%d:",c_tmp_undrlying,i_tag_cnt);
							fn_userlog(c_ServiceName,"l_grp_opn_qty :%ld:,c_grp_opn_flw :%c:,d_grp_ord_mrgn :%lf:,d_grp_pl :%lf:,d_grp_trd_mrgn :%lf:",l_grp_opn_qty,c_grp_opn_flw,d_grp_ord_mrgn,d_grp_pl,d_grp_trd_mrgn);
							fn_userlog(c_ServiceName, "Sqr Off All:%c", c_sqr_off_all_at_mkt);  /** ver 1.5 **/
							fn_userlog(c_ServiceName, "Cancel All:%c", c_cancel_all_flag);			 /** ver 1.6 **/	
						}

    				i_returncode = fn_pack_vartofml ( c_ServiceName,
            	                         c_err_msg,
                                      &ptr_fml_Obuf,
                                      68,		/*** Ver 1.2 changed from 39 to 40 ***/ /* changed to 52 in ver 1.3 */  /** Ver 1.4 changed from 52 to 53  **/  /** ver 1.5 changed from 53 to 54 **/ /** ver 1.6 changed from 54 to 55 **//* changed to 59 in Ver 1.7 */ /* Ver 2.1 changed from 59 to 60 */ /* Changed to 62 in ver 2.2 */ /* Ver 2.4 changed from 62 to 64*/ /* Changed from 64 to 65 in Ver 2.3 */ /*** 67 to 68 in Ver 4.0 ***/
                                  		/** Ver 3.5 changed from 65 to 67 **/	
																			/**FFO_EBA_MTCH_ACT_NO,(char *)&c_mtch_accnt_no, ** Commented in Ver 2.0 **/
																			FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no, /** Ver 2.0 **/
                                      FFO_PRDCT_TYP,(char *)&c_null,
                                      FFO_CTGRY_INDSTK,(char *)&c_null,
                                      FFO_UNDRLYNG,(char *)c_tmp_undrlying,
                                      FFO_XCHNG_CD,(char *)c_xchng_cd,
                                      FFO_EXPRY_DT,(char *)" ",
                                      FFO_OPT_TYP,(char *)&c_null,
                                      FFO_STRK_PRC,(char *)&l_null,
                                      FFO_EXER_TYP,(char *)&c_null,
                                      FFO_CNTRCT_TAG,(char *)&c_null,
                                      FFO_C_OPNPSTN_QTY,(char *)&l_grp_opn_qty,
                                      FFO_C_OPNPSTN_FLW,(char *)&c_grp_opn_flw,
                                      FFO_CVR_QTY,(char *)&l_null,
                                      FFO_LST_TRD_PRC,(char *)&l_null,
                                      FFO_UI_BUY_QTY,(char *)&l_null,
                                      FFO_UI_SELL_QTY,(char *)&l_null,
                                      FFO_MIN_LOT_QTY,(char *)&l_null,
                                      /** FFO_STP_LSS_TGR,(char *)&l_null, commented in 2.9  **/
                                      FFO_STP_LSS_TGR,(char *)&li_stp_lss_tgr_prc, /** ver 2.9 **/ 
                                      FFO_LMT_RT,(char *)&l_null,
                                      FFO_ORDR_FLW,(char *)&c_null,
                                      FFO_PSTN_AMT_BLKD,(char *)&d_null,
                                      FFO_C_MTM_OPN_VAL,(char *)&d_null,
                                      FFO_U_IMTM_SPRD_PL,(char *)&d_null,
				      FFO_EFF_CLS_PRC, (char *) &d_null, /*** Ver 4.0 ***/
                                      FFO_AMOUNT,(char *)&d_grp_trd_mrgn,
                                      FFO_U_ORDR_MRGN,(char *)&d_null,
                                      FFO_U_MM_TRD_MRGN,(char *)&d_null,
                                      FFO_BAL_AMT,(char *)&d_null,
                                      FFO_UNRLZD_PL,(char *)&d_grp_pl,
                                      FFO_DWL_FLG,(char *)&c_null,
                                      FFO_SPL_FLG,(char *)&c_null,
                                      FFO_STATUS_FLG,(char *)&c_null,
                                      FFO_QT_TRDNG_FLG,(char *)&c_null,
																			FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flag,     /***  Ver 2.3 ***/
                                      FFO_FUT_CONV_FLG,(char *)&c_null,
                                      FFO_MTM_FLG,(char *)&c_null,
                                      FFO_MOD_CAN_FLG,(char *)&c_null,
                                      FFO_IS_FLG,(char *)&c_null,
                                      FFO_RQST_TYP,(char *)&c_spl_flg,
                                      FFO_COUNTER,(char *)&i_tag_cnt,
																			FFO_ORDR_RFRNC,(char *)"",
																	    FFO_CURR_RT, (char *)&l_null,                            /*** ver 1.2 ***/
                                      FFO_DAM_TRNSCTN, (char *)&c_null,    /*** Ver 1.3 ***/
                                      FFO_STLMNT_TYP, (char *)&c_null,      /*** Ver 1.3 ***/
                                      FFO_DLVRY_ALLWD, (char *)&c_null,  /*** Ver 1.3 ***/
                                      FFO_ORD_TYP, (char *)&c_null,       /*** Ver 1.3 ***/
                                      FFO_BOARD_LOT_QTY, (char *)&l_null, /*** Ver 1.3 ***/
                                      FFO_TMPLT, (char *)&l_null,       /*** Ver 1.3 ***/
                                      FFO_XCHNG_CAN_QTY, (char *)&l_null, /*** Ver 1.3 ***/
                                      FFO_EX_ORDR_TYP, (char *)&c_null,       /*** Ver 1.3 ***/
                                      FFO_ORD_TOT_QTY, (char *)&l_null,       /*** Ver 1.3 ***/
                                      FFO_FUT_PRC, (char *)&d_null,            /*** Ver 1.3 ***/
                                      FFO_PLG_ORDR_RFRNC, (char *)"",    /*** Ver 1.3 ***/
                                      FFO_EXRC_STTS, (char *)&c_null,   /*** Ver 1.3 ***/
                                      FFO_RMS_PRCSD_FLG, (char *)&c_null,                      /*** Ver 1.4 ***/
                                      FFO_DR_CR_FLG, (char *)&c_sqr_off_all_at_mkt,             /*** ver 1.5 ***/
																			FFO_NKD_BLKD_FLG, (char *)&c_cancel_all_flag,       					 /*** Ver 1.6 ***/
                                      FFO_UPLD_MTCH_FLG, (char *)&c_null,   /*** Ver 1.7 ***/
                                      FFO_EXRC_QTY, (char *)&l_null,        /*** Ver 1.7 ***/
                                      FFO_ORD_VALID_DT, (char *)c_ord_val_dt,         /*** Ver 1.7 ***/
                                      FFO_EBA_STTS, (char *)&c_null,         /*** Ver 1.7 ***/
                                      FFO_BK_UBK_FLG,(char *)&c_null,  /*** Ver 2.1 ***/
                                      FFO_ND_STRT_DT, (char *)"",  /*** Ver 2.2 ***/
                                      FFO_ND_END_DT, (char *)"", /*** Ver 2.2 ***/
                                      FFO_SO_AMT_BLKD, (char *)&d_null, /** Ver 2.4 **/
                                      FFO_OPNPSTN_VAL, (char *)&d_null, /** Ver 2.4 **/
                                      FFO_INDX_INDCTR, (char *)&c_null,     /*** Ver 3.5 ***/
                                      /**FFO_STLMNT_TYP, (char *)&c_null       *** Ver 3.5 *** ** Ver 3.8 **/
                                      FFO_BNK_STTS, (char *)&c_null       /*** Ver 3.8 ***/ 
                                    );

    				if ( i_returncode == -1 )
    				{
      				fn_errlog( c_ServiceName, "S31365", FMLMSG, c_err_msg  );
              /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
              EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
              EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
      				tpfree ( ( char * ) ptr_fml_Obuf );
      				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    				}

    				c_grp_opn_flw = '\0';
    				l_grp_opn_qty = 0;
    				d_grp_ord_mrgn = 0.0;
						d_grp_pl  = 0.0;
						d_grp_trd_mrgn = 0.0;
						i_grp_cnt =0;
  				}
        	break;
				}
      	else
				{ 
					fn_errlog( c_ServiceName, "S31370", SQLMSG, c_err_msg );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	tpfree((char *)ptr_fml_Obuf);
          /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       	}
			}

			rtrim(c_undrlyng);
			rtrim(c_expry_dt);
			rtrim(c_ordr_rfrnc);
			rtrim(c_sltp_ordr_rfrnc);

			if( DEBUG_MSG_LVL_3 )  /** ver 4.1 debug level changed to 3 **/
			{
				fn_userlog(c_ServiceName,"After Normal customer record fetch");
			}

			if( c_prd_typ != 'I' && c_prd_typ != 'U')   /** ver 1.5 **/
			{
      	if(  l_opnpstn_qty != 0   &&  l_ibuy_qty == 0  && l_isell_qty == 0)     /** Ver 1.4 **/
      	{
        	c_sqroffmkt_flg = 'Y';
      	}
      	else    /*** ver 1.5 ***/
      	{
        	i_sqroffmkt_flg_cnt++;
      	}

				/*** Ver 1.6 Starts ****/
        if(l_ibuy_qty > 0 || l_isell_qty < 0)
        {
          c_cancel_all_flag = 'Y';
          c_cntrct_lvl_cancel_flg = 'Y';
        }
        else
        {
          c_cntrct_lvl_cancel_flg = 'N';
        }
        if( DEBUG_MSG_LVL_3)
        {
         fn_userlog(c_ServiceName, "Contract wise Cancel Flag:%c:", c_cntrct_lvl_cancel_flg); 
        }
        /*** Ver 1.6 Ends ****/
		  }	

			if( DEBUG_MSG_LVL_3)
			{
        fn_userlog(c_ServiceName,"After c_sqroffmkt_flg :%c:",c_sqroffmkt_flg);    /** Ver 1.4 **/
				fn_userlog(c_ServiceName,"Product Type :%c:",c_prd_typ);
				fn_userlog(c_ServiceName,"Category STK/IDX :%c:",c_ctgry_indstk);
				fn_userlog(c_ServiceName,"Underlying :%s:",c_undrlyng);
				fn_userlog(c_ServiceName,"Expiry date :%s:",c_expry_dt);
				fn_userlog(c_ServiceName,"Exercise type :%c:",c_exrc_typ);
				fn_userlog(c_ServiceName,"Strike price :%ld:",l_strike_prc);
				fn_userlog(c_ServiceName,"Option type :%c:",c_opt_typ);
				fn_userlog(c_ServiceName,"Contract tag :%c:",c_cntrct_tag);
				fn_userlog(c_ServiceName,"Open position flow :%c:",c_opnpstn_flw);
				fn_userlog(c_ServiceName,"Cover qty :%ld:",l_cvr_qty);
				fn_userlog(c_ServiceName,"Ibuy qty :%ld:",l_ibuy_qty);
				fn_userlog(c_ServiceName,"isell qty :%ld:",l_isell_qty);
				fn_userlog(c_ServiceName,"price :%lf:",d_price);
				fn_userlog(c_ServiceName," d_t2t_prc :%lf:",d_t2t_prc); /*** Ver 4.0 ***/
				fn_userlog(c_ServiceName,"Order margin :%lf:",d_ord_mrgn);
				fn_userlog(c_ServiceName,"trade margin :%lf:",d_utrd_mrgn);
				fn_userlog(c_ServiceName,"fresh order status :%c:",c_frsh_ordr_stts);
				fn_userlog(c_ServiceName,"cover order status :%c:",c_cvr_ordr_stts);
				fn_userlog(c_ServiceName,"Order ref :%s:",c_ordr_rfrnc);
				fn_userlog(c_ServiceName,"Sltp order ref :%s:",c_sltp_ordr_rfrnc);
				fn_userlog(c_ServiceName,"Mod cnt :%ld:",l_mdfctn_cntr);
			}

      if( strcmp(c_undrlyng,c_prev_undrlyng) != 0 )
      {
        c_prev_tag = '\0';
      }

			if((c_prev_tag != c_cntrct_tag && i_cnt != 0 && strcmp(c_undrlyng,c_prev_undrlyng) != 0 ) || (strcmp(c_undrlyng,c_prev_undrlyng) != 0 && i_cnt != 0))
      {
				/*** ver 2.3 Starts ***/
				if((strcmp(c_undrlyng,c_prev_undrlyng) != 0 && i_cnt != 0) && ( c_prd_type =='F' || c_prd_type == ALL ))
				{
          if( DEBUG_MSG_LVL_5)
          {
						fn_userlog(c_ServiceName,"Checking before und_chg for RSPREAD_ORDR_BK Only");
					}
					c_rsprd_pos_flg = '\0';
					EXEC SQL
						select TO_CHAR( FOD_EXPRY_DT, 'DD-MON-YYYY' ),
							FOD_ORDR_FLW,
							FTQ_CNTRCT_TAG,
							FTQ_LST_TRD_PRC
						/* INTO  :c_expry_dt,
							:c_uopnpstn_flw,
							:c_cntrct_tag,		* Ver 2.7 */
						/* Ver 2.7 Starts */
						INTO	:c_r_expry_dt,
							:c_r_opnpstn_flw,
							:c_r_cntrct_tag,
						/* Ver 2.7 Ends */
							:l_lst_trdd_prc
						FROM  FOD_FO_ORDR_DTLS, FTQ_FO_TRD_QT
						WHERE FOD_EXPRY_DT NOT IN (SELECT DISTINCT(FFP_EXPRY_DT)
									FROM FFP_FO_FUTURES_PSTN
									WHERE FFP_XCHNG_CD = :c_xchng_cd
									AND FFP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
									AND FFP_UNDRLYNG = :c_prev_undrlyng
									AND FFP_PRDCT_TYP = :c_prd_typ
									AND (    FFP_OPNPSTN_QTY != 0
									OR FFP_IBUY_QTY    != 0
									OR FFP_ISELL_QTY   != 0 ))
						AND FTQ_EXPRY_DT = FOD_EXPRY_DT
						AND FOD_UNDRLYNG = FTQ_UNDRLYNG
						AND FTQ_PRDCT_TYP = FOD_PRDCT_TYP
						AND FOD_ORDR_STTS in ('P','O','R','Q')
						AND FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
						AND FOD_PRDCT_TYP= :c_prd_typ
						AND FOD_UNDRLYNG= :c_prev_undrlyng
						AND FOD_SPL_FLAG='O'
						AND FOD_XCHNG_CD = :c_xchng_cd
						AND ROWNUM < 2;
					if( SQLCODE != 0 && ( SQLCODE != NO_DATA_FOUND ))
					{
						fn_errlog( c_ServiceName, "S31375", SQLMSG, c_err_msg );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						tpfree((char *)ptr_fml_Obuf);
            /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
            EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
					else if ( SQLCODE == NO_DATA_FOUND )
					{
						fn_userlog(c_ServiceName,"No Records of UND_CHG_RSPREAD_ORDR_BK is Available");
						c_rsprd_pos_flg = 'N';
					}
					else
					{
						rtrim(c_expry_dt);
          	if( DEBUG_MSG_LVL_3)
          	{
							fn_userlog(c_ServiceName,"Records for UND_CHG_RSPREAD_ORDR_BK is Available");
							fn_userlog(c_ServiceName,"c_expry_dt:%s: c_uopnpstn_flw:%c: c_cntrct_tag:%c: l_lst_trdd_prc:%ld:",c_expry_dt,c_uopnpstn_flw,c_cntrct_tag,l_lst_trdd_prc);
							fn_userlog(c_ServiceName,"c_mtch_accnt_no:%s: c_prd_typ:%c: c_prev_undrlyng:%s:",c_mtch_accnt_no,c_prd_typ,c_prev_undrlyng);
						}
						c_rsprd_pos_flg = 'N';
						EXEC SQL
							SELECT nvl(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0),
								FOD_CLM_MTCH_ACCNT,
								FOD_INDSTK,
								FOD_UNDRLYNG,
								FOD_EXER_TYP,
								NVL(sum(FOD_SROLL_DIFF_AMT),0) + NVL(sum(FOD_SROLL_LSS_AMT),0)
							INTO
								:l_fod_qty,
								:c_mtch_accnt_no,
								:c_uindstk,
								:c_prev_undrlyng,
								:c_exrc_typ,
								:d_rordr_mrgn
							FROM  FOD_FO_ORDR_DTLS
							WHERE FOD_ORDR_STTS in ('P','O','R','Q')
							AND FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
							AND FOD_PRDCT_TYP= :c_prd_typ
							AND FOD_UNDRLYNG = :c_prev_undrlyng
							AND FOD_EXPRY_DT = :c_r_expry_dt				/* Ver 2.7 */
							AND FOD_XCHNG_CD = :c_xchng_cd
							and FOD_ORDR_FLW = :c_r_opnpstn_flw			/* Ver 2.7 */
							AND FOD_SPL_FLAG = 'O'
							GROUP BY FOD_CLM_MTCH_ACCNT,FOD_INDSTK,FOD_UNDRLYNG,FOD_EXER_TYP;
						if ( SQLCODE != 0 )
						{			
							fn_errlog( c_ServiceName, "S31380", SQLMSG, c_err_msg );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							tpfree((char *)ptr_fml_Obuf);
              /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
              EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
              EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
						c_spl_flg = CONTRACT_IP;
						i_tag_cnt++;
						/* 
						l_cvr_qty = 0;
						li_bo_qty = 0;
						li_so_qty = 0;
						c_uprdct_typ = c_prd_typ;
						l_cvr_qty = l_cvr_qty + l_fod_qty;
						if(c_uopnpstn_flw == 'B')
						{
							li_bo_qty = li_bo_qty + l_fod_qty;
						}
						else if (c_uopnpstn_flw == 'S')
						{
							li_so_qty = li_so_qty - l_fod_qty;
						}
						c_uopnpstn_flw = '-';
						* Ver 2.7 */
						/* Ver 2.7 Starts */
						li_r_bo_qty = 0;
						li_r_so_qty = 0;
            if(c_r_opnpstn_flw == 'B')
            {
              li_r_bo_qty = li_r_bo_qty + l_fod_qty;
            }
            else if (c_r_opnpstn_flw == 'S')
            {
              li_r_so_qty = li_r_so_qty - l_fod_qty;
            }
						/* Ver 2.7 Ends */
          	if( DEBUG_MSG_LVL_3)
          	{
							fn_userlog(c_ServiceName,"*** Before packing UND_CHG_RSPREAD_ORDR_BK Records with same Tag ***");
							fn_userlog(c_ServiceName,"c_mtch_accnt_no:%s: c_prd_typ:%c: c_ctgry_indstk:%c: c_prev_undrlyng:%s: c_xchng_cd:%s: c_expry_dt:%s:",c_mtch_accnt_no,c_prd_typ,c_ctgry_indstk,c_prev_undrlyng,c_xchng_cd,c_expry_dt);
							fn_userlog(c_ServiceName,"c_spl_flg:%c: i_tag_cnt:%ld: c_rollover_flag:%c: c_sprd_roll_flag:%c: c_exrc_typ:%c: c_prev_tag:%c: c_opnpstn_flw:%c: ",c_spl_flg,i_tag_cnt,c_rollover_flag,c_sprd_roll_flag,c_exrc_typ,c_prev_tag,c_opnpstn_flw);
							fn_userlog(c_ServiceName,"d_utrd_mrgn:%lf: d_rordr_mrgn:%lf: d_umin_trd_mrgn:%lf: d_avilable_amount:%lf: l_lst_trdd_prc:%ld:",d_utrd_mrgn,d_rordr_mrgn,d_umin_trd_mrgn,d_avilable_amount,l_lst_trdd_prc);
							fn_userlog(c_ServiceName,"l_cvr_qty:%ld: l_ibuy_qty:%ld: l_isell_qty:%ld: l_lot_size:%ld:",l_cvr_qty,l_ibuy_qty,l_isell_qty,l_lot_size);
							fn_userlog(c_ServiceName,"l_fod_qty:%ld: li_bo_qty:%ld: li_so_qty:%ld:",l_fod_qty,li_bo_qty,li_so_qty);
						}

						i_returncode = fn_pack_vartofml ( c_ServiceName,
										    c_err_msg,
										    &ptr_fml_Obuf,
										    68/** Ver 3.5 changed from 65 to 67 **/, /*** 67 to 68 in Ver 4.0 ***/
										    FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no, 
										    FFO_PRDCT_TYP,(char *)&c_prd_typ,
										    FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,
										    FFO_UNDRLYNG,(char *)c_prev_undrlyng,
										    FFO_XCHNG_CD,(char *)c_xchng_cd,
										    FFO_EXPRY_DT,(char *)c_r_expry_dt,				/* Ver 2.7 */
										    FFO_OPT_TYP,(char *)&c_null,
										    FFO_STRK_PRC,(char *)&l_null,
										    FFO_EXER_TYP,(char *)&c_exrc_typ,
										    FFO_CNTRCT_TAG,(char *)&c_r_cntrct_tag,		/* Ver 2.7 */
										    FFO_C_OPNPSTN_QTY,(char *)&l_null,
										    FFO_C_OPNPSTN_FLW,(char *)&c_null,				/* Ver 2.7 */
										    FFO_CVR_QTY,(char *)&l_fod_qty,						/* Ver 2.7 */
										    FFO_LST_TRD_PRC,(char *)&l_lst_trdd_prc,
										    FFO_UI_BUY_QTY,(char *)&li_r_bo_qty,			/* Ver 2.7 */
										    FFO_UI_SELL_QTY,(char *)&li_r_so_qty,			/* Ver 2.7 */
										    FFO_MIN_LOT_QTY,(char *)&l_lot_size,
										    /** FFO_STP_LSS_TGR,(char *)&l_null, commented in 2.9  **/
                        FFO_STP_LSS_TGR,(char *)&li_stp_lss_tgr_prc, /** ver 2.9 **/ 
										    FFO_LMT_RT,(char *)&l_null,
										    FFO_ORDR_FLW,(char *)&c_null,
										    FFO_PSTN_AMT_BLKD,(char *)&d_null,
										    FFO_C_MTM_OPN_VAL,(char *)&d_null,
										    FFO_U_IMTM_SPRD_PL,(char *)&d_null,
										    FFO_EFF_CLS_PRC, (char *) &d_null, /*** Ver 4.0 ***/
										    FFO_AMOUNT,(char *)&d_null,
										    FFO_U_ORDR_MRGN,(char *)&d_null,					/* Ver 2.7 */
										    FFO_U_MM_TRD_MRGN,(char *)&d_null,
										    FFO_BAL_AMT,(char *)&d_null,
										    FFO_UNRLZD_PL,(char *)&d_null,
										    FFO_DWL_FLG,(char *)&c_null,
										    FFO_SPL_FLG,(char *)&c_null,
										    FFO_STATUS_FLG,(char *)&c_null,
										    FFO_QT_TRDNG_FLG,(char *)&c_null,					/* Ver 2.7 */
										    FFO_SETTLOR_STTS,(char *)&c_null,					/* Ver 2.7 */ 
										    FFO_FUT_CONV_FLG,(char *)&c_null,
										    FFO_MTM_FLG,(char *)&c_null,
										    FFO_MOD_CAN_FLG,(char *)&c_null,
										    FFO_IS_FLG,(char *)&c_null,
										    FFO_RQST_TYP,(char *)&c_spl_flg,
										    FFO_COUNTER,(char *)&i_tag_cnt,
										    FFO_ORDR_RFRNC,(char *)"",
										    FFO_CURR_RT, (char *)&l_null, 
										    FFO_DAM_TRNSCTN, (char *)&c_null,
										    FFO_STLMNT_TYP, (char *)&c_null,   
										    FFO_DLVRY_ALLWD, (char *)&c_null, 
										    FFO_ORD_TYP, (char *)&c_null,      
										    FFO_BOARD_LOT_QTY, (char *)&l_null, 
										    FFO_TMPLT, (char *)&l_null, 
										    FFO_XCHNG_CAN_QTY, (char *)&l_null,
										    FFO_EX_ORDR_TYP, (char *)&c_null,     
										    FFO_ORD_TOT_QTY, (char *)&l_null,    
										    FFO_FUT_PRC, (char *)&d_null,        
										    FFO_PLG_ORDR_RFRNC, (char *)"",   
										    FFO_EXRC_STTS, (char *)&c_null,   
										    FFO_RMS_PRCSD_FLG, (char *)&c_null, 
										    FFO_DR_CR_FLG, (char *)&c_null,          
										    FFO_NKD_BLKD_FLG, (char *)&c_null,
										    FFO_UPLD_MTCH_FLG, (char *)&c_null,
										    FFO_EXRC_QTY, (char *)&l_null,    
										    FFO_ORD_VALID_DT, (char *)&c_null,  
										    FFO_EBA_STTS, (char *)&c_null,    
										    FFO_BK_UBK_FLG, (char *)&c_null,
										    FFO_ND_STRT_DT, (char *)"",
										    FFO_ND_END_DT, (char *)"",
										    FFO_SO_AMT_BLKD, (char *)&d_null,
										    FFO_OPNPSTN_VAL, (char *)&d_null,
                        FFO_INDX_INDCTR, (char *)&c_null,     /*** Ver 3.5 ***/
                        /**FFO_STLMNT_TYP, (char *)&c_null       *** Ver 3.5 *** ** Ver 3.8 **/
                        FFO_BNK_STTS, (char *)&c_null       /*** Ver 3.8 ***/ 
										   );

						if ( i_returncode == -1 )
						{
							fn_errlog( c_ServiceName, "S31385", FMLMSG, c_err_msg  );
              /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
              EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
              EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
							tpfree ( ( char * ) ptr_fml_Obuf );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
					}
				}
					/*** Ver 2.3 Ends ***/
				if( DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"Inside Underlying change condition");
          fn_userlog(c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd);
          fn_userlog(c_ServiceName,"c_prev_prdct_typ :%c:",c_prev_prdct_typ);
          fn_userlog(c_ServiceName,"c_ctgry_indstk :%c:",c_prev_ctgry_indstk);
          fn_userlog(c_ServiceName," c_prev_undrlyng :%s:",c_prev_undrlyng);
          fn_userlog(c_ServiceName," c_exrc_typ :%c:",c_exrc_typ);
          fn_userlog(c_ServiceName," c_opt_typ :%c:",c_opt_typ);
          fn_userlog(c_ServiceName,"l_strike_prc :%ld:",l_strike_prc);
          fn_userlog(c_ServiceName,"c_prev_expry_dt :%s:",c_prev_expry_dt);
				}
       	if( l_grp_opn_qty > 0 )
       	{
         	c_grp_opn_flw = 'B';
       	}
       	else if( l_grp_opn_qty < 0)
       	{
         	c_grp_opn_flw = 'S';
         	l_grp_opn_qty = abs(l_grp_opn_qty);
       	}
       	else
       	{
         	c_grp_opn_flw = '\0';
       	}

       	c_spl_flg = UNDERLYING_IP;

       	i_tag_cnt++;

				if( DEBUG_MSG_LVL_3 )
				{
       		fn_userlog(c_ServiceName,"c_tmp_undrlying :%s:,i_tag_cnt :%d:",c_tmp_undrlying,i_tag_cnt);
       		fn_userlog(c_ServiceName,"l_grp_opn_qty :%ld:,c_grp_opn_flw :%c:,d_grp_ord_mrgn :%lf:,d_grp_pl :%lf:,d_grp_trd_mrgn :%lf:",l_grp_opn_qty,c_grp_opn_flw,d_grp_ord_mrgn,d_grp_pl,d_grp_trd_mrgn);
				}
   
       	i_returncode = fn_pack_vartofml ( c_ServiceName,
                                      c_err_msg,
                                      &ptr_fml_Obuf,
                                      68,		/** Ver 1.2 changed from 39 to 40 **/ /* changed to 52 in ver 1.3 */  /** Ver 1.4 changed from 52 to 53  **/  /** ver 1.5 changed from 53 to 54 **/ /** ver 1.6 changed from 54 to 55 **//* changed to 59 in Ver 1.7 */ /* Ver 2.1 changed from 59 to 60 */ /* changed to 62 in ver 2.2 */ /* Ver 2.4 changed from 62 to 64 */ /* Changed to 65 from 64 in Ver 2.3 */ /*** 67 to 68 in Ver 4.0 ***/
                                 			/** Ver 3.5  changed from 65 to 67 **/
																			/** FFO_EBA_MTCH_ACT_NO,(char *)&c_mtch_accnt_no, ** Commented in Ver 2.0 **/
																			FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no, /** Ver 2.0 **/
                                      FFO_PRDCT_TYP,(char *)&c_null,
                                      FFO_CTGRY_INDSTK,(char *)&c_null,
                                      FFO_UNDRLYNG,(char *)c_prev_undrlyng,
                                      FFO_XCHNG_CD,(char *)c_xchng_cd,
                                      FFO_EXPRY_DT,(char *)" ",
                                      FFO_OPT_TYP,(char *)&c_null,
                                      FFO_STRK_PRC,(char *)&l_null,
                                      FFO_EXER_TYP,(char *)&c_null,
                                      FFO_CNTRCT_TAG,(char *)&c_null,
                                      FFO_C_OPNPSTN_QTY,(char *)&l_grp_opn_qty,
                                      FFO_C_OPNPSTN_FLW,(char *)&c_grp_opn_flw,
                                      FFO_CVR_QTY,(char *)&l_null,
                                      FFO_LST_TRD_PRC,(char *)&l_null,
                                      FFO_UI_BUY_QTY,(char *)&l_null,
                                      FFO_UI_SELL_QTY,(char *)&l_null,
                                      FFO_MIN_LOT_QTY,(char *)&l_null,
                                      /** FFO_STP_LSS_TGR,(char *)&l_null, commented in 2.9  **/
                                      FFO_STP_LSS_TGR,(char *)&li_stp_lss_tgr_prc, /** ver 2.9 **/ 
                                      FFO_LMT_RT,(char *)&l_null,
                                      FFO_ORDR_FLW,(char *)&c_null,
                                      FFO_PSTN_AMT_BLKD,(char *)&d_null,
                                      FFO_C_MTM_OPN_VAL,(char *)&d_null,
                                      FFO_U_IMTM_SPRD_PL,(char *)&d_null,
				      FFO_EFF_CLS_PRC, (char *) &d_null, /*** Ver 4.0 ***/
                                      FFO_AMOUNT,(char *)&d_grp_trd_mrgn,
                                      FFO_U_ORDR_MRGN,(char *)&d_null,
                                      FFO_U_MM_TRD_MRGN,(char *)&d_null,
                                      FFO_BAL_AMT,(char *)&d_null,
                                      FFO_UNRLZD_PL,(char *)&d_grp_pl,
                                      FFO_DWL_FLG,(char *)&c_null,
                                      FFO_SPL_FLG,(char *)&c_null,
                                      FFO_STATUS_FLG,(char *)&c_null,
                                      FFO_QT_TRDNG_FLG,(char *)&c_null,
																			FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flag,     /***  Ver 2.3 ***/
                                      FFO_FUT_CONV_FLG,(char *)&c_null,
                                      FFO_MTM_FLG,(char *)&c_null,
                                      FFO_MOD_CAN_FLG,(char *)&c_null,
                                      FFO_IS_FLG,(char *)&c_null,
                                      FFO_RQST_TYP,(char *)&c_spl_flg,
                                      FFO_COUNTER,(char *)&i_tag_cnt,
                                      FFO_ORDR_RFRNC,(char *)"",
																		  FFO_CURR_RT, (char *)&l_null,             /*** ver 1.2  ***/
                                      FFO_DAM_TRNSCTN, (char *)&c_null,    /*** Ver 1.3 ***/
                                      FFO_STLMNT_TYP, (char *)&c_null,      /*** Ver 1.3 ***/
                                      FFO_DLVRY_ALLWD, (char *)&c_null,  /*** Ver 1.3 ***/
                                      FFO_ORD_TYP, (char *)&c_null,       /*** Ver 1.3 ***/
                                      FFO_BOARD_LOT_QTY, (char *)&l_null, /*** Ver 1.3 ***/
                                      FFO_TMPLT, (char *)&l_null,       /*** Ver 1.3 ***/
                                      FFO_XCHNG_CAN_QTY, (char *)&l_null, /*** Ver 1.3 ***/
                                      FFO_EX_ORDR_TYP, (char *)&c_null,       /*** Ver 1.3 ***/
                                      FFO_ORD_TOT_QTY, (char *)&l_null,       /*** Ver 1.3 ***/
                                      FFO_FUT_PRC, (char *)&d_null,            /*** Ver 1.3 ***/
                                      FFO_PLG_ORDR_RFRNC, (char *)"",    /*** Ver 1.3 ***/
                                      FFO_EXRC_STTS, (char *)&c_null,   /*** Ver 1.3 ***/
                                      FFO_RMS_PRCSD_FLG, (char *)&c_null,       /*** Ver 1.4 ***/
                                      FFO_DR_CR_FLG, (char *)&c_null,            /*** ver 1.5 ***/
																			FFO_NKD_BLKD_FLG, (char *)&c_null,       /*** Ver 1.6 ***/
                                      FFO_UPLD_MTCH_FLG, (char *)&c_null,   /*** Ver 1.7 ***/
                                      FFO_EXRC_QTY, (char *)&l_null,        /*** Ver 1.7 ***/
                                      FFO_ORD_VALID_DT, (char *)c_ord_val_dt,         /*** Ver 1.7 ***/
                                      FFO_EBA_STTS, (char *)&c_null,         /*** Ver 1.7 ***/
                                      FFO_BK_UBK_FLG,(char *)&c_null,  /*** Ver 2.1 ***/
                                      FFO_ND_STRT_DT, (char *)"", /*** Ver 2.2 ***/
                                      FFO_ND_END_DT, (char *)"", /*** Ver 2.2 ***/
                                      FFO_SO_AMT_BLKD, (char *)&d_null, /* Ver 2.4 */
                                      FFO_OPNPSTN_VAL, (char *)&d_null, /* Ver 2.4 */
                                      FFO_INDX_INDCTR, (char *)&c_null,     /*** Ver 3.5 ***/
                                      /**FFO_STLMNT_TYP, (char *)&c_null       *** Ver 3.5 *** ** Ver 3.8 **/
                                      FFO_BNK_STTS, (char *)&c_null       /*** Ver 3.8 ***/ 
                                    );

        if ( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31390", FMLMSG, c_err_msg  );
          /**  EXEC SQL CLOSE sys_spn_cur; ** Commented in Ver 2.0 **/
          /* EXEC SQL CLOSE sys_cur;  *** Ver 2.0 *** Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/  
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        c_grp_opn_flw = '\0';
        l_grp_opn_qty = 0;
        d_grp_ord_mrgn = 0.0;
				d_grp_pl  = 0.0;
        d_grp_trd_mrgn = 0.0;
        i_grp_cnt =0;
      }


			if(c_prd_typ == 'F')
			{
				l_lst_trdd_prc = 0;
        d_mtm_loss = 0.0;     /***  Ver 1.7 ***/
				c_setlmnt_flg = '\0'; /*** Ver 2.1 ***/

				if ( li_stp_lss_tgr_prc == -100 || li_stp_lss_tgr_prc == 22222222 )			/***	Ver 1.7	***/
				{
					li_stp_lss_tgr_prc	=	0;
				}
				
				if( DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName," Previous underlying :%s:,current :%s:",c_prev_undrlyng,c_undrlyng);
					fn_userlog(c_ServiceName," Previous c_prev_tag :%c:,current :%c:",c_prev_tag,c_cntrct_tag);
					fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);	
    			fn_userlog(c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd);
    			fn_userlog(c_ServiceName,"c_prd_typ :%c:",c_prd_typ);
    			fn_userlog(c_ServiceName,"c_ctgry_indstk :%c:",c_ctgry_indstk);
    			fn_userlog(c_ServiceName," c_undrlyng :%s:",c_undrlyng);
    			fn_userlog(c_ServiceName," c_exrc_typ :%c:",c_exrc_typ);
    			fn_userlog(c_ServiceName," c_opt_typ :%c:",c_opt_typ);
    			fn_userlog(c_ServiceName,"l_strike_prc :%ld:",l_strike_prc);
    			fn_userlog(c_ServiceName,"c_expry_dt :%s:",c_expry_dt);
					fn_userlog(c_ServiceName,"c_mtch_accnt_no :%s:",c_mtch_accnt_no);
				}

        EXEC SQL
            SELECT nvl(FTQ_LST_TRD_PRC,0)
            INTO   :l_lst_trdd_prc
            FROM   ftq_fo_trd_qt
            WHERE  ftq_xchng_cd = :c_xchng_cd
            /***  AND  ftq_prdct_typ = 'F'       *** Commented in Ver 1.8 to remove hard parsing ***/
            AND  ftq_prdct_typ = :c_prd_typ  /*** Ver 1.8 binding variable used instead of hard coded value ***/
            /** AND  trim(ftq_undrlyng) = :c_undrlyng ** 3.6 **/
            AND  ftq_undrlyng = :c_undrlyng  /** trim Remove in Ver 3.6 **/
            AND  ftq_exer_typ = :c_exrc_typ
            /***  AND  ftq_opt_typ = '*'
            AND  ftq_strk_prc =0           *** Commented in Ver 1.8 to remove hard parsing ***/
            AND  ftq_opt_typ = :c_fut_opt_typ   /*** Ver 1.8 binding variable used instead of hard coded value ***/
            AND  ftq_strk_prc = :l_fut_strk_prc /*** Ver 1.8 binding variable used instead of hard coded value ***/
            AND  ftq_expry_dt = :c_expry_dt;

        if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
        {
          fn_errlog( c_ServiceName, "S31395", SQLMSG, c_err_msg  );
          /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        c_uprdct_typ = '\0';
        c_uindstk = '\0';
        c_uopnpstn_flw = '\0';
        l_uopnpstn_qty = '\0';
        d_utrd_mrgn = 0.0;
        d_sprd_mrgn = 0.0;
        d_umin_trd_mrgn = 0.0;

        rtrim(c_undrlyng);

				long l_ubuy_exctd_qty = 0;
				long l_usell_exctd_qty = 0;

        EXEC SQL
					 /*** Commented in Ver 2.3 ***
           SELECT  fup_prdct_typ,
                   fup_indstk,
                   fup_uopnpstn_flw,
									 FUP_UBUY_EXCTD_QTY,
									 FUP_USELL_EXCTD_QTY,
                   abs(fup_uopnpstn_qty),
                   fup_utrd_mrgn + fup_add_mrgn_val,
                   fup_uspread_mrgn,
                   fup_uordr_mrgn,
                   NVL(fup_umin_trd_mrgn,0)
           INTO    :c_uprdct_typ,
                   :c_uindstk,
                   :c_uopnpstn_flw,
								   :l_ubuy_exctd_qty,
								   :l_usell_exctd_qty,
                   :l_uopnpstn_qty,
                   :d_utrd_mrgn,
                   :d_sprd_mrgn,
                   :d_ordr_mrgn,
                   :d_umin_trd_mrgn
           FROM   fup_fut_undrlyng_pstn
           WHERE  fup_clm_mtch_accnt = :c_mtch_accnt_no
           AND    fup_xchng_cd = :c_xchng_cd
           AND    fup_undrlyng = :c_undrlyng
           AND    fup_cntrct_tag = :c_cntrct_tag
           AND    fup_prdct_typ = :c_prd_typ;
									*** Comment Ends in Ver 2.3 ***/
           /*** Add start in Ver 2.3 ***/
           SELECT  FUP_PRDCT_TYP,
                   FUP_INDSTK,
                   FUP_UOPNPSTN_FLW,
                   abs(FUP_UOPNPSTN_QTY),
                   FUP_UTRD_MRGN + FUP_ADD_MRGN_VAL,
                   FUP_USPREAD_MRGN,
                   FUP_UORDR_MRGN,
                   NVL(FUP_UMIN_TRD_MRGN,0),
                   NVL(sum(FOD_SROLL_DIFF_AMT),0) + NVL(sum(FOD_SROLL_LSS_AMT),0)
           INTO    :c_uprdct_typ,
                   :c_uindstk,
                   :c_uopnpstn_flw,
                   :l_uopnpstn_qty,
                   :d_utrd_mrgn,
                   :d_sprd_mrgn,
                   :d_ordr_mrgn,
                   :d_umin_trd_mrgn,
                   :d_sroll_diff_amt
           FROM   FUP_FUT_UNDRLYNG_PSTN, FOD_FO_ORDR_DTLS
           WHERE  FUP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
           AND    FUP_XCHNG_CD = :c_xchng_cd
           AND    FUP_UNDRLYNG = :c_undrlyng
           AND    FUP_CNTRCT_TAG = :c_cntrct_tag
           AND    FUP_PRDCT_TYP =  :c_prd_typ
           AND    FOD_SPL_FLAG(+) = 'O'
           AND    FUP_CLM_MTCH_ACCNT = FOD_CLM_MTCH_ACCNT(+)
           AND    FUP_XCHNG_CD = FOD_XCHNG_CD(+)
           AND    FUP_UNDRLYNG = FOD_UNDRLYNG(+)
           AND    FUP_PRDCT_TYP = FOD_PRDCT_TYP(+)
           GROUP By FUP_PRDCT_TYP,FUP_INDSTK,
                  FUP_UOPNPSTN_FLW,abs(FUP_UOPNPSTN_QTY),
                  (FUP_UTRD_MRGN + FUP_ADD_MRGN_VAL),
                   FUP_USPREAD_MRGN,FUP_UORDR_MRGN,
                   NVL(FUP_UMIN_TRD_MRGN,0);

              /*** Add Ends in Ver 2.3 ***/

        if( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S31400", SQLMSG, c_err_msg  );
          /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
				d_ordr_mrgn = d_ordr_mrgn + d_sroll_diff_amt;   /*** Ver 2.3 ***/

				if( DEBUG_MSG_LVL_3 )
				{
        	fn_userlog(c_ServiceName,"d_utrd_mrgn, :%lf:,d_ordr_mrgn :%lf:,d_sprd_mrgn :%lf:,d_umin_trd_mrgn :%lf:",d_utrd_mrgn,d_ordr_mrgn,d_sprd_mrgn,d_umin_trd_mrgn);
					fn_userlog(c_ServiceName,"d_sroll_diff_amt :%d:",d_sroll_diff_amt); 	/*** Ver 2.3 ***/
				}

    		EXEC SQL
      		SELECT decode(:l_opnpstn_qty, 0, 0, round(((:d_mtm_opn_val/:l_opnpstn_qty)/100),2) )
      		INTO :d_base_prc
      		FROM  dual;

        if ( c_opnpstn_flw == BUY )
        {
          d_curr_cnt_opn_val = ((double)d_base_prc * (double)l_opnpstn_qty * ( 100));
          l_und_buy_opn_qty  = l_und_buy_opn_qty + l_opnpstn_qty;
        }
        else if(c_opnpstn_flw == SELL )
        {
          d_curr_cnt_opn_val = ((double)d_base_prc * (double)l_opnpstn_qty * (100));
          l_und_sell_opn_qty = l_und_sell_opn_qty + l_opnpstn_qty;
        }
        else
        {
          d_curr_cnt_opn_val=0;
        }

        d_curr_uopn_val = d_curr_uopn_val + d_curr_cnt_opn_val;

        if ( d_utrd_mrgn != 0 )
        {
          if ( d_sprd_mrgn != 0 )
          {
            fn_userlog(c_ServiceName,"Inside Spread Margin Condition.");
            
						c_jointsqroff_flg = 'Y';
						i_sqroffmkt_flg_cnt++;			/** ver 1.5 **/ 

            l_sprd_qty = fn_minl(l_und_sell_opn_qty,l_und_buy_opn_qty); 

						if( DEBUG_MSG_LVL_0 )
						{
							fn_userlog(c_ServiceName,"HTML5 l_ubuy_exctd_qty IS :%ld:",l_ubuy_exctd_qty);
							fn_userlog(c_ServiceName,"HTML5 l_usell_exctd_qty IS :%ld:",l_usell_exctd_qty);
							fn_userlog(c_ServiceName,"HTML5 l_sprd_qty Is :%ld:",l_sprd_qty);
						}
          }

          c_addmrgn_flg = 'Y';

          if( abs(l_opnpstn_qty) - abs(l_cvr_qty) > 0)
          {
            c_conv_flg ='F';
						c_sqroff_flg = 'Y' ;
          }
						
        }

				i_tag_cnt++;

				if( DEBUG_MSG_LVL_3 )
				{
					fn_userlog(c_ServiceName,"HTML5 c_prev_tag is :%c:",c_prev_tag);
					fn_userlog(c_ServiceName,"HTML5 c_cntrct_tag is :%c:",c_cntrct_tag);
					fn_userlog(c_ServiceName,"HTML5 c_undrlyng is :%s:",c_undrlyng);
					fn_userlog(c_ServiceName,"HTML5 c_prev_undrlyng is :%s:",c_prev_undrlyng);
					fn_userlog(c_ServiceName,"HTML5 i_tag_cnt is :%d:",i_tag_cnt);
					fn_userlog(c_ServiceName,"HTML5 i_prev_tag_cnt is :%d:",i_prev_tag_cnt);
					fn_userlog(c_ServiceName,"HTML5 l_sprd_qty is :%ld:",l_sprd_qty);
				}

				if(c_prev_tag == c_cntrct_tag && strcmp(c_undrlyng,c_prev_undrlyng) == 0 )
        {
           i_tag_cnt = i_prev_tag_cnt;
				}

				if(i_tag_cnt != i_prev_tag_cnt)
				{
					l_sprd_qty	=	0;		/***	Ver 1.7	***/
         	d_umin_trd_mrgn=fn_cal_min_mrgn(c_ServiceName,c_mtch_accnt_no,c_undrlyng,c_cntrct_tag,c_xchng_cd,c_uprdct_typ,c_ctgry_indstk,c_exrc_typ,l_lst_trdd_prc,d_curr_uopn_val,l_sprd_qty);

        	if(d_umin_trd_mrgn==-1)
         	{
           	fn_errlog( c_ServiceName, "S31405", "",c_err_msg  );
            /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
            EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
           	tpfree ( ( char * ) ptr_fml_Obuf );
           	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         	}


         	i_mtm_loss_stts=fn_cal_mtm_loss(c_ServiceName,c_mtch_accnt_no,c_undrlyng,c_cntrct_tag,c_xchng_cd,c_prd_typ, c_ctgry_indstk,c_exrc_typ,&d_mtm_loss);

          if(i_mtm_loss_stts==-1)
          {
           	fn_errlog( c_ServiceName, "S31410", "",c_err_msg  );
            /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
            EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
           	tpfree ( ( char * ) ptr_fml_Obuf );
           	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

				  if( DEBUG_MSG_LVL_3 )
					{
						fn_userlog(c_ServiceName,"HTML5 d_umin_trd_mrgn is :%lf:",d_umin_trd_mrgn);
						fn_userlog(c_ServiceName,"HTML5 d_utrd_mrgn is :%lf:",d_utrd_mrgn);
						fn_userlog(c_ServiceName,"HTML5 d_mtm_loss is :%lf:",d_mtm_loss);
					}

          d_avilable_amount = d_utrd_mrgn - d_mtm_loss;

					if( DEBUG_MSG_LVL_3 )
					{
						fn_userlog(c_ServiceName,"HTML5 d_avilable_amount :%lf:",d_avilable_amount);
					}
				}

			/*** Commented in Ver 1.1 ***

        EXEC SQL
          SELECT  FCM_LOT_SZ,
                  NVL(FCM_ROLLOVER_FLAG,'Q')
          INTO    :l_lot_size,
                  :c_rollover_flag
          FROM    FCM_FO_CNTRCT_MSTR
          WHERE   FCM_XCHNG_CD  = :c_xchng_cd
          AND     FCM_PRDCT_TYP = 'F'
          AND     FCM_UNDRLYNG  = :c_undrlyng
          AND     FCM_EXER_TYP  = :c_exrc_typ
          AND     FCM_EXPRY_DT  = :c_expry_dt;

			*** Ver 1.1 Comment Ends ***/

			/*** Ver 1.1 Starts ***/

				EXEC SQL
          SELECT  FTQ_MIN_LOT_QTY,
                  NVL(FTQ_ROLLOVER_FLAG,'Q'),
									NVL(FTQ_SETLMNT_FLG,'C')		/** Added in Ver 2.1 **/
          INTO    :l_lot_size,
                  :c_rollover_flag,
								  :c_setlmnt_flg				/** Added in Ver 2.1 **/
          FROM    FTQ_FO_TRD_QT
          WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
          /*** AND     FTQ_PRDCT_TYP = 'F'         *** Commented in Ver 1.8 to remove hard parsing ***/
          AND     FTQ_PRDCT_TYP = :c_fut_prd_typ /*** Ver 1.8 binding variable used instead of hard coded value ***/
          AND     FTQ_UNDRLYNG  = :c_undrlyng
          AND     FTQ_EXER_TYP  = :c_exrc_typ
          AND     FTQ_EXPRY_DT  = :c_expry_dt;
	
			/*** Ver 1.1 Ends ***/ 
      

        if( SQLCODE != 0)
        {
          fn_errlog( c_ServiceName, "S31415", SQLMSG, c_err_msg  );
          /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

			/*** Ver 3.5 Starts ***/
			c_all_flg           = 'N';
 	   	c_indx_indctr       = 'N';
  	  c_dlvry_sttlmnt_typ = '\0';
      c_dlvry_enbl_flg    = '\0';
    /**	if ( c_settlement_indicator == 'P' ) *** Physical Settled contract only *** ** Ver 3.8 ***/
      if ( c_setlmnt_flg == 'P' ) /*** Physical Settled contract only Ver 3.8 ***/ 
    	{
      if ( c_prd_typ == 'F' || c_prd_typ == 'O' )
      {
      if( l_opnpstn_qty == 0 )
      {
        c_indx_indctr = 'N';  /** Show Choose Delivery link **/
      }
      else
      { /**************
        EXEC SQL
          SELECT  NVL(FTQ_SETLMNT_FLG,'C')
          INTO  :c_settlement_indicator
          FROM   FTQ_FO_TRD_QT
          WHERE  FTQ_XCHNG_CD  = :c_xchng_cd
          AND    FTQ_PRDCT_TYP = :c_prd_typ
          AND    FTQ_INDSTK    = :c_ctgry_indstk
          AND    FTQ_UNDRLYNG  = :c_undrlyng
          AND    FTQ_EXER_TYP  = :c_exrc_typ
          AND    FTQ_OPT_TYP   = :c_fut_opt_typ
          AND    FTQ_STRK_PRC  = :l_strike_prc
          AND    FTQ_EXPRY_DT  = :c_expry_dt;

      if( (SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog( c_ServiceName, "S31420", SQLMSG, c_errmsg );
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
      }
		  ********************* Ver 3.8 , not required **************/
	
				EXEC SQL
        SELECT   NVL(FLM_DLVRYENBL_FLG,'N')
        INTO     :c_dlvry_enbl_flg
        FROM     FLM_FO_LODM_MSTR
        WHERE    FLM_UNDRLYNG = :c_undrlyng
        AND      FLM_EOS_DT >= (
        SELECT   EXG_NXT_TRD_DT
        FROM     EXG_XCHNG_MSTR
        WHERE    EXG_XCHNG_CD = 'NFO');
        /*** AND      FLM_EOS_DT >= trunc(SYSDATE); ***/

      if( (SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog( c_ServiceName, "S31425", SQLMSG, c_errmsg );
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
      }
      else if ( SQLCODE == NO_DATA_FOUND )
      {
        c_all_flg = 'Y';
        EXEC SQL
          SELECT    NVL(FLM_DLVRYENBL_FLG,'N'),FLM_EXP_DT  /** Ver 3.8 ** FLM_EXP_DT added **/
          INTO      :c_dlvry_enbl_flg,
                    :c_flm_expr_dt                              /** Ver 3.8 **/ 
          FROM      FLM_FO_LODM_MSTR
          WHERE     FLM_UNDRLYNG = 'ALL'
          AND      FLM_EOS_DT >= (
          SELECT   EXG_NXT_TRD_DT
          FROM     EXG_XCHNG_MSTR
          WHERE    EXG_XCHNG_CD = 'NFO');
          /*** AND      FLM_EOS_DT >= trunc(SYSDATE); ***/

			 if((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
        {
          fn_errlog( c_ServiceName, "S31430", SQLMSG, c_errmsg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
				if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Inside Underlying ALL CASE c_all_flg :%c:",c_all_flg);
        }
      }

      if ( ( c_dlvry_enbl_flg == 'Y' && ( strcmp(c_flm_expr_dt,c_expry_dt) == 0 ) && c_all_flg == 'Y' ) || ( c_dlvry_enbl_flg == 'Y' && c_all_flg == 'N' ) )
      {
      EXEC SQL
        SELECT      NVL(FFP_DLVRY_MODE_FLAG,'N'),
                    NVL(FFP_DLVRY_OBLGAMT_BLCKD,0),
                    NVL(FFP_DLVRY_QTY_BLCKD,0)
        INTO        :c_dlvry_mode_flg,
                    :l_dlvry_oblgamt_blckd,
                    :l_dlvry_qty_blckd
        FROM        FFP_FO_FUTURES_PSTN
        WHERE       FFP_XCHNG_CD  = :c_xchng_cd
        AND         FFP_PRDCT_TYP = :c_prd_typ
        AND         FFP_INDSTK    = :c_ctgry_indstk
        AND         FFP_UNDRLYNG  = :c_undrlyng
        AND         FFP_EXPRY_DT  = :c_expry_dt
        AND         FFP_EXER_TYP  = :c_exrc_typ
        AND         FFP_CLM_MTCH_ACCNT = :c_mtch_accnt_no;
			
			if((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
      {
        fn_errlog( c_ServiceName, "S31435", SQLMSG, c_errmsg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

        /*** Background color display ***/
        if( l_dlvry_oblgamt_blckd == 0 && l_dlvry_qty_blckd == 0 )
        {
          c_dlvry_sttlmnt_typ = 'P';  /** Show Delivery in 'Pink' **/
        }
        else
        {
          c_dlvry_sttlmnt_typ = 'G';  /** Show Delivery in  'Green' **/
        }
         if ( c_dlvry_mode_flg == 'N' )
         {
           c_indx_indctr = 'D';  /** Show Choose Delivery link **/
         }
         if ( c_dlvry_mode_flg == 'Y' )
         {
           c_indx_indctr = 'C';  /** Show Choose Non Delivery link **/
         }
				 if(DEBUG_MSG_LVL_3)
         {
           fn_userlog(c_ServiceName,"Settlement Flag :%c:",c_dlvry_sttlmnt_typ);
           fn_userlog(c_ServiceName,"Index Indicator Choose Delivery/Non-Delivery :%c:",c_indx_indctr);
         }
      }
			else
			{
        c_indx_indctr = 'N';  /** Dont show any link(Choose delivery or non delivery) **/
      }
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Index Indicator Choose Delivery/Non-Delivery :%c:",c_indx_indctr);
      }
			
     }
    }
    }
		/*** Ver 3.5 ***/
				

        /*** Add starts in ver 2.3 ***/
        if(c_prd_typ == 'F')
        {
          EXEC SQL
              SELECT NVL(FUM_ROLLOVER_SPRD_ALLWD_FLG,'N')
              INTO   :c_sprd_roll_flag
              FROM   FUM_FO_UNDRLYNG_MSTR
              WHERE  FUM_XCHNG_CD   = :c_xchng_cd
              AND    FUM_UNDRLYNG   = :c_undrlyng
              AND    FUM_PRDCT_TYP  = :c_prd_typ;

          if( SQLCODE != 0 )
          {
            fn_errlog( c_ServiceName, "S31440", SQLMSG, c_err_msg  );
            /*** EXEC SQL CLOSE sys_spn_cur; Commented in Ver 3.4 ***/
            EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :cur_spn_pstn;
            tpfree ( ( char * ) ptr_fml_Obuf );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
					EXEC SQL
						SELECT	b_qty,
							s_qty
						INTO	:l_buy_qty,
							:l_sell_qty
						FROM
							(select nvl(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0) b_qty
							from fod_fo_ordr_dtls
							where FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
							and FOD_PRDCT_TYP=:c_prd_typ
							and FOD_UNDRLYNG=:c_undrlyng
							and FOD_EXPRY_DT=:c_expry_dt
							and FOD_SPL_FLAG='O'
							and FOD_ORDR_FLW='B'
							and FOD_ORDR_STTS in ('P','O','R','Q')
							) A,
							(select nvl(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0) s_qty
							from fod_fo_ordr_dtls
							where FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
							and FOD_PRDCT_TYP=:c_prd_typ
							and FOD_UNDRLYNG=:c_undrlyng
							and FOD_EXPRY_DT=:c_expry_dt
							and FOD_SPL_FLAG='O'
							and FOD_ORDR_FLW='S'
							and FOD_ORDR_STTS in ('P','O','R','Q')
							) B;
					if( SQLCODE != 0 )
          {
            fn_errlog( c_ServiceName, "S31445", SQLMSG, c_err_msg  );
            /*** EXEC SQL CLOSE sys_spn_cur; Commented in Ver 3.4 ***/
            EXEC SQL FREE :cur_spn_pstn;
            EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
            tpfree ( ( char * ) ptr_fml_Obuf );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
					l_ibuy_qty = l_ibuy_qty + l_buy_qty;
					l_isell_qty = l_isell_qty + l_sell_qty;
        }
				if(c_uopnpstn_flw == 'B')
				{
					l_cvr_qty = l_cvr_qty + l_sell_qty;
				}
				if(c_uopnpstn_flw == 'S')
				{
					l_cvr_qty = l_cvr_qty + l_buy_qty;
				}
        if( DEBUG_MSG_LVL_3)
        {
					fn_userlog(c_ServiceName,"l_cvr_qty:%ld: l_buy_qty:%ld: l_sell_qty:%ld l_ibuy_qty:%ld: l_isell_qty:%ld:",l_cvr_qty,l_buy_qty,l_sell_qty,l_ibuy_qty,l_isell_qty);
				}
        /*** Add Ends in ver 2.3 ***/
        
        if(DEBUG_MSG_LVL_3)  /** ver 4.1 debug level changed to 3 **/
        {
         fn_userlog(c_ServiceName,"FTQ Lot Size :%ld:",l_lot_size);
         fn_userlog(c_ServiceName,"FTQ FTQ_PRDCT_TYP:%c: FTQ_UNDRLYNG:%s:",c_prd_typ,c_undrlyng);	/*** Ver 2.3 ***/
         fn_userlog(c_ServiceName,"FTQ Rollover Flag :%c:",c_rollover_flag);
         fn_userlog(c_ServiceName,"FTQ Rollover SPREAD Flag :%c:",c_sprd_roll_flag);	/*** Ver 2.3 ***/
				 fn_userlog(c_ServiceName,"Physical Settlment Flag :%c:",c_setlmnt_flg); /** Added in Ver 2.1 **/
        }

        if( (l_opnpstn_qty - l_cvr_qty) <= 0 )
        {
          c_rollover_flag = 'Q';
					/*** Ver 2.3 Starts ***/
					c_sprd_roll_flag = 'N';
					c_sqroff_flg = 'N';
					c_sqroffmkt_flg = 'N';
					c_conv_flg = 'N';
					/*** Ver 2.3 Ends ***/
        }

        c_spl_flg = CONTRACT_IP;

				if( DEBUG_MSG_LVL_3)
				{
        	fn_userlog(c_ServiceName," Rollover Flag is :%c:",c_rollover_flag);
          fn_userlog(c_ServiceName,"FTQ Rollover SPREAD Flag :%c:",c_sprd_roll_flag);	/*** Ver 2.3 ***/
          fn_userlog(c_ServiceName,"Before packing");
          fn_userlog(c_ServiceName," c_mtch_accnt_no :%s:",c_mtch_accnt_no);
          fn_userlog(c_ServiceName," c_prd_typ :%c:",c_prd_typ);
          fn_userlog(c_ServiceName," c_ctgry_indstk :%c:",c_ctgry_indstk);
          fn_userlog(c_ServiceName," c_undrlyng :%s:",c_undrlyng);
          fn_userlog(c_ServiceName," c_xchng_cd :%s:",c_xchng_cd);
          fn_userlog(c_ServiceName," c_expry_dt :%s:",c_expry_dt);
          fn_userlog(c_ServiceName," c_opt_typ :%c:",c_opt_typ);
          fn_userlog(c_ServiceName," l_strike_prc :%ld:",l_strike_prc);
          fn_userlog(c_ServiceName," c_exrc_typ :%c:",c_exrc_typ);
          fn_userlog(c_ServiceName," c_cntrct_tag :%c:",c_cntrct_tag);
          fn_userlog(c_ServiceName," l_opnpstn_qty :%ld:",l_opnpstn_qty);
          fn_userlog(c_ServiceName," c_opnpstn_flw :%c:",c_opnpstn_flw);
          fn_userlog(c_ServiceName," l_cvr_qty :%ld:",l_cvr_qty);
          fn_userlog(c_ServiceName," l_lst_trdd_prc :%ld:",l_lst_trdd_prc);
          fn_userlog(c_ServiceName," l_ibuy_qty :%ld:",l_ibuy_qty);
          fn_userlog(c_ServiceName," l_isell_qty :%ld:",l_isell_qty);
          fn_userlog(c_ServiceName," l_lot_size :%ld:",l_lot_size);
          fn_userlog(c_ServiceName," li_stp_lss_tgr_prc :%ld:",li_stp_lss_tgr_prc);
          fn_userlog(c_ServiceName," l_lmt_rt :%ld:",l_lmt_rt);
          fn_userlog(c_ServiceName," c_cvr_ordr_flw :%c:",c_cvr_ordr_flw);
          fn_userlog(c_ServiceName," d_mrkt_wd_pstn :%lf:",d_mrkt_wd_pstn);
          fn_userlog(c_ServiceName," d_mtm_opn_val :%lf:",d_mtm_opn_val);
          fn_userlog(c_ServiceName," d_price :%lf:",d_price);
	  fn_userlog(c_ServiceName," d_t2t_prc :%lf:",d_t2t_prc); /*** Ver 4.0 ***/
          fn_userlog(c_ServiceName," d_utrd_mrgn :%lf:",d_utrd_mrgn);
          fn_userlog(c_ServiceName," d_umin_trd_mrgn :%lf:",d_umin_trd_mrgn);
          fn_userlog(c_ServiceName," d_avilable_amount :%lf:",d_avilable_amount);
          fn_userlog(c_ServiceName," d_unlz_pl :%lf:",d_unlz_pl);
          fn_userlog(c_ServiceName," c_addmrgn_flg :%c:",c_addmrgn_flg);
          fn_userlog(c_ServiceName," c_sqroff_flg :%c:",c_sqroff_flg);
          fn_userlog(c_ServiceName," c_jointsqroff_flg :%c:",c_jointsqroff_flg);
          fn_userlog(c_ServiceName," c_rollover_flag :%c:",c_rollover_flag);
          fn_userlog(c_ServiceName," c_conv_flg :%c:",c_conv_flg);
          fn_userlog(c_ServiceName," c_mtm_flg :%c:",c_mtm_flg);
          fn_userlog(c_ServiceName," c_mod_can_flg :%c:",c_mod_can_flg);
          fn_userlog(c_ServiceName," c_cvr_ordr_stts :%c:",c_cvr_ordr_stts);
          fn_userlog(c_ServiceName," c_spl_flg :%c:",c_spl_flg);
					fn_userlog(c_ServiceName,":c_sqroffmkt_flg:%c:",c_sqroffmkt_flg);     /** Ver 1.4 **/
          fn_userlog(c_ServiceName,":c_indx_indctr:%c:",c_indx_indctr);                     /** Ver 3.5 **/
          fn_userlog(c_ServiceName,":c_dlvry_sttlmnt_typ:%c:",c_dlvry_sttlmnt_typ);         /** Ver 3.5 **/
				}

				if( DEBUG_MSG_LVL_0 )
				{
					fn_userlog(c_ServiceName,"c_undrlyng :%s:,c_expry_dt :%s:,c_cntrct_tag :%c:,i_tag_cnt :%d:",c_undrlyng, c_expry_dt ,c_cntrct_tag ,i_tag_cnt);
				}

        i_returncode = fn_pack_vartofml ( c_ServiceName,
                                            c_err_msg,
                                            &ptr_fml_Obuf,
                                            68, /** Ver 1.2 changed from 39 to 40 **/ /* changed to 52 in ver 1.3 */  /** Ver 1.4 changed from 52 to 53  **/  /** ver 1.5 changed from 53 to 54 **/ /** ver 1.6 changed from 54 to 55 **//* changed to 59 in Ver 1.7 *//* Ver 2.1 changed from 59 to 60 */ /* Changed to 62 in ver 2.2 */ /* Changed to 63 in ver 2.3 */ /* Ver 2.4 chnged frm 63 to 65 **/ /*** 67 to 68 in Ver 4.0 ***/
                                  					/** Ver 3.5  changed from 65 to 67 **/
																						/** FFO_EBA_MTCH_ACT_NO,(char *)&c_mtch_accnt_no, **Commented in Ver 2.0 **/
																						FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no, /** Ver 2.0 **/
                                            FFO_PRDCT_TYP,(char *)&c_prd_typ,
                                            FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,
                                            FFO_UNDRLYNG,(char *)c_undrlyng,
                                            FFO_XCHNG_CD,(char *)c_xchng_cd,
                                            FFO_EXPRY_DT,(char *)c_expry_dt,
                                            FFO_OPT_TYP,(char *)&c_opt_typ,
                                            FFO_STRK_PRC,(char *)&l_strike_prc,
                                            FFO_EXER_TYP,(char *)&c_exrc_typ,
                                            FFO_CNTRCT_TAG,(char *)&c_cntrct_tag,
                                            FFO_C_OPNPSTN_QTY,(char *)&l_opnpstn_qty,
                                            FFO_C_OPNPSTN_FLW,(char *)&c_opnpstn_flw,
                                            FFO_CVR_QTY,(char *)&l_cvr_qty,
                                            FFO_LST_TRD_PRC,(char *)&l_lst_trdd_prc,
                                            FFO_UI_BUY_QTY,(char *)&l_ibuy_qty,
                                            FFO_UI_SELL_QTY,(char *)&l_isell_qty,
                                            FFO_MIN_LOT_QTY,(char *)&l_lot_size,
                                            FFO_STP_LSS_TGR,(char *)&li_stp_lss_tgr_prc,
                                            FFO_LMT_RT,(char *)&l_lmt_rt,
                                            FFO_ORDR_FLW,(char *)&c_cvr_ordr_flw,
                                            FFO_PSTN_AMT_BLKD,(char *)&d_mrkt_wd_pstn,
                                            FFO_C_MTM_OPN_VAL,(char *)&d_mtm_opn_val,
                                            FFO_U_IMTM_SPRD_PL,(char *)&d_price,
					    FFO_EFF_CLS_PRC, (char *)&d_t2t_prc, /*** Ver 4.0 ***/
                                            FFO_AMOUNT,(char *)&d_utrd_mrgn,
                                            FFO_U_ORDR_MRGN,(char *)&d_ordr_mrgn,
                                            FFO_U_MM_TRD_MRGN,(char *)&d_umin_trd_mrgn,
                                            FFO_BAL_AMT,(char *)&d_avilable_amount,
                                            FFO_UNRLZD_PL,(char *)&d_unlz_pl,
                                            FFO_DWL_FLG,(char *)&c_addmrgn_flg,
                                            FFO_SPL_FLG,(char *)&c_sqroff_flg,
                                            FFO_STATUS_FLG,(char *)&c_jointsqroff_flg,
                                            FFO_QT_TRDNG_FLG,(char *)&c_rollover_flag,
																						FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flag,    /***  Ver 2.3 ***/
                                            FFO_FUT_CONV_FLG,(char *)&c_conv_flg,
                                            FFO_MTM_FLG,(char *)&c_mtm_flg,
                                            FFO_MOD_CAN_FLG,(char *)&c_mod_can_flg,
                                            FFO_IS_FLG,(char *)&c_cvr_ordr_stts,
                                            FFO_RQST_TYP,(char *)&c_spl_flg,
                                            FFO_COUNTER,(char *)&i_tag_cnt,
                                            FFO_ORDR_RFRNC,(char *)"",
																						FFO_CURR_RT, (char *)&l_null,                     /*** ver 1.2  ***/
                                            FFO_DAM_TRNSCTN, (char *)&c_null,    /*** Ver 1.3 ***/
                                      			FFO_STLMNT_TYP, (char *)&c_null,      /*** Ver 1.3 ***/
                                      			FFO_DLVRY_ALLWD, (char *)&c_null,  /*** Ver 1.3 ***/
                                      			FFO_ORD_TYP, (char *)&c_null,       /*** Ver 1.3 ***/
                                      			FFO_BOARD_LOT_QTY, (char *)&l_null, /*** Ver 1.3 ***/
                                      			FFO_TMPLT, (char *)&l_null,       /*** Ver 1.3 ***/
                                      			FFO_XCHNG_CAN_QTY, (char *)&l_null, /*** Ver 1.3 ***/
                                      			FFO_EX_ORDR_TYP, (char *)&c_null,       /*** Ver 1.3 ***/
                                      			FFO_ORD_TOT_QTY, (char *)&l_null,       /*** Ver 1.3 ***/
                                      			FFO_FUT_PRC, (char *)&d_null,            /*** Ver 1.3 ***/
                                      			FFO_PLG_ORDR_RFRNC, (char *)"",    /*** Ver 1.3 ***/
                                      			FFO_EXRC_STTS, (char *)&c_null,   /*** Ver 1.3 ***/
                                            FFO_RMS_PRCSD_FLG, (char *)&c_sqroffmkt_flg,      /*** Ver 1.4  ***/
                                            FFO_DR_CR_FLG, (char *)&c_null,                    /*** ver 1.5 ***/
 																						FFO_NKD_BLKD_FLG, (char *)&c_null,       								/*** Ver 1.6 ***/
                                            FFO_UPLD_MTCH_FLG, (char *)&c_null,   /*** Ver 1.7 ***/
                                            FFO_EXRC_QTY, (char *)&l_null,        /*** Ver 1.7 ***/
                                            FFO_ORD_VALID_DT, (char *)c_ord_val_dt,         /*** Ver 1.7 ***/
                                            FFO_EBA_STTS, (char *)&c_null,        /*** Ver 1.7 ***/
																						FFO_BK_UBK_FLG, (char *)&c_setlmnt_flg,	/** Ver 2.1 **/
                                            FFO_ND_STRT_DT, (char *)"", /*** Ver 2.2 ***/
                                            FFO_ND_END_DT, (char *)"", /*** Ver 2.2 ***/
                                            FFO_SO_AMT_BLKD, (char *)&d_null, /* Ver 2.4 */
                                            FFO_OPNPSTN_VAL, (char *)&d_null, /* Ver 2.4 */
                                            FFO_INDX_INDCTR, (char *)&c_indx_indctr,     /*** Ver 3.5 ***/
                                            /**FFO_STLMNT_TYP, (char *)&c_dlvry_sttlmnt_typ       *** Ver 3.5 *** ** Ver 3.8 **/
                                            FFO_BNK_STTS, (char *)&c_dlvry_sttlmnt_typ       /*** Ver 3.8 ***/ 
	                                         );

	      if ( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31450", FMLMSG, c_err_msg  );
          /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

			}
			else if(c_prd_typ == 'P' )
			{
				c_prev_prdct_typ == '\0';
    		i_cnt=0;
    		l_lst_trdd_prc = 0;
    		d_umin_trd_mrgn = 0.0;
    		d_avilable_amount =0.0;
    		d_unlz_pl =0.0;
    		c_addmrgn_flg = '\0';
    		c_sqroff_flg = '\0';
    		c_jointsqroff_flg = '\0';
    		c_rollover_flag = '\0';
				c_sprd_roll_flag = 'N';			/*** Ver 2.3 ***/
    		c_conv_flg  = '\0';
    		c_mtm_flg   = '\0';
    		c_mod_can_flg = '\0';
				d_base_prc		=0.0;
				d_mtm_loss = 0.0;			/***	Ver 1.7	***/

				EXEC SQL
         	SELECT nvl(FTQ_LST_TRD_PRC,0),
								 FTQ_MIN_LOT_QTY,										/*** Added in Ver 1.1 ***/
                 NVL(FTQ_ROLLOVER_FLAG,'Q')						/*** Added in Ver 1.1 ***/
         	INTO :l_lst_trdd_prc,
							 :l_lot_size,													/*** Added in Ver 1.1 ***/
               :c_rollover_flag											/*** Added in Ver 1.1 ***/
         	FROM ftq_fo_trd_qt
         	WHERE ftq_xchng_cd = :c_xchng_cd
     /***	AND  ftq_prdct_typ = 'F'  								/*** Commented in Ver 1.1 ***/           
		/***	AND  ftq_prdct_typ = decode(:c_prd_typ, 'P', 'F', :c_prd_typ)  ** Added in Ver 1.1 ** Commented in Ver 1.8 ***/
          AND  ftq_prdct_typ = :c_fut_prd_typ  /*** Ver 1.8 ***/   
         	/** AND  trim(ftq_undrlyng) = :c_undrlyng ** 3.6 **/
          AND  ftq_undrlyng = :c_undrlyng  /** trim Remove in Ver 3.6 **/
         	AND  ftq_exer_typ = :c_exrc_typ
     /***	AND  ftq_opt_typ =  '*'
         	AND  ftq_strk_prc = 0      *** Commented in Ver 1.8 to remove hard parsing ***/
          AND  ftq_opt_typ = :c_fut_opt_typ   /*** Ver 1.8 binding variable used instead of hard coded value ***/
          AND  ftq_strk_prc = :l_fut_strk_prc /*** Ver 1.8 binding variable used instead of hard coded value ***/ 
         	AND  ftq_expry_dt = :c_expry_dt;

				if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    		{
      		fn_errlog( c_ServiceName, "S31455", SQLMSG, c_err_msg  );
          /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/ 
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

        if(DEBUG_MSG_LVL_3)  /** ver 4.1 debug level changed to 3 **/
        {
         fn_userlog(c_ServiceName,"FTQ Lot Size :%ld:",l_lot_size);
         fn_userlog(c_ServiceName,"FTQ Rollover Flag :%c:",c_rollover_flag);
				 fn_userlog(c_ServiceName,"FTQ Rollover SPREAD Flag :%c:",c_sprd_roll_flag);  /*** Ver 2.3 ***/
        }
      

				EXEC SQL
         	SELECT  fup_prdct_typ,
                 fup_indstk,
                 fup_uopnpstn_flw,
                 abs(fup_uopnpstn_qty),
                 fup_utrd_mrgn + fup_add_mrgn_val,
                 fup_uspread_mrgn,
                 fup_uordr_mrgn,
                 NVL(fup_umin_trd_mrgn,0)
         	INTO    :c_uprdct_typ,
                 :c_uindstk,
   	             :c_uopnpstn_flw,
                 :l_uopnpstn_qty,
   	             :d_utrd_mrgn,
                 :d_sprd_mrgn,
                 :d_ordr_mrgn,
                 :d_umin_trd_mrgn
   	     	FROM   fup_fut_undrlyng_pstn
         	WHERE  fup_clm_mtch_accnt = :c_mtch_accnt_no
         	AND    fup_xchng_cd = :c_xchng_cd
   	     	AND    fup_undrlyng = :c_undrlyng
         	AND    fup_cntrct_tag = :c_cntrct_tag
         	AND    fup_prdct_typ = :c_prd_typ;

				if( SQLCODE != 0 )
    		{
    			fn_errlog( c_ServiceName, "S31460", SQLMSG, c_err_msg  );
          /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

    		if ( d_utrd_mrgn != 0 )
    		{
    			c_addmrgn_flg = 'Y';
			
					if( abs(l_opnpstn_qty) - abs(l_cvr_qty) > 0)
      		{
      			c_conv_flg ='P';
						c_sqroff_flg = 'Y';
      		}
    		}

    		EXEC SQL
      		SELECT decode(:l_opnpstn_qty, 0, 0, round(((:d_mtm_opn_val/:l_opnpstn_qty)/100),2) )
      		INTO :d_base_prc
      		FROM  dual;
			
				if( DEBUG_MSG_LVL_3 )
				{
					fn_userlog(c_ServiceName,"SQLCODE is :%d:", SQLCODE );
  				fn_userlog(c_ServiceName,"base price :%lf",d_base_prc );
				}

				if ( c_opnpstn_flw == BUY )
  			{	 
    			d_curr_cnt_opn_val = ((double)d_base_prc * (double)l_opnpstn_qty * ( 100));
      		l_und_buy_opn_qty  = l_und_buy_opn_qty + l_opnpstn_qty;
    		}
    	/***	else if(c_prev_opnpstn_flw == SELL ) *** Commented in Ver 1.7 as incorrect variable was used ***/
        else if ( c_opnpstn_flw == SELL ) /*** Added in Ver 1.7 ***/
   			{	 
    			d_curr_cnt_opn_val = ((double)d_base_prc * (double)l_opnpstn_qty * (100));
      		l_und_sell_opn_qty = l_und_sell_opn_qty + l_opnpstn_qty;
    		}
    		else
    		{
      		d_curr_cnt_opn_val=0;
    		}

    		d_curr_uopn_val = d_curr_uopn_val + d_curr_cnt_opn_val;

    		l_sprd_qty = 0; 
    
				d_umin_trd_mrgn=fn_cal_min_mrgn(c_ServiceName,c_mtch_accnt_no,c_undrlyng,c_cntrct_tag,c_xchng_cd,c_uprdct_typ,c_ctgry_indstk,c_exrc_typ,l_lst_trdd_prc,d_curr_uopn_val,l_sprd_qty);

    		if(d_umin_trd_mrgn==-1)
    		{
    			fn_errlog( c_ServiceName, "S31465", "",c_err_msg  );
          /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}
		
				i_mtm_loss_stts=fn_cal_mtm_loss(c_ServiceName,c_mtch_accnt_no,c_undrlyng,c_cntrct_tag,c_xchng_cd,c_prd_typ,c_ctgry_indstk,c_exrc_typ,&d_mtm_loss);
   
    		if(i_mtm_loss_stts==-1)
    		{
    			fn_errlog( c_ServiceName, "S31470", "",c_err_msg  );
          /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

				if( DEBUG_MSG_LVL_3 )
				{
          fn_userlog(c_ServiceName,"HTML5 d_mtm_loss :%lf:",d_mtm_loss);
          fn_userlog(c_ServiceName,"HTML5 d_utrd_mrgn :%lf:",d_utrd_mrgn);
          fn_userlog(c_ServiceName,"HTML5 d_avilable_amount :%lf:",d_avilable_amount);
				}

    		d_avilable_amount=d_utrd_mrgn-d_mtm_loss;

			/*** Commented in Ver 1.1 ***

    		EXEC SQL
      		SELECT  FCM_LOT_SZ,
      	  	      NVL(FCM_ROLLOVER_FLAG,'Q')
      		INTO    :l_lot_size,
       	 	        :c_rollover_flag
      		FROM    FCM_FO_CNTRCT_MSTR
      		WHERE   FCM_XCHNG_CD  = :c_xchng_cd
      		AND     FCM_PRDCT_TYP = decode(:c_prd_typ, 'P', 'F', :c_prd_typ)
      		AND     FCM_UNDRLYNG  = :c_undrlyng
      		AND     FCM_EXER_TYP  = :c_exrc_typ
      		AND     FCM_EXPRY_DT  = :c_expry_dt;

				if( SQLCODE != 0)
    		{
      		fn_errlog( c_ServiceName, "S31475", SQLMSG, c_err_msg  );
          EXEC SQL CLOSE sys_cur; 
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

			*** Ver 1.1 Comment Ends ***/

   	 		c_rollover_flag = 'Q';

				if( DEBUG_MSG_LVL_3 )
				{
    			fn_userlog(c_ServiceName," Rollover Flag is :%c:",c_rollover_flag);
					fn_userlog(c_ServiceName,"FTQ Rollover SPREAD Flag :%c:",c_sprd_roll_flag);  /*** Ver 2.3 ***/
				}

    		c_spl_flg = CONTRACT_IP;

				i_tag_cnt++;

				if( DEBUG_MSG_LVL_3)
				{			
    			fn_userlog(c_ServiceName,"Before packing");
    			fn_userlog(c_ServiceName," c_mtch_accnt_no :%s:",c_mtch_accnt_no);
    			fn_userlog(c_ServiceName," c_prd_typ :%c:",c_prd_typ);
    			fn_userlog(c_ServiceName," c_ctgry_indstk :%c:",c_ctgry_indstk);
    			fn_userlog(c_ServiceName," c_undrlyng :%s:",c_undrlyng);
    			fn_userlog(c_ServiceName," c_xchng_cd :%s:",c_xchng_cd);
    			fn_userlog(c_ServiceName," c_expry_dt :%s:",c_expry_dt);
    			fn_userlog(c_ServiceName," c_opt_typ :%c:",c_opt_typ);
    			fn_userlog(c_ServiceName," l_strike_prc :%ld:",l_strike_prc);
    			fn_userlog(c_ServiceName," c_exrc_typ :%c:",c_exrc_typ);
    			fn_userlog(c_ServiceName," c_cntrct_tag :%c:",c_cntrct_tag);
    			fn_userlog(c_ServiceName," l_opnpstn_qty :%ld:",l_opnpstn_qty);
    			fn_userlog(c_ServiceName," c_opnpstn_flw :%c:",c_opnpstn_flw);
    			fn_userlog(c_ServiceName," l_cvr_qty :%ld:",l_cvr_qty);
    			fn_userlog(c_ServiceName," l_lst_trdd_prc :%ld:",l_lst_trdd_prc);
    			fn_userlog(c_ServiceName," l_ibuy_qty :%ld:",l_ibuy_qty);
    			fn_userlog(c_ServiceName," l_isell_qty :%ld:",l_isell_qty);
    			fn_userlog(c_ServiceName," l_lot_size :%ld:",l_lot_size);
    			fn_userlog(c_ServiceName," li_stp_lss_tgr_prc :%ld:",li_stp_lss_tgr_prc);
    			fn_userlog(c_ServiceName," l_lmt_rt :%ld:",l_lmt_rt);
    			fn_userlog(c_ServiceName," c_cvr_ordr_flw :%c:",c_cvr_ordr_flw);
    			fn_userlog(c_ServiceName," d_mrkt_wd_pstn :%lf:",d_mrkt_wd_pstn);
    			fn_userlog(c_ServiceName," d_mtm_opn_val :%lf:",d_mtm_opn_val);
    			fn_userlog(c_ServiceName," d_price :%lf:",d_price);
			fn_userlog(c_ServiceName," d_t2t_prc :%lf:",d_t2t_prc); /*** Ver 4.0 ***/
    			fn_userlog(c_ServiceName," d_utrd_mrgn :%lf:",d_utrd_mrgn);
    			fn_userlog(c_ServiceName," d_ord_mrgn :%lf:",d_ord_mrgn);
    			fn_userlog(c_ServiceName," d_umin_trd_mrgn :%lf:",d_umin_trd_mrgn);
    			fn_userlog(c_ServiceName," d_avilable_amount FP :%lf:",d_avilable_amount);
    			fn_userlog(c_ServiceName," d_unlz_pl :%lf:",d_unlz_pl);
    			fn_userlog(c_ServiceName," c_addmrgn_flg :%c:",c_addmrgn_flg);
    			fn_userlog(c_ServiceName," c_sqroff_flg :%c:",c_sqroff_flg);
    			fn_userlog(c_ServiceName," c_jointsqroff_flg :%c:",c_jointsqroff_flg);
    			fn_userlog(c_ServiceName," c_rollover_flag :%c:",c_rollover_flag);
					fn_userlog(c_ServiceName,"FTQ Rollover SPREAD Flag :%c:",c_sprd_roll_flag);  /*** Ver 2.3 ***/
    			fn_userlog(c_ServiceName," c_conv_flg :%c:",c_conv_flg);
    			fn_userlog(c_ServiceName," c_mtm_flg :%c:",c_mtm_flg);
    			fn_userlog(c_ServiceName," c_mod_can_flg :%c:",c_mod_can_flg);
    			fn_userlog(c_ServiceName," c_cvr_ordr_stts :%c:",c_cvr_ordr_stts);
    			fn_userlog(c_ServiceName," c_spl_flg :%c:",c_spl_flg);
					fn_userlog(c_ServiceName,":c_sqroffmkt_flg:%c:",c_sqroffmkt_flg);     /** Ver 1.4 **/
				}

				if( DEBUG_MSG_LVL_0 )
				{
					fn_userlog(c_ServiceName,"c_undrlyng :%s:,c_expry_dt :%s:,c_cntrct_tag :%c:,i_tag_cnt :%d:",c_undrlyng, c_expry_dt ,c_cntrct_tag ,i_tag_cnt);
				}

   			i_returncode = fn_pack_vartofml ( c_ServiceName,
                                      c_err_msg,
                                      &ptr_fml_Obuf,
                                      68,		/** Ver 1.2 changed from 39 to 40 **/ /* changed to 52 in ver 1.3 */  /** Ver 1.4
changed from 52 to 53  **/  /** ver 1.5 changed from 53 to 54 **/ /** ver 1.6 changed from 54 to 55 **//* changed to 59 in Ver 1.7 */ /* Ver 2.1 changed from 59 to 60 */ /* changed to 62 in ver 2.2 */ /* Changed to 63 in Ver 2.3 */ /* Ver 2.4 chnged frm 63 to 65 */ /*** 67 to 68 in Ver 4.0 ***/
                                 			/** Ver 3.5  changed from 65 to 67 ***/
																			/** FFO_EBA_MTCH_ACT_NO,(char *)&c_mtch_accnt_no, ** Commented in Ver 2.0 **/
																			FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no,  /** Ver 2.0 **/
                                      FFO_PRDCT_TYP,(char *)&c_prd_typ,
                                      FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,
                                      FFO_UNDRLYNG,(char *)c_undrlyng,
                                      FFO_XCHNG_CD,(char *)c_xchng_cd,
                                      FFO_EXPRY_DT,(char *)c_expry_dt,
                                      FFO_OPT_TYP,(char *)&c_opt_typ,
                                      FFO_STRK_PRC,(char *)&l_strike_prc,
                                      FFO_EXER_TYP,(char *)&c_exrc_typ,
                                      FFO_CNTRCT_TAG,(char *)&c_cntrct_tag,
                                      FFO_C_OPNPSTN_QTY,(char *)&l_opnpstn_qty,
                                      FFO_C_OPNPSTN_FLW,(char *)&c_opnpstn_flw,
                                      FFO_CVR_QTY,(char *)&l_cvr_qty,
                                      FFO_LST_TRD_PRC,(char *)&l_lst_trdd_prc,
                                      FFO_UI_BUY_QTY,(char *)&l_ibuy_qty,
                                      FFO_UI_SELL_QTY,(char *)&l_isell_qty,
                                      FFO_MIN_LOT_QTY,(char *)&l_lot_size,
                                      FFO_STP_LSS_TGR,(char *)&li_stp_lss_tgr_prc,
                                      FFO_LMT_RT,(char *)&l_lmt_rt,
                                      FFO_ORDR_FLW,(char *)&c_cvr_ordr_flw,
                                      FFO_PSTN_AMT_BLKD,(char *)&d_mrkt_wd_pstn,
                                      FFO_C_MTM_OPN_VAL,(char *)&d_mtm_opn_val,
                                      FFO_U_IMTM_SPRD_PL,(char *)&d_price,
				      FFO_EFF_CLS_PRC, (char *)&d_t2t_prc, /*** Ver 4.0 ***/
                                      FFO_AMOUNT,(char *)&d_utrd_mrgn,
                                      FFO_U_ORDR_MRGN,(char *)&d_ordr_mrgn,
                                      FFO_U_MM_TRD_MRGN,(char *)&d_umin_trd_mrgn,
                                      FFO_BAL_AMT,(char *)&d_avilable_amount,
                                      FFO_UNRLZD_PL,(char *)&d_unlz_pl,
                                      FFO_DWL_FLG,(char *)&c_addmrgn_flg,
                                      FFO_SPL_FLG,(char *)&c_sqroff_flg,
                                      FFO_STATUS_FLG,(char *)&c_jointsqroff_flg,
                                      FFO_QT_TRDNG_FLG,(char *)&c_rollover_flag,
																			FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flag,     /***  Ver 2.3 ***/
                                      FFO_FUT_CONV_FLG,(char *)&c_conv_flg,
                                      FFO_MTM_FLG,(char *)&c_mtm_flg,
                                      FFO_MOD_CAN_FLG,(char *)&c_mod_can_flg,
                                      FFO_IS_FLG,(char *)&c_cvr_ordr_stts,
                                      FFO_RQST_TYP,(char *)&c_spl_flg,
																			FFO_COUNTER,(char *)&i_tag_cnt,
																			FFO_ORDR_RFRNC,(char *)"",
																		  FFO_CURR_RT, (char *)&l_null,                           /*** ver 1.2  ***/
                                      FFO_DAM_TRNSCTN, (char *)&c_null,    /*** Ver 1.3 ***/
                                      FFO_STLMNT_TYP, (char *)&c_null,      /*** Ver 1.3 ***/
                                      FFO_DLVRY_ALLWD, (char *)&c_null,  /*** Ver 1.3 ***/
                                      FFO_ORD_TYP, (char *)&c_null,       /*** Ver 1.3 ***/
                                      FFO_BOARD_LOT_QTY, (char *)&l_null, /*** Ver 1.3 ***/
                                      FFO_TMPLT, (char *)&l_null,       /*** Ver 1.3 ***/
                                      FFO_XCHNG_CAN_QTY, (char *)&l_null, /*** Ver 1.3 ***/
                                      FFO_EX_ORDR_TYP, (char *)&c_null,       /*** Ver 1.3 ***/
                                      FFO_ORD_TOT_QTY, (char *)&l_null,       /*** Ver 1.3 ***/
                                      FFO_FUT_PRC, (char *)&d_null,            /*** Ver 1.3 ***/
                                      FFO_PLG_ORDR_RFRNC, (char *)"",    /*** Ver 1.3 ***/
                                      FFO_EXRC_STTS, (char *)&c_null,   /*** Ver 1.3 ***/
                                      FFO_RMS_PRCSD_FLG, (char *)&c_sqroffmkt_flg,            /*** Ver 1.4 ***/
                                      FFO_DR_CR_FLG, (char *)&c_null,                          /*** ver 1.5 ***/
																			FFO_NKD_BLKD_FLG, (char *)&c_null,       /*** Ver 1.6 ***/
                                      FFO_UPLD_MTCH_FLG, (char *)&c_null,   /*** Ver 1.7 ***/
                                      FFO_EXRC_QTY, (char *)&l_null,        /*** Ver 1.7 ***/
                                      FFO_ORD_VALID_DT, (char *)c_ord_val_dt,         /*** Ver 1.7 ***/
                                      FFO_EBA_STTS, (char *)&c_null,         /*** Ver 1.7 ***/
                                      FFO_BK_UBK_FLG,(char *)&c_null,  /*** Ver 2.1 ***/
                                      FFO_ND_STRT_DT, (char *)"", /*** Ver 2.2 ***/
                                      FFO_ND_END_DT, (char *)"",  /*** Ver 2.2 ***/
                                      FFO_SO_AMT_BLKD, (char *)&d_null, /** Ver 2.4 **/
                                      FFO_OPNPSTN_VAL, (char *)&d_null, /** Ver 2.4 **/
                                      FFO_INDX_INDCTR, (char *)&c_null,     /*** Ver 3.5 ***/
                                      /**FFO_STLMNT_TYP, (char *)&c_null       *** Ver 3.5 *** ** Ver 3.8 **/
                                      FFO_BNK_STTS, (char *)&c_null       /*** Ver 3.8 ***/ 
                                    );
	
        if ( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31480", FMLMSG, c_err_msg  );
          /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
			}
			else if(c_prd_typ == 'O')
			{
				c_prev_prdct_typ == '\0';
				i_cnt=0;
				l_lst_trdd_prc = 0;
				d_umin_trd_mrgn = 0.0;
				d_avilable_amount =0.0;
				d_unlz_pl	=0.0;
				c_addmrgn_flg = '\0'; 
				c_sqroff_flg = '\0'; 
				c_jointsqroff_flg = '\0';
				c_rollover_flag = '\0'; 
				c_sprd_roll_flag = 'N';			/*** Ver 2.3 ***/
				c_conv_flg	= '\0'; 
				c_mtm_flg   = '\0';
				c_mod_can_flg	= '\0';
				l_spot_prc = 0;
				c_trg_prc_stts = '\0';
				c_setlmnt_flg = '\0';    /** Ver 2.1 **/
        d_var_mrgn = 0.0;                       /** Ver 2.4 **/
        d_elm_mrgn = 0.0;                       /** Ver 2.4 **/
        d_dlvry_min_mrgn_prcnt = 0.0;           /** Ver 2.4 **/
        d_ISec_buff_mrgn_prcnt = 0.0;           /** Ver 2.4 **/
        d_current_dlvry_mrgn_prcnt = 0.0;       /** Ver 2.4 **/
        d_cntrct_val = 0.0;                     /** Ver 2.4 **/
        d_new_dlvry_mrgn = 0.0;                 /** Ver 2.4 **/
        d_dlvry_mrgn_req =0.0;                  /** Ver 2.4 **/
        d_mrggn_value = 0.0;                    /** Ver 2.4 **/ 
        i_crnt_mnth_flg = 0;                    /** Ver 2.4 **/
        MEMSET(c_ltq_dt);                       /** Ver 2.4 **/
        l_spot_prc_tmp = 0;                     /** Ver 2.4 **/
        l_cls_prc=0;                            /** Ver 2.4 **/
	
				if( DEBUG_MSG_LVL_3)
				{	
					fn_userlog(c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd);
					fn_userlog(c_ServiceName,"c_prd_typ :%c:",c_prd_typ);
					fn_userlog(c_ServiceName,"c_ctgry_indstk :%c:",c_ctgry_indstk);
					fn_userlog(c_ServiceName," c_undrlyng :%s:",c_undrlyng);
					fn_userlog(c_ServiceName," c_exrc_typ :%c:",c_exrc_typ);
					fn_userlog(c_ServiceName," c_opt_typ :%c:",c_opt_typ);
					fn_userlog(c_ServiceName,"l_strike_prc :%ld:",l_strike_prc);
					fn_userlog(c_ServiceName,"c_expry_dt :%s:",c_expry_dt);
				}
	
				EXEC SQL
         	SELECT nvl(FTQ_LST_TRD_PRC,0),
								 FTQ_MIN_LOT_QTY,											/*** Added in Ver 1.1 ***/
								 NVL(FTQ_SETLMNT_FLG ,'C')						/*** Added in Ver 2.1 ***/
         	INTO :l_lst_trdd_prc,								
							 :l_lot_size,														/*** Added in Ver 1.1 ***/
							 :c_setlmnt_flg													/*** Added in Ver 2.1 ***/
         	FROM ftq_fo_trd_qt
         	WHERE ftq_xchng_cd = :c_xchng_cd
   /***  	AND  ftq_prdct_typ = 'O' 										/*** Commented in Ver 1.1 ***/
					AND  ftq_prdct_typ = :c_prd_typ							/*** Added in Ver 1.1 ***/
         	/** AND  trim(ftq_undrlyng) = :c_undrlyng ** 3.6 **/
          AND  ftq_undrlyng = :c_undrlyng  /** trim Remove in Ver 3.6 **/
         	AND  ftq_exer_typ = :c_exrc_typ
         	AND  ftq_opt_typ = :c_opt_typ
         	AND  ftq_strk_prc = :l_strike_prc
         	AND  ftq_expry_dt = :c_expry_dt;

    		if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ))
    		{
      		fn_errlog( c_ServiceName, "S31485", SQLMSG, c_err_msg  );
          /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}
    		else if ( SQLCODE == NO_DATA_FOUND )
    		{
     			l_lst_trdd_prc = 0;
    		}
	
       if(DEBUG_MSG_LVL_3) /** ver 4.1 debug level changed to 3 **/
       {
        fn_userlog(c_ServiceName,"FTQ Lot Size :%ld:",l_lot_size);
				fn_userlog(c_ServiceName,"Physical Settlment Flag :%c:",c_setlmnt_flg);  /** Ver 2.1 **/
       }
	
				EXEC SQL
      		SELECT 	LTQ_RT * 100,
                  NVL(LTQ_CLS_PRC,0) * 100,                 /** Ver 2.4 **/
                  NVL(to_char(LTQ_DT,'DD-Mon-YYYY'),'NA')      /** Ver 2.4 **/            
      		into 		:l_spot_prc,
                  :l_cls_prc,
                  :c_ltq_dt  
      		FROM 		LTQ_TRD_QT
      		WHERE		LTQ_STCK_CD = :c_undrlyng
      		AND 		LTQ_XCHNG_CD = DECODE(:c_xchng_cd,'NFO','NSE','BFO','BSE');

    		if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ))
    		{
      		fn_errlog( c_ServiceName, "S31490", SQLMSG, c_err_msg  );
          /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}
    		else if ( SQLCODE == NO_DATA_FOUND )
    		{
     			l_spot_prc = 0;
          l_cls_prc  = 0; /** Ver 2.4 **/
    		}
			
       if( DEBUG_MSG_LVL_3 )
       {	
        fn_userlog(c_ServiceName, "NonSpan Opn....Underlying:%s		Spot Price:%ld", c_undrlyng,	l_spot_prc);
       }     

      /** Ver 2.4 Started **/
     if((c_setlmnt_flg == 'P') && (c_opnpstn_flw == BUY))
     {
       if( DEBUG_MSG_LVL_3 )
       {
        fn_userlog(c_ServiceName, "DELIVERY MARGIN COMPUTAION STARTS FOR NON SPAN");
       }
       
       c_tmp_prdct_typ = 'F';
       MEMSET(c_tmp_undlyn);
       strcpy(c_tmp_undlyn ,"NIFTY");
       
       EXEC SQL
       SELECT 1
       INTO :i_crnt_mnth_flg
       FROM DUAL
       WHERE to_date(:c_expry_dt,'DD-Mon-YYYY') =(
       SELECT MIN(FTQ_EXPRY_DT)
       FROM  FTQ_FO_TRD_QT where FTQ_XCHNG_CD=:c_xchng_cd
       and FTQ_PRDCT_TYP=:c_tmp_prdct_typ
       /***  and FTQ_UNDRLYNG=:c_tmp_undlyn and FTQ_EXPRY_DT >=trunc(sysdate));  **** commented in ver 2.5 ***/
       and FTQ_UNDRLYNG=:c_tmp_undlyn ); /*** Ver 2.5 ***/

       if( SQLCODE != 0 && (SQLCODE != NO_DATA_FOUND))
        {
         fn_errlog( c_ServiceName, "S31495", SQLMSG, c_err_msg  );
         /*** EXEC SQL CLOSE sys_spn_cur; *** Ver 2.0 *** Commented in Ver 3.4 ***/
         EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
         EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
         EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
         tpfree ( ( char * ) ptr_fml_Obuf );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }

       if( SQLCODE == NO_DATA_FOUND )
       {
         i_crnt_mnth_flg=0;
       }
          
       /* if( c_opnpstn_flw == BUY && ( c_opt_typ=='C' || c_opt_typ=='P' ) && i_crnt_mnth_flg == 1 ) * Ver 3.0 */
       if( c_opnpstn_flw == BUY && ( c_opt_typ=='C' || c_opt_typ=='P' ) )
       {
        /** Block Added for selecting spot price STARTS **/
          EXEC SQL
          SELECT NVL(VEM_VAR_MARGIN/100,0),
                  NVL(VEM_EXTRM_LOSS_RT/100,0)
                  /* NVL(FSP_DLVRY_MRGPRCNT/100,0),
                  NVL(to_char(FSP_DLVRY_MRGPRCNT_UPDDT,'DD-Mon-YYYY'),'NA') * Ver 3.0 */
          into    :d_var_mrgn,
                  :d_elm_mrgn
                  /* :d_current_dlvry_mrgn_prcnt,
                  :c_update_dt
          FROM VEM_VAR_ELM_MSTR,FSP_FO_SYSTM_PRMTR * Ver 3.0 */
          FROM VEM_VAR_ELM_MSTR                         /*** Ver 3.0 ***/
          WHERE VEM_STCK_CD = ( SELECT SEM_MAP_VL
                               FROM SEM_STCK_MAP
                               WHERE sem_stck_cd = :c_undrlyng
                               AND SEM_ENTTY = 3);

         if( SQLCODE != 0 && (SQLCODE != NO_DATA_FOUND))
         {
          fn_errlog( c_ServiceName, "S31500", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur; *** Ver 2.0 *** Commented in Ver 3.4 ***/
          EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }    
      
         /*** Ver 3.0 Starts ***/
         EXEC SQL
          SELECT  LODM_PRC,
                  MRGPRCNT_UPDDT
            INTO  :d_current_dlvry_mrgn_prcnt,
                  :c_update_dt
            FROM  (SELECT NVL(FLM_TODAYS_LODM_PERCNT/100,0.0) LODM_PRC,
                          NVL(to_char(FLM_DLVRY_MRGPRCNT_UPDDT,'DD-Mon-YYYY'),'NA') MRGPRCNT_UPDDT
                  FROM  FLM_FO_LODM_MSTR
                  WHERE FLM_UNDRLYNG = :c_undrlyng
                  AND FLM_PRDCT_TYP = :c_prd_typ
                  AND FLM_EOS_DT >= TRUNC(SYSDATE)
                  AND NVL(FLM_TODAYS_LODM_PERCNT,0.0) != 0);
         if( SQLCODE != 0 && (SQLCODE != NO_DATA_FOUND))
         {
          fn_errlog( c_ServiceName, "S31505", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur; Commented in Ver 3.4 ***/ 
          EXEC SQL FREE :cur_spn_pstn;
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }
         else if ((SQLCODE == NO_DATA_FOUND || d_current_dlvry_mrgn_prcnt == 0) && (i_crnt_mnth_flg == 1))
         {
          EXEC SQL
           SELECT NVL(FLM_TODAYS_LODM_PERCNT/100,0.0) LODM_PRC,
                  NVL(to_char(FLM_DLVRY_MRGPRCNT_UPDDT,'DD-Mon-YYYY'),'NA') MRGPRCNT_UPDDT
            INTO  :d_current_dlvry_mrgn_prcnt,
                  :c_update_dt
            FROM  FLM_FO_LODM_MSTR
            WHERE FLM_UNDRLYNG = 'ALL'
            AND   FLM_PRDCT_TYP = :c_prd_typ
						AND   NVL(FLM_TODAYS_LODM_PERCNT/100,0.0) != 0
            AND   FLM_EXP_DT = :c_expry_dt;
          if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
          {
            fn_errlog( c_ServiceName, "S31510", SQLMSG, c_err_msg  );
            /*** EXEC SQL CLOSE sys_spn_cur; Commented in Ver 3.4 ***/
            EXEC SQL FREE :cur_spn_pstn;
            EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
            tpfree ( ( char * ) ptr_fml_Obuf );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
         }
         /*** Ver 3.0 Ends ***/
         if( strcmp(c_update_dt, c_ltq_dt) == 0 )
         {
          l_spot_prc_tmp = l_cls_prc;  
          if( DEBUG_MSG_LVL_3 )
           {
            fn_userlog(c_ServiceName,"Considering Closing Price for ITM check :%ld:",l_spot_prc_tmp);
           }
         }
         else
         {
          l_spot_prc_tmp = l_spot_prc;
          if( DEBUG_MSG_LVL_3 )
           {
            fn_userlog(c_ServiceName,"Considering Spot Price for ITM check :%ld:",l_spot_prc_tmp);
           }
         }	
   
        /** Block Added for selecting spot price ENDS **/ 
 
        if(( c_opt_typ=='C' && l_spot_prc_tmp >= l_strike_prc ) || ( c_opt_typ=='P' && l_spot_prc_tmp <= l_strike_prc))
         {

          EXEC SQL
          SELECT NVL( FMM_ISEC_DLVRY_MRGN_BFFR_PRCNT/100, 0.0 ),
          NVL( FMM_DLVRY_MIN_MRGN_PRCNT/100 , 0.0 )
          INTO :d_ISec_buff_mrgn_prcnt,
               :d_dlvry_min_mrgn_prcnt /*** Minimum margin percentage ***/
          FROM FMM_FO_MRGN_MSTR
          WHERE  FMM_PRDCT_TYP= :c_prd_typ
          AND    FMM_UNDRLYNG = :c_undrlyng
          AND    FMM_XCHNG_CD = :c_xchng_cd
          AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
                                 FROM    FCB_FO_CLN_BSKT_ALLTD
                                 WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                                       FROM   CLM_CLNT_MSTR
                                                       WHERE CLM_MTCH_ACCNT =:c_mtch_accnt_no));

         if( SQLCODE != 0 && (SQLCODE != NO_DATA_FOUND))
         {
          fn_errlog( c_ServiceName, "S31515", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur; Commented in Ver 3.4 ***/
          EXEC SQL FREE :cur_spn_pstn;
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }

          d_cntrct_val = ((double)l_strike_prc * (double)l_opnpstn_qty);
          d_mrggn_value =  fn_maxd((d_var_mrgn + d_elm_mrgn + d_ISec_buff_mrgn_prcnt ),d_dlvry_min_mrgn_prcnt);
          d_new_dlvry_mrgn = d_cntrct_val * d_mrggn_value * d_current_dlvry_mrgn_prcnt;
           
         EXEC SQL
         SELECT ROUND(:d_new_dlvry_mrgn,2)
         INTO :d_new_dlvry_mrgn
         FROM DUAL;

         if( SQLCODE != 0 && (SQLCODE != NO_DATA_FOUND))
         {
          fn_errlog( c_ServiceName, "S31520", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur; Commented in Ver 3.4 ***/ 
          EXEC SQL FREE :cur_spn_pstn;
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }
         
          d_dlvry_mrgn_req = d_dlvry_mrgn_blk - d_new_dlvry_mrgn;
          if(d_dlvry_mrgn_req <0)
           {
            d_dlvry_mrgn_req = (-1) * d_dlvry_mrgn_req;
           }
           else
           {
            d_dlvry_mrgn_req =0.0;
           }
         }
       }
      }
   /** Ver 2.4 Ends  **/

    		if( c_opnpstn_flw == 'S'  )
    		{
					if( DEBUG_MSG_LVL_3 )
					{
      			fn_userlog(c_ServiceName,"c_undrlyng:%s:",c_undrlyng);
      			fn_userlog(c_ServiceName,"c_opt_typ:%c:",c_opt_typ);
      			fn_userlog(c_ServiceName,"l_spot_prc:%ld:",l_spot_prc);
					}

      		if( ( c_opt_typ == 'C' && ( l_spot_prc > li_stp_lss_tgr_prc) ) ||
          		( c_opt_typ == 'P' && ( l_spot_prc < li_stp_lss_tgr_prc) )
        		)
      		{
       	 		c_trg_prc_stts='R';
      		}
      		else
      		{
        		c_trg_prc_stts='N';
      		}
    		}

			/*** Commented in Ver 1.1 ***

				EXEC SQL
      		SELECT  FCM_LOT_SZ
      		INTO    :l_lot_size
      		FROM    FCM_FO_CNTRCT_MSTR
      		WHERE   FCM_XCHNG_CD  = :c_xchng_cd
      		AND     FCM_PRDCT_TYP = :c_prd_typ
      		AND     FCM_UNDRLYNG  = :c_undrlyng
      		AND     FCM_EXER_TYP  = :c_exrc_typ
      		AND     FCM_OPT_TYP   = :c_opt_typ
      		AND     FCM_STRK_PRC = :l_strike_prc
      		AND     FCM_EXPRY_DT  = :c_expry_dt;

    		if( SQLCODE != 0)
    		{
      		tpcommit(0);
      		fn_errlog( c_ServiceName, "S31525", SQLMSG, c_err_msg  );
          EXEC SQL CLOSE sys_cur;  
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

			*** Ver 1.1 Comment Ends ***/

				if( d_utrd_mrgn != 0 && c_opnpstn_flw != 'B' )
    		{
      		c_addmrgn_flg = 'Y';
    		}
    		else
    		{
      		c_addmrgn_flg = 'N';
    		}

				if( DEBUG_MSG_LVL_3 )
				{
					fn_userlog(c_ServiceName," l_opnpstn_qty :%ld:",l_opnpstn_qty);
					fn_userlog(c_ServiceName," l_cvr_qty :%ld:",l_cvr_qty);
				}
					
			/*** Ver 3.5 Starts ***/
			c_all_flg           = 'N';
   		c_indx_indctr       = 'N';
   		c_dlvry_sttlmnt_typ = '\0';
      c_dlvry_enbl_flg    = '\0';
   		if ( c_setlmnt_flg == 'P' ) /*** Physical Settled contract only ***/
   		{

      if ( c_prd_typ == 'F' || c_prd_typ == 'O' )
      {
      if( l_opnpstn_qty == 0 )
      {
        c_indx_indctr = 'N';  /** Show No Link **/
      }
      else
      {
        EXEC SQL
        SELECT   NVL(FLM_DLVRYENBL_FLG,'N')
        INTO     :c_dlvry_enbl_flg
        FROM     FLM_FO_LODM_MSTR
        WHERE    FLM_UNDRLYNG = :c_undrlyng
        AND      FLM_EOS_DT >= (
        SELECT   EXG_NXT_TRD_DT
        FROM     EXG_XCHNG_MSTR
        WHERE    EXG_XCHNG_CD = 'NFO');
        /*** AND      FLM_EOS_DT >= trunc(SYSDATE); ***/

      if( (SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog( c_ServiceName, "S31530", SQLMSG, c_errmsg );
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
      }

			else if ( SQLCODE == NO_DATA_FOUND )
      {
				c_all_flg = 'Y';
        EXEC SQL
          SELECT    NVL(FLM_DLVRYENBL_FLG,'N'),FLM_EXP_DT
          INTO      :c_dlvry_enbl_flg,
                    :c_flm_expr_dt
          FROM      FLM_FO_LODM_MSTR
          WHERE     FLM_UNDRLYNG = 'ALL'
          AND       FLM_EOS_DT >= (
          SELECT    EXG_NXT_TRD_DT
          FROM      EXG_XCHNG_MSTR
          WHERE     EXG_XCHNG_CD = 'NFO');
          /*** AND      FLM_EOS_DT >= trunc(SYSDATE); ***/

        if((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
        {
          fn_errlog( c_ServiceName, "S31535", SQLMSG, c_errmsg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Inside Underlying ALL CASE c_all_flg :%c:",c_all_flg);
        }
				
      }

			if ( ( c_dlvry_enbl_flg == 'Y' && ( strcmp(c_flm_expr_dt,c_expry_dt) == 0 ) && c_all_flg == 'Y' ) || ( c_dlvry_enbl_flg == 'Y' && c_all_flg == 'N' ) )
      {
      EXEC SQL
        SELECT      NVL(FOP_DLVRY_MODE_FLAG,'N'),
                    NVL(FOP_DLVRY_OBLGAMT_BLCKD,0),
                    NVL(FOP_DLVRY_QTY_BLCKD,0)
        INTO        :c_dlvry_mode_flg,
                    :l_dlvry_oblgamt_blckd,
                    :l_dlvry_qty_blckd
        FROM        FOP_FO_OPTIONS_PSTN
        WHERE       FOP_XCHNG_CD  = :c_xchng_cd
        AND         FOP_PRDCT_TYP = :c_prd_typ
        AND         FOP_INDSTK    = :c_ctgry_indstk
        AND         FOP_UNDRLYNG  = :c_undrlyng
        AND         FOP_EXPRY_DT  = :c_expry_dt
        AND         FOP_EXER_TYP  = :c_exrc_typ
        AND         FOP_STRK_PRC  = :l_strike_prc
        AND         FOP_OPT_TYP   = :c_opt_typ
        AND         FOP_CLM_MTCH_ACCNT = :c_mtch_accnt_no;

      if((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
      {
        fn_errlog( c_ServiceName, "S31540", SQLMSG, c_errmsg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
			
        /*** Background color display ***/
        if( l_dlvry_oblgamt_blckd == 0 && l_dlvry_qty_blckd == 0 )
        {
          c_dlvry_sttlmnt_typ = 'P';  /** Show Delivery in 'Pink' **/
        }
        else
        {
          c_dlvry_sttlmnt_typ = 'G';  /** Show Delivery in  'Green' **/
        }
         if ( c_dlvry_mode_flg == 'N' )
         {
           c_indx_indctr = 'D';  /** Show Choose Delivery **/
         }
         if ( c_dlvry_mode_flg == 'Y' )
         {
           c_indx_indctr = 'C';  /** Show Choose Non Delivery **/
         }
        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Settlement Flag :%c:",c_dlvry_sttlmnt_typ);
          fn_userlog(c_ServiceName,"Index Indicator Choose Delivery/Non-Delivery :%c:",c_indx_indctr);
        }
      }
      else
      {
        c_indx_indctr = 'N';  /** Dont show any link(Choose delivery or non delivery) **/
      }
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Index Indicator Choose Delivery/Non-Delivery :%c:",c_indx_indctr);
      }
     }
    }
    }	
				/*** Ver 3.5 Ends ***/

				if( abs(l_opnpstn_qty) - abs(l_cvr_qty) > 0)
    		{
      		c_sqroff_flg ='Y';
    		}

				c_spl_flg = CONTRACT_IP;

				i_tag_cnt++;

				if( DEBUG_MSG_LVL_3)
				{
    			fn_userlog(c_ServiceName,"Before packing");
    			fn_userlog(c_ServiceName," c_mtch_accnt_no :%s:",c_mtch_accnt_no);
    			fn_userlog(c_ServiceName," c_prd_typ :%c:",c_prd_typ);
    			fn_userlog(c_ServiceName," c_ctgry_indstk :%c:",c_ctgry_indstk);
    			fn_userlog(c_ServiceName," c_undrlyng :%s:",c_undrlyng);
    			fn_userlog(c_ServiceName," c_xchng_cd :%s:",c_xchng_cd);
    			fn_userlog(c_ServiceName," c_expry_dt :%s:",c_expry_dt);
    			fn_userlog(c_ServiceName," c_opt_typ :%c:",c_opt_typ);
    			fn_userlog(c_ServiceName," l_strike_prc :%ld:",l_strike_prc);
    			fn_userlog(c_ServiceName," c_exrc_typ :%c:",c_exrc_typ);
    			fn_userlog(c_ServiceName," c_cntrct_tag :%c:",c_cntrct_tag);
    			fn_userlog(c_ServiceName," l_opnpstn_qty :%ld:",l_opnpstn_qty);
    			fn_userlog(c_ServiceName," c_opnpstn_flw :%c:",c_opnpstn_flw);
    			fn_userlog(c_ServiceName," l_cvr_qty :%ld:",l_cvr_qty);
    			fn_userlog(c_ServiceName," l_lst_trdd_prc :%ld:",l_lst_trdd_prc);
    			fn_userlog(c_ServiceName," l_ibuy_qty :%ld:",l_ibuy_qty);
    			fn_userlog(c_ServiceName," l_isell_qty :%ld:",l_isell_qty);
    			fn_userlog(c_ServiceName," l_lot_size :%ld:",l_lot_size);
    			fn_userlog(c_ServiceName," li_stp_lss_tgr_prc :%ld:",li_stp_lss_tgr_prc);
    			fn_userlog(c_ServiceName," l_lmt_rt :%ld:",l_lmt_rt);
    			fn_userlog(c_ServiceName," c_cvr_ordr_flw :%c:",c_cvr_ordr_flw);
    			fn_userlog(c_ServiceName," d_mrkt_wd_pstn :%lf:",d_mrkt_wd_pstn);
    			fn_userlog(c_ServiceName," d_mtm_opn_val :%lf:",d_mtm_opn_val);
    			fn_userlog(c_ServiceName," d_price :%lf:",d_price);
			fn_userlog(c_ServiceName," d_t2t_prc :%lf:",d_t2t_prc); /*** Ver 4.0 ***/
    			fn_userlog(c_ServiceName," d_utrd_mrgn :%lf:",d_utrd_mrgn);
    			fn_userlog(c_ServiceName," d_ord_mrgn :%lf:",d_ord_mrgn);
    			fn_userlog(c_ServiceName," d_umin_trd_mrgn :%lf:",d_umin_trd_mrgn);
    			fn_userlog(c_ServiceName," d_avilable_amount Options :%lf:",d_avilable_amount);
    			fn_userlog(c_ServiceName," d_unlz_pl :%lf:",d_unlz_pl);
    			fn_userlog(c_ServiceName," c_addmrgn_flg :%c:",c_addmrgn_flg);
    			fn_userlog(c_ServiceName," c_sqroff_flg :%c:",c_sqroff_flg);
    			fn_userlog(c_ServiceName," c_jointsqroff_flg :%c:",c_jointsqroff_flg);
    			fn_userlog(c_ServiceName," c_rollover_flag :%c:",c_rollover_flag);
					fn_userlog(c_ServiceName,"FTQ Rollover SPREAD Flag :%c:",c_sprd_roll_flag);  /*** Ver 2.3 ***/
    			fn_userlog(c_ServiceName," c_conv_flg :%c:",c_conv_flg);
    			fn_userlog(c_ServiceName," c_trg_prc_stts :%c:",c_trg_prc_stts);
    			fn_userlog(c_ServiceName," c_mod_can_flg :%c:",c_mod_can_flg);
    			fn_userlog(c_ServiceName," c_cvr_ordr_stts :%c:",c_cvr_ordr_stts);
    			fn_userlog(c_ServiceName," c_spl_flg :%c:",c_spl_flg);
					fn_userlog(c_ServiceName,":c_sqroffmkt_flg:%c:",c_sqroffmkt_flg);     /** Ver 1.4 **/
				}

				if( DEBUG_MSG_LVL_0 )
				{
			  	fn_userlog(c_ServiceName,"c_undrlyng :%s:,c_expry_dt :%s:,c_cntrct_tag :%c:,i_tag_cnt :%d:",c_undrlyng, c_expry_dt ,c_cntrct_tag ,i_tag_cnt);
				}

  	i_returncode = fn_pack_vartofml ( c_ServiceName,
                                      c_err_msg,
                                      &ptr_fml_Obuf,
                                      68, 	/** Changed from 39 to 40 in ver 1.2 **/ /* changed to 52 in ver 1.3 */  /** Ver 1.4 changed from 52 to 53  **/  /** ver 1.5 changed from 53 to 54 **/ /** ver 1.6 changed from 54 to 55 **//* changed to 59 in Ver 1.7 *//* Ver 2.1 Changed from 59 to 60 */ /* Changed to 62 in ver 2.2 */ /* Changed to 63 in Ver 2.3 */ /* Ver 2.4 changed frm 63 to 65 */ /*** 67 to 68 in Ver 4.0 ***/
                                 			/** Ver 3.5  changed from 65 to 67 **/
																			/** FFO_EBA_MTCH_ACT_NO,(char *)&c_mtch_accnt_no, ** Commented in Ver 2.0 **/
																			FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no,  /** Ver 2.0 **/
                                      FFO_PRDCT_TYP,(char *)&c_prd_typ,
                                      FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,
                                      FFO_UNDRLYNG,(char *)c_undrlyng,
                                      FFO_XCHNG_CD,(char *)c_xchng_cd,
                                      FFO_EXPRY_DT,(char *)c_expry_dt,
                                      FFO_OPT_TYP,(char *)&c_opt_typ,
                                      FFO_STRK_PRC,(char *)&l_strike_prc,
                                      FFO_EXER_TYP,(char *)&c_exrc_typ,
                                      FFO_CNTRCT_TAG,(char *)&c_cntrct_tag,
                                      FFO_C_OPNPSTN_QTY,(char *)&l_opnpstn_qty,
                                      FFO_C_OPNPSTN_FLW,(char *)&c_opnpstn_flw,
                                      FFO_CVR_QTY,(char *)&l_cvr_qty,
                                      FFO_LST_TRD_PRC,(char *)&l_lst_trdd_prc,
                                      FFO_UI_BUY_QTY,(char *)&l_ibuy_qty,
                                      FFO_UI_SELL_QTY,(char *)&l_isell_qty,
                                      FFO_MIN_LOT_QTY,(char *)&l_lot_size,
                                      FFO_STP_LSS_TGR,(char *)&li_stp_lss_tgr_prc,
                                      FFO_LMT_RT,(char *)&l_lmt_rt,
                                      FFO_ORDR_FLW,(char *)&c_cvr_ordr_flw,
                                      FFO_PSTN_AMT_BLKD,(char *)&d_mrkt_wd_pstn,
                                      FFO_C_MTM_OPN_VAL,(char *)&d_mtm_opn_val,
                                      FFO_U_IMTM_SPRD_PL,(char *)&d_price,
				      FFO_EFF_CLS_PRC, (char *)&d_t2t_prc, /*** Ver 4.0 ***/
                                      FFO_AMOUNT,(char *)&d_utrd_mrgn,
                                      FFO_U_ORDR_MRGN,(char *)&d_ord_mrgn,
                                      FFO_U_MM_TRD_MRGN,(char *)&d_umin_trd_mrgn,
                                      FFO_BAL_AMT,(char *)&d_avilable_amount,
                                      FFO_UNRLZD_PL,(char *)&d_unlz_pl,
                                      FFO_DWL_FLG,(char *)&c_addmrgn_flg,
                                      FFO_SPL_FLG,(char *)&c_sqroff_flg,
                                      FFO_STATUS_FLG,(char *)&c_jointsqroff_flg,
                                      FFO_QT_TRDNG_FLG,(char *)&c_rollover_flag,
																			FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flag,     /***  Ver 2.3 ***/
                                      FFO_FUT_CONV_FLG,(char *)&c_conv_flg,
                                      FFO_MTM_FLG,(char *)&c_trg_prc_stts,
                                      FFO_MOD_CAN_FLG,(char *)&c_mod_can_flg,
                                      FFO_IS_FLG,(char *)&c_cvr_ordr_stts,
                                      FFO_RQST_TYP,(char *)&c_spl_flg,
																			FFO_COUNTER,(char *)&i_tag_cnt,
																			FFO_ORDR_RFRNC,(char *)"",
																			FFO_CURR_RT,(char*)&l_spot_prc,		/** Ver 1.2 **/
                                      FFO_DAM_TRNSCTN, (char *)&c_null,    /*** Ver 1.3 ***/
                                      FFO_STLMNT_TYP, (char *)&c_null,      /*** Ver 1.3 ***/
                                      FFO_DLVRY_ALLWD, (char *)&c_null,  /*** Ver 1.3 ***/
                                      FFO_ORD_TYP, (char *)&c_null,       /*** Ver 1.3 ***/
                                      FFO_BOARD_LOT_QTY, (char *)&l_null, /*** Ver 1.3 ***/
                                      FFO_TMPLT, (char *)&l_null,       /*** Ver 1.3 ***/
                                      FFO_XCHNG_CAN_QTY, (char *)&l_null, /*** Ver 1.3 ***/
                                      FFO_EX_ORDR_TYP, (char *)&c_null,       /*** Ver 1.3 ***/
                                      FFO_ORD_TOT_QTY, (char *)&l_null,       /*** Ver 1.3 ***/
                                      FFO_FUT_PRC, (char *)&d_null,            /*** Ver 1.3 ***/
                                      FFO_PLG_ORDR_RFRNC, (char *)"",    /*** Ver 1.3 ***/
                                      FFO_EXRC_STTS, (char *)&c_null,   /*** Ver 1.3 ***/
																			FFO_RMS_PRCSD_FLG, (char *)&c_sqroffmkt_flg,   /** Ver 1.4 **/
                                      FFO_DR_CR_FLG, (char *)&c_null,                          /*** ver 1.5 ***/
																			FFO_NKD_BLKD_FLG, (char *)&c_null,       /*** Ver 1.6 ***/
                                      FFO_UPLD_MTCH_FLG, (char *)&c_null,   /*** Ver 1.7 ***/
                                      FFO_EXRC_QTY, (char *)&l_exrc_qty,        /*** Ver 1.7 ***/
                                      FFO_ORD_VALID_DT, (char *)c_ord_val_dt,         /*** Ver 1.7 ***/
                                      FFO_EBA_STTS, (char *)&c_null,        /*** Ver 1.7 ***/  
																			FFO_BK_UBK_FLG, (char *)&c_setlmnt_flg,  /** Ver 2.1 **/
                                      FFO_ND_STRT_DT, (char *)"", /*** Ver 2.2 ***/
                                      FFO_ND_END_DT, (char *)"", /*** Ver 2.2 ***/
                                      FFO_SO_AMT_BLKD, (char *)&d_dlvry_mrgn_blk, /** Ver 2.4 **/
                                      FFO_OPNPSTN_VAL,  (char *)&d_dlvry_mrgn_req, /** Ver 2.4 **/
                                      FFO_INDX_INDCTR, (char *)&c_indx_indctr,     /*** Ver 3.5 ***/
                                      /**FFO_STLMNT_TYP, (char *)&c_dlvry_sttlmnt_typ *** Ver 3.5 *** ** Ver 3.8 **/
                                      FFO_BNK_STTS, (char *)&c_dlvry_sttlmnt_typ /*** Ver 3.8 ***/
                                    );
		
	
        if ( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31545", FMLMSG, c_err_msg  );
          /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/ 
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}	
			}
			else if(c_prd_typ == 'U')
  		{
    		c_prev_prdct_typ == '\0';
    		i_cnt=0;
    		l_lst_trdd_prc = 0;
    		d_umin_trd_mrgn = 0.0;
    		d_avilable_amount =0.0;
    		d_unlz_pl =0.0;
    		c_addmrgn_flg = '\0';
    		c_sqroff_flg = '\0';
    		c_jointsqroff_flg = '\0';
    		c_rollover_flag = '\0';
				c_sprd_roll_flag = 'N';
    		c_conv_flg  = '\0';
    		c_mtm_flg   = '\0';
    		c_mod_can_flg = '\0';

			/** Getting the total executed value and quantity of FRESH order. **/
    
      /*** Commented in Ver 1.9 ***
	
				EXEC SQL
    			SELECT  SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),
            			SUM(FTD_EXCTD_QTY)
    			INTO    :d_frsh_exe_val,
          	  		:li_tot_exec_qty
    			FROM    FTD_FO_TRD_DTLS
    			WHERE   FTD_ORDR_RFRNC = :c_ordr_rfrnc;

       ***********************/

       /*** Ver 1.9 Starts ***/

       EXEC SQL
         SELECT   NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FTD_EXCTD_QTY ) ), 0 ),
    	            NVL( SUM( DECODE( FOD_FC_FLAG, 'C', FTD_EXCTD_QTY, 0 ) ), 0 ),
        	        NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FTD_EXCTD_QTY * FTD_EXCTD_RT ) ),0),
            	    NVL( SUM( DECODE( FOD_FC_FLAG, 'C', FTD_EXCTD_QTY * FTD_EXCTD_RT, 0 ) ),0)
      	  INTO    :d_frs_exe_qty,
                  :d_cvr_exe_qty,
                  :d_frs_exe_val,
                  :d_cvr_exe_val
      	  FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
      	  WHERE   FTD_ORDR_RFRNC  = FOD_ORDR_RFRNC
      	  AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_ordr_rfrnc;

       /**** Ver 1.9 Ends ***/


    		if( SQLCODE != 0 )
    		{
      		fn_errlog( c_ServiceName, "S31550", SQLMSG, c_err_msg  );
          /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

				if( DEBUG_MSG_LVL_3 )
				{
          /*** Commented in Ver 1.9 as variables are not used anymore *** 
					fn_userlog(c_ServiceName, "d_frsh_exe_val :%lf:",d_frsh_exe_val);
					fn_userlog(c_ServiceName, "li_tot_exec_qty :%ld:",li_tot_exec_qty);
          ***/
          /*** Ver 1.9 Starts ***/

          fn_userlog(c_ServiceName,"d_frs_exe_qty :%lf:",d_frs_exe_qty);
          fn_userlog(c_ServiceName,"d_frs_exe_val :%lf:",d_frs_exe_val);
          fn_userlog(c_ServiceName,"d_cvr_exe_qty :%lf:",d_cvr_exe_qty);
          fn_userlog(c_ServiceName,"d_cvr_exe_val :%lf:",d_cvr_exe_val);

          /*** Ver 1.9 Ends ***/ 
				}

				d_wgt_avrg_price = 0.0;
    		/***  d_wgt_avrg_price = (double) (d_frsh_exe_val / li_tot_exec_qty);  Commented in Ver 1.9 ***/
   
        /*** Ver 1.9 Starts ***/
 
        if (l_opnpstn_qty > 0) /*** Fresh open postion ***/
        {
          d_wgt_avrg_price = d_frs_exe_val / d_frs_exe_qty;
        }
        else if (l_opnpstn_qty < 0) /*** Cover open Qty ***/
        {
          d_wgt_avrg_price = d_cvr_exe_val / d_cvr_exe_qty;
        }
   
        /*** Ver 1.9 Ends ***/

        if( DEBUG_MSG_LVL_3 )   /** debug level added in ver 4.1 **/
        {
				  fn_userlog(c_ServiceName, "d_wgt_avrg_price :%lf:",d_wgt_avrg_price);
        }
   
        /*** Added in Ver 2.2 ***/
 

        if (c_frsh_ordr_stts == EXECUTED )
       {
           EXEC SQL
               SELECT  NVL(CLM_BULLET_SCHM_FLG,'N')
               INTO    :c_bullet_schm_flg
               FROM    CLM_CLNT_MSTR
               WHERE   CLM_MTCH_ACCNT =:c_mtch_accnt_no ;

        if( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S31555", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur; Commented in Ver 3.4 ***/
          EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }       
        

        
        strcpy(c_bullet_frm_time.arr,"NA");
        strcpy(c_bullet_end_time.arr,"NA");
   
        if ( c_bullet_schm_flg == 'Y' )
           {
            EXEC SQL
              SELECT  TO_CHAR(MAX(FTD_TRD_DT),'HH24:MI:SS'),
                      TO_CHAR(MAX(FTD_TRD_DT) + :c_bullet_param * 1/24/60/60,'HH24:MI:SS')
              INTO    :c_bullet_frm_time,
                      :c_bullet_end_time
              FROM    FTD_FO_TRD_DTLS
              WHERE   FTD_ORDR_RFRNC = :c_ordr_rfrnc;

        if( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S31560", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur; Commented in Ver 3.4 ***/
          EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if( c_cvr_ordr_stts == 'D' || c_cvr_ordr_stts == 'C' )
        {
         strcpy(c_bullet_frm_time.arr,"NA");
         strcpy(c_bullet_end_time.arr,"NA");
        }

        if( DEBUG_MSG_LVL_3 )
        {
          fn_userlog(c_ServiceName,"------Bullet timing----");
          fn_userlog(c_ServiceName,"From time  :%s:",c_bullet_frm_time.arr );
          fn_userlog(c_ServiceName,"end time  :%s:",c_bullet_end_time.arr );
        }  
     
       }
      }
        SETLEN(c_bullet_frm_time);
        SETLEN(c_bullet_end_time);

      
 

      /*** End for Ver 2.2 ***/


				EXEC SQL
      		SELECT  NVL(FTQ_LST_TRD_PRC,0),
                  FTQ_MIN_LOT_QTY
      		INTO    :l_cmp,
                  :l_lot_size
      		FROM    FTQ_FO_TRD_QT
      		WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
     /*** 		AND     FTQ_PRDCT_TYP = 'F'   *** Commented in Ver 1.8 to remove hard parsing  ***/
          AND     FTQ_PRDCT_TYP = :c_fut_prd_typ  /*** Ver 1.8 binding variable used instead of hard coded value ***/        
      		/** AND     trim(FTQ_UNDRLYNG)  = :c_undrlyng ** 3.6 **/
          AND     FTQ_UNDRLYNG  = :c_undrlyng  /** trim Remove in Ver 3.6 **/
      		AND     FTQ_EXPRY_DT  = :c_expry_dt
     /*** 		AND     FTQ_OPT_TYP   = '*'                   
      		AND     FTQ_STRK_PRC  = 0     *** Commented in Ver 1.8 to remove hard parsing  ***/               
          AND     FTQ_OPT_TYP   = :c_fut_opt_typ  /*** Ver 1.8 binding variable used instead of hard coded value ***/
          AND     FTQ_STRK_PRC  = :l_fut_strk_prc /*** Ver 1.8 binding variable used instead of hard coded value ***/ 
      		AND     FTQ_EXER_TYP  = :c_exrc_typ;

    		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    		{
      		fn_errlog( c_ServiceName, "S31565", SQLMSG, c_err_msg  );
          /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

				if( DEBUG_MSG_LVL_3 )
				{
					fn_userlog(c_ServiceName, "l_cmp :%ld:",l_cmp);
				}

				if ( c_opnpstn_flw == BUY )
    		{ 
          if (l_opnpstn_qty > 0 ) /*** If condition added in Ver 1.9 ***/
          {  
     			  d_unlz_pl = ((double)l_cmp - d_wgt_avrg_price) * (double)l_opnpstn_qty;
          }
          else  /*** Else block added in Ver 1.9 ***/ 
          {
            d_unlz_pl = (d_wgt_avrg_price - (double)l_cmp) * (double)l_opnpstn_qty; 
          }
    		}
    		else if ( c_opnpstn_flw == SELL )
    		{
          if (l_opnpstn_qty > 0 ) /*** If condition added in Ver 1.9 ***/
          {
      		  d_unlz_pl = (d_wgt_avrg_price - (double)l_cmp) * (double)l_opnpstn_qty;
          }
          else /*** Else block added in Ver 1.9 ***/ 
          {
            d_unlz_pl = ((double)l_cmp - d_wgt_avrg_price) * (double)l_opnpstn_qty;
          }
    		}

   		 	c_mod_can_flg = 'N';
        c_call_mod_serv_flag = 'N'; /*** Ver 1.3 ***/
        c_sltp_sqoff_at_mkt_flag = 'N';  /*** Ver 1.3 ***/
        c_plc_cvr_ordr_flg = 'N'; /*** Added in Ver 1.7 ***/

        if ( ( c_frsh_ordr_stts == EXECUTED ) && ( c_cvr_ordr_stts == ORDERED  || c_cvr_ordr_stts == PARTIALLY_EXECUTED ) )
        {
          c_mod_can_flg = 'Y';
          c_call_mod_serv_flag = 'M'; /*** Ver 1.3 ***/
          c_sltp_sqoff_at_mkt_flag = 'Y';  /*** Ver 1.3 ***/
        }
        else if ( (c_frsh_ordr_stts == PARTIALLY_EXECUTED ) && ( c_cvr_ordr_stts == ORDERED) )  /*** Ver 1.3 ***/
        {
         c_mod_can_flg = 'Y';
         c_call_mod_serv_flag = 'P';
         c_sltp_sqoff_at_mkt_flag = 'N';
        }

       if( DEBUG_MSG_LVL_3) /** ver 4.1 debug level changed to 3 **/
       {
        fn_userlog(c_ServiceName," Call Modify Service Flag IS :%c:",c_call_mod_serv_flag);
        fn_userlog(c_ServiceName," Modify Flag IS :%c:",c_mod_can_flg);
        fn_userlog(c_ServiceName," SquareOff at Market Flag IS :%c",c_sltp_sqoff_at_mkt_flag);
       }

				if ( ( c_cvr_ordr_stts == ORDERED ) ||
         		( c_cvr_ordr_stts == PARTIALLY_EXECUTED ) )
    		{
       		if( DEBUG_MSG_LVL_5 )
       		{
        		fn_userlog(c_ServiceName," ptr_st_orderbook->c_xchng_cd :%s:",c_xchng_cd);
        		fn_userlog(c_ServiceName," ptr_st_orderbook->c_sltp_ordr_rfrnc :%s:",c_sltp_ordr_rfrnc);
        		fn_userlog(c_ServiceName," ptr_st_orderbook->l_mdfctn_cntr :%ld:",l_mdfctn_cntr);
       		}

       		EXEC SQL
           	SELECT fxb_rqst_typ,
            	      fxb_plcd_stts
           	INTO   :c_fxb_rqst_typ,
           	       :c_fxb_plcd_stts
           	FROM   fxb_fo_xchng_book
           	WHERE  fxb_xchng_cd    = :c_xchng_cd
           	AND    fxb_ordr_rfrnc  = :c_sltp_ordr_rfrnc
           	AND    fxb_mdfctn_cntr = :l_mdfctn_cntr;
       
					if ( SQLCODE != 0 )
       		{
          	fn_errlog( c_ServiceName, "S31570", SQLMSG, c_err_msg  );
            /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
            EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
          	tpfree ( ( char * ) ptr_fml_Obuf );
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       		}

       		if (( c_fxb_rqst_typ == CANCELLED ) && ( c_fxb_plcd_stts != REJECT ))
       		{
           	c_mod_can_flg = 'N';
       		}
    		}

        /*** Ver 1.3 Starts ***/

        if (c_frsh_ordr_stts == PARTIALLY_EXECUTED && c_cvr_ordr_stts == REJECTED )
        {
         c_cvr_ordr_stts = 'Z';  /*** In order to disable place cover order link ***/
         c_plc_cvr_ordr_flg = 'N';    /*** Added in Ver 1.7 ***/
        }
        else if ( c_cvr_ordr_stts == REJECTED )  /*** Added in Ver 1.7 ***/
        {
         c_plc_cvr_ordr_flg = 'Y';
        }

        /*** Added in Ver 1.9 ***/ 
 
        if(l_opnpstn_qty < 0 ) 
        {
          l_opnpstn_qty = (-1) * l_opnpstn_qty; 
        }
       
        /*** Ver 1.9 Ends ***/

        if ( DEBUG_MSG_LVL_3 )  /** ver 4.1 debug level changed to 3 **/
        {
         fn_userlog(c_ServiceName," MARKET TO LIMIT CHANGES LOGS ");
         fn_userlog(c_ServiceName," Cover Order Status IS :%c",c_cvr_ordr_stts);
         fn_userlog(c_ServiceName," Fresh Limit/Market Flag IS :%c:",c_frsh_slm_flg);
         fn_userlog(c_ServiceName," Fresh Executed Qty IS :%ld:",l_frsh_exctd_qty);
         fn_userlog(c_ServiceName," Fresh Unexecuted Qty IS :%ld:",l_frsh_unexctd_qty);
         fn_userlog(c_ServiceName," Cover Unexecuted Qty IS :%ld:",l_cvr_unexctd_qty);
         fn_userlog(c_ServiceName," Cover Limit/Market Flag IS :%c:",c_cvr_slm_flg);
         fn_userlog(c_ServiceName," Total Ordered Qty IS :%ld:",l_tot_ord_qty);
         fn_userlog(c_ServiceName," Fresh Limit Price IS :%lf:", d_price);
	 fn_userlog(c_ServiceName," d_t2t_prc :%lf:",d_t2t_prc); /*** Ver 4.0 ***/
         fn_userlog(c_ServiceName," Fresh Order Reference IS :%s:",c_ordr_rfrnc);
         fn_userlog(c_ServiceName," Fresh Order Status IS :%c:",c_frsh_ordr_stts);
        }

        /*** Ver 1.3 Ends ***/

    		c_spl_flg = CONTRACT_IP;
				i_tag_cnt++;

				if( DEBUG_MSG_LVL_3)
				{
    			fn_userlog(c_ServiceName,"Before packing");
    			fn_userlog(c_ServiceName," c_mtch_accnt_no :%s:",c_mtch_accnt_no);
    			fn_userlog(c_ServiceName," c_prd_typ :%c:",c_prd_typ);
    			fn_userlog(c_ServiceName," c_ctgry_indstk :%c:",c_ctgry_indstk);
    			fn_userlog(c_ServiceName," c_undrlyng :%s:",c_undrlyng);
    			fn_userlog(c_ServiceName," c_xchng_cd :%s:",c_xchng_cd);
    			fn_userlog(c_ServiceName," c_expry_dt :%s:",c_expry_dt);
    			fn_userlog(c_ServiceName," c_opt_typ :%c:",c_opt_typ);
    			fn_userlog(c_ServiceName," l_strike_prc :%ld:",l_strike_prc);
    			fn_userlog(c_ServiceName," c_exrc_typ :%c:",c_exrc_typ);
    			fn_userlog(c_ServiceName," c_cntrct_tag :%c:",c_cntrct_tag);
    			fn_userlog(c_ServiceName," l_opnpstn_qty :%ld:",l_opnpstn_qty);
    			fn_userlog(c_ServiceName," c_opnpstn_flw :%c:",c_opnpstn_flw);
    			fn_userlog(c_ServiceName," l_cvr_qty :%ld:",l_cvr_qty);
    			fn_userlog(c_ServiceName," l_cmp :%ld:",l_cmp);
    			fn_userlog(c_ServiceName," l_ibuy_qty :%ld:",l_ibuy_qty);
    			fn_userlog(c_ServiceName," l_isell_qty :%ld:",l_isell_qty);
    			fn_userlog(c_ServiceName," l_lot_size :%ld:",l_lot_size);
    			fn_userlog(c_ServiceName," li_stp_lss_tgr_prc :%ld:",li_stp_lss_tgr_prc);
    			fn_userlog(c_ServiceName," l_lmt_rt :%ld:",l_lmt_rt);
    			fn_userlog(c_ServiceName," c_cvr_ordr_flw :%c:",c_cvr_ordr_flw);
    			fn_userlog(c_ServiceName," d_mrkt_wd_pstn :%lf:",d_mrkt_wd_pstn);
    			fn_userlog(c_ServiceName," d_mtm_opn_val :%lf:",d_mtm_opn_val);
    			fn_userlog(c_ServiceName," d_price :%lf:",d_price);
			fn_userlog(c_ServiceName," d_t2t_prc :%lf:",d_t2t_prc); /*** Ver 4.0 ***/
    			fn_userlog(c_ServiceName," d_wgt_avrg_price :%lf:",d_wgt_avrg_price);
    			fn_userlog(c_ServiceName," d_utrd_mrgn :%lf:",d_utrd_mrgn);
    			fn_userlog(c_ServiceName," d_ord_mrgn :%lf:",d_ord_mrgn);
    			fn_userlog(c_ServiceName," d_umin_trd_mrgn :%lf:",d_umin_trd_mrgn);
    			fn_userlog(c_ServiceName," d_avilable_amount FP SLTP:%lf:",d_avilable_amount);
    			fn_userlog(c_ServiceName," d_unlz_pl :%lf:",d_unlz_pl);
    			fn_userlog(c_ServiceName," c_addmrgn_flg :%c:",c_addmrgn_flg);
    			fn_userlog(c_ServiceName," c_sqroff_flg :%c:",c_sqroff_flg);
    			fn_userlog(c_ServiceName," c_jointsqroff_flg :%c:",c_jointsqroff_flg);
    			fn_userlog(c_ServiceName," c_rollover_flag :%c:",c_rollover_flag);
					fn_userlog(c_ServiceName,"FTQ Rollover SPREAD Flag :%c:",c_sprd_roll_flag);  /*** Ver 2.3 ***/
    			fn_userlog(c_ServiceName," c_conv_flg :%c:",c_conv_flg);
    			fn_userlog(c_ServiceName," c_mtm_flg :%c:",c_mtm_flg);
    			fn_userlog(c_ServiceName," c_mod_can_flg :%c:",c_mod_can_flg);
    			fn_userlog(c_ServiceName," c_cvr_ordr_stts :%c:",c_cvr_ordr_stts);
    			fn_userlog(c_ServiceName," c_spl_flg :%c:",c_spl_flg);
          fn_userlog(c_ServiceName," c_call_mod_serv_flag :%c:",c_call_mod_serv_flag);           /*** Ver 1.3 ***/
          fn_userlog(c_ServiceName," c_sltp_sqoff_at_mkt_flag :%c:",c_sltp_sqoff_at_mkt_flag); /*** Ver 1.3 ***/ 
				}

				if( DEBUG_MSG_LVL_0 )
				{
					fn_userlog(c_ServiceName,"c_undrlyng :%s:,c_expry_dt :%s:,c_cntrct_tag :%c:,i_tag_cnt :%d:",c_undrlyng, c_expry_dt ,c_cntrct_tag ,i_tag_cnt);
				}

        if( DEBUG_MSG_LVL_3 )   /** debug level added in ver 4.1 **/
        {
          fn_userlog(c_ServiceName,"From time  :%s:",c_bullet_frm_time.arr );
          fn_userlog(c_ServiceName,"end time  :%s:",c_bullet_end_time.arr );
        }
 
    		i_returncode = fn_pack_vartofml ( c_ServiceName,
                                      c_err_msg,
                                      &ptr_fml_Obuf,
                                      68,		/** Ver 1.2 changed from 39 to 40 **/ /* changed to 52 in ver 1.3 */  /** Ver 1.4 changed from 52 to 53  **/  /** ver 1.5 changed from 53 to 54 **/ /** ver 1.6 changed from 54 to 55 **//* changed to 59 in Ver 1.7 */ /* Ver 2.1 changed from 59 to 60 */ /* Changed to 62 in Ver 2.2 */ /* Changed to 63 in Ver 2.3 */ /* Ver 2.4 chnged from 63 to 65 */ /*** 67 to 68 in Ver 4.0 ***/
                              				/** Ver 3.5  changed from 65 to 67 **/
																			/**  FFO_EBA_MTCH_ACT_NO,(char *)&c_mtch_accnt_no, ** Commented in Ver 2.0 **/
																			FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no,  /** Ver 2.0 **/
                                      FFO_PRDCT_TYP,(char *)&c_prd_typ,
                                      FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,
                                      FFO_UNDRLYNG,(char *)c_undrlyng,
                                      FFO_XCHNG_CD,(char *)c_xchng_cd,
                                      FFO_EXPRY_DT,(char *)c_expry_dt,
                                      FFO_OPT_TYP,(char *)&c_opt_typ,
                                      FFO_STRK_PRC,(char *)&l_strike_prc,
                                      FFO_EXER_TYP,(char *)&c_exrc_typ,
                                      FFO_CNTRCT_TAG,(char *)&c_cntrct_tag,
                                      FFO_C_OPNPSTN_QTY,(char *)&l_opnpstn_qty,
                                      FFO_C_OPNPSTN_FLW,(char *)&c_opnpstn_flw,
                                      FFO_CVR_QTY,(char *)&l_cvr_qty,
                                      FFO_LST_TRD_PRC,(char *)&l_cmp,
                                      FFO_UI_BUY_QTY,(char *)&l_ibuy_qty,
                                      FFO_UI_SELL_QTY,(char *)&l_isell_qty,
                                      FFO_MIN_LOT_QTY,(char *)&l_lot_size,
                                      FFO_STP_LSS_TGR,(char *)&li_stp_lss_tgr_prc,
                                      FFO_LMT_RT,(char *)&l_lmt_rt,
                                      FFO_ORDR_FLW,(char *)&c_cvr_ordr_flw,
                                      FFO_PSTN_AMT_BLKD,(char *)&d_mrkt_wd_pstn,
                                      FFO_C_MTM_OPN_VAL,(char *)&d_mtm_opn_val,
                                      FFO_U_IMTM_SPRD_PL,(char *)&d_wgt_avrg_price,
				      FFO_EFF_CLS_PRC, (char *) &d_t2t_prc, /*** Ver 4.0 ***/
                                      FFO_AMOUNT,(char *)&d_utrd_mrgn,
                                      FFO_U_ORDR_MRGN,(char *)&d_ord_mrgn,
                                      FFO_U_MM_TRD_MRGN,(char *)&d_umin_trd_mrgn,
                                      FFO_BAL_AMT,(char *)&d_avilable_amount,
                                      FFO_UNRLZD_PL,(char *)&d_unlz_pl,
                                      FFO_DWL_FLG,(char *)&c_addmrgn_flg,
                                      FFO_SPL_FLG,(char *)&c_sqroff_flg,
                                      FFO_STATUS_FLG,(char *)&c_jointsqroff_flg,
                                      FFO_QT_TRDNG_FLG,(char *)&c_rollover_flag,
																			FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flag,     /***  Ver 2.3 ***/
                                      FFO_FUT_CONV_FLG,(char *)&c_conv_flg,
                                      FFO_MTM_FLG,(char *)&c_mtm_flg,
                                      FFO_MOD_CAN_FLG,(char *)&c_mod_can_flg,
                                      FFO_IS_FLG,(char *)&c_cvr_ordr_stts,
                                      FFO_RQST_TYP,(char *)&c_spl_flg,
																			FFO_COUNTER,(char *)&i_tag_cnt,
																			FFO_ORDR_RFRNC,(char *)c_sltp_ordr_rfrnc,
																			FFO_CURR_RT, (char *)&l_null,    /*** ver 1.2  ***/
                                      FFO_DAM_TRNSCTN, (char *)&c_call_mod_serv_flag,    /*** Ver 1.3 ***/
                                      FFO_STLMNT_TYP, (char *)&c_sltp_sqoff_at_mkt_flag,      /*** Ver 1.3 ***/
                                      FFO_DLVRY_ALLWD, (char *)&c_cvr_ordr_stts,  /*** Ver 1.3 ***/
                                      FFO_ORD_TYP, (char *)&c_frsh_slm_flg,       /*** Ver 1.3 ***/
                                      FFO_BOARD_LOT_QTY, (char *)&l_frsh_exctd_qty, /*** Ver 1.3 ***/
                                      FFO_TMPLT, (char *)&l_frsh_unexctd_qty,       /*** Ver 1.3 ***/
                                      FFO_XCHNG_CAN_QTY, (char *)&l_cvr_unexctd_qty, /*** Ver 1.3 ***/
                                      FFO_EX_ORDR_TYP, (char *)&c_cvr_slm_flg,       /*** Ver 1.3 ***/
                                      FFO_ORD_TOT_QTY, (char *)&l_tot_ord_qty,       /*** Ver 1.3 ***/
                                      FFO_FUT_PRC, (char *)&d_price,            /*** Ver 1.3 ***/
                                      FFO_PLG_ORDR_RFRNC, (char *)c_ordr_rfrnc,    /*** Ver 1.3 ***/
                                      FFO_EXRC_STTS, (char *)&c_frsh_ordr_stts,   /*** Ver 1.3 ***/
                                      FFO_RMS_PRCSD_FLG, (char *)&c_null,     /** Ver 1.4 **/
                                      FFO_DR_CR_FLG, (char *)&c_null,                          /*** ver 1.5 ***/
                                      FFO_NKD_BLKD_FLG, (char *)&c_null,       /*** Ver 1.6 ***/
                                      FFO_UPLD_MTCH_FLG, (char *)&c_plc_cvr_ordr_flg,   /*** Ver 1.7 ***/
                                      FFO_EXRC_QTY, (char *)&l_null,        /*** Ver 1.7 ***/
                                      FFO_ORD_VALID_DT, (char *)c_ord_val_dt,         /*** Ver 1.7 ***/
                                      FFO_EBA_STTS, (char *)&c_cvr_fc_flg,         /*** Ver 1.7 ***/
                                      FFO_BK_UBK_FLG,(char *)&c_null,  /*** Ver 2.1  ***/
                                      FFO_ND_STRT_DT, (char *)c_bullet_frm_time.arr, /*** Ver 2.2 ***/
                                      FFO_ND_END_DT, (char *)c_bullet_end_time.arr,   /*** Ver 2.2 ***/
                                      FFO_SO_AMT_BLKD, (char *)&d_null, /** Ver 2.4 **/
                                      FFO_OPNPSTN_VAL,  (char *)&d_null, /** Ver 2.4 **/
                                      FFO_INDX_INDCTR, (char *)&c_null,     /*** Ver 3.5 ***/
                                      /** FFO_STLMNT_TYP, (char *)&c_null       *** Ver 3.5 *** ** Ver 3.8 **/
                                      FFO_BNK_STTS, (char *)&c_null       /*** Ver 3.8 ***/	  
                                    );

    		if ( i_returncode == -1 )
    		{
      		fn_errlog( c_ServiceName, "S31575", FMLMSG, c_err_msg  );
          /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/  
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

			}
			else if(c_prd_typ == 'I')
  		{
    		c_prev_prdct_typ == '\0';
    		i_cnt=0;
    		l_lst_trdd_prc = 0;
    		d_umin_trd_mrgn = 0.0;
    		d_avilable_amount =0.0;
    		d_unlz_pl =0.0;
    		c_addmrgn_flg = '\0';
    		c_sqroff_flg = '\0';
    		c_jointsqroff_flg = '\0';
    		c_rollover_flag = '\0';
				c_sprd_roll_flag = 'N';
    		c_conv_flg  = '\0';
    		c_mtm_flg   = '\0';
    		c_mod_can_flg = '\0';

    		/** Getting the total executed value and quantity of FRESH order. **/
    	
        /*** Commented in Ver 1.9 ***
	
				EXEC SQL
    			SELECT  SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),
          			  SUM(FTD_EXCTD_QTY)
    			INTO    :d_frsh_exe_val,
          			  :li_tot_exec_qty
    			FROM    FTD_FO_TRD_DTLS
    			WHERE   FTD_ORDR_RFRNC = :c_ordr_rfrnc;

         *****************************/
      
         /*** Ver 1.9 Starts ***/

         EXEC SQL
           SELECT   NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FTD_EXCTD_QTY ) ), 0 ),
                    NVL( SUM( DECODE( FOD_FC_FLAG, 'C', FTD_EXCTD_QTY, 0 ) ), 0 ),
                    NVL( SUM( DECODE( FOD_FC_FLAG, 'C',0, FTD_EXCTD_QTY * FTD_EXCTD_RT ) ),0),
                    NVL( SUM( DECODE( FOD_FC_FLAG, 'C', FTD_EXCTD_QTY * FTD_EXCTD_RT, 0 ) ),0)
            INTO    :d_frs_exe_qty,
                    :d_cvr_exe_qty,
                    :d_frs_exe_val,
                    :d_cvr_exe_val
            FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
            WHERE   FTD_ORDR_RFRNC  = FOD_ORDR_RFRNC
            AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_ordr_rfrnc;
         
         /*** Ver 1.9 Ends ***/

    		if( SQLCODE != 0 )
    		{
      		fn_errlog( c_ServiceName, "S31580", SQLMSG, c_err_msg  );
          /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

				if( DEBUG_MSG_LVL_3 )
				{
          /*** Commented in Ver 1.9 as variables are not used anymore ***
					fn_userlog(c_ServiceName,"d_frsh_exe_val :%lf:", d_frsh_exe_val);
					fn_userlog(c_ServiceName,"li_tot_exec_qty :%ld:",li_tot_exec_qty);
          ***/
          /*** Ver 1.9 Starts ***/
  
          fn_userlog(c_ServiceName,"d_frs_exe_qty :%lf:",d_frs_exe_qty);
          fn_userlog(c_ServiceName,"d_frs_exe_val :%lf:",d_frs_exe_val);
          fn_userlog(c_ServiceName,"d_cvr_exe_qty :%lf:",d_cvr_exe_qty);
          fn_userlog(c_ServiceName,"d_cvr_exe_val :%lf:",d_cvr_exe_val); 

          /*** Ver 1.9 Ends ***/
				}

    		d_wgt_avrg_price = 0.0;
    		/*** d_wgt_avrg_price = (double) (d_frsh_exe_val / li_tot_exec_qty); Commented in Ver 1.9 ***/

        /*** Ver 1.9 Starts ***/

        if (l_opnpstn_qty > 0) /*** Fresh open postion ***/
        {
          d_wgt_avrg_price = d_frs_exe_val / d_frs_exe_qty;
        }
        else if (l_opnpstn_qty < 0) /*** Cover open Qty ***/
        {
          d_wgt_avrg_price = d_cvr_exe_val / d_cvr_exe_qty;
        }

        /*** Ver 1.9 Ends ***/
		
				if( DEBUG_MSG_LVL_3 )
				{
					fn_userlog(c_ServiceName,"d_wgt_avrg_price :%lf:",d_wgt_avrg_price);
    			fn_userlog(c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd);
    			fn_userlog(c_ServiceName,"c_undrlyng :%s:",c_undrlyng);
    			fn_userlog(c_ServiceName,"c_expry_dt :%s:",c_expry_dt);
    			fn_userlog(c_ServiceName,"c_opt_typ :%c:",c_opt_typ);
    			fn_userlog(c_ServiceName,"l_strike_prc :%ld:",l_strike_prc);
    			fn_userlog(c_ServiceName,"c_exrc_typ :%c:",c_exrc_typ);
				}

          /*** Added for Ver 2.2 ***/

       if (c_frsh_ordr_stts == EXECUTED )
       {
           EXEC SQL
               SELECT  NVL(CLM_BULLET_SCHM_FLG,'N')
               INTO    :c_bullet_schm_flg
               FROM    CLM_CLNT_MSTR
               WHERE   CLM_MTCH_ACCNT =:c_mtch_accnt_no ;

        if( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S31585", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur; Commented in Ver 3.4 ***/
          EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        strcpy(c_bullet_frm_time.arr,"NA");
        strcpy(c_bullet_end_time.arr,"NA");

        if (c_bullet_schm_flg == 'Y' )
           {
            EXEC SQL
              SELECT  TO_CHAR(MAX(FTD_TRD_DT),'HH24:MI:SS'),
                      TO_CHAR(MAX(FTD_TRD_DT) + :c_bullet_param * 1/24/60/60,'HH24:MI:SS')
              INTO    :c_bullet_frm_time,
                      :c_bullet_end_time
              FROM    FTD_FO_TRD_DTLS
              WHERE   FTD_ORDR_RFRNC = :c_ordr_rfrnc;

        if( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S31590", SQLMSG, c_err_msg  );
          /*** EXEC SQL CLOSE sys_spn_cur; Commented in Ver 3.4 ***/
          EXEC SQL FREE :cur_spn_pstn;    /*** Ver 2.0 ***/
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if( c_cvr_ordr_stts == 'D' || c_cvr_ordr_stts == 'C' )
        {
         strcpy(c_bullet_frm_time.arr,"NA");
         strcpy(c_bullet_end_time.arr,"NA");
        }
        
        if( DEBUG_MSG_LVL_3 )
        {
          fn_userlog(c_ServiceName,"------Bullet timing----");
          fn_userlog(c_ServiceName,"From time  :%s:",c_bullet_frm_time.arr );
          fn_userlog(c_ServiceName,"end time  :%s:",c_bullet_end_time.arr );
        } 
      
       }
      }
        SETLEN(c_bullet_frm_time);
        SETLEN(c_bullet_end_time);
      



      /*** End for Ver 2.2 ***/
			
					

     		EXEC SQL
      		SELECT  NVL(FTQ_LST_TRD_PRC,0),
                  FTQ_MIN_LOT_QTY
      		INTO    :l_cmp,
                  :l_lot_size
      		FROM    FTQ_FO_TRD_QT
      		WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
      		/*** AND     FTQ_PRDCT_TYP = 'O'    Commented in Ver 1.8 to remove hard parsing ***/
          AND     FTQ_PRDCT_TYP = :c_opt_prd_typ    /*** Ver 1.8 binding variable used instead of hard coded value ***/
      		/** AND     trim(FTQ_UNDRLYNG)  = :c_undrlyng ** 3.6 **/
          AND     FTQ_UNDRLYNG  = :c_undrlyng  /** trim Remove in Ver 3.6 **/
      		AND     FTQ_EXPRY_DT  = :c_expry_dt
      		AND     FTQ_OPT_TYP   = :c_opt_typ
      		AND     FTQ_STRK_PRC  = :l_strike_prc
      		AND     FTQ_EXER_TYP  = :c_exrc_typ;

    		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    		{
      		fn_errlog( c_ServiceName, "S31595", SQLMSG, c_err_msg  );
          /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/  
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

				if( DEBUG_MSG_LVL_3)  /** ver 4.1 debug level changed to 3 **/
				{			
					fn_userlog(c_ServiceName,"l_cmp :%ld:",l_cmp);
    			fn_userlog(c_ServiceName,"l_opnpstn_qty :%ld:",l_opnpstn_qty);
					fn_userlog(c_ServiceName,"c_opnpstn_flw :%c:",c_opnpstn_flw);
				}

    		if ( c_opnpstn_flw == BUY )
    		{
          if (l_opnpstn_qty > 0 ) /*** If condition added in Ver 1.9 ***/
          {
      		  d_unlz_pl = ((double)l_cmp - d_wgt_avrg_price) * (double)l_opnpstn_qty;
          }
          else  /*** Else block added in Ver 1.9 ***/
          {
            d_unlz_pl = (d_wgt_avrg_price - (double)l_cmp) * (double)l_opnpstn_qty;
          }
    		}
    		else if ( c_opnpstn_flw == SELL )
    		{
          if (l_opnpstn_qty > 0 ) /*** If condition added in Ver 1.9 ***/
          {
      		  d_unlz_pl = (d_wgt_avrg_price - (double)l_cmp) * (double)l_opnpstn_qty;
          }
          else  /*** Else block added in Ver 1.9 ***/ 
          {
            d_unlz_pl = ((double)l_cmp - d_wgt_avrg_price) * (double)l_opnpstn_qty;
          }
    		}

        if( DEBUG_MSG_LVL_3 ) /** ver 4.1 debug level changed to 3 **/
				{
    			fn_userlog(c_ServiceName,"d_unlz_pl :%lf:",d_unlz_pl);
				}

    		c_mod_can_flg = 'N';
        c_call_mod_serv_flag = 'N'; /*** Ver 1.3 ***/
        c_sltp_sqoff_at_mkt_flag = 'N';  /*** Ver 1.3 ***/
        c_plc_cvr_ordr_flg = 'N'; /*** Added in Ver 1.7 ***/

        if ( ( c_frsh_ordr_stts == EXECUTED ) && ( c_cvr_ordr_stts == ORDERED  || c_cvr_ordr_stts == PARTIALLY_EXECUTED ) )
        {
          c_mod_can_flg = 'Y';
          c_call_mod_serv_flag = 'M'; /*** Ver 1.3 ***/
          c_sltp_sqoff_at_mkt_flag = 'Y';  /*** Ver 1.3 ***/
        }
        else if ( (c_frsh_ordr_stts == PARTIALLY_EXECUTED ) && ( c_cvr_ordr_stts == ORDERED) )  /*** Ver 1.3 ***/
        {
         c_mod_can_flg = 'Y';
         c_call_mod_serv_flag = 'P';
         c_sltp_sqoff_at_mkt_flag = 'N';
        }

       if( DEBUG_MSG_LVL_3) /** ver 4.1 debug level changed to 3 **/
       {
        fn_userlog(c_ServiceName," Call Modify Service Flag IS :%c:",c_call_mod_serv_flag);
        fn_userlog(c_ServiceName," Modify Flag IS :%c:",c_mod_can_flg);
        fn_userlog(c_ServiceName," SquareOff at Market Flag IS :%c",c_sltp_sqoff_at_mkt_flag);
       }
  

    		if ( ( c_cvr_ordr_stts == ORDERED ) ||
         		( c_cvr_ordr_stts == PARTIALLY_EXECUTED ) )
    		{
       		if( DEBUG_MSG_LVL_5 )
       		{
        		fn_userlog(c_ServiceName," ptr_st_orderbook->c_xchng_cd :%s:",c_xchng_cd);
        		fn_userlog(c_ServiceName," ptr_st_orderbook->c_sltp_ordr_rfrnc :%s:",c_sltp_ordr_rfrnc);
        		fn_userlog(c_ServiceName," ptr_st_orderbook->l_mdfctn_cntr :%ld:",l_mdfctn_cntr);
       		}

       		EXEC SQL
           		SELECT fxb_rqst_typ,
             		     fxb_plcd_stts
           		INTO   :c_fxb_rqst_typ,
              	     :c_fxb_plcd_stts
           		FROM   fxb_fo_xchng_book
           		WHERE  fxb_xchng_cd    = :c_xchng_cd
           		AND    fxb_ordr_rfrnc  = :c_sltp_ordr_rfrnc
           		AND    fxb_mdfctn_cntr = :l_mdfctn_cntr;
       
					if ( SQLCODE != 0 )
       		{
          	fn_errlog( c_ServiceName, "S31600", SQLMSG, c_err_msg  );
            /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
            EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
            EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/  
          	tpfree ( ( char * ) ptr_fml_Obuf );
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       		}

       		if (( c_fxb_rqst_typ == CANCELLED ) && ( c_fxb_plcd_stts != REJECT ))
       		{
           	c_mod_can_flg = 'N';
       		}
    		}

        /*** Ver 1.3 Starts ***/

        if (c_frsh_ordr_stts == PARTIALLY_EXECUTED && c_cvr_ordr_stts == REJECTED )
        {
         c_cvr_ordr_stts = 'Z';  /*** In order to disable place cover order link ***/
         c_plc_cvr_ordr_flg = 'N';    /*** Added in Ver 1.7 ***/
        }
        else if ( c_cvr_ordr_stts == REJECTED )  /*** Added in Ver 1.7 ***/
        {
         c_plc_cvr_ordr_flg = 'Y';
        }

        /*** Ver 1.9 Starts ***/

        if(l_opnpstn_qty < 0 )  /*** Ver 2.8 ***/
        {
          l_opnpstn_qty = (-1) * l_opnpstn_qty;   /** Ver 2.8 **/
        }
  
        /*** Ver 1.9 Ends ***/
       

        if ( DEBUG_MSG_LVL_3 )  /** ver 4.1 debug level changed to 3 **/
        {
         fn_userlog(c_ServiceName," MARKET TO LIMIT CHANGES LOGS ");
         fn_userlog(c_ServiceName," Cover Order Status IS :%c",c_cvr_ordr_stts);
         fn_userlog(c_ServiceName," Fresh Limit/Market Flag IS :%c:",c_frsh_slm_flg);
         fn_userlog(c_ServiceName," Fresh Executed Qty IS :%ld:",l_frsh_exctd_qty);
         fn_userlog(c_ServiceName," Fresh Unexecuted Qty IS :%ld:",l_frsh_unexctd_qty);
         fn_userlog(c_ServiceName," Cover Unexecuted Qty IS :%ld:",l_cvr_unexctd_qty);
         fn_userlog(c_ServiceName," Cover Limit/Market Flag IS :%c:",c_cvr_slm_flg);
         fn_userlog(c_ServiceName," Total Ordered Qty IS :%ld:",l_tot_ord_qty);
         fn_userlog(c_ServiceName," Fresh Limit Price IS :%lf:", d_price);
	 fn_userlog(c_ServiceName," d_t2t_prc :%lf:",d_t2t_prc); /*** Ver 4.0 ***/
         fn_userlog(c_ServiceName," Fresh Order Reference IS :%s:",c_ordr_rfrnc);
         fn_userlog(c_ServiceName," Fresh Order Status IS :%c:",c_frsh_ordr_stts);
        }

        /*** Ver 1.3 Ends ***/

    		c_spl_flg = CONTRACT_IP;
				i_tag_cnt++;

				if( DEBUG_MSG_LVL_3)
				{
    			fn_userlog(c_ServiceName,"Before packing");
    			fn_userlog(c_ServiceName," c_mtch_accnt_no :%s:",c_mtch_accnt_no);
    			fn_userlog(c_ServiceName," c_prd_typ :%c:",c_prd_typ);
    			fn_userlog(c_ServiceName," c_ctgry_indstk :%c:",c_ctgry_indstk);
    			fn_userlog(c_ServiceName," c_undrlyng :%s:",c_undrlyng);
    			fn_userlog(c_ServiceName," c_xchng_cd :%s:",c_xchng_cd);
    			fn_userlog(c_ServiceName," c_expry_dt :%s:",c_expry_dt);
    			fn_userlog(c_ServiceName," c_opt_typ :%c:",c_opt_typ);
    			fn_userlog(c_ServiceName," l_strike_prc :%ld:",l_strike_prc);
    			fn_userlog(c_ServiceName," c_exrc_typ :%c:",c_exrc_typ);
    			fn_userlog(c_ServiceName," c_cntrct_tag :%c:",c_cntrct_tag);
    			fn_userlog(c_ServiceName," l_opnpstn_qty :%ld:",l_opnpstn_qty);
    			fn_userlog(c_ServiceName," c_opnpstn_flw :%c:",c_opnpstn_flw);
    			fn_userlog(c_ServiceName," l_cvr_qty :%ld:",l_cvr_qty);
   			  fn_userlog(c_ServiceName," l_cmp :%ld:",l_cmp);
    			fn_userlog(c_ServiceName," l_ibuy_qty :%ld:",l_ibuy_qty);
    			fn_userlog(c_ServiceName," l_isell_qty :%ld:",l_isell_qty);
    			fn_userlog(c_ServiceName," l_lot_size :%ld:",l_lot_size);
    			fn_userlog(c_ServiceName," li_stp_lss_tgr_prc :%ld:",li_stp_lss_tgr_prc);
    			fn_userlog(c_ServiceName," l_lmt_rt :%ld:",l_lmt_rt);
    			fn_userlog(c_ServiceName," c_cvr_ordr_flw :%c:",c_cvr_ordr_flw);
    			fn_userlog(c_ServiceName," d_mrkt_wd_pstn :%lf:",d_mrkt_wd_pstn);
    			fn_userlog(c_ServiceName," d_mtm_opn_val :%lf:",d_mtm_opn_val);
    			fn_userlog(c_ServiceName," d_price :%lf:",d_price);
			fn_userlog(c_ServiceName," d_t2t_prc :%lf:",d_t2t_prc); /*** Ver 4.0 ***/
    			fn_userlog(c_ServiceName," d_wgt_avrg_price :%lf:",d_wgt_avrg_price);
    			fn_userlog(c_ServiceName," d_utrd_mrgn :%lf:",d_utrd_mrgn);
    			fn_userlog(c_ServiceName," d_ord_mrgn :%lf:",d_ord_mrgn);
    			fn_userlog(c_ServiceName," d_umin_trd_mrgn :%lf:",d_umin_trd_mrgn);
    			fn_userlog(c_ServiceName," d_avilable_amount OP :%lf:",d_avilable_amount);
    			fn_userlog(c_ServiceName," d_unlz_pl :%lf:",d_unlz_pl);
    			fn_userlog(c_ServiceName," c_addmrgn_flg :%c:",c_addmrgn_flg);
    			fn_userlog(c_ServiceName," c_sqroff_flg :%c:",c_sqroff_flg);
    			fn_userlog(c_ServiceName," c_jointsqroff_flg :%c:",c_jointsqroff_flg);
    			fn_userlog(c_ServiceName," c_rollover_flag :%c:",c_rollover_flag);
					fn_userlog(c_ServiceName,"FTQ Rollover SPREAD Flag :%c:",c_sprd_roll_flag);  /*** Ver 2.3 ***/
    			fn_userlog(c_ServiceName," c_conv_flg :%c:",c_conv_flg);
    			fn_userlog(c_ServiceName," c_mtm_flg :%c:",c_mtm_flg);
    			fn_userlog(c_ServiceName," c_mod_can_flg :%c:",c_mod_can_flg);
    			fn_userlog(c_ServiceName," c_cvr_ordr_stts :%c:",c_cvr_ordr_stts);
    			fn_userlog(c_ServiceName," c_spl_flg :%c:",c_spl_flg);
          fn_userlog(c_ServiceName," c_call_mod_serv_flag :%c:",c_call_mod_serv_flag);           /*** Ver 1.3 ***/
          fn_userlog(c_ServiceName," c_sltp_sqoff_at_mkt_flag :%c:",c_sltp_sqoff_at_mkt_flag); /*** Ver 1.3 ***/
          fn_userlog(c_ServiceName,"c_indx_indctr :%c",c_indx_indctr );                                /*** Ver 3.5 ***/
          fn_userlog(c_ServiceName,"c_dlvry_sttlmnt_typ :%c",c_dlvry_sttlmnt_typ );                    /*** Ver 3.5 ***/
				}
				
				if( DEBUG_MSG_LVL_0 )
				{
					fn_userlog(c_ServiceName,"c_undrlyng :%s:,c_expry_dt :%s:,c_cntrct_tag :%c:,i_tag_cnt :%d:",c_undrlyng, c_expry_dt ,c_cntrct_tag ,i_tag_cnt);
				}

	/**** Ver 1.2 Starts ****/

        EXEC SQL
          SELECT LTQ_RT * 100
          INTO :l_spot_prc
          FROM ltq_trd_qt
          WHERE LTQ_STCK_CD = :c_undrlyng
          AND LTQ_XCHNG_CD = DECODE(:c_xchng_cd,'NFO','NSE','BFO','BSE');


        if(SQLCODE != 0)
        {
           fn_errlog( c_ServiceName, "S31605", SQLMSG, c_err_msg  );
           /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
           EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
           EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
           tpfree ( ( char * ) ptr_fml_Obuf );
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }

         fn_userlog(c_ServiceName, "NonSpan OpnPlus...Underlying:%s    Spot Price:%ld", c_undrlyng,l_spot_prc);

   /*** Ver 1.2 Ends ****/

    if( DEBUG_MSG_LVL_3 )   /** debug level added in ver 4.1 **/
    {
      fn_userlog(c_ServiceName,"From time  :%s:",c_bullet_frm_time.arr );
      fn_userlog(c_ServiceName,"end time  :%s:",c_bullet_end_time.arr );
		}

    i_returncode = fn_pack_vartofml ( c_ServiceName,
                                      c_err_msg,
                                      &ptr_fml_Obuf,
                                      68, 	/** Changed from 39 to 40 in ver 1.2 **/  /* changed to 52 in ver 1.3 */  /** Ver 1.4 changed from 52 to 53  **/  /** ver 1.5 changed from 53 to 54 **/ /** ver 1.6 changed from 54 to 55 **/ /* changed to 59 in Ver 1.7 */ /* Ver 2.1 changed from 59 to 60 */ /* Changed to 62 in Ver 2.2 */ /* Changed to 63 in Ver 2.3 */ /* Ver 2.4 chnged frm 63 to 65 */ /*** 67 to 68 in Ver 4.0 ***/
                            					/* Ver 3.5 chnged frm 65 to 67 */
																			/**   FFO_EBA_MTCH_ACT_NO,(char *)&c_mtch_accnt_no, ** Commented in Ver 2.0 **/
																			FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no,  /** Ver 2.0 **/
                                      FFO_PRDCT_TYP,(char *)&c_prd_typ,
                                      FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,
                                      FFO_UNDRLYNG,(char *)c_undrlyng,
                                      FFO_XCHNG_CD,(char *)c_xchng_cd,
                                      FFO_EXPRY_DT,(char *)c_expry_dt,
                                      FFO_OPT_TYP,(char *)&c_opt_typ,
                                      FFO_STRK_PRC,(char *)&l_strike_prc,
                                      FFO_EXER_TYP,(char *)&c_exrc_typ,
                                      FFO_CNTRCT_TAG,(char *)&c_cntrct_tag,
                                      FFO_C_OPNPSTN_QTY,(char *)&l_opnpstn_qty,
                                      FFO_C_OPNPSTN_FLW,(char *)&c_opnpstn_flw,
                                      FFO_CVR_QTY,(char *)&l_cvr_qty,
                                      FFO_LST_TRD_PRC,(char *)&l_cmp,
                                      FFO_UI_BUY_QTY,(char *)&l_ibuy_qty,
                                      FFO_UI_SELL_QTY,(char *)&l_isell_qty,
                                      FFO_MIN_LOT_QTY,(char *)&l_lot_size,
                                      FFO_STP_LSS_TGR,(char *)&li_stp_lss_tgr_prc,
                                      FFO_LMT_RT,(char *)&l_lmt_rt,
                                      FFO_ORDR_FLW,(char *)&c_cvr_ordr_flw,
                                      FFO_PSTN_AMT_BLKD,(char *)&d_mrkt_wd_pstn,
                                      FFO_C_MTM_OPN_VAL,(char *)&d_mtm_opn_val,
                                      FFO_U_IMTM_SPRD_PL,(char *)&d_wgt_avrg_price,
				      FFO_EFF_CLS_PRC, (char *) &d_t2t_prc, /*** Ver 4.0 ***/
                                      FFO_AMOUNT,(char *)&d_utrd_mrgn,
                                      FFO_U_ORDR_MRGN,(char *)&d_ord_mrgn,
                                      FFO_U_MM_TRD_MRGN,(char *)&d_umin_trd_mrgn,
                                      FFO_BAL_AMT,(char *)&d_avilable_amount,
                                      FFO_UNRLZD_PL,(char *)&d_unlz_pl,
                                      FFO_DWL_FLG,(char *)&c_addmrgn_flg,
                                      FFO_SPL_FLG,(char *)&c_sqroff_flg,
                                      FFO_STATUS_FLG,(char *)&c_jointsqroff_flg,
                                      FFO_QT_TRDNG_FLG,(char *)&c_rollover_flag,
																			FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flag,     /***  Ver 2.3 ***/
                                      FFO_FUT_CONV_FLG,(char *)&c_conv_flg,
                                      FFO_MTM_FLG,(char *)&c_mtm_flg,
                                      FFO_MOD_CAN_FLG,(char *)&c_mod_can_flg,
                                      FFO_IS_FLG,(char *)&c_cvr_ordr_stts,
                                      FFO_RQST_TYP,(char *)&c_spl_flg,
																			FFO_COUNTER,(char *)&i_tag_cnt,
																			FFO_ORDR_RFRNC,(char *)c_sltp_ordr_rfrnc,
																			FFO_CURR_RT,(char *)&l_spot_prc,			/** Added in ver 1.2 **/
                                      FFO_DAM_TRNSCTN, (char *)&c_call_mod_serv_flag,    /*** Ver 1.3 ***/
                                      FFO_STLMNT_TYP, (char *)&c_sltp_sqoff_at_mkt_flag,      /*** Ver 1.3 ***/
                                      FFO_DLVRY_ALLWD, (char *)&c_cvr_ordr_stts,  /*** Ver 1.3 ***/
                                      FFO_ORD_TYP, (char *)&c_frsh_slm_flg,       /*** Ver 1.3 ***/
                                      FFO_BOARD_LOT_QTY, (char *)&l_frsh_exctd_qty, /*** Ver 1.3 ***/
                                      FFO_TMPLT, (char *)&l_frsh_unexctd_qty,       /*** Ver 1.3 ***/
                                      FFO_XCHNG_CAN_QTY, (char *)&l_cvr_unexctd_qty, /*** Ver 1.3 ***/
                                      FFO_EX_ORDR_TYP, (char *)&c_cvr_slm_flg,       /*** Ver 1.3 ***/
                                      FFO_ORD_TOT_QTY, (char *)&l_tot_ord_qty,       /*** Ver 1.3 ***/
                                      FFO_FUT_PRC, (char *)&d_price,            /*** Ver 1.3 ***/
                                      FFO_PLG_ORDR_RFRNC, (char *)c_ordr_rfrnc,    /*** Ver 1.3 ***/
                                      FFO_EXRC_STTS, (char *)&c_frsh_ordr_stts,   /*** Ver 1.3 ***/
                                      FFO_RMS_PRCSD_FLG, (char *)&c_null,                      /** Ver 1.4 **/
                                      FFO_DR_CR_FLG, (char *)&c_null,                          /*** ver 1.5 ***/
																			FFO_NKD_BLKD_FLG, (char *)&c_null,       /*** Ver 1.6 ***/
                                      FFO_UPLD_MTCH_FLG, (char *)&c_plc_cvr_ordr_flg,   /*** Ver 1.7 ***/
                                      FFO_EXRC_QTY, (char *)&l_null,        /*** Ver 1.7 ***/
                                      FFO_ORD_VALID_DT, (char *)c_ord_val_dt,         /*** Ver 1.7 ***/
                                      FFO_EBA_STTS, (char *)&c_cvr_fc_flg,         /*** Ver 1.7 ***/
                                      FFO_BK_UBK_FLG,(char *)&c_null,  /*** Ver 2.1 ***/
                                      FFO_ND_STRT_DT, (char *)c_bullet_frm_time.arr, /*** Ver 2.2 ***/
                                      FFO_ND_END_DT, (char *)c_bullet_end_time.arr,   /*** Ver 2.2 ***/
                                      FFO_SO_AMT_BLKD, (char *)&d_null, /** Ver 2.4 **/
                                      FFO_OPNPSTN_VAL, (char *)&d_null, /** Ver 2.4 **/
                                      FFO_INDX_INDCTR, (char *)&c_null,     /*** Ver 3.5 ***/
                                      /** FFO_STLMNT_TYP, (char *)&c_null       *** Ver 3.5 *** ** Ver 3.8 **/
                                      FFO_BNK_STTS, (char *)&c_null       /*** Ver 3.8 ***/
                                    );

    		if ( i_returncode == -1 )
    		{
      		fn_errlog( c_ServiceName, "S31610", FMLMSG, c_err_msg  );
          /* EXEC SQL CLOSE sys_cur;  Commented in Ver 3.4 */
          EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/ 
          EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/ 
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}
  		}

			if( DEBUG_MSG_LVL_0 )
			{
				fn_userlog(c_ServiceName,"c_tmp_undrlying :%s:,c_undrlyng :%s:,i_grp_cnt :%d:",c_tmp_undrlying,c_undrlyng,i_grp_cnt);			}

			if( c_opnpstn_flw == 'B' )
				l_grp_opn_qty = l_grp_opn_qty + l_opnpstn_qty;
			else if( c_opnpstn_flw == 'S' )
				l_grp_opn_qty  = l_grp_opn_qty - l_opnpstn_qty;

			if(i_prev_tag_cnt != i_tag_cnt)
  		{ 
				d_grp_trd_mrgn = d_grp_trd_mrgn + d_utrd_mrgn;
			}

			d_grp_pl = d_grp_pl + d_unlz_pl;
  		d_grp_ord_mrgn = d_grp_ord_mrgn + d_ord_mrgn;

			if( DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"c_opnpstn_flw1 :%c:", c_opnpstn_flw);
				fn_userlog(c_ServiceName,"d_grp_ord_mrgn1 :%lf:", d_grp_ord_mrgn);
				fn_userlog(c_ServiceName,"d_grp_trd_mrgn1 :%lf:", d_grp_trd_mrgn);
				fn_userlog(c_ServiceName,"d_grp_pl1 :%lf:", d_grp_pl);
				fn_userlog(c_ServiceName,"l_grp_opn_qty1 :%ld:", l_grp_opn_qty);
			}

			strcpy(c_tmp_undrlying,c_undrlyng);

			i_grp_cnt =1;

  		i_cnt++;

  		strcpy(c_prev_undrlyng,c_undrlyng);
  		c_prev_tag = c_cntrct_tag;
  		c_prev_prdct_typ = c_prd_typ;
  		strcpy(c_prev_expry_dt,c_expry_dt);
  		l_prev_opnpstn_qty = l_opnpstn_qty;
  		c_prev_opnpstn_flw = c_opnpstn_flw;
  		l_prev_cvr_qty = l_cvr_qty;
  		l_prev_ibuy_qty = l_ibuy_qty;
  		l_prev_isell_qty = l_isell_qty;
  		d_prev_mtm_opn_val = d_mtm_opn_val;
  		d_prev_price=d_price;
  		c_prev_ctgry_indstk = c_ctgry_indstk;
			i_prev_tag_cnt = i_tag_cnt;

		}  /** END WHILE **/

		/*** EXEC SQL CLOSE sys_cur;   ** Ver 2.0 **  Commented in Ver 3.4 ***/
    EXEC SQL CLOSE :sys_cursor; /*** Ver 3.4 ***/
    EXEC SQL FREE :sys_cursor; /*** Ver 3.4 ***/
	}
	tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
}
	

double fn_cal_min_mrgn	(	char *c_ServiceName,
													char *c_mtch_accnt,
													char *c_undrlyng,
													char c_cntrct_tag,
													char *c_xchng_cd,
													char c_prdct_typ,
													char c_ctgry_indstk,
													char c_exrc_typ,
													long gl_lst_trdd_prc,
													double d_curr_uopn_val,
													long l_spread_qty
												) 
{

  EXEC SQL BEGIN DECLARE SECTION;
  char    c_expry_dt[12];
  long    l_uopnpstn_qty = 0;
  long    l_lst_trd_prc =0;
  double  d_mtm_opn_val =0.0;
  double  d_opnpstn_qty =0.0;
  double  d_opnpstn_qty_org =0.0;  
  sql_cursor    sys_mmcur;
  EXEC SQL END DECLARE SECTION;

  int     i_fn_stts=0;
  long    l_tmp_uopnpstn_qty=0;
  double  d_exectd_mrgn_cmp=0;
  double  d_spread_mrgn_cmp =0;
  double  d_sprd_profit_loss=0;
  double  d_und_opn_pos_val_cmp=0;
  double  d_min_mrgn_prcnt=0;
  double  d_fut_opn_pos_val_cmp=0;
  double  d_min_spread_mrgn=0;
  double  d_mtm_loss=0;
  double  d_base_prc = 0.0;       
  double  d_sp_base_prc = 0.0;   
  double  d_far_mtm_opn_val	=	0.0;    	/*** Initialised in	Ver 1.7	***/
  long int  li_far_opnpstn_qty = 0;			/*** Initialised in Ver 1.7 ***/


  MEMSET(c_expry_dt);

  if( DEBUG_MSG_LVL_3 ) {
  fn_userlog(c_ServiceName,"INSIDE fn_cal_min_mrgn");}

  /*  Function for geting Minimum amd Spread Minimum margin percentages */

  i_fn_stts = fn_get_mm_and_smm	(	c_ServiceName,
																	c_mtch_accnt,
																	c_undrlyng,
																	c_cntrct_tag,
																	&d_min_mrgn_prcnt,
																	&d_min_spread_mrgn,
																	c_prdct_typ,
																	c_xchng_cd
																); 

  if(i_fn_stts== -1)
  {
    return -1;
  }

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog(c_ServiceName,"c_mtch_accnt :%s:",c_mtch_accnt);
		fn_userlog(c_ServiceName,"c_undrlyng :%s:",c_undrlyng);
		fn_userlog(c_ServiceName,"c_cntrct_tag :%c:",c_cntrct_tag);
		fn_userlog(c_ServiceName,"c_prdct_typ :%c:",c_prdct_typ);
		fn_userlog(c_ServiceName,"c_ctgry_indstk :%c:",c_ctgry_indstk);
		fn_userlog(c_ServiceName,"c_exrc_typ :%c:",c_exrc_typ);
		fn_userlog(c_ServiceName,"gl_lst_trdd_prc :%ld:",gl_lst_trdd_prc);
		fn_userlog(c_ServiceName,"d_curr_uopn_val :%lf:",d_curr_uopn_val);
		fn_userlog(c_ServiceName,"l_spread_qty:%ld:",l_spread_qty);
	}

  if( DEBUG_MSG_LVL_5 ) {
  fn_userlog(c_ServiceName,"d_min_mrgn_per is |%lf| and d_min_spread_mrgn is |%lf|",d_min_mrgn_prcnt,d_min_spread_mrgn);}

  EXEC SQL
  	SELECT  fup_uopnpstn_qty
  	into    :l_uopnpstn_qty
  	FROM    fup_fut_undrlyng_pstn
  	WHERE   fup_clm_mtch_accnt = :c_mtch_accnt
  	AND     fup_xchng_cd  = :c_xchng_cd
  	AND     fup_undrlyng  = :c_undrlyng
  	AND     fup_cntrct_tag  = :c_cntrct_tag
  	AND     FUP_PRDCT_TYP = :c_prdct_typ;

  if( SQLCODE != SUCCESS )
  {
  	fn_userlog(c_ServiceName," ERROR AT FETCHING spread_qty and -->ERRMSG IS [%s]",sqlca.sqlerrm.sqlerrmc);
    return  -1;
  }

  if( DEBUG_MSG_LVL_3 )
	{
  	fn_userlog(c_ServiceName," Underlying level open position qty is |%ld|",l_uopnpstn_qty);
  	fn_userlog(c_ServiceName," Spread qty is |%ld|",l_spread_qty);
  	fn_userlog(c_ServiceName," c_ctgry_indstk  is |%c|",c_ctgry_indstk);
		fn_userlog(c_ServiceName," c_mtch_accnt :%s:,c_xchng_cd :%s:,c_prdct_typ :%c:,c_ctgry_indstk:%c:,c_undrlyng:%s:,c_cntrct_tag :%c:",c_mtch_accnt,c_xchng_cd,c_prdct_typ,c_ctgry_indstk,c_undrlyng,c_cntrct_tag);
	}

  EXEC SQL ALLOCATE :sys_mmcur;

  if(l_uopnpstn_qty>0)
  {
    if( DEBUG_MSG_LVL_5 ) {
    fn_userlog(c_ServiceName," BUY POSITION");}

    EXEC SQL  EXECUTE
    BEGIN
    OPEN    :sys_mmcur FOR
    SELECT  ffp_mtm_opn_val,
            ffp_opnpstn_qty,
            FFP_EXPRY_DT
    FROM    ffp_fo_futures_pstn
    WHERE   FFP_CLM_MTCH_ACCNT = :c_mtch_accnt
    AND     FFP_XCHNG_CD       = :c_xchng_cd
    AND     FFP_PRDCT_TYP      = :c_prdct_typ
    AND     FFP_INDSTK         = :c_ctgry_indstk
    AND     FFP_UNDRLYNG       = :c_undrlyng
    AND     FFP_CNTRCT_TAG     =:c_cntrct_tag
    AND     ffp_opnpstn_qty>0
    order by FFP_EXPRY_DT ASC;
    END;
    END-EXEC;
  }
  else if (l_uopnpstn_qty < 0)
  {
    if( DEBUG_MSG_LVL_5 ) {
    fn_userlog(c_ServiceName," SELL POSITION");}

    EXEC SQL  EXECUTE
    BEGIN
    OPEN    :sys_mmcur FOR
    SELECT  ffp_mtm_opn_val,
            ffp_opnpstn_qty,
            FFP_EXPRY_DT
    FROM    ffp_fo_futures_pstn
    WHERE   FFP_CLM_MTCH_ACCNT = :c_mtch_accnt
    AND     FFP_XCHNG_CD       = :c_xchng_cd
    AND     FFP_PRDCT_TYP      = :c_prdct_typ
    AND     FFP_INDSTK         = :c_ctgry_indstk
    AND     FFP_UNDRLYNG       = :c_undrlyng
    AND     FFP_CNTRCT_TAG     =:c_cntrct_tag
    AND     ffp_opnpstn_qty<0
    order by FFP_EXPRY_DT ASC;
    END;
    END-EXEC;
  }
  else
  {
      d_und_opn_pos_val_cmp = 0;
  }

    l_tmp_uopnpstn_qty=l_uopnpstn_qty;

    while(l_tmp_uopnpstn_qty!=0)
    {

    	EXEC SQL FETCH :sys_mmcur
    	into 	:d_mtm_opn_val,
         		:d_opnpstn_qty,
         		:c_expry_dt;

    	if( SQLCODE != SUCCESS )
    	{
      	EXEC SQL CLOSE :sys_mmcur;
				EXEC SQL FREE :sys_mmcur;
      	fn_userlog(c_ServiceName," Error at fetching contract values from cursor -->ERRMSG IS [%s]",sqlca.sqlerrm.sqlerrmc);
      	return  -1;
    	}

    	d_opnpstn_qty_org = d_opnpstn_qty;  

			if( DEBUG_MSG_LVL_3 )
			{
				fn_userlog(c_ServiceName,"d_opnpstn_qty is :%lf:",d_opnpstn_qty);
				fn_userlog(c_ServiceName,"l_tmp_uopnpstn_qty is :%ld:",l_tmp_uopnpstn_qty);
			}

    	if(l_uopnpstn_qty>0)
      	d_opnpstn_qty = fn_mind(d_opnpstn_qty,(double)l_tmp_uopnpstn_qty);
    	else
      	d_opnpstn_qty = fn_maxd(d_opnpstn_qty,(double)l_tmp_uopnpstn_qty);

    	EXEC SQL
      	SELECT decode(:d_opnpstn_qty_org, 0, 0, round(((:d_mtm_opn_val/:d_opnpstn_qty_org)/100),2) )
      	INTO :d_base_prc
      	FROM  dual;

      if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ))
      {
        fn_userlog(c_ServiceName,"Fetch from ftq_fo_trd_qt table failed with [%s]",SQLMSG);
        return(-1);
      }

      if( DEBUG_MSG_LVL_5 )
 			{
      	fn_userlog(c_ServiceName," Normal position");
      	fn_userlog(c_ServiceName," d_mtm_opn_val |%lf|",d_mtm_opn_val);
      	fn_userlog(c_ServiceName," d_opnpstn_qty |%lf|",d_opnpstn_qty);
      	fn_userlog(c_ServiceName," d_base_prc is |%lf|",d_base_prc);
      }

		
    	d_fut_opn_pos_val_cmp = d_opnpstn_qty * d_base_prc * 100;   
    	d_und_opn_pos_val_cmp = d_und_opn_pos_val_cmp + d_fut_opn_pos_val_cmp; 

			if( DEBUG_MSG_LVL_3 )
			{
				fn_userlog(c_ServiceName,"d_fut_opn_pos_val_cmp is :%lf:",d_fut_opn_pos_val_cmp);
				fn_userlog(c_ServiceName,"d_und_opn_pos_val_cmp is :%lf:",d_und_opn_pos_val_cmp);
			}

    	if( DEBUG_MSG_LVL_5 )
 			{
    		fn_userlog(c_ServiceName," d_fut_opn_pos_val_cmp is |%lf|",d_fut_opn_pos_val_cmp);
    		fn_userlog(c_ServiceName," d_und_opn_pos_val_cmp is |%lf|",d_und_opn_pos_val_cmp);
    		fn_userlog(c_ServiceName," d_mtm_opn_val is |%lf|",d_mtm_opn_val);
			}

    l_tmp_uopnpstn_qty= l_tmp_uopnpstn_qty - d_opnpstn_qty;

  }

  d_exectd_mrgn_cmp = d_und_opn_pos_val_cmp * d_min_mrgn_prcnt/100.00;

  if(l_uopnpstn_qty<0)
    d_exectd_mrgn_cmp=d_exectd_mrgn_cmp * (-1);

  if( DEBUG_MSG_LVL_5 ) {
  fn_userlog(c_ServiceName," Underlying unmatched open position value at cmp IS |%lf|",d_und_opn_pos_val_cmp);
  fn_userlog(c_ServiceName," Current Underlying open position value is |%lf|",d_curr_uopn_val);
  fn_userlog(c_ServiceName," Far month contract CMP is |%ld|",gl_lst_trdd_prc);}

  d_sprd_profit_loss=d_und_opn_pos_val_cmp - d_curr_uopn_val;

  if( DEBUG_MSG_LVL_5 )
  {
    fn_userlog(c_ServiceName,"d_sprd_profit_loss :%lf:",d_sprd_profit_loss);
  }

  if((int)l_spread_qty!=0)
  {
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName,"Inside Spread Qty.");
		}

      EXEC SQL
      SELECT  FFP_MTM_OPN_VAL,
              FFP_OPNPSTN_QTY
      INTO    :d_far_mtm_opn_val,
              :li_far_opnpstn_qty
      FROM    FFP_FO_FUTURES_PSTN
      WHERE   FFP_CLM_MTCH_ACCNT = :c_mtch_accnt
      AND     FFP_XCHNG_CD       = :c_xchng_cd
      AND     FFP_PRDCT_TYP      = :c_prdct_typ
      AND     FFP_UNDRLYNG       = :c_undrlyng
      AND     FFP_CNTRCT_TAG     = :c_cntrct_tag
      AND     FFP_EXPRY_DT       =
              ( SELECT  MAX(FFP_EXPRY_DT)
              FROM    FFP_FO_FUTURES_PSTN
              WHERE   FFP_CLM_MTCH_ACCNT = :c_mtch_accnt
              AND     FFP_XCHNG_CD       = :c_xchng_cd
              AND     FFP_PRDCT_TYP      = :c_prdct_typ
              AND     FFP_UNDRLYNG       = :c_undrlyng
              AND     FFP_CNTRCT_TAG     = :c_cntrct_tag
              AND     FFP_OPNPSTN_QTY    != 0 );

    if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
    	fn_userlog(c_ServiceName,"Fetch from ftq_fo_trd_qt table failed with [%s]",SQLMSG);
      return(-1);
    }

    d_sp_base_prc = (d_far_mtm_opn_val / li_far_opnpstn_qty) ;

    if( DEBUG_MSG_LVL_5 ) {
    fn_userlog(c_ServiceName,"spread position");
    fn_userlog(c_ServiceName,"d_far_mtm_opn_val :%lf:",d_far_mtm_opn_val);
    fn_userlog(c_ServiceName,"li_far_opnpstn_qty :%ld:",li_far_opnpstn_qty);
    fn_userlog(c_ServiceName,"d_sp_base_prc :%lf:",d_sp_base_prc);
    }


   	d_spread_mrgn_cmp= ((double)l_spread_qty * d_sp_base_prc * (d_min_spread_mrgn / 100.00)) ;

  }
  else
  {
    d_spread_mrgn_cmp=0;
  }

  if( DEBUG_MSG_LVL_5 ) {
  fn_userlog(c_ServiceName," Executed Margin is |%lf|",d_exectd_mrgn_cmp);
  fn_userlog(c_ServiceName," Spread  Margin is |%lf|",d_spread_mrgn_cmp);
  fn_userlog(c_ServiceName," Spread profit loss is |%lf|",d_sprd_profit_loss);}

  if( DEBUG_MSG_LVL_3 ) {
  fn_userlog(c_ServiceName,"EXITING fn_cal_min_mrgn");
  }

  /*  Minimum margin=Executed margin + spread margin - spread profit loss */
  /* Return 0 if Minimum margin is negative*/

    EXEC SQL CLOSE :sys_mmcur;
    EXEC SQL FREE :sys_mmcur;

		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName,"d_exectd_mrgn_cmp is :%lf:",d_exectd_mrgn_cmp);
			fn_userlog(c_ServiceName,"d_spread_mrgn_cmp is :%lf:",d_spread_mrgn_cmp);
			fn_userlog(c_ServiceName,"d_sprd_profit_loss is :%lf:",d_sprd_profit_loss);
		}

  if ( d_spread_mrgn_cmp + d_exectd_mrgn_cmp <= d_sprd_profit_loss )
       return (0);
  else
  return (d_exectd_mrgn_cmp + d_spread_mrgn_cmp - d_sprd_profit_loss);
}

/*********************************************************************
Function: fn_get_mm_and_smm

Description: This function fetches the  minimum margin and spread minimum
             margin percentages for a  particular Match a/c ,Underlying
             and contract tag considering split case also.

Input Parameters: Service name,accnt,undrlyng,contract tag, minimum margin,
                  spread minimum margin percentages and product type.

Output Parameters: SUCCESS/FAIL(0/-1)

Called by: fn_cal_min_mrgn

Calling Programs/Sub-routines : None

Author : Wipro Infotech

Created On: 18-Aug-2008

Modification History:
Date       Version No.    Modified by   Modification Description

18-Aug-08  Initial        Wipro         Available Margin CR changes

To Do/ Fix Me list:

*********************************************************************/

int fn_get_mm_and_smm(char *c_ServiceName,char *c_mtch_accnt,char *c_undrlyng,char c_cntrct_tag,double *d_min_mrgn_prcnt,double *d_min_sprd_mrgn_prcnt,char c_prdct_typ,char *c_xchng_cd)
{
  EXEC SQL BEGIN DECLARE SECTION;
    long  l_basket_id;
  EXEC SQL END DECLARE SECTION;

  char c_fut_prd_typ = 'F';   /*** Ver 1.8 ***/
  
  /** contract tag A is reserved for near month contract in split **/
  /**                 which attracts 100 % margin                 **/

  if( DEBUG_MSG_LVL_3 ) {
  fn_userlog(c_ServiceName," INSIDE fn_get_mm_and_smm");
  fn_userlog(c_ServiceName," c_xchng_cd = :%s:", c_xchng_cd);}

  if(c_cntrct_tag=='A')
  {
    *d_min_mrgn_prcnt=100.00;
    *d_min_sprd_mrgn_prcnt=100.00;
    return SUCCESS;
  }

  EXEC SQL
  SELECT  fcb_undrlyng_bskt_id
  INTO  :l_basket_id
  FROM  fcb_fo_cln_bskt_alltd
  WHERE fcb_cln_lvl = ( SELECT clm_clnt_lvl
        FROM  clm_clnt_mstr
        WHERE clm_mtch_accnt =:c_mtch_accnt );
  if ( SQLCODE != SUCCESS )
  {
    fn_userlog(c_ServiceName,"Error at Fetching basket id in fn_get_mm_and_smm function");
    return -1;
  }

  EXEC SQL
  SELECT  decode(:c_prdct_typ,'P', fmm_thrshd_mrgn_prcnt*fmm_fp_multplr,fmm_min_mrgn_prcnt), 
          fmm_min_spread_mrgn
  INTO    :d_min_mrgn_prcnt,
          :d_min_sprd_mrgn_prcnt
  FROM    fmm_fo_mrgn_mstr
  WHERE   fmm_undrlyng_bskt_id=:l_basket_id
  /*** AND     fmm_prdct_typ=decode(:c_prdct_typ,'P','F','F')  *** Commented in Ver 1.8 ***/
  AND     fmm_prdct_typ= :c_fut_prd_typ     /*** Ver 1.8 ***/
  AND     fmm_undrlyng= :c_undrlyng
  AND     fmm_xchng_cd= :c_xchng_cd;  

  if ( SQLCODE != SUCCESS )
  {
    fn_userlog(c_ServiceName,"Error at Fetching margin percerentages in fn_get_mm_and_smm");
    return -1;
  }

  if( DEBUG_MSG_LVL_5 ) {
  fn_userlog(c_ServiceName,"Margin values" );
  fn_userlog(c_ServiceName,"Minimum margin :%lf:",*d_min_mrgn_prcnt);
  fn_userlog(c_ServiceName,"Min Spread Mrgn:%lf:",*d_min_sprd_mrgn_prcnt);
  fn_userlog(c_ServiceName,"EXITING fn_get_mm_and_smm ");}
  return SUCCESS;
}


/*********************************************************************
Function: fn_cal_mtm_loss

Description: FUNCTION calculates MTM loss of underlying at group level.

Input Parameters: Service name,Match accnt,undrlyng,contract tag,
                  Exchange code,product type,category stock indicator,
                  Exercise type and MTM loss.

Output Parameters: SUCCESS/FAIL(0/-1)

Called by: SFO_CNTFUT_PSTN

Calling Programs/Sub-routines : None

Author : Wipro Infotech

Created On: 18-Aug-2008

Modification History:
Date       Version No.    Modified by   Modification Description

18-Aug-08  Initial        Wipro         Available Margin CR changes

To Do/ Fix Me list:

*********************************************************************/


int fn_cal_mtm_loss(char *c_ServiceName,char *c_mtch_accnt,char *c_undrlyng,char c_cntrct_tag,char *c_xchng_cd,char c_prdct_typ,char c_ctgry_indstk,char c_exrc_typ,double *d_mtm_loss)
{

  char c_fut_prd_typ = 'F';  /*** Ver 1.8 ***/

  EXEC SQL
  DECLARE cntrcts_dtls
  CURSOR  For
  SELECT  to_char( ffp_expry_dt, 'DD-Mon-YYYY' ),
      nvl(ffp_opnpstn_qty,0),
      ffp_mtm_opn_val
  FROM    ffp_fo_futures_pstn
  WHERE ffp_clm_mtch_accnt = :c_mtch_accnt
  AND     ffp_xchng_cd  = :c_xchng_cd
  AND     ffp_undrlyng  =  :c_undrlyng
  AND     ffp_cntrct_tag  = :c_cntrct_tag
  AND   ffp_prdct_typ = :c_prdct_typ
  AND   ffp_opnpstn_qty !=0
  ORDER BY  ffp_clm_mtch_accnt,
        ffp_undrlyng,
        ffp_cntrct_tag,
        ffp_expry_dt;

  EXEC SQL BEGIN DECLARE SECTION;
  char  c_expry_dt[12];
  long  l_lst_trd_prc=0;
  long  l_opnpstn_qty=0;
  double  d_mtm_opn_val=0;
  EXEC SQL END DECLARE SECTION;

  double  d_mtm_opn_val_cmp=0;

  if( DEBUG_MSG_LVL_5 ) {
  fn_userlog(c_ServiceName,"INSIDE fn_cal_mtm_loss");
  fn_userlog(c_ServiceName,"fn_cal_mtm_loss -->c_mtch_accnt is |%s|",c_mtch_accnt);
  fn_userlog(c_ServiceName,"fn_cal_mtm_loss -->c_xchng_cd is |%s|",c_xchng_cd);
  fn_userlog(c_ServiceName,"fn_cal_mtm_loss -->c_undrlyng is |%s|",c_undrlyng);
  fn_userlog(c_ServiceName,"fn_cal_mtm_loss -->c_cntrct_tag is |%c| and c_prdct_typ is |%c|",c_cntrct_tag,c_prdct_typ);}

  MEMSET(c_expry_dt);

  EXEC SQL
  OPEN cntrcts_dtls;
  if ( SQLCODE != SUCCESS )
  {
  fn_userlog(c_ServiceName,"fn_cal_mtm_loss --> Cursor open failed with |%s|",sqlca.sqlerrm.sqlerrmc);
  return(-1);
  }

  while(1)
  {
    EXEC SQL
    FETCH cntrcts_dtls
    INTO  :c_expry_dt,
        :l_opnpstn_qty,
        :d_mtm_opn_val;
    if(SQLCODE != SUCCESS )
    {
      if(SQLCODE == 1403 )
      {
        break;
      }
      EXEC SQL CLOSE cntrcts_dtls;
      fn_userlog(c_ServiceName,"fn_cal_mtm_loss --> error at Fetching values from cursor and error message is |%s|",sqlca.sqlerrm.sqlerrmc);
      return -1;
    }
    if( DEBUG_MSG_LVL_5 ) {
    fn_userlog(c_ServiceName,"fn_cal_mtm_loss --> Fetching LTP");}

    /*Fetching L.T.P*/
    EXEC SQL
    SELECT  nvl(FTQ_LST_TRD_PRC,0)
    INTO  :l_lst_trd_prc
    FROM  ftq_fo_trd_qt
    WHERE FTQ_XCHNG_CD  =:c_xchng_cd
    /*** AND   FTQ_PRDCT_TYP =decode(:c_prdct_typ,'P','F','F')  *** Commented in Ver 1.8 ***/
    AND   FTQ_PRDCT_TYP = :c_fut_prd_typ     /*** Ver 1.8 ***/
    /** AND   trim(FTQ_UNDRLYNG)  =:c_undrlyng ** 3.6 **/
    AND   FTQ_UNDRLYNG  =:c_undrlyng   /** trim Remove in Ver 3.6 **/
    AND   to_char( FTQ_EXPRY_DT,'DD-Mon-YYYY' )=:c_expry_dt
    AND   FTQ_INDSTK    =:c_ctgry_indstk
    AND   FTQ_EXER_TYP  =:c_exrc_typ;
    if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ))
    {
      if(DEBUG_MSG_LVL_3)
      fn_userlog(c_ServiceName,"Fetch from ftq_fo_trd_qt table failed with [%s]",SQLMSG);
        EXEC SQL CLOSE cntrcts_dtls;
        return(-1);
    }
    else if ( SQLCODE == NO_DATA_FOUND )
    {
     l_lst_trd_prc = 0;
     fn_userlog(c_ServiceName,"LTP ==== 0");
    }

    d_mtm_opn_val_cmp=((double)l_opnpstn_qty * (double)l_lst_trd_prc);
    if( DEBUG_MSG_LVL_5 ) {
  fn_userlog(c_ServiceName,"fn_cal_mtm_loss -->d_mtm_opn_val is |%lf| and same value at CMP is |%lf| ",d_mtm_opn_val,d_mtm_opn_val_cmp);}

    /*  MTM Loss is =DB value - C.M.P value */
    *d_mtm_loss=*d_mtm_loss +(d_mtm_opn_val-d_mtm_opn_val_cmp);
    if( DEBUG_MSG_LVL_5 ) {
    fn_userlog(c_ServiceName,"fn_cal_mtm_loss --> LTP |%ld| for |%s|",l_lst_trd_prc,c_expry_dt);}

  }
  if( DEBUG_MSG_LVL_5 ) {
  fn_userlog(c_ServiceName,"fn_cal_mtm_loss -->Original MTM Profit/Loss calculated is |%lf|",*d_mtm_loss);}

  if ( *d_mtm_loss <= 0 )
  *d_mtm_loss = 0; /*send only loss to calling function*/

  if( DEBUG_MSG_LVL_5 ) {
  fn_userlog(c_ServiceName,"In function, MTM loss is |%lf|",*d_mtm_loss);
  fn_userlog(c_ServiceName,"EXITING fn_cal_mtm_loss");}

  EXEC SQL CLOSE cntrcts_dtls;

  return 0;
}
	
void print_qry(char * str, int i_cnt,char * c_ServiceName)
{
  int idx;
  char c_tmp_str1[100];

  MEMSET(c_tmp_str1);

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Printing query");
  }

  for (idx = 0;idx < i_cnt; idx += 60)
  {
    strncpy(c_tmp_str1,str + idx,60);
		
		if( DEBUG_MSG_LVL_5 )
		{
    	fn_userlog(c_ServiceName,"%s",c_tmp_str1);
		}
  }

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Finished printing query");
  }
}
