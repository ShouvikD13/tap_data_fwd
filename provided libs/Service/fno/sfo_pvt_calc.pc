/*************************************************************************************************/
/*  Program           : SFO_PVT_CALC                                                             */
/*                                                                                               */
/*  Input             : FFO_UNDRLYNG                                                             */
/*                      FFO_RQST_TYP                                                             */
/*                      FFO_XCHNG_CD                                                             */
/*                      FFO_PRDCT_TYP                                                            */
/*                      FFO_EXPRY_DT                                                             */
/*                      FFO_EXER_TYP                                                             */
/*                      FFO_OPT_TYP                                                              */
/*                      FFO_STRK_PRC                                                             */
/*                                                                                               */
/*                                                                                               */
/*                                                                                               */
/*  Output            : FFO_ERR_MSG                                                              */
/*                      FFO_BASE_ORD_VAL  - Support value1     - Pivot/ Value1 - Fibonacci       */
/*                      FFO_EXBUY_ORD_VL  - Support value2     - Pivot/ Value2 - Fibonacci       */
/*                      FFO_EXSELL_ORD_VL - Support value3     - Pivot/ Value3 - Fibonacci       */
/*                      FFO_INTRST_RT     - Pivot value        - Pivot/ Value4 - Fibonacci       */
/*                      FFO_LIMIT         - Resistance value1  - Pivot/ Value5 - Fibonacci       */
/*                      FFO_BAL_AMT       - Resistance value2  - Pivot/ Value6 - Fibonacci       */
/*                                                                                               */
/*  Description       : This service will calculate the pivot as well as resistance and support  */
/*                      values or will provide the set of values in case of fibonacci calculation*/
/*                                                                                               */
/*  Log               : 1.0 11-Apr-2012   Gaurav Chauhan                                         */
/*************************************************************************************************/
/* 1.0  -  New Release                                                                           */
/* 1.1  -  View to FML Changes ( Sachin Birje )                                                  */
/*************************************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <sqlca.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fn_getref.h>
#include <userlog.h>              /* TUXEDO Header File       */
#include <fml32.h>                /* TUXEDO Header File       */
#include <Usysflds.h>             /* TUXEDO Field Definitions */
#include <fml_def.h>              /* User defined h files     */
#include <fo_fml_def.h>           /* User defined h files     */
/** #include <fo_view_def.h> ** Ver 1.1 **/         /* User defined h files     */
#include <fn_read_debug_lvl.h>    /* User defined h files     */
#include <eba.h>                  /* User defined h files     */

#define TOTAL_FML 8
 
char  c_errmsg[256];

FBFR32 *ptr_fml_Ibuffer;
FBFR32 *ptr_fml_Obuffer;

void SFO_PVT_CALC ( TPSVCINFO *rqst )
{
  int i=0;
  int i_err[TOTAL_FML];
  int i_ferr[TOTAL_FML];
  int i_err_flg; 

  double d_support1 = 0.0;
  double d_support2 = 0.0;
  double d_pivot = 0.0;
  double d_resistance1 = 0.0;
  double d_resistance2 = 0.0;
  double d_fibo1 = 0.0;
  double d_fibo2 = 0.0;
  double d_fibo3 = 0.0;
  double d_fibo4 = 0.0;
  double d_fibo5 = 0.0;
  double d_fibo6 = 0.0;

  char  c_ServiceName[33];
  char  c_xchng_cd[4];
  char  c_undrlyng[8];
  char  c_flag;
  char  c_prd_typ;
  char  c_expry_dt[12];
  char  c_exrc_typ;
  char  c_opt_typ;
  long  l_strike_prc;

  strcpy(c_ServiceName,"SFO_PVT_CALC");
  INITDBGLVL(c_ServiceName);

  
  ptr_fml_Ibuffer = (FBFR32*)rqst->data;
  ptr_fml_Obuffer = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  if(ptr_fml_Obuffer == NULL)
  {
    errlog(c_ServiceName,"S31005",TPMSG,(char*)DEF_USR,DEF_SSSN,c_errmsg);
    Fadd32(ptr_fml_Ibuffer,FFO_ERR_MSG,(char*)c_errmsg,0);
    tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0, 0);
  }
  
  INIT(i_err,TOTAL_FML);
  /************* Get Input parameters ********/
  i_err[0] = Fget32(ptr_fml_Ibuffer,FFO_XCHNG_CD, 0, (char *)c_xchng_cd,    0);
  i_err[1] = Fget32(ptr_fml_Ibuffer,FFO_UNDRLYNG, 0, (char *)c_undrlyng,    0);
  i_err[2] = Fget32(ptr_fml_Ibuffer,FFO_RQST_TYP, 0, (char *)&c_flag   ,    0);
  i_err[3] = Fget32(ptr_fml_Ibuffer,FFO_PRDCT_TYP,0, (char *)&c_prd_typ,    0);
  i_err[4] = Fget32(ptr_fml_Ibuffer,FFO_EXPRY_DT, 0, (char *)c_expry_dt,    0);
  i_err[5] = Fget32(ptr_fml_Ibuffer,FFO_EXER_TYP, 0, (char *)&c_exrc_typ,   0);
  i_err[6] = Fget32(ptr_fml_Ibuffer,FFO_OPT_TYP,  0, (char *)&c_opt_typ,    0);
  i_err[7] = Fget32(ptr_fml_Ibuffer,FFO_STRK_PRC, 0, (char *)&l_strike_prc, 0);

  for( i = 0 ; i < TOTAL_FML ; i++ )
  {
    if(i_err[i] == -1)
    {
      userlog("%d",i);
      errlog(c_ServiceName,"S31010",FMLMSG,(char*)DEF_USR,DEF_SSSN,c_errmsg);
      Fadd32(ptr_fml_Ibuffer,FFO_ERR_MSG,(char*)c_errmsg,0);
      tpfree((char*)ptr_fml_Obuffer);
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0, 0);

    }
  }

  INIT(i_err,TOTAL_FML);

  if(DEBUG_MSG_LVL_3)
  {
    userlog("Underlying is :%s:",c_undrlyng);
    userlog("Exchange Code is :%s:",c_xchng_cd);
    userlog("Request Type  :%c:",c_flag);
    userlog("Product Type  :%c:",c_prd_typ);
    userlog("Expiry date   :%s:",c_expry_dt);
    userlog("Exercise Type :%c:",c_exrc_typ);
    userlog("Option Type   :%c:",c_opt_typ);
    userlog("Strike Price  :%ld:",l_strike_prc);
  }

  if ( (c_flag != 'F') && (c_flag != 'P'))
  {
    userlog("Please provide the valid option");
    errlog(c_ServiceName,"S31015",FMLMSG,(char*)DEF_USR,DEF_SSSN,c_errmsg);
    Fadd32(ptr_fml_Ibuffer,FFO_ERR_MSG,(char*)c_errmsg,0);
    tpfree((char*)ptr_fml_Obuffer);
    tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0, 0);
  }

  if ( c_flag == 'P' )
  {
    EXEC SQL EXECUTE
             BEGIN
                FO_PIVOT_CALCULATION(:c_undrlyng,
                :c_xchng_cd,
                :c_prd_typ,
                :c_expry_dt,
                :c_exrc_typ,
                :c_opt_typ,
                :l_strike_prc,
                :d_pivot,
                :d_resistance1,
                :d_resistance2,
                :d_support1,
                :d_support2,
                :i_err_flg,
                :c_errmsg
               );
            END;
    END-EXEC;
    
    if(((SQLCODE != 0) || (i_err_flg == -1)) && (SQLCODE != NULL_RETURN))
    {
      userlog("Stored procedure not executed successfully...");
      errlog(c_ServiceName, "S31020", SQLMSG, DEF_USR, DEF_SSSN, c_errmsg);
      Fadd32(ptr_fml_Ibuffer,FFO_ERR_MSG,(char*)c_errmsg,0);
      tpfree((char*)ptr_fml_Obuffer);
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0, 0);
    }
    
 
    if(DEBUG_MSG_LVL_3)
    {
      userlog("d_support1 :%lf:",d_support1);
      userlog("d_support2 :%lf:",d_support2);
      userlog("d_pivot :%lf:",d_pivot);
      userlog("d_resistance1 :%lf:",d_resistance1);
      userlog("d_resistance2 :%lf:",d_resistance2);
    }

    i_err[0] = Fadd32(ptr_fml_Obuffer,FFO_BASE_ORD_VAL,(char*)&d_support1,0);
    i_err[1] = Fadd32(ptr_fml_Obuffer,FFO_EXBUY_ORD_VL,(char*)&d_support2,0);
    i_err[2] = Fadd32(ptr_fml_Obuffer,FFO_EXSELL_ORD_VL,(char*)&d_pivot,0);
    i_err[3] = Fadd32(ptr_fml_Obuffer,FFO_INTRST_RT,(char*)&d_resistance1,0);
    i_err[4] = Fadd32(ptr_fml_Obuffer,FFO_LIMIT,(char*)&d_resistance2,0);


    for ( i = 0 ; i <= 4 ; i++ )
    {
      if(i_err[0] ==  -1 || i_err[1] == -1 )
      {
        userlog("Value of i is :%d:",i);
        errlog(c_ServiceName,"S31025",FMLMSG,(char*)DEF_USR,DEF_SSSN,c_errmsg);
        Fadd32(ptr_fml_Ibuffer,FFO_ERR_MSG,(char*)c_errmsg,0);
        tpfree((char*)ptr_fml_Obuffer);
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0, 0);
      }
    }
    tpreturn(TPSUCCESS, 0L, (char *)ptr_fml_Obuffer, 0, 0);
  }
  else
  {
    EXEC SQL EXECUTE
             BEGIN
                FO_FIBONACCI_CALCULATOR(:c_undrlyng,
                :c_xchng_cd,
                :c_prd_typ,
                :c_expry_dt,
                :c_exrc_typ,
                :c_opt_typ,
                :l_strike_prc,
                :d_fibo1,
                :d_fibo2,
                :d_fibo3,
                :d_fibo4,
                :d_fibo5,
                :d_fibo6,
                :i_err_flg,
                :c_errmsg
               );
            END;
    END-EXEC;

    if(((SQLCODE != 0) || (i_err_flg == -1)) && (SQLCODE != NULL_RETURN))
    {
      userlog("Stored procedure not executed successfully...");
      errlog(c_ServiceName, "S31030", SQLMSG, DEF_USR, DEF_SSSN, c_errmsg);
      Fadd32(ptr_fml_Ibuffer,FFO_ERR_MSG,(char*)c_errmsg,0);
      tpfree((char*)ptr_fml_Obuffer);
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0, 0);
    }

    if(DEBUG_MSG_LVL_3)
    {
      userlog("d_fibo1 :%lf:",d_fibo1);
      userlog("d_fibo2 :%lf:",d_fibo2);
      userlog("d_fibo3 :%lf:",d_fibo3);
      userlog("d_fibo4 :%lf:",d_fibo4);
      userlog("d_fibo5 :%lf:",d_fibo5);
      userlog("d_fibo6 :%lf:",d_fibo6);
    }

    i_err[0] = Fadd32(ptr_fml_Obuffer,FFO_BASE_ORD_VAL,(char*)&d_fibo1,0);
    i_err[1] = Fadd32(ptr_fml_Obuffer,FFO_EXBUY_ORD_VL,(char*)&d_fibo2,0);
    i_err[2] = Fadd32(ptr_fml_Obuffer,FFO_EXSELL_ORD_VL,(char*)&d_fibo3,0);
    i_err[3] = Fadd32(ptr_fml_Obuffer,FFO_INTRST_RT,(char*)&d_fibo4,0);
    i_err[4] = Fadd32(ptr_fml_Obuffer,FFO_LIMIT,(char*)&d_fibo5,0);
    i_err[5] = Fadd32(ptr_fml_Obuffer,FFO_BAL_AMT,(char*)&d_fibo6,0);

    for ( i = 0 ; i <= 5 ; i++ )
    {
      if(i_err[0] ==  -1 || i_err[1] == -1 )
      {
        userlog("Value of i is :%d:",i);
        errlog(c_ServiceName,"S31035",FMLMSG,(char*)DEF_USR,DEF_SSSN,c_errmsg);
        Fadd32(ptr_fml_Ibuffer,FFO_ERR_MSG,(char*)c_errmsg,0);
        tpfree((char*)ptr_fml_Obuffer);
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0, 0);
      }
    }
    tpreturn(TPSUCCESS, 0L, (char *)ptr_fml_Obuffer, 0, 0);
  }
}

