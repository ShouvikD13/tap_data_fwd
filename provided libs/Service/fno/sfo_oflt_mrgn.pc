/******************************************************************************/
/*  Program           : SFO_OFLT_MRGN                                         */
/*                                                                            */
/*  Input             : contract descriptor                                   */
/*                    : LTP                                                   */
/*                    : MIN lot qty                                           */
/*                                                                            */
/*                                                                            */
/*  Output            : SPAN MARGIN PER LOT                                   */
/*                                                                            */
/*  Description       : Returns span margin for input contracts               */
/*                                                                            */
/*                                                                            */
/*  Initial Version   : 01-OCT-2020 (Suchita Dabir)                           */
/*  Ver 1.1           : 10-Mar-2022 (NAveena)                                 */
/*  Ver 1.2           : 20-Jul-2022 (Sachin Birje)SPAN_BOD_MRGN_CR-ISEC14-172812*/
/******************************************************************************/

/** VER TOL : TUX on LINUX -- (Ravindra) *
	Replaced 'NULL' with 'ERR_BFR' in all error handling tpreturn statements. **/ 

#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <cod.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fn_read_debug_lvl.h>
#include <fn_span_lib.h>
#include <stdlib.h>
#include <stdio.h>
#include <fml_rout.h>
#include <fn_session.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fml_mf.h>

void SFO_OFLT_MRGN( TPSVCINFO *rqst )
{
 
  FBFR32 *ptr_fml_Ibuf = NULL;

  char c_tag[30]="\0";
	FBFR32 *ptr_fml_obuf;
	FBFR32 *ptr_fml_iibuf;
  char c_prdct_typ = 'O';
	char c_xchng_code[5]="\0";
  char c_indxstk='\0';
  char c_underlyng[20]="\0";
  char c_expry_typ[20]="\0";
  char c_exer_typ='\0';
  char c_opt_typ='\0';
  long l_strike_prc=0;
  long l_min_lot_qty=0;
  double  d_ltp=0.0;

  char c_cln_mtch_accnt[30]="\0";
	char c_inp_strng1[ 8000 ]="\0";
  char c_inp_strng11[ 8000 ]="\0";
  char c_inp_strng2[ 8000 ]="\0";
  char c_inp_strng22[ 8000 ]="\0";
  char c_inp_strng[ 16000 ]="\0";
  char c_op_strng[ 16000 ]="\0";
  char c_op_strng1[ 16000 ]="\0";
  char c_op_strng2[ 16000 ]="\0";
  char c_seq_num1[12000]="\0";
  char c_seq_num2[12000]="\0";
  char c_max_opn_qty[200]="\0";
  char c_min_opn_qty[200]="\0";
  char c_ltp[2000]="\0";
  char c_strk_prc[20]="\0";
  char c_pipe_id[3]="11";

	long  l_prtfl_seq1  = 0;
  long  l_prtfl_seq2  = 0;
	long  l_length1     = 0;
  long  l_length2     = 0;
	int i_rtrn_cd1 = 0;

	char c_ServiceName[30]="\0";
	char c_err_msg[30]="\0";
	int i_returncode = 0;
	char c_msg[350]="\0";
	int i_trnsctn = 0;
	double d_strike_prc=0.0;
	long l_max_opn_qty=0;
	long l_min_opn_qty=0;
	char c_prd_typ='\0';
	long li_len_tobuf=0;

  double d_uspan_nenov_mrgn  = 0.0;
  double d_net_optn_val = 0.0;
  double  d_uspan_wenov_mrgn = 0.0;

	char c_mrgn_indctr[3]="\0";
	double d_spn_mrgn1    = 0.0;
  double d_spn_mrgn2    = 0.0;
  double d_nov1         = 0.0;
  double d_nov2         = 0.0;
  double d_nov          = 0.0;
  double d_total_mrgn1  = 0.0;
  double d_total_mrgn2  = 0.0;
  double d_total_mrgn   = 0.0;

  /*** Ver 1.2  Starts Here ***/
  int    i_ret_val=0;
  int    i_cntrct_cnt=0;
  double d_spn_bmrgn1=0;
  double d_bnov1=0;
  double d_total_bmrgn1=0;

  double d_spn_bmrgn2=0;
  double d_bnov2=0;
  double d_total_bmrgn2=0;

  double d_spn_bmrgn=0;
  double d_bnov=0;
  double d_total_bmrgn=0;
  /*** Ver 1.2  Ends here ***/

  char c_opseq_num1[20];
  char c_opseq_num2[20];
  char c_mtch_accnt1[11];
  char c_mtch_accnt2[11];
  char c_spn_mrgn1[20];
  char c_spn_mrgn2[20];
  char c_nov1[20];
  char c_nov2[20];
  char c_total_mrgn1[20];
  char c_total_mrgn2[20];
  char c_expry_dt[10]="\0";
  char *null_ptr  = 0;
  char c_xchng_cd1[4]="\0";       
  char c_xchng_cd2[4]="\0";        
  char c_inp_exch_cd[4]="\0";
  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );


	EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;
    varchar c_stock_cd [20];  
  EXEC SQL END DECLARE SECTION;

	MEMSET(c_stock_cd);
 
  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                    c_err_msg,
                                    ptr_fml_Ibuf,
                                    11,
                              FFO_XCHNG_CD, (char *)c_xchng_code,NULL,
                              FFO_PRDCT_TYP,(char *)&c_prdct_typ,NULL,
                              FFO_INDX_INDCTR,(char *)&c_indxstk,NULL,
                              FFO_UNDRLYNG,(char *)c_underlyng,NULL,
                              FFO_EXPRY_DT,(char *)c_expry_typ,NULL,
                              FFO_EXER_TYP,(char *)&c_exer_typ,NULL,
                              FFO_OPT_TYP,(char *)&c_opt_typ,NULL,
                              FFO_STRK_PRC,(char *)&l_strike_prc,NULL,
                              FFO_MIN_LOT_QTY,(char *)&l_min_lot_qty,NULL,
                              FFO_CHNG_OI,(char *)&d_ltp,NULL,
                              FFO_BAT_TAG, ( char * )c_tag, NULL);


  if( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    MEMSET(c_msg);
    sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
    fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);   
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  rtrim(c_xchng_code);
  rtrim(c_underlyng);
  rtrim(c_expry_typ);

  /** strcpy(c_cln_mtch_accnt,"8542333333"); ***/
  strcpy(c_cln_mtch_accnt,"8500000009");
  rtrim(c_cln_mtch_accnt);

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", LIBMSG, c_err_msg  );
    MEMSET(c_msg);
    sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
    fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


  ptr_fml_obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if ( ptr_fml_obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg  );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    MEMSET(c_msg);
    sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
    fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  ptr_fml_iibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN*10);

  if ( ptr_fml_iibuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg  );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    MEMSET(c_msg);
    sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
    fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpfree((char *)ptr_fml_obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  MEMSET(c_inp_strng);    
  MEMSET(c_inp_strng11);  
  MEMSET(c_inp_strng1);   
  MEMSET(c_inp_strng2);   
  MEMSET(c_inp_strng22);  

	/** step 1 **/
  strcpy(c_inp_strng1,"1^");
  strcpy(c_inp_strng2,"|");

  if(strcmp(c_xchng_code,"NFO") == 0)
  {
    strcat(c_inp_strng1,"NSE^");
  }
  else if( strcmp(c_xchng_code,"BFO")== 0)
  {
    strcat(c_inp_strng1,"BSE^");
  }

  EXEC  SQL
    SELECT  SPN_PRTFL1_SEQ.nextval
    INTO    :l_prtfl_seq1
    FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31025",SQLMSG, c_err_msg);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    MEMSET(c_msg);
    sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
    fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpfree((char *)ptr_fml_iibuf);
    tpfree((char *)ptr_fml_obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  EXEC  SQL
    SELECT  SPN_PRTFL1_SEQ.nextval
    INTO    :l_prtfl_seq2
    FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31030",SQLMSG, c_err_msg);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    MEMSET(c_msg);
    sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
    fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpfree((char *)ptr_fml_iibuf);
    tpfree((char *)ptr_fml_obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  sprintf(c_seq_num1,"%ld",l_prtfl_seq1);
  sprintf(c_seq_num2,"%ld",l_prtfl_seq2);

  strcat( c_inp_strng1 , c_seq_num1 );
  strcat( c_inp_strng2 , c_seq_num2 );

  strcat(c_inp_strng1,"^");
  strcat(c_inp_strng2,"^");


  sprintf( c_msg, "Processing for underlying :%s:",c_underlyng );

  EXEC SQL
        SELECT  SEM_MAP_VL
        INTO    :c_stock_cd
        FROM    SEM_STCK_MAP
        WHERE   SEM_STCK_CD = :c_underlyng
        AND     SEM_ENTTY   = DECODE(:c_xchng_code,'NFO',3,'BFO',14); 

  if(SQLCODE != 0 )
  {
   fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg );
   fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   MEMSET(c_msg);
   sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
   fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
   fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
   tpfree((char *)ptr_fml_iibuf);
   tpfree((char *)ptr_fml_obuf);
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  } 

  rtrim(c_expry_typ);
  rtrim(c_stock_cd.arr);

   EXEC SQL
    SELECT to_char(to_date(:c_expry_typ,'DD-Mon-YYYY'),'dd-Mon-YY')
    INTO  :c_expry_dt
    FROM  DUAL;

  if(SQLCODE != 0 )
  {
   fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg );
   fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   MEMSET(c_msg);
   sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
   fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
   fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
   tpfree((char *)ptr_fml_iibuf);
   tpfree((char *)ptr_fml_obuf);
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  d_strike_prc  = (double) l_strike_prc/ 100.00  ;
  sprintf(c_strk_prc,"%lf",d_strike_prc);

  l_max_opn_qty = (-1)*l_min_lot_qty;
  l_min_opn_qty = (-1)*l_min_lot_qty;

  fn_spn_rtrim(c_strk_prc,'0');
  fn_spn_rtrim(c_strk_prc,'.');

  rtrim(c_expry_typ);
  rtrim(c_underlyng);

	if(c_prdct_typ == 'F') /*** If loop added in Ver 1.1 ***/
	{
		   sprintf(c_inp_strng11,"%s^%s~%c:%s^%ld^%lf",c_cln_mtch_accnt,c_stock_cd.arr,c_prdct_typ,c_expry_dt,l_max_opn_qty,d_ltp);

   strcat(c_inp_strng1,c_inp_strng11);

   sprintf(c_inp_strng22,"%s^%s~%c:%s^%ld^%lf",c_cln_mtch_accnt,c_stock_cd.arr,c_prdct_typ,c_expry_dt,l_min_opn_qty,d_ltp);
	}
	else /*** Else condition added in Ver 1.1 ***/
	{
   sprintf(c_inp_strng11,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",c_cln_mtch_accnt,c_stock_cd.arr,c_prdct_typ,c_expry_dt,c_opt_typ,c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp);

   strcat(c_inp_strng1,c_inp_strng11);

   sprintf(c_inp_strng22,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",c_cln_mtch_accnt,c_stock_cd.arr,c_prdct_typ,c_expry_dt,c_opt_typ,c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp);
	}

   strcat(c_inp_strng2,c_inp_strng22);

   strcat(c_inp_strng1,",");
   strcat(c_inp_strng2,",");

  l_length1 = strlen(c_inp_strng1);

  if( c_inp_strng1[l_length1  - 1 ] == ',')
  {
    c_inp_strng1[l_length1 -1]  ='\0';
  }

  l_length2 = strlen(c_inp_strng2);

  if( c_inp_strng2[l_length2  - 1 ] == ',')
  {
    c_inp_strng2[l_length2 -1]  ='\0';
  }
  MEMSET(c_inp_strng);
  strcpy(c_inp_strng,c_inp_strng1);
  strcat(c_inp_strng,c_inp_strng2);
  strcat(c_inp_strng,"\n");

  fn_userlog(c_ServiceName,"c_inp_strng 1 = :%s:",c_inp_strng);

  if ( Fadd32 (ptr_fml_iibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)  ==  -1 )
  {
      fn_errlog( c_ServiceName, "S31045",FMLMSG , c_err_msg );
		  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      MEMSET(c_msg);
      sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      tpfree((char *)ptr_fml_iibuf);
      tpfree((char *)ptr_fml_obuf);
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  if ( Fadd32 (ptr_fml_iibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
  {
		  fn_errlog( c_ServiceName, "S31050",FMLMSG , c_err_msg );
		  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      MEMSET(c_msg);
      sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      tpfree((char *)ptr_fml_iibuf);
      tpfree((char *)ptr_fml_obuf);
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  i_rtrn_cd1  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_iibuf,0,(char **)&ptr_fml_obuf,&li_len_tobuf,0);

  if( i_rtrn_cd1 != 0 )
  {
      fn_errlog( c_ServiceName, "S31055",FMLMSG , c_err_msg );
		  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      MEMSET(c_msg);
      sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      tpfree((char *)ptr_fml_iibuf);
      tpfree((char *)ptr_fml_obuf);
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

    if ( Fget32 (ptr_fml_obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31060",FMLMSG , c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      MEMSET(c_msg);
      sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      tpfree((char *)ptr_fml_iibuf);
      tpfree((char *)ptr_fml_obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    fn_userlog(c_ServiceName,"Output String Is :%s:",c_op_strng);

    strcpy(c_op_strng1,strtok(c_op_strng,"|"));
    strcpy(c_op_strng2,strtok(null_ptr,"|"));

		strcpy(c_mrgn_indctr,strtok(c_op_strng1,"^"));
		strcpy(c_xchng_cd1,strtok(null_ptr,"^"));      
		strcpy(c_seq_num1,strtok(null_ptr,"^"));
		strcpy(c_mtch_accnt1,strtok(null_ptr,"^"));
		strcpy(c_spn_mrgn1,strtok(null_ptr,"^"));
		strcpy(c_nov1,strtok(null_ptr,"^"));
		strcpy(c_total_mrgn1,strtok(null_ptr,"^"));
		strcpy(c_seq_num2,strtok(c_op_strng2,"^"));
		strcpy(c_mtch_accnt2,strtok(null_ptr,"^"));
		strcpy(c_spn_mrgn2,strtok(null_ptr,"^"));
		strcpy(c_nov2,strtok(null_ptr,"^"));
		strcpy(c_total_mrgn2,strtok(null_ptr,"^"));

    d_spn_mrgn1   = atof(c_spn_mrgn1);
    d_spn_mrgn2   = atof(c_spn_mrgn2);
    d_nov1        = atof(c_nov1);
    d_nov2        = atof(c_nov2);
    d_total_mrgn1 = atof(c_total_mrgn1);
    d_total_mrgn2 = atof(c_total_mrgn2);

    /*** Ver 1.2  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_iibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31065",FMLMSG , c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      MEMSET(c_msg);
      sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      tpfree((char *)ptr_fml_iibuf);
      tpfree((char *)ptr_fml_obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
    }

    if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }  
    /****** Ver 1.2 Ends Here ******/

		fn_userlog(c_ServiceName,"SPAN MARGIN :%lf:", d_spn_mrgn1);

    d_uspan_nenov_mrgn = fn_maxd(d_spn_mrgn1,d_spn_mrgn2) * 100;
    d_net_optn_val = fn_maxd(d_nov1,d_nov2) * 100;
    d_uspan_wenov_mrgn = fn_maxd(d_total_mrgn1,d_total_mrgn2) * 100 ;

    /*** Ver 1.2  Starts Here ***/
    d_spn_bmrgn1= d_spn_bmrgn1 *100;
    d_bnov1 = d_bnov1 * 100;
    d_total_bmrgn1 = d_total_bmrgn1 * 100;
    
   
    d_uspan_nenov_mrgn  = fn_maxd(d_uspan_nenov_mrgn,d_spn_bmrgn1);
    d_net_optn_val      = fn_maxd(d_net_optn_val,d_bnov1);
    d_uspan_wenov_mrgn  = fn_maxd(d_uspan_wenov_mrgn,d_total_bmrgn1);
    /*** Ver 1.2  Ends Here ***/ 


    fn_userlog(c_ServiceName,"SPAN - SPAN MARGIN Is :%lf:",d_uspan_nenov_mrgn);

    EXEC SQL
         UPDATE FTQ_FO_TRD_QT
            SET FTQ_SPN_PER_LOT = :d_uspan_wenov_mrgn
           WHERE FTQ_XCHNG_CD = :c_xchng_code
             AND FTQ_PRDCT_TYP = :c_prdct_typ
             AND FTQ_UNDRLYNG = :c_underlyng
             AND FTQ_EXER_TYP = :c_exer_typ
             AND FTQ_OPT_TYP = :c_opt_typ
             AND FTQ_STRK_PRC = :l_strike_prc 
             AND FTQ_INDSTK = :c_indxstk
             AND FTQ_EXPRY_DT = :c_expry_typ;

  if(SQLCODE != 0 )
  {
   fn_errlog( c_ServiceName, "S31070", SQLMSG, c_err_msg );
   fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   MEMSET(c_msg);
   sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
   fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
   fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
   tpfree((char *)ptr_fml_iibuf);
   tpfree((char *)ptr_fml_obuf);
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if (d_uspan_wenov_mrgn == 0) /*** Ver 1.1 **/
	{
		fn_userlog(c_ServiceName,"Zero Margin :%c:%s:%s:%ld:%c",c_prdct_typ,c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
	}
    tpfree((char *)ptr_fml_iibuf);
    tpfree((char *)ptr_fml_obuf);

  if(c_prdct_typ == 'F') /*** If loop added in Ver 1.1 ***/
  {
  ptr_fml_obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if ( ptr_fml_obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31075", FMLMSG, c_err_msg  );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    MEMSET(c_msg);
    sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
    fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  ptr_fml_iibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN*10);

  if ( ptr_fml_iibuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31080", FMLMSG, c_err_msg  );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    MEMSET(c_msg);
    sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
    fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpfree((char *)ptr_fml_obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  MEMSET(c_inp_strng);
  MEMSET(c_inp_strng11);
  MEMSET(c_inp_strng1);
  MEMSET(c_inp_strng2);
  MEMSET(c_inp_strng22);

  /** step 1 **/
  strcpy(c_inp_strng1,"1^");
  strcpy(c_inp_strng2,"|");

  if(strcmp(c_xchng_code,"NFO") == 0)
  {
    strcat(c_inp_strng1,"NSE^");
  }
  else if( strcmp(c_xchng_code,"BFO")== 0)
  {
    strcat(c_inp_strng1,"BSE^");
  }

  EXEC  SQL
    SELECT  SPN_PRTFL1_SEQ.nextval
    INTO    :l_prtfl_seq1
    FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31085",SQLMSG, c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    MEMSET(c_msg);
    sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
    fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpfree((char *)ptr_fml_iibuf);
    tpfree((char *)ptr_fml_obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  EXEC  SQL
    SELECT  SPN_PRTFL1_SEQ.nextval
    INTO    :l_prtfl_seq2
    FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31090",SQLMSG, c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    MEMSET(c_msg);
    sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
    fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpfree((char *)ptr_fml_iibuf);
    tpfree((char *)ptr_fml_obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  sprintf(c_seq_num1,"%ld",l_prtfl_seq1);
  sprintf(c_seq_num2,"%ld",l_prtfl_seq2);

  strcat( c_inp_strng1 , c_seq_num1 );
  strcat( c_inp_strng2 , c_seq_num2 );

  strcat(c_inp_strng1,"^");
  strcat(c_inp_strng2,"^");


  sprintf( c_msg, "Processing for underlying :%s:",c_underlyng );


  l_max_opn_qty = l_min_lot_qty;
  l_min_opn_qty = l_min_lot_qty;


  if(c_prdct_typ == 'F') /*** If loop added in Ver 1.1 ***/
  {
       sprintf(c_inp_strng11,"%s^%s~%c:%s^%ld^%lf",c_cln_mtch_accnt,c_stock_cd.arr,c_prdct_typ,c_expry_dt,l_max_opn_qty,d_ltp);

   strcat(c_inp_strng1,c_inp_strng11);

   sprintf(c_inp_strng22,"%s^%s~%c:%s^%ld^%lf",c_cln_mtch_accnt,c_stock_cd.arr,c_prdct_typ,c_expry_dt,l_min_opn_qty,d_ltp);
  }

   strcat(c_inp_strng2,c_inp_strng22);

   strcat(c_inp_strng1,",");
   strcat(c_inp_strng2,",");

  l_length1 = strlen(c_inp_strng1);

  if( c_inp_strng1[l_length1  - 1 ] == ',')
  {
    c_inp_strng1[l_length1 -1]  ='\0';
  }

  l_length2 = strlen(c_inp_strng2);

  if( c_inp_strng2[l_length2  - 1 ] == ',')
  {
    c_inp_strng2[l_length2 -1]  ='\0';
  }
  MEMSET(c_inp_strng);
  strcpy(c_inp_strng,c_inp_strng1);
  strcat(c_inp_strng,c_inp_strng2);
  strcat(c_inp_strng,"\n");

  fn_userlog(c_ServiceName,"c_inp_strng 1 = :%s:",c_inp_strng);

  if ( Fadd32 (ptr_fml_iibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)  ==  -1 )
  {
      fn_errlog( c_ServiceName, "S31095",FMLMSG , c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      MEMSET(c_msg);
      sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      tpfree((char *)ptr_fml_iibuf);
      tpfree((char *)ptr_fml_obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  if ( Fadd32 (ptr_fml_iibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
  {
      fn_errlog( c_ServiceName, "S31100",FMLMSG , c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      MEMSET(c_msg);
      sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      tpfree((char *)ptr_fml_iibuf);
      tpfree((char *)ptr_fml_obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  i_rtrn_cd1  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_iibuf,0,(char **)&ptr_fml_obuf,&li_len_tobuf,0);

  if( i_rtrn_cd1 != 0 )
  {
      fn_errlog( c_ServiceName, "S31105",FMLMSG , c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      MEMSET(c_msg);
      sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      tpfree((char *)ptr_fml_iibuf);
      tpfree((char *)ptr_fml_obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

    if ( Fget32 (ptr_fml_obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31110",FMLMSG , c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      MEMSET(c_msg);
      sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      tpfree((char *)ptr_fml_iibuf);
      tpfree((char *)ptr_fml_obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    fn_userlog(c_ServiceName,"Output String Is :%s:",c_op_strng);
    strcpy(c_op_strng1,strtok(c_op_strng,"|"));
    strcpy(c_op_strng2,strtok(null_ptr,"|"));

    strcpy(c_mrgn_indctr,strtok(c_op_strng1,"^"));
    strcpy(c_xchng_cd1,strtok(null_ptr,"^"));
    strcpy(c_seq_num1,strtok(null_ptr,"^"));
    strcpy(c_mtch_accnt1,strtok(null_ptr,"^"));
    strcpy(c_spn_mrgn1,strtok(null_ptr,"^"));
    strcpy(c_nov1,strtok(null_ptr,"^"));
    strcpy(c_total_mrgn1,strtok(null_ptr,"^"));
    strcpy(c_seq_num2,strtok(c_op_strng2,"^"));
    strcpy(c_mtch_accnt2,strtok(null_ptr,"^"));
    strcpy(c_spn_mrgn2,strtok(null_ptr,"^"));
    strcpy(c_nov2,strtok(null_ptr,"^"));
    strcpy(c_total_mrgn2,strtok(null_ptr,"^"));

    d_spn_mrgn1   = atof(c_spn_mrgn1);
    d_spn_mrgn2   = atof(c_spn_mrgn2);
    d_nov1        = atof(c_nov1);
    d_nov2        = atof(c_nov2);
    d_total_mrgn1 = atof(c_total_mrgn1);
    d_total_mrgn2 = atof(c_total_mrgn2);

    /*** Ver 1.2  Starts Here ***/
    d_spn_bmrgn1=0; 
    d_bnov1=0;
    d_total_bmrgn1=0;
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_iibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31115",FMLMSG , c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      MEMSET(c_msg);
      sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      tpfree((char *)ptr_fml_iibuf);
      tpfree((char *)ptr_fml_obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
    }

    if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /****** Ver 1.2 Ends Here ******/


    fn_userlog(c_ServiceName,"SPAN MARGIN :%lf:", d_spn_mrgn1);

    d_uspan_nenov_mrgn = fn_maxd(d_spn_mrgn1,d_spn_mrgn2) * 100;
    d_net_optn_val = fn_maxd(d_nov1,d_nov2) * 100;
    d_uspan_wenov_mrgn = fn_maxd(d_total_mrgn1,d_total_mrgn2) * 100 ;

    /*** Ver 1.2  Starts Here ***/
    d_spn_bmrgn1 = d_spn_bmrgn1 * 100;
    d_bnov1 = d_bnov1 * 100;
    d_total_bmrgn1 = d_total_bmrgn1 * 100;


    d_uspan_nenov_mrgn  = fn_maxd(d_uspan_nenov_mrgn,d_spn_bmrgn1);
    d_net_optn_val      = fn_maxd(d_net_optn_val,d_bnov1);
    d_uspan_wenov_mrgn  = fn_maxd(d_uspan_wenov_mrgn,d_total_bmrgn1);
    /*** Ver 1.2  Ends Here ***/


    fn_userlog(c_ServiceName,"SPAN - SPAN MARGIN Is :%lf:",d_uspan_nenov_mrgn);

    EXEC SQL
         UPDATE FTQ_FO_TRD_QT
            SET FTQ_SPN_PER_LOT_B = :d_uspan_wenov_mrgn
           WHERE FTQ_XCHNG_CD = :c_xchng_code
             AND FTQ_PRDCT_TYP = :c_prdct_typ
             AND FTQ_UNDRLYNG = :c_underlyng
             AND FTQ_EXER_TYP = :c_exer_typ
             AND FTQ_OPT_TYP = :c_opt_typ
             AND FTQ_STRK_PRC = :l_strike_prc
             AND FTQ_INDSTK = :c_indxstk
             AND FTQ_EXPRY_DT = :c_expry_typ;

  if(SQLCODE != 0 )
  {
   fn_errlog( c_ServiceName, "S31120", SQLMSG, c_err_msg );
   fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   MEMSET(c_msg);
   sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
   fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
   fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
   tpfree((char *)ptr_fml_iibuf);
   tpfree((char *)ptr_fml_obuf);
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

    tpfree((char *)ptr_fml_iibuf);
    tpfree((char *)ptr_fml_obuf);
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
   fn_errlog( c_ServiceName, "S31125", SQLMSG, c_err_msg );
   fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   MEMSET(c_msg);
   sprintf (c_msg, "Failed : %s-%s-%ld-%c",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
   fn_userlog(c_ServiceName,"ERROR CASE :%s:%s:%ld:%c:",c_underlyng,c_expry_typ,l_strike_prc,c_opt_typ);
   fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Ibuf, 0 , 0 );
}
