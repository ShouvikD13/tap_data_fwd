/******************************************************************************/
/*  Program           : SFO_SAM_BKUBK                                         */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_TRD_DT                                            */
/*                      FFO_DR_CR_FLG                                         */
/*                      FFO_AMOUNT                                            */
/*                      FFO_DWL_FLG                                           */
/*                      FFO_NARRATION_ID                                      */
/*                                                                            */
/*                                                                            */
/*  Output            :                                                       */
/*                                                                            */
/*  Description       : This service receives the input for SAM blocking or   */
/*                      SAM unblocking and accordingly it computes Limit also	*/
/*                                                                            */
/*                     DEBIT_WHEN_LIMIT  - N                                  */
/*                     DEBIT_WITHOUT_LIMIT - Y                                */
/*                     DEBIT_TILL_LIMIT - E                                   */
/*                                                                            */
/*  Log               : Ver 1.0		08-Oct-2014		Samip M												*/
/*											Ver 1.1		14-May-2015		Samip M												*/
/*                    : Ver 1.3   13-Aug-2015   Bhupendra Malik               */
/*                    : Ver 1.4   28-Jul-2020   Samip M												*/
/*                    : Ver 1.5   30-Mar-2023   Dipin                         */   
/******************************************************************************/
/*	1.0    -   New Release																										*/
/*	1.1    -   View to FML Changes																						*/
/*  1.3    -   Multi Occurence Block Unblock Fix  														*/
/*  1.4    -   CR-ISEC14-138293 Changes for Margin Pledge							  			*/
/*  1.5    -   Regulatory changes:Real time margin reporting                  */ 
/******************************************************************************/
#include <stdio.h>      /* C Header File                */
#include <stdlib.h>     /* C Header File                */
#include <sqlca.h>      /* Oracle header file           */
#include <atmi.h>       /* TUXEDO Header File           */
#include <userlog.h>    /* TUXEDO Header File           */
#include <fml32.h>      /* TUXEDO Header File           */
#include <Usysflds.h>   /* TUXEDO Field Definitions  */

/* User defined h files */

/*#include <fml_def.h>    * created for FML handling */
#include <fo.h>
#include <fo_fml_def.h>
/** #include <fo_view_def.h> *** Commented for view to FML Ver 1.1 ***/
#include <fo_view_def.h> /*** Added for view to FML Ver 1.1 ***/
#include <fn_log.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <string.h>
#include <fn_read_debug_lvl.h>
#include <fn_eqsam.h>
#include <fn_pos.h>

#define TOTAL_FML 10 
#define  BUF_MULTIPLY 1
#define MIN(x,y)  ( (x < y) ? x : y );

EXEC SQL INCLUDE "table/fab_fo_alc_bft_smry.h";
EXEC SQL INCLUDE "table/eab_eq_alc_bft_smry.h";
EXEC SQL INCLUDE "table/stk_stk_mstr.h";
EXEC SQL INCLUDE "table/dbd_dp_blck_dtls.h";

int fn_get_limit(char *c_ServiceName,
                        char *sql_mtch_accnt,
                        char *sql_usr_id,
                        double* d_free_sam_limit,
                        struct vw_gt_lmt_dtls st_gt_lmt,
                        char *c_err_msg,
                        long sql_sssn_id);

long sql_dbd_sam_blckd_qty = 0;
int i_returncode = 0;

void SFO_SAM_BKUBK( TPSVCINFO *rqst )
{

	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

	struct vw_gt_lmt_dtls st_gt_lmt;

	char c_ServiceName[ 33];
  char c_err_msg[256];
  char c_narration[256];
	char c_force_flag = 'N';
	char c_null_msg[18];
	int i_err[TOTAL_FML];
	int i_trnsctn;
	int j;
  int i_cnt;
	int i_ferr[TOTAL_FML];
  char c_ucc_cd[13]; /*ver 1.5**/
 
	EXEC SQL BEGIN DECLARE SECTION;
	  varchar sql_mtch_accnt[11];
	  varchar sql_usr_id[10];
		varchar sql_sbd_ordr_no[19];
		long sql_prs_seq = 0 ;
		long l_bkubk_qty = 0;
		long l_free_alloc_qty;
		long long ll_plg_val;
		long sql_sssn_id;
		double sql_plg_val = 0.0;
		double sql_ltq_plg_rt = 0.0;
		double d_free_sam_limit = 0.0;
		char c_bkubk_flg;
		char c_xchng_cd[4];
		char c_remarks[100];
		char c_channel[4];
		long l_sam_blckd_qty = 0;		/** Ver 1.4 **/
		long l_block_for_sale = 0;	/** Ver 1.4 **/
		long l_tot_block_rec = 0;		/** Ver 1.4 **/
	
	EXEC SQL END DECLARE SECTION;

	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);
  ptr_fml_Obuf = (FBFR32 *)NULL;


	ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN * BUF_MULTIPLY );
  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31005", TPMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
		
	MEMSET(sql_mtch_accnt);
	MEMSET(c_remarks);
	
	fn_userlog(c_ServiceName,"c_force_flag :%c:",c_force_flag);

  i_err[0] = Fget32(ptr_fml_Ibuf, FFO_EBA_MTCH_ACT_NO , 0, (char *)sql_mtch_accnt.arr, 0);
  i_ferr[0] = Ferror32;
  i_err[1] = Fget32(ptr_fml_Ibuf, FFO_BK_UBK_FLG , 0, (char *)&c_bkubk_flg, 0);
  i_ferr[1] = Ferror32;
  i_err[2] = Fget32(ptr_fml_Ibuf, FFO_USR_ID, 0, (char *)sql_usr_id.arr, 0);
  i_ferr[2] = Ferror32;
  i_err[3] = Fget32(ptr_fml_Ibuf, FFO_STCK_CD, 0, (char *)sql_stk_stck_cd, 0);
  i_ferr[3] = Ferror32;
	i_err[4] = Fget32(ptr_fml_Ibuf, FFO_ORD_TOT_QTY, 0, (char *)&l_bkubk_qty, 0);
  i_ferr[4] = Ferror32;
	i_err[5] = Fget32(ptr_fml_Ibuf, FFO_DPID, 0, (char *)sql_dbd_dp_id, 0);
  i_ferr[5] = Ferror32;
	i_err[6] = Fget32(ptr_fml_Ibuf, FFO_DP_CLNT_ID, 0, (char *)sql_dbd_dp_clnt_id, 0);
  i_ferr[6] = Ferror32;
	i_err[7] = Fget32(ptr_fml_Ibuf, FFO_CHANNEL, 0, (char *)c_channel, 0);
  i_ferr[7] = Ferror32;
  i_err[8] = Fget32(ptr_fml_Ibuf, FFO_SSSN_ID, 0, (char *)&sql_sssn_id, 0);
  i_ferr[8] = Ferror32;
  i_err[9] = Fget32(ptr_fml_Ibuf, FML_PLG_FLG, 0, (char *)&c_force_flag, 0);
  i_ferr[9] = Ferror32;

	for(i_cnt = 0;i_cnt < 10;i_cnt++)
  {
    if(i_err[i_cnt] == -1)
    {
			if(i_cnt == 9 && i_ferr[9] == FNOTPRES)
			{
    		fn_userlog(c_ServiceName,"Inside not present");
    		c_force_flag = 'N';
			}
			else
			{
		
      fn_errlog( c_ServiceName, "S31010", Fstrerror32(i_ferr[i_cnt]), c_err_msg  );
      fn_userlog(c_ServiceName, "Error at Field number %d",i_cnt);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}
	}

	/****
	EXEC SQL
		SELECT DECODE(:c_bkubk_flg,'B','SAM Block','U','SAM Unblock','I','SAM Invocation')
			INTO :c_remarks
		FROM DUAL; ****/

	EXEC SQL
		SELECT 
		CASE WHEN :c_bkubk_flg = 'B' AND :c_channel = 'SYS'
		THEN 'System SAM Block'
		WHEN :c_bkubk_flg = 'U' AND :c_channel = 'SYS'
		THEN 'System SAM Unblock'
		WHEN :c_bkubk_flg = 'B' AND :c_channel <> 'SYS'
		THEN 'User SAM Block'
		WHEN :c_bkubk_flg = 'U' AND :c_channel <> 'SYS'
		THEN 'User SAM Unblock'
		WHEN :c_bkubk_flg = 'I'
		THEN 'SAM SPOT Sell'
		END
		INTO :c_remarks
		FROM DUAL;

	SETLEN(sql_usr_id);
	SETLEN(sql_mtch_accnt);
	SETNULL(sql_mtch_accnt);
	strcpy(c_null_msg,"\0");

	/********
	i_err[0] = Fget32(ptr_fml_Ibuf,FML_PLG_FLG,0,(char *)&c_force_flag,0);

	fn_userlog(c_ServiceName,"Ferror32 :%d:",Ferror32);

  if((i_err[0] == -1) && (Ferror32 != FNOTPRES))
  {
    tpfree((char *)ptr_fml_Obuf);
		fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	if(Ferror32 == FNOTPRES)
	{
		fn_userlog(c_ServiceName,"Inside not present");
		c_force_flag = 'N';
	}
	*******/
	fn_userlog(c_ServiceName,"c_force_flag :%c:",c_force_flag);

  i_trnsctn  = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    tpfree((char *)ptr_fml_Obuf);
  	fn_errlog( c_ServiceName, "S31020", LIBMSG , c_err_msg  );
		fn_userlog(c_ServiceName, "%s", c_err_msg);
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	fn_userlog(c_ServiceName,"sql_mtch_accnt.arr = :%s:",sql_mtch_accnt.arr);
	fn_userlog(c_ServiceName,"c_bkubk_flg = :%c:",c_bkubk_flg);
	fn_userlog(c_ServiceName,"sql_usr_id.arr = :%s:",sql_usr_id.arr);
	fn_userlog(c_ServiceName,"c_xchng_cd = :%s:",c_xchng_cd);
	fn_userlog(c_ServiceName,"sql_stk_stck_cd = :%s:",sql_stk_stck_cd);
	fn_userlog(c_ServiceName,"l_bkubk_qty = :%ld:",l_bkubk_qty);
	fn_userlog(c_ServiceName,"sql_dbd_dp_id = :%s:",sql_dbd_dp_id);
	fn_userlog(c_ServiceName,"sql_dbd_dp_clnt_id = :%s:",sql_dbd_dp_clnt_id);
	fn_userlog(c_ServiceName,"c_channel = :%s:",c_channel);
	fn_userlog(c_ServiceName,"sql_sssn_id = :%ld",sql_sssn_id);

	EXEC SQL
		SELECT	DBD_TOT_QTY,
						DBD_QTY_BLCKD,
						NVL(DBD_SAM_BLCKD_QTY,0),
						DBD_BLOCK_FOR_SALE,
						DBD_ISIN_NMBR
		INTO		:sql_dbd_tot_qty,
						:sql_dbd_qty_blckd,
						:sql_dbd_sam_blckd_qty,
						:sql_dbd_block_for_sale,
						:sql_dbd_isin_nmbr
		FROM		DBD_DP_BLCK_DTLS
		WHERE		
		DBD_CLM_MTCH_ACCNT = :sql_mtch_accnt	AND
		DBD_DP_ID = :sql_dbd_dp_id	AND
		DBD_DP_CLNT_ID = :sql_dbd_dp_clnt_id	AND
		DBD_STCK_CD = :sql_stk_stck_cd;

	if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg );
    tpfree ( ( char * )ptr_fml_Obuf );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	l_free_alloc_qty = sql_dbd_tot_qty - sql_dbd_qty_blckd;

	if(l_bkubk_qty <=0 )
	{
    tpfree((char *)ptr_fml_Obuf);
		strcpy(c_err_msg, "The quantity cannot be zero or negative");
		fn_userlog(c_ServiceName, "%s", c_err_msg);
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	fn_userlog(c_ServiceName,"sql_dbd_tot_qty = :%d:",sql_dbd_tot_qty);
	fn_userlog(c_ServiceName,"sql_dbd_qty_blckd = :%d:",sql_dbd_qty_blckd);
	fn_userlog(c_ServiceName,"sql_dbd_sam_blckd_qty = :%d:",sql_dbd_sam_blckd_qty);
	fn_userlog(c_ServiceName,"sql_dbd_block_for_sale = :%d:",sql_dbd_block_for_sale);
	fn_userlog(c_ServiceName,"l_free_alloc_qty = :%d:",l_free_alloc_qty);

	EXEC SQL
		SELECT	FAB_PLG_AMT,
						nvl(FAB_NWB_AMT,0)
		INTO		:sql_fab_plg_amt,
						:sql_fab_nwb_amt
		FROM		FAB_FO_ALC_BFT_SMRY
		WHERE		FAB_CLM_MTCH_ACCNT = :sql_mtch_accnt;

	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg );
    tpfree ( ( char * )ptr_fml_Obuf );
    tpfree((char *)ptr_fml_Ibuf);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	
	if(SQLCODE == NO_DATA_FOUND)
  {
    sql_fab_plg_amt = 0;
    sql_fab_nwb_amt = 0;
  }

	EXEC SQL
				SELECT ltq_plg_rt
        INTO   :sql_ltq_plg_rt
        FROM   ltq_trd_qt
        WHERE  ltq_stck_cd = :sql_stk_stck_cd
        AND    ltq_xchng_cd = 'BSE'; 

	if(SQLCODE !=0 )
  {
    tpfree((char *)ptr_fml_Obuf);
		fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
		
	fn_userlog(c_ServiceName,"Before fn_get_haircut");

	i_returncode = fn_get_haircut(c_ServiceName ,
                               (char *)sql_mtch_accnt.arr,
                               sql_stk_stck_cd,
                               &sql_stk_plg_haircut,
											         c_err_msg);

	if(i_returncode == -1)
	{
    tpfree((char *)ptr_fml_Obuf);
		fn_errlog( c_ServiceName, "S31040", LIBMSG, c_err_msg  );
		fn_userlog(c_ServiceName, "%s", c_err_msg);
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	fn_userlog(c_ServiceName,"After fn_get_haircut");

	sql_plg_val = (l_bkubk_qty * sql_ltq_plg_rt * (1 - sql_stk_plg_haircut/100.00 )) * 100.00;
	
	if((long long)(sql_plg_val  * 100)%100 > 50)
  {
		sql_plg_val = sql_plg_val + 1.0;
    fn_userlog( c_ServiceName, "The rounded off amount is [%lf]", sql_plg_val);
  }

	ll_plg_val = (long long) sql_plg_val;
	sql_plg_val = (double) ll_plg_val;


	if(c_bkubk_flg == 'B')
	{
		fn_userlog(c_ServiceName,"Inside Block condition");
		if ( l_bkubk_qty > l_free_alloc_qty )
		{
  	  tpfree((char *)ptr_fml_Obuf);
			strcpy(c_err_msg, "Sufficient qty not available for SAM Block");
			fn_userlog(c_ServiceName, "%s", c_err_msg);
			Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
	else if (c_bkubk_flg == 'U')
	{
		if ( l_bkubk_qty > sql_dbd_sam_blckd_qty )
		{
			strcpy(c_err_msg, "Sufficient qty not available for SAM UnBlock");
			fn_userlog(c_ServiceName, "%s", c_err_msg);
      tpfree((char *)ptr_fml_Obuf);
			Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if (c_force_flag != 'F')
		{
		fn_userlog(c_ServiceName,"Before fn_get_limit");
		i_returncode = fn_get_limit(c_ServiceName ,
                               sql_mtch_accnt.arr,
															 sql_usr_id.arr,
                               &d_free_sam_limit,
															 st_gt_lmt,
                               c_err_msg,
															 sql_sssn_id);

		if(i_returncode == -1)
		{
			fn_errlog( c_ServiceName, "S31045", LIBMSG, c_err_msg  );
			fn_userlog(c_ServiceName, "%s", c_err_msg);
      tpfree((char *)ptr_fml_Obuf);
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		fn_userlog(c_ServiceName,"Before fn_get_limit");

		if(sql_plg_val > d_free_sam_limit)
		{
			fn_userlog(c_ServiceName,"The request for Unblock is [%lf]", sql_plg_val );
			fn_userlog(c_ServiceName,"Free sam limit is [%lf]",d_free_sam_limit );
			fn_userlog(c_ServiceName,"Cannot unblock this quantity as the limit has been used.");
      strcpy(c_err_msg,"Please try again as your unblock request is more than the free securities limit available.");
      Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Obuf);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		}

	}
	else if (c_bkubk_flg == 'I')
	{
		if ( l_bkubk_qty > sql_dbd_block_for_sale )
		{
			strcpy(c_err_msg, "Sufficient qty not available for SAM Invocation");
			fn_userlog(c_ServiceName, "%s", c_err_msg);
			Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Obuf);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}

		EXEC SQL 
			SELECT PRS_PLG_REV_SEQ.nextval 
			INTO :sql_prs_seq
      FROM DUAL;

		if (SQLCODE != 0)
    {
			fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Obuf);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

	fn_userlog(c_ServiceName,"sql_prs_seq :%ld:",sql_prs_seq);

	EXEC SQL
		SELECT TO_CHAR(sysdate,'YYYYMMDD')||LPAD((:sql_prs_seq),8,0)
		INTO :sql_sbd_ordr_no
		FROM DUAL;

		if (SQLCODE != 0)
    {
			fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Obuf);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		SETNULL(sql_sbd_ordr_no);

fn_userlog(c_ServiceName,"sql_sbd_ordr_no=:%s:",sql_sbd_ordr_no.arr);
fn_userlog(c_ServiceName,"sql_stk_stck_cd=:%s:",sql_stk_stck_cd);
fn_userlog(c_ServiceName,"l_bkubk_qty=:%ld:",l_bkubk_qty);
fn_userlog(c_ServiceName,"sql_stk_plg_haircut=:%ld:",sql_stk_plg_haircut);
fn_userlog(c_ServiceName,"sql_plg_val=:%lf:",sql_plg_val);
fn_userlog(c_ServiceName,"sql_dbd_isin_nmbr=:%s:",sql_dbd_isin_nmbr);
fn_userlog(c_ServiceName,"sql_dbd_dp_clnt_id=:%s:",sql_dbd_dp_clnt_id);
fn_userlog(c_ServiceName,"sql_dbd_dp_id=:%s:",sql_dbd_dp_id);
fn_userlog(c_ServiceName,"sql_mtch_accnt=:%s:",sql_mtch_accnt.arr);
fn_userlog(c_ServiceName,"c_bkubk_flg=:%c:",c_bkubk_flg);
fn_userlog(c_ServiceName,"c_remarks=:%s:",c_remarks);
fn_userlog(c_ServiceName,"c_channel=:%s:",c_channel);

	
	EXEC SQL
		INSERT INTO	SBD_SAM_BKUBK_DTLS
									(SBD_ORDR_NO,
									SBD_STCK_CD,
									SBD_BKUBK_QTY,
									SBD_BKUBK_DT,
									SBD_HAIRCUT,
									SBD_BKUBK_VL,
									SBD_ISIN_NO,
									SBD_DP_CLNT_ACCNT,
									SBD_DP_ACCNT,
									SBD_CLNT_MTCH_ACCNT,
									SBD_SAM_BKUBK_TYP,
									SBD_BKUBK_STTS,
									SBD_RMRKS,
									SBD_BP_ID,
									SBD_CHANNEL)
						VALUES(:sql_sbd_ordr_no,
									:sql_stk_stck_cd,
									:l_bkubk_qty,
									SYSDATE,
									:sql_stk_plg_haircut,
									:sql_plg_val,
									:sql_dbd_isin_nmbr,
									:sql_dbd_dp_clnt_id,
									:sql_dbd_dp_id,
									:sql_mtch_accnt,
									:c_bkubk_flg,
									'C',
									:c_remarks,
									NULL,
									:c_channel);

	if (SQLCODE != 0)
  {
		fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Obuf);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	EXEC SQL
		UPDATE DBD_DP_BLCK_DTLS
		SET	DBD_TOT_QTY = DBD_TOT_QTY + DECODE(:c_bkubk_flg,'B',-1,'U',1,'I',0) * :l_bkubk_qty,
				DBD_SAM_BLCKD_QTY = DBD_SAM_BLCKD_QTY + DECODE(:c_bkubk_flg,'B',1,'U',-1,'I',0) * :l_bkubk_qty,
				DBD_BLOCK_FOR_SALE = DBD_BLOCK_FOR_SALE + DECODE(:c_bkubk_flg,'I',-1,0) * :l_bkubk_qty
		WHERE DBD_STCK_CD = :sql_stk_stck_cd
		AND		DBD_CLM_MTCH_ACCNT = :sql_mtch_accnt
		AND		DBD_DP_ID = :sql_dbd_dp_id
		AND		DBD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
/** Ver 1.3 Started **/
    AND   DBD_TOT_QTY = :sql_dbd_tot_qty    
    AND   DBD_SAM_BLCKD_QTY = :sql_dbd_sam_blckd_qty   
    AND   DBD_BLOCK_FOR_SALE = :sql_dbd_block_for_sale;      
/** Ver 1.3 Ends **/

	if (SQLCODE != 0)
  {
		fn_errlog( c_ServiceName, "S31065", SQLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Obuf);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	EXEC SQL
		INSERT INTO DLD_DP_LOG_DTLS
								(DLD_CLM_MTCH_ACCNT,
								DLD_DP_ID,
								DLD_DP_CLNT_ID,
								DLD_ISIN_NMBR,
								DLD_STCK_CD,
								DLD_TOT_QTY_CHG,
								DLD_QTY_BLCKD_CHG,
								DLD_SAM_BLCKD_QTY_CHG,
								DLD_CHG_TM,
								DLD_BLK_FR_SALE_CHG,
								DLD_RMRKS)
		VALUES(:sql_mtch_accnt,
					:sql_dbd_dp_id,
					:sql_dbd_dp_clnt_id,
					:sql_dbd_isin_nmbr,
					:sql_stk_stck_cd,
					DECODE(:c_bkubk_flg,'B',-1,'U',1,'I',0) * :l_bkubk_qty,
					0,
					DECODE(:c_bkubk_flg,'B',1,'U',-1,'I',0) * :l_bkubk_qty,
					SYSDATE,
					DECODE(:c_bkubk_flg,'I',-1,0) * :l_bkubk_qty,
					:c_remarks);
					/***DECODE(:c_bkubk_flg,'B','SAM Block','U','SAM Unblock'));***/


	
	if (c_bkubk_flg == 'B')
	{
		MEMSET(sql_fab_bnk_accnt);
		fn_userlog(c_ServiceName,"before adding limit for Block");

		EXEC SQL
			UPDATE FAB_FO_ALC_BFT_SMRY 
			SET	FAB_NWB_AMT = nvl(FAB_NWB_AMT,0) + :sql_plg_val
			WHERE FAB_CLM_MTCH_ACCNT = :sql_mtch_accnt
			RETURNING FAB_BNK_ACCNT,FAB_ALCTD_AMT,FAB_BFT_AMT
			INTO :sql_fab_bnk_accnt,:sql_fab_alctd_amt,:sql_fab_bft_amt;

		if ((SQLCODE != 0) && (SQLCODE !=NO_DATA_FOUND))
    {
			fn_errlog( c_ServiceName, "S31070", SQLMSG, c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Obuf);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		SETNULL(sql_fab_bnk_accnt);

		if(SQLCODE == NO_DATA_FOUND)
		{
			EXEC SQL
				SELECT CLB_BNK_ACCT_NMBR
				INTO :sql_fab_bnk_accnt
				FROM CLB_BNK_ACCTS
				WHERE CLB_CLM_MTCH_ACCNT = :sql_mtch_accnt;
			
			if(SQLCODE != 0)
			{
				fn_errlog( c_ServiceName, "S31075", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			SETNULL(sql_fab_bnk_accnt);
       
      /**ver 1.5 start**/
      MEMSET(c_ucc_cd); 
      EXEC SQL
      SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
      INTO :c_ucc_cd 
      FROM  ClM_CLNT_MSTR
      WHERE CLM_MTCH_ACCNT = :sql_mtch_accnt;

      if(SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S31080", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpfree((char *)ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      rtrim(c_ucc_cd);
      /** ver 1.5 ends **/        
   
			EXEC SQL
				INSERT INTO FAB_FO_ALC_BFT_SMRY(
										FAB_CLM_MTCH_ACCNT,
										FAB_BNK_ACCNT,
										FAB_ALCTD_AMT,
										FAB_BFT_AMT,
										FAB_PLG_AMT,
										FAB_NWB_AMT,
										FAB_ISEC_MRGN_AMT,
										FAB_ISEC_MRGN_AMT_BSE,
										FAB_FDR_AMT,
                    FAB_UCC_CD)  /** ver 1.5 **/ 
							VALUES(:sql_mtch_accnt,
										:sql_fab_bnk_accnt,
										0,
										0,
										0,
										:sql_plg_val,
										0,
										0,
										0,
                    :c_ucc_cd ); /**ver 1.5 **/
		}

		EXEC SQL
			INSERT INTO FAL_FO_ALCBFT_LOG
									(FAL_CLM_MTCH_ACCNT,
									FAL_BNK_ACCNT,
									FAL_ALCTD_AMT,
									FAL_BFT_AMT,
									FAL_TRN_DT,
									FAL_OLD_PLG_AMT,
									FAL_NARRATION,
									FAL_NWB_AMT,
									FAL_NWB_CHG_AMT)
					VALUES(:sql_mtch_accnt,
								:sql_fab_bnk_accnt,
								:sql_fab_alctd_amt,
								:sql_fab_bft_amt,
								SYSDATE,
								:sql_fab_plg_amt,
								'SAM Block',
								:sql_fab_nwb_amt,
								:sql_plg_val);

		if (SQLCODE != 0)
    {
				fn_errlog( c_ServiceName, "S31085", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
	else if (c_bkubk_flg == 'U')
	{
		strcpy(c_narration,"SAM Unblock");

		fn_userlog(c_ServiceName,"before fn_reduce_sam_limit for unblock");

		i_returncode = fn_reduce_sam_limit(c_ServiceName,
																		sql_mtch_accnt.arr,
																		/**sql_fab_plg_amt,**/
																		sql_plg_val,
																		c_narration,
																		c_err_msg);

		if (i_returncode == -1)
		{
			fn_errlog( c_ServiceName, "S31090", SQLMSG, c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpfree ( ( char * )ptr_fml_Obuf);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}

	/** Added for Ver 1.4 **/
	if(c_bkubk_flg == 'U' || c_bkubk_flg == 'I')
	{

		EXEC SQL
			SELECT DBD_SAM_BLCKD_QTY,DBD_BLOCK_FOR_SALE
			INTO :l_sam_blckd_qty,l_block_for_sale
			FROM DBD_DP_BLCK_DTLS
			WHERE DBD_STCK_CD = :sql_stk_stck_cd
    	AND   DBD_CLM_MTCH_ACCNT = :sql_mtch_accnt
    	AND   DBD_DP_ID = :sql_dbd_dp_id
    	AND   DBD_DP_CLNT_ID = :sql_dbd_dp_clnt_id;

		if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
				fn_errlog( c_ServiceName, "S31095", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		
		if( l_sam_blckd_qty + l_block_for_sale == 0)
		{
			EXEC SQL
				UPDATE DBD_DP_BLCK_DTLS
				SET DBD_PLG_MODE = 'P'
				WHERE DBD_STCK_CD = :sql_stk_stck_cd
      	AND   DBD_CLM_MTCH_ACCNT = :sql_mtch_accnt
      	AND   DBD_DP_ID = :sql_dbd_dp_id
      	AND   DBD_DP_CLNT_ID = :sql_dbd_dp_clnt_id;

			if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    	{
				fn_errlog( c_ServiceName, "S31100", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}

		EXEC SQL
			SELECT COUNT(1)
			INTO :l_tot_block_rec
			FROM DBD_DP_BLCK_DTLS
			WHERE DBD_CLM_MTCH_ACCNT = :sql_mtch_accnt
			AND NVL(DBD_PLG_MODE,'P') = 'B';

		if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
				fn_errlog( c_ServiceName, "S31105", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if(l_tot_block_rec == 0)
		{
			EXEC SQL
				UPDATE CLM_CLNT_MSTR
				SET	CLM_PLG_MODE = 'P'
				WHERE CLM_MTCH_ACCNT = :sql_mtch_accnt;

			if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    	{
				fn_errlog( c_ServiceName, "S31110", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}

	}
	/** End for Ver 1.4 **/

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
  	fn_errlog( c_ServiceName, "S31115",TPMSG ,c_err_msg);
		fn_userlog(c_ServiceName, "%s", c_err_msg);
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Obuf);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	i_err[0] = Fadd32(ptr_fml_Obuf,FFO_PLG_ORDR_RFRNC,(char *)sql_sbd_ordr_no.arr,0);
	i_err[1] = Fadd32(ptr_fml_Obuf,FFO_HAIRCUT ,(char *)&sql_stk_plg_haircut,0);
	i_err[2] = Fadd32(ptr_fml_Obuf,FFO_PLG_ORD_VAL,(char *)&sql_plg_val,0);
	i_err[3] = Fadd32(ptr_fml_Obuf,FFO_STCK_CD,(char *)sql_stk_stck_cd, 0 ); 
	i_err[4] = Fadd32(ptr_fml_Obuf,FFO_ERR_MSG,c_null_msg, 0 ); 

  for(j = 0;j < 5; j++)
  {
		if(i_err[j] == -1 )
    {
			fn_errlog( c_ServiceName, "S31120", FMLMSG, c_err_msg  );
      fn_userlog(c_ServiceName, "The Fget32 error  at [%d]",j);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree ( ( char * )ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
	fn_userlog(c_ServiceName, "All done");
	tpfree((char *)ptr_fml_Ibuf);
	fn_userlog(c_ServiceName, "All done");
	tpreturn(TPSUCCESS, 0,(char*)ptr_fml_Obuf,0, 0);
}

int fn_get_limit(char *c_ServiceName,
                        char *sql_mtch_accnt,
												char *sql_usr_id,
                        double* d_free_sam_limit,
												struct vw_gt_lmt_dtls st_gt_lmt,
                        char *c_err_msg,
												long sql_sssn_id)
{
	
	EXEC SQL BEGIN DECLARE SECTION;
	varchar sql_nxt_trd_dt[13];
	double d_nfo_limit = 0.0;
	double d_bfo_limit = 0.0;
	double d_net_fno_limit = 0.0;
	double d_eq_sam_limit = 0.0;
	long l_ip_len = 0;
	EXEC SQL END DECLARE SECTION;

	fn_userlog(c_ServiceName,"Inside function fn_get_limit");
	fn_userlog(c_ServiceName,"Before NFO limit");

	memset(&st_gt_lmt,'\0' , sizeof( struct vw_gt_lmt_dtls) );

	fn_userlog(c_ServiceName,"Before NFO limit2");

  strcpy(st_gt_lmt.c_xchng_cd , "NFO" );


	fn_userlog(c_ServiceName,"Before NFO limit3");

	MEMSET(sql_nxt_trd_dt);

  EXEC SQL
		SELECT EXG_NXT_TRD_DT
    INTO :sql_nxt_trd_dt
    FROM EXG_XCHNG_MSTR
    WHERE EXG_XCHNG_CD = 'NFO';
	
		fn_userlog(c_ServiceName,"Before NFO limit3");
	if (SQLCODE != 0)
  {
		fn_errlog( c_ServiceName, "S31125", SQLMSG, c_err_msg  );
		return -1;
	}

  SETNULL(sql_nxt_trd_dt);

  strcpy(st_gt_lmt.c_trd_dt, sql_nxt_trd_dt.arr );
  strcpy(st_gt_lmt.c_cln_mtch_accnt, sql_mtch_accnt);
  l_ip_len = (long) sizeof ( struct vw_gt_lmt_dtls);
  st_gt_lmt.c_rqst_typ = LIMIT_X;
  fn_cpy_ddr ( st_gt_lmt.c_rout_crt );

	/** Commented for Ver 1.1 ***
	i_returncode = fn_call_svc( c_ServiceName, c_err_msg, &st_gt_lmt, &st_gt_lmt,
                               "vw_gt_lmt_dtls", "vw_gt_lmt_dtls", l_ip_len,
                               l_ip_len, 0, "SFO_GET_LIMITS" );
	**** Ver 1.1 ***/

	/*** Added for Ver 1.1 ***/
  fn_userlog(c_ServiceName,"st_gt_lmt.l_gid = :%ld:",st_gt_lmt.l_gid);
  i_returncode = fo_get_trd_limit(c_ServiceName,
                                    st_gt_lmt.c_cln_mtch_accnt,
                                    st_gt_lmt.c_trd_dt,
                                    st_gt_lmt.c_rqst_typ,
                                    st_gt_lmt.c_xchng_cd,
                                    st_gt_lmt.l_gid,
                                    &st_gt_lmt.d_amt,
                                    c_err_msg
                                    );

	/*** Ver 1.1 ***/
  if ( i_returncode == -1 )
  {
		fn_errlog( c_ServiceName, "S31130", LIBMSG, c_err_msg );
    fn_userlog(c_ServiceName,"SFO_GET_LIMITS FAIL  ");
    return -1;
	}

	if(DEBUG_MSG_LVL_3){
		fn_userlog( c_ServiceName,"NFO Limit Calculated :%lf:",st_gt_lmt.d_amt); /** Ver 2.7 **/
  }

	d_nfo_limit = st_gt_lmt.d_amt;

	fn_userlog(c_ServiceName,"Before BFO limit");

	memset(&st_gt_lmt,'\0' , sizeof( struct vw_gt_lmt_dtls) );
	strcpy(st_gt_lmt.c_xchng_cd , "BFO" );

	MEMSET(sql_nxt_trd_dt);

	EXEC SQL
	SELECT EXG_NXT_TRD_DT
	INTO :sql_nxt_trd_dt
	FROM EXG_XCHNG_MSTR
	WHERE EXG_XCHNG_CD = 'BFO';

	if (SQLCODE != 0)
	{
		fn_errlog( c_ServiceName, "S31135", SQLMSG, c_err_msg  );
		return -1;
	}

	SETNULL(sql_nxt_trd_dt);

	strcpy(st_gt_lmt.c_trd_dt, sql_nxt_trd_dt.arr );
	strcpy(st_gt_lmt.c_cln_mtch_accnt, sql_mtch_accnt);
	l_ip_len = (long) sizeof ( struct vw_gt_lmt_dtls);
	st_gt_lmt.c_rqst_typ = LIMIT_X;
	fn_cpy_ddr ( st_gt_lmt.c_rout_crt );

	/*** Commented for Ver 1.1 **
	i_returncode = fn_call_svc( c_ServiceName, c_err_msg, &st_gt_lmt, &st_gt_lmt,
																"vw_gt_lmt_dtls", "vw_gt_lmt_dtls", l_ip_len,
																l_ip_len, 0, "SFO_GET_LIMITS" );

	*** Ver 1.1 ***/

	/*** Added for Ver 1.1 ***/
  fn_userlog(c_ServiceName,"st_gt_lmt.l_gid = :%ld:",st_gt_lmt.l_gid);
  i_returncode = fo_get_trd_limit(c_ServiceName,
                                    st_gt_lmt.c_cln_mtch_accnt,
                                    st_gt_lmt.c_trd_dt,
                                    st_gt_lmt.c_rqst_typ,
                                    st_gt_lmt.c_xchng_cd,
                                    st_gt_lmt.l_gid,
                                    &st_gt_lmt.d_amt,
                                    c_err_msg
                                    );

	/*** Ver 1.1 ****/
	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31140", LIBMSG, c_err_msg );
		fn_userlog(c_ServiceName,"SFO_GET_LIMITS FAIL  ");
		return -1;
	}


	d_bfo_limit = st_gt_lmt.d_amt;

	d_net_fno_limit =  MIN(d_nfo_limit,d_bfo_limit);

	if(DEBUG_MSG_LVL_3){
		fn_userlog( c_ServiceName,"BFO Limit Calculated :%lf:",st_gt_lmt.d_amt);
		fn_userlog( c_ServiceName,"Net FNO limit        :%lf:",d_net_fno_limit);
	}

	fn_userlog(c_ServiceName,"Before EQ limit");

	i_returncode = fn_get_eqsam_limit ( c_ServiceName,
																			sql_mtch_accnt,
																			&d_eq_sam_limit,
																			sql_usr_id,
																			sql_sssn_id,
																			c_err_msg
																		);

	if(i_returncode == -1)
	{
		fn_errlog( c_ServiceName, "S31145", LIBMSG, c_err_msg  );
		return -1;
	}

	*d_free_sam_limit =  sql_fab_nwb_amt + d_eq_sam_limit + MIN(sql_fab_plg_amt , d_net_fno_limit );

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"d_cash_lmt      = :%lf:",d_eq_sam_limit);
		/**fn_userlog(c_ServiceName,"st_gt_lmt.d_amt = :%lf:",st_gt_lmt.d_amt); ** Ver 2.7 */
		fn_userlog(c_ServiceName,"d_net_fno_limit = :%lf:",d_net_fno_limit); /** Ver 2.7 */
		fn_userlog(c_ServiceName,"sql_fab_plg_amt = :%lf:",sql_fab_plg_amt);
		fn_userlog(c_ServiceName,"sql_fab_nwb_amt = :%lf:",sql_fab_nwb_amt);
		fn_userlog(c_ServiceName,"d_free_sam_limit= :%lf:",d_free_sam_limit);
	}
	
	return 0;

}
