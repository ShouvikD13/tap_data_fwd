/********************************************************************************************************/
/*	Program							:	SFO_SPN_PLC_ORD																																*/
/*																																																			*/
/*																																																			*/
/*																																																			*/
/*	Log									:	1.0			03-Mar-2011																														*/
/*											:	1.1			02-Apr-2012																														*/
/*										  : 1.2			10-May-2012	  																												*/
/*										  : 1.4			21-May-2012	  																												*/
/*										  : 1.5			18-Jun-2012	  																												*/
/*										  : 1.6			19-Jul-2012	  																												*/
/*                      : 1.7     19-Jul-2012                                                           */
/*											: 1.8     22-Oct-2012																														*/
/*											: 1.9     07-Nov-2012																														*/
/*                      : 2.0     03-Jan-2013                                                           */
/*											: 2.1     28-Nov-2012																														*/
/*											: 2.2     19-Dec-2012																														*/
/*                      : 2.3     20-Dec-2012                                                           */
/*                      : 2.4     28-Jan-2013                                                           */
/*                      : 2.6     13-Feb-2013                                                           */
/*                      : 2.7     08-Apr-2013                                                           */
/*                      : 2.9     04-Apr-2013                                                           */
/*                      : 3.0     26-Apr-2013                                                           */
/*                      : 3.1     26-Apr-2013                                                           */
/*                      : 3.2     27-May-2013                                                           */
/*                      : 3.3     03-Jun-2013                                                           */
/*                      : 3.4     08-May-2013                                                           */
/*                      : 3.5     18-Jun-2013                                                           */
/*                      : 3.6     02-Jul-2013                                                           */
/*                      : 3.7     04-Jul-2013                                                           */
/*                      : 3.8     12-Jul-2013                                                           */
/*                      : 3.9     02-Aug-2013                                                           */
/*                      : 4.0     01-Oct-2013                                                           */
/*                      : 4.1     12-Sep-2013                                                           */
/*                      : 4.2     16-Oct-2013                                                           */
/*                      : 4.3     28-Oct-2013                                                           */
/*                      : 4.5     18-Dec-2013                                                           */
/*											:	4.6			04-Feb-2013																														*/
/*                      : 4.7     13-Feb-2014                                                           */
/*											:	4.8     11-Mar-2014                                                           */
/*                      : 4.9     21-Jan-2014                                                           */
/*                      : 5.0     31-Jan-2014                                                           */
/*											: 5.1		  13-Feb-2014	                      																		*/
/*											: 5.2		  07-Apr-2014	                      																		*/
/*											: 5.3		  10-Jun-2014	                      																		*/
/*                      : 5.4     10-Mar-2014                                                           */
/*                      : 5.5     02-Jun-2014                                                           */
/*                      : 5.6     09-Sep-2014																														*/
/*                      : 5.7     30-Dec-2014                                                           */ 
/*                      : 5.8     05-Feb-2015                                                           */ 
/*                      : 5.9     19-May-2015                                                           */
/*                      : 6.1     20-May-2015                                                           */
/*                      : 6.2     03-Aug-2015                                                           */
/*											: 6.3			06-Aug-2015																														*/
/*											: 6.4			08-Aug-2015																														*/
/*											: 6.5			12-Oct-2015																														*/
/*                      : 6.6     23-Oct-2015                                                           */
/*                      : 6.7     27-Jan-2016                                                           */
/*                      : 6.8     29-Jan-2016                                                           */
/*                      : 6.9     01-Mar-2016                                                           */
/*                      : 7.0     16-Mar-2016                                                           */
/*                      : 7.2     05-Jul-2016                                                           */
/*											:	7.3			12-Jul-2016																														*/
/*                      : 7.4     12-Aug-2016                                                           */
/*                      : 7.5     29-Aug-2016                                                           */
/*                      : 7.6     29-Aug-2016                                                           */
/*                      : 7.7     05-Dec-2016                                                           */
/*                      : 7.8     14-Jun-2017                                                           */ 
/*                      : 7.9     07-Nov-2017                                                           */
/*                      : 8.0     31-Jan-2017                                                           */
/*                      : 8.1     07-Mar-2018																														*/
/*                      : 8.2     09-Mar-2018                                                           */
/*                      : 8.3     04-May-2018
    */
/*											:	8.4			
		*/
/*                      : 8.5     16-Jul-2018                                                           */
/*                      : 8.6     26-Jul-2018
    */
/*											: 8.7			04-Sep-2018																														*/
/*                      : 8.8     14-Mar-2019                                                           */
/*                      : 8.9     09-May-2019																														*/
/*                      : 9.0     24-Jul-2019                                                           */
/*                      : 9.1     30-Jul-2019                                                           */
/*                      : 9.2     23-Oct-2019                                                           */
/*                      : 9.3     13-Nov-2019                                                           */
/*                      : 9.4     28-Nov-2019                                                           */
/*                      : 9.5     17-Mar-2020                                                           */
/*                      : 9.6     12-Jun-2020                                                           */
/*                      : 9.7     12-OCT-2020                                                           */
/*                      : 9.8     02-OCT-2020                                                           */
/*                      : 9.9     01-Mar-2021                                                           */
/*                      : 10.0    12-Mar-2021                                                           */
/*                      : 10.2    08-Jun-2021                                                           */
/*                      : 10.3    13-Jul-2021                                                           */
/*                      : 10.4    13-Aug-2021                                                           */
/*                      : 10.5    13-Sep-2021                                                           */
/*                      : 10.6    14-Feb-2022                                                           */
/*                      : 10.7    28-Apr-2022                                                           */
/*                      : 10.8    15-May-2022                                                           */
/*                      : 10.9    23-May-2022                                                           */
/*                      : 11.0    13-Jul-2022                                                           */   
/*                      : 11.1    13-Jul-2022                                                           */
/*                      : 11.2    23-Aug-2022                                                           */
/*                      : 11.3    09-Sep-2022                                                           */
/*                      : 11.4    30-sep-2022                                                           */
/*                      : 11.5    30-Sep-2022                                                           */
/*                      : 11.6    02-Nov-2022                                                           */
/*                      : 11.7    04-Nov-2022                                                           */
/*                      : 11.8    23-Nov-2022                                                           */
/*                      : 11.9    06-Dec-2022                                                           */
/*                      : 12.0    22-Dec-2022                                                           */
/*                      : 12.1    30-Dec-2022                                                           */
/*                      : 12.2    19-Jan-2023																														*/
/*                      : 12.3    25-Jan-2023                                                           */
/*                      : 12.4    07-Mar-2023                                                           */
/*                      : 12.5    09-Mar-2023                                                           */
/*                      : 12.6    14-Mar-2023                                                           */
/*                      : 12.7    04-Dec-2022                                                           */
/*                      : 12.8    22-Feb-2023                                                           */
/*                      : 12.9    21-Mar-2023                                                           */ 
/*                      : 13.0    12-Apr-2023                                                            */ 
/*                      : 13.1    20-Apr-2023                                                            */ 
/*                      : 13.2    20-Jun-2023                                                           */
/*                      : 13.3    23-Jun-2023                                                            */
/********************************************************************************************************/
/*																																																			*/
/*	1.0		-		New Release																																								*/
/*	1.1		-		Bug Fix (Swati A.B)																																				*/
/*  1.2   -   Changes for Reports and Max Packet size ERROR Handeling 																	*/
/*						and Declaration of i_sell_square_off_chk (Mahesh Shinde)						                      */
/*  1.3   -   Changes for Skipping price band check in options: Shailesh																*/
/*  1.4   -   Exchange Code Handling (Swati A.B)                                                        */
/*  1.5   -   MEMSET all global and local structure: Mahesh                                             */
/*  1.6   -   check for Square off quantity to give DEBIT_TILL_LIMIT or DEBIT_WHEN_LIMIT treatment.			*/
/*						CR-ISEC14-29721 : Mahesh                                             											*/
/*																																																			*/
/*  1.7   -   Storing ip address in Exchange book: Navina D.                                            */
/* 	1.8		-  	Changes for ROLLOVER: Vishnu																															*/	
/* 	1.9		-  	CR-Overnight Orders Changes (Swati A.B)																										*/	
/*  2.0   -   Bug fix for Squareoff Issue: global variable not initialized  (Navina D.)                 */
/* 	2.1		-  	FNO BSE SPAN RMS changes    (Sandip Tambe)																								*/	
/*	2.2   -   Changes for SLTP FuturePlus. (Vishnu N)																										*/
/*  2.3   -   Broker closeout changes (Mahesh Shinde)                                                   */
/*  2.4   -   Consolidated Order Validation changes   ( Swati A.B )                                     */
/*  2.5   -   Price band relaxation changes   ( Shamili Dalvi. )                                        */
/*  2.6   -   Removal of Limit Alloc/Dealloc in Corp Action Changes	(Swati A.B)                         */
/*  2.7   -   Changes for SPAN DL.NET/ User ID Changes (Vishnu Nair/Bhushan Sonwane)                    */
/*  2.9   -   Index / Stock if condition removed ( Sandeep Patil )                                      */
/*  3.0   -   SPAN IN RIA Changes ( Sandeep Patil )                                                     */
/*  3.1   -   Changes to display MOdify allocation screen on Insufficient Limit ( Sachin Birje )        */
/*  3.2   -   Restrict DBC mapped customer to place order if CLM_TRD_FLG = 'N'  (Bhushan Sonwane)       */
/*  3.3   -   Condition added for CNT Channel (DL .NET Super User)     (Bhushan Sonwane)								*/ 
/*  3.4   -   Bug fix for balance amount and typecast issue (Navina D.)                                 */
/*  3.5   -   SPAN Output String Handling changes (Sandip t)                                            */
/*  3.6   -   Changes in Error code handlingof function contract check  for                             */
/*        -   Modification of orders under BAN period                                                   */
/*  3.7   -   Channel Handling Introduced for New Trade Racer   ( Sandeep Patil )                       */
/*  3.8   -   FuturePLUS SLTP product type validation. (Navina D.)                                      */
/*  3.9   -   CR-ISEC14-40339 FP SLTP Excess qty offline upload  (Navina D.)                            */
/*  4.0   -   Handling of Option Market max sell quantity  (Shashi K)                                   */
/*  4.1   -   OptionPLUS Changes. (Swati A.B)                                                           */
/*  4.2   -   Changes To Handle Invalid Nick Name    (Bhushan Sonwane)                                  */
/*  4.3   -   FNO limit Logging (Swati A.B)                                                             */
/*  4.5   -   SPAN-Normal client mapping check  (Swati A.B)                                             */
/*	4.6		-		OptionPlus  Client and System SquareOff Changes                   												*/
/*  4.7   -   Price range function check added  for OptionPlus cover order(Swati A.B)                   */
/*  4.8   -   OptionPLUS Bug Fix (Bhushan)																															*/
/*  4.9   -   Contract Note Changes (Bhushan Sonwane)                                                   */
/*  5.0   -   FO BSE Ack Number Change (Sachin Birje )                                                  */
/*  5.1		-	  Enabling FP and SLTP FP for NRI clients (Navina D. )																			*/
/*  5.2		-	  FDR Module Changes ( Sachin Birje )                 																			*/
/*  5.3  -		Exception EOS for SLTP Futureplus & OptionPLUS (Navina D.)                                */
/*  5.4  -		Pre-Square off report changes (Swati A.B)  									                              */
/*  5.5   -   FNO Common TNC Changes ( Sachin Birje )                                                   */
/*  5.6   -   View to FML changes (Samip M)																															*/
/*  5.7   -   Error Handling for Sqrf Qty (Vikram G.)                                                   */
/*  5.8   -   Insufficient Limits - Modify Allocation changes for DL .Net (Anand Dhopte)                */ 
/*  5.9   -   FNO VTC Order Placement  (Sachin Birje)                                                   */
/*	6.1   -   Character array c_sys_msg size changed from 4 to 11(Live Bug Fix) (Ritesh D.)             */
/*	6.2   -   Contract Master and Trade Quote Table Merger Changes (Ritesh Deolekar	  									*/
/*	6.3		-		changes related Market to Limit CR for Future Plus SLTP.(Kishor B.)												*/
/*	6.4		-		Include changes for Insider trading check.(Kishor B.)																	  	*/	 
/*  6.5		-		changes related Market to Limit CR for Option Plus.(Kishor B.)														*/	 
/*  6.6   -   OptionPlus to option Conversion changes            (Sachin Birje)                         */
/*  6.7   -   Live Bug Fix for Session Expire (Ritesh Deolekar)                                         */
/*  6.8   -   Migration of RI to NRI            ( Bhupendra Malik)                                      */
/*  6.9   -   Cloud Order Changes     (Kishor B.)                                                       */
/*  7.0   -   Transaction Flag in Check Session IP (Kishor B.)                                          */
/*  7.2   -   Check Session ip common function changes (Navina D.)                                      */
/*	7.3		-		Log Maintenance	(Kishor B.)																																*/
/*  7.4   -   MY EOS changes  (Tanmay W.)                                                               */
/*  7.5   -   Remove the Check of max order value for orders placed in                                  */
/*            Corporate action and Offline order upload process. (Vishal B.)                            */
/*  7.6   -   Trail Future Sltp     (Bhupendra Malik)                                                   */
/*  7.7   -   Transaction through IP for SLTP Futureplus and Optionplus                                 */
/*  7.8   -   Nick name fix for DBC customer in quik exit                                               */ 
/*  7.9   -   Hard Parsing Changes (Varadraj Gramopadhye)                                               */
/*  8.0   -   FFO_XCHNG_RMRKS introdeuced for VTC order (Kishor)                                        */
/*  8.1   -   Rollover With Spread Changes  (Parag Kanojia)																							*/
/*  8.2   -   Fplus & Oplus Offline fix (Navina)                                                        */
/*  8.3   -   PAN No. changes ( Suchita Dabir. )
    */
/*  8.4		-		Physical Settlement of Stock Derivative Changes	( Parag Kanojia )
		*/
/*  8.5   -   Disallow clients with outstanding form taking fresh exposure (Tanmay Patel)               */
/*  8.6   -   Handling deadlock for EOS,Quick exit,sltp cover placement ( suchita )
    */
/*	8.7		-		Physical Settlement of Stock Derivative Changes phase 2 changes	( Bhushan Harekar )       */
/*  8.8		-	  CR-ISEC14-121803:Logic to cosider limit for fresh future order, 													*/
/*														 if existing position in loss (Bhushan Harekar)														*/
/*	8.9		-		EOS enhancements for Physical settlement in F&O Changes	( Parag Kanojia )									*/
/*  9.0   -   Physical delivery margin changes ( Kiran Itkar )                                          */
/*  9.1   -   Negative ammount asked for modify allocation page (Mrinal Kishore)                        */
/*  9.2   -   Ipv6 Format  (Tanmay Patel)                                                               */
/*  9.3   -   CR-ISEC18-127640 Sub-broker dual order placement changes                                  */
/*  9.4   -   Sensibull Integration (Navina D.)			  						                        							*/
/*  9.5   -   FPSL Margin Changes  ( Akash B )                                                          */
/*  9.6   -   Removal of SOVL for FPSL ( Navina D. )                                                    */
/*  9.7   -   Trigger Price CR_ISEC14_140009 ( Suchita )                                                */
/*  9.8   -   Oplus changes CR_ISEC14_139243 ( suchita dabir )                                          */
/*  9.9   -   Minor Change: Multileg Orders in single pipe id  (Sachin Birje)                           */
/*  10.0  -   Minor change - Single Order value limit ( Kiran Itkar )                                   */
/*  10.1  -   Derivative_trd_restrict_CR_ISEC04_152948(Sandip Tambe)                                    */
/*  10.2  -   FNO UCC Changes ( Akash B )                                                               */
/*  10.3  -   Physical settlement in Stock derivatives (Kiran Itkar)                                    */
/*  10.4  -   One Click Derivative Changes ( Gaurav C )                                                 */
/*  10.5  -   Profit order changes ( Suchita Dabir )                                                    */
/*  10.6  -   CR-ISEC14-165712_Disable_OPTCNTRCT_EOSBUYSELL (Shlok Ghan)                                */
/*  10.7  -   CR-ISEC14-169739 -Introduction of Algorithm Trading Strategies(Sachin Birje)              */
/*  10.8  -   CR-ISEC14-170192 Allowing customers to use Options premium for Fresh Option buy ( Suchita Dabir ) **/
/*  10.9  -   CR-ISEC14-163069 Disable market order placement for illiquid options contracts under F&O segment (Roshni Pawar) */ 
/*  11.0  -   SPAN_BOD_MRGN_CR-ISEC14-172812 (Sachin Birje)                                             */
/*  11.1  -   Flash Trade (Naveena)                                                                     */
/*  11.2  -   CR-ISEC14-175042 Pending order value check for Span Customers                             */
/*  11.3  -   Flash Trade - Validation changes (Ravi Malla)                                             */
/*  11.4  -   Unique Iddentifier Changes (Pranav Anand)                                                 */ 
/*  11.5  -   Flash Trade - Validation changes for Future Sell (Ravi Malla)                             */
/*  11.6  -   Option plus live issue - validation on order link on open position page ( Suchita Dabir ) */
/*  11.7  -   CR-ISEC14-175042 Pending order value check for Span Customers bug fix                     */
/*  11.8  -   Flash Spira change to change 5 mins to 15mins																							*/
/*  11.9  -   Minor changes - Changing default customer consent as "Yes"	 													    */	
/*  12.0  -   IN:663 Price range check in the back end for option ( Prajakta Sutar )                    */
/*  12.1  -   CR _ Flash OptionPlus (Ravi Malla)                    																		*/
/*  12.2  -   Increasing size of input string which sends to SPAN BOX																		*/
/*  12.3  -   IN:1074 Options price range check to be removed for Corporate action order placement      */
/*  12.4  -   Minor Changes  Client Lock Changes (Sachin Birje)                                         */
/*  12.5  -   Minor changes- IN:1440 Unique Device Identifier for orders placed through IBT and STWT (Dipin)    */
/*  12.6  -   Minor changes- IN:1446 Orders with zero quantity (Dipin)                                  */
/*  12.7  -   CR-ISEC14-162075 SAM in Currency & Commidity (Tanmay Patel)                               */
/*  12.8  -   Flash Trade in F&O Segment, Till Expiry Spira Changes (Ankita Satav)                      */
/*  12.9  -   CR-ISEC14-174261 Quantity Limit Check for market order to be removed for                  */
/*            overnight Options Product in NIFTY & BANKNIFTY (Roshni Pawar)                             */
/*  13.0  -   Regulatory CR : Real time reporting for margin (Pranav Anand )                            */   
/*  13.1  -   Spira 1753 : 15mins getting mapped instead of Default timer in flash (Ravi Malla)           */   
/*  13.2  -   RQ:2088_backend_utility_for_open_positions (Dipin)                                        */
/*  13.3  -   RQ:3117 FNO GTT CHANGES (Edwin Thomas)						                                        */
/********************************************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_pos.h>
#include <fo_fml_def.h>
#include <eba_to_ors.h>
/** #include <fo_view_def.h> ***/ /** Commented for Ver 5.6 **/
#include <fo_view_def.h>    /** Ver 6.4 **/
#include <fn_span_lib.h>
#include <fn_log.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_val_ord.h> 
#include <fn_session.h>
#define FAILED 'Y'
#include <fml_rout.h> 
#include <fn_read_debug_lvl.h>
#include <math.h>
#define	MAX_PACKET_SIZE	-100			/*** Ver 1.2 Max Packet size handelling ***/
#define PHYDLVRY_MTM -7           /**** Ver 9.0 ***/

EXEC SQL INCLUDE "table/fum_fo_undrlyng_mstr.h";
EXEC SQL INCLUDE "table/icd_info_client_dtls.h"; /*** Ver 6.8 ***/

int fn_check_inp_spn( char *c_ServiceName,
                  		struct st_xchngbook *ptr_st_xchngbook,
                  		struct st_cntrct_qt *ptr_st_cntrct_qt,
                  		char c_fum_mrkt_typ,                 
                  		char c_fcm_mrkt_typ,                
											int i_rollover_ord_ind,                 /*** Ver 8.1 ***/
                      char *c_spd_expry_dt1,                   /*** Ver 8.1 ***/
                      char *c_spd_expry_dt2,                   /*** Ver 8.1 ***/
                  		struct st_err_msg *ptr_st_err_msg );

int fn_check_ord_spn( char *c_ServiceName,
                  		struct st_cntrt_gen_inf *ptr_st_cntrt_geninf,
                  		struct st_xchngbook *ptr_st_xchngbook,
                  		struct st_orderbook *ptr_st_ordbook,
                  		struct st_err_msg *ptr_st_err_msg ) ;

int fn_get_trdng_dtls(  char *user_id,
                        char *mtch_accnt,
                        char *trd_flag,
                        char *prod_code );  

int fn_cal_plc_pos	( char	*c_ServiceName,
											char	*c_err_msg,
											struct st_pstn_actn *ptr_st_pstn_actn
             				);

int fn_call_actn_spn ( 	char *c_ServiceName,
												char	*c_pipe_id,
  											struct st_pstn_actn *ptr_st_pstn_actn,
  											struct st_fus_undrlyng_pstn	*ptr_st_undfut_pos_crrnt,
  											struct st_fus_undrlyng_pstn	*ptr_st_undfut_pos_to_be,
  											struct st_err_msg *ptr_st_err_msg
										 );

int fn_cover_sltpfp ( char  *c_ServiceName,
											char  *c_cover_ord_ref,
											struct st_orderbook *ptr_st_ordbook, 
											struct st_pstn_actn *ptr_st_pstn_actn, 
											struct st_err_msg *ptr_st_err_msg 
										);																		/** Ver 2.2 **/

int fn_eos_sltpfp ( char  *c_ServiceName,
                    char  *c_cover_ord_ref,
                    struct st_orderbook *ptr_st_ordbook, 
                  	struct st_err_msg *ptr_st_err_msg 
									);																			/** Ver 2.2 **/

int fn_off_sltpfp ( char  *c_ServiceName,
                    char  *c_fresh_ord_ref,
                    struct st_orderbook *ptr_st_ordbook,
                    struct st_err_msg *ptr_st_err_msg
                   );                                         /*** Ver 3.9 ***/


/*** Ver 5.3 starts ***/
int fn_excpt_eos_fplsoptpls ( char  *c_ServiceName,												
															char  *c_cover_ord_ref,
															struct st_orderbook *ptr_st_ordbook,
															struct st_pstn_actn *ptr_st_pstn_actn, 
															struct st_err_msg *ptr_st_err_msg
														);     
/*** Ver 5.3 ends ***/

int fn_get_quote_zero ( char *c_ServiceName, char c_ord_flw, long l_best_bid_price, long l_best_offer_price, long l_previous_close_price, long *l_quote_zero);   /*** Added in Ver 8.9 ***/

int fn_itmotm_strk_exsts(char *c_ServiceName, char *c_expry_dt,struct st_contract *ptr_st_cntrct, char *c_err_msg); /*** Ver 12.9 ***/

struct st_pstn_actn *ptr_st_pstn_actn;
struct st_fus_undrlyng_pstn st_undpstn_crrnt;
struct st_fus_undrlyng_pstn st_undpstn_tobe;
struct st_fus_undrlyng_pstn st_undrlyng_pstn;
struct st_fcp_cntrct_pstn st_cntrct_pstn;
struct st_usr_prfl st_usrprfl;
struct st_err_msg *ptr_st_err_msg;

char c_pipe_id[3];
char c_usr_id[15];
char c_mtm_flag;
char c_expry_dt[22];
char c_chk_channel[4];   /*** Added On 10-Dec-2011 ***/

/** int  i_sell_square_off_chk = 0;		***Ver 1.2***/

/*** Commented in Ver 2.0 ***
double  d_spn_mrgn     = 0.0;
double 	d_blkd_prmum	=	0.0;
double 	d_opt_prmum 	= 0.0; 
double 	d_total_prmum =	0.0; 
double  d_expsr 			= 0.0;
double 	d_undrlyng_pl	= 0.0;
double  d_oblckd_amnt = 0.0;
double  d_square_off_prmum = 0.0;
***/

double d_required_amount=0.0;  /** Ver 3.1 **/

FILE  *fp ;

void SFO_SPN_PLC_ORD( TPSVCINFO *rqst )
{ 


	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  char	c_ServiceName[33];
  char 	c_usm_sup_usr_typ;
  char 	c_channel[4];
  char 	c_alias[9];
  char 	c_bp_id[9];
  char 	c_err_msg[256];
  char 	c_msg[256];
  char 	c_trdng_psswrd_flg = YES;
  char 	c_temp_psswrd[LEN_USR_TRDNG_PSSWRD];
  char 	c_fno_dmn_nm [ 16 ];
  char 	c_fno_trg_nm [ 16 ];
  char 	c_fno_trg_dat [ 256 ];
  /** char 	c_xchng_ack [ 16 ];  Ver 5.0 **/
  char  c_xchng_ack [ 20 ];      /*** Ver 5.0 **/   
  char 	c_user_id[15];         
  char 	prd[4] = "FNO";        
  char 	c_trd_dtls;           
  char 	c_roll_stts;         
  char 	c_sys_msg[15];  /*** Ver 6.1 Array size increased from 4 to 11 ***/  /* VER TOL : TUX ON LINUX -- Size changed from 11 to 15 (Ravindra) */   
  char 	c_can_req;          
  char 	c_can_sqr_off;      
  char  c_svc_name [15+1]; 
  char 	c_fum_mrkt_typ;    
  char 	c_fcm_mrkt_typ;   
  char 	c_seq_num[9];
  char  c_ip_address[45+1]="\0";  /** Changed to 45 from 15 in Ver 9.2 **/  /* Ver 1.7 */
	char  c_trd_flg ='\0';      /***  Ver 2.7 ***/
	char c_cover_ord_ref[19]; /* Ver 2.2 */
  char c_sltp_allwd = '\0'; /* Vet 2.2 */
  char c_sltp_eos 	= '\0';   /* Vet 2.2 */
  char c_actn_flg = '\0';   /* Vet 4.3 */
  char c_request_typ = 'P';   /* Vet 2.3 */
  char c_ord_val_flg = 'N';     /* Ver 2.4 */
	char c_cumopn_val_flg = 'N';     /* Ver 2.4 */
	char c_srvc_call_flg = '\0';     /* Ver 2.4 */
  char c_corp_typ = '\0';     /* Ver 2.6 */
	char c_call_source[20] = "\0";	/* Ver 3.8 */
  char c_modfyscrn_flg='N';  /** Ver 3.1 **/
	char c_fresh_ord_ref[19] = "\0"; /* Ver 3.9 */
	char c_ordr_ref_to_upd[19] = "\0"; /* Ver 3.9 */
  char c_spn_flg;               /* Ver 4.5 */
  char c_bse_spn_flg;           /* Ver 4.5 */
	char c_lmt_allwd_flg;					/* Ver 6.3 */
  char c_source_flg='\0';       /** Ver 6.9 **/
  char c_txn_flg='Y';             /*** Ver 7.0 ***/
	char c_sltp_trail_flag='N';   /** Ver 7.6 **/
  char c_trail_usr_flg='\0'; /*** Ver 7.6 ***/
  char c_myeos_frs_ord_ref[19] = "\0"; /*** Ver 7.4 ***/
	char c_xchng_remarks[256] = "\0"; /*** Ver 8.0 ***/
  int i_pnd_stts = 0 ;           /*** Ver 7.4 ***/
  int i_open_qt = 0 ;           /*** Ver 7.4 ***/  

  char c_mleg_pipe_id[3];       /* Ver 9.9 */

	char c_clm_trd_flg='N';         /* ver 7.9 */
	char c_fcm_run_stts_p='P';      /* ver 7.9 */
	char c_fod_fc_flag_c='C';       /* ver 7.9 */
	char c_fod_fc_flag_f='F';       /* ver 7.9 */
	char c_exg_mkt_typ='D';         /* ver 7.9 */
  char c_ucc_flg='N';            /* Ver 10.2 */
  char c_1clk_flg='\0';           /** Ver 10.4 **/
  char c_1clk_prtflio_id[11];     /** Ver 10.4 **/

  char *null_ptr_str  = 0;  /** Ver 13.2 **/

  char c_fod_fc_flag_t='T';       /* ver 10.5 */
/** ver 10.5 starts***/
  char c_nkd_blkd_flg='\0';
  double d_prft_percntg = 0.0;
  char c_profit_ordr[19]="\0";
  long l_sltp_trg_prft = 0;
  double d_frsh_exe_val = 0.0;
  long  li_tot_exec_qty = 0;
  double d_avg_prc = 0;
  char c_rqst_typ='\0';
  char c_cvr_ordr_flw='\0';
  long l_ret_limit_rt=0;
  char c_sub_rqst = '\0' ;
/** ver 10.5 ends ***/

	
  varchar	c_expiry_dt [ LEN_DATE ];
  varchar v_user_id [ 9 ];       
  varchar v_user_id_bkup [ 9 ]; 
  varchar c_date[9];
  varchar c_trd_dt[LEN_DATE];
	varchar c_nrml_trd_dt[LEN_DATE];   /*** Ver 1.9 ***/
  varchar c_sysdate[LEN_DATE];
  varchar c_usr_usr_psswrd[50+1];
 
  varchar v_pan_no[ 31 ]; /** Added in ver 8.3 **/
  MEMSET( v_pan_no ); /** Added in ver 8.3 **/

  varchar c_ven_id[50+1];  /*** Ver 9.4 ***/
  varchar c_ven_nm[15] = {'\0'};        /*** Ver 9.4 ***/
	MEMSET (c_ven_id);			 /*** Ver 9.4 ***/
  MEMSET(c_err_msg);  /* Ver 10.6 **/

  varchar c_algo_ord_rmrks[50];  /** ver 10.7 **/
  varchar c_algo_id[50];  /** ver 10.7 **/

  long l_sqroff_tm=0; /*** Ver 11.1 ***/
	/*** Ver 11.3 start***/	
 	long l_buy_exe_qty=0;
 	long l_sell_exe_qty=0; 
 	long l_sell_ord_qty=0;
 	long l_buy_ord_qty=0; 

	long l_fe_sell_qty=0;
	long l_fe_buy_qty=0;
	long l_fp_sell_qty=0;
	long l_fp_buy_qty=0;

	long l_site_sell=0;
	long l_site_buy=0;
	long l_site_osell=0;
	long l_site_obuy=0;

	char c_popup_flg='\0';	
	char c_popup='P';
	int fav_cnt=0;
	int fut_cnt=0;  /*** Ver 11.5 ***/
	int i_popup=0;  /*** Ver 11.9 ***/ 
	/*** Ver 11.3 end***/	


  /*** ver 8.6 starts ***/
  char c_sltplck_ord_ref[19];
  char c_sltp_ord_rfrnc_lck[2][19];
  char c_ordr_rfrnc_lck[2][19];
  /*** ver 8.6 ends **/

  int i_mtm_flg = 0;    
  int i_returncode;
  int i_level_exists;
  int i_trnsctn;
  int i_err[30];  
  int i_ferr[30];
  int i_cnt;
  int i_ip_len;
  int i_op_len;
  int i_counter = 1;
 	int i_condition = 1;
	int i_rtrn_cd;
	int	i_rtrn_xchngbk;
	int	i_cntrct[11];
	int	i_cntrcterr[11];
	int	i_usrprfl[3];
	int	i_usrprflerr[3];
	/*** int	i_xchngbk[14];  --commented In Ver 1.1 ***/
  /*** int i_xchngbk[15];       *** Ver 1.1 *** Commented In Ver 2.6 ***/
  /*** int i_xchngbk[16];        *** Ver 2.6 *** Commented in Ver 8.0 ***/
	int i_xchngbk[17];    /*** Ver 8.0 ***/
	/*** int	i_xchngbkerr[14]; --commented In Ver 1.1 ***/
  /*** int i_xchngbkerr[15];     *** Ver 1.1 *** Commented In Ver 2.6 ***/
  /*** int i_xchngbkerr[16];     *** Ver 2.6 *** Commented in Ver 8.0 ***/
	int i_xchngbkerr[17];  /*** Ver 8.0 ***/
	int	i_ordrbk[20];
	int	i_ordrbkerr[20];
	int	i;
	int	j;
	int	k;
	int	l;
	int i_corp_rec_exists = 0 ;  /*** Ver 1.9 ***/
/***	int  i_sell_square_off_chk = 0;		** Ver 1.2	***/
	int i_actn_id=-1;     /*** Ver 3.0 ***/
  int i_is_dbc_cust = 0;            /***  Ver 3.2 ***/
	int i_excp_flag = 0; /*** Ver 5.3 ***/
	int insider_exist = 0;  /** Ver 6.4 **/

  TPTRANID tranid  ; /*** Ver 4.3 ***/
	
	/*** ver 10.6 start ***/
  char c_buy_allwd = '\0';
  char c_sell_allwd = '\0';
  /*** ver 10.6 end ***/

  char c_mrkt_ordr_flg = '\0'; /*** ver 10.9 ***/

  long  l_record_cnt 	= 0;
  long  l_token =0 ;
  long  l_opnpstn_qty = 0;
  long  l_can_qty = 0;
  long  l_open_qty = 0; 
  long  l_exprd_qty = 0; 
  long  l_ord_lmt_rt=0;  
	long	li_aval_ordqty	=	0;
  long  int li_max_sell_ordqty  = 0; /*** Ver 4.0 ***/
  long 	l_ord_seq_num		= 0;
  long 	l_xchng_seq_num	= 0;
  long  l_cvr_qty = 0.0 ;      /***  Ver 3.0 ***/
  long  l_rws_qty = 0;  /*** Ver 8.1 ***/ 
  long  l_opn_qty = 0.0 ;      /***  Ver 3.0 ***/
  long  l_old_ord_qty = 0;     /*** Ver 8.5 ***/
	double  d_fum_trail_amt =0;    /** Ver 7.6 **/	

	/***** Ver 8.1 Starts *****/
  int i_rollover_ord_ind = 0;
  long l_expry_dt1 = 0;
  long l_expry_dt2 = 0;

  char c_expry_dt2[LEN_DATE];
  char c_spd_expry_dt1[LEN_DATE];
  char c_spd_expry_dt2[LEN_DATE];

  MEMSET(c_expry_dt2);
  MEMSET(c_spd_expry_dt1);
  MEMSET(c_spd_expry_dt2);
  /***** Ver 8.1 Ends *****/

  double	d_totordrval = 0.0000;
	double  d_netadj_ord_val = 0.0000;  /*** Ver 2.4 ****/

	/*** Ver 8.4 Starts ***/
  char c_dlvry_pos_allwd = 'Y';
  char c_setlmnt_flg = 'C';
  char c_dlvry_eos_flg = 'N';
  /*** Ver 8.4 Ends ***/

	/*** Ver 8.9 Starts ***/
  int  i_phy_sqroff_check = 0;
  long l_quote_zero = 0;
  long l_best_bid_price = 0;
  long l_best_offer_price = 0;
  long l_previous_close_price = 0;
  /*** Ver 8.9 Ends ***/

  char c_cntrct_pstn_flw = '\0'; /*** Ver 11.2 ***/
  long l_cntrct_pstn_qty = 0;    /*** Ver 11.2 ***/
	long l_cvr_pstn_qty = 0;       /*** Ver 11.7 ***/

  int i_skip_flag = 0;               /*** ver 12.9 ***/
  long int li_max_buy_ordqty  = 0;   /*** ver 12.9 ***/

	/***** Ver 1.5 MEMSET all global structure ****/
  MEMSET (ptr_st_pstn_actn);
  MEMSET (st_undpstn_crrnt);
  MEMSET (st_undpstn_tobe);
  MEMSET (st_undrlyng_pstn);
  MEMSET (st_cntrct_pstn);
  MEMSET (st_usrprfl);
  MEMSET (ptr_st_err_msg);
  /***** Ver 1.5  ****/

  /*** ver 8.6 startes ***/
  MEMSET( c_sltplck_ord_ref );
  MEMSET(c_sltp_ord_rfrnc_lck);
  MEMSET(c_ordr_rfrnc_lck);
  MEMSET(c_cover_ord_ref);
  /*** ver 8.6 ends ***/

  struct st_contract st_cntrct;
  struct st_cntrctlong_qt st_cntrctlongqt;
  struct st_orderbook st_ordbk;
  struct st_xchngbook st_xchngbk;	
  struct st_cntrct_qt st_cntrctqt;
  struct st_sequence st_s_sequence;
  struct st_sequence st_r_sequence;
  struct st_pstn_actn st_actn;
  struct st_cntrt_gen_inf st_cntrct_geninf;
	struct st_fus_undrlyng_pstn st_undrlyng_pstn;
  struct st_fcp_cntrct_pstn st_cntrct_pstn;
  struct st_err_msg st_errmsg;
	struct vw_usr_prfl st_usr_prfl1;				/** Ver 6.4 **/
  struct vw_usr_prfl st_usrprfl_vw;    /*** Ver 7.2 ***/
  struct vw_err_msg st_errmsg_vw;    /*** Ver 7.2 ***/
  struct vw_contract st_contrct;     /*** Ver 8.5 ***/
  struct vw_contract st_cntrct_ins;  /*** Ver 10.1***/

	/***** Ver 1.5 MEMSET all local structure ****/
  MEMSET (st_cntrct);
  MEMSET (st_cntrctlongqt);
  MEMSET (st_ordbk);
  MEMSET (st_xchngbk);
  MEMSET (st_cntrctqt);
  MEMSET (st_s_sequence);
  MEMSET (st_r_sequence);
  MEMSET (st_actn);
  MEMSET (st_cntrct_geninf);
  MEMSET (st_undrlyng_pstn);
  MEMSET (st_cntrct_pstn);
  MEMSET (st_errmsg);
  /***** Ver 1.5 MEMSET all local structure ****/

  MEMSET(c_mleg_pipe_id);   /** Ver 9.9 **/
	
	MEMSET(c_sys_msg); /** Ver 2.2 **/

  MEMSET(c_temp_psswrd);  /*** Ver 3.1 ***/
  MEMSET(c_usr_usr_psswrd);  /*** Ver 3.1 ***/

  MEMSET(st_usrprfl_vw);    /*** Ver 7.2 ***/
  MEMSET(st_errmsg_vw);   /*** Ver 7.2 ***/

  MEMSET (st_contrct);    /*** Ver 8.5 ***/
  MEMSET (st_cntrct_ins); /*** Ver 10.1 **/

  EXEC SQL INCLUDE "table/usr_user_master.h";        


  ptr_fml_Ibuf = (FBFR32 *)rqst->data;

  strcpy( c_ServiceName, rqst->name );

  INITDBGLVL(c_ServiceName);


	i_cntrct		[	0	]		=	Fget32( ptr_fml_Ibuf ,FFO_CSE_ID,0,(char *) &st_cntrct.l_eba_cntrct_id,0);
	i_cntrcterr	[	0	]		=	Ferror32;
	i_cntrct		[	1	]		=	Fget32( ptr_fml_Ibuf ,FFO_XCHNG_CD,0,(char *) st_cntrct.c_xchng_cd,0);
  i_cntrcterr [ 1 ] 	= Ferror32;
	i_cntrct		[	2	]		=	Fget32( ptr_fml_Ibuf ,FFO_PRDCT_TYP,0,(char *) &st_cntrct.c_prd_typ,0);
  i_cntrcterr [ 2 ] 	= Ferror32;
	i_cntrct		[	3	]		=	Fget32( ptr_fml_Ibuf ,FFO_UNDRLYNG,0,(char *) st_cntrct.c_undrlyng,0);
  i_cntrcterr [ 3 ] 	= Ferror32;
	i_cntrct		[	4	]		=	Fget32( ptr_fml_Ibuf ,FFO_EXPRY_DT,0,(char *) st_cntrct.c_expry_dt,0);
  i_cntrcterr [ 4 ] 	= Ferror32;
	i_cntrct		[	5	]		=	Fget32( ptr_fml_Ibuf ,FFO_EXER_TYP,0,(char *) &st_cntrct.c_exrc_typ,0);
  i_cntrcterr [ 5 ] 	= Ferror32;
	i_cntrct		[	6	]		=	Fget32( ptr_fml_Ibuf ,FFO_OPT_TYP,0,(char *) &st_cntrct.c_opt_typ,0);
  i_cntrcterr [ 6 ] 	= Ferror32;
	i_cntrct		[	7	]		=	Fget32( ptr_fml_Ibuf ,FFO_STRK_PRC,0,(char *) &st_cntrct.l_strike_prc,0);
  i_cntrcterr [ 7 ] 	= Ferror32;
	i_cntrct		[	8	]		=	Fget32( ptr_fml_Ibuf ,FFO_CTGRY_INDSTK,0,(char *) &st_cntrct.c_ctgry_indstk,0);
  i_cntrcterr [ 8 ] 	= Ferror32;
	i_cntrct		[	9	]		=	Fget32( ptr_fml_Ibuf ,FFO_CA_LVL,0,(char *) &st_cntrct.l_ca_lvl,0);
  i_cntrcterr [ 9 ] 	= Ferror32;
	i_cntrct		[	10 ]	=	Fget32( ptr_fml_Ibuf ,FFO_PIPE_ID,0,(char *) st_cntrct.c_rout_crt,0);
  i_cntrcterr [ 10 ] 	= Ferror32;

	for ( i=0	;	i < 11 ;	i++ )
	{
		if ( (i_cntrct[ i ] == -1 ) && (i_cntrcterr[ i ]	!= FNOTPRES ) )
    {
    	fn_userlog( c_ServiceName, "Error in :%d:",i );
      fn_errlog( c_ServiceName, "S31005", Fstrerror32( i_cntrcterr[i]),c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
	}
  /** ver 10.5 starts **/
    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_NKD_BLKD_FLG,0,(char *)&c_nkd_blkd_flg,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
        fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
  fn_userlog( c_ServiceName," CTCL AFTR FETCHING FROM FML c_nkd_blkd_flg :%c:",c_nkd_blkd_flg);
  /*** ver 10.5 ends ***/

	i_usrprfl			[	0	]	=	Fget32( ptr_fml_Ibuf ,FFO_USR_ID,0,(char *) st_usrprfl.c_user_id,0);
	i_usrprflerr	[	0	]	=	Ferror32;
	i_usrprfl			[	1	]	=	Fget32( ptr_fml_Ibuf ,FFO_SSSN_ID,0,(char *) &st_usrprfl.l_session_id,0);
  i_usrprflerr  [ 1 ] = Ferror32;
	i_usrprfl			[	2	]	=	Fget32( ptr_fml_Ibuf ,FFO_EBA_MTCH_ACT_NO,0,(char *) st_usrprfl.c_cln_mtch_accnt,0);
  i_usrprflerr  [ 2 ] = Ferror32;

	for ( j=0 ; j < 3  ; j++ )
  {
    if ( i_usrprfl [ j ] == -1 && i_usrprflerr [ j ] !=  FNOTPRES )
    {
      fn_userlog( c_ServiceName, "Error in :%d:",j );
      fn_errlog( c_ServiceName, "S31015", Fstrerror32( i_usrprflerr [j]),c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
  }

	memcpy(&st_usr_prfl1,&st_usrprfl,sizeof (struct vw_usr_prfl));	/** Ver 6.4 **/	

	i_xchngbk			[	0	]	=	Fget32( ptr_fml_Ibuf ,FFO_XCHNG_CD,0,(char *) st_xchngbk.c_xchng_cd,0);
	i_xchngbkerr	[	0	]	=	Ferror32;
	i_xchngbk			[	1	]	=	Fget32( ptr_fml_Ibuf ,FFO_PIPE_ID,0,(char *)	st_xchngbk.c_pipe_id,0);
  i_xchngbkerr  [ 1 ] = Ferror32;
	i_xchngbk			[	2	]	=	Fget32( ptr_fml_Ibuf ,FFO_MOD_TRD_DT,0,(char *) st_xchngbk.c_mod_trd_dt,0);
  i_xchngbkerr  [ 2 ] = Ferror32;
	i_xchngbk			[	3	]	=	Fget32( ptr_fml_Ibuf ,FFO_LMT_MKT_SL_FLG,0,(char *)	&st_xchngbk.c_slm_flg,0);
  i_xchngbkerr  [ 3 ] = Ferror32;
	i_xchngbk			[	4	]	=	Fget32( ptr_fml_Ibuf ,FFO_DSCLSD_QTY,0,(char *) &st_xchngbk.l_dsclsd_qty,0);
  i_xchngbkerr  [ 4 ] = Ferror32;
	i_xchngbk			[	5	]	=	Fget32( ptr_fml_Ibuf ,FFO_ORD_TOT_QTY,0,(char *) &st_xchngbk.l_ord_tot_qty,0);
  i_xchngbkerr  [ 5 ] = Ferror32;
	i_xchngbk			[	6	]	=	Fget32( ptr_fml_Ibuf ,FFO_LMT_RT,0,(char *) 	&st_xchngbk.l_ord_lmt_rt,0);
  i_xchngbkerr  [ 6 ] = Ferror32;
	i_xchngbk			[	7	]	=	Fget32( ptr_fml_Ibuf ,FFO_STP_LSS_TGR,0,(char *) &st_xchngbk.l_stp_lss_tgr,0);
  i_xchngbkerr  [ 7 ] = Ferror32;
	i_xchngbk			[	8	]	=	Fget32( ptr_fml_Ibuf ,FFO_ORD_VALID_DT,0,(char *) st_xchngbk.c_valid_dt,0);
  i_xchngbkerr  [ 8 ] = Ferror32;
	i_xchngbk			[	9	]	=	Fget32( ptr_fml_Ibuf ,FFO_ORD_TYP,0,(char *) &st_xchngbk.c_ord_typ,0);
  i_xchngbkerr  [ 9 ] = Ferror32;
	i_xchngbk			[	10]	=	Fget32( ptr_fml_Ibuf ,FFO_ACK_TM,0,(char *) st_xchngbk.c_ack_tm,0);
  i_xchngbkerr  [ 10] = Ferror32;
	i_xchngbk			[	11]	=	Fget32( ptr_fml_Ibuf ,FFO_SPL_FLG,0,(char *) &st_xchngbk.c_spl_flg,0);
  i_xchngbkerr  [ 11] = Ferror32;
	i_xchngbk			[	12]	=	Fget32( ptr_fml_Ibuf ,FFO_ORDR_FLW,0,(char *) &st_xchngbk.c_ordr_flw,0);
  i_xchngbkerr  [ 12] = Ferror32;
	i_xchngbk			[	13]	=	Fget32( ptr_fml_Ibuf ,FFO_SPRD_ORD_IND,0,(char *) &st_xchngbk.c_sprd_ord_ind,0);
  i_xchngbkerr  [ 13] = Ferror32;
  i_xchngbk     [ 14] = Fget32( ptr_fml_Ibuf ,FFO_REMARKS,0,(char *) st_xchngbk.c_xchng_rmrks,0); /* Ver 1.1 */
  i_xchngbkerr  [ 14] = Ferror32;   /* Ver 1.1 */
  i_xchngbk     [ 15] = Fget32( ptr_fml_Ibuf ,FFO_USR_FLG,0,(char *) &c_corp_typ,0); /* Ver 2.6 */
  i_xchngbkerr  [ 15] = Ferror32;   /* Ver 2.6 */
  i_xchngbk     [ 16] = Fget32( ptr_fml_Ibuf ,FFO_XCHNG_RMRKS,0,(char *) c_xchng_remarks,0); /* Ver 8.0 */
  i_xchngbkerr  [ 16] = Ferror32;   /* Ver 8.0 */

	 /*** for ( k=0 ; k < 14  ; k++ )  -- commented in Ver 1.1 ***/
  /*** for ( k=0 ; k < 15  ; k++ )      *** Ver 1.1 *** commented For Ver 2.6 ***/
  /*** for ( k=0 ; k < 16  ; k++ )       *** Ver 2.6 *** commented in Ver 8.0 ***/
  for ( k=0 ; k < 17  ; k++ )         /*** Ver 8.0 ***/
  {
    if ( i_xchngbk [ k ] == -1 && i_xchngbkerr [ k ] !=  FNOTPRES )
    {
      fn_userlog( c_ServiceName, "Error in :%d:",k );
      fn_errlog( c_ServiceName, "S31020", Fstrerror32( i_xchngbkerr[k] ),c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if ( k == 11 )
		{
			if ( i_xchngbkerr [k] == FNOTPRES && i_xchngbk [k] == -1)
			{
				st_xchngbk.c_spl_flg			=	'*';
				st_xchngbk.c_sprd_ord_ind	=	'*';
			}
		}
	
		if ( k == 14 )                 /*** Ver 1.1 ***/
    {
      if ( i_xchngbkerr [k] != FNOTPRES && i_xchngbk [k] == -1)
      {
        fn_userlog( c_ServiceName, "st_xchngbk.c_xchng_rmrks is :%s:",st_xchngbk.c_xchng_rmrks );
      }
    }

		if ( k == 15 )
    {
      if ( i_xchngbkerr [k] == FNOTPRES && i_xchngbk [k] == -1)
      {
       	fn_userlog( c_ServiceName, " --Swati Inside FNOTPRES condition ");
				c_corp_typ = 'N';
      }
    }

    if( k == 16 )  /** Added in Ver 8.0 **/
    {
      if ( i_xchngbkerr [k] == FNOTPRES && i_xchngbk [k] == -1)
      {
          strcpy(c_xchng_remarks,"*");
      }
    }


  }

	if(st_xchngbk.c_xchng_rmrks[0] == 0 )
	{
		strcpy(st_xchngbk.c_xchng_rmrks,"*");
	}

  if( st_xchngbk.c_ord_typ == VTC_ORDER && strcmp(st_ordbk.c_channel,"SYS") ==0 )  /*** Ver 8.0 ***/
  {
    strcpy(st_xchngbk.c_xchng_rmrks,c_xchng_remarks);
  }
	else if( strstr( c_xchng_remarks,"Physical Settlement EOS"))  /*** Added in Ver 8.4 ***/
	{
		strcpy(st_xchngbk.c_xchng_rmrks,c_xchng_remarks);
	}
  /** ver 13.2 starts **/
  else if(strstr(c_xchng_remarks,"PanAdharEOS|"))                                  
  {
   strcpy(st_xchngbk.c_xchng_rmrks,strtok(c_xchng_remarks,"|"));
   MEMSET(st_xchngbk.c_xchng_rmrks); 
   strcpy(st_xchngbk.c_xchng_rmrks,strtok(null_ptr_str,"|"));
  }
  /** ver 13.2 ends **/
  strcpy ( ( char * )c_expiry_dt.arr, st_cntrct.c_expry_dt );
  SETLEN ( c_expiry_dt );

  /*** Ver 9.9 Starts Here ***/
  if( st_xchngbk.c_spl_flg == ROLLOVER_WITH_SPREAD ||
      st_xchngbk.c_spl_flg == ROLLOVER ||
      st_xchngbk.c_spl_flg == L2_ORDER ||
      st_xchngbk.c_spl_flg == L3_ORDER ||
      st_xchngbk.c_spl_flg == JOINT_SQUAREOFF
    )
  {
    MEMSET(c_mleg_pipe_id);
    strcpy(c_mleg_pipe_id,"NA");
    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_INDX_CD,0,(char *)c_mleg_pipe_id,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
     if ( Ferror32 != FNOTPRES )
     {
       fn_errlog( c_ServiceName, "S31025", Fstrerror32( i_ferr[0] ),c_err_msg); 
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
       Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
     }
     else if( Ferror32 == FNOTPRES )
     {
       strcpy(c_mleg_pipe_id,"NA");
     }
    }

    fn_userlog(c_ServiceName,"c_mleg_pipe_id :%s:",c_mleg_pipe_id);

    if(strcmp(c_mleg_pipe_id,"NA") !=0 )
    {
      strcpy(st_xchngbk.c_pipe_id,c_mleg_pipe_id);
    }

    fn_userlog(c_ServiceName,"st_xchngbk.c_pipe_id :%s:",st_xchngbk.c_pipe_id);
  }
  /*** Ver 9.9 Ends Here ***/

	strcpy(c_pipe_id,st_xchngbk.c_pipe_id);

  if(DEBUG_MSG_LVL_1) /** Ver 7.3 **/
  {
    fn_userlog( c_ServiceName, "User id :%s:,Match Account :%s:,Underlyng :%s:",st_usrprfl.c_user_id,st_usrprfl.c_cln_mtch_accnt,st_cntrct.c_undrlyng);
    fn_userlog( c_ServiceName, "Session id :%ld:,Exchange code :%s:,Product Type  :%c:", st_usrprfl.l_session_id,st_cntrct.c_xchng_cd,st_cntrct.c_prd_typ);
    fn_userlog( c_ServiceName, "Expiry date :%s:,Excercise Type:%c:,Order flow B/S:%c:", c_expiry_dt.arr,st_xchngbk.c_ordr_flw,st_cntrct.c_ctgry_indstk);
	}

	/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
	if(DEBUG_MSG_LVL_3)	/*** Changed from 0 to 3 in Ver 7.3 ***/
  {
   	fn_userlog( c_ServiceName, "Lmt/Mkt/StpLss:%c:", st_xchngbk.c_slm_flg );
   	fn_userlog( c_ServiceName, "GTT/GTD Order :%c:", st_xchngbk.c_ord_typ );
   	fn_userlog( c_ServiceName, "Disclosed Qty :%ld:", st_xchngbk.l_dsclsd_qty );
   	fn_userlog( c_ServiceName, "Stop Loss Trgg:%ld:", st_xchngbk.l_stp_lss_tgr );
   	fn_userlog( c_ServiceName, "Order Qty     :%ld:", st_xchngbk.l_ord_tot_qty );
   	fn_userlog( c_ServiceName, "Limit Rate    :%ld:", st_xchngbk.l_ord_lmt_rt );
   	fn_userlog( c_ServiceName, "special flag    :%c:", st_xchngbk.c_spl_flg );
   	fn_userlog( c_ServiceName, "st_xchngbk.c_xchng_cd :%s:", st_xchngbk.c_xchng_cd );  /*** Ver 2.3 ***/
   	fn_userlog(c_ServiceName,	 "PIPE ID IS :%s:",st_xchngbk.c_pipe_id);
    fn_userlog( c_ServiceName, "st_xchngbk.c_xchng_rmrks is :%s:",st_xchngbk.c_xchng_rmrks ); /*** Ver 1.1 ***/
 	}

  /*** Ver 12.6 starts ***/
  if(st_xchngbk.l_ord_tot_qty == 0)
  {
    fn_userlog(c_ServiceName, "Place order with valid quantity.");
    strcpy(c_err_msg,"Place order with valid quantity");
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
 /*** Ver 12.6 ends  ***/
	/*** Ver 3.0 Starts ***/

  if( st_cntrct.c_prd_typ == 'P' )
  {
    fn_errlog( c_ServiceName, "B23008",DEFMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Ver 3.0 Ends   ***/

		/**** Ver 7.6 Starts ****/
	i_returncode=Fget32(ptr_fml_Ibuf,FFO_BNK_TRN_TYP,0,(char*)&c_sltp_trail_flag,0);
	i_ferr[0]  = Ferror32;
	if (( i_returncode == -1 ) && (i_ferr[0] != FNOTPRES ))
	{
		  fn_errlog( c_ServiceName, "S31030", Fstrerror32( i_ferr[0] ),c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);  
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
  if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "c_sltp_trail_flag  *****  :%c:", c_sltp_trail_flag );
	}
  if( st_xchngbk.c_ord_typ == VTC_ORDER && c_sltp_trail_flag == 'Y' )
  {
     strcpy(c_err_msg,"VTC Order with Trail option not allowed."); 
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
     Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
     Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }	
	/**** Ver 7.6 Ends ****/

	/*** Ver 9.4 starts here ***/
		MEMSET(c_ven_id);
    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_USER_CODE,0,(char *)c_ven_id.arr,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
				fn_errlog( c_ServiceName, "S31035", Fstrerror32( i_ferr[0] ),c_err_msg);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   
				Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);  
				Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
				strcpy(c_ven_id.arr,"");		
      }
    }

		i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_INSTRMNT_TYP,0,(char *)c_ven_nm.arr,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
        fn_errlog( c_ServiceName, "S31040", Fstrerror32( i_ferr[0] ),c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
        strcpy(c_ven_nm.arr,"");
      }
    }
    SETLEN(c_ven_id);
		SETLEN(c_ven_nm);
    strcpy ( st_ordbk.c_esp_id,c_ven_id.arr );
		fn_userlog( c_ServiceName, "Vendor id = ESP_ID	:%s:", st_ordbk.c_esp_id);
    fn_userlog( c_ServiceName, "Vendor Name :%s:",c_ven_nm.arr);
		/*** Ver 9.4 ends ***/

    /*** Ver 10.4 starts ***/
    MEMSET(c_1clk_prtflio_id);
    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_CLSR_TYP,0,(char *)&c_1clk_flg,0);
    i_ferr [0] = Ferror32;
    i_err[1]  = Fget32(ptr_fml_Ibuf,FFO_BILL_NO,0,(char *)c_1clk_prtflio_id,0);
    i_ferr [1] = Ferror32;

    if ( i_err[0] == -1 || i_err[1] == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
        if( i_err[0] == -1)
        {
          fn_errlog( c_ServiceName, "S31045", Fstrerror32( i_ferr[0] ),c_err_msg);
        }
        else if(i_err[1] == -1)
        {
          fn_errlog( c_ServiceName, "S31050", Fstrerror32( i_ferr[1] ),c_err_msg);
        }
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
        c_1clk_flg='N';
        strcpy(c_1clk_prtflio_id,"");
      }
    }
    fn_userlog( c_ServiceName, "Portfolio flag  :%c: PRTFL_ID:%s:",c_1clk_flg,c_1clk_prtflio_id);
    /*** Ver 10.4 ends ***/

    /** Ver 10.7 Starts here ***/
     MEMSET(c_algo_id);
    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_ACTION2,0,(char *)c_algo_id.arr,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
        fn_errlog( c_ServiceName, "S31055", Fstrerror32( i_ferr[0] ),c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
        strcpy(c_algo_id.arr,"");
      }
    }

    MEMSET(c_algo_ord_rmrks);

    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_PRDCT_DESC,0,(char *)c_algo_ord_rmrks.arr,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
        fn_errlog( c_ServiceName, "S31060", Fstrerror32( i_ferr[0] ),c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
        strcpy(c_algo_ord_rmrks.arr,"");
      }
    }
    SETLEN(c_algo_id);
    SETLEN(c_algo_ord_rmrks);

    strcpy ( st_ordbk.c_algo_id,c_algo_id.arr );
    strcpy ( st_ordbk.c_algo_ord_rmrks,c_algo_ord_rmrks.arr );

    if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog(c_ServiceName,"c_algo_id :%s: c_algo_ord_rmrks :%s:",st_ordbk.c_algo_id,st_ordbk.c_algo_ord_rmrks);
    }
    /** Ver 10.7 Ends Here ***/


  /***  Ver 3.2 Starts  ***/



  if(st_usrprfl.c_user_id[0] != BPID && strcmp(st_usrprfl.c_user_id,"system") != 0)
  {
    i_is_dbc_cust = 0;

    EXEC SQL
      SELECT 1
      INTO :i_is_dbc_cust
      FROM  CLM_CLNT_MSTR
      WHERE CLM_MTCH_ACCNT = :st_usrprfl.c_cln_mtch_accnt
      AND   CLM_TRD_FLG =:c_clm_trd_flg  /* ver 7.9 Hard Code Value Replace With Bind Variable */ 
      AND   CLM_BP_ID IS NOT NULL;

    if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
    {
      fn_errlog( c_ServiceName, "S31065",SQLMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if ( i_is_dbc_cust == 1 )
    {
      fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst, this facility has been Disabled");
      fn_errlog( c_ServiceName, "B35018", "", c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/  
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  /***  Ver 3.2  Ends  ***/

   /*** Ver 9.3 Starts ***/

   if(st_usrprfl.c_user_id[0] ==BPID)
   {
     if( fn_simaltns_ssn_term ( c_ServiceName,st_usrprfl.c_user_id,st_usrprfl.l_session_id,st_usrprfl.c_cln_mtch_accnt,c_err_msg) == -1 )
     {
      fn_errlog(c_ServiceName,"S31070","Error while checking simultaneous active session",c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amount, 0);
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

  /*** Ver 9.3 Ends ***/

  /*** Ver 5.5 Starts here ****/
  MEMSET(v_user_id);
  strcpy((char *)v_user_id.arr,st_usrprfl.c_user_id);

  SETLEN(v_user_id);
  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"st_ordbook.c_user_id IS  :%s:", st_usrprfl.c_user_id);
    fn_userlog(c_ServiceName,"v_user_id IS  :%s:", v_user_id.arr );
  }

  if ( strcmp((char *)v_user_id.arr,"system") == 0 )
  {
    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"SYSTEM PLACING ORDER");
    }
  /* 7.9 */
   EXEC SQL  SELECT  DECODE(NVL(CLM_BP_ID,'*'),'*',UAC_USR_ID,CLM_BP_ID)
              INTO    :v_user_id
              FROM    UAC_USR_ACCNTS, CLM_CLNT_MSTR
              WHERE   CLM_MTCH_ACCNT      = :st_usrprfl.c_cln_mtch_accnt
              AND     UAC_CLM_MTCH_ACCNT  = CLM_MTCH_ACCNT;

    if(( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
      fn_errlog( c_ServiceName, "S31075", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    SETNULL(v_user_id);

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"BP ID IS  :%s:", v_user_id.arr);
    }
  }

  sql_usr_fno_accpt_flg ='\0';
  sql_usr_dt_allwd_flg ='\0';

  EXEC SQL  SELECT  USR_DT_ALLWD_FLG,
                    USR_FNO_ACCPT_FLG
            INTO    :sql_usr_dt_allwd_flg,
                    :sql_usr_fno_accpt_flg
            FROM    USR_USER_MASTER
            WHERE   USR_USR_ID  =:v_user_id;
  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31080", SQLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  if(DEBUG_MSG_LVL_3)
  {
  	fn_userlog(c_ServiceName,"sql_usr_dt_allwd_flg :%c:",sql_usr_dt_allwd_flg);
  	fn_userlog(c_ServiceName,"sql_usr_fno_accpt_flg :%c:",sql_usr_fno_accpt_flg);
	}
  if(st_usrprfl.c_user_id[0] != BPID && strcmp(st_usrprfl.c_user_id,"system") != 0)
  {
   if(sql_usr_fno_accpt_flg != 'Y')
    {
      fn_errlog( c_ServiceName, "B31017",DEFMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  /*** ver 5.5 Ends Here ****/

  if (strncmp(st_usrprfl.c_cln_mtch_accnt,"552",3) != 0 ) /** Ver 10.2 Starts **/
  {
   c_ucc_flg='N';

   EXEC SQL
   SELECT  NVL(CLM_SPAN_ALLWD,'N'),
           NVL(CLM_BSESPAN_ALLWD,'N'),
           NVL(IUD_FNO_UCC_TRDNG_ENBL_FLG,'N')
   INTO    :c_spn_flg,
           :c_bse_spn_flg,
           :c_ucc_flg
   FROM    CLM_CLNT_MSTR,IUD_INFO_UCC_DTLS
   WHERE  IUD_UCC_CD = NVL(CLM_CLNT_CD,CLM_MTCH_ACCNT)
   AND CLM_MTCH_ACCNT  = :st_usrprfl.c_cln_mtch_accnt;

   if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
   {
    fn_userlog(c_ServiceName, "Failed To Get SPAN Flag.");
    fn_errlog( c_ServiceName, "S31085",SQLMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

   if ( SQLCODE == NO_DATA_FOUND )
   {
    fn_userlog(c_ServiceName,"Match Account :%s: UCC Flag :%c:",st_usrprfl.c_cln_mtch_accnt,c_ucc_flg);
   }

   if ( DEBUG_MSG_LVL_3 )
   {
    fn_userlog(c_ServiceName,"UCC flag :%c:",c_ucc_flg);
   }

   if(c_ucc_flg != 'Y' )
   {
    fn_errlog( c_ServiceName, "B14021", DEFMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
  }
  else  /** Ver 10.2 Ends ***/
  {
	/***  Ver 4.5 Starts ***/

   EXEC SQL
    SELECT  NVL(CLM_SPAN_ALLWD,'N'),
            NVL(CLM_BSESPAN_ALLWD,'N')
    INTO    :c_spn_flg,
            :c_bse_spn_flg
    FROM    CLM_CLNT_MSTR
    WHERE   CLM_MTCH_ACCNT  = :st_usrprfl.c_cln_mtch_accnt;

  if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName, "Failed To Get SPAN Flag.");
    fn_errlog( c_ServiceName, "S31090",SQLMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
 }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"NSE SPAN Allowed Flag Is :%c:",c_spn_flg);
    fn_userlog(c_ServiceName,"NSE SPAN Allowed Flag Is :%c:",c_bse_spn_flg);
  }

/******* Ver 8.5 Starts *******/
   if ( st_xchngbk.c_spl_flg != 'C' && (st_cntrct.c_prd_typ != 'U' || st_cntrct.c_prd_typ != 'I'))
   {
       strcpy( st_contrct.c_xchng_cd, st_cntrct.c_xchng_cd );
       strcpy( st_contrct.c_undrlyng, st_cntrct.c_undrlyng );
       strcpy( st_contrct.c_expry_dt, st_cntrct.c_expry_dt );
       st_contrct.c_prd_typ        = st_cntrct.c_prd_typ;
       st_contrct.c_exrc_typ      = st_cntrct.c_exrc_typ;
       st_contrct.c_opt_typ       = st_cntrct.c_opt_typ;
       st_contrct.l_strike_prc    = st_cntrct.l_strike_prc;
       st_contrct.c_ctgry_indstk  = st_cntrct.c_ctgry_indstk;
       st_contrct.l_ca_lvl        = st_cntrct.l_ca_lvl;

     i_returncode = fn_disallow_frsh_expsre(c_ServiceName,
                             st_usrprfl.c_cln_mtch_accnt,
                             c_spn_flg,
                             st_xchngbk.c_ordr_flw,
                             st_xchngbk.l_ord_tot_qty,
                             l_old_ord_qty,
                             &st_contrct,
                             &st_errmsg_vw );

    if (i_returncode == -1 || i_returncode == -2)
    {
      /*fn_errlog( c_ServiceName, "S31095", "Error in Function fn_chk_und_insider", c_err_msg); ** Ver 10.1 comment **/
      fn_errlog( c_ServiceName, "S31100", "Error in Function fn_disallow_frsh_expsre", c_err_msg); /** ver 10.1 log corrected**/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_errmsg_vw.c_err_msg , 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
   }
/******* Ver 8.5 Ends ******/

	/*** Ver 10.3 start ***/
  if ( st_cntrct.c_prd_typ == 'F' || st_cntrct.c_prd_typ == 'O' )
   {
       strcpy( st_contrct.c_xchng_cd, st_cntrct.c_xchng_cd );
       strcpy( st_contrct.c_undrlyng, st_cntrct.c_undrlyng );
       strcpy( st_contrct.c_expry_dt, st_cntrct.c_expry_dt );
       st_contrct.c_prd_typ        = st_cntrct.c_prd_typ;
       st_contrct.c_exrc_typ      = st_cntrct.c_exrc_typ;
       st_contrct.c_opt_typ       = st_cntrct.c_opt_typ;
       st_contrct.l_strike_prc    = st_cntrct.l_strike_prc;
       st_contrct.c_ctgry_indstk  = st_cntrct.c_ctgry_indstk;
       st_contrct.l_ca_lvl        = st_cntrct.l_ca_lvl;

     i_returncode = fn_disallow_frsh_ordr(c_ServiceName,
                             st_usrprfl.c_cln_mtch_accnt,
                             c_spn_flg,
                             st_xchngbk.c_ordr_flw,
                             st_xchngbk.l_ord_tot_qty,
                             &st_contrct,
                             &st_errmsg_vw );

    if (i_returncode == -1)
    {
      fn_errlog( c_ServiceName, "S31105", "Error in Function fn_disallow_frsh_ordr", c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_errmsg_vw.c_err_msg , 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

  /*** Ver 10.3 ends ***/

  if( ( c_spn_flg == 'N'  && strcmp(st_cntrct.c_xchng_cd,"NFO") == 0 ) ||
    ( c_bse_spn_flg == 'N' && strcmp(st_cntrct.c_xchng_cd,"BFO") == 0 ) )
  {
      fn_userlog(c_ServiceName, "Non-SPAN Customer Trying To Place Order Under SPAN Margining System.");
      strcpy(c_err_msg,"Non-SPAN Customer Trying To Place Order Under SPAN Margining System..");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /***  Ver 4.5 Ends   ***/

  /*** Ver 6.4 Starts ******/
  if ( ( st_xchngbk.c_spl_flg != CLIENT_SQROFF ) &&  
  ( st_xchngbk.c_spl_flg != SYSTEM_SQUAREOFF)  &&
  ( st_xchngbk.c_spl_flg != IMTM_SYS_SQUAREOFF )  &&
  ( st_xchngbk.c_spl_flg != LMTNEG_SYS_SQUAREOFF  ) && 
	( st_xchngbk.c_spl_flg != PHYSICAL_DLVRY_SQOFF ) &&
  ( st_xchngbk.c_spl_flg != JOINT_SQUAREOFF ) )			/** Ver 10.1 if introduced to skip insider checking for square off order **/
  {
       strcpy( st_cntrct_ins.c_xchng_cd, st_cntrct.c_xchng_cd );
       strcpy( st_cntrct_ins.c_undrlyng, st_cntrct.c_undrlyng );
       strcpy( st_cntrct_ins.c_expry_dt, st_cntrct.c_expry_dt );
       st_cntrct_ins.c_prd_typ        = st_cntrct.c_prd_typ;
       st_cntrct_ins.c_exrc_typ      = st_cntrct.c_exrc_typ;
       st_cntrct_ins.c_opt_typ       = st_cntrct.c_opt_typ;
       st_cntrct_ins.l_strike_prc    = st_cntrct.l_strike_prc;
       st_cntrct_ins.c_ctgry_indstk  = st_cntrct.c_ctgry_indstk;
       st_cntrct_ins.l_ca_lvl        = st_cntrct.l_ca_lvl;

  i_returncode = fn_chk_und_insider(c_ServiceName,
                                    st_usr_prfl1,
                                    /*st_cntrct.c_undrlyng, ***Ver 10.1 **/
                                    st_cntrct_ins,   /** Ver 10.1 **/
                                    &insider_exist);
  if (i_returncode == -1)
  {
      fn_errlog( c_ServiceName, "S31110", "Error in Function fn_chk_und_insider", c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if (insider_exist == 1)
  {
      fn_errlog( c_ServiceName, "B91164", DEFMSG, c_err_msg  ); /** Ver 10.1 B21042 changed to B91164 **/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
 }
  /*** End of Ver 6.4 ***/

	/*** Ver 6.3 Starts ***/   /*** c_prd_typ == 'I' added in Ver 6.5 for option Plus ***/
  if( st_xchngbk.c_slm_flg == 'L' && (st_cntrct.c_prd_typ == 'U' || st_cntrct.c_prd_typ == 'I'))  
  {
 /* 7.9 */
    EXEC SQL
        SELECT  NVL(FUM_SLTPFP_LMT_ALLWD_FLG,'N')
          INTO  :c_lmt_allwd_flg
          FROM  FUM_FO_UNDRLYNG_MSTR
         WHERE  FUM_UNDRLYNG = :st_cntrct.c_undrlyng
           AND  FUM_XCHNG_CD = :st_cntrct.c_xchng_cd
           AND  FUM_PRDCT_TYP = DECODE(:st_cntrct.c_prd_typ,'U','F','I','O','P','F',:st_cntrct.c_prd_typ);

     if ( SQLCODE != 0 )
     {
       fn_userlog(c_ServiceName, "Failed To Get LIMIT Allowed Flag.");
       fn_errlog(c_ServiceName, "S31115", SQLMSG, c_err_msg);
       Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
     }

     if( c_lmt_allwd_flg == 'N')
     {
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       fn_errlog( c_ServiceName,"S31120","Only Market orders are allowed in this stock. Please enter market as order type to place your order.",c_err_msg);
       strcpy(c_err_msg,"Only Market orders are allowed in this stock. Please enter market as order type to place your order.");
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
  }
  /*** Ver 6.3 Ends ***/
	
	strcpy(c_usr_id,st_usrprfl.c_user_id);

  if(fn_get_trdng_dtls(st_usrprfl.c_user_id,st_usrprfl.c_cln_mtch_accnt, &c_trd_dtls, prd) == -1)
  {
    fn_userlog(c_ServiceName, "Error in Function Call");
    fn_errlog(c_ServiceName, "S31125", LIBMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

  if(c_trd_dtls != 'A')
  {
		/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
		if(DEBUG_MSG_LVL_3) /*** Ver 7.3 ***/
		{
    	fn_userlog( c_ServiceName, "For Placing any order in FNO both Buy and Sell must be allowed.");
		}
    fn_errlog( c_ServiceName, "B28555", "DEFMSG", c_err_msg  );
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

  if(st_xchngbk.c_ord_typ == GOOD_TILL_DATE)
  {
    /** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
    if(DEBUG_MSG_LVL_3) /*** Ver 7.3 ***/
		{
    	fn_userlog( c_ServiceName, "GTD Orders are not allowed for FNO from 30-07-2004");
		}
    fn_errlog( c_ServiceName, "B28572", "DEFMSG", c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if(st_xchngbk.c_ordr_flw  !='B' && st_xchngbk.c_ordr_flw  != 'S')
  {
    fn_userlog( c_ServiceName, "ORDER FLOW is NULL");
    fn_errlog( c_ServiceName, "S31130", "Invalid Order Flow", c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  if(st_xchngbk.c_slm_flg !='L' && st_xchngbk.c_slm_flg  != 'S' && st_xchngbk.c_slm_flg !='M' )
  {
    fn_userlog( c_ServiceName, "c_slm_flg is NULL");
    fn_errlog( c_ServiceName, "S31135", "Invalid SLM Flag", c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if(st_xchngbk.c_ord_typ !='T' && st_xchngbk.c_ord_typ  != 'I' && st_xchngbk.c_ord_typ  != 'V' ) /** Ver 5.9 'V' Added */ 
  {
    fn_userlog( c_ServiceName, "ORDER TYPE is NULL");
    fn_errlog( c_ServiceName, "S31140", "Invalid Order Type", c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	
	/** Ver 2.7 Starts **/

  if(st_xchngbk.l_stp_lss_tgr > 0 )
  {
    if(DEBUG_MSG_LVL_3) /*** Ver 7.3 ***/
		{
    	fn_userlog(c_ServiceName,"Inside Stop Loss Trigger Price Check.");
		}
    st_xchngbk.c_slm_flg = 'S' ;
    if(DEBUG_MSG_LVL_3) /*** Ver 7.3 ***/
		{
    	fn_userlog(c_ServiceName," SLM Flag Is :%c:",st_xchngbk.c_slm_flg);
		}
  }

  /** Ver 2.7 Ends **/

  /*** Ver 5.9 Starts Here ***/
  if( st_cntrct.c_prd_typ == 'F' && st_xchngbk.c_ord_typ == VTC_ORDER )
  {
   i_returncode=fn_chk_spnvtcord(c_ServiceName,
                               &st_xchngbk,
                               &st_cntrct,
                               &st_errmsg);
   if ( i_returncode == -1 )
   {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
  }
  /*** Ver 5.9 Ends Here ***/

	/******** Check if NRI customer is allowed for trade or not for Underlying ***/
	/**** Commented in Ver 6.8
	if ( (strncmp(st_usrprfl.c_cln_mtch_accnt, "750", 3)  == 0 ) ||
       (strncmp(st_usrprfl.c_cln_mtch_accnt, "751", 3)  == 0 ) ||
       (strncmp(st_usrprfl.c_cln_mtch_accnt, "650", 3)  == 0 ) ||
       (strncmp(st_usrprfl.c_cln_mtch_accnt, "651", 3)  == 0 )
      ) ****/
       /****** Added in Ver 6.8 *******/
	MEMSET(sql_icd_cust_type.arr);

   EXEC SQL
   SELECT  ICD_CUST_TYPE,
           NVL(ICD_PAN_NO,'*') /** ICD_PAN_NO  added in ver 8.3 **/
   INTO    :sql_icd_cust_type,
           :v_pan_no /** v_pan_no is added in ver 8.3 **/
   FROM    ICD_INFO_CLIENT_DTLS,
           IAI_INFO_ACCOUNT_INFO
   WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
   AND     IAI_MATCH_ACCOUNT_NO  = :st_usrprfl.c_cln_mtch_accnt;
  
    if(DEBUG_MSG_LVL_3) /*** Ver 7.3 ***/
    { 
	 		fn_userlog(c_ServiceName, "CUST TYPE 2 IS :%s:",sql_icd_cust_type.arr); /** Ver 6.8 ****/
	    fn_userlog( c_ServiceName, "PAN No. of the customer is :%s: with length :%d:",v_pan_no.arr,v_pan_no.len ); /** ver 8.3 **/	
    }

   if ( SQLCODE != 0) 
   {
     fn_errlog( c_ServiceName, "S31145", SQLMSG, c_err_msg );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
   
   /** ver 8.3 starts **/
   SETNULL( v_pan_no );
   if( v_pan_no.len != 10 )
   {
       fn_errlog( c_ServiceName, "B91176", DEFMSG, c_err_msg  );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

   strcpy ( st_ordbk.c_pan_no,v_pan_no.arr );
   /** ver 8.3 ends **/

   /********* Added in Ver 6.8 Ends ************/
   if(strcmp(sql_icd_cust_type.arr,"NRI") == 0)    /****** Check added in Ver 6.8 *******/
   {
     /******** Check if NRI customer is allowed for trade or not for Underlying ***/
		 if(DEBUG_MSG_LVL_3)
		 {
     	fn_userlog(c_ServiceName,"Inside NRI Check ");
		 }
     i_returncode = fn_spn_nri_validation( c_ServiceName,
                                       st_cntrct.c_undrlyng,
                                       st_cntrct.c_prd_typ,
																			 st_cntrct.c_xchng_cd,     /*** Ver 1.4 ***/
                                       &st_errmsg);
     if( i_returncode == -1 )
     {
       fn_errlog( c_ServiceName, "S31150", "", c_err_msg  );
			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
			 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
       Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
     if( i_returncode == -2 )
     {
       /*** fn_errlog( c_ServiceName, "S31155", "Business Error", c_err_msg  ); ***/
			 fn_errlog( c_ServiceName, "B91081",DEFMSG,c_err_msg);
			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
			 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
       Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
   }	

  /*** Ver 4.1 Starts ***/
  /*** Commented in Ver 6.8
  if ( ((strncmp(st_usrprfl.c_cln_mtch_accnt, "750", 3)  == 0 ) ||
        (strncmp(st_usrprfl.c_cln_mtch_accnt, "751", 3)  == 0 ) ||
        (strncmp(st_usrprfl.c_cln_mtch_accnt, "650", 3)  == 0 ) ||
        (strncmp(st_usrprfl.c_cln_mtch_accnt, "651", 3)  == 0 )) &&
        *** (st_cntrct.c_prd_typ == 'I' || st_cntrct.c_prd_typ == 'U' ) *** Commented in Ver 5.1 ***
				(st_cntrct.c_prd_typ == 'I')		*** Ver 5.1 ***
     ) ****/
      /*** Added in Ver 6.8 ***/
      MEMSET(sql_icd_cust_type.arr);
      EXEC SQL
      SELECT  ICD_CUST_TYPE
      INTO    :sql_icd_cust_type
      FROM    ICD_INFO_CLIENT_DTLS,
              IAI_INFO_ACCOUNT_INFO
      WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
      AND     IAI_MATCH_ACCOUNT_NO  = :st_usrprfl.c_cln_mtch_accnt;

    	if(DEBUG_MSG_LVL_3) /*** Ver 7.3 ***/
    	{
      	fn_userlog(c_ServiceName, "CUST TYPE IS :%s:",sql_icd_cust_type.arr);
			}

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31160", SQLMSG,c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      } 

      /*** Ver 6.8 Ends ***/
     if(strcmp(sql_icd_cust_type.arr,"NRI") == 0 && st_cntrct.c_prd_typ == 'I')    /****** Check added in Ver 6.8 *******/
   {
      fn_errlog( c_ServiceName, "S31165", "This facility is not enabled for NRI customers.", c_err_msg  );
      strcpy(c_err_msg,"This facility is not enabled for NRI customers");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
   /*** Ver 4.1 Ends ***/

  i_returncode	=	fn_chk_spncloseout	(	c_ServiceName,
                                        st_usrprfl.c_cln_mtch_accnt,     /*** Addded in ver 2.3 ***/
                                        c_request_typ,     							 /*** Addded in ver 2.3 ***/
                                        st_cntrct,     									 /*** Addded in ver 2.3 ***/
                               					&st_xchngbk,
                               					&st_errmsg
																			);

  if( i_returncode == -1 )
  {
    /* fn_errlog( c_ServiceName, "S31170", "Broker Under Closeout", c_err_msg  );*/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_errmsg.c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	i_ordrbk  	[0]  = Fget32( ptr_fml_Ibuf ,FFO_USR_ID,0,(char *) st_ordbk.c_user_id,0);
	i_ordrbkerr	[0]  = Ferror32;
	i_ordrbk  	[1]  = Fget32( ptr_fml_Ibuf ,FFO_SSSN_ID,0,(char *) &st_ordbk.l_session_id,0);
  i_ordrbkerr [1]  = Ferror32;
	i_ordrbk  	[2]  = Fget32( ptr_fml_Ibuf ,FFO_EBA_MTCH_ACT_NO,0,(char *) st_ordbk.c_cln_mtch_accnt,0);
  i_ordrbkerr [2]  = Ferror32;
	i_ordrbk  	[3]  = Fget32( ptr_fml_Ibuf ,FFO_ORDR_FLW,0,(char *) &st_ordbk.c_ordr_flw,0);
  i_ordrbkerr [3]  = Ferror32;
	i_ordrbk  	[4]  = Fget32( ptr_fml_Ibuf ,FFO_CHANNEL,0,(char *) st_ordbk.c_channel,0);
  i_ordrbkerr [4]  = Ferror32;
	i_ordrbk  	[5]  = Fget32( ptr_fml_Ibuf ,FFO_CTCL_ID,0,(char *) st_ordbk.c_ctcl_id,0);
  i_ordrbkerr [5]  = Ferror32;
	i_ordrbk  	[6]  = Fget32( ptr_fml_Ibuf ,FFO_CSE_ID,0,(char *) &st_ordbk.l_cse_id,0);
  i_ordrbkerr [6]  = Ferror32;
	i_ordrbk  	[7]  = Fget32( ptr_fml_Ibuf ,FFO_PRDCT_TYP,0,(char *) &st_ordbk.c_prd_typ,0);
  i_ordrbkerr [7]  = Ferror32;
	i_ordrbk  	[8]  = Fget32( ptr_fml_Ibuf ,FFO_UNDRLYNG,0,(char *) &st_ordbk.c_undrlyng,0);
  i_ordrbkerr [8]  = Ferror32;
	i_ordrbk  	[9]  = Fget32( ptr_fml_Ibuf ,FFO_XCHNG_CD,0,(char *)st_ordbk.c_xchng_cd ,0);
  i_ordrbkerr [9]  = Ferror32;
	i_ordrbk  	[10] = Fget32( ptr_fml_Ibuf ,FFO_EXPRY_DT,0,(char *)st_ordbk.c_expry_dt ,0);
  i_ordrbkerr [10] = Ferror32;
	i_ordrbk  	[11] = Fget32( ptr_fml_Ibuf ,FFO_EXER_TYP,0,(char *)&st_ordbk.c_exrc_typ ,0);
  i_ordrbkerr [11] = Ferror32;
	i_ordrbk  	[12] = Fget32( ptr_fml_Ibuf ,FFO_OPT_TYP,0,(char *)&st_ordbk.c_opt_typ ,0);
  i_ordrbkerr [12] = Ferror32;
	i_ordrbk  	[13] = Fget32( ptr_fml_Ibuf ,FFO_LMT_MKT_SL_FLG,0,(char *)&st_ordbk.c_slm_flg,0);
  i_ordrbkerr [13] = Ferror32;
	i_ordrbk  	[14] = Fget32( ptr_fml_Ibuf ,FFO_CTGRY_INDSTK,0,(char *)&st_ordbk.c_ctgry_indstk,0);
  i_ordrbkerr [14] = Ferror32;
	i_ordrbk  	[15] = Fget32( ptr_fml_Ibuf ,FFO_ORD_TOT_QTY,0,(char *)&st_ordbk.l_ord_tot_qty,0);
  i_ordrbkerr [15] = Ferror32;
	i_ordrbk  	[16] = Fget32( ptr_fml_Ibuf ,FFO_ORD_TYP,0,(char *)&st_ordbk.c_ord_typ,0);
  i_ordrbkerr [16] = Ferror32;
	i_ordrbk  	[17] = Fget32( ptr_fml_Ibuf ,FFO_LMT_RT,0,(char *)&st_ordbk.l_ord_lmt_rt,0);
  i_ordrbkerr [17] = Ferror32;
	i_ordrbk  	[18] = Fget32( ptr_fml_Ibuf ,FFO_SPL_FLG,0,(char *)&st_ordbk.c_spl_flg,0);
  i_ordrbkerr [18] = Ferror32;
	i_ordrbk  	[19] = Fget32( ptr_fml_Ibuf ,FFO_STP_LSS_TGR,0,(char *)&st_ordbk.l_stp_lss_tgr,0);
  i_ordrbkerr [19] = Ferror32;


	
  for ( l=0 ; l < 20  ; l++ )
  {
    if ( i_ordrbk[ l ] == -1 && i_ordrbkerr[ l ] !=  FNOTPRES )
    {
      fn_userlog( c_ServiceName, "Error in :%d:",l );
      fn_errlog( c_ServiceName, "S31175", Fstrerror32( i_ordrbkerr	[l] ),c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	
		if ( l == 18 || l == 19 )
		{
			if ( i_ordrbkerr [l] == FNOTPRES && i_ordrbk [l] == -1 )
    	{
				fn_userlog(c_ServiceName,"SPAN Inside Order Book FNOTPRES.");
      	st_ordbk.c_spl_flg  = '*' ;
    	}
		}
  }

  /*** Ver 6.9 Starts ***/

    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_STATUS_FLG,0,(char *)&c_source_flg,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
        fn_errlog( c_ServiceName, "S31180", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
        c_source_flg='O';
      }
    }


			/** Ver 11.3 by Ravi Start **/
		l_site_sell=0;l_site_buy=0;l_site_osell=0;l_site_obuy=0;
		if( st_cntrct.c_prd_typ == 'F' || st_cntrct.c_prd_typ == 'O' )
		{
			EXEC SQL 
			SELECT 
					NVL(ABS(FCP_OPNPSTN_QTY),0) PSTN_QTY,
					NVL(FCP_BUY_EXCTD_QTY,0) PSTN_E_QBUY,NVL(ABS(FCP_SELL_EXCTD_QTY),0) PSTN_E_QSELL,
					NVL(GREATEST( ABS(FCP_ISELL_QTY), ABS(FCP_EXSELL_QTY)),0) PSTN_SELL_QTY,
					NVL(GREATEST( ABS(FCP_IBUY_QTY), ABS(FCP_EXBUY_QTY)),0) PSTN_BUY_QTY
			INTO
					:l_opnpstn_qty,
					:l_buy_exe_qty,:l_sell_exe_qty,
					:l_sell_ord_qty,:l_buy_ord_qty
			FROM 
					FCP_FO_SPN_CNTRCT_PSTN 
			WHERE 
					FCP_CLM_MTCH_ACCNT  	= :st_usrprfl.c_cln_mtch_accnt  
					AND	FCP_UNDRLYNG        = :st_ordbk.c_undrlyng
					AND	FCP_EXPRY_DT        = :st_ordbk.c_expry_dt 
					AND	FCP_PRDCT_TYP       = :st_ordbk.c_prd_typ 
					AND	FCP_XCHNG_CD        = :st_ordbk.c_xchng_cd
					AND	FCP_STRK_PRC        = :st_cntrct.l_strike_prc 
					AND	FCP_EXER_TYP        = :st_ordbk.c_exrc_typ 
					AND	FCP_OPT_TYP         = :st_ordbk.c_opt_typ;

			if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
      {
        fn_errlog( c_ServiceName, "S31185",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if (SQLCODE == NO_DATA_FOUND)
      {
        l_opnpstn_qty = 0;l_buy_exe_qty=0;l_sell_exe_qty=0;l_sell_ord_qty=0;l_buy_ord_qty=0;
      }

			l_fe_sell_qty=0;l_fe_buy_qty=0;l_fp_sell_qty=0;l_fp_buy_qty=0;
			EXEC SQL 	
			SELECT 	
				SUM(SELL_EXEC_QTY) SELL_EXEC_QTY,SUM(BUY_EXEC_QTY) BUY_EXEC_QTY, SUM(SELL_QTY) SELL_QTY,SUM(BUY_QTY) BUY_QTY
			INTO 
				:l_fe_sell_qty,:l_fe_buy_qty,:l_fp_sell_qty,:l_fp_buy_qty
			FROM
			(
				SELECT 
					NVL(SUM(DECODE(FOD_ORDR_FLW,'S',FOD_EXEC_QTY,0)),0) SELL_EXEC_QTY,
					NVL(SUM(DECODE(FOD_ORDR_FLW,'B',FOD_EXEC_QTY,0)),0) BUY_EXEC_QTY,
					NVL(SUM(DECODE(FOD_ORDR_FLW,'S',(FOD_ORDR_TOT_QTY-(FOD_CNCL_QTY+FOD_EXPRD_QTY+FOD_EXEC_QTY)),0)),0) SELL_QTY,
					NVL(SUM(DECODE(FOD_ORDR_FLW,'B',(FOD_ORDR_TOT_QTY-(FOD_CNCL_QTY+FOD_EXPRD_QTY+FOD_EXEC_QTY)),0)),0) BUY_QTY
				FROM
					FOD_FO_ORDR_DTLS
				WHERE
					FOD_XCHNG_CD       		= 'NFO'
					AND FOD_PRDCT_TYP  		= :st_ordbk.c_prd_typ
					AND FOD_CLM_MTCH_ACCNT  = :st_usrprfl.c_cln_mtch_accnt
					AND FOD_ORDR_STTS       IN ('O','Q','R','P','E','B','D')
					AND FOD_UNDRLYNG        = :st_ordbk.c_undrlyng
					AND FOD_EXPRY_DT        = :st_ordbk.c_expry_dt
					AND FOD_XCHNG_CD        = :st_ordbk.c_xchng_cd
					AND FOD_STRK_PRC        = :st_cntrct.l_strike_prc
					AND FOD_EXER_TYP        = :st_ordbk.c_exrc_typ
					AND FOD_OPT_TYP         = :st_ordbk.c_opt_typ
					AND FOD_SOURCE_FLG      = 'F'
				UNION ALL
				SELECT 
					NVL(SUM(DECODE(FOD_ORDR_FLW,'S',FOD_EXEC_QTY,0)),0) SELL_EXEC_QTY,
					NVL(SUM(DECODE(FOD_ORDR_FLW,'B',FOD_EXEC_QTY,0)),0) BUY_EXEC_QTY,
					0 SELL_QTY,
					0 BUY_QTY
				FROM
					FOD_FO_ORDR_DTLS_HSTRY
				WHERE
					FOD_XCHNG_CD       		= 'NFO'
					AND FOD_PRDCT_TYP  		= :st_ordbk.c_prd_typ
					AND FOD_CLM_MTCH_ACCNT  = :st_usrprfl.c_cln_mtch_accnt
					AND FOD_ORDR_STTS       IN ('P','E','B','D')
					AND FOD_UNDRLYNG        = :st_ordbk.c_undrlyng
					AND FOD_EXPRY_DT        = :st_ordbk.c_expry_dt
					AND FOD_XCHNG_CD        = :st_ordbk.c_xchng_cd
					AND FOD_STRK_PRC        = :st_cntrct.l_strike_prc
					AND FOD_EXER_TYP        = :st_ordbk.c_exrc_typ
					AND FOD_OPT_TYP         = :st_ordbk.c_opt_typ
					AND FOD_SOURCE_FLG      = 'F'
				);
	
      if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
      {
        fn_errlog( c_ServiceName, "S31190",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if (SQLCODE == NO_DATA_FOUND)
      {
				l_fe_sell_qty=0;l_fe_buy_qty=0;l_fp_sell_qty=0;l_fp_buy_qty=0;
      }

			fav_cnt=0;
			EXEC SQL SELECT COUNT(*) INTO :fav_cnt FROM FFS_FO_FLASH_DISCRYP
			WHERE
			FFS_CLM_MTCH_ACCNT=:st_usrprfl.c_cln_mtch_accnt
			AND FFS_XCHNG_CD=:st_ordbk.c_xchng_cd
			AND FFS_PRDCT_TYP=:st_ordbk.c_prd_typ
			AND FFS_UNDRLYNG =:st_ordbk.c_undrlyng
			AND FFS_EXPRY_DT=to_date(:st_ordbk.c_expry_dt,'DD-Mon-YYYY')
			AND FFS_OPT_TYP=DECODE(:st_ordbk.c_prd_typ,'F',FFS_OPT_TYP,:st_ordbk.c_opt_typ)
			AND FFS_STRK_PRC=DECODE(:st_ordbk.c_prd_typ,'F',FFS_STRK_PRC,:st_cntrct.l_strike_prc);

 			if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
      {
       fn_errlog( c_ServiceName, "S31195",SQLMSG,c_err_msg);
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
       Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

			l_site_sell=l_sell_exe_qty-l_fe_sell_qty;
			l_site_buy=l_buy_exe_qty-l_fe_buy_qty;
			l_site_osell=l_sell_ord_qty-l_fp_sell_qty;
			l_site_obuy=l_buy_ord_qty-l_fp_buy_qty;

			/*** Ver 11.5 Start***/
			fut_cnt=0;
			if(st_cntrct.c_prd_typ == 'F')
			{	

			EXEC SQL SELECT COUNT(*) into :fut_cnt FROM FOD_FO_ORDR_DTLS
			WHERE 
			FOD_XCHNG_CD            = 'NFO'
			AND FOD_CLM_MTCH_ACCNT  = :st_usrprfl.c_cln_mtch_accnt
			AND FOD_PRDCT_TYP       = :st_ordbk.c_prd_typ	
			AND FOD_UNDRLYNG        = :st_ordbk.c_undrlyng
			AND FOD_EXPRY_DT        = :st_ordbk.c_expry_dt
			AND FOD_ORDR_FLW				= DECODE(:st_ordbk.c_ordr_flw,'B','S','S','B',:st_ordbk.c_ordr_flw) 
			AND FOD_ORDR_STTS       IN ('O','Q','R','P','E','B','D')
			AND FOD_SOURCE_FLG      = 'F'
			AND FOD_SLTP_ORDR_RFRNC is null;

 			if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
      {
       fn_errlog( c_ServiceName, "S31200",SQLMSG,c_err_msg);
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
       Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
	    } /*** Ver 11.5 End ***/

		}
	
    /** Ver 11.3 by Ravi End **/

   /*** Ver 11.1 starts ***/
    fn_userlog( c_ServiceName, "c_source_flg:%c:%c",c_source_flg,st_xchngbk.c_spl_flg);
    /*** if (st_xchngbk.c_spl_flg == 'F') ***/
    if (c_source_flg == 'F' )
    {
			/*Added FFS_MARGIN for Ver 12.8*/
      EXEC SQL
        SELECT DECODE(FFS_MARGIN,-1,FFS_MARGIN,FFS_CLS_TIME) 
        INTO  :st_ordbk.l_sqroff_tm
        FROM  FFS_FO_FLASH_SETTING
        WHERE FFS_CLM_MTCH_ACCNT = :st_usrprfl.c_cln_mtch_accnt;

      if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
      {
        fn_errlog( c_ServiceName, "S31205",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if (SQLCODE == NO_DATA_FOUND)
      {

				/** Ver 11.8 Start **/
				EXEC SQL SELECT MAX(NVL(FFC_DEF_TIMER,15)) INTO :st_ordbk.l_sqroff_tm FROM FFC_CATEGORY_MASTER;
				if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
				{
        	fn_errlog( c_ServiceName, "S31210",SQLMSG,c_err_msg);
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   
        	Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);  
        	Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				else if(SQLCODE == NO_DATA_FOUND)		/* Ver 13.1 Added NO_DATA_FOUND */
				{	
        st_ordbk.l_sqroff_tm = 15;		/** Changing from 5 to 15 in Ver 11.8 **/
				}	/** Ver 11.8 end **/
      }

      if (st_xchngbk.c_spl_flg != CLIENT_SQROFF && st_xchngbk.c_spl_flg != SYSTEM_SQUAREOFF )
      {
        st_ordbk.c_fc_flg = 'F';

    	/** Ver 11.3 by Ravi Start **/
			if(l_site_sell!=l_site_buy )	
			{
      fn_userlog(c_ServiceName, "This Contract not allowed in Flash Trade as Trades/Discrepancy found on this contract.");
      strcpy(c_err_msg,"This Contract not allowed in Flash Trade as Trades/Discrepancy found on this contract. ");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			else if (l_site_osell>0 || l_site_obuy>0)
			{
      fn_userlog(c_ServiceName, "This Contract not allowed in Flash Trade as website orders found in your trades on this contract please square off or cancel to continue with flash.");
      strcpy(c_err_msg, "This Contract not allowed in Flash Trade as website orders found in your trades on this contract please square off or cancel to continue with flash.");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			else if (fav_cnt >0) 
			{
      fn_userlog(c_ServiceName, "Order not placed as Discrepacncy Found in Flash Trade.");
      strcpy(c_err_msg, "Order not placed as Discrepacncy Found in Flash Trade.");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

    	/** Ver 11.3 by Ravi End **/
			}
			
    }
    fn_userlog( c_ServiceName,"c_source_flg:%c: st_xchngbk.c_spl_flg:%c: st_ordbk.l_sqroff_tm:%ld: st_ordbk.c_fc_flg=:%c:",c_source_flg,st_xchngbk.c_spl_flg,st_ordbk.l_sqroff_tm,st_ordbk.c_fc_flg);

		/* Ver 11.3 by Ravi Start */
		
		/* if ( (  st_cntrct.c_prd_typ == 'F' || st_cntrct.c_prd_typ == 'O' ) && st_ordbk.c_ordr_flw =='S'  commented in Ver 11.5 */
                   if ( (  st_cntrct.c_prd_typ == 'F' || (st_cntrct.c_prd_typ == 'O' && st_ordbk.c_ordr_flw =='S'))  		/*** Ver 11.5 ***/
				/*&& (st_xchngbk.c_spl_flg == CLIENT_SQROFF || st_xchngbk.c_spl_flg=='*') */
				&& c_source_flg !='F'
				&& (!strstr( st_xchngbk.c_xchng_rmrks,"Physical Settlement EOS")) && (st_xchngbk.c_spl_flg !=  PHYSICAL_DLVRY_SQOFF)
				&& (st_xchngbk.c_spl_flg != SYSTEM_SQUAREOFF )
				&& (st_xchngbk.c_spl_flg != IMTM_SYS_SQUAREOFF)
				&& (st_xchngbk.c_spl_flg != LMTNEG_SYS_SQUAREOFF )
       )
		{

		i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_CNTRCT_TAG,0,(char *)&c_popup_flg,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
        fn_errlog( c_ServiceName, "S31215", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
				fn_userlog( c_ServiceName," FFO_CNTRCT_TAG tag not present ");
        c_popup_flg ='Y';		/* Ver 11.9 Enabled Default Consent Accept */
      }
    }

		fn_userlog( c_ServiceName," FFO_CNTRCT_TAG tag value :%c ",c_popup_flg);

			if(fav_cnt>0)				/* Popup already displayed */
				c_popup_flg='Z';

			/* Ver 11.5  Start */
			if(st_cntrct.c_prd_typ == 'F' && fut_cnt<=0) /* futures opposite order type check */
				c_popup_flg='Z';
			/* Ver 11.5 End */
			/** Ver 11.9 Start **/
      if(((l_fe_sell_qty+l_fp_sell_qty)-(l_fe_buy_qty+l_fp_buy_qty))!=0)
			{
       i_popup=1;
			}
			/** Ver 11.9 End **/
		if (  c_popup_flg == 'N' && i_popup==1 )	/*** Ver 11.9  added i_popup***/
		{
		 /**	if(((l_fe_sell_qty+l_fp_sell_qty)-(l_fe_buy_qty+l_fp_buy_qty))!=0) Commented in Ver 11.9 **/
      {
      fn_userlog(c_ServiceName,"You are creating an offsetting position which might square off your existing Flash Orders/Trades ");
      strcpy(c_err_msg,"You are creating an offsetting position which might square off your existing Flash Orders/Trades ");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fchg32( ptr_fml_Ibuf, FFO_CNTRCT_TAG,0, (char *)&c_popup, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}
		else
		{
				if(DEBUG_MSG_LVL_3)
				fn_userlog( c_ServiceName, " No Flash Popup ");
		}

		}

		/* Ver 11.3 by Ravi End */

    /*** Ver 11.1 ends ***/

		/***** Ver 8.1 Starts *****/
  if ( st_xchngbk.c_spl_flg == ROLLOVER_WITH_SPREAD )
  {
    i_err[0] = Fget32(ptr_fml_Ibuf,FFO_EXECN_DT,0,(char *)c_expry_dt2,0);
    if ( i_err[0] == -1 )
    {
        fn_errlog( c_ServiceName, "S31220", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amount, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    fn_timearr_to_long(st_cntrct.c_expry_dt,&l_expry_dt1);
    fn_timearr_to_long(c_expry_dt2,&l_expry_dt2);
    if ( l_expry_dt1 < l_expry_dt2 )
    {
      i_rollover_ord_ind = 1;
      strcpy(c_spd_expry_dt1,st_cntrct.c_expry_dt);
      strcpy(c_spd_expry_dt2,c_expry_dt2);
    }
    else if ( l_expry_dt1 > l_expry_dt2 )
    {
      i_rollover_ord_ind = 2;
      strcpy(c_spd_expry_dt1,c_expry_dt2);
      strcpy(c_spd_expry_dt2,st_cntrct.c_expry_dt);
    }
    else
    {
      fn_errlog( c_ServiceName, "S31225", "Current and Rollover Expiry dates cannot be same.", c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amount, 0);
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  /***** Ver 8.1 Ends *****/

  /** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
	if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
  {
    fn_userlog(c_ServiceName,"After getting source flag...1:%c:",c_source_flg);
  }
    st_ordbk.c_bnk_accnt_nmbr[0][0]=c_source_flg;

  /*** Ver 6.9 Ends ***/

  /*** Ver 7.7 Starts ***/

    MEMSET(c_ip_address);

    i_err[1]  = Fget32(ptr_fml_Ibuf,FFO_OI_INDCTR,0,(char *)c_ip_address,0);
    i_ferr [1] = Ferror32;

    if ( i_err[1] == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
        fn_errlog( c_ServiceName, "S31230", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog( c_ServiceName, "c_ip_address is...:%s:",c_ip_address);
    }

  /*** Ver 7.7 Ends ***/

	strcpy ( c_chk_channel ,st_ordbk.c_channel ); /*** Added On 10-Dec-2011 ***/ 

  if(st_xchngbk.l_stp_lss_tgr > 0 )     /***  Ver 6.7 ***/
  {
    fn_userlog(c_ServiceName,"Inside Stop Loss Trigger Price Check.");
    st_ordbk.c_slm_flg = 'S' ;
    fn_userlog(c_ServiceName," SLM Flag Is :%c:",st_ordbk.c_slm_flg);
  }

	/**	if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
  if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
  {
		fn_userlog(c_ServiceName,"SPAN	-	CHANNEL IS :%s:",c_chk_channel);
		fn_userlog(c_ServiceName,"SPAN	- FLAG IS :%c:",st_ordbk.c_spl_flg);
	}

	st_ordbk.l_strike_prc	=	st_cntrct.l_strike_prc;

	/***  Ver 2.9 Commented
	if(st_cntrct.c_ctgry_indstk !='I' && st_cntrct.c_ctgry_indstk != 'S')
  {
	****/
		if(DEBUG_MSG_LVL_3)
		{
  		fn_userlog( c_ServiceName, "INVALID INDEX STOCK TYPE:%c:", st_cntrct.c_ctgry_indstk);
		}

		/*** Commneted In Ver 6.2 *** 

   	EXEC SQL
  	 	SELECT FCM_INDSTK
   	 	INTO  :st_cntrct.c_ctgry_indstk
   	 	FROM 	FCM_FO_CNTRCT_MSTR
   		WHERE FCM_XCHNG_CD  =:st_cntrct.c_xchng_cd
   		AND   FCM_PRDCT_TYP= 'F'; 
  	 	AND   FCM_UNDRLYNG  =:st_cntrct.c_undrlyng
   		AND   FCM_EXPRY_DT  =:st_cntrct.c_expry_dt ;
		
		*** Ver 6.2 Commnet Ends ***/

		/*** Ver 8.1 Starts ***/
    if ( st_xchngbk.c_spl_flg != ROLLOVER_WITH_SPREAD )
    {
    /*** Ver 8.1 Ends ***/ 

		/*** Ver 6.2 Starts ***/
 /* 7.9 */ 
    EXEC SQL
      SELECT FTQ_INDSTK,
						 NVL(FTQ_BST1_BID_PRC,0),   /*** Ver 8.9 ***/
          	 NVL(FTQ_BST1_OFFR_PRC,0),  /*** Ver 8.9 ***/
          	 NVL(FTQ_CLS_PRC,0)      		/*** Ver 8.9 ***/
      INTO  :st_cntrct.c_ctgry_indstk,
						:l_best_bid_price,          /*** Ver 8.9 ***/
            :l_best_offer_price,        /*** Ver 8.9 ***/
            :l_previous_close_price     /*** Ver 8.9 ***/
      FROM  FTQ_FO_TRD_QT
      WHERE FTQ_XCHNG_CD  =:st_cntrct.c_xchng_cd
      AND   FTQ_PRDCT_TYP = DECODE(:st_cntrct.c_prd_typ,'P','F','U','F','I','O',:st_cntrct.c_prd_typ)
      AND   FTQ_UNDRLYNG  =:st_cntrct.c_undrlyng
      AND   FTQ_OPT_TYP   =:st_cntrct.c_opt_typ
      AND   FTQ_STRK_PRC  =:st_cntrct.l_strike_prc
      AND   FTQ_EXPRY_DT  =:st_cntrct.c_expry_dt ;

    /*** Ver 6.2 Ends ***/
		/*** Ver 8.1 Starts ***/
    }
    else
    {
    EXEC SQL
      SELECT FTQ_INDSTK
      INTO  :st_cntrct.c_ctgry_indstk
      FROM  FTQ_FO_TRD_QT
      WHERE FTQ_XCHNG_CD  =:st_cntrct.c_xchng_cd
      AND   FTQ_PRDCT_TYP = DECODE(:st_cntrct.c_prd_typ,'F','S',:st_cntrct.c_prd_typ)
      AND   FTQ_UNDRLYNG  =:st_cntrct.c_undrlyng
      AND   FTQ_OPT_TYP   =:st_cntrct.c_opt_typ
      AND   FTQ_STRK_PRC  =:st_cntrct.l_strike_prc
      AND   FTQ_EXPRY_DT  =:c_spd_expry_dt1
      AND   FTQ_EXPRY_DT2 =:c_spd_expry_dt2 ;
    }

    /*** Ver 8.1 Ends ***/

   	if(SQLCODE != 0 )
   	{
     	fn_userlog( c_ServiceName, "INDEX STOCK TYPE is NULL");
     	fn_errlog( c_ServiceName, "S31235", SQLMSG, c_err_msg  );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

   	st_ordbk.c_ctgry_indstk = st_cntrct.c_ctgry_indstk;
		
		if(DEBUG_MSG_LVL_3)
		{
   		fn_userlog( c_ServiceName, "CORRECTED FCM INDEX STOCK TYPE:%c:%c:", st_cntrct.c_ctgry_indstk,st_ordbk.c_ctgry_indstk);
		}
	/***  Commented In Ver 2.9
 	}
	***/
	
	/*** Ver 4.7 Starts ***/

	/*** Commented in Ver 12.0 if((st_cntrct.c_prd_typ == 'I') && (st_xchngbk.c_slm_flg != MARKET)) ***/
  if((st_cntrct.c_prd_typ == 'I' || st_cntrct.c_prd_typ == 'O') && (st_xchngbk.c_slm_flg != MARKET) && (strcmp(st_ordbk.c_channel,"OFF") != 0)) /** Added in Ver 12.0 ***/ /*** Ver 12.3 check added for corporate action order placement ***/
  {
    i_returncode =  fn_op_vrfy_spnprc_band_mkt ( c_ServiceName,
																								 st_xchngbk.l_ord_lmt_rt, 
                                 								 &st_ordbk,
																								 &st_errmsg
                               								 );

		if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31240", LIBMSG, c_err_msg );
 	    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

  }
	
	/*** Ver 4.7 Ends   ***/


	/*** Ver 3.8 starts here ***/
  /** if (st_cntrct.c_prd_typ == 'U') Commented In Ver 4.1 ***/
  if (st_cntrct.c_prd_typ == 'U' || st_cntrct.c_prd_typ == 'I') /*** Ver 4.1 ***/
	{
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "st_xchngbk.c_spl_flg= :%c:,st_ordbk.c_channel = :%s: ",st_xchngbk.c_spl_flg,st_ordbk.c_channel);
		}
		if (st_xchngbk.l_ord_tot_qty < 0 ) /*** Ver 5.3 ***/
		{
			st_xchngbk.l_ord_tot_qty = st_xchngbk.l_ord_tot_qty * -1;
			st_ordbk.l_ord_tot_qty = st_ordbk.l_ord_tot_qty * -1;
			i_excp_flag = 1;
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName, "st_xchngbook.l_ord_tot_qty= :%ld:",st_xchngbk.l_ord_tot_qty);
				fn_userlog( c_ServiceName, "st_ordbk.l_ord_tot_qty= :%ld:",st_ordbk.l_ord_tot_qty);
			}
		}

		MEMSET(c_call_source);
		i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_ACTION1,0,(char *)c_call_source,0);
		i_ferr [0] = Ferror32;

		if ( i_err[0] == -1 )
		{
			if ( Ferror32 != FNOTPRES )
			{
				fn_errlog( c_ServiceName, "S31245", FMLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
	      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
  			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			else if( Ferror32 == FNOTPRES )
			{
				/*** This code checks whether service is called from...other than Order link, EOS or Offline ***/
				if ( st_xchngbk.c_spl_flg != 'C' && strcmp(st_ordbk.c_channel,"SYS") !=0 && strcmp(st_ordbk.c_channel,"OFF") !=0 )
				{
					if ( st_cntrct.c_prd_typ == 'U') /*** Ver 4.1 if condition added ***/
          {
            fn_userlog( c_ServiceName, "*** FuturePLUS SLTP product type validation fails ***");
          }
          else if(st_cntrct.c_prd_typ == 'I' && c_source_flg != 'F') /*** Ver 4.1 ***/ /** Ver 12.1 added flash flag **/
          {
            fn_userlog( c_ServiceName, "*** OptionPLUS product type validation fails ***");
          }
					fn_errlog( c_ServiceName, "S31250", LIBMSG, c_err_msg  );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
	        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
  				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}
		}
		else /* success condition */
		{
			if ( strcmp(c_call_source,"PLC_SLTPFP") == 0 )
			{
				fn_userlog( c_ServiceName, "*** FuturePLUS SLTP order placement ***");
      /*** ver 10.5 starts ****/
       if( st_xchngbk.c_spl_flg == 'P' )
       {
        i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_MTCH_CNTCT_KEY,0,(char *)c_profit_ordr,0);
        i_ferr [0] = Ferror32;

        if ( i_err[0] == -1 )
        {
          fn_errlog( c_ServiceName, "S31255", LIBMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
       rtrim(c_profit_ordr);
      }
      /*** ver 10.5 ends **/
			}
			else if ( strcmp(c_call_source,"PLC_OPTPLUS") == 0 ) /*** Ver 4.1 ***/
      {
        fn_userlog( c_ServiceName, "*** OptionPLUS order placement ***");
      }
			else /*** This code should never execute ***/
			{
				fn_userlog( c_ServiceName, "Called from :%s:",c_call_source);
				fn_errlog( c_ServiceName, "S31260", LIBMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
		    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}
		i_err[0] = 0;
		i_ferr[0] = 0;
	}
	/*** Ver 3.8 ends here ***/

  /**** Comment ion Ver 5.5 Starts here *********

	strcpy((char *)v_user_id.arr,st_ordbk.c_user_id);

  SETLEN(v_user_id);

  if(DEBUG_MSG_LVL_3)
  {
  	fn_userlog(c_ServiceName,"st_ordbk.c_user_id IS  :%s:", st_ordbk.c_user_id);
  	fn_userlog(c_ServiceName,"v_user_id IS  :%s:", v_user_id.arr );
  	fn_userlog(c_ServiceName,"st_ordbk.l_cse_id IS :%ld:",st_ordbk.l_cse_id); 
  }

  if ( strcmp((char *)v_user_id.arr,"system") == 0 )
  {
    if(DEBUG_MSG_LVL_0)
    {
    	fn_userlog(c_ServiceName,"SYSTEM PLACING ORDER");
    }

   	EXEC SQL
		  SELECT  DECODE(NVL(CLM_BP_ID,'*'),'*',UAC_USR_ID,CLM_BP_ID)
      INTO    :v_user_id
      FROM    UAC_USR_ACCNTS, CLM_CLNT_MSTR
      WHERE   CLM_MTCH_ACCNT      = :st_ordbk.c_cln_mtch_accnt
      AND     UAC_CLM_MTCH_ACCNT  = CLM_MTCH_ACCNT;

    if(( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
      fn_errlog( c_ServiceName, "S31265", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   *** Ver 3.0 ***
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    SETNULL(v_user_id);

    if(DEBUG_MSG_LVL_3)
    {
    	fn_userlog(c_ServiceName,"BP ID IS  :%s:", v_user_id.arr);
    }
  }

  ****** Ver 5.5 Ends Here ****/

	if (st_ordbk.c_ctcl_id[0]=='\0' ) /* VER TOL : TUX on LINUX -- NULL replaced by '\0' (Ravindra) */
  {
    fn_userlog( c_ServiceName, "ERROR ctcl id value is null :%s:", st_ordbk.c_ctcl_id);
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "CTCL ID :%s:", st_ordbk.c_ctcl_id);
	}

	fn_init_ddr_pop ( st_xchngbk.c_pipe_id,TRADING_SECTION,F_CS);

	
  if(st_usrprfl.c_user_id[0] == BPID)
  {
    if(Fget32(ptr_fml_Ibuf,FFO_ALIAS,0,(char *)c_alias,0) == -1)
    {
      fn_errlog( c_ServiceName, "S31270", FMLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		/******* Ver 7.8 Start Here *******************/
		MEMSET(c_sys_msg);
		if(st_cntrct.c_prd_typ == 'U' || st_cntrct.c_prd_typ == 'I')
		{	
			i_err[0]  =Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0); 
			i_ferr [0] = Ferror32;

			if( i_err[0] == -1 && Ferror32 != FNOTPRES)
			{
				fn_errlog( c_ServiceName, "S31275", FMLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
				Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
				Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
    	rtrim( c_sys_msg );
		}
		/*********** Ver 7.8 Ends Here ***************/	
		if(strcmp(c_sys_msg,"MY_EOS")!=0) /*** if condition added in Ver 7.8 ***/
		{	
    	i_level_exists = 0;

    	EXEC SQL
    		SELECT 1
    		INTO   :i_level_exists
    		FROM   CLM_CLNT_MSTR
    		WHERE  CLM_MTCH_ACCNT = :st_usrprfl.c_cln_mtch_accnt
    		AND    CLM_BP_ID      = :st_usrprfl.c_user_id
    		AND    CLM_ALIAS_NAME = :c_alias;

    	if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)     /*** Ver 4.2 ** NO_DATA_FOUND condition added ***/
    	{
      	fn_errlog( c_ServiceName, "S31280",SQLMSG,c_err_msg);
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      	Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      	Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

    /** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
  		if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
    	{
    		fn_userlog(c_ServiceName,"BP alias  is :%s:",c_alias);
    	}

    	if(i_level_exists != 1 )
    	{
      	fn_errlog( c_ServiceName, "B55006", "", c_err_msg  );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      	Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      	Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}  
		}
   	strcpy(c_bp_id,st_usrprfl.c_user_id);
 	}
	else
  {

		/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
  	if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
		{
    	fn_userlog(c_ServiceName,"For Normal USER ID ");
		}

    EXEC SQL
      SELECT  NVL(CLM_BP_ID,'*')
      INTO    :c_bp_id
      FROM    CLM_CLNT_MSTR
      WHERE   CLM_MTCH_ACCNT = :st_usrprfl.c_cln_mtch_accnt;

    if(SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31285",SQLMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if(c_bp_id [0] != '*')
    {
      strcpy((char *)v_user_id.arr,st_ordbk.c_user_id);
      SETLEN(v_user_id);
    }

  }

  if(DEBUG_MSG_LVL_3)
  {
  	fn_userlog(c_ServiceName,"The BP id is :%s: ,:%s:", c_bp_id,st_usrprfl.c_user_id);
  	fn_userlog(c_ServiceName,"The Alias is :%s: ", c_alias);
  	fn_userlog(c_ServiceName,"v_user_id Is :%s:",v_user_id.arr);
  }

  /***** Ver 5.5 Starts Here *****

  EXEC SQL  SELECT  USR_DT_ALLWD_FLG
            INTO    :sql_usr_dt_allwd_flg
            FROM    USR_USER_MASTER
            WHERE   USR_USR_ID  = :v_user_id;

  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31290", SQLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   *** Ver 3.0 ***
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  ****** Ver 5.5 Ends Here ****/

  if( sql_usr_dt_allwd_flg != 'Y' )
  {
    MEMSET(v_user_id);
  }

  if(DEBUG_MSG_LVL_3)
  {
  	fn_userlog(c_ServiceName,"DT ALLOWED FLAG IS  :%c:", sql_usr_dt_allwd_flg);
  	fn_userlog(c_ServiceName,"USER ID IS  :%s:", v_user_id.arr);
  }
 	if(DEBUG_MSG_LVL_3)
  {
  	fn_userlog( c_ServiceName, "st_xchngbk.c_xchng_cd :%s:", st_xchngbk.c_xchng_cd );
  }

	/*** Following Commented In Ver 1.9	
  EXEC SQL
  	SELECT TO_CHAR( EXG_NXT_TRD_DT, 'DD-Mon-YYYY' ),
    	     TO_CHAR( EXG_NXT_TRD_DT, 'YYYYMMDD' ),
	******/
   /* 7.9 */
	EXEC SQL
  	SELECT TO_CHAR( GREATEST(EXG_NXT_TRD_DT,EXG_TMP_TRD_DT), 'DD-Mon-YYYY' ),       /*** Ver 1.9  ***/
    	     TO_CHAR( GREATEST(EXG_NXT_TRD_DT,EXG_TMP_TRD_DT), 'YYYYMMDD' ),          /*** Ver 1.9  ***/		
					 TO_CHAR( EXG_NXT_TRD_DT, 'DD-Mon-YYYY' ),                                /*** Ver 1.9 ***/
      	   TO_CHAR( SYSDATE, 'DD-Mon-YYYY hh24:mi:ss' )
  	INTO   :c_trd_dt,
    	     :c_date,
					 :c_nrml_trd_dt,        /*** Ver 1.9 ***/
      	   :c_sysdate
  	FROM   EXG_XCHNG_MSTR
  	WHERE  EXG_XCHNG_CD = :st_xchngbk.c_xchng_cd
  	AND    EXG_MKT_TYP  =:c_exg_mkt_typ;       /* 7.9 Hard Code Value Replace With Bind Variable  */

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31295",SQLMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  SETNULL ( c_trd_dt );
  SETNULL ( c_sysdate );
  SETNULL ( c_date );

	/*** Ver 1.9 Starts ***/
  /*** Following checks whether the underlying in which client trying to place order will come under corporate action ***/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Underlying Is :%s:",st_ordbk.c_undrlyng);
    fn_userlog(c_ServiceName,"Exchange Trade date Is :%s:",c_nrml_trd_dt.arr);
  }

  i_corp_rec_exists = 0;
  if(strcmp(st_ordbk.c_channel,"OFF") != 0)
  {
    EXEC SQL
      SELECT  1
      INTO   :i_corp_rec_exists
      FROM   FCM_FO_CORP_MSTR
      WHERE  FCM_UNDRLYNG = :st_ordbk.c_undrlyng
      AND    FCM_ACTN_DT  = :c_nrml_trd_dt 
      AND    FCM_RUN_STTS != :c_fcm_run_stts_p;   /* 7.9 Hard Code Value Replace With Bind Variable  */
  }

  if ( i_corp_rec_exists == 1)
  {
    fn_errlog ( c_ServiceName, "B28518", DEFMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }

  /*** Ver 1.9 Ends   ***/
	

  strcpy( st_xchngbk.c_mod_trd_dt, (char *) c_trd_dt.arr);
  strcpy( st_ordbk.c_trd_dt, (char *) c_trd_dt.arr);

  if(DEBUG_MSG_LVL_3)
  {
  	fn_userlog( c_ServiceName, " c_spl_flg :%c:", st_xchngbk.c_spl_flg );
  }

  c_trdng_psswrd_flg = YES;

	/*** Following moved from below in Ver 2.4 ***/
	if( st_xchngbk.c_slm_flg == MARKET && ( st_cntrct.c_prd_typ == 'F' || st_cntrct.c_prd_typ == 'U') )
  {

    i_returncode  = fn_get_qt ( c_ServiceName,
                                &st_cntrct ,
                                &st_cntrctqt ,
                                c_err_msg
                              );

    if ( i_returncode != 0 )
    {
      fn_errlog( c_ServiceName, "S31300", LIBMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    l_ord_lmt_rt = st_cntrctqt.l_lst_trdd_prc;
  }
  else if ( st_cntrct.c_prd_typ == 'O' || st_cntrct.c_prd_typ == 'I' )  /*** Ver 10.0 ***/ 
  {
    l_ord_lmt_rt  = st_cntrct.l_strike_prc;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"st_cntrct.l_strike_prc :%ld:",st_cntrct.l_strike_prc);
      fn_userlog(c_ServiceName,"l_ord_lmt_rt :%ld:",l_ord_lmt_rt);
     }
  }
  else
  {
      l_ord_lmt_rt = st_xchngbk.l_ord_lmt_rt;
  }

  /** ver 10.5 starts ***/


  if( st_cntrct.c_prd_typ == SLTP_FUTUREPLUS && st_xchngbk.c_spl_flg == 'P' )
  {
      c_source_flg = 'P';
      c_rqst_typ  = 'P';
      c_sub_rqst = 'A';

      EXEC SQL
      SELECT FOD_STP_LSS_TGR
      INTO :l_sltp_trg_prft
      FROM FOD_FO_ORDR_DTLS
      WHERE FOD_FC_FLAG= 'C'
      AND FOD_LMT_MRKT_SL_FLG ='S'
      AND Decode(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )= :c_profit_ordr; /*** Fresh reference ***/

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31305", LIBMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      EXEC SQL
       SELECT  NVL(SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),0),
               NVL(SUM(FTD_EXCTD_QTY),0)
              INTO    :d_frsh_exe_val,
                      :li_tot_exec_qty
              FROM    FTD_FO_TRD_DTLS
              WHERE   FTD_ORDR_RFRNC = :c_profit_ordr; /*** Fresh reference ***/

       if( SQLCODE != 0 )
       {
        fn_errlog( c_ServiceName, "S31310", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        d_avg_prc  = (double) (d_frsh_exe_val / li_tot_exec_qty);

        fn_userlog( c_ServiceName, "st_ordbk.c_ordr_flw.:%c: AVG :%lf:",st_ordbk.c_ordr_flw,d_avg_prc);
      i_returncode  = fn_call_svc_fml ( c_ServiceName,
                                           c_err_msg,
                                           "SFO_LMT_PRC_CAL",
                                           0,
                                           15,
                                           1,
                                           FFO_USR_ID                 , (char *)st_usrprfl.c_user_id,
                                           FFO_SSSN_ID                , (char *)&st_usrprfl.l_session_id,
                                           FFO_XCHNG_CD               , (char *)st_ordbk.c_xchng_cd,
                                           FFO_ORDR_FLW               , (char *)&st_ordbk.c_ordr_flw,
                                           FFO_UNDRLYNG               , (char *)st_ordbk.c_undrlyng,
                                           FFO_EBA_MTCH_ACT_NO        , (char *)st_usrprfl.c_cln_mtch_accnt,
                                           FFO_RQST_TYP               , (char *)&c_rqst_typ ,
                                           FFO_PRDCT_TYP              , (char *)&st_ordbk.c_prd_typ,
                                           FFO_OPT_TYP                , (char *)&st_ordbk.c_opt_typ,
                                           FFO_STRK_PRC               , (char *)&st_ordbk.l_strike_prc,
                                           FFO_STP_LSS_TGR            , (char *)&l_sltp_trg_prft,
                                           FFO_EXPRY_DT               , (char *)st_ordbk.c_expry_dt,
                                           FFO_SOURCE_FLG             , (char *)&c_source_flg ,
                                           FFO_DLVRY_ALLWD            , (char *)&c_sub_rqst,
                                           FFO_CHNG_OI                , (char *)&d_prft_percntg,
                                           FFO_LMT_RT                 , (char *)&l_ret_limit_rt ,NULL
                                        );
      if (i_returncode != 0)
      {
      fn_errlog( c_ServiceName, "S31315", "Error while calling SFO_LMT_PRC_CAL", c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

 fn_userlog( c_ServiceName, "st_ordbk.c_ordr_flw=:%c:l_sltp_trg_prft=:%ld:l_ret_limit_rt:%ld:st_ordbk.l_ord_lmt_rt=:%ld:",st_ordbk.c_ordr_flw,l_sltp_trg_prft,l_ret_limit_rt,st_ordbk.l_ord_lmt_rt);

      fn_userlog( c_ServiceName, "l_ret_limit_rt.................:%ld:",l_ret_limit_rt);

      /** The profit order limit price should be above the Stop Loss Trigger price + X% of Stop Loss trigger Price **/
      if( st_ordbk.c_ordr_flw == 'S' && (l_ret_limit_rt > st_ordbk.l_ord_lmt_rt))/** fresh buy **/
      {
      fn_userlog( c_ServiceName, "Profit Limit Price should be above the SLTP+X% SLTP FOR SELL");
      strcpy(c_err_msg,"Profit Limit Price should be above the SLTP+X% SLTP FOR SELL");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if( st_ordbk.c_ordr_flw == 'B' && (l_ret_limit_rt < st_ordbk.l_ord_lmt_rt))
      {
       fn_userlog( c_ServiceName, "Profit Limit Price should be below  the SLTP+X% SLTP FOR BUY");
      strcpy(c_err_msg,"Profit Limit Price should be below  the SLTP+X% SLTP FOR BUY");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      /** Profit Limit Price cannot be less than Fresh Order Price In case of Fresh Buy Order **/
      if( st_ordbk.c_ordr_flw == 'S' && ( st_ordbk.l_ord_lmt_rt < d_avg_prc ))
      {
       fn_userlog( c_ServiceName, "Profit Limit Price cannot be less than Fresh Order Price BUY");
      strcpy(c_err_msg,"Profit Limit Price cannot be less than Fresh Order Price");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if( st_ordbk.c_ordr_flw == 'B' && ( st_ordbk.l_ord_lmt_rt >  d_avg_prc ))
      {
      fn_userlog( c_ServiceName, "Profit Limit Price cannot be greater than Fresh Order Price SELL");
      strcpy(c_err_msg,"Profit Limit Price cannot be greater than Fresh Order Price");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
  }
 /*** ver 10.5 ends ***/	
	/*** Following moved from below  Ends in Ver 2.4 ***/

  /**** ver 7.4 code moved from below Starts ****/

  if ( ( st_xchngbk.c_spl_flg == CLIENT_SQROFF ) ||
  ( st_xchngbk.c_spl_flg == SYSTEM_SQUAREOFF)  ||
  ( st_xchngbk.c_spl_flg == IMTM_SYS_SQUAREOFF )  ||
  ( st_xchngbk.c_spl_flg == LMTNEG_SYS_SQUAREOFF  )  ||
	( st_xchngbk.c_spl_flg == PHYSICAL_DLVRY_SQOFF ) ||         /** Ver 9.0 **/
  ( st_xchngbk.c_spl_flg == JOINT_SQUAREOFF ) || (st_xchngbk.c_spl_flg == 'P' ) )/**ver 10.5 special flag added ***/
  {
    if(st_cntrct.c_prd_typ == 'U' || st_cntrct.c_prd_typ == 'I')
    {
      MEMSET(c_sys_msg);
      i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0);
      i_ferr [0] = Ferror32;
      rtrim( c_sys_msg );

      if ( i_err[0] == -1 )
      {
        if ( Ferror32 != FNOTPRES )
        {
          fn_errlog( c_ServiceName, "S31320", FMLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        else if( Ferror32 == FNOTPRES )
        {
          if(DEBUG_MSG_LVL_3)
          {
            fn_userlog(c_ServiceName," 666");
          }

          if ( st_cntrct.c_prd_typ == 'U' )
          {
            strcpy(c_sys_msg,"COVER_SLTP");
          }
          else if (st_cntrct.c_prd_typ == 'I')
          {
            strcpy(c_sys_msg,"COVER_OPTPLUS");
          }
        }
      }
      else
      {
        /*** if ( i_excp_flag == 1)     ** commented in Ver 7.4 ***
        {
          strcpy(c_sys_msg,"EXCPT_EOS");
        }  ***/
        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName," 777");
          fn_userlog(c_ServiceName,"c_sys_msg =:%s:",c_sys_msg);
        }
      }
	
      if(DEBUG_MSG_LVL_3)
      {
      fn_userlog(c_ServiceName,"In fn_chk_spncntrct_sltpfp_sqoff");
      }

      rtrim(st_cntrct.c_expry_dt);

			i_returncode = fn_chk_spncntrct_sltpfp_sqoff(c_ServiceName,&st_cntrct,&c_fum_mrkt_typ,&c_fcm_mrkt_typ,&st_errmsg);
			if ( i_returncode != 0 ) 
			{
         fn_errlog( c_ServiceName, "S31325", LIBMSG, c_err_msg  );
				 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0 );
				 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   
				 Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
				 Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
				 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
    }
  }
    /**** ver 7.4 code moved from below Ends  ****/


	if (( st_xchngbk.c_spl_flg != 'J' )            &&
     ( st_xchngbk.c_spl_flg != SYSTEM_SQUAREOFF) &&
     ( st_xchngbk.c_spl_flg != L2_ORDER)         &&
     ( st_xchngbk.c_spl_flg != L3_ORDER)         &&
		 ( st_xchngbk.c_spl_flg != ROLLOVER)         && /** Ver 1.8 **/
		 ( st_xchngbk.c_spl_flg != ROLLOVER_WITH_SPREAD)  &&  /** Ver 8.1 **/
 /** ( st_cntrct.c_prd_typ != SLTP_FUTUREPLUS )  && ** Ver 2.2 *** Commented in Ver 6.7 ***/
     ( st_cntrct.c_prd_typ != SLTP_FUTUREPLUS ||
     ( st_cntrct.c_prd_typ == SLTP_FUTUREPLUS && st_xchngbk.c_spl_flg == CLIENT_SQROFF) ||
     ( st_cntrct.c_prd_typ == SLTP_FUTUREPLUS && st_xchngbk.c_spl_flg == 'P'  )) && /** OR condition added in Ver 6.7 as session check was getting skipped while Placing Cover Order from Open Position ***/   /*** Ver IP Capturing for Profit order 'P' 11.4 **/
     ( st_cntrct.c_prd_typ != OPTIONPLUS      ||
     ( st_cntrct.c_prd_typ == OPTIONPLUS && st_xchngbk.c_spl_flg == CLIENT_SQROFF)) && /*** Added in Ver 6.7 ***/
     /*** ( st_cntrct.c_prd_typ != OPTIONPLUS )       && ** Ver 4.1*** Commented in Ver 6.5***/
     ( st_xchngbk.c_spl_flg != IMTM_SYS_SQUAREOFF ) &&            /*** Ver 4.9 ***/
     ( st_xchngbk.c_spl_flg != LMTNEG_SYS_SQUAREOFF ) &&          /*** Ver 4.9 ***/
		 ( st_xchngbk.c_spl_flg != PHYSICAL_DLVRY_SQOFF ) &&          /*** Ver 9.0 ***/
     ( st_xchngbk.c_spl_flg != ARBITRAGE )      &&
     ( strcmp(st_usrprfl.c_user_id,"system") != 0 ) &&
     /** (c_1clk_flg !='Y' )                )  ** Ver 10.4 c_1clk_flg added **       commented in ver 12.5 **/
     ((c_1clk_flg !='Y' )||(c_1clk_flg =='Y' && st_xchngbk.c_spl_flg=='C')) && /** ver 12.5 added **/
		 ( st_xchngbk.c_spl_flg != 'G' )) /** Ver 13.3 **/
  {

  if( strcmp ( c_sys_msg, "MY_EOS") != 0)   /** ver 7.4 **/
  {
    i_err[0] = Fget32( ptr_fml_Ibuf, FFO_TRD_PSSWD, 0, (char *)c_usr_usr_psswrd.arr,0);
    i_ferr [0] = Ferror32;

    if (( i_err[0] == -1 ) && ( i_ferr[0] != FNOTPRES ))
    {
      fn_errlog( c_ServiceName, "S31330", Fstrerror32(i_ferr[0]),c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		/*** Following taken above in Ver 2.4 

		if( st_xchngbk.c_slm_flg == MARKET && st_cntrct.c_prd_typ == 'F' )
    {
		
			i_returncode	=	fn_get_qt ( c_ServiceName,
                									&st_cntrct ,
                									&st_cntrctqt ,
                									c_err_msg
              									);

			if ( i_returncode != 0 )
			{
				fn_errlog( c_ServiceName, "S31335", LIBMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

     	l_ord_lmt_rt = st_cntrctqt.l_lst_trdd_prc;
    }
		else if ( st_cntrct.c_prd_typ == 'O' )
		{
			l_ord_lmt_rt	=	st_cntrct.l_strike_prc;
	
			if(DEBUG_MSG_LVL_3)
			{	
				fn_userlog(c_ServiceName,"st_cntrct.l_strike_prc :%ld:",st_cntrct.l_strike_prc);
				fn_userlog(c_ServiceName,"l_ord_lmt_rt :%ld:",l_ord_lmt_rt);
			}
		}
    else
    {
        l_ord_lmt_rt = st_xchngbk.l_ord_lmt_rt;
    }

		Commented and taken above for Ver 2.4 Ends ***/

	  i_returncode = fn_chk_spntrdng_limit	(	c_ServiceName,
                                      			st_xchngbk.l_ord_tot_qty,
                                      			l_ord_lmt_rt,
                                      			&c_trdng_psswrd_flg,
                                      			&st_usrprfl,
                                      			&st_errmsg 
																					);
    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31340", LIBMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if(DEBUG_MSG_LVL_3)
    {
    	fn_userlog( c_ServiceName, "c_trdng_psswrd_flg:%c:", c_trdng_psswrd_flg );
    }


    SETLEN( c_usr_usr_psswrd );
		/*** Ver 9.4 Starts ***/
		if (c_trdng_psswrd_flg == YES && strcmp(c_ven_nm.arr,"SENSIBULL") == 0)
		{
			fn_errlog( c_ServiceName, "S31345", "Please try placing order with lesser order value from sensibull", c_err_msg );
			strcpy( c_err_msg,"Please try placing order with lesser order value from sensibull");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		/*** Ver 9.4 Ends ***/

    if ( c_trdng_psswrd_flg == YES )
    {
      strcpy( c_temp_psswrd, (char *)c_usr_usr_psswrd.arr );
    }
  }
  else if(strcmp ( c_sys_msg , "MY_EOS") == 0 )     /** Else part added in Ver 7.4 **/
  {
    c_trdng_psswrd_flg = NO ;
  }

	  /*** Commented in Ver 1.7 ***
    i_returncode =  fn_check_spnuser	(	c_ServiceName,
                                    		&st_usrprfl ,
                                    		c_temp_psswrd,
                                    		c_trdng_psswrd_flg,
                                    		&st_errmsg
		 																	);

    *****************************/
		/*** Added in Ver 1.7 ***/
		
/** if( st_cntrct.c_prd_typ != OPTIONPLUS ) *** if condition added in Ver 6.5 *** if Condition is Removed in Ver 6.7 ** 
	{   ***/
		if(DEBUG_MSG_LVL_3)
		{	
		 	fn_userlog(c_ServiceName,"before call to fn_check_spnuser_ip");
		  fn_userlog(c_ServiceName,"ip address :%s:",c_ip_address);
		}
	
		/*** Commented for Ver 7.2 ***
    i_returncode =  fn_check_spnuser_ip ( c_ServiceName,
                                          &st_usrprfl ,
                                          c_temp_psswrd,
                                          c_trdng_psswrd_flg,
                                          c_ip_address,
                                          c_txn_flg,            *** Ver 7.0 ***
                                          &st_errmsg
                                        );
		*** Ver 7.2 ***/

    /*** Ver 7.2 starts ***/
    memcpy(&st_usrprfl_vw,&st_usrprfl,sizeof(st_usrprfl_vw));

    i_returncode =  fn_check_user_ip ( c_ServiceName,
                                      &st_usrprfl_vw ,
                                      c_temp_psswrd,
                                      c_trdng_psswrd_flg,
                                      c_ip_address,
                                      c_txn_flg,
                                      &st_errmsg_vw
                                    );
    /*** Ver 7.2 ends ***/

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"After call to fn_check_spnuser_ip");
		}
    /*************************/

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31350", LIBMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_errmsg_vw.c_err_msg, 0 );  /*** Ver 7.2 changed st_err_msg to st_errmsg_vw ***/
			
			/*** Ver 3.0 starts***/

      if(c_trdng_psswrd_flg == 'Y')
      {
        i_actn_id = 1;
      }
      else
      {
        i_actn_id = -1;
      }

      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );

      /** Ver 3.0 ends **/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/  
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		  /*** strcpy(st_xchngbk.c_ip_address, c_ip_address); Commented in Ver 7.7 *** Ver 1.7 ***/
/* }  If condition is removed **/
  }

      strcpy(st_xchngbk.c_ip_address, c_ip_address);    /*** Ver 7.7 ***/

	if(DEBUG_MSG_LVL_3) /*** Ver 1.7 ***/
  {
    fn_userlog(c_ServiceName,"ip address:%s:",c_ip_address);
  }

  if ( ( st_xchngbk.c_spl_flg == CLIENT_SQROFF ) || ( st_xchngbk.c_spl_flg == SYSTEM_SQUAREOFF)  || ( st_xchngbk.c_spl_flg == JOINT_SQUAREOFF ) || ( st_xchngbk.c_spl_flg == IMTM_SYS_SQUAREOFF ) || ( st_xchngbk.c_spl_flg == LMTNEG_SYS_SQUAREOFF ) || ( st_xchngbk.c_spl_flg ==  PHYSICAL_DLVRY_SQOFF ) ) /*** Check added for IMTM_SYS_SQUAREOFF and LMTNEG_SYS_SQUAREOFF in Ver 4.9 ***/ /*** Ver 9.0 ***/
  {
		 
		/*** if( st_cntrct.c_prd_typ != 'U' )   ** Ver 2.2 ** Commented In Ver 4.1 ***/
    if( st_cntrct.c_prd_typ != 'U' && st_cntrct.c_prd_typ != 'I' )    /** Ver 4.1 **/
		{																		/** Ver 2.2 **/   

    if(DEBUG_MSG_LVL_3)                                               
    {
    	fn_userlog(c_ServiceName,"In fn_chk_spncntrct_sqoff");
    }
		
			/**** Ver 7.6 Starts ****/
		if( c_sltp_trail_flag == 'Y')
		{
			i_returncode = fn_chk_trail_spncntrct_sqoff ( c_ServiceName,
                                        					&st_cntrct,
                                        					&c_fum_mrkt_typ,             
                                        					&c_fcm_mrkt_typ,            
                                        					&st_errmsg
 																								);
		}
		/**** Ver 7.6 Ends ****/
		else
		{
			    i_returncode = fn_chk_spncntrct_sqoff	( c_ServiceName,
                                        		&st_cntrct,
                                        		&c_fum_mrkt_typ,             
                                        		&c_fcm_mrkt_typ,            
                                        		&st_errmsg
 																					);
		}

	 	EXEC SQL
   		SELECT	FCP_OPNPSTN_QTY,
							DECODE(FCP_OPNPSTN_FLW,'S',GREATEST(ABS(FCP_IBUY_QTY),ABS(FCP_EXBUY_QTY)),'B',
                     GREATEST( ABS(FCP_ISELL_QTY), ABS(FCP_EXSELL_QTY)),0)  /*** Ver 3.0 ***/
    		INTO  :l_opnpstn_qty,
							:l_cvr_qty      /*** Ver 3.0 ***/
    		FROM  FCP_FO_SPN_CNTRCT_PSTN
    		WHERE	FCP_CLM_MTCH_ACCNT	= :st_usrprfl.c_cln_mtch_accnt
    		AND   FCP_UNDRLYNG       	= :st_cntrct.c_undrlyng
    		AND   FCP_EXPRY_DT       	= :c_expiry_dt
    		AND   FCP_PRDCT_TYP      	= :st_cntrct.c_prd_typ      
    		AND   FCP_XCHNG_CD       	= :st_cntrct.c_xchng_cd
				AND		FCP_STRK_PRC			 	=	:st_cntrct.l_strike_prc	
				AND		FCP_EXER_TYP			 	=	:st_cntrct.c_exrc_typ
				AND		FCP_OPT_TYP					= :st_cntrct.c_opt_typ;

    	if(SQLCODE != 0 )
    	{
        fn_errlog( c_ServiceName, "S31355", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
        /*** ver 8.1 starts RWS ORDER IS PLACED AND CUST IS TRYING CLIENT SQOFF ***/
      l_rws_qty = 0;

EXEC SQL
SELECT NVL(SUM(NVL(FOD_ORDR_TOT_QTY,0)-NVL(FOD_EXEC_QTY,0)-NVL(FOD_CNCL_QTY,0)-NVL(FOD_EXPRD_QTY,0)),0)
INTO :l_rws_qty
FROM FOD_FO_ORDR_DTLS
WHERE FOD_PRDCT_TYP  = :st_cntrct.c_prd_typ
  AND FOD_EXPRY_DT   = :c_expiry_dt
  AND FOD_XCHNG_CD   = :st_cntrct.c_xchng_cd
  AND FOD_CLM_MTCH_ACCNT = :st_usrprfl.c_cln_mtch_accnt
  AND FOD_SPL_FLAG = 'O'
  AND FOD_UNDRLYNG        = :st_cntrct.c_undrlyng
  AND FOD_ORDR_STTS IN ('R','P','Q','O');

      if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      {
        fn_errlog( c_ServiceName, "S31360", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);  
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      l_cvr_qty = l_cvr_qty+l_rws_qty;
      /*** ver 8.1 ended ***/

    	if(DEBUG_MSG_LVL_3)
    	{
    		fn_userlog( c_ServiceName, " C_ORDR_FLW :%c:", st_xchngbk.c_ordr_flw );
    		fn_userlog( c_ServiceName, " L_OPNPSTN_QTY :%ld:", l_opnpstn_qty );
        fn_userlog( c_ServiceName, " RWS_QTY :%ld: CVR_QTY :%ld:",l_rws_qty,l_cvr_qty);  /*** ver 8.1 ***/
    	}
	
		if(st_xchngbk.c_ordr_flw == 'B' && l_opnpstn_qty > 0)
 		{
     	fn_errlog( c_ServiceName, "S31365", "Improper square off - Buy Combination, Please contact Customer Service", c_err_msg  );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/ 
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 		}

 		if(st_xchngbk.c_ordr_flw == 'S' && l_opnpstn_qty < 0)
 		{
     	fn_errlog( c_ServiceName, "S31370", "Improper square off - Sell Combination, Please contact Customer Service", c_err_msg  );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/ 
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 		}

		/***  Ver 3.0 Squre Off Qty Check Start ***/

    if ( st_xchngbk.l_ord_tot_qty <= 0 )
    {
      fn_userlog(c_ServiceName,"Total Order Qty Is :%ld:",st_xchngbk.l_ord_tot_qty);
      fn_errlog( c_ServiceName, "S31375", "Square Off Qty Can Not Be Zero/Negative. ", c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,"Square Off Qty Can Not Be Zero/Negative. Please Enter Valid Value." ,
 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if ( st_xchngbk.c_ordr_flw == 'B' )
    {
      l_opn_qty = l_opnpstn_qty * (-1);
    }
    else
    {
      l_opn_qty = l_opnpstn_qty ;
    }

    if(l_opn_qty < (st_xchngbk.l_ord_tot_qty  + l_cvr_qty) )
    {
      fn_userlog(c_ServiceName,"Inside Squre Off Qty Check");
      fn_userlog(c_ServiceName,"Open Position Qty Is :%ld:",l_opn_qty);
      fn_userlog(c_ServiceName,"Total Order Qty Is :%ld:",st_xchngbk.l_ord_tot_qty);
      fn_userlog(c_ServiceName,"Cover Qty Is :%ld:",l_cvr_qty);
      fn_errlog( c_ServiceName, "S31380", "Square Off Qty Can Not Be Greater Than Available Qty", c_err_msg );
      
 /*Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,"Square Off Qty Can Not Be Greater Than Available Qty" , 0 ); Commented in Ver 5.7*/


      /*** Ver 5.7 Starts ***/
      if ( strcmp(st_ordbk.c_channel,"SYS") == 0 )
      {
        sprintf(c_err_msg,"Square Off Qty Can Not Be Greater Than Available Qty for :%s: ",st_usrprfl.c_cln_mtch_accnt);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg , 0 );
      }
      else
      {
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,"Square Off Qty Can Not Be Greater Than Available Qty" , 0 );
      }
      /*** Ver 5.7 Ends ***/ 

      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    /***  Ver 3.0 Ends  ***/

		/** Ver 2.2 Starts **/
		}
		/*** else if(st_cntrct.c_prd_typ == 'U') Commented In Ver 4.1 ***/

 		/***** Ver 7.4 Comment Starts  code moved to up ****
    else if(st_cntrct.c_prd_typ == 'U' || st_cntrct.c_prd_typ == 'I') *** Ver 4.1 ***
		{
			MEMSET(c_sys_msg);
      i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0);
      i_ferr [0] = Ferror32;

      if ( i_err[0] == -1 )
      {
        if ( Ferror32 != FNOTPRES )
        {
          fn_errlog( c_ServiceName, "S31385", FMLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   *** Ver 3.0 ***
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   *** Ver 5.8 ***
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); *** Ver 5.8 ***
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        else if( Ferror32 == FNOTPRES )
        {
  				if(DEBUG_MSG_LVL_3) ** Ver 7.3 **
  				{
          	fn_userlog(c_ServiceName," 666");
					}

					if ( st_cntrct.c_prd_typ == 'U' )  *** Ver 4.1 -- if condition added ***
          {
            strcpy(c_sys_msg,"COVER_SLTP");
          }
          else if (st_cntrct.c_prd_typ == 'I') *** Ver 4.1 ***
          {
            strcpy(c_sys_msg,"COVER_OPTPLUS");
          }
        }
      }
			else 
      {
				if ( i_excp_flag == 1)	*** EXCPT_EOS added in Ver 5.3 ***
				{
					strcpy(c_sys_msg,"EXCPT_EOS");
				}
        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName," 777");
          fn_userlog(c_ServiceName,"c_sys_msg =:%s:",c_sys_msg); 
        }
      }

      if(DEBUG_MSG_LVL_3)
      {
      fn_userlog(c_ServiceName,"In fn_chk_spncntrct_sltpfp_sqoff");
      }

      rtrim(st_cntrct.c_expry_dt);

      *** i_returncode = fn_chk_spncntrct_sltpfp_sqoff(c_ServiceName,&st_cntrct,&c_fum_mrkt_typ,&c_fcm_mrkt_typ,&st_errmsg);
			Commented in Ver 4.1 ***

		}
		 *** Commented Ver 7.4 Ends **/
		/** Ver 2.2 Ends **/

	}	
	else
	{ 
		if(DEBUG_MSG_LVL_3)
    {
        fn_userlog(c_ServiceName,"INSIDE NORMAL for :%s: and :%s:",st_usrprfl.c_cln_mtch_accnt,st_cntrct.c_undrlyng);
    }
	
		/**** Ver 1.8 Starts*******/
	
	/***    if (  st_xchngbk.c_spl_flg == ROLLOVER )  *** Commented in Ver 8.1 ***/
      if (  st_xchngbk.c_spl_flg == ROLLOVER || st_xchngbk.c_spl_flg == ROLLOVER_WITH_SPREAD )  /***Added in Ver 8.1 ***/
      {
        fn_userlog( c_ServiceName,"Contract Check skipped");
      }
      else
      {
				 /**** Ver 7.6 Starts *****/
				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"c_sltp_trail_flag ***********:%c:",c_sltp_trail_flag);
				}
			if ( c_sltp_trail_flag == 'Y' )
			{ if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"Check Contarct status ****");
				}
          c_trail_usr_flg='P';
				i_returncode=fn_chk_trail_spncntrct (  c_ServiceName,
																							 &st_cntrct,
																							 c_trail_usr_flg,	
																							 &c_fum_mrkt_typ,    
																							 &c_fcm_mrkt_typ,   
																							 &st_errmsg
 																						);
			}/****** Ver 7.6 Ends ***********/
			else
			{
				/*** Ver 1.8 Ends ***/
 				i_returncode = fn_chk_spncntrct	( c_ServiceName,
                                  		 		&st_cntrct,
                                   				&c_fum_mrkt_typ,    
                                   				&c_fcm_mrkt_typ,   
																					&st_errmsg
 																				);
			}
		}/* Ver 1.8 */
  }

	/*** if ( i_returncode == -1 ) Commented In Ver 3.6 ***/
  if ( i_returncode != 0 )   /*** Ver 3.6 ***/
  {
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0 );
		 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
     Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
     Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/*** Commented in Ver 8.4 ***

	i_returncode  = fn_get_qt ( c_ServiceName,
                                  &st_cntrct ,
                                  &st_cntrctqt ,
                                  c_err_msg
                                );

	*** Commented in Ver 8.4 ***/

	/*** Ver 8.1 Starts ***/
  if ( st_xchngbk.c_spl_flg != ROLLOVER_WITH_SPREAD )
  {
  /*** Ver 8.1 Ends ***/

	/*** Ver 8.4 Starts here ***/

  i_returncode = fn_get_quote(c_ServiceName,
                              &st_cntrct,
                              &st_cntrctqt,
                              &c_setlmnt_flg,
                              &c_dlvry_pos_allwd,
															&c_buy_allwd,   /*** ver 10.6 ***/
                              &c_sell_allwd,  /*** ver 10.6 ***/
                              &c_mrkt_ordr_flg,  /*** ver 10.9 ***/
                              c_err_msg);

  /*** Ver 8.4 Ends here ***/

	/*** Ver 8.1 Starts ***/
  }
  else
  {
  i_returncode = fn_get_quote_rws(c_ServiceName,
                                  &st_cntrct,
                                  &st_cntrctqt,
                                  &c_setlmnt_flg,
                                  &c_dlvry_pos_allwd,
                                  c_spd_expry_dt1,
                                  c_spd_expry_dt2,
                                  c_err_msg);
  }
  /*** Ver 8.1 Ends ***/

  if ( i_returncode != SUCC_BFR )
  {
    fn_errlog( c_ServiceName, "S31390", LIBMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

      /**** ver 10.9 starts **********/

    if(DEBUG_MSG_LVL_3)
    {
     fn_userlog( c_ServiceName, "c_mrkt_ordr_flg :%c:, c_user_id :%s:, c_spl_flg :%c:, c_ord_typ :%c:, c_slm_flg :%c:",c_mrkt_ordr_flg,st_usrprfl.c_user_id, st_xchngbk.c_spl_flg, st_xchngbk.c_ord_typ, st_xchngbk.c_slm_flg);
    }

    if(st_cntrct.c_prd_typ == 'O')
    {
    if(st_xchngbk.c_slm_flg == 'M' )
    {
    if( ( c_mrkt_ordr_flg == 'N' && ( strcmp(st_usrprfl.c_user_id,"system") != 0 )) || ( c_mrkt_ordr_flg == 'N' && (st_xchngbk.c_spl_flg == CLIENT_SQROFF && ( st_xchngbk.c_ord_typ == IMMEDIATE_OR_CANCEL ))))
    {
        if( st_xchngbk.c_spl_flg == CLIENT_SQROFF)
        {
        fn_errlog( c_ServiceName, "B20091", "", c_err_msg  );
        }
        else
        {
        fn_errlog( c_ServiceName, "B20090", "", c_err_msg  );
        }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    }
    }
    /**** ver 10.9 ******/
  
	/*** Ver 8.4 Starts here ***/
  
fn_userlog( c_ServiceName,"Suchita PRD TYP st_cntrct.c_prd_typ :%c:",st_cntrct.c_prd_typ);

	if ( st_cntrct.c_prd_typ != 'P' && st_cntrct.c_prd_typ != 'U' && st_cntrct.c_prd_typ != 'I' )
	{

   fn_userlog( c_ServiceName,"Suchita  INSIDE IF c_dlvry_pos_allwd :%c:",c_dlvry_pos_allwd);
   /*if (c_dlvry_pos_allwd == 'N') commented in ver 10.6 */
		if ( (c_dlvry_pos_allwd == 'N' && st_cntrct.c_prd_typ == 'F') || ( st_cntrct.c_prd_typ == 'O' && st_xchngbk.c_ordr_flw == 'B' &&c_buy_allwd == 'N') || ( st_cntrct.c_prd_typ == 'O' && st_xchngbk.c_ordr_flw == 'S' && c_sell_allwd == 'N') )  /*** IF condition modified in Ver 10.6 ***/
   {
    fn_userlog( c_ServiceName,"Suchita 2");
    if( Fget32(ptr_fml_Ibuf,FFO_BK_UBK_FLG,0,(char *)&c_dlvry_eos_flg,0) == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
        fn_errlog( c_ServiceName, "S31395", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amount, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
        c_dlvry_eos_flg='N';
      }
    }
    fn_userlog( c_ServiceName,"Suchita 3 c_dlvry_eos_flg :%c:",c_dlvry_eos_flg);

    fn_userlog( c_ServiceName,"Suchita 3.1 st_usrprfl.c_cln_mtch_accnt :%s: :%s: :%s: :%c: :%s: :%ld: :%c: :%c:",st_usrprfl.c_cln_mtch_accnt,st_cntrct.c_undrlyng,c_expiry_dt,st_cntrct.c_prd_typ,st_cntrct.c_xchng_cd,st_cntrct.l_strike_prc,st_cntrct.c_exrc_typ,st_cntrct.c_opt_typ);

		/*** Ver 8.9 Starts ***/
		EXEC SQL
      SELECT  NVL(FCP_OPNPSTN_QTY,0),
              DECODE(FCP_OPNPSTN_FLW,'S',GREATEST(ABS(FCP_IBUY_QTY),ABS(FCP_EXBUY_QTY)),'B',
                     GREATEST( ABS(FCP_ISELL_QTY), ABS(FCP_EXSELL_QTY)),0)
        INTO  :l_opnpstn_qty,
              :l_cvr_qty
        FROM  FCP_FO_SPN_CNTRCT_PSTN
        WHERE FCP_CLM_MTCH_ACCNT  = :st_usrprfl.c_cln_mtch_accnt
        AND   FCP_UNDRLYNG        = :st_cntrct.c_undrlyng
        AND   FCP_EXPRY_DT        = :c_expiry_dt
        AND   FCP_PRDCT_TYP       = :st_cntrct.c_prd_typ
        AND   FCP_XCHNG_CD        = :st_cntrct.c_xchng_cd
        AND   FCP_STRK_PRC        = :st_cntrct.l_strike_prc
        AND   FCP_EXER_TYP        = :st_cntrct.c_exrc_typ
        AND   FCP_OPT_TYP         = :st_cntrct.c_opt_typ;

      if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      {
        fn_errlog( c_ServiceName, "S31400", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

			if(SQLCODE == NO_DATA_FOUND)
    	{
        fn_userlog( c_ServiceName,"Suchita 4 INSIDE  NDF st_xchngbk.c_ordr_flw :%c:",st_xchngbk.c_ordr_flw); 
      	l_opnpstn_qty = 0;
      	l_cvr_qty = 0;
    	}

        /*** ver 8.1 starts RWS ORDER IS PLACED AND CUST IS TRYING CLIENT SQOFF ***/
      l_rws_qty = 0;

EXEC SQL
SELECT NVL(SUM(NVL(FOD_ORDR_TOT_QTY,0)-NVL(FOD_EXEC_QTY,0)-NVL(FOD_CNCL_QTY,0)-NVL(FOD_EXPRD_QTY,0)),0)
INTO :l_rws_qty
FROM FOD_FO_ORDR_DTLS
WHERE FOD_PRDCT_TYP  = :st_cntrct.c_prd_typ
  AND FOD_EXPRY_DT   = :c_expiry_dt
  AND FOD_XCHNG_CD   = :st_cntrct.c_xchng_cd
  AND FOD_CLM_MTCH_ACCNT = :st_usrprfl.c_cln_mtch_accnt
  AND FOD_SPL_FLAG = 'O'
  AND FOD_UNDRLYNG        = :st_cntrct.c_undrlyng
  AND FOD_ORDR_STTS IN ('R','P','Q','O');

      if(SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
      {
        fn_errlog( c_ServiceName, "S31405", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      l_cvr_qty = l_cvr_qty+l_rws_qty;
      /*** ver 8.1 ended ***/

		if(st_xchngbk.c_ordr_flw == 'B' && l_opnpstn_qty > 0)
    {
       fn_userlog( c_ServiceName,"Suchita 5");
	
			/*** ver 10.6 Start ***/
       fn_userlog(c_ServiceName," You can only Square off your existing position & No new position is allowed in this contract.");
       strcpy(c_err_msg,"You can only Square off your existing position & No new position is allowed in this contract.");
      /*** ver 10.6 End ***/
	
			/*** COMMENTED IN VER 10.6			fn_userlog( c_ServiceName,"Improper square off - Buy Combination/No New Positions are not allowed in this contract, Please contact Customer Service");
      strcpy( c_err_msg,"Improper square off - Buy Combination/No New Positions are not allowed in this contract, Please contact Customer Service"); ***/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amount, 0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if(st_xchngbk.c_ordr_flw == 'S' && l_opnpstn_qty < 0)
    {
      fn_userlog( c_ServiceName,"Suchita 5");
		
			/*** ver 10.6 Start ***/
      fn_userlog(c_ServiceName," You can only Square off your existing position & No new position is allowed in this contract.");
      strcpy(c_err_msg,"You can only Square off your existing position & No new position is allowed in this contract.");
      /*** ver 10.6 End ***/

			/*** COMMENTED IN VER 10.6 fn_userlog( c_ServiceName,"Improper square off - Sell Combination/No New Positions are not allowed in this contract, Please contact Customer Service");
      strcpy( c_err_msg,"Improper square off - Sell Combination/No New Positions are not allowed in this contract, Please contact Customer Service");	 ***/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amount, 0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

    fn_userlog( c_ServiceName,"Suchita st_xchngbk.c_ordr_flw is :%c:",st_xchngbk.c_ordr_flw);
    fn_userlog( c_ServiceName,"Suchita l_opn_qty is :%ld:",l_opn_qty);
    fn_userlog( c_ServiceName,"Suchita l_opnpstn_qty is :%ld:",l_opnpstn_qty);
    fn_userlog( c_ServiceName,"Suchita l_cvr_qty is :%ld:",l_cvr_qty);


		if ( st_xchngbk.c_ordr_flw == 'B' )
    {
      l_opn_qty = l_opnpstn_qty * (-1);
    }
    else
    {
      l_opn_qty = l_opnpstn_qty ;
    }

    if(l_opn_qty >= (st_xchngbk.l_ord_tot_qty + l_cvr_qty) )
    {
			i_phy_sqroff_check = 1;
		}
    fn_userlog( c_ServiceName,"Suchita i_phy_sqroff_check is :%d:",i_phy_sqroff_check);
		/*** Ver 8.9 Ends ***/

/***    if (c_dlvry_eos_flg!='E')		**** Commented in Ver 8.9 ***/
		if ((c_dlvry_eos_flg!='E' && i_phy_sqroff_check!=1 ) && (st_xchngbk.c_spl_flg != PHYSICAL_DLVRY_SQOFF ) )		/*** Modified in Ver 8.9 ***/ /**added in ver 9.0 **/
    {
			/*** ver 10.6 ***/
      if( st_cntrct.c_prd_typ == 'F' )
      {
        strcpy( c_err_msg,"Currently Trading is not allowed in this contract");
      }
      else
      {
      if( c_buy_allwd == 'N' && st_xchngbk.c_ordr_flw == 'B' )
      {
        fn_userlog( c_ServiceName," Currently fresh Buy order is not allowed in this contract. However, you will be able to square off youropen position in any contract."); 
        strcpy(c_err_msg," Currently fresh Buy order is not allowed in this contract. However, you will be able to square off your open position in any contract."); 
      }
      else if( c_sell_allwd == 'N' && st_xchngbk.c_ordr_flw == 'S' )
      {
        fn_userlog( c_ServiceName," Currently fresh Sell order is not allowed in this contract. However, you will be able to square off your open position in any contract.");
        strcpy(c_err_msg," Currently fresh Sell order is not allowed in this contract. However, you will be able to square off your open position in any contract.");
      }
      }
      /*** ver 10.6 End ***/

     /*** COMMENTED IN VER 10.6  fn_userlog( c_ServiceName,"Currently Trading is not allowed in this contract");
      strcpy( c_err_msg,"Currently Trading is not allowed in this contract");	***/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amount, 0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
   }
	}

  /*** Ver 8.4 Ends here ***/

	if ( st_xchngbk.c_slm_flg == MARKET )
	{
		if(st_cntrct.c_prd_typ == 'F' || st_cntrct.c_prd_typ == 'U' ) /** Ver 2.2 Added SLTPFP check **/
		{
			st_xchngbk.l_quote = st_cntrctqt.l_lst_trdd_prc;

		/*** Ver 8.9 Starts ***/
    if ( st_xchngbk.l_quote == 0 && (i_phy_sqroff_check == 1 || st_xchngbk.c_spl_flg == PHYSICAL_DLVRY_SQOFF)) /*** spl flg added in ver 9.0 */
    {
      i_returncode = fn_get_quote_zero(c_ServiceName,st_xchngbk.c_ordr_flw,l_best_bid_price,l_best_offer_price,l_previous_close_price,&l_quote_zero);

      if( i_returncode != 1 )
      {
				fn_userlog( c_ServiceName,"function fn_get_quote_zero failure");
      	strcpy( c_err_msg,"System Error.Contact Customer Support");
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      	Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amount, 0);
      	Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

      st_xchngbk.l_quote = l_quote_zero;
			if(DEBUG_MSG_LVL_5)
      {
        fn_userlog( c_ServiceName,"After fn_get_quote_zero st_xchngbk.l_quote is :%ld:",st_xchngbk.l_quote);
      }
    }
    /*** Ver 8.9 Ends ***/

			strcpy ( st_xchngbk.c_qt_tm,(char *)st_cntrctqt.c_lst_trdd_time );
 			st_ordbk.l_ord_lmt_rt = st_xchngbk.l_quote;
		}
		else
		{
			if ( st_xchngbk.c_ordr_flw == SELL )
			{
				  /****** Ver 4.0 Start ******/
      /* 7.9 */
          EXEC SQL
          SELECT NVL(FTQ_BST1_BID_QTY,0),
                 NVL(FTQ_BST2_BID_QTY,0),
                 NVL(FTQ_BST3_BID_QTY,0),
                 NVL(FTQ_BST4_BID_QTY,0),
                 NVL(FTQ_BST5_BID_QTY,0)
          INTO   :st_cntrctlongqt.l_bst_bid_qty[0],
                 :st_cntrctlongqt.l_bst_bid_qty[1],
                 :st_cntrctlongqt.l_bst_bid_qty[2],
                 :st_cntrctlongqt.l_bst_bid_qty[3],
                 :st_cntrctlongqt.l_bst_bid_qty[4]
           FROM   FTQ_FO_TRD_QT
           WHERE  FTQ_XCHNG_CD  = :st_cntrct.c_xchng_cd
           AND   FTQ_PRDCT_TYP = DECODE(:st_cntrct.c_prd_typ,'I','O',:st_cntrct.c_prd_typ) /*** Decode added in Ver 4.1 ***/
           AND   FTQ_UNDRLYNG  = :st_cntrct.c_undrlyng
           AND   FTQ_EXPRY_DT  = TO_DATE ( :c_expiry_dt,'dd-Mon-yyyy' )
           AND   FTQ_EXER_TYP  = :st_cntrct.c_exrc_typ
           AND   FTQ_OPT_TYP   = :st_cntrct.c_opt_typ
           AND   FTQ_STRK_PRC  = :st_cntrct.l_strike_prc;


          if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
          {
            fn_errlog( c_ServiceName, "S31410", SQLMSG, c_err_msg  );
						fn_userlog(c_ServiceName,"Skipping error, OptionPlus order");    /*** Ver 4.6 ***/

						/*** Commented in Ver 4.8 **
 						if ( ( ( strcmp( st_ordbk.c_channel,"SYS") == 0 ) && (st_cntrct.c_prd_typ != 'I') )
										||  ( strcmp( st_ordbk.c_channel,"SYS" ) != 0 
											&& st_xchngbk.c_spl_flg == CLIENT_SQROFF && st_cntrct.c_prd_typ != 'I' ) )  ***/ 

						if ( ( ( strcmp( st_ordbk.c_channel,"SYS") == 0 ) && (st_cntrct.c_prd_typ != 'I') )
										||  ( (strcmp( st_ordbk.c_channel,"SYS" ) != 0 || st_xchngbk.c_spl_flg == CLIENT_SQROFF) 
													 && st_cntrct.c_prd_typ != 'I' ) ) /*** Ver 4.8 ***/

						/*** If Condition Added in Ver 4.6 ** Skipp SYSTEM_SQUAREOFF and CLIENT_SQROFF For OptionPlus ***/
						{
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
										Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
							      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
                    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
              			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
          }
					else if (SQLCODE == NO_DATA_FOUND)
          {
            fn_errlog ( c_ServiceName, "B28510", DEFMSG, c_err_msg );
						fn_userlog(c_ServiceName,"Skipping error, OptionPlus order");     /*** Ver 4.6 ***/

						/*** Commented in Ver 4.8 **
 						if ( ( ( strcmp( st_ordbk.c_channel,"SYS") == 0 ) && (st_cntrct.c_prd_typ != 'I') ) 
										||  ( strcmp( st_ordbk.c_channel,"SYS" ) != 0 
											&& st_xchngbk.c_spl_flg == CLIENT_SQROFF && st_cntrct.c_prd_typ != 'I' ) )  ***/ 

						if ( ( ( strcmp( st_ordbk.c_channel,"SYS") == 0 ) && (st_cntrct.c_prd_typ != 'I') )
									 ||  ( (strcmp( st_ordbk.c_channel,"SYS" ) != 0 || st_xchngbk.c_spl_flg == CLIENT_SQROFF) 
									 && st_cntrct.c_prd_typ != 'I' ) ) /*** Ver 4.8 ***/
						/*** If Condition Added in Ver 4.6 ** Skipp SYSTEM_SQUAREOFF and CLIENT_SQROFF For OptionPlus ***/
						{
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
										Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
	                  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
                    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
  									tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
						}
          }

		    /*** Ver 4.8 ** Starts ***/
				if(DEBUG_MSG_LVL_4)
    		{
        	fn_userlog(c_ServiceName,"Best 5 Bids qty are - :%ld: :%ld: :%ld: :%ld: :%ld:",st_cntrctlongqt.l_bst_bid_qty[0],st_cntrctlongqt.l_bst_bid_qty[1],st_cntrctlongqt.l_bst_bid_qty[2],st_cntrctlongqt.l_bst_bid_qty[3],st_cntrctlongqt.l_bst_bid_qty[4]);
    		}
				/*** Ver 4.8 ** Ends ***/
					
        /*** Ver 12.9  Starts ***/
        if(DEBUG_MSG_LVL_3)
        {
           fn_userlog(c_ServiceName,"In sell Underlying is :%s:",st_cntrct.c_undrlyng);
        }

        if ( ( ( strcmp( st_cntrct.c_undrlyng ,"NIFTY") == 0 ) || ( strcmp(st_cntrct.c_undrlyng,"CNXBAN") == 0) ) && st_cntrct.c_prd_typ == 'O' )
        {
            i_skip_flag=fn_itmotm_strk_exsts(c_ServiceName,c_expiry_dt.arr,&st_cntrct,c_err_msg);

            if(DEBUG_MSG_LVL_3)
            {
              fn_userlog(c_ServiceName,"In sell skip flag is:%d:",i_skip_flag);
            }
        }
        /*** Ver 12.9 Ends ***/

        li_max_sell_ordqty = (st_cntrctlongqt.l_bst_bid_qty[0] + st_cntrctlongqt.l_bst_bid_qty[1] + st_cntrctlongqt.l_bst_bid_qty[2] + st_cntrctlongqt.l_bst_bid_qty[3] + st_cntrctlongqt.l_bst_bid_qty[4]) ;
        if(DEBUG_MSG_LVL_0)
				{
          fn_userlog(c_ServiceName,"st_xchngbk.l_ord_tot_qty is :%ld:",st_xchngbk.l_ord_tot_qty);
          fn_userlog(c_ServiceName,"Total best 5 bid qty is :%ld:",li_max_sell_ordqty);
          fn_userlog(c_ServiceName,"Suchita i_phy_sqroff_check is :%d:",i_phy_sqroff_check); /*** suchita ***/
				}

/***				if (st_xchngbk.l_ord_tot_qty>li_max_sell_ordqty)	*** Commented in Ver 8.9 ***/
            /*** Ver 12.9 skip flag and channel added ***/ 
            if ((st_xchngbk.l_ord_tot_qty>li_max_sell_ordqty) && ( i_phy_sqroff_check !=1 && st_xchngbk.c_spl_flg != PHYSICAL_DLVRY_SQOFF && i_skip_flag != 1 && ( strcmp( st_ordbk.c_channel,"SYS" ) != 0) && (st_xchngbk.c_spl_flg != SYSTEM_SQUAREOFF ) && (st_xchngbk.c_spl_flg != IMTM_SYS_SQUAREOFF) && (st_xchngbk.c_spl_flg != LMTNEG_SYS_SQUAREOFF )))  /*** Modified in Ver 8.9 ***/  /** added in ver 9.0 **/
            {
										fn_errlog( c_ServiceName, "B91116", DEFMSG, c_err_msg  );
										fn_userlog(c_ServiceName,"Skipping error, OptionPlus order");   /*** Ver 4.6 ***/

										/*** Commented in Ver 4.8 **
										if ( ( ( strcmp( st_ordbk.c_channel,"SYS") == 0 ) && (st_cntrct.c_prd_typ != 'I') ) 
														||  ( strcmp( st_ordbk.c_channel,"SYS" ) != 0 
															&& st_xchngbk.c_spl_flg == CLIENT_SQROFF && st_cntrct.c_prd_typ != 'I' ) )  ***/ 

										if ( ( ( strcmp( st_ordbk.c_channel,"SYS") == 0 ) && (st_cntrct.c_prd_typ != 'I') )
														||  ( (strcmp( st_ordbk.c_channel,"SYS" ) != 0 || st_xchngbk.c_spl_flg == CLIENT_SQROFF) 
																	 && st_cntrct.c_prd_typ != 'I' ) ) /*** Ver 4.8 ***/
										/*** If Condition Added in Ver 4.6 ** Skipp SYSTEM_SQUAREOFF and CLIENT_SQROFF For OptionPlus ***/
										{
											Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
											Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
										  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
                      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
                    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
										}
					}

				/****** Ver 4.0 End ******/

				st_xchngbk.l_quote = st_cntrctqt.l_lst_trdd_prc;
				/*** Ver 8.9 Starts ***/
    		if ( st_xchngbk.l_quote == 0 && (i_phy_sqroff_check == 1 || st_xchngbk.c_spl_flg == PHYSICAL_DLVRY_SQOFF)) /* spl flg added in 9.0 */
    		{
      		i_returncode = fn_get_quote_zero(c_ServiceName,st_xchngbk.c_ordr_flw,l_best_bid_price,l_best_offer_price,l_previous_close_price,&l_quote_zero);

      		if( i_returncode != 1 )
      		{
        		fn_userlog( c_ServiceName,"function fn_get_quote_zero failure");
        		strcpy( c_err_msg,"System Error.Contact Customer Support");
        		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        		Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amount, 0);
        		Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      		}

      		st_xchngbk.l_quote = l_quote_zero;
				if(DEBUG_MSG_LVL_5)
      	{
        	fn_userlog( c_ServiceName,"After fn_get_quote_zero st_xchngbk.l_quote is :%ld:",st_xchngbk.l_quote);
      	}
    		}
    		/*** Ver 8.9 Ends ***/
    		strcpy ( st_xchngbk.c_qt_tm, (char *)st_cntrctqt.c_lst_trdd_time );
    		st_ordbk.l_ord_lmt_rt = st_xchngbk.l_quote;
			}
			else
			{
   /* 7.9 */
				EXEC SQL
      		SELECT 	NVL(FTQ_BST1_OFFR_QTY,0),
          		   	NVL(FTQ_BST2_OFFR_QTY,0),
             			NVL(FTQ_BST3_OFFR_QTY,0),
             			NVL(FTQ_BST4_OFFR_QTY,0),
             			NVL(FTQ_BST5_OFFR_QTY,0),
             			NVL(FTQ_BST1_OFFR_PRC,0),
             			NVL(FTQ_BST2_OFFR_PRC,0),
             			NVL(FTQ_BST3_OFFR_PRC,0),
             			NVL(FTQ_BST4_OFFR_PRC,0),
             			NVL(FTQ_BST5_OFFR_PRC,0)
      		INTO   	:st_cntrctlongqt.l_bst_offr_qty[0],
             			:st_cntrctlongqt.l_bst_offr_qty[1],
             			:st_cntrctlongqt.l_bst_offr_qty[2],
             			:st_cntrctlongqt.l_bst_offr_qty[3],
             			:st_cntrctlongqt.l_bst_offr_qty[4],
             			:st_cntrctlongqt.l_bst_offr_prc[0],
             			:st_cntrctlongqt.l_bst_offr_prc[1],
             			:st_cntrctlongqt.l_bst_offr_prc[2],
             			:st_cntrctlongqt.l_bst_offr_prc[3],
             			:st_cntrctlongqt.l_bst_offr_prc[4]
      		FROM   	FTQ_FO_TRD_QT
      		WHERE  	FTQ_XCHNG_CD  = :st_cntrct.c_xchng_cd
       		/*** AND   	FTQ_PRDCT_TYP = :st_cntrct.c_prd_typ Commented In Ver 4.1 ***/
       		AND   	FTQ_PRDCT_TYP = DECODE(:st_cntrct.c_prd_typ ,'I','O',:st_cntrct.c_prd_typ) /*** Ver 4.1 ***/
       		AND   	FTQ_UNDRLYNG  = :st_cntrct.c_undrlyng
       		AND   	FTQ_EXPRY_DT  = TO_DATE ( :c_expiry_dt,'dd-Mon-yyyy' )
       		AND   	FTQ_EXER_TYP  = :st_cntrct.c_exrc_typ
       		AND   	FTQ_OPT_TYP   = :st_cntrct.c_opt_typ
       		AND   	FTQ_STRK_PRC  = :st_cntrct.l_strike_prc;
		
					if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    			{
      			fn_errlog( c_ServiceName, "S31415", SQLMSG, c_err_msg  );
						fn_userlog(c_ServiceName,"Skipping error, OptionPlus order");   /*** Ver 4.6 ***/

						/*** Commented in Ver 4.8 **
 						if ( ( ( strcmp( st_ordbk.c_channel,"SYS") == 0 ) && (st_cntrct.c_prd_typ != 'I') )
										||  ( strcmp( st_ordbk.c_channel,"SYS" ) != 0 
											&& st_xchngbk.c_spl_flg == CLIENT_SQROFF && st_cntrct.c_prd_typ != 'I' ) ) ***/

						if ( ( ( strcmp( st_ordbk.c_channel,"SYS") == 0 ) && (st_cntrct.c_prd_typ != 'I') )
									 ||  ( (strcmp( st_ordbk.c_channel,"SYS" ) != 0 || st_xchngbk.c_spl_flg == CLIENT_SQROFF) 
									 && st_cntrct.c_prd_typ != 'I' ) ) /*** Ver 4.8 ***/
						/*** If Condition Added in Ver 4.6 ** Skipp SYSTEM_SQUAREOFF and CLIENT_SQROFF For OptionPlus ***/
						{
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
										Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
	                  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
                    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
  									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
    			}
    			else if (SQLCODE == NO_DATA_FOUND)
    			{
      			fn_errlog ( c_ServiceName, "B28510", DEFMSG, c_err_msg );
						fn_userlog(c_ServiceName,"Skipping error, OptionPlus order");   /*** Ver 4.6 ***/
				
						/*** Commented in Ver 4.8 **
 						if ( ( ( strcmp( st_ordbk.c_channel,"SYS") == 0 ) && (st_cntrct.c_prd_typ != 'I')  )
										||  ( strcmp( st_ordbk.c_channel,"SYS" ) != 0 
											&& st_xchngbk.c_spl_flg == CLIENT_SQROFF && st_cntrct.c_prd_typ != 'I' ) )  ***/ 

						if ( ( ( strcmp( st_ordbk.c_channel,"SYS") == 0 ) && (st_cntrct.c_prd_typ != 'I') )
									 ||  ( (strcmp( st_ordbk.c_channel,"SYS" ) != 0 || st_xchngbk.c_spl_flg == CLIENT_SQROFF) 
									 && st_cntrct.c_prd_typ != 'I' ) ) /*** Ver 4.8 ***/
						/*** If Condition Added in Ver 4.6 ** Skipp SYSTEM_SQUAREOFF and CLIENT_SQROFF For OptionPlus ***/
						{
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
										Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
	                  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
                    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
  									tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
						}
    			}

				/*** Ver 4.8 ** Starts ***/
        if(DEBUG_MSG_LVL_4)
        {
          fn_userlog(c_ServiceName,"Best 5 Offer qty are - :%ld: :%ld: :%ld: :%ld: :%ld:",st_cntrctlongqt.l_bst_offr_qty[0],st_cntrctlongqt.l_bst_offr_qty[1],st_cntrctlongqt.l_bst_offr_qty[2],st_cntrctlongqt.l_bst_offr_qty[3],st_cntrctlongqt.l_bst_offr_qty[4]);
					fn_userlog(c_ServiceName,"Best 5 Offer Price are - :%ld: :%ld: :%ld: :%ld: :%ld:",st_cntrctlongqt.l_bst_offr_prc[0],st_cntrctlongqt.l_bst_offr_prc[1],st_cntrctlongqt.l_bst_offr_prc[2],st_cntrctlongqt.l_bst_offr_prc[3],st_cntrctlongqt.l_bst_offr_prc[4]);
        }
        /*** Ver 4.8 ** Ends ***/
		
        /*** Ver 12.9 Starts ***/
        if(DEBUG_MSG_LVL_3)
        {
           fn_userlog(c_ServiceName,"In buy Underlying is :%s:",st_cntrct.c_undrlyng);
        }

        if ( ( ( strcmp( st_cntrct.c_undrlyng ,"NIFTY") == 0 ) || ( strcmp(st_cntrct.c_undrlyng,"CNXBAN") == 0) ) && st_cntrct.c_prd_typ == 'O' )
        {
            i_skip_flag=fn_itmotm_strk_exsts(c_ServiceName,c_expiry_dt.arr,&st_cntrct,c_err_msg);

            if(DEBUG_MSG_LVL_3)
            {
              fn_userlog(c_ServiceName,"In buy skip flag is:%d:",i_skip_flag);
            }
        }
        /*** Ver 12.9 Ends ***/
	
					li_aval_ordqty = st_xchngbk.l_ord_tot_qty;
		
				  if ( (li_aval_ordqty - st_cntrctlongqt.l_bst_offr_qty[0]) > 0)
  				{
    				d_totordrval += st_cntrctlongqt.l_bst_offr_qty[0] * st_cntrctlongqt.l_bst_offr_prc[0];
    				li_aval_ordqty -= st_cntrctlongqt.l_bst_offr_qty[0];

    				if ( (li_aval_ordqty - st_cntrctlongqt.l_bst_offr_qty[1]) > 0)
    				{
      				d_totordrval += st_cntrctlongqt.l_bst_offr_qty[1] * st_cntrctlongqt.l_bst_offr_prc[1];
      				li_aval_ordqty -= st_cntrctlongqt.l_bst_offr_qty[1];

      				if ( (li_aval_ordqty - st_cntrctlongqt.l_bst_offr_qty[2]) > 0)
      				{
        				d_totordrval += st_cntrctlongqt.l_bst_offr_qty[2] * st_cntrctlongqt.l_bst_offr_prc[2];
        				li_aval_ordqty -= st_cntrctlongqt.l_bst_offr_qty[2];

        				if ( (li_aval_ordqty - st_cntrctlongqt.l_bst_offr_qty[3]) > 0)
        				{
          				d_totordrval += st_cntrctlongqt.l_bst_offr_qty[3] * st_cntrctlongqt.l_bst_offr_prc[3];
          				li_aval_ordqty -= st_cntrctlongqt.l_bst_offr_qty[3];

          				if ( (li_aval_ordqty - st_cntrctlongqt.l_bst_offr_qty[4]) > 0)
          				{
                    if(DEBUG_MSG_LVL_3)
                    {
                      fn_userlog(c_ServiceName,"SKIP FLAG :%d:",i_skip_flag);  /*** Ver 12.9 ***/
                    }

                    /*** Ver 12.9 skip flag and channel added ***/
                    if(i_phy_sqroff_check!=1 && st_xchngbk.c_spl_flg != PHYSICAL_DLVRY_SQOFF && i_skip_flag != 1 && ( strcmp( st_ordbk.c_channel,"SYS" ) != 0) && (st_xchngbk.c_spl_flg != SYSTEM_SQUAREOFF ) && (st_xchngbk.c_spl_flg != IMTM_SYS_SQUAREOFF) && (st_xchngbk.c_spl_flg != LMTNEG_SYS_SQUAREOFF ))   /*** Ver 8.9 ***/  /** spl flg added in ver 9.0 **/ 
										{
            				fn_errlog( c_ServiceName, "B56015", DEFMSG, c_err_msg  );
										fn_userlog(c_ServiceName,"Skipping error, OptionPlus order");   /*** Ver 4.6 ***/

										/*** Commented in Ver 4.8 **
										if ( ( ( strcmp( st_ordbk.c_channel,"SYS") == 0 ) && (st_cntrct.c_prd_typ != 'I') ) 
														||  ( strcmp( st_ordbk.c_channel,"SYS" ) != 0 
															&& st_xchngbk.c_spl_flg == CLIENT_SQROFF && st_cntrct.c_prd_typ != 'I' ) )  ***/ 

										if ( ( ( strcmp( st_ordbk.c_channel,"SYS") == 0 ) && (st_cntrct.c_prd_typ != 'I') )
														 ||  ( (strcmp( st_ordbk.c_channel,"SYS" ) != 0 || st_xchngbk.c_spl_flg == CLIENT_SQROFF) 
														 && st_cntrct.c_prd_typ != 'I' ) ) /*** Ver 4.8 ***/
										/*** If Condition Added in Ver 4.6 ** Skipp SYSTEM_SQUAREOFF and CLIENT_SQROFF For OptionPlus ***/
										{
														Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
														Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
	                          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
                            Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
  													tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
										}
										}		/*** Ver 8.9 ***/
                   
                    /*** Ver 12.9 Starts ***/
                    if ( i_skip_flag == 1 || ( strcmp( st_ordbk.c_channel,"SYS" ) == 0 && (st_xchngbk.c_spl_flg == SYSTEM_SQUAREOFF )|| (st_xchngbk.c_spl_flg == IMTM_SYS_SQUAREOFF) || (st_xchngbk.c_spl_flg == LMTNEG_SYS_SQUAREOFF)))
                    {
                       if(DEBUG_MSG_LVL_3)
                       {
                         fn_userlog(c_ServiceName," qty li_aval_ordqty[4] :%ld: st_cntrctlongqt.l_bst_offr_prc[4] :%ld: d_totordrval :%lf:",li_aval_ordqty,st_cntrctlongqt.l_bst_offr_prc[4],d_totordrval);
                       }
                        d_totordrval += st_cntrctlongqt.l_bst_offr_prc[4] * li_aval_ordqty;
                     }
                     /*** Ver 12.9 Ends ***/
          				}
          				else /* for Offer qty 4 */
          				{
            				d_totordrval += li_aval_ordqty * st_cntrctlongqt.l_bst_offr_prc[4];
          				}
        				}
        				else /* for Offer qty 3 */
        				{
          				d_totordrval += li_aval_ordqty * st_cntrctlongqt.l_bst_offr_prc[3];
        				}
      				}
      				else /* for Offer qty 2 */
      				{
        				d_totordrval += li_aval_ordqty * st_cntrctlongqt.l_bst_offr_prc[2];
      				}
    				}
    				else /* for Offer qty 1 */
    				{
      				d_totordrval += li_aval_ordqty * st_cntrctlongqt.l_bst_offr_prc[1];
    				}
  				}
  				else	/* for Offer qty 0 */
  				{
    				st_xchngbk.l_quote = st_cntrctlongqt.l_bst_offr_prc[0];
    				i_condition = 0;
  				}
    
          /*** Ver 12.9 starts ***/  
          li_max_buy_ordqty = (st_cntrctlongqt.l_bst_offr_qty[0] + st_cntrctlongqt.l_bst_offr_qty[1] + st_cntrctlongqt.l_bst_offr_qty[2]+ st_cntrctlongqt.l_bst_offr_qty[3] + st_cntrctlongqt.l_bst_offr_qty[4]);   

          if(DEBUG_MSG_LVL_3)
          {
            fn_userlog( c_ServiceName, "li_max_buy_ordqty  is :%ld:",li_max_buy_ordqty );
            fn_userlog( c_ServiceName, "d_totordrval  is :%lf:",d_totordrval );
            fn_userlog( c_ServiceName, "Order Qty     :%ld:", st_xchngbk.l_ord_tot_qty );
            fn_userlog( c_ServiceName, "LTP    :%ld:", st_cntrctqt.l_lst_trdd_prc );
            fn_userlog( c_ServiceName, "st_xchngbk.l_quote :%ld:",st_xchngbk.l_quote);
          }
          /*** Ver 12.9 ends ***/

				  if ( i_condition == 1)
  				{
            if( i_skip_flag == 1 && li_max_buy_ordqty == 0 )    /*** Added in ver 12.9 ***/
            {
             st_xchngbk.l_quote = st_cntrctqt.l_lst_trdd_prc;
            }
            else
            {
             st_xchngbk.l_quote = d_totordrval / st_xchngbk.l_ord_tot_qty;
            }
  				}

          if(DEBUG_MSG_LVL_3)
          {
            fn_userlog( c_ServiceName, "st_xchngbk.l_quote :%ld:",st_xchngbk.l_quote);
          }
 
					/*** Ver 8.9 Starts ***/
        	if ( i_phy_sqroff_check == 1 || st_xchngbk.c_spl_flg == PHYSICAL_DLVRY_SQOFF ) /** spl flg added in Ver 9.0 **/
        	{
						st_xchngbk.l_quote = st_cntrctqt.l_lst_trdd_prc;
						if(st_xchngbk.l_quote == 0)
						{
          	i_returncode = fn_get_quote_zero(c_ServiceName,st_xchngbk.c_ordr_flw,l_best_bid_price,l_best_offer_price,l_previous_close_price,&l_quote_zero);

          	if( i_returncode != 1 )
          	{
            	fn_userlog( c_ServiceName,"function fn_get_quote_zero failure");
            	strcpy( c_err_msg,"System Error.Contact Customer Support");
            	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
            	Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amount, 0);
            	Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
            	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          	}

          	st_xchngbk.l_quote = l_quote_zero;
						if(DEBUG_MSG_LVL_5)
      			{
        			fn_userlog( c_ServiceName,"After fn_get_quote_zero st_xchngbk.l_quote is :%ld:",st_xchngbk.l_quote);
      			}
						}
        	}
        	/*** Ver 8.9 Ends ***/

  				strcpy ( st_xchngbk.c_qt_tm, (char *)st_cntrctqt.c_lst_trdd_time );
  				st_ordbk.l_ord_lmt_rt = st_xchngbk.l_quote;
			}
		}

	}

  fn_userlog( c_ServiceName,"calling fn_check_inp_spn.....");			/*** Ver 8.1 *** To be removed ***/
	i_returncode = fn_check_inp_spn( 	c_ServiceName,
                                 		&st_xchngbk,
                                 		&st_cntrctqt,
                                 		c_fum_mrkt_typ, 
                                 		c_fcm_mrkt_typ,
																		i_rollover_ord_ind,   /*** Ver 8.1 ***/
                                    c_spd_expry_dt1,      /*** Ver 8.1 ***/
                                    c_spd_expry_dt2,      /*** Ver 8.1 ***/
                                 		&st_errmsg );
 	if ( i_returncode == -1 )
 	{
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}

  fn_userlog( c_ServiceName,"After fn_check_inp_spn.....");			/*** Ver 8.1 *** To be removed ***/
 	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

 	if ( i_trnsctn == -1 )
 	{
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}

	/*** Ver 8.1 Starts ***/
  if ( st_xchngbk.c_spl_flg == ROLLOVER_WITH_SPREAD )
  {
  	fn_userlog( c_ServiceName,"Calling fn_getcnt_gen_rws.....");			/*** Ver 8.1 *** To be removed ***/
    i_returncode  = fn_getcnt_gen_rws ( c_ServiceName,
                                        &st_cntrct,
                                        &st_cntrct_geninf,
                                        c_spd_expry_dt1,
                                        c_spd_expry_dt2,
                                        c_err_msg
                                      );
  }
  else
  {
  /*** Ver 8.1 Ends ***/
	i_returncode	=	fn_getcnt_gen	(	c_ServiceName,
																		&st_cntrct,
																		&st_cntrct_geninf,
																		c_err_msg
																	);
	}     /*** Ver 8.1 Bracket Closed ***/

		if ( i_returncode != 0	)
    {
      fn_errlog( c_ServiceName, "S31420", LIBMSG, c_err_msg  );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }


		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN Product Type Is :%c:",st_ordbk.c_prd_typ);
			fn_userlog(c_ServiceName,"SPAN Underlying Is :%s:",st_ordbk.c_undrlyng);
		}

		i_returncode = fn_check_ord_spn( 	c_ServiceName,
                               				&st_cntrct_geninf,
                               				&st_xchngbk,
                               				&st_ordbk,
                               				&st_errmsg );
  	if ( i_returncode == -1 )
  	{
    	fn_errlog( c_ServiceName, "S31425", LIBMSG, c_err_msg  );
    	fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}


  	if ( st_xchngbk.c_slm_flg == MARKET )
  	{
    	st_xchngbk.l_ord_lmt_rt = st_xchngbk.l_quote;
  	}

    /*** Ver 2.4 Starts ***/

    c_ord_val_flg = 'N' ;
    c_cumopn_val_flg  = 'N' ;
    c_srvc_call_flg = 'P' ;   /*** set to 'P' in case of placement ***/
    d_netadj_ord_val = 0.0 ;  /*** set to zero in case of placement ***/


    if ( st_ordbk.c_prd_typ == 'O' || st_ordbk.c_prd_typ == 'I' ) /*** Option plus as added in Ver 10.0 ***/
    {
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Swati-----st_xchngbk.l_ord_lmt_rt is :%ld:",st_xchngbk.l_ord_lmt_rt);
        fn_userlog(c_ServiceName,"Swati-----l_ord_lmt_rt is :%ld:",l_ord_lmt_rt);
      }

      l_ord_lmt_rt = l_ord_lmt_rt + st_xchngbk.l_ord_lmt_rt;

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Swati--New -----l_ord_lmt_rt is :%ld:",l_ord_lmt_rt);
      }
    }


		if(DEBUG_MSG_LVL_3)     /** Ver 7.5 **/
    {
      fn_userlog( c_ServiceName, "Before fn_chk_spnord_max_limit, st_ordbk.c_channel :%s:",st_ordbk.c_channel);
    }

		if(strcmp(st_ordbk.c_channel,"OFF") != 0)                   /** Ver 7.5 **/
  	{
    	i_returncode = fn_chk_spnord_max_limit  ( c_ServiceName,
      	                                        st_usrprfl.c_cln_mtch_accnt ,
        	                                      st_xchngbk.l_ord_tot_qty,
          	                                    l_ord_lmt_rt,
            	                                  d_netadj_ord_val,
              	                                c_srvc_call_flg ,
                	                              st_ordbk.c_slm_flg,
                  	                            st_ordbk.c_xchng_cd,
                    	                          &c_ord_val_flg,
                      	                        &c_cumopn_val_flg,
                        	                      &st_errmsg
                          	                  );
  	  if ( i_returncode == -1 )
    	{
      	fn_errlog( c_ServiceName, "S31430", LIBMSG, c_err_msg );
      	fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      	Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      	Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
		}

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "c_ord_val_flg     :%c:", c_ord_val_flg );
      fn_userlog( c_ServiceName, "c_cumopn_val_flg  :%c:", c_cumopn_val_flg);
    }

    if( (!strstr( st_xchngbk.c_xchng_rmrks,"Physical Settlement EOS")) && (st_xchngbk.c_spl_flg !=  PHYSICAL_DLVRY_SQOFF) && (st_xchngbk.c_spl_flg !=  CLIENT_SQROFF ) && (st_xchngbk.c_spl_flg != SYSTEM_SQUAREOFF ) && (st_xchngbk.c_spl_flg != IMTM_SYS_SQUAREOFF) && (st_xchngbk.c_spl_flg != LMTNEG_SYS_SQUAREOFF ) && (st_xchngbk.c_spl_flg != 'P') )  /*** Added in Ver 8.4 ***/ /*** CLIENT_SQROFF,LMTNEG_SYS_SQUAREOFF,IMTM_SYS_SQUAREOFF,SYSTEM_SQUAREOFF,PROFITORDR added in Ver 11.2 ***/
		{
    if(c_cumopn_val_flg == 'Y')
    {

      /*** Ver 11.2 starts ***//*** Ver 11.7 l_cvr_pstn_qty selection added in query ***/
      EXEC SQL
      SELECT
              NVL(FCP_OPNPSTN_FLW,'N'),
              NVL(FCP_OPNPSTN_QTY,0),
							DECODE(FCP_OPNPSTN_FLW,'S',GREATEST(ABS(FCP_IBUY_QTY),ABS(FCP_EXBUY_QTY)),'B',
                     GREATEST( ABS(FCP_ISELL_QTY), ABS(FCP_EXSELL_QTY)),0)
      INTO
        :c_cntrct_pstn_flw,
        :l_cntrct_pstn_qty,
				:l_cvr_pstn_qty
        FROM  FCP_FO_SPN_CNTRCT_PSTN
        WHERE FCP_CLM_MTCH_ACCNT  = :st_usrprfl.c_cln_mtch_accnt
        AND   FCP_XCHNG_CD        = :st_cntrct.c_xchng_cd
        AND   FCP_UNDRLYNG        = :st_cntrct.c_undrlyng
        AND   FCP_PRDCT_TYP  = :st_cntrct.c_prd_typ
        AND   TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY') = :st_cntrct.c_expry_dt
        AND   FCP_EXER_TYP = :st_cntrct.c_exrc_typ
        AND   FCP_STRK_PRC = :st_cntrct.l_strike_prc
        AND   FCP_OPT_TYP =  :st_cntrct.c_opt_typ;

      if(SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
      {
        fn_errlog( c_ServiceName, "S31435", SQLMSG, c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);  
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName,"c_cntrct_pstn_flw:%c: l_cntrct_pstn_qty:%ld:l_cvr_pstn_qty:%ld:",c_cntrct_pstn_flw,l_cntrct_pstn_qty,l_cvr_pstn_qty);
      	fn_userlog( c_ServiceName,"st_xchngbk.c_ordr_flw:%c: st_xchngbk.l_ord_tot_qty:%ld:",st_xchngbk.c_ordr_flw,st_xchngbk.l_ord_tot_qty);	
			}

			/*** 11.7 Cover quantity check added ****/
      if ( c_cntrct_pstn_flw != st_xchngbk.c_ordr_flw && c_cntrct_pstn_flw !='N' &&
           abs(l_cntrct_pstn_qty) >=  abs(st_xchngbk.l_ord_tot_qty)+abs(l_cvr_pstn_qty)  )

      {
        fn_userlog( c_ServiceName, "SKIP Order Value exceeding max Cumulative open order value.");
      }
      /*** Ver 11.2 ends ***/
      else
      {
      fn_userlog( c_ServiceName, "Order Value exceeding max Cumulative open order value.");
      fn_errlog( c_ServiceName, "B21077", "DEFMSG", c_err_msg  );
      fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
      strcat(c_err_msg,st_errmsg.c_err_msg);
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
			}
     }
		}

    if(c_ord_val_flg == 'Y')
    {
		  if ( (st_cntrct.c_prd_typ == SLTP_FUTUREPLUS) && ( (strcmp(c_sys_msg,"EOS") == 0 || strcmp(c_sys_msg,"MY_EOS") == 0 
						|| strcmp(c_sys_msg,"EXCPT_EOS") == 0 || strcmp(c_sys_msg,"SYS_EVENT") == 0) ) ) /*** if loop added in  Ver 9.6 ***/ /*** Ver 10.5 SYS_EVENT added ***/
   		{
     		fn_userlog( c_ServiceName, "SKIP check of Order value Exceeding Max Market/Limit value allowed.");
   		}
   		else
   		{
      fn_userlog( c_ServiceName, "Order value Exceeding Max Market/Limit value allowed.");
      fn_errlog( c_ServiceName, "B23035", "DEFMSG", c_err_msg  );
      fn_aborttran( c_ServiceName, i_trnsctn, st_errmsg.c_err_msg );
      strcat(c_err_msg,st_errmsg.c_err_msg);
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
    	}
		}

    /*** Ver 2.4 Ends   ***/

  	i_ip_len = sizeof ( struct st_sequence );
  	i_op_len = sizeof ( struct st_sequence );

		/**  	strcpy( st_s_sequence.c_pipe_id, st_xchngbk.c_pipe_id ); ** Commented in Ver 1.9 **/
		/*** Ver 1.9 Starts ***/
   	if(strcmp(st_ordbk.c_channel,"OFF") == 0) 
    {
			if ( strcmp( st_ordbk.c_xchng_cd , "NFO") == 0 )
      {
        strcpy( st_s_sequence.c_pipe_id,"99");
      }
      else if ( strcmp( st_ordbk.c_xchng_cd , "BFO") == 0 )
      {
        strcpy( st_s_sequence.c_pipe_id,"A9");
      }	
      strcpy( st_xchngbk.c_pipe_id ,st_s_sequence.c_pipe_id);
    }
    else
    {
      strcpy( st_s_sequence.c_pipe_id, st_xchngbk.c_pipe_id );
    }
		/*** Ver 1.9 Ends ****/

  	strcpy( st_s_sequence.c_trd_dt, st_xchngbk.c_mod_trd_dt );
  	st_s_sequence.c_rqst_typ = GET_XCHNG_SEQ;

  	fn_cpy_ddr ( st_s_sequence.c_rout_crt );


		i_returncode	=	fn_get_fno_seq	(c_ServiceName,
																		 &st_s_sequence,
																		 c_err_msg
																		);

		if ( i_returncode != 0	)
    {
      fn_errlog( c_ServiceName, "S31440", LIBMSG, c_err_msg  );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }


  	l_xchng_seq_num = st_s_sequence.l_seq_num;

  	strcpy( st_s_sequence.c_pipe_id, st_xchngbk.c_pipe_id );
  	strcpy( st_s_sequence.c_trd_dt, st_xchngbk.c_mod_trd_dt );



  	st_s_sequence.c_rqst_typ = GET_ORDER_SEQ;


		i_returncode  = fn_get_fno_seq  (	c_ServiceName,
                                     	&st_s_sequence,
                                    	c_err_msg
                                    );

		if ( i_returncode != 0	)
    {
      fn_errlog( c_ServiceName, "S31445", LIBMSG, c_err_msg  );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		
		if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  	{
    	fn_errlog( c_ServiceName, "S31450", LIBMSG, c_err_msg  );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Xchng Seq No. Is :%ld:",l_xchng_seq_num);
			fn_userlog(c_ServiceName,"Ordr Seq No. Is :%ld:",l_ord_seq_num);
		}


		l_ord_seq_num = st_s_sequence.l_seq_num;

  	if ( ( st_xchngbk.c_ord_typ == GOOD_TILL_TODAY     ) || ( st_xchngbk.c_ord_typ == IMMEDIATE_OR_CANCEL )  )
  	{
    	strcpy ( st_xchngbk.c_valid_dt, (char *)c_trd_dt.arr );
  	}
    else if( st_xchngbk.c_ord_typ == VTC_ORDER  ) /*** Ver 5.9 Starts Here ***/
    {
      if( strcmp(st_xchngbk.c_valid_dt,"") == 0 )
      { 
        fn_errlog( c_ServiceName, "S31455", LIBMSG, c_err_msg  );
        fn_userlog(c_ServiceName,"Invalid VTC order Validity Date, pls check");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0); 
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );        
      }
    }
 
			/***** Ver 7.6 Starts *******/
    st_xchngbk.c_prcimpv_flg='N';
    st_ordbk.c_prcimpv_flg='N';  
		if( c_sltp_trail_flag == 'Y' )
		{
			EXEC SQL
				SELECT  NVL(FTQ_LST_TRD_PRC,0)
				INTO    :st_xchngbk.l_lTP
				FROM    FTQ_FO_TRD_QT
				WHERE   FTQ_XCHNG_CD  = :st_cntrct.c_xchng_cd
				AND     FTQ_PRDCT_TYP = :st_cntrct.c_prd_typ
				AND     FTQ_UNDRLYNG  = :st_cntrct.c_undrlyng
				AND     FTQ_EXPRY_DT  = :st_cntrct.c_expry_dt
				AND     FTQ_EXER_TYP  = :st_cntrct.c_exrc_typ
				AND     FTQ_OPT_TYP   = :st_cntrct.c_opt_typ
				AND     FTQ_STRK_PRC  = :st_cntrct.l_strike_prc;
			
				if ( SQLCODE !=0 )
				{
					fn_errlog( c_ServiceName, "S31460", SQLMSG, c_err_msg  );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );                   
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );        
					Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);     
					Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);   
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

        if( st_ordbk.c_ordr_flw == 'B' )
        {
           st_xchngbk.l_trail_amt= st_xchngbk.l_stp_lss_tgr - st_xchngbk.l_lTP;
        }
        else
        { 
           st_xchngbk.l_trail_amt=  st_xchngbk.l_lTP - st_xchngbk.l_stp_lss_tgr; 
        }
 
				st_xchngbk.l_lmt_offset=abs( st_xchngbk.l_ord_lmt_rt - st_xchngbk.l_stp_lss_tgr );
				st_xchngbk.l_init_sltp_rt=st_xchngbk.l_stp_lss_tgr ;
				st_xchngbk.l_init_lmt_rt=st_xchngbk.l_ord_lmt_rt;
				st_xchngbk.c_prcimpv_flg=c_sltp_trail_flag;
				st_ordbk.c_prcimpv_flg=c_sltp_trail_flag;
				st_ordbk.l_trail_amt=st_xchngbk.l_trail_amt;
				st_ordbk.l_lmt_offset=st_xchngbk.l_lmt_offset;
			  if(DEBUG_MSG_LVL_3)
				{ 	
					fn_userlog(c_ServiceName,"st_xchngbk.l_trail_amt  :%ld:",st_xchngbk.l_trail_amt);
					fn_userlog(c_ServiceName,"st_xchngbk.l_lmt_offset ****:%ld:",st_xchngbk.l_lmt_offset);
					fn_userlog(c_ServiceName,"st_xchngbk.l_init_sltp_rt  :%ld:",st_xchngbk.l_init_sltp_rt);
					fn_userlog(c_ServiceName,"st_xchngbk.l_init_lmt_rt  :%ld:",st_xchngbk.l_init_lmt_rt);
				}
				EXEC SQL
					SELECT NVL(FUM_TRAIL_AMT,0)*100
					INTO   :d_fum_trail_amt
					FROM   FUM_FO_UNDRLYNG_MSTR
					WHERE	 FUM_XCHNG_CD  =:st_cntrct.c_xchng_cd
					AND    FUM_PRDCT_TYP =:st_cntrct.c_prd_typ
					AND    FUM_UNDRLYNG  =:st_cntrct.c_undrlyng;
				if ( SQLCODE !=0 )
				{
					fn_errlog( c_ServiceName, "S31465", SQLMSG, c_err_msg  );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );                   
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );        
					Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);     
					Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);   
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"l_fum_trail_amt  :%lf:",d_fum_trail_amt);
				}
  			if( (double)st_xchngbk.l_trail_amt < d_fum_trail_amt )
	  		{
          if( st_ordbk.c_ordr_flw == 'B' )
          {
            sprintf(c_err_msg,"The difference between SLTP and LTP should be greater than minimum difference of %lf in case of Buy order",(d_fum_trail_amt/100));
          }
          else
          {
            sprintf(c_err_msg,"The difference between LTP and SLTP should be greater than minimum difference of %lf in case of Sell order",(d_fum_trail_amt/100));

          }
			  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );                   
				  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );        
				  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);     
				  Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);   
				  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			  }
		}
			
		/****** Ver 7.6 Ends *********/


  	sprintf( c_seq_num, "%08d", l_ord_seq_num );

  	strcpy( st_xchngbk.c_ordr_rfrnc, (char *)c_date.arr );
  	strcat( st_xchngbk.c_ordr_rfrnc, st_xchngbk.c_pipe_id );
  	strcat( st_xchngbk.c_ordr_rfrnc, c_seq_num );
  	strcpy( st_ordbk.c_ordr_rfrnc, st_xchngbk.c_ordr_rfrnc);

  	st_xchngbk.l_mdfctn_cntr = 1;
  	st_ordbk.l_mdfctn_cntr = 1;

  	strcpy(st_actn.c_user_id, st_usrprfl.c_user_id);
		strcpy(st_actn.c_channel,st_ordbk.c_channel);
  	st_actn.l_session_id  = st_usrprfl.l_session_id;
  	strcpy(st_actn.c_cln_mtch_accnt,st_ordbk.c_cln_mtch_accnt);
  	st_actn.l_eba_cntrct_id = st_cntrct.l_eba_cntrct_id;
  	strcpy(st_actn.c_xchng_cd,st_cntrct.c_xchng_cd);
  	st_actn.c_prd_typ = st_cntrct.c_prd_typ;
  	strcpy(st_actn.c_undrlyng,st_cntrct.c_undrlyng);
  	strcpy(st_actn.c_expry_dt,st_cntrct.c_expry_dt);
  	st_actn.c_exrc_typ = st_cntrct.c_exrc_typ;
  	st_actn.c_opt_typ = st_cntrct.c_opt_typ;
  	st_actn.l_strike_prc = st_cntrct.l_strike_prc;
  	st_actn.c_ctgry_indstk = st_cntrct.c_ctgry_indstk;

		st_actn.l_ca_lvl = st_cntrct.l_ca_lvl;

  	if ( st_xchngbk.c_spl_flg == SYSTEM_SQUAREOFF || st_xchngbk.c_spl_flg == IMTM_SYS_SQUAREOFF  ||  st_xchngbk.c_spl_flg == LMTNEG_SYS_SQUAREOFF || st_xchngbk.c_spl_flg == PHYSICAL_DLVRY_SQOFF) /*** Check added for IMTM_SYS_SQUAREOFF and LMTNEG_SYS_SQUAREOFF in Ver 4.9 ***/  /*** Ver 9.0 ***/
  	{
    	st_actn.l_actn_typ = SYSTEM_PLACE_ORDER;
  	}
  	else if ( st_xchngbk.c_spl_flg == 'J' )
  	{
    	st_actn.l_actn_typ = JOINT_SQUARE_OFF_ORDER;
  	}
  	else
  	{
    	st_actn.l_actn_typ = ORS_NEW_ORD_REQ;
  	}

  	st_actn.c_trnsctn_flw = st_ordbk.c_ordr_flw;
  	st_actn.l_orgnl_qty = 0;
  	st_actn.l_orgnl_rt  = 0;
  	st_actn.l_new_qty = st_xchngbk.l_ord_tot_qty;

  	if ( st_xchngbk.c_slm_flg == MARKET )
  	{
    	st_actn.l_new_rt  = st_xchngbk.l_quote;
  	}
  	else
  	{
    	st_actn.l_new_rt  = st_xchngbk.l_ord_lmt_rt;
  	}

  	st_actn.l_exec_qty  = 0;
  	st_actn.l_exec_rt  = 0;
  	st_actn.l_fresh_qty  = 0;
  	st_actn.l_cover_qty  = 0;
  	st_actn.d_add_mrgn_amt  = 0;

  	st_actn.l_curr_rt = st_cntrctqt.l_lst_trdd_prc;
  	sprintf(st_actn.c_ref_rmrks,"%s-%ld",st_ordbk.c_ordr_rfrnc, st_ordbk.l_mdfctn_cntr);
  	rtrim(st_actn.c_ref_rmrks);


  	i_ip_len = sizeof ( struct st_pstn_actn );
  	i_op_len = sizeof ( struct st_pstn_actn );

	 	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

 		if ( i_trnsctn == -1 )
 		{
  		fn_errlog( c_ServiceName, "S31470", LIBMSG, c_err_msg  );
   		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
   		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 		}
 /*** commented in ver 8.6 **
 		i_returncode = fn_lock_usr( c_ServiceName, st_usrprfl.c_cln_mtch_accnt );

 		if ( i_returncode == -1 )
 		{
   		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   *** Ver 3.0 ***
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   *** Ver 5.8 ***
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); *** Ver 5.8 *** 
  		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 		} *** 8.6 comment ends **/

	/** Ver 7.4 Starts ***/

  if ( ( st_cntrct.c_prd_typ == 'U' &&
        ( strcmp(c_sys_msg,"EOS") == 0  ||  strcmp(c_sys_msg,"COVER_SLTP") == 0 ||/*** strcmp(c_sys_msg,"OFF") == 0  || *** Commented in Ver 8.2 ***/strcmp(c_sys_msg,"EXCPT_EOS") == 0
       || strcmp(c_sys_msg,"MY_EOS") == 0 || strcmp(c_sys_msg,"SYS_EVENT") == 0 )    /** Ver 7.4 Added MY_EOS **//*** Ver 10.5 SYS_EVENT */
       ) ||
       ( st_cntrct.c_prd_typ == 'I' &&
        ( strcmp(c_sys_msg,"EOS") == 0  ||  strcmp(c_sys_msg,"COVER_OPTPLUS") == 0 || /*** strcmp(c_sys_msg,"OFF") == 0  || *** Commented in Ver 8.2 ***/ strcmp(c_sys_msg,"EXCPT_EOS") == 0
        || strcmp(c_sys_msg,"MY_EOS") == 0   /** Ver 7.4 Added MY_EOS **/
				|| ( strcmp(c_sys_msg,"SYS_EVENT") == 0 && c_source_flg=='F' && st_xchngbk.c_spl_flg=='S' ) /** Ver 12.1 **/
				)
       )
     )   
   {
     if ( strcmp(c_sys_msg,"MY_EOS") == 0 )  /*** If loop added in Ver 7.4 ***/
     {
        i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_ORDR_RFRNC,0,(char *)c_myeos_frs_ord_ref,0); 
        i_ferr [0] = Ferror32;
     }
     else
     {
      i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_ORDR_RFRNC,0,(char *)c_cover_ord_ref,0);
      i_ferr [0] = Ferror32;
     }

      if ( i_err[0] == -1 )
      {
          fn_errlog( c_ServiceName, "S31475", FMLMSG, c_err_msg  );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      /*** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 ***/
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog( c_ServiceName, "c_cover_ord_ref = :%s:", c_cover_ord_ref );
      }

      if ( strcmp(c_sys_msg,"MY_EOS") == 0 )  /*** If loop added in Ver 7.4 ***/
      {
      /* 7.9 */
            EXEC SQL
            SELECT  DECODE(FOD_FC_FLAG,'F',FOD_SLTP_ORDR_RFRNC,FOD_ORDR_RFRNC),
                    FOD_SLTP_ORDR_RFRNC /*** added in ver 8.6 ***/
            INTO    :c_cover_ord_ref,
									  :c_sltplck_ord_ref /** added in ver 8.6 ***/	
            FROM    FOD_FO_ORDR_DTLS
            WHERE   FOD_ORDR_RFRNC = :c_myeos_frs_ord_ref;
            

        /*** ver 8.6 starts **/

        if( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S31480", SQLMSG, c_err_msg  );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        EXEC  SQL
        SELECT  FOD_ORDR_RFRNC,
                FOD_SLTP_ORDR_RFRNC
        INTO    :c_ordr_rfrnc_lck,
                :c_sltp_ord_rfrnc_lck
        FROM    FOD_FO_ORDR_DTLS
        WHERE   FOD_ORDR_RFRNC in ( :c_myeos_frs_ord_ref,:c_sltplck_ord_ref )
        FOR     UPDATE OF FOD_ORDR_RFRNC;
        /*** ver 8.6 ends ***/
      }
      else /*** ver 8.6 starts **/
      {
        EXEC SQL
        SELECT  FOD_SLTP_ORDR_RFRNC
        INTO    :c_sltplck_ord_ref
        FROM    FOD_FO_ORDR_DTLS
        WHERE   FOD_ORDR_RFRNC = :c_cover_ord_ref;

        if( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S31485", SQLMSG, c_err_msg  );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        EXEC  SQL
        SELECT  FOD_ORDR_RFRNC,
                FOD_SLTP_ORDR_RFRNC
        INTO    :c_ordr_rfrnc_lck,
                :c_sltp_ord_rfrnc_lck
        FROM    FOD_FO_ORDR_DTLS
        WHERE   FOD_ORDR_RFRNC in ( :c_cover_ord_ref,:c_sltplck_ord_ref )
        FOR     UPDATE OF FOD_ORDR_RFRNC;
      } 

       if ( SQLCODE  !=  0 )
       {
         if (SQLCODE == -54)
         {
             fn_userlog( c_ServiceName, "Resource busy and failed to acquire lock" );
         }
          fn_errlog( c_ServiceName, "S31490", SQLMSG, c_err_msg  );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }
       else
       {
         fn_userlog( c_ServiceName, "Sucessfully acquired FOR UPDATE lock on :%s: and :%s: and :%s:",c_sltplck_ord_ref,c_cover_ord_ref,c_myeos_frs_ord_ref );
       }
       /**** ver 8.6 ends ***/
      if (DEBUG_MSG_LVL_3)
      {
        fn_userlog( c_ServiceName, "c_cover_ord_ref = :%s:", c_cover_ord_ref );
      }
   }

  /*** ver 8.6 starts ***/
  /***** i_returncode = fn_lock_usr( c_ServiceName, st_usrprfl.c_cln_mtch_accnt ); **** Ver 12.4 **/
  i_returncode = fn_lock_fno( c_ServiceName, st_usrprfl.c_cln_mtch_accnt ); /** Ver 12.4 **/

    if ( i_returncode == -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S31495",LIBMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);  
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  /*** ver 8.6 ends ***/

  fn_userlog(c_ServiceName, " c_sys_msg is :%s:",c_sys_msg);   /** Ver 7.4 **/

  if( st_cntrct.c_prd_typ == OPTIONPLUS  || st_cntrct.c_prd_typ == SLTP_FUTUREPLUS )
  {
   if( strcmp(c_sys_msg, "MY_EOS") == 0 ||  strcmp(c_sys_msg, "EOS") == 0 || strcmp(c_sys_msg, "EXCPT_EOS")== 0 || strcmp(c_sys_msg, "SYS_EVENT")== 0 || strcmp(c_sys_msg,"COVER_OPTPLUS") == 0)/*** Ver 10.5 SYS_EVENT ***//** added in ver 11.6 **/
   {
    /**ver 11.6 strts **/
    if(DEBUG_MSG_LVL_1)
    {
     fn_userlog(c_ServiceName, "c_c over_ord_ref :%s:",c_cover_ord_ref);
    }
    /*** ver 11.6 ends ***/
    i_pnd_stts = 0;
    i_open_qt = 0;
    /* 7.9 */
		EXEC SQL
			SELECT COUNT(1)
			INTO  :i_pnd_stts
			FROM FOD_FO_ORDR_DTLS
			WHERE DECODE( FOD_FC_FLAG, 'F',FOD_ORDR_RFRNC ,FOD_SLTP_ORDR_RFRNC) =
			(SELECT DECODE( FOD_FC_FLAG, 'F',FOD_ORDR_RFRNC ,FOD_SLTP_ORDR_RFRNC) FROM FOD_FO_ORDR_DTLS WHERE FOD_ORDR_RFRNC = :c_cover_ord_ref )
			AND FOD_ORDR_STTS IN ('O','Q','R','P');

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
       fn_errlog ( c_ServiceName, "S31500", SQLMSG, c_err_msg);
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
       Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
    }

/* 7.9 */
    EXEC SQL
    SELECT ABS(NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FTD_EXCTD_QTY, 'T', -1 * FTD_EXCTD_QTY, FTD_EXCTD_QTY ) ), 0 ))/*** Ver 10.5 T handled ***/
    INTO   :i_open_qt
    FROM   FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
    WHERE  FTD_ORDR_RFRNC = FOD_ORDR_RFRNC
    AND    DECODE( FOD_FC_FLAG, 'F',FOD_ORDR_RFRNC ,FOD_SLTP_ORDR_RFRNC) =(SELECT DECODE( FOD_FC_FLAG, 'F',FOD_ORDR_RFRNC ,FOD_SLTP_ORDR_RFRNC)
                                                                           FROM FOD_FO_ORDR_DTLS WHERE FOD_ORDR_RFRNC = :c_cover_ord_ref);


    if(SQLCODE != 0 )
    {
       fn_errlog ( c_ServiceName, "S31505", SQLMSG, c_err_msg);
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
       Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
    }

    if(DEBUG_MSG_LVL_1)
    {
      fn_userlog(c_ServiceName, "st_xchngbk.l_ord_tot_qty , i_open_qt , i_pnd_stts :%ld:,:%d:,:%d:", st_xchngbk.l_ord_tot_qty , i_open_qt , i_pnd_stts);
      fn_userlog(c_ServiceName, "st_ordbk.c_ordr_rfrnc:%s:",st_ordbk.c_ordr_rfrnc) ;
    }
    if(i_pnd_stts > 0  || i_open_qt < st_xchngbk.l_ord_tot_qty ) /*** != to < in Ver 10.5 ***/
    {
      fn_userlog(c_ServiceName, " The EOS in progress, Pls refresh the status ");
      fn_errlog( c_ServiceName, "B35025","",c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_NO, "B35025", 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

  if( st_cntrct.c_prd_typ == OPTIONPLUS  || st_cntrct.c_prd_typ == SLTP_FUTUREPLUS )
  {
    if(strcmp(c_sys_msg, "MY_EOS") == 0 )
    {
      st_ordbk.c_req_typ = 'M';
    }
    if(strcmp(c_sys_msg, "EOS") == 0 )
    {
      st_ordbk.c_req_typ = 'N';
    }
    if(strcmp(c_sys_msg, "EXCPT_EOS") == 0 )
    {
      st_ordbk.c_req_typ = 'E';
    }
    if(strcmp(c_sys_msg, "SYS_EVENT") == 0 ) /*** Ver 10.5 ***/
    {
      st_ordbk.c_req_typ = 'S';
    }
  }
 }
    /***** Ver 7.4 Ends ****/
		if ( st_xchngbk.c_spl_flg == ROLLOVER )   /*** Ver 1.8 ***/
    {
      st_actn.c_nkd_blkd_flg = ROLLOVER;
    }
		else if ( st_xchngbk.c_spl_flg == ROLLOVER_WITH_SPREAD )  /*** Ver 8.1 ***/
    {
      st_actn.c_nkd_blkd_flg = ROLLOVER_WITH_SPREAD;
    }

		/*** Ver 2.6 Starts ***/

    if((strncmp ( st_xchngbk.c_xchng_rmrks , "CORP ACTN" , 9)==0) && ( c_corp_typ == 'B'))
    {
      	st_actn.c_nkd_blkd_flg = 'P';
    }

    /*** Ver 2.6 Ends ***/

    /*** Ver 6.6 Starts ***/

   if ((strncmp ( st_xchngbk.c_xchng_rmrks , "OptionPlus to Options" , 21)==0)&& (strcmp(st_ordbk.c_channel,"SYS") == 0))
   {
     if(DEBUG_MSG_LVL_3)
     {
       fn_userlog(c_ServiceName,"OptionPlus to Options Conversions"); 
     }

     st_actn.c_nkd_blkd_flg = 'P';
   }

   if ((strncmp ( st_xchngbk.c_xchng_rmrks , "SLTP FuturePlus to Futures" , 26)==0)&& (strcmp(st_ordbk.c_channel,"SYS") == 0))
   {
     if(DEBUG_MSG_LVL_3)
     {
       fn_userlog(c_ServiceName,"SLTP FuturePlus to Futures");
     }

     st_actn.c_nkd_blkd_flg = 'P';
   }

   /*** Ver 6.6 Ends   ***/

    d_required_amount =0.0;  /** Ver 3.1 **/

		/*** if( st_cntrct.c_prd_typ != SLTP_FUTUREPLUS ) Commented In Ver 4.1 ***/
		/***if( st_cntrct.c_prd_typ != SLTP_FUTUREPLUS && st_cntrct.c_prd_typ != OPTIONPLUS ) *** Ver 4.1 *** Commented in Ver 8.1 ***/
    if( st_cntrct.c_prd_typ != SLTP_FUTUREPLUS && st_cntrct.c_prd_typ != OPTIONPLUS && st_xchngbk.c_spl_flg != ROLLOVER_WITH_SPREAD)  /*** Ver 8.1 added to skip for Rollover With Spread ***/
		{
		i_rtrn_cd =	fn_cal_plc_pos	(
																	c_ServiceName,
																	c_err_msg,
 																	&st_actn
																);

		 if(DEBUG_MSG_LVL_3)
		 {
   			fn_userlog(c_ServiceName," Value of i_rtrn_cd :%d:",i_rtrn_cd);
		 }

	 if ( i_rtrn_cd	!=	0 )
   {
			/*** if((st_xchngbk.c_spl_flg  !=ROLLOVER) ||(st_xchngbk.c_spl_flg ==ROLLOVER && i_rtrn_cd != INSUFFICIENT_LIMITS)) ** Ver 1.8 ** Commented in Ver 8.1 ***/
      if((st_xchngbk.c_spl_flg  !=ROLLOVER || st_xchngbk.c_spl_flg  !=ROLLOVER_WITH_SPREAD) ||((st_xchngbk.c_spl_flg ==ROLLOVER && i_rtrn_cd != INSUFFICIENT_LIMITS)||(st_xchngbk.c_spl_flg ==ROLLOVER_WITH_SPREAD && i_rtrn_cd != INSUFFICIENT_LIMITS)))  /*** Condition Modified in Ver 8.1 ***/
			{
			switch ( i_rtrn_cd )
			{
				case INSUFFICIENT_LIMITS	:
  				if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
  				{
						fn_userlog(c_ServiceName,"Inside  INSUFFICIENT_LIMITS Case.");
					}

	 				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  
          /*** Ver 4.3 Starts ***/
          c_actn_flg = 'P';
          i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

          if ( i_trnsctn == -1 )
          {
            fn_errlog( c_ServiceName, "S31510", LIBMSG, c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  
            Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
            Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

          i_returncode =  fn_spn_ins_ffl_log_tbl  (  c_ServiceName,
                                                     st_ordbk,
                                                     c_err_msg,
                                                     d_required_amount ,
                                                     c_actn_flg
                                                  );
          if ( i_returncode != 0 )
          {
            fn_errlog( c_ServiceName, "S31515", LIBMSG, c_err_msg  );
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
            Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
            Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

          }

          if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
          {
            fn_errlog( c_ServiceName, "S31520", LIBMSG, c_err_msg  );
            fn_userlog(c_ServiceName," PLEASE CHECK THE THE FORWARDING STOPPED");
            fn_userlog(c_ServiceName," PLEASE CHECK THE SEQUENCE NO OR INCREASE BY ONE");
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   
            Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
            Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/ 
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

          /*** Ver 4.3 Ends   ***/ 
    			fn_errlog( c_ServiceName, "S31525", LIBMSG, c_err_msg  );
    			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
          c_modfyscrn_flg='Y';                                               /*** Ver 3.1 ***/
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 3.1 ***/
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 3.1 ***/ 
        	tpreturn(TPFAIL, INSUFFICIENT_LIMITS , (char *)ptr_fml_Ibuf, 0, 0 );
				break;
			
				/**** Added in ver 1.2 ERROR Handelling for MAX Packet Size *****/
	
				case MAX_PACKET_SIZE	:
					fn_userlog(c_ServiceName,"Inside  MAX_PACKET_SIZE Case.");
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          fn_errlog( c_ServiceName, "B31031", LIBMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
			    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      		tpreturn(TPFAIL, MAX_PACKET_SIZE, (char *)ptr_fml_Ibuf, 0, 0 );
				break;

				default :
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
			}

      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );

    	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

    	if ( i_trnsctn == -1 )
    	{
      	fn_errlog( c_ServiceName, "S31530", LIBMSG, c_err_msg  );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   	 	}

    if ( st_xchngbk.c_spl_flg == '*' )
    {
      st_xchngbk.c_spl_flg 	= NORMAL_ORDER;
      st_ordbk.c_spl_flg 		= NORMAL_ORDER;
    }

    st_xchngbk.l_ord_seq = l_xchng_seq_num;

    st_xchngbk.c_req_typ = NEW;
    st_xchngbk.c_ex_ordr_typ = ORDINARY_ORDER;

   	/*** Addition done for Temporary orders placment during expiry****/

    if ( st_xchngbk.c_spl_flg == TEMPORARY_ORDER )
    {
      strcpy ( st_xchngbk.c_rqst_tm , st_xchngbk.c_ack_tm );
    }
    else
    {
      strcpy ( st_xchngbk.c_rqst_tm , (char *)c_sysdate.arr );
    }

    st_xchngbk.c_plcd_stts = 'J'; /* Rejected by EBA */
		
	 if( c_fum_mrkt_typ == EXTND_MRKT && c_fcm_mrkt_typ == EXTND_MRKT )
   {
      st_ordbk.c_mrkt_typ 	= 'X';
      st_xchngbk.c_mkrt_typ = 'X';
   }
   else
   {
     st_ordbk.c_mrkt_typ 		= 'N';
     st_xchngbk.c_mkrt_typ 	= 'N';
   }

    st_xchngbk.c_spn_flg	= 'S';
    st_xchngbk.c_oprn_typ = INSERTION_ON_ORDER_MODIFICATION;

   /** ver 10.5 starts ***/
  fn_userlog(c_ServiceName,"CTCL BEFORE INSERT c_nkd_blkd_flg :%c: span ",c_nkd_blkd_flg);
  if( c_nkd_blkd_flg == 'Z' || c_nkd_blkd_flg =='G' ) /** Ver 11.1 **/
  {
    sprintf(st_xchngbk.c_ip_address,"%c",c_nkd_blkd_flg);
  }

  fn_userlog(c_ServiceName,"CTCL st_xchngbk.c_ip_address :%s:",st_xchngbk.c_ip_address);

  /*** ver 10.5 ends ***/
    st_xchngbk.l_session_id = st_usrprfl.l_session_id;  /** Ver 11.4 **/
		i_rtrn_xchngbk	=	fn_spnupd_xchngbk	(	c_ServiceName,
																				&st_xchngbk,
																				c_err_msg
																			);

    if ( i_rtrn_xchngbk	!= 0	)
    {
      fn_errlog( c_ServiceName, "S31535", LIBMSG, c_err_msg  );
      fn_userlog(c_ServiceName," PLEASE CHECK THE THE FORWARDING STOPPED");
      fn_userlog(c_ServiceName," PLEASE CHECK THE SEQUENCE NO OR INCREASE BY ONE");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		EXEC SQL
   		SELECT  CLM_CLNT_CTGRY_ID
      INTO    :st_ordbk.l_clnt_ctgry
      FROM    CLM_CLNT_MSTR
      WHERE   CLM_MTCH_ACCNT = :st_ordbk.c_cln_mtch_accnt;

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31540",SQLMSG,c_err_msg);
      fn_userlog(c_ServiceName," PLEASE CHECK THE THE FORWARDING STOPPED");
      fn_userlog(c_ServiceName," PLEASE CHECK THE SEQUENCE NO OR INCREASE BY ONE");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    EXEC SQL
      SELECT  CCG_PRO_CLI_IND
      INTO    :st_ordbk.c_pro_cli_ind
      FROM    CCG_CLNT_CTGRY
      WHERE   CCG_CLNT_CTGRY_ID = :st_ordbk.l_clnt_ctgry;

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31545",SQLMSG,c_err_msg);
      fn_userlog(c_ServiceName," PLEASE CHECK THE THE FORWARDING STOPPED");
      fn_userlog(c_ServiceName," PLEASE CHECK THE SEQUENCE NO OR INCREASE BY ONE");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    strcpy( st_ordbk.c_pipe_id, st_xchngbk.c_pipe_id );
    st_ordbk.c_ordr_stts = FAILED   ;
    st_ordbk.c_oprn_typ = INSERT_ON_ORDER_PLACEMENT;
    strcpy ( st_ordbk.c_valid_dt,st_xchngbk.c_valid_dt);

    i_ip_len = sizeof ( struct st_orderbook );
    i_op_len = sizeof ( struct st_orderbook );

		strcpy( st_ordbk.c_bp_id, c_bp_id ); 

    if(DEBUG_MSG_LVL_3)
    {
    	fn_userlog(c_ServiceName,"The BP id is :%s:", st_ordbk.c_bp_id);
    	fn_userlog(c_ServiceName,"The Alias is :%s: ",c_alias);
    	fn_userlog(c_ServiceName,"BP channel  is :%s:",st_ordbk.c_channel);
    }

    strcpy((char*)v_user_id_bkup.arr,st_ordbk.c_user_id);
    SETLEN(v_user_id_bkup);
		/*** strcpy(st_ordbk.c_user_id,(char *)v_user_id.arr);   Commented in Ver 2.7 ***/
    strcpy(st_ordbk.c_user_id,(char *)v_user_id_bkup.arr);    /***  Ver 2.7 ***/

    if(DEBUG_MSG_LVL_3)
    {
    	fn_userlog(c_ServiceName,"----------- 1 --------------");
    	fn_userlog(c_ServiceName,"v_user_id_bkup is   :%s:",v_user_id_bkup.arr);
    	fn_userlog(c_ServiceName,"st_ordbk.c_user_id is   :%s:",st_ordbk.c_user_id);
    }
	
		/*******************      VER 2.7 ADDITION STARTS   **********************/

    if ( strcmp(st_usrprfl.c_user_id,"system") == 0 && (c_bp_id [0] != '*') )
    {
      EXEC SQL
        SELECT  CLM_TRD_FLG
        INTO    :c_trd_flg
        FROM    CLM_CLNT_MSTR
        WHERE   CLM_MTCH_ACCNT  = :st_ordbk.c_cln_mtch_accnt;

      if ( SQLCODE  !=  0 )
      {
        fn_errlog( c_ServiceName, "S31550",SQLMSG,c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if ( c_trd_flg  !=  'Y' )
      {
        rtrim(c_bp_id);
        strcpy(st_usrprfl.c_user_id,c_bp_id);
      }
      else
      {
        EXEC SQL
          SELECT  UAC_USR_ID
          INTO    :st_usrprfl.c_user_id
          FROM    UAC_USR_ACCNTS
          WHERE   UAC_CLM_MTCH_ACCNT  = :st_ordbk.c_cln_mtch_accnt;

        if ( SQLCODE  !=  0 )
        {
          fn_errlog( c_ServiceName, "S31555",SQLMSG,c_err_msg);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        rtrim(st_usrprfl.c_user_id);
      }
    }
    else if ( strcmp(st_usrprfl.c_user_id,"system") == 0 && (c_bp_id [0] == '*') )
    {
      if( sql_usr_dt_allwd_flg == 'Y')
      {
        strcpy(st_usrprfl.c_user_id,(char *)v_user_id.arr);
      }
      else
      {
        fn_userlog(c_ServiceName,"Inside Failure Case User ID Is :%s:",st_ordbk.c_user_id);
        strcpy(st_usrprfl.c_user_id,st_ordbk.c_user_id);
      }
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"DT ALLOWED FLAG IS  :%c:", sql_usr_dt_allwd_flg);
        fn_userlog(c_ServiceName,"USER ID IS  :%s:", v_user_id.arr);
      }
    }

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"v_user_id_bkup is   :%s:",v_user_id_bkup.arr);
      fn_userlog(c_ServiceName,"st_ordbk.c_user_id is   :%s:",st_ordbk.c_user_id);
      fn_userlog(c_ServiceName,"CALLING SFO_UPD_ORDRBK");
    }

    /*******************      VER 2.7 ADDITION ENDS     **********************/

    i_returncode  = fn_chk_spndtallwd ( c_ServiceName,
                                      	&st_usrprfl,
                                      	c_user_id,
                                      	&st_errmsg
                                    	);

    if ( i_returncode != 0 )
    {
      fn_userlog(c_ServiceName,"Error While Selecting DL Set Up No. ");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		st_ordbk.c_spn_flg	=	'S';

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"User ID from DT allowed function Is :%s:",c_user_id);
		}

		strcpy(st_ordbk.c_user_id,c_user_id);

		if(DEBUG_MSG_LVL_3)/*** Ver 11.1 start***/
		{
		fn_userlog(c_ServiceName,"st_ordbk.c_fc_flg:%c:",st_ordbk.c_fc_flg); 
		}/*** Ver 11.1 end***/
    i_returncode  = fn_spnupd_ordrbook ( c_ServiceName,
                                      &st_ordbk,
                                      &st_errmsg
                                    );

    if ( i_returncode != 0 )
    {
      fn_errlog( c_ServiceName, "S31560", LIBMSG, c_err_msg  );
      fn_userlog(c_ServiceName," PLEASE CHECK THE THE FORWARDING STOPPED");
      fn_userlog(c_ServiceName," PLEASE CHECK THE SEQUENCE NO OR INCREASE BY ONE");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		/*** Ver 8.7 Starts ***/
		EXEC SQL
			UPDATE FOD_FO_ORDR_DTLS 
			SET FOD_SETLMNT_FLG =:c_setlmnt_flg,
          FOD_1CLICK_FLG = :c_1clk_flg,                   /**Ver 10.4 **/
          FOD_1CLICK_PRTFL_ID = :c_1clk_prtflio_id        /**Ver 10.4 **/
			WHERE FOD_ORDR_RFRNC =:st_ordbk.c_ordr_rfrnc;

		if ( SQLCODE  !=  0 )
		{
			fn_errlog( c_ServiceName, "S31565",SQLMSG,c_err_msg);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
			Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
			Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}	

		/*** Ver 8.7 Ends ***/

	  strcpy(st_ordbk.c_user_id,(char *)v_user_id_bkup.arr);

    if(DEBUG_MSG_LVL_3)
    {
    	fn_userlog(c_ServiceName,"c_user_id_bkup is   :%s:",v_user_id_bkup.arr);
    	fn_userlog(c_ServiceName,"st_ordbk.c_user_id is   :%s:",st_ordbk.c_user_id);
    }

		if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31570", LIBMSG, c_err_msg  );
      fn_userlog(c_ServiceName," PLEASE CHECK THE THE FORWARDING STOPPED");
      fn_userlog(c_ServiceName," PLEASE CHECK THE SEQUENCE NO OR INCREASE BY ONE");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    strcpy ( c_fno_dmn_nm, "FNO" );
    strcpy ( c_fno_trg_nm, "TRG_LOOK_TAB" );
    strcpy ( c_fno_trg_dat, "TRG_LOOK_TAB" );
	
    i_returncode = fn_call_svc_fml ( c_ServiceName,
                                    c_err_msg,
                                    "SFO_FOS_TRG",
                                    0,
                                    4,
                                    0,
                                    FFO_DMN_NM, (char *)c_fno_dmn_nm,
                                    FFO_TRG_NM, (char *)c_fno_trg_nm,
                                    FFO_ABT_TRG_DATA, (char *)c_fno_trg_dat,
                                    FFO_ABT_FILTER, (char *)st_xchngbk.c_pipe_id);

    if ( i_returncode != SUCC_BFR )
    {
      fn_errlog( c_ServiceName, "S31575", LIBMSG, c_err_msg  );
    }

    if(DEBUG_MSG_LVL_3)
    {
    	fn_userlog(c_ServiceName,"ONE FAILURE ORDER INSERTED");
    }

    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}/** Ver 1.8 **/
  }
	
	}/* Ver 2.2 */
		
  if ( st_xchngbk.c_spl_flg == '*' ) 
  {
    st_xchngbk.c_spl_flg 	= NORMAL_ORDER;
    st_ordbk.c_spl_flg 		= NORMAL_ORDER;
  }

  st_xchngbk.l_ord_seq = l_xchng_seq_num;

  st_xchngbk.c_req_typ			= NEW;
  st_xchngbk.c_ex_ordr_typ 	= ORDINARY_ORDER;


  if ( st_xchngbk.c_spl_flg == TEMPORARY_ORDER )
  {
    strcpy ( st_xchngbk.c_rqst_tm , st_xchngbk.c_ack_tm );
  }
  else
  {
    strcpy ( st_xchngbk.c_rqst_tm , (char *)c_sysdate.arr );
  }

  st_xchngbk.c_plcd_stts = 'R'; 

	if( c_fum_mrkt_typ == EXTND_MRKT && c_fcm_mrkt_typ == EXTND_MRKT )
  {
      st_ordbk.c_mrkt_typ 	= 'X';
      st_xchngbk.c_mkrt_typ = 'X';
  }
  else
  {
    st_ordbk.c_mrkt_typ 	= 'N';
    st_xchngbk.c_mkrt_typ = 'N';
  }

	i_ip_len = sizeof ( struct st_xchngbook );
  i_op_len = sizeof ( struct st_xchngbook );

  st_xchngbk.c_oprn_typ = INSERTION_ON_ORDER_MODIFICATION;

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName,"2-st_ordbk.l_cse_id IS :%ld:",st_ordbk.l_cse_id); 
	}

	st_xchngbk.c_spn_flg = 'S';

   /** ver 10.5 starts ***/
  fn_userlog(c_ServiceName,"2 CTCL BEFORE INSERT c_nkd_blkd_flg :%c: span ",c_nkd_blkd_flg);
  if( c_nkd_blkd_flg == 'Z' || c_nkd_blkd_flg == 'G' ) /*** Ver 11.1 ***/
  {
    sprintf(st_xchngbk.c_ip_address,"%c",c_nkd_blkd_flg);
  }

  fn_userlog(c_ServiceName,"2 CTCL st_xchngbk.c_ip_address :%s:",st_xchngbk.c_ip_address);

  /*** ver 10.5 ends ***/
   st_xchngbk.l_session_id = st_usrprfl.l_session_id;  /** Ver 11.4 **/
  i_rtrn_xchngbk  = fn_spnupd_xchngbk  ( c_ServiceName,
                                      &st_xchngbk,
                                      c_err_msg
                                    );

  if ( i_rtrn_xchngbk != 0  )
  {
    fn_errlog( c_ServiceName, "S31580", LIBMSG, c_err_msg  );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	EXEC SQL
    SELECT  CLM_CLNT_CTGRY_ID
    INTO    :st_ordbk.l_clnt_ctgry
    FROM    CLM_CLNT_MSTR
    WHERE   CLM_MTCH_ACCNT = :st_ordbk.c_cln_mtch_accnt;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31585",SQLMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  EXEC SQL
    SELECT  CCG_PRO_CLI_IND
    INTO    :st_ordbk.c_pro_cli_ind
    FROM    CCG_CLNT_CTGRY
    WHERE   CCG_CLNT_CTGRY_ID = :st_ordbk.l_clnt_ctgry;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31590",SQLMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	strcpy( st_ordbk.c_pipe_id, st_xchngbk.c_pipe_id );
  st_ordbk.c_ordr_stts = REQUESTED;
  st_ordbk.c_oprn_typ = INSERT_ON_ORDER_PLACEMENT;
  strcpy ( st_ordbk.c_valid_dt,st_xchngbk.c_valid_dt);

  i_ip_len = sizeof ( struct st_orderbook );
  i_op_len = sizeof ( struct st_orderbook );

  strcpy( st_ordbk.c_bp_id, c_bp_id ); 

  if(DEBUG_MSG_LVL_3)
  {
  	fn_userlog(c_ServiceName,"The BP id is :%s:", st_ordbk.c_bp_id);
  	fn_userlog(c_ServiceName,"The Alias Is :%s: ",c_alias);
  	fn_userlog(c_ServiceName,"BP channel  is :%s:",st_ordbk.c_channel);
  }

  strcpy((char*)v_user_id_bkup.arr,st_ordbk.c_user_id);
  SETLEN(v_user_id_bkup);
  /*** strcpy(st_ordbk.c_user_id,(char *)v_user_id.arr);  Commented in Ver 2.7 ***/
  strcpy(st_ordbk.c_user_id,(char *)v_user_id_bkup.arr);   /*** Ver 2.7 ***/

  /******************     VER 2.7 ADDITION STARTS   **********************/

  if ( strcmp(st_usrprfl.c_user_id,"system") == 0 && (c_bp_id [0] != '*') )
  {
    EXEC SQL
      SELECT  CLM_TRD_FLG
      INTO    :c_trd_flg
      FROM    CLM_CLNT_MSTR
      WHERE   CLM_MTCH_ACCNT  = :st_ordbk.c_cln_mtch_accnt;

    if ( SQLCODE  !=  0 )
    {
      fn_errlog( c_ServiceName, "S31595",SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if ( c_trd_flg  !=  'Y' )
    {
      rtrim(c_bp_id);
      strcpy(st_usrprfl.c_user_id,c_bp_id);
    }
    else
    {
      EXEC SQL
        SELECT  UAC_USR_ID
        INTO    :st_usrprfl.c_user_id
        FROM    UAC_USR_ACCNTS
        WHERE   UAC_CLM_MTCH_ACCNT  = :st_ordbk.c_cln_mtch_accnt;

      if ( SQLCODE  !=  0 )
      {
        fn_errlog( c_ServiceName, "S31600",SQLMSG,c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      rtrim(st_usrprfl.c_user_id);
    }
  }
  else if ( strcmp(st_usrprfl.c_user_id,"system") == 0 && (c_bp_id [0] == '*') )
  {
    if( sql_usr_dt_allwd_flg == 'Y')
    {
      strcpy(st_usrprfl.c_user_id,(char *)v_user_id.arr);
    }
    else
    {
      strcpy(st_usrprfl.c_user_id,st_ordbk.c_user_id);
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"DT ALLOWED FLAG IS  :%c:", sql_usr_dt_allwd_flg);
      fn_userlog(c_ServiceName,"USER ID IS  :%s:", v_user_id.arr);
    }
  }

  /*******************     VER 2.7 ADDITION ENDS     **********************/

  if(DEBUG_MSG_LVL_3)
  {
  	fn_userlog(c_ServiceName,"----------- 2 ---------------");
  	fn_userlog(c_ServiceName,"v_user_id_bkup is   :%s:",v_user_id_bkup.arr);
  	fn_userlog(c_ServiceName,"st_ordbk.c_user_id is   :%s:",st_ordbk.c_user_id);
  	fn_userlog(c_ServiceName,"CALLING SFO_UPD_ORDRBK");
  }
	
 	i_returncode  = fn_chk_spndtallwd	( c_ServiceName,
                                     	&st_usrprfl,
                                     	c_user_id,
                                     	&st_errmsg
                                   	);

   if ( i_returncode != 0 )
   {
     fn_userlog(c_ServiceName,"Error While Selecting DL Set Up No. ");
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_errmsg.c_err_msg, 0 );
		 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
     Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
     Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

	if(DEBUG_MSG_LVL_3)
	{
   	fn_userlog(c_ServiceName,"User ID from DT allowed function Is :%s:",c_user_id);
	}
		st_ordbk.c_spn_flg	=	'S'	;

	  strcpy(st_ordbk.c_user_id,c_user_id);

  	if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
  	{
			fn_userlog(c_ServiceName,"vishnu -----------:%c:",st_ordbk.c_oprn_typ);
		}
	if(DEBUG_MSG_LVL_3) /** Ver 11.1 start*/
	{
		fn_userlog(c_ServiceName,"2 st_ordbk.c_fc_flg:%c:",st_ordbk.c_fc_flg);	
	} /** Ver 11.1 end*/
   i_returncode  = fn_spnupd_ordrbook ( c_ServiceName,
                                     &st_ordbk,
                                     &st_errmsg
                                   );

   if ( i_returncode != 0 )
   {
     fn_errlog( c_ServiceName, "S31605", LIBMSG, c_err_msg  );
     fn_userlog(c_ServiceName," PLEASE CHECK THE THE FORWARDING STOPPED");
     fn_userlog(c_ServiceName," PLEASE CHECK THE SEQUENCE NO OR INCREASE BY ONE");
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
     Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
     Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	 } 

    /*** Ver 8.7 Starts ***/
    EXEC SQL
      UPDATE FOD_FO_ORDR_DTLS
      SET FOD_SETLMNT_FLG =:c_setlmnt_flg,
          FOD_1CLICK_FLG = :c_1clk_flg,                   /**Ver 10.4 **/
          FOD_1CLICK_PRTFL_ID = :c_1clk_prtflio_id        /**Ver 10.4 **/
      WHERE FOD_ORDR_RFRNC =:st_ordbk.c_ordr_rfrnc;

    if ( SQLCODE  !=  0 )
    {
      fn_errlog( c_ServiceName, "S31610",SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    /*** Ver 8.7 Ends ***/

	strcpy(st_ordbk.c_user_id,(char *)v_user_id_bkup.arr);

 	if(DEBUG_MSG_LVL_3)
 	{
 		fn_userlog(c_ServiceName,"--------------------- 3 -------------- ");
 		fn_userlog(c_ServiceName,"v_user_id_bkup is   :%s:",v_user_id_bkup.arr);
 		fn_userlog(c_ServiceName,"st_ordbk.c_user_id is   :%s:",st_ordbk.c_user_id);
 	}

	/** Ver 2.2 Starts **/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName," st_cntrct.c_prd_typ = :%c:", st_cntrct.c_prd_typ);
		fn_userlog(c_ServiceName," c_sys_msg = :%s:", c_sys_msg);
	}

	/***
  if (st_cntrct.c_prd_typ == 'U' &&
        ( strcmp(c_sys_msg,"EOS") == 0  ||  strcmp(c_sys_msg,"COVER_SLTP") == 0 || strcmp(c_sys_msg,"OFF") == 0 )
     ) Commented In Ver 4.1 ***/
  if ( ( st_cntrct.c_prd_typ == 'U' &&
        ( strcmp(c_sys_msg,"EOS") == 0  ||  strcmp(c_sys_msg,"COVER_SLTP") == 0 || strcmp(c_sys_msg,"OFF") == 0  || strcmp(c_sys_msg,"EXCPT_EOS") == 0  					  	|| strcmp(c_sys_msg,"MY_EOS") ==0  || strcmp(c_sys_msg,"SYS_EVENT")  ==0)  /** Ver 7.4 Added MY_EOS **///*** Ver 10.5 SYS_EVENT ***/
       ) ||
       ( st_cntrct.c_prd_typ == 'I' &&
        ( strcmp(c_sys_msg,"EOS") == 0  ||  strcmp(c_sys_msg,"COVER_OPTPLUS") == 0 || strcmp(c_sys_msg,"OFF") == 0  || strcmp(c_sys_msg,"EXCPT_EOS") == 0 					 || strcmp(c_sys_msg,"MY_EOS") == 0 /** Ver 7.4 Added MY_EOS **/
				|| ( strcmp(c_sys_msg,"SYS_EVENT") == 0 && c_source_flg=='F' && st_xchngbk.c_spl_flg=='S')  /** Ver 12.1 **/
				)
       )
     ) /*** EXCPT_EOS added in Ver 5.3 ***/
	{
		if ( strcmp(c_sys_msg,"OFF") == 0 )
		{
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"st_xchngbk.c_ordr_flw is :%c:",st_xchngbk.c_ordr_flw);
				fn_userlog(c_ServiceName,"st_xchngbk.l_ord_tot_qty is :%ld:",st_xchngbk.l_ord_tot_qty);
			}

			/*** Ver 3.9 starts here ***/

			/*******************************************************************************************************************************
			1.
			System shall first check if any Fresh open position exist and match offline order & trade against Fresh open position.
			If multiple open position exists of same order description then system shall map the offline order with any one random position 
			by taking rownum equals one.
			i.e.
			FRESH		BUY		A1	A2	200		|		Offline order
			COVER		SELL	A2	A1	50		|		SELL	150

			Here 150 Fresh BUY open position shall be mapped with 150 SELL Offline order.
			********************************************************************************************************************************/
			EXEC SQL
				SELECT
								FOD_ORDR_RFRNC
				INTO    :c_fresh_ord_ref		
				FROM    FOD_FO_ORDR_DTLS F,
							 (
								SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
											 SUM( DECODE( FOD_ORDR_FLW, 'S', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY
								FROM   FOD_FO_ORDR_DTLS
								WHERE  FOD_XCHNG_CD       = :st_cntrct.c_xchng_cd
								AND    FOD_CLM_MTCH_ACCNT = :st_usrprfl.c_cln_mtch_accnt
								AND    FOD_UNDRLYNG       = :st_cntrct.c_undrlyng
								AND    FOD_PRDCT_TYP      = :st_cntrct.c_prd_typ
								AND    FOD_EXPRY_DT       = :c_expiry_dt
								AND    FOD_STRK_PRC       = DECODE(:st_cntrct.c_prd_typ ,'U',0,:st_cntrct.l_strike_prc)  /*** Ver 4.1 ***/
                AND    FOD_OPT_TYP        = DECODE(:st_cntrct.c_prd_typ ,'U','*',:st_cntrct.c_opt_typ )  /*** Ver 4.1 ***/
								AND    FOD_INDSTK         = :st_cntrct.c_ctgry_indstk
								AND    FOD_EXER_TYP       = :st_cntrct.c_exrc_typ
								GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
								HAVING    SUM( DECODE( FOD_ORDR_FLW, 'S', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) )  != 0
							 ) PSTN
				WHERE   PSTN.FRSH_ORDR_RFRNC = F.FOD_ORDR_RFRNC
				AND     DECODE( F.FOD_ORDR_FLW ,'B', PSTN.OPEN_QTY , PSTN.OPEN_QTY * -1 ) > 0
				AND     F.FOD_ORDR_FLW       = DECODE(:st_xchngbk.c_ordr_flw,'B','S','S','B')
				AND     ABS(PSTN.OPEN_QTY)   = :st_xchngbk.l_ord_tot_qty
				AND     ROWNUM = 1;

			if ( SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND)
			{
				fn_errlog( c_ServiceName, "S31615",SQLMSG,c_err_msg);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
 				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		 }
			
		 if ( SQLCODE == NO_DATA_FOUND )
		 {
  		if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
  		{
		  	fn_userlog( c_ServiceName, "OFFLINE upload inside cover Excess position");
			}
	
			/******************************************************************************************************
			2.
			If  there is no further fresh position against which the order or trade can be matched 
			then system shall check whether any excess cover position created and treat this as a Fresh position.
			i.e.
			FRESH		BUY		C1	C3	200
			COVER		SELL	C2	C1	200
			COVER		SELL	C3	C1	100

			Cover excess position will be determined i.e C3
			*******************************************************************************************************/
  /* 7.9 */
			EXEC SQL
				SELECT	MAX(FOD_ORDR_RFRNC)
				INTO		:c_ordr_ref_to_upd
				FROM		FOD_FO_ORDR_DTLS
				WHERE		FOD_SLTP_ORDR_RFRNC IN 
								(SELECT	DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC )
								FROM		FOD_FO_ORDR_DTLS
								WHERE		FOD_XCHNG_CD       = :st_cntrct.c_xchng_cd
								AND			FOD_CLM_MTCH_ACCNT = :st_usrprfl.c_cln_mtch_accnt
								AND			FOD_UNDRLYNG       = :st_cntrct.c_undrlyng
								AND			FOD_PRDCT_TYP      = :st_cntrct.c_prd_typ
								AND			FOD_EXPRY_DT       = :c_expiry_dt
								AND     FOD_STRK_PRC        = DECODE(:st_cntrct.c_prd_typ ,'U',0,:st_cntrct.l_strike_prc)  /*** Ver 4.1 ***/
                AND     FOD_OPT_TYP         = DECODE(:st_cntrct.c_prd_typ ,'U','*',:st_cntrct.c_opt_typ )  /*** Ver 4.1 ***/
								AND			FOD_INDSTK         = :st_cntrct.c_ctgry_indstk
								AND			FOD_EXER_TYP       = :st_cntrct.c_exrc_typ
								GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
								HAVING    SUM( DECODE( FOD_ORDR_FLW, 'S', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) )  != 0
							 ) 
				/***AND     DECODE( FOD_ORDR_FLW ,'S', PSTN.OPEN_QTY , 'B', PSTN.OPEN_QTY * -1 ) < 0 Check if required ***/
				AND     FOD_ORDR_FLW					= DECODE(:st_xchngbk.c_ordr_flw,'B','S','S','B')
				AND     FOD_EXEC_QTY					= :st_xchngbk.l_ord_tot_qty
				/* commented in 10.5 AND     FOD_FC_FLAG =:c_fod_fc_flag_c; * 7.9 Hard Code Value Replace With Bind Variable  */
        AND     FOD_FC_FLAG in (:c_fod_fc_flag_c, :c_fod_fc_flag_t) ; /*** Ver 10.5 ***/
			
			if ( SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND && SQLCODE != NULL_RETURN )
			{
				fn_errlog( c_ServiceName, "S31620",SQLMSG,c_err_msg);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
	      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
  			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		  }

			if (SQLCODE == 0)
			{ 
				if(DEBUG_MSG_LVL_3)
			  {
					fn_userlog(c_ServiceName,"c_ordr_ref_to_upd = :%s:",c_ordr_ref_to_upd);
			  }
				
				/********************************************************
				3. Treat this cover excess position as fresh.
				i.e.
				FRESH		BUY		C1	C3		200
				COVER		SELL	C2	C1		200
				FRESH		SELL	C3	NULL	100
				*********************************************************/

				EXEC SQL
					UPDATE	FOD_FO_ORDR_DTLS
					SET			FOD_FC_FLAG = :c_fod_fc_flag_f,  /* 7.9  Hard Code Value Replace With Bind Variable  */
									FOD_SLTP_ORDR_RFRNC = NULL
					WHERE		FOD_ORDR_RFRNC = :c_ordr_ref_to_upd;
		
				if ( SQLCODE  !=  0 )
				{
					fn_errlog( c_ServiceName, "S31625",SQLMSG,c_err_msg);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
	        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
  				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog( c_ServiceName,"Updated :%d: record as Fresh due to Excess qty in %s|%s|%s|%c|%s", sqlca.sqlerrd[2], st_cntrct.c_xchng_cd,st_usrprfl.c_cln_mtch_accnt,st_cntrct.c_undrlyng,st_cntrct.c_prd_typ,c_expiry_dt.arr);
				}

				/************************************************************************************
				4. De-reference the cover excess position, from the previous Fresh order tagged.
				Max is taken in order to handle multiple covers mapped to single fresh.
				i.e.
				FRESH		BUY		C1	C2		200
				COVER		SELL	C2	C1		200
				FRESH		SELL	C3	NULL	100
				*************************************************************************************/

				EXEC SQL
					UPDATE	FOD_FO_ORDR_DTLS
					SET			FOD_SLTP_ORDR_RFRNC = (	SELECT MAX(FOD_ORDR_RFRNC) 
																					FROM	 FOD_FO_ORDR_DTLS
																					WHERE	 FOD_SLTP_ORDR_RFRNC IN (	SELECT FOD_ORDR_RFRNC 
																																					FROM	 FOD_FO_ORDR_DTLS
																																					WHERE	 FOD_SLTP_ORDR_RFRNC = :c_ordr_ref_to_upd
																																				)
																				)
					WHERE		FOD_SLTP_ORDR_RFRNC = :c_ordr_ref_to_upd;
		
				if ( SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
				{
					fn_errlog( c_ServiceName, "S31630",SQLMSG,c_err_msg);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
	        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
	  			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}

			/**********************************************************************************************************************
			5.
			System shall then map the offline square off transaction against such excess cover position open in the system. 
			i.e.
			FRESH		BUY		C1	C2		200		|		Offline order
			COVER		SELL	C2	C1		200		|		BUY	100
			FRESH		SELL	C3	NULL	100		|

			Here 100 SELL open position shall be mapped with 100 BUY square off Offline order.
			***********************************************************************************************************************/
   /* 7.9 */
			EXEC SQL
			SELECT
								FOD_ORDR_RFRNC
				INTO    :c_fresh_ord_ref		
				FROM    FOD_FO_ORDR_DTLS F,
							 (
								SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
											 SUM( DECODE( FOD_ORDR_FLW, 'S', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY
								FROM   FOD_FO_ORDR_DTLS
								WHERE  FOD_XCHNG_CD       = :st_cntrct.c_xchng_cd
								AND    FOD_CLM_MTCH_ACCNT = :st_usrprfl.c_cln_mtch_accnt
								AND    FOD_UNDRLYNG       = :st_cntrct.c_undrlyng
								AND    FOD_PRDCT_TYP      = :st_cntrct.c_prd_typ
								AND    FOD_EXPRY_DT       = :c_expiry_dt
								AND    FOD_STRK_PRC       = DECODE(:st_cntrct.c_prd_typ ,'U',0,:st_cntrct.l_strike_prc)  /*** Ver 4.1 ***/
                AND    FOD_OPT_TYP        = DECODE(:st_cntrct.c_prd_typ ,'U','*',:st_cntrct.c_opt_typ )  /*** Ver 4.1 ***/
								AND    FOD_INDSTK         = :st_cntrct.c_ctgry_indstk
								AND    FOD_EXER_TYP       = :st_cntrct.c_exrc_typ
								GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
								HAVING    SUM( DECODE( FOD_ORDR_FLW, 'S', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) )  != 0
							 ) PSTN
				WHERE   PSTN.FRSH_ORDR_RFRNC = F.FOD_ORDR_RFRNC
				AND     F.FOD_ORDR_FLW       = ( CASE WHEN DECODE( F.FOD_ORDR_FLW ,'B', PSTN.OPEN_QTY , 'S', PSTN.OPEN_QTY * -1 ) > 0 
																						  THEN DECODE(:st_xchngbk.c_ordr_flw,'B','S','S','B')
																			   ELSE :st_xchngbk.c_ordr_flw	
																			   END 
																			 )		
				AND     ABS(PSTN.OPEN_QTY)   = :st_xchngbk.l_ord_tot_qty
				AND     ROWNUM = 1;

				if ( SQLCODE  !=  0 )
				{
					fn_errlog( c_ServiceName, "S31635",SQLMSG,c_err_msg);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
	        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
  				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			 }
		  } 

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName, "OFFLINE c_fresh_ord_ref = :%s:", c_fresh_ord_ref );	
			}
			/*** Ver 3.9 ends here ***/

			/*** Commented in Ver 3.9 ***
			 EXEC SQL
				SELECT 
								FOD_SLTP_ORDR_RFRNC
				INTO		:c_cover_ord_ref
				FROM		FOD_FO_ORDR_DTLS F, 
							 (
								SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
											 SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY
								FROM   FOD_FO_ORDR_DTLS
								WHERE  FOD_XCHNG_CD       = :st_cntrct.c_xchng_cd
								AND    FOD_CLM_MTCH_ACCNT = :st_usrprfl.c_cln_mtch_accnt
								AND    FOD_UNDRLYNG       = :st_cntrct.c_undrlyng
								AND    FOD_PRDCT_TYP      = :st_cntrct.c_prd_typ
								AND    FOD_EXPRY_DT       = :c_expiry_dt
								AND    FOD_INDSTK         = :st_cntrct.c_ctgry_indstk
								AND    FOD_EXER_TYP       = :st_cntrct.c_exrc_typ
								GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
								HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) > 0
							 ) PSTN
				WHERE		PSTN.FRSH_ORDR_RFRNC = F.FOD_ORDR_RFRNC
				AND     F.FOD_ORDR_FLW	     = decode(:st_xchngbk.c_ordr_flw,'B','S','S','B')
				AND			PSTN.OPEN_QTY				 = :st_xchngbk.l_ord_tot_qty
				AND			ROWNUM = 1;

			if ( SQLCODE  !=  0 )
			{
				fn_errlog( c_ServiceName, "S31640", SQLMSG, c_err_msg  );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		 }
		
		if(DEBUG_MSG_LVL_0)
		{
			 fn_userlog( c_ServiceName, "OFFLINE c_cover_ord_ref = :%s:", c_cover_ord_ref );
		}
		***/
	 }
   /****** Else loop commented and taken up in Ver 7.4 to get input order reference and check overlap of EOS process ***
	 else
	 {
			i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_ORDR_RFRNC,0,(char *)c_cover_ord_ref,0);
			i_ferr [0] = Ferror32;

			if ( i_err[0] == -1 )
			{
					fn_errlog( c_ServiceName, "S31645", FMLMSG, c_err_msg  );
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   *** Ver 3.0 ***
	        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   *** Ver 5.8 ***
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); *** Ver 5.8 ***
  				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			*** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 ***
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName, "c_cover_ord_ref = :%s:", c_cover_ord_ref );
			}
	 }    *************Ver 7.4 Ends *********/

		/*** if (strcmp(c_sys_msg,"COVER_SLTP") == 0 ) Commented In Ver 4.1 ***/
    if ( (strcmp(c_sys_msg,"COVER_SLTP") == 0) || (strcmp(c_sys_msg,"COVER_OPTPLUS") == 0) ) /*** Ver 4.1 ***/
		{
			if(DEBUG_MSG_LVL_3)
			{
				if ( strcmp(c_sys_msg,"COVER_SLTP") == 0 )  /*** Ver 4.1 ***/
        {
          fn_userlog( c_ServiceName, "Inside COVER_SLTP");
        }
        else if ( strcmp(c_sys_msg,"COVER_OPTPLUS") == 0 )
        {
          fn_userlog( c_ServiceName, "Inside COVER_OPTPLUS ");
        }
			}
			i_returncode  = fn_cover_sltpfp ( c_ServiceName,
																				c_cover_ord_ref,
																				&st_ordbk,
																				&st_actn,
																			 &st_errmsg 
																			);
		}
		else if (( strcmp(c_sys_msg,"EOS") == 0  || strcmp(c_sys_msg,"MY_EOS") == 0 || strcmp(c_sys_msg,"EXCPT_EOS") == 0 || strcmp(c_sys_msg,"SYS_EVENT") == 0) && i_excp_flag == 0 )		/*** strcmp condition added in else loop Ver 3.9 ***/ /*** Added in Ver 7.4 MY_EOS  and EXCPT_EOS ***//** Ver 10.5 SYS_EVENT ***/
		{
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName, "Inside  Else");
			}
			i_returncode  = fn_eos_sltpfp ( c_ServiceName,
																			c_cover_ord_ref,
																			&st_ordbk,
																			&st_errmsg
																		);
		}
		else if ( strcmp(c_sys_msg,"OFF") == 0 )		/*** else if loop added in Ver 3.9 ***/
		{
  		if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
  		{
				fn_userlog( c_ServiceName, "Inside OFFLINE" );
			}

			/***********************************************************************************
			6.
			Finally, the offline order placed shall be mapped with the cover excess position.
			i.e.
			FRESH		BUY		C1	C2	200		
			COVER		SELL	C2	C1	200		
			FRESH		SELL	C3	C4	100
			COVER		BUY		C4	C3	100
			************************************************************************************/

			i_returncode  = fn_off_sltpfp ( c_ServiceName,
																			c_fresh_ord_ref,
																			&st_ordbk,
																			&st_errmsg
																		);
		}

		else if ( (strcmp(c_sys_msg,"EXCPT_EOS") == 0 || strcmp(c_sys_msg,"MY_EOS") == 0 || strcmp(c_sys_msg,"EOS") == 0 || strcmp(c_sys_msg,"SYS_EVENT") == 0) && i_excp_flag == 1 )     /*** Ver 5.3 ***/    /*** Added i_excp_flag, MY_EOS, EOS  in Ver 7.4***//*** Ver 10.5 SYS_EVENT ***/
    {
  		if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
  		{
      	fn_userlog( c_ServiceName, "Inside Exception EOS" );
			}

      i_returncode  = fn_excpt_eos_fplsoptpls ( c_ServiceName,
																						c_cover_ord_ref,
																						&st_ordbk,
																						&st_actn,
																						&st_errmsg
																					);
    }

		if ( i_returncode != 0 )
		{
			fn_errlog( c_ServiceName, "S31650", LIBMSG, c_err_msg  );
			fn_userlog(c_ServiceName," Error in fun fn_eos_sltpfp");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
	    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
  		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}

	/** Ver 2.2 Ends   **/

/** ver 10.5 starts ***/
 if (  st_cntrct.c_prd_typ == 'U' &&
         strcmp(c_sys_msg,"PROF_ORD") == 0 )
 {

 EXEC SQL
      UPDATE FOD_FO_ORDR_DTLS
         SET FOD_SLTP_ORDR_RFRNC = :c_profit_ordr,
             FOD_FC_FLAG = 'T'
         WHERE FOD_ORDR_RFRNC = :st_ordbk.c_ordr_rfrnc;

  if( SQLCODE != 0 )
  {
      fn_errlog( c_ServiceName, "S31655", SQLMSG, c_err_msg  );
      fn_userlog(c_ServiceName," Error in fun fn_eos_sltpfp");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
 }
 /** ver 10.5 ends **/

	ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

 	if ( ptr_fml_Obuf == NULL )
 	{
   fn_errlog( c_ServiceName, "S31660", TPMSG, c_err_msg  );
   fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
   Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
   Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}

 	if ( Fadd32 ( ptr_fml_Obuf, FFO_ORDR_RFRNC, ( char *)st_ordbk.c_ordr_rfrnc, 0 ) == -1 )
 	{
   fn_errlog( c_ServiceName, "S31665",FMLMSG,c_err_msg);
   fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
   Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
   Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}

 	if ( Fadd32 ( ptr_fml_Obuf, FFO_PIPE_ID, ( char *)st_xchngbk.c_pipe_id, 0 ) == -1 )
 	{
   fn_errlog( c_ServiceName, "S31670",FMLMSG,c_err_msg);
   fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
   Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
   Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}

    /**** Ver 5.7 Starts ****/
  if ( strcmp(st_ordbk.c_channel,"SYS") == 0 )
  {
    if ( Fadd32 ( ptr_fml_Obuf, FFO_ERR_MSG, "", 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31675",FMLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  /**** Ver 5.7 Ends ****/


	/**** Ver 11.3 Start ****/
		/* if ( (  st_cntrct.c_prd_typ == 'F' || (st_cntrct.c_prd_typ == 'O' && st_ordbk.c_ordr_flw =='S')) Commented in 11.5 */
		if ( (  st_cntrct.c_prd_typ == 'F' || (st_cntrct.c_prd_typ == 'O' && st_ordbk.c_ordr_flw =='S')) /* Ver 11.5 */
				&& c_source_flg !='F'
				&& (!strstr( st_xchngbk.c_xchng_rmrks,"Physical Settlement EOS")) && (st_xchngbk.c_spl_flg !=  PHYSICAL_DLVRY_SQOFF)
				&& (st_xchngbk.c_spl_flg != SYSTEM_SQUAREOFF )
				&& (st_xchngbk.c_spl_flg != IMTM_SYS_SQUAREOFF)
				&& (st_xchngbk.c_spl_flg != LMTNEG_SYS_SQUAREOFF )
       )
    {

	
    if(DEBUG_MSG_LVL_3)
    {
    	fn_userlog(c_ServiceName,"POPUP FLAG :%c:",c_popup_flg);
    }
		if ( c_popup_flg == 'Y' && i_popup==1 )	/*** Ver 11.9  added i_popup***/	
		{
			EXEC SQL INSERT INTO FFS_FO_FLASH_DISCRYP
							 (
								FFS_CLM_MTCH_ACCNT,FFS_XCHNG_CD,FFS_PRDCT_TYP,FFS_UNDRLYNG,FFS_EXPRY_DT,
								FFS_EXER_TYP,FFS_OPT_TYP,FFS_STRK_PRC,FFS_LMT_MRKT_FLG,FFS_LMT_RT,FFS_ORDR_TOT_QTY,FFS_CLS_TIME,
								FFS_CONF_REQ,FFS_INS_DT,FFS_CONSENT_DATE
								)
								SELECT 
								FFS_CLM_MTCH_ACCNT,FFS_XCHNG_CD,FFS_PRDCT_TYP,FFS_UNDRLYNG,FFS_EXPRY_DT,
								FFS_EXER_TYP,FFS_OPT_TYP,FFS_STRK_PRC,FFS_LMT_MRKT_FLG,FFS_LMT_RT,FFS_ORDR_TOT_QTY,FFS_CLS_TIME,
								FFS_CONF_REQ,FFS_INS_DT,sysdate
								FROM FFS_FO_FLASH_SETTING  where FFS_CLM_MTCH_ACCNT = :st_usrprfl.c_cln_mtch_accnt;

      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31680",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

			EXEC SQL DELETE FROM FFS_FO_FLASH_SETTING  where FFS_CLM_MTCH_ACCNT = :st_usrprfl.c_cln_mtch_accnt;
			if( SQLCODE != 0 && SQLCODE!=NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S31685",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);  
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		}
		}

		/**** Ver 11.3 End ****/

	

 	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
 	{
   fn_errlog( c_ServiceName, "S31690", LIBMSG, c_err_msg  );
   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
   Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
   Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}
	
  /*** Ver 13.0 Starst here ***/
   if( st_xchngbk.c_spl_flg != ROLLOVER &&                 /** For Rollover & Spread this is done in wrapper service **/
    st_xchngbk.c_spl_flg != ROLLOVER_WITH_SPREAD &&
    st_xchngbk.c_spl_flg != L2_ORDER &&
    st_xchngbk.c_spl_flg != L3_ORDER &&
    st_cntrct.c_prd_typ  != SLTP_FUTUREPLUS &&
    st_cntrct.c_prd_typ  != OPTIONPLUS
   )
  {
  i_returncode = fn_upd_mrgn_reporting(st_usrprfl.c_cln_mtch_accnt,
                                     st_cntrct.c_xchng_cd,
                                     c_ServiceName,
                                     c_err_msg
                                    );
  if( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31695", LIBMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  }
/*** Ver 13.0 Ends here ***/
 	if ( i_trnsctn == LOCAL_TRNSCTN )
  {
    /* To post the Trigger in Tux3 Domain Call the service SFO_FOS_TRG */

    strcpy ( c_fno_dmn_nm, "FNO" );
    strcpy ( c_fno_trg_nm, "TRG_LOOK_TAB" );
    strcpy ( c_fno_trg_dat, "TRG_LOOK_TAB" );
    i_returncode = fn_call_svc_fml ( c_ServiceName,
                                    c_err_msg,
                                    "SFO_FOS_TRG",
                                    0,
                                    4,
                                    0,
                                    FFO_DMN_NM, (char *)c_fno_dmn_nm,
                                    FFO_TRG_NM, (char *)c_fno_trg_nm,
                                    FFO_ABT_TRG_DATA, (char *)c_fno_trg_dat,
                                    FFO_ABT_FILTER, (char *)st_xchngbk.c_pipe_id);

    if ( i_returncode != SUCC_BFR )
    {
      fn_errlog( c_ServiceName, "S31700", LIBMSG, c_err_msg  );
    }
  }

	if ( strcmp( st_ordbk.c_channel , "APP") == 0 || strcmp( st_ordbk.c_channel , "VSA") == 0 || strncmp( st_ordbk.c_channel ,"CN", 2) == 0 || strcmp(st_ordbk.c_channel,"NET") == 0 )  /*** Ver 3.3 ** condition added for CNT channel ***/
								/***  Ver 3.7 Condition added for New Trade Racer ***/ 
  {
    l_can_qty = 0;
    l_open_qty = st_xchngbk.l_ord_tot_qty;
    l_exprd_qty = 0;
    strcpy(c_xchng_ack,"0");
		
    if(DEBUG_MSG_LVL_3)
    {
    	fn_userlog(c_ServiceName,"INSIDE APP / VSAT / CNT / NET");  /*** Ver 3.3  ***/
    }

    i_err[0] = Fadd32 ( ptr_fml_Obuf, FFO_CANCL_QTY,( char *)&l_can_qty, 0 );
    i_err[1] = Fadd32 ( ptr_fml_Obuf, FFO_CHANNEL,( char *)st_ordbk.c_channel, 0 );
    i_err[2] = Fadd32 ( ptr_fml_Obuf, FFO_CTGRY_INDSTK,( char *)&(st_cntrct.c_ctgry_indstk), 0 );
    i_err[3] = Fadd32 ( ptr_fml_Obuf, FFO_EBA_MTCH_ACT_NO,( char *)st_usrprfl.c_cln_mtch_accnt, 0 );
    i_err[4] = Fadd32 ( ptr_fml_Obuf, FFO_DSCLSD_QTY,( char *)&(st_xchngbk.l_dsclsd_qty), 0 );
    i_err[5] = Fadd32 ( ptr_fml_Obuf, FFO_EXEC_QTY,( char *)&(st_actn.l_exec_qty), 0 );
    i_err[6] = Fadd32 ( ptr_fml_Obuf, FFO_EXER_TYP,( char *)&(st_cntrct.c_exrc_typ), 0 );
    i_err[7] = Fadd32 ( ptr_fml_Obuf, FFO_EXPRD_QTY,( char *)&l_exprd_qty, 0 );
    i_err[8] = Fadd32 ( ptr_fml_Obuf, FFO_EXPRY_DT,( char *)st_cntrct.c_expry_dt, 0 );
    i_err[9] = Fadd32 ( ptr_fml_Obuf, FFO_LMT_MKT_SL_FLG,( char *)&(st_xchngbk.c_slm_flg), 0 );
    i_err[10]= Fadd32 ( ptr_fml_Obuf, FFO_LMT_RT,( char *)&(st_xchngbk.l_ord_lmt_rt), 0 );
    i_err[11]= Fadd32 ( ptr_fml_Obuf, FFO_C_OPNPSTN_QTY,( char *)&l_open_qty, 0 );
    i_err[12]= Fadd32 ( ptr_fml_Obuf, FFO_ACK_NMBR,( char *)c_xchng_ack, 0 );
    i_err[13]= Fadd32 ( ptr_fml_Obuf, FFO_OPT_TYP,( char *)&(st_cntrct.c_opt_typ), 0 );
    i_err[14]= Fadd32 ( ptr_fml_Obuf, FFO_ORD_TOT_QTY,( char *)&(st_xchngbk.l_ord_tot_qty), 0 );
    i_err[15]= Fadd32 ( ptr_fml_Obuf, FFO_ORD_TYP,( char *)&(st_xchngbk.c_ord_typ), 0 );
    i_err[16]= Fadd32 ( ptr_fml_Obuf, FFO_ORD_VALID_DT,( char *)st_xchngbk.c_valid_dt, 0 );
    i_err[17]= Fadd32 ( ptr_fml_Obuf, FFO_ORDR_FLW,( char *)&(st_xchngbk.c_ordr_flw), 0 );
    i_err[18]= Fadd32 ( ptr_fml_Obuf, FFO_ORDR_STTS,( char *)&(st_ordbk.c_ordr_stts), 0 );
    i_err[19]= Fadd32 ( ptr_fml_Obuf, FFO_PRDCT_TYP,( char *)&(st_cntrct.c_prd_typ), 0 );
    i_err[20]= Fadd32 ( ptr_fml_Obuf, FFO_SPL_FLG,( char *)&(st_xchngbk.c_spl_flg), 0 );
    i_err[21]= Fadd32 ( ptr_fml_Obuf, FFO_STP_LSS_TGR,( char *)&(st_xchngbk.l_stp_lss_tgr), 0 );
    i_err[22]= Fadd32 ( ptr_fml_Obuf, FFO_STRK_PRC,( char *)&(st_cntrct.l_strike_prc), 0 );
    i_err[23]= Fadd32 ( ptr_fml_Obuf, FFO_TRD_DT,( char *)st_ordbk.c_trd_dt, 0 );
    i_err[24]= Fadd32 ( ptr_fml_Obuf, FFO_UNDRLYNG,( char *)st_cntrct.c_undrlyng, 0 );
    i_err[25]= Fadd32 ( ptr_fml_Obuf, FFO_XCHNG_CD,( char *)st_cntrct.c_xchng_cd, 0 );

    for( i_cnt = 0; i_cnt < 26; i_cnt++ )
    {
      if( i_err[i_cnt] == -1 )
      {
        fn_errlog( c_ServiceName, "S31705",FMLMSG,c_err_msg);
        fn_userlog(c_ServiceName, "Order has been sent but error while generating snapshot");
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 5.8 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 5.8 ***/
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
  }

	i_actn_id = 0;																									/*** Ver 3.0 ***/
  Fadd32( ptr_fml_Obuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/


	tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
}

int fn_check_inp_spn( char *c_ServiceName,
                  		struct st_xchngbook *ptr_st_xchngbook,
                  		struct st_cntrct_qt *ptr_st_cntrct_qt,
                  		char c_fum_mrkt_typ, 
                  		char c_fcm_mrkt_typ,
											int i_rollover_ord_ind,    /*** Ver 8.1 ***/
                      char *c_spd_expry_dt1,      /*** Ver 8.1 ***/
                      char *c_spd_expry_dt2,      /*** Ver 8.1 ***/
                  		struct st_err_msg *ptr_st_err_msg )
{ 


  int i_dategreater=0;
  int i_returncode;
  char c_exg_crrnt_stts;
  char c_exg_extnd_stts; 
	char c_exg_ovrnght_stts ;                         /* Ver 1.9 */
  char c_err_msg[256];
  varchar c_near_expry_dt [ LEN_DATE ];
  double d_min_ordr_val=0.0;
  double d_dsclsd_prcntg=0.0;
  long long ll_ordr_val  = 0;
  long long ll_min_ordr_val = 0;
 /* 7.9 */
  EXEC SQL
     SELECT EXG_CRRNT_STTS,
            EXG_EXTND_MRKT_STTS, 
						EXG_TMP_MKT_STTS,                      /* Ver 1.9 */
            EXG_DSCLSD_PRCNTG
     INTO   :c_exg_crrnt_stts,
            :c_exg_extnd_stts, 
						:c_exg_ovrnght_stts,                   /* Ver 1.9 */ 
            :d_dsclsd_prcntg
     FROM   EXG_XCHNG_MSTR
     WHERE  EXG_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31710",SQLMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

  /** Addition done in the below validation for temporary order  **/
  /** placement during expiry                                    **/
 	/** Orders cannnot be placed when the Exchange is under Expiry **/

  if ( ( c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY ) &&
       ( ptr_st_xchngbook->c_spl_flg != TEMPORARY_ORDER ) &&
			 ( c_exg_ovrnght_stts !=  EXCHANGE_OPEN ) &&                        /*** Ver 1.9 ***/
       ( strncmp ( ptr_st_xchngbook->c_xchng_rmrks , "CORP ACTN" , 9)!=0 ) &&
       ( strncmp( ptr_st_xchngbook->c_xchng_rmrks, "OptionPlus to Options" , 21)!=0 ) &&  /** Ver 6.6 **/
       ( strncmp(ptr_st_xchngbook->c_xchng_rmrks, "SLTP FuturePlus to Futures" , 26)!=0 ) /** Ver 6.6 **/
     ) 
  {
    if( c_exg_extnd_stts == EXCHANGE_UNDER_EXPIRY )
    {
      fn_errlog( c_ServiceName, "B28518",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
    else if ( c_fum_mrkt_typ == NORMAL_MRKT && ptr_st_xchngbook->c_slm_flg != MARKET &&
             ptr_st_xchngbook->c_ord_typ != IMMEDIATE_OR_CANCEL )      /**  Underlying Level Check  **/
    {
      /** Only Normal Limit and SLTP orders come in this loop **/
      fn_userlog( c_ServiceName,"This Underlying Is Disabled For Extended Market Hours");
      fn_errlog( c_ServiceName, "B66066",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
    else if ( c_fcm_mrkt_typ == NORMAL_MRKT && ptr_st_xchngbook->c_slm_flg != MARKET &&
              ptr_st_xchngbook->c_ord_typ != IMMEDIATE_OR_CANCEL )     /**  Contract Level Check  **/
    {
      /** Only Normal Limit and SLTP orders come in this loop **/
      fn_userlog( c_ServiceName,"This Contract Is Disabled For Extended Market Hours");
      fn_errlog( c_ServiceName, "B66066",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
  }

	/** Temp Orders can be uploaded only when the Exchange is under Expiry **/

  if ( ( c_exg_crrnt_stts != EXCHANGE_UNDER_EXPIRY || c_exg_extnd_stts != EXCHANGE_UNDER_EXPIRY ) &&
       ( ptr_st_xchngbook->c_spl_flg == TEMPORARY_ORDER ) )                 
  {
    fn_errlog( c_ServiceName, "B28564",DEFMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

  if ( ( ptr_st_xchngbook->c_slm_flg == LIMIT ) || ( ptr_st_xchngbook->c_slm_flg == STOP_LOSS ) )
  {

    /** Limit rate cannot be less than or equal to Zero for Limit orders **/

    if (( ptr_st_xchngbook->l_ord_lmt_rt <= 0) && ( ptr_st_xchngbook->c_spl_flg != ROLLOVER_WITH_SPREAD))			/*** Ver 8.1 ***/
    {

      fn_errlog( c_ServiceName, "B28519",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }

    if(ptr_st_xchngbook->l_stp_lss_tgr == 0 && ptr_st_xchngbook->c_slm_flg == STOP_LOSS)
    {
      fn_errlog( c_ServiceName,"S31715"
          ,"Stop Loss trigger price cannot be Zero for Stop Loss Order.",ptr_st_err_msg->c_err_msg  );
      return FAILURE;
    }

		/**Ver 1.3 **/
		/** if(DEBUG_MSG_LVL_0 ) Commented in Ver 7.3 **/
		if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
		{
			fn_userlog(c_ServiceName,"Issue of Price Band:%c:",ptr_st_cntrct_qt->c_prd_typ);
		}

	  if ( ptr_st_cntrct_qt->c_prd_typ != 'O')
		{
			/*** Ver 8.1 Starts ***/
      if ( ptr_st_xchngbook->c_spl_flg == ROLLOVER_WITH_SPREAD)
      {
        ptr_st_cntrct_qt->c_prd_typ = 'S';
        if ( i_rollover_ord_ind != 2 )
        {
          i_returncode = fn_vrfy_spnprc_band_mkt_rws( c_ServiceName,
                                                      ptr_st_cntrct_qt->c_xchng_cd,
                                                      ptr_st_cntrct_qt->c_prd_typ,
                                                      ptr_st_cntrct_qt->c_undrlyng,
                                                      ptr_st_xchngbook->l_ord_lmt_rt,
                                                      c_spd_expry_dt1,
                                                      c_spd_expry_dt2,
                                                      ptr_st_err_msg
                                                    );
					if ( i_returncode == -1 )
        	{
            fn_errlog( c_ServiceName, "B28006",DEFMSG,ptr_st_err_msg->c_err_msg);
            return FAILURE;
        	}
        }
        ptr_st_cntrct_qt->c_prd_typ = 'F';
      }
      else
      {
      /*** Ver 8.1 Ends ***/
		  /********* Ver 2.5 Started ******************/	

			if ( c_exg_crrnt_stts == EXCHANGE_OPEN )
			{
				rtrim(ptr_st_cntrct_qt->c_expry_dt);
				if(DEBUG_MSG_LVL_3) {
				fn_userlog(c_ServiceName,"ptr_st_cntrct_qt->c_expry_dt:%s:",ptr_st_cntrct_qt->c_expry_dt);
				}

 
				i_returncode = fn_vrfy_spnprc_band_mkt( c_ServiceName,
                                            ptr_st_cntrct_qt->c_xchng_cd,
                                            ptr_st_cntrct_qt->c_prd_typ,
                                            ptr_st_cntrct_qt->c_undrlyng,
                                            ptr_st_xchngbook->l_ord_lmt_rt,
                                            ptr_st_cntrct_qt->c_expry_dt,
                                            ptr_st_err_msg
                                            );
      	if ( i_returncode == -1 )
      	{
								fn_errlog( c_ServiceName, "B28006",DEFMSG,ptr_st_err_msg->c_err_msg);
								return FAILURE;
      	}

			}
		  /********* Ver 2.5 Ends    ******************/	
			else
			{
							i_returncode = fn_vrfy_spnprc_band( c_ServiceName,
																					ptr_st_cntrct_qt->c_xchng_cd,
																					ptr_st_cntrct_qt->c_prd_typ,
																					ptr_st_cntrct_qt->c_undrlyng,
																					ptr_st_xchngbook->l_ord_lmt_rt,
																					ptr_st_cntrct_qt->l_base_prc,
																					ptr_st_err_msg
																				);
						 if ( i_returncode == -1 )
						 {
								fn_errlog( c_ServiceName, "B28006",DEFMSG,ptr_st_err_msg->c_err_msg);
								return FAILURE;
						 }
			}
			}             /*** Ver 8.1 Bracket Closed ***/
		 } 

  }
 	else if ( ptr_st_xchngbook->c_slm_flg == MARKET )
  {
    /** Market orders can be placed only when the Exchange is open **/
    if ( c_exg_crrnt_stts != EXCHANGE_OPEN )
    {
      if( c_exg_extnd_stts != EXCHANGE_OPEN )
      {
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }

      else if (c_fum_mrkt_typ == NORMAL_MRKT )      /***  Underlying Level Check  ***/
      {
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
      else if ( c_fcm_mrkt_typ == NORMAL_MRKT )     /***  Contract Level Check  ***/
      {
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
    }

    /** Limit rate should be Zero for Market orders **/

    if ( ptr_st_xchngbook->l_ord_lmt_rt != 0 )
    {
      fn_errlog( c_ServiceName, "B28521",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }

    if ( ptr_st_xchngbook->l_quote == 0 )
    {

      fn_errlog( c_ServiceName, "B28540",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
  }

  if((ptr_st_xchngbook->c_slm_flg == MARKET  || ptr_st_xchngbook->c_slm_flg == LIMIT) && ptr_st_xchngbook->l_stp_lss_tgr !=0)
  {
    fn_errlog( c_ServiceName,"S31720","Cannot enter Stop Loss trigger price for Market and Limit Orders.",ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }


  if ( ptr_st_xchngbook->c_ord_typ == IMMEDIATE_OR_CANCEL  )
  {
    /** IOC orders can be placed only when the Exchange is open **/

    if ( c_exg_crrnt_stts != EXCHANGE_OPEN )
    {
      if( c_exg_extnd_stts != EXCHANGE_OPEN )
      {
        fn_errlog( c_ServiceName, "B28011",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }

      else if (c_fum_mrkt_typ == NORMAL_MRKT )      /** Underlying Level Check **/
      {
        fn_userlog( c_ServiceName,"This Underlying Is Disabled For Extended Market Hours");
        fn_errlog( c_ServiceName, "B28011",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
      else if ( c_fcm_mrkt_typ == NORMAL_MRKT )     /** Contract Level Check **/
      {
        fn_userlog( c_ServiceName,"This Contract Is Disabled For Extended Market Hours");
        fn_errlog( c_ServiceName, "B28011",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
    }
  }

	/** Disclosed Quantity cannot be greater than the order qty **/

  if ( ptr_st_xchngbook->l_dsclsd_qty > ptr_st_xchngbook->l_ord_tot_qty )
  {
      fn_errlog( c_ServiceName, "B28522",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
  }

  if ( ptr_st_xchngbook->l_stp_lss_tgr != 0 )
  {
    if ( ptr_st_xchngbook->c_ordr_flw == BUY )
    {
      /** Stop loss trigger price cannot be greater than limit rate **/
      /** for Buy order                                             **/

      if ( ptr_st_xchngbook->l_stp_lss_tgr > ptr_st_xchngbook->l_ord_lmt_rt )
      {
        fn_errlog( c_ServiceName, "B28524",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }

      /** Stop loss trigger price cannot be less than last traded   **/
      /** price for Buy order                                       **/

      if ( ptr_st_xchngbook->l_stp_lss_tgr < ptr_st_cntrct_qt->l_lst_trdd_prc )
      {
        fn_errlog( c_ServiceName, "B22009",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
    }
    if ( ptr_st_xchngbook->c_ordr_flw == SELL )
    {
      /** Stop loss trigger price cannot be less  than limit rate   **/
      /** for Sell order                                            **/

      if ( ptr_st_xchngbook->l_stp_lss_tgr < ptr_st_xchngbook->l_ord_lmt_rt )
      {
        fn_errlog( c_ServiceName, "B28525",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }

      /** Stop loss trigger price cannot be greater than last traded **/
      /** price for Sell order                                       **/

      if ( ptr_st_xchngbook->l_stp_lss_tgr > ptr_st_cntrct_qt->l_lst_trdd_prc )
      {
        fn_errlog( c_ServiceName, "B22010",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
    }
  }

	if( (ptr_st_xchngbook->l_dsclsd_qty != 0 ) && ( ptr_st_xchngbook->l_dsclsd_qty <(( d_dsclsd_prcntg / 100 ) * ptr_st_xchngbook->l_ord_tot_qty )))
  {
      fn_errlog( c_ServiceName, "B28526",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
  }

	return SUCCESS;
}

int fn_check_ord_spn( char *c_ServiceName,
                  		struct st_cntrt_gen_inf *ptr_st_cntrct_gen_inf,
                  		struct st_xchngbook *ptr_st_xchngbook,
                  		struct st_orderbook *ptr_st_ordbook,
                  		struct st_err_msg *ptr_st_err_msg )
{
 
  char c_mkt_allwd_flg;
  char c_err_msg[256];
  char c_exg_crrnt_stts ;		/*** Ver 1.9 ***/
  char c_exg_ovrnght_stts;	/*** Ver 1.9 ***/
  int i_flg = 0;						/*** Ver 1.9 ***/


  /** Order quantity should be in Multiples of Contract Lot size.   **/

  if ( ptr_st_xchngbook->l_ord_tot_qty % ptr_st_cntrct_gen_inf->l_min_lot_qty != 0 )
  {
    fn_errlog( c_ServiceName, "B28529", DEFMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

 	/** Disclosed quantity should be in Multiples of Contract Lot size **/

  if ( ptr_st_xchngbook->l_dsclsd_qty % ptr_st_cntrct_gen_inf->l_min_lot_qty != 0 )
  {
    fn_errlog( c_ServiceName, "B28530", DEFMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  /** Limit rate should be in Multiples of Contract Tick size **/
  if ( (strncmp(ptr_st_xchngbook->c_xchng_rmrks, "SLTP FuturePlus to Futures" , 26)!=0 ) &&
       (strncmp( ptr_st_xchngbook->c_xchng_rmrks, "OptionPlus to Options" , 21)!=0 )
      ) /** If condition added Ver 6.6 **/
  {
  	if ( ptr_st_xchngbook->l_ord_lmt_rt % ptr_st_cntrct_gen_inf->l_tick_sz != 0 )
  	{
    	fn_errlog( c_ServiceName, "B28531", DEFMSG, ptr_st_err_msg->c_err_msg );
    	return FAILURE;
  	}
  }

 	/** Stop loss Trigger Price should be in Multiples of Contract Tick size **/

  if ( ptr_st_xchngbook->l_stp_lss_tgr % ptr_st_cntrct_gen_inf->l_tick_sz != 0 )
  {
    fn_errlog( c_ServiceName, "B28532", DEFMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  if ( ptr_st_xchngbook->c_ord_typ == IMMEDIATE_OR_CANCEL  )
  {
    if ( ptr_st_xchngbook->l_stp_lss_tgr != 0 )
    {
      fn_errlog( c_ServiceName, "B28012", DEFMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }
  }

	if(DEBUG_MSG_LVL_3)
	{
 		fn_userlog(c_ServiceName,"PIPE ID IS :%s:",ptr_st_xchngbook->c_pipe_id);
	}

  if ( ptr_st_xchngbook->c_slm_flg == MARKET )
  {
    EXEC SQL
      SELECT  OPM_MKT_ALLWD
      INTO    :c_mkt_allwd_flg
      FROM    OPM_ORD_PIPE_MSTR
      WHERE   OPM_PIPE_ID = :ptr_st_xchngbook->c_pipe_id;

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31725", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

    if ( c_mkt_allwd_flg == NO )
    {
      if(ptr_st_xchngbook->c_spl_flg != SYSTEM_SQUAREOFF || 
         ptr_st_xchngbook->c_spl_flg != IMTM_SYS_SQUAREOFF  || 
         ptr_st_xchngbook->c_spl_flg != LMTNEG_SYS_SQUAREOFF ||
				 ptr_st_xchngbook->c_spl_flg != PHYSICAL_DLVRY_SQOFF 
        )  /*** Check added for IMTM_SYS_SQUAREOFF and LMTNEG_SYS_SQUAREOFF in Ver 4.9 ***/ 
					 /** Check added for PHYSICAL_DLVRY_SQOFF in Ver 9.0 ***/
      {
        fn_errlog( c_ServiceName, "B28001", DEFMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
    }
  }


  if( DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName,"Exchange code is :%s:", ptr_st_xchngbook->c_xchng_cd );
    fn_userlog( c_ServiceName,"Product type is :%c:", ptr_st_ordbook->c_prd_typ );
    fn_userlog( c_ServiceName,"Underlying is :%s:", ptr_st_ordbook->c_undrlyng );
  }
 /* 7.9 */
  EXEC SQL
    SELECT FUM_FREEZE_QTY
    INTO   :sql_fum_freeze_qty
    FROM   FUM_FO_UNDRLYNG_MSTR
    WHERE  FUM_XCHNG_CD 	= :ptr_st_xchngbook->c_xchng_cd
 /* AND    FUM_PRDCT_TYP 	= decode(:ptr_st_ordbook->c_prd_typ,'P','F',:ptr_st_ordbook->c_prd_typ) * Commented in Ver 2.2 **/ 
 /* AND    FUM_PRDCT_TYP  = decode(:ptr_st_ordbook->c_prd_typ,'P','F','U','F',:ptr_st_ordbook->c_prd_typ)* Ver 2.2 Commented
In  Ver 4.1*/
    AND    FUM_PRDCT_TYP  = DECODE(:ptr_st_ordbook->c_prd_typ,'P','F','U','F','I','O',:ptr_st_ordbook->c_prd_typ) /* Ver 4.1
*/
    AND    FUM_UNDRLYNG 	=	:ptr_st_ordbook->c_undrlyng;

  if ( SQLCODE != 0 )
  {
     fn_errlog( c_ServiceName, "S31730", SQLMSG, ptr_st_err_msg->c_err_msg );
     return FAILURE;
  }

  if(ptr_st_xchngbook->c_spl_flg != SYSTEM_SQUAREOFF) /*** if condition added in Ver 10.5 ***/
  {
	if( ptr_st_xchngbook->l_ord_tot_qty > sql_fum_freeze_qty && sql_fum_freeze_qty != 0 )
  {
    fn_errlog( c_ServiceName, "B66071", DEFMSG, ptr_st_err_msg->c_err_msg );
    sprintf(ptr_st_err_msg->c_err_msg,"%s:%ld",ptr_st_err_msg->c_err_msg,sql_fum_freeze_qty);
    return FAILURE;
  }
 }
	/*** Ver 1.9 Starts ***/
 /* 7.9 */
  EXEC SQL
    SELECT EXG_CRRNT_STTS,
           EXG_TMP_MKT_STTS
    INTO   :c_exg_crrnt_stts,
           :c_exg_ovrnght_stts
    FROM   EXG_XCHNG_MSTR
    WHERE  EXG_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31735",SQLMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }


  if( DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName," c_exg_ovrnght_stts  is :%c:", c_exg_ovrnght_stts);
    fn_userlog( c_ServiceName," c_exg_crrnt_stts is :%c:", c_exg_crrnt_stts);
    fn_userlog( c_ServiceName,"ptr_st_ordbook->c_expry_dt is :%s:", ptr_st_ordbook->c_expry_dt );
  }


  if( c_exg_ovrnght_stts == EXCHANGE_OPEN && c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY)
  {
		if( DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName," ---Inside Comparison of Overnight COndition ---");
		}

    i_flg = 0 ;
 /* 7.9 */
    EXEC SQL
    SELECT 1
    INTO   :i_flg
    FROM   DUAL
    WHERE  TO_DATE(SYSDATE , 'DD-Mon-YYYY') >= TO_DATE(:ptr_st_ordbook->c_expry_dt, 'DD-Mon-YYYY') ;

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog( c_ServiceName, "S31740",SQLMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }

		if( DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName," i_flg is :%d:", i_flg);
		}


    if (  i_flg == 1 )
    {
        fn_userlog( c_ServiceName," Cannot place an  order expired contract ");
        fn_errlog( c_ServiceName, "B56024",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
    }

  }

	/*** Ver 1.9 Ends ***/
	
  return SUCCESS;
}

int fn_cal_plc_pos	(
              				char  *c_ServiceName,
											char	*c_err_msg,
                 			struct st_pstn_actn *ptr_st_pstn_actn
               			)
{
	char c_fod_fc_flag_f='F';       /* ver 7.9 */
	char c_exg_mkt_typ='D';         /* ver 7.9 */ 
   char c_ucc_cd[13] = "\0";       /*** Added in VER 13.0  ***/
	char  c_upos_avl;
	char  c_expry_dt_MTM[22];
  char 	c_currexp_dt[23];  
	char  c_bnk_accnt_MTM[13];
	char  c_time[21];
	char  c_filetime[9];
	char  c_filename[100];
	char  c_filedata[1000];
	char c_xchng_date[ 11+1 ];     /** Ver 1.2 **/
  char c_clm_mtch_accnt[10+1];   /** Ver 1.2 **/
  char c_xchng_cd[3+1];          /** Ver 1.2 **/
  char c_rqst_type;              /** Ver 1.2 **/

  varchar c_trade_dt[12];

	int i_returncode;

  long  li_grpid          = 0;   /** Ver 1.2 **/
	long	l_expsr_MTM				= 0;
	long	l_min_expsr_MTM		= 0;
	long	l_span_val_MTM		= 0;
	long	l_span_mltplr_MTM	= 0;
	long 	l_can_qty 				= 0;

	double d_bft_amt_MTM 		= 0.0;
	double d_alctd_amt_MTM 	= 0.0;
	double d_plg_amt_MTM 		=	0.0;

	double d_tot_shr_plgd_amt_MTM = 0.0;    /** Ver 1.2 **/
  double d_nwb_amt_MTM    = 0.0;          /** Ver 1.2 **/
  double d_eab_amt_MTM    = 0.0;          /** Ver 1.2 **/
  double d_current_limit  = 0.0;          /** Ver 1.2 **/
  double d_available      = 0.0;          /** Ver 1.2 **/
  double d_shortage       = 0.0;          /** Ver 1.2 **/
	double 	d_opt_prmum 	= 0.0;						/** Ver 2.0 **/
  double d_fdr_amt_MTM = 0.0;             /** Ver 5.2 **/
  double d_cdx_plg_amt  = 0.0;            /** Ver 12.7 **/
  double d_mco_plg_amt    = 0.0;          /** Ver 12.7 **/

  char c_extra_update='\0'; /***** ver 9.7 *********/
  double d_trigger_prc=0.0; /** ver 9.7 ***/
 
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Inside Function fn_cal_pos.");
	}

	rtrim(ptr_st_pstn_actn->c_cln_mtch_accnt);
 	rtrim(ptr_st_pstn_actn->c_undrlyng);
 	rtrim(ptr_st_pstn_actn->c_expry_dt);
 	rtrim(ptr_st_pstn_actn->c_ref_rmrks);

  fn_init_ddr_val ( ptr_st_pstn_actn->c_rout_crt );

  if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
  {
    fn_userlog ( c_ServiceName,"c_cln_mtch_accnt :%s:",ptr_st_pstn_actn->c_cln_mtch_accnt );
    fn_userlog ( c_ServiceName,"c_undrlyng       :%s:",ptr_st_pstn_actn->c_undrlyng );
    fn_userlog ( c_ServiceName,"l_exec_qty       :%ld:",ptr_st_pstn_actn->l_exec_qty );
    fn_userlog ( c_ServiceName,"d_add_mrgn_amt   :%lf:",ptr_st_pstn_actn->d_add_mrgn_amt );
	}

	/** if(DEBUG_MSG_LVL_0) Commented in ver 7.3 **/
  if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
  {
    fn_userlog ( c_ServiceName,"c_user_id        :%s:",ptr_st_pstn_actn->c_user_id );
    fn_userlog ( c_ServiceName,"l_session_id      :%ld:",ptr_st_pstn_actn->l_session_id );
    fn_userlog ( c_ServiceName,"c_xchng_cd       :%s:",ptr_st_pstn_actn->c_xchng_cd );
    fn_userlog ( c_ServiceName,"c_prd_typ        :%c:",ptr_st_pstn_actn->c_prd_typ );
    fn_userlog ( c_ServiceName,"c_expry_dt       :%s:",ptr_st_pstn_actn->c_expry_dt );
    fn_userlog ( c_ServiceName,"c_exrc_typ       :%c:",ptr_st_pstn_actn->c_exrc_typ );
    fn_userlog ( c_ServiceName,"l_actn_typ       :%ld:",ptr_st_pstn_actn->l_actn_typ );
    fn_userlog ( c_ServiceName,"c_trnsctn_flw    :%c:",ptr_st_pstn_actn->c_trnsctn_flw );
    fn_userlog ( c_ServiceName,"l_orgnl_qty      :%ld:",ptr_st_pstn_actn->l_orgnl_qty );
    fn_userlog ( c_ServiceName,"l_orgnl_rt       :%ld:",ptr_st_pstn_actn->l_orgnl_rt );
    fn_userlog ( c_ServiceName,"l_new_qty        :%ld:",ptr_st_pstn_actn->l_new_qty );
    fn_userlog ( c_ServiceName,"l_new_rt         :%ld:",ptr_st_pstn_actn->l_new_rt );
    fn_userlog ( c_ServiceName,"l_exec_rt        :%ld:",ptr_st_pstn_actn->l_exec_rt );
    fn_userlog ( c_ServiceName,"l_fresh_qty      :%ld:",ptr_st_pstn_actn->l_fresh_qty );
    fn_userlog ( c_ServiceName,"l_cover_qty      :%ld:",ptr_st_pstn_actn->l_cover_qty );
    fn_userlog ( c_ServiceName,"l_curr_rt        :%ld:",ptr_st_pstn_actn->l_curr_rt );
    fn_userlog ( c_ServiceName,"c_ref_rmrks      :%s:",ptr_st_pstn_actn->c_ref_rmrks );
    fn_userlog ( c_ServiceName,"c_prc_flg      :%c:",ptr_st_pstn_actn->c_nkd_blkd_flg ); 
  }
	
	c_upos_avl = 'Y';

	EXEC SQL
    SELECT  FUS_CLM_MTCH_ACCNT,
            FUS_XCHNG_CD,
            FUS_INDSTK,
            FUS_UNDRLYNG,
            FUS_UIBUY_QTY,
            FUS_UIBUY_VAL,
            FUS_UISELL_QTY,
            FUS_UISELL_VAL,
            FUS_UEXBUY_QTY,
            FUS_UEXBUY_VAL,
            FUS_UEXSELL_QTY,
            FUS_UEXSELL_VAL,
            FUS_UBUY_EXCTD_QTY,
            FUS_USELL_EXCTD_QTY,
            FUS_UOPNPSTN_FLW,
            FUS_UOPNPSTN_QTY,
            FUS_UOPNPSTN_VAL,
            FUS_UMTM_OPN_VAL,
            FUS_INITIAL_MRGN,
            FUS_SPAN_WEMULT_MRGN,
            FUS_EBA_EXPR_MRGN,
            FUS_USPAN_WENOV_MRGN,
            FUS_MULTIPLIER,
            FUS_USPAN_NENOV_MRGN,
            FUS_NET_OPTN_VAL,
            NVL(FUS_MIN_MRGN,0),
            NVL(FUS_MTM_FLG,'O'),
            FUS_BLCKD_PL,
            FUS_REQD_INITIAL_MRGN
    INTO    :st_undpstn_crrnt.c_cln_mtch_accnt,
            :st_undpstn_crrnt.c_xchng_cd,
            :st_undpstn_crrnt.c_indstk,
            :st_undpstn_crrnt.c_undrlyng,
            :st_undpstn_crrnt.l_uibuy_qty,
            :st_undpstn_crrnt.d_uibuy_val,
            :st_undpstn_crrnt.l_uisell_qty,
            :st_undpstn_crrnt.d_uisell_val,
            :st_undpstn_crrnt.l_uexbuy_qty,
            :st_undpstn_crrnt.d_uexbuy_val,
            :st_undpstn_crrnt.l_uexsell_qty,
            :st_undpstn_crrnt.d_uexsell_val,
            :st_undpstn_crrnt.l_ubuy_exctd_qty,
            :st_undpstn_crrnt.l_usell_exctd_qty,
            :st_undpstn_crrnt.c_uopnpstn_flw,
            :st_undpstn_crrnt.l_uopnpstn_qty,
						:st_undpstn_crrnt.d_uopnpstn_val,
            :st_undpstn_crrnt.d_umtm_opn_val,
            :st_undpstn_crrnt.d_initial_mrgn,
            :st_undpstn_crrnt.d_span_wemult_mrgn,
            :st_undpstn_crrnt.d_eba_expr_mrgn,
            :st_undpstn_crrnt.d_uspan_wenov_mrgn,
            :st_undpstn_crrnt.d_multpr,
            :st_undpstn_crrnt.d_uspan_nenov_mrgn,
            :st_undpstn_crrnt.d_net_optn_val,
            :st_undpstn_crrnt.d_min_mrgn,
            :st_undpstn_crrnt.c_mtm_flg,
            :st_undpstn_crrnt.d_blckd_pl,
            :st_undpstn_crrnt.d_reqd_initial_mrgn
    FROM   	FUS_FO_UNDRLYNG_SPN_PSTN
    WHERE 	FUS_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND   	FUS_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
    AND   	FUS_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng;
	
  	if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  	{
    	fn_errlog ( c_ServiceName, "S31745", SQLMSG, c_err_msg );
			return -1;
  	}

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName, "1. st_undpstn_crrnt.c_mtm_flg = :%c:", st_undpstn_crrnt.c_mtm_flg );
		}

	/**** If a position doesnot exists, initialise the position values to default ****/

  if ( SQLCODE == NO_DATA_FOUND )
  {
    strcpy( st_undpstn_crrnt.c_cln_mtch_accnt, ptr_st_pstn_actn->c_cln_mtch_accnt );
    strcpy( st_undpstn_crrnt.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
    strcpy( st_undpstn_crrnt.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
    st_undpstn_crrnt.c_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
    st_undpstn_crrnt.l_uibuy_qty= 0;
    st_undpstn_crrnt.d_uibuy_val= 0;
    st_undpstn_crrnt.l_uisell_qty= 0;
    st_undpstn_crrnt.d_uisell_val= 0;
    st_undpstn_crrnt.l_uexbuy_qty= 0;
    st_undpstn_crrnt.d_uexbuy_val= 0;
    st_undpstn_crrnt.l_uexsell_qty= 0;
    st_undpstn_crrnt.d_uexsell_val= 0;
    st_undpstn_crrnt.l_ubuy_exctd_qty= 0;
    st_undpstn_crrnt.l_usell_exctd_qty = 0;
    st_undpstn_crrnt.c_uopnpstn_flw = 'N';
    st_undpstn_crrnt.l_uopnpstn_qty = 0;
    st_undpstn_crrnt.d_uopnpstn_val	= 0;
    st_undpstn_crrnt.d_umtm_opn_val = 0;
		st_undpstn_crrnt.d_initial_mrgn	=	0;
		st_undpstn_crrnt.d_span_wemult_mrgn	=	0;
		st_undpstn_crrnt.d_eba_expr_mrgn	=	0;
		st_undpstn_crrnt.d_uspan_wenov_mrgn	=	0;
		st_undpstn_crrnt.d_multpr	=	0;
		st_undpstn_crrnt.d_uspan_nenov_mrgn	=	0;
		st_undpstn_crrnt.d_net_optn_val	=	0;
		st_undpstn_crrnt.d_min_mrgn	=	0;
		st_undpstn_crrnt.d_blckd_pl	=	0;
		st_undpstn_crrnt.d_reqd_initial_mrgn	=	0;
    st_undpstn_crrnt.d_umtm_opn_val= 0;
    c_mtm_flag = 'O';
    c_upos_avl = 'N';
	}

	if ( ( c_mtm_flag == UNDER_MTM ) && ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) && ( ptr_st_pstn_actn->l_session_id != 0 ))
 	{
    fn_errlog(c_ServiceName, "B28009", DEFMSG, c_err_msg );
		return -1;
  }

	/******** Set UPOS_to_be fields to default ********/

  strcpy( st_undpstn_tobe.c_cln_mtch_accnt, ptr_st_pstn_actn->c_cln_mtch_accnt );
  strcpy( st_undpstn_tobe.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
  strcpy( st_undpstn_tobe.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
  st_undpstn_tobe.c_indstk  					= ptr_st_pstn_actn->c_ctgry_indstk;
  st_undpstn_tobe.l_uibuy_qty					= 0;
  st_undpstn_tobe.d_uibuy_val					= 0;
  st_undpstn_tobe.l_uisell_qty				= 0;
  st_undpstn_tobe.d_uisell_val				= 0;
  st_undpstn_tobe.l_uexbuy_qty				= 0;
  st_undpstn_tobe.d_uexbuy_val				= 0;
  st_undpstn_tobe.l_uexsell_qty				= 0;
  st_undpstn_tobe.d_uexsell_val				= 0;
  st_undpstn_tobe.l_ubuy_exctd_qty 		= 0;
  st_undpstn_tobe.l_usell_exctd_qty 	= 0;
  st_undpstn_tobe.c_uopnpstn_flw 			= 'N';
  st_undpstn_tobe.l_uopnpstn_qty 			= 0;
  st_undpstn_tobe.d_uopnpstn_val			= 0;
  st_undpstn_tobe.d_umtm_opn_val 			= 0;
	st_undpstn_tobe.d_initial_mrgn 			=	st_undpstn_crrnt.d_initial_mrgn ;
 	st_undpstn_tobe.d_span_wemult_mrgn	= st_undpstn_crrnt.d_span_wemult_mrgn ;
 	st_undpstn_tobe.d_eba_expr_mrgn  		= st_undpstn_crrnt.d_eba_expr_mrgn ;
 	st_undpstn_tobe.d_uspan_wenov_mrgn 	= st_undpstn_crrnt.d_uspan_wenov_mrgn ;
 	st_undpstn_tobe.d_multpr 						=	st_undpstn_crrnt.d_multpr ;
 	st_undpstn_tobe.d_uspan_nenov_mrgn 	=	st_undpstn_crrnt.d_uspan_nenov_mrgn	;
 	st_undpstn_tobe.d_net_optn_val 			=	st_undpstn_crrnt.d_net_optn_val ;
 	st_undpstn_tobe.d_min_mrgn 					=	st_undpstn_crrnt.d_min_mrgn ;
 	st_undpstn_tobe.d_blckd_pl 					=	st_undpstn_crrnt.d_blckd_pl ;
 	st_undpstn_tobe.d_reqd_initial_mrgn =	st_undpstn_crrnt.d_reqd_initial_mrgn ;
 	st_undpstn_tobe.d_umtm_opn_val			=	0;
	st_undpstn_tobe.c_mtm_flg						=	st_undpstn_crrnt.c_mtm_flg;

	d_opt_prmum	=	0.0;

	 if(DEBUG_MSG_LVL_3)
	 {
   		fn_userlog(c_ServiceName, "2. before actn_spn st_undpstn_crrnt.c_mtm_flg = :%c:", st_undpstn_crrnt.c_mtm_flg );
   		fn_userlog(c_ServiceName, "2. before actn_spn st_undpstn_tobe.c_mtm_flg = :%c:", st_undpstn_tobe.c_mtm_flg);
   		fn_userlog(c_ServiceName, "2. before actn_spn ptr_st_pstn_actn->c_nkd_blkd_flg = :%c:", ptr_st_pstn_actn->c_nkd_blkd_flg);
	 }


	i_returncode  = fn_call_actn_spn (	c_ServiceName,
																			c_pipe_id,
                                    	ptr_st_pstn_actn,
                                    	&st_undpstn_crrnt,
                                    	&st_undpstn_tobe,
                                    	ptr_st_err_msg
																	 );

  if ( i_returncode != 0 )
  {
		switch( i_returncode )
		{
			case INSUFFICIENT_LIMITS	:

  			if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
  			{		
					fn_userlog(c_ServiceName,"SPAN - Inside INSUFFICIENT_LIMITS.");
    		}
				fn_errlog(c_ServiceName, "B21007", DEFMSG, c_err_msg );
			
				return	INSUFFICIENT_LIMITS;

			break;

			/*** Ver 1.2 ERROR Handling for MAX Pcket size	***/

			 case MAX_PACKET_SIZE			:
  			if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
  			{
					fn_userlog(c_ServiceName,"SPAN - Inside MAX_PACKET_SIZE.");
        }
				fn_errlog(c_ServiceName, "S31750", DEFMSG, c_err_msg );
				return MAX_PACKET_SIZE;
				break;

			/***** Ver 9.0 added ************/ 
			 case PHYDLVRY_MTM :
				if(DEBUG_MSG_LVL_3)
				{
					fn_errlog(c_ServiceName, "B28009", DEFMSG, c_err_msg );
					return -1;	
				} 
				break;

			default :
				fn_errlog( c_ServiceName, "S31755"," Error From fn_call_actn_spn", c_err_msg );	
				
		}

   	return -1;
  }

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName, "3. After actn_spn st_undpstn_crrnt.c_mtm_flg = :%c:", st_undpstn_crrnt.c_mtm_flg );
  	fn_userlog(c_ServiceName, "3. after actn_spn st_undpstn_tobe.c_mtm_flg = :%c:", st_undpstn_tobe.c_mtm_flg);

		fn_userlog(c_ServiceName,"st_usrprfl.c_user_id Is :%s:",st_usrprfl.c_user_id);
		fn_userlog(c_ServiceName,"st_usrprfl.l_session_id Is :%ld:",st_usrprfl.l_session_id);
	}

	if ( (strcmp(st_usrprfl.c_user_id,"system") == 0) && st_usrprfl.l_session_id  ==  0 )
	{

		/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
  	if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
		{
			fn_userlog(c_ServiceName,"SPAN - Inside Pre-SquareOff Case.");
		}
    EXEC SQL
      SELECT  NVL(FMM_EXPSR,0),
              NVL(FMM_MIN_EXPSR,0),
              NVL(FMM_SPAN_VAL,0),
              NVL(FMM_SPN_MULTPLR,0)
      INTO    :l_expsr_MTM,
              :l_min_expsr_MTM,
              :l_span_val_MTM,
              :l_span_mltplr_MTM
      FROM   FMM_FO_MRGN_MSTR
      WHERE  FMM_PRDCT_TYP =:c_fod_fc_flag_f   /* 7.9  Hard Code Value Replace With Bind Variable  */ 
			AND    FMM_XCHNG_CD  = :ptr_st_pstn_actn->c_xchng_cd      /*** Ver 1.4 ***/
      AND    FMM_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
      AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
                                   FROM    FCB_FO_CLN_BSKT_ALLTD
                                   WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                   FROM    CLM_CLNT_MSTR
                                   WHERE   CLM_MTCH_ACCNT =:ptr_st_pstn_actn->c_cln_mtch_accnt)) ;
    if ( SQLCODE != 0 )
    {
      fn_userlog(c_ServiceName,"COULDN'T INSERT DATA INTO IMTM REPORT TABLE I");
      fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
    }
 
    /*** ver 9.7 starts ********/
      EXEC SQL
      SELECT NVL(FCP_TRG_PRC,0)
      INTO   :d_trigger_prc
      FROM   FCP_FO_SPN_CNTRCT_PSTN
      WHERE  FCP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
      AND    FCP_XCHNG_CD=:ptr_st_pstn_actn->c_xchng_cd
      AND    FCP_UNDRLYNG=:ptr_st_pstn_actn->c_undrlyng
      AND    FCP_PRDCT_TYP=:ptr_st_pstn_actn->c_prd_typ
      AND    FCP_EXPRY_DT=:ptr_st_pstn_actn->c_expry_dt
      AND    FCP_STRK_PRC=:ptr_st_pstn_actn->l_strike_prc
      AND    FCP_EXER_TYP=:ptr_st_pstn_actn->c_exrc_typ
      AND    FCP_OPT_TYP=:ptr_st_pstn_actn->c_opt_typ;
 
    if ( SQLCODE != 0 )
    {
      fn_userlog(c_ServiceName,"SQLCODE IS TRG PRC |%ld|",SQLCODE);
    }
   /** ver 9.7 ends *********/

    d_fdr_amt_MTM = 0;  /** Ver 5.2 **/
 /* 7.9 */
    EXEC SQL
      SELECT  FAB_BNK_ACCNT,
              FAB_ALCTD_AMT,
              FAB_BFT_AMT,
              FAB_PLG_AMT,
              NVL(FAB_NWB_AMT,0),     /* Ver 1.2 */
              NVL(FAB_FDR_AMT,0)      /* Ver 5.2 */
      INTO    :c_bnk_accnt_MTM,
              :d_alctd_amt_MTM,
              :d_bft_amt_MTM,
              :d_plg_amt_MTM,
              :d_nwb_amt_MTM,          /** Ver 1.2 **/
              :d_fdr_amt_MTM           /** Ver 5.2 **/ 
      FROM    FAB_FO_ALC_BFT_SMRY
      WHERE   FAB_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

    if ( SQLCODE != 0 )
    {
      fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
    }
	
		/******** Ver 1.2.Starts ********/

    d_tot_shr_plgd_amt_MTM  = 0;
    d_eab_amt_MTM           = 0;
 /* 7.9 */
    EXEC SQL
         SELECT  NVL(EAB_PLG_AMT,0) * 100 /* To be inserted in paise */
         INTO    :d_eab_amt_MTM
         FROM    EAB_EQ_ALC_BFT_SMRY
         WHERE   EAB_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

    if ( SQLCODE != 0 )
    {
       fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
    }

    /***** Ver 12.7 Starts *****/

      EXEC SQL
      SELECT  NVL(CAB_PLG_AMT,0)*100
      INTO    :d_cdx_plg_amt
      FROM    CAB_CDX_ALC_BFT_SMRY
      WHERE   CAB_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
       fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
      }

      fn_userlog(c_ServiceName,"d_cdx_plg_amt:%lf:",d_cdx_plg_amt);

      EXEC SQL
      SELECT  NVL(CAB_PLG_AMT,0)
      INTO    :d_mco_plg_amt
      FROM    CAB_COD_ALC_BFT_SMRY
      WHERE   CAB_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
       fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
      }

      fn_userlog(c_ServiceName,"d_mco_plg_amt:%lf:",d_mco_plg_amt);

    /***** Ver 12.7 Ends *****/

    /**  d_tot_shr_plgd_amt_MTM  = d_nwb_amt_MTM + d_plg_amt_MTM + d_eab_amt_MTM; ** Ver 12.7 **/

    d_tot_shr_plgd_amt_MTM  = d_nwb_amt_MTM + d_plg_amt_MTM + d_eab_amt_MTM + d_cdx_plg_amt + d_mco_plg_amt; /** Added in Ver 12.7 **/

    /*** Get the current Limit For this Match ***/

    MEMSET(c_clm_mtch_accnt);
    MEMSET(c_xchng_cd);
    MEMSET(c_xchng_date);

    strcpy(c_clm_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
    strcpy(c_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);

    EXEC SQL
      /*** SELECT  EXG_NXT_TRD_DT Commented In Ver 1.9 ***/
      /*** SELECT  GREATEST(exg_nxt_trd_dt,exg_tmp_trd_dt)*** Ver 1.9 Reverted In Ver 1.9 Bug Fix**/
      SELECT  EXG_NXT_TRD_DT /*** Reverted In Ver 1.9 Bug Fix ***/
      INTO    :c_xchng_date
      FROM    EXG_XCHNG_MSTR
      WHERE   EXG_XCHNG_CD = :c_xchng_cd;

    if( SQLCODE != 0 )
    {
       fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
    }

    c_rqst_type = LIMIT_X ;
    li_grpid  = 0 ;

    EXEC SQL
      EXECUTE
        BEGIN
          LIMIT_CAL
               (:c_clm_mtch_accnt,
                :c_xchng_date,
                :c_rqst_type,
                :li_grpid,
                :c_xchng_cd,
                :d_current_limit,
                :i_returncode
                );
           END;
  END-EXEC;

    if ( i_returncode == -1 )
    {
       fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
    }
    if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog ( c_ServiceName, " Limit for Match Account |%s| is |%lf|",c_clm_mtch_accnt,d_current_limit);
		}
    /** Calculating Shortage for Report **/
		 /*** Notional loss not blocked so it should  not in available margin      *****/
   /***  d_available = st_undpstn_crrnt.d_initial_mrgn + st_undpstn_crrnt.d_blckd_pl - st_undpstn_tobe.d_ntnl_pl; ***/
    d_available = st_undpstn_crrnt.d_initial_mrgn + st_undpstn_crrnt.d_blckd_pl + st_undpstn_tobe.d_ntnl_pl;
    d_shortage  = st_undpstn_tobe.d_reqd_initial_mrgn - d_available;

    /***** End of Ver 1.2 ****/

	
 /* 7.9 */
		EXEC SQL
      SELECT  TO_CHAR(SYSDATE,'dd-Mon-yyyy hh24:mi:ss'),TO_CHAR(SYSDATE,'yyyymmdd')
      INTO    :c_time,
              :c_filetime
      FROM    DUAL ;

    if ( SQLCODE != 0 )
    {
      fn_userlog(c_ServiceName,"COULDN'T INSERT DATA INTO IMTM REPORT TABLE II");
      fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
    }

		/*** Ver 1.2 d_current_limit,d_plg_amt_MTM,d_shortage and d_tot_shr_plgd_amt_MTM added for Report ***/	
    /*** Ver 5.2, d_fdr_amt_MTM added below ***/

		/*** Following commented In Ver 5.4 
		sprintf(c_filename,"%s/%s/fno/span_imtm.txt",tuxgetenv("EBALOG_PATH"),c_filetime);
    sprintf(c_filedata,"%s|%s|%s|%s|%c|%ld|%s|%c|%c|%s|%lf|%lf|%c|%ld|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%c|%c|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf",c_time,ptr_st_pstn_actn->c_cln_mtch_accnt,ptr_st_pstn_actn->c_xchng_cd,ptr_st_pstn_actn->c_undrlyng,ptr_st_pstn_actn->c_prd_typ,ptr_st_pstn_actn->l_strike_prc,ptr_st_pstn_actn->c_expry_dt,ptr_st_pstn_actn->c_exrc_typ,ptr_st_pstn_actn->c_opt_typ,c_bnk_accnt_MTM,d_alctd_amt_MTM,d_bft_amt_MTM,st_undpstn_tobe.c_uopnpstn_flw,st_undpstn_tobe.l_uopnpstn_qty,st_undpstn_tobe.d_uopnpstn_val,st_undpstn_tobe.d_umtm_opn_val,st_undpstn_crrnt.d_initial_mrgn,st_undpstn_tobe.d_initial_mrgn,st_undpstn_crrnt.d_span_wemult_mrgn,st_undpstn_tobe.d_span_wemult_mrgn,st_undpstn_crrnt.d_eba_expr_mrgn,st_undpstn_tobe.d_eba_expr_mrgn,st_undpstn_crrnt.d_uspan_wenov_mrgn,st_undpstn_tobe.d_uspan_wenov_mrgn,st_undpstn_crrnt.d_multpr,st_undpstn_tobe.d_multpr,st_undpstn_crrnt.d_uspan_nenov_mrgn,st_undpstn_tobe.d_uspan_nenov_mrgn,st_undpstn_crrnt.d_net_optn_val,st_undpstn_tobe.d_net_optn_val,st_undpstn_crrnt.d_min_mrgn,st_undpstn_tobe.d_min_mrgn,st_undpstn_crrnt.c_mtm_flg,st_undpstn_tobe.c_mtm_flg,st_undpstn_crrnt.d_blckd_pl,st_undpstn_tobe.d_blckd_pl,st_undpstn_crrnt.d_reqd_initial_mrgn,st_undpstn_tobe.d_reqd_initial_mrgn,d_plg_amt_MTM,d_tot_shr_plgd_amt_MTM,d_current_limit,d_shortage,d_fdr_amt_MTM);

    fp = (FILE *)fopen(c_filename,"a") ;

    if(fp == NULL)
    {
      fn_userlog(c_ServiceName,"UNABLE TO OPEN FILE FOR MTM");
    }

    fprintf(fp,"%s\n",c_filedata);
    fclose(fp);
    Commented In Ver 5.4 Ends ***/
		
		/*** Ver 5.4 Starts ***/
		if(DEBUG_MSG_LVL_4)
    {
			fn_userlog(c_ServiceName,"Inserting into SIS_SPN_IMTM_SQ_SMRY table .. ");
			fn_userlog(c_ServiceName," ptr_st_pstn_actn->c_cln_mtch_accnt Is :%s:",			ptr_st_pstn_actn->c_cln_mtch_accnt ); 
			fn_userlog(c_ServiceName," ptr_st_pstn_actn->c_xchng_cd Is :%s:",						ptr_st_pstn_actn->c_xchng_cd ); 
			fn_userlog(c_ServiceName," ptr_st_pstn_actn->c_undrlyng Is :%s:",						ptr_st_pstn_actn->c_undrlyng );
			fn_userlog(c_ServiceName," ptr_st_pstn_actn->c_prd_typ Is :%c:",						ptr_st_pstn_actn->c_prd_typ );
			fn_userlog(c_ServiceName," ptr_st_pstn_actn->c_expry_dt Is :%s:",						ptr_st_pstn_actn->c_expry_dt );
			fn_userlog(c_ServiceName," ptr_st_pstn_actn->l_strike_prc Is :%ld:",				ptr_st_pstn_actn->l_strike_prc );
			fn_userlog(c_ServiceName," ptr_st_pstn_actn->c_exrc_typ Is :%c:",						ptr_st_pstn_actn->c_exrc_typ );
			fn_userlog(c_ServiceName," ptr_st_pstn_actn->c_opt_typ Is :%c:",						ptr_st_pstn_actn->c_opt_typ );
			fn_userlog(c_ServiceName," c_bnk_accnt_MTM Is :%s:",												c_bnk_accnt_MTM );
			fn_userlog(c_ServiceName," d_alctd_amt_MTM Is :%lf:",												d_alctd_amt_MTM );
			fn_userlog(c_ServiceName," d_bft_amt_MTM Is :%lf:",													d_bft_amt_MTM );
			fn_userlog(c_ServiceName," st_undpstn_crrnt.d_initial_mrgn Is :%lf:",				st_undpstn_crrnt.d_initial_mrgn );
			fn_userlog(c_ServiceName," st_undpstn_tobe.d_initial_mrgn Is :%lf:",				st_undpstn_tobe.d_initial_mrgn  );
			fn_userlog(c_ServiceName," st_undpstn_crrnt.d_span_wemult_mrgn Is :%lf:",		st_undpstn_crrnt.d_span_wemult_mrgn );
			fn_userlog(c_ServiceName," st_undpstn_tobe.d_span_wemult_mrgn Is :%lf:",		st_undpstn_tobe.d_span_wemult_mrgn  );
			fn_userlog(c_ServiceName," st_undpstn_crrnt.d_eba_expr_mrgn Is :%lf:",			st_undpstn_crrnt.d_eba_expr_mrgn  );
			fn_userlog(c_ServiceName," st_undpstn_tobe.d_eba_expr_mrgn Is :%lf:",				st_undpstn_tobe.d_eba_expr_mrgn );
			fn_userlog(c_ServiceName," st_undpstn_crrnt.d_uspan_wenov_mrgn Is :%lf:",		st_undpstn_crrnt.d_uspan_wenov_mrgn);
			fn_userlog(c_ServiceName," st_undpstn_tobe.d_uspan_wenov_mrgn Is :%lf:",		st_undpstn_tobe.d_uspan_wenov_mrgn );
			fn_userlog(c_ServiceName," st_undpstn_crrnt.d_uspan_nenov_mrgn Is :%lf:",		st_undpstn_crrnt.d_uspan_nenov_mrgn);
			fn_userlog(c_ServiceName," st_undpstn_tobe.d_uspan_nenov_mrgn Is :%lf:",		st_undpstn_tobe.d_uspan_nenov_mrgn );
			fn_userlog(c_ServiceName," st_undpstn_crrnt.d_multpr Is :%lf:",							st_undpstn_crrnt.d_multpr );
			fn_userlog(c_ServiceName," st_undpstn_tobe.d_multpr Is :%lf:",							st_undpstn_tobe.d_multpr );
			fn_userlog(c_ServiceName," st_undpstn_crrnt.d_net_optn_val Is :%lf:",				st_undpstn_crrnt.d_net_optn_val);    
			fn_userlog(c_ServiceName," st_undpstn_tobe.d_net_optn_val Is :%lf:",				st_undpstn_tobe.d_net_optn_val );
			fn_userlog(c_ServiceName," st_undpstn_crrnt.d_min_mrgn Is :%lf:",						st_undpstn_crrnt.d_min_mrgn );   
			fn_userlog(c_ServiceName," st_undpstn_tobe.d_min_mrgn  Is :%lf:",						st_undpstn_tobe.d_min_mrgn );
			fn_userlog(c_ServiceName," st_undpstn_crrnt.c_mtm_flg  Is :%c:",						st_undpstn_crrnt.c_mtm_flg );
			fn_userlog(c_ServiceName," st_undpstn_tobe.c_mtm_flg  Is :%c:",							st_undpstn_tobe.c_mtm_flg  );
			fn_userlog(c_ServiceName," st_undpstn_crrnt.d_blckd_pl Is :%lf:",						st_undpstn_crrnt.d_blckd_pl );
			fn_userlog(c_ServiceName," st_undpstn_tobe.d_blckd_pl  Is :%lf:",						st_undpstn_tobe.d_blckd_pl );
			fn_userlog(c_ServiceName," st_undpstn_crrnt.d_reqd_initial_mrgn Is :%lf:",	st_undpstn_crrnt.d_reqd_initial_mrgn);
			fn_userlog(c_ServiceName," st_undpstn_tobe.d_reqd_initial_mrgn  Is :%lf:",	st_undpstn_tobe.d_reqd_initial_mrgn );
			fn_userlog(c_ServiceName," c_time Is :%s:",																	c_time );
			fn_userlog(c_ServiceName," d_plg_amt_MTM  Is :%lf:",												d_plg_amt_MTM  );
			fn_userlog(c_ServiceName," d_tot_shr_plgd_amt_MTM  Is :%lf:",								d_tot_shr_plgd_amt_MTM  );
			fn_userlog(c_ServiceName," d_current_limit  Is :%lf:",											d_current_limit );
			fn_userlog(c_ServiceName," d_shortage Is :%lf:",														d_shortage);
		}
     fn_userlog(c_ServiceName,"d_trigger_prc Is :%lf:",d_trigger_prc); /** ver 9.7 **/
 /* 7.9 */
		EXEC SQL
 		INSERT INTO SIS_SPN_IMTM_SQ_SMRY
 		( SIS_CLM_MTCH_ACCNT,
   		SIS_XCHNG_CD,
   		SIS_UNDRLYNG,
   		SIS_PRDCT_TYP,
   		SIS_EXPRY_DT,
   		SIS_STRK_PRC,
   		SIS_EXER_TYP,
   		SIS_OPT_TYP,
   		SIS_BNK_ACCNT,
   		SIS_ALCTD_AMT,
   		SIS_BFT_AMT,
   		SIS_INTL_MRGN_OLD,
   		SIS_INTL_MRGN_NEW,
   		SIS_SPN_WEMLT_MRGN_OLD,
   		SIS_SPN_WEMLT_MRGN_NEW,
   		SIS_EBA_EXPR_MRGN_OLD,
   		SIS_EBA_EXPR_MRGN_NEW,
   		SIS_USPN_WENOV_MRGN_OLD,
   		SIS_USPN_WENOV_MRGN_NEW,
   		SIS_USPN_NENOV_MRGN_OLD,
   		SIS_USPN_NENOV_MRGN_NEW,
   		SIS_SPN_MLTPLR_OLD,
   		SIS_SPN_MLTPLR_NEW,
   		SIS_NET_OPTN_VAL_OLD,
   		SIS_NET_OPTN_VAL_NEW,
   		SIS_MIN_MRGN_OLD,
   		SIS_MIN_MRGN_NEW,
   		SIS_MTM_FLG_OLD,
   		SIS_MTM_FLG_NEW,
   		SIS_BLCKD_PL_OLD,
   		SIS_BLCKD_PL_NEW,
   		SIS_REQD_INTL_MRGN_OLD,
   		SIS_REQD_INTL_MRGN_NEW,
   		SIS_TIME,
   		SIS_PLG_AMT,
   		SIS_TOT_PLG_AMT,
   		SIS_CURR_LMT,
   		SIS_SHORTAGE ,
	 		SIS_FDR_AMT,
      SIS_TRG_PRC /** ver 9.7 **/
		)
		VALUES
		(
  		:ptr_st_pstn_actn->c_cln_mtch_accnt,
  		:ptr_st_pstn_actn->c_xchng_cd,
  		:ptr_st_pstn_actn->c_undrlyng,
  		:ptr_st_pstn_actn->c_prd_typ,
  		:ptr_st_pstn_actn->c_expry_dt,
  		:ptr_st_pstn_actn->l_strike_prc,
  		:ptr_st_pstn_actn->c_exrc_typ,
  		:ptr_st_pstn_actn->c_opt_typ,
  		:c_bnk_accnt_MTM,
  		:d_alctd_amt_MTM,
  		:d_bft_amt_MTM,
  		:st_undpstn_crrnt.d_initial_mrgn,
  		:st_undpstn_tobe.d_initial_mrgn,
  		:st_undpstn_crrnt.d_span_wemult_mrgn,
  		:st_undpstn_tobe.d_span_wemult_mrgn,
  		:st_undpstn_crrnt.d_eba_expr_mrgn,
  		:st_undpstn_tobe.d_eba_expr_mrgn,
  		:st_undpstn_crrnt.d_uspan_wenov_mrgn,
  		:st_undpstn_tobe.d_uspan_wenov_mrgn,
  		:st_undpstn_crrnt.d_uspan_nenov_mrgn,
  		:st_undpstn_tobe.d_uspan_nenov_mrgn,
  		:st_undpstn_crrnt.d_multpr,
  		:st_undpstn_tobe.d_multpr,
  		:st_undpstn_crrnt.d_net_optn_val,
  		:st_undpstn_tobe.d_net_optn_val,
  		:st_undpstn_crrnt.d_min_mrgn,
  		:st_undpstn_tobe.d_min_mrgn ,
  		:st_undpstn_crrnt.c_mtm_flg ,
  		:st_undpstn_tobe.c_mtm_flg ,
  		:st_undpstn_crrnt.d_blckd_pl,
  		:st_undpstn_tobe.d_blckd_pl ,
  		:st_undpstn_crrnt.d_reqd_initial_mrgn,
  		:st_undpstn_tobe.d_reqd_initial_mrgn ,
  		TO_DATE(:c_time,'DD-MON-YYYY HH24:MI:SS'),
  		:d_plg_amt_MTM ,
  		:d_tot_shr_plgd_amt_MTM ,
  		:d_current_limit ,
  		:d_shortage,
			:d_fdr_amt_MTM,
      :d_trigger_prc /** ver 9.7 ***/
		);

		if ( SQLCODE != 0 )
		{
  		fn_userlog(c_ServiceName,"Error while inserting into SIS_SPN_IMTM_SQ_SMRY table .. ");
  		fn_errlog(c_ServiceName, "S31760", SQLMSG, c_err_msg );
  		return -1;
		}

  	if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
  	{
			fn_userlog(c_ServiceName,"Inserting  into SIS_SPN_IMTM_SQ_SMRY table ends  .. ");
		}

		/*** Ver 5.4 Ends  ***/

		/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
  	if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
		{	
	  	fn_userlog(c_ServiceName,"SPAN - At End Of Pre-SquareOff Case.");
		}
	}
	
	if ( st_undpstn_tobe.l_uopnpstn_qty > 0 )
  {
    st_undpstn_tobe.c_uopnpstn_flw = BUY;
  }
  else if ( st_undpstn_tobe.l_uopnpstn_qty < 0 )
  {
    st_undpstn_tobe.c_uopnpstn_flw = SELL;
  }
  else
  {
    st_undpstn_tobe.c_uopnpstn_flw = NEUTRAL;
  }

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"BEFORE UPDATING UNDERLYING LEVEL POSITION ON TO THE TABLE .");
	}
  /** Update the underlying level position on to the table **/

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName, "4. st_undpstn_tobe.c_mtm_flg = :%c:", st_undpstn_tobe.c_mtm_flg);
	}

	if( c_upos_avl == 'N')
	{

		if(DEBUG_MSG_LVL_3)
		{	
			fn_userlog(c_ServiceName,"Inside 'c_upos_avl == 'N' Condition.");
		}
		EXEC SQL
      /*** SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY') Commented In Ver 1.9 ***/
      /*** SELECT TO_CHAR(GREATEST( EXG_NXT_TRD_DT,EXG_TMP_TRD_DT) ,'DD-Mon-YYYY')*** Ver 1.9 Reverted In Ver 1.9 Bug Fix**/
      SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY') /*** Reverted In Ver 1.9 Bug Fix ***/
      INTO   :st_undpstn_tobe.c_trd_dt
      FROM   EXG_XCHNG_MSTR
      WHERE  EXG_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
      AND    EXG_MKT_TYP = :c_exg_mkt_typ; /* 7.9 Hard Code Value Replace With Bind Variable  */

    if ( SQLCODE != 0 )
    {
    	fn_errlog(c_ServiceName, "S31765", SQLMSG, c_err_msg );
			return -1;		 
    }

      /*** Added in VER 13.0 Starts here : Fetching UCC code for client ***/

    MEMSET(c_ucc_cd);

    EXEC SQL
    SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
    INTO  :c_ucc_cd
    FROM  CLM_CLNT_MSTR
    WHERE CLM_MTCH_ACCNT = :st_undpstn_tobe.c_cln_mtch_accnt;


    if ( SQLCODE  !=  0 )
    {
      fn_userlog(c_ServiceName," VER 13.0 -- fn_cal_plc_pos: Error while fetching code for :%s:", st_undpstn_tobe.c_cln_mtch_accnt);
      fn_errlog ( c_ServiceName, "S31770", SQLMSG, c_err_msg );
      return -1;
    }

    rtrim(c_ucc_cd);

if(DEBUG_MSG_LVL_0)
fn_userlog(c_ServiceName," VER 13.0 -- fn_cal_plc_pos: Match ID :%s: have UCC code :%s:", st_undpstn_tobe.c_cln_mtch_accnt, c_ucc_cd);


    /*** VER 13.0 ends here ***/

		EXEC SQL
      INSERT INTO FUS_FO_UNDRLYNG_SPN_PSTN
     	(
				FUS_CLM_MTCH_ACCNT,
				FUS_XCHNG_CD,
				FUS_UNDRLYNG,
				FUS_INDSTK,
				FUS_UIBUY_QTY,
				FUS_UIBUY_VAL,
				FUS_UISELL_QTY,
				FUS_UISELL_VAL,
				FUS_UEXBUY_QTY,
				FUS_UEXBUY_VAL,
				FUS_UEXSELL_QTY,
				FUS_UEXSELL_VAL,
				FUS_UBUY_EXCTD_QTY,
				FUS_USELL_EXCTD_QTY,
				FUS_UOPNPSTN_FLW,
				FUS_UOPNPSTN_QTY,
				FUS_UOPNPSTN_VAL,
				FUS_UMTM_OPN_VAL,
				FUS_INITIAL_MRGN,
				FUS_SPAN_WEMULT_MRGN,
				FUS_EBA_EXPR_MRGN,
				FUS_USPAN_WENOV_MRGN,
				FUS_MULTIPLIER,
				FUS_USPAN_NENOV_MRGN,
				FUS_NET_OPTN_VAL,
				FUS_MTM_FLG,
				FUS_TRD_DT,
				FUS_NTNL_PL,
				FUS_BLCKD_PL,
				FUS_MIN_MRGN,
				FUS_REQD_INITIAL_MRGN,
        FUS_UCC_CD          /*** Added in VER 13.0 ***/
      )
		 	VALUES
      (
        :st_undpstn_tobe.c_cln_mtch_accnt,
        :st_undpstn_tobe.c_xchng_cd,
        :st_undpstn_tobe.c_undrlyng,
        :st_undpstn_tobe.c_indstk,
        :st_undpstn_tobe.l_uibuy_qty,
        :st_undpstn_tobe.d_uibuy_val,
        :st_undpstn_tobe.l_uisell_qty,
        :st_undpstn_tobe.d_uisell_val,
        :st_undpstn_tobe.l_uexbuy_qty,
        :st_undpstn_tobe.d_uexbuy_val,
        :st_undpstn_tobe.l_uexsell_qty,
        :st_undpstn_tobe.d_uexsell_val,
        :st_undpstn_tobe.l_ubuy_exctd_qty,
        :st_undpstn_tobe.l_usell_exctd_qty,
        :st_undpstn_tobe.c_uopnpstn_flw,
        :st_undpstn_tobe.l_uopnpstn_qty,
        :st_undpstn_tobe.d_uopnpstn_val,
        :st_undpstn_tobe.d_umtm_opn_val,
				:st_undpstn_tobe.d_initial_mrgn,
				:st_undpstn_tobe.d_span_wemult_mrgn ,
				:st_undpstn_tobe.d_eba_expr_mrgn,
				:st_undpstn_tobe.d_uspan_wenov_mrgn,
				:st_undpstn_tobe.d_multpr,
				:st_undpstn_tobe.d_uspan_nenov_mrgn,
				:st_undpstn_tobe.d_net_optn_val,
				:st_undpstn_tobe.c_mtm_flg,
				:st_undpstn_tobe.c_trd_dt,
				:st_undpstn_tobe.d_ntnl_pl,
				:st_undpstn_tobe.d_blckd_pl ,
				:st_undpstn_tobe.d_min_mrgn,
				:st_undpstn_tobe.d_reqd_initial_mrgn,
        :c_ucc_cd           /*** Added in VER 13.0 ***/     );

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31775", SQLMSG, c_err_msg );
        return -1;
      }
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"----------AFTER FUS INSERT----");
		}
	}
	else
	{
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Inside Else 'c_upos_avl == 'N' Condition.");
		}

		/*** Commented On 29-Dec-2011
		if ( strcmp(st_usrprfl.c_user_id,"system") != 0 )
		{
		Commented On 29-Dec-2011 Ends ***/
		
		/*** Reason For Commenting On 29-Dec-2011   ***/
		/*** System Is Blocking Margin On New Pos   ***/
		/*** Creation In bat_upld_corp but the same ***/
		/*** Is Not Updated at Table Level          ***/

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Inside User NOT SYSTEM Condition.");
		}
			EXEC SQL
      	UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
      	SET     FUS_UIBUY_QTY       	= :st_undpstn_tobe.l_uibuy_qty,
        	      FUS_UIBUY_VAL       	= :st_undpstn_tobe.d_uibuy_val,
          	    FUS_UISELL_QTY      	= :st_undpstn_tobe.l_uisell_qty,
            	  FUS_UISELL_VAL      	= :st_undpstn_tobe.d_uisell_val,
              	FUS_UEXBUY_QTY      	= :st_undpstn_tobe.l_uexbuy_qty,
              	FUS_UEXBUY_VAL      	= :st_undpstn_tobe.d_uexbuy_val,
              	FUS_UEXSELL_QTY     	= :st_undpstn_tobe.l_uexsell_qty,
            	  FUS_UEXSELL_VAL     	= :st_undpstn_tobe.d_uexsell_val,
          	    FUS_UBUY_EXCTD_QTY  	= :st_undpstn_tobe.l_ubuy_exctd_qty,
      	        FUS_USELL_EXCTD_QTY 	= :st_undpstn_tobe.l_usell_exctd_qty,
        	      FUS_UOPNPSTN_FLW    	= :st_undpstn_tobe.c_uopnpstn_flw,
          	    FUS_UOPNPSTN_QTY    	= :st_undpstn_tobe.l_uopnpstn_qty,
            	  FUS_UOPNPSTN_VAL    	= :st_undpstn_tobe.d_uopnpstn_val,
              	FUS_UMTM_OPN_VAL    	= :st_undpstn_tobe.d_umtm_opn_val,
 								FUS_INITIAL_MRGN			=	:st_undpstn_tobe.d_initial_mrgn,
 								FUS_SPAN_WEMULT_MRGN	=	:st_undpstn_tobe.d_span_wemult_mrgn,
 								FUS_EBA_EXPR_MRGN			=	:st_undpstn_tobe.d_eba_expr_mrgn,
 								FUS_USPAN_WENOV_MRGN	=	:st_undpstn_tobe.d_uspan_wenov_mrgn,
 								FUS_MULTIPLIER				=	:st_undpstn_tobe.d_multpr,
 								FUS_USPAN_NENOV_MRGN	=	:st_undpstn_tobe.d_uspan_nenov_mrgn,
 								FUS_NET_OPTN_VAL			=	:st_undpstn_tobe.d_net_optn_val,
 								FUS_MTM_FLG						=	:st_undpstn_tobe.c_mtm_flg,
 								FUS_NTNL_PL						=	:st_undpstn_tobe.d_ntnl_pl,
 								FUS_BLCKD_PL					=	:st_undpstn_tobe.d_blckd_pl,
 								FUS_MIN_MRGN					=	:st_undpstn_tobe.d_min_mrgn,
 								FUS_REQD_INITIAL_MRGN	=	:st_undpstn_tobe.d_reqd_initial_mrgn
      	WHERE   FUS_CLM_MTCH_ACCNT  	= :ptr_st_pstn_actn->c_cln_mtch_accnt
      	AND     FUS_XCHNG_CD        	= :ptr_st_pstn_actn->c_xchng_cd
      	AND     FUS_UNDRLYNG        	= :ptr_st_pstn_actn->c_undrlyng;

    	if ( SQLCODE != 0 )
    	{
      	fn_errlog(c_ServiceName, "S31780", SQLMSG, c_err_msg );
    		return -1;
    	}
			
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"----------AFTER FUS UPDATE-- 1  ----");
			}

		/*** Commented On 29-Dec-2011
		}
		else
		{
		
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Inside User IS  SYSTEM Condition.");
			}
			EXEC SQL
   			UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
   			SET     FUS_UIBUY_QTY         = :st_undpstn_tobe.l_uibuy_qty,
           			FUS_UIBUY_VAL         = :st_undpstn_tobe.d_uibuy_val,
           			FUS_UISELL_QTY        = :st_undpstn_tobe.l_uisell_qty,
           			FUS_UISELL_VAL        = :st_undpstn_tobe.d_uisell_val,
           			FUS_UEXBUY_QTY        = :st_undpstn_tobe.l_uexbuy_qty,
           			FUS_UEXBUY_VAL        = :st_undpstn_tobe.d_uexbuy_val,
           			FUS_UEXSELL_QTY       = :st_undpstn_tobe.l_uexsell_qty,
           			FUS_UEXSELL_VAL       = :st_undpstn_tobe.d_uexsell_val
				WHERE		FUS_CLM_MTCH_ACCNT    = :ptr_st_pstn_actn->c_cln_mtch_accnt
        AND     FUS_XCHNG_CD          = :ptr_st_pstn_actn->c_xchng_cd
        AND     FUS_UNDRLYNG          = :ptr_st_pstn_actn->c_undrlyng;

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31785", SQLMSG, c_err_msg );
        return -1;
      }

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"----------AFTER FUS UPDATE-- 2  ----");
			}
		}

		Commented On 29-Dec-2011 Ends ***/
	}
 
  /************ trigger price computation ****************/
  /** ver 9.7 starts  ***/
  c_extra_update = 'N';
  i_returncode  = fn_cal_trg_prc( c_ServiceName ,  ptr_st_pstn_actn,c_extra_update,
                                      ptr_st_err_msg  );

  if( i_returncode != 0 )
  {
        fn_errlog(c_ServiceName, "S31790", LIBMSG, c_err_msg );
        fn_userlog(c_ServiceName, "FAILED fn_cal_trg_prc");
  }
  /*** ver 9.7 ends ***/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"---------- CHECK:3  ---------------");
	}

	if ( ( c_mtm_flag == UNDER_MTM ) && ( st_undpstn_tobe.l_uibuy_qty == 0 ) && ( st_undpstn_tobe.l_uexbuy_qty == 0 )
  			&& ( st_undpstn_tobe.l_uisell_qty == 0 )  && ( st_undpstn_tobe.l_uexsell_qty == 0 ) )
  {
    ptr_st_pstn_actn->c_mtm_flag = NO_OPEN_ORDERS;
  }
  else if ( c_mtm_flag == UNDER_MTM )
  {
    ptr_st_pstn_actn->c_mtm_flag = FOR_REMARKS_ENTRY;
  }

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"ptr_st_pstn_actn->c_mtm_flag = :%c:", ptr_st_pstn_actn->c_mtm_flag);
  	fn_userlog(c_ServiceName, "5. st_undpstn_tobe.c_mtm_flg = :%c:", st_undpstn_tobe.c_mtm_flg);
		fn_userlog(c_ServiceName,"---------- CHECK:4  ---------------");
	}
	return 0;
}

int fn_call_actn_spn ( char *c_ServiceName,
											 char *c_pipe_id,
                       struct st_pstn_actn *ptr_st_pstn_actn,
                       struct st_fus_undrlyng_pstn	*ptr_st_undfut_pos_crrnt,
                       struct st_fus_undrlyng_pstn	*ptr_st_undfut_pos_to_be,
											 struct st_err_msg *ptr_st_err_msg)
{

	FBFR32 *ptr_fml_ibuf;
  FBFR32 *ptr_fml_obuf;

  char c_narration_id[4];
  char c_dr_without_lmt_flg;
	char c_prmum_dr_without_lmt_flg;
  char c_pos_avl;
  char c_tmp_rmrks [ 133 ] ;
  char c_tmp_rmrks_ob [ 133 ] ;/** 10.8 **/
  char c_inp_strng1[ 16000 ];  /** 12.2 increasing size from 8k to 16k **/
  char c_inp_strng11[ 16000 ]; /** 12.2 increasing size from 8k to 16k **/
  char c_inp_strng2[ 16000 ];  /** 12.2 increasing size from 8k to 16k **/
  char c_inp_strng22[ 16000 ]; /** 12.2 increasing size from 8k to 16k **/
  char c_inp_strng[ 16000 ];
  char c_op_strng[ 16000 ];
  char c_op_strng1[ 16000 ];
  char c_op_strng2[ 16000 ];
	char c_seq_num1[12000];
	char c_seq_num2[12000];
	char c_max_opn_qty[200];
	char c_min_opn_qty[200];
	char c_ltp[2000];
	char c_strk_prc[20];
	char c_mrgn_indctr[3];
	char c_opseq_num1[20];
	char c_opseq_num2[20];
	char c_mtch_accnt1[11];
	char c_mtch_accnt2[11];
	char c_spn_mrgn1[20];
	char c_spn_mrgn2[20];
	char c_nov1[20];
	char c_nov2[20];
	char c_total_mrgn1[20];
	char c_total_mrgn2[20];
	char c_expry_dt[10];
	char *null_ptr	=	0;
	char c_xchng_cd1[3];				/*** Ver 2.1 ***/
	char c_xchng_cd2[3];				/*** Ver 2.1 ***/
  char c_ucc_cd[13] = "\0";             /*** Added in VER 13.0 ***/
	int i_returncode;
	int	i_rtrn_cd1;
	int i_expsr_rtrn;
	int i_cntrct_cnt = 0;		/*** Ver 1.1 ***/
	int	i_sell_square_off_chk	=	0;	/*** Ver 1.2 ***/

	long	l_max_opn_qty	= 0;
	long	l_min_opn_qty	= 0;
	long	l_temp_qty		= 0;
	long	l_prtfl_seq1	= 0;
	long	l_prtfl_seq2	= 0;
	long	li_len_tobuf	= 0;
	long	l_length1			= 0;
	long	l_length2			= 0;
	/*** long	l_strike_prc	= 0; *** Ver 1.1 ***/
	long	l_cntr				=	0;
	long  l_prmum_qty		= 0;
	long	l_basket_id		=	0;
	long	l_mrgnbl_qty	= 0;
	long  l_buy_qty			= 0;
	long	l_sell_qty		= 0;
	
	/*** Ver 1.6 ***/
	long l_ose_qty				= 0;
	long l_obe_qty				= 0;
	long l_ibuy_qty				= 0;
	long l_ebuy_qty				= 0;
	long l_isell_qty			= 0;
	long l_esell_qty			= 0;
	long l_total_buy_qty	= 0;
	long l_total_sell_qty = 0;
	long l_cover_qty			= 0;
	/*** Ver 1.6 ***/

  double d_diff_mrgn    = 0.0;
  double d_diff_pl      = 0.0;
  double d_balance_amt  = 0.0;
  double d_balance_amt_tmp = 0.0;       /*** Ver 8.8 ***/
  double d_bal_to_apply = 0.0 ;
	double d_ltp          = 0.0;
	double d_clsng_prc    = 0.0;
	double d_spn_mrgn1    = 0.0;
	double d_spn_mrgn2    = 0.0;
	double d_nov1         = 0.0;
	double d_nov2         = 0.0;
	double d_nov	        = 0.0;
	double d_total_mrgn1  = 0.0;
	double d_total_mrgn2  = 0.0;
	double d_total_mrgn  	= 0.0;
	double d_cntrct_pl		=	0.0;
	double d_ntnl_pl			=	0.0;
	double d_blckd_amnt		=	0.0;
  double d_mrgn_blkd 		= 0.0;
  double d_expsr_prcntg = 0.0;
  double d_minexpsr_prcntg = 0.0;
	double d_expsr_mrgn			=	0.0;
	double d_min_expsr_mrgn	=	0.0;
	double d_expsr					=	0.0;
	double d_min_expsr			=	0.0;
	double d_mltplr					=	0.0;
	double d_upd_amount     =	0.0;
	double d_intl_mrgn    	= 0.0;
	double d_min_mrgn     	= 0.0;
	double d_strike_prc			= 0.0;		/*** Ver 1.1 ***/
	double  d_spn_mrgn     = 0.0;			/*** Ver 2.0 ***/
	double 	d_blkd_prmum	=	0.0;			/*** Ver 2.0 ***/
	double 	d_opt_prmum 	= 0.0;			/** Ver 2.0 **/
	double 	d_total_prmum =	0.0;			/** Ver 2.0 **/
	double 	d_undrlyng_pl	= 0.0;			/** Ver 2.0 **/
	double  d_oblckd_amnt = 0.0;			/** Ver 2.0 **/
	double  d_square_off_prmum = 0.0;	/** Ver 2.0 **/

	d_undrlyng_pl	=	0.0;
	d_oblckd_amnt	=	0.0;

  /**** Ver 3.1 Starts Here ****/
  double d_total_amount=0.0;
  double d_current_limit=0.0;
  double d_premium = 0.0;
  char c_pnl_insufficient_flg='N';
  char c_mrgn_insufficient_flg='N';
  char c_prm_insufficent_flg='N';
  char c_lmterr_msg[256];
  /*** Ver 3.1 Ends Here ***/
	char c_balance_flg = 'N';         /*** Ver 8.8 ***/
	char c_mtm_flg = 'O';                  /*** Ver 9.0 ***/

  /*** Ver 11.0 Starts Here ***/
  int    i_ret_val=0;

  double d_spn_bmrgn1=0;
  double d_bnov1=0;
  double d_total_bmrgn1=0;

  double d_spn_bmrgn2=0;
  double d_bnov2=0;
  double d_total_bmrgn2=0;

  double d_spn_bmrgn=0;
  double d_bnov=0;
  double d_total_bmrgn=0;
  /*** Ver 11.0 Ends here ***/

  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;      
    char  sql_cln_mtch_accnt[11];
    char  sql_xchng_cd[4];
    char  sql_prd_typ;
    char  sql_undrlyng[7];
    varchar c_exp_dt[LEN_DATE];
    varchar c_trd_dt[12];          
		varchar c_stock_cd [20];
	

  /** Current contract level positions of other contracts in the same underlying **/

  struct st_fcp_cntrct_pstn	st_cntrct_pstn_crrnt	;

 	/** Copy of contract level position on which action is to be done taken before applying the action **/

  struct st_fcp_cntrct_pstn	st_cntrct_pstn_old	;

  /** Contract level position on which action is to be done **/

  struct st_fcp_cntrct_pstn	st_cntrct_pstn_md_rc;

  /** Contract level position on which Premium Square Off Action is to be done **/
  struct st_fcp_cntrct_pstn st_cntrct_pstn_prmum_sqroff;


  EXEC SQL END DECLARE SECTION;

	ptr_fml_obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if ( ptr_fml_obuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31795", TPMSG, c_err_msg);
		return -1;
  }

	/*** ptr_fml_ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);		 ** Commented in ver 1.1 ***/

  ptr_fml_ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN*10); /*** Added in ver 1.1 for increase buffer size ***/

  if ( ptr_fml_ibuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31800", TPMSG, c_err_msg);
    tpfree((char *)ptr_fml_obuf);
		return -1;
  }

  MEMSET(c_tmp_rmrks_ob);  /** Ver 10.8 **/

  strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
  strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);

	sql_prd_typ 		= ptr_st_pstn_actn->c_prd_typ;


	/** This bit of code down below will fetch all the contract level **/
  /** positions. Then it will find the contract on which the input  **/
  /** action is to be performed and then perform it. It then summs  **/
  /** up all the contract level postion to arrive at a consolidated **/
  /** underlying level position. It then recalculates the margin.   **/
  /** This bit of code need not be performed for actions which do   **/
  /** not involve a change in postion                               **/

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog ( c_ServiceName, "Building new underlying position" );
	}

	EXEC	SQL
		SELECT	SPN_PRTFL1_SEQ.nextval
		INTO		:l_prtfl_seq1
		FROM		DUAL;

	if ( SQLCODE	!=	0	)
	{
		fn_userlog(c_ServiceName,"Error While Fetching	Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31805",SQLMSG, c_err_msg);
    tpfree((char *)ptr_fml_obuf);
		return	-1;
	}

	EXEC  SQL
  	SELECT  SPN_PRTFL1_SEQ.nextval
    INTO    :l_prtfl_seq2
    FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31810",SQLMSG, c_err_msg);
    tpfree((char *)ptr_fml_obuf);
    return  -1;
  }

	MEMSET(c_inp_strng);     /*** Ver 1.1 ***/
	MEMSET(c_inp_strng11);   /*** Ver 1.1 ***/
	MEMSET(c_inp_strng1);    /*** Ver 1.1 ***/
	MEMSET(c_inp_strng2);    /*** Ver 1.1 ***/
	MEMSET(c_inp_strng22);   /*** Ver 1.1 ***/
	strcpy(c_inp_strng1,"1^");
  strcpy(c_inp_strng2,"|");

	/**** Ver 2.1 Starts ****/
	if(strcmp(sql_xchng_cd,"NFO") == 0)
	{
		strcat(c_inp_strng1,"NSE^");
	}
	else if(strcmp(sql_xchng_cd,"BFO") == 0)
	{
		strcat(c_inp_strng1,"BSE^");
	}
	/**** Ver 2.1 Ends *****/

	sprintf(c_seq_num1,"%ld",l_prtfl_seq1);
	sprintf(c_seq_num2,"%ld",l_prtfl_seq2);

	strcat( c_inp_strng1 , c_seq_num1 );
	strcat( c_inp_strng2 , c_seq_num2 );

	strcat(c_inp_strng1,"^");
	strcat(c_inp_strng2,"^");

	 EXEC SQL
   	SELECT  FCB_UNDRLYNG_BSKT_ID
   	INTO    :l_basket_id
   	FROM    FCB_FO_CLN_BSKT_ALLTD
   	WHERE   FCB_CLN_LVL = ( SELECT  CLM_CLNT_LVL
                            FROM    CLM_CLNT_MSTR
                            WHERE   CLM_MTCH_ACCNT = :sql_cln_mtch_accnt);
  if ( SQLCODE != 0 )
  {
		fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31815",SQLMSG, c_err_msg);
    tpfree((char *)ptr_fml_obuf);
    return  -1;
  }


	/** Prepare a list of contracts from contract position table **/

	EXEC SQL ALLOCATE :sys_cursor;

	EXEC SQL EXECUTE
    BEGIN
    	OPEN 		:sys_cursor FOR
			SELECT	FCP_CLM_MTCH_ACCNT,
 							FCP_XCHNG_CD,
 							FCP_PRDCT_TYP,
 							FCP_INDSTK,
 							FCP_UNDRLYNG,
 							TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
 							FCP_EXER_TYP,
							FCP_STRK_PRC,
							FCP_OPT_TYP,
 							FCP_IBUY_QTY,
 							FCP_IBUY_ORD_VAL,
 							FCP_ISELL_QTY,
 							FCP_ISELL_ORD_VAL,
 							FCP_EXBUY_QTY,
 							FCP_EXBUY_ORD_VAL,
 							FCP_EXSELL_QTY,
 							FCP_EXSELL_ORD_VAL,
 							FCP_BUY_EXCTD_QTY,
 							FCP_SELL_EXCTD_QTY,
 							FCP_OPNPSTN_FLW,
 							FCP_OPNPSTN_QTY,
 							FCP_OPNPSTN_VAL,
 							FCP_MTM_OPN_VAL,
							FCP_OPT_PREMIUM,
							NVL(FCP_MTM_FLG,'O')								/*** Ver 9.0 ***/
				FROM	FCP_FO_SPN_CNTRCT_PSTN
				WHERE	FCP_CLM_MTCH_ACCNT	= :sql_cln_mtch_accnt
       	AND   FCP_XCHNG_CD       	= :sql_xchng_cd
       	AND   FCP_UNDRLYNG       	= :sql_undrlyng
       	ORDER BY FCP_EXPRY_DT ASC;
     	END;
    END-EXEC;

  	if ( SQLCODE != 0 )
  	{
    	EXEC SQL FREE :sys_cursor;
    	fn_errlog ( c_ServiceName, "S31820", SQLMSG, c_err_msg );
    	tpfree((char *)ptr_fml_obuf);
    	return -1;
  	}

		/**** Ver 2.6  Starts ***/

    if ( ptr_st_pstn_actn->c_nkd_blkd_flg == 'P')  /*** If called through Corp action ***/
    {

    	ptr_st_pstn_actn->l_actn_typ = SYSTEM_PLACE_ORDER ;
    	if(DEBUG_MSG_LVL_3)
    	{
				fn_userlog(c_ServiceName," Inside SYSTEM_PLACE_ORDER for Corp action...");
    		fn_userlog(c_ServiceName,"SPAN  - ptr_st_pstn_actn->l_actn_typ Is :%ld:",ptr_st_pstn_actn->l_actn_typ);

    	}
    }
    /**** Ver 2.6  Starts ***/


  	c_pos_avl = 'N';		
	
		/** Fetch one contract at a time from the list. If the fetched  **/
  	/** contract is the one we need to apply the change apply it.   **/
  	/** Else simply add the contract to  underlying level position  **/
		
		d_undrlyng_pl = 0.0; /*** Added On 09-Dec-2011 ***/

		while ( 1 )
		{
			d_opt_prmum				=	0.0;
			d_expsr_mrgn			=	0.0;
			d_min_expsr_mrgn	=	0.0;
			d_cntrct_pl    		= 0.0;
			d_strike_prc			= 0.0;		/*** Ver 1.1 ***/
			i_sell_square_off_chk	=	0;	/*** Ver 1.2 ***/
			c_mtm_flg         = 'O';    /*** Ver 9.0 ***/

			MEMSET(c_exp_dt);

			EXEC SQL FETCH	:sys_cursor
               INTO  	:st_cntrct_pstn_crrnt.c_cln_mtch_accnt,
                      :st_cntrct_pstn_crrnt.c_xchng_cd,
                      :st_cntrct_pstn_crrnt.c_prd_typ,
                      :st_cntrct_pstn_crrnt.c_ctgry_indstk,
                      :st_cntrct_pstn_crrnt.c_undrlyng,
                      :c_exp_dt,
                      :st_cntrct_pstn_crrnt.c_exer_typ,
                      :st_cntrct_pstn_crrnt.l_strike_prc,
                      :st_cntrct_pstn_crrnt.c_opt_typ,
                      :st_cntrct_pstn_crrnt.l_ibuy_qty,
                      :st_cntrct_pstn_crrnt.d_ibuy_ord_val,
                      :st_cntrct_pstn_crrnt.l_isell_qty,
                      :st_cntrct_pstn_crrnt.d_isell_ord_val,
                      :st_cntrct_pstn_crrnt.l_exbuy_qty,
                      :st_cntrct_pstn_crrnt.d_exbuy_ord_val,
                      :st_cntrct_pstn_crrnt.l_exsell_qty,
                      :st_cntrct_pstn_crrnt.d_exsell_ord_val,
                      :st_cntrct_pstn_crrnt.l_buy_exctd_qty,
                      :st_cntrct_pstn_crrnt.l_sell_exctd_qty,
                      :st_cntrct_pstn_crrnt.c_opnpstn_flw,
                      :st_cntrct_pstn_crrnt.l_opnpstn_qty,
                      :st_cntrct_pstn_crrnt.d_opnpstn_val,
                      :st_cntrct_pstn_crrnt.d_mtm_opn_val,
											:d_blkd_prmum,
											:c_mtm_flg;														/*** Ver 9.0 ***/

			if ( SQLCODE != 0 )
    	{
    		if ( SQLCODE == NO_DATA_FOUND )
        {
					fn_userlog(c_ServiceName," Inside NO_DATA_FOUND .");
          break;
        }

        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31825", SQLMSG, c_err_msg );
				tpfree((char *)ptr_fml_obuf);
        return -1;
      }

			if (DEBUG_MSG_LVL_3)
			{
				fn_userlog ( c_ServiceName, "Kiran fetching MTM flag is :%c:",c_mtm_flg);
				fn_userlog (c_ServiceName, "user id is :%s:",ptr_st_pstn_actn->c_user_id);
      	fn_userlog (c_ServiceName, "session id is :%ld:",ptr_st_pstn_actn->l_session_id);
			}

			/****** Ver 9.0 started *****/
			  if (( c_mtm_flg == UNDER_PHYDLVRY_MTM ) && ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) && ( ptr_st_pstn_actn->l_session_id != 0 ))
			{
				EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
			  fn_userlog(c_ServiceName,"In Under physical delivery mtm condition");
				tpfree((char *)ptr_fml_obuf);
        tpfree((char *)ptr_fml_ibuf);
				return -7;	
			}

			/****** Ver 9.0 Ended ******/

			i_cntrct_cnt++;							/*** Ver 1.1 ***/

			SETNULL( c_exp_dt );
      strcpy ( st_cntrct_pstn_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
      rtrim(st_cntrct_pstn_crrnt.c_xchng_cd);
      rtrim(st_cntrct_pstn_crrnt.c_undrlyng);
      rtrim(st_cntrct_pstn_crrnt.c_expry_dt);

  		if( (strcmp(st_cntrct_pstn_crrnt.c_xchng_cd,ptr_st_pstn_actn->c_xchng_cd) == 0 ) &&
          (st_cntrct_pstn_crrnt.c_prd_typ == ptr_st_pstn_actn->c_prd_typ) &&
          (strcmp(st_cntrct_pstn_crrnt.c_undrlyng,ptr_st_pstn_actn->c_undrlyng) == 0 ) &&
          (strcasecmp(st_cntrct_pstn_crrnt.c_expry_dt,ptr_st_pstn_actn->c_expry_dt) == 0 ) &&
					(st_cntrct_pstn_crrnt.c_opt_typ == ptr_st_pstn_actn->c_opt_typ)	&&
					(st_cntrct_pstn_crrnt.l_strike_prc == ptr_st_pstn_actn->l_strike_prc)	&&
          (st_cntrct_pstn_crrnt.c_exer_typ == ptr_st_pstn_actn->c_exrc_typ) )
			{
        memcpy ( &st_cntrct_pstn_old, &st_cntrct_pstn_crrnt, sizeof(st_cntrct_pstn_old));

        i_returncode =  fn_apply_spn_actn ( c_ServiceName,
                                            ptr_st_pstn_actn,
                                            &st_cntrct_pstn_crrnt,
                                            ptr_st_err_msg );
        if ( i_returncode == -1 )
        {
					fn_errlog( c_ServiceName, "S31830",LIBMSG , c_err_msg );
        	EXEC SQL CLOSE :sys_cursor;
        	tpfree((char *)ptr_fml_obuf);
        	tpfree((char *)ptr_fml_ibuf);
          return -1;
        }

        memcpy ( &st_cntrct_pstn_md_rc, &st_cntrct_pstn_crrnt, sizeof( st_cntrct_pstn_md_rc ));


				if ( st_cntrct_pstn_crrnt.c_prd_typ ==  'O' )
      	{
        	if( st_cntrct_pstn_crrnt.l_ibuy_qty  > 0 )
        	{
						if(DEBUG_MSG_LVL_3)
						{
          		fn_userlog(c_ServiceName,"SPAN Inside Option Buy Position.");
						}

          	d_opt_prmum = st_cntrct_pstn_crrnt.d_ibuy_ord_val;
        	}

        	d_total_prmum = d_blkd_prmum -  d_opt_prmum ;

					if(DEBUG_MSG_LVL_3)
					{
        		fn_userlog(c_ServiceName,"SPAN  - d_opt_prmum Is :%lf:",d_opt_prmum);
       	 		fn_userlog(c_ServiceName,"SPAN  - d_total_prmum Is :%lf:",d_total_prmum);
       	 		fn_userlog(c_ServiceName,"SPAN  - d_blkd_prmum  Is :%lf:",d_blkd_prmum);
					}

        	switch ( ptr_st_pstn_actn->l_actn_typ )
        	{
          	case  ORS_NEW_ORD_REQ:

            	strcpy( c_narration_id , ON_ORDER_PLACEMENT);
            	c_prmum_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
            	break;

          	case  SYSTEM_PLACE_ORDER:

            	strcpy( c_narration_id , ON_ORDER_PLACEMENT);
            	c_prmum_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
            	break;

          	default:
            	strcpy( c_err_msg, "Invalid action type");
            	fn_userlog ( c_ServiceName,"Invalid action type");
            	tpfree((char *)ptr_fml_obuf);
            	tpfree((char *)ptr_fml_ibuf);
            	return -1;
            	break;
        	}
			
					if ( d_total_prmum  <  0 )
        	{

            /*** ver 10.8 starts ***/
            MEMSET(c_tmp_rmrks_ob);
            strcpy ( c_tmp_rmrks_ob, ptr_st_pstn_actn->c_ref_rmrks );
            sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"OPTPREMBUYALLWD |%s",c_tmp_rmrks_ob);
            rtrim( ptr_st_pstn_actn->c_ref_rmrks);
            /*** ver 10.8 ends *****/
						d_balance_amt  = 0.0;   /*** Ver 1.1 ***/
	
          	i_returncode = fn_upd_spnlimits	( c_ServiceName,
            	                            		ptr_st_pstn_actn,
                                        			ptr_st_err_msg,
                                        			c_narration_id,
                                        			c_prmum_dr_without_lmt_flg,
                                        			d_total_prmum,
                                        			&d_balance_amt
																						);
          	if ( i_returncode != 0 )
          	{
            	switch ( i_returncode )
            	{
              	case  INSUFFICIENT_LIMITS :

									/**Open Position flow not equal to 'N' check was added by Shailesh 
										in order to avoid errorneous identification of Square off orders **/

									if ( ( (st_cntrct_pstn_crrnt.c_opnpstn_flw !=   ptr_st_pstn_actn->c_trnsctn_flw)
												&& st_cntrct_pstn_crrnt.c_opnpstn_flw !='N')
											 && ( abs(st_cntrct_pstn_crrnt.l_opnpstn_qty) >=  abs(ptr_st_pstn_actn->l_new_qty) )  )
									{
										if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
										{
											fn_userlog(c_ServiceName,"SPAN Insufficient Limits in Sell Squre Off Check.");
										}
										ptr_st_pstn_actn->l_actn_typ = SYSTEM_PLACE_ORDER;
										i_sell_square_off_chk = 1;
										d_square_off_prmum = d_total_prmum;
										MEMSET(st_cntrct_pstn_prmum_sqroff);
        						memcpy ( &st_cntrct_pstn_prmum_sqroff, &st_cntrct_pstn_crrnt, sizeof( st_cntrct_pstn_prmum_sqroff));
										strcpy(st_cntrct_pstn_prmum_sqroff.c_expry_dt,(char*)c_exp_dt.arr);

										if(DEBUG_MSG_LVL_3)
										{
											fn_userlog(c_ServiceName,"SPAN Action Type Is :%ld:",ptr_st_pstn_actn->l_actn_typ);
											fn_userlog(c_ServiceName,"Expiry date Is :%s:",st_cntrct_pstn_prmum_sqroff.c_expry_dt);
										}
									}

									if( i_sell_square_off_chk != 1 )
									{
  	              	fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg );
                    /**** Ver 3.1 Starts Here **********
										EXEC SQL CLOSE :sys_cursor;
										tpfree((char *)ptr_fml_obuf);
										tpfree((char *)ptr_fml_ibuf);
										return INSUFFICIENT_LIMITS  ;
                    ****** Ver 3.1 Ends here ********/

                    /**** Ver 3.1 Starts Here ****/
  									if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
  									{
                    	fn_userlog(c_ServiceName,"Inside INSUFFICIENT_LIMITS Option Premium Block of existing positions");
                    }

                    /*** Ver 8.8 Starts ***/
                    if( c_balance_flg != 'Y' )
                    {
                      d_balance_amt_tmp = d_balance_amt;
                      c_balance_flg = 'Y';
                    }
                    /*** Ver 8.8 Ends ***/

										d_premium = d_total_prmum;
                    c_prm_insufficent_flg ='Y';
                    /**** Ver 3.1 Ends Here ***/
									}

									break;

  	            default:
	
  	              fn_errlog( c_ServiceName, "S31835",LIBMSG , c_err_msg );
    	            EXEC SQL CLOSE :sys_cursor;
      	          tpfree((char *)ptr_fml_obuf);
        	        tpfree((char *)ptr_fml_ibuf);
          	      return -1;
            	}
          	}
          /*** ver 10.8 starts ***/
          strcpy ( ptr_st_pstn_actn->c_ref_rmrks ,c_tmp_rmrks_ob);
          MEMSET(c_tmp_rmrks_ob);
          /*** ver 10.8 ends ***/    
 					if( i_sell_square_off_chk != 1 )
          {
          	d_total_prmum = (d_total_prmum * (-1) ) + d_balance_amt;

						
          	EXEC SQL
            	UPDATE  FCP_FO_SPN_CNTRCT_PSTN
            	SET     FCP_OPT_PREMIUM     = :d_total_prmum  +  FCP_OPT_PREMIUM
            	WHERE   FCP_CLM_MTCH_ACCNT  = :st_cntrct_pstn_crrnt.c_cln_mtch_accnt
            	AND     FCP_XCHNG_CD        = :st_cntrct_pstn_crrnt.c_xchng_cd
            	AND     FCP_PRDCT_TYP       = :st_cntrct_pstn_crrnt.c_prd_typ
            	AND     FCP_UNDRLYNG        = :st_cntrct_pstn_crrnt.c_undrlyng
            	AND     FCP_EXPRY_DT        = :c_exp_dt
            	AND     FCP_EXER_TYP        = :st_cntrct_pstn_crrnt.c_exer_typ
            	AND     FCP_OPT_TYP         = :st_cntrct_pstn_crrnt.c_opt_typ
            	AND     FCP_STRK_PRC        = :st_cntrct_pstn_crrnt.l_strike_prc;

          	if ( SQLCODE != 0 )
          	{
            	fn_errlog(c_ServiceName, "S31840", SQLMSG, c_err_msg );
            	EXEC SQL CLOSE :sys_cursor;
            	tpfree((char *)ptr_fml_obuf);
            	tpfree((char *)ptr_fml_ibuf);
            	return -1;
          	}
					}
        	}
				}

			/**Open Position flow not equal to 'N' check was added by Shailesh in order to avoid errorneous identification of Square off orders **/
        if ( ( (st_cntrct_pstn_crrnt.c_opnpstn_flw !=   ptr_st_pstn_actn->c_trnsctn_flw)
              && st_cntrct_pstn_crrnt.c_opnpstn_flw !='N')
             && ( abs(st_cntrct_pstn_crrnt.l_opnpstn_qty) >=  abs(ptr_st_pstn_actn->l_new_qty) )  )
        {
					/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3**/
  				if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
					{
          	fn_userlog(c_ServiceName,"SPAN Inside Squre Off Check.");
					}

					/*** Commented in ver 1.6
          ptr_st_pstn_actn->l_actn_typ = SYSTEM_PLACE_ORDER ;
					*****************************/
	
					/******************************* Ver 1.6 ******************************************** 
					 Consideration of allready placed square off order given to cover quantity
				   for decide whether is it perfect square off to give DEBIT_TILL_LIMIT treatment
				   or it having extra quantity which get place under   DEBIT_WHEN_LIMIT criteria.
					*************************************************************************************/	
				  
					l_ose_qty        = 0;
					l_obe_qty        = 0;
					l_ibuy_qty       = 0;
					l_ebuy_qty       = 0;
					l_isell_qty      = 0;
					l_esell_qty      = 0;
					l_total_buy_qty  = 0;
					l_total_sell_qty = 0;
					l_cover_qty      = 0;
	
    			if ( st_cntrct_pstn_crrnt.l_ibuy_qty != 0 )
    			{
      			l_ose_qty  = fn_maxl(st_cntrct_pstn_crrnt.l_sell_exctd_qty * (-1) - st_cntrct_pstn_crrnt.l_buy_exctd_qty, 0 );
      			l_ibuy_qty = fn_maxl(st_cntrct_pstn_crrnt.l_ibuy_qty - l_ose_qty,0);
					}

					if ( st_cntrct_pstn_crrnt.l_exbuy_qty != 0 )
    			{
      			l_ose_qty  = fn_maxl(st_cntrct_pstn_crrnt.l_sell_exctd_qty * (-1) - st_cntrct_pstn_crrnt.l_buy_exctd_qty, 0 );
      			l_ebuy_qty = fn_maxl( ( st_cntrct_pstn_crrnt.l_exbuy_qty - l_ose_qty ), 0 );
					}

					if ( st_cntrct_pstn_crrnt.l_isell_qty != 0 )
    			{
      			l_obe_qty = fn_maxl( st_cntrct_pstn_crrnt.l_buy_exctd_qty - st_cntrct_pstn_crrnt.l_sell_exctd_qty * (-1) , 0 );
      			l_isell_qty = fn_maxl( st_cntrct_pstn_crrnt.l_isell_qty * (-1) - l_obe_qty,0  );
					}
	
					if ( st_cntrct_pstn_crrnt.l_exsell_qty != 0 )
    			{
      			l_obe_qty = fn_maxl( st_cntrct_pstn_crrnt.l_buy_exctd_qty - st_cntrct_pstn_crrnt.l_sell_exctd_qty * (-1) , 0 );
      			l_esell_qty = fn_maxl( st_cntrct_pstn_crrnt.l_exsell_qty * (-1) - l_obe_qty,0 );
					}
					
					if(DEBUG_MSG_LVL_3)
          {
            fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_buy_exctd_qty:%ld:",st_cntrct_pstn_crrnt.l_buy_exctd_qty);
            fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_sel_exctd_qty%ld:",st_cntrct_pstn_crrnt.l_sell_exctd_qty);
            fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_ibuy_qty     :%ld:",st_cntrct_pstn_crrnt.l_ibuy_qty);
            fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_isell_qty    :%ld:",st_cntrct_pstn_crrnt.l_isell_qty);
            fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_exbuy_qty    :%ld:",st_cntrct_pstn_crrnt.l_exbuy_qty);
            fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_exsell_qty   :%ld:",st_cntrct_pstn_crrnt.l_exsell_qty);
						fn_userlog(c_ServiceName,"SPAN  l_ibuy_qty                          :%ld:",l_ibuy_qty);
            fn_userlog(c_ServiceName,"SPAN  l_isell_qty                         :%ld:",l_isell_qty);
          }

          if(DEBUG_MSG_LVL_3)/** Ver 7.3 **/
          {
            fn_userlog(c_ServiceName,"SPAN  l_ebuy_qty                          :%ld:",l_ebuy_qty);
            fn_userlog(c_ServiceName,"SPAN  l_esell_qty                         :%ld:",l_esell_qty);		
					}

					l_total_buy_qty  = fn_maxl(l_ibuy_qty,abs(l_ebuy_qty));
					l_total_sell_qty = fn_maxl(l_isell_qty,abs(l_esell_qty));

					l_cover_qty  = l_total_buy_qty + l_total_sell_qty ;

					if(DEBUG_MSG_LVL_3)
          {
           	fn_userlog(c_ServiceName,"SPAN  l_total_buy_qty    :%ld:",l_total_buy_qty);
           	fn_userlog(c_ServiceName,"SPAN  l_total_sell_qty   :%ld:",l_total_sell_qty);
           	fn_userlog(c_ServiceName,"SPAN  l_cover_qty				 :%ld:",l_cover_qty);
           	fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_opnpstn_qty :%ld:",st_cntrct_pstn_crrnt.l_opnpstn_qty);
          }

					if (l_cover_qty != 0 )
					{
							fn_userlog(c_ServiceName,"SPAN cover quantity is greater than open position quantity."); 
					}
					else 
					{
						ptr_st_pstn_actn->l_actn_typ = SYSTEM_PLACE_ORDER ;
					}
					/**************** Ver 1.6 ended *************************/

					if(DEBUG_MSG_LVL_3)
					{
          	fn_userlog(c_ServiceName,"SPAN Action Type Is :%ld:",ptr_st_pstn_actn->l_actn_typ);
					}
        }

      	c_pos_avl = 'Y';
     	}

			fn_sum_spnpos ( st_cntrct_pstn_crrnt,ptr_st_undfut_pos_to_be );

			l_max_opn_qty	=	st_cntrct_pstn_crrnt.l_opnpstn_qty	+	 fn_maxl(st_cntrct_pstn_crrnt.l_ibuy_qty,st_cntrct_pstn_crrnt.l_exbuy_qty) ;
			l_min_opn_qty	=	st_cntrct_pstn_crrnt.l_opnpstn_qty	+	 fn_maxl(abs(st_cntrct_pstn_crrnt.l_isell_qty),abs(st_cntrct_pstn_crrnt.l_exsell_qty)) * -1 	;

			if ( st_cntrct_pstn_crrnt.c_prd_typ ==  'O' )
			{
				l_temp_qty  = fn_minl ( l_max_opn_qty , l_min_opn_qty );
				l_max_opn_qty = l_temp_qty  ;
				l_min_opn_qty = l_temp_qty  ;

			}

			i_expsr_rtrn	=	fn_cal_expsr	(	c_ServiceName,
																			st_cntrct_pstn_crrnt,
																			l_basket_id,
																			&d_expsr_mrgn,
																			&d_min_expsr_mrgn,
																			&d_mltplr,
																			c_err_msg
																		);

			if ( i_expsr_rtrn != 0 )
			{
				 fn_errlog(c_ServiceName, "S31845", LIBMSG, c_err_msg );
         EXEC SQL CLOSE :sys_cursor;
         tpfree((char *)ptr_fml_obuf);
         tpfree((char *)ptr_fml_ibuf);
         return -1;
			}

			EXEC SQL
				SELECT	NVL(FTQ_LST_TRD_PRC,0),  /*** Ver 1.1 ***/
								NVL(FTQ_CLS_PRC,0)       /*** Ver 1.1 ***/
				INTO		:d_ltp,		
								:d_clsng_prc
				FROM		FTQ_FO_TRD_QT
				WHERE		FTQ_XCHNG_CD	=	:st_cntrct_pstn_crrnt.c_xchng_cd
				AND			FTQ_PRDCT_TYP	=	:st_cntrct_pstn_crrnt.c_prd_typ
				AND			FTQ_UNDRLYNG	=	:st_cntrct_pstn_crrnt.c_undrlyng
				AND			FTQ_EXPRY_DT	=	:c_exp_dt
				AND			FTQ_EXER_TYP	=	:st_cntrct_pstn_crrnt.c_exer_typ
				AND			FTQ_OPT_TYP		=	:st_cntrct_pstn_crrnt.c_opt_typ
				AND			FTQ_STRK_PRC	=	:st_cntrct_pstn_crrnt.l_strike_prc;

			if(SQLCODE	!=	0 && SQLCODE != NO_DATA_FOUND	)
			{
       	fn_errlog ( c_ServiceName, "S31850", SQLMSG, c_err_msg );
       	EXEC SQL CLOSE :sys_cursor;
       	tpfree((char *)ptr_fml_obuf);
       	tpfree((char *)ptr_fml_ibuf);
				return -1;
			}
			
			if( SQLCODE == NO_DATA_FOUND )    /*** Note : NO_DATA_FOUND handling Added For CorpActn Issue ***/
			{
				d_ltp = 0.0;
				d_clsng_prc = 0.0;
			}


			if ( st_cntrct_pstn_crrnt.l_opnpstn_qty != 0 )
			{
				if ( st_cntrct_pstn_crrnt.c_prd_typ == 'O')
				{
			  	if(	st_cntrct_pstn_crrnt.l_opnpstn_qty < 0 )
					{
						if(DEBUG_MSG_LVL_3)
						{
							fn_userlog(c_ServiceName,"SPAN - Inside Option Profit / Loss Case.");
						}
						d_cntrct_pl	=	(double) abs(st_cntrct_pstn_crrnt.l_opnpstn_qty)	*	(	d_clsng_prc	-	d_ltp	);
					}

				}
				else
				{
					if (	st_cntrct_pstn_crrnt.c_prd_typ	==	'F'	)
					{
						if(DEBUG_MSG_LVL_3)
						{
							fn_userlog(c_ServiceName,"SPAN - Inside Option Profit / Loss Case.");
						}

						if( st_cntrct_pstn_crrnt.l_opnpstn_qty  > 0 )
        		{
          		d_cntrct_pl = ( d_ltp * (double) st_cntrct_pstn_crrnt.l_opnpstn_qty ) - st_cntrct_pstn_crrnt.d_opnpstn_val;

        		}
        		else if ( st_cntrct_pstn_crrnt.l_opnpstn_qty < 0 )
        		{
          		d_cntrct_pl = fabs(st_cntrct_pstn_crrnt.d_opnpstn_val)  -  ( d_ltp * (double) abs(st_cntrct_pstn_crrnt.l_opnpstn_qty) )  ;
						}
					}
				}
			}

			d_ltp	=	d_ltp	/	100;
   /* 7.9 */
				EXEC SQL
					SELECT	SEM_MAP_VL
					INTO		:c_stock_cd
					FROM		SEM_STCK_MAP
					WHERE		SEM_STCK_CD	=	:st_cntrct_pstn_crrnt.c_undrlyng
				/**	AND			SEM_ENTTY		=	3;																		** Ver 2.1 comment **/
					AND			SEM_ENTTY		=	DECODE(:sql_xchng_cd,'NFO',3,'BFO',14)	;	/** Ver 2.1 **/

				if ( SQLCODE  !=  0 )
      	{
        	fn_errlog ( c_ServiceName, "S31855", SQLMSG, c_err_msg );
        	EXEC SQL CLOSE :sys_cursor;
        	tpfree((char *)ptr_fml_obuf);
        	tpfree((char *)ptr_fml_ibuf);
        	return -1;
      	}
			SETNULL(c_stock_cd);

  		if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
  		{
				fn_userlog(c_ServiceName,"Asset code to SPAN server is :%s:",c_stock_cd.arr); /*Ver 2.1 */	
			}
 /* 7.9 */
			EXEC SQL
      	SELECT TO_CHAR(TO_DATE(:st_cntrct_pstn_crrnt.c_expry_dt,'DD-Mon-YYYY'),'dd-Mon-YY')
      	INTO  :c_expry_dt
      	FROM  DUAL;

    	if ( SQLCODE  !=  0 )
    	{
      	fn_errlog ( c_ServiceName, "S31860", SQLMSG, c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        tpfree((char *)ptr_fml_obuf);
        tpfree((char *)ptr_fml_ibuf);
      	return -1;
    	}

    	/*** l_strike_prc  = st_cntrct_pstn_crrnt.l_strike_prc/100  ; *** Commented in Ver 1.1 ***/

			/*** Ver 1.1 starts here ***/
			d_strike_prc  = (double) st_cntrct_pstn_crrnt.l_strike_prc / 100.00  ;	
			sprintf(c_strk_prc,"%lf",d_strike_prc);

			fn_spn_rtrim(c_strk_prc,'0');
			fn_spn_rtrim(c_strk_prc,'.');
			/*** Ver 1.1 ends here ***/

			if(	l_cntr	==	0	)
			{
				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"SPAN	-	l_cntr Is :%ld:",l_cntr);
				}

				if(st_cntrct_pstn_crrnt.c_prd_typ	==	'F')
				{
		  		sprintf(c_inp_strng11,"%s^%s~%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);

      	strcat(c_inp_strng1,c_inp_strng11);

      	sprintf(c_inp_strng22,"%s^%s~%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);

      	strcat(c_inp_strng2,c_inp_strng22);

				}
				else
				{
      		sprintf(c_inp_strng11,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp);	/*** Strike prc changed from long to char in Ver 1.1 ***/

      		strcat(c_inp_strng1,c_inp_strng11);

      		sprintf(c_inp_strng22,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

      		strcat(c_inp_strng2,c_inp_strng22);

				}
			}
			else
			{
				if(st_cntrct_pstn_crrnt.c_prd_typ  ==  'F')
        {
        	sprintf(c_inp_strng11,"%s~%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);

        	strcat(c_inp_strng1,c_inp_strng11);

        	sprintf(c_inp_strng22,"%s~%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);

        	strcat(c_inp_strng2,c_inp_strng22);

        }
        else
        {
          sprintf(c_inp_strng11,"%s~%c:%s:%c%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s~%c:%s:%c%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

          strcat(c_inp_strng2,c_inp_strng22);

        }
			}

			if(DEBUG_MSG_LVL_3)
      {
        fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_exp_dt.arr );
        fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntrct_pstn_crrnt.l_ibuy_qty );
        fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntrct_pstn_crrnt.d_ibuy_ord_val);
        fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntrct_pstn_crrnt.l_isell_qty );
        fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntrct_pstn_crrnt.d_isell_ord_val );
        fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntrct_pstn_crrnt.l_exbuy_qty );
        fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntrct_pstn_crrnt.d_exbuy_ord_val );
        fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntrct_pstn_crrnt.l_exsell_qty );
        fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", st_cntrct_pstn_crrnt.d_exsell_ord_val );
        fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntrct_pstn_crrnt.d_opnpstn_val);
        fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntrct_pstn_crrnt.d_mtm_opn_val );
    	}

      if(DEBUG_MSG_LVL_3) /*** Ver 7.3 ***/
      {
        fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntrct_pstn_crrnt.l_buy_exctd_qty );
        fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntrct_pstn_crrnt.l_sell_exctd_qty );
        fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntrct_pstn_crrnt.l_opnpstn_qty );
			}	
	  strcat(c_inp_strng1,",");
	  strcat(c_inp_strng2,",");

		l_cntr	++;
		d_undrlyng_pl	=	d_undrlyng_pl	+	d_cntrct_pl	;
		d_blkd_prmum	=	0.0	;

		d_expsr			=	d_expsr_mrgn	+	d_expsr	;
		d_min_expsr	=	d_min_expsr_mrgn	+	d_min_expsr	;
	}

	EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

	/* Type Casted by Mahesh for 1 paisa */
	d_undrlyng_pl = ( long long )d_undrlyng_pl;

  /** If the client is building a position for the first time in the **/
  /** contract then it will not appear in the above list. Hence we   **/
  /** process them seperately                                        **/

	if ( c_pos_avl == 'N' )
  {
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"INSIDE c_pos_avl == N ");
		}

		d_expsr_mrgn			=	0.0;
		d_min_expsr_mrgn	=	0.0;
		d_strike_prc			= 0.0;		/*** Ver 1.1 ***/

		i_cntrct_cnt++;							/*** Ver 1.1 ***/

		MEMSET(st_cntrct_pstn_md_rc.c_expry_dt);

    strcpy( st_cntrct_pstn_md_rc.c_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt );
    strcpy( st_cntrct_pstn_md_rc.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
    strcpy( st_cntrct_pstn_md_rc.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
    strcpy( st_cntrct_pstn_md_rc.c_expry_dt, ptr_st_pstn_actn->c_expry_dt );
    st_cntrct_pstn_md_rc.c_prd_typ  			= ptr_st_pstn_actn->c_prd_typ;
    st_cntrct_pstn_md_rc.c_exer_typ  			= ptr_st_pstn_actn->c_exrc_typ;
    st_cntrct_pstn_md_rc.c_opt_typ  			= ptr_st_pstn_actn->c_opt_typ;
    st_cntrct_pstn_md_rc.l_strike_prc  		= ptr_st_pstn_actn->l_strike_prc;
    st_cntrct_pstn_md_rc.c_ctgry_indstk		= ptr_st_pstn_actn->c_ctgry_indstk;
    st_cntrct_pstn_md_rc.l_ibuy_qty 			= 0;
    st_cntrct_pstn_md_rc.d_ibuy_ord_val 	= 0;
    st_cntrct_pstn_md_rc.l_isell_qty 			= 0;
    st_cntrct_pstn_md_rc.d_isell_ord_val 	= 0;
    st_cntrct_pstn_md_rc.l_exbuy_qty 			= 0;
    st_cntrct_pstn_md_rc.d_exbuy_ord_val 	= 0;
    st_cntrct_pstn_md_rc.l_exsell_qty 		= 0;
    st_cntrct_pstn_md_rc.d_exsell_ord_val	= 0;
    st_cntrct_pstn_md_rc.l_buy_exctd_qty 	= 0;
    st_cntrct_pstn_md_rc.l_sell_exctd_qty = 0;
    st_cntrct_pstn_md_rc.c_opnpstn_flw 		= 'N';
    st_cntrct_pstn_md_rc.l_opnpstn_qty 		= 0;
    st_cntrct_pstn_md_rc.d_opnpstn_val		= 0;
    st_cntrct_pstn_md_rc.d_mtm_opn_val 		= 0;
    st_cntrct_pstn_md_rc.d_imtm_opn_val		= 0;
		d_opt_prmum		=	0.0;
		d_blkd_prmum	=	0.0;
		l_buy_qty			=	0;
		l_sell_qty		=	0;


    EXEC SQL
      SELECT  NVL(FTQ_LST_TRD_PRC,0) /*** Ver 1.1 ***/
      INTO    :d_ltp
      FROM    FTQ_FO_TRD_QT
      WHERE		FTQ_XCHNG_CD	=	:st_cntrct_pstn_md_rc.c_xchng_cd
			AND   	FTQ_PRDCT_TYP = :st_cntrct_pstn_md_rc.c_prd_typ
      AND     FTQ_UNDRLYNG  = :st_cntrct_pstn_md_rc.c_undrlyng
      AND     FTQ_EXPRY_DT  = :st_cntrct_pstn_md_rc.c_expry_dt
      AND     FTQ_EXER_TYP  = :st_cntrct_pstn_md_rc.c_exer_typ
      AND     FTQ_OPT_TYP   = :st_cntrct_pstn_md_rc.c_opt_typ
      AND     FTQ_STRK_PRC  = :st_cntrct_pstn_md_rc.l_strike_prc;

    if(SQLCODE  !=  0 )
    {
      fn_errlog ( c_ServiceName, "S31865", SQLMSG, c_err_msg );
      EXEC SQL CLOSE :sys_cursor;
      tpfree((char *)ptr_fml_obuf);
      tpfree((char *)ptr_fml_ibuf);
      return -1;
    }

  	i_returncode =  fn_apply_spn_actn ( c_ServiceName,
                                        ptr_st_pstn_actn,
                                        &st_cntrct_pstn_md_rc,
                                        ptr_st_err_msg );
    if ( i_returncode == -1 )
    {
			fn_errlog( c_ServiceName, "S31870",LIBMSG , c_err_msg );
      EXEC SQL CLOSE :sys_cursor;
      tpfree((char *)ptr_fml_obuf);
      tpfree((char *)ptr_fml_ibuf);
      return -1;
    }

    fn_sum_spnpos ( st_cntrct_pstn_md_rc, ptr_st_undfut_pos_to_be );

	  memcpy ( &st_cntrct_pstn_crrnt, &st_cntrct_pstn_md_rc, sizeof(st_cntrct_pstn_crrnt ));

		i_expsr_rtrn  = fn_cal_expsr  ( c_ServiceName,
                                    st_cntrct_pstn_crrnt,
                                    l_basket_id,
                                     &d_expsr_mrgn,
                                     &d_min_expsr_mrgn,
                                     &d_mltplr,
                                     c_err_msg
                                   );

      if ( i_expsr_rtrn != 0 )
      {
         fn_errlog(c_ServiceName, "S31875", LIBMSG, c_err_msg );
         EXEC SQL CLOSE :sys_cursor;
         tpfree((char *)ptr_fml_obuf);
         tpfree((char *)ptr_fml_ibuf);
         return -1;
      }


	 	l_max_opn_qty = st_cntrct_pstn_md_rc.l_ibuy_qty	;
    l_min_opn_qty = st_cntrct_pstn_md_rc.l_isell_qty ;

		if(DEBUG_MSG_LVL_3)
		{	
			fn_userlog(c_ServiceName,"SPAN BUY QTY :%ld:",st_cntrct_pstn_md_rc.l_ibuy_qty);
			fn_userlog(c_ServiceName,"SPAN SELL QTY :%ld:",st_cntrct_pstn_md_rc.l_isell_qty);
			fn_userlog(c_ServiceName,"SPAN l_min_opn_qty :%ld:",l_min_opn_qty);
		}

    if (st_cntrct_pstn_md_rc.c_prd_typ  ==  'O' )
    {
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Just Before fn_minl");
				fn_userlog(c_ServiceName,"SPAN l_max_opn_qty :%ld:",l_max_opn_qty);
				fn_userlog(c_ServiceName,"SPAN l_min_opn_qty :%ld:",l_min_opn_qty);
			}

      l_temp_qty  = fn_minl ( l_max_opn_qty , l_min_opn_qty );

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Just After fn_minl");
				fn_userlog(c_ServiceName,"SPAN l_temp_qty Is :%ld:",l_temp_qty);
			}
      l_max_opn_qty = l_temp_qty  ;
      l_min_opn_qty = l_temp_qty  ;
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"SPAN l_max_opn_qty :%ld:",l_max_opn_qty);
				fn_userlog(c_ServiceName,"SPAN l_min_opn_qty :%ld:",l_min_opn_qty);
			}

			if( st_cntrct_pstn_md_rc.l_ibuy_qty  > 0 )
      {
				if(DEBUG_MSG_LVL_3)
				{
      		fn_userlog(c_ServiceName,"SPAN Inside Option Buy Position.");
				}
        d_opt_prmum = (double) ptr_st_pstn_actn->l_new_qty * (double) ptr_st_pstn_actn->l_new_rt;	/*** Typecasted long variables to double in Ver 3.4 ***/
      }
    }

		d_ltp	=	d_ltp	/	100;
  /* 7.9 */
			EXEC SQL
      	SELECT  SEM_MAP_VL
      	INTO    :c_stock_cd
      	FROM    SEM_STCK_MAP
      	WHERE   SEM_STCK_CD = :st_cntrct_pstn_md_rc.c_undrlyng
      /**	AND     SEM_ENTTY   =  3 ;                                   ** Ver 2.1 comment**/
      	AND     SEM_ENTTY   = DECODE(:sql_xchng_cd,'NFO',3,'BFO',14);		/*** Ver 2.1 **/


			if ( SQLCODE  !=  0 )
    	{
      	fn_errlog ( c_ServiceName, "S31880", SQLMSG, c_err_msg );
      	EXEC SQL CLOSE :sys_cursor;
      	tpfree((char *)ptr_fml_obuf);
      	tpfree((char *)ptr_fml_ibuf);
      	return -1;
    	}

		SETNULL(c_stock_cd);
 /* 7.9 */
		EXEC SQL	
			SELECT TO_CHAR(TO_DATE(:st_cntrct_pstn_md_rc.c_expry_dt,'DD-Mon-YYYY'),'dd-Mon-YY')
			INTO	:c_expry_dt
			FROM	DUAL;

		if ( SQLCODE	!=	0	)
		{
			fn_errlog ( c_ServiceName, "S31885", SQLMSG, c_err_msg );
      EXEC SQL CLOSE :sys_cursor;
      tpfree((char *)ptr_fml_obuf);
      tpfree((char *)ptr_fml_ibuf);
      return -1;
		}

		/*** l_strike_prc	=	st_cntrct_pstn_md_rc.l_strike_prc/100	; *** Commented in Ver 1.1 ***/

		/*** Ver 1.1 starts here ***/
		d_strike_prc  = (double) st_cntrct_pstn_md_rc.l_strike_prc / 100.00  ;	
		sprintf(c_strk_prc,"%lf",d_strike_prc);

		fn_spn_rtrim(c_strk_prc,'0');
		fn_spn_rtrim(c_strk_prc,'.');
		/*** Ver 1.1 ends here ***/

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN c_expry_dt Is :%s:",c_expry_dt);
		}
		
		if( l_cntr  ==  0 )
		{
			if(st_cntrct_pstn_md_rc.c_prd_typ	==  'F')
    	{
				sprintf(c_inp_strng11,"%s^%s~%c:%s^%ld^%2.2lf",st_cntrct_pstn_md_rc.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_md_rc.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);
    	
				strcat(c_inp_strng1,c_inp_strng11);

				sprintf(c_inp_strng22,"%s^%s~%c:%s^%ld^%2.2lf",st_cntrct_pstn_md_rc.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_md_rc.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);

      	strcat(c_inp_strng2,c_inp_strng22);

    	}
			else if ( st_cntrct_pstn_md_rc.c_prd_typ	== 'O' )
    	{

				sprintf(c_inp_strng11,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn_md_rc.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_md_rc.c_prd_typ,c_expry_dt,st_cntrct_pstn_md_rc.c_opt_typ,st_cntrct_pstn_md_rc.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

				strcat(c_inp_strng1,c_inp_strng11);

				sprintf(c_inp_strng22,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn_md_rc.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_md_rc.c_prd_typ,c_expry_dt,st_cntrct_pstn_md_rc.c_opt_typ,st_cntrct_pstn_md_rc.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

      	strcat(c_inp_strng2,c_inp_strng22);

    	}
		}
		else
		{
			if(st_cntrct_pstn_md_rc.c_prd_typ	==  'F')
      { 
        sprintf(c_inp_strng11,"%s~%c:%s^%ld^%2.2lf",c_stock_cd.arr,st_cntrct_pstn_md_rc.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);

        strcat(c_inp_strng1,c_inp_strng11);

        sprintf(c_inp_strng22,"%s~%c:%s^%ld^%2.2lf",c_stock_cd.arr,st_cntrct_pstn_md_rc.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);

        strcat(c_inp_strng2,c_inp_strng22);

      }
      else if ( st_cntrct_pstn_md_rc.c_prd_typ	== 'O' )
      {

        sprintf(c_inp_strng11,"%s~%c:%s:%c%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_md_rc.c_prd_typ,c_expry_dt,st_cntrct_pstn_md_rc.c_opt_typ,st_cntrct_pstn_md_rc.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

        strcat(c_inp_strng1,c_inp_strng11);

        sprintf(c_inp_strng22,"%s~%c:%s:%c%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_md_rc.c_prd_typ,c_expry_dt,st_cntrct_pstn_md_rc.c_opt_typ,st_cntrct_pstn_md_rc.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

        strcat(c_inp_strng2,c_inp_strng22);

      }
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN	-	Option Premium Is :%lf:",d_opt_prmum);
		}

		d_total_prmum	=	d_opt_prmum	*	(-1)	;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN	-	Total Premium Is :%lf:",d_total_prmum);
		}

	  switch ( ptr_st_pstn_actn->l_actn_typ )
    {
      case  ORS_NEW_ORD_REQ:

        strcpy( c_narration_id , ON_ORDER_PLACEMENT);
        c_prmum_dr_without_lmt_flg	= DEBIT_WHEN_LIMIT;
        break;

      case  SYSTEM_PLACE_ORDER:

        strcpy( c_narration_id , ON_ORDER_PLACEMENT);
        c_prmum_dr_without_lmt_flg	= DEBIT_TILL_LIMIT;
        break;

      default:
        strcpy( c_err_msg, "Invalid action type");
        fn_userlog ( c_ServiceName,"Invalid action type");
       	tpfree((char *)ptr_fml_obuf);
        tpfree((char *)ptr_fml_ibuf);
        return -1;
        break;
    }

    d_premium=0.0 ; /** Ver 3.1 **/

    if ( d_total_prmum  <  0 )
    {

        /*** ver 10.8 starts ***/
         MEMSET(c_tmp_rmrks_ob);
         strcpy ( c_tmp_rmrks_ob, ptr_st_pstn_actn->c_ref_rmrks );
         sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"OPTPREMBUYALLWD |%s",c_tmp_rmrks_ob);
         rtrim( ptr_st_pstn_actn->c_ref_rmrks);
         if( DEBUG_MSG_LVL_5 )
         {
           fn_userlog ( c_ServiceName, "CR170192 :%s:",ptr_st_pstn_actn->c_ref_rmrks);
         }
         /*** ver 10.8 ends *****/
			d_balance_amt  = 0.0;   /*** Ver 1.1 ***/

    	i_returncode = fn_upd_spnlimits( c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    c_prmum_dr_without_lmt_flg,
                                    d_total_prmum,
                                    &d_balance_amt);
      if ( i_returncode != 0 )
      {
        switch ( i_returncode )
        {
          case  INSUFFICIENT_LIMITS :

            fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg );
            /**** Ver 3.1 Starts Here *******
            EXEC SQL CLOSE :sys_cursor;
            tpfree((char *)ptr_fml_obuf);
            tpfree((char *)ptr_fml_ibuf);
            return INSUFFICIENT_LIMITS  ;
            ****** Ver 3.1 Ends Here ****/

            /**** Ver 3.1 Starts Here ****/
  					if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
  					{
            	fn_userlog(c_ServiceName,"Inside INSUFFICIENT_LIMITS Option Premium Block of First time New Order");
            }

            /*** Ver 8.8 Start ***/
            if( c_balance_flg != 'Y' )
            {
              d_balance_amt_tmp = d_balance_amt;
              c_balance_flg = 'Y';
            }
            /*** Ver 8.8 Ends ***/

						d_premium = d_total_prmum;
            c_prm_insufficent_flg ='Y';
            break;
            /**** Ver 3.1 Ends Here ***/
          default:

            fn_errlog( c_ServiceName, "S31890",LIBMSG , c_err_msg );
            EXEC SQL CLOSE :sys_cursor;
            tpfree((char *)ptr_fml_obuf);
            tpfree((char *)ptr_fml_ibuf);
            return -1;
        }
      }
			d_total_prmum = d_total_prmum - d_balance_amt;		/*** Ver 3.4 ***/
      strcpy ( ptr_st_pstn_actn->c_ref_rmrks ,c_tmp_rmrks_ob); /** 10.8 **/
      MEMSET(c_tmp_rmrks_ob); /*** ver 10.8 **/
    }


		/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
  	if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
		{
			 fn_userlog(c_ServiceName,"SPAN	-	d_undrlyng_pl Is :%lf:",d_undrlyng_pl);
		}

		d_expsr     = d_expsr_mrgn  + d_expsr ;
    d_min_expsr = d_min_expsr_mrgn  + d_min_expsr ;
	}


 	l_length1 = strlen(c_inp_strng1);

  if( c_inp_strng1[l_length1  - 1 ] == ',')
  {
  	c_inp_strng1[l_length1 -1]  ='\0';
 	}

  l_length2 = strlen(c_inp_strng2);

  if( c_inp_strng2[l_length2  - 1 ] == ',')
  {
    c_inp_strng2[l_length2 -1]  ='\0';
  }

	if ( st_cntrct_pstn_md_rc.l_opnpstn_qty > 0 )
  {
    st_cntrct_pstn_md_rc.c_opnpstn_flw = BUY;
  }
  else if ( st_cntrct_pstn_md_rc.l_opnpstn_qty < 0 )
  {
    st_cntrct_pstn_md_rc.c_opnpstn_flw = SELL;
  }
  else
  {
    st_cntrct_pstn_md_rc.c_opnpstn_flw = NEUTRAL;
  }

	/** Update the contract level position on which the action has been	applied **/

	if( c_pos_avl == 'N')
  {
    MEMSET(c_ucc_cd);   /** Ver 13.0 **/

      /*** Added in VER 12.8 Starts here : Fetching UCC code for client ***/

      EXEC SQL
      SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
      INTO  :c_ucc_cd
      FROM  CLM_CLNT_MSTR
      WHERE CLM_MTCH_ACCNT = :sql_cln_mtch_accnt;


  if ( SQLCODE  !=  0 )
  {
    fn_errlog ( c_ServiceName, "S31895", SQLMSG, c_err_msg );
    EXEC SQL CLOSE :sys_cursor;
    tpfree((char *)ptr_fml_obuf);
    tpfree((char *)ptr_fml_ibuf);
    return -1;
  }

      rtrim(c_ucc_cd);

      if(DEBUG_MSG_LVL_0)
        fn_userlog(c_ServiceName," VER 13.0 -- Match ID :%s: have UCC code :%s:", sql_cln_mtch_accnt, c_ucc_cd);

      /*** VER 13.0 ends here ***/

  /* 7.9 */
    EXEC SQL
      INSERT INTO FCP_FO_SPN_CNTRCT_PSTN
      (
				FCP_CLM_MTCH_ACCNT,
        FCP_XCHNG_CD,
        FCP_PRDCT_TYP,
        FCP_INDSTK,
        FCP_UNDRLYNG,
        FCP_EXPRY_DT,
        FCP_EXER_TYP,
        FCP_STRK_PRC,
        FCP_OPT_TYP,
        FCP_IBUY_QTY,
        FCP_IBUY_ORD_VAL,
        FCP_ISELL_QTY,
        FCP_ISELL_ORD_VAL,
        FCP_EXBUY_QTY,
        FCP_EXBUY_ORD_VAL,
        FCP_EXSELL_QTY,
        FCP_EXSELL_ORD_VAL,
        FCP_BUY_EXCTD_QTY,
        FCP_SELL_EXCTD_QTY,
        FCP_OPNPSTN_FLW,
        FCP_OPNPSTN_QTY,
        FCP_OPNPSTN_VAL,
        FCP_MTM_OPN_VAL,
				FCP_OPT_PREMIUM,
        FCP_UCC_CD    /*** Added in VER 13.0 ***/
      )
      VALUES
      (
				:st_cntrct_pstn_md_rc.c_cln_mtch_accnt,
        :st_cntrct_pstn_md_rc.c_xchng_cd,
        :st_cntrct_pstn_md_rc.c_prd_typ,
        :st_cntrct_pstn_md_rc.c_ctgry_indstk,
        :st_cntrct_pstn_md_rc.c_undrlyng,
        TO_DATE(:st_cntrct_pstn_md_rc.c_expry_dt,'DD-Mon-YYYY'),
        :st_cntrct_pstn_md_rc.c_exer_typ,
        :st_cntrct_pstn_md_rc.l_strike_prc,
        :st_cntrct_pstn_md_rc.c_opt_typ,
        :st_cntrct_pstn_md_rc.l_ibuy_qty,
        :st_cntrct_pstn_md_rc.d_ibuy_ord_val,
        :st_cntrct_pstn_md_rc.l_isell_qty,
        :st_cntrct_pstn_md_rc.d_isell_ord_val,
        :st_cntrct_pstn_md_rc.l_exbuy_qty,
        :st_cntrct_pstn_md_rc.d_exbuy_ord_val,
        :st_cntrct_pstn_md_rc.l_exsell_qty,
        :st_cntrct_pstn_md_rc.d_exsell_ord_val,
        :st_cntrct_pstn_md_rc.l_buy_exctd_qty,
        :st_cntrct_pstn_md_rc.l_sell_exctd_qty,
        :st_cntrct_pstn_md_rc.c_opnpstn_flw,
        :st_cntrct_pstn_md_rc.l_opnpstn_qty,
        :st_cntrct_pstn_md_rc.d_opnpstn_val,
        :st_cntrct_pstn_md_rc.d_mtm_opn_val,
				:d_total_prmum * (-1),
        :c_ucc_cd                                      /*** Added in VER 13.0 ***/ 
     );

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31900", SQLMSG, c_err_msg );
      EXEC SQL CLOSE :sys_cursor;
      tpfree((char *)ptr_fml_obuf);
      tpfree((char *)ptr_fml_ibuf);
      return -1;
    }
	}
  else
  {
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN - Before Update d_total_prmum Is :%lf:",d_total_prmum);
		}
 /* 7.9 */
    EXEC SQL
			UPDATE  FCP_FO_SPN_CNTRCT_PSTN
      SET     FCP_IBUY_QTY       = :st_cntrct_pstn_md_rc.l_ibuy_qty,
              FCP_IBUY_ORD_VAL   = :st_cntrct_pstn_md_rc.d_ibuy_ord_val,
              FCP_ISELL_QTY      = :st_cntrct_pstn_md_rc.l_isell_qty,
              FCP_ISELL_ORD_VAL  = :st_cntrct_pstn_md_rc.d_isell_ord_val,
              FCP_EXBUY_QTY      = :st_cntrct_pstn_md_rc.l_exbuy_qty,
              FCP_EXBUY_ORD_VAL  = :st_cntrct_pstn_md_rc.d_exbuy_ord_val,
              FCP_EXSELL_QTY     = :st_cntrct_pstn_md_rc.l_exsell_qty,
              FCP_EXSELL_ORD_VAL = :st_cntrct_pstn_md_rc.d_exsell_ord_val,
              FCP_BUY_EXCTD_QTY  = :st_cntrct_pstn_md_rc.l_buy_exctd_qty,
              FCP_SELL_EXCTD_QTY = :st_cntrct_pstn_md_rc.l_sell_exctd_qty,
              FCP_OPNPSTN_FLW    = :st_cntrct_pstn_md_rc.c_opnpstn_flw,
              FCP_OPNPSTN_QTY    = :st_cntrct_pstn_md_rc.l_opnpstn_qty,
              FCP_OPNPSTN_VAL    = :st_cntrct_pstn_md_rc.d_opnpstn_val,
              FCP_MTM_OPN_VAL    = :st_cntrct_pstn_md_rc.d_mtm_opn_val
      WHERE   FCP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
      AND     FCP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
      AND     FCP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
      AND     FCP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
			AND			FCP_OPT_TYP					=	:ptr_st_pstn_actn->c_opt_typ
			AND			FCP_STRK_PRC				=	:ptr_st_pstn_actn->l_strike_prc
      AND     FCP_EXPRY_DT       = TO_DATE(:ptr_st_pstn_actn->c_expry_dt,'DD-Mon-YYYY')
      AND     FCP_EXER_TYP       = :ptr_st_pstn_actn->c_exrc_typ;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31905", SQLMSG, c_err_msg );
      EXEC SQL CLOSE :sys_cursor;
      tpfree((char *)ptr_fml_obuf);
      tpfree((char *)ptr_fml_ibuf);
      return -1;
    }
 	}

	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Calcualted underlying level position" );
    fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_uibuy_qty );
    fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", ptr_st_undfut_pos_to_be->d_uibuy_val );
    fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_uisell_qty );
    fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", ptr_st_undfut_pos_to_be->d_uisell_val );
    fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_uexbuy_qty );
    fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", ptr_st_undfut_pos_to_be->d_uexbuy_val );
    fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_uexsell_qty );
    fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", ptr_st_undfut_pos_to_be->d_uexsell_val );
    fn_userlog ( c_ServiceName, "Original open val :%lf:", ptr_st_undfut_pos_to_be->d_uopnpstn_val);
    fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", ptr_st_undfut_pos_to_be->d_umtm_opn_val );
  }

  if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
  {
    fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", ptr_st_undfut_pos_to_be->l_ubuy_exctd_qty );
    fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", ptr_st_undfut_pos_to_be->l_usell_exctd_qty );
    fn_userlog ( c_ServiceName, "Open qty          :%ld:", ptr_st_undfut_pos_to_be->l_uopnpstn_qty );
	}
	/*** Ver 1.1 starts here ***/
	/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
	if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
	{
		fn_userlog( c_ServiceName, "i_cntrct_cnt = :%d:",i_cntrct_cnt);
	}

	if (i_cntrct_cnt > 10)
	{
		if ( Fadd32 (ptr_fml_ibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)	==	-1 )
		{
			fn_errlog( c_ServiceName, "S31910",FMLMSG , c_err_msg );
			tpfree((char *)ptr_fml_obuf);
			tpfree((char *)ptr_fml_ibuf);
			return -1;
		}
		fn_cpy_ddr ( ptr_st_pstn_actn->c_rout_crt );

		MEMSET(c_inp_strng);
		strcpy(c_inp_strng,c_inp_strng1);
		strcat(c_inp_strng,"\n");
			
		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"c_inp_strng 1 = :%s:",c_inp_strng);
		}

		if ( Fadd32 (ptr_fml_ibuf,FFO_REMARKS,(char *)c_inp_strng,0)	==	-1 )
		{
			fn_errlog( c_ServiceName, "S31915",FMLMSG , c_err_msg );
			tpfree((char *)ptr_fml_obuf);
			tpfree((char *)ptr_fml_ibuf);
			return -1;
		}

		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}

		i_rtrn_cd1	=	tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_ibuf,0,(char **)&ptr_fml_obuf,&li_len_tobuf,0);

		if(	i_rtrn_cd1 != 0	)
		{
			/*** Ver 1.2 ERROR Handeling changed for Maximum Packet size   *****/
			if(Fget32(ptr_fml_obuf,FFO_ERR_MSG,0,(char *)c_err_msg,0) == -1)
      {
				fn_errlog( c_ServiceName, "S31920",TPMSG , c_err_msg );
      	tpfree((char *)ptr_fml_obuf);
      	tpfree((char *)ptr_fml_ibuf);
      	return -1;
			}

  		if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
  		{	
				fn_userlog(c_ServiceName, "ERROR message is |%s|",c_err_msg);
			}

			if(strcmp(c_err_msg,"Packet Length Exceeds Max Length") == 0)
			{
				fn_errlog( c_ServiceName, "S31925",TPMSG , c_err_msg );
        tpfree((char *)ptr_fml_obuf);
        tpfree((char *)ptr_fml_ibuf);
				return MAX_PACKET_SIZE;			
			}
			else
			{
				fn_errlog( c_ServiceName, "S31930",TPMSG , c_err_msg );
				tpfree((char *)ptr_fml_obuf);
				tpfree((char *)ptr_fml_ibuf);
				return -1;
			}	
		}
		
		if ( Fget32 (ptr_fml_obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng1,0)  ==  -1 )
		{	
			fn_errlog( c_ServiceName, "S31935",FMLMSG , c_err_msg );
			tpfree((char *)ptr_fml_obuf);
			tpfree((char *)ptr_fml_ibuf);
			return -1;
		}

		/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
  	if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
		{
			fn_userlog(c_ServiceName,"Output String 1 Is :%s:",c_op_strng1);
		}


    /*** Ver 11.0 Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31940",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_obuf);
      tpfree((char *)ptr_fml_ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 11.0 Ends here ***/ 

		MEMSET(c_inp_strng);

		/**** Ver 2.1 Bug Fix Starts ****/
		if(strcmp(sql_xchng_cd,"NFO") == 0)
		{
			strcpy(c_inp_strng,"1^NSE^");
		}
		else if(strcmp(sql_xchng_cd,"BFO") == 0)
		{
			strcpy(c_inp_strng,"1^BSE^");
		}
		/**** Ver 2.1 Ends *****/
		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"Initial c_inp_strng2 = :%s:",c_inp_strng2);
		}

		fn_spn_ltrim(c_inp_strng2,'|');
		/*sprintf(c_inp_strng,"1^%s",c_inp_strng2);  *** Ver 2.1 comment ***/ 
		/*sprintf(c_inp_strng,"%s",c_inp_strng2);		*** Ver 2.1 **/ 
		strcat(c_inp_strng,c_inp_strng2);		/*** Ver 2.1 **/ 
		strcat(c_inp_strng,"\n");	

		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"c_inp_strng 2 = :%s:",c_inp_strng);
		}

		if ( Fchg32 (ptr_fml_ibuf,FFO_REMARKS,0,(char *)c_inp_strng,0)	==	-1 )
		{
			fn_errlog( c_ServiceName, "S31945",FMLMSG , c_err_msg );
			tpfree((char *)ptr_fml_obuf);
			tpfree((char *)ptr_fml_ibuf);
			return -1;
		}

		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}
		
		i_rtrn_cd1	=	tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_ibuf,0,(char **)&ptr_fml_obuf,&li_len_tobuf,0);

		if(	i_rtrn_cd1 != 0	)
		{
			/*** Ver 1.2 ERROR Handeling changed for Maximum Packet size   *****/

      if(Fget32(ptr_fml_obuf,FFO_ERR_MSG,0,(char *)c_err_msg,0) == -1)
      {
        fn_errlog( c_ServiceName, "S31950",TPMSG , c_err_msg );
        tpfree((char *)ptr_fml_obuf);
        tpfree((char *)ptr_fml_ibuf);
        return -1;
      }
  		if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
  		{
      	fn_userlog(c_ServiceName, "ERROR message is |%s|",c_err_msg);
			}

      if(strcmp(c_err_msg,"Packet Length Exceeds Max Length") == 0)
      {
        fn_errlog( c_ServiceName, "S31955",TPMSG , c_err_msg );
        tpfree((char *)ptr_fml_obuf);
        tpfree((char *)ptr_fml_ibuf);
        return MAX_PACKET_SIZE;
      }
      else
      {
				fn_errlog( c_ServiceName, "S31960",TPMSG , c_err_msg );
				tpfree((char *)ptr_fml_obuf);
				tpfree((char *)ptr_fml_ibuf);
				return -1;
			}
		}
		
		if ( Fget32 (ptr_fml_obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng2,0)  ==  -1 )
		{	
			fn_errlog( c_ServiceName, "S31965",FMLMSG , c_err_msg );
			tpfree((char *)ptr_fml_obuf);
			tpfree((char *)ptr_fml_ibuf);
			return -1;
		}
	
		fn_spn_ltrim(c_op_strng2,'1');
		fn_spn_ltrim(c_op_strng2,'^');

		/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
  	if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
		{
			fn_userlog(c_ServiceName,"Output String 2 Is :%s:",c_op_strng2);
		}

    /*** Ver 11.0 Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn2,
                                    &d_bnov2,
                                    &d_total_bmrgn2,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31970",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_obuf);
      tpfree((char *)ptr_fml_ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn2 :%lf: d_bnov2:%lf: d_total_bmrgn2:%lf:",d_spn_bmrgn2,d_bnov2,d_total_bmrgn2);
    }
    /*** Ver 11.0 Ends here ***/


	}
	else
	{
	/*** Ver 1.1 Ends here ***/
		strcpy(c_inp_strng,c_inp_strng1);
		strcat(c_inp_strng,c_inp_strng2);
		strcat(c_inp_strng,"\n");		

		if ( Fadd32 (ptr_fml_ibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)	==	-1 )
		{
			fn_errlog( c_ServiceName, "S31975",FMLMSG , c_err_msg );
			EXEC SQL CLOSE :sys_cursor;
			tpfree((char *)ptr_fml_obuf);
			tpfree((char *)ptr_fml_ibuf);
			return -1;
		}

		if ( Fadd32 (ptr_fml_ibuf,FFO_REMARKS,(char *)c_inp_strng,0)	==	-1 )
		{
			fn_errlog( c_ServiceName, "S31980",FMLMSG , c_err_msg );
			EXEC SQL CLOSE :sys_cursor;
			tpfree((char *)ptr_fml_obuf);
			tpfree((char *)ptr_fml_ibuf);
			return -1;
		}
		
		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}

		fn_cpy_ddr ( ptr_st_pstn_actn->c_rout_crt );
		
		i_rtrn_cd1	=	tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_ibuf,0,(char **)&ptr_fml_obuf,&li_len_tobuf,0);

		if(	i_rtrn_cd1 != 0	)
		{
			fn_errlog( c_ServiceName, "S31985",TPMSG , c_err_msg );
			EXEC SQL CLOSE :sys_cursor;
			tpfree((char *)ptr_fml_obuf);
			tpfree((char *)ptr_fml_ibuf);
			return -1;
		}

		if ( Fget32 (ptr_fml_obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng,0)  ==  -1 )
		{	
			fn_errlog( c_ServiceName, "S31990",FMLMSG , c_err_msg );
			EXEC SQL CLOSE :sys_cursor;
			tpfree((char *)ptr_fml_obuf);
			tpfree((char *)ptr_fml_ibuf);
			return -1;
		}

		/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
  	if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
		{
			fn_userlog(c_ServiceName,"Output String Is :%s:",c_op_strng);
		}

		strcpy(c_op_strng1,strtok(c_op_strng,"|"));
		strcpy(c_op_strng2,strtok(null_ptr,"|"));


    /*** Ver 11.0 Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31995",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_obuf);
      tpfree((char *)ptr_fml_ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4) 
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 11.0 Ends here ***/


	}	/*** Ver 1.1 ***/

	strcpy(c_mrgn_indctr,strtok(c_op_strng1,"^"));
	strcpy(c_xchng_cd1,strtok(null_ptr,"^"));				/*** ver 2.1 ***/
	strcpy(c_seq_num1,strtok(null_ptr,"^"));
	strcpy(c_mtch_accnt1,strtok(null_ptr,"^"));
	strcpy(c_spn_mrgn1,strtok(null_ptr,"^"));
	strcpy(c_nov1,strtok(null_ptr,"^"));
	strcpy(c_total_mrgn1,strtok(null_ptr,"^"));

	if (i_cntrct_cnt > 10)													/** Ver 3.5 If condition added **/
	{
		strcpy(c_xchng_cd1,strtok(c_op_strng2,"^"));				/*** ver 2.1 ***/
		/*strcpy(c_seq_num2,strtok(c_op_strng2,"^"));				*** Ver 2.1 comment **/
		strcpy(c_seq_num2,strtok(null_ptr,"^"));					/*** ver 2.1 ***/
	}
	else																					 /** ver 3.5 Else condition ***/
	{
		strcpy(c_seq_num2,strtok(c_op_strng2,"^"));
	}
	strcpy(c_mtch_accnt2,strtok(null_ptr,"^"));
	strcpy(c_spn_mrgn2,strtok(null_ptr,"^"));
	strcpy(c_nov2,strtok(null_ptr,"^"));
	strcpy(c_total_mrgn2,strtok(null_ptr,"^"));

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"SPAN c_xchng_cd1 Is :%s:",c_xchng_cd1);	/*** Ver 2.1 **/
		fn_userlog(c_ServiceName,"SPAN c_xchng_cd2 Is :%s:",c_xchng_cd2);	/*** Ver 2.1 **/
		fn_userlog(c_ServiceName,"SPAN c_mtch_accnt1 Is :%s:",c_mtch_accnt1);
		fn_userlog(c_ServiceName,"SPAN c_mtch_accnt2 Is :%s:",c_mtch_accnt2); /** Ver 3.5 **/
		fn_userlog(c_ServiceName,"SPAN c_spn_mrgn2 Is :%s:",c_spn_mrgn2); 		/** Ver 3.5 **/
		fn_userlog(c_ServiceName,"SPAN c_nov2 Is :%s:",c_nov2); 							/** Ver 3.5 **/
		fn_userlog(c_ServiceName,"SPAN c_total_mrgn2 Is :%s:",c_total_mrgn2); /** Ver 3.5 **/
	}

	if ( c_mtch_accnt1[0] == '1' || c_mtch_accnt1[0] == '2' || c_mtch_accnt1[0] == '3' )  /*** Ver 1.1 ***/
		{	
			fn_errlog( c_ServiceName, "S32000",LIBMSG , c_err_msg );
			fn_userlog(c_ServiceName,"Service Return Error.");
   	 	EXEC SQL CLOSE :sys_cursor;
    	tpfree((char *)ptr_fml_obuf);
    	tpfree((char *)ptr_fml_ibuf);
			return -1	;
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"c_total_mrgn1 Is :%s:",c_total_mrgn1);
			fn_userlog(c_ServiceName,"c_total_mrgn2 Is :%s:",c_total_mrgn2);
		}

		d_spn_mrgn1		=	atof(c_spn_mrgn1);
		d_spn_mrgn2 	= atof(c_spn_mrgn2);
		d_nov1				=	atof(c_nov1);
		d_nov2				=	atof(c_nov2);
		d_total_mrgn1	=	atof(c_total_mrgn1);
		d_total_mrgn2	=	atof(c_total_mrgn2);

    if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"d_total_mrgn1 Is :%lf:",d_total_mrgn1);
			fn_userlog(c_ServiceName,"d_total_mrgn2 Is :%lf:",d_total_mrgn2);
		}

    /*** Ver 11.0 Starts here ***/
     d_spn_bmrgn = fn_maxd(d_spn_bmrgn1,d_spn_bmrgn2) * 100;
     d_bnov      = fn_maxd(d_bnov1,d_bnov2) * 100;
     d_total_bmrgn = fn_maxd(d_total_bmrgn1,d_total_bmrgn2) * 100;

     if(DEBUG_MSG_LVL_3)
     {
       fn_userlog(c_ServiceName,"d_spn_bmrgn :%lf: d_bnov :%lf: d_total_bmrgn:%lf:",d_spn_bmrgn,d_bnov,d_total_bmrgn);
     }
    /*** Ver 11.0 Ends here ***/


		st_undpstn_tobe.d_uspan_nenov_mrgn	=	fn_maxd(d_spn_mrgn1,d_spn_mrgn2) * 100;
		st_undpstn_tobe.d_net_optn_val			=	fn_maxd(d_nov1,d_nov2) * 100;
		st_undpstn_tobe.d_uspan_wenov_mrgn	=	fn_maxd(d_total_mrgn1,d_total_mrgn2) * 100 ;

    /*** Ver 11.0 Starts Here ***/
    st_undpstn_tobe.d_uspan_nenov_mrgn  = fn_maxd(st_undpstn_tobe.d_uspan_nenov_mrgn,d_spn_bmrgn);
    st_undpstn_tobe.d_net_optn_val = fn_maxd(st_undpstn_tobe.d_net_optn_val,d_bnov);
    st_undpstn_tobe.d_uspan_wenov_mrgn = fn_maxd(st_undpstn_tobe.d_uspan_wenov_mrgn,d_total_bmrgn);
    /*** Ver 11.0 Ends Here ***/


		d_spn_mrgn		=	st_undpstn_tobe.d_uspan_nenov_mrgn		;			/***	SPAN	MRGN	***/
		d_nov					=	st_undpstn_tobe.d_net_optn_val				;			/***	NOV	***/
		d_total_mrgn	=	st_undpstn_tobe.d_uspan_wenov_mrgn		;			/***	SPAN +/- NOV	***/

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN - SPAN MARGIN Is :%lf:",d_spn_mrgn);
			fn_userlog(c_ServiceName,"SPAN - SPAN MARGIN Is :%lf:",st_undpstn_tobe.d_uspan_wenov_mrgn);
		}

		i_returncode	=	fn_cal_mrgn ( c_ServiceName,
     		           								d_total_mrgn,
       		          							d_mltplr,
         		       								d_expsr,
																	d_min_expsr,
           		      							&d_min_mrgn,
             		    							&d_intl_mrgn,
               		  							c_err_msg
               									);

		if ( i_returncode	!=	0	)
		{
			fn_errlog( c_ServiceName, "S32005",LIBMSG , c_err_msg );
   		fn_userlog(c_ServiceName,"Service Return Error.");
   		EXEC SQL CLOSE :sys_cursor;
   		tpfree((char *)ptr_fml_obuf);
   		tpfree((char *)ptr_fml_ibuf);
   		return -1 ;
		}

		/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
 		if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
		{
			fn_userlog(c_ServiceName,"SPAN	-	SPAN MARGIN IS :%lf:",d_spn_mrgn);
			fn_userlog(c_ServiceName,"SPAN	-	NOV	IS :%lf:",d_nov);
			fn_userlog(c_ServiceName,"SPAN	-	Exposure	IS :%lf:",d_expsr);
			fn_userlog(c_ServiceName,"SPAN	-	Min. Margin	IS :%lf:",d_min_mrgn);
			fn_userlog(c_ServiceName,"SPAN	-	Initial Margin IS :%lf:",d_intl_mrgn);
		}

		 if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
		 {
			      fn_userlog(c_ServiceName,"SPAN  - Total Margin  IS :%lf:",d_total_mrgn);
		 }	

		/* Type Casted by Mahesh for 1 paisa issue */

		/***  if(ptr_st_pstn_actn->c_nkd_blkd_flg != ROLLOVER)      *** Ver 1.8 *** Commented in Ver 8.1 ***/
    if(ptr_st_pstn_actn->c_nkd_blkd_flg != ROLLOVER && ptr_st_pstn_actn->c_nkd_blkd_flg != ROLLOVER_WITH_SPREAD)      /*** Condtion Modified in Ver 8.1 ***/
		{
			st_undpstn_tobe.d_multpr						=	d_mltplr			;
			st_undpstn_tobe.d_eba_expr_mrgn			=	(long long)d_expsr		;
			st_undpstn_tobe.d_span_wemult_mrgn	= (long long)d_total_mrgn * d_mltplr ;
			st_undpstn_tobe.d_min_mrgn					=	d_min_mrgn ;
			st_undpstn_tobe.d_reqd_initial_mrgn	=	(long long)d_intl_mrgn ;
			st_undpstn_tobe.d_ntnl_pl						=	d_undrlyng_pl	;
		}

		/*** Ver 2.6 Starts ***/
		if ( ptr_st_pstn_actn->c_nkd_blkd_flg == 'P')  /*** If called through Corp action ***/
    {
    	ptr_st_pstn_actn->l_actn_typ = SYSTEM_PLACE_ORDER ;
			strcpy(c_chk_channel ,"SYS");
    }
	
		/*** Ver 2.6 Ends   ***/



  	/** The code from this point onwards does the following activity   **/
  	/** Based on the type of action compare the current margin with    **/
  	/** required margin and update them. Do the profit loss correction **/

  	/** This bit of code down below checks the difference betweend the  **/
  	/** current order level margin with the required order level margin **/
  	/** then take a corrective measure. This code need not be called for**/
  	/** action which do not involve any order level margin change       **/


		switch ( ptr_st_pstn_actn->l_actn_typ )
    {
    	case  ORS_NEW_ORD_REQ:

    		strcpy( c_narration_id , ON_ORDER_PLACEMENT);
    		c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
    		break;

    	case  SYSTEM_PLACE_ORDER:

    		strcpy( c_narration_id , ON_ORDER_PLACEMENT);
    		c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
    		break;

    	default:
    		strcpy( c_err_msg, "Invalid action type");
    		fn_userlog ( c_ServiceName,"Invalid action type");
    		tpfree((char *)ptr_fml_obuf);
    		tpfree((char *)ptr_fml_ibuf);
    		return -1;
    		break;
    }

		if (ptr_st_pstn_actn->l_actn_typ == SYSTEM_PLACE_ORDER && c_dr_without_lmt_flg == DEBIT_TILL_LIMIT )
    {
			/*** Releasing Blocked Margin ***/

			/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
			if(DEBUG_MSG_LVL_3) /** Ver 7. 3 **/
			{
 				fn_userlog( c_ServiceName, "Releasing  Blocked Margin");
  			fn_userlog( c_ServiceName, "Intial Margin Is :%lf: ",ptr_st_undfut_pos_crrnt->d_initial_mrgn);
  			fn_userlog( c_ServiceName, "Channel Is :%s: ",c_chk_channel);
			}

			/***  if(ptr_st_pstn_actn->c_nkd_blkd_flg != ROLLOVER) * ver 1.8 *  Commented in Ver 8.1 ***/
      if(ptr_st_pstn_actn->c_nkd_blkd_flg != ROLLOVER && ptr_st_pstn_actn->c_nkd_blkd_flg != ROLLOVER_WITH_SPREAD)   /*** Condtiton Modified in Ver 8.1 ***/
			{	

			if( strcmp(c_chk_channel,"SYS") == 0 )
		  {
  			strcpy( c_narration_id ,REL_TRDMRGN_SYS_ORDER_PLACEMENT );
			}
			else
			{
  			strcpy( c_narration_id ,REL_TRDMRGN_SQR_ORDER_PLACEMENT);
			}

  		if ( ptr_st_undfut_pos_crrnt->d_initial_mrgn != 0 )
  		{
				d_balance_amt  = 0.0;   /*** Ver 1.1 ***/
			
     		i_returncode = fn_upd_spnlimits( c_ServiceName,
        	                            	 ptr_st_pstn_actn,
           		                         	 ptr_st_err_msg,
            	                        	 c_narration_id,
              	                      	 DEBIT_WITHOUT_LIMIT,
                	                    	 ptr_st_undfut_pos_crrnt->d_initial_mrgn,
                  	                  	 &d_balance_amt);

      	if ( i_returncode != 0 )
      	{
					fn_errlog( c_ServiceName, "S32010",LIBMSG , c_err_msg );
        	EXEC SQL CLOSE :sys_cursor;
        	tpfree((char *)ptr_fml_obuf);
        	tpfree((char *)ptr_fml_ibuf);
        	return -1;
      	}

   		}

	 	 /*** Getting the Blocked P&L ***/
			EXEC SQL
      	SELECT  NVL(FUS_BLCKD_PL,0)
      	INTO    :d_oblckd_amnt
      	FROM    FUS_FO_UNDRLYNG_SPN_PSTN
      	WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
      	AND     FUS_UNDRLYNG        = :sql_undrlyng
      	AND     FUS_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd;

    	if ( SQLCODE != 0 && SQLCODE  !=  NO_DATA_FOUND)
    	{
      	fn_errlog( c_ServiceName, "S32015",SQLMSG , c_err_msg );
      	EXEC SQL CLOSE :sys_cursor;
      	tpfree((char *)ptr_fml_obuf);
      	tpfree((char *)ptr_fml_ibuf);
      	return -1;
    	}	

			/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
			if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
			{
				fn_userlog( c_ServiceName, "Releasing  Notional P&L");
				fn_userlog( c_ServiceName, "P&L Is :%lf: ",d_oblckd_amnt);
			}

			if( strcmp(c_chk_channel,"SYS") == 0 )
      {
        strcpy( c_narration_id ,REL_BLKDLOSS_SYS_ORDER_PLACEMENT);
      }
      else
      {
        strcpy( c_narration_id ,REL_BLKDLOSS_SQR_ORDER_PLACEMENT);
      }
	
   	 	if ( d_oblckd_amnt != 0 )
    	{

					/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 ***/
  				if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
					{
		      	fn_userlog( c_ServiceName, "Before fn_upd_spnlimits :d_oblckd_amnt Is :%lf:",d_oblckd_amnt);
					}
					
					d_balance_amt  = 0.0;   /*** Ver 1.1 ***/
				
  		    i_returncode = fn_upd_spnlimits( c_ServiceName,
      		                                 ptr_st_pstn_actn,
          		                             ptr_st_err_msg,
              		                         c_narration_id,
                  		                     DEBIT_WITHOUT_LIMIT,
                      		                 d_oblckd_amnt,
                          		             &d_balance_amt);
					if(DEBUG_MSG_LVL_5)
					{
     		 		fn_userlog( c_ServiceName, "i_returncode Is :%d:",i_returncode);
					}
      		if ( i_returncode != 0 )
      		{
						fn_errlog( c_ServiceName, "S32020",LIBMSG , c_err_msg );
        		EXEC SQL CLOSE :sys_cursor;
        		tpfree((char *)ptr_fml_obuf);
        		tpfree((char *)ptr_fml_ibuf);
        		return -1;
      		}


    	 } /** End of P&L **/	

			if ( d_square_off_prmum <  0 )
			{
			  strcpy( c_narration_id , ON_ORDER_PLACEMENT);
				/** if(DEBUG_MSG_LVL_0)  Commented in Ver 7.3 **/
				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"Inside Square off Premium Condition:%lf:",d_square_off_prmum);
				}
				d_balance_amt  = 0.0;   /*** Ver 1.1 ***/

				i_returncode = fn_upd_spnlimits	( c_ServiceName,
																					ptr_st_pstn_actn,
																					ptr_st_err_msg,
																					c_narration_id,
																					DEBIT_WHEN_LIMIT,
																					d_square_off_prmum,
																					&d_balance_amt
																				);
				if ( i_returncode != 0 )
				{
					switch ( i_returncode )
					{
						case  INSUFFICIENT_LIMITS :

								fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg );
								EXEC SQL CLOSE :sys_cursor;
								tpfree((char *)ptr_fml_obuf);
								tpfree((char *)ptr_fml_ibuf);
								return INSUFFICIENT_LIMITS  ;

						default:

							fn_errlog( c_ServiceName, "S32025",LIBMSG , c_err_msg );
							EXEC SQL CLOSE :sys_cursor;
							tpfree((char *)ptr_fml_obuf);
							tpfree((char *)ptr_fml_ibuf);
							return -1;
					}
				}

				d_square_off_prmum = (d_square_off_prmum* (-1) ) + d_balance_amt;

				
				EXEC SQL
					UPDATE  FCP_FO_SPN_CNTRCT_PSTN
					SET     FCP_OPT_PREMIUM     = :d_square_off_prmum +  FCP_OPT_PREMIUM
					WHERE   FCP_CLM_MTCH_ACCNT  = :st_cntrct_pstn_prmum_sqroff.c_cln_mtch_accnt
					AND     FCP_XCHNG_CD        = :st_cntrct_pstn_prmum_sqroff.c_xchng_cd
					AND     FCP_PRDCT_TYP       = :st_cntrct_pstn_prmum_sqroff.c_prd_typ
					AND     FCP_UNDRLYNG        = :st_cntrct_pstn_prmum_sqroff.c_undrlyng
					AND     FCP_EXPRY_DT        = :st_cntrct_pstn_prmum_sqroff.c_expry_dt
					AND     FCP_EXER_TYP        = :st_cntrct_pstn_prmum_sqroff.c_exer_typ
					AND     FCP_OPT_TYP         = :st_cntrct_pstn_prmum_sqroff.c_opt_typ
					AND     FCP_STRK_PRC        = :st_cntrct_pstn_prmum_sqroff.l_strike_prc;

				if ( SQLCODE != 0 )
				{
					fn_errlog(c_ServiceName, "S32030", SQLMSG, c_err_msg );
					EXEC SQL CLOSE :sys_cursor;
					tpfree((char *)ptr_fml_obuf);
					tpfree((char *)ptr_fml_ibuf);
					return -1;
				}
			}
	
		
   		d_upd_amount = (-1) * st_undpstn_tobe.d_span_wemult_mrgn;


			if( strcmp(c_chk_channel,"SYS") == 0 )
      {
        strcpy( c_narration_id ,BLK_SPAN_MRGN_SYS_ORDER_PLACEMENT);
      }
      else
      {
        strcpy( c_narration_id ,BLK_SPAN_MRGN_SQR_ORDER_PLACEMENT);
      }


			if(DEBUG_MSG_LVL_3)
			{
    		fn_userlog(c_ServiceName," d_upd_amount In SPAN MARGIN WITH MULTIPLIER Is :%lf:",d_upd_amount);
			}

   		if ( d_upd_amount != 0 )
    	{
				d_balance_amt  = 0.0;   /*** Ver 1.1 ***/

				i_returncode = fn_upd_spnlimits( c_ServiceName,
                                       ptr_st_pstn_actn,
                                       ptr_st_err_msg,
                                       c_narration_id,
                                       DEBIT_TILL_LIMIT,
                                       d_upd_amount,
                                       &d_balance_amt);
				if(DEBUG_MSG_LVL_5)
				{
      		fn_userlog( c_ServiceName, "i_returncode Is :%d:",i_returncode);
				}
      	if ( i_returncode != 0 )
      	{
        	fn_errlog( c_ServiceName, "S32035",LIBMSG , c_err_msg );
        	EXEC SQL CLOSE :sys_cursor;
        	tpfree((char *)ptr_fml_obuf);
        	tpfree((char *)ptr_fml_ibuf);
        	return -1;
      	}
				st_undpstn_tobe.d_span_wemult_mrgn = st_undpstn_tobe.d_span_wemult_mrgn + d_balance_amt ;		/*** Ver 3.4 ***/
    	}

    	/*** st_undpstn_tobe.d_span_wemult_mrgn = st_undpstn_tobe.d_span_wemult_mrgn + d_balance_amt ;		Commented in Ver 3.4 ***/

			if(DEBUG_MSG_LVL_3)
			{
    		fn_userlog(c_ServiceName,"d_balance_amt in d_span_wemult_mrgn:%lf:",d_balance_amt);
    		fn_userlog(c_ServiceName,"Here st_undpstn_tobe.d_span_wemult_mrgn :%lf:",st_undpstn_tobe.d_span_wemult_mrgn);
			}
	

			if( strcmp(c_chk_channel,"SYS") == 0 )
      {
        strcpy( c_narration_id ,BLK_EXPR_MRGN_SYS_ORDER_PLACEMENT);
      }
      else
      {
        strcpy( c_narration_id ,BLK_EXPR_MRGN_SQR_ORDER_PLACEMENT);
      }

			d_upd_amount = (-1) * st_undpstn_tobe.d_eba_expr_mrgn;

			if(DEBUG_MSG_LVL_3)
			{
   	  	fn_userlog(c_ServiceName," d_upd_amount In EXPOSURE Is :%lf:",d_upd_amount);
			}


      if ( d_upd_amount != 0 )
      {
				d_balance_amt  = 0.0;   /*** Ver 1.1 ***/

				i_returncode = fn_upd_spnlimits( c_ServiceName,
                                       ptr_st_pstn_actn,
                                       ptr_st_err_msg,
                                       c_narration_id,
                                       DEBIT_TILL_LIMIT,
                                       d_upd_amount,
                                       &d_balance_amt);
				if(DEBUG_MSG_LVL_5)
				{
        	fn_userlog( c_ServiceName, "i_returncode Is :%d:",i_returncode);
				}

        if ( i_returncode != 0 )
        {
          fn_errlog( c_ServiceName, "S32040",LIBMSG , c_err_msg );
          EXEC SQL CLOSE :sys_cursor;
          tpfree((char *)ptr_fml_obuf);
          tpfree((char *)ptr_fml_ibuf);
          return -1;
        }
				st_undpstn_tobe.d_eba_expr_mrgn = st_undpstn_tobe.d_eba_expr_mrgn + d_balance_amt;		/*** Ver 3.4 ***/
    	}

			if(DEBUG_MSG_LVL_3)
			{
    		fn_userlog(c_ServiceName,"d_balance_amt in d_expsr :%lf:",d_balance_amt);
			}

   	  /*** st_undpstn_tobe.d_eba_expr_mrgn = st_undpstn_tobe.d_eba_expr_mrgn + d_balance_amt;			Commented in Ver 3.4 ***/

			if(DEBUG_MSG_LVL_3)
			{
    		fn_userlog(c_ServiceName," Calculating Final INITIAL MARGIN ")  ;
			}

			if(DEBUG_MSG_LVL_3)
			{
    		fn_userlog(c_ServiceName,"Here st_undpstn_tobe.d_span_wemult_mrgn Is :%lf:",st_undpstn_tobe.d_span_wemult_mrgn);
				fn_userlog(c_ServiceName,"Here st_undpstn_tobe.d_eba_expr_mrgn  Is  :%lf:", st_undpstn_tobe.d_eba_expr_mrgn);
			}
		
    	st_undpstn_tobe.d_initial_mrgn = st_undpstn_tobe.d_span_wemult_mrgn + st_undpstn_tobe.d_eba_expr_mrgn ;

			/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
			if(DEBUG_MSG_LVL_3) /**Ver 7.3 **/
			{
    		fn_userlog(c_ServiceName,"Here FINAL INTIAL MARGIN TO BE BLOCKED Is :%lf:", st_undpstn_tobe.d_initial_mrgn);
			}

		
			if( strcmp(c_chk_channel,"SYS") == 0 )
      {
        strcpy( c_narration_id ,BLK_NOTIONAL_LOSS_SYS_ORDER_PLACEMENT);
      }
      else
      {
        strcpy( c_narration_id ,BLK_NOTIONAL_LOSS_SQR_ORDER_PLACEMENT);
      }

			/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
			if(DEBUG_MSG_LVL_3) /**Ver 7.3 **/
			{
				fn_userlog(c_ServiceName,"Here d_undrlyng_pl Is  :%lf:",d_undrlyng_pl);
			}

			if ( d_undrlyng_pl < 0 )
    	{
				d_balance_amt  = 0.0;   /*** Ver 1.1 ***/

        i_returncode = fn_upd_spnlimits( c_ServiceName,
                                       ptr_st_pstn_actn,
                                       ptr_st_err_msg,
                                       c_narration_id,
                                       DEBIT_TILL_LIMIT,
                                       d_undrlyng_pl,
                                       &d_balance_amt);
				if(DEBUG_MSG_LVL_5)
				{
        	fn_userlog( c_ServiceName, "i_returncode Is :%d:",i_returncode);
				}

        if ( i_returncode != 0 )
        {
          fn_errlog( c_ServiceName, "S32045",LIBMSG , c_err_msg );
          EXEC SQL CLOSE :sys_cursor;
          tpfree((char *)ptr_fml_obuf);
          tpfree((char *)ptr_fml_ibuf);
          return -1;
        }

       st_undpstn_tobe.d_blckd_pl  = ( d_undrlyng_pl * (-1)) + d_balance_amt  ;
			
			 if(DEBUG_MSG_LVL_3)
			 {
       		fn_userlog(c_ServiceName,"SPAN  - d_balance_amt Is :%lf:",d_balance_amt);
			 }

			 /** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
       if(DEBUG_MSG_LVL_3) /**Ver 7.3 **/
			 {
       		fn_userlog(c_ServiceName,"SPAN  - st_undpstn_tobe.d_blckd_pl Is :%lf:",
                                         st_undpstn_tobe.d_blckd_pl);
			 }

    	}
    	else
    	{
				 if(DEBUG_MSG_LVL_3)
				 {
      	 		fn_userlog(c_ServiceName,"SPAN - In PROFIT COndition" );
				 }
       	 st_undpstn_tobe.d_blckd_pl  = 0 ;
				
				/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
        if(DEBUG_MSG_LVL_3) /**Ver 7.3 **/
				{
       	 	fn_userlog(c_ServiceName,"SPAN  - st_undpstn_tobe.d_blckd_pl Is :%lf:",
                                         st_undpstn_tobe.d_blckd_pl);
				}
   		}

		 }/* ver 1.8 */
		}
		else 
		{	

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog ( c_ServiceName, "NEW ORDER REQUEST");
			fn_userlog ( c_ServiceName,"st_undpstn_tobe.d_reqd_initial_mrgn |%lf|",st_undpstn_tobe.d_reqd_initial_mrgn);
			fn_userlog ( c_ServiceName,"ptr_st_undfut_pos_crrnt->d_initial_mrgn |%lf|",ptr_st_undfut_pos_crrnt->d_initial_mrgn);
		}

  	d_diff_mrgn = ptr_st_undfut_pos_crrnt->d_initial_mrgn	- st_undpstn_tobe.d_reqd_initial_mrgn	;

  	/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
    if(DEBUG_MSG_LVL_3) /**Ver 7.3 **/
  	{
    	fn_userlog ( c_ServiceName, "Difference in MRGN :%lf:", d_diff_mrgn );
  	}

    c_mrgn_insufficient_flg ='N' ; /*** Ver 3.1 ***/
	
		/***  if (ptr_st_pstn_actn->c_nkd_blkd_flg != ROLLOVER)  *** Ver 1.8 ***  Commented in ver 8.1 ***/
    if (ptr_st_pstn_actn->c_nkd_blkd_flg != ROLLOVER && ptr_st_pstn_actn->c_nkd_blkd_flg != ROLLOVER_WITH_SPREAD)     /***  Condition Modified in Ver 8.1 ***/
    {

		if ( d_diff_mrgn != 0  )
    {
			d_balance_amt  = 0.0;   /*** Ver 1.1 ***/

      i_returncode = fn_upd_spnlimits( c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    c_dr_without_lmt_flg,
                                    d_diff_mrgn,
                                    &d_balance_amt);
      if ( i_returncode != 0 )
      {
				switch ( i_returncode )
        {
          case  INSUFFICIENT_LIMITS :

            fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg );
            /******* Ver 3.1 Starts Here *******
            EXEC SQL CLOSE :sys_cursor;
            tpfree((char *)ptr_fml_obuf);
            tpfree((char *)ptr_fml_ibuf);
            return INSUFFICIENT_LIMITS  ;
            ******** Ver 3.1 Ends *******/
            /*** Ver 8.8 Start ***/
            if( c_balance_flg != 'Y' )
            {
              d_balance_amt_tmp = d_balance_amt;
              c_balance_flg = 'Y';
            }
            /*** Ver 8.8 Ends ***/

            /*** Ver 3.1 Starts Here **/
            fn_userlog(c_ServiceName,"Inside INSUFFICIENT_LIMITS Margin Block After SPAN Server Call");
            c_mrgn_insufficient_flg ='Y' ;
            /*** d_total_amount = d_total_amount + d_diff_mrgn; *** Commented in Ver 8.8 ***/
            break;
            /*** Ver 3.1 Ends Here **/

         default:

            fn_errlog( c_ServiceName, "S32050",LIBMSG , c_err_msg );
            EXEC SQL CLOSE :sys_cursor;
            tpfree((char *)ptr_fml_obuf);
            tpfree((char *)ptr_fml_ibuf);
            return -1;
        }
      }
		  ptr_st_undfut_pos_to_be->d_initial_mrgn = ptr_st_undfut_pos_to_be->d_reqd_initial_mrgn;

      /*** Ver 8.8 Starts ***/

      if( c_balance_flg == 'Y' )
      {
        d_total_amount = d_total_amount + d_diff_mrgn;
      }

      /*** Ver 8.8 Ends ***/
		}


		 EXEC SQL
      SELECT  NVL(FUS_BLCKD_PL,0)
      INTO    :d_oblckd_amnt
      FROM    FUS_FO_UNDRLYNG_SPN_PSTN
      WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
      AND     FUS_UNDRLYNG        = :sql_undrlyng
      AND     FUS_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd;

   	  if ( SQLCODE != 0 && SQLCODE  !=  NO_DATA_FOUND)
    	{
      	fn_errlog( c_ServiceName, "S32055",SQLMSG , c_err_msg );
     	 	EXEC SQL CLOSE :sys_cursor;
      	tpfree((char *)ptr_fml_obuf);
      	tpfree((char *)ptr_fml_ibuf);
      	return -1;
    	}

			if( d_undrlyng_pl >= 0 )
    	{
      	d_diff_pl = d_oblckd_amnt ;
    	}
    	else
    	{
      	d_diff_pl = d_oblckd_amnt + d_undrlyng_pl ;
    	}

   		/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
      if(DEBUG_MSG_LVL_3) /**Ver 7.3 **/
    	{
      	fn_userlog ( c_ServiceName, "Difference in P&L :%lf:", d_diff_pl );
    	}

			/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
      if(DEBUG_MSG_LVL_3) /**Ver 7.3 **/
			{
    		fn_userlog(c_ServiceName,"SPAN  - d_undrlyng_pl Is :%lf:",d_undrlyng_pl);
    		fn_userlog(c_ServiceName,"SPAN  - d_oblckd_amnt Is :%lf:",d_oblckd_amnt);
    		fn_userlog(c_ServiceName,"SPAN  - d_diff_pl Is :%lf:",d_diff_pl);
			}
		
      c_pnl_insufficient_flg = 'N';  /** Ver 3.1 **/
	
			if ( d_diff_pl != 0 )
    	{

     	 strcpy( c_narration_id , DEFICIT_PROFIT_LOSS );

				d_balance_amt  = 0.0;   /*** Ver 1.1 ***/

      	i_returncode = fn_upd_spnlimits(  c_ServiceName,
        	                            ptr_st_pstn_actn,
          	                          ptr_st_err_msg,
            	                        c_narration_id,
              	                      c_dr_without_lmt_flg,
                	                    d_diff_pl,
                  	                  &d_balance_amt);
      	if ( i_returncode != 0 )
      	{
        	switch ( i_returncode )
        	{
          	  case  INSUFFICIENT_LIMITS :
	
  	            fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg );
                /******** Ver 3.1 Starts Here ***
    	          EXEC SQL CLOSE :sys_cursor;
      	        tpfree((char *)ptr_fml_obuf);
        	      tpfree((char *)ptr_fml_ibuf);
          	    return INSUFFICIENT_LIMITS  ;
                ******* Ver 3.1 Ends *****/
                /*** Ver 8.8 Start ***/
                if( c_balance_flg != 'Y' )
                {
                  d_balance_amt_tmp = d_balance_amt;
                  c_balance_flg = 'Y';
                }
                /*** Ver 8.8 Ends ***/
               
                /** Ver 3.1 Starts Here ***/
                fn_userlog(c_ServiceName,"Inside INSUFFICIENT_LIMITS d_diff_pl Block");
                c_pnl_insufficient_flg='Y'; 
                /*** d_total_amount = d_total_amount + d_diff_pl; *** Commented in Ver 8.8 ***/
                break;
                /*** Ver 3.1 Ends Here ****/


         			 default:

              	fn_errlog( c_ServiceName, "S32060",LIBMSG , c_err_msg );
              	EXEC SQL CLOSE :sys_cursor;
              	tpfree((char *)ptr_fml_obuf);
              	tpfree((char *)ptr_fml_ibuf);
              	return -1;
        	}
      	}

				/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
  			if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
				{
					fn_userlog(c_ServiceName,"SPAN  - d_diff_pl :%lf:",d_diff_pl);
      		fn_userlog(c_ServiceName,"SPAN  - d_balance_amt Is :%lf:",d_balance_amt);
      		fn_userlog(c_ServiceName,"SPAN  - d_oblckd_amnt Is :%lf:",d_oblckd_amnt);
				}

        /*** Ver 8.8 ***/

        if( c_balance_flg == 'Y' )
        {

          /*** Add starts in Ver 9.1 ***/
          if ( d_diff_pl <  0 )
          {
            fn_userlog(c_ServiceName,"Inside Negative PnL Diff Condition.",d_diff_pl);
            /*** Add Ends in ver 9.1 ***/

          	d_total_amount = d_total_amount + d_diff_pl;

          }     /*** ver 9.1 ***/
        }

        /*** Ver 8.8 ***/

        st_undpstn_tobe.d_blckd_pl  = d_oblckd_amnt - d_diff_pl ;

   	 	}
		 }

     /*** Ver 3.1 Starts Here ***/
     if(  c_pnl_insufficient_flg == 'Y' || c_mrgn_insufficient_flg == 'Y' ||   c_prm_insufficent_flg == 'Y' )
     {
      d_required_amount=0.0;
      MEMSET(c_lmterr_msg);
      if(DEBUG_MSG_LVL_2)
      {
       fn_userlog(c_ServiceName,"d_balance_amt  :%lf:",d_balance_amt);
       fn_userlog(c_ServiceName,"d_balance_amt_tmp :%lf:",d_balance_amt_tmp); /*** Ver 8.8 ***/
      }

      /*** d_required_amount = d_total_amount + d_premium + d_balance_amt ; *** Commented in Ver 8.8 ***/
      d_required_amount = d_total_amount + d_premium + d_balance_amt_tmp;   /*** Ver 8.8 ***/
      d_required_amount = ( d_required_amount * (-1) ) / 100 ;
      if(DEBUG_MSG_LVL_2)
      {
       fn_userlog(c_ServiceName," d_required_amount :%lf:",d_required_amount);
       fn_userlog(c_ServiceName," ptr_st_err_msg.c_err_msg :%s:",ptr_st_err_msg->c_err_msg);
      }

      EXEC SQL CLOSE :sys_cursor;
      tpfree((char *)ptr_fml_obuf);
      tpfree((char *)ptr_fml_ibuf);
      return INSUFFICIENT_LIMITS  ;
     }
     /*** Ver 3.1 Ends Here ***/

			/*** Following Commented On 09-Dec-2011
    	if ( d_diff_pl == 0 )
    	{
      	st_undpstn_tobe.d_blckd_pl  = st_undpstn_tobe.d_blckd_pl  * (-1)  ;

    	}
			Commented On 09-Dec-2011 Ends ***/

		}  // End of Margin Blocking For Normal Customer 

		/***	Unmarked The Customer If Customer Is  Marked By IMTM	***/

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN - Channel IS :%s:",ptr_st_pstn_actn->c_channel);

	  	fn_userlog(c_ServiceName, "6. ptr_st_undfut_pos_crrnt->c_mtm_flg = :%c:", ptr_st_undfut_pos_crrnt->c_mtm_flg);
		}

		if( ptr_st_undfut_pos_crrnt->c_mtm_flg == 'M' && (strcmp(ptr_st_pstn_actn->c_channel,"SYS") != 0) && c_dr_without_lmt_flg == DEBIT_WHEN_LIMIT)
		{
			/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 **/
  		if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
			{
				fn_userlog(c_ServiceName,"SPAN - Going To Update MTM Flag From M To O.");

				fn_userlog(c_ServiceName,"SPAN - Before MTM Flag Is :%c:",ptr_st_undfut_pos_to_be->c_mtm_flg);
			}

			ptr_st_undfut_pos_to_be->c_mtm_flg = 'O';

			/** if(DEBUG_MSG_LVL_0) Commented in Ver 7.3 ***/
  		if(DEBUG_MSG_LVL_3) /** Ver 7.3 **/
			{
				fn_userlog(c_ServiceName,"SPAN - After MTM Flag Is :%c:",ptr_st_undfut_pos_to_be->c_mtm_flg);
			}
		}

		if(DEBUG_MSG_LVL_3)
		{
	  	fn_userlog(c_ServiceName, "7. ptr_st_undfut_pos_to_be->c_mtm_flg = :%c:", ptr_st_undfut_pos_to_be->c_mtm_flg);
		}
		

    /*** Ver 10.8 Starts here ***/
    i_returncode=fn_cal_premutilzed( c_ServiceName, ptr_st_pstn_actn);
    if ( i_returncode != 0 )
    {
       fn_errlog( c_ServiceName, "S32065",LIBMSG , c_err_msg );
       tpfree((char *)ptr_fml_obuf);
       tpfree((char *)ptr_fml_ibuf);
       return -1;
    } 
    /*** Ver 10.8 Ends Here ***/


	tpfree((char *)ptr_fml_obuf);
  tpfree((char *)ptr_fml_ibuf);

	return 0;
}

/** Ver 2.2 Starts **/

int fn_eos_sltpfp ( char  *c_ServiceName,
                    char  *c_cover_ord_ref,
                    struct st_orderbook *ptr_st_ordbook,
                    struct st_err_msg *ptr_st_err_msg
                  )
{  
  	char c_fod_fc_flag_c='C';       /* ver 7.9 */

    char c_fresh_ord_ref[19];

    int   i_returncode;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"c_cover_ord_ref :%s:",c_cover_ord_ref);
		}

		EXEC SQL
    SELECT
          FOD_SLTP_ORDR_RFRNC
    INTO  :c_fresh_ord_ref
    FROM  FOD_FO_ORDR_DTLS
    WHERE FOD_ORDR_RFRNC = :c_cover_ord_ref;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S32070", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"c_fresh_ord_ref :%s:",c_fresh_ord_ref);
		}

    EXEC SQL
       UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_SLTP_ORDR_RFRNC = :ptr_st_ordbook->c_ordr_rfrnc
       WHERE      FOD_ORDR_RFRNC = :c_fresh_ord_ref;

      if(SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S32075", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }


      EXEC SQL
       UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_SLTP_ORDR_RFRNC = :c_fresh_ord_ref,
                  FOD_FC_FLAG =:c_fod_fc_flag_c  /* 7.9  Hard Code Value Replace With Bind Variable  */
       WHERE      FOD_ORDR_RFRNC = :ptr_st_ordbook->c_ordr_rfrnc;

      if(SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S32080", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
}

int fn_cover_sltpfp ( char  *c_ServiceName,
                    char  *c_cover_ord_ref,
                    struct st_orderbook *ptr_st_ordbook,
                    struct st_pstn_actn *ptr_st_pstn_actn,
                    struct st_err_msg *ptr_st_err_msg
                  )
{
		char c_fod_fc_flag_c='C';       /* ver 7.9 */

    char c_ref_rmrks[133] = "\0";      /*** Ver 9.5 ***/ /** changed size 100 to 133 in ver 9.8 */
    char  c_tmp_rmrks [ 133 ] = "\0";  /*** Ver 9.5 ***//** changed size 100 to 133 in ver 9.8 */

    double d_fmm_sltp_prcnt = 0.0;
    double d_amt_to_be_blckd = 0.0;
    double d_lss_amt_to_be_blckd = 0.0;
    double d_amt_blkd = 0.0;
    double d_lss_amt_blkd = 0.0;
    double d_diff_amt_blkd = 0.0;
    double d_diff_lss_amt_blkd = 0.0;
    double d_frsh_exe_val = 0.0;
    double d_balance_amt = 0.0;
    double d_wgt_avrg_price = 0.0;
    double d_diff_amt= 0.0;
    double d_diff_loss= 0.0;
    double d_frm_diffrnc_mrgn = 0.0; /*** Ver 4.1 ***/
    double d_frsh_lmt_rt= 0.0;          /** Ver 6.3 **/

    double d_comp1_mrgn = 0.0;  /*** Ver 9.5 ***/
    double d_comp1_pl = 0.0;    /*** Ver 9.5 ***/
    double d_xchng_amt = 0.0;   /*** Ver 9.5 ***/ 

    long  li_tot_exec_qty = 0;
    long  l_open_qty = 0;
    long  l_frsh_xtd_qty = 0;
    long  l_temp_stp_lss_tgr = 0;    /*** Ver 4.1 ***/

    char c_ord_flw = '\0';
    char c_narration_id[4];
    char c_fresh_ord_ref[19];

 	  double d_prem_amt = 0.0;    /*** Ver 9.8 ***/
  	double d_spn_mrgn = 0.0;    /*** Ver 9.8 ***/
  	double d_expr_mrgn = 0.0;   /*** Ver 9.8 ***/


    int   i_returncode;


		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"c_cover_ord_ref :%s:",c_cover_ord_ref);
		}

		EXEC SQL
    SELECT
          FOD_SLTP_ORDR_RFRNC,
					NVL(FOD_STP_LSS_TGR ,0)          /*** Ver 4.1 ***/
    INTO  :c_fresh_ord_ref,
					:l_temp_stp_lss_tgr							 /*** Ver 4.1 ***/
    FROM  FOD_FO_ORDR_DTLS
    WHERE FOD_ORDR_RFRNC = :c_cover_ord_ref;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S32085", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"c_fresh_ord_ref :%s:",c_fresh_ord_ref);
		}

    EXEC SQL
    SELECT
          NVL(FOD_AMT_BLCKD,0),
          NVL(FOD_LSS_AMT_BLCKD,0),
          FOD_ORDR_FLW,
          FOD_LMT_RT                                      /** Ver 6.3 **/
    INTO  :d_amt_blkd,
          :d_lss_amt_blkd,
          :c_ord_flw,
          :d_frsh_lmt_rt																	 /** Ver 6.3 **/
    FROM  FOD_FO_ORDR_DTLS
    WHERE FOD_ORDR_RFRNC = :c_fresh_ord_ref;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S32090", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

 		/*** Commented in Ver 6.3
		*Get the current margin percentage from the database *
    EXEC SQL
     SELECT     FMM_SLTP_PRCNT
     INTO       :d_fmm_sltp_prcnt
     FROM       FMM_FO_MRGN_MSTR
     WHERE      FMM_XCHNG_CD = :ptr_st_ordbook->c_xchng_cd
		 *** AND        FMM_PRDCT_TYP ='F' Commented In Ver 4.1 ***
     AND        FMM_PRDCT_TYP = DECODE(:ptr_st_ordbook->c_prd_typ,'U','F','I','O')  *** Ver 4.1 ***
     AND        FMM_UNDRLYNG = :ptr_st_ordbook->c_undrlyng
     AND        FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
                                     FROM    FCB_FO_CLN_BSKT_ALLTD
                                     WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                                           FROM    CLM_CLNT_MSTR
                                                           WHERE   CLM_MTCH_ACCNT =:ptr_st_ordbook->c_cln_mtch_accnt));

    if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_userlog(c_ServiceName,"******Invalid Stock Code*******");
      fn_errlog( c_ServiceName, "S32095", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }
    else if(SQLCODE != 0)
    {
      fn_errlog( c_ServiceName, "S32100", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"SLTP Percentage   :%lf:", d_fmm_sltp_prcnt);
    }

		** Getting the total executed value and quantity of FRESH order. **
     EXEC SQL
      SELECT  NVL( SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT), 0),
              NVL( SUM(FTD_EXCTD_QTY), 0)
      INTO    :d_frsh_exe_val,
              :li_tot_exec_qty
      FROM    FTD_FO_TRD_DTLS
      WHERE   FTD_ORDR_RFRNC = :c_fresh_ord_ref;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S32105", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

    * Checking if Fresh order value & quantity is equals to zero. *
    if (d_frsh_exe_val == 0 || li_tot_exec_qty == 0)
    {
      fn_errlog( c_ServiceName, "S32110", LIBMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

   ** Calculating the Weight Average Price for the executed quantity of FRESH Order. **
	  d_wgt_avrg_price = 0;
		
		if (li_tot_exec_qty != 0 )
		{
			d_wgt_avrg_price = (double) (d_frsh_exe_val / li_tot_exec_qty);
		}

    * Calculate open quantity *
    EXEC SQL
      SELECT  NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FTD_EXCTD_QTY,
                                                       FTD_EXCTD_QTY ) ), 0 ),
              NVL( SUM( DECODE( FOD_FC_FLAG, 'F', FTD_EXCTD_QTY, 0 ) ), 0 )
      INTO    :l_open_qty,
              :l_frsh_xtd_qty
      FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
      WHERE   FOD_CLM_MTCH_ACCNT    = :ptr_st_ordbook->c_cln_mtch_accnt
      AND     FOD_TRD_DT            = :ptr_st_ordbook->c_trd_dt
      AND     FOD_PRDCT_TYP         = :ptr_st_ordbook->c_prd_typ
      AND     FTD_ORDR_RFRNC        = FOD_ORDR_RFRNC
      AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_fresh_ord_ref;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S32115", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

    if(l_open_qty <0 )
    {
      l_open_qty=0;
    }

		* Calculate Margin amount to be blocked *
    d_amt_to_be_blckd = (double) ((l_open_qty * d_wgt_avrg_price) * d_fmm_sltp_prcnt / 100.0);

		*** Ver 4.1 Starts ***
		* Get the minimum difference percentage ***
		
		if ( ptr_st_ordbook->c_prd_typ == 'I' )
		{

    	EXEC SQL
     		SELECT nvl(FRM_DIFFRNC_MRGN,0)
     		INTO   :d_frm_diffrnc_mrgn
     		FROM   FRM_FO_RANGE_MSTR
     		WHERE  FRM_XCHNG_CD   = :ptr_st_ordbook->c_xchng_cd
     		AND    FRM_UNDRLYNG   = :ptr_st_ordbook->c_undrlyng
     		AND    FRM_ORDR_FLOW  = :c_ord_flw
				AND    FRM_FROM_RANGE <= :l_temp_stp_lss_tgr
				AND    :l_temp_stp_lss_tgr   < FRM_TO_RANGE
				AND    (:l_temp_stp_lss_tgr > 0 ) ;

    	if ( SQLCODE  !=  0  && SQLCODE != NO_DATA_FOUND)
    	{
      	fn_errlog( c_ServiceName, "S32120", SQLMSG, ptr_st_err_msg->c_err_msg );
      	return FAILURE;
    	}
		}

		*** Ver 4.1 Ends ***

    * Calculate Loss amount to be blocked *
    if ( c_ord_flw == BUY && ptr_st_ordbook->c_prd_typ == 'I') *** Ver 4.1 If condition added ***
    {
			if( d_frm_diffrnc_mrgn < 100 && d_frm_diffrnc_mrgn != -1 )
      {
      	d_lss_amt_to_be_blckd = (double) (l_open_qty * (ptr_st_ordbook->l_ord_lmt_rt - d_wgt_avrg_price ) );
			}
			else if ( d_frm_diffrnc_mrgn == 100 )
      {
      	d_lss_amt_to_be_blckd = (double) (l_open_qty * d_wgt_avrg_price );
      }
      else if( d_frm_diffrnc_mrgn == -1 )
      {
      	fn_userlog(c_ServiceName,"Entered SLTP is OutOff Range");
      	fn_errlog( c_ServiceName, "S32125","Please Enter SLTP in Proper Range",ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
    }
		else if ( c_ord_flw == BUY && ptr_st_ordbook->c_prd_typ == 'U' ) *** Ver 4.1 product type condition added ***
    {
      d_lss_amt_to_be_blckd = (double) (l_open_qty * (ptr_st_ordbook->l_ord_lmt_rt - d_wgt_avrg_price ) );
    }
    else if ( c_ord_flw == SELL )
    {
      d_lss_amt_to_be_blckd = (double) (l_open_qty * (d_wgt_avrg_price - ptr_st_ordbook->l_ord_lmt_rt ) );
    }
        Comment end in Ver 6.3 ***/

    /**  Ver 6.3 starts from here **/
    /** Call function for margin calcluation **/
  	if(ptr_st_ordbook->c_prd_typ == 'U')  /*** If condition added in Ver 6.5 ***/
  	{
      i_returncode =  fn_cal_mrgn_sltp(c_ServiceName,
      	                              c_fresh_ord_ref,
        	                            d_frsh_lmt_rt,
          	                          ptr_st_ordbook->l_ord_lmt_rt,
            	                        &d_amt_to_be_blckd,
              	                      &d_lss_amt_to_be_blckd,
                                      c_ref_rmrks,  /*** Ver 9.5 ***/
                                      &d_comp1_mrgn,/*** Ver 9.5 ***/
                                      &d_comp1_pl,  /*** Ver 9.5 ***/
                                      &d_xchng_amt, /*** Ver 9.5 ***/
                	                    c_err_msg);
  	  if ( i_returncode == -1 )
    	{
      	fn_errlog( c_ServiceName, "S32130", LIBMSG, c_err_msg );
      	return FAILURE;
    	}

    	d_lss_amt_to_be_blckd = d_lss_amt_to_be_blckd * (-1);
		}		/*** Ver 6.3 ends here ***/  /*** Ver 6.5 Starts from here ***/
  	else if(ptr_st_ordbook->c_prd_typ == 'I')
  	{
     	    i_returncode = fn_cal_mrgn_sltp_op ( c_ServiceName,
      	                                        c_fresh_ord_ref,
        	                                      d_frsh_lmt_rt,
          	                                    ptr_st_ordbook->l_ord_lmt_rt,
            	                                  &d_amt_to_be_blckd,
              	                                &d_lss_amt_to_be_blckd,
                                          			c_ref_rmrks,  /*** Ver 9.8 ***/
                                          			&d_comp1_mrgn,/*** Ver 9.8 ***/
                                          			&d_comp1_pl,  /*** Ver 9.8  ***/
                                          			&d_xchng_amt, /*** Ver 9.8 ***/
                                          			&d_prem_amt,  /*** Ver 9.8 ***/
                                          			&d_spn_mrgn,  /*** Ver 9.8 ***/
                                          			&d_expr_mrgn, /*** Ver 9.8  ***/
                	                              'U',
                  	                            c_err_msg
                    	                        );
    	if ( i_returncode == -1 )
    	{
      	fn_errlog( c_ServiceName, "S32135", LIBMSG, c_err_msg );
      	return FAILURE;
    	}
      d_lss_amt_to_be_blckd = d_lss_amt_to_be_blckd * -1; /*** ver 9.8 ***/
  	}
   /*** Ver 6.5 ends here ***/ 
    /* Difference margin & loss */
    d_diff_amt  = d_amt_blkd - d_amt_to_be_blckd;
    d_diff_loss = d_lss_amt_blkd + d_lss_amt_to_be_blckd;


    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"d_amt_blkd = :%lf:", d_amt_blkd);
      fn_userlog(c_ServiceName,"d_amt_to_be_blckd = :%lf:", d_amt_to_be_blckd);

      fn_userlog(c_ServiceName,"d_lss_amt_blkd = :%lf:", d_lss_amt_blkd);
      fn_userlog(c_ServiceName,"d_lss_amt_to_be_blckd = :%lf:", d_lss_amt_to_be_blckd);
    }

		/* Block the margin amount */
    strcpy( c_narration_id , ON_ORDER_PLACEMENT);
  
		if(d_diff_amt != 0)
    {
        d_balance_amt  = 0.0;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Block the margin amount");
        }
        i_returncode = fn_upd_spnlimits( c_ServiceName,
                          ptr_st_pstn_actn,
                          ptr_st_err_msg,
                          c_narration_id,
                          DEBIT_TILL_LIMIT,
                          d_diff_amt,
                          &d_balance_amt);


        if ( i_returncode != 0 )
        {
          fn_errlog( c_ServiceName, "S32140", LIBMSG, ptr_st_err_msg->c_err_msg );
          return FAILURE;
        }

        d_amt_to_be_blckd = d_amt_to_be_blckd + d_balance_amt ;
      }

		/* Block the loss amount */
      strcpy( c_narration_id , ON_ORDER_PLACEMENT);

    /*** Ver 9.5 started ***/
		if(ptr_st_ordbook->c_prd_typ == 'U' || ptr_st_ordbook->c_prd_typ == 'I')/*** Ver 9.8 option pls added ***/ 
	  {
			MEMSET(c_tmp_rmrks);
			strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks );
			sprintf(ptr_st_pstn_actn->c_ref_rmrks,"%s%s",c_ref_rmrks,c_tmp_rmrks);
    }
		/*** Ver 9.5 ends ***/

		if( d_lss_amt_to_be_blckd <= 0 )
		{ 
		  if(d_diff_loss != 0)
      {
        d_balance_amt  = 0.0;
        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Block the loss amount");
        }
        i_returncode = fn_upd_spnlimits( c_ServiceName,
                          ptr_st_pstn_actn,
                          ptr_st_err_msg,
                          c_narration_id,
                          DEBIT_TILL_LIMIT,
                          d_diff_loss,
                          &d_balance_amt);


        if ( i_returncode != 0 )
        {
          fn_errlog( c_ServiceName, "S32145", LIBMSG, ptr_st_err_msg->c_err_msg );
          return FAILURE;
        }
        d_lss_amt_to_be_blckd = d_lss_amt_to_be_blckd  - d_balance_amt ;
      }
		}
		else if ( d_lss_amt_to_be_blckd > 0)
		{
			if(d_lss_amt_blkd != 0)
      {
				d_balance_amt  = 0.0;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Release old loss amount in case or profit");
        }
        i_returncode = fn_upd_spnlimits( c_ServiceName,
                          ptr_st_pstn_actn,
                          ptr_st_err_msg,
                          c_narration_id,
                          DEBIT_TILL_LIMIT,
                          d_lss_amt_blkd,
                          &d_balance_amt);


        if ( i_returncode != 0 )
        {
          fn_errlog( c_ServiceName, "S32150", LIBMSG, ptr_st_err_msg->c_err_msg );
          return FAILURE;
        }
      }
			 d_lss_amt_to_be_blckd = 0;
		}

		if( ptr_st_ordbook->c_prd_typ == 'U' || ptr_st_ordbook->c_prd_typ == 'I' ) /**** loop added in Ver 9.5 ***/ /*** ver 9.8 option plus added  **/
		{
			strcpy ( ptr_st_pstn_actn->c_ref_rmrks, c_tmp_rmrks);    
			MEMSET(c_tmp_rmrks);                                     
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"d_amt_blkd :%lf:",d_amt_blkd);
			fn_userlog(c_ServiceName,"d_diff_amt :%lf:",d_diff_amt);
			fn_userlog(c_ServiceName,"d_lss_amt_to_be_blckd :%lf:",d_lss_amt_to_be_blckd);
			fn_userlog(c_ServiceName,"d_diff_loss :%lf:",d_diff_loss);
		}
 /* 7.9 */

 		if(ptr_st_ordbook->c_prd_typ == 'U')	/*** If loop added in Ver 9.5 ***/
	  {
			 EXEC SQL
       UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_SLTP_ORDR_RFRNC = :ptr_st_ordbook->c_ordr_rfrnc,
                  FOD_AMT_BLCKD = :d_amt_to_be_blckd, 
                  FOD_LSS_AMT_BLCKD = ABS(:d_lss_amt_to_be_blckd),
									FOD_SLTP_MRGN = :d_comp1_mrgn,			
                  FOD_SLTP_PL   = :d_comp1_pl,				 
                  FOD_SLTP_SEBI_MRGN = :d_xchng_amt  
       WHERE      FOD_ORDR_RFRNC = :c_fresh_ord_ref;
		}
		else /*** Else condition added in Ver 9.5 ***/
	  {
    EXEC SQL
       UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_SLTP_ORDR_RFRNC = :ptr_st_ordbook->c_ordr_rfrnc,
                  FOD_AMT_BLCKD = :d_amt_to_be_blckd, 
                  FOD_LSS_AMT_BLCKD = ABS(:d_lss_amt_to_be_blckd),
                  FOD_SLTP_MRGN = :d_comp1_mrgn,/*** Ver 9.8 ***/
  	              FOD_SLTP_PL   = :d_comp1_pl,  /*** Ver 9.8 ***/
      	          FOD_SLTP_SEBI_MRGN = :d_xchng_amt, /*** Ver 9.8 ***/
          	      FOD_OPLUS_PREMIUM  = :d_prem_amt,  /*** Ver 9.8 ***/
              	  FOD_SPAN_MRGN = :d_spn_mrgn,       /*** Ver 9.8 ***/
              	  FOD_EXPR_MRGN = :d_expr_mrgn       /*** Ver 9.8 ***/
       WHERE      FOD_ORDR_RFRNC = :c_fresh_ord_ref;
		}
      if(SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S32155", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }


      EXEC SQL
       UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_SLTP_ORDR_RFRNC = :c_fresh_ord_ref,
                  FOD_FC_FLAG =:c_fod_fc_flag_c    /* 7.9  Hard Code Value Replace With Bind Variable */ 
       WHERE      FOD_ORDR_RFRNC = :ptr_st_ordbook->c_ordr_rfrnc;

      if(SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S32160", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
}

/*** Ver 2.2 Ends **/

/*** Ver 3.9 starts here ***/
int fn_off_sltpfp ( char  *c_ServiceName,
                    char  *c_fresh_ord_ref,
                    struct st_orderbook *ptr_st_ordbook,
                    struct st_err_msg *ptr_st_err_msg
                   )
{  
		char c_fod_fc_flag_c='C';       /* ver 7.9 */

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"c_fresh_ord_ref :%s:",c_fresh_ord_ref);
		}

		EXEC SQL
       UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_SLTP_ORDR_RFRNC = :ptr_st_ordbook->c_ordr_rfrnc
       WHERE      FOD_ORDR_RFRNC = :c_fresh_ord_ref;
      if(SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S32165", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }

      EXEC SQL
       UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_SLTP_ORDR_RFRNC = :c_fresh_ord_ref,
                  FOD_FC_FLAG =:c_fod_fc_flag_c    /* 7.9  Hard Code Value Replace With Bind Variable */ 
       WHERE      FOD_ORDR_RFRNC = :ptr_st_ordbook->c_ordr_rfrnc;

      if(SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S32170", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
}
/*** Ver 3.9 ends here ***/

/*** Ver 5.3 starts *****/
int fn_excpt_eos_fplsoptpls ( char  *c_ServiceName,
															char  *c_cover_ord_ref,
															struct st_orderbook *ptr_st_ordbook,
															struct st_pstn_actn *ptr_st_pstn_actn,
															struct st_err_msg *ptr_st_err_msg
														 )
{ 
		char c_fod_fc_flag_e='E';       /* ver 7.9 */

    char c_fresh_ord_ref[19];

		if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"c_cover_ord_ref :%s:",c_cover_ord_ref);
    }

    EXEC SQL
    SELECT
          FOD_SLTP_ORDR_RFRNC
    INTO  :c_fresh_ord_ref
    FROM  FOD_FO_ORDR_DTLS
    WHERE FOD_ORDR_RFRNC = :c_cover_ord_ref;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S32175", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"c_fresh_ord_ref :%s:",c_fresh_ord_ref);
    }

    EXEC SQL
       UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_SLTP_ORDR_RFRNC = :ptr_st_ordbook->c_ordr_rfrnc
       WHERE      FOD_ORDR_RFRNC = :c_fresh_ord_ref;
      if(SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S32180", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
   
   
      EXEC SQL
       UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_SLTP_ORDR_RFRNC = :c_fresh_ord_ref,
                  FOD_FC_FLAG =:c_fod_fc_flag_e     /* 7.9  Hard Code Value Replace With Bind Variable  */ 
       WHERE      FOD_ORDR_RFRNC = :ptr_st_ordbook->c_ordr_rfrnc;

      if(SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S32185", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
}
/*** Ver 5.3 Ends *****/

/*** Ver 8.9 Starts ***/
int fn_get_quote_zero ( char *c_ServiceName, char c_ord_flw, long l_best_bid_price, long l_best_offer_price, long l_previous_close_price, long *l_quote_zero)
{
	if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"Inside function fn_get_quote_zero");
    fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_best_bid_price is :%ld:",l_best_bid_price);
    fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_best_offer_price is :%ld:",l_best_offer_price);
    fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_previous_close_price is :%ld:",l_previous_close_price);
  }
  if(c_ord_flw == 'B')
  {
    if(l_best_offer_price == 0)
    {
      *l_quote_zero = l_previous_close_price;
    }
    else
    {
      *l_quote_zero = l_best_offer_price;
    }
  }
  else if (c_ord_flw == 'S')
  {
    if(l_best_bid_price == 0)
    {
      *l_quote_zero = l_previous_close_price;
    }
    else
    {
      *l_quote_zero = l_best_bid_price;
    }
  }
  else
  {
    return -1;
  }
	if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_quote_zero is :%ld:",*l_quote_zero);
  }
  return 1;
}
/*** Ver 8.9 Ends ***/

/*** ver 12.9  starts**/
int fn_itmotm_strk_exsts(char *c_ServiceName, char *c_expry_dt,struct st_contract *ptr_st_cntrct, char *c_err_msg)
{
   int   i_crnt_mnth_flg = 0;
   int   i_strike_exists = 0;
   char  c_tmp_prd_typ = 'F';
   char  c_exchng_cd[4];
   char  c_prdct_type;
   char  c_underlyng[7];
   varchar c_expiry_dt[ LEN_DATE ];
   char  c_option_type = '\0';
   long  l_strike_price ;
   long l_spot_rate = 0;
   long l_otm_strike ;
   long l_itm_strike ;

   strcpy(c_exchng_cd,ptr_st_cntrct->c_xchng_cd);
   c_prdct_type = ptr_st_cntrct->c_prd_typ ;
   strcpy(c_underlyng,ptr_st_cntrct->c_undrlyng);
   c_option_type = ptr_st_cntrct->c_opt_typ ;
   l_strike_price = ptr_st_cntrct->l_strike_prc ;
   strcpy ( ( char * )c_expiry_dt.arr, ptr_st_cntrct->c_expry_dt );
   SETLEN ( c_expiry_dt );
   rtrim ( (char *)c_expiry_dt.arr );
 
   if(DEBUG_MSG_LVL_3)
   {
     fn_userlog(c_ServiceName,"Inside fun is running |%s|",c_expiry_dt.arr);
   }

   EXEC SQL
       SELECT 1
       INTO :i_crnt_mnth_flg
       FROM DUAL
       WHERE to_date(:c_expiry_dt,'DD-Mon-YYYY') <=(
       SELECT MIN(FTQ_EXPRY_DT)
       FROM  FTQ_FO_TRD_QT where FTQ_XCHNG_CD=:c_exchng_cd
       and FTQ_PRDCT_TYP= 'F'
       and FTQ_UNDRLYNG=:c_underlyng );

   if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog( c_ServiceName, "S32190",SQLMSG,ptr_st_err_msg->c_err_msg);
     return -1;
   }

   if( i_crnt_mnth_flg == 0 )
   {
     fn_userlog(c_ServiceName,"NOT A NEAR MONTH CONTRACT");
     return i_crnt_mnth_flg;
   }

   EXEC SQL
       SELECT LTQ_RT*100
        INTO  :l_spot_rate
        FROM  LTQ_TRD_QT
        WHERE LTQ_STCK_CD   = :c_underlyng
        AND   LTQ_XCHNG_CD  = 'NSE';

   if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog( c_ServiceName, "S32195",SQLMSG,ptr_st_err_msg->c_err_msg);
     return -1;
   }

   if(DEBUG_MSG_LVL_3)
   {
     fn_userlog(c_ServiceName,"c_exchng_cd |%s|",c_exchng_cd);
     fn_userlog(c_ServiceName,"c_underlyng |%s|",c_underlyng);
     fn_userlog(c_ServiceName,"c_expiry_dt |%s|",c_expiry_dt.arr);
     fn_userlog(c_ServiceName,"c_prdct_type |%c|",c_prdct_type);
     fn_userlog(c_ServiceName,"c_option_type |%c|",c_option_type);
   }

    EXEC SQL
       select FSM_MKT_OTM_STK_CNT,
              FSM_MKT_ITM_STK_CNT
        INTO :l_otm_strike,
             :l_itm_strike
       from   FSM_FO_STRK_MSTR
       where  FSM_XCHNG_CD = :c_exchng_cd
       AND    FSM_UNDRLYNG = :c_underlyng
       AND    FSM_EXPRY_DT = :c_expiry_dt
       AND    FSM_PRDCT_TYP = :c_prdct_type
       AND    FSM_OPT_TYP = :c_option_type
       AND    FSM_ENBL_DSBL_FLG = 'Y';
  
   if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
   {
     fn_errlog( c_ServiceName, "S32200",SQLMSG,ptr_st_err_msg->c_err_msg);
     return -1;
   }

 	 if( SQLCODE == NO_DATA_FOUND )
	 {
     fn_userlog(c_ServiceName,"No data found for Strike master");
		 return -1;
	 }

   if( ptr_st_cntrct->c_opt_typ == 'C' )
   {
     if( ptr_st_cntrct->l_strike_prc <= l_spot_rate ) /** ITM CALL **/
     {
       EXEC SQL
          select 1
          into :i_strike_exists
          from (
          select max(ftq_strk_prc) maxstrk,min(ftq_strk_prc) minstrk from(
          select ftq_strk_prc
          from ftq_fo_trd_qt
          where ftq_undrlyng=:c_underlyng
          and ftq_expry_dt=:c_expiry_dt
          and ftq_prdct_typ= 'O'
          and ftq_opt_typ=:c_option_type
          and ftq_strk_prc <= :l_spot_rate
          order by ftq_strk_prc desc
          )
          where rownum <= :l_itm_strike
          )
          where :ptr_st_cntrct->l_strike_prc >=  minstrk;

      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S32205",SQLMSG,ptr_st_err_msg->c_err_msg);
        return -1;
      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside ITM CALL Underlying is :%s:",c_underlyng);
        fn_userlog(c_ServiceName,"Expiry date is :%s:",c_expiry_dt.arr);
        fn_userlog(c_ServiceName,"Product type is :%c:",c_prdct_type);
        fn_userlog(c_ServiceName,"Option Type :%c:",c_option_type);
        fn_userlog(c_ServiceName,"Spot rate is :%ld:",l_spot_rate);
        fn_userlog(c_ServiceName,"Max Strike is :%ld:",ptr_st_cntrct->l_strike_prc);
        fn_userlog(c_ServiceName,"ITM count of strike :%ld:",l_itm_strike);
      }
   }

   else if ( ptr_st_cntrct->l_strike_prc > l_spot_rate ) /**Skip above validation if strike > (spot - ITM count of strikes) **/ /** OTM CALL **/
    {
      EXEC SQL
          select 1
          into :i_strike_exists
          from (
          select max(ftq_strk_prc) maxstrk,min(ftq_strk_prc) minstrk from(
          select ftq_strk_prc
          from ftq_fo_trd_qt
          where ftq_undrlyng=:c_underlyng
          and ftq_expry_dt=:c_expiry_dt
          and ftq_prdct_typ= 'O'
          and ftq_strk_prc > :l_spot_rate
          and ftq_opt_typ= :c_option_type
          order by ftq_strk_prc asc
          )
          where rownum <= :l_otm_strike
          )
         where :ptr_st_cntrct->l_strike_prc <=  maxstrk;

     if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog( c_ServiceName, "S32210",SQLMSG,ptr_st_err_msg->c_err_msg);
       return -1;
     }
     
     if(DEBUG_MSG_LVL_3)
     {
       fn_userlog(c_ServiceName,"Inside OTM CALL Underlying is :%s:",c_underlyng);
       fn_userlog(c_ServiceName,"Expiry date is :%s:",c_expiry_dt.arr);
       fn_userlog(c_ServiceName,"Product type is :%c:",c_prdct_type);
       fn_userlog(c_ServiceName,"Option Type :%c:",c_option_type);
       fn_userlog(c_ServiceName,"Spot rate is :%ld:",l_spot_rate);
       fn_userlog(c_ServiceName,"Max Strike is :%ld:",ptr_st_cntrct->l_strike_prc);
       fn_userlog(c_ServiceName,"OTM count of strike :%ld:",l_itm_strike);
     }
    }
   }

   else if( ptr_st_cntrct->c_opt_typ == 'P')
   {
       if( ptr_st_cntrct->l_strike_prc < l_spot_rate ) /** Skip above validation if strike > (spot - OTM count of strikes)*/ /** OTM PUT **/
       {
          EXEC SQL
             select 1
             into :i_strike_exists
             from (
             select max(ftq_strk_prc) maxstrk,min(ftq_strk_prc) minstrk from(
             select ftq_strk_prc
             from ftq_fo_trd_qt
             where ftq_undrlyng=:c_underlyng
             and ftq_expry_dt=:c_expiry_dt
             and ftq_prdct_typ= 'O'
             and ftq_opt_typ=:c_option_type
             and ftq_strk_prc < :l_spot_rate
             order by ftq_strk_prc desc
             )
             where rownum <= :l_otm_strike
             )
             where :ptr_st_cntrct->l_strike_prc >= minstrk;

         if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
         {
           fn_errlog( c_ServiceName, "S32215",SQLMSG,ptr_st_err_msg->c_err_msg);
           return -1;
         }

         if(DEBUG_MSG_LVL_3)
         {
           fn_userlog(c_ServiceName,"Inside OTM PUT Underlying is :%s:",c_underlyng);
           fn_userlog(c_ServiceName,"Expiry date is :%s:",c_expiry_dt.arr);
           fn_userlog(c_ServiceName,"Product type is :%c:",c_prdct_type);
           fn_userlog(c_ServiceName,"Option Type :%c:",c_option_type);
           fn_userlog(c_ServiceName,"Spot rate is :%ld:",l_spot_rate);
           fn_userlog(c_ServiceName,"Max Strike is :%ld:",ptr_st_cntrct->l_strike_prc);
           fn_userlog(c_ServiceName,"OTM count of strike :%ld:",l_itm_strike);
         }
     }

     else if(ptr_st_cntrct->l_strike_prc >= l_spot_rate)/** Skip above validation if strike>(spot-OTM count of strikes)*/ /** ITM PUT**/
      {
         EXEC SQL
           select 1
           into :i_strike_exists
           from (
           select max(ftq_strk_prc) maxstrk,min(ftq_strk_prc) minstrk from(
           select ftq_strk_prc
           from ftq_fo_trd_qt
           where ftq_undrlyng=:c_underlyng
           and ftq_expry_dt=:c_expiry_dt
           and ftq_prdct_typ= 'O'
           and ftq_opt_typ=:c_option_type
           and ftq_strk_prc >= :l_spot_rate
           order by ftq_strk_prc asc
           )
           where rownum <= :l_itm_strike
           )
           where :ptr_st_cntrct->l_strike_prc <= maxstrk;

        if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
        {
          fn_errlog( c_ServiceName, "S32220",SQLMSG,ptr_st_err_msg->c_err_msg);
          return -1;
        }

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Inside ITM PUT Underlying is :%s:",c_underlyng);
          fn_userlog(c_ServiceName,"Expiry date is :%s:",c_expiry_dt.arr);
          fn_userlog(c_ServiceName,"Product type is :%c:",c_prdct_type);
          fn_userlog(c_ServiceName,"Option Type :%c:",c_option_type);
          fn_userlog(c_ServiceName,"Spot rate is :%ld:",l_spot_rate);
          fn_userlog(c_ServiceName,"Max Strike is :%ld:",ptr_st_cntrct->l_strike_prc);
          fn_userlog(c_ServiceName,"ITM count of strike :%ld:",l_itm_strike);
        }
     }
   }
   
   fn_userlog(c_ServiceName,"i_strike_exists in function fn_itmotm_strk_exsts :%d:",i_strike_exists);
   return i_strike_exists;

}
/*** Ver 12.9 Ends ***/   
