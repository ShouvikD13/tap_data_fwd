/*****************************************************************************************/
/******************************************************************************************
Service Name          : sfo_dt_plcP																												*
																										                             					*
Description           : Allows a DT user to place a fno order                             *
Input parameters(N,S,C ordres)                              															*
																																													*
																FFO_USR_ID																								*
																FFO_SSSN_ID																								*
																FFO_XCHNG_CD																							*
																FFO_SOURCE_FLG																						*
																FFO_SPL_FLG																								*
																FFO_ORD_TYP																								*
																FFO_EBA_MTCH_ACT_NO																				*
																FFO_PRDCT_TYP																							*
																FFO_UNDRLYNG																							*
																FFO_EXPRY_DT																							*
																FFO_EXER_TYP																							*
																FFO_OPT_TYP																								*
																FFO_STRK_PRC																							*
																FFO_CTGRY_INDSTK																					*
																FFO_ORDR_FLW																							*
																FFO_LMT_MKT_SL_FLG																				*
																FFO_DSCLSD_QTY																						*
																FFO_STP_LSS_TGR																						*
																FFO_LMT_RT																								*
																FFO_ORD_TOT_QTY																						*
																FFO_ORD_VALID_DT																					*
																FFO_STP_LSS_TGR																						*
																																													*
Input parameters(2L,3L(3 times) orders)																										*
																FFO_USR_ID																								*
																FFO_SSSN_ID																								*
																FFO_SOURCE_FLG																						*
																FFO_SPL_FLG																								*
																FFO_STRK_PRC																							*
																FFO_STRK_PRC																							*
																FFO_LMT_RT																								*
																FFO_LMT_RT																								*
																FFO_ORD_TOT_QTY																						*
																FFO_ORD_TOT_QTY																						*
																FFO_CTGRY_INDSTK																					*
																FFO_CTGRY_INDSTK																					*
																FFO_EXER_TYP																							*
																FFO_EXER_TYP																							*
																FFO_OPT_TYP																								*
																FFO_OPT_TYP																								*
																FFO_PRDCT_TYP																							*
																FFO_PRDCT_TYP																							*
																FFO_LMT_MKT_SL_FLG																				*
																FFO_LMT_MKT_SL_FLG																				*
																FFO_OPERATION_TYP 2\3																			*
																FFO_ORDR_FLW																							*
																FFO_ORDR_FLW																							*
																FFO_EXPRY_DT																							*
																FFO_EXPRY_DT																							*
																FFO_UNDRLYNG																							*
																FFO_UNDRLYNG																							*
																FFO_XCHNG_CD																							*
																FFO_XCHNG_CD																							*
																FFO_EBA_MTCH_ACT_NO																				*
																FFO_SETTLOR																								*
																FFO_SETTLOR																								*
																FFO_TRD_PSSWD																							*
																FFO_ORD_TYP																								*
																FFO_CHANNEL																								*
																FFO_CHANNEL																								*
																FFO_STP_LSS_TGR																						*
																FFO_STP_LSS_TGR																						*
																																													*
Output Parameters								FFO_ORDR_RFRNC																						*
                        				FFO_ACTN_ID																								*
                        				FFO_SERIES																								*
                        				FFO_ERR_MSG																								*
																																													*
Log                   				:18/08/2002  		1.0 Release ICICI Infotech|Sangeet					*
Log                           :08/01/2006     1.1 Changes for DLrevamp|Vikash/Sushil      *
															:04/03/2008			1.2 IBM migration														*
															:12/08/2008			1.3	Bug fix : to get FCM_INDSTK from FCM table	*
															:09/09/2009     1.4 DL FuturePlus. NRI check Vidyayini Krish*
															:13/06/2012     1.5 Exchange Code Handling for BSE NSE			*
															:01/03/2013			1.6	Changes for SPAN in DL(Vishnu)					*
															:03/07/2013     1.7	Source flag for New DL .NET (Bhushan)		*	
															:25/10/2013			1.8	Changes for SLTP F+	(Bhushan)						*
															:21/02/2014			1.9 Changes for OptionPLUS (Bhushan)				*
															:20/05/2014			2.0 Changes for Span FuturePLUS (Swati A.B)	*
															:09/09/2014			2.1 View to FML changes	(Samip M)						*
                              :13/07/2015     2.2 FCM-FTQ Merger Changes (Anand Dhopte)   *
                              :28/10/2016     VQC Version Quality Control (Anand Dhopte)  *
                              :12/11/2019     2.3 Sensibull Integration (Navina D.)       *															
                              :15/04/2021     2.4 Sensibull Null Option Type (Suchita)    *
                              :22/01/2021     2.5 Vendor Validation Changes ( Anuj P )    *
                              :11/05/2021     2.6 itrade action id changes  (Navina D ) *
                              :27/01/2022     2.7 CR-ISEC14-169739 -Introduction of Algorithm Trading Strategies (Sachin Birje ) * 
                              :15/06/2022     2.8 FLASH TRADE (Naveena)                   * 
                              :25/05/2023     2.9 RQ:#2629-Error code for the message to be given (Dipin) *
******************************************************************************************/
/*****************************************************************************************/
#include <stdio.h>									
#include <stdlib.h>																								
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
/*** #include <eba_to_ors.h> *** Commented in VQC as function/macro from this header file is not used in this code ***/
#include <fo_fml_def.h>
/** #include <fo_view_def.h> **/	/** Commented for Ver 2.1 **/
#include <fn_log.h>

 /***  Commented in VQC as function/macro from these header files is not used in this code ***

#include <fn_session.h>  
#include <fn_tuxlib.h> 
#include <fn_ddr.h> 

 ***********/

#include <fn_read_debug_lvl.h>	/* ver 1.2 */
#include <fn_val_ord.h>   /** ver 2.3 **/
#include <fo_view_def.h> /** ver 2.3 **/

#include <errno.h>
int 	Z ; 
#define INIT(x,y)   for( Z=0;Z<y;Z++)x[Z] = 0 ;
 /*** long  l_retval; *** commented in VQC as variable is not used ***/
 /***char  c_errmsg[256];   *** Commented in VQC as local variable is already available***/


void SFO_DT_PLCP(TPSVCINFO *rqst)
{
	FBFR32 	*ptr_fml_Ibuf;
	FBFR32 	*ptr_fml_Obuf;
  
  /*** Commented in VQC *** 
	EXEC SQL INCLUDE "table/fcm_fo_cntrct_mstr.h";		*	Ver 1.3 : Added	*    ***/
	EXEC SQL INCLUDE "table/icd_info_client_dtls.h"; /*** Ver 2.3 ***/

	char 	c_ServiceName[33];
 	varchar 	c_err_msg[256]; /*** Variable type changed to varchar in VQC ***/

 	int 	i_Fget;
 	int 	i_err[30];
  int   i_returncode = 0; /** Ver 2.3 **/ 	 
 	char  c_usr_id[50] ;
 	char  c_source_flag = '\0';  /*** Variable initialized in VQC ***/  
 	char  c_spl_flg = '\0' ;     /*** Variable initialized in VQC ***/
 	char  c_prdct_typ = '\0' ;   /*** Variable initialized in VQC ***/

 	/*** Following variables commented in VQC as they are unused

	char  c_source_flg ; 
 	char  c_ord_typ ; 
 	char  c_ordr_flw ; 
	char 	c_pipe_id[2+1];

 ***/  
	varchar c_ven_id[50+1];  /*** Ver 2.3 ***/
  char c_ven_nm[15] = "\0";        /*** Ver 2.3 ***/
	char 	c_clm_mtch_accnt[10+1];  
	char 	c_service_nm[30+1];  
	char 	c_xchng_cd[3+1];  
	char 	c_channel[3+1]; 
	char 	c_dbc_channel[7+1];			/***	ver 1.1 DL revamp	***/
 
  varchar c_algo_id[50];   /** Ver 2.7 **/
  varchar c_algo_ord_rmrks[50]; /** Ver 2.7 **/
 
  struct vw_err_msg st_err_msg;  /** Ver 2.3 **/
	MEMSET(st_err_msg); /** Ver 2.3 **/

	/*** Following variables commented in VQC as they are unused

	char 	c_rout[3+1];
	char 	c_exg_nxt_trd_dt[11+1];  
 	char  c_expry_dt[11+1] ; 
 	char  c_ord_valid_dt[11+1] ; 
 	char  c_ordr_rfrnc[18+1] ; 
 	char  c_rqst_tm[22+1] ;

 	**********************************/

	char 	c_exg_crrnt_stts  ='\0' ; /*** Variable initialized in VQC ***/  

	/*** Following Variables commented in VQC as they are unused

	char 	c_exg_ofln_stts ; 
 	char 	c_lmt_mkt_sl_flg ; 
 	char 	c_undrlyng[10];        **  ver 1.3 ***

 	***/
	char c_opt_type = '\0'; /*** ver 2.4 ***/

	char  c_prd_typ = '\0' ; /* ver 1.4 */ /*** Variable initialized in VQC ***/
	char c_spn_flg = '\0';               /* Ver 1.6 */
  char c_bse_spn_flg ='\0';            /* Ver 1.6 */
  /*** char c_dl_flg= '\0';  * Ver 1.6 * Commented in VQC as variable use is commented ***/

 	/*** VQC - Following Variables are commented as they are not in use

	long  l_sssn_id ; 
 	long  l_stp_lss_tgr ; 
 	long  l_lmt_rt ; 
  long  l_diff_nxt ; 
 	long  l_diff_exp ;
 	long  l_diff_exp1 ;

	****************************/

	long  l_clnt_ctgry =0; /* ver 1.4 */
 	long  int li_len_tobuf ;
 	long  l_acnt_id =-1 ;			/** Ver 1.1 : Commented	uncommented in ver 2.6***/

  char c_api_spl = '\0'; /*** Ver 2.8 ***/
  char err_code[7] = {'\0'}; /** ver 2.9 **/

	strcpy(c_ServiceName,"SFO_DT_PLCP");
	INITDBGLVL(c_ServiceName);	/* ver 1.2 */

  ptr_fml_Ibuf = (FBFR32*)rqst->data;
	/*******************************************************/
	/****************Allocating the buffers*****************/
	/*******************************************************/
  ptr_fml_Obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN + 256);
  if(ptr_fml_Obuf == NULL)
	{
		fn_errlog( c_ServiceName, "S31005", TPMSG, c_err_msg.arr ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
    strcpy(c_err_msg.arr,"Problem in Placing order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
    Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
		Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); /*** Ver 2.6 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
	}
	/*******************************************************/
	/************Allocation of the buffers over*************/
	/*******************************************************/
	

	/*******************************************************/
	/*****Initialising the string variables*****************/
	/*******************************************************/
	INIT(c_usr_id,50);
	INIT(c_clm_mtch_accnt,11);
	
  /*** VQC comment starts *** 
  
  INIT(c_exg_nxt_trd_dt,12); 
	INIT(c_ord_valid_dt,12);
	INIT(c_expry_dt,12); 
	INIT(c_ordr_rfrnc,19);
	INIT(c_rqst_tm,23); 
   
  *** Commented in VQC as variable declaration is commented ***/
	
  INIT(c_dbc_channel,8);					/*   ver 1.1 DL	revamp		****/

	/*******************************************************/
	/*****Initialising of string variables over*************/
	/*******************************************************/

	/*******************************************************/
	/*****Getting the nessary check variables **************/
	/*******************************************************/
  if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName,"Vikash we are inside SFO_DT_PLCP going to remove all the checks : ");
  }
	i_err[0] = Fget32(ptr_fml_Ibuf,FFO_USR_ID,0,(char *)c_usr_id,0) ;
	/*** i_err[1] = Fget32(ptr_fml_Ibuf,FFO_SSSN_ID,0,(char *)&l_sssn_id,0) ; *** commented in VQC as variable is not used ***/
	i_err[1] = Fget32(ptr_fml_Ibuf,FFO_SOURCE_FLG,0,(char *)&c_source_flag,0) ; /* i_err index changed from 2 to 1 in VQC */
	i_err[2] = Fget32(ptr_fml_Ibuf,FFO_SPL_FLG,0,(char *)&c_spl_flg,0) ; /* i_err index changed from 3 to 2 in VQC */
	i_err[3] = Fget32(ptr_fml_Ibuf,FFO_PRDCT_TYP,0,(char *)&c_prdct_typ,0) ; /* i_err index changed from 4 to 3 in VQC */
	i_err[4] = Fget32(ptr_fml_Ibuf,FFO_XCHNG_CD,0,(char *)c_xchng_cd,0) ; /* i_err index changed from 5 to 4 in VQC */
	i_err[5] = Fget32(ptr_fml_Ibuf,FFO_EBA_MTCH_ACT_NO,0,(char *)c_clm_mtch_accnt,0) ; /* i_err index changed from 6 to 5 in VQC */

  /*** Commented in VQC starts  *** as use of variables is commented ***
	
  i_err[7] = Fget32(ptr_fml_Ibuf,FFO_LMT_MKT_SL_FLG,0,(char *)&c_lmt_mkt_sl_flg,0) ;
	i_err[8] = Fget32(ptr_fml_Ibuf,FFO_ORD_TYP,0,(char *)&c_ord_typ,0) ;
	i_err[9] = Fget32(ptr_fml_Ibuf,FFO_ORDR_FLW,0,(char *)&c_ordr_flw,0) ;
	i_err[10] =Fget32(ptr_fml_Ibuf,FFO_EXPRY_DT,0,(char *)c_expry_dt,0) ;
	i_err[11] =Fget32(ptr_fml_Ibuf,FFO_UNDRLYNG,0,(char *)c_undrlyng,0) ;				*	Ver 1.3 : Added	*
	i_err[12] =Fget32(ptr_fml_Ibuf,FFO_STRK_PRC,0,(char *)&sql_fcm_strk_prc,0) ;		 *  Ver 1.3 : Added *
	i_err[13] =Fget32(ptr_fml_Ibuf,FFO_OPT_TYP,0,(char *)&sql_fcm_opt_typ,0) ;		 *  Ver 1.3 : Added *

  ********/

	for( i_Fget = 0 ; i_Fget <= 5 ; i_Fget++ )		/*	Ver 1.3 : 10 -> 13	*/ /* changed to 5 from 13 in VQC */
	{
    if(i_err[i_Fget] == -1)
		{
	   fn_userlog(c_ServiceName,"Error in Fget of :%d:",i_Fget);
     fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg.arr);/*Datatype of c_err_msg changed from char to varchar in VQC*/
	   strcpy(c_err_msg.arr,"Problem in Placing order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
		 Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
     Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented	...Uncommented in Ver 2.6 ***/
		 tpfree((char *)ptr_fml_Ibuf);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
		}
	}

	/*** Ver 2.8 ***/
  if(Fget32(ptr_fml_Ibuf,FFO_UPLD_MTCH_FLG,0,(char *)&c_api_spl,0) == -1)
  {
    if( Ferror32 != FNOTPRES)
    {
      fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg.arr  );
      strcpy(c_err_msg.arr,"Problem in Placing order");
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
      tpfree((char *)ptr_fml_Ibuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    }
  }
	fn_userlog(c_ServiceName,"API call from :%c:",c_api_spl);
	
	/*** Ver 2.8 ends ***/

  fn_userlog(c_ServiceName,"Product Typ Is :%c:",c_prdct_typ);
  fn_userlog(c_ServiceName,"c_xchng_cd Is :%s:",c_xchng_cd);
	fn_userlog(c_ServiceName,"c_clm_mtch_accnt Is :%s:",c_clm_mtch_accnt);

	/*** ver 2.4 starts ***/
  /*** handling for option type is Null received from front end. ***/
  if( c_prdct_typ == 'F' )
  {
    if( Fget32(ptr_fml_Ibuf,FFO_OPT_TYP,0,(char *)&c_opt_type,0) == -1 )
    {
     fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg.arr);
     strcpy(c_err_msg.arr,"Problem in Placing order");
     Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
     tpfree((char *)ptr_fml_Ibuf);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    }

    fn_userlog(c_ServiceName," c_opt_type :%c: before ",c_opt_type);
    if( c_opt_type != '*')
    {
        c_opt_type='*';
        fn_userlog(c_ServiceName," c_opt_type :%c: after ",c_opt_type);

        if( Fchg32( ptr_fml_Ibuf,FFO_OPT_TYP,0,(char *)&c_opt_type,0) == -1 )
        {
         fn_errlog( c_ServiceName, "S31025", FMLMSG, c_err_msg.arr);
         strcpy(c_err_msg.arr,"Problem in Placing order");
         Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
         tpfree((char *)ptr_fml_Ibuf);
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
        }
    }
  }
  /*** ver 2.4 ends ***/
	/** Ver 1.6 Starts **/

  /*** Commented in VQC as variable used in this code is commented ***

	if(Fget32(ptr_fml_Ibuf,FFO_STATUS_FLG,0,(char *)&c_dl_flg,0) == -1)
  {
    if( Ferror32 != FNOTPRES)
    {
			fn_userlog(c_ServiceName,"Error in Fget of :%d:",i_Fget);
      fn_errlog( c_ServiceName, "S31030", FMLMSG, c_err_msg  ); 
      strcpy(c_err_msg,"Problem in Placing order"); 
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 ); 
      tpfree((char *)ptr_fml_Ibuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    }
  }
   
  **************/

  EXEC SQL
    SELECT  NVL(CLM_SPAN_ALLWD,'N'),
            NVL(CLM_BSESPAN_ALLWD,'N')
    INTO    :c_spn_flg,
            :c_bse_spn_flg
    FROM    CLM_CLNT_MSTR
    WHERE   CLM_MTCH_ACCNT  = :c_clm_mtch_accnt;

  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
    strcpy(c_err_msg.arr,"Problem in Placing order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
    Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
    tpfree((char *)ptr_fml_Ibuf);
		Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); /*** Ver 2.6 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"NSE SPAN Allowed Flag Is :%c:",c_spn_flg);
    fn_userlog(c_ServiceName,"BSE SPAN Allowed Flag Is :%c:",c_bse_spn_flg);
  /***  fn_userlog(c_ServiceName,"Old DL Flag Is :%c:",c_dl_flg); *** commented in VQC ***/
  }

  /*** 	Commented in VQC as Old DL site is no longer in use,
			 	we can skip following check introduced to restrict
 				customers from placing SPAN orders from OLD DL.
 
	
	*** Note : c_dl_flg set to 'N' when called from New DL ***

	if( ( ( c_spn_flg == 'Y' && strcmp(c_xchng_cd,"NFO") == 0 ) ||
        ( c_bse_spn_flg == 'Y' && strcmp(c_xchng_cd,"BFO") == 0 ) ) && c_dl_flg != 'N'  )
  {
    fn_userlog(c_ServiceName, "SPAN Customer Trying To Place Order Under Normal Margining System.");
    fn_errlog( c_ServiceName, "S31040", "SPAN Customer Trying To place order Under Normal Margining System", c_err_msg);
    strcpy(c_err_msg,"You Are Marked Under SPAN. Please Visit WebSite To Place Order."); 
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 ); 
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

   ************************/

	/*** Following commented In Ver 2.0 for enabling SPAN FP on DL.net
	if( ( ( c_spn_flg == 'Y' && strcmp(c_xchng_cd,"NFO") == 0 ) ||
        ( c_bse_spn_flg == 'Y' && strcmp(c_xchng_cd,"BFO") == 0 ) ) &&  c_prdct_typ == 'P')	
	{
		fn_errlog( c_ServiceName, "S31045","This product is not enabled for SPAN customer", c_err_msg );
		strcpy(c_err_msg,"This product is not enabled for SPAN customer");
    Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
    tpfree((char *)ptr_fml_Ibuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
	}
	Commented In Ver 2.0 ends ***/

  /** ver 1.6 Ends **/

	/* Ver 1.4 */
	EXEC SQL
			 SELECT CCG_CLNT_CTGRY_ID
			 INTO   :l_clnt_ctgry
			 FROM   clm_clnt_mstr clm,
              ccg_clnt_ctgry ccg
       WHERE
              clm.clm_clnt_ctgry_id=ccg.ccg_clnt_ctgry_id
       AND    clm.clm_mtch_accnt= (SELECT uac_clm_mtch_accnt
                                   FROM     uac_usr_accnts
                                   WHERE    UAC_CLM_MTCH_ACCNT = :c_clm_mtch_accnt
                                   AND      rownum = 1);

	 if(SQLCODE != 0)
    {
      fn_userlog(c_ServiceName,"Error in selecting category of client");
      fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
      strcpy(c_err_msg.arr,"Problem in Placing order");/*Datatype of c_err_msg changed from char to varchar in VQC*/
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );/*Datatype of c_err_msg changed from char to varchar in VQC*/
      tpfree((char *)ptr_fml_Ibuf);
			Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); /*** Ver 2.6 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    }

	 EXEC SQL
		SELECT  CPM_PRDCT_TYP
		INTO    :c_prd_typ  
            FROM    CPM_CCG_PRM_MAP 
            WHERE   CPM_CLN_CTGRY_ID = :l_clnt_ctgry
						AND     CPM_PRDCT_TYP = :c_prdct_typ
						AND     CPM_XCHNG_CD = :c_xchng_cd									/**** Ver 1.5 ***/ 
            AND     CPM_MKT_TYP = 'D';

		if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_userlog(c_ServiceName,"Error in selecting product type for category");
      fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg.arr  );/*Datatype of c_err_msg changed from char to varchar in VQC*/
      strcpy(c_err_msg.arr,"Problem in Placing order");/*Datatype of c_err_msg changed from char to varchar in VQC*/
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );/*Datatype of c_err_msg changed from char to varchar in VQC*/
      tpfree((char *)ptr_fml_Ibuf);
			Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); /*** Ver 2.6 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    }
		if( SQLCODE == NO_DATA_FOUND )
		{
			fn_errlog( c_ServiceName, "B56031", DEFMSG, c_err_msg.arr  );/*Datatype of c_err_msg changed from char to varchar in VQC*/
			Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );/*Datatype of c_err_msg changed from char to varchar in VQC*/
      tpfree((char *)ptr_fml_Ibuf);
			Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); /*** Ver 2.6 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
		}

	/* Ver 1.4 */
			 	
  /*** Commented in VQC ***
  c_undrlyng[6] = '\0';  * ver 1.3 for handling MINIFTY contracts *
	strcpy(sql_fcm_undrlyng,c_undrlyng);   * ver 1.3  *
  
  *********************/

	/*******************************************************/
	/*****Getting of nessary check variables over***********/
	/*******************************************************/

	/*******************************************************/
	/*****Validating the ASP part***************************/
	/*******************************************************/

		EXEC SQL
		SELECT	EXG_CRRNT_STTS   /*** , Commented in VQC as host variables are not used
						EXG_OFLN_STTS,
						EXG_NXT_TRD_DT ***/
		INTO		:c_exg_crrnt_stts /*** , Commented in VQC as host variables are not used
						:c_exg_ofln_stts, 
						:c_exg_nxt_trd_dt ***/
		FROM		EXG_XCHNG_MSTR
		WHERE		EXG_XCHNG_CD = :c_xchng_cd ;

		if(SQLCODE != 0)
		{
			fn_userlog(c_ServiceName,"Error in selecting from Exchange master");
      fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
      strcpy(c_err_msg.arr,"Problem in Placing order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
		  Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented ...Uncommented in Ver 2.6  ***/
      tpfree((char *)ptr_fml_Ibuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    }	

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"c_exg_crrnt_stts is :%c:",c_exg_crrnt_stts);
			/***	fn_userlog(c_ServiceName,"c_exg_ofln_stts is :%c:",c_exg_ofln_stts);
			fn_userlog(c_ServiceName,"c_exg_nxt_trd_dt is :%s:",c_exg_nxt_trd_dt); *** commented in VQC as varibles are not used ***/
		}

	/*** Commented in ver 1.1
	*****Cannot place order in expiry Mode******************
	********************************************************

		if(c_exg_crrnt_stts == 'X' || c_exg_crrnt_stts == 'S')
		{
			fn_userlog(c_ServiceName,"Cannot place order, Expiry is under way");
      fn_errlog( c_ServiceName, "S31065", "Cannot place order, Expiry is under way ", c_err_msg  );
			strcpy(c_err_msg,"Cannot place order, Expiry is under way ");
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
		  Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpfree((char *)ptr_fml_Ibuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
		}	

	*********************************************************
	**Cannot place Market or IOC orders in closed Status*****
	*********************************************************

		if(c_exg_crrnt_stts != 'O' && (c_lmt_mkt_sl_flg == 'M' || c_ord_typ == 'I'))
		{
			fn_userlog(c_ServiceName,"Cannot place Mkt or IOC order, exchange is closed");
      fn_errlog( c_ServiceName,"S31070"
									,"Cannot place Mkt or IOC order, exchange is closed",c_err_msg  );
	
			strcpy(c_err_msg,"Cannot place Mkt or IOC order, exchange is closed");
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpfree((char *)ptr_fml_Ibuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
		}
  ******************************************  ver 1.1  ***/  

    /*** Commented in VQC as variable use is commented ***

		i_err[0] =Fget32(ptr_fml_Ibuf,FFO_LMT_RT,0,(char *)&l_lmt_rt,0) ;
   	if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"The limit price is :%ld:",l_lmt_rt) ;
    }
    ********************/

	  /*** Commenetd in ver 1.1 
		if(i_err[0] != -1 )
		{ 
				***************************************************
				****Cannot Enter Lmt Price For Mkt Ordres**********
				***************************************************

				if(c_lmt_mkt_sl_flg == 'M' && l_lmt_rt != 0)
				{
					fn_userlog(c_ServiceName,"Cannot Enter Limit price for Market orders");
      		fn_errlog( c_ServiceName,"S31075"
											,"Cannot Enter Limit price for Market orders",c_err_msg  );
					strcpy(c_err_msg,"Cannot Enter Limit price for Market orders");
      		Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      		Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      		tpfree((char *)ptr_fml_Ibuf);
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
				}

				***************************************************
				****Lmt Price Cannot Be Less Than Equal To 0*******
				***************************************************

				if((c_lmt_mkt_sl_flg == 'L' || c_lmt_mkt_sl_flg == 'S') && l_lmt_rt <= 0 )
				{
					fn_userlog(c_ServiceName,"Limit Price Cannot be Less or Equal to Zero");
      		fn_errlog( c_ServiceName,"S31080"
											,"Limit Price Cannot be Less or Equal to Zero",c_err_msg  );
					strcpy(c_err_msg,"Limit Price Cannot be Less or Equal to Zero");
      		Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      		Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      		tpfree((char *)ptr_fml_Ibuf);
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
				}
		}
		else
		{
        #ifdef DEBUG 
				fn_userlog(c_ServiceName,"The limit price is :%ld:",l_lmt_rt) ;
        #endif

				***************************************************
				**Lmt Prc Has to be there for 'L' or 'S' orders ***
				***************************************************

				if(c_lmt_mkt_sl_flg == 'L'  || c_lmt_mkt_sl_flg == 'S')
				{
					fn_userlog(c_ServiceName,"Please Enter Limit Price");
      		fn_errlog( c_ServiceName,"S31085",FMLMSG ,c_err_msg);
					strcpy(c_err_msg,"Please Enter Limit Price");
      		Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      		Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      		tpfree((char *)ptr_fml_Ibuf);
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
				}
		}
    ************************************  ver 1.1 ***/

	  /*** Commented in ver 1.1 

		i_err[0] = Fget32(ptr_fml_Ibuf,FFO_STP_LSS_TGR,0,(char *)&l_stp_lss_tgr,0) ;

		if(i_err[0] == -1)
		{
				**************************************************
				***SLTP price is necessary for Stop Loss Orders***
				**************************************************

				if(c_lmt_mkt_sl_flg == 'S')
				{
					fn_userlog(c_ServiceName,"Stop Loss Trigger Price cannot be Zero for Stop Loss ordres");
      		fn_errlog( c_ServiceName,"S31090",FMLMSG ,c_err_msg);
					strcpy(c_err_msg,"Stop Loss Trigger Price cannot be Zero for Stop Loss ordres.");
      		Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      		Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      		tpfree((char *)ptr_fml_Ibuf);
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    		}
		}
		else
		{
				**************************************************************
				***SLTP prc shouldn't be present for Market or Limit Orders***
				**************************************************************

        if((c_lmt_mkt_sl_flg == 'M'  || c_lmt_mkt_sl_flg == 'L') && l_stp_lss_tgr !=0)
				{
					fn_userlog(c_ServiceName,"Cannot put Stop Loss price to market Ordres");
        	fn_errlog( c_ServiceName,"S31095"
          	        ,"Cannot enter Stop Loss trigger price for Market Ordres.",c_err_msg  );
					strcpy(c_err_msg,"Cannot enter Stop Loss trigger price for Market Ordres.");
        	Fadd32( ptr_fml_Obuf, FFO_ERR_MSG,(char * )c_err_msg, 0 );
        	Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        	tpfree((char *)ptr_fml_Ibuf);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
      	}			

				***********************************************************
				******SL trigger price cannot be Zero**********************
				***********************************************************

				if(l_stp_lss_tgr == 0 && c_lmt_mkt_sl_flg == 'S')
				{
					fn_userlog(c_ServiceName,"SL trigger price cannot be Zero");
       	 fn_errlog( c_ServiceName,"S31100"
       	           ,"Stop Loss trigger price cannot be Zero",c_err_msg  );
				 strcpy(c_err_msg,"Stop Loss trigger price cannot be Zero");
       	 Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
       	 Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       	 tpfree((char *)ptr_fml_Ibuf);
       	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
      	}

				**************************************************
				**For Buy SLTP ordr Trg Prc must exceed Lmt Rate**
				**************************************************

				if(c_ordr_flw == 'B' && l_stp_lss_tgr > l_lmt_rt && c_lmt_mkt_sl_flg == 'S')
				{
					fn_userlog(c_ServiceName,"Stop Loss trggr price cannot greater than Limit Price for Buy Order");
        	fn_errlog( c_ServiceName,"S31105"
         	     ,"Stop Loss trigger price cannot Greater than Limit Price for Buy Order",c_err_msg  );
					strcpy(c_err_msg,"Stop Loss trigger price cannot Greater than Limit Price for Buy Order.");
        	Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
        	Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        	tpfree((char *)ptr_fml_Ibuf);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
      	}
  
				***********************************************
				*** Commented in ver 1.1
				**For Sell SLTP ordr Rate must exceed Trg Price**
				***********************************************

				if(c_ordr_flw == 'S' && l_stp_lss_tgr < l_lmt_rt && c_lmt_mkt_sl_flg == 'S')
				{
					fn_userlog(c_ServiceName,"SL triggr prc cannot less than Limit Price for Sell Order");
        	fn_errlog( c_ServiceName,"S31110"
         	         ,"Stop Loss trigger price cannot Less than Limit Price for Sell Order",c_err_msg  );
					strcpy(c_err_msg,"Stop Loss trigger price cannot Less than Limit Price for Sell Order.");
        	Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
        	Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        	tpfree((char *)ptr_fml_Ibuf);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
      	}
		}
    ************************************ ver 1.1  ***/
	

		/************ Commented in ver 1.1  ***************

		if(c_ord_typ == 'D')
		{

			i_err[0] = Fget32(ptr_fml_Ibuf,FFO_ORD_VALID_DT,0,(char *)c_ord_valid_dt,0) ;

			**For GTD ordres Valid date should be present****
			*************************************************
			if(i_err[0] == -1)
			{
					fn_userlog(c_ServiceName,"Please enter the valid date for GTD orders");
      		fn_errlog( c_ServiceName,"S31115",FMLMSG ,c_err_msg);
					strcpy(c_err_msg,"Please enter the valid date for GTD orders");
     		 	Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
     		 	Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     		 	tpfree((char *)ptr_fml_Ibuf);
     		 	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    	}

			EXEC SQL
			SELECT to_date(:c_ord_valid_dt,'dd-Mon-yyyy') - to_date(:c_exg_nxt_trd_dt,'dd-Mon-yyyy'),
						 to_date(:c_expry_dt,'dd-Mon-yyyy') - to_date(:c_ord_valid_dt,'dd-Mon-yyyy'),
						 to_date(:c_expry_dt,'dd-Mon-yyyy') - to_date(:c_exg_nxt_trd_dt,'dd-Mon-yyyy')
			INTO   :l_diff_nxt,
						 :l_diff_exp,
						 :l_diff_exp1
			FROM DUAL ;

			if(SQLCODE != 0)
			{
				fn_userlog(c_ServiceName,"Error in selecting from dual ");
     	 fn_errlog( c_ServiceName, "S31120", SQLMSG, c_err_msg  );
     	 strcpy(c_err_msg,"Problem in Placing order");
     	 Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
     	 Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     	 tpfree((char *)ptr_fml_Ibuf);
     	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    	}

			**************************************************
			**For GTD ordres Valid date should be greater to**
			**Next Date ,not more than seven days ahead and***
			**should not be greater than Expiry Date**********
			**************************************************
			if(l_diff_exp1 < 6)				***Added by sangeet on 20-Dec-2002***
			{		
					fn_userlog(c_ServiceName,"Cannot Trade for GTD  after last friday of contract expiry");
     		 	fn_errlog( c_ServiceName,"S31125"
     	             ,"Cannot Trade for GTD  after last friday of contract expiry",c_err_msg  );
					strcpy(c_err_msg,"Cannot Trade for GTD  after last friday of contract expiry");
     		 	Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
     		 	Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     		 	tpfree((char *)ptr_fml_Ibuf);
     		 	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    	}

			if((l_diff_nxt > 7 || l_diff_nxt <= 0) || (l_diff_exp <= 7 ))
			{		
					fn_userlog(c_ServiceName,"Please enter the valid date for GTD orders");
     		 	fn_errlog( c_ServiceName,"S31130"
     	             ,"Please enter the valid date for GTD orders",c_err_msg  );
					strcpy(c_err_msg,"Please enter the valid date for GTD orders");
     		 	Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
     		 	Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     		 	tpfree((char *)ptr_fml_Ibuf);
     		 	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    	}
		}
    *********************************** ver 1.1  ***/
			
	/*******************************************************/
	/*****Validation of the ASP part over*******************/
	/*******************************************************/


	/*******************************************************/
	/*****Replacement for channel code**********************/
	/*******************************************************/
	
  if(c_source_flag == '1')
	{
		strcpy(c_channel, "APP") ;
	}
	else if(c_source_flag == '2') 
	{
		strcpy(c_channel ,"VSA") ;
	}

	/*** Ver 1.7 ** Starts ***/
	
	else if(c_source_flag == 'Y')				/*** For New Trade Racer ***/
	{
		strcpy(c_channel ,"NET") ;
	}
	else if(c_source_flag == 'Z')				/*** For New Trade Racer by super user ***/
	{	
		strcpy(c_channel ,"CN2") ;	
	}
	/*** Ver 1.7 ** Ends ***/

  /*** Ver 2.3 Added for API user ***/

	else if(c_source_flag == 'A')		
	{	
		MEMSET(c_ven_id);

    i_err [0] = Fget32(ptr_fml_Ibuf,FFO_USER_CODE,0,(char *)c_ven_id.arr, 0 );	/*** Get vendor user id (IAD_USER_ID) from API using Public Key ***/

		if(i_err[0] == -1)
    {
			 if ( Ferror32 == FNOTPRES )
       {
          fn_userlog(c_ServiceName,"Normal call");
       } 

       fn_errlog( c_ServiceName, "S31135", FMLMSG, c_err_msg.arr);
			 strcpy(c_err_msg.arr,"Problem in Placing Vendor order");
			 Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
			 tpfree((char *)ptr_fml_Ibuf);
			 Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); /*** Ver 2.6 ***/
			 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    }

    SETLEN(c_ven_id);

    i_returncode = fn_chk_vendor ( c_ServiceName,
                    c_usr_id,
                    c_ven_id.arr,
                    c_ven_nm, 
                    &st_err_msg
                   );

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31140","Error in function fn_chk_vendor",c_err_msg.arr);
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
			Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); /*** Ver 2.6 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    }

		if( DEBUG_MSG_LVL_3 ) 
		{
	    fn_userlog(c_ServiceName,"Vendor Name :%s:",c_ven_nm);
		}

    if(strcmp(c_ven_nm,"SENSIBULL") == 0 )
    {

   /***************
      i_returncode = fn_chk_vendor_validity ( c_ServiceName,
                                              c_usr_id,
                                              &st_err_msg
                                            );
      if ( i_returncode != 1 )
      {
        fn_errlog( c_ServiceName, "S31145","Error in function fn_chk_vendor_validity",c_err_msg.arr);
        Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
      }
    ****************/

      i_returncode = fn_chk_sensibull_tnc ( c_ServiceName,
                                            c_usr_id,
                                            &st_err_msg
                                           );
      if ( i_returncode != 1 )
      {
        fn_errlog( c_ServiceName, "S31150","Error in function fn_chk_sensibull_tnc",c_err_msg.arr);
        Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
				Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); /*** Ver 2.6 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
      }

		  strcpy(c_channel ,"") ; /*** update channel once reveived ***/

			if( DEBUG_MSG_LVL_0 ) 
			{
			  fn_userlog(c_ServiceName,"Vendor Id = ESP_ID is :%s:,Channel :%s: c_ven_nm:%s:",c_ven_id.arr,c_channel,c_ven_nm);
			}
			if( c_usr_id[0] == BPID )
			{
				fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst,Sensibull is desabled");
				fn_errlog( c_ServiceName, "B35018", "", c_err_msg.arr );
				strcpy(c_err_msg.arr,"Since you are Attached to a Direct Business Catalyst,Sensibull is desabled");
			  Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
				tpfree((char *)ptr_fml_Ibuf);
				Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); /*** Ver 2.6 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    	}
			
			EXEC SQL
				SELECT  ICD_CUST_TYPE
				INTO    :sql_icd_cust_type
				FROM    ICD_INFO_CLIENT_DTLS,
				IAI_INFO_ACCOUNT_INFO
				WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
				AND     IAI_MATCH_ACCOUNT_NO  = :c_clm_mtch_accnt;
			if ( SQLCODE != 0 )
			{
				fn_errlog( c_ServiceName, "S31155",SQLMSG,c_err_msg.arr);
			  Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
				tpfree((char *)ptr_fml_Ibuf);
				Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); /*** Ver 2.6 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
			}
			if(strcmp(sql_icd_cust_type.arr,"NRI") == 0)
			{
				fn_userlog( c_ServiceName, "NRI Customer Trying To Place Order from SENSIBULL");
				fn_errlog( c_ServiceName, "S31160", "NRI Customer Trying To Place Order from SENSIBULL",c_err_msg.arr);
				strcpy(c_err_msg.arr," NRI Customer Trying To Place Order from SENSIBULL.");
			  Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
				tpfree((char *)ptr_fml_Ibuf);
				Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); /*** Ver 2.6 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
			}

			if(Fadd32(ptr_fml_Ibuf,FFO_INSTRMNT_TYP,(char*)c_ven_nm,0) == -1)
			{
				fn_userlog(c_ServiceName,"Error in Fadd32 ");
				fn_errlog( c_ServiceName, "S31165", FMLMSG, c_err_msg.arr  );
				strcpy(c_err_msg.arr,"Problem in Placing order");
				Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
				tpfree((char *)ptr_fml_Ibuf);
				Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); /*** Ver 2.6 ***/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
			}
    }
    else
    {
       /*************** commented in ver 2.5 *****************************
       fn_userlog( c_ServiceName, "Invalid Vendor" );
       fn_errlog( c_ServiceName, "S31170","InValid Vendor.",c_err_msg.arr );
       strcpy( c_err_msg.arr,"InValid Vendor.");
       Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
			 tpfree((char *)ptr_fml_Ibuf);
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
       *******************************************************************/
       fn_userlog(c_ServiceName,"Call from Vendor with ESP_ID :%s: Vendor Name:%s:",c_ven_id.arr,c_ven_nm);  /** ver 2.5 **/
    }
    /****** Ver 2.3 Ends ******/ 
 
     /**** Ver 2.7 Starts Here *****/

    MEMSET(c_algo_ord_rmrks);
    MEMSET(c_algo_id);
 
    i_err [0] = Fget32(ptr_fml_Ibuf,FFO_ACTION2,0,(char *)c_algo_id.arr, 0 );  
    if(i_err[0] == -1)
    {
       if ( Ferror32 != FNOTPRES )
       {
          fn_userlog(c_ServiceName,"Normal call");
       fn_errlog( c_ServiceName, "S31175", FMLMSG, c_err_msg.arr);
       strcpy(c_err_msg.arr,"Problem in Placing Vendor order");
       Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
       tpfree((char *)ptr_fml_Ibuf);
       Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); /*** Ver 2.6 ***/
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
      }
    }   

    i_err [0] = Fget32(ptr_fml_Ibuf,FFO_PRDCT_DESC,0,(char *)c_algo_ord_rmrks.arr, 0 );
    if(i_err[0] == -1)
    {
       if ( Ferror32 != FNOTPRES )
       {
          fn_userlog(c_ServiceName,"Normal call");
       fn_errlog( c_ServiceName, "S31180", FMLMSG, c_err_msg.arr);
       strcpy(c_err_msg.arr,"Problem in Placing Vendor order");
       Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
       tpfree((char *)ptr_fml_Ibuf);
       Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); /*** Ver 2.6 ***/
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
       }
    } 


    SETLEN(c_algo_id);
    SETLEN(c_algo_ord_rmrks);
    if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog(c_ServiceName,"c_algo_id :%s: c_algo_ord_rmrks:%s:",c_algo_id.arr,c_algo_ord_rmrks.arr);
    }
    /***** Ver 2.7 Ends Here ******/    	
	}
 
	else
	{
		fn_userlog(c_ServiceName,"Error in channel ");
    fn_errlog( c_ServiceName, "S31185", FMLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
    strcpy(c_err_msg.arr,"Problem in Placing order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
    Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
    Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented ...Uncommented in Ver 2.6   ***/
		tpfree((char *)ptr_fml_Ibuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
	}
	if(Fadd32(ptr_fml_Ibuf,FFO_CHANNEL,(char *)c_channel,0) == -1)
  {
      fn_userlog(c_ServiceName,"Error in Fadd32 ");
      fn_errlog( c_ServiceName, "S31190", FMLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
      strcpy(c_err_msg.arr,"Problem in Placing order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
      Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented  ...Uncommented in Ver 2.6 ***/
      tpfree((char *)ptr_fml_Ibuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
  }
	
	/*******************************************************/
	/*****Replacement of channel code over******************/
	/*******************************************************/

	
	/*** Commented in ver 1.1
	*****Replacement of exchange code *********************
	if(strcmp(c_xchng_cd,"NSE") == 0)
	{
			strcpy(c_xchng_cd,"NFO") ;
			Fchg32(ptr_fml_Ibuf,FFO_XCHNG_CD,0,(char *)c_xchng_cd,0);
	}
	*****Replacement of exchange code over*****************
	                                                   ***/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"FFO_USR_ID is :%s:",c_usr_id);
		/*** fn_userlog(c_ServiceName,"FFO_SSSN_ID is :%ld:",l_sssn_id); *** commented in VQC ***/
		fn_userlog(c_ServiceName,"FFO_SOURCE_FLG is :%c:",c_source_flag);
		fn_userlog(c_ServiceName,"FFO_SPL_FLG is :%c:",c_spl_flg);
		fn_userlog(c_ServiceName,"FFO_PRDCT_TYP is :%c:",c_prdct_typ);
		fn_userlog(c_ServiceName,"FFO_XCHNG_CD is :%s:",c_xchng_cd);
	 /*** fn_userlog(c_ServiceName,"FFO_ORD_TYP is :%c:",c_ord_typ); *** commented in VQC ***/
	 /***	fn_userlog(c_ServiceName,"FFO_SOURCE_FLG is :%c:",c_source_flag); *** commented in VQC as log is printed twice ***/
		fn_userlog(c_ServiceName,"FFO_EBA_MTCH_ACT_NO is :%s:",c_clm_mtch_accnt);
   
	}	

	/*******************************************************/
	/*****Program logic to call necessary service **********/
	/*******************************************************/

	switch(c_spl_flg)
	{
		case	NORMAL_ORDER:   				/*N*/
		case	CLIENT_SQROFF: 					/*C*/
		case	SYSTEM_SQUAREOFF:   		/*S*/
				
					if(DEBUG_MSG_LVL_3)
					{	
						fn_userlog(c_ServiceName,"Inside NORMAL_ORDER");
					}
				
					if(c_prdct_typ != 'U' && c_prdct_typ != 'I')    /*** Condition added in Ver 1.8 ***//*** Ver 1.9 ** 'I' Added ***/
					{
						/*** Ver 1.6 Starts **/
						if( (( ( c_spn_flg == 'Y' ) && strcmp(c_xchng_cd,"NFO") == 0 )
            	      ||
              	( c_bse_spn_flg == 'Y' && strcmp(c_xchng_cd,"BFO") == 0 ))
										&&
								(c_prdct_typ != 'P') )	/*** Ver 2.0 enabling SPAN FP on DL.net ***/ 
          	{
							strcpy(c_service_nm,"SFO_SPN_PLC_ORD");
						}
						else
						{
						/*** Ver 1.6 Ends **/
							if(c_prdct_typ == 'F' || c_prdct_typ == 'P')
          		strcpy(c_service_nm,"SFO_FUT_PLC_ORD");
          		else if(c_prdct_typ == 'O')
          		strcpy(c_service_nm,"SFO_OPT_PLC_ORD");
						}/** Ver 1.6 **/
					}    /*** Ver 1.8 ***/

					/*** Ver 1.8 ** Starts ***/

					else if(c_prdct_typ == 'U' || c_prdct_typ == 'I')   /*** Ver 1.9 ** 'I' Added ***/ 
         	{
           	if(c_spl_flg == NORMAL_ORDER)
           	{
							if(c_prdct_typ == 'U')     								/*** if Condition Added in Ver 1.9 ***/
							{
             		strcpy(c_service_nm,"SFO_PLC_SLTPFP");
							}
							else if(c_prdct_typ == 'I')    						/*** Added in Ver 1.9 ***/
							{
								strcpy(c_service_nm,"SFO_PLC_OPTPLUS");
							}
						
              if(Fadd32(ptr_fml_Ibuf,FFO_OPERATION_TYP,(char*)&c_spl_flg,0) == -1)
              {
                fn_userlog(c_ServiceName,"Error in Fadd32 ");
                fn_errlog( c_ServiceName, "S31195", FMLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
                strcpy(c_err_msg.arr,"Problem in Placing order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
                Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
                tpfree((char *)ptr_fml_Ibuf);
								Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); /*** Ver 2.6 ***/
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
              }
              if(Fadd32(ptr_fml_Ibuf,FFO_CHANNEL,(char *)c_channel,0) == -1)
              {
                fn_userlog(c_ServiceName,"Error in Fadd32 ");
                fn_errlog( c_ServiceName, "S31200", FMLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
                strcpy(c_err_msg.arr,"Problem in Placing order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
                Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
                tpfree((char *)ptr_fml_Ibuf);
								Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); /*** Ver 2.6 ***/
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
              }
            }
            else
            {
							if( ( ( c_spn_flg == 'Y' ) && strcmp(c_xchng_cd,"NFO") == 0 )
                	  ||
             			( c_bse_spn_flg == 'Y' && strcmp(c_xchng_cd,"BFO") == 0 ) )
          		{
            		strcpy(c_service_nm,"SFO_SPN_PLC_ORD");
          		}
							else if(c_prdct_typ == 'U')     /*** Condition Added in 1.9 ***/
							{
              	strcpy(c_service_nm,"SFO_FUT_PLC_ORD");
            	}
							else if(c_prdct_typ == 'I')    /*** Condition Added in 1.9 ***/
							{
								strcpy(c_service_nm,"SFO_OPT_PLC_ORD");
							}
						}
          }

          /*** Ver 1.8 ** Ends ***/

					if(Fadd32(ptr_fml_Ibuf,FFO_SVC_NAME,(char*)c_service_nm,0) == -1)
  				{
      				fn_userlog(c_ServiceName,"Error in Fadd32 ");
      				fn_errlog( c_ServiceName, "S31205", FMLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
      				strcpy(c_err_msg.arr,"Problem in Placing order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
							Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
  						Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented ...Uncommented in Ver 2.6 ***/
							tpfree((char *)ptr_fml_Ibuf);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
					}
      		break;

		case	JOINT_SQUAREOFF:   		/*J*/

					if(DEBUG_MSG_LVL_3)
					{	
						fn_userlog(c_ServiceName,"Inside JOINT_SQUAREOFF");
					}

					strcpy(c_service_nm,"SFO_JNT_SQ_OFF");
					if(Fadd32(ptr_fml_Ibuf,FFO_SVC_NAME,(char*)c_service_nm,0) == -1)
  				{
      				fn_userlog(c_ServiceName,"Error in Fadd32 ");
      				fn_errlog( c_ServiceName, "S31210", FMLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
      				strcpy(c_err_msg.arr,"Problem in Placing order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
							Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
    					Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented ...Uncommented in Ver 2.6 ***/
							tpfree((char *)ptr_fml_Ibuf);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
					}
					if(Fadd32(ptr_fml_Ibuf,FFO_OPERATION_TYP,(char*)&c_spl_flg,0) == -1)
  				{
      				fn_userlog(c_ServiceName,"Error in Fadd32 ");
      				fn_errlog( c_ServiceName, "S31215", FMLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
      				strcpy(c_err_msg.arr,"Problem in Placing order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
							Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
   						Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented  ...Uncommented in Ver 2.6 ***/
							tpfree((char *)ptr_fml_Ibuf);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
					}
					if(Fadd32(ptr_fml_Ibuf,FFO_CHANNEL,(char *)c_channel,0) == -1)
					{
							fn_userlog(c_ServiceName,"Error in Fadd32 ");
							fn_errlog( c_ServiceName, "S31220", FMLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
							strcpy(c_err_msg.arr,"Problem in Placing order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
							Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
  						Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented ...Uncommented in Ver 2.6 ***/
							tpfree((char *)ptr_fml_Ibuf);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
					}
				
		     /********* Commented in ver 1.1 *******************		
					i_err[0] = Fget32(ptr_fml_Ibuf,FFO_PRDCT_TYP,1,(char *)&c_prdct_typ,0) ;
					i_err[1] = Fget32(ptr_fml_Ibuf,FFO_LMT_MKT_SL_FLG,1,(char *)&c_lmt_mkt_sl_flg,0) ;
					i_err[3] = Fget32(ptr_fml_Ibuf,FFO_ORDR_FLW,1,(char *)&c_ordr_flw,0) ;
 
					for( i_Fget = 0 ; i_Fget <= 3 ; i_Fget++ )
					{
    				if(i_err[i_Fget] == -1)
						{
							fn_userlog(c_ServiceName,"Error in Fget of :%d:",i_Fget);
    					fn_errlog( c_ServiceName, "S31225", FMLMSG, c_err_msg  );
							strcpy(c_err_msg,"Problem in Placing order");
							Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
    					Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
							tpfree((char *)ptr_fml_Ibuf);
    					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
						}
					}
					*******************************************************
					*****Validating the ASP part***************************
					*******************************************************

					i_err[0] =Fget32(ptr_fml_Ibuf,FFO_LMT_RT,1,(char *)&l_lmt_rt,0) ;
					if(i_err[0] != -1 )
					{ 
							*************************************************
							****Cannot Enter Lmt Price For Mkt Ordres********
							*************************************************

							if(c_lmt_mkt_sl_flg == 'M' && l_lmt_rt != 0)
							{
								fn_userlog(c_ServiceName,"Cannot Enter Limit price for Marke orders");
      					fn_errlog( c_ServiceName,"S31230"
														,"Cannot Enter Limit price for Marke orders",c_err_msg  );
      					Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      					Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      					tpfree((char *)ptr_fml_Ibuf);
      					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
							}
							*************************************************
							****Lmt Price Cannot Be Less Than Equal To 0*****
							*************************************************

							if(c_lmt_mkt_sl_flg == 'L' && l_lmt_rt <= 0 )
							{
								fn_userlog(c_ServiceName,"Limit Price Cannot be Less or Equal to Zero");
      					fn_errlog( c_ServiceName,"S31235"
														,"Limit Price Cannot be Less or Equal to Zero",c_err_msg  );
      					Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      					Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      					tpfree((char *)ptr_fml_Ibuf);
      					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
							}
					}
					else
					{
							if(DEBUG_MSG_LVL_3)
							{
								fn_userlog(c_ServiceName,"The limit price is :%ld:",l_lmt_rt) ;
							}
							*************************************************
							**Lmt Prc Has to be there for 'L' orders**
							*************************************************

							if(c_lmt_mkt_sl_flg == 'L' )
							{
								fn_userlog(c_ServiceName,"Please Enter Limit Price");
      					fn_errlog( c_ServiceName,"S31240",FMLMSG ,c_err_msg);
								strcpy(c_err_msg,"Please Enter Limit Price");
      					Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      					Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      					tpfree((char *)ptr_fml_Ibuf);
      					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
							}
					}

          ******* ver 1.1 Comment ends *********************/

					/***************************************************/
					/**We cannot place JSQ order when Market is closed**/
					/***************************************************/

					if(c_exg_crrnt_stts != 'O')
					{
						fn_userlog(c_ServiceName,"cannot place Joint Sqoff order when Market is closed");
     				fn_errlog( c_ServiceName,"S31245"
       	   			     ,"cannot place Joint Sqoff order when Market is closed",c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
            strcpy(c_err_msg.arr,"Cannot place Joint Sqoff order when market is closed"); /*** Added in VQC ***/
     				Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
	  				Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented  ...Uncommented in Ver 2.6 ***/
      			tpfree((char *)ptr_fml_Ibuf);
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
					}			

					/******End of Asp Validation*************/
    			break;

		case	ARBITRAGE:   					/*A*/
					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"Inside ARBITRAGE");
					}

					strcpy(c_service_nm,"SFO_ABT_PLC_ORD");
					if(Fadd32(ptr_fml_Ibuf,FFO_SVC_NAME,(char*)c_service_nm,0) == -1)
  				{
      				fn_userlog(c_ServiceName,"Error in Fadd32 ");
      				fn_errlog( c_ServiceName, "S31250", FMLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
      				strcpy(c_err_msg.arr,"Problem in Placing order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
							Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
							Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented  ...Uncommented in Ver 2.6 ***/
							tpfree((char *)ptr_fml_Ibuf);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
					}
      		break;

		case	L2_ORDER:   					/*2*/
					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"Inside L2_ORDER");
					}

					strcpy(c_service_nm,"SFO_PLC_2L3LORD");
					if(Fadd32(ptr_fml_Ibuf,FFO_SVC_NAME,(char*)c_service_nm,0) == -1)
  				{
      				fn_userlog(c_ServiceName,"Error in Fadd32 ");
      				fn_errlog( c_ServiceName, "S31255", FMLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
      				strcpy(c_err_msg.arr,"Problem in Placing order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
							Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
  						Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );	/** Ver 1.1 : Commented  ...Uncommented in Ver 2.6 ***/
							tpfree((char *)ptr_fml_Ibuf);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
					}
					if(Fadd32(ptr_fml_Ibuf,FFO_OPERATION_TYP,(char*)&c_spl_flg,0) == -1)
  				{
      				fn_userlog(c_ServiceName,"Error in Fadd32 ");
      				fn_errlog( c_ServiceName, "S31260", FMLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
      				strcpy(c_err_msg.arr,"Problem in Placing order");/*Datatype of c_err_msg changed from char to varchar in VQC*/
							Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );/*Datatype of c_err_msg changed from char to varchar in VQC*/
							Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented  ...Uncommented in Ver 2.6 ***/
							tpfree((char *)ptr_fml_Ibuf);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
					}
					if(Fadd32(ptr_fml_Ibuf,FFO_CHANNEL,(char *)c_channel,0) == -1)
					{
							fn_userlog(c_ServiceName,"Error in Fadd32 ");
							fn_errlog( c_ServiceName, "S31265", FMLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
							strcpy(c_err_msg.arr,"Problem in Placing order");/*Datatype of c_err_msg changed from char to varchar in VQC*/
							Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );/*Datatype of c_err_msg changed from char to varchar in VQC*/
							Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented ...Uncommented in Ver 2.6 ***/
							tpfree((char *)ptr_fml_Ibuf);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
					}
				
          /************ Commented in ver 1.1 ****************

					i_err[0] = Fget32(ptr_fml_Ibuf,FFO_PRDCT_TYP,1,(char *)&c_prdct_typ,0) ;
					i_err[1] = Fget32(ptr_fml_Ibuf,FFO_LMT_MKT_SL_FLG,1,(char *)&c_lmt_mkt_sl_flg,0) ;
					i_err[3] = Fget32(ptr_fml_Ibuf,FFO_ORDR_FLW,1,(char *)&c_ordr_flw,0) ;
 
					for( i_Fget = 0 ; i_Fget <= 3 ; i_Fget++ )
					{
    				if(i_err[i_Fget] == -1)
						{
							fn_userlog(c_ServiceName,"Error in Fget of :%d:",i_Fget);
    					fn_errlog( c_ServiceName, "S31270", FMLMSG, c_err_msg  );
							strcpy(c_err_msg,"Problem in Placing order");
							if(Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 ) == -1)
  						{
      						fn_userlog(c_ServiceName,"Error in Fadd32 ");
      						fn_errlog( c_ServiceName, "S31275", FMLMSG, c_err_msg  );
      						strcpy(c_err_msg,"Problem in Placing order");
									Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
									Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
									tpfree((char *)ptr_fml_Ibuf);
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
							}
    					if(Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ) == -1)
  						{
      						fn_userlog(c_ServiceName,"Error in Fadd32 ");
      						fn_errlog( c_ServiceName, "S31280", FMLMSG, c_err_msg  );
      						strcpy(c_err_msg,"Problem in Placing order");
									Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
									Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		
									tpfree((char *)ptr_fml_Ibuf);
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
					}
							tpfree((char *)ptr_fml_Ibuf);
    					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
						}
					}

					*******************************************************
					*****Validating the ASP part***************************
					*******************************************************

					i_err[0] =Fget32(ptr_fml_Ibuf,FFO_LMT_RT,1,(char *)&l_lmt_rt,0) ;
					if(i_err[0] != -1 )
					{ 
							*************************************************
							****Cannot Enter Lmt Price For Mkt Ordres********
							*************************************************

							if(c_lmt_mkt_sl_flg == 'M' && l_lmt_rt != 0)
							{
								fn_userlog(c_ServiceName,"Cannot Enter Limit price for Marke orders");
      					fn_errlog( c_ServiceName,"S31285"
														,"Cannot Enter Limit price for Marke orders",c_err_msg  );
      					Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
	    					Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );	
      					tpfree((char *)ptr_fml_Ibuf);
      					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
							}

							*************************************************
							****Lmt Price Cannot Be Less Than Equal To 0*****
							*************************************************

							if(c_lmt_mkt_sl_flg == 'L' && l_lmt_rt <= 0 )
							{
								fn_userlog(c_ServiceName,"Limit Price Cannot be Less or Equal to Zero");
      					fn_errlog( c_ServiceName,"S31290"
														,"Limit Price Cannot be Less or Equal to Zero",c_err_msg  );
      					Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
	    					Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      					tpfree((char *)ptr_fml_Ibuf);
      					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
							}
					}
					else
					{
							#ifdef DEBUG
								fn_userlog(c_ServiceName,"The limit price is :%ld:",l_lmt_rt) ;
							#endif

							*************************************************
							******Lmt Prc Has to be there for 'L' orders*****
							*************************************************

							if(c_lmt_mkt_sl_flg == 'L' )
							{
								fn_userlog(c_ServiceName,"Please Enter Limit Price");
      					fn_errlog( c_ServiceName,"S31295",FMLMSG ,c_err_msg);
								strcpy(c_err_msg,"Please Enter Limit Price");
      					if(Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 ) == -1)
  							{
      						fn_userlog(c_ServiceName,"Error in Fadd32 ");
      						fn_errlog( c_ServiceName, "S31300", FMLMSG, c_err_msg  );
      						strcpy(c_err_msg,"Problem in Placing order");
									Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
									Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
									tpfree((char *)ptr_fml_Ibuf);
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
								}
      					if(Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ) == -1)
								{
      						fn_userlog(c_ServiceName,"Error in Fadd32 ");
      						fn_errlog( c_ServiceName, "S31305", FMLMSG, c_err_msg  );
      						strcpy(c_err_msg,"Problem in Placing order");
									Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
									Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
									tpfree((char *)ptr_fml_Ibuf);
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
								}
      					tpfree((char *)ptr_fml_Ibuf);
      					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
							}
					}

          **************  ver 1.1 comment ends  *************/

					/***************************************************/
					/**We cannot place L2 order when Market is closed**/
					/***************************************************/

					if(c_exg_crrnt_stts != 'O')
					{
						fn_userlog(c_ServiceName,"cannot place L2 order when Market is closed");
     				fn_errlog( c_ServiceName,"S31310"
       	   			     ,"cannot place L2 order when Market is closed",c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
     				Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
	  				Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );	/** Ver 1.1 : Commented ...Uncommented in Ver 2.6 ***/
      			tpfree((char *)ptr_fml_Ibuf);
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
					}			

					/******End of Asp Validation*************/
      		break;
		

		case	L3_ORDER:  					/*3*/
					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"Inside L3_ORDER");
					}

					strcpy(c_service_nm,"SFO_PLC_2L3LORD");
					if(Fadd32(ptr_fml_Ibuf,FFO_SVC_NAME,(char*)c_service_nm,0) == -1)
  				{
      				fn_userlog(c_ServiceName,"Error in Fadd32 ");
      				fn_errlog( c_ServiceName, "S31315", FMLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
      				strcpy(c_err_msg.arr,"Problem in Placing order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
							Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
							Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented...Uncommented in Ver 2.6 ***/
							tpfree((char *)ptr_fml_Ibuf);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
					}
					if(Fadd32(ptr_fml_Ibuf,FFO_OPERATION_TYP,(char*)&c_spl_flg,0) == -1)
  				{
      				fn_userlog(c_ServiceName,"Error in Fadd32 ");
      				fn_errlog( c_ServiceName, "S31320", FMLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
      				strcpy(c_err_msg.arr,"Problem in Placing order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
							Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
  						Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented ...Uncommented in Ver 2.6 ***/
							tpfree((char *)ptr_fml_Ibuf);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
					}
					if(Fadd32(ptr_fml_Ibuf,FFO_CHANNEL,(char *)c_channel,0) == -1)
					{
							fn_userlog(c_ServiceName,"Error in Fadd32 ");
							fn_errlog( c_ServiceName, "S31325", FMLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
							strcpy(c_err_msg.arr,"Problem in Placing order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
							Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
							Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented ...Uncommented in Ver 2.6  ***/
							tpfree((char *)ptr_fml_Ibuf);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
					}

          /************* Commented in ver 1.1 *****************

					*****************************************************
					*****Validation For 2nd Leg Start *******************	
					*****************************************************

					i_err[0] = Fget32(ptr_fml_Ibuf,FFO_PRDCT_TYP,1,(char *)&c_prdct_typ,0) ;
					i_err[1] = Fget32(ptr_fml_Ibuf,FFO_LMT_MKT_SL_FLG,1,(char *)&c_lmt_mkt_sl_flg,0) ;
					i_err[3] = Fget32(ptr_fml_Ibuf,FFO_ORDR_FLW,1,(char *)&c_ordr_flw,0) ;
 
					for( i_Fget = 0 ; i_Fget <= 3 ; i_Fget++ )
					{
    				if(i_err[i_Fget] == -1)
						{
							fn_userlog(c_ServiceName,"Error in Fget of :%d:",i_Fget);
    					fn_errlog( c_ServiceName, "S31330", FMLMSG, c_err_msg  );
							strcpy(c_err_msg,"Problem in Placing order");
							Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
    					Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
							tpfree((char *)ptr_fml_Ibuf);
    					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
						}
					}

					*******************************************************
					*****Validating the ASP part***************************
					*******************************************************

					i_err[0] =Fget32(ptr_fml_Ibuf,FFO_LMT_RT,1,(char *)&l_lmt_rt,0) ;
					if(i_err[0] != -1 )
					{ 
							*************************************************
							****Cannot Enter Lmt Price For Mkt Ordres********
							*************************************************

							if(c_lmt_mkt_sl_flg == 'M' && l_lmt_rt != 0)
							{
								fn_userlog(c_ServiceName,"Cannot Enter Limit price for Marke orders");
      					fn_errlog( c_ServiceName,"S31335"
														,"Cannot Enter Limit price for Marke orders",c_err_msg  );
      					Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      					Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      					tpfree((char *)ptr_fml_Ibuf);
      					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
							}

							*************************************************
							****Lmt Price Cannot Be Less Than Equal To 0*****
							*************************************************

							if(c_lmt_mkt_sl_flg == 'L' && l_lmt_rt <= 0 )
							{
								fn_userlog(c_ServiceName,"Limit Price Cannot be Less or Equal to Zero");
      					fn_errlog( c_ServiceName,"S31340"
														,"Limit Price Cannot be Less or Equal to Zero",c_err_msg  );
      					Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      					Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      					tpfree((char *)ptr_fml_Ibuf);
      					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
							}
					}
					else
					{
							#ifdef DEBUG
								fn_userlog(c_ServiceName,"The limit price is :%ld:",l_lmt_rt) ;
							#endif

							*************************************************
							*****Lmt Prc Has to be there for 'L' orders******
							*************************************************

							if(c_lmt_mkt_sl_flg == 'L' )
							{
								fn_userlog(c_ServiceName,"Please Enter Limit Price");
      					fn_errlog( c_ServiceName,"S31345",FMLMSG ,c_err_msg);
								strcpy(c_err_msg,"Please Enter Limit Price");
      					Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      					Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      					tpfree((char *)ptr_fml_Ibuf);
      					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
							}
					}
        
          ************* ver 1.1 comment ends *****************/

					/***************************************************/
					/**We cannot place L2 order when Market is closed**/
					/***************************************************/

					if(c_exg_crrnt_stts != 'O')
					{
						fn_userlog(c_ServiceName,"cannot place L2 order when Market is closed");
     				fn_errlog( c_ServiceName,"S31350"
       	   			     ,"cannot place L2 order when Market is closed",c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
     				Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
	  				Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented ...Uncommented in Ver 2.6 ***/
      			tpfree((char *)ptr_fml_Ibuf);
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
					}			

					/*****************************************************/
					/*****Validation For 3nd Leg Start *******************/	
					/*****************************************************/
					if(Fadd32(ptr_fml_Ibuf,FFO_CHANNEL,(char *)c_channel,0) == -1)
					{
							fn_userlog(c_ServiceName,"Error in Fadd32 ");
							fn_errlog( c_ServiceName, "S31355", FMLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
							strcpy(c_err_msg.arr,"Problem in Placing order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
							Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
							Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented ...Uncommented in Ver 2.6 ***/
							tpfree((char *)ptr_fml_Ibuf);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
					}

          /****************** Commented in ver 1.1 ****************

					i_err[0] = Fget32(ptr_fml_Ibuf,FFO_PRDCT_TYP,2,(char *)&c_prdct_typ,0) ;
					i_err[1] = Fget32(ptr_fml_Ibuf,FFO_LMT_MKT_SL_FLG,2,(char *)&c_lmt_mkt_sl_flg,0) ;
					i_err[3] = Fget32(ptr_fml_Ibuf,FFO_ORDR_FLW,2,(char *)&c_ordr_flw,0) ;
 
					for( i_Fget = 0 ; i_Fget <= 3 ; i_Fget++ )
					{
    				if(i_err[i_Fget] == -1)
						{
							fn_userlog(c_ServiceName,"Error in Fget of :%d:",i_Fget);
    					fn_errlog( c_ServiceName, "S31360", FMLMSG, c_err_msg  );
							strcpy(c_err_msg,"Problem in Placing order");
							Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
    					Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
							tpfree((char *)ptr_fml_Ibuf);
    					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
						}
					}
					*******************************************************
					*****Validating the ASP part***************************
					*******************************************************

					i_err[0] =Fget32(ptr_fml_Ibuf,FFO_LMT_RT,2,(char *)&l_lmt_rt,0) ;
					if(i_err[0] != -1 )
					{ 
							*************************************************
							****Cannot Enter Lmt Price For Mkt Ordres********
							*************************************************

							if(c_lmt_mkt_sl_flg == 'M' && l_lmt_rt != 0)
							{
								fn_userlog(c_ServiceName,"Cannot Enter Limit price for Marke orders");
      					fn_errlog( c_ServiceName,"S31365"
														,"Cannot Enter Limit price for Marke orders",c_err_msg  );
      					Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      					Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      					tpfree((char *)ptr_fml_Ibuf);
      					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
							}

							*************************************************
							****Lmt Price Cannot Be Less Than Equal To 0*****
							*************************************************

							if(c_lmt_mkt_sl_flg == 'L' && l_lmt_rt <= 0 )
							{
								fn_userlog(c_ServiceName,"Limit Price Cannot be Less or Equal to Zero");
      					fn_errlog( c_ServiceName,"S31370"
														,"Limit Price Cannot be Less or Equal to Zero",c_err_msg  );
      					Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      					Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      					tpfree((char *)ptr_fml_Ibuf);
      					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
							}
					}
					else
					{
						#ifdef DEBUG
							fn_userlog(c_ServiceName,"The limit price is :%ld:",l_lmt_rt) ;
						#endif

							*************************************************
							**Lmt Prc Has to be there for 'L' orders**
							*************************************************

							if(c_lmt_mkt_sl_flg == 'L' )
							{
								fn_userlog(c_ServiceName,"Please Enter Limit Price");
      					fn_errlog( c_ServiceName,"S31375",FMLMSG ,c_err_msg);
								strcpy(c_err_msg,"Please Enter Limit Price");
      					Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      					Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      					tpfree((char *)ptr_fml_Ibuf);
      					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
							}
					}

					******End of Asp Validation****************
          *********** ver 1.1 comment ends *********/
      		break;
 
		default:
					fn_userlog(c_ServiceName,"Inside DEFAULT");
    			fn_errlog( c_ServiceName, "S31380", FMLMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
    			strcpy(c_err_msg.arr,"Invalid type of order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
    			Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
	  			Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented ...Uncommented in Ver 2.6 ***/
					tpfree((char *)ptr_fml_Ibuf);
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
					
	}/*end of switch*/
	
  if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Before calling order rout ");
		/*** Commented in VQC ***
    fn_userlog(c_ServiceName,"XCH :%s: PRDCT :%c: EXPRY DT :%s:", c_xchng_cd, c_prdct_typ, c_expry_dt, sql_fcm_undrlyng, sql_fcm_strk_prc, sql_fcm_opt_typ );*	Ver 1.3 : Added	***/
    fn_userlog(c_ServiceName,"XCH :%s: PRDCT :%c:", c_xchng_cd, c_prdct_typ); /* VQC */ 
  } 

	/*******************************************************/
	/********Calling the routing service *******************/
	/*******************************************************/

	/******	Ver 1.3 : Addition Begins	******/
  /*** Commented in Ver 2.2 ****
	
  EXEC SQL
	SELECT FCM_INDSTK
	INTO   :sql_fcm_indstk
	FROM   FCM_FO_CNTRCT_MSTR 
	WHERE  FCM_XCHNG_CD		= :c_xchng_cd
	*** AND    FCM_PRDCT_TYP 	= decode(:c_prdct_typ,'P','F',:c_prdct_typ)  * ver 1.4 * Commented in Ver 1.8 ***
	AND    FCM_PRDCT_TYP   = decode(:c_prdct_typ,'P','F','U','F','I','O',:c_prdct_typ)    *** Ver 1.8 *** *** Ver 1.9 ** 'I' Added ***
	AND    FCM_EXPRY_DT		= :c_expry_dt
	AND    FCM_UNDRLYNG		=	:sql_fcm_undrlyng
	AND    FCM_STRK_PRC 	=	:sql_fcm_strk_prc
	AND		 FCM_OPT_TYP 		= :sql_fcm_opt_typ;

  ******/
  
  /*** VQC - Following DataBase Hit is commented as we are selecting Index/Stock in the Placement service

  *** Ver 2.2 Starts ***
  
  EXEC SQL
  SELECT FTQ_INDSTK
  INTO   :sql_fcm_indstk
  FROM   FTQ_FO_TRD_QT
  WHERE  FTQ_XCHNG_CD   = :c_xchng_cd
  AND    FTQ_PRDCT_TYP   = decode(:c_prdct_typ,'P','F','U','F','I','O',:c_prdct_typ)    
  AND    FTQ_EXPRY_DT   = :c_expry_dt
  AND    FTQ_UNDRLYNG   = :sql_fcm_undrlyng
  AND    FTQ_STRK_PRC   = :sql_fcm_strk_prc
  AND    FTQ_OPT_TYP    = :sql_fcm_opt_typ; 
  
  *** Ver 2.2 Ends   ***  
  
	if (SQLCODE != 0)
	{
 		fn_errlog( c_ServiceName, "S31385", SQLMSG, c_err_msg  ); 
    Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 ); 
    tpfree((char *)ptr_fml_Ibuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
	}

	if(DEBUG_MSG_LVL_3) {
		fn_userlog(c_ServiceName,"FCM_INDSTK is :%c:", sql_fcm_indstk);
	}

	if ( Fchg32(ptr_fml_Ibuf,FFO_CTGRY_INDSTK,0,(char *)&sql_fcm_indstk,0) == -1 )
	{
    fn_errlog( c_ServiceName, "S31390", FMLMSG, c_err_msg  ); 
    Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 ); 
    tpfree((char *)ptr_fml_Ibuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
	}

  *** Comment in VQC Ends ***/

	/****** Ver 1.3 : Addition Ends	*******/

	/*** Ver 2.8 starts ***/
	if (c_api_spl != '\0')
	{
  	if ( Fchg32(ptr_fml_Ibuf,FFO_STATUS_FLG,0,(char *)&c_api_spl,0) == -1 )
  	{
    	fn_errlog( c_ServiceName, "S31395", FMLMSG, c_err_msg.arr  );
    	Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	tpfree((char *)ptr_fml_Ibuf);
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
  	}
	}
	/*** Ver 2.8 ends ***/
	if(tpcall("SFO_ORD_ROUT",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0) == -1)
  {
			fn_userlog(c_ServiceName,"Inside call error");
   		fn_errlog( c_ServiceName, "S31400", TPMSG, c_err_msg.arr  ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
    	/*strcpy(c_err_msg,"Problem in Placing order");
    	Fchg32( ptr_fml_Obuf, FFO_ERR_MSG, 0,c_err_msg, 0 );*/
      /** ver 2.9 starts **/
      MEMSET(err_code);
      if(Fget32(ptr_fml_Obuf,FFO_ERR_CD,0,(char *)err_code,0) == -1)
      {
        fn_errlog( c_ServiceName, "S31405", FMLMSG, c_err_msg.arr  );
      }
      if( strcmp(err_code,"B56036")== 0 )
      {
        l_acnt_id=1001;    
      }
      /** Ver 2.9 Ends Here **/ 
      Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); 
      tpfree((char *)ptr_fml_Ibuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
   }  
	/****************Added  to send the time and channed*******************		ver 1.1 commented  ******
  i_err[0] = Fget32(ptr_fml_Obuf,FFO_ORDR_RFRNC,0,(char *)c_ordr_rfrnc,0) ;
	
  EXEC SQL
  SELECT to_char(FXB_RQST_TM,'dd-Mon-yyyy hh24:mi:ss')
	INTO	:c_rqst_tm
	FROM 	 fxb_fo_xchng_book
  WHERE  fxb_ordr_rfrnc  = :c_ordr_rfrnc
  AND    fxb_mdfctn_cntr = 1				;

 
	i_err[0] = Fadd32(ptr_fml_Obuf,FFO_CHANNEL,(char *)c_channel,0) ;
	i_err[1] = Fadd32(ptr_fml_Obuf,FFO_RQST_TM,(char *)c_rqst_tm,0) ;

	****************Added  to send the time and channel ends*************/

  /*** DLRevamp ver 1.1 starts ***/
	if( c_usr_id[0] == BPID )
  {
      strcat( strcpy( c_dbc_channel, c_channel ), " DBC" );
  }
  else
  {
      strcpy( c_dbc_channel, c_channel );
  }
  if(DEBUG_MSG_LVL_3)
	{   
		fn_userlog(c_ServiceName,"c_usr_id[0] is :%c:", c_usr_id[0]);
		fn_userlog(c_ServiceName,"c_channel is :%s:", c_channel);
  	fn_userlog(c_ServiceName,"c_dbc_channel is :%s:", c_dbc_channel);
 	}

	if( Fadd32 ( ptr_fml_Obuf, FFO_SERIES, (char *)c_dbc_channel, 0 ) == -1)
  {
   	/*** fn_errlog( c_ServiceName, "S31410", FMLMSG, c_errmsg  ); *** Commented in VQC as c_errmsg global variable is changed c_err_msg local variable ***/
    fn_errlog( c_ServiceName, "S31415", FMLMSG,c_err_msg.arr);  /*** VQC ***//*Datatype of c_err_msg changed from char to varchar in VQC*/
    strcpy(c_err_msg.arr,"Problem in adding DBC channel"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
    Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
    Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented ...Uncommented in Ver 2.6 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
  }

	if( c_spl_flg == JOINT_SQUAREOFF )	
	{
	  if( Fadd32 ( ptr_fml_Obuf, FFO_SERIES, (char *)c_dbc_channel, 0 ) == -1)
  	{
    /**	fn_errlog( c_ServiceName, "S31420", FMLMSG, c_errmsg  ); *** Commented in VQC as c_errmsg global variable is changed c_err_msg local variable ***/
      fn_errlog( c_ServiceName, "S31425", FMLMSG,c_err_msg.arr); /*** VQC ***/ /*Datatype of c_err_msg changed from char to varchar in VQC*/
    	strcpy(c_err_msg.arr,"Problem in adding DBC channel"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
    	Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
	  	Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented ...Uncommented in Ver 2.6 ***/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
  	}
	}

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName," SUCCESSFULLY Placed the Order.");
	}
	/******** ver 1.1 ends ********/

 	l_acnt_id = 0 ;		/** Ver 1.1 : Commented ...Uncommented in Ver 2.6 ***/
  strcpy(c_err_msg.arr,"Successfully Placed the order"); /*Datatype of c_err_msg changed from char to varchar in VQC*/
  Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*Datatype of c_err_msg changed from char to varchar in VQC*/
	Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		/** Ver 1.1 : Commented ...Uncommented in Ver 2.6 ***/
	tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );	
}
