/******************************************************************************/
/*	Program	    			:	SFO_MARK_SIMTM                                        */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_IMTM_RMRKS                                        */
/*                      FFO_PIPE_ID                                           */
/*                      FFO_OPERATION_TYP																			*/
/*                      FFO_RQST_TYP																					*/
/*                      FFO_RUN_NUM (Optional)                                */
/*  Output            :                                                       */
/*                                                                            */
/*  Description       : This program runs in 3 mode														*/
/*												1) Markup Underlying position for Margin						*/
/*												2) Markup Underlying position for PNL								*/
/*												3) Markup Underlying position for Margin and PNL		*/
/*																																						*/	
/*                                                                            */
/******************************************************************************/
/*  28-Apr-2011     Ver 1.0        Release 1.0  										          */
/*  02-Apr-2012     Ver 1.1        Bug Fix (Swati A.B)                        */
/*  04-Apr-2012     Ver 1.2        Changes for Report  & initialize           */
/*													       d_cntrct_pl to 0 in while loop	Mahesh Shinde*/
/*  21-May-2012     Ver 1.3        Exchange Code Handling (Swati A.B)         */
/*  30-Aug-2012     Ver 1.4        Add margin change (Mahesh Shinde)          */
/*  29-Nov-2012     Ver 1.5        FNO BSE SPAN Changes (Sachin Birje)        */
/*  08-May-2013     Ver 1.6        Balance amount bug fix (Navina D.)					*/
/*  18-Jun-2013     Ver 1.7        SPAN bug fix for reading string Mahesh			*/
/*  09-Sep-2014     Ver 1.8        View to FML changes	-	Samip M							*/
/*	11-Jan-2016			Ver 1.9				 Cancellation of Pending order - Kishor			*/ 
/*  20-Jun-2016     Ver 2.0        Cancellation of intraday & LimitNeg 				*/
/*																 orders only   Tanmay W.					          */
/*  04-Jul-2016     Ver 2.1        Check Session ip common fn changes - Navina*/
/*  14-Jul-2016     Ver 2.2        Query_optimization                         */
/*  20-Aug-2019     Ver 2.3        Physical Delivery CHanges - Sachin Birje.  */
/*  24-Oct-2019     Ver 2.4        Ipv6 Format - Tanmay patel                 */
/*  14-Sep-2020     Ver 2.5        Trigger Price - Suchita D.                 */
/*  12-Dec-2020     Ver 2.6        CR-ISEC14-141383 Separate ELM% for Deep OTM strikes - Anuj Pancholi */
/*  01-FEB-2021     Ver 2.7        Suchita D.        CR_ISEC14_147740 changes */
/*  14-Jul-2022     Ver 2.8        Sachin Birje SPAN_BOD_MRGN_CR-ISEC14-172812*/
/*  14-Jul-2022     Ver 2.9        Suchita Dabir CR-ISEC14-171371 changes     */
/*  14-Jul-2022     Ver 3.0        Suchita Dabir Type1 MTM RPT Changes        */
/*  25-Aug-2022     Ver 3.1        Suchita Dabir CR-ISEC14-175020 changes - Suchita **/
/*  07-Mar-2023     Ver 3.2        Changing fn_lock_usr to fn_lock_fno (Vipul Sharma)*/
/*  12-Apr-2023     Ver 3.3        Margin reporting regulatory changes: Dipin */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>

/*Add header files here */
#include <fml_def.h>
/** #include <fo_view_def.h>	**/	/*** Commented for ver 1.8 ***/
#include <fo_view_def.h>			/** Ver 2.1 **/
#include <fn_log.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fo.h>
#include <fn_ddr.h>
#include <fn_session.h> 
#include <fml_rout.h> 
#include <fn_span_lib.h> 
#include <fn_read_debug_lvl.h> 
#include <math.h>
#include <sqlca.h>
#include <fn_val_ord.h>			/** Ver 2.1 **/
int fn_cal_span_mrgn_and_PNL_deficit(char* c_ServiceName,
																		 char* c_mtch_accnt, 
																		 char* c_xchng_cd,
																		 char* c_undrlyng,
																		 char  c_rqst_typ,
																		 char* c_rout_crt, 
																		 char* c_err_msg,
																		 char  c_rpt_flg,
																		 char  c_req_type);

int fn_cal_span_mrgn_deficit(char* c_ServiceName,
															 char* c_mtch_accnt,
															 char* c_xchng_cd,
															 char* c_undrlyng,
															 char* c_rout_crt, 
															 char* c_err_msg);
															

int fn_cal_PNL_deficit(char* c_ServiceName,
													 char* c_mtch_accnt, 
													 char* c_xchng_cd,
													 char* c_undrlyng,
													 char* c_err_msg,
													 char  c_rpt_flg,
													 char  c_req_type);


int fn_cancel_pending_ordr(char* c_ServiceName,    /*** Ver 1.9 **/
                           char* c_mtch_accnt,
                           char* c_xchng_cd,
                           char* c_undrlyng,
			   									 char* c_expry_dt,
                           char  c_ctgry_indstk,
                           char  c_exer_typ,
													 char  c_opt_typ,
                           long  l_strike_prc);


long int l_report_no = 0;

void SFO_MARK_SIMTM( TPSVCINFO *rqst )
{
  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Rbuf;
  FBFR32 *ptr_fml_Sbuf;

  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
	char c_xchng_cd[4];
	char c_mtch_accnt[11];
	char c_undrlyng[7];
	char c_imtm_rmrks[256];
	char c_pipe_id[3];
  char c_tag [ 256 ];
  char c_msg [ 256 ];
  /*** Ver 1.9 Starts ****/
  char c_cln_mtch_accnt [11] = "\0" ;
  char c_prd_typ              ='\0';
  char c_undrlyng3[7]  = "\0" ;
  char c_xchng_cd3[4] = "\0" ;
  char c_ctgry_indstk ='\0' ;
  /*** Ver 1.9 Ends ****/
	char c_trd_psswd[LEN_USR_TRDNG_PSSWRD];		/** Ver 2.1 **/
	char c_trd_psswd_flg = 'N';								/** Ver 2.1 **/
	char c_txn_flg='Y';												/** Ver 2.1 **/
	char c_ip_address[45+1]; /** Changed to 45 from 15 in Ver 2.4 **/	/** Ver 2.1 **/
	struct vw_usr_prfl st_usr_prfl;						/** Ver 2.1 **/
	struct vw_err_msg st_err_msg;							/** Ver 2.1 **/
  char c_imtm_rmrk[256]="\0";/** ver 3.1 **/
  long  li_cnt        = 0; /** ver 3.1 **/
	char c_indstk;
	char c_operation_typ;
	char c_rqst_typ;
	char c_rout_crt[4];
	char c_rpt_flg = 'Y';
	char c_req_type;

	int i_err[11];				/*** Changed from 8 to 11 for Ver 2.1 ***/
	int i_ferr[11];				/*** Changed from 8 to 11 for Ver 2.1 ***/
	int i;
	int i_ch_val;
	int i_oprn_typ;
  int i_rec_cnt=0;          /** Ver 2.2 **/
  int i_rec_cnt_h=0; /** ver 3.1 **/
  char c_imtm_remarks[ 256 ] = "\0";/** ver 3.1 **/
  char c_svc_name[ 256 ]="\0";/** ver 3.1 **/
	long   l_sssn_id_chk;			/** Ver 2.1 **/
	
	EXEC SQL BEGIN DECLARE SECTION; 

    char  sql_cln_mtch_accnt[11];
    char  sql_xchng_cd[4];
    char  sql_prd_typ;
    char  sql_cntrct_tag;
    char  sql_undrlyng[7];
    varchar c_expry_dt[LEN_DATE]; 
    varchar c_trd_dt[12]; 
    double d_mrgn_blkd = 0.0;
   EXEC SQL END DECLARE SECTION; 


  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
  INITDBGLVL(c_ServiceName);

	MEMSET(st_usr_prfl);				/** Ver 2.1 **/
	MEMSET(st_err_msg);					/** Ver 2.1 **/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "START SFO_MARK_SIMTM");
	}

 	i_err[0] = Fget32( ptr_fml_Ibuf, FFO_XCHNG_CD, 0, (char *)c_xchng_cd, 0 );
  i_ferr [0] = Ferror32;
  i_err[1] = Fget32( ptr_fml_Ibuf, FFO_EBA_MTCH_ACT_NO, 0, (char *)c_mtch_accnt, 0 );
  i_ferr [1] = Ferror32;
  i_err[2] = Fget32( ptr_fml_Ibuf, FFO_UNDRLYNG, 0, (char *)c_undrlyng, 0 );
  i_ferr [2] = Ferror32;
  i_err[3] = Fget32( ptr_fml_Ibuf, FFO_CTGRY_INDSTK, 0, (char *)&c_indstk, 0 );
  i_ferr [3] = Ferror32;
  i_err[4] = Fget32( ptr_fml_Ibuf, FFO_OPERATION_TYP, 0, (char *)&c_operation_typ, 0 );
  i_ferr [4] = Ferror32;
  i_err[5] = Fget32( ptr_fml_Ibuf, FFO_ROUT_CRT, 0, (char *)c_rout_crt, 0 );
  i_ferr [5] = Ferror32;
	i_err[6] = Fget32( ptr_fml_Ibuf, FFO_RUN_NUM, 0, (char *)&l_report_no, 0 );
  i_ferr [6] = Ferror32;
	i_err[7] = Fget32( ptr_fml_Ibuf, FFO_REQ_TYP, 0, (char *)&c_req_type, 0 );
  i_ferr [7] = Ferror32;
	/*** Added for Ver 2.1 ***/
	i_err[8] = Fget32( ptr_fml_Ibuf, FFO_USR_ID, 0,(char *)st_usr_prfl.c_user_id, 0 );
  i_ferr [8] = Ferror32;
	i_err[9] = Fget32( ptr_fml_Ibuf, FFO_SSSN_ID, 0,(char *)&st_usr_prfl.l_session_id, 0 );
  i_ferr [9] = Ferror32;
	i_err[10] = Fget32( ptr_fml_Ibuf, FFO_EBA_MTCH_ACT_NO, 0,(char *)st_usr_prfl.c_cln_mtch_accnt, 0 );
  i_ferr [10] = Ferror32;
	/** End for Ver 2.1 **/

	for(i=0; i<11; i++)					/*** Changed from 8 to 11 for Ver 2.1 ***/
	{
		if ( i_err[ i ] == -1 && i_ferr[i] != FNOTPRES )
		{
			fn_userlog( c_ServiceName, "Error in field no. [%d] ",i);
			fn_errlog( c_ServiceName, "S31005", Fstrerror32(i_ferr[i]),c_err_msg);
			strcpy ( c_msg, "System error. Contact system support" );
			fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		if( i == 7 )
		{
			if (i_err[ i ] == -1 && i_ferr[i] == FNOTPRES )
			{
				fn_userlog( c_ServiceName, " Called for Report From |%c|",c_req_type);
				c_rpt_flg = 'N';		
			}
		}
	}
/*** ver 3.1 starts ****/

  i_err[0] = Fget32( ptr_fml_Ibuf, FFO_IMTM_RMRKS, 0,(char *)c_imtm_rmrk, 0 );
  i_ferr[0] = Ferror32;
  if ( i_err[ 0 ] == -1 && i_ferr[0] != FNOTPRES )
  {
      fn_errlog( c_ServiceName, "S31010", Fstrerror32(i_ferr[0]),c_err_msg);
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

/*** ver 3.1 ends ****/

  /*** Ver 2.3 Starts here ***/
  i_rec_cnt=0;
  EXEC SQL 
   SELECT count(1)
      INTO :i_rec_cnt
      FROM   FUS_FO_UNDRLYNG_SPN_PSTN
      WHERE  FUS_XCHNG_CD = :c_xchng_cd
      AND    FUS_CLM_MTCH_ACCNT =:c_mtch_accnt
      AND    FUS_UNDRLYNG=:c_undrlyng
      AND    FUS_MTM_FLG = 'D';
  if ( SQLCODE  !=  0 )
  { 
    fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg  );
    fn_userlog(c_ServiceName,"Error in session id check ");
    strcpy ( c_msg, "System error. Contact system support" );
    Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);     
  }

  if( i_rec_cnt > 0 )
  {
    fn_userlog(c_ServiceName,"Position Already Marked in Delivery MTM, so skipped");
    fn_errlog(c_ServiceName, "B28009", DEFMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
  }

  /*** Ver 2.3 Ends Here ***/
	/*** Added for Ver 2.1 ***/

	if (c_req_type != 'M' && c_req_type != 'R')
	{ 

	 l_sssn_id_chk = fn_check_user_ip ( c_ServiceName,
																			&st_usr_prfl ,
																			c_trd_psswd,
																			c_trd_psswd_flg,
																			c_ip_address,
																			c_txn_flg,
																			&st_err_msg );

	 if(l_sssn_id_chk == -1)
	 {	
		fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg  );
		fn_userlog(c_ServiceName,"Error in session id check ");	
	  strcpy(c_err_msg,"Session Timed Out");	
		Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
	 }	
	}

	/*** End for Ver 2.1 ***/

	i_oprn_typ	=	atoi(&c_operation_typ);

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"SPAN - c_operation_typ Is :%c:", c_operation_typ);
		fn_userlog(c_ServiceName,"SPAN - i_oprn_typ Is      :%d:", i_oprn_typ);
  	fn_userlog(c_ServiceName,"SPAN - c_rpt_flg Is       :%c:", c_rpt_flg);
  	fn_userlog(c_ServiceName,"SPAN - c_req_type Is      :%c:", c_req_type);       /*** Ver 1.4 ***/
	}
	if( i_oprn_typ	== RUN_SPAN_IMTM_IMPNL )				/**3**/
	{
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "Inside  RUN_SPAN_IMTM_IMPNL");
		}
			i_ch_val = fn_cal_span_mrgn_and_PNL_deficit(c_ServiceName,
																				 c_mtch_accnt, 
																				 c_xchng_cd,
																				 c_undrlyng,
																				 c_rqst_typ,
																				 c_rout_crt, 
																				 c_err_msg,
																				 c_rpt_flg,
																				 c_req_type );
		  if( i_ch_val !=0 )
			{
				fn_errlog( c_ServiceName, "S31025", LIBMSG,c_err_msg);
				strcpy ( c_msg, "System error. Contact system support" );
        fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
	}
	else if ( i_oprn_typ == RUN_SPAN_IMTM_IM )		/**1**/
	{
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName, "Inside  RUN_SPAN_IMTM_IM");
			}

			i_ch_val = fn_cal_span_mrgn_deficit(c_ServiceName,
																				 c_mtch_accnt, 
																				 c_xchng_cd,
																				 c_undrlyng,
																				 c_rout_crt, 
																				 c_err_msg);
		  if( i_ch_val !=0 )
			{
				fn_errlog( c_ServiceName, "S31030", LIBMSG,c_err_msg);
				strcpy ( c_msg, "System error. Contact system support" );
        fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
	}
	else if ( i_oprn_typ	== RUN_SPAN_IMTM_PNL )		/**2**/
	{
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName, "Inside  RUN_SPAN_IMTM_PNL");
			}
			i_ch_val = fn_cal_PNL_deficit(c_ServiceName,
																		c_mtch_accnt, 
																		c_xchng_cd,
																		c_undrlyng,
																		c_err_msg,
																		c_rpt_flg,
																		c_req_type);
		  if( i_ch_val !=0 )
			{
				fn_errlog( c_ServiceName, "S31035", LIBMSG,c_err_msg);
				strcpy ( c_msg, "System error. Contact system support" );
        fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
	}
	else
	{
		fn_userlog( c_ServiceName, "Inside  Invalid Operation type");
		fn_errlog( c_ServiceName, "S31040", "Invalid Operation type",c_err_msg);
		strcpy ( c_msg, "System error. Contact system support" );
		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "END SFO_MARK_SIMTM");
	}

  /** below service
 call added in ver 3.1 started ***/

  i_rec_cnt_h = 0;
  EXEC SQL
   SELECT  count(1)
      INTO :i_rec_cnt_h
      FROM   FUS_FO_UNDRLYNG_SPN_PSTN
      WHERE  FUS_XCHNG_CD = :c_xchng_cd
      AND    FUS_CLM_MTCH_ACCNT =:c_mtch_accnt
      AND    FUS_UNDRLYNG=:c_undrlyng
      AND    FUS_MTM_FLG = 'M';
  if ( SQLCODE  !=  0 )
  {
    fn_errlog( c_ServiceName, "S31045", SQLMSG, c_err_msg  );
    fn_userlog(c_ServiceName,"Error in session id check ");
    strcpy ( c_msg, "System error. Contact system support" );
    Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
  }
  rtrim(c_imtm_rmrk);

  if ((strstr(c_imtm_rmrk,"HEDGESQOFF") != NULL ) && i_rec_cnt_h > 0 )
  {
      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"Before Calling SFO_CANSQ_SIMTM");
      }
      strcpy( c_imtm_remarks,"POSITION ENTERING MTM");
      sprintf( c_imtm_remarks,"%s",c_imtm_rmrk);

      strcpy( c_svc_name,"SFO_CANSQ_SIMTM");
      li_cnt = 0;

      i_ch_val = fn_acall_svc_fml ( c_ServiceName,
                                    c_err_msg,
                                    "SFO_CANSQ_SIMTM",
                                    TPNOREPLY,
                                    9,
                                    FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                    FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt,
                                    FFO_UNDRLYNG, ( char * )c_undrlyng,
                                    FFO_CTGRY_INDSTK, ( char * )&c_indstk,
                                    FFO_IMTM_RMRKS, ( char * )c_imtm_remarks,
                                    FFO_SVC_NAME, (char*) c_svc_name,
                                    FFO_BAT_TAG, ( char * )c_tag,
                                    FFO_ROUT_CRT,( char *)c_rout_crt,
                                    FFO_REC_NO, ( char * )&li_cnt);

    if ( i_ch_val == -1 )
    {
     fn_userlog( c_ServiceName, "Inside  Invalid Operation type");
     fn_errlog( c_ServiceName, "S31050", "Invalid Operation type",c_err_msg);
     strcpy ( c_msg, "System error. Contact system support" );
     fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
/** ver 3.1 ends ***/
	
  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Ibuf, 0 , 0 );
}

int fn_cal_span_mrgn_and_PNL_deficit(char* c_ServiceName,
														 char* c_mtch_accnt,
														 char* c_xchng_cd,
														 char* c_undrlyng,
														 char  c_rqst_typ,
														 char* c_rout_crt,
														 char* c_err_msg,
														 char  c_rpt_flg,
														 char  c_req_type	 )
{

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  char c_tmp_rmrks [ 133 ] ;
  char c_inp_strng1[ 8000 ];
  char c_inp_strng11[ 8000 ];
  char c_inp_strng2[ 8000 ];
  char c_inp_strng22[ 8000 ];
  char c_inp_strng[ 16000 ];
  char c_op_strng[ 16000 ];
  char c_op_strng1[ 16000 ];
  char c_op_strng2[ 16000 ];
  char c_seq_num1[12000];
  char c_seq_num2[12000];
  char c_max_opn_qty[200];
  char c_min_opn_qty[200];
  char c_ltp[2000];
  char c_strk_prc[20];
  char c_mrgn_indctr[3];
  char c_opseq_num1[20];
  char c_opseq_num2[20];
  char c_mtch_accnt1[11];
  char c_mtch_accnt2[11];
  char c_spn_mrgn1[20];
  char c_spn_mrgn2[20];
  char c_nov1[20];
  char c_nov2[20];
  char c_total_mrgn1[20];
  char c_total_mrgn2[20];
	char c_pipe_id[3];
	char c_narration_id[4];
	char c_dr_without_lmt_flg;
  char c_expry_dt_span[10]; 
  char c_xchng_cd1[4];   /**** Ver 1.5 ****/
  char c_xchng_cd2[4];   /**** Ver 1.5 ****/
  char *null_ptr  = 0;
  char c_ref_rmrks[133] = "\0"; /*** Ver 2.7 **/
  double d_zero = 0.0; /** ver 2.7 **/

  int i_returncode;
  int i_rtrn_cd1;
	int i_trnsctn;
  int i_cntrct_cnt = 0;   /*** Ver 1.1 ***/
	int i_ch_val = 0  ;          /*** Ver 1.9 ***/

  int i_cntrct_opnpos = 0;/** ver 2.9 **/
  char c_extra_update='\0'; /*** ver 2.5 ***/

  long  l_max_opn_qty	= 0;
  long  l_min_opn_qty	= 0;
  long  l_temp_qty		=	0;
  long  l_prtfl_seq1	= 0;
  long  l_prtfl_seq2	= 0;
  long  li_len_tobuf	= 0;
  long  l_length1			= 0;
  long  l_length2			= 0;
  /*** long  l_strike_prc	= 0; *** Ver 1.1 ***/
  long  l_cntr  			= 0;
	long  l_basket_id		= 0;
  long  li_grpid;                  /*** Ver 1.2 ***/

  double d_diff_mrgn= 0.0;
  double d_diff_pl= 0.0;
  double d_balance_amt= 0.0;
  double d_bal_to_apply= 0.0;
  double d_ltp= 0.0;
  double d_spn_mrgn1= 0.0;
  double d_spn_mrgn2= 0.0;
  double d_nov1= 0.0;
  double d_nov2= 0.0;
	double d_total_mrgn= 0.0;
  double d_total_mrgn1= 0.0;
  double d_total_mrgn2= 0.0;
  double d_cntrct_pl    = 0.0;
  double d_ntnl_pl      = 0.0;
  double d_blckd_amnt   = 0.0;
	double d_thrshld_per  = 0.0;
	double d_mltplr =0.0;;
	double d_expr= 0.0;
	double d_min_expsr=0.0;
	double d_min_mrgn =  0.0;
	double d_intl_mrgn = 0.0;
	double d_deficit_mrgn_uncovered= 0.0;
	double d_deficit_loss_uncovered= 0.0;
	double d_deficit_shortfall= 0.0;
	double d_available_mrgn=0.0;
	double d_diff_mrgn_pnl=0.0;
	double d_base_prc=0.0;
	double d_premium_temp=0.0;
	double d_premium=0.0;
	double d_undrlyng_notioanl_pnl  = 0.0;
	double d_span_wemult_mrgn_old= 0.0;
	double d_uspan_wenov_mrgn_old= 0.0;
	double d_uspan_nenov_mrgn_old= 0.0;
	double d_net_optn_val_old= 0.0;
  double d_intl_mrgn_new= 0.0;
	double d_expsr_mrgn = 0.0;
	double d_expsr = 0.0;
	double d_min_expsr_mrgn = 0.0; 
	double d_strike_prc = 0.0;		/*** Ver 1.1 ***/
  double d_current_limit = 0.0;           /*** Ver 1.2 ***/

  /*** Ver 2.8 Starts Here **/
  int    i_ret_val=0;

  double d_spn_bmrgn1=0;
  double d_bnov1=0;
  double d_total_bmrgn1=0;

  double d_spn_bmrgn2=0;
  double d_bnov2=0;
  double d_total_bmrgn2=0;

  double d_spn_bmrgn=0;
  double d_bnov=0;
  double d_total_bmrgn=0;
  /*** Ver 2.8 Ends Here ***/
	
  EXEC SQL BEGIN DECLARE SECTION; 

    sql_cursor     sys_cursor;
    char  sql_cln_mtch_accnt[11];
    char  sql_xchng_cd[4];
    char  sql_prd_typ;
    char  sql_cntrct_tag;
    char  sql_undrlyng[7];
		char c_xchng_date[ 11+1 ];            /*** Ver 1.2 ***/
    char c_rqst_type;                     /*** Ver 1.2 ***/
    char  c_prcs_flg = '\0';                /*** Ver 1.2 ***/

    varchar c_expry_dt[LEN_DATE]; 
    varchar c_trd_dt[12]; 
    varchar c_xchng_undrlyng[20]; 

    double d_mrgn_blkd = 0.0;

		struct st_fus_undrlyng_pstn st_undrlyng_pstn;
		struct st_fcp_cntrct_pstn st_cntrct_pstn;
	  struct st_pstn_actn st_actn;
		struct st_err_msg st_error_msg;

  EXEC SQL END DECLARE SECTION; 


	MEMSET(st_undrlyng_pstn);
	MEMSET(st_cntrct_pstn);
	MEMSET(st_actn);
	MEMSET(st_error_msg);


  ptr_fml_Obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31055", TPMSG, c_err_msg);
    return -1;
  }

  ptr_fml_Ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN*10);
											/*** Ver 1.1 - Size increased by multiple of 10 to accomodate the big sized portfolio ***/

  if ( ptr_fml_Ibuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31060", TPMSG, c_err_msg);
    tpfree((char *)ptr_fml_Obuf);
    return -1;
  }

  strcpy( sql_cln_mtch_accnt,c_mtch_accnt);
  strcpy( sql_xchng_cd,c_xchng_cd);
  strcpy( sql_undrlyng,c_undrlyng);

	strcpy(st_actn.c_cln_mtch_accnt,c_mtch_accnt);
	strcpy(st_actn.c_xchng_cd,c_xchng_cd);
	strcpy(st_actn.c_undrlyng,c_undrlyng);
	strcpy(st_actn.c_user_id,"system");
	st_actn.l_session_id = 0L;

	if(DEBUG_MSG_LVL_0)
	{	
		fn_userlog( c_ServiceName, "sql_cln_mtch_accnt = :%s:", sql_cln_mtch_accnt);
		fn_userlog( c_ServiceName, "sql_xchng_cd = :%s:", sql_xchng_cd);
		fn_userlog( c_ServiceName, "sql_undrlyng = :%s:", sql_undrlyng);
	}

  fn_cpy_ddr ( st_actn.c_rout_crt );

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog( c_ServiceName, "S31065", LIBMSG, c_err_msg  );
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
		return FAILURE;
  }

	EXEC SQL
			SELECT  SEM_MAP_VL
			INTO    :c_xchng_undrlyng
			FROM    SEM_STCK_MAP
			WHERE   SEM_STCK_CD = :c_undrlyng
			/*** AND     SEM_ENTTY   = 3; *** Ver 1.5 ***/
        AND   SEM_ENTTY   = DECODE(:sql_xchng_cd,'NFO',3,14);  /*** Ver 1.5 ***/

		if ( SQLCODE  !=  0 )
		{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /** ver 2.0 **/
			fn_errlog ( c_ServiceName, "S31070", SQLMSG, c_err_msg );
			/** EXEC SQL CLOSE :sys_cursor;   Ver 2.0 ***/
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}
  
  SETNULL(c_xchng_undrlyng);

	/*i_returncode = fn_lock_usr( c_ServiceName, st_actn.c_cln_mtch_accnt ); Commented in Ver 3.2*/
  i_returncode = fn_lock_fno( c_ServiceName,  st_actn.c_cln_mtch_accnt ); /* Added in Ver 3.2 */

  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog( c_ServiceName, "S31075", LIBMSG, c_err_msg  );
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return FAILURE;
  }

	EXEC SQL
		SELECT  FUS_CLM_MTCH_ACCNT,
            FUS_XCHNG_CD,
            FUS_INDSTK,
            FUS_UNDRLYNG,
            FUS_UIBUY_QTY,
            FUS_UIBUY_VAL,
            FUS_UISELL_QTY,
            FUS_UISELL_VAL,
            FUS_UEXBUY_QTY,
            FUS_UEXBUY_VAL,
            FUS_UEXSELL_QTY,
            FUS_UEXSELL_VAL,
            FUS_UBUY_EXCTD_QTY,
            FUS_USELL_EXCTD_QTY,
            FUS_UOPNPSTN_FLW,
            FUS_UOPNPSTN_QTY,
            FUS_UOPNPSTN_VAL,
            FUS_UMTM_OPN_VAL,
            FUS_INITIAL_MRGN,
						FUS_SPAN_WEMULT_MRGN,
						FUS_EBA_EXPR_MRGN,
						FUS_USPAN_WENOV_MRGN,
						FUS_MULTIPLIER,
						FUS_USPAN_NENOV_MRGN,
						FUS_NET_OPTN_VAL,
            NVL(FUS_MIN_MRGN,0),
            NVL(FUS_MTM_FLG,'O'),
						FUS_BLCKD_PL,
						FUS_REQD_INITIAL_MRGN
    INTO    :st_undrlyng_pstn.c_cln_mtch_accnt,
            :st_undrlyng_pstn.c_xchng_cd,
            :st_undrlyng_pstn.c_indstk,
            :st_undrlyng_pstn.c_undrlyng,
            :st_undrlyng_pstn.l_uibuy_qty,
            :st_undrlyng_pstn.d_uibuy_val,
            :st_undrlyng_pstn.l_uisell_qty,
            :st_undrlyng_pstn.d_uisell_val,
            :st_undrlyng_pstn.l_uexbuy_qty,
            :st_undrlyng_pstn.d_uexbuy_val,
            :st_undrlyng_pstn.l_uexsell_qty,
            :st_undrlyng_pstn.d_uexsell_val,
            :st_undrlyng_pstn.l_ubuy_exctd_qty,
            :st_undrlyng_pstn.l_usell_exctd_qty,
            :st_undrlyng_pstn.c_uopnpstn_flw,
            :st_undrlyng_pstn.l_uopnpstn_qty,
            :st_undrlyng_pstn.d_uopnpstn_val,
            :st_undrlyng_pstn.d_umtm_opn_val,
            :st_undrlyng_pstn.d_initial_mrgn,
						:st_undrlyng_pstn.d_span_wemult_mrgn,
						:st_undrlyng_pstn.d_eba_expr_mrgn,
 					  :st_undrlyng_pstn.d_uspan_wenov_mrgn,
					  :st_undrlyng_pstn.d_multpr,
					  :st_undrlyng_pstn.d_uspan_nenov_mrgn,
					  :st_undrlyng_pstn.d_net_optn_val,
						:st_undrlyng_pstn.d_min_mrgn,
            :st_undrlyng_pstn.c_mtm_flg,
            :st_undrlyng_pstn.d_blckd_pl,
            :st_undrlyng_pstn.d_reqd_initial_mrgn
    FROM    FUS_FO_UNDRLYNG_SPN_PSTN
    WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
    AND     FUS_XCHNG_CD        = :sql_xchng_cd
    AND     FUS_UNDRLYNG        = :sql_undrlyng
		AND     (FUS_UOPNPSTN_QTY != 0 OR FUS_INITIAL_MRGN != 0);   /*** Ver 1.1 ***/ 

		if (( SQLCODE != 0 )  && ( SQLCODE != NO_DATA_FOUND))/** ver 2.9 NDF Added ***/
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			fn_errlog( c_ServiceName, "S31080", SQLMSG, c_err_msg  );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
		}
	
/** ver 2.9 starts ***/
    if( SQLCODE == NO_DATA_FOUND)
    {
     i_cntrct_opnpos = 0;

     EXEC SQL
     SELECT count(1)
     INTO  :i_cntrct_opnpos
     FROM FCP_FO_SPN_CNTRCT_PSTN WHERE FCP_OPNPSTN_QTY<>0
     AND FCP_CLM_MTCH_ACCNT=:sql_cln_mtch_accnt
     AND FCP_XCHNG_CD=:sql_xchng_cd
     AND FCP_UNDRLYNG=:sql_undrlyng
     AND ( (FCP_PRDCT_TYP='O' AND FCP_OPNPSTN_FLW!='B' ) OR FCP_PRDCT_TYP !='O');
    if ( (SQLCODE != 0 ) )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S31085", SQLMSG, c_err_msg  );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return FAILURE;
    }

     if( i_cntrct_opnpos > 0 )
     {
  EXEC SQL
    SELECT  FUS_CLM_MTCH_ACCNT,
            FUS_XCHNG_CD,
            FUS_INDSTK,
            FUS_UNDRLYNG,
            FUS_UIBUY_QTY,
            FUS_UIBUY_VAL,
            FUS_UISELL_QTY,
            FUS_UISELL_VAL,
            FUS_UEXBUY_QTY,
            FUS_UEXBUY_VAL,
            FUS_UEXSELL_QTY,
            FUS_UEXSELL_VAL,
            FUS_UBUY_EXCTD_QTY,
            FUS_USELL_EXCTD_QTY,
            FUS_UOPNPSTN_FLW,
            FUS_UOPNPSTN_QTY,
            FUS_UOPNPSTN_VAL,
            FUS_UMTM_OPN_VAL,
            FUS_INITIAL_MRGN,
            FUS_SPAN_WEMULT_MRGN,
            FUS_EBA_EXPR_MRGN,
            FUS_USPAN_WENOV_MRGN,
            FUS_MULTIPLIER,
            FUS_USPAN_NENOV_MRGN,
            FUS_NET_OPTN_VAL,
            NVL(FUS_MIN_MRGN,0),
            NVL(FUS_MTM_FLG,'O'),
            FUS_BLCKD_PL,
            FUS_REQD_INITIAL_MRGN
    INTO    :st_undrlyng_pstn.c_cln_mtch_accnt,
            :st_undrlyng_pstn.c_xchng_cd,
            :st_undrlyng_pstn.c_indstk,
            :st_undrlyng_pstn.c_undrlyng,
            :st_undrlyng_pstn.l_uibuy_qty,
            :st_undrlyng_pstn.d_uibuy_val,
            :st_undrlyng_pstn.l_uisell_qty,
            :st_undrlyng_pstn.d_uisell_val,
            :st_undrlyng_pstn.l_uexbuy_qty,
            :st_undrlyng_pstn.d_uexbuy_val,
            :st_undrlyng_pstn.l_uexsell_qty,
            :st_undrlyng_pstn.d_uexsell_val,
            :st_undrlyng_pstn.l_ubuy_exctd_qty,
            :st_undrlyng_pstn.l_usell_exctd_qty,
            :st_undrlyng_pstn.c_uopnpstn_flw,
            :st_undrlyng_pstn.l_uopnpstn_qty,
            :st_undrlyng_pstn.d_uopnpstn_val,
            :st_undrlyng_pstn.d_umtm_opn_val,
            :st_undrlyng_pstn.d_initial_mrgn,
            :st_undrlyng_pstn.d_span_wemult_mrgn,
            :st_undrlyng_pstn.d_eba_expr_mrgn,
            :st_undrlyng_pstn.d_uspan_wenov_mrgn,
            :st_undrlyng_pstn.d_multpr,
            :st_undrlyng_pstn.d_uspan_nenov_mrgn,
            :st_undrlyng_pstn.d_net_optn_val,
            :st_undrlyng_pstn.d_min_mrgn,
            :st_undrlyng_pstn.c_mtm_flg,
            :st_undrlyng_pstn.d_blckd_pl,
            :st_undrlyng_pstn.d_reqd_initial_mrgn
    FROM    FUS_FO_UNDRLYNG_SPN_PSTN
    WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
    AND     FUS_XCHNG_CD        = :sql_xchng_cd
    AND     FUS_UNDRLYNG        = :sql_undrlyng;

    if  (SQLCODE != 0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S31090", SQLMSG, c_err_msg  );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return FAILURE;
    }
   }
   else
   {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S31095", SQLMSG, c_err_msg  );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return FAILURE;
   }
  }
/** ver 2.9 ends ***/	
		d_span_wemult_mrgn_old = st_undrlyng_pstn.d_span_wemult_mrgn;	
		d_uspan_wenov_mrgn_old = st_undrlyng_pstn.d_uspan_wenov_mrgn;
	  d_uspan_nenov_mrgn_old = st_undrlyng_pstn.d_uspan_nenov_mrgn;
    d_net_optn_val_old     = st_undrlyng_pstn.d_net_optn_val;
	
		if(DEBUG_MSG_LVL_0)
		{		
			fn_userlog( c_ServiceName, "*******************************************FUS***********************************");
    	fn_userlog(c_ServiceName,"BEFORE SPAN- (A+B)Initial Margin IS :%lf:",st_undrlyng_pstn.d_initial_mrgn);
    	fn_userlog(c_ServiceName,"BEFORE SPAN- (A=C*D)SPAN Margin with Eff of Multiplier is:%lf:",st_undrlyng_pstn.d_span_wemult_mrgn);
    	fn_userlog(c_ServiceName,"BEFORE SPAN- (B)Exposure  IS :%lf:",st_undrlyng_pstn.d_eba_expr_mrgn);
    	fn_userlog(c_ServiceName,"BEFORE SPAN- (C)SPAN MARGIN WITH EFFECT OF NOV IS :%lf:",st_undrlyng_pstn.d_uspan_wenov_mrgn);
    	fn_userlog(c_ServiceName,"BEFORE SPAN- (D)Multiplier IS :%lf:",st_undrlyng_pstn.d_multpr);
    	fn_userlog(c_ServiceName,"BEFORE SPAN- NOV IS :%lf:",st_undrlyng_pstn.d_net_optn_val);
    	fn_userlog(c_ServiceName,"BEFORE SPAN- Min. Margin IS :%lf:",st_undrlyng_pstn.d_min_mrgn);
			fn_userlog( c_ServiceName, "*********************************************************************************");
		}

		 EXEC  SQL
				SELECT  SPN_PRTFL1_SEQ.nextval
				INTO    :l_prtfl_seq1
				FROM    DUAL; 

			if ( SQLCODE  !=  0 )
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog( c_ServiceName, "S31100", SQLMSG, c_err_msg  );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf);
				return FAILURE;
			}

			EXEC  SQL
				SELECT  SPN_PRTFL1_SEQ.nextval
				INTO    :l_prtfl_seq2
				FROM    DUAL; 

			if ( SQLCODE  !=  0 )
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog( c_ServiceName, "S31105", SQLMSG, c_err_msg  );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf);
				return FAILURE;
			}

			MEMSET(c_inp_strng);     /*** Ver 1.1 ***/
			MEMSET(c_inp_strng1);   /*** Ver 1.1 ***/
			MEMSET(c_inp_strng11);   /*** Ver 1.1 ***/
			MEMSET(c_inp_strng2);   /*** Ver 1.1 ***/
			MEMSET(c_inp_strng22);   /*** Ver 1.1 ***/


			strcpy(c_inp_strng1,"1^");
			strcpy(c_inp_strng2,"|");

      /**** Ver 1.5 Starts Here *****/

      if( strcmp(sql_xchng_cd,"NFO") == 0 )
      {
       strcat( c_inp_strng1 ,"NSE^");
      }
      else
      {
       strcat( c_inp_strng1 ,"BSE^");
      }
      /**** Ver 1.5 Ends Here ******/ 

			sprintf(c_seq_num1,"%ld",l_prtfl_seq1);
			sprintf(c_seq_num2,"%ld",l_prtfl_seq2);

			strcat( c_inp_strng1 , c_seq_num1 );
			strcat( c_inp_strng2 , c_seq_num2 );

			strcat(c_inp_strng1,"^");
			strcat(c_inp_strng2,"^");

	EXEC SQL
    SELECT  FCB_UNDRLYNG_BSKT_ID
    INTO    :l_basket_id
    FROM    FCB_FO_CLN_BSKT_ALLTD
    WHERE   FCB_CLN_LVL = ( SELECT  CLM_CLNT_LVL
                            FROM    CLM_CLNT_MSTR
                            WHERE   CLM_MTCH_ACCNT = :sql_cln_mtch_accnt);
  if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31110",SQLMSG, c_err_msg);
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf); /** ver 2.0 **/
    return  -1;
  }

  /** Prepare a list of contracts from contract position table **/
  EXEC SQL ALLOCATE :sys_cursor; 
  EXEC SQL EXECUTE
      BEGIN
         OPEN :sys_cursor FOR
          SELECT  FCP_CLM_MTCH_ACCNT,
                  FCP_XCHNG_CD,
                  FCP_PRDCT_TYP,
                  FCP_INDSTK,
                  FCP_UNDRLYNG,
                  TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
                  FCP_EXER_TYP,
                  FCP_STRK_PRC,
                  FCP_OPT_TYP,
									FCP_IBUY_QTY,
									FCP_IBUY_ORD_VAL,
									FCP_ISELL_QTY,
									FCP_ISELL_ORD_VAL,
									FCP_EXBUY_QTY,
									FCP_EXBUY_ORD_VAL,
									FCP_EXSELL_QTY,
									FCP_EXSELL_ORD_VAL,
									FCP_BUY_EXCTD_QTY,
									FCP_SELL_EXCTD_QTY,
									FCP_OPNPSTN_FLW,
									FCP_OPNPSTN_QTY,
									FCP_OPNPSTN_VAL,
									FCP_MTM_OPN_VAL,
									FCP_OPT_PREMIUM
            FROM  FCP_FO_SPN_CNTRCT_PSTN
            WHERE FCP_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
            AND   FCP_XCHNG_CD        = :sql_xchng_cd
            AND   FCP_UNDRLYNG        = :sql_undrlyng
						AND   ( FCP_IBUY_QTY <> 0 OR FCP_ISELL_QTY <> 0 OR FCP_EXBUY_QTY <> 0 OR FCP_EXSELL_QTY <> 0 OR FCP_OPNPSTN_QTY <> 0 OR FCP_OPT_PREMIUM <> 0 ) 									/*** Ver 1.1 ***/
            ORDER BY FCP_EXPRY_DT ASC;
          END;
        END-EXEC; 

    if ( SQLCODE != 0 )
    {
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			fn_errlog( c_ServiceName, "S31115", SQLMSG, c_err_msg  );
			/** EXEC SQL CLOSE :sys_cursor;    Ver 2.0 **/
      EXEC SQL FREE :sys_cursor; 
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
    }


    while ( 1 )
    {
				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName," In while loop.");
				}

				d_expsr_mrgn      = 0.0;
    		d_min_expsr_mrgn  = 0.0;			
				d_strike_prc = 0.0;		/*** Ver 1.1 ***/
				d_cntrct_pl	 = 0.0;		/*** Ver 1.2 ***/
			
        EXEC SQL  FETCH  :sys_cursor
                 INTO   :st_cntrct_pstn.c_cln_mtch_accnt,
                        :st_cntrct_pstn.c_xchng_cd,
                        :st_cntrct_pstn.c_prd_typ,
                        :st_cntrct_pstn.c_ctgry_indstk,
                        :st_cntrct_pstn.c_undrlyng,
                        :c_expry_dt,
                        :st_cntrct_pstn.c_exer_typ,
                        :st_cntrct_pstn.l_strike_prc,
                        :st_cntrct_pstn.c_opt_typ,
												:st_cntrct_pstn.l_ibuy_qty,
												:st_cntrct_pstn.d_ibuy_ord_val,
												:st_cntrct_pstn.l_isell_qty,
												:st_cntrct_pstn.d_isell_ord_val,
												:st_cntrct_pstn.l_exbuy_qty,
												:st_cntrct_pstn.d_exbuy_ord_val,
												:st_cntrct_pstn.l_exsell_qty,
												:st_cntrct_pstn.d_exsell_ord_val,
												:st_cntrct_pstn.l_buy_exctd_qty,
												:st_cntrct_pstn.l_sell_exctd_qty,
												:st_cntrct_pstn.c_opnpstn_flw,
												:st_cntrct_pstn.l_opnpstn_qty,
												:st_cntrct_pstn.d_opnpstn_val,
												:st_cntrct_pstn.d_mtm_opn_val,
												:d_premium_temp;

      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
					EXEC SQL CLOSE :sys_cursor; 
					EXEC SQL FREE :sys_cursor; 
          break;
        }

        EXEC SQL CLOSE :sys_cursor; 
        EXEC SQL FREE :sys_cursor; 
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog ( c_ServiceName, "S31120", SQLMSG, c_err_msg );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf);
				return FAILURE;
      }

			i_cntrct_cnt++;             /*** Ver 1.1 ***/

      SETNULL( c_expry_dt );
      strcpy ( st_cntrct_pstn.c_expry_dt, (char *) c_expry_dt.arr );
      rtrim(st_cntrct_pstn.c_xchng_cd);
      rtrim(st_cntrct_pstn.c_undrlyng);
      rtrim(st_cntrct_pstn.c_expry_dt);


			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName, "**********************************FCP FETCHED*******************************");
				fn_userlog( c_ServiceName, "c_expry_dt=:%s:",c_expry_dt.arr);
				fn_userlog( c_ServiceName, "st_cntrct_pstn.c_exer_typ = :%c:", st_cntrct_pstn.c_exer_typ);
				fn_userlog( c_ServiceName, "st_cntrct_pstn.l_strike_prc = :%ld:",st_cntrct_pstn.l_strike_prc);
				fn_userlog( c_ServiceName, "st_cntrct_pstn.c_opt_typ = :%c:", st_cntrct_pstn.c_opt_typ);
				fn_userlog( c_ServiceName, "st_cntrct_pstn.l_ibuy_qty = :%ld:",  st_cntrct_pstn.l_ibuy_qty);
				fn_userlog( c_ServiceName, "st_cntrct_pstn.l_isell_qty = %ld:",  st_cntrct_pstn.l_isell_qty);
				fn_userlog( c_ServiceName, "st_cntrct_pstn.c_opnpstn_flw = :%c:", st_cntrct_pstn.c_opnpstn_flw);
				fn_userlog( c_ServiceName, "st_cntrct_pstn.l_opnpstn_qty = :%ld:", st_cntrct_pstn.l_opnpstn_qty);
				fn_userlog( c_ServiceName, "st_cntrct_pstn.d_opnpstn_val = :%lf:", st_cntrct_pstn.d_opnpstn_val);
				fn_userlog( c_ServiceName, "****************************************************************************");
			}

      l_max_opn_qty = st_cntrct_pstn.l_opnpstn_qty + fn_maxl ( st_cntrct_pstn.l_ibuy_qty , st_cntrct_pstn.l_exbuy_qty );
      l_min_opn_qty = st_cntrct_pstn.l_opnpstn_qty + fn_maxl ( abs ( st_cntrct_pstn.l_isell_qty ) , abs ( st_cntrct_pstn.l_exsell_qty )) * -1;

			if (st_cntrct_pstn.c_prd_typ  ==  'O' )
			{
				l_temp_qty  = fn_minl ( l_max_opn_qty , l_min_opn_qty );
				l_max_opn_qty = l_temp_qty  ;
				l_min_opn_qty = l_temp_qty  ;
			}

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Expiry Date:%s:",st_cntrct_pstn.c_expry_dt);
				fn_userlog(c_ServiceName,"l_basket_id:%ld:",l_basket_id);
			}
		  i_returncode  = fn_cal_expsr  ( c_ServiceName,
                                      st_cntrct_pstn,
                                      l_basket_id,
                                      &d_expsr_mrgn,
                                      &d_min_expsr_mrgn,
                                      &d_mltplr,
                                      c_err_msg
                                    );

      if ( i_returncode != 0 )
      {
         fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  /** Ver 2.0 **/
         fn_errlog(c_ServiceName, "S31125", LIBMSG, c_err_msg );
         EXEC SQL CLOSE :sys_cursor;
         EXEC SQL FREE :sys_cursor;   /** ver 2.0 **/
         tpfree((char *)ptr_fml_Obuf);
         tpfree((char *)ptr_fml_Ibuf);
         return -1;
      }	
	
			EXEC SQL
			SELECT    NVL( FTQ_LST_TRD_PRC,0) ,   /*** Ver 1.1 ***/
								NVL( FTQ_CLS_PRC,0 )        /*** Ver 1.1 ***/ 
        INTO    :d_ltp,
								:d_base_prc
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_PRDCT_TYP = :st_cntrct_pstn.c_prd_typ
				AND     FTQ_XCHNG_CD  = :st_cntrct_pstn.c_xchng_cd     /*** Ver 1.3 ***/
 				AND     FTQ_UNDRLYNG  = :st_cntrct_pstn.c_undrlyng
        AND     FTQ_EXPRY_DT  = :st_cntrct_pstn.c_expry_dt
        AND     FTQ_EXER_TYP  = :st_cntrct_pstn.c_exer_typ
        AND     FTQ_OPT_TYP   = :st_cntrct_pstn.c_opt_typ
        AND     FTQ_STRK_PRC  = :st_cntrct_pstn.l_strike_prc; 
      if(SQLCODE  !=  0 )
      {
        EXEC SQL CLOSE :sys_cursor; 
        EXEC SQL FREE :sys_cursor; 
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog ( c_ServiceName, "S31130", SQLMSG, c_err_msg );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf);
				return FAILURE;
      }

     	if ( st_cntrct_pstn.l_opnpstn_qty != 0 )     /***  Profit / Loss Calculation Contractwise  ***/
      {
        if( st_cntrct_pstn.l_opnpstn_qty > 0 && st_cntrct_pstn.c_prd_typ == 'F' )
        {
          d_cntrct_pl = ( d_ltp * (double) st_cntrct_pstn.l_opnpstn_qty ) -  st_cntrct_pstn.d_opnpstn_val;
					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"111d_cntrct_pl:%lf:",d_cntrct_pl);
						fn_userlog(c_ServiceName,"d_ltp:%lf:",d_ltp);
						fn_userlog(c_ServiceName,"st_cntrct_pstn.d_mtm_opn_val:%lf:",st_cntrct_pstn.d_mtm_opn_val);
						fn_userlog(c_ServiceName,"st_cntrct_pstn.d_opnpstn_val:%lf:",st_cntrct_pstn.d_opnpstn_val);
						fn_userlog(c_ServiceName,"st_cntrct_pstn.l_opnpstn_qty:%ld:",st_cntrct_pstn.l_opnpstn_qty);
					}
        }
        else if ( st_cntrct_pstn.l_opnpstn_qty < 0  )
        {
					if(st_cntrct_pstn.c_prd_typ == 'F')
					{
          	d_cntrct_pl = fabs(st_cntrct_pstn.d_opnpstn_val) -  ( d_ltp * (double) abs(st_cntrct_pstn.l_opnpstn_qty) ) ;
						if(DEBUG_MSG_LVL_3)
						{
							fn_userlog(c_ServiceName,"222d_cntrct_pl:%lf:",d_cntrct_pl);
							fn_userlog(c_ServiceName,"d_ltp:%lf:",d_ltp);
							fn_userlog(c_ServiceName,"st_cntrct_pstn.d_mtm_opn_val:%lf:",st_cntrct_pstn.d_mtm_opn_val);
							fn_userlog(c_ServiceName,"st_cntrct_pstn.d_opnpstn_val:%lf:",st_cntrct_pstn.d_opnpstn_val);
							fn_userlog(c_ServiceName,"st_cntrct_pstn.l_opnpstn_qty:%ld:",st_cntrct_pstn.l_opnpstn_qty);
						}
					}
					else if (st_cntrct_pstn.c_prd_typ == 'O')
					{
						d_cntrct_pl	= (double)abs(st_cntrct_pstn.l_opnpstn_qty)	*	(	d_base_prc	-	d_ltp	);
					
						if(DEBUG_MSG_LVL_3)
						{	
							fn_userlog(c_ServiceName,"MARK SIMTM Contract PNL Is :%lf:",d_cntrct_pl);
						}
					}
        }
      }

    	d_undrlyng_notioanl_pnl = d_undrlyng_notioanl_pnl + d_cntrct_pl ;

      EXEC SQL
        SELECT to_char(to_date(:st_cntrct_pstn.c_expry_dt,'DD-Mon-YYYY'),'dd-Mon-YY')
        INTO  :c_expry_dt_span
        FROM  DUAL;
      if ( SQLCODE  !=  0 )
      {
        EXEC SQL CLOSE :sys_cursor; 
        EXEC SQL FREE :sys_cursor; 
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog ( c_ServiceName, "S31135", SQLMSG, c_err_msg );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf);
				return FAILURE;
      }

      /*** l_strike_prc  = st_cntrct_pstn.l_strike_prc/100  ; *** Commented in Ver 1.1 ***/

			/*** Ver 1.1 starts here ***/
			d_strike_prc  = (double) st_cntrct_pstn.l_strike_prc / 100.00  ;	
			sprintf(c_strk_prc,"%lf",d_strike_prc);

			fn_spn_rtrim(c_strk_prc,'0');
			fn_spn_rtrim(c_strk_prc,'.');
			/*** Ver 1.1 ends here ***/

			d_ltp = d_ltp /100;   /*** ver 1.2 Devided by 100		****/ 

      if( l_cntr  ==  0 )
      {
        if(st_cntrct_pstn.c_prd_typ  ==  'F')
        {
          sprintf(c_inp_strng11,"%s^%s~%c:%s^%ld^%lf",st_cntrct_pstn.c_cln_mtch_accnt,c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,l_max_opn_qty,d_ltp);

        strcat(c_inp_strng1,c_inp_strng11);
        sprintf(c_inp_strng22,"%s^%s~%c:%s^%ld^%lf",st_cntrct_pstn.c_cln_mtch_accnt,c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,l_min_opn_qty,d_ltp);

        strcat(c_inp_strng2,c_inp_strng22);

        }
        else
        {
          sprintf(c_inp_strng11,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn.c_cln_mtch_accnt,c_xchng_undrlyng.arr, st_cntrct_pstn.c_prd_typ,c_expry_dt_span,st_cntrct_pstn.c_opt_typ,st_cntrct_pstn.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn.c_cln_mtch_accnt,c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,st_cntrct_pstn.c_opt_typ,st_cntrct_pstn.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

          strcat(c_inp_strng2,c_inp_strng22);

        }
      }
      else
      {
        if(st_cntrct_pstn.c_prd_typ  ==  'F')
        {
          sprintf(c_inp_strng11,"%s~%c:%s^%ld^%lf",c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,l_max_opn_qty,d_ltp);

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s~%c:%s^%ld^%lf",c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,l_min_opn_qty,d_ltp);

          strcat(c_inp_strng2,c_inp_strng22);

        }
        else
        {
          sprintf(c_inp_strng11,"%s~%c:%s:%c%c:%s^%ld^%lf",c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,st_cntrct_pstn.c_opt_typ,st_cntrct_pstn.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s~%c:%s:%c%c:%s^%ld^%lf",c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,st_cntrct_pstn.c_opt_typ,st_cntrct_pstn.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

          strcat(c_inp_strng2,c_inp_strng22);

        }
      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_expry_dt.arr );
        fn_userlog ( c_ServiceName, "Expiry date to SPAN:%s:", c_expry_dt_span);
        fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntrct_pstn.l_ibuy_qty );
        fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntrct_pstn.d_ibuy_ord_val );
        fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntrct_pstn.l_isell_qty );
        fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntrct_pstn.d_isell_ord_val );
        fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntrct_pstn.l_exbuy_qty );
        fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntrct_pstn.d_exbuy_ord_val );
        fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntrct_pstn.l_exsell_qty );
        fn_userlog ( c_ServiceName, "EXCH sell val      :%lf:", st_cntrct_pstn.d_exsell_ord_val );
        fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntrct_pstn.l_buy_exctd_qty );
        fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntrct_pstn.l_sell_exctd_qty );
        fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntrct_pstn.l_opnpstn_qty );
        fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntrct_pstn.d_mtm_opn_val );
        fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntrct_pstn.d_mtm_opn_val );
     	}

    strcat(c_inp_strng1,",");
    strcat(c_inp_strng2,",");

    l_cntr  ++;
		d_premium = d_premium + d_premium_temp;
		d_expsr     = d_expsr_mrgn  + d_expsr ;
		d_min_expsr = d_min_expsr_mrgn  + d_min_expsr ;
  }	/****** End of WHILE loop  *******/
	/* Type Casted by Mahesh for 1 paisa issue */
	d_undrlyng_notioanl_pnl = (long long)d_undrlyng_notioanl_pnl;

  l_length1 = strlen(c_inp_strng1);

  if( c_inp_strng1[l_length1  - 1 ] == ',')
  {
    c_inp_strng1[l_length1 -1]  ='\0';
  }

  l_length2 = strlen(c_inp_strng2);

  if( c_inp_strng2[l_length2  - 1 ] == ',')
  {
    c_inp_strng2[l_length2 -1]  ='\0';
  }

	/*** Ver 1.1 starts here ***/

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName, "i_cntrct_cnt = :%d:",i_cntrct_cnt);
  }

  if (i_cntrct_cnt > 10)
  {
    if ( Fadd32 (ptr_fml_Ibuf,FFO_ROUT_CRT,(char *)c_rout_crt,0)  ==  -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   /** ver 2.0 **/
      fn_errlog( c_ServiceName, "S31140",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    MEMSET(c_inp_strng);
    strcpy(c_inp_strng,c_inp_strng1);
    strcat(c_inp_strng,"\n");

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"c_inp_strng 1 = :%s:",c_inp_strng);
    }

    if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   /** ver 2.0 **/
      fn_errlog( c_ServiceName, "S31145",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
    }

    i_rtrn_cd1  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

    if( i_rtrn_cd1 != 0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   /** ver 2.0 **/
      fn_errlog( c_ServiceName, "S31150",TPMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng1,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31155",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Output String 1 Is :%s:",c_op_strng1);
    }

    /*** Ver 2.8  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31160",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    } 
    /*** Ver 2.8  Ends here ***/

    MEMSET(c_inp_strng);

		/**** Ver 1.5 BUG bix Starts Here *****/

    if( strcmp(c_xchng_cd,"NFO") == 0 )
    {
      strcpy( c_inp_strng ,"1^NSE^");
    }
    else
    {
        strcpy( c_inp_strng ,"1^BSE^");
    }
    /**** Ver 1.5 Ends Here ******/
	
    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"Initial c_inp_strng2 = :%s:",c_inp_strng2);
    }

    fn_spn_ltrim(c_inp_strng2,'|');
    /*** sprintf(c_inp_strng,"1^%s",c_inp_strng2);  ** Ver 1.5 **/
    /*** sprintf(c_inp_strng,"%s",c_inp_strng2);        ** Ver 1.5 **/
    strcat(c_inp_strng,c_inp_strng2);              /** Ver 1.5 **/
    strcat(c_inp_strng,"\n");

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"c_inp_strng 2 = :%s:",c_inp_strng);
    }

    if ( Fchg32 (ptr_fml_Ibuf,FFO_REMARKS,0,(char *)c_inp_strng,0)  ==  -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   /** ver 2.0 **/
      fn_errlog( c_ServiceName, "S31165",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
    }

    i_rtrn_cd1  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

    if( i_rtrn_cd1 != 0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   /** ver 2.0 **/
      fn_errlog( c_ServiceName, "S31170",TPMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

  	if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng2,0)  ==  -1 )
    {
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   /** ver 2.0 **/
      fn_errlog( c_ServiceName, "S31175",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    fn_spn_ltrim(c_op_strng2,'1');
    fn_spn_ltrim(c_op_strng2,'^');

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Output String 2 Is :%s:",c_op_strng2);
    }

    /*** Ver 2.8  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn2,
                                    &d_bnov2,
                                    &d_total_bmrgn2,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31180",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn2 :%lf: d_bnov2:%lf: d_total_bmrgn2:%lf:",d_spn_bmrgn2,d_bnov2,d_total_bmrgn2);
    }
    /*** Ver 2.8  Ends here ***/

  }
	else
  {
  /*** Ver 1.1 Ends here ***/

	strcpy(c_inp_strng,c_inp_strng1);
  strcat(c_inp_strng,c_inp_strng2);
  strcat(c_inp_strng,"\n");

  if ( Fadd32 (ptr_fml_Ibuf,FFO_ROUT_CRT,(char *)c_rout_crt,0)  ==  -1 )
  {
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		fn_errlog ( c_ServiceName, "S31185", SQLMSG, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);
		tpfree((char *)ptr_fml_Ibuf);
		return FAILURE;
  }

  if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
  {
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		fn_errlog ( c_ServiceName, "S31190", SQLMSG, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);
		tpfree((char *)ptr_fml_Ibuf);
		return FAILURE;
  }

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
	}

  i_rtrn_cd1  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

    if( i_rtrn_cd1 != 0 )
    {
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			fn_errlog ( c_ServiceName, "S31195", TPMSG, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
    }

    if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng,0)  ==  -1 )
    {
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			fn_errlog ( c_ServiceName, "S31200", SQLMSG, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
    }

		if(DEBUG_MSG_LVL_0)
		{
    	fn_userlog(c_ServiceName,"Output String Is :%s:",c_op_strng);
		}
    strcpy(c_op_strng1,strtok(c_op_strng,"|"));
    strcpy(c_op_strng2,strtok(null_ptr,"|"));
	
    /*** Ver 2.8 Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31205",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 2.8  Ends here ***/ 


 
	 } /*** Ver 1.1 ***/

    strcpy(c_mrgn_indctr,strtok(c_op_strng1,"^"));
    strcpy(c_xchng_cd1,strtok(null_ptr,"^"));    /** Ver 1.5 ***/ 
    strcpy(c_seq_num1,strtok(null_ptr,"^"));
    strcpy(c_mtch_accnt1,strtok(null_ptr,"^"));
    strcpy(c_spn_mrgn1,strtok(null_ptr,"^"));
    strcpy(c_nov1,strtok(null_ptr,"^"));
    strcpy(c_total_mrgn1,strtok(null_ptr,"^"));

	 if (i_cntrct_cnt > 10)    /*** Condition added in Ver 1.7 ***/
   {
    strcpy(c_xchng_cd2,strtok(c_op_strng2,"^"));    /** Ver 1.5 ***/
 /*   strcpy(c_seq_num2,strtok(c_op_strng2,"^"));    ** Ver 1.5 ***/
    strcpy(c_seq_num2,strtok(null_ptr,"^"));        /** Ver 1.5 ***/
	 }
	 else
	 {
		strcpy(c_seq_num2,strtok(c_op_strng2,"^"));     /*** Ver 1.7 ***/
	 }
    strcpy(c_mtch_accnt2,strtok(null_ptr,"^"));
    strcpy(c_spn_mrgn2,strtok(null_ptr,"^"));
    strcpy(c_nov2,strtok(null_ptr,"^"));
    strcpy(c_total_mrgn2,strtok(null_ptr,"^"));

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"SPAN c_mtch_accnt1 Is :%s:",c_mtch_accnt1);
			fn_userlog(c_ServiceName,"SPAN c_xchng_cd2 Is :%s:",c_xchng_cd2); 		/** Ver 1.5 ***/
      fn_userlog(c_ServiceName,"SPAN c_seq_num2 Is :%s:",c_seq_num2);  			/** Ver 1.5 ***/
      fn_userlog(c_ServiceName,"SPAN c_spn_mrgn2 Is :%s:",c_spn_mrgn2); 		/** Ver 1.5 ***/
      fn_userlog(c_ServiceName,"SPAN c_nov2 Is :%s:",c_nov2);            		/** Ver 1.5 ***/
      fn_userlog(c_ServiceName,"SPAN c_total_mrgn2 Is :%s:",c_total_mrgn2); /** Ver 1.5 ***/
		}

    if ( c_mtch_accnt1[0] == '1' || c_mtch_accnt1[0] == '2' || c_mtch_accnt1[0] == '3' )  /*** Ver 1.1 ***/
    {
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			fn_errlog ( c_ServiceName, "S31210", SQLMSG, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
    }

    /*** Ver 2.8  Starts here ***/
    d_spn_bmrgn = fn_maxd(d_spn_bmrgn1,d_spn_bmrgn2) * 100;
    d_bnov      = fn_maxd(d_bnov1,d_bnov2) * 100;
    d_total_bmrgn = fn_maxd(d_total_bmrgn1,d_total_bmrgn2) * 100;

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn :%lf: d_bnov :%lf: d_total_bmrgn:%lf:",d_spn_bmrgn,d_bnov,d_total_bmrgn);
    }
    /*** Ver 2.8  Ends here ***/

    d_spn_mrgn1   = atof(c_spn_mrgn1);
    d_spn_mrgn2   = atof(c_spn_mrgn2);
    d_nov1        = atof(c_nov1);
    d_nov2        = atof(c_nov2);
    d_total_mrgn1 = atof(c_total_mrgn1);
    d_total_mrgn2 = atof(c_total_mrgn2);

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"d_spn_mrgn1:%lf:",d_spn_mrgn1);
			fn_userlog(c_ServiceName,"d_spn_mrgn2:%lf:",d_spn_mrgn2);
			fn_userlog(c_ServiceName,"d_nov1:%lf:",d_nov1);
			fn_userlog(c_ServiceName,"d_nov2:%lf:",d_nov2);
			fn_userlog(c_ServiceName,"d_total_mrgn1:%lf:",d_total_mrgn1);
			fn_userlog(c_ServiceName,"d_total_mrgn2:%lf:",d_total_mrgn2);
		}

    st_undrlyng_pstn.d_uspan_nenov_mrgn = fn_maxd(d_spn_mrgn1,d_spn_mrgn2)	*	100	;			/***  SPAN  MRGN  ***/
    st_undrlyng_pstn.d_net_optn_val = fn_maxd(d_nov1,d_nov2)	*	100	;										/***  NOV ***/	
    st_undrlyng_pstn.d_uspan_wenov_mrgn = fn_maxd(d_total_mrgn1,d_total_mrgn2)	*	100	;	/***  SPAN +/- NOV  ***/

    /*** Ver 2.8  Starts Here ***/
    st_undrlyng_pstn.d_uspan_nenov_mrgn  = fn_maxd(st_undrlyng_pstn.d_uspan_nenov_mrgn,d_spn_bmrgn);
    st_undrlyng_pstn.d_net_optn_val = fn_maxd(st_undrlyng_pstn.d_net_optn_val,d_bnov);
    st_undrlyng_pstn.d_uspan_wenov_mrgn = fn_maxd(st_undrlyng_pstn.d_uspan_wenov_mrgn,d_total_bmrgn);
    /*** Ver 2.8  Ends Here ***/ 


		d_total_mrgn  =  st_undrlyng_pstn.d_uspan_wenov_mrgn  ;	
		st_actn.c_prd_typ = 'F'; /**Temporarily hardcoded **/

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"0000- (A+B)Initial Margin IS :%lf:",st_undrlyng_pstn.d_initial_mrgn);
    	fn_userlog(c_ServiceName,"0000- (A=C*D)SPAN Margin with Eff of Multiplier is:%lf:",st_undrlyng_pstn.d_span_wemult_mrgn);
    	fn_userlog(c_ServiceName,"0000- (B)Exposure  IS :%lf:",st_undrlyng_pstn.d_eba_expr_mrgn);
    	fn_userlog(c_ServiceName,"0000- (C)SPAN MARGIN WITH EFFECT OF NOV IS :%lf:",st_undrlyng_pstn.d_uspan_wenov_mrgn);
    	fn_userlog(c_ServiceName,"0000- (D)Multiplier IS :%lf:",st_undrlyng_pstn.d_multpr);
    	fn_userlog(c_ServiceName,"0000- SPAN MARGIN WITHOUT EFFECT OF NOV IS :%lf:",st_undrlyng_pstn.d_uspan_nenov_mrgn);
    	fn_userlog(c_ServiceName,"0000- NOV IS :%lf:",st_undrlyng_pstn.d_net_optn_val);
    	fn_userlog(c_ServiceName,"0000- Min. Margin IS :%lf:",d_min_mrgn);
		}

    i_returncode  = fn_cal_mrgn ( c_ServiceName,
                                  d_total_mrgn,
                                  d_mltplr,
                                  d_expsr,
																	d_min_expsr,	
                                  &d_min_mrgn,
                                  &d_intl_mrgn,
                                  c_err_msg
                                );

    if ( i_returncode !=  0 )
    {
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			fn_errlog ( c_ServiceName, "S31215", SQLMSG, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
    }
	/* Type Casted By Mahesh for 1 paisa issue */

		d_intl_mrgn = ( long long )d_intl_mrgn;
		d_expsr = ( long long )d_expsr; 
		st_undrlyng_pstn.d_span_wemult_mrgn = ( long long )st_undrlyng_pstn.d_uspan_wenov_mrgn * (d_mltplr);

		if(DEBUG_MSG_LVL_0)
		{
    	fn_userlog(c_ServiceName,"AFTER SPAN- (A+B)Initial Margin IS :%lf:",d_intl_mrgn);
    	fn_userlog(c_ServiceName,"AFTER SPAN- (A=C*D)SPAN Margin with Eff of Multiplier is:%lf:",st_undrlyng_pstn.d_span_wemult_mrgn);
			fn_userlog(c_ServiceName,"AFTER SPAN- (B)Exposure  IS :%lf:",d_expr);
			fn_userlog(c_ServiceName,"AFTER SPAN- (C)SPAN MARGIN WITH EFFECT OF NOV IS :%lf:",st_undrlyng_pstn.d_uspan_wenov_mrgn);
			fn_userlog(c_ServiceName,"AFTER SPAN- (D)Multiplier IS :%lf:",d_mltplr);
			fn_userlog(c_ServiceName,"AFTER SPAN- SPAN MARGIN WITHOUT EFFECT OF NOV IS :%lf:",st_undrlyng_pstn.d_uspan_nenov_mrgn);
			fn_userlog(c_ServiceName,"AFTER SPAN- NOV IS :%lf:",st_undrlyng_pstn.d_net_optn_val);
			fn_userlog(c_ServiceName,"AFTER SPAN- Min. Margin IS :%lf:",d_min_mrgn);
		}

				/*************************************************************************************************************************
				Intraday Process is as follows:
				a. Get SM from SPAN BOX.
				b. (Blocked IM +/- Notional P&L) = Available Margin.
				c. Compute Threshold  ( New SPAN Margin + MEM)
				b. Compare available Margin. Vs Threshold Margin(As Defined above)
				If Available Margin is Higher : No Action come out of IMTM Loop.
				If Threshold Margin is Higher : Do as below
				b. Compute EM and then new IM.
				c. Compute deficit Margin Required DM =  (New IM  Blocked IM)
				d. Calculate P&L based on Current LTP in EBA Vs Weighted price and see if there 
				is deficit Loss (DL= ( New Notional Loss - Old Blocked Loss) 
				e. TD(Total Deficit) = DM + DL
				f.  Demand TD when Limit 
				i.  If Demand Not met : Mark the position to Square off. 
				*************************************************************************************************************************/
						st_undrlyng_pstn.c_mtm_flg  = 'O';


						if(DEBUG_MSG_LVL_3)
						{
							fn_userlog(c_ServiceName,"SPAN IMTM - st_undrlyng_pstn.d_initial_mrgn Is :%lf:",st_undrlyng_pstn.d_initial_mrgn);
							fn_userlog(c_ServiceName,"SPAN IMTM - d_undrlyng_notioanl_pnl Is :%lf:",d_undrlyng_notioanl_pnl);
							fn_userlog(c_ServiceName,"SPAN IMTM - st_undrlyng_pstn.d_blckd_pl Is :%lf:",st_undrlyng_pstn.d_blckd_pl);
						}

						d_available_mrgn = st_undrlyng_pstn.d_initial_mrgn + d_undrlyng_notioanl_pnl +  st_undrlyng_pstn.d_blckd_pl;

						if(DEBUG_MSG_LVL_0)
						{
							fn_userlog(c_ServiceName,"d_available_mrgn:%lf:",d_available_mrgn);
							fn_userlog(c_ServiceName,"st_undrlyng_pstn.d_initial_mrgn:%lf:",st_undrlyng_pstn.d_initial_mrgn);
							fn_userlog(c_ServiceName,"st_undrlyng_pstn.d_blckd_pl:%lf:",st_undrlyng_pstn.d_blckd_pl);
							fn_userlog(c_ServiceName,"d_undrlyng_notioanl_pnl:%lf:",d_undrlyng_notioanl_pnl);
							fn_userlog(c_ServiceName,"d_min_mrgn:%lf:",d_min_mrgn);
							fn_userlog(c_ServiceName,"d_intl_mrgn:%lf:",d_intl_mrgn);
						}

						if ( d_available_mrgn >= d_min_mrgn )
						{
							/** fn_userlog ( c_ServiceName, " inside the Tanmay check " );    ** Ver 2.0 **/
							fn_userlog ( c_ServiceName, " inside d_available_mrgn >= d_min_mrgn " );   /** Ver 2.0 **/ 

							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      				tpfree((char *)ptr_fml_Obuf);   /** ver 2.0 **/
      				tpfree((char *)ptr_fml_Ibuf);   /** ver 2.0 **/
							return 0;
						}
						else
						{
							/*st_undrlyng_pstn.d_reqd_initial_mrgn = st_undrlyng_pstn.d_initial_mrgn; */
							d_diff_mrgn_pnl = (-1) *(d_intl_mrgn - d_available_mrgn);

							if(DEBUG_MSG_LVL_0)
							{
								fn_userlog ( c_ServiceName, "Difference in MRGN :%lf:", d_diff_mrgn_pnl );
							}

							sprintf ( st_actn.c_ref_rmrks,"SPAN-%s", st_actn.c_undrlyng);
    
              /*** ver 2.7 starts ***/

              MEMSET(c_tmp_rmrks);
              d_diff_mrgn = st_undrlyng_pstn.d_initial_mrgn - d_intl_mrgn ;
              d_diff_pl = st_undrlyng_pstn.d_blckd_pl + d_undrlyng_notioanl_pnl;
 
              d_zero = 0.0;  

              if( d_diff_mrgn != d_zero )
              {
                 d_diff_mrgn = d_diff_mrgn/100.00;
              }
              if( d_diff_pl != d_zero )
              {
                 d_diff_pl = d_diff_pl/100.00;
              }
    
              if(DEBUG_MSG_LVL_0)
              {
                  fn_userlog ( c_ServiceName, "Difference in MRGN :%lf: :%lf:", d_diff_mrgn,d_diff_pl );
              }
             
              strcpy ( c_tmp_rmrks, st_actn.c_ref_rmrks );
              sprintf (c_ref_rmrks,"M:%0.2lf:PL:%0.2lf",d_diff_mrgn,d_diff_pl);
      	      sprintf(st_actn.c_ref_rmrks,"%s:%s",c_ref_rmrks,c_tmp_rmrks);
              /** ver 2.7 ends ***/

							strcpy( c_narration_id , MRGN_ADJ_ON_CHG_OF_MRGN_PRCNT_AND_PNL);
							c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT ;

							if ( d_diff_mrgn_pnl != 0 )
							{
								d_balance_amt  = 0.0;   /*** Ver 1.1 ***/

								i_returncode = fn_upd_spnlimits( c_ServiceName,
																							&st_actn,
																							&st_error_msg,
																							c_narration_id,
																							c_dr_without_lmt_flg,
																							d_diff_mrgn_pnl,
																							&d_balance_amt);

								if ( i_returncode != 0 )
								{
									switch ( i_returncode )
									{
										case INSUFFICIENT_LIMITS :
											d_limit_MTM = d_balance_amt ;
											fn_errlog(c_ServiceName,"B28558",DEFMSG,c_err_msg);
											st_undrlyng_pstn.c_mtm_flg = 'M';
											break;

										default :
											break;
									}
								}
								d_intl_mrgn_new = d_intl_mrgn + d_balance_amt;
							}
             
              strcpy ( st_actn.c_ref_rmrks, c_tmp_rmrks); /*** ver 2.7 ***/
              MEMSET(c_tmp_rmrks); /** ver 2.7 **/
 
              /** commented in ver 2.7 
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); ***/

							if(DEBUG_MSG_LVL_3)
							{
								fn_userlog ( c_ServiceName, "st_undrlyng_pstn.c_mtm_flg:%c:", st_undrlyng_pstn.c_mtm_flg);
								fn_userlog ( c_ServiceName, "c_rpt_flg                 :%c:", c_rpt_flg);
							}

							/***if ( st_undrlyng_pstn.c_mtm_flg == 'O' && c_rpt_flg == 'Y') Commented in ver 1.4  ***/

							if ( st_undrlyng_pstn.c_mtm_flg == 'O' && c_req_type == 'R' )		/*** Added in ver 1.4 ***/ 
							{
                 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); /** ver 2.7 ***/
								 if(DEBUG_MSG_LVL_0)
								 {
								 		fn_userlog(c_ServiceName," Called for Report And MTM Flag Is |%c|",st_undrlyng_pstn.c_mtm_flg);
								 }
								 return 0;	
							}

              /** comment starts for ver 2.7 **********
							i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
							if ( i_trnsctn == -1 )
							{
								fn_errlog ( c_ServiceName, "S31220", SQLMSG, c_err_msg );
								tpfree((char *)ptr_fml_Obuf);
								tpfree((char *)ptr_fml_Ibuf);
								return FAILURE;
							}

							i_returncode = fn_lock_usr( c_ServiceName, st_actn.c_cln_mtch_accnt );
							if ( i_returncode == -1 )
							{
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								fn_errlog ( c_ServiceName, "S31225", SQLMSG, c_err_msg );
								tpfree((char *)ptr_fml_Obuf);
								tpfree((char *)ptr_fml_Ibuf);
								return FAILURE;
							}
              *****************/

							if(DEBUG_MSG_LVL_0)
							{
								fn_userlog ( c_ServiceName, "st_undrlyng_pstn.c_mtm_flg:%c:", st_undrlyng_pstn.c_mtm_flg);
							}
							if(st_undrlyng_pstn.c_mtm_flg == 'O' )
							{
                 /****** comment starts for ver 2.7 *******************
									d_diff_mrgn = st_undrlyng_pstn.d_initial_mrgn - d_intl_mrgn ;

									if(DEBUG_MSG_LVL_0)
									{
										fn_userlog ( c_ServiceName, "Difference in MRGN :%lf:", d_diff_mrgn );
									}

									sprintf ( st_actn.c_ref_rmrks,"SPAN-%s", st_actn.c_undrlyng);

									strcpy( c_narration_id , MRGN_ADJ_ON_CHG_OF_MRGN_PRCNT_AND_PNL);
									c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT ;

									if ( d_diff_mrgn != 0 )
									{
										d_balance_amt  = 0.0;   *** Ver 1.1 ***

										i_returncode = fn_upd_spnlimits( c_ServiceName,
																									&st_actn,
																									&st_error_msg,
																									c_narration_id,
																									c_dr_without_lmt_flg,
																									d_diff_mrgn,
																									&d_balance_amt);

										if ( i_returncode != 0 )
										{			
												**This loop will be executed only in caseof system failure **
												fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
												fn_errlog ( c_ServiceName, "S31230", SQLMSG, c_err_msg );
												tpfree((char *)ptr_fml_Obuf);
												tpfree((char *)ptr_fml_Ibuf);
												return FAILURE;
										}
									}

*** fn_userlog(c_ServiceName,"Hieeeeeeeeeeeeeeeeeeeeeeeeeeeeee*********************************************");   ver 2.0 **

									d_diff_pl = st_undrlyng_pstn.d_blckd_pl + d_undrlyng_notioanl_pnl;
									strcpy( c_narration_id , NOTIONAL_LOSS_ADJ_ON_CHG_OF_MRGN_PRCNT_AND_PNL );
									c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;

									if ( d_diff_pl != 0 )
									{
											d_balance_amt  = 0.0;   *** Ver 1.1 ***

											i_returncode = fn_upd_spnlimits( c_ServiceName,
																										&st_actn,
																										&st_error_msg,
																										c_narration_id,
																										c_dr_without_lmt_flg,
																										d_diff_pl,
																										&d_balance_amt);
											if ( i_returncode != 0 )
											{
												**This loop will be executed only in caseof system failure **
													fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
													fn_errlog ( c_ServiceName, "S31235", SQLMSG, c_err_msg );
													tpfree((char *)ptr_fml_Obuf);
													tpfree((char *)ptr_fml_Ibuf);
													return FAILURE;
											}
									}
                   *********** comment ends for ver 2.7 **********/
								 EXEC SQL
										UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
										SET     FUS_INITIAL_MRGN    = :d_intl_mrgn,
														FUS_SPAN_WEMULT_MRGN= :st_undrlyng_pstn.d_span_wemult_mrgn,
                    FUS_EBA_EXPR_MRGN   = :d_expsr,
                    FUS_USPAN_WENOV_MRGN= :st_undrlyng_pstn.d_uspan_wenov_mrgn,
                    FUS_MULTIPLIER      = :d_mltplr,
                    FUS_USPAN_NENOV_MRGN= :st_undrlyng_pstn.d_uspan_nenov_mrgn,
                    FUS_NET_OPTN_VAL    = :st_undrlyng_pstn.d_net_optn_val,
                    FUS_MTM_FLG         = :st_undrlyng_pstn.c_mtm_flg,
                    FUS_MIN_MRGN        = :d_min_mrgn,
                    FUS_BLCKD_PL        = (-1) * :d_undrlyng_notioanl_pnl,
                    FUS_NTNL_PL         = :d_undrlyng_notioanl_pnl
          WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
          AND     FUS_UNDRLYNG        = :sql_undrlyng
          AND     FUS_XCHNG_CD        = :sql_xchng_cd;
        if(SQLCODE != 0)
        {
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          fn_errlog ( c_ServiceName, "S31240", SQLMSG, c_err_msg );
          tpfree((char *)ptr_fml_Obuf);
          tpfree((char *)ptr_fml_Ibuf);
          return FAILURE;
        }

		}
		else if(st_undrlyng_pstn.c_mtm_flg == 'M')
		{
				if( c_rpt_flg == 'Y')
				{
					 if(DEBUG_MSG_LVL_3)
          {
            fn_userlog ( c_ServiceName," Insertoing data in SIR For Report.");
            fn_userlog ( c_ServiceName,"st_undrlyng_pstn.d_reqd_initial_mrgn  |%lf|",st_undrlyng_pstn.d_reqd_initial_mrgn);
            fn_userlog ( c_ServiceName,"d_intl_mrgn                           |%lf|",d_intl_mrgn);
            fn_userlog ( c_ServiceName,"st_undrlyng_pstn.d_initial_mrgn       |%lf|",st_undrlyng_pstn.d_initial_mrgn);
            fn_userlog ( c_ServiceName,"d_intl_mrgn_new                       |%lf|",d_intl_mrgn_new);
            fn_userlog ( c_ServiceName,"d_span_wemult_mrgn_old                |%lf|",d_span_wemult_mrgn_old);
            fn_userlog ( c_ServiceName,"st_undrlyng_pstn.d_uspan_wenov_mrgn   |%lf|",st_undrlyng_pstn.d_uspan_wenov_mrgn);
          }
		/*** fn_userlog(c_ServiceName,"Hieeeeeeeeeeeeeeeeeeeeeeeeeeeeee!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");    ** ver 2.0 ***/
					/*** Ver 1.2 Starts***/

          MEMSET(c_xchng_date);

          EXEC SQL
            SELECT  EXG_NXT_TRD_DT
            INTO    :c_xchng_date
            FROM    EXG_XCHNG_MSTR
            WHERE   EXG_XCHNG_CD = :c_xchng_cd;

          if( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
          {
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            fn_errlog ( c_ServiceName, "S31245", SQLMSG, c_err_msg );
            tpfree((char *)ptr_fml_Obuf);
            tpfree((char *)ptr_fml_Ibuf);
            return FAILURE;
          }

          c_rqst_type = LIMIT_X ;
          li_grpid  = 0 ;

          EXEC SQL
            EXECUTE
              BEGIN
                  LIMIT_CAL
                  ( :c_mtch_accnt,
                    :c_xchng_date,
                    :c_rqst_type,
                    :li_grpid,
                    :c_xchng_cd,
                    :d_current_limit,
                    :i_returncode
                  );
              END;
          END-EXEC;

          if ( i_returncode == -1 )
          {
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            fn_errlog ( c_ServiceName, "S31250", SQLMSG, c_err_msg );
            tpfree((char *)ptr_fml_Obuf);
            tpfree((char *)ptr_fml_Ibuf);
            return FAILURE;
          }

          fn_userlog(c_ServiceName,"Limit for Match Account|%s|is |%lf|",st_undrlyng_pstn.c_cln_mtch_accnt,d_current_limit);
					
					if( c_req_type == 'M')
          {
            c_prcs_flg = 'M';
          }
          else
          {
            c_prcs_flg = 'R';
          }
          /*** Ver 1.2 ***/

			fn_userlog(c_ServiceName,"Hieeeeeeee&&&&&&&&&&&&&&&&&&&&");
					EXEC SQL
				 	INSERT INTO SIR_SPN_IMTM_REP 
 									(
		 								  SIR_REPORT_NO,        
		 								  SIR_CLM_MTCH_ACCNT,   
		 								  SIR_XCHNG_CD,         
		 									SIR_INDSTK,           
		 									SIR_UNDRLYNG,         
		 									SIR_MTM_FLG,          
		 									SIR_RPRT_TM_STMP,     
		 									SIR_OPNPSTN_FLW,      
		 									SIR_OPNPSTN_QTY,      
		 									SIR_OPNPSTN_VAL,      
		 									SIR_MTM_OPN_VAL,
											SIR_REQD_INTL_MRGN_OLD,
											SIR_REQD_INTL_MRGN_NEW,      
		 									SIR_INITIAL_MRGN_OLD,
		 									SIR_INITIAL_MRGN_NEW,
 		 									SIR_SPAN_WEMULT_MRGN_OLD,
		 									SIR_SPAN_WEMULT_MRGN_NEW,
		 									SIR_USPAN_WENOV_MRGN_OLD,
		 									SIR_USPAN_WENOV_MRGN_NEW,
		 									SIR_USPAN_NENOV_MRGN_OLD,
 		 									SIR_USPAN_NENOV_MRGN_NEW,
		 									SIR_MIN_MRGN_OLD,
		 									SIR_MIN_MRGN_NEW,
		 									SIR_NET_OPTN_VAL_OLD,
		 									SIR_NET_OPTN_VAL_NEW,
											SIR_ADD_MRGN_VAL_NEW,
		 									SIR_EBA_EXPR_MRGN_OLD,
											SIR_EBA_EXPR_MRGN_NEW,
		 									SIR_NTNL_PL,
		 									SIR_BLCKD_PL,
		 									SIR_AVLBL_MRGN,
											SIR_SPN_PRC_FLG,                                  /** Added in Ver 1.2 ***/
                      SIR_SPN_CRRNT_LMT                                 /** Added in Ver 1.2 ***/	
									)
					VALUES
									(
											:l_report_no,
											:st_undrlyng_pstn.c_cln_mtch_accnt,
											:st_undrlyng_pstn.c_xchng_cd,
											:st_undrlyng_pstn.c_indstk,
											:st_undrlyng_pstn.c_undrlyng,
											:st_undrlyng_pstn.c_mtm_flg,
											sysdate,
											:st_undrlyng_pstn.c_uopnpstn_flw,
											:st_undrlyng_pstn.l_uopnpstn_qty,
											:st_undrlyng_pstn.d_uopnpstn_val,
											:st_undrlyng_pstn.d_umtm_opn_val,
											:st_undrlyng_pstn.d_reqd_initial_mrgn,
											:d_intl_mrgn,
											:st_undrlyng_pstn.d_initial_mrgn,
											:d_intl_mrgn_new,
											:d_span_wemult_mrgn_old,
											:st_undrlyng_pstn.d_span_wemult_mrgn,
											:d_uspan_wenov_mrgn_old,
											:st_undrlyng_pstn.d_uspan_wenov_mrgn,
											:d_uspan_nenov_mrgn_old,
											:st_undrlyng_pstn.d_uspan_nenov_mrgn,
											:st_undrlyng_pstn.d_min_mrgn,
											:d_min_mrgn,	
											:d_net_optn_val_old,
											:st_undrlyng_pstn.d_net_optn_val,
											:d_diff_mrgn_pnl * (-1),
											:st_undrlyng_pstn.d_eba_expr_mrgn,
											:d_expsr_mrgn,
											:d_undrlyng_notioanl_pnl,
											:st_undrlyng_pstn.d_blckd_pl,
											:d_available_mrgn,
											:c_prcs_flg,                                      /** Added in Ver 1.2 ***/
                      :d_current_limit                                  /** Added in Ver 1.2 ***/
									);	
					
						if( c_req_type == 'M')
						{
							EXEC SQL
            		UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
            		SET     FUS_MTM_FLG         = :st_undrlyng_pstn.c_mtm_flg
            		WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
            		AND     FUS_UNDRLYNG        = :sql_undrlyng
            		AND     FUS_XCHNG_CD        = :sql_xchng_cd;	
						}
						if(SQLCODE != 0)
        		{
          		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          		fn_errlog ( c_ServiceName, "S31255", SQLMSG, c_err_msg );
          		tpfree((char *)ptr_fml_Obuf);
          		tpfree((char *)ptr_fml_Ibuf);
          		return FAILURE;
        		}
	
				}
				else
				{
					EXEC SQL
						UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
						SET     FUS_MTM_FLG 				= :st_undrlyng_pstn.c_mtm_flg
						WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
						AND     FUS_UNDRLYNG        = :sql_undrlyng
						AND     FUS_XCHNG_CD        = :sql_xchng_cd; 
				}
				
				if(SQLCODE != 0)
				{
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					fn_errlog ( c_ServiceName, "S31260", SQLMSG, c_err_msg );
					tpfree((char *)ptr_fml_Obuf);
					tpfree((char *)ptr_fml_Ibuf);
					return FAILURE;
				}
	 }

  /*********** ver 2.5 starts ************/
  st_actn.l_report_no  = l_report_no;
  st_actn.c_ctgry_indstk = st_undrlyng_pstn.c_indstk;
  c_extra_update = 'M';
  i_returncode  = fn_cal_trg_prc( c_ServiceName ,  &st_actn ,c_extra_update,
                                      &st_error_msg  );

  if( i_returncode != 0 )
  {
         fn_errlog ( c_ServiceName, "S31265", LIBMSG,c_err_msg );
         fn_userlog(c_ServiceName,"ERROR in fn_cal_trg_prc");
  }
  /** ver 2.5 ends ***/
	}

 
	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
	{
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		fn_errlog ( c_ServiceName, "S31270", SQLMSG, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);
		tpfree((char *)ptr_fml_Ibuf);
		return FAILURE;
	}

   /*** Ver 3.3 Start ***/
      i_returncode = fn_upd_mrgn_reporting(st_undrlyng_pstn.c_cln_mtch_accnt,
                                    st_undrlyng_pstn.c_xchng_cd,
                                     c_ServiceName,
                                     c_err_msg
                                    );
      if( i_returncode != 0 )
      {
        fn_errlog(c_ServiceName, "S31275", LIBMSG, c_err_msg );
        return FAILURE;
      }
   /*** Ver 3.3 Ends ***/

	if(st_undrlyng_pstn.c_mtm_flg == 'O')
	{
	 i_ch_val = fn_cancel_pending_ordr(c_ServiceName,														/**** 1.9 ****/
                           st_cntrct_pstn.c_cln_mtch_accnt,
                           st_cntrct_pstn.c_xchng_cd,
                           st_cntrct_pstn.c_undrlyng,
                           c_expry_dt.arr,
                           st_cntrct_pstn.c_ctgry_indstk,
                           st_cntrct_pstn.c_exer_typ,
			   									 st_cntrct_pstn.c_opt_typ,
                           st_cntrct_pstn.l_strike_prc);
   	if( i_ch_val !=0 )
   	{
   	 /** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   *** ver 2.0 **/
   	 fn_errlog ( c_ServiceName, "S31280", SQLMSG, c_err_msg );
   	 tpfree((char *)ptr_fml_Obuf);
   	 tpfree((char *)ptr_fml_Ibuf);
   	 return FAILURE;
   	}
	}



	tpfree((char *)ptr_fml_Ibuf);     /*** ver 1.1 ***/
 	tpfree((char *)ptr_fml_Obuf);			/*** ver 1.1 ***/
			
	return SUCCESS;
}

int fn_cal_span_mrgn_deficit(char* c_ServiceName,
														 char* c_mtch_accnt,
														 char* c_xchng_cd,
														 char* c_undrlyng,
														 char* c_rout_crt,
														 char* c_err_msg)
{

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  char c_tmp_rmrks [ 133 ] ;
  char c_inp_strng1[ 8000 ];
  char c_inp_strng11[ 8000 ];
  char c_inp_strng2[ 8000 ];
  char c_inp_strng22[ 8000 ];
  char c_inp_strng[ 16000 ];
  char c_op_strng[ 16000 ];
  char c_op_strng1[ 16000 ];
  char c_op_strng2[ 16000 ];
  char c_seq_num1[12000];
  char c_seq_num2[12000];
  char c_max_opn_qty[200];
  char c_min_opn_qty[200];
  char c_ltp[2000];
  char c_strk_prc[20];
  char c_mrgn_indctr[3];
  char c_opseq_num1[20];
  char c_opseq_num2[20];
  char c_mtch_accnt1[11];
  char c_mtch_accnt2[11];
  char c_spn_mrgn1[20];
  char c_spn_mrgn2[20];
  char c_nov1[20];
  char c_nov2[20];
  char c_total_mrgn1[20];
  char c_total_mrgn2[20];
  char c_expry_dt_span[10]; 
	char c_pipe_id[3];
	char c_narration_id[4];
	char c_dr_without_lmt_flg;
  char c_xchng_cd1[4];   /**** Ver 1.5 ****/
  char c_xchng_cd2[4];   /**** Ver 1.5 ****/

  char *null_ptr  = 0;

  int i_cntrct_opnpos = 0;/** ver 2.9 **/
  int i_returncode;
  int i_rtrn_cd1;
	int i_trnsctn;
  int i_cntrct_cnt = 0;   /*** Ver 1.1 ***/
  int i_ch_val ;          /*** Ver 1.9 ***/

  double d_expsr_mrgn_reqd=0;  /** Ver 3.0 **/
  double d_span_mrgn_reqd=0;  /** Ver 3.0 **/

  long  l_max_opn_qty = 0;
  long  l_min_opn_qty	= 0;
  long  l_temp_qty  	= 0;
  long  l_prtfl_seq1	= 0;
  long  l_prtfl_seq2	= 0;
  long  li_len_tobuf	= 0;
  long  l_length1			= 0;
  long  l_length2			= 0;
  /*** long  l_strike_prc	= 0;  *** Ver 1.1 ***/
  long  l_cntr  			= 0;
	long  l_basket_id		= 0;

  double d_diff_mrgn		= 0.0;
  double d_diff_pl			= 0.0;
  double d_balance_amt	= 0.0;
  double d_bal_to_apply	= 0.0;
  double d_ltp					= 0.0;
  double d_spn_mrgn1		= 0.0;
  double d_spn_mrgn2		= 0.0;
  double d_nov1					= 0.0;
  double d_nov2					= 0.0;
  double d_total_mrgn1	=	0.0;
  double d_total_mrgn2	=	0.0;
	double d_total_mrgn		=	0.0;
	double d_min_expsr		= 0.0;	
  double d_cntrct_pl    = 0.0;
  double d_ntnl_pl      = 0.0;
  double d_blckd_amnt   = 0.0;
	double d_mltplr 			= 0.0;
	double d_expr					= 0.0;
	double d_min_mrgn 		= 0.0;
	double d_intl_mrgn 		= 0.0;
	double d_available_mrgn = 0.0;
	double d_premium 			= 0.0;
	double d_premium_temp = 0.0;
	double d_expsr 				= 0.0;
	double d_expsr_mrgn 	= 0.0; 
	double d_min_expsr_mrgn = 0.0;
	double d_upd_amount 	= 0.0;
	double d_strike_prc = 0.0;		/*** Ver 1.1 ***/

  char c_extra_update='\0'; /** ver 2.5 **/

  /*** Ver 2.8  Starts Here ***/
  int    i_ret_val=0;

  double d_spn_bmrgn1=0;
  double d_bnov1=0;
  double d_total_bmrgn1=0;

  double d_spn_bmrgn2=0;
  double d_bnov2=0;
  double d_total_bmrgn2=0;

  double d_spn_bmrgn=0;
  double d_bnov=0;
  double d_total_bmrgn=0;
  /*** Ver 2.8  Ends here ***/


  EXEC SQL BEGIN DECLARE SECTION; 

    sql_cursor     sys_cursor;
    char  sql_cln_mtch_accnt[11];
    char  sql_xchng_cd[4];
    char  sql_prd_typ;
    char  sql_cntrct_tag;
    char  sql_undrlyng[7];
    varchar c_expry_dt[LEN_DATE]; 
    varchar c_expry_dt_temp[LEN_DATE]; 
    varchar c_xchng_undrlyng[20]; 
    varchar c_trd_dt[12]; 

    double d_mrgn_blkd = 0.0;

		struct st_fus_undrlyng_pstn st_undrlyng_pstn;
		struct st_fcp_cntrct_pstn st_cntrct_pstn;
	  struct st_pstn_actn st_actn;
		struct st_err_msg st_error_msg;

  EXEC SQL END DECLARE SECTION; 


	MEMSET(st_undrlyng_pstn);
	MEMSET(st_cntrct_pstn);
	MEMSET(st_actn);
	MEMSET(st_error_msg);


  ptr_fml_Obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31285", TPMSG, c_err_msg);
    return FAILURE;
  }

  ptr_fml_Ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN*10);
												/*** Ver 1.1 - Size increased by multiple of 10 to accomodate the big sized portfolio ***/

  if ( ptr_fml_Ibuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31290", TPMSG, c_err_msg);
    tpfree((char *)ptr_fml_Obuf);
    return FAILURE;
  }

  strcpy( sql_cln_mtch_accnt,c_mtch_accnt);
  strcpy( sql_xchng_cd,c_xchng_cd);
  strcpy( sql_undrlyng,c_undrlyng);

	strcpy(st_actn.c_cln_mtch_accnt,c_mtch_accnt);
	strcpy(st_actn.c_xchng_cd,c_xchng_cd);
	strcpy(st_actn.c_undrlyng,c_undrlyng);
	strcpy(st_actn.c_user_id,"system");
	st_actn.l_session_id = 0L;
	
  fn_cpy_ddr ( st_actn.c_rout_crt );

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog( c_ServiceName, "S31295", LIBMSG, c_err_msg  );
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
		return FAILURE;
  }

  /*i_returncode = fn_lock_usr( c_ServiceName, st_actn.c_cln_mtch_accnt ); Commented in Ver 3.2*/
  i_returncode = fn_lock_fno( c_ServiceName,  st_actn.c_cln_mtch_accnt ); /* Added in Ver 3.2 */
  
  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog( c_ServiceName, "S31300", LIBMSG, c_err_msg  );
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
		return FAILURE;
  }

	EXEC SQL
		SELECT  SEM_MAP_VL
		INTO    :c_xchng_undrlyng
		FROM    SEM_STCK_MAP
		WHERE   SEM_STCK_CD = :c_undrlyng
		/*** AND     SEM_ENTTY   = 3; ** Ver 1.5 ***/
      AND   SEM_ENTTY = DECODE(:sql_xchng_cd,'NFO',3,14);  /*** Ver 1.5 ***/

	if ( SQLCODE  !=  0 )
	{
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		fn_errlog ( c_ServiceName, "S31305", SQLMSG, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);
		tpfree((char *)ptr_fml_Ibuf);
		return FAILURE;
	}

 	SETNULL(c_xchng_undrlyng);

	EXEC SQL
    SELECT  FCB_UNDRLYNG_BSKT_ID
    INTO    :l_basket_id
    FROM    FCB_FO_CLN_BSKT_ALLTD
    WHERE   FCB_CLN_LVL = ( SELECT  CLM_CLNT_LVL
                            FROM    CLM_CLNT_MSTR
                            WHERE   CLM_MTCH_ACCNT = :c_mtch_accnt);
  if ( SQLCODE != 0 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31310",SQLMSG, c_err_msg);
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);   /** ver 2.0 **/
    return  FAILURE;
  }

  /*** Getting the Blocked P&L and Initial Margin ***/

  EXEC SQL
  SELECT   FUS_BLCKD_PL,
           FUS_INITIAL_MRGN
  INTO     :st_undrlyng_pstn.d_blckd_pl,
           :st_undrlyng_pstn.d_initial_mrgn
  FROM     FUS_FO_UNDRLYNG_SPN_PSTN
  WHERE    FUS_CLM_MTCH_ACCNT = :c_mtch_accnt
  AND      FUS_UNDRLYNG       = :c_undrlyng
  AND      FUS_XCHNG_CD       = :c_xchng_cd ;


  if ( SQLCODE != 0 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31315",SQLMSG, c_err_msg);
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);   /** ver 2.0 **/
    return  FAILURE;
  }

  /*** Releasing Blocked Margin ***/

	if(DEBUG_MSG_LVL_0)
	{
  	fn_userlog( c_ServiceName, "Releasing  Blocked Margin");
  	fn_userlog( c_ServiceName, "Intial Margin Is :%lf: ",st_undrlyng_pstn.d_initial_mrgn);
	}

  strcpy( c_narration_id ,REL_TRDMRGN_ON_CHG_OF_MRGN_PRCNT );
  /*** Narrtn to be Added-RELEASE_OF_MARGIN_ON_EOD_MTM ***/

  /** strcpy( remarks , "Relasing Margin on EOD MTM " ); need to find out ***/
  sprintf ( st_actn.c_ref_rmrks,"SPAN-%s", c_undrlyng);

  if ( st_undrlyng_pstn.d_initial_mrgn != 0 )
  {
		 d_balance_amt  = 0.0;   /*** Ver 1.1 ***/

     i_returncode = fn_upd_spnlimits( c_ServiceName,
                                    &st_actn,
                                    &st_error_msg,
                                    c_narration_id,
                                    DEBIT_WITHOUT_LIMIT,
                                    st_undrlyng_pstn.d_initial_mrgn,
                                    &d_balance_amt);

      if ( i_returncode != 0 )
      {
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
				fn_errlog(c_ServiceName,"S31320",LIBMSG, c_err_msg);
				tpfree((char *)ptr_fml_Obuf);
    		tpfree((char *)ptr_fml_Ibuf);   /** ver 2.0 **/
				return  FAILURE;
      }
  }



   /*** Releasing  Notional P&L ***    Commented by Mahesh 

	 if(DEBUG_MSG_LVL_0)
	 {
   	fn_userlog( c_ServiceName, "Releasing  Notional P&L");
   	fn_userlog( c_ServiceName, "P&L Is :%lf: ",st_undrlyng_pstn.d_blckd_pl);
	 }
   strcpy( c_narration_id , "PL");
   sprintf ( st_actn.c_ref_rmrks,"SPAN-%s", c_undrlyng);
   *** Narrtn to be Added- RELEASE_OF_NOTIONAL_PROFIT_LOSS_ON_EOD_MTM ***

   if ( st_undrlyng_pstn.d_blckd_pl!= 0 )
   {

		 if(DEBUG_MSG_LVL_5)
		 {
     		fn_userlog( c_ServiceName, "Before fn_upd_spnlimits :i_returncode Is :%d:",i_returncode);
		 }
     i_returncode = fn_upd_spnlimits( c_ServiceName,
                                    &st_actn,
                                    &st_error_msg,
                                    c_narration_id,
                                    DEBIT_WITHOUT_LIMIT,
                                    st_undrlyng_pstn.d_blckd_pl,
                                    &d_balance_amt);
			if(DEBUG_MSG_LVL_5)
			{
      	fn_userlog( c_ServiceName, "i_returncode Is :%d:",i_returncode);
			}
      if ( i_returncode != 0 )
      {
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
				fn_errlog(c_ServiceName,"S31325",LIBMSG, c_err_msg);
				tpfree((char *)ptr_fml_Obuf);
				return  FAILURE;
      }


    } ** End of P&L **/

	EXEC SQL
		SELECT  FUS_CLM_MTCH_ACCNT,
            FUS_XCHNG_CD,
            FUS_INDSTK,
            FUS_UNDRLYNG,
            FUS_UIBUY_QTY,
            FUS_UIBUY_VAL,
            FUS_UISELL_QTY,
            FUS_UISELL_VAL,
            FUS_UEXBUY_QTY,
            FUS_UEXBUY_VAL,
            FUS_UEXSELL_QTY,
            FUS_UEXSELL_VAL,
            FUS_UBUY_EXCTD_QTY,
            FUS_USELL_EXCTD_QTY,
            FUS_UOPNPSTN_FLW,
            FUS_UOPNPSTN_QTY,
            FUS_UOPNPSTN_VAL,
            FUS_UMTM_OPN_VAL,
            FUS_INITIAL_MRGN,
						FUS_SPAN_WEMULT_MRGN,
						FUS_EBA_EXPR_MRGN,
						FUS_USPAN_WENOV_MRGN,
						FUS_MULTIPLIER,
						FUS_USPAN_NENOV_MRGN,
						FUS_NET_OPTN_VAL,
            NVL(FUS_MIN_MRGN,0),
            NVL(FUS_MTM_FLG,'O'),
						FUS_BLCKD_PL,
						FUS_REQD_INITIAL_MRGN
    INTO    :st_undrlyng_pstn.c_cln_mtch_accnt,
            :st_undrlyng_pstn.c_xchng_cd,
            :st_undrlyng_pstn.c_indstk,
            :st_undrlyng_pstn.c_undrlyng,
            :st_undrlyng_pstn.l_uibuy_qty,
            :st_undrlyng_pstn.d_uibuy_val,
            :st_undrlyng_pstn.l_uisell_qty,
            :st_undrlyng_pstn.d_uisell_val,
            :st_undrlyng_pstn.l_uexbuy_qty,
            :st_undrlyng_pstn.d_uexbuy_val,
            :st_undrlyng_pstn.l_uexsell_qty,
            :st_undrlyng_pstn.d_uexsell_val,
            :st_undrlyng_pstn.l_ubuy_exctd_qty,
            :st_undrlyng_pstn.l_usell_exctd_qty,
            :st_undrlyng_pstn.c_uopnpstn_flw,
            :st_undrlyng_pstn.l_uopnpstn_qty,
            :st_undrlyng_pstn.d_uopnpstn_val,
            :st_undrlyng_pstn.d_umtm_opn_val,
            :st_undrlyng_pstn.d_initial_mrgn,
						:st_undrlyng_pstn.d_span_wemult_mrgn,
						:st_undrlyng_pstn.d_eba_expr_mrgn,
 					  :st_undrlyng_pstn.d_uspan_wenov_mrgn,
					  :st_undrlyng_pstn.d_multpr,
					  :st_undrlyng_pstn.d_uspan_nenov_mrgn,
					  :st_undrlyng_pstn.d_net_optn_val,
						:st_undrlyng_pstn.d_min_mrgn,
            :st_undrlyng_pstn.c_mtm_flg,
            :st_undrlyng_pstn.d_blckd_pl,
            :st_undrlyng_pstn.d_reqd_initial_mrgn
    FROM    FUS_FO_UNDRLYNG_SPN_PSTN
    WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
    AND     FUS_XCHNG_CD        = :sql_xchng_cd
    AND     FUS_UNDRLYNG        = :sql_undrlyng
		AND     (FUS_UOPNPSTN_QTY != 0 OR FUS_INITIAL_MRGN != 0);   /*** Ver 1.1 ***/
		if ( (SQLCODE != 0 ) && (SQLCODE !=NO_DATA_FOUND))/** ver 2.9 **/
		{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			fn_errlog( c_ServiceName, "S31330",SQLMSG , c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return FAILURE;
		}

/** ver 2.9 starts ***/
    if( SQLCODE == NO_DATA_FOUND)
    {
     i_cntrct_opnpos = 0;

     EXEC SQL
     SELECT count(1)
     INTO  :i_cntrct_opnpos
     FROM FCP_FO_SPN_CNTRCT_PSTN WHERE FCP_OPNPSTN_QTY<>0
     AND FCP_CLM_MTCH_ACCNT=:sql_cln_mtch_accnt
     AND FCP_XCHNG_CD=:sql_xchng_cd
     AND FCP_UNDRLYNG=:sql_undrlyng
     AND ( (FCP_PRDCT_TYP='O' AND FCP_OPNPSTN_FLW!='B' ) OR FCP_PRDCT_TYP !='O');

    if ( (SQLCODE != 0 ) )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S31335", SQLMSG, c_err_msg  );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return FAILURE;
    }
     if( i_cntrct_opnpos > 0 )
     {


  EXEC SQL
    SELECT  FUS_CLM_MTCH_ACCNT,
            FUS_XCHNG_CD,
            FUS_INDSTK,
            FUS_UNDRLYNG,
            FUS_UIBUY_QTY,
            FUS_UIBUY_VAL,
            FUS_UISELL_QTY,
            FUS_UISELL_VAL,
            FUS_UEXBUY_QTY,
            FUS_UEXBUY_VAL,
            FUS_UEXSELL_QTY,
            FUS_UEXSELL_VAL,
            FUS_UBUY_EXCTD_QTY,
            FUS_USELL_EXCTD_QTY,
            FUS_UOPNPSTN_FLW,
            FUS_UOPNPSTN_QTY,
            FUS_UOPNPSTN_VAL,
            FUS_UMTM_OPN_VAL,
            FUS_INITIAL_MRGN,
            FUS_SPAN_WEMULT_MRGN,
            FUS_EBA_EXPR_MRGN,
            FUS_USPAN_WENOV_MRGN,
      FUS_MULTIPLIER,
            FUS_USPAN_NENOV_MRGN,
            FUS_NET_OPTN_VAL,
            NVL(FUS_MIN_MRGN,0),
            NVL(FUS_MTM_FLG,'O'),
            FUS_BLCKD_PL,
            FUS_REQD_INITIAL_MRGN
    INTO    :st_undrlyng_pstn.c_cln_mtch_accnt,
            :st_undrlyng_pstn.c_xchng_cd,
            :st_undrlyng_pstn.c_indstk,
            :st_undrlyng_pstn.c_undrlyng,
            :st_undrlyng_pstn.l_uibuy_qty,
            :st_undrlyng_pstn.d_uibuy_val,
            :st_undrlyng_pstn.l_uisell_qty,
            :st_undrlyng_pstn.d_uisell_val,
            :st_undrlyng_pstn.l_uexbuy_qty,
            :st_undrlyng_pstn.d_uexbuy_val,
            :st_undrlyng_pstn.l_uexsell_qty,
            :st_undrlyng_pstn.d_uexsell_val,
            :st_undrlyng_pstn.l_ubuy_exctd_qty,
            :st_undrlyng_pstn.l_usell_exctd_qty,
            :st_undrlyng_pstn.c_uopnpstn_flw,
            :st_undrlyng_pstn.l_uopnpstn_qty,
            :st_undrlyng_pstn.d_uopnpstn_val,
      :st_undrlyng_pstn.d_umtm_opn_val,
            :st_undrlyng_pstn.d_initial_mrgn,
            :st_undrlyng_pstn.d_span_wemult_mrgn,
            :st_undrlyng_pstn.d_eba_expr_mrgn,
            :st_undrlyng_pstn.d_uspan_wenov_mrgn,
            :st_undrlyng_pstn.d_multpr,
            :st_undrlyng_pstn.d_uspan_nenov_mrgn,
            :st_undrlyng_pstn.d_net_optn_val,
            :st_undrlyng_pstn.d_min_mrgn,
            :st_undrlyng_pstn.c_mtm_flg,
            :st_undrlyng_pstn.d_blckd_pl,
            :st_undrlyng_pstn.d_reqd_initial_mrgn
    FROM    FUS_FO_UNDRLYNG_SPN_PSTN
    WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
    AND     FUS_XCHNG_CD        = :sql_xchng_cd
    AND     FUS_UNDRLYNG        = :sql_undrlyng;

    if  (SQLCODE != 0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S31340", SQLMSG, c_err_msg  );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return FAILURE;
    }
   }
   else
   {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S31345",SQLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return FAILURE;
   }
  }
/** ver 2.9 ends ***/
		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"BEFORE SPAN- (A+B)Initial Margin IS :%lf:",st_undrlyng_pstn.d_initial_mrgn);
    	fn_userlog(c_ServiceName,"BEFORE SPAN- (A=C*D)SPAN Margin with Eff of Multiplier is:%lf:",st_undrlyng_pstn.d_span_wemult_mrgn);
    	fn_userlog(c_ServiceName,"BEFORE SPAN- (B)Exposure  IS :%lf:",st_undrlyng_pstn.d_eba_expr_mrgn);
    	fn_userlog(c_ServiceName,"BEFORE SPAN- (C)SPAN MARGIN WITH EFFECT OF NOV IS :%lf:",st_undrlyng_pstn.d_uspan_wenov_mrgn);
    	fn_userlog(c_ServiceName,"BEFORE SPAN- (D)Multiplier IS :%lf:",st_undrlyng_pstn.d_multpr);
    	fn_userlog(c_ServiceName,"BEFORE SPAN- SPAN MARGIN WITHOUT EFFECT OF NOV IS :%lf:",st_undrlyng_pstn.d_uspan_nenov_mrgn);
    	fn_userlog(c_ServiceName,"BEFORE SPAN- NOV IS :%lf:",st_undrlyng_pstn.d_net_optn_val);
    	fn_userlog(c_ServiceName,"BEFORE SPAN- Min. Margin IS :%lf:",st_undrlyng_pstn.d_min_mrgn);
		}

		EXEC  SQL
				SELECT  SPN_PRTFL1_SEQ.nextval
				INTO    :l_prtfl_seq1
				FROM    DUAL; 
			if ( SQLCODE  !=  0 )
			{
    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
				fn_errlog(c_ServiceName,"S31350",SQLMSG, c_err_msg);
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf);
				return  FAILURE;
			}

			EXEC  SQL
				SELECT  SPN_PRTFL1_SEQ.nextval
				INTO    :l_prtfl_seq2
				FROM    DUAL; 
			if ( SQLCODE  !=  0 )
			{
    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
				fn_errlog(c_ServiceName,"S31355",SQLMSG, c_err_msg);
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf);
				return  FAILURE;
			}

			/*** Ver 1.1 starts here ***/
    		MEMSET(c_inp_strng);
    		MEMSET(c_inp_strng1);
    		MEMSET(c_inp_strng2);
    		MEMSET(c_inp_strng11);
    		MEMSET(c_inp_strng22);
    	/*** Ver 1.1 Ends here ***/ 

			strcpy(c_inp_strng1,"1^");
			strcpy(c_inp_strng2,"|");
   
      /**** Ver 1.5 Starts Here *****/

      if( strcmp(sql_xchng_cd,"NFO") == 0 )
      {
       strcat( c_inp_strng1 ,"NSE^");
      }
      else
      {
       strcat( c_inp_strng1 ,"BSE^");
      }
      /**** Ver 1.5 Ends Here ******/

			sprintf(c_seq_num1,"%ld",l_prtfl_seq1);
			sprintf(c_seq_num2,"%ld",l_prtfl_seq2);

			strcat( c_inp_strng1 , c_seq_num1 );
			strcat( c_inp_strng2 , c_seq_num2 );

			strcat(c_inp_strng1,"^");
			strcat(c_inp_strng2,"^");

  /** Prepare a list of contracts from contract position table **/
  EXEC SQL ALLOCATE :sys_cursor; 
     EXEC SQL EXECUTE
      BEGIN
         OPEN :sys_cursor FOR
          SELECT  FCP_CLM_MTCH_ACCNT,
                  FCP_XCHNG_CD,
                  FCP_PRDCT_TYP,
                  FCP_INDSTK,
                  FCP_UNDRLYNG,
                  TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
                  FCP_EXER_TYP,
                  FCP_STRK_PRC,
                  FCP_OPT_TYP,
                  FCP_IBUY_QTY,
                  FCP_IBUY_ORD_VAL,
                  FCP_ISELL_QTY,
                  FCP_ISELL_ORD_VAL,
                  FCP_EXBUY_QTY,
                  FCP_EXBUY_ORD_VAL,
                  FCP_EXSELL_QTY,
                  FCP_EXSELL_ORD_VAL,
                  FCP_BUY_EXCTD_QTY,
                  FCP_SELL_EXCTD_QTY,
                  FCP_OPNPSTN_FLW,
                  FCP_OPNPSTN_QTY,
                  FCP_OPNPSTN_VAL,
                  FCP_MTM_OPN_VAL,
                  FCP_OPT_PREMIUM
            FROM  FCP_FO_SPN_CNTRCT_PSTN
            WHERE FCP_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
            AND   FCP_XCHNG_CD        = :sql_xchng_cd
            AND   FCP_UNDRLYNG        = :sql_undrlyng
						AND   ( FCP_IBUY_QTY <> 0 OR FCP_ISELL_QTY <> 0 OR FCP_EXBUY_QTY <> 0 OR FCP_EXSELL_QTY <> 0 OR FCP_OPNPSTN_QTY <> 0 OR FCP_OPT_PREMIUM <> 0 ) /*** Ver 1.1 ***/
            ORDER BY FCP_EXPRY_DT ASC;
          END;
        END-EXEC; 
    if ( SQLCODE != 0 )
    {
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			/** EXEC SQL CLOSE :sys_cursor;   ** ver 2.0 **/
      EXEC SQL FREE :sys_cursor; 
      fn_errlog ( c_ServiceName, "S31360", SQLMSG, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
      return FAILURE;
    }


    while ( 1 )
    {
			if(DEBUG_MSG_LVL_3)
			{
		  	fn_userlog(c_ServiceName," In while loop.");
			}

			d_expsr_mrgn      = 0.0;
    	d_min_expsr_mrgn  = 0.0;
			d_strike_prc = 0.0;		/*** Ver 1.1 ***/

       MEMSET(st_cntrct_pstn);
       MEMSET(c_expry_dt);
       MEMSET(c_expry_dt_temp);

       EXEC SQL  FETCH  :sys_cursor
                 INTO   :st_cntrct_pstn.c_cln_mtch_accnt,
                        :st_cntrct_pstn.c_xchng_cd,
                        :st_cntrct_pstn.c_prd_typ,
                        :st_cntrct_pstn.c_ctgry_indstk,
                        :st_cntrct_pstn.c_undrlyng,
                        :c_expry_dt,
                        :st_cntrct_pstn.c_exer_typ,
                        :st_cntrct_pstn.l_strike_prc,
                        :st_cntrct_pstn.c_opt_typ,
      				          :st_cntrct_pstn.l_ibuy_qty,
                        :st_cntrct_pstn.d_ibuy_ord_val,
                        :st_cntrct_pstn.l_isell_qty,
                        :st_cntrct_pstn.d_isell_ord_val,
                        :st_cntrct_pstn.l_exbuy_qty,
                        :st_cntrct_pstn.d_exbuy_ord_val,
                        :st_cntrct_pstn.l_exsell_qty,
                        :st_cntrct_pstn.d_exsell_ord_val,
                        :st_cntrct_pstn.l_buy_exctd_qty,
                        :st_cntrct_pstn.l_sell_exctd_qty,
                        :st_cntrct_pstn.c_opnpstn_flw,
                        :st_cntrct_pstn.l_opnpstn_qty,
                        :st_cntrct_pstn.d_opnpstn_val,
                        :st_cntrct_pstn.d_mtm_opn_val,
                        :d_premium_temp;
      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
					EXEC SQL CLOSE :sys_cursor; 
					EXEC SQL FREE :sys_cursor;
          break;
        }

    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       	EXEC SQL CLOSE :sys_cursor; 
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31365", SQLMSG, c_err_msg );
      	tpfree((char *)ptr_fml_Obuf);    /** ver 2.0 **/
      	tpfree((char *)ptr_fml_Ibuf);   /** ver 2.0 **/
        return FAILURE;
      }
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"exrc typ:%c:",st_cntrct_pstn.c_exer_typ);
			}

			i_cntrct_cnt++;             /*** Ver 1.1 ***/
			SETNULL(c_expry_dt);

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"expiry Date:%s:",c_expry_dt.arr);
			}
			strcpy(st_cntrct_pstn.c_expry_dt,(char*) c_expry_dt.arr); /** uncommented in ver 2.6 **/
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"expiry Date:%s:",st_cntrct_pstn.c_expry_dt);
			}
      rtrim(st_cntrct_pstn.c_expry_dt);  /** uncommented in ver 2.6 **/

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"exrc typ:%c:",st_cntrct_pstn.c_exer_typ);
        fn_userlog(c_ServiceName,"expry dt is :%s:",st_cntrct_pstn.c_expry_dt);   /** ver 2.6 **/
			}
      rtrim(st_cntrct_pstn.c_xchng_cd);
      rtrim(st_cntrct_pstn.c_undrlyng);
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"exrc typ:%c:",st_cntrct_pstn.c_exer_typ);
			}

			l_max_opn_qty = st_cntrct_pstn.l_opnpstn_qty + fn_maxl ( st_cntrct_pstn.l_ibuy_qty , st_cntrct_pstn.l_exbuy_qty );
      l_min_opn_qty = st_cntrct_pstn.l_opnpstn_qty + fn_maxl ( abs ( st_cntrct_pstn.l_isell_qty ) , abs ( st_cntrct_pstn.l_exsell_qty )) * -1;

			if (st_cntrct_pstn.c_prd_typ  ==  'O' )
			{
				l_temp_qty  = fn_minl ( l_max_opn_qty , l_min_opn_qty );
				l_max_opn_qty = l_temp_qty  ;
				l_min_opn_qty = l_temp_qty  ;
			}

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"expiry Date:%s:",c_expry_dt.arr);
				fn_userlog(c_ServiceName,"prd typ:%c:",st_cntrct_pstn.c_prd_typ);
				fn_userlog(c_ServiceName,"undrlyng:%s:",st_cntrct_pstn.c_undrlyng);
				fn_userlog(c_ServiceName,"exrc typ:%c:",st_cntrct_pstn.c_exer_typ);
				fn_userlog(c_ServiceName,"opt typ:%c:",st_cntrct_pstn.c_opt_typ);
				fn_userlog(c_ServiceName,"strk:%ld:",st_cntrct_pstn.l_strike_prc);
				fn_userlog(c_ServiceName,"l_basket_id:%ld:",l_basket_id);
			}
			
			i_returncode  = fn_cal_expsr  ( c_ServiceName,
                                      st_cntrct_pstn,
                                      l_basket_id,
                                      &d_expsr_mrgn,
                                      &d_min_expsr_mrgn,
                                      &d_mltplr,
                                      c_err_msg
                                    );

      if ( i_returncode != 0 )
      {
         fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
         EXEC SQL CLOSE :sys_cursor;
         EXEC SQL FREE :sys_cursor;
         fn_errlog(c_ServiceName, "S31370", LIBMSG, c_err_msg );
         EXEC SQL CLOSE :sys_cursor;
         tpfree((char *)ptr_fml_Obuf);
         tpfree((char *)ptr_fml_Ibuf);
         return -1;
      }

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"d_min_expsr_mrgn:%lf:",d_min_expsr_mrgn);
			}
			EXEC SQL
			SELECT    NVL(FTQ_LST_TRD_PRC ,0 )    /*** Ver 1.1 ***/
        INTO    :d_ltp
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_PRDCT_TYP = :st_cntrct_pstn.c_prd_typ
				AND     FTQ_XCHNG_CD  = :st_cntrct_pstn.c_xchng_cd     /*** Ver 1.3 ***/
			  AND     FTQ_UNDRLYNG  = :st_cntrct_pstn.c_undrlyng
        AND     FTQ_EXPRY_DT  = :c_expry_dt
        AND     FTQ_EXER_TYP  = :st_cntrct_pstn.c_exer_typ
        AND     FTQ_OPT_TYP   = :st_cntrct_pstn.c_opt_typ
        AND     FTQ_STRK_PRC  = :st_cntrct_pstn.l_strike_prc;
      if(SQLCODE  !=  0 )
      {
    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog ( c_ServiceName, "S31375", SQLMSG, c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        tpfree((char *)ptr_fml_Obuf);
        tpfree((char *)ptr_fml_Ibuf);
        return FAILURE;
      }

      EXEC SQL
        SELECT to_char(to_date(:c_expry_dt,'DD-Mon-YYYY'),'dd-Mon-YY')
        INTO  :c_expry_dt_span
        FROM  DUAL; 
      if ( SQLCODE  !=  0 )
      {
    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog ( c_ServiceName, "S31380", SQLMSG, c_err_msg );
        EXEC SQL CLOSE :sys_cursor; 
        EXEC SQL FREE :sys_cursor;
        tpfree((char *)ptr_fml_Obuf);
        tpfree((char *)ptr_fml_Ibuf);
        return FAILURE;
      }

      /*** l_strike_prc  = st_cntrct_pstn.l_strike_prc/100  ; *** Commented in Ver 1.1 ***/

			/*** Ver 1.1 starts here ***/
			d_strike_prc  = (double) st_cntrct_pstn.l_strike_prc / 100.00  ;	
			sprintf(c_strk_prc,"%lf",d_strike_prc);

			fn_spn_rtrim(c_strk_prc,'0');
			fn_spn_rtrim(c_strk_prc,'.');
			/*** Ver 1.1 ends here ***/

			d_ltp	=	d_ltp	/	100;		/*** Ver 1.2 Devided by 100 ***/

      if( l_cntr  ==  0 )
      {
        if(st_cntrct_pstn.c_prd_typ  ==  'F')
        {
          sprintf(c_inp_strng11,"%s^%s~%c:%s^%ld^%lf",st_cntrct_pstn.c_cln_mtch_accnt,c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,l_max_opn_qty,d_ltp);

        strcat(c_inp_strng1,c_inp_strng11);
        sprintf(c_inp_strng22,"%s^%s~%c:%s^%ld^%lf",st_cntrct_pstn.c_cln_mtch_accnt,c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,l_min_opn_qty,d_ltp);

        strcat(c_inp_strng2,c_inp_strng22);

        }
        else
        {
          sprintf(c_inp_strng11,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn.c_cln_mtch_accnt,c_xchng_undrlyng.arr, st_cntrct_pstn.c_prd_typ,c_expry_dt_span,st_cntrct_pstn.c_opt_typ,st_cntrct_pstn.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn.c_cln_mtch_accnt,c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,st_cntrct_pstn.c_opt_typ,st_cntrct_pstn.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

          strcat(c_inp_strng2,c_inp_strng22);

        }
      }
      else
      {
        if(st_cntrct_pstn.c_prd_typ  ==  'F')
        {
          sprintf(c_inp_strng11,"%s~%c:%s^%ld^%lf",c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,l_max_opn_qty,d_ltp);

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s~%c:%s^%ld^%lf",c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,l_min_opn_qty,d_ltp);

          strcat(c_inp_strng2,c_inp_strng22);

        }
        else
        {
          sprintf(c_inp_strng11,"%s~%c:%s:%c%c:%s^%ld^%lf",c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,st_cntrct_pstn.c_opt_typ,st_cntrct_pstn.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s~%c:%s:%c%c:%s^%ld^%lf",c_xchng_undrlyng.arr,st_cntrct_pstn.c_prd_typ,c_expry_dt_span,st_cntrct_pstn.c_opt_typ,st_cntrct_pstn.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

          strcat(c_inp_strng2,c_inp_strng22);

        }
      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog ( c_ServiceName, "Expiry date to SPAN :%s:", c_expry_dt_span);
        fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntrct_pstn.l_ibuy_qty );
        fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntrct_pstn.d_ibuy_ord_val );
        fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntrct_pstn.l_isell_qty );
        fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntrct_pstn.d_isell_ord_val );
        fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntrct_pstn.l_exbuy_qty );
        fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntrct_pstn.d_exbuy_ord_val );
        fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntrct_pstn.l_exsell_qty );
        fn_userlog ( c_ServiceName, "EXCH sell val      :%lf:", st_cntrct_pstn.d_exsell_ord_val );
        fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntrct_pstn.l_buy_exctd_qty );
        fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntrct_pstn.l_sell_exctd_qty );
        fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntrct_pstn.l_opnpstn_qty );
        fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntrct_pstn.d_mtm_opn_val );
        fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntrct_pstn.d_mtm_opn_val );
     }

    strcat(c_inp_strng1,",");
    strcat(c_inp_strng2,",");

    l_cntr  ++;
		d_premium = d_premium + d_premium_temp;
		d_min_expsr = d_min_expsr_mrgn  + d_min_expsr ;
			
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"d_min_expsr:%lf:",d_min_expsr);
		}
    d_expsr     = d_expsr_mrgn  + d_expsr ;

  }/* END OF WHILE LOOP */


  l_length1 = strlen(c_inp_strng1);

  if( c_inp_strng1[l_length1  - 1 ] == ',')
  {
    c_inp_strng1[l_length1 -1]  ='\0';
  }

  l_length2 = strlen(c_inp_strng2);

  if( c_inp_strng2[l_length2  - 1 ] == ',')
  {
    c_inp_strng2[l_length2 -1]  ='\0';
  }

	/*** Ver 1.1 starts here ***/

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName, "i_cntrct_cnt = :%d:",i_cntrct_cnt);
  }

  if (i_cntrct_cnt > 10)
  {
    if ( Fadd32 (ptr_fml_Ibuf,FFO_ROUT_CRT,(char *)c_rout_crt,0)  ==  -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** ver 2.0 ***/
      fn_errlog( c_ServiceName, "S31385",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    MEMSET(c_inp_strng);
    strcpy(c_inp_strng,c_inp_strng1);
    strcat(c_inp_strng,"\n");

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"c_inp_strng 1 = :%s:",c_inp_strng);
    }

    if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** ver 2.0 ***/
      fn_errlog( c_ServiceName, "S31390",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
    }

		fn_cpy_ddr ( st_actn.c_rout_crt );

    i_rtrn_cd1  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

    if( i_rtrn_cd1 != 0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** ver 2.0 ***/
      fn_errlog( c_ServiceName, "S31395",TPMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

 		if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng1,0)  ==  -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** ver 2.0 ***/
      fn_errlog( c_ServiceName, "S31400",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Output String 1 Is :%s:",c_op_strng1);
    }

    /*** Ver 2.8  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31405",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 2.8  Ends here ***/ 


    MEMSET(c_inp_strng);

		/**** Ver 1.5 BUG bix Starts Here *****/

    if( strcmp(c_xchng_cd,"NFO") == 0 )
    {
      strcpy( c_inp_strng ,"1^NSE^");
    }
    else
    {
        strcpy( c_inp_strng ,"1^BSE^");
    }
    /**** Ver 1.5 Ends Here ******/

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"Initial c_inp_strng2 = :%s:",c_inp_strng2);
    }

    fn_spn_ltrim(c_inp_strng2,'|');
    /*** sprintf(c_inp_strng,"1^%s",c_inp_strng2); ** Ver 1.5 ***/
    /*** sprintf(c_inp_strng,"%s",c_inp_strng2);   ** Ver 1.5 ***/
    strcat(c_inp_strng,c_inp_strng2);							/** Ver 1.5 ***/	
    strcat(c_inp_strng,"\n");

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"c_inp_strng 2 = :%s:",c_inp_strng);
    }

    if ( Fchg32 (ptr_fml_Ibuf,FFO_REMARKS,0,(char *)c_inp_strng,0)  ==  -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** ver 2.0 ***/
      fn_errlog( c_ServiceName, "S31410",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
    }
		
		fn_cpy_ddr ( st_actn.c_rout_crt );

    i_rtrn_cd1  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

    if( i_rtrn_cd1 != 0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** ver 2.0 ***/
      fn_errlog( c_ServiceName, "S31415",TPMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng2,0)  ==  -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** ver 2.0 ***/
      fn_errlog( c_ServiceName, "S31420",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    fn_spn_ltrim(c_op_strng2,'1');
    fn_spn_ltrim(c_op_strng2,'^');

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Output String 2 Is :%s:",c_op_strng2);
    }

    /*** Ver 2.8  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn2,
                                    &d_bnov2,
                                    &d_total_bmrgn2,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31425",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn2 :%lf: d_bnov2:%lf: d_total_bmrgn2:%lf:",d_spn_bmrgn2,d_bnov2,d_total_bmrgn2);
    }
    /*** Ver 2.8  Ends here ***/

  }
  else
  {
  	/*** Ver 1.1 Ends here ***/

		strcpy(c_inp_strng,c_inp_strng1);
  	strcat(c_inp_strng,c_inp_strng2);
  	strcat(c_inp_strng,"\n");

  	if ( Fadd32 (ptr_fml_Ibuf,FFO_ROUT_CRT,(char *)c_rout_crt,0)  ==  -1 )
  	{
   		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	fn_errlog( c_ServiceName, "S31430",FMLMSG , c_err_msg );
    	tpfree((char *)ptr_fml_Obuf);
    	tpfree((char *)ptr_fml_Ibuf);
    	return FAILURE;
  	}

  	if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
  	{
   		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	fn_errlog( c_ServiceName, "S31435",FMLMSG , c_err_msg );
    	tpfree((char *)ptr_fml_Obuf);
    	tpfree((char *)ptr_fml_Ibuf);
    	return FAILURE;
  	}

		if(DEBUG_MSG_LVL_3)
		{
  		fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}

  	fn_cpy_ddr ( st_actn.c_rout_crt );

  	i_rtrn_cd1  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

    if( i_rtrn_cd1 != 0 )
    {
   		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S31440",TPMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return FAILURE;
    }

    if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng,0)  ==  -1 )
    {
   		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S31445",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return FAILURE;
    }
	
		if(DEBUG_MSG_LVL_0)
		{
    	fn_userlog(c_ServiceName,"Output String Is :%s:",c_op_strng);
		}

    strcpy(c_op_strng1,strtok(c_op_strng,"|"));
    strcpy(c_op_strng2,strtok(null_ptr,"|"));

    /*** Ver 2.8  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31450",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 2.8  Ends here ***/


  } /*** Ver 1.1 ***/


    strcpy(c_mrgn_indctr,strtok(c_op_strng1,"^"));
    strcpy(c_xchng_cd1,strtok(null_ptr,"^"));    /** Ver 1.5 ***/
    strcpy(c_seq_num1,strtok(null_ptr,"^"));
    strcpy(c_mtch_accnt1,strtok(null_ptr,"^"));
    strcpy(c_spn_mrgn1,strtok(null_ptr,"^"));
    strcpy(c_nov1,strtok(null_ptr,"^"));
    strcpy(c_total_mrgn1,strtok(null_ptr,"^"));

	if (i_cntrct_cnt > 10)    /*** Condition added in Ver 1.7 ***/
  {
    strcpy(c_xchng_cd2,strtok(c_op_strng2,"^"));    /** Ver 1.5 ***/
   /* strcpy(c_seq_num2,strtok(c_op_strng2,"^"));    ** Ver 1.5 ***/
    strcpy(c_seq_num2,strtok(null_ptr,"^"));        /** Ver 1.5 ***/
	}
	else
	{
		strcpy(c_seq_num2,strtok(c_op_strng2,"^"));    /*** Ver 1.7 ***/
	}	
    strcpy(c_mtch_accnt2,strtok(null_ptr,"^"));
    strcpy(c_spn_mrgn2,strtok(null_ptr,"^"));
    strcpy(c_nov2,strtok(null_ptr,"^"));
    strcpy(c_total_mrgn2,strtok(null_ptr,"^"));

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"SPAN c_mtch_accnt1 Is :%s:",c_mtch_accnt1);
			fn_userlog(c_ServiceName,"SPAN c_xchng_cd1 Is :%s:",c_xchng_cd1);
    	fn_userlog(c_ServiceName,"SPAN c_xchng_cd2 Is :%s:",c_xchng_cd2); /** Ver 1.5 ***/
    	fn_userlog(c_ServiceName,"SPAN c_seq_num2 Is :%s:",c_seq_num2);  /** Ver 1.5 ***/
    	fn_userlog(c_ServiceName,"SPAN c_spn_mrgn2 Is :%s:",c_spn_mrgn2); /** Ver 1.5 ***/
    	fn_userlog(c_ServiceName,"SPAN c_nov2 Is :%s:",c_nov2);            /** Ver 1.5 ***/
    	fn_userlog(c_ServiceName,"SPAN c_total_mrgn2 Is :%s:",c_total_mrgn2); /** Ver 1.5 ***/
		}

    if ( c_mtch_accnt1[0] == '1' || c_mtch_accnt1[0] == '2' || c_mtch_accnt1[0] == '3' ) /*** Ver 1.1 ***/
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** ver 2.0 ***/
      fn_errlog( c_ServiceName, "S31455",LIBMSG , c_err_msg );
      fn_userlog(c_ServiceName,"Service Return Error.");
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return FAILURE ;
    }

    /*** Ver 2.8  Starts here ***/
     d_spn_bmrgn = fn_maxd(d_spn_bmrgn1,d_spn_bmrgn2) * 100;
     d_bnov      = fn_maxd(d_bnov1,d_bnov2) * 100;
     d_total_bmrgn = fn_maxd(d_total_bmrgn1,d_total_bmrgn2) * 100;

     if(DEBUG_MSG_LVL_3)
     {
       fn_userlog(c_ServiceName,"d_spn_bmrgn :%lf: d_bnov :%lf: d_total_bmrgn:%lf:",d_spn_bmrgn,d_bnov,d_total_bmrgn);
     } 
    /*** Ver 2.8  Ends here ***/

    d_spn_mrgn1   = atof(c_spn_mrgn1);
    d_spn_mrgn2   = atof(c_spn_mrgn2);
    d_nov1        = atof(c_nov1);
    d_nov2        = atof(c_nov2);
    d_total_mrgn1 = atof(c_total_mrgn1);
    d_total_mrgn2 = atof(c_total_mrgn2);


    st_undrlyng_pstn.d_uspan_nenov_mrgn = fn_maxd(d_spn_mrgn1,d_spn_mrgn2) * 100;			/***  SPAN  MRGN  ***/
    st_undrlyng_pstn.d_net_optn_val = fn_maxd(d_nov1,d_nov2) * 100;										/***  NOV ***/	
    st_undrlyng_pstn.d_uspan_wenov_mrgn = fn_maxd(d_total_mrgn1,d_total_mrgn2) * 100;	/***  SPAN +/- NOV  ***/	

    /*** Ver 2.8  Starts Here ***/
    st_undrlyng_pstn.d_uspan_nenov_mrgn  = fn_maxd(st_undrlyng_pstn.d_uspan_nenov_mrgn,d_spn_bmrgn);
    st_undrlyng_pstn.d_net_optn_val = fn_maxd(st_undrlyng_pstn.d_net_optn_val,d_bnov);
    st_undrlyng_pstn.d_uspan_wenov_mrgn = fn_maxd(st_undrlyng_pstn.d_uspan_wenov_mrgn,d_total_bmrgn);
    /*** Ver 2.8  Ends Here ***/

		d_total_mrgn = st_undrlyng_pstn.d_uspan_wenov_mrgn;
		st_actn.c_prd_typ = 'F';

    i_returncode  = fn_cal_mrgn ( c_ServiceName,
                                  d_total_mrgn,
                                  d_mltplr,
                                  d_expsr,
																	d_min_expsr,
                                  &d_min_mrgn,
                                  &d_intl_mrgn,
                                  c_err_msg
                                );

    if ( i_returncode !=  0 )
    {
   		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S31460",LIBMSG , c_err_msg );
      fn_userlog(c_ServiceName,"Service Return Error.");
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return FAILURE;
    }
		/* Type Casted by Mahesh for 1 paisa issue */
		st_undrlyng_pstn.d_span_wemult_mrgn =( long long ) st_undrlyng_pstn.d_uspan_wenov_mrgn * (d_mltplr);
		d_expsr = ( long long )d_expsr;

		if(DEBUG_MSG_LVL_0)
		{
    	fn_userlog(c_ServiceName,"AFTER SPAN- (A+B)Initial Margin IS :%lf:",d_intl_mrgn);
    	fn_userlog(c_ServiceName,"AFTER SPAN- (A=C*D)SPAN Margin with Eff of Multiplier is:%lf:",st_undrlyng_pstn.d_span_wemult_mrgn);
    	fn_userlog(c_ServiceName,"AFTER SPAN- (B)Exposure  IS :%lf:",d_expsr);
    	fn_userlog(c_ServiceName,"AFTER SPAN- (C)SPAN MARGIN WITH EFFECT OF NOV IS :%lf:",st_undrlyng_pstn.d_uspan_wenov_mrgn);
    	fn_userlog(c_ServiceName,"AFTER SPAN- (D)Multiplier IS :%lf:",d_mltplr);
    	fn_userlog(c_ServiceName,"AFTER SPAN- SPAN MARGIN WITHOUT EFFECT OF NOV IS :%lf:",st_undrlyng_pstn.d_uspan_nenov_mrgn);
    	fn_userlog(c_ServiceName,"AFTER SPAN- NOV IS :%lf:",st_undrlyng_pstn.d_net_optn_val);
    	fn_userlog(c_ServiceName,"AFTER SPAN- Min. Margin IS :%lf:",d_min_mrgn);
		}

 		sprintf ( st_actn.c_ref_rmrks,"SPAN-SPAN-%s",
              st_actn.c_undrlyng);

    strcpy( c_narration_id , SPAN_MRGN_ADJ_ON_CHG_OF_MRGN_PRCNT);
	  c_dr_without_lmt_flg = DEBIT_TILL_LIMIT ;
		d_upd_amount = (-1) * st_undrlyng_pstn.d_span_wemult_mrgn;
    d_span_mrgn_reqd = st_undrlyng_pstn.d_span_wemult_mrgn;   /*** 3.0 ***/

		if ( d_upd_amount != 0 )
		{
			d_balance_amt  = 0.0;   /*** Ver 1.1 ***/

			i_returncode = fn_upd_spnlimits( c_ServiceName,
																		&st_actn,
																		&st_error_msg,
																		c_narration_id,
																		c_dr_without_lmt_flg,
																		d_upd_amount,
																		&d_balance_amt);
			if ( i_returncode != 0 )
			{
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					fn_errlog( c_ServiceName, "S31465",LIBMSG , c_err_msg );
					tpfree((char *)ptr_fml_Obuf);
					tpfree((char *)ptr_fml_Ibuf);
					return -1;
			}
			st_undrlyng_pstn.d_span_wemult_mrgn = st_undrlyng_pstn.d_span_wemult_mrgn + d_balance_amt;	/*** Ver 1.6 ***/
		}
		/*** st_undrlyng_pstn.d_span_wemult_mrgn = st_undrlyng_pstn.d_span_wemult_mrgn + d_balance_amt;		Commented in Ver 1.6 ***/

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"d_balance_amt in d_span_wemult_mrgn:%ld:",d_balance_amt);
		}

 		sprintf ( st_actn.c_ref_rmrks,"SPAN-EXPOSURE-%s",
              st_actn.c_undrlyng);

    strcpy( c_narration_id , EXPR_MRGN_ADJ_ON_CHG_OF_MRGN_PRCNT);

	  c_dr_without_lmt_flg = DEBIT_TILL_LIMIT ;

		/*** d_upd_amount = (-1) * st_undrlyng_pstn.d_eba_expr_mrgn;  commented By Swati ***/
		d_upd_amount = (-1) * d_expsr;
    d_expsr_mrgn_reqd = d_expsr;   /*** Ver 3.0 ***/

		d_balance_amt  = 0.0;		/*** Ver 1.6 ***/

		if ( d_upd_amount != 0 )
		{
			d_balance_amt  = 0.0;   /*** Ver 1.1 ***/

			i_returncode = fn_upd_spnlimits( c_ServiceName,
																		&st_actn,
																		&st_error_msg,
																		c_narration_id,
																		c_dr_without_lmt_flg,
																		d_upd_amount,
																		&d_balance_amt);
			if ( i_returncode != 0 )
			{
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					fn_errlog( c_ServiceName, "S31470",LIBMSG , c_err_msg );
					tpfree((char *)ptr_fml_Obuf);
					tpfree((char *)ptr_fml_Ibuf);
					return -1;
			}

		}
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"d_balance_amt in d_expsr :%ld:",d_balance_amt);
		}

		st_undrlyng_pstn.d_eba_expr_mrgn = d_expsr + d_balance_amt;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"before updating:st_undrlyng_pstn.d_initial_mrgn:%lf:",st_undrlyng_pstn.d_initial_mrgn);
			fn_userlog(c_ServiceName,"st_undrlyng_pstn.d_eba_expr_mrgn:%lf:",st_undrlyng_pstn.d_eba_expr_mrgn);
			fn_userlog(c_ServiceName,"st_undrlyng_pstn.d_span_wemult_mrgn:%lf:",st_undrlyng_pstn.d_span_wemult_mrgn);
		}

		st_undrlyng_pstn.d_initial_mrgn = st_undrlyng_pstn.d_span_wemult_mrgn + st_undrlyng_pstn.d_eba_expr_mrgn;
		
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"after updating:st_undrlyng_pstn.d_initial_mrgn:%lf:",st_undrlyng_pstn.d_initial_mrgn);
		}
      EXEC SQL
        UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
          SET  	FUS_INITIAL_MRGN 		= :st_undrlyng_pstn.d_initial_mrgn,
								FUS_SPAN_WEMULT_MRGN= :st_undrlyng_pstn.d_span_wemult_mrgn,
								FUS_EBA_EXPR_MRGN 	= :st_undrlyng_pstn.d_eba_expr_mrgn,
								FUS_USPAN_WENOV_MRGN= :st_undrlyng_pstn.d_uspan_wenov_mrgn,
								FUS_MULTIPLIER 			= :d_mltplr,
								FUS_USPAN_NENOV_MRGN= :st_undrlyng_pstn.d_uspan_nenov_mrgn,
								FUS_NET_OPTN_VAL 		= :st_undrlyng_pstn.d_net_optn_val,
								FUS_MTM_FLG 				= :st_undrlyng_pstn.c_mtm_flg,
								FUS_MIN_MRGN 				= :d_min_mrgn,
								FUS_REQD_INITIAL_MRGN= :st_undrlyng_pstn.d_reqd_initial_mrgn
        WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
        AND     FUS_UNDRLYNG        = :sql_undrlyng
				AND     FUS_XCHNG_CD        = :sql_xchng_cd;
			if(SQLCODE != 0 )
      {
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31475",SQLMSG , c_err_msg );
        tpfree((char *)ptr_fml_Obuf);
        tpfree((char *)ptr_fml_Ibuf);
        return -1;
      }
/*** ver 3.0 starts *********/
      EXEC SQL
         INSERT INTO FTM_FO_TYPE1MTM_MRGNRPT
         (
          FTM_REPORT_NO,
          FTM_CLM_MTCH_ACCNT,
          FTM_XCHNG_CD,
          FTM_INDSTK,
          FTM_UNDRLYNG,
          FTM_RPRT_TM_STMP,
          FTM_EBA_EXPR_MRGN_REQD,
          FTM_EBA_EXPR_MRGN_BLKD,
          FTM_SPAN_MRGN_REQD,
          FTM_SPAN_MRGN_BLKD
         )
         VALUES
         (
          :l_report_no,
          :sql_cln_mtch_accnt,
          :sql_xchng_cd,
          :st_undrlyng_pstn.c_indstk,
          :sql_undrlyng,
          sysdate,
          :d_expsr_mrgn_reqd,
          :st_undrlyng_pstn.d_eba_expr_mrgn,
          :d_span_mrgn_reqd,
          :st_undrlyng_pstn.d_span_wemult_mrgn
         );
      if(SQLCODE != 0 )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31480",SQLMSG , c_err_msg );
        tpfree((char *)ptr_fml_Obuf);
        tpfree((char *)ptr_fml_Ibuf);
        return -1;
      }
  /*** ver 3.0 ends ****/
  /** ver 2.5 starts ***/
  st_actn.l_report_no  = l_report_no;
  st_actn.c_ctgry_indstk = st_undrlyng_pstn.c_indstk;
  c_extra_update = 'M';
  i_returncode  = fn_cal_trg_prc( c_ServiceName ,  &st_actn ,c_extra_update,
                                      &st_error_msg  );

  if( i_returncode != 0 )
  {
        fn_errlog( c_ServiceName, "S31485",LIBMSG , c_err_msg );
        fn_userlog(c_ServiceName,"ERROR in fn_cal_trg_prc");
  }
  /*** ver 2.5 ends ***/

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
	{
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		fn_errlog ( c_ServiceName, "S31490", SQLMSG, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);
		tpfree((char *)ptr_fml_Ibuf);
		return FAILURE;
	}
   /*** Ver 3.3 Start ***/
      i_returncode = fn_upd_mrgn_reporting(st_undrlyng_pstn.c_cln_mtch_accnt,
                                    st_undrlyng_pstn.c_xchng_cd,
                                     c_ServiceName,
                                     c_err_msg
                                    );
      if( i_returncode != 0 )
      {
        fn_errlog(c_ServiceName, "S31495", LIBMSG, c_err_msg );
        return FAILURE;
      }
   /*** Ver 3.3 Ends ***/
  fn_userlog(c_ServiceName,"st_undrlyng_pstn.c_mtm_flg is test3 :%c:",st_undrlyng_pstn.c_mtm_flg);
  if(st_undrlyng_pstn.c_mtm_flg == 'O')
  {
	  i_ch_val = fn_cancel_pending_ordr(c_ServiceName,												 /**** 1.9 ****/
                           st_cntrct_pstn.c_cln_mtch_accnt ,
                           st_cntrct_pstn.c_xchng_cd,
                           st_cntrct_pstn.c_undrlyng,
                           c_expry_dt.arr,
                           st_cntrct_pstn.c_ctgry_indstk,
                           st_cntrct_pstn.c_exer_typ,
                           st_cntrct_pstn.c_opt_typ,
                           st_cntrct_pstn.l_strike_prc);
   if( i_ch_val !=0 )
   {
    /** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   **8 Ver 2.0 **/
    fn_errlog ( c_ServiceName, "S31500", SQLMSG, c_err_msg );
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return FAILURE;
   }
	}
	tpfree((char *)ptr_fml_Ibuf);				/*** ver 1.1 ***/
  tpfree((char *)ptr_fml_Obuf);				/*** ver 1.1 ***/

	return SUCCESS;
}

int fn_cal_PNL_deficit(char* c_ServiceName,
														 char* c_mtch_accnt,
														 char* c_xchng_cd,
														 char* c_undrlyng,
														 char* c_err_msg,
														 char  c_rpt_flg,
														 char  c_req_type	)
{

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  char c_tmp_rmrks [ 133 ] ;
  char c_inp_strng1[ 8000 ];
  char c_inp_strng11[ 8000 ];
  char c_inp_strng2[ 8000 ];
  char c_inp_strng22[ 8000 ];
  char c_inp_strng[ 16000 ];
  char c_op_strng[ 16000 ];
  char c_op_strng1[ 16000 ];
  char c_op_strng2[ 16000 ];
  char c_seq_num1[12000];
  char c_seq_num2[12000];
  char c_max_opn_qty[200];
  char c_min_opn_qty[200];
  char c_ltp[2000];
  char c_strk_prc[20];
  char c_mrgn_indctr[3];
  char c_opseq_num1[20];
  char c_opseq_num2[20];
  char c_mtch_accnt1[11];
  char c_mtch_accnt2[11];
  char c_spn_mrgn1[20];
  char c_spn_mrgn2[20];
  char c_nov1[20];
  char c_nov2[20];
  char c_total_mrgn1[20];
  char c_total_mrgn2[20];
	char c_pipe_id[3];
	char c_narration_id[4];
	char c_dr_without_lmt_flg;

  char *null_ptr  = 0;

  int i_returncode;
  int i_rtrn_cd1;
 	int i_trnsctn;
  int i_ch_val ;          /*** Ver 1.9 ***/
  int i_cntrct_opnpos = 0;/** ver 2.9 **/

  long  l_max_opn_qty = 0;
  long  l_min_opn_qty	= 0;
  long  l_temp_qty		= 0;
  long  l_prtfl_seq1	= 0;
  long  l_prtfl_seq2	= 0;
  long  li_len_tobuf	= 0;
  long  l_length1			= 0;
  long  l_length2			= 0;
  /*** long  l_strike_prc	= 0; *** Ver 1.1 ***/
  long  l_cntr  			= 0;
	long  l_basket_id		= 0;
  long li_grpid;                                   /*** Ver 1.2 ***/


  double d_diff_mrgn     = 0.0;
  double d_diff_pl			 = 0.0;
  double d_balance_amt	 = 0.0;
  double d_bal_to_apply	 = 0.0;
  double d_ltp					 = 0.0;
  double d_spn_mrgn1		 = 0.0;
  double d_spn_mrgn2     = 0.0;
  double d_nov1					 = 0.0;
  double d_nov2					 = 0.0;
  double d_total_mrgn1	 = 0.0;
  double d_total_mrgn2	 = 0.0;
	double d_total_mrgn		 = 0.0;
	double d_min_expsr		 = 0.0;
  double d_cntrct_pl    = 0.0;
  double d_ntnl_pl      = 0.0;
  double d_blckd_amnt   = 0.0;
  double d_thrshld_per  = 0.0;
	double d_undrlyng_notioanl_pnl  = 0.0;
	double d_mltplr =0.0;
	double d_expr= 0.0;
	double d_min_mrgn =  0.0;
	double d_intl_mrgn = 0.0;
	double d_available_mrgn=0.0;
	double d_diff_mrgn_pnl=0.0;
	double d_base_prc=0.0;
	double d_premium=0.0;
	double d_premium_temp=0.0;
	double d_span_wemult_mrgn_old;
  double d_uspan_wenov_mrgn_old;
  double d_uspan_nenov_mrgn_old;
  double d_net_optn_val_old;
	double d_intl_mrgn_new;
	double d_expsr = 0.0;
	double d_expsr_mrgn = 0.0;
	double d_min_expsr_mrgn = 0.0;
  double d_current_limit  = 0.0;                       /*** Ver 1.2 ***/


  char c_extra_update='\0'; /** ver 2.5 **/

  EXEC SQL BEGIN DECLARE SECTION; 

    sql_cursor     sys_cursor;
    char  sql_cln_mtch_accnt[11];
    char  sql_xchng_cd[4];
    char  sql_prd_typ;
    char  sql_cntrct_tag;
    char  sql_undrlyng[7];
		char  c_prcs_flg = '\0';                            /*** Ver 1.2 ***/
    char c_xchng_date[ 11+1 ];                        /*** Ver 1.2 ***/
    char c_rqst_type;                                 /*** Ver 1.2 ***/
    varchar c_expry_dt[LEN_DATE]; 
    varchar c_trd_dt[12]; 

    double d_mrgn_blkd = 0.0;

		struct st_fus_undrlyng_pstn st_undrlyng_pstn;
		struct st_fcp_cntrct_pstn st_cntrct_pstn;
	  struct st_pstn_actn st_actn;
		struct st_err_msg st_error_msg;

  EXEC SQL END DECLARE SECTION; 


	MEMSET(st_undrlyng_pstn);
	MEMSET(st_cntrct_pstn);
	MEMSET(st_actn);
	MEMSET(st_error_msg);


  strcpy( sql_cln_mtch_accnt,c_mtch_accnt);
  strcpy( sql_xchng_cd,c_xchng_cd);
  strcpy( sql_undrlyng,c_undrlyng);

	strcpy(st_actn.c_cln_mtch_accnt,c_mtch_accnt);
	strcpy(st_actn.c_xchng_cd,c_xchng_cd);
	strcpy(st_actn.c_undrlyng,c_undrlyng);
	strcpy(st_actn.c_user_id,"system");
	st_actn.l_session_id = 0L;
	
  fn_cpy_ddr ( st_actn.c_rout_crt );

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog( c_ServiceName, "S31505", LIBMSG, c_err_msg  );
    /** tpfree((char *)ptr_fml_Obuf);   Commented in Ver 2.0 ***/
    /** tpfree((char *)ptr_fml_Ibuf);        Commented in Ver 2.0 ***/
		return FAILURE;
  }

  /*i_returncode = fn_lock_usr( c_ServiceName, st_actn.c_cln_mtch_accnt ); Commented in Ver 3.2*/
  i_returncode = fn_lock_fno( c_ServiceName,  st_actn.c_cln_mtch_accnt ); /* Added in Ver 3.2 */
  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog( c_ServiceName, "S31510", LIBMSG, c_err_msg  );
		return FAILURE;
  }

	EXEC SQL
		SELECT  FUS_CLM_MTCH_ACCNT,
            FUS_XCHNG_CD,
            FUS_INDSTK,
            FUS_UNDRLYNG,
            FUS_UIBUY_QTY,
            FUS_UIBUY_VAL,
            FUS_UISELL_QTY,
            FUS_UISELL_VAL,
            FUS_UEXBUY_QTY,
            FUS_UEXBUY_VAL,
            FUS_UEXSELL_QTY,
            FUS_UEXSELL_VAL,
            FUS_UBUY_EXCTD_QTY,
            FUS_USELL_EXCTD_QTY,
            FUS_UOPNPSTN_FLW,
            FUS_UOPNPSTN_QTY,
            FUS_UOPNPSTN_VAL,
            FUS_UMTM_OPN_VAL,
            FUS_INITIAL_MRGN,
						FUS_SPAN_WEMULT_MRGN,
						FUS_EBA_EXPR_MRGN,
						FUS_USPAN_WENOV_MRGN,
						FUS_MULTIPLIER,
						FUS_USPAN_NENOV_MRGN,
						FUS_NET_OPTN_VAL,
            NVL(FUS_MIN_MRGN,0),
            NVL(FUS_MTM_FLG,'O'),
						FUS_BLCKD_PL,
						FUS_REQD_INITIAL_MRGN
    INTO    :st_undrlyng_pstn.c_cln_mtch_accnt,
            :st_undrlyng_pstn.c_xchng_cd,
            :st_undrlyng_pstn.c_indstk,
            :st_undrlyng_pstn.c_undrlyng,
            :st_undrlyng_pstn.l_uibuy_qty,
            :st_undrlyng_pstn.d_uibuy_val,
            :st_undrlyng_pstn.l_uisell_qty,
            :st_undrlyng_pstn.d_uisell_val,
            :st_undrlyng_pstn.l_uexbuy_qty,
            :st_undrlyng_pstn.d_uexbuy_val,
            :st_undrlyng_pstn.l_uexsell_qty,
            :st_undrlyng_pstn.d_uexsell_val,
            :st_undrlyng_pstn.l_ubuy_exctd_qty,
            :st_undrlyng_pstn.l_usell_exctd_qty,
            :st_undrlyng_pstn.c_uopnpstn_flw,
            :st_undrlyng_pstn.l_uopnpstn_qty,
            :st_undrlyng_pstn.d_uopnpstn_val,
            :st_undrlyng_pstn.d_umtm_opn_val,
            :st_undrlyng_pstn.d_initial_mrgn,
						:st_undrlyng_pstn.d_span_wemult_mrgn,
						:st_undrlyng_pstn.d_eba_expr_mrgn,
 					  :st_undrlyng_pstn.d_uspan_wenov_mrgn,
					  :st_undrlyng_pstn.d_multpr,
					  :st_undrlyng_pstn.d_uspan_nenov_mrgn,
					  :st_undrlyng_pstn.d_net_optn_val,
						:st_undrlyng_pstn.d_min_mrgn,
            :st_undrlyng_pstn.c_mtm_flg,
            :st_undrlyng_pstn.d_blckd_pl,
            :st_undrlyng_pstn.d_reqd_initial_mrgn
    FROM    FUS_FO_UNDRLYNG_SPN_PSTN
    WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
    AND     FUS_XCHNG_CD        = :sql_xchng_cd
    AND     FUS_UNDRLYNG        = :sql_undrlyng
		AND     (FUS_UOPNPSTN_QTY != 0 OR FUS_INITIAL_MRGN != 0);   /*** Ver 1.1 ***/ 
		if ( (SQLCODE != 0 ) && (SQLCODE !=NO_DATA_FOUND)) /** ver 2.9 **/
		{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			fn_errlog( c_ServiceName, "S31515",SQLMSG , c_err_msg );
			/** (tpfree((char *)ptr_fml_Obuf);   ** ver 2.0 **/
			/** tpfree((char *)ptr_fml_Ibuf);          ** ver 2.0 **/
			return -1;
		}

/** ver 2.9 starts ***/
    if( SQLCODE == NO_DATA_FOUND)
    {
     i_cntrct_opnpos = 0;

     EXEC SQL
     SELECT count(1)
     INTO  :i_cntrct_opnpos
     FROM FCP_FO_SPN_CNTRCT_PSTN WHERE FCP_OPNPSTN_QTY<>0
     AND FCP_CLM_MTCH_ACCNT=:sql_cln_mtch_accnt
     AND FCP_XCHNG_CD=:sql_xchng_cd
     AND FCP_UNDRLYNG=:sql_undrlyng
     AND ( (FCP_PRDCT_TYP='O' AND FCP_OPNPSTN_FLW!='B' ) OR FCP_PRDCT_TYP !='O');
    if ( (SQLCODE != 0 ) )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S31520", SQLMSG, c_err_msg  );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return FAILURE;
    }
     if( i_cntrct_opnpos > 0 )
     {
  EXEC SQL	
    SELECT  FUS_CLM_MTCH_ACCNT,
            FUS_XCHNG_CD,
            FUS_INDSTK,
            FUS_UNDRLYNG,
            FUS_UIBUY_QTY,
            FUS_UIBUY_VAL,
            FUS_UISELL_QTY,
            FUS_UISELL_VAL,
            FUS_UEXBUY_QTY,
            FUS_UEXBUY_VAL,
            FUS_UEXSELL_QTY,
            FUS_UEXSELL_VAL,
            FUS_UBUY_EXCTD_QTY,
            FUS_USELL_EXCTD_QTY,
            FUS_UOPNPSTN_FLW,
            FUS_UOPNPSTN_QTY,
            FUS_UOPNPSTN_VAL,
            FUS_UMTM_OPN_VAL,
            FUS_INITIAL_MRGN,
            FUS_SPAN_WEMULT_MRGN,
            FUS_EBA_EXPR_MRGN,
            FUS_USPAN_WENOV_MRGN,
            FUS_MULTIPLIER,
            FUS_USPAN_NENOV_MRGN,
            FUS_NET_OPTN_VAL,
            NVL(FUS_MIN_MRGN,0),
            NVL(FUS_MTM_FLG,'O'),
            FUS_BLCKD_PL,
            FUS_REQD_INITIAL_MRGN
    INTO    :st_undrlyng_pstn.c_cln_mtch_accnt,
            :st_undrlyng_pstn.c_xchng_cd,
            :st_undrlyng_pstn.c_indstk,
            :st_undrlyng_pstn.c_undrlyng,
            :st_undrlyng_pstn.l_uibuy_qty,
            :st_undrlyng_pstn.d_uibuy_val,
            :st_undrlyng_pstn.l_uisell_qty,
            :st_undrlyng_pstn.d_uisell_val,
            :st_undrlyng_pstn.l_uexbuy_qty,
            :st_undrlyng_pstn.d_uexbuy_val,
            :st_undrlyng_pstn.l_uexsell_qty,
            :st_undrlyng_pstn.d_uexsell_val,
            :st_undrlyng_pstn.l_ubuy_exctd_qty,
            :st_undrlyng_pstn.l_usell_exctd_qty,
            :st_undrlyng_pstn.c_uopnpstn_flw,
            :st_undrlyng_pstn.l_uopnpstn_qty,
            :st_undrlyng_pstn.d_uopnpstn_val,
            :st_undrlyng_pstn.d_umtm_opn_val,
            :st_undrlyng_pstn.d_initial_mrgn,
            :st_undrlyng_pstn.d_span_wemult_mrgn,
            :st_undrlyng_pstn.d_eba_expr_mrgn,
            :st_undrlyng_pstn.d_uspan_wenov_mrgn,
            :st_undrlyng_pstn.d_multpr,
            :st_undrlyng_pstn.d_uspan_nenov_mrgn,
            :st_undrlyng_pstn.d_net_optn_val,
            :st_undrlyng_pstn.d_min_mrgn,
            :st_undrlyng_pstn.c_mtm_flg,
            :st_undrlyng_pstn.d_blckd_pl,
            :st_undrlyng_pstn.d_reqd_initial_mrgn
    FROM    FUS_FO_UNDRLYNG_SPN_PSTN
    WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
    AND     FUS_XCHNG_CD        = :sql_xchng_cd
    AND     FUS_UNDRLYNG        = :sql_undrlyng;
    if  (SQLCODE != 0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S31525", SQLMSG, c_err_msg  );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return FAILURE;
    }
   }
   else
   {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S31530", SQLMSG, c_err_msg  );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return FAILURE;
   }
  }
/** ver 2.9 ends ***/

	
		d_span_wemult_mrgn_old = st_undrlyng_pstn.d_span_wemult_mrgn;
    d_uspan_wenov_mrgn_old = st_undrlyng_pstn.d_uspan_wenov_mrgn;
    d_uspan_nenov_mrgn_old = st_undrlyng_pstn.d_uspan_nenov_mrgn;
    d_net_optn_val_old     = st_undrlyng_pstn.d_net_optn_val;			

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"BEFORE SPAN- (A+B)Initial Margin IS :%lf:",st_undrlyng_pstn.d_initial_mrgn);
    	fn_userlog(c_ServiceName,"BEFORE SPAN- (A=C*D)SPAN Margin with Eff of Multiplier is:%lf:",st_undrlyng_pstn.d_span_wemult_mrgn);
    	fn_userlog(c_ServiceName,"BEFORE SPAN- (B)Exposure  IS :%lf:",st_undrlyng_pstn.d_eba_expr_mrgn);
    	fn_userlog(c_ServiceName,"BEFORE SPAN- (C)SPAN MARGIN WITH EFFECT OF NOV IS :%lf:",st_undrlyng_pstn.d_uspan_wenov_mrgn);
    	fn_userlog(c_ServiceName,"BEFORE SPAN- (D)Multiplier IS :%lf:",st_undrlyng_pstn.d_multpr);
    	fn_userlog(c_ServiceName,"BEFORE SPAN- SPAN MARGIN WITHOUT EFFECT OF NOV IS :%lf:",st_undrlyng_pstn.d_uspan_nenov_mrgn);
    	fn_userlog(c_ServiceName,"BEFORE SPAN- NOV IS :%lf:",st_undrlyng_pstn.d_net_optn_val);
  
    	fn_userlog(c_ServiceName,"BEFORE SPAN- Min. Margin IS :%lf:",st_undrlyng_pstn.d_min_mrgn);
	
			fn_userlog(c_ServiceName,"Match A/C is :%s:",sql_cln_mtch_accnt);
			fn_userlog(c_ServiceName,"Match A/C is :%s:",sql_xchng_cd);
			fn_userlog(c_ServiceName,"Match A/C is :%s:",sql_undrlyng);

		}
  /** Prepare a list of contracts from contract position table **/
  EXEC SQL ALLOCATE :sys_cursor; 

    EXEC SQL EXECUTE
      BEGIN
         OPEN :sys_cursor FOR
          SELECT  FCP_CLM_MTCH_ACCNT,
                  FCP_XCHNG_CD,
                  FCP_PRDCT_TYP,
                  FCP_INDSTK,
                  FCP_UNDRLYNG,
                  TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
                  FCP_EXER_TYP,
                  FCP_STRK_PRC,
                  FCP_OPT_TYP,
                  FCP_IBUY_QTY,
                  FCP_IBUY_ORD_VAL,
                  FCP_ISELL_QTY,
                  FCP_ISELL_ORD_VAL,
                  FCP_EXBUY_QTY,
                  FCP_EXBUY_ORD_VAL,
                  FCP_EXSELL_QTY,
                  FCP_EXSELL_ORD_VAL,
                  FCP_BUY_EXCTD_QTY,
                  FCP_SELL_EXCTD_QTY,
                  FCP_OPNPSTN_FLW,
                  FCP_OPNPSTN_QTY,
                  FCP_OPNPSTN_VAL,
                  FCP_MTM_OPN_VAL,
                  FCP_OPT_PREMIUM
            FROM  FCP_FO_SPN_CNTRCT_PSTN
            WHERE FCP_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
            AND   FCP_XCHNG_CD        = :sql_xchng_cd
            AND   FCP_UNDRLYNG        = :sql_undrlyng
						AND   ( FCP_IBUY_QTY <> 0 OR FCP_ISELL_QTY <> 0 OR FCP_EXBUY_QTY <> 0 OR FCP_EXSELL_QTY <> 0 OR FCP_OPNPSTN_QTY <> 0 OR FCP_OPT_PREMIUM <> 0 ) /*** Ver 1.1 ***/
            ORDER BY FCP_EXPRY_DT ASC;
          END;
        END-EXEC;

    if ( SQLCODE != 0 )
    {
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      EXEC SQL FREE :sys_cursor; 
      fn_errlog ( c_ServiceName, "S31535", SQLMSG, c_err_msg );
      return -1;
    }


    while ( 1 )
    {
			 	if(DEBUG_MSG_LVL_3)
				{
			 		fn_userlog(c_ServiceName," In while loop.");	
				}

			 d_expsr_mrgn      = 0.0;
    	 d_min_expsr_mrgn  = 0.0;
			 d_cntrct_pl			 = 0.0;			/*** Ver 1.2 ***/		
				
       MEMSET(c_expry_dt);

       EXEC SQL  FETCH  :sys_cursor
                 INTO   :st_cntrct_pstn.c_cln_mtch_accnt,
                        :st_cntrct_pstn.c_xchng_cd,
                        :st_cntrct_pstn.c_prd_typ,
                        :st_cntrct_pstn.c_ctgry_indstk,
                        :st_cntrct_pstn.c_undrlyng,
                        :c_expry_dt,
                        :st_cntrct_pstn.c_exer_typ,
                        :st_cntrct_pstn.l_strike_prc,
                        :st_cntrct_pstn.c_opt_typ,
                       	:st_cntrct_pstn.l_ibuy_qty,
                        :st_cntrct_pstn.d_ibuy_ord_val,
                        :st_cntrct_pstn.l_isell_qty,
                        :st_cntrct_pstn.d_isell_ord_val,
                        :st_cntrct_pstn.l_exbuy_qty,
                        :st_cntrct_pstn.d_exbuy_ord_val,
                        :st_cntrct_pstn.l_exsell_qty,
                        :st_cntrct_pstn.d_exsell_ord_val,
                        :st_cntrct_pstn.l_buy_exctd_qty,
                        :st_cntrct_pstn.l_sell_exctd_qty,
                        :st_cntrct_pstn.c_opnpstn_flw,
                        :st_cntrct_pstn.l_opnpstn_qty,
                        :st_cntrct_pstn.d_opnpstn_val,
                        :st_cntrct_pstn.d_mtm_opn_val,
                        :d_premium_temp;

      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
					EXEC SQL CLOSE :sys_cursor; 
					EXEC SQL FREE :sys_cursor;
          break;
        }

    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        EXEC SQL CLOSE :sys_cursor; 
        EXEC SQL FREE :sys_cursor; 
        fn_errlog ( c_ServiceName, "S31540", SQLMSG, c_err_msg );
        return -1;
      }

      SETNULL( c_expry_dt );
      strcpy ( st_cntrct_pstn.c_expry_dt, (char *) c_expry_dt.arr );
      rtrim(st_cntrct_pstn.c_xchng_cd);
      rtrim(st_cntrct_pstn.c_undrlyng);
      rtrim(st_cntrct_pstn.c_expry_dt);
		

			/*** Added By Swati 11-Jan-2012 ***/
			EXEC SQL
    		SELECT  FCB_UNDRLYNG_BSKT_ID
    		INTO    :l_basket_id
   			FROM    FCB_FO_CLN_BSKT_ALLTD
    		WHERE   FCB_CLN_LVL = ( SELECT  CLM_CLNT_LVL
                         		    FROM    CLM_CLNT_MSTR
                            		WHERE   CLM_MTCH_ACCNT = :sql_cln_mtch_accnt);
  		if ( SQLCODE != 0 )
 		 	{
    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    		fn_errlog(c_ServiceName,"S31545",SQLMSG, c_err_msg);
    		/*** tpfree((char *)ptr_fml_Obuf);   ** ver 2.0 ***/
        EXEC SQL CLOSE :sys_cursor;   /** ver 2.0 **/
        EXEC SQL FREE :sys_cursor;		/** ver 2.0 **/
    		return  FAILURE;
  		}	
		
			/*** Added By Swati Ends ***/		
	
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog ( c_ServiceName, "st_cntrct_pstn.c_prd_typ |%c|",st_cntrct_pstn.c_prd_typ);
        fn_userlog ( c_ServiceName, "st_cntrct_pstn.c_undrlyng|%s|",st_cntrct_pstn.c_undrlyng);
        fn_userlog ( c_ServiceName, "st_cntrct_pstn.c_expry_dt|%s|",st_cntrct_pstn.c_expry_dt);
        fn_userlog ( c_ServiceName, "st_cntrct_pstn.c_exer_typ|%c|",st_cntrct_pstn.c_exer_typ);
        fn_userlog ( c_ServiceName, "st_cntrct_pstn.c_opt_typ |%c|",st_cntrct_pstn.c_opt_typ);
        fn_userlog ( c_ServiceName, "st_cntrct_pstn.l_strike_prc|%ld|",st_cntrct_pstn.l_strike_prc);
			}

			i_returncode  = fn_cal_expsr  ( c_ServiceName,
                                      st_cntrct_pstn,
                                      l_basket_id,
                                      &d_expsr_mrgn,
                                      &d_min_expsr_mrgn,
                                      &d_mltplr,
                                      c_err_msg
                                    );

      if ( i_returncode != 0 )
      {
         fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   /** ver 2.0 **/
         fn_errlog(c_ServiceName, "S31550", LIBMSG, c_err_msg );
         EXEC SQL CLOSE :sys_cursor;
         EXEC SQL FREE :sys_cursor;    /** ver 2.0 **/
         /** tpfree((char *)ptr_fml_Obuf);  *** ver 2.0 ***/
         /** tpfree((char *)ptr_fml_Ibuf);   *** ver 2.0 ***/
         return -1;
      }

			EXEC SQL
			SELECT  	NVL( FTQ_LST_TRD_PRC ,0 ),   /*** Ver 1.1 ***/ 
							  NVL( FTQ_CLS_PRC , 0)        /*** Ver 1.1 ***/
        INTO    :d_ltp,
								:d_base_prc
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_PRDCT_TYP = :st_cntrct_pstn.c_prd_typ
				AND     FTQ_XCHNG_CD  = :st_cntrct_pstn.c_xchng_cd     /*** Ver 1.3 ***/
				AND     FTQ_UNDRLYNG  = :st_cntrct_pstn.c_undrlyng
        AND     FTQ_EXPRY_DT  = :st_cntrct_pstn.c_expry_dt
        AND     FTQ_EXER_TYP  = :st_cntrct_pstn.c_exer_typ
        AND     FTQ_OPT_TYP   = :st_cntrct_pstn.c_opt_typ
        AND     FTQ_STRK_PRC  = :st_cntrct_pstn.l_strike_prc;
     
			 if(SQLCODE  !=  0 )
      {
    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog ( c_ServiceName, "S31555", SQLMSG, c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;    /** ver 2.0 **/
        /** tpfree((char *)ptr_fml_Obuf);  *** ver 2.0 ***/
        /** tpfree((char *)ptr_fml_Ibuf);   *** ver 2.0 ***/
        return -1;
      }

     	if ( st_cntrct_pstn.l_opnpstn_qty != 0 )     /***  Profit / Loss Calculation Contractwise  ***/
      {
        if( st_cntrct_pstn.l_opnpstn_qty > 0 && st_cntrct_pstn.c_prd_typ == 'F')
        {
          d_cntrct_pl = ( d_ltp * (double) st_cntrct_pstn.l_opnpstn_qty ) -  st_cntrct_pstn.d_opnpstn_val;
        }
        else if ( st_cntrct_pstn.l_opnpstn_qty < 0 )
        {
					if(st_cntrct_pstn.c_prd_typ == 'F')
					{
          	d_cntrct_pl = fabs(st_cntrct_pstn.d_opnpstn_val) -  ( d_ltp * (double) abs(st_cntrct_pstn.l_opnpstn_qty) ) ;
					}
					else if (st_cntrct_pstn.c_prd_typ == 'O')
					{
 						d_cntrct_pl = (double)abs(st_cntrct_pstn.l_opnpstn_qty) * ( d_base_prc  - d_ltp );       	
					}
        }
      }

    	d_undrlyng_notioanl_pnl = d_undrlyng_notioanl_pnl + d_cntrct_pl ;

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_expry_dt.arr );
        fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntrct_pstn.l_ibuy_qty );
        fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntrct_pstn.d_ibuy_ord_val );
        fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntrct_pstn.l_isell_qty );
        fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntrct_pstn.d_isell_ord_val );
        fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntrct_pstn.l_exbuy_qty );
        fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntrct_pstn.d_exbuy_ord_val );
        fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntrct_pstn.l_exsell_qty );
        fn_userlog ( c_ServiceName, "EXCH sell val      :%lf:", st_cntrct_pstn.d_exsell_ord_val );
        fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntrct_pstn.l_buy_exctd_qty );
        fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntrct_pstn.l_sell_exctd_qty );
        fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntrct_pstn.l_opnpstn_qty );
        fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntrct_pstn.d_opnpstn_val );
        fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntrct_pstn.d_mtm_opn_val );
     }

		d_premium = d_premium + d_premium_temp;
		d_min_expsr = d_min_expsr_mrgn  + d_min_expsr ;
    d_expsr     = d_expsr_mrgn  + d_expsr ;

  }/* END OF WHILE LOOP */

		/* Type Casted by Mahesh for 1 paisa issue */
		d_undrlyng_notioanl_pnl = ( long long )d_undrlyng_notioanl_pnl;

		st_actn.c_prd_typ = 'F'; /**Temporarily hardcoded **/

    i_returncode  = fn_cal_mrgn ( c_ServiceName,
                                  st_undrlyng_pstn.d_uspan_wenov_mrgn,
                                  d_mltplr,
                                  d_expsr,
																	d_min_expsr,
                                  &d_min_mrgn,
                                  &d_intl_mrgn,
                                  c_err_msg
                                );

    if ( i_returncode !=  0 )
    {
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			fn_errlog ( c_ServiceName, "S31560", SQLMSG, c_err_msg );
      /** tpfree((char *)ptr_fml_Obuf);  *** ver 2.0 ***/
      /** tpfree((char *)ptr_fml_Ibuf);   *** ver 2.0 ***/
			return FAILURE;
    }
		/* Type Casted by Mahesh for 1 paisa issue */
		d_intl_mrgn = ( long long )d_intl_mrgn;
		st_undrlyng_pstn.d_span_wemult_mrgn = ( long long )st_undrlyng_pstn.d_uspan_wenov_mrgn * (d_mltplr);

		if(DEBUG_MSG_LVL_0)
		{
    	fn_userlog(c_ServiceName,"AFTER SPAN- (A+B)Initial Margin IS :%lf:",d_intl_mrgn);
    	fn_userlog(c_ServiceName,"AFTER SPAN- (A=C*D)SPAN Margin with Eff of Multiplier is:%lf:",st_undrlyng_pstn.d_span_wemult_mrgn);
    	fn_userlog(c_ServiceName,"AFTER SPAN- (B)Exposure  IS :%lf:",d_expr);
    	fn_userlog(c_ServiceName,"AFTER SPAN- (C)SPAN MARGIN WITH EFFECT OF NOV IS :%lf:",st_undrlyng_pstn.d_uspan_wenov_mrgn);
    	fn_userlog(c_ServiceName,"AFTER SPAN- (D)Multiplier IS :%lf:",d_mltplr);
    	fn_userlog(c_ServiceName,"AFTER SPAN- SPAN MARGIN WITHOUT EFFECT OF NOV IS :%lf:",st_undrlyng_pstn.d_uspan_nenov_mrgn);
    	fn_userlog(c_ServiceName,"AFTER SPAN- NOV IS :%lf:",st_undrlyng_pstn.d_net_optn_val);
    	fn_userlog(c_ServiceName,"AFTER SPAN- Min. Margin IS :%lf:",d_min_mrgn);
		}

/*************************************************************************************************************************
Intraday Process is as follows:
a. Get SM from SPAN BOX.
b. (Blocked IM +/- Notional P&L) = Available Margin.
c. Compute Threshold  ( New SPAN Margin + MEM)
b. Compare available Margin. Vs Threshold Margin(As Defined above)
If Available Margin is Higher : No Action come out of IMTM Loop.
If Threshold Margin is Higher : Do as below
b. Compute EM and then new IM.
c. Compute deficit Margin Required DM =  (New IM  Blocked IM)
d. Calculate P&L based on Current LTP in EBA Vs Weighted price and see if there 
is deficit Loss (DL= ( New Notional Loss - Old Blocked Loss) 
e. TD(Total Deficit) = DM + DL
f.  Demand TD when Limit 
i.  If Demand Not met : Mark the position to Square off. 
*************************************************************************************************************************/
		st_undrlyng_pstn.c_mtm_flg  = 'O';

		d_available_mrgn = st_undrlyng_pstn.d_initial_mrgn + d_undrlyng_notioanl_pnl +  st_undrlyng_pstn.d_blckd_pl;
		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"d_available_mrgn:%lf:",d_available_mrgn);
			fn_userlog(c_ServiceName,"st_undrlyng_pstn.d_initial_mrgn:%lf:",st_undrlyng_pstn.d_initial_mrgn);
			fn_userlog(c_ServiceName,"d_undrlyng_notioanl_pnl:%lf:",d_undrlyng_notioanl_pnl);
			fn_userlog(c_ServiceName,"st_undrlyng_pstn.d_blckd_pl:%lf:",st_undrlyng_pstn.d_blckd_pl);
		}

		if ( d_available_mrgn >= d_min_mrgn )
		{
  fn_userlog(c_ServiceName,"st_undrlyng_pstn.c_mtm_flg is test1 :%c:",st_undrlyng_pstn.c_mtm_flg);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			fn_userlog(c_ServiceName,"Out of Loop, Success: No mark to market");
			return 0;
		}
		else
		{
			/*st_undrlyng_pstn.d_reqd_initial_mrgn = st_undrlyng_pstn.d_initial_mrgn; */
   		d_diff_mrgn_pnl = -1 * (d_intl_mrgn - d_available_mrgn);

			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog ( c_ServiceName, "Difference in MRGN :%lf:", d_diff_mrgn_pnl );
			}

			sprintf ( st_actn.c_ref_rmrks,"SPAN-%s", st_actn.c_undrlyng);

			strcpy( c_narration_id , NOTIONAL_LOSS_ADJ_ON_CHG_OF_PNL);
			c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT ;

			if ( d_diff_mrgn_pnl != 0 )
			{
				d_balance_amt  = 0.0;   /*** Ver 1.1 ***/

				i_returncode = fn_upd_spnlimits( c_ServiceName,
																			&st_actn,
																			&st_error_msg,
																			c_narration_id,
																			c_dr_without_lmt_flg,
																			d_diff_mrgn_pnl,
																			&d_balance_amt);

				if ( i_returncode != 0 )
				{
        	switch ( i_returncode )
					{
						case INSUFFICIENT_LIMITS :
							d_limit_MTM = d_balance_amt ;
							fn_errlog(c_ServiceName,"B28558",DEFMSG,c_err_msg);
							st_undrlyng_pstn.c_mtm_flg = 'M';
							fn_userlog(c_ServiceName ," return to called function");	
							break;

						default :
							break;
        	}
      	}
				d_intl_mrgn_new = d_intl_mrgn + d_balance_amt;
			}

			if(DEBUG_MSG_LVL_3)
			{	
				fn_userlog(c_ServiceName ," Transaction Aborted .");
			}

			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog ( c_ServiceName, "st_undrlyng_pstn.c_mtm_flg:%c:", st_undrlyng_pstn.c_mtm_flg);
      	fn_userlog ( c_ServiceName, "c_rpt_flg                 :%c:", c_rpt_flg);
			}
			
			/*** if ( st_undrlyng_pstn.c_mtm_flg == 'O' && c_rpt_flg == 'Y')	Commented in ver 1.4 ***/

			if ( st_undrlyng_pstn.c_mtm_flg == 'O' && c_req_type == 'R' ) 		/*** Added in ver 1.4 ***/
  		{
  		  fn_userlog(c_ServiceName," Called for Report And MTM Flag Is |%c|",st_undrlyng_pstn.c_mtm_flg);
    		return 0;
 			}

			i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
			if ( i_trnsctn == -1 )
			{
				fn_errlog ( c_ServiceName, "S31565", SQLMSG, c_err_msg );
        /** tpfree((char *)ptr_fml_Obuf);  *** ver 2.0 ***/
        /** tpfree((char *)ptr_fml_Ibuf);   *** ver 2.0 ***/
				return FAILURE;
			}

			/*i_returncode = fn_lock_usr( c_ServiceName, st_actn.c_cln_mtch_accnt ); Commenetd in Ver 3.2*/
      i_returncode = fn_lock_fno( c_ServiceName,  st_actn.c_cln_mtch_accnt ); /* Added in Ver 3.2 */
			if ( i_returncode == -1 )
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog ( c_ServiceName, "S31570", SQLMSG, c_err_msg );
        /** tpfree((char *)ptr_fml_Obuf);  *** ver 2.0 ***/
        /** tpfree((char *)ptr_fml_Ibuf);   *** ver 2.0 ***/
				return FAILURE;
			}

			if(st_undrlyng_pstn.c_mtm_flg == 'O' )
			{
					d_diff_mrgn = st_undrlyng_pstn.d_initial_mrgn - d_intl_mrgn;

					if(DEBUG_MSG_LVL_0)
					{
						fn_userlog ( c_ServiceName, "Difference in MRGN :%lf:", d_diff_mrgn );
					}

					sprintf ( st_actn.c_ref_rmrks,"SPAN-%s", st_actn.c_undrlyng);

					strcpy( c_narration_id , TRDMRGN_Adj_ON_CHG_OF_PNL);
					c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT ;

					if ( d_diff_mrgn != 0 )
					{
						d_balance_amt  = 0.0;   /*** Ver 1.1 ***/

						i_returncode = fn_upd_spnlimits( c_ServiceName,
																					&st_actn,
																					&st_error_msg,
																					c_narration_id,
																					c_dr_without_lmt_flg,
																					d_diff_mrgn,
																					&d_balance_amt);

						if ( i_returncode != 0 )
						{			
								/**This loop will be executed only in caseof system failure **/
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								fn_errlog ( c_ServiceName, "S31575", SQLMSG, c_err_msg );
         				/** tpfree((char *)ptr_fml_Obuf);  *** ver 2.0 ***/
         				/** tpfree((char *)ptr_fml_Ibuf);   *** ver 2.0 ***/
								return FAILURE;
						}
				 	}

					d_diff_pl = st_undrlyng_pstn.d_blckd_pl + d_undrlyng_notioanl_pnl;
					strcpy( c_narration_id , NOTIONAL_LOSS_ADJ_ON_CHG_OF_PNL );
					c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;

					if ( d_diff_pl != 0 )
					{
							d_balance_amt  = 0.0;   /*** Ver 1.1 ***/

							i_returncode = fn_upd_spnlimits( c_ServiceName,
																						&st_actn,
																						&st_error_msg,
																						c_narration_id,
																						c_dr_without_lmt_flg,
																						d_diff_pl,
																						&d_balance_amt);
							if ( i_returncode != 0 )
							{
								/**This loop will be executed only in caseof system failure **/
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									fn_errlog ( c_ServiceName, "S31580", SQLMSG, c_err_msg );
         					/** tpfree((char *)ptr_fml_Obuf);  *** ver 2.0 ***/
         					/** tpfree((char *)ptr_fml_Ibuf);   *** ver 2.0 ***/
									return FAILURE;
							}
					}

					EXEC SQL
						UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
						SET  	FUS_INITIAL_MRGN 		= :d_intl_mrgn,
									FUS_SPAN_WEMULT_MRGN= :st_undrlyng_pstn.d_span_wemult_mrgn,
									FUS_EBA_EXPR_MRGN 	= :d_expsr_mrgn,
									FUS_USPAN_WENOV_MRGN= :st_undrlyng_pstn.d_uspan_wenov_mrgn,
									FUS_MULTIPLIER 			= :d_mltplr,
									FUS_USPAN_NENOV_MRGN= :st_undrlyng_pstn.d_uspan_nenov_mrgn,
									FUS_NET_OPTN_VAL 		= :st_undrlyng_pstn.d_net_optn_val,
									FUS_MTM_FLG 				= :st_undrlyng_pstn.c_mtm_flg,
									FUS_MIN_MRGN 				= :d_min_mrgn,
									FUS_BLCKD_PL				= (-1) * :d_undrlyng_notioanl_pnl,
									FUS_NTNL_PL					= :d_undrlyng_notioanl_pnl
					WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
					AND     FUS_UNDRLYNG        = :sql_undrlyng
					AND     FUS_XCHNG_CD        = :sql_xchng_cd; 
				if(SQLCODE != 0)
				{
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					fn_errlog ( c_ServiceName, "S31585", SQLMSG, c_err_msg );
          /** tpfree((char *)ptr_fml_Obuf);  *** ver 2.0 ***/
          /** tpfree((char *)ptr_fml_Ibuf);   *** ver 2.0 ***/
					return FAILURE;
				}

			}
			else if(st_undrlyng_pstn.c_mtm_flg == 'M')
			{   
				
				if( c_rpt_flg == 'Y')
        {
				  if(DEBUG_MSG_LVL_3)
					{
						fn_userlog ( c_ServiceName," Insertoing data in SIR");
						fn_userlog ( c_ServiceName,"st_undrlyng_pstn.d_reqd_initial_mrgn  |%lf|",st_undrlyng_pstn.d_reqd_initial_mrgn);
						fn_userlog ( c_ServiceName,"d_intl_mrgn                           |%lf|",d_intl_mrgn);
						fn_userlog ( c_ServiceName,"st_undrlyng_pstn.d_initial_mrgn       |%lf|",st_undrlyng_pstn.d_initial_mrgn);
						fn_userlog ( c_ServiceName,"d_intl_mrgn_new                       |%lf|",d_intl_mrgn_new);
						fn_userlog ( c_ServiceName,"d_span_wemult_mrgn_old                |%lf|",d_span_wemult_mrgn_old);
						fn_userlog ( c_ServiceName,"st_undrlyng_pstn.d_uspan_wenov_mrgn   |%lf|",st_undrlyng_pstn.d_uspan_wenov_mrgn);
					}
			
					/** Ver 1.2 Starts***/

          MEMSET(c_xchng_date);

          EXEC SQL
            SELECT  EXG_NXT_TRD_DT
            INTO    :c_xchng_date
            FROM    EXG_XCHNG_MSTR
            WHERE   EXG_XCHNG_CD = :c_xchng_cd;

          if( (SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ) )
          {
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            fn_errlog ( c_ServiceName, "S31590", SQLMSG, c_err_msg );
         		/** tpfree((char *)ptr_fml_Obuf);  *** ver 2.0 ***/
         		/** tpfree((char *)ptr_fml_Ibuf);   *** ver 2.0 ***/
            return FAILURE;
          }

          c_rqst_type = LIMIT_X ;
          li_grpid  = 0 ;

          EXEC SQL
            EXECUTE
              BEGIN
                  LIMIT_CAL
                  ( :c_mtch_accnt,
                    :c_xchng_date,
                    :c_rqst_type,
                    :li_grpid,
                    :c_xchng_cd,
                    :d_current_limit,
                    :i_returncode
                  );
              END;
          END-EXEC;

					 if ( i_returncode == -1 )
          {
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            fn_errlog ( c_ServiceName, "S31595", SQLMSG, c_err_msg );
         		/** tpfree((char *)ptr_fml_Obuf);  *** ver 2.0 ***/
         		/** tpfree((char *)ptr_fml_Ibuf);   *** ver 2.0 ***/
            return FAILURE;
          }

          fn_userlog(c_ServiceName,"Limit for Match Account|%s|is |%lf|",st_undrlyng_pstn.c_cln_mtch_accnt,d_current_limit);

          if( c_req_type == 'M')
          {
            c_prcs_flg ='M';
          }
          else
          {
            c_prcs_flg ='R';
          }
          /*** Ver 1.2 ****/

          EXEC SQL
          INSERT INTO SIR_SPN_IMTM_REP
                  (
                      SIR_REPORT_NO,
                      SIR_CLM_MTCH_ACCNT,
                      SIR_XCHNG_CD,
                      SIR_INDSTK,
                      SIR_UNDRLYNG,
                      SIR_MTM_FLG,
                      SIR_RPRT_TM_STMP,
                      SIR_OPNPSTN_FLW,
                      SIR_OPNPSTN_QTY,
                      SIR_OPNPSTN_VAL,
                      SIR_MTM_OPN_VAL,
											SIR_REQD_INTL_MRGN_OLD,
                      SIR_REQD_INTL_MRGN_NEW,
                      SIR_INITIAL_MRGN_OLD,
                      SIR_INITIAL_MRGN_NEW,
                      SIR_SPAN_WEMULT_MRGN_OLD,
                      SIR_SPAN_WEMULT_MRGN_NEW,
                      SIR_USPAN_WENOV_MRGN_OLD,
                      SIR_USPAN_WENOV_MRGN_NEW,
                      SIR_USPAN_NENOV_MRGN_OLD,
                      SIR_USPAN_NENOV_MRGN_NEW,
                      SIR_MIN_MRGN_OLD,
                      SIR_MIN_MRGN_NEW,
                      SIR_NET_OPTN_VAL_OLD,
                      SIR_NET_OPTN_VAL_NEW,
											SIR_ADD_MRGN_VAL_NEW,
                      SIR_EBA_EXPR_MRGN_OLD,
											SIR_EBA_EXPR_MRGN_NEW,
                      SIR_NTNL_PL,
                      SIR_BLCKD_PL,
                      SIR_AVLBL_MRGN,
									  	SIR_SPN_PRC_FLG,                                    /** Added in Ver 1.2 ***/
                      SIR_SPN_CRRNT_LMT                                   /** Added in Ver 1.2 ***/
                  )
          VALUES	
									(
                      :l_report_no,
                      :st_undrlyng_pstn.c_cln_mtch_accnt,
                      :st_undrlyng_pstn.c_xchng_cd,
                      :st_undrlyng_pstn.c_indstk,
                      :st_undrlyng_pstn.c_undrlyng,
                      :st_undrlyng_pstn.c_mtm_flg,
                      sysdate,
                      :st_undrlyng_pstn.c_uopnpstn_flw,
                      :st_undrlyng_pstn.l_uopnpstn_qty,
                      :st_undrlyng_pstn.d_uopnpstn_val,
                      :st_undrlyng_pstn.d_umtm_opn_val,
											:st_undrlyng_pstn.d_reqd_initial_mrgn,
											:d_intl_mrgn,	
                      :st_undrlyng_pstn.d_initial_mrgn,
                      :d_intl_mrgn_new,
                      :d_span_wemult_mrgn_old,
                      :st_undrlyng_pstn.d_span_wemult_mrgn,
                      :d_uspan_wenov_mrgn_old,
                      :st_undrlyng_pstn.d_uspan_wenov_mrgn,
                      :d_uspan_nenov_mrgn_old,
                      :st_undrlyng_pstn.d_uspan_nenov_mrgn,
                      :st_undrlyng_pstn.d_min_mrgn,
                      :d_min_mrgn,
                      :d_net_optn_val_old,
                      :st_undrlyng_pstn.d_net_optn_val,
											:d_diff_mrgn_pnl * (-1),
                      :st_undrlyng_pstn.d_eba_expr_mrgn,
											:d_expsr_mrgn,
                      :d_undrlyng_notioanl_pnl,
                      :st_undrlyng_pstn.d_blckd_pl,
                      :d_available_mrgn,
											:c_prcs_flg,                                            /** Added in Ver 1.2 ***/
                      :d_current_limit                                        /** Added in Ver 1.2 ***/
                 );

						if( c_req_type == 'M')
						{
	
							EXEC SQL
            		UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
            		SET     FUS_MTM_FLG         = :st_undrlyng_pstn.c_mtm_flg
            		WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
            		AND     FUS_UNDRLYNG        = :sql_undrlyng
            		AND     FUS_XCHNG_CD        = :sql_xchng_cd;	
						}

						if(SQLCODE != 0)
        		{
          		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          		fn_errlog ( c_ServiceName, "S31600", SQLMSG, c_err_msg );
         			/** tpfree((char *)ptr_fml_Obuf);  *** ver 2.0 ***/
         			/** tpfree((char *)ptr_fml_Ibuf);   *** ver 2.0 ***/
          		return FAILURE;
        		}
        }	
				else
				{
					EXEC SQL
						UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
						SET     FUS_MTM_FLG 				= :st_undrlyng_pstn.c_mtm_flg
						WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
						AND     FUS_UNDRLYNG        = :sql_undrlyng
						AND     FUS_XCHNG_CD        = :sql_xchng_cd; 
				}	
				if(SQLCODE != 0)
				{
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					fn_errlog ( c_ServiceName, "S31605", SQLMSG, c_err_msg );
          /** tpfree((char *)ptr_fml_Obuf);  *** ver 2.0 ***/
         	/** tpfree((char *)ptr_fml_Ibuf);   *** ver 2.0 ***/
					return FAILURE;
				}
				
			}
	 	}

 /** ver 2.5 starts **/
  st_actn.l_report_no  = l_report_no;
  st_actn.c_ctgry_indstk = st_undrlyng_pstn.c_indstk;
  c_extra_update = 'M';
  i_returncode  = fn_cal_trg_prc( c_ServiceName ,  &st_actn ,c_extra_update,
                                      &st_error_msg  );

  if( i_returncode != 0 )
  {
          fn_errlog ( c_ServiceName, "S31610", LIBMSG,c_err_msg );
			    fn_userlog(c_ServiceName,"ERROR in fn_cal_trg_prc");
  }
  /*** ver 2.5 ends ***/

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
	{
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		fn_errlog ( c_ServiceName, "S31615", SQLMSG, c_err_msg );
    /** tpfree((char *)ptr_fml_Obuf);  *** ver 2.0 ***/
    /** tpfree((char *)ptr_fml_Ibuf);   *** ver 2.0 ***/
		return FAILURE;
	}
   /*** Ver 3.3 Start ***/
      i_returncode = fn_upd_mrgn_reporting(st_undrlyng_pstn.c_cln_mtch_accnt,
                                    st_undrlyng_pstn.c_xchng_cd,
                                     c_ServiceName,
                                     c_err_msg
                                    );
      if( i_returncode != 0 )
      {
        fn_errlog(c_ServiceName, "S31620", LIBMSG, c_err_msg );
        return FAILURE;
      }
   /*** Ver 3.3 Ends ***/
  fn_userlog(c_ServiceName,"st_undrlyng_pstn.c_mtm_flg is test2 :%c:",st_undrlyng_pstn.c_mtm_flg);
  if(st_undrlyng_pstn.c_mtm_flg == 'O')
  {	
  	i_ch_val =fn_cancel_pending_ordr(c_ServiceName,											/*** Ver 1.9 ***/
                           st_cntrct_pstn.c_cln_mtch_accnt ,
                           st_cntrct_pstn.c_xchng_cd,
                           st_cntrct_pstn.c_undrlyng,
                           c_expry_dt.arr,
                           st_cntrct_pstn.c_ctgry_indstk,
                           st_cntrct_pstn.c_exer_typ,
												   st_cntrct_pstn.c_opt_typ,
                           st_cntrct_pstn.l_strike_prc);
  	if( i_ch_val !=0 )
  	{
   	 /** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  ** ver 2.0 **/
   	 fn_errlog ( c_ServiceName, "S31625", SQLMSG, c_err_msg );
     /** tpfree((char *)ptr_fml_Obuf);  *** ver 2.0 ***/
     /** tpfree((char *)ptr_fml_Ibuf);   *** ver 2.0 ***/
   	 return FAILURE;
  	}
	}
	
	tpfree((char *)ptr_fml_Ibuf);				/*** ver 1.1 ***/
  tpfree((char *)ptr_fml_Obuf);				/*** ver 1.1 ***/

	return SUCCESS;

}

      /******************** Ver 1.9  Starts ******************/
int fn_cancel_pending_ordr(char* c_ServiceName,
                           char* c_cln_mtch_accnt,
                           char* c_xchng_cd,
                           char* c_undrlyng,
			   								   char* c_expry_dt,
                           char c_ctgry_indstk,
                           char c_exrc_typ,
													 char c_opt_typ,
                           long l_strike_prc)
{


  int  i_exists = 0;
 	int  i_returncode;
  char c_err_msg [ 256 ];
  char c_pipe_id[3];
	char c_svc_nm[20];
  char c_tag [ 256 ];
  char c_msg [ 256 ];
  char c_alias[9];
  char c_usr_id[100]={0};
  long l_sssn_id = 0;
	sql_cursor trd_cursor;
	EXEC SQL INCLUDE "table/fod_fo_ordr_dtls.h";

		rtrim(c_undrlyng);
		rtrim(c_xchng_cd);
		rtrim(c_expry_dt);
		rtrim(c_cln_mtch_accnt);
	
    EXEC SQL
      SELECT count(1) 
      INTO   :i_exists
      FROM   FOD_FO_ORDR_DTLS
      WHERE  FOD_ORDR_STTS in ('O','R','P')
      AND    FOD_CHANNEL = 'SYS'
      AND    FOD_SPL_FLAG in ('L','M')           /** Ver 2.0 **/
      AND    FOD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt	 /** trim removed Ver 2.2 **/
      AND    FOD_XCHNG_CD  = :c_xchng_cd		 /** trim removed Ver 2.2 **/
      AND    trim(FOD_UNDRLYNG)  = :c_undrlyng
      AND    FOD_INDSTK   = :c_ctgry_indstk ;		 /** trim removed Ver 2.2 **/

      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
         fn_errlog ( c_ServiceName, "S31630", SQLMSG, c_err_msg );
         return FAILURE;
      }

      if(i_exists > 0 )
      {
         EXEC SQL ALLOCATE :trd_cursor;
         EXEC SQL EXECUTE
         BEGIN
         OPEN   :trd_cursor FOR
         SELECT FOD_ORDR_RFRNC,
				 				FOD_PIPE_ID,
				 				FOD_CHANNEL
         FROM   FOD_FO_ORDR_DTLS
         WHERE  FOD_ORDR_STTS in ('O','R','P')
         AND    FOD_CHANNEL   = 'SYS'
         AND    FOD_SPL_FLAG in ('L','M')           /** Ver 2.0 **/
         AND    FOD_CLM_MTCH_ACCNT =:c_cln_mtch_accnt		/** trim removed Ver 2.2 **/
         AND    FOD_XCHNG_CD  = :c_xchng_cd			/** trim removed Ver 2.2 **/
         AND    trim(FOD_UNDRLYNG)  = :c_undrlyng
         AND    FOD_INDSTK    = :c_ctgry_indstk;			/** trim removed Ver 2.2 **/
         END;
         END-EXEC;

       if ( SQLCODE != 0 )
       {
            fn_errlog ( c_ServiceName, "S31635", SQLMSG, c_err_msg );
            /** EXEC SQL CLOSE :trd_cursor;    *** Ver 2.0 **/
            EXEC SQL FREE :trd_cursor;
            return FAILURE;
       }

       while( 1 )
       {
        EXEC SQL
        FETCH :trd_cursor
        INTO  :sql_fod_ordr_rfrnc,
	      			:sql_fod_pipe_id,
	      			:sql_fod_channel;

			  if(DEBUG_MSG_LVL_3)
  			{
        		fn_userlog(c_ServiceName," sql_fod_ordr_rfrnc :%s:",sql_fod_ordr_rfrnc );
        		fn_userlog(c_ServiceName," sql_fod_pipe_id :%d:",sql_fod_pipe_id );
        		fn_userlog(c_ServiceName," sql_fod_channel :%s:",sql_fod_channel );
				}
        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
            fn_userlog(c_ServiceName," no data found");
           /**  EXEC SQL CLOSE :trd_cursor;    Commented in Ver 2.0 ***/
           /**  EXEC SQL FREE :trd_cursor;		 Commented in Ver 2.0 ***/ 
            break;
          }
          else
          {
            fn_errlog ( c_ServiceName, "S31640", SQLMSG, c_err_msg );
            EXEC SQL CLOSE :trd_cursor;
            EXEC SQL FREE :trd_cursor;
            return FAILURE;
          }
        }


       strcpy(c_usr_id,"system");
       strcpy(c_alias,"*");
       l_sssn_id = 0;
 			 strcpy(c_svc_nm,"SFO_SPN_CANCEL");

       	i_returncode = fn_acall_svc_fml ( c_ServiceName,
                                     c_err_msg,
                                     "SFO_ORD_ROUT",
                                     0,
                                     9,
                                     FFO_SVC_NAME, (char *)c_svc_nm,
                                     FFO_USR_ID, (char *)c_usr_id ,
                                     FFO_SSSN_ID, (char *)&l_sssn_id ,
                                     FFO_XCHNG_CD, (char *)c_xchng_cd ,
                                     FFO_EBA_MTCH_ACT_NO, (char *)c_cln_mtch_accnt ,
                                     FFO_ORDR_RFRNC, (char *)sql_fod_ordr_rfrnc,
                                     FFO_CHANNEL, (char *)sql_fod_channel.arr,
                                     FFO_ALIAS,(char *)c_alias,
                                     FFO_PIPE_ID, (char *)sql_fod_pipe_id);

       	if(i_returncode != SUCC_BFR )
       	{
       	 fn_errlog ( c_ServiceName, "S31645", SQLMSG, c_err_msg );
         EXEC SQL CLOSE :trd_cursor;
         EXEC SQL FREE :trd_cursor;
       	 return FAILURE;
       	}
       }
      EXEC SQL CLOSE :trd_cursor;
      EXEC SQL FREE :trd_cursor;
      }


      /** EXEC SQL CLOSE :trd_cursor;   ** ver 2.0 **/
      /** EXEC SQL FREE :trd_cursor;  			** ver 2.0 **/
		  return SUCCESS;


}
      /******************** Ver 1.9  Ends  ******************/
