/******************************************************************************/
/*	Program	    			:	SFO_CANCEL_FUT                                        */
/*                                                                            */
/*  Input             : FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_ORDR_RFRNC                                        */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PIPE_ID                                           */
/*                                                                            */
/*  Output            : FFO_ERR_MSG                                           */
/*                                                                            */
/*  Description       : To cancel a Futures order                             */
/*                                                                            */
/*  Log               : 1.0   17-Oct-2001    S. Swaminathan                   */
/*  Log               : 1.1   17-Jul-2002    Infotech|sangeet                 */
/*  Log               : 1.2   06-Feb-2003    Sridhar|Sangeet                  */
/*  Log               : 1.3   17-Apr-2007    Shailesh                         */
/*  Log               : 1.4   24-Jan-2008    Shailesh                         */
/*  Log								: 1.5   15-Mar-2007		 Rohit                            */
/*  log               : 1.6   07-Feb-2008    Sushil                           */
/*	Log								: 1.7		14-Mar-2008    Shamili                          */
/*	Log								: 1.9		02-Jan-2009    Shailesh & Prakash               */
/*  Log               : 2.0   13-Mar-2009		 Vidyayini Krish									*/
/*	Log								: 2.1		25-Oct-2010		 Sandeep Patil										*/
/*  Log               : 2.2   23-Nov-2010   Shailesh Hinge| Infotech          */
/*  Log               : 2.3   07-Jul-2011   Infotech|Mahesh                   */
/*  Log               : 2.4   24-Feb-2012   Infotech|Sandip Tambe             */
/*  Log               : 2.5   02-Jul-2012   Infotech|Swati A.B                */
/*  Log               : 2.6   03-Jul-2012   Infotech|Navina D                 */
/*  Log               : 2.7   30-Oct-2012   Infotech|Swati A.B                */
/*  Log               : 2.8   07-Dec-2012   Infotech|Navina D.                */
/*  Log               : 2.9   20-Dec-2012   Infotech|Mahesh                   */
/*  Log               : 3.0   15-Jan-2013   Infotech|Navina D.                */
/*  Log               : 3.2   31-May-2013   Infotech|Bhushan S.               */
/*  Log							  :	3.3		10-Apr-2014		Infotech|Bhushan S.               */
/*  Log               : 3.4   18-Jun-2014   Infotech|Ritesh Deolekar					*/
/*  Log               : 3.5   08-Aug-2014   Infotech|Sachin Birje   					*/
/*  Log               : 3.6   23-Dec-2013   Infotech|Sachin Birje.            */
/*  Log               : 3.8   27-Jul-2015   Infotech|Bhupendra Malik          */
/*  Log               : 3.9   05-Aug-2015   Infotech|Anand Dhopte             */
/*  Log               : 4.0   19-Jan-2016   Infotech|Ritesh Deolekar          */
/*  Log               : 4.1   23-Feb-2016   Infotech|Vishal Borhade           */
/*  Log               : 4.2   10-Mar-2016   Infotech|Kishor Borkar            */
/*  Log               : 4.3   14-Jul-2016   Infotech|Bhupendra Malik          */
/*  Log               : 4.4   22-Aug-2016   Infotech|Bhupendra Malik          */
/*  Log               : 4.6   24-Oct-2016   Infotech|Bhupendra Malik          */
/*  Log               : 4.7   05-Dec-2016   Infotech|Kishor Borkar 						*/
/*  Log               : 4.8   18-Oct-2016   Infotech|Tanmay Patel             */
/*  Log               : 4.9   30-Oct-2017   Infotech|Varadraj Gramopadhye     */
/*  Log               : 5.0   12-Dec-2017   Infotech|Anand Dhopte             */
/*	Log								: VQC		14-Dec-2017		Infotech|Sandeep Patil						*/
/*  Log               : 5.1   10-Jul-2018   Infotech|Suchita Dabir            */
/*  Log               : 5.2   13-May-2019   Infotech|Parag Kanojia            */
/*  Log               : 5.3   27-Feb-2018   Infotech|Parag Kanojia            */
/*  Log               : 5.4   21-May-2019   Infotech|Suchita Dabir            */
/*  Log               : 5.5   13-Nov-2019   Infotech|Anand Dhopte             */
/*  Log               : 5.6   24-Oct-2019   Infotech|Tanmay Patel             */
/*	Log								: 5.7		02-Feb-2021		Infotech|Kiran Itkar							*/
/*  Log               : 5.8   25-Sep-2021		Infotech|Shlok Ghan               */
/*  Log               : 5.9   13-Sep-2022   Dipin                             */ 
/*  Log               : 6.0   07-Mar-2023   Mahesh                            */ 
/******************************************************************************/
/*  1.0    -   New Release                                                    */
/*  1.1    -   BP Changes                                                     */
/*  1.2    -   for blocking multiple cancellation for same order              */
/*  1.3    -   Broker status check for NNF 803                                */
/*  1.4    -   Handling of cancellation  rejection in case of partial execution*/
/*  1.5		 -	 No modification allowed check added                            */
/*  1.6    -   AIX Migration                                                  */
/*	1.7	   -   FuturePlus                                                     */	
/*	1.8	   -   FuturePlus Error Handling Change                               */	
/*  1.9    -   NNF Changes For Extended Market Hours                          */
/*  2.0    -   New view varaibles implemented																	*/
/*	2.1		 -	 Product Type Check Added.																			*/
/*  2.2    -   SilverLight                                                    */
/*  2.3    -   SPAN Changes                                                   */
/*  2.4    -   BSE  Changes                                                   */
/*  2.5    -   SPAN T&C Handling                                              */
/*	2.6	   -	 Storing ip address in Exchange book														*/
/*	2.7	   -	 CR-Overnight Order change																			*/
/*  2.8    -   SLTP FuturePLUS Handling                                       */
/*  2.9    -   Broker closeout changes                                        */
/*  3.0    -   SPAN FuturePLUS HAndling                                       */
/*  3.2    -   Restrict DBC mapped customer to cancel order if CLM_TRD_FLG = 'N'  */
/*	3.3    -   Pipe Id Check for BSE																					*/
/*	3.4		 -   Multiple DB Hits to CLM_CLNT_MSTR reduced by fetching all      */ 
/*             required details into single DB hit.                           */
/*	3.5		 -   FO Auto MTM Changes          																	*/ 
/*  3.6    -   FNO VTC Order Changes                                          */
/*  3.8    -   Market to Limit future plus sltp                               */
/*  3.9    -   Contract Master and Trade Quote Table Merger Changes           */
/*  4.0    -   Live Bug Fix Variable Initialized                              */
/*  4.1    -   Check to restrict cancellation of Invalid combination of       */
/*						 Order Reference and Match Account                              */ 
/*  4.2    -   Transaction Flag in Check Session IP                           */
/*  4.3    -   Log Maintenance                                                */
/*  4.4    -   My Eos changes                                                 */
/*  4.6    -   Future Trail changes                                           */
/*  4.7    -   Transaction through IP for SLTP Futureplus                     */
/*  4.8    -   Stop VTC feature                                               */
/*  4.9		 -   Changes To Reduce Hard Parsing																	*/
/*  5.0    -   FML with data type char used instead of long for storing       */
/*             wrapper flag                                                   */
/*	VQC		 -	 Version Quality Control Changes																*/
/*  5.1    -   Physical Settlement of stock derivative changes                */
/*	5.2		 -	 EOS enhancements for Physical settlement in F&O Changes				*/
/*  5.3    -   Rollover with Spread Changes                                   */
/*  5.4    -   Updating the executed quantity to 0                            */
/*  5.5    -   CR-ISEC18-127640 Sub-broker dual order placement changes       */
/*  5.6    -   Ipv6 Format                                                    */
/*  5.7		 -	 Separate EOS for Stock and Index Underlyings in FPSL						*/
/*  5.8        CR-ISEC14-150750 Profit Order FPSL                             */
/*  5.9    -   Unique Device Identifiers for orders placed through IBT & STWT */ 
/*  6.0    -   FNO lock user changes																					*/
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <eba_to_ors.h>
/*#include <fml_def.h>			Commented In VQC			***/
#include <fo_fml_def.h>
#include <fo_view_def.h> 
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>             /*  Ver 1.6 : Added   */
#include <fn_val_ord.h>         /*  Ver 1.6 : Added   */
#include <fml_rout.h>           /*  Ver 1.6 : Added   */
#include <fn_read_debug_lvl.h>  /*  Ver 1.6 : Added   */
#include <fn_pos.h>							/*  Ver 2.6 */

#define ROLLOVER_WITH_SPREAD 'O'  /* Ver 5.3 */

int fn_check_ord_fut( char *c_ServiceName,
                  struct vw_orderbook *ptr_o_st_ordbook,
                  char *c_fum_mrkt_typ,                 /* Ver 1.9 */ 
                  char *c_fcm_mrkt_typ,                 /* Ver 1.9 */ 
                  struct vw_err_msg *ptr_st_err_msg );

void SFO_CANCEL_FUT( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
	char c_ServiceName[33];
/*char c_channel[4];*1.1 BP*			Commented In VQC			***/
  char c_bp_id[9];/*1.1 BP*/
  char c_alias[9];/*1.1 BP*/
/*int i_level_exists =0; *1.1*		Commented In VQC      ***/
	varchar c_err_msg[256];											/***	VQC - Data Type Changed From Char To Varchar	***/
	varchar c_err_msg1[256];       /*1.7*/			/***  VQC - Data Type Changed From Char To Varchar  ***/
	int i_returncode	=	0;			/***	Initialised In VQC	***/
	int i_trnsctn = 0;					/***  Initialised In VQC  ***/
	int i_err[5];			/***	VQC - Size Reduced From 16 To 5	***/
	int i_ferr[5];		/***  VQC - Size Reduced From 16 To 5 ***/
	long  l_xchng_seq_num	=	0;	/***  Initialised In VQC  ***/
  long l_init_sltp_rt=0;  /*** Ver 4.6 ***/
  long l_init_lmt_rt=0;   /*** Ver 4.6 ***/
  long l_lTP=0;           /*** Ver 4.6 ***/
  long l_trail_amt=0;     /*** Ver 4.6 ***/
  long l_lmt_offset=0;    /*** Ver 4.6 ***/

/*int i_counter = 1;			Commented In VQC      ***/
	int i_ip_len	=	0;			/***  Initialised In VQC  ***/
	int i_op_len	=	0;			/***  Initialised In VQC  ***/
	int i_mtm_flg = 0;         /*1.7*/
	int i_actn_id= -1;					 /*2.1*/
/*int i_is_dbc_cust = 0;            ***  Ver 3.2 ***			Commented In VQC ***/

  char c_can_req;            /*1.7*/
  char c_can_sqr_off;        /*1.7*/	
  char c_psswd_req_flg;
	char c_xchng_remarks[257];
	char c_trd_flg;                  /*** Ver 3.4 * ***/
  char c_alias_name[9];       /*** Ver 3.4 ***/
  char c_txn_flg='Y';             /*** Ver 4.2 ***/

	char c_fno_dmn_nm [ 16 ];
  char c_fno_trg_nm [ 16 ];
  char c_fno_trg_dat [ 256 ];
/*char c_roll_stts;           *1.7*				Commented In VQC	***/
  /**char c_sys_msg[4];          *1.7* Commented in Ver 4.4 **/
	char c_sys_msg[11];   /*** Ver 4.4 ***/
  char c_fum_mrkt_typ;      /***  Ver 1.9 ***/
  char c_fcm_mrkt_typ;      /***  Ver 1.9 ***/
  /*** char c_spn_flg;              * Ver 2.3 * commented In Ver 2.5 ***/
  char c_spn_flg = 'N';             /* Ver 2.5 */
  char c_bse_spn_flg;               /* Ver 2.4 */
	char c_ip_address[45+1]="\0";	/** Changed to 45 from 15 in Ver 5.6 **/ /* Ver 2.6 */
	char c_mtm_eos = '\0';			/* Ver 2.8 */
	char c_request_typ = 'C';			/* Ver 2.9 */
  char c_ordr_stts;          /** Ver 3.8 **/
  char c_tag_ordr_stts;      /** Ver 3.8 **/
  char c_tag_ordr_ref[19];   /** Ver 3.8 **/
  char c_prcimpv_flg='\0';     /*** Ver 4.6 ***/
  char c_exg_mkt_type='D'; /* ver 4.9 */

  /*** ver 5.1 starts ***/
  char c_dlvry_pos_allwd = 'Y';
  char c_setlmnt_flg = 'C';
  char c_dlvry_eos_flg = 'N';
  /*** ver 5.1 ends ***/
  char c_fc_flag = '\0'; /*** Ver 5.8 ***/  
  char c_check_flag = '\0';     /** Ver 3.8 *** Variable initialised in Ver 4.0 as it was holding value of previous record **/

	EXEC SQL BEGIN DECLARE SECTION;
		struct vw_usr_prfl st_usr_prfl;
		struct vw_orderbook st_o_ordbook;
		struct vw_xchngbook st_xchngbook;
		varchar c_usr_usr_psswrd[50];
    varchar c_trd_dt[LEN_DATE];
    varchar c_sys_dt[LEN_DATE];
	EXEC SQL END DECLARE SECTION;

	struct vw_contract st_cntrct;					/*** Ver 2.9 ***/
	struct vw_orderbook st_i_ordbook;
/*struct vw_xchngbook st_s_xchngbk;			Commented In VQC	***/
	struct vw_sequence st_s_sequence;
	struct vw_sequence st_r_sequence;
	struct vw_pstn_actn st_pstn_actn;
	struct vw_err_msg st_err_msg;

	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
	strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.6 : Added  */

  MEMSET(st_o_ordbook); /** Ver 4.4 **/
	MEMSET(st_i_ordbook); /** Ver 4.4 ***/
	MEMSET(st_usr_prfl);		/***	VQC	***/
	MEMSET(st_xchngbook);		/***	VQC	***/
	MEMSET(st_cntrct);			/***	VQC	***/
	MEMSET(st_s_sequence);	/***	VQC	***/
	MEMSET(st_r_sequence);	/***	VQC	***/
	MEMSET(st_pstn_actn);		/***	VQC	***/
  
	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_usr_prfl,
                           "vw_usr_prfl" );
	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg.arr  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_xchngbook,
                           "vw_xchngbook" );
	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg.arr  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}


 

	/*************** Ver 3.4 Starts ******************/
   /*** Ver 3.8 Starts ***/

    /*** Commented in Ver 5.0 as data-type of FML used is long and variable data-type is char ***
    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_USR_FLG,0,(char *)&c_check_flag,0);
    ***/

    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_CLSR_TYP,0,(char *)&c_check_flag,0); /*** Ver 5.0 ***/
    i_ferr [0] = Ferror32;
   if ( i_err[0] == -1  && Ferror32 != FNOTPRES)
     {
       fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg.arr );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );  
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
   if(DEBUG_MSG_LVL_3) /*** DEBUG_MSG_LVL_3 Added in ver 4.3 ***/
	 {
		fn_userlog(c_ServiceName,":c_check_flag  %c :",c_check_flag);
	 }
	/*** Ver 3.8 ends ***/ 
  /* Ver 4.7 Starts */
  if(c_check_flag == 'W')
  {
    MEMSET(c_ip_address);

    i_err[1]  = Fget32(ptr_fml_Ibuf,FFO_OI_INDCTR,0,(char *)c_ip_address,0);
    i_ferr [1] = Ferror32;

    if ( i_err[0] == -1  && Ferror32 != FNOTPRES)
    {
      fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName, "c_ip_address is...:%s:",c_ip_address);
  }
  /* Ver 4.7 Ends */

    MEMSET(c_bp_id);
    MEMSET(c_alias_name);
    c_trd_flg ='\0';
    c_spn_flg='\0';
    c_bse_spn_flg='\0';

    EXEC SQL
        SELECT  CLM_TRD_FLG,
                NVL(CLM_BP_ID,'*'),          /* version 4.9 Hard Parsing Changes */
                NVL(CLM_SPAN_ALLWD,'N'),     /* version 4.9 Hard Parsing Changes */
                NVL(CLM_BSESPAN_ALLWD,'N'),  /* version 4.9 Hard Parsing Changes */
                NVL(CLM_ALIAS_NAME,'*')      /* version 4.9 Hard Parsing Changes */
        INTO    :c_trd_flg,
                :c_bp_id,
                :c_spn_flg,
                :c_bse_spn_flg,
                :c_alias_name
        FROM    CLM_CLNT_MSTR
        WHERE   CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt;

  if( SQLCODE != 0 )
  {

    fn_errlog(c_ServiceName, "S31025", SQLMSG, c_err_msg.arr);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

	rtrim(c_bp_id);
  rtrim(c_alias_name);

  if(DEBUG_MSG_LVL_3) /*** DEBUG_MSG_LVL_3 Added in Ver 4.3 ***/
	{
		fn_userlog(c_ServiceName,"Trade flag :%c:",c_trd_flg);
		fn_userlog(c_ServiceName,"BP id :%s:",c_bp_id);
		fn_userlog(c_ServiceName," NSE span flag :%c:,Bse Span Flag :%c:",c_spn_flg,c_bse_spn_flg);
		fn_userlog(c_ServiceName,"Nick Name :%s:",c_alias_name);
	}
  /**************** Ver 3.4 Ends ************/

  /***  Ver 3.2 Starts  ***/

  if(st_usr_prfl.c_user_id[0] != BPID && strcmp(st_usr_prfl.c_user_id,"system") != 0)
  {
		/*********************** Commented in Ver 3.4 ******************	
 
    i_is_dbc_cust = 0;

    EXEC SQL
        SELECT 1
            INTO :i_is_dbc_cust
        FROM  CLM_CLNT_MSTR
        WHERE CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
        AND   CLM_TRD_FLG = 'N'
        AND   CLM_BP_ID IS NOT NULL;

    if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
    {
      fn_errlog( c_ServiceName, "S31030",SQLMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if ( i_is_dbc_cust == 1 )
    {
      fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst, this facility has been Disabled");
      fn_errlog( c_ServiceName, "B35018", "", c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    ***********************  Ver 3.4  Commente Ends ****************/

	  if(c_trd_flg=='N' && strcmp(c_bp_id,"*")!=0) /*** Ver 3.4 */
		{
			fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst, this facility has been Disabled");
      fn_errlog( c_ServiceName, "B35018", "", c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}	
  }

  /***  Ver 3.2  Ends  ***/

  /*** Ver 5.5 Starts ***/

  if(st_usr_prfl.c_user_id[0] ==BPID)
   {
     if( fn_simaltns_ssn_term ( c_ServiceName,st_usr_prfl.c_user_id,st_usr_prfl.l_session_id,st_usr_prfl.c_cln_mtch_accnt,c_err_msg.arr) == -1 )
     {
      fn_errlog(c_ServiceName,"S31035","Error while checking simultaneous active session",c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

  /*** Ver 5.5 Ends ***/

	/********************** Commented in Ver 3.4 *************

	 ***  Ver 2.3 SPAN Flag Check ***

  EXEC SQL
    SELECT  NVL(CLM_SPAN_ALLWD,'N'),
						NVL(CLM_BSESPAN_ALLWD,'N')				**** ver 2.4 ***
    INTO    :c_spn_flg,
						:c_bse_spn_flg									  *** Ver 2.4 ***
    FROM    CLM_CLNT_MSTR
    WHERE   CLM_MTCH_ACCNT  = :st_usr_prfl.c_cln_mtch_accnt;

  if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName, "Failed To Get SPAN Flag.");
    fn_errlog(c_ServiceName, "S31040", SQLMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

	if( DEBUG_MSG_LVL_5 )
	{
  	fn_userlog(c_ServiceName,"SPAN Allowed Flag Is :%c:",c_spn_flg);
  	fn_userlog(c_ServiceName,"BSE SPAN Allowed Flag Is :%c:",c_bse_spn_flg);
	}

	*********************** Ver 3.4 Comment Ends *************************/

  /*if ( c_spn_flg == 'Y' )				**** Ver 2.4 **/
  /*** if ( ( c_spn_flg == 'Y' && strcmp(st_xchngbook.c_xchng_cd,"NFO") == 0 )|| commented In Ver 2.5 ***/
  
	/*** Commented in Ver 3.0 ***
	if ( ( ( c_spn_flg == 'Y' || c_spn_flg == 'Z' )  && strcmp(st_xchngbook.c_xchng_cd,"NFO") == 0 )||     *** Ver 2.5 ***
			 ( c_bse_spn_flg == 'Y' && strcmp(st_xchngbook.c_xchng_cd,"BFO") == 0 )
		 )		*** ver 2.4 ****
  {
    fn_userlog(c_ServiceName, "SPAN Customer Trying To Place Order Under Normal Margining System.");
    strcpy(c_err_msg,"You Are Marked Under SPAN.Can Cancel Order Only Through New Site.");
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  } *** ver 3.0 ***/

  /**** END Ver 2.3 ***/

  /*** Added in Ver 4.4 ***/
  MEMSET(c_sys_msg);
  if(Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0) == -1)
  {
    if (Ferror32 != FNOTPRES)
    {
      fn_errlog( c_ServiceName, "S31045",FMLMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  /*** Added in Ver 4.4 Ends ***/

 /***1.1 start ***/

    if(st_usr_prfl.c_user_id[0] == BPID && strcmp(c_sys_msg,"MY_EOS") != 0 ) /*** MY_EOS added in Ver 4.4 ***/
    {
      if(Fget32(ptr_fml_Ibuf,FFO_ALIAS,0,(char *)c_alias,0) == -1)
      {
            fn_errlog( c_ServiceName, "S31050", FMLMSG, c_err_msg.arr  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
  					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
			
		/******************** Commented in Ver 3.4 *****************

      EXEC SQL
        SELECT 1
        INTO   :i_level_exists
        FROM   clm_clnt_mstr
        WHERE  clm_mtch_accnt = :st_usr_prfl.c_cln_mtch_accnt and
							 clm_bp_id 			= :st_usr_prfl.c_user_id and
               clm_alias_name = :c_alias ;

			if( DEBUG_MSG_LVL_5 )
			{
      	fn_userlog(c_ServiceName,"BP alias  is :%s:",c_alias);
      	fn_userlog(c_ServiceName,"BP channel  is :%s:",c_channel);	
			}
      if(i_level_exists != 1 )
      {
            fn_errlog( c_ServiceName, "B55006", "", c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   **Ver 2.2**
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		********************* Commented in Ver 3.4 *****************/

		if(strcmp(c_alias_name,c_alias)!=0) /*** Ver 3.4 ***/
		{
				 fn_errlog( c_ServiceName, "B55006", "", c_err_msg.arr  );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
         Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );  
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
      strcpy(c_bp_id,st_usr_prfl.c_user_id);
    }
    else
    {
      strcpy(c_bp_id," ");
    }
	if( DEBUG_MSG_LVL_5 ) {					/*	Ver 1.6 : Debug level Change	*/
    fn_userlog(c_ServiceName,"The BP id is :%s: ,:%s:", c_bp_id,st_usr_prfl.c_user_id);
    fn_userlog(c_ServiceName,"The Alias is :%s: ", c_alias);
    /*fn_userlog(c_ServiceName,"BP channel  is :%s:",c_channel);			Commented In VQC      ***/
	}

	/***1.1 End  ***/


	if( DEBUG_MSG_LVL_3 ) {         /*  Ver 1.6 : Debug level Change  */
    fn_userlog( c_ServiceName, "User id       :%s:",
                                  st_usr_prfl.c_user_id );
    fn_userlog( c_ServiceName, "Session id    :%ld:",
                                  st_usr_prfl.l_session_id );
    fn_userlog( c_ServiceName, "Match Account :%s:",
                                  st_usr_prfl.c_cln_mtch_accnt );
		}
		if(DEBUG_MSG_LVL_1) /*** DEBUG_MSG_LVL_1 Added in Ver 4.3 ***/
		{
    	fn_userlog( c_ServiceName, "Order Reference :%s:",
                                  st_xchngbook.c_ordr_rfrnc );
    }
		if( DEBUG_MSG_LVL_3 ) /*** DEBUG_MSG_LVL_3 Added in Ver 4.3 ***/
		{
			fn_userlog( c_ServiceName, "Pipe ID :%s:", st_xchngbook.c_pipe_id );
    	fn_userlog( c_ServiceName, "Remarks :%s:", st_xchngbook.c_xchng_rmrks );
		}

	strcpy ( c_xchng_remarks, st_xchngbook.c_xchng_rmrks );
	rtrim ( c_xchng_remarks );

  c_psswd_req_flg = NO;

  /**********1.3 Starts *********************/
  /******* Commented in ver 2.9
  i_returncode=fn_chk_closeout(c_ServiceName,
                            &st_xchngbook,
                            &st_err_msg);

  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31055", "Broker Under Closeout", c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   **Ver 2.2**
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  **************************************/
  /**********1.3 Ends*********************/

  fn_init_ddr_pop ( st_xchngbook.c_pipe_id,TRADING_SECTION,F_CS);

	/*** Commented in Ver 2.6 ***
	i_returncode =  fn_check_user ( c_ServiceName,
                                  &st_usr_prfl ,
                                  c_usr_usr_psswrd.arr,			* Ver 1.6 : Extention .arr Added *
                                  c_psswd_req_flg,
                                  &st_err_msg );
	*****************************/

	/*** Added in Ver 2.6 ***/

  if( c_check_flag !='W')  /*** Condition  added in Ver 3.8 ***/ 
  {  
	 i_returncode =  fn_check_user_ip ( c_ServiceName,
																		 &st_usr_prfl ,
																		 c_usr_usr_psswrd.arr,
																		 c_psswd_req_flg,
																		 c_ip_address,
                                     c_txn_flg,                   /*** Ver 4.2 ***/
																		 &st_err_msg );

   
	/*************************/

  if ( i_returncode == -1 )
  {
		fn_errlog( c_ServiceName, "S31060", LIBMSG, c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
 
  }

	if(DEBUG_MSG_LVL_3)	/*** Ver 2.6 ***/
	{
		fn_userlog(c_ServiceName,"ip address:%s:",c_ip_address);
	}

  /*** Ver 3.5 Starts Here ***/
  if (st_xchngbook.c_mkrt_typ == 'A' ) /** Auto MTM Cancel Order Placement ***/
  {
   MEMSET(c_ip_address);
   strcpy(c_ip_address,"A");
  }
  /*** Ver 3.5 Ends Heer  ***/  
  /*** ver 5.8 starts ***/
  if (st_xchngbook.c_mkrt_typ == 'Z' )
  {
   MEMSET(c_ip_address);
   strcpy(c_ip_address,"Z");
  }
  /*** ver 5.8 **/
  

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr );
  if ( i_trnsctn == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  strcpy( st_i_ordbook.c_ordr_rfrnc,st_xchngbook.c_ordr_rfrnc);
	st_i_ordbook.c_oprn_typ = FOR_UPDATE;

 
	i_ip_len = sizeof ( struct vw_orderbook );
  i_op_len = sizeof ( struct vw_orderbook );

  fn_cpy_ddr ( st_i_ordbook.c_rout_crt );
   /******  Commented in Ver 4.6 *****
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg.arr,
                              &st_i_ordbook,
                              &st_o_ordbook,
                              "vw_orderbook",
                              "vw_orderbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_REF_TO_ORD" ); **************/

		/********** Added in Ver 4.6 *********/
	 i_returncode	= fo_ref_to_ord( c_ServiceName,
																 c_err_msg.arr,
																 &st_i_ordbook,
																 &st_o_ordbook,
																 &c_prcimpv_flg
																);
		/************ Ver 4.6 Ends ***********/
	if ( i_returncode != SUCC_BFR )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** ver 5.3 starts ***/
  /*** restrict calls from other front ends for RWS order ***/
  fn_userlog( c_ServiceName,"INPUT SPL FLG :%c: ORD BOOK FLG :%c:",st_xchngbook.c_spl_flg,st_o_ordbook.c_spl_flg); 
  if ( st_xchngbook.c_spl_flg != ROLLOVER_WITH_SPREAD && st_o_ordbook.c_spl_flg == ROLLOVER_WITH_SPREAD)
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    MEMSET(c_err_msg.arr);
    sprintf( c_err_msg.arr,"This is Spread Rollover Order, pls visit new site for mod/can");
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 ); 
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /*** ver 5.3 ends ***/


  /*** Ver 4.8 Start ***/

	/*** Commented in Ver 5.2 ***
  *** ver 5.1 starts **

  if( st_o_ordbook.c_prd_typ =='F' || st_o_ordbook.c_prd_typ == 'O' )
  {
  EXEC SQL
       SELECT NVL( ftq_dlvry_pos_allwd, 'Y' )
       INTO   :c_dlvry_pos_allwd
       FROM   FTQ_FO_TRD_QT
       WHERE  FTQ_XCHNG_CD  = :st_o_ordbook.c_xchng_cd
         AND  FTQ_PRDCT_TYP = :st_o_ordbook.c_prd_typ
         AND  FTQ_UNDRLYNG  = :st_o_ordbook.c_undrlyng
         AND  FTQ_EXPRY_DT  = :st_o_ordbook.c_expry_dt
         AND  FTQ_EXER_TYP  = :st_o_ordbook.c_exrc_typ
         AND  FTQ_OPT_TYP   = :st_o_ordbook.c_opt_typ
         AND  FTQ_STRK_PRC  = :st_o_ordbook.l_strike_prc;
  
  if( SQLCODE != 0 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    fn_errlog( c_ServiceName, "S31065", LIBMSG, c_err_msg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  if (c_dlvry_pos_allwd == 'N')
  {
    if( Fget32(ptr_fml_Ibuf,FFO_BK_UBK_FLG,0,(char *)&c_dlvry_eos_flg,0) == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
          fn_errlog( c_ServiceName, "S31070", LIBMSG, c_err_msg.arr );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
        c_dlvry_eos_flg='N';
      }
    }
    if (c_dlvry_eos_flg!='E')
    {
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
          fn_userlog(c_ServiceName,"Currently Trading is not allowed in this contract");
          strcpy( c_err_msg.arr,"Currently Trading is not allowed in this contract");
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );   
    }
   }
  }
  *** ver 5.1 ended **	*** Ver 5.2 ***/
  if (strcmp(c_sys_msg,"V")==0 )
  {
   i_returncode = fn_stop_vtc(c_ServiceName,
                              st_xchngbook.c_ordr_rfrnc, 
                              &st_o_ordbook,  
                              &st_err_msg );

   if ( i_returncode == -1 )
   {
    fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

 	 if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )
   {
		fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );			/***	VQC	***/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );  
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

  	i_actn_id = 0;
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
   	tpreturn(TPSUCCESS,0,(char *)ptr_fml_Ibuf,0,0);

  }

 /*** Ver 4.8 Ends ***/

	/** Ver 4.1 Starts **/

  rtrim(st_usr_prfl.c_cln_mtch_accnt);
  rtrim(st_o_ordbook.c_cln_mtch_accnt);

	if(DEBUG_MSG_LVL_1)  /** DEBUG_MSG_LVL_1 Added in Ver 4.3 ***/
	{
		fn_userlog( c_ServiceName, "From SFO_CANCEL_FUT Match Account  :%s:", st_usr_prfl.c_cln_mtch_accnt );
	}
	if(DEBUG_MSG_LVL_3)  /** DEBUG_MSG_LVL_3 Added in Ver 4.3 ***/
	{
		fn_userlog( c_ServiceName, "From SFO_REF_TO_ORD Match Account :%s:", st_o_ordbook.c_cln_mtch_accnt );	
	}

	if( strcmp(st_usr_prfl.c_cln_mtch_accnt,st_o_ordbook.c_cln_mtch_accnt) != 0 )
	{
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
		fn_errlog(c_ServiceName, "S31075", "Invalid Combination of Order Reference And Match Account.", c_err_msg.arr);
    fn_userlog(c_ServiceName,"Invalid Combination of Order Reference And Match Account.");
    MEMSET(c_err_msg);
    strcpy(c_err_msg.arr,"Invalid Combination of Order Reference And Match Account.");
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
	}

  /** Ver 4.1 Ends **/

	/*** Ver 3.3 ** Starts ***/

	if(DEBUG_MSG_LVL_3) /*** DEBUG_MSG_LVL_3 Added in Ver 4.3 ***/
	{
		fn_userlog(c_ServiceName, "st_xchngbook.c_ordr_rfrnc[8] :%c:",st_xchngbook.c_ordr_rfrnc[8]);
	}

	if(st_xchngbook.c_ordr_rfrnc[8] == 'A')
	{
		if(DEBUG_MSG_LVL_3) /*** DEBUG_MSG_LVL_3 Added in Ver 4.3 ***/
		{
			fn_userlog(c_ServiceName, "BSE Exchange Code :%s:",st_xchngbook.c_xchng_cd);
		}
		MEMSET(st_xchngbook.c_xchng_cd);
		strcpy(st_xchngbook.c_xchng_cd,"BFO");
	}
	if(DEBUG_MSG_LVL_3) /** DEBUG_MSG_LVL_3 Added in ver 4.3 **/
	{
		fn_userlog(c_ServiceName, "Exchange Code :%s:",st_xchngbook.c_xchng_cd);
	}
	/*** Ver 3.3 ** Ends ***/

	/*** Ver 3.0 starts ***/
	if ( ( ( c_spn_flg == 'Y' || c_spn_flg == 'Z' )  && strcmp(st_xchngbook.c_xchng_cd,"NFO") == 0 )||  
			 ( c_bse_spn_flg == 'Y' && strcmp(st_xchngbook.c_xchng_cd,"BFO") == 0 )
		 )	
  {
		if (st_o_ordbook.c_prd_typ != 'P')
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
			fn_userlog(c_ServiceName, "SPAN Customer Trying To Place Order Under Normal Margining System.");
			strcpy(c_err_msg.arr,"You Are Marked Under SPAN.Can Cancel Order Only Through New Site.");
			Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
		}
	}
	/*** Ver 3.0 ends ***/

	/*** Added in ver 2.9 ***/

  if( DEBUG_MSG_LVL_5 )
  {
    fn_userlog(c_ServiceName, "Underlying is [%s] ", st_o_ordbook.c_undrlyng);
  }

	strcpy(st_cntrct.c_undrlyng,st_o_ordbook.c_undrlyng);
	strcpy(st_cntrct.c_xchng_cd,st_o_ordbook.c_xchng_cd);
	strcpy(st_cntrct.c_expry_dt,st_o_ordbook.c_expry_dt);
	st_cntrct.c_prd_typ = st_o_ordbook.c_prd_typ;
	st_cntrct.c_exrc_typ = st_o_ordbook.c_exrc_typ;
	st_cntrct.c_ctgry_indstk =st_o_ordbook.c_ctgry_indstk;

  i_returncode=fn_chk_closeout( c_ServiceName,
															  st_usr_prfl.c_cln_mtch_accnt,
															  c_request_typ,
                                st_cntrct,
                            	  &st_xchngbook,
                            	  &st_err_msg);

  if( i_returncode == -1 )
  {
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );			/***	VQC	***/
    fn_errlog( c_ServiceName, "S31080", "Broker Under Closeout", c_err_msg.arr);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Ver 2.9 ends ***/

	/***	Ver	2.1	Starts	***/

	/*** if ( st_o_ordbook.c_prd_typ != 'F' && st_o_ordbook.c_prd_typ != 'P' )	 *** Commented in Ver 2.8 ***/
	if ( st_o_ordbook.c_prd_typ != 'F' && st_o_ordbook.c_prd_typ != 'P' && st_o_ordbook.c_prd_typ != 'U')		/*** Ver 2.8 ***/
	{
		/*** fn_userlog(c_ServiceName,"Product Type Received For Fut/FutPls Cancellation IS :%c:",st_o_ordbook.c_prd_typ); *** Commented in Ver 2.8 ***/
		fn_userlog(c_ServiceName,"Product Type Received For Fut/FutPls/SLTP FutPls Cancellation IS :%c:",st_o_ordbook.c_prd_typ);		/*** Ver 2.8 ***/
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
 		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
 		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

	}

	/***  Ver 2.1 Ends	***/

  /* i_returncode = fn_lock_usr( c_ServiceName, st_usr_prfl.c_cln_mtch_accnt ); ** Ver 6.0 **/
  i_returncode = fn_lock_fno( c_ServiceName, st_usr_prfl.c_cln_mtch_accnt ); 	  /** Ver 6.0 **/
  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	i_returncode = fn_check_ord_fut( c_ServiceName,
                               		 &st_o_ordbook, 
                                   &c_fum_mrkt_typ,                 /* Ver 1.9 */
                                   &c_fcm_mrkt_typ,                 /* Ver 1.9 */
                               		 &st_err_msg );
  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	st_xchngbook.l_mdfctn_cntr = st_o_ordbook.l_mdfctn_cntr ;
	st_xchngbook.c_oprn_typ = WITHOUT_ORS_MSG_TYP;

	i_ip_len = sizeof ( struct vw_xchngbook );
  i_op_len = sizeof ( struct vw_xchngbook );

  fn_cpy_ddr ( st_xchngbook.c_rout_crt );
  
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg.arr,
                              &st_xchngbook,
                              &st_xchngbook,
                              "vw_xchngbook",
                              "vw_xchngbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_REF_TO_OMD" );

  if ( i_returncode != SUCC_BFR )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Code moved from line 901 in Ver 4.4 Starts **/
 if( st_o_ordbook.c_prd_typ == 'P' || st_o_ordbook.c_prd_typ == 'U' )    /*** Ver 2.8 ***/
  {
    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0);
    i_ferr [0] = Ferror32;
    /* 1.8 start */
    if ( i_err[0] == -1 )
    {
       if (Ferror32 != FNOTPRES)
       {
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg1.arr );
          fn_errlog( c_ServiceName, "S31085", FMLMSG, c_err_msg.arr  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }
       else if( Ferror32 == FNOTPRES )
       {
					if(DEBUG_MSG_LVL_3)
					{
          	fn_userlog(c_ServiceName,"called by FP Customer from ASP");
					}
          i_mtm_flg =2;       /* if called by FP Customer from ASP */
       }
    }
    else /* success condition */
    {
        if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"c_sys_msg =:%s:",c_sys_msg); /* if called from backoffice EOS  */
				}
        if (strcmp(c_sys_msg,"EOS") == 0 ||  strcmp(c_sys_msg,"EXCPT_EOS") == 0 ||  strcmp(c_sys_msg,"SYS_EVENT") == 0) /*** EXCPT condition added in ver 4.4 ***/ /*** SYS_EVENT added in Ver 5.8 ***/
        {
          i_mtm_flg=1;
        }
        else if (strcmp(c_sys_msg,"MY_EOS") == 0 ) /*** else if loop added in ver 4.4 ***/
        {
           i_mtm_flg =2;
        }
     }
      /* 1.8 ends */
  }
  /*** Code moved from line 901 in Ver 4.4 Ends ***/

 /*validation   ver 1.5 starts*/
  if ((strcmp (st_usr_prfl.c_user_id,"system")!= 0 ) &&
     ((strcmp (st_o_ordbook.c_channel,"SYS")==0 && st_o_ordbook.c_ord_typ !='V' && strcmp(c_sys_msg,"MY_EOS")!=0 )||(strcmp(st_o_ordbook.c_channel,"OFF")==0))) /*** MY_EOS added in ver 4.4 ***/
/** Ver 3.6 , st_o_ordbook.c_ord_typ !='V' ** added ***/
  {
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    fn_errlog( c_ServiceName, "B22008",DEFMSG,c_err_msg.arr);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }  

	if( DEBUG_MSG_LVL_5 ) {         /*  Ver 1.6 : Debug level Change  */
  	fn_userlog(c_ServiceName, "the value of st_o_ordbook.c_spl_flg is [%c] ", st_o_ordbook.c_spl_flg);
  	fn_userlog(c_ServiceName, "the value of st_o_ordbook.c_req_typ is [%c] ", st_o_ordbook.c_req_typ);
	}

  if ((st_o_ordbook.c_spl_flg == 'J'     ) ||
     (st_o_ordbook.c_spl_flg == L2_ORDER ) ||
     (st_o_ordbook.c_spl_flg == L3_ORDER ) ||
     (st_o_ordbook.c_ord_typ == IMMEDIATE_OR_CANCEL))
  {
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
     fn_userlog(c_ServiceName,"In Special flag  Not possible to modify/cancel");
		 fn_errlog( c_ServiceName, "B28533",DEFMSG,c_err_msg.arr);
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
     Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  if((st_o_ordbook.c_ordr_stts == ORDERED )  ||
    (st_o_ordbook.c_ordr_stts==PARTIALLY_EXECUTED))
  { 
		if((st_xchngbook.c_req_typ == CANCELLED ) && (st_xchngbook.c_plcd_stts !=REJECT ))
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
			fn_userlog(c_ServiceName,"In order status Not possible to modify/cancel");
      fn_errlog( c_ServiceName, "B28533",DEFMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_NO, "B28533", 0 );                     /** Ver 4.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
    /* validation end  ver 1.5 ends*/

	/**************** Ver 1.7 Starts *******************/

	if( DEBUG_MSG_LVL_5 )
	{
		fn_userlog(c_ServiceName,"c_req_typ = :%c:",st_xchngbook.c_req_typ);
  	fn_userlog(c_ServiceName,"c_prd_typ =:%c:",st_o_ordbook.c_prd_typ);
	}

	/*** if(st_o_ordbook.c_prd_typ == 'P')		*** Commeneted in Ver 2.8 ***/
  /**	if( st_o_ordbook.c_prd_typ == 'P' || st_o_ordbook.c_prd_typ == 'U' )   *** Ver 2.8 ***    commented and moved to line 808 in Ver 4.4 ***
  {
    fn_userlog(c_ServiceName," 333");
    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0);
    i_ferr [0] = Ferror32;

		***** 1.8 commented
    if ( i_err[0] == -1  && Ferror32 != FNOTPRES)
     {
       fn_userlog(c_ServiceName," 444");
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg1.arr );
       fn_errlog( c_ServiceName, "S31090", FMLMSG, c_err_msg  );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   **Ver 2.2**
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
     else
     {
       fn_userlog(c_ServiceName," 555");
       if( Ferror32 == FNOTPRES )
         {
            fn_userlog(c_ServiceName," 666");
            i_mtm_flg =2;       * if called by FP Customer from ASP *
         }
        else if (Ferror32 != FNOTPRES)
         {
            fn_userlog(c_ServiceName," 777");
            fn_userlog(c_ServiceName,"c_sys_msg =:%s:",c_sys_msg); * if called from backoffice EOS  *
            if (strcmp(c_sys_msg,"EOS") == 0)
            i_mtm_flg=1;
         }
      }
			****** 1.8 ends *
			* 1.8 start *
    	if ( i_err[0] == -1 )
			{
				if (Ferror32 != FNOTPRES)
     		{
       		fn_userlog(c_ServiceName," 444");
       		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg1.arr );
       		fn_errlog( c_ServiceName, "S31095", FMLMSG, c_err_msg  );
       		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       	  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   **Ver 2.2**
       		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     		}
     		else if( Ferror32 == FNOTPRES )
        {
          fn_userlog(c_ServiceName," 666");
          i_mtm_flg =2;       * if called by FP Customer from ASP *
        }
			}
      else * success condition *
      {
        fn_userlog(c_ServiceName," 777");
        fn_userlog(c_ServiceName,"c_sys_msg =:%s:",c_sys_msg); * if called from backoffice EOS  *
        if (strcmp(c_sys_msg,"EOS") == 0)
				{
          i_mtm_flg=1;
				}
      }
			* 1.8 ends *
  }

          *** Commented Ver 4.4 Ends here ****/

	 /**************** Ver 1.7 Ends *******************/

           /**** Ver 4.4 Starts ****/
           if ( strcmp(c_sys_msg,"EOS")==0  )
           {
             st_o_ordbook.c_req_typ='N';
           }
           else if( strcmp(c_sys_msg ,"MY_EOS")==0 )
          {
            st_o_ordbook.c_req_typ='M';
          }
          else if( strcmp(c_sys_msg ,"EXCPT_EOS") == 0 )
          {
             st_o_ordbook.c_req_typ='E';
          }
				  else if( strcmp(c_sys_msg ,"SYS_EVENT") == 0 ) /*** Ver 5.8 ***/
          {
             st_o_ordbook.c_req_typ='S';
          }	
          /**** Ver 4.4 Ends ***/

  /*********** Ver 3.5 Starts Here *****
	rtrim ( st_xchngbook.c_xchng_rmrks ); 
	strcat ( st_xchngbook.c_xchng_rmrks, c_xchng_remarks );
  *********** Ver 3.5 *****************/

  /****** Ver 3.5 Starts Here ***********/
  MEMSET(st_xchngbook.c_xchng_rmrks);  
  if( strcmp (st_usr_prfl.c_user_id,"system")!= 0 )
  { 
   strcpy ( st_xchngbook.c_xchng_rmrks, c_xchng_remarks ); 
	 strcat ( st_xchngbook.c_xchng_rmrks, "User Placed Cancellation"); 
  }
  else
  {
   strcpy ( st_xchngbook.c_xchng_rmrks, c_xchng_remarks );
  }
  /**** Ver 3.5 Ends Here ************/

  EXEC SQL
  	/** SELECT to_char(exg_nxt_trd_dt,'DD-Mon-YYYY'), Commented In Ver 2.7 ***/
  	SELECT TO_CHAR( GREATEST(EXG_NXT_TRD_DT,EXG_TMP_TRD_DT),'DD-Mon-YYYY'), /*** Ver 2.7 ***/ /* version 4.9 */
					 TO_CHAR(SYSDATE,'DD-Mon-YYYY hh24:mi:ss') /* version 4.9 */
   	INTO   :c_trd_dt,
					 :c_sys_dt
   	FROM   EXG_XCHNG_MSTR
   	WHERE  EXG_XCHNG_CD = :st_xchngbook.c_xchng_cd
   	AND    EXG_MKT_TYP  = :c_exg_mkt_type; /*Version 4.9 Hard Parsing Changes*/

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31100",SQLMSG,c_err_msg.arr);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  SETNULL ( c_trd_dt );
  SETNULL ( c_sys_dt );
  strcpy( st_xchngbook.c_mod_trd_dt, (char *) c_trd_dt.arr);

	/**** 1.7 ****
if(st_o_ordbook.c_prd_typ == 'P' && i_mtm_flg == 0)
{

	 EXEC SQL
   SELECT  mtm_roll_stts 
   INTO   :c_roll_stts
   FROM   mtm_appln_stts
   WHERE  mtm_xchng_cd =  :st_xchngbook.c_xchng_cd
   AND    mtm_pipe_id  =  :st_xchngbook.c_pipe_id;

  if( SQLCODE != 0 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg1 );
    fn_errlog( c_ServiceName, "S31105", SQLMSG, c_err_msg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if (c_roll_stts == 'N' )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg1 );
    fn_errlog( c_ServiceName, "B31027", DEFMSG, c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
}*/	

	/*********** Ver 1.7 Starts *****************/

if (st_o_ordbook.c_prd_typ == 'P' && i_mtm_flg == 2)
{
 	fn_userlog( c_ServiceName, "CR-ISEC14-144377 Index/Stock :%c:",  st_o_ordbook.c_ctgry_indstk );   /*** Added in Ver 5.7 ***/ 

	EXEC SQL /* ver 4.9 Hard Parsing Changes */
  SELECT /*** MTM_CAN_REQ,  
         MTM_CAN_SQR_OFF Commented in ver 5.7 ***/
				 /*** DECODE added in Ver 5.7 ***/
				 DECODE ( :st_o_ordbook.c_ctgry_indstk,'I',MTM_CAN_REQ,'S',MTM_CAN_REQ_S,'N' ),
				 DECODE ( :st_o_ordbook.c_ctgry_indstk,'I',MTM_CAN_SQR_OFF,'S',MTM_CAN_SQR_OFF_S,'N' ) 
  INTO :c_can_req,
       :c_can_sqr_off
  FROM MTM_APPLN_STTS 
  WHERE  MTM_XCHNG_CD =  :st_xchngbook.c_xchng_cd 
  AND    MTM_PIPE_ID  =  :st_xchngbook.c_pipe_id; 

  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31110", SQLMSG,c_err_msg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg1.arr );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if ( c_can_req == 'Y' || c_can_sqr_off == 'Y' )
  {
    fn_errlog( c_ServiceName, "B31028",DEFMSG, c_err_msg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg1.arr );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

}

/*********** Ver 1.7 Ends ***************/

/*** Ver 2.8 starts ***/
if (st_o_ordbook.c_prd_typ == 'U' && i_mtm_flg == 2)
{
 	fn_userlog( c_ServiceName, "CR-ISEC14-144377 Index/Stock :%c:",  st_o_ordbook.c_ctgry_indstk );   /*** Added in Ver 5.7 ***/ 

	EXEC SQL /* Ver 4.9 Hard parsing changes */
  SELECT /*** MTM_SLTP_EOS_FLG Commented in Ver 5.7 ***/
				 /*** DECODE added in Ver 5.7 ***/
				 DECODE ( :st_o_ordbook.c_ctgry_indstk,'I',MTM_SLTP_EOS_FLG,'S',MTM_SLTP_EOS_FLG_S,'N' )
  INTO	 :c_mtm_eos
  FROM	 MTM_APPLN_STTS 
  WHERE  MTM_XCHNG_CD =  :st_xchngbook.c_xchng_cd 
  AND    MTM_PIPE_ID  =  :st_xchngbook.c_pipe_id; 

  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31115", SQLMSG,c_err_msg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg1.arr );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if ( c_mtm_eos == 'Y')
  {
    fn_errlog( c_ServiceName, "B35014",DEFMSG, c_err_msg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg1.arr );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
}
/*** Ver 2.8 Ends ***/

     /******  Ver 3.8 Starts  ******************************/

   if(strcmp(c_sys_msg,"EOS")!=0 && st_o_ordbook.c_prd_typ=='U' && strcmp(c_sys_msg,"MY_EOS")!=0  && strcmp(c_sys_msg,"EXCPT_EOS")!=0 && strcmp(c_sys_msg,"SYS_EVENT")!=0 ) /*** MY_EOS  and EXCPT_EOS check added in ver 4.4 ***/ /*** SYS_EVENT added in Ver 5.8 ***/
   {
      EXEC SQL
       SELECT FOD_ORDR_STTS,
              FOD_SLTP_ORDR_RFRNC,
							FOD_FC_FLAG /*** Ver 5.8 ***/
       INTO   :c_ordr_stts,
              :c_tag_ordr_ref,
							:c_fc_flag  /*** Ver 5.8 ***/
			FROM   FOD_FO_ORDR_DTLS
       WHERE  FOD_ORDR_RFRNC = :st_xchngbook.c_ordr_rfrnc
       AND    FOD_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt;

  if( SQLCODE != 0 && SQLCODE == NO_DATA_FOUND)
  {

    fn_errlog(c_ServiceName, "S31120", SQLMSG, c_err_msg.arr);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );			/***	VQC	***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

  EXEC SQL
   SELECT FOD_ORDR_STTS
   INTO   :c_tag_ordr_stts
   FROM   FOD_FO_ORDR_DTLS
   WHERE  FOD_ORDR_RFRNC = :c_tag_ordr_ref;
  if( SQLCODE != 0 && SQLCODE == NO_DATA_FOUND)
  {

    fn_errlog(c_ServiceName, "S31125", SQLMSG, c_err_msg.arr);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );			/***	VQC	***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

	 if( c_fc_flag != 'T' ) /*** Skip cond in Ver 5.8 ***/
	 {
    if
    (
      (
        (  c_ordr_stts == 'O' && c_tag_ordr_stts == 'O') ||
        (  c_ordr_stts == 'O' && c_tag_ordr_stts == 'J'  )||
        (  c_ordr_stts == 'O' && c_tag_ordr_stts == 'C' ) ||
        (  c_ordr_stts == 'J' && c_tag_ordr_stts == 'O' ) ||
        (  c_ordr_stts == 'C' && c_tag_ordr_stts == 'O')
      ) &&
      ( c_ordr_stts !='C' ) &&
      ( c_ordr_stts !='J')
    )
    {
      fn_userlog(c_ServiceName,"Order is valid for Cancellation..continue...");
    }
    else
    {
      fn_errlog(c_ServiceName, "S31130", LIBMSG, c_err_msg.arr);
      strcpy(c_err_msg.arr,"Cancellation not allowed, please verify the order status ");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
    }
	 } /*** Ver 5.8 ***/
	 else
	 {
			if (c_ordr_stts != 'O')
			{
	      fn_errlog(c_ServiceName, "S31135", LIBMSG, c_err_msg.arr);
      	strcpy(c_err_msg.arr,"Cancellation not allowed, please verify the order status ");
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
      	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
			}
	 }
  }
 /********** ** Ver 3.8 Ends *******************/


    /* Ver 1.2 */
  if ( (st_xchngbook.c_plcd_stts == 'R'    )   && /* Request Placed */
       ( st_xchngbook.c_req_typ == 'C'     )   )  /* Request Cancelled */
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    fn_errlog( c_ServiceName, "B28568",DEFMSG,c_err_msg.arr);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
    /* Ver 1.2 */


	if ( st_o_ordbook.c_ordr_stts == REQUESTED )
  {
		st_xchngbook.c_plcd_stts = ACCEPT;
		st_xchngbook.c_rms_prcsd_flg = NOT_PROCESSED;
		st_xchngbook.l_ors_msg_typ = ORS_NEW_ORD_ACPT;
  	strcpy( st_xchngbook.c_ack_tm, (char *) c_sys_dt.arr);
  	strcpy( st_xchngbook.c_entry_dt_tm, (char *) c_sys_dt.arr);
  	/** strcpy( st_xchngbook.c_xchng_rmrks, "CANCELLED BY CLIENT"); commented in ver 5.1 **/
	
		if (strcmp(c_xchng_remarks,"BAN") == 0)   /*** Ver 2.7 ***/
    {
      strcpy( st_xchngbook.c_xchng_rmrks ,"System placed Cancellation as stock under BAN period");
    } 
    /** ver 5.1 starts **/
    else if( strstr(st_xchngbook.c_xchng_rmrks,"Physical Settlement EOS") )
    {
      fn_userlog(c_ServiceName,"Existing remarks are  :%s: and :%s:",st_xchngbook.c_xchng_rmrks,c_xchng_remarks); 
      strcpy( st_xchngbook.c_xchng_rmrks, "Physical Settlement EOS System placed Cancellation");
    }
    else
    {
      strcpy( st_xchngbook.c_xchng_rmrks, "CANCELLED BY CLIENT");
    }
    /** ver 5.1 ends ***/
		st_xchngbook.l_dwnld_flg = NOT_DOWNLOAD;
		st_xchngbook.d_jiffy = 0;
		st_xchngbook.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;

		i_ip_len = sizeof ( struct vw_xchngbook );
  	i_op_len = sizeof ( struct vw_xchngbook );

  	fn_cpy_ddr ( st_xchngbook.c_rout_crt );
    if(DEBUG_MSG_LVL_3) /*** DEBUG_MSG_LVL_3 Added in Ver 4.3 ***/
		{
			fn_userlog(c_ServiceName,"Sachin st_xchngbook.l_bit_flg :%ld:",st_xchngbook.l_bit_flg);
		}
   
  	i_returncode = fn_call_svc( c_ServiceName,
                              	c_err_msg.arr,
                              	&st_xchngbook,
                              	&st_xchngbook,
                              	"vw_xchngbook",
                              	"vw_xchngbook",
                              	i_ip_len,
                              	i_op_len,
                              	0,
                              	"SFO_UPD_XCHNGBK" );
   
  
  	if ( i_returncode != SUCC_BFR )
  	{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
    

  	fn_cpy_ddr ( st_xchngbook.c_rout_crt );
   
  	i_returncode = fn_call_svc( c_ServiceName,
                              	c_err_msg.arr,
                              	&st_xchngbook,
                              	&st_xchngbook,
                              	"vw_xchngbook",
                              	"vw_xchngbook",
                              	i_ip_len,
                              	i_op_len,
                              	0,
                              	"SFO_FUT_ACK" );
   
  	if ( i_returncode != SUCC_BFR )
  	{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

	} /* End of order in REQUESTED state */

  /** Ver 1.4 added to handle cancellation rejection in case of partial execution  **/

  if ( ( ( st_o_ordbook.c_ordr_stts == ORDERED ) || ( st_o_ordbook.c_ordr_stts == PARTIALLY_EXECUTED ) ) &&
     ( st_xchngbook.c_plcd_stts == 'R'     )   )  /* Request Placed */
  {
		st_xchngbook.c_plcd_stts = REJECT;
		st_xchngbook.c_rms_prcsd_flg = NOT_PROCESSED;
		st_xchngbook.l_ors_msg_typ = ORS_MOD_ORD_RJCT;
  	strcpy( st_xchngbook.c_ack_tm, (char *) c_sys_dt.arr);
  	strcpy( st_xchngbook.c_entry_dt_tm, (char *) c_sys_dt.arr);
    /*** strcpy( st_xchngbook.c_xchng_rmrks, "CANCELLED BY CLIENT"); commented in ver 5.1 ***/ 
    /*** ver 5.1 starts ***/ 
    if( strstr(st_xchngbook.c_xchng_rmrks,"Physical Settlement EOS") )
    {
      fn_userlog(c_ServiceName,"Existing remark was :%s:",st_xchngbook.c_xchng_rmrks);
      strcpy( st_xchngbook.c_xchng_rmrks, "Physical Settlement EOS System placed Cancellation");
    }
    else
    {
  	  strcpy( st_xchngbook.c_xchng_rmrks, "CANCELLED BY CLIENT");
    }
    /*** ver 5.1 ends ***/
		st_xchngbook.l_dwnld_flg = NOT_DOWNLOAD;
		st_xchngbook.d_jiffy = 0;
		st_xchngbook.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;

		i_ip_len = sizeof ( struct vw_xchngbook );
  	i_op_len = sizeof ( struct vw_xchngbook );

  	fn_cpy_ddr ( st_xchngbook.c_rout_crt );
   
  	i_returncode = fn_call_svc( c_ServiceName,
                              	c_err_msg.arr,
                              	&st_xchngbook,
                              	&st_xchngbook,
                              	"vw_xchngbook",
                              	"vw_xchngbook",
                              	i_ip_len,
                              	i_op_len,
                              	0,
                              	"SFO_UPD_XCHNGBK" );
      
  	if ( i_returncode != SUCC_BFR )
  	{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

  	fn_cpy_ddr ( st_xchngbook.c_rout_crt );

  	i_returncode = fn_call_svc( c_ServiceName,
                              	c_err_msg.arr,
                              	&st_xchngbook,
                              	&st_xchngbook,
                              	"vw_xchngbook",
                              	"vw_xchngbook",
                              	i_ip_len,
                              	i_op_len,
                              	0,
                              	"SFO_FUT_ACK" );
   
  	if ( i_returncode != SUCC_BFR )
  	{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

	}

  strcpy(st_pstn_actn.c_user_id, st_usr_prfl.c_user_id);
  st_pstn_actn.l_session_id  = st_usr_prfl.l_session_id;
  strcpy(st_pstn_actn.c_cln_mtch_accnt,st_o_ordbook.c_cln_mtch_accnt);
  st_pstn_actn.l_eba_cntrct_id = st_o_ordbook.l_eba_cntrct_id;
  strcpy(st_pstn_actn.c_xchng_cd,st_o_ordbook.c_xchng_cd);
  st_pstn_actn.c_prd_typ = st_o_ordbook.c_prd_typ;
  strcpy(st_pstn_actn.c_undrlyng,st_o_ordbook.c_undrlyng);
  strcpy(st_pstn_actn.c_expry_dt,st_o_ordbook.c_expry_dt);
  st_pstn_actn.c_exrc_typ = st_o_ordbook.c_exrc_typ;
  st_pstn_actn.c_opt_typ = st_o_ordbook.c_opt_typ;
  st_pstn_actn.l_strike_prc = st_o_ordbook.l_strike_prc;
  st_pstn_actn.c_ctgry_indstk = st_o_ordbook.c_ctgry_indstk;
  st_pstn_actn.l_ca_lvl = st_o_ordbook.l_ca_lvl;
  st_pstn_actn.c_cntrct_tag = '*';

  st_pstn_actn.l_actn_typ = ORS_CAN_ORD_REQ;
  st_pstn_actn.c_trnsctn_flw = st_o_ordbook.c_ordr_flw;
  st_pstn_actn.l_orgnl_qty = st_o_ordbook.l_ord_tot_qty;
  st_pstn_actn.l_orgnl_rt  = st_o_ordbook.l_ord_lmt_rt;
  st_pstn_actn.l_new_qty = 0;
  st_pstn_actn.l_new_rt  = 0;
  st_pstn_actn.l_exec_qty  = st_o_ordbook.l_exctd_qty;
  st_pstn_actn.l_exec_rt  = 0;
  st_pstn_actn.l_fresh_qty  = 0;
  st_pstn_actn.l_cover_qty  = 0;
  st_pstn_actn.d_add_mrgn_amt  = 0;

  st_pstn_actn.l_curr_rt = 0;
  sprintf(st_pstn_actn.c_ref_rmrks,"%s-%ld",st_o_ordbook.c_ordr_rfrnc,
                               st_o_ordbook.l_mdfctn_cntr + 1);
  rtrim(st_pstn_actn.c_ref_rmrks);

	if ( st_xchngbook.c_spl_flg == ROLLOVER_WITH_SPREAD)  /*** Added in Ver 5.3 ***/
  {
    st_pstn_actn.c_nkd_blkd_flg = ROLLOVER_WITH_SPREAD;
  }

  i_ip_len = sizeof ( struct vw_pstn_actn );
  i_op_len = sizeof ( struct vw_pstn_actn );

  fn_cpy_ddr ( st_pstn_actn.c_rout_crt );

	/************** Ver 1.7 Starts ****************/

	/** if(st_pstn_actn.c_prd_typ == FUTURES) ** Commented in Ver 5.3 **/
	if(st_pstn_actn.c_prd_typ == FUTURES && st_xchngbook.c_spl_flg != ROLLOVER_WITH_SPREAD) /** Ver 5.3 **/
	{
 
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg.arr,
                              &st_pstn_actn,
                              &st_pstn_actn,
                              "vw_pstn_actn",
                              "vw_pstn_actn",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_FUT_POS" );
 
   if ( i_returncode != SUCC_BFR )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
}
	else if(st_pstn_actn.c_prd_typ == FUTURE_PLUS )
{
i_returncode = fn_call_svc( c_ServiceName,
                            c_err_msg.arr,
                            &st_pstn_actn,
                            &st_pstn_actn,
                            "vw_pstn_actn",
                            "vw_pstn_actn",
                            i_ip_len,
                            i_op_len,
                            0,
                            "SFO_UPD_FUT_PLS" );
  
   if ( i_returncode != SUCC_BFR )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
}

/************** Ver 1.7 Ends ****************/


		i_ip_len = sizeof ( struct vw_sequence );
    i_op_len = sizeof ( struct vw_sequence );

    strcpy( st_s_sequence.c_pipe_id, st_xchngbook.c_pipe_id );
    strcpy( st_s_sequence.c_trd_dt, st_xchngbook.c_mod_trd_dt );
    st_s_sequence.c_rqst_typ = GET_XCHNG_SEQ;

  	fn_cpy_ddr ( st_s_sequence.c_rout_crt );
   
		i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg.arr,
                                &st_s_sequence,
                                &st_r_sequence,
                                "vw_sequence",
                                "vw_sequence",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_GET_SEQ" );
  
       if ( i_returncode != SUCC_BFR )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		l_xchng_seq_num = st_r_sequence.l_seq_num;

		st_xchngbook.l_mdfctn_cntr = st_o_ordbook.l_mdfctn_cntr + 1;

    st_xchngbook.l_ord_seq = l_xchng_seq_num;

    st_xchngbook.c_req_typ = CANCEL;
    st_xchngbook.c_ex_ordr_typ = ORDINARY_ORDER;
		st_xchngbook.l_ord_tot_qty = st_o_ordbook.l_ord_tot_qty; 

		strcpy( st_xchngbook.c_valid_dt ,st_o_ordbook.c_valid_dt);
	  st_xchngbook.c_slm_flg = st_o_ordbook.c_slm_flg;
		st_xchngbook.l_dsclsd_qty = st_o_ordbook.l_dsclsd_qty;
		st_xchngbook.l_ord_lmt_rt = st_o_ordbook.l_ord_lmt_rt;
		st_xchngbook.l_stp_lss_tgr = st_o_ordbook.l_stp_lss_tgr;
		st_xchngbook.c_plcd_stts = 'R'; /* Request Placed */
		st_xchngbook.c_spl_flg = st_o_ordbook.c_spl_flg;

    strcpy ( st_xchngbook.c_rqst_tm , (char *)c_sys_dt.arr );	
  	strcpy( st_xchngbook.c_qt_tm, "\0" );
		st_xchngbook.l_quote = 0;
		st_xchngbook.c_oprn_typ = INSERTION_ON_ORDER_MODIFICATION;
		/* Ver 2.0 Begins */

		if( c_fum_mrkt_typ == EXTND_MRKT && c_fcm_mrkt_typ == EXTND_MRKT )
		{
			st_xchngbook.c_mkrt_typ = 'X';
		}
		else
		{
			st_xchngbook.c_mkrt_typ = 'N';
		}

		/* Ver 2.0 Ends */

		i_ip_len = sizeof ( struct vw_xchngbook );
  	i_op_len = sizeof ( struct vw_xchngbook );

  	fn_cpy_ddr ( st_xchngbook.c_rout_crt );
		/*** Commented in Ver 2.6 ***
		i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_xchngbook,
                              &st_xchngbook,
                              "vw_xchngbook",
                              "vw_xchngbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_XCHNGBK" );
		*************************/

		/*** Added in Ver 2.6 ***/
		i_returncode = fn_upd_xchngbk  ( c_ServiceName,
																	 &st_xchngbook,
																	 c_ip_address,
																	 st_usr_prfl.c_cln_mtch_accnt,		/*** Ver 3.0 ***/
																	 c_err_msg.arr,
                                   l_init_sltp_rt,  /*** Ver 4.6 ****/
                                   l_init_lmt_rt,   /*** Ver 4.6 ****/
                                   l_lTP,           /*** Ver 4.6 ****/
                                   l_trail_amt,     /*** Ver 4.6 ****/
                                   l_lmt_offset,    /*** Ver 4.6 ****/
                                   c_prcimpv_flg,   /*** Ver 4.6 ****/
                                   st_usr_prfl.l_session_id   /*** Ver 5.9 ****/
																 );
		/************************/

  if ( i_returncode != SUCC_BFR )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/* Ver 2.0 Comment Begins 
  ****************************     Ver 1.9 Starts          **************************
  *** Code for temporary usage of immediate compliance release for extended market.**
  *** Shall be aligned with Order book and xchnge book views in next view release. **

  if( c_fum_mrkt_typ == EXTND_MRKT && c_fcm_mrkt_typ == EXTND_MRKT )
  {
					EXEC SQL
						UPDATE  fxb_fo_xchng_book
						SET     fxb_mrkt_typ = 'X'
						WHERE   fxb_ordr_rfrnc = :st_xchngbook.c_ordr_rfrnc
						AND     fxb_mdfctn_cntr = :st_xchngbook.l_mdfctn_cntr ;

					if(SQLCODE != 0)
					{
						fn_errlog ( c_ServiceName, "S31140", SQLMSG, c_err_msg);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
					}
  }

  ******************     Ver 1.9 Ends            ************************
	Ver 2.0 Comment Ends */

  st_o_ordbook.c_oprn_typ = UPDATE_MOD_CNTR;

	i_ip_len = sizeof ( struct vw_orderbook );
  i_op_len = sizeof ( struct vw_orderbook );
	
  fn_cpy_ddr ( st_o_ordbook.c_rout_crt );

	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg.arr,
                              &st_o_ordbook,
                              &st_o_ordbook,
                              "vw_orderbook",
                              "vw_orderbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_ORDRBK" );

  if ( i_returncode != SUCC_BFR )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if ( st_o_ordbook.c_ordr_stts == REQUESTED )
  {
		st_xchngbook.c_plcd_stts = ACCEPT;
		st_xchngbook.c_rms_prcsd_flg = NOT_PROCESSED;
		st_xchngbook.l_ors_msg_typ = ORS_CAN_ORD_ACPT;
  	strcpy( st_xchngbook.c_ack_tm, (char *) c_sys_dt.arr);
  	strcpy( st_xchngbook.c_entry_dt_tm, (char *) c_sys_dt.arr);
  	strcpy( st_xchngbook.c_xchng_rmrks, "\0");
		st_xchngbook.l_dwnld_flg = NOT_DOWNLOAD;
		st_xchngbook.d_jiffy = 0;
		st_xchngbook.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;

    /** ver 5.4 starts ***/
    if(DEBUG_MSG_LVL_0)
    {
       fn_userlog(c_ServiceName,"IN REQUESTED ORS_CAN_ORD_ACPT st_xchngbook.l_xchng_can_qty :%ld: and st_xchngbook.l_ors_msg_typ  is :%ld:",st_xchngbook.l_xchng_can_qty,st_xchngbook.l_ors_msg_typ);
    }
    st_xchngbook.l_xchng_can_qty = 0;
    /** ver 5.4 ends **/
		i_ip_len = sizeof ( struct vw_xchngbook );
  	i_op_len = sizeof ( struct vw_xchngbook );

  	fn_cpy_ddr ( st_xchngbook.c_rout_crt );
    
  	i_returncode = fn_call_svc( c_ServiceName,
                              	c_err_msg.arr,
                              	&st_xchngbook,
                              	&st_xchngbook,
                              	"vw_xchngbook",
                              	"vw_xchngbook",
                              	i_ip_len,
                              	i_op_len,
                              	0,
                              	"SFO_UPD_XCHNGBK" );
     
  	if ( i_returncode != SUCC_BFR )
  	{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}


  	fn_cpy_ddr ( st_xchngbook.c_rout_crt );

   
  	i_returncode = fn_call_svc( c_ServiceName,
                              	c_err_msg.arr,
                              	&st_xchngbook,
                              	&st_xchngbook,
                              	"vw_xchngbook",
                              	"vw_xchngbook",
                              	i_ip_len,
                              	i_op_len,
                              	0,
                              	"SFO_FUT_ACK" );
    

   	if ( i_returncode != SUCC_BFR )
  	{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

	}

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


	if ( i_trnsctn == LOCAL_TRNSCTN )
	{
		/********************************************************/
    /****Changes for Tux4 Triggers***************************/
    /********************************************************/
		/*
  	fn_pst_trg( c_ServiceName, "TRG_LOOK_TAB", "TRG_LOOK_TAB",
                             st_xchngbook.c_pipe_id );
		*/

		 /* To post the Trigger in Tux3 Domain Call the service SFO_FOS_TRG */
    strcpy ( c_fno_dmn_nm, "FNO" );
    strcpy ( c_fno_trg_nm, "TRG_LOOK_TAB" );
    strcpy ( c_fno_trg_dat, "TRG_LOOK_TAB" );

    i_returncode = fn_call_svc_fml ( c_ServiceName,
                                    c_err_msg.arr,
                                    "SFO_FOS_TRG",
                                    0,
                                    4,
																		0,
                                    FFO_DMN_NM, (char *)c_fno_dmn_nm,
                                    FFO_TRG_NM, (char *)c_fno_trg_nm,
                                    FFO_ABT_TRG_DATA, (char *)c_fno_trg_dat,
                                    FFO_ABT_FILTER, (char *)st_xchngbook.c_pipe_id);

    if ( i_returncode != SUCC_BFR )
    {
      fn_errlog( c_ServiceName, "S31145", LIBMSG, c_err_msg.arr  );
    }

		 /********************************************************/
    /****Changes for Tux4 Triggers***************************/
    /********************************************************/
	}

	i_actn_id = 0;    /**Ver 2.2**/
  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.2**/
	Fadd32(ptr_fml_Ibuf,FFO_MDFCTN_CNTR,(char *)&st_xchngbook.l_mdfctn_cntr,0); /*** Ver 5.3 ***/
  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Ibuf, 0 , 0 );	
}

int fn_check_ord_fut( char *c_ServiceName,
                  struct vw_orderbook *ptr_o_st_ordbook,
                  char *c_fum_mrkt_typ,                 /* Ver 1.9 */
                  char *c_fcm_mrkt_typ,                 /* Ver 1.9 */
                  struct vw_err_msg *ptr_st_err_msg ) 
{
  char c_prdct_typ='F'; /* ver 4.9 */
/*char c_err_msg[256];			Commented In VQC	***/
  char c_exg_crrnt_stts;
  char c_exg_extnd_stts;    /***  Ver 1.9 ***/
  char c_exg_ovrnght_stts;    /***  Ver 2.7 ***/
  char c_exg_ovrnght_trd_dt[23];    /***  Ver 2.7 ***/
  char c_fum_mkt_typ;                 /* Ver 1.9 */
  char c_fcm_mkt_typ;                 /* Ver 1.9 */

  EXEC SQL /* ver 4.9 Hard parsing changes */
     SELECT EXG_CRRNT_STTS, 
            EXG_EXTND_MRKT_STTS,      /*** Ver 1.9  ***/ 
           	EXG_TMP_MKT_STTS,          /*** Ver 2.7  ***/ 
           	TO_CHAR ( EXG_TMP_TRD_DT , 'dd-Mon-yyyy' ) /*** Ver 2.7  ***/ 

     INTO   :c_exg_crrnt_stts,
            :c_exg_extnd_stts,        /*** Ver 1.9  ***/
            :c_exg_ovrnght_stts,      /*** Ver 2.7  ***/
            :c_exg_ovrnght_trd_dt     /*** Ver 2.7  ***/
     FROM   EXG_XCHNG_MSTR 
     WHERE  EXG_XCHNG_CD = :ptr_o_st_ordbook->c_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31150",SQLMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

  /* Ver 1.9 Fetch */
  /*** Commented in Ver 3.9 ***
  EXEC SQL
        SELECT fcm_mrkt_typ
        INTO   :c_fcm_mkt_typ
        FROM   fcm_fo_cntrct_mstr
        WHERE  fcm_xchng_cd   =:ptr_o_st_ordbook->c_xchng_cd
        *** AND    fcm_prdct_typ  =decode(:ptr_o_st_ordbook->c_prd_typ,'P','F',:ptr_o_st_ordbook->c_prd_typ) ***Commented in Ver 2.8 **
				AND    fcm_prdct_typ  =decode(:ptr_o_st_ordbook->c_prd_typ,'P','F','U','F',:ptr_o_st_ordbook->c_prd_typ)	*** Ver 2.8 ***
        AND    fcm_undrlyng   =:ptr_o_st_ordbook->c_undrlyng
        AND    fcm_expry_dt   =:ptr_o_st_ordbook->c_expry_dt
        AND    fcm_exer_typ   =:ptr_o_st_ordbook->c_exrc_typ
        AND    fcm_opt_typ    =:ptr_o_st_ordbook->c_opt_typ
        AND    fcm_strk_prc   =:ptr_o_st_ordbook->l_strike_prc;

  ***/
  /*** Ver 3.9 Starts ***/

  EXEC SQL /* ver 4.9 Hard parsing changes */
        SELECT FTQ_MRKT_TYP 
        INTO   :c_fcm_mkt_typ
        FROM   FTQ_FO_TRD_QT 
        WHERE  FTQ_XCHNG_CD   =:ptr_o_st_ordbook->c_xchng_cd 
        AND    FTQ_PRDCT_TYP  =DECODE(:ptr_o_st_ordbook->c_prd_typ,'P','F','U','F',:ptr_o_st_ordbook->c_prd_typ)   /* version 4.9 */  
        AND    FTQ_UNDRLYNG   =:ptr_o_st_ordbook->c_undrlyng /* ver 4.9 */
        AND    FTQ_EXPRY_DT   =:ptr_o_st_ordbook->c_expry_dt /* ver 4.9 */
        AND    FTQ_EXER_TYP   =:ptr_o_st_ordbook->c_exrc_typ /* ver 4.9 */
        AND    FTQ_OPT_TYP    =:ptr_o_st_ordbook->c_opt_typ /* ver 4.9 */
        AND    FTQ_STRK_PRC   =:ptr_o_st_ordbook->l_strike_prc; /* ver 4.9 */

  /*** Ver 3.9 Ends   ***/ 

  if ( SQLCODE != 0 )
  {
     fn_errlog( c_ServiceName, "S31155",SQLMSG,ptr_st_err_msg->c_err_msg);
     return FAILURE;
  }

  *c_fcm_mrkt_typ = c_fcm_mkt_typ;
 
  EXEC SQL
        SELECT FUM_MRKT_TYP /* ver 4.9 Hard parsing changes */
        INTO   :c_fum_mkt_typ
        FROM   FUM_FO_UNDRLYNG_MSTR /* ver 4.9 Hard parsing changes */
        WHERE  FUM_XCHNG_CD  =:ptr_o_st_ordbook->c_xchng_cd /* ver 4.9 Hard parsing changes*/
        /*** AND    fum_prdct_typ =decode(:ptr_o_st_ordbook->c_prd_typ,'P','F',:ptr_o_st_ordbook->c_prd_typ)  ***Commented in Ver 2.8 **/
     /*   AND    FUM_PRDCT_TYP =DECODE(:ptr_o_st_ordbook->c_prd_typ,'P','F','U','F',:ptr_o_st_ordbook->c_prd_typ)	*/	/*** Ver 2.8 ***/ 
        AND    FUM_UNDRLYNG  =:ptr_o_st_ordbook->c_undrlyng /* ver 4.9 Hard parsing changes */        
        AND   FUM_PRDCT_TYP =:c_prdct_typ; /* ver 4.9 */

  if ( SQLCODE != 0 )
  {
     fn_errlog( c_ServiceName, "S31160",SQLMSG,ptr_st_err_msg->c_err_msg);
     return FAILURE;
  }

  *c_fum_mrkt_typ = c_fum_mkt_typ;
  /* Ver 1.9 ends */

  /** Orders cannnot be cancelled when the Exchange is under Expiry **/
  /*** if ( c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY ) Commented In Ver 2.7 ***/
  if ( c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY && c_exg_ovrnght_stts != EXCHANGE_OPEN ) /*** Ver 2.7 ***/
  {
    /*  commented in Ver 1.9 
    fn_errlog( c_ServiceName, "B28518",DEFMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;
        comment ends */
    
    /**********     Ver 1.9 Starts      **********/
    /*** if( c_exg_extnd_stts == EXCHANGE_UNDER_EXPIRY  ) Commented In Ver 2.7 ***/
    if( c_exg_extnd_stts == EXCHANGE_UNDER_EXPIRY ||  c_exg_ovrnght_stts != EXCHANGE_OPEN )  /*** Ver 2.7 ***/
    {
      fn_errlog( c_ServiceName, "B28518",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
    else
    {

      if (c_fum_mkt_typ == NORMAL_MRKT )      /***  Underlying Level Check  ***/
      {
        fn_userlog( c_ServiceName,"This Underlying Is Disabled For Extended Market Hours");
        fn_errlog( c_ServiceName, "B66066",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }

      if ( c_fcm_mkt_typ == NORMAL_MRKT )     /***  Contract Level Check  ***/
      {
        fn_userlog( c_ServiceName,"This Contract Is Disabled For Extended Market Hours");
        fn_errlog( c_ServiceName, "B66066",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
    }
    /**********     Ver 1.9 Ends      **********/

  }

  /** Orders placed during Market hour cannnot be cancelled when the Exchange is under Expiry even if ON market is open  **/

	/*** Checking if order placed during market hour ***/

	if( c_exg_ovrnght_stts == EXCHANGE_OPEN && c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY) /*** Ver 2.7 ***/
	{
	 	if ( strcmp(c_exg_ovrnght_trd_dt,ptr_o_st_ordbook->c_trd_dt)!=0)
		{
			fn_userlog( c_ServiceName," Cannot Cancel a order placed in Normal Market hour when market is under expiry ");
      fn_errlog( c_ServiceName, "B28518",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
		}	

	}

  /** Cancellation of order is possible only in REQUESTED, ORDERED **/
  /** and PARTIALLY_EXECUTED states                                **/
  if ( ( ptr_o_st_ordbook->c_ordr_stts != REQUESTED ) &&
       ( ptr_o_st_ordbook->c_ordr_stts != ORDERED ) &&
       ( ptr_o_st_ordbook->c_ordr_stts != PARTIALLY_EXECUTED ) )
  {
    fn_errlog( c_ServiceName, "B28533", DEFMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

	return SUCCESS;
}
