/********************************************************************************************************/
/*	Program             : SFO_CNV_SPAN2NRML                                                             */
/*                                                                                                      */
/*                                                                                                      */
/*  Log                 : 1.0     07-Sep-2011     																											*/
/*  Log                 : 1.1     02-Apr-2012     																											*/
/*                      :	1.2			14-May-2012                                                           */
/*											:	1.3			28-May-2012																														*/
/*                      : 1.4     19-Jun-2012                                                           */
/*											:	1.5     25-Jun-2012                                                           */
/*											:	1.6     04-Jul-2012                                                           */
/*											:	1.7     17-Jul-2012                                                           */
/*											:	1.8			02-Aug-2012																														*/
/*				              : 1.9     24-Sep-2012                                                           */
/*				              : 2.0     29-Nov-2012                                                           */
/*				              : 2.1     02-Aug-2013                                                           */
/*											: 2.2			18-Jul-2014                                                           */
/*                      : 2.3     09-Sep-2014																														*/
/*                      : 2.4     27-Nov-2014                                                           */
/*                      : 2.6     17-Feb-2013                                                           */
/*                      : 2.7     14-Jul-2015                                                           */
/*                      : 2.8     21-Aug-2015                                                           */
/*                      : 2.9     01-Nov-2015                                                           */
/*                      : 3.0     13-Jan-2016                                                           */
/*											: 3.1			04-Jul-2016																														*/
/*                      : 3.2     01-Aug-2016                                                           */
/*                      : 3.3     25-Sep-2018                                                           */ 
/*											: 3.4			14-Feb-2019																														*/
/*											: 3.5			12-Apr-2019																														*/
/*                      : 3.6     22-Aug-2019                                                           */
/*                      : 3.7     24-Oct-2019                                                           */
/*                      : 3.8     22-Dec-2020                                                           */
/*                      : 3.9     21-Jan-2021                                                           */
/*                      : 4.0     26-Oct-2021                                                           */
/********************************************************************************************************/
/*                                                                                                      */
/*  1.0   -   New Release                                                                               */
/*  1.1   -   Bug Fix (Swati A.B )																																			*/
/*  1.2		-		Changes For Reports	And Transaction Handeling(Mahesh Shinde)                              */
/*	1.3		-		T & C Changes	Sandeep Patil																																*/
/*  1.4   -   Front end option for mapping of SPAN customers to I-SEC RMS (Navina) - 19-Jun-2012        */
/*  1.5		-		Revert changes made in Ver 1.3 & TNC bug fix (Navina)	- 25-Jun-2012                       */
/*  1.6		-	  Conversion can posible in Closed market status only 	- Mahesh Shinde 										*/				
/*  1.7		-	  Error Message Handling 																- Mahesh Shinde 										*/
/*	1.8		-		TNC Changes Aplly Again																-	Sandeep	Patil											*/	
/*  1.9   -   Fix added to convert position when margin blocked is zero.  (Navina) - 24-Sep-2012        */
/*	2.0		-		FNO BSE Changes        																-	Sandip	Tambe											*/	
/*	2.1		-		SPAN/Non-SPAN conversion changes in RIA 									-	Swati A.B											*/	
/*	2.2		-		Conversion calculator on trading screen								- Navina D.   											*/
/*  2.3   -   View to FML changes                                   - Samip M														*/
/*  2.4   -   Channel WEH added for HTML5                           - Anand Dhopte                      */
/*  2.6   -   Changes for AUTO MTM                                  - Vishnu  Nair                      */
/*  2.7   -   CR_ISEC14_66184: Margin cal type casting fix for Options | Navina D                       */
/*  2.8   -   Contract Master and Trade Quote Table Merger Changes     | Anand Dhopte                   */
/*  2.9   -   Trigger Price Changes                              | Sachin Birje                         */
/*  3.0   -   Trigger Price calculation for Option Sell positions only  | Sachin Birje                  */
/*  3.1   -   Check Session ip common function changes  | Navina D.                                     */
/*  3.2   -   AUTOMTM_COUNT_MAILER_CHANGES | Tanmay W.																									*/
/*  3.3   -   Time is updated during updating flag  | Varadraj Gramopadhye                              */
/*	3.4		-		Error message handling	| Bhushan Harekar																									*/
/*  3.5   -   Anytime conversion request SPAN to Non SPAN and                                           */
/*            vice versa with existing online conversion  | Suchita Dabir                               */ 
/*  3.6   -   Delivery margin changes  | Suchita Dabir                                                  */
/*  3.7   -   Ipv6 Format | Tanmay Patel                                                                */
/*  3.8   -   Different ELM% for Deep OTM Option for SPAN and Non SPAN CR-ISEC14-141383 | Anuj Pancholi */ 
/*  3.9   -   Minor Change for Deep OTM option strikes  (Anuj Pancholi)                                 */
/*  4.0   -   Average Price for PNL (Mahesh Regulwar)                                                   */
/********************************************************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_pos.h>
#include <fo_fml_def.h>
#include <eba_to_ors.h>
/** #include <fo_view_def.h> **/  /*** Commented for Ver 2.3 ***/
#include <fo_view_def.h>        /*** Added for Ver 2.3 ***/
#include <fn_span_lib.h>
#include <fn_log.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <math.h>
#include <fn_val_ord.h>
#include <fn_session.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>
#include <ifa_app_hdr.h> /*** ver 3.5 ***/
#include <fml_def.h> /*** ver 3.5 ***/

#define UPPER	1
#define LOWER	2
#define MYMSG_AND_NOTFCN        'G' /*** Ver 3.5 ***/


EXEC SQL INCLUDE "table/fum_fo_undrlyng_mstr.h";
EXEC SQL INCLUDE "table/lsm_lck_sms_msg_mstr.h"; /*** Ver 3.5 ***/


int fn_spn_clsout ( char *c_ServiceName,
                    struct st_fus_undrlyng_pstn	*ptr_st_und_crrnt_pstn,
                    struct st_fus_undrlyng_pstn	*ptr_st_und_tobe_pstn,
                    struct st_pstn_actn *ptr_st_pstn_actn,
                    char  *c_err_msg
                  );

int fn_sum_clspos ( struct st_fcp_cntrct_pstn st_cntfut_pos,
                    struct st_fus_undrlyng_pstn *ptr_st_undfut_pos
                  );

int fn_sum_crtpos ( struct st_cntfut_pos	st_cntpos_crrnt,
                    struct st_undfut_pos *ptr_st_undfut_pos
                  );

int fn_crt_Fnrml_pstn (	char *c_ServiceName,
                      	struct st_pstn_actn *ptr_st_pstn_actn,
											  char   c_drcr_flg,
                      	char  *c_err_msg
  	                 );

int fn_upd_mrgn	(	char *c_ServiceName,
                 	struct st_pstn_actn *ptr_st_pstn_actn,
                 	struct st_undfut_pos	*ptr_st_undfut_pos_crrnt,
                 	struct st_undfut_pos	*ptr_st_undfut_pos,
                 	char  *c_err_msg
								);


int fn_upd_mrgn_opt ( char *c_ServiceName,
                      struct st_pstn_actn *ptr_st_pstn_actn,
                      struct st_cntopt_pos *ptr_st_cntopt_pos_crrnt,
                      struct st_cntopt_pos *ptr_st_cntopt_pos,
                      char  *c_err_msg);

int fn_get_spnim_prcntg	( char *c_ServiceName,
                      		struct st_pstn_actn *ptr_st_pstn_actn,
                      		struct st_err_msg *ptr_st_err_msg,
                      		double *d_init_mrgn_prcnt,
                      		double *d_sprd_mrgn_prcnt,
                      		double *d_min_mrgn_prcnt,
                      		double *d_min_sprd_mrgn_prcnt,
                      		char   c_cntrct_tag
 												);

int fn_get_spnmrgn_opt	(	char *c_ServiceName,
                         	struct st_pstn_actn *ptr_st_pstn_actn,
                          struct st_err_msg *ptr_st_err_msg,
                          double *d_init_mrgn_prcnt,
                          double *d_min_mrgn_prcnt,
                          double *d_somc_prcnt,
                          double *d_min_trggr_prcnt     /** Ver 2.6 ***/
                        );

int fn_nearest_paise(char *, double , int , int, char *, double * );

int fn_insert_report( char *c_ServiceName,
											char *c_spn_mtch_accnt,
											char *c_cnvrsn_rmrks,
											char *c_status,													/*** Ver 1.2 ***/	
											char *c_mrgn_typ,												/*** Ver 1.4	***/
											char  c_spl_flg ,												/*** Ver 1.4	***/	
											char *c_xchng_cd,											/*** Ver 2.0	***/	
											char *c_usr_id,												/*** ver 3.5 ***/
											int  sql_lsm_sms_id,									/*** ver 3.5 ***/
                      char *c_cnvrsion_mode,								/*** ver 3.5 ***/
											double d_required_amount);							/*** ver 3.5 ***/


int fn_ins_upd_trgprc(char *c_ServiceName,                    /** Ver 2.6 ***/
                    struct  st_pstn_actn *st_actn,
                    struct  st_cntopt_pos st_cntopt_pos_tobe,
                    struct  st_err_msg *ptr_st_err_msg
                    );

int fn_snd_mymsg_sms_notfcn(char *c_ServiceName,
                            FBFR32 **ptr_fml_Sbuffer,
                            char *c_user_id,
                            long l_sssn_id,
                            char *c_mtch_acc,
                            char *c_csm_msg_typ,
                            char c_msg_rqst_typ,
                            char *c_errmsg);  /*** Ver 3.5 ***/

struct st_fus_undrlyng_pstn st_undpstn_crrnt;
struct st_fus_undrlyng_pstn st_undpstn_tobe;
struct st_fus_undrlyng_pstn st_undrlyng_pstn;
struct st_undfut_pos st_Fundpstn_tobe;
struct st_pstn_actn *ptr_st_pstn_actn;
struct st_pstn_actn st_pstn_actn;
struct st_err_msg *ptr_st_err_msg;


void SFO_CNV_SPN2NRM ( TPSVCINFO *rqst )
{

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

	ptr_fml_Obuf = NULL;			 	/*** Ver 2.2 ***/

  char  c_ServiceName[33];
  char  c_rout_crt[4];
  char  c_xchng_cd[4];
  char  c_clm_mtch_accnt[11];
  char  c_undrlyng[7];
  char  c_prv_undrlyng[7];
  char  c_fup_undrlyng[7];
  char  c_fop_undrlyng[7];
  char  c_cntrct_tag;
	char  c_opt_mtm_flg;
	char  c_drcr_flg;
	char  c_prv_cntrct_tag;
  char  c_tmp_rmrks [ 133 ] ;
	char  c_cnvrsn_rmrks[256]	;
	char  c_msg[256];
	char  c_tag[256];
  char  c_status[10] ;        /*** Ver 1.2 ***/
	char c_xchng_stts='\0';			/*** Ver 1.4 ***/
	char c_spl_flg='\0';				/*** Ver 1.4 ***/
	char c_spn_flg='\0';			  /*** Ver 1.4 ***/
	char c_bse_spn_flg='\0';		/*** Ver 2.0 ***/
	char c_mrgn_typ[200];				/*** Ver 1.4 ***/
  char c_cnvrsion_mode[8]; /*** ver 3.5 ***/
  MEMSET(c_cnvrsion_mode); /*** ver 3.5 ***/
	char c_balance_flg = 'N';   /*** Ver 3.5 ***/
	char c_mrgn_insufficient_flg = '\0';  /**** Ver 3.5 ***/
	
  char c_txn_flg='Y';										/*** Ver 3.1 ***/
 	char c_ip_address[45+1]="\0"; /** Changed to 45 from 15 in Ver  3.7 **/	/*** Ver 3.1 ***/
	char c_psswd_req_flg = NO;						/*** Ver 3.1 ***/
  varchar c_usr_usr_psswrd[50];					/*** Ver 3.1 ***/

  varchar c_trade_dt[12];
  varchar c_exp_dt[LEN_DATE];

  int i_returncode;
  int i_trnsctn;
  int i_usrprfl[7];						 /*** Ver 1.4 changed from 6 to 7 ***/  
  int i_usrprflerr[7];				 /*** Ver 1.4 changed from 6 to 7 ***/  
  int i;
  int i_opt_rtrn;
	int	i_fup_cnt		=	0;
	int	i_rec_cntr	=	0;
	int i_up_down		=	0;
	int i_opn_qty_chk = 0 ;  /*** Ver 1.1 ***/
  int i_exist = 0 ;				 /*** Ver 1.9 ***/
	int i_req_exist = 0;     /*** Ver 3.5 ***/

  long  l_total_qty;
  long  l_exectd_qty;
  long  l_cncl_qty;
  long  l_exprd_qty;

  double d_balance_amt 	= 0.0;
	double d_mrgn_rlsd		=	0.0;
	double d_pnl_rlsd			=	0.0;
 	double d_diff_mrgn		=	0.0;
	double d_opt_mrgn			=	0.0;
  double d_bal_to_apply	=	0.0;
	double d_trigger_prc  = 0.0;
	double d_trg_prc			= 0.0;
	double d_somc					=	0.0;
	double d_value				=	0.0;
	double d_initial_mrgn	=	0.0;
	double d_min_mrgn			=	0.0;
  double d_avg_price    =0.0;    /** Ver 4.0 **/

  /** Ver 2.6 starts **/
  double d_wag_price=0.0;
  double d_min_trggr_prcnt=0.0;
  /** Ver 2.6 ends **/
	double d_required_amount = 0.0; /*** Ver 3.5 ***/
	double d_balance_amt_tmp	  = 0.0;		/** Ver 3.5 **/
	double d_total_amount				= 0.0;		/** Ver 3.5 **/
	/*** Ver 2.2 starts ***/
	double d_mrgn_aft_cnv[100] = {0.0}; 
	double d_mrgn_bef_cnv[100] = {0.0}; 
	double d_totmrgn_bef_cnv = 0.0;
	double d_totmrgn_aft_cnv = 0.0;
	char   c_underlying [100][7] = {"\0"};
	MEMSET(c_underlying);
	/*** Ver 2.2 ends ***/
 
	sql_cursor  undrlyng_cursor;
	sql_cursor  fup_cursor;
	sql_cursor  ffp_cursor;
	sql_cursor  fop_cursor;
	sql_cursor  fop_und_cursor;

  struct  st_usr_prfl st_usrprfl;
  struct  st_fus_undrlyng_pstn st_und_crrnt_pstn;
  struct  st_fus_undrlyng_pstn st_und_tobe_pstn;
  struct  st_undfut_pos st_undpstn_crrnt;
  struct  st_undfut_pos st_undpstn_old;
  struct  st_undfut_pos st_undpstn_tobe;
  struct  st_undfut_pos st_undpstn_tobeold;
  struct  st_cntfut_pos st_cntpos_crrnt;
  struct  st_cntfut_pos st_cntpos_md_rc;
  struct  st_pstn_actn  st_fut_actn;
  struct  st_pstn_actn  st_actn;
  struct  st_cntopt_pos st_cntopt_pos_crrnt;
  struct  st_cntopt_pos st_cntopt_pos_tobe;
  struct  st_err_msg st_errmsg;
  struct vw_pstn_actn st_pstn_actn;  /** Ver 2.6 **/
  struct  vw_err_msg st_err_msg;  /** Ver 2.6 **/
	struct  vw_usr_prfl st_usrprfl_vw;		 /*** Ver 3.1 ***/
  struct  vw_err_msg st_err_msg_vw;		  /*** Ver 3.1 ***/
	
	MEMSET(st_und_crrnt_pstn);
	MEMSET(st_und_tobe_pstn);
	MEMSET(st_undpstn_crrnt);
	MEMSET(st_undpstn_old);
	MEMSET(st_undpstn_tobe);
	MEMSET(st_cntpos_crrnt);
	MEMSET(st_cntpos_md_rc);
	MEMSET(st_usrprfl_vw);	  /*** Ver 3.1 ***/
	MEMSET(st_err_msg_vw);	  /*** Ver 3.1 ***/
	MEMSET(c_usr_usr_psswrd); /*** Ver 3.1 ***/

	MEMSET(sql_lsm_msg_txt); /*** Ver 3.5 ***/

  EXEC SQL INCLUDE "table/usr_user_master.h";


	ptr_fml_Ibuf = (FBFR32 *)rqst->data;

  strcpy( c_ServiceName, rqst->name );

  INITDBGLVL(c_ServiceName);

  i_usrprfl     [ 0 ] = Fget32( ptr_fml_Ibuf ,FFO_USR_ID,0,(char *) st_usrprfl.c_user_id,0);
  i_usrprflerr  [ 0 ] = Ferror32;
  i_usrprfl     [ 1 ] = Fget32( ptr_fml_Ibuf ,FFO_SSSN_ID,0,(char *) &st_usrprfl.l_session_id,0);
  i_usrprflerr  [ 1 ] = Ferror32;
  i_usrprfl     [ 2 ] = Fget32( ptr_fml_Ibuf ,FFO_EBA_MTCH_ACT_NO,0,(char *) st_usrprfl.c_cln_mtch_accnt,0);
  i_usrprflerr  [ 2 ] = Ferror32;
  i_usrprfl     [ 3 ] = Fget32( ptr_fml_Ibuf ,FFO_ROUT_CRT,0,(char *) st_usrprfl.c_rout_crt,0);
  i_usrprflerr  [ 3 ] = Ferror32;
  i_usrprfl     [ 4 ] = Fget32( ptr_fml_Ibuf ,FFO_DR_CR_FLG,0,(char *)&c_drcr_flg ,0);
  i_usrprflerr  [ 4 ] = Ferror32;
  i_usrprfl     [ 5 ] = Fget32( ptr_fml_Ibuf ,FFO_XCHNG_CD,0,(char *) c_xchng_cd,0);
  i_usrprflerr  [ 5 ] = Ferror32;
  i_usrprfl     [ 6 ] = Fget32( ptr_fml_Ibuf ,FFO_SPL_FLG,0,(char *)&c_spl_flg ,0);			/*** Ver 1.4 ***/
  i_usrprflerr  [ 6 ] = Ferror32;																												/*** Ver 1.4 ***/

  for ( i=0 ; i < 6  ; i++ )	/*** Ver 1.4 changed from 6 to 7 ***/
  {
    if ( i_usrprfl [ i ] == -1 && i_usrprflerr [ i ] !=  FNOTPRES )
    {
      fn_userlog( c_ServiceName, "Error in :%d:",i );
      fn_errlog( c_ServiceName, "S31005", Fstrerror32( i_usrprflerr [i]),c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
  }

	/*** Ver 1.4 starts here ***/
	/*** Commented in Ver 3.1 ***
	i_returncode = chk_sssn(c_ServiceName,st_usrprfl.c_user_id,st_usrprfl.l_session_id,c_err_msg);
	***/

	/*** Ver 3.1 starts ***/
	memcpy(&st_usrprfl_vw,&st_usrprfl,sizeof(st_usrprfl_vw));
		
	i_returncode =  fn_check_user_ip	(	c_ServiceName,
																			&st_usrprfl_vw ,
																			c_usr_usr_psswrd.arr,  
																			c_psswd_req_flg,
																			c_ip_address,
																			c_txn_flg,                
																			&st_err_msg_vw 
																	);
	/*** Ver 3.1 ends ***/

  if(i_returncode ==  -1)
  {
		 fn_userlog(c_ServiceName,"Session Timed Out");
     fn_errlog(c_ServiceName,"S31010", LIBMSG, c_err_msg);
     strcpy(c_err_msg,"Session Timed Out");
     Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if ( i_usrprfl [ 6 ] == -1 && i_usrprflerr [ 6 ] ==  FNOTPRES )
	{
		fn_userlog( c_ServiceName, "*** BACKEND CALL ***");
		c_spl_flg = 'B';
	}
	else if (c_spl_flg == 'C') /*** else if loop added in Ver 2.2 ***/
	{
		fn_userlog( c_ServiceName, "*** CONVERSION CAL CALLED FROM TRADING SCREEN ***");
	}	
	else if (c_spl_flg == 'K') /*** else if loop added in Ver 3.5 ***/
	{
		fn_userlog( c_ServiceName, "*** CALLED FROM HOUSEKEEP ***");
	}	
	else if (c_spl_flg == 'A') /*** else if loop added in Ver 3.5 ***/
	{
		fn_userlog( c_ServiceName, "*** CALLED FROM CRON ***");
	}	
	else
	{
		fn_userlog( c_ServiceName, "*** FRONTEND CALL ***");
	}

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog( c_ServiceName, "c_spl_flg = :%c:",c_spl_flg);
	}
	/*** Ver 1.4 ends here ***/


	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog( c_ServiceName, "SPAN2NRML User id       :%s:",st_usrprfl.c_user_id );
		fn_userlog( c_ServiceName, "SPAN2NRML Session id    :%ld:", st_usrprfl.l_session_id );
		fn_userlog( c_ServiceName, "SPAN2NRML Match Account :%s:", st_usrprfl.c_cln_mtch_accnt );
		fn_userlog( c_ServiceName, "SPAN2NRML Rout CRT :%s:", st_usrprfl.c_rout_crt);
		fn_userlog( c_ServiceName, "SPAN2NRML Exchange Code :%s:",c_xchng_cd );
	}

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  strcpy(c_clm_mtch_accnt,st_usrprfl.c_cln_mtch_accnt);

	/*** Ver 1.6 starts here ***/

	if (c_spl_flg != 'C') /*** if condition added in Ver 2.2 ***/
	{
	EXEC SQL
      SELECT  EXG_CRRNT_STTS
      INTO    :c_xchng_stts
      FROM    EXG_XCHNG_MSTR
      WHERE   EXG_XCHNG_CD  = :c_xchng_cd;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName,"S31015", SQLMSG, c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		/*** commented in ver 3.5 ****
    if ( c_xchng_stts != EXCHANGE_CLOSE )
    {
      fn_userlog(c_ServiceName,"This facility is available in closed market hours only. ");
      fn_errlog( c_ServiceName, "S31020",LIBMSG, c_err_msg );
			**** Commented in ver 1.7
      strcpy(c_err_msg,"This facility is available in closed market hours only.Please try again after market closed.");
      ****************************
			**** Commented in Ver 3.4 ****
			strcpy(c_err_msg,"This facility is available when market is under 'Closed' status. Please view Buy/Sell order entry page to refer market status and try again later.");	*** Ver 1.7 ***  ***
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			strcpy(c_err_msg,"This facility is available after the completion of end of day process."); *** added in Ver 3.4 ***
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    } *** ver 3.5 comment ends ***/
		/*** Added in Ver 3.5 starts ***/
		if ( c_xchng_stts == EXCHANGE_CLOSE )
		{
				strcpy( c_cnvrsion_mode,"ONLINE");
		}
		else
		{
			strcpy( c_cnvrsion_mode,"OFFLINE");
		}
		/*** Added in Ver 3.5 ends ***/
	} /*** Ver 2.2 ***/
	/*** Ver 1.6 ends here ***/

	/*** Ver 1.4 starts here ***/
	/*** if (c_spl_flg == 'F') *** FrontEnd Call *** Commented In Ver 2.1 ***/
	if (c_spl_flg == 'F' || c_spl_flg == 'S' || c_spl_flg == 'K' || c_spl_flg == 'A'  ) /*** Ver 2.1 FrontEnd Call or Silverlight Front-end  ***//*** Ver 3.5 Housekeep or Cron call added ***/
	{
		/*** Commented in ver 1.6 ***********

		EXEC SQL
			SELECT	EXG_CRRNT_STTS
			INTO		:c_xchng_stts
			FROM    EXG_XCHNG_MSTR
			WHERE   EXG_XCHNG_CD  = :c_xchng_cd;

		if ( SQLCODE != 0 )
		{
			fn_errlog(c_ServiceName,"S31025", SQLMSG, c_err_msg);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if ( c_xchng_stts == EXCHANGE_OPEN )
		{
			fn_userlog(c_ServiceName,"This facility is available only during non market hours. Please try again after market hours.");
			fn_errlog( c_ServiceName, "S31030",LIBMSG, c_err_msg );
			strcpy(c_err_msg,"This facility is available only during non market hours. Please try again after market hours.");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		********************************************************************/

		MEMSET(c_cnvrsn_rmrks); 
	  MEMSET(c_status);   
		MEMSET(c_mrgn_typ); 
	 	
		EXEC SQL
			SELECT  NVL(CLM_SPAN_ALLWD,'N'),
							NVL(CLM_BSESPAN_ALLWD,'N')					/** Ver 2.0 ***/
			INTO    :c_spn_flg,
							:c_bse_spn_flg											/** Ver 2.0 ***/
			FROM    CLM_CLNT_MSTR
			WHERE   CLM_MTCH_ACCNT  = :c_clm_mtch_accnt;

		if ( SQLCODE != 0 )
		{
			fn_userlog( c_ServiceName, "Failed To select SPAN Flag For Match Account :%s:",c_clm_mtch_accnt);
			fn_errlog( c_ServiceName, "S31035",SQLMSG, c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		/*** Ver 1.5 change introduced on 02Jul2012 starts here ***/
	/**	if (  c_spn_flg == 'Z' )					*** Ver 2.0 comment ***/
		if (  c_spn_flg == 'Z' && strcmp(c_xchng_cd,"NFO")==0 )			/*** Ver 2.0 ***/
		{
	    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); /*** Ver 3.5 ***/
			fn_errlog( c_ServiceName, "S31040",LIBMSG, c_err_msg );
			fn_userlog(c_ServiceName,"Cant convert as SPAN TNC not accepted.");
			/*** strcpy(c_err_msg,"Cant convert as SPAN TNC not accepted.");  *** Commented in Ver 3.5 ***/
			strcpy  ( c_cnvrsn_rmrks, "Cant convert as SPAN TNC not accepted.");
			strcpy  ( c_status, "FAIL"); 
			strcpy	( c_mrgn_typ,"SPAN Based Margining");
	    /*** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  *** Commented and taken above in Ver 3.5 ***/
			i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg , c_xchng_cd,st_usrprfl.c_user_id,0,c_cnvrsion_mode,d_required_amount);				/*** c_xchng_cd added in Ver 2.0 ***//*** ver 3.5 ***/
		  if (i_returncode != 0)
			{
				fn_userlog(c_ServiceName,"Failed to Insert in Report Table ");
			}
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		/*** Ver 1.5 change introduced on 02Jul2012 Ends here ***/
		
	/***	if ( c_spn_flg == 'N' )						**** Ver 2.0 comment ***/
		if ( c_spn_flg == 'N' && strcmp(c_xchng_cd,"NFO")==0 )				/**** Ver 2.0 ***/
		{
			fn_errlog( c_ServiceName, "S31045",LIBMSG, c_err_msg );
			fn_userlog(c_ServiceName,"Please note you are already mapped to Non SPAN (Existing I-Sec) Margin.");
			strcpy(c_err_msg,"Please note you are already mapped to Non SPAN (Existing I-Sec) Margin.");
			strcpy  ( c_cnvrsn_rmrks, "SPAN TO NORMAL :Match Account Is Already Mapped Under NORMAL.");
			strcpy  ( c_status, "FAIL"); 
			strcpy	( c_mrgn_typ,"Non SPAN (Existing I-Sec) Margining");
	    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg , c_xchng_cd,st_usrprfl.c_user_id,0,c_cnvrsion_mode,d_required_amount);					/*** c_xchng_cd added in Ver 2.0 ***/ /*** Ver 3.5 ***/
		  if (i_returncode != 0)
			{
				fn_userlog(c_ServiceName,"Failed to Insert in Report Table ");
			}
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		/*** Ver 2.0 starts ***/
		if ( c_bse_spn_flg == 'N' && strcmp(c_xchng_cd,"BFO")==0 )				/**** Ver 2.0 ***/
		{
			fn_errlog( c_ServiceName, "S31050",LIBMSG, c_err_msg );
			fn_userlog(c_ServiceName,"Please note you are already mapped to Non SPAN (Existing I-Sec) Margin. for BSE");
			strcpy(c_err_msg,"Please note you are already mapped to Non SPAN (Existing I-Sec) Margin for BSE.");
			strcpy  ( c_cnvrsn_rmrks,"SPAN TO NORMAL :Match Account Is Already Mapped Under NORMAL BSE.");
			strcpy  ( c_status, "FAIL"); 
			strcpy	( c_mrgn_typ,"Non SPAN BSE (Existing I-Sec) Margining");
	    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg ,c_xchng_cd,st_usrprfl.c_user_id,0,c_cnvrsion_mode,d_required_amount); /*** ver 3.5 ***/					
		  if (i_returncode != 0)
			{
				fn_userlog(c_ServiceName,"Failed to Insert in Report Table ");
			}
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		/*** Ver 2.0 Ends ***/
	}
	/*** Ver 1.4 ends here ***/

	/*** ver 3.5 starts ***/
  if( strcmp(c_cnvrsion_mode,"OFFLINE")== 0 && ( c_spl_flg == 'F' || c_spl_flg == 'S' || c_spl_flg == 'H' ) ) /*** Front End Call And OFFLINE Mode Log The request and return ***/
  {
			fn_userlog(c_ServiceName,"Request for SPAN To NORMAL conversion");
	    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );

			EXEC SQL
			SELECT count(0)
			INTO   :i_req_exist
			FROM   FSC_SPNNRML_CNV
			WHERE  FSC_CNVRSN_TIME >= (SELECT to_date(MAX(FBC_TRD_DT) || ' 09:15:00','DD-Mon-YYYY HH24:Mi:SS')
																	FROM		FBC_FO_BRNCH_CAL 
																	WHERE	FBC_XCHNG_CD=:c_xchng_cd 
																	AND		FBC_TRD_DT < (SELECT EXG_NXT_TRD_DT FROM EXG_XCHNG_MSTR WHERE EXG_XCHNG_CD = :c_xchng_cd) 
																	AND		FBC_GRP_ID=1 
																	AND		FBC_BRANCH='0004' 
																 ) 
			AND  FSC_XCHNG_CD = :c_xchng_cd
			AND  FSC_CLM_MTCH_ACCNT = :c_clm_mtch_accnt
			AND  FSC_MODE = 'OFFLINE'
			AND  FSC_CNVRSN_RMRKS in ('Request for SPAN To NORMAL conversion')
			AND  FSC_CNVRSN_STTS in ('PENDING','FAIL');

			if ( SQLCODE != 0 )
			{
				fn_errlog( c_ServiceName, "S31055",SQLMSG, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			if(i_req_exist == 0 )
			{
				strcpy( c_status,"PENDING");
				strcpy( c_mrgn_typ,"SPAN Based Margining");
				strcpy ( c_cnvrsn_rmrks,"Request for SPAN To NORMAL conversion"); 

				i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg,c_xchng_cd,st_usrprfl.c_user_id,126,c_cnvrsion_mode,d_required_amount);

				if (i_returncode != 0)
				{
					fn_userlog(c_ServiceName,"Failed to Insert in Report Table ");
					fn_errlog(c_ServiceName,"S31060", LIBMSG, c_err_msg);
					strcpy(c_err_msg,"Could not log your request");
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
	 
				strcpy(c_err_msg,"Your request has been placed and will be processed for conversion after end of day processing tentatively around or after 11pm. You may please check your \'my message\' updated with success  or failure for this conversion request. Please note that your conversion request may get rejected due to following reasons:a. Pending orders in Order Book. b. Insufficient Limits");    
			}
			else
			{
				strcpy(c_err_msg,"Your request has been already placed. You may please check your \'my message\'.");    
			}
	    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }
  /*** ver 3.5 ends ***/  

	MEMSET(l_total_qty);  /*** Added By Swati ***/
	MEMSET(l_exectd_qty);  /*** Added By Swati ***/
	MEMSET(l_cncl_qty);  /*** Added By Swati ***/
	MEMSET(l_exprd_qty);  /*** Added By Swati ***/
	MEMSET(c_cnvrsn_rmrks);	/*** Ver 1.2 ***/
	MEMSET(c_status); 			/*** Ver 1.2 ***/

	EXEC SQL
    SELECT  NVL(SUM(FOD_ORDR_TOT_QTY),0),
            NVL(SUM(FOD_EXEC_QTY),0),
            NVL(SUM(FOD_CNCL_QTY),0),
            NVL(SUM(FOD_EXPRD_QTY),0)
    INTO    :l_total_qty,
            :l_exectd_qty,
            :l_cncl_qty,
            :l_exprd_qty
    FROM    FOD_FO_ORDR_DTLS
    WHERE   FOD_CLM_MTCH_ACCNT  = :c_clm_mtch_accnt
		AND			FOD_XCHNG_CD				=	:c_xchng_cd
    AND     FOD_ORDR_STTS     IN ('R','O','P');
  if( SQLCODE != 0  &&  SQLCODE !=  NO_DATA_FOUND )
  {
    fn_userlog( c_ServiceName, "Failed To Get Qty Details From Order Book.");
    fn_errlog( c_ServiceName, "S31065",SQLMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );		/*** Ver 1.2 ***/    
	  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

  }

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"SPAN2NRML Total Qty Is :%ld:",l_total_qty);
		fn_userlog(c_ServiceName,"SPAN2NRML Executed Qty Is :%ld:",l_exectd_qty);
		fn_userlog(c_ServiceName,"SPAN2NRML Cancel Qty Is :%ld:",l_cncl_qty);
		fn_userlog(c_ServiceName,"SPAN2NRML Expired Qty Is :%ld:",l_exprd_qty);
	}

  if (  l_total_qty > ( l_exectd_qty + l_cncl_qty + l_exprd_qty ) )
  {
    fn_userlog(c_ServiceName,"Can't Convert To NORMAL As Pending Order Exist In SPAN.");
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  /*** Ver 3.5 taken up ***/
    /*** strcpy(c_err_msg,"Can't Convert To SPAN As Pending Order Exist.");		Commented in Ver 1.4 ***/
		/*** strcpy(c_err_msg,"Please try after some time as there is an order pending and expiry process is underway.");	*** Ver 1.4 *** *** Commented in Ver 3.5 ***/
		strcpy(c_err_msg,"Your F&O margining conversion request has been rejected due to pending order in your account. Please cancel the same and try again."); /*** Ver 3.5 ***/
    strcpy(c_cnvrsn_rmrks,"Can't Convert To NORMAL As Pending Order Exist.");	/*** Ver 1.2 ***/
		strcpy(c_status,"FAIL");	/*** Ver 1.2 ***/
		strcpy	( c_mrgn_typ,"SPAN Based Margining");	/*** Ver 1.4 ***/
		fn_errlog( c_ServiceName, "S31070",LIBMSG,c_err_msg );	/*** Ver 1.4 changed from SQLMSG to LIBMSG ***/
    /*** Ver 1.2 ***/
		/*** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  *** Commented in Ver 3.5 ***/
		/*i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status);*/		/*** Ver 1.4 ***/
		/*** i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg , c_xchng_cd );	*** Ver 1.4 ***			*** c_xchng_cd added in Ver 2.0 ****** Commented in Ver 3.5 ***/
		/*** Ver 3.5 starts ***/
		if ( strcmp(c_cnvrsion_mode,"OFFLINE") == 0 && ( c_spl_flg == 'K' ) )
		{
				i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg,c_xchng_cd,st_usrprfl.c_user_id,127,c_cnvrsion_mode,d_required_amount);	
		}
		else
		{
				i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg,c_xchng_cd,st_usrprfl.c_user_id,131,c_cnvrsion_mode,d_required_amount);	
		}
		/*** Ver 3.5 ends ***/
		if (i_returncode != 0)
		{
			fn_userlog(c_ServiceName,"Failed to Insert in Report Table ");
		}
		/*** Ver 1.2 ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,(char*) c_err_msg, 0 );
    /*** sprintf (c_msg,"Can't convert To NORMAL As Pending Order Exist In SPAN :%s:",c_clm_mtch_accnt);
    fn_bat_pst_msg_fno (c_ServiceName, c_msg, c_tag );		Commented in Ver 1.4 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/*** Ver 1.1 Starts ***  -- As per Discussion with Vishal G on 09-May-2012 , this check has been commented 

	EXEC SQL
    SELECT 1
    INTO  :i_opn_qty_chk
    FROM  DUAL
    WHERE EXISTS ( 	SELECT 1 FROM   FCP_FO_SPN_CNTRCT_PSTN
		   							WHERE FCP_CLM_MTCH_ACCNT   = :c_clm_mtch_accnt
		   							AND    FCP_XCHNG_CD        = :c_xchng_cd
		   							AND    FCP_OPNPSTN_QTY     !=0 
                 );

	if (  i_opn_qty_chk != 0)
  {
    fn_userlog(c_ServiceName,"Can't Convert To NORMAL As Open Position Exists.");
    strcpy(c_err_msg,"Can't Convert To NORMAL As Open Position Exists..");
    fn_errlog( c_ServiceName, "S31075",SQLMSG,c_err_msg );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,(char*) c_err_msg, 0 );
    sprintf (c_msg,"Can't Convert To NORMAL As Open Position Exists In SPAN . :%s:",c_clm_mtch_accnt);
    fn_bat_pst_msg_fno (c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	*** Ver 1.1 Ends ***/ 

	/*** Ver 1.4 starts here ***/
	/*** if (c_spl_flg == 'F') *** Front end call *** Commented In Ver 2.1 ***/
	if (c_spl_flg == 'F' || c_spl_flg == 'S' || c_spl_flg == 'C' ) /*** Ver 2.1 Front end call  or Silverlight Front End call ***/ /*** Conversion flag added Ver 2.2 ***/
	{
		EXEC SQL
			SELECT	PAR_FO_DRCR_FLG
			INTO		:c_drcr_flg
			FROM		PAR_SYSTM_PRMTR;

		if ( SQLCODE != 0 )
		{
			fn_userlog(c_ServiceName,"Error While Selecting DRCR Flag.");
			fn_errlog( c_ServiceName, "S31080", SQLMSG, c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		fn_userlog(c_ServiceName,"c_drcr_flg = :%c: ",c_drcr_flg);
	}
	/*** Ver 1.4 ends here ***/

	if ( c_spl_flg == 'C' )	/*** if loop added in Ver 2.2 ***/
	{
		MEMSET(d_mrgn_bef_cnv);
		MEMSET(c_underlying);
		d_totmrgn_bef_cnv = 0.0;

		ptr_fml_Obuf = NULL;			
	
		ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*100);
		if ( ptr_fml_Obuf == NULL )
		{
			fn_errlog( c_ServiceName, "S31085", TPMSG, c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		EXEC SQL 
		SELECT NVL(SUM (margin),0),
					 undrlyng
		INTO	:d_mrgn_bef_cnv,
					:c_underlying
		FROM
		(
			SELECT SUM( FUP_UTRD_MRGN + FUP_UORDR_MRGN + FUP_ADD_MRGN_VAL )	margin,
						 FUP_UNDRLYNG undrlyng
			FROM	 FUP_FUT_UNDRLYNG_PSTN
			WHERE  FUP_CLM_MTCH_ACCNT		=	 :c_clm_mtch_accnt
			AND		 FUP_XCHNG_CD					=	 :c_xchng_cd
			AND		 FUP_PRDCT_TYP				=  'P'
			GROUP BY FUP_UNDRLYNG
			UNION ALL
			SELECT SUM( FUS_INITIAL_MRGN + FUS_BLCKD_PL )  margin,
						 FUS_UNDRLYNG undrlyng
			FROM	 FUS_FO_UNDRLYNG_SPN_PSTN
			WHERE  FUS_CLM_MTCH_ACCNT		=		:c_clm_mtch_accnt
			AND		 FUS_XCHNG_CD					=		:c_xchng_cd
			GROUP BY FUS_UNDRLYNG
		  UNION ALL
		  SELECT SUM( FOD_AMT_BLCKD + FOD_LSS_AMT_BLCKD )  margin,
             FOD_UNDRLYNG undrlyng
      FROM   FOD_FO_ORDR_DTLS
      WHERE  FOD_CLM_MTCH_ACCNT   =   :c_clm_mtch_accnt
      AND    FOD_XCHNG_CD         =   :c_xchng_cd
      AND    FOD_PRDCT_TYP        in  ('U','I')
			GROUP BY FOD_UNDRLYNG
		)
		GROUP BY undrlyng
		HAVING NVL(SUM (margin),0) > 0
		ORDER BY undrlyng;

		if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
		{
			tpfree((char *)ptr_fml_Obuf);
			fn_userlog(c_ServiceName,"Error While Selecting Margin Blocked.");
			fn_errlog( c_ServiceName, "S31090", SQLMSG, c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		fn_userlog(c_ServiceName,"Count of records :%d:",sqlca.sqlerrd[2]);
		
		for (i=0; i < sqlca.sqlerrd[2] ; i++ )
		{
			d_totmrgn_bef_cnv = d_totmrgn_bef_cnv + d_mrgn_bef_cnv[i];
		}

		fn_userlog(c_ServiceName,"Total margin before conversion = :%lf:",d_totmrgn_bef_cnv);

		if ( Fadd32 (ptr_fml_Obuf,FFO_UNDRLYNG,"ALL",0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31095", FMLMSG, c_err_msg  );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			tpfree((char *)ptr_fml_Obuf);
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if ( Fadd32 (ptr_fml_Obuf,FFO_C_BLKD_TRD_MRGN,(char *)&d_totmrgn_bef_cnv,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31100", FMLMSG, c_err_msg  );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			tpfree((char *)ptr_fml_Obuf);
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		for (i=0; i < sqlca.sqlerrd[2] ; i++ )
		{
			fn_userlog(c_ServiceName,"Margin before conversion = :%s:%lf: ",c_underlying[i],d_mrgn_bef_cnv[i]);

			if ( Fadd32 (ptr_fml_Obuf,FFO_UNDRLYNG,(char *) c_underlying[i],0)  ==  -1 )
			{
				fn_errlog( c_ServiceName, "S31105", FMLMSG, c_err_msg  );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
				tpfree((char *)ptr_fml_Obuf);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			if ( Fadd32 (ptr_fml_Obuf,FFO_C_BLKD_TRD_MRGN,(char *)&d_mrgn_bef_cnv[i],0)  ==  -1 )
			{
				fn_errlog( c_ServiceName, "S31110", FMLMSG, c_err_msg  );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
				tpfree((char *)ptr_fml_Obuf);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}		 
	}

  EXEC SQL ALLOCATE :undrlyng_cursor;

	EXEC SQL EXECUTE
    BEGIN
      OPEN    :undrlyng_cursor  FOR
      SELECT  DISTINCT FUS_UNDRLYNG
      FROM    FUS_FO_UNDRLYNG_SPN_PSTN
      WHERE   FUS_CLM_MTCH_ACCNT   =  :c_clm_mtch_accnt
			AND			FUS_XCHNG_CD				 =	:c_xchng_cd
      AND    	( FUS_INITIAL_MRGN 		!=  0 OR	FUS_UOPNPSTN_VAL	!=	0	
								OR FUS_UOPNPSTN_QTY !=  0 );		/*** Ver 1.9 ***/
    END;
  END-EXEC;

  if( SQLCODE != 0 )
  {
    fn_userlog( c_ServiceName, "Failed To Get Future Records.");
    fn_errlog( c_ServiceName, "S31115",SQLMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

  }

	while(1)
  {
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Inside Main While loop.");
		}

    EXEC SQL FETCH  :undrlyng_cursor
      INTO          :c_undrlyng;

    if( SQLCODE != 0  )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        break;
      }

      EXEC SQL FREE :undrlyng_cursor;
      fn_userlog( c_ServiceName, "Failed To Get Records.");
      fn_errlog( c_ServiceName, "S31120",SQLMSG, c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"After Undrlying Fetch.");
		}

    rtrim(c_undrlyng);

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName," Underlying Is :%s:",c_undrlyng);
			fn_userlog(c_ServiceName," Match Account Is :%s:",c_clm_mtch_accnt);
		}

		EXEC SQL DECLARE span_cursor CURSOR	FOR
			SELECT	FUS_CLM_MTCH_ACCNT,
							FUS_XCHNG_CD,
							FUS_UNDRLYNG,
							FUS_INDSTK,
							FUS_UIBUY_QTY,
							FUS_UIBUY_VAL,
							FUS_UISELL_QTY,
							FUS_UISELL_VAL,
							FUS_UEXBUY_QTY,
							FUS_UEXBUY_VAL,
							FUS_UEXSELL_QTY,
							FUS_UEXSELL_VAL,
							FUS_UBUY_EXCTD_QTY,
							FUS_USELL_EXCTD_QTY,
							FUS_UOPNPSTN_FLW,
							FUS_UOPNPSTN_QTY,
							FUS_UOPNPSTN_VAL,
							FUS_UMTM_OPN_VAL,
							FUS_TRD_DT,
							FUS_INITIAL_MRGN,
							FUS_BLCKD_PL,
							FUS_MIN_MRGN,
							FUS_REQD_INITIAL_MRGN
			FROM		FUS_FO_UNDRLYNG_SPN_PSTN
			WHERE		FUS_CLM_MTCH_ACCNT	=	:c_clm_mtch_accnt
			AND			FUS_UNDRLYNG				=	:c_undrlyng
      AND     FUS_XCHNG_CD         =  :c_xchng_cd
			AND	 (	FUS_INITIAL_MRGN		!=	0	
			OR			FUS_UOPNPSTN_VAL		!=	0
			OR		  FUS_UOPNPSTN_QTY		!=  0 )			/*** Ver 1.9 ***/
      FOR UPDATE OF FUS_CLM_MTCH_ACCNT;

		if( SQLCODE != 0  &&  SQLCODE !=  NO_DATA_FOUND )
    {
      EXEC SQL FREE :undrlyng_cursor;
      fn_userlog( c_ServiceName, "Failed To Get Future Records.");
      fn_errlog( c_ServiceName, "S31125",SQLMSG, c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    EXEC SQL  OPEN  span_cursor;

		while ( 1 )
		{
	
			EXEC SQL	FETCH span_cursor
								INTO	:st_und_crrnt_pstn.c_cln_mtch_accnt,
											:st_und_crrnt_pstn.c_xchng_cd,
											:st_und_crrnt_pstn.c_undrlyng,
											:st_und_crrnt_pstn.c_indstk,
											:st_und_crrnt_pstn.l_uibuy_qty,
                      :st_und_crrnt_pstn.d_uibuy_val,
                      :st_und_crrnt_pstn.l_uisell_qty,
                      :st_und_crrnt_pstn.d_uisell_val,
                      :st_und_crrnt_pstn.l_uexbuy_qty,
                      :st_und_crrnt_pstn.d_uexbuy_val,
                      :st_und_crrnt_pstn.l_uexsell_qty,
                      :st_und_crrnt_pstn.d_uexsell_val,
											:st_und_crrnt_pstn.l_ubuy_exctd_qty,
                      :st_und_crrnt_pstn.l_usell_exctd_qty,
                      :st_und_crrnt_pstn.c_uopnpstn_flw,
                      :st_und_crrnt_pstn.l_uopnpstn_qty,
                      :st_und_crrnt_pstn.d_uopnpstn_val,
											:st_und_crrnt_pstn.d_umtm_opn_val,
											:st_und_crrnt_pstn.c_trd_dt,
											:st_und_crrnt_pstn.d_initial_mrgn,
											:st_und_crrnt_pstn.d_blckd_pl,
											:st_und_crrnt_pstn.d_min_mrgn,
											:st_und_crrnt_pstn.d_reqd_initial_mrgn;

			if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }

        fn_userlog( c_ServiceName, "Failed To Fetch Records.");
        fn_errlog( c_ServiceName, "S31130",SQLMSG, c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			strcpy( st_und_tobe_pstn.c_cln_mtch_accnt,st_und_crrnt_pstn.c_cln_mtch_accnt);
      strcpy( st_und_tobe_pstn.c_xchng_cd,st_und_crrnt_pstn.c_xchng_cd );
      strcpy( st_und_tobe_pstn.c_undrlyng,st_und_crrnt_pstn.c_undrlyng );
			strcpy(	st_und_tobe_pstn.c_trd_dt,st_und_crrnt_pstn.c_trd_dt);
      st_und_tobe_pstn.c_indstk						= st_und_crrnt_pstn.c_indstk;
      st_und_tobe_pstn.l_uibuy_qty				= 0;
      st_und_tobe_pstn.d_uibuy_val				= 0;
      st_und_tobe_pstn.l_uisell_qty				= 0;
      st_und_tobe_pstn.d_uisell_val				= 0;
      st_und_tobe_pstn.l_uexbuy_qty				= 0;
      st_und_tobe_pstn.d_uexbuy_val				= 0;
      st_und_tobe_pstn.l_uexsell_qty			= 0;
      st_und_tobe_pstn.d_uexsell_val			= 0;
      st_und_tobe_pstn.l_ubuy_exctd_qty   = 0;
      st_und_tobe_pstn.l_usell_exctd_qty  = 0;
      st_und_tobe_pstn.c_uopnpstn_flw     = 'N';
      st_und_tobe_pstn.l_uopnpstn_qty			= 0;
      st_und_tobe_pstn.d_uopnpstn_val			= 0;
      st_und_tobe_pstn.d_umtm_opn_val     = 0;

			strcpy(c_trade_dt.arr,st_und_tobe_pstn.c_trd_dt);

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Before Call To fn_spn_clsout.");
			}

      i_returncode  = fn_spn_clsout ( c_ServiceName,
                                      &st_und_crrnt_pstn,
                                      &st_und_tobe_pstn,
                                      &st_actn,
                                      c_err_msg );

      if ( i_returncode !=  0 )
      {
        fn_errlog( c_ServiceName, "S31135",LIBMSG, c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

			if(DEBUG_MSG_LVL_3)
			{
    		fn_userlog(c_ServiceName,"SPAN2NRML After call to fn_spn_clsout.");
			}

			sprintf ( st_actn.c_ref_rmrks,"SPAN-%s-%s",st_actn.c_undrlyng, st_actn.c_expry_dt);

      strcpy(st_pstn_actn.c_xchng_cd,st_und_crrnt_pstn.c_xchng_cd);
      strcpy(st_pstn_actn.c_cln_mtch_accnt,st_und_crrnt_pstn.c_cln_mtch_accnt);
      strcpy(st_pstn_actn.c_undrlyng,st_und_crrnt_pstn.c_undrlyng);
      strcpy(st_pstn_actn.c_ref_rmrks,"SPAN To Normal Conversion");
      strcpy(st_pstn_actn.c_rout_crt,st_usrprfl.c_rout_crt);

			d_mrgn_rlsd	=	st_und_crrnt_pstn.d_initial_mrgn;

			if ( d_mrgn_rlsd != 0 )
			{
				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"SPAN2NRML Margin To Be RELEASED IS :%lf:",d_mrgn_rlsd);
				}

				d_balance_amt  = 0.0;   /*** Ver 1.1 ***/
				i_returncode = fn_upd_spnlimits	( c_ServiceName,
                                      		&st_actn,
                                      		ptr_st_err_msg,
                                      		REL_TRDMRGN_CONV_SPAN_TO_NORM,
                                      		DEBIT_WITHOUT_LIMIT,
                                      		d_mrgn_rlsd,
                                      		&d_balance_amt);
        if ( i_returncode != 0 )
        {
          fn_errlog( c_ServiceName, "S31140",LIBMSG, c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

			}

			d_pnl_rlsd	=	st_und_crrnt_pstn.d_blckd_pl;

			if ( d_pnl_rlsd !=	0	)
			{
				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"SPAN2NRML PNL To Be RELEASED IS :%lf:",d_pnl_rlsd);
				}

				d_balance_amt  = 0.0;   /*** Ver 1.1 ***/
        i_returncode = fn_upd_spnlimits ( c_ServiceName,
                                          &st_actn,
                                          ptr_st_err_msg,
                                          REL_BLKDLOSS_CONV_SPAN_TO_NORM,
                                          DEBIT_WITHOUT_LIMIT,
                                          d_pnl_rlsd,
                                          &d_balance_amt);
        if ( i_returncode != 0 )
        {
          fn_errlog( c_ServiceName, "S31145",LIBMSG, c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
			}

			EXEC SQL
				UPDATE	FUS_FO_UNDRLYNG_SPN_PSTN
				SET			FUS_UIBUY_QTY					=	:st_und_tobe_pstn.l_uibuy_qty,
								FUS_UIBUY_VAL					=	:st_und_tobe_pstn.d_uibuy_val,
								FUS_UISELL_QTY				=	:st_und_tobe_pstn.l_uisell_qty,
								FUS_UISELL_VAL				=	:st_und_tobe_pstn.d_uisell_val,
								FUS_UEXBUY_QTY				=	:st_und_tobe_pstn.l_uexbuy_qty,
								FUS_UEXBUY_VAL				=	:st_und_tobe_pstn.d_uexbuy_val,
								FUS_UEXSELL_QTY				=	:st_und_tobe_pstn.l_uexsell_qty,
								FUS_UEXSELL_VAL				=	:st_und_tobe_pstn.d_uexsell_val,
								FUS_UBUY_EXCTD_QTY		=	:st_und_tobe_pstn.l_ubuy_exctd_qty,
								FUS_USELL_EXCTD_QTY		=	:st_und_tobe_pstn.l_usell_exctd_qty,
								FUS_UOPNPSTN_FLW			=	:st_und_tobe_pstn.c_uopnpstn_flw,
								FUS_UOPNPSTN_QTY			=	:st_und_tobe_pstn.l_uopnpstn_qty,
								FUS_UOPNPSTN_VAL			=	:st_und_tobe_pstn.d_uopnpstn_val,
								FUS_UMTM_OPN_VAL			=	:st_und_tobe_pstn.d_umtm_opn_val,
								FUS_INITIAL_MRGN			=	:st_und_tobe_pstn.d_initial_mrgn,
								FUS_SPAN_WEMULT_MRGN	=	:st_und_tobe_pstn.d_span_wemult_mrgn,
								FUS_EBA_EXPR_MRGN			=	:st_und_tobe_pstn.d_eba_expr_mrgn,
								FUS_USPAN_WENOV_MRGN	=	:st_und_tobe_pstn.d_uspan_wenov_mrgn,
								FUS_USPAN_NENOV_MRGN	=	:st_und_tobe_pstn.d_uspan_nenov_mrgn,
								FUS_NET_OPTN_VAL			=	:st_und_tobe_pstn.d_net_optn_val,
								FUS_MTM_FLG						=	:st_und_tobe_pstn.c_mtm_flg,
								FUS_TRD_DT						=	:st_und_tobe_pstn.c_trd_dt,
								FUS_NTNL_PL						=	:st_und_tobe_pstn.d_ntnl_pl,
								FUS_BLCKD_PL					=	:st_und_tobe_pstn.d_blckd_pl,
								FUS_MIN_MRGN					=	:st_und_tobe_pstn.d_min_mrgn,
								FUS_REQD_INITIAL_MRGN	=	:st_und_tobe_pstn.d_reqd_initial_mrgn
			WHERE CURRENT OF span_cursor;
		
		 	if ( SQLCODE != 0 )
      {
       	fn_errlog( c_ServiceName, "S31150",SQLMSG, c_err_msg );
       	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
			
		}
	}

	EXEC SQL CLOSE :undrlyng_cursor;
	EXEC SQL FREE  :undrlyng_cursor;

	EXEC SQL
		SELECT	EXG_NXT_TRD_DT
		INTO		:c_trade_dt
		FROM		EXG_XCHNG_MSTR
		WHERE		EXG_XCHNG_CD	=	:c_xchng_cd;

	if ( SQLCODE != 0 )
	{
		fn_errlog( c_ServiceName, "S31155",SQLMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"SPAN2NRML TRADE DATE IS :%s:",c_trade_dt.arr);
	}

	EXEC SQL ALLOCATE :fup_cursor;

	MEMSET(st_und_tobe_pstn);

	EXEC SQL EXECUTE
		BEGIN
			OPEN	:fup_cursor FOR
			SELECT DISTINCT	FFP_UNDRLYNG
			FROM		FFP_FO_FUTURES_PSTN
			WHERE		FFP_CLM_MTCH_ACCNT	=	:c_clm_mtch_accnt
			AND			FFP_XCHNG_CD				=	:c_xchng_cd
			AND			FFP_OPNPSTN_QTY			!=	0
			AND			FFP_PRDCT_TYP				!=	'P';
		END;
	END-EXEC;

	if( SQLCODE != 0 )
  {
    fn_userlog( c_ServiceName, "Failed To Get Future Records.");
    fn_errlog( c_ServiceName, "S31160",SQLMSG, c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	while(1)
	{

		i_rec_cntr	=	0;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPN2NRM	-	Inside While For Normal Future Position Creation.");
		}

		EXEC SQL FETCH	:fup_cursor
						 INTO		:c_fup_undrlyng;

		if ( SQLCODE != 0 )
    {
    	if ( SQLCODE == NO_DATA_FOUND )
      {
				fn_userlog(c_ServiceName,"Inside NO_DATA_FOUND Of Main While Loop.");
      	EXEC SQL CLOSE :fup_cursor;
      	break;
      }

      EXEC SQL CLOSE :fup_cursor;
      fn_userlog( c_ServiceName, "Failed To Fetch Future Records.");
      fn_errlog( c_ServiceName, "S31165",SQLMSG, c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"SPAN2NRML UNDERLYNG IS :%s:",c_fup_undrlyng);
		}

		EXEC SQL ALLOCATE :ffp_cursor;

		EXEC SQL EXECUTE
			BEGIN
				OPEN		:ffp_cursor FOR
				SELECT	FFP_CLM_MTCH_ACCNT,
               	FFP_XCHNG_CD,
                FFP_PRDCT_TYP,
                FFP_INDSTK,
                FFP_UNDRLYNG,
                TO_CHAR (FFP_EXPRY_DT,'DD-Mon-YYYY'),
                FFP_EXER_TYP,
                FFP_CNTRCT_TAG,
                FFP_IBUY_QTY,
                FFP_IBUY_ORD_VAL,
                FFP_ISELL_QTY,
                FFP_ISELL_ORD_VAL,
                FFP_EXBUY_QTY,
                FFP_EXBUY_ORD_VAL,
                FFP_EXSELL_QTY,
               	FFP_EXSELL_ORD_VAL,
                FFP_BUY_EXCTD_QTY,
                FFP_SELL_EXCTD_QTY,
                FFP_OPNPSTN_FLW,
                FFP_OPNPSTN_QTY,
                FFP_OPNPSTN_VAL,
                FFP_MTM_OPN_VAl,
                NVL(FFP_AVG_PRC,0)             /** Ver 4.0 **/
          FROM  FFP_FO_FUTURES_PSTN
          WHERE FFP_CLM_MTCH_ACCNT = :c_clm_mtch_accnt
          AND   FFP_UNDRLYNG       = :c_fup_undrlyng
      		AND   FFP_XCHNG_CD        = :c_xchng_cd
    			AND   FFP_OPNPSTN_QTY    !=  0
      		AND   FFP_PRDCT_TYP      !=  'P'
          ORDER BY FFP_EXPRY_DT asc;
        END;
      END-EXEC;	

		while ( 1 )
		{
			MEMSET(st_actn);
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"SPAN2NRML INSIDE FUTURE WHILE LOOP.");
			}

			EXEC SQL FETCH :ffp_cursor
							 INTO	:st_cntpos_crrnt.c_cln_mtch_accnt,
										:st_cntpos_crrnt.c_xchng_cd,
										:st_cntpos_crrnt.c_prd_typ,
										:st_cntpos_crrnt.c_ctgry_indstk,
										:st_cntpos_crrnt.c_undrlyng,
										:c_exp_dt,
										:st_cntpos_crrnt.c_exrc_typ,
										:st_cntpos_crrnt.c_cntrct_tag,
										:st_cntpos_crrnt.l_ibuy_qty,
										:st_cntpos_crrnt.d_ibuy_ord_vl,
										:st_cntpos_crrnt.l_isell_qty,
										:st_cntpos_crrnt.d_isell_ord_vl,
										:st_cntpos_crrnt.l_exbuy_qty,
										:st_cntpos_crrnt.d_exbuy_ord_vl,
										:st_cntpos_crrnt.l_exsell_qty,
										:st_cntpos_crrnt.d_exsell_ord_vl,
										:st_cntpos_crrnt.l_buy_exctd_qty,
										:st_cntpos_crrnt.l_sell_exctd_qty,
										:st_cntpos_crrnt.c_opnpstn_flw,
										:st_cntpos_crrnt.l_opnpstn_qty,
										:st_cntpos_crrnt.d_org_opn_val,
										:st_cntpos_crrnt.d_mtm_opn_val,
                    :d_avg_price ;                  /*** Ver 4.0 **/

			if ( SQLCODE != 0 )
			{
				if ( SQLCODE	==	NO_DATA_FOUND && i_rec_cntr != 0	)
				{
					fn_userlog(c_ServiceName,"INSIDE NO_DATA_FOUND.");
					strcpy(st_actn.c_xchng_cd,st_undpstn_old.c_xchng_cd);
      		strcpy(st_actn.c_cln_mtch_accnt,st_undpstn_old.c_cln_mtch_accnt);
      		strcpy(st_actn.c_undrlyng,st_undpstn_old.c_undrlyng);
      		strcpy(st_actn.c_ref_rmrks,"SPAN To Normal Conversion");
      		strcpy(st_actn.c_rout_crt,st_usrprfl.c_rout_crt);
					st_actn.c_prd_typ	=	st_undpstn_old.c_prd_typ;

					if(DEBUG_MSG_LVL_0)
					{
      			fn_userlog(c_ServiceName,"SPAN2NRML st_actn.c_cln_mtch_accnt Is :%s:",st_actn.c_cln_mtch_accnt);
    				fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobeold.l_buy_exctd_qty Is :%ld:",st_undpstn_tobeold.l_buy_exctd_qty);
						fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobeold.l_sell_exctd_qty Is :%ld:",st_undpstn_tobeold.l_sell_exctd_qty);
					}

					i_returncode = fn_upd_mrgn (	c_ServiceName,
                                      	&st_actn,
                                      	&st_undpstn_old,
                                      	&st_undpstn_tobeold,
                                      	c_err_msg
                                    	);

        	if ( i_returncode != 0 )
        	{
          	EXEC SQL CLOSE :ffp_cursor;
          	fn_errlog( c_ServiceName, "S31170",SQLMSG, c_err_msg );
          	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}
		
					if(DEBUG_MSG_LVL_0)
					{
						fn_userlog(c_ServiceName,"SPAN2NRML CURRENT MARGIN IS :%lf:",st_undpstn_crrnt.d_trd_mrgn);
						fn_userlog(c_ServiceName,"SPAN2NRML TO BE MARGIN IS :%lf:",st_undpstn_tobeold.d_trd_mrgn);
					}

        	d_diff_mrgn = st_undpstn_crrnt.d_trd_mrgn - st_undpstn_tobeold.d_trd_mrgn;

					if(DEBUG_MSG_LVL_0)
					{
						fn_userlog ( c_ServiceName, "Difference in UTM :%lf:", d_diff_mrgn );
						fn_userlog ( c_ServiceName, "c_drcr_flg Is :%c:",c_drcr_flg);
					}

					if ( d_diff_mrgn  != 0 )
        	{
						d_balance_amt  = 0.0;   /*** Ver 1.1 ***/
          	i_returncode = fn_upd_spnlimits ( c_ServiceName,
            	                                &st_actn,
              	                              ptr_st_err_msg,
                	                            MARGIN_ADJ_ON_TRD_EXEC,
                  	                          c_drcr_flg,
                    	                        d_diff_mrgn,
                      	                      &d_balance_amt
                        	                  );
          	if ( i_returncode != 0 )
          	{
							switch ( i_returncode )
							{
								case INSUFFICIENT_LIMITS  :

									fn_userlog(c_ServiceName,"Inside  INSUFFICIENT_LIMITS Case.");
									sprintf (c_msg, "Insufficient Limit For Match Account :%s:",st_actn.c_cln_mtch_accnt);
    							fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
									/*** fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);	** Ver 1.2 ** *** Commented in Ver 3.5 ***/
									/*** strcpy(c_err_msg,"Please allocate additional funds to increase your limit.");		*** Ver 1.4 *** Commented in Ver 3.5 ***/
									/*** Ver 1.2	Added for Report	***/ 
									strcpy(c_cnvrsn_rmrks,"Insufficient Limit For Match Account");
									strcpy(c_status,"FAIL");
									strcpy	( c_mrgn_typ,"SPAN Based Margining");	/*** Ver 1.4 ***/
									/*i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status);*/		/*** Ver 1.4 ***/
									/*** i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg , c_xchng_cd);	*** Ver 1.4 *** *** c_xchng_cd added in Ver 2.0 *** Commenetd in ver 3.5 ***/
    							/*** if (i_returncode != 0)
    							{
      							 fn_userlog(c_ServiceName,"Failed to Insert in Report Table ");
    							} *** Commented in Ver 3.5 ***/

									/*** Ver 3.5 starts ***/
									if( c_balance_flg != 'Y' ) 
									{
										d_balance_amt_tmp = d_balance_amt;	
										c_balance_flg = 'Y';
									}
									c_mrgn_insufficient_flg ='Y';				
									/*** Ver 3.5 ends ***/

									/**** Ver 1.2 ****/
								break;
							}

            	/*** EXEC SQL CLOSE :ffp_cursor;
            	fn_errlog( c_ServiceName, "S31175",LIBMSG, c_err_msg );
            	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    *** Ver 1.2 ***
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); *** Commented in Ver 3.5 ***/
         	 	}

						if( c_balance_flg == 'Y' ) /*** Ver 3.5 ***/
						{
							d_total_amount = d_total_amount + d_diff_mrgn;
						}			

          	st_undpstn_tobeold.d_trd_mrgn = st_undpstn_tobeold.d_trd_mrgn + d_balance_amt;

          	d_bal_to_apply = d_balance_amt;

          	if ( (d_bal_to_apply*-1.0) > st_undpstn_tobeold.d_exctd_mrgn )
          	{
            	st_undpstn_tobeold.d_exctd_mrgn = 0;
            	d_bal_to_apply = d_bal_to_apply + st_undpstn_tobeold.d_exctd_mrgn;
          	}
          	else
          	{
           	 	st_undpstn_tobeold.d_exctd_mrgn = st_undpstn_tobeold.d_exctd_mrgn + d_bal_to_apply ;
            	d_bal_to_apply = 0;
          	}
          	if ( (d_bal_to_apply*-1.0) > st_undpstn_tobeold.d_sprd_mrgn )
          	{
            	st_undpstn_tobe.d_sprd_mrgn = 0;
            	d_bal_to_apply = d_bal_to_apply + st_undpstn_tobeold.d_sprd_mrgn;
          	}
          	else
          	{
            	st_undpstn_tobeold.d_sprd_mrgn = st_undpstn_tobeold.d_sprd_mrgn + d_bal_to_apply ;
            	d_bal_to_apply = 0;
          	}

          	st_undpstn_tobeold.d_sprd_pl = st_undpstn_tobeold.d_sprd_pl - d_bal_to_apply;

        	}

					if(DEBUG_MSG_LVL_0)
					{
						fn_userlog(c_ServiceName,"SPAN2NRML	CONTRACT TAG IS :%c:",c_cntrct_tag);
					}

					EXEC SQL
          	SELECT  1
          	INTO    :i_fup_cnt
          	FROM    FUP_FUT_UNDRLYNG_PSTN
          	WHERE   FUP_CLM_MTCH_ACCNT  = :st_cntpos_crrnt.c_cln_mtch_accnt
          	AND     FUP_XCHNG_CD        = :st_cntpos_crrnt.c_xchng_cd
          	AND     FUP_PRDCT_TYP       = :st_cntpos_crrnt.c_prd_typ
          	AND     FUP_INDSTK          = :st_cntpos_crrnt.c_ctgry_indstk
          	AND     FUP_UNDRLYNG        = :st_cntpos_crrnt.c_undrlyng
          	AND     FUP_CNTRCT_TAG      = :c_cntrct_tag;

        	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
        	{
          	EXEC SQL CLOSE :ffp_cursor;
          	fn_errlog( c_ServiceName, "S31180",SQLMSG, c_err_msg );
          	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}

					if (  SQLCODE ==  NO_DATA_FOUND )
        	{
          	i_fup_cnt = 0;
        	}

        	if ( st_undpstn_tobeold.l_opnpstn_qty > 0 )
        	{
          	st_undpstn_tobeold.c_opnpstn_flw = BUY;
       	 	}
        	else if ( st_undpstn_tobeold.l_opnpstn_qty < 0 )
        	{
          	st_undpstn_tobeold.c_opnpstn_flw = SELL;
        	}
        	else
        	{
          	st_undpstn_tobeold.c_opnpstn_flw = NEUTRAL;
        	}

					if(DEBUG_MSG_LVL_0)
					{
						fn_userlog(c_ServiceName,"SPAN2NRML	Inside NO_DATA_FOUND i_fup_cnt Is :%d:",i_fup_cnt);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.c_cln_mtch_accnt Is :%s:",st_undpstn_tobeold.c_cln_mtch_accnt);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.c_xchng_cd Is :%s:",st_undpstn_tobeold.c_xchng_cd);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.c_prd_typ Is :%c:",st_undpstn_tobeold.c_prd_typ);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.c_ctgry_indstk Is :%c:",st_undpstn_tobeold.c_ctgry_indstk);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.c_undrlyng Is :%s:",st_undpstn_tobeold.c_undrlyng);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.c_cntrct_tag Is :%c:",st_undpstn_tobeold.c_cntrct_tag);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.l_ibuy_qty Is :%ld:",st_undpstn_tobeold.l_ibuy_qty);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.d_ibuy_ord_vl Is :%lf:",st_undpstn_tobeold.d_ibuy_ord_vl);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.l_isell_qty Is :%ld:",st_undpstn_tobeold.l_isell_qty);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.d_isell_ord_vl Is :%lf:",st_undpstn_tobeold.d_isell_ord_vl);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.l_exbuy_qty Is :%ld:",st_undpstn_tobeold.l_exbuy_qty);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.d_exbuy_ord_vl Is :%lf:",st_undpstn_tobeold.d_exbuy_ord_vl);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.l_exsell_qty Is :%ld:",st_undpstn_tobeold.l_exsell_qty);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.d_exsell_ord_vl Is :%lf:",st_undpstn_tobeold.d_exsell_ord_vl);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.l_buy_exctd_qty Is :%ld:",st_undpstn_tobeold.l_buy_exctd_qty);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.l_sell_exctd_qty Is :%ld:",st_undpstn_tobeold.l_sell_exctd_qty);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.c_opnpstn_flw Is :%c:",st_undpstn_tobeold.c_opnpstn_flw);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.l_opnpstn_qty Is :%ld:",st_undpstn_tobeold.l_opnpstn_qty);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.d_org_opn_val Is :%lf:",st_undpstn_tobeold.d_org_opn_val);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.d_mtm_opn_val Is :%lf:",st_undpstn_tobeold.d_mtm_opn_val);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.d_exctd_mrgn Is :%lf:",st_undpstn_tobeold.d_exctd_mrgn);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.d_sprd_mrgn Is :%lf:",st_undpstn_tobeold.d_sprd_mrgn);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.d_sprd_pl Is :%lf:",st_undpstn_tobeold.d_sprd_pl);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.d_trd_mrgn Is :%lf:",st_undpstn_tobeold.d_trd_mrgn);
						fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND st_undpstn_tobeold.d_mm_trd_mrgn Is :%lf:",st_undpstn_tobeold.d_mm_trd_mrgn);
					}

					if ( i_fup_cnt  ==  0 )
        	{
          	EXEC SQL
            	INSERT INTO FUP_FUT_UNDRLYNG_PSTN
            	(
              	FUP_CLM_MTCH_ACCNT,
              	FUP_XCHNG_CD,
              	FUP_PRDCT_TYP,
              	FUP_INDSTK,
              	FUP_UNDRLYNG,
              	FUP_CNTRCT_TAG,
              	FUP_UIBUY_QTY,
              	FUP_UIBUY_VAL,
              	FUP_UISELL_QTY,
              	FUP_UISELL_VAL,
              	FUP_UEXBUY_QTY,
              	FUP_UEXBUY_VAL,
              	FUP_UEXSELL_QTY,
              	FUP_UEXSELL_VAL,
              	FUP_UBUY_EXCTD_QTY,
              	FUP_USELL_EXCTD_QTY,
              	FUP_UOPNPSTN_FLW,
              	FUP_UOPNPSTN_QTY,
              	FUP_UOPNPSTN_VAL,
              	FUP_UMTM_OPN_VAL,
              	FUP_UORDR_MRGN,
              	FUP_UEXCTD_MRGN,
              	FUP_USPREAD_MRGN,
              	FUP_USPREAD_PNL,
              	FUP_ADD_MRGN_VAL,
              	FUP_UTRD_MRGN,
              	FUP_TRD_DT,
              	FUP_UMIN_TRD_MRGN
            	)
						VALUES
							(
								:st_undpstn_tobeold.c_cln_mtch_accnt,
              	:st_undpstn_tobeold.c_xchng_cd,
              	:st_undpstn_tobeold.c_prd_typ,
              	:st_undpstn_tobeold.c_ctgry_indstk,
              	:st_undpstn_tobeold.c_undrlyng,
              	:st_undpstn_tobeold.c_cntrct_tag,
              	:st_undpstn_tobeold.l_ibuy_qty,
              	:st_undpstn_tobeold.d_ibuy_ord_vl,
              	:st_undpstn_tobeold.l_isell_qty,
              	:st_undpstn_tobeold.d_isell_ord_vl,
              	:st_undpstn_tobeold.l_exbuy_qty,
              	:st_undpstn_tobeold.d_exbuy_ord_vl,
              	:st_undpstn_tobeold.l_exsell_qty,
              	:st_undpstn_tobeold.d_exsell_ord_vl,
              	:st_undpstn_tobeold.l_buy_exctd_qty,
              	:st_undpstn_tobeold.l_sell_exctd_qty,
              	:st_undpstn_tobeold.c_opnpstn_flw,
              	:st_undpstn_tobeold.l_opnpstn_qty,
              	:st_undpstn_tobeold.d_org_opn_val,
              	:st_undpstn_tobeold.d_mtm_opn_val,
              	0,
              	:st_undpstn_tobeold.d_exctd_mrgn,
              	:st_undpstn_tobeold.d_sprd_mrgn,
              	:st_undpstn_tobeold.d_sprd_pl,
              	0,
              	:st_undpstn_tobeold.d_trd_mrgn,
              	:c_trade_dt,
              	:st_undpstn_tobeold.d_mm_trd_mrgn
							);
					
						if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
          	{
            	EXEC SQL CLOSE :ffp_cursor;
            	fn_errlog( c_ServiceName, "S31185",SQLMSG, c_err_msg );
            	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          	}
				}
				else if (	i_fup_cnt ==  1 )
				{
					 EXEC SQL
            UPDATE  FUP_FUT_UNDRLYNG_PSTN
            SET     FUP_UIBUY_QTY       = :st_undpstn_tobeold.l_ibuy_qty,
                    FUP_UIBUY_VAL       = :st_undpstn_tobeold.d_ibuy_ord_vl,
                    FUP_UISELL_QTY      = :st_undpstn_tobeold.l_isell_qty,
                    FUP_UISELL_VAL      = :st_undpstn_tobeold.d_isell_ord_vl,
                    FUP_UEXBUY_QTY      = :st_undpstn_tobeold.l_exbuy_qty,
                    FUP_UEXBUY_VAL      = :st_undpstn_tobeold.d_exbuy_ord_vl,
                    FUP_UEXSELL_QTY     = :st_undpstn_tobeold.l_exsell_qty,
                    FUP_UEXSELL_VAL     = :st_undpstn_tobeold.d_exsell_ord_vl,
                    FUP_UBUY_EXCTD_QTY  = :st_undpstn_tobeold.l_buy_exctd_qty,
                    FUP_USELL_EXCTD_QTY = :st_undpstn_tobeold.l_sell_exctd_qty,
                    FUP_UOPNPSTN_FLW    = :st_undpstn_tobeold.c_opnpstn_flw,
                    FUP_UOPNPSTN_QTY    = :st_undpstn_tobeold.l_opnpstn_qty,
                    FUP_UOPNPSTN_VAL    = :st_undpstn_tobeold.d_org_opn_val,
                    FUP_UMTM_OPN_VAL    = :st_undpstn_tobeold.d_mtm_opn_val,
                    FUP_UEXCTD_MRGN     = :st_undpstn_tobeold.d_exctd_mrgn,
                    FUP_USPREAD_MRGN    = :st_undpstn_tobeold.d_sprd_mrgn,
                    FUP_USPREAD_PNL     = :st_undpstn_tobeold.d_sprd_pl,
                    FUP_UTRD_MRGN       = :st_undpstn_tobeold.d_trd_mrgn,
                    FUP_TRD_DT          = :c_trade_dt,
                    FUP_UMIN_TRD_MRGN   = :st_undpstn_tobeold.d_mm_trd_mrgn
            WHERE   FUP_CLM_MTCH_ACCNT  = :st_undpstn_tobeold.c_cln_mtch_accnt
            AND     FUP_XCHNG_CD        = :st_undpstn_tobeold.c_xchng_cd
            AND     FUP_PRDCT_TYP       = :st_undpstn_tobeold.c_prd_typ
            AND     FUP_INDSTK          = :st_undpstn_tobeold.c_ctgry_indstk
            AND     FUP_UNDRLYNG        = :st_undpstn_tobeold.c_undrlyng
            AND     FUP_CNTRCT_TAG      = :st_undpstn_tobeold.c_cntrct_tag;

          if ( SQLCODE != 0 )
          {
            EXEC SQL CLOSE :ffp_cursor;
            fn_errlog( c_ServiceName, "S31190",SQLMSG, c_err_msg );
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

				}

        /** Ver 2.6 Starts **/

        strcpy(st_pstn_actn.c_cln_mtch_accnt,st_undpstn_tobeold.c_cln_mtch_accnt);
        strcpy(st_pstn_actn.c_xchng_cd,st_undpstn_tobeold.c_xchng_cd);
        st_pstn_actn.c_prd_typ = st_undpstn_tobeold.c_prd_typ;
        strcpy(st_pstn_actn.c_undrlyng,st_undpstn_tobeold.c_undrlyng);
        st_pstn_actn.c_cntrct_tag = st_undpstn_tobeold.c_cntrct_tag;

        i_returncode =  fn_calc_trgprc_on_chngmrgn(c_ServiceName,
                                                &st_pstn_actn,
                                                &st_err_msg);
        if ( i_returncode != 0 )
        {
          fn_errlog(c_ServiceName, "S31195", LIBMSG, st_err_msg.c_err_msg );
          fn_userlog(c_ServiceName,"Pls check, Error in calcualting Auto MTM Trigger Price");
        }

        /** Ver  2.6 Ends **/

					MEMSET(st_undpstn_old);
					MEMSET(st_undpstn_crrnt);
					MEMSET(st_undpstn_tobe);
					MEMSET(st_undpstn_tobeold);

					break;

				}

				EXEC SQL CLOSE :ffp_cursor;
 				fn_errlog( c_ServiceName, "S31200",SQLMSG, c_err_msg );
 				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
 				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"SPAN2NRML c_prv_undrlyng Is :%s:",c_prv_undrlyng);
				fn_userlog(c_ServiceName,"SPAN2NRML st_cntpos_crrnt.c_undrlyng Is :%s:",st_cntpos_crrnt.c_undrlyng);
				fn_userlog(c_ServiceName,"SPAN2NRML c_prv_cntrct_tag Is :%c:",c_prv_cntrct_tag);
				fn_userlog(c_ServiceName,"SPAN2NRML st_cntpos_crrnt.c_cntrct_tag Is :%c:",st_cntpos_crrnt.c_cntrct_tag);
			}

			if ( (strcmp(c_prv_undrlyng,st_cntpos_crrnt.c_undrlyng) != 0)  ||	c_prv_cntrct_tag	!= st_cntpos_crrnt.c_cntrct_tag  )
			{
				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"SPAN2NRML INSIDE MEMSET.");
				}
				MEMSET(st_undpstn_tobe);

			}

			strcpy(st_undpstn_crrnt.c_cln_mtch_accnt,st_cntpos_crrnt.c_cln_mtch_accnt);
			strcpy(st_undpstn_crrnt.c_xchng_cd,st_cntpos_crrnt.c_xchng_cd);
			strcpy(st_undpstn_crrnt.c_undrlyng,st_cntpos_crrnt.c_undrlyng);
			st_undpstn_crrnt.c_prd_typ	=	st_cntpos_crrnt.c_prd_typ;
			st_undpstn_crrnt.c_ctgry_indstk	=	st_cntpos_crrnt.c_ctgry_indstk;
			st_undpstn_crrnt.c_cntrct_tag	=	st_cntpos_crrnt.c_cntrct_tag;
			st_undpstn_crrnt.l_ibuy_qty		=	st_cntpos_crrnt.l_ibuy_qty;
			st_undpstn_crrnt.d_ibuy_ord_vl	=	st_cntpos_crrnt.d_ibuy_ord_vl;
			st_undpstn_crrnt.l_isell_qty	=	st_cntpos_crrnt.l_isell_qty;
			st_undpstn_crrnt.d_isell_ord_vl	=	st_cntpos_crrnt.d_isell_ord_vl;
			st_undpstn_crrnt.l_exbuy_qty	=	st_cntpos_crrnt.l_exbuy_qty;
			st_undpstn_crrnt.d_exbuy_ord_vl	=	st_cntpos_crrnt.d_exbuy_ord_vl;
			st_undpstn_crrnt.l_exsell_qty	=	st_cntpos_crrnt.l_exsell_qty;
			st_undpstn_crrnt.d_exsell_ord_vl	=	st_cntpos_crrnt.d_exsell_ord_vl;
			st_undpstn_crrnt.l_buy_exctd_qty	=	st_cntpos_crrnt.l_buy_exctd_qty;
			st_undpstn_crrnt.l_sell_exctd_qty	=	st_cntpos_crrnt.l_sell_exctd_qty;
			st_undpstn_crrnt.l_opnpstn_qty	=	st_cntpos_crrnt.l_opnpstn_qty;
			st_undpstn_crrnt.d_org_opn_val	=	st_cntpos_crrnt.d_org_opn_val;
			st_undpstn_crrnt.d_mtm_opn_val	=	st_cntpos_crrnt.d_mtm_opn_val;

			strcpy(st_undpstn_tobe.c_cln_mtch_accnt,st_undpstn_crrnt.c_cln_mtch_accnt);
			strcpy(st_undpstn_tobe.c_xchng_cd,st_undpstn_crrnt.c_xchng_cd);
			strcpy(st_undpstn_tobe.c_undrlyng,st_undpstn_crrnt.c_undrlyng);
			st_undpstn_tobe.c_prd_typ	      =	st_undpstn_crrnt.c_prd_typ;
			st_undpstn_tobe.c_ctgry_indstk	=	st_undpstn_crrnt.c_ctgry_indstk;
			st_undpstn_tobe.c_cntrct_tag	  =	st_undpstn_crrnt.c_cntrct_tag;
			st_undpstn_tobe.l_ibuy_qty			=	st_undpstn_crrnt.l_ibuy_qty;
			st_undpstn_tobe.d_ibuy_ord_vl		=	st_undpstn_crrnt.d_ibuy_ord_vl;
			st_undpstn_tobe.l_isell_qty			=	st_undpstn_crrnt.l_isell_qty;
			st_undpstn_tobe.d_isell_ord_vl	=	st_undpstn_crrnt.d_isell_ord_vl;
			st_undpstn_tobe.l_exbuy_qty			=	st_undpstn_crrnt.l_exbuy_qty;
			st_undpstn_tobe.d_exbuy_ord_vl	=	st_undpstn_crrnt.d_exbuy_ord_vl;
			st_undpstn_tobe.l_exsell_qty		=	st_undpstn_crrnt.l_exsell_qty;
			st_undpstn_tobe.d_exsell_ord_vl	=	st_undpstn_crrnt.d_exsell_ord_vl;

			c_cntrct_tag		=	st_cntpos_crrnt.c_cntrct_tag	;

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"SPAN2NRML CURRENT CONTRACT TAG IS :%c:",c_cntrct_tag);
				fn_userlog(c_ServiceName,"SPAN2NRML PREVIOUS CONTRACT TAG IS :%c:",c_prv_cntrct_tag);
				fn_userlog(c_ServiceName,"SPAN2NRML CURRENT UNDRLYNG IS :%s:",st_cntpos_crrnt.c_undrlyng);
				fn_userlog(c_ServiceName,"SPAN2NRML PREVIOUS UNDRLYNG IS :%s:",c_prv_undrlyng);
			}

			if ( ( c_cntrct_tag	!=	c_prv_cntrct_tag) && i_rec_cntr != 0 )
			{
				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"SPAN2NRML INSIDE CONTRACT TAG MISMATCH CASE.");
				}
				strcpy(st_actn.c_xchng_cd,st_undpstn_old.c_xchng_cd);
        strcpy(st_actn.c_cln_mtch_accnt,st_undpstn_old.c_cln_mtch_accnt);
        strcpy(st_actn.c_undrlyng,st_undpstn_old.c_undrlyng);
        strcpy(st_actn.c_ref_rmrks,"SPAN To Normal Conversion");
        strcpy(st_actn.c_rout_crt,st_usrprfl.c_rout_crt);
        st_actn.c_prd_typ = st_undpstn_old.c_prd_typ;

				i_returncode = fn_upd_mrgn (	c_ServiceName,
                               				&st_actn,
                               				&st_undpstn_old,
                               				&st_undpstn_tobeold,
                               				c_err_msg
 																		);

 				if ( i_returncode != 0 )
  			{
					EXEC SQL CLOSE :ffp_cursor;
      		fn_userlog( c_ServiceName, "Failed To Fetch Future Records.");
      		fn_errlog( c_ServiceName, "S31205",SQLMSG, c_err_msg );
      		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  			}

				d_diff_mrgn = st_undpstn_old.d_trd_mrgn - st_undpstn_tobeold.d_trd_mrgn;

				if(DEBUG_MSG_LVL_0)
  			{
    			fn_userlog ( c_ServiceName, "Difference in UTM :%lf:", d_diff_mrgn );
  				fn_userlog ( c_ServiceName, " c_drcr_flg Is :%c:",c_drcr_flg);
				}

				if ( d_diff_mrgn  != 0 )
  			{
					d_balance_amt  = 0.0;   /*** Ver 1.1 ***/
    			i_returncode = fn_upd_spnlimits ( c_ServiceName,
          			                            &st_actn,
                			                      ptr_st_err_msg,
                      			                MARGIN_ADJ_ON_TRD_EXEC,
                            			          c_drcr_flg,
                                      			d_diff_mrgn,
                                      			&d_balance_amt
                                    			);
    			if ( i_returncode != 0 )
    			{
						switch ( i_returncode )
  					{
    					case INSUFFICIENT_LIMITS  :

								fn_userlog(c_ServiceName,"Inside  INSUFFICIENT_LIMITS Case.");
								sprintf (c_msg, "Insufficient Limit For Match Account :%s:",st_actn.c_cln_mtch_accnt);
								fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
								/*** fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);	** Ver 1.2 ** *** Commented in Ver 3.5 ***/
								/*** strcpy(c_err_msg,"Please allocate additional funds to increase your limit.");		*** Ver 1.4 *** Commented in Ver 3.5 ***/
								/*** Ver 1.2  Added for Report  ***/
                strcpy(c_cnvrsn_rmrks,"Insufficient Limit For Match Account");
                strcpy(c_status,"FAIL");
								strcpy	( c_mrgn_typ,"SPAN Based Margining");	/*** Ver 1.4 ***/
            		/*i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status);*/		/*** Ver 1.4 ***/
								/*** i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg , c_xchng_cd,st_usrprfl.c_user_id,0,c_cnvrsion_mode);	*** Ver 1.4 *** *** c_xchng_cd added in Ver 2.0 
                if (i_returncode != 0)
                {
                   fn_userlog(c_ServiceName,"Failed to Insert in Report Table ");
                }*** Commented in *** ver 3.5 ***/

								/*** Ver 3.5 starts ***/
								if( c_balance_flg != 'Y' ) 
								{
									d_balance_amt_tmp = d_balance_amt;	
									c_balance_flg = 'Y';
								}
								c_mrgn_insufficient_flg ='Y';	
								/*** Ver 3.5 ends ***/

                /**** Ver 1.2 ****/
							break;
  					}

						/*** EXEC SQL CLOSE :ffp_cursor;
          	fn_errlog( c_ServiceName, "S31210",LIBMSG, c_err_msg );
          	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    *** Ver 1.2 ***
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); *** Commented in Ver 3.5 ***/
    			}

					if( c_balance_flg == 'Y' ) /*** Ver 3.5 ***/
					{
						d_total_amount = d_total_amount + d_diff_mrgn;
					}			
    			st_undpstn_tobeold.d_trd_mrgn = st_undpstn_tobeold.d_trd_mrgn + d_balance_amt;

    			d_bal_to_apply = d_balance_amt;

    			if ( (d_bal_to_apply*-1.0) > st_undpstn_tobeold.d_exctd_mrgn )
    			{
      			st_undpstn_tobeold.d_exctd_mrgn = 0;
      			d_bal_to_apply = d_bal_to_apply + st_undpstn_tobeold.d_exctd_mrgn;
    			}
    			else
    			{
      			st_undpstn_tobeold.d_exctd_mrgn = st_undpstn_tobeold.d_exctd_mrgn + d_bal_to_apply ;
      			d_bal_to_apply = 0;
    			}
    			if ( (d_bal_to_apply*-1.0) > st_undpstn_tobeold.d_sprd_mrgn )
    			{
      			st_undpstn_tobeold.d_sprd_mrgn = 0;
      			d_bal_to_apply = d_bal_to_apply + st_undpstn_tobeold.d_sprd_mrgn;
    			}
    			else
    			{
      			st_undpstn_tobeold.d_sprd_mrgn = st_undpstn_tobeold.d_sprd_mrgn + d_bal_to_apply ;
      			d_bal_to_apply = 0;
   	 			}

    			st_undpstn_tobeold.d_sprd_pl = st_undpstn_tobeold.d_sprd_pl - d_bal_to_apply;

  			}
	
				EXEC SQL
        	SELECT  1
        	INTO    :i_fup_cnt
        	FROM    FUP_FUT_UNDRLYNG_PSTN
        	WHERE   FUP_CLM_MTCH_ACCNT  = :st_cntpos_crrnt.c_cln_mtch_accnt
        	AND     FUP_XCHNG_CD        = :st_cntpos_crrnt.c_xchng_cd
        	AND     FUP_PRDCT_TYP       = :st_cntpos_crrnt.c_prd_typ
        	AND     FUP_INDSTK          = :st_cntpos_crrnt.c_ctgry_indstk
        	AND     FUP_UNDRLYNG        = :st_cntpos_crrnt.c_undrlyng
        	AND     FUP_CNTRCT_TAG      = :c_prv_cntrct_tag;

      	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      	{
					EXEC SQL CLOSE :ffp_cursor;
          fn_userlog( c_ServiceName, "Failed To Fetch Future Records.");
          fn_errlog( c_ServiceName, "S31215",SQLMSG, c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}

      	if (  SQLCODE ==  NO_DATA_FOUND )
      	{
        	i_fup_cnt = 0;
      	}

				if ( st_undpstn_tobeold.l_opnpstn_qty > 0 )
				{
					st_undpstn_tobeold.c_opnpstn_flw = BUY;
  			}
  			else if ( st_undpstn_tobeold.l_opnpstn_qty < 0 )
  			{
    			st_undpstn_tobeold.c_opnpstn_flw = SELL;
  			}
  			else
  			{
    			st_undpstn_tobeold.c_opnpstn_flw = NEUTRAL;
  			}

				if ( i_fup_cnt	==	0	)
				{
					EXEC SQL
						INSERT INTO FUP_FUT_UNDRLYNG_PSTN
      			(
        			FUP_CLM_MTCH_ACCNT,
        			FUP_XCHNG_CD,
							FUP_PRDCT_TYP,
							FUP_INDSTK,
							FUP_UNDRLYNG,
							FUP_CNTRCT_TAG,
							FUP_UIBUY_QTY,
							FUP_UIBUY_VAL,
							FUP_UISELL_QTY,
							FUP_UISELL_VAL,
							FUP_UEXBUY_QTY,
							FUP_UEXBUY_VAL,
							FUP_UEXSELL_QTY,
							FUP_UEXSELL_VAL,
							FUP_UBUY_EXCTD_QTY,
							FUP_USELL_EXCTD_QTY,
							FUP_UOPNPSTN_FLW,
							FUP_UOPNPSTN_QTY,
							FUP_UOPNPSTN_VAL,
							FUP_UMTM_OPN_VAL,
							FUP_UORDR_MRGN,
							FUP_UEXCTD_MRGN,
							FUP_USPREAD_MRGN,
							FUP_USPREAD_PNL,
							FUP_ADD_MRGN_VAL,
							FUP_UTRD_MRGN,
							FUP_TRD_DT,
							FUP_UMIN_TRD_MRGN
      			)	
					VALUES
						(
							:st_undpstn_tobeold.c_cln_mtch_accnt,
							:st_undpstn_tobeold.c_xchng_cd,
							:st_undpstn_tobeold.c_prd_typ,
							:st_undpstn_tobeold.c_ctgry_indstk,
							:st_undpstn_tobeold.c_undrlyng,
							:st_undpstn_tobeold.c_cntrct_tag,
							:st_undpstn_tobeold.l_ibuy_qty,
							:st_undpstn_tobeold.d_ibuy_ord_vl,
							:st_undpstn_tobeold.l_isell_qty,
							:st_undpstn_tobeold.d_isell_ord_vl,
							:st_undpstn_tobeold.l_exbuy_qty,
							:st_undpstn_tobeold.d_exbuy_ord_vl,
							:st_undpstn_tobeold.l_exsell_qty,
							:st_undpstn_tobeold.d_exsell_ord_vl,
							:st_undpstn_tobeold.l_buy_exctd_qty,
							:st_undpstn_tobeold.l_sell_exctd_qty,
							:st_undpstn_tobeold.c_opnpstn_flw,
							:st_undpstn_tobeold.l_opnpstn_qty,
							:st_undpstn_tobeold.d_org_opn_val,
							:st_undpstn_tobeold.d_mtm_opn_val,
							0,
							:st_undpstn_tobeold.d_exctd_mrgn,
							:st_undpstn_tobeold.d_sprd_mrgn,
							:st_undpstn_tobeold.d_sprd_pl,
							0,
							:st_undpstn_tobeold.d_trd_mrgn,
							:c_trade_dt,
							:st_undpstn_tobeold.d_mm_trd_mrgn
						);
	
					if ( SQLCODE != 0	)
        	{
          	EXEC SQL CLOSE :ffp_cursor;
          	fn_errlog( c_ServiceName, "S31220",SQLMSG, c_err_msg );
          	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}

				}
				else if (	i_fup_cnt	==	1	)
				{
					EXEC SQL
						UPDATE	FUP_FUT_UNDRLYNG_PSTN
						SET			FUP_UIBUY_QTY				=	:st_undpstn_tobeold.l_ibuy_qty,
										FUP_UIBUY_VAL				=	:st_undpstn_tobeold.d_ibuy_ord_vl,
										FUP_UISELL_QTY			=	:st_undpstn_tobeold.l_isell_qty,
										FUP_UISELL_VAL			=	:st_undpstn_tobeold.d_isell_ord_vl,
										FUP_UEXBUY_QTY			=	:st_undpstn_tobeold.l_exbuy_qty,
										FUP_UEXBUY_VAL			=	:st_undpstn_tobeold.d_exbuy_ord_vl,
										FUP_UEXSELL_QTY			=	:st_undpstn_tobeold.l_exsell_qty,
										FUP_UEXSELL_VAL			=	:st_undpstn_tobeold.d_exsell_ord_vl,
										FUP_UBUY_EXCTD_QTY	=	:st_undpstn_tobeold.l_buy_exctd_qty,
										FUP_USELL_EXCTD_QTY	=	:st_undpstn_tobeold.l_sell_exctd_qty,
										FUP_UOPNPSTN_FLW		=	:st_undpstn_tobeold.c_opnpstn_flw,
										FUP_UOPNPSTN_QTY		=	:st_undpstn_tobeold.l_opnpstn_qty,
										FUP_UOPNPSTN_VAL		=	:st_undpstn_tobeold.d_org_opn_val,
										FUP_UMTM_OPN_VAL		=	:st_undpstn_tobeold.d_mtm_opn_val,
										FUP_UEXCTD_MRGN			=	:st_undpstn_tobeold.d_exctd_mrgn,
										FUP_USPREAD_MRGN		=	:st_undpstn_tobeold.d_sprd_mrgn,
										FUP_USPREAD_PNL			=	:st_undpstn_tobeold.d_sprd_pl,
										FUP_UTRD_MRGN				=	:st_undpstn_tobeold.d_trd_mrgn,
										FUP_TRD_DT					=	:c_trade_dt,
										FUP_UMIN_TRD_MRGN		=	:st_undpstn_tobeold.d_mm_trd_mrgn
						WHERE		FUP_CLM_MTCH_ACCNT	=	:st_undpstn_tobeold.c_cln_mtch_accnt
						AND			FUP_XCHNG_CD				=	:st_undpstn_tobeold.c_xchng_cd				
						AND			FUP_PRDCT_TYP				=	:st_undpstn_tobeold.c_prd_typ
						AND			FUP_INDSTK					=	:st_undpstn_tobeold.c_ctgry_indstk
						AND			FUP_UNDRLYNG				=	:st_undpstn_tobeold.c_undrlyng
						AND			FUP_CNTRCT_TAG			=	:st_undpstn_tobeold.c_cntrct_tag;
		
					if ( SQLCODE != 0 )
          {
            EXEC SQL CLOSE :ffp_cursor;
            fn_errlog( c_ServiceName, "S31225",SQLMSG, c_err_msg );
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
				} 			
		
        /** Ver 2.6 Starts **/

        strcpy(st_pstn_actn.c_cln_mtch_accnt,st_undpstn_tobeold.c_cln_mtch_accnt);
        strcpy(st_pstn_actn.c_xchng_cd,st_undpstn_tobeold.c_xchng_cd);
        st_pstn_actn.c_prd_typ = st_undpstn_tobeold.c_prd_typ;
        strcpy(st_pstn_actn.c_undrlyng,st_undpstn_tobeold.c_undrlyng);
        st_pstn_actn.c_cntrct_tag = st_undpstn_tobeold.c_cntrct_tag;

        i_returncode =  fn_calc_trgprc_on_chngmrgn(c_ServiceName,
                                                &st_pstn_actn,
                                                &st_err_msg);

        if ( i_returncode != 0 )
        {
          fn_errlog(c_ServiceName, "S31230", LIBMSG, st_err_msg.c_err_msg );
          fn_userlog(c_ServiceName,"Pls check, Error in calcualting Auto MTM Trigger Price");
        }

        /** Ver  2.6 Ends **/
	
				MEMSET(st_undpstn_tobeold);
				MEMSET(st_undpstn_old);

			}

			memcpy(&st_undpstn_old,&st_undpstn_crrnt,sizeof( st_undpstn_old ) );
			
			if(DEBUG_MSG_LVL_3)
			{
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.c_xchng_cd Is :%s:",st_undpstn_tobe.c_xchng_cd);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.c_prd_typ Is :%c:",st_undpstn_tobe.c_prd_typ);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.c_ctgry_indstk Is :%c:",st_undpstn_tobe.c_ctgry_indstk);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.c_undrlyng Is :%s:",st_undpstn_tobe.c_undrlyng);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.c_cntrct_tag Is :%c:",st_undpstn_tobe.c_cntrct_tag);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.l_ibuy_qty Is :%ld:",st_undpstn_tobe.l_ibuy_qty);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.d_ibuy_ord_vl Is :%lf:",st_undpstn_tobe.d_ibuy_ord_vl);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.l_isell_qty Is :%ld:",st_undpstn_tobe.l_isell_qty);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.d_isell_ord_vl Is :%lf:",st_undpstn_tobe.d_isell_ord_vl);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.l_exbuy_qty Is :%ld:",st_undpstn_tobe.l_exbuy_qty);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.d_exbuy_ord_vl Is :%lf:",st_undpstn_tobe.d_exbuy_ord_vl);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.l_exsell_qty Is :%ld:",st_undpstn_tobe.l_exsell_qty);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.d_exsell_ord_vl Is :%lf:",st_undpstn_tobe.d_exsell_ord_vl);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.l_buy_exctd_qty Is :%ld:",st_undpstn_tobe.l_buy_exctd_qty);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.l_sell_exctd_qty Is :%ld:",st_undpstn_tobe.l_sell_exctd_qty);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.c_opnpstn_flw Is :%c:",st_undpstn_tobe.c_opnpstn_flw);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.l_opnpstn_qty Is :%ld:",st_undpstn_tobe.l_opnpstn_qty);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.d_org_opn_val Is :%lf:",st_undpstn_tobe.d_org_opn_val);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.d_mtm_opn_val Is :%lf:",st_undpstn_tobe.d_mtm_opn_val);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.d_exctd_mrgn Is :%lf:",st_undpstn_tobe.d_exctd_mrgn);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.d_sprd_mrgn Is :%lf:",st_undpstn_tobe.d_sprd_mrgn);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.d_sprd_pl Is :%lf:",st_undpstn_tobe.d_sprd_pl);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.d_trd_mrgn Is :%lf:",st_undpstn_tobe.d_trd_mrgn);
      	fn_userlog(c_ServiceName,"SPAN2NRML st_undpstn_tobe.d_mm_trd_mrgn Is :%lf:",st_undpstn_tobe.d_mm_trd_mrgn);
			}

			fn_sum_crtpos ( st_cntpos_crrnt,&st_undpstn_tobe);

			memcpy(&st_undpstn_tobeold,&st_undpstn_tobe,sizeof( st_undpstn_tobeold ) );

			c_prv_cntrct_tag	=	c_cntrct_tag	;
			strcpy(c_prv_undrlyng,st_cntpos_crrnt.c_undrlyng);
			i_rec_cntr	++;

		}

	}

	
  EXEC SQL CLOSE :fup_cursor;
  EXEC SQL FREE  :fup_cursor;

  EXEC SQL ALLOCATE :fop_und_cursor;

	EXEC SQL EXECUTE
    BEGIN
      OPEN  :fop_und_cursor FOR
      SELECT DISTINCT FOP_UNDRLYNG
      FROM    FOP_FO_OPTIONS_PSTN
      WHERE   FOP_CLM_MTCH_ACCNT  = :c_clm_mtch_accnt
      AND     FOP_XCHNG_CD        = :c_xchng_cd
      AND     FOP_OPNPSTN_QTY     !=  0;
    END;
  END-EXEC;

  if( SQLCODE != 0 )
  {
    fn_userlog( c_ServiceName, "Failed To Get Options Records.");
    fn_errlog( c_ServiceName, "S31235",SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	while (1)
	{

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPN2NRM - Inside While For Normal Option Position Creation.");
		}

    EXEC SQL FETCH  :fop_und_cursor
             INTO   :c_fop_undrlyng;

    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        fn_userlog(c_ServiceName,"Inside NO_DATA_FOUND Of Option Main While Loop.");
        break;
      }

      EXEC SQL CLOSE :fop_und_cursor;
      fn_userlog( c_ServiceName, "Failed To Fetch Option Records.");
      fn_errlog( c_ServiceName, "S31240",SQLMSG, c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"SPN2NRM Option Underlying Is :%s:",c_fop_undrlyng);
		}

		EXEC SQL ALLOCATE	:fop_cursor;

		EXEC SQL EXECUTE
			BEGIN
				OPEN		:fop_cursor	FOR
				SELECT	FOP_CLM_MTCH_ACCNT,
								FOP_XCHNG_CD,
								FOP_PRDCT_TYP,
								FOP_INDSTK,
								FOP_UNDRLYNG,
								FOP_EXPRY_DT,
								FOP_STRK_PRC,
								FOP_EXER_TYP,
								FOP_OPT_TYP,
								FOP_IBUY_QTY,
								FOP_IBUY_ORD_VAL,
								FOP_ISELL_QTY,
								FOP_ISELL_ORD_VAL,
								FOP_EXBUY_QTY,
								FOP_EXBUY_ORD_VAL,
								FOP_EXSELL_QTY,
								FOP_EXSELL_ORD_VAL,
								FOP_BUY_EXCTD_QTY,
								FOP_SELL_EXCTD_QTY,
								FOP_OPNPSTN_FLW,
								FOP_OPNPSTN_QTY,
								FOP_OPNPSTN_VAL,
								FOP_UORDR_MRGN,
								FOP_UEXCTD_MRGN,
								FOP_EXRC_QTY,
								FOP_DP_QTY,
								FOP_ASGND_QTY,
								FOP_ORD_BLKD_QTY,
								FOP_TRD_BLKD_QTY,
								FOP_MTM_FLG,
								FOP_IEXRC_QTY,
								FOP_EXEXRC_QTY,
								FOP_TRGGR_PRC,
								FOP_IDONTEXRC_QTY,
								FOP_EXDONTEXRC_QTY
					FROM	FOP_FO_OPTIONS_PSTN
					WHERE	FOP_CLM_MTCH_ACCNT	=	:c_clm_mtch_accnt	
					AND		FOP_UNDRLYNG				=	:c_fop_undrlyng
      		AND   FOP_XCHNG_CD        = :c_xchng_cd
					AND		FOP_OPNPSTN_QTY			!=	0;		
			END;
		END-EXEC;

		while ( 1 )
		{
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"SPN2NRML INSIDE OPTION WHILE LOOP.");
			}

			MEMSET(st_cntopt_pos_crrnt);
			MEMSET(st_cntopt_pos_tobe);

			EXEC SQL FETCH	:fop_cursor
							 INTO		:st_cntopt_pos_crrnt.c_cln_mtch_accnt,
											:st_cntopt_pos_crrnt.c_xchng_cd,	
											:st_cntopt_pos_crrnt.c_prd_typ,
											:st_cntopt_pos_crrnt.c_ctgry_indstk,
											:st_cntopt_pos_crrnt.c_undrlyng,
											:st_cntopt_pos_crrnt.c_expry_dt,
											:st_cntopt_pos_crrnt.l_strike_prc,
											:st_cntopt_pos_crrnt.c_exrc_typ,
											:st_cntopt_pos_crrnt.c_opt_typ,
											:st_cntopt_pos_crrnt.l_ibuy_qty,
											:st_cntopt_pos_crrnt.d_ibuy_ord_vl,
											:st_cntopt_pos_crrnt.l_isell_qty,
											:st_cntopt_pos_crrnt.d_isell_ord_vl,
											:st_cntopt_pos_crrnt.l_exbuy_qty,
											:st_cntopt_pos_crrnt.d_exbuy_ord_vl,
											:st_cntopt_pos_crrnt.l_exsell_qty,
											:st_cntopt_pos_crrnt.d_exsell_ord_vl,
											:st_cntopt_pos_crrnt.l_buy_exctd_qty,
											:st_cntopt_pos_crrnt.l_sell_exctd_qty,
											:st_cntopt_pos_crrnt.c_opnpstn_flw,
											:st_cntopt_pos_crrnt.l_opnpstn_qty,
											:st_cntopt_pos_crrnt.d_org_opn_val,
											:st_cntopt_pos_crrnt.d_ordr_mrgn,
											:st_cntopt_pos_crrnt.d_trd_mrgn,
											:st_cntopt_pos_crrnt.l_exrc_qty,
											:st_cntopt_pos_crrnt.l_ord_dp_qty,
											:st_cntopt_pos_crrnt.l_asgnd_qty,
											:st_cntopt_pos_crrnt.l_blkd_ordr_qty,
											:st_cntopt_pos_crrnt.l_blkd_trd_qty,
											:c_opt_mtm_flg,
											:st_cntopt_pos_crrnt.l_iexrc_qty,
											:st_cntopt_pos_crrnt.l_exexrc_qty,
											:st_cntopt_pos_crrnt.l_mtm_trg_prc,
											:st_cntopt_pos_crrnt.l_idont_exrc_qty,
											:st_cntopt_pos_crrnt.l_exdont_exrc_qty;

			if ( SQLCODE !=	0	)
			{
				if ( SQLCODE	==	NO_DATA_FOUND )
				{

					break;

				}
				
				EXEC SQL CLOSE :fop_cursor;
				fn_errlog( c_ServiceName, "S31245",SQLMSG, c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

			}

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"OPTION st_cntopt_pos_crrnt.l_buy_exctd_qty Is :%ld:",st_cntopt_pos_crrnt.l_buy_exctd_qty);
				fn_userlog(c_ServiceName,"OPTION st_cntopt_pos_crrnt.l_sell_exctd_qty Is :%ld:",st_cntopt_pos_crrnt.l_sell_exctd_qty);
				fn_userlog(c_ServiceName,"OPTION st_cntopt_pos_crrnt.c_opnpstn_flw Is :%c:",st_cntopt_pos_crrnt.c_opnpstn_flw);
				fn_userlog(c_ServiceName,"OPTION st_cntopt_pos_crrnt.l_opnpstn_qty Is :%ld:",st_cntopt_pos_crrnt.l_opnpstn_qty);
				fn_userlog(c_ServiceName,"OPTION st_cntopt_pos_crrnt.d_org_opn_val Is :%lf:",st_cntopt_pos_crrnt.d_org_opn_val);
				fn_userlog(c_ServiceName,"OPTION st_cntopt_pos_crrnt.d_trd_mrgn Is :%lf:",st_cntopt_pos_crrnt.d_trd_mrgn);
			}

			memcpy(&st_cntopt_pos_tobe,&st_cntopt_pos_crrnt,sizeof(st_cntopt_pos_tobe));

			strcpy(st_actn.c_xchng_cd,st_cntopt_pos_crrnt.c_xchng_cd);
      strcpy(st_actn.c_cln_mtch_accnt,st_cntopt_pos_crrnt.c_cln_mtch_accnt);
      strcpy(st_actn.c_undrlyng,st_cntopt_pos_crrnt.c_undrlyng);
			strcpy(st_actn.c_expry_dt,st_cntopt_pos_crrnt.c_expry_dt);
      strcpy(st_actn.c_ref_rmrks,"SPAN To Normal Conversion");
      strcpy(st_actn.c_rout_crt,st_usrprfl.c_rout_crt);

			st_actn.c_prd_typ			=	st_cntopt_pos_crrnt.c_prd_typ;
			st_actn.c_exrc_typ		= st_cntopt_pos_crrnt.c_exrc_typ;
			st_actn.c_opt_typ			=	st_cntopt_pos_crrnt.c_opt_typ;
			st_actn.l_strike_prc	=	st_cntopt_pos_crrnt.l_strike_prc;
      st_actn.c_ctgry_indstk = st_cntopt_pos_crrnt.c_ctgry_indstk;  /* Ver 2.6 */  

			i_opt_rtrn	=	fn_upd_mrgn_opt	(	c_ServiceName,
                     									&st_actn,
                     									&st_cntopt_pos_crrnt,
                      								&st_cntopt_pos_tobe,
                     									c_err_msg
																		);

			if ( i_opt_rtrn	!=	0	)
			{
				EXEC SQL CLOSE :fop_cursor;
        fn_errlog( c_ServiceName, "S31250",LIBMSG, c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			d_opt_mrgn	=	st_cntopt_pos_tobe.d_trd_mrgn * (-1);

			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog(c_ServiceName,"SPAN2NRML OPTION MARGIN IS :%lf:",d_opt_mrgn);
				fn_userlog(c_ServiceName," c_drcr_flg Is :%c:",c_drcr_flg);
			}

			if (	d_opt_mrgn	!=	0	)
			{
				d_balance_amt  = 0.0;   /*** Ver 1.1 ***/
				i_returncode = fn_upd_spnlimits	( c_ServiceName,
        	                            		&st_actn,
          	                          		ptr_st_err_msg,
            	                        		BLK_TRDMRGN_CONV_SPAN_TO_NORM,
              	                      		c_drcr_flg,
                	                    		d_opt_mrgn,
                  	                  		&d_balance_amt);
				if ( i_returncode	!=	0	)
				{
					switch ( i_returncode )
  				{
    				case INSUFFICIENT_LIMITS  :

							fn_userlog(c_ServiceName,"Inside  Option INSUFFICIENT_LIMITS Case.");
							sprintf (c_msg, "Insufficient Limit For Match Account :%s:",st_actn.c_cln_mtch_accnt);
							fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
							/*** fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);	** Ver 1.2	** *** Commented in Ver 3.5 ***/
							/*** strcpy(c_err_msg,"Please allocate additional funds to increase your limit.");		*** Ver 1.4 *** Commented in Ver 3.5 ***/
							/*** Ver 1.2  Added for Report  ***/
              strcpy(c_cnvrsn_rmrks,"Insufficient Limit For Match Account");
              strcpy(c_status,"FAIL");
							strcpy	( c_mrgn_typ,"SPAN Based Margining");	/*** Ver 1.4 ***/
							/*i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status);*/		/*** Ver 1.4 ***/
							/*** i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg , c_xchng_cd,st_usrprfl.c_user_id,0,c_cnvrsion_mode);	*** Ver 1.4 *** *** c_xchng_cd added in Ver 2.0 
              if (i_returncode != 0)
              {
                fn_userlog(c_ServiceName,"Failed to Insert in Report Table ");
              }*** Commenented in ver 3.5 ***/

							/*** Ver 3.5 starts ***/
							if( c_balance_flg != 'Y' ) 
							{
								d_balance_amt_tmp = d_balance_amt;	
								c_balance_flg = 'Y';
							}
							c_mrgn_insufficient_flg ='Y';		
							/*** Ver 3.5 ends ***/
              /**** Ver 1.2 ****/
						break;
					}

					/*** EXEC SQL CLOSE :fop_cursor;
          fn_errlog( c_ServiceName, "S31255",LIBMSG, c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    *** Ver 1.2 ***
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); *** Commented in Ver 3.5 ***/

				}

				if( c_balance_flg == 'Y' ) /*** Ver 3.5 ***/
				{
					d_total_amount = d_total_amount + d_opt_mrgn;
				}			

				st_cntopt_pos_tobe.d_trd_mrgn	=	st_cntopt_pos_tobe.d_trd_mrgn	+	d_balance_amt	;

				i_returncode = fn_get_spnmrgn_opt	( c_ServiceName,
                                            &st_actn,
                                            ptr_st_err_msg,
                                            &d_initial_mrgn,
                                            &d_min_mrgn,
                                            &d_somc,
                                            &d_min_trggr_prcnt  /** Ver 2.6 **/
 																					);

      	if ( i_returncode == -1 )
      	{
					EXEC SQL CLOSE :fop_cursor;
          fn_errlog( c_ServiceName, "S31260",LIBMSG, c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}

     	 	d_trigger_prc = 0.0;
			
			 	if ( st_actn.c_opt_typ == 'P' )
      	{	
        	d_trigger_prc = ( ( (double) st_actn.l_strike_prc  - (st_cntopt_pos_tobe.d_trd_mrgn / (st_cntopt_pos_tobe.l_opnpstn_qty * (-1)))) /
                          ( 1 - (d_min_mrgn/100.0 ) )                 );

					if(DEBUG_MSG_LVL_0)
					{
  					fn_userlog( c_ServiceName, "d_trigger_prc Is :%lf:",d_trigger_prc);
        	}
					st_cntopt_pos_tobe.l_mtm_trg_prc = d_trigger_prc;
      	}
				else
				{
					d_trigger_prc = ( ( (double) st_actn.l_strike_prc  + ( st_cntopt_pos_tobe.d_trd_mrgn / (st_cntopt_pos_tobe.l_opnpstn_qty * (-1)))) /
                          ( 1 + (d_min_mrgn/100.0 ) )                 );

					if(DEBUG_MSG_LVL_0)
					{
  					fn_userlog( c_ServiceName, "d_trigger_prc Is :%lf:", d_trigger_prc);
        	}
					st_cntopt_pos_tobe.l_mtm_trg_prc = d_trigger_prc ;
				}
			}

			d_value = ( double )st_cntopt_pos_tobe.l_mtm_trg_prc;

			if ( st_cntopt_pos_tobe.c_opt_typ == CALL )
  		{
    		i_up_down = UPPER;
  		}
  		else if ( st_cntopt_pos_tobe.c_opt_typ == PUT )
  		{
    		i_up_down = LOWER;
  		}

  		d_trg_prc = 0.0;

  		i_returncode = fn_nearest_paise( c_ServiceName,
      		                             d_value,
          		                         5,
              		                     i_up_down,
                  		                 c_err_msg,
                      		             &d_trg_prc );

  		st_cntopt_pos_tobe.l_mtm_trg_prc = d_trg_prc;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"OPTION st_cntopt_pos_tobe.l_buy_exctd_qty Is :%ld:",st_cntopt_pos_tobe.l_buy_exctd_qty);
			fn_userlog(c_ServiceName,"OPTION st_cntopt_pos_tobe.l_sell_exctd_qty Is :%ld:",st_cntopt_pos_tobe.l_sell_exctd_qty);
			fn_userlog(c_ServiceName,"OPTION st_cntopt_pos_tobe.d_org_opn_val Is :%lf:",st_cntopt_pos_tobe.d_org_opn_val);
			fn_userlog(c_ServiceName,"OPTION st_cntopt_pos_tobe.c_opnpstn_flw Is :%c:",st_cntopt_pos_tobe.c_opnpstn_flw);
		}

		EXEC SQL
			UPDATE	FOP_FO_OPTIONS_PSTN
      SET     FOP_IBUY_QTY      	= :st_cntopt_pos_tobe.l_ibuy_qty,
              FOP_IBUY_ORD_VAL  	= :st_cntopt_pos_tobe.d_ibuy_ord_vl,
              FOP_ISELL_QTY     	= :st_cntopt_pos_tobe.l_isell_qty,
              FOP_ISELL_ORD_VAL 	= :st_cntopt_pos_tobe.d_isell_ord_vl,
              FOP_EXBUY_QTY     	= :st_cntopt_pos_tobe.l_exbuy_qty,
              FOP_EXBUY_ORD_VAL 	= :st_cntopt_pos_tobe.d_exbuy_ord_vl,
              FOP_EXSELL_QTY    	= :st_cntopt_pos_tobe.l_exsell_qty,
              FOP_EXSELL_ORD_VAL	= :st_cntopt_pos_tobe.d_exsell_ord_vl,
              FOP_BUY_EXCTD_QTY 	= :st_cntopt_pos_tobe.l_buy_exctd_qty,
              FOP_SELL_EXCTD_QTY	= :st_cntopt_pos_tobe.l_sell_exctd_qty,
              FOP_OPNPSTN_FLW   	= :st_cntopt_pos_tobe.c_opnpstn_flw,
              FOP_OPNPSTN_QTY   	= :st_cntopt_pos_tobe.l_opnpstn_qty,
              FOP_OPNPSTN_VAL   	= :st_cntopt_pos_tobe.d_org_opn_val,
              FOP_UORDR_MRGN    	= :st_cntopt_pos_tobe.d_ordr_mrgn,
              FOP_UEXCTD_MRGN   	= :st_cntopt_pos_tobe.d_trd_mrgn,
              FOP_IEXRC_QTY       = :st_cntopt_pos_tobe.l_iexrc_qty,
              FOP_EXEXRC_QTY      = :st_cntopt_pos_tobe.l_exexrc_qty,
              FOP_EXRC_QTY      	= :st_cntopt_pos_tobe.l_exrc_qty,
              FOP_DP_QTY        	= :st_cntopt_pos_tobe.l_ord_dp_qty,
              FOP_ASGND_QTY     	= :st_cntopt_pos_tobe.l_asgnd_qty,
              FOP_TRGGR_PRC     	= :st_cntopt_pos_tobe.l_mtm_trg_prc,
              FOP_IDONTEXRC_QTY   = :st_cntopt_pos_tobe.l_idont_exrc_qty,
              FOP_EXDONTEXRC_QTY  = :st_cntopt_pos_tobe.l_exdont_exrc_qty
      WHERE   FOP_CLM_MTCH_ACCNT  = :st_actn.c_cln_mtch_accnt
      AND     FOP_XCHNG_CD        = :st_actn.c_xchng_cd
      AND     FOP_PRDCT_TYP       = :st_actn.c_prd_typ
      AND     FOP_UNDRLYNG        = :st_actn.c_undrlyng
      AND     FOP_EXER_TYP        = :st_actn.c_exrc_typ
      AND     FOP_OPT_TYP         = :st_actn.c_opt_typ
      AND     FOP_EXPRY_DT        = :st_actn.c_expry_dt
      AND     FOP_STRK_PRC        = :st_actn.l_strike_prc;

			if ( SQLCODE != 0 )
   	 	{
      	fn_errlog(c_ServiceName, "S31265", SQLMSG, ptr_st_err_msg->c_err_msg );
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );			/*** Ver 1.2 ***/
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    	}
    
      /** Ver 2.6 Starts **/
     if( st_cntopt_pos_tobe.c_opnpstn_flw == 'S' ) /** ver 3.0 ** if condition added ***/
     {
       i_returncode =  fn_ins_upd_trgprc(c_ServiceName,
                                       &st_actn,
                                       st_cntopt_pos_tobe,
                                       ptr_st_err_msg
                                       );
       if ( i_returncode != 0 )
       {
         fn_userlog(c_ServiceName,"Trigger price not inserted/updated");
         fn_errlog(c_ServiceName, "S31270", "Trigger price not inserted/updated", ptr_st_err_msg->c_err_msg );
       }
     }

     /** Ver 2.6  Ends **/
			
		}
	}	/***	Option Margin Calculation Loop	***/

	
	/*** Ver 3.5 starts ***/
	d_required_amount = 0.0;
	if (c_mrgn_insufficient_flg == 'Y' )
	{
 	  fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);	
		EXEC SQL CLOSE :fop_cursor;
		EXEC SQL CLOSE :ffp_cursor;

		d_required_amount = d_total_amount + d_balance_amt_tmp;
		d_required_amount = ( d_required_amount * (-1) ) / 100;
		fn_userlog(c_ServiceName,"SPN2NRM d_total_amount:%lf: d_balance_amt_tmp:%lf: d_required_amount Is :%lf:",d_total_amount,d_balance_amt_tmp,d_required_amount);
		sprintf(c_err_msg,"Your F&O margining conversion request has been rejected due to insufficient limits in your account. Please add required additional limits of Rs. %.2lf/- and try again.",d_required_amount);	 /*** Ver 3.5 ***/

		if ( strcmp(c_cnvrsion_mode,"OFFLINE") == 0 && ( c_spl_flg == 'K' ) )
		{
				i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg,c_xchng_cd,st_usrprfl.c_user_id,129,c_cnvrsion_mode,d_required_amount);	
		}
		else
		{
				i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg,c_xchng_cd,st_usrprfl.c_user_id,133,c_cnvrsion_mode,d_required_amount);	
		}
		if (i_returncode != 0)
		{
			fn_userlog(c_ServiceName,"Failed to Insert in Report Table ");
		}

		fn_errlog( c_ServiceName, "S31275",LIBMSG, c_err_msg );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
	}
	/*** Ver 3.5 ends ***/

	/*** Ver 1.9  code added to ensure futute conversion in case of perfect spread and margin blocked is zero ***/
	i_exist = 0; 

	EXEC SQL
		SELECT	1
		INTO		:i_exist
		FROM		DUAL 
		WHERE   EXISTS
		(	SELECT 1  
			FROM	 FCP_FO_SPN_CNTRCT_PSTN
			WHERE  FCP_CLM_MTCH_ACCNT   = :c_clm_mtch_accnt
		  AND    FCP_XCHNG_CD					= :c_xchng_cd
			AND		 FCP_OPNPSTN_FLW			!= 'N'
		);

	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
		fn_userlog( c_ServiceName, "Failed while checking record exist");
    fn_errlog( c_ServiceName, "S31280",SQLMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	if ( i_exist == 1)
	{
		fn_userlog( c_ServiceName, "Unable to convert");
    fn_errlog( c_ServiceName, "S31285",LIBMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	/*** Ver 1.9 Ends here ***/

	if(strcmp(c_xchng_cd,"NFO") == 0)					 /*** Ver 2.0 ***/
	{																					/*** Ver 2.0 ***/
		EXEC SQL
    	UPDATE  CLM_CLNT_MSTR
    	SET     CLM_SPAN_ALLWD  = 'N'
    	WHERE   CLM_MTCH_ACCNT  = :c_clm_mtch_accnt ;
	}																					/*** Ver 2.0 Starts ***/
	if(strcmp(c_xchng_cd,"BFO") == 0)
	{
		EXEC SQL
    	UPDATE  CLM_CLNT_MSTR
    	SET     CLM_BSESPAN_ALLWD ='N'							
    	WHERE   CLM_MTCH_ACCNT  = :c_clm_mtch_accnt ;
	}																							/*** Ver 2.0 Ends ***/
  if ( SQLCODE != 0 )
  {
    fn_userlog( c_ServiceName, "Failed To Update SPAN Flag For Match Account :%s:",c_clm_mtch_accnt);
    fn_errlog( c_ServiceName, "S31290",SQLMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


	/***	Commented In Ver 1.8 For Common TNC Changes

	***	Commented In Ver	1.3		*** Uncomment in Ver 1.5 starts here ***

	EXEC SQL 
		UPDATE	USR_USER_MASTER
		SET			USR_FNO_ACCPT_FLG		=	'N'
		WHERE		USR_USR_ID					=	( SELECT  UAC_USR_ID
														 				FROM		UAC_USR_ACCNTS
																		WHERE		UAC_CLM_MTCH_ACCNT	=	:c_clm_mtch_accnt
																	);

	if ( SQLCODE != 0 )
  {
    fn_userlog( c_ServiceName, "Failed To Update FNO Allowed Flag For Match Account :%s:",c_clm_mtch_accnt);
    fn_errlog( c_ServiceName, "S31295",SQLMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    *** Ver 1.2 ***
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	 *** Comment Ends	Ver	1.3	***		*** Ver 1.5 Ends here ***

			Comment Ends Ver	1.8			************/


	/***	Commented In Ver 1.8

	sprintf ( c_msg,"SPAN To NORMAL Conversion For Match Account :%s:.",c_clm_mtch_accnt);
  fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );

		********************/


	/*** MEMSET(c_cnvrsn_rmrks);		 Commented in ver 1.2 ****/	

  /** strcpy(c_cnvrsn_rmrks,"SPAN To NORMAL.");	*** Commented in ver 1.2 ****/

  strcpy(c_cnvrsn_rmrks,"SPAN To NORMAL Successful.");	
	strcpy(c_status,"SUCCESS");					 /**** Ver 1.2 ****/
	strcpy	( c_mrgn_typ,"Non SPAN (Existing I-Sec) Margining");	/*** Ver 1.4 ***/
	rtrim(c_cnvrsn_rmrks);
	rtrim(c_status);										/**** Ver 1.2 ****/

	/*** Commented in ver 1.2 ****
  EXEC SQL
    INSERT INTO FSC_SPNNRML_CNV
              ( FSC_CLM_MTCH_ACCNT,
                FSC_CNVRSN_TIME,
                FSC_CNVRSN_RMRKS,
              )
            VALUES
              ( :c_clm_mtch_accnt,
                SYSDATE,
                :c_cnvrsn_rmrks,
              );

  if ( SQLCODE != 0 )
  {
    fn_userlog( c_ServiceName, "Failed To Insert Record In Log Table For Match Account :%s:",c_clm_mtch_accnt);
    fn_errlog( c_ServiceName, "S31300",SQLMSG, c_err_msg );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	********************************************/
	/*** Added In ver 1.2 *****/

	/*i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status);*/		/*** Ver 1.4 ***/
	if(strcmp(c_xchng_cd,"NFO") == 0) /*** if condition added in Ver 3.5 ***/
	{
		i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg , c_xchng_cd,st_usrprfl.c_user_id,138,c_cnvrsion_mode,d_required_amount );	/*** Ver 1.4 ***/ /*** c_xchng_cd added in Ver 2.0 ***//*** ver 3.5 ***/
	}
	else if(strcmp(c_xchng_cd,"BFO") == 0) /*** Ver 3.5 ***/
	{
		i_returncode = fn_insert_report(c_ServiceName,c_clm_mtch_accnt,c_cnvrsn_rmrks,c_status,c_mrgn_typ,c_spl_flg , c_xchng_cd,st_usrprfl.c_user_id,139,c_cnvrsion_mode,d_required_amount );	
	}
  if (i_returncode != 0)
  {
     fn_userlog(c_ServiceName,"Failed to Insert in Report Table ");
		 fn_errlog( c_ServiceName, "S31305",SQLMSG, c_err_msg );
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }	

	/****** Ver 1.2	****************/
	
	/*** Ver 2.2 starts ***/
	if ( c_spl_flg == 'C')
	{
		MEMSET(d_mrgn_aft_cnv);
		MEMSET(c_underlying);
		d_totmrgn_aft_cnv = 0.0;
		sqlca.sqlerrd[2] = 0;

		EXEC SQL 
			SELECT NVL(SUM (margin),0),
						 undrlyng
			INTO	:d_mrgn_aft_cnv,
						:c_underlying
			FROM
			(
				SELECT	SUM( FUP_UTRD_MRGN + FUP_UORDR_MRGN + FUP_ADD_MRGN_VAL )	margin,
							 FUP_UNDRLYNG undrlyng
				FROM	 FUP_FUT_UNDRLYNG_PSTN
				WHERE  FUP_CLM_MTCH_ACCNT		=	:c_clm_mtch_accnt	
				AND		 FUP_XCHNG_CD					= :c_xchng_cd
				GROUP BY FUP_UNDRLYNG
				UNION ALL
				SELECT SUM( FOP_UEXCTD_MRGN + FOP_UORDR_MRGN ) margin,
							 FOP_UNDRLYNG undrlyng
				FROM	 FOP_FO_OPTIONS_PSTN
				WHERE  FOP_CLM_MTCH_ACCNT		=	:c_clm_mtch_accnt	
				AND		 FOP_XCHNG_CD					= :c_xchng_cd
				GROUP BY FOP_UNDRLYNG
			  UNION ALL
			  SELECT SUM( FOD_AMT_BLCKD + FOD_LSS_AMT_BLCKD )  margin,
      	       FOD_UNDRLYNG undrlyng
      	FROM   FOD_FO_ORDR_DTLS
      	WHERE  FOD_CLM_MTCH_ACCNT   =   :c_clm_mtch_accnt
      	AND    FOD_XCHNG_CD         =   :c_xchng_cd
      	AND    FOD_PRDCT_TYP        in  ('U','I')
      	GROUP BY FOD_UNDRLYNG
			)
			GROUP BY undrlyng
			HAVING NVL(SUM (margin),0) > 0
			ORDER BY undrlyng;

		if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
		{
			tpfree((char *)ptr_fml_Obuf);
			fn_userlog(c_ServiceName,"Error While Selecting Margin Required.");
			fn_errlog( c_ServiceName, "S31310", SQLMSG, c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		fn_userlog(c_ServiceName,"Count of records :%d:",sqlca.sqlerrd[2]);
		
		for (i=0; i < sqlca.sqlerrd[2] ; i++ )
		{
			d_totmrgn_aft_cnv = d_totmrgn_aft_cnv + d_mrgn_aft_cnv[i];
		}

		fn_userlog(c_ServiceName,"Total margin after conversion = :%lf:",d_totmrgn_aft_cnv);

		if ( Fadd32 (ptr_fml_Obuf,FFO_C_TRD_MRGN,(char *)&d_totmrgn_aft_cnv,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31315", FMLMSG, c_err_msg  );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
			tpfree((char *)ptr_fml_Obuf);
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		for (i=0; i < sqlca.sqlerrd[2] ; i++ )
		{
			fn_userlog(c_ServiceName,"Margin after conversion = :%s:%lf: ",c_underlying[i],d_mrgn_aft_cnv[i]);

			if ( Fadd32 (ptr_fml_Obuf,FFO_C_TRD_MRGN,(char *)&d_mrgn_aft_cnv[i],0)  ==  -1 )
			{
				fn_errlog( c_ServiceName, "S31320", FMLMSG, c_err_msg  );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
				tpfree((char *)ptr_fml_Obuf);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}	
		
		fn_userlog(c_ServiceName,"ABORT the transaction for conversion calculator");
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   
		
		EXEC SQL CLOSE :fop_und_cursor;
		EXEC SQL FREE  :fop_und_cursor;
		tpreturn(TPSUCCESS, SUCC_BFR, (char *)ptr_fml_Obuf, 0L, 0 ); 
	}
	/*** Ver 2.2 ends ***/

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "S31325",TPMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    /*** Ver 1.2 ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  EXEC SQL CLOSE :fop_und_cursor;
  EXEC SQL FREE  :fop_und_cursor;

	/***	Commented In Ver 1.8

  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );

	***/

  tpreturn( TPSUCCESS, 0, (char *)NULL, 0 , 0 );			/***	Ver	1.8	***/

}


int fn_spn_clsout ( char *c_ServiceName,
                    struct st_fus_undrlyng_pstn	*ptr_st_und_crrnt_pstn,
                    struct st_fus_undrlyng_pstn *ptr_st_und_tobe_pstn,
                    struct st_pstn_actn *ptr_st_pstn_actn,
                    char  *c_err_msg
                  )
{

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Inside Function fn_spn_clsout.");
	}

	int i_returncode;
	int	i_Frec_exst	=	0;
	int	i_Orec_exst	=	0;
	int	i_fup_cnt		=	0;

  long  li_temp_qty;
  long  li_flg_tmp_qty;

  char sql_cln_mtch_accnt[11];
  char sql_xchng_cd[4];
  char sql_prd_typ;
  char sql_cntrct_tag;
  char sql_undrlyng[7];
	char c_cntrct_tag;

  double d_dlvry_mrgn = 0.0; /*** ver 3.6 ***/
  double d_avg_prcs = 0.0;   /*** Ver 4.0 ***/

  varchar c_exp_dt[LEN_DATE];
  varchar c_trd_dt[12];

  sql_cursor     sys_cursor;

  struct  st_fcp_cntrct_pstn  st_cntpos_crrnt;
  struct  st_fcp_cntrct_pstn  st_cntpos_old;
  struct  st_fcp_cntrct_pstn  st_cntpos_md_rc;

	MEMSET(st_cntpos_crrnt);
	MEMSET(st_cntpos_old);
	MEMSET(st_cntpos_md_rc);


  strcpy( sql_cln_mtch_accnt,ptr_st_und_crrnt_pstn->c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,ptr_st_und_crrnt_pstn->c_xchng_cd);
  strcpy( sql_undrlyng,ptr_st_und_crrnt_pstn->c_undrlyng);
  sql_prd_typ     = ptr_st_und_crrnt_pstn->c_prd_typ;
  sql_cntrct_tag  = ptr_st_und_crrnt_pstn->c_cntrct_tag;

  EXEC SQL ALLOCATE :sys_cursor;
	
  if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"SPAN2NRML sql_cln_mtch_accnt Is :%s:",sql_cln_mtch_accnt);
		fn_userlog(c_ServiceName,"SPAN2NRML sql_xchng_cd Is :%s:",sql_xchng_cd);
		fn_userlog(c_ServiceName,"SPAN2NRML sql_prd_typ Is :%c:",sql_prd_typ);
		fn_userlog(c_ServiceName,"SPAN2NRML sql_undrlyng  Is :%s:",sql_undrlyng);
	}
	
  EXEC SQL EXECUTE
      BEGIN
         OPEN :sys_cursor FOR
					SELECT	FCP_CLM_MTCH_ACCNT,
									FCP_XCHNG_CD,
									FCP_PRDCT_TYP,
									FCP_INDSTK,
									FCP_UNDRLYNG,
									TO_CHAR(FCP_EXPRY_DT,'DD_Mon-YYYY'),
									FCP_EXER_TYP,
									FCP_STRK_PRC,
									FCP_OPT_TYP,
									FCP_IBUY_QTY,
									FCP_IBUY_ORD_VAL,
									FCP_ISELL_QTY,
									FCP_ISELL_ORD_VAL,
									FCP_EXBUY_QTY,
									FCP_EXBUY_ORD_VAL,
									FCP_EXSELL_QTY,
									FCP_EXSELL_ORD_VAL,
									FCP_BUY_EXCTD_QTY,
									FCP_SELL_EXCTD_QTY,
									FCP_OPNPSTN_FLW,
									FCP_OPNPSTN_QTY,
									FCP_OPNPSTN_VAL,
									FCP_EXRC_QTY,
									FCP_ASGND_QTY,
									FCP_OPT_PREMIUM,
									FCP_MTM_OPN_VAL,
									NVL(FCP_IMTM_OPN_VAL,0),
                  NVL(FCP_UDLVRY_MRGN,0.0),/*** ver 3.6 ***/
									NVL(FCP_AVG_PRC,0) /*** Ver 4.0 ***/
					FROM		FCP_FO_SPN_CNTRCT_PSTN
					WHERE		FCP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
          AND     FCP_XCHNG_CD       = :sql_xchng_cd
          AND     FCP_UNDRLYNG       = :sql_undrlyng
          ORDER BY FCP_EXPRY_DT asc;
       END;
     END-EXEC;

  if ( SQLCODE != 0 )
  {
    EXEC SQL FREE :sys_cursor;
    fn_errlog ( c_ServiceName, "S31330", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

	while( 1 )
	{
    i_Frec_exst = 0;
    i_Orec_exst = 0;

		EXEC SQL  FETCH   :sys_cursor
              INTO    :st_cntpos_crrnt.c_cln_mtch_accnt,
                      :st_cntpos_crrnt.c_xchng_cd,
                      :st_cntpos_crrnt.c_prd_typ,
                      :st_cntpos_crrnt.c_ctgry_indstk,
                      :st_cntpos_crrnt.c_undrlyng,
                      :c_exp_dt,
                      :st_cntpos_crrnt.c_exer_typ,
                      :st_cntpos_crrnt.l_strike_prc,
											:st_cntpos_crrnt.c_opt_typ,
                      :st_cntpos_crrnt.l_ibuy_qty,
                      :st_cntpos_crrnt.d_ibuy_ord_val,
                      :st_cntpos_crrnt.l_isell_qty,
                      :st_cntpos_crrnt.d_isell_ord_val,
                      :st_cntpos_crrnt.l_exbuy_qty,
                      :st_cntpos_crrnt.d_exbuy_ord_val,
                      :st_cntpos_crrnt.l_exsell_qty,
                      :st_cntpos_crrnt.d_exsell_ord_val,
                      :st_cntpos_crrnt.l_buy_exctd_qty,
                      :st_cntpos_crrnt.l_sell_exctd_qty,
                      :st_cntpos_crrnt.c_opnpstn_flw,
                      :st_cntpos_crrnt.l_opnpstn_qty,
                      :st_cntpos_crrnt.d_org_opn_val,
											:st_cntpos_crrnt.l_exrc_qty,
											:st_cntpos_crrnt.l_asgnd_qty,
                      :st_cntpos_crrnt.d_opt_premium,
                      :st_cntpos_crrnt.d_mtm_opn_val,
                      :st_cntpos_crrnt.d_imtm_opn_val,
                      :d_dlvry_mrgn, /*** ver 3.6 ***/
											:d_avg_prcs; /*** Ver 4.0 ***/
    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
				fn_userlog(c_ServiceName,"SPAN2NRML Inside NO_DATA_FOUND.");
        break;
      }

      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      fn_errlog ( c_ServiceName, "S31335", SQLMSG, ptr_st_err_msg->c_err_msg );
      return -1;
    }

    SETNULL( c_exp_dt );

    strcpy ( st_cntpos_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
    rtrim(st_cntpos_crrnt.c_xchng_cd);
    rtrim(st_cntpos_crrnt.c_undrlyng);
    rtrim(st_cntpos_crrnt.c_expry_dt);

		strcpy(ptr_st_pstn_actn->c_cln_mtch_accnt,st_cntpos_crrnt.c_cln_mtch_accnt);
    strcpy(ptr_st_pstn_actn->c_xchng_cd,st_cntpos_crrnt.c_xchng_cd);
    strcpy(ptr_st_pstn_actn->c_expry_dt,st_cntpos_crrnt.c_expry_dt);
    strcpy(ptr_st_pstn_actn->c_undrlyng,st_cntpos_crrnt.c_undrlyng);
    ptr_st_pstn_actn->c_exrc_typ    = st_cntpos_crrnt.c_exer_typ;
    ptr_st_pstn_actn->c_prd_typ     = st_cntpos_crrnt.c_prd_typ ;
    ptr_st_pstn_actn->c_opt_typ     = '*';
    ptr_st_pstn_actn->l_strike_prc  = 0 ;

    if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"SPAN2NRML c_cln_mtch_accnt IS :%s:",ptr_st_pstn_actn->c_cln_mtch_accnt);
    	fn_userlog(c_ServiceName,"SPAN2NRML c_xchng_cd IS :%s:",ptr_st_pstn_actn->c_xchng_cd);
    	fn_userlog(c_ServiceName,"SPAN2NRML c_expry_dt IS :%s:",ptr_st_pstn_actn->c_expry_dt);
    	fn_userlog(c_ServiceName,"SPAN2NRML c_undrlyng  IS :%s:",ptr_st_pstn_actn->c_undrlyng);
      fn_userlog(c_ServiceName,"SPAN2NRML d_dlvry_mrgn IS :%lf:",d_dlvry_mrgn ); /*** ver 3.6 ***/
		}

		if ( st_cntpos_crrnt.c_prd_typ == 'F' )
		{
      if(DEBUG_MSG_LVL_0)
			{
				fn_userlog(c_ServiceName,"SPAN2NRML - Inserting Data For Future.");
				fn_userlog(c_ServiceName,"SPAN2NRML - st_cntpos_crrnt.c_xchng_cd Is :%s:",st_cntpos_crrnt.c_xchng_cd);
				fn_userlog(c_ServiceName,"SPAN2NRML - st_cntpos_crrnt.c_prd_typ Is :%c:",st_cntpos_crrnt.c_prd_typ);
				fn_userlog(c_ServiceName,"SPAN2NRML - st_cntpos_crrnt.c_undrlyng Is :%s:",st_cntpos_crrnt.c_undrlyng);
				fn_userlog(c_ServiceName,"SPAN2NRML - c_exp_dt Is :%s:",c_exp_dt.arr);
			}

      /*** Commented in Ver 2.8 ***

			EXEC SQL
				SELECT	FCM_CNTRCT_TAG
				INTO		:c_cntrct_tag
				FROM		FCM_FO_CNTRCT_MSTR
				WHERE		FCM_XCHNG_CD	=	:st_cntpos_crrnt.c_xchng_cd		
				AND			FCM_PRDCT_TYP	=	:st_cntpos_crrnt.c_prd_typ
				AND			FCM_UNDRLYNG	=	:st_cntpos_crrnt.c_undrlyng
				AND			FCM_EXPRY_DT	=	:c_exp_dt;

      ***/

      /*** Ver 2.8 Starts ***/

       EXEC SQL
        SELECT  FTQ_CNTRCT_TAG
        INTO    :c_cntrct_tag
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :st_cntpos_crrnt.c_xchng_cd
        AND     FTQ_PRDCT_TYP = :st_cntpos_crrnt.c_prd_typ
        AND     FTQ_UNDRLYNG  = :st_cntpos_crrnt.c_undrlyng
        AND     FTQ_EXPRY_DT  = :c_exp_dt;

      /*** Ver 2.8 Ends   ***/

			if ( SQLCODE != 0 )
      {
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31340", SQLMSG, ptr_st_err_msg->c_err_msg );
        return -1;
      }

      if(DEBUG_MSG_LVL_0)
      {
       fn_userlog(c_ServiceName," FTQ Contract Tag Is :%c:",c_cntrct_tag);
      }

			ptr_st_pstn_actn->c_cntrct_tag	=	c_cntrct_tag;

			EXEC SQL
				SELECT	1
				INTO		:i_Frec_exst
				FROM		FFP_FO_FUTURES_PSTN
				WHERE		FFP_CLM_MTCH_ACCNT	=	:st_cntpos_crrnt.c_cln_mtch_accnt
      	AND     FFP_XCHNG_CD        = :sql_xchng_cd
				AND			FFP_PRDCT_TYP				=	:st_cntpos_crrnt.c_prd_typ
				AND			FFP_INDSTK					=	:st_cntpos_crrnt.c_ctgry_indstk
				AND			FFP_UNDRLYNG				=	:st_cntpos_crrnt.c_undrlyng
				AND			FFP_EXPRY_DT				=	:st_cntpos_crrnt.c_expry_dt
				AND			FFP_CNTRCT_TAG			=	:c_cntrct_tag;

			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31345", SQLMSG, ptr_st_err_msg->c_err_msg );
        return -1;
      }

      if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"SPN2NRM	-	Record Exist :%d:",i_Frec_exst);
				fn_userlog(c_ServiceName,"SPN2NRM - st_cntpos_crrnt.c_cln_mtch_accnt Is :%s:",st_cntpos_crrnt.c_cln_mtch_accnt);
				fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.c_xchng_cd Is :%s:",st_cntpos_crrnt.c_xchng_cd);
		  	fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.c_prd_typ Is :%c:",st_cntpos_crrnt.c_prd_typ);
				fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.c_ctgry_indstk Is :%c:",st_cntpos_crrnt.c_ctgry_indstk);
		  	fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.c_undrlyng Is :%s:",st_cntpos_crrnt.c_undrlyng);
				fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.c_expry_dt Is :%s:",st_cntpos_crrnt.c_expry_dt);
				fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.c_exer_typ Is :%c:",st_cntpos_crrnt.c_exer_typ);
				fn_userlog(c_ServiceName,"SPN2NRM -	c_cntrct_tag Is :%c:",c_cntrct_tag);
				fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.l_ibuy_qty Is :%ld:",st_cntpos_crrnt.l_ibuy_qty);
				fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.d_ibuy_ord_val Is :%lf:",st_cntpos_crrnt.d_ibuy_ord_val);
				fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.l_isell_qty Is :%ld:",st_cntpos_crrnt.l_isell_qty);
				fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.d_isell_ord_val Is :%lf:",st_cntpos_crrnt.d_isell_ord_val);
		  	fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.l_exbuy_qty Is :%ld:",st_cntpos_crrnt.l_exbuy_qty);
				fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.d_exbuy_ord_val Is :%lf:",st_cntpos_crrnt.d_exbuy_ord_val);
				fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.l_exsell_qty Is :%ld:",st_cntpos_crrnt.l_exsell_qty);
				fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.d_exsell_ord_val Is :%lf:",st_cntpos_crrnt.d_exsell_ord_val);
				fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.l_buy_exctd_qty Is :%ld:",st_cntpos_crrnt.l_buy_exctd_qty);
				fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.l_sell_exctd_qty Is :%ld:",st_cntpos_crrnt.l_sell_exctd_qty);
		  	fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.c_opnpstn_flw Is :%c:",st_cntpos_crrnt.c_opnpstn_flw);
				fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.l_opnpstn_qty Is :%ld:",st_cntpos_crrnt.l_opnpstn_qty);
				fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.d_org_opn_val Is :%lf:",st_cntpos_crrnt.d_org_opn_val);
				fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.d_mtm_opn_val Is :%lf:",st_cntpos_crrnt.d_mtm_opn_val);
				fn_userlog(c_ServiceName,"SPN2NRM -	st_cntpos_crrnt.d_imtm_opn_val Is :%lf:",st_cntpos_crrnt.d_imtm_opn_val);
			  fn_userlog(c_ServiceName,"SPN2NRM - st_cntpos_crrnt.d_imtm_opn_val Is :%lf:",d_avg_prcs); /* Ver 4.0 */
      }

			rtrim(st_cntpos_crrnt.c_undrlyng);
			rtrim(st_cntpos_crrnt.c_cln_mtch_accnt);

			if( i_Frec_exst == 0 )
			{
				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"SPAN2NRML INSIDE FFP INSERTION.");		
				}

				EXEC SQL
					INSERT INTO	FFP_FO_FUTURES_PSTN
										(	FFP_CLM_MTCH_ACCNT,
											FFP_XCHNG_CD,
											FFP_PRDCT_TYP,
											FFP_INDSTK,
											FFP_UNDRLYNG,
											FFP_EXPRY_DT,
											FFP_EXER_TYP,
											FFP_CNTRCT_TAG,
											FFP_IBUY_QTY,
											FFP_IBUY_ORD_VAL,
											FFP_ISELL_QTY,
											FFP_ISELL_ORD_VAL,
											FFP_EXBUY_QTY,
											FFP_EXBUY_ORD_VAL,
											FFP_EXSELL_QTY,
											FFP_EXSELL_ORD_VAL,
											FFP_BUY_EXCTD_QTY,
											FFP_SELL_EXCTD_QTY,
											FFP_OPNPSTN_FLW,
											FFP_OPNPSTN_QTY,
											FFP_OPNPSTN_VAL,
											FFP_MTM_OPN_VAL,
											FFP_IMTM_OPN_VAL,
                      FFP_AVG_PRC          /** Ver 4.0 **/
										)
									VALUES
										(	:st_cntpos_crrnt.c_cln_mtch_accnt,
											:st_cntpos_crrnt.c_xchng_cd,
											:st_cntpos_crrnt.c_prd_typ,
											:st_cntpos_crrnt.c_ctgry_indstk,
											:st_cntpos_crrnt.c_undrlyng,
											:st_cntpos_crrnt.c_expry_dt,
											:st_cntpos_crrnt.c_exer_typ,
											:c_cntrct_tag,
											:st_cntpos_crrnt.l_ibuy_qty,
                    	:st_cntpos_crrnt.d_ibuy_ord_val,
                    	:st_cntpos_crrnt.l_isell_qty,
                    	:st_cntpos_crrnt.d_isell_ord_val,
                    	:st_cntpos_crrnt.l_exbuy_qty,
                    	:st_cntpos_crrnt.d_exbuy_ord_val,
                    	:st_cntpos_crrnt.l_exsell_qty,
                    	:st_cntpos_crrnt.d_exsell_ord_val,
                    	:st_cntpos_crrnt.l_buy_exctd_qty,
                    	:st_cntpos_crrnt.l_sell_exctd_qty,
                    	:st_cntpos_crrnt.c_opnpstn_flw,
                    	:st_cntpos_crrnt.l_opnpstn_qty,
											:st_cntpos_crrnt.d_org_opn_val,
											:st_cntpos_crrnt.d_mtm_opn_val,
                    	:st_cntpos_crrnt.d_imtm_opn_val,
                      :d_avg_prcs   /* Ver 4.0 */
										);

				if ( SQLCODE != 0 )
    		{
      		EXEC SQL CLOSE :sys_cursor;
      		EXEC SQL FREE :sys_cursor;
      		fn_errlog ( c_ServiceName, "S31350", SQLMSG, ptr_st_err_msg->c_err_msg );
      		return -1;
    		}
			}
			else if( i_Frec_exst == 1 )
			{
				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"SPAN2NRML st_cntpos_crrnt.c_cln_mtch_accnt Is :%s:",st_cntpos_crrnt.c_cln_mtch_accnt);
					fn_userlog(c_ServiceName,"SPAN2NRML st_cntpos_crrnt.c_undrlyng Is :%s:",st_cntpos_crrnt.c_undrlyng);
					fn_userlog(c_ServiceName,"SPAN2NRML st_cntpos_crrnt.l_buy_exctd_qty Is :%ld:",st_cntpos_crrnt.l_buy_exctd_qty);
					fn_userlog(c_ServiceName,"SPAN2NRML st_cntpos_crrnt.l_sell_exctd_qty Is :%ld:",st_cntpos_crrnt.l_sell_exctd_qty);
					fn_userlog(c_ServiceName,"SPAN2NRML st_cntpos_crrnt.l_opnpstn_qty  Is :%ld:",st_cntpos_crrnt.l_opnpstn_qty);
				}
			
				EXEC SQL
					UPDATE	FFP_FO_FUTURES_PSTN
					SET  		FFP_IBUY_QTY				=	:st_cntpos_crrnt.l_ibuy_qty,
                  FFP_IBUY_ORD_VAL		=	:st_cntpos_crrnt.d_ibuy_ord_val,
                  FFP_ISELL_QTY				=	:st_cntpos_crrnt.l_isell_qty,
                  FFP_ISELL_ORD_VAL		=	:st_cntpos_crrnt.d_isell_ord_val,
                  FFP_EXBUY_QTY				=	:st_cntpos_crrnt.l_exbuy_qty,
                  FFP_EXBUY_ORD_VAL		=	:st_cntpos_crrnt.d_exbuy_ord_val,
                  FFP_EXSELL_QTY			=	:st_cntpos_crrnt.l_exsell_qty,
                  FFP_EXSELL_ORD_VAL	=	:st_cntpos_crrnt.d_exsell_ord_val,
                 	FFP_BUY_EXCTD_QTY		=	:st_cntpos_crrnt.l_buy_exctd_qty,
                  FFP_SELL_EXCTD_QTY	= :st_cntpos_crrnt.l_sell_exctd_qty,
                  FFP_OPNPSTN_FLW			=	:st_cntpos_crrnt.c_opnpstn_flw,
                  FFP_OPNPSTN_QTY			=	:st_cntpos_crrnt.l_opnpstn_qty,
                  FFP_OPNPSTN_VAL			=	:st_cntpos_crrnt.d_org_opn_val,
                  FFP_MTM_OPN_VAL			=	:st_cntpos_crrnt.d_mtm_opn_val,
                  FFP_IMTM_OPN_VAL		=	:st_cntpos_crrnt.d_imtm_opn_val,
                  FFP_AVG_PRC         = :d_avg_prcs         /* Ver 4.0 */
					WHERE		FFP_CLM_MTCH_ACCNT  = :st_cntpos_crrnt.c_cln_mtch_accnt
        	AND     FFP_PRDCT_TYP       = :st_cntpos_crrnt.c_prd_typ
					AND			FFP_XCHNG_CD				=	:sql_xchng_cd
        	AND     FFP_INDSTK          = :st_cntpos_crrnt.c_ctgry_indstk
        	AND     FFP_UNDRLYNG        = :st_cntpos_crrnt.c_undrlyng
        	AND     FFP_EXPRY_DT        = :st_cntpos_crrnt.c_expry_dt
        	AND     FFP_CNTRCT_TAG      = :c_cntrct_tag;

				if ( SQLCODE != 0 )
        {
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
          fn_errlog ( c_ServiceName, "S31355", SQLMSG, ptr_st_err_msg->c_err_msg );
          return -1;
        }

			}

		}
		else if ( st_cntpos_crrnt.c_prd_typ == 'O' )
		{
			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog(c_ServiceName,"SPAN2NRML - Inserting Data For Option.");
			}

			EXEC SQL
				SELECT	1
				INTO		:i_Orec_exst
				FROM		FOP_FO_OPTIONS_PSTN
				WHERE		FOP_CLM_MTCH_ACCNT	=	:st_cntpos_crrnt.c_cln_mtch_accnt
				AND			FOP_PRDCT_TYP				=	:st_cntpos_crrnt.c_prd_typ
				AND			FOP_XCHNG_CD				=	:sql_xchng_cd
				AND			FOP_INDSTK					=	:st_cntpos_crrnt.c_ctgry_indstk
				AND			FOP_UNDRLYNG				=	:st_cntpos_crrnt.c_undrlyng
				AND			FOP_EXPRY_DT				=	:st_cntpos_crrnt.c_expry_dt
				AND			FOP_STRK_PRC				=	:st_cntpos_crrnt.l_strike_prc
				AND			FOP_EXER_TYP				=	:st_cntpos_crrnt.c_exer_typ
				AND			FOP_OPT_TYP					=	:st_cntpos_crrnt.c_opt_typ;

			if ( SQLCODE != 0	&&	SQLCODE != NO_DATA_FOUND )
      {
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31360", SQLMSG, ptr_st_err_msg->c_err_msg );
        return -1;
      }

			if ( i_Orec_exst == 0 )
			{
				EXEC SQL	
					INSERT INTO	FOP_FO_OPTIONS_PSTN
										(	FOP_CLM_MTCH_ACCNT,
											FOP_XCHNG_CD,
											FOP_PRDCT_TYP,
											FOP_INDSTK,
											FOP_UNDRLYNG,
											FOP_EXPRY_DT,
											FOP_STRK_PRC,
											FOP_EXER_TYP,
											FOP_OPT_TYP,
											FOP_IBUY_QTY,
											FOP_IBUY_ORD_VAL,
											FOP_ISELL_QTY,
											FOP_ISELL_ORD_VAL,
											FOP_EXBUY_QTY,
											FOP_EXBUY_ORD_VAL,
											FOP_EXSELL_QTY,
											FOP_EXSELL_ORD_VAL,
											FOP_BUY_EXCTD_QTY,
											FOP_SELL_EXCTD_QTY,
											FOP_OPNPSTN_FLW,
											FOP_OPNPSTN_QTY,
											FOP_OPNPSTN_VAL,
											FOP_UORDR_MRGN,
											FOP_EXRC_QTY,
											FOP_DP_QTY,
											FOP_ASGND_QTY,
											FOP_ORD_BLKD_QTY,
											FOP_TRD_BLKD_QTY,
											FOP_MTM_FLG,
											FOP_IEXRC_QTY,
											FOP_EXEXRC_QTY,
											FOP_IDONTEXRC_QTY,
											FOP_EXDONTEXRC_QTY,
											FOP_TRD_DT,
                      FOP_UDLVRY_MRGN /*** ver 3.6 ***/ 
										)
									VALUES
										(	:st_cntpos_crrnt.c_cln_mtch_accnt,
                    	:st_cntpos_crrnt.c_xchng_cd,
                    	:st_cntpos_crrnt.c_prd_typ,
                    	:st_cntpos_crrnt.c_ctgry_indstk,
                    	:st_cntpos_crrnt.c_undrlyng,
                    	:st_cntpos_crrnt.c_expry_dt,
											:st_cntpos_crrnt.l_strike_prc,
                    	:st_cntpos_crrnt.c_exer_typ,
                    	:st_cntpos_crrnt.c_opt_typ,
                    	:st_cntpos_crrnt.l_ibuy_qty,
                    	:st_cntpos_crrnt.d_ibuy_ord_val,
                    	:st_cntpos_crrnt.l_isell_qty,
                    	:st_cntpos_crrnt.d_isell_ord_val,
                    	:st_cntpos_crrnt.l_exbuy_qty,
                    	:st_cntpos_crrnt.d_exbuy_ord_val,
                    	:st_cntpos_crrnt.l_exsell_qty,
                    	:st_cntpos_crrnt.d_exsell_ord_val,
                    	:st_cntpos_crrnt.l_buy_exctd_qty,
                    	:st_cntpos_crrnt.l_sell_exctd_qty,
                    	:st_cntpos_crrnt.c_opnpstn_flw,
                    	:st_cntpos_crrnt.l_opnpstn_qty,
                    	:st_cntpos_crrnt.d_org_opn_val,
											0,
											:st_cntpos_crrnt.l_exrc_qty,
											0,
											:st_cntpos_crrnt.l_asgnd_qty,
											0,
											0,
											'O',
											0,
											0,
											0,
											0,
											:ptr_st_und_crrnt_pstn->c_trd_dt,
                      :d_dlvry_mrgn  /*** ver 3.6 ***/
										);
						

				if ( SQLCODE != 0 )
      	{
       		EXEC SQL CLOSE :sys_cursor;
       		EXEC SQL FREE :sys_cursor;
       		fn_errlog ( c_ServiceName, "S31365", SQLMSG, ptr_st_err_msg->c_err_msg );
     			return -1;
   			}
			}
			else if( i_Orec_exst == 1 )
			{
				EXEC SQL
					UPDATE	FOP_FO_OPTIONS_PSTN
					SET			FOP_IBUY_QTY				=	:st_cntpos_crrnt.l_ibuy_qty,
									FOP_IBUY_ORD_VAL		=	:st_cntpos_crrnt.d_ibuy_ord_val,
									FOP_ISELL_QTY				=	:st_cntpos_crrnt.l_isell_qty,
									FOP_ISELL_ORD_VAL		=	:st_cntpos_crrnt.d_isell_ord_val,
									FOP_EXBUY_QTY				=	:st_cntpos_crrnt.l_exbuy_qty,
									FOP_EXBUY_ORD_VAL		=	:st_cntpos_crrnt.d_exbuy_ord_val,
									FOP_EXSELL_QTY			=	:st_cntpos_crrnt.l_exsell_qty,
									FOP_EXSELL_ORD_VAL	=	:st_cntpos_crrnt.d_exsell_ord_val,
									FOP_BUY_EXCTD_QTY		=	:st_cntpos_crrnt.l_buy_exctd_qty,
									FOP_SELL_EXCTD_QTY	=	:st_cntpos_crrnt.l_sell_exctd_qty,
									FOP_OPNPSTN_FLW			=	:st_cntpos_crrnt.c_opnpstn_flw,
									FOP_OPNPSTN_QTY			=	:st_cntpos_crrnt.l_opnpstn_qty,
									FOP_OPNPSTN_VAL			=	:st_cntpos_crrnt.d_org_opn_val,
									FOP_UORDR_MRGN			=	0,
									FOP_EXRC_QTY				=	:st_cntpos_crrnt.l_exrc_qty,
									FOP_ASGND_QTY				=	:st_cntpos_crrnt.l_asgnd_qty,
									FOP_MTM_FLG					=	'O',
									FOP_TRGGR_PRC				=	0,
									FOP_TRD_DT					=	:ptr_st_und_crrnt_pstn->c_trd_dt,
                  FOP_UDLVRY_MRGN     = :d_dlvry_mrgn            /*** ver 3.6 *****/
					WHERE   FOP_CLM_MTCH_ACCNT  = :st_cntpos_crrnt.c_cln_mtch_accnt
        	AND     FOP_PRDCT_TYP       = :st_cntpos_crrnt.c_prd_typ
					AND			FOP_XCHNG_CD				=	:sql_xchng_cd
        	AND     FOP_INDSTK          = :st_cntpos_crrnt.c_ctgry_indstk
        	AND     FOP_UNDRLYNG        = :st_cntpos_crrnt.c_undrlyng
        	AND     FOP_EXPRY_DT        = :st_cntpos_crrnt.c_expry_dt
        	AND     FOP_STRK_PRC        = :st_cntpos_crrnt.l_strike_prc
        	AND     FOP_EXER_TYP        = :st_cntpos_crrnt.c_exer_typ
        	AND     FOP_OPT_TYP         = :st_cntpos_crrnt.c_opt_typ;

      	if ( SQLCODE != 0 )
      	{
        	EXEC SQL CLOSE :sys_cursor;
        	EXEC SQL FREE :sys_cursor;
        	fn_errlog ( c_ServiceName, "S31370", SQLMSG, ptr_st_err_msg->c_err_msg );
        	return -1;
      	}

			}
		}

		if(DEBUG_MSG_LVL_0)
		{
    	fn_userlog ( c_ServiceName, "SPAN2NRML Expiry date       :%s:", c_exp_dt.arr );
    	fn_userlog ( c_ServiceName, "SPAN2NRML IWTL buy qty      :%ld:", st_cntpos_crrnt.l_ibuy_qty );
    	fn_userlog ( c_ServiceName, "SPAN2NRML IWTL buy val      :%lf:", st_cntpos_crrnt.d_ibuy_ord_val );
    	fn_userlog ( c_ServiceName, "SPAN2NRML IWTL sell qty     :%ld:", st_cntpos_crrnt.l_isell_qty );
    	fn_userlog ( c_ServiceName, "SPAN2NRML IWTL sell val     :%lf:", st_cntpos_crrnt.d_isell_ord_val );
    	fn_userlog ( c_ServiceName, "SPAN2NRML EXCH buy qty      :%ld:", st_cntpos_crrnt.l_exbuy_qty );
    	fn_userlog ( c_ServiceName, "SPAN2NRML EXCH buy val      :%lf:", st_cntpos_crrnt.d_exbuy_ord_val );
    	fn_userlog ( c_ServiceName, "SPAN2NRML EXCH sell qty     :%ld:", st_cntpos_crrnt.l_exsell_qty );
    	fn_userlog ( c_ServiceName, "SPAN2NRML EXCH sell val     :%lf:", st_cntpos_crrnt.d_exsell_ord_val );
    	fn_userlog ( c_ServiceName, "SPAN2NRML Buy exctd qty     :%ld:", st_cntpos_crrnt.l_buy_exctd_qty );
    	fn_userlog ( c_ServiceName, "SPAN2NRML Sell exctd qty    :%ld:", st_cntpos_crrnt.l_sell_exctd_qty );
    	fn_userlog ( c_ServiceName, "SPAN2NRML Open qty          :%ld:", st_cntpos_crrnt.l_opnpstn_qty );
    	fn_userlog ( c_ServiceName, "SPAN2NRML Original open val :%lf:", st_cntpos_crrnt.d_org_opn_val );
    	fn_userlog ( c_ServiceName, "SPAN2NRML MTMed open val    :%lf:", st_cntpos_crrnt.d_mtm_opn_val );
		}

    memcpy ( &st_cntpos_old,&st_cntpos_crrnt,sizeof(st_cntpos_old ) );

    li_temp_qty = st_cntpos_crrnt.l_opnpstn_qty;

    li_flg_tmp_qty = st_cntpos_crrnt.l_opnpstn_qty;

    fn_add_pos_in_val ( li_temp_qty * (-1),
                        st_cntpos_crrnt.d_org_opn_val,
                        li_temp_qty,
                        &(st_cntpos_crrnt.l_opnpstn_qty),
                        &(st_cntpos_crrnt.d_org_opn_val)
                      );

    fn_add_pos_in_val ( li_temp_qty * (-1),
                        st_cntpos_crrnt.d_mtm_opn_val,
                        li_temp_qty,
                        &li_temp_qty,
                        &(st_cntpos_crrnt.d_mtm_opn_val)
                      );

    if ( li_flg_tmp_qty > 0 )
    {
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"SPAN2NRML Inside li_flg_tmp_qty > 0");
      }
			st_cntpos_crrnt.l_sell_exctd_qty = (-1) * st_cntpos_crrnt.l_buy_exctd_qty ;
    }
    else if ( li_flg_tmp_qty < 0 )
    {
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"SPAN2NRML Inside li_flg_tmp_qty < 0");
      }
			st_cntpos_crrnt.l_buy_exctd_qty = (-1) * st_cntpos_crrnt.l_sell_exctd_qty ;
    }

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"SPAN2NRML st_cntpos_crrnt.l_sell_exctd_qty :%ld:",st_cntpos_crrnt.l_sell_exctd_qty);
    	fn_userlog(c_ServiceName,"SPAN2NRML st_cntpos_crrnt.l_buy_exctd_qty  :%ld:",st_cntpos_crrnt.l_buy_exctd_qty);
		}

    memcpy ( &st_cntpos_md_rc,&st_cntpos_crrnt,sizeof( st_cntpos_md_rc ) );
    fn_sum_clspos ( st_cntpos_crrnt,ptr_st_und_tobe_pstn);

    if ( st_cntpos_md_rc.l_opnpstn_qty > 0 )
    {
      st_cntpos_md_rc.c_opnpstn_flw = BUY;
    }
    else if ( st_cntpos_md_rc.l_opnpstn_qty < 0 )
    {
      st_cntpos_md_rc.c_opnpstn_flw = SELL;
    }
    else
    {
      st_cntpos_md_rc.c_opnpstn_flw = NEUTRAL;
    }

		EXEC SQL
			UPDATE	FCP_FO_SPN_CNTRCT_PSTN
			SET			FCP_IBUY_QTY				=	:st_cntpos_md_rc.l_ibuy_qty,
							FCP_IBUY_ORD_VAL		=	:st_cntpos_md_rc.d_ibuy_ord_val,
							FCP_ISELL_QTY				=	:st_cntpos_md_rc.l_isell_qty,
							FCP_ISELL_ORD_VAL		=	:st_cntpos_md_rc.d_isell_ord_val,
							FCP_EXBUY_QTY				=	:st_cntpos_md_rc.l_exbuy_qty,
							FCP_EXBUY_ORD_VAL		=	:st_cntpos_md_rc.d_exbuy_ord_val,
							FCP_EXSELL_QTY			=	:st_cntpos_md_rc.l_exsell_qty,
							FCP_EXSELL_ORD_VAL	=	:st_cntpos_md_rc.d_exsell_ord_val,
							FCP_BUY_EXCTD_QTY		=	:st_cntpos_md_rc.l_buy_exctd_qty,
							FCP_SELL_EXCTD_QTY	=	:st_cntpos_md_rc.l_sell_exctd_qty,
							FCP_OPNPSTN_FLW			=	:st_cntpos_md_rc.c_opnpstn_flw,
							FCP_OPNPSTN_QTY			=	:st_cntpos_md_rc.l_opnpstn_qty,
							FCP_OPNPSTN_VAL			=	:st_cntpos_md_rc.d_org_opn_val,
							FCP_EXRC_QTY				=	:st_cntpos_md_rc.l_exrc_qty,
							FCP_ASGND_QTY				=	:st_cntpos_md_rc.l_asgnd_qty,
							FCP_OPT_PREMIUM			=	0,
							FCP_MTM_OPN_VAL			=	:st_cntpos_md_rc.d_mtm_opn_val,
							FCP_IMTM_OPN_VAL		=	:st_cntpos_md_rc.d_imtm_opn_val,
              FCP_UDLVRY_MRGN     = 0, /*** ver 3.6 ***/
              FCP_MTM_FLG         = 'O' /*** ver 3.6 ***/
			WHERE		FCP_CLM_MTCH_ACCNT	=	:st_cntpos_crrnt.c_cln_mtch_accnt
			AND			FCP_XCHNG_CD				=	:st_cntpos_crrnt.c_xchng_cd
			AND			FCP_PRDCT_TYP				=	:st_cntpos_crrnt.c_prd_typ
			AND			FCP_INDSTK					=	:st_cntpos_crrnt.c_ctgry_indstk
			AND			FCP_UNDRLYNG				=	:st_cntpos_crrnt.c_undrlyng
			AND			FCP_EXPRY_DT				=	:st_cntpos_crrnt.c_expry_dt
			AND			FCP_EXER_TYP				=	:st_cntpos_crrnt.c_exer_typ
			AND			FCP_OPT_TYP					=	:st_cntpos_crrnt.c_opt_typ
			AND			FCP_STRK_PRC				=	:st_cntpos_crrnt.l_strike_prc;

		if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31375", SQLMSG, ptr_st_err_msg->c_err_msg );
      return -1;
    }
	}

	EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

  return 0;
}

int fn_sum_clspos ( struct st_fcp_cntrct_pstn st_cntfut_pos,
                    struct st_fus_undrlyng_pstn *ptr_st_undfut_pos
                  )
{


  ptr_st_undfut_pos->l_uibuy_qty				= ptr_st_undfut_pos->l_uibuy_qty	+ st_cntfut_pos.l_ibuy_qty;

  ptr_st_undfut_pos->d_uibuy_val				= ptr_st_undfut_pos->d_uibuy_val	+ st_cntfut_pos.d_ibuy_ord_val;

  ptr_st_undfut_pos->l_uisell_qty				= ptr_st_undfut_pos->l_uisell_qty	+ st_cntfut_pos.l_isell_qty;

  ptr_st_undfut_pos->d_uisell_val				= ptr_st_undfut_pos->d_uisell_val	+ st_cntfut_pos.d_isell_ord_val;

  ptr_st_undfut_pos->l_uexbuy_qty				= ptr_st_undfut_pos->l_uexbuy_qty	+ st_cntfut_pos.l_exbuy_qty;

  ptr_st_undfut_pos->d_uexbuy_val				= ptr_st_undfut_pos->d_uexbuy_val	+ st_cntfut_pos.d_exbuy_ord_val;

  ptr_st_undfut_pos->l_uexsell_qty			= ptr_st_undfut_pos->l_uexsell_qty	+ st_cntfut_pos.l_exsell_qty;

  ptr_st_undfut_pos->d_uexsell_val			= ptr_st_undfut_pos->d_uexsell_val	+ st_cntfut_pos.d_exsell_ord_val;

  ptr_st_undfut_pos->l_ubuy_exctd_qty 	= ptr_st_undfut_pos->l_ubuy_exctd_qty + st_cntfut_pos.l_buy_exctd_qty;

  ptr_st_undfut_pos->l_usell_exctd_qty	= ptr_st_undfut_pos->l_usell_exctd_qty + st_cntfut_pos.l_sell_exctd_qty;

  ptr_st_undfut_pos->l_uopnpstn_qty     = ptr_st_undfut_pos->l_uopnpstn_qty + st_cntfut_pos.l_opnpstn_qty;

  ptr_st_undfut_pos->d_uopnpstn_val			= ptr_st_undfut_pos->d_uopnpstn_val	+ st_cntfut_pos.d_opnpstn_val;

  ptr_st_undfut_pos->d_umtm_opn_val			= ptr_st_undfut_pos->d_umtm_opn_val	+ st_cntfut_pos.d_mtm_opn_val;

  ptr_st_undfut_pos->d_uimtm_opn_val		= ptr_st_undfut_pos->d_uimtm_opn_val	+ st_cntfut_pos.d_imtm_opn_val;

  return 0;

}

int fn_sum_crtpos ( struct st_cntfut_pos  st_cntpos_crrnt,
                    struct st_undfut_pos *ptr_st_undfut_pos
                  )
{

	ptr_st_undfut_pos->l_ibuy_qty       = ptr_st_undfut_pos->l_ibuy_qty  + st_cntpos_crrnt.l_ibuy_qty;

 	ptr_st_undfut_pos->d_ibuy_ord_vl		= ptr_st_undfut_pos->d_ibuy_ord_vl	+ st_cntpos_crrnt.d_ibuy_ord_vl;

 	ptr_st_undfut_pos->l_isell_qty      = ptr_st_undfut_pos->l_isell_qty + st_cntpos_crrnt.l_isell_qty;

 	ptr_st_undfut_pos->d_isell_ord_vl		= ptr_st_undfut_pos->d_isell_ord_vl	+ st_cntpos_crrnt.d_isell_ord_vl;

 	ptr_st_undfut_pos->l_exbuy_qty      = ptr_st_undfut_pos->l_exbuy_qty + st_cntpos_crrnt.l_exbuy_qty;

 	ptr_st_undfut_pos->d_exbuy_ord_vl		= ptr_st_undfut_pos->d_exbuy_ord_vl	+ st_cntpos_crrnt.d_exbuy_ord_vl;

 	ptr_st_undfut_pos->l_exsell_qty     = ptr_st_undfut_pos->l_exsell_qty  + st_cntpos_crrnt.l_exsell_qty;

 	ptr_st_undfut_pos->d_exsell_ord_vl	= ptr_st_undfut_pos->d_exsell_ord_vl	+ st_cntpos_crrnt.d_exsell_ord_vl;

 	ptr_st_undfut_pos->l_buy_exctd_qty 	= ptr_st_undfut_pos->l_buy_exctd_qty + st_cntpos_crrnt.l_buy_exctd_qty;

 	ptr_st_undfut_pos->l_sell_exctd_qty	= ptr_st_undfut_pos->l_sell_exctd_qty + st_cntpos_crrnt.l_sell_exctd_qty;

 	ptr_st_undfut_pos->l_opnpstn_qty    = ptr_st_undfut_pos->l_opnpstn_qty + st_cntpos_crrnt.l_opnpstn_qty;

 	ptr_st_undfut_pos->d_org_opn_val		= ptr_st_undfut_pos->d_org_opn_val	+ st_cntpos_crrnt.d_org_opn_val;

 	ptr_st_undfut_pos->d_mtm_opn_val    = ptr_st_undfut_pos->d_mtm_opn_val	+ st_cntpos_crrnt.d_mtm_opn_val;

 	ptr_st_undfut_pos->d_imtm_opn_val   = ptr_st_undfut_pos->d_imtm_opn_val  + st_cntpos_crrnt.d_imtm_opn_val;

	if ( st_cntpos_crrnt.l_opnpstn_qty > 0 )
	{
		ptr_st_undfut_pos->l_opn_buyqty	=	ptr_st_undfut_pos->l_opn_buyqty	+	st_cntpos_crrnt.l_opnpstn_qty;
	}
	else
	{
    ptr_st_undfut_pos->l_opn_sellqty = ptr_st_undfut_pos->l_opn_sellqty + st_cntpos_crrnt.l_opnpstn_qty;

	}

	return 0;
}

int fn_upd_mrgn ( char *c_ServiceName,
                  struct st_pstn_actn *ptr_st_pstn_actn,
                  struct st_undfut_pos	*ptr_st_undfut_pos_crrnt,
                  struct st_undfut_pos	*ptr_st_undfut_pos,
                  char  *c_err_msg
                )
{
	int   i_returncode;

  long int  li_ose_qty;
  long int  li_ibm_qty;
  long int  li_ebm_qty;
  long int  li_obe_qty;
  long int  li_ism_qty;
  long int  li_esm_qty;
  long int  li_opn_qty;
  long int  li_unmtchd_qty;
  long int  li_sum_CUOQ;
  long int  li_spd_qty;
	long	l_opnpstn_qty;

  double d_initial_mrgn;
  double d_spread_mrgn;
  double d_min_mrgn;
  double d_min_spread_mrgn;
  double d_min_trggr_prcnt ;    /** Ver 2.6 **/
  double d_i_exp = 0.0;
  double d_e_exp = 0.0;
  double d_sum_CUOV;
  double d_sum_CUOV_cmp;
  double d_diff_AMV;
  double d_und_opn_val_imtm;
	double d_opnpstn_val;

  char  c_pos_opn;

  struct st_cntfut_pos st_cntfut_pos;

  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     mrgn_cursor;            
    char  sql_cntrct_tag;
    char  sql_cln_mtch_accnt[11];
    char  sql_xchng_cd[4];
    char  sql_prd_typ;
    char  sql_undrlyng[7];
    double d_far_mtm_opn_val;
    long int  li_far_opnpstn_qty;
  EXEC SQL END DECLARE SECTION;

	MEMSET(sql_cln_mtch_accnt);
	MEMSET(sql_xchng_cd);
	MEMSET(sql_undrlyng);

  strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
  strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
  sql_prd_typ = ptr_st_pstn_actn->c_prd_typ;
  sql_cntrct_tag = ptr_st_undfut_pos->c_cntrct_tag;

	rtrim(sql_undrlyng);
	rtrim(sql_cln_mtch_accnt);
	rtrim(sql_xchng_cd);

	ptr_st_pstn_actn->c_cntrct_tag	=	ptr_st_undfut_pos->c_cntrct_tag;

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"SPAN2NRML ptr_st_pstn_actn->c_cntrct_tag Is :%c:",ptr_st_pstn_actn->c_cntrct_tag);
	}

	i_returncode = fn_get_spnim_prcntg( c_ServiceName,
                                   ptr_st_pstn_actn,
                                   ptr_st_err_msg,
                                   &d_initial_mrgn,
                                   &d_spread_mrgn,
                                   &d_min_mrgn,
                                   &d_min_spread_mrgn,
                                   ptr_st_undfut_pos->c_cntrct_tag );

  if ( i_returncode == -1 )
  {
    return ( -1 );
  }

	/** Calculation of spread margin **/
  /** Spread qty = min ( sum of open buy qty at contract level,   **/
  /**                    sum of open sell qty at contract level ) **/
  /** Spread margin = Spread qty * Far month contract rate * SM / 100 **/
	
	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"SPAN2NRML ptr_st_undfut_pos->l_opn_buyqty Is :%ld:",ptr_st_undfut_pos->l_opn_buyqty);
		fn_userlog(c_ServiceName,"SPAN2NRML ptr_st_undfut_pos->l_opn_sellqty Is :%ld:",ptr_st_undfut_pos->l_opn_sellqty);
	}

  li_spd_qty = fn_minl( ptr_st_undfut_pos->l_opn_buyqty, labs(ptr_st_undfut_pos->l_opn_sellqty) );

  EXEC SQL
    SELECT  FFP_MTM_OPN_VAL,
            FFP_OPNPSTN_QTY
    INTO    :d_far_mtm_opn_val,
            :li_far_opnpstn_qty
    FROM    FFP_FO_FUTURES_PSTN
    WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
    AND     FFP_XCHNG_CD       = :sql_xchng_cd
    AND     FFP_PRDCT_TYP      = :sql_prd_typ
    AND     FFP_UNDRLYNG       = :sql_undrlyng
    AND     FFP_CNTRCT_TAG     = :sql_cntrct_tag
    AND     FFP_EXPRY_DT       =
            ( SELECT  MAX(FFP_EXPRY_DT)
            FROM    FFP_FO_FUTURES_PSTN
            WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
            AND     FFP_XCHNG_CD       = :sql_xchng_cd
            AND     FFP_PRDCT_TYP      = :sql_prd_typ
            AND     FFP_UNDRLYNG       = :sql_undrlyng
            AND     FFP_CNTRCT_TAG     = :sql_cntrct_tag
            AND     FFP_OPNPSTN_QTY    != 0 );

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog( c_ServiceName, "S31380", SQLMSG, c_err_msg );
    return -1;
  }
	

	if ( SQLCODE == 0 )
  {
  	ptr_st_undfut_pos->d_sprd_mrgn = li_spd_qty * ( d_far_mtm_opn_val / li_far_opnpstn_qty ) * d_spread_mrgn / 100.0;

    ptr_st_undfut_pos->d_imtm_sprd_mrgn = ptr_st_undfut_pos->d_sprd_mrgn;

    ptr_st_undfut_pos->d_mm_sprd_mrgn = li_spd_qty * ( d_far_mtm_opn_val / li_far_opnpstn_qty ) * d_min_spread_mrgn / 100.0;

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"SPAN2NRML ptr_st_undfut_pos->d_sprd_mrgn Is :%lf:",ptr_st_undfut_pos->d_sprd_mrgn);
			fn_userlog(c_ServiceName,"SPAN2NRML li_spd_qty Is :%ld:",li_spd_qty);
			fn_userlog(c_ServiceName,"SPAN2NRML ptr_st_undfut_pos->d_imtm_sprd_mrgn Is :%lf:",ptr_st_undfut_pos->d_imtm_sprd_mrgn);
			fn_userlog(c_ServiceName,"SPAN2NRML ptr_st_undfut_pos->d_mm_sprd_mrgn Is :%lf:",ptr_st_undfut_pos->d_mm_sprd_mrgn);
			fn_userlog(c_ServiceName,"SPAN2NRML li_far_opnpstn_qty Is :%ld:",li_far_opnpstn_qty);
			fn_userlog(c_ServiceName,"SPAN2NRML d_far_mtm_opn_val Is :%lf:",d_far_mtm_opn_val);
		}

  }
  else
  {
  	ptr_st_undfut_pos->d_sprd_mrgn = 0;
    ptr_st_undfut_pos->d_imtm_sprd_mrgn = 0;
    ptr_st_undfut_pos->d_mm_sprd_mrgn = 0;
  }

	/** Calculation of spread profit and loss **/
  /** Objective :- Assume that the contracts of same underlying are of **/
  /**              the same type. Summing at the contract level we will**/
  /**              arrive at a contract level position which will be   **/
  /**              either buy or sell in nature. Now assume that each  **/
  /**              of the contract level position is a trade. It is buy**/
  /**              trade if the summation is a buy position else it is **/
  /**              sell trade. Now from the list of trade at hand find **/
  /**              of each trade how much is closed and how much is    **/
  /**              open. The rule to be applied here is close the      **/
  /**              nearest month contract trade first. For those trade **/
  /**              which acts as cover find profit and loss at their   **/
  /**              value.                                              **/
  /** To follow the procedure as specified in the objective is a little**/
  /** tedious. Hence we use a method of exclusion.                     **/
  /** Sum of open value at contract level =                            **/
  /**      Sum of actual open value at contract level + PL             **/
  /** We can arrive at PL using this formula. This formula will appear **/
  /** to have come out of blue, I have understood it for you to        **/
  /** understand please refer to Vishal's excel sheet.                 **/
  /** Well this formula is not the method of exclusion, finding the    **/
  /** Sum of actual open value at contract level is done using method  **/
  /** exclusion. Let us now get into it. Instead of finding which trade**/
  /** is covering which find how much of a trade is open.              **/
  /**                                                                  **/
  /** If underlying open position is buy                               **/
  /**   Preapare a list of all contract level buy open position in desc**/
  /**   order of date                                                  **/
  /** else                                                             **/
  /**   Preapare a list of all contract level sell open position in    **/
  /**   desc order of date                                             **/
  /**                                                                  **/
  /** Total unmatched quantity = Open position quantity at underlying  **/
  /**                            level                                 **/
  /** Sum of actual open quantity = 0                                  **/
  /** Sum of actual open value    = 0                                  **/
  /**                                                                  **/
  /** While unmatched quantity > 0 do                                  **/
  /**   Fetch a record from the list                                   **/
  /**   Actual open quantity = min ( Contract level open qty,          **/
  /**                                Unmatched quantity       )        **/
  /**   Sum of actual open quantity = Sum of actual open quantity +    **/
  /**                                 Actual open quantity             **/
  /**   Sum of actual open value = Sum of actual open value +          **/
  /**                              Actual open value                   **/
  /**   umatched quantity = umatched quantity - Actual open quantity   **/
	/**                                                                  **/
  /** Spread PL = Sum of actual open value - Sum of open value at      **/
  /**                                        underlying level          **/
  /**                                                                  **/
  /** Hope you understand this. The code down below is a little        **/
  /** complicated as we use signed open qty and value.                 **/

  c_pos_opn = 'Y';

  EXEC SQL ALLOCATE :mrgn_cursor;

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"SPAN2NRML sql_cln_mtch_accnt Is :%s:",sql_cln_mtch_accnt);
		fn_userlog(c_ServiceName,"SPAN2NRML sql_xchng_cd Is :%s:",sql_xchng_cd);
		fn_userlog(c_ServiceName,"SPAN2NRML sql_prd_typ Is :%c:",sql_prd_typ);
		fn_userlog(c_ServiceName,"SPAN2NRML sql_undrlyng Is :%s:",sql_undrlyng);
		fn_userlog(c_ServiceName,"SPAN2NRML sql_cntrct_tag Is :%c:",sql_cntrct_tag);
	}

  if( ptr_st_undfut_pos->l_opnpstn_qty > 0)
  {
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN2NRML Inside Buy Position.");
		}

    EXEC SQL EXECUTE
      BEGIN
        OPEN :mrgn_cursor FOR
          SELECT  FFP_MTM_OPN_VAL,
                  FFP_OPNPSTN_QTY,
                  FFP_IMTM_OPN_VAL
          FROM    FFP_FO_FUTURES_PSTN
          WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
          AND     FFP_XCHNG_CD       = :sql_xchng_cd
          AND     FFP_PRDCT_TYP      = :sql_prd_typ
          AND     FFP_UNDRLYNG  		 = :sql_undrlyng
          AND     FFP_CNTRCT_TAG     = :sql_cntrct_tag
          AND     FFP_OPNPSTN_QTY    > 0 
          ORDER BY FFP_EXPRY_DT DESC;
        END;
      END-EXEC;

  }
	else if( ptr_st_undfut_pos->l_opnpstn_qty < 0)
  {
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN2NRML Inside Sell Position.");
		}

    EXEC SQL EXECUTE
      BEGIN
        OPEN :mrgn_cursor FOR
          SELECT  FFP_MTM_OPN_VAL,
                  FFP_OPNPSTN_QTY,
                  FFP_IMTM_OPN_VAL
          FROM    ffp_fo_futures_pstn
          WHERE   FFP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
          AND     FFP_XCHNG_CD       = :sql_xchng_cd
          AND     FFP_PRDCT_TYP      = :sql_prd_typ
          AND     FFP_UNDRLYNG       = :sql_undrlyng
          AND     FFP_CNTRCT_TAG     = :sql_cntrct_tag
          AND     FFP_OPNPSTN_QTY    < 0
          ORDER BY FFP_EXPRY_DT desc;
        END;
      END-EXEC;

  }
  else
  {
    d_sum_CUOV = 0;
    d_sum_CUOV_cmp = 0;
    ptr_st_undfut_pos->d_sprd_pl = (-1) * ptr_st_undfut_pos->d_mtm_opn_val;
    ptr_st_undfut_pos->d_imtm_sprd_pl = (-1) *
                                        ptr_st_undfut_pos->d_imtm_opn_val;
    ptr_st_undfut_pos->d_mm_sprd_pl = ptr_st_undfut_pos->d_sprd_pl;

    ptr_st_undfut_pos->d_exctd_mrgn = 0;
    ptr_st_undfut_pos->d_imtm_exctd_mrgn = 0;
    ptr_st_undfut_pos->d_mm_exctd_mrgn = 0;
    c_pos_opn = 'N';

    /*** Set add margin amount to 0 ***/
    ptr_st_undfut_pos->d_add_mrgn_val = 0;

    SQLCODE = 0;
  }

	if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31385", SQLMSG, ptr_st_err_msg->c_err_msg  );
    EXEC SQL FREE :mrgn_cursor;
    return ( -1 );
  }

	if ( c_pos_opn == 'Y' )
  {
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN2NRML INSIDE c_pos_opn Is Y.");
		}

    li_opn_qty = ptr_st_undfut_pos->l_opnpstn_qty;
    li_unmtchd_qty = li_opn_qty;
    li_sum_CUOQ = 0;
    d_sum_CUOV = 0;
    d_sum_CUOV_cmp = 0;

    while ( li_unmtchd_qty != 0)
    {
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"SPAN2NRML INSIDE c_pos_opn WHILE.");
			}

      EXEC SQL FETCH :mrgn_cursor
              INTO :st_cntfut_pos.d_mtm_opn_val,
                   :st_cntfut_pos.l_opnpstn_qty,
                   :st_cntfut_pos.d_imtm_opn_val;

      if ( SQLCODE != 0 )
        {
					if ( SQLCODE == NO_DATA_FOUND )
					{
						fn_userlog(c_ServiceName,"SPAN2NRML INSIDE c_pos_opn NO_DATA_FOUND.");
						break;
					}

          fn_errlog( c_ServiceName, "S31390", SQLMSG, c_err_msg  );
          EXEC SQL CLOSE :mrgn_cursor;
          EXEC SQL FREE :mrgn_cursor;
          return ( -1 );
        }

        if ( li_opn_qty > 0 )
        {
          st_cntfut_pos.l_und_opn_qty = fn_minl( st_cntfut_pos.l_opnpstn_qty,li_unmtchd_qty );
        }
        else
        {
          st_cntfut_pos.l_und_opn_qty = fn_maxl( st_cntfut_pos.l_opnpstn_qty,li_unmtchd_qty );
        }
			
				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"SPAN2NRML MARGIN .");
				}

        st_cntfut_pos.d_und_opn_val = st_cntfut_pos.l_und_opn_qty * (st_cntfut_pos.d_mtm_opn_val / st_cntfut_pos.l_opnpstn_qty);

        d_und_opn_val_imtm = st_cntfut_pos.l_und_opn_qty * (st_cntfut_pos.d_imtm_opn_val / st_cntfut_pos.l_opnpstn_qty);

        li_sum_CUOQ = li_sum_CUOQ + st_cntfut_pos.l_und_opn_qty;
        d_sum_CUOV = d_sum_CUOV + st_cntfut_pos.d_und_opn_val;
        d_sum_CUOV_cmp = d_sum_CUOV_cmp + d_und_opn_val_imtm;

        li_unmtchd_qty = li_unmtchd_qty - st_cntfut_pos.l_und_opn_qty;
      }

			EXEC SQL CLOSE :mrgn_cursor;
      EXEC SQL FREE :mrgn_cursor;

     	/** Calculation of Executed margin **/
     	/** Executed margin = d_sum_CUOV * IM / 100 **/

      ptr_st_undfut_pos->d_sprd_pl = d_sum_CUOV - ptr_st_undfut_pos->d_mtm_opn_val;

      ptr_st_undfut_pos->d_imtm_sprd_pl = d_sum_CUOV_cmp - ptr_st_undfut_pos->d_imtm_opn_val;

      ptr_st_undfut_pos->d_mm_sprd_pl = ptr_st_undfut_pos->d_sprd_pl;

      if ( li_opn_qty > 0 )
      {
        ptr_st_undfut_pos->d_exctd_mrgn = d_sum_CUOV * d_initial_mrgn / 100.0;

        ptr_st_undfut_pos->d_imtm_exctd_mrgn = d_sum_CUOV_cmp * d_initial_mrgn / 100.0;

        ptr_st_undfut_pos->d_mm_exctd_mrgn = d_sum_CUOV * d_min_mrgn / 100.0;

      }
			else if ( li_opn_qty < 0 )
      {

        ptr_st_undfut_pos->d_exctd_mrgn = ( (-1) * d_sum_CUOV )* d_initial_mrgn / 100.0;

        ptr_st_undfut_pos->d_imtm_exctd_mrgn = ( (-1) * d_sum_CUOV_cmp )* d_initial_mrgn / 100.0;

        ptr_st_undfut_pos->d_mm_exctd_mrgn = ( (-1) * d_sum_CUOV )* d_min_mrgn / 100.0;

      }
      if ( ptr_st_pstn_actn->l_actn_typ == EOD_MTM )
      {
        ptr_st_undfut_pos->d_add_mrgn_val = 0;
      }

      if ( ( ptr_st_undfut_pos->l_opnpstn_qty == 0 ) || ( ( ptr_st_undfut_pos->l_opnpstn_qty > 0 ) && ( ptr_st_undfut_pos_crrnt->l_opnpstn_qty < 0 ) ) ||
           ( ( ptr_st_undfut_pos->l_opnpstn_qty < 0 ) && ( ptr_st_undfut_pos_crrnt->l_opnpstn_qty > 0 ) ) )
      {
        ptr_st_undfut_pos->d_add_mrgn_val = 0;
      }

    }
    else
    {
      EXEC SQL CLOSE :mrgn_cursor;
      EXEC SQL FREE :mrgn_cursor;
    }

		if ( ( ptr_st_undfut_pos->d_exctd_mrgn + ptr_st_undfut_pos->d_sprd_mrgn ) <= ptr_st_undfut_pos->d_sprd_pl )
    {
      ptr_st_undfut_pos->d_trd_mrgn = 0;
    }
    else
    {
      ptr_st_undfut_pos->d_trd_mrgn = ptr_st_undfut_pos->d_exctd_mrgn + ptr_st_undfut_pos->d_sprd_mrgn - ptr_st_undfut_pos->d_sprd_pl;
    }

    if ( ( ptr_st_undfut_pos->d_imtm_exctd_mrgn + ptr_st_undfut_pos->d_imtm_sprd_mrgn ) <= ptr_st_undfut_pos->d_imtm_sprd_pl )
    {
      ptr_st_undfut_pos->d_imtm_trd_mrgn = 0;
    }
    else
    {
      ptr_st_undfut_pos->d_imtm_trd_mrgn = ptr_st_undfut_pos->d_imtm_exctd_mrgn + ptr_st_undfut_pos->d_imtm_sprd_mrgn - ptr_st_undfut_pos->d_imtm_sprd_pl;
    }

    if ( ( ptr_st_undfut_pos->d_mm_exctd_mrgn + ptr_st_undfut_pos->d_mm_sprd_mrgn ) <= ptr_st_undfut_pos->d_mm_sprd_pl )
    {
      ptr_st_undfut_pos->d_mm_trd_mrgn = 0;
    }
    else
    {
    	ptr_st_undfut_pos->d_mm_trd_mrgn = ptr_st_undfut_pos->d_mm_exctd_mrgn + ptr_st_undfut_pos->d_mm_sprd_mrgn - ptr_st_undfut_pos->d_mm_sprd_pl;
    }


	return 0 ;

}

int fn_get_spnim_prcntg( char *c_ServiceName,
                      struct st_pstn_actn *ptr_st_pstn_actn,
                      struct st_err_msg *ptr_st_err_msg,
                      double *d_init_mrgn_prcnt,
                      double *d_sprd_mrgn_prcnt,
                      double *d_min_mrgn_prcnt,
                      double *d_min_sprd_mrgn_prcnt,
                      char   c_cntrct_tag )
{
  EXEC SQL BEGIN DECLARE SECTION;
    long  l_basket_id;
    double  d_mrgn_prcnt_init;
    double  d_mrgn_prcnt_sprd;
    double  d_mrgn_prcnt_min;
    double  d_mrgn_prcnt_sprd_min;
  EXEC SQL END DECLARE SECTION;

  /** contract tag A is reserved for near month contract in split **/
  /** which attracts 100 % margin                                 **/
  if ( c_cntrct_tag == 'A' )
  {
    *d_init_mrgn_prcnt = 100;
    *d_sprd_mrgn_prcnt = 100;
    *d_min_mrgn_prcnt = 100;
    *d_min_sprd_mrgn_prcnt = 100;

    if (DEBUG_MSG_LVL_3)
    {
      fn_userlog ( c_ServiceName, "Margin values" );
      fn_userlog ( c_ServiceName,"Initial margin :%lf:",*d_init_mrgn_prcnt);
      fn_userlog ( c_ServiceName,"Spread margin  :%lf:",*d_sprd_mrgn_prcnt);
      fn_userlog ( c_ServiceName,"Minimum margin :%lf:",*d_min_mrgn_prcnt);
      fn_userlog ( c_ServiceName,"Min Spread Mrgn:%lf:",*d_min_sprd_mrgn_prcnt);
    }

    return 0 ;
  }

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"SPAN2NRML Match Account Is :%s:",ptr_st_pstn_actn->c_cln_mtch_accnt);
	}

	 EXEC SQL
    SELECT  fcb_undrlyng_bskt_id
    INTO    :l_basket_id
    FROM    fcb_fo_cln_bskt_alltd
    WHERE   fcb_cln_lvl = ( SELECT clm_clnt_lvl
                          FROM clm_clnt_mstr
                          WHERE clm_mtch_accnt =
                                        :ptr_st_pstn_actn->c_cln_mtch_accnt );
  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31010", SQLMSG, ptr_st_err_msg->c_err_msg );
    return -1;
  }

  /************The spread margin percentage in case of FuturePlus is not yet defined, need to consult Product ***/
  /************As of now we are picking Futures sprd percentages in case of FPlus which is wrong ****************/

	if (DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"SPAN2NRML Basket Id Is :%ld:",l_basket_id);
		fn_userlog(c_ServiceName,"SPAN2NRML Product Type Is :%c:",ptr_st_pstn_actn->c_prd_typ);
		fn_userlog(c_ServiceName,"SPAN2NRML Underlying Is :%s:",ptr_st_pstn_actn->c_undrlyng);
	}

  EXEC SQL
    SELECT  decode(:ptr_st_pstn_actn->c_prd_typ,'P',fmm_span_mrgn_prcnt*fmm_fp_multplr,fmm_init_mrgn_prcnt),
            fmm_spread_mrgn,
            decode(:ptr_st_pstn_actn->c_prd_typ,'P',fmm_thrshd_mrgn_prcnt*fmm_fp_multplr,fmm_min_mrgn_prcnt),
            fmm_min_spread_mrgn
    INTO    :d_mrgn_prcnt_init,
            :d_mrgn_prcnt_sprd,
            :d_mrgn_prcnt_min,
            :d_mrgn_prcnt_sprd_min
    FROM    fmm_fo_mrgn_mstr
    WHERE   fmm_undrlyng_bskt_id  = :l_basket_id
    AND     fmm_prdct_typ         = decode(:ptr_st_pstn_actn->c_prd_typ,'P','F',:ptr_st_pstn_actn->c_prd_typ)
		AND			FMM_XCHNG_CD					=	:ptr_st_pstn_actn->c_xchng_cd			/***	Ver	1.3	***/
    AND     fmm_undrlyng          = :ptr_st_pstn_actn->c_undrlyng;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31015", SQLMSG, ptr_st_err_msg->c_err_msg );
    return  -1;
  }

	*d_init_mrgn_prcnt = d_mrgn_prcnt_init;
  *d_sprd_mrgn_prcnt = d_mrgn_prcnt_sprd;
  *d_min_mrgn_prcnt = d_mrgn_prcnt_min;
  *d_min_sprd_mrgn_prcnt = d_mrgn_prcnt_sprd_min;

	if (DEBUG_MSG_LVL_0)
	{
  	fn_userlog ( c_ServiceName, "Margin values" );
  	fn_userlog ( c_ServiceName,"Initial margin :%lf:",*d_init_mrgn_prcnt);
  	fn_userlog ( c_ServiceName,"Spread margin  :%lf:",*d_sprd_mrgn_prcnt);
  	fn_userlog ( c_ServiceName,"Minimum margin :%lf:",*d_min_mrgn_prcnt);
  	fn_userlog ( c_ServiceName,"Min Spread Mrgn:%lf:",*d_min_sprd_mrgn_prcnt);
	}

  return 0;
}

int fn_get_spnmrgn_opt	( char *c_ServiceName,
                    			struct st_pstn_actn *ptr_st_pstn_actn,
                    			struct st_err_msg *ptr_st_err_msg,
                    			double *d_init_mrgn_prcnt,
                    			double *d_min_mrgn_prcnt,
                    			double *d_somc_prcnt,
                          double *d_min_trg_prcnt /** Ver 2.6 **/
		 										)
{
  EXEC SQL BEGIN DECLARE SECTION;
    long  l_basket_id;
    double  d_mrgn_prcnt_init;
    double  d_somc;
    double  d_mrgn_prcnt_min;
    double  d_trg_prcnt_min;  /*** Ver 2.6 ***/ 
  EXEC SQL END DECLARE SECTION;
   
  char c_otm_flg = 'N';    /** ver 3.8 **/

  EXEC SQL
    SELECT  fcb_undrlyng_bskt_id
    INTO    :l_basket_id
    FROM    fcb_fo_cln_bskt_alltd
    WHERE   fcb_cln_lvl = ( SELECT clm_clnt_lvl
                          FROM clm_clnt_mstr
                          WHERE clm_mtch_accnt =
                                        :ptr_st_pstn_actn->c_cln_mtch_accnt );
  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31030", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  /*** ver 3.8  starts ***/
   fn_userlog(c_ServiceName,"ANUJ Product Type      =   :%c:",ptr_st_pstn_actn->c_prd_typ) ;
   fn_userlog( c_ServiceName,"ANUJ Stock code       =   :%s:",ptr_st_pstn_actn->c_undrlyng);
   fn_userlog( c_ServiceName,"ANUJ Expiry Date      =   :%s:",ptr_st_pstn_actn->c_expry_dt);
   fn_userlog(c_ServiceName,"ANUJ Option Type       =   :%c:",ptr_st_pstn_actn->c_opt_typ);
   fn_userlog(c_ServiceName,"ANUJ Strike Price      =   :%ld:",ptr_st_pstn_actn->l_strike_prc);
   
  EXEC SQL
   SELECT  NVL(FTQ_OTM_FLG,'N')
   INTO    :c_otm_flg
   FROM   FTQ_FO_TRD_QT
   WHERE  FTQ_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd 
   AND    rtrim(FTQ_UNDRLYNG) = rtrim(:ptr_st_pstn_actn->c_undrlyng) 
   AND    FTQ_PRDCT_TYP       = decode(:ptr_st_pstn_actn->c_prd_typ,'I','O',:ptr_st_pstn_actn->c_prd_typ)
   AND    FTQ_EXPRY_DT        = rtrim(:ptr_st_pstn_actn->c_expry_dt) 
   AND    FTQ_STRK_PRC        = :ptr_st_pstn_actn->l_strike_prc
   AND    FTQ_OPT_TYP         = :ptr_st_pstn_actn->c_opt_typ; 
  
   if ( SQLCODE != 0 && SQLCODE !=  NO_DATA_FOUND )   /** ver 3.9 **/
   {
    fn_errlog( c_ServiceName, "L31030", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
   }
   
   /** ver 3.9 starts **/
   if ( SQLCODE == NO_DATA_FOUND )
   {
    c_otm_flg = 'N';
    fn_userlog(c_ServiceName,"OTM/OTH Flag Set To Default for Contract :%s:%s:%c:%s:%ld:%c:",ptr_st_pstn_actn->c_xchng_cd,ptr_st_pstn_actn->c_undrlyng,ptr_st_pstn_actn->c_prd_typ,ptr_st_pstn_actn->c_expry_dt,ptr_st_pstn_actn->l_strike_prc,ptr_st_pstn_actn->c_opt_typ);
   }  
   /** ver 3.9 Ends **/

    fn_userlog( c_ServiceName,"OTM/OTH FLag fetched is :%c",c_otm_flg); 
  
  /*** ver 3.8 ends ***/ 
 
  EXEC SQL
    SELECT  /** fmm_init_mrgn_prcnt,  ** commented in ver 3.8 **/
            decode(:c_otm_flg,'Y',NVL(fmm_deep_otm_im_prcnt,0),NVL(fmm_init_mrgn_prcnt,0)),   /** ver 3.8 **/
            fmm_somc_prcnt,
            fmm_min_mrgn_prcnt,
            nvl(fmm_min_trg_prcnt,0)       /*** Ver 2.6 ***/ 
    INTO    :d_mrgn_prcnt_init,
            :d_somc,
            :d_mrgn_prcnt_min,
            :d_trg_prcnt_min       /*** Ver 2.6 ***/
    FROM    fmm_fo_mrgn_mstr
    WHERE   fmm_undrlyng_bskt_id  = :l_basket_id
    AND     fmm_xchng_cd          = :ptr_st_pstn_actn->c_xchng_cd           /***	Ver 1.3	***/
    AND     fmm_prdct_typ         = :ptr_st_pstn_actn->c_prd_typ
    AND     fmm_undrlyng          = :ptr_st_pstn_actn->c_undrlyng;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31035", SQLMSG, ptr_st_err_msg->c_err_msg );
    return -1;
	}

	*d_init_mrgn_prcnt = d_mrgn_prcnt_init;
  *d_min_mrgn_prcnt = d_mrgn_prcnt_min;
  *d_somc_prcnt = d_somc;
  *d_min_trg_prcnt = d_trg_prcnt_min; /*** Ver 2.6 ***/

	if (DEBUG_MSG_LVL_0)      
	{
  	fn_userlog ( c_ServiceName, "Margin values" );
  	fn_userlog ( c_ServiceName,"Initial margin :%lf:",*d_init_mrgn_prcnt);
  	fn_userlog ( c_ServiceName,"Minimum margin :%lf:",*d_min_mrgn_prcnt);
  	fn_userlog ( c_ServiceName,"SOMC   :%lf:",*d_somc_prcnt);
    fn_userlog ( c_ServiceName,"Minimum Trigger price :%lf:",*d_min_trg_prcnt);      /*** Ver 2.6 ***/
	}

  return SUCCESS;
}

int fn_upd_mrgn_opt ( char *c_ServiceName,
                      struct st_pstn_actn *ptr_st_pstn_actn,
                      struct st_cntopt_pos *ptr_st_cntopt_pos_crrnt,
                      struct st_cntopt_pos *ptr_st_cntopt_pos,
                      char  *c_err_msg)
{
	int i_returncode;
  int i_ip_len;
  int i_op_len;

  long int li_itm_prc;
  long int li_oom_prc;
  long int li_actual_mrgn;
  long int li_min_mrgn;
  long int li_ose_qty;
  long int li_ibm_qty;
  long int li_ibsm_qty;
  long int li_ebsm_qty;
  long int li_ebm_qty;
  long int li_obe_qty;
  long int li_ism_qty;
  long int li_esm_qty;
  long int li_cls_prc;
  long int li_stk_prc;
  long int li_cboq;

  long l_wincrement;
  long l_xincrement;

  double d_initial_mrgn = 0.0;
  double d_min_mrgn = 0.0;
  double d_somc  = 0.0;
  double d_i_exp = 0.0;
  double d_e_exp = 0.0;
  double d_mcboq = 0.0;
  double d_min_trggr_prcnt=0.0;  /** Ver 2.6 **/

  double d_actual_mrgn = 0.0;
  double d_rls_amt = 0.0;
  double d_cur_trd_mrgn = 0.0;
  double d_trigger_prc;
  double d_t1;
  double d_t2;

	double d_c1 = 0.0;
  double d_c2 = 0.0;
  double d_c3 = 0.0;
  double d_c3a = 0.0;
  double d_c4 = 0.0;
  double d_c5 = 0.0;
  struct vw_contract st_cntrct;
  struct vw_cntrct_qt st_cntrct_qt;

  /** Get the margin percentages **/

  i_returncode = fn_get_spnmrgn_opt	( c_ServiceName,
                                 			ptr_st_pstn_actn,
                                 			ptr_st_err_msg,
                                 			&d_initial_mrgn,
                                 			&d_min_mrgn,
                                 			&d_somc,
                                      &d_min_trggr_prcnt  /** Ver 2.6 **/
 																		);

  if ( i_returncode == -1 )
  {
    return ( -1 );
  }

	EXEC SQL
		SELECT	LTQ_RT
		INTO		:ptr_st_pstn_actn->d_und_quote
		FROM		LTQ_TRD_QT
		WHERE		LTQ_STCK_CD		=	:ptr_st_pstn_actn->c_undrlyng
	/*	AND			LTQ_XCHNG_CD	=	'NSE';						*** Ver 2.0 comment ***/
		AND			LTQ_XCHNG_CD	=	DECODE(:ptr_st_pstn_actn->c_xchng_cd,'NFO','NSE',
																																 'BFO','BSE');		/** Ver 2.0 **/

	if ( SQLCODE	!=	0	)
	{
		fn_userlog( c_ServiceName, "Failed To Get Spot Price .");
		fn_errlog( c_ServiceName, "S31395",SQLMSG, c_err_msg );
		return -1;
	}

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"SPAN2NRML Option Spot Price Is :%lf:",ptr_st_pstn_actn->d_und_quote);
	}

	if ( ptr_st_pstn_actn->c_opt_typ == 'P' )
  {
    li_cls_prc = (long)(ptr_st_pstn_actn->d_und_quote*100.0);
    li_stk_prc = ptr_st_cntopt_pos->l_strike_prc;

		if(DEBUG_MSG_LVL_0)
		{
  		fn_userlog( c_ServiceName, "Close Price :%ld:", li_cls_prc );
  		fn_userlog( c_ServiceName, "Strike Price :%ld:", li_stk_prc );
		}

    if ( li_cls_prc < li_stk_prc )
    {
      li_itm_prc = li_stk_prc - li_cls_prc;
      li_oom_prc = 0;
    }
    else
    {
      li_oom_prc = li_cls_prc - li_stk_prc;
      li_itm_prc = 0;
    }

		if ( ptr_st_cntopt_pos->l_opnpstn_qty < 0 )
    {
			/*** Commented in Ver 2.7 ***
    	d_c1 = ( ( (double)ptr_st_cntopt_pos->l_opnpstn_qty * -1.0 ) * ptr_st_pstn_actn->d_und_quote * 100.0 * d_initial_mrgn / 100.0) -
            (double)( li_oom_prc * ptr_st_cntopt_pos->l_opnpstn_qty * -1 ) +(double)( li_itm_prc * ptr_st_cntopt_pos->l_opnpstn_qty * -1 ); ***/

			d_c1 = ( ( (double)ptr_st_cntopt_pos->l_opnpstn_qty * -1.0 ) * ptr_st_pstn_actn->d_und_quote * 100.0 * d_initial_mrgn / 100.0) -
			( (double) li_oom_prc * (double) ptr_st_cntopt_pos->l_opnpstn_qty * -1 ) + ( (double) li_itm_prc * (double) ptr_st_cntopt_pos->l_opnpstn_qty * -1 );	/*** Ver 2.7 ***/

      d_c2 =  ( ( (double)ptr_st_cntopt_pos->l_opnpstn_qty * -1.0 ) * (double)ptr_st_cntopt_pos->l_strike_prc * d_somc / 100.0 );

      ptr_st_cntopt_pos->d_trd_mrgn =  fn_maxd( d_c1, d_c2 );

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Here d_c1 is :%lf:",d_c1 );
				fn_userlog(c_ServiceName,"Here d_c2 is :%lf:",d_c2 );
				fn_userlog(c_ServiceName,"Here Trade Margin is :%lf:", ptr_st_cntopt_pos->d_trd_mrgn);
			}
    }
    else
    {
    	ptr_st_cntopt_pos->d_trd_mrgn = 0;
    }
	
		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"SPAN2NRML OPTION TRADE MARGIN IS :%lf:",ptr_st_cntopt_pos->d_trd_mrgn);
		}

		d_trigger_prc = 0.0;
	
		if (	ptr_st_cntopt_pos->l_opnpstn_qty < 0 )
		{
			d_trigger_prc	=	( ( (double) ptr_st_pstn_actn->l_strike_prc  - (ptr_st_cntopt_pos->d_trd_mrgn / (ptr_st_cntopt_pos->l_opnpstn_qty * (-1) ))) /
                      ( 1 - (d_min_mrgn/100.0 ) ) );
		  if(DEBUG_MSG_LVL_0)
			{
				fn_userlog( c_ServiceName, "d_trigger_prc :%lf:", d_trigger_prc);
			}
			ptr_st_cntopt_pos->l_mtm_trg_prc = d_trigger_prc;
		}
	}
	else
	{
		li_cls_prc = (long)(ptr_st_pstn_actn->d_und_quote * 100.0 );
    li_stk_prc = ptr_st_cntopt_pos->l_strike_prc;

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog( c_ServiceName, "Close Price :%ld:", li_cls_prc );	
  		fn_userlog( c_ServiceName, "Strike Price :%ld:", li_stk_prc );
		}

		if ( li_cls_prc > li_stk_prc )
    {
      li_itm_prc = li_cls_prc - li_stk_prc;
      li_oom_prc = 0;
    }
    else
    {
      li_oom_prc = li_stk_prc - li_cls_prc;
      li_itm_prc = 0;
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "ITM rate :%ld:", li_itm_prc );
  		fn_userlog( c_ServiceName, "OOM rate :%ld:", li_oom_prc );
		}

		if ( ptr_st_cntopt_pos->l_opnpstn_qty < 0 )
		{
			/*** Commented in Ver 2.7 ***
			d_c1 = ( (double)(ptr_st_cntopt_pos->l_opnpstn_qty * -1.0) * ptr_st_pstn_actn->d_und_quote *  100.0 * d_initial_mrgn / 100.0) -
           (double)( li_oom_prc * ptr_st_cntopt_pos->l_opnpstn_qty * -1.0 ) +
           (double)( li_itm_prc * ptr_st_cntopt_pos->l_opnpstn_qty * -1.0 ); ***/

			d_c1 = ( (double)(ptr_st_cntopt_pos->l_opnpstn_qty * -1.0) * ptr_st_pstn_actn->d_und_quote *  100.0 * d_initial_mrgn / 100.0) -
           ( (double) li_oom_prc * (double) ptr_st_cntopt_pos->l_opnpstn_qty * -1.0 ) +
           ( (double) li_itm_prc * (double) ptr_st_cntopt_pos->l_opnpstn_qty * -1.0 ); /*** Ver 2.7 ***/

      d_c2 =  ( (double)( ptr_st_cntopt_pos->l_opnpstn_qty  * -1.0 ) * (double)ptr_st_cntopt_pos->l_strike_prc * d_somc / 100.0);

      ptr_st_cntopt_pos->d_trd_mrgn =  fn_maxd( d_c1, d_c2 );

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"d_c1 is :%lf:",d_c1);
				fn_userlog(c_ServiceName,"d_c2 is :%lf:",d_c2);
			}

			if(DEBUG_MSG_LVL_0)
			{
    		fn_userlog(c_ServiceName,"Trade Margin Is :%lf:",ptr_st_cntopt_pos->d_trd_mrgn);
			}
		}
		else
		{
			ptr_st_cntopt_pos->d_trd_mrgn = 0;
		}

		d_trigger_prc = 0.0;

		if ( ptr_st_cntopt_pos->l_opnpstn_qty < 0 )
		{
			d_trigger_prc = ( ( (double) ptr_st_pstn_actn->l_strike_prc + ( ptr_st_cntopt_pos->d_trd_mrgn / (ptr_st_cntopt_pos->l_opnpstn_qty * (-1) ))) /
                          ( 1 + (d_min_mrgn/100.0 ) ));
		}

		ptr_st_cntopt_pos->l_mtm_trg_prc = d_trigger_prc ;
	}

	return 0;
}

int fn_nearest_paise(  char   *c_ServiceName,
                       double d_rate,
                       int    tick,
                       int    up_down,
                       char   *c_err_msg,
                       double *d_amount )
{


  long  l_rate ;

  d_rate =  floor(d_rate);
  l_rate = (long) d_rate ;

  if(up_down == LOWER)
  {
     d_rate = (double)(l_rate  - (  l_rate %  tick ) ) ;
     *d_amount = d_rate;
  }
  else if(up_down == UPPER)
  {
     if ( (  l_rate %  tick ) != 0)
     {
       d_rate = (double)(l_rate  - (  l_rate %  tick ) + tick ) ;
     }
     *d_amount = d_rate;
  }
  else
  {
    strcpy( c_err_msg, "Invalid up_down of bound" );
    fn_errlog( c_ServiceName, "S31400", DEFMSG, c_err_msg );
    return FAILURE;
  }

  return 0;
}

/**** Added In ver 1.2 ******/

int fn_insert_report( char *c_ServiceName,
                      char *c_spn_mtch_accnt,
                      char *c_cnvrsn_rmrks,
                      char *c_status, 
											char *c_mrgn_typ,				/*** Ver 1.4 ***/
											char  c_spl_flg,				/*** Ver 1.4 ***/
											char *c_xchng_cd,				/*** Ver 2.0 ***/
											char *c_usr_id,					/*** ver 3.5 ***/
											int  sql_lsm_sms_id,		/*** ver 3.5 ***/
                      char *c_cnvrsion_mode,   /*** ver 3.5 ***/
											double d_required_amount /*** ver 3.5 ***/
										)
{
		int i_trnsctn = 0;
    char c_cnvrsn_src[8] = "\0";		/*** Ver 1.4 ***/ /*** Variable initialized in Ver 2.2 ***/
		/*** Ver 3.5 starts ***/
		FBFR32  *ptr_fml_Sbuffer;
		ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
    if(ptr_fml_Sbuffer == NULL)
    {
      fn_errlog( c_ServiceName, "S31405",LIBMSG, c_err_msg );
			return -1;
    }
		/*** Ver 3.5 ends ***/

		fn_userlog(c_ServiceName," Inside Function fn_insert_report ");

		if( DEBUG_MSG_LVL_3 )
  	{
    	fn_userlog(c_ServiceName," Inside Function fn_insert_report ");
    	fn_userlog(c_ServiceName," c_ServiceName 		|%s|",c_ServiceName);
    	fn_userlog(c_ServiceName," c_spn_mtch_accnt |%s|",c_spn_mtch_accnt);
    	fn_userlog(c_ServiceName," c_cnvrsn_rmrks		|%s|",c_cnvrsn_rmrks);
    	fn_userlog(c_ServiceName," c_status					|%s|",c_status);
			fn_userlog(c_ServiceName," c_mrgn_typ       |%s|",c_mrgn_typ);			/*** Ver 1.4 ***/
			fn_userlog(c_ServiceName," c_spl_flg				|%c|",c_spl_flg);				/*** Ver 1.4 ***/
			fn_userlog(c_ServiceName," c_xchng_cd				|%s|",c_xchng_cd);				/*** Ver 1.4 ***/
  	}

		/*** Ver 1.4 starts here ***/
		if (c_spl_flg == 'F')
			strcpy	( c_cnvrsn_src, "WEB");		/*** Ver 1.5 ***/
		else if (c_spl_flg == 'B' || c_spl_flg == 'K' || c_spl_flg == 'A' ) /*** Ver 3.5 ***/
			strcpy	( c_cnvrsn_src, "OFF");		/*** Ver 1.5 ***/
		else if (c_spl_flg == 'S')
			strcpy	( c_cnvrsn_src, "WE4");	/*** Ver 2.1 ***/
		else if (c_spl_flg == 'H')				
      strcpy  ( c_cnvrsn_src, "WEH");  /*** Ver 2.4 ***/
		/*** Ver 1.4 ends here ***/

		i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  	if ( i_trnsctn == -1 )
  	{
       fn_errlog ( c_ServiceName, "S31410", LIBMSG, c_err_msg );
			 tpfree((char *)ptr_fml_Sbuffer); /*** Ver 3.5 ***/
       return -1;
    }
		
		rtrim(c_cnvrsn_rmrks);
    rtrim(c_status);

    EXEC SQL
        INSERT INTO FSC_SPNNRML_CNV
        		( FSC_CLM_MTCH_ACCNT,
            	FSC_CNVRSN_TIME,
              FSC_CNVRSN_RMRKS,
              FSC_CNVRSN_STTS,
							FSC_MARGINING_TYP,		/*** Ver 1.4 ***/
							FSC_CNVRSN_SRC,			 /*** Ver 1.4 ***/
							FSC_XCHNG_CD,					/*** Ver 2.0 **/
              FSC_MODE              /*** Ver 3.5 ***/ 
            ) 
            VALUES
            ( :c_spn_mtch_accnt,
              SYSDATE,
              :c_cnvrsn_rmrks,
              :c_status,
							:c_mrgn_typ,					/*** Ver 1.4 ***/
							:c_cnvrsn_src,				/*** Ver 1.4 ***/
							:c_xchng_cd,						/*** Ver 2.0 ***/
              :c_cnvrsion_mode        /*** Ver 3.5 ***/
            );

    if ( SQLCODE != 0 )
    {
       fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
       fn_userlog( c_ServiceName, "Failed To Insert Into Log Table For Match Account :%s:",c_spn_mtch_accnt);
       fn_errlog( c_ServiceName, "S31415",SQLMSG, c_err_msg );
			 tpfree((char *)ptr_fml_Sbuffer); /*** Ver 3.5 ***/
			 return -1;
    }

		/*** Ver 3.5 starts ***/
		if (sql_lsm_sms_id != 126)
	  {
			EXEC SQL
				UPDATE FSC_SPNNRML_CNV
				SET		 FSC_CNVRSN_STTS = :c_status
				WHERE  FSC_CLM_MTCH_ACCNT = :c_spn_mtch_accnt
				AND		 FSC_CNVRSN_STTS in ('PENDING','FAIL')
				AND    FSC_CNVRSN_RMRKS in ('Request for SPAN To NORMAL conversion')
				AND    FSC_CNVRSN_TIME >= (SELECT to_date(MAX(FBC_TRD_DT) || ' 09:15:00','DD-Mon-YYYY HH24:Mi:SS')
																		FROM	 FBC_FO_BRNCH_CAL 
																		WHERE	 FBC_XCHNG_CD = :c_xchng_cd 
																		AND		 FBC_TRD_DT < (SELECT EXG_NXT_TRD_DT FROM EXG_XCHNG_MSTR WHERE EXG_XCHNG_CD = :c_xchng_cd) 
																		AND		 FBC_GRP_ID=1 
																		AND		 FBC_BRANCH='0004' 
																	) 
				AND    FSC_XCHNG_CD = :c_xchng_cd;

			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
			{
				 fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
				 fn_errlog( c_ServiceName, "S31420",SQLMSG, c_err_msg );
				 tpfree((char *)ptr_fml_Sbuffer); 
				 return -1;		
			}
		}

		if (sql_lsm_sms_id != 0)
	  {
			if (sql_lsm_sms_id == 129 || sql_lsm_sms_id == 133 )
			{
				EXEC SQL
					SELECT REPLACE(LSM_MSG_TXT,'XXXXX',:d_required_amount)
					INTO   :sql_lsm_msg_txt
					FROM   LSM_LCK_SMS_MSG_MSTR
					WHERE  LSM_SMS_ID = :sql_lsm_sms_id;
			}
			else
		  {
				EXEC SQL
					SELECT LSM_MSG_TXT
					INTO   :sql_lsm_msg_txt
					FROM   LSM_LCK_SMS_MSG_MSTR
					WHERE  LSM_SMS_ID = :sql_lsm_sms_id;
			}
			if( SQLCODE != 0 )
			{
				 fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
				 fn_errlog( c_ServiceName, "S31425",SQLMSG, c_err_msg );
				 tpfree((char *)ptr_fml_Sbuffer);
				 return -1;		
			}

			SETNULL(sql_lsm_msg_txt);

			if( Fadd32(ptr_fml_Sbuffer,FML_SYS_MSG,(char *)sql_lsm_msg_txt.arr,0) == -1 )
			{
				 fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
				 fn_errlog( c_ServiceName, "S31430",LIBMSG, c_err_msg );
				 tpfree((char *)ptr_fml_Sbuffer); 
				 return -1;		
			}

			if(fn_snd_mymsg_sms_notfcn(c_ServiceName,
																&ptr_fml_Sbuffer,
																c_usr_id,
																DEF_SSSN,
																c_spn_mtch_accnt,
																"CONV",
																MYMSG_AND_NOTFCN,
																c_err_msg) != 0)
			{
				 fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
				 fn_errlog( c_ServiceName, "S31435",LIBMSG, c_err_msg );
				 tpfree((char *)ptr_fml_Sbuffer); 
				 return -1;	
			}
		}
		/*** Ver 3.5 ends ***/

		if ( fn_committran( c_ServiceName, i_trnsctn,c_err_msg ) == -1 )
    {
       fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
       fn_errlog ( c_ServiceName, "S31440", LIBMSG, c_err_msg );
			 tpfree((char *)ptr_fml_Sbuffer); /*** Ver 3.5 ***/
       return -1;
    }
    tpfree((char *)ptr_fml_Sbuffer); /*** Ver 3.5 ***/
	  return 0;	
 }

/** Ver 2.6 Starts **/

int fn_ins_upd_trgprc(char *c_ServiceName,
                    struct  st_pstn_actn *ptr_st_pstn_actn,
                    struct  st_cntopt_pos st_cntopt_pos_tobe,
                    struct  st_err_msg *ptr_st_err_msg
                    )

{
  double d_min_margin_pctg= 0.0;
  char c_sem_map_vl[20];
  double d_ers_trg_prc=0.0;
  int i_tck_sz=0;
  int i_returncode;
  int i_up_down=0;
  double d_wag_price=0.0;
  char   c_pos_flw='\0';
  long l_trg_prc=0;
  double d_somc         = 0.0;
  double d_initial_mrgn = 0.0;
  double d_min_mrgn     = 0.0;
  double d_min_ers_trigger_prc=0.0;
  double d_min_trg_prcnt=0.0;
  double d_min_trggr_prcnt=0.0;
  int i_trnsctn;


  MEMSET(c_sem_map_vl);

  if (strcmp(ptr_st_pstn_actn->c_xchng_cd,"NFO") == 0 )
  {

      EXEC SQL
        SELECT  SEM_MAP_VL
          INTO  :c_sem_map_vl
          FROM  SEM_STCK_MAP
          WHERE SEM_STCK_CD = :ptr_st_pstn_actn->c_undrlyng
          AND   SEM_ENTTY = decode(:ptr_st_pstn_actn->c_ctgry_indstk,'I','12',1);

  }
  else if (strcmp(ptr_st_pstn_actn->c_xchng_cd,"BFO") == 0 )
  {
    EXEC SQL
      SELECT  SEM_MAP_VL
        INTO  :c_sem_map_vl
        FROM  SEM_STCK_MAP
        WHERE SEM_STCK_CD = :ptr_st_pstn_actn->c_undrlyng
        AND   SEM_ENTTY = decode(:ptr_st_pstn_actn->c_ctgry_indstk,'I','12',6);
  }
  else
  {
    fn_errlog( c_ServiceName, "S31445","Invalid Exchange code",ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog( c_ServiceName, "S31450",SQLMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName," ptr_st_pstn_actn->c_ctgry_indstk :%c:",ptr_st_pstn_actn->c_ctgry_indstk);
    fn_userlog(c_ServiceName,"ptr_st_pstn_actn->c_exrc_typ :%c:",ptr_st_pstn_actn->c_exrc_typ);
    fn_userlog(c_ServiceName,"ptr_st_pstn_actn->c_prd_typ  :%c:",ptr_st_pstn_actn->c_prd_typ);
    fn_userlog(c_ServiceName,"c_sem_map_vl is :%s:",c_sem_map_vl);
  }

  rtrim(c_sem_map_vl);

  if( ptr_st_pstn_actn->c_ctgry_indstk == 'S' )
  {
   sprintf(c_sem_map_vl,"%sEQ",c_sem_map_vl);
  }

  rtrim(c_sem_map_vl);


  /*--------------------------------------------------------------*/

   d_wag_price = (double) st_cntopt_pos_tobe.d_org_opn_val / st_cntopt_pos_tobe.l_opnpstn_qty;
   l_trg_prc =  st_cntopt_pos_tobe.l_mtm_trg_prc;
   c_pos_flw = st_cntopt_pos_tobe.c_opnpstn_flw;
  
   fn_userlog( c_ServiceName, "d_wag_price is :%lf:",d_wag_price );

   i_returncode = fn_get_spnmrgn_opt ( c_ServiceName,
                                     ptr_st_pstn_actn,
                                     ptr_st_err_msg,
                                     &d_initial_mrgn,
                                     &d_min_mrgn,
                                     &d_somc,
                                     &d_min_trggr_prcnt  );


    if ( i_returncode == -1 )
    {
      return ( -1 );
    }
    
    if( DEBUG_MSG_LVL_3 )
    {  
     fn_userlog( c_ServiceName, " d_initial_mrgn is :%lf:",d_initial_mrgn );
     fn_userlog( c_ServiceName, "d_min_mrgn is :%lf:",d_min_mrgn );
     fn_userlog( c_ServiceName, "d_somc is :%lf:",d_somc );
     fn_userlog( c_ServiceName, "d_min_trggr_prcnt is :%lf:",d_min_trggr_prcnt );
     fn_userlog( c_ServiceName, "ptr_st_pstn_actn->c_opt_typ is :%c:",ptr_st_pstn_actn->c_opt_typ );
     fn_userlog( c_ServiceName, "ptr_st_pstn_actn->l_strike_prc is :%ld:",ptr_st_pstn_actn->l_strike_prc );
     fn_userlog( c_ServiceName, "st_cntopt_pos_tobe.d_trd_mrgn is :%lf:",st_cntopt_pos_tobe.d_trd_mrgn );
     fn_userlog( c_ServiceName, "st_cntopt_pos_tobe.l_opnpstn_qty is :%ld:",st_cntopt_pos_tobe.l_opnpstn_qty );
    }

     d_min_ers_trigger_prc = 0.0;

     if (ptr_st_pstn_actn->c_opt_typ == 'P' )
     {
      d_min_ers_trigger_prc = ( ( (double) ptr_st_pstn_actn->l_strike_prc  -
                          (st_cntopt_pos_tobe.d_trd_mrgn /
                          (st_cntopt_pos_tobe.l_opnpstn_qty * (-1)))) /
                          ( 1 - (d_min_trggr_prcnt/100.0 ) )                 );
      fn_userlog( c_ServiceName, "For PUT d_min_ers_trigger_prc is :%lf:", d_min_ers_trigger_prc);
     i_up_down = LOWER;
     }
     else
     {
      d_min_ers_trigger_prc = ( ( (double) ptr_st_pstn_actn->l_strike_prc  +
                          ( st_cntopt_pos_tobe.d_trd_mrgn /
                          (st_cntopt_pos_tobe.l_opnpstn_qty * (-1)))) /
                        ( 1 + (d_min_trggr_prcnt/100.0 ) )                 );
      fn_userlog( c_ServiceName, "For CEll d_min_ers_trigger_prc is :%lf:", d_min_ers_trigger_prc);
      i_up_down = UPPER;

     }

   d_ers_trg_prc = 0.0;
    i_tck_sz=0;

    /*** Commented in Ver 2.8 *** 
  
     EXEC SQL
       SELECT NVL(FCM_TCK_SZ,5)
       INTO :i_tck_sz
       FROM FCM_FO_CNTRCT_MSTR
       WHERE FCM_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
       AND FCM_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
       AND FCM_INDSTK    = :ptr_st_pstn_actn->c_ctgry_indstk
       AND FCM_UNDRLYNG  = :ptr_st_pstn_actn->c_undrlyng
       AND FCM_EXPRY_DT  = to_date(:ptr_st_pstn_actn->c_expry_dt,'dd-Mon-yyyy')
       AND FCM_EXER_TYP  = :ptr_st_pstn_actn->c_exrc_typ
       AND FCM_OPT_TYP   = :ptr_st_pstn_actn->c_opt_typ
       AND FCM_STRK_PRC  = :ptr_st_pstn_actn->l_strike_prc;

     ***/

     /*** Ver 2.8 Starts ***/


     EXEC SQL
       SELECT NVL(FTQ_TCK_SZ,5)
       INTO :i_tck_sz
       FROM FTQ_FO_TRD_QT
       WHERE FTQ_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
       AND FTQ_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
       AND FTQ_INDSTK    = :ptr_st_pstn_actn->c_ctgry_indstk
       AND FTQ_UNDRLYNG  = :ptr_st_pstn_actn->c_undrlyng
       AND FTQ_EXPRY_DT  = to_date(:ptr_st_pstn_actn->c_expry_dt,'dd-Mon-yyyy')
       AND FTQ_EXER_TYP  = :ptr_st_pstn_actn->c_exrc_typ
       AND FTQ_OPT_TYP   = :ptr_st_pstn_actn->c_opt_typ
       AND FTQ_STRK_PRC  = :ptr_st_pstn_actn->l_strike_prc;

     /*** Ver 2.8 Ends   ***/

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
   {
    fn_errlog( c_ServiceName, "S31455", SQLMSG , c_err_msg );
    return FAILURE;
  }
   if( SQLCODE == NO_DATA_FOUND )
   {
     i_tck_sz = 5;
   }
   fn_userlog( c_ServiceName, "FTQ Tokan size i_tck_sz :%d:", i_tck_sz);


   i_returncode = fn_nearest_paise( c_ServiceName,
                                   d_min_ers_trigger_prc,
                                   i_tck_sz,
                                   i_up_down,
                                   c_err_msg,
                                   &d_ers_trg_prc );

  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31460", LIBMSG , c_err_msg );
    return FAILURE;
  }
  /**** Ver 1.3 Ends here ****/

  if( DEBUG_MSG_LVL_4 )
  {
    fn_userlog( c_ServiceName, "d_min_ers_trigger_prc after round off :%lf:", d_ers_trg_prc);
  }

EXEC SQL
      UPDATE  fop_fo_options_pstn
      SET
              fop_min_trg_prc = :d_ers_trg_prc

      WHERE   fop_clm_mtch_accnt  = :ptr_st_pstn_actn->c_cln_mtch_accnt
      AND     fop_xchng_cd        = :ptr_st_pstn_actn->c_xchng_cd
      AND     fop_prdct_typ       = :ptr_st_pstn_actn->c_prd_typ
      AND     fop_undrlyng        = :ptr_st_pstn_actn->c_undrlyng
      AND     fop_exer_typ        = :ptr_st_pstn_actn->c_exrc_typ
      AND     fop_opt_typ         = :ptr_st_pstn_actn->c_opt_typ
      AND     fop_expry_dt        = :ptr_st_pstn_actn->c_expry_dt
      AND     fop_strk_prc        = :ptr_st_pstn_actn->l_strike_prc;
   if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31465", SQLMSG, ptr_st_err_msg->c_err_msg );
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }

/*-------------------------------------------------------------*/

  EXEC SQL
    UPDATE  FMD_FO_MTM_DTLS
    SET     FMD_LMT_RT=:d_wag_price,
            FMD_TRGR_RT= :l_trg_prc,
            FMD_ORDR_FLW =:c_pos_flw,
            FMD_STATUS = 'N',
            FMD_MIN_TRGR_RT =:d_ers_trg_prc,
        		FMD_PSTN_TYP = 'N',    /** ver 3.2 **/
            FMD_TRG_SYSTM = sysdate    /** ver 3.3 **/
    WHERE FMD_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND   FMD_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
    AND   FMD_PRDCT_TYP = :ptr_st_pstn_actn->c_prd_typ
    AND   FMD_INDSTK = :ptr_st_pstn_actn->c_ctgry_indstk
    AND   FMD_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
    AND   FMD_EXPRY_DT = :ptr_st_pstn_actn->c_expry_dt
    AND   FMD_EXER_TYP = :ptr_st_pstn_actn->c_exrc_typ
    AND   FMD_OPT_TYP = :ptr_st_pstn_actn->c_opt_typ
    AND   FMD_STRK_PRC = :ptr_st_pstn_actn->l_strike_prc
    AND FMD_SEM_VAL !='SYSORDSQOFF';
  if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_errlog( c_ServiceName, "S31470",SQLMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }
  if(SQLCODE == NO_DATA_FOUND)
  {

    EXEC SQL
      INSERT INTO FMD_FO_MTM_DTLS
      (
         FMD_CLM_MTCH_ACCNT,
        FMD_XCHNG_CD,
        FMD_PRDCT_TYP,
        FMD_INDSTK,
        FMD_UNDRLYNG,
        FMD_EXPRY_DT,
        FMD_EXER_TYP,
        FMD_OPT_TYP,
        FMD_STRK_PRC,
        FMD_ORDR_FLW,
        FMD_CNTRCT_TAG,
        FMD_CNTRCT_DESC,
        FMD_STATUS,
        FMD_LMT_RT,
        FMD_TRGR_RT,
        FMD_SEQUENCE,
        FMD_SEM_VAL,
        FMD_MIN_TRGR_RT,
				FMD_PSTN_TYP,			/** ver 3.2 **/
        FMD_TRG_SYSTM         /** ver 3.3 **/
      )
      VALUES
      (
        :ptr_st_pstn_actn->c_cln_mtch_accnt,
        :ptr_st_pstn_actn->c_xchng_cd,
        :ptr_st_pstn_actn->c_prd_typ,
        :ptr_st_pstn_actn->c_ctgry_indstk,
        :ptr_st_pstn_actn->c_undrlyng,
        :ptr_st_pstn_actn->c_expry_dt,
        :ptr_st_pstn_actn->c_exrc_typ,
        :ptr_st_pstn_actn->c_opt_typ,
        :ptr_st_pstn_actn->l_strike_prc,
        :c_pos_flw,
        '*',
        :c_sem_map_vl,
        'N',
        :d_wag_price,
        :l_trg_prc,
        FO_AUTO_MTM_SEQ.NEXTVAL,
        :c_sem_map_vl,
        :d_ers_trg_prc,
				'N',									/** ver 3.2 **/
        sysdate
      );

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31475",SQLMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
  }

  EXEC SQL
     INSERT INTO FTP_FO_TRGPRC_POSDTLS
          (FTP_CLM_MTCH_ACCNT,
           FTP_XCHNG_CD      ,
           FTP_PRDCT_TYP     ,
           FTP_INDSTK        ,
           FTP_UNDRLYNG      ,
           FTP_EXPRY_DT      ,
           FTP_STRK_PRC      ,
           FTP_EXER_TYP      ,
           FTP_OPT_TYP       ,
           FTP_IBUY_QTY      ,
           FTP_IBUY_ORD_VAL  ,
           FTP_ISELL_QTY     ,
           FTP_ISELL_ORD_VAL ,
           FTP_EXBUY_QTY     ,
           FTP_EXBUY_ORD_VAL ,
           FTP_EXSELL_QTY    ,
           FTP_EXSELL_ORD_VAL ,
           FTP_BUY_EXCTD_QTY  ,
           FTP_SELL_EXCTD_QTY ,
           FTP_OPNPSTN_FLW    ,
           FTP_OPNPSTN_QTY    ,
           FTP_OPNPSTN_VAL    ,
           FTP_UORDR_MRGN     ,
           FTP_UEXCTD_MRGN    , 
           FTP_TRGR_RT        ,  /** Ver 2.9 **/
           FTP_MIN_TRGR_RT    ,   /** Ver 2.9 **/
           FTP_TRG_DT            /** Ver 2.9 **/
          )
          ( SELECT
            FOP_CLM_MTCH_ACCNT,
            FOP_XCHNG_CD,
            FOP_PRDCT_TYP,
            FOP_INDSTK,
            FOP_UNDRLYNG,
            FOP_EXPRY_DT,
            FOP_STRK_PRC,
            FOP_EXER_TYP,
            FOP_OPT_TYP,
            FOP_IBUY_QTY,
            FOP_IBUY_ORD_VAL,
            FOP_ISELL_QTY,
            FOP_ISELL_ORD_VAL,
            FOP_EXBUY_QTY,
            FOP_EXBUY_ORD_VAL,
            FOP_EXSELL_QTY,
            FOP_EXSELL_ORD_VAL,
            FOP_BUY_EXCTD_QTY,
            FOP_SELL_EXCTD_QTY,
            FOP_OPNPSTN_FLW,
            FOP_OPNPSTN_QTY,
            FOP_OPNPSTN_VAL,
            FOP_UORDR_MRGN,
            FOP_UEXCTD_MRGN,
            FOP_TRGGR_PRC,    /** Ver 2.9 **/
            FOP_MIN_TRG_PRC,   /** Ver 2.9 **/
            SYSDATE            /** Ver 2.9 **/
            FROM FOP_FO_OPTIONS_PSTN
            WHERE FOP_CLM_MTCH_ACCNT =:ptr_st_pstn_actn->c_cln_mtch_accnt
              AND FOP_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
              AND FOP_PRDCT_TYP =:ptr_st_pstn_actn->c_prd_typ
              AND FOP_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
              AND FOP_EXPRY_DT = to_date(:ptr_st_pstn_actn->c_expry_dt,'dd-Mon-yyyy')
              AND FOP_STRK_PRC = :ptr_st_pstn_actn->l_strike_prc
              AND FOP_OPT_TYP  = :ptr_st_pstn_actn->c_opt_typ
          );
  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31480",SQLMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

  return SUCCESS;
}
/** Ver 2.6 Ends **/
   
