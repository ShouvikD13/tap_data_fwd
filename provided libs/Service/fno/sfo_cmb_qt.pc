
/*  Program           : SFO_CMB_QT                                            */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_STRK_PRC                                          */
/*                                                                            */
/*  Output            : FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_LST_TRD_PRC                                       */
/*                      FFO_LST_TRD_TM                                        */
/*                      FFO_LST_TRD_QTY                                       */
/*                      FFO_BST_BID_PRC                                       */
/*                      FFO_BST_BID_QTY                                       */
/*                      FFO_BST_OFFR_PRC                                      */
/*                      FFO_BST_OFFR_QTY                                      */
/*                      FFO_CLS_PRC                                           */
/*                      FFO_OPN_PRC                                           */
/*                      FFO_HGH_PRC                                           */
/*                      FFO_LOW_PRC                                           */
/*                      FFO_PRVS_CLS_PRC                                      */
/*                      FFO_CHNG_PRVS_CLS                                     */
/*                      FFO_PRC_INDCTR                                        */
/*                      FFO_HGH_PRC_RNG                                       */
/*                      FFO_LOW_PRC_RNG                                       */
/*                      FFO_AVRG_TRD_PRC                                      */
/*                      FFO_TOT_QTY_TRDD                                      */
/*                      FFO_TOT_VAL_TRDD                                      */
/*                      FFO_BASE_PRC                                          */
/*                      FFO_RQST_TYP                                          */
/*                      FML_QUOTE                                             */
/*                      FML_QUOTE_TIME                                        */
/*                      FFO_CRNT_OI                                           */
/*                      FFO_CHNG_OI                                           */
/*                      FFO_OI_HIGH                                           */
/*                      FFO_OI_LOW                                            */
/*                      FFO_OI_INDCTR                                         */
/*                                                                            */
/*  Description       : This service will get brief quotes of a contract      */
/*                      viz. last traded qty., last traded price, last        */
/*                      traded time, best bid qty and price, best offer       */
/*                      qty and price and price information like open,        */
/*                      high, low, close price, previous close price,         */
/*                      net change from previous close price, high price      */
/*                      and low price range alongwith the last traded price,  */
/*                      base price and last traded time of the Underlying     */
/*                                                                            */
/******************************************************************************/
/* 1.0  -  New release             S.Balamurugan         07-02-2002           */
/* 1.1	-	 IBM MIGRATION CHANGES   Sandeep Patil         03-03-2008						*/
/* 1.2	-	 CRCSN28153              Indrajit Bhadange     29-05-2009           */  
/*         For open position page update                                      */
/* 1.3	-	 CRCSN28153              Venture M             19-05-2010           */  
/* 1.4	-	 Correct Nifty change 																							*/	
/*	  		 from Prev close				 Shailesh H            15-06-2011           */  
/* 1.5  -  View Change for variable total_val_traed                           */
/*         in exchange             Sachin Birje          12-Feb-2014          */
/* 1.6  -  To display OptionPLUS link for enabled contracts only					    */
/*																	Navina D.            20-Feb-2014          */
/* 1.7	-	 Removing service call of SFO_GET_QUOTE	Vishnu	28-Feb-2014					*/
/* 1.8  -  CR_ISEC14_48665         Mahesh Shinde         28-Feb-2014          */
/* 1.9  -  NNF:Introduction of Trade execution range     03-Dec-2014          */
/*         brdcast data            Navina D.                                  */
/* VQC  -  VERSION QUALITY CONTROL  Vishal B.            06-Oct-2016          */
/* 2.0  -  Replaced parameter close price to ATS close price Varadraj G       **
           24-08-2018                                                         */
/* 2.1  -  ROLLOVER WITH SPREAD                                               */
/* 2.2  -  FNO Layout Changes on Mobile  Sachin Birje                         */
/* 2.3  -  Prev Spot for Rate refresh  Naveena          05-Jan-2022           */
/* 2.4  -  Previous price, Net change and % change display on site Sachin     */
/*         24-Feb-2022                                                        */
/* 2.5  -  Option Chain ,Enabling fields as Optional (RAVI M)   03-Aug-2022   */
/* 2.6  -  Option Chain ,Dynamic Chng OI & ltt as Null for not traded contracts (Prashant & Sagar)  22-Sep-2022   */
/* 2.7  -  Minor change to change OI (Ravi Malla) 05-Dec-2022		      */  
/* 2.8  -  CR-ISEC10-162006 bug fix - Mahesh Shinde 05-Jan-2023								*/
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fml_def.h>
#include <fo.h>
#include <fo_view_def.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>			/*** Ver 1.1 ***/
#include <fml_rout.h>				/*** Ver 1.1 ***/
#include <fn_read_debug_lvl.h>			/*** Ver 1.1 ***/
#include <fo_get_records.h>			/*** Ver 1.7 ***/
#define INDALC 500
#define SHRALC 200

/******* Added fun in ver 2.0 *************/
int fn_get_qt_ats( char   *c_ServiceName,
                   struct vw_contract   *ptr_st_contract,
                   struct vw_cntrct_qt  *ptr_st_cntrct_qt,
                   char   *c_err_msg,
                   long *l_ats_cls_prc,
                   long   *l_net_chng,
                   long   *l_net_percentage_chng,
                   char   *c_ftq_flg,
									 char *c_tot_buy_qt, /** Ver 2.5 **/
									 char *c_tot_sel_qt, /** Ver 2.5 **/
                   long *l_ats_cls_prc2 /*** Ver 2.8 ***/
                 );
/****** Ver 2.0 Ends **********************/
/****** Ver 2.1 Starts ********************/

int fn_get_qt_spread( char   *c_ServiceName,
                   		struct vw_contract   *ptr_st_contract,
                   		struct vw_cntrct_qt  *ptr_st_cntrct_qt,
                   		char   *c_err_msg,
                   		long 	 *l_ats_cls_prc,
                   		long   *l_net_chng,
                   		long   *l_net_percentage_chng,
                   		char   *c_ftq_flg,
											char   *c_expry_date2,
                   		long *l_ats_cls_prc2 /*** Ver 2.8 ***/
                 		);

/****** Ver 2.1 Ends **********************/

void SFO_CMB_QT( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

	char  c_ServiceName[33];
  varchar  c_err_msg[256];   /** Variable type char changed to varchar in VQC **/

	int i_returncode  = 0;     /** Initialized in Ver VQC **/

	/**  Following variable is commented in VQC as it is not get used in latest version **
    
	int i_ip_len;
	int i_op_len;
	char  c_usr_id[9];
	long    l_session_id;

	***/

	double d_quote = 0;      /** Initialized in Ver VQC **/

	/*** Following variable is commented in VQC as it is not get used in latest version **

	double d_base_prc;  ***/

	char c_quote_tm[23];
	char c_eq_xchng_cd[4];
	char c_expry_dt2[23] = "\0";  /**** Ver 2.1 ****/
	
	/******************************************************************************/

	double d_bse_ltq_rt = 0;      /* ver 1.3 */  /** Initialized in Ver VQC **/
  double d_bse_rt_clsprc = 0;   /* ver 1.3 */  /** Initialized in Ver VQC **/ 
  double d_nifty_ltq_rt = 0;    /* ver 1.3 */  /** Initialized in Ver VQC **/
  double d_nifty_rt_clsprc = 0; /* ver 1.3 */  /** Initialized in Ver VQC **/

	double d_nifty_prev_cls = 0.0; /*** Ver 2.3 ***/
	double d_bse_prev_cls = 0.0; /*** Ver 2.3 ***/
	
  /******************************************************************************/

  long l_ats_cls_prc2 = 0;  /*** Ver 2.8 ***/
  /********** Added in ver 2.0************************************/
  long l_ats_cls_prc = 0;
  long l_net_chng = 0;
  long l_net_percentage_chng = 0;
  char c_ftq_flg = '\0';
  /******************** Ver 2.0 Ends *****************************/

	/** Ver 2.5 Start**/
	char c_tot_buy_qt[25];
	char c_tot_sel_qt[25];
	/** Ver 2.5 End **/

  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_contract st_contract;
    struct vw_contract st_tmp_contract;
    struct vw_cntrct_qt st_cntrct_qt;
	  varchar c_expiry_dt [ LEN_DATE ];
		varchar c_exp_dt [ LEN_DATE ];
	EXEC SQL END DECLARE SECTION;

  int i_cnt=0;

	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );

	INITDBGLVL(c_ServiceName);			/*** Ver 1.1 ***/

	MEMSET(c_err_msg);      /** Added in Ver VQC as DataType of c_err_msg changed from char to varchar **/

	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *)&st_contract,
                           "vw_contract" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg.arr  );  /*  DataType of c_err_msg changed from char to varchar in VQC */
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /* DataType of c_err_msg changed from char to varchar in VQC */
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Ver 2.1 Started ***/

	if( st_contract.c_prd_typ == 'S' )
	{
  	if(Fget32( ptr_fml_Ibuf,FFO_TO_DT,0,(char*)c_expry_dt2,0) == -1)
  	{
      fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

  	if(DEBUG_MSG_LVL_3)
  	{
    	fn_userlog(c_ServiceName,"c_expry_dt2 :%s:",c_expry_dt2);
  	}
	}

  /*** Ver 2.1 Ended ***/

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_contract.c_rout_crt );

	if (DEBUG_MSG_LVL_3)			 /*** Ver 1.1 ***/ 
  {
  	fn_userlog ( c_ServiceName, "c_xchng_cd**:%s:", st_contract.c_xchng_cd );
  	fn_userlog ( c_ServiceName, "c_prd_typ   :%c:", st_contract.c_prd_typ );
  	fn_userlog ( c_ServiceName, "c_undrlyng  :%s:", st_contract.c_undrlyng );
  	fn_userlog ( c_ServiceName, "c_expiry_dt MRK :%s:", st_contract.c_expry_dt );
  	fn_userlog ( c_ServiceName, "c_exrc_typ  :%c:", st_contract.c_exrc_typ );
  	fn_userlog ( c_ServiceName, "c_opt_typ   :%c:", st_contract.c_opt_typ );
  	fn_userlog ( c_ServiceName, "l_strike_prc:%ld:", st_contract.l_strike_prc );  
	}

	/** Commented in Ver 1.7 **
	fn_cpy_ddr(st_contract.c_rout_crt);
	i_ip_len = sizeof(struct vw_contract);
	i_op_len = sizeof(struct vw_cntrct_qt);

	i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_contract,
                                &st_cntrct_qt,
                                "vw_contract",
                                "vw_cntrct_qt",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_GET_QT" );
  if ( i_returncode != SUCC_BFR  )
  {
		fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	**/

	/** Ver 1.7 Starts **/

/******** commented in ver 2.0 ****************************************************************************
	i_returncode = fn_get_qt(c_ServiceName,
													&st_contract,
													&st_cntrct_qt,
													c_err_msg.arr);   * DataType of c_err_msg changed from char to varchar in VQC *
 *********** ver 2.0 comment ends *************************************************************************/
 fn_userlog(c_ServiceName, "c flag before function is :%c:",c_ftq_flg);/** Testing **/

	/*** Ver 2.1 Started ***/


	/*** Ver 2.5 Begin ***/

		MEMSET(c_expiry_dt);
		rtrim ( st_contract.c_expry_dt );
		strcpy ( ( char * )c_expiry_dt.arr, st_contract.c_expry_dt );
		SETLEN ( c_expiry_dt );

		EXEC SQL DECLARE cur_quote CURSOR FOR 
		SELECT FTQ_XCHNG_CD,
					 FTQ_PRDCT_TYP,
					 FTQ_UNDRLYNG,
					 FTQ_EXER_TYP,
					 FTQ_EXPRY_DT,
					 FTQ_OPT_TYP,
					 FTQ_STRK_PRC
		FROM
					FTQ_FO_TRD_QT
		WHERE
					FTQ_XCHNG_CD  = :st_contract.c_xchng_cd
					AND FTQ_PRDCT_TYP = decode(:st_contract.c_prd_typ,'P','F','U','F','I','O',:st_contract.c_prd_typ) 
					AND FTQ_UNDRLYNG  = :st_contract.c_undrlyng 
					AND FTQ_EXER_TYP  = :st_contract.c_exrc_typ  
					AND FTQ_EXPRY_DT  = NVL(to_date (:c_expiry_dt,'dd-Mon-yyyy' ),FTQ_EXPRY_DT) 
					AND FTQ_OPT_TYP   like DECODE(:st_contract.c_opt_typ,'*',FTQ_OPT_TYP,:st_contract.c_opt_typ) 
				  AND FTQ_STRK_PRC  like DECODE(:st_contract.l_strike_prc,0,FTQ_STRK_PRC,:st_contract.l_strike_prc)
		ORDER BY FTQ_UNDRLYNG,FTQ_EXPRY_DT,FTQ_OPT_TYP,FTQ_STRK_PRC;

		if ( SQLCODE != 0 )
		{
						fn_userlog(c_ServiceName,"Failed To declare cur_quote.");
						fn_errlog( c_ServiceName, "L31006", SQLMSG,c_err_msg.arr  );
      			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    				tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}
			

		EXEC SQL 
					SELECT 
							COUNT(*) 
					INTO 
							:i_cnt
					FROM 
							FTQ_FO_TRD_QT 
					WHERE 
						FTQ_XCHNG_CD  = :st_contract.c_xchng_cd
						AND FTQ_PRDCT_TYP = decode(:st_contract.c_prd_typ,'P','F','U','F','I','O',:st_contract.c_prd_typ) 
						AND FTQ_UNDRLYNG  = :st_contract.c_undrlyng 
						AND FTQ_EXER_TYP  = :st_contract.c_exrc_typ  
						AND FTQ_EXPRY_DT  = NVL(to_date (:c_expiry_dt,'dd-Mon-yyyy' ),FTQ_EXPRY_DT) 
						AND FTQ_OPT_TYP   like DECODE(:st_contract.c_opt_typ,'*',FTQ_OPT_TYP,:st_contract.c_opt_typ) 
				  	AND FTQ_STRK_PRC  like DECODE(:st_contract.l_strike_prc,0,FTQ_STRK_PRC,:st_contract.l_strike_prc);

		if ( SQLCODE != 0 )
		{
						fn_userlog(c_ServiceName," Error while fetching indexes");
						fn_errlog( c_ServiceName, "L31010",SQLMSG, c_err_msg.arr  );
      			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    				tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}	

		
		/***
		if ( c_ind == 'I' )
		{
			ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*INDALC );
		}
		else
		{
			ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*SHRALC );
		}***/

  	/* fn_userlog ( c_ServiceName, "i_cnt  :%d:", i_cnt );*/

		if(i_cnt == 0)
		{
			Finit32(ptr_fml_Ibuf, Fsizeof32(ptr_fml_Ibuf));
			fn_errlog( c_ServiceName, "S31020", "Invalid Contract", c_err_msg.arr );
			strcpy(c_err_msg.arr,"Invalid Contract");
			Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );  
			tpreturn(TPSUCCESS,ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
  	}
		
		/* ver 2.6 start: moved down from above if clause */
		ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*i_cnt);
		if ( ptr_fml_Obuf == NULL )
		{
 		 	fn_errlog( c_ServiceName, "S31025", TPMSG, c_err_msg.arr  );
 		 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
 		 	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		EXEC SQL OPEN cur_quote;
		if ( SQLCODE != 0 )
		{
			fn_userlog(c_ServiceName," Failed to Open cur_quote");
			fn_errlog( c_ServiceName, "L31007",SQLMSG, c_err_msg.arr  );
			tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}	/* ver 2.6 end: moved down from above if clause */	

	while(i_cnt)
	{
			MEMSET(st_tmp_contract);
			MEMSET(c_exp_dt);
			MEMSET(st_cntrct_qt);
			memset ( &st_tmp_contract, 0, sizeof ( struct vw_contract ) );
			memset ( &st_cntrct_qt, 0, sizeof ( struct vw_cntrct_qt ) );
			l_ats_cls_prc=0;
			l_ats_cls_prc2=0;
			l_net_chng=0;
			l_net_percentage_chng=0;
			c_ftq_flg='\0';

			EXEC SQL FETCH cur_quote	
			INTO
					 :st_tmp_contract.c_xchng_cd,
					 :st_tmp_contract.c_prd_typ,	
					 :st_tmp_contract.c_undrlyng,
					 :st_tmp_contract.c_exrc_typ,
					 :c_exp_dt,
					 :st_tmp_contract.c_opt_typ,
					 :st_tmp_contract.l_strike_prc;

			if(SQLCODE != 0)
			{
					if(SQLCODE == NO_DATA_FOUND)
					{
						EXEC SQL CLOSE cur_quote;
  					fn_userlog ( c_ServiceName, "Total Row count:%d:", sqlca.sqlerrd[2] );
						fn_userlog(c_ServiceName,"No more contract found in cursor cur_quote");
						break;
  				}
					EXEC SQL CLOSE cur_quote;
					fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg.arr );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    			tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
			}

			SETNULL(c_exp_dt);
			strcpy ( st_tmp_contract.c_expry_dt,(char *)c_exp_dt.arr);

	/*** Ver 2.5 End ***/

	if( st_contract.c_prd_typ == 'S' )
	{
   i_returncode = fn_get_qt_spread(c_ServiceName,
                                	 &st_contract,
                                	 &st_cntrct_qt,
                                	 c_err_msg.arr,
                                	 &l_ats_cls_prc,
                                	 &l_net_chng,
                                	 &l_net_percentage_chng,
                                	 &c_ftq_flg,
                                	 c_expry_dt2,   
                                	 &l_ats_cls_prc2 /** Ver 2.8 **/
                               	  );
			
	}
	else
	{
	 /*** Ver 2.1 Ends ***/
/***** Fun added in Ver 2.0 *************/
   i_returncode = fn_get_qt_ats(c_ServiceName,
                                /* &st_contract, Commented in ver 2.5 */
																&st_tmp_contract,
                                &st_cntrct_qt,
                                c_err_msg.arr,
                                &l_ats_cls_prc,
                                &l_net_chng,
                                &l_net_percentage_chng,
                                &c_ftq_flg,
																c_tot_buy_qt,		/** Ver 2.5 **/
															  c_tot_sel_qt,		/** Ver 2.5 **/
                                &l_ats_cls_prc2  /** Ver 2.8 **/
                               ); /**** Ver 2.0 fun ends ****/

	} /** else end *** Ver 2.1 **/
		
	if ( i_returncode != SUCC_BFR  )
  {
    fn_errlog( c_ServiceName, "S31035", LIBMSG, c_err_msg.arr );  /* DataType of c_err_msg changed from char to varchar in VQC */
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );  /* DataType of c_err_msg changed from char to varchar in VQC */
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	/** Ver 1.7 Ends **/

	if ( strcmp ( st_cntrct_qt.c_xchng_cd, "NFO" ) == 0 )
	{
		strcpy ( c_eq_xchng_cd, "NSE" );
	}
	else
	{
		strcpy ( c_eq_xchng_cd, "BSE" );
	}


	rtrim( c_eq_xchng_cd );
	rtrim( st_cntrct_qt.c_undrlyng );

	/*** Commented in VQC as it is get used in latest version **

	strcpy( c_usr_id, "system" );
	l_session_id=0;

	***/

	/* Commented in Ver 1.7 **

	i_returncode = fn_call_svc_fml( c_ServiceName,
                                  c_err_msg,
                                  "SVC_GET_QUOTE",
                                  0,
                                  5,
                                  3,
                    FML_USR_ID, (char *)c_usr_id,
                    FML_SSSN_ID, (char *)&l_session_id,
                    FML_STCK_CD, (char *)st_cntrct_qt.c_undrlyng,
                    FML_XCHNG_CD, (char *)c_eq_xchng_cd,
										FFO_ROUT_CRT, st_contract.c_rout_crt,
                    FML_QUOTE, ( char *)&d_quote, NULL,
                    FML_GMS_AMNT_ALLCTD, (char *)&d_base_prc, NULL,
                    FML_QUOTE_TIME, (char *)c_quote_tm, NULL );

  if ( i_returncode != SUCC_BFR )
  {
    fn_errlog( c_ServiceName, "S31040", LIBMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }


	**/

	/** Ver 1.7 Starts **/
	
	i_returncode = fn_get_spotprc(c_ServiceName,
															  st_cntrct_qt.c_undrlyng,
																c_eq_xchng_cd,
																&d_quote,
																c_quote_tm,
																c_err_msg.arr    /* DataType of c_err_msg changed from char to varchar in VQC */
																);
				
	
  if ( i_returncode != SUCC_BFR )
  {
    fn_errlog( c_ServiceName, "S31045", LIBMSG, c_err_msg.arr ); /* DataType of c_err_msg changed from char to varchar in VQC */
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );    /* DataType of c_err_msg changed from char to varchar in VQC */
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }


	if(DEBUG_MSG_LVL_3)
  {
		fn_userlog(c_ServiceName," Quote price :%lf:",d_quote);
		fn_userlog(c_ServiceName," Quote Time  :%s:",c_quote_tm);
	}

	/**** Added in ver 1.8 ****/

  if ( strcmp(st_cntrct_qt.c_undrlyng,"INDVIX") == 0 )
  {
    d_quote = d_quote / 100;
  }

  /**** Added in ver 1.8 ****/

	/** Ver 1.7 Ends **/
/******************************************************************************/
  /*  Venture M - added SENSEX and NIFTY to Quote display page ver 1.3 starts */
	/*  Single query added for optimization as huge hits expected to getQuote   */
		
    EXEC SQL
			SELECT NIFTY_LTP , NIFTY_LTP_DIFF , NIFTY_PREV_CLS,BSE_LTP , BSE_LTP_DIFF,BSE_PREV_CLS
			INTO :d_nifty_ltq_rt,:d_nifty_rt_clsprc,:d_nifty_prev_cls, :d_bse_ltq_rt,:d_bse_rt_clsprc,:d_bse_prev_cls
			FROM 

			/**Commented in Ver 1.4 
			(SELECT NVL(LTQ_RT,0.0) AS NIFTY_LTP, (LTQ_RT - LTQ_CLS_PRC) AS NIFTY_LTP_DIFF 
			FROM   LTQ_TRD_QT WHERE  LTQ_STCK_CD = 'NIFTY' ) temp1 , 
			(SELECT NVL(LTQ_RT,0.0) AS BSE_LTP , (LTQ_RT - LTQ_CLS_PRC) AS BSE_LTP_DIFF 
			FROM   LTQ_TRD_QT WHERE  LTQ_STCK_CD = 'BSESEN'  ) temp2;
			****/

			/**Added in Ver 1.4 **/ /* PREV_CLS added in Ver 2.3 ***/
			(SELECT NVL(LTQ_RT,0.0) AS NIFTY_LTP, (LTQ_RT - LTQ_PREV_CLS_PRC) AS NIFTY_LTP_DIFF , NVL(LTQ_PREV_CLS_PRC,0.0) AS NIFTY_PREV_CLS
			FROM   LTQ_TRD_QT WHERE  LTQ_STCK_CD = 'NIFTY' ) temp1 , 
			(SELECT NVL(LTQ_RT,0.0) AS BSE_LTP , (LTQ_RT - LTQ_PREV_CLS_PRC) AS BSE_LTP_DIFF, NVL(LTQ_PREV_CLS_PRC,0.0) AS BSE_PREV_CLS 
			FROM   LTQ_TRD_QT WHERE  LTQ_STCK_CD = 'BSESEN'  ) temp2;

    if(SQLCODE != 0)
    {
      errlog(c_ServiceName,"S31050",SQLMSG,(char *)DEF_USR,DEF_SSSN, c_err_msg.arr);  /* DataType of c_err_msg changed from char to varchar in VQC */
      tpabort(0);
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
    }
 if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"1.3 BSE ltq_rt   :%lf:",d_bse_ltq_rt);
    fn_userlog(c_ServiceName,"1.3 diff in bse rt n cls prc   :%lf:",d_bse_rt_clsprc);
    fn_userlog(c_ServiceName,"1.3 NIFTY ltq_rt :%lf",d_nifty_ltq_rt);
    fn_userlog(c_ServiceName,"1.3 diff in NIFTY rt n cls prc  :%lf:",d_nifty_rt_clsprc);
		fn_userlog(c_ServiceName,"1.3 NIFTY ltq prev cls :%lf",d_nifty_prev_cls); /*** Ver 2.3 ***/
		fn_userlog(c_ServiceName,"1.3 BSE ltq prev cls :%lf",d_bse_prev_cls); /*** Ver 2.3 ***/
	}
    /* ver 1.3 ends */
/******************************************************************************/

	/*ptr_fml_Obuf=NULL;*/
	i_returncode = fn_pack_vartofml( c_ServiceName,
                                   c_err_msg.arr,  /* DataType of c_err_msg changed from char to varchar in VQC */
                                   &ptr_fml_Obuf,
                                   46,      /*** Ver 1.5 , changed from 41 to 42 **/ /*** Ver 1.6 Changed from 42 to 43 ***/ 
																						/*** Ver 1.9 Changed from 43 to 45 ***/ /** VQC changed from 45 to 32 **//** Ver 2.1 changed from 35 to 36 **/ /** Ver 2.2 changed to 37 from 36 **/ /*** changed from 37 to 39 in Ver 2.3 ***/ /* Ver 2.4 40 *//*V2.8 1 FML+ */
               FFO_XCHNG_CD, ( char * )st_cntrct_qt.c_xchng_cd,
               FFO_PRDCT_TYP, ( char * )&st_cntrct_qt.c_prd_typ,
               FFO_UNDRLYNG, ( char * )st_cntrct_qt.c_undrlyng,
               FFO_EXPRY_DT, ( char * )st_cntrct_qt.c_expry_dt,
							 FFO_TO_DT, ( char * )c_expry_dt2,                  /*** added in Ver 2.1 ***/
               FFO_EXER_TYP, ( char * )&st_cntrct_qt.c_exrc_typ,
               FFO_OPT_TYP, ( char * )&st_cntrct_qt.c_opt_typ,
               FFO_STRK_PRC, ( char * )&st_cntrct_qt.l_strike_prc,
               FFO_CTGRY_INDSTK, ( char * )&st_cntrct_qt.c_ctgry_indstk,
               FFO_LST_TRD_PRC, ( char * )&st_cntrct_qt.l_lst_trdd_prc,
               FFO_LST_TRD_TM, ( char * )st_cntrct_qt.c_lst_trdd_time,

               /*** Commented in VQC *** 
 
							 FFO_LST_TRD_QTY, ( char * )&st_cntrct_qt.l_lst_trdd_qty, ***/
							 FFO_LST_TRD_QTY, ( char * )&st_cntrct_qt.l_lst_trdd_qty, /*** Ver 2.5 ***/

               FFO_BST_BID_PRC, ( char * )&st_cntrct_qt.l_bst_bid_prc,
               FFO_BST_BID_QTY, ( char * )&st_cntrct_qt.l_bst_bid_qty,
               FFO_BST_OFFR_PRC, ( char * )&st_cntrct_qt.l_bst_offr_prc,
               FFO_BST_OFFR_QTY, ( char * )&st_cntrct_qt.l_bst_offr_qty,
               FFO_CLS_PRC, ( char * )&st_cntrct_qt.l_close_prc, 
               FFO_OPN_PRC, ( char * )&st_cntrct_qt.l_open_prc,
               FFO_HGH_PRC, ( char * )&st_cntrct_qt.l_high_prc,
               FFO_LOW_PRC, ( char * )&st_cntrct_qt.l_low_prc,

               /*** Commented in VQC *** 
	
							 FFO_PRVS_CLS_PRC, ( char * )&st_cntrct_qt.l_prev_close_prc, ***/

               FFO_CHNG_PRVS_CLS, ( char * )&st_cntrct_qt.l_chng_prvs_close_prc,
               FFO_PRC_INDCTR, ( char * )&st_cntrct_qt.c_indctr,
               FFO_HGH_PRC_RNG, ( char * )&st_cntrct_qt.l_high_prc_rng,
               FFO_LOW_PRC_RNG, ( char * )&st_cntrct_qt.l_low_prc_rng,

               /*** Commented in VQC ***
 
               FFO_AVRG_TRD_PRC, ( char * )&st_cntrct_qt.l_avg_trdd_prc, ***/

               FFO_TOT_QTY_TRDD, ( char * )&st_cntrct_qt.l_tot_qty_trdd,

							 /*** Commented in VQC ***
	
               FFO_TOT_VAL_TRDD, ( char * )&st_cntrct_qt.l_tot_val_trdd,
               FFO_BASE_PRC, ( char * )&st_cntrct_qt.l_base_prc,   ***/ /** 2.5 uncommented for additional fields start **/
               FFO_CRNT_OI, ( char * )&st_cntrct_qt.d_crnt_oi,
               FFO_CHNG_OI, ( char * )&st_cntrct_qt.d_chng_oi, /** 2.5 uncommented for additional fields end **/
              /** VQC  **
							 FFO_OI_HIGH, ( char * )&st_cntrct_qt.d_oi_high,
               FFO_OI_LOW, ( char * )&st_cntrct_qt.d_oi_low,
							 FFO_OI_INDCTR,     ( char * )&st_cntrct_qt.c_oi_indctr,
               FFO_RQST_TYP, ( char * )&st_cntrct_qt.c_rqst_typ,

							 ************/
			
							 FML_QUOTE, ( char * )&d_quote,

							 /*** Commented in VQC ***

							 FML_QUOTE_TIME, ( char * )c_quote_tm, ***/
 
							 FFO_MIN_LOT_QTY, ( char * )&st_cntrct_qt.l_min_lot_qty ,
							 FFO_EFF_CLS_PRC, (char *)&d_bse_ltq_rt,				 /* 1.3 */
							 FFO_EFF_LMT_RT, (char *)&d_bse_rt_clsprc,			 /* 1.3 */
							 FFO_EFF_EXCTD_RT, (char *)&d_nifty_ltq_rt,			 /* 1.3 */
							 FFO_DLVRY_MRGN, (char *)&d_nifty_rt_clsprc,			 /* 1.3 */
		
							 /*** Commented in VQC ***
	
               FFO_AMOUNT, ( char * )&st_cntrct_qt.d_tot_val_trdd, ** Ver 1.5 ** ***/
					
							 FFO_CA_LVL, ( char * )&st_cntrct_qt.l_ca_lvl,  /*** Ver 1.6 ***/
							 FFO_HGH_INDX_VAL, ( char * )&st_cntrct_qt.l_eba_cntrct_id,		/*** Ver 1.9 ***/
							 FFO_LOW_INDX_VAL, ( char * )&st_cntrct_qt.l_tot_val_trdd,		/*** Ver 1.9 ***/
               FFO_CLS_INDX_VAL,( char * )&l_net_chng,            /**** Ver 2.0 ****/
               FFO_INDX_VAL,( char * )&l_net_percentage_chng,     /**** Ver 2.0 ****/
               FFO_INDX_INDCTR,( char * )&c_ftq_flg,               /**** Ver 2.0 ****/
               FFO_AVRG_TRD_PRC, ( char * )&st_cntrct_qt.l_avg_trdd_prc,  /** Ver 2.2 **/      
							 FFO_C_MTM_OPN_VAL, (char *)&d_nifty_prev_cls, /*** Ver 2.3 ***/
							 FFO_U_MTM_OPN_VAL, (char *)&d_bse_prev_cls, /*** Ver 2.3 ***/
               FFO_CUR_MKT_PRC, (char *)&l_ats_cls_prc,     /** Ver 2.4 **/
							 FFO_STRIKE1,(char *)c_tot_buy_qt, /** Ver 2.5 **/
							 FFO_STRIKE2,(char *)c_tot_sel_qt, /** Ver 2.5 **/
               FFO_PRVS_CLS_PRC, (char *)&l_ats_cls_prc2     /** Ver 2.8 **/
							 );  /* Ver 1.2 */

  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31055", LIBMSG, c_err_msg.arr ); /* DataType of c_err_msg changed from char to varchar in VQC */
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /* DataType of c_err_msg changed from char to varchar in VQC */
    tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }	


	} /* While end */ /* Ver 2.5 */

	tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
}
/*************** Added in ver 2.0 ************************/
int fn_get_qt_ats( char   *c_ServiceName,    
                   struct vw_contract   *ptr_st_contract,
                   struct vw_cntrct_qt  *ptr_st_cntrct_qt,
                   char   *c_err_msg,
                   long   *l_ats_cls_prc, 
                   long   *l_net_chng,
                   long   *l_net_percentage_chng,
                   char   *c_ftq_flg,
									 char 	*c_tot_buy_qt, /** Ver 2.5 **/
									 char 	*c_tot_sel_qt, /** Ver 2.5 **/
                   long   *l_ats_cls_prc2 /** Ver 2.8 **/ 
                 )
{

  varchar c_expiry_dt [ LEN_DATE ];
  varchar c_exp_dt [ LEN_DATE ];
  varchar c_lst_trd_dt [ LEN_DATE ];
  short i_trd_tm;

  long l_ats_cls_prc_new=0;
  long l_ats_cls_prc_new2=0;  /** Ver 2.8 **/
  long l_net_chng_new=0;
  long l_net_percentage_chng_new=0;
  char c_ftq_flg_new='\0';
	/** Ver 2.5 start **/
	char c_tot_buy_qt_new[25];
	char c_tot_sel_qt_new[25];
	/** Ver 2.5 end **/

	if(DEBUG_MSG_LVL_3)  
	{
		fn_userlog(c_ServiceName,"Inside fn_get_qt_ats Function.");
	}
		fn_userlog(c_ServiceName,"Inside fn_get_qt_ats Function.");

  rtrim ( ptr_st_contract->c_expry_dt );
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_contract->c_expry_dt );
 	SETLEN ( c_expiry_dt );

	if(DEBUG_MSG_LVL_5)
	{
		fn_userlog(c_ServiceName,"expiry date:%s:",ptr_st_contract->c_expry_dt);
		fn_userlog(c_ServiceName,"XCHNG CODE:%s:",ptr_st_contract->c_xchng_cd);
		fn_userlog(c_ServiceName,"product type:%c:",ptr_st_contract->c_prd_typ);
		fn_userlog(c_ServiceName,"Underlyng :%s:",ptr_st_contract->c_undrlyng);
		fn_userlog(c_ServiceName,"Exercise type:%c:",ptr_st_contract->c_exrc_typ);
		fn_userlog(c_ServiceName,"Option type:%c:",ptr_st_contract->c_opt_typ);
		fn_userlog(c_ServiceName,"Strike Price:%ld:",ptr_st_contract->l_strike_prc);
	}	

	EXEC SQL
		SELECT	FTQ_XCHNG_CD,
            FTQ_PRDCT_TYP,
            FTQ_UNDRLYNG,
            TO_CHAR ( FTQ_EXPRY_DT, 'dd-Mon-yyyy' ),
            FTQ_EXER_TYP,
            FTQ_OPT_TYP,
            NVL(FTQ_STRK_PRC, 0 ),
            FTQ_INDSTK,
            NVL( FTQ_LST_TRD_PRC, 0 ),
            TO_CHAR ((case when NVL(FTQ_LST_TRD_QTY,0) != 0 then FTQ_LST_TRD_TM else NULL  end), 'dd-Mon-yyyy hh24:mi:ss' ), /* Ver 2.6 */
            NVL( FTQ_LST_TRD_QTY, 0 ),
            NVL( FTQ_BST1_BID_PRC, 0 ),
            NVL( FTQ_BST1_BID_QTY, 0 ),
            NVL( FTQ_BST1_OFFR_PRC, 0 ),
            NVL( FTQ_BST1_OFFR_QTY, 0 ),
            NVL( FTQ_CLS_PRC, 0 ),
            NVL( FTQ_OPN_PRC, 0 ),
            NVL( FTQ_HGH_PRC, 0 ),
            NVL( FTQ_LOW_PRC, 0 ),
            NVL( FTQ_PRVS_CLS_PRC, 0 ),
            NVL( FTQ_CHNG_PRVS_CLS, 0 ),
            NVL(FTQ_INDCTR,'+'),
            NVL( FTQ_HGH_PRC_RNG, 0 ),
            NVL( FTQ_LOW_PRC_RNG, 0 ),
            NVL( FTQ_AVRG_TRD_PRC, 0 ),
            NVL( FTQ_TOT_QTY_TRDD, 0 ),
            NVL( FTQ_TOT_VAL_TRDD, 0 ),
            NVL( FTQ_BASE_PRC, 0 ),
            NVL( FTQ_CRNT_OI, 0 ),
            NVL(decode(NVL(FTQ_CLS_OI,0),0,0,(NVL(FTQ_CRNT_OI,0)-NVL(FTQ_CLS_OI,0))), 0 ), /* Ver 2.6 */ /* Ver 2.7*/
            NVL( FTQ_OI_HIGH, 0 ),
            NVL( FTQ_OI_LOW, 0 ),
            NVL( FTQ_OI_INDCTR, '+' ),
            '*',
            NVL( FTQ_MIN_LOT_QTY,'0'),
  (case when NVL(ftq_qt_trdng_flg,'*') = 'T' and NVL(ftq_sltp_fp_qt_trdng_flg,'*') = 'T' then '1' else '0' end),
						NVL( ftq_hgh_trd_exec_rng, 0 ), 
            NVL( ftq_low_trd_exec_rng, 0 ),
            NVL(FTQ_ATS_CLS_PRC,0),
            decode(trunc(FSP_ATS_CLSPRC_UPDDT),trunc(FTQ_LST_TRD_TM),nvl((FTQ_LST_TRD_PRC - FTQ_ATS_CLS_PRC),0),0) net_chng,
            decode(trunc(FSP_ATS_CLSPRC_UPDDT),trunc(FTQ_LST_TRD_TM),DECODE(FTQ_ATS_CLS_PRC,0,0,nvl(((FTQ_LST_TRD_PRC - FTQ_ATS_CLS_PRC)/FTQ_ATS_CLS_PRC)*10000,0)),0) net_percent_chng,
            CASE when  ((nvl(FTQ_ATS_CLS_PRC,0) /100) - (nvl(FTQ_LST_TRD_PRC,0) /100 ) >0) THEN '-' ELSE '+' end,
						NVL(FTQ_TOT_BID_QTY,0),
						NVL(FTQ_TOT_OFFR_QTY,0),
						decode(trunc(FSP_ATS_CLSPRC_UPDDT),trunc(FTQ_LST_TRD_TM),nvl( FTQ_ATS_CLS_PRC,0 ),0)   /**** Added in Ver 2.8 ***/
			INTO	:ptr_st_cntrct_qt->c_xchng_cd,
            :ptr_st_cntrct_qt->c_prd_typ,
            :ptr_st_cntrct_qt->c_undrlyng,
            :c_exp_dt,
            :ptr_st_cntrct_qt->c_exrc_typ,
            :ptr_st_cntrct_qt->c_opt_typ,
            :ptr_st_cntrct_qt->l_strike_prc,
            :ptr_st_cntrct_qt->c_ctgry_indstk,
            :ptr_st_cntrct_qt->l_lst_trdd_prc,
            :c_lst_trd_dt:i_trd_tm,
            :ptr_st_cntrct_qt->l_lst_trdd_qty,
            :ptr_st_cntrct_qt->l_bst_bid_prc,
            :ptr_st_cntrct_qt->l_bst_bid_qty,
            :ptr_st_cntrct_qt->l_bst_offr_prc,
            :ptr_st_cntrct_qt->l_bst_offr_qty,
            :ptr_st_cntrct_qt->l_close_prc,
            :ptr_st_cntrct_qt->l_open_prc,
            :ptr_st_cntrct_qt->l_high_prc,
            :ptr_st_cntrct_qt->l_low_prc,
            :ptr_st_cntrct_qt->l_prev_close_prc,
            :ptr_st_cntrct_qt->l_chng_prvs_close_prc,
            :ptr_st_cntrct_qt->c_indctr,
            :ptr_st_cntrct_qt->l_high_prc_rng,
            :ptr_st_cntrct_qt->l_low_prc_rng,
            :ptr_st_cntrct_qt->l_avg_trdd_prc,
            :ptr_st_cntrct_qt->l_tot_qty_trdd,
            :ptr_st_cntrct_qt->d_tot_val_trdd,
            :ptr_st_cntrct_qt->l_base_prc,
            :ptr_st_cntrct_qt->d_crnt_oi,
            :ptr_st_cntrct_qt->d_chng_oi,
            :ptr_st_cntrct_qt->d_oi_high,
            :ptr_st_cntrct_qt->d_oi_low,
            :ptr_st_cntrct_qt->c_oi_indctr,
            :ptr_st_cntrct_qt->c_rqst_typ,
            :ptr_st_cntrct_qt->l_min_lot_qty,
						:ptr_st_cntrct_qt->l_ca_lvl,				 
            :ptr_st_cntrct_qt->l_eba_cntrct_id,   
            :ptr_st_cntrct_qt->l_tot_val_trdd,
            :l_ats_cls_prc_new,
            :l_net_chng_new,
            :l_net_percentage_chng_new,
            :c_ftq_flg_new,
						:c_tot_buy_qt_new,
						:c_tot_sel_qt_new,
            :l_ats_cls_prc_new2 /** Ver 2.8 **/
			FROM	 FTQ_FO_TRD_QT,FSP_FO_SYSTM_PRMTR 
			WHERE	 FTQ_XCHNG_CD  = :ptr_st_contract->c_xchng_cd
      AND    FTQ_PRDCT_TYP = decode(:ptr_st_contract->c_prd_typ,'P','F','U','F','I','O',:ptr_st_contract->c_prd_typ) 
      AND    FTQ_UNDRLYNG  = :ptr_st_contract->c_undrlyng
      AND    FTQ_EXPRY_DT  = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
      AND    FTQ_EXER_TYP  = :ptr_st_contract->c_exrc_typ
      AND    FTQ_OPT_TYP   = :ptr_st_contract->c_opt_typ
      AND    FTQ_STRK_PRC  = :ptr_st_contract->l_strike_prc;

			if ( SQLCODE != 0 )
			{
        if ( SQLCODE == NO_DATA_FOUND )  
        {
          fn_userlog(c_ServiceName,"Invalid contract");
          strcpy(c_err_msg,"Record does not exist for selected contract.");                          
        }
        else
        {
				  fn_userlog(c_ServiceName,"Failed To Get Trade Quotes."); 
	    	  fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg  );
        }			
				return -1;
			}

	SETNULL ( c_exp_dt );
	SETNULL ( c_lst_trd_dt );

  *l_ats_cls_prc=l_ats_cls_prc_new;
  *l_ats_cls_prc2=l_ats_cls_prc_new2; /** Ver 2.8 **/
  *l_net_chng=l_net_chng_new;
  *l_net_percentage_chng=l_net_percentage_chng_new;
  *c_ftq_flg = c_ftq_flg_new;
		/** Ver 2.5 Start **/
  strcpy ( c_tot_buy_qt , c_tot_buy_qt_new);
  strcpy ( c_tot_sel_qt , c_tot_sel_qt_new);
		/** Ver 2.5 End **/
  
  strcpy ( ptr_st_cntrct_qt->c_expry_dt , ( char * ) c_exp_dt.arr );
  strcpy ( ptr_st_cntrct_qt->c_lst_trdd_time , ( char * ) c_lst_trd_dt.arr );

  if (DEBUG_MSG_LVL_3)
  {
   fn_userlog(c_ServiceName,"c flg :%c:",*c_ftq_flg);
   fn_userlog(c_ServiceName,"c_tot_buy_qt:%s:",c_tot_buy_qt);
   fn_userlog(c_ServiceName,"c_tot_sel_qt:%s:",c_tot_sel_qt);
  }
	return 0 ;
}
/******************************* Ver 2.0 Ends **********************************/

/******************************* Added in ver 2.1 ******************************/

int fn_get_qt_spread( char   *c_ServiceName,
					  					struct vw_contract   *ptr_st_contract,
					  					struct vw_cntrct_qt  *ptr_st_cntrct_qt,
					  					char   *c_err_msg,
					  					long   *l_ats_cls_prc,
					  					long   *l_net_chng,
					  					long   *l_net_percentage_chng,
					  					char   *c_ftq_flg,
					  					char	  *c_expry_date2,
					  					long   *l_ats_cls_prc2   /** Ver 2.8 **/
										)
{
  varchar c_expiry_dt [ LEN_DATE ] ;
  varchar c_exp_dt [ LEN_DATE ] ;
  varchar c_exp_dt2[ LEN_DATE ] ;
  varchar c_lst_trd_dt [ LEN_DATE ] ;
  short i_trd_tm;

  long l_ats_cls_prc_new=0;
  long l_ats_cls_prc_new2=0; /** Ver 2.8 **/
  long l_net_chng_new=0;
  long l_net_percentage_chng_new=0;
  char c_ftq_flg_new='\0';

	MEMSET(c_expiry_dt.arr);
	MEMSET(c_exp_dt.arr);
	MEMSET(c_exp_dt2.arr);
	MEMSET(c_lst_trd_dt.arr);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Inside fn_get_qt_spread Function.");
  }

  rtrim ( ptr_st_contract->c_expry_dt );
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_contract->c_expry_dt );
  SETLEN ( c_expiry_dt );

  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"expiry date:%s:",ptr_st_contract->c_expry_dt);
    fn_userlog(c_ServiceName,"expiry date2:%s:",c_expry_date2);
    fn_userlog(c_ServiceName,"XCHNG CODE:%s:",ptr_st_contract->c_xchng_cd);
    fn_userlog(c_ServiceName,"product type:%c:",ptr_st_contract->c_prd_typ);
    fn_userlog(c_ServiceName,"Underlyng :%s:",ptr_st_contract->c_undrlyng);
    fn_userlog(c_ServiceName,"Exercise type:%c:",ptr_st_contract->c_exrc_typ);
    fn_userlog(c_ServiceName,"Option type:%c:",ptr_st_contract->c_opt_typ);
    fn_userlog(c_ServiceName,"Strike Price:%ld:",ptr_st_contract->l_strike_prc);
  }

  fn_userlog(c_ServiceName,"expiry date2:%s:",c_expry_date2);
  EXEC SQL
    SELECT  FTQ_XCHNG_CD,
            FTQ_PRDCT_TYP,
            FTQ_UNDRLYNG,
            TO_CHAR ( FTQ_EXPRY_DT, 'dd-Mon-yyyy' ),
						TO_CHAR ( FTQ_EXPRY_DT2,'DD-Mon-YYYY' ),
            FTQ_EXER_TYP,
            FTQ_OPT_TYP,
            NVL(FTQ_STRK_PRC, 0 ),
            FTQ_INDSTK,
            NVL( FTQ_LST_TRD_PRC, 0 ),
            TO_CHAR ( FTQ_LST_TRD_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
            NVL( FTQ_LST_TRD_QTY, 0 ),
            NVL( FTQ_BST1_BID_PRC, 0 ),
            NVL( FTQ_BST1_BID_QTY, 0 ),
            NVL( FTQ_BST1_OFFR_PRC, 0 ),
            NVL( FTQ_BST1_OFFR_QTY, 0 ),
            NVL( FTQ_CLS_PRC, 0 ),
            NVL( FTQ_OPN_PRC, 0 ),
            NVL( FTQ_HGH_PRC, 0 ),
            NVL( FTQ_LOW_PRC, 0 ),
            NVL( FTQ_PRVS_CLS_PRC, 0 ),
            NVL( FTQ_CHNG_PRVS_CLS, 0 ),
            NVL(FTQ_INDCTR,'+'),
            NVL( FTQ_HGH_PRC_RNG, 0 ),
            NVL( FTQ_LOW_PRC_RNG, 0 ),
            NVL( FTQ_AVRG_TRD_PRC, 0 ),
            NVL( FTQ_TOT_QTY_TRDD, 0 ),
            NVL( FTQ_TOT_VAL_TRDD, 0 ),
            NVL( FTQ_BASE_PRC, 0 ),
            NVL( FTQ_CRNT_OI, 0 ),
            NVL( FTQ_CHNG_OI, 0 ),
            NVL( FTQ_OI_HIGH, 0 ),
            NVL( FTQ_OI_LOW, 0 ),
            NVL( FTQ_OI_INDCTR, '+' ),
            '*',
            NVL( FTQ_MIN_LOT_QTY,'0'),
  (case when NVL(ftq_qt_trdng_flg,'*') = 'T' and NVL(ftq_sltp_fp_qt_trdng_flg,'*') = 'T' then '1' else '0' end),
            NVL( ftq_hgh_trd_exec_rng, 0 ),
            NVL( ftq_low_trd_exec_rng, 0 ),
            NVL(FTQ_ATS_CLS_PRC,0),
            decode(trunc(FSP_ATS_CLSPRC_UPDDT),trunc(FTQ_LST_TRD_TM),nvl((FTQ_LST_TRD_PRC - FTQ_ATS_CLS_PRC),0),0) net_chng,
            decode(trunc(FSP_ATS_CLSPRC_UPDDT),trunc(FTQ_LST_TRD_TM),DECODE(FTQ_ATS_CLS_PRC,0,0,nvl(((FTQ_LST_TRD_PRC - FTQ_ATS_CLS_PRC)/FTQ_ATS_CLS_PRC)*10000,0)),0) net_percent_chng,
            CASE when  ((nvl(FTQ_ATS_CLS_PRC,0) /100) - (nvl(FTQ_LST_TRD_PRC,0) /100 ) >0) THEN '-' ELSE '+' end,
						decode(trunc(FSP_ATS_CLSPRC_UPDDT),trunc(FTQ_LST_TRD_TM),nvl( FTQ_ATS_CLS_PRC,0 ),0)   /**** Added in Ver 2.8 ***/
      INTO  :ptr_st_cntrct_qt->c_xchng_cd,
            :ptr_st_cntrct_qt->c_prd_typ,
            :ptr_st_cntrct_qt->c_undrlyng,
            :c_exp_dt,
						:c_exp_dt2,
            :ptr_st_cntrct_qt->c_exrc_typ,
            :ptr_st_cntrct_qt->c_opt_typ,
            :ptr_st_cntrct_qt->l_strike_prc,
            :ptr_st_cntrct_qt->c_ctgry_indstk,
            :ptr_st_cntrct_qt->l_lst_trdd_prc,
            :c_lst_trd_dt:i_trd_tm,
            :ptr_st_cntrct_qt->l_lst_trdd_qty,
            :ptr_st_cntrct_qt->l_bst_bid_prc,
            :ptr_st_cntrct_qt->l_bst_bid_qty,
            :ptr_st_cntrct_qt->l_bst_offr_prc,
            :ptr_st_cntrct_qt->l_bst_offr_qty,
            :ptr_st_cntrct_qt->l_close_prc,
            :ptr_st_cntrct_qt->l_open_prc,
            :ptr_st_cntrct_qt->l_high_prc,
            :ptr_st_cntrct_qt->l_low_prc,
            :ptr_st_cntrct_qt->l_prev_close_prc,
            :ptr_st_cntrct_qt->l_chng_prvs_close_prc,
            :ptr_st_cntrct_qt->c_indctr,
            :ptr_st_cntrct_qt->l_high_prc_rng,
            :ptr_st_cntrct_qt->l_low_prc_rng,
            :ptr_st_cntrct_qt->l_avg_trdd_prc,
            :ptr_st_cntrct_qt->l_tot_qty_trdd,
            :ptr_st_cntrct_qt->d_tot_val_trdd,
            :ptr_st_cntrct_qt->l_base_prc,
            :ptr_st_cntrct_qt->d_crnt_oi,
            :ptr_st_cntrct_qt->d_chng_oi,
            :ptr_st_cntrct_qt->d_oi_high,
            :ptr_st_cntrct_qt->d_oi_low,
            :ptr_st_cntrct_qt->c_oi_indctr,
            :ptr_st_cntrct_qt->c_rqst_typ,
            :ptr_st_cntrct_qt->l_min_lot_qty,
            :ptr_st_cntrct_qt->l_ca_lvl,
            :ptr_st_cntrct_qt->l_eba_cntrct_id,
            :ptr_st_cntrct_qt->l_tot_val_trdd,
            :l_ats_cls_prc_new,
            :l_net_chng_new,
            :l_net_percentage_chng_new,
            :c_ftq_flg_new,
            :l_ats_cls_prc_new2    /** Ver 2.8 **/
      FROM   FTQ_FO_TRD_QT,FSP_FO_SYSTM_PRMTR
      WHERE  FTQ_XCHNG_CD  = :ptr_st_contract->c_xchng_cd
      AND    FTQ_PRDCT_TYP = :ptr_st_contract->c_prd_typ
      AND    FTQ_UNDRLYNG  = :ptr_st_contract->c_undrlyng
      AND    FTQ_EXPRY_DT  = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
	  AND	 FTQ_EXPRY_DT2 = to_date ( :c_expry_date2,'DD-Mon-YYYY' )
      AND    FTQ_EXER_TYP  = :ptr_st_contract->c_exrc_typ
      AND    FTQ_OPT_TYP   = :ptr_st_contract->c_opt_typ
      AND    FTQ_STRK_PRC  = :ptr_st_contract->l_strike_prc;

      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          fn_userlog(c_ServiceName,"Invalid contract");
          strcpy(c_err_msg,"Record does not exist for selected contract.");
        }
        else
        {
          fn_userlog(c_ServiceName,"Failed To Get Trade Quotes.");
          fn_errlog( c_ServiceName, "S31065", SQLMSG, c_err_msg  );
        }
        return -1;
      }

  SETNULL ( c_exp_dt );
  SETNULL ( c_exp_dt2 );
  SETNULL ( c_lst_trd_dt );

  *l_ats_cls_prc=l_ats_cls_prc_new;
  *l_ats_cls_prc2=l_ats_cls_prc_new2; /** Ver 2.8 **/
  *l_net_chng=l_net_chng_new;
  *l_net_percentage_chng=l_net_percentage_chng_new;
  *c_ftq_flg = c_ftq_flg_new;

  strcpy ( ptr_st_cntrct_qt->c_expry_dt , ( char * ) c_exp_dt.arr );
  strcpy ( ptr_st_cntrct_qt->c_lst_trdd_time , ( char * ) c_lst_trd_dt.arr );
  strcpy ( c_expry_date2 ,( char * ) c_exp_dt2.arr );
  
  if (DEBUG_MSG_LVL_3)
  {
	fn_userlog(c_ServiceName,"c flg :%c:",*c_ftq_flg);
  }
  return 0 ;
}
/******************************* Ver 2.1 Ends **********************************/
