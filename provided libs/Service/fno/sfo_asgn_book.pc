/******************************************************************************/
/*	Program	    			:	SFO_ASGN_BOOK                                         */
/*                                                                            */
/*  Input             : FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_OPERATION_TYP                                     */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_FROM_DT                                           */
/*                      FFO_TO_DT                                             */
/*                      FFO_ROUT_CRT                                          */
/*                                                                            */
/*  Output            : FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_ASGN_DT                                           */
/*                      FFO_ASGN_RFRNC                                        */
/*                      FFO_ASGN_QTY                                          */
/*                      FFO_STLMNT_PRC                                        */
/*                      FFO_CUR_MKT_PRC                                       */
/*                                                                            */
/*  Description       : This service retrieves the values of the entire       */
/*                      assignment book given different input parameters      */
/*                      based on different needs. The different needs are     */
/*                      described as different operation types:               */
/*                      W - WITH_DATE_IP 			                                */
/*                      U - WITH_DATE_AND_UNDRLYNG_IP                         */
/*                      I - WITHOUT_DATE_IP_AND_UNDRLYNG                      */
/*                      O - WITHOUT_DATE_IP_WITH_UNDRLYNG_INP                 */
/*                                                                            */
/*                                                                            */
/*  Log               : 1.0   12-Oct-2001   S. Swaminathan                    */
/*  Log               : 1.1   21-Dec-2006   SH/AA/SKS 											  */
/*  Log								:	1.2		21-Dec-2007   Ranjit														*/
/*  Log								:	1.3		21-Dec-2007   Shailesh													*/
/*  Log								:	1.4		31-Jul-2009   Venture M								    			*/
/*  Log               : 1.5   25-Mar-2011   Sandip Tambe                      */
/*  Log               : 1.6   12-Jan-2012   Sachin Birje                      */ 
/*  log               : 1.7   28-Aug-2014   Sachin Birje                      */ 
/******************************************************************************/
/*  1.0        -  New Release                                                 */
/*  1.1        -  DL Bulk Call changes/ Changes in Mem. Reallocation     			*/
/*	1.2				 -  IBM Migration																								*/
/*	1.3				 -  Server died issue 																					*/
/*	1.4				 -  Adding brokerage to the display															*/
/*  1.5        -  CRCSN44510 Drvtv_Rstrctrng 																	*/
/* 								Removed Global Temp Table'FDM_DT_MTCH' For Code Optimization*/
/*  1.6        -  FNO BSE Changes                                             */
/*  1.7        -  View to FML conversion change                               */
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_fml_def.h>
/*** #include <fo_view_def.h> *** Ver 1.7 **/
#include <fo_view_def.h> /*** Ver 1.7 **/
#include <fml_rout.h> /*** Ver 1.7 **/
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h> 		/** ver 1.2 **/
#include <fn_getref.h>	/** ver 1.2 **/	
#include <fn_read_debug_lvl.h>	/* ver 1.2 */

#define MAX		1
#define MIN		0

void SFO_ASGN_BOOK( TPSVCINFO *rqst )
{

	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;
  FBFR32 *ptr_fml_Tempbuf;        /***  VER 1.1 FOR MEMORY REALLOCATION ***/

  char c_ServiceName[33];
  char c_errmsg[256];

	varchar c_frm_dt[ LEN_DATE ];
  varchar c_to_dt[ LEN_DATE ];
	
  int  i_returncode;
  int  i_err[4];
  int  i_ferr[4];
  int  i_cnt;
  int  li_rec_cnt_dt;
  int  li_rec_cnt_und_dt;
  int  i_counter = 1;
	int  i_count = 0;							/****V 1.1 ************/
/**	long l_acnt_id=0;	 					** Ver 1.1: Added by AA Commented by SKS	***/
  long l_bufferlength;          /***  VER 1.1 FOR MEMORY REALLOCATION ***/

	char  c_user_id[15];               /**** Ver 1.5 *********/
	
 EXEC SQL BEGIN DECLARE SECTION;
    struct vw_contract st_cntrct;
    struct vw_asgnmt *ptr_st_asgnmt;
    struct vw_usr_prfl st_usr_prfl;
    sql_cursor  sys_cursor;
    char c_mtch_accnt_no[11];
    char c_exchange_cd[4];
    char c_underlying[7];
    char c_min_ref_num[19];
    char c_max_ref_num[19];
		char c_opr_typ;
    char c_date_flag = 'Y';
		varchar  c_exg_nxt_dt[22+1];
    long l_fab_brkrg_val=0;  /* 1.4 */
 EXEC SQL END DECLARE SECTION;

	struct vw_err_msg st_err_msg;

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);		/* ver 1.2 */

/*	Fprint32(ptr_fml_Ibuf);			**Commented in Ver 1.1 ***/

  /*********** Commented in Ver 1.7 *****************************
  i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_usr_prfl,
														"vw_usr_prfl" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  ************** Ver 1.7 ****************************************/
  
  /***** Ver 1.7 Starts Here ******/
  i_returncode = fn_unpack_fmltovar_dflt ( c_ServiceName,
                                      c_errmsg,
                                      ptr_fml_Ibuf,
                                      6,
                                      FFO_USR_ID,(char *)st_usr_prfl.c_user_id, "NULL",
                                      FFO_SSSN_ID,(char*)&st_usr_prfl.l_session_id, "NULL",
                                      FFO_EBA_MTCH_ACT_NO,(char*)st_usr_prfl.c_cln_mtch_accnt, "NULL",
                                      FFO_XCHNG_CD,(char*)st_cntrct.c_xchng_cd, "NULL",
 																			FFO_UNDRLYNG,(char*)st_cntrct.c_undrlyng, "*",
                                      FFO_ROUT_CRT,(char*)st_usr_prfl.c_rout_crt, "***" );
  if( i_returncode != 0 )
  {                                       
   fn_errlog( c_ServiceName, "S31010", FMLMSG, c_errmsg  );
   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );   
  }

  if(DEBUG_MSG_LVL_3) 
  {
   fn_userlog( c_ServiceName,"st_usr_prfl.c_user_id :%s:",st_usr_prfl.c_user_id);
   fn_userlog( c_ServiceName,"st_usr_prfl.l_session_id :%ld:",st_usr_prfl.l_session_id);
   fn_userlog( c_ServiceName,"st_usr_prfl.c_cln_mtch_accnt :%s:",st_usr_prfl.c_cln_mtch_accnt);
   fn_userlog( c_ServiceName,"st_cntrct.c_xchng_cd :%s:",st_cntrct.c_xchng_cd);
   fn_userlog( c_ServiceName,"st_cntrct.c_undrlyng :%s:",st_cntrct.c_undrlyng);
   fn_userlog( c_ServiceName,"st_usr_prfl.c_rout_crt :%s:",st_usr_prfl.c_rout_crt);
  }
  
  /******* Ver 1.7 Ends Here *******/

	strcpy ( ( char * )c_mtch_accnt_no, st_usr_prfl.c_cln_mtch_accnt );

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog( c_ServiceName,"c_mtch_accnt_no:%s:", c_mtch_accnt_no );
	}

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

  i_returncode = fn_chk_sssn( c_ServiceName,
                              &st_usr_prfl,
                              &st_err_msg ) ;

	if ( i_returncode == -1 )
  {
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /********* Comment in Ver 1.7 starts here **********************************
  i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_cntrct,
                           "vw_contract" );

	if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31015", FMLMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  ********************** Ver 1.7 Ends Here ***********************************/

  strcpy ( ( char * )c_exchange_cd, st_cntrct.c_xchng_cd );
  strcpy ( ( char * )c_underlying, st_cntrct.c_undrlyng );

	i_err[0] = Fget32( ptr_fml_Ibuf, FFO_OPERATION_TYP, 0,
                                   (char *)&c_opr_typ, 0 );
  i_ferr [0] = Ferror32;

  if ( i_err[0] == -1 )
  {
    fn_errlog( c_ServiceName, "S31020", FMLMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if(DEBUG_MSG_LVL_3)
  {
  	fn_userlog( c_ServiceName,"c_underlying    :%s:", c_underlying );
  	fn_userlog( c_ServiceName,"c_opr_typ   :%c:", c_opr_typ );
	}

  i_err[1] = Fget32( ptr_fml_Ibuf, FFO_FROM_DT, 0,
                                   (char *)c_frm_dt.arr, 0 );
  i_ferr [1] = Ferror32;

  i_err[2] = Fget32( ptr_fml_Ibuf, FFO_TO_DT, 0,
                                   (char *)c_to_dt.arr, 0 );
  i_ferr [2] = Ferror32;

	for ( i_cnt = 1;  i_cnt <= 2; i_cnt++ )
  {
    if ( i_err[i_cnt] == -1 && i_ferr[i_cnt] != FNOTPRES )
    {
      fn_errlog( c_ServiceName, "S31025", Fstrerror32( i_ferr[i_cnt] ),
                 c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    else if ( i_err[i_cnt] == -1 && i_ferr[i_cnt] == FNOTPRES )
    {
    	c_date_flag = 'N';
    }
  }	

	SETLEN( c_frm_dt );
  SETLEN( c_to_dt );
  /********** Ver 1.6 Starts Here **********/
   fn_userlog(c_ServiceName," c_exchange_cd :%s:",c_exchange_cd);
   if( strcmp(c_exchange_cd,"ALL") == 0 )
   {
    memset(c_exchange_cd,'\0',sizeof(c_exchange_cd));
    strcpy(c_exchange_cd,"%");
    rtrim(c_exchange_cd); 
   }
	/********** Ver 1.6 Ends Here  ***********/
	/**********New Log 1.3 starts************/
	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName,"c_frm_dt:%s:", c_frm_dt.arr);
    fn_userlog( c_ServiceName,"c_to_dt:%s:", c_to_dt.arr);
  }
	/**********New Log ends************/

  if ( c_date_flag == 'Y' )
  {
		strcpy ( c_min_ref_num, (char *)fn_getref ( c_ServiceName, 
                                                c_frm_dt.arr, 
                                                "00", 
                                                MIN,
                                                c_errmsg ) );
		strcpy ( c_max_ref_num, (char *)fn_getref ( c_ServiceName,
                                                c_to_dt.arr, 
                                                "00", 
                                                MAX,
                                                c_errmsg ) );
	}
	
	/**********New Log 1.3 starts************/
	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName,"c_min_ref_num:%s:", c_min_ref_num);
    fn_userlog( c_ServiceName,"c_max_ref_num:%s:", c_max_ref_num);
  }
	/**********New Log ends************/

	/**************V 1.1 Starts  *************/
  /******* tpbegin ************/

 	/********Ver 1.5 Comment starts***********

  if(tpbegin( TRAN_TIMEOUT, 0 ) == -1)
  {
    fn_errlog( c_ServiceName, "S31030", SQLMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	EXEC SQL ALLOCATE :sys_cursor;

	**************V 1.1 starts *************

 if( strcmp( c_mtch_accnt_no, "*" ) == 0 )
  {
    if( st_usr_prfl.c_user_id[0] == BPID )
    {
      ** insert into fdm all acounts for this bpid **
      EXEC SQL
      INSERT INTO
      FDM_DT_MTCH
      SELECT CLM_MTCH_ACCNT FROM CLM_CLNT_MSTR
      WHERE CLM_BP_ID = :st_usr_prfl.c_user_id;
      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31035", SQLMSG, c_errmsg );
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpcommit(0);
        tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
      }
    }
    else
    {
      EXEC SQL
      INSERT  INTO  FDM_DT_MTCH
      SELECT  UAC_CLM_MTCH_ACCNT FROM UAC_USR_ACCNTS
      WHERE   UAC_USR_ID = :st_usr_prfl.c_user_id ;
      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31040", SQLMSG, c_errmsg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpcommit(0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    EXEC SQL
    SELECT  count(*)
    INTO :i_count
    FROM    FDM_DT_MTCH ;
    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31045", SQLMSG, c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if(DEBUG_MSG_LVL_3)
  	{
    	fn_userlog(c_ServiceName,"Inside All mtch accnnt's");
		}

    if ( c_date_flag == 'N' )
    {
      fn_userlog( c_ServiceName,"From/To Dates are not Found in the Buffer" );
      strcpy(c_errmsg,"From/To Dates are not Found in the Buffer");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		li_rec_cnt_dt = 0 ;
    EXEC SQL
      SELECT    1
      INTO    :li_rec_cnt_dt
      FROM      dual
      WHERE     EXISTS
      (
        SELECT    1
        FROM    fab_fo_asgnmnt_book_hstry,FDM_DT_MTCH
      	****WHERE  fab_clm_mtch_accnt = :c_mtch_accnt_no ******
				WHERE	 fab_clm_mtch_accnt = FDM_CLM_MTCH_ACCNT
      	AND    fab_xchng_cd 			= :c_exchange_cd
				AND		 fab_asgn_rfrnc_no 	>= :c_min_ref_num
				AND		 fab_asgn_rfrnc_no 	<  :c_max_ref_num
			);

    if ( ( SQLCODE !=0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "S31050", SQLMSG, c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if ( li_rec_cnt_dt != 1 )
    {
			EXEC SQL EXECUTE
				BEGIN
					OPEN	:sys_cursor	FOR
					SELECT fab_clm_mtch_accnt,
	               fab_xchng_cd,
	               fab_prdct_typ,
	               fab_indstk,
	               fab_undrlyng,
	               to_char( fab_expry_dt, 'dd-Mon-yyyy' ),		*** Ver 1.1 : mon to Mon	***
	               fab_exer_typ,
	               fab_opt_typ,
	               fab_strk_prc,
	               fab_asgn_rfrnc_no,
	               to_char( fab_asgnd_dt, 'dd-Mon-yyyy' ),		*** Ver 1.1 : mon to Mon ***
	               fab_asgnd_qty,
	               fab_opnpstn_qty,
	               fab_sttlmnt_prc,
	               fab_curr_mkt_prc,
	  * 1.4  *   NVL((fab_brkrg_val+fab_stt+fab_src_tx+fab_sebi_tt+fab_tran_chrg+fab_stamp_duty+fab_other_chrg),0)
	        FROM   fab_fo_asgnmnt_book,FDM_DT_MTCH
	        ********WHERE  fab_clm_mtch_accnt = :c_mtch_accnt_no*********
					WHERE	 fab_clm_mtch_accnt = FDM_CLM_MTCH_ACCNT
	        AND    fab_xchng_cd 			= :c_exchange_cd
					AND		 fab_asgn_rfrnc_no 	>= :c_min_ref_num
					AND		 fab_asgn_rfrnc_no 	<  :c_max_ref_num
					ORDER BY 10;
				END;
			END-EXEC;
		}
		else
		{
			EXEC SQL EXECUTE
				BEGIN
					OPEN	:sys_cursor	FOR
					SELECT fab_clm_mtch_accnt,
	               fab_xchng_cd,
	               fab_prdct_typ,
	               fab_indstk,
	               fab_undrlyng,
	               to_char( fab_expry_dt, 'dd-Mon-yyyy' ),		*** Ver 1.1 : mon to Mon ***
	               fab_exer_typ,
	               fab_opt_typ,
	               fab_strk_prc,
	               fab_asgn_rfrnc_no,
	               to_char( fab_asgnd_dt, 'dd-Mon-yyyy' ),		*** Ver 1.1 : mon to Mon ***
	               fab_asgnd_qty,
	               fab_opnpstn_qty,
	               fab_sttlmnt_prc,
	               fab_curr_mkt_prc,
	 * 1.4  *    NVL((fab_brkrg_val+fab_stt+fab_src_tx+fab_sebi_tt+fab_tran_chrg+fab_stamp_duty+fab_other_chrg),0)
	        FROM   fab_fo_asgnmnt_book, FDM_DT_MTCH
	        ******************WHERE  fab_clm_mtch_accnt = :c_mtch_accnt_no******************
          WHERE  fab_clm_mtch_accnt = FDM_CLM_MTCH_ACCNT
	        AND    fab_xchng_cd 			= :c_exchange_cd
					AND		 fab_asgn_rfrnc_no 	>= :c_min_ref_num
					AND		 fab_asgn_rfrnc_no 	<  :c_max_ref_num

          UNION ALL

					SELECT fab_clm_mtch_accnt,
	               fab_xchng_cd,
	               fab_prdct_typ,
	               fab_indstk,
	               fab_undrlyng,
	               to_char( fab_expry_dt, 'dd-Mon-yyyy' ),		*** Ver 1.1 : mon to Mon ***
	               fab_exer_typ,
	               fab_opt_typ,
	               fab_strk_prc,
	               fab_asgn_rfrnc_no,
	               to_char( fab_asgnd_dt, 'dd-Mon-yyyy' ),		*** Ver 1.1 : mon to Mon ***
	               fab_asgnd_qty,
	               fab_opnpstn_qty,
	               fab_sttlmnt_prc,
	               fab_curr_mkt_prc,
* 1.4  *       NVL((fab_brkrg_val+fab_stt+fab_src_tx+fab_sebi_tt+fab_tran_chrg+fab_stamp_duty+fab_other_chrg),0)
	        FROM   fab_fo_asgnmnt_book_hstry,FDM_DT_MTCH
	        *************WHERE  fab_clm_mtch_accnt = :c_mtch_accnt_no*************
          WHERE  fab_clm_mtch_accnt = FDM_CLM_MTCH_ACCNT
	        AND    fab_xchng_cd 			= :c_exchange_cd
					AND		 fab_asgn_rfrnc_no 	>= :c_min_ref_num
					AND		 fab_asgn_rfrnc_no 	<  :c_max_ref_num
					ORDER BY 10;

				END;
			END-EXEC;
		}
	}
    ****Ver 1.1 condition for multiple match acocunt ends here ******

		***	Ver 1.5 Comment[For OptimiZation] End			***/

	EXEC SQL ALLOCATE :sys_cursor;

	/***	Ver 1.5 Starts Here	***/

	if( strcmp( c_mtch_accnt_no, "*" ) == 0 )
  {
    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Inside All mtch accnnt's");
    }

    if ( c_date_flag == 'N' )
    {
      fn_userlog( c_ServiceName,"From/To Dates are not Found in the Buffer" );
      strcpy(c_errmsg,"From/To Dates are not Found in the Buffer");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if( st_usr_prfl.c_user_id[0] == BPID )        
    {
      li_rec_cnt_dt = 0 ;
      strcpy(c_user_id,st_usr_prfl.c_user_id);      

    	if(DEBUG_MSG_LVL_3)
    	{
      	fn_userlog(c_ServiceName,"Inside BPID User");
    	}

      EXEC SQL
      	SELECT    1
      	INTO    :li_rec_cnt_dt
      	FROM      dual
      	WHERE     EXISTS
      	(
        	SELECT    1
        	FROM    FAB_FO_ASGNMNT_BOOK_HSTRY,CLM_CLNT_MSTR
        /****WHERE  fab_clm_mtch_accnt = :c_mtch_accnt_no ******/
        WHERE  FAB_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
				AND		 CLM_BP_ID					= :c_user_id							
       /** AND    FAB_XCHNG_CD       = :c_exchange_cd *** Ver 1.6 ***/
        AND    FAB_XCHNG_CD   LIKE :c_exchange_cd    /*** Ver 1.6 ***/
        AND    FAB_ASGN_RFRNC_NO  >= :c_min_ref_num
        AND    FAB_ASGN_RFRNC_NO  <  :c_max_ref_num
      );

    if ( ( SQLCODE !=0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "S31055", SQLMSG, c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if ( li_rec_cnt_dt != 1 )
    {
      EXEC SQL EXECUTE
        BEGIN
          OPEN  :sys_cursor FOR
          SELECT FAB_CLM_MTCH_ACCNT,
                 FAB_XCHNG_CD,
                 FAB_PRDCT_TYP,
                 FAB_INDSTK,
                 FAB_UNDRLYNG,
                 to_char( FAB_EXPRY_DT, 'dd-Mon-yyyy' ),    /*** Ver 1.1 : mon to Mon ***/
                 FAB_EXER_TYP,
                 FAB_OPT_TYP,
                 FAB_STRK_PRC,
                 FAB_ASGN_RFRNC_NO,
                 to_char( FAB_ASGND_DT, 'dd-Mon-yyyy' ),    /*** Ver 1.1 : mon to Mon ***/
                 FAB_ASGND_QTY,
                 FAB_OPNPSTN_QTY,
                 FAB_STTLMNT_PRC,
                 FAB_CURR_MKT_PRC,
/*1.4*/NVL((fab_brkrg_val+fab_stt+fab_src_tx+fab_sebi_tt+fab_tran_chrg+fab_stamp_duty+fab_other_chrg
),0)
          FROM   FAB_FO_ASGNMNT_BOOK,CLM_CLNT_MSTR
          /***	WHERE  fab_clm_mtch_accnt = :c_mtch_accnt_no*********/
          WHERE  FAB_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
          AND    CLM_BP_ID  = :c_user_id 									
				/**	AND    FAB_XCHNG_CD       = :c_exchange_cd *** Ver 1.6 ***/
          AND    FAB_XCHNG_CD      LIKE :c_exchange_cd /*** Ver 1.6 ***/
          AND    FAB_ASGN_RFRNC_NO  >= :c_min_ref_num
          AND    FAB_ASGN_RFRNC_NO  <  :c_max_ref_num
          ORDER BY 10;
        END;
      END-EXEC;
    }
    else
    {
      EXEC SQL EXECUTE
        BEGIN
          OPEN  :sys_cursor FOR
          SELECT FAB_CLM_MTCH_ACCNT,
                 FAB_XCHNG_CD,
                 FAB_PRDCT_TYP,
                 FAB_INDSTK,
                 FAB_UNDRLYNG,
                 to_char( FAB_EXPRY_DT, 'dd-Mon-yyyy' ),    /*** Ver 1.1 : mon to Mon ***/
                 FAB_EXER_TYP,
                 FAB_OPT_TYP,
                 FAB_STRK_PRC,
                 FAB_ASGN_RFRNC_NO,
                 to_char( FAB_ASGND_DT, 'dd-Mon-yyyy' ),    /*** Ver 1.1 : mon to Mon ***/
                 FAB_ASGND_QTY,
                 FAB_OPNPSTN_QTY,
                 FAB_STTLMNT_PRC,
                 FAB_CURR_MKT_PRC,
/*1.4*/NVL((fab_brkrg_val+fab_stt+fab_src_tx+fab_sebi_tt+fab_tran_chrg+fab_stamp_duty+fab_other_chrg),0)
          FROM   FAB_FO_ASGNMNT_BOOK,CLM_CLNT_MSTR
          /******************WHERE  fab_clm_mtch_accnt = :c_mtch_accnt_no******************/
          WHERE  FAB_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
          AND    CLM_BP_ID  = :c_user_id											/*** Ver 1.5 **/
					/** AND    FAB_XCHNG_CD       = :c_exchange_cd *** Ver 1.6 ***/
          AND    FAB_XCHNG_CD  LIKE :c_exchange_cd    /*** Ver 1.6 ***/
          AND    FAB_ASGN_RFRNC_NO  >= :c_min_ref_num
          AND    FAB_ASGN_RFRNC_NO  <  :c_max_ref_num

          UNION ALL

          SELECT FAB_CLM_MTCH_ACCNT,
                 FAB_XCHNG_CD,
                 FAB_PRDCT_TYP,
                 FAB_INDSTK,
                 FAB_UNDRLYNG,
                 to_char( FAB_EXPRY_DT, 'dd-Mon-yyyy' ),    /*** Ver 1.1 : mon to Mon ***/
                 FAB_EXER_TYP,
                 FAB_OPT_TYP,
                 FAB_STRK_PRC,
                 FAB_ASGN_RFRNC_NO,
                 to_char( FAB_ASGND_DT, 'dd-Mon-yyyy' ),    /*** Ver 1.1 : mon to Mon ***/
                 FAB_ASGND_QTY,
                 FAB_OPNPSTN_QTY,
                 FAB_STTLMNT_PRC,
                 FAB_CURR_MKT_PRC,
/*1.4*/NVL((fab_brkrg_val+fab_stt+fab_src_tx+fab_sebi_tt+fab_tran_chrg+fab_stamp_duty+fab_other_chrg),0)
          FROM   FAB_FO_ASGNMNT_BOOK_HSTRY, CLM_CLNT_MSTR
          /*************WHERE  fab_clm_mtch_accnt = :c_mtch_accnt_no*************/
          WHERE  FAB_CLM_MTCH_ACCNT =CLM_MTCH_ACCNT
          AND    CLM_BP_ID  = :c_user_id											
				/**	AND    FAB_XCHNG_CD       = :c_exchange_cd *** Ver 1.6 ***/
          AND    FAB_XCHNG_CD     LIKE :c_exchange_cd  /*** Ver 1.6 ***/
          AND    FAB_ASGN_RFRNC_NO  >= :c_min_ref_num
          AND    FAB_ASGN_RFRNC_NO  <  :c_max_ref_num
          ORDER BY 10;

        END;
      END-EXEC;
    }

  }                                                   /* ver 1.5 for BPID ends*/
  else                                                /* ver 1.5 for non BPID Starts */
  {
      li_rec_cnt_dt = 0 ;
      strcpy(c_user_id , st_usr_prfl.c_user_id );			
      EXEC SQL
      SELECT    1
      INTO    :li_rec_cnt_dt
      FROM      dual
      WHERE     EXISTS
      (
        SELECT    1
        FROM    FAB_FO_ASGNMNT_BOOK_HSTRY,UAC_USR_ACCNTS
        /****WHERE  fab_clm_mtch_accnt = :c_mtch_accnt_no ******/
        WHERE  FAB_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
        /** AND    FAB_XCHNG_CD       = :c_exchange_cd *** Ver 1.6 ***/
        AND    FAB_XCHNG_CD     LIKE :c_exchange_cd   /*** Ver 1.6 ***/
        AND    FAB_ASGN_RFRNC_NO  >= :c_min_ref_num
        AND    FAB_ASGN_RFRNC_NO  <  :c_max_ref_num
        AND    UAC_USR_ID         =  :c_user_id				
      );

    if ( ( SQLCODE !=0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "S31060", SQLMSG, c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if ( li_rec_cnt_dt != 1 )
    {
      EXEC SQL EXECUTE
        BEGIN
          OPEN  :sys_cursor FOR
          SELECT FAB_CLM_MTCH_ACCNT,
                 FAB_XCHNG_CD,
                 FAB_PRDCT_TYP,
                 FAB_INDSTK,
                 FAB_UNDRLYNG,
                 to_char( FAB_EXPRY_DT, 'dd-Mon-yyyy' ),    /*** Ver 1.1 : mon to Mon ***/
                 FAB_EXER_TYP,
                 FAB_OPT_TYP,
                 FAB_STRK_PRC,
                 FAB_ASGN_RFRNC_NO,
                 to_char( FAB_ASGND_DT, 'dd-Mon-yyyy' ),    /*** Ver 1.1 : mon to Mon ***/
                 FAB_ASGND_QTY,
                 FAB_OPNPSTN_QTY,
                 FAB_STTLMNT_PRC,
                 FAB_CURR_MKT_PRC,
/*1.4*/					 NVL((FAB_BRKRG_VAL+FAB_STT+FAB_SRC_TX+FAB_SEBI_TT+FAB_TRAN_CHRG+FAB_STAMP_DUTY+FAB_OTHER_CHRG),0)
          FROM   FAB_FO_ASGNMNT_BOOK,UAC_USR_ACCNTS
          /********WHERE  fab_clm_mtch_accnt = :c_mtch_accnt_no*********/
          WHERE  FAB_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
         /** AND    FAB_XCHNG_CD       =  :c_exchange_cd *** Ver 1.6 ***/
          AND    FAB_XCHNG_CD   LIKE :c_exchange_cd   /*** Ver 1.6 ***/
          AND    UAC_USR_ID         =  :c_user_id            
          AND    FAB_ASGN_RFRNC_NO  >= :c_min_ref_num
          AND    FAB_ASGN_RFRNC_NO  <  :c_max_ref_num
        	ORDER BY 10;
        END;
      END-EXEC;
    }
    else
    {
      EXEC SQL EXECUTE
        BEGIN
          OPEN  :sys_cursor FOR
          SELECT FAB_CLM_MTCH_ACCNT,
                 FAB_XCHNG_CD,
                 FAB_PRDCT_TYP,
                 FAB_INDSTK,
                 FAB_UNDRLYNG,
                 to_char( FAB_EXPRY_DT, 'dd-Mon-yyyy' ),    /*** Ver 1.1 : mon to Mon ***/
                 FAB_EXER_TYP,
                 FAB_OPT_TYP,
                 FAB_STRK_PRC,
                 FAB_ASGN_RFRNC_NO,
                 to_char( FAB_ASGND_DT, 'dd-Mon-yyyy' ),    /*** Ver 1.1 : mon to Mon ***/
                 FAB_ASGND_QTY,
                 FAB_OPNPSTN_QTY,
                 FAB_STTLMNT_PRC,
                 FAB_CURR_MKT_PRC,
/*1.4*/NVL((FAB_BRKRG_VAL+FAB_STT+FAB_SRC_TX+FAB_SEBI_TT+FAB_TRAN_CHRG+FAB_STAMP_DUTY+FAB_OTHER_CHRG
),0)
          FROM   FAB_FO_ASGNMNT_BOOK,UAC_USR_ACCNTS
          /******************WHERE  fab_clm_mtch_accnt = :c_mtch_accnt_no******************/
          WHERE  FAB_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
          AND    UAC_USR_ID         =  :c_user_id       			 
				/**	AND    FAB_XCHNG_CD       =  :c_exchange_cd *** Ver 1.6 ***/
          AND    FAB_XCHNG_CD  LIKE :c_exchange_cd   /*** Ver 1.6 ***/
          AND    FAB_ASGN_RFRNC_NO  >= :c_min_ref_num
          AND    FAB_ASGN_RFRNC_NO  <  :c_max_ref_num 
          
          UNION ALL

          SELECT FAB_CLM_MTCH_ACCNT,
                 FAB_XCHNG_CD,
                 FAB_PRDCT_TYP,
                 FAB_INDSTK,
                 FAB_UNDRLYNG,
                 to_char( FAB_EXPRY_DT, 'dd-Mon-yyyy' ),    /**Ver 1.1 : mon to Mon ***/
                 FAB_EXER_TYP,
                 FAB_OPT_TYP,
                 FAB_STRK_PRC,
                 FAB_ASGN_RFRNC_NO,
                 to_char( FAB_ASGND_DT, 'dd-Mon-yyyy' ),    /** Ver 1.1 : mon to mon ***/    
                 FAB_ASGND_QTY,
                 FAB_OPNPSTN_QTY,
                 FAB_STTLMNT_PRC,
                 FAB_CURR_MKT_PRC,
/*V 1.4 */   NVL((FAB_BRKRG_VAL+FAB_STT+FAB_SRC_TX+FAB_SEBI_TT+FAB_TRAN_CHRG+FAB_STAMP_DUTY+FAB_OTHeR_CHRG),0)
          FROM   FAB_FO_ASGNMNT_BOOK_HSTRY,UAC_USR_ACCNTS
          WHERE  FAB_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
          AND    UAC_USR_ID         =  :c_user_id       		 
					/** AND    FAB_XCHNG_CD       =  :c_exchange_cd *** Ver 1.6 ***/
          AND    FAB_XCHNG_CD    LIKE :c_exchange_cd   /*** Ver 1.6 ***/
          AND    FAB_ASGN_RFRNC_NO  >= :c_min_ref_num
          AND    FAB_ASGN_RFRNC_NO  <  :c_max_ref_num
          ORDER BY 10;
        END;
      END-EXEC;
    }
   }                                                      /* ver 1.5 for  non BPID ends */
  }
	/***Ver 1.5 Ends Here**********/
	else
	{
		if ( c_opr_typ ==  WITH_DATE_IP )
		{

			if ( c_date_flag == 'N' )
			{
				fn_errlog( c_ServiceName, "S31065", 
												"From/To Dates are not Found in the Buffer", c_errmsg  );
				strcpy(c_errmsg,"From/To Dates are not Found in the Buffer");
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      /*****	tpcommit(0); *********/                     /*Ver 1.5*/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			li_rec_cnt_dt = 0 ;
			EXEC SQL
				SELECT    1
				INTO    :li_rec_cnt_dt
				FROM      dual
				WHERE     EXISTS
				(
					SELECT    1
					FROM    FAB_FO_ASGNMNT_BOOK_HSTRY
					WHERE  FAB_CLM_MTCH_ACCNT = :c_mtch_accnt_no
					/*** AND    FAB_XCHNG_CD 			= :c_exchange_cd *** Ver 1.6 ***/
          AND    FAB_XCHNG_CD   LIKE :c_exchange_cd    /*** Ver 1.6 ***/
					AND		 FAB_ASGN_RFRNC_NO 	>= :c_min_ref_num
					AND		 FAB_ASGN_RFRNC_NO 	<  :c_max_ref_num
				);

			if ( ( SQLCODE !=0 ) && ( SQLCODE != NO_DATA_FOUND ) )
			{
				fn_errlog( c_ServiceName, "S31070", SQLMSG, c_errmsg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
     /*** 	tpcommit(0); **********/                       /** Ver 1.5 **/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			if ( li_rec_cnt_dt != 1 )
			{
				EXEC SQL EXECUTE
					BEGIN
						OPEN	:sys_cursor	FOR
						SELECT FAB_CLM_MTCH_ACCNT,
									 FAB_XCHNG_CD,
									 FAB_PRDCT_TYP,
									 FAB_INDSTK,
									 FAB_UNDRLYNG,
									 to_char( FAB_EXPRY_DT, 'dd-Mon-yyyy' ),		/*** Ver 1.1 : mon to Mon ***/
									 FAB_EXER_TYP,
									 FAB_OPT_TYP,
									 FAB_STRK_PRC,
									 FAB_ASGN_RFRNC_NO,
									 to_char( FAB_ASGND_DT, 'dd-Mon-yyyy' ),		/*** Ver 1.1 : mon to Mon ***/
									 FAB_ASGND_QTY,
									 FAB_OPNPSTN_QTY,
									 FAB_STTLMNT_PRC,
									 FAB_CURR_MKT_PRC,
/* 1.4  */        NVL((FAB_BRKRG_VAL+FAB_STT+FAB_SRC_TX+FAB_SEBI_TT+FAB_TRAN_CHRG+FAB_STAMP_DUTY+FAB_OTHER_CHRG),0)
						FROM   FAB_FO_ASGNMNT_BOOK
						WHERE  FAB_CLM_MTCH_ACCNT = :c_mtch_accnt_no
						/** AND    FAB_XCHNG_CD 			= :c_exchange_cd ** Ver 1.6 ***/
            AND    FAB_XCHNG_CD   LIKE :c_exchange_cd  /*** Ver 1.6 ***/ 
						AND		 FAB_ASGN_RFRNC_NO 	>= :c_min_ref_num
						AND		 FAB_ASGN_RFRNC_NO 	<  :c_max_ref_num
						ORDER BY 10;
					END;
				END-EXEC;
			}
			else
			{
				EXEC SQL EXECUTE
					BEGIN
						OPEN	:sys_cursor	FOR
						SELECT FAB_CLM_MTCH_ACCNT,
									 FAB_XCHNG_CD,
									 FAB_PRDCT_TYP,
									 FAB_INDSTK,
									 FAB_UNDRLYNG,
									 to_char( FAB_EXPRY_DT, 'dd-Mon-yyyy' ),		/*** Ver 1.1 : mon to Mon ***/
									 FAB_EXER_TYP,
									 FAB_OPT_TYP,
									 FAB_STRK_PRC,
									 FAB_ASGN_RFRNC_NO,
									 to_char( FAB_ASGND_DT, 'dd-Mon-yyyy' ),		/*** Ver 1.1 : mon to Mon ***/
									 FAB_ASGND_QTY,
									 FAB_OPNPSTN_QTY,
									 FAB_STTLMNT_PRC,
									 FAB_CURR_MKT_PRC,
/* 1.4  */        NVL((FAB_BRKRG_VAL+FAB_STT+FAB_SRC_TX+FAB_SEBI_TT+FAB_TRAN_CHRG+FAB_STAMP_DUTY+FAB_OTHER_CHRG),0)
						FROM   FAB_FO_ASGNMNT_BOOK
						WHERE  FAB_CLM_MTCH_ACCNT = :c_mtch_accnt_no
						/*** AND    FAB_XCHNG_CD 			= :c_exchange_cd **** Ver 1.6 ***/
            AND    FAB_XCHNG_CD   LIKE :c_exchange_cd     /**** Ver 1.6 ***/
						AND		 FAB_ASGN_RFRNC_NO 	>= :c_min_ref_num
						AND		 FAB_ASGN_RFRNC_NO 	<  :c_max_ref_num

						UNION ALL

						SELECT FAB_CLM_MTCH_ACCNT,
									 FAB_XCHNG_CD,
									 FAB_PRDCT_TYP,
									 FAB_INDSTK,
									 FAB_UNDRLYNG,
									 to_char( FAB_EXPRY_DT, 'dd-Mon-yyyy' ),		/*** Ver 1.1 : mon to Mon ***/
									 FAB_EXER_TYP,
									 FAB_OPT_TYP,
									 FAB_STRK_PRC,
									 FAB_ASGN_RFRNC_NO,
									 to_char( FAB_ASGND_DT, 'dd-Mon-yyyy' ),		/*** Ver 1.1 : mon to Mon ***/
									 FAB_ASGND_QTY,
									 FAB_OPNPSTN_QTY,
									 FAB_STTLMNT_PRC,
									 FAB_CURR_MKT_PRC,
	/* 1.4  */      NVL((FAB_BRKRG_VAL+FAB_STT+FAB_SRC_TX+FAB_SEBI_TT+FAB_TRAN_CHRG+FAB_STAMP_DUTY+FAB_OTHER_CHRG),0)
						FROM   FAB_FO_ASGNMNT_BOOK_HSTRY
						WHERE  FAB_CLM_MTCH_ACCNT = :c_mtch_accnt_no
						/*** AND    FAB_XCHNG_CD 			= :c_exchange_cd **** Ver 1.6 ***/
            AND    FAB_XCHNG_CD   LIKE :c_exchange_cd    /*** Ver 1.6 ***/
						AND		 FAB_ASGN_RFRNC_NO 	>= :c_min_ref_num
						AND		 FAB_ASGN_RFRNC_NO 	<  :c_max_ref_num
						ORDER BY 10;

					END;
				END-EXEC;
			}
		}
		else if ( c_opr_typ ==  WITH_DATE_AND_UNDRLYNG_IP )
		{

			if ( c_date_flag == 'N' )
			{
				fn_errlog( c_ServiceName, "S31075", 
												"From/To Dates are not Found in the Buffer", c_errmsg  );
				strcpy(c_errmsg,"From/To Dates are not Found in the Buffer");
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
  /***    	tpcommit(0);*******/                           /*** Ver 1.5 ***/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			li_rec_cnt_und_dt = 0 ;
			EXEC SQL
				SELECT    1
				INTO    :li_rec_cnt_und_dt
				FROM      dual
				WHERE     EXISTS
				(
					SELECT    1
					FROM    FAB_FO_ASGNMNT_BOOK_HSTRY
					WHERE  FAB_CLM_MTCH_ACCNT = :c_mtch_accnt_no
					/*** AND    FAB_XCHNG_CD 			= :c_exchange_cd *** Ver 1.6 ***/
          AND    FAB_XCHNG_CD  LIKE :c_exchange_cd    /*** Ver 1.6 ***/
					AND		 FAB_UNDRLYNG 			= :c_underlying
					AND		 FAB_ASGN_RFRNC_NO 	>= :c_min_ref_num
					AND		 FAB_ASGN_RFRNC_NO 	<  :c_max_ref_num
				);

			if ( ( SQLCODE !=0 ) && ( SQLCODE != NO_DATA_FOUND ) )
			{
				fn_errlog( c_ServiceName, "S31080", SQLMSG, c_errmsg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
  /*******    	tpcommit(0); *********/                        /**** Ver 1.5 ******/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			if ( li_rec_cnt_und_dt != 1 )
			{
				EXEC SQL EXECUTE
					BEGIN
						OPEN	:sys_cursor	FOR
						SELECT FAB_CLM_MTCH_ACCNT,
									 FAB_XCHNG_CD,
									 FAB_PRDCT_TYP,
									 FAB_INDSTK,
									 FAB_UNDRLYNG,
									 to_char( FAB_EXPRY_DT, 'dd-Mon-yyyy' ),		/*** Ver 1.1 : mon to Mon ***/
									 FAB_EXER_TYP,
									 FAB_OPT_TYP,
									 FAB_STRK_PRC,
									 FAB_ASGN_RFRNC_NO,
									 to_char( FAB_ASGND_DT, 'dd-Mon-yyyy' ),		/*** Ver 1.1 : mon to Mon ***/
									 FAB_ASGND_QTY,
									 FAB_OPNPSTN_QTY,
									 FAB_STTLMNT_PRC,
									 FAB_CURR_MKT_PRC,
	 /* 1.4  */      NVL((FAB_BRKRG_VAL+FAB_STT+FAB_SRC_TX+FAB_SEBI_TT+FAB_TRAN_CHRG+FAB_STAMP_DUTY+FAB_OTHER_CHRG),0)
						FROM   FAB_FO_ASGNMNT_BOOK
						WHERE  FAB_CLM_MTCH_ACCNT = :c_mtch_accnt_no
						/*** AND    FAB_XCHNG_CD 			= :c_exchange_cd  *** Ver 1.6 ***/
            AND    FAB_XCHNG_CD  LIKE :c_exchange_cd      /*** Ver 1.6 ***/
						AND		 FAB_UNDRLYNG 			= :c_underlying
						AND		 FAB_ASGN_RFRNC_NO 	>= :c_min_ref_num
						AND		 FAB_ASGN_RFRNC_NO 	<  :c_max_ref_num
						ORDER BY 10;
					END;
				END-EXEC;
			}
			else
			{
				EXEC SQL EXECUTE
					BEGIN
						OPEN	:sys_cursor	FOR
						SELECT FAB_CLM_MTCH_ACCNT,
									 FAB_XCHNG_CD,
									 FAB_PRDCT_TYP,
									 FAB_INDSTK,
									 FAB_UNDRLYNG,
									 to_char( FAB_EXPRY_DT, 'dd-Mon-yyyy' ),		/*** Ver 1.1 : mon to Mon ***/
									 FAB_EXER_TYP,
									 FAB_OPT_TYP,
									 FAB_STRK_PRC,
									 FAB_ASGN_RFRNC_NO,
									 to_char( FAB_ASGND_DT, 'dd-Mon-yyyy' ),		/*** Ver 1.1 : mon to Mon ***/
									 FAB_ASGND_QTY,
									 FAB_OPNPSTN_QTY,
									 FAB_STTLMNT_PRC,
									 FAB_CURR_MKT_PRC,
  /* 1.4  */       NVL((FAB_BRKRG_VAL+FAB_STT+FAB_SRC_TX+FAB_SEBI_TT+FAB_TRAN_CHRG+FAB_STAMP_DUTY+FAB_OTHER_CHRG),0)
						FROM   FAB_FO_ASGNMNT_BOOK
						WHERE  FAB_CLM_MTCH_ACCNT = :c_mtch_accnt_no
						/*** AND    FAB_XCHNG_CD 			= :c_exchange_cd *** Ver 1.6 ***/
            AND    FAB_XCHNG_CD    LIKE :c_exchange_cd /*** Ver 1.6 ***/
						AND		 FAB_UNDRLYNG 			= :c_underlying
						AND		 FAB_ASGN_RFRNC_NO 	>= :c_min_ref_num
						AND		 FAB_ASGN_RFRNC_NO 	<  :c_max_ref_num

						UNION ALL

						SELECT FAB_CLM_MTCH_ACCNT,
									 FAB_XCHNG_CD,
									 FAB_PRDCT_TYP,
									 FAB_INDSTK,
									 FAB_UNDRLYNG,
									 to_char( FAB_EXPRY_DT, 'dd-Mon-yyyy' ),		/*** Ver 1.1 : mon to Mon ***/
									 FAB_EXER_TYP,
									 FAB_OPT_TYP,
									 FAB_STRK_PRC,
									 FAB_ASGN_RFRNC_NO,
									 to_char( FAB_ASGND_DT, 'dd-Mon-yyyy' ),		/*** Ver 1.1 : mon to Mon ***/
									 FAB_ASGND_QTY,
									 FAB_OPNPSTN_QTY,
									 FAB_STTLMNT_PRC,
									 FAB_CURR_MKT_PRC,
/* 1.4  */         NVL((FAB_BRKRG_VAL+FAB_STT+FAB_SRC_TX+FAB_SEBI_TT+FAB_TRAN_CHRG+FAB_STAMP_DUTY+FAB_OTHER_CHRG),0)									 
						FROM   FAB_FO_ASGNMNT_BOOK_HSTRY
						WHERE  FAB_CLM_MTCH_ACCNT = :c_mtch_accnt_no
						/*** AND    FAB_XCHNG_CD 			= :c_exchange_cd *** Ver 1.6 ***/
            AND    FAB_XCHNG_CD   LIKE :c_exchange_cd  /*** Ver 1.6 ***/
						AND		 FAB_UNDRLYNG 			= :c_underlying
						AND		 FAB_ASGN_RFRNC_NO 	>= :c_min_ref_num
						AND		 FAB_ASGN_RFRNC_NO 	<  :c_max_ref_num
						ORDER BY 10;

					END;
				END-EXEC;
			}
		}
		else if ( c_opr_typ ==  WITHOUT_DATE_IP_AND_UNDRLYNG )
		{
	/*******************
			EXEC SQL
				SELECT to_char( EXG_NXT_TRD_DT, 'DD-Mon-YYYY' )
				INTO	 :c_exg_nxt_dt
				FROM 	 EXG_XCHNG_MSTR
				WHERE	 EXG_XCHNG_CD = :c_exchange_cd;
			if ( SQLCODE != 0 )
			{
				fn_errlog( c_ServiceName, "S31085", SQLMSG, c_errmsg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpcommit(0);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			SETLEN( c_exg_nxt_dt );

			strcpy ( c_min_ref_num, (char *)fn_getref ( c_exg_nxt_dt.arr, "00", MIN ) );
			strcpy ( c_max_ref_num, (char *)fn_getref ( c_exg_nxt_dt.arr, "00", MAX ) );
	*******************/

			EXEC SQL EXECUTE
				BEGIN
					OPEN	:sys_cursor	FOR
					SELECT FAB_CLM_MTCH_ACCNT,
								 FAB_XCHNG_CD,
								 FAB_PRDCT_TYP,
								 FAB_INDSTK,
								 FAB_UNDRLYNG,
								 to_char( FAB_EXPRY_DT, 'dd-Mon-yyyy' ),		/*** Ver 1.1 : mon to Mon ***/
								 FAB_EXER_TYP,
								 FAB_OPT_TYP,
								 FAB_STRK_PRC,
								 FAB_ASGN_RFRNC_NO,
								 to_char( FAB_ASGND_DT, 'dd-Mon-yyyy' ),		/*** Ver 1.1 : mon to Mon ***/
								 FAB_ASGND_QTY,
								 FAB_OPNPSTN_QTY,
								 FAB_STTLMNT_PRC,
								 FAB_CURR_MKT_PRC,
/* 1.4  */       NVL((FAB_BRKRG_VAL+FAB_STT+FAB_SRC_TX+FAB_SEBI_TT+FAB_TRAN_CHRG+FAB_STAMP_DUTY+FAB_OTHER_CHRG),0)								 
					FROM   FAB_FO_ASGNMNT_BOOK
					WHERE  FAB_CLM_MTCH_ACCNT = :c_mtch_accnt_no
					/** AND    FAB_XCHNG_CD 			= :c_exchange_cd *** Ver 1.6 ***/
          AND    FAB_XCHNG_CD  LIKE :c_exchange_cd    /*** Ver 1.6 ***/
					ORDER BY 10;

	/***************************************************
					AND		 fab_asgn_rfrnc_no >= :c_min_ref_num
					AND		 fab_asgn_rfrnc_no <  :c_max_ref_num;
	***************************************************/

				END;
			END-EXEC;
		}
		else if ( c_opr_typ ==  WITHOUT_DATE_IP_WITH_UNDRLYNG_INP )
		{
	/**********************
			EXEC SQL
				SELECT to_char( EXG_NXT_TRD_DT, 'DD-Mon-YYYY' )
				INTO	 :c_exg_nxt_dt
				FROM 	 EXG_XCHNG_MSTR
				WHERE	 EXG_XCHNG_CD = :c_exchange_cd;
			if ( SQLCODE != 0 )
			{
				fn_errlog( c_ServiceName, "S31090", SQLMSG, c_errmsg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
     	  tpcommit(0); 
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			SETLEN( c_exg_nxt_dt );

			strcpy ( c_min_ref_num, (char *)fn_getref ( c_exg_nxt_dt.arr, "00", MIN ) );
			strcpy ( c_max_ref_num, (char *)fn_getref ( c_exg_nxt_dt.arr, "00", MAX ) );
	**********************/

			EXEC SQL EXECUTE
				BEGIN
					OPEN	:sys_cursor	FOR
					SELECT FAB_CLM_MTCH_ACCNT,
								 FAB_XCHNG_CD,
								 FAB_PRDCT_TYP,
								 FAB_INDSTK,
								 FAB_UNDRLYNG,
								 to_char( FAB_EXPRY_DT, 'dd-Mon-yyyy' ),		/*** Ver 1.1 : mon to Mon ***/
								 FAB_EXER_TYP,
								 FAB_OPT_TYP,
								 FAB_STRK_PRC,
								 FAB_ASGN_RFRNC_NO,
								 to_char( FAB_ASGND_DT, 'dd-Mon-yyyy' ),		/*** Ver 1.1 : mon to Mon ***/
								 FAB_ASGND_QTY,
								 FAB_OPNPSTN_QTY,
								 FAB_STTLMNT_PRC,
								 FAB_CURR_MKT_PRC,
/* 1.4  */       NVL((FAB_BRKRG_VAL+FAB_STT+FAB_SRC_TX+FAB_SEBI_TT+FAB_TRAN_CHRG+FAB_STAMP_DUTY+FAB_OTHER_CHRG),0)								 
					FROM   FAB_FO_ASGNMNT_BOOK
					WHERE  FAB_CLM_MTCH_ACCNT = :c_mtch_accnt_no
					/** AND    FAB_XCHNG_CD 			= :c_exchange_cd *** Ver 1.6 ***/
          AND    FAB_XCHNG_CD   LIKE :c_exchange_cd  /*** Ver 1.6 ***/
					AND		 FAB_UNDRLYNG 			= :c_underlying
					ORDER BY 10;

	/*******************************************************
					AND		 fab_asgn_rfrnc_no >= :c_min_ref_num
					AND		 fab_asgn_rfrnc_no <  :c_max_ref_num;
	*******************************************************/
				END;
			END-EXEC;
		}
		else
		{
			strcpy( c_errmsg, "Invalid Operation Type" );
			fn_errlog ( c_ServiceName, "S31095", DEFMSG, c_errmsg );
      /******   	tpcommit(0); **********/                         /*** Ver 1.5 *****/
			tpreturn ( TPFAIL, ERR_BFR, ( char * )c_errmsg, 0, 0 );
		}
	}

	if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31100", SQLMSG, c_errmsg  );
    EXEC SQL FREE :sys_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
		/*******    tpcommit(0); *******/                            /*** Ver 1.5 ****/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
 		/*** Ver 1.1 starts  ****/		

		/**tpfree((char *) ptr_fml_Obuf);**/ /**Ver 1.3 New Log**/

	ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN  /***i_count****/ );
				/***Ver 1.1 Output Buffer is allocated size of (number of mtch accnt's * 1024) ***/
  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31105", TPMSG, c_errmsg  );
    EXEC SQL CLOSE :sys_cursor;
    EXEC SQL FREE :sys_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
		/******    tpcommit(0);*********/                              /*** Ver 1.5 *****/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /************* Ver 1.7 *****************************************************
  ptr_st_asgnmt = ( struct vw_asgnmt * ) tpalloc ( "VIEW32",
                                                         "vw_asgnmt",
                                               sizeof ( struct vw_asgnmt ) );
  ************** Ver 1.7 ******************************************************/

  /****** Ver 1.7 starts here ******/
 
  ptr_st_asgnmt = malloc(sizeof(struct vw_asgnmt));

  /****** Ver 1.7 Ends Here *******/

  if ( ptr_st_asgnmt == NULL )
  {
    fn_errlog( c_ServiceName, "S31110", TPMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
	  /*******   tpcommit(0);********/                              /*** Ver 1.5 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  memset ( ptr_st_asgnmt, 0, sizeof ( struct vw_asgnmt ) );

	strcpy ( ptr_st_asgnmt->c_user_id, st_usr_prfl.c_user_id );
  ptr_st_asgnmt->c_oprn_typ = c_opr_typ;
  strcpy ( ptr_st_asgnmt->c_cln_mtch_accnt, c_mtch_accnt_no );

  i_counter = 1 ;

  /***  VER 1.1 FOR MEMORY REALLOCATION ***/
  l_bufferlength  =  sizeof( struct vw_asgnmt )
	/**               +  sizeof( l_acnt_id )		**	Ver 1.1 : Commented	***/
									+	 100;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "BUFFER LENGTH IS :%ld:", l_bufferlength);
  }		/***  VER 1.1  ***/

	for ( ; ; )
  {
    EXEC SQL FETCH :sys_cursor
              INTO :ptr_st_asgnmt->c_cln_mtch_accnt,
                   :ptr_st_asgnmt->c_xchng_cd,
                   :ptr_st_asgnmt->c_prd_typ,
                   :ptr_st_asgnmt->c_ctgry_indstk,
                   :ptr_st_asgnmt->c_undrlyng,
                   :ptr_st_asgnmt->c_expry_dt,
                   :ptr_st_asgnmt->c_exrc_typ,
                   :ptr_st_asgnmt->c_opt_typ,
                   :ptr_st_asgnmt->l_strike_prc,
                   :ptr_st_asgnmt->c_asgn_rfrnc,
                   :ptr_st_asgnmt->c_asgn_dt,
                   :ptr_st_asgnmt->l_asgnd_qty,
                   :ptr_st_asgnmt->l_opnpstn_qty,
                   :ptr_st_asgnmt->l_sttlmnt_prc,
                   :ptr_st_asgnmt->l_cur_mkt_prc,
                   :l_fab_brkrg_val;									/* 1.4 */

		if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
       	/* 1.4 */
      	fn_userlog( c_ServiceName, "No data found in main FETCH. No assignment records are present !! ");
				break;
      }
      else
      {
        fn_errlog( c_ServiceName, "S31115", SQLMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        tpfree ( ( char * ) ptr_st_asgnmt );
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
  			/********  		tpcommit(0);*************/                    /*** Ver 1.5 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

		rtrim( ptr_st_asgnmt->c_expry_dt );
		rtrim( ptr_st_asgnmt->c_asgn_rfrnc );
		rtrim( ptr_st_asgnmt->c_asgn_dt );

		if(DEBUG_MSG_LVL_3)
  	{
			fn_userlog(c_ServiceName,"Assignment rfrnc :%s:",ptr_st_asgnmt->c_asgn_rfrnc);	
			fn_userlog(c_ServiceName,"Match Accnt :%s:",ptr_st_asgnmt->c_cln_mtch_accnt);	
		}

		/******************	VER 1.1 FOR MEMORY REALLOCATION	STARTS	*******************/

		if(DEBUG_MSG_LVL_3)
  	{
			fn_userlog(c_ServiceName,"UNUSED SPACE IS :%ld:", Funused32(ptr_fml_Obuf ) );
			fn_userlog(c_ServiceName,"NEEDED SPACE IS :%ld:", Fneeded32(1,l_bufferlength));
		}



    if ( Funused32( ptr_fml_Obuf ) < Fneeded32( 1, l_bufferlength) ) 
    {
      i_counter++;
      ptr_fml_Tempbuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,i_counter * MIN_FML_BUF_LEN );
      if ( ptr_fml_Tempbuf == NULL )
      {
        fn_errlog( c_ServiceName, "S31120", TPMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        tpfree ( ( char * ) ptr_st_asgnmt );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpcommit(0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else
      {
        ptr_fml_Obuf = ptr_fml_Tempbuf;
        fn_userlog( c_ServiceName, "COUNT IS :%ld: & BUFFER LENGTH IS :%ld:",i_counter, i_counter * MIN_FML_BUF_LEN );
      }
    }
    /****************** VER 1.1 FOR MEMORY REALLOCATION ENDS	*******************/

    /****** Commented in Ver 1.7 *************************************
		i_returncode = Fvstof32( ptr_fml_Obuf, (char *) ptr_st_asgnmt,
                              FCONCAT, "vw_asgnmt" );
    ****************** Ver 1.7 Ends Here ****************************/

    /********** Ver 1.7 Starts Here ***********/
    i_returncode = fn_pack_vartofml( c_ServiceName,
                                     c_errmsg,
                                     &ptr_fml_Obuf,
                                     15,
                                     FFO_EBA_MTCH_ACT_NO,(char*)ptr_st_asgnmt->c_cln_mtch_accnt,
                                     FFO_XCHNG_CD,(char*)ptr_st_asgnmt->c_xchng_cd,
                                     FFO_PRDCT_TYP,(char*)&ptr_st_asgnmt->c_prd_typ,
                                     FFO_CTGRY_INDSTK,(char*)&ptr_st_asgnmt->c_ctgry_indstk,
                                     FFO_UNDRLYNG,(char*)ptr_st_asgnmt->c_undrlyng,
                                     FFO_EXPRY_DT,(char*)ptr_st_asgnmt->c_expry_dt,
                                     FFO_EXER_TYP,(char*)&ptr_st_asgnmt->c_exrc_typ,
                                     FFO_OPT_TYP,(char*)&ptr_st_asgnmt->c_opt_typ, 
                                     FFO_STRK_PRC,(char*)&ptr_st_asgnmt->l_strike_prc,
                                     FFO_ASGN_RFRNC,(char*)ptr_st_asgnmt->c_asgn_rfrnc,
                                     FFO_ASGN_DT,(char*)ptr_st_asgnmt->c_asgn_dt,
                                     FFO_ASGN_QTY,(char*)&ptr_st_asgnmt->l_asgnd_qty,
                                     FFO_OPNPSTN_QTY,(char*)&ptr_st_asgnmt->l_opnpstn_qty,
                                     FFO_STLMNT_PRC,(char*)&ptr_st_asgnmt->l_sttlmnt_prc,
                                     FFO_CUR_MKT_PRC,(char*)&ptr_st_asgnmt->l_cur_mkt_prc
                                    );                        
    /********** Ver 1.7 Ends Here *************/

    if ( i_returncode == -1 )
    {	

   /*********** COMMENTING FOR VER 1.1  STARTS	***********
      if( Ferror32 == FNOSPACE )
      {
        i_counter++;
        ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
                            i_counter * MIN_FML_BUF_LEN * i_count );

        if ( ptr_fml_Obuf == NULL )
        {
          fn_errlog( c_ServiceName, "S31125", TPMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
          tpfree ( ( char * ) ptr_st_asgnmt );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
   			  tpcommit(0);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

				i_returncode = Fvstof32( ptr_fml_Obuf, (char *) ptr_st_asgnmt,
                                 FCONCAT, "vw_asgnmt" );

        if ( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31130", FMLMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
          tpfree ( ( char * ) ptr_st_asgnmt );
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
   			  tpcommit(0);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }
      else								*********** COMMENTING FOR VER 1.1 ENDS  ***************/
      {
        fn_errlog( c_ServiceName, "S31135", FMLMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        tpfree ( ( char * ) ptr_st_asgnmt );
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
   			/***** 		tpcommit(0); ********/                           /*** Ver 1.5 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		}

		/***	Ver 1.1 : Comment Starts	***

		#ifdef DEBUG
			fn_userlog(c_ServiceName,"i_counter value is [%ld]",i_counter);
		#endif

		if( Fadd32( ptr_fml_Obuf, FFO_ACTN_ID ,(char*)&_acnt_id, 0 ) == -1 )
		{
			fn_errlog( c_ServiceName, "S31140", FMLMSG, c_errmsg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );
      tpfree ( ( char * ) ptr_fml_Obuf );
      l_acnt_id = -1;
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID ,(char*)&l_acnt_id, 0 );
    	tpcommit(0);           
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}			**	Ver 1.1 : Comment Ends	***/

		/*1.4 starts */  	
 		fn_userlog(c_ServiceName, "FAB Brokerage :%ld:",l_fab_brkrg_val);
   	
  	if( Fadd32( ptr_fml_Obuf, FFO_BRKRG_VL ,(char*)&l_fab_brkrg_val, 0 ) == -1 )
		{
			fn_errlog( c_ServiceName, "S31145", FMLMSG, c_errmsg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );
      tpfree ( ( char * ) ptr_fml_Obuf );
      l_fab_brkrg_val = 0;
      Fadd32( ptr_fml_Ibuf, FFO_BRKRG_VL ,(char*)&l_fab_brkrg_val, 0 );
  		/****  	tpcommit(0);*******/                                  /*** Ver 1.5  ****/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}			

	 /*1.4 Ends*/
	}
  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE  :sys_cursor;
  tpfree ( ( char * ) ptr_st_asgnmt );
	/******tpcommit(0);********/                           /*** Ver 1.5 *****/
	
	if(DEBUG_MSG_LVL_3)
  {
		fn_userlog(c_ServiceName,"Before return from sfo_asgn_book for match:%s:",ptr_st_asgnmt->c_cln_mtch_accnt);
	}

		/***************V 1.1 Ends ****************/

/*Fprint32(ptr_fml_Obuf);	**Commented in Ver 1.1 ***/
  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
}
