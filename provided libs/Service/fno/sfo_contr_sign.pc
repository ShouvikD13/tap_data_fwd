/*************************************************************************************
Service	      :	 sfo_contr_sign.pc

Purpose       :  To update EBA table with the signature of the contract note
								 To update the table FNO_CNTRCT_MSTR , EA_CONF_MSTR  
								 1. If flag is 'U' update with the sign
								 2. If flag is 'S' clear the FCM_SGN_DT field for records 
										where sign is null
						
Input Param   :	  FFO_OPT_TYP - Flag (S/U frm ASP)
									FFO_NARRATION_ID- Contract no
									FFO_PIPE_ID - IP address
									FFO_DPID - Sign 
									FFO_USR_ID - User ID
									FFO_OPERATION_TYP - 'F' or 'E'

Output Param  :   Success/failure

Tables        :   FNO_CNTRCT_MSTR U
								  EA_CONF_MSTR		U

Versions      :   1.1 Changes for verification by Firoz Patel (FP).
							:   1.2 Fix for Ver 1.1 by Vidyayini Krish
							:   1.3 Splitting the transactions of unlocking sign flag and verify flag
							:   1.4 IBM Changes by Vidyayini Krish 
							:		1.5 Resigning of Old contracts by Shamili 
*************************************************************************************/

#include <stdio.h>
#include <fo_fml_def.h>
#include <atmi.h>
#include <sqlca.h>
#include <stdlib.h>
#include <fml32.h>
#include <fn_log.h>
#include <fo.h>
#include <fo_view_def.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <string.h> /* Ver 1.4 */
#include <fml_rout.h> /* Ver 1.4 */
#include <fn_read_debug_lvl.h> /* Ver 1.4 */

void SFO_CONTR_SIGN(TPSVCINFO *ptr_data)
{
	char c_ServiceName[33];
	char c_flag;
	char c_errmsg[100];
	char c_oper;
	char c_suc_fail ; /*1.1*/
	int err[15];
	int i;
	FBFR32 *ptr_Ibuf;
	FBFR32 *ptr_Obuf;

	EXEC SQL INCLUDE "table/fno_cntrct_mstr.h";
	EXEC SQL INCLUDE "table/ea_conf_mstr.h";

	ptr_Ibuf = (FBFR32 *)ptr_data->data;
	ptr_Obuf = (FBFR32 *)tpalloc("FML32",NULL, MIN_FML_BUF_LEN);

	if(ptr_Obuf == NULL)
	{
		fn_errlog(c_ServiceName,"S31005",TPMSG,c_errmsg);
		Fadd32( ptr_Ibuf,FFO_ERR_MSG, c_errmsg, 0 );
		tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
	}
	strcpy(c_ServiceName,ptr_data->name);
	INITDBGLVL(c_ServiceName);

	if(Fget32(ptr_Ibuf,FFO_OPERATION_TYP,0,(char*)&c_oper,0) == -1)
	{
		fn_errlog(c_ServiceName,"S31010",FMLMSG,c_errmsg) ;
		Fadd32(ptr_Ibuf,FFO_ERR_MSG,c_errmsg,0) ;
		tpreturn(TPFAIL,0L,(char *)ptr_Ibuf,0L,0) ;
	}	

	if(Fget32(ptr_Ibuf,FFO_OPT_TYP,0,(char*)&c_flag,0) == -1)
	{
		fn_errlog(c_ServiceName,"S31015",FMLMSG,c_errmsg) ;
		Fadd32(ptr_Ibuf,FFO_ERR_MSG,c_errmsg,0) ;
		tpreturn(TPFAIL,0L,(char *)ptr_Ibuf,0L,0) ;
	}

	fn_userlog(c_ServiceName,"C_FLG <%c>",c_flag);
	fn_userlog(c_ServiceName,"C_OPER <%c>",c_oper);
		
	if(c_flag == 'U' || c_flag == 'M')			/** Ver 1.5 c_flag ='M' added **/
	{
		fn_userlog(c_ServiceName," IN FLG = U");
		if(Fget32(ptr_Ibuf,FFO_DPID,0,(char*)sql_fcm_sign.arr,0) == -1)
		{
			fn_errlog(c_ServiceName,"S31020",FMLMSG,c_errmsg) ;
			Fadd32(ptr_Ibuf,FFO_ERR_MSG,c_errmsg,0) ;
			tpreturn(TPFAIL,0L,(char *)ptr_Ibuf,0L,0) ;
		}	
		
		if(Fget32(ptr_Ibuf,FFO_USR_ID,0,(char*)sql_fcm_sgn_usr_id.arr,0) == -1)
		{
			fn_errlog(c_ServiceName,"S31025",FMLMSG,c_errmsg) ;
			Fadd32(ptr_Ibuf,FFO_ERR_MSG,c_errmsg,0) ;
			tpreturn(TPFAIL,0L,(char *)ptr_Ibuf,0L,0) ;
		}
		
		if(Fget32(ptr_Ibuf,FFO_PIPE_ID,0,(char*)sql_fcm_ip.arr,0) == -1)
		{
			fn_errlog(c_ServiceName,"S31030",FMLMSG,c_errmsg) ;
			Fadd32(ptr_Ibuf,FFO_ERR_MSG,c_errmsg,0) ;
			tpreturn(TPFAIL,0L,(char *)ptr_Ibuf,0L,0) ;
		}
		if(Fget32(ptr_Ibuf,FFO_NARRATION_ID,0,(char*)sql_fcm_cntrct_nmbr.arr,0) == -1)
		{
			fn_errlog(c_ServiceName,"S31035",FMLMSG,c_errmsg) ;
			Fadd32(ptr_Ibuf,FFO_ERR_MSG,c_errmsg,0) ;
			tpreturn(TPFAIL,0L,(char *)ptr_Ibuf,0L,0) ;
		}
		SETLEN(sql_fcm_sign);
		SETLEN(sql_fcm_sgn_usr_id);
		SETLEN(sql_fcm_ip);
		SETLEN(sql_fcm_cntrct_nmbr);
		fn_userlog(c_ServiceName,"sgn usr id %s",sql_fcm_sgn_usr_id.arr);
		fn_userlog(c_ServiceName,"sql_fcm_ip %s",sql_fcm_ip.arr);
		fn_userlog(c_ServiceName,"sql_fcm_cntrct_nmbr %s",sql_fcm_cntrct_nmbr.arr);
	}

	/* 	c_oper		"F"  	Contract master sign operation
			c_oper		"E"		Exercise/Assgn contract sign operation	
			c_oper		"V"		Contract master or EA verify operation */

	if(c_oper == 'F')
	{
		fn_userlog(c_ServiceName,"C_OPER TYPE IS F");

		/* Ver 1.3 comment if(tpbegin(TRAN_TIMEOUT,0)== -1)
		{
			fn_userlog(c_ServiceName,"TPBEGIN failed");
			tpfree((char*)ptr_Obuf);
			fn_errlog(c_ServiceName,"S31040",TPMSG,c_errmsg);
			Fadd32( ptr_Ibuf,FFO_ERR_MSG,c_errmsg , 0 );
			tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
		} */

		if(c_flag == 'S') /* Release lock */
		{
			fn_userlog(c_ServiceName,"IN F AND S");
			/* release locks on all records where lock exists for more than 3 minutes */

			/* Ver 1.3 Begin tran */
			if(tpbegin(TRAN_TIMEOUT,0)== -1)
    	{
      	fn_userlog(c_ServiceName,"TPBEGIN failed");
      	tpfree((char*)ptr_Obuf);
      	fn_errlog(c_ServiceName,"S31045",TPMSG,c_errmsg);
      	Fadd32( ptr_Ibuf,FFO_ERR_MSG,c_errmsg , 0 );
      	tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
    	} 

			EXEC SQL
					UPDATE FNO_CNTRCT_MSTR
					SET FCM_SGN_FLG = 'N'
					/*FCM_SGN_DT = NULL, 1.2 */
					WHERE FCM_SGN_FLG = 'L' AND
					(sysdate-FCM_SGN_DT) > .002;

			if(SQLCODE != 0 && SQLCODE != 1403)
			{
				fn_userlog(c_ServiceName,"SQLCODE at update is <%d>",SQLCODE);
				tpfree((char*)ptr_Obuf);
				fn_errlog(c_ServiceName,"S31050",SQLMSG,c_errmsg);
				tpabort(0);
				Fadd32( ptr_Ibuf,FFO_ERR_MSG,c_errmsg , 0 );
				tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
			} 
			
			sprintf(c_errmsg,"%d",sqlca.sqlerrd[2]);
			strcat(c_errmsg," Locks released");
			Fadd32( ptr_Obuf,FFO_ERR_MSG,c_errmsg,0);

			/******* Ver 1.5 Starts *******************************

			EXEC SQL
			UPDATE FNO_CNTRCT_MSTR
			SET FCM_SGN_DT = NULL,
			FCM_OLD_SIGN_FLG = 'N'
			WHERE FCM_OLD_SIGN_FLG ='L' AND
			FCM_SGN_FLG='Y'	AND           **** index on FCM_SGN_FLG **
			(sysdate-FCM_SGN_DT) > .002;				

			if(SQLCODE != 0 && SQLCODE != 1403)
      {
        fn_userlog(c_ServiceName,"SQLCODE at update is <%d>",SQLCODE);
        tpfree((char*)ptr_Obuf);
        fn_errlog(c_ServiceName,"S31055",SQLMSG,c_errmsg);
        tpabort(0);
        Fadd32( ptr_Ibuf,FFO_ERR_MSG,c_errmsg , 0 );
        tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
      }

      sprintf(c_errmsg,"%d",sqlca.sqlerrd[2]);
      strcat(c_errmsg," Locks released");
      Fadd32( ptr_Obuf,FFO_ERR_MSG,c_errmsg,0);

			******* Ver 1.5 Ends *******************************/	
			
			if(tpcommit(0)== -1)
    	{
      	fn_userlog(c_ServiceName,"TPCOMMIT failed");
      	tpfree((char*)ptr_Obuf);
      	tpabort(0);
      	fn_errlog(c_ServiceName,"S31060",TPMSG,c_errmsg);
      	Fadd32( ptr_Ibuf,FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
    	}
			
     /* 1.1 starts here  - added for unlocking verify flag*/ 

			if(tpbegin(TRAN_TIMEOUT,0)== -1)
    	{
      	fn_userlog(c_ServiceName,"TPBEGIN failed");
      	tpfree((char*)ptr_Obuf);
      	fn_errlog(c_ServiceName,"S31065",TPMSG,c_errmsg);
      	Fadd32( ptr_Ibuf,FFO_ERR_MSG,c_errmsg , 0 );
      	tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
    	} 

      EXEC SQL
           UPDATE FNO_CNTRCT_MSTR 
           SET FCM_VRFY_FLG   ='N' 
           WHERE FCM_VRFY_FLG ='L'
           AND (SYSDATE -FCM_vRFY_DT) > .002;
		      
			if(SQLCODE != 0 && SQLCODE != 1403)
			{
				fn_userlog(c_ServiceName,"SQLCODE at update is <%d>",SQLCODE);
				tpfree((char*)ptr_Obuf);
				fn_errlog(c_ServiceName,"S31070",SQLMSG,c_errmsg);
				tpabort(0);
				Fadd32( ptr_Ibuf,FFO_ERR_MSG,c_errmsg , 0 );
				tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
			} 

			if(tpcommit(0)== -1)
    	{
      	fn_userlog(c_ServiceName,"TPCOMMIT failed");
      	tpfree((char*)ptr_Obuf);
      	tpabort(0);
      	fn_errlog(c_ServiceName,"S31075",TPMSG,c_errmsg);
      	Fadd32( ptr_Ibuf,FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
    	}

			/* 1.1 Ends Here */
      
		}
		else if(c_flag == 'U' || c_flag == 'M') /* Update sign ,c_flag='M' added in Ver 1.5*/
		{

			if(tpbegin(TRAN_TIMEOUT,0)== -1)
      {
        fn_userlog(c_ServiceName,"TPBEGIN failed");
        tpfree((char*)ptr_Obuf);
        fn_errlog(c_ServiceName,"S31080",TPMSG,c_errmsg);
        Fadd32( ptr_Ibuf,FFO_ERR_MSG,c_errmsg , 0 );
        tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
      }
		
			if(c_flag == 'U')
			{
				fn_userlog(c_ServiceName,"IN F AND U");

				EXEC SQL
				UPDATE FNO_CNTRCT_MSTR
				SET FCM_IP     = :sql_fcm_ip,
				FCM_SGN_USR_ID = :sql_fcm_sgn_usr_id,
				FCM_SGN_DT     = sysdate,
				FCM_SIGN       = :sql_fcm_sign,
				FCM_SGN_FLG    = 'Y',
      	FCM_VRFY_FLG   = 'N'  /* 1.1*/
				WHERE  FCM_CNTRCT_NMBR = :sql_fcm_cntrct_nmbr;
			
				if(SQLCODE != 0)
				{
					fn_userlog(c_ServiceName,"SQLCODE at update is <%d>",SQLCODE);
					tpfree((char*)ptr_Obuf);
					fn_errlog(c_ServiceName,"S31085",SQLMSG,c_errmsg);
					tpabort(0); 
					Fadd32( ptr_Ibuf,FFO_ERR_MSG, c_errmsg, 0 );
					tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0); 
				}
				fn_userlog(c_ServiceName,"Updated signature ");
				Fadd32( ptr_Obuf,FFO_ERR_MSG,"Signature updated" , 0 );
			}
		
			/******* Ver 1.5 Starts*****************/
	
			else
			{
				EXEC SQL
      	UPDATE FNO_CNTRCT_MSTR
     		SET FCM_IP     	= :sql_fcm_ip,
      	FCM_SGN_USR_ID 	= :sql_fcm_sgn_usr_id,
      	FCM_SGN_DT     	= sysdate,
      	FCM_SIGN       	= :sql_fcm_sign,
      	FCM_OLD_SIGN_FLG  = 'Y',
      	FCM_VRFY_FLG   		= 'N'  
      	WHERE  FCM_CNTRCT_NMBR = :sql_fcm_cntrct_nmbr;

      	if(SQLCODE != 0)
      	{
        	fn_userlog(c_ServiceName,"SQLCODE at update is <%d>",SQLCODE);
        	tpfree((char*)ptr_Obuf);
        	fn_errlog(c_ServiceName,"S31090",SQLMSG,c_errmsg);
        	tpabort(0);
        	Fadd32( ptr_Ibuf,FFO_ERR_MSG, c_errmsg, 0 );
        	tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
      	}
      	fn_userlog(c_ServiceName,"Updated signature ");
      	Fadd32( ptr_Obuf,FFO_ERR_MSG,"Signature updated" , 0 );	

			}
			/************** Ver 1.5 Ends *******************/

			if(tpcommit(0)== -1)
    	{
      	fn_userlog(c_ServiceName,"TPCOMMIT failed");
      	tpfree((char*)ptr_Obuf);
      	tpabort(0);
      	fn_errlog(c_ServiceName,"S31095",TPMSG,c_errmsg);
      	Fadd32( ptr_Ibuf,FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
    	}

		}

		/* Ver 1.3 Comment if(tpcommit(0)== -1)
		{
			fn_userlog(c_ServiceName,"TPCOMMIT failed");
			tpfree((char*)ptr_Obuf);
			tpabort(0);
			fn_errlog(c_ServiceName,"S31100",TPMSG,c_errmsg);
			Fadd32( ptr_Ibuf,FFO_ERR_MSG, c_errmsg, 0 );
			tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
		} */
		fn_userlog(c_ServiceName,"AFTER F ");
	}
	else if (c_oper == 'E')
	{
		if(tpbegin(TRAN_TIMEOUT,0)== -1)
		{
			fn_userlog(c_ServiceName,"TPBEGIN failed");
			tpfree((char*)ptr_Obuf);
			fn_errlog(c_ServiceName,"S31105",TPMSG,c_errmsg);
			Fadd32( ptr_Ibuf,FFO_ERR_MSG,c_errmsg , 0 );
			tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
		}

		if(c_flag == 'S') /* Release locks - EA */
		{
		/* Release all the locks on  EA_CONF_MSTR **/
			EXEC SQL
				UPDATE EA_CONF_MSTR
				SET ECM_SGN_DT = NULL,
				ECM_SGN_FLG= 'N'
				WHERE ECM_SGN_FLG= 'L' AND
				(sysdate-ECM_SGN_DT) > .002;
			if(SQLCODE != 0 && SQLCODE != 1403)
			{
				fn_userlog(c_ServiceName,"SQLCODE at update is <%d>",SQLCODE);
				tpfree((char*)ptr_Obuf);
				fn_errlog(c_ServiceName,"S31110",SQLMSG,c_errmsg);
				tpabort(0);
				Fadd32( ptr_Ibuf,FFO_ERR_MSG,c_errmsg , 0 );
				tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
			}

      sprintf(c_errmsg,"%d",sqlca.sqlerrd[2]);
      strcat(c_errmsg," Locks released");
      Fadd32( ptr_Obuf,FFO_ERR_MSG,c_errmsg,0);

 
	   /* 1.1 starts here */ 
     EXEC SQL
		      UPDATE EA_CONF_MSTR  
		      SET ECM_VRFY_FLG   ='N' 
		      WHERE ECM_VRFY_FLG ='L'
		      AND (SYSDATE -ECM_VRFY_DT) > .002;
			if(SQLCODE != 0 && SQLCODE != 1403)
			{
					fn_userlog(c_ServiceName,"SQLCODE at update is <%d>",SQLCODE);
					tpfree((char*)ptr_Obuf);
					fn_errlog(c_ServiceName,"S31115",SQLMSG,c_errmsg);
					tpabort(0);
					Fadd32( ptr_Ibuf,FFO_ERR_MSG,c_errmsg , 0 );
					tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
			 }
	      /* 1.1 Ends Here */
	}
	else if(c_flag == 'U') /* Update sign -  EA */
	{
		EXEC SQL
			UPDATE EA_CONF_MSTR 
			SET ECM_IP	   = :sql_fcm_ip,
			ECM_SGN_USR_ID = :sql_fcm_sgn_usr_id,
			ECM_SGN_DT     =  sysdate,
			ECM_SIGN       = :sql_fcm_sign,
			ECM_SGN_FLG    = 'Y',
			ECM_VRFY_FLG   = 'N' /*1.1*/ 
			WHERE  ECM_CNTRCT_NMBR = :sql_fcm_cntrct_nmbr;
 
		if(SQLCODE != 0)
		{
			 fn_userlog(c_ServiceName,"SQLCODE at update is <%d>",SQLCODE);
			 tpfree((char*)ptr_Obuf);
			 fn_errlog(c_ServiceName,"S31120",SQLMSG,c_errmsg);
			 tpabort(0);
			 Fadd32( ptr_Ibuf,FFO_ERR_MSG, c_errmsg, 0 );
		 	 tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
		}
		
		Fadd32( ptr_Obuf,FFO_ERR_MSG,"EA Signature updated" , 0 );
	}
  if(tpcommit(0)== -1)
  {
    fn_userlog(c_ServiceName,"TPCOMMIT failed");
    tpfree((char*)ptr_Obuf);
    tpabort(0);
    fn_errlog(c_ServiceName,"S31125",TPMSG,c_errmsg);
    Fadd32( ptr_Ibuf,FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
  }
 } /*End of 'E' */

 else if (c_oper=='V') /* 1.1 start of V */
 {

		if(tpbegin(TRAN_TIMEOUT,0)== -1)  /* Ver 1.2 Addition */
    {
       fn_userlog(c_ServiceName,"TPBEGIN failed");
       fn_errlog(c_ServiceName,"S31130",TPMSG,c_errmsg);
       Fadd32( ptr_Ibuf,FFO_ERR_MSG,c_errmsg , 0 );
       tpfree((char*)ptr_Obuf);
       tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
    }
	  if (c_flag=='F')  /* Verification for FNO Contracts */
	  {
      if ( Fget32(ptr_Ibuf,FFO_TRNSCTN_TYP,0,(char*)&c_suc_fail,0) == -1)
      {
        fn_errlog(c_ServiceName,"S31135",FMLMSG,c_errmsg) ;
        Fadd32(ptr_Ibuf,FFO_ERR_MSG,c_errmsg,0) ;
        tpreturn(TPFAIL,0L,(char *)ptr_Ibuf,0L,0) ;
      }	
			/* Ver 1.2 Begins */

      if(Fget32(ptr_Ibuf,FFO_NARRATION_ID,0,(char*)sql_fcm_cntrct_nmbr.arr,0) == -1)
      {
          fn_errlog(c_ServiceName,"S31140",FMLMSG,c_errmsg) ;
          Fadd32(ptr_Ibuf,FFO_ERR_MSG,c_errmsg,0) ;
          tpreturn(TPFAIL,0L,(char *)ptr_Ibuf,0L,0) ;
      }

      SETLEN(sql_fcm_cntrct_nmbr);
      fn_userlog(c_ServiceName,"FFO_TRNSCTN_TYP is :%c:",c_suc_fail);
      fn_userlog(c_ServiceName,"FFO_NARRATION_ID is :%s:",sql_fcm_cntrct_nmbr.arr);

      /* Ver 1.2 Ends */

			if (c_suc_fail=='S')
			{
      	fn_userlog(c_ServiceName,"In S ");

				EXEC SQL
				 	UPDATE 	FNO_CNTRCT_MSTR
					SET 		FCM_VRFY_FLG 			= :c_suc_fail,
									FCM_VRFY_DT  			= sysdate  
					WHERE 	FCM_CNTRCT_NMBR 	= :sql_fcm_cntrct_nmbr; 
												
				if(SQLCODE != 0)
				{
					fn_userlog(c_ServiceName,"SQLCODE at update is <%d>",SQLCODE);
					tpfree((char*)ptr_Obuf);
					fn_errlog(c_ServiceName,"S31145",SQLMSG,c_errmsg);
					tpabort(0);
					Fadd32( ptr_Ibuf,FFO_ERR_MSG, c_errmsg, 0 );
					tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
				}
			} 
			else if (c_suc_fail=='F')
		 	{
				EXEC SQL
					UPDATE  FNO_CNTRCT_MSTR
					SET     FCM_VRFY_FLG 		= :c_suc_fail,
		  		   			FCM_SGN_DT 			= null,
					 				FCM_SGN_FLG			= 'N'
					WHERE 	FCM_CNTRCT_NMBR = :sql_fcm_cntrct_nmbr; 
							
					if(SQLCODE != 0)
					{
						fn_userlog(c_ServiceName,"SQLCODE at update is <%d>",SQLCODE);
						tpfree((char*)ptr_Obuf);
						fn_errlog(c_ServiceName,"S31150",SQLMSG,c_errmsg);
						tpabort(0);
						Fadd32( ptr_Ibuf,FFO_ERR_MSG, c_errmsg, 0 );
						tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
					}
			} 
		}
		else if (c_flag=='E')  /* EA Contracts verification */
		{
	   	if ( Fget32(ptr_Ibuf,FFO_TRNSCTN_TYP,0,(char*)&c_suc_fail,0) == -1)
	   	{
	     	fn_errlog(c_ServiceName,"S31155",FMLMSG,c_errmsg) ;
	     	Fadd32(ptr_Ibuf,FFO_ERR_MSG,c_errmsg,0) ;
	     	tpreturn(TPFAIL,0L,(char *)ptr_Ibuf,0L,0) ;
			}	
			/* Ver 1.2 Begins */

      if(Fget32(ptr_Ibuf,FFO_NARRATION_ID,0,(char*)sql_fcm_cntrct_nmbr.arr,0) == -1)
      {
        fn_errlog(c_ServiceName,"S31160",FMLMSG,c_errmsg) ;
        Fadd32(ptr_Ibuf,FFO_ERR_MSG,c_errmsg,0) ;
        tpreturn(TPFAIL,0L,(char *)ptr_Ibuf,0L,0) ;
      }

      SETLEN(sql_fcm_cntrct_nmbr);
      fn_userlog(c_ServiceName," E FFO_TRNSCTN_TYP is :%c:",c_suc_fail);
      fn_userlog(c_ServiceName," E FFO_NARRATION_ID is :%s:",sql_fcm_cntrct_nmbr.arr);

      /* Ver 1.2 Ends */
			if (c_suc_fail=='S')
			{
				fn_userlog(c_ServiceName,"In E - S ");
				EXEC SQL
				 	UPDATE 	EA_CONF_MSTR
				 	SET 		ECM_VRFY_FLG 		= :c_suc_fail,
									ECM_VRFY_DT 		= sysdate	
				 	WHERE 	ECM_CNTRCT_NMBR = :sql_fcm_cntrct_nmbr; 
								
					if(SQLCODE != 0)
					{
						fn_userlog(c_ServiceName,"SQLCODE at update is <%d>",SQLCODE);
						tpfree((char*)ptr_Obuf);
						fn_errlog(c_ServiceName,"S31165",SQLMSG,c_errmsg);
						tpabort(0);
						Fadd32( ptr_Ibuf,FFO_ERR_MSG, c_errmsg, 0 );
						tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
					}
			} 
	    else if (c_suc_fail=='F')
	    {
					EXEC SQL
						UPDATE  EA_CONF_MSTR
						SET     ECM_VRFY_FLG 		= :c_suc_fail,
										ECM_SGN_DT 			= null,
						 				ECM_SGN_FLG			= 'N'
						WHERE		ECM_CNTRCT_NMBR = :sql_fcm_cntrct_nmbr; 
							
					if(SQLCODE != 0)
					{
						fn_userlog(c_ServiceName,"SQLCODE at update is <%d>",SQLCODE);
						tpfree((char*)ptr_Obuf);
						fn_errlog(c_ServiceName,"S31170",SQLMSG,c_errmsg);
						tpabort(0);
						Fadd32( ptr_Ibuf,FFO_ERR_MSG, c_errmsg, 0 );
						tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
					}
	  	} 
	 }  
	 if(tpcommit(0)== -1)  /* Ver 1.2 Commit Tran Addition */
   {
      fn_userlog(c_ServiceName,"TPCOMMIT failed");
      fn_errlog(c_ServiceName,"S31175",TPMSG,c_errmsg);
      Fadd32( ptr_Ibuf,FFO_ERR_MSG, c_errmsg, 0 );
      tpfree((char*)ptr_Obuf);
      tpabort(0);
      tpreturn(TPFAIL, 0L,(char*)ptr_Ibuf,0L, 0);
   }
 }  /* 1.1 end of V */


if(DEBUG_MSG_LVL_3){
	fn_userlog(c_ServiceName,"Service completed succesfully  ");
}

	tpreturn(TPSUCCESS, 0L,(char*)ptr_Obuf,0L, 0);

}/* End of SFO_CONTR_SIGN */
