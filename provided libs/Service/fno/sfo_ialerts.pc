/* Program           : SFO_IALERTS                                            */
/*                                                                            */
/* Input              : FFO_REQ_TYP      //(S/G)                              */
/*                      FFO_USR_ID      //User                                */
/*                      FFO_SSSN_ID     //Session                             */
/*                      FFO_INDX_VAL      //Alert number (1/2/3/4/5)          */
/*                      FFO_PLG_QTY      //Loss Threshold Limit               */ 
/*                      FFO_SPL_FLG    //Loss Y/N Flag                        */
/*                      FFO_AVL_QTY      //Profit Threshold Limit             */
/*                      FFO_CNTRCT_TAG  //Profit Y/N Flag                     */
/*                      FFO_MTM_FLG     //OTM Y/N Flag                        */
/*                      FFO_SOURCE_FLG     //MWPL BAN Y/N Flag                */
/*                      FFO_STATUS_FLG     //MWPL Y/N Flag                    */
/*                                                                            */
/*  Output            :                                                       */
/*               SET:  FFO_ERR_MSG                                            */
/*               GET:  FFO_PLG_QTY                                            */
/*                     FFO_SPL_FLG                                            */
/*                     FFO_AVL_QTY                                            */
/*                     FFO_CNTRCT_TAG                                         */
/*                     FFO_MTM_FLG                                            */
/*                     FFO_STATUS_FLG                                         */
/*                     FFO_SOURCE_FLG                                         */
/*                     FFO_ERR_MSG                                            */
/*                                                                            */
/******************************************************************************/
/*  Log  Release       : 1.0 Kunwar Prashant  29-Sep-2022                     */
/*                                                                            */
/*                                                                            */
/******************************************************************************/
/*    This service introduce a feature for all F&O customers where we can     */
/*    set/get using database for various inputs in below alerts:              */
/*    1.0 - Alerts                                                            */
/*                                                                            */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fml_def.h>
#include <fo.h>
#include <fo_view_def.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>
#include <fo_get_records.h>
#include <fn_session.h>

#define FO_LOSS_ALERT 1
#define FO_PROFIT_ALERT 2
#define OTM_ALERT 3
#define MWPL_ALERT 4
#define MWPL_BAN_ALERT 5

int Z=0;
#define INIT(x,y)     for(Z=0; Z< y; Z++)     x[Z] =0


void SFO_IALERTS( TPSVCINFO *rqst )
{
  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  ptr_fml_Obuf = NULL;

  char  c_ServiceName[33];
  char  c_err_msg[256];
  char c_mode = '\0';
  char c_user_id[9] = "\0";
  char c_alert_name[20] = "\0";
  char c_loss_alrt_flg='Y',c_prft_alrt_flg='Y';
  char c_otm_alrt_flg='N',c_mwpl_ban_alrt_flg='N',c_mwpl_alrt_flg='N';

  int i_alert_typ = 0;
  int i_cnt=0;
  int errno=0;
  int i_returncode  = 0;
  int i_trnsctn;

  long l_sssn_id = 0;

  long d_limit = 0;
  long d_prft_lmt=10000;
  long d_loss_lmt=10000;

  int i_cntrct[10];
  int i_cntrcterr[10];

  struct vw_usr_prfl st_usr_prfl;
  struct vw_err_msg st_err_msg;

  MEMSET(st_usr_prfl);
  MEMSET(st_err_msg);
  INIT(i_cntrct,10);
  INIT(i_cntrcterr,10);


  EXEC SQL BEGIN DECLARE SECTION;
        sql_cursor     sys_cursor;
  EXEC SQL END DECLARE SECTION;

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );

  INITDBGLVL(c_ServiceName);
  MEMSET(c_err_msg);
  MEMSET(c_user_id);
  MEMSET(c_alert_name);


  i_cntrct[0] = Fget32( ptr_fml_Ibuf ,FFO_REQ_TYP,0,(char *)&c_mode,0);  /** Req Type**/
  i_cntrcterr[0] = Ferror32;
  i_cntrct[1] = Fget32( ptr_fml_Ibuf ,FFO_USR_ID,0,(char *)c_user_id,0);    /** User Id **/
  i_cntrcterr[1] = Ferror32;
  i_cntrct[2] = Fget32( ptr_fml_Ibuf ,FFO_SSSN_ID,0,(char *)&l_sssn_id,0);  /** Session Id **/
  i_cntrcterr[2] = Ferror32;

  for ( i_cnt=0 ;  i_cnt < 3 ;  i_cnt++ )
  {
      if ( i_cntrct[i_cnt] == -1 && i_cntrcterr[i_cnt] != FNOTPRES )
      {
        fn_userlog( c_ServiceName,"Error in :%d:",i_cnt );
        fn_errlog( c_ServiceName,"S31005", Fstrerror32( i_cntrcterr[i_cnt]),c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

  }

  i_returncode = Fvftos32( ptr_fml_Ibuf, (char *) &st_usr_prfl,"vw_usr_prfl" );

  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl,&st_err_msg ) ;
  if ( i_returncode == -1 )
  {
     fn_userlog( c_ServiceName,"Error :%s:",st_err_msg.c_err_msg );
    fn_errlog(c_ServiceName,"B21001",LIBMSG, c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if(c_mode == 'S')
  {
    INIT(i_cntrct,10);
    INIT(i_cntrcterr,10);
    i_cntrct[0] = Fget32( ptr_fml_Ibuf ,FFO_INDX_VAL,0,(char *)&i_alert_typ,0);  /** Alert Number **/
    i_cntrcterr[0] = Ferror32;
    i_cntrct[1] = Fget32( ptr_fml_Ibuf ,FFO_PLG_QTY,0,(char *)&d_loss_lmt,0);           /** loss threshold limit **/
    i_cntrcterr[1] = Ferror32;
    i_cntrct[2] = Fget32( ptr_fml_Ibuf ,FFO_SPL_FLG,0,(char *)&c_loss_alrt_flg,0);           /** LOSS Y/N Flag **/
    i_cntrcterr[2] = Ferror32;
    i_cntrct[3] = Fget32( ptr_fml_Ibuf ,FFO_AVL_QTY,0,(char *)&d_prft_lmt,0);           /** profit threshold limit **/
    i_cntrcterr[3] = Ferror32;
    i_cntrct[4] = Fget32( ptr_fml_Ibuf ,FFO_CNTRCT_TAG,0,(char *)&c_prft_alrt_flg,0);           /** Profit Y/N Flag **/
    i_cntrcterr[4] = Ferror32;
    i_cntrct[6] = Fget32( ptr_fml_Ibuf ,FFO_MTM_FLG,0,(char *)&c_otm_alrt_flg,0);           /** OTM Y/N Flag **/
    i_cntrcterr[6] = Ferror32;
    i_cntrct[7] = Fget32( ptr_fml_Ibuf ,FFO_SOURCE_FLG,0,(char *)&c_mwpl_ban_alrt_flg,0);           /** mwpl ban Y/N **/
    i_cntrcterr[7] = Ferror32;
    i_cntrct[8] = Fget32( ptr_fml_Ibuf ,FFO_STATUS_FLG,0,(char *)&c_mwpl_alrt_flg,0);           /** mwpl Y/N **/
    i_cntrcterr[8] = Ferror32;

    for ( i_cnt=0 ;  i_cnt < 9 ;  i_cnt++ )
    {
      if ( i_cntrct[i_cnt] == -1 && i_cntrcterr[i_cnt] != FNOTPRES )
      {
      fn_userlog( c_ServiceName,"Error in :%d:",i_cnt );
      fn_errlog( c_ServiceName,"S31015", Fstrerror32( i_cntrcterr[i_cnt]),c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    // Checking if value already exists in table
    EXEC SQL
    SELECT COUNT(*) INTO :i_returncode FROM FNO_IALERT WHERE FI_USR_ID = :c_user_id;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31020", SQLMSG, c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
    if (i_trnsctn == -1)
    {
      fn_errlog(c_ServiceName,"S31025",TPMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if(i_returncode == 0)
    {
      //Inserting

      EXEC SQL 
	  INSERT INTO FNO_IALERT (FI_USR_ID,FI_LOSS_ALRT_FLG,FI_LOSS_ALRT_AMT,FI_PRFT_ALRT_FLG,FI_PRFT_ALRT_AMT,FI_OTM_ALRT_FLG,FI_MWPL_ALRT_FLG,FI_MWPL_BANSCRPT_ALRT_FLG) 
	  values (:c_user_id,:c_loss_alrt_flg,:d_loss_lmt,:c_prft_alrt_flg,:d_prft_lmt,:c_otm_alrt_flg,:c_mwpl_alrt_flg,:c_mwpl_ban_alrt_flg);
	  
      if ( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31030", SQLMSG, c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    else
    {       
		//Updating
      if(i_alert_typ==FO_LOSS_ALERT)
      {
        EXEC SQL
          UPDATE FNO_IALERT
          SET FI_LOSS_ALRT_FLG = :c_loss_alrt_flg,FI_LOSS_ALRT_AMT = :d_loss_lmt,FI_LOSS_ALRT_DT=sysdate
          WHERE FI_USR_ID = :c_user_id;
      }
      else if(i_alert_typ==FO_PROFIT_ALERT)
      {
        EXEC SQL UPDATE FNO_IALERT
          SET FI_PRFT_ALRT_FLG = :c_prft_alrt_flg,FI_PRFT_ALRT_AMT = :d_prft_lmt,FI_PRFT_ALRT_DT=sysdate
          WHERE FI_USR_ID = :c_user_id;
      }
      else if(i_alert_typ==OTM_ALERT)
      {
        EXEC SQL UPDATE FNO_IALERT SET FI_OTM_ALRT_FLG = :c_otm_alrt_flg,FI_OTM_ALRT_DT=sysdate
          WHERE FI_USR_ID = :c_user_id;
      }
      else if(i_alert_typ==MWPL_ALERT)
      {
        EXEC SQL UPDATE FNO_IALERT SET FI_MWPL_ALRT_FLG = :c_mwpl_alrt_flg,FI_MWPL_ALRT_DT=sysdate
          WHERE FI_USR_ID = :c_user_id;
      }
      else if(i_alert_typ==MWPL_BAN_ALERT)
      {
        EXEC SQL UPDATE FNO_IALERT SET FI_MWPL_BANSCRPT_ALRT_FLG = :c_mwpl_ban_alrt_flg,FI_MWPLBAN_ALRT_DT=sysdate
          WHERE FI_USR_ID = :c_user_id;
      }

      if ( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31035", SQLMSG, c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31040", TPMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
    }
    i_returncode = fn_pack_vartofml( c_ServiceName,
                                   c_err_msg,
                                   &ptr_fml_Obuf,
                                   1,
                                   FFO_ERR_MSG,(char *)&c_err_msg
                                  );
  }
  else if(c_mode == 'G')
  {
    EXEC SQL
    SELECT FI_LOSS_ALRT_FLG,FI_LOSS_ALRT_AMT,FI_PRFT_ALRT_FLG,FI_PRFT_ALRT_AMT,FI_OTM_ALRT_FLG,FI_MWPL_ALRT_FLG,FI_MWPL_BANSCRPT_ALRT_FLG
    INTO :c_loss_alrt_flg,:d_loss_lmt,:c_prft_alrt_flg,:d_prft_lmt,:c_otm_alrt_flg,:c_mwpl_alrt_flg,:c_mwpl_ban_alrt_flg
    FROM FNO_IALERT
    WHERE FI_USR_ID = :c_user_id;
    if ( SQLCODE != 0 && SQLCODE!=NO_DATA_FOUND)
    {
      fn_errlog ( c_ServiceName, "S31045", SQLMSG, c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    else if (SQLCODE==NO_DATA_FOUND)
    {
        c_loss_alrt_flg='Y';d_loss_lmt=10000;
        c_prft_alrt_flg='Y';d_prft_lmt=10000;
        c_otm_alrt_flg='N';c_mwpl_alrt_flg='N';c_mwpl_ban_alrt_flg='N';
    }


    i_returncode = fn_pack_vartofml( c_ServiceName,
                                   c_err_msg,
                                   &ptr_fml_Obuf,
                                   8,
                                   FFO_PLG_QTY,(char *)&d_loss_lmt,
                                   FFO_SPL_FLG,(char *)&c_loss_alrt_flg,
								   FFO_AVL_QTY,(char *)&d_prft_lmt,
                                   FFO_CNTRCT_TAG,(char *)&c_prft_alrt_flg,
                                   FFO_MTM_FLG,(char *)&c_otm_alrt_flg,
                                   FFO_STATUS_FLG,(char *)&c_mwpl_alrt_flg,
                                   FFO_SOURCE_FLG,(char *)&c_mwpl_ban_alrt_flg,
                                   FFO_ERR_MSG,(char *)&c_err_msg
                                 );
    if(i_returncode == -1){
        fn_errlog( c_ServiceName, "S31050", LIBMSG, c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  strcpy(c_err_msg,"Alerts Saved Success");
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
}
