/******************************************************************************/
/*	Program	    			:	SFO_UPD_EXBK                                          */
/*                                                                            */
/*  Input             : vw_exrcbook                                           */
/*                                                                            */
/*                                                                            */
/*  Output            : vw_exrcbook                                           */
/*                      vw_err_msg                                            */
/*                                                                            */
/*  Description       : This service is used to update the Exercise book      */
/*                      in various modes                                      */
/*                      N - INSERT_ON_NEW_EXERCISE_REQUEST                    */
/*                      S - UPDATE_EXERCISE_REQUEST_STATUS                    */
/*                      M - UPDATE_QTY_STATUS_ON_MODIFICATION                 */
/*                      X - UPDATE_XCHNG_RESPONSE                             */
/*                      C - UPDATE_MOD_CNTR                                   */
/*                      A - UPDATE_STATUS_ACK_TM                              */
/*                                                                            */
/*  Log               : 1.0   08-Oct-2001   Vinod Banjan                      */
/*  Log               : 1.5   24-Jan-2012   Swati A.B                         */
/*                                                                            */
/******************************************************************************/
/*    1.0  -  New release                                                     */
/*    1.1  -  Modified for BP                                                 */
/*    1.2  -  Fixing for settlor because of non acceptance of orders					*/ 
/*    1.3  -  User id hardcoding removed on 26-Sep-06 (Lavine R)            	*/ 
/*    1.4  -  IBM Changes                                                     */
/*    1.5  -  BSE-ORS Changes                                                 */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h> /* Ver 1.4 */
#include <fn_read_debug_lvl.h> /* Ver 1.4 */

void SFO_UPD_EXBK( TPSVCINFO *rqst )
{

  char c_ServiceName[ 33];
  char c_errmsg[256];
  int   i_trnsctn = 0;

  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_exrcbook *ptr_st_exrcbook;
    varchar c_expiry_dt [ LEN_DATE ];
    varchar c_trade_dt [ LEN_DATE ];
    varchar c_member_id [6];			/*Added for Ver 1.3*/
		short 	i_settlor ;
  EXEC SQL END DECLARE SECTION;

  struct vw_err_msg *ptr_st_err_msg;

  ptr_st_exrcbook = ( struct vw_exrcbook *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName); 

  ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
  if ( ptr_st_err_msg ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31005", TPMSG, c_errmsg );
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }

  memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

if(DEBUG_MSG_LVL_3){
  fn_userlog ( c_ServiceName,"Operation Type:%c:", ptr_st_exrcbook->c_oprn_typ );
}

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_exrcbook->c_rout_crt );

  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_exrcbook->c_expry_dt );
  SETLEN ( c_expiry_dt );
  strcpy ( ( char * )c_trade_dt.arr, ptr_st_exrcbook->c_trd_dt );
  SETLEN ( c_trade_dt );

	rtrim((char *)( c_expiry_dt.arr ));
	rtrim((char *)( c_trade_dt.arr ));

  i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );

  if ( i_trnsctn == -1 )
  {
     strcpy ( ptr_st_err_msg->c_err_msg, c_errmsg );
     tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

  switch( ptr_st_exrcbook->c_oprn_typ )
  {
    case  INSERT_ON_NEW_EXERCISE_REQUEST:

					if(DEBUG_MSG_LVL_3)   /*** Ver 1.5 ***/
					{
  					fn_userlog ( c_ServiceName,"In INSERT_ON_NEW_EXERCISE_REQUEST Case");
  					fn_userlog ( c_ServiceName,"ptr_st_exrcbook->c_xchng_cd Is :%s:",ptr_st_exrcbook->c_xchng_cd);
					}

				 	/*Added for Ver 1.3*/
	  			memset ( c_member_id.arr, 0, sizeof ( c_member_id.arr ) );
	  			EXEC SQL
		  			SELECT ltrim(rtrim(EXG_BRKR_ID))
		  			INTO   :c_member_id
		  			FROM   EXG_XCHNG_MSTR
		  			/***   WHERE	 EXG_XCHNG_CD = 'NFO'; commented In Ver 1.5 ***/ 
		  			WHERE	 EXG_XCHNG_CD = :ptr_st_exrcbook->c_xchng_cd ; /*** Ver 1.5 ***/ 

	  			if( SQLCODE != 0 )
	  			{
        		break;
	  			}
	  			SETNULL(c_member_id);
	 				/*End of added for Ver 1.3*/

      EXEC SQL
        INSERT INTO feb_fo_exrc_rqst_book
        (
					feb_clm_mtch_accnt,
					feb_clnt_ctgry,
					feb_exrc_rfrnc_no,
					feb_pipe_id,
					feb_xchng_cd,
					feb_prdct_typ,
					feb_indstk,
					feb_undrlyng,
					feb_expry_dt,
					feb_exer_typ,
					feb_opt_typ,
					feb_strk_prc,
					feb_exrc_rqst_typ,
					feb_exrc_qty,
					feb_exrc_stts,
					feb_trd_dt,
					feb_mdfctn_cntr,
					feb_settlor,
					feb_pro_cli_ind,
					feb_channel,         /* BP 1.1 */
					feb_bp_id         /* BP 1.1 */
				)
				VALUES
				(
					:ptr_st_exrcbook->c_cln_mtch_accnt,
					:ptr_st_exrcbook->l_clnt_ctgry,
					:ptr_st_exrcbook->c_exrc_ordr_rfrnc,
					:ptr_st_exrcbook->c_pipe_id,
					:ptr_st_exrcbook->c_xchng_cd,
					:ptr_st_exrcbook->c_prd_typ,
					:ptr_st_exrcbook->c_ctgry_indstk,
					:ptr_st_exrcbook->c_undrlyng,
					to_date ( :c_expiry_dt,'dd-Mon-yyyy' ), 
					:ptr_st_exrcbook->c_exrc_typ,
					:ptr_st_exrcbook->c_opt_typ,
					:ptr_st_exrcbook->l_strike_prc,
					:ptr_st_exrcbook->c_exrc_rqst_typ,
					:ptr_st_exrcbook->l_exrc_qty,
					:ptr_st_exrcbook->c_exrc_stts,
					to_date ( :c_trade_dt,'dd-Mon-yyyy hh24:mi:ss' ), 
					:ptr_st_exrcbook->l_mdfctn_cntr,
					/*:ptr_st_exrcbook->c_settlor , */ /* Commented on 24/04/2006 on exchange non acceptance of exer req*/
					/*'11476',							* Ver 1.2* Commented and added below for Ver 1.3*/
					:c_member_id,
					:ptr_st_exrcbook->c_pro_cli_ind,
					:ptr_st_exrcbook->c_channel,         /* BP 1.1 */
					:ptr_st_exrcbook->c_bp_id         /* BP 1.1 */
				) ;

				break ;

    case  UPDATE_STATUS_ON_XCHNG_RESP:

      EXEC SQL
				UPDATE 	feb_fo_exrc_rqst_book
				SET 		feb_exrc_stts = :ptr_st_exrcbook->c_exrc_stts
				WHERE 	feb_exrc_rfrnc_no = :ptr_st_exrcbook->c_exrc_ordr_rfrnc;
				break ;

    case  UPDATE_STATUS_ACK_TM:

			fn_userlog ( c_ServiceName,"Inside UPDATE_STATUS_ACK_TM");
			fn_userlog ( c_ServiceName,"ptr_st_exrcbook->c_ack_tm Is :%s:",ptr_st_exrcbook->c_ack_tm);
			fn_userlog ( c_ServiceName,"ptr_st_exrcbook->c_exrc_ordr_rfrnc Is :%s:",ptr_st_exrcbook->c_exrc_ordr_rfrnc);

      EXEC SQL
				UPDATE 	feb_fo_exrc_rqst_book
				SET 		feb_exrc_stts = :ptr_st_exrcbook->c_exrc_stts,
								feb_exer_ack_tm = to_date (:ptr_st_exrcbook->c_ack_tm,
																						'dd-mon-yyyy hh24:mi:ss' )
				WHERE 	feb_exrc_rfrnc_no = :ptr_st_exrcbook->c_exrc_ordr_rfrnc;
				break ;

    case  UPDATE_EXERCISE_REQUEST_STATUS:

      EXEC SQL
				UPDATE 	feb_fo_exrc_rqst_book
				SET 		feb_exrc_stts = :ptr_st_exrcbook->c_exrc_stts
				WHERE 	feb_exrc_rfrnc_no = :ptr_st_exrcbook->c_exrc_ordr_rfrnc;
				break ;

    case  UPD_EXER_STTS_CLS_PRC:
      EXEC SQL
				UPDATE 	feb_fo_exrc_rqst_book
				SET 		feb_exrc_stts = :ptr_st_exrcbook->c_exrc_stts,
								feb_curr_mkt_prc = :ptr_st_exrcbook->l_cur_mkt_prc
				WHERE 	feb_exrc_rfrnc_no = :ptr_st_exrcbook->c_exrc_ordr_rfrnc;
				break ;

    case  UPDATE_QTY_STATUS_ACKTM_ON_MOD:

      EXEC SQL
				UPDATE 	feb_fo_exrc_rqst_book
				SET 		feb_exrc_qty = :ptr_st_exrcbook->l_exrc_qty,
				    		feb_exrc_stts = :ptr_st_exrcbook->c_exrc_stts,
								feb_exer_ack_tm = to_date (:ptr_st_exrcbook->c_ack_tm,
																						'dd-mon-yyyy hh24:mi:ss' )
				WHERE 	feb_exrc_rfrnc_no = :ptr_st_exrcbook->c_exrc_ordr_rfrnc;
				break ;

    case  UPDATE_QTY_STATUS_ON_MODIFICATION:

      EXEC SQL
				UPDATE 	feb_fo_exrc_rqst_book
				SET 		feb_exrc_qty = :ptr_st_exrcbook->l_exrc_qty,
				    		feb_exrc_stts = :ptr_st_exrcbook->c_exrc_stts
				WHERE 	feb_exrc_rfrnc_no = :ptr_st_exrcbook->c_exrc_ordr_rfrnc;
				break ;

    case  UPDATE_XCHNG_RESPONSE:

      EXEC SQL
				UPDATE 	feb_fo_exrc_rqst_book
				SET 		feb_ack_nmbr = :ptr_st_exrcbook->c_xchng_ack
				WHERE 	feb_exrc_rfrnc_no = :ptr_st_exrcbook->c_exrc_ordr_rfrnc;

				break ;

    case  UPDATE_MOD_CNTR_EXBK:

      EXEC SQL
				UPDATE 	feb_fo_exrc_rqst_book
				SET 		feb_mdfctn_cntr = feb_mdfctn_cntr + 1
				WHERE 	feb_exrc_rfrnc_no = :ptr_st_exrcbook->c_exrc_ordr_rfrnc;

				break ;

    default:
      strcpy( ptr_st_err_msg->c_err_msg, "Invalid Operation Type" );
      fn_errlog ( c_ServiceName, "S31010", DEFMSG, ptr_st_err_msg->c_err_msg );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      break;
  }

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31015", SQLMSG, ptr_st_err_msg->c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )
  {
     strcpy ( ptr_st_err_msg->c_err_msg, c_errmsg );
     tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

  tpfree ( ( char * ) ptr_st_err_msg );
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_exrcbook,
                                  sizeof( struct vw_exrcbook ), 0 );
}
