
/*  Program             : SFO_SPN_MOD_ORD                                                               */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*  Log                 : 1.0     03-Mar-2011     																											*/
/*												1.1     12-Mar-2012                                                           */
/*                        1.2     30-Mar-2012                                                           */
/*                        1.3     02-Apr-2012                                                           */
/*                        1.4     18-Jun-2012                                                           */
/*                      : 1.5     27-Jul-2012                                                           */
/*                        1.6     30-Jul-2012                                                           */
/*                      : 1.7     06-Nov-2012                                                           */
/*                      : 1.8     29-Nov-2012                                                           */
/*											:	1.9			19-Dec-2012																														*/	
/*                      : 2.0     20-Dec-2012                                                           */
/*                      : 2.1     28-Jan-2013                                                           */
/*                      : 2.2     30-Jan-2013                                                           */
/*                      : 2.3     08-May-2013                                                           */
/*                      : 2.4     29-Apr-2013                                                           */
/*                      : 2.5     17-May-2013                                                           */
/*                      : 2.6     08-May-2013                                                           */
/*                      : 2.7     10-Jun-2013                                                           */
/*                      : 2.8     18-Jun-2013                                                           */
/*                      : 2.9     31-May-2013                                                           */
/*                      : 3.0     28-Jun-2013                                                           */
/*                      : 3.1     11-Jul-2013                                                           */
/*                      : 3.2     12-Jul-2013                                                           */
/*                      : 3.3     01-Oct-2013                                                           */
/*                      : 3.4     29-Nov-2013                                                           */
/*                      : 3.5     16-Sep-2013                                                           */
/*                      : 3.6     17-Dec-2013                                                           */
/*											:	3.7			04-Feb-2014																														*/
/*                      : 3.9     06-Nov-2013                                                           */
/*                      : 4.1     21-Jan-2014                                                           */
/*                      : 4.2     08-Jul-2014                                                           */
/*                      : 4.4     01-Dec-2014                                                           */
/*                      : 4.5     09-Feb-2015                                                           */
/*                      : 4.6     19-May-2015                                                           */
/*                      : 4.7     10-July-2015                                                          */
/*                      : 4.8     05-Aug-2015                                                           */
/*                      : 4.9     19-Aug-2015																														*/
/*                      : 5.0     06-Oct-2015																														*/
/*                      : 5.2     18-Jan-2016                                                           */
/*                      : 5.3     01-Mar-2016                                                           */
/*                      : 5.4     16-Mar-2016                                                           */
/*                      : 5.6     04-Jul-2016                                                           */
/*											:	5.7			14-Jul-2016																														*/
/*                      : 5.8     01-Sep-2016                                                           */
/*                      : 5.9     05-Dec-2016                                                           */
/*                      : 6.0     14-Feb-2017                                                           */
/*                      : 6.1     17-Mar-2017                                                           */
/*                      : 6.2     12-Dec-2017                                                           */
/*											: 6.3  		13-Dec-2017																														*/
/*											: VQC			15-Dec-2017																														*/
/*                      : 6.4     27-Feb-2018																														*/	
/*                      : 6.5     21-May-2018                                                           */
/*											:	6.6			11-Jul-2018																														*/
/*                      : 6.7     17-Jul-2018                                                           */
/*											: 6.8			10-Apr-2019																														*/
/*											:	6.9     13-May-2019																														*/
/*                      : 7.0     09-Aug-2019                                                           */
/*                      : 7.1     16-Oct-2019                                                           */
/*                      : 7.2     13-Nov-2019                                                           */
/*                      : 7.3     24-Oct-2019                                                           */
/*                      : 7.4     17-Mar-2020                                                           */
/*											: 7.5 		03-Jun-2020																														*/
/*                      : 7.6     10-SEP-2020                                                           */
/*                      : 7.7     10-OCT-2020                                                           */
/*											: 7.9			02-FEB-2021																														*/
/*											: 8.0     18-May-2021																														*/
/*											: 8.1     01-Oct-2021																														*/
/*                      : 8.2     14-Feb-2022                                                           */
/*                      : 8.3     15-May-2022                                                           */
/*                      : 8.4     23-May-2022                                                           */    
/*                      : 8.5     24-Jun-2022                                                           */
/*                      : 8.6     14-Jul-2022                                                           */
/*                      : 8.7     24-Aug-2022                                                           */
/*                      : 8.8     26-Sep-2022                                                           */
/*                      : 8.9     04-Nov-2022                                                           */
/*                      : 9.0     22-Dec-2022                                                           */
/*                      : 9.1     06-Feb-2022                                                           */
/*                      : 9.2     07-Mar-2023                                                           */
/*											: 9.3			30-Mar-2023																														*/
/********************************************************************************************************/
/*                                                                                                      */
/*  1.0   -   New Release                                                                               */
/*  1.1   -   Squareoff Modification for Option Sell (Navina D)                                         */
/*  1.2   -   NVL in FTQ fetch, Balance Amt initialization and MEMSET - 30-Mar-2012  (Navina D.)        */
/*            Bug Fix For Decimal Strike Prices                                                         */
/*  1.3   -   Exchange Code Handling   - 02-Apr-2012  (Navina D.)                                       */
/*  1.4   -   Local Declaration of variable i_sell_square_off_chk and MEMSET to global structure:Mahesh */
/*  1.5   -   check for Square off quantity to give DEBIT_TILL_LIMIT or DEBIT_WHEN_LIMIT treatment.     */
/*            CR-ISEC14-29721 : Mahesh                                                                  */
/*  1.6   -   Storing ip address in Exchange book: Navina D.																						*/
/*  1.7   -   CR-OverNight Orders at 3:30 Change  : Vishnu                                              */
/*  1.8   -   BSE SPAN Changes                    : Sandip                                              */
/*	1.9		-		SLTP FuturePlus											:	Bhushan                                             */
/*  2.0   -   Broker closeout changes (Mahesh Shinde)                                                   */
/*  2.1   -   Consolidated Order Validation changes   ( Swati A.B )                                     */
/*  2.2   -   Price band Relaxation changes   ( Shamili Dalvi )                                         */
/*  2.3   -   Trigger price check : Vishnu                                                              */
/*  2.4   -   Changes for SPAN in RIA  ( Swati A.B )                                                    */
/*  2.5   -   Modify Allocation Screen Dispaly on Insufficient Limit (Sachin Birje.)                    */
/*  2.6   -   Balance amount bug fix (Navina D.)                                                        */
/*  2.7   -   Bug Fix (Vishnu)                                                                          */
/*  2.8   -   SPAN Output String Handling changes (Sandip T)                                            */
/*  2.9   -   Restrict DBC mapped customer to convert position if trading is not allowed (Swati A.B)    */
/*  3.0   -   Changes to allow modification of order for scrip under ban period (Swati A.B)             */
/*  3.1   -   SPAN FTQ NDF handling (Swati)                                                             */
/*  3.2   -   Check to restrict modification of order qty in FP SLTP (Navina D.)                        */
/*  3.3   -   Handling of Option Market Max sell quantity : Shasi K                                     */
/*  3.4   -   Bug Fix : Mahesh Shinde                                                                   */
/*  3.5   -   OptionPlus Changes (Swati A.B )                                                           */
/*  3.6   -   SLTP F+ in DL.net Chnages (Swati A.B)                                                     */
/*            (Changes to set SLTP flag and part-executed fresh order check added )                     */
/*	3.7		-		For OptionPlus Modifition Skip Best/Offer Qty check																				*/
/*  3.8   -   Price range function check added  for OptionPlus cover order(Swati A.B)                   */
/*  3.9   -   FNO limit Logging (Swati A.B)                                                             */
/*  4.1   -   Contract Note Changes (Bhushan Sonwane)                                                   */
/*	4.2		-		Buffer released in Error conditions	( Sandeep Patil )																			*/								
/*  4.4   -   CR-ISEC14-55799 OptionPLUS Stop Loss Modification Error when LTP                          */
/*            less than cut off Premium  (Navina/Bhushan)                                               */
/*  4.5   -   Insufficient Limits - Modify Allocation changes for DL .Net                               */
/*  4.6   -   FNO VTC Order Changes (Sachin Birje)                                                      */
/*  4.7   -   CR_ISEC14_64402 Limit Order Type in FPSLTP (Aakash Chavan)                                */
/*  4.8   -   Contract Master and Trade Quote Table Merger Changes (Ritesh Deolekar)                    */
/*  4.9   -   Include changes for Insider trading check (Bhupendra Malik)																*/
/*  5.0	  -   CR-ISEC14-67417 Market to Limit in OptionPLUS	(Aakash)																		*/
/*  5.2   -   Live Bug Fix (Ritesh D.)                                                                  */
/*  5.3   -   Check to restrict the cancellation of Invalid combination of Order Reference              */
/*            and Match Account (Ritesh Deolekar)                                                       */
/*  5.4   -   Transaction Flag in Check Session IP                                                      */
/*  5.6   -   Check Session ip common function changes                                                  */
/*  5.7   -   Log_Maintenance																																						*/
/*  5.8   -   Trail Sltp    (Bhupendra Malik/Vishal B.)                                                 */
/*  5.9   -   Transaction through IP for SLTP Futureplus and Option plus                                */
/*  6.0   -   Insider  check bug fix	(Tanmay W.) 																											*/
/*  6.1   -   VTC Order Changes for Other Front End                                                     */
/*  6.2   -   FML with data type char used instead of long for storing wrapper flag (Anand Dhopte)      */
/*  6.3		-   Hard Parse Changes (Afzal K.)																														  */
/*	VQC		-   Version Quality Control Changes (Afzal K.)				   																			*/
/*  6.4   -   Rollover with spread changes ( Suchita Dabir )                                            */
/*  6.5   -   Position Mismatch                                                                         */
/*	6.6		-	  Physical Settlement of Stock Derivative Changes	(Bhushan Harekar)													*/
/*  6.7   -   Disallow clients with outstanding form taking fresh exposure  (Tanmay Patel)              */
/*	6.8		-		CR-ISEC14-121803:Logic to cosider limit for fresh future order,														*/
/*						if existing position in loss (Bhushan Harekar)																						*/
/*	6.9		-		EOS enhancements for Physical settlement in F&O Changes ( Parag Kanojia )									*/
/*  7.0 	-   Physical delivery margin changes ( Kiran Itkar ) 																					*/ 
/*  7.1   -   Input string size change CR-ISEC14-128972 ( Tanmay )                                      */
/*  7.2   -   CR-ISEC18-127640 Sub-broker dual order placement changes (Anand Dhopte)                   */
/*  7.3   -   Ipv6 Format (Tanmay Patel)                                                                */
/*  7.4   -   FPSL Margin Changes ( Akash B )                                                           */
/*	7.5   -   Version Quality Control Changes	(Afzal K.)																								*/
/*	7.6   -   Minor Changes : Excess credit limit to customers in MCX(Suchita D)  											*/
/*  7.7   -   CR_ISEC14_140009 TRIGGER PRICE ( Suchita )                                                */
/*  7.8   -   CR_ISEC14_139243 OPlus margin changes ( Suchita )                                         */
/*	7.9		-		CR-ISEC14-144377 Separate EOS for Stock and Index Underlyings in FPSL ( Kiran )						*/
/*  8.0   -   Derivative_trd_restrict_CR_ISEC04_152948                                                  */
/*  8.1   -   Profit order in FPSL                                                                      */
/*  8.2   -   CR-ISEC14-165712_Disable_OPTCNTRCT_EOSBUYSELL : Ravindra Panda                            */
/*  8.3   -   CR-ISEC14-170192 Allowing customers to use Options premium for Fresh Option buy ( Suchita Dabir ) **/
/*  8.4   -   CR-ISEC14-163069 Disable market order placement for illiquid options contracts under F&O segment (Roshni Pawar) */
/*  8.5   -   Validation for API live issue (Naveena R)                                                 */
/*  8.6   -   SPAN_BOD_MRGN_CR-ISEC14-172812 (Sachin Birje)                                             */
/*  8.7   -   CR-ISEC14-175042 Pending order value check for Span Customers (Naveena R.)                */
/*  8.8   -   CR-ISEC18-175354_ Unique Device Identifiers (Bhavana)                                      */                     
/*  8.9   -   CR-ISEC14-175042 bug fix to check modified square off order value  (Mahesh Shinde)  			*/
/*  9.0   -   IN:663 Price range check in the back end for option( Prajakta Sutar )                     */ 
/*  9.1   -   IN:1208 Options price range validation on Modification (Prajakta Sutar)                   */
/*  9.2   -   Minor Changes -Client Lock changes  (Sachin Birje)                                        */
/*  9.3   -   Margin Reporting Regulatory Changes (Nikhil Soni )                                        */
/********************************************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fn_pos.h>
#include <eba_to_ors.h>
#include <fo_fml_def.h>
/*** #include <fml_def.h>  ***commented in ver VQC****/
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h> 
#include <fn_val_ord.h> 
#include <fml_rout.h>
#include <fn_read_debug_lvl.h> 
#include <fn_span_lib.h>
#include <math.h>
#include <fo_view_def.h>    /***  Ver 4.9 ***/
#define PHYDLVRY_MTM -7       /*** Ver 7.0 ***/


EXEC SQL INCLUDE "table/fum_fo_undrlyng_mstr.h";

int fn_check_inp_spn	(	char *c_ServiceName,
                 			 	struct st_xchngbook *ptr_st_xchngbook,
                  			struct st_cntrct_qt *ptr_st_cntrct_qt,
                  			char c_fum_mrkt_typ,      
                  			char c_fcm_mrkt_typ,    
                        int i_rollover_ord_ind,                      /* Ver 6.4 */ 
												char *c_sprd_expiry_date1, /* Ver 6.4 */
												char *c_sprd_expiry_date2, /* Ver 6.4 */
                  			struct st_err_msg *ptr_st_err_msg
				 							);

int fn_check_ord_spn	( char *c_ServiceName,
                  			struct st_cntrt_gen_inf *ptr_st_cntrct_gen_inf,
                  			struct st_xchngbook *ptr_st_xchngbook,
                  			struct st_orderbook *ptr_o_st_ordbook,
                  			struct st_err_msg *ptr_st_err_msg 
											);

/*****Commented in VQC**
int fn_chk_cntrctspn	(	char * c_ServiceName,
                  			struct st_contract *ptr_st_cntrct,
                  			char *c_fum_mrkt_typ,   
                  			char *c_fcm_mrkt_typ,  
                  			struct st_err_msg *ptr_st_err_msg
 											); 
******/
  

int fn_cal_mod_pos  ( char  *c_ServiceName,
                  		char  *c_err_msg,
                  		struct st_pstn_actn *ptr_st_pstn_actn
                		);

int fn_call_modspn_actn ( char *c_ServiceName,
                        	char  *c_pipe_id,
                          struct st_pstn_actn *ptr_st_pstn_actn,
                          struct st_fus_undrlyng_pstn	*ptr_st_undfut_pos_crrnt,
                          struct st_fus_undrlyng_pstn	*ptr_st_undfut_pos_to_be,
                          struct st_err_msg *ptr_st_err_msg
												);

int fn_5paisa(long);   /*** Added in Ver 1.9 ****/

int fn_stts_trail_ord(char * );  /** Ver 5.8 **/

int fn_upd_trail_ord(char *c_order_ref);  /** Ver 5.8 **/

int fn_vrfy_spnprc_band_mkt_loc ( char c_ServiceName [ 33 ],
                              char c_xchng_cd [ 4 ],
                              char c_prd_typ,
                              char c_undrlyng [ 7 ],
                              long l_ord_limit_rt,
                              char c_expry_dt[ 21 ],
                              struct st_err_msg *ptr_st_err_msg
                            ); /*** Added in Ver 5.8 ***/

int fn_get_quote_zero ( char *c_ServiceName, char c_ord_flw, long l_best_bid_price, long l_best_offer_price, long l_previous_close_price, long *l_quote_zero);   /*** Added in Ver 6.9 ***/
/*** ver 6.4 starts ***/
int fn_vrfy_spnprc_band_mkt_rws_loc ( char c_ServiceName [ 33 ],
                              char c_xchng_cd [ 4 ],
                              char c_prd_typ,
                              char c_undrlyng [ 7 ],
                              long l_ord_limit_rt,
															char *c_sprd_expiry_date1,                  
															char *c_sprd_expiry_date2,
                              struct st_err_msg *ptr_st_err_msg
                            );
/*** ver 6.4 ends ***/

double d_required_amount=0.0;  /** Ver 2.5 **/

struct st_pstn_actn *ptr_st_pstn_actn;
struct st_fus_undrlyng_pstn st_undpstn_crrnt;
struct st_fus_undrlyng_pstn st_undpstn_tobe;

/*** Commented In VQC

struct st_fus_undrlyng_pstn st_undrlyng_pstn;			
struct st_fcp_cntrct_pstn st_cntrct_pstn;	

Commented In VQC  ***/

struct st_err_msg *ptr_st_err_msg;

char c_pipe_id[3];
/***char c_mtm_flag; **commented in VQC****/
char c_user_id[16];


double  d_mltplr      = 0.0;
double  d_spn_mrgn    = 0.0;
double  d_nov         = 0.0;
double  d_total_mrgn  = 0.0;
double  d_intl_mrgn   = 0.0;
double  d_min_mrgn    = 0.0;
double  d_blkd_prmum  = 0.0;
double  d_opt_prmum   = 0.0; 
double  d_total_prmum = 0.0;
double  d_undrlyng_pl = 0.0;
/*** double  d_blckd_pnl   = 0.0; **commented in VQC****/
double  d_oblckd_amnt = 0.0;

/*** double  d_square_off_prmum = 0.0;   commented in ver 3.4 *** Ver 1.1 ***/
/** int  i_sell_square_off_chk = 0;		 Commented in ver 1.4 As it preserv previous instance value *** Ver 1.1 ***/

void SFO_SPN_MOD_ORD( TPSVCINFO *rqst )
{
 	FBFR32 *ptr_fml_Ibuf;
 	FBFR32 *ptr_fml_Sbuf;
 	FBFR32 *ptr_fml_Rbuf;

  char c_ServiceName[33] = "\0";              /* initialized in Ver 7.5 */
  
	/** char c_err_msg[256];        ** Ver 7.5 ***/
  varchar c_err_msg[256] = {'\0'};        /* Converted to Varchar in Ver 7.5 */ 

/*char c_channel[4];			Commented In VQC	***/
  char c_bp_id[9] = "\0";              /* initialized in Ver 7.5 */
  char c_alias[9];
	char c_prdct_typ='\0'; /****Initialised in VQC*****/
  char c_trdng_psswrd_flg = YES;
  char c_temp_psswrd[LEN_USR_TRDNG_PSSWRD];
/**  char c_roll_stts;   **commented in VQC****/ 
/**  char c_err_msg1[256]; **commented in VQC****/ 
  char c_fum_mrkt_typ ='\0'; 	/****Initialised in VQC*****/
  char c_fcm_mrkt_typ ='\0';  /****Initialised in VQC*****/
/***char c_fno_dmn_nm [ 16 ]; ***
  char c_fno_trg_nm [ 16 ];   ***
  char c_fno_trg_dat [ 256 ];   **commented in VQC****/
	char c_ip_address[45+1]="\0";	/** Changed to 45 from 15 in Ver 7.3 **/ /* Ver 1.6 */
  char c_request_typ = 'M';					/* Ver 2.0 */
  char c_ord_val_flg = 'N';         /* Ver 2.1 */
	char c_cumopn_val_flg = 'N';         /* Ver 2.1 */
	char c_srvc_call_flg = '\0';         /* Ver 2.1 */
  char c_modfyscrn_flg='N';            /** Ver 2.5 **/
  char c_vtc_ord='\0';         /*** Ver 4.6 ***/
  char c_source_flg = '\0';         /*** Ver 4.4 ***/
  /*** char c_source[4];         *** Ver 4.6 *** *** Commented in Ver 6.1 ***/
  char c_lmt_mrkt_flg = '\0';         /*** Ver 4.7 ***/
  char c_sltpfp_lmt_allwd_flg = '\0';         /*** Ver 4.7 ***/
  char c_usr_flg = '\0';					 /*** Ver 4.7 ***/
  char c_fc_flag = '\0';					/*** Ver 4.7 ***/
  char c_txn_flg='Y';             /*** Ver 5.4 ***/
  char c_sltp_trail_flag='N';   /** Ver 5.8 **/
	char c_rmrks[33] = {'\0'};       /** Ver 5.8 **/
  char c_trail_usr_flg= '\0';          /*** Ver 5.8 **/
  char c_mkt_typ = 'D';          		/**Ver 6.3**/
  char c_fxb_plcd_stts      ='A';   /**Ver 6.3**/
  char c_fxb_rms_prcsd_flg ='P';    /**Ver 6.3**/
	char c_trd_flg ='N';           		/**Ver 6.3**/
  char c_dlvry_pos_allwd = 'Y'; /*** 6.6 ***/
  char  c_setlmnt_flg = 'C';    /*** 6.6 ***/	
  char c_spn_flg = 'Y';         /*** Ver 6.7 ***/ 

  
  char c_ref_rmrks[133] = "\0";      /*** Ver 7.4 ***//** size 100 to 133 in ver 7.8 **/
  char  c_tmp_rmrks [ 133 ] = "\0";  /*** Ver 7.4 ***//** size 100 to 133 in ver 7.8 **/
  double d_comp1_mrgn = 0.0;  /*** Ver 7.4 ***/
  double d_comp1_pl = 0.0;    /*** Ver 7.4 ***/
  double d_xchng_amt = 0.0;   /*** Ver 7.4 ***/

  double d_prem_amt=0.0; /** ver 7.8 **/
  double d_spn_mrgn=0.0; /** ver 7.8 **/
  double d_expr_mrgn=0.0; /** ver 7.8 **/

  varchar c_trd_dt[LEN_DATE];
  varchar c_sysdate[LEN_DATE];
  varchar c_usr_trd_psswrd[ 50 + 1 ];
  varchar c_expiry_dt [ LEN_DATE ];  /** Ver 4.6 **/
	varchar c_fxb_xchng_rmrks[25];  /**Ver 6.3**/


  int i_level_exists =0;
  int i_returncode	=	0;			/****Initialised in VQC*****/
  int i_trnsctn			=	0;			/****Initialised in VQC*****/
  int i_err[16] = { 0 };       /* initialized in Ver 7.5 */ 
  int i_ferr[16] = { 0 };       /* initialized in Ver 7.5 */
  int i_condition = 1;
  int i_rtrn_cd	=	0;					/****Initialised in VQC*****/
	int	i_rtrn_xchngbk	=	0;		/****Initialised in VQC*****/
 	int i_usrprfl[3] = { 0 };       /* initialized in Ver 7.5 */
 	int i_usrprflerr[3] = { 0 };       /* initialized in Ver 7.5 */
  int i_xchngbk[14] = { 0 };       /* initialized in Ver 7.5 */
  int i_xchngbkerr[14] = { 0 };       /* initialized in Ver 7.5 */
	int	i  = 0;       /* initialized in Ver 7.5 */
	int	j  = 0;       /* initialized in Ver 7.5 */
  int i_is_dbc_cust = 0 ; /*** Ver 2.9 ***/
	/*** int i_actn_id = 0 ;     *** ver 3.0  Commented In Ver 2.4 ***/
	int i_actn_id = -1 ;     /*** Ver 2.4  ***/
	long l_tot_ord_qty = 0; /*** Ver 3.6 ***/
  int insider_exist = 0;  /*** Ver 4.9 ***/
	
 /*** Ver 1.9 Starts ***/

  char c_fc_flg = '\0'; /****Initialised in VQC*****/
  char c_sltp_allwd_stts= '\0'; /****Initialised in VQC*****/
  char c_sltp_eos_flg= '\0'; 
  char c_frsh_ordr_stts= '\0';     /****Initialised in VQC*****/
  char c_cvr_ordr_stts = '\0';			 /*** Ver 4.7 ***/
  char c_sltp_ordr_refrnc[19];
  char c_narration_id[4] = "\0";			/* initialized in Ver 7.5 */
  char c_ord_flw = '\0';
	char c_temp_slm_flg = '\0';
  char c_actn_flg = '\0';     /*** Ver 3.9 ***/
  long  l_exctd_qty = 0;
/*long  l_frsh_xtd_qty = 0;			Commented In VQC	***/
  long  li_tot_exec_qty = 0;

	/***	Commented In VQC
	long  l_open_qty = 0;
  long li_dsclsd_qty = 0; 
  long li_stp_lss_tgr_prc = 0;   
	*****************************/

  long l_amt = 0;
/*long int li_lmt_rt = 0;			Commented In VQC	***/
  long l_tmp_ord_tot_qty = 0;   /** Ver 3.0 **/
  long  l_vtcopnpstn_qty = 0;  /** Ver 4.6 **/
  long  l_vtccvr_qty = 0.0 ;   /** Ver 4.6 **/
  long  l_vtcopn_qty = 0.0 ;   /** Ver 4.6 **/
  long  l_modified_qty=0;      /** Ver 4.6 **/
	double  d_fum_trail_amt =0;    /** Ver 5.8 **/
	char c_xchng_rmrks[257]   = {'\0'};   /** Ver 5.8 **/ 
	MEMSET(c_xchng_rmrks);  							/** Ver 5.8 **/

	MEMSET(c_expiry_dt);           /* initialized in Ver 7.5 */

  double d_amt_to_be_blckd = 0.0;
  double d_lss_amt_to_be_blckd = 0.0;
  double d_balance_amt = 0.0;
  double d_diff_amt= 0.0;
  double d_diff_loss= 0.0;
  double d_amt_blkd = 0.0;
  double d_lss_amt_blkd  = 0.0;

	/***	Commented In VQC

  double d_diff_amt_blckd = 0.0;
  double d_diff_lss_amt_blckd = 0.0;
	double d_wgt_avrg_price = 0.0;
  double d_fmm_sltp_prcnt= 0.0;

	********************************/

  double d_frsh_exe_val = 0.0;
  double d_fmm_sltp_diff_prcnt = 0.0;
  char c_sys_msg[4];
  char c_fresh_ord_flg = '\0';   /*** Ver 3.0 ***/
  int i_mtm_flg = 0;
  /*** Ver 1.9 Ends ***/

	/*** Ver 2.1 Starts ***/
  double d_old_ord_val = 0.0 ;
  double d_new_ord_val = 0.0 ;
  double d_netadj_ord_val = 0.0 ;
  /*** Ver 2.1 Ends ***/


/**	int  i_sell_square_off_chk = 0;		Commented in ver 1.4 *** Ver 1.1 ***/

  long l_xchng_seq_num = 0;
  long l_ord_lmt_rt    = 0;
  long l_fsh_ord_lmt_rt=0;  /* Ver 4.7*/
  long int li_aval_ordqty =0;
  long int li_max_sell_ordqty =0;  /*** Ver 3.3 ***/
	long 	l_recvbuf	=	0;
	long  l_old_rt =  0;         /*** Ver 2.1 ***/

  double   d_totordrval = 0.0000;

  TPTRANID tranid  ; /*** Ver 3.9 ***/

	/*** ver 8.2 start ***/
  char c_buy_allwd = '\0';
  char c_sell_allwd = '\0';
  /*** ver 8.2 end ***/

  char c_mrkt_ordr_flg = '\0'; /**** ver 8.4 ***/

	/*** Ver 1.4 MEMSET all global structure as it preserv previous instance value ***/
  MEMSET (ptr_st_pstn_actn);
  MEMSET (st_undpstn_crrnt);
  MEMSET (st_undpstn_tobe);
/*MEMSET (st_cntrct_pstn);			Commented In VQC	***/
  /*** Ver 1.4    ***/

	/*** Ver 3.5 Starts ***/
	char c_optpls_allwd_stts = '\0';
	char c_rqst_typ = '\0';
	char c_optpls_eos_flg = '\0';

	/* Commented In VQC

	double d_frm_diffrnc_mrgn = 0.0 ;				
	long l_temp_stp_lss_tgr = 0 ;	

	Commented In VQC  ***/

	long l_ret_limit_rt = 0 ;
	/*** Ver 3.5 Ends   ***/

	/*** Ver 6.9 Starts ***/
  int  i_phy_sqroff_check = 0;
  long l_quote_zero = 0;
  long l_best_bid_price = 0;
  long l_best_offer_price = 0;
  long l_previous_close_price = 0;
  /*** Ver 6.9 Ends ***/
  
    /***** Ver 6.4 Starts *****/
  int i_rollover_ord_ind = 0;
  char c_sprd_expiry_date1[LEN_DATE];
  char c_sprd_expiry_date2[LEN_DATE];
  long l_sprd_expry_dt1 = 0;
  long l_sprd_expry_dt2 = 0;
  long l_rws_qty  = 0;
  char c_expry_dt2[LEN_DATE];
  MEMSET(c_sprd_expiry_date1);
  MEMSET(c_sprd_expiry_date2);
  MEMSET(c_expry_dt2);
  /***** Ver 6.4 Ends *****/

	char c_prft_pend = 'N'; /** ver 8.1 **/
	double d_avg_prc = 0; /*** Ver 8.1 ***/
  long  l_prft_amt  = 0;  /** ver 8.1 **/
	double d_fmm_prft_diff_prcnt = 0; /** ver 8.1 **/
	long l_stp_loss_trgr = 0;   /***  Ver 8.1 ***/

	char c_cntrct_pstn_flw = '\0'; /*** Ver 8.9 ***/
  char c_sqroff_flg = '\0';      /*** Ver 8.9 ***/
  long l_cntrct_pstn_qty = 0;    /*** Ver 8.9 ***/
  long l_cvr_pstn_qty = 0;    /*** Ver 8.9 ***/
  long l_ord_total_qty = 0;    /*** Ver 8.9 ***/

  struct st_contract st_cntrct;
  struct st_cntrctlong_qt st_cntrctlongqt; 
  struct st_usr_prfl st_usrprfl;
  struct st_orderbook st_i_ordbk;
  struct st_orderbook st_o_ordbk;
  struct st_xchngbook st_xchngbk;
  struct st_err_msg st_err_msg;
 /**struct st_sequence st_r_sequence;    **commented in VQC****/
  struct st_sequence st_s_sequence;
  struct st_pstn_actn st_pstn_actn;
  struct st_cntrt_gen_inf st_cntrct_geninf;
  struct st_cntrct_qt st_cntrctqt;
  /**struct st_xchngbook st_s_xchngbk;  **commented in VQC****/
  struct st_xchngbook st_d_xchngbk;
  struct vw_usr_prfl st_usr_prfl1;    /*** Ver 4.9 ***/
  struct vw_usr_prfl st_usrprfl_vw;    /*** Ver 5.6 ***/
  struct vw_err_msg st_err_msg_vw;     /*** Ver 5.6 ***/
  struct vw_contract st_contrct;       /*** Ver 6.7 ***/
  struct vw_contract st_cntrct_ins;    /*** Ver 8.0 ***/

	/*** Ver 1.4 MEMSET all Local structure as it preserv previous instance value ***/
  MEMSET (st_cntrct);
  MEMSET (st_cntrctlongqt);
  MEMSET (st_usrprfl);
  MEMSET (st_i_ordbk);
  MEMSET (st_o_ordbk);
  MEMSET (st_xchngbk);
  MEMSET (st_err_msg);
 /*** MEMSET (st_r_sequence); **commented in VQC****/
  MEMSET (st_s_sequence); 
  MEMSET (st_pstn_actn);
  MEMSET (st_cntrct_geninf);
  MEMSET (st_cntrctqt);
 /** MEMSET (st_s_xchngbk); **commented in VQC****/
  MEMSET (st_d_xchngbk);
  /*** Ver 1.4 ***/

	MEMSET(c_temp_psswrd);    /** Ver 2.5 **/
  MEMSET(c_usr_trd_psswrd); /** Ver 2.5 **/

  MEMSET(st_usrprfl_vw);    /*** Ver 5.6 ***/
  MEMSET(st_err_msg_vw);    /*** Ver 5.6 ***/

  MEMSET(c_sltp_ordr_refrnc);  /***Added in Ver VQC***/

	MEMSET(st_usr_prfl1);       /* initialized in Ver 7.5 */

 /****Ver 6.3 starts****/
  MEMSET(c_fxb_xchng_rmrks); 
  strcpy((char*)c_fxb_xchng_rmrks.arr,"MODIFIED BY CLIENT");
  
 /*****Ver 6.3 Ends*****/

/*****Ver VQC Starts****/
  ptr_fml_Ibuf = NULL ;
/******Ver VQC Ends*****/
	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  
	strcpy( c_ServiceName, rqst->name );

  INITDBGLVL(c_ServiceName);

	ptr_fml_Sbuf	=	( FBFR32 *)NULL;
	ptr_fml_Rbuf	=	( FBFR32 *)NULL;

	i_usrprfl  		[ 0 ] = Fget32( ptr_fml_Ibuf ,FFO_USR_ID,0,(char *) st_usrprfl.c_user_id,0);
  i_usrprflerr  [ 0 ] = Ferror32;
  i_usrprfl  		[ 1 ] = Fget32( ptr_fml_Ibuf ,FFO_SSSN_ID,0,(char *) &st_usrprfl.l_session_id,0);
  i_usrprflerr  [ 1 ] = Ferror32;
  i_usrprfl  		[ 2 ] = Fget32( ptr_fml_Ibuf ,FFO_EBA_MTCH_ACT_NO,0,(char *) st_usrprfl.c_cln_mtch_accnt,0);
  i_usrprflerr  [ 2 ] = Ferror32;

	for ( i=0 ; i < 3  ; i++ )
  {
    if ( i_usrprfl [ i ] == -1 && i_usrprflerr [ i ] !=  FNOTPRES )
    {
      fn_userlog( c_ServiceName, "Error in :%d:",i );
      fn_errlog( c_ServiceName, "S31005", Fstrerror32( i_usrprflerr [i]),c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***//***Datatype is converted to Varchar in Ver 7.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/  /*** Datatype is converted to Varchar in Ver 7.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); /*** Ver 4.5 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
  }


 	i_xchngbk  		[ 0 ] = Fget32( ptr_fml_Ibuf ,FFO_XCHNG_CD,0,(char *) st_xchngbk.c_xchng_cd,0);
  i_xchngbkerr  [ 0 ] = Ferror32;
  i_xchngbk  		[ 1 ] = Fget32( ptr_fml_Ibuf ,FFO_PIPE_ID,0,(char *)  st_xchngbk.c_pipe_id,0);
  i_xchngbkerr  [ 1 ] = Ferror32;
  i_xchngbk  		[ 2 ] = Fget32( ptr_fml_Ibuf ,FFO_MOD_TRD_DT,0,(char *) st_xchngbk.c_mod_trd_dt,0);
  i_xchngbkerr  [ 2 ] = Ferror32;
  i_xchngbk  		[ 3 ] = Fget32( ptr_fml_Ibuf ,FFO_LMT_MKT_SL_FLG,0,(char *) &st_xchngbk.c_slm_flg,0);
  i_xchngbkerr  [ 3 ] = Ferror32;
  i_xchngbk  		[ 4 ] = Fget32( ptr_fml_Ibuf ,FFO_DSCLSD_QTY,0,(char *) &st_xchngbk.l_dsclsd_qty,0);
  i_xchngbkerr  [ 4 ] = Ferror32;
  i_xchngbk  		[ 5 ] = Fget32( ptr_fml_Ibuf ,FFO_ORD_TOT_QTY,0,(char *) &st_xchngbk.l_ord_tot_qty,0);
  i_xchngbkerr  [ 5 ] = Ferror32;
  i_xchngbk	 		[ 6 ] = Fget32( ptr_fml_Ibuf ,FFO_LMT_RT,0,(char *)   &st_xchngbk.l_ord_lmt_rt,0);
  i_xchngbkerr  [ 6 ] = Ferror32;
  i_xchngbk  		[ 7 ] = Fget32( ptr_fml_Ibuf ,FFO_STP_LSS_TGR,0,(char *) &st_xchngbk.l_stp_lss_tgr,0);
  i_xchngbkerr  [ 7 ] = Ferror32;
  i_xchngbk  		[ 8 ] = Fget32( ptr_fml_Ibuf ,FFO_ORD_VALID_DT,0,(char *) st_xchngbk.c_valid_dt,0);
  i_xchngbkerr  [ 8 ] = Ferror32;
  i_xchngbk  		[ 9 ] = Fget32( ptr_fml_Ibuf ,FFO_ORD_TYP,0,(char *) &st_xchngbk.c_ord_typ,0);
  i_xchngbkerr  [ 0 ] = Ferror32;
  i_xchngbk  		[ 10] = Fget32( ptr_fml_Ibuf ,FFO_ACK_TM,0,(char *) st_xchngbk.c_ack_tm,0);
  i_xchngbkerr  [ 10 ] = Ferror32;
  i_xchngbk  		[ 11] = Fget32( ptr_fml_Ibuf ,FFO_SPL_FLG,0,(char *) &st_xchngbk.c_spl_flg,0);
  i_xchngbkerr  [ 11 ] = Ferror32;
  i_xchngbk  		[ 12] = Fget32( ptr_fml_Ibuf ,FFO_ORDR_FLW,0,(char *) &st_xchngbk.c_ordr_flw,0);
  i_xchngbkerr  [ 12 ] = Ferror32;
  i_xchngbk  		[ 13] = Fget32( ptr_fml_Ibuf ,FFO_ORDR_RFRNC,0,(char *)	st_xchngbk.c_ordr_rfrnc ,0);
  i_xchngbkerr  [ 13 ] = Ferror32;


	for ( j=0 ; j < 14  ; j++ )
  {
    if ( i_xchngbk [ j ] == -1 && i_xchngbkerr [ j ] !=  FNOTPRES )
    {
      fn_userlog( c_ServiceName, "Error in :%d:",j );
      fn_errlog( c_ServiceName, "S31010", Fstrerror32( i_xchngbkerr[j] ),c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/ /*** Datatype is converted to Varchar in Ver 7.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/  /*** Datatype is converted to Varchar in Ver 7.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
  }

	/**** Ver 5.8 Starts ****/

	MEMSET(c_rmrks);

	i_err[0] = Fget32(ptr_fml_Ibuf,FFO_BNK_TRN_TYP,0,(char*)&c_sltp_trail_flag,0);
	i_ferr[0]  = Ferror32;
	i_err[1] = Fget32(ptr_fml_Ibuf,FFO_SYMBOL,0,(char *)c_rmrks,0);
  i_ferr [1] = Ferror32;
  i_err[2] = Fget32(ptr_fml_Ibuf,FFO_LST_TRD_PRC, 0, (char *)&st_xchngbk.l_lTP, 0);
  i_ferr [2] = Ferror32;
	i_err[3] = Fget32(ptr_fml_Ibuf,FFO_XCHNG_RMRKS, 0, (char *)c_xchng_rmrks, 0);  
	i_ferr [3] = Ferror32;

	for( i = 0; i < 4; i++)  
	{
		if (( i_err[i] == -1 ) && ( i_ferr[i] != FNOTPRES ))
		{
		 fn_errlog( c_ServiceName, "S31015",Fstrerror32( i_ferr[0] ),c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***//*** Datatype is converted to Varchar in Ver 7.5 ***/
			fn_userlog( c_ServiceName,"Failed to get :%d:",i);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/ /*** Datatype is converted to Varchar in Ver 7.5 ***/
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);  
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/			/*** Ver 7.5 ***/
		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		
		}
	}

  rtrim(c_rmrks);

	if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )  
	{
	  strcpy( st_xchngbk.c_xchng_rmrks, c_xchng_rmrks);
		rtrim(st_xchngbk.c_xchng_rmrks);	
	}	
	
	/**** Ver 5.8 Ends ****/

	memcpy(&st_usr_prfl1,&st_usrprfl,sizeof (struct vw_usr_prfl));  /*** Ver 4.9 ***/

	ptr_fml_Sbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Sbuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31020", TPMSG, c_err_msg.arr  );/*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/    /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
	
		/***	Commented In VQC 
    tpfree((char *)ptr_fml_Sbuf);
		tpfree ((char *)ptr_fml_Rbuf);			***	Ver 4.2	***
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); 
		*********************************************************/

		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	ptr_fml_Rbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Rbuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31025", TPMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/	 /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/	 /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
    tpfree((char *)ptr_fml_Sbuf);
		/***	Commented In VQC 
    tpfree ((char *)ptr_fml_Rbuf);      ***  Ver 4.2 ***
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg);
		******************************************************/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/*  Ver 4.7 Starts  */
  
  /*** Commented in Ver 6.2 as data-type of FML used is long and variable data-type is char ***
	i_err[0] = Fget32( ptr_fml_Ibuf, FFO_USR_FLG , 0,(char *)&c_usr_flg,0);
  ***/

  i_err[0] = Fget32( ptr_fml_Ibuf, FFO_CLSR_TYP , 0,(char *)&c_usr_flg,0); /*** Ver 6.2 ***/
	i_ferr [0] = Ferror32;
	if (( i_err[0] == -1 ) && ( Ferror32 != FNOTPRES ))
	{
	 fn_errlog( c_ServiceName, "S31030", Fstrerror32(i_ferr[0]),c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
	 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
   {
     fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
   }			
	 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/  /*** Datatype is converted to Varchar in Ver 7.5 ***/
	 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
	 Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   
	 Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
	 tpfree((char *)ptr_fml_Sbuf);			/***	VQC	***/
	 tpfree((char *)ptr_fml_Rbuf);			/***  VQC ***/
	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	if(DEBUG_MSG_LVL_1)  /** Ver 5.7 **/
  {
		fn_userlog(c_ServiceName,"wrapper flag :%c: l_ord_lmt_rt : %ld c_slm_flg : %c  c_ordr_rfrnc: %s ",c_usr_flg,st_xchngbk.l_ord_lmt_rt, st_xchngbk.c_slm_flg, st_xchngbk.c_ordr_rfrnc);
	}
	/*  Ver 4.7 Ends  */

  /** Ver 5.9 Starts **/

  if(c_usr_flg == 'W')
  {
    MEMSET(c_ip_address);

    i_err[1] = Fget32( ptr_fml_Ibuf, FFO_OI_INDCTR, 0,(char *)c_ip_address,0);
    i_ferr [1] = Ferror32;

    if (( i_err[0] == -1 ) && ( Ferror32 != FNOTPRES ))
    {
      fn_errlog( c_ServiceName, "S31035", Fstrerror32(i_ferr[0]),c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/ 
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/	 /*** Datatype is converted to Varchar in Ver 7.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
			tpfree((char *)ptr_fml_Sbuf);      /***  VQC ***/
			tpfree((char *)ptr_fml_Rbuf);      /***  VQC ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName, "c_ip_address is...:%s:",c_ip_address);
  }

  /** Ver 5.9 Ends **/

  /** Ver 2.7 Starts **/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, " Before change Pipe id :%s:", st_xchngbk.c_pipe_id);
  }

  MEMSET(st_xchngbk.c_pipe_id);
  st_xchngbk.c_pipe_id[0]=st_xchngbk.c_ordr_rfrnc[8];
  st_xchngbk.c_pipe_id[1]=st_xchngbk.c_ordr_rfrnc[9];
  st_xchngbk.c_pipe_id[2]='\0';

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, " After change Pipe id :%s:", st_xchngbk.c_pipe_id);
  }

  /** Ver 2.7 Ends **/

	strcpy(c_pipe_id,st_xchngbk.c_pipe_id);
	
  memset(c_alias,'\0',sizeof(c_alias)); 
/*memset(c_channel,'\0',sizeof(c_channel)); 			Commented In VQC	***/

  /***  Ver 2.9 Starts  ***/

  if( st_usrprfl.c_user_id[0] != BPID )
  {
    i_is_dbc_cust = 0;

    EXEC SQL
       SELECT 1
           INTO :i_is_dbc_cust
       FROM  CLM_CLNT_MSTR
       WHERE CLM_MTCH_ACCNT = :st_usrprfl.c_cln_mtch_accnt
    /**   AND   CLM_TRD_FLG = 'N' ****commented in ver 6.3***/
				  AND   CLM_TRD_FLG =:c_trd_flg	/****Added in Ver 6.3***/	
          AND   CLM_BP_ID IS NOT NULL;

    if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
    {
        fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/   
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    	  {
      		fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    		}
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/  /*** Datatype is converted to Varchar in Ver 7.5 ***/
      	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
 		    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
	    	tpfree((char *)ptr_fml_Sbuf);				/***  Ver 4.2 ***/
    		tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if ( i_is_dbc_cust == 1 )
    {
       fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst, this facility has been Disabled");
       fn_errlog( c_ServiceName, "B35018", "", c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/  
			 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    	 {
      	 fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    	 }
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/    /*** Datatype is converted to Varchar in Ver 7.5 ***/
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
       Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
			 tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
       tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

 /***  Ver 2.9  Ends  ***/

 /*** Ver 7.2 starts ***/

  if(st_usrprfl.c_user_id[0] ==BPID)
   {
     if( fn_simaltns_ssn_term ( c_ServiceName,st_usrprfl.c_user_id,st_usrprfl.l_session_id,st_usrprfl.c_cln_mtch_accnt,c_err_msg.arr) == -1 ) 			 /*** Datatype is converted to Varchar in Ver 7.5 ***/
     {
      fn_errlog(c_ServiceName,"S31045","Error while checking simultaneous active session",c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/ 
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/  /*** Datatype is converted to Varchar in Ver 7.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amount, 0);
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

 /*** Ver 7.2 Ends ***/

  if(st_usrprfl.c_user_id[0] == BPID)
  {
  	if(Fget32(ptr_fml_Ibuf,FFO_ALIAS,0,(char *)c_alias,0) == -1)
    {
    	fn_errlog( c_ServiceName, "S31050", FMLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/ 
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    	{
    	  fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    	}
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/    /*** Datatype is converted to Varchar in Ver 7.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
			Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
      tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
      tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    EXEC SQL
    	SELECT 	1
      INTO   	:i_level_exists
      FROM   	CLM_CLNT_MSTR
      WHERE  	CLM_MTCH_ACCNT = :st_usrprfl.c_cln_mtch_accnt
		 	AND 	 	CLM_BP_ID      = :st_usrprfl.c_user_id
 			AND 		CLM_ALIAS_NAME = :c_alias ;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"BP alias  is :%s:",c_alias);
		/*fn_userlog(c_ServiceName,"BP channel  is :%s:",c_channel);	Commented In VQC	***/
		}

    if(i_level_exists != 1 )
    {
    	fn_errlog( c_ServiceName, "B55006", "", c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/						 /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      }
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/				 /*** Datatype is converted to Varchar in Ver 7.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
			Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
      tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
      tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    strcpy(c_bp_id,st_usrprfl.c_user_id);

  }
  else
  {
  	strcpy(c_bp_id," ");
  }

  /** if(DEBUG_MSG_LVL_0)  ** ver 5.7 **/
  if(DEBUG_MSG_LVL_3)    /** ver 5.7 **/
	{
    fn_userlog(c_ServiceName,"The BP id is :%s: ,:%s:", c_bp_id,st_usrprfl.c_user_id);
    fn_userlog(c_ServiceName,"The Alias is :%s: ", c_alias);
    /*fn_userlog(c_ServiceName,"BP channel  is :%s:",c_channel);	Commented In VQC	***/
  }

	if(DEBUG_MSG_LVL_0)  /** ver 5.7 ** debug lvl changed 0 to 1 **/
	{
  	fn_userlog( c_ServiceName, "User id :%s:,Session id:%ld:,Match Account:%s:", st_usrprfl.c_user_id,st_usrprfl.l_session_id,st_usrprfl.c_cln_mtch_accnt );
    fn_userlog( c_ServiceName, "Order Reference no :%s:, Lmt/Mkt/StpLss:%c:, GTT/GTD Order :%c:", st_xchngbk.c_ordr_rfrnc,st_xchngbk.c_slm_flg,st_xchngbk.c_ord_typ );
    fn_userlog( c_ServiceName, "Valid date :%s:, Disclosed Qty :%ld:, Stop Loss Trgg:%ld:", st_xchngbk.c_valid_dt,st_xchngbk.l_dsclsd_qty,st_xchngbk.l_stp_lss_tgr );
    fn_userlog( c_ServiceName, "Order Qty:%ld:,Limit Rate:%ld:, Pipe id:%s:", st_xchngbk.l_ord_tot_qty ,st_xchngbk.l_ord_lmt_rt, st_xchngbk.c_pipe_id);
	}

  /*** c_temp_slm_flg = st_xchngbk.c_slm_flg;  *** Ver 1.9 *** Commented In Ver 3.6 and moved down ***/

	/*** Ver 4.9 Starts ****/
	
	/******* Commented in ver 6.0  ****** *** Ver 8.0 comment corrected ***


 i_returncode = fn_chk_und_insider(c_ServiceName,
                                    st_usr_prfl1,
                                    st_cntrct.c_undrlyng,
                                    &insider_exist);
  if (i_returncode == -1)
  {
      fn_errlog( c_ServiceName, "S31055", "Error in Function fn_chk_und_insider", c_err_msg.arr); *** Datatype is converted to Varchar in Ver 7.5 ***		** Datatype is converted to Varchar in Ver 7.5 ***
		  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     ** Ver 5.8 **
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       ** Ver 5.8 **
      }
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); *** Datatype is converted to Varchar in Ver 7.5 ***   *** Datatype is converted to Varchar in Ver 7.5 ***
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
			tpfree((char *)ptr_fml_Sbuf);      ***  VQC ***
			tpfree((char *)ptr_fml_Rbuf);      ***  VQC ***
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if (insider_exist == 1)
  {
      fn_errlog( c_ServiceName, "B21042", DEFMSG, c_err_msg.arr );   *** Datatype is converted to Varchar in Ver 7.5 ***	
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     ** Ver 5.8 **
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                      ** Ver 5.8 **
      }
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); *** Datatype is converted to Varchar in Ver 7.5 ***						 *** Datatype is converted to Varchar in Ver 7.5 ***
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
			tpfree((char *)ptr_fml_Sbuf);      ***  VQC ***
			tpfree((char *)ptr_fml_Rbuf);      ***  VQC ***
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	****** Commented ver 6.0 Ends **********/ /** Ver 8.0 commenting corrected **/

  /**** Ver 4.9 ENDS  ****/

	/** Ver 2.3 Starts **/

  if( st_xchngbk.l_stp_lss_tgr > 0 )
  {
 /****DEBUG LVL Added in VQC****/  
 if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Inside Stop Loss Trigger Price Check.");
  }
    st_xchngbk.c_slm_flg  = 'S' ;

	/****DEBUG LVL Added in VQC****/
 if(DEBUG_MSG_LVL_3)
   {
    fn_userlog(c_ServiceName," SLM Flag Is :%c:",st_xchngbk.c_slm_flg);
   } 
  }
  /** Ver 2.3 Ends **/
  c_temp_slm_flg = st_xchngbk.c_slm_flg;  /*** Ver 3.6 ***/	


	if(st_xchngbk.c_ord_typ == GOOD_TILL_DATE)
  {
    fn_userlog( c_ServiceName, "GTD Orders are not allowed for FNO from 30-07-2004");
    fn_errlog( c_ServiceName, "B28572", "", c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/				 /*** Datatype is converted to Varchar in Ver 7.5 ***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/				 /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
	  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
  	tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
    tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if(st_xchngbk.c_slm_flg !='L' && st_xchngbk.c_slm_flg  != 'S' && st_xchngbk.c_slm_flg !='M' )
  {
    fn_userlog( c_ServiceName, "c_slm_flg is NULL");
    fn_errlog( c_ServiceName, "S31060", "Invalid SLM Flag", c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/		 /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
 		tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
    tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if(st_xchngbk.c_ord_typ !='T' && st_xchngbk.c_ord_typ  != 'I' && st_xchngbk.c_ord_typ  != 'V' )  /** Ver 4.6 'V' **/ 
  {
    fn_userlog( c_ServiceName, "ORDER TYPE is NULL");
    fn_errlog( c_ServiceName, "S31065", "Invalid Order Type", c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/ 
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/	 /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
 		tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
    tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /********** Commented in ver 2.0	
	i_returncode=fn_chk_spncloseout	(	c_ServiceName,
                               			&st_xchngbk,
                               			&st_err_msg
																	);

  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31070", "Broker Under Closeout", c_err_msg.arr); 
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  *******************************************/

	fn_init_ddr_pop ( st_xchngbk.c_pipe_id,TRADING_SECTION,F_CS);

	c_trdng_psswrd_flg = YES;

  i_err[0] = Fget32( ptr_fml_Ibuf, FFO_TRD_PSSWD, 0,(char *)c_usr_trd_psswrd.arr,0);
  i_ferr [0] = Ferror32;

  if (( i_err[0] == -1 ) && ( Ferror32 != FNOTPRES ))
  {
     fn_errlog( c_ServiceName, "S31075", Fstrerror32(i_ferr[0]),c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/	 /*** Datatype is converted to Varchar in Ver 7.5 ***/
		 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
     {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
     }
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/	 /*** Datatype is converted to Varchar in Ver 7.5 ***/
     Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
 		 Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
     Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
     tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
     tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	
	EXEC SQL
		SELECT	FOD_PRDCT_TYP
		INTO		:c_prdct_typ
		FROM		FOD_FO_ORDR_DTLS
		WHERE		FOD_ORDR_RFRNC	=	:st_xchngbk.c_ordr_rfrnc;

	if (SQLCODE	!=	0	)
	{
  	fn_errlog( c_ServiceName, "S31080", "Eror While Selecting Product Type", c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/	 /*** Datatype is converted to Varchar in Ver 7.5 ***/
 	  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
	  tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
    tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}


  /** Ver 2.4 Starts ***/

  if( c_prdct_typ == 'P' )
  {
    fn_errlog( c_ServiceName, "B23008",DEFMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/	 /*** Datatype is converted to Varchar in Ver 7.5 ***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/		 /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 ); 
 	  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
    tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
    tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Ver 2.4 Ends ***/


	/*** if( c_prdct_typ	==	'F'	)  ** commented in Ver 1.9 ***/
	if( c_prdct_typ ==  'F' || c_prdct_typ == SLTP_FUTUREPLUS || c_prdct_typ == OPTIONPLUS )   /*** Ver 1.9 ***/ /** 3.0**/ 	/***Ver 5.0 ***/
	{
  	/*** if ( st_xchngbk.c_slm_flg == MARKET )  
		{  *** commented in Ver 5.0 ***/
			strcpy ( st_i_ordbk.c_ordr_rfrnc,st_xchngbk.c_ordr_rfrnc);
    	st_i_ordbk.c_oprn_typ = FOR_VIEW;

			i_returncode = fn_spnref_to_ord ( &st_i_ordbk,
																				&st_o_ordbk,
		                                  	c_ServiceName,
    		                              	c_err_msg.arr
        		                        	);			 /*** Datatype is converted to Varchar in Ver 7.5 ***/

			if ( i_returncode != SUCC_BFR )
    	{
      	fn_errlog( c_ServiceName, "S31085",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
      	/*fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); Commented In VQC	***/
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
     		{
      		fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
     		}
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/				 /*** Datatype is converted to Varchar in Ver 7.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
 				Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
        tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
        tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

    	rtrim( st_i_ordbk.c_expry_dt );
    	st_cntrct.l_eba_cntrct_id = st_o_ordbk.l_eba_cntrct_id;
    	strcpy( st_cntrct.c_xchng_cd, st_o_ordbk.c_xchng_cd );
    	st_cntrct.c_prd_typ = st_o_ordbk.c_prd_typ;
    	strcpy( st_cntrct.c_undrlyng , st_o_ordbk.c_undrlyng  );
    	strcpy( st_cntrct.c_expry_dt,  st_o_ordbk.c_expry_dt );
    	st_cntrct.c_exrc_typ 			= st_o_ordbk.c_exrc_typ;
    	st_cntrct.c_opt_typ 			= st_o_ordbk.c_opt_typ;
    	st_cntrct.l_strike_prc 		=  st_o_ordbk.l_strike_prc;
    	st_cntrct.c_ctgry_indstk	= st_o_ordbk.c_ctgry_indstk;
    	st_cntrct.l_ca_lvl 				= st_o_ordbk.l_ca_lvl;

			if ( st_xchngbk.c_slm_flg == MARKET )		/*** Ver 5.0 if condition taken below ***/
			{
			i_returncode  = fn_get_qt ( c_ServiceName,
                                  &st_cntrct ,
                                  &st_cntrctqt ,
                                  c_err_msg.arr
                                );		 /*** Datatype is converted to Varchar in Ver 7.5 ***/

		 	if ( i_returncode != SUCC_BFR )
      {
        fn_errlog( c_ServiceName, "S31090",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/		 /*** Datatype is converted to Varchar in Ver 7.5 ***/
        /*fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); Commented In  VQC	***/
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
        {
          fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
        }
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/				 /*** Datatype is converted to Varchar in Ver 7.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
 	      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
  			tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
        tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

     	l_ord_lmt_rt = st_cntrctqt.l_lst_trdd_prc;
  	}
		else
		{
			l_ord_lmt_rt = st_xchngbk.l_ord_lmt_rt;
		}
	}
	else
	{
		strcpy ( st_i_ordbk.c_ordr_rfrnc,st_xchngbk.c_ordr_rfrnc);
  	fn_cpy_ddr ( st_i_ordbk.c_rout_crt );
  	st_i_ordbk.c_oprn_typ = FOR_VIEW;

	  i_returncode = fn_spnref_to_ord ( &st_i_ordbk,
                                    	&st_o_ordbk,
                                    	c_ServiceName,
                                    	c_err_msg.arr
                                   	);		 /*** Datatype is converted to Varchar in Ver 7.5 ***/


  	if ( i_returncode != SUCC_BFR )
  	{
    	fn_errlog( c_ServiceName, "S31095",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/		
    	/*fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); Commented In VQC	***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      }
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/				 /*** Datatype is converted to Varchar in Ver 7.5 ***/	
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
  		tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
      tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

    l_ord_lmt_rt = st_o_ordbk.l_strike_prc;
	}

  /*** Ver 8.5 starts ***/
  fn_userlog( c_ServiceName, "before st_xchngbk.c_ordr_flw:%c:",st_xchngbk.c_ordr_flw);
  if(st_xchngbk.c_ordr_flw  !='B' && st_xchngbk.c_ordr_flw  != 'S')
  {
    st_xchngbk.c_ordr_flw = st_o_ordbk.c_ordr_flw;
  }
  fn_userlog( c_ServiceName, "after st_xchngbk.c_ordr_flw:%c:",st_xchngbk.c_ordr_flw);
  /*** Ver 8.5 ends ***/

	  /*** Ver 6.0 Starts ****/   /** Ver 8.0 uncommented **/
	/** Ver 8.0 structure copy ***/
	MEMSET(st_cntrct_ins);
  st_cntrct_ins.l_eba_cntrct_id   = st_o_ordbk.l_eba_cntrct_id;
  strcpy( st_cntrct_ins.c_xchng_cd, st_o_ordbk.c_xchng_cd );
  st_cntrct_ins.c_prd_typ = st_o_ordbk.c_prd_typ;
  strcpy( st_cntrct_ins.c_undrlyng , st_o_ordbk.c_undrlyng  );
  strcpy( st_cntrct_ins.c_expry_dt,  st_o_ordbk.c_expry_dt );
  st_cntrct_ins.c_exrc_typ        = st_o_ordbk.c_exrc_typ;
  st_cntrct_ins.c_opt_typ         = st_o_ordbk.c_opt_typ;
  st_cntrct_ins.l_strike_prc      = st_o_ordbk.l_strike_prc;
  st_cntrct_ins.c_ctgry_indstk    = st_o_ordbk.c_ctgry_indstk;
  st_cntrct_ins.l_ca_lvl          = st_o_ordbk.l_ca_lvl;
	/** Ver 8.0 structure copy ends***/
	
	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName, " st_o_ordbk.c_undrlyng is :%s:", st_o_ordbk.c_undrlyng );
	}
 i_returncode = fn_chk_und_insider(c_ServiceName,
                                    st_usr_prfl1,
                                    /*st_o_ordbk.c_undrlyng, Ver 8.0 comment **/
                                    st_cntrct_ins,     /** Ver 8.0 **/
                                    &insider_exist);
  if (i_returncode == -1)
  {
      fn_errlog( c_ServiceName, "S31100", "Error in Function fn_chk_und_insider", c_err_msg.arr);
      if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      }
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
      tpfree((char *)ptr_fml_Sbuf);
      tpfree ((char *)ptr_fml_Rbuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if (insider_exist == 1)
  {
      fn_errlog( c_ServiceName, "B91164", DEFMSG, c_err_msg.arr );     /** Ver 8.0 B21042 changed to B91164 **/
      if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      }
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
      tpfree((char *)ptr_fml_Sbuf);
      tpfree ((char *)ptr_fml_Rbuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /**** Ver 6.0 ENDS  ****/ /** Ver 8.0 **/

	/*** Ver 3.8 Starts ***/

  /** if(DEBUG_MSG_LVL_0)  ** ver 5.7 **/
  if(DEBUG_MSG_LVL_3)    /** ver 5.7 **/
	{
    fn_userlog( c_ServiceName, "Calling function fn_op_vrfy_spnprc_band_mkt..." );
    fn_userlog( c_ServiceName, "st_o_ordbk.c_prd_typ   :%c:", st_o_ordbk.c_prd_typ );
		fn_userlog( c_ServiceName, "st_xchngbk.c_slm_flg   :%c:", st_xchngbk.c_slm_flg );
	}	


  /*** commented in Ver 9.0 if((st_o_ordbk.c_prd_typ == 'I') && (st_xchngbk.c_slm_flg != MARKET))***/
 /** commented in Ver 9.1 if((st_cntrct.c_prd_typ == 'I' || st_cntrct.c_prd_typ == 'O') && (st_xchngbk.c_slm_flg != MARKET)) Added in ver 9.0 **/	
  if((st_o_ordbk.c_prd_typ == 'I' || st_o_ordbk.c_prd_typ == 'O') && (st_xchngbk.c_slm_flg != MARKET)) /** Added in ver 9.1 **/ 
  {
    i_returncode =  fn_op_vrfy_spnprc_band_mkt ( c_ServiceName,
																								 st_xchngbk.l_ord_lmt_rt,
                                                 &st_o_ordbk,
                                                 &st_err_msg
                                               );

    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31105", LIBMSG, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/						
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      }
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
 			tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
      tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

  }

  /*** Ver 3.8 Ends   ***/


	i_returncode = fn_chk_spntrdng_limit	(	c_ServiceName,
                                    			st_xchngbk.l_ord_tot_qty,
                                    			l_ord_lmt_rt,
                                    			&c_trdng_psswrd_flg,
                                    			&st_usrprfl,
                                    			&st_err_msg 
																				);
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31110", LIBMSG, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/					 
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );	
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
 	  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
    tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
    tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if ( c_trdng_psswrd_flg == YES )
  {
    SETLEN( c_usr_trd_psswrd ) ;
    strcpy( c_temp_psswrd, (char *)c_usr_trd_psswrd.arr );
  }

	/*** Commented in Ver 1.6 ***
  i_returncode =  fn_check_spnuser(	c_ServiceName,
                                  	&st_usrprfl ,
                                  	c_temp_psswrd,
                                  	c_trdng_psswrd_flg,
                                  	&st_err_msg 
																	);
	*****************************/

	/*** Added in Ver 1.6 ***/
	/*  Ver 4.7 Starts  */

	/*** Commented in Ver 5.2 ***

	if(c_usr_flg != 'W' && (st_o_ordbk.c_prd_typ == SLTP_FUTUREPLUS))**|| st_o_ordbk.c_prd_typ == OPTIONPLUS)) ** ***Ver 5.0 ***

  *** Ver 5.2 Comment Ends***/

	if(c_usr_flg != 'W') /*** Change if Condition in Ver 5.2 as session was checked for only FP SLTP order, now it will checked for Future, Option, FP SLTP and OptionPLUS products  ***/
	{
		/*** Commented in Ver 5.6 ***
		i_returncode =  fn_check_spnuser_ip(	c_ServiceName,
												&st_usrprfl ,
												c_temp_psswrd,
												c_trdng_psswrd_flg,
												c_ip_address,
                        c_txn_flg,                    *** Ver 5.4 ***
												&st_err_msg 
											);
		*** Ver 5.6 ***/

		/*** Ver 5.6 starts ***/
    memcpy(&st_usrprfl_vw,&st_usrprfl,sizeof(st_usrprfl_vw));

      /*** Ver 5.8 Starts here ***/
    if( strcmp( st_usrprfl.c_user_id, "system") == 0 && c_sltp_trail_flag == 'Y' )
    {
			c_trdng_psswrd_flg='N';
		}
      /*** Ver 5.8 Ends Here ***/
    i_returncode =  fn_check_user_ip( c_ServiceName,
                                      &st_usrprfl_vw ,
                                      c_temp_psswrd,
                                      c_trdng_psswrd_flg,
                                      c_ip_address,
                                      c_txn_flg,
                                      &st_err_msg_vw
                                    );
    /*** Ver 5.6 ends ***/
		/*************************/

	  if ( i_returncode == -1 )
	  {
		 fn_errlog( c_ServiceName, "S31115", LIBMSG, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
     {
     	 fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
   	 }	
		 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg_vw.c_err_msg, 0 ); /*** Ver 5.6 changed st_err_msg to st_err_msg_vw ***/
		 /**Ver 2.4 starts**/
		  if(c_trdng_psswrd_flg == 'Y')
		  {
			i_actn_id = 1;
		  }
		  else
		  {
			i_actn_id = -1;
		  }

		  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
		  /**Ver 2.4 ends**/
			 Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
		 Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
		 Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   
		 Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
 
		 tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
		 tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
			 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	  }
	}
	/*  Ver 4.7 Ends  */
  /*** Ver 5.8 Starts ******/
  if( strcmp( st_usrprfl.c_user_id, "system") == 0 && c_sltp_trail_flag == 'Y' )
  {
    MEMSET(c_ip_address);
    strcpy(c_ip_address,"T");
  }
  /*** Ver 5.8 Ends *****/
	strcpy(st_xchngbk.c_ip_address, c_ip_address);		/*** Ver 1.6 ***/

	if(DEBUG_MSG_LVL_3)	/*** Ver 1.6 ***/
	{
		fn_userlog(c_ServiceName,"ip address:%s:",c_ip_address);
	}
   
	EXEC SQL
    SELECT  /*TO_CHAR( EXG_NXT_TRD_DT, 'DD-Mon-YYYY' ), Commented in Ver 1.7 **/
            TO_CHAR( GREATEST(EXG_NXT_TRD_DT,EXG_TMP_TRD_DT), 'DD-Mon-YYYY' ), /*** Ver 1.7 ***/
            TO_CHAR( SYSDATE, 'DD-Mon-YYYY hh24:mi:ss' )
    INTO    :c_trd_dt,
            :c_sysdate
    FROM    EXG_XCHNG_MSTR
    WHERE   EXG_XCHNG_CD = :st_xchngbk.c_xchng_cd
   /** AND     EXG_MKT_TYP  = 'D'; **commented in ver 6.3***/
    AND     EXG_MKT_TYP  = :c_mkt_typ; /**added in ver 6.3**/

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31120",SQLMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }	
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/					 /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
 		tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
    tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  SETNULL ( c_trd_dt );
  SETNULL ( c_sysdate );
  strcpy( st_xchngbk.c_mod_trd_dt, (char *) c_trd_dt.arr);

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
  if ( i_trnsctn == -1 )
  {
    fn_errlog( c_ServiceName, "S31125",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/				 /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
 		tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
    tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  strcpy ( st_i_ordbk.c_ordr_rfrnc,st_xchngbk.c_ordr_rfrnc);

  st_i_ordbk.c_oprn_typ = FOR_UPDATE;

 	i_returncode = fn_spnref_to_ord  ( &st_i_ordbk,
                                  &st_o_ordbk,
                                  c_ServiceName,
                                  c_err_msg.arr
                                );							 /*** Datatype is converted to Varchar in Ver 7.5 ***/

  if ( i_returncode != SUCC_BFR )
  {
    fn_errlog( c_ServiceName, "S31130",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/	
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/				 /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
 		tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
    tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

/*** Ver 6.7 Starts ***/
 
 if( st_o_ordbk.c_prd_typ != 'U' && st_o_ordbk.c_prd_typ != 'I' )
 {
  MEMSET(st_contrct);
      strcpy( st_contrct.c_xchng_cd, st_o_ordbk.c_xchng_cd );
      strcpy( st_contrct.c_undrlyng, st_o_ordbk.c_undrlyng );
      strcpy( st_contrct.c_expry_dt, st_o_ordbk.c_expry_dt );
      st_contrct.c_prd_typ        = st_o_ordbk.c_prd_typ;
      st_contrct.c_exrc_typ      = st_o_ordbk.c_exrc_typ;
      st_contrct.c_opt_typ       = st_o_ordbk.c_opt_typ;
      st_contrct.l_strike_prc    = st_o_ordbk.l_strike_prc;
      st_contrct.c_ctgry_indstk  = st_o_ordbk.c_ctgry_indstk;
      st_contrct.l_ca_lvl        = st_o_ordbk.l_ca_lvl;

  i_returncode = fn_disallow_frsh_expsre(c_ServiceName,
                                         st_usrprfl.c_cln_mtch_accnt,
                                         c_spn_flg,
                                         st_xchngbk.c_ordr_flw,
                                         st_xchngbk.l_ord_tot_qty,
					                               st_o_ordbk.l_ord_tot_qty,
                                         &st_contrct,
                                         &st_err_msg_vw );

  if(i_returncode == -1 || i_returncode == -2)
  {
      fn_errlog( c_ServiceName, "S31135", "Error in Function fn_disallow_frsh_expsre", c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/	 
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg_vw.c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/	
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_Rbuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
}
/*** Ver 6.7 Ends ***/

  /***** Ver 6.4 Starts *****/
  /*** For RWS order if the input flag and fod flag doesn't match then return ***/
  /*** This check is added to restrict calls from other frontends ***/
  
	if(DEBUG_MSG_LVL_0)						 /* Ver 7.5 */	
		{
			fn_userlog(c_ServiceName, "INPUT SPL FLAG :%c: ORDER BOOK FLAG :%c:",st_xchngbk.c_spl_flg,st_o_ordbk.c_spl_flg);
		}

  if( st_xchngbk.c_spl_flg != ROLLOVER_WITH_SPREAD && st_o_ordbk.c_spl_flg == ROLLOVER_WITH_SPREAD )
  {
        fn_errlog( c_ServiceName, "S31140", FMLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
        MEMSET(c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
        strcpy(c_err_msg.arr,"This is Spread Rollover Order, pls visit new site for mod/can");		 /*** Datatype is converted to Varchar in Ver 7.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr , 0 );  /*** Datatype is converted to Varchar in Ver 7.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amount, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /*** Ver 6.4 Ends ***/

  if ( st_xchngbk.c_spl_flg == ROLLOVER_WITH_SPREAD )
  {
    i_err[0] = Fget32(ptr_fml_Ibuf,FFO_EXECN_DT,0,(char *)c_expry_dt2,0);
    if ( i_err[0] == -1 )
    {
        fn_errlog( c_ServiceName, "S31145", FMLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr , 0 );  /*** Datatype is converted to Varchar in Ver 7.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amount, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    /***** if ( strcmp(st_o_ordbk.c_expry_dt,c_expry_dt2) != 0 )
    {
        i_rollover_ord_ind = 1;  ****The i_rollover_ord_ind variable is set to 1 when it is the 2nd Order of Rollover with Spread and it is used to skip the band check in fn_check_inp_spn ****
    } *******/

    fn_timearr_to_long(st_o_ordbk.c_expry_dt,&l_sprd_expry_dt1);
    fn_timearr_to_long(c_expry_dt2,&l_sprd_expry_dt2);

    if( l_sprd_expry_dt1 - l_sprd_expry_dt2 < 0 )
    {
       /** first order **/
       i_rollover_ord_ind = 1;
       strcpy( c_sprd_expiry_date1,st_o_ordbk.c_expry_dt);
       strcpy( c_sprd_expiry_date2,c_expry_dt2);
    }
    else if ( l_sprd_expry_dt1 - l_sprd_expry_dt2 > 0 )
    {
       /** second order ***/
       i_rollover_ord_ind = 2;
       strcpy( c_sprd_expiry_date1,c_expry_dt2);
       strcpy( c_sprd_expiry_date2,st_o_ordbk.c_expry_dt);
    }
    else
    {
        fn_errlog( c_ServiceName, "S31150", FMLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr , 0 );	 /*** Datatype is converted to Varchar in Ver 7.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amount, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  /***** Ver 6.4 Ends *****/
  /*** Ver 6.1 Comment Starts ***

  *** Ver 4.6 Starts Here *****
   MEMSET(c_source);
   i_err[0]  = Fget32(ptr_fml_Ibuf,FML_EVENT,0,(char *)c_source,0);
   i_ferr [0] = Ferror32;

   if ( i_err[0] == -1 )
   {
     if (Ferror32 != FNOTPRES)
     {
       fn_errlog( c_ServiceName, "S31155",LIBMSG,c_err_msg.arr);
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); 
			 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     ** Ver 5.8 **
     	 {
       	 fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       ** Ver 5.8 **
     	 }	
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  *** Ver 2.4 ***
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    *** Ver 4.5 ***
       Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  *** Ver 4.5 ***
       tpfree((char *)ptr_fml_Sbuf);       ***  Ver 4.2 ***
       tpfree ((char *)ptr_fml_Rbuf);      ***  Ver 4.2 ***
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
     if ( Ferror32 == FNOTPRES )
     {
       if( st_o_ordbk.c_ord_typ == 'V' )
       {
          fn_errlog( c_ServiceName, "S31160",LIBMSG,c_err_msg.arr); 
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); 
					if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     ** Ver 5.8 **
       	  {
        	  fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       ** Ver 5.8 **
       		}
          MEMSET(c_err_msg.arr); 
          strcpy(c_err_msg.arr,"To modify order to VTC, please visit on website as this feature is not available on the application");
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  *** Ver 2.4 ***
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    *** Ver 4.5 ***
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  *** Ver 4.5 ***
          tpfree((char *)ptr_fml_Sbuf);       ***  Ver 4.2 ***
          tpfree ((char *)ptr_fml_Rbuf);      ***  Ver 4.2 ***
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }
     }
  }
  *** Ver 4.6 Ends here ******

  *** Ver 6.1 Comment Ends ***/

  /*** Ver 5.3 Starts ***/

  rtrim(st_o_ordbk.c_cln_mtch_accnt);
  rtrim(st_usrprfl.c_cln_mtch_accnt);
	
  /** if(DEBUG_MSG_LVL_0)  ** ver 5.7 **/
  if(DEBUG_MSG_LVL_3)    /** ver 5.7 **/
  {
  	fn_userlog( c_ServiceName, "Match Account st_o_ordbk.c_cln_mtch_accnt :%s:", st_o_ordbk.c_cln_mtch_accnt);
  	fn_userlog( c_ServiceName, "Match Account st_usrprfl.c_cln_mtch_accnt :%s:", st_usrprfl.c_cln_mtch_accnt);
	}

  if( strcmp(st_o_ordbk.c_cln_mtch_accnt,st_usrprfl.c_cln_mtch_accnt) != 0 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    fn_userlog(c_ServiceName,"Invalid Combination of Order Reference and Match Account.");
    fn_errlog(c_ServiceName, "S31165", "Invalid Combination of Order Reference and Match Account.", c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    strcpy(c_err_msg.arr,"Invalid Combination of Order Reference and Match Account.");	/*** Datatype is converted to Var char in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/ /*** Datatype is converted to Var char in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
		tpfree((char *)ptr_fml_Sbuf);      /***  VQC ***/
		tpfree((char *)ptr_fml_Rbuf);      /***  VQC ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Ver 5.3 Ends ***/


  /*** if (st_o_ordbk.c_prd_typ == SLTP_FUTUREPLUS) *** Ver 3.2 *** Commented In Ver 3.5 ***/
  if (st_o_ordbk.c_prd_typ == SLTP_FUTUREPLUS || st_o_ordbk.c_prd_typ == OPTIONPLUS ) /*** Ver 3.5 ***/
  {
		/*l_temp_stp_lss_tgr = st_xchngbk.l_stp_lss_tgr ;	Commented In VQC	***/
    if ( st_xchngbk.l_ord_tot_qty != st_o_ordbk.l_ord_tot_qty )
    {
      /*** fn_userlog( c_ServiceName, "User is not allowed to modify FP SLTP order qty : Input Total ordered qty :%ld: and OrderBook qty :%ld: ",st_xchngbk.l_ord_tot_qty,st_o_ordbk.l_ord_tot_qty); Commented In Ver 3.5 ***/
 		if ( st_o_ordbk.c_prd_typ == SLTP_FUTUREPLUS ) /*** Ver 3.5 ***/
		{     
			fn_userlog( c_ServiceName, "User is not allowed to modify FP SLTP order qty : Input Total ordered qty :%ld: and OrderBook qty :%ld: ",st_xchngbk.l_ord_tot_qty,st_o_ordbk.l_ord_tot_qty);
		}
		else if (st_o_ordbk.c_prd_typ == OPTIONPLUS)
		{
			fn_userlog( c_ServiceName, "User is not allowed to modify OptionPlus order qty : Input Total ordered qty :%ld: and OrderBook qty :%ld: ",st_xchngbk.l_ord_tot_qty,st_o_ordbk.l_ord_tot_qty);
		}
      fn_errlog( c_ServiceName, "B22008",DEFMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      }
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
 			tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
      tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

  rtrim( st_o_ordbk.c_expry_dt );
	strcpy(st_o_ordbk.c_ordr_rfrnc,st_i_ordbk.c_ordr_rfrnc);
  st_cntrct.l_eba_cntrct_id 	= st_o_ordbk.l_eba_cntrct_id;
  strcpy( st_cntrct.c_xchng_cd, st_o_ordbk.c_xchng_cd );
  st_cntrct.c_prd_typ = st_o_ordbk.c_prd_typ;
  strcpy( st_cntrct.c_undrlyng , st_o_ordbk.c_undrlyng  );
  strcpy( st_cntrct.c_expry_dt,  st_o_ordbk.c_expry_dt );
  st_cntrct.c_exrc_typ 				= st_o_ordbk.c_exrc_typ;
  st_cntrct.c_opt_typ 				= st_o_ordbk.c_opt_typ;
  st_cntrct.l_strike_prc 			= st_o_ordbk.l_strike_prc;
  st_cntrct.c_ctgry_indstk 		= st_o_ordbk.c_ctgry_indstk;
  st_cntrct.l_ca_lvl 					= st_o_ordbk.l_ca_lvl;

	/********** Added  in ver 2.0 ************************/

  /** if(DEBUG_MSG_LVL_0)  ** ver 5.7 **/
  if(DEBUG_MSG_LVL_3)    /** ver 5.7 **/
  {
    fn_userlog(c_ServiceName,"The underlying is :%s:", st_o_ordbk.c_undrlyng);
  }
	

  i_returncode=fn_chk_spncloseout ( c_ServiceName,
                                    st_usrprfl.c_cln_mtch_accnt,
                                    c_request_typ,
                                    st_cntrct,
                                    &st_xchngbk,
                                    &st_err_msg
                                  );

  if( i_returncode == -1 )
  {
    /*fn_errlog( c_ServiceName, "S31170", "Broker Under Closeout", c_err_msg.arr); */
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
		tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
    tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /********** End of ver 2.0 ***************************/

  /******** Ver 4.6 Starts Here ****/

  if(DEBUG_MSG_LVL_3)    /** ver 5.7 **/
  {
  	fn_userlog(c_ServiceName,"st_cntrct.c_prd_typ :%c:",st_cntrct.c_prd_typ);
  	fn_userlog(c_ServiceName,"st_xchngbook.c_ord_typ  :%c:",st_xchngbk.c_ord_typ);
  	fn_userlog(c_ServiceName,"st_xchngbook.c_req_typ:%c:",st_xchngbk.c_req_typ);
	}
  l_vtcopnpstn_qty=0;
  l_vtccvr_qty=0;
	

  if( st_cntrct.c_prd_typ == 'F' && st_xchngbk.c_ord_typ == VTC_ORDER )
  {
   i_returncode=fn_chk_spnvtcord(c_ServiceName,
                                &st_xchngbk,
                                &st_cntrct,
                                &st_err_msg );
   if ( i_returncode == -1 )
   {
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/			/***	VQC	***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
		tpfree((char *)ptr_fml_Sbuf);      /***  VQC ***/
		tpfree((char *)ptr_fml_Rbuf);      /***  VQC ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

   strcpy ( ( char * )c_expiry_dt.arr, st_cntrct.c_expry_dt );
   SETLEN ( c_expiry_dt );
  
   EXEC SQL
      SELECT  FCP_OPNPSTN_QTY,
              DECODE(FCP_OPNPSTN_FLW,'S',GREATEST(ABS(FCP_IBUY_QTY),ABS(FCP_EXBUY_QTY)),'B',
                     GREATEST( ABS(FCP_ISELL_QTY), ABS(FCP_EXSELL_QTY)),0)
        INTO  :l_vtcopnpstn_qty,
              :l_vtccvr_qty
        FROM  FCP_FO_SPN_CNTRCT_PSTN
        WHERE FCP_CLM_MTCH_ACCNT  = :st_usrprfl.c_cln_mtch_accnt
        AND   FCP_UNDRLYNG        = :st_cntrct.c_undrlyng
        AND   FCP_EXPRY_DT        = :c_expiry_dt
        AND   FCP_PRDCT_TYP       = :st_cntrct.c_prd_typ
        AND   FCP_XCHNG_CD        = :st_cntrct.c_xchng_cd
        AND   FCP_STRK_PRC        = :st_cntrct.l_strike_prc
        AND   FCP_EXER_TYP        = :st_cntrct.c_exrc_typ
        AND   FCP_OPT_TYP         = :st_cntrct.c_opt_typ;
   if(SQLCODE != 0 )
   {
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/			/***	VQC	***/
     fn_errlog( c_ServiceName, "S31175", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
		 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
     {
       fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
     }	
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
     Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
		 tpfree((char *)ptr_fml_Sbuf);      /***  VQC ***/
		 tpfree((char *)ptr_fml_Rbuf);      /***  VQC ***/
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

   if ( st_xchngbk.c_ordr_flw == 'B' )
   {
     l_vtcopn_qty = l_vtcopnpstn_qty * (-1);
   }
   else
   {
     l_vtcopn_qty = l_vtcopnpstn_qty ;
   }
   /** ver 6.4  starts ***/
       l_rws_qty = 0;

 EXEC SQL
 SELECT NVL(SUM(NVL(FOD_ORDR_TOT_QTY,0)-NVL(FOD_EXEC_QTY,0)-NVL(FOD_CNCL_QTY,0)-NVL(FOD_EXPRD_QTY,0)),0)
 INTO :l_rws_qty
 FROM FOD_FO_ORDR_DTLS
 WHERE FOD_PRDCT_TYP  = :st_cntrct.c_prd_typ
   AND FOD_EXPRY_DT   = :c_expiry_dt
   AND FOD_XCHNG_CD   = :st_cntrct.c_xchng_cd
   AND FOD_CLM_MTCH_ACCNT = :st_usrprfl.c_cln_mtch_accnt
   AND FOD_SPL_FLAG = 'O'
   AND FOD_UNDRLYNG        = :st_cntrct.c_undrlyng
   AND FOD_ORDR_STTS IN ('R','P','Q','O');

    if(SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
    {
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/     
     fn_errlog( c_ServiceName, "S31180", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
     if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     
     {
       fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                     
     }
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/  /*** Datatype is converted to Varchar in Ver 7.5 ***/
     Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
     tpfree((char *)ptr_fml_Sbuf);      
     tpfree((char *)ptr_fml_Rbuf);     
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
  l_vtccvr_qty = l_vtccvr_qty+l_rws_qty;
 /*** ver 6.4 ends ***/

 /****DEBUG LVL Added in VQC****/
 if(DEBUG_MSG_LVL_3)
  {
   fn_userlog(c_ServiceName,"st_o_ordbk.l_ord_tot_qty :%ld:", st_o_ordbk.l_ord_tot_qty );
   fn_userlog(c_ServiceName,"l_vtccvr_qty    :%ld:", l_vtccvr_qty);
   fn_userlog(c_ServiceName,"l_vtcopn_qty    :%ld:", l_vtcopn_qty);
   fn_userlog(c_ServiceName,"l_rws_qty  :%ld:",l_rws_qty);
  }

   l_modified_qty =0;
   l_modified_qty = st_o_ordbk.l_ord_tot_qty - st_xchngbk.l_ord_tot_qty ;

   if( l_modified_qty < 0 )
   {
    l_modified_qty = l_modified_qty * -1;
  
  /****DEBUG LVL Added in VQC****/
 if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"l_modified_qty :%ld:",l_modified_qty);
  }

    if( l_vtcopn_qty < ( (  l_modified_qty  + l_vtccvr_qty) ) )
    {
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
     {
       fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
     }
     fn_errlog( c_ServiceName, "S31185", "VTC Square Off Qty Can Not Be Greater Than Available Qty", c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,"VTC Square Off Qty Can Not Be Greater Than Available Qty" , 0 );
     Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
		 tpfree((char *)ptr_fml_Sbuf);      /***  VQC ***/
		 tpfree((char *)ptr_fml_Rbuf);      /***  VQC ***/
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
   }
  }

  /******** Ver 4.6 Ends Here ******/


  /*** if ( st_cntrct.c_prd_typ != 'U')            *** Ver 3.0  skip check in case of SLTP F+ Commnted In Ver 3.5  ***/
  if ( st_cntrct.c_prd_typ != 'U' && st_cntrct.c_prd_typ != 'I' && st_o_ordbk.c_spl_flg != ROLLOVER_WITH_SPREAD ) /* Ver 3.5  skip check in case of SLTP F+ & OptionPLUS */ /** ver 6.4 special flg change ***/
  {
			/***** Ver 5.8 Starts ****/
		if( c_sltp_trail_flag == 'Y' )
		{
        c_trail_usr_flg='M';
				i_returncode=fn_chk_trail_spncntrct (  c_ServiceName,
																							 &st_cntrct,
                                               c_trail_usr_flg,
																							 &c_fum_mrkt_typ,    
																							 &c_fcm_mrkt_typ,   
																							 &st_err_msg
 																						);
		}
		else  /****** Ver 5.8 Ends ***********/
		{
				i_returncode = fn_chk_spncntrct	( c_ServiceName,
   	                            					&st_cntrct,
     	                          					&c_fum_mrkt_typ,   
       	                        					&c_fcm_mrkt_typ,  
         	                      					&st_err_msg 
																				);
	
		}
   /*** if ( i_returncode != SUCC_BFR ) Commented In Ver 3.0 ***/
   if ( i_returncode == -1 ) /*** Ver 3.0 ***/
 	 {
   	 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
     {
       fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
     }	
   	 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
     Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
     Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
     Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
 		 tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
     tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
   	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	 }

   if ( i_returncode == -2 )   /*** Ver 3.0  ***/
   {

    l_tmp_ord_tot_qty = st_o_ordbk.l_ord_tot_qty ;
    st_o_ordbk.l_ord_tot_qty =  st_xchngbk.l_ord_tot_qty - st_o_ordbk.l_ord_tot_qty ; /** Getting the deficit ***/

	/****DEBUG LVL Added in VQC****/
 if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName," Scrip under BAN period ");
    fn_userlog( c_ServiceName," -- st_o_ordbk.l_ord_tot_qty Is :%ld:" ,st_o_ordbk.l_ord_tot_qty);
  }

    c_fresh_ord_flg = '\0';

    i_returncode = fn_spnchk_frsh_cover_ord ( c_ServiceName,
                                              &st_o_ordbk,
                                              &c_fresh_ord_flg,
                                              &st_err_msg
                                            );

    if ( i_returncode == -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      }
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );    /**Ver 2.7**/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
		  tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
      tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

   /****DEBUG LVL Added in VQC****/
 if(DEBUG_MSG_LVL_3)
  {
     fn_userlog( c_ServiceName,"--- c_fresh_ord_flg Is :%c:" ,c_fresh_ord_flg);
  }

    if ( c_fresh_ord_flg == 'Y')
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      {
        fn_upd_trail_ord(st_xchngbk.c_ordr_rfrnc);  
      }
			else if(c_sltp_trail_flag == 'Y')
			{
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
			}
			else
			{
				if(c_sltp_trail_flag == 'N' && st_o_ordbk.c_prcimpv_flg == 'Y')
				{
          fn_errlog( c_ServiceName, "S31190", "Currently this Underlying has been disabled and you cannot modify the order. Youmay please cancel your order.", c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
          strcpy(c_err_msg.arr,"Currently this Underlying has been disabled and you cannot modify the order. You may please cancel your order.");	/*** Datatype is converted to Varchar in Ver 7.5 ***/
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/ /*** Datatype is converted to Varchar in Ver 7.5 ***/
				}
				else
				{
      		fn_errlog( c_ServiceName, "B29030", DEFMSG, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/		/*** Datatype is converted to Varchar in Ver 7.5 ***/
				}
			}
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
			tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
      tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

    }
    else if (c_fresh_ord_flg == 'N' )
    {
      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog( c_ServiceName," This is not fresh order ...allow order modification" );
      }
    }

    st_o_ordbk.l_ord_tot_qty = l_tmp_ord_tot_qty ;

   }

  }

	/*** Commented in Ver 6.6 ***

	i_returncode  = fn_get_qt ( c_ServiceName,
                              &st_cntrct ,
                              &st_cntrctqt ,
                              c_err_msg
                            );

	*** Ver 6.6 Comment Ends ***/

  if( st_o_ordbk.c_spl_flg == ROLLOVER_WITH_SPREAD )    /** Added in ver 6.4 **/
  {
     i_returncode = fn_get_quote_rws(c_ServiceName,
                              &st_cntrct,
                              &st_cntrctqt,
                              &c_setlmnt_flg,
                              &c_dlvry_pos_allwd,
                              c_sprd_expiry_date1,
                              c_sprd_expiry_date2,
                              c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
  }
	/*** Ver 6.6 Starts ***/
  else /** else added in ver 6.4 ***/
  {
	i_returncode	= fn_get_quote( c_ServiceName,
																&st_cntrct ,
                              	&st_cntrctqt ,
																&c_setlmnt_flg ,
																&c_dlvry_pos_allwd ,
																&c_buy_allwd,   /*** ver 8.2 ***/
                                &c_sell_allwd,  /*** ver 8.2 ***/
                                &c_mrkt_ordr_flg, /*** ver 8.4  ***/
																c_err_msg.arr
															); /*** Datatype is converted to Varchar in Ver 7.5 ***/

	/*** Ver 6.6 Ends ***/
  }

	if ( i_returncode != SUCC_BFR )
  {
    fn_errlog( c_ServiceName, "S31195",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/ /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
	  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
    tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
    tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

   /***** ver 8.4 starts **************/
   if( DEBUG_MSG_LVL_3 )
   {
    fn_userlog( c_ServiceName, "c_mrkt_ordr_flg :%c:, c_user_id :%s:, c_slm_flg :%c: ",c_mrkt_ordr_flg, st_usrprfl.c_user_id, st_xchngbk.c_slm_flg);
   }
    if( st_cntrct.c_prd_typ == 'O' )
    {
    if( c_mrkt_ordr_flg == 'N' && ( strcmp(st_usrprfl.c_user_id,"system") != 0) && (st_xchngbk.c_slm_flg == MARKET))
    {
    fn_errlog( c_ServiceName, "B20090", "", c_err_msg.arr  );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); 
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 ); 
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);  
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
    tpfree((char *)ptr_fml_Sbuf);  
    tpfree ((char *)ptr_fml_Rbuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    }
 /****** ver 8.4 ends ****************/ 

	/*** Commented in Ver 6.9 ***
	*** Ver 6.6 Starts ***

	if (st_cntrct.c_prd_typ != 'P' && st_cntrct.c_prd_typ != 'U' && st_cntrct.c_prd_typ != 'I' )
	{
		if ( c_dlvry_pos_allwd == 'N' )
		{
			fn_userlog( c_ServiceName,"Currently trading is not allowed in this contract.");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); 
			strcpy(c_err_msg.arr,"Currently trading is not allowed in this contract.");
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
			Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
			Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
			tpfree((char *)ptr_fml_Sbuf);
			tpfree ((char *)ptr_fml_Rbuf);
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
	*** Ver 6.6 Ends ***	*** Ver 6.9 ***/

	/*** Ver 6.9 Starts ***/
	/** COMMENTED IN VER 8.2 if ( c_dlvry_pos_allwd == 'N' ) **/
	if ( (c_dlvry_pos_allwd == 'N' && st_cntrct.c_prd_typ == 'F') || ( st_cntrct.c_prd_typ == 'O' && c_dlvry_pos_allwd == 'N' && st_xchngbk.c_ordr_flw == 'B' &&c_buy_allwd == 'N') || ( st_cntrct.c_prd_typ == 'O' && c_dlvry_pos_allwd == 'N' && st_xchngbk.c_ordr_flw == 'S' && c_sell_allwd == 'N') )  /*** Added in Ver 8.2 ***/
  {
    i_phy_sqroff_check = 1;
  }
	/*** Ver 6.9 Ends ***/

	/*** if ( c_prdct_typ	==	'F'	)  *** Commented in Ver 1.9 ***/
	if ( c_prdct_typ  ==  'F' || c_prdct_typ == SLTP_FUTUREPLUS || c_prdct_typ == OPTIONPLUS )  /*** Ver 1.9 ***/ /** 3.0**/	/*** Ver 5.0 ***/
	{
		if ( st_xchngbk.c_slm_flg == MARKET )
  	{
			st_xchngbk.l_quote = st_cntrctqt.l_lst_trdd_prc;
			/*** Ver 6.9 Starts ***/
			if ( st_xchngbk.l_quote == 0 && i_phy_sqroff_check == 1 )
			{
			EXEC SQL
				SELECT	NVL(FTQ_BST1_BID_PRC,0),
             		NVL(FTQ_BST1_OFFR_PRC,0),
             		NVL(FTQ_CLS_PRC,0)
					INTO	:l_best_bid_price,
            		:l_best_offer_price,
            		:l_previous_close_price
					FROM  FTQ_FO_TRD_QT
					WHERE FTQ_XCHNG_CD  =:st_cntrct.c_xchng_cd
      		AND   FTQ_PRDCT_TYP = DECODE(:st_cntrct.c_prd_typ,'P','F','U','F','I','O',:st_cntrct.c_prd_typ)
      		AND   FTQ_UNDRLYNG  =:st_cntrct.c_undrlyng
      		AND   FTQ_OPT_TYP   =:st_cntrct.c_opt_typ
      		AND   FTQ_STRK_PRC  =:st_cntrct.l_strike_prc
      		AND   FTQ_EXPRY_DT  =:st_cntrct.c_expry_dt ;

				if(SQLCODE != 0 )
    		{
					fn_errlog( c_ServiceName, "S31200", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
          if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )
          {
            fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);
          }
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
          tpfree((char *)ptr_fml_Sbuf);
          tpfree ((char *)ptr_fml_Rbuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				i_returncode = fn_get_quote_zero(c_ServiceName,st_xchngbk.c_ordr_flw,l_best_bid_price,l_best_offer_price,l_previous_close_price,&l_quote_zero);

      if( i_returncode != 1 )
      {
        fn_userlog( c_ServiceName,"function fn_get_quote_zero failure");
        strcpy( c_err_msg.arr,"System Error.Contact Customer Support"); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )
    		{
      		fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);
    		}
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
    		Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
    		Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
    		tpfree((char *)ptr_fml_Sbuf);
    		tpfree ((char *)ptr_fml_Rbuf);
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
			st_xchngbk.l_quote = l_quote_zero;
			if(DEBUG_MSG_LVL_5)
      {
        fn_userlog( c_ServiceName,"After fn_get_quote_zero st_xchngbk.l_quote is :%ld:",st_xchngbk.l_quote);
      }
			}
			/*** Ver 6.9 Ends ***/
    	strcpy ( st_xchngbk.c_qt_tm,st_cntrctqt.c_lst_trdd_time );
  	}
	}
	else
	{
		/*** if ( c_prdct_typ	==	'O'	&&	st_xchngbk.c_slm_flg == MARKET	)  Commented In Ver 3.5 ***/
		if (( c_prdct_typ	==	'O' || c_prdct_typ == 'I')	&&	st_xchngbk.c_slm_flg == MARKET	) /*** Ver 3.5 ***/
		{
			if ( st_xchngbk.c_ordr_flw == SELL	)
			{

   /****** Ver 3.3  Start ******/
  /****Ver 6.3 Hard Parse Changes****/
          EXEC SQL
          SELECT NVL(FTQ_BST1_BID_QTY,0),
                 NVL(FTQ_BST2_BID_QTY,0),
                 NVL(FTQ_BST3_BID_QTY,0),
                 NVL(FTQ_BST4_BID_QTY,0),
                 NVL(FTQ_BST5_BID_QTY,0),
								 NVL(FTQ_BST1_BID_PRC,0),   /*** Ver 6.9 ***/
             		 NVL(FTQ_BST1_OFFR_PRC,0),  /*** Ver 6.9 ***/
             		 NVL(FTQ_CLS_PRC,0)    			/*** Ver 6.9 ***/
          INTO   :st_cntrctlongqt.l_bst_bid_qty[0],
                 :st_cntrctlongqt.l_bst_bid_qty[1],
                 :st_cntrctlongqt.l_bst_bid_qty[2],
                 :st_cntrctlongqt.l_bst_bid_qty[3],
                 :st_cntrctlongqt.l_bst_bid_qty[4],
								 :l_best_bid_price,         /*** Ver 6.9 ***/
             		 :l_best_offer_price,       /*** Ver 6.9 ***/
             		 :l_previous_close_price    /*** Ver 6.9 ***/
           FROM   FTQ_FO_TRD_QT
           WHERE  FTQ_XCHNG_CD  = :st_cntrct.c_xchng_cd
           AND   FTQ_PRDCT_TYP = DECODE(:st_cntrct.c_prd_typ,'I','O',:st_cntrct.c_prd_typ) /*** decode added in Ver 3.5 ***/
           AND   FTQ_UNDRLYNG  = :st_cntrct.c_undrlyng
           AND   FTQ_EXPRY_DT  = TO_DATE ( :st_cntrct.c_expry_dt,'dd-Mon-yyyy' )
           AND   FTQ_EXER_TYP  = :st_cntrct.c_exrc_typ
           AND   FTQ_OPT_TYP   = :st_cntrct.c_opt_typ
           AND   FTQ_STRK_PRC  = :st_cntrct.l_strike_prc;

          if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
          {
					  if(c_prdct_typ != 'I')     /*** Check Added in Ver 3.7 ***/
						{
							fn_errlog( c_ServiceName, "S31205", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
						  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    				  {
      					fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    					}
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
              Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
              Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
 							tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
        			tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
          }
          else if (SQLCODE == NO_DATA_FOUND)
          {
					  if(c_prdct_typ != 'I')								/*** Check Added in Ver 3.7 ***/
						{
							fn_errlog ( c_ServiceName, "B28510", DEFMSG, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
						  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
              {
                fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
              }
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/  /*** Datatype is converted to Varchar in Ver 7.5 ***/
    					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
 				      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
              Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
        			tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
        			tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
							tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
						}
          }

        li_max_sell_ordqty = (st_cntrctlongqt.l_bst_bid_qty[0] + st_cntrctlongqt.l_bst_bid_qty[1] + st_cntrctlongqt.l_bst_bid_qty[2] + st_cntrctlongqt.l_bst_bid_qty[3] + st_cntrctlongqt.l_bst_bid_qty[4]) ;

				if(DEBUG_MSG_LVL_2)   /*** Ver 5.7 ***/
				{
        	fn_userlog(c_ServiceName,"st_xchngbk.l_ord_tot_qty is :%ld:",st_xchngbk.l_ord_tot_qty);
        	fn_userlog(c_ServiceName,"Total best 5 bid qty is :%ld:",li_max_sell_ordqty);
				}
/***          if (st_xchngbk.l_ord_tot_qty>li_max_sell_ordqty)	*** Commented in Ver 6.9 ***/
						if (st_xchngbk.l_ord_tot_qty>li_max_sell_ordqty && i_phy_sqroff_check !=1)	/*** Modified in Ver 6.9 ***/
            {
							if(c_prdct_typ != 'I')							/*** Check Added in Ver 3.7 ***/
							{
                fn_errlog( c_ServiceName, "B91116", DEFMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
							  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
              	{
                	fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
              	}
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    						Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
 	              Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
                Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
  							tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
        				tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
            }

     /****** Ver 3.3 End ******/


    		st_xchngbk.l_quote = st_cntrctqt.l_lst_trdd_prc;

			/*** Ver 6.9 Starts ***/
      if ( st_xchngbk.l_quote == 0 && i_phy_sqroff_check == 1 )
      {
				i_returncode = fn_get_quote_zero(c_ServiceName,st_xchngbk.c_ordr_flw,l_best_bid_price,l_best_offer_price,l_previous_close_price,&l_quote_zero);

      if( i_returncode != 1 )
      {
        fn_userlog( c_ServiceName,"function fn_get_quote_zero failure");
        strcpy( c_err_msg.arr,"System Error.Contact Customer Support");  /*** Datatype is converted to Varchar in Ver 7.5 ***/
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
        if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )
        {
          fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);
        }
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpfree((char *)ptr_fml_Sbuf);
        tpfree ((char *)ptr_fml_Rbuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      st_xchngbk.l_quote = l_quote_zero;
			if(DEBUG_MSG_LVL_5)
      {
        fn_userlog( c_ServiceName,"After fn_get_quote_zero st_xchngbk.l_quote is :%ld:",st_xchngbk.l_quote);
      }
      }
      /*** Ver 6.9 Ends ***/
    		strcpy ( st_xchngbk.c_qt_tm,st_cntrctqt.c_lst_trdd_time );
			}
			else
			{
  
    /****Ver 6.3 Hard Parse Changes****/
				EXEC SQL
      	SELECT NVL(FTQ_BST1_OFFR_QTY,0),
        	     NVL(FTQ_BST2_OFFR_QTY,0),
          	   NVL(FTQ_BST3_OFFR_QTY,0),
            	 NVL(FTQ_BST4_OFFR_QTY,0),
           		 NVL(FTQ_BST5_OFFR_QTY,0),
             	 NVL(FTQ_BST1_OFFR_PRC,0),
               NVL(FTQ_BST2_OFFR_PRC,0),
             	 NVL(FTQ_BST3_OFFR_PRC,0),
               NVL(FTQ_BST4_OFFR_PRC,0),
               NVL(FTQ_BST5_OFFR_PRC,0),
							 NVL(FTQ_BST1_BID_PRC,0),   /*** Ver 6.9 ***/
             	 NVL(FTQ_BST1_OFFR_PRC,0),  /*** Ver 6.9 ***/
             	 NVL(FTQ_CLS_PRC,0)    			/*** Ver 6.9 ***/
      INTO   :st_cntrctlongqt.l_bst_offr_qty[0],
             :st_cntrctlongqt.l_bst_offr_qty[1],
             :st_cntrctlongqt.l_bst_offr_qty[2],
             :st_cntrctlongqt.l_bst_offr_qty[3],
             :st_cntrctlongqt.l_bst_offr_qty[4],
             :st_cntrctlongqt.l_bst_offr_prc[0],
             :st_cntrctlongqt.l_bst_offr_prc[1],
             :st_cntrctlongqt.l_bst_offr_prc[2],
             :st_cntrctlongqt.l_bst_offr_prc[3],
             :st_cntrctlongqt.l_bst_offr_prc[4],
						 :l_best_bid_price,         /*** Ver 6.9 ***/
             :l_best_offer_price,       /*** Ver 6.9 ***/
             :l_previous_close_price    /*** Ver 6.9 ***/
      FROM   FTQ_FO_TRD_QT
      WHERE  FTQ_XCHNG_CD  = :st_cntrct.c_xchng_cd
       AND   FTQ_PRDCT_TYP = DECODE(:st_cntrct.c_prd_typ,'I','O',:st_cntrct.c_prd_typ) /*** decode added in Ver 3.5 ***/
       AND   FTQ_UNDRLYNG  = :st_cntrct.c_undrlyng
       AND   FTQ_EXPRY_DT  = TO_DATE ( :st_cntrct.c_expry_dt,'dd-Mon-yyyy' )
       AND   FTQ_EXER_TYP  = :st_cntrct.c_exrc_typ
       AND   FTQ_OPT_TYP   = :st_cntrct.c_opt_typ
       AND   FTQ_STRK_PRC  = :st_cntrct.l_strike_prc;

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
			if(c_prdct_typ != 'I')						/*** Check Added in Ver 3.7 ***/
			{
				fn_errlog( c_ServiceName, "S31210", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
        {
          fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
        }
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
 	      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
  			tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
        tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
    }
    else if (SQLCODE == NO_DATA_FOUND)
    {
			if(c_prdct_typ != 'I')							/*** Check Added in Ver 3.7 ***/
			{
				fn_errlog ( c_ServiceName, "B28510", DEFMSG, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
        {
          fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
        }
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
 	      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
	  		tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
        tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
			}
    }

		li_aval_ordqty = st_xchngbk.l_ord_tot_qty;

		if ( (li_aval_ordqty - st_cntrctlongqt.l_bst_offr_qty[0]) > 0)
    {
      d_totordrval += st_cntrctlongqt.l_bst_offr_qty[0] * st_cntrctlongqt.l_bst_offr_prc[0];
      li_aval_ordqty -= st_cntrctlongqt.l_bst_offr_qty[0];
      if ( (li_aval_ordqty - st_cntrctlongqt.l_bst_offr_qty[1]) > 0)
      {
        d_totordrval += st_cntrctlongqt.l_bst_offr_qty[1] * st_cntrctlongqt.l_bst_offr_prc[1];
        li_aval_ordqty -= st_cntrctlongqt.l_bst_offr_qty[1];
        if ( (li_aval_ordqty - st_cntrctlongqt.l_bst_offr_qty[2]) > 0)
        {
          d_totordrval += st_cntrctlongqt.l_bst_offr_qty[2] * st_cntrctlongqt.l_bst_offr_prc[2];
          li_aval_ordqty -= st_cntrctlongqt.l_bst_offr_qty[2];
          if ( (li_aval_ordqty - st_cntrctlongqt.l_bst_offr_qty[3]) > 0)
          {
            d_totordrval += st_cntrctlongqt.l_bst_offr_qty[3] * st_cntrctlongqt.l_bst_offr_prc[3];
            li_aval_ordqty -= st_cntrctlongqt.l_bst_offr_qty[3];
            if ( (li_aval_ordqty - st_cntrctlongqt.l_bst_offr_qty[4]) > 0)
            {
							if(i_phy_sqroff_check!=1)   /*** Ver 6.9 ***/
              {
							if(c_prdct_typ != 'I')							/*** Check Added in Ver 3.7 ***/
							{
								fn_errlog( c_ServiceName, "B56015", DEFMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
						    if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
        			  {
          				fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
        				}
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    						Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
	              Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
                Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
  		 					tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
       					tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
							}			/*** Ver 6.9 ***/
            }
            else /* for Offer qty 4 */
            {
              d_totordrval += li_aval_ordqty * st_cntrctlongqt.l_bst_offr_prc[4];
            }
          }
          else /* for Offer qty 3 */
          {
            d_totordrval += li_aval_ordqty * st_cntrctlongqt.l_bst_offr_prc[3];
          }
        }
        else /* for Offer qty 2 */
        {
          d_totordrval += li_aval_ordqty * st_cntrctlongqt.l_bst_offr_prc[2];
        }
      }
      else /* for Offer qty 1 */
      {
        d_totordrval += li_aval_ordqty * st_cntrctlongqt.l_bst_offr_prc[1];
      }
    }
    else /* for Offer qty 0 */
    {
      st_xchngbk.l_quote = st_cntrctlongqt.l_bst_offr_prc[0];
      i_condition = 0;
    }
		 if ( i_condition == 1)
    {
      st_xchngbk.l_quote = d_totordrval / st_xchngbk.l_ord_tot_qty;
    }

		/*** Ver 6.9 Starts ***/
    if ( i_phy_sqroff_check == 1 )
    {
			st_xchngbk.l_quote = st_cntrctqt.l_lst_trdd_prc;
			if ( st_xchngbk.l_quote == 0 )
			{
      i_returncode = fn_get_quote_zero(c_ServiceName,st_xchngbk.c_ordr_flw,l_best_bid_price,l_best_offer_price,l_previous_close_price,&l_quote_zero);

      if( i_returncode != 1 )
      {
				fn_userlog( c_ServiceName,"function fn_get_quote_zero failure");
        strcpy( c_err_msg.arr,"System Error.Contact Customer Support");
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
        if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )
        {
          fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);
        }
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpfree((char *)ptr_fml_Sbuf);
        tpfree ((char *)ptr_fml_Rbuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      st_xchngbk.l_quote = l_quote_zero;
			if(DEBUG_MSG_LVL_5)
      {
        fn_userlog( c_ServiceName,"After fn_get_quote_zero st_xchngbk.l_quote is :%ld:",st_xchngbk.l_quote);
      }
			}
    }
    /*** Ver 6.9 Ends ***/

    strcpy ( st_xchngbk.c_qt_tm,(char *)st_cntrctqt.c_lst_trdd_time );

  		}
		}

	}

	/********** Ver 1.9 Starts ***************/

  if(st_o_ordbk.c_prd_typ == SLTP_FUTUREPLUS)
  {
    MEMSET(c_sys_msg);
    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
      if (Ferror32 != FNOTPRES)
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
        {
          fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
        }
        fn_errlog( c_ServiceName, "S31215", FMLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
	      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
  			tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
        tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
        fn_userlog(c_ServiceName," 666");
        i_mtm_flg =2;       /* if called by SLTP F+ Customer from ASP */
      }
    }
		else /* success condition */
    {
      /** fn_userlog(c_ServiceName," 777");   Ver 5.7 ***/
      fn_userlog(c_ServiceName,"c_sys_msg =:%s:",c_sys_msg); /* if called from backoffice EOS  */
      if (strcmp(c_sys_msg,"EOS") == 0)
      {
        i_mtm_flg=1;
      }
    }

    /********Check whether trading on SLTP is allowed******/
   /***Ver 6.3 Hard Parse Changes***/
    if (i_mtm_flg == 2)
    {

		fn_userlog( c_ServiceName, "CR-ISEC14-144377 Index/Stock :%c:",  st_o_ordbk.c_ctgry_indstk );   /*** Added in Ver 7.9 ***/	

     EXEC SQL
       SELECT /*** MTM_SLTP_ALLWD_STTS,
              MTM_SLTP_EOS_FLG Commented in Ver 7.9 ***/
							/**** DECODE added in Ver 7.9 ****/
							DECODE ( :st_o_ordbk.c_ctgry_indstk,'I',MTM_SLTP_ALLWD_STTS_I,'S',MTM_SLTP_ALLWD_STTS_S,'N' ),
							DECODE ( :st_o_ordbk.c_ctgry_indstk,'I',MTM_SLTP_EOS_FLG,'S',MTM_SLTP_EOS_FLG_S,'N' )
       INTO   :c_sltp_allwd_stts,
              :c_sltp_eos_flg
       FROM   MTM_APPLN_STTS
       WHERE  MTM_XCHNG_CD =  :st_o_ordbk.c_xchng_cd
       AND    MTM_PIPE_ID  =  :st_o_ordbk.c_pipe_id;
			
			if( SQLCODE != 0 )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
        {
          fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
        }
        fn_errlog( c_ServiceName, "S31220", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
 				tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
        tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

			if(DEBUG_MSG_LVL_2)    /** Ver 5.7 **/
			{
      	fn_userlog( c_ServiceName,"c_sltp_allwd_stts =%c ",c_sltp_allwd_stts);
      	fn_userlog( c_ServiceName,"c_sltp_eos_flg =%c ",c_sltp_eos_flg);
			}	
			if (c_sltp_allwd_stts == 'N' || c_sltp_eos_flg =='Y' )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
        {
          fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
        }
        fn_userlog(c_ServiceName,"SLTP FuturePLUS closing for the day:No new SLTP Future PLUS orders for the day");
				strcpy(c_err_msg.arr,"SLTP FuturePLUS closing for the day:No new SLTP Future PLUS orders for the day"); /*** Ver 4.7 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
 	      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
  			tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
        tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
  }
   /********** Ver 1.9 Ends ***************/

	 /********** Ver 3.5 Starts ***************/

   if(st_o_ordbk.c_prd_typ == OPTIONPLUS )
   {
    	MEMSET(c_sys_msg);
    	i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0);
    	i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
      if (Ferror32 != FNOTPRES)
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
        {
          fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
        }
        fn_errlog( c_ServiceName, "S31225", FMLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
	      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
  			tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
        tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
        fn_userlog(c_ServiceName," 666");
        i_mtm_flg =2;       /* if called by OptionPlus Customer from ASP */
      }
    }
    else /* success condition */
    {
      /** fn_userlog(c_ServiceName," 777");    ** ver 5.7 **/
      fn_userlog(c_ServiceName,"c_sys_msg =:%s:",c_sys_msg); /* if called from backoffice EOS  */
      if (strcmp(c_sys_msg,"EOS") == 0)
      {
        i_mtm_flg=1;
      }
    }

		i_err[0] = 0 ;
		i_ferr [0] = 0;
		

    /********Check whether trading on SLTP is allowed******/
    if (i_mtm_flg == 2)
    {
			fn_userlog( c_ServiceName, "CR-ISEC14-144377 Index/Stock :%c:",  st_o_ordbk.c_ctgry_indstk );   /*** Added in Ver 7.9 ***/

 /***Ver 6.3 Hard Parse Changes***/
     EXEC SQL
       SELECT /*** MTM_OP_ALLWD_STTS,
              MTM_OP_EOS_FLG Commented in Ver 7.9 ***/
							/**** DECODE added in Ver 7.9 ****/
							DECODE ( :st_o_ordbk.c_ctgry_indstk,'I',MTM_OP_ALLWD_STTS,'S',MTM_OP_ALLWD_STTS_S,'N' ),
							DECODE ( :st_o_ordbk.c_ctgry_indstk,'I',MTM_OP_EOS_FLG,'S',MTM_OP_EOS_FLG_S,'N' ) 
       INTO   :c_optpls_allwd_stts,
              :c_optpls_eos_flg
       FROM   MTM_APPLN_STTS
       WHERE  MTM_XCHNG_CD =  :st_o_ordbk.c_xchng_cd
       AND    MTM_PIPE_ID  =  :st_xchngbk.c_pipe_id;

      if( SQLCODE != 0 )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
        {
          fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
        }
        fn_errlog( c_ServiceName, "S31230", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
	      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
  			tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
        tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if(DEBUG_MSG_LVL_2)    /** Ver 5.7 **/
      {
      	fn_userlog( c_ServiceName,"c_sltp_allwd_stts =%c ",c_sltp_allwd_stts);
      	fn_userlog( c_ServiceName,"c_sltp_eos_flg =%c ",c_sltp_eos_flg);
			}
      if (c_optpls_allwd_stts == 'N' || c_optpls_eos_flg =='Y' )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
        {
          fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
        }
        fn_userlog(c_ServiceName,"OptionPLUS closing for the day:No new OptionPLUS orders for the day");
				strcpy(c_err_msg.arr,"OptionPLUS closing for the day:No new OptionPLUS orders for the day"); /*** Datatype is converted to Varchar in Ver 7.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
	      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
  			tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
        tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
   }
   /********** Ver 3.5 Ends ***************/
  
  
	i_returncode = fn_check_inp_spn( c_ServiceName,
                                   &st_xchngbk,
                                   &st_cntrctqt,
                                   c_fum_mrkt_typ,
                                   c_fcm_mrkt_typ,
                                   i_rollover_ord_ind,    /*** Ver 6.4 ***/ 
																	 c_sprd_expiry_date1, /*** Ver 6.4 ***/
																	 c_sprd_expiry_date2, /*** Ver 6.4 ***/
                                   &st_err_msg );
  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
	  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
    tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
    tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	else if ( i_returncode == -2 )  /*** Added in Ver 5.8 ***/
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) ) 
    {
      fn_upd_trail_ord(st_xchngbk.c_ordr_rfrnc);                     
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 ); 
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0); 
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
    tpfree((char *)ptr_fml_Sbuf);   
    tpfree ((char *)ptr_fml_Rbuf); 
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/**i_returncode = fn_lock_usr( c_ServiceName, st_usrprfl.c_cln_mtch_accnt ); ** ver 9.2 **/
	i_returncode = fn_lock_fno( c_ServiceName, st_usrprfl.c_cln_mtch_accnt );  /** ver 9.2 **/

  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
		tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
    tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /** Ver 6.4 started **/
  if( st_o_ordbk.c_spl_flg == ROLLOVER_WITH_SPREAD )    
	{
	i_returncode  = fn_getcnt_gen_rws ( c_ServiceName,
                                  &st_cntrct,
                                  &st_cntrct_geninf,
																	c_sprd_expiry_date1,
																	c_sprd_expiry_date2,
                                  c_err_msg.arr
                                );
	}
	else /** ver 6.4 ended **/
  {
	i_returncode  = fn_getcnt_gen ( c_ServiceName,
                                  &st_cntrct,
                                  &st_cntrct_geninf,
                                  c_err_msg.arr
                                );
  }
	if ( i_returncode != SUCC_BFR )
  {
    fn_errlog( c_ServiceName, "S31235",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
		tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
    tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	
  i_returncode = fn_check_ord_spn( c_ServiceName,
                                   &st_cntrct_geninf,
                                   &st_xchngbk,
                                   &st_o_ordbk,
                                   &st_err_msg );
  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg);
 		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }   
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
    tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
    tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	else if(i_returncode == -2)  /*** Added in Ver 5.8 ***/
	{
    fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg);
    if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )  
    {
      fn_upd_trail_ord(st_xchngbk.c_ordr_rfrnc);                      
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 ); 
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
    tpfree((char *)ptr_fml_Sbuf);     
    tpfree ((char *)ptr_fml_Rbuf);   
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
  /*** Ver 4.6 Starts Here ***/
  c_vtc_ord='N';

  if( c_prdct_typ == 'F' )
  {

   /*** Ver 6.1 Starts ***/

   if(  st_o_ordbk.c_ord_typ == 'V'  &&  st_xchngbk.c_ord_typ == 'T' )
   {
    fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg);
    fn_errlog( c_ServiceName, "S31240", "VTC to Day Order Modification is Not Allowed.", c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,"VTC to Day Order Modification is Not Allowed." , 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
		tpfree((char *)ptr_fml_Sbuf);      /***  VQC ***/
		tpfree((char *)ptr_fml_Rbuf);      /***  VQC ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

   /*** Ver 6.1 Ends   ***/

   if( ( st_o_ordbk.c_ord_typ == 'T' || st_o_ordbk.c_ord_typ =='I' ) && ( st_xchngbk.c_ord_typ == 'V' ))
   {
    fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg);
 		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    fn_errlog( c_ServiceName, "S31245", "Day to VTC Order Modification is Not Allowed.", c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,"Day to VTC Order Modification is Not Allowed." , 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
		tpfree((char *)ptr_fml_Sbuf);      /***  VQC ***/
		tpfree((char *)ptr_fml_Rbuf);      /***  VQC ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

   if ( (st_xchngbk.c_slm_flg == st_o_ordbk.c_slm_flg)
     && (st_xchngbk.l_ord_lmt_rt == st_o_ordbk.l_ord_lmt_rt)
     && (st_xchngbk.l_ord_tot_qty == st_o_ordbk.l_ord_tot_qty)
     && (st_xchngbk.l_dsclsd_qty == st_o_ordbk.l_dsclsd_qty)
     && (st_xchngbk.l_stp_lss_tgr == st_o_ordbk.l_stp_lss_tgr)
     &&(  (st_xchngbk.c_ord_typ != st_o_ordbk.c_ord_typ)
     ||   (strcmp(st_xchngbk.c_valid_dt,st_o_ordbk.c_valid_dt) !=0 )  ) )
   {
     if( ( st_xchngbk.c_ord_typ == 'T' && st_o_ordbk.c_ord_typ == 'V' ) ||
          (strcmp(st_xchngbk.c_valid_dt,st_o_ordbk.c_valid_dt) !=0 && st_xchngbk.c_ord_typ !='I')  )
     {
			if(DEBUG_MSG_LVL_0)            /* Ver 7.5 */
    	{
				fn_userlog(c_ServiceName," Inside Setting c_vtc_ord ='Y' ");
      	c_vtc_ord ='Y'; /* Process the modification in EBA only **/
      }	 
		 }
   }
  }
  /*** Vet 4.6 Ends Here ****/

	if ( st_xchngbk.c_slm_flg == MARKET )
  {
    st_xchngbk.l_ord_lmt_rt = st_xchngbk.l_quote;
  }
	
  /*** Ver 2.1 Starts ***/
	
  c_ord_val_flg = 'N' ;
  c_cumopn_val_flg = 'N' ;
  c_srvc_call_flg = 'M' ;     /*** set to 'M' for modification call ***/

  /**** Calculating Net modification value                                                        ****/
  /**** Here we are subtracting the old open val of the order calulated further in the function , ****/
  /**** while adding the new open val of the same  .Thus , the net value is the  total of the old ****/
  /**** open val and  the new open val  .                                                         ****/
  /**** Net Qty = [(New qty - Executed qty - cancelled qty)*new rate ]                            ****/
  /****         - [(Old qty - Executed qty - cancelled qty)*old rate ]                            ****/
  /**** Executed qty ,cancelled qty and old rate are from fod table                               ****/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, " st_o_ordbk.l_ord_tot_qty :%ld:",st_o_ordbk.l_ord_tot_qty);
    fn_userlog( c_ServiceName, " st_o_ordbk.l_exctd_qty   :%ld:",st_o_ordbk.l_exctd_qty);
    fn_userlog( c_ServiceName, " st_o_ordbk.l_can_qty :%ld:",st_o_ordbk.l_can_qty);
  }


  l_old_rt = st_o_ordbk.l_ord_lmt_rt ;

  if ( st_o_ordbk.c_prd_typ == 'O')
  {
    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Swati-----st_xchngbk.l_ord_lmt_rt is :%ld:",st_xchngbk.l_ord_lmt_rt);
      fn_userlog(c_ServiceName,"Swati-----l_ord_lmt_rt is :%ld:",l_ord_lmt_rt);
    }

    l_old_rt = l_old_rt + l_ord_lmt_rt ;   /*** Adding strike price to the old rate ***/

    l_ord_lmt_rt = l_ord_lmt_rt + st_xchngbk.l_ord_lmt_rt;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Swati--Old -----l_old_rt is :%ld:",l_old_rt);
      fn_userlog(c_ServiceName,"Swati--New -----l_ord_lmt_rt is :%ld:",l_ord_lmt_rt);
    }
  }


  d_old_ord_val = ((double)st_o_ordbk.l_ord_tot_qty - (double)st_o_ordbk.l_exctd_qty - (double)st_o_ordbk.l_can_qty) *
                            (double)l_old_rt ;
  d_new_ord_val = ((double)st_xchngbk.l_ord_tot_qty - (double)st_o_ordbk.l_exctd_qty - (double)st_o_ordbk.l_can_qty) *
                            (double)l_ord_lmt_rt ;
  d_netadj_ord_val = d_new_ord_val - d_old_ord_val ;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, " d_old_ord_val :%lf:",d_old_ord_val);
    fn_userlog( c_ServiceName, " d_new_ord_val :%lf:",d_new_ord_val);
    fn_userlog( c_ServiceName, " d_netadj_ord_val :%lf:",d_netadj_ord_val);

  }

  i_returncode = fn_chk_spnord_max_limit  ( c_ServiceName,
                                            st_usrprfl.c_cln_mtch_accnt ,
                                            st_xchngbk.l_ord_tot_qty,
                                            l_ord_lmt_rt,
                                            d_netadj_ord_val,
                                            c_srvc_call_flg,
                                            st_xchngbk.c_slm_flg,
                                            st_xchngbk.c_xchng_cd,
                                            &c_ord_val_flg,
                                            &c_cumopn_val_flg,
                                            &st_err_msg
                                        );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31250", LIBMSG, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg);
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
       fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
		tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
    tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "c_ord_val_flg     :%c:", c_ord_val_flg );
    fn_userlog( c_ServiceName, "c_cumopn_val_flg  :%c:", c_cumopn_val_flg);
  }

  if(c_cumopn_val_flg == 'Y')
  {
		/*** Ver 8.7 started ***/
		if(DEBUG_MSG_LVL_3)
		{
		fn_userlog(c_ServiceName,"st_o_ordbk.c_prd_typ:%c: st_xchngbk.c_slm_flg:%c: st_o_ordbk.c_fc_flg:%c:",st_o_ordbk.c_prd_typ,st_xchngbk.c_slm_flg,st_o_ordbk.c_fc_flg);
		}
	
		/*** Ver 8.9 condition added to check modified square off order ***/
      EXEC SQL
      SELECT
              NVL(FCP_OPNPSTN_FLW,'N'),
              NVL(FCP_OPNPSTN_QTY,0),
              DECODE(FCP_OPNPSTN_FLW,'S',GREATEST(ABS(FCP_IBUY_QTY),ABS(FCP_EXBUY_QTY)),'B',
                     GREATEST( ABS(FCP_ISELL_QTY), ABS(FCP_EXSELL_QTY)),0)
      INTO
        :c_cntrct_pstn_flw,
        :l_cntrct_pstn_qty,
        :l_cvr_pstn_qty
        FROM  FCP_FO_SPN_CNTRCT_PSTN
        WHERE FCP_CLM_MTCH_ACCNT  = :st_usrprfl.c_cln_mtch_accnt
        AND   FCP_XCHNG_CD        = :st_cntrct.c_xchng_cd
        AND   FCP_UNDRLYNG        = :st_cntrct.c_undrlyng
        AND   FCP_PRDCT_TYP  = :st_cntrct.c_prd_typ
        AND   TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY') = :st_cntrct.c_expry_dt
        AND   FCP_EXER_TYP = :st_cntrct.c_exrc_typ
        AND   FCP_STRK_PRC = :st_cntrct.l_strike_prc
        AND   FCP_OPT_TYP =  :st_cntrct.c_opt_typ;

		if(SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
      {
        fn_errlog( c_ServiceName, "S31255", SQLMSG, c_err_msg.arr );
        fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      EXEC SQL
        SELECT abs(FOD_ORDR_TOT_QTY)
        INTO :l_ord_total_qty
        FROM  FOD_FO_ORDR_DTLS
        WHERE   FOD_ORDR_RFRNC = :st_o_ordbk.c_ordr_rfrnc;

      if(SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
      {
        fn_errlog( c_ServiceName, "S31260", SQLMSG, c_err_msg.arr );
        fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
	
			if(DEBUG_MSG_LVL_3)
      {
        fn_userlog( c_ServiceName,"c_cntrct_pstn_flw:%c: l_cntrct_pstn_qty:%ld: l_cvr_pstn_qty:%ld: l_ord_total_qty :%ld:"
                    ,c_cntrct_pstn_flw,l_cntrct_pstn_qty,l_cvr_pstn_qty,l_ord_total_qty);
        fn_userlog( c_ServiceName,"st_xchngbk.c_ordr_flw:%c: st_xchngbk.l_ord_tot_qty:%ld: st_o_ordbk.c_ordr_rfrnc :%s:"
                    ,st_xchngbk.c_ordr_flw,st_xchngbk.l_ord_tot_qty,st_o_ordbk.c_ordr_rfrnc);
      }

      if ( c_cntrct_pstn_flw != st_xchngbk.c_ordr_flw && c_cntrct_pstn_flw !='N'
          && abs(l_cntrct_pstn_qty) >=  abs(st_xchngbk.l_ord_tot_qty)+ l_cvr_pstn_qty - l_ord_total_qty  )
      {
        fn_userlog(c_ServiceName,"SKIP Order Value exceeding max Cumulative open order value for square off " );
        c_sqroff_flg = 'Y';
      }
    /*** ver 8.9 ends ***/
		if ( (( st_o_ordbk.c_prd_typ == SLTP_FUTUREPLUS || st_o_ordbk.c_prd_typ == OPTIONPLUS )
            && (st_xchngbk.c_slm_flg == MARKET) && ( st_o_ordbk.c_fc_flg == 'C')) || (c_sqroff_flg == 'Y') )
    {
			fn_userlog(c_ServiceName,"SKIP Order Value exceeding max Cumulative open order value");
		}
		else
		{
		/*** Ver 8.7 end ***/
    fn_userlog( c_ServiceName, "Order Value exceeding max Cumulative open order value.");
    fn_errlog( c_ServiceName, "B21077", "DEFMSG", c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
    fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg);
    if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_upd_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
		strcat(c_err_msg.arr,st_err_msg.c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
		Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/ 
    tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
    tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
		} /*** Ver 8.7 ***/
  }

  if(c_ord_val_flg == 'Y')
  {
    fn_userlog( c_ServiceName, "Order value Exceeding Max Market/Limit value allowed.");
    fn_errlog( c_ServiceName, "B23035", "DEFMSG", c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
    fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg);
 		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_upd_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }   
		strcat(c_err_msg.arr,st_err_msg.c_err_msg);  /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
		tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
    tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

  /*** Ver 2.1 Ends   ***/

  strcpy(st_d_xchngbk.c_ordr_rfrnc,st_xchngbk.c_ordr_rfrnc);
  st_d_xchngbk.l_mdfctn_cntr = st_o_ordbk.l_mdfctn_cntr ;
  st_d_xchngbk.c_oprn_typ = WITHOUT_ORS_MSG_TYP;

  i_returncode  = fn_spnref_to_omd  ( &st_d_xchngbk,
                                      &st_d_xchngbk,
                                      c_ServiceName,
                                      c_err_msg.arr
                                    );

  if ( i_returncode != SUCC_BFR )
  {
    fn_errlog( c_ServiceName, "S31265",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
    tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
    tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Ver 6.4 Started ******/
  if ( st_xchngbk.c_spl_flg == ROLLOVER_WITH_SPREAD )
  {
    st_xchngbk.c_sprd_ord_ind = st_d_xchngbk.c_sprd_ord_ind;
  }
  /*** ver 6.4 Ends here ****/

	/****** Ver 5.8 starts ********************/
    st_xchngbk.c_prcimpv_flg='N';
    st_o_ordbk.c_prcimpv_flg='N';
		if( c_sltp_trail_flag == 'Y' )
		{
			if( strcmp(c_rmrks,"SYSTRAIL") != 0 )
      {
				EXEC SQL
					SELECT  NVL(FTQ_LST_TRD_PRC,0)
					INTO    :st_xchngbk.l_lTP
					FROM    FTQ_FO_TRD_QT
					WHERE   FTQ_XCHNG_CD  = :st_cntrct.c_xchng_cd
					AND     FTQ_PRDCT_TYP = :st_cntrct.c_prd_typ
					AND     FTQ_UNDRLYNG  = :st_cntrct.c_undrlyng
					AND     FTQ_EXPRY_DT  = :st_cntrct.c_expry_dt
					AND     FTQ_EXER_TYP  = :st_cntrct.c_exrc_typ
					AND     FTQ_OPT_TYP   = :st_cntrct.c_opt_typ
					AND     FTQ_STRK_PRC  = :st_cntrct.l_strike_prc;
			
				if ( SQLCODE !=0 )
				{
					fn_errlog( c_ServiceName, "S31270", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
					fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg);
					if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    			{
      			fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    			}
					/**strcat(c_err_msg.arr,st_err_msg.c_err_msg.arr); **/
					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0); /*** Datatype is converted to Varchar in Ver 7.5 ***/
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 ); 
					Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   
					Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  
					tpfree((char *)ptr_fml_Sbuf);      
					tpfree ((char *)ptr_fml_Rbuf);     
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
				}
			}

				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName, "st_xchngbk.l_lTP******:%ld:",st_xchngbk.l_lTP);
				}
				if(st_o_ordbk.c_ordr_flw == 'B')
				{
					st_xchngbk.l_trail_amt= st_xchngbk.l_stp_lss_tgr - st_xchngbk.l_lTP ;
				}
				else
				{
					st_xchngbk.l_trail_amt=	st_xchngbk.l_lTP - st_xchngbk.l_stp_lss_tgr ;
				}
				st_xchngbk.l_lmt_offset=abs( st_xchngbk.l_ord_lmt_rt - st_xchngbk.l_stp_lss_tgr );
				st_xchngbk.l_init_sltp_rt=st_d_xchngbk.l_init_sltp_rt;
				st_xchngbk.l_init_lmt_rt=st_d_xchngbk.l_init_lmt_rt;
				st_xchngbk.c_prcimpv_flg=c_sltp_trail_flag;
				st_o_ordbk.c_prcimpv_flg=c_sltp_trail_flag;
				st_o_ordbk.l_trail_amt=st_xchngbk.l_trail_amt;
				st_o_ordbk.l_lmt_offset=st_xchngbk.l_lmt_offset;
				if(DEBUG_MSG_LVL_3)
				{			
					fn_userlog(c_ServiceName,"st_xchngbk.l_trail_amt  :%ld:",st_xchngbk.l_trail_amt);
					fn_userlog(c_ServiceName,"st_xchngbk.l_lmt_offset ****:%ld:",st_xchngbk.l_lmt_offset);
					fn_userlog(c_ServiceName,"st_xchngbk.l_init_sltp_rt  :%ld:",st_xchngbk.l_init_sltp_rt);
					fn_userlog(c_ServiceName,"st_xchngbk.l_init_lmt_rt  :%ld:",st_xchngbk.l_init_lmt_rt);
				}
				EXEC SQL
					SELECT NVL(FUM_TRAIL_AMT,0)*100
					INTO   :d_fum_trail_amt
					FROM   FUM_FO_UNDRLYNG_MSTR
					WHERE	 FUM_XCHNG_CD  =:st_cntrct.c_xchng_cd
					AND    FUM_PRDCT_TYP =:st_cntrct.c_prd_typ
					AND    FUM_UNDRLYNG  =:st_cntrct.c_undrlyng;
				if ( SQLCODE !=0 )
				{
					fn_errlog( c_ServiceName, "S31275", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
					fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg);
					if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    			{
      			fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    			}
				  /** strcat(c_err_msg.arr,st_err_msg.c_err_msg.arr); **/
					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);   /*** Datatype is converted to Varchar in Ver 7.5 ***/
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 ); 
					Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   
					Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  
					tpfree((char *)ptr_fml_Sbuf);      
					tpfree ((char *)ptr_fml_Rbuf);     
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
				}
				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"d_fum_trail_amt  :%lf:",d_fum_trail_amt);
				}

			if((double) st_xchngbk.l_trail_amt <  d_fum_trail_amt )
			{
				if( st_o_ordbk.c_ordr_flw == 'B' )
          {
            sprintf(c_err_msg.arr,"The difference between SLTP and LTP should be greater than minimum difference of %lf in case of Buy order",(d_fum_trail_amt/100)); /*** Datatype is converted to Varchar in Ver 7.5 ***/
          }
          else
          {
            sprintf(c_err_msg.arr,"The difference between LTP and SLTP should be greater than minimum difference of %lf in case of Buy order",(d_fum_trail_amt/100)); /*** Datatype is converted to Varchar in Ver 7.5 ***/

          }
          Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0); /*** Datatype is converted to Varchar in Ver 7.5 ***/
					fn_errlog( c_ServiceName, "S31280", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
					fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg);
					if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    			{
      			fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    			}
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 ); 
					Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   
					Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  
					tpfree((char *)ptr_fml_Sbuf);      
					tpfree ((char *)ptr_fml_Rbuf);     
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
			}

		}
	
		if( c_sltp_trail_flag == 'Y' && st_d_xchngbk.c_prcimpv_flg == 'N' )
		{
			st_xchngbk.l_init_sltp_rt = st_xchngbk.l_stp_lss_tgr;
			st_xchngbk.l_init_lmt_rt = st_xchngbk.l_ord_lmt_rt;
		}
	
		/****** Ver 5.8 Ends *********/


	if( strcmp( st_usrprfl.c_user_id, "system" )  != 0)
  {
    if( ( strcmp ( st_o_ordbk.c_channel ,"SYS" ) == 0  && st_o_ordbk.c_ord_typ !='V' ) || ( strcmp ( st_o_ordbk.c_channel ,"OFF" )  == 0 ) )  /** Ver 4.6 , st_o_ordbk.c_ord_typ !='V' ** Added **/ 
    {
       fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg);
			 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    	 {
      	 fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    	 }	
       fn_errlog( c_ServiceName, "B22008", DEFMSG, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    	 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
       Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
			 tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
       tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if( st_o_ordbk.c_ord_typ !='V' )  /*** Ver 4.6 if condition added **/
    {
     if ( st_o_ordbk.c_spl_flg == SYSTEM_SQUAREOFF || st_o_ordbk.c_spl_flg == L2_ORDER ||
         st_o_ordbk.c_spl_flg == L3_ORDER || st_o_ordbk.c_ord_typ == IMMEDIATE_OR_CANCEL ||
         st_o_ordbk.c_spl_flg == IMTM_SYS_SQUAREOFF || st_o_ordbk.c_spl_flg == LMTNEG_SYS_SQUAREOFF) /*** Check added for  IMTM_SYS_SQUAREOFF and LMTNEG_SYS_SQUAREOFF in Ver 4.1 ***/
    {
      fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg);
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      }
      fn_errlog( c_ServiceName, "B28533", DEFMSG, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
	    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
  		tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
      tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
   }

    if ( ( st_i_ordbk.c_ordr_stts == ORDERED ) || ( st_i_ordbk.c_ordr_stts == PARTIALLY_EXECUTED ) )
    {
      if( ( st_xchngbk.c_req_typ == CANCELLED ) && ( st_xchngbk.c_plcd_stts != REJECT ) )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg);
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
        {
          fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
        }
        fn_errlog( c_ServiceName, "B28533", DEFMSG, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
	      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
  			tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
        tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
  }

	if ( st_o_ordbk.c_ordr_stts == REQUESTED )
  {
    st_d_xchngbk.c_plcd_stts = ACCEPT;
    st_d_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;
    st_d_xchngbk.l_ors_msg_typ = ORS_NEW_ORD_RJCT;
    strcpy( st_d_xchngbk.c_ack_tm, (char *) c_sysdate.arr);
    strcpy( st_d_xchngbk.c_entry_dt_tm, (char *) c_sysdate.arr);
		
		/** Ver 5.8 Starts **/
    if( strcmp(c_rmrks,"SYSTRAIL") == 0 )
    {
      strcpy( st_d_xchngbk.c_xchng_rmrks, "MODIFIED BY SYSTEM");
    }
    else   /** Ver 5.8 Ends **/
		{
    	strcpy( st_d_xchngbk.c_xchng_rmrks, "MODIFIED BY CLIENT");
		}
    st_d_xchngbk.l_dwnld_flg = NOT_DOWNLOAD;
    st_d_xchngbk.d_jiffy = 0;
    st_d_xchngbk.l_bit_flg  = 0;   
    st_d_xchngbk.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;
		st_d_xchngbk.l_session_id=st_usrprfl.l_session_id; /** Ver 8.8 **/

		i_rtrn_xchngbk  = fn_spnupd_xchngbk	( c_ServiceName,
                                        	&st_d_xchngbk,
                                        	c_err_msg.arr
                                      	);  /*** Datatype is converted to Varchar in Ver 7.5 ***/


    if ( i_rtrn_xchngbk	!= 0	)
    {
      fn_errlog( c_ServiceName, "S31285",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
     	if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      } 
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
	    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
  		tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
      tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		
		fn_cpy_ddr ( st_d_xchngbk.c_rout_crt );

		i_err [0] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_d_xchngbk.c_rout_crt,0);
  	i_ferr[0] = Ferror32;
  	i_err [1] = Fadd32(ptr_fml_Sbuf,FFO_ORDR_RFRNC, (char *)st_d_xchngbk.c_ordr_rfrnc,0);
  	i_ferr[1] = Ferror32;
  	i_err [2] = Fadd32(ptr_fml_Sbuf,FFO_ORS_MSG_TYP, (char *)&st_d_xchngbk.l_ors_msg_typ,0);
  	i_ferr[2] = Ferror32;
  	i_err [3] = Fadd32(ptr_fml_Sbuf,FFO_MDFCTN_CNTR, (char *)&st_d_xchngbk.l_mdfctn_cntr,0);
  	i_ferr[3] = Ferror32;
  	i_err [4] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM, (char *)st_d_xchngbk.c_ack_tm,0);
  	i_ferr[4] = Ferror32;
  	i_err [5] = Fadd32(ptr_fml_Sbuf,FFO_PREV_ACK_TM, (char *)st_d_xchngbk.c_entry_dt_tm,0);
  	i_ferr[5] = Ferror32;

  	for (i = 0;i < 7 ;i++)
  	{
    	if(i_err[i] == -1 )
    	{
      	fn_userlog( c_ServiceName, "Error in :%d:",i );
      	fn_errlog( c_ServiceName, "S31290", Fstrerror32( i_ferr[i]),c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/ 
       	tpfree((char *)ptr_fml_Sbuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
        {
          fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
        }
        tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
  	}

		i_returncode = tpcall("SFO_PRCS_RSP",( char *)ptr_fml_Sbuf,0,( char **)&ptr_fml_Rbuf,&l_recvbuf,0 );

    if ( i_returncode != SUCC_BFR )
    {
     	fn_errlog( c_ServiceName, "S31295",TPMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			Fget32(ptr_fml_Rbuf,FFO_ERR_MSG,0,(char*)c_err_msg.arr,0); /*** Datatype is converted to Varchar in Ver 7.5 ***/
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      }
			tpfree((char*)ptr_fml_Sbuf);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
      tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		tpfree((char*)ptr_fml_Sbuf);
		tpfree((char*)ptr_fml_Rbuf);			/***	VQC	***/
		
  }  
	
	if ( ( ( st_o_ordbk.c_ordr_stts == ORDERED ) || ( st_o_ordbk.c_ordr_stts == PARTIALLY_EXECUTED )) &&
     ( st_d_xchngbk.c_plcd_stts == 'R'     )   )  /* Request Placed */
  {
    st_d_xchngbk.c_plcd_stts = REJECT;
    st_d_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;
    /*** st_d_xchngbk.l_ors_msg_typ = ORS_MOD_ORD_RJCT;	*** Commented in Ver 6.5 ***/
		/*** Ver 6.5 starts ***/
		
	if(DEBUG_MSG_LVL_0)            /* Ver 7.5 */
    {
	  	fn_userlog(c_ServiceName,"st_d_xchngbk.c_req_typ =:%c:",st_d_xchngbk.c_req_typ); 
		}			

		if (st_d_xchngbk.c_req_typ == CANCELLED )
		{
			   st_d_xchngbk.l_ors_msg_typ = ORS_CAN_ORD_RJCT;
		}
		else
		{
		    st_d_xchngbk.l_ors_msg_typ = ORS_MOD_ORD_RJCT;
		}
		/*** Ver 6.5 ends ***/
    strcpy( st_d_xchngbk.c_ack_tm, (char *) c_sysdate.arr);

		/** Ver 5.8 Starts **/
    if( strcmp(c_rmrks,"SYSTRAIL") == 0 )
    {
			/*** Ver 6.5 starts ***/
			if (st_d_xchngbk.c_req_typ == CANCELLED )
			{
				strcpy( st_d_xchngbk.c_xchng_rmrks, "CANCELLED BY SYSTEM");
			}
			else
			{
			/*** Ver 6.5 ends ***/
      strcpy( st_d_xchngbk.c_xchng_rmrks, "MODIFIED BY SYSTEM");
			} /*** Ver 6.5 ***/
    }
    else   /** Ver 5.8 Ends **/
		{
			/*** Ver 6.5 starts ***/
			if (st_d_xchngbk.c_req_typ == CANCELLED )
			{
				strcpy( st_d_xchngbk.c_xchng_rmrks, "CANCELLED BY CLIENT");
			}
			else
			{
			/*** Ver 6.5 ends ***/
    	strcpy( st_d_xchngbk.c_xchng_rmrks, "MODIFIED BY CLIENT");
			} /*** Ver 6.5 ***/
		}
    st_d_xchngbk.l_dwnld_flg = NOT_DOWNLOAD;
    st_d_xchngbk.d_jiffy = 0;
    st_d_xchngbk.l_bit_flg  = 0; 
    st_d_xchngbk.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;
		st_d_xchngbk.l_session_id=st_usrprfl.l_session_id; /** Ver 8.8 **/

		i_rtrn_xchngbk  = fn_spnupd_xchngbk  ( c_ServiceName,
                                        &st_d_xchngbk,
                                        c_err_msg.arr
                                      ); /*** Datatype is converted to Varchar in Ver 7.5 ***/


    if (	i_rtrn_xchngbk	 != 0	)
    {
      fn_errlog( c_ServiceName, "S31300",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      }
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
	    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
  		tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
      tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

	  fn_cpy_ddr ( st_d_xchngbk.c_rout_crt );

		i_err [0] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_d_xchngbk.c_rout_crt,0);
    i_ferr[0] = Ferror32;
    i_err [1] = Fadd32(ptr_fml_Sbuf,FFO_ORDR_RFRNC, (char *)st_d_xchngbk.c_ordr_rfrnc,0);
    i_ferr[1] = Ferror32;
    i_err [2] = Fadd32(ptr_fml_Sbuf,FFO_ORS_MSG_TYP, (char *)&st_d_xchngbk.l_ors_msg_typ,0);
    i_ferr[2] = Ferror32;
    i_err [3] = Fadd32(ptr_fml_Sbuf,FFO_MDFCTN_CNTR, (char *)&st_d_xchngbk.l_mdfctn_cntr,0);
    i_ferr[3] = Ferror32;
    i_err [4] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM, (char *)st_d_xchngbk.c_ack_tm,0);
    i_ferr[4] = Ferror32;
    i_err [5] = Fadd32(ptr_fml_Sbuf,FFO_PREV_ACK_TM, (char *)st_d_xchngbk.c_entry_dt_tm,0);
    i_ferr[5] = Ferror32;

    for (i = 0;i < 7 ;i++)
    {
      if(i_err[i] == -1)
      {
        fn_userlog( c_ServiceName, "Error in :%d:",i );
        fn_errlog( c_ServiceName, "S31305", Fstrerror32( i_ferr[i]),c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
        tpfree((char *)ptr_fml_Sbuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      	{
        	fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      	}
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
        tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    i_returncode = tpcall ( "SFO_PRCS_RSP", ( char * ) ptr_fml_Sbuf,0,( char ** ) &ptr_fml_Rbuf,&l_recvbuf,0 );

    if ( i_returncode != SUCC_BFR )
    {
      fn_errlog( c_ServiceName, "S31310",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
     	if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      } 
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
	    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
  		tpfree((char *)ptr_fml_Sbuf);       /***  Ver 4.2 ***/
      tpfree ((char *)ptr_fml_Rbuf);      /***  Ver 4.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		tpfree( (char *)ptr_fml_Sbuf);
		tpfree( (char *)ptr_fml_Rbuf);			/***	VQC	***/

	}

	strcpy(st_pstn_actn.c_user_id, st_usrprfl.c_user_id);
  st_pstn_actn.l_session_id  = st_usrprfl.l_session_id;
  strcpy(st_pstn_actn.c_cln_mtch_accnt,st_o_ordbk.c_cln_mtch_accnt);
  st_pstn_actn.l_eba_cntrct_id = st_cntrct.l_eba_cntrct_id;
  strcpy(st_pstn_actn.c_xchng_cd,st_cntrct.c_xchng_cd);
  st_pstn_actn.c_prd_typ = st_o_ordbk.c_prd_typ;      
  strcpy(st_pstn_actn.c_undrlyng,st_cntrct.c_undrlyng);
  strcpy(st_pstn_actn.c_expry_dt,st_cntrct.c_expry_dt);
  st_pstn_actn.c_exrc_typ = st_cntrct.c_exrc_typ;
  st_pstn_actn.c_opt_typ = st_cntrct.c_opt_typ;
  st_pstn_actn.l_strike_prc = st_cntrct.l_strike_prc;
  st_pstn_actn.c_ctgry_indstk = st_cntrct.c_ctgry_indstk;
  st_pstn_actn.l_ca_lvl = st_cntrct.l_ca_lvl;

  st_pstn_actn.c_trnsctn_flw = st_o_ordbk.c_ordr_flw;
  st_pstn_actn.l_orgnl_qty = st_o_ordbk.l_ord_tot_qty;
  st_pstn_actn.l_orgnl_rt  = st_o_ordbk.l_ord_lmt_rt;
  st_pstn_actn.l_new_qty = st_xchngbk.l_ord_tot_qty;
  st_pstn_actn.l_new_rt  = st_xchngbk.l_ord_lmt_rt;
  st_pstn_actn.l_exec_qty  = st_o_ordbk.l_exctd_qty;
  st_pstn_actn.l_exec_rt  = 0;
  st_pstn_actn.l_fresh_qty  = 0;
  st_pstn_actn.l_cover_qty  = 0;
  st_pstn_actn.d_add_mrgn_amt  = 0;

  st_pstn_actn.l_curr_rt = st_cntrctqt.l_lst_trdd_prc;

  sprintf(st_pstn_actn.c_ref_rmrks,"%s-%ld",st_o_ordbk.c_ordr_rfrnc,st_o_ordbk.l_mdfctn_cntr + 1);
  rtrim(st_pstn_actn.c_ref_rmrks);

  if ( st_o_ordbk.c_ordr_stts == REQUESTED )
  {
    st_pstn_actn.l_actn_typ = ORS_NEW_ORD_REQ;
  }
  else
  {
    st_pstn_actn.l_actn_typ = ORS_MOD_ORD_REQ;
  }

  d_required_amount =0.0;  /** Ver 2.5 **/
  c_modfyscrn_flg='N';     /** Ver 2.5 **/

	/*** if( c_prdct_typ !=  SLTP_FUTUREPLUS )*** if condition added in  Ver 1.9 * Commented In Ver 3.5 ***/
	if( c_prdct_typ !=  SLTP_FUTUREPLUS && c_prdct_typ != OPTIONPLUS && st_o_ordbk.c_spl_flg != ROLLOVER_WITH_SPREAD )/*** condition added for OptionPlus in  Ver 3.5 ***/ /** Ver 6.4 added to skip for rollover with spread */ 
  {
		i_rtrn_cd = fn_cal_mod_pos  ( c_ServiceName,
   	    	                        c_err_msg.arr,
    	                            &st_pstn_actn
      	                        ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
	
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"i_rtrn_cd = :%d:",i_rtrn_cd);
		}

		if ( i_rtrn_cd !=	0	)
		{
			switch ( i_rtrn_cd )
			{
				case INSUFFICIENT_LIMITS  :
				
					fn_userlog(c_ServiceName,"Inside Modification INSUFFICIENT_LIMITS Case.");
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
					if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      		{
        		fn_upd_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      		}
					/*** Ver 3.9 Starts ***/
          c_actn_flg = 'M' ;
          i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
          if ( i_trnsctn == -1 )
          {
            fn_errlog( c_ServiceName, "S31315",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
					  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      		  {
        		  fn_upd_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      			}
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
            Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
            Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

          i_returncode =  fn_spn_ins_ffl_log_tbl  (  c_ServiceName,
                                                     st_o_ordbk,
                                                     c_err_msg.arr,
                                                     d_required_amount ,
                                                     c_actn_flg
                                                 );		/*** Datatype is converted to Varchar in Ver 7.5 ***/
          if ( i_returncode != 0 )
          {
            fn_errlog( c_ServiceName, "S31320", LIBMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
					  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      			{
        			fn_upd_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      			}
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
            Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
            Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/ 
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

          }


          if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )		/*** Datatype is converted to Varchar in Ver 7.5 ***/
          {
            fn_errlog( c_ServiceName, "S31325",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
					  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      		  {
        		  fn_upd_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      			}
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
            Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
            Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

          /*** Ver 3.9 Ends ***/
					fn_errlog( c_ServiceName, "S31330", LIBMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
				  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      		{
        		fn_upd_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      		}
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
          /*** Ver 2.5 Starts Here ****/
          c_modfyscrn_flg='Y';
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
          /*** Ver 2.5 Ends Here ****/
        	tpreturn(TPFAIL, INSUFFICIENT_LIMITS , (char *)ptr_fml_Ibuf, 0, 0 );
        	break;
			}

			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      }
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	} /*** if condition ends Ver 1.9 ***/

  strcpy( st_s_sequence.c_pipe_id, st_xchngbk.c_pipe_id );
  strcpy( st_s_sequence.c_trd_dt, st_xchngbk.c_mod_trd_dt );
  st_s_sequence.c_rqst_typ = GET_XCHNG_SEQ;


	i_returncode  = fn_get_fno_seq	(	c_ServiceName,
                                    &st_s_sequence,
                                    c_err_msg.arr
                                  );			/*** Datatype is converted to Varchar in Ver 7.5 ***/

  if ( i_returncode != 0  )
  {
    fn_errlog( c_ServiceName, "S31335", LIBMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    } 	
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	l_xchng_seq_num = st_s_sequence.l_seq_num;

  if ( ( st_xchngbk.c_ord_typ == GOOD_TILL_TODAY ) || ( st_xchngbk.c_ord_typ == IMMEDIATE_OR_CANCEL ) )
  {
    strcpy ( st_xchngbk.c_valid_dt, (char *)c_trd_dt.arr );
  }

  st_xchngbk.l_mdfctn_cntr = st_o_ordbk.l_mdfctn_cntr + 1;

	st_xchngbk.c_spl_flg = st_o_ordbk.c_spl_flg;

  st_xchngbk.l_ord_seq = l_xchng_seq_num;

  if ( st_o_ordbk.c_ordr_stts	== REQUESTED )
  {
    st_xchngbk.c_req_typ = NEW;
  }
  else
  {
    st_xchngbk.c_req_typ = MODIFY;
  }

  strcpy ( st_xchngbk.c_rqst_tm , (char *)c_sysdate.arr );
  st_xchngbk.c_ex_ordr_typ 	= ORDINARY_ORDER;
  st_xchngbk.c_plcd_stts 		= 'R'; /* Request Placed */
  st_xchngbk.c_spn_flg 			= 'S'; 
  st_xchngbk.c_oprn_typ 		= INSERTION_ON_ORDER_MODIFICATION;

  if( c_fum_mrkt_typ == EXTND_MRKT && c_fcm_mrkt_typ == EXTND_MRKT )
  {
    st_xchngbk.c_mkrt_typ = 'X';
  }
  else
  {
    st_xchngbk.c_mkrt_typ = 'N';
  }
	st_xchngbk.l_session_id=st_usrprfl.l_session_id; /** Ver 8.8 **/

  i_rtrn_xchngbk  = fn_spnupd_xchngbk  ( 	c_ServiceName,
                                      		&st_xchngbk,
                                      		c_err_msg.arr
                                    		);	/*** Datatype is converted to Varchar in Ver 7.5 ***/


  if ( i_rtrn_xchngbk	!= 0	)
  {
    fn_errlog( c_ServiceName, "S31340",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	st_i_ordbk.c_oprn_typ = UPDATE_MOD_CNTR;
	
	i_returncode  = fn_spnupd_ordrbook ( c_ServiceName,
                                    &st_i_ordbk,
                                    &st_err_msg
                                  );

  if ( i_returncode != SUCC_BFR )
  {
    fn_errlog( c_ServiceName, "S31345",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if ( ( st_o_ordbk.c_ordr_stts == REQUESTED )  || ( c_vtc_ord == 'Y' ) ) /*** Ver 4.6  ( c_vtc_ord == 'Y' ) added **/ 
  {
    st_o_ordbk.c_slm_flg 			= st_xchngbk. c_slm_flg;
    st_o_ordbk.l_dsclsd_qty 	= st_xchngbk.l_dsclsd_qty;
    st_o_ordbk.l_ord_tot_qty	= st_xchngbk.l_ord_tot_qty;
    st_o_ordbk.l_ord_lmt_rt 	= st_xchngbk.l_ord_lmt_rt;
    st_o_ordbk.l_stp_lss_tgr 	= st_xchngbk.l_stp_lss_tgr;
    st_o_ordbk.c_ord_typ 			= st_xchngbk.c_ord_typ;

    strcpy( st_o_ordbk.c_valid_dt , st_xchngbk.c_valid_dt);
    strcpy( st_o_ordbk.c_trd_dt , st_xchngbk.c_mod_trd_dt);

    if( c_vtc_ord != 'Y' )   /** Ver 4.8 *** If condition added ***/
    {
      strcpy( st_o_ordbk.c_ack_tm , "\0");
    }
    else  /** Ver 4.8 Starts Here ***/
    {
      if( st_o_ordbk.c_ordr_stts == REQUESTED )
      {
         strcpy( st_o_ordbk.c_ack_tm , "\0");
      }
      else
      {
         strcpy( st_o_ordbk.c_ack_tm , st_o_ordbk.c_prev_ack_tm);
      }
    }   /** Ver 4.8 Ends Here ***/ 

    st_o_ordbk.c_oprn_typ = UPDATE_ORDER_MODIFICATION;
		strcpy(st_o_ordbk.c_ordr_rfrnc,st_i_ordbk.c_ordr_rfrnc);


 		i_returncode  = fn_spnupd_ordrbook ( c_ServiceName,
                                      &st_o_ordbk,
                                      &st_err_msg
                                    );

    if ( i_returncode != SUCC_BFR )
    {
      fn_errlog( c_ServiceName, "S31350",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    	{
      	fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    	}
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    /*** Ver 4.6 Starts Here ***/
    if( c_vtc_ord == 'Y'  && st_o_ordbk.c_ordr_stts == ORDERED )    /*** Do not send the modification to exchnage ***/
    {

  /****DEBUG LVL Added in VQC****/
 if(DEBUG_MSG_LVL_3)
  {
      fn_userlog(c_ServiceName," st_xchngbk.c_ordr_rfrnc :%s:",st_xchngbk.c_ordr_rfrnc);
      fn_userlog(c_ServiceName," st_xchngbk.l_mdfctn_cntr :%ld:",st_xchngbk.l_mdfctn_cntr);
  }   
 
     EXEC SQL
        UPDATE FXB_FO_XCHNG_BOOK
     /***      SET FXB_PLCD_STTS ='A',
               FXB_RMS_PRCSD_FLG='P',
               FXB_XCHNG_RMRKS = 'MODIFIED BY CLIENT' ***commented in ver 6.3**/
					SET  FXB_PLCD_STTS=:c_fxb_plcd_stts,            /****Added in Ver 6.3****/ 
					     FXB_RMS_PRCSD_FLG=:c_fxb_rms_prcsd_flg,    /****Added in Ver 6.3****/ 
						   FXB_XCHNG_RMRKS=:c_fxb_xchng_rmrks        /****Added in Ver 6.3****/
         WHERE FXB_ORDR_RFRNC =:st_xchngbk.c_ordr_rfrnc
           AND FXB_MDFCTN_CNTR =:st_xchngbk.l_mdfctn_cntr;
      if ( SQLCODE != 0 )
      {
       fn_errlog( c_ServiceName, "S31355",SQLMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			 if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    	 {
      	 fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    	 }
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    /*** Ver 4.6 Ends Here ***/
  }

  /*** Ver 1.9 starts here ***/

  /*** if ( st_pstn_actn.c_prd_typ == SLTP_FUTUREPLUS ) Commented In Ver 3.5 ***/
  if ( st_pstn_actn.c_prd_typ == SLTP_FUTUREPLUS || st_pstn_actn.c_prd_typ == OPTIONPLUS ) /*** Ver 3.5 ***/
  {
	/*** Ver 4.7 starts here ***/
	/*if ( st_pstn_actn.c_prd_typ == SLTP_FUTUREPLUS)*/		/**commented in Ver 5.0****/
	/*{*/
	if((st_xchngbk.c_slm_flg != MARKET) && (st_o_ordbk.c_fc_flg == 'F'))
	{
   /***Ver 6.3 Hard Parse Changes***/
		EXEC SQL
		SELECT NVL(FUM_SLTPFP_LMT_ALLWD_FLG ,'N') INTO :c_sltpfp_lmt_allwd_flg FROM FUM_FO_UNDRLYNG_MSTR WHERE FUM_UNDRLYNG = :st_cntrct.c_undrlyng AND FUM_PRDCT_TYP = DECODE(:st_pstn_actn.c_prd_typ,'U','F','I','O',:st_pstn_actn.c_prd_typ);
		if(SQLCODE != 0)
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    	{
      	fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    	}
				fn_errlog( c_ServiceName, "S31360", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if(c_sltpfp_lmt_allwd_flg == 'N')
		{
			fn_userlog(c_ServiceName, "******Only modification to market is allowed for the stock. Please select market as order type to modify your order.*********");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    	{
      	fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    	}
			fn_errlog( c_ServiceName, "B23104", DEFMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amount, 0);  
			Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);   
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );		
		}

	}

	/***	EXEC SQL
		select FOD_UNDRLYNG into :c_undrlyng from FOD_FO_ORDR_DTLS where FOD_ORDR_RFRNC = :st_xchngbk.c_ordr_rfrnc;
		if(SQLCODE != 0)
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr);
			fn_errlog( c_ServiceName, "S31365", SQLMSG, c_err_msg.arr ); 
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}***/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"st_cntrct.c_undrlyng = :%s:",st_cntrct.c_undrlyng);
	}

	if(st_o_ordbk.c_fc_flg == 'F')
	{	
    
    /***Ver 6.3 Hard Parse Changes***/
   EXEC SQL
		  SELECT
				FOD_SLTP_ORDR_RFRNC,
				FOD_ORDR_STTS
		  INTO
			  :c_sltp_ordr_refrnc,
			  :c_frsh_ordr_stts
		  FROM FOD_FO_ORDR_DTLS
		  WHERE FOD_ORDR_RFRNC = :st_o_ordbk.c_ordr_rfrnc;

		if(SQLCODE != 0)
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    	{
      	fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    	}
				fn_errlog( c_ServiceName, "S31370", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

    /***Ver 6.3 Hard Parse Changes***/
		 EXEC SQL
		  SELECT
				FOD_ORDR_STTS
		  INTO
			  :c_cvr_ordr_stts
		  FROM FOD_FO_ORDR_DTLS
		  WHERE      FOD_ORDR_RFRNC    = :c_sltp_ordr_refrnc;

		if(SQLCODE != 0)
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    	{
      	fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    	}	
				fn_errlog( c_ServiceName, "S31375", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
	else if(st_o_ordbk.c_fc_flg == 'C')
	{
    /***Ver 6.3 Hard Parse Changes***/
		EXEC SQL
		  SELECT
				FOD_SLTP_ORDR_RFRNC,
				FOD_ORDR_STTS
		  INTO
			  :c_sltp_ordr_refrnc,
			  :c_cvr_ordr_stts
		  FROM FOD_FO_ORDR_DTLS
		  WHERE FOD_ORDR_RFRNC = :st_o_ordbk.c_ordr_rfrnc;

		if(SQLCODE != 0)
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    	{
      	fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    	}
				fn_errlog( c_ServiceName, "S31380", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   
			Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
 
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
    /***Ver 6.3 Hard Parse Changes***/
		 EXEC SQL
		  SELECT
				FOD_ORDR_STTS
		  INTO
			  :c_frsh_ordr_stts
		  FROM FOD_FO_ORDR_DTLS
		  WHERE      FOD_ORDR_RFRNC    = :c_sltp_ordr_refrnc;
		if(SQLCODE != 0)
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				fn_errlog( c_ServiceName, "S31385", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    	{
      	fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    	}
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   
			Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
 
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		/*** Ver 8.1 starts ***/
		if ( st_pstn_actn.c_prd_typ == SLTP_FUTUREPLUS && st_xchngbk.c_slm_flg == MARKET )
		{
	    EXEC SQL
      	select  FOD_ORDR_STTS
      	INTO :c_prft_pend
      	from FOD_FO_ORDR_DTLS
      	where
      	FOD_FC_FLAG= 'T'
      	and FOD_ORDR_STTS in ('R','Q','P','O')
      	and DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_sltp_ordr_refrnc;

     	if( (SQLCODE !=0) && (SQLCODE !=NO_DATA_FOUND) )
     	{
	      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); 
        fn_errlog( c_ServiceName, "S31390", SQLMSG, c_err_msg.arr );  
      	if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     
      	{
        	fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       
      	}
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      	Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
  	    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);

      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
       
		  if ( c_prft_pend == 'Q')
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr);
        fn_errlog( c_ServiceName, "S31395", SQLMSG, c_err_msg.arr );
        if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )
        {
          fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);
        }
				strcpy(c_err_msg.arr,"Request cannot be placed as other order request is under process");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );				
			}
			else  if ( c_prft_pend != 'N')
			{
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr);
        fn_errlog( c_ServiceName, "S31400", SQLMSG, c_err_msg.arr );
        if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )
        {
          fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);
        }
				strcpy(c_err_msg.arr,"Conversion to market not allowed. Pls cancel the profit order");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );		
			}
		}
		/*** Ver 8.1 ends ***/
	}
	/*** Ver 8.1 starts ***/
	else if(st_pstn_actn.c_prd_typ == SLTP_FUTUREPLUS && st_o_ordbk.c_fc_flg == 'T')
  {
    EXEC SQL
      SELECT
        FOD_SLTP_ORDR_RFRNC,
        FOD_ORDR_STTS
      INTO
        :c_sltp_ordr_refrnc,
        :c_cvr_ordr_stts
      FROM FOD_FO_ORDR_DTLS
      WHERE FOD_ORDR_RFRNC = :st_o_ordbk.c_ordr_rfrnc;

    if(SQLCODE != 0)
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); 
      if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )    
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       
      }
        fn_errlog( c_ServiceName, "S31405", SQLMSG, c_err_msg.arr );  
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);

      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		
		if(c_cvr_ordr_stts != 'O')
		{
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr);
      if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);
      }
			strcpy(c_err_msg.arr,"Modification of Profit order is only allowed in ordered state");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }	

		EXEC SQL
     select
     FOD_STP_LSS_TGR
     INTO    :l_stp_loss_trgr
     from FOD_FO_ORDR_DTLS
     where FOD_FC_FLAG = 'C'
     AND   FOD_LMT_MRKT_SL_FLG = 'S'
     AND   FOD_ORDR_STTS='O'
     AND   DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_sltp_ordr_refrnc;

		if(SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
		{
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr);
      if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);
      }
      fn_errlog( c_ServiceName, "S31410", SQLMSG, c_err_msg.arr );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	 }
	 /*** Ver 8.1 ends ***/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"st_o_ordbk.c_fc_flg: %c ~ c_lmt_mrkt_flg : %c ~  c_frsh_ordr_stts : %c ",st_o_ordbk.c_fc_flg, c_lmt_mrkt_flg, c_frsh_ordr_stts); /*** Ver 8.1 changed from c_fc_flag to st_o_ordbk.c_fc_flg ***/
	}

	if(st_o_ordbk.c_fc_flg == 'C' && c_lmt_mrkt_flg == 'M' && !(c_frsh_ordr_stts == EXECUTED)) /*** Ver 8.1 changed from c_fc_flag to st_o_ordbk.c_fc_flg ***/
	{
		fn_userlog(c_ServiceName, "******Modification of cover limit order to market is not allowed. Please check order status.*********");
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
		fn_errlog( c_ServiceName, "B23103", DEFMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   
		Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
 
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );		
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"st_o_ordbk.c_fc_flg: %c ~ c_sltpfp_lmt_allwd_flg : %c ~ c_frsh_ordr_stts : %c ~ c_cvr_ordr_stts : %c ~ c_lmt_mrkt_flg : %c ",st_o_ordbk.c_fc_flg, c_sltpfp_lmt_allwd_flg, c_frsh_ordr_stts, c_cvr_ordr_stts, c_lmt_mrkt_flg); /*** Ver 8.1 changed from c_fc_flag to st_o_ordbk.c_fc_flg ***/
	}

 if ( st_o_ordbk.c_fc_flg != 'T') /*** Skip Profit order in Ver 8.1 ***/
 {
	if(	!((c_frsh_ordr_stts == ORDERED && c_cvr_ordr_stts == ORDERED) ||
	   (c_frsh_ordr_stts == EXECUTED && c_cvr_ordr_stts == ORDERED) ||
	   (c_frsh_ordr_stts == EXECUTED && c_cvr_ordr_stts == PARTIALLY_EXECUTED)||
	   (c_frsh_ordr_stts == PARTIALLY_EXECUTED && c_cvr_ordr_stts == ORDERED)) )
	{
		fn_userlog(c_ServiceName, "******Modification of order is not allowed. Please check order status.*********");
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
		fn_errlog( c_ServiceName, "B23103", DEFMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amount, 0);  
		Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );		
	}
 }
	/**}**/			/**commented in Ver 5.0****/
	/*** Ver 4.7  Ends   ***/

    /** Get Cover order reference & fresh order status from FRESH order. **/
      /***Ver 6.3 Hard Parse Changes***/
    EXEC SQL
      SELECT
            FOD_SLTP_ORDR_RFRNC,
            FOD_ORDR_STTS,
            NVL(FOD_AMT_BLCKD,0),
            NVL(FOD_LSS_AMT_BLCKD,0),
            NVL(FOD_FC_FLAG,'*')/*,
            NVL(FOD_DIFF_AMT_BLCKD,0),
            NVL(FOD_DIFF_LSS_AMT_BLCKD,0) Commented In VQC	***/
      INTO
          :c_sltp_ordr_refrnc,
          :c_frsh_ordr_stts,
          :d_amt_blkd,
          :d_lss_amt_blkd,
          :c_fc_flg/*,
          :d_diff_amt_blckd,
          :d_diff_lss_amt_blckd			Commented In VQC  ***/
      FROM FOD_FO_ORDR_DTLS
      WHERE FOD_ORDR_RFRNC = :st_o_ordbk.c_ordr_rfrnc;

    if( SQLCODE != 0 )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    		{
      		fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    		}
        fn_errlog( c_ServiceName, "S31415", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }


	if(DEBUG_MSG_LVL_3)
	{	
		fn_userlog(c_ServiceName,"Match Account   :%s:",st_o_ordbk.c_cln_mtch_accnt);
		fn_userlog(c_ServiceName,"Fresh order reference :%s:",c_sltp_ordr_refrnc);
		fn_userlog(c_ServiceName,"order status  :%c:", c_frsh_ordr_stts);
		fn_userlog(c_ServiceName,"Modification Counter   :%ld:",st_o_ordbk.l_mdfctn_cntr);
		fn_userlog(c_ServiceName,"amt_blckd   :%lf:",d_amt_blkd);
		fn_userlog(c_ServiceName,"lss_amt_blckd  :%lf:",d_lss_amt_blkd);
		/*fn_userlog(c_ServiceName,"diff_amt_blckd  :%lf:",d_diff_amt_blckd);
		fn_userlog(c_ServiceName,"diff_lss_amt_blckd  :%lf:",d_diff_lss_amt_blckd);			Commented In VQC	***/
	}	 

    if(c_fc_flg == 'C') /*Cover*/
    {
      d_amt_blkd = 0;
      d_lss_amt_blkd = 0;

      EXEC SQL
         SELECT     FOD_AMT_BLCKD,
                    FOD_LSS_AMT_BLCKD,
                    FOD_ORDR_FLW
         INTO       :d_amt_blkd,
                    :d_lss_amt_blkd,
                    :c_ord_flw
         FROM       FOD_FO_ORDR_DTLS
         WHERE      FOD_ORDR_RFRNC = :c_sltp_ordr_refrnc;

      if(SQLCODE != 0)
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    		{
      		fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    		}
        fn_errlog( c_ServiceName, "S31420", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Margin Amount of the fresh order :%lf:", d_amt_blkd);
        fn_userlog(c_ServiceName,"Loss Amount of the fresh order :%lf:", d_lss_amt_blkd);
      }
    }
    /*Get the current margin percentage and sltp % diff. from the database */
    EXEC SQL
      SELECT NVL(FMM_SLTP_DIFF_PRCNT,0),
             /*NVL(FMM_SLTP_PRCNT,0),			Commented In VQC	***/
             ABS(:st_xchngbk.l_stp_lss_tgr - :st_xchngbk.l_ord_lmt_rt),
						 nvl(FMM_SLTP_PRFT_DIFF_PRCNT,0), /*** Ver 8.1 ***/
						 abs(:l_stp_loss_trgr - :st_xchngbk.l_ord_lmt_rt) /*** Ver 8.1 ***/
      INTO   :d_fmm_sltp_diff_prcnt,
             /*:d_fmm_sltp_prcnt,			Commented In VQC  ***/
             :l_amt,
             :d_fmm_prft_diff_prcnt, /*** Ver 8.1 ***/
             :l_prft_amt /*** Ver 8.1 ***/
      FROM   FMM_FO_MRGN_MSTR
      /*** WHERE  FMM_PRDCT_TYP= 'F' Commented In Ver 3.5 ***/
      WHERE  FMM_PRDCT_TYP= DECODE (:st_o_ordbk.c_prd_typ,'U','F','O') /* Ver 3.5 This applicable only for prod 'U' & 'I'*/  
      AND    FMM_UNDRLYNG = :st_o_ordbk.c_undrlyng
      AND    FMM_XCHNG_CD = :st_o_ordbk.c_xchng_cd
      AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
                             FROM    FCB_FO_CLN_BSKT_ALLTD
                             WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                                   FROM    CLM_CLNT_MSTR
                                                   WHERE   CLM_MTCH_ACCNT = :st_usrprfl.c_cln_mtch_accnt));

    if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_userlog(c_ServiceName,"******Invalid Stock Code*******");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    	{
      	fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    	}
      fn_errlog( c_ServiceName, "S31425", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    else if(SQLCODE != 0)
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    	{
      	fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    	}
      fn_errlog( c_ServiceName, "S31430", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if(DEBUG_MSG_LVL_3)
    {
      /*fn_userlog(c_ServiceName,"SLTP Percentage   :%lf:", d_fmm_sltp_prcnt);			Commented In VQC	***/
      fn_userlog(c_ServiceName,"SLTP diff. Percentage   :%lf:", d_fmm_sltp_diff_prcnt);
      fn_userlog(c_ServiceName,"st_xchngbk.l_stp_lss_tgr  :%ld:", st_xchngbk.l_stp_lss_tgr);
      fn_userlog(c_ServiceName,"st_xchngbk.l_ord_lmt_rt   :%ld:", st_xchngbk.l_ord_lmt_rt);
      fn_userlog(c_ServiceName,"l_amt   :%ld:", l_amt);
    }

		if ( st_pstn_actn.c_prd_typ == SLTP_FUTUREPLUS ) /*** Ver 3.5 if condition added ***/
    {
			/*** Ver 8.1 start ***/
    	if ( c_fc_flg  == 'T' )
    	{
      	if((( l_stp_loss_trgr * d_fmm_prft_diff_prcnt )/100)>  l_prft_amt )
      	{
    			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
      		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      		{
        		fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      		}
      		strcpy(c_err_msg.arr,"Limit and trigger price difference of profit order is less than the defined value");
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
      		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
      		Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      		Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}
			/*** Ver 8.1 ends ***/
    	if ( c_temp_slm_flg == 'S' )
    	{
      	if(((st_xchngbk.l_stp_lss_tgr * d_fmm_sltp_diff_prcnt)/100)> l_amt)
        {
          fn_errlog( c_ServiceName, "S31435","Limit and trigger price difference of cover order is less than the defined value",c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
          strcpy(c_err_msg.arr,"Limit and trigger price difference of cover order is less than the defined value");
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
					if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    			{
      			fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    			}
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
    	}
		}
		else if ( st_pstn_actn.c_prd_typ == OPTIONPLUS && c_temp_slm_flg == 'S' )   /*** Ver 3.5 ***/
    {
			/*** check if the input limit rate is valid ***/

   		c_rqst_typ = 'S';

   		if(DEBUG_MSG_LVL_3)
   		{
     		fn_userlog(c_ServiceName,"st_usrprfl.c_user_id:%s:",st_usrprfl.c_user_id);
     		fn_userlog(c_ServiceName,"st_usrprfl.l_session_id :%ld:",st_usrprfl.l_session_id);
     		fn_userlog(c_ServiceName,"st_xchngbk.c_xchng_cd :%s:",st_xchngbk.c_xchng_cd);
     		fn_userlog(c_ServiceName,"st_xchngbk.c_ordr_flw :%c:",st_xchngbk.c_ordr_flw);
     		fn_userlog(c_ServiceName,"st_o_ordbk.c_undrlyng :%s:",st_o_ordbk.c_undrlyng);
     		fn_userlog(c_ServiceName,"st_usrprfl.c_cln_mtch_accnt :%s:",st_usrprfl.c_cln_mtch_accnt);
     		fn_userlog(c_ServiceName,"c_rqst_typ :%c:",c_rqst_typ);
     		fn_userlog(c_ServiceName,"st_o_ordbk.c_prd_typ :%c:",st_o_ordbk.c_prd_typ);
     		fn_userlog(c_ServiceName,"st_o_ordbk.c_opt_typ :%c:",st_o_ordbk.c_opt_typ);
     		fn_userlog(c_ServiceName,"st_o_ordbk.l_strike_prc :%ld:",st_o_ordbk.l_strike_prc);
     		fn_userlog(c_ServiceName,"st_xchngbk.l_stp_lss_tgr :%ld:",st_xchngbk.l_stp_lss_tgr);
     		fn_userlog(c_ServiceName,"st_o_ordbk.c_expry_dt :%s:",st_o_ordbk.c_expry_dt);
     		fn_userlog(c_ServiceName,"st_xchngbk.l_ord_lmt_rt :%ld:",st_xchngbk.l_ord_lmt_rt);

   		}
		
      c_source_flg = 'M'; /*** Ver 4.4 Call from Modification ***/
	
			i_returncode  = fn_call_svc_fml ( c_ServiceName,
                                       c_err_msg.arr,			/*** Datatype is converted to Varchar in Ver 7.5 ***/
                                       "SFO_LMT_PRC_CAL",
                                       0,
                                       14,  /*** Ver 4.4 changed from 12 to 13 ***Changed from 13 to 14 in Ver 5.0***/
                                       1,
                                       FFO_USR_ID                 , (char *)st_usrprfl.c_user_id,
                                       FFO_SSSN_ID                , (char *)&st_usrprfl.l_session_id,
                                       FFO_XCHNG_CD               , (char *)st_xchngbk.c_xchng_cd,
                                       FFO_ORDR_FLW               , (char *)&st_xchngbk.c_ordr_flw,
                                       FFO_UNDRLYNG               , (char *)st_o_ordbk.c_undrlyng,
                                       FFO_EBA_MTCH_ACT_NO        , (char *)st_usrprfl.c_cln_mtch_accnt ,
                                       FFO_RQST_TYP               , (char *)&c_rqst_typ ,
                                       FFO_PRDCT_TYP              , (char *)&st_o_ordbk.c_prd_typ,
                                       FFO_OPT_TYP                , (char *)&st_o_ordbk.c_opt_typ ,
                                       FFO_STRK_PRC               , (char *)&st_o_ordbk.l_strike_prc ,
                                       FFO_STP_LSS_TGR            , (char *)&st_xchngbk.l_stp_lss_tgr,
                                       FFO_EXPRY_DT               , (char *)st_o_ordbk.c_expry_dt ,
                                       FFO_SOURCE_FLG             , (char *)&c_source_flg ,   /*** Ver 4.4 ***/
																		 FFO_ORDR_RFRNC							,	(char *)&st_xchngbk.c_ordr_rfrnc, /*** Ver 5.0 ***/ 	 
                                       FFO_LMT_RT                 , (char *)&l_ret_limit_rt ,NULL
                                    );

   		if ( i_returncode != 0 )
   		{
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
      	fn_errlog( c_ServiceName, "S31440", LIBMSG, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    		{
      		fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    		}
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
      	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
       	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   		}

   		if( st_xchngbk.c_ordr_flw == 'S' )
   		{
      	if ( st_xchngbk.l_ord_lmt_rt > l_ret_limit_rt )
      	{
        	fn_errlog( c_ServiceName, "S31445","Limit and trigger price difference of cover order is less than the defined value",c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
          strcpy(c_err_msg.arr,"Limit and trigger price difference of cover order is less than the defined value");
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
					if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    			{
      			fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    			}
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}

   		}
   		else if ( st_xchngbk.c_ordr_flw == 'B' )
   		{
      	if ( st_xchngbk.l_ord_lmt_rt < l_ret_limit_rt )
      	{
        	fn_errlog( c_ServiceName, "S31450","Limit and trigger price difference of cover order is less than the defined value",c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
          strcpy(c_err_msg.arr,"Limit and trigger price difference of cover order is less than the defined value");
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    			{
      			fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    			}
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
   		}
				
		}

    /** Getting the total executed value and quantity of FRESH order. **/
    EXEC SQL
      SELECT  NVL(SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),0),
              NVL(SUM(FTD_EXCTD_QTY),0)
      INTO    :d_frsh_exe_val,
              :li_tot_exec_qty
      FROM    FTD_FO_TRD_DTLS
      WHERE   FTD_ORDR_RFRNC = :c_sltp_ordr_refrnc;

    if( SQLCODE != 0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
      fn_errlog( c_ServiceName, "S31455", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    	{
      	fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    	}
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

   /*** Ver 8.1 starts ***/
		if ( st_pstn_actn.c_prd_typ == SLTP_FUTUREPLUS && c_fc_flg == 'T')
		{
    d_avg_prc  = (double) (d_frsh_exe_val / li_tot_exec_qty);

    fn_userlog( c_ServiceName, "st_xchngbk.c_ordr_flw:%c: AVG :%lf:",st_xchngbk.c_ordr_flw,d_avg_prc);

    /** Profit Limit Price cannot be less than Fresh Order Price In case of Fresh Buy Order **/
    if( st_xchngbk.c_ordr_flw == 'S' && ( st_xchngbk.l_ord_lmt_rt < d_avg_prc ))
    {
      fn_userlog( c_ServiceName, "Profit Limit Price cannot be less than Fresh Order Price BUY");
      strcpy(c_err_msg.arr,"Profit Limit Price cannot be less than Fresh Order Price");
    	      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
      fn_errlog( c_ServiceName, "S31460", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
      if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      }
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
    if( st_xchngbk.c_ordr_flw == 'B' && ( st_xchngbk.l_ord_lmt_rt > d_avg_prc))
    {
      fn_userlog( c_ServiceName, "Profit Limit Price cannot be greater than Fresh Order Price SELL");
      strcpy(c_err_msg.arr,"Profit Limit Price cannot be greater than Fresh Order Price");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
      fn_errlog( c_ServiceName, "S31465", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
      if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      }
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		}
    /*** Ver 8.1 ends ***/

    /*** Ver 3.6 Starts ***/
    EXEC SQL
      SELECT  NVL((FOD_ORDR_TOT_QTY - (FOD_CNCL_QTY + FOD_EXPRD_QTY)),0)
      INTO    :l_tot_ord_qty
      FROM    FOD_FO_ORDR_DTLS
      WHERE   FOD_ORDR_RFRNC = :c_sltp_ordr_refrnc;


    if( SQLCODE != 0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
      fn_errlog( c_ServiceName, "S31470", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    	{
      	fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    	}
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"li_tot_exec_qty = :%ld:", li_tot_exec_qty);
      fn_userlog(c_ServiceName,"l_tot_ord_qty   = :%ld:", l_tot_ord_qty );
    }

    /*** Ver 3.6 Ends ***/

	/*if((c_usr_flg != 'W') && st_o_ordbk.c_prd_typ == SLTP_FUTUREPLUS) || st_o_ordbk.c_prd_typ == OPTIONPLUS)*/	/*** Ver 4.7 ***/  /***Commented in Ver 5.0 ***/
	if((c_usr_flg != 'W') && (st_o_ordbk.c_prd_typ == SLTP_FUTUREPLUS || st_o_ordbk.c_prd_typ == OPTIONPLUS))	/***Ver 5.0 ***/
	{
		/** Checking if Fresh order value & quantity is equals to zero. */
		if (d_frsh_exe_val == 0 || li_tot_exec_qty == 0 || (l_tot_ord_qty != li_tot_exec_qty))
															  /*** Ver 3.6 check added for part-executed fresh order ***/
		{
		  fn_userlog(c_ServiceName, "******Fresh order is not yet executed.*********");
		  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    	{
      	fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    	}
		  fn_errlog( c_ServiceName, "B23007", DEFMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
		  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
		  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
		  Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}

    if (c_fc_flg == 'C')
    {
      /*Check if the limit price and the trigger price of the cover order are in multiples of 5 paise*/

      if( (fn_5paisa(st_xchngbk.l_ord_lmt_rt)!= 0) &&
          (fn_5paisa(st_xchngbk.l_stp_lss_tgr)!= 0))
        {
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
          fn_errlog( c_ServiceName, "S31475","limit price and the trigger price of the cover order must be in multiples of paise ",c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
        	if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    			{
      			fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    			}
				  strcpy(c_err_msg.arr,"limit price and the trigger price of the cover order must be in multiples of paise ");
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/ 
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

      /** Calculating the Weight Average Price for the executed quantity of FRESH Order. **/
      /**d_wgt_avrg_price = (double) (d_frsh_exe_val / li_tot_exec_qty);	Commented In VQC	***/


      /* Calculate open quantity */

			/***	Commented In VQC

      EXEC SQL
        SELECT  NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FTD_EXCTD_QTY,
                                                         FTD_EXCTD_QTY ) ), 0 ),
                NVL( SUM( DECODE( FOD_FC_FLAG, 'F', FTD_EXCTD_QTY, 0 ) ), 0 )
        INTO    :l_open_qty,
                :l_frsh_xtd_qty
        FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
        WHERE   FOD_CLM_MTCH_ACCNT    = :st_o_ordbk.c_cln_mtch_accnt
        AND     FOD_TRD_DT            = :st_o_ordbk.c_trd_dt
        AND     FOD_PRDCT_TYP         = :st_o_ordbk.c_prd_typ
        AND     FTD_ORDR_RFRNC        = FOD_ORDR_RFRNC
        AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_sltp_ordr_refrnc;

      if( SQLCODE != 0 )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); 
        fn_errlog( c_ServiceName, "S31480", SQLMSG, c_err_msg.arr );
			  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     ** Ver 5.8 **
    		{
      	 	fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       ** Ver 5.8 **
    		}
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  *** Ver 2.4 ***
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    *** Ver 4.5 ***
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  *** Ver 4.5 ***
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if(l_open_qty <0 )
      {
        l_open_qty=0;
      }

			****************************************/

			/*** Ver 3.5 Starts ***/
      /**** Getting the min margin difference ****/

			/***	Commented In VQC 

			if (st_pstn_actn.c_prd_typ == OPTIONPLUS )
			{

      	EXEC SQL
       		SELECT NVL(FRM_DIFFRNC_MRGN,0)
       		INTO   :d_frm_diffrnc_mrgn
       		FROM   FRM_FO_RANGE_MSTR
       		WHERE  FRM_XCHNG_CD  			 = TRIM(:st_o_ordbk.c_xchng_cd)
       		AND    TRIM(FRM_UNDRLYNG)  = TRIM(:st_o_ordbk.c_undrlyng)
       		AND    FRM_ORDR_FLOW = :c_ord_flw											*** Fresh order flow ***
					AND    FRM_FROM_RANGE <= :l_temp_stp_lss_tgr
				  AND    :l_temp_stp_lss_tgr   < FRM_TO_RANGE
					AND    (:l_temp_stp_lss_tgr > 0 ) ; *** Modified SLTP price used ***

      	if ( SQLCODE  !=  0  && SQLCODE != NO_DATA_FOUND)
      	{
       		fn_errlog( c_ServiceName, "S31485",SQLMSG,c_err_msg.arr); 
       		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); 
				  if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     ** Ver 5.8 **
    			{
      			fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                      ** Ver 5.8 **
    		  }
       		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
    			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  *** Ver 2.4 ***
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    *** Ver 4.5 ***
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  *** Ver 4.5 ***
       		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
			}
				VQC Comment Ends *********************/	
      /*** Ver 3.5 Ends ***/	


      /* Calculate Margin amount to be blocked */
	  /**commented in Ver 5.0 Start****/
	  /*if (st_pstn_actn.c_prd_typ == OPTIONPLUS )**/		 /*** Ver 4.7 ***/
	  /*{
		d_amt_to_be_blckd = ((double)(l_open_qty * d_wgt_avrg_price) * d_fmm_sltp_prcnt / 100.0);
	  }*/

      /* Calculate Loss amount to be blocked */
      /*if ( c_ord_flw == BUY && st_pstn_actn.c_prd_typ == OPTIONPLUS )*/ /*** Ver 3.5 ***/
      /*{
				if( d_frm_diffrnc_mrgn < 100 && d_frm_diffrnc_mrgn != -1 )
        {
        	d_lss_amt_to_be_blckd =(l_open_qty * (d_wgt_avrg_price - st_xchngbk.l_ord_lmt_rt ) );
				}
				else if ( d_frm_diffrnc_mrgn == 100 )
        {
        	d_lss_amt_to_be_blckd =(l_open_qty * (d_wgt_avrg_price ) );
        }
        else if( d_frm_diffrnc_mrgn == -1 )
        {
          fn_userlog(c_ServiceName,"Entered SLTP is OutOff Range");
          fn_errlog( c_ServiceName, "S31490","Please Enter SLTP in Proper Range",c_err_msg.arr); 
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr);
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
    			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 ); */ /*** Ver 2.4 ***/
          /*Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);  */  /*** Ver 4.5 ***/
          /*Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); */ /*** Ver 4.5 ***/
          /*tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }*/

	  /*** Ver 4.7 starts here ***/
      /*else if ( c_ord_flw == BUY && st_pstn_actn.c_prd_typ == SLTP_FUTUREPLUS )*/ /*** Ver 3.5 Product Condition Addded ***/
      /*{
        	d_lss_amt_to_be_blckd =(l_open_qty * (d_wgt_avrg_price - st_xchngbk.l_ord_lmt_rt ) );
      }*/
      /*else if ( c_ord_flw == SELL && st_pstn_actn.c_prd_typ == OPTIONPLUS)
      {
       	d_lss_amt_to_be_blckd =(l_open_qty * (d_wgt_avrg_price - st_xchngbk.l_ord_lmt_rt ) * -1 );
	  }*/
	  /*else if (st_pstn_actn.c_prd_typ == SLTP_FUTUREPLUS )*/		/**commented in Ver 5.0 End****/
	  if (st_pstn_actn.c_prd_typ == SLTP_FUTUREPLUS  || st_pstn_actn.c_prd_typ == OPTIONPLUS)
	  {
		   /***Ver 6.3 Hard Parse Changes***/
		EXEC SQL
		  SELECT
				FOD_FC_FLAG
		 INTO
			  :c_fc_flag
		  FROM FOD_FO_ORDR_DTLS
		  WHERE FOD_ORDR_RFRNC = :st_o_ordbk.c_ordr_rfrnc;
		if(SQLCODE != 0)
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
      {
        fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
      }
			fn_errlog( c_ServiceName, "S31495", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   
			Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~Total Quntity B4 fn_cal_mrgn_sltp :%d ~~~~~~~~~~~~~~~ ",l_tot_ord_qty);
		}
		
		  if(c_fc_flag == 'C')
		  {
			/*EXEC SQL
			  SELECT
					fod_lmt_rt
			  INTO
				  :l_fsh_ord_lmt_rt
			  FROM FOD_FO_ORDR_DTLS
			  WHERE FOD_ORDR_RFRNC = :c_sltp_ordr_refrnc;
				if(SQLCODE != 0)
				{
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); 
					fn_errlog( c_ServiceName, "S31500", SQLMSG, c_err_msg.arr );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}*/

  /*****Ver 6.3 Hard Parse Changes****/
			EXEC SQL
			  SELECT
					FXB_LMT_RT
			  INTO
				  :l_fsh_ord_lmt_rt
			  FROM FXB_FO_XCHNG_BOOK
			  WHERE FXB_ORDR_RFRNC = :c_sltp_ordr_refrnc
			  AND FXB_MDFCTN_CNTR = (SELECT MAX(FXB_MDFCTN_CNTR) FROM FXB_FO_XCHNG_BOOK
			  WHERE FXB_ORDR_RFRNC = :c_sltp_ordr_refrnc);

			if(SQLCODE != 0)
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				fn_errlog( c_ServiceName, "S31505", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
        {
          fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
        }
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   
				Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			/** Ver 5.0 Starts ****/
			if (st_pstn_actn.c_prd_typ == SLTP_FUTUREPLUS)
			{
			 i_returncode =  fn_cal_mrgn_sltp (c_ServiceName,
												c_sltp_ordr_refrnc,
												l_fsh_ord_lmt_rt, 
												st_xchngbk.l_ord_lmt_rt,
												&d_amt_to_be_blckd,
												&d_lss_amt_to_be_blckd,
                        c_ref_rmrks,  /*** Ver 7.4 ***/
                        &d_comp1_mrgn,/*** Ver 7.4 ***/
                        &d_comp1_pl,  /*** Ver 7.4 ***/
                        &d_xchng_amt, /*** Ver 7.4 ***/
												c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			  if ( i_returncode != SUCC_BFR )
			  {
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
        {
          fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
        }
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		
				Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amount, 0);  
				Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);   
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			  }
			}
			else if(st_pstn_actn.c_prd_typ == OPTIONPLUS)
			{
			  i_returncode =  fn_cal_mrgn_sltp_op ( c_ServiceName,
													c_sltp_ordr_refrnc,
													l_fsh_ord_lmt_rt, 
													st_xchngbk.l_ord_lmt_rt,
													&d_amt_to_be_blckd,
													&d_lss_amt_to_be_blckd,
                          c_ref_rmrks,  /*** Ver 7.8 ***/
                          &d_comp1_mrgn,/*** Ver 7.8 ***/
                          &d_comp1_pl,  /*** Ver 7.8 ***/
                          &d_xchng_amt, /*** Ver 7.8 ***/
                          &d_prem_amt,  /*** Ver 7.8 ***/
                          &d_spn_mrgn,  /*** Ver 7.8 ***/
                          &d_expr_mrgn, /*** Ver 7.8 ***/
													'U',
													c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
			  if ( i_returncode == -1 )
			  {
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
        {
          fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
        }
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			  }
			  else if( i_returncode == -2 )
			  {
				fn_userlog(c_ServiceName,"Entered SLTP is OutOff Range");
				fn_errlog( c_ServiceName, "S31510","Please Enter SLTP in Proper Range",c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
        {
          fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
        }
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);   
				Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0); 
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			  }
			}
			/** Ver 5.0 Ends****/
		  }
	  }
	  /*** Ver 4.7 ends here ***/

      /* Difference margin & loss */
      d_diff_amt = (double) d_amt_blkd - d_amt_to_be_blckd;
      d_diff_loss = (double) d_lss_amt_blkd - d_lss_amt_to_be_blckd;

			if ( st_pstn_actn.c_prd_typ == OPTIONPLUS )
			{
				d_diff_amt = (long) (long) d_diff_amt;
				d_diff_loss = (long) (long) d_diff_loss;
			}

       if(DEBUG_MSG_LVL_3)
      {
        /*fn_userlog(c_ServiceName,"l_temp_stp_lss_tgr = :%ld:", l_temp_stp_lss_tgr );  *** Ver 3.5 ***
        fn_userlog(c_ServiceName,"d_frm_diffrnc_mrgn = :%lf:", d_frm_diffrnc_mrgn); Commented In VQC ***/  /*** Ver 3.5 ***/
        fn_userlog(c_ServiceName,"d_amt_blkd = :%lf:", d_amt_blkd);
        fn_userlog(c_ServiceName,"d_amt_to_be_blckd = :%lf:", d_amt_to_be_blckd);
        fn_userlog(c_ServiceName,"d_diff_amt = :%lf:", d_diff_amt);

        fn_userlog(c_ServiceName,"d_lss_amt_blkd = :%lf:", d_lss_amt_blkd);
        fn_userlog(c_ServiceName,"d_lss_amt_to_be_blckd = :%lf:", d_lss_amt_to_be_blckd);
        fn_userlog(c_ServiceName,"d_diff_loss = :%lf:", d_diff_loss);
      }

      /* Not releasing the profit */
        /* Block difference in the margin amount */
        strcpy( c_narration_id , ON_MODIFICATION_PLACEMENT);

        c_modfyscrn_flg='N';  /*** Ver 2.5 ****/

        /*** if( d_diff_amt != 0)   *** Commented in Ver 4.7 ***/ 
				if( (st_pstn_actn.c_prd_typ == OPTIONPLUS && d_diff_amt < 0) || (st_pstn_actn.c_prd_typ == SLTP_FUTUREPLUS && d_diff_amt < 0)  )  /*** Added in Ver 4.7 ***/ /*** Added in Ver 5.0 for OPTIONPLUS***/
        {
          d_balance_amt = 0.0;

          if(DEBUG_MSG_LVL_3)
          {
            fn_userlog(c_ServiceName,"Block diff in margin amount");
          }
          i_returncode = fn_upd_spnlimits( c_ServiceName,
                            &st_pstn_actn,
                            &st_err_msg,
                            c_narration_id,
                            DEBIT_WHEN_LIMIT,
                            d_diff_amt,
                            &d_balance_amt);

        if ( i_returncode != 0 )
        {
          switch ( i_returncode )
          {
            case  INSUFFICIENT_LIMITS :

                fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
								if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
        				{
          				fn_upd_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
        				}
                fn_userlog(c_ServiceName,"c_err_msg :%s:",c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
                fn_userlog(c_ServiceName,"st_err_msg.c_err_msg :%s:",st_err_msg.c_err_msg);
              
                /*** Ver 2.5 Starts Here ****/
                c_modfyscrn_flg='Y';
                d_required_amount = d_diff_amt + d_balance_amt; 

                if( d_lss_amt_to_be_blckd < 0) 
                {
                 if( d_lss_amt_blkd < 0 )
                 {
                  d_required_amount = d_required_amount + d_lss_amt_blkd ;
                 } 
                }
                else if( d_diff_loss < 0 )
                {
                  d_required_amount = d_required_amount + d_diff_loss;
                }
               
                d_required_amount = ( (-1) * d_required_amount) / 100 ;

                Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
                Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
                /**** Ver 2.5 Ends Here ********/
								/*** Ver 3.9 Starts ***/
                  c_actn_flg = 'M' ;
                  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
                  if ( i_trnsctn == -1 )
                  {
                    fn_errlog( c_ServiceName, "S31515",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
										if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
        						{
						          fn_upd_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
        						}
                    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
                    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
                    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
                    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                  }

                  i_returncode =  fn_spn_ins_ffl_log_tbl  (  c_ServiceName,
                                                             st_o_ordbk,
                                                             c_err_msg.arr,  /*** Datatype is converted to Varchar in Ver 7.5 ***/
                                                             d_required_amount ,
                                                             c_actn_flg
                                                         );
                  if ( i_returncode != 0 )
                  {
                    fn_errlog( c_ServiceName, "S31520", LIBMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
                    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
										if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
                    {
                      fn_upd_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
                    }
                    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
                    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
                    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
                    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
                    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

                  }


                  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )		/*** Datatype is converted to Varchar in Ver 7.5 ***/
                  {
                    fn_errlog( c_ServiceName, "S31525",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
										if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
                    {
                      fn_upd_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
                    }
                    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
                    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
                    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
                    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                  }

                /*** Ver 3.9 Ends ***/

                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg.arr , 0 );		/*** Datatype is converted to Varchar in Ver 7.5 ***/
    						Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
                Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
                Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

            default:

                fn_errlog( c_ServiceName, "S31530",LIBMSG , c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
								if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
                {
                  fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
                }
                fn_userlog(c_ServiceName,"c_err_msg :%s:",c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
                fn_userlog(c_ServiceName,"st_err_msg.c_err_msg :%s:",st_err_msg.c_err_msg);
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg.arr , 0 );		/*** Datatype is converted to Varchar in Ver 7.5 ***/
    						Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
                Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
                Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        }


          d_diff_amt = d_diff_amt - d_balance_amt ;
        }
				else if(st_pstn_actn.c_prd_typ == SLTP_FUTUREPLUS || st_pstn_actn.c_prd_typ == OPTIONPLUS ) /*** Ver 4.7 else loop added ***/	/*** Ver 5.0 ***/
				{
						d_diff_amt = 0.0;	
				}

        /* Block difference in the loss amount */
        strcpy( c_narration_id , ON_MODIFICATION_PLACEMENT);

				/*** Commented in ver 4.7 ***
				if ( st_pstn_actn.c_prd_typ == SLTP_FUTUREPLUS ) *** Ver 3.5 if condition Added for SLTP+ ***
				{
					fn_userlog(c_ServiceName,"In FuturePLUS Case..");  *** Ver 3.5 ***
        	if( d_lss_amt_to_be_blckd < 0)
        	{
 
          	fn_userlog(c_ServiceName,"Sachin :  d_lss_amt_blkd :%llf:",d_lss_amt_blkd);
          	if( d_lss_amt_blkd !=0)
          	{
            	i_returncode = fn_upd_spnlimits( c_ServiceName,
              	                &st_pstn_actn,
                	              &st_err_msg,
                  	            c_narration_id,
                    	          DEBIT_WHEN_LIMIT,
                      	        d_lss_amt_blkd,
                        	      &d_balance_amt);


        	if ( i_returncode != 0 )
        	{
          	switch ( i_returncode )
          	{
            	case  INSUFFICIENT_LIMITS :
	
    	            fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg.arr);
  	              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); 
      	          fn_userlog(c_ServiceName,"c_err_msg :%s:",c_err_msg.arr); 
        	        fn_userlog(c_ServiceName,"st_err_msg.c_err_msg :%s:",st_err_msg.c_err_msg);
              
          	      *** Ver 2.5 Starts Here ****
            	    fn_userlog(c_ServiceName,"Sachin :  d_lss_amt_blkd1 :%llf:",d_lss_amt_blkd);
              	  c_modfyscrn_flg='Y';
                	d_required_amount = d_lss_amt_blkd + d_balance_amt;
                	d_required_amount = ( (-1) * d_required_amount) / 100 ;
                	Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
                	Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
                	**** Ver 2.5 Ends Here ********
									
									*** Ver 3.9 Starts ***
                  c_actn_flg = 'M' ;
                  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr); 
                  if ( i_trnsctn == -1 )
                  {
                    fn_errlog( c_ServiceName, "S31535",LIBMSG,c_err_msg.arr);
                    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
                    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    *** Ver 4.5 ***
                    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  *** Ver 4.5 ***
                    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                  }

                  i_returncode =  fn_spn_ins_ffl_log_tbl  (  c_ServiceName,
                                                             st_o_ordbk,
                                                             c_err_msg.arr,
                                                             d_required_amount ,
                                                             c_actn_flg
                                                         );
                  if ( i_returncode != 0 )
                  {
                    fn_errlog( c_ServiceName, "S31540", LIBMSG, c_err_msg.arr );
                    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); 
                    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
                    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
                    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    *** Ver 4.5 ***
                    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  *** Ver 4.5 ***
                    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

                  }


                  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )
                  {
                    fn_errlog( c_ServiceName, "S31545",LIBMSG,c_err_msg.arr);
                    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
                    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    *** Ver 4.5 ***
                    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  *** Ver 4.5 ***
                    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                  }
                  *** Ver 3.9 Ends ***

                	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg , 0 );
    							Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  *** Ver 2.4 ***
                  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    *** Ver 4.5 ***
                  Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  *** Ver 4.5 ***
                 	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

            	default:
	
  	              fn_errlog( c_ServiceName, "S31550",LIBMSG , c_err_msg);
    	            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg); 
      	          fn_userlog(c_ServiceName,"c_err_msg :%s:",c_err_msg); 
        	        fn_userlog(c_ServiceName,"st_err_msg.c_err_msg :%s:",st_err_msg.c_err_msg);
          	      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg , 0 );
    							Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  *** Ver 2.4 ***
                  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    *** Ver 4.5 ***
                  Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  *** Ver 4.5 ***
            	    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          	}
        	}

        	}
          	d_diff_loss= d_lss_amt_blkd ;
        	}
        	else if(d_diff_loss != 0)
        	{
          	d_balance_amt = 0.0;

          	if(DEBUG_MSG_LVL_3)
          	{
            	fn_userlog(c_ServiceName,"Block diff in loss amount");
          	}
          	i_returncode = fn_upd_spnlimits( c_ServiceName,
            	                &st_pstn_actn,
              	              &st_err_msg,
                	            c_narration_id,
                  	          DEBIT_WHEN_LIMIT,
                    	        d_diff_loss,
                      	      &d_balance_amt);


        		if ( i_returncode != 0 )
        		{
          		switch ( i_returncode )
          		{
            		case  INSUFFICIENT_LIMITS :

 		    	          fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg.arr);
  		              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); 
    		            fn_userlog(c_ServiceName,"c_err_msg :%s:",c_err_msg.arr);
      	          	fn_userlog(c_ServiceName,"st_err_msg.c_err_msg :%s:",st_err_msg.c_err_msg);
       
       		   	      *** Ver 2.5 Starts Here ****
          	  	    c_modfyscrn_flg='Y';
            	  	  d_required_amount = d_diff_loss + d_balance_amt;

 			               d_required_amount = ( (-1) * d_required_amount) / 100 ;
		
  		              Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
    		            Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
        	        	**** Ver 2.5 Ends Here ********
	
										*** Ver 3.9 Starts ***
                  	c_actn_flg = 'M' ;
                  	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr);
                  	if ( i_trnsctn == -1 )
                  	{
                    	fn_errlog( c_ServiceName, "S31555",LIBMSG,c_err_msg.arr); 
                    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
                      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    *** Ver 4.5 ***
                      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  *** Ver 4.5 ***
                    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                  	}

                  	i_returncode =  fn_spn_ins_ffl_log_tbl  (  c_ServiceName,
                    	                                         st_o_ordbk,
                      	                                       c_err_msg.arr,
                        	                                     d_required_amount ,
                          	                                   c_actn_flg
                            		                            );
                  	if ( i_returncode != 0 )
                  	{
                    	fn_errlog( c_ServiceName, "S31560", LIBMSG, c_err_msg.arr ); 
                   	 	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr);
                    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
                    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
                      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    *** Ver 4.5 ***
                      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  *** Ver 4.5 ***
                    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

                  	}


                  	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )
                  	{
                    	fn_errlog( c_ServiceName, "S31565",LIBMSG,c_err_msg.arr); 
                    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
                      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    *** Ver 4.5 ***
                      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  *** Ver 4.5 ***
                    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                  	}

                		*** Ver 3.9 Ends ***

 		               	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg , 0 );
    								Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  *** Ver 2.4 ***
                    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    *** Ver 4.5 ***
                    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  *** Ver 4.5 ***
  		              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

          	 	 default:
	
 		  	            fn_errlog( c_ServiceName, "S31570",LIBMSG , c_err_msg);
  		              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); 
      	          	fn_userlog(c_ServiceName,"c_err_msg :%s:",c_err_msg.arr);
        	        	fn_userlog(c_ServiceName,"st_err_msg.c_err_msg :%s:",st_err_msg.c_err_msg);
          	      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg , 0 );
    								Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  *** Ver 2.4 ***
                    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    *** Ver 4.5 ***
                    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  *** Ver 4.5 ***
            	    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          		}
  	      	}

          	d_diff_loss = d_diff_loss  - d_balance_amt ;
        	}

					if(DEBUG_MSG_LVL_3)
     			{
         		fn_userlog(c_ServiceName,"vishnu d_amt_blkd :%lf:",d_amt_blkd);
         		fn_userlog(c_ServiceName,"vishnu d_diff_amt :%lf:",d_diff_amt);
         		fn_userlog(c_ServiceName,"vishnu d_lss_amt_blkd :%lf:",d_lss_amt_blkd);
         		fn_userlog(c_ServiceName,"vishnu d_diff_loss :%lf:",d_diff_loss);
					}

        	EXEC SQL
         		UPDATE     FOD_FO_ORDR_DTLS
         		SET        FOD_AMT_BLCKD     = :d_amt_blkd - :d_diff_amt,
            		       FOD_LSS_AMT_BLCKD = :d_lss_amt_blkd - :d_diff_loss
         	WHERE      FOD_ORDR_RFRNC    = :c_sltp_ordr_refrnc;

        	if(SQLCODE != 0)
        	{
          	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); 
          	fn_errlog( c_ServiceName, "S31575", SQLMSG, c_err_msg.arr );
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
    				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  *** Ver 2.4 ***
            Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    *** Ver 4.5 ***
            Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  *** Ver 4.5 ***
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}

        	EXEC SQL
         		UPDATE     FOD_FO_ORDR_DTLS
         		SET        FOD_DIFF_AMT_BLCKD      =  :d_diff_amt,
                    	 FOD_DIFF_LSS_AMT_BLCKD  =  :d_diff_loss
		        WHERE      FOD_ORDR_RFRNC          = :st_o_ordbk.c_ordr_rfrnc;

        	if(SQLCODE != 0)
        	{
          	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); 
          	fn_errlog( c_ServiceName, "S31580", SQLMSG, c_err_msg.arr );
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
    				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  *** Ver 2.4 ***
            Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    *** Ver 4.5 ***
            Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  *** Ver 4.5 ***
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}
				}   *** Ver 3.5 if condition ends for SLTP F+ ***
				****/
			
				/*** Ver 3.5 Starts ***/

        /* Not releasing the profit */
        /* Block difference in the margin amount */
        /***  Debit margin loss/profit when limit .                                           ***/
        /***  DO NOT Release loss amount blocked  in case of  PROFIT .                        ***/
        /***  In case of LOSS , deficit  loss amount is NOT released but  blocking is done .  ***/

		    /*** Ver 7.4 started ***/
				if(st_pstn_actn.c_prd_typ == SLTP_FUTUREPLUS || st_pstn_actn.c_prd_typ == OPTIONPLUS) /** ver 7.8 oplus added**/ 
				{
					MEMSET(c_tmp_rmrks);
					strcpy ( c_tmp_rmrks, st_pstn_actn.c_ref_rmrks );
          rtrim(c_tmp_rmrks);  /*** 7.5 ***/
          rtrim(c_ref_rmrks);  /*** 7.5 ***/
					sprintf(st_pstn_actn.c_ref_rmrks,"%s%s",c_ref_rmrks,c_tmp_rmrks);
				}
				/*** Ver 7.4 ends ***/

        if ( st_pstn_actn.c_prd_typ == OPTIONPLUS || st_pstn_actn.c_prd_typ == SLTP_FUTUREPLUS )  /*** SLTP_FUTUREPLUS added in Ver 4.7 ***/
        {
					if(DEBUG_MSG_LVL_3)  /** ver 5.7 **/
					{
						fn_userlog(c_ServiceName,"In OPTIONPLUS OR SLTP_FUTUREPLUS Case..");	/*** SLTP_FUTUREPLUS added in Ver 4.7 ***/
					}
          if( d_lss_amt_to_be_blckd < 0)
          {
						d_diff_loss = 0.0;
           if(DEBUG_MSG_LVL_0)            /* Ver 7.5 */
    				{
						 fn_userlog(c_ServiceName,"Not releasing Profit.....");
						}
          }
          else if(d_diff_loss < 0)
          {
            d_balance_amt = 0.0;

            if(DEBUG_MSG_LVL_3)
            {
              fn_userlog(c_ServiceName,"Block diff in loss amount");
            }
            i_returncode = fn_upd_spnlimits( c_ServiceName,
                              &st_pstn_actn,
                              &st_err_msg,
                              c_narration_id,
                              DEBIT_WHEN_LIMIT,
                              d_diff_loss,
                              &d_balance_amt);


            if ( i_returncode != 0 )
            {
              switch ( i_returncode )
              {
                case  INSUFFICIENT_LIMITS :

                    fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
                    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
										if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
                		{
                  		fn_upd_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
                		}	
                    fn_userlog(c_ServiceName,"c_err_msg :%s:",c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
                    fn_userlog(c_ServiceName,"st_err_msg.c_err_msg :%s:",st_err_msg.c_err_msg);

                    /*** Ver 2.5 Starts Here ****/
                    c_modfyscrn_flg='Y';
                    d_required_amount = d_diff_loss + d_balance_amt;

                     d_required_amount = ( (-1) * d_required_amount) / 100 ;

                    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
                    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
                    /**** Ver 2.5 Ends Here ********/
										/*** Ver 3.9 Starts ***/
                  	c_actn_flg = 'M' ;
                  	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
                  	if ( i_trnsctn == -1 )
                  	{
                    	fn_errlog( c_ServiceName, "S31585",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
											if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
                    	{
                      	fn_upd_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
                    	}
                    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
                      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
                      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
                    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                  	}

                  	i_returncode =  fn_spn_ins_ffl_log_tbl  (  c_ServiceName,
                    	                                         st_o_ordbk,
                      	                                       c_err_msg.arr,	/*** Datatype is converted to Varchar in Ver 7.5 ***/
                        	                                     d_required_amount ,
                          	                                   c_actn_flg
                            	                             );
                  	if ( i_returncode != 0 )
                  	{
                    	fn_errlog( c_ServiceName, "S31590", LIBMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
											if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
                    	{
                      	fn_upd_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
                    	}
                    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
                    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
                    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
                      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
                      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
                    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

                  	}


                  	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )		/*** Datatype is converted to Varchar in Ver 7.5 ***/
                  	{
                    	fn_errlog( c_ServiceName, "S31595",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
											if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
                    	{
                      	fn_upd_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
                    	}		
                    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
                      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
                      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
                    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                  	}

                		/*** Ver 3.9 Ends ***/
                    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg.arr , 0 );		/*** Datatype is converted to Varchar in Ver 7.5 ***/
    								Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
                    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
                    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
                    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

               default:

                    fn_errlog( c_ServiceName, "S31600",LIBMSG , c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
                    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
										if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
                    {
                      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
                    }
                    fn_userlog(c_ServiceName,"c_err_msg :%s:",c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
                    fn_userlog(c_ServiceName,"st_err_msg.c_err_msg :%s:",st_err_msg.c_err_msg);
                    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg.arr , 0 );		/*** Datatype is converted to Varchar in Ver 7.5 ***/
    								Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
                    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
                    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
                    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              }
            }

            d_diff_loss = d_diff_loss  - d_balance_amt ;
					}
					else if(d_diff_loss >= 0)
					{
						d_diff_loss = 0.0;
					}

					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"vishnu d_amt_blkd :%lf:",d_amt_blkd);
						fn_userlog(c_ServiceName,"vishnu d_diff_amt :%lf:",d_diff_amt);
						fn_userlog(c_ServiceName,"vishnu d_lss_amt_blkd :%lf:",d_lss_amt_blkd);
						fn_userlog(c_ServiceName,"vishnu d_diff_loss :%lf:",d_diff_loss);
					}

					if(st_pstn_actn.c_prd_typ == SLTP_FUTUREPLUS || st_pstn_actn.c_prd_typ == OPTIONPLUS) /**** loop added in Ver 7.4 ***//**  ver 7.8  OPTIONPLUS added ***/
					{
						strcpy ( st_pstn_actn.c_ref_rmrks, c_tmp_rmrks);    
						MEMSET(c_tmp_rmrks);                             
						
						EXEC SQL
							UPDATE     FOD_FO_ORDR_DTLS
							SET        FOD_AMT_BLCKD     = :d_amt_blkd - :d_diff_amt,
												 FOD_LSS_AMT_BLCKD = :d_lss_amt_blkd - :d_diff_loss,
												 FOD_SLTP_MRGN = :d_comp1_mrgn,			
												 FOD_SLTP_PL   = :d_comp1_pl,				
												 FOD_SLTP_SEBI_MRGN = :d_xchng_amt,
                         FOD_OPLUS_PREMIUM  = :d_prem_amt,  /*** Ver 7.8 ***/
                         FOD_SPAN_MRGN = :d_spn_mrgn,       /*** Ver 7.8 ***/
                         FOD_EXPR_MRGN = :d_expr_mrgn       /*** Ver 7.8 ***/	
							WHERE      FOD_ORDR_RFRNC    = :c_sltp_ordr_refrnc;
					}
					else
					{
					EXEC SQL
						UPDATE     FOD_FO_ORDR_DTLS
						SET        FOD_AMT_BLCKD     = :d_amt_blkd - :d_diff_amt,
											 FOD_LSS_AMT_BLCKD = :d_lss_amt_blkd - :d_diff_loss
						WHERE      FOD_ORDR_RFRNC    = :c_sltp_ordr_refrnc;
					}
					if(SQLCODE != 0)
					{
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
						if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
            {
              fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
            }
						fn_errlog( c_ServiceName, "S31605", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
    				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
	          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
            Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
  					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}

					/*** Commented in Ver 5.0 *** if ( st_pstn_actn.c_prd_typ == OPTIONPLUS) *** If condition added in Ver 4.7 ***
					{
					d_diff_amt = 0.0;	

					EXEC SQL
						UPDATE     FOD_FO_ORDR_DTLS
						SET        FOD_DIFF_AMT_BLCKD      =  :d_diff_amt,
											 FOD_DIFF_LSS_AMT_BLCKD  =  :d_diff_loss
						WHERE      FOD_ORDR_RFRNC          = :st_o_ordbk.c_ordr_rfrnc;

					if(SQLCODE != 0)
					{
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); 
						fn_errlog( c_ServiceName, "S31610", SQLMSG, c_err_msg.arr );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
    				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  *** Ver 2.4 ***
	          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    *** Ver 4.5 ***
            Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  *** Ver 4.5 ***
  					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
					} ***/
        }

        /*** Ver 3.5 Starts ***/
    }
  }
  /*** Ver 1.9 ends here ***/

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )	/*** Datatype is converted to Varchar in Ver 7.5 ***/
  {
    fn_errlog( c_ServiceName, "S31615",LIBMSG,c_err_msg.arr); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		if(c_sltp_trail_flag == 'Y' && (strcmp(c_rmrks,"SYSTRAIL") == 0) )     /** Ver 5.8 **/
    {
      fn_stts_trail_ord(st_xchngbk.c_ordr_rfrnc);                       /** Ver 5.8 **/
    }
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** Datatype is converted to Varchar in Ver 7.5 ***/
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  /*** Ver 2.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);    /*** Ver 4.5 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);  /*** Ver 4.5 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	/*** Commented in Ver 4.7 ***
	strcpy ( c_fno_dmn_nm, "FNO" );
  strcpy ( c_fno_trg_nm, "TRG_LOOK_TAB" );
  strcpy ( c_fno_trg_dat, "TRG_LOOK_TAB" );

  i_returncode = fn_call_svc_fml ( c_ServiceName,
                                   c_err_msg,		
                                   "SFO_FOS_TRG",
                                   0,
                                   4,
                                   0,
                                   FFO_DMN_NM, (char *)c_fno_dmn_nm,
                                   FFO_TRG_NM, (char *)c_fno_trg_nm,
                                   FFO_ABT_TRG_DATA, (char *)c_fno_trg_dat,
                                   FFO_ABT_FILTER, (char *)st_xchngbk.c_pipe_id);

  if ( i_returncode != SUCC_BFR )
  {
     fn_errlog( c_ServiceName, "S31620", LIBMSG, c_err_msg ); 
  }
	***/
  /********************************************************/
  /****Changes for Tux4 Triggers***************************/
  /********************************************************/

	/**tpfree ((char *)ptr_fml_Rbuf);			Commented In VQC	***/
	/*** Commented In Ver 4.2
	tpfree ((char *)ptr_fml_Sbuf);
	******/

	/*** Ver 9.3 : starts here : Function called for margin reporting ( function call moved outside transaction commit )***/
  i_returncode = 0;

  i_returncode = fn_upd_mrgn_reporting( st_usrprfl.c_cln_mtch_accnt,
   	                                    st_cntrct.c_xchng_cd,
     	                                  c_ServiceName,
       	                                c_err_msg.arr);

  if ( i_returncode != 0 )
  {
   	fn_errlog(c_ServiceName, "S31625", LIBMSG, c_err_msg.arr );
   	fn_userlog(c_ServiceName,"Pls check, Nikhil Error while calling function fn_upd_mrgn_reporting..");
   	fn_userlog(c_ServiceName,"ERROR IN fn_upd_mrgn_reporting");
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
   	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
   	Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amount,0);
   	Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_modfyscrn_flg,0);
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
 	/*** Ver 9.3 : Ends here ***/

	i_actn_id = 0;    /**Ver 2.4 **/
  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /*** Ver 2.4 ***/
  /***tpreturn( TPSUCCESS, 0, (char *)NULL, 0 , 0 );  Commented In Ver 2.4  ***/
  Fadd32(ptr_fml_Ibuf,FFO_MDFCTN_CNTR,(char *)&st_xchngbk.l_mdfctn_cntr,0); /*** Added in Ver 6.4 ***/
  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Ibuf, 0 , 0 ); /*** Ver 2.4 ***/
}

int fn_check_inp_spn( char *c_ServiceName,
                      struct st_xchngbook *ptr_st_xchngbook,
                      struct st_cntrct_qt *ptr_st_cntrct_qt,
                      char c_fum_mrkt_typ,  
                      char c_fcm_mrkt_typ,  
                      int i_rollover_ord_ind, /* Ver 6.4 */ 
											char *c_sprd_expiry_date1, /* Ver 6.4 */
											char *c_sprd_expiry_date2, /* Ver 6.4 */
                      struct st_err_msg *ptr_st_err_msg )
{
  int i_dategreater=0;
  int i_returncode;
  char c_exg_crrnt_stts;
  char c_exg_extnd_stts;   
	char c_exg_ovrnght_stts ;   /* Ver 1.7 */ 
  varchar c_near_expry_dt [ LEN_DATE ];
 /**** double d_min_ordr_val=0.0; **commented in VQC***/
  double d_dsclsd_prcntg=0.0;

	/***	Commented In VQC

	char c_err_msg[256];		
  long long ll_ordr_val = 0;
  long long ll_min_ordr_val = 0;
	
	******************************/
	
	char c_lmt_mrkt_flg;						/*** Ver 1.8 **/
	char c_plcd_rjct_stts='J';          /***ver 6.3****/


 /*****Ver 6.3 Had Parse Changes ******/
  EXEC SQL
     SELECT EXG_CRRNT_STTS,
            EXG_EXTND_MRKT_STTS, 
						EXG_TMP_MKT_STTS,          /* Ver 1.7 */ 
            EXG_DSCLSD_PRCNTG
     INTO   :c_exg_crrnt_stts,
            :c_exg_extnd_stts,  
						:c_exg_ovrnght_stts,       /* Ver 1.7  */ 
            :d_dsclsd_prcntg
     FROM   EXG_XCHNG_MSTR
     WHERE  EXG_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31630",SQLMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

	/** Orders cannnot be modified when the Exchange is under Expiry **/

  /*** if ( c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY ) commented In Ver 1.7 ***/
	if ( c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY &&  ( c_exg_ovrnght_stts !=  EXCHANGE_OPEN )) /* Ver 1.7  */
  {
    if( c_exg_extnd_stts == EXCHANGE_UNDER_EXPIRY )
    {
      fn_errlog( c_ServiceName, "B28518",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
    else if (c_fum_mrkt_typ == NORMAL_MRKT && ptr_st_xchngbook->c_slm_flg == MARKET &&
             ptr_st_xchngbook->c_ord_typ == IMMEDIATE_OR_CANCEL )      /**  Underlying Level Check  **/
    {
      fn_userlog( c_ServiceName,"This Underlying Is Disabled For Extended Market Hours");
      fn_errlog( c_ServiceName, "B66066",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
    else if ( c_fcm_mrkt_typ == NORMAL_MRKT && ptr_st_xchngbook->c_slm_flg == MARKET &&
              ptr_st_xchngbook->c_ord_typ == IMMEDIATE_OR_CANCEL )     /**  Contract Level Check  **/
    {
      fn_userlog( c_ServiceName,"This Contract Is Disabled For Extended Market Hours");
      fn_errlog( c_ServiceName, "B66066",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }

  }

	if ( ( ptr_st_xchngbook->c_slm_flg == LIMIT ) ||
       ( ptr_st_xchngbook->c_slm_flg == STOP_LOSS ) )
  {
    /** Limit rate cannot be less than or equal to Zero for Limit orders **/

    if ((ptr_st_xchngbook->l_ord_lmt_rt <= 0 ) && (ptr_st_xchngbook->c_spl_flg != ROLLOVER_WITH_SPREAD )) /*** ROLLOVER_WITH_SPREAD condition added in ver 6.4 ***/
    {
      fn_errlog( c_ServiceName, "B28519",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }

    /***  Added SL trigger price cannot be Zero for Stop Loss Order.  ***/

    if ( ( ptr_st_xchngbook->c_slm_flg == STOP_LOSS ) && ptr_st_xchngbook->l_stp_lss_tgr == 0 )
    {
      fn_errlog( c_ServiceName,"S31635","Stop Loss trigger price cannot be Zero for Stop Loss Order.",ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }
		 /*********************** Ver 2.2 Started **************************/
			
	 if ( ptr_st_cntrct_qt->c_prd_typ != 'O')   
   {
		 /*** Ver 6.4 started ***/
    fn_userlog( c_ServiceName,"*****TESTING*****i_rollover_ord_ind is :%d:",i_rollover_ord_ind);
	  if ( i_rollover_ord_ind != 1 ) 
    {
      if ( ptr_st_xchngbook->c_spl_flg == ROLLOVER_WITH_SPREAD) 
      {
						i_returncode = fn_vrfy_spnprc_band_mkt_rws_loc( c_ServiceName,
                                        ptr_st_cntrct_qt->c_xchng_cd,
                                        ptr_st_cntrct_qt->c_prd_typ,
                                        ptr_st_cntrct_qt->c_undrlyng,
                                        ptr_st_xchngbook->l_ord_lmt_rt,
							                          c_sprd_expiry_date1,
							                          c_sprd_expiry_date2,
                                        ptr_st_err_msg
                                      );
		 }
		 else /*** ver 6.4 ended **/
		 {
     if ( c_exg_crrnt_stts == EXCHANGE_OPEN )
     {
        rtrim(ptr_st_cntrct_qt->c_expry_dt);
        if(DEBUG_MSG_LVL_3) {
				fn_userlog(c_ServiceName,"ptr_st_cntrct_qt->c_expry_dt:%s:",ptr_st_cntrct_qt->c_expry_dt);
        }
        /*** i_returncode = fn_vrfy_spnprc_band_mkt( c_ServiceName,
                                        ptr_st_cntrct_qt->c_xchng_cd,
                                        ptr_st_cntrct_qt->c_prd_typ,
                                        ptr_st_cntrct_qt->c_undrlyng,
                                        ptr_st_xchngbook->l_ord_lmt_rt,
                                        ptr_st_cntrct_qt->c_expry_dt,
                                        ptr_st_err_msg
                                      ); Commented in Ver 5.8 and added local function as need to convert trail order into normal in this check ***/

						i_returncode = fn_vrfy_spnprc_band_mkt_loc( c_ServiceName,
                                        ptr_st_cntrct_qt->c_xchng_cd,
                                        ptr_st_cntrct_qt->c_prd_typ,
                                        ptr_st_cntrct_qt->c_undrlyng,
                                        ptr_st_xchngbook->l_ord_lmt_rt,
                                        ptr_st_cntrct_qt->c_expry_dt,
                                        ptr_st_err_msg
                                      );
    		if ( i_returncode == -1 )
    		{
						fn_errlog( c_ServiceName, "B28006",DEFMSG,ptr_st_err_msg->c_err_msg);
						return FAILURE;
    		}
        else if(i_returncode == -2)  /*** Added in ver 5.8 ***/
        {
          fn_errlog( c_ServiceName, "B28006",DEFMSG,ptr_st_err_msg->c_err_msg);
          return -2;
        }
		 }
		 /*********************** Ver 2.2 Ends    **************************/
		 else
		 {
    	  /** Function to check the limit rate is with in price band **/
   			/** percentage specified by the exchange                   **/

    		i_returncode = fn_vrfy_spnprc_band( c_ServiceName,
                                     		ptr_st_cntrct_qt->c_xchng_cd,
                                     		ptr_st_cntrct_qt->c_prd_typ,
                                     		ptr_st_cntrct_qt->c_undrlyng,
                                     		ptr_st_xchngbook->l_ord_lmt_rt,
                                     		ptr_st_cntrct_qt->l_base_prc,
                                     		ptr_st_err_msg
																			);
    		if ( i_returncode == -1 )
    		{
							fn_errlog( c_ServiceName, "B28006",DEFMSG,ptr_st_err_msg->c_err_msg);
							return FAILURE;
    		}
  	  	}/*** Ver 6.4 ***/
      }/*** Ver 6.4 ***/
		}

		}

  }

	else if ( ptr_st_xchngbook->c_slm_flg == MARKET )
  {
    /** Market orders can be placed only when the Exchange is open **/
    if ( c_exg_crrnt_stts != EXCHANGE_OPEN )
    {
      if( c_exg_extnd_stts != EXCHANGE_OPEN )
      {
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
      else if (c_fum_mrkt_typ == NORMAL_MRKT )      /***  Underlying Level Check  ***/
      {
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
      else if ( c_fcm_mrkt_typ == NORMAL_MRKT )     /***  Contract Level Check  ***/
      {
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
    }

	  /** Limit rate should be Zero for Market orders **/

    if ( ptr_st_xchngbook->l_ord_lmt_rt != 0 )
    {
      fn_errlog( c_ServiceName, "B28521",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }

    if ( ptr_st_xchngbook->l_quote == 0 )
    {

      fn_errlog( c_ServiceName, "B28540",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
  }
	
  /***  Added Cannot modify to Immediate or Cancel Order if Exchange is Not Open.***/

  if ( ( c_exg_crrnt_stts != EXCHANGE_OPEN ) &&  ( ptr_st_xchngbook->c_ord_typ == IMMEDIATE_OR_CANCEL ) )
  {
      if( c_exg_extnd_stts != EXCHANGE_OPEN )
      {
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }

      else if (c_fum_mrkt_typ == NORMAL_MRKT )      /***  Underlying Level Check  ***/
      {
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
      else if ( c_fcm_mrkt_typ == NORMAL_MRKT )     /***  Contract Level Check  ***/
      {
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
  }

	/***  Added SLTP prc must not be present for Market or Limit Orders. ***/

  if((ptr_st_xchngbook->c_slm_flg == MARKET  || ptr_st_xchngbook->c_slm_flg == LIMIT) && ptr_st_xchngbook->l_stp_lss_tgr !=0)
  {
    fn_errlog( c_ServiceName,"S31640","Cannot enter Stop Loss trigger price for Market and Limit Ordres.",ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

  /** Disclosed Quantity cannot be greater than the order qty **/

  if ( ptr_st_xchngbook->l_dsclsd_qty > ptr_st_xchngbook->l_ord_tot_qty )
  {
      fn_errlog( c_ServiceName, "B28522",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
  }

	if ( ptr_st_xchngbook->l_stp_lss_tgr != 0 )
  {
    if ( ptr_st_xchngbook->c_ordr_flw == BUY )
    {
      /** Stop loss trigger price cannot be greater than limit rate **/
      /** for Buy order                                             **/

      if ( ptr_st_xchngbook->l_stp_lss_tgr > ptr_st_xchngbook->l_ord_lmt_rt )
      {
        fn_errlog( c_ServiceName, "B28524",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }

      /** Stop loss trigger price cannot be less than last traded   **/
      /** price for Buy order                                       **/

      if ( ptr_st_xchngbook->l_stp_lss_tgr < ptr_st_cntrct_qt->l_lst_trdd_prc )
      {
        fn_errlog( c_ServiceName, "B22009",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
    }

    if ( ptr_st_xchngbook->c_ordr_flw == SELL )
    {
      /** Stop loss trigger price cannot be less  than limit rate   **/
      /** for Sell order                                            **/

      if ( ptr_st_xchngbook->l_stp_lss_tgr < ptr_st_xchngbook->l_ord_lmt_rt )
      {
        fn_errlog( c_ServiceName, "B28525",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }

      /** Stop loss trigger price cannot be greater than last traded **/
      /** price for Sell order                                       **/

      if ( ptr_st_xchngbook->l_stp_lss_tgr > ptr_st_cntrct_qt->l_lst_trdd_prc )
      {
        fn_errlog( c_ServiceName, "B22010",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
    }
		/*** Ver 1.8 starts ****/
    if(strcmp(ptr_st_xchngbook->c_xchng_cd,"BFO") == 0 )
    {
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Checking Limit Market Flag before modification to SLTP for BFO");
      }

   /*****Ver 6.3 Had Parse Changes ******/
      EXEC SQL
          SELECT FOD_LMT_MRKT_SL_FLG
          INTO   :c_lmt_mrkt_flg
          FROM   FOD_FO_ORDR_DTLS
          WHERE  FOD_XCHNG_CD='BFO'
          AND    FOD_ORDR_RFRNC = :ptr_st_xchngbook->c_ordr_rfrnc
          AND    FOD_MDFCTN_CNTR = (SELECT MAX(FXB_MDFCTN_CNTR)
                                    FROM  FXB_FO_XCHNG_BOOK
                                    WHERE  FXB_ORDR_RFRNC = :ptr_st_xchngbook->c_ordr_rfrnc
																/****		AND   FXB_PLCD_STTS != 'J' **commented in ver 6.3***/
																				AND   FXB_PLCD_STTS !=:c_plcd_rjct_stts  /****Added in Ver 6.3****/
                                   ) ;
      if(SQLCODE != 0)
      {
        fn_userlog( c_ServiceName, "failed in geting Limit Market flag for BSE ordr");
        fn_errlog( c_ServiceName, "S31645", "Invalid SLM Flag", ptr_st_err_msg->c_err_msg );
      	return FAILURE;
      }
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Limit Market flag from FOD is :%c:",c_lmt_mrkt_flg);
      }
      if(c_lmt_mrkt_flg !='S')
      {
        fn_errlog(c_ServiceName,"S31650","Please note orders cannot be modified from Limit to SLTP",ptr_st_err_msg->c_err_msg);
        strcpy(ptr_st_err_msg->c_err_msg,"Please note orders cannot be modified from Limit to SLTP");
      	return FAILURE;
      }
    }
		/*** Ver 1.8 Ends ****/
  }

	if( ptr_st_xchngbook->l_dsclsd_qty > 0 )
  {
    /** Disclosed Quantity cannot be less than  Minimum disclosed      **/
    /** percentage ratio of the order qty                              **/

    if ( ptr_st_xchngbook->l_dsclsd_qty < ( ( d_dsclsd_prcntg / 100 ) * ptr_st_xchngbook->l_ord_tot_qty ) )
    {
      fn_errlog( c_ServiceName, "B28526",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
  }

	if ( ptr_st_xchngbook->c_ord_typ == GOOD_TILL_DATE )
  {
    if ( strcmp( ptr_st_xchngbook->c_valid_dt, "*" ) == 0 )
    {
      fn_errlog( c_ServiceName, "B28527",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
    else
    {
      i_dategreater = 0;

      EXEC SQL
        SELECT  1
        INTO    :i_dategreater
        FROM    EXG_XCHNG_MSTR
        WHERE   EXG_NXT_TRD_DT < TO_DATE( :ptr_st_xchngbook->c_valid_dt,'DD-Mon-YYYY' )
        AND     EXG_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd;

      if (( SQLCODE != 0 )  && ( SQLCODE != NO_DATA_FOUND ))
      {
        fn_errlog( c_ServiceName, "S31655", SQLMSG, ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }

      if ( i_dategreater != 1 )
      {
        fn_errlog( c_ServiceName, "B28528", DEFMSG, ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }

      i_dategreater = 0;

  /*****Ver 6.3 Had Parse Changes ******/
      EXEC SQL
        SELECT  1
        INTO    :i_dategreater
        FROM    DUAL
        WHERE   TO_DATE( :ptr_st_cntrct_qt->c_expry_dt, 'DD-Mon-YYYY' ) < TO_DATE( :ptr_st_xchngbook->c_valid_dt, 'DD-Mon-YYYY' );

      if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
      {
        fn_errlog( c_ServiceName, "S31660", SQLMSG, ptr_st_err_msg->c_err_msg);
        return FAILURE;
			}

		  if ( i_dategreater == 1 )
      {
        fn_errlog( c_ServiceName, "B28539", DEFMSG, ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }

			/*** Comented in Ver 4.8 ***

			  EXEC SQL
        SELECT  TO_CHAR ( MIN (FCM_EXPRY_DT),'dd-Mon-yyyy')
        INTO    :c_near_expry_dt
        FROM    FCM_FO_CNTRCT_MSTR
        WHERE   FCM_XCHNG_CD    = :ptr_st_cntrct_qt->c_xchng_cd
        AND     FCM_PRDCT_TYP   = :ptr_st_cntrct_qt->c_prd_typ
        AND     FCM_UNDRLYNG    = :ptr_st_cntrct_qt->c_undrlyng
        AND     FCM_CNTRCT_TAG  =
                (   SELECT  A.FCM_CNTRCT_TAG
                    FROM    FCM_FO_CNTRCT_MSTR A
                    WHERE   A.FCM_XCHNG_CD    = :ptr_st_cntrct_qt->c_xchng_cd
                    AND     A.FCM_PRDCT_TYP   = :ptr_st_cntrct_qt->c_prd_typ
                    AND     A.FCM_UNDRLYNG    = :ptr_st_cntrct_qt->c_undrlyng
                    AND     A.FCM_EXPRY_DT    = to_date( :ptr_st_cntrct_qt->c_expry_dt,'dd-mon-yyyy' )
                    AND     A.FCM_EXER_TYP    = :ptr_st_cntrct_qt->c_exrc_typ );

			*** Ver 4.8  Comment Ends ****/

			/*** Ver 4.8 Starts ****/

				EXEC SQL
        SELECT  TO_CHAR ( MIN (FTQ_EXPRY_DT),'dd-Mon-yyyy')
        INTO    :c_near_expry_dt
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD    = :ptr_st_cntrct_qt->c_xchng_cd
        AND     FTQ_PRDCT_TYP   = :ptr_st_cntrct_qt->c_prd_typ
        AND     FTQ_UNDRLYNG    = :ptr_st_cntrct_qt->c_undrlyng
        AND     FTQ_CNTRCT_TAG  =
                (   SELECT  A.FTQ_CNTRCT_TAG
                    FROM    FTQ_FO_TRD_QT A
                    WHERE   A.FTQ_XCHNG_CD    = :ptr_st_cntrct_qt->c_xchng_cd
                    AND     A.FTQ_PRDCT_TYP   = :ptr_st_cntrct_qt->c_prd_typ
                    AND     A.FTQ_UNDRLYNG    = :ptr_st_cntrct_qt->c_undrlyng
                    AND     A.FTQ_EXPRY_DT    = TO_DATE( :ptr_st_cntrct_qt->c_expry_dt,'dd-mon-yyyy' )
                    AND     A.FTQ_EXER_TYP    = :ptr_st_cntrct_qt->c_exrc_typ );

    /*** Ver 4.8 Ends ****/
			
      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31665", SQLMSG, ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
 
      /** if(DEBUG_MSG_LVL_0)  ** Ver 5.7 **/
      if(DEBUG_MSG_LVL_3)			/** Ver 5.7 **/
      {
       fn_userlog(c_ServiceName," FTQ Min Expiry Date Is :%s:",c_near_expry_dt);
      } 

      SETNULL ( c_near_expry_dt );

      i_dategreater = -1;
	
			 /*****Ver 6.3 Hard Parse Changes ******/
      EXEC SQL
        SELECT  TO_DATE(:c_near_expry_dt, 'DD-Mon-YYYY' ) - TO_DATE( :ptr_st_xchngbook->c_valid_dt, 'DD-Mon-YYYY' ) - EXG_GTD_VALID_DAYS
        INTO    :i_dategreater
        FROM    EXG_XCHNG_MSTR
        WHERE   EXG_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd
        AND     EXG_NXT_TRD_DT < TO_DATE( :ptr_st_cntrct_qt->c_expry_dt, 'DD-Mon-YYYY' ) - EXG_GTD_VALID_DAYS ;

      if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
      {
        fn_errlog( c_ServiceName, "S31670", SQLMSG, ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }

			if ( i_dategreater < 0 )
      {
        fn_errlog( c_ServiceName, "B28547", DEFMSG, ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }

    }
  }

	return 0;
}

int fn_check_ord_spn( char *c_ServiceName,
                      struct st_cntrt_gen_inf *ptr_st_cntrct_gen_inf,
                      struct st_xchngbook *ptr_st_xchngbook,
                      struct st_orderbook *ptr_o_st_ordbook ,
                      struct st_err_msg *ptr_st_err_msg )
{

  char c_mkt_allwd_flg;

	/***	Commented In VQC

	char c_err_msg[256];
  char c_gtd_msg[256]; 
  char c_orig_ord_dt[9]; 

	************************/
	
	char c_exg_ovrnght_stts ;   /* Ver 1.7 */
  char c_exg_crrnt_stts;      /* Ver 1.7  */
  char c_exg_ovrnght_trd_dt[23];    /***  Ver 1.7  ***/ 
  /*** int  i_gtd_dt_greater = 0;  ****Commented in VQC**/

  /** Order quantity should be in Multiples of Contract Lot size.   **/

  if ( ptr_st_xchngbook->l_ord_tot_qty % ptr_st_cntrct_gen_inf->l_min_lot_qty != 0 )
  {
    fn_errlog( c_ServiceName, "B28529", DEFMSG, ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

  /** Disclosed quantity should be in Multiples of Contract Lot size **/

  if ( ptr_st_xchngbook->l_dsclsd_qty % ptr_st_cntrct_gen_inf->l_min_lot_qty != 0 )
  {
    fn_errlog( c_ServiceName, "B28530", DEFMSG, ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

  /** Limit rate should be in Multiples of Contract Tick size        **/

  if ( ptr_st_xchngbook->l_ord_lmt_rt % ptr_st_cntrct_gen_inf->l_tick_sz != 0 )
  {
    fn_errlog( c_ServiceName, "B28531", DEFMSG, ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

  /** Stop loss Trigger Price should be in Multiples of Contract Tick size **/

  if ( ptr_st_xchngbook->l_stp_lss_tgr % ptr_st_cntrct_gen_inf->l_tick_sz != 0 )
  {
    fn_errlog( c_ServiceName, "B28532", DEFMSG, ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

	if ( ptr_st_xchngbook->c_ord_typ == IMMEDIATE_OR_CANCEL  )
  {
    if ( ptr_st_xchngbook->l_stp_lss_tgr != 0 )
    {
      fn_errlog( c_ServiceName, "B28012", DEFMSG, ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
  }

	/*** Ver 1.7 Starts ***/
       /*****Ver 6.3 Hard Parse Changes ******/
  EXEC SQL
    SELECT EXG_CRRNT_STTS,
           EXG_TMP_MKT_STTS,
           TO_CHAR ( EXG_TMP_TRD_DT , 'dd-Mon-yyyy' )
    INTO   :c_exg_crrnt_stts,
           :c_exg_ovrnght_stts,
           :c_exg_ovrnght_trd_dt
    FROM   EXG_XCHNG_MSTR
    WHERE  EXG_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31675",SQLMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }


  if( c_exg_ovrnght_stts == EXCHANGE_OPEN && c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY)
  {
    if ( strcmp(c_exg_ovrnght_trd_dt,ptr_o_st_ordbook->c_trd_dt)!=0)
    {
        fn_userlog( c_ServiceName," Cannot Cancel a order placed in Normal Market hour when market is under expiry ");
        fn_errlog( c_ServiceName, "B28518",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
    }

  }
  /*** Ver 1.7 Ends ***/


  if ( ptr_st_xchngbook->c_slm_flg == MARKET )
  {
    EXEC SQL
      SELECT  OPM_MKT_ALLWD
      INTO    :c_mkt_allwd_flg
      FROM    OPM_ORD_PIPE_MSTR
      WHERE   OPM_PIPE_ID = :ptr_st_xchngbook->c_pipe_id;

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31680", SQLMSG, ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }

    if ( c_mkt_allwd_flg == NO )
    {
      if(ptr_st_xchngbook->c_spl_flg != SYSTEM_SQUAREOFF   ||
         ptr_st_xchngbook->c_spl_flg != IMTM_SYS_SQUAREOFF ||
         ptr_st_xchngbook->c_spl_flg != LMTNEG_SYS_SQUAREOFF ) /*** Check added for IMTM_SYS_SQUAREOFF and LMTNEG_SYS_SQUAREOFF in Ver 4.1 ***/    
      {
        fn_errlog( c_ServiceName, "B28001", DEFMSG, ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
    }
  }

	/** Modification of order is possible only in REQUESTED, ORDERED **/
  /** and PARTIALLY_EXECUTED states                                **/

  if ( ( ptr_o_st_ordbook->c_ordr_stts != REQUESTED ) &&
       ( ptr_o_st_ordbook->c_ordr_stts != ORDERED ) &&
       ( ptr_o_st_ordbook->c_ordr_stts != PARTIALLY_EXECUTED ) )
  {
    fn_errlog( c_ServiceName, "B28533", DEFMSG, ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

	/** check if any modifiable parameter has been modified        **/

  if ( (ptr_st_xchngbook->c_slm_flg == ptr_o_st_ordbook->c_slm_flg)
    && (ptr_st_xchngbook->l_ord_lmt_rt == ptr_o_st_ordbook->l_ord_lmt_rt)
    && (ptr_st_xchngbook->l_ord_tot_qty == ptr_o_st_ordbook->l_ord_tot_qty)
    && (ptr_st_xchngbook->l_dsclsd_qty == ptr_o_st_ordbook->l_dsclsd_qty)
    && (ptr_st_xchngbook->l_stp_lss_tgr == ptr_o_st_ordbook->l_stp_lss_tgr)
    && (ptr_st_xchngbook->c_ord_typ == ptr_o_st_ordbook->c_ord_typ)
    && (strcmp(ptr_st_xchngbook->c_valid_dt,ptr_o_st_ordbook->c_valid_dt)==0) )
  {
    fn_errlog( c_ServiceName, "B28534", DEFMSG, ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

	/** The Modified qty cannot be less than or equal to the Executed qty **/

  if( ptr_st_xchngbook->l_ord_tot_qty <= ptr_o_st_ordbook->l_exctd_qty)
  {
    fn_errlog( c_ServiceName, "B28535", DEFMSG, ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

  /*** The order valid date cannot be modified for the GTD orders ***/

  rtrim(ptr_o_st_ordbook->c_valid_dt);

  if ( ( ptr_st_xchngbook->c_ord_typ == 'D' ) &&
       ( ptr_o_st_ordbook->c_ord_typ == 'D' ) &&
       ( strcmp(ptr_st_xchngbook->c_valid_dt ,
         ptr_o_st_ordbook->c_valid_dt) != 0 ) )
  {
    fn_errlog( c_ServiceName, "B28571", DEFMSG, ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

  /** if(DEBUG_MSG_LVL_0)  ** Ver 5.7 **/
  if(DEBUG_MSG_LVL_3)     /** Ver 5.7 **/
  {
    fn_userlog( c_ServiceName,"Exchange code is :%s:", ptr_st_xchngbook->c_xchng_cd );
    fn_userlog( c_ServiceName,"Product type is :%c:", ptr_o_st_ordbook->c_prd_typ );
    fn_userlog( c_ServiceName,"Underlying is :%s:", ptr_o_st_ordbook->c_undrlyng );
  }

  EXEC SQL
    SELECT FUM_FREEZE_QTY
    INTO   :sql_fum_freeze_qty
    FROM   FUM_FO_UNDRLYNG_MSTR
    WHERE  FUM_XCHNG_CD 	= :ptr_st_xchngbook->c_xchng_cd
   /*** AND    FUM_PRDCT_TYP = decode(:ptr_o_st_ordbook->c_prd_typ,'P','F',:ptr_o_st_ordbook->c_prd_typ) ** Commented in Ver 1.9 ***/
  /*AND    FUM_PRDCT_TYP = DECODE(:ptr_o_st_ordbook->c_prd_typ,'P','F','U','F',:ptr_o_st_ordbook->c_prd_typ) * Ver 1.9 Commented In Ver 3.5 */
  	AND    FUM_PRDCT_TYP = DECODE(:ptr_o_st_ordbook->c_prd_typ,'P','F','U','F','I','O',:ptr_o_st_ordbook->c_prd_typ) 
																																																		/* Ver 3.5 **/
	  AND    FUM_UNDRLYNG 	= :ptr_o_st_ordbook->c_undrlyng;

  if ( SQLCODE != 0 )
  {
     fn_errlog( c_ServiceName, "S31685", SQLMSG, ptr_st_err_msg->c_err_msg);
     return FAILURE;
  }

  if( ptr_st_xchngbook->l_ord_tot_qty > sql_fum_freeze_qty && sql_fum_freeze_qty != 0 )
  {
    fn_errlog( c_ServiceName, "B66071", DEFMSG, ptr_st_err_msg->c_err_msg);
    /* sprintf(ptr_st_err_msg->c_err_msg,"%s:%ld",ptr_st_err_msg->c_err_msg,(sql_fum_freeze_qty-ptr_st_cntrct_gen_inf->l_min_lot_qty)); */
    sprintf(ptr_st_err_msg->c_err_msg,"%s:%ld",ptr_st_err_msg->c_err_msg,sql_fum_freeze_qty);
    /** return FAILURE; Commented in Ver 5.8 **/
		return -2; 	/*** Added in ver 5.8 ***/
  }


  return SUCCESS;
}

int fn_cal_mod_pos  ( char  *c_ServiceName,
                      char  *c_err_msg,
                      struct st_pstn_actn *ptr_st_pstn_actn
                    )
{
	char  c_mtm_flag;
  char  c_upos_avl;
 /***  varchar c_trade_dt[12];  *** ****cemmented in VQC**/

  char c_extra_update = '\0'; /** ver 7.7 **/
	char c_ucc_cd[13] = "\0";   /*** Added in VER 9.3 ***/

  int i_returncode = 0;			/***	Initialised In VQC	***/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Inside Function fn_cal_pos.");
	}

  rtrim(ptr_st_pstn_actn->c_cln_mtch_accnt);
  rtrim(ptr_st_pstn_actn->c_undrlyng);
  rtrim(ptr_st_pstn_actn->c_expry_dt);
  rtrim(ptr_st_pstn_actn->c_ref_rmrks);

  fn_init_ddr_val ( ptr_st_pstn_actn->c_rout_crt );

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName,"c_user_id        :%s:",ptr_st_pstn_actn->c_user_id );
    fn_userlog ( c_ServiceName,"l_session_id      :%ld:",ptr_st_pstn_actn->l_session_id );
    fn_userlog ( c_ServiceName,"c_cln_mtch_accnt :%s:",ptr_st_pstn_actn->c_cln_mtch_accnt );
    fn_userlog ( c_ServiceName,"c_xchng_cd       :%s:",ptr_st_pstn_actn->c_xchng_cd );
    fn_userlog ( c_ServiceName,"c_prd_typ        :%c:",ptr_st_pstn_actn->c_prd_typ );
    fn_userlog ( c_ServiceName,"c_undrlyng       :%s:",ptr_st_pstn_actn->c_undrlyng );
    fn_userlog ( c_ServiceName,"c_expry_dt       :%s:",ptr_st_pstn_actn->c_expry_dt );
    fn_userlog ( c_ServiceName,"c_exrc_typ       :%c:",ptr_st_pstn_actn->c_exrc_typ );
    fn_userlog ( c_ServiceName,"l_actn_typ       :%ld:",ptr_st_pstn_actn->l_actn_typ );
    fn_userlog ( c_ServiceName,"c_trnsctn_flw    :%c:",ptr_st_pstn_actn->c_trnsctn_flw );
    fn_userlog ( c_ServiceName,"l_orgnl_qty      :%ld:",ptr_st_pstn_actn->l_orgnl_qty );
    fn_userlog ( c_ServiceName,"l_orgnl_rt       :%ld:",ptr_st_pstn_actn->l_orgnl_rt );
    fn_userlog ( c_ServiceName,"l_new_qty        :%ld:",ptr_st_pstn_actn->l_new_qty );
    fn_userlog ( c_ServiceName,"l_new_rt         :%ld:",ptr_st_pstn_actn->l_new_rt );
    fn_userlog ( c_ServiceName,"l_exec_qty       :%ld:",ptr_st_pstn_actn->l_exec_qty );
    fn_userlog ( c_ServiceName,"l_exec_rt        :%ld:",ptr_st_pstn_actn->l_exec_rt );
    fn_userlog ( c_ServiceName,"l_fresh_qty      :%ld:",ptr_st_pstn_actn->l_fresh_qty );
    fn_userlog ( c_ServiceName,"l_cover_qty      :%ld:",ptr_st_pstn_actn->l_cover_qty );
    fn_userlog ( c_ServiceName,"d_add_mrgn_amt   :%lf:",ptr_st_pstn_actn->d_add_mrgn_amt );
    fn_userlog ( c_ServiceName,"l_curr_rt        :%ld:",ptr_st_pstn_actn->l_curr_rt );
    fn_userlog ( c_ServiceName,"c_ref_rmrks      :%s:",ptr_st_pstn_actn->c_ref_rmrks );
  }

  c_upos_avl = 'Y';

	EXEC SQL
    SELECT  FUS_CLM_MTCH_ACCNT,
            FUS_XCHNG_CD,
            FUS_INDSTK,
            FUS_UNDRLYNG,
            FUS_UIBUY_QTY,
            FUS_UIBUY_VAL,
            FUS_UISELL_QTY,
            FUS_UISELL_VAL,
            FUS_UEXBUY_QTY,
            FUS_UEXBUY_VAL,
            FUS_UEXSELL_QTY,
            FUS_UEXSELL_VAL,
            FUS_UBUY_EXCTD_QTY,
            FUS_USELL_EXCTD_QTY,
            FUS_UOPNPSTN_FLW,
            FUS_UOPNPSTN_QTY,
            FUS_UOPNPSTN_VAL,
            FUS_UMTM_OPN_VAL,
            FUS_INITIAL_MRGN,
            FUS_SPAN_WEMULT_MRGN,
            FUS_EBA_EXPR_MRGN,
            FUS_USPAN_WENOV_MRGN,
            FUS_MULTIPLIER,
            FUS_USPAN_NENOV_MRGN,
            FUS_NET_OPTN_VAL,
            NVL(FUS_MIN_MRGN,0),
            NVL(FUS_MTM_FLG,'O'),
            FUS_BLCKD_PL,
            FUS_REQD_INITIAL_MRGN
	 INTO     :st_undpstn_crrnt.c_cln_mtch_accnt,
            :st_undpstn_crrnt.c_xchng_cd,
            :st_undpstn_crrnt.c_indstk,
            :st_undpstn_crrnt.c_undrlyng,
            :st_undpstn_crrnt.l_uibuy_qty,
            :st_undpstn_crrnt.d_uibuy_val,
            :st_undpstn_crrnt.l_uisell_qty,
            :st_undpstn_crrnt.d_uisell_val,
            :st_undpstn_crrnt.l_uexbuy_qty,
            :st_undpstn_crrnt.d_uexbuy_val,
            :st_undpstn_crrnt.l_uexsell_qty,
            :st_undpstn_crrnt.d_uexsell_val,
            :st_undpstn_crrnt.l_ubuy_exctd_qty,
            :st_undpstn_crrnt.l_usell_exctd_qty,
            :st_undpstn_crrnt.c_uopnpstn_flw,
            :st_undpstn_crrnt.l_uopnpstn_qty,
            :st_undpstn_crrnt.d_uopnpstn_val,
            :st_undpstn_crrnt.d_umtm_opn_val,
            :st_undpstn_crrnt.d_initial_mrgn,
            :st_undpstn_crrnt.d_span_wemult_mrgn,
            :st_undpstn_crrnt.d_eba_expr_mrgn,
            :st_undpstn_crrnt.d_uspan_wenov_mrgn,
            :st_undpstn_crrnt.d_multpr,
            :st_undpstn_crrnt.d_uspan_nenov_mrgn,
            :st_undpstn_crrnt.d_net_optn_val,
            :st_undpstn_crrnt.d_min_mrgn,
            :st_undpstn_crrnt.c_mtm_flg,
            :st_undpstn_crrnt.d_blckd_pl,
            :st_undpstn_crrnt.d_reqd_initial_mrgn
    FROM    FUS_FO_UNDRLYNG_SPN_PSTN
    WHERE   FUS_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND     FUS_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
    AND     FUS_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng;

    if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog ( c_ServiceName, "S31690", SQLMSG, c_err_msg);
      return -1;
    }

    if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {

      return -1;
    }

  /**** If a position doesnot exists, initialise the position values to default ****/

  if ( SQLCODE == NO_DATA_FOUND )
  {
		strcpy( st_undpstn_crrnt.c_cln_mtch_accnt, ptr_st_pstn_actn->c_cln_mtch_accnt );
    strcpy( st_undpstn_crrnt.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
    strcpy( st_undpstn_crrnt.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
    st_undpstn_crrnt.c_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
    st_undpstn_crrnt.l_uibuy_qty= 0;
    st_undpstn_crrnt.d_uibuy_val= 0;
    st_undpstn_crrnt.l_uisell_qty= 0;
    st_undpstn_crrnt.d_uisell_val= 0;
    st_undpstn_crrnt.l_uexbuy_qty= 0;
    st_undpstn_crrnt.d_uexbuy_val= 0;
    st_undpstn_crrnt.l_uexsell_qty= 0;
    st_undpstn_crrnt.d_uexsell_val= 0;
    st_undpstn_crrnt.l_ubuy_exctd_qty= 0;
    st_undpstn_crrnt.l_usell_exctd_qty = 0;
    st_undpstn_crrnt.c_uopnpstn_flw = 'N';
    st_undpstn_crrnt.l_uopnpstn_qty = 0;
    st_undpstn_crrnt.d_uopnpstn_val = 0;
    st_undpstn_crrnt.d_umtm_opn_val = 0;
    st_undpstn_crrnt.d_initial_mrgn = 0;
    st_undpstn_crrnt.d_span_wemult_mrgn = 0;
    st_undpstn_crrnt.d_eba_expr_mrgn  = 0;
    st_undpstn_crrnt.d_uspan_wenov_mrgn = 0;
    st_undpstn_crrnt.d_multpr = 0;
    st_undpstn_crrnt.d_uspan_nenov_mrgn = 0;
    st_undpstn_crrnt.d_net_optn_val = 0;
    st_undpstn_crrnt.d_min_mrgn = 0;
    st_undpstn_crrnt.d_blckd_pl = 0;
    st_undpstn_crrnt.d_reqd_initial_mrgn  = 0;
    st_undpstn_crrnt.d_umtm_opn_val= 0;
    c_mtm_flag = 'O';
    c_upos_avl = 'N';
  }

	if ( ( c_mtm_flag == UNDER_MTM ) && ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) && ( ptr_st_pstn_actn->l_session_id != 0 ))
  {
    fn_errlog(c_ServiceName, "B28009", DEFMSG, c_err_msg);
    return -1;
  }

	
  strcpy( st_undpstn_tobe.c_cln_mtch_accnt, ptr_st_pstn_actn->c_cln_mtch_accnt );
  strcpy( st_undpstn_tobe.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
  strcpy( st_undpstn_tobe.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
  st_undpstn_tobe.c_indstk            = ptr_st_pstn_actn->c_ctgry_indstk;
  st_undpstn_tobe.l_uibuy_qty         = 0;
  st_undpstn_tobe.d_uibuy_val         = 0;
  st_undpstn_tobe.l_uisell_qty        = 0;
  st_undpstn_tobe.d_uisell_val        = 0;
  st_undpstn_tobe.l_uexbuy_qty        = 0;
  st_undpstn_tobe.d_uexbuy_val        = 0;
  st_undpstn_tobe.l_uexsell_qty       = 0;
  st_undpstn_tobe.d_uexsell_val       = 0;
  st_undpstn_tobe.l_ubuy_exctd_qty    = 0;
  st_undpstn_tobe.l_usell_exctd_qty   = 0;
  st_undpstn_tobe.c_uopnpstn_flw      = 'N';
  st_undpstn_tobe.l_uopnpstn_qty      = 0;
  st_undpstn_tobe.d_uopnpstn_val      = 0;
  st_undpstn_tobe.d_umtm_opn_val      = 0;
  st_undpstn_tobe.d_initial_mrgn      = st_undpstn_crrnt.d_initial_mrgn ;
  st_undpstn_tobe.d_span_wemult_mrgn  = st_undpstn_crrnt.d_span_wemult_mrgn ;
  st_undpstn_tobe.d_eba_expr_mrgn     = st_undpstn_crrnt.d_eba_expr_mrgn ;
  st_undpstn_tobe.d_uspan_wenov_mrgn  = st_undpstn_crrnt.d_uspan_wenov_mrgn ;
  st_undpstn_tobe.d_multpr            = st_undpstn_crrnt.d_multpr ;
  st_undpstn_tobe.d_uspan_nenov_mrgn  = st_undpstn_crrnt.d_uspan_nenov_mrgn ;
  st_undpstn_tobe.d_net_optn_val      = st_undpstn_crrnt.d_net_optn_val ;
  st_undpstn_tobe.d_min_mrgn          = st_undpstn_crrnt.d_min_mrgn ;
  st_undpstn_tobe.d_blckd_pl          = st_undpstn_crrnt.d_blckd_pl ;
  st_undpstn_tobe.d_reqd_initial_mrgn = st_undpstn_crrnt.d_reqd_initial_mrgn ;
  st_undpstn_tobe.d_umtm_opn_val      = 0;
	

	i_returncode  = fn_call_modspn_actn ( c_ServiceName,
																				c_pipe_id,
                                      	ptr_st_pstn_actn,
                                      	&st_undpstn_crrnt,
                                      	&st_undpstn_tobe,
                                      	ptr_st_err_msg
                                   		);
	
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"i_returncode = :%d:",i_returncode);
	}

  if ( i_returncode != 0 )
  {
		switch(i_returncode )
		{
			case	INSUFFICIENT_LIMITS	:
			
				fn_userlog(c_ServiceName,"SPAN - Inside INSUFFICIENT_LIMITS.");
 				fn_errlog(c_ServiceName, "B21007", DEFMSG, c_err_msg); 

 				return  INSUFFICIENT_LIMITS;

			break;
		
		/**** Ver 7.0 added ****/	
			case PHYDLVRY_MTM :
			
				fn_errlog(c_ServiceName, "B28009", DEFMSG, c_err_msg);
				return -1;
		
			break;
		}

    return -1;
  }

  if ( st_undpstn_tobe.l_uopnpstn_qty > 0 )
  {
    st_undpstn_tobe.c_uopnpstn_flw	= BUY;
  }
  else if ( st_undpstn_tobe.l_uopnpstn_qty < 0 )
  {
    st_undpstn_tobe.c_uopnpstn_flw = SELL;
  }
  else
  {
    st_undpstn_tobe.c_uopnpstn_flw = NEUTRAL;
  }
	
	/** Update the underlying level position on to the table **/

  if( c_upos_avl == 'N')
  {
 /******Commented in Ver VQC***
     EXEC SQL
      *SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY') commented in Ver 1.7 **
      SELECT  TO_CHAR( GREATEST(EXG_NXT_TRD_DT,EXG_TMP_TRD_DT), 'DD-Mon-YYYY' ) ***Ver 1.7 ***
      INTO   :c_trade_dt
      FROM   EXG_XCHNG_MSTR
      WHERE  EXG_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
 **  AND    EXG_MKT_TYP = 'D';  **commented in ver 6.3**
		  AND    EXG_MKT_TYP = :c_mkt_typ;  ***Added in Ver 6.3****

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31695", SQLMSG, c_err_msg );   
      return -1;
    }

  *************************/
 
		/*** Added in VER 9.3 starts here : Real time margin reporting ( Fetching UCC code ) ***/

  	EXEC SQL
  	SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
		INTO  :c_ucc_cd
  	FROM  CLM_CLNT_MSTR
  	WHERE CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt;

  	if (  SQLCODE != 0 )
  	{
    	fn_userlog(c_ServiceName,"VER 9.3 -- fn_cal_mod_pos : Error while fetching UCC code for :%s:", ptr_st_pstn_actn->c_cln_mtch_accnt);
    	fn_errlog ( c_ServiceName, "S31700", SQLMSG, c_err_msg);
    	return -1;
  	}

  	if(DEBUG_MSG_LVL_3)
    	fn_userlog(c_ServiceName,"VER 9.3 -- fn_cal_mod_pos : MAtch ID :%s: have ucc code :%s:", ptr_st_pstn_actn->c_cln_mtch_accnt, c_ucc_cd);

  	/*** VER 9.3 ends here ***/	
 
     EXEC SQL
      INSERT INTO FUS_FO_UNDRLYNG_SPN_PSTN
      (
				FUS_CLM_MTCH_ACCNT,
				FUS_XCHNG_CD,
				FUS_UNDRLYNG,
				FUS_INDSTK,
				FUS_UIBUY_QTY,
				FUS_UIBUY_VAL,
				FUS_UISELL_QTY,
				FUS_UISELL_VAL,
				FUS_UEXBUY_QTY,
				FUS_UEXBUY_VAL,
				FUS_UEXSELL_QTY,
				FUS_UEXSELL_VAL,
				FUS_UBUY_EXCTD_QTY,
				FUS_USELL_EXCTD_QTY,
				FUS_UOPNPSTN_FLW,
				FUS_UOPNPSTN_QTY,
				FUS_UOPNPSTN_VAL,
				FUS_UMTM_OPN_VAL,
				FUS_INITIAL_MRGN,
				FUS_SPAN_WEMULT_MRGN,
				FUS_EBA_EXPR_MRGN,
				FUS_USPAN_WENOV_MRGN,
				FUS_MULTIPLIER,
				FUS_USPAN_NENOV_MRGN,
				FUS_NET_OPTN_VAL,
				FUS_MTM_FLG,
				FUS_TRD_DT,
				FUS_NTNL_PL,
				FUS_BLCKD_PL,
				FUS_MIN_MRGN,
				FUS_REQD_INITIAL_MRGN,
				FUS_UCC_CD			/*** Added in VER 9.3 ***/
      )
      VALUES
      (
				:st_undpstn_tobe.c_cln_mtch_accnt,
        :st_undpstn_tobe.c_xchng_cd,
        :st_undpstn_tobe.c_undrlyng,
        :st_undpstn_tobe.c_indstk,
        :st_undpstn_tobe.l_uibuy_qty,
        :st_undpstn_tobe.d_uibuy_val,
        :st_undpstn_tobe.l_uisell_qty,
        :st_undpstn_tobe.d_uisell_val,
        :st_undpstn_tobe.l_uexbuy_qty,
        :st_undpstn_tobe.d_uexbuy_val,
        :st_undpstn_tobe.l_uexsell_qty,
        :st_undpstn_tobe.d_uexsell_val,
        :st_undpstn_tobe.l_ubuy_exctd_qty,
        :st_undpstn_tobe.l_usell_exctd_qty,
        :st_undpstn_tobe.c_uopnpstn_flw,
        :st_undpstn_tobe.l_uopnpstn_qty,
        :st_undpstn_tobe.d_uopnpstn_val,
        :st_undpstn_tobe.d_umtm_opn_val,
        :st_undpstn_tobe.d_initial_mrgn,
        :st_undpstn_tobe.d_span_wemult_mrgn,
        :st_undpstn_tobe.d_eba_expr_mrgn,
        :st_undpstn_tobe.d_uspan_wenov_mrgn,
        :st_undpstn_tobe.d_multpr,
        :st_undpstn_tobe.d_uspan_nenov_mrgn,
        :st_undpstn_tobe.d_net_optn_val,
        :st_undpstn_tobe.c_mtm_flg,
        :st_undpstn_tobe.c_trd_dt,
        :st_undpstn_tobe.d_ntnl_pl,
        :st_undpstn_tobe.d_blckd_pl	*	(-1), 
        :st_undpstn_tobe.d_min_mrgn,
        :st_undpstn_tobe.d_reqd_initial_mrgn,
				:c_ucc_cd			/*** Added in VER 9.3 ***/
      );

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31705", SQLMSG, c_err_msg );
        return -1;
      }
  }
  else
  {
    EXEC SQL
      UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
			SET     FUS_UIBUY_QTY         = :st_undpstn_tobe.l_uibuy_qty,
         			FUS_UIBUY_VAL         = :st_undpstn_tobe.d_uibuy_val,
         			FUS_UISELL_QTY        = :st_undpstn_tobe.l_uisell_qty,
         			FUS_UISELL_VAL        = :st_undpstn_tobe.d_uisell_val,
         			FUS_UEXBUY_QTY        = :st_undpstn_tobe.l_uexbuy_qty,
         			FUS_UEXBUY_VAL        = :st_undpstn_tobe.d_uexbuy_val,
         			FUS_UEXSELL_QTY       = :st_undpstn_tobe.l_uexsell_qty,
         			FUS_UEXSELL_VAL       = :st_undpstn_tobe.d_uexsell_val,
         			FUS_UBUY_EXCTD_QTY    = :st_undpstn_tobe.l_ubuy_exctd_qty,
         			FUS_USELL_EXCTD_QTY   = :st_undpstn_tobe.l_usell_exctd_qty,
         			FUS_UOPNPSTN_FLW      = :st_undpstn_tobe.c_uopnpstn_flw,
         			FUS_UOPNPSTN_QTY      = :st_undpstn_tobe.l_uopnpstn_qty,
         			FUS_UOPNPSTN_VAL      = :st_undpstn_tobe.d_uopnpstn_val,
         			FUS_UMTM_OPN_VAL      = :st_undpstn_tobe.d_umtm_opn_val,
         			FUS_INITIAL_MRGN      = :st_undpstn_tobe.d_initial_mrgn,
         			FUS_SPAN_WEMULT_MRGN  = :st_undpstn_tobe.d_span_wemult_mrgn,
         			FUS_EBA_EXPR_MRGN     = :st_undpstn_tobe.d_eba_expr_mrgn,
         			FUS_USPAN_WENOV_MRGN  = :st_undpstn_tobe.d_uspan_wenov_mrgn,
         			FUS_MULTIPLIER        = :st_undpstn_tobe.d_multpr,
        	 		FUS_USPAN_NENOV_MRGN  = :st_undpstn_tobe.d_uspan_nenov_mrgn,
         			FUS_NET_OPTN_VAL      = :st_undpstn_tobe.d_net_optn_val,
         			FUS_MTM_FLG           = :st_undpstn_tobe.c_mtm_flg,
         			FUS_NTNL_PL           = :st_undpstn_tobe.d_ntnl_pl,
         			/*** FUS_BLCKD_PL          = :st_undpstn_tobe.d_blckd_pl	*	(-1), commented On 09-dec-11 ***/
         			FUS_BLCKD_PL          = :st_undpstn_tobe.d_blckd_pl	,
         			FUS_MIN_MRGN          = :st_undpstn_tobe.d_min_mrgn,
         			FUS_REQD_INITIAL_MRGN = :st_undpstn_tobe.d_reqd_initial_mrgn
 			WHERE   FUS_CLM_MTCH_ACCNT    = :ptr_st_pstn_actn->c_cln_mtch_accnt
 			AND     FUS_XCHNG_CD          = :ptr_st_pstn_actn->c_xchng_cd
 			AND     FUS_UNDRLYNG          = :ptr_st_pstn_actn->c_undrlyng;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31710", SQLMSG, c_err_msg );
      return -1;
    }
  }

  /************** ver 7.7 starts **************/
  c_extra_update = 'N';
  i_returncode  = fn_cal_trg_prc( c_ServiceName , ptr_st_pstn_actn ,c_extra_update,
                                      ptr_st_err_msg  );

  if( i_returncode != 0 )
  {
      fn_errlog(c_ServiceName, "S31715",LIBMSG, c_err_msg );
      fn_userlog(c_ServiceName,"ERROR IN fn_cal_trg_prc");
  }
  /************** ver 7.7 ends *****/

  if ( ( c_mtm_flag == UNDER_MTM ) && ( st_undpstn_tobe.l_uibuy_qty== 0 ) && ( st_undpstn_tobe.l_uexbuy_qty == 0 )
        && ( st_undpstn_tobe.l_uisell_qty == 0 )  && ( st_undpstn_tobe.l_uexsell_qty == 0 ) )
  {
    ptr_st_pstn_actn->c_mtm_flag = NO_OPEN_ORDERS;
  }
  else if ( c_mtm_flag == UNDER_MTM )
  {
    ptr_st_pstn_actn->c_mtm_flag = FOR_REMARKS_ENTRY;
  }

  return 0;

}

int fn_call_modspn_actn	( char *c_ServiceName,
                       		char *c_pipe_id,
                       		struct st_pstn_actn *ptr_st_pstn_actn,
                       		struct st_fus_undrlyng_pstn	*ptr_st_undfut_pos_crrnt,
                       		struct st_fus_undrlyng_pstn	*ptr_st_undfut_pos_to_be,
                       		struct st_err_msg *ptr_st_err_msg
												)
{

	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  char c_narration_id[4];
  char c_dr_without_lmt_flg = '\0'; /** initialized in ver 7.6 ***/
  char c_prmum_dr_without_lmt_flg;
  char c_pos_avl;
  /*** char c_tmp_rmrks [ 133 ] ; ***commented in version VQC***/
  char c_inp_strng[ 16000 ]; /*** changed from 4000 to 16000 in Ver 7.1 ***/ 
  char c_inp_strng1[ 16000 ]; /*** changed from 4000 to 16000 in Ver 7.1 ***/
  char c_inp_strng2[ 16000 ];
  char c_inp_strng11[ 16000 ];
  char c_inp_strng22[ 16000 ];
  char c_op_strng[ 16000 ];
  char c_op_strng1[ 16000 ];
  char c_op_strng2[ 16000 ];
  char c_seq_num1[12000];
  char c_seq_num2[12000];
	char c_mrgn_indctr[3];
 /****Commented in VQC**
  char c_opseq_num1[20];
  char c_opseq_num2[20];
 *******/
  char c_mtch_accnt1[11];
  char c_mtch_accnt2[11];
  char c_spn_mrgn1[20];
  char c_spn_mrgn2[20];
  char c_nov1[20];
  char c_nov2[20];
  char c_total_mrgn1[20];
  char c_total_mrgn2[20];
	char c_expry_dt[10];
	varchar c_test_err_msg[10000];			/***	DataType Changed From Char To Varchar In VQC	***/
	char c_strk_prc[20];       /*** Ver 1.2 ***/
	char c_xchng_cd1[3];			/*** Ver 1.8 ***/
  char c_xchng_cd2[3];      /*** Ver 1.8 ***/
  char *null_ptr  = 0;
  char c_tmp_rmrks_ob[133]="\0";/** ver 8.3 **/

  int i_returncode = 0;			/***	Initialised In VQC	***/
  int i_rtrn_cd1	 = 0;			/***  Initialised In VQC  ***/
	int i_expsr_rtrn = 0;			/***  Initialised In VQC  ***/
	int i_cntrct_cnt = 0;		/*** Ver 1.2 ***/
  int i_sell_square_off_chk = 0;    /*** Ver 1.4 ***/

  long  l_max_opn_qty = 0;
  long  l_min_opn_qty = 0;
  long  l_temp_qty    = 0;
  long  l_prtfl_seq1  = 0;
  long  l_prtfl_seq2  = 0;
  long  li_len_tobuf  = 0;
	long	l_length1     = 0;
	long	l_length2     = 0;
	long	l_cntr	      =	0;
	
	/*** Ver 1.5 ***/
  long l_ose_qty        = 0;
  long l_obe_qty        = 0;
  long l_ibuy_qty       = 0;
  long l_ebuy_qty       = 0;
  long l_isell_qty      = 0;
  long l_esell_qty      = 0;
  long l_total_buy_qty  = 0;
  long l_total_sell_qty = 0;
  long l_cover_qty      = 0;
  /*** Ver 1.5 ***/

	/*** long	l_strike_prc  = 0;  -- Ver 1.2 ***/
/*long	l_prmum_qty   = 0;	VQC	***/
	long  l_basket_id   = 0;

  double d_diff_mrgn       = 0;
  double d_diff_pl         = 0;
  double d_balance_amt     = 0;
	double d_balance_amt_tmp = 0.0;       /*** Ver 6.8 ***/
 /*** double d_bal_to_apply    = 0;  ****cemmented in VQC**/
  double d_ltp             = 0;
 	double d_spn_mrgn1       = 0;
  double d_spn_mrgn2       = 0;
  double d_nov1            = 0;
  double d_nov2            = 0;
  double d_total_mrgn1     = 0;
  double d_total_mrgn2     = 0;
  double d_cntrct_pl    	= 0.0;
  double d_ntnl_pl      	= 0.0;
 /*** double d_blckd_amnt   	= 0.0;  ****cemmented in VQC**/
  double d_opt_prmum    	= 0.0;
	double d_blkd_prmum   	= 0.0;
	double d_clsng_prc			=	0.0;
	double d_expsr_mrgn			=	0.0;
	double d_min_expsr_mrgn	=	0.0;
	double d_min_expsr			=	0.0;
	double  d_expsr = 0.0;
	double  d_upd_amount= 0.0;  /*** Added On 08-Dec-2011 ***/
	double  d_undrlyng_pl = 0.0;  /*** Added On 08-Dec-2011 ***/
	double d_strike_prc = 0.0;    /*** Ver 1.2 ***/
  double d_square_off_prmum = 0.0;    /*** Ver 3.4 ***/

  /**** Ver 2.5 ****/
  double d_total_amount=0.0;
 /*** double d_current_limit=0.0;  ****cemmented in VQC**/
  double d_premium = 0.0;
  char c_pnl_insufficient_flg='N';
  char c_mrgn_insufficient_flg='N';
  char c_prm_insufficient_flg='N';
  /*** Ver 2.5 Ends Here ***/
	char c_balance_flg = 'N';         /*** Ver 6.8 ***/
	char c_dlvrmtm_flg = 'O';				  /*** Ver 7.0 ***/	

  /*** Ver 8.6 Starts Here ***/
  int    i_ret_val=0;

  double d_spn_bmrgn1=0;
  double d_bnov1=0;
  double d_total_bmrgn1=0;

  double d_spn_bmrgn2=0;
  double d_bnov2=0;
  double d_total_bmrgn2=0;

  double d_spn_bmrgn=0;
  double d_bnov=0;
  double d_total_bmrgn=0;
  /*** Ver 8.6 Ends here ***/

	EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;
    char  sql_cln_mtch_accnt[11];
    char  sql_xchng_cd[4];
    char  sql_prd_typ;
    char  sql_undrlyng[7];
    varchar c_exp_dt[LEN_DATE];
    varchar c_trd_dt[12];
		varchar c_stock_cd [20];


  /***  double d_mrgn_blkd = 0.0;   ****cemmented in VQC**/

    /** Current contract level positions of other contracts in the same underlying **/

    struct st_fcp_cntrct_pstn	st_cntrct_pstn_crrnt	;

    /** Copy of contract level position on which action is to be done taken before applying the action **/

  /* struct st_fcp_cntrct_pstn	st_cntrct_pstn_old	;			Commented In VQC	***/

    /** Contract level position on which action is to be done **/

    struct st_fcp_cntrct_pstn st_cntrct_pstn_md_rc;

	  /** Contract level position on which Premium Square Off Action is to be done **/
		struct st_fcp_cntrct_pstn st_cntrct_pstn_prmum_sqroff;			/*** Ver 1.1 ***/

  EXEC SQL END DECLARE SECTION;

	MEMSET(st_cntrct_pstn_prmum_sqroff);   /*** Ver 3.4 ***/
  MEMSET(c_tmp_rmrks_ob);  /** Ver 8.3 **/

  ptr_fml_Obuf == NULL; /****Added in Ver VQC****/

  ptr_fml_Obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31720", TPMSG, c_err_msg);  
    return -1;
  }

  /*** ptr_fml_Ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);		*** Commented in ver 1.2 ***/

  ptr_fml_Ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN*10); /*** Added in ver 1.2 for increase buffer size ***/	

  if ( ptr_fml_Ibuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31725", TPMSG, c_err_msg); 
    tpfree((char *)ptr_fml_Obuf);
    return -1;
  }
	

	strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
  strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);

  sql_prd_typ = ptr_st_pstn_actn->c_prd_typ;

  /** This bit of code down below will fetch all the contract level **/
  /** positions. Then it will find the contract on which the input  **/
  /** action is to be performed and then perform it. It then summs  **/
  /** up all the contract level postion to arrive at a consolidated **/
  /** underlying level position. It then recalculates the margin.   **/
  /** This bit of code need not be performed for actions which do   **/
  /** not involve a change in postion                               **/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Building new underlying position" );
  }

/******Ver 6.3******/
  EXEC  SQL
    SELECT  SPN_PRTFL1_SEQ.NEXTVAL
    INTO    :l_prtfl_seq1
    FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31730",SQLMSG, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);			/***	VQC	***/
		tpfree((char *)ptr_fml_Ibuf);			/***	VQC	***/
    return  -1;
  }

/****Ver 6.3****/
  EXEC  SQL
    SELECT  SPN_PRTFL1_SEQ.NEXTVAL
    INTO    :l_prtfl_seq2
    FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31735",SQLMSG, c_err_msg); 
	  tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
    tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/
    return  -1;
  }

	/*** Ver 1.2 starts here ***/
	MEMSET(c_inp_strng);
	MEMSET(c_inp_strng1);
	MEMSET(c_inp_strng2);
	MEMSET(c_inp_strng11);
	MEMSET(c_inp_strng22);
	/*** Ver 1.2 Ends here ***/

  strcpy(c_inp_strng1,"1^");
  strcpy(c_inp_strng2,"|");
	/** Ver 1.8 starts ***/
	if(strcmp(sql_xchng_cd,"NFO")== 0)
	{
  	strcat(c_inp_strng1,"NSE^");
	}
	else if(strcmp(sql_xchng_cd,"BFO") == 0)
	{
  	strcat(c_inp_strng1,"BSE^");
	}
	/** Ver 1.8 Ends   ***/
	sprintf(c_seq_num1,"%ld",l_prtfl_seq1);
  sprintf(c_seq_num2,"%ld",l_prtfl_seq2);

  strcat( c_inp_strng1 , c_seq_num1 );
  strcat( c_inp_strng2 , c_seq_num2 );

  strcat(c_inp_strng1,"^");
  strcat(c_inp_strng2,"^");

	EXEC SQL
    SELECT  FCB_UNDRLYNG_BSKT_ID
    INTO    :l_basket_id
    FROM    FCB_FO_CLN_BSKT_ALLTD
    WHERE   FCB_CLN_LVL = ( SELECT  CLM_CLNT_LVL
                            FROM    CLM_CLNT_MSTR
                            WHERE   CLM_MTCH_ACCNT = :sql_cln_mtch_accnt);
  if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31740",SQLMSG, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
    tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/
    return  -1;
  }

 	/** Prepare a list of contracts from contract position table **/

  EXEC SQL ALLOCATE :sys_cursor;

    EXEC SQL EXECUTE
      BEGIN
         OPEN :sys_cursor FOR
					SELECT  FCP_CLM_MTCH_ACCNT,
                  FCP_XCHNG_CD,
                  FCP_PRDCT_TYP,
                  FCP_INDSTK,
                  FCP_UNDRLYNG,
                  TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
                  FCP_EXER_TYP,
                  FCP_STRK_PRC,
                  FCP_OPT_TYP,
                  FCP_IBUY_QTY,
                  FCP_IBUY_ORD_VAL,
                  FCP_ISELL_QTY,
                  FCP_ISELL_ORD_VAL,
                  FCP_EXBUY_QTY,
                  FCP_EXBUY_ORD_VAL,
                  FCP_EXSELL_QTY,
                  FCP_EXSELL_ORD_VAL,
                  FCP_BUY_EXCTD_QTY,
                  FCP_SELL_EXCTD_QTY,
                  FCP_OPNPSTN_FLW,
                  FCP_OPNPSTN_QTY,
                  FCP_OPNPSTN_VAL,
                  FCP_MTM_OPN_VAL,
                  FCP_OPT_PREMIUM,
									NVL(FCP_MTM_FLG,'O')							/*** Ver 7.0 ***/
            FROM  FCP_FO_SPN_CNTRCT_PSTN
            WHERE FCP_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
            AND   FCP_XCHNG_CD        = :sql_xchng_cd
            AND   FCP_UNDRLYNG        = :sql_undrlyng
            ORDER BY FCP_EXPRY_DT ASC;
          END;
        END-EXEC;

	  if ( SQLCODE != 0 )
    {
			EXEC SQL CLOSE :sys_cursor;   /*** Ver 7.5 ***/
      EXEC SQL FREE :sys_cursor;
      fn_errlog ( c_ServiceName, "S31745", SQLMSG, c_err_msg);
		  tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
    	tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/
      return -1;
    }

    c_pos_avl = 'N';

    /** Fetch one contract at a time from the list. If the fetched  **/
    /** contract is the one we need to apply the change apply it.   **/
    /** Else simply add the contract to  underlying level position  **/

		while ( 1 )
    {
      d_opt_prmum 			= 0.0;
			d_expsr_mrgn			=	0.0;
			d_min_expsr_mrgn	=	0.0;
			d_cntrct_pl = 0.0;
      i_sell_square_off_chk = 0;  /*** Ver 1.4 ***/
			c_dlvrmtm_flg = 'O';        /*** Ver 7.0 ***/

			MEMSET (c_exp_dt);

      EXEC SQL  FETCH  :sys_cursor
								 INTO  :st_cntrct_pstn_crrnt.c_cln_mtch_accnt,
                       :st_cntrct_pstn_crrnt.c_xchng_cd,
                       :st_cntrct_pstn_crrnt.c_prd_typ,
                       :st_cntrct_pstn_crrnt.c_ctgry_indstk,
                       :st_cntrct_pstn_crrnt.c_undrlyng,
                       :c_exp_dt,
                       :st_cntrct_pstn_crrnt.c_exer_typ,
                       :st_cntrct_pstn_crrnt.l_strike_prc,
                       :st_cntrct_pstn_crrnt.c_opt_typ,
                       :st_cntrct_pstn_crrnt.l_ibuy_qty,
                       :st_cntrct_pstn_crrnt.d_ibuy_ord_val,
                       :st_cntrct_pstn_crrnt.l_isell_qty,
                       :st_cntrct_pstn_crrnt.d_isell_ord_val,
                       :st_cntrct_pstn_crrnt.l_exbuy_qty,
                       :st_cntrct_pstn_crrnt.d_exbuy_ord_val,
                       :st_cntrct_pstn_crrnt.l_exsell_qty,
                       :st_cntrct_pstn_crrnt.d_exsell_ord_val,
                       :st_cntrct_pstn_crrnt.l_buy_exctd_qty,
                       :st_cntrct_pstn_crrnt.l_sell_exctd_qty,
                       :st_cntrct_pstn_crrnt.c_opnpstn_flw,
                       :st_cntrct_pstn_crrnt.l_opnpstn_qty,
                       :st_cntrct_pstn_crrnt.d_opnpstn_val,
                       :st_cntrct_pstn_crrnt.d_mtm_opn_val,
                       :d_blkd_prmum,
											 :c_dlvrmtm_flg;					/*** Ver 7.0 ***/

      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }

        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31750", SQLMSG, c_err_msg ); 
				tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
				tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/
        return -1;
      }
		
				if(DEBUG_MSG_LVL_0)            /* Ver 7.5 */
    		{
					fn_userlog ( c_ServiceName, "Kiran fetching MTM flag is :%c:",c_dlvrmtm_flg);
      		fn_userlog (c_ServiceName, "user id is :%s:",ptr_st_pstn_actn->c_user_id);
      		fn_userlog (c_ServiceName, "session id is :%ld:",ptr_st_pstn_actn->l_session_id);
				}

			/****** Ver 7.0 started *****/
		  if ( ( c_dlvrmtm_flg== UNDER_PHYDLVRY_MTM ) && ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) && ( ptr_st_pstn_actn->l_session_id != 0 ))
			{
				EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
				fn_userlog(c_ServiceName,"In Under physical delivery mtm condition");
				tpfree((char *)ptr_fml_Obuf);
        tpfree((char *)ptr_fml_Ibuf);
				return -7;
			}

			/****** Ver 7.0 Ended ******/	

			i_cntrct_cnt++;					/*** Ver 1.2 ***/

      SETNULL( c_exp_dt );
      strcpy ( st_cntrct_pstn_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
      rtrim(st_cntrct_pstn_crrnt.c_xchng_cd);
      rtrim(st_cntrct_pstn_crrnt.c_undrlyng);
      rtrim(st_cntrct_pstn_crrnt.c_expry_dt);


 			if( (strcmp(st_cntrct_pstn_crrnt.c_xchng_cd,ptr_st_pstn_actn->c_xchng_cd) == 0 ) &&
          (st_cntrct_pstn_crrnt.c_prd_typ == ptr_st_pstn_actn->c_prd_typ) &&
          (strcmp(st_cntrct_pstn_crrnt.c_undrlyng,ptr_st_pstn_actn->c_undrlyng) == 0 ) &&
          (strcasecmp(st_cntrct_pstn_crrnt.c_expry_dt,ptr_st_pstn_actn->c_expry_dt) == 0 ) &&
          (st_cntrct_pstn_crrnt.c_opt_typ == ptr_st_pstn_actn->c_opt_typ) &&
					(st_cntrct_pstn_crrnt.l_strike_prc == ptr_st_pstn_actn->l_strike_prc)  &&
          (st_cntrct_pstn_crrnt.c_exer_typ == ptr_st_pstn_actn->c_exrc_typ) )
      {
        /*memcpy ( &st_cntrct_pstn_old ,&st_cntrct_pstn_crrnt,sizeof( st_cntrct_pstn_old )); Commented In VQC	***/

        i_returncode =  fn_apply_spn_actn ( c_ServiceName,
                                            ptr_st_pstn_actn,
                                            &st_cntrct_pstn_crrnt,
                                            ptr_st_err_msg );
        if ( i_returncode == -1 )
        {
					EXEC SQL CLOSE :sys_cursor;       /***  VQC ***/
					EXEC SQL FREE :sys_cursor;	  		/***  VQC ***/	    
					tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
					tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/
          return -1;
        }

        memcpy ( &st_cntrct_pstn_md_rc , &st_cntrct_pstn_crrnt , sizeof( st_cntrct_pstn_md_rc	));

				if ( st_cntrct_pstn_crrnt.c_prd_typ ==  'O' )
      	{
        	if( st_cntrct_pstn_crrnt.l_ibuy_qty  > 0 && ptr_st_pstn_actn->c_trnsctn_flw	==	'B' )
        	{
						if(DEBUG_MSG_LVL_3)
						{
          		fn_userlog(c_ServiceName,"SPAN Inside Option Buy Position.");
           	}
						d_opt_prmum = st_cntrct_pstn_crrnt.d_ibuy_ord_val	;
        	}

        	d_total_prmum = d_blkd_prmum	-	d_opt_prmum  ;

  				/** if(DEBUG_MSG_LVL_0)  ** ver 5.7 **/
  				if(DEBUG_MSG_LVL_3)    /** ver 5.7 **/
					{
        		fn_userlog(c_ServiceName,"SPAN  - d_opt_prmum Is :%lf:",d_opt_prmum);
        		fn_userlog(c_ServiceName,"SPAN  - d_total_prmum Is :%lf:",d_total_prmum);
        		fn_userlog(c_ServiceName,"SPAN  - d_blkd_prmum  Is :%lf:",d_blkd_prmum);
					}

					switch ( ptr_st_pstn_actn->l_actn_typ )
        	{
          	case  ORS_NEW_ORD_REQ:

 	           strcpy( c_narration_id , ON_ORDER_PLACEMENT);
  	         c_prmum_dr_without_lmt_flg	= DEBIT_WHEN_LIMIT;
    	       break;

          	case  ORS_MOD_ORD_REQ:

           	 	strcpy( c_narration_id , ON_MODIFICATION_PLACEMENT);
            	c_prmum_dr_without_lmt_flg	= DEBIT_WHEN_LIMIT;
            break;

 	         	default:
            	strcpy( c_err_msg, "Invalid action type");  
            	fn_userlog ( c_ServiceName,"Invalid action type");
            	return -1;
            break;
        	}

					if ( d_total_prmum  <  0 )
        	{

            /*** ver 8.3 starts ***/
            MEMSET(c_tmp_rmrks_ob);
            strcpy ( c_tmp_rmrks_ob, ptr_st_pstn_actn->c_ref_rmrks );
            sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"OPTPREMBUYALLWD |%s",c_tmp_rmrks_ob);
            rtrim( ptr_st_pstn_actn->c_ref_rmrks);
            /*** ver 8.3 ends *****/

						d_balance_amt  = 0.0;		/*** Ver 1.2 ***/

          	i_returncode = fn_upd_spnlimits( c_ServiceName,
            	                            ptr_st_pstn_actn,
              	                          ptr_st_err_msg,
                	                        c_narration_id,
                  	                      c_prmum_dr_without_lmt_flg,
                    	                    d_total_prmum,
                      	                  &d_balance_amt);
          	if ( i_returncode != 0 )
          	{
            	switch ( i_returncode )
            	{
              	case  INSUFFICIENT_LIMITS :

								/*** Ver 1.1 start ***/
				
								if ( ( (st_cntrct_pstn_crrnt.c_opnpstn_flw !=   ptr_st_pstn_actn->c_trnsctn_flw)
											&& st_cntrct_pstn_crrnt.c_opnpstn_flw !='N')
										 && ( abs(st_cntrct_pstn_crrnt.l_opnpstn_qty) >=  abs(ptr_st_pstn_actn->l_new_qty) )  )
								{
									if(DEBUG_MSG_LVL_0)
									{
										fn_userlog(c_ServiceName,"SPAN Insufficient Limits in Sell Squre Off Check.");
									}
									ptr_st_pstn_actn->l_actn_typ = SYSTEM_PLACE_ORDER;
									c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
									i_sell_square_off_chk = 1;
									d_square_off_prmum = d_total_prmum;
									MEMSET(st_cntrct_pstn_prmum_sqroff);
									memcpy ( &st_cntrct_pstn_prmum_sqroff, &st_cntrct_pstn_crrnt, sizeof( st_cntrct_pstn_prmum_sqroff));
									strcpy(st_cntrct_pstn_prmum_sqroff.c_expry_dt,(char*)c_exp_dt.arr);
									
									if(DEBUG_MSG_LVL_3)
									{
										fn_userlog(c_ServiceName,"SPAN Action Type Is :%ld:",ptr_st_pstn_actn->l_actn_typ);
										fn_userlog(c_ServiceName,"Expiry date Is :%s:",st_cntrct_pstn_prmum_sqroff.c_expry_dt);
									}
								}

								/*** Ver 1.1 Ends ***/

								if( i_sell_square_off_chk != 1 )	/*** Ver 1.1 ***/
								{
									fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg); 
                  /***** Ver 2.5 Starts Here ****
									EXEC SQL CLOSE :sys_cursor;
									tpfree((char *)ptr_fml_Obuf);
									tpfree((char *)ptr_fml_Ibuf);
									return INSUFFICIENT_LIMITS  i;
                  ******* Ver 2.5 *******/
                  
                  /**** Ver 2.5 Starts Here ***/
                  fn_userlog(c_ServiceName,"Inside INSUFFICIENT_LIMITS Option Premium Block of existing positions");
                  /*** Ver 6.8 Starts ***/
                  if( c_balance_flg != 'Y' )
                  {
                    d_balance_amt_tmp = d_balance_amt;
                    c_balance_flg = 'Y';
                  }
                  /*** Ver 6.8 Ends ***/

                  d_premium = d_total_prmum;
                  c_prm_insufficient_flg ='Y';
                  /**** Ver 2.5 Ends Here ***/
							  } 

								break;	/*** Ver 1.1 ***/

 	              default:

                fn_errlog( c_ServiceName, "S31755",LIBMSG , c_err_msg);
                EXEC SQL CLOSE :sys_cursor;
                EXEC SQL FREE  :sys_cursor;			/***	VQC	***/
                tpfree((char *)ptr_fml_Obuf);
                tpfree((char *)ptr_fml_Ibuf);
                return -1;
            	}
          	}

						if( i_sell_square_off_chk != 1 )			/*** Ver 1.1 ***/
						{
							EXEC SQL
								UPDATE  FCP_FO_SPN_CNTRCT_PSTN
								SET     FCP_OPT_PREMIUM     = :d_total_prmum * (-1)  +  FCP_OPT_PREMIUM
								WHERE   FCP_CLM_MTCH_ACCNT  = :st_cntrct_pstn_crrnt.c_cln_mtch_accnt
								AND     FCP_XCHNG_CD        = :st_cntrct_pstn_crrnt.c_xchng_cd
								AND     FCP_PRDCT_TYP       = :st_cntrct_pstn_crrnt.c_prd_typ
								AND     FCP_UNDRLYNG        = :st_cntrct_pstn_crrnt.c_undrlyng
								AND     FCP_EXPRY_DT        = :c_exp_dt
								AND     FCP_EXER_TYP        = :st_cntrct_pstn_crrnt.c_exer_typ
								AND     FCP_OPT_TYP         = :st_cntrct_pstn_crrnt.c_opt_typ
								AND     FCP_STRK_PRC        = :st_cntrct_pstn_crrnt.l_strike_prc;

							if ( SQLCODE != 0 )
							{
								fn_errlog(c_ServiceName, "S31760", SQLMSG, c_err_msg);
								EXEC SQL CLOSE :sys_cursor;
                EXEC SQL FREE  :sys_cursor;			/***	VQC	***/
								tpfree((char *)ptr_fml_Obuf);
								tpfree((char *)ptr_fml_Ibuf);
								return -1;
							}
						}	
            /*** ver 8.3 starts ***/
            strcpy ( ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks_ob);
            MEMSET(c_tmp_rmrks_ob);
            /*** ver 8.3 ends *****/
        	}

      	}
				
				if ( (st_cntrct_pstn_crrnt.c_opnpstn_flw !=   ptr_st_pstn_actn->c_trnsctn_flw)
						&& ( abs(st_cntrct_pstn_crrnt.l_opnpstn_qty)  >=  abs(ptr_st_pstn_actn->l_new_qty) )  )
				{
      	/** if(DEBUG_MSG_LVL_0)  ** Ver 5.7 **/
      	if(DEBUG_MSG_LVL_3)     /** Ver 5.7 **/
				{
					fn_userlog(c_ServiceName,"Inside Squre Off Check.");
				}

					/*** Commented in ver 1.5
					ptr_st_pstn_actn->l_actn_typ = SYSTEM_PLACE_ORDER ;
  				*****************************/

					/******************************* Ver 1.5 ********************************************
           Consideration of allready placed square off order given to cover quantity
           for decide whether is it perfect square off to give DEBIT_TILL_LIMIT treatment
           or it having extra quantity which get place under   DEBIT_WHEN_LIMIT criteria.
          *************************************************************************************/

          l_ose_qty        = 0;
          l_obe_qty        = 0;
          l_ibuy_qty       = 0;
          l_ebuy_qty       = 0;
          l_isell_qty      = 0;
          l_esell_qty      = 0;
          l_total_buy_qty  = 0;
          l_total_sell_qty = 0;
          l_cover_qty      = 0;

          if ( st_cntrct_pstn_crrnt.l_ibuy_qty != 0 )
          {
            l_ose_qty  = fn_maxl(st_cntrct_pstn_crrnt.l_sell_exctd_qty * (-1) - st_cntrct_pstn_crrnt.l_buy_exctd_qty, 0 );
            l_ibuy_qty = fn_maxl(st_cntrct_pstn_crrnt.l_ibuy_qty - l_ose_qty,0);
          }

          if ( st_cntrct_pstn_crrnt.l_exbuy_qty != 0 )
          {
            l_ose_qty  = fn_maxl(st_cntrct_pstn_crrnt.l_sell_exctd_qty * (-1) - st_cntrct_pstn_crrnt.l_buy_exctd_qty, 0 );
            l_ebuy_qty = fn_maxl( ( st_cntrct_pstn_crrnt.l_exbuy_qty - l_ose_qty ), 0 );
          }

          if ( st_cntrct_pstn_crrnt.l_isell_qty != 0 )
          {
            l_obe_qty = fn_maxl( st_cntrct_pstn_crrnt.l_buy_exctd_qty - st_cntrct_pstn_crrnt.l_sell_exctd_qty * (-1) , 0 );
            l_isell_qty = fn_maxl( st_cntrct_pstn_crrnt.l_isell_qty * (-1) - l_obe_qty,0  );
          }

          if ( st_cntrct_pstn_crrnt.l_exsell_qty != 0 )
          {
            l_obe_qty = fn_maxl( st_cntrct_pstn_crrnt.l_buy_exctd_qty - st_cntrct_pstn_crrnt.l_sell_exctd_qty * (-1) , 0 );
            l_esell_qty = fn_maxl( st_cntrct_pstn_crrnt.l_exsell_qty * (-1) - l_obe_qty,0 );
          }
					
				  if(DEBUG_MSG_LVL_3)
          {
            fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_buy_exctd_qty:%ld:",st_cntrct_pstn_crrnt.l_buy_exctd_qty);
            fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_sel_exctd_qty%ld:",st_cntrct_pstn_crrnt.l_sell_exctd_qty);
            fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_ibuy_qty     :%ld:",st_cntrct_pstn_crrnt.l_ibuy_qty);
            fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_isell_qty    :%ld:",st_cntrct_pstn_crrnt.l_isell_qty);
            fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_exbuy_qty    :%ld:",st_cntrct_pstn_crrnt.l_exbuy_qty);
            fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_exsell_qty   :%ld:",st_cntrct_pstn_crrnt.l_exsell_qty);
            fn_userlog(c_ServiceName,"SPAN  l_ibuy_qty    											:%ld:",l_ibuy_qty);
            fn_userlog(c_ServiceName,"SPAN  l_ebuy_qty   												:%ld:",l_ebuy_qty);
            fn_userlog(c_ServiceName,"SPAN  l_isell_qty        									:%ld:",l_isell_qty);
            fn_userlog(c_ServiceName,"SPAN  l_esell_qty 												:%ld:",l_esell_qty);
          }


          l_total_buy_qty  = fn_maxl(l_ibuy_qty,abs(l_ebuy_qty));
          l_total_sell_qty = fn_maxl(l_isell_qty,abs(l_esell_qty));

          l_cover_qty  = l_total_buy_qty + l_total_sell_qty ;

					 if(DEBUG_MSG_LVL_3)
          {
            fn_userlog(c_ServiceName,"SPAN  l_total_buy_qty    :%ld:",l_total_buy_qty);
            fn_userlog(c_ServiceName,"SPAN  l_total_sell_qty   :%ld:",l_total_sell_qty);
            fn_userlog(c_ServiceName,"SPAN  l_cover_qty        :%ld:",l_cover_qty);
            fn_userlog(c_ServiceName,"SPAN  st_cntrct_pstn_crrnt.l_opnpstn_qty :%ld:",st_cntrct_pstn_crrnt.l_opnpstn_qty);
          }

          if (l_cover_qty != 0 )
          {
              fn_userlog(c_ServiceName,"SPAN cover quantity is greater than open position quantity.");
          }
          else
          {
            ptr_st_pstn_actn->l_actn_typ = SYSTEM_PLACE_ORDER ;
          }
          /**************** Ver 1.5 ended *************************/

					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"Action Type Is :%ld:",ptr_st_pstn_actn->l_actn_typ);
					}
				}

      	c_pos_avl = 'Y';
      }

      fn_sum_spnpos ( st_cntrct_pstn_crrnt , ptr_st_undfut_pos_to_be );

			i_expsr_rtrn  = fn_cal_expsr  ( c_ServiceName,
                                      st_cntrct_pstn_crrnt,
                                      l_basket_id,
                                      &d_expsr_mrgn,
                                      &d_min_expsr_mrgn,
                                      &d_mltplr,
                                      c_err_msg
                                    );

      if ( i_expsr_rtrn != 0 )
      {
      	fn_errlog(c_ServiceName, "S31765", LIBMSG, c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
				EXEC SQL FREE :sys_cursor;
				tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
				tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/	
        return -1;
      }


      l_max_opn_qty = st_cntrct_pstn_crrnt.l_opnpstn_qty + fn_maxl(st_cntrct_pstn_crrnt.l_ibuy_qty,st_cntrct_pstn_crrnt.l_exbuy_qty) ;
      l_min_opn_qty = st_cntrct_pstn_crrnt.l_opnpstn_qty + fn_maxl(abs(st_cntrct_pstn_crrnt.l_isell_qty),abs(st_cntrct_pstn_crrnt.l_exsell_qty)) * -1 ;

			if ( st_cntrct_pstn_crrnt.c_prd_typ  ==  'O' )
      {
        l_temp_qty  = fn_minl ( l_max_opn_qty , l_min_opn_qty );
        l_max_opn_qty = l_temp_qty  ;
        l_min_opn_qty = l_temp_qty  ;
      }

      EXEC SQL
        SELECT  NVL(FTQ_LST_TRD_PRC,0),		/*** NVL added in Ver 1.2 ***/
								NVL(FTQ_CLS_PRC,0)				/*** NVL added in Ver 1.2 ***/
        INTO    :d_ltp,
								:d_clsng_prc
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :st_cntrct_pstn_crrnt.c_xchng_cd		/*** Ver 1.3 ***/
				AND     FTQ_PRDCT_TYP = :st_cntrct_pstn_crrnt.c_prd_typ
        AND     FTQ_UNDRLYNG  = :st_cntrct_pstn_crrnt.c_undrlyng
        AND     FTQ_EXPRY_DT  = :c_exp_dt
        AND     FTQ_EXER_TYP  = :st_cntrct_pstn_crrnt.c_exer_typ
        AND     FTQ_OPT_TYP   = :st_cntrct_pstn_crrnt.c_opt_typ
        AND     FTQ_STRK_PRC  = :st_cntrct_pstn_crrnt.l_strike_prc;

      if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
      {
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
				tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
				tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/
        fn_errlog ( c_ServiceName, "S31770", SQLMSG, c_err_msg);
        return -1;
      }

      if( SQLCODE == NO_DATA_FOUND )    /*** Ver 3.1 Note : NO_DATA_FOUND handling Added For CorpActn Issue ***/
      {
        d_ltp = 0.0;
        d_clsng_prc = 0.0;
      }

			if ( st_cntrct_pstn_crrnt.l_opnpstn_qty != 0 )
      {
        if ( st_cntrct_pstn_crrnt.c_prd_typ == 'O' && st_cntrct_pstn_crrnt.l_opnpstn_qty < 0 )
        {
          d_cntrct_pl = (double) abs(st_cntrct_pstn_crrnt.l_opnpstn_qty) * ( d_clsng_prc - d_ltp );

        }
        else
        {
          if (  st_cntrct_pstn_crrnt.c_prd_typ  ==  'F' )
          {
            if( st_cntrct_pstn_crrnt.l_opnpstn_qty  > 0 )
            {
              d_cntrct_pl = ( d_ltp * (double) st_cntrct_pstn_crrnt.l_opnpstn_qty ) - st_cntrct_pstn_crrnt.d_opnpstn_val;
            }
            else if ( st_cntrct_pstn_crrnt.l_opnpstn_qty < 0 )
            {
              d_cntrct_pl = fabs(st_cntrct_pstn_crrnt.d_opnpstn_val)  -  ( d_ltp * (double) abs(st_cntrct_pstn_crrnt.l_opnpstn_qty) )  ;
            }

          }

        }
      }
	
			d_ltp	=	d_ltp	/	100;
   /****Ver 6.3 Hard Parse Changes***/
				EXEC SQL
        	SELECT  SEM_MAP_VL
        	INTO    :c_stock_cd
        	FROM    SEM_STCK_MAP
        	WHERE   SEM_STCK_CD = :st_cntrct_pstn_crrnt.c_undrlyng
       	/** 	AND     SEM_ENTTY   = 3;				*** Ver 1.8 comment ***/
        	AND    SEM_ENTTY  = DECODE(:st_cntrct_pstn_crrnt.c_xchng_cd,'NFO',3,'BFO',14);/*Ver 1.8*/


	 			if ( SQLCODE  !=  0 )
      	{
        	fn_errlog ( c_ServiceName, "S31775", SQLMSG, c_err_msg );
					EXEC SQL CLOSE :sys_cursor;       /***  VQC ***/
					EXEC SQL FREE :sys_cursor;	  		/***  VQC ***/	    
					tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
					tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/
        	return -1;
      	}
      SETNULL(c_stock_cd);

    /****Ver 6.3 Hard Parse Changes***/
			EXEC SQL
        SELECT TO_CHAR(TO_DATE(:st_cntrct_pstn_crrnt.c_expry_dt,'DD-Mon-YYYY'),'dd-Mon-YY')
        INTO  :c_expry_dt
        FROM  DUAL;

      if ( SQLCODE  !=  0 )
      {
        fn_errlog ( c_ServiceName, "S31780", SQLMSG, c_err_msg);
				EXEC SQL CLOSE :sys_cursor;       /***  VQC ***/
				EXEC SQL FREE :sys_cursor;        /***  VQC ***/
				tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
				tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/
        return -1;
      }

			/*** l_strike_prc	=	st_cntrct_pstn_crrnt.l_strike_prc /100; *** Commented in Ver 1.2 ***/

			/*** Ver 1.2 starts here ***/
			d_strike_prc = 0.0;
      d_strike_prc  = (double) st_cntrct_pstn_crrnt.l_strike_prc / 100.00  ;
      sprintf(c_strk_prc,"%lf",d_strike_prc);

      fn_spn_rtrim(c_strk_prc,'0');
      fn_spn_rtrim(c_strk_prc,'.');

      /*** Ver 1.2 ends here ***/

			if	(l_cntr	==	0	)
			{

				if(st_cntrct_pstn_crrnt.c_prd_typ  ==  'F')
      	{
				 	sprintf(c_inp_strng11,"%s^%s~%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);

      	strcat(c_inp_strng1,c_inp_strng11);

      		sprintf(c_inp_strng22,"%s^%s~%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);

      	strcat(c_inp_strng2,c_inp_strng22);

      	}
      	else
      	{
		  		sprintf(c_inp_strng11,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp);

       	 	strcat(c_inp_strng1,c_inp_strng11);

       	 	sprintf(c_inp_strng22,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp);

        	strcat(c_inp_strng2,c_inp_strng22);
      	}

			}
			else
			{
				if(st_cntrct_pstn_crrnt.c_prd_typ  ==  'F')
        {
          sprintf(c_inp_strng11,"%s~%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);

        strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s~%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);

        strcat(c_inp_strng2,c_inp_strng22);

        }
        else
        {
          sprintf(c_inp_strng11,"%s~%c:%s:%c%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp);

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s~%c:%s:%c%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp);

          strcat(c_inp_strng2,c_inp_strng22);
        }

			}

		  if(DEBUG_MSG_LVL_3)
      {
        fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_exp_dt.arr );
        fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntrct_pstn_crrnt.l_ibuy_qty );
        fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntrct_pstn_crrnt.d_ibuy_ord_val );
        fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntrct_pstn_crrnt.l_isell_qty );
        fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntrct_pstn_crrnt.d_isell_ord_val );
        fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntrct_pstn_crrnt.l_exbuy_qty );
        fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntrct_pstn_crrnt.d_exbuy_ord_val );
        fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntrct_pstn_crrnt.l_exsell_qty );
        fn_userlog ( c_ServiceName, "EXCH sell val      :%lf:", st_cntrct_pstn_crrnt.d_exsell_ord_val );
        fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntrct_pstn_crrnt.l_buy_exctd_qty );
        fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntrct_pstn_crrnt.l_sell_exctd_qty );
        fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntrct_pstn_crrnt.l_opnpstn_qty );
        fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntrct_pstn_crrnt.d_opnpstn_val);
        fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntrct_pstn_crrnt.d_mtm_opn_val );
     }

     strcat(c_inp_strng1,",");
     strcat(c_inp_strng2,",");

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"d_cntrct_pl Is :%lf:",d_cntrct_pl);
		}

		l_cntr	++;
		d_undrlyng_pl = d_undrlyng_pl + d_cntrct_pl ;
    d_blkd_prmum  = 0.0 ;

		d_expsr     = d_expsr_mrgn  + d_expsr ;
		d_min_expsr = d_min_expsr_mrgn  + d_min_expsr ;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"d_expsr Is :%lf:",d_expsr);
			fn_userlog(c_ServiceName,"d_expsr_mrgn Is :%lf:",d_expsr_mrgn);
			fn_userlog(c_ServiceName,"d_min_expsr_mrgn Is :%lf:",d_min_expsr_mrgn);
			fn_userlog(c_ServiceName,"d_min_expsr Is :%lf:",d_min_expsr);
		}
  }

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;
	
	/* Type Casted by Mahesh for 1 paisa issue */
	d_undrlyng_pl = ( long long )d_undrlyng_pl;

	/** If the client is building a position for the first time in the **/
  /** contract then it will not appear in the above list. Hence we   **/
  /** process them seperately                                        **/

  if ( c_pos_avl == 'N' )
  {

	  fn_userlog(c_ServiceName,"INSIDE c_pos_avl == N ");
		fn_errlog ( c_ServiceName, "S31785", LIBMSG, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
		tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/
    return -1;

	}

	l_length1 = strlen(c_inp_strng1);

  if( c_inp_strng1[l_length1  - 1 ] == ',')
  {
    c_inp_strng1[l_length1 -1]  ='\0';
  }

  l_length2 = strlen(c_inp_strng2);

  if( c_inp_strng2[l_length2  - 1 ] == ',')
  {
    c_inp_strng2[l_length2 -1]  ='\0';

  }


	if ( st_cntrct_pstn_md_rc.l_opnpstn_qty > 0 )
  {
    st_cntrct_pstn_md_rc.c_opnpstn_flw = BUY;
  }
  else if ( st_cntrct_pstn_md_rc.l_opnpstn_qty < 0 )
  {
    st_cntrct_pstn_md_rc.c_opnpstn_flw = SELL;
  }
  else
  {
    st_cntrct_pstn_md_rc.c_opnpstn_flw = NEUTRAL;
  }

  /** Update the contract level position on which the action has been applied **/

  EXEC SQL
    UPDATE  FCP_FO_SPN_CNTRCT_PSTN
    SET     FCP_IBUY_QTY       = :st_cntrct_pstn_md_rc.l_ibuy_qty,
            FCP_IBUY_ORD_VAL   = :st_cntrct_pstn_md_rc.d_ibuy_ord_val,
            FCP_ISELL_QTY      = :st_cntrct_pstn_md_rc.l_isell_qty,
            FCP_ISELL_ORD_VAL  = :st_cntrct_pstn_md_rc.d_isell_ord_val,
            FCP_EXBUY_QTY      = :st_cntrct_pstn_md_rc.l_exbuy_qty,
            FCP_EXBUY_ORD_VAL  = :st_cntrct_pstn_md_rc.d_exbuy_ord_val,
            FCP_EXSELL_QTY     = :st_cntrct_pstn_md_rc.l_exsell_qty,
            FCP_EXSELL_ORD_VAL = :st_cntrct_pstn_md_rc.d_exsell_ord_val,
            FCP_BUY_EXCTD_QTY  = :st_cntrct_pstn_md_rc.l_buy_exctd_qty,
            FCP_SELL_EXCTD_QTY = :st_cntrct_pstn_md_rc.l_sell_exctd_qty,
            FCP_OPNPSTN_FLW    = :st_cntrct_pstn_md_rc.c_opnpstn_flw,
            FCP_OPNPSTN_QTY    = :st_cntrct_pstn_md_rc.l_opnpstn_qty,
            FCP_OPNPSTN_VAL    = :st_cntrct_pstn_md_rc.d_opnpstn_val,
            FCP_MTM_OPN_VAL    = :st_cntrct_pstn_md_rc.d_mtm_opn_val
    WHERE   FCP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND     FCP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
    AND     FCP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
		AND     FCP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
    AND     FCP_EXPRY_DT       = to_date(:ptr_st_pstn_actn->c_expry_dt,'DD-Mon-YYYY')
		AND			FCP_OPT_TYP					=	:ptr_st_pstn_actn->c_opt_typ
		AND			FCP_STRK_PRC				=	:ptr_st_pstn_actn->l_strike_prc
    AND     FCP_EXER_TYP       = :ptr_st_pstn_actn->c_exrc_typ;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31790", SQLMSG, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
		tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/
    return  -1 ;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Calcualted underlying level position" );
    fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_uibuy_qty );
    fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", ptr_st_undfut_pos_to_be->d_uibuy_val);
    fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_uisell_qty );
    fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", ptr_st_undfut_pos_to_be->d_uisell_val);
    fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_uexbuy_qty );
    fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", ptr_st_undfut_pos_to_be->d_uexbuy_val );
    fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_uexsell_qty );
    fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", ptr_st_undfut_pos_to_be->d_uexsell_val );
    fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", ptr_st_undfut_pos_to_be->l_ubuy_exctd_qty );
    fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", ptr_st_undfut_pos_to_be->l_usell_exctd_qty );
    fn_userlog ( c_ServiceName, "Open qty          :%ld:", ptr_st_undfut_pos_to_be->l_uopnpstn_qty );
    fn_userlog ( c_ServiceName, "Original open val :%lf:", ptr_st_undfut_pos_to_be->d_uopnpstn_val);
    fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", ptr_st_undfut_pos_to_be->d_umtm_opn_val );
  }

 	/*** Ver 1.2 starts here ***/
  /** if(DEBUG_MSG_LVL_0)  ** ver 5.7 **/
  if(DEBUG_MSG_LVL_3)    /** ver 5.7 **/
	{
		fn_userlog( c_ServiceName, "i_cntrct_cnt = :%d:",i_cntrct_cnt);
	}

	if (i_cntrct_cnt > 10)
	{
		if ( Fadd32 (ptr_fml_Ibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31795",FMLMSG , c_err_msg ); 
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}
		fn_cpy_ddr ( ptr_st_pstn_actn->c_rout_crt );

		MEMSET(c_inp_strng);
		strcpy(c_inp_strng,c_inp_strng1);
		strcat(c_inp_strng,"\n");
			
		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"c_inp_strng 1 = :%s:",c_inp_strng);
		}

		if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31800",FMLMSG , c_err_msg ); 
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}

		i_returncode  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

		if(i_returncode == -1)
		{
			fn_errlog( c_ServiceName, "S31805",TPMSG , c_err_msg ); 
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng1,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31810",FMLMSG , c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		/** if(DEBUG_MSG_LVL_0)  *** ver 5.7 **/
		if(DEBUG_MSG_LVL_3)     /** Ver 5.7 ***/
		{
			fn_userlog(c_ServiceName,"Output String 1 Is :%s:",c_op_strng1);
		}

    /*** Ver 8.6  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31815",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
     fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    } 
    /*** Ver 8.6  Ends here ***/
		MEMSET(c_inp_strng);
    /** Ver 1.8 BUG FIX starts ***/
    if(strcmp(sql_xchng_cd,"NFO")== 0)
    {
      strcpy(c_inp_strng,"1^NSE^");
    }
    else if(strcmp(sql_xchng_cd,"BFO") == 0)
    {
      strcpy(c_inp_strng,"1^BSE^");
    }
    /** Ver 1.8 Ends   ***/

		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"Initial c_inp_strng2 = :%s:",c_inp_strng2);
		}

		fn_spn_ltrim(c_inp_strng2,'|');
    /*sprintf(c_inp_strng,"1^%s",c_inp_strng2); ** Ver 1.8 comment **/
    /*sprintf(c_inp_strng,"%s",c_inp_strng2);   *** Ver 1.8 **/
    strcat(c_inp_strng,c_inp_strng2);   /*** Ver 1.8 **/		
		strcat(c_inp_strng,"\n");	

		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"c_inp_strng 2 = :%s:",c_inp_strng);
		}

		if ( Fchg32 (ptr_fml_Ibuf,FFO_REMARKS,0,(char *)c_inp_strng,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31820",FMLMSG , c_err_msg);
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}

		i_returncode  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

		if(i_returncode == -1)
		{
			fn_errlog( c_ServiceName, "S31825",TPMSG , c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng2,0)  ==  -1 )
		{	
			fn_errlog( c_ServiceName, "S31830",FMLMSG , c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}
		
		fn_spn_ltrim(c_op_strng2,'1');
		fn_spn_ltrim(c_op_strng2,'^');

    /** if(DEBUG_MSG_LVL_0)  *** ver 5.7 **/
    if(DEBUG_MSG_LVL_3)     /** Ver 5.7 ***/
    {
			fn_userlog(c_ServiceName,"Output String 2 Is :%s:",c_op_strng2);
		}

    /*** Ver 8.6  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn2,
                                    &d_bnov2,
                                    &d_total_bmrgn2,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31835",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn2 :%lf: d_bnov2:%lf: d_total_bmrgn2:%lf:",d_spn_bmrgn2,d_bnov2,d_total_bmrgn2);
    }  
    /*** Ver 8.6  Ends here ***/
	}
	else
	{
	/*** Ver 1.2 Ends here ***/

		strcpy(c_inp_strng,c_inp_strng1);
		strcat(c_inp_strng,c_inp_strng2);
		strcat(c_inp_strng,"\n");


		if ( Fadd32 (ptr_fml_Ibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31840",FMLMSG , c_err_msg );
			/*EXEC SQL CLOSE :sys_cursor;			Commented In VQC	***/
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31845",FMLMSG , c_err_msg);
			/*EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***/
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;

		}

    /** if(DEBUG_MSG_LVL_0)  *** ver 5.7 **/
    if(DEBUG_MSG_LVL_3)     /** Ver 5.7 ***/
    {
			fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}

		fn_cpy_ddr ( ptr_st_pstn_actn->c_rout_crt );

		i_rtrn_cd1  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

		if(	i_rtrn_cd1 !=	0	)
		{
			fn_errlog( c_ServiceName, "S31850",TPMSG , c_err_msg );   
			/*EXEC SQL CLOSE :sys_cursor; Commented In VQC  ***/
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31855",FMLMSG , c_err_msg ); 
			/*EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***/
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;

		}
    /** if(DEBUG_MSG_LVL_0)  *** ver 5.7 **/
    if(DEBUG_MSG_LVL_3)     /** Ver 5.7 ***/
    {
			fn_userlog(c_ServiceName,"Output String Is :%s:",c_op_strng);
		}

		strcpy(c_op_strng1,strtok(c_op_strng,"|"));
		strcpy(c_op_strng2,strtok(null_ptr,"|"));

    /*** Ver 8.6  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
																	 i_cntrct_cnt,	
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31860",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
     fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 8.6  Ends here ***/
	}		/*** Ver 1.2 ***/

  strcpy(c_mrgn_indctr,strtok(c_op_strng1,"^"));
  strcpy(c_xchng_cd1,strtok(null_ptr,"^"));					/*** ver 1.8 **/
  strcpy(c_seq_num1,strtok(null_ptr,"^"));
  strcpy(c_mtch_accnt1,strtok(null_ptr,"^"));
  strcpy(c_spn_mrgn1,strtok(null_ptr,"^"));
  strcpy(c_nov1,strtok(null_ptr,"^"));
  strcpy(c_total_mrgn1,strtok(null_ptr,"^"));
	
	if(i_cntrct_cnt > 10)                                 /** 2.8 if condition added **/
  {
    strcpy(c_xchng_cd2,strtok(c_op_strng2,"^"));          /*** ver 1.8 **/
    /*strcpy(c_seq_num2,strtok(c_op_strng2,"^"));         *** ver 1.8 comment **/
    strcpy(c_seq_num2,strtok(null_ptr,"^"));              /*** ver 1.8 **/
  }                                                     /** Ver 2.8 starts **/
  else
  {
    strcpy(c_seq_num2,strtok(c_op_strng2,"^"));
  }                                                     /** Ver 2.8 Ends **/
  strcpy(c_mtch_accnt2,strtok(null_ptr,"^"));
  strcpy(c_spn_mrgn2,strtok(null_ptr,"^"));
  strcpy(c_nov2,strtok(null_ptr,"^"));
  strcpy(c_total_mrgn2,strtok(null_ptr,"^"));

  if(DEBUG_MSG_LVL_3)     /** ver 2.8 userlog added ***/
  {
    fn_userlog(c_ServiceName,"SPAN c_mtch_accnt1 is :%s:",c_mtch_accnt1);
    fn_userlog(c_ServiceName,"SPAN c_mtch_accnt2 is :%s:",c_mtch_accnt2);
    fn_userlog(c_ServiceName,"SPAN c_seq_num1 is :%s:",c_seq_num1);
    fn_userlog(c_ServiceName,"SPAN c_seq_num2 is :%s:",c_seq_num2);
    fn_userlog(c_ServiceName,"SPAN c_spn_mrgn2 is :%s:",c_spn_mrgn2);
    fn_userlog(c_ServiceName,"SPAN c_nov2 is :%s:",c_nov2);
    fn_userlog(c_ServiceName,"SPAN c_total_mrgn2 is :%s:",c_total_mrgn2);

  }

  if ( c_mtch_accnt1[0] == '1' || c_mtch_accnt1[0] == '2' || c_mtch_accnt1[0] == '3' )	/*** Ver 1.2 ***/
  {
    fn_errlog( c_ServiceName, "S31865",LIBMSG , c_err_msg );
    fn_userlog(c_ServiceName,"Service Return Error.");
    /*EXEC SQL CLOSE :sys_cursor; Commented In VQC  ***/
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return -1 ;
  }


  d_spn_mrgn1   = atof(c_spn_mrgn1);
  d_spn_mrgn2   = atof(c_spn_mrgn2);
  d_nov1        = atof(c_nov1);
  d_nov2        = atof(c_nov2);
  d_total_mrgn1 = atof(c_total_mrgn1);
  d_total_mrgn2 = atof(c_total_mrgn2);

  /*** Ver 8.6 Starts here ***/
  d_spn_bmrgn = fn_maxd(d_spn_bmrgn1,d_spn_bmrgn2) * 100;
  d_bnov      = fn_maxd(d_bnov1,d_bnov2) * 100;
  d_total_bmrgn = fn_maxd(d_total_bmrgn1,d_total_bmrgn2) * 100;
  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"d_spn_bmrgn :%lf: d_bnov :%lf: d_total_bmrgn:%lf:",d_spn_bmrgn,d_bnov,d_total_bmrgn);
  }
  /*** Ver 8.6  Ends here ***/

  st_undpstn_tobe.d_uspan_nenov_mrgn	= fn_maxd(d_spn_mrgn1,d_spn_mrgn2)	*	100;
  st_undpstn_tobe.d_net_optn_val			= fn_maxd(d_nov1,d_nov2)	*	100;
  st_undpstn_tobe.d_uspan_wenov_mrgn	= fn_maxd(d_total_mrgn1,d_total_mrgn2)	*	100;

  /*** Ver 8.6  Starts Here ***/
  st_undpstn_tobe.d_uspan_nenov_mrgn  = fn_maxd(st_undpstn_tobe.d_uspan_nenov_mrgn,d_spn_bmrgn);
  st_undpstn_tobe.d_net_optn_val = fn_maxd(st_undpstn_tobe.d_net_optn_val,d_bnov);
  st_undpstn_tobe.d_uspan_wenov_mrgn = fn_maxd(st_undpstn_tobe.d_uspan_wenov_mrgn,d_total_bmrgn);
  /*** Ver 8.6  Ends Here ***/
  
	d_spn_mrgn		=	st_undpstn_tobe.d_uspan_nenov_mrgn	;
	d_nov					=	st_undpstn_tobe.d_net_optn_val			;
	d_total_mrgn	=	st_undpstn_tobe.d_uspan_wenov_mrgn	;


	i_returncode  = fn_cal_mrgn ( c_ServiceName,
                                d_total_mrgn,
                                d_mltplr,
                                d_expsr,
                                d_min_expsr,
                                &d_min_mrgn,
                                &d_intl_mrgn,
																c_err_msg
                              );

  if ( i_returncode !=  0 )
  {
    fn_errlog( c_ServiceName, "S31870",LIBMSG , c_err_msg);
    fn_userlog(c_ServiceName,"Service Return Error.");
    /*EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***/
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return -1 ;
  }
  /** if(DEBUG_MSG_LVL_0)  *** ver 5.7 **/
  if(DEBUG_MSG_LVL_3)     /** Ver 5.7 ***/
  {
  	fn_userlog(c_ServiceName,"SPAN  - SPAN MARGIN IS :%lf:",d_spn_mrgn);
  	fn_userlog(c_ServiceName,"SPAN  - NOV IS :%lf:",d_nov);
  	fn_userlog(c_ServiceName,"SPAN  - Total Margin  IS :%lf:",d_total_mrgn);
  	fn_userlog(c_ServiceName,"SPAN  - Exposure  IS :%lf:",d_expsr);
  	fn_userlog(c_ServiceName,"SPAN  - Min. Margin IS :%lf:",d_min_mrgn);
  	fn_userlog(c_ServiceName,"SPAN  - Initial Margin IS :%lf:",d_intl_mrgn);
	}
	/* Type Casted by Mahesh for 1 paisa */

	d_intl_mrgn = ( long long )d_intl_mrgn;
	st_undpstn_tobe.d_multpr        		= d_mltplr  		;
  st_undpstn_tobe.d_eba_expr_mrgn 		= (long long)d_expsr;
  st_undpstn_tobe.d_min_mrgn      		= d_min_mrgn;
  st_undpstn_tobe.d_reqd_initial_mrgn	= (long long)d_intl_mrgn;
  st_undpstn_tobe.d_ntnl_pl       		= d_undrlyng_pl ;
  st_undpstn_tobe.d_span_wemult_mrgn  = (long long)d_total_mrgn * d_mltplr  ;


  /** The code from this point onwards does the following activity   **/
  /** Based on the type of action compare the current margin with    **/
  /** required margin and update them. Do the profit loss correction **/

  /** This bit of code down below checks the difference betweend the  **/
  /** current order level margin with the required order level margin **/
  /** then take a corrective measure. This code need not be called for**/
  /** action which do not involve any order level margin change       **/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"----1------Before Switch---");
	}

	/*** Following COmmented And Taken Below On 09-Dec-2011

	switch ( ptr_st_pstn_actn->l_actn_typ )
  {
		case  ORS_NEW_ORD_REQ:
            strcpy( c_narration_id , ON_ORDER_PLACEMENT);
            c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
            break;

		case  ORS_MOD_ORD_REQ:
            strcpy( c_narration_id , ON_MODIFICATION_PLACEMENT);
            c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
            break;
		case  SYSTEM_PLACE_ORDER:
            strcpy( c_narration_id , ON_MODIFICATION_PLACEMENT);
            c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
            break;

		
    default:
            *** strcpy( ptr_st_err_msg->c_err_msg, "Invalid action type"); ***
            strcpy( c_test_err_msg, "Invalid action type"); 
						sprintf(ptr_st_err_msg->c_err_msg,":%s:",c_test_err_msg); 
						** sprintf(ptr_st_err_msg->c_err_msg,"Invalid action type"); ***
            fn_userlog ( c_ServiceName,"Invalid action type");
            tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
            break;
  }
	COmmented And Taken Below Ends ***/
	
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"----2------After Switch----");
	}

	/*** Following Added On 07-Dec-2011 ***/

	  EXEC SQL
      SELECT  NVL(FUS_BLCKD_PL,0)
      INTO    :d_oblckd_amnt
      FROM    FUS_FO_UNDRLYNG_SPN_PSTN
      WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
      AND     FUS_UNDRLYNG        = :sql_undrlyng
      AND     FUS_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd;

    if ( SQLCODE != 0 && SQLCODE  !=  NO_DATA_FOUND)
    {
      fn_errlog( c_ServiceName, "S31875",SQLMSG , c_err_msg);
      /*EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***/
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
   }
  /*** ver 7.6 starts ***/
  fn_userlog( c_ServiceName, "before sys check c_dr_without_lmt_flg :%c:",c_dr_without_lmt_flg);
  if( ptr_st_pstn_actn->l_actn_typ == SYSTEM_PLACE_ORDER )
  {
     c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
  }
  /*** ver 7.6 ends ***/

	if( ptr_st_pstn_actn->l_actn_typ == SYSTEM_PLACE_ORDER && c_dr_without_lmt_flg == DEBIT_TILL_LIMIT )
	{
    /** if(DEBUG_MSG_LVL_0)  *** ver 5.7 **/
    if(DEBUG_MSG_LVL_3)     /** Ver 5.7 ***/
		{
			fn_userlog( c_ServiceName, "INSIDE SYSTEM_PLACE_ORDER CONDITION");
			fn_userlog( c_ServiceName, "Releasing  Blocked Margin");
			fn_userlog( c_ServiceName, "Intial Margin Is :%lf: ",ptr_st_undfut_pos_crrnt->d_initial_mrgn);
		}

    strcpy( c_narration_id ,REL_TRDMRGN_SQR_ORDER_MODIFICATION);

		if ( ptr_st_undfut_pos_crrnt->d_initial_mrgn != 0 )
    {

		 d_balance_amt  = 0.0;		/*** Ver 1.2 ***/

     i_returncode = fn_upd_spnlimits( c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    c_dr_without_lmt_flg,
                                    ptr_st_undfut_pos_crrnt->d_initial_mrgn,
                                    &d_balance_amt);

      if ( i_returncode != 0 )
      {
				 fn_errlog( c_ServiceName, "S31880",LIBMSG , c_err_msg );
				 /*EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***/
 				 tpfree((char *)ptr_fml_Obuf);                              
 				 tpfree((char *)ptr_fml_Ibuf);                              
 				 return -1;                                                 
      }

     }
		
  		/** if(DEBUG_MSG_LVL_0)  ** ver 5.7 **/
  		if(DEBUG_MSG_LVL_3)    /** ver 5.7 **/
		 {
			fn_userlog( c_ServiceName, "Releasing  Notional P&L  :%lf: ",d_oblckd_amnt); /** Ver 5.7 **/
			/** fn_userlog( c_ServiceName, "P&L Is :%lf: ",d_oblckd_amnt);     ** Ver 5.7 **/
     }

		 strcpy( c_narration_id , REL_BLKDLOSS_SQR_ORDER_MODIFICATION );
		
		 if ( d_oblckd_amnt!= 0 )
     {
			 if(DEBUG_MSG_LVL_3)
			 {
					fn_userlog( c_ServiceName, "Before fn_upd_spnlimits :i_returncode Is :%d:",i_returncode);
			 }

			 d_balance_amt  = 0.0;		/*** Ver 1.2 ***/

       i_returncode = fn_upd_spnlimits( c_ServiceName,
                                        ptr_st_pstn_actn,
                                        ptr_st_err_msg,
                                        c_narration_id,
                                        c_dr_without_lmt_flg,
                                        d_oblckd_amnt,
                                        &d_balance_amt);
			 if(DEBUG_MSG_LVL_3)
			 {
				fn_userlog( c_ServiceName, "i_returncode Is :%d:",i_returncode);
       }

			 if ( i_returncode != 0 )
       {
				fn_errlog( c_ServiceName, "S31885",LIBMSG , c_err_msg ); 
        /*EXEC SQL CLOSE :sys_cursor;		Commented In VQC  ***/
        tpfree((char *)ptr_fml_Obuf);
        tpfree((char *)ptr_fml_Ibuf);
        return -1;
       }


     } /** End of P&L **/

		 /*** Ver 1.1 Starts ***/
		 if ( d_square_off_prmum <  0 )
		 {
				strcpy( c_narration_id , ON_MODIFICATION_PLACEMENT);

    		/** if(DEBUG_MSG_LVL_0)  *** ver 5.7 **/
    		if(DEBUG_MSG_LVL_3)     /** Ver 5.7 ***/
			  {
					fn_userlog(c_ServiceName,"Inside Square off Premium Condition:%lf:",d_square_off_prmum);
				}

				d_balance_amt  = 0.0;		/*** Ver 1.2 ***/

				i_returncode = fn_upd_spnlimits	( c_ServiceName,
																					ptr_st_pstn_actn,
																					ptr_st_err_msg,
																					c_narration_id,
																					DEBIT_WHEN_LIMIT,
																					d_square_off_prmum,
																					&d_balance_amt
																				);
				if ( i_returncode != 0 )
				{
					switch ( i_returncode )
					{
						case  INSUFFICIENT_LIMITS :

								fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg);
								/*EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***/
								tpfree((char *)ptr_fml_Obuf);
								tpfree((char *)ptr_fml_Ibuf);
								return INSUFFICIENT_LIMITS  ;

						default:

							fn_errlog( c_ServiceName, "S31890",LIBMSG , c_err_msg ); 
							/*EXEC SQL CLOSE :sys_cursor;	Commented In VQC  ***/
							tpfree((char *)ptr_fml_Obuf);
							tpfree((char *)ptr_fml_Ibuf);
							return -1;
					}
				}

				d_square_off_prmum = (d_square_off_prmum* (-1) ) + d_balance_amt;

				
				EXEC SQL
					UPDATE  FCP_FO_SPN_CNTRCT_PSTN
					SET     FCP_OPT_PREMIUM     = :d_square_off_prmum +  FCP_OPT_PREMIUM
					WHERE   FCP_CLM_MTCH_ACCNT  = :st_cntrct_pstn_prmum_sqroff.c_cln_mtch_accnt
					AND     FCP_XCHNG_CD        = :st_cntrct_pstn_prmum_sqroff.c_xchng_cd
					AND     FCP_PRDCT_TYP       = :st_cntrct_pstn_prmum_sqroff.c_prd_typ
					AND     FCP_UNDRLYNG        = :st_cntrct_pstn_prmum_sqroff.c_undrlyng
					AND     FCP_EXPRY_DT        = :st_cntrct_pstn_prmum_sqroff.c_expry_dt
					AND     FCP_EXER_TYP        = :st_cntrct_pstn_prmum_sqroff.c_exer_typ
					AND     FCP_OPT_TYP         = :st_cntrct_pstn_prmum_sqroff.c_opt_typ
					AND     FCP_STRK_PRC        = :st_cntrct_pstn_prmum_sqroff.l_strike_prc;

				if ( SQLCODE != 0 )
				{
					fn_errlog(c_ServiceName, "S31895", SQLMSG, c_err_msg ); 
					/*EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***/
					tpfree((char *)ptr_fml_Obuf);
					tpfree((char *)ptr_fml_Ibuf);
					return -1;
				}
		 }
		 /*** Ver 1.1 Ends ***/
			
		 strcpy( c_narration_id , BLK_SPAN_MRGN_SQR_ORDER_MODIFICATION );
     c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
	
		 sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"SPAN-SPAN-%s", st_undpstn_tobe.c_undrlyng);
     d_upd_amount = (-1) * st_undpstn_tobe.d_span_wemult_mrgn;

     /** if(DEBUG_MSG_LVL_0)  *** ver 5.7 **/
     if(DEBUG_MSG_LVL_3)     /** Ver 5.7 ***/
		 {
			 fn_userlog(c_ServiceName," NEW SPAN MARGIN WITH MULTIPLIER Is :%lf:", st_undpstn_tobe.d_span_wemult_mrgn);
			 fn_userlog(c_ServiceName," d_upd_amount In SPAN MARGIN WITH MULTIPLIER Is :%lf:",d_upd_amount);
		 }

     if ( d_upd_amount != 0 )
     {
			 d_balance_amt  = 0.0;		/*** Ver 1.2 ***/

       i_returncode = fn_upd_spnlimits( c_ServiceName,
                                        ptr_st_pstn_actn,
                                        ptr_st_err_msg,
                                        c_narration_id,
                                        c_dr_without_lmt_flg,
                                        d_upd_amount,
                                        &d_balance_amt);
       if ( i_returncode != 0 )
       {
				fn_errlog( c_ServiceName, "S31900",LIBMSG , c_err_msg);
        /*EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***/
        tpfree((char *)ptr_fml_Obuf);
        tpfree((char *)ptr_fml_Ibuf);
        return -1;
       }
       st_undpstn_tobe.d_span_wemult_mrgn = st_undpstn_tobe.d_span_wemult_mrgn + d_balance_amt ;  /*** ver 2.6 ***/
     }

		 /*** st_undpstn_tobe.d_span_wemult_mrgn = st_undpstn_tobe.d_span_wemult_mrgn + d_balance_amt ;   Commented in ver 2.6 ***/

  		/** if(DEBUG_MSG_LVL_0)  ** ver 5.7 **/
  	 if(DEBUG_MSG_LVL_3)    /** ver 5.7 **/
		 {
			fn_userlog(c_ServiceName,"d_balance_amt in st_undpstn_tobe.d_span_wemult_mrgn Is:%lf:",d_balance_amt);
			fn_userlog(c_ServiceName,"Here st_undpstn_tobe.d_span_wemult_mrgn Is :%lf:",st_undpstn_tobe.d_span_wemult_mrgn );
		 }

		 strcpy( c_narration_id ,BLK_EXPR_MRGN_SQR_ORDER_MODIFICATION);
		 d_upd_amount = (-1) * st_undpstn_tobe.d_eba_expr_mrgn ;

  	 /** if(DEBUG_MSG_LVL_0)  ** ver 5.7 **/
  	 if(DEBUG_MSG_LVL_3)    /** ver 5.7 **/
		 {
			fn_userlog(c_ServiceName," d_upd_amount In EXPOSURE Is :%lf:",d_upd_amount);
		 }

     sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"SPAN-EXPOSURE-%s", st_undpstn_tobe.c_undrlyng );
		
		 if ( d_upd_amount != 0 )
     {
			 d_balance_amt  = 0.0;		/*** Ver 1.2 ***/

       i_returncode = fn_upd_spnlimits( c_ServiceName,
                                        ptr_st_pstn_actn,
                                        ptr_st_err_msg,
                                        c_narration_id,
                                        c_dr_without_lmt_flg,
                                        d_upd_amount,
                                        &d_balance_amt);
       if ( i_returncode != 0 )
       {
        fn_errlog( c_ServiceName, "S31905",LIBMSG , c_err_msg);
        /*EXEC SQL CLOSE :sys_cursor;	Commented In VQC  ***/
        tpfree((char *)ptr_fml_Obuf);
        tpfree((char *)ptr_fml_Ibuf);
        return -1;
       }
       st_undpstn_tobe.d_eba_expr_mrgn = st_undpstn_tobe.d_eba_expr_mrgn + d_balance_amt;   /*** Ver 2.6 ***/
     }

  	 /** if(DEBUG_MSG_LVL_0)  ** ver 5.7 **/
  	 if(DEBUG_MSG_LVL_3)    /** ver 5.7 **/
		 {
			fn_userlog(c_ServiceName,"d_balance_amt in d_expsr :%lf:",d_balance_amt);
		 }

     /*** st_undpstn_tobe.d_eba_expr_mrgn = st_undpstn_tobe.d_eba_expr_mrgn + d_balance_amt;    Commented in ver 2.6 ***/

		 if(DEBUG_MSG_LVL_3)
		 {
			fn_userlog(c_ServiceName," Calculating Final INITIAL MARGIN ")  ;
			
			fn_userlog(c_ServiceName,"Here st_undpstn_tobe.d_span_wemult_mrgn Is :%lf:", st_undpstn_tobe.d_span_wemult_mrgn);
			fn_userlog(c_ServiceName,"Here st_undpstn_tobe.d_eba_expr_mrgn  Is  :%lf:",  st_undpstn_tobe.d_eba_expr_mrgn);
		 }

     ptr_st_undfut_pos_to_be->d_initial_mrgn = st_undpstn_tobe.d_span_wemult_mrgn + st_undpstn_tobe.d_eba_expr_mrgn ;

  	 /** if(DEBUG_MSG_LVL_0)  ** ver 5.7 **/
  	 if(DEBUG_MSG_LVL_3)    /** ver 5.7 **/
		 {
			fn_userlog(c_ServiceName,"Here FINAL INTIAL MARGIN TO BE BLOCKED Is :%lf:", ptr_st_undfut_pos_to_be->d_initial_mrgn );	
			fn_userlog(c_ServiceName,"SPAN  - Blocking New Loss ");
		  fn_userlog(c_ServiceName,"SPAN  - d_undrlyng_pl Is :%lf:",d_undrlyng_pl);
		 }

		 strcpy( c_narration_id ,BLK_NOTIONAL_LOSS_SQR_ORDER_MODIFICATION );
		 if ( d_undrlyng_pl < 0 )
     {
			 d_balance_amt  = 0.0;		/*** Ver 1.2 ***/

			 i_returncode = fn_upd_spnlimits( c_ServiceName,
                                        ptr_st_pstn_actn,
                                        ptr_st_err_msg,
                                        c_narration_id,
                                        c_dr_without_lmt_flg,
                                        d_undrlyng_pl,
                                        &d_balance_amt);
       if ( i_returncode != 0 )
       {
        fn_errlog( c_ServiceName, "S31910",LIBMSG , c_err_msg );
        /*EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***/
        tpfree((char *)ptr_fml_Obuf);
        tpfree((char *)ptr_fml_Ibuf);
        return -1;
       }

       st_undpstn_tobe.d_blckd_pl  = ( d_undrlyng_pl * (-1)) + d_balance_amt  ;

       /** if(DEBUG_MSG_LVL_0)  ** ver 5.7 **/
  		 if(DEBUG_MSG_LVL_3)    /** ver 5.7 **/
			 {
					fn_userlog(c_ServiceName,"SPAN  - d_balance_amt Is :%lf:",d_balance_amt);
					fn_userlog(c_ServiceName,"SPAN  - st_undpstn_tobe.d_blckd_pl Is :%lf:", st_undpstn_tobe.d_blckd_pl);
			 }
     }
		 else
     {
    	 /** if(DEBUG_MSG_LVL_0)  *** ver 5.7 **/
    	 if(DEBUG_MSG_LVL_3)     /** Ver 5.7 ***/
			 {
					fn_userlog(c_ServiceName,"SPAN - In PROFIT COndition" );
       }
			 st_undpstn_tobe.d_blckd_pl  = 0 ;

  	   /** if(DEBUG_MSG_LVL_0)  ** ver 5.7 **/
  		 if(DEBUG_MSG_LVL_3)    /** ver 5.7 **/
			 {
					fn_userlog(c_ServiceName,"SPAN  - st_undpstn_tobe.d_blckd_pl Is :%lf:",st_undpstn_tobe.d_blckd_pl);
			 }
     }
	}
	else
	{

	if ( d_undrlyng_pl > 0 )
  {
    d_diff_pl = d_oblckd_amnt ;
  }
  else 
  {
    d_diff_pl = d_oblckd_amnt + d_undrlyng_pl ;
  }

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"----3------After Selecting Blocked P&L ----");
		fn_userlog(c_ServiceName,"SPAN	-	d_undrlyng_pl Is :%lf:",d_undrlyng_pl);
		fn_userlog(c_ServiceName,"SPAN	-	d_oblckd_amnt Is :%lf:",d_oblckd_amnt);
		fn_userlog(c_ServiceName,"SPAN	-	d_diff_pl Is :%lf:",d_diff_pl);
	}

	/**** Ver 6.8 Starts ****/
  switch ( ptr_st_pstn_actn->l_actn_typ )
  {
    case  ORS_NEW_ORD_REQ:
            strcpy( c_narration_id , ON_ORDER_PLACEMENT);
            c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
            break;

    case  ORS_MOD_ORD_REQ:
            strcpy( c_narration_id , ON_MODIFICATION_PLACEMENT);
            c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
            break;
    case  SYSTEM_PLACE_ORDER:
            strcpy( c_narration_id , ON_MODIFICATION_PLACEMENT);
            c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
            break;


    default:
            strcpy( c_test_err_msg.arr, "Invalid action type");
            sprintf(ptr_st_err_msg->c_err_msg,":%s:",c_test_err_msg.arr);
            fn_userlog ( c_ServiceName,"Invalid action type");
            tpfree((char *)ptr_fml_Obuf);    
            tpfree((char *)ptr_fml_Ibuf);   
            tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
            break;
  }

	/*** Ver 6.8 Ends ***/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Difference in P&L :%lf:", d_diff_pl );
  }

  d_total_amount=0.0 ;  /** Ver 2.5 **/
  c_pnl_insufficient_flg='N'; /** Ver 2.5 **/

  if( d_diff_pl < 0 )
  {
    strcpy( c_narration_id , DEFICIT_PROFIT_LOSS );

		d_balance_amt  = 0.0;		/*** Ver 1.2 ***/

    i_returncode = fn_upd_spnlimits	( c_ServiceName,
                                  		ptr_st_pstn_actn,
                                  		ptr_st_err_msg,
                                  		c_narration_id,
                                  		c_dr_without_lmt_flg,
                                  		d_diff_pl,
                                  		&d_balance_amt
																		);
    if ( i_returncode != 0 )
    {
			switch ( i_returncode )
      {
      	case  INSUFFICIENT_LIMITS :


              /**** Ver 2.5 *******
              EXEC SQL CLOSE :sys_cursor;
              tpfree((char *)ptr_fml_Obuf);
              tpfree((char *)ptr_fml_Ibuf);
              return INSUFFICIENT_LIMITS  ;
              ****** Ver 2.5 *****/
            	/*** Ver 6.8 Start ***/
            	if( c_balance_flg != 'Y' )
            	{
              	d_balance_amt_tmp = d_balance_amt;
              	c_balance_flg = 'Y';
            	}
            	/*** Ver 6.8 Ends ***/
              /**** Ver 2.5 Starts Here ***/
              fn_userlog(c_ServiceName,"Inside INSUFFICIENT_LIMITS d_diff_pl Block");
              c_pnl_insufficient_flg='Y';
              /*** d_total_amount = d_total_amount + d_diff_pl; *** Commented in Ver 6.8 ***/
              break ;
              /**** Ver 2.5 Ends Here ****/

        default:

              fn_errlog( c_ServiceName, "S31915",LIBMSG , c_err_msg);
              /*EXEC SQL CLOSE :sys_cursor;				Commented In VQC  ***/
              tpfree((char *)ptr_fml_Obuf);
              tpfree((char *)ptr_fml_Ibuf);
              return -1;
        }
    }

  	/** if(DEBUG_MSG_LVL_0)  ** ver 5.7 **/
  	if(DEBUG_MSG_LVL_3)    /** ver 5.7 **/
		{
			fn_userlog(c_ServiceName,"SPAN  - d_diff_pl :%lf:",d_diff_pl);
			fn_userlog(c_ServiceName,"SPAN  - d_balance_amt Is :%lf:",d_balance_amt);
		}

    /*** Ver 6.8 ***/
    if( c_balance_flg == 'Y' )
    {
       d_total_amount = d_total_amount + d_diff_pl;
    }
    /*** Ver 6.8 ***/

		/*** Following Commented On 09-Dec-2011
		if ( d_diff_pl > 0 )
    {
    	st_undpstn_tobe.d_blckd_pl  = d_oblckd_amnt - d_diff_pl;
    }
		else
		{
    	st_undpstn_tobe.d_blckd_pl	= d_undrlyng_pl - d_balance_amt ;   
		***  New blocked loss is added into Old blocked loss at undrlying level  ***
		}
		Commented On 09-Dec-2011 Ends ***/
		/*** Following Added On 09-Dec-2011 ***/

		st_undpstn_tobe.d_blckd_pl  = d_oblckd_amnt - d_diff_pl;

		/*** Added On 09-Dec-2011 Ends ***/

  }

  /*** Following Commented On 09-Dec-2011
	if ( d_diff_pl == 0 )
  {
    st_undpstn_tobe.d_blckd_pl  = st_undpstn_tobe.d_blckd_pl  * (-1)  ;

  }
	Commented On 09-Dec-2011 Ends ***/

	switch ( ptr_st_pstn_actn->l_actn_typ )
  {
    case  ORS_NEW_ORD_REQ:
            strcpy( c_narration_id , ON_ORDER_PLACEMENT);
            c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
            break;

    case  ORS_MOD_ORD_REQ:
            strcpy( c_narration_id , ON_MODIFICATION_PLACEMENT);
            c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
            break;
    case  SYSTEM_PLACE_ORDER:
            strcpy( c_narration_id , ON_MODIFICATION_PLACEMENT);
            c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
            break;


    default:
            /*** strcpy( ptr_st_err_msg->c_err_msg, "Invalid action type"); ***/
            strcpy( c_test_err_msg.arr, "Invalid action type");

            /** sprintf(ptr_st_err_msg->c_err_msg,"Invalid action type"); ***/
            fn_userlog ( c_ServiceName,"Invalid action type");
						tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
						tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/
            tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
            break;
  }

	d_diff_mrgn = ptr_st_undfut_pos_crrnt->d_initial_mrgn	- d_intl_mrgn;

  /** if(DEBUG_MSG_LVL_0)  ** ver 5.7 **/
  if(DEBUG_MSG_LVL_3)    /** ver 5.7 **/
  {
  	fn_userlog ( c_ServiceName, "Difference in MRGN :%lf:", d_diff_mrgn );
  }

 if( ptr_st_pstn_actn->c_nkd_blkd_flg != ROLLOVER_WITH_SPREAD) /** if added in ver 6.4 **/
 { 
  if ( d_diff_mrgn <  0 )
  {
		d_balance_amt  = 0.0;		/*** Ver 1.2 ***/

  	i_returncode = fn_upd_spnlimits	( c_ServiceName,
                                 			ptr_st_pstn_actn,
                                 			ptr_st_err_msg,
                                 			c_narration_id,
                                 			c_dr_without_lmt_flg,
                                 			d_diff_mrgn,
                                 			&d_balance_amt
																		);
   if ( i_returncode != 0 )
   {
		 switch ( i_returncode )
     {
     		case  INSUFFICIENT_LIMITS :

            fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg); 
            /********* Ver 2.5 *********
            EXEC SQL CLOSE :sys_cursor;
            tpfree((char *)ptr_fml_Obuf);
            tpfree((char *)ptr_fml_Ibuf);
            return INSUFFICIENT_LIMITS  ;
            ********** Ver 2.5 *********/
            /******** Ver 3.1 Ends *******/
            /*** Ver 6.8 Start ***/
            if( c_balance_flg != 'Y' )
            {
              d_balance_amt_tmp = d_balance_amt;
              c_balance_flg = 'Y';
            }
            /*** Ver 6.8 Ends ***/
            
            /******** Ver 2.5 Starts Here ****/
            fn_userlog(c_ServiceName,"Inside INSUFFICIENT_LIMITS Margin Block After SPAN Server Call");
            c_mrgn_insufficient_flg ='Y' ;
            /** d_total_amount = d_total_amount + d_diff_mrgn; ** Commented in Ver 6.8 **/
            break;
            /******** Ver 2.5 Ends Heer ******/

         default:

            fn_errlog( c_ServiceName, "S31920",LIBMSG , c_err_msg);
            /*EXEC SQL CLOSE :sys_cursor;		Commented In VQC	***/
            tpfree((char *)ptr_fml_Obuf);
            tpfree((char *)ptr_fml_Ibuf);
            return -1;
     }
   }

   /*** Ver 6.8 Starts ***/
   if( c_balance_flg == 'Y' )
   {
     d_total_amount = d_total_amount + d_diff_mrgn;
   }
   /*** Ver 6.8 Ends ***/

   /*** Added to take care of balance amount in case of ***/
   /*** DEBIT_TILL_LIMIT. d_balance_amt is added        ***/
   /*** since it is always negative or Zero             ***/

 	 ptr_st_undfut_pos_to_be->d_initial_mrgn	=  ptr_st_undfut_pos_to_be->d_reqd_initial_mrgn  + d_balance_amt ;

		if(d_balance_amt != 0 )
		{

			if( (-1)* d_balance_amt >= st_undpstn_crrnt.d_eba_expr_mrgn )
  		{
  			st_undpstn_tobe.d_uspan_wenov_mrgn  = st_undpstn_crrnt.d_uspan_wenov_mrgn - ((-1)*d_balance_amt - st_undpstn_crrnt.d_eba_expr_mrgn );
    		st_undpstn_tobe.d_eba_expr_mrgn = 0;
  		}
  		else
  		{
    		st_undpstn_tobe.d_eba_expr_mrgn = st_undpstn_crrnt.d_eba_expr_mrgn + d_balance_amt;
  		}
		}
	}
  }
	} // Condition Ends For Other Then SYSTEM ORDER 

  /*** Ver 2.5 Starts Here  ***/
  if(  c_pnl_insufficient_flg == 'Y' || c_mrgn_insufficient_flg == 'Y' ||   c_prm_insufficient_flg == 'Y' )
  {
    d_required_amount=0.0;

    fn_userlog(c_ServiceName,"d_balance_amt  :%lf:",d_balance_amt);
	  fn_userlog(c_ServiceName,"d_balance_amt_tmp :%lf:",d_balance_amt_tmp); /*** Ver 6.8 ***/

/** d_required_amount = d_total_amount + d_premium + d_balance_amt ; ** Commented in Ver 6.8 **/
		d_required_amount = d_total_amount + d_premium + d_balance_amt_tmp; /** Ver 6.8 **/
    d_required_amount = ( d_required_amount * (-1) ) / 100 ;

    fn_userlog(c_ServiceName," d_required_amount :%lf:",d_required_amount);

    fn_userlog(c_ServiceName," ptr_st_err_msg.c_err_msg :%s:",ptr_st_err_msg->c_err_msg);

    /*EXEC SQL CLOSE :sys_cursor;			Commented In VQC	***/
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return INSUFFICIENT_LIMITS  ;
  }
   /*** Ver 2.5 Ends Here  ends ***/

	/***  Unmarked The Customer If Customer Is  Marked By IMTM  ***/

	if ( ptr_st_undfut_pos_to_be->c_mtm_flg == 'M' && c_dr_without_lmt_flg == DEBIT_WHEN_LIMIT )
  {
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN - Going To Update MTM Flag From M To O.");
			fn_userlog(c_ServiceName,"SPAN - Before MTM Flag Is :%c:",ptr_st_undfut_pos_to_be->c_mtm_flg);
		}

    ptr_st_undfut_pos_to_be->c_mtm_flg = 'O';

  	/** if(DEBUG_MSG_LVL_0)  ** ver 5.7 **/
  	if(DEBUG_MSG_LVL_3)    /** ver 5.7 **/
		{
			fn_userlog(c_ServiceName,"SPAN - After MTM Flag Is :%c:",ptr_st_undfut_pos_to_be->c_mtm_flg);
		}
  }

  /*** Ver 8.3 Starts here ***/
  i_returncode=fn_cal_premutilzed( c_ServiceName, ptr_st_pstn_actn);
  if( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31925",LIBMSG , c_err_msg);
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return -1;
  }
  /*** Ver 8.3 Ends Here ***/

  tpfree((char *)ptr_fml_Obuf);
  tpfree((char *)ptr_fml_Ibuf);

  return 0;
}

/******Ver 1.9*****Function for 5 paisa check**************/
int fn_5paisa(long l_temp)
{
  if((l_temp%5) != 0)
	{
    return -1;
	}
  return 0;
}
/*****/

/** Ver 5.8 starts here **/

int fn_stts_trail_ord(char *c_order_ref)
{
  varchar c_err_msg[256] = {'\0'};			/***	DataType Changed From Char To Varchar	In VQC	***/
  char c_ServiceName[33] = {'\0'};
  int  i_trnsctn = 0;
	char c_stts_flg ='N';   /****ver 6.3****/
  char c_cep_rmv_flg='A'; /****ver 6.3****/
  
  strcpy(c_ServiceName,"SFO_PLCMOD_FUT");
  rtrim(c_ServiceName);

/****DEBUG LVL Added in VQC****/
 if(DEBUG_MSG_LVL_3)
  {
  fn_userlog(c_ServiceName,"Inside fn_stts_trail_ord");
  }

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr );  /*** Datatype is converted to Varchar in Ver 7.5 ***/
	if( i_trnsctn == -1 ) 
  {
    fn_errlog( c_ServiceName, "S31930", LIBMSG, c_err_msg.arr ); /*** Datatype is converted to Varchar in Ver 7.5 ***/	
    return -1;
  }
	
  EXEC SQL
    UPDATE FTO_FO_TRAIL_ORD
  /**** SET    FTO_STATUS_FLG = 'N',
					 FTO_CEP_RMV_FLG = 'A'  ****commented in ver 6.3**/
		SET    FTO_STATUS_FLG =:c_stts_flg,      /*****Added in Ver 6.3****/
				   FTO_CEP_RMV_FLG =:c_cep_rmv_flg   /*****Added in Ver 6.3****/
    WHERE  FTO_ORDR_RFRNC = :c_order_ref;

  if ( SQLCODE != 0 )
  {
     fn_errlog( c_ServiceName, "S31935", SQLMSG, c_err_msg.arr );  /*** Datatype is converted to Varchar in Ver 7.5 ***/
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );  /*** Datatype is converted to Varchar in Ver 7.5 ***/ 
     return -1;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )  /*** Datatype is converted to Varchar in Ver 7.5 ***/	
  {
    fn_errlog( c_ServiceName, "S31940", LIBMSG, c_err_msg.arr  );  /*** Datatype is converted to Varchar in Ver 7.5 ***/	
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );    /*** Datatype is converted to Varchar in Ver 7.5 ***/
    return -1;
  }

  return 0;
}

int fn_upd_trail_ord(char *c_order_ref)
{
  varchar c_err_msg[256] = {'\0'};			/***	DataType Changed From Char TO Varchar	In VQC	***/
  char c_ServiceName[33] = {'\0'};
  int  i_trnsctn = 0;
  char c_prcipmv_flg ='N';			/***	Ver 6.3	***/
  strcpy(c_ServiceName,"SFO_PLCMOD_FUT");
  rtrim(c_ServiceName);

  if (DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"fn_upd_trail_ord:- c_order_ref :%s:",c_order_ref);
  }

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
  if(i_trnsctn == -1)
  {
    fn_errlog( c_ServiceName, "S31945", LIBMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
    return -1;
  }
 
  
   EXEC SQL
    UPDATE FOD_FO_ORDR_DTLS
 /***   SET    FOD_PRCIMPV_FLG='N' commented in ver 6.3****/
    SET    FOD_PRCIMPV_FLG=:c_prcipmv_flg   /****Added in Ver 6.3*****/
    WHERE  FOD_ORDR_RFRNC= :c_order_ref ;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31950", SQLMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
    return -1;
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )		/*** Datatype is converted to Varchar in Ver 7.5 ***/
  {
    fn_errlog( c_ServiceName, "S31955", LIBMSG, c_err_msg.arr  );		/*** Datatype is converted to Varchar in Ver 7.5 ***/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );   /*** Datatype is converted to Varchar in Ver 7.5 ***/
    return -1;
  }

  return 0;
}

int fn_vrfy_spnprc_band_mkt_loc ( char c_ServiceName [ 33 ],
                          char c_xchng_cd [ 4 ],
                          char c_prd_typ,
                          char c_undrlyng [ 7 ],
                          long l_ord_limit_rt,
                          char c_expry_dt [ 21 ],
                          struct st_err_msg *ptr_st_err_msg
                        )
{

  long l_upbnd_rt = 0;
  long l_lwbnd_rt = 0;

  EXEC SQL BEGIN DECLARE SECTION;
    char    sql_c_xchng_cd[4] = "\0";       /* initialized in Ver 7.5 */
    char    sql_c_prd_typ = '\0';           /* initialized in Ver 7.5 */
    char    sql_c_undrlyng[7] = "\0";      /* initialized in Ver 7.5 */
    char    sql_c_expry_dt[21] = "\0";      /* initialized in Ver 7.5 */
  EXEC SQL END DECLARE SECTION;

	

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "c_xchng_cd:%s:", c_xchng_cd );
    fn_userlog( c_ServiceName, "c_prd_typ:%c:",c_prd_typ);
    fn_userlog( c_ServiceName, "c_undrlyng:%s:", c_undrlyng );
    fn_userlog( c_ServiceName, "l_ord_limit_rt:%ld:", l_ord_limit_rt );
    fn_userlog( c_ServiceName, "c_expry_dt:%s:", c_expry_dt);
  }

  strcpy ( sql_c_xchng_cd, c_xchng_cd );
  sql_c_prd_typ = c_prd_typ;
  strcpy ( sql_c_undrlyng, c_undrlyng );
  strcpy ( sql_c_expry_dt, c_expry_dt);

  /****Ver 6.3 Hard Parse Changes****/
  EXEC SQL
       SELECT FTQ_HGH_PRC_RNG,
              FTQ_LOW_PRC_RNG
       INTO   :l_upbnd_rt,
              :l_lwbnd_rt
       FROM   FTQ_FO_TRD_QT
       WHERE  FTQ_XCHNG_CD =  :sql_c_xchng_cd
       AND    FTQ_PRDCT_TYP = :sql_c_prd_typ
       AND    FTQ_UNDRLYNG =  :sql_c_undrlyng
       AND    FTQ_EXPRY_DT =  TO_DATE(:sql_c_expry_dt,'dd-Mon-yyyy' );


  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31005", SQLMSG, c_err_msg);
    return ( -1 );
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "l_upbnd_rt :%ld:", l_upbnd_rt);
    fn_userlog( c_ServiceName, "l_lwbnd_rt :%ld:", l_lwbnd_rt);
    fn_userlog( c_ServiceName, "l_ord_limit_rt :%ld:", l_ord_limit_rt);
  }


  if ( ( l_ord_limit_rt > l_upbnd_rt ) || ( l_ord_limit_rt < l_lwbnd_rt )  )
  {
    fn_errlog( c_ServiceName, "B28006", " ",ptr_st_err_msg->c_err_msg);
    return ( -2 ) ;
  }

}
/** Ver 5.8 Ends here **/

/*** Ver 6.9 Starts ***/
int fn_get_quote_zero ( char *c_ServiceName, char c_ord_flw, long l_best_bid_price, long l_best_offer_price, long l_previous_close_price, long *l_quote_zero)
{
	if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"Inside function fn_get_quote_zero");
    fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_best_bid_price is :%ld:",l_best_bid_price);
    fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_best_offer_price is :%ld:",l_best_offer_price);
    fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_previous_close_price is :%ld:",l_previous_close_price);
  }
  if(c_ord_flw == 'B')
  {
    if(l_best_offer_price == 0)
    {
      *l_quote_zero = l_previous_close_price;
    }
    else
    {
      *l_quote_zero = l_best_offer_price;
    }
  }
  else if (c_ord_flw == 'S')
  {
    if(l_best_bid_price == 0)
    {
      *l_quote_zero = l_previous_close_price;
    }
    else
    {
      *l_quote_zero = l_best_bid_price;
    }
  }
  else
  {
    return -1;
  }
	if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_quote_zero is :%ld:",*l_quote_zero);
  }
  return 1;
}
/*** Ver 6.9 Ends ***/



/*** ver 6.4 starts ***/
int fn_vrfy_spnprc_band_mkt_rws_loc ( char c_ServiceName [ 33 ],
                          char c_xchng_cd [ 4 ],
                          char c_prd_typ,
                          char c_undrlyng [ 7 ],
                          long l_ord_limit_rt,
                          char *c_sprd_expiry_date1,
													char *c_sprd_expiry_date2,
                          struct st_err_msg *ptr_st_err_msg
                        )
{

  long l_upbnd_rt = 0;
  long l_lwbnd_rt = 0;

  EXEC SQL BEGIN DECLARE SECTION;
    char    sql_c_xchng_cd[4] = "\0";      /* initialized in Ver 7.5 */
    char    sql_c_prd_typ = '\0';          /* initialized in Ver 7.5 */
    char    sql_c_undrlyng[7] = "\0";      /* initialized in Ver 7.5 */
  EXEC SQL END DECLARE SECTION;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "c_xchng_cd:%s:", c_xchng_cd );
    fn_userlog( c_ServiceName, "c_prd_typ:%c:",c_prd_typ);
    fn_userlog( c_ServiceName, "c_undrlyng:%s:", c_undrlyng );
    fn_userlog( c_ServiceName, "l_ord_limit_rt:%ld:", l_ord_limit_rt );
    fn_userlog( c_ServiceName, "c_sprd_expiry_date1:%s:", c_sprd_expiry_date1);
    fn_userlog( c_ServiceName, "c_sprd_expiry_date2:%s:", c_sprd_expiry_date2);
  }

  strcpy ( sql_c_xchng_cd, c_xchng_cd );
  sql_c_prd_typ = c_prd_typ;
  strcpy ( sql_c_undrlyng, c_undrlyng );

  /****Ver 6.3 Hard Parse Changes****/
  EXEC SQL
       SELECT NVL(FTQ_HGH_PRC_RNG,0),
              NVL(FTQ_LOW_PRC_RNG,0)
       INTO   :l_upbnd_rt,
              :l_lwbnd_rt
       FROM   FTQ_FO_TRD_QT
       WHERE  FTQ_XCHNG_CD =  :sql_c_xchng_cd
       AND    FTQ_PRDCT_TYP = decode(:sql_c_prd_typ,'F','S',:sql_c_prd_typ)
       AND    FTQ_UNDRLYNG =  :sql_c_undrlyng
       and    FTQ_EXPRY_DT =  to_date(:c_sprd_expiry_date1,'dd-Mon-yyyy' )
       and    FTQ_EXPRY_DT2=  to_date(:c_sprd_expiry_date2,'dd-Mon-yyyy' );


  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31010", SQLMSG, c_err_msg);
    return ( -1 );
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "l_upbnd_rt :%ld:", l_upbnd_rt);
    fn_userlog( c_ServiceName, "l_lwbnd_rt :%ld:", l_lwbnd_rt);
    fn_userlog( c_ServiceName, "l_ord_limit_rt :%ld:", l_ord_limit_rt);
  }


  if ( ( l_ord_limit_rt > l_upbnd_rt ) || ( l_ord_limit_rt < l_lwbnd_rt )  )
  {
    fn_errlog( c_ServiceName, "B28006", " ",ptr_st_err_msg->c_err_msg);
    return ( -2 ) ;
  }

}
/*** ver 6.4 ends ***/
