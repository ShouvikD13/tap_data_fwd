/*******************************************************************************/
/*    Program             : SFO_GT_REPORT		                              	   */
/*                                                                             */
/*    Input               : FFO_USR_ID	                                       */
/*                          FFO_SSSN_ID                                        */
/*                          FFO_EBA_MTCH_ACT_NO                                */
/*												  FFO_XCHNG_CD																		   */
/*												  FFO_FROM_DT			  																 */
/*													FFO_TO_DT																					 */	
/*                                                                             */
/*    Output              : FFO_EBA_MTCH_ACT_NO                                */
/*                          FFO_RQST_TM                                        */
/*                          FFO_TRNSCTN_TYP																		 */
/*													FFO_CHANNEL																				 */	
/*													FFO_REMARKS																				 */
/*													FFO_ERR_MSG																				 */
/*																																						 */	
/*																																						 */
/*    Description         : This service gets the records for generating report*/
/*                                                                             */
/*    Log                 : 1.0   14-Jul-2014   Navina D                       */
/*												: 1.1		13-Jan-2015		Tanmay W											 */	
/*												: 1.2		13-Sep-2020	  Suchita D											 */	
/*                        : TOL   07-Aug-2023   Agam                           */
/*******************************************************************************/
/*    1.0   -   New Release                                                    */
/*		1.1		- 	Columns added for Auto_mtm changes														 */
/*		1.2		- 	Trigger Price changes             														 */
/*    TOL   -   Tux on Linux                                                   */
/*******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_ddr.h>
#include <fn_session.h>						
#include <fn_log.h>								
#include <fn_tuxlib.h>						
#include <fn_read_debug_lvl.h>		

void SFO_GT_REPORT( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Obuf;

	char c_ServiceName[33];
	char c_err_msg[256];

	int i_err[7];        
	int i_returncode; 
	int i;

	char c_date[25] = "\0";
	char c_bnk_accnt[40] = "\0";
	char c_clnt_stts[25] = "\0";
	char c_clnt_typ[25]	=	"\0";							/* Ver 1.1 */
	char c_cntrct_tag = '\0';
	char c_contrct[40] = "\0";
	char c_exer_typ = '\0';
	char c_expry_dt[21] = "\0";
	char c_mtmflg_new = '\0';
	char c_mtmflg_old = '\0';
	char c_opn_flow = '\0';
	char c_opt_typ = '\0';
	char c_prd_typ = '\0';
	char c_time[25] = "\0";
	char c_undrlyng[7] = "\0";
	char c_uploaddate[25] = "\0";
	char c_span_flag  = 'N';
	char c_bse_span_flag = 'N';
	char   c_ers_flg='\0';													/* Ver 1.1 */

	int i_cnt = 0;
	double d_add_mrgn = 0.0;
	double d_addmrgn_amt = 0.0;
	double d_allctd_amt = 0.0;
	double d_blck_for_trd = 0.0;
	double d_curr_limit = 0.0;
	double d_currt_mrk_prc = 0.0;
	double d_ini_mrgn_prcnt = 0.0;
	double d_inimrgn_new = 0.0;
	double d_inimrgn_old = 0.0;
	double d_limit = 0.0;
	double d_min_mrgn_prcnt = 0.0;
	double d_minmrgn_new = 0.0;
	double d_min_trg_prc = 0.0;						/* Ver 1.1 */
	double d_minmrgn_old = 0.0;
	double d_mtm_trg_prc = 0.0;  
	double d_ordmrgn_aft = 0.0;
	double d_ordmrgn_bef = 0.0;
	double d_pldge_amt = 0.0;
	double d_req_inimrgn_new = 0.0;
	double d_req_inimrgn_old = 0.0;
	double d_share_plg_amt = 0.0;
	double d_share_plg_val = 0.0;
	double d_shortage = 0.0;
	double d_somc_prcnt = 0.0;
	double d_sprd_mrgn = 0.0;
	double d_sprdmrgn_aft = 0.0;
	double d_sprdmrgn_bef = 0.0;
	double d_tot_plg_amt = 0.0;
	double d_trd_mrgn_aft = 0.0;
	double d_trd_mrgn_bef = 0.0;
	double d_trdmrgn_aft = 0.0;
	double d_trdmrgn_bef = 0.0;
	double d_available_limits = 0.0; 
	double d_required_limits	= 0.0;
	double d_deficit_Limit = 0.0;
	double d_iss_sprd_mrgn_p = 0.0;
	double d_iss_shortage = 0.0;
	double d_iss_fdr_amnt = 0.0;
	double d_oss_fdr_amnt = 0.0;
	double d_sis_fdr_amnt = 0.0;
	double d_strk_prc = 0.0;

	long l_opn_pstn = 0;

	
	EXEC SQL BEGIN DECLARE SECTION;
		varchar c_from_dt [ LEN_DATE ];
		varchar c_to_dt	[ LEN_DATE ];	 
		char c_mtch_acc [ 11 ];
		char c_xchng_cd [ 4 ];
		char c_usr_id [ 9 ];
		long l_session_id;
		char c_trade_date [LEN_DATE];
		char c_order_reference[19];
		char c_transaction_date[LEN_DATE];
		char c_remark[256];            
		char c_rqst_typ = '\0';

	EXEC SQL END DECLARE SECTION;

	sql_cursor cur_getreport;		

	ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
	ptr_fml_Obuf = NULL;  
	strcpy( c_ServiceName, rqst->name );

	INITDBGLVL(c_ServiceName);


	i_err[0] = Fget32( ptr_fml_Ibuf, FFO_USR_ID, 0, (char *)c_usr_id, 0); 
	i_err[1] = Fget32( ptr_fml_Ibuf, FFO_SSSN_ID, 0, (char *)&l_session_id, 0);
	i_err[2] = Fget32( ptr_fml_Ibuf, FFO_EBA_MTCH_ACT_NO, 0, (char *)c_mtch_acc, 0); 
	i_err[3] = Fget32( ptr_fml_Ibuf, FFO_XCHNG_CD, 0, (char *)c_xchng_cd, 0);
	i_err[4] = Fget32( ptr_fml_Ibuf, FFO_FROM_DT, 0, (char *)c_from_dt.arr, 0);
	i_err[5] = Fget32( ptr_fml_Ibuf, FFO_TO_DT, 0, (char *)c_to_dt.arr, 0);
	i_err[6] = Fget32( ptr_fml_Ibuf, FFO_RQST_TYP, 0, (char *)&c_rqst_typ, 0);
	
	for(i = 0; i < 7; i++)
	{
		if(i_err[i] == -1)
		{
			fn_userlog( c_ServiceName, "Error in Fadd for i [%d]", i);
			fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg);
			Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
		}
	}	

  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*100);
  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31010", TPMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0 );
  }
	
	if (c_rqst_typ == 'P')	/*** Pre square off report ***/ 
	{
		if(Fget32(ptr_fml_Ibuf, FFO_UNDRLYNG,0,(char *)&c_undrlyng,0) == -1)
    {
			tpfree((char *) ptr_fml_Obuf);
			fn_userlog( c_ServiceName, "Error while getting input FFO_UNDRLYNG");
			fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg);
			Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
    }

		if(Fget32(ptr_fml_Ibuf, FFO_PRDCT_TYP,0,(char *)&c_prd_typ,0) == -1)
    {
			tpfree((char *) ptr_fml_Obuf);
			fn_userlog( c_ServiceName, "Error while getting input FFO_PRDCT_TYP");
			fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg);
			Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
    }
	}


	SETLEN(c_from_dt);
	SETLEN(c_to_dt);

	if( DEBUG_MSG_LVL_0 ) 
	{
		fn_userlog( c_ServiceName, " User id: |%s|", c_usr_id);
		fn_userlog( c_ServiceName, " Session id: |%ld|", l_session_id);
		fn_userlog( c_ServiceName, " c_rqst_typ : |%c|", c_rqst_typ);
		fn_userlog( c_ServiceName, " Xchng cd : |%s|", c_xchng_cd);
		fn_userlog( c_ServiceName, " Match Acc: |%s|", c_mtch_acc);
		fn_userlog( c_ServiceName, " From Date: |%s|", (char *)c_from_dt.arr);
		fn_userlog( c_ServiceName, " To Date : |%s|", (char *)c_to_dt.arr);
		fn_userlog( c_ServiceName, " c_undrlyng : |%s|", c_undrlyng);
		fn_userlog( c_ServiceName, " c_prd_typ: |%c|", c_prd_typ);
	}	

	EXEC SQL ALLOCATE :cur_getreport;

	if (c_rqst_typ == 'L')	/*** Limit logging report ***/ 
	{

    EXEC SQL EXECUTE
      BEGIN
      OPEN   :cur_getreport FOR
        SELECT   FFL_CLM_MTCH_ACCNT Match_Account,
                 FFL_XCHNG_CD Exchange_code,
                 FFL_TRD_DT Trade_Date ,
                 FFL_ORDR_RFRNC Order_Reference ,
                 FFL_AVAILBLE_AMT Available_limits  ,
                 FFL_TOT_REQ_AMT  Required_Limits ,
                 FFL_DEFICIT_AMT  Deficit_Limit ,
                 to_char(FFL_TRN_DT,'dd-Mon-YYYY hh24:mi:ss') Transaction_date ,
                 NVL(FFL_REMARKS,' ') Remark
        FROM     FFL_FO_FLR_LMTUPD_LOG
        WHERE    FFL_CLM_MTCH_ACCNT = :c_mtch_acc
        AND      FFL_XCHNG_CD       = :c_xchng_cd
        AND      TRUNC(FFL_TRD_DT)  BETWEEN   to_date(:c_from_dt, 'dd-Mon-yyyy') AND to_date(:c_to_dt, 'dd-Mon-yyyy')
        ORDER BY FFL_TRD_DT ,FFL_TRN_DT DESC ;

      END;
    END-EXEC;
	
		if(SQLCODE != 0)
    {
		 tpfree((char *) ptr_fml_Obuf);
     fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }	

	  if( DEBUG_MSG_LVL_0 )
	  {
		 fn_userlog( c_ServiceName, "Getting Records");
	  }

	  for(;;)
	  {
		 MEMSET(c_mtch_acc); 
		 MEMSET(c_trade_date);          
		 MEMSET(c_order_reference);     
		 MEMSET(c_transaction_date);    
		 MEMSET(c_remark);              
		 d_available_limits = 0.0;    
		 d_required_limits = 0.0;   
		 d_deficit_Limit = 0.0;

		 EXEC SQL
			FETCH	:cur_getreport			
			INTO	:c_mtch_acc,
						:c_xchng_cd,
						:c_trade_date,        
						:c_order_reference,   
						:d_available_limits,  
						:d_required_limits,  
						:d_deficit_Limit,
						:c_transaction_date,  
						:c_remark;            

		 if ( SQLCODE != 0 )
     {
      if ( SQLCODE == NO_DATA_FOUND )
      {
				fn_userlog( c_ServiceName, "ALL Done");
				EXEC SQL CLOSE :cur_getreport;
        break;
      }
      tpfree((char *) ptr_fml_Obuf);
			fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg );
      EXEC SQL CLOSE :cur_getreport;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }	

		 rtrim((char *) c_mtch_acc);
		 rtrim((char *) c_trade_date);
		 rtrim((char *) c_order_reference);
		 rtrim((char *) c_transaction_date);
		 rtrim((char *) c_remark);

		 if( DEBUG_MSG_LVL_3 )
		 {
			fn_userlog( c_ServiceName, "Packing Data");
			fn_userlog( c_ServiceName, "c_mtch_acc : |%s|", c_mtch_acc);
			fn_userlog( c_ServiceName, "c_trade_date : |%s|", c_trade_date);
			fn_userlog( c_ServiceName, "c_order_reference : |%s|", c_order_reference);
			fn_userlog( c_ServiceName, "d_available_limits  : |%lf|", d_available_limits);
			fn_userlog( c_ServiceName, "d_required_limits : |%lf|", d_required_limits);
			fn_userlog( c_ServiceName, "d_deficit_Limit : |%lf|", d_deficit_Limit);
			fn_userlog( c_ServiceName, "c_transaction_date : |%s|", c_transaction_date);
			fn_userlog( c_ServiceName, "c_remark : |%s|", c_remark);
		 }

		 i_returncode = fn_pack_vartofml( c_ServiceName,
                                     c_err_msg,
                                     &ptr_fml_Obuf,
                                     9,
                                     FFO_EBA_MTCH_ACT_NO, ( char *)c_mtch_acc,
																		 FFO_XCHNG_CD, (char *) c_xchng_cd,
                                     FFO_TRD_DT, ( char *)c_trade_date,
                                     FFO_REF_NO, ( char *)c_order_reference,
                                     FFO_LIMIT, ( char *)&d_available_limits,
                                     FFO_EFF_LMT_RT, ( char * )&d_required_limits,
																		 FFO_NEW_EFF_RT, ( char * )&d_deficit_Limit,
                                     FFO_ORD_DT, ( char * )c_transaction_date,
																		 FFO_REMARKS, ( char *)c_remark);

     if( i_returncode == -1 )
     {
			tpfree((char *) ptr_fml_Obuf);
      fn_errlog( c_ServiceName, "S31035", LIBMSG, c_err_msg );
      EXEC SQL CLOSE :cur_getreport;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

		 if( DEBUG_MSG_LVL_0 )
		 {
			fn_userlog( c_ServiceName, "Data Packed");
		 }
	  }
	}
	else if (c_rqst_typ == 'P')	/*** Pre square off report ***/ 
	{
	  EXEC SQL
			SELECT  NVL(CLM_SPAN_ALLWD,'N'),
							NVL(CLM_BSESPAN_ALLWD,'N')
			INTO    :c_span_flag,
							:c_bse_span_flag
			FROM    CLM_CLNT_MSTR
			WHERE   CLM_MTCH_ACCNT = :c_mtch_acc;

		if( SQLCODE != 0 )
		{
			tpfree((char *) ptr_fml_Obuf);
			fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if( DEBUG_MSG_LVL_0 )
		{
			fn_userlog( c_ServiceName, "c_span_flag = :%c: | c_bse_span_flag = :%c:",c_span_flag,c_bse_span_flag);
		}
		
		if ( 
		( ( ( c_span_flag == 'Y' && strcmp(c_xchng_cd,"NFO") == 0) || ( c_bse_span_flag =='Y' && strcmp(c_xchng_cd,"BFO") == 0 ) ) && (c_prd_typ == 'P') ) ||  /*** SPAN FuturePlus ***/
		( ( ( c_span_flag == 'N' && strcmp(c_xchng_cd,"NFO") == 0) || ( c_bse_span_flag =='N' && strcmp(c_xchng_cd,"BFO") == 0 ) ) && (c_prd_typ == 'F' || c_prd_typ == 'P') ) /*** Non SPAN Fut or FP ***/
			 )
		{
			if( DEBUG_MSG_LVL_0 )
			{
				fn_userlog( c_ServiceName, "For Non-SPAN Futures or FuturePLUS");
			}

		EXEC SQL EXECUTE
			BEGIN
			OPEN	 :cur_getreport FOR
					SELECT TRUNC(TIME)	,
								 TO_CHAR(TIME, 'DD/MM/YYYY HH24:MI:SS') UploadDate ,													
								 ISS_CLM_MTCH_ACCNT MatchAccount,
								 ISS_XCHNG_CD || '-' || 'FUT' || '-' || trim(ISS_UNDRLYNG) || '-' ||TO_CHAR(ISS_EXPRY_DT, 'DD-Mon-YYYY') Contract,
								 ABS(ISS_OPN_PSTN) Open_Position,
								 DECODE(SIGN(ISS_OPN_PSTN), 1, 'B', -1, 'S') ,
								 ISS_IM_P Initial_Margin_Percent,							
								 ISS_MM_P Mimimum_Margin_Percent,
								 ISS_SPRD_MRGN_P Spread_Margin_Percent, 						
								 (ISS_ADD_MRGN_AMT - ISS_LIMIT)/100 Shortage,  	
								 ISS_LIMIT / 100 Limit,
								 ISS_ALCTD_AMT / 100 Allocated_Amount,				
								 ISS_BFT_AMT / 100 Block_For_Trade,					
								 ISS_FDR_AMT / 100 FD_Value,  	
								 ISS_PLG_AMT / 100 Pledge_Amt,								
								 ISS_TRD_MRGN_B / 100 Trade_Margin_Before,		
								 ISS_TRD_MRGN_A / 100 Trade_Margin_After,			
								 ISS_ADD_MRGN_AMT / 100 Additional_Mrgn,			
								 ISS_CMP / 100 Current_Market_Price,					
								 ISS_SHR_PLG_AMT / 100 Share_Plg_Val,					
								 DECODE(NVL(ICD_ATS_STATUS, 'N'),'N','Normal Online','Y', 'ATS Offline', 'ERS online') client_status,
								 NVL(ISS_MIN_TRGPRC,0)/100 ERS_TRIGGER_PRC,          /* Ver 1.1 */ 
								 NVL(ISS_ERS_FLG,'N')														 /* Ver 1.1 */ 
					 FROM ISS_FO_IMTM_SQ_SMRY, UAC_USR_ACCNTS, ICD_INFO_CLIENT_DTLS
					 WHERE ISS_PRDCT_TYP			= :c_prd_typ
						 AND UAC_CLM_MTCH_ACCNT = ISS_CLM_MTCH_ACCNT
						 AND ICD_USER_ID				= UAC_USR_ID
						 AND ISS_XCHNG_CD				= :c_xchng_cd
						 AND TRUNC(TIME)				>=  to_date(:c_from_dt, 'dd-Mon-yyyy')
						 AND TRUNC(TIME)				<= to_date(:c_to_dt, 'dd-Mon-yyyy') 
						 AND ISS_CLM_MTCH_ACCNT like DECODE(:c_mtch_acc,'ALL','%',:c_mtch_acc)	
						 AND trim(ISS_UNDRLYNG) like DECODE(:c_undrlyng,'ALL','%',:c_undrlyng)	
					 ORDER BY TIME;
			END;
		END-EXEC;

		if(SQLCODE != 0)
		{
			tpfree((char *) ptr_fml_Obuf);
			fn_errlog( c_ServiceName, "S31045", SQLMSG, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}	

		if( DEBUG_MSG_LVL_0 )
		{
			fn_userlog( c_ServiceName, "Getting Records");
		}

		for(;;)
		{
			MEMSET( c_date);
			MEMSET( c_uploaddate );
			MEMSET( c_mtch_acc );
			MEMSET( c_contrct );
			MEMSET( c_clnt_stts ); 
			c_opn_flow  = '\0';
			l_opn_pstn = 0;
			d_ini_mrgn_prcnt = 0.0;						
			d_min_mrgn_prcnt= 0.0;									
			d_limit = 0.0;
			d_allctd_amt= 0.0;						
			d_blck_for_trd= 0.0;								
			d_pldge_amt= 0.0;										
			d_trd_mrgn_bef= 0.0;				
			d_trd_mrgn_aft= 0.0;					
			d_add_mrgn= 0.0;					
			d_currt_mrk_prc= 0.0;							
			d_share_plg_val= 0.0;		  

			EXEC SQL
				FETCH	:cur_getreport			
				INTO	:c_date,
							:c_uploaddate ,													
							:c_mtch_acc,
							:c_contrct,
							:l_opn_pstn,
							:c_opn_flow ,
							:d_ini_mrgn_prcnt,							
							:d_min_mrgn_prcnt,	
							:d_iss_sprd_mrgn_p ,	
							:d_iss_shortage ,					
							:d_limit,
							:d_allctd_amt,				
							:d_blck_for_trd,		
							:d_iss_fdr_amnt ,				
							:d_pldge_amt,								
							:d_trd_mrgn_bef,		
							:d_trd_mrgn_aft,			
							:d_add_mrgn,			
							:d_currt_mrk_prc,					
							:d_share_plg_val,					
							:c_clnt_stts,
							:d_min_trg_prc, 							/* Ver 1.1 */
							:c_ers_flg;										/* Ver 1.1 */

			if ( SQLCODE != 0 )
			{
				if ( SQLCODE == NO_DATA_FOUND )
				{
					fn_userlog( c_ServiceName, "ALL Done");
					EXEC SQL CLOSE :cur_getreport;
					break;
				}
				tpfree((char *) ptr_fml_Obuf);
				fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg );
				EXEC SQL CLOSE :cur_getreport;
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}	

	 	  if(c_ers_flg == 'Y')     /* Ver 1.1 */
		  { 
				strcpy(c_clnt_typ,"MTM ERS CLIENT");
		  }	
			else
			{	
				strcpy(c_clnt_typ, NULL) ;
			}				 

			 /* Ver 1.1 Ends */

			rtrim((char *) c_date);
			rtrim((char *) c_uploaddate);
			rtrim((char *) c_mtch_acc);
			rtrim((char *) c_contrct);
			rtrim((char *) c_clnt_stts);

			if( DEBUG_MSG_LVL_3 )
			{
				fn_userlog( c_ServiceName, "Packing Data");
				fn_userlog( c_ServiceName, "c_mtch_acc : |%s|", c_mtch_acc);
				fn_userlog( c_ServiceName, "c_contrct : |%s|", c_contrct);
				fn_userlog( c_ServiceName, "c_clnt_stts : |%s|", c_clnt_stts);
				fn_userlog( c_ServiceName, "c_uploaddate  : |%s|", c_uploaddate);
				fn_userlog( c_ServiceName, "c_ers_flg  	  : |%c|",c_ers_flg); 							/* Ver 1.1 */
				fn_userlog( c_ServiceName, "d_limit : |%lf|", d_limit);
				fn_userlog( c_ServiceName, "d_min_trg_prc is :%lf:",d_min_trg_prc);
				fn_userlog( c_ServiceName, " c_clnt_typ : |%s|",c_clnt_typ);
			}

			i_returncode = fn_pack_vartofml( c_ServiceName,
																			 c_err_msg,
																			 &ptr_fml_Obuf,
																			 24,
																			 FFO_TRD_DT, ( char *) c_date,						   
																			 FFO_ORD_DT, ( char *) c_uploaddate ,		   
																			 FFO_EBA_MTCH_ACT_NO, ( char *) c_mtch_acc,			   
																			 FFO_MTCH_CNTCT_KEY, ( char *) c_contrct,				   
																			 FFO_OPNPSTN_QTY, ( char *) &l_opn_pstn,				   
																			 FFO_OPNPSTN_FLW, ( char *) &c_opn_flow ,			   
																			 FFO_INIT_MRGN_PRCNT, ( char *) &d_ini_mrgn_prcnt,	   
																			 FFO_MIN_MRGN_PRCNT, ( char *) &d_min_mrgn_prcnt,	   
																			 FFO_LIMIT, ( char *) &d_limit,					   
																			 FFO_BAL_AMT, ( char *) &d_allctd_amt,			   
																			 FFO_C_BLKD_TRD_MRGN, ( char *) &d_blck_for_trd,		   
																			 FFO_PLG_AMT, ( char *) &d_pldge_amt,			   
																			 FFO_C_TRD_MRGN, ( char *) &d_trd_mrgn_bef,		   
																			 FFO_U_TRD_MRGN, ( char *) &d_trd_mrgn_aft,		   
																			 FFO_ADDL_AMT_BLKD, ( char *) &d_add_mrgn,				   
																			 FFO_FUT_PRC, ( char *) &d_currt_mrk_prc,	   
																			 FFO_PLG_ORD_VAL, ( char *) &d_share_plg_val,	   
																			 FFO_SPREAD_MRGN, ( char *) &d_iss_sprd_mrgn_p,	   
																			 FFO_U_ADD_MRGN_VAL, ( char *) &d_iss_shortage,	   
																			 FFO_PI_PO_AMT, ( char *) &d_iss_fdr_amnt,	   
																			 FFO_PLG_STTS, ( char *) c_clnt_stts,
																			 FFO_AMOUNT,( char *) &d_min_trg_prc,				/* Ver 1.1 */	
																			 FFO_PSTN_FLG,	( char *) c_clnt_typ,			/* Ver 1.1 */
																			 FFO_SPL_FLG,  ( char *) &c_ers_flg); 				/* Ver 1.1 *//* & Added in Ver TOL */	
			if( i_returncode == -1 )
			{
				tpfree((char *) ptr_fml_Obuf);
				fn_errlog( c_ServiceName, "S31055", LIBMSG, c_err_msg );
				EXEC SQL CLOSE :cur_getreport;
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			if( DEBUG_MSG_LVL_0 )
			{
				fn_userlog( c_ServiceName, "Data Packed");
			}
		 }
		}
		else if ( ( ( c_span_flag == 'N' && strcmp(c_xchng_cd,"NFO") == 0) || ( c_bse_span_flag =='N' && strcmp(c_xchng_cd,"BFO") == 0 ) ) && (c_prd_typ == 'O') )  /*** Non SPAN Options ***/
		{
	
			fn_userlog( c_ServiceName, "For Non-SPAN Options");

			EXEC SQL EXECUTE
				BEGIN
				OPEN	 :cur_getreport FOR
					SELECT
					OSS_CLM_MTCH_ACCNT,				  
					OSS_XCHNG_CD,							  
					OSS_UNDRLYNG,							  
					OSS_PRDCT_TYP,						  
					OSS_EXPRY_DT,							  
					OSS_STRK_PRC/100,							  
					OSS_EXER_TYP,							  
					OSS_OPT_TYP,							  
					OSS_BNK_ACCNT,						  
					OSS_LIMIT / 100,								  
					OSS_ALCTD_AMT / 100,						  
					OSS_BFT_AMT / 100,							  
					OSS_IM_P,									  
					OSS_MM_P,									  
					OSS_SOMC_P,								  
					OSS_SPRD_MRGN_P ,					  
					OSS_ORD_MRGN_B / 100,						  
					OSS_TRD_MRGN_B / 100,						  
					OSS_SPRD_MRGN_B / 100,					  
					OSS_ORD_MRGN_A / 100,						  
					OSS_TRD_MRGN_A / 100,						  
					OSS_SPRD_MRGN_A / 100,					  
					OSS_ADD_MRGN_AMT / 100,					  
					OSS_CNTRCT_TAG,						  
					OSS_OPN_PSTN,							  
					OSS_CMP ,									  
					TO_CHAR(OSS_TIME ,'DD/MM/YYYY HH24:MI:SS'),									  
					OSS_PLG_AMT,							  
					OSS_TRIGGER_PRC/100,					  
					OSS_SHR_PLG_AMT/100   ,
					OSS_FDR_AMt / 100 oss_FDR_AMt,				  
					DECODE ( NVL(ICD_ATS_STATUS,'N') ,'N','Normal Online',DECODE(ICD_ATS_STATUS,'Y','ATS Offline','ERS online')) client_status,	
					NVL(OSS_MIN_TRGPRC,0)/100 ERS_TRIGGER_PRC ,	
					 NVL(OSS_ERS_FLG,'N') 													/*Ver 1.1 */
					FROM 				UAC_USR_ACCNTS,
											ICD_INFO_CLIENT_DTLS ,
											OSS_FO_OPT_SQ_SMRY
					WHERE				TRUNC(OSS_TIME) >= TO_DATE(:c_from_dt,'DD-MON-YYYY HH24:MI:SS')
					AND					TRUNC(OSS_TIME) <= TO_DATE(:c_to_dt,'DD-MON-YYYY HH24:MI:SS')
					AND					OSS_CLM_MTCH_ACCNT like DECODE(:c_mtch_acc,'ALL','%',:c_mtch_acc)	
					AND					trim(OSS_UNDRLYNG) like DECODE(:c_undrlyng,'ALL','%',:c_undrlyng)	
					AND					UAC_CLM_MTCH_ACCNT =  OSS_CLM_MTCH_ACCNT
					AND					ICD_USER_ID				 = UAC_USR_ID  
					AND					OSS_XCHNG_CD			 = :c_xchng_cd;
				END;
			END-EXEC;

			if(SQLCODE != 0)
			{
				tpfree((char *) ptr_fml_Obuf);
				fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}	

			if( DEBUG_MSG_LVL_0 )
			{
				fn_userlog( c_ServiceName, "Getting Records");
			}

			for(;;)
			{
				MEMSET(c_mtch_acc); 
				MEMSET(c_time);          
				MEMSET(c_expry_dt);     
				MEMSET(c_clnt_stts);    
				MEMSET(c_bnk_accnt);              
				d_limit = 0.0;						    
				d_allctd_amt = 0.0;				
				d_blck_for_trd = 0.0;			
				d_ini_mrgn_prcnt = 0.0;		
				d_min_mrgn_prcnt = 0.0;		
				d_somc_prcnt = 0.0;				
				d_sprd_mrgn = 0.0;				  
				d_ordmrgn_bef = 0.0;			  
				d_trdmrgn_bef = 0.0;			  
				d_sprdmrgn_bef = 0.0;			
				d_ordmrgn_aft = 0.0;			  
				d_trdmrgn_aft = 0.0;			  
				d_sprdmrgn_aft = 0.0;			
				d_addmrgn_amt = 0.0;			  
				l_opn_pstn = 0;					
				d_currt_mrk_prc = 0.0;		  
				d_pldge_amt = 0.0;				  
				d_mtm_trg_prc = 0.0;  		  
				d_share_plg_amt = 0.0;		  

				EXEC SQL
					FETCH :cur_getreport	
					INTO	:c_mtch_acc,				
								:c_xchng_cd,					
								:c_undrlyng,				
								:c_prd_typ,					
								:c_expry_dt,					
								:d_strk_prc,					
								:c_exer_typ,					
								:c_opt_typ,					
								:c_bnk_accnt,				
								:d_limit,						
								:d_allctd_amt,				
								:d_blck_for_trd,			
								:d_ini_mrgn_prcnt,		
								:d_min_mrgn_prcnt,		
								:d_somc_prcnt,				
								:d_sprd_mrgn,				
								:d_ordmrgn_bef,			
								:d_trdmrgn_bef,			
								:d_sprdmrgn_bef,			
								:d_ordmrgn_aft,			
								:d_trdmrgn_aft,			
								:d_sprdmrgn_aft,			
								:d_addmrgn_amt,			
								:c_cntrct_tag,				
								:l_opn_pstn,					
								:d_currt_mrk_prc,		
								:c_time ,						
								:d_pldge_amt,				
								:d_mtm_trg_prc,  		
								:d_share_plg_amt,	
								:d_oss_fdr_amnt,	
								:c_clnt_stts,
								:d_min_trg_prc,					/* Ver 1.1 */	
								:c_ers_flg; 						/* Ver 1.1 */
				if ( SQLCODE != 0 )
				{
					if ( SQLCODE == NO_DATA_FOUND )
					{
						fn_userlog( c_ServiceName, "ALL Done");
						EXEC SQL CLOSE :cur_getreport;
						break;
					}
					tpfree((char *) ptr_fml_Obuf);
					fn_errlog( c_ServiceName, "S31065", SQLMSG, c_err_msg );
					EXEC SQL CLOSE :cur_getreport;
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}	
			
					/* Ver 1.1 Starts 									Commented	in Ver 1.1 *
					EXEC SQL
					SELECT count(1) INTO :i_cnt from FEM_FOMTM_ERS_MSTR where  FEM_CLM_MTCH_ACCNT = :c_mtch_acc AND FEM_ACT_DACT_FLG ='A';
					if ( SQLCODE != 0 )
        	{
          	if ( SQLCODE == NO_DATA_FOUND )
          	{
          	  EXEC SQL CLOSE :cur_getreport;
         	    break;
         	  }
          	tpfree((char *) ptr_fml_Obuf);
          	fn_errlog( c_ServiceName, "S31070", SQLMSG, c_err_msg );
         	  EXEC SQL CLOSE :cur_getreport;
         	  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         	 	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}
					
					************** Commented in Ver 1.1 *************/ 
			
				 /***** if( i_cnt > 0) *** Commmented in Ver 1.1 *****/
				 if( c_ers_flg == 'Y')    /** Added in Ver 1.1 **/
				 {
						strcpy(c_clnt_typ,"MTM ERS CLIENT");
				 }
				 else 
				 {
					 strcpy(c_clnt_typ,NULL);
				 }
				 /* Ver 1.1 Ends */
	
				rtrim((char *) c_mtch_acc);
				rtrim((char *) c_time);
				rtrim((char *) c_expry_dt);
				rtrim((char *) c_clnt_stts);
				rtrim((char *) c_bnk_accnt);

				if( DEBUG_MSG_LVL_3 )
				{
					fn_userlog( c_ServiceName, "Packing Data");
					fn_userlog( c_ServiceName, "c_mtch_acc : |%s|", c_mtch_acc);
					fn_userlog( c_ServiceName, "c_prd_typ : |%c|", c_prd_typ);
					fn_userlog( c_ServiceName, "c_undrlyng : |%s|", c_undrlyng);
					fn_userlog( c_ServiceName, "c_ers_flg : |%c|", c_ers_flg );   /* Added in Ver 1.1 */
					fn_userlog( c_ServiceName, "c_expry_dt  : |%s|", c_expry_dt);
					fn_userlog( c_ServiceName, "d_strk_prc : |%lf|", d_strk_prc);
					fn_userlog( c_ServiceName, "c_opt_typ : |%c|", c_opt_typ);
					fn_userlog( c_ServiceName, "c_bnk_accnt : |%s|", c_bnk_accnt);
				}

				i_returncode = fn_pack_vartofml(	c_ServiceName,
																					c_err_msg,
																					&ptr_fml_Obuf,
																					35,
																					FFO_EBA_MTCH_ACT_NO	, ( char *) c_mtch_acc,				
																					FFO_XCHNG_CD , ( char *) c_xchng_cd,					
																					FFO_UNDRLYNG , ( char *) c_undrlyng,				
																					FFO_PRDCT_TYP,  (char *) &c_prd_typ,					
																					FFO_EXPRY_DT , ( char *) c_expry_dt,					
																					FFO_AVM_PRCNT , ( char *) &d_strk_prc,					
																					FFO_EXER_TYP, (char *) &c_exer_typ,					
																					FFO_OPT_TYP, (char *) &c_opt_typ,					
																					FFO_BNK_ACT_NO , ( char *) c_bnk_accnt,				
																					FFO_LIMIT		, ( char *) &d_limit,						
																					FFO_BAL_AMT , ( char *) &d_allctd_amt,				
																					FFO_C_BLKD_TRD_MRGN , ( char *) &d_blck_for_trd,			
																					FFO_INIT_MRGN_PRCNT , ( char *) &d_ini_mrgn_prcnt,		
																					FFO_MIN_MRGN_PRCNT , ( char *) &d_min_mrgn_prcnt,		
																					FFO_SOMC_PRCNT	 , ( char *) &d_somc_prcnt,				
																					FFO_SPREAD_MRGN , ( char *) &d_sprd_mrgn,				
																					FFO_C_ORDR_MRGN	, ( char *) &d_ordmrgn_bef,			
																					FFO_C_TRD_MRGN		, ( char *) &d_trdmrgn_bef,			
																					FFO_U_IMTM_SP_MRGN		, ( char *) &d_sprdmrgn_bef,			
																					FFO_U_ORDR_MRGN		, ( char *) &d_ordmrgn_aft,			
																					FFO_U_TRD_MRGN		, ( char *) &d_trdmrgn_aft,			
																					FFO_U_SPRD_MRGN		, ( char *) &d_sprdmrgn_aft,			
																					FFO_U_ADD_MRGN_VAL , ( char *) &d_addmrgn_amt,			
																					FFO_CNTRCT_TAG, (char *) &c_cntrct_tag,				
																					FFO_OPNPSTN_QTY , ( char *) &l_opn_pstn,					
																					FFO_FUT_PRC , ( char *) &d_currt_mrk_prc,		
																					FFO_ORD_DT		, ( char *) &c_time ,						
																					FFO_PLG_AMT , ( char *) &d_pldge_amt,				
																					FFO_EFF_CLS_PRC , ( char *) &d_mtm_trg_prc,  		
																					FFO_PLG_ORD_VAL , ( char *) &d_share_plg_amt,		
																					FFO_PI_PO_AMT , ( char *) &d_oss_fdr_amnt,		
																					FFO_PLG_STTS , ( char *) c_clnt_stts,					
																					FFO_AMOUNT,( char *) &d_min_trg_prc,					/* Ver 1.1 */
                                       		FFO_PSTN_FLG,  ( char *) c_clnt_typ,					/* Ver 1.1 */
																					FFO_SPL_FLG,  ( char *)&c_ers_flg);        /* Ver 1.1 */

				if( i_returncode == -1 )
				{
					tpfree((char *) ptr_fml_Obuf);
					fn_errlog( c_ServiceName, "S31075", LIBMSG, c_err_msg );
					EXEC SQL CLOSE :cur_getreport;
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				if( DEBUG_MSG_LVL_0 )
				{
					fn_userlog( c_ServiceName, "Data Packed");
				}
			}
		}
		
		else if ( ( ( c_span_flag == 'Y' && strcmp(c_xchng_cd,"NFO") == 0) || ( c_bse_span_flag =='Y' && strcmp(c_xchng_cd,"BFO") == 0 ) ) && (c_prd_typ == 'F' || c_prd_typ == 'O') )  /*** SPAN Future or Options ***/
		{
			if( DEBUG_MSG_LVL_0 )
			{
				fn_userlog( c_ServiceName, "For SPAN Futures or Options");
			}

			EXEC SQL EXECUTE
				BEGIN
				OPEN	 :cur_getreport FOR
					SELECT			
					SIS_CLM_MTCH_ACCNT,			                  	
					SIS_XCHNG_CD,						
					SIS_UNDRLYNG,						              		
					SIS_PRDCT_TYP,					                  
					TO_CHAR(SIS_EXPRY_DT,'dd-Mon-yyyy')SIS_EXPRY_DT,	                    
					SIS_STRK_PRC / 100,	                    
					SIS_EXER_TYP,				                    
					SIS_OPT_TYP,				                  
					SIS_BNK_ACCNT,			                
					SIS_ALCTD_AMT / 100,                  
					SIS_BFT_AMT / 100,			                         
					SIS_INTL_MRGN_OLD / 100,                     
					SIS_INTL_MRGN_NEW / 100,                     
					SIS_MIN_MRGN_OLD / 100,                    
					SIS_MIN_MRGN_NEW / 100,                    
					DECODE(SIS_MTM_FLG_OLD,'M','Y','N') SIS_MTM_FLG_OLD,	                                
					DECODE(SIS_MTM_FLG_NEW,'M','Y','N') SIS_MTM_FLG_NEW,	                        
					SIS_REQD_INTL_MRGN_OLD / 100,	                  
					SIS_REQD_INTL_MRGN_NEW / 100,	               
					to_char(SIS_TIME , 'DD-MON-YYYY HH24:MI:SS') SIS_TIME,
					SIS_CURR_LMT / 100,			                  
					SIS_SHORTAGE / 100,			                  
					SIS_TOT_PLG_AMT / 100,                
					SIS_PLG_AMT / 100,			                                   
					SIS_FDR_AMT / 100,			                                   
					DECODE ( NVL(ICD_ATS_STATUS,'N') ,'N','Normal Online',DECODE(ICD_ATS_STATUS,'Y','ATS Offline','ERS online')) client_status ,
          NVL(SIS_TRG_PRC,0.0) /****** ver 1.2 *********/
					FROM		SIS_SPN_IMTM_SQ_SMRY ,	UAC_USR_ACCNTS,	ICD_INFO_CLIENT_DTLS
					WHERE 	TRUNC(SIS_TIME)  BETWEEN TO_DATE(:c_from_dt,'DD-MON-YYYY HH24:MI:SS') AND	TO_DATE(:c_to_dt,'DD-MON-YYYY HH24:MI:SS')
					AND			trim(SIS_UNDRLYNG) like DECODE(:c_undrlyng,'ALL','%',:c_undrlyng)	       
					AND			SIS_CLM_MTCH_ACCNT like DECODE(:c_mtch_acc,'ALL','%',:c_mtch_acc)	     
					AND			SIS_XCHNG_CD =  :c_xchng_cd
					AND			UAC_CLM_MTCH_ACCNT =   SIS_CLM_MTCH_ACCNT			
					AND			ICD_USER_ID = UAC_USR_ID  		
					ORDER BY SIS_TIME ASC	;	
				END;
			END-EXEC;

			if(SQLCODE != 0)
			{
				tpfree((char *) ptr_fml_Obuf);
				fn_errlog( c_ServiceName, "S31080", SQLMSG, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}	

			if( DEBUG_MSG_LVL_0 )
			{
				fn_userlog( c_ServiceName, "Getting Records");
			}

			for(;;)
			{
				MEMSET(c_mtch_acc); 
				MEMSET(c_undrlyng);          
				MEMSET(c_expry_dt);     
				MEMSET(c_bnk_accnt);    
				MEMSET(c_clnt_stts);              
				d_allctd_amt = 0.0;				
				d_blck_for_trd = 0.0;			
				d_inimrgn_old = 0.0;			
				d_inimrgn_new = 0.0;			
				d_minmrgn_old = 0.0;			
				d_minmrgn_new = 0.0;			
				d_req_inimrgn_old = 0.0;	
				d_req_inimrgn_new = 0.0;	
				d_curr_limit = 0.0;				
				d_shortage = 0.0;					
				d_tot_plg_amt = 0.0;			
				d_pldge_amt = 0.0;				
			  d_min_trg_prc = 0.0;
	
				EXEC SQL
					FETCH	:cur_getreport			
					INTO	:c_mtch_acc,			
								:c_xchng_cd,				
								:c_undrlyng,			
								:c_prd_typ,				
								:c_expry_dt,				
								:d_strk_prc,				
								:c_exer_typ,				
								:c_opt_typ,				
								:c_bnk_accnt,			
								:d_allctd_amt,			
								:d_blck_for_trd,		
								:d_inimrgn_old,		
								:d_inimrgn_new,		
								:d_minmrgn_old,		
								:d_minmrgn_new,		
								:c_mtmflg_old,			
								:c_mtmflg_new,			
								:d_req_inimrgn_old,
								:d_req_inimrgn_new,
								:c_time ,					
								:d_curr_limit,			
								:d_shortage,				
								:d_tot_plg_amt,		
								:d_pldge_amt,			
								:d_sis_fdr_amnt,			
								:c_clnt_stts,
                :d_min_trg_prc;				

				if ( SQLCODE != 0 )
				{
					if ( SQLCODE == NO_DATA_FOUND )
					{
						fn_userlog( c_ServiceName, "ALL Done");
						EXEC SQL CLOSE :cur_getreport;
						break;
					}
					tpfree((char *) ptr_fml_Obuf);
					fn_errlog( c_ServiceName, "S31085", SQLMSG, c_err_msg );
					EXEC SQL CLOSE :cur_getreport;
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}	

				rtrim((char *) c_mtch_acc);
				rtrim((char *) c_undrlyng);
				rtrim((char *) c_expry_dt);
				rtrim((char *) c_bnk_accnt);
				rtrim((char *) c_clnt_stts);

				if( DEBUG_MSG_LVL_3 )
				{
					fn_userlog( c_ServiceName, "Packing Data");
					fn_userlog( c_ServiceName, "c_mtch_acc : |%s|", c_mtch_acc);
					fn_userlog( c_ServiceName, "c_undrlyng : |%s|", c_undrlyng);
					fn_userlog( c_ServiceName, "c_expry_dt : |%s|", c_expry_dt);
					fn_userlog( c_ServiceName, "d_strk_prc : |%lf|", d_strk_prc);
					fn_userlog( c_ServiceName, "c_opt_typ : |%c|", c_opt_typ);
					fn_userlog( c_ServiceName, "c_bnk_accnt  : |%s|", c_bnk_accnt);
					fn_userlog( c_ServiceName, "d_min_trg_prc  : |%lf|",d_min_trg_prc);/** ver 1.2 **/
				}

       /*** ver 1.2 starts ***/
        if( d_min_trg_prc > 0 )
        {
            d_min_trg_prc=d_min_trg_prc/100.00;
        }
       /*** ver 1.2 ends ***/

				i_returncode = fn_pack_vartofml(	c_ServiceName,
																					c_err_msg,
																					&ptr_fml_Obuf,
																					27, /*** ver 1.2 **/
																				 	FFO_EBA_MTCH_ACT_NO	, ( char *) c_mtch_acc,				
																					FFO_XCHNG_CD , ( char *) c_xchng_cd,					
																					FFO_UNDRLYNG , ( char *) c_undrlyng,				
																					FFO_PRDCT_TYP, (char *) &c_prd_typ,					
																					FFO_EXPRY_DT , ( char *) c_expry_dt,					
																					FFO_AVM_PRCNT , ( char *) &d_strk_prc,					
																					FFO_EXER_TYP, (char *) &c_exer_typ,					
																					FFO_OPT_TYP, (char *) &c_opt_typ,					
																					FFO_BNK_ACT_NO , ( char *) c_bnk_accnt,				
																					FFO_BAL_AMT , ( char *) &d_allctd_amt,				
																					FFO_C_BLKD_TRD_MRGN , ( char *) &d_blck_for_trd,			
																					FFO_C_ORDR_MRGN	, ( char *) &d_inimrgn_old,			
																					FFO_U_ORDR_MRGN , ( char *) &d_inimrgn_new,			
																					FFO_C_TRD_MRGN , ( char *) &d_minmrgn_old,			
																					FFO_U_TRD_MRGN , ( char *) &d_minmrgn_new,			
																					FFO_STATUS_FLG , (char *) &c_mtmflg_old,	 /* '*' Added in Ver TOL */			
																					FFO_MTM_FLG, (char *) &c_mtmflg_new,				
																					FFO_SPREAD_MRGN	 , ( char *) &d_req_inimrgn_old,	
																					FFO_U_SPRD_MRGN    , ( char *) &d_req_inimrgn_new,	
																					FFO_ORD_DT		, ( char *) c_time ,						
																					FFO_LIMIT		, ( char *) &d_curr_limit,				
																					FFO_FUT_PRC , ( char *) &d_shortage,					
																					FFO_PLG_ORD_VAL , ( char *) &d_tot_plg_amt,			
																					FFO_PLG_AMT , ( char *) &d_pldge_amt,				
																					FFO_PI_PO_AMT, ( char *) &d_sis_fdr_amnt,
                                          FFO_AMOUNT,( char *) &d_min_trg_prc,          /* ver 1.2 */				
																					FFO_PLG_STTS , ( char *) c_clnt_stts);			


				if( i_returncode == -1 )
				{
					tpfree((char *) ptr_fml_Obuf);
					fn_errlog( c_ServiceName, "S31090", LIBMSG, c_err_msg );
					EXEC SQL CLOSE :cur_getreport;
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				if( DEBUG_MSG_LVL_0 )
				{
					fn_userlog( c_ServiceName, "Data Packed");
				}
			}
		}
	}

	tpreturn(TPSUCCESS, SUCC_BFR, (char *)ptr_fml_Obuf, 0L, 0 ); 
}
