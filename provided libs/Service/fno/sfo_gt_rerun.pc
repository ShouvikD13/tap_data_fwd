/***********************************************************************************************/
/*  Program           : SFO_GT_RERUN                                                           */
/*                                                                                             */
/*  Input             : FFO_XCHNG_CD                                                           */
/*                      FFO_RUN_NUM                                                            */
/*                                                                                             */
/*  Output            : FFO_XCHNG_CD                                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                                    */
/*                      FFO_RUN_NUM                                                            */
/*                      FFO_TRD_DT                                                             */
/*                      FFO_BNK_ACT_NO                                                         */
/*                      FFO_BNK_TRN_TYP                                                        */
/*                      FFO_BNK_BLK_CD                                                         */
/*                      FFO_DR_CR_FLG                                                          */
/*                      FFO_PI_PO_AMT                                                          */
/*                      FFO_EBA_STTS                                                           */
/*                      FFO_BNK_STTS                                                           */
/*                                                                                             */
/*  Description       : This program fetches the list of records from the                      */
/*                      failure table for which rerun process is to be run                     */
/*                                                                                             */
/*  Log               :                                                                        */
/*                                                                                             */
/***********************************************************************************************/
/*        14-Nov-2003     Ver 1.0        sangeet sinha      Release 1.0                        */
/*				20-Dec-2007			Ver 1.1        sandeep patil      IBM Migration                      */
/*        27-May-2011     Ver 1.2        sachin birje       ADM Changes                        */
/*        16-Feb-2016     Ver 1.3        Bhupendra Malik    Bank ACC No chaage                 */
/*        20-Oct-2016     Ver VQC        Mrinal             VQC                                */
/*        13-Jun-2018     Ver 1.4        Tanmay Patel       Disallow clients with outstanding  */ 
/*                                                          form taking fresh exposure         */
/*        30-Sep-2019     Ver 1.5        Akash B 	          Deposit Model Changes              */
/*        27-Sep-2021     Ver 1.6        Abhinav Kumbhar    IDFC Changes                       */
/*        08-Oct-2022     Ver 1.7        Sachin Birje       Spira257: Not to consider Trance   */ 
/*                                                          number blank records for rerun     */
/***********************************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */

#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
/***  #include <fn_battmpt.h>       *** Commented in VQC ***/
#include <fn_tuxlib.h>
#include <fn_log.h>			 /*** Ver 1.1 ***/
#include <fn_read_debug_lvl.h>			/*** Ver 1.1 ***/


void SFO_GT_RERUN ( TPSVCINFO *rqst )
{

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  char c_ServiceName [ 33 ];
  /***  char c_err_msg [ 256 ];             Changed data type of Variable from char to varchar in VQC ***/

  char c_matc_id_presnt ='N';  /*** Ver 1.4 ***/

  int i_returncode = 0;                 /*** Initialized in VQC ***/

  int i_err[1];               /*** Ver 1.4 ***/
  int i_ferr[1];               /*** Ver 1.4 ***/
  int i = 0; 
  EXEC SQL BEGIN DECLARE SECTION;
  	char c_xchng_cd [ 4 ];
  	char c_bank_nm [11];          /*** Ver 1.6 ***/
    /***  long int li_run_no;               *** Commented in VQC ***/
    char sql_clm_mtch_accnt [ 11 ];  
    char sql_xchng_cd [ 4 ] ;       
    long int sql_run_no = 0;               /*** Initialized in VQC ***/
    char c_match_accnt [11];    /*** Ver 1.4 ***/
    char c_exist_flg = 'Y';     /*** Ver 1.4 ***/
    varchar sql_run_dt [ LEN_DATE ];
    varchar sql_bnk_accnt_nmbr [ 21 ];

    char sql_trnsctn_typ = '\0';        /***  Initialized in VQC ***/
    char sql_dc_flg = '\0';             /***  Initialized in VQC ***/
    char sql_eba_stts = '\0';           /***  Initialized in VQC ***/
    /***  char sql_stts;                *** Commented in VQC ***/
    char sql_timestamp[21];
    char sql_trace[21]; 
    char c_model_flg='\0';              /*** Ver 1.5 *****/


    varchar c_err_msg [ 256 ];          /*** VQC ***/

    char sql_bnk_stts = '\0';           /***  Initialized in VQC ***/
    long int sql_blk_cd = 0;            /***  Initialized in VQC ***/
    double  sql_amt = 0.0;              /***  Initialized in VQC ***/

    sql_cursor  sys_cursor;   /*** Ver 1.4 ***/

  EXEC SQL END DECLARE SECTION;

    MEMSET (sql_run_dt);                  /*** Memset in VQC ***/
    MEMSET (sql_bnk_accnt_nmbr);          /*** Memset in VQC ***/
    MEMSET (c_err_msg);                   /*** Memset in VQC ***/
    MEMSET (sql_timestamp);               /*** Memset in VQC ***/
    MEMSET (sql_trace);                   /*** Memset in VQC ***/
    MEMSET (sql_clm_mtch_accnt);          /*** Memset in VQC ***/
    MEMSET (sql_xchng_cd);                /*** Memset in VQC ***/
    MEMSET (c_xchng_cd);                  /*** Memset in VQC ***/
    MEMSET (c_bank_nm);                   /*** Ver 1.6 ***/

  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );

	INITDBGLVL(c_ServiceName);			/*** Ver 1.1 ***/

  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                    c_err_msg.arr,  /*** data type Changed from char to varchar in VQC ***/
                                    ptr_fml_Ibuf,
                                    2,/*** Ver 1.6 ***/
                                    FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                               			FFO_QUEUE_NAME, ( char * )c_bank_nm,NULL);             /*** Ver 1.6 ***/

  if( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31005", LIBMSG , c_err_msg.arr ); /*** data type Changed from char to varchar in VQC ***/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** data type Changed from char to varchar in VQC
***/ 
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }

  /******   Ver 1.4  Starts   *******/       
  i_err[0] = Fget32( ptr_fml_Ibuf, FFO_EBA_MTCH_ACT_NO, 0,(char *)c_match_accnt,0);
  i_ferr[0] = Ferror32;

  if ( i_err[0] == -1 )
  {
   if( Ferror32 == FNOTPRES )
   {
    c_matc_id_presnt ='N';
   }
   else
   {
    fn_errlog( c_ServiceName, "S31010", Fstrerror32(i_ferr[0]),c_err_msg.arr);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
   }
  }  
  else
  {
   c_matc_id_presnt ='Y';
   fn_userlog(c_ServiceName, " Match Id :%s:", c_match_accnt); 
  }
  /*******   Ver 1.4 Ends *******/

  if (DEBUG_MSG_LVL_3) 			/*** Ver 1.1 ***/
	{	
    fn_userlog( c_ServiceName, "Excahnge code :%s:", c_xchng_cd );
    fn_userlog( c_ServiceName, "c_bank_nm :%s:", c_bank_nm); /* Ver 1.6 **/
  }

  ptr_fml_Obuf = NULL;
  EXEC SQL ALLOCATE :sys_cursor;  /*** Ver 1.4 ***/

  if (c_matc_id_presnt == 'N') /** If condition Added in Ver 1.4 ***/
  {
    fn_userlog( c_ServiceName,"c_matc_id_presnt :%c", c_matc_id_presnt);   /*** Ver 1.4 ***/
     /**  DECLARE cur_rerun_rec CURSOR FOR ** Commented in Ver 1.4 ***/

    EXEC SQL EXECUTE    /** Ver 1.4 **/
     BEGIN              /** Ver 1.4 **/
      OPEN :sys_cursor FOR       /*** cursor change in Ver 1.4 ***/
      SELECT  fbm_xchng_cd,
							fbm_clm_mtch_accnt,
							fbm_run_no,
							fbm_run_dt,
							/*fbm_bnk_accnt_nmbr,				** Ver 1.3 comment **/
							clb_bnk_acct_nmbr,					/** Ver 1.3 **/
							fbm_trnsctn_typ,
							nvl(fbm_blk_cd,0),
							nvl(fbm_dc_flg,' '),
							fbm_amt,
      /***    nvl(fbm_stts,' '),            *** Commented in VQC ***/							
              nvl(fbm_eba_stts,' '),
							nvl(fbm_bnk_stts,' '),
							nvl(fbm_trace,' '),
							nvl(to_char(fbm_timestamp,'yyyymmddhh24miss'),' '),
              nvl(FBM_FUND_MODEL_FLG,'N')   /*** Ver 1.5 ****/
      FROM    fbm_fo_bnk_flr_msg,clb_bnk_accts   /*** CLB_BNK_ACCTS Added in Ver 1.3 ***/
      WHERE   fbm_clm_mtch_accnt=clb_clm_mtch_accnt  /*** Added in Ver 1.3 ***/
			AND			fbm_xchng_cd = :c_xchng_cd
			AND			fbm_stts		 = 'N'
      AND     fbm_trace is not null  /*** Ver 1.7 ***/
      AND     NVL(CLB_BNK_NM,'ICICI')   = :c_bank_nm       /*** Ver 1.6 ***/	
      AND     fbm_prdct_cd is null;           /*** Ver 1.2 ***/
 
     END;        /*** Ver 1.4 ***/
    END-EXEC;    /*** Ver 1.4 ***/
  }
/*** Ver 1.4 Starts ***/

  else if ( c_matc_id_presnt == 'Y')
  {
    fn_userlog( c_ServiceName,"c_matc_id_presnt :%c", c_matc_id_presnt);
    EXEC SQL EXECUTE
     BEGIN
      OPEN :sys_cursor FOR
      SELECT  fbm_xchng_cd,
              fbm_clm_mtch_accnt,
              fbm_run_no,
              fbm_run_dt,
              clb_bnk_acct_nmbr,
              fbm_trnsctn_typ,
              nvl(fbm_blk_cd,0),
              nvl(fbm_dc_flg,' '),
              fbm_amt,
              nvl(fbm_eba_stts,' '),
              nvl(fbm_bnk_stts,' '),
              nvl(fbm_trace,' '),
              nvl(to_char(fbm_timestamp,'yyyymmddhh24miss'),' '),
              nvl(FBM_FUND_MODEL_FLG,'N')   /*** Ver 1.5 ****/
      FROM    fbm_fo_bnk_flr_msg,clb_bnk_accts
      WHERE   fbm_clm_mtch_accnt = :c_match_accnt
      AND     fbm_clm_mtch_accnt = clb_clm_mtch_accnt
      AND     fbm_xchng_cd = :c_xchng_cd
      AND     fbm_trace is not null  /*** Ver 1.7 ***/
      AND     fbm_stts     = 'N'
      AND     NVL(CLB_BNK_NM,'ICICI')   = :c_bank_nm       /*** Ver 1.6 ***/ 
      AND     fbm_prdct_cd is null;

     END;
    END-EXEC;
   }
/*** Ver 1.4 Ends ***/    

 /***    EXEC SQL
      OPEN cur_rerun_rec;   *** commented in Ver 1.4 ***/

    while(1)
    {
      EXEC SQL
        FETCH :sys_cursor     /*** Ver 1.4 ***/
      /***  FETCH cur_rerun_rec ** comented in Ver 1.4 ***/
        INTO  :sql_xchng_cd,
              :sql_clm_mtch_accnt,
              :sql_run_no,
              :sql_run_dt,
              :sql_bnk_accnt_nmbr,
              :sql_trnsctn_typ,
              :sql_blk_cd,
              :sql_dc_flg,
              :sql_amt,
       /***   :sql_stts,                  *** Commented in VQC ***/
              :sql_eba_stts,
              :sql_bnk_stts,
              :sql_trace,
              :sql_timestamp,
              :c_model_flg;     /**** Ver 1.5 ***/

        if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
        {
          fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg.arr ); /*** data type Changed from char to varchar in VQC ***/
          /***   EXEC SQL CLOSE cur_rerun_rec;  **** Commented in ver 1.4 ***/
          EXEC SQL CLOSE :sys_cursor;   /*** Ver 1.4 ***/
          EXEC SQL FREE  :sys_cursor;   /*** Ver 1.4 ***/
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*** data type Changed from char to varchar in VQC ***/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        if( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }
        
        SETNULL ( sql_run_dt );
        SETNULL ( sql_bnk_accnt_nmbr );
        rtrim(sql_xchng_cd);  
        rtrim(sql_trace);    
        rtrim(sql_timestamp);
        rtrim(sql_clm_mtch_accnt); 
        rtrim(sql_bnk_accnt_nmbr.arr);   /** Ver 1.1 **/

        i_returncode = fn_pack_vartofml( c_ServiceName,
                                         c_err_msg.arr, /*** data type Changed from char to varchar in VQC ***/
                                         &ptr_fml_Obuf,
                                         14,     /**** changed from 13 to 14 in ver 1.5 ******/
                             FFO_XCHNG_CD, ( char * )sql_xchng_cd, 
                             FFO_EBA_MTCH_ACT_NO, ( char * )sql_clm_mtch_accnt,  
                             FFO_RUN_NUM, ( char * )&sql_run_no,
                             FFO_TRD_DT, ( char * )sql_run_dt.arr,
                             FFO_BNK_ACT_NO, ( char * )sql_bnk_accnt_nmbr.arr,
                             FFO_BNK_TRN_TYP, ( char * )&sql_trnsctn_typ,
                             FFO_BNK_BLK_CD, ( char * )&sql_blk_cd,
                             FFO_DR_CR_FLG, ( char * )&sql_dc_flg,
                             FFO_PI_PO_AMT, ( char * )&sql_amt,
                             FFO_EBA_STTS, ( char * )&sql_eba_stts,
                             FFO_BNK_STTS, ( char * )&sql_bnk_stts ,
                             FML_SYSTEM_TRACE, ( char * )sql_trace , 
                             FML_TM, ( char * )sql_timestamp,
                             FFO_UPLD_MTCH_FLG,(char *)&c_model_flg);  /** Ver 1.5 ***/  

        if( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg.arr );  /*** data type Changed from char to varchar in VQC ***/
          /***  EXEC SQL
          **  CLOSE cur_rerun_rec;  *** commented in Ver 1.4 ***/
          EXEC SQL CLOSE :sys_cursor;  /*** Ver 1.4 ***/
          EXEC SQL FREE  :sys_cursor;  /*** Ver 1.4 ***/
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );  /*** data type Changed from char to varchar in VQC ***/
          tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }
     }

    /****  EXEC SQL  ***
    ***  CLOSE cur_rerun_rec;   *** commented in Ver 1.4 ***/
    EXEC SQL CLOSE :sys_cursor;    /*** Ver 1.4 ***/
    EXEC SQL FREE  :sys_cursor;    /*** Ver 1.4 ***/

  fn_userlog( c_ServiceName," **** Process completed Successfully ******");  /*** Ver 1.4 ***/  

  tpreturn(TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
}
