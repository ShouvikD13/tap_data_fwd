/*  Program           : SFO_GET_FLASHCNT                                      */
/*                                                                            */
/* Input              : FFO_EBA_MTCH_ACT_NO																		*/
/*											FFO_REQ_TYP																						*/
/*											FFO_UNDRLYNG																					*/
/*											FFO_CSE_ID																						*/
/*											FFO_ORD_TYP					-- 	1.1 													*/
/*                                                                            */
/*  Output            : FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_CTGRY_INDSTK                                      */
/*											FFO_HGH_INDX_VAL																			*/
/*											FFO_INDX_CD																						*/
/*											FFO_REMARKS 																					*/
/*                                                                            */
/******************************************************************************/
/*  Log 							: 1.0 Shailesh Hinge  02-May-2022 New										*/
/*				           		1.1 Ravi Malla			20-Jul-2022 Minor Changes         */	
/*																																						*/
/******************************************************************************/
/*  This service is called from the Flash trade in two ways:									*/
/*		1: To return the default list of stock codes & the criteria							*/
/*		2: To return the unique contract matching the input stockcode & criteria*/
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fml_def.h>
#include <fo.h>
#include <fo_view_def.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>			
#include <fml_rout.h>	
#include <fn_read_debug_lvl.h>		
#include <fo_get_records.h>			


#define MOST_TRADED_OPTION	1
#define HIGHEST_OI_OPTION	2
#define ATM_OPTION	3
#define CURRENT_MONTH_FUTURES	4	
#define EQUITY 5
#define SET_CNTRCT 'S'
#define GET_CNTRCT 'G'
#define DEFAULT 'D' 

void SFO_GET_FLASHCNT( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

	ptr_fml_Obuf = NULL;

	char  c_ServiceName[33];
  char  c_err_msg[256]; 

	int i_returncode  = 0;  


	char c_eq_xchng_cd[4];
	char c_category_op[50];
	char c_underlyng[7];
	char c_ord_type='\0';			/* 1.1 Minor changes */
	
	int i_actn_id = -1;
	int i_default = 0; 
	int l_category = 0; 

	int i_cntrct[12];
  int i_cntrcterr[12];


	char c_xchng_cd[4];
	char c_prdct_typ;
	char c_undrlyng_op[7]="\0";
	char c_undrlyng[7];
	char c_input_undrlyng[7];
	char c_underlyng_op[7];
	char c_expry_dt[12];
	char c_fut_expry_dt[12];
	long l_strk_prc=0;
	char c_exer_typ='\0';
	char c_opt_typ= '\0';
	long l_token_no = 0;
	long l_vol = 0;
	long l_oi = 0;
	long l_spot_prc= 0;
	int i = 0;

	int i_exist = -1;
	char c_mode = '\0';
	char c_lmt_mkt_flg='\0';
	long l_ordr_qty = 0;
	long l_cls_time = 0;
	char c_mtch_accnt[11] = "\0";
	char c_subtyp = '\0';
  char c_conf_req = 'R'; /*** Order confirmation required ***/
	long l_lmt_rt = 0;
	char c_null     = '\0'; 
	long l_null = 0;
	int i_pnd_stts = 0;
	int i_open_stts = 0;
  char c_ebl_dsbl_flg = '\0';

  EXEC SQL BEGIN DECLARE SECTION;
		    sql_cursor     sys_cursor;
	EXEC SQL END DECLARE SECTION;

	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );

	INITDBGLVL(c_ServiceName);	

	MEMSET(c_err_msg);      
	MEMSET(c_input_undrlyng);      
	MEMSET(c_underlyng);      
	MEMSET(c_underlyng_op);      
	MEMSET(c_category_op);      
	MEMSET(i_cntrct);      
	MEMSET(i_cntrcterr);      
	MEMSET(c_expry_dt);
	MEMSET(c_fut_expry_dt);


	i_cntrct    [ 0 ]   = Fget32( ptr_fml_Ibuf ,FFO_EBA_MTCH_ACT_NO,0,(char *) c_mtch_accnt,0);
  i_cntrcterr [ 0 ]   = Ferror32;
	i_cntrct    [ 1 ]   = Fget32( ptr_fml_Ibuf ,FFO_REQ_TYP,0,(char *) &c_mode,0);
  i_cntrcterr [ 1 ]   = Ferror32;

  for ( i=0 ; i < 2 ;  i++ )
  {
    if ( (i_cntrct[ i ] == -1 ) && (i_cntrcterr[ i ]  != FNOTPRES ) )
    {
      fn_userlog( c_ServiceName, "Error in :%d:",i );
      fn_errlog( c_ServiceName, "S31005", Fstrerror32( i_cntrcterr[i]),c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
		 if ( i_cntrct[ i ] == -1 && i_cntrcterr[1] == FNOTPRES)
		 {
				c_mode = 'G'; 
			  i_default = 1;
		 }
  }

  EXEC SQL
   SELECT count(0)
   INTO   :i_exist
   FROM   FFS_FO_FLASH_SETTING
   WHERE  FFS_CLM_MTCH_ACCNT= :c_mtch_accnt;

  if ( SQLCODE != 0)
  {
    fn_errlog ( c_ServiceName, "S31010", SQLMSG, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if (i_exist == 1)
	{
    EXEC SQL
      SELECT COUNT(1)
      INTO  :i_pnd_stts
      FROM FOD_FO_ORDR_DTLS,FFS_FO_FLASH_SETTING
      WHERE FOD_CLM_MTCH_ACCNT = :c_mtch_accnt 
			AND FOD_CLM_MTCH_ACCNT = FFS_CLM_MTCH_ACCNT
			AND FOD_XCHNG_CD = FFS_XCHNG_CD
			AND FOD_PRDCT_TYP = FFS_PRDCT_TYP
			AND FOD_UNDRLYNG =	FFS_UNDRLYNG   
			AND FOD_EXPRY_DT = FFS_EXPRY_DT   
			AND FOD_EXER_TYP = FFS_EXER_TYP 
			AND FOD_OPT_TYP =	 FFS_OPT_TYP  
			AND FOD_STRK_PRC = FFS_STRK_PRC 
      AND FOD_ORDR_STTS IN ('O','Q','R','P')
			AND FOD_SOURCE_FLG = 'F'; /*** Flash trade ***/

	 		if ( SQLCODE != 0)
  		{
    		fn_errlog ( c_ServiceName, "S31010", SQLMSG, c_err_msg );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}	

			EXEC SQL
       SELECT 
       	COUNT(SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) ) 
				INTO   :i_open_stts
        FROM   FOD_FO_ORDR_DTLS
        WHERE  FOD_XCHNG_CD = 'NFO' 
        AND    FOD_PRDCT_TYP  in ('F','O')
        AND    FOD_CLM_MTCH_ACCNT = :c_mtch_accnt
			  AND    FOD_SOURCE_FLG = 'F'
        GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
        HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, 'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) != 0;

      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      {
        fn_errlog ( c_ServiceName, "S31010", SQLMSG, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

	}

	fn_userlog(c_ServiceName,"i_exist=:%d: i_pnd_stts=:%d: i_open_stts=:%d:",i_exist,i_pnd_stts,i_open_stts);

	if (i_pnd_stts > 0  || i_open_stts > 0)
	{
		c_ebl_dsbl_flg = 'D';
	}
	else
	{
		c_ebl_dsbl_flg = 'E';
	}

	fn_userlog( c_ServiceName, "Mode passed is :%c:",c_mode );

	if (c_mode == DEFAULT)
	{
		i_default = 1;
	}

	if (c_mode == SET_CNTRCT )
	{
		i_cntrct    [ 0 ]   = Fget32( ptr_fml_Ibuf ,FFO_XCHNG_CD,0,(char *) c_xchng_cd,0);
		i_cntrcterr [ 0 ]   = Ferror32;
		i_cntrct    [ 1 ]   = Fget32( ptr_fml_Ibuf ,FFO_PRDCT_TYP,0,(char *) &c_prdct_typ,0);
		i_cntrcterr [ 1 ]   = Ferror32;
		i_cntrct    [ 2 ]   = Fget32( ptr_fml_Ibuf ,FFO_UNDRLYNG,0,(char *) c_undrlyng_op,0);
		i_cntrcterr [ 2 ]   = Ferror32;
		i_cntrct    [ 3 ]   = Fget32( ptr_fml_Ibuf ,FFO_EXPRY_DT,0,(char *) c_expry_dt,0);
		i_cntrcterr [ 3 ]   = Ferror32;
		i_cntrct    [ 4 ]   = Fget32( ptr_fml_Ibuf ,FFO_EXER_TYP,0,(char *) &c_exer_typ,0);
		i_cntrcterr [ 4 ]   = Ferror32;
		i_cntrct    [ 5 ]   = Fget32( ptr_fml_Ibuf ,FFO_OPT_TYP,0,(char *) &c_opt_typ,0);
		i_cntrcterr [ 5 ]   = Ferror32;
		i_cntrct    [ 6 ]   = Fget32( ptr_fml_Ibuf ,FFO_STRK_PRC,0,(char *) &l_strk_prc,0);
		i_cntrcterr [ 6 ]   = Ferror32;
		i_cntrct    [ 7 ]   = Fget32( ptr_fml_Ibuf ,FFO_LMT_MKT_SL_FLG,0,(char *) &c_lmt_mkt_flg,0);
		i_cntrcterr [ 7 ]   = Ferror32;
		i_cntrct    [ 8 ]   = Fget32( ptr_fml_Ibuf ,FFO_ORD_TOT_QTY,0,(char *) &l_ordr_qty,0);
		i_cntrcterr [ 8 ]   = Ferror32;
		i_cntrct    [ 9 ]   = Fget32( ptr_fml_Ibuf ,FFO_CLS_TM,0,(char *) &l_cls_time,0);
		i_cntrcterr [ 9 ]   = Ferror32;
		i_cntrct    [ 10 ]   = Fget32( ptr_fml_Ibuf ,FFO_RMS_PRCSD_FLG,0,(char *) &c_conf_req,0);
    i_cntrcterr [ 10 ]   = Ferror32;
    i_cntrct    [ 11 ]   = Fget32( ptr_fml_Ibuf ,FFO_LMT_RT,0,(char *) &l_lmt_rt,0);
    i_cntrcterr [ 11 ]   = Ferror32;

		for ( i=0 ; i < 12 ;  i++ )
		{
			if ( (i_cntrct[ i ] == -1 ) && (i_cntrcterr[ i ]  != FNOTPRES ) )
			{
				fn_userlog( c_ServiceName, "Error in :%d:",i );
				fn_errlog( c_ServiceName, "S31015", Fstrerror32( i_cntrcterr[i]),c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			 }
		}

		
		if (i_exist == 0)
		{	

		 	if (tpbegin(TRAN_TIMEOUT,0)== -1)
      {
      	fn_errlog(c_ServiceName,"S31020",TPMSG,c_err_msg);
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpabort( 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

			if (c_prdct_typ == 'F' )
		  {	
				c_exer_typ = 'E';
				c_opt_typ = '*';
			}
			
			EXEC SQL
			INSERT INTO FFS_FO_FLASH_SETTING
			(
				FFS_CLM_MTCH_ACCNT,  
				FFS_XCHNG_CD,        
				FFS_PRDCT_TYP,       
				FFS_UNDRLYNG  ,      
				FFS_EXPRY_DT,        
				FFS_EXER_TYP,        
				FFS_OPT_TYP,         
				FFS_STRK_PRC,        
				FFS_LMT_MRKT_FLG,       
				FFS_LMT_RT,
				FFS_ORDR_TOT_QTY,    
				FFS_CLS_TIME,	     
				FFS_CONF_REQ,
				FFS_INS_DT	  
			)
			VALUES
			(
				:c_mtch_accnt,
				:c_xchng_cd,
				:c_prdct_typ,
				:c_undrlyng_op,
				to_date(:c_expry_dt,'DD-Mon-YYYY'),
				:c_exer_typ,
				:c_opt_typ,
				:l_strk_prc,
				:c_lmt_mkt_flg,
				:l_lmt_rt,
				:l_ordr_qty,
				:l_cls_time,
				:c_conf_req, 
				 SYSDATE
			);

      if ( SQLCODE != 0)
      {
        fn_userlog(c_ServiceName, "Error while inserting:%s:%s:%c:%s:%s:%c:%c:%ld:%c:%ld:%ld:%c",c_mtch_accnt,c_xchng_cd,c_prdct_typ,c_undrlyng_op,c_expry_dt,c_exer_typ,c_opt_typ,l_strk_prc,c_lmt_mkt_flg,l_ordr_qty,l_cls_time,c_conf_req);
			  fn_errlog ( c_ServiceName, "S31025", SQLMSG, c_err_msg );
        tpabort( 0 );
			  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		 if (tpcommit(0) == -1)
     {
			fn_errlog(c_ServiceName,"S31030",TPMSG,c_err_msg);
      tpabort( 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	 }
	 else if (i_exist == 1 && i_pnd_stts == 0 && i_open_stts == 0)
	 {
      if (tpbegin(TRAN_TIMEOUT,0)== -1)
      {
        fn_errlog(c_ServiceName,"S31020",TPMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpabort( 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if (c_prdct_typ == 'F' )
      {
        c_exer_typ = 'E';
        c_opt_typ = '*';
      }
	   EXEC SQL
      UPDATE FFS_FO_FLASH_SETTING SET
        FFS_XCHNG_CD =			:c_xchng_cd,                        
        FFS_PRDCT_TYP =			:c_prdct_typ,                       
        FFS_UNDRLYNG  =			:c_undrlyng_op,                     
        FFS_EXPRY_DT =			to_date(:c_expry_dt,'DD-Mon-YYYY'), 
        FFS_EXER_TYP =			:c_exer_typ,                        
        FFS_OPT_TYP  =			:c_opt_typ,                         
        FFS_STRK_PRC =			:l_strk_prc,                        
        FFS_LMT_MRKT_FLG =	:c_lmt_mkt_flg,                     
        FFS_LMT_RT =				:l_lmt_rt,                          
        FFS_ORDR_TOT_QTY =	:l_ordr_qty,                        
        FFS_CLS_TIME =			:l_cls_time,                        
        FFS_CONF_REQ =			:c_conf_req,                        
        FFS_INS_DT	 =			 SYSDATE                            
			WHERE FFS_CLM_MTCH_ACCNT = :c_mtch_accnt;

     if ( SQLCODE != 0)
      {
        fn_userlog(c_ServiceName, "Error while Updating:%s:%s:%c:%s:%s:%c:%c:%ld:%c:%ld:%ld:%c",c_mtch_accnt,c_xchng_cd,c_prdct_typ,c_undrlyng_op,c_expry_dt,c_exer_typ,c_opt_typ,l_strk_prc,c_lmt_mkt_flg,l_ordr_qty,l_cls_time,c_conf_req);
        fn_errlog ( c_ServiceName, "S31025", SQLMSG, c_err_msg );
        tpabort( 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		
		 fn_userlog(c_ServiceName, "After  Updating:%s:%s:%c:%s:%s:%c:%c:%ld:%c:%ld:%ld:%c",c_mtch_accnt,c_xchng_cd,c_prdct_typ,c_undrlyng_op,c_expry_dt,c_exer_typ,c_opt_typ,l_strk_prc,c_lmt_mkt_flg,l_ordr_qty,l_cls_time,c_conf_req);

     if (tpcommit(0) == -1)
     {
      fn_errlog(c_ServiceName,"S31030",TPMSG,c_err_msg);
      tpabort( 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	 }
	 else
	 {
		 fn_userlog(c_ServiceName, "Contract already Set for MatchId:%s",c_mtch_accnt);
		 fn_errlog ( c_ServiceName, "Contract already Set",DEFMSG,c_err_msg);
		 strcpy(c_err_msg,"Contract already Set");
		 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	 } 
	}
	else if (c_mode == GET_CNTRCT  || c_mode == DEFAULT )
	{
	i_cntrct    [ 0 ]   = Fget32( ptr_fml_Ibuf ,FFO_CSE_ID,0,(char *) &l_category,0);
  i_cntrcterr [ 0 ]   = Ferror32;
  i_cntrct    [ 1 ]   = Fget32( ptr_fml_Ibuf ,FFO_UNDRLYNG,0,(char *) c_input_undrlyng,0);
  i_cntrcterr [ 1 ]   = Ferror32;
	 /* 1.1 Minor changes start */
  i_cntrct    [ 2 ]   = Fget32( ptr_fml_Ibuf ,FFO_ORD_TYP,0,(char *) &c_ord_type,0);
  i_cntrcterr [ 2 ]   = Ferror32;
	 /* 1.1 Minor changes end */


	fn_userlog(c_ServiceName, "Input l_category=:%ld:",l_category);
  fn_userlog(c_ServiceName, "Input c_input_undrlyng:%s:",c_input_undrlyng);
  fn_userlog(c_ServiceName, "Input c_ord_type:%c:",c_ord_type);	 /* 1.1 Minor changes */

	for ( i=0 ; i < 3 ;  i++ )
  {
    if ( (i_cntrct[ i ] == -1 ) && (i_cntrcterr[ i ]  != FNOTPRES ) )
    {
      fn_userlog( c_ServiceName, "Error in :%d:",i );
      fn_errlog( c_ServiceName, "S31035", Fstrerror32( i_cntrcterr[i]),c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
		 /* 1.1 Minor changes start */
		if( i==2 && i_cntrct[i] == -1 && i_cntrcterr[ i ]  == FNOTPRES)
		{
			c_ord_type='C';		
			i_default = 1;
		}	 /* 1.1 Minor changes end*/
		else if (i_cntrct[ i ] == -1 && i_cntrcterr[ i ]  == FNOTPRES)
		{
			i_default = 1;
		}
  }

	 /* 1.1 Minor changes start*/
	if (c_ord_type !='C' && c_ord_type !='P')
			c_ord_type='C';
	if (l_category == 0 )
			i_default=1;
	/* 1.1 Minor changes end*/


  if( i_default  == 1)
	{

		fn_userlog(c_ServiceName,"In default equal to 1");
			/** Return the underlying drop down values and the selecttion criteria..also set the default underlying and criteria**/ 
	EXEC SQL ALLOCATE :sys_cursor;

  EXEC SQL EXECUTE
    BEGIN
      OPEN    :sys_cursor FOR
			select undr from(select FPM_UNDRLYNG undr, FPM_RANK from FPM_FO_PRIORITY_MSTR  union (select rtrim(fum_undrlyng) undr, 100 
			from fum_fo_undrlyng_mstr where fum_prdct_typ='F' and fum_qt_trdng_flg='T' 
			minus select rtrim(FPM_UNDRLYNG),100 from FPM_FO_PRIORITY_MSTR )) order by FPM_RANK,undr ;

 		END;
    END-EXEC;

    if ( SQLCODE != 0 )
    {
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      fn_errlog ( c_ServiceName, "S31040", SQLMSG, c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		while (1)
    {
        EXEC SQL
          FETCH :sys_cursor 
          INTO  :c_undrlyng_op;

        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
            break;
          }
          fn_errlog( c_ServiceName, "S31045", SQLMSG, c_err_msg  );
          EXEC SQL CLOSE :sys_cursor;
      		EXEC SQL FREE :sys_cursor;
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }


		fn_userlog(c_ServiceName,"before packing:%s:", c_undrlyng_op);
					i_returncode = fn_pack_vartofml( c_ServiceName,
                                           c_err_msg,
                                           &ptr_fml_Obuf,
																					 1,
																					 FFO_INDX_CD, ( char * )c_undrlyng_op
                                           ); 
					if( i_returncode == -1 )
          {
						EXEC SQL CLOSE :sys_cursor;
						EXEC SQL FREE :sys_cursor;
            fn_errlog( c_ServiceName, "S31050", LIBMSG, c_err_msg );
            tpfree ( ( char * ) ptr_fml_Obuf );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
          }
  }	

			EXEC SQL CLOSE :sys_cursor;
			EXEC SQL FREE :sys_cursor;

			EXEC SQL ALLOCATE :sys_cursor;

  EXEC SQL EXECUTE
    BEGIN
      OPEN    :sys_cursor FOR
			select FFC_CATEGORY from FFC_CATEGORY_MASTER where FFC_ENABLE ='Y' and FFC_XCHNG_CD='NFO';
 		END;
    END-EXEC;

    if ( SQLCODE != 0 )
    {
			EXEC SQL CLOSE :sys_cursor;
			EXEC SQL FREE :sys_cursor;
      fn_errlog ( c_ServiceName, "S31055", SQLMSG, c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
    }

		while (1)
    {
        EXEC SQL
          FETCH :sys_cursor 
          INTO  :c_category_op;

        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
            break;
          }
          fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg  );
					EXEC SQL CLOSE :sys_cursor;
					EXEC SQL FREE :sys_cursor;
      		tpfree((char *)ptr_fml_Obuf);
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

				fn_userlog(c_ServiceName,"before packing:%s:",c_category_op);
					i_returncode = fn_pack_vartofml( c_ServiceName,
                                           c_err_msg,
                                           &ptr_fml_Obuf,
																						1,
																					 FFO_REMARKS , ( char * )c_category_op
                                           );
					if( i_returncode == -1 )
          {
            fn_errlog( c_ServiceName, "S31065", LIBMSG, c_err_msg );
            tpfree ( ( char * ) ptr_fml_Obuf );
						EXEC SQL CLOSE :sys_cursor;
						EXEC SQL FREE :sys_cursor;
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
          }
  }	

				EXEC SQL CLOSE :sys_cursor;
				EXEC SQL FREE :sys_cursor;

		l_category = 1;
		strcpy(c_input_undrlyng,"NIFTY");
	}

   fn_userlog( c_ServiceName,"Underlying :%s:%d",c_input_undrlyng,l_category);


		EXEC SQL
     SELECT nvl(ltq_rt*100,0)
     INTO   :l_spot_prc
		 FROM   ltq_trd_qt
		 WHERE  ltq_xchng_cd = 'NSE'
		 AND    ltq_stck_cd  = :c_input_undrlyng;
		 if(SQLCODE != 0)
		 {
				fn_errlog( c_ServiceName, "S31070", SQLMSG, c_err_msg );
				tpfree ( ( char * ) ptr_fml_Obuf );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
     }

		/* 1.1 minor changes start 
		 EXEC SQL
		 SELECT MIN(ftq_expry_dt)
			INTO :c_expry_dt
		 FROM   ftq_fo_trd_qt
		 WHERE  ftq_xchng_cd = 'NFO'
		 AND    ftq_prdct_typ = 'F'
		 AND    ftq_undrlyng = 'NIFTY'
		 AND    ftq_expry_dt >= trunc(sysdate)    
		 ORDER BY ftq_expry_dt;	*/

			 EXEC SQL
     SELECT MIN(DECODE(FTQ_INDSTK,'I',ftq_expry_dt,DECODE(ftq_prdct_typ,'F',ftq_expry_dt))),MIN(DECODE(ftq_prdct_typ,'F',ftq_expry_dt))
      INTO :c_expry_dt,:c_fut_expry_dt
     FROM   ftq_fo_trd_qt
     WHERE  ftq_xchng_cd = 'NFO'
     AND    ftq_undrlyng = :c_input_undrlyng
		 AND		ftq_opt_typ=DECODE(ftq_prdct_typ,'F','*',:c_ord_type)
		 AND 		ftq_qt_trdng_flg='T'
     AND    ftq_expry_dt >= trunc(sysdate)
     ORDER BY ftq_expry_dt;
		/* 1.1 minor changes end */
     if ( SQLCODE != 0 )
		 {	
        fn_errlog( c_ServiceName, "S31075", SQLMSG, c_err_msg );
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}

	EXEC SQL ALLOCATE :sys_cursor;

	if(l_category == MOST_TRADED_OPTION)
	{
  EXEC SQL EXECUTE
    BEGIN
      OPEN    :sys_cursor FOR
			select * from (select ftq_xchng_cd, ftq_prdct_typ,ftq_undrlyng,ftq_expry_dt,ftq_exer_typ,ftq_opt_typ, ftq_strk_prc, 
			CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
             ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END, ftq_crnt_oi,FTQ_TOKEN_NO, nvl(ftq_min_lot_qty,0)
			from ftq_fo_trd_qt where ftq_prdct_typ='O' and ftq_undrlyng=:c_input_undrlyng and ftq_qt_trdng_flg='T' 
			AND 	ftq_opt_typ=:c_ord_type	 /* 1.1 Minor changes */	
			AND   to_char(ftq_expry_dt,'dd-Mon-yyyy') = :c_expry_dt
			order by 7 desc) where rownum =1;

 		END;
    END-EXEC;
  } else if(l_category == HIGHEST_OI_OPTION)
	{
  EXEC SQL EXECUTE
    BEGIN
      OPEN    :sys_cursor FOR
			select * from (select ftq_xchng_cd, ftq_prdct_typ,ftq_undrlyng,ftq_expry_dt,ftq_exer_typ,ftq_opt_typ, ftq_strk_prc, 
			CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
             ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END, ftq_crnt_oi,FTQ_TOKEN_NO,nvl(ftq_min_lot_qty,0)
			from ftq_fo_trd_qt where ftq_prdct_typ='O' and ftq_undrlyng=:c_input_undrlyng and ftq_qt_trdng_flg='T' 
			AND 	ftq_opt_typ=:c_ord_type	 /* 1.1 Minor changes */
			AND   to_char(ftq_expry_dt,'dd-Mon-yyyy') = :c_expry_dt
			order by 8 desc) where rownum =1;

 		END;
    END-EXEC;
 } else if(l_category == ATM_OPTION)
	{
  EXEC SQL EXECUTE
    BEGIN
      OPEN    :sys_cursor FOR
			select * from (select ftq_xchng_cd, ftq_prdct_typ,ftq_undrlyng,ftq_expry_dt,ftq_exer_typ,ftq_opt_typ, ftq_strk_prc, 
			CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
             ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END, ftq_crnt_oi,FTQ_TOKEN_NO,nvl(ftq_min_lot_qty,0)
			from ftq_fo_trd_qt where ftq_prdct_typ='O' and ftq_undrlyng=:c_input_undrlyng and ftq_qt_trdng_flg='T' 
			AND 	ftq_opt_typ=:c_ord_type		 /* 1.1 Minor changes */
			AND   to_char(ftq_expry_dt,'dd-Mon-yyyy') = :c_expry_dt
			AND   ((ftq_opt_typ ='C' and ftq_strk_prc > :l_spot_prc) OR
            (ftq_opt_typ ='P' and ftq_strk_prc < :l_spot_prc))
			order by 8 desc) where rownum =1;

 		END;
    END-EXEC;
 } else if(l_category == CURRENT_MONTH_FUTURES)
	{
  EXEC SQL EXECUTE
    BEGIN
      OPEN    :sys_cursor FOR
			select * from (select ftq_xchng_cd, ftq_prdct_typ,ftq_undrlyng,ftq_expry_dt,ftq_exer_typ,ftq_opt_typ, ftq_strk_prc, 
			CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
             ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END, ftq_crnt_oi,FTQ_TOKEN_NO,nvl(ftq_min_lot_qty,0)
			from ftq_fo_trd_qt where ftq_prdct_typ='F' and ftq_undrlyng=:c_input_undrlyng and ftq_qt_trdng_flg='T' 
			AND   to_char(ftq_expry_dt,'dd-Mon-yyyy') = :c_fut_expry_dt);

 		END;
    END-EXEC;
 } else if(l_category == EQUITY)
	{
		EXEC SQL EXECUTE
		BEGIN
		OPEN  :sys_cursor FOR
		select LTQ_XCHNG_CD,
					 'M',
					 LTQ_STCK_CD,
					 '*',
					 '*',
					 '*',
					 0,
					 0,
					 0,
					 0,
					 0 
		from ( select LTQ_STCK_CD,NVL(LTQ_VLME,0),LTQ_XCHNG_CD 
					 from LTQ_TRD_QT where LTQ_XCHNG_CD='NSE' 
					order by NVL(LTQ_VLME,0) desc ) where rownum=1;
		
    END;
    END-EXEC;

  /*EXEC SQL EXECUTE
    BEGIN
      OPEN    :sys_cursor FOR
			select undr from(select underlying undr, rank from prio union (select rtrim(fum_undrlyng) undr, 100 
			from fum_fo_undrlyng_mstr where fum_prdct_typ='F' and fum_qt_trdng_flg='T' 
			minus select rtrim(underlying),100 from prio)) order by rank;

 		END;
    END-EXEC;*/
 }
   if ( SQLCODE != 0 )
    {
      EXEC SQL CLOSE:sys_cursor;
      EXEC SQL FREE :sys_cursor;
      fn_errlog ( c_ServiceName, "S31080", SQLMSG, c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
    }

		while (1)
    {
        EXEC SQL
          FETCH :sys_cursor
          INTO  :c_xchng_cd,
								:c_prdct_typ,
								:c_undrlyng_op,
								:c_expry_dt,
								:c_exer_typ,
								:c_opt_typ,
								:l_strk_prc,
								:l_vol,
								:l_oi,
								:l_token_no,
								:l_ordr_qty;
        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
            break;
          }
          fn_errlog( c_ServiceName, "S31085", SQLMSG, c_err_msg  );
          EXEC SQL FREE :sys_cursor;
          EXEC SQL CLOSE :sys_cursor;
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpfree((char *)ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

		fn_userlog(c_ServiceName,"before packing:%s:", c_undrlyng_op);
		fn_userlog(c_ServiceName,"c_xchng_cd:%s:", c_xchng_cd);
		fn_userlog(c_ServiceName,"c_prdct_typ:%c:",c_prdct_typ );
		fn_userlog(c_ServiceName,"c_undrlyng_op:%s:",c_undrlyng_op );
		fn_userlog(c_ServiceName,"c_expry_dt:%s:",c_expry_dt );
		fn_userlog(c_ServiceName,"c_exer_typ:%c:",c_exer_typ );
		fn_userlog(c_ServiceName,"c_opt_typ:%c:",c_opt_typ );
		fn_userlog(c_ServiceName,"l_strk_prc:%ld:",l_strk_prc);
		fn_userlog(c_ServiceName,"l_token_no:%ld:",l_token_no);
		fn_userlog(c_ServiceName,"l_ordr_qty:%ld:",l_ordr_qty);

		c_subtyp = 'C'; /*** Display chart ***/
		c_lmt_mkt_flg = 'M'; 
		l_cls_time = 5; /*** 5 mins ***/
 
					i_returncode = fn_pack_vartofml( c_ServiceName,
                                           c_err_msg,
                                           &ptr_fml_Obuf,
																						15,
																						FFO_XCHNG_CD ,(char *) c_xchng_cd,
																						FFO_PRDCT_TYP, (char *) &c_prdct_typ,
																						FFO_UNDRLYNG, (char *) c_undrlyng_op,
																						FFO_EXPRY_DT, (char *) c_expry_dt,
																						FFO_EXER_TYP, (char * ) &c_exer_typ,
																						FFO_OPT_TYP, (char *) &c_opt_typ,
																						FFO_STRK_PRC, (long) &l_strk_prc,
																						FFO_HGH_INDX_VAL, (long) &l_token_no,
																						FFO_PLG_TYP, (char *)&c_subtyp,
                                     				FFO_LMT_MKT_SL_FLG, (char *)&c_lmt_mkt_flg,
                                     				FFO_ORD_TOT_QTY, (long) &l_ordr_qty,
                                     				FFO_CLS_TM, (long) &l_cls_time,
																						FFO_RMS_PRCSD_FLG, (char *) &c_null,
																					  FFO_LMT_RT, (char *) &l_null,
																						FFO_QT_TRDNG_FLG, (char *) &c_ebl_dsbl_flg	
                                           );
					if( i_returncode == -1 )
          {
							EXEC SQL FREE :sys_cursor;
							EXEC SQL CLOSE :sys_cursor;
							fn_errlog ( c_ServiceName, "S31090", LIBMSG, c_err_msg );
							tpfree((char *)ptr_fml_Obuf);
							tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
					}
		}
		
		EXEC SQL CLOSE :sys_cursor;
		EXEC SQL FREE :sys_cursor;

		fn_userlog(c_ServiceName,"i_default=:%d: i_exist=:%d: i_pnd_stts=:%d: i_open_stts=:%d: ",i_default,i_exist,i_pnd_stts,i_open_stts);
	
		/*** if ( (i_exist > 0 && i_pnd_stts > 0) || (i_exist > 0 && i_default == 1) ) *** Fav exist and pending record exist ***/	
		if ( i_exist > 0 && (i_pnd_stts > 0 || i_open_stts >0) ) /*** Fav exist and pending record exist ***/
		{
		
		 EXEC SQL
			SELECT
        FFS_XCHNG_CD,
        FFS_PRDCT_TYP,
        FFS_UNDRLYNG  ,
        FFS_EXPRY_DT,
        NVL(FFS_EXER_TYP,'E'),
        NVL(FFS_OPT_TYP,'*'),
        FFS_STRK_PRC,
        FTQ_TOKEN_NO,
				FFS_LMT_MRKT_FLG,
				FFS_LMT_RT,
				FFS_ORDR_TOT_QTY,
				FFS_CLS_TIME ,
				NVL(FFS_CONF_REQ,'R')
			INTO
				:c_xchng_cd,
				:c_prdct_typ,
				:c_undrlyng_op,
				:c_expry_dt,
				:c_exer_typ,
				:c_opt_typ,
				:l_strk_prc,
				:l_token_no,
				:c_lmt_mkt_flg,
				:l_lmt_rt,
				:l_ordr_qty,
				:l_cls_time,
				:c_conf_req
			FROM	FFS_FO_FLASH_SETTING,FTQ_FO_TRD_QT
			WHERE	FFS_CLM_MTCH_ACCNT = :c_mtch_accnt
			AND FFS_PRDCT_TYP = FTQ_PRDCT_TYP
			AND	FFS_UNDRLYNG  = FTQ_UNDRLYNG
			AND	FFS_EXPRY_DT  = FTQ_EXPRY_DT
			AND	FFS_OPT_TYP   = FTQ_OPT_TYP
			AND FFS_STRK_PRC  = FTQ_STRK_PRC;

			if ( SQLCODE != 0)
			{
				fn_userlog(c_ServiceName, "Error while Selecting FFS for :%s:",c_mtch_accnt);
				fn_errlog ( c_ServiceName, "S31095", SQLMSG, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}

		fn_userlog(c_ServiceName,"c_undrlyng_op:%s:",c_undrlyng_op);
		if (strcmp(c_undrlyng_op , "") != 0)
		{

		if ( i_exist > 0 && (i_pnd_stts > 0 || i_open_stts >0) )
		{
			/*** To get order/position contract displayed on chart in case of default call ***/
			ptr_fml_Obuf = NULL;
    	c_subtyp = 'C'; /*** Display chart ***/

    	i_returncode = fn_pack_vartofml( c_ServiceName,
                                     c_err_msg,
                                     &ptr_fml_Obuf,
                                     15,
                                     FFO_XCHNG_CD ,(char *) c_xchng_cd,
                                     FFO_PRDCT_TYP, (char *) &c_prdct_typ,
                                     FFO_UNDRLYNG, (char *) c_undrlyng_op,
                                     FFO_EXPRY_DT, (char *) c_expry_dt,
                                     FFO_EXER_TYP, (char *) &c_exer_typ,
                                     FFO_OPT_TYP, (char *) &c_opt_typ,
                                     FFO_STRK_PRC, (long) &l_strk_prc,
                                     FFO_HGH_INDX_VAL, (long) &l_token_no,
                                     FFO_PLG_TYP, (char *)&c_subtyp,
                                     FFO_LMT_MKT_SL_FLG, (char *)&c_lmt_mkt_flg,
                                     FFO_ORD_TOT_QTY, (long) &l_ordr_qty,
                                     FFO_CLS_TM, (long) &l_cls_time ,
                                     FFO_RMS_PRCSD_FLG, (char *) &c_conf_req ,
                                     FFO_LMT_RT, (char *) &l_lmt_rt,
                                     FFO_QT_TRDNG_FLG, (char *) &c_ebl_dsbl_flg
                                    ); 
   		if( i_returncode == -1 )
   		{
     		fn_errlog ( c_ServiceName, "S31100", LIBMSG, c_err_msg );
     		tpfree((char *)ptr_fml_Obuf);
     		tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
   		}
		}
		/*********************************************************************************/

		c_subtyp = 'F'; /*** Get or Set favourite ***/		

    i_returncode = fn_pack_vartofml( c_ServiceName,
                                     c_err_msg,
                                     &ptr_fml_Obuf,
                                     15,
                                     FFO_XCHNG_CD ,(char *) c_xchng_cd,
                                     FFO_PRDCT_TYP, (char *) &c_prdct_typ,
                                     FFO_UNDRLYNG, (char *) c_undrlyng_op,
                                     FFO_EXPRY_DT, (char *) c_expry_dt,
                                     FFO_EXER_TYP, (char *) &c_exer_typ,
                                     FFO_OPT_TYP, (char *) &c_opt_typ,
                                     FFO_STRK_PRC, (long) &l_strk_prc,
                                     FFO_HGH_INDX_VAL, (long) &l_token_no,
																		 FFO_PLG_TYP, (char *)&c_subtyp,
																		 FFO_LMT_MKT_SL_FLG, (char *)&c_lmt_mkt_flg,
																		 FFO_ORD_TOT_QTY, (long) &l_ordr_qty,
																		 FFO_CLS_TM, (long) &l_cls_time ,
																		 FFO_RMS_PRCSD_FLG, (char *) &c_conf_req ,
																		 FFO_LMT_RT, (char *) &l_lmt_rt,
																		 FFO_QT_TRDNG_FLG, (char *) &c_ebl_dsbl_flg
                                    );
    if( i_returncode == -1 )
    {
      fn_errlog ( c_ServiceName, "S31100", LIBMSG, c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
    }
    fn_userlog(c_ServiceName,"After packing fav contract:%s:", c_undrlyng_op);
    fn_userlog(c_ServiceName,"c_xchng_cd:%s:", c_xchng_cd);
    fn_userlog(c_ServiceName,"c_prdct_typ:%c:",c_prdct_typ );
    fn_userlog(c_ServiceName,"c_undrlyng_op:%s:",c_undrlyng_op );
    fn_userlog(c_ServiceName,"c_expry_dt:%s:",c_expry_dt );
    fn_userlog(c_ServiceName,"c_exer_typ:%c:",c_exer_typ );
    fn_userlog(c_ServiceName,"c_opt_typ:%c:",c_opt_typ );
    fn_userlog(c_ServiceName,"l_strk_prc:%ld:",l_strk_prc);
    fn_userlog(c_ServiceName,"l_token_no:%ld:",l_token_no);
    fn_userlog(c_ServiceName,"l_ordr_qty:%ld:",l_ordr_qty);
    fn_userlog(c_ServiceName,"l_lmt_rt:%ld:",l_lmt_rt);
	 }
	}
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
}

