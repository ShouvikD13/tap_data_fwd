/******************************************************************************/
/*  Program           : SFO_DT_CANCELC            	                          */
/*                                                                            */
/*  Input             : FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_ORDR_RFRNC                                        */
/*											FFO_PRDCT_TYP   																			*/
/*											FFO_CANCL_QTY																					*/
/*											FFO_ALIAS																							*/
/*                                                                            */
/*  Output            : FFO_ERR_MSG                 			                    */
/*                      FFO_ACTN_ID                                           */
/*																																						*/
/*  Description       : This Service is to get the input from Applet and in   */
/*											turn call SFO_CANCEL_FUT or SFO_CANCEL_OPT to cancel  */
/*											the Future or Options oder respectivily.   						*/
/*                                                                            */
/*  Log               : 02-Sep-2002  1.0  Mohit Mehrotra                      */
/*  Log               : 27-Sep-2007  1.1  Ranjit 										  				*/
/*  Log               : 09-Sep-2009  1.2  Vidyayini Krish                     */
/*	Log								:	05-Mar-2013	 1.3	Bhushan Sonwane											*/
/*  Log               :	28-Oct-2013  1.4	Bhushan Sonwane                     */
/*  Log               : 20-Feb2014   1.5  Bhushan Sonwane                     */
/*  Log               : 20-May-2014  1.6  Swati A.B														*/
/*  Log               : 09-Oct-2014  1.7  Sachin Birje  											*/
/*  Log               : 26-Nov-2015  1.8  Navina D.     											*/
/*  Log               : 21-Apr-2016  VQC  VERSION QUALITY CONTROL SANDEEP     */
/*  Log               : 23-Jun-2016  1.9  Anand Dhopte                        */
/*  Log               : 28-Jun-2018  2.0  Anand Dhopte                        */
/*  Log               : 12-Nov-2019  2.1  Navina D.                           */
/*  Log               : 22-Jan-2020  2.2  Anuj Pancholi                       */
/******************************************************************************/
/*  Release 1.0       :	DT																										*/  /** ver 1.1 closed the comment **/
/*					1.1				: IBM Migration																					*/
/*          1.2       : Future Plus in DL                                     */
/*					1.3				:	Changes for SPAN in DL																*/
/*					1.4				:	Changes For SLTP FuturePlus in DL											*/
/*          1.5       : Changes For OptionPlus in DL.NET											*/
/*          1.6       : Changes For SPAN FuturePLUS in DL.NET									*/
/*          1.7       : View to FML Changes                  									*/
/*          1.8       : Product type validation              									*/
/*          VQC       : VERSION QUALITY CONTROL CHANGES                       */
/*          1.9       : Limit Order In FPLUS SLTP and OPLUS changes           */
/*          2.0       : Stop VTC changes                                      */ 
/*          2.1       : Vendor API                                            */ 
/*          2.2       : Vendor Validation Changes                             */
/******************************************************************************/

#include <stdio.h>      /* C Header File                */
#include <stdlib.h>     /* C Header File                */
#include <string.h>     /* C Header File                */
#include <sqlca.h>      /* Oracle header file           */
#include <atmi.h>       /* TUXEDO Header File           */
#include <userlog.h>    /* TUXEDO Header File           */
#include <fml32.h>      /* TUXEDO Header File           */
#include <Usysflds.h>   /* TUXEDO Field Definitions     */
#include <fo_fml_def.h> /* created for FML handling     */
/** #include <fo_view_def.h>* created for FML to/from VIEW conversion *  commented in ver 1.7 **/
#include <fo_view_def.h>   /** Ver 1.7 , view replaced with struct **/
/*#include <fml_def.h>*/   	/* created for FML handling     */
#include <fo.h>
#include <fn_tuxlib.h>
#include <fn_log.h>			/* ver 1.1 */
#include <fml_rout.h>		/* ver 1.1 */
#include <fn_read_debug_lvl.h>	/* ver 1.1 */
#include <fn_val_ord.h> /** Ver 2.1 **/

/***
char c_ServiceName[33]; Commented in VQC as it is declared locally also ***/

void SFO_DT_CANCELC( TPSVCINFO *rqst )
{


	EXEC SQL INCLUDE "table/pcm_pipe_clm_map.h";
  EXEC SQL INCLUDE "table/icd_info_client_dtls.h"; /*** Ver 2.1 ***/

  /* Tuxedo specific variables */
  FBFR32  *ptr_fml_Ibuf;     /* Pointer to FML Input buffer */
  FBFR32  *ptr_fml_Obuf;     /* Pointer to FML Output buffer */


  /*** Commented in VQC as structure was used for session check which is commented *** 
  EXEC SQL BEGIN DECLARE SECTION;

 	struct vw_usr_prfl st_usr_prfl;

  EXEC SQL END DECLARE SECTION;
  ***/

  /* Application specific variables  */
  int i_returncode;

  char c_ServiceName [ 30 ] = "\0"; /*** Initilized in Ver 2.2 ***/ 
  char c_svc_name [ 20 ]="\0"; /*** Initilized in Ver 2.2 ***/   
  char c_usr_id [ 9 ] ="\0"; /*** Initilized in Ver 2.2 ***/
  char c_mtch_accnt [ 11 ] = "\0"; /*** Initilized in ver 2.2 ***/
  varchar c_err_msg [ 256 ];    /* Variable type changed to varchar in VQC */
	varchar c_succes_msg [ 256 ]; /* Variable type changed to varchar in VQC */

  char c_fno_xchng_cd [ 4 ] = "\0"; /*** Initilized in ver 2.2 ***/
	char c_fno_ordr_rfrnc[ 19 ] = "\0"; /*** Initilized in ver 2.2 ***/
	char c_fno_prdct_typ='\0'; /*** Ver 2.1 ***/
	char c_alias[ 9 ] = "\0"; /*** Initilized in Ver 2.2 ***/
	char c_dam_trnsctn[ 2 ]= "\0"; /*** Initilized in Ver 2.2 ***/

	char c_ordr_stts ='\0'; /*** Initilized in Ver 2.2 ***/
	char c_exg_crrnt_stts = '\0'; /*** Initilized in Ver 2.2 ***/
	char c_spn_flg = '\0';               /* Ver 1.3 */
  /*char c_bse_spn_flg ='\0';            * Ver 1.3 * Commented in VQC */	
  char c_dl_flg = '\0';								 /* Ver 1.3 */	
	char c_fod_prdct_typ = '\0';             /* Ver 1.8 */
	char  c_source_flg = '\0';				/*** Ver 2.1 ***/
  varchar c_ven_id[15]; /** Ver 2.1 **/ 
  char c_ven_nm[15] = "\0";        /*** Ver 2.1 ***/
 
  long l_sssn_id = 0; /*** Initilized in Ver 2.2 ***/
/*long l_usr_flg; Commented In VQC as it is unused variable ***/

/*long l_fno_cancel_qty;  Commented In VQC as it is unused variable	***/
	long l_acnt_id = -1; /*** Initilized in Ver 2.2 ***/

   char c_stop_vtc_flg[2] = "N"; /*** Ver 2.0 ***/

/*struct vw_err_msg st_err_msg;	Commented in VQC as it is not used	***/

  struct vw_err_msg st_err_msg; /** Ver 2.1 **/
	MEMSET(st_err_msg); /*** Ver 2.1 ***/
  MEMSET(c_err_msg); /*** Ver 2.2 ***/
  MEMSET(c_succes_msg); /*** Ver 2.2 ***/

  /* Initialisation of Variables */

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy(c_ServiceName, rqst->name);

	INITDBGLVL(c_ServiceName);		/* ver 1.1 */

	ptr_fml_Obuf=(FBFR32 *)NULL;

  ptr_fml_Obuf=(FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if (ptr_fml_Obuf == NULL)
  {
   fn_errlog(c_ServiceName, "S31005", TPMSG, c_err_msg.arr); /* DataType of c_err_msg changed from char to varchar in VQC */ 
   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );    /* DataType of c_err_msg changed from char to varchar in VQC */    
   l_acnt_id = -1;
   Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
   tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

	if( DEBUG_MSG_LVL_5 )
	{ 
		Fprint32(ptr_fml_Ibuf); /*** Ver 2.2 ***/
	}

	i_returncode  = fn_unpack_fmltovar (
                          c_ServiceName,
                          c_err_msg.arr,  /* DataType of c_err_msg changed from char to varchar in VQC */
                          ptr_fml_Ibuf,
                          5,  /*** Ver 2.1 changed from 6 to 5 ***/
                          FFO_USR_ID, ( char * )c_usr_id, NULL,
                          FFO_SSSN_ID, ( char * )&l_sssn_id, NULL,
                          FFO_EBA_MTCH_ACT_NO, ( char * )c_mtch_accnt, NULL,
                          FFO_XCHNG_CD, ( char * )c_fno_xchng_cd, NULL,
                          FFO_ORDR_RFRNC, ( char * )c_fno_ordr_rfrnc, NULL); /***,
												 	FFO_PRDCT_TYP, ( char * )&c_fno_prdct_typ, NULL ); *** Commented in Ver 2.1 ***/
									/*				FFO_CANCL_QTY, ( char * )&l_fno_cancel_qty,NULL);*/

  if (i_returncode == SYSTEM_ERROR )
  {
   fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg.arr); /* DataType of c_err_msg changed from char to varchar in VQC */
   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /* DataType of c_err_msg changed from char to varchar in VQC */
	 l_acnt_id = -1;
   tpfree ( ( char * ) ptr_fml_Obuf ); /*** Added in VQC ***/
   Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Ver 2.1 starts ***/
  i_returncode = Fget32 ( ptr_fml_Ibuf, FFO_SOURCE_FLG, 0, (char *)&c_source_flg, 0 );
  if( i_returncode == -1 && Ferror32 != FNOTPRES )
  {
      fn_userlog(c_ServiceName,"Error while getting input FFO_SOURCE_FLG.");
      fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      l_acnt_id = -1;
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  if (c_source_flg == 'A')
  {
    MEMSET(c_ven_id);  

    if (Fget32(ptr_fml_Ibuf,FFO_USER_CODE,0,(char *)c_ven_id.arr, 0) == -1 )
    {
        fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg.arr  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree((char *)ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    SETLEN(c_ven_id);

    i_returncode = fn_chk_vendor ( c_ServiceName,
                                   c_usr_id,
                                   c_ven_id.arr,
                                   c_ven_nm,
                                   &st_err_msg              
                   );
   
    if ( i_returncode == -1 )
    {
        fn_errlog( c_ServiceName, "S31025","Error in function fn_chk_vendor",c_err_msg.arr);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree((char *)ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if(strcmp(c_ven_nm,"SENSIBULL") == 0 )
    {
    
/**************************************	
      i_returncode = fn_chk_vendor_validity ( c_ServiceName,
                                            	c_usr_id,
                                            	&st_err_msg
                                           	);

    	if ( i_returncode == -1 )
    	{
        fn_errlog( c_ServiceName, "S31030","Error in function fn_chk_vendor_validity",c_err_msg.arr);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree((char *)ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
*****************************************/
	
      i_returncode = fn_chk_sensibull_tnc ( c_ServiceName,
                                            c_usr_id,
                                            &st_err_msg
                                           );

    	if ( i_returncode == -1 )
    	{
        fn_errlog( c_ServiceName, "S31035","Error in function fn_chk_sensibull_tnc",c_err_msg.arr);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree((char *)ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

			if( DEBUG_MSG_LVL_3 ) 
			{
		     fn_userlog(c_ServiceName,"Vendor Id = ESP_ID is :%s:",c_ven_id.arr);
			}
      if( c_usr_id[0] == BPID )
      {
        fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst,Sensibull is desabled");
        fn_errlog( c_ServiceName, "B35018", "", c_err_msg.arr );
        strcpy(c_err_msg.arr,"Since you are Attached to a Direct Business Catalyst,Sensibull is desabled");
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        tpfree((char *)ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      EXEC SQL
        SELECT  ICD_CUST_TYPE
        INTO    :sql_icd_cust_type
        FROM    ICD_INFO_CLIENT_DTLS,
        IAI_INFO_ACCOUNT_INFO
        WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
        AND     IAI_MATCH_ACCOUNT_NO  = :c_mtch_accnt;
      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31040",SQLMSG,c_err_msg.arr);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        tpfree((char *)ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if(strcmp(sql_icd_cust_type.arr,"NRI") == 0)
      {
        fn_userlog( c_ServiceName, "NRI Customer Trying To Place Order from SENSIBULL");
        fn_errlog( c_ServiceName, "S31045", "NRI Customer Trying To Place Order from SENSIBULL",c_err_msg.arr);
        strcpy(c_err_msg.arr," NRI Customer Trying To Place Order from SENSIBULL.");
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        tpfree((char *)ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
     }
    else
    {
       /*********** commented in ver 2.2 *************************
       fn_userlog( c_ServiceName, "Invalid Vendor" );
       fn_errlog( c_ServiceName, "S31050","InValid Vendor.",c_err_msg.arr );
       strcpy( c_err_msg.arr,"InValid Vendor.");
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
			 tpfree((char *)ptr_fml_Obuf);
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       ************************************************************/
       fn_userlog(c_ServiceName,"Call from Vendor with ESP_ID :%s: Vendor Name:%s:",c_ven_id.arr,c_ven_nm);  /** ver 2.2 **/
    }
  }

  if (Fget32(ptr_fml_Ibuf,FFO_PRDCT_TYP,0,(char *)&c_fno_prdct_typ, 0) == -1 )	
	{
		if (c_source_flg == 'A')
  	{
				  fn_userlog(c_ServiceName,"API call skip product type input");
		}
		else
		{
		    fn_errlog( c_ServiceName, "S31055", FMLMSG, c_err_msg.arr  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree((char *)ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
  /*** Ver 2.1 Ends ***/


  /*** Ver 2.0 Starts ***/
 
  
 
  if(Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_stop_vtc_flg,0) == -1)
  {
   if( Ferror32 != FNOTPRES)
   {
    fn_errlog( c_ServiceName, "S31060", FMLMSG, c_err_msg.arr); 
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
    l_acnt_id = -1;
     tpfree ( ( char * ) ptr_fml_Obuf ); /*** Added in VQC ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
  }  


  /*** Ver 2.0 Ends ***/

  /** Ver 1.3 Starts **/
	
	if(Fget32(ptr_fml_Ibuf,FFO_STATUS_FLG,0,(char *)&c_dl_flg,0) == -1)
  {
	 if( Ferror32 != FNOTPRES)
	 {
  	fn_errlog( c_ServiceName, "S31065", FMLMSG, c_err_msg.arr); /* DataType of c_err_msg changed from char to varchar in VQC */
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /*DataType of c_err_msg changed from char to varchar in VQC*/
  	l_acnt_id = -1;
     tpfree ( ( char * ) ptr_fml_Obuf ); /*** Added in VQC ***/
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	 }
  }

  

  /*** Commented in VQC and span flag is fetched from existing query on Order Details Table ***

  EXEC SQL
    SELECT  NVL(CLM_SPAN_ALLWD,'N'),
            NVL(CLM_BSESPAN_ALLWD,'N')
    INTO    :c_spn_flg,
            :c_bse_spn_flg
    FROM    CLM_CLNT_MSTR
    WHERE   CLM_MTCH_ACCNT  = :c_mtch_accnt;

  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31070", SQLMSG, c_err_msg  );
    strcpy(c_err_msg,"Problem in Cancellation of order");
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    l_acnt_id = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"NSE SPAN Allowed Flag Is :%c:",c_spn_flg);
    fn_userlog(c_ServiceName,"BSE SPAN Allowed Flag Is :%c:",c_bse_spn_flg);
    fn_userlog(c_ServiceName,"DL  Flag Flag Is :%c:",c_dl_flg);
  }

	if( ( ( c_spn_flg == 'Y' && strcmp(c_fno_xchng_cd,"NFO") == 0 ) ||
			  ( c_bse_spn_flg == 'Y' && strcmp(c_fno_xchng_cd,"BFO") == 0 ) ) && c_dl_flg != 'N'  )
	{
		fn_userlog(c_ServiceName, "SPAN Customer Trying To cancel Order Under Normal Margining System.");
		fn_errlog( c_ServiceName, "S31075", "SPAN Customer Trying To cancel Order Under Normal Margining System", c_err_msg  );	
		strcpy(c_err_msg,"You Are Marked Under SPAN. Please Visit WebSite To Cancel Order.");
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		l_acnt_id = -1;
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  *** VQC Comment Ends ***/ 

	/*** Following commented In Ver 1.6 for enabling SPAN FP on DL.net
	if( ( ( c_spn_flg == 'Y' && strcmp(c_fno_xchng_cd,"NFO") == 0 ) ||
        ( c_bse_spn_flg == 'Y' && strcmp(c_fno_xchng_cd,"BFO") == 0 ) ) &&
				 c_fno_prdct_typ == FUTURE_PLUS )
  {
    fn_errlog( c_ServiceName, "B23008",DEFMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    l_acnt_id = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );    
  }
	Commented In Ver 1.6 ends ***/

  /** ver 1.3 Ends **/

  if (c_usr_id[0] == BPID)
  {
     if(Fget32(ptr_fml_Ibuf,FFO_ALIAS,0,(char *)c_alias,0) == -1)
      {
        fn_errlog( c_ServiceName, "S31080", FMLMSG, c_err_msg.arr ); /* DataType of c_err_msg changed from char to varchar in VQC */
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0); /* DataType of c_err_msg changed from char to varchar in VQC */
				l_acnt_id = -1;
        tpfree ( ( char * ) ptr_fml_Obuf ); /*** Added in VQC ***/
  			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
  }
	else
	{
		strcpy(c_alias,"*");
	}


	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName, "c_usr_id <%s>", c_usr_id);
  	fn_userlog(c_ServiceName, "l_sssn_id <%ld>", l_sssn_id);
  	fn_userlog(c_ServiceName, "c_mtch_accnt <%s>", c_mtch_accnt);
  	fn_userlog(c_ServiceName, "c_fno_xchng_cd <%s>", c_fno_xchng_cd);
  	fn_userlog(c_ServiceName, "c_fno_ordr_rfrnc <%s>", c_fno_ordr_rfrnc);
  	fn_userlog(c_ServiceName, "c_fno_prdct_typ <%c>", c_fno_prdct_typ);
/*  fn_userlog(c_ServiceName, "l_fno_cancel_qty <%ld>", l_fno_cancel_qty);*/
  	fn_userlog(c_ServiceName, "c_alias <%s>", c_alias);
	}

	/*** Ver 1.8 starts ***/
		EXEC SQL
  	SELECT FOD_PRDCT_TYP,
           FOD_ORDR_STTS,           /*** VQC ***/
           FOD_PIPE_ID,             /*** VQC ***/
           NVL(FOD_SPN_FLG,'N')     /*** VQC ***/
 		INTO   :c_fod_prdct_typ,
           :c_ordr_stts,            /*** VQC ***/
           :sql_pcm_crnt_pipe_id,   /*** VQC ***/
           :c_spn_flg               /*** VQC ***/
		FROM   FOD_FO_ORDR_DTLS
		WHERE  FOD_ORDR_RFRNC 			= :c_fno_ordr_rfrnc
 		AND 	 FOD_CLM_MTCH_ACCNT  	= :c_mtch_accnt 
		AND 	 FOD_XCHNG_CD 				= :c_fno_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31085",SQLMSG,c_err_msg.arr); /* DataType of c_err_msg changed from char to varchar in VQC */
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /* DataType of c_err_msg changed from char to varchar in VQC */
    l_acnt_id = -1;
    tpfree ( ( char * ) ptr_fml_Obuf ); /*** Added in VQC ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if( DEBUG_MSG_LVL_3 )
  {
   fn_userlog(c_ServiceName,"Product Type Is :%c:",c_fod_prdct_typ);
   fn_userlog(c_ServiceName,"Order Status Is :%c:",c_ordr_stts);
   fn_userlog(c_ServiceName,"Current Pipe Id Is :%s:",sql_pcm_crnt_pipe_id);
   fn_userlog(c_ServiceName,"Span Flag Is :%c:",c_spn_flg);
  }  

	/*** Ver 2.1 starts ***/
	if (c_source_flg == 'A') /*** API call ***/
	{
		c_fno_prdct_typ = c_fod_prdct_typ;
	}
	/*** Ver 2.1 ends ***/

  /*** Commented in Ver 1.9 ***
	if ( c_fod_prdct_typ == OPTIONPLUS || c_fod_prdct_typ == SLTP_FUTUREPLUS || c_fod_prdct_typ != c_fno_prdct_typ )
  ***/
  if ( c_fod_prdct_typ != c_fno_prdct_typ ) /*** if condition changed in Ver 1.9 ***/ 
	{
	    fn_userlog(c_ServiceName,"Order Book Product Typ:%c: | Input Product Typ:%c:",c_fod_prdct_typ,c_fno_prdct_typ);
      /*** Commented in Ver 1.9 ***
			strcpy(c_err_msg.arr,"Cancellation Of SLTP FUTUREPLUS and Option PLUS Is Not Provided On Trade Racer."); * DataType of c_err_msg changed from char to varchar in VQC * 
      ***/
      strcpy(c_err_msg.arr," Invalid Product Type."); /*** Message changed in Ver 1.9 ***/
	    /**fn_errlog( c_ServiceName, "S31090",LIBMSG,c_err_msg); Commented In VQC as Incorrect Msg is passed ***/
	    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /* DataType of c_err_msg changed from char to varchar in VQC */
		  l_acnt_id = -1;
      tpfree ( ( char * ) ptr_fml_Obuf ); /*** Added in VQC ***/
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	/*** Ver 1.8 ends ***/

  /*** Ver 1.3 Starts ***/

  /*** Commented in VQC ***

	if( ( ( ( c_spn_flg == 'Y' ) && strcmp(c_fno_xchng_cd,"NFO") == 0 )
                  ||
        ( c_bse_spn_flg == 'Y' && strcmp(c_fno_xchng_cd,"BFO") == 0 ) )
									&&
				(	c_fno_prdct_typ != FUTURE_PLUS )  *** Ver 1.6 enabling SPAN FP on DL.net ***
		  ) 
   ***/
  
  if( c_spn_flg == 'S' &&  c_fno_prdct_typ != FUTURE_PLUS)  /*** Added in VQC ***/
  {
    strcpy(c_svc_name,"SFO_SPN_CANCEL");
  }
  else
	{
	 	if( c_fno_prdct_typ == FUTURES || c_fno_prdct_typ == FUTURE_PLUS || c_fno_prdct_typ == SLTP_FUTUREPLUS ) /* ver 1.2 */ /*** SLTP_FUTUREPLUS added in Ver 1.4  ***/
  	{
    	strcpy(c_svc_name,"SFO_CANCEL_FUT");
  	}
  	else if( c_fno_prdct_typ == OPTIONS || c_fno_prdct_typ == OPTIONPLUS )    /*** Ver 1.5 ** OPTIONPLUS Added ***/
  	{
    	strcpy(c_svc_name,"SFO_CANCEL_OPT");
  	}
  	else
  	{
    	fn_errlog( c_ServiceName, "S31095", "Invalid Order Type", c_err_msg.arr  ); /* DataType of c_err_msg changed from char to varchar in VQC */
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );/* DataType of c_err_msg changed from char to varchar in VQC */
    	l_acnt_id = -1;
      tpfree ( ( char * ) ptr_fml_Obuf ); /*** Added in VQC ***/
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
	}
	/*** Ver 1.3 Ends ***/
	

  /****************************************************************/
  /* Validate the User and Trading Password                       */
  /****************************************************************/

  /*** Commented in VQC as these variables are used for Session Check which is commented below

  strcpy( st_usr_prfl.c_user_id, c_usr_id );
  st_usr_prfl.l_session_id = l_sssn_id;
  strcpy( st_usr_prfl.c_cln_mtch_accnt, c_mtch_accnt );
  st_usr_prfl.l_usr_flg = 0; * to be validated *

  ***/

	/**********commented by sangeet on 24/07/07 as it was not required*************/
  /*i_returncode = fn_chk_sssn(c_ServiceName,
                             &st_usr_prfl ,
                             &st_err_msg );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31100", LIBMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    l_acnt_id = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }*/


	/********************************************************/
	/* Geting the status of the exercise Order							*/
  /********************************************************/

  /*** Commented in VQC to reduce extra DB hits and columns are selected in existing select query above ***

	EXEC SQL
  	SELECT FOD_ORDR_STTS,FOD_PIPE_ID
  		INTO   :c_ordr_stts,
						 :sql_pcm_crnt_pipe_id													* 1.1 *
  		FROM   FOD_FO_ORDR_DTLS
  		WHERE  FOD_ORDR_RFRNC = :c_fno_ordr_rfrnc AND
  		       FOD_CLM_MTCH_ACCNT  = :c_mtch_accnt AND
						 FOD_XCHNG_CD = :c_fno_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31105",SQLMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    l_acnt_id = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  ********************************/

	/********************************************************/
	/* Geting the status of the Derivative Exchange					*/
  /********************************************************/

	EXEC SQL
		SELECT EXG_CRRNT_STTS
			INTO :c_exg_crrnt_stts
  		FROM EXG_XCHNG_MSTR
      WHERE EXG_MKT_TYP = 'D' AND
						EXG_XCHNG_CD = :c_fno_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31110",SQLMSG,c_err_msg.arr); /* DataType of c_err_msg changed from char to varchar in VQC */
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /* DataType of c_err_msg changed from char to varchar in VQC */
    l_acnt_id = -1;
    tpfree ( ( char * ) ptr_fml_Obuf ); /*** Added in VQC ***/ 
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


  /********************************************************/
  /* Calling the service to cancel the FNO Exercise Order */
  /********************************************************/

	strcpy(c_dam_trnsctn,"C");

  i_returncode = fn_call_svc_fml ( c_ServiceName,
                                    c_err_msg.arr,  /* DataType of c_err_msg changed from char to varchar in VQC */
                                    c_svc_name,
                                    0,
                                    9,  /*** changed to 9 from 8 in Ver 2.0 ***/  
                                    0,
					                          FFO_USR_ID, ( char * )c_usr_id,
					                          FFO_SSSN_ID, ( char * )&l_sssn_id,
        					                  FFO_EBA_MTCH_ACT_NO,
                 				                   ( char * )c_mtch_accnt,
                       					    FFO_XCHNG_CD, ( char * )c_fno_xchng_cd,
					                          FFO_ORDR_RFRNC, ( char * )c_fno_ordr_rfrnc,
                   						  /*    FFO_CANCL_QTY, ( char * )&l_fno_cancel_qty,*/
   						                      FFO_ALIAS, ( char * )c_alias,
																		FFO_PIPE_ID, ( char * )sql_pcm_crnt_pipe_id,
																		FFO_DAM_TRNSCTN, ( char * )c_dam_trnsctn,
                                    FFO_SYS_MSG, ( char * )c_stop_vtc_flg);

  if ( i_returncode != SUCC_BFR )
  {
    fn_errlog( c_ServiceName, "S31115", LIBMSG, c_err_msg.arr  ); /* DataType of c_err_msg changed from char to varchar in VQC */
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /* DataType of c_err_msg changed from char to varchar in VQC */
    l_acnt_id = -1;
    tpfree ( ( char * ) ptr_fml_Obuf ); /*** Added in VQC ***/
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


	if (c_ordr_stts == 'R')   												/* Order status is REQUESTED */
	{
	strcpy(c_succes_msg.arr,"Your order has been cancelled."); /* DataType of c_succes_msg changed from char to varchar in VQC */
	}
	else if (c_ordr_stts == 'O' || c_ordr_stts == 'P') /* Order status is ORDERED */
	{
		if(c_exg_crrnt_stts == 'O')  										/* market is OPEN */
		{
			strcpy(c_succes_msg.arr,"Your request for order cancellation has been sent to the exchange."); /* DataType of c_succes_msg changed from char to varchar in VQC */
		}
		else																						/* market is ClOSED */
		{
			strcpy(c_succes_msg.arr,"Your request for Order Cancellation will be sent to the exchange when the exchange opens"); /* DataType of c_succes_msg changed from char to varchar in VQC */
		}
	}
  /*** Ver 2.0 Starts ***/
  else if (c_ordr_stts == 'J' && strcmp(c_stop_vtc_flg,"V") == 0)
  {
   strcpy(c_succes_msg.arr,"Your request for STOP VTC has been accepted."); 
  } 

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"c_succes_msg <%s>",c_succes_msg.arr); /* DataType of c_succes_msg changed from char to varchar in VQC */
	}

  if(Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_succes_msg.arr, 0 ) == -1) /* DataType of c_succes_msg changed from char to varchar in VQC */
	{
	 fn_errlog( c_ServiceName, "S31120", TPMSG, c_err_msg.arr); /* DataType of c_err_msg changed from char to varchar in VQC */
   tpfree ( ( char * ) ptr_fml_Obuf );
   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /* DataType of c_err_msg changed from char to varchar in VQC */
   l_acnt_id = -1;
   Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  l_acnt_id = 0;
  if(Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ) == -1)
	{
	 fn_errlog( c_ServiceName, "S31125", TPMSG, c_err_msg.arr); /* DataType of c_err_msg changed from char to varchar in VQC */
   tpfree ( ( char * ) ptr_fml_Obuf );
   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /* DataType of c_err_msg changed from char to varchar in VQC */
   l_acnt_id = -1;
   Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}


/*  ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
                               i_counter * MIN_FML_BUF_LEN );

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31130", TPMSG, c_err_msg  );
    tpfree ( ( char * ) ptr_fml_Obuf );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

*/
  tpreturn(TPSUCCESS, 0L, (char *)ptr_fml_Obuf, 0, 0);
}

