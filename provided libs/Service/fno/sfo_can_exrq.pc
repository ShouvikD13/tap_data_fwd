/******************************************************************************/
/*	Program	    			:	SFO_CAN_EXREQ                                         */
/*                                                                            */
/*  Input             : FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_ORDR_RFRNC                                        */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PIPE_ID                                           */
/*                                                                            */
/*  Output            : Success / Failure                                     */
/*                                                                            */
/*  Description       : This service is used a cancel an Exercise Request     */
/*                                                                            */
/*  Log               : 1.0   19-Oct-2001   A.Satheesh Kumar Reddy            */
/*  Log               : 1.1   18-Jul-2002   Infotech|Sangeet                  */
/*  Log               : 1.2   09-Apr-2007   Infotech|Vikash                   */
/*	Log								:	1.3		20-Dec-2007		Infotech|Sushil										*/
/*	Log								:	1.5		01-Jul-2016		Infotech|Navina D.  							*/
/*  Log               : 1.6   23-Oct-2019   Infotech|Tanmay Patel             */
/*  Log               : 1.7   07-Mar-2023   Infotech|Mahesh Shinde            */
/*                                                                            */
/******************************************************************************/
/*   1.0  -  New release                                                      */
/*   1.1  -  BP Changes                                                       */
/*   1.2  -  varchar to char transformation                                   */
/*	 1.3	-	 AIX Migration																										*/
/*   1.5  -  Check Session ip common function changes                         */
/*   1.6  -  Ipv6 Format                                                      */
/*   1.7  -  FNO lock user changes                                            */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h> /*Add header files here */
#include <fo.h>
#include <eba_to_ors.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fo_view_def.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>             /*  Ver 1.3 : Added   */
#include <fn_val_ord.h>         /*  Ver 1.3 : Added   */
#include <fml_rout.h>						/*  Ver 1.3 : Added   */
#include <fn_read_debug_lvl.h>	/*  Ver 1.3 : Added   */

int fn_check_order( char *c_ServiceName,
                  struct vw_pstn_actn *ptr_st_pstn_actn,
                  struct vw_exrcbook *ptr_o_st_exrcbook,
                  struct vw_err_msg *ptr_st_err_msg );

int fn_check_input( char * c_ServiceName,
                  struct vw_xchngbook *ptr_st_xchngbook,
                  struct vw_err_msg *ptr_st_err_msg );

void SFO_CAN_EXRQ( TPSVCINFO *rqst )
{

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  char  c_ServiceName[33];
  char  c_err_msg[256];
  char  c_trdng_psswrd_flg = YES;
  char  c_pipe_id[3];
  int   i_returncode;
  int   i_trnsctn;
  int   i_err[16];
  int   i_ferr[16];
  int   i_ip_len;
  int   i_op_len;
  long  l_xchng_seq_num;
  char c_psswd_req_flg;
  char c_channel[4];/*1.1 BP*/
  char c_bp_id[9];/*1.1 BP*/
  char c_alias[9];/*1.1 BP*/
  int i_level_exists =0; /*1.1*/
	char c_ip_address[45+1]="\0";	/** Changed from 15 to 45 in Ver 1.6 **/		/*** Ver 1.5 ***/
  char c_txn_flg='Y';               /*** Ver 1.5 ***/

	char c_fno_dmn_nm [ 16 ];
  char c_fno_trg_nm [ 16 ];
  char c_fno_trg_dat [ 256 ];

  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_usr_prfl st_usr_prfl;
    struct vw_xchngbook st_xchngbook;
  	struct vw_exrcbook st_o_exrcbook;
    varchar c_usr_usr_psswrd[ 50 + 1 ];
		varchar	c_trd_dt [ LEN_DATE ];
		varchar	c_sys_dt [ LEN_DATE ];
  EXEC SQL END DECLARE SECTION;
  
  struct vw_err_msg st_err_msg;
  struct vw_sequence st_s_sequence;
  struct vw_sequence st_r_sequence;
  struct vw_exrcbook st_i_exrcbook;
  struct vw_pstn_actn pstn_actn; 

	char c_ex_ordr_typ;

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy(c_ServiceName, rqst->name);
	INITDBGLVL(c_ServiceName);						/* 	Ver 1.3 : Added 	*/

  fn_userlog(c_ServiceName, " Inside SFO_CAN_EXREQ : 1 ");
  i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_usr_prfl,
                           "vw_usr_prfl" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_xchngbook,
                           "vw_xchngbook" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	MEMSET(st_err_msg);			/** Ver 1.5 **/

	fn_init_ddr_pop ( st_xchngbook.c_pipe_id,TRADING_SECTION,O_CS);

	if( DEBUG_MSG_LVL_3 ) {						/* 	Ver 1.3 : DEBUG level change	*/
    fn_userlog( c_ServiceName, "User id       :%s:",
                                  st_usr_prfl.c_user_id );
    fn_userlog( c_ServiceName, "Session id    :%ld:",
                                  st_usr_prfl.l_session_id );
    fn_userlog( c_ServiceName, "Match Account :%s:",
                                  st_usr_prfl.c_cln_mtch_accnt );
    fn_userlog( c_ServiceName, "Order Reference no  :%s:",
                                 st_xchngbook.c_ordr_rfrnc );
    fn_userlog( c_ServiceName, "Exercise Qty     :%ld:",
                                 st_xchngbook.l_ord_tot_qty );
    fn_userlog( c_ServiceName, "Pipe id      :%s:",
                                 st_xchngbook.c_pipe_id );
    fn_userlog( c_ServiceName, "Exchange code      :%s:",
                                 st_xchngbook.c_xchng_cd );
    fn_userlog( c_ServiceName, "Exercise type      :%c:", c_ex_ordr_typ );
	}

  c_psswd_req_flg=NO;
 
	/*** Commented for Ver 1.5 ***
  i_returncode =  fn_check_user ( c_ServiceName,
                                  &st_usr_prfl ,
                                  (char *)c_usr_usr_psswrd.arr, ** ver 1.2 earlier it was not converting varchar to char before calling fn_check_user) **
                                  c_psswd_req_flg,
                                  &st_err_msg );
	*** Ver 1.5 ***/

	/*** Ver 1.5 starts ***/
	i_returncode =  fn_check_user_ip ( c_ServiceName,
                                  &st_usr_prfl ,
                                  (char *)c_usr_usr_psswrd.arr, 
                                  c_psswd_req_flg,
																	c_ip_address,
																	c_txn_flg,
                                  &st_err_msg );
	/*** Ver 1.5 ends ***/

  if ( i_returncode == -1 )
  {
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  i_returncode = fn_check_input(  c_ServiceName,
                                  &st_xchngbook,
                                  &st_err_msg );
  if ( i_returncode == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

 /***1.1 start ***/

    if(st_usr_prfl.c_user_id[0] == BPID)
    {
      if(Fget32(ptr_fml_Ibuf,FFO_ALIAS,0,(char *)c_alias,0) == -1)
      {
            fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      	EXEC SQL
        SELECT 1
        INTO   :i_level_exists
        FROM   clm_clnt_mstr
        WHERE  clm_mtch_accnt = :st_usr_prfl.c_cln_mtch_accnt and
               clm_bp_id      = :st_usr_prfl.c_user_id and
               clm_alias_name = :c_alias ;

      if(i_level_exists != 1 )
      {
            fn_errlog( c_ServiceName, "B55006", "", c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      strcpy(c_bp_id,st_usr_prfl.c_user_id);
    }
    else
    {
      strcpy(c_bp_id,"*");
    }

  /***1.1 End  ***/

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	fn_errlog( c_ServiceName, "S31020",LIBMSG,c_err_msg);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	strcpy( st_i_exrcbook.c_exrc_ordr_rfrnc,st_xchngbook.c_ordr_rfrnc);
  st_i_exrcbook.c_oprn_typ = FOR_UPDATE;

  i_ip_len = sizeof ( struct vw_exrcbook );
  i_op_len = sizeof ( struct vw_exrcbook );

	fn_cpy_ddr ( st_i_exrcbook.c_rout_crt );
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_i_exrcbook,
                              &st_o_exrcbook,
                              "vw_exrcbook",
                              "vw_exrcbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_EXRQ_DTLS" );

  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	fn_errlog( c_ServiceName, "S31025",LIBMSG,c_err_msg);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /* i_returncode = fn_lock_usr( c_ServiceName, st_usr_prfl.c_cln_mtch_accnt ); ** Ver 1.7 **/
  i_returncode = fn_lock_fno( c_ServiceName, st_usr_prfl.c_cln_mtch_accnt );   /** Ver 1.7 **/
  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  i_returncode = fn_check_order( c_ServiceName,
                               &pstn_actn,
                               &st_o_exrcbook,
                               &st_err_msg );
  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  st_xchngbook.l_mdfctn_cntr = st_o_exrcbook.l_mdfctn_cntr ;
  st_xchngbook.c_oprn_typ = WITHOUT_ORS_MSG_TYP;

  i_ip_len = sizeof ( struct vw_xchngbook );
  i_op_len = sizeof ( struct vw_xchngbook );

	fn_cpy_ddr ( st_xchngbook.c_rout_crt );
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_xchngbook,
                              &st_xchngbook,
                              "vw_xchngbook",
                              "vw_xchngbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_REF_TO_OMD" );

  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	fn_errlog( c_ServiceName, "S31030",LIBMSG,c_err_msg);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  EXEC SQL
    SELECT to_char(exg_nxt_trd_dt,'DD-Mon-YYYY'),
           to_char(SYSDATE,'DD-Mon-YYYY hh24:mi:ss')
    INTO   :c_trd_dt,
           :c_sys_dt
    FROM   exg_xchng_mstr
    WHERE  exg_xchng_cd = :st_xchngbook.c_xchng_cd
    AND    exg_mkt_typ  = 'D';

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31035",SQLMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  SETNULL ( c_trd_dt );
  SETNULL ( c_sys_dt );

  strcpy( st_xchngbook.c_mod_trd_dt, (char *) c_trd_dt.arr);

  if ( ( st_o_exrcbook.c_exrc_stts == ORDERED ) &&
       ( st_xchngbook.c_plcd_stts == 'R'    )   && /* Request Placed */
       ( st_xchngbook.c_req_typ == 'C'     )   )  /* Request Cancelled */
	{
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog( c_ServiceName, "B28568",DEFMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  if ( st_o_exrcbook.c_exrc_stts == REQUESTED )
  {
    st_xchngbook.c_plcd_stts = ACCEPT;
    st_xchngbook.c_rms_prcsd_flg = NOT_PROCESSED;
    st_xchngbook.l_ors_msg_typ = ORS_NEW_EXER_ACPT;
    strcpy( st_xchngbook.c_ack_tm, (char *) c_sys_dt.arr);
		strcpy( st_xchngbook.c_entry_dt_tm, (char *) c_sys_dt.arr);
    strcpy( st_xchngbook.c_xchng_rmrks, "CANCELLED BY CLIENT");
		st_xchngbook.l_dwnld_flg = NOT_DOWNLOAD;
		st_xchngbook.d_jiffy = 0;
    st_xchngbook.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;

    i_ip_len = sizeof ( struct vw_xchngbook );
    i_op_len = sizeof ( struct vw_xchngbook );

		fn_cpy_ddr ( st_xchngbook.c_rout_crt );
    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_xchngbook,
                                &st_xchngbook,
                                "vw_xchngbook",
                                "vw_xchngbook",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_UPD_XCHNGBK" );

    if ( i_returncode == -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_errlog( c_ServiceName, "S31040",LIBMSG,c_err_msg);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		fn_cpy_ddr ( st_xchngbook.c_rout_crt );
    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_xchngbook,
                                &st_xchngbook,
                                "vw_xchngbook",
                                "vw_xchngbook",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_EXREQ_ACK" );

    if ( i_returncode == -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_errlog( c_ServiceName, "S31045",LIBMSG,c_err_msg);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

  } /* End of Exercise in REQUESTED state */

  if ( ( st_o_exrcbook.c_exrc_stts == ORDERED ) &&
       ( st_xchngbook.c_plcd_stts == 'R'     )   )  /* Request Placed */
  {
    st_xchngbook.c_plcd_stts = REJECT;
    st_xchngbook.c_rms_prcsd_flg = NOT_PROCESSED;
    st_xchngbook.l_ors_msg_typ = ORS_MOD_EXER_RJCT;
    strcpy( st_xchngbook.c_ack_tm, (char *) c_sys_dt.arr);
    strcpy( st_xchngbook.c_entry_dt_tm, (char *) c_sys_dt.arr);
    strcpy( st_xchngbook.c_xchng_rmrks, "CANCELLED BY CLIENT");
    st_xchngbook.l_dwnld_flg = NOT_DOWNLOAD;
    st_xchngbook.d_jiffy = 0;
    st_xchngbook.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;

    i_ip_len = sizeof ( struct vw_xchngbook );
    i_op_len = sizeof ( struct vw_xchngbook );

		fn_cpy_ddr ( st_xchngbook.c_rout_crt );
    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_xchngbook,
                                &st_xchngbook,
                                "vw_xchngbook",
                                "vw_xchngbook",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_UPD_XCHNGBK" );

    if ( i_returncode == -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_errlog( c_ServiceName, "S31050",LIBMSG,c_err_msg);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		fn_cpy_ddr ( st_xchngbook.c_rout_crt );
    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_xchngbook,
                                &st_xchngbook,
                                "vw_xchngbook",
                                "vw_xchngbook",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_EXREQ_ACK" );

    if ( i_returncode == -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_errlog( c_ServiceName, "S31055",LIBMSG,c_err_msg);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

  }

  strcpy(pstn_actn.c_user_id, st_usr_prfl.c_user_id);
  pstn_actn.l_session_id  = st_usr_prfl.l_session_id;
  strcpy(pstn_actn.c_cln_mtch_accnt,st_o_exrcbook.c_cln_mtch_accnt);
  pstn_actn.l_eba_cntrct_id = st_o_exrcbook.l_eba_cntrct_id;
  strcpy(pstn_actn.c_xchng_cd,st_o_exrcbook.c_xchng_cd);
  pstn_actn.c_prd_typ = st_o_exrcbook.c_prd_typ;
  strcpy(pstn_actn.c_undrlyng,st_o_exrcbook.c_undrlyng);
  strcpy(pstn_actn.c_expry_dt,st_o_exrcbook.c_expry_dt);
  pstn_actn.c_exrc_typ = st_o_exrcbook.c_exrc_typ;
  pstn_actn.c_opt_typ = st_o_exrcbook.c_opt_typ;
  pstn_actn.l_strike_prc = st_o_exrcbook.l_strike_prc;
  pstn_actn.c_ctgry_indstk = st_o_exrcbook.c_ctgry_indstk;
  pstn_actn.l_ca_lvl = st_o_exrcbook.l_ca_lvl;
  pstn_actn.c_cntrct_tag = '*';

  pstn_actn.l_actn_typ = ORS_CAN_EXER_REQ;

  pstn_actn.c_trnsctn_flw = st_o_exrcbook.c_exrc_rqst_typ;
  pstn_actn.l_orgnl_qty = st_o_exrcbook.l_exrc_qty;
  pstn_actn.l_orgnl_rt  = 0;
  pstn_actn.l_new_qty = 0;
  pstn_actn.l_new_rt  = 0;
  pstn_actn.l_exec_qty  = 0;
  pstn_actn.l_exec_rt  = 0;
  pstn_actn.l_fresh_qty  = 0;
  pstn_actn.l_cover_qty  = 0;
  pstn_actn.d_add_mrgn_amt  = 0;

  pstn_actn.l_curr_rt = 0;
  sprintf(pstn_actn.c_ref_rmrks,"%s-%ld",st_o_exrcbook.c_exrc_ordr_rfrnc,
                               st_o_exrcbook.l_mdfctn_cntr + 1);
  rtrim(pstn_actn.c_ref_rmrks);

  i_ip_len = sizeof ( struct vw_pstn_actn );
  i_op_len = sizeof ( struct vw_pstn_actn );

	fn_cpy_ddr ( pstn_actn.c_rout_crt );
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &pstn_actn,
                              &pstn_actn,
                              "vw_pstn_actn",
                              "vw_pstn_actn",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_OPT_POS" );
  if ( i_returncode != SUCC_BFR )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_errlog( c_ServiceName, "S31060",LIBMSG,c_err_msg);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  i_ip_len = sizeof ( struct vw_sequence );
  i_op_len = sizeof ( struct vw_sequence );

  strcpy( st_s_sequence.c_pipe_id, st_xchngbook.c_pipe_id );
  strcpy( st_s_sequence.c_trd_dt, st_xchngbook.c_mod_trd_dt );
  st_s_sequence.c_rqst_typ = GET_XCHNG_SEQ;

	fn_cpy_ddr ( st_s_sequence.c_rout_crt );
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_s_sequence,
                              &st_r_sequence,
                              "vw_sequence",
                              "vw_sequence",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_GET_SEQ" );
  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_errlog( c_ServiceName, "S31065",LIBMSG,c_err_msg);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  l_xchng_seq_num = st_r_sequence.l_seq_num;

  st_xchngbook.l_mdfctn_cntr = st_o_exrcbook.l_mdfctn_cntr + 1;
  st_xchngbook.c_spl_flg = NORMAL_ORDER;
  st_xchngbook.l_ord_seq = l_xchng_seq_num;

  st_xchngbook.c_req_typ = CANCEL; 
  st_xchngbook.c_plcd_stts = 'R';  /* Request Placed */
  st_xchngbook.c_ex_ordr_typ = st_o_exrcbook.c_exrc_rqst_typ ;

  st_xchngbook.l_ord_tot_qty = st_o_exrcbook.l_exrc_qty ;

  st_xchngbook.c_oprn_typ = INSERTION_ON_EXREQ_MODIFICATION;
    
  strcpy ( st_xchngbook.c_rqst_tm , (char *)c_sys_dt.arr );
  strcpy ( st_xchngbook.c_xchng_rmrks , "*" );

  i_ip_len = sizeof (struct vw_xchngbook);
  i_op_len = sizeof ( struct vw_xchngbook );

	fn_cpy_ddr ( st_xchngbook.c_rout_crt );
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_xchngbook,
                              &st_xchngbook,
                              "vw_xchngbook",
                              "vw_xchngbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_XCHNGBK" );

  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_errlog( c_ServiceName, "S31070",LIBMSG,c_err_msg);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  st_o_exrcbook.c_oprn_typ = UPDATE_MOD_CNTR_EXBK;
  i_ip_len = sizeof ( struct vw_exrcbook );
  i_op_len = sizeof ( struct vw_exrcbook );

	fn_cpy_ddr ( st_o_exrcbook.c_rout_crt );
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_o_exrcbook,
                              &st_o_exrcbook,
                              "vw_exrcbook",
                              "vw_exrcbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_EXBK" );
  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_errlog( c_ServiceName, "S31075",LIBMSG,c_err_msg);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if( st_o_exrcbook.c_exrc_stts == REQUESTED )
	{
    st_xchngbook.c_plcd_stts = ACCEPT;
    st_xchngbook.c_rms_prcsd_flg = NOT_PROCESSED;
    st_xchngbook.l_ors_msg_typ = ORS_CAN_EXER_ACPT;
    strcpy( st_xchngbook.c_ack_tm, (char *) c_sys_dt.arr);
    strcpy( st_xchngbook.c_entry_dt_tm, (char *) c_sys_dt.arr);
    st_xchngbook.l_dwnld_flg = NOT_DOWNLOAD;
    st_xchngbook.d_jiffy = 0;
    strcpy( st_xchngbook.c_xchng_rmrks, "\0");
    st_xchngbook.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;

    i_ip_len = sizeof ( struct vw_xchngbook );
    i_op_len = sizeof ( struct vw_xchngbook );

		fn_cpy_ddr ( st_xchngbook.c_rout_crt );
    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_xchngbook,
                                &st_xchngbook,
                                "vw_xchngbook",
                                "vw_xchngbook",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_UPD_XCHNGBK" );

    if ( i_returncode == -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_errlog( c_ServiceName, "S31080",LIBMSG,c_err_msg);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		fn_cpy_ddr ( st_xchngbook.c_rout_crt );
    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_xchngbook,
                                &st_xchngbook,
                                "vw_xchngbook",
                                "vw_xchngbook",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_EXREQ_ACK" );

    if ( i_returncode == -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_errlog( c_ServiceName, "S31085",LIBMSG,c_err_msg);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

	}

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_errlog( c_ServiceName, "S31090",LIBMSG,c_err_msg);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/********************************************************/
   /****Changes for Tux4 Triggers***************************/
   /********************************************************/
	/*
  fn_pst_trg( c_ServiceName, "TRG_LOOK_TAB", "TRG_LOOK_TAB",
                             st_xchngbook.c_pipe_id );
	*/

	 /* To post the Trigger in Tux3 Domain Call the service SFO_FOS_TRG */
   strcpy ( c_fno_dmn_nm, "FNO" );
   strcpy ( c_fno_trg_nm, "TRG_LOOK_TAB" );
   strcpy ( c_fno_trg_dat, "TRG_LOOK_TAB" );

   i_returncode = fn_call_svc_fml ( c_ServiceName,
                                   c_err_msg,
                                   "SFO_FOS_TRG",
                                   0,
                                   4,
																	 0,
                                   FFO_DMN_NM, (char *)c_fno_dmn_nm,
                                   FFO_TRG_NM, (char *)c_fno_trg_nm,
                                   FFO_ABT_TRG_DATA, (char *)c_fno_trg_dat,
                                  FFO_ABT_FILTER, (char *)st_xchngbook.c_pipe_id);

   if ( i_returncode != SUCC_BFR )
   {
     fn_errlog( c_ServiceName, "S31095", LIBMSG, c_err_msg  );
   }

   /********************************************************/
   /****Changes for Tux4 Triggers***************************/
   /********************************************************/

  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Ibuf, 0 , 0 );
}

int fn_check_input( char * c_ServiceName,
                  struct vw_xchngbook *ptr_st_xchngbook,
                  struct vw_err_msg *ptr_st_err_msg )
{

  EXEC SQL BEGIN DECLARE SECTION;
    char c_exg_exrc_mkt_stts;
  EXEC SQL END DECLARE SECTION;

  EXEC SQL
    SELECT exg_exrc_mkt_stts
    INTO   :c_exg_exrc_mkt_stts
    FROM   exg_xchng_mstr
    WHERE  exg_xchng_cd = :ptr_st_xchngbook->c_xchng_cd
    AND    exg_mkt_typ  = 'D';

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31100",SQLMSG,ptr_st_err_msg->c_err_msg);
    return ( -1 );
  }

  /** Exercise orders can be placed only when the Exercise market is open **/
  if ( c_exg_exrc_mkt_stts != EXCHANGE_OPEN )
  {
    fn_errlog( c_ServiceName, "B28554",DEFMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

  return ( 0 );
}


int fn_check_order( char *c_ServiceName,
                  struct vw_pstn_actn *ptr_st_pstn_actn,
                  struct vw_exrcbook *ptr_o_st_exrcbook,
                  struct vw_err_msg *ptr_st_err_msg )
{

  char c_err_msg[256];

	if ( ( ptr_o_st_exrcbook->c_exrc_stts != REQUESTED ) &&
       ( ptr_o_st_exrcbook->c_exrc_stts != ORDERED )    ) 
  {
    fn_errlog( c_ServiceName, "B28533", DEFMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  return SUCCESS;
}
