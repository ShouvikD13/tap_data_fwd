/**************************************************************************************************************************/
/*  Program       : SFO_SNAP_VIEW                                                                                         */
/*                                                                                                                        */
/*  Description   : This Service displays contract wise Snap View in FNO open positions                                   */
/*                                                                                                                        */
/*  Input Buffer  : FFO_USR_ID             string    user id                                                              */
/*                  FFO_SSSN_ID            long      session id                                                           */
/*                  FFO_EBA_MTCH_ACT_NO    string    match id                                                             */ 
/*                  FFO_XCHNG_CD           string    Exchange Code                                                        */
/*                  FFO_UNDRLYNG           string    Underlying                                                           */    
/*                  FFO_PRDCT_TYP          char      Product Type                                                         */
/*                  FFO_OPT_TYP            char      Option Type                                                          */
/*                  FFO_EXPRY_DT           string    Expiry Date                                                          */
/*                  FFO_STRK_PRC           long      Strike Price                                                         */       
/*                                                                                                                        */
/*  Output Buffer :                                                                                                       */
/*      Future Position:                                                                                                  */ 
/*                  d_rollovr_prcnt		   FFO_C_ORG_OPN_VAL        double				                                          */
/*                  d_ltq_rt             FFO_AMOUNT               double                                                  */   
/*                  d_prcnt_chng	   	   FFO_FUT_PRC              double                                                  */ 
/*                  d_crnt_vol		       FFO_LIMIT                double                                                  */
/*                  d_prcnt_vol		       FFO_BAL_AMT              double                                                  */
/*                  d_fut_crnt_oi		     FFO_U_MM_EX_MRGN         double                                                  */
/*                  d_fut_prcnt_oi		   FFO_U_MM_SP_MRGN         double                                                  */
/*                  d_dis_prmium		     FFO_U_MM_SPRD_PL         double                                                  */
/*       Option Position:                                                                                                 */ 
/*                  d_pcr_oi             FFO_U_MM_SPRD_PL         double                                                  */
/*                  d_crrnt_day_oi	     FFO_C_ORG_OPN_VAL        double                                                  */
/*                  d_prvs_day_oi		     FFO_C_MTM_OPN_VAL        double                                                  */
/*                  d_fresh_oi		       FFO_C_ORDR_MRGN          double                                                  */
/*                                                                                                                        */
/*  Log           : Ver 1.0  25-Aug-2020  (Anuj Pancholi) CR-ISEC10-138335                                                */
/*                  Displaying contract wise Snap View in FNO open positions                                              */
/**************************************************************************************************************************/

/**** C header ****/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>

#include <userlog.h>
/**** Tuxedo header ****/
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fml_rout.h>

#include <fn_tuxlib.h>
#include <fn_session.h> 
#include <fn_ddr.h>
#include <fn_log.h>
#include <fn_read_debug_lvl.h>


/**** Process specific header ****/

#define   TOTAL_FML               9  
#define   LEN_STCK_CD             6
#define   LEN_XCHNG_CD            3

void SFO_SNAP_VIEW(TPSVCINFO *rqst)
{
  char  c_ServiceName[33]="\0";
  char  c_errmsg[256] ="\0";
  
  EXEC SQL BEGIN DECLARE SECTION;
 
  char  c_prdct_typ ='\0';
  char  c_opt_typ ='\0';
  char  c_dis_prm_flg ='\0'; 
 
  char c_undrlyng[7] = "\0";
  char c_xchng_cd[4] = "\0";
  char c_expry_dt[23] = "\0"; 
  /** char c_undrlyng_tmp[30] = "\0"; ** to be removed scrapped **/
  /** char c_pulse_data[150] = "\0";  ** to be removed scrapped **/
  long  l_strk_prc =0;
  /** long l_bufferlength=0;  *** to be removed scrapped ***/
  /** long l_no_of_pulse = 0; *** to be removed scrapped ***/
  
  double d_pcr_oi = 0.0;
  double d_prvs_day_oi = 0.0;
  double d_crrnt_day_oi = 0.0;
  double d_fresh_oi = 0.0;
  double d_test=0.0;

  double d_rollovr_prcnt = 0.0;
  double d_ltq_rt = 0.0;
  double d_prcnt_chng = 0.0;
  double d_crnt_vol = 0.0;
  double d_prcnt_vol = 0.0;
  double d_fut_crnt_oi = 0.0;
  double d_fut_prcnt_oi = 0.0;
  double d_dis_prmium = 0.0;
  
  struct vw_usr_prfl st_usr_prfl;
  struct vw_err_msg st_err_msg;
  
  EXEC SQL END DECLARE SECTION;

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;
  FBFR32 *ptr_fml_Tempbuf;

  int   i_err[TOTAL_FML];
  int   i_ferr[TOTAL_FML];
  int   i = 0;
  int i_returncode =0;
  int i_counter =1;

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy(c_ServiceName, rqst->name);

  INITDBGLVL(c_ServiceName);

  ptr_fml_Obuf = (FBFR32 *)NULL;
  ptr_fml_Tempbuf = (FBFR32 *)NULL;

  MEMSET(st_usr_prfl);
  MEMSET(st_err_msg);
  

  i_err[0]  = Fget32(ptr_fml_Ibuf, FFO_USR_ID, 0, (char *)st_usr_prfl.c_user_id, 0);
  i_ferr[0] = Ferror32;
  i_err[1]  = Fget32(ptr_fml_Ibuf, FFO_SSSN_ID, 0, (char *)&st_usr_prfl.l_session_id, 0);
  i_ferr[1] = Ferror32;
  i_err[2]  = Fget32(ptr_fml_Ibuf, FFO_EBA_MTCH_ACT_NO, 0, (char *)st_usr_prfl.c_cln_mtch_accnt, 0);
  i_ferr[2] = Ferror32;
  i_err[3]  = Fget32(ptr_fml_Ibuf, FFO_UNDRLYNG, 0, (char *)c_undrlyng, 0);
  i_ferr[3] = Ferror32;
  i_err[4]  = Fget32(ptr_fml_Ibuf, FFO_XCHNG_CD, 0, (char *)c_xchng_cd, 0);
  i_ferr[4] = Ferror32;
  i_err[5]  = Fget32(ptr_fml_Ibuf, FFO_PRDCT_TYP, 0, (char *)&c_prdct_typ, 0);
  i_ferr[5] = Ferror32;
  i_err[6]  = Fget32(ptr_fml_Ibuf, FFO_OPT_TYP, 0, (char *)&c_opt_typ, 0);
  i_ferr[6] = Ferror32;
  i_err[7]  = Fget32(ptr_fml_Ibuf, FFO_EXPRY_DT, 0, (char *)c_expry_dt, 0);
  i_ferr[7] = Ferror32;
  i_err[8]  = Fget32(ptr_fml_Ibuf, FFO_STRK_PRC, 0, (char *)&l_strk_prc, 0);
  i_ferr[8] = Ferror32;

  for(i=0; i < TOTAL_FML; i++)
  {
     if(i_err[i] == -1)
     {
        fn_userlog( c_ServiceName, "Error in field no. [%d] ",i);
        fn_errlog( c_ServiceName, "S31005", FMLMSG, c_errmsg );
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
     }
  }
  
  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

  rtrim(c_xchng_cd);
  rtrim(c_undrlyng);
  rtrim(c_expry_dt);

  
  fn_userlog(c_ServiceName, "Fetched FML value are :--------------------"); 
  fn_userlog(c_ServiceName, "User Id is :%s:",st_usr_prfl.c_user_id);
  fn_userlog(c_ServiceName, "Session id is :%ld:",st_usr_prfl.l_session_id);
  fn_userlog(c_ServiceName, "match id is :%s:",st_usr_prfl.c_cln_mtch_accnt);
  fn_userlog(c_ServiceName, "Exch code is :%s:", c_xchng_cd);
  fn_userlog(c_ServiceName, "Underlying Name is :%s:",c_undrlyng);
  fn_userlog(c_ServiceName, "Product tyoe is :%c:",c_prdct_typ);
  fn_userlog(c_ServiceName, "option Type is :%c:",c_opt_typ);
  fn_userlog(c_ServiceName, "Expiry dat is :%s:",c_expry_dt);
  fn_userlog(c_ServiceName, "strike Price is :%ld:",l_strk_prc);
  

  if ( st_usr_prfl.l_session_id != 0 )
  {
   i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl,
                                             &st_err_msg) ;

   if ( i_returncode == -1 )
   {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, st_err_msg.c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
  }
  
  /* Allocate memory for output buffer */
  ptr_fml_Obuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  if (ptr_fml_Obuf == NULL)
  {
   fn_errlog(c_ServiceName, "S31015", TPMSG, c_errmsg);
   Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0);
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

  
  if ( c_prdct_typ == FUTURES )
  {
   /***	Roll Over percentage ***/ 
    EXEC SQL
    select decode(T2.near_nxt_far,0,0,round((T1.nxt_far/T2.near_nxt_far)*100,2)) 
    INTO :d_rollovr_prcnt
    from
    (select NVL(sum(FTQ_CRNT_OI),0) nxt_far from FTQ_FO_TRD_QT where FTQ_UNDRLYNG=:c_undrlyng and FTQ_PRDCT_TYP=:c_prdct_typ and to_char(FTQ_EXPRY_DT,'MM') > to_char(sysdate,'MM')) T1,
    (select NVL(sum(FTQ_CRNT_OI),0) near_nxt_far from FTQ_FO_TRD_QT where FTQ_UNDRLYNG=:c_undrlyng and FTQ_PRDCT_TYP=:c_prdct_typ) T2; 

    if (SQLCODE != 0)
    {
     fn_errlog(c_ServiceName, "S31020", SQLMSG, c_errmsg);
     tpfree((char *) ptr_fml_Obuf);
     Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
    }
 
    /***  VIX ***/
 
     EXEC SQL
     select NVL(LTQ_RT,0)/100,
            NVL(LTQ_PRCNTG_CHNG_PCLS,0)/100
     INTO   :d_ltq_rt,
            :d_prcnt_chng
     from LTQ_TRD_QT 
     where LTQ_STCK_CD='INDVIX'; 
  
     if (SQLCODE != 0)
     {
      fn_errlog(c_ServiceName, "S31025", SQLMSG, c_errmsg);
      tpfree((char *) ptr_fml_Obuf);
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
     }
    
     /** Current Volume and Volume Percentage  in Contract **/

     EXEC SQL
     select NVL(FTQ_TOT_QTY_TRDD,0),
            decode(FTQ_CLS_TRD_QTY,0,0,NVL(round((FTQ_TOT_QTY_TRDD - FTQ_CLS_TRD_QTY)/FTQ_CLS_TRD_QTY*100,2),0))  
     INTO :d_crnt_vol,
          :d_prcnt_vol 
     from FTQ_FO_TRD_QT
     where FTQ_XCHNG_CD      = :c_xchng_cd
     and FTQ_PRDCT_TYP       = :c_prdct_typ
     and FTQ_UNDRLYNG        = :c_undrlyng
     and trunc(FTQ_EXPRY_DT) = :c_expry_dt
     and FTQ_OPT_TYP         = :c_opt_typ
     and FTQ_STRK_PRC        = :l_strk_prc;

     if (SQLCODE != 0)
     {
      fn_errlog(c_ServiceName, "S31030", SQLMSG, c_errmsg);
      tpfree((char *) ptr_fml_Obuf);
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
     }
  
     /** Open Interest and Open interest Percentage **/ 

     EXEC SQL 
     select NVL(FTQ_CRNT_OI,0),
            decode(FTQ_CLS_OI,0,0,NVL(round((FTQ_CRNT_OI-FTQ_CLS_OI)/FTQ_CLS_OI*100,2),0)) 
     INTO   :d_fut_crnt_oi,
            :d_fut_prcnt_oi
     from FTQ_FO_TRD_QT
     where FTQ_XCHNG_CD      = :c_xchng_cd
     and FTQ_PRDCT_TYP       = :c_prdct_typ
     and FTQ_UNDRLYNG        = :c_undrlyng
     and trunc(FTQ_EXPRY_DT) = :c_expry_dt
     and FTQ_OPT_TYP         = :c_opt_typ
     and FTQ_STRK_PRC        = :l_strk_prc;
     
     if (SQLCODE != 0)
     {
      fn_errlog(c_ServiceName, "S31035", SQLMSG, c_errmsg);
      tpfree((char *) ptr_fml_Obuf);
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
     }
   
     /*** Premium/Discount ***/
     
     EXEC SQL
     select NVL((FTQ_LST_TRD_PRC/100) - LTQ_RT,0),
            case when LTQ_RT > (FTQ_LST_TRD_PRC/100) then 'D'
            else 'P'
            end
     INTO  :d_dis_prmium,
           :c_dis_prm_flg 
     from LTQ_TRD_QT,FTQ_FO_TRD_QT
     where FTQ_UNDRLYNG      = LTQ_STCK_CD
     and LTQ_XCHNG_CD        = 'NSE' 
     and FTQ_PRDCT_TYP       = :c_prdct_typ
     and FTQ_UNDRLYNG        = :c_undrlyng
     and trunc(FTQ_EXPRY_DT) = :c_expry_dt
     and FTQ_OPT_TYP         = :c_opt_typ
     and FTQ_STRK_PRC        = :l_strk_prc; 
    
     if (SQLCODE != 0)
     {
       fn_errlog(c_ServiceName, "S31040", SQLMSG, c_errmsg);
       tpfree((char *) ptr_fml_Obuf);
       Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0);
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
     }
    
     i_err[0]  = Fadd32(ptr_fml_Obuf,FFO_C_ORG_OPN_VAL, (char *)&d_rollovr_prcnt,0);
     i_ferr[0] = Ferror32;
     i_err[1]  = Fadd32(ptr_fml_Obuf,FFO_AMOUNT, (char *)&d_ltq_rt,0);
     i_ferr[1] = Ferror32;
     i_err[2]  = Fadd32(ptr_fml_Obuf,FFO_FUT_PRC, (char *)&d_prcnt_chng,0);
     i_ferr[2] = Ferror32;
     i_err[3]  = Fadd32(ptr_fml_Obuf,FFO_LIMIT, (char *)&d_crnt_vol,0);
     i_ferr[3] = Ferror32;
     i_err[4]  = Fadd32(ptr_fml_Obuf,FFO_BAL_AMT, (char *)&d_prcnt_vol,0);
     i_ferr[4] = Ferror32;
     i_err[5]  = Fadd32(ptr_fml_Obuf,FFO_U_MM_EX_MRGN, (char *)&d_fut_crnt_oi,0);
     i_ferr[5] = Ferror32;   
     i_err[6]  = Fadd32(ptr_fml_Obuf,FFO_U_MM_SP_MRGN, (char *)&d_fut_prcnt_oi,0);
     i_ferr[6] = Ferror32;
     i_err[7]  = Fadd32(ptr_fml_Obuf,FFO_U_MM_SPRD_PL, (char *)&d_dis_prmium,0);
     i_ferr[7] = Ferror32;

     for ( i = 0; i < 8 ; i++)  
     {
      if(i_err[i] == -1)
      {
        fn_errlog( c_ServiceName, "S31045",FMLMSG,c_errmsg);
        fn_userlog(c_ServiceName,"Error in fadd in case of view site  ");
        fn_userlog(c_ServiceName,"Error in Fget at [%d],[%s]", i,Fstrerror32( i_ferr[i]));
        tpfree((char *)ptr_fml_Obuf);
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
       }
     }
     
     fn_userlog(c_ServiceName,"After Fadd -------------------------------------"); 
     fn_userlog(c_ServiceName,"Current mnth roll-over prcnt is :%lf:",d_rollovr_prcnt );
     fn_userlog(c_ServiceName,"LTQ rate is :%lf:",d_ltq_rt);
     fn_userlog(c_ServiceName,"LTQ prcnt chng is :%lf:",d_prcnt_chng);
     fn_userlog(c_ServiceName,"Current Volume in cntrct is :%lf:",d_crnt_vol );
     fn_userlog(c_ServiceName,"Volume Percentage is :%lf:",d_prcnt_vol );
     fn_userlog(c_ServiceName,"Current OI in the contract is :%lf:",d_fut_crnt_oi );
     fn_userlog(c_ServiceName,"Open interest Percentage is :%lf:",d_fut_prcnt_oi );
     fn_userlog(c_ServiceName,"Premium/Discount is :%lf:",d_dis_prmium );
    
  }
  else if ( c_prdct_typ == OPTIONS )
  {
  
     /** PCR OI Value **/
     EXEC SQL
     select decode(T2.call_oi,0,0,T1.put_oi/T2.call_oi)
     INTO :d_pcr_oi
     from (select NVL(sum(FTQ_CRNT_OI),0) put_oi from FTQ_FO_TRD_QT where FTQ_UNDRLYNG=:c_undrlyng and FTQ_OPT_TYP='P' and trunc(FTQ_EXPRY_DT) = :c_expry_dt ) T1 , ( select NVL(sum(FTQ_CRNT_OI),0) call_oi from FTQ_FO_TRD_QT where FTQ_UNDRLYNG=:c_undrlyng and FTQ_OPT_TYP='C' and trunc(FTQ_EXPRY_DT) = :c_expry_dt ) T2;

     if (SQLCODE != 0)
     {
      fn_errlog(c_ServiceName, "S31050", SQLMSG, c_errmsg);
      tpfree((char *) ptr_fml_Obuf);
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
     }
   
     /** Previuos Day OI & Current Day OI & fresh Contract Added **/ 
      EXEC SQL
      select decode(NVL(FTQ_PRVS_OI,0),0,0,round(((NVL(FTQ_CLS_OI,0)-NVL(FTQ_PRVS_OI,0))/NVL(FTQ_PRVS_OI,0))*100,2)),
             decode(NVL(FTQ_CLS_OI,0),0,0,round(((NVL(FTQ_CRNT_OI,0)-NVL(FTQ_CLS_OI,0))/NVL(FTQ_CLS_OI,0))*100,2)),
             decode(NVL(FTQ_MIN_LOT_QTY,0),0,0,round((NVL(FTQ_FRESH_OI,0)/NVL(FTQ_MIN_LOT_QTY,0)),2)) 
      INTO   :d_prvs_day_oi,
             :d_crrnt_day_oi,
             :d_fresh_oi
      from FTQ_FO_TRD_QT 
      where FTQ_XCHNG_CD      = :c_xchng_cd 
      and FTQ_PRDCT_TYP       = :c_prdct_typ 
      and FTQ_UNDRLYNG        = :c_undrlyng
      and trunc(FTQ_EXPRY_DT) = :c_expry_dt
      and FTQ_OPT_TYP         = :c_opt_typ
      and FTQ_STRK_PRC        = :l_strk_prc;
  
     if (SQLCODE != 0)
     {
      fn_errlog(c_ServiceName, "S31055", SQLMSG, c_errmsg);
      tpfree((char *) ptr_fml_Obuf);
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
     } 

    /********************************* To be removed since scrapped ****************************

     *** FNO Pulse Data ***

     sprintf(c_undrlyng_tmp,"#%s%c",c_undrlyng,'%');
     fn_userlog(c_ServiceName,"underlyn Temp for FNO Pulse is :%s:",c_undrlyng_tmp);
     rtrim(c_undrlyng_tmp);

     EXEC SQL
     select count(1)
     into l_no_of_pulse
     from FPD_FNO_PULSE_DATA
     where FPD_TITLE like :c_undrlyng_tmp;
    
     if (SQLCODE != 0)
     {
      fn_errlog(c_ServiceName, "S31060", SQLMSG, c_errmsg);
      tpfree((char *) ptr_fml_Obuf);
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
     }
     
     
     EXEC SQL 
     DECLARE cur_pulse_fno CURSOR FOR
     select FPD_TITLE
     from FPD_FNO_PULSE_DATA
     where FPD_TITLE like :c_undrlyng_tmp;
   
     EXEC SQL OPEN cur_pulse_fno;

     if (SQLCODE != 0)
     {
      fn_errlog(c_ServiceName, "S31065", SQLMSG, c_errmsg);
      tpfree((char *) ptr_fml_Obuf);
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
     } 
     
     fn_userlog(c_ServiceName,"No.of pulse fectcd for :%s: is :%ld:",c_undrlyng,l_no_of_pulse);
      
     l_bufferlength = ( l_no_of_pulse * sizeof( c_pulse_data )) +
                      sizeof( d_pcr_oi ) +
                      sizeof( d_crrnt_day_oi ) +
                      sizeof( d_prvs_day_oi ) +
                      sizeof( d_fresh_oi ); 
     fn_userlog(c_ServiceName,"Total buffer Length Required is :%ld:",l_bufferlength); 

     while (1)
     {
       MEMSET(c_pulse_data);

       EXEC SQL
       FETCH cur_pulse_fno
       into :c_pulse_data;	
       
       if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
       {
        fn_errlog(c_ServiceName, "S31070", SQLMSG, c_errmsg);
        tpfree((char *) ptr_fml_Obuf);
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0);
        EXEC SQL CLOSE cur_pulse_fno;
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
       }

       if( SQLCODE == NO_DATA_FOUND )
       {
        fn_userlog( c_ServiceName, "FNO Pulse Over");
        EXEC SQL CLOSE cur_pulse_fno;
        break;
       }

       rtrim(c_pulse_data); 

       fn_userlog(c_ServiceName,"pulse fetched is [%s]",c_pulse_data);

       if(Fneeded32(1,l_bufferlength) > Funused32(ptr_fml_Obuf))
       {
        i_counter++;
        ptr_fml_Obuf=(FBFR32 *)tprealloc((char *)ptr_fml_Obuf,i_counter*l_bufferlength);

        if(ptr_fml_Obuf == NULL)
        {
         fn_errlog(c_ServiceName, "S31075", SQLMSG, c_errmsg); 
         Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0); 
         tpfree((char *)ptr_fml_Obuf);
         EXEC SQL CLOSE cur_pulse_fno; 
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0); 
        }
       }
      
       i_err[0]  = Fadd32(ptr_fml_Obuf,FFO_UND_PRC_TM, (char *)c_pulse_data,0);
       i_ferr[0] = Ferror32; 
       
       if(i_err[0] == -1)
       {
        fn_errlog( c_ServiceName, "S31080",FMLMSG,c_errmsg);
        fn_userlog(c_ServiceName,"Error in fadd in case of view site  ");
        fn_userlog(c_ServiceName,"Error in Fget at [%d],[%s]", i,Fstrerror32( i_ferr[i]));
        tpfree((char *)ptr_fml_Obuf);
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
       } 
       
     }  ** while ends **
    
    **********************************************************************************************/

     i_err[0]  = Fadd32(ptr_fml_Obuf,FFO_U_MM_SPRD_PL, (char *)&d_pcr_oi,0);
     i_ferr[0] = Ferror32;
     i_err[1]  = Fadd32(ptr_fml_Obuf,FFO_C_ORG_OPN_VAL, (char *)&d_crrnt_day_oi,0);
     i_ferr[1] = Ferror32;
     i_err[2]  = Fadd32(ptr_fml_Obuf,FFO_C_MTM_OPN_VAL, (char *)&d_prvs_day_oi,0);
     i_ferr[2] = Ferror32;
     i_err[3]  = Fadd32(ptr_fml_Obuf,FFO_C_ORDR_MRGN, (char *)&d_fresh_oi,0);
     i_ferr[3] = Ferror32;

     for ( i = 0; i < 4; i++)
     {
      if(i_err[i] == -1)
      {
        fn_errlog( c_ServiceName, "S31085",FMLMSG,c_errmsg);
        fn_userlog(c_ServiceName,"Error in fadd in case of view site  ");
        fn_userlog(c_ServiceName,"Error in Fget at [%d],[%s]", i,Fstrerror32( i_ferr[i]));
        tpfree((char *)ptr_fml_Obuf);
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
       }
     }
  
     fn_userlog(c_ServiceName,"PCR OI is :%lf:",d_pcr_oi);
     fn_userlog(c_ServiceName,"Current Day OI is :%lf:",d_crrnt_day_oi);
     fn_userlog(c_ServiceName,"Previous day OI is :%lf:",d_prvs_day_oi);
     fn_userlog(c_ServiceName,"fresh OI is :%lf:",d_fresh_oi);
      
  }
  else 
  {
   strcpy(c_errmsg, "Invalid Prdct Type" );
   tpfree((char *) ptr_fml_Obuf);
   fn_userlog ( c_ServiceName, "ERROR :%s:", c_errmsg );
   Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0);
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }
 
  tpreturn(TPSUCCESS, SUCC_BFR, (char *)ptr_fml_Obuf, 0 , 0);
}
