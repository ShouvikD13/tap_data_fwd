/******************************************************************************/
/*	Program	    			:	SFO_CNTFUT_PSTN                                       */
/*                                                                            */
/*  Input             : FFO_OPERATION_TYP                                     */
/*                      FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_ROUT_CRT                                          */
/*                                                                            */
/*  Output            : 																										  */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_CNTRCT_TAG                                        */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_C_OPNPSTN_FLW                                     */
/*                      FFO_C_OPNPSTN_QTY                                     */
/*                      FFO_CVR_QTY                                           */
/*                      FFO_C_ORG_OPN_VAL                                     */
/*                      FFO_C_MTM_OPN_VAL                                     */
/*                      FFO_PRCNTG_CHNG          ver 1.1  										*/ 
/*											FFO_U_IMTM_SPRD_PL			 ver 1.3                   		*/
/*                      FFO_BAL_AMT              Ver 1.8                      */ 
/*                      FFO_INDX_INDCTR          Ver 4.6                      */
/*                                                                            */
/*  Description       : This service retrieves the values of the entire       */
/*                      contract futures position book given different input  */
/*                      parameters based on two different operation types:    */
/*                      U - Underlying as Input	                              */
/*                      W - Without Underlying                                */
/*                      J - For Joint Square Off                              */
/*                                                                            */
/*  Log               : 1.0   03-Dec-2001   S.Balamurugan											*/
/*  Log               : 1.1   20-Jun-2003   Mohit Mehrotra										*/
/*  Log 							: 1.2   02-Jan-2007   Shailesh                          */ 
/*	Log								:	1.3		27-Feb-2007		Vikash|Ranjit  										*/
/*	Log								:	1.4		20-Dec-2007		Sushil Sharma											*/
/*	Log								: 1.5		20-Mar-2008   Kunal Jadav												*/
/*  Log               : 1.6   28-Jun-2008   Rohit															*/
/*  Log               : 1.7   19-Aug-2008   Shailesh													*/
/*	Log								:	1.8		21-Aug-2008		Wipro Infotech Ltd. 	            */
/*	Log								: 1.9	  29-Dec-2008		Wipro Infotech Ltd. CRCSN24290		*/
/*  Log               : 1.10  27-Jan-2010   Nitin -SILVERLIGHT                */
/*  Log               : 2.0   24-Mar-2011   Shamili	Dalvi			  							*/
/*  Log               : 2.1   24-Nov-2011		Shamili	Dalvi			  							*/
/*  Log               : 2.2   09-Apr-2012		Shamili	Dalvi			  							*/
/*  Log               : 2.3   23-Jan-2012		Navina D					  							*/
/*	Log								:	2.4		12-Oct-2012		Sandeep Patil											*/
/*  Log               : 2.5   27-May-2013   Navina D.                         */
/*	Log								:	2.6		25-Jun-2013		Sandeep Patil											*/
/*  Log               : 2.7   11-Sep-2013   Bhushan Sonwane                   */
/*	Log								:	2.8		25-Oct-2013		Samip M														*/
/*  Log               : 2.9   28-Apr-2014   Sachin Birje                      */
/*  Log               : 3.1   20-Feb-2015   Anand Dhopte                      */
/*  Log               : 3.2   08-May-2015   Anand Dhopte                      */
/*  Log               : 3.3   29-Jun-2015   Anand Dhopte                      */
/*  Log               : 3.5   26-Oct-2015   Anand Dhopte                      */
/*  Log               : 3.6   04-Jul-2016   Tanmay Warkhade										*/
/*  Log               : 3.7   19-Jul-2016   Bhupendra Malik                   */
/*  Log               : 3.8   21-Mar-2017   Anand Dhopte                      */
/*	Log								: 3.9		11-MAY-2017		Bhushan Harekar										*/
/*  Log 							: 4.0   03-Oct-2017   Afzal K.													*/
/*  Log								: 4.1   23-Jan-2017   Afzal K.													*/
/*  Log               : 4.2   16-Aug-2018   Suchita D.                        */
/*  Log               : 4.3   05-Mar-2019   Afzal K.                          */
/*  Log               : 4.4   06-Feb-2018   Mrinal Kishore                    */
/*  Log               : 4.5   30-Jan-2020   Mrinal Kishore                    */
/*  Log               : 4.6   11-May-2021   Abhinav Kumbhar                   */
/*  Log               : 4.7   25-Oct-2021   Mahesh Regulwar                   */
 /******************************************************************************/
/*  1.0     -  New Release                                                    */
/*  1.1     -  Market Wide Position changes                                   */
/*  1.2     -  DT wrapper changes                                             */
/*  1.3     -  DL revamp Changes for hardcoding Exchange Code, Option Type    */
/*             and Strike Price                                               */
/*             Now sending the buy total qty and sell tot qty in Group total  */
/*	1.4			-	 IBM Migration																									*/
/*	1.5			-  FP Change																											*/
/*  1.6     - Fprint32 comment                                                */
/*  1.7     - Cancellation/Squareoff CR																				*/
/*	1.8			-	 Available Margin changes by WIPRO INFOTECH											*/
/*	1.9		  -	 Available Margin Future Plus changes by WIPRO INFOTECH		      */
/*  1.10    -  Silverlight Changes for Joint Square off condition             */
/*  2.0     -  Advisor's Arena			     																			*/ 
/*	2.1			-	 Minimum Margin display																				  */
/*  2.2     -  Correction in Min Margin display in case of order margin       */	
/*	2.3			-	 BSE ORS changes																							  */
/*	2.4			-	 Roll Over Changes																							*/
/*  2.5     -  SPAN FuturePLUS handling.                                      */
/*	2.6			-	 Joint Square Off & Add Margin Flag Introduction								*/
/*  2.7     -  Added Open Qty Check For Rollover Flag                         */
/*	2.8			-	 Bug fix for Advisor Arena module																*/
/*	2.9			-	 Trigger price disply on trading screen(Auto MTM)								*/
/*  3.1     -  Bug fix for DBC User                                           */
/*  3.2     -  Debug level changes                                            */
/*  3.3     -  FCM-FTQ Merger Changes                                         */
/*  3.5     -  Session Check Introduced                                       */
/*  3.6     -  Log Maintainance																								*/
/*  3.7     -  Log Maintainance DEBUG_MSG_LVL changes 0 to 1                  */
/*  3.8     -  Square Off at Market changes for other front end               */ 
/*	3.9			-	 Log Maintainance																								*/
/*	4.0			-	 Introduced Cancel All Flag For DL.Net													*/
/*  4.1     -  Introduced "Sqaure Off All Positions At Market" flag for DL.NET*/
/*  4.2     -  Physical settlement of stock derivative PHASE 2                */
/*  4.3     -  Advisor Trading Screen Changes                                 */
/*  4.4     -  Rollover with spread changes                                   */
/*  4.5     -  Rollover with spread Bug Fix                            				*/
/*  4.6     - Delivery and non-Delivery option CR_ISEC04_132410               */ 
/*  4.7     - Average Price for PNL (Mahesh Regulwar 21_oct-2021)             */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_fml_def.h>			
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fml_def.h>						/*  Ver 2.0 : Added		*/
#include <fn_log.h>             /*  Ver 1.4 : Added   */
#include <fn_session.h>         /*  Ver 1.4 : Added   */
#include <fn_read_debug_lvl.h>  /*  Ver 1.4 : Added   */

/****Added for ver 1.8***/
#define FUNCTION
#define DATE_LEN	12
#define SUCCESS	0
#define FAIL	-1

#define MEMSET(A) memset(&A,'\0',sizeof(A))
/*************************/

/*********************************************************************
*********Change done by WIPRO LTD for Available Margin CR*************  
****************************Version 1.8*******************************
*********************************************************************/

/*** int fn_get_mm_and_smm(char *,char *,char *,char ,double *,double *,char); Commented for Ver 2.3 ***/
int fn_get_mm_and_smm(char *,char *,char *,char ,double *,double *,char,char *); /*** Ver 2.3 ***/
/*To fetch minimum margin and spread minimum margin percentages
  for a  particular Match a/c ,Underlying and contract tag.	*/

double fn_cal_min_mrgn( char *, char *, char *, char, char *, char, char, char, long, double,long);
/* This function returns the minimum margin amount at group level for a particular match a/c */

int fn_cal_mtm_loss(char *,char *,char *,char ,char *,char ,char ,char,double * );
/* This function returns the M.T.M Loss at group level for a particular match a/c */

void SFO_CNTFUT_PSTN( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;					
	FBFR32 *ptr_fml_Obuf;

	char c_ServiceName[33];
  char c_errmsg[256];
	char c_option_type;
	char c_spl_flg;
	char c_strnull[2];
	char c_null = '-';
	char c_err_msg[256]; /**Ver 1.2 **/ 
	char c_prev_mt_acnt[11]; /*Ver 1.2**/
  char c_opt_typ = '*';     /* ver 1.3 */ 
	char c_spn_flg = '\0';	/*** Ver 2.5 ***/
	char c_jointsqroff_flg = 'N';			/***	Ver	2.6	***/
	char c_addmrgn_flg = 'N';					/***	Ver	2.6	***/
  char c_mtm_alrt_flg='N';         /***  Ver 2.9 ***/
  char c_sprd_trgprc_flg='Y';         /*** Ver 2.9 ***/
  char c_sqoff_at_market_flag = 'N';  /*** Ver 3.8 ***/
	char c_cancel_all_flag = 'N' ;      /*** Ver 4.0 ***/
	char c_indx_indctr = '\0';          /*** Ver 4.6 ***/
	char c_all_flg = 'N';          			/*** Ver 4.6 ***/
  char c_dlvry_enbl_flg = '\0';  			/*** Ver 4.6 ***/
  char c_dlvry_mode_flg = '\0';  			/*** Ver 4.6 ***/
	varchar c_flm_expr_dt[12];     			/*** Ver 4.6 ***/
  char c_dlvry_sttlmnt_typ = '\0';  	/*** Ver 4.6 ***/
  double d_dlvry_oblgamt_blckd = 0.0;   	/*** Ver 4.6 ***/
  long l_dlvry_qty_blckd = 0;       	/*** Ver 4.6 ***/	
  double d_avg_prcs = 0.0;             /*** Ver 4.7 ***/ 

	double d_null = 0.0;
	double d_sprd_mrgn	=	0.0;			/***	Ver	2.6	***/
  double d_trg_price=0.0;     /***  Ver 2.9 ***/
  double d_am_mm_diff_prcnt=0.0; /***  Ver 2.9 ***/
  double d_new_mm_mrgn=0.0;   /***  Ver 2.9 ***/

  long l_null = 0;
	long l_prcnt; /* 1.1 */
	long l_size_ocpd; /*Ver 1.2*/
	long ret_val=0;   /** Ver 1.2**/
  long l_strike_prc = 0;  /* ver 1.3 */

  int  i_returncode;
  /*int  i_err[5];
  int  i_ferr[5]; */			/*Ver 2.0*/
  int  i_err[7];
  int  i_ferr[7];   			/*Ver 2.0*/	/****change from 6 to 7 in ver 4.3****/
  int  i_cnt;
  int  i_counter = 1;
  int  i_cntr = 0;
	int  i_size_ffp; 				/*Ver 1.2*/
	int  i_size_fup; 				/*Ver 1.2*/
	int  rec_cnt=0;     /*Ver  1.2**/
	int  i_count;       /*Ver 1.2*/
	int  i_joint_cnt = 0;  /***  Ver 1.10 ***/
  int  i_cntrct_cnt =0;  /***  Ver 2.9 ***/
  int  i=0;           /***  Ver 2.9 ***/
 
  long l_tot_buy_qty = 0;  /** ver 1.3 **/
  long l_tot_sell_qty = 0; /** ver 1.3 **/
  long li_sssn_id = 0;                /** Ver 3.5 **/

	/****Added for ver 1.8****/ 
	int	    i_mtm_loss_stts=0;
	char    c_prev_exrc_typ;
	char    c_prev_ctgry_indstk;
  char    c_prev_prdct_typ;
  long	  l_und_sell_opn_qty=0;
  long	  l_und_buy_opn_qty=0;
  long    l_sprd_qty=0;
	double	d_mtm_loss=0;
	double	d_avilable_amount=0;
  double  d_curr_cnt_opn_val=0;
  double  d_curr_uopn_val =0;
	/****Added for ver 1.8****/

  int i_sqroffmkt_flg_cnt = 0;     /**** Ver 4.1 ****/
  char c_sqr_off_all_at_mkt = 'N';   /*** Ver 4.1 ****/
  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_usr_prfl st_usr_prfl;
		sql_cursor	sys_cursor;
		char c_opr_typ;
		char c_mtch_accnt_no[11];
		char c_xchng_cd[4];
		char c_undrlyng[7];
    char c_uprdct_typ;
    char c_uindstk;
    char c_uopnpstn_flw;
    double d_uopnpstn_qty;
    double d_utrd_mrgn;
    double d_ordr_mrgn;
    double d_umin_trd_mrgn;
		double d_base_prc;
		char c_prd_typ;
		char c_ctgry_indstk;
		char c_prev_undrlyng[7];
		/*char c_expry_dt[12]; */
		varchar c_expry_dt[12]; 
		char c_exrc_typ;
	  char c_cntrct_tag;
	  char c_prev_tag;
		char c_opnpstn_flw;
		char c_rqst_typ='N';					/** Ver 2.0 **/
		char c_rollover_flag;			/***	Ver	2.4	***/
		char c_rollovr_flg = '-'; /***  Ver 2.4 ***/

		/*** Ver 4.4 starts ***/
		char c_sprd_roll_flag = '\0';     
    char c_sprd_roll_flg  = '-';    
		char c_rsprd_pos_flg = 'N';		
		char c_r_opnpstn_flw = '\0';
		char c_r_cntrct_tag = '\0';
		long l_r_ltp = 0;
		long l_fod_qty=0;   
		long l_buy_qty=0;   
		long l_sell_qty=0;  
		double d_rumin_trd_mrgn = 0.0;
		double d_sroll_diff_amt = 0.0;
		double d_sroll_lss_amt = 0.0;
		double d_rutrd_mrgn = 0.0;    
		double d_rordr_mrgn = 0.0;
		double d_rordr_loss_amt = 0.0;
		varchar c_r_exp_dt[12] = {'\0'};		
		/*** Ver 4.4 Ends ***/
		long li_r_bo_qty = 0;		/*** Ver 4.5 ***/
		long li_r_so_qty = 0;		/*** Ver 4.5 ***/

		long l_opnpstn_qty;
		long l_cvr_qty;
		long l_uopnpstn_qty;
		double d_mtm_opn_val;
		long l_lst_trdd_prc;
		long l_lot_size;
		long li_temp; 
		long li_bo_qty;
		long li_so_qty;
    char c_settlement_indicator = '-'; /** ver 4.2 **/
  EXEC SQL END DECLARE SECTION;

	struct vw_err_msg st_err_msg;

	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.4 : Added   */
  strcpy( c_strnull,"-");

	/*Fprint32(ptr_fml_Ibuf); */  /* 28-Jun-2008	Rohit*/

	/*Fprint32(ptr_fml_Ibuf); */ /* 28-Jun-2008  Rohit*/
	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_usr_prfl,
                           "vw_usr_prfl" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	strcpy ( ( char * )c_mtch_accnt_no, st_usr_prfl.c_cln_mtch_accnt );
	strcpy ( ( char * )c_expry_dt.arr, "\0");

/** if( DEBUG_MSG_LVL_3 ) {    Commented in ver 3.6 **        Ver 1.4 : Debug level Change  */
/**	if( DEBUG_MSG_LVL_0 )  Commented in Ver 3.7 **/
	if( DEBUG_MSG_LVL_1)  /*** Added in Ver 3.7 ***/ 
	{       
		fn_userlog( c_ServiceName,"c_mtch_accnt_no        :%s:", c_mtch_accnt_no );
	}
	
 	/********Ver 3.9 Starts**********/
	
	if( DEBUG_MSG_LVL_0 ) {
    fn_userlog( c_ServiceName,"USRPSTN MTCH :%s:user_id:%s:", c_mtch_accnt_no,st_usr_prfl.c_user_id);
  }	
	/********Ver 3.9 Ends**********/

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

/*		i_returncode = fn_chk_sssn( c_ServiceName, 
																&st_usr_prfl,
                                &st_err_msg ) ;

    if ( i_returncode == -1 )
    {
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }*/

	i_err[0] = Fget32( ptr_fml_Ibuf, FFO_OPERATION_TYP, 0,
                                   (char *)&c_opr_typ, 0 );
  i_ferr [0] = Ferror32;

	if ( i_err[0] == -1 )
	{
		fn_errlog( c_ServiceName, "S31010", FMLMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.4 : Debug level Change  */
	fn_userlog( c_ServiceName,"c_opr_typ   :%c:", c_opr_typ );
}

	i_err[1] = Fget32( ptr_fml_Ibuf, FFO_XCHNG_CD, 0,
                                   (char *)c_xchng_cd, 0 );
  i_ferr [1] = Ferror32;

	i_err[2] = Fget32( ptr_fml_Ibuf, FFO_UNDRLYNG, 0,
                                   (char *)c_undrlyng, 0 );
  i_ferr [2] = Ferror32;

	i_err[3] = Fget32( ptr_fml_Ibuf, FFO_CNTRCT_TAG, 0,
                                   (char *)&c_cntrct_tag, 0 );
  i_ferr [3] = Ferror32;


	for ( i_cnt = 1;  i_cnt <= 3; i_cnt++ )
	{
		if ( (i_err[i_cnt] == -1) && (i_ferr[i_cnt] != FNOTPRES ))
		{
/*    	fn_userlog(c_ServiceName,"i_cnt[%ld]",i_cnt);  ver 1.3 commented */
			fn_errlog( c_ServiceName, "S31015", Fstrerror32( i_ferr[i_cnt] ), 
								 c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		else if ( (i_err[i_cnt] == -1) && (i_ferr[i_cnt] == FNOTPRES))
		{
/*       fn_userlog(c_ServiceName,"i_cnt[%ld]",i_cnt);  ver 1.3 commented */
				if ((( c_opr_typ == WITH_UNDERLYING ) && ( i_cnt == 2)) ||
				   (( c_opr_typ == WITH_UNDERLYING_TAG ) && ( i_cnt == 3)))
				{
						fn_errlog( c_ServiceName, "S31020", Fstrerror32( i_ferr[i_cnt] ), 
											 c_errmsg  );
      			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
		}
	}

	/*Ver 1.5 Starts */
	i_err[4] = Fget32( ptr_fml_Ibuf, FFO_PRDCT_TYP, 0,	
																	 (char *)&c_prd_typ, 0);
	i_ferr[4] = Ferror32;

	if ( i_err[4] == -1 )
	{
		if( i_ferr[4] != FNOTPRES )		/** Ver 1.5 added for DL customers facing RNA in LIVE **/
		{
			fn_errlog( c_ServiceName, "S31025", FMLMSG, c_errmsg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		else
			c_prd_typ = FUTURES;
	}

	/* Ver 1.5 Ends */

	/*********************  Ver 2.0 Starts *****************/

	i_err[5] =Fget32(ptr_fml_Ibuf,FML_RQST_TYP,0, (char *)&c_rqst_typ,0);
  i_ferr[5] = Ferror32;

	if ( i_err[5] == -1 )
	{
		if( DEBUG_MSG_LVL_5 ) {
		fn_userlog(c_ServiceName,"Normal User ");
		}
		c_rqst_typ = 'N';
	}

	/*********************  Ver 2.0 Ends *****************/

  /***Ver 4.3 starts****/

   i_err[6] = Fget32( ptr_fml_Ibuf, FFO_CLSR_TYP, 0,(char *)&c_spn_flg, 0 );
   i_ferr [6] = Ferror32;

     if ( i_err[6]  == FNOTPRES && c_rqst_typ == 'Y' )
    {
     fn_userlog(c_ServiceName, " AFZAL ");
     fn_errlog( c_ServiceName, "S31030", FMLMSG, c_errmsg  );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

   /****Ver 4.3 ends *****/

	if( DEBUG_MSG_LVL_0 ) 		/****change 5 to 0 for ver 4.3 testing****/
	{
    fn_userlog( c_ServiceName,"c_spn_flg:%c:", c_spn_flg);  /****Ver 4.3 testing***/
		fn_userlog( c_ServiceName,"c_prd_typ:%c:", c_prd_typ);
	}

  /***  Ver 3.5 Starts  ***/

  li_sssn_id  = st_usr_prfl.l_session_id  ;

  if(c_rqst_typ == 'Y')
  {
    if( DEBUG_MSG_LVL_3 )  
    {
      fn_userlog(c_ServiceName,"User is ATS customer");
    }

    li_sssn_id = 0;
  }
  else if(c_rqst_typ == 'N')
  {
    if( DEBUG_MSG_LVL_3 )  
    {
      fn_userlog(c_ServiceName,"User is not ATS customer");
    }
  }
  else
  {
    /** if( DEBUG_MSG_LVL_3 )   ** Ver 3.6 **/
   /** if( DEBUG_MSG_LVL_0 )     ** Ver 3.6 **   ** Commented in Ver 3.7 **/
		if( DEBUG_MSG_LVL_1)  /*** Added in Ver 3.7 ***/
    {
      fn_userlog(c_ServiceName,"Advisor's Flag is invalid :%c:", c_rqst_typ);
    }
    strcpy(c_errmsg, "Advisor's Flag is invalid");
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if( li_sssn_id !=0 )
  {
    i_returncode = fn_chk_sssn( c_ServiceName,
                                &st_usr_prfl,
                                &st_err_msg ) ;

    if ( i_returncode == -1 )
    {
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

  }

  /***  Ver 3.5 Ends ***/

  /** Ver 2.9 Starts Here **/
  EXEC SQL
    SELECT nvl(FSP_AM_MM_DIFF_PRCT,0)
      INTO :d_am_mm_diff_prcnt
      FROM FSP_FO_SYSTM_PRMTR;
  if( SQLCODE != 0 )
  {
   fn_errlog( c_ServiceName, "S31035", SQLMSG, c_errmsg );
   Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
   tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  } 
  /** Ver 2.9 Ends here **/

	/**************V 1.2 Starts  *************/
  /******* tpbegin ************/
  if(tpbegin( TRAN_TIMEOUT, 0 ) == -1)
  {
    fn_errlog( c_ServiceName, "S31040", SQLMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


	EXEC SQL ALLOCATE :sys_cursor;


  if( strcmp( c_mtch_accnt_no, "*" ) == 0 )
  {
    if( st_usr_prfl.c_user_id[0] == BPID )
    {
      /** insert into fdm all acounts for this bpid **/
      EXEC SQL
      INSERT INTO
      FDM_DT_MTCH
      SELECT CLM_MTCH_ACCNT FROM CLM_CLNT_MSTR
      WHERE CLM_BP_ID = :st_usr_prfl.c_user_id;
      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31045", SQLMSG, c_errmsg );
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpcommit(0);
        tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
      }
    }
    else if( c_rqst_typ == 'Y' )					/** Ver 2.0 **/
		{
			
			if( DEBUG_MSG_LVL_5 ) {
			fn_userlog(c_ServiceName,"st_usr_prfl.c_user_id:%s",st_usr_prfl.c_user_id);
			}
   /******* Comment starts ver 4.3 ******
				*** Query modified for Ver 2.8 ***
				EXEC SQL
				INSERT INTO 
				FDM_DT_MTCH
				SELECT DISTINCT ACM_MTCH_ACCNT FROM ACM_ADV_CLNT_MAP
				WHERE ACM_ADVISOR_ID = :st_usr_prfl.c_user_id
				AND      NVL(ACM_ACTV_FLG,'A') = 'A';
   *********Comment ends ver 4.3 ***/

   /*****Ver 4.3 Starts****/

   EXEC SQL
   INSERT INTO
   FDM_DT_MTCH
   SELECT DISTINCT ACM_MTCH_ACCNT FROM ACM_ADV_CLNT_MAP,CLM_CLNT_MSTR
   WHERE ACM_MTCH_ACCNT = CLM_MTCH_ACCNT
    AND ACM_ADVISOR_ID = :st_usr_prfl.c_user_id
    AND ACM_ACTV_FLG = 'A'
    AND DECODE(:c_xchng_cd,'NFO',NVL(CLM_SPAN_ALLWD,'N'),'BFO',NVL(CLM_BSESPAN_ALLWD,'N')) = DECODE(:c_spn_flg,'Y','Y','N');

  /*****Ver 4.3 Ends*****/

				if( SQLCODE != 0 )
      	{
        		fn_errlog( c_ServiceName, "S31050", SQLMSG, c_errmsg );
        		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        		tpcommit(0);
        		tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
      	}

		}
		else
    {


      EXEC SQL
      INSERT  INTO  FDM_DT_MTCH
      SELECT  UAC_CLM_MTCH_ACCNT FROM uac_usr_accnts
      WHERE   UAC_USR_ID = :st_usr_prfl.c_user_id ;
      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31055", SQLMSG, c_errmsg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpcommit(0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    EXEC SQL
    SELECT  count(*)
    INTO :i_count
    FROM    FDM_DT_MTCH ;
    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31060", SQLMSG, c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  
  	if( DEBUG_MSG_LVL_3 ) /**  Ver 1.4 : Debug level Change  */
		{
    	fn_userlog(c_ServiceName,"Inside All mtch accnnt's");
    }


    if ( c_opr_typ == WITHOUT_UNDERLYING )  /*****Ver 4.3*****/
     {

		  EXEC SQL  EXECUTE
        BEGIN
          OPEN  :sys_cursor FOR
              SELECT  ffp_clm_mtch_accnt,
              				ffp_prdct_typ,
                      ffp_indstk,
                      ffp_undrlyng,
                      to_char( ffp_expry_dt, 'DD-Mon-YYYY' ),
                      ffp_exer_typ,
                      ffp_cntrct_tag,
                      ffp_opnpstn_flw,
                      abs(ffp_opnpstn_qty),
                      ffp_mtm_opn_val,
											decode(ffp_opnpstn_flw,'S',greatest(abs(ffp_ibuy_qty),abs(ffp_exbuy_qty)) ,
                                    'B',greatest( abs(ffp_isell_qty), abs(ffp_exsell_qty)),0),		/**Ver 1.7 **/
                      /**commented for Ver 1.7 decode(ffp_opnpstn_flw,'S',ffp_ibuy_qty ,
                                    'B',abs(ffp_isell_qty ),0),	**/
                      ffp_ibuy_qty,
                      ffp_isell_qty,
                      nvl(ffp_trg_prc,0),    /*** Ver 2.9 **/
											NVL(FFP_DLVRY_MODE_FLAG,'N'),      /*** Ver 4.6 ***/
                  		NVL(FFP_DLVRY_OBLGAMT_BLCKD,0),    /*** Ver 4.6 ***/
                  		NVL(FFP_DLVRY_QTY_BLCKD,0),         /*** Ver 4.6 ***/
                  		NVL(FFP_AVG_PRC,0)         /*** Ver 4.7 ***/
                FROM  ffp_fo_futures_pstn,FDM_DT_MTCH
          /**   WHERE    ffp_clm_mtch_accnt = :c_mtch_accnt_no **/
             WHERE    ffp_clm_mtch_accnt = FDM_CLM_MTCH_ACCNT 
             AND      ffp_xchng_cd = :c_xchng_cd
             AND      (    ffp_opnpstn_qty != 0
                        OR ffp_ibuy_qty    != 0
                        OR ffp_isell_qty   != 0 )
						 AND			ffp_prdct_typ = :c_prd_typ		/* Ver 1.5 */
             ORDER BY ffp_clm_mtch_accnt, 
											ffp_undrlyng,
                      ffp_cntrct_tag,
                      ffp_expry_dt;
        END;
      END-EXEC;
			}
      /*****4.3 starts****/
    else if (  c_opr_typ == WITH_UNDERLYING )
        {
          EXEC SQL  EXECUTE
          BEGIN
          OPEN  :sys_cursor FOR
              SELECT  ffp_clm_mtch_accnt,
                      ffp_prdct_typ,
                      ffp_indstk,
                      ffp_undrlyng,
                      to_char( ffp_expry_dt, 'DD-Mon-YYYY' ),
                      ffp_exer_typ,
                      ffp_cntrct_tag,
                      ffp_opnpstn_flw,
                      abs(ffp_opnpstn_qty),
                      ffp_mtm_opn_val,
                      decode(ffp_opnpstn_flw,'S',greatest(abs(ffp_ibuy_qty),abs(ffp_exbuy_qty)) ,'B',greatest(abs(ffp_isell_qty), abs(ffp_exsell_qty)),0),
                      ffp_ibuy_qty,
                      ffp_isell_qty,
                      nvl(ffp_trg_prc,0),
                      NVL(FFP_DLVRY_MODE_FLAG,'N'),      /*** Ver 4.6 ***/
                      NVL(FFP_DLVRY_OBLGAMT_BLCKD,0),    /*** Ver 4.6 ***/
                      NVL(FFP_DLVRY_QTY_BLCKD,0),         /*** Ver 4.6 ***/
                      NVL(FFP_AVG_PRC,0)      /** Ver 4.7 **/
             FROM     ffp_fo_futures_pstn,FDM_DT_MTCH
             WHERE    ffp_clm_mtch_accnt = FDM_CLM_MTCH_ACCNT
             AND      ffp_xchng_cd = :c_xchng_cd
             AND      (    ffp_opnpstn_qty != 0
                        OR ffp_ibuy_qty    != 0
                        OR ffp_isell_qty   != 0 )
             AND      ffp_prdct_typ = :c_prd_typ
             AND      ffp_undrlyng    =  :c_undrlyng
             ORDER BY ffp_clm_mtch_accnt,
                      ffp_undrlyng,
                      ffp_cntrct_tag,
                      ffp_expry_dt;
          END;
        END-EXEC;
         }

    /*****Ver 4.3 ends***/

		}/*************Ver 1.2 condition for multiple match acocunt ends here *********************/
		 else
		{
			if ( c_opr_typ == WITH_UNDERLYING  &&  c_rqst_typ == 'N')
			{
				if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.4 : Debug level Change  */
					fn_userlog( c_ServiceName,"c_undrlyng    :%s:", c_undrlyng );
					fn_userlog( c_ServiceName," c_opr_typ == WITH_UNDERLYING  &&  c_rqst_typ == 'N'");
					}

			EXEC SQL	EXECUTE
					BEGIN
						OPEN	:sys_cursor	FOR
              	SELECT  ffp_clm_mtch_accnt,												/**Ver 1.2 **/
												ffp_prdct_typ,
												ffp_indstk,
												ffp_undrlyng,
												to_char( ffp_expry_dt, 'DD-Mon-YYYY' ),
												ffp_exer_typ,
												ffp_cntrct_tag,
												ffp_opnpstn_flw,
												abs(ffp_opnpstn_qty),
												ffp_mtm_opn_val,
												decode(ffp_opnpstn_flw,'S',greatest(abs(ffp_ibuy_qty),abs(ffp_exbuy_qty)) ,
                                    'B',greatest(abs(ffp_isell_qty),abs(ffp_exsell_qty) ),0),		/**Ver 1.7 **/
                      /**commented for Ver 1.7 decode(ffp_opnpstn_flw,'S',ffp_ibuy_qty ,
                                    'B',abs(ffp_isell_qty ),0),**/
												ffp_ibuy_qty,
												ffp_isell_qty,
                        nvl(ffp_trg_prc,0),    /*** Ver 2.9 **/
                      	NVL(FFP_DLVRY_MODE_FLAG,'N'),      /*** Ver 4.6 ***/
                      	NVL(FFP_DLVRY_OBLGAMT_BLCKD,0),    /*** Ver 4.6 ***/
                      	NVL(FFP_DLVRY_QTY_BLCKD,0),         /*** Ver 4.6 ***/
                        NVL(FFP_AVG_PRC,0)      /** Ver 4.7 **/
							 FROM     ffp_fo_futures_pstn
							 WHERE	  ffp_clm_mtch_accnt = :c_mtch_accnt_no
							 AND      ffp_xchng_cd = :c_xchng_cd
							 AND      ffp_undrlyng    =  :c_undrlyng
             AND      (    ffp_opnpstn_qty != 0
                        OR ffp_ibuy_qty    != 0 
                        OR ffp_isell_qty   != 0 )
						 AND			ffp_prdct_typ = :c_prd_typ													/* Ver 1.5 */
             ORDER BY ffp_clm_mtch_accnt,																	/**Ver 1.2 **/ 
											ffp_cntrct_tag,
                      ffp_expry_dt;
				END;
			END-EXEC;
		}
		else if ( c_opr_typ == WITH_UNDERLYING  && c_rqst_typ == 'Y' )			/** Ver 2.0 **/ 
		{

			if( DEBUG_MSG_LVL_3 ) {
			fn_userlog(c_ServiceName,"c_opr_typ == WITH_UNDERLYING  &&  c_rqst_typ == 'Y'");
			}

			EXEC SQL  EXECUTE
          BEGIN
            OPEN  :sys_cursor FOR
                SELECT  distinct ffp_clm_mtch_accnt,                       /*** distinct added Ver 2.8 ***/
                        ffp_prdct_typ,
                        ffp_indstk,
                        ffp_undrlyng,
                        to_char( ffp_expry_dt, 'DD-Mon-YYYY' ) ffp_expry_dt, /*** Alias added Ver 2.8 ***/
                        ffp_exer_typ,
                        ffp_cntrct_tag,
                        ffp_opnpstn_flw,
                        abs(ffp_opnpstn_qty),
                        ffp_mtm_opn_val,
                        decode(ffp_opnpstn_flw,'S',greatest(abs(ffp_ibuy_qty),abs(ffp_exbuy_qty)) ,
                                    'B',greatest(abs(ffp_isell_qty),abs(ffp_exsell_qty) ),0),   
                        ffp_ibuy_qty,
                        ffp_isell_qty,
                        nvl(ffp_trg_prc,0),    /*** Ver 2.9 ***/
                      	NVL(FFP_DLVRY_MODE_FLAG,'N'),      /*** Ver 4.6 ***/
                     	 	NVL(FFP_DLVRY_OBLGAMT_BLCKD,0),    /*** Ver 4.6 ***/
                      	NVL(FFP_DLVRY_QTY_BLCKD,0),         /*** Ver 4.6 ***/
                        NVL(FFP_AVG_PRC,0)      /** Ver 4.7 **/
               FROM     ffp_fo_futures_pstn,
												acm_adv_clnt_map	
							 WHERE    acm_mtch_accnt = ffp_clm_mtch_accnt 
							 AND      NVL(ACM_ACTV_FLG,'A') = 'A'										/*** Clause added for Ver 2.8 ***/
							 AND	    ffp_clm_mtch_accnt = :c_mtch_accnt_no
               AND      ffp_xchng_cd = :c_xchng_cd
               AND      ffp_undrlyng    =  :c_undrlyng
               AND      (    ffp_opnpstn_qty != 0
                        OR ffp_ibuy_qty    != 0
                        OR ffp_isell_qty   != 0 )
             AND      ffp_prdct_typ = :c_prd_typ                         
             ORDER BY ffp_clm_mtch_accnt,                                 
                      ffp_cntrct_tag,
                      ffp_expry_dt;
        END;
      END-EXEC;

		}	
		else if ( c_opr_typ == WITHOUT_UNDERLYING && c_rqst_typ == 'N' )
		{

				if( DEBUG_MSG_LVL_3 ) {
				fn_userlog(c_ServiceName,"c_opr_typ == WITHOUT_UNDERLYING &&  c_rqst_typ == 'N'");
				}

				EXEC SQL	EXECUTE
					BEGIN
						OPEN	:sys_cursor	FOR
              	SELECT  ffp_clm_mtch_accnt,																	/**Ver 1.2 **/
												ffp_prdct_typ,
												ffp_indstk,
												ffp_undrlyng,
												to_char( ffp_expry_dt, 'DD-Mon-YYYY' ),
												ffp_exer_typ,
												ffp_cntrct_tag,
												ffp_opnpstn_flw,
												abs(ffp_opnpstn_qty),
												ffp_mtm_opn_val,
												decode(ffp_opnpstn_flw,'S',greatest(abs(ffp_ibuy_qty),abs(ffp_exbuy_qty)) ,
                                    'B',greatest(abs(ffp_isell_qty),abs(ffp_exsell_qty) ),0),		/**Ver 1.7 **/
                      	/**commented for Ver 1.7 decode(ffp_opnpstn_flw,'S',ffp_ibuy_qty ,
                                    'B',abs(ffp_isell_qty ),0),**/
												ffp_ibuy_qty,
												ffp_isell_qty,
                        nvl(ffp_trg_prc,0),    /*** Ver 2.9 ***/
                      	NVL(FFP_DLVRY_MODE_FLAG,'N'),      /*** Ver 4.6 ***/
                      	NVL(FFP_DLVRY_OBLGAMT_BLCKD,0),    /*** Ver 4.6 ***/
                      	NVL(FFP_DLVRY_QTY_BLCKD,0),         /*** Ver 4.6 ***/
                        NVL(FFP_AVG_PRC,0)      /** Ver 4.7 **/
							 FROM     ffp_fo_futures_pstn
							 WHERE	  ffp_clm_mtch_accnt = :c_mtch_accnt_no
							 AND      ffp_xchng_cd = :c_xchng_cd
							 AND      (    ffp_opnpstn_qty != 0
													OR ffp_ibuy_qty    != 0 
													OR ffp_isell_qty   != 0 )
							 AND			ffp_prdct_typ = :c_prd_typ				/* Ver 1.5 */
             ORDER BY ffp_clm_mtch_accnt,																			/**Ver 1.2 **/ 
											ffp_undrlyng,
										  ffp_cntrct_tag,
                      ffp_expry_dt;
				END;
			END-EXEC;
		}
		else if ( c_opr_typ == WITHOUT_UNDERLYING && c_rqst_typ == 'Y' )
		{

			if( DEBUG_MSG_LVL_3 ) {
			fn_userlog(c_ServiceName,"c_opr_typ == WITHOUT_UNDERLYING &&  c_rqst_typ == 'Y'");
			}

				EXEC SQL  EXECUTE
          BEGIN
            OPEN  :sys_cursor FOR
                SELECT  distinct ffp_clm_mtch_accnt,            /*** distinct added for Ver 2.8 ***/
                        ffp_prdct_typ,
                        ffp_indstk,
                        ffp_undrlyng,
                        to_char( ffp_expry_dt, 'DD-Mon-YYYY' ) ffp_expry_dt, /*** Alias added Ver 2.8 ***/
                        ffp_exer_typ,
                        ffp_cntrct_tag,
                        ffp_opnpstn_flw,
                        abs(ffp_opnpstn_qty),
                        ffp_mtm_opn_val,
                        decode(ffp_opnpstn_flw,'S',greatest(abs(ffp_ibuy_qty),abs(ffp_exbuy_qty)) ,
                                    'B',greatest(abs(ffp_isell_qty),abs(ffp_exsell_qty) ),0),   
                        ffp_ibuy_qty,
                        ffp_isell_qty,
                        nvl(ffp_trg_prc,0),    /*** Ver 2.9 **/
                      	NVL(FFP_DLVRY_MODE_FLAG,'N'),      /*** Ver 4.6 ***/
                      	NVL(FFP_DLVRY_OBLGAMT_BLCKD,0),    /*** Ver 4.6 ***/
                        NVL(FFP_DLVRY_QTY_BLCKD,0),         /*** Ver 4.6 ***/
                        NVL(FFP_AVG_PRC,0)      /** Ver 4.7 **/
               FROM     ffp_fo_futures_pstn,
												acm_adv_clnt_map
               WHERE    acm_mtch_accnt = ffp_clm_mtch_accnt	
							 AND      NVL(ACM_ACTV_FLG,'A') = 'A'										/*** Clause added for Ver 2.8 ***/
               AND			ffp_clm_mtch_accnt = :c_mtch_accnt_no
               AND      ffp_xchng_cd = :c_xchng_cd
               AND      (    ffp_opnpstn_qty != 0
                          OR ffp_ibuy_qty    != 0
                          OR ffp_isell_qty   != 0 )
               AND      ffp_prdct_typ = :c_prd_typ        
             ORDER BY ffp_clm_mtch_accnt,                
                      ffp_undrlyng,
                      ffp_cntrct_tag,
                      ffp_expry_dt;
        END;
      END-EXEC;

		}
		else if ( c_opr_typ == WITH_UNDERLYING_TAG )
		{
				
			/****************    Ver 1.10 Start  ****************************/
          EXEC SQL SELECT 1
					INTO   :i_joint_cnt 
						FROM ffp_fo_futures_pstn 
						WHERE ffp_undrlyng = :c_undrlyng and
									ffp_cntrct_tag = :c_cntrct_tag and
									ffp_clm_mtch_accnt = :c_mtch_accnt_no  and      
									ffp_xchng_cd = :c_xchng_cd											/*** Ver 2.3 ***/
									HAVING sum(decode(ffp_opnpstn_flw,'B',ffp_opnpstn_qty,'S',-1*ffp_opnpstn_qty)) > abs(sum(ffp_opnpstn_qty));
				
          if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
          {
            tpcommit(0);
            fn_errlog( c_ServiceName, "S31065", "Error in selecting joint square off condn", c_errmsg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

					if( SQLCODE == NO_DATA_FOUND )
					{
						tpcommit(0);
						fn_errlog( c_ServiceName, "S31070", "This position is not eligible for Joint Square Off", c_errmsg  );
				    strcpy(c_errmsg,"This position is not eligible for Joint Square Off");	
					  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}

			/****************    Ver 1.10 End  ****************************/

					EXEC SQL	EXECUTE
					BEGIN
						OPEN	:sys_cursor	FOR
              	SELECT  ffp_clm_mtch_accnt,																		/**Ver 1.2 **/
												ffp_prdct_typ,
												ffp_indstk,
												ffp_undrlyng,
												to_char( ffp_expry_dt, 'DD-Mon-YYYY' ),
												ffp_exer_typ,
												ffp_cntrct_tag,
												ffp_opnpstn_flw,
												abs(ffp_opnpstn_qty),
												ffp_mtm_opn_val,
												decode(ffp_opnpstn_flw,'S',greatest(abs(ffp_ibuy_qty),abs(ffp_exbuy_qty)) ,
                                    'B',greatest(abs(ffp_isell_qty),abs(ffp_exsell_qty) ),0),		/**Ver 1.7 **/
                      	/**commented for Ver 1.7 decode(ffp_opnpstn_flw,'S',ffp_ibuy_qty ,
                                    'B',abs(ffp_isell_qty ),0),**/
												ffp_ibuy_qty,
												ffp_isell_qty,
                        nvl(ffp_trg_prc,0),    /*** Ver 2.9 **/
                      	NVL(FFP_DLVRY_MODE_FLAG,'N'),      /*** Ver 4.6 ***/
                      	NVL(FFP_DLVRY_OBLGAMT_BLCKD,0),    /*** Ver 4.6 ***/
                        NVL(FFP_DLVRY_QTY_BLCKD,0),         /*** Ver 4.6 ***/
                        NVL(FFP_AVG_PRC,0)      /** Ver 4.7 **/
							 FROM     ffp_fo_futures_pstn
							 WHERE	  ffp_clm_mtch_accnt = :c_mtch_accnt_no
							 AND      ffp_xchng_cd = :c_xchng_cd
							 AND      ffp_undrlyng    =  :c_undrlyng
							 AND      ffp_cntrct_tag = :c_cntrct_tag
							 AND      (    ffp_opnpstn_qty != 0
                        OR ffp_ibuy_qty    != 0 
                        OR ffp_isell_qty   != 0 )
							 AND			ffp_prdct_typ = :c_prd_typ															/* Ver 1.5 */
             ORDER BY ffp_clm_mtch_accnt,																				/**Ver 1.2 **/ 
											ffp_undrlyng,
										  ffp_cntrct_tag,
                      ffp_expry_dt;
				END;
			END-EXEC;
		}
		else
		{
      tpcommit(0);
			fn_errlog( c_ServiceName, "S31075", "Invalid Option Type", c_errmsg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
		if ( SQLCODE != 0 )
		{  
      tpcommit(0);
			fn_errlog( c_ServiceName, "S31080", SQLMSG, c_errmsg  );
			EXEC SQL FREE :sys_cursor;
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		ptr_fml_Obuf = NULL; 

		i_counter = 1 ;

		i_cntr = 0 ;
    i_cntrct_cnt = 0;  /*** Ver 2.9 ***/

	for ( ; ; )
	{
    c_settlement_indicator = '-'; /** ver 4.2 **/
		EXEC SQL FETCH :sys_cursor
						  INTO :c_mtch_accnt_no,  								/*** Ver 1.2**/
									 :c_prd_typ,
                   :c_ctgry_indstk,
                   :c_undrlyng,
                   :c_expry_dt,
                   :c_exrc_typ,
                   :c_cntrct_tag,
                   :c_opnpstn_flw,
                   :l_opnpstn_qty,
                   :d_mtm_opn_val,
									 :l_cvr_qty,
                   :li_bo_qty,
                   :li_so_qty,
                   :d_trg_price,   /** Ver 2.9 **/
									 :c_dlvry_mode_flg,         /*** Ver 4.6 ***/ 
                   :d_dlvry_oblgamt_blckd,    /*** Ver 4.6 ***/
                   :l_dlvry_qty_blckd,        /*** Ver 4.6 ***/	
                   :d_avg_prcs;                /*** Ver 4.7 ***/
		SETNULL(c_expry_dt);
    c_mtm_alrt_flg='N';   /** Ver 2.9 **/
    c_sprd_trgprc_flg='Y'; /** Ver 2.9 **/

		if( DEBUG_MSG_LVL_5 ) {          /*  Ver 1.4 : Debug level Change  */
		fn_userlog(c_ServiceName,"SHAILESH CHECK :c_mtch_accnt:%s:",c_mtch_accnt_no);
		fn_userlog(c_ServiceName,"SHAILESH CHECK :c_undrlyng:%s:",c_undrlyng);
    fn_userlog(c_ServiceName,"SHAILESH CHECK :c_expry_dt:%s:",(char *)c_expry_dt.arr);
    fn_userlog(c_ServiceName,"SHAILESH CHECK :c_expry_dt:%s:",(char *)c_expry_dt.arr);
		}


		if ( SQLCODE != 0 )
		{
			if ( SQLCODE == NO_DATA_FOUND )
			{
       	if ( i_counter  != 1 )
				{
				/*** Ver 4.4 Starts ***/
					if( c_prd_typ == 'F')
					{
					 if( DEBUG_MSG_LVL_5 ) 
					 {
					 	fn_userlog(c_ServiceName,"Checking for records inside NO_DATA_FOUND of RSPREAD can be shown from ORDER BOOK Only");
					 }

					 EXEC SQL
						select TO_CHAR( FOD_EXPRY_DT, 'DD-MON-YYYY' ),
									 FOD_ORDR_FLW,
									 FTQ_CNTRCT_TAG,
									 FTQ_LST_TRD_PRC
						INTO	:c_r_exp_dt,
									/* :c_uopnpstn_flw,				** Ver 4.5 **/
									:c_r_opnpstn_flw,					/*** ver 4.5 ***/
									:c_r_cntrct_tag,
									:l_lst_trdd_prc
						FROM  FOD_FO_ORDR_DTLS, FTQ_FO_TRD_QT
						WHERE FOD_EXPRY_DT NOT IN (SELECT DISTINCT(FFP_EXPRY_DT)
									    FROM FFP_FO_FUTURES_PSTN
									    WHERE FFP_XCHNG_CD = :c_xchng_cd
									    AND FFP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
									    AND FFP_UNDRLYNG = :c_prev_undrlyng
									    AND FFP_PRDCT_TYP = :c_prd_typ
									    AND (    ffp_opnpstn_qty != 0
										  OR ffp_ibuy_qty    != 0
										  OR ffp_isell_qty   != 0 ))
						AND FTQ_EXPRY_DT = FOD_EXPRY_DT
						AND FOD_UNDRLYNG = FTQ_UNDRLYNG
						AND FTQ_PRDCT_TYP = FOD_PRDCT_TYP
						AND FOD_ORDR_STTS in ('P','O','R','Q')
						AND FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
						AND FOD_PRDCT_TYP= :c_prd_typ
						AND FOD_UNDRLYNG= :c_prev_undrlyng
						AND FOD_SPL_FLAG='O'
						AND FOD_XCHNG_CD = :c_xchng_cd
						AND rownum < 2;

					if( SQLCODE != 0 && ( SQLCODE != NO_DATA_FOUND ))
					{
						tpcommit(0);
						fn_errlog( c_ServiceName, "S31085", SQLMSG, c_errmsg  );
						EXEC SQL CLOSE :sys_cursor;
						EXEC SQL FREE :sys_cursor;
						tpfree ( ( char * ) ptr_fml_Obuf );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
					else if ( SQLCODE == NO_DATA_FOUND )
					{
						if( DEBUG_MSG_LVL_3 )
						{
							fn_userlog(c_ServiceName,"No records of RSPREAD inside NO_DATA_FOUND can be shown from ORDER BOOK Only");
						}
						c_rsprd_pos_flg = 'N';
					}
					else if (c_prev_tag == c_r_cntrct_tag)
					{
						if( DEBUG_MSG_LVL_3 )
						{
							fn_userlog(c_ServiceName,"Records with same tag for NO_DATA_FOUND_RSPREAD_FOD_ONLY is Available");
						}
						EXEC SQL
							SELECT nvl(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0),
								FOD_CLM_MTCH_ACCNT,
								FOD_INDSTK,
								FOD_UNDRLYNG,
								FOD_EXER_TYP,
								NVL(sum(FOD_SROLL_DIFF_AMT),0),
								NVL(sum(FOD_SROLL_LSS_AMT),0)
							INTO
								:l_fod_qty,
								:c_mtch_accnt_no,
								:c_uindstk,
								:c_prev_undrlyng,							/*** Ver 4.5 ***/
								:c_exrc_typ,
								:d_rordr_mrgn,
								:d_rordr_loss_amt
							FROM  FOD_FO_ORDR_DTLS
							WHERE FOD_ORDR_STTS in ('P','O','R','Q')
							AND FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
							AND FOD_PRDCT_TYP= :c_prd_typ
							AND FOD_UNDRLYNG = :c_prev_undrlyng
							AND FOD_EXPRY_DT = :c_r_exp_dt
							AND FOD_XCHNG_CD = :c_xchng_cd
							/*and FOD_ORDR_FLW = :c_uopnpstn_flw	** Ver 4.5 **/
							and FOD_ORDR_FLW = :c_r_opnpstn_flw			/*** Ver 4.5 ***/
							AND FOD_SPL_FLAG = 'O'
							GROUP BY FOD_CLM_MTCH_ACCNT,FOD_INDSTK,FOD_UNDRLYNG,FOD_EXER_TYP;


						if ( SQLCODE != 0 )
						{
							tpcommit(0);
							fn_errlog( c_ServiceName, "S31090", SQLMSG, c_errmsg  );
							EXEC SQL CLOSE :sys_cursor;
							EXEC SQL FREE :sys_cursor;
							tpfree ( ( char * ) ptr_fml_Obuf );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}

						li_r_bo_qty = 0;		/*** Ver 4.5 ***/
						li_r_so_qty = 0;		/*** Ver 4.5 ***/
						/* l_uopnpstn_qty = 0;
						d_mtm_opn_val = 0;
						d_trg_price = 0;
						d_sprd_mrgn = 0;
						l_cvr_qty = 0;	
						li_bo_qty = 0;
						li_so_qty = 0;		*** Ver 4.5 ***/
						c_uprdct_typ = c_prd_typ;

						/* l_cvr_qty = l_cvr_qty + l_fod_qty; 
						if(c_uopnpstn_flw == 'B')
						{
							li_bo_qty = li_bo_qty + l_fod_qty;
						}
						else if (c_uopnpstn_flw == 'S')
						{
							li_so_qty = li_so_qty - l_fod_qty;
						}	
						*** Ver 4.5 ***/
						/*** ver 4.5 starts ***/
						if(c_r_opnpstn_flw == 'B')
						{
							li_r_bo_qty = li_r_bo_qty + l_fod_qty;
						}
						else if (c_r_opnpstn_flw == 'S')
						{
							li_r_so_qty = li_r_so_qty - l_fod_qty;
						}	
						/*** Ver 4.5 Ends ***/
						if( DEBUG_MSG_LVL_3 )
						{
							fn_userlog(c_ServiceName,"RSPREAD From FOD ONLY :inside NO_DATA_FOUND: c_uprdct_typ :%c: c_uindstk :%c: c_uopnpstn_flw :%c: l_uopnpstn_qty :%ld: d_rordr_mrgn :%lf: d_rordr_loss_amt:%lf:",c_uprdct_typ,c_uindstk,c_uopnpstn_flw,l_uopnpstn_qty,d_rordr_mrgn,d_rordr_loss_amt);	
						}
						/*c_jointsqroff_flg	=	'N';
						c_sprd_trgprc_flg	=	'N';
						c_addmrgn_flg	=	'N';
						c_mtm_alrt_flg=	'N';
						c_opnpstn_flw = '-';	* Ver 4.5 */
						c_spl_flg = CONTRACT_IP;
						/*li_temp = 0;
						rec_cnt	=	0;
						ret_val	=	0;
						d_avilable_amount = 0; * Ver 4.5 */
						i_cntrct_cnt = 0;
						/* d_base_prc = 0;		* ver 4.5 */
						d_rordr_mrgn = d_rordr_mrgn + d_rordr_loss_amt;

						if( DEBUG_MSG_LVL_3 )
						{
							fn_userlog(c_ServiceName,"inside RSPREAD_NO_DATA_FOUND:before fn_pack_vartofml");
						}


						for ( i=1 ; i<=i_cntrct_cnt+1 ; i++)
						{
          		i_returncode = fn_pack_vartofml ( c_ServiceName,
                                         c_errmsg,
                                         &ptr_fml_Obuf,
                                         43/*** 39 to 42 in ver 4.6 ***/,  /*** Ver 4.7 ***/
                                    FFO_PRDCT_TYP,(char *)&c_uprdct_typ,
                                    FFO_CTGRY_INDSTK,(char *)&c_uindstk,
                                    FFO_UNDRLYNG,(char *)c_prev_undrlyng,
                                    FFO_EXPRY_DT,(char *)c_r_exp_dt.arr,
                                    FFO_EXER_TYP,(char *)&c_exrc_typ,
                                    FFO_CNTRCT_TAG,(char *)&c_r_cntrct_tag,
                                    FFO_C_OPNPSTN_FLW,(char *)&c_null,			/*** ver 4.5 ***/
                                    FFO_C_OPNPSTN_QTY,(char *)&l_null,			/*** ver 4.5 ***/
                                    FFO_CVR_QTY,(char *)&l_fod_qty,					/*** Ver 4.5 ***/
                                    FFO_C_MTM_OPN_VAL,(char *)&d_null,			/*** Ver 4.5 ***/
                                    FFO_LST_TRD_PRC,(char *)&l_lst_trdd_prc,
                                    FFO_AMOUNT,(char *)&d_rutrd_mrgn,
                                    FFO_SPL_FLG,(char *)&c_spl_flg,
                                    FFO_MIN_LOT_QTY,(char *)&l_null,				/*** ver 4.5 ***/
                                    FFO_QT_TRDNG_FLG,(char *)&c_null,       /*** ver 4.5 ***/
                                    FFO_SETTLOR_STTS,(char *)&c_null,    		/*** ver 4.5 ***/
                                    FFO_U_ORDR_MRGN,(char *)&d_rordr_mrgn,
                                    FFO_UI_BUY_QTY,(char *)&li_r_bo_qty, 		/*** ver 4.5 ***/
                                    FFO_UI_SELL_QTY,(char *)&li_r_so_qty,  	/*** ver 4.5 ***/
                                    FFO_U_MM_TRD_MRGN,(char *)&d_rumin_trd_mrgn,
                                    FFO_PRCNTG_CHNG,(char *)&l_null,          
                                    FFO_EBA_MTCH_ACT_NO,(char*)&c_mtch_accnt_no, 
                                    FFO_SUB_BUF_CNT,   (char *)&l_null,			/*** ver 4.5 ***/
                                    FFO_ACTN_ID,       (char *)&l_null, 		/*** ver 4.5 ***/
                                    FFO_U_IMTM_SPRD_PL,(char *)&d_null, 		/*** ver 4.5 ***/
                                    FFO_OPT_TYP, (char *)&c_opt_typ,       
                                    FFO_STRK_PRC, (char *)&l_strike_prc,   
                                    FFO_XCHNG_CD, (char *)&c_xchng_cd,      
                                    FFO_BAL_AMT,(char *)&d_null,						/*** ver 4.5 ***/
                                    FFO_SOURCE_FLG, (char *)&c_spn_flg,     
                                    FFO_DWL_FLG, (char *)&c_null,      	/*** ver 4.5 ***/
                                    FFO_STATUS_FLG, (char *)&c_null, 		/*** ver 4.5 ***/
                                    FFO_RATE, (char *)&d_null, 
                                    FFO_IS_FLG, (char *)&c_null,				/*** ver 4.5 ***/ 
                                    FFO_RQST_TYP, (char *)&c_null,  
                                    FFO_NKD_BLKD_FLG, (char *)&c_cancel_all_flag,       
                                    FFO_BK_UBK_FLG,( char * )&c_null, 
                                    FFO_DR_CR_FLG, (char *)&c_sqr_off_all_at_mkt,
																		FFO_MOD_CAN_FLG, (char *)&c_null, 		/*** ver 4.5 ***/
                                    FFO_INDX_INDCTR, (char *)&c_null,     /*** Ver 4.6 ***/
                                    FFO_STLMNT_TYP, (char *)&c_null,       /*** Ver 4.6 ***/
                                    FFO_BO_AMT_BLKD, (char *)&c_null,       /*** Ver 4.6 ***/
                                    FFO_EFF_EXCTD_RT, (char *)&d_null);               /*** Ver 4.7 ***/
																		
            	if ( i_returncode == -1 )
            	{
              	tpcommit(0);
              	fn_errlog( c_ServiceName, "S31095", FMLMSG, c_errmsg  );
              	EXEC SQL CLOSE :sys_cursor;
              	EXEC SQL FREE :sys_cursor;
              	tpfree ( ( char * ) ptr_fml_Obuf );
              	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
              	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            	}
						}
					}
					else
					{
						c_rsprd_pos_flg = 'Y';
						/*c_r_opnpstn_flw = c_uopnpstn_flw;			commented in Ver 4.5 */
						l_r_ltp = l_lst_trdd_prc;

						if( DEBUG_MSG_LVL_3 )
						{
							fn_userlog(c_ServiceName,"Records of RSPREAD inside NO_DATA_FOUND are available to be shown from ORDER BOOK Only ");
						}
					}
					fn_userlog(c_ServiceName,"After Direct from FOD inside NO_DATA_FOUND c_rsprd_pos_flg:%c:",c_rsprd_pos_flg);
				}
					/*** Ver 4.4 Ends ***/
					d_utrd_mrgn	=	0.0;			/***	Ver	2.6	***/
					d_sprd_mrgn	=	0.0;			/***	Ver	2.6	***/
		
       		EXEC SQL
             /** Commented in ver 4.4 **
             SELECT  fup_prdct_typ,
                     fup_indstk,
                     fup_uopnpstn_flw,
                     abs(fup_uopnpstn_qty),
                     fup_utrd_mrgn + fup_add_mrgn_val,
										 fup_uspread_mrgn,			***	Ver	2.6	***
										 fup_uordr_mrgn,
										 NVL(fup_umin_trd_mrgn,0)
             INTO    :c_uprdct_typ,
                     :c_uindstk,
                     :c_uopnpstn_flw,
                     :l_uopnpstn_qty,
                     :d_utrd_mrgn, 
										 :d_sprd_mrgn,			***	Ver 2.6	***	
                     :d_ordr_mrgn,
                     :d_umin_trd_mrgn
              FROM   fup_fut_undrlyng_pstn
              WHERE  fup_clm_mtch_accnt = :c_mtch_accnt_no
              AND    fup_xchng_cd = :c_xchng_cd
              AND    fup_undrlyng = :c_prev_undrlyng
              AND    fup_cntrct_tag = :c_prev_tag  
							AND		 fup_prdct_typ = :c_prd_typ;												* Ver 1.5 *
       		if( SQLCODE != 0 )
              ** Comment ends in ver 4.4 **/
              /*** Add start in Ver 4.4 ***/
              SELECT  FUP_PRDCT_TYP,
                      FUP_INDSTK,
                      FUP_UOPNPSTN_FLW,
                      abs(FUP_UOPNPSTN_QTY),
                      FUP_UTRD_MRGN + FUP_ADD_MRGN_VAL,
                      FUP_USPREAD_MRGN,
                      FUP_UORDR_MRGN,
                      NVL(FUP_UMIN_TRD_MRGN,0),
                      NVL(sum(FOD_SROLL_DIFF_AMT),0),
											NVL(sum(FOD_SROLL_LSS_AMT),0)
              INTO    :c_uprdct_typ,
                      :c_uindstk,
                      :c_uopnpstn_flw,
                      :l_uopnpstn_qty,
                      :d_utrd_mrgn,
                      :d_sprd_mrgn,
                      :d_ordr_mrgn,
                      :d_umin_trd_mrgn,
                      :d_sroll_diff_amt,
											:d_sroll_lss_amt
              FROM   FUP_FUT_UNDRLYNG_PSTN, FOD_FO_ORDR_DTLS
              WHERE  FUP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
              AND    FUP_XCHNG_CD = :c_xchng_cd
              AND    FUP_UNDRLYNG = :c_prev_undrlyng
              AND    FUP_CNTRCT_TAG = :c_prev_tag
              AND    FUP_PRDCT_TYP =  :c_prd_typ
							AND		 FOD_SPL_FLAG(+) = 'O'
              AND    FUP_CLM_MTCH_ACCNT = FOD_CLM_MTCH_ACCNT(+)
              AND    FUP_XCHNG_CD = FOD_XCHNG_CD(+)
              AND    FUP_UNDRLYNG = FOD_UNDRLYNG(+)
              AND    FUP_PRDCT_TYP = FOD_PRDCT_TYP(+)
              GROUP By FUP_PRDCT_TYP,FUP_INDSTK,
                    FUP_UOPNPSTN_FLW,abs(FUP_UOPNPSTN_QTY),
                    (FUP_UTRD_MRGN + FUP_ADD_MRGN_VAL),
                    FUP_USPREAD_MRGN,FUP_UORDR_MRGN,
                    NVL(FUP_UMIN_TRD_MRGN,0);

              /*** Add Ends in Ver 4.4 ***/
       		if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
       		{ 
      			tpcommit(0);
						fn_errlog( c_ServiceName, "S31100", SQLMSG, c_errmsg  );
      			EXEC SQL CLOSE :sys_cursor;
      			EXEC SQL FREE :sys_cursor;
      			tpfree ( ( char * ) ptr_fml_Obuf );
      			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       		}
      	/*** ver 4.4 Starts ***/
				d_sroll_diff_amt = d_sroll_diff_amt + d_sroll_lss_amt;
       	if( c_prd_typ == 'F' && c_rsprd_pos_flg == 'Y')
       	{
					if( DEBUG_MSG_LVL_3 )
					{
          	fn_userlog(c_ServiceName,"RSPREAD Order margin will be shown in second leg");
          	fn_userlog(c_ServiceName,"d_ordr_mrgn:%lf: d_sroll_diff_amt:%lf: d_rordr_mrgn:%lf: d_rordr_loss_amt:%lf:",d_ordr_mrgn,d_sroll_diff_amt,d_rordr_mrgn,d_rordr_loss_amt);
					}
       	}
       	else
       	{
        	d_ordr_mrgn = d_ordr_mrgn + d_sroll_diff_amt;
					if( DEBUG_MSG_LVL_3 )
					{
        		fn_userlog(c_ServiceName,"d_ordr_mrgn:%lf: d_sroll_diff_amt:%lf: ",d_ordr_mrgn,d_sroll_diff_amt);
					}
       	}
       	/*** ver 4.4 Ends ***/
	if( DEBUG_MSG_LVL_5 ) {          /*  Ver 1.4 : Debug level Change  */			
	fn_userlog(c_ServiceName,"STAGE IV-packing group level data for :%s:%s:%c",c_prev_mt_acnt,c_prev_undrlyng,c_prev_tag);
  }
					/***	Ver	2.6	Starts	***/
		
					if( DEBUG_MSG_LVL_3 )
					{
						fn_userlog(c_ServiceName,"Inside NO_DATA_FOUND.");
          	fn_userlog(c_ServiceName,"Spread Margin Is :%lf:",d_sprd_mrgn);
          	fn_userlog(c_ServiceName,"Trade Margin Is :%lf:",d_utrd_mrgn);
					}

					if ( d_utrd_mrgn != 0 )
					{
						if ( d_sprd_mrgn != 0 )
						{
							if(DEBUG_MSG_LVL_3) /** Ver 3.6 **/		
							{
								fn_userlog(c_ServiceName,"Inside Spread Margin Condition.");
							}
							c_jointsqroff_flg	=	'Y';
              
              /*** Ver 2.9 starts here ***/
              if( l_uopnpstn_qty == 0 )
              {
                c_sprd_trgprc_flg='N'; 
              }
              /*** Ver 2.9 Ends here ***/ 
						}
		
            c_addmrgn_flg = 'Y';
					}
		
					/** if( DEBUG_MSG_LVL_0 ) commented in Ver 3.6 **/
					if( DEBUG_MSG_LVL_3 )  		/**  Ver 3.6 **/
					{
						fn_userlog(c_ServiceName," Joint Square Off Flag Is :%c:",c_jointsqroff_flg);
						fn_userlog(c_ServiceName," Add Margin Flag Is :%c:",c_addmrgn_flg);
            fn_userlog(c_ServiceName,"i_cntrct_cnt :%d:",i_cntrct_cnt);
					}
					/***	Ver	2.6	Ends	***/

           /**** Ver 2.9 starts here ****/

            for ( i=1 ; i<=i_cntrct_cnt+1 ; i++) 
            {
              i_returncode = fn_pack_vartofml ( c_ServiceName,
                                                  c_errmsg,
                                                  &ptr_fml_Obuf,
                                                  1,
                                                  FFO_MOD_CAN_FLG, (char *)&c_sprd_trgprc_flg
                                                );
            }
            i_cntrct_cnt = 0;
           /**** Ver 2.9 Ends here ****/
   		 		c_spl_flg = UNDERLYING_IP;
		  		li_temp = 0; 
					rec_cnt=1;           /**Ver 1.2**/
					ret_val=0;					  /**Ver 1.2**/	
					c_rollovr_flg	=	'-';			/***	Ver	2.4	***/
					c_sprd_roll_flg = '-';    /*** Ver 4.4 ***/

          /** if( DEBUG_MSG_LVL_0 )   commented in ver 3.6  ** Ver 3.2 ***/
          if( DEBUG_MSG_LVL_3 )    /*** added  in ver 3.6 **/    
          {
				  	fn_userlog(c_ServiceName," Roll Over Flag Is :%c:",c_rollovr_flg);
						fn_userlog(c_ServiceName," Rollover with spread Flag Is :%c:",c_sprd_roll_flg);   /*** Ver 4.4 ***/
          }
					/****************					added for VER 1.8 by WIPRO						**************/

            /*if ( c_uprdct_typ == FUTURES )
            {*/    /*commented in ver 1.9 for Available margin future plus*/
             l_sprd_qty = fn_minl(l_und_sell_opn_qty,l_und_buy_opn_qty);
     
            if( DEBUG_MSG_LVL_5 ) {
            fn_userlog( c_ServiceName,"Calling fn_cal_min_mrgn");
          	fn_userlog( c_ServiceName,"l_uopnpstn_qty is |%ld|",l_uopnpstn_qty);
          	fn_userlog( c_ServiceName,"c_prev_ctgry_indstk is |%c|",c_prev_ctgry_indstk);}

            /**** Commented in ver 2.9 ********************************************************
             **** Position level computed minimum margin shall be displayed to customer in ****
             **** Open position page ********************************************************** 
						**This function returns the Minimum Margin amount and MTM loss at tag level**
						d_umin_trd_mrgn=fn_cal_min_mrgn(c_ServiceName,c_mtch_accnt_no,c_prev_undrlyng,c_prev_tag,c_xchng_cd,c_uprdct_typ,
																												 c_prev_ctgry_indstk,c_exrc_typ,l_lst_trdd_prc,d_curr_uopn_val,l_sprd_qty);
            
						if(d_umin_trd_mrgn==FAIL)
						{	
							tpcommit(0);
							*strcpy(c_errmsg,"Error in calculating Minimum Margin amount");*
							fn_errlog( c_ServiceName, "S31105", Fstrerror32( i_ferr[i_cnt] ),c_errmsg  );
							EXEC SQL CLOSE :sys_cursor;
							EXEC SQL FREE :sys_cursor;
							tpfree ( ( char * ) ptr_fml_Obuf );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
            ********************** Comment Ver 2.9 Ends here ************************************/

						/* This function returns the M.T.M Loss at group level for a particular match a/c */
						i_mtm_loss_stts=fn_cal_mtm_loss(c_ServiceName,c_mtch_accnt_no,c_prev_undrlyng,c_prev_tag,c_xchng_cd,c_prd_typ, c_prev_ctgry_indstk,c_exrc_typ,&d_mtm_loss);
						if(i_mtm_loss_stts==-1)
						{
							/*strcpy(c_errmsg,"Error in calculating MTM Loss");*/
							tpcommit(0);
							fn_errlog( c_ServiceName, "S31110", Fstrerror32( i_ferr[i_cnt] ),c_errmsg  );
							EXEC SQL CLOSE :sys_cursor;
							EXEC SQL FREE :sys_cursor;
							tpfree ( ( char * ) ptr_fml_Obuf );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
					
					/**		Available margin = margin on position - MTM loss	**/
					d_avilable_amount=d_utrd_mrgn-d_mtm_loss;
          if( DEBUG_MSG_LVL_5 ) { 
					fn_userlog( c_ServiceName,"Min Margin amount is |%lf|",d_umin_trd_mrgn);
					fn_userlog( c_ServiceName,"MTM loss is |%lf| and Margin on position is |%lf|",d_mtm_loss,d_utrd_mrgn);
					fn_userlog( c_ServiceName,"Available margin amount is |%lf|",d_avilable_amount);}
					/****************ends for VER 1.8 by WIPRO**************/
          /*}*/ /*commented in ver 1.9 for Available margin future plus*/

          /*** Ver 2.9 Starts Here ***/
           c_mtm_alrt_flg='N';

           d_new_mm_mrgn = d_umin_trd_mrgn + ( d_umin_trd_mrgn * ( d_am_mm_diff_prcnt /100 ));
  
     /***  if( DEBUG_MSG_LVL_0 )** tanmay 5 ** {  **** Commented in Ver 3.7 ***/
				  if( DEBUG_MSG_LVL_1) /*** Added in Ver 3.7 ***/
					{
           fn_userlog( c_ServiceName,"d_new_mm_mrgn |%lf|", d_new_mm_mrgn);
           }

           if( d_avilable_amount <= d_new_mm_mrgn )
           {
            c_mtm_alrt_flg ='R';
           }            
          /*** Ver 2.9 Ends Here ***/

					/*** Ver 2.5 starts ***/
					EXEC SQL
						SELECT  NVL(CLM_SPAN_ALLWD,'N')
						INTO    :c_spn_flg
						FROM    CLM_CLNT_MSTR
						WHERE   CLM_MTCH_ACCNT  = :c_mtch_accnt_no;

					if ( SQLCODE != 0 )
					{
      			tpcommit(0);
						fn_errlog( c_ServiceName, "S31115", SQLMSG, c_errmsg  );
      			EXEC SQL CLOSE :sys_cursor;
      			EXEC SQL FREE :sys_cursor;
      			tpfree ( ( char * ) ptr_fml_Obuf );
      			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
					/** if( DEBUG_MSG_LVL_0 )  ** Ver 3.6 **/ 
					if( DEBUG_MSG_LVL_3 )     /** Ver 3.6 **/
					{      
						fn_userlog(c_ServiceName,"SPAN FLAG :%c:",c_spn_flg);
					}
					/*** Ver 2.5 ends ***/

	  	 		i_returncode = fn_pack_vartofml ( c_ServiceName,
				  															 c_errmsg,
																			   &ptr_fml_Obuf,
                                         42, /*Ver 1.7 it was 26*/ /* ver 1.3 it was 22 */ /* 1.2 Ver it was 19 earlier */ /*** Ver 4.7 ***/
																						/***	Ver	2.4	Changed From 27 To 28	***/ /*** Ver 2.5 changed from 28 to 29 ***/
																						/***	Ver	2.6 Changed From 29 To 31	***/
                                            /***  Ver 2.9 Changed from 31 to 33 ***/ /** Changed to 34 in Ver 3.8 **/
																						/*** Ver 4.0 Changed from 34 to 35 ***/
																						/**** ver 4.2 changed from 35 to 36 ***/
																						/**** ver 4.1 changed from 36 to 37 ***/
																						/**** ver 4.4  changed from 37 to 38 ***/
																						/**** ver 4.6  changed from 38 to 41 ***/
                                    FFO_PRDCT_TYP,(char *)&c_uprdct_typ, 
																		FFO_CTGRY_INDSTK,(char *)&c_uindstk,
                     							  FFO_UNDRLYNG,(char *)c_prev_undrlyng,
																  	FFO_EXPRY_DT,(char *)c_strnull,
																		FFO_EXER_TYP,(char *)&c_null, 
																		FFO_CNTRCT_TAG,(char *)&c_prev_tag,
																		FFO_C_OPNPSTN_FLW,(char *)&c_uopnpstn_flw,
																		FFO_C_OPNPSTN_QTY,(char *)&l_uopnpstn_qty,
															  	  FFO_CVR_QTY,(char *)&l_null,	
																		FFO_C_MTM_OPN_VAL,(char *)&d_null,
																		FFO_LST_TRD_PRC,(char *)&l_null, 
                                    FFO_AMOUNT,(char *)&d_utrd_mrgn,
                                    FFO_SPL_FLG,(char *)&c_spl_flg,
																		FFO_MIN_LOT_QTY,(char *)&li_temp,
																		FFO_QT_TRDNG_FLG,(char *)&c_rollovr_flg,			/***	Ver	2.4	***/		
                                    FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flg,    /***  Ver 4.4 ***/
                                    FFO_U_ORDR_MRGN,(char *)&d_ordr_mrgn,
                             /**    FFO_UI_BUY_QTY,(char *)&li_temp,
                                    FFO_UI_SELL_QTY,(char *)&li_temp,  ** commented in ver 1.3 **/
                                    FFO_UI_BUY_QTY,(char *)&l_tot_buy_qty, /** Added in ver 1.3 **/
                                    FFO_UI_SELL_QTY,(char *)&l_tot_sell_qty,  /** Added in ver 1.3 **/
                                    FFO_U_MM_TRD_MRGN,(char *)&d_umin_trd_mrgn,
																		FFO_PRCNTG_CHNG,(char *)&l_null,          /* 1.1*/ /* ver 1.3 l_prcnt changed to l_null*/
																		FFO_EBA_MTCH_ACT_NO,(char*)&c_mtch_accnt_no, /**Ver 1.2***/
																		FFO_SUB_BUF_CNT,   (char *)&rec_cnt,/**Ver 1.2***/
                                    FFO_ACTN_ID,       (char *)&ret_val, /**Ver 1.2***/
                                    FFO_U_IMTM_SPRD_PL,(char *)&d_null, /* ver 1.3 added */
                                    FFO_OPT_TYP, (char *)&c_opt_typ,       /* ver 1.3 */
                                    FFO_STRK_PRC, (char *)&l_strike_prc,   /* ver 1.3 */
                                    FFO_XCHNG_CD, (char *)&c_xchng_cd,      /* ver 1.3 */
									                  FFO_BAL_AMT,(char *)&d_avilable_amount,/*ver 1.8*/
																		FFO_SOURCE_FLG, (char *)&c_spn_flg,			/*** Ver 2.5 ***/
																		FFO_DWL_FLG, (char *)&c_addmrgn_flg,			/*** Ver 2.6 ***/
																		FFO_STATUS_FLG, (char *)&c_jointsqroff_flg,	/*** Ver 2.6 ***/
                                    FFO_RATE, (char *)&d_null, /*** Ver 2.9 ***/
                                    FFO_IS_FLG, (char *)&c_mtm_alrt_flg, /*** Ver 2.9 ***/
                                    FFO_RQST_TYP, (char *)&c_null,  /*** Ver 3.8 ***/
																	  FFO_NKD_BLKD_FLG, (char *)&c_cancel_all_flag,       /*** Ver 4.0 ***/	
																		FFO_BK_UBK_FLG,( char * )&c_null, /*** Ver 4.2 ***/	
																	 	FFO_DR_CR_FLG, (char *)&c_sqr_off_all_at_mkt,	/*** Ver 4.1 ***/
                                    FFO_INDX_INDCTR, (char *)&c_null,       /*** Ver 4.6 ***/      	 	
                                    FFO_STLMNT_TYP, (char *)&c_null,        /*** Ver 4.6 ***/
                                    FFO_BO_AMT_BLKD, (char *)&c_null,      /*** Ver 4.6 ***/
                                    FFO_EFF_EXCTD_RT, (char *)&d_null);               /*** Ver 4.7 ***/
     			if ( i_returncode == -1 )
     			{
      			 tpcommit(0);
         		 fn_errlog( c_ServiceName, "S31120", FMLMSG, c_errmsg  );
         		 EXEC SQL CLOSE :sys_cursor;
         		 EXEC SQL FREE :sys_cursor;
         		 tpfree ( ( char * ) ptr_fml_Obuf );
         		 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
         		 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     			}
					if( DEBUG_MSG_LVL_5 ) {          /*  Ver 1.4 : Debug level Change  */
					fn_userlog(c_ServiceName,"size of ptr_fml_Obuf:%ld:",Fsizeof32(ptr_fml_Obuf));
					} 
																/**Ver 1.2 starts **/
					if (i_size_fup == 0 )
					{
						l_size_ocpd=Fsizeof32(ptr_fml_Obuf)-Funused32(ptr_fml_Obuf);
					if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.4 : Debug level Change  */
						fn_userlog(c_ServiceName,"Unused Size:%ld:",Funused32(ptr_fml_Obuf));
						fn_userlog(c_ServiceName,"Size Occpd:%ld:",l_size_ocpd);
					} 
						i_size_fup = 1 ;
					}
																/**Ver 1.2 Ends **/
				}
			 
				if( DEBUG_MSG_LVL_5 ) {          /*  Ver 1.4 : Debug level Change  */
				fn_userlog(c_ServiceName,"STAGE END-before break last mtch accnt:%s:",c_mtch_accnt_no);
				fn_userlog(c_ServiceName,"c_rsprd_pos_flg:%c:",c_rsprd_pos_flg);
				}
				
				if(c_rsprd_pos_flg == 'Y' && c_prd_typ == 'F')
				{
				
          /* c_uopnpstn_flw = c_r_opnpstn_flw;	Commented in Ver 4.5 */
          l_lst_trdd_prc = l_r_ltp;

					fn_userlog(c_ServiceName,"Records of RSPREAD inside NEW_TAG_RSPREAD_ORD_BK Only");
					c_rsprd_pos_flg = 'Y';
					EXEC SQL
						SELECT nvl(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0),
						FOD_CLM_MTCH_ACCNT,
						FOD_INDSTK,
						FOD_UNDRLYNG,
						FOD_EXER_TYP,
						NVL(sum(FOD_SROLL_DIFF_AMT),0),
						NVL(sum(FOD_SROLL_LSS_AMT),0)
						INTO
						:l_fod_qty,
						:c_mtch_accnt_no,
						:c_uindstk,
						:c_prev_undrlyng,			/*** Ver 4.5 ***/
						:c_exrc_typ,
						:d_rordr_mrgn,
						:d_rordr_loss_amt
						FROM  FOD_FO_ORDR_DTLS
						WHERE FOD_ORDR_STTS in ('P','O','R','Q')
						AND FOD_CLM_MTCH_ACCNT=:c_prev_mt_acnt
						AND FOD_PRDCT_TYP= :c_prd_typ
						AND FOD_UNDRLYNG = :c_prev_undrlyng
						AND FOD_EXPRY_DT = :c_r_exp_dt								/*** Ver 4.5 ***/
						AND FOD_XCHNG_CD = :c_xchng_cd
						and FOD_ORDR_FLW = :c_r_opnpstn_flw						/*** Ver 4.5 ***/
						AND FOD_SPL_FLAG = 'O'
						GROUP BY FOD_CLM_MTCH_ACCNT,FOD_INDSTK,FOD_UNDRLYNG,FOD_EXER_TYP;
					if ( SQLCODE != 0 )
					{
						tpcommit(0);
						fn_errlog( c_ServiceName, "S31125", SQLMSG, c_errmsg  );
						EXEC SQL CLOSE :sys_cursor;
						EXEC SQL FREE :sys_cursor;
						tpfree ( ( char * ) ptr_fml_Obuf );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}

					li_r_bo_qty = 0;		/*** Ver 4.5 ***/
					li_r_so_qty = 0;		/*** Ver 4.5 ***/
					/* l_uopnpstn_qty = 0;
					d_mtm_opn_val = 0;
					l_cvr_qty = 0;	
					d_trg_price = 0;
					d_sprd_mrgn = 0;
					li_bo_qty = 0;
					li_so_qty = 0;		*Ver 4.5 ***/
					c_uprdct_typ = c_prd_typ;
					/* l_cvr_qty = l_cvr_qty + l_fod_qty; Commented in Ver 4.5 */
					d_rordr_mrgn = d_rordr_mrgn + d_rordr_loss_amt;
					d_rordr_mrgn = d_sroll_diff_amt;
					
					/* if(c_uopnpstn_flw == 'B')
					{
						li_bo_qty = li_bo_qty + l_fod_qty;
					}
					else if (c_uopnpstn_flw == 'S')
					{
						li_so_qty = li_so_qty - l_fod_qty;
					}
					c_jointsqroff_flg='N';
					c_sprd_trgprc_flg='N';
					c_addmrgn_flg='N';
					c_mtm_alrt_flg='N';
					*** ver 4.5 ***/

					/*** Ver 4.5 starts ***/
					if(c_r_opnpstn_flw == 'B')
					{
						li_r_bo_qty = li_r_bo_qty + l_fod_qty;
					}
					else if (c_r_opnpstn_flw == 'S')
					{
						li_r_so_qty = li_r_so_qty - l_fod_qty;
					}
					/*** Ver 4.5 Ends ***/
					c_spl_flg = CONTRACT_IP;
					/*c_opnpstn_flw = '-';
					li_temp = 0;
					rec_cnt=0;
					ret_val=0;
					d_avilable_amount=0;	*** Ver 4.5 ***/
					i_cntrct_cnt = 0;
					/* d_base_prc = 0;		*** Ver 4.5 ***/

					for ( i=1 ; i<=i_cntrct_cnt+1 ; i++)
					{
						i_returncode = fn_pack_vartofml ( c_ServiceName,
								c_errmsg,
								&ptr_fml_Obuf,
								43/** ver 4.6 39 to 42 **/, /*** Ver 4.7 ***/
								FFO_PRDCT_TYP,(char *)&c_uprdct_typ,
								FFO_CTGRY_INDSTK,(char *)&c_uindstk,
								FFO_UNDRLYNG,(char *)c_prev_undrlyng,
								FFO_EXPRY_DT,(char *)c_r_exp_dt.arr,						/*** Ver 4.5 ***/
								FFO_EXER_TYP,(char *)&c_exrc_typ,
								FFO_CNTRCT_TAG,(char *)&c_r_cntrct_tag,
								FFO_C_OPNPSTN_FLW,(char *)&c_null,							/*** Ver 4.5 ***/
								FFO_C_OPNPSTN_QTY,(char *)&l_null,							/*** Ver 4.5 ***/
								FFO_CVR_QTY,(char *)&l_fod_qty,									/*** Ver 4.5 ***/
								FFO_C_MTM_OPN_VAL,(char *)&d_null,							/*** Ver 4.5 ***/
								FFO_LST_TRD_PRC,(char *)&l_lst_trdd_prc,
								FFO_AMOUNT,(char *)&d_rutrd_mrgn,
								FFO_SPL_FLG,(char *)&c_spl_flg,
								FFO_MIN_LOT_QTY,(char *)&l_null,								/*** Ver 4.5 ***/
								FFO_QT_TRDNG_FLG,(char *)&c_null,								/*** Ver 4.5 ***/
								FFO_SETTLOR_STTS,(char *)&c_null,								/*** Ver 4.5 ***/
								FFO_U_ORDR_MRGN,(char *)&d_rordr_mrgn,
								FFO_UI_BUY_QTY,(char *)&li_r_bo_qty,						/*** Ver 4.5 ***/
								FFO_UI_SELL_QTY,(char *)&li_r_so_qty,						/*** Ver 4.5 ***/
								FFO_U_MM_TRD_MRGN,(char *)&d_rumin_trd_mrgn,
								FFO_PRCNTG_CHNG,(char *)&l_null,
								FFO_EBA_MTCH_ACT_NO,(char*)&c_mtch_accnt_no,
								FFO_SUB_BUF_CNT,   (char *)&l_null,							/*** Ver 4.5 ***/
								FFO_ACTN_ID,       (char *)&l_null,							/*** Ver 4.5 ***/
								FFO_U_IMTM_SPRD_PL,(char *)&d_null,							/*** Ver 4.5 ***/
								FFO_OPT_TYP, (char *)&c_opt_typ,
								FFO_STRK_PRC, (char *)&l_strike_prc,
								FFO_XCHNG_CD, (char *)&c_xchng_cd,
								FFO_BAL_AMT,(char *)&d_null,										/*** Ver 4.5 ***/
								FFO_SOURCE_FLG, (char *)&c_spn_flg,
								FFO_DWL_FLG, (char *)&c_null,
								FFO_STATUS_FLG, (char *)&c_null,
								FFO_RATE, (char *)&d_null,
								FFO_IS_FLG, (char *)&c_null,										/*** Ver 4.5 ***/
								FFO_RQST_TYP, (char *)&c_null,
								FFO_NKD_BLKD_FLG, (char *)&c_cancel_all_flag,
								FFO_BK_UBK_FLG,( char * )&c_null,
								FFO_DR_CR_FLG, (char *)&c_sqr_off_all_at_mkt,
								FFO_MOD_CAN_FLG, (char *)&c_null,								/*** ver 4.5 ***/
								FFO_INDX_INDCTR, (char *)&c_null,       /*** Ver 4.6 ***/
                FFO_STLMNT_TYP, (char *)&c_null,        /*** Ver 4.6 ***/
                FFO_BO_AMT_BLKD, (char *)&c_null,      /*** Ver 4.6 ***/
                FFO_EFF_EXCTD_RT, (char *)&d_null);               /*** Ver 4.7 ***/
							if ( i_returncode == -1 )
							{
								tpcommit(0);
								fn_errlog( c_ServiceName, "S31130", FMLMSG, c_errmsg  );
								EXEC SQL CLOSE :sys_cursor;
								EXEC SQL FREE :sys_cursor;
								tpfree ( ( char * ) ptr_fml_Obuf );
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
					}
	
          fn_userlog(c_ServiceName,"STAGE IV-packing group level data for :%s:%s:%c",c_prev_mt_acnt,c_prev_undrlyng,c_prev_tag);
          c_spl_flg = UNDERLYING_IP;
          rec_cnt=1;
          /*li_temp = 0;
          ret_val=0;
          c_rollovr_flg  = '-';
          c_sprd_roll_flg = '-';	commented in Ver 4.5 */
					/* add FFO_U_ORDR_MRGN */
          i_returncode = fn_pack_vartofml ( c_ServiceName,
                                            c_errmsg,
                                            &ptr_fml_Obuf,
                                            42/** ver 4.6 38 to 41 **/, /*** Ver 4.7 ***/
                                    FFO_PRDCT_TYP,(char *)&c_uprdct_typ,
                                    FFO_CTGRY_INDSTK,(char *)&c_uindstk,
                                    FFO_UNDRLYNG,(char *)c_prev_undrlyng,
                                    FFO_EXPRY_DT,(char *)c_strnull,
                                    FFO_EXER_TYP,(char *)&c_null,
                                    FFO_CNTRCT_TAG,(char *)&c_prev_tag,
                                    FFO_C_OPNPSTN_FLW,(char *)&c_null,							/*** Ver 4.5 ***/
                                    FFO_C_OPNPSTN_QTY,(char *)&l_null,							/*** Ver 4.5 ***/
                                    FFO_CVR_QTY,(char *)&l_null,
                                    FFO_C_MTM_OPN_VAL,(char *)&d_null,
                                    FFO_LST_TRD_PRC,(char *)&l_null,
                                    FFO_AMOUNT,(char *)&d_rutrd_mrgn,
                                    FFO_SPL_FLG,(char *)&c_spl_flg,
                                    FFO_MIN_LOT_QTY,(char *)&l_null,								/*** Ver 4.5 ***/
                                    FFO_QT_TRDNG_FLG,(char *)&c_null,								/*** Ver 4.5 ***/
                                    FFO_SETTLOR_STTS,(char *)&c_null,								/*** Ver 4.5 ***/
                                    FFO_U_ORDR_MRGN,(char *)&d_rordr_mrgn,
                                    FFO_UI_BUY_QTY,(char *)&l_tot_buy_qty,
                                    FFO_UI_SELL_QTY,(char *)&l_tot_sell_qty,
                                    FFO_U_MM_TRD_MRGN,(char *)&d_rumin_trd_mrgn,
                                    FFO_PRCNTG_CHNG,(char *)&l_null,
                                    FFO_EBA_MTCH_ACT_NO,(char*)&c_prev_mt_acnt,
                                    FFO_SUB_BUF_CNT,   (char *)&rec_cnt,
                                    FFO_ACTN_ID,       (char *)&l_null,							/*** Ver 4.5 ***/
                                    FFO_U_IMTM_SPRD_PL,(char *)&d_null,
                                    FFO_OPT_TYP, (char *)&c_opt_typ,
                                    FFO_STRK_PRC, (char *)&l_strike_prc,
                                    FFO_XCHNG_CD, (char *)&c_xchng_cd,
                                    FFO_BAL_AMT,(char *)&d_null,										/*** ver 4.5 ***/
                                    FFO_SOURCE_FLG, (char *)&c_spn_flg,
                                    FFO_DWL_FLG, (char *)&c_null,										/*** ver 4.5 ***/
                                    FFO_STATUS_FLG, (char *)&c_null,								/*** ver 4.5 ***/
                                    FFO_RATE, (char *)&d_null,
                                    FFO_IS_FLG, (char *)&c_null,										/*** ver 4.5 ***/
                                    FFO_RQST_TYP, (char *)&c_null,
                                    FFO_NKD_BLKD_FLG, (char *)&c_cancel_all_flag,
                                    FFO_BK_UBK_FLG,( char * )&c_null,
                                    FFO_DR_CR_FLG, (char *)&c_sqr_off_all_at_mkt,
                                  	FFO_INDX_INDCTR, (char *)&c_null,       /*** Ver 4.6 ***/
                										FFO_STLMNT_TYP, (char *)&c_null,        /*** Ver 4.6 ***/
                										FFO_BO_AMT_BLKD, (char *)&c_null,      /*** Ver 4.6 ***/
                                    FFO_EFF_EXCTD_RT, (char *)&d_null);               /*** Ver 4.7 ***/
          if ( i_returncode == -1 )
          {
            tpcommit(0);
            fn_errlog( c_ServiceName, "S31135", FMLMSG, c_errmsg  );
            EXEC SQL CLOSE :sys_cursor;
            EXEC SQL FREE :sys_cursor;
            tpfree ( ( char * ) ptr_fml_Obuf );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
          if( DEBUG_MSG_LVL_5 )
          {
            fn_userlog(c_ServiceName,"size of ptr_fml_Obuf:%ld:",Fsizeof32(ptr_fml_Obuf));
          }
          if (i_size_fup == 0 )
          {
            l_size_ocpd=Fsizeof32(ptr_fml_Obuf)-Funused32(ptr_fml_Obuf);

            if( DEBUG_MSG_LVL_3 )
            {
              fn_userlog(c_ServiceName,"Unused Size:%ld:",Funused32(ptr_fml_Obuf));
              fn_userlog(c_ServiceName,"Size Occpd:%ld:",l_size_ocpd);
            }
            i_size_fup = 1 ;
          }
          l_tot_buy_qty = l_tot_sell_qty = 0;
				}
				
				break;  /* QUIT  FOR  LOOP */
			}
				else
			{
      	tpcommit(0);
				fn_errlog( c_ServiceName, "S31140", SQLMSG, c_errmsg  );
      	EXEC SQL CLOSE :sys_cursor;
      	EXEC SQL FREE :sys_cursor;
      	tpfree ( ( char * ) ptr_fml_Obuf );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}
 
    rtrim(c_undrlyng);

		/*** Ver 4.4 Starts Here ***/
    EXEC SQL
      SELECT b_qty,
             s_qty
        INTO :l_buy_qty,
             :l_sell_qty
        FROM
			(select nvl(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0) b_qty
  		 from fod_fo_ordr_dtls 
 			 where FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
   		 and FOD_PRDCT_TYP=:c_prd_typ
   		 and FOD_UNDRLYNG=:c_undrlyng
   		 and FOD_EXPRY_DT=:c_expry_dt
   		 and FOD_SPL_FLAG='O'
   		 and FOD_ORDR_FLW='B'
			 and FOD_ORDR_STTS in ('P','O','R','Q')
			) A, 
			(select nvl(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0) s_qty
			 from fod_fo_ordr_dtls 
			 where FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
			 and FOD_PRDCT_TYP=:c_prd_typ
   		 and FOD_UNDRLYNG=:c_undrlyng
   		 and FOD_EXPRY_DT=:c_expry_dt
   		 and FOD_SPL_FLAG='O'
   		 and FOD_ORDR_FLW='S' 
			 and FOD_ORDR_STTS in ('P','O','R','Q')
			) B;

		if ( SQLCODE != 0 )
    {
      tpcommit(0);
      fn_errlog( c_ServiceName, "S31145", SQLMSG, c_errmsg  );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    li_bo_qty = li_bo_qty + l_buy_qty;
    li_so_qty = li_so_qty - l_sell_qty;
		if(c_opnpstn_flw == 'B')
		{
			l_cvr_qty = l_cvr_qty + l_sell_qty;
		}
		else if (c_opnpstn_flw == 'S')
		{
			l_cvr_qty = l_cvr_qty + l_buy_qty;
		}
  	/***** Ver 4.4 Ends here ****/ 

    /*** Ver 2.9 Starts here ***/
    if( d_trg_price == -100 || d_trg_price == 22222222 ) /* -1 in case of Buy Spread and 22222222 in case of Sell spread leg */
    {
       d_trg_price=0;
    }   
    /*** Ver 2.9 Ends here ***/

		if ( i_cntr == 0 )
		{	
			if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.4 : Debug level Change  */
			fn_userlog(c_ServiceName,"STAGE I-Inside i_cntr is 0");
			}
			strcpy(c_prev_undrlyng,c_undrlyng);
			c_prev_tag = c_cntrct_tag ;
			c_prev_ctgry_indstk=c_ctgry_indstk;      /*ver 1.8*/
			c_prev_exrc_typ=c_exrc_typ;              /*ver 1.8*/
      c_prev_prdct_typ=c_uprdct_typ;           /*ver 1.8*/
			strcpy(c_prev_mt_acnt,c_mtch_accnt_no);	 /*Ver 1.2*/
			i_cntr++ ;
		}
	
		/*** Ver 2.5 starts ***/
		EXEC SQL
			SELECT  NVL(CLM_SPAN_ALLWD,'N')
			INTO    :c_spn_flg
			FROM    CLM_CLNT_MSTR
			WHERE   CLM_MTCH_ACCNT  = :c_mtch_accnt_no;

		if ( SQLCODE != 0 )
		{
			tpcommit(0);
			fn_errlog( c_ServiceName, "S31150", SQLMSG, c_errmsg  );
			EXEC SQL CLOSE :sys_cursor;
			EXEC SQL FREE :sys_cursor;
			tpfree ( ( char * ) ptr_fml_Obuf );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		/** if( DEBUG_MSG_LVL_0 )  ** ver 3.6 **/
		if( DEBUG_MSG_LVL_3 )     /** ver 3.6 **/
		{      
			fn_userlog(c_ServiceName,"SPAN FLAG :%c:",c_spn_flg);
		}
		/*** Ver 2.5 ends ***/
		fn_userlog(c_ServiceName,"STAGE III-c_prev_undrlyng:%s: c_undrlyng:%s: c_prev_tag:%c: c_cntrct_tag:%c: c_prev_mt_acnt :%s: c_mtch_accnt_no:%s:i_counter:%d:",c_prev_undrlyng,c_undrlyng,c_prev_tag,c_cntrct_tag,c_prev_mt_acnt,c_mtch_accnt_no,i_counter);				/*** Ver 4.5 ***/
				
    if (
         (( strcmp(c_prev_undrlyng,c_undrlyng) != 0) && ( i_counter != 1 )) ||
         (( c_prev_tag != c_cntrct_tag ) && (i_counter != 1)) || ((strcmp(c_prev_mt_acnt,c_mtch_accnt_no) !=0 ) 
																													&& ( i_counter != 1 ))
       )					/**Ver 1.2 **/
    { 
			/******The group level data from fup of same mtch accnt is sent here ********/ 
			if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.4 : Debug level Change  */
      fn_userlog(c_ServiceName,"STAGE III-Inside same underlyng,diff contract tag OR diff undrlyng of same mtch accnt\
                                                  OR Diff match accnt");
			fn_userlog(c_ServiceName,"l_buy_qty :%ld: and l_sell_qty :%ld:",l_buy_qty,l_sell_qty);
			}
			
			/*** Ver 4.4 Starts ***/
			if( c_prd_typ == 'F')
			{
				if( DEBUG_MSG_LVL_3 ) 
				{
        	fn_userlog(c_ServiceName,"Checking before und change for records of RSPREAD can be shown from ORDER BOOK Only");
				}
				c_rsprd_pos_flg = '\0';
				EXEC SQL
            select TO_CHAR( FOD_EXPRY_DT, 'DD-MON-YYYY' ),
                   FOD_ORDR_FLW,
                   FTQ_CNTRCT_TAG,
									 FTQ_LST_TRD_PRC
            INTO  :c_r_exp_dt,
                  /* :c_uopnpstn_flw,	Commented in Ver 4.5 */
									:c_r_opnpstn_flw,				/* Ver 4.5 */
                  :c_r_cntrct_tag,
									:l_lst_trdd_prc
            FROM  FOD_FO_ORDR_DTLS, FTQ_FO_TRD_QT
            WHERE FOD_EXPRY_DT NOT IN (SELECT DISTINCT(FFP_EXPRY_DT)
                      FROM FFP_FO_FUTURES_PSTN
                      WHERE FFP_XCHNG_CD = :c_xchng_cd
                      AND FFP_CLM_MTCH_ACCNT = :c_prev_mt_acnt
                      AND FFP_UNDRLYNG = :c_prev_undrlyng
                      AND FFP_PRDCT_TYP = :c_prd_typ
                      AND (    FFP_OPNPSTN_QTY != 0
                      OR FFP_IBUY_QTY    != 0
                      OR FFP_ISELL_QTY   != 0 ))
            AND FTQ_EXPRY_DT = FOD_EXPRY_DT
            AND FOD_UNDRLYNG = FTQ_UNDRLYNG
            AND FTQ_PRDCT_TYP = FOD_PRDCT_TYP
            AND FOD_ORDR_STTS in ('P','O','R','Q')
            AND FOD_CLM_MTCH_ACCNT=:c_prev_mt_acnt
            AND FOD_PRDCT_TYP= :c_prd_typ
            AND FOD_UNDRLYNG= :c_prev_undrlyng
            AND FOD_SPL_FLAG='O'
            AND FOD_XCHNG_CD = :c_xchng_cd
						AND ROWNUM < 2;
				if( SQLCODE != 0 && ( SQLCODE != NO_DATA_FOUND ))
       	{
          tpcommit(0);
          fn_errlog( c_ServiceName, "S31155", SQLMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       	}
				else if ( SQLCODE == NO_DATA_FOUND )
				{
					if( DEBUG_MSG_LVL_3 ) 
					{
						fn_userlog(c_ServiceName,"No DATA inside contract change of RSPREAD to show from ORDER_BOOK Only");
					}
					c_rsprd_pos_flg = 'N';
				}
				else if( c_r_cntrct_tag == c_prev_tag)
				{
					if( DEBUG_MSG_LVL_3 ) 
					{
						fn_userlog(c_ServiceName,"RSPREAD rec are available from ORDER BOOK Only for und change");
					}
          EXEC SQL
            SELECT nvl(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0),
              FOD_CLM_MTCH_ACCNT,
              FOD_INDSTK,
              FOD_UNDRLYNG,
              FOD_EXER_TYP,
              NVL(sum(FOD_SROLL_DIFF_AMT),0),
              NVL(sum(FOD_SROLL_LSS_AMT),0)
            INTO
              :l_fod_qty,
              :c_prev_mt_acnt,
              :c_uindstk,
              :c_prev_undrlyng,
              :c_prev_exrc_typ,
              :d_rordr_mrgn,
              :d_rordr_loss_amt
            FROM  FOD_FO_ORDR_DTLS
            WHERE FOD_ORDR_STTS in ('P','O','R','Q')
            AND FOD_CLM_MTCH_ACCNT=:c_prev_mt_acnt
            AND FOD_PRDCT_TYP=:c_prd_typ
            AND FOD_UNDRLYNG=:c_prev_undrlyng
            AND FOD_EXPRY_DT = :c_r_exp_dt
            AND FOD_XCHNG_CD = :c_xchng_cd
            /* AND FOD_ORDR_FLW = :c_uopnpstn_flw	*** Commented in Ver 4.5 */
            AND FOD_ORDR_FLW = :c_r_opnpstn_flw				/* Ver 4.5 */
            AND FOD_SPL_FLAG='O'
            GROUP BY FOD_CLM_MTCH_ACCNT,FOD_INDSTK,FOD_UNDRLYNG,FOD_EXER_TYP;
          if ( SQLCODE != 0 )
        	{
          	tpcommit(0);
          	fn_errlog( c_ServiceName, "S31160", SQLMSG, c_errmsg  );
          	EXEC SQL CLOSE :sys_cursor;
          	EXEC SQL FREE :sys_cursor;
          	tpfree ( ( char * ) ptr_fml_Obuf );
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}

          l_uopnpstn_qty = 0;
          d_mtm_opn_val = 0;
          /* l_cvr_qty = 0;
          d_trg_price = 0;
          d_utrd_mrgn = 0;
          d_sprd_mrgn = 0;
					li_bo_qty = 0;
          li_so_qty = 0;					* Commented in Ver 4.5 */
          li_r_bo_qty = 0;				/* Ver 4.5 */
          li_r_so_qty = 0;				/* Ver 4.5 */
          c_uprdct_typ = c_prd_typ;
					c_rsprd_pos_flg = 'N';
					d_rordr_mrgn = d_rordr_mrgn + d_rordr_loss_amt;
				
          /* l_cvr_qty = l_cvr_qty + l_fod_qty;
          if(c_uopnpstn_flw == 'B')
          {
            li_bo_qty = li_bo_qty + l_fod_qty;
          }
          else if (c_uopnpstn_flw == 'S')
          {
            li_so_qty = li_so_qty - l_fod_qty;
          }	* Commented in Ver 4.5 */
					/*** Add starts in Ver 4.5 ***/
          if(c_r_opnpstn_flw == 'B')
          {
            li_r_bo_qty = li_r_bo_qty + l_fod_qty;
          }
          else if (c_r_opnpstn_flw == 'S')
          {
            li_r_so_qty = li_r_so_qty - l_fod_qty;
          }
					/*** Add Ends in Ver 4.5 ***/
					if( DEBUG_MSG_LVL_3 ) 
					{
           	fn_userlog(c_ServiceName,"RSPREAD From FOD ONLY :for und change: c_uprdct_typ :%c: c_uindstk :%c: c_uopnpstn_flw :%c: l_uopnpstn_qty :%ld: d_ordr_mrgn :%lf:",c_uprdct_typ,c_uindstk,c_uopnpstn_flw,l_uopnpstn_qty,d_ordr_mrgn);
					}
          /* c_jointsqroff_flg='N';
          c_sprd_trgprc_flg='N';
          c_addmrgn_flg='N';
          c_mtm_alrt_flg='N';	*** Ver 4.5 ***/
          c_spl_flg = CONTRACT_IP;
          /* c_opnpstn_flw = '-';
          li_temp = 0;
          rec_cnt=0;
          ret_val=0;
          d_avilable_amount=0; *** Ver 4.5 ***/
          i_cntrct_cnt = 0;
          /* d_base_prc = 0;		*** ver 4.5 ***/


					/*	d_ordr_mrgn = d_ordr_mrgn + d_sroll_diff_amt;	*/
					for ( i=1 ; i<=i_cntrct_cnt+1 ; i++)
          {
              i_returncode = fn_pack_vartofml ( c_ServiceName,
                                         c_errmsg,
                                         &ptr_fml_Obuf,
                                         43/** ver 4.6 39 to 42 **/, /*** Ver 4.7 ***/
                                    FFO_PRDCT_TYP,(char *)&c_uprdct_typ,
                                    FFO_CTGRY_INDSTK,(char *)&c_uindstk,
                                    FFO_UNDRLYNG,(char *)c_prev_undrlyng,
                                    FFO_EXPRY_DT,(char *)c_r_exp_dt.arr,
                                    FFO_EXER_TYP,(char *)&c_prev_exrc_typ,
                                    FFO_CNTRCT_TAG,(char *)&c_prev_tag,
                                    FFO_C_OPNPSTN_FLW,(char *)&c_null,			/*** Ver 4.5 ***/
                                    FFO_C_OPNPSTN_QTY,(char *)&l_null,			/*** Ver 4.5 ***/
                                    FFO_CVR_QTY,(char *)&l_fod_qty,									/*** Ver 4.5 ***/
                                    FFO_C_MTM_OPN_VAL,(char *)&d_null,							/*** Ver 4.5 ***/
                                    FFO_LST_TRD_PRC,(char *)&l_lst_trdd_prc,
                                    FFO_AMOUNT,(char *)&d_rutrd_mrgn,
                                    FFO_SPL_FLG,(char *)&c_spl_flg,
                                    FFO_MIN_LOT_QTY,(char *)&l_null,								/*** Ver 4.5 ***/
                                    FFO_QT_TRDNG_FLG,(char *)&c_null,								/*** Ver 4.5 ***/
                                    FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flg,
                                    FFO_U_ORDR_MRGN,(char *)&d_rordr_mrgn,
                                    FFO_UI_BUY_QTY,(char *)&li_r_bo_qty,						/*** Ver 4.5 ***/
                                    FFO_UI_SELL_QTY,(char *)&li_r_so_qty,						/*** Ver 4.5 ***/
                                    FFO_U_MM_TRD_MRGN,(char *)&d_rumin_trd_mrgn,
                                    FFO_PRCNTG_CHNG,(char *)&l_null,
                                    FFO_EBA_MTCH_ACT_NO,(char*)&c_prev_mt_acnt,
                                    FFO_SUB_BUF_CNT,   (char *)&l_null,							/*** Ver 4.5 ***/
                                    FFO_ACTN_ID,       (char *)&l_null,							/*** Ver 4.5 ***/
                                    FFO_U_IMTM_SPRD_PL,(char *)&d_null,							/*** Ver 4.5 ***/
                                    FFO_OPT_TYP, (char *)&c_opt_typ,
                                    FFO_STRK_PRC, (char *)&l_strike_prc,
                                    FFO_XCHNG_CD, (char *)&c_xchng_cd,
                                    FFO_BAL_AMT,(char *)&d_null,										/*** Ver 4.5 ***/
                                    FFO_SOURCE_FLG, (char *)&c_spn_flg,
                                    FFO_DWL_FLG, (char *)&c_null,
                                    FFO_STATUS_FLG, (char *)&c_null,
                                    FFO_RATE, (char *)&d_null,
                                    FFO_IS_FLG, (char *)&c_mtm_alrt_flg,
                                    FFO_RQST_TYP, (char *)&c_null,
                                    FFO_NKD_BLKD_FLG, (char *)&c_cancel_all_flag,
                                    FFO_BK_UBK_FLG,( char * )&c_null,
                                    FFO_DR_CR_FLG, (char *)&c_sqr_off_all_at_mkt,
                                    FFO_MOD_CAN_FLG, (char *)&c_null,			/*** ver 4.5 ***/
                                    FFO_INDX_INDCTR, (char *)&c_null,     /*** Ver 4.6 ***/
                										FFO_STLMNT_TYP, (char *)&c_null,      /*** Ver 4.6 ***/
                										FFO_BO_AMT_BLKD, (char *)&c_null,    /*** Ver 4.6 ***/
                                    FFO_EFF_EXCTD_RT, (char *)&d_null);               /*** Ver 4.7 ***/
      			if ( i_returncode == -1 )
      			{
          		tpcommit(0);
          		fn_errlog( c_ServiceName, "S31165", FMLMSG, c_errmsg  );
          		EXEC SQL CLOSE :sys_cursor;
          		EXEC SQL FREE :sys_cursor;
          		tpfree ( ( char * ) ptr_fml_Obuf );
          		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			}
          }
				}
				else
				{
					c_rsprd_pos_flg = 'Y';
					/* c_r_opnpstn_flw = c_uopnpstn_flw;		Commented in Ver 4.5 */
					l_r_ltp = l_lst_trdd_prc;
          fn_userlog(c_ServiceName,"Records of RSPREAD inside NO_DATA_FOUND are available to be shown from ORDER BOOK Only ");
				}
			}

			fn_userlog(c_ServiceName,"STAGE III-c_prev_undrlyng:%s: c_undrlyng:%s: c_prev_tag:%c: c_cntrct_tag:%c: c_prev_mt_acnt :%s: c_mtch_accnt_no:%s:",c_prev_undrlyng,c_undrlyng,c_prev_tag,c_cntrct_tag,c_prev_mt_acnt,c_mtch_accnt_no);				/*** Ver 4.5 ***/
      fn_userlog(c_ServiceName,"c_prev_mt_acnt:%s: c_xchng_cd:%s: c_prev_undrlyng:%s: c_prev_tag:%c: c_prd_typ:%c: ",c_prev_mt_acnt,c_xchng_cd,c_prev_undrlyng,c_prev_tag,c_prd_typ);
			/*** Ver 4.4 Ends   ***/
			d_sprd_mrgn	=	0.0	;			/***	Ver	2.6	***/
			d_utrd_mrgn	=	0.0	;			/***  Ver 2.6 ***/

       EXEC SQL
						 /** Commented in ver 4.4 **
             SELECT  fup_prdct_typ,
                     fup_indstk,
                     fup_uopnpstn_flw,
                     abs(fup_uopnpstn_qty),
                     fup_utrd_mrgn + fup_add_mrgn_val,
										 fup_uspread_mrgn,			***	Ver	2.6	***
										 fup_uordr_mrgn,
										 NVL(fup_umin_trd_mrgn,0)
             INTO    :c_uprdct_typ,
                     :c_uindstk,
                     :c_uopnpstn_flw,
                     :l_uopnpstn_qty,
                     :d_utrd_mrgn,
										 :d_sprd_mrgn,			***	Ver	2.6	***
                     :d_ordr_mrgn,
                     :d_umin_trd_mrgn
              FROM   fup_fut_undrlyng_pstn
              WHERE  fup_clm_mtch_accnt = :c_prev_mt_acnt												**Ver 1.2**
              AND    fup_xchng_cd = :c_xchng_cd
              AND    fup_undrlyng = :c_prev_undrlyng
              AND    fup_cntrct_tag = :c_prev_tag  
						  AND		 fup_prdct_typ = :c_prd_typ;														 * Ver 1.5 *
              ** Comment ends in ver 4.4 **/
              /*** Add start in Ver 4.4 ***/
              SELECT  FUP_PRDCT_TYP,
                      FUP_INDSTK,
                      FUP_UOPNPSTN_FLW,
                      abs(FUP_UOPNPSTN_QTY),
                      FUP_UTRD_MRGN + FUP_ADD_MRGN_VAL,
                      FUP_USPREAD_MRGN,
                      FUP_UORDR_MRGN,
                      NVL(FUP_UMIN_TRD_MRGN,0),
                      NVL(sum(FOD_SROLL_DIFF_AMT),0),
                      NVL(sum(FOD_SROLL_LSS_AMT),0)
              INTO    :c_uprdct_typ,
                      :c_uindstk,
                      :c_uopnpstn_flw,
                      :l_uopnpstn_qty,
                      :d_utrd_mrgn,
                      :d_sprd_mrgn,
                      :d_ordr_mrgn,
                      :d_umin_trd_mrgn,
                      :d_sroll_diff_amt,
                      :d_sroll_lss_amt
              FROM   FUP_FUT_UNDRLYNG_PSTN, FOD_FO_ORDR_DTLS
              WHERE  FUP_CLM_MTCH_ACCNT = :c_prev_mt_acnt
              AND    FUP_XCHNG_CD = :c_xchng_cd
              AND    FUP_UNDRLYNG = :c_prev_undrlyng
              AND    FUP_CNTRCT_TAG = :c_prev_tag
              AND    FUP_PRDCT_TYP =  :c_prd_typ
              AND    FOD_SPL_FLAG(+) = 'O'
              AND    FUP_CLM_MTCH_ACCNT = FOD_CLM_MTCH_ACCNT(+)
              AND    FUP_XCHNG_CD = FOD_XCHNG_CD(+)
              AND    FUP_UNDRLYNG = FOD_UNDRLYNG(+)
              AND    FUP_PRDCT_TYP = FOD_PRDCT_TYP(+)
              GROUP By FUP_PRDCT_TYP,FUP_INDSTK,
                    FUP_UOPNPSTN_FLW,abs(FUP_UOPNPSTN_QTY),
                    (FUP_UTRD_MRGN + FUP_ADD_MRGN_VAL),
                    FUP_USPREAD_MRGN,FUP_UORDR_MRGN,
                    NVL(FUP_UMIN_TRD_MRGN,0);

              /*** Add Ends in Ver 4.4 ***/
       if( SQLCODE != 0)
       { 
      		tpcommit(0);
					fn_errlog( c_ServiceName, "S31170", SQLMSG, c_errmsg  );
      		EXEC SQL CLOSE :sys_cursor;
      		EXEC SQL FREE :sys_cursor;
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }
			 /*** ver 4.4 Starts ***/
			 d_sroll_diff_amt = d_sroll_diff_amt + d_sroll_lss_amt;
			 if( c_prd_typ == 'F' && c_rsprd_pos_flg == 'Y')
			 {
    			if( DEBUG_MSG_LVL_3 )
    			{
						fn_userlog(c_ServiceName,"RSPREAD Order margin will be shown in second leg FOD_ONLY REC");
						fn_userlog(c_ServiceName,"d_ordr_mrgn:%lf: d_sroll_diff_amt:%lf: d_rordr_mrgn:%lf:",d_ordr_mrgn,d_sroll_diff_amt,d_rordr_mrgn);
					}
			 }
			 else if( (c_prd_typ == 'F') && 
								(strcmp(c_prev_undrlyng,c_undrlyng) == 0) && 
								(strcmp(c_prev_mt_acnt,c_mtch_accnt_no) == 0))
			 {
    			if( DEBUG_MSG_LVL_3 )
    			{
						fn_userlog(c_ServiceName,"RSPREAD Order margin will be shown in second leg");
						fn_userlog(c_ServiceName,"d_ordr_mrgn:%lf: d_sroll_diff_amt:%lf: d_rordr_mrgn:%lf:",d_ordr_mrgn,d_sroll_diff_amt,d_rordr_mrgn);
					}
			 }
			 else
			 {
       	d_ordr_mrgn = d_ordr_mrgn + d_sroll_diff_amt ;
    		if( DEBUG_MSG_LVL_3 )
    		{
					fn_userlog(c_ServiceName,"d_ordr_mrgn:%lf: d_sroll_diff_amt:%lf: d_rordr_mrgn:%lf:",d_ordr_mrgn,d_sroll_diff_amt,d_rordr_mrgn);
				}
			 }
			 /*** ver 4.4 Ends ***/

				/***	Ver	2.6	Starts	***/
				
				if ( d_utrd_mrgn != 0 )
				{
					if ( d_sprd_mrgn != 0 )
					{
    				if( DEBUG_MSG_LVL_3 )     /** ver 3.6 **/
    				{
							fn_userlog(c_ServiceName,"Inside Spread Margin Condition.");
						}
						c_jointsqroff_flg = 'Y';

            /*** Ver 2.9 starts here ***/
              if( l_uopnpstn_qty == 0 )
              {
                c_sprd_trgprc_flg='N';
              }
              /*** Ver 2.9 Ends here ***/
					}

					c_addmrgn_flg = 'Y';
				}

			  /** if( DEBUG_MSG_LVL_0 )  ** ver 3.6 **/
    		if( DEBUG_MSG_LVL_3 )     /** ver 3.6 **/
				{
					fn_userlog(c_ServiceName," Joint Square Off Flag Is :%c:",c_jointsqroff_flg);
					fn_userlog(c_ServiceName," Add Margin Flag Is :%c:",c_addmrgn_flg);
          fn_userlog(c_ServiceName,"i_cntrct_cnt :%d:",i_cntrct_cnt);
				}

				/***	Ver	2.6	Ends	***/

        /**** Ver 2.9 starts here ****/

            for ( i=1 ; i<=i_cntrct_cnt+1 ; i++)
            {
              i_returncode = fn_pack_vartofml ( c_ServiceName,
                                                  c_errmsg,
                                                  &ptr_fml_Obuf,
                                                  1,
                                                  FFO_MOD_CAN_FLG, (char *)&c_sprd_trgprc_flg
                                                );
            }
            i_cntrct_cnt = 0;
           /**** Ver 2.9 Ends here ****/
  if( DEBUG_MSG_LVL_5 ) {          /*  Ver 1.4 : Debug level Change  */
	fn_userlog(c_ServiceName,"STAGE IV-packing group level data for :%s:%s:%c",c_prev_mt_acnt,c_prev_undrlyng,c_prev_tag);
  }
   		 c_spl_flg = UNDERLYING_IP;
 			 li_temp = 0;
			 rec_cnt=1;           /**Ver 1.2**/
			 ret_val=0;					  /**Ver 1.2**/	
			 c_rollovr_flg	=	'-';	/***	Ver	2.4	***/
       c_sprd_roll_flg = '-'; /*** Ver 4.4 ***/


			/**************** 	Added for ver 1.8 					**************/
			
      /*if ( c_uprdct_typ == FUTURES )
      { */ /*commented in ver 1.9 for Available margin future plus*/
        l_sprd_qty = fn_minl(l_und_sell_opn_qty,l_und_buy_opn_qty);
	
        if( DEBUG_MSG_LVL_5 ){ 
        fn_userlog( c_ServiceName,"Calling fn_cal_min_mrgn");
				fn_userlog( c_ServiceName,"l_uopnpstn_qty is |%ld|",l_uopnpstn_qty);}

        /**** Commented in ver 2.9 ********************************************************
         **** Position level computed minimum margin shall be displayed to customer in ****
         **** Open position page **********************************************************
				**This function returns the Minimum Margin amount and MTM loss at tag level**
				d_umin_trd_mrgn=fn_cal_min_mrgn(c_ServiceName,c_prev_mt_acnt,c_prev_undrlyng,c_prev_tag,c_xchng_cd,c_uprdct_typ,
																										 c_prev_ctgry_indstk,c_prev_exrc_typ,l_lst_trdd_prc,d_curr_uopn_val,l_sprd_qty);

				if(d_umin_trd_mrgn==FAIL)
				{
					*strcpy(c_errmsg,"Error in calculating Minimum Margin amount");*
					tpcommit(0);
					fn_errlog( c_ServiceName, "S31175", Fstrerror32( i_ferr[i_cnt] ),c_errmsg  );
					EXEC SQL CLOSE :sys_cursor;
					EXEC SQL FREE :sys_cursor;
					tpfree ( ( char * ) ptr_fml_Obuf );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
        ************* Comment in Ver 2.9 Ends here **************************/

			  /*** Commented in Ver 3.1*** instead of passing previous match account, system was passing current match
        account for calculating mtm loss in case of DBC User ***	
				i_mtm_loss_stts=fn_cal_mtm_loss(c_ServiceName,c_mtch_accnt_no,c_prev_undrlyng,c_prev_tag,c_xchng_cd,c_prd_typ,
													c_prev_ctgry_indstk,c_exrc_typ,&d_mtm_loss);  ***/
        i_mtm_loss_stts=fn_cal_mtm_loss(c_ServiceName,c_prev_mt_acnt,c_prev_undrlyng,c_prev_tag,c_xchng_cd,c_prd_typ,
                          c_prev_ctgry_indstk,c_exrc_typ,&d_mtm_loss);          /*** Ver 3.1 ***/
				if(i_mtm_loss_stts==-1)
				{
					/*strcpy(c_errmsg,"Error in calculating MTM Loss");*/
					tpcommit(0);
					fn_errlog( c_ServiceName, "S31180", Fstrerror32( i_ferr[i_cnt] ),c_errmsg  );
					EXEC SQL CLOSE :sys_cursor;
					EXEC SQL FREE :sys_cursor;
					tpfree ( ( char * ) ptr_fml_Obuf );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			
			/**			Available margin = Margin on Position - MTM loss		**/
			d_avilable_amount=d_utrd_mrgn-d_mtm_loss;
      if( DEBUG_MSG_LVL_5 ){ 
		  fn_userlog( c_ServiceName,"Min Margin amount is |%lf|",d_umin_trd_mrgn);
		  fn_userlog( c_ServiceName,"MTM loss is |%lf| and Margin on position is |%lf|",d_mtm_loss,d_utrd_mrgn);
		  fn_userlog( c_ServiceName,"Available margin amount is |%lf|",d_avilable_amount);}
      /*}*/ /*commented in ver 1.9 for Available margin future plus*/

	  	/****************         ver 1.8 ends         **************/ 

      /*** Ver 2.9 Starts Here ***/
      c_mtm_alrt_flg='N';
      d_new_mm_mrgn = d_umin_trd_mrgn + ( d_umin_trd_mrgn * ( d_am_mm_diff_prcnt /100 ));
      if( DEBUG_MSG_LVL_5 )  {
        fn_userlog( c_ServiceName,"d_new_mm_mrgn |%lf|", d_new_mm_mrgn);
      }

      if( d_avilable_amount <= d_new_mm_mrgn )
      {
        c_mtm_alrt_flg ='R';
      }
      /*** Ver 2.9 Ends Here ***/
 
		 i_returncode = fn_pack_vartofml ( c_ServiceName,
				  															 c_errmsg,
																			   &ptr_fml_Obuf,
                                         42,/*ver 1.7 it was 26*/ /* 1.3 ver it as 22 *//* 1.2 Ver It was 19 in earlier */ /*** Ver 4.7 ***/
																						/***	ver	2.4	Changed From 27 To 28	***/ /*** Ver 2.5 changed from 28 to 29 ***/
																						/***	Ver	2.6	Changed From 29 To 31	***/
                                            /***  Ver 2.9 Changed from 31 to 33 ***/ /** changed to 34 in Ver 3.8 **/
																						/*** Ver 4.0 Changed from 34 to 35 ***/
                                            /*** Ver 4.2 Changed from 35 to 36 ***/
					    /*** ver 4.1 Changed from 36 to 37 ***/
																						/*** ver 4.4 Changed from 37 to 38 ***/
																						/*** ver 4.6 Changed from 38 to 41 ***/
                                    FFO_PRDCT_TYP,(char *)&c_uprdct_typ, 
																		FFO_CTGRY_INDSTK,(char *)&c_uindstk,
                     							  FFO_UNDRLYNG,(char *)c_prev_undrlyng,
																  	FFO_EXPRY_DT,(char *)c_strnull,
																		FFO_EXER_TYP,(char *)&c_null, 
																		FFO_CNTRCT_TAG,(char *)&c_prev_tag,
																		FFO_C_OPNPSTN_FLW,(char *)&c_uopnpstn_flw,
																		FFO_C_OPNPSTN_QTY,(char *)&l_uopnpstn_qty,
															  	  FFO_CVR_QTY,(char *)&l_null,	
															  		FFO_C_MTM_OPN_VAL,(char *)&d_null,
																		FFO_LST_TRD_PRC,(char *)&l_null, 
                                    FFO_AMOUNT,(char *)&d_utrd_mrgn,
                                    FFO_SPL_FLG,(char *)&c_spl_flg,
																		FFO_MIN_LOT_QTY,(char *)&li_temp,
                                    FFO_QT_TRDNG_FLG,(char *)&c_rollovr_flg,     /***  Ver 2.4 ***/
                                    FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flg,    /***  Ver 4.4 ***/
                                    FFO_U_ORDR_MRGN,(char *)&d_ordr_mrgn,
                                /**    FFO_UI_BUY_QTY,(char *)&li_temp,
                                    FFO_UI_SELL_QTY,(char *)&li_temp,   commented in ver 1.3 **/
                                    FFO_UI_BUY_QTY,(char *)&l_tot_buy_qty,  /** Added in ver 1.3 **/
                                    FFO_UI_SELL_QTY,(char *)&l_tot_sell_qty, /** Added in ver 1.3 **/ 
                                    FFO_U_MM_TRD_MRGN,(char *)&d_umin_trd_mrgn,
																		FFO_PRCNTG_CHNG,(char *)&l_null,          /* 1.1*/ /* 1.3 l_prcnt changed to l_null */
																		FFO_EBA_MTCH_ACT_NO,(char*)&c_prev_mt_acnt, /**Ver 1.2***/
																	  FFO_SUB_BUF_CNT,   (char *)&rec_cnt,/**Ver 1.2***/	
																	  FFO_ACTN_ID,       (char *)&ret_val, /**Ver 1.2***/ 	
                                    FFO_U_IMTM_SPRD_PL,(char *)&d_null, /* ver 1.3 added */
                                    FFO_OPT_TYP, (char *)&c_opt_typ,       /* ver 1.3 */
                                    FFO_STRK_PRC, (char *)&l_strike_prc,   /* ver 1.3 */
                                    FFO_XCHNG_CD, (char *)&c_xchng_cd,      /* ver 1.3 */
									                  FFO_BAL_AMT,(char *)&d_avilable_amount, /*ver 1.8*/
																		FFO_SOURCE_FLG, (char *)&c_spn_flg,			/*** Ver 2.5 ***/
																		FFO_DWL_FLG, (char *)&c_addmrgn_flg,      /*** Ver 2.6 ***/
                                    FFO_STATUS_FLG, (char *)&c_jointsqroff_flg,  /*** Ver 2.6 ***/
                                    FFO_RATE, (char *)&d_null,  /*** Ver 2.9 ***/
                                    FFO_IS_FLG, (char *)&c_mtm_alrt_flg,  /*** Ver 2.9 ***/
                                    FFO_RQST_TYP, (char *)&c_null,  /*** Ver 3.8 ***/
																		FFO_NKD_BLKD_FLG, (char *)&c_cancel_all_flag,       /*** Ver 4.0 ***/
																		FFO_BK_UBK_FLG,( char * )&c_null,    /** ver 4.2 **/
																		FFO_DR_CR_FLG, (char *)&c_sqr_off_all_at_mkt,        /*** Ver 4.1 ***/
                                  	FFO_INDX_INDCTR, (char *)&c_null,     /*** Ver 4.6 ***/	 	
                										FFO_STLMNT_TYP, (char *)&c_null,      /*** Ver 4.6 ***/
                										FFO_BO_AMT_BLKD, (char *)&c_null,    /*** Ver 4.6 ***/
                                    FFO_EFF_EXCTD_RT, (char *)&d_null);               /*** Ver 4.7 ***/

     	if ( i_returncode == -1 )
     	{
      		tpcommit(0);
          fn_errlog( c_ServiceName, "S31185", FMLMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     	}
					if( DEBUG_MSG_LVL_5 ) {          /*  Ver 1.4 : Debug level Change  */
					fn_userlog(c_ServiceName,"size of ptr_fml_Obuf:%ld:",Fsizeof32(ptr_fml_Obuf));
					}
																		/****Ver 1.2 starts ***/
					if (i_size_fup == 0 )
					{
						l_size_ocpd=Fsizeof32(ptr_fml_Obuf)-Funused32(ptr_fml_Obuf);

						if( DEBUG_MSG_LVL_3 )
						{
							fn_userlog(c_ServiceName,"Unused Size:%ld:",Funused32(ptr_fml_Obuf));
							fn_userlog(c_ServiceName,"Size Occpd:%ld:",l_size_ocpd);
						}
						i_size_fup = 1 ;
					}
																		/****Ver 1.2 ENDs ***/
        l_tot_buy_qty = l_tot_sell_qty = 0;   /** Added in ver 1.3 **/
      
    /*Ver 1.8 */
		d_mtm_loss=0;
		d_avilable_amount=0; 
    d_curr_cnt_opn_val=0;
    d_curr_uopn_val=0;
    l_und_buy_opn_qty=0;
    l_und_sell_opn_qty=0;
    /*Ver 1.8 ends*/
    d_new_mm_mrgn=0.0;  /** Ver 2.9 **/
 
			/***	Ver	2.6	Starts	***/

			c_jointsqroff_flg	=	'N';
			c_addmrgn_flg			=	'N';
			/***	Ver	2.6	Ends	***/
      c_sprd_trgprc_flg='Y';  /*** Ver 2.9 **/ 
			/*** Ver 4.4 Starts ***/
			if( c_prd_typ == 'F' && c_rsprd_pos_flg == 'Y')
			{
				if( DEBUG_MSG_LVL_3 )
				{
					fn_userlog(c_ServiceName,"Inside NEW_TAG_RSPREAD_ORD_BK only check");
				}
				/* c_uopnpstn_flw = c_r_opnpstn_flw; Commented in Ver 4.5 */
				l_lst_trdd_prc = l_r_ltp;

				c_rsprd_pos_flg = 'Y';

				EXEC SQL
						SELECT nvl(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0),
						FOD_CLM_MTCH_ACCNT,
						FOD_INDSTK,
						FOD_UNDRLYNG,
						FOD_EXER_TYP,
						NVL(sum(FOD_SROLL_DIFF_AMT),0),
						NVL(sum(FOD_SROLL_LSS_AMT),0)
						INTO
						:l_fod_qty,
						:c_prev_mt_acnt,
						:c_uindstk,
						:c_prev_undrlyng,
						:c_exrc_typ,
						:d_rordr_mrgn,
						:d_rordr_loss_amt
						FROM  FOD_FO_ORDR_DTLS
						WHERE FOD_ORDR_STTS in ('P','O','R','Q')
						AND FOD_CLM_MTCH_ACCNT=:c_prev_mt_acnt
						AND FOD_PRDCT_TYP= :c_prd_typ
						AND FOD_UNDRLYNG = :c_prev_undrlyng
						AND FOD_EXPRY_DT = :c_r_exp_dt
						AND FOD_XCHNG_CD = :c_xchng_cd
						and FOD_ORDR_FLW = :c_r_opnpstn_flw				/*** Ver 4.5 ***/
						AND FOD_SPL_FLAG = 'O'
						GROUP BY FOD_CLM_MTCH_ACCNT,FOD_INDSTK,FOD_UNDRLYNG,FOD_EXER_TYP;


					if ( SQLCODE != 0 )
					{
						tpcommit(0);
						fn_errlog( c_ServiceName, "S31190", SQLMSG, c_errmsg  );
						EXEC SQL CLOSE :sys_cursor;
						EXEC SQL FREE :sys_cursor;
						tpfree ( ( char * ) ptr_fml_Obuf );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}

					/*l_uopnpstn_qty = 0;
					d_mtm_opn_val = 0;
					l_cvr_qty = 0;
					d_trg_price = 0;
					d_sprd_mrgn = 0;
					li_bo_qty = 0;
					li_so_qty = 0;			 * Commented in Ver 4.5 */
					li_r_bo_qty = 0;		/* Ver 4.5 */
					li_r_so_qty = 0;		/* Ver 4.5 */
					rtrim(c_prev_undrlyng);
					c_uprdct_typ = c_prd_typ;
					/* l_cvr_qty = l_cvr_qty + l_fod_qty;		*** Ver 4.5 ***/
					d_rordr_mrgn = d_rordr_mrgn + d_rordr_loss_amt;
					d_rordr_mrgn = 0;
					/*** Add starts Ver 4.5 ***/
					if(c_r_opnpstn_flw == 'B')
					{
						li_r_bo_qty = li_r_bo_qty + l_fod_qty;
					}
					else if (c_r_opnpstn_flw == 'S')
					{
						li_r_so_qty = li_r_so_qty - l_fod_qty;
					}	
					/*** Add Ends in Ver 4.5 ***/
					/* if(c_uopnpstn_flw == 'B')
					{
						li_bo_qty = li_bo_qty + l_fod_qty;
					}
					else if (c_uopnpstn_flw == 'S')
					{
						li_so_qty = li_so_qty - l_fod_qty;
					}
					c_jointsqroff_flg='N';
					c_sprd_trgprc_flg='N';
					c_addmrgn_flg='N';
					c_mtm_alrt_flg='N';		* Ver 4.5 */
					c_spl_flg = CONTRACT_IP;
					/* c_opnpstn_flw = '-';
					li_temp = 0;
					rec_cnt=0;
					ret_val=0;
					d_avilable_amount=0;		*Ver 4.5 */
					i_cntrct_cnt = 0;
					/* d_base_prc = 0;		*Ver 4.5 */

					for ( i=1 ; i<=i_cntrct_cnt+1 ; i++)
					{
						i_returncode = fn_pack_vartofml ( c_ServiceName,
									 c_errmsg,
									 &ptr_fml_Obuf,
									 43/*** ver 4.6 39 to 42 ***/, /*** Ver 4.7 ***/
								    FFO_PRDCT_TYP,(char *)&c_uprdct_typ,
								    FFO_CTGRY_INDSTK,(char *)&c_uindstk,
								    FFO_UNDRLYNG,(char *)c_prev_undrlyng,
								    FFO_EXPRY_DT,(char *)c_r_exp_dt.arr,
								    FFO_EXER_TYP,(char *)&c_exrc_typ,
								    FFO_CNTRCT_TAG,(char *)&c_r_cntrct_tag,	
								    FFO_C_OPNPSTN_FLW,(char *)&c_null,						/*** Ver 4.5 ***/
								    FFO_C_OPNPSTN_QTY,(char *)&l_null,						/*** Ver 4.5 ***/
								    FFO_CVR_QTY,(char *)&l_fod_qty,								/*** Ver 4.5 ***/
								    FFO_C_MTM_OPN_VAL,(char *)&d_null,						/*** Ver 4.5 ***/
								    FFO_LST_TRD_PRC,(char *)&l_lst_trdd_prc,
								    FFO_AMOUNT,(char *)&d_rutrd_mrgn,
								    FFO_SPL_FLG,(char *)&c_spl_flg,
								    FFO_MIN_LOT_QTY,(char *)&l_null,							/*** Ver 4.5 ***/
								    FFO_QT_TRDNG_FLG,(char *)&c_null,							/*** Ver 4.5 ***/
								    FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flg,
								    FFO_U_ORDR_MRGN,(char *)&d_rordr_mrgn,
								    FFO_UI_BUY_QTY,(char *)&li_r_bo_qty,					/*** Ver 4.5 ***/
								    FFO_UI_SELL_QTY,(char *)&li_r_so_qty,					/*** Ver 4.5 ***/
								    FFO_U_MM_TRD_MRGN,(char *)&d_rumin_trd_mrgn,
								    FFO_PRCNTG_CHNG,(char *)&l_null,
								    FFO_EBA_MTCH_ACT_NO,(char*)&c_prev_mt_acnt,
								    FFO_SUB_BUF_CNT,   (char *)&l_null,						/*** Ver 4.5 ***/
								    FFO_ACTN_ID,       (char *)&l_null,						/*** Ver 4.5 ***/
								    FFO_U_IMTM_SPRD_PL,(char *)&d_null,						/*** Ver 4.5 ***/
								    FFO_OPT_TYP, (char *)&c_opt_typ,
								    FFO_STRK_PRC, (char *)&l_strike_prc,
								    FFO_XCHNG_CD, (char *)&c_xchng_cd,
								    FFO_BAL_AMT,(char *)&d_null,									/*** Ver 4.5 ***/
								    FFO_SOURCE_FLG, (char *)&c_spn_flg,
								    FFO_DWL_FLG, (char *)&c_null,
								    FFO_STATUS_FLG, (char *)&c_null,
								    FFO_RATE, (char *)&d_null,
								    FFO_IS_FLG, (char *)&c_null,									/*** Ver 4.5 ***/
								    FFO_RQST_TYP, (char *)&c_null,
								    FFO_NKD_BLKD_FLG, (char *)&c_cancel_all_flag,
								    FFO_BK_UBK_FLG,( char * )&c_null,
								    FFO_DR_CR_FLG, (char *)&c_sqr_off_all_at_mkt,
								    FFO_MOD_CAN_FLG, (char *)&c_null,							/*** ver 4.5 ***/
								    FFO_INDX_INDCTR, (char *)&c_null,     /*** Ver 4.6 ***/
                		FFO_STLMNT_TYP, (char *)&c_null,      /*** Ver 4.6 ***/
                		FFO_BO_AMT_BLKD, (char *)&c_null,      /*** Ver 4.6 ***/
									  FFO_EFF_EXCTD_RT, (char *)&d_null);               /*** Ver 4.7 ***/
						if ( i_returncode == -1 )
						{
							tpcommit(0);
							fn_errlog( c_ServiceName, "S31195", FMLMSG, c_errmsg  );
							EXEC SQL CLOSE :sys_cursor;
							EXEC SQL FREE :sys_cursor;
							tpfree ( ( char * ) ptr_fml_Obuf );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
					}
					if( DEBUG_MSG_LVL_3 )
					{
						fn_userlog(c_ServiceName,"STAGE IV-packing group level data for :%s:%s:%c",c_prev_mt_acnt,c_prev_undrlyng,c_r_cntrct_tag);			
					}
					c_spl_flg = UNDERLYING_IP;
					rec_cnt=1;
					/* li_temp = 0;
					ret_val=0;
					c_rollovr_flg  = '-';
					c_sprd_roll_flg = '-';	*** ver 4.5 ***/
					d_rordr_mrgn = d_sroll_diff_amt;
					i_returncode = fn_pack_vartofml ( c_ServiceName,
																						c_errmsg,
																						&ptr_fml_Obuf,
																						42/** ver 4.6 38 to 41 **/, /*** Ver 4.7 ***/
                                    FFO_PRDCT_TYP,(char *)&c_uprdct_typ,
                                    FFO_CTGRY_INDSTK,(char *)&c_uindstk,
                                    FFO_UNDRLYNG,(char *)c_prev_undrlyng,
                                    FFO_EXPRY_DT,(char *)c_strnull,
                                    FFO_EXER_TYP,(char *)&c_null,
                                    FFO_CNTRCT_TAG,(char *)&c_r_cntrct_tag,
                                    FFO_C_OPNPSTN_FLW,(char *)&c_null,				/*** Ver 4.5 ***/
                                    FFO_C_OPNPSTN_QTY,(char *)&l_null,				/*** Ver 4.5 ***/
                                    FFO_CVR_QTY,(char *)&l_null,
                                    FFO_C_MTM_OPN_VAL,(char *)&d_null,
                                    FFO_LST_TRD_PRC,(char *)&l_null,
                                    FFO_AMOUNT,(char *)&d_rutrd_mrgn,
                                    FFO_SPL_FLG,(char *)&c_spl_flg,
                                    FFO_MIN_LOT_QTY,(char *)&l_null,					/*** Ver 4.5 ***/
                                    FFO_QT_TRDNG_FLG,(char *)&c_null,     		/*** Ver 4.5 ***/
                                    FFO_SETTLOR_STTS,(char *)&c_null,    			/*** Ver 4.5 ***/
                                    FFO_U_ORDR_MRGN,(char *)&d_rordr_mrgn,
                                    FFO_UI_BUY_QTY,(char *)&li_r_bo_qty,  		/*** Ver 4.5 ***/
                                    FFO_UI_SELL_QTY,(char *)&li_r_so_qty, 		/*** Ver 4.5 ***/
                                    FFO_U_MM_TRD_MRGN,(char *)&d_rumin_trd_mrgn,
                                    FFO_PRCNTG_CHNG,(char *)&l_null,          
                                    FFO_EBA_MTCH_ACT_NO,(char*)&c_prev_mt_acnt, 
                                    FFO_SUB_BUF_CNT,   (char *)&rec_cnt,
                                    FFO_ACTN_ID,       (char *)&l_null, 			/*** Ver 4.5 ***/
                                    FFO_U_IMTM_SPRD_PL,(char *)&d_null, 
                                    FFO_OPT_TYP, (char *)&c_opt_typ,       
                                    FFO_STRK_PRC, (char *)&l_strike_prc,   
                                    FFO_XCHNG_CD, (char *)&c_xchng_cd,      
                                    FFO_BAL_AMT,(char *)&d_null, 							/*** ver 4.5 ***/
                                    FFO_SOURCE_FLG, (char *)&c_spn_flg,     
                                    FFO_DWL_FLG, (char *)&c_null,      			/*** ver 4.5 ***/
                                    FFO_STATUS_FLG, (char *)&c_null,  			/*** ver 4.5 ***/
                                    FFO_RATE, (char *)&d_null, 
                                    FFO_IS_FLG, (char *)&c_null,  						/*** Ver 4.5 ***/
                                    FFO_RQST_TYP, (char *)&c_null,  
                                    FFO_NKD_BLKD_FLG, (char *)&c_cancel_all_flag,       
                                    FFO_BK_UBK_FLG,( char * )&c_null,    
                                    FFO_DR_CR_FLG, (char *)&c_sqr_off_all_at_mkt,
																		FFO_INDX_INDCTR, (char *)&c_null,     /*** Ver 4.6 ***/	        
                										FFO_STLMNT_TYP, (char *)&c_null,      /*** Ver 4.6 ***/
                										FFO_BO_AMT_BLKD, (char *)&c_null,    /*** Ver 4.6 ***/
                                    FFO_EFF_EXCTD_RT, (char *)&d_null);               /*** Ver 4.7 ***/
      		if ( i_returncode == -1 )
      		{
          	tpcommit(0);
          	fn_errlog( c_ServiceName, "S31200", FMLMSG, c_errmsg  );
          	EXEC SQL CLOSE :sys_cursor;
          	EXEC SQL FREE :sys_cursor;
          	tpfree ( ( char * ) ptr_fml_Obuf );
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      		}
          if( DEBUG_MSG_LVL_5 ) 
					{          
          	fn_userlog(c_ServiceName,"size of ptr_fml_Obuf:%ld:",Fsizeof32(ptr_fml_Obuf));
          }
          if (i_size_fup == 0 )
          {
            l_size_ocpd=Fsizeof32(ptr_fml_Obuf)-Funused32(ptr_fml_Obuf);

            if( DEBUG_MSG_LVL_3 )
            {
              fn_userlog(c_ServiceName,"Unused Size:%ld:",Funused32(ptr_fml_Obuf));
              fn_userlog(c_ServiceName,"Size Occpd:%ld:",l_size_ocpd);
            }
            i_size_fup = 1 ;
          }
        	l_tot_buy_qty = l_tot_sell_qty = 0;   
				}
			fn_userlog(c_ServiceName,"After NEW_TAG_RSPREAD_ORD_BK :c_rsprd_pos_flg:%c:",c_rsprd_pos_flg);
			/*** Ver 4.4 Ends ***/
    }
    i_counter++;
    strcpy(c_prev_undrlyng,c_undrlyng);
    c_prev_tag = c_cntrct_tag;
    d_utrd_mrgn = 0;
		strcpy(c_prev_mt_acnt,c_mtch_accnt_no);					/*Ver 1.2 */
    c_prev_ctgry_indstk=c_ctgry_indstk;      /*ver 1.8*/
    c_prev_exrc_typ=c_exrc_typ;              /*ver 1.8*/
    c_prev_prdct_typ=c_uprdct_typ;           /*ver 1.8*/

    EXEC SQL
         SELECT nvl(FTQ_LST_TRD_PRC,0),
                FTQ_MIN_LOT_QTY,                                        /* Ver 3.3 */
                DECODE(:c_prd_typ,'P','Q',NVL(FTQ_ROLLOVER_FLAG,'Q')),   /* Ver 3.3 */
                NVL(FTQ_SETLMNT_FLG,'C') /* ver 4.2 */
         INTO :l_lst_trdd_prc,
              :l_lot_size,        /* Ver 3.3 */
              :c_rollover_flag,    /* Ver 3.3 */
              :c_settlement_indicator /* ver 4.2 */
				 FROM ftq_fo_trd_qt
				 WHERE ftq_xchng_cd = :c_xchng_cd
				 AND  ftq_prdct_typ = decode(:c_prd_typ, 'P', 'F', :c_prd_typ)					/* Ver 1.5 */
				 AND  ftq_indstk = :c_ctgry_indstk
         AND  ftq_undrlyng = :c_undrlyng
				 AND	FTQ_EXER_TYP = :c_exrc_typ
         AND  ftq_expry_dt = :c_expry_dt;
    
		if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ))
    { 
     	tpcommit(0);
			fn_errlog( c_ServiceName, "S31205", SQLMSG, c_errmsg  );
     	EXEC SQL CLOSE :sys_cursor;
     	EXEC SQL FREE :sys_cursor;
     	tpfree ( ( char * ) ptr_fml_Obuf );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    else if ( SQLCODE == NO_DATA_FOUND )
    {
     l_lst_trdd_prc = 0;
    }

    if( DEBUG_MSG_LVL_3 )    /*** Ver 3.2 ***/
    {
		  fn_userlog(c_ServiceName,"c_xchng_cd Is :%s:",c_xchng_cd);
		  fn_userlog(c_ServiceName,"c_prd_typ Is :%c:",c_prd_typ);
		  fn_userlog(c_ServiceName,"c_undrlyng Is :%s:",c_undrlyng);
		  fn_userlog(c_ServiceName,"c_exrc_typ Is :%c:",c_exrc_typ);
		  fn_userlog(c_ServiceName,"c_expry_dt Is :%s:",c_expry_dt.arr);	/*** Ver 4.4 *** arr added ***/
    }
   
    /*** Commented in Ver 3.3 and below columns selected in above select from FTQ ***

    EXEC SQL
			SELECT	FCM_LOT_SZ,
							DECODE(:c_prd_typ,'P','Q',NVL(FCM_ROLLOVER_FLAG,'Q'))
			INTO		:l_lot_size,
							:c_rollover_flag			***	Ver	2.4	***
			FROM		FCM_FO_CNTRCT_MSTR
			WHERE		FCM_XCHNG_CD	= :c_xchng_cd
			AND			FCM_PRDCT_TYP	= decode(:c_prd_typ, 'P', 'F', :c_prd_typ)		* Ver 1.5 *
			AND			FCM_UNDRLYNG	= :c_undrlyng
			AND			FCM_EXER_TYP	= :c_exrc_typ
			AND			FCM_EXPRY_DT	= :c_expry_dt;

		if( SQLCODE != 0)
    { 
     	tpcommit(0);
			fn_errlog( c_ServiceName, "S31210", SQLMSG, c_errmsg  );
     	EXEC SQL CLOSE :sys_cursor;
     	EXEC SQL FREE :sys_cursor;
     	tpfree ( ( char * ) ptr_fml_Obuf );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    *** Ver 3.3 Comment Ends ***/
    /*** Ver 2.7 ** Starts ***/

    if( (l_opnpstn_qty - l_cvr_qty) <= 0 )
    {
      c_rollover_flag = 'Q';
    }
    /** if( DEBUG_MSG_LVL_0 )  ** Commented in  ver 3.6 * Ver 3.2 **/
    if( DEBUG_MSG_LVL_3 )     /** ver 3.6 **/
    {
      fn_userlog(c_ServiceName," Rollover Flag is :%c:",c_rollover_flag);
    }
    /*** Ver 2.7 ** Ends ***/

    /*Ver 1.8 starts for calculating current open position value at underlying level*/

		/*********** 2.1 *********
   
    if ( c_opnpstn_flw == BUY )
    { 
    d_curr_cnt_opn_val = ((double)l_lst_trdd_prc * (double)l_opnpstn_qty); *Ver 1.8 Typecasting done for Prodn issue resolution*
    l_und_buy_opn_qty  = l_und_buy_opn_qty + l_opnpstn_qty; *Ver 1.8 Typecasting done for Prodn issue resolution*
    }
    else 
    {
    d_curr_cnt_opn_val = ((double)l_lst_trdd_prc * (double)l_opnpstn_qty * (-1)); *Ver 1.8 Typecasting done for Prodn issue resolution*
    l_und_sell_opn_qty = l_und_sell_opn_qty + l_opnpstn_qty;  *Ver 1.8 Typecasting done for Prodn issue resolution*
    }


		**************************/


    if( DEBUG_MSG_LVL_5 ) { 
    fn_userlog(c_ServiceName,"Open pstn qty is |%ld|",l_opnpstn_qty);
    fn_userlog(c_ServiceName,"Last traded price is |%ld|",l_lst_trdd_prc);   
    fn_userlog(c_ServiceName,"Open pstn flow is |%c|",c_opnpstn_flw);
    fn_userlog(c_ServiceName,"Open Position value of contract is |%lf|",d_curr_cnt_opn_val);
    fn_userlog(c_ServiceName,"Underlying level BUY open qty is |%ld|",l_und_buy_opn_qty);
    fn_userlog(c_ServiceName,"Underlying level SELL open qty is |%ld|",l_und_sell_opn_qty);
    } 
   
   /* d_curr_uopn_val = d_curr_uopn_val + d_curr_cnt_opn_val;*/ /*2.1*/

    if( DEBUG_MSG_LVL_5 ) { 
    fn_userlog(c_ServiceName,"Open Position value at underlying level is |%lf|",d_curr_uopn_val);}
    /* Ver 1.8 ends here*/

		/*** Commented in Ver 4.4 ***
	  * 1.1 starts from here. *
		EXEC SQL
    	SELECT  
            nvl(round((((MSTR.fum_oi * 100) / MWP.fum_mwp) * 100)),0)	* fum_oi is 
																																			multiplied by 100
                                                                      because it was
                                                                      stored in database
                                                                      after dividing
                                                                      by 100 *********	
			INTO
						:l_prcnt
    	FROM  fum_fo_undrlyng_mwp MWP,
            fum_fo_undrlyng_mstr MSTR
    	WHERE MWP.fum_xchng_cd                     = :c_xchng_cd
			AND		MWP.fum_undrlyng                     = :c_undrlyng
    	AND   MSTR.fum_prdct_typ                   = decode(:c_prd_typ, 'P', 'F', :c_prd_typ) 			* Ver 1.5 *
    	AND   MWP.fum_undrlyng                     = MSTR.fum_undrlyng
    	AND   MWP.fum_xchng_cd                     = MSTR.fum_xchng_cd
    	AND   to_char(MWP.fum_month_year,'YYYYMM') = to_char(sysdate,'YYYYMM');

    if( SQLCODE != 0 )
    {
			if (SQLCODE == NO_DATA_FOUND)
			{
				l_prcnt = 0;
         
   *     #ifdef DEBUG
				fn_userlog( c_ServiceName,"No Data found for percentage attained in a MWP|%s|%s|%c|", c_xchng_cd,c_undrlyng,c_prd_typ);	
        	#endif
  ver 1.3 commented *
			}
			else
			{
     		tpcommit(0);
      	fn_errlog( c_ServiceName, "S31215", SQLMSG, c_errmsg  );
      	EXEC SQL CLOSE :sys_cursor;
      	EXEC SQL FREE :sys_cursor;
      	tpfree ( ( char * ) ptr_fml_Obuf );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
    }
		* 1.1 ends here. *
		*** Comment Ends in Ver 4.4 ***/
	/*** Ver 4.4 starts ***/
	if (c_prd_typ == 'F')
	{
  	if( DEBUG_MSG_LVL_5 ) 
		{
			fn_userlog(c_ServiceName,"Finding Rollover Spread Flag for Future Product only");
		}
		EXEC SQL
			SELECT NVL(FUM_ROLLOVER_SPRD_ALLWD_FLG,'N')
			INTO	 :c_sprd_roll_flag
			FROM	 FUM_FO_UNDRLYNG_MSTR
			WHERE	 FUM_XCHNG_CD		=	:c_xchng_cd
			AND		 FUM_UNDRLYNG		=	:c_undrlyng
			AND		 FUM_PRDCT_TYP	=	:c_prd_typ;
		if( SQLCODE != 0 )
		{
			tpcommit(0);
			fn_errlog( c_ServiceName, "S31220", SQLMSG, c_errmsg  );
			EXEC SQL CLOSE :sys_cursor;
			EXEC SQL FREE :sys_cursor;
			tpfree ( ( char * ) ptr_fml_Obuf );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		if( DEBUG_MSG_LVL_5 )
    {
      fn_userlog(c_ServiceName,"FUM_ROLLOVER_SPRD_ALLWD_FLG :%c:",c_sprd_roll_flag);
    }
		l_prcnt = 0;
		if( (l_opnpstn_qty - l_cvr_qty) <= 0 )
    {
      c_sprd_roll_flag = 'N';   
    }
	}
	/*** Ver 4.4 Ends ***/
  if( DEBUG_MSG_LVL_5 ) {          /*  Ver 1.4 : Debug level Change  */
	fn_userlog(c_ServiceName,"STAGE II-packing contract level data for:%s:%s:%c",c_mtch_accnt_no,c_undrlyng,c_cntrct_tag);
  }

		ret_val=0;					  /**Ver 1.2**/	
		/*added in ver 1.3 ****/
		
		EXEC SQL 												
			SELECT decode(:l_opnpstn_qty, 0, 0, round(((:d_mtm_opn_val/:l_opnpstn_qty)/100),2) )
			INTO :d_base_prc
			FROM	dual;
		/** ver 1.3 upto here ***/

  if( DEBUG_MSG_LVL_5 ) {          /*  Ver 1.4 : Debug level Change  */
	fn_userlog(c_ServiceName,"SQLCODE is :%d:", SQLCODE );
	fn_userlog(c_ServiceName,"d_mtm_opn_val is :%lf:",d_mtm_opn_val);
	fn_userlog(c_ServiceName,"l_opnpstn_qty is :%ld:", l_opnpstn_qty);
	fn_userlog(c_ServiceName,"base price :%lf",d_base_prc );
  }


		/***** 2.1  starts ******/


		if ( c_opnpstn_flw == BUY )
    {
						d_curr_cnt_opn_val = ((double)d_base_prc* (double)l_opnpstn_qty * ( 100)); 
						l_und_buy_opn_qty  = l_und_buy_opn_qty + l_opnpstn_qty; 
    }
    else if(c_opnpstn_flw == SELL )
    {
						d_curr_cnt_opn_val = ((double)d_base_prc* (double)l_opnpstn_qty * (100)); 
						l_und_sell_opn_qty = l_und_sell_opn_qty + l_opnpstn_qty;  
    }
    else /*** Esle part is added in ver 2.2 ***/
    {
            d_curr_cnt_opn_val=0;

    }

		d_curr_uopn_val = d_curr_uopn_val + d_curr_cnt_opn_val;


		/****** 2.1  Ends ******/

		/*** Ver 4.6 Starts ***/
		c_all_flg           = 'N';
    c_indx_indctr       = 'N';
    c_dlvry_sttlmnt_typ = '\0';
		c_dlvry_enbl_flg    = '\0'; 
		SETNULL(c_flm_expr_dt);
		if ( c_settlement_indicator == 'P' ) /*** Physical Settled contract only ***/
    {
			if ( c_prd_typ == 'F' || c_prd_typ == 'O' )
      {
			if( l_opnpstn_qty == 0 )
      {
				c_indx_indctr = 'N';  /** Show Choose Delivery link **/
			}
			else
			{
    	EXEC SQL
      SELECT   NVL(FLM_DLVRYENBL_FLG,'N')
      INTO     :c_dlvry_enbl_flg
      FROM     FLM_FO_LODM_MSTR
      WHERE    FLM_UNDRLYNG = :c_undrlyng
			AND      FLM_EOS_DT >= (
			SELECT   EXG_NXT_TRD_DT
			FROM     EXG_XCHNG_MSTR
			WHERE    EXG_XCHNG_CD = 'NFO');
      /*** AND      FLM_EOS_DT >= trunc(SYSDATE); ***/

    	if( (SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ) )
    	{
      	fn_errlog( c_ServiceName, "S31225", SQLMSG, c_errmsg );
      	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
    	}
    	else if ( SQLCODE == NO_DATA_FOUND )
    	{
				c_all_flg = 'Y';
      	EXEC SQL
        	SELECT    NVL(FLM_DLVRYENBL_FLG,'N'),FLM_EXP_DT
        	INTO      :c_dlvry_enbl_flg,
       	            :c_flm_expr_dt
        	FROM      FLM_FO_LODM_MSTR
        	WHERE     FLM_UNDRLYNG = 'ALL'
      		AND      FLM_EOS_DT >= (
      		SELECT   EXG_NXT_TRD_DT
      		FROM     EXG_XCHNG_MSTR
      		WHERE    EXG_XCHNG_CD = 'NFO');
        	/*** AND       FLM_EOS_DT >= trunc(SYSDATE); ***/

 	  	  if((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
  	    {
       	 	fn_errlog( c_ServiceName, "S31230", SQLMSG, c_errmsg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
				
				if(DEBUG_MSG_LVL_3)
    		{
      		fn_userlog(c_ServiceName,"In ALL Condition:%c:",c_all_flg);
    		}
			
    	}

		if ( ( c_dlvry_enbl_flg == 'Y' && ( strcmp(c_flm_expr_dt.arr,c_expry_dt.arr) == 0 ) && c_all_flg == 'Y' ) || ( c_dlvry_enbl_flg == 'Y' && c_all_flg == 'N' ) )
    {
				/*** Background color display ***/
        if( d_dlvry_oblgamt_blckd == 0 && l_dlvry_qty_blckd == 0 )
        {
          c_dlvry_sttlmnt_typ = 'P';  /** Show Delivery in 'Pink' **/
        }
        else
        {
          c_dlvry_sttlmnt_typ = 'G';  /** Show Delivery in  'Green' **/
        }
         if ( c_dlvry_mode_flg == 'N' )
         {
           c_indx_indctr = 'D';  /** Show Choose Delivery link **/
         }
         if ( c_dlvry_mode_flg == 'Y' )
         {
           c_indx_indctr = 'C';  /** Show Choose Non Delivery link **/
         }
		
				if(DEBUG_MSG_LVL_3)
    		{
      		fn_userlog(c_ServiceName,"Settlement Flag :%c:",c_dlvry_sttlmnt_typ);
      		fn_userlog(c_ServiceName,"Index Indicator Choose Delivery/Non-Delivery :%c:",c_indx_indctr);
    		}	
	
      }
      else
      {
        c_indx_indctr = 'N';  /** Dont show any link(Choose delivery or non delivery) **/
      }
			if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Index Indicator Choose Delivery/Non-Delivery :%c:",c_indx_indctr);
      }
		 }
		}
    }
    /*** Ver 4.6 Ends ***/

    /*** Ver 3.8 Starts ***/

    if ( l_opnpstn_qty != 0 && ( li_bo_qty == 0 && li_so_qty == 0 ))
    {
      c_sqoff_at_market_flag = 'Y';
    }
    else
    {
      c_sqoff_at_market_flag = 'N'; 
	i_sqroffmkt_flg_cnt++;  /****Added in ver 4.1****/
    }

    /*** Ver 3.8 Ends   ***/
	
	 /*** Ver 4.0 starts ***/
		
		if( DEBUG_MSG_LVL_0 )
     {
      fn_userlog(c_ServiceName, "Buy Quantity :%ld:", li_bo_qty );
			fn_userlog(c_ServiceName, "Sell Quantity :%ld:", li_so_qty );
     }
	
		 if( li_bo_qty  > 0 || li_so_qty  < 0)
     {
       c_cancel_all_flag = 'Y';
     }
     else
     {
       c_cancel_all_flag = 'N';
     }
   
     /**** Ver 4.1 Start ****/
     if(i_sqroffmkt_flg_cnt == 0)
     {
       c_sqr_off_all_at_mkt = 'Y';
     }
     else
     {
       c_sqr_off_all_at_mkt = 'N';
     }
     /**** Ver 4.1  Ends  ****/

     fn_userlog(c_ServiceName," SQUARE OFF ALL AT MARKET FLAG :%c:",c_sqr_off_all_at_mkt); /*** Ver 4.1 ***/ 
 
     if( DEBUG_MSG_LVL_0 )
     {
      fn_userlog(c_ServiceName, "Cancel Flag:%c:", c_cancel_all_flag );
			fn_userlog(c_ServiceName, "Underlying :%s:", c_undrlyng );
			fn_userlog(c_ServiceName, "Expiry Date :%s:", c_expry_dt.arr );
    	fn_userlog(c_ServiceName,"c_indx_indctr :%c",c_indx_indctr );           /*** Ver 4.6 ***/ 
		}

  /*** Ver 4.0 ends ***/

		/*** Ver 4.7 ***/
		fn_userlog(c_ServiceName,"REVAMP AVG_PRC c_mtch_accnt_no=:%s: d_avg_prcs=:%lf: d_base_prc=:%lf:",c_mtch_accnt_no,d_avg_prcs,d_base_prc);
		if (d_avg_prcs == 0.0)
		{
			d_avg_prcs = d_base_prc * 100;
		}
		fn_userlog(c_ServiceName,"REVAMP AVG_PRC Final c_mtch_accnt_no=:%s: d_avg_prcs=:%lf: d_base_prc=:%lf:",c_mtch_accnt_no,d_avg_prcs,d_base_prc);
		/*** Ver 4.7 ends ***/

	  c_spl_flg = CONTRACT_IP;
    c_mtm_alrt_flg='N'; /** Ver 2.9 **/

	  i_returncode = fn_pack_vartofml ( c_ServiceName,
																			c_errmsg,
																			&ptr_fml_Obuf,
                                      42,	/*ver 1.7 it was 26*/		/* ver 1.3 it was 23 *//* 1.2 Ver Earlier it was 19 */ /*** Ver 4.7 ***/
																					/***	Ver 2.4 Changed From 27 To 28	***/ /*** Ver 2.5 changed from 28 to 29 ***/
																					/***  Ver 2.6 Changed From 29 To 31 ***/
                                          /***  Ver 2.9 Changed from 31 to 33 ***/ /** changed to 34 in Ver 3.8 **/
																					/** changed  from 34 to 35 in Ver 4.0 **/
                                          /**** ver 4.2 changed from 35 to 36 ***/ 
					    /**** ver 4.1 changed from 36 to 37 ***/ 
					    														/**** ver 4.4 changed from 37 to 38 ***/ 
					    														/**** ver 4.6 changed from 38 to 41 ***/ 
                                    FFO_PRDCT_TYP,(char *)&c_prd_typ, 
																		FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,
                     							  FFO_UNDRLYNG,(char *)c_undrlyng,
																		FFO_EXPRY_DT,(char *)c_expry_dt.arr,
																		FFO_EXER_TYP,(char *)&c_exrc_typ,
																		FFO_CNTRCT_TAG,(char *)&c_cntrct_tag,
																		FFO_C_OPNPSTN_FLW,(char *)&c_opnpstn_flw,
																		FFO_C_OPNPSTN_QTY,(char *)&l_opnpstn_qty,
															  	  FFO_CVR_QTY,(char *)&l_cvr_qty,	
																		FFO_C_MTM_OPN_VAL,(char *)&d_mtm_opn_val,
																		FFO_LST_TRD_PRC,(char *)&l_lst_trdd_prc,
                                    FFO_AMOUNT,(char *)&d_utrd_mrgn,                
                                    FFO_SPL_FLG,(char *)&c_spl_flg,
																		FFO_MIN_LOT_QTY,(char *)&l_lot_size,
																		FFO_QT_TRDNG_FLG,(char *)&c_rollover_flag,			/***	Ver	2.4	***/
                                    FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flag,     /***  Ver 4.4 ***/
																		FFO_U_ORDR_MRGN,(char *)&d_null,           /* ver 1.3 */
																		FFO_UI_BUY_QTY,(char *)&li_bo_qty,
																		FFO_UI_SELL_QTY,(char *)&li_so_qty,
                                    FFO_U_MM_TRD_MRGN,(char *)&d_null,          /* ver 1.3 */
																		FFO_PRCNTG_CHNG,(char *)&l_prcnt, 					/* ver 1.1*/ 
																		FFO_EBA_MTCH_ACT_NO,(char*)&c_mtch_accnt_no, /**Ver 1.2***/
																	  FFO_SUB_BUF_CNT,   (char *)&rec_cnt,/**Ver 1.2***/	
																	  FFO_ACTN_ID,       (char *)&ret_val, /**Ver 1.2***/ 	
																		FFO_U_IMTM_SPRD_PL,(char *)&d_base_prc,     /***Ver  1.3***/ 
                                    FFO_OPT_TYP, (char *)&c_opt_typ,       /* ver 1.3 */
                                    FFO_STRK_PRC, (char *)&l_strike_prc,   /* ver 1.3 */ 
                                    FFO_XCHNG_CD, (char *)&c_xchng_cd,      /* ver 1.3 */
																		FFO_BAL_AMT,(char *)&d_avilable_amount,/*ver 1.8*/
																		FFO_SOURCE_FLG, (char *)&c_spn_flg,			/*** Ver 2.5 ***/
																		FFO_DWL_FLG, (char *)&c_null,      /*** Ver 2.6 ***/
                                    FFO_STATUS_FLG, (char *)&c_null,  /*** Ver 2.6 ***/
                                    FFO_RATE, (char *)&d_trg_price,       /*** Ver 2.9 ***/  
                                    FFO_IS_FLG, (char *)&c_mtm_alrt_flg, /*** Ver 2.9 ***/
                                    FFO_RQST_TYP, (char *)&c_sqoff_at_market_flag,  /*** Ver 3.8 ***/
																		FFO_NKD_BLKD_FLG, (char *)&c_cancel_all_flag,       /*** Ver 4.0 ***/
                                    FFO_BK_UBK_FLG,( char * )&c_settlement_indicator, /** ver 4.2 **/
				    												FFO_DR_CR_FLG, (char *)&c_null, /*** Ver 4.1****/
																		FFO_INDX_INDCTR, (char *)&c_indx_indctr,     /*** Ver 4.6 ***/						
                										FFO_STLMNT_TYP, (char *)&c_dlvry_sttlmnt_typ,     /*** Ver 4.6 ***/
                										FFO_BO_AMT_BLKD, (char *)&d_dlvry_oblgamt_blckd,      /*** Ver 4.6 ***/
                                    FFO_EFF_EXCTD_RT, (char *)&d_avg_prcs);               /*** Ver 4.7 ***/

   l_tot_buy_qty = l_tot_buy_qty + li_bo_qty;  /** Added in ver 1.3 **/
   l_tot_sell_qty = l_tot_sell_qty + li_so_qty;  /** Added in ver 1.3 **/


     if ( i_returncode == -1 )
     {
     			tpcommit(0);
          fn_errlog( c_ServiceName, "S31235", FMLMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
					if( DEBUG_MSG_LVL_5 ) {          /*  Ver 1.4 : Debug level Change  */
					fn_userlog(c_ServiceName,"size of ptr_fml_Obuf:%ld:",Fsizeof32(ptr_fml_Obuf));
					}
																/***Ver 1.2 starts here ***/
					if (i_size_ffp == 0 )
					{
						fn_userlog(c_ServiceName,"Unused Size:%ld:",Funused32(ptr_fml_Obuf));
						l_size_ocpd=Fsizeof32(ptr_fml_Obuf)-Funused32(ptr_fml_Obuf);
						fn_userlog(c_ServiceName,"Size Occpd:%ld:",l_size_ocpd);
						i_size_ffp = 1 ;
					}
																/***Ver 1.2 starts Ends ***/
		if( DEBUG_MSG_LVL_5 ) {          /*  Ver 1.4 : Debug level Change  */
    fn_userlog(c_ServiceName,"For loop return for mtch accnt:%s:",c_mtch_accnt_no);
		}
    i_cntrct_cnt = i_cntrct_cnt + 1;  /*** Ver 2.9 ***/
			
   } /* For loop */
	/*Fprint32(ptr_fml_Obuf);Commented in Ver 1.3****/
	EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;
	tpcommit(0);					/**Ver 1.2 **/
	/*Fprint32(ptr_fml_Obuf); Ver 1.8, to be deleted after use**/
  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
}




/*********************************************************************
Function: fn_cal_min_mrgn 

Description: FUNCTION calculates MIN MARGIN AMOUNT and MTM loss of
             underlying at group level. 

Input Parameters: Service name,Match accnt,undrlyng,contract tag,
                  Exchange code,product type,category stock indicator,
                  Exercise type and address of mtm loss. 

Output Parameters: Total Minimum Margin amont 

Called by: SFO_CNTFUT_PSTN 

Calling Programs/Sub-routines : None

Author : Wipro Infotech 

Created On: 18-Aug-2008

Modification History:
Date		   Version No.		Modified by		Modification Description

18-Aug-08  Initial        Wipro         Available Margin CR changes   

To Do/ Fix Me list:

*********************************************************************/

FUNCTION double fn_cal_min_mrgn(char *c_ServiceName,char *c_mtch_accnt,char *c_undrlyng,char c_cntrct_tag,char *c_xchng_cd,char c_prdct_typ,char c_ctgry_indstk,char c_exrc_typ,long gl_lst_trdd_prc, double d_curr_uopn_val, long l_spread_qty)
{
	/*Host variable declaration*/
	EXEC SQL BEGIN DECLARE SECTION;
	char 		c_expry_dt[12];
	long  	l_uopnpstn_qty = 0; 
  long 		l_lst_trd_prc =0;
  double	d_mtm_opn_val =0.0;
	double 	d_opnpstn_qty =0.0;
	double 	d_opnpstn_qty_org =0.0;		/**2.1 **/
  sql_cursor    sys_mmcur;   
	EXEC SQL END DECLARE SECTION;

	/* Local variable declaration*/
	int     i_fn_stts=0;
  long    l_tmp_uopnpstn_qty=0;
  double  d_exectd_mrgn_cmp=0;
  double  d_spread_mrgn_cmp =0;
  double  d_sprd_profit_loss=0;
  double  d_und_opn_pos_val_cmp=0;
  double  d_min_mrgn_prcnt=0;
  double  d_fut_opn_pos_val_cmp=0;
  double  d_min_spread_mrgn=0;
  double  d_mtm_loss=0;


	double  d_base_prc = 0.0;          /** 2.1 **/
  double  d_sp_base_prc = 0.0;       /** 2.1 **/
	double  d_far_mtm_opn_val;         /** 2.1 **/
  long int  li_far_opnpstn_qty;      /** 2.1 **/

    
	MEMSET(c_expry_dt);

  if( DEBUG_MSG_LVL_3 ) { 
  fn_userlog(c_ServiceName,"INSIDE fn_cal_min_mrgn");}

	/*	Function for geting Minimum amd Spread Minimum margin percentages	*/
	
	/*** i_fn_stts=fn_get_mm_and_smm(c_ServiceName,c_mtch_accnt,c_undrlyng,c_cntrct_tag,&d_min_mrgn_prcnt,&d_min_spread_mrgn,c_prdct_typ); Commented under Ver 2.3 ***/
	i_fn_stts=fn_get_mm_and_smm(c_ServiceName,c_mtch_accnt,c_undrlyng,c_cntrct_tag,&d_min_mrgn_prcnt,&d_min_spread_mrgn,c_prdct_typ,c_xchng_cd);  /*** Ver 2.3 **/

	if(i_fn_stts==FAIL)
	{
		return FAIL;
	}

 /** if( DEBUG_MSG_LVL_0 )**  ver 3.6 *** { *** Commented in Ver 3.7 ***/
	if( DEBUG_MSG_LVL_1 ) /*** Added in Ver 3.7 ***/
	{ 	
	fn_userlog(c_ServiceName,"d_min_mrgn_per is |%lf| and d_min_spread_mrgn is |%lf|",d_min_mrgn_prcnt,d_min_spread_mrgn);}
 
  EXEC SQL
  SELECT  fup_uopnpstn_qty
  into    :l_uopnpstn_qty
  FROM    fup_fut_undrlyng_pstn
  WHERE   fup_clm_mtch_accnt = :c_mtch_accnt
  AND     fup_xchng_cd  = :c_xchng_cd
  AND     fup_undrlyng  = :c_undrlyng
  AND     fup_cntrct_tag  = :c_cntrct_tag
  AND     FUP_PRDCT_TYP = :c_prdct_typ;
  if( SQLCODE != SUCCESS )
  {
  fn_userlog(c_ServiceName," ERROR AT FETCHING spread_qty and -->ERRMSG IS [%s]",sqlca.sqlerrm.sqlerrmc);
    return  FAIL;
  }
 
	/**if( DEBUG_MSG_LVL_0 )** Ver 3.6 ** {  ** Commented in Ver 3.7 **/
	if( DEBUG_MSG_LVL_1 ) /*** Added in Ver 3.7 ***/
	{ 
  fn_userlog(c_ServiceName," Underlying level open position qty is |%ld|",l_uopnpstn_qty);
	fn_userlog(c_ServiceName," Spread qty is |%ld|",l_spread_qty);
	fn_userlog(c_ServiceName," c_ctgry_indstk  is |%c|",c_ctgry_indstk);}

	EXEC SQL ALLOCATE :sys_mmcur;

	if(l_uopnpstn_qty>0)
	{  
    if( DEBUG_MSG_LVL_5 ) {
		fn_userlog(c_ServiceName," BUY POSITION");}

		EXEC SQL  EXECUTE
		BEGIN
		OPEN		:sys_mmcur FOR
		SELECT	ffp_mtm_opn_val,
						ffp_opnpstn_qty,
						FFP_EXPRY_DT
		FROM		ffp_fo_futures_pstn
		WHERE		FFP_CLM_MTCH_ACCNT = :c_mtch_accnt
		AND			FFP_XCHNG_CD       = :c_xchng_cd
		AND			FFP_PRDCT_TYP      = :c_prdct_typ
		AND			FFP_INDSTK         = :c_ctgry_indstk
		AND			FFP_UNDRLYNG       = :c_undrlyng
		AND			FFP_CNTRCT_TAG     =:c_cntrct_tag
		AND			ffp_opnpstn_qty>0
		order by FFP_EXPRY_DT ASC;
		END;
    END-EXEC;
	}
	else if (l_uopnpstn_qty < 0)
	{
		if( DEBUG_MSG_LVL_5 ) { 
    fn_userlog(c_ServiceName," SELL POSITION");}

		EXEC SQL  EXECUTE
		BEGIN
		OPEN		:sys_mmcur FOR
		SELECT	ffp_mtm_opn_val,
						ffp_opnpstn_qty,
						FFP_EXPRY_DT
		FROM		ffp_fo_futures_pstn
		WHERE		FFP_CLM_MTCH_ACCNT = :c_mtch_accnt
		AND			FFP_XCHNG_CD       = :c_xchng_cd
		AND			FFP_PRDCT_TYP      = :c_prdct_typ
		AND			FFP_INDSTK         = :c_ctgry_indstk
		AND			FFP_UNDRLYNG       = :c_undrlyng
		AND			FFP_CNTRCT_TAG     =:c_cntrct_tag
		AND			ffp_opnpstn_qty<0
		order by FFP_EXPRY_DT ASC;		
		END;
    END-EXEC;
	}
	else 
	{
      d_und_opn_pos_val_cmp = 0;
  }
  
		l_tmp_uopnpstn_qty=l_uopnpstn_qty;

		while(l_tmp_uopnpstn_qty!=0)
		{
		/*Fetching the values from cursor*/
		EXEC SQL FETCH :sys_mmcur
		into :d_mtm_opn_val,
				 :d_opnpstn_qty,
				 :c_expry_dt;
		if( SQLCODE != SUCCESS )
		{
		  /* Ver 1.8 Additional close cursor added for production issue resolution*/	
 			EXEC SQL CLOSE :sys_mmcur;
  		EXEC SQL FREE :sys_mmcur;
      /*Ver 1.8*/
			fn_userlog(c_ServiceName," Error at fetching contract values from cursor -->ERRMSG IS [%s]",sqlca.sqlerrm.sqlerrmc);
			return  -1;
		}

		d_opnpstn_qty_org=d_opnpstn_qty;   /**2.1 **/
		
		if(l_uopnpstn_qty>0)
			d_opnpstn_qty=fn_mind(d_opnpstn_qty,(double)l_tmp_uopnpstn_qty);
		else	
			d_opnpstn_qty=fn_maxd(d_opnpstn_qty,(double)l_tmp_uopnpstn_qty);


	 /********************* Ver 2.1 **************


		*Fetching L.T.P*
		EXEC SQL
		SELECT	nvl(FTQ_LST_TRD_PRC,0)
		INTO	:l_lst_trd_prc
		FROM	ftq_fo_trd_qt
		WHERE	FTQ_XCHNG_CD	=:c_xchng_cd
		AND		FTQ_PRDCT_TYP	=decode(:c_prdct_typ,'P','F','F')
		AND		FTQ_UNDRLYNG	=:c_undrlyng
		AND		FTQ_EXPRY_DT	=:c_expry_dt
		AND		FTQ_INDSTK		=:c_ctgry_indstk
		AND		FTQ_EXER_TYP	=:c_exrc_typ;
    if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ))
    {
			if(DEBUG_MSG_LVL_3)
      * Ver 1.8 Additional close cursor added for production issue resolution*
        EXEC SQL CLOSE :sys_mmcur;
        EXEC SQL FREE :sys_mmcur;
			*Ver 1.8*

			fn_userlog(c_ServiceName,"Fetch from ftq_fo_trd_qt table failed with [%s]",SQLMSG);
      return(-1);
    }
    else if ( SQLCODE == NO_DATA_FOUND )
    {
     l_lst_trd_prc = 0;
    }

    if( DEBUG_MSG_LVL_3 ) { 
		fn_userlog(c_ServiceName,"L.T.P IS |%ld|",l_lst_trd_prc);
		fn_userlog(c_ServiceName," open position qty is |%lf|",d_opnpstn_qty);}


		*****************************************************************************/

		/************** Ver 2.1 starts ******************/

    EXEC SQL
      SELECT decode(:d_opnpstn_qty_org, 0, 0, round(((:d_mtm_opn_val/:d_opnpstn_qty_org)/100),2) )
      INTO :d_base_prc
      FROM  dual;

      if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ))
      {

        fn_userlog(c_ServiceName,"Fetch from ftq_fo_trd_qt table failed with [%s]",SQLMSG);
        return(-1);

      }

      if( DEBUG_MSG_LVL_5 ) {
      fn_userlog(c_ServiceName," Normal position");
      fn_userlog(c_ServiceName," d_mtm_opn_val |%lf|",d_mtm_opn_val);
      fn_userlog(c_ServiceName," d_opnpstn_qty |%lf|",d_opnpstn_qty);
      fn_userlog(c_ServiceName," d_base_prc is |%lf|",d_base_prc);
      }


    /************** Ver 2.1 Ends ******************/



		/********************** 2.1 ****************************

		d_fut_opn_pos_val_cmp=d_opnpstn_qty * (double)l_lst_trd_prc;*contract open position value*
		d_und_opn_pos_val_cmp= d_und_opn_pos_val_cmp + d_fut_opn_pos_val_cmp;*underlying open position value*

		*******************************************************/

		d_fut_opn_pos_val_cmp = d_opnpstn_qty * d_base_prc * 100;     /**** 2.1 ****/
		d_und_opn_pos_val_cmp = d_und_opn_pos_val_cmp + d_fut_opn_pos_val_cmp; /**** 2.1 ****/

	
		
    if( DEBUG_MSG_LVL_5 ) { 
		fn_userlog(c_ServiceName," d_fut_opn_pos_val_cmp is |%lf|",d_fut_opn_pos_val_cmp);	
		fn_userlog(c_ServiceName," d_und_opn_pos_val_cmp is |%lf|",d_und_opn_pos_val_cmp);	
		fn_userlog(c_ServiceName," d_mtm_opn_val is |%lf|",d_mtm_opn_val);}	


		l_tmp_uopnpstn_qty= l_tmp_uopnpstn_qty - d_opnpstn_qty;

	}


	d_exectd_mrgn_cmp=d_und_opn_pos_val_cmp * d_min_mrgn_prcnt/100.00;

	if(l_uopnpstn_qty<0)
		d_exectd_mrgn_cmp=d_exectd_mrgn_cmp * (-1);

  if( DEBUG_MSG_LVL_5 ) { 	
	fn_userlog(c_ServiceName," Underlying unmatched open position value at cmp IS |%lf|",d_und_opn_pos_val_cmp);
  fn_userlog(c_ServiceName," Current Underlying open position value is |%lf|",d_curr_uopn_val);
	fn_userlog(c_ServiceName," Far month contract CMP is |%ld|",gl_lst_trdd_prc);}

	d_sprd_profit_loss=d_und_opn_pos_val_cmp - d_curr_uopn_val;

	if( DEBUG_MSG_LVL_5 )
	{
		fn_userlog(c_ServiceName,"d_sprd_profit_loss :%lf:",d_sprd_profit_loss);
	}

	if((int)l_spread_qty!=0)
	{
		/*d_spread_mrgn_cmp= ((double)l_spread_qty * (double)gl_lst_trdd_prc * (d_min_spread_mrgn / 100.00));*undrlying spread margin value*/  /*** 2.1 ***/


		/***************** 2.1 starts  *************************/

      EXEC SQL
      SELECT  FFP_MTM_OPN_VAL,
              FFP_OPNPSTN_QTY
      INTO    :d_far_mtm_opn_val,
              :li_far_opnpstn_qty
      FROM    FFP_FO_FUTURES_PSTN
      WHERE   FFP_CLM_MTCH_ACCNT = :c_mtch_accnt
      AND     FFP_XCHNG_CD       = :c_xchng_cd
      AND     FFP_PRDCT_TYP      = :c_prdct_typ
      AND     FFP_UNDRLYNG       = :c_undrlyng
      AND     FFP_CNTRCT_TAG     = :c_cntrct_tag
      AND     FFP_EXPRY_DT       =
              ( SELECT  MAX(FFP_EXPRY_DT)
              FROM    FFP_FO_FUTURES_PSTN
              WHERE   FFP_CLM_MTCH_ACCNT = :c_mtch_accnt
              AND     FFP_XCHNG_CD       = :c_xchng_cd
              AND     FFP_PRDCT_TYP      = :c_prdct_typ
              AND     FFP_UNDRLYNG       = :c_undrlyng
              AND     FFP_CNTRCT_TAG     = :c_cntrct_tag
              AND     FFP_OPNPSTN_QTY    != 0 );

    if ( ( SQLCODE != 0 ) &&
         ( SQLCODE != NO_DATA_FOUND ) )
    {

          fn_userlog(c_ServiceName,"Fetch from ftq_fo_trd_qt table failed with [%s]",SQLMSG);
          return(-1);


    }

		d_sp_base_prc = (d_far_mtm_opn_val / li_far_opnpstn_qty) ;

		if( DEBUG_MSG_LVL_5 ) {
		fn_userlog(c_ServiceName,"spread position");
    fn_userlog(c_ServiceName,"d_far_mtm_opn_val :%lf:",d_far_mtm_opn_val);
    fn_userlog(c_ServiceName,"li_far_opnpstn_qty :%ld:",li_far_opnpstn_qty);
    fn_userlog(c_ServiceName,"d_sp_base_prc :%lf:",d_sp_base_prc);
		}


	 d_spread_mrgn_cmp= ((double)l_spread_qty * d_sp_base_prc * (d_min_spread_mrgn / 100.00)) ;


	 /***************** 2.1 Ends *************************/


	}
	else
	{
		d_spread_mrgn_cmp=0;
	}

  if( DEBUG_MSG_LVL_5 ) { 
	fn_userlog(c_ServiceName," Executed Margin is |%lf|",d_exectd_mrgn_cmp);
	fn_userlog(c_ServiceName," Spread  Margin is |%lf|",d_spread_mrgn_cmp);
	fn_userlog(c_ServiceName," Spread profit loss is |%lf|",d_sprd_profit_loss);}

  if( DEBUG_MSG_LVL_3 ) {
  fn_userlog(c_ServiceName,"EXITING fn_cal_min_mrgn");
  }

  /*	Minimum margin=Executed margin + spread margin - spread profit loss	*/
  /* Return 0 if Minimum margin is negative*/ 

  /* Ver 1.8 Additional close cursor added for production issue resolution*/
    EXEC SQL CLOSE :sys_mmcur;
    EXEC SQL FREE :sys_mmcur;
  /* Ver 1.8 */



  if ( d_spread_mrgn_cmp + d_exectd_mrgn_cmp <= d_sprd_profit_loss )  
       return (0);
  else
	return (d_exectd_mrgn_cmp + d_spread_mrgn_cmp - d_sprd_profit_loss);
}

/*********************************************************************
Function: fn_get_mm_and_smm 

Description: This function fetches the  minimum margin and spread minimum 
             margin percentages for a  particular Match a/c ,Underlying 
             and contract tag considering split case also. 
            
Input Parameters: Service name,accnt,undrlyng,contract tag, minimum margin,
                  spread minimum margin percentages and product type.
                 
Output Parameters: SUCCESS/FAIL(0/-1) 

Called by: fn_cal_min_mrgn 

Calling Programs/Sub-routines : None

Author : Wipro Infotech

Created On: 18-Aug-2008

Modification History:
Date       Version No.    Modified by   Modification Description

18-Aug-08  Initial        Wipro         Available Margin CR changes

To Do/ Fix Me list:

*********************************************************************/

/*** FUNCTION int fn_get_mm_and_smm(char *c_ServiceName,char *c_mtch_accnt,char *c_undrlyng,char c_cntrct_tag,double *d_min_mrgn_prcnt,double *d_min_sprd_mrgn_prcnt,char c_prdct_typ) 	Commented for Ver 2.3 ***/
FUNCTION int fn_get_mm_and_smm(char *c_ServiceName,char *c_mtch_accnt,char *c_undrlyng,char c_cntrct_tag,double *d_min_mrgn_prcnt,double *d_min_sprd_mrgn_prcnt,char c_prdct_typ,char *c_xchng_cd) /*** Ver 2.3 ***/
{
	EXEC SQL BEGIN DECLARE SECTION;
		long  l_basket_id;
	EXEC SQL END DECLARE SECTION;
		
	/** contract tag A is reserved for near month contract in split **/
	/** 								which attracts 100 % margin									**/

  if( DEBUG_MSG_LVL_3 ) {
  fn_userlog(c_ServiceName," INSIDE fn_get_mm_and_smm");
	fn_userlog(c_ServiceName," c_xchng_cd = :%s:", c_xchng_cd);}
	
	if(c_cntrct_tag=='A')
	{
		*d_min_mrgn_prcnt=100.00;
		*d_min_sprd_mrgn_prcnt=100.00;
		return SUCCESS;
	}

	EXEC SQL
	SELECT	fcb_undrlyng_bskt_id
	INTO	:l_basket_id
	FROM	fcb_fo_cln_bskt_alltd
	WHERE	fcb_cln_lvl = ( SELECT clm_clnt_lvl
				FROM	clm_clnt_mstr
				WHERE	clm_mtch_accnt =:c_mtch_accnt );
	if ( SQLCODE != SUCCESS )
	{
		fn_userlog(c_ServiceName,"Error at Fetching basket id in fn_get_mm_and_smm function");
		return FAIL;
	}

	EXEC SQL
	SELECT	decode(:c_prdct_typ,'P', fmm_thrshd_mrgn_prcnt*fmm_fp_multplr,fmm_min_mrgn_prcnt), /*Added in Ver 1.9 for Future Plus*/
					fmm_min_spread_mrgn
	INTO		:d_min_mrgn_prcnt,
					:d_min_sprd_mrgn_prcnt
	FROM		fmm_fo_mrgn_mstr
	WHERE		fmm_undrlyng_bskt_id=:l_basket_id
	AND			fmm_prdct_typ=decode(:c_prdct_typ,'P','F','F')
	AND			fmm_undrlyng= :c_undrlyng
	AND			fmm_xchng_cd= :c_xchng_cd;  /*** Ver 2.3 ***/

	if ( SQLCODE != SUCCESS )
	{
		fn_userlog(c_ServiceName,"Error at Fetching margin percerentages in fn_get_mm_and_smm");
		return FAIL;
	}

  if( DEBUG_MSG_LVL_5 ) {	
	fn_userlog(c_ServiceName,"Margin values" );
	fn_userlog(c_ServiceName,"Minimum margin :%lf:",*d_min_mrgn_prcnt);
	fn_userlog(c_ServiceName,"Min Spread Mrgn:%lf:",*d_min_sprd_mrgn_prcnt);
  fn_userlog(c_ServiceName,"EXITING fn_get_mm_and_smm ");} 
	return SUCCESS;
}


/*********************************************************************
Function: fn_cal_mtm_loss 

Description: FUNCTION calculates MTM loss of underlying at group level. 

Input Parameters: Service name,Match accnt,undrlyng,contract tag,
                  Exchange code,product type,category stock indicator,
                  Exercise type and MTM loss. 

Output Parameters: SUCCESS/FAIL(0/-1)

Called by: SFO_CNTFUT_PSTN 

Calling Programs/Sub-routines : None

Author : Wipro Infotech 

Created On: 18-Aug-2008

Modification History:
Date		   Version No.		Modified by		Modification Description

18-Aug-08  Initial        Wipro         Available Margin CR changes   

To Do/ Fix Me list:

*********************************************************************/


FUNCTION int fn_cal_mtm_loss(char *c_ServiceName,char *c_mtch_accnt,char *c_undrlyng,char c_cntrct_tag,char *c_xchng_cd,char c_prdct_typ,char c_ctgry_indstk,char c_exrc_typ,double *d_mtm_loss)
{

	EXEC SQL 
	DECLARE cntrcts_dtls
	CURSOR	For
	SELECT  to_char( ffp_expry_dt, 'DD-Mon-YYYY' ),
			nvl(ffp_opnpstn_qty,0),
			ffp_mtm_opn_val
	FROM    ffp_fo_futures_pstn
	WHERE	ffp_clm_mtch_accnt = :c_mtch_accnt
	AND     ffp_xchng_cd	= :c_xchng_cd
	AND     ffp_undrlyng	=  :c_undrlyng
	AND     ffp_cntrct_tag	= :c_cntrct_tag
	AND		ffp_prdct_typ	= :c_prdct_typ	
	AND		ffp_opnpstn_qty !=0 
	ORDER BY	ffp_clm_mtch_accnt,
				ffp_undrlyng,
				ffp_cntrct_tag,
				ffp_expry_dt;

	EXEC SQL BEGIN DECLARE SECTION;
	char	c_expry_dt[12];
	long	l_lst_trd_prc=0;
	long	l_opnpstn_qty=0;
	double	d_mtm_opn_val=0;
	EXEC SQL END DECLARE SECTION;

	double	d_mtm_opn_val_cmp=0;
  
  if( DEBUG_MSG_LVL_5 ) {	
	fn_userlog(c_ServiceName,"INSIDE fn_cal_mtm_loss");
	fn_userlog(c_ServiceName,"fn_cal_mtm_loss -->c_mtch_accnt is |%s|",c_mtch_accnt);
	fn_userlog(c_ServiceName,"fn_cal_mtm_loss -->c_xchng_cd is |%s|",c_xchng_cd);
	fn_userlog(c_ServiceName,"fn_cal_mtm_loss -->c_undrlyng is |%s|",c_undrlyng);
	fn_userlog(c_ServiceName,"fn_cal_mtm_loss -->c_cntrct_tag is |%c| and c_prdct_typ is |%c|",c_cntrct_tag,c_prdct_typ);}

	MEMSET(c_expry_dt);

	EXEC SQL 
  OPEN cntrcts_dtls;
  if ( SQLCODE != SUCCESS )
  {
  fn_userlog(c_ServiceName,"fn_cal_mtm_loss --> Cursor open failed with |%s|",sqlca.sqlerrm.sqlerrmc);
  return(-1);
  }

	while(1)
	{
		EXEC SQL
		FETCH cntrcts_dtls
		INTO	:c_expry_dt,
				:l_opnpstn_qty,
				:d_mtm_opn_val;
		if(SQLCODE != SUCCESS )
		{
			if(SQLCODE == 1403 )
			{
				break;
			}
			EXEC SQL CLOSE cntrcts_dtls;
			fn_userlog(c_ServiceName,"fn_cal_mtm_loss --> error at Fetching values from cursor and error message is |%s|",sqlca.sqlerrm.sqlerrmc);
			return -1;
		}
    if( DEBUG_MSG_LVL_5 ) {
		fn_userlog(c_ServiceName,"fn_cal_mtm_loss --> Fetching LTP");}

		/*Fetching L.T.P*/
		EXEC SQL
		SELECT	nvl(FTQ_LST_TRD_PRC,0)
		INTO	:l_lst_trd_prc
		FROM	ftq_fo_trd_qt
		WHERE	FTQ_XCHNG_CD	=:c_xchng_cd
		AND		FTQ_PRDCT_TYP	=decode(:c_prdct_typ,'P','F','F')
		AND		FTQ_UNDRLYNG	=:c_undrlyng
		AND		to_char( FTQ_EXPRY_DT,'DD-Mon-YYYY' )=:c_expry_dt
		AND		FTQ_INDSTK		=:c_ctgry_indstk
		AND		FTQ_EXER_TYP	=:c_exrc_typ;
    if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ))
    {
      if(DEBUG_MSG_LVL_3)
      fn_userlog(c_ServiceName,"Fetch from ftq_fo_trd_qt table failed with [%s]",SQLMSG);
        EXEC SQL CLOSE cntrcts_dtls;
				return(-1);
    }
    else if ( SQLCODE == NO_DATA_FOUND )
    {
     l_lst_trd_prc = 0;
		 fn_userlog(c_ServiceName,"LTP ==== 0");    
		}

		d_mtm_opn_val_cmp=((double)l_opnpstn_qty * (double)l_lst_trd_prc);
    if( DEBUG_MSG_LVL_5 ) {
		fn_userlog(c_ServiceName,"fn_cal_mtm_loss -->d_mtm_opn_val is |%lf| and same value at CMP is |%lf| ",d_mtm_opn_val,d_mtm_opn_val_cmp);}

		/*	MTM Loss is =DB value - C.M.P value	*/
		*d_mtm_loss=*d_mtm_loss +(d_mtm_opn_val-d_mtm_opn_val_cmp);
    if( DEBUG_MSG_LVL_5 ) {	
		fn_userlog(c_ServiceName,"fn_cal_mtm_loss --> LTP |%ld| for |%s|",l_lst_trd_prc,c_expry_dt);}
		         
	}
  if( DEBUG_MSG_LVL_5 ) {
  fn_userlog(c_ServiceName,"fn_cal_mtm_loss -->Original MTM Profit/Loss calculated is |%lf|",*d_mtm_loss);}
   
  if ( *d_mtm_loss <= 0 )
  *d_mtm_loss = 0; /*send only loss to calling function*/

  if( DEBUG_MSG_LVL_5 ) {	
	fn_userlog(c_ServiceName,"In function, MTM loss is |%lf|",*d_mtm_loss);
  fn_userlog(c_ServiceName,"EXITING fn_cal_mtm_loss");}

  EXEC SQL CLOSE cntrcts_dtls;

	return 0;
}
