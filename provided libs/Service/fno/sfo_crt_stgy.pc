/***********************************************************************************/
/* Program           : SFO_CRT_STGY                                                */
/*                                                                                 */
/* Input             :                                                             */
/*                                                                                 */
/* Output            :                                                             */
/*                                                                                 */
/*                                                                                 */
/* Description       : This service will save data of strategy created by user on  */
/*                     STRATEGY BUILDER page and later return the same for diplay  */
/*                     on website.																						     */
/*                                                                                 */
/* Log               : 1.0   Ravindra Panda | ISEC | 29-Mar-2022									 */
/*									 : 1.1	 Ravindra Panda	| ISEC | 15-Dec-2022									 */
/***********************************************************************************/
/* 1.0    -  New Release ( Strategy Builder )                                      */
/* 1.1		-	 MIS report chnages																										 */
/***********************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fo_view_def.h>
#include <sqlca.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_session.h>
#include <fn_pos.h>
#include <fn_ddr.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>

void SFO_CRT_STGY(TPSVCINFO * rqst)
{

	double  d_undrlyn_spot_prc = 0.0;
  double  d_rsk_free_rt = 0.0;
  long	l_strk_prc = 0;
  double  d_oi = 0.0;
  double  d_chng_oi = 0.0;
  double  d_iv = 0.0;
  double  d_ltp = 0.0;
  double  d_change = 0.0;
	double	d_delta = 0.0;
	double	d_theta = 0.0;
	double  d_gamma = 0.0;
	double	d_margin = 0.0;

  long  l_volume = 0;
  long  l_bid_prc = 0;
  long  l_bid_qty = 0;
  long  l_offr_prc = 0;
  long  l_offr_qty = 0;
	long	l_leg_count = 0;
	long	l_size = 0;

	char  c_err_msg[256];
  char  c_undrlyng[7];
  char  c_xchng_cd[4];
  char  c_expry_dt[22];
  char  c_opt_typ = '\0';
	char  c_rqst_typ = '\0';    /*** I: To insert data into table, F: To fetch data from table, D: To delete a startegy, E: Editing existing strategy ***/
  char  c_ServiceName[33];
	char  c_match_accnt[11];
	char	c_strtgy_id[10];
	char	c_action;
	char	c_strtgy_name[30];
	char  c_indx_stck = '\0';
	char  c_prd_typ = '\0';

	/** Added in VER 1.1 **/
	int  i_updtd_cnt = 0;
	int  i_srvc_cnt = 0;
	long  l_session_id = 0.0;
	char  c_user_id[11];
	char  c_src_typ = '\0';  /*** L : logged in section, N : Non-logged in section ***/
	/** VER 1.1 ends here **/
		
  int  i_err[36];
  int  i_ferr[36];
  int  i_cnt = 0;
  int  i_reccount = 0;
	int  i_tot_leg = 0;
  int  i_trnsctn = 0;
	int	 i_stgy_cnt = 0;
	int	 i_returncode = 0;
	int	 i_counter = 0;
	int	 i_strtgy_cnt = 0;
	int	 i_strtgy_exst = 0;
	int	 i_strtgy_exist = 0;
		
  /* tuxedo variables */
  FBFR32 *ptr_fml_Ibuf; /* pointer to FML input */
  FBFR32 *ptr_fml_Obuf; /* pointer to FML output */

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	ptr_fml_Obuf = (FBFR32 *) NULL;

  fn_userlog(c_ServiceName, "----------------- service %s starts here --------------------",c_ServiceName);

	/*************** Fetching request type for deciding operation type ****************/

	i_err[0] = Fget32(ptr_fml_Ibuf, FFO_RQST_TYP, 0, (char *)&c_rqst_typ, 0);
  i_ferr[0] = Ferror32;
	i_err[1] = Fget32(ptr_fml_Ibuf, FFO_EBA_MTCH_ACT_NO, 0, (char *)c_match_accnt, 0);
	i_ferr[1] = Ferror32;

	/*** Added in VER 1.1 ***/
	i_err[2] = Fget32(ptr_fml_Ibuf, FFO_USR_ID, 0, (char*)c_user_id, 0);
  i_ferr[2] = Ferror32;
	i_err[3] = Fget32(ptr_fml_Ibuf, FFO_SSSN_ID, 0, (char*)&l_session_id, 0);
	i_ferr[3] = Ferror32;
	/*** VER 1.1 ends here ***/

	for( i_cnt = 0; i_cnt < 4; i_cnt++ ) /*** Chnaged from 2 to 4 in VER 1.1 ***/
	{
		if (i_err[i_cnt] == -1)
  	{
			if( ( i_cnt == 2 || i_cnt == 3 ) && i_ferr[i_cnt] == FNOTPRES )
			{
				if(i_cnt == 2)
					strcpy(c_user_id,"system");
				else
					l_session_id = 0;
			}
			else
			{
    		fn_errlog(c_ServiceName, "S31005", "Error while fetching input.",c_err_msg);
    		fn_userlog(c_ServiceName, "Unable to fget request type");
    		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    		tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
			}
  	}
	}

	rtrim(c_match_accnt);
	/** Added in VER 1.1 ***/
	rtrim(c_user_id);
	/*** VER 1.1 ends here ***/

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog(c_ServiceName, "Request type fetched is :%c:",c_rqst_typ);
		fn_userlog(c_ServiceName, "Match ID fetched is :%s:",c_match_accnt);
		fn_userlog(c_ServiceName, "VER 1.1 : User ID is :%s:",c_user_id);
		fn_userlog(c_ServiceName, "VER 1.1: Session ID is :%ld:", l_session_id);	
	}

	/*** Added in VER 1.1 : to identify source of service call ***/

	if(strcmp(c_user_id,"system") != 0 && l_session_id != 0)
  	c_src_typ = 'L';
	else
  	c_src_typ = 'N';

	/*** VER 1.1 ends here ***/

	/*** VER 1.1 : Adding entry to table to maintain count of call and request type for report ***/

  EXEC SQL
  SELECT FSB_COUNT 
  INTO  i_srvc_cnt
  FROM  FSB_STRTGY_BLDR_COUNT
  WHERE  FSB_MATCH_ACNT = :c_match_accnt
  AND  FSB_SRVC_NM = :c_ServiceName
  AND  FSB_SRC_TYP = :c_src_typ
  AND  FSB_TM_STMP = TRUNC(SYSDATE)
  AND  FSB_USR_ID = :c_user_id;

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog( c_ServiceName, "S31010", SQLMSG,c_err_msg);
    fn_userlog(c_ServiceName,"VER 1.1 : Error while checking existance of service with req type.");
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if( DEBUG_MSG_LVL_3 )
  {
		fn_userlog(c_ServiceName, "VER 1.1 : Existing count is :%d:", i_srvc_cnt);
	}

	i_trnsctn = fn_begintran(c_ServiceName, c_err_msg);

  if (i_trnsctn == -1)
  {
    fn_userlog(c_ServiceName, "Failed in initialiaze transaction");
    fn_errlog(c_ServiceName, "S31015", TPMSG, c_err_msg);
    tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
  }

  if(i_srvc_cnt == 0)
  {

    EXEC SQL
    INSERT INTO FSB_STRTGY_BLDR_COUNT
    (
      FSB_MATCH_ACNT,
      FSB_USR_ID,
      FSB_SRVC_NM,
      FSB_SRC_TYP,
      FSB_COUNT,
      FSB_TM_STMP
    )
		 VALUES
    (
      :c_match_accnt,
      :c_user_id,
      :c_ServiceName,
      :c_src_typ,
      1,
      TRUNC(sysdate)
    );

    if(SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31020", SQLMSG,c_err_msg);
      fn_userlog(c_ServiceName,"VER 1.1 : Error while INSERTING record into table FSB_STRTGY_BLDR_COUNT .");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
	else
  {
    i_updtd_cnt = i_srvc_cnt + 1;

    EXEC SQL
    UPDATE FSB_STRTGY_BLDR_COUNT
    SET FSB_COUNT = :i_updtd_cnt
    WHERE  FSB_MATCH_ACNT = :c_match_accnt
    AND  FSB_SRVC_NM = :c_ServiceName
    AND  FSB_SRC_TYP = :c_src_typ
    AND  FSB_TM_STMP = TRUNC(SYSDATE)
    AND  FSB_USR_ID = :c_user_id;

    if(SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31025", SQLMSG,c_err_msg);
      fn_userlog(c_ServiceName,"VER 1.1 : Error while UPDATING record in FSB_STRTGY_BLDR_COUNT .");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

  }

	i_trnsctn = fn_committran(c_ServiceName, i_trnsctn, c_err_msg);
  if (i_trnsctn == -1)
  {
    fn_userlog(c_ServiceName, "Failed in committing transaction");
    fn_errlog(c_ServiceName, "S31030", TPMSG, c_err_msg);
    tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
  }

  /*** VER 1.1 ends here ***/


	/**************************** Fetching values passed as input ****************************/

	if ( c_rqst_typ == 'I' )
	{
		/************************* Number of contracts for the strategy ************************/

		i_tot_leg = Foccur32((FBFR32 * ) ptr_fml_Ibuf, FFO_EXPRY_DT);
  	
		if( DEBUG_MSG_LVL_5 )
    	fn_userlog(c_ServiceName, "Total number of contracts is :%d:", i_tot_leg);

		i_trnsctn = fn_begintran(c_ServiceName, c_err_msg);

  	if (i_trnsctn == -1)
    {
      fn_userlog(c_ServiceName, "Failed in initial begin transaction");
      fn_errlog(c_ServiceName, "S31035", TPMSG, c_err_msg);
      tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
    }

		/*** fetching strategy name and checking its a valid name ( non existing ) ***/
	
		i_err[0] = Fget32(ptr_fml_Ibuf, FFO_QUEUE_NAME, 0, (char *)c_strtgy_name, 0);
  	i_ferr[0] = Ferror32;

		if (i_err[i_cnt] == -1)
    {
      fn_errlog(c_ServiceName, "S31040", Fstrerror32(i_ferr[0]),c_err_msg);
      fn_userlog(c_ServiceName, "Unable to fget Strategy name.");
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
      tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
    }

		if( DEBUG_MSG_LVL_3 )
    	fn_userlog(c_ServiceName, "Fetched Strategy name is :%s:", c_strtgy_name);

		EXEC SQL
		SELECT COUNT(*)
		INTO	:i_strtgy_exist
		FROM	FSB_STRTGY_DTLS
		WHERE	FSB_MATCH_ACCNT = :c_match_accnt  
		AND		FSB_STRTGY_NAME = :c_strtgy_name
		AND		FSB_STRGY_STTS not in ('D');  /*** Not considering deleted strategies names ***/

		if ( SQLCODE != 0 &&  SQLCODE != NO_DATA_FOUND)
    {
      fn_userlog(c_ServiceName, "Failed while fetching count of occurance of strategy name :%s:.",c_strtgy_name);
      fn_errlog( c_ServiceName, "S31045", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    } 

		if( DEBUG_MSG_LVL_5 )
      fn_userlog(c_ServiceName, "Number of occurance of strategy name :%s: in database for match id :%s: is :%d:", c_strtgy_name, c_match_accnt, i_strtgy_exist);

		if ( i_strtgy_exist != 0 )
		{
      fn_userlog(c_ServiceName, " Strategy name :%s: already exist.",c_strtgy_name);
			fn_errlog( c_ServiceName, "S31050", "STRATEGY NAME ALREADY EXISTS.", c_err_msg  );
			strcpy(c_err_msg,"STRATEGY NAME ALREADY EXISTS.");
      fn_userlog(c_ServiceName, "ERROR MESSAGE IS :%s:", c_err_msg); /*** Error print ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		/*** Checking if 20 strategies are already saved by the customer ***/

		EXEC SQL
    SELECT COUNT(DISTINCT FSB_STRTGY_ID)
    INTO  :i_strtgy_cnt
    FROM  FSB_STRTGY_DTLS
    WHERE FSB_MATCH_ACCNT = :c_match_accnt
		AND   FSB_STRGY_STTS not in ('D');  /*** Not considering deleted strategies ***/

    if ( SQLCODE != 0 &&  SQLCODE != NO_DATA_FOUND)
    {
      fn_userlog(c_ServiceName, "Failed while fetching count of strategies saved for match id :%s:", c_match_accnt);
      fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if( DEBUG_MSG_LVL_5 )
      fn_userlog(c_ServiceName, "Number of strategies saved for match id :%s: is :%d:", c_match_accnt, i_strtgy_cnt);

    if ( i_strtgy_cnt >= 20)
    {
      fn_userlog(c_ServiceName, " 20 Strategies already saved for customer :%s:.", c_match_accnt);
      fn_errlog( c_ServiceName, "S31060", "20 Strategies already saved.", c_err_msg  );
      strcpy(c_err_msg,"MAXIMUM 20 STRATEGIES CAN BE SAVED.");
      fn_userlog(c_ServiceName, "ERROR MESSAGE IS :%s:", c_err_msg); /*** Error print ***/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		/*** Picking Strategy ID, which is inserted into table against each contract of a Particular strategy ***/ 

		EXEC SQL
    SELECT SEQ_FSB_PRTFL_ID.NEXTVAL
    INTO  :c_strtgy_id
    FROM DUAL;

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31065", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		rtrim(c_strtgy_id);
	
		for (i_reccount = 0; i_reccount < i_tot_leg; i_reccount++)
  	{
			l_leg_count = i_reccount + 1;
				
  		i_err[0] = Fget32(ptr_fml_Ibuf, FFO_UNDRLYNG, i_reccount, (char *)c_undrlyng, 0);
  		i_ferr[0] = Ferror32;
  		i_err[1] = Fget32(ptr_fml_Ibuf, FFO_EXPRY_DT, i_reccount, (char *)c_expry_dt, 0);
  		i_ferr[1] = Ferror32;
  		i_err[2] = Fget32(ptr_fml_Ibuf, FFO_STRK_PRC, i_reccount, (char *)&l_strk_prc, 0); 
  		i_ferr[2] = Ferror32;
  		i_err[3] = Fget32(ptr_fml_Ibuf, FFO_OPT_TYP, i_reccount, (char *)&c_opt_typ, 0); 
  		i_ferr[3] = Ferror32;
  		i_err[4] = Fget32(ptr_fml_Ibuf, FFO_EFF_LTP, i_reccount, (char *)&d_ltp, 0); 
  		i_ferr[4] = Ferror32;
  		i_err[5] = Fget32(ptr_fml_Ibuf, FFO_INDEX, i_reccount, (char *)&d_iv, 0);
			i_ferr[5] = Ferror32; 
  		i_err[6] = Fget32(ptr_fml_Ibuf, FFO_BST_BID_PRC, i_reccount, (char * )&l_bid_prc, 0); 
  		i_ferr[6] = Ferror32;
  		i_err[7] = Fget32(ptr_fml_Ibuf, FFO_BST_BID_QTY, i_reccount, (char *)&l_bid_qty, 0); 
  		i_ferr[7] = Ferror32;
  		i_err[8] = Fget32(ptr_fml_Ibuf, FFO_BST_OFFR_PRC, i_reccount, (char *)&l_offr_prc, 0); 
  		i_ferr[8] = Ferror32;
  		i_err[9] = Fget32(ptr_fml_Ibuf, FFO_BST_OFFR_QTY, i_reccount, (char *)&l_offr_qty, 0);
  		i_ferr[9] = Ferror32;
  		i_err[10] = Fget32(ptr_fml_Ibuf, FFO_TOT_BID_QTY, i_reccount, (char *)&d_delta, 0);  
  		i_ferr[10] = Ferror32;
  		i_err[11] = Fget32(ptr_fml_Ibuf, FFO_TOT_OFFR_QTY, i_reccount, (char *)&d_theta, 0); 
  		i_ferr[11] = Ferror32;
  		i_err[12] = Fget32(ptr_fml_Ibuf, FFO_U_TRD_MRGN, i_reccount, (char *)&d_margin, 0); 
  		i_ferr[12] = Ferror32;
  		i_err[13] = Fget32(ptr_fml_Ibuf, FFO_INDX_VAL, i_reccount, (char *)&l_size, 0); 
  		i_ferr[13] = Ferror32;
			i_err[14] = Fget32(ptr_fml_Ibuf, FFO_ORDR_FLW, i_reccount, (char *)&c_action, 0);
  		i_ferr[14] = Ferror32;
			i_err[15] = Fget32( ptr_fml_Ibuf ,FFO_XCHNG_CD, i_reccount,(char *)c_xchng_cd,0);
      i_ferr[15] = Ferror32; 	
			i_err[16] = Fget32( ptr_fml_Ibuf ,FFO_CTGRY_INDSTK, i_reccount,(char *)&c_indx_stck,0);
      i_ferr[16] = Ferror32;
			i_err[17] = Fget32( ptr_fml_Ibuf ,FFO_PRDCT_TYP, i_reccount,(char *)&c_prd_typ,0);
      i_ferr[17] = Ferror32;
			i_err[18] = Fget32( ptr_fml_Ibuf ,FFO_BO_AMT_BLKD, i_reccount, (char *)&d_gamma,0);
			i_ferr[18] = Ferror32;
	
			for (i_cnt = 0; i_cnt < 19; i_cnt++)
      {
        if (i_err[i_cnt] == -1)
        {
          fn_errlog(c_ServiceName, "S31070", Fstrerror32(i_ferr[i_cnt]), c_err_msg);
          fn_userlog(c_ServiceName, "Unable to fget :%d:", i_cnt);
          fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
          Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
          tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
        }
      }

			if( DEBUG_MSG_LVL_3 )	
			{	
				fn_userlog( c_ServiceName," Reqst type I : Match id is :%s:", c_match_accnt);
				fn_userlog( c_ServiceName," Reqst type I : Underlying :%s:", c_undrlyng);
				fn_userlog( c_ServiceName," Reqst type I : Expiry Date :%s:", c_expry_dt); 
				fn_userlog( c_ServiceName," Reqst type I : Strike Price :%ld:", l_strk_prc); 
				fn_userlog( c_ServiceName," Reqst type I : Option Type :%c:", c_opt_typ);
				fn_userlog( c_ServiceName," Reqst type I : Last Trading Price ( LTP ) :%lf:", d_ltp);
				fn_userlog( c_ServiceName," Reqst type I : IV value is :%lf:", d_iv); 
				fn_userlog( c_ServiceName," Reqst type I : Bid Price :%ld:", l_bid_prc);
				fn_userlog( c_ServiceName," Reqst type I : Bid Quantity :%ld:", l_bid_qty);
				fn_userlog( c_ServiceName," Reqst type I : Offer Price :%ld:", l_offr_prc);
				fn_userlog( c_ServiceName," Reqst type I : Offer Quantity :%ld:", l_offr_qty);
				fn_userlog( c_ServiceName," Reqst type I : Delta :%lf:", d_delta); 
				fn_userlog( c_ServiceName," Reqst type I : Theta :%lf:", d_theta); 
				fn_userlog( c_ServiceName," Reqst type I : Margin :%lf:", d_margin); 
				fn_userlog( c_ServiceName," Reqst type I : Order Lot Qauntity :%ld:", l_size); 	
				fn_userlog( c_ServiceName," Reqst type I : Action ( Buy/Sell ) :%c:", c_action);
				fn_userlog( c_ServiceName," Reqst type I : Exchange Code :%s:", c_xchng_cd); 
				fn_userlog( c_ServiceName," Reqst type I : Stock or Index :%c:", c_indx_stck);
				fn_userlog( c_ServiceName," Reqst type I : Product Type :%c:", c_prd_typ );
				fn_userlog( c_ServiceName," Reqst type I : Gamma Value :%lf:", d_gamma);
			}

			EXEC SQL
			INSERT INTO FSB_STRTGY_DTLS   
			(  
  			FSB_MATCH_ACCNT,
				FSB_STRTGY_NAME,
  			FSB_STRTGY_ID,
				FSB_STRGY_STTS,
   			FSB_ACTION,
    		FSB_UNDRLYNG,
    		FSB_STRK_PRC,
				FSB_PRD_TYP,
  			FSB_OPT_TYP,
  			FSB_EXPRY_DT,
  			FSB_ORD_SIZE,
  			FSB_LST_TRD_PRC,
  			FSB_IV,
  			FSB_BID_PRC,
  			FSB_OFFR_PRC,
  			FSB_BID_QTY,
  			FSB_OFFR_QTY,
  			FSB_DELTA,
  			FSB_THETA,
				FSB_GAMMA,
  			FSB_SPAN,
  			FSB_TM_STMP,
  			FSB_LEG_NO,
				FSB_EXCHNG_CD,
				FSB_INDX_STCK
			)
			VALUES
			(
  			:c_match_accnt,
				:c_strtgy_name,
  			:c_strtgy_id,
				'A',                    /*** A : For active strategies, D : For deleted strategies ***/
  			:c_action,
  			:c_undrlyng,
  			:l_strk_prc,
				:c_prd_typ,
  			:c_opt_typ,
  			:c_expry_dt,
  			:l_size,
  			:d_ltp,
  			:d_iv,
  			:l_bid_prc,
  			:l_offr_prc,
  			:l_bid_qty,
  			:l_offr_qty,
  			:d_delta,
  			:d_theta,
				:d_gamma,
  			:d_margin,
  			sysdate,
  			:l_leg_count,
				:c_xchng_cd,
				:c_indx_stck
			);

			if ( SQLCODE != 0 )
    	{
				fn_userlog(c_ServiceName, "Failed while inserting strategy detail into table FSB_STRTGY_DTLS for Match Id :%s:",c_match_accnt);
      	fn_errlog( c_ServiceName, "S31075", SQLMSG, c_err_msg  );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

			if( DEBUG_MSG_LVL_5 )
      {
        fn_userlog( c_ServiceName," Reqst type I : contract number :%d: out of total :%d: is inserted into table.", l_leg_count, i_tot_leg);

			}
		}        // END of for loop

		i_trnsctn = fn_committran(c_ServiceName, i_trnsctn, c_err_msg);
    if (i_trnsctn == -1)
    {
       fn_userlog(c_ServiceName, "Failed in committing transaction");
       fn_errlog(c_ServiceName, "S31080", TPMSG, c_err_msg);
       tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
    }
	}  /**** End of Request type I ****/

	if ( c_rqst_typ == 'F' )
  {	

		if( DEBUG_MSG_LVL_3 )
  	{
    	fn_userlog(c_ServiceName, "Inside request type :%c:",c_rqst_typ);
    	fn_userlog(c_ServiceName, "Fetching Strategies for Match ID :%s:",c_match_accnt);
  	}

		/******** Allocating memory to output buffer for later use ********/

  	ptr_fml_Obuf = ( FBFR32 *)NULL;
  	ptr_fml_Obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  	if ( ptr_fml_Obuf  == NULL )
  	{
    	fn_errlog( c_ServiceName, "S31085", TPMSG, c_err_msg);
    	fn_userlog( c_ServiceName, "Error while allocating memory to Buffer.");
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

		/*** Checking if Strategies exist for Match id in database ***/

		/**** COMMENTED FOR UAT TESTING **** EXEC SQL
		SELECT  COUNT( DISTINCT FSB_STRTGY_ID )
		INTO		:i_stgy_cnt
		FROM		FSB_STRTGY_DTLS
		WHERE		FSB_MATCH_ACCNT = :c_match_accnt;

		if ( SQLCODE != 0 )
    {
			fn_userlog(c_ServiceName, " Error while fetching count of strategies for Match ID :%s:", c_match_accnt);
      fn_errlog( c_ServiceName, "S31090", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char*)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if( DEBUG_MSG_LVL_5 )
      fn_userlog(c_ServiceName, " Number of Strategies for Match ID :%s: in Database is :%d:", c_match_accnt, i_stgy_cnt);	

		if ( i_stgy_cnt == 0 )
		{
			fn_userlog(c_ServiceName, "No strategies for Match ID :%s: in database.", c_match_accnt);
      fn_errlog( c_ServiceName, "S31095", "No strategies for Match ID in database.", c_err_msg  );
			strcpy( c_err_msg, "No strategies for Match ID in database.");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char*)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    } **** COMMENETED FOR UAT TESTING ****/

		/*** Fetching Strategy details into Cursor ***/

		EXEC SQL
    DECLARE strtgy_cursor CURSOR FOR
    SELECT	FSB_MATCH_ACCNT,
						FSB_STRTGY_NAME,
        		FSB_STRTGY_ID,
        		FSB_ACTION,
        		FSB_UNDRLYNG,
        		FSB_STRK_PRC,
						FSB_PRD_TYP,
        		FSB_OPT_TYP,
        		FSB_EXPRY_DT,
        		FSB_ORD_SIZE,
        		FSB_LST_TRD_PRC,
        		FSB_IV,
        		FSB_BID_PRC,
        		FSB_OFFR_PRC,
        		FSB_BID_QTY,
        		FSB_OFFR_QTY,
        		FSB_DELTA,
        		FSB_THETA,
						FSB_GAMMA,
        		FSB_SPAN,
        		FSB_LEG_NO,
						FSB_EXCHNG_CD,
						FSB_INDX_STCK
		FROM	FSB_STRTGY_DTLS
		WHERE	FSB_MATCH_ACCNT = :c_match_accnt	
		AND		FSB_STRGY_STTS = 'A'
		ORDER BY FSB_TM_STMP DESC;

		EXEC SQL
    OPEN	strtgy_cursor;
    if(SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31100", SQLMSG,c_err_msg);
      fn_userlog(c_ServiceName,"Error while fetching contract details from FSB_STRTGY_DTLS table into cursor.");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char * ) ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		for ( ; ; )  /*** Infinite FOR loop to fetch strategies from cursor strtgy_cursor starts here ***/
		{

      c_action = '\0';
			c_opt_typ = '\0';

      l_strk_prc = 0.0;
      d_ltp = 0.0;
      d_iv = 0.0;
			d_delta = 0.0;
      d_theta = 0.0;
			d_gamma = 0.0;
      d_margin = 0.0;

      l_bid_prc = 0;
      l_offr_prc = 0;
      l_bid_qty = 0;
      l_offr_qty = 0;
      l_leg_count = 0;
			l_size = 0;
		
			i_returncode = 0;

			EXEC SQL
      FETCH	strtgy_cursor 
      INTO	:c_match_accnt,
						:c_strtgy_name,
        		:c_strtgy_id,
        		:c_action,
        		:c_undrlyng,
        		:l_strk_prc,
						:c_prd_typ,
        		:c_opt_typ,
        		:c_expry_dt,
        		:l_size,
        		:d_ltp,
        		:d_iv,
        		:l_bid_prc,
        		:l_offr_prc,
        		:l_bid_qty,
        		:l_offr_qty,
        		:d_delta,
        		:d_theta,
						:d_gamma,
        		:d_margin,
        		:l_leg_count,
						:c_xchng_cd,
						:c_indx_stck;

			if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          fn_userlog(c_ServiceName,"NO DATA FOUND IN CURSOR strtgy_cursor.");
          break;
        }
        else
        {
          fn_errlog( c_ServiceName, "S31105", SQLMSG, c_err_msg  );
          fn_userlog(c_ServiceName,"Error while fetching data from strtgy_cursor cursor.");
          EXEC SQL CLOSE strtgy_cursor;
          tpfree((char * ) ptr_fml_Obuf);
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }

			if( DEBUG_MSG_LVL_3 )
      {
				fn_userlog( c_ServiceName," Reqst type F : Strategy name is :%s:", c_strtgy_name);
        fn_userlog( c_ServiceName," Reqst type F : Match id is :%s:", c_match_accnt);
				fn_userlog( c_ServiceName," Reqst type F : Strategy ID is :%s:", c_strtgy_id); 
        fn_userlog( c_ServiceName," Reqst type F : Underlying :%s:", c_undrlyng);
        fn_userlog( c_ServiceName," Reqst type F : Expiry Date :%s:", c_expry_dt);
        fn_userlog( c_ServiceName," Reqst type F : Strike Price :%ld:", l_strk_prc);
        fn_userlog( c_ServiceName," Reqst type F : Option Type :%c:", c_opt_typ);
        fn_userlog( c_ServiceName," Reqst type F : Last Trading Price ( LTP ) :%lf:", d_ltp);
        fn_userlog( c_ServiceName," Reqst type F : IV value is :%lf:", d_iv);
        fn_userlog( c_ServiceName," Reqst type F : Bid Price :%ld:", l_bid_prc);
        fn_userlog( c_ServiceName," Reqst type F : Bid Quantity :%ld:", l_bid_qty);
        fn_userlog( c_ServiceName," Reqst type F : Offer Price :%ld:", l_offr_prc);
        fn_userlog( c_ServiceName," Reqst type F : Offer Quantity :%ld:", l_offr_qty);
        fn_userlog( c_ServiceName," Reqst type F : Delta :%lf:", d_delta);
        fn_userlog( c_ServiceName," Reqst type F : Theta :%lf:", d_theta);
        fn_userlog( c_ServiceName," Reqst type F : Margin :%lf:", d_margin);
        fn_userlog( c_ServiceName," Reqst type F : Order Lot Qauntity :%ld:", l_size);
        fn_userlog( c_ServiceName," Reqst type F : Action ( Buy/Sell ) :%c:", c_action);
				fn_userlog( c_ServiceName," Reqst type F : Exchange Code :%s:", c_xchng_cd); 
      	fn_userlog( c_ServiceName," Reqst type F : Stock or Index :%c:", c_indx_stck);
				fn_userlog( c_ServiceName," Reqst type F : Product Type :%c:", c_prd_typ);
				fn_userlog( c_ServiceName," Reqst type F : Gamma :%lf:", d_gamma);
			}

			/*** Paciking values to output FMLs ***/

			i_returncode = fn_pack_vartofml(c_ServiceName,
                                    	c_err_msg,
                                    	&ptr_fml_Obuf,
																			22,
																			FFO_EBA_MTCH_ACT_NO, (char *)c_match_accnt,
																			FFO_QUEUE_NAME,	(char *)c_strtgy_name,
																			FFO_UNDRLYNG, (char *)c_undrlyng,
																			FFO_EXPRY_DT, (char *)c_expry_dt,
																			FFO_STRK_PRC, (char *)&l_strk_prc,
																			FFO_PRDCT_TYP, (char *)&c_prd_typ,
																			FFO_OPT_TYP, (char *)&c_opt_typ,
																			FFO_EFF_LTP, (char *)&d_ltp,
																			FFO_INDEX, (char *)&d_iv,
																			FFO_BST_BID_PRC, (char * )&l_bid_prc,
																			FFO_BST_BID_QTY, (char *)&l_bid_qty,
																			FFO_BST_OFFR_PRC, (char *)&l_offr_prc,
																			FFO_BST_OFFR_QTY, (char *)&l_offr_qty,
																			FFO_TOT_BID_QTY, (char *)&d_delta,
																			FFO_TOT_OFFR_QTY, (char *)&d_theta,
																			FFO_BO_AMT_BLKD, (char *)&d_gamma,
																			FFO_U_TRD_MRGN, (char *)&d_margin,
																			FFO_INDX_VAL, (char *)&l_size,
																			FFO_ORDR_FLW, (char *)&c_action,
																			FFO_SERIES, (char *)c_strtgy_id,
																			FFO_COUNT, (char *)&l_leg_count,
																		  FFO_XCHNG_CD, (char *)c_xchng_cd,
																			FFO_CTGRY_INDSTK, (char *)&c_indx_stck
																			);	

					
			if ( i_returncode != 0 )
      {
        fn_errlog( c_ServiceName, "S31110", LIBMSG, c_err_msg);
        fn_userlog( c_ServiceName, "Error while packing variable to fml.");
        EXEC SQL CLOSE strtgy_cursor;
        tpfree((char * ) ptr_fml_Obuf);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

			/************ Checking for output buffer size, alloting more space if needed or else continue **************/

      if(Fneeded32(1,MIN_FML_BUF_LEN) > Funused32(ptr_fml_Obuf))  /** Checking available buffer size **/
      {
        i_counter ++;
        ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf, Fsizeof32(ptr_fml_Obuf) + i_counter * MIN_FML_BUF_LEN * 5 );
        if ( ptr_fml_Obuf == NULL )
        {
          fn_errlog( c_ServiceName, "S31115", TPMSG, c_err_msg  );
          tpfree ( ( char * ) ptr_fml_Obuf );
          EXEC SQL CLOSE strtgy_cursor; 
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }

		}  /*** Infinite FOR loop to fetch strategies from cursor strtgy_cursor ends here ***/

	}  /**** End of Request type F ****/

	if ( c_rqst_typ == 'D' )    /*** request type for deleting startegies starts here ***/
	{
  	i_err[0] = Fget32(ptr_fml_Ibuf, FFO_QUEUE_NAME, 0, (char *)c_strtgy_name, 0);
  	i_ferr[0] = Ferror32;
  	i_err[0] = Fget32(ptr_fml_Ibuf, FFO_SERIES, 0, (char *)c_strtgy_id, 0);
  	i_ferr[0] = Ferror32;

  	for (i_cnt = 0; i_cnt < 2; i_cnt++)
  	{
    	if (i_err[i_cnt] == -1)
    	{
      	fn_errlog(c_ServiceName, "S31120", Fstrerror32(i_ferr[i_cnt]), c_err_msg);
      	fn_userlog(c_ServiceName, "Unable to fget :%d:", i_cnt);
      	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
      	tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
    	}
  	}

  	rtrim(c_match_accnt);
  	rtrim(c_strtgy_name);
  	rtrim(c_strtgy_id);

  	if( DEBUG_MSG_LVL_3 )
  	{
    	fn_userlog( c_ServiceName," Reqst type I : Match id is :%s:", c_match_accnt);
    	fn_userlog( c_ServiceName," Reqst type I : Strategy Name is :%s:", c_strtgy_name);
    	fn_userlog( c_ServiceName," Reqst type I : Strategy ID is :%s:", c_strtgy_id);
 	  }

		/*** initializing transaction ***/

		i_trnsctn = fn_begintran(c_ServiceName, c_err_msg);

    if (i_trnsctn == -1)
    {
      fn_userlog(c_ServiceName, "Failed in initial begin transaction");
      fn_errlog(c_ServiceName, "S31125", TPMSG, c_err_msg);
      tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
    }

  	EXEC SQL
  	UPDATE  FSB_STRTGY_DTLS
  	SET  FSB_STRGY_STTS = 'D'
  	WHERE  FSB_MATCH_ACCNT = :c_match_accnt
  	AND  FSB_STRTGY_NAME = :c_strtgy_name
  	AND  FSB_STRTGY_ID = :c_strtgy_id;

  	if ( SQLCODE != 0 )
  	{
    	if( SQLCODE != NO_DATA_FOUND )
    	{
      	fn_userlog(c_ServiceName, "Strategy :%s: doesn't exist.",c_strtgy_name);
      	fn_errlog( c_ServiceName, "S31130", "STRATEGY DOESN'T EXIST", c_err_msg  );
				fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   	  }

    	fn_userlog(c_ServiceName, "Failed while updating status of strategy :%s:.",c_strtgy_name);
    	fn_errlog( c_ServiceName, "S31135", SQLMSG, c_err_msg  );
			fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

		i_trnsctn = fn_committran(c_ServiceName, i_trnsctn, c_err_msg);
    if (i_trnsctn == -1)
    {
       fn_userlog(c_ServiceName, "Failed in committing transaction");
       fn_errlog(c_ServiceName, "S31140", TPMSG, c_err_msg);
       tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
    }

  	if( DEBUG_MSG_LVL_5 )
    	fn_userlog( c_ServiceName," Strategy with ID :%s: and name :%s: for customer having match id :%s: DELETED.", c_strtgy_id, c_strtgy_name, c_match_accnt);
	}   /*** Request type D ends here ***/

	if ( c_rqst_typ == 'E' )  /*** Request type E : used for updating existing strategy, starts here ***/
  {
    /*** Fetching strategy name and id to update its content ***/

    i_err[0] = Fget32(ptr_fml_Ibuf, FFO_QUEUE_NAME, 0, (char *)c_strtgy_name, 0);
    i_ferr[0] = Ferror32;
    i_err[0] = Fget32(ptr_fml_Ibuf, FFO_SERIES, 0, (char *)c_strtgy_id, 0);
    i_ferr[0] = Ferror32;

    for (i_cnt = 0; i_cnt < 2; i_cnt++)
    {
      if (i_err[i_cnt] == -1)
      {
        fn_errlog(c_ServiceName, "S31145", Fstrerror32(i_ferr[i_cnt]), c_err_msg);
        fn_userlog(c_ServiceName, "Unable to fget :%d:", i_cnt);
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
        tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
      }
    }

    rtrim(c_match_accnt);
    rtrim(c_strtgy_name);
    rtrim(c_strtgy_id);

    if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog( c_ServiceName," Reqst type E : Match id is :%s:", c_match_accnt);
      fn_userlog( c_ServiceName," Reqst type E : Strategy Name is :%s:", c_strtgy_name);
      fn_userlog( c_ServiceName," Reqst type E : Strategy ID is :%s:", c_strtgy_id);
    }

    EXEC SQL
    SELECT count(*) 
    INTO  :i_strtgy_exst
    FROM  FSB_STRTGY_DTLS
    WHERE  FSB_MATCH_ACCNT = :c_match_accnt
    AND  FSB_STRTGY_NAME = :c_strtgy_name
    AND  FSB_STRTGY_ID = :c_strtgy_id;

    if ( SQLCODE != 0 )
    {
      fn_userlog(c_ServiceName, " Error while checking existance of strategy with name :%s: and ID :%s: for customer with match ID :%s:", c_strtgy_name, c_strtgy_id, c_match_accnt);
      fn_errlog( c_ServiceName, "S31150", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if ( i_strtgy_exst == 0 )
    {
      fn_userlog(c_ServiceName, "Stratgey with name :%s: and ID :%s: doesn,t exist for Match ID :%s: in database.", c_strtgy_name, c_strtgy_id, c_match_accnt);
      fn_errlog( c_ServiceName, "S31155", "Desired STRATEGY doesn,y exist.", c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    /*** initializing transaction ***/

    i_trnsctn = fn_begintran(c_ServiceName, c_err_msg);

    if (i_trnsctn == -1)
    {
      fn_userlog(c_ServiceName, "Failed in initial begin transaction");
      fn_errlog(c_ServiceName, "S31160", TPMSG, c_err_msg);
      tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
    }

    EXEC SQL
    DELETE FROM  FSB_STRTGY_DTLS
    WHERE  FSB_MATCH_ACCNT = :c_match_accnt
    AND  FSB_STRTGY_NAME = :c_strtgy_name
    AND  FSB_STRTGY_ID = :c_strtgy_id;

    if ( SQLCODE != 0 )
    {
      fn_userlog(c_ServiceName, " Error while checking existance of strategy with name :%s: and ID :%s: for customer with match ID :%s:", c_strtgy_name, c_strtgy_id, c_match_accnt);
      fn_errlog( c_ServiceName, "S31165", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    i_tot_leg = Foccur32((FBFR32 * ) ptr_fml_Ibuf, FFO_EXPRY_DT);

    
    for (i_reccount = 0; i_reccount < i_tot_leg; i_reccount++)
    {
      l_leg_count = i_reccount + 1;/************************* Number of contracts for the strategy ************************/
 
      i_err[0] = Fget32(ptr_fml_Ibuf, FFO_UNDRLYNG, i_reccount, (char *)c_undrlyng, 0);
      i_ferr[0] = Ferror32;
      i_err[1] = Fget32(ptr_fml_Ibuf, FFO_EXPRY_DT, i_reccount, (char *)c_expry_dt, 0);
      i_ferr[1] = Ferror32;
      i_err[2] = Fget32(ptr_fml_Ibuf, FFO_STRK_PRC, i_reccount, (char *)&l_strk_prc, 0);
      i_ferr[2] = Ferror32;
      i_err[3] = Fget32(ptr_fml_Ibuf, FFO_OPT_TYP, i_reccount, (char *)&c_opt_typ, 0);
      i_ferr[3] = Ferror32;
      i_err[4] = Fget32(ptr_fml_Ibuf, FFO_EFF_LTP, i_reccount, (char *)&d_ltp, 0);
      i_ferr[4] = Ferror32;
      i_err[5] = Fget32(ptr_fml_Ibuf, FFO_INDEX, i_reccount, (char *)&d_iv, 0);
      i_ferr[5] = Ferror32;
      i_err[6] = Fget32(ptr_fml_Ibuf, FFO_BST_BID_PRC, i_reccount, (char * )&l_bid_prc, 0);
      i_ferr[6] = Ferror32;
      i_err[7] = Fget32(ptr_fml_Ibuf, FFO_BST_BID_QTY, i_reccount, (char *)&l_bid_qty, 0);
      i_ferr[7] = Ferror32;
      i_err[8] = Fget32(ptr_fml_Ibuf, FFO_BST_OFFR_PRC, i_reccount, (char *)&l_offr_prc, 0);
      i_ferr[8] = Ferror32;
      i_err[9] = Fget32(ptr_fml_Ibuf, FFO_BST_OFFR_QTY, i_reccount, (char *)&l_offr_qty, 0);
      i_ferr[9] = Ferror32;
      i_err[10] = Fget32(ptr_fml_Ibuf, FFO_TOT_BID_QTY, i_reccount, (char *)&d_delta, 0);
      i_ferr[10] = Ferror32;
      i_err[11] = Fget32(ptr_fml_Ibuf, FFO_TOT_OFFR_QTY, i_reccount, (char *)&d_theta, 0);
      i_ferr[11] = Ferror32;
      i_err[12] = Fget32(ptr_fml_Ibuf, FFO_U_TRD_MRGN, i_reccount, (char *)&d_margin, 0);
      i_ferr[12] = Ferror32;
      i_err[13] = Fget32(ptr_fml_Ibuf, FFO_INDX_VAL, i_reccount, (char *)&l_size, 0);
      i_ferr[13] = Ferror32;
      i_err[14] = Fget32(ptr_fml_Ibuf, FFO_ORDR_FLW, i_reccount, (char *)&c_action, 0);
      i_ferr[14] = Ferror32;
			i_err[15] = Fget32( ptr_fml_Ibuf ,FFO_XCHNG_CD, i_reccount,(char *)c_xchng_cd,0);
      i_ferr[15] = Ferror32;
			i_err[16] = Fget32( ptr_fml_Ibuf ,FFO_CTGRY_INDSTK, i_reccount,(char *)&c_indx_stck ,0);
      i_ferr[16] = Ferror32;
			i_err[17] = Fget32( ptr_fml_Ibuf ,FFO_PRDCT_TYP, i_reccount,(char *)&c_prd_typ,0);
      i_ferr[17] = Ferror32;
			i_err[18] = Fget32( ptr_fml_Ibuf ,FFO_BO_AMT_BLKD, i_reccount, (char *)&d_gamma,0);
      i_ferr[18] = Ferror32;

      for (i_cnt = 0; i_cnt < 19; i_cnt++)
      {
        if (i_err[i_cnt] == -1)
        {
          fn_errlog(c_ServiceName, "S31170", Fstrerror32(i_ferr[i_cnt]), c_err_msg);
          fn_userlog(c_ServiceName, "Unable to fget :%d:", i_cnt);
          fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
          Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
          tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
        }
      }

      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog( c_ServiceName," Reqst type E : Match id is :%s:", c_match_accnt);
        fn_userlog( c_ServiceName," Reqst type E : Underlying :%s:", c_undrlyng);
        fn_userlog( c_ServiceName," Reqst type E : Expiry Date :%s:", c_expry_dt);
        fn_userlog( c_ServiceName," Reqst type E : Strike Price :%ld:", l_strk_prc);
        fn_userlog( c_ServiceName," Reqst type E : Option Type :%c:", c_opt_typ);
        fn_userlog( c_ServiceName," Reqst type E : Last Trading Price ( LTP ) :%lf:", d_ltp);
        fn_userlog( c_ServiceName," Reqst type E : IV value is :%lf:", d_iv);
        fn_userlog( c_ServiceName," Reqst type E : Bid Price :%ld:", l_bid_prc);
        fn_userlog( c_ServiceName," Reqst type E : Bid Quantity :%ld:", l_bid_qty);
        fn_userlog( c_ServiceName," Reqst type E : Offer Price :%ld:", l_offr_prc);
        fn_userlog( c_ServiceName," Reqst type E : Offer Quantity :%ld:", l_offr_qty);
        fn_userlog( c_ServiceName," Reqst type E : Delta :%lf:", d_delta);
        fn_userlog( c_ServiceName," Reqst type E : Theta :%lf:", d_theta);
        fn_userlog( c_ServiceName," Reqst type E : Margin :%lf:", d_margin);
        fn_userlog( c_ServiceName," Reqst type E : Order Lot Qauntity :%ld:", l_size);
        fn_userlog( c_ServiceName," Reqst type E : Action ( Buy/Sell ) :%c:", c_action);
      	fn_userlog( c_ServiceName," Reqst type E : Index or Stock :%c:", c_indx_stck );
				fn_userlog( c_ServiceName," Reqst type E : Product Type :%c:", c_prd_typ);
				fn_userlog( c_ServiceName," Reqst type E : Gamma Value :%lf:", d_gamma);	
			}

      EXEC SQL
      INSERT INTO FSB_STRTGY_DTLS
      (
        FSB_MATCH_ACCNT,
        FSB_STRTGY_NAME,
        FSB_STRTGY_ID,
        FSB_STRGY_STTS,
        FSB_ACTION,
        FSB_UNDRLYNG,
        FSB_STRK_PRC,
				FSB_PRD_TYP,
        FSB_OPT_TYP,
        FSB_EXPRY_DT,
        FSB_ORD_SIZE,
        FSB_LST_TRD_PRC,
        FSB_IV,
        FSB_BID_PRC,
        FSB_OFFR_PRC,
        FSB_BID_QTY,
        FSB_OFFR_QTY,
        FSB_DELTA,
        FSB_THETA,
				FSB_GAMMA,
        FSB_SPAN,
        FSB_TM_STMP,
        FSB_LEG_NO,
				FSB_EXCHNG_CD,
				FSB_INDX_STCK
      )
      VALUES
      (
        :c_match_accnt,
        :c_strtgy_name,
        :c_strtgy_id,
        'A',                    /*** A : For active strategies, D : For deleted strategies ***/
        :c_action,
        :c_undrlyng,
        :l_strk_prc,
				:c_prd_typ,
        :c_opt_typ,
        :c_expry_dt,
        :l_size,
        :d_ltp,
        :d_iv,
        :l_bid_prc,
        :l_offr_prc,
        :l_bid_qty,
        :l_offr_qty,
        :d_delta,
        :d_theta,
				:d_gamma,
        :d_margin,
        sysdate,
        :l_leg_count,
				:c_xchng_cd,
				:c_indx_stck
      );

       if ( SQLCODE != 0 )
      {
        fn_userlog(c_ServiceName,"Failed while inserting strategy detail into table FSB_STRTGY_DTLS for Match Id :%s:",c_match_accnt);
        fn_errlog( c_ServiceName, "S31175", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if( DEBUG_MSG_LVL_5 )
      {
        fn_userlog( c_ServiceName," Reqst type E : contract number :%d: out of total :%d: is inserted into table.", l_leg_count, i_tot_leg);

      }
    }        // END of for loop

    i_trnsctn = fn_committran(c_ServiceName, i_trnsctn, c_err_msg);
    if (i_trnsctn == -1)
    {
       fn_userlog(c_ServiceName, "Failed in committing transaction");
       fn_errlog(c_ServiceName, "S31180", TPMSG, c_err_msg);
       tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
    }
  } /*** Request type E ends here ***/
    

	tpreturn(TPSUCCESS, SUCC_BFR, (char *)ptr_fml_Obuf, 0, 0 );
	
}  /*** End of Main function ***/		
