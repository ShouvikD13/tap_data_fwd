/******************************************************************************/
/*	Program	    			:	SFO_UPD_QT                                            */
/*                                                                            */
/*  Input             : vw_cntrct_qt                                          */
/*                                                                            */
/*  Output            : vw_cntrct_qt                                          */
/*  										vw_err_msg                                            */
/*                                                                            */
/*  Description       : This service updates the brief quotes of a contract   */
/*                      based on the type                                     *//*                      1.Update details of EOD qoutes                        */
/*                      2.Update details of long qoutes                       */
/*                      3.Update details of short quotes                      */
/*                      4.Update Close Price match download                   */
/*											contract viz: last traded qty, last traded price,     *//*											last traded time, best bid qty and price, best offer  *//*                      qty and price and price information like open,high,   *//*											low, close price, previous close price, net change    *//*                      from previous close price, high price and low price   *//*                      range.                                                */
/*                                                                            */
/*  Log               : 1.0 	21-Sep-2001		Ramesh Reddy.V                    */
/*                    : 1.1   18-Dec-2007   Vidyayini Krish                   */
/*                    : 1.2   10-Feb-2014   Sachin Birje                      */
/*                    : 1.3   24-Feb-2014   Sachin Birje                      */
/*                    : 1.4   05-Nov-2014   Navina D.                         */
/*                    : 1.5   27-Aug-2020   Anuj Pancholi                     */
/*                                                                            */
/******************************************************************************/
/*	1.0		-		New Release                                                     */
/*  1.1   -   IBM Changes                                                     */
/*  1.2   -   Change of view variable for total val traded                    */
/*  1.3   -   Replacing fn_begintran & fn_committran with new functions       */
/*            fn_nolog_begintran & fn_nolog_committran                        */
/*  1.4   -   NNF Trade execution range broadcast change                      */
/*  1.5   -   CR-ISEC10-138335 : Changes for updating fresh OI for Fresh Contrcts Added Snap View FnO */
/*******************************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h> /* Ver 1.1 */
#include <fn_read_debug_lvl.h> /* Ver 1.1 */

void SFO_UPD_QT( TPSVCINFO *rqst )
{
  char  c_ServiceName[33];
  char  c_errmsg[256];
	int		i_trnsctn;

  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_cntrct_qt *ptr_st_cntrct_qt;
    varchar c_expiry_dt [ LEN_DATE ];
    varchar c_lst_trd_tm [ LEN_DATE ];
		double	d_date_diff;
		double  d_pcnt_chg_prev_cls;
  EXEC SQL END DECLARE SECTION;

  struct vw_err_msg *ptr_st_err_msg;

  ptr_st_cntrct_qt = ( struct vw_cntrct_qt * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);

  ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
  if ( ptr_st_err_msg ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31005", TPMSG, c_errmsg );
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }

  memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_cntrct_qt->c_expry_dt );
  SETLEN ( c_expiry_dt );
  strcpy ( ( char * )c_lst_trd_tm.arr, ptr_st_cntrct_qt->c_lst_trdd_time );
  SETLEN ( c_lst_trd_tm );
	rtrim(ptr_st_cntrct_qt->c_undrlyng);

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_cntrct_qt->c_rout_crt );

		/***	i_trnsctn = fn_begintran( c_ServiceName, c_errmsg ); *** Ver 1.3 ***/
      i_trnsctn = fn_nolog_begintran( c_ServiceName, c_errmsg );  /*** Ver 1.3 ***/
			if ( i_trnsctn == -1 )
			{
				strcpy ( ptr_st_err_msg->c_err_msg, c_errmsg );
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
			}
     

			switch (ptr_st_cntrct_qt->c_rqst_typ)
			{
				case UPDATE_SHORT_QT_1 :	
			 			EXEC SQL
							UPDATE	  ftq_fo_trd_qt
							   SET		ftq_cls_prc 			= :ptr_st_cntrct_qt->l_close_prc,
												ftq_opn_prc 			= :ptr_st_cntrct_qt->l_open_prc,
												ftq_hgh_prc 			= :ptr_st_cntrct_qt->l_high_prc,
												ftq_low_prc 			= :ptr_st_cntrct_qt->l_low_prc,
												ftq_prvs_cls_prc 	=	:ptr_st_cntrct_qt->l_prev_close_prc,
												ftq_tot_qty_trdd  = :ptr_st_cntrct_qt->l_tot_qty_trdd,
											/** 	ftq_tot_val_trdd  = :ptr_st_cntrct_qt->l_tot_val_trdd, ** Ver 1.2 **/
												ftq_tot_val_trdd  = :ptr_st_cntrct_qt->d_tot_val_trdd,  /*** Ver 1.2 **/
                        ftq_crnt_oi       = :ptr_st_cntrct_qt->d_crnt_oi,
                        ftq_chng_oi       = :ptr_st_cntrct_qt->d_chng_oi,
                        ftq_fresh_oi      = case when :ptr_st_cntrct_qt->d_crnt_oi > ftq_crnt_oi 
                                            then (:ptr_st_cntrct_qt->d_crnt_oi - ftq_crnt_oi) + ftq_fresh_oi
                                            else ftq_fresh_oi end,   /** Ver 1.5 **/ 
                        ftq_oi_indctr     = :ptr_st_cntrct_qt->c_oi_indctr
			 		  	WHERE			ftq_xchng_cd		  = :ptr_st_cntrct_qt->c_xchng_cd
				  		 	AND			ftq_prdct_typ 	  =	:ptr_st_cntrct_qt->c_prd_typ
				   			AND			ftq_undrlyng		  =	:ptr_st_cntrct_qt->c_undrlyng
				   			AND			ftq_expry_dt      = to_date(:c_expiry_dt,'dd-Mon-yyyy' )
		 				    AND	ftq_exer_typ		  =	:ptr_st_cntrct_qt->c_exrc_typ
		    			  AND	ftq_opt_typ			  =	:ptr_st_cntrct_qt->c_opt_typ
		  				  AND	ftq_strk_prc		  =	:ptr_st_cntrct_qt->l_strike_prc
		  				  AND  ftq_indstk      	= :ptr_st_cntrct_qt->c_ctgry_indstk; 	

						if ( SQLCODE != 0 )
						{
							fn_errlog ( c_ServiceName, "S31010", 
																			SQLMSG, ptr_st_err_msg->c_err_msg );
							fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    					tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
						}
						break;
	
				case UPDATE_OI :	
			 			EXEC SQL
							UPDATE	  ftq_fo_trd_qt
							   SET		ftq_oi_high 			= :ptr_st_cntrct_qt->d_oi_high,
												ftq_oi_low   			= :ptr_st_cntrct_qt->d_oi_low,
                        ftq_crnt_oi       = :ptr_st_cntrct_qt->d_crnt_oi,
                        ftq_fresh_oi      = case when :ptr_st_cntrct_qt->d_crnt_oi > ftq_crnt_oi
                                            then (:ptr_st_cntrct_qt->d_crnt_oi - ftq_crnt_oi) + ftq_fresh_oi
                                            else ftq_fresh_oi end   /** Ver 1.5 **/ 
			 		  	WHERE			ftq_xchng_cd		  = :ptr_st_cntrct_qt->c_xchng_cd
				  		 	AND			ftq_prdct_typ 	  =	:ptr_st_cntrct_qt->c_prd_typ
				   			AND			ftq_undrlyng		  =	:ptr_st_cntrct_qt->c_undrlyng
				   			AND			ftq_expry_dt      = to_date(:c_expiry_dt,'dd-Mon-yyyy' )
		 				    AND	ftq_exer_typ		  =	:ptr_st_cntrct_qt->c_exrc_typ
		    			  AND	ftq_opt_typ			  =	:ptr_st_cntrct_qt->c_opt_typ
		  				  AND	ftq_strk_prc		  =	:ptr_st_cntrct_qt->l_strike_prc
		  				  AND  ftq_indstk      	= :ptr_st_cntrct_qt->c_ctgry_indstk; 	

						if ( SQLCODE != 0 )
						{
							fn_errlog ( c_ServiceName, "S31015", 
																			SQLMSG, ptr_st_err_msg->c_err_msg );
							fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    					tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
						}
						break;
	
			case UPDATE_SHORT_QT_2:
					if ( ptr_st_cntrct_qt->l_close_prc != 0 )
					{
						d_pcnt_chg_prev_cls = ( double )( ptr_st_cntrct_qt->l_lst_trdd_prc -
                                            ptr_st_cntrct_qt->l_close_prc   ) /
                                  ( double )ptr_st_cntrct_qt->l_close_prc * 
                                  100.0 * 100.0;
					}
					else
					{
						d_pcnt_chg_prev_cls = 0;
					}
 
					EXEC SQL
			        UPDATE  ftq_fo_trd_qt
      			     SET  ftq_cls_prc       = :ptr_st_cntrct_qt->l_close_prc,
           			      ftq_opn_prc       = :ptr_st_cntrct_qt->l_open_prc,
			                ftq_hgh_prc       = :ptr_st_cntrct_qt->l_high_prc,
     				          ftq_low_prc       = :ptr_st_cntrct_qt->l_low_prc,
			                ftq_chng_prvs_cls = :d_pcnt_chg_prev_cls,
     			            ftq_indctr        = :ptr_st_cntrct_qt->c_indctr
						 	 WHERE  ftq_xchng_cd      = :ptr_st_cntrct_qt->c_xchng_cd
 				         AND  ftq_prdct_typ     = :ptr_st_cntrct_qt->c_prd_typ
			           AND  ftq_undrlyng      = :ptr_st_cntrct_qt->c_undrlyng
     				     AND  ftq_expry_dt      = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
			           AND  ftq_exer_typ      = :ptr_st_cntrct_qt->c_exrc_typ
			           AND  ftq_opt_typ       = :ptr_st_cntrct_qt->c_opt_typ
     				     AND  ftq_strk_prc      = :ptr_st_cntrct_qt->l_strike_prc
           			 AND  ftq_indstk        = :ptr_st_cntrct_qt->c_ctgry_indstk;
				
						if ( SQLCODE != 0 )
   				  {
				        fn_errlog ( c_ServiceName, "S31020",
                                    SQLMSG, ptr_st_err_msg->c_err_msg );
			          fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      			}
    				break;

		case UPDATE_SHORT_QT_3:
		if(strcmp((char *)c_lst_trd_tm.arr,"01-Jan-1980 00:00:00")!= 0)
    {
      EXEC SQL
        UPDATE  ftq_fo_trd_qt
					SET		ftq_lst_trd_prc   = :ptr_st_cntrct_qt->l_lst_trdd_prc,
                ftq_lst_trd_tm    = to_date( :c_lst_trd_tm,
                                            'dd-Mon-yyyy hh24:mi:ss' ),
								ftq_bst1_bid_prc  = :ptr_st_cntrct_qt->l_bst_bid_prc,
								ftq_bst1_bid_qty  = :ptr_st_cntrct_qt->l_bst_bid_qty,
								ftq_bst1_offr_prc = :ptr_st_cntrct_qt->l_bst_offr_prc,
								ftq_bst1_offr_qty = :ptr_st_cntrct_qt->l_bst_offr_qty,
                ftq_crnt_oi       = :ptr_st_cntrct_qt->d_crnt_oi,
                ftq_fresh_oi      = case when :ptr_st_cntrct_qt->d_crnt_oi > ftq_crnt_oi
                                    then (:ptr_st_cntrct_qt->d_crnt_oi - ftq_crnt_oi) + ftq_fresh_oi
                                    else ftq_fresh_oi end    /** Ver 1.5 **/  
				 WHERE  ftq_xchng_cd      = :ptr_st_cntrct_qt->c_xchng_cd
           AND  ftq_prdct_typ     = :ptr_st_cntrct_qt->c_prd_typ
           AND  ftq_undrlyng      = :ptr_st_cntrct_qt->c_undrlyng
           AND  ftq_expry_dt      = to_date ( :c_expiry_dt, 'dd-Mon-yyyy' )
           AND  ftq_exer_typ      = :ptr_st_cntrct_qt->c_exrc_typ
           AND  ftq_opt_typ       = :ptr_st_cntrct_qt->c_opt_typ
           AND  ftq_strk_prc      = :ptr_st_cntrct_qt->l_strike_prc
           AND  ftq_indstk        = :ptr_st_cntrct_qt->c_ctgry_indstk;
      	if ( SQLCODE != 0 )
      	{
        	fn_errlog ( c_ServiceName, "S31025",
                                    SQLMSG, ptr_st_err_msg->c_err_msg );
        	fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      	}
			}
			else
			{
				if(DEBUG_MSG_LVL_3){
					fn_userlog ( c_ServiceName, "c_xchng_cd :%s:", ptr_st_cntrct_qt->c_xchng_cd );
					fn_userlog ( c_ServiceName, "c_prd_typ  :%c:", ptr_st_cntrct_qt->c_prd_typ );
					fn_userlog ( c_ServiceName, "c_undrlyng :%s:", ptr_st_cntrct_qt->c_undrlyng );
					fn_userlog ( c_ServiceName, "c_expiry_dt:%s:", c_expiry_dt.arr );
					fn_userlog ( c_ServiceName, "c_exrc_typ :%c:", ptr_st_cntrct_qt->c_exrc_typ );
					fn_userlog ( c_ServiceName, "c_opt_typ  :%c:", ptr_st_cntrct_qt->c_opt_typ );
					fn_userlog ( c_ServiceName, "l_strike_prc:%ld:", 
																									 ptr_st_cntrct_qt->l_strike_prc );
					fn_userlog ( c_ServiceName, "c_ctgry_indstk :%c:",
																									 ptr_st_cntrct_qt->c_ctgry_indstk );
					fn_userlog ( c_ServiceName, "ftq_lst_trd_prc :%ld:",
																									 ptr_st_cntrct_qt->l_lst_trdd_prc );
					fn_userlog ( c_ServiceName, "c_lst_trd_tm :%s:",
																									 c_lst_trd_tm.arr );
				}
			}
			break;

		case UPDATE_CLOSE_PRC:
      EXEC SQL
        UPDATE  ftq_fo_trd_qt
          SET  ftq_cls_prc       = :ptr_st_cntrct_qt->l_close_prc
				 WHERE  ftq_xchng_cd      = :ptr_st_cntrct_qt->c_xchng_cd
           AND  ftq_prdct_typ     = :ptr_st_cntrct_qt->c_prd_typ
           AND  ftq_undrlyng      = :ptr_st_cntrct_qt->c_undrlyng
           AND  ftq_expry_dt      = to_date ( :c_expiry_dt, 'dd-Mon-yyyy' )
           AND  ftq_exer_typ      = :ptr_st_cntrct_qt->c_exrc_typ
           AND  ftq_opt_typ       = :ptr_st_cntrct_qt->c_opt_typ
           AND  ftq_strk_prc      = :ptr_st_cntrct_qt->l_strike_prc
           AND  ftq_indstk        = :ptr_st_cntrct_qt->c_ctgry_indstk;
      	if ( SQLCODE != 0 )
      	{
        	fn_errlog ( c_ServiceName, "S31030",
                                    SQLMSG, ptr_st_err_msg->c_err_msg );
        	fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
        	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      	}
				break;
		
		/*** Ver 1.4 starts ***/
		case UPDATE_TRD_EXEC_RNG :	
			EXEC SQL
				UPDATE	  ftq_fo_trd_qt
					SET			ftq_hgh_trd_exec_rng 			= :ptr_st_cntrct_qt->l_high_prc,
									ftq_low_trd_exec_rng 			= :ptr_st_cntrct_qt->l_low_prc
					WHERE		ftq_xchng_cd						  = :ptr_st_cntrct_qt->c_xchng_cd
					AND			ftq_prdct_typ						  =	:ptr_st_cntrct_qt->c_prd_typ
					AND			ftq_undrlyng						  =	:ptr_st_cntrct_qt->c_undrlyng
					AND			ftq_expry_dt						  = to_date(:c_expiry_dt,'dd-Mon-yyyy' )
					AND			ftq_exer_typ							=	:ptr_st_cntrct_qt->c_exrc_typ
					AND			ftq_opt_typ								=	:ptr_st_cntrct_qt->c_opt_typ
					AND			ftq_strk_prc							=	:ptr_st_cntrct_qt->l_strike_prc
					AND			ftq_indstk      					= :ptr_st_cntrct_qt->c_ctgry_indstk; 	

			if ( SQLCODE != 0 )
			{
				fn_errlog ( c_ServiceName, "S31035", SQLMSG, ptr_st_err_msg->c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
			}
			break;
		/*** Ver 1.4 ends ***/

      default:
        strcpy( ptr_st_err_msg->c_err_msg, "Invalid Operation Type" );
        fn_errlog ( c_ServiceName, "S31040", DEFMSG, ptr_st_err_msg->c_err_msg);
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
        break;
     }
					
     /**** if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 ) ** Ver 1.3 ***/
      if ( fn_nolog_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )  /*** Ver 1.3 ***/
      {
        strcpy ( ptr_st_err_msg->c_err_msg, c_errmsg );
    		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      }
		
	
	tpfree ( ( char * ) ptr_st_err_msg );
	tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_cntrct_qt, 0, 0 );
}

