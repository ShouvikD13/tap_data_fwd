/********************************************************************************************************/
/*	Program							:	SFO_SPNOPN_PSTN																																*/
/*																																																			*/
/*  Description       : This service retrieves the values of the entire																	*/
/*                      contract position book given different input																		*/
/*                      parameters based on two different operation types:															*/
/*                      U - Underlying as Input																													*/
/*                      W - Without Underlying																													*/
/*																																																			*/
/*	Log								:	1.0			21-Jun-2011																															*/
/*										:	1.1			09-Mar-2012                                                             */
/*										: 1.2			02-Apr-2012																															*/
/*										: 1.3			08-Aug-2012																															*/
/*										: 1.4			02-Nov-2012 																														*/
/*                    : 1.5     09-Apr-2013                                                             */
/*                    : 1.6     11-Sep-2013                                                             */
/*                    : 1.7     25-Oct-2013                                                             */
/*									  : 1.8			25-Oct-2013																															*/
/*									  : 1.9			09-Sep-2014																															*/
/*                    : 2.0     03-Jul-2015 																														*/
/*                    : 2.1     27-Oct-2015                                                             */
/*                    : 2.2     04-Jul-2016                                                             */
/*                    : 2.3     05-Jul-2016                                                             */
/*                    : 2.4     19-Jul-2016                                                             */
/*                    : 2.5     15-Jun-2016                                                             */
/*										: 2.6     24-Oct-2016																															*/
/*                    : 2.7     21-Mar-2017                                                             */
/*										: 2.8     04-Oct-2017																															*/
/*                    : 2.9     23-Jan-2017                                                             */
/*                    : 3.0     08-Mar-2018                                                             */
/*                    : 3.1     21-Aug-2018                                                             */
/*                    : 3.2     18-Feb-2019                                                             */
/*                    : VQC     05-Oct-2016                                                             */
/*                    : 3.3     23-Jul-2019                                                             */
/*                    : 3.4     27-Sep-2019                                                             */
/*  Log               : 3.5   	30-Jan-2020   Mrinal Kishore                    												*/
/*  Log               : 3.6     12-Sep-2020   Suchita Dabir                                             */
/*  Log               : 3.7     21-Aug-2020   Mrinal Kishore                                            */
/*  Log               : 3.9     15-Dec-2020   Abhinav Kumbhar                                           */
/*  Log               : 4.0     09-Apr-2021   Abhinav Kumbhar                                           */
/*  Log               : 4.1     23-Jun-2021   Abhinav Kumbhar                                           */
/*  Log               : 4.2     25-Oct-2021   Mahesh Regulwar                                           */ 
/********************************************************************************************************/
/*																																																			*/
/*	1.0		-		New Release																																								*/
/*  1.1   -   FML Error handling - 09-Mar-2012 (Navina D)																								*/
/*  1.2   -   NVL in FTQ fetch   - 02-Apr-2012 (Navina D)                                               */
/*  1.3   -   Advisor Areana for SPAN customers - 08-Aug-2012 (Shamili D)                               */
/*	1.4		-		Rollover changes - 02-Nov-2012 (Vishnu N) 																								*/
/*  1.5   -   Changes to display ADD MARGIN option for DL.NET   - 09-Apr-2013 (Bhushan)                 */
/*  1.6   -   Added Open Qty Check For Rollover Flag (Bhushan)                                          */
/*  1.7   -   Bug fix for Advisor Arena module (Samip M)                                                */
/*  1.8   -   Buy/Sell order rate to be shown on What if position page  - 25-Oct-2013 (Navina)					*/
/*  1.9   -   View to FML changes	-	(Samip M)																														*/
/*  2.0   -   Contract master & Trade Quote merger Changes.																							*/
/*  2.1   -   Introducing Session Check (Ritesh D)                                                      */ 
/*  2.2   -   Log Maintainance																																					*/
/*  2.3   -   Log changes       																																				*/
/*  2.4   -   Debug level changes																																				*/
/*  2.5   -   CR-ISEC14-79794 Spot Price Display on Options & OptionPlus Open Position screen (Swapnil) */
/*  2.6   -		Check Session IP - PHASE_III																															*/
/*  2.7   -   Square Off at Market changes for other front end (Anand Dhopte)                           */
/*	2.8		-   Introduced Cancel All Flag for DL.Net	(Afzal K.)																					*/
/*  2.9   -   Introduced "Sqaure Off All Positions At Market" flag for DL.NET      (Afzal K.)           */
/*  3.0   -   Rollover with spread changes (Mrinal Kishore)                                             */
/*  3.1   -   Physical Settlement of Stock Derivative Changes Phase 2 (Tanmay Patel)                    */
/*  3.2   -   Advisor Screen Open Position Changes(Afzal K.)                                            */
/*  VQC   -   VERSION QUALITY CONTROL ( Suchita Dabir )                                                 */
/*  3.3   -   Block delivery margin on ITM long Call & Put options from                                 */  
/*            Expry-4 days till  Expiry ( Anuj Pancholi )                                               */
/*  3.4   -   Validation for sysdate removed for Delivery Margin ( Akash B)                             */ 
/*  3.5   -  	Rollover with spread Bug Fix (Mrinal Kishore)                                  						*/
/*  3.6   -   CR-ISEC14-140009 Trigger Price Display in F&O SPAN accounts  ( Suchita Dabir )            */
/*  3.7   -   BO_LODM Master change        (Mrinal Kishore)                                             */
/*  3.8   -   Debug level added   ( Suchita Dabir )                                                     */
/*  3.9   -   Minor Change  ( Abhinav Kumbhar )                                                         */ 
/*  4.0   -   Delivery and non-Delivery option CR_ISEC04_132410_delivery_settlement( Abhinav Kumbhar )  */
/*  4.1     - CR-ISEC14-149749_Open_Position_Sorting ( Abhinav Kumbhar )                                */
/*  4.2   -   Average Price for PNL (Mahesh Regulwar 21_oct-2021)                                       */
/********************************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_fml_def.h>			
/**	#include <fo_view_def.h> ***/	/** Commented for Ver 1.9 **/
#include <fn_span_lib.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>             
#include <fn_session.h>         
#include <fn_read_debug_lvl.h>  
#include <math.h>
#include <fo_view_def.h> /* Added in Ver 2.6 */

void SFO_SPNOPN_PSTN( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf = NULL; /*** Initialized in ver VQC ***/					
	FBFR32 *ptr_fml_Obuf = NULL; /*** Initialized in ver VQC ***/

	char c_ServiceName[33] = "\0"; /*** Initialized in ver VQC ***/ 
  char c_errmsg[256] = "\0"; /*** Initialized in ver VQC ***/
	char c_spl_flg = '\0'; /*** Initialized in ver VQC ***/
	/*** char c_strnull[2]; commented in VQC ***/
	char c_null = '-';
	char c_prev_mt_acnt[11] = "\0"; /*** Initialized in ver VQC ***/ 
  char c_opt_typ = '\0'; /*** Initialized in ver VQC ***/
	/* char c_prev_exrc_typ; commented in VQC */
	/* char c_prev_ctgry_indstk; commented in VQC */
  /* char c_prev_prdct_typ; commented in VQC */
  /* char c_rqst_type; commented in VQC */
  /* char c_narration_id[4]; commented in VQC */
  char c_rollover_flag = '\0';     /***  Ver 1.4 ***/ /*** Initialized in ver VQC ***/
  char c_rollovr_flg = '-'; /***  Ver 1.4 ***/
	char c_grp_flg = '\0';   /*** Ver 1.5 ***/
  char c_sqoff_at_market_flag = 'N'; /*** Ver 2.7 ***/
	char c_cancel_all_flag = 'N' ;      /*** Ver 2.8 ***/
  char c_sqr_off_all_at_mkt = 'N';   /*** Ver 2.9 ****/
	char c_spn_flg = '\0';  /*** Ver 3.2***/
  
  char c_tmp_undlyn[7];          /*** Ver 3.3 ***/
  char c_tmp_prdct_typ = '\0';   /*** Ver 3.3 ***/
  char c_ltq_dt [12];            /*** Ver 3.3 ***/
  char c_update_dt [12];         /*** Ver 3.3 ***/
  char c_flm_trd_dt[12] = "\0";  /*** Ver 3.7 ***/
	char c_indx_indctr = '\0';     /*** Ver 4.0 ***/
	varchar c_flm_expr_dt[12];     /*** Ver 4.0 ***/
	char c_all_flg = 'N';          /*** Ver 4.0 ***/
	char c_dlvry_enbl_flg = '\0';  /*** Ver 4.0 ***/
	char c_dlvry_mode_flg = '\0';  /*** Ver 4.0 ***/
	char c_dlvry_sttlmnt_typ = '\0';  /*** Ver 4.0 ***/
  double d_dlvry_oblgamt_blckd = 0.0;   /*** Ver 4.0 ***/
  long l_dlvry_qty_blckd = 0;       /*** Ver 4.0 ***/

	double d_null = 0.0;
	double d_tot_profit_loss = 0;
  /* double d_curr_cnt_opn_val=0; commented in VQC */
  /* double d_curr_uopn_val =0; commented in VQC */
	/* double d_grnd_profit_loss =0; commented in VQC */
	/* double d_grnd_utrd_mrgn =0; commented in VQC */
	/* double d_grnd_umin_trd_mrgn =0; commented in VQC */
	/* double d_grnd_und_avail_mrgn =0; commented in VQC */
  /* double d_amnt; commented in VQC */

  long l_null = 0;
	long l_prcnt = 0; /*** Initialised in ver 3.0 ***/ 
	long l_size_ocpd = 0; /*** Initialized in ver VQC ***/ 
	long ret_val=0;  
  long l_strike_prc = 0; /*** Variable Intitialized in VQC ***/  
  long l_tot_buy_qty = 0; 
  long l_tot_sell_qty = 0;
  /* long l_und_sell_opn_qty=0; commented in VQC */
  /* long l_und_buy_opn_qty=0;commented in VQC */
	/* long l_grnd_opnpstn_qty=0;commented in VQC */
	/* long li_grnd_bo_qty =0;commented in VQC */
	/* long li_grnd_so_qty =0;commented in VQC */
  long l_spot_prc = 0;      /*** Ver 2.5 ***/
  double d_avg_prcs = 0.0;             /*** Ver 4.2 ***/ 

  long l_spot_prc_tmp = 0; /*** Ver 3.3 ***/
  long l_cls_prc = 0; /*** Ver 3.3 ***/ 
 
  int  i_returncode = 0; /*** Variable Intitialized in VQC ***/
  /*int  i_err[6];
  int  i_ferr[6]; */		/** Ver 1.3 **/
  int  i_err[8];
  int  i_ferr[8];				/** Ver 1.3 **//***Change from 7 to 8 in ver 3.2***/
  int  i_cnt = 0; /*** Variable Intitialized in VQC ***/
  int  i_counter = 1;
  int  i_cntr = 0;
	/** int  i_size_fcp; *** Commented in ver VQC ***/ 	
	/** int  i_size_fus; *** Commented in ver VQC ***/ 	
	int  rec_cnt=0;   
  int  i_non_Obuy_count=0;    /*** Ver 1.5 -- Count of contracts which are not 'Options Buy' ***/
  int  i_pstn_count=0;    /*** Ver 1.5 -- Count of contracts which have open position ***/
	int  i_ch_val = 0;			/***	Ver 2.1	***/
  int i_sqroffmkt_flg_cnt = 0;  /*** ver 2.9 ****/ 
  varchar c_trade_dt[LEN_DATE];
  int i_crnt_mnth_flg = 0;                  /** Ver 3.3 **/
  
  double d_dlvry_mrgn_blk           = 0.0;  /** Ver 3.3 **/
  double d_dlvry_mrgn_req           = 0.0;  /** Ver 3.3 **/
  double d_var_mrgn                 = 0.0;  /** Ver 3.3 **/
  double d_elm_mrgn                 = 0.0;  /** Ver 3.3 **/
  double d_cntrct_val               = 0.0;  /** Ver 3.3 **/
  double d_new_dlvry_mrgn           = 0.0;  /** Ver 3.3 **/
  double d_ISec_buff_mrgn_prcnt     = 0.0;  /** Ver 3.3 **/
  double d_dlvry_min_mrgn_prcnt     = 0.0;  /** Ver 3.3 **/
  double d_current_dlvry_mrgn_prcnt = 0.0;  /** Ver 3.3 **/
  double d_mrggn_value              = 0.0;  /** Ver 3.3 **/

  double d_trg_prc=0.0; /*** ver 3.6 ***/
	
	/*** Ver 3.0 starts ***/
	char c_sprd_roll_flag = '\0';
	char c_sprd_roll_flg  = '-'; 
	char c_rsprd_pos_flg = 'N';
	char c_r_opnpstn_flw = '\0';
	char c_r_cntrct_tag = '\0';
	double d_rumin_trd_mrgn = 0.0;
	double d_sroll_diff_amt = 0.0;
	double d_rutrd_mrgn = 0.0;    
	double d_rordr_mrgn = 0.0;    
	int i_cntrct_cnt = 0;
	int  i=0;
	long l_fod_qty=0;   
	long l_buy_qty=0;
	long l_sell_qty=0;
	long l_r_ltp = 0;
	varchar c_r_exp_dt[12] = {'\0'};
	/*** Ver 3.0 Ends ***/
	long li_r_bo_qty = 0;   /*** Ver 4.5 ***/
  long li_r_so_qty = 0;   /*** Ver 4.5 ***/
	char c_r_opt_typ = '*'; /*** Ver 4.5 ***/
	long l_r_strike_prc = 0;	/*** Ver 4.5 ***/
	

  
	/* varchar c_trade_dt[LEN_DATE]; commented in VQC */

	EXEC SQL BEGIN DECLARE SECTION;
    struct st_usr_prfl st_user_profile;
  	struct  st_err_msg st_er_msg;			/***	Ver 2.1	***/
		sql_cursor	sys_cursor;
		char c_opr_typ = '\0'; /*** Initialized in ver VQC ***/
		char c_mtch_accnt_no[11] = "\0"; /*** Initialized in ver VQC ***/
		char c_xchng_cd[4] = "\0"; /*** Initialized in ver VQC ***/
		char c_undrlyng[7] = "\0"; /*** Initialized in ver VQC ***/
    char c_uprdct_typ = '\0'; /*** Initialized in ver VQC ***/
    char c_uindstk = '\0'; /*** Initialized in ver VQC ***/
    char c_uopnpstn_flw = '\0'; /*** Initialized in ver VQC ***/
    /* double d_uopnpstn_qty; commented in VQC */
    double d_utrd_mrgn = 0.0;  /*** Variable Intitialized in VQC ***/
    double d_umin_trd_mrgn = 0.0;  /*** Variable Intitialized in VQC ***/
		long l_base_prc = 0;  /*** Variable Intitialized in VQC ***/
		char c_prd_typ = '\0';  /*** Variable Intitialized in VQC ***/
		char c_ctgry_indstk = '\0';  /*** Variable Intitialized in VQC ***/
    char c_setlmnt_flg = '\0';    /*** Ver 3.1 ***/
		char c_prev_undrlyng[7] = "\0"; /*** Initialized in ver VQC ***/
		varchar c_expry_dt[12]; 
		char c_exrc_typ = '\0';  /*** Variable Intitialized in VQC ***/
		char c_opnpstn_flw = '\0';  /*** Variable Intitialized in VQC ***/
		long l_opnpstn_qty = 0;  /*** Variable Intitialized in VQC ***/
		long l_cvr_qty = 0;  /*** Variable Intitialized in VQC ***/
		long l_uopnpstn_qty = 0;  /*** Variable Intitialized in VQC ***/
		double d_mtm_opn_val = 0.0; /*** Variable Intitialized in VQC ***/
		double d_opnpstn_val= 0.0; /*** Ver 4.2 ***/
		long l_lst_trdd_prc = 0; /*** Variable Intitialized in VQC ***/
		double d_clsng_prc = 0.0;
		long l_lot_size = 0; /*** Variable Intitialized in VQC ***/
		long li_temp = 0; /*** Variable Intitialized in VQC ***/ 
		long li_bo_qty = 0; /*** Variable Intitialized in VQC ***/
		long li_so_qty = 0; /*** Variable Intitialized in VQC ***/
		long l_qty = 0;
		long li_bo_rt = 0;	/*** Ver 1.8 ***/
		long li_so_rt = 0; /*** Ver 1.8 ***/

		char c_mtm_flag[2]="\0";
		char c_rqst_typ='N';          /** Ver 1.3 **/

		double d_profit_loss = 0;
		double d_und_avail_mrgn = 0.0; /*** Variable Intitialized in VQC ***/
		char c_user_id[ 15 ] = "\0"; /*** Variable Intitialized in VQC ***/	
		double d_prmum = 0.0;
		/* double d_total_prmum = 0.0; *** Variable Commented in VQC ***/
    /* int i_gid = 0; *** Variable Commented in VQC ***/
  EXEC SQL END DECLARE SECTION;

  /*** Ver 2.6 Starts Here ***/
  struct vw_usr_prfl st_usr_prfl_vw;
  struct vw_err_msg st_err_msg_vw;

  MEMSET(st_usr_prfl_vw);
  MEMSET(st_err_msg_vw);
  /*** Ver 2.6 Ends Here ***/

	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            
  /* strcpy( c_strnull,"-"); *** Commented in VQC ***/

	MEMSET(st_user_profile);			/***	Ver 2.1	***/

  i_err[0] = Fget32( ptr_fml_Ibuf, FFO_USR_ID, 0,(char *)st_user_profile.c_user_id, 0 );
  i_ferr [0] = Ferror32;
	i_err[1] = Fget32( ptr_fml_Ibuf, FFO_SSSN_ID, 0,(char *)&st_user_profile.l_session_id, 0 );   /*** Ver 2.1 '&' was missing ***/
  i_ferr [1] = Ferror32;
	i_err[2] = Fget32( ptr_fml_Ibuf, FFO_EBA_MTCH_ACT_NO, 0,(char *)st_user_profile.c_cln_mtch_accnt, 0 );
  i_ferr [2] = Ferror32;
	i_err[3] = Fget32( ptr_fml_Ibuf, FFO_OPERATION_TYP, 0,(char *)&c_opr_typ, 0 );
  i_ferr [3] = Ferror32;
	i_err[4] = Fget32( ptr_fml_Ibuf, FFO_XCHNG_CD, 0, (char *)c_xchng_cd, 0 );
  i_ferr [4] = Ferror32;
	i_err[5] = Fget32( ptr_fml_Ibuf, FFO_UNDRLYNG, 0, (char *)c_undrlyng, 0 );
  i_ferr [5] = Ferror32;

	/*** for(i_cnt =0; i_cnt <=3; i_cnt++) Commented in Ver 1.1 ***/
	for(i_cnt =0; i_cnt <=4; i_cnt++)	/*** Ver 1.1 ***/
	{
		if ( (i_err[ i_cnt ] == -1 ) )
		{
			fn_userlog( c_ServiceName, "Error in field no. [%d] ",i_cnt);
			fn_errlog( c_ServiceName, "S31005", Fstrerror32(i_ferr[i_cnt]),c_errmsg);
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}

	/*** Commented in Ver 1.1 ***
	for ( i_cnt = 4;  i_cnt <= 5; i_cnt++ )
	{
		if ( (i_err[i_cnt] == -1) && (i_ferr[i_cnt] != FNOTPRES ))
		{
			fn_errlog( c_ServiceName, "S31010", Fstrerror32( i_ferr[i_cnt] ), c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		else if ( (i_err[i_cnt] == -1) && (i_ferr[i_cnt] == FNOTPRES))
		{
			if ( ( c_opr_typ == WITH_UNDERLYING ) && ( i_cnt == 2) )
			{
				fn_errlog( c_ServiceName, "S31015", Fstrerror32( i_ferr[i_cnt] ), c_errmsg  );
   			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
   			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}
	}
	***/

	/*** Ver 1.1 start ***/
  if ( (i_err[5] == -1) && (i_ferr[5] != FNOTPRES ))
  {
    fn_errlog( c_ServiceName, "S31020", Fstrerror32( i_ferr[5] ), c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  else if ( (i_err[5] == -1) && (i_ferr[5] == FNOTPRES))
  {
    if ( c_opr_typ == WITH_UNDERLYING )
    {
      fn_errlog( c_ServiceName, "S31025", Fstrerror32( i_ferr[5] ), c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  } 
  /*** Ver 1.1 Ends ***/


	/*** Ver 1.3 Starts ***/

	i_err[6] =Fget32(ptr_fml_Ibuf,FFO_REQ_TYP,0, (char *)&c_rqst_typ,0);
  i_ferr[6] = Ferror32;

  if ( i_err[5] == -1 )
  {
    if( DEBUG_MSG_LVL_5 ) {
    fn_userlog(c_ServiceName,"Normal User ");
    }
    c_rqst_typ = 'N';
  }


  /*** Ver 3.2 Starts ***/

   i_err[7] = Fget32( ptr_fml_Ibuf, FFO_CLSR_TYP, 0,(char *)&c_spn_flg, 0 );
   i_ferr [7] = Ferror32;

    if ( i_err[7]  == FNOTPRES && c_rqst_typ == 'Y' )
    {
     fn_errlog( c_ServiceName, "S31030", Fstrerror32( i_ferr[7] ), c_errmsg  );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

  /*** Ver 3.2 Ends ***/ 
	
	/*** Ver 1.3 Ends   ***/

	/*** Commented in Ver 2.6 
	 i_ch_val = fn_chkspn_sssn ( c_ServiceName,			***	Ver 2.1 Session Check Introduced	***
                              &st_user_profile,
                              &st_er_msg) ;
  if ( i_ch_val == -1 )
  {
    fn_errlog( c_ServiceName, "S31035", LIBMSG,st_er_msg.c_err_msg);
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_er_msg.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	Comment Ends for Ver 2.6 ****/

	/*** Ver 2.6 Starts Here ***/
	 memcpy(&st_usr_prfl_vw,&st_user_profile,sizeof(struct vw_usr_prfl));

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl_vw.c_rout_crt );

 if ( st_usr_prfl_vw.l_session_id != 0 ) /****Added in Ver 3.2 ****/
 	 {
  i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl_vw,
                                             &st_err_msg_vw) ;

  if ( i_returncode == -1 )
 		 {
   	  /* fn_errlog( c_ServiceName, "S31040", FMLMSG, st_err_msg_vw.c_err_msg);  Required LIBMSG error not FMLMSG error Ver 3.9 */
   	  fn_errlog( c_ServiceName, "S31045", LIBMSG, st_err_msg_vw.c_err_msg);     /*** Added in Ver 3.9 ***/
  	  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg_vw.c_err_msg, 0 );         
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
	}
	/*** Ver 2.6 Ends Here ***/
	strcpy ( ( char * )c_mtch_accnt_no, st_user_profile.c_cln_mtch_accnt );
	strcpy ( ( char * )c_expry_dt.arr, "\0");


	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName,"*************INPUT PARAMETERS*************");
		fn_userlog( c_ServiceName,"******************************************");
	}

  /**** Commented in Ver 2.3 ***************************************************
	if( DEBUG_MSG_LVL_0 ) {         
		fn_userlog( c_ServiceName,"c_mtch_accnt_no :%s:", c_mtch_accnt_no );
		fn_userlog( c_ServiceName,"c_opr_typ   :%c:", c_opr_typ );
		fn_userlog( c_ServiceName,"c_xchng_cd  :%s:", c_xchng_cd );
		fn_userlog( c_ServiceName,"c_undrlyng  :%s:", c_undrlyng );
	}
  ******************** Ver 2.3 ***********************************************/
 
  /****** Ver 2.2 Starts here ************/
  if( DEBUG_MSG_LVL_1 )  /*** ver 2.3 ***/  /*** Ver 2.4, debug changed from 0 to 1 ***/
  {
    fn_userlog( c_ServiceName,"c_mtch_accnt_no :%s:,c_opr_typ :%c:,c_xchng_cd :%s:,c_undrlyng :%s:",c_mtch_accnt_no,c_opr_typ,c_xchng_cd,c_undrlyng);
  }
  
   if( DEBUG_MSG_LVL_0 ) {  /** debug level added in ver 3.8 **/
   fn_userlog( c_ServiceName,"User id :%s: SPan Flg :%c:",st_user_profile.c_user_id, c_spn_flg );
   }

  /****** ver 2.2 ends Here ****/

	  /*******Ver 3.2 starts*****/
		
	  if( strcmp( c_mtch_accnt_no, "*" ) == 0 )
  {
    if(c_rqst_typ == 'Y' )
    {
      EXEC SQL
      INSERT INTO
      FDM_DT_MTCH
      SELECT DISTINCT ACM_MTCH_ACCNT FROM ACM_ADV_CLNT_MAP,CLM_CLNT_MSTR
      WHERE ACM_MTCH_ACCNT = CLM_MTCH_ACCNT
        AND ACM_ADVISOR_ID = :st_user_profile.c_user_id
        AND NVL(ACM_ACTV_FLG,'A') = 'A'
        AND DECODE(:c_xchng_cd,'NFO',NVL(CLM_SPAN_ALLWD,'N'),'BFO',NVL(CLM_BSESPAN_ALLWD,'N')) = DECODE(:c_spn_flg,'Y','Y','N');

    if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31050", SQLMSG, c_errmsg );
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpcommit(0);
        tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
      }
    }
  }
		
		/*****Ver 3.2 ends*****/


  EXEC SQL ALLOCATE :sys_cursor;
  
  if( strcmp( c_mtch_accnt_no, "*" ) == 0 )
  {
		if( DEBUG_MSG_LVL_3 ) {   
		  fn_userlog(c_ServiceName,"INSIDE ALL MTCH ACCNNT'S");
    }
		
		strcpy(c_user_id,st_user_profile.c_user_id);

    if( st_user_profile.c_user_id[0] == BPID )
    {

			EXEC SQL  EXECUTE
       BEGIN
        OPEN  :sys_cursor FOR
					SELECT		FCP_CLM_MTCH_ACCNT,
										FCP_PRDCT_TYP,
										FCP_INDSTK,
										FCP_UNDRLYNG,
										TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
										FCP_EXER_TYP,
										FCP_OPT_TYP, 
										FCP_STRK_PRC,
										FCP_OPNPSTN_FLW,
										abs(FCP_OPNPSTN_QTY),
										FCP_MTM_OPN_VAL,
										decode(FCP_OPNPSTN_FLW,'S',greatest(abs(FCP_IBUY_QTY),abs(FCP_EXBUY_QTY)),'B',greatest( abs(FCP_ISELL_QTY), abs(FCP_EXSELL_QTY)),0),
										FCP_IBUY_QTY,
										FCP_ISELL_QTY,
										decode(FCP_IBUY_QTY, 0, 0, FCP_IBUY_ORD_VAL/FCP_IBUY_QTY),	/*** Ver 1.8 ***/		
										decode(FCP_ISELL_QTY, 0, 0, FCP_ISELL_ORD_VAL/FCP_ISELL_QTY),	/*** Ver 1.8 ***/		
										FCP_OPT_PREMIUM,
                    NVL(FCP_UDLVRY_MRGN,0),   /** Ver 3.3 **/
                    NVL(FCP_TRG_PRC,0.0),     /*** ver 3.6 ***/
										NVL(FCP_DLVRY_MODE_FLAG,'N'),   /*** Ver 4.0 ***/
                  	NVL(FCP_DLVRY_OBLGAMT_BLCKD,0), /*** Ver 4.0 ***/
                  	NVL(FCP_DLVRY_QTY_BLCKD,0),      /*** Ver 4.0 ***/
                    NVL(FCP_AVG_PRC,0),      /** Ver 4.2 **/
										NVL(FCP_OPNPSTN_VAL,0)   /*** Ver 4.2 ***/
				  FROM			FCP_FO_SPN_CNTRCT_PSTN,CLM_CLNT_MSTR 
				  WHERE			CLM_BP_ID = :c_user_id
				  AND				FCP_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT 
				  AND				FCP_XCHNG_CD = :c_xchng_cd 
				  AND				(    FCP_OPNPSTN_QTY != 0 
											OR FCP_IBUY_QTY    != 0 
											OR FCP_ISELL_QTY   != 0 )
				  ORDER BY	FCP_CLM_MTCH_ACCNT,
										FCP_UNDRLYNG,
										FCP_PRDCT_TYP,       /*** Ver 4.1 ***/  
										FCP_EXPRY_DT,
                    FCP_OPT_TYP,         /*** Ver 4.1 ***/
                    FCP_STRK_PRC;        /*** Ver 4.1 ***/
       END;
      END-EXEC; 
	  }
		else if( c_rqst_typ == 'Y' )  /******** Added in Ver 1.3 ******/
		{

		
 		if ( c_opr_typ == WITHOUT_UNDERLYING ) /*****Ver 3.2*****/
		 {
        if( DEBUG_MSG_LVL_1 ) { /*** debug level added in ver 3.8 ***/
				fn_userlog(c_ServiceName,"Inside ALL match ids and request type = 'Y' ");
        }   
				EXEC SQL  EXECUTE
					BEGIN
						OPEN  :sys_cursor FOR
              SELECT distinct FCP_CLM_MTCH_ACCNT,     /*** distinct added for Ver 1.7 ***/	
                    FCP_PRDCT_TYP,
                    FCP_INDSTK,
                    FCP_UNDRLYNG,
                    TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY') FCP_EXPRY_DT, /*** Alias added Ver 1.7 ***/
                    FCP_EXER_TYP,
                    FCP_OPT_TYP,
                    FCP_STRK_PRC,
                    FCP_OPNPSTN_FLW,
                    abs(FCP_OPNPSTN_QTY),
                    FCP_MTM_OPN_VAL,
                    decode(FCP_OPNPSTN_FLW,'S',greatest(abs(FCP_IBUY_QTY),abs(FCP_EXBUY_QTY)),'B',greatest( abs(FCP_ISELL_QTY), abs(FCP_EXSELL_QTY)),0),
                    FCP_IBUY_QTY,
                    FCP_ISELL_QTY,
										decode(FCP_IBUY_QTY, 0, 0, FCP_IBUY_ORD_VAL/FCP_IBUY_QTY),	/*** Ver 1.8 ***/		
										decode(FCP_ISELL_QTY, 0, 0, FCP_ISELL_ORD_VAL/FCP_ISELL_QTY),	/*** Ver 1.8 ***/	
                    FCP_OPT_PREMIUM,
                    NVL(FCP_UDLVRY_MRGN,0),             /*** Ver 3.3 ***/ 
                    NVL(FCP_TRG_PRC,0.0),               /*** ver 3.6 ***/
                    NVL(FCP_DLVRY_MODE_FLAG,'N'),       /*** Ver 4.0 ***/ 
                    NVL(FCP_DLVRY_OBLGAMT_BLCKD,0),     /*** Ver 4.0 ***/
                    NVL(FCP_DLVRY_QTY_BLCKD,0),          /*** Ver 4.0 ***/
                    NVL(FCP_AVG_PRC,0),      /** Ver 4.2 **/
										NVL(FCP_OPNPSTN_VAL,0)   /*** Ver 4.2 ***/
	      /***  FROM     FCP_FO_SPN_CNTRCT_PSTN, ACM_ADV_CLNT_MAP
           WHERE    FCP_CLM_MTCH_ACCNT = ACM_MTCH_ACCNT
           AND      NVL(ACM_ACTV_FLG,'A') = 'A'   *** Clause added for Ver 1.7 ***
           AND      ACM_ADVISOR_ID = :c_user_id     ****Commented ver 3.2***/
          FROM     FCP_FO_SPN_CNTRCT_PSTN,FDM_DT_MTCH /*****Ver 3.2****/
          WHERE    FCP_CLM_MTCH_ACCNT = FDM_CLM_MTCH_ACCNT /*****Ver 3.2****/				 
					AND      FCP_XCHNG_CD = :c_xchng_cd
           AND      (    FCP_OPNPSTN_QTY != 0
                      OR FCP_IBUY_QTY    != 0
                      OR FCP_ISELL_QTY   != 0 )
					ORDER BY FCP_CLM_MTCH_ACCNT,
                    FCP_UNDRLYNG,
										FCP_PRDCT_TYP,       /*** Ver 4.1 ***/  
                    FCP_EXPRY_DT,
                    FCP_OPT_TYP,         /*** Ver 4.1 ***/
                    FCP_STRK_PRC;        /*** Ver 4.1 ***/
        END;
      END-EXEC;
	
		}
   /*****Ver 3.2  starts*****/
  else if (  c_opr_typ == WITH_UNDERLYING )
    {
        EXEC SQL  EXECUTE
          BEGIN
            OPEN  :sys_cursor FOR
              SELECT distinct FCP_CLM_MTCH_ACCNT,     /*** distinct added for Ver 1.7 ***/
                    FCP_PRDCT_TYP,
                    FCP_INDSTK,
                    FCP_UNDRLYNG,
                    TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY') FCP_EXPRY_DT, /*** Alias added Ver 1.7 ***/
                    FCP_EXER_TYP,
                    FCP_OPT_TYP,
                    FCP_STRK_PRC,
                    FCP_OPNPSTN_FLW,
                    abs(FCP_OPNPSTN_QTY),
                    FCP_MTM_OPN_VAL,
                    decode(FCP_OPNPSTN_FLW,'S',greatest(abs(FCP_IBUY_QTY),abs(FCP_EXBUY_QTY)),'B',greatest( abs(FCP_ISELL_QTY), abs(FCP_EXSELL_QTY)),
0),
                    FCP_IBUY_QTY,
                    FCP_ISELL_QTY,
                    decode(FCP_IBUY_QTY, 0, 0, FCP_IBUY_ORD_VAL/FCP_IBUY_QTY),  /*** Ver 1.8 ***/
                    decode(FCP_ISELL_QTY, 0, 0, FCP_ISELL_ORD_VAL/FCP_ISELL_QTY), /*** Ver 1.8 ***/
                    FCP_OPT_PREMIUM,
                    NVL(FCP_UDLVRY_MRGN,0),     /*** Ver 3.3 ***/
                    NVL(FCP_TRG_PRC,0.0),       /*** ver 3.6 ***/
                    NVL(FCP_DLVRY_MODE_FLAG,'N'),       /*** Ver 4.0 ***/
                    NVL(FCP_DLVRY_OBLGAMT_BLCKD,0),     /*** Ver 4.0 ***/
                    NVL(FCP_DLVRY_QTY_BLCKD,0),          /*** Ver 4.0 ***/
                    NVL(FCP_AVG_PRC,0),      /** Ver 4.2 **/
										NVL(FCP_OPNPSTN_VAL,0)   /*** Ver 4.2 ***/
          FROM     FCP_FO_SPN_CNTRCT_PSTN,FDM_DT_MTCH 
          WHERE    FCP_CLM_MTCH_ACCNT = FDM_CLM_MTCH_ACCNT
           AND     FCP_XCHNG_CD = :c_xchng_cd
           AND      (    FCP_OPNPSTN_QTY != 0
                      OR FCP_IBUY_QTY    != 0
                      OR FCP_ISELL_QTY   != 0 )
          AND       FCP_UNDRLYNG    =  :c_undrlyng
          ORDER BY FCP_CLM_MTCH_ACCNT,
                    FCP_UNDRLYNG,
										FCP_PRDCT_TYP,       /*** Ver 4.1 ***/  
                    FCP_EXPRY_DT,
                    FCP_OPT_TYP,         /*** Ver 4.1 ***/
                    FCP_STRK_PRC;        /*** Ver 4.1 ***/
        END;
      END-EXEC;
	 }
  }
 /*****Ver 3.2 ends*****/
		else
    {
			EXEC SQL  EXECUTE
       BEGIN
        OPEN  :sys_cursor FOR
	        SELECT		FCP_CLM_MTCH_ACCNT,
										FCP_PRDCT_TYP,
										FCP_INDSTK,
										FCP_UNDRLYNG,
										TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
										FCP_EXER_TYP,
										FCP_OPT_TYP, 
										FCP_STRK_PRC,
										FCP_OPNPSTN_FLW,
										abs(FCP_OPNPSTN_QTY),
										FCP_MTM_OPN_VAL,
										decode(FCP_OPNPSTN_FLW,'S',greatest(abs(FCP_IBUY_QTY),abs(FCP_EXBUY_QTY)),'B',greatest( abs(FCP_ISELL_QTY), abs(FCP_EXSELL_QTY)),0),
										FCP_IBUY_QTY,
										FCP_ISELL_QTY,
										decode(FCP_IBUY_QTY, 0, 0, FCP_IBUY_ORD_VAL/FCP_IBUY_QTY),	/*** Ver 1.8 ***/		
										decode(FCP_ISELL_QTY, 0, 0, FCP_ISELL_ORD_VAL/FCP_ISELL_QTY),	/*** Ver 1.8 ***/	
										FCP_OPT_PREMIUM,
                    NVL(FCP_UDLVRY_MRGN,0),  /*** Ver 3.3 ***/
                    NVL(FCP_TRG_PRC,0.0),    /*** ver 3.6 ***/
                    NVL(FCP_DLVRY_MODE_FLAG,'N'),       /*** Ver 4.0 ***/
                    NVL(FCP_DLVRY_OBLGAMT_BLCKD,0),     /*** Ver 4.0 ***/
                    NVL(FCP_DLVRY_QTY_BLCKD,0),          /*** Ver 4.0 ***/
                    NVL(FCP_AVG_PRC,0),      /** Ver 4.2 **/
										NVL(FCP_OPNPSTN_VAL,0)   /*** Ver 4.2 ***/
					 FROM     FCP_FO_SPN_CNTRCT_PSTN,UAC_USR_ACCNTS 
					 WHERE    UAC_USR_ID = :c_user_id
					 AND			FCP_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT 
					 AND      FCP_XCHNG_CD = :c_xchng_cd 
					 AND      (    FCP_OPNPSTN_QTY != 0 
											OR FCP_IBUY_QTY    != 0 
											OR FCP_ISELL_QTY   != 0 )
					 ORDER BY FCP_CLM_MTCH_ACCNT,
										FCP_UNDRLYNG,
										FCP_PRDCT_TYP,       /*** Ver 4.1 ***/  
										FCP_EXPRY_DT,
                    FCP_OPT_TYP,          /*** Ver 4.1 ***/
                    FCP_STRK_PRC;        /*** Ver 4.1 ***/
        END;
      END-EXEC; 
		}
	}
	
	else
	{
		if( DEBUG_MSG_LVL_3 ) {   
	    fn_userlog(c_ServiceName,"INSIDE SINGLE MTCH ACCNNT");
	  }

		/*if ( c_opr_typ == WITH_UNDERLYING )*/
		if ( c_opr_typ == WITH_UNDERLYING  &&  c_rqst_typ == 'N')  /** Ver 1.3 **/
		{
			if( DEBUG_MSG_LVL_3 ) {         
				fn_userlog( c_ServiceName,"INSIDE WITH_UNDERLYING :%s: and c_rqst_typ:%c:", c_undrlyng ,c_rqst_typ);
			}

			EXEC SQL	EXECUTE
			 BEGIN
			 	OPEN	:sys_cursor	FOR
					SELECT		FCP_CLM_MTCH_ACCNT,
										FCP_PRDCT_TYP,
										FCP_INDSTK,
										FCP_UNDRLYNG,
										to_char( FCP_EXPRY_DT, 'DD-Mon-YYYY' ),
										FCP_EXER_TYP,
										FCP_OPT_TYP, 
										FCP_STRK_PRC,
										FCP_OPNPSTN_FLW,
										abs(FCP_OPNPSTN_QTY),
										FCP_MTM_OPN_VAL,
										decode(FCP_OPNPSTN_FLW,'S',greatest(abs(FCP_IBUY_QTY),abs(FCP_EXBUY_QTY)) ,
																'B',greatest(abs(FCP_ISELL_QTY),abs(FCP_EXSELL_QTY) ),0),		
										FCP_IBUY_QTY,
										FCP_ISELL_QTY,
										decode(FCP_IBUY_QTY, 0, 0, FCP_IBUY_ORD_VAL/FCP_IBUY_QTY),	/*** Ver 1.8 ***/		
										decode(FCP_ISELL_QTY, 0, 0, FCP_ISELL_ORD_VAL/FCP_ISELL_QTY),	/*** Ver 1.8 ***/	
										FCP_OPT_PREMIUM,
                    NVL(FCP_UDLVRY_MRGN,0),  /*** Ver 3.3 ***/
                    NVL(FCP_TRG_PRC,0.0),    /*** ver 3.6 ***/
                    NVL(FCP_DLVRY_MODE_FLAG,'N'),       /*** Ver 4.0 ***/
                    NVL(FCP_DLVRY_OBLGAMT_BLCKD,0),     /*** Ver 4.0 ***/
                    NVL(FCP_DLVRY_QTY_BLCKD,0),          /*** Ver 4.0 ***/
                    NVL(FCP_AVG_PRC,0),      /** Ver 4.2 **/ 
										NVL(FCP_OPNPSTN_VAL,0)   /*** Ver 4.2 ***/
					FROM			FCP_FO_SPN_CNTRCT_PSTN
					WHERE			FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
					AND				FCP_XCHNG_CD = :c_xchng_cd
					AND				FCP_UNDRLYNG    =  :c_undrlyng
					AND				(    FCP_OPNPSTN_QTY != 0
										OR FCP_IBUY_QTY    != 0 
										OR FCP_ISELL_QTY   != 0 )
					ORDER BY	FCP_CLM_MTCH_ACCNT,
                    FCP_UNDRLYNG,         /*** Ver 4.1 ***/
										FCP_PRDCT_TYP,       /*** Ver 4.1 ***/  
                    FCP_EXPRY_DT,
                    FCP_OPT_TYP,          /*** Ver 4.1 ***/
                    FCP_STRK_PRC;         /*** Ver 4.1 ***/																	
				END;
			END-EXEC;
		}
		/******************* Ver 1.3 Starts **************/

		else if ( c_opr_typ == WITH_UNDERLYING  &&  c_rqst_typ == 'Y')  
		{


				if( DEBUG_MSG_LVL_3 ) {
        fn_userlog( c_ServiceName,"INSIDE WITH_UNDERLYING ADV:%s: and c_rqst_typ:%c:", c_undrlyng,c_rqst_typ );
      }

      EXEC SQL  EXECUTE
       BEGIN
        OPEN  :sys_cursor FOR
          SELECT    distinct FCP_CLM_MTCH_ACCNT,        /*** distinct added for Ver 1.7 ***/
                    FCP_PRDCT_TYP,
                    FCP_INDSTK,
                    FCP_UNDRLYNG,
                    to_char( FCP_EXPRY_DT, 'DD-Mon-YYYY' ) FCP_EXPRY_DT, /*** Alias added Ver 1.7 ***/
                    FCP_EXER_TYP,
                    FCP_OPT_TYP,
                    FCP_STRK_PRC,
                    FCP_OPNPSTN_FLW,
                    abs(FCP_OPNPSTN_QTY),
                    FCP_MTM_OPN_VAL,
                    decode(FCP_OPNPSTN_FLW,'S',greatest(abs(FCP_IBUY_QTY),abs(FCP_EXBUY_QTY)) ,
                                'B',greatest(abs(FCP_ISELL_QTY),abs(FCP_EXSELL_QTY) ),0),
                    FCP_IBUY_QTY,
                    FCP_ISELL_QTY,
										decode(FCP_IBUY_QTY, 0, 0, FCP_IBUY_ORD_VAL/FCP_IBUY_QTY),	/*** Ver 1.8 ***/		
										decode(FCP_ISELL_QTY, 0, 0, FCP_ISELL_ORD_VAL/FCP_ISELL_QTY),	/*** Ver 1.8 ***/	
                    FCP_OPT_PREMIUM,
                    NVL(FCP_UDLVRY_MRGN,0),    /*** Ver 3.3 ***/
                    NVL(FCP_TRG_PRC,0.0), 		 /*** ver 3.6 ***/
                    NVL(FCP_DLVRY_MODE_FLAG,'N'),       /*** Ver 4.0 ***/
                    NVL(FCP_DLVRY_OBLGAMT_BLCKD,0),     /*** Ver 4.0 ***/
                    NVL(FCP_DLVRY_QTY_BLCKD,0),          /*** Ver 4.0 ***/
                    NVL(FCP_AVG_PRC,0),      /** Ver 4.2 **/
										NVL(FCP_OPNPSTN_VAL,0)   /*** Ver 4.2 ***/
          FROM      FCP_FO_SPN_CNTRCT_PSTN,
										ACM_ADV_CLNT_MAP
          WHERE     ACM_MTCH_ACCNT = FCP_CLM_MTCH_ACCNT 
          AND       NVL(ACM_ACTV_FLG,'A') = 'A'   /*** Clause added for Ver 1.7 ***/
					AND				FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
          AND       FCP_XCHNG_CD = :c_xchng_cd
          AND       FCP_UNDRLYNG    =  :c_undrlyng
          AND       (    FCP_OPNPSTN_QTY != 0
                    OR FCP_IBUY_QTY    != 0
                    OR FCP_ISELL_QTY   != 0 )
          ORDER BY  FCP_CLM_MTCH_ACCNT,
                    FCP_UNDRLYNG ,         /*** Ver 4.1 ***/
										FCP_PRDCT_TYP,       /*** Ver 4.1 ***/  
                    FCP_EXPRY_DT,
                    FCP_OPT_TYP,          /*** Ver 4.1 ***/
                    FCP_STRK_PRC;         /*** Ver 4.1 ***/
        END;
      END-EXEC;
    }

		/******************* Ver 1.3 Ends  **************/

		else if ( c_opr_typ == WITHOUT_UNDERLYING &&  c_rqst_typ == 'N' )  /** Ver 1.3 **/
		{
			if( DEBUG_MSG_LVL_3 ) {         
				fn_userlog( c_ServiceName,"INSIDE WITHOUT_UNDERLYING :%s: and c_rqst_typ:%c:", c_undrlyng,c_rqst_typ );
			}
			EXEC SQL	EXECUTE
			 BEGIN
			 	OPEN	:sys_cursor	FOR
					SELECT		FCP_CLM_MTCH_ACCNT,	
										FCP_PRDCT_TYP,
										FCP_INDSTK,
										FCP_UNDRLYNG,
										to_char( FCP_EXPRY_DT, 'DD-Mon-YYYY' ),
										FCP_EXER_TYP,
										FCP_OPT_TYP,
										FCP_STRK_PRC,
										FCP_OPNPSTN_FLW,
										abs(FCP_OPNPSTN_QTY),
										FCP_MTM_OPN_VAL,
										decode(FCP_OPNPSTN_FLW,'S',greatest(abs(FCP_IBUY_QTY),abs(FCP_EXBUY_QTY)) ,'B',greatest(abs(FCP_ISELL_QTY),abs(FCP_EXSELL_QTY) ),0),		
										FCP_IBUY_QTY,
										FCP_ISELL_QTY,
										decode(FCP_IBUY_QTY, 0, 0, FCP_IBUY_ORD_VAL/FCP_IBUY_QTY),	/*** Ver 1.8 ***/		
										decode(FCP_ISELL_QTY, 0, 0, FCP_ISELL_ORD_VAL/FCP_ISELL_QTY),	/*** Ver 1.8 ***/	
										FCP_OPT_PREMIUM,
                    NVL(FCP_UDLVRY_MRGN,0),    /*** Ver 3.3  ***/
                    NVL(FCP_TRG_PRC,0.0),		 	 /*** ver 3.6 ***/
                    NVL(FCP_DLVRY_MODE_FLAG,'N'),       /*** Ver 4.0 ***/
                    NVL(FCP_DLVRY_OBLGAMT_BLCKD,0),     /*** Ver 4.0 ***/
                    NVL(FCP_DLVRY_QTY_BLCKD,0),          /*** Ver 4.0 ***/
                    NVL(FCP_AVG_PRC,0),      /** Ver 4.2 **/
										NVL(FCP_OPNPSTN_VAL,0)   /*** Ver 4.2 ***/
					FROM			FCP_FO_SPN_CNTRCT_PSTN
					WHERE			FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
					AND				FCP_XCHNG_CD = :c_xchng_cd
					AND				(    FCP_OPNPSTN_QTY != 0
										OR FCP_IBUY_QTY    != 0 
										OR FCP_ISELL_QTY   != 0 )
					ORDER BY	FCP_CLM_MTCH_ACCNT,																		
										FCP_UNDRLYNG,
										FCP_PRDCT_TYP,       /*** Ver 4.1 ***/  
										FCP_EXPRY_DT,
                    FCP_OPT_TYP,          /*** Ver 4.1 ***/
                    FCP_STRK_PRC;        /*** Ver 4.1 ***/
				END;
			END-EXEC; 
		}

		 /******************* Ver 1.3 Starts **************/

		else if( c_opr_typ == WITHOUT_UNDERLYING &&  c_rqst_typ == 'Y' ) 
		{

				if( DEBUG_MSG_LVL_3 ) {
        fn_userlog( c_ServiceName,"INSIDE WITHOUT_UNDERLYING ADV:%s: and c_rqst_typ:%c:", c_undrlyng,c_rqst_typ );
      }
      EXEC SQL  EXECUTE
       BEGIN
        OPEN  :sys_cursor FOR
          SELECT   distinct  FCP_CLM_MTCH_ACCNT,        /*** distinct added for Ver 1.7 ***/
                    FCP_PRDCT_TYP,
                    FCP_INDSTK,
                    FCP_UNDRLYNG,
                    to_char( FCP_EXPRY_DT, 'DD-Mon-YYYY' ) FCP_EXPRY_DT, /*** Alias added Ver 1.7 ***/
                    FCP_EXER_TYP,
                    FCP_OPT_TYP,
                    FCP_STRK_PRC,
                    FCP_OPNPSTN_FLW,
                    abs(FCP_OPNPSTN_QTY),
                    FCP_MTM_OPN_VAL,
                    decode(FCP_OPNPSTN_FLW,'S',greatest(abs(FCP_IBUY_QTY),abs(FCP_EXBUY_QTY)) ,'B',
greatest(abs(FCP_ISELL_QTY),abs(FCP_EXSELL_QTY) ),0),
                    FCP_IBUY_QTY,
                    FCP_ISELL_QTY,
										decode(FCP_IBUY_QTY, 0, 0, FCP_IBUY_ORD_VAL/FCP_IBUY_QTY),	/*** Ver 1.8 ***/		
										decode(FCP_ISELL_QTY, 0, 0, FCP_ISELL_ORD_VAL/FCP_ISELL_QTY),	/*** Ver 1.8 ***/	
                    FCP_OPT_PREMIUM,
                    NVL(FCP_UDLVRY_MRGN,0),    /*** Ver 3.3  ***/
                    NVL(FCP_TRG_PRC,0.0),      /*** ver 3.6 ***/
                    NVL(FCP_DLVRY_MODE_FLAG,'N'),       /*** Ver 4.0 ***/
                    NVL(FCP_DLVRY_OBLGAMT_BLCKD,0),     /*** Ver 4.0 ***/
                    NVL(FCP_DLVRY_QTY_BLCKD,0),          /*** Ver 4.0 ***/
                    NVL(FCP_AVG_PRC,0),      /** Ver 4.2 **/
										NVL(FCP_OPNPSTN_VAL,0)   /*** Ver 4.2 ***/
          FROM      FCP_FO_SPN_CNTRCT_PSTN,
										ACM_ADV_CLNT_MAp
          WHERE     ACM_MTCH_ACCNT = FCP_CLM_MTCH_ACCNT 
          AND       NVL(ACM_ACTV_FLG,'A') = 'A'   /*** Clause added for Ver 1.7 ***/
					AND			  FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
          AND       FCP_XCHNG_CD = :c_xchng_cd
          AND       (    FCP_OPNPSTN_QTY != 0
                    OR FCP_IBUY_QTY    != 0
                    OR FCP_ISELL_QTY   != 0 )
          ORDER BY  FCP_CLM_MTCH_ACCNT,
                    FCP_UNDRLYNG,
										FCP_PRDCT_TYP,       /*** Ver 4.1 ***/  
                    FCP_EXPRY_DT,
                    FCP_OPT_TYP,          /*** Ver 4.1 ***/
                    FCP_STRK_PRC;         /*** Ver 4.1 ***/
        END;
      END-EXEC;



		}
	

		 /******************* Ver 1.3 Ends **************/


		else
		{
			fn_errlog( c_ServiceName, "S31055", "Invalid Option Type", c_errmsg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
	
	if ( SQLCODE != 0 )
	{  
		fn_errlog( c_ServiceName, "S31060", SQLMSG, c_errmsg  );
		EXEC SQL FREE :sys_cursor;
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	ptr_fml_Obuf = NULL; 

	i_counter = 1 ;

	i_cntr = 0 ;

	for ( ; ; )
	{
			l_opnpstn_qty = 0;
			l_strike_prc = 0;
			d_mtm_opn_val = 0;
			li_bo_qty = 0;
			li_so_qty = 0;
			d_profit_loss = 0;
			d_prmum = 0;
			li_bo_rt = 0;	/*** Ver 1.8 ***/
			li_so_rt = 0;  /*** Ver 1.8 ***/
      c_setlmnt_flg = '\0';  /*** Ver 3.1 ***/
      
      d_dlvry_mrgn_blk = 0.0; /** Ver 3.3 **/
      d_dlvry_mrgn_req = 0.0; /** Ver 3.3 **/
      i_crnt_mnth_flg = 0;    /** Ver 3.3 **/
      
      d_trg_prc = 0.0; /*** ver 3.6 ***/

			EXEC SQL FETCH :sys_cursor								
							 INTO	 :c_mtch_accnt_no,				
										 :c_prd_typ,							
										 :c_ctgry_indstk,					
										 :c_undrlyng,							
										 :c_expry_dt,							
										 :c_exrc_typ,	
										 :c_opt_typ,
										 :l_strike_prc,
										 :c_opnpstn_flw,					
										 :l_opnpstn_qty,					
										 :d_mtm_opn_val,					
										 :l_cvr_qty,							
										 :li_bo_qty,							
										 :li_so_qty,
										 :li_bo_rt,		/*** Ver 1.8 ***/
										 :li_so_rt,		/*** Ver 1.8 ***/
										 :d_prmum,
                     :d_dlvry_mrgn_blk,      /*** Ver 3.3 ***/							
                     :d_trg_prc, /*** ver 3.6 ***/
										 :c_dlvry_mode_flg,      /*** Ver 4.0 ***/
           			     :d_dlvry_oblgamt_blckd, /*** Ver 4.0 ***/
                	   :l_dlvry_qty_blckd,	   /*** Ver 4.0 ***/
                     :d_avg_prcs,            /*** Ver 4.2 ***/
										 :d_opnpstn_val;				 /*** Ver 4.2 ***/
		SETNULL(c_expry_dt);

		if( DEBUG_MSG_LVL_3 ) {
			fn_userlog(c_ServiceName,"@@@@@@@@@@@@@@@@ FETCH RECORD @@@@@@@@@@@@@@@@:");
			fn_userlog(c_ServiceName,":c_mtch_accnt:%s:",c_mtch_accnt_no);
			fn_userlog(c_ServiceName,":c_prd_typ:%c:",c_prd_typ);
			fn_userlog(c_ServiceName,":c_ctgry_indstk:%c:",c_ctgry_indstk);
			fn_userlog(c_ServiceName,":c_undrlyng:%s:",c_undrlyng);
			fn_userlog(c_ServiceName,":c_expry_dt:%s:",(char *)c_expry_dt.arr);
			fn_userlog(c_ServiceName,":c_exrc_typ:%c:",c_exrc_typ);
			fn_userlog(c_ServiceName,":c_opt_typ:%c:",c_opt_typ);
			fn_userlog(c_ServiceName,":l_strike_prc:%ld:",(char *)l_strike_prc);
			fn_userlog(c_ServiceName,":c_opnpstn_flw:%c:",c_opnpstn_flw);
			fn_userlog(c_ServiceName,":l_opnpstn_qty:%ld:",l_opnpstn_qty);
			fn_userlog(c_ServiceName,":d_mtm_opn_val:%lf:",d_mtm_opn_val);
			fn_userlog(c_ServiceName,":l_cvr_qty:%ld:",l_cvr_qty);
			fn_userlog(c_ServiceName,":li_bo_qty:%ld:",li_bo_qty);
			fn_userlog(c_ServiceName,":li_so_qty:%ld:",li_so_qty);
			fn_userlog(c_ServiceName,":d_prmum:%lf:",d_prmum);
			fn_userlog(c_ServiceName,":li_bo_rt:%ld:",li_bo_rt);	/*** Ver 1.8 ***/
			fn_userlog(c_ServiceName,":li_so_rt:%ld:",li_so_rt);	/*** Ver 1.8 ***/
      fn_userlog(c_ServiceName,":d_dlvry_mrgn_blk:%lf:",d_dlvry_mrgn_blk);  /*** Ver 3.3 ***/
      fn_userlog(c_ServiceName,":d_dlvry_mrgn_req:%lf:",d_dlvry_mrgn_req);  /*** Ver 3.3 ***/
      fn_userlog(c_ServiceName,":d_trg_prc:%lf:",d_trg_prc); /*** ver 3.6 ***/
      fn_userlog(c_ServiceName,":c_dlvry_mode_flg:%c:",c_dlvry_mode_flg); /*** ver 4.0 ***/
      fn_userlog(c_ServiceName,":d_dlvry_oblgamt_blckd:%lf:",d_dlvry_oblgamt_blckd); /*** ver 4.0 ***/
      fn_userlog(c_ServiceName,":l_dlvry_qty_blckd:%ld:",l_dlvry_qty_blckd); /*** ver 4.0 ***/
		}

		if ( SQLCODE != 0 )
		{
			if ( SQLCODE == NO_DATA_FOUND )
			{
        if ( i_counter  != 1 )
        {
					/*** Ver 3.0 Starts ***/
          if( c_prd_typ == 'F')
          {
						if( DEBUG_MSG_LVL_5 )
						{
							fn_userlog(c_ServiceName,"Checking for records inside NO_DATA_FOUND of RSPREAD can be shown from ORDER BOOK Only");
						}

						EXEC SQL
							select	TO_CHAR( FOD_EXPRY_DT, 'DD-MON-YYYY' ),
								FOD_ORDR_FLW,
								FTQ_LST_TRD_PRC
							/* INTO	:c_expry_dt,
								:c_uopnpstn_flw,			* Commented in Ver 3.5 ***/
							INTO	:c_r_exp_dt,							/* Ver 3.5 */
								:c_r_opnpstn_flw,							/* Ver 3.5 */
								:l_lst_trdd_prc
							FROM	FOD_FO_ORDR_DTLS, FTQ_FO_TRD_QT
							WHERE	FOD_EXPRY_DT NOT IN (SELECT DISTINCT(FCP_EXPRY_DT)
									FROM FCP_FO_SPN_CNTRCT_PSTN
									WHERE FCP_XCHNG_CD = :c_xchng_cd
									AND FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
									AND FCP_UNDRLYNG = :c_prev_undrlyng
									AND FCP_PRDCT_TYP = :c_prd_typ
									AND (    FCP_OPNPSTN_QTY != 0
									OR FCP_IBUY_QTY    != 0
									OR FCP_ISELL_QTY   != 0 ))
							AND	FTQ_EXPRY_DT = FOD_EXPRY_DT
							AND	FOD_UNDRLYNG = FTQ_UNDRLYNG
							AND	FTQ_PRDCT_TYP = FOD_PRDCT_TYP
							AND	FOD_ORDR_STTS in ('P','O','R','Q')
							AND	FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
							AND	FOD_PRDCT_TYP= :c_prd_typ
							AND	FOD_UNDRLYNG= :c_prev_undrlyng
							AND	FOD_SPL_FLAG='O'
							AND	FOD_XCHNG_CD = :c_xchng_cd
							AND	rownum < 2;

						if( SQLCODE != 0 && ( SQLCODE != NO_DATA_FOUND ))
						{
							tpcommit(0);
							fn_errlog( c_ServiceName, "S31065", SQLMSG, c_errmsg  );
							EXEC SQL CLOSE :sys_cursor;
							EXEC SQL FREE :sys_cursor;
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
						else if ( SQLCODE == NO_DATA_FOUND )
						{
              if( DEBUG_MSG_LVL_1 ) { /*** debug level added in ver 3.8 ***/
							fn_userlog(c_ServiceName,"No records of RSPREAD inside NO_DATA_FOUND  can be shown from ORDER BOOKOnly");
              }  
							c_rsprd_pos_flg = 'N';
						}
						else
						{
							c_rsprd_pos_flg = 'Y';
							if( DEBUG_MSG_LVL_3 )
							{
								fn_userlog(c_ServiceName,"Records of RSPREAD inside NO_DATA_FOUND are available to be shown from ORDER BOOK Only");
							}
							EXEC SQL
								SELECT nvl(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0),
									FOD_CLM_MTCH_ACCNT,
									FOD_INDSTK,
									FOD_UNDRLYNG,
									FOD_EXER_TYP,
									NVL(sum(FOD_SROLL_DIFF_AMT),0) + NVL(sum(FOD_SROLL_LSS_AMT),0)
								INTO
									:l_fod_qty,
									:c_mtch_accnt_no,
									:c_uindstk,
									/* :c_undrlyng,			*** Ver 3.5 ***/
									:c_prev_undrlyng,		/* Ver 3.5 */
									:c_exrc_typ,
									:d_rordr_mrgn
								FROM  FOD_FO_ORDR_DTLS
								WHERE FOD_ORDR_STTS in ('P','O','R','Q')
								AND FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
								AND FOD_PRDCT_TYP= :c_prd_typ
								AND FOD_UNDRLYNG = :c_prev_undrlyng
								/* AND FOD_EXPRY_DT = :c_expry_dt		*** Ver 3.5 ***/
								AND FOD_EXPRY_DT = :c_r_exp_dt			/* Ver 3.5 */
								AND FOD_XCHNG_CD = :c_xchng_cd
								/* and FOD_ORDR_FLW = :c_uopnpstn_flw		*** Ver 3.5 ***/
								and FOD_ORDR_FLW = :c_r_opnpstn_flw			/* Ver 3.5 */
								AND FOD_SPL_FLAG = 'O'
								GROUP BY FOD_CLM_MTCH_ACCNT,FOD_INDSTK,FOD_UNDRLYNG,FOD_EXER_TYP;
							if ( SQLCODE != 0 )
							{
								tpcommit(0);
								fn_errlog( c_ServiceName, "S31070", SQLMSG, c_errmsg  );
								EXEC SQL CLOSE :sys_cursor;
								EXEC SQL FREE :sys_cursor;
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
							c_spl_flg = CONTRACT_IP;
            	li_r_bo_qty = 0;    /*** Ver 3.5 ***/
            	li_r_so_qty = 0;    /*** Ver 3.5 ***/
							/* c_opnpstn_flw = '-';
							i_cntrct_cnt = 0;
							rec_cnt = 0;
							ret_val = 0;
							l_cvr_qty = 0;
							li_bo_qty = 0;
							li_so_qty = 0;
							l_cvr_qty = l_cvr_qty + l_fod_qty;
							if(c_uopnpstn_flw == 'B')
							{
								li_bo_qty = li_bo_qty + l_fod_qty;
							}
							else if (c_uopnpstn_flw == 'S')
							{
								li_so_qty = li_so_qty - l_fod_qty;
							}	*** Ver 3.5 ***/
            	/*** ver 3.5 starts ***/
            	if(c_r_opnpstn_flw == 'B')
            	{
              	li_r_bo_qty = li_r_bo_qty + l_fod_qty;
            	}
            	else if (c_r_opnpstn_flw == 'S')
            	{
              	li_r_so_qty = li_r_so_qty - l_fod_qty;
            	}
            	/*** Ver 3.5 Ends ***/
							if(i_non_Obuy_count > 0 && i_pstn_count > 0 )
							{
								c_grp_flg = 'Y';
							}
							else
							{
								c_grp_flg = 'N';
							}

							if( DEBUG_MSG_LVL_3 )
							{
								fn_userlog(c_ServiceName,"Spread inside NO_DATA_FOUND BUY :%ld: and COVER :%ld:",l_fod_qty,l_cvr_qty);
								fn_userlog(c_ServiceName,"inside NO_DATA_FOUND Total BUY :%ld: and SELL :%ld:",li_bo_qty,li_so_qty);
								fn_userlog(c_ServiceName,"RSPREAD From FOD ONLY :inside NO_DATA_FOUND: c_uprdct_typ :%c: c_uindstk:%c: c_uopnpstn_flw :%c: d_rordr_mrgn :%lf:",c_uprdct_typ,c_uindstk,c_uopnpstn_flw,d_rordr_mrgn);
								fn_userlog(c_ServiceName,"inside NO_DATA_FOUND:c_uprdct_typ:%c: c_uindstk:%c: c_prev_undrlyng:%s: EXPRY_DT:%s: EXER_TYP:%c: c_uopnpstn_flw:%c: d_utrd_mrgn:%lf: c_spl_flg:%c: c_rollovr_flg:%c: c_sprd_roll_flg:%c: l_tot_buy_qty :%ld:",c_uprdct_typ,c_uindstk,c_prev_undrlyng,c_r_exp_dt.arr,c_exrc_typ,c_r_opnpstn_flw,d_utrd_mrgn,c_spl_flg,c_rollovr_flg,c_sprd_roll_flg,l_tot_buy_qty);
								fn_userlog(c_ServiceName,"inside NO_DATA_FOUND:before packing from RSPREAD_FOD_ONLY");
							}

							for ( i=1 ; i<=i_cntrct_cnt+1 ; i++)
							{
								i_returncode = fn_pack_vartofml ( c_ServiceName,
									 c_errmsg,
									 &ptr_fml_Obuf,
									 41 /*** Ver 4.2 ***//*** 37 to 40 in ver 4.0 ***/,
									FFO_PRDCT_TYP,(char *)&c_prd_typ,
									FFO_CTGRY_INDSTK,(char *)&c_uindstk,
									FFO_UNDRLYNG,(char *)c_prev_undrlyng,
									FFO_EXPRY_DT,(char *)c_r_exp_dt.arr,						/*** Ver 3.5 ***/
									FFO_EXER_TYP,(char *)&c_exrc_typ,
									FFO_OPT_TYP, (char *)&c_r_opt_typ,							/*** Ver 3.5 ***/
									FFO_STRK_PRC, (char *)&l_r_strike_prc,					/*** Ver 3.5 ***/
									FFO_C_OPNPSTN_FLW,(char *)&c_null,							/*** Ver 3.5 ***/
									FFO_C_OPNPSTN_QTY,(char *)&l_null,
									FFO_CVR_QTY,(char *)&l_fod_qty,									/*** Ver 3.5 ***/
									FFO_C_MTM_OPN_VAL,(char *)&d_null,
									FFO_LST_TRD_PRC,(char *)&l_lst_trdd_prc,
									FFO_U_TRD_MRGN,(char *)&d_rutrd_mrgn,
									FFO_SPL_FLG,(char *)&c_spl_flg,
									FFO_MIN_LOT_QTY,(char *)&l_null,
									FFO_UI_BUY_QTY,(char *)&li_r_bo_qty,						/*** ver 3.5 ***/
									FFO_UI_SELL_QTY,(char *)&li_r_so_qty,						/*** ver 3.5 ***/
									FFO_U_MM_TRD_MRGN,(char *)&d_rumin_trd_mrgn,
									FFO_PRCNTG_CHNG,(char *)&l_null,
									FFO_EBA_MTCH_ACT_NO,(char*)&c_mtch_accnt_no,
									FFO_SUB_BUF_CNT,   (char *)&l_null,							/*** ver 3.5 ***/
									FFO_ACTN_ID,       (char *)&l_null,							/*** ver 3.5 ***/
									FFO_BASE_PRC,(char *)&l_null,
									FFO_XCHNG_CD, (char *)&c_xchng_cd,
									FFO_AVM_PRCNT, (char *)&d_null,
									FFO_BAL_AMT,(char *)&d_null,
									FFO_QT_TRDNG_FLG,(char *)&c_null,       				/*** ver 3.5 ***/
									FFO_SETTLOR_STTS,(char *)&c_null,               /*** ver 3.5 ***/
									FFO_IBUY_ORD_RT,(char *)&l_null,
									FFO_ISELL_ORD_RT,(char *)&l_null,
									FFO_CURR_RT, (char *)&l_null,										/*** ver 3.5 ***/
									FFO_RQST_TYP, (char *)&c_null,
									FFO_NKD_BLKD_FLG, (char *)&c_null,
									FFO_DR_CR_FLG, (char *)&c_null,
									FFO_BK_UBK_FLG,( char * )&c_null,
									FFO_SO_AMT_BLKD, (char *)&d_null,
									FFO_OPNPSTN_VAL, (char *)&d_null,
									FFO_INDX_INDCTR, (char *)&c_null,           /*** Ver 4.0 ***/
									FFO_STLMNT_TYP, (char *)&c_null,             /*** Ver 4.0 ***/
									FFO_BO_AMT_BLKD, (char *)&c_null,             /*** Ver 4.0 ***/
								  FFO_EFF_EXCTD_RT, (char *)&d_null);               /*** Ver 4.2 ***/

								if ( i_returncode == -1 )
								{
									tpcommit(0);
									fn_errlog( c_ServiceName, "S31075", FMLMSG, c_errmsg  );
									EXEC SQL CLOSE :sys_cursor;
									EXEC SQL FREE :sys_cursor;
									tpfree ( ( char * ) ptr_fml_Obuf );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}
							}
          	}
						if( DEBUG_MSG_LVL_5 )
						{
							fn_userlog(c_ServiceName,"After Direct from FOD inside NO_DATA_FOUND c_rsprd_pos_flg:%c:",c_rsprd_pos_flg);
						}
					}
					/*** Ver 3.0 Ends ***/

       		EXEC SQL
						SELECT  FUS_INDSTK,
                    FUS_UOPNPSTN_FLW,
                    abs(FUS_UOPNPSTN_QTY),
                    FUS_INITIAL_MRGN + FUS_BLCKD_PL ,
								 /**FUS_INITIAL_MRGN + FUS_BLCKD_PL + :d_total_prmum,**/   /*Commented by Shailesh on 10-Dec-2011*/
										NVL(FUS_MIN_MRGN,0),
										FUS_MTM_FLG,
                    NVL(sum(FOD_SROLL_DIFF_AMT),0) + NVL(sum(FOD_SROLL_LSS_AMT),0)    /*** Ver 3.0 ***/
            INTO    :c_uindstk,
                    :c_uopnpstn_flw,
                    :l_uopnpstn_qty,
                    :d_utrd_mrgn,
                    :d_umin_trd_mrgn,
										:c_mtm_flag,
                    :d_sroll_diff_amt     /*** Ver 3.0 ***/
            FROM		FUS_FO_UNDRLYNG_SPN_PSTN, FOD_FO_ORDR_DTLS    /*** FOD_FO_ORDR_DTLS added in Ver 3.0 ***/
            WHERE		FUS_CLM_MTCH_ACCNT = :c_mtch_accnt_no
            AND			FUS_XCHNG_CD = :c_xchng_cd
            AND			FUS_UNDRLYNG = :c_prev_undrlyng
						AND			FOD_SPL_FLAG(+) = 'O'													/*** Ver 3.0 ***/
            AND     FUS_CLM_MTCH_ACCNT  = FOD_CLM_MTCH_ACCNT(+)   /*** Ver 3.0 ***/
            AND     FUS_XCHNG_CD  = FOD_XCHNG_CD(+)               /*** Ver 3.0 ***/
            AND     FUS_UNDRLYNG  = FOD_UNDRLYNG(+)               /*** Ver 3.0 ***/
            GROUP By FUS_INDSTK,FUS_UOPNPSTN_FLW,
                    abs(FUS_UOPNPSTN_QTY),
                    FUS_INITIAL_MRGN + FUS_BLCKD_PL ,
                    NVL(FUS_MIN_MRGN,0),FUS_MTM_FLG;              /*** Ver 3.0 ***/

					if( SQLCODE != 0 )
       		{ 
						fn_errlog( c_ServiceName, "S31080", SQLMSG, c_errmsg  );
      			EXEC SQL CLOSE :sys_cursor;
      			EXEC SQL FREE :sys_cursor;
      			/* tpfree ( ( char * ) ptr_fml_Obuf ); *** Commented in VQC ***/
      			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       		}
          d_utrd_mrgn = d_utrd_mrgn + d_sroll_diff_amt;   /*** Ver 3.0 ***/

					/*** Calculate Available margin = Blocked initial margin - Notional Profit Loss ***/
		
					if ( d_tot_profit_loss > 0 )
					{
						d_und_avail_mrgn = d_utrd_mrgn;
					}
					else
					{
						d_und_avail_mrgn = d_utrd_mrgn + d_tot_profit_loss;
					}
  
					c_spl_flg = UNDERLYING_IP;
		  		li_temp = 0; 
					rec_cnt=1;           
					ret_val=0;		
					c_rollovr_flg = '-';      /***  Ver 1.4 ***/			
          c_sprd_roll_flg = '-';    /*** Ver 3.0 ***/
				

					if( DEBUG_MSG_LVL_3 )
 					{          
						fn_userlog(c_ServiceName,"***Packing group level data for :%s:%s:***",c_prev_mt_acnt,c_prev_undrlyng);
						fn_userlog( c_ServiceName,"Special Flag |%c|",c_spl_flg);
						fn_userlog( c_ServiceName,"c_mtm_flag Flag |%s|",c_mtm_flag);
						/* fn_userlog( c_ServiceName,"c_prev_ctgry_indstk is |%c|",c_prev_ctgry_indstk); ** Commented in VQC **/
						fn_userlog( c_ServiceName,"l_uopnpstn_qty is |%ld|",l_uopnpstn_qty);
						fn_userlog( c_ServiceName,"l_uopnpstn_qty is |%ld|",l_uopnpstn_qty);
						fn_userlog( c_ServiceName,"Margin on position is |%lf|",d_utrd_mrgn);
						fn_userlog( c_ServiceName,"Total Buy Order Qty is |%ld|",l_tot_buy_qty);
						fn_userlog( c_ServiceName,"Total Sell Ordr Qty is |%ld|",l_tot_sell_qty);
						fn_userlog( c_ServiceName,"Min Margin amount is |%lf|",d_umin_trd_mrgn);
						fn_userlog( c_ServiceName,"Total profit Loss is |%lf|",d_tot_profit_loss);
						fn_userlog( c_ServiceName,"Available Margin is |%lf|",d_und_avail_mrgn);
						fn_userlog(c_ServiceName,"*******************************************************");
					}
 
	   			/**** Ver 1.5 -- Starts ***/
    			if(i_non_Obuy_count > 0 && i_pstn_count > 0 )
    			{
      			c_grp_flg = 'Y';
    			}
    			else
    			{
      			c_grp_flg = 'N';
    			}
				
					if(DEBUG_MSG_LVL_3)
          {
    				fn_userlog(c_ServiceName,":Inside No_Data Found :");
    				fn_userlog(c_ServiceName,":c_grp_flg:  :%c:",c_grp_flg);
    				fn_userlog(c_ServiceName,":c_prev_undrlyng :  :%s:",c_prev_undrlyng);
    				fn_userlog(c_ServiceName,":i_non_Obuy_count:  :%d:",i_non_Obuy_count);
    				fn_userlog(c_ServiceName,":i_pstn_count:  :%d:",i_pstn_count);
    			}
					/**** Ver 1.5 -- Ends ***/
								
					if (l_qty == 0)
					{
						d_und_avail_mrgn = 0.0;
						d_umin_trd_mrgn  = 0.0;
					}

					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog( c_ServiceName,"l_qty is |%ld|",l_qty);
					}
					d_utrd_mrgn = trunc(d_utrd_mrgn);
					d_umin_trd_mrgn = trunc(d_umin_trd_mrgn);
					d_und_avail_mrgn = trunc(d_und_avail_mrgn);
					d_tot_profit_loss = trunc(d_tot_profit_loss);

	  	 		i_returncode = fn_pack_vartofml ( c_ServiceName,
				  																	c_errmsg,
																						&ptr_fml_Obuf,
																						42, /** Ver 4.2 changed to 42 **//** Ver 1.4 Changed from 26 to 27 **/ /***  Ver 1.8 Changed from 27 to 29 ***/ /** Ver 2.5 changed from 29 to 30 **/ /** Changed to 31 in Ver 2.7 **/
																						/*** Ver 2.8 Changed from 31 to 32 ***//*** Ver 3.1 Changed from 32 to 33 ***//*** Ver 2.9 Changed from 33 to 34 ***/ /*Ver 3.0 convert to 35from 34 */ /* Ver 3.3 Chnged frm 35 to 37 *//*** in ver 3.6 37 changed to 38 ***//*** in ver 4.0 38 changed to 41 ***/
                                              
                                       /*** FFO_PRDCT_TYP,(char *)&c_null, Commented in Ver 1.5 ***/
                                            FFO_PRDCT_TYP,(char *)&c_grp_flg,   /*** Ver 1.5 ***/ 
																						FFO_CTGRY_INDSTK,(char *)&c_uindstk,
																						FFO_UNDRLYNG,(char *)c_prev_undrlyng,
																						FFO_EXPRY_DT,(char *)c_mtm_flag,
																						FFO_EXER_TYP,(char *)&c_null,
																						FFO_OPT_TYP, (char *)&c_null,
																						FFO_STRK_PRC, (char *)&l_null,
																						FFO_C_OPNPSTN_FLW,(char *)"N",
																						FFO_C_OPNPSTN_QTY,(char *)&l_uopnpstn_qty,
																						FFO_CVR_QTY,(char *)&l_null,	
																						FFO_C_MTM_OPN_VAL,(char *)&d_null,
																						FFO_LST_TRD_PRC,(char *)&l_null, 
																						FFO_U_TRD_MRGN,(char *)&d_utrd_mrgn,
																						FFO_SPL_FLG,(char *)&c_spl_flg,
																						FFO_MIN_LOT_QTY,(char *)&li_temp,
																						FFO_UI_BUY_QTY,(char *)&l_tot_buy_qty, 
																						FFO_UI_SELL_QTY,(char *)&l_tot_sell_qty,  
																						FFO_U_MM_TRD_MRGN,(char *)&d_umin_trd_mrgn,
																						FFO_PRCNTG_CHNG,(char *)&l_null,          
																						FFO_EBA_MTCH_ACT_NO,(char*)&c_mtch_accnt_no, 
																						FFO_SUB_BUF_CNT,   (char *)&rec_cnt,
																						FFO_ACTN_ID,       (char *)&ret_val,
																						FFO_BASE_PRC,(char *)&l_null, 
																						FFO_XCHNG_CD, (char *)&c_xchng_cd,  
																						FFO_AVM_PRCNT,(char *)&d_tot_profit_loss,
																						FFO_BAL_AMT,(char *)&d_und_avail_mrgn,
																						FFO_QT_TRDNG_FLG,(char *)&c_rollovr_flg, 		/** Ver 1.4 **/
                                            FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flg,    /***  Ver 3.0 ***/
																						FFO_IBUY_ORD_RT,(char *)&l_null,						/*** Ver 1.8 ***/       
																						FFO_ISELL_ORD_RT,(char *)&l_null,  					/*** Ver 1.8 ***/ 
                                            FFO_CURR_RT, (char *)&l_null,               /*** ver 2.5 ***/
                                            FFO_RQST_TYP, (char *)&c_null,               /*** Ver 2.7 ***/
																						FFO_NKD_BLKD_FLG, (char *)&c_cancel_all_flag,       /*** Ver 2.8***/
                                            FFO_DR_CR_FLG, (char *)&c_sqr_off_all_at_mkt,   /****ver 2.9*****/
                                            FFO_BK_UBK_FLG, (char *)&c_null,  /** Ver 3.1  **/	
                                            FFO_SO_AMT_BLKD, (char *)&d_dlvry_mrgn_blk, /** Ver 3.3 **/
                                            FFO_OPNPSTN_VAL, (char *)&d_dlvry_mrgn_req, /** Ver 3.3 **/
                                            FFO_INTRST_RT, (char *)&d_trg_prc, /*** ver 3.6 ***/
																						FFO_INDX_INDCTR, (char *)&c_null,    /*** Ver 4.0 ***/	
																						FFO_STLMNT_TYP, (char *)&c_null,      /*** Ver 4.0 ***/
																			      FFO_BO_AMT_BLKD, (char *)&c_null,      /*** Ver 4.0 ***/	
																						FFO_EFF_EXCTD_RT, (char *)&d_null);               /*** Ver 4.2 ***/

     			if ( i_returncode == -1 )
     			{
         		 fn_errlog( c_ServiceName, "S31085", FMLMSG, c_errmsg  );
         		 EXEC SQL CLOSE :sys_cursor;
         		 EXEC SQL FREE :sys_cursor;
         		 tpfree ( ( char * ) ptr_fml_Obuf );
         		 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
         		 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     			}

					if( DEBUG_MSG_LVL_3 ) {          
						fn_userlog(c_ServiceName,"size of ptr_fml_Obuf:%ld:",Fsizeof32(ptr_fml_Obuf));
					} 
							
          /****** Commented in ver VQC ***									
					if (i_size_fus == 0 )
					{
						l_size_ocpd=Fsizeof32(ptr_fml_Obuf)-Funused32(ptr_fml_Obuf);
						if( DEBUG_MSG_LVL_3 ) {          
							fn_userlog(c_ServiceName,"Unused Size:%ld:",Funused32(ptr_fml_Obuf));
							fn_userlog(c_ServiceName,"Size Occpd:%ld:",l_size_ocpd);
						} 
						i_size_fus = 1 ;
					} ********/
					
					/* d_grnd_utrd_mrgn = d_grnd_utrd_mrgn + d_utrd_mrgn; *** Commented in VQC ***/
					/* d_grnd_umin_trd_mrgn = d_grnd_umin_trd_mrgn + d_umin_trd_mrgn; *** Commented in VQC ***/
					/* d_grnd_und_avail_mrgn = d_grnd_und_avail_mrgn + d_und_avail_mrgn; *** Commented in VQC ***/

					if( DEBUG_MSG_LVL_3 ) {  
						fn_userlog(c_ServiceName,"********* GRAND TOTAL *********");
						fn_userlog(c_ServiceName,"*******************************");
					}
          
          /**** Commented in Ver 2.3 ******************** 
					if( DEBUG_MSG_LVL_0 ) {    ** ver 2.2 **
						fn_userlog(c_ServiceName,"QTY:%ld:",l_grnd_opnpstn_qty);
						fn_userlog(c_ServiceName,"BUY ORDR QTY:%ld:",li_grnd_bo_qty);
						fn_userlog(c_ServiceName,"SELL ORDR QTY:%ld:",li_grnd_so_qty);
						fn_userlog(c_ServiceName,"PROFIT & LOSS:%lf:",d_grnd_profit_loss);
						fn_userlog(c_ServiceName,"MARGIN ON POS:%lf:",d_grnd_utrd_mrgn);
						fn_userlog(c_ServiceName,"MINIUM MARGIN:%lf:",d_grnd_umin_trd_mrgn);
						fn_userlog(c_ServiceName,"AVAILABLE MARGIN:%lf:",d_grnd_und_avail_mrgn);
					}
          ******************** Ver 2.3 Ends Here ************/
          /****** Ver 2.3 Starts here **********/
          if( DEBUG_MSG_LVL_1 )  /*** Ver 2.4, debug level changed form 0 to 1 **/ 
          {
            /* fn_userlog(c_ServiceName,"QTY:%ld:,BUY ORDR QTY:%ld:,SELL ORDR QTY:%ld:",l_grnd_opnpstn_qty,li_grnd_bo_qty,li_grnd_so_qty); *** Commented in VQC ***/
            /* fn_userlog(c_ServiceName,"PROFIT & LOSS:%lf:,MARGIN ON POS:%lf:,MINIUM MARGIN:%lf:,AVAILABLE MARGIN:%lf:",d_grnd_profit_loss,d_grnd_utrd_mrgn,d_grnd_umin_trd_mrgn,d_grnd_und_avail_mrgn); *** Commented in VQC ***/
          }
          /****** Ver 2.3 Ends Here ************/

          /**** Ver 3.3 Starts here *************/ 

          /**** Ver 3.3 Ends here ***************/
				}
			 
				if( DEBUG_MSG_LVL_3 ) {          
					fn_userlog(c_ServiceName,"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
				}
				break; 
			}
			
			else
			{
				fn_errlog( c_ServiceName, "S31090", SQLMSG, c_errmsg  );
      	EXEC SQL CLOSE :sys_cursor;
      	EXEC SQL FREE :sys_cursor;
      	tpfree ( ( char * ) ptr_fml_Obuf );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}
 
    rtrim(c_undrlyng);
   
    /*** Ver 3.0 Starts Here ****/
    EXEC SQL
    	SELECT b_qty,
           	 s_qty
    	INTO :l_buy_qty,
        	 :l_sell_qty
     	FROM
     	(SELECT nvl(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0) b_qty
       FROM FOD_FO_ORDR_DTLS
       WHERE FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
       AND FOD_PRDCT_TYP=:c_prd_typ
       AND FOD_UNDRLYNG=:c_undrlyng
       AND FOD_EXPRY_DT=:c_expry_dt
       AND FOD_SPL_FLAG='O'
       AND FOD_ORDR_FLW='B'
			 AND FOD_ORDR_STTS in ('P','O','R','Q')
    	) A,
    	(select nvl(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0) s_qty
     	 from fod_fo_ordr_dtls
     	 where FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
     	 and FOD_PRDCT_TYP=:c_prd_typ
     	 and FOD_UNDRLYNG=:c_undrlyng
     	 and FOD_EXPRY_DT=:c_expry_dt
     	 and FOD_SPL_FLAG='O'
     	 and FOD_ORDR_FLW='S'
			 and FOD_ORDR_STTS in ('P','O','R','Q')
    	) B;

  	if( SQLCODE != 0)
  	{
    	fn_errlog( c_ServiceName, "S31095", SQLMSG, c_errmsg  );
    	EXEC SQL CLOSE :sys_cursor;
    	EXEC SQL FREE :sys_cursor;
    	tpfree ( ( char * ) ptr_fml_Obuf );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

  	li_bo_qty = li_bo_qty + l_buy_qty;
  	li_so_qty = li_so_qty - l_sell_qty;

    if(c_opnpstn_flw == 'B')
    {
      l_cvr_qty = l_cvr_qty + l_sell_qty;
    }
    else if (c_opnpstn_flw == 'S')
    {
      l_cvr_qty = l_cvr_qty + l_buy_qty;
    }

		if( DEBUG_MSG_LVL_3 ) 
		{        
	  	fn_userlog(c_ServiceName,"RSPREAD l_buy_qty :%ld: l_sell_qty :%ld: Total li_bo_qty :%ld: li_so_qty :%ld: ",l_buy_qty,l_sell_qty,li_bo_qty,li_so_qty);
		}

  	/*** Ver 3.0 Ends here ******/  
    

		if ( i_cntr == 0 )
		{	
			if( DEBUG_MSG_LVL_3 ) {        
				fn_userlog(c_ServiceName,"Inside i_cntr is 0");
			}
			strcpy(c_prev_undrlyng,c_undrlyng);
			/* c_prev_ctgry_indstk=c_ctgry_indstk;     *** Commented in VQC ***/   
			/* c_prev_exrc_typ=c_exrc_typ;             *** Commented in VQC ***/
      /* c_prev_prdct_typ=c_uprdct_typ;          *** Commented in VQC ***/
			strcpy(c_prev_mt_acnt,c_mtch_accnt_no);	
			i_cntr++ ;
		}
				
    if (
         (( strcmp(c_prev_undrlyng,c_undrlyng) != 0) && ( i_counter != 1 )) || ((strcmp(c_prev_mt_acnt,c_mtch_accnt_no) !=0 ) && ( i_counter != 1 ))
       )					
    { 
			/******The group level data from fus of same mtch accnt is sent here ********/
			/*** Ver 3.0 Starts ***/
			if( c_prd_typ == 'F' &&  ((strcmp(c_prev_mt_acnt,c_mtch_accnt_no) ==0 ) && ( i_counter != 1 )))
			{
				if( DEBUG_MSG_LVL_3 ) 
				{        
					fn_userlog( c_ServiceName," Before going for und chng: checking RSPREAD_FOD_ONLY Rec" );
					fn_userlog(c_ServiceName,"c_prev_undrlyng :%s: c_undrlyng:%s:",c_prev_undrlyng,c_undrlyng);
				}
				c_rsprd_pos_flg = '\0';
				EXEC SQL
					select	TO_CHAR( FOD_EXPRY_DT, 'DD-MON-YYYY' ),
					FOD_ORDR_FLW,
					FTQ_LST_TRD_PRC
					/*INTO	:c_expry_dt,
						:c_uopnpstn_flw,	* Ver 3.5 */
					INTO	:c_r_exp_dt,		/* Ver 3.5 */
						:c_r_opnpstn_flw,		/* Ver 3.5 */
						:l_lst_trdd_prc
					FROM	FOD_FO_ORDR_DTLS, FTQ_FO_TRD_QT
					WHERE	FOD_EXPRY_DT NOT IN (SELECT DISTINCT(FCP_EXPRY_DT)
								FROM FCP_FO_SPN_CNTRCT_PSTN
								WHERE FCP_XCHNG_CD = :c_xchng_cd
								/* AND FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no	* Ver 3.5 */
								AND FCP_CLM_MTCH_ACCNT = :c_prev_mt_acnt			/* Ver 3.5 */
								AND FCP_UNDRLYNG = :c_prev_undrlyng
								AND FCP_PRDCT_TYP = :c_prd_typ
								AND (    FCP_OPNPSTN_QTY != 0
								OR FCP_IBUY_QTY    != 0
								OR FCP_ISELL_QTY   != 0 ))
					AND	FTQ_EXPRY_DT = FOD_EXPRY_DT
					AND	FOD_UNDRLYNG = FTQ_UNDRLYNG
					AND	FTQ_PRDCT_TYP = FOD_PRDCT_TYP
					AND	FOD_ORDR_STTS in ('P','O','R','Q')
					/* AND	FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no	* Ver 3.5 */
					AND	FOD_CLM_MTCH_ACCNT=:c_prev_mt_acnt      /* Ver 3.5 */
					AND	FOD_PRDCT_TYP= :c_prd_typ
					AND	FOD_UNDRLYNG= :c_prev_undrlyng
					AND	FOD_SPL_FLAG='O'
					AND	FOD_XCHNG_CD = :c_xchng_cd
					AND	rownum < 2;
				if( SQLCODE != 0 && ( SQLCODE != NO_DATA_FOUND ))
				{
					tpcommit(0);
					fn_errlog( c_ServiceName, "S31100", SQLMSG, c_errmsg  );
					EXEC SQL CLOSE :sys_cursor;
					EXEC SQL FREE :sys_cursor;
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				else if ( SQLCODE == NO_DATA_FOUND )
				{
        if( DEBUG_MSG_LVL_1 ) { /*** debug level added in ver 3.8 ***/
					fn_userlog(c_ServiceName,"No records of RSPREAD inside UND_CHNG can be shown from ORDER BOOKOnly");
         }
					c_rsprd_pos_flg = 'N';
				}
				else
				{
					if( DEBUG_MSG_LVL_3 ) 
					{        
						fn_userlog(c_ServiceName,"Records of RSPREAD inside UND_CHNG are available in ORDER BOOK Only");
					}
					EXEC SQL
						SELECT nvl(sum(FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY-FOD_EXPRD_QTY),0),
							FOD_CLM_MTCH_ACCNT,
							FOD_INDSTK,
							FOD_UNDRLYNG,
							FOD_EXER_TYP,
							NVL(sum(FOD_SROLL_DIFF_AMT),0) + NVL(sum(FOD_SROLL_LSS_AMT),0)
						INTO
							:l_fod_qty,
							:c_prev_mt_acnt,      /* Ver 3.5 */
							:c_uindstk,
							:c_prev_undrlyng,
							:c_exrc_typ,
							:d_rordr_mrgn
						FROM  FOD_FO_ORDR_DTLS
						WHERE FOD_ORDR_STTS in ('P','O','R','Q')
						AND FOD_CLM_MTCH_ACCNT=:c_prev_mt_acnt      /* Ver 3.5 */
						AND FOD_PRDCT_TYP= :c_prd_typ
						AND FOD_UNDRLYNG = :c_prev_undrlyng
						AND FOD_EXPRY_DT = :c_r_exp_dt							/* Ver 3.5 */
						AND FOD_XCHNG_CD = :c_xchng_cd
						AND FOD_ORDR_FLW = :c_r_opnpstn_flw					/* Ver 3.5 */
						AND FOD_SPL_FLAG = 'O'
						GROUP BY FOD_CLM_MTCH_ACCNT,FOD_INDSTK,FOD_UNDRLYNG,FOD_EXER_TYP;
					if ( SQLCODE != 0 )
					{
						tpcommit(0);
						fn_errlog( c_ServiceName, "S31105", SQLMSG, c_errmsg  );
						EXEC SQL CLOSE :sys_cursor;
						EXEC SQL FREE :sys_cursor;
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
					c_spl_flg = CONTRACT_IP;
					/*c_opnpstn_flw = '-';
					i_cntrct_cnt = 0;
					rec_cnt = 0;
					ret_val = 0;
					l_cvr_qty = 0;
					li_bo_qty = 0;
					li_so_qty = 0;
					l_cvr_qty = l_cvr_qty + l_fod_qty;
					if(c_uopnpstn_flw == 'B')
					{
						li_bo_qty = li_bo_qty + l_fod_qty;
					}
					else if (c_uopnpstn_flw == 'S')
					{
						li_so_qty = li_so_qty - l_fod_qty;
					}			*** Ver 3.5 ***/
          /*** Add starts in Ver 3.5 ***/
          if(c_r_opnpstn_flw == 'B')
          {
            li_r_bo_qty = li_r_bo_qty + l_fod_qty;
          }
          else if (c_r_opnpstn_flw == 'S')
          {
            li_r_so_qty = li_r_so_qty - l_fod_qty;
          }
          /*** Add Ends in Ver 3.5 ***/
					if(i_non_Obuy_count > 0 && i_pstn_count > 0 )
					{
						c_grp_flg = 'Y';
					}
					else
					{
						c_grp_flg = 'N';
					}
        if( DEBUG_MSG_LVL_1 ) { /*** debug level added in ver 3.8 ***/
					fn_userlog(c_ServiceName,"Spread inside UND_CHNG BUY :%ld: and COVER :%ld:",l_fod_qty,l_cvr_qty);
					fn_userlog(c_ServiceName,"Inside UND_CHNG Total BUY :%ld: and SELL :%ld:",li_bo_qty,li_so_qty);
					fn_userlog(c_ServiceName,"RSPREAD From FOD ONLY :inside UND_CHNG: c_uprdct_typ :%c: c_uindstk:%c: c_uopnpstn_flw :%c: d_rordr_mrgn :%lf:",c_uprdct_typ,c_uindstk,c_uopnpstn_flw,d_rordr_mrgn);
					fn_userlog(c_ServiceName,"inside UND_CHNG:c_uprdct_typ:%c: c_uindstk:%c: c_prev_undrlyng:%s: EXPRY_DT:%s: EXER_TYP:%c: c_uopnpstn_flw:%c: d_utrd_mrgn:%lf: c_spl_flg:%c: c_rollovr_flg:%c: c_sprd_roll_flg:%c: l_tot_buy_qty :%ld:",c_uprdct_typ,c_uindstk,c_prev_undrlyng,c_expry_dt.arr,c_exrc_typ,c_uopnpstn_flw,d_utrd_mrgn,c_spl_flg,c_rollovr_flg,c_sprd_roll_flg,l_tot_buy_qty);
					fn_userlog(c_ServiceName,"inside UND_CHNG:before packing from RSPREAD_FOD_ONLY");
          }
					for ( i=1 ; i<=i_cntrct_cnt+1 ; i++)
					{
						i_returncode = fn_pack_vartofml ( c_ServiceName,
						 c_errmsg,
						 &ptr_fml_Obuf,
						 41/** Ver 4.2 40 to 41 **//*** 37 to 40 in ver 4.0 ***/,
							FFO_PRDCT_TYP,(char *)&c_prd_typ,
							FFO_CTGRY_INDSTK,(char *)&c_uindstk,
							FFO_UNDRLYNG,(char *)c_prev_undrlyng,
							FFO_EXPRY_DT,(char *)c_r_exp_dt.arr,			/* Ver 3.5 */
							FFO_EXER_TYP,(char *)&c_exrc_typ,
							FFO_OPT_TYP, (char *)&c_r_opt_typ,				/* Ver 3.5 */
							FFO_STRK_PRC, (char *)&l_r_strike_prc,		/* Ver 3.5 */
							FFO_C_OPNPSTN_FLW,(char *)&c_null,				/* Ver 3.5 */
							FFO_C_OPNPSTN_QTY,(char *)&l_null,
							FFO_CVR_QTY,(char *)&l_fod_qty,						/* Ver 3.5 */
							FFO_C_MTM_OPN_VAL,(char *)&d_null,
							FFO_LST_TRD_PRC,(char *)&l_lst_trdd_prc,
							FFO_U_TRD_MRGN,(char *)&d_rutrd_mrgn,
							FFO_SPL_FLG,(char *)&c_spl_flg,
							FFO_MIN_LOT_QTY,(char *)&l_null,
							FFO_UI_BUY_QTY,(char *)&li_r_bo_qty,			/* Ver 3.5 */
							FFO_UI_SELL_QTY,(char *)&li_r_so_qty,			/* Ver 3.5 */
							FFO_U_MM_TRD_MRGN,(char *)&d_rumin_trd_mrgn,
							FFO_PRCNTG_CHNG,(char *)&l_null,
							FFO_EBA_MTCH_ACT_NO,(char*)&c_prev_mt_acnt,	/* Ver 3.5 */
							FFO_SUB_BUF_CNT,   (char *)&l_null,				/* Ver 3.5 */
							FFO_ACTN_ID,       (char *)&l_null,				/* Ver 3.5 */
							FFO_BASE_PRC,(char *)&l_null,
							FFO_XCHNG_CD, (char *)&c_xchng_cd,
							FFO_AVM_PRCNT, (char *)&d_null,
							FFO_BAL_AMT,(char *)&d_null,
							FFO_QT_TRDNG_FLG,(char *)&c_null,					/* Ver 3.5 */
							FFO_SETTLOR_STTS,(char *)&c_null,					/* Ver 3.5 */
							FFO_IBUY_ORD_RT,(char *)&l_null,
							FFO_ISELL_ORD_RT,(char *)&l_null,
							FFO_CURR_RT, (char *)&l_null,							/* Ver 3.5 */
							FFO_RQST_TYP, (char *)&c_null,
							FFO_NKD_BLKD_FLG, (char *)&c_null,
							FFO_DR_CR_FLG, (char *)&c_null,
							FFO_BK_UBK_FLG,( char * )&c_null,
							FFO_SO_AMT_BLKD, (char *)&d_null,
							FFO_OPNPSTN_VAL, (char *)&d_null,
							FFO_INDX_INDCTR, (char *)&c_null,           /*** Ver 4.0 ***/	
							FFO_STLMNT_TYP, (char *)&c_null,      /*** Ver 4.0 ***/
							FFO_BO_AMT_BLKD, (char *)&c_null,      /*** Ver 4.0 ***/
              FFO_EFF_EXCTD_RT, (char *)&d_null);               /*** Ver 4.2 ***/
							

						if ( i_returncode == -1 )
						{
							tpcommit(0);
							fn_errlog( c_ServiceName, "S31110", FMLMSG, c_errmsg  );
							EXEC SQL CLOSE :sys_cursor;
							EXEC SQL FREE :sys_cursor;
							tpfree ( ( char * ) ptr_fml_Obuf );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
					}
				}			
			}
			
			/*** Ver 3.0 Ends ***/
			if( DEBUG_MSG_LVL_3 ) {          
				fn_userlog(c_ServiceName,"Inside same underlyng but diff match acc OR diff undrlyng of same mtch accnt	OR Diff match accnt and diff undrlyng");
			}
      EXEC SQL
				SELECT   FUS_INDSTK,
								 FUS_UOPNPSTN_FLW,
								 abs(FUS_UOPNPSTN_QTY),
								 /**FUS_INITIAL_MRGN + FUS_BLCKD_PL + :d_total_prmum,**/   /*Commented by Shailesh on 10-Dec-2011*/
								 FUS_INITIAL_MRGN + FUS_BLCKD_PL ,
								 NVL(FUS_MIN_MRGN,0),
								 FUS_MTM_FLG,
                 NVL(sum(FOD_SROLL_DIFF_AMT),0) + NVL(sum(FOD_SROLL_LSS_AMT),0)    /*** Ver 3.0 ***/
				INTO     :c_uindstk,
								 :c_uopnpstn_flw,
								 :l_uopnpstn_qty,
								 :d_utrd_mrgn,
								 :d_umin_trd_mrgn,
								 :c_mtm_flag,
                 :d_sroll_diff_amt     /*** Ver 3.0 ***/
				FROM     FUS_FO_UNDRLYNG_SPN_PSTN, FOD_FO_ORDR_DTLS    /*** FOD_FO_ORDR_DTLS added in Ver 3.0 ***/
				WHERE		 FUS_CLM_MTCH_ACCNT = :c_prev_mt_acnt												
				AND      FUS_XCHNG_CD = :c_xchng_cd
				AND      FUS_UNDRLYNG = :c_prev_undrlyng
        AND      FOD_SPL_FLAG(+) = 'O'                         /*** Ver 3.0 ***/
        AND      FUS_CLM_MTCH_ACCNT  = FOD_CLM_MTCH_ACCNT(+)   /*** Ver 3.0 ***/
        AND      FUS_XCHNG_CD  = FOD_XCHNG_CD(+)               /*** Ver 3.0 ***/
        AND      FUS_UNDRLYNG  = FOD_UNDRLYNG(+)               /*** Ver 3.0 ***/
        GROUP By FUS_INDSTK,FUS_UOPNPSTN_FLW,
                 abs(FUS_UOPNPSTN_QTY),
                 FUS_INITIAL_MRGN + FUS_BLCKD_PL ,
                 NVL(FUS_MIN_MRGN,0),FUS_MTM_FLG;               /*** Ver 3.0 ***/
												
       if( SQLCODE != 0)
       { 
					fn_errlog( c_ServiceName, "S31115", SQLMSG, c_errmsg  );
      		EXEC SQL CLOSE :sys_cursor;
      		EXEC SQL FREE :sys_cursor;
      		tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }
       d_utrd_mrgn = d_utrd_mrgn + d_sroll_diff_amt;   /*** Ver 3.0 ***/

				/*** Calculate Available margin = Blocked initial margin - Notional Profit Loss ***/

				if ( d_tot_profit_loss > 0 )
        {
           d_und_avail_mrgn = d_utrd_mrgn;
        }
        else
        {
					d_und_avail_mrgn = d_utrd_mrgn + d_tot_profit_loss;
				}

        /**** Ver 1.5 -- Starts ***/
        if(i_non_Obuy_count > 0 && i_pstn_count > 0 )
        {
          c_grp_flg = 'Y';
        }
        else
        {
          c_grp_flg = 'N';
        }
			
				if( DEBUG_MSG_LVL_3 )
				{
        	fn_userlog(c_ServiceName,":Inside Underlying change :");
        	fn_userlog(c_ServiceName,":c_grp_flg:  :%c:",c_grp_flg);
        	fn_userlog(c_ServiceName,":i_non_Obuy_count:  :%d:",i_non_Obuy_count);
        	fn_userlog(c_ServiceName,":i_pstn_count:  :%d:",i_pstn_count);
        }
				/**** Ver 1.5 -- Ends ***/

				c_spl_flg = UNDERLYING_IP;
				li_temp = 0;
				rec_cnt=1;           
				ret_val=0;		
				c_rollovr_flg  = '-';  /***  Ver 1.4 ***/			  
        c_sprd_roll_flg = '-'; /*** Ver 3.0 ***/

				if( DEBUG_MSG_LVL_3 ) {          
					fn_userlog(c_ServiceName,"***Packing group level data for :%s:%s:***",c_prev_mt_acnt,c_prev_undrlyng);
					fn_userlog( c_ServiceName,"Special Flag |%c|",c_spl_flg);
					fn_userlog( c_ServiceName,"c_mtm_flag Flag |%s|",c_mtm_flag);
					/** fn_userlog( c_ServiceName,"c_prev_ctgry_indstk is |%c|",c_prev_ctgry_indstk); ** Commented in VQC **/
					fn_userlog( c_ServiceName,"l_uopnpstn_qty is |%ld|",l_uopnpstn_qty);
					fn_userlog( c_ServiceName,"l_uopnpstn_qty is |%ld|",l_uopnpstn_qty);
					fn_userlog( c_ServiceName,"Margin on position is |%lf|",d_utrd_mrgn);
					fn_userlog( c_ServiceName,"Total Buy Order Qty is |%ld|",l_tot_buy_qty);
					fn_userlog( c_ServiceName,"Total Sell Ordr Qty is |%ld|",l_tot_sell_qty);
					fn_userlog( c_ServiceName,"Min Margin amount is |%lf|",d_umin_trd_mrgn);
					fn_userlog( c_ServiceName,"Total profit Loss is |%lf|",d_tot_profit_loss);
					fn_userlog( c_ServiceName,"Available Margin is |%lf|",d_und_avail_mrgn);
					fn_userlog(c_ServiceName,"*******************************************************");
				}

				if (l_qty == 0)
				{
					d_und_avail_mrgn = 0.0;
					d_umin_trd_mrgn  = 0.0;
				}
				
				if(DEBUG_MSG_LVL_3)
				{	
					fn_userlog( c_ServiceName,"l_qty is |%ld|",l_qty);
				}
				d_utrd_mrgn = trunc(d_utrd_mrgn);
				d_umin_trd_mrgn = trunc(d_umin_trd_mrgn);
				d_und_avail_mrgn = trunc(d_und_avail_mrgn);
				d_tot_profit_loss = trunc(d_tot_profit_loss);

 				i_returncode = fn_pack_vartofml ( c_ServiceName,
				  															  c_errmsg,
																			    &ptr_fml_Obuf,
                                          42,/** Ver 4.2 41 to 42 **//* Ver 1.4 Changed from 26 to 27 */ /***  Ver 1.8 Changed from 27 to 29 ***/ /**
 Ver 2.5 changed from 29 to 30 **/ /** changed to 31 in Ver 2.7 **/
																				  /*** Ver 2.8 Changed from 31 to 32 ***//*** ver 3.1 Changed from 32 to 33 ***/ /*** Ver 2.9 Changed from 33 to 34 ***/ /*** Ver 3.0 Changed from 34 to 35 ***/ /** Ver 3.3 Chnged frm 35 to 27 **/ /*** in ver 3.6 37 changed to 38 ***//*** in ver 4.0 38 changed to 41***/
                                          /*** FFO_PRDCT_TYP,(char *)&c_null, Commented in Ver 1.5 ***/
                                          FFO_PRDCT_TYP,(char *)&c_grp_flg,   /*** Ver 1.5 ***/ 
																					FFO_CTGRY_INDSTK,(char *)&c_uindstk,
																					FFO_UNDRLYNG,(char *)c_prev_undrlyng,
																					FFO_EXPRY_DT,(char *)c_mtm_flag,
																					FFO_EXER_TYP,(char *)&c_null, 
																					FFO_OPT_TYP, (char *)&c_null,
																					FFO_STRK_PRC, (char *)&l_null,
																					FFO_C_OPNPSTN_FLW,(char *)"N",
																					FFO_C_OPNPSTN_QTY,(char *)&l_uopnpstn_qty,
																					FFO_CVR_QTY,(char *)&l_null,	
																					FFO_C_MTM_OPN_VAL,(char *)&d_null,
																					FFO_LST_TRD_PRC,(char *)&l_null, 
																					FFO_U_TRD_MRGN,(char *)&d_utrd_mrgn,
																					FFO_SPL_FLG,(char *)&c_spl_flg,
																					FFO_MIN_LOT_QTY,(char *)&li_temp,
																					FFO_UI_BUY_QTY,(char *)&l_tot_buy_qty,  
																					FFO_UI_SELL_QTY,(char *)&l_tot_sell_qty,
																					FFO_U_MM_TRD_MRGN,(char *)&d_umin_trd_mrgn,
																					FFO_PRCNTG_CHNG,(char *)&l_null,          
																					FFO_EBA_MTCH_ACT_NO,(char*)&c_prev_mt_acnt, 
																					FFO_SUB_BUF_CNT,   (char *)&rec_cnt,
																					FFO_ACTN_ID,       (char *)&ret_val,
																					FFO_BASE_PRC,(char *)&l_null,
																					FFO_XCHNG_CD, (char *)&c_xchng_cd, 
																					FFO_AVM_PRCNT,(char *)&d_tot_profit_loss,
																					FFO_BAL_AMT,(char *)&d_und_avail_mrgn,
																					FFO_QT_TRDNG_FLG,(char *)&c_rollovr_flg, 	/* Ver 2.4 */	
                                          FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flg,    /***  Ver 3.0 ***/
																					FFO_IBUY_ORD_RT,(char *)&l_null,					/*** Ver 1.8 ***/       
																					FFO_ISELL_ORD_RT,(char *)&l_null,  				/*** Ver 1.8 ***/
                                          FFO_CURR_RT, (char *)&l_null,             /*** ver 2.5 ***/
                                          FFO_RQST_TYP, (char *)&c_null,             /*** Ver 2.7 ***/
																					FFO_NKD_BLKD_FLG, (char *)&c_cancel_all_flag,       /*** Ver 2.8***/
                                          FFO_DR_CR_FLG, (char *)&c_sqr_off_all_at_mkt,     /***Ver 2.9****/
                                          FFO_BK_UBK_FLG, (char *)&c_null,  /*** Ver 3.1 ***/
                                          FFO_SO_AMT_BLKD, (char *)&d_dlvry_mrgn_blk, /** Ver 3.3 **/ 
                                          FFO_OPNPSTN_VAL, (char *)&d_dlvry_mrgn_req, /** Ver 3.3 **/
                                          FFO_INTRST_RT, (char *)&d_trg_prc, /*** ver 3.6 ***/
																					FFO_INDX_INDCTR, (char *)&c_null,     /*** Ver 4.0 ***/
																					FFO_STLMNT_TYP, (char *)&c_null,      /*** Ver 4.0 ***/
																					FFO_BO_AMT_BLKD, (char *)&c_null,      /*** Ver 4.0 ***/
                                          FFO_EFF_EXCTD_RT, (char *)&d_null);               /*** Ver 4.2 ***/
																					 	
				
     		if ( i_returncode == -1 )
     		{
          fn_errlog( c_ServiceName, "S31120", FMLMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     		}
				
				if( DEBUG_MSG_LVL_3 ) {          
					fn_userlog(c_ServiceName,"size of ptr_fml_Obuf:%ld:",Fsizeof32(ptr_fml_Obuf));
				}
						
        /******** Commented in ver VQC										
				if (i_size_fus == 0 )
				{
						l_size_ocpd=Fsizeof32(ptr_fml_Obuf)-Funused32(ptr_fml_Obuf);
						if(DEBUG_MSG_LVL_3)
						{
							fn_userlog(c_ServiceName,"Unused Size:%ld:",Funused32(ptr_fml_Obuf));
							fn_userlog(c_ServiceName,"Size Occpd:%ld:",l_size_ocpd);
						}
						i_size_fus = 1 ;
				} ******/
			
				/** d_grnd_utrd_mrgn = d_grnd_utrd_mrgn + d_utrd_mrgn; *** Commented in VQC ***/
				/** d_grnd_umin_trd_mrgn = d_grnd_umin_trd_mrgn + d_umin_trd_mrgn; *** Commented in VQC ***/
				/** d_grnd_und_avail_mrgn = d_grnd_und_avail_mrgn + d_und_avail_mrgn; *** Commented in VQC ***/

				l_tot_buy_qty = l_tot_sell_qty = 0;   
				d_tot_profit_loss = 0;
    
				/* d_curr_cnt_opn_val=0; *** Commented in VQC ***/
				/* d_curr_uopn_val=0; *** Commented in VQC ***/
				/* l_und_buy_opn_qty=0; *** Commented in VQC ***/
				/* l_und_sell_opn_qty=0; *** Commented in VQC ***/
				/* d_total_prmum = 0; *** Commented in VQC ***/
				l_qty = 0;

        i_non_Obuy_count = 0;     /*** Ver 1.5 ***/
        i_pstn_count = 0;     /*** Ver 1.5 ***/
    }

    i_counter++;
    strcpy(c_prev_undrlyng,c_undrlyng);
    d_utrd_mrgn = 0;
		strcpy(c_prev_mt_acnt,c_mtch_accnt_no);	
    /* c_prev_ctgry_indstk=c_ctgry_indstk;  *** Commented in VQC ***/    
    /* c_prev_exrc_typ=c_exrc_typ;  *** Commented in VQC ***/ 
    /* c_prev_prdct_typ=c_uprdct_typ; *** Commented in VQC ***/          

    EXEC SQL
			 SELECT nvl(FTQ_LST_TRD_PRC,0),
							nvl(FTQ_CLS_PRC,0),			/*** NVL added in Ver 1.2 ***/
							FTQ_MIN_LOT_QTY,																						/*** Added In Ver 2.0 ***/				
							DECODE(:c_prd_typ,'P','Q',NVL(FTQ_ROLLOVER_FLAG,'Q')), 			/*** Added In Ver 2.0 ***/
              NVL(FTQ_SETLMNT_FLG,'C')        /*** Addede in Ver 3.1 ***/
			 INTO		:l_lst_trdd_prc,
							:d_clsng_prc,
							:l_lot_size,
							:c_rollover_flag,
              :c_setlmnt_flg                  /*** Added in  Ver 3.1 ***/
			 FROM		FTQ_FO_TRD_QT
			 WHERE	FTQ_XCHNG_CD = :c_xchng_cd
			 AND		FTQ_PRDCT_TYP = decode(:c_prd_typ, 'P', 'F', :c_prd_typ)
			 AND		FTQ_INDSTK = :c_ctgry_indstk
			 AND		FTQ_UNDRLYNG = :c_undrlyng
			 AND		FTQ_EXER_TYP = :c_exrc_typ
			 AND		FTQ_OPT_TYP = :c_opt_typ
			 AND		FTQ_STRK_PRC = :l_strike_prc
			 AND		FTQ_EXPRY_DT = :c_expry_dt;
    
		if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ))
		{ 
			fn_errlog( c_ServiceName, "S31125", SQLMSG, c_errmsg  );
			EXEC SQL CLOSE :sys_cursor;
			EXEC SQL FREE :sys_cursor;
			tpfree ( ( char * ) ptr_fml_Obuf );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
    else if ( SQLCODE == NO_DATA_FOUND )
    {
     l_lst_trdd_prc = 0;
    }

	/*** Commented In Ver 2.0 *** 

    EXEC SQL
			SELECT	FCM_LOT_SZ,
							DECODE(:c_prd_typ,'P','Q',NVL(FCM_ROLLOVER_FLAG,'Q')) ***  Ver 1.4 ***
			INTO		:l_lot_size,
							:c_rollover_flag   			   ***  Ver 1.4 ***
			FROM		FCM_FO_CNTRCT_MSTR
			WHERE		FCM_XCHNG_CD	= :c_xchng_cd
			AND			FCM_PRDCT_TYP	= decode(:c_prd_typ, 'P', 'F', :c_prd_typ)	
			AND			FCM_UNDRLYNG	= :c_undrlyng
			AND			FCM_EXER_TYP	= :c_exrc_typ
			AND			FCM_OPT_TYP 	= :c_opt_typ
			AND			FCM_STRK_PRC = :l_strike_prc
			AND			FCM_EXPRY_DT	= :c_expry_dt;

		if( SQLCODE != 0)
    { 
			fn_errlog( c_ServiceName, "S31130", SQLMSG, c_errmsg  );
     	EXEC SQL CLOSE :sys_cursor;
     	EXEC SQL FREE :sys_cursor;
     	tpfree ( ( char * ) ptr_fml_Obuf );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

  *** Ver 2.0 Comment Ends ***/

		/*** Ver 1.6 ** Starts ***/

    if ( (l_opnpstn_qty - l_cvr_qty) <= 0 )
    {
      c_rollover_flag = 'Q';
    }

		if(DEBUG_MSG_LVL_3)   /** ver 2.2 **/
		{
			fn_userlog(c_ServiceName,"Lot Size :%ld:",l_lot_size);
    	fn_userlog(c_ServiceName,"Rollover Flag :%c:",c_rollover_flag);
		}
    /*** Ver 1.6 ** Ends ***/

		/*Starts for calculating current open position value at underlying level*/
 
    /*** Commented in VQC ***
 
    if ( c_opnpstn_flw == BUY )
    { 
    d_curr_cnt_opn_val = ((double)l_lst_trdd_prc * (double)l_opnpstn_qty); 
    l_und_buy_opn_qty  = l_und_buy_opn_qty + l_opnpstn_qty; 
    }
    else 
    {
    d_curr_cnt_opn_val = ((double)l_lst_trdd_prc * (double)l_opnpstn_qty * (-1)); 
    l_und_sell_opn_qty = l_und_sell_opn_qty + l_opnpstn_qty;  
    }
    
    d_curr_uopn_val = d_curr_uopn_val + d_curr_cnt_opn_val;

    *** VQC Comment Ends ***/

		/*** comment starts in Ver 3.0
		EXEC SQL
    	SELECT	nvl(round((((MSTR.FUM_OI * 100) / MWP.FUM_MWP) * 100)),0)	*** fum_oi is multiplied by 100 because it was stored in database after dividing by 100 ***
			INTO		:l_prcnt
    	FROM		FUM_FO_UNDRLYNG_MWP MWP,
							FUM_FO_UNDRLYNG_MSTR MSTR
    	WHERE		MWP.FUM_XCHNG_CD                     = :c_xchng_cd
			AND			MWP.FUM_UNDRLYNG                     = :c_undrlyng
    	AND			MSTR.FUM_PRDCT_TYP                   = decode(:c_prd_typ, 'P', 'F', :c_prd_typ)
    	AND			MWP.FUM_UNDRLYNG                     = MSTR.FUM_UNDRLYNG
    	AND			MWP.FUM_XCHNG_CD                     = MSTR.FUM_XCHNG_CD
    	AND			to_char(MWP.FUM_MONTH_YEAR,'YYYYMM') = to_char(sysdate,'YYYYMM');

    if( SQLCODE != 0 )
    {
			if (SQLCODE == NO_DATA_FOUND)
			{
				l_prcnt = 0;
			}
			else
			{
      	fn_errlog( c_ServiceName, "S31135", SQLMSG, c_errmsg  );
      	EXEC SQL CLOSE :sys_cursor;
      	EXEC SQL FREE :sys_cursor;
      	tpfree ( ( char * ) ptr_fml_Obuf );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
    }

		ret_val=0;					 

		*** Ver 3.0 Comment Ends ***/
		/*** Ver 3.0 Starts ***/
		if (c_prd_typ == 'F')
  	{
    	if( DEBUG_MSG_LVL_5 )
    	{
      	fn_userlog(c_ServiceName,"Finding Rollover Spread Flag for Future Product only");
    	}
    	EXEC SQL
      	SELECT NVL(FUM_ROLLOVER_SPRD_ALLWD_FLG,'N')
      	INTO   :c_sprd_roll_flag
      	FROM   FUM_FO_UNDRLYNG_MSTR
      	WHERE  FUM_XCHNG_CD   = :c_xchng_cd
      	AND    FUM_UNDRLYNG   = :c_undrlyng
      	AND    FUM_PRDCT_TYP  = :c_prd_typ;
    	if( SQLCODE != 0 )
    	{
      	tpcommit(0);
      	fn_errlog( c_ServiceName, "S31140", SQLMSG, c_errmsg  );
      	EXEC SQL CLOSE :sys_cursor;
      	EXEC SQL FREE :sys_cursor;
      	tpfree ( ( char * ) ptr_fml_Obuf );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
    	if( DEBUG_MSG_LVL_5 )
    	{
      	fn_userlog(c_ServiceName,"FUM_ROLLOVER_SPRD_ALLWD_FLG :%c:",c_sprd_roll_flag);
    	}
    	if( (l_opnpstn_qty - l_cvr_qty) <= 0 )
    	{
      	c_sprd_roll_flag = 'N';
    	}
  	}
		/*** Ver 3.0 Ends ***/
		
		/*EXEC SQL 												
			SELECT decode(:l_opnpstn_qty, 0, 0, round(((:d_mtm_opn_val/:l_opnpstn_qty)/100),2) )
			INTO :d_base_prc
			FROM	dual;*/
	
		/*** Ver 4.2 starts ***/
		if (c_prd_typ == 'O')
		{
			EXEC SQL
      	SELECT decode(:l_opnpstn_qty, 0, 0, ( abs(:d_opnpstn_val)/ :l_opnpstn_qty) )
      	INTO :d_avg_prcs
      	FROM  dual;
		}
		/*** Ver 4.2 ends ***/
	
		EXEC SQL 												
			SELECT decode(:l_opnpstn_qty, 0, 0, ( abs(:d_mtm_opn_val)/ :l_opnpstn_qty) )
			INTO :l_base_prc
			FROM	dual;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"d_clsng_prc  Is :%lf:",d_clsng_prc);
			fn_userlog(c_ServiceName,"l_lst_trdd_prc  Is :%ld:",l_lst_trdd_prc);
		}
		if ( l_opnpstn_qty != 0 )     /***  Notional Profit / Loss Calculation Contractwise  ***/
		{
			if (c_prd_typ == 'O' && c_opnpstn_flw == BUY ) /*** For option Buy position Notional profit loss is Zero ***/
			{
				d_profit_loss = 0;
			}
			else if (c_prd_typ == 'O' && c_opnpstn_flw == SELL )
			{
					d_profit_loss	=	(double) l_opnpstn_qty	*	(	d_clsng_prc	-	(double) l_lst_trdd_prc	);
					/** l_base_prc		=	(long )d_clsng_prc	;		Commented on 08-Feb-2012***/
			}
			else if (c_prd_typ == 'F')
			{
				if(c_opnpstn_flw == BUY) 
				{
					d_profit_loss = ( (double) l_lst_trdd_prc - (double) l_base_prc ) * (double) l_opnpstn_qty ;
				}
				else if (c_opnpstn_flw == SELL)
				{
					d_profit_loss = ( (double) l_base_prc - (double) l_lst_trdd_prc ) * (double) l_opnpstn_qty ;
				}
			}
    i_pstn_count++;       /*** Ver 1.5 ***/
		}

    /**** Ver 1.5 -- Starts ***/
    if( (c_prd_typ == 'O' && c_opnpstn_flw == 'S') || c_prd_typ == 'F' )
    {
    	if( DEBUG_MSG_LVL_3 )    /**  Ver 2.2 ***/
			{     
      	fn_userlog(c_ServiceName,"----Inside Option Buy COndition----");
			}
      i_non_Obuy_count++;
    }

    /** if( DEBUG_MSG_LVL_0 ) {     ** Commented in Ver 2.2 ***/
    if( DEBUG_MSG_LVL_3 ) {     /**  Ver 2.2 ***/
    fn_userlog(c_ServiceName,"------Printing while each contract fetch----");
    fn_userlog(c_ServiceName,":i_non_Obuy_count:  :%d:",i_non_Obuy_count);
    fn_userlog(c_ServiceName,":i_pstn_count:  :%d:",i_pstn_count);
    fn_userlog(c_ServiceName,"c_undrlyng:%s:",c_undrlyng);

    }
    /**** Ver 1.5 -- Ends ***/

    /*** Ver 2.5 Strats ***/

    l_spot_prc = 0;

    if ( c_prd_typ == 'O')
    {
      d_var_mrgn = 0.0;                 /*** Ver 3.3 ***/
      d_elm_mrgn = 0.0;                 /*** Ver 3.3 ***/
      d_dlvry_min_mrgn_prcnt = 0.0;     /*** Ver 3.3 ***/
      d_ISec_buff_mrgn_prcnt = 0.0;     /*** Ver 3.3 ***/
      d_current_dlvry_mrgn_prcnt = 0.0; /*** Ver 3.3 ***/
      d_cntrct_val = 0.0;               /*** Ver 3.3 ***/
      d_new_dlvry_mrgn = 0.0;           /*** Ver 3.3 ***/
      d_dlvry_mrgn_req =0.0;            /*** Ver 3.3 ***/
      d_mrggn_value    = 0.0;           /*** Ver 3.3 ***/ 
      i_crnt_mnth_flg =0;               /*** Ver 3.3 ***/
      c_tmp_prdct_typ = '\0';           /*** Ver 3.3 ***/
      i_crnt_mnth_flg = 0;              /*** Ver 3.3 ***/ 
      MEMSET(c_ltq_dt);                 /*** Ver 3.3 ***/ 
      l_spot_prc_tmp = 0;               /*** Ver 3.3 ***/
      l_cls_prc = 0;                    /*** Ver 3.3 ***/

    	EXEC SQL
      	SELECT LTQ_RT * 100,
              NVL(LTQ_CLS_PRC,0) * 100,
              NVL(to_char(LTQ_DT,'DD-Mon-YYYY'),'NA')  
        INTO :l_spot_prc,
             :l_cls_prc, /** Ver 3.3 **/
             :c_ltq_dt  /** Ver 3.3 **/
        FROM LTQ_TRD_QT
        WHERE LTQ_STCK_CD = :c_undrlyng
        AND LTQ_XCHNG_CD = DECODE(:c_xchng_cd,'NFO','NSE','BFO','BSE');

      if(SQLCODE !=0)
      {
        fn_errlog( c_ServiceName, "S31145", SQLMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if( DEBUG_MSG_LVL_3)
      {
          fn_userlog(c_ServiceName,"Underlying:%s:    Spot Price:%ld:", c_undrlyng, l_spot_prc);
          fn_userlog(c_ServiceName,"Underlying:%s:    Closing Price:%ld:", c_undrlyng, l_cls_prc); /*** Ver 3.3 ***/
          fn_userlog(c_ServiceName, "LTQ Trade Date :%s:", c_ltq_dt); /***  Ver 3.3 ***/
      }
      
      /** Ver 3.3  Started **/
     if((c_setlmnt_flg == 'P') && (c_opnpstn_flw == BUY))
      {
        if( DEBUG_MSG_LVL_3)
        {
         fn_userlog(c_ServiceName,"Inside Delivery Margin Computation");
        }

        c_tmp_prdct_typ = 'F';
        MEMSET(c_tmp_undlyn);
        strcpy(c_tmp_undlyn ,"NIFTY"); 
 
        EXEC SQL
        SELECT 1
        INTO :i_crnt_mnth_flg
        FROM DUAL
        WHERE to_date(:c_expry_dt,'DD-Mon-YYYY') =(
        SELECT MIN(FTQ_EXPRY_DT)
        FROM  FTQ_FO_TRD_QT where FTQ_XCHNG_CD=:c_xchng_cd
        and FTQ_PRDCT_TYP=:c_tmp_prdct_typ
        /****   and FTQ_UNDRLYNG=:c_tmp_undlyn and FTQ_EXPRY_DT >=trunc(sysdate)); **** commented in ver 3.4 ***/
        and FTQ_UNDRLYNG=:c_tmp_undlyn ); /** ver 3.4 **/

        if( SQLCODE != 0 && (SQLCODE != NO_DATA_FOUND))
          {
            fn_errlog( c_ServiceName, "S31150", SQLMSG, c_errmsg  );
            EXEC SQL CLOSE :sys_cursor;
            EXEC SQL FREE :sys_cursor;
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
          }
 
       /* if( c_opnpstn_flw == BUY && ( c_opt_typ=='C' || c_opt_typ=='P' ) &&  i_crnt_mnth_flg == 1 )		* Ver 3.7 */
       if( c_opnpstn_flw == BUY && ( c_opt_typ=='C' || c_opt_typ=='P' )) /*** ver 3.7 ***/
       {
        /** Block Added for selecting spot price STARTS **/
        MEMSET(c_update_dt);

        EXEC SQL
         SELECT NVL(VEM_VAR_MARGIN/100,0),
                NVL(VEM_EXTRM_LOSS_RT/100,0)
                /* NVL(FSP_DLVRY_MRGPRCNT/100,0),
                NVL(to_char(FSP_DLVRY_MRGPRCNT_UPDDT,'DD-Mon-YYYY'),'NA')		* Ver 3.7 */
         into   :d_var_mrgn,
                :d_elm_mrgn
                /* :d_current_dlvry_mrgn_prcnt,
                :c_update_dt
         FROM VEM_VAR_ELM_MSTR,FSP_FO_SYSTM_PRMTR		* Ver 3.7 */
         FROM VEM_VAR_ELM_MSTR
         WHERE VEM_STCK_CD = ( SELECT SEM_MAP_VL
                              FROM SEM_STCK_MAP
                              WHERE sem_stck_cd = :c_undrlyng
                              AND SEM_ENTTY = 3);

          if( SQLCODE != 0 && (SQLCODE != NO_DATA_FOUND))
          {
           fn_errlog( c_ServiceName, "S31155", SQLMSG, c_errmsg  );
           EXEC SQL CLOSE :sys_cursor;
           EXEC SQL FREE :sys_cursor;
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

        /*** Ver 3.7 Starts ***/
          EXEC SQL
           SELECT  LODM_PRC,
                   MRGPRCNT_UPDDT
           INTO   :d_current_dlvry_mrgn_prcnt,
                  :c_update_dt
           FROM  (SELECT NVL(FLM_TODAYS_LODM_PERCNT/100,0.0) LODM_PRC,
                       NVL(to_char(FLM_DLVRY_MRGPRCNT_UPDDT,'DD-Mon-YYYY'),'NA') MRGPRCNT_UPDDT
                  FROM  FLM_FO_LODM_MSTR
                  WHERE FLM_UNDRLYNG = :c_undrlyng
                  AND FLM_PRDCT_TYP = :c_prd_typ
                  AND NVL(FLM_TODAYS_LODM_PERCNT/100,0.0) != 0
                  AND FLM_EOS_DT >= TRUNC(SYSDATE));
          if((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
          {
           fn_errlog( c_ServiceName, "S31160", SQLMSG, c_errmsg  );
           EXEC SQL CLOSE :sys_cursor;
           EXEC SQL FREE :sys_cursor;
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
          else if ((SQLCODE == NO_DATA_FOUND || d_current_dlvry_mrgn_prcnt == 0) && i_crnt_mnth_flg == 1)
          {
            fn_userlog(c_ServiceName,"Inside Delivery Margin Zero Case");
            EXEC SQL
              SELECT NVL(FLM_TODAYS_LODM_PERCNT/100,0.0) LODM_PRC,
                     NVL(to_char(FLM_DLVRY_MRGPRCNT_UPDDT,'DD-Mon-YYYY'),'NA') MRGPRCNT_UPDDT
              INTO  :d_current_dlvry_mrgn_prcnt,
                    :c_update_dt
              FROM  FLM_FO_LODM_MSTR
              WHERE FLM_UNDRLYNG = 'ALL'
              AND   FLM_PRDCT_TYP = :c_prd_typ
              AND   NVL(FLM_TODAYS_LODM_PERCNT/100,0.0) != 0
              AND   FLM_EXP_DT = :c_expry_dt;
            if((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
            {
              fn_errlog( c_ServiceName, "S31165", SQLMSG, c_errmsg  );
              EXEC SQL CLOSE :sys_cursor;
              EXEC SQL FREE :sys_cursor;
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }
          }
         /*** Ver 3.7 Ends ***/

         if( strcmp(c_update_dt, c_ltq_dt) == 0 )
         {
          l_spot_prc_tmp = l_cls_prc;   
          if( DEBUG_MSG_LVL_3)
          {
           fn_userlog(c_ServiceName,"Consedering Closing Price for ITM check :%ld:",l_spot_prc_tmp);
          }
         }
         else
         {
          l_spot_prc_tmp = l_spot_prc;
          if( DEBUG_MSG_LVL_3)
          {
           fn_userlog(c_ServiceName,"Consedering Spot Price for ITM check :%ld:",l_spot_prc_tmp);
          }
         }
        /** Block Added for selecting spot price ENDS  **/        

         if(( c_opt_typ=='C' && l_spot_prc_tmp >= l_strike_prc ) || ( c_opt_typ=='P' && l_spot_prc_tmp <= l_strike_prc))
         {  
           
           EXEC SQL
           SELECT NVL( FMM_ISEC_DLVRY_MRGN_BFFR_PRCNT/100, 0.0 ),
           NVL( FMM_DLVRY_MIN_MRGN_PRCNT/100 , 0.0 )
           INTO :d_ISec_buff_mrgn_prcnt,
                :d_dlvry_min_mrgn_prcnt /*** Minimum margin percentage ***/
           FROM FMM_FO_MRGN_MSTR
           WHERE  FMM_PRDCT_TYP= :c_prd_typ
           AND    FMM_UNDRLYNG = :c_undrlyng
           AND    FMM_XCHNG_CD = :c_xchng_cd
           AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
                                  FROM    FCB_FO_CLN_BSKT_ALLTD
                                  WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                                        FROM   CLM_CLNT_MSTR
                                                        WHERE CLM_MTCH_ACCNT =:c_mtch_accnt_no));

          if( SQLCODE != 0 && (SQLCODE != NO_DATA_FOUND))
          {
           fn_errlog( c_ServiceName, "S31170", SQLMSG, c_errmsg  );
           EXEC SQL CLOSE :sys_cursor;
           EXEC SQL FREE :sys_cursor;
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );        
          }

          d_cntrct_val = ((double)l_strike_prc * (double)l_opnpstn_qty) ;
          d_mrggn_value =  fn_maxd((d_var_mrgn + d_elm_mrgn + d_ISec_buff_mrgn_prcnt ),d_dlvry_min_mrgn_prcnt);
          d_new_dlvry_mrgn = d_cntrct_val * d_mrggn_value * d_current_dlvry_mrgn_prcnt;
          
          EXEC SQL
          SELECT ROUND(:d_new_dlvry_mrgn,2)
          INTO :d_new_dlvry_mrgn
          FROM DUAL ;

          if( SQLCODE != 0 && (SQLCODE != NO_DATA_FOUND))
          {
           fn_errlog( c_ServiceName, "S31175", SQLMSG, c_errmsg  );
           EXEC SQL CLOSE :sys_cursor;
           EXEC SQL FREE :sys_cursor;
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

           d_dlvry_mrgn_req = d_dlvry_mrgn_blk - d_new_dlvry_mrgn;
           if(d_dlvry_mrgn_req <0)
           {
            d_dlvry_mrgn_req = (-1) * d_dlvry_mrgn_req; 
           }
           else 
           {
            d_dlvry_mrgn_req =0.0; 
           }
         }
       }
      }
       /** Ver 3.3 Ends  **/
    }

    /*** Ver 2.5 Ends ***/

		/*** Ver 4.0 Starts ***/
		c_all_flg           = 'N';
		c_indx_indctr       = 'N'; 
		c_dlvry_sttlmnt_typ = '\0';
		c_dlvry_enbl_flg    = '\0';
		SETNULL(c_flm_expr_dt);
		if ( c_setlmnt_flg == 'P' ) /*** Physical Settled contract only ***/
		{
			if ( c_prd_typ == 'F' || c_prd_typ == 'O' )
			{
			if( l_opnpstn_qty == 0 )
      {
				c_indx_indctr = 'N';  /** Show Choose Delivery link **/
			}
			else
			{
			EXEC SQL
				SELECT   NVL(FLM_DLVRYENBL_FLG,'N')
				INTO     :c_dlvry_enbl_flg 
				FROM 		 FLM_FO_LODM_MSTR
				WHERE 	 FLM_UNDRLYNG = :c_undrlyng
      AND      FLM_EOS_DT >= (
      SELECT   EXG_NXT_TRD_DT
      FROM     EXG_XCHNG_MSTR
      WHERE    EXG_XCHNG_CD = 'NFO');
      /*** AND      FLM_EOS_DT >= trunc(SYSDATE); ***/
		
			if( (SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ) )
  		{
   	 		fn_errlog( c_ServiceName, "S31180", SQLMSG, c_errmsg );
    		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    		tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  		}
			else if ( SQLCODE == NO_DATA_FOUND )
			{
				c_all_flg = 'Y';
				EXEC SQL
					SELECT 		NVL(FLM_DLVRYENBL_FLG,'N'),FLM_EXP_DT
					INTO      :c_dlvry_enbl_flg,
										:c_flm_expr_dt
					FROM 			FLM_FO_LODM_MSTR
					WHERE 		FLM_UNDRLYNG = 'ALL'
          AND      FLM_EOS_DT >= (
          SELECT   EXG_NXT_TRD_DT
          FROM     EXG_XCHNG_MSTR
          WHERE    EXG_XCHNG_CD = 'NFO');
          /*** AND       FLM_EOS_DT >= trunc(SYSDATE); ***/
		
			if((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
    	{
      	fn_errlog( c_ServiceName, "S31185", SQLMSG, c_errmsg  );
     	 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
			if(DEBUG_MSG_LVL_3)
    	{
      	fn_userlog(c_ServiceName,"Inside Underlying ALL CASE c_all_flg :%c:",c_all_flg);
    	}
		}

   	if ( ( c_dlvry_enbl_flg == 'Y' && ( strcmp(c_flm_expr_dt.arr,c_expry_dt.arr) == 0 ) && c_all_flg == 'Y' ) || ( c_dlvry_enbl_flg == 'Y' && c_all_flg == 'N' ) )
   	{
				/*** Background color display ***/
    		if( d_dlvry_oblgamt_blckd == 0 && l_dlvry_qty_blckd == 0 )
    		{
      		c_dlvry_sttlmnt_typ = 'P';  /** Show Delivery in 'Pink' **/
    		}
				else
				{
					c_dlvry_sttlmnt_typ = 'G';  /** Show Delivery in  'Green' **/
				}
        if ( c_dlvry_mode_flg == 'N' )
        {
        	c_indx_indctr = 'D';  /** Show Choose Delivery link **/
        }
        if ( c_dlvry_mode_flg == 'Y' )
        {
        	c_indx_indctr = 'C';  /** Show Choose Non Delivery link **/
        }

				if(DEBUG_MSG_LVL_3)
    		{
      		fn_userlog(c_ServiceName,"Settlement Flag :%c:",c_dlvry_sttlmnt_typ);
      		fn_userlog(c_ServiceName,"Index Indicator Choose Delivery/Non-Delivery :%c:",c_indx_indctr);
   	 		}
			}
    	else
    	{
        c_indx_indctr = 'N';  /** Dont show any link(Choose delivery or non delivery) **/
			}
			if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Index Indicator Choose Delivery/Non-Delivery :%c:",c_indx_indctr);
      }
		 }
		}
		}
		/*** Ver 4.0 Ends ***/

    /*** Ver 2.7 Starts ***/

    if ( l_opnpstn_qty != 0 && ( li_bo_qty == 0 && li_so_qty == 0 ))
    {
      c_sqoff_at_market_flag = 'Y';
    }
    else
    {
      c_sqoff_at_market_flag = 'N';
      i_sqroffmkt_flg_cnt++;   /*** ver 2.9 *****/
    }

    /*** Ver 2.7 Ends   ***/
	
	/*** Ver 2.8 starts ***/

    if( DEBUG_MSG_LVL_1 ) /*** in ver 3.8 debug level changed from 0 to 1 ***/
     {
      fn_userlog(c_ServiceName, "Buy Quantity :%ld:", li_bo_qty );
      fn_userlog(c_ServiceName, "Sell Quantity :%ld:", li_so_qty );
     }

     if( li_bo_qty  > 0 || li_so_qty  < 0)
     {
       c_cancel_all_flag = 'Y';
     }
     else
     {
       c_cancel_all_flag = 'N';
     }
  
     /**** Ver 2.9  Start ****/
     if(i_sqroffmkt_flg_cnt == 0)
       {
        c_sqr_off_all_at_mkt = 'Y';
       }
       else
       {
        c_sqr_off_all_at_mkt = 'N';
       }
     /**** Ver 2.9  Ends  ****/
 
     if( DEBUG_MSG_LVL_1 ) /** in ver 3.8 debug level changed from 0 to 1***/
     {
      fn_userlog(c_ServiceName, "Cancel Flag:%c:", c_cancel_all_flag );
      fn_userlog(c_ServiceName, "Underlying :%s:", c_undrlyng );
      fn_userlog(c_ServiceName, "Expiry Date :%s:", c_expry_dt.arr );
      fn_userlog( c_ServiceName,"Sqr off All:%c:",c_sqr_off_all_at_mkt);  /** Ver 2.9 ***/
     }

  /*** Ver 2.8 ends ***/
		
	
		if( DEBUG_MSG_LVL_3 ) {  
			fn_userlog(c_ServiceName,"***Packing contract level data for:%s:%s***",c_mtch_accnt_no,c_undrlyng);
			fn_userlog(c_ServiceName,"c_xchng_cd:%s:",c_xchng_cd);
			fn_userlog(c_ServiceName,"c_prd_typ:%c:",c_prd_typ);
			fn_userlog(c_ServiceName,"c_undrlyng:%s:",c_undrlyng);
			fn_userlog(c_ServiceName,"c_exrc_typ:%c:",c_exrc_typ);
			fn_userlog(c_ServiceName,"c_opt_typ:%c:",c_opt_typ);
			fn_userlog(c_ServiceName,"l_strike_prc:%ld:",l_strike_prc);
			fn_userlog(c_ServiceName,"c_expry_dt:%s:",(char*)c_expry_dt.arr);
			fn_userlog(c_ServiceName,"base price :%ld",l_base_prc );
			fn_userlog(c_ServiceName,"profit Loss :%lf",d_profit_loss );
			fn_userlog(c_ServiceName,"Open pstn qty is :%ld:",l_opnpstn_qty);
			fn_userlog(c_ServiceName,"d_mtm_opn_val is :%lf:",d_mtm_opn_val);
			fn_userlog(c_ServiceName,"Last traded price is |%ld|",l_lst_trdd_prc);   
			fn_userlog(c_ServiceName,"Open pstn flow is |%c|",c_opnpstn_flw);
      fn_userlog(c_ServiceName,"Delivery Margin Block is :%lf:",d_dlvry_mrgn_blk);       /*** Ver 3.3 ***/
      fn_userlog(c_ServiceName,"Required delivery Margin is :%lf:",d_dlvry_mrgn_req);    /** Ver 3.3 **/ 
			/* fn_userlog(c_ServiceName,"Open Position value of contract is |%lf|",d_curr_cnt_opn_val); *Commented in VQC */
			fn_userlog(c_ServiceName,"c_indx_indctr :%c",c_indx_indctr );                      /*** Ver 4.0 ***/
			fn_userlog(c_ServiceName,"Color in openposition :%c",c_dlvry_sttlmnt_typ );                /*** Ver 4.0 ***/
			fn_userlog(c_ServiceName,"Fund Blocked in openposition :%lf",d_dlvry_oblgamt_blckd );                /*** Ver 4.0 ***/
    }

		/*** Ver 4.2 ***/
    fn_userlog(c_ServiceName,"REVAMP AVG_PRC c_mtch_accnt_no=:%s: d_avg_prcs=:%lf: l_base_prc=:%ld:",c_mtch_accnt_no,d_avg_prcs,l_base_prc);
    if (d_avg_prcs == 0.0)
    {
      d_avg_prcs = (double)l_base_prc ;
    }
    fn_userlog(c_ServiceName,"REVAMP AVG_PRC Final c_mtch_accnt_no=:%s: d_avg_prcs=:%lf: l_base_prc=:%ld:",c_mtch_accnt_no,d_avg_prcs,l_base_prc);
		/*** Ver 4.2 ends ***/

		c_spl_flg = CONTRACT_IP;

		i_returncode = fn_pack_vartofml ( c_ServiceName,
																			c_errmsg,
																			&ptr_fml_Obuf,
                                     	42,/** Ver 4.2 41 to 42 */ /* Ver 1.4 Changed from 26 to 28 */	/*** Ver 1.8 Changed from 27 to 29 ***/ /*** ver 2.5 count changed from 29 to 30 ***/ /*** changed to 31 in Ver 2.7 ***/
																			/*** Ver 2.8 Changed from 31 to 32 ***//*** Ver 3.1 Change from 32 to 33 ***/ /*** Ver 2.9 Changed from 33 to 34 ***/ /*** Ver 3.0 Changed from 34 to 35 ***/ /** Ver 3.3 Chnaged frm 35 to 37 **//** 37 to 38 in ver 3.6 **//** 38 to 41 in ver 4.0 **/
																			FFO_PRDCT_TYP,(char *)&c_prd_typ, 
																			FFO_CTGRY_INDSTK,(char *)&c_ctgry_indstk,
																			FFO_UNDRLYNG,(char *)c_undrlyng,
																			FFO_EXPRY_DT,(char *)c_expry_dt.arr,
																			FFO_EXER_TYP,(char *)&c_exrc_typ,
																			FFO_OPT_TYP, (char *)&c_opt_typ,
																			FFO_STRK_PRC, (char *)&l_strike_prc,
																			FFO_C_OPNPSTN_FLW,(char *)&c_opnpstn_flw,
																			FFO_C_OPNPSTN_QTY,(char *)&l_opnpstn_qty,
																			FFO_CVR_QTY,(char *)&l_cvr_qty,	
																			FFO_C_MTM_OPN_VAL,(char *)&d_mtm_opn_val,
																			FFO_LST_TRD_PRC,(char *)&l_lst_trdd_prc,
																			FFO_U_TRD_MRGN,(char *)&d_utrd_mrgn,                
																			FFO_SPL_FLG,(char *)&c_spl_flg,
																			FFO_MIN_LOT_QTY,(char *)&l_lot_size,
																			FFO_UI_BUY_QTY,(char *)&li_bo_qty,
																			FFO_UI_SELL_QTY,(char *)&li_so_qty,
																			FFO_U_MM_TRD_MRGN,(char *)&d_null,         
																			FFO_PRCNTG_CHNG,(char *)&l_prcnt, 					
																			FFO_EBA_MTCH_ACT_NO,(char*)&c_mtch_accnt_no, 
																			FFO_SUB_BUF_CNT,   (char *)&rec_cnt,	
																			FFO_ACTN_ID,       (char *)&ret_val, 
																			FFO_BASE_PRC,(char *)&l_base_prc,
																			FFO_XCHNG_CD, (char *)&c_xchng_cd,
																			FFO_AVM_PRCNT, (char *)&d_profit_loss,
																			FFO_BAL_AMT,(char *)&d_null,
																			FFO_QT_TRDNG_FLG,(char *)&c_rollover_flag, 	/* Ver 1.4 */
                                      FFO_SETTLOR_STTS,(char *)&c_sprd_roll_flag,     /***  Ver 3.0 ***/
																			FFO_IBUY_ORD_RT,(char *)&li_bo_rt,					/*** Ver 1.8 ***/
																			FFO_ISELL_ORD_RT,(char *)&li_so_rt,  				/*** Ver 1.8 ***/
                                      FFO_CURR_RT, (char *)&l_spot_prc,           /*** Ver 2.5 ***/
                                      FFO_RQST_TYP, (char *)&c_sqoff_at_market_flag,  /*** Ver 2.7 ***/
																			FFO_NKD_BLKD_FLG, (char *)&c_cancel_all_flag,       /*** Ver 2.8***/
                                      FFO_DR_CR_FLG, (char *)&c_null,  /****ver 2.9*****/
                                      FFO_BK_UBK_FLG, (char *)&c_setlmnt_flg,  /*** Ver 3.1 ***/
                                      FFO_SO_AMT_BLKD, (char *)&d_dlvry_mrgn_blk, /** Ver 3.3 **/
                                      FFO_OPNPSTN_VAL, (char *)&d_dlvry_mrgn_req, /** Ver 3.3 **/ 
                                      FFO_INTRST_RT, (char *)&d_trg_prc, /*** ver 3.6 ***/
																			FFO_INDX_INDCTR, (char *)&c_indx_indctr,           /*** Ver 4.0 ***/
																			FFO_STLMNT_TYP, (char *)&c_dlvry_sttlmnt_typ,      /*** Ver 4.0 ***/
																			FFO_BO_AMT_BLKD, (char *)&d_dlvry_oblgamt_blckd,      /*** Ver 4.0 ***/
                                      FFO_EFF_EXCTD_RT, (char *)&d_avg_prcs);               /*** Ver 4.2 ***/
                                   	 	

		if ( i_returncode == -1 )
    {
			fn_errlog( c_ServiceName, "S31190", FMLMSG, c_errmsg  );
			EXEC SQL CLOSE :sys_cursor;
			EXEC SQL FREE :sys_cursor;
			tpfree ( ( char * ) ptr_fml_Obuf );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		l_tot_buy_qty = l_tot_buy_qty + li_bo_qty;  
		l_tot_sell_qty = l_tot_sell_qty + li_so_qty;  

		d_tot_profit_loss = d_tot_profit_loss + d_profit_loss; 

		/* d_total_prmum = d_total_prmum + d_prmum; *** Commented in VQC ***/

		l_qty = l_qty + l_opnpstn_qty ;

		/*** Grand Total***/
		/* l_grnd_opnpstn_qty = l_grnd_opnpstn_qty + l_opnpstn_qty; *** Commented in VQC ***/
		/* li_grnd_bo_qty = li_grnd_bo_qty + li_bo_qty; *** Commented in VQC ***/
		/* li_grnd_so_qty = li_grnd_so_qty + li_so_qty; *** Commented in VQC ***/
		/* d_grnd_profit_loss = d_grnd_profit_loss + d_profit_loss; *** Commented in VQC ***/

		if( DEBUG_MSG_LVL_3 ) {         
			fn_userlog(c_ServiceName,"size of ptr_fml_Obuf:%ld:",Fsizeof32(ptr_fml_Obuf));
		}

    /***** Commented in ver VQC ***
		if (i_size_fcp == 0 )
		{
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Unused Size:%ld:",Funused32(ptr_fml_Obuf));
			}
			l_size_ocpd=Fsizeof32(ptr_fml_Obuf)-Funused32(ptr_fml_Obuf);
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Size Occpd:%ld:",l_size_ocpd);
			}
			i_size_fcp = 1 ;
		} ***/
  } /* For loop */



	EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );

}
