/******************************************************************************/
/*	Program	    			:	SFO_PRCS_OTPCAL                                       */
/*                                                                            */
/*  Input             : FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_BAT_TAG                                           */
/*                      FFO_REC_NO                                            */
/*                                                                            */
/*  Output            : Success / Failure                                     */
/*                                                                            */
/*  Description       : To process the records for recalculation of Trigger   */
/*                      price which is called by the batch program            */
/*                                                                            */
/*  Log               :                                                       */
/*                                                                            */
/******************************************************************************/
/* 17-May-2002     Ver 1.0        Vinod Banjan      Release 1.0               */
/* 17-Dec-2007     Ver 1.1        Vidyayini Krish   IBM Changes               */
/* 01-Feb-2012     Ver 1.2        Nitin Save   BSE-Change for exchange code   */
/* 21-Feb-2014     Ver 1.3        Sachin Birje Auto MTM Changes               */
/* 04-Oct-2015     Ver 1.4        Sachin Birje Trigger Price changes          */
/* 05-Nov-2015     Ver 1.5        Anand Dhopte FCM-FTQ Table Merger Changes   */
/* 01-Aug-2016     Ver 1.7        Tanmay W.		AUTOMTM MAILER CHANGES					*/
/* 25-Sep-2018     Ver 1.8        Varadraj Gramopadhye Time updation          */
/* 11-Dec-2020     Ver 1.9        Different ELM% for Deep OTM Option for SPAN and Non SPAN CR-ISEC14-141383 (Anuj Pancholi) */
/* 21-Jan-2021     Ver 2.0        Minor Change for Deep OTM option strikes  (Mrinal Kishore) */
/* 07-Mar-2023     Ver 2.1        ChangeS for Client level lock (Samip M)     */
<<<<<<< HEAD
/* 05-Sep-2023     Ver TOL        Tux on Linux (Agam)                         */
=======
/* 08-Sep-2023     Ver TOL        Tux on linux (Shraddha karande)             */
>>>>>>> 8ffe737154acc4dad92e1776ba08ed36474f546a
/****************************************************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <math.h>
/*Add header files here */
/*Add header files here */
#include <fml_def.h>
#include <fo_view_def.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fo.h>
#include <fn_ddr.h>
#include <fn_session.h> /* Ver 1.1 */
#include <fn_log.h> /* Ver 1.1 */
#include <fn_read_debug_lvl.h> /* Ver 1.1 */

#define   UPPER 1
#define   LOWER 2
<<<<<<< HEAD

int fn_nearst_paise(char *, double , int , int, char *, double * ); /* Renamed fn_nearest_paise to fn_nearst_paise in Ver TOL */ 

int fn_upd_ins_trigprc(char *c_ServiceName,
=======
/*replace fn_nearest_paise to fn_nearest_paise_optcal in ver TOL*/
int fn_nearest_paise_optcal(char *, double , int , int, char *, double * );
/*replace fn_upd_ins_trgprc to fn_upd_ins_trgprc_optcal in ver TOL*/
int fn_upd_ins_trgprc_optcal(char *c_ServiceName,
>>>>>>> 8ffe737154acc4dad92e1776ba08ed36474f546a
                      char *c_cln_mtch_accnt, 
                      struct vw_contract *ptr_st_contract,
                      double d_trg_prc,
                      double d_ers_trg_prc,
                      char *c_err_msg);  /*** Ver 1.3 ***/ /* Renamed fn_upd_ins_trgprc to fn_upd_ins_trigprc in Ver TOL */

void SFO_PRCS_OTPCAL( TPSVCINFO *rqst )
{
  FBFR32 *ptr_fml_Ibuf;

  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
  char c_tag [ 256 ];
  char c_msg [ 256 ];
  char c_otm_flg = 'N';  /*** ver 1.9 ***/

  int i_returncode;
  int i_trnsctn;
  int i_tck_sz=0;  /** Ver 1.3 **/

	long l_rec_no;

  double  d_ers_prcnt=0.0;        /** Ver 1.3 **/
  double  d_ers_trigger_prc=0.0;  /** Ver 1.3 **/
  double  d_ers_trg_prc=0.0;      /** Ver 1.3 **/

  EXEC SQL BEGIN DECLARE SECTION;
  	struct vw_contract st_contract;
		char	  c_cln_mtch_accnt[11];
		long	  l_basket_id;
		long		l_opnpstn_qty;
		double	d_min_mrgn;
		double	d_trd_mrgn;
		double	d_trigger_prc;
  	int     i_up_down;
  	double  d_trg_prc;
  EXEC SQL END DECLARE SECTION;

  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);

  i_returncode = Fvftos32( ptr_fml_Ibuf,
                         ( char * )&st_contract,
                         "vw_contract" );

  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                      c_err_msg,
                                      ptr_fml_Ibuf,
                                      3,
                            FFO_EBA_MTCH_ACT_NO,(char * )c_cln_mtch_accnt, NULL,
                            FFO_BAT_TAG, (char * )c_tag, NULL,
                            FFO_REC_NO, (char * )&l_rec_no, NULL);

  if( i_returncode  == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", LIBMSG , c_err_msg );
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	sprintf ( c_msg, "Failed in Processing match a/c - [%s], Underlying - [%s], Exp dt - [%s], Strike Price - [%ld], [%c%c]",
        c_cln_mtch_accnt,
        st_contract.c_undrlyng,
        st_contract.c_expry_dt,
        st_contract.l_strike_prc,
        st_contract.c_opt_typ,
        st_contract.c_exrc_typ );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }

  if(DEBUG_MSG_LVL_3){
    fn_userlog( c_ServiceName, "Match Account :%s:",
                                  c_cln_mtch_accnt );
    fn_userlog( c_ServiceName, "Exchange code :%s:",
                                  st_contract.c_xchng_cd );
    fn_userlog( c_ServiceName, "Product Type  :%c:",
                                  st_contract.c_prd_typ );
    fn_userlog( c_ServiceName, "Underlyng     :%s:",
                                  st_contract.c_undrlyng );
    fn_userlog( c_ServiceName, "Expiry date   :%s:",
                                  st_contract.c_expry_dt );
    fn_userlog( c_ServiceName, "Excercise Type:%c:",
                                  st_contract.c_exrc_typ );
    fn_userlog( c_ServiceName, "Category      :%c:",
                                 st_contract.c_ctgry_indstk );
    fn_userlog( c_ServiceName, "Option type  :%c:",
                                 st_contract.c_opt_typ );
    fn_userlog( c_ServiceName, "Strike price :%ld:",
                                 st_contract.l_strike_prc );
  }

  sprintf ( c_msg, "Processing match a/c - [%s], Underlying - [%s], Exp dt - [%s], Strike Price - [%ld], [%c%c]",
        c_cln_mtch_accnt,
        st_contract.c_undrlyng,
        st_contract.c_expry_dt,
        st_contract.l_strike_prc,
        st_contract.c_opt_typ,
        st_contract.c_exrc_typ );
  fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog( c_ServiceName, "S31015", LIBMSG , c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	sprintf ( c_msg, "Failed in Processing match a/c - [%s], Underlying - [%s], Exp dt - [%s], Strike Price - [%ld], [%c%c]",
        c_cln_mtch_accnt,
        st_contract.c_undrlyng,
        st_contract.c_expry_dt,
        st_contract.l_strike_prc,
        st_contract.c_opt_typ,
        st_contract.c_exrc_typ );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /** i_returncode = fn_lock_usr( c_ServiceName, c_cln_mtch_accnt );  ** Commented and changed below for Ver 2.1 **/
  i_returncode = fn_lock_fno( c_ServiceName, c_cln_mtch_accnt ); 
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31020", LIBMSG , c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  	sprintf ( c_msg, "Failed in Processing match a/c - [%s], Underlying - [%s], Exp dt - [%s], Strike Price - [%ld], [%c%c]",
        c_cln_mtch_accnt,
        st_contract.c_undrlyng,
        st_contract.c_expry_dt,
        st_contract.l_strike_prc,
        st_contract.c_opt_typ,
        st_contract.c_exrc_typ );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
 
  EXEC SQL
    SELECT  fcb_undrlyng_bskt_id
    INTO    :l_basket_id
    FROM    fcb_fo_cln_bskt_alltd
    WHERE   fcb_cln_lvl = ( SELECT 	clm_clnt_lvl
                          	FROM 		clm_clnt_mstr
                          	WHERE 	clm_mtch_accnt = :c_cln_mtch_accnt );
  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31025", SQLMSG , c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  	sprintf ( c_msg, "Failed in Processing match a/c - [%s], Underlying - [%s], Exp dt - [%s], Strike Price - [%ld], [%c%c]",
        c_cln_mtch_accnt,
        st_contract.c_undrlyng,
        st_contract.c_expry_dt,
        st_contract.l_strike_prc,
        st_contract.c_opt_typ,
        st_contract.c_exrc_typ );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

if(DEBUG_MSG_LVL_3){
  fn_userlog( c_ServiceName, "l_basket_id :%ld:", l_basket_id);
}

  
  /** ver 1.9 starts **/
   EXEC SQL
    SELECT  NVL(FTQ_OTM_FLG,'N')
    INTO    :c_otm_flg
    FROM   FTQ_FO_TRD_QT
    WHERE  FTQ_XCHNG_CD = :st_contract.c_xchng_cd
    AND    FTQ_UNDRLYNG = :st_contract.c_undrlyng 
    AND    FTQ_PRDCT_TYP = :st_contract.c_prd_typ
    AND    FTQ_EXPRY_DT = to_date(:st_contract.c_expry_dt,'dd-Mon-yyyy')
    AND    FTQ_STRK_PRC = :st_contract.l_strike_prc
    AND    FTQ_OPT_TYP =  :st_contract.c_opt_typ;
    
  if ( SQLCODE != 0 && SQLCODE !=  NO_DATA_FOUND )			/*** ver 2.0 No Data Found handled **/
  {
    fn_errlog( c_ServiceName, "S31030", SQLMSG , c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    sprintf ( c_msg, "Failed in Processing match a/c - [%s], Underlying - [%s], Exp dt - [%s], Strike Price - [%ld], [%c%c]",
        c_cln_mtch_accnt,
        st_contract.c_undrlyng,
        st_contract.c_expry_dt,
        st_contract.l_strike_prc,
        st_contract.c_opt_typ,
        st_contract.c_exrc_typ );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  } 
	/* Ver 2.0 Starts */
	if ( SQLCODE == NO_DATA_FOUND )
	{
		c_otm_flg = 'N';
      fn_userlog(c_ServiceName,"OTM/OTH Flag Set To Default for Contract :%s:%s:%c:%s:%ld:%c:%c:",st_contract.c_xchng_cd,st_contract.c_undrlyng,st_contract.c_prd_typ,st_contract.c_expry_dt,st_contract.l_strike_prc,st_contract.c_opt_typ,st_contract.c_exrc_typ);
	}
	/* Ver 2.0 Ends */
  
  fn_userlog( c_ServiceName, "OTM_FLG :%c:", c_otm_flg); 
   
  /** ver 1.9 ends **/
   
  EXEC SQL
    SELECT  /** fmm_min_mrgn_prcnt, ** commented in ver 1.9 **/
            decode(:c_otm_flg,'Y',nvl(fmm_deep_otm_mm_prcnt,0),fmm_min_mrgn_prcnt),     /** ver 1.9 **/
            nvl(fmm_min_trg_prcnt,0)      /** Ver 1.3 **/
    INTO    :d_min_mrgn,
            :d_ers_prcnt       /** Ver 1.3 **/
    FROM    fmm_fo_mrgn_mstr
    WHERE   fmm_undrlyng_bskt_id  = :l_basket_id
    AND     fmm_xchng_cd          = :st_contract.c_xchng_cd   /** Added in Ver 1.2 **/
    AND     fmm_prdct_typ         = :st_contract.c_prd_typ
    AND     fmm_undrlyng          = :st_contract.c_undrlyng;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31035", SQLMSG , c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  	
	/** Exch cd in below c_msg is added in Ver 1.2 **/
	sprintf ( c_msg, "Failed in Processing match a/c - [%s], Exch cd-[%s] , Underlying - [%s], Exp dt - [%s], Strike Price - [%ld], [%c%c]",
        c_cln_mtch_accnt,
				st_contract.c_xchng_cd, 
        st_contract.c_undrlyng,
        st_contract.c_expry_dt,
        st_contract.l_strike_prc,
        st_contract.c_opt_typ,
        st_contract.c_exrc_typ );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

if(DEBUG_MSG_LVL_3){
  fn_userlog( c_ServiceName, "d_min_mrgn :%lf:", d_min_mrgn);
}

  EXEC SQL
    SELECT 	NVL(fop_uexctd_mrgn,0),
						NVL(fop_opnpstn_qty,0)
		INTO		:d_trd_mrgn,
						:l_opnpstn_qty
		FROM		fop_fo_options_pstn
		WHERE		fop_clm_mtch_accnt 		=	:c_cln_mtch_accnt
		AND			fop_xchng_cd 					=	:st_contract.c_xchng_cd
		AND			fop_prdct_typ					=	:st_contract.c_prd_typ
		AND			fop_indstk						=	:st_contract.c_ctgry_indstk
		AND			fop_undrlyng					=	:st_contract.c_undrlyng
		AND			fop_expry_dt					=	to_date(:st_contract.c_expry_dt,
																						'dd-Mon-yyyy')
		AND			fop_exer_typ					= :st_contract.c_exrc_typ
		AND			fop_opt_typ						= :st_contract.c_opt_typ
		AND			fop_strk_prc					= :st_contract.l_strike_prc;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31040", SQLMSG , c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	/** Exch cd in below c_msg is added in Ver 1.2 **/
	sprintf ( c_msg, "Failed in Processing match a/c - [%s], Exch cd-[%s], Underlying - [%s], Exp dt - [%s], Strike Price - [%ld], [%c%c]",
        c_cln_mtch_accnt,
				st_contract.c_xchng_cd, 
        st_contract.c_undrlyng,
        st_contract.c_expry_dt,
        st_contract.l_strike_prc,
        st_contract.c_opt_typ,
        st_contract.c_exrc_typ );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

if(DEBUG_MSG_LVL_3){
  fn_userlog( c_ServiceName, "d_trd_mrgn :%lf:", d_trd_mrgn);
  fn_userlog( c_ServiceName, "l_opnpstn_qty :%ld:", l_opnpstn_qty);
}

  d_trigger_prc = 0.0;

  if ( st_contract.c_opt_typ == 'P' )
  {
    d_trigger_prc = ( ( (double) st_contract.l_strike_prc  -
                      ( d_trd_mrgn / (l_opnpstn_qty * (-1)))) /
                      ( 1 - (d_min_mrgn/100.0 ) )              );
    /** Ver 1.3 Starts Here ***/
    d_ers_trigger_prc = ( ( (double) st_contract.l_strike_prc  -
                      ( d_trd_mrgn / (l_opnpstn_qty * (-1)))) /
                      ( 1 - (d_ers_prcnt/100.0 ) )              );
    /** Ver 1.3 Ends Here ***/
    i_up_down = LOWER;
  }
  else
  {
    d_trigger_prc = ( ( (double) st_contract.l_strike_prc  +
                      ( d_trd_mrgn / (l_opnpstn_qty * (-1)))) /
                      ( 1 + (d_min_mrgn/100.0 ) )              );
    /** Ver 1.3 Starts Here ***/
    d_ers_trigger_prc = ( ( (double) st_contract.l_strike_prc  +
                      ( d_trd_mrgn / (l_opnpstn_qty * (-1)))) /
                      ( 1 + (d_ers_prcnt/100.0 ) )              );
    /** Ver 1.3 Ends Here ***/
    i_up_down = UPPER;

  }
if(DEBUG_MSG_LVL_3){
  fn_userlog( c_ServiceName, "d_trigger_prc :%lf:", d_trigger_prc);
}

  /*** Ver 1.3 Starts Here ***/
  
  /*** Commented in Ver 1.5 *** 

   EXEC SQL
    SELECT NVL(FCM_TCK_SZ,5)
      INTO :i_tck_sz
      FROM FCM_FO_CNTRCT_MSTR
     WHERE FCM_XCHNG_CD = :st_contract.c_xchng_cd
       AND FCM_PRDCT_TYP = :st_contract.c_prd_typ
       AND FCM_INDSTK    = :st_contract.c_ctgry_indstk
       AND FCM_UNDRLYNG  = :st_contract.c_undrlyng
       AND FCM_EXPRY_DT  = to_date(:st_contract.c_expry_dt,'dd-Mon-yyyy')
       AND FCM_EXER_TYP  = :st_contract.c_exrc_typ
       AND FCM_OPT_TYP   = :st_contract.c_opt_typ
       AND FCM_STRK_PRC  = :st_contract.l_strike_prc;

    *** Ver 1.5 Comment ends ***/
    
    /*** Ver 1.5 Starts ***/
    
    EXEC SQL
    SELECT NVL(FTQ_TCK_SZ,5)
      INTO :i_tck_sz
      FROM FTQ_FO_TRD_QT
     WHERE FTQ_XCHNG_CD = :st_contract.c_xchng_cd
       AND FTQ_PRDCT_TYP = :st_contract.c_prd_typ
       AND FTQ_INDSTK    = :st_contract.c_ctgry_indstk
       AND FTQ_UNDRLYNG  = :st_contract.c_undrlyng
       AND FTQ_EXPRY_DT  = to_date(:st_contract.c_expry_dt,'dd-Mon-yyyy')
       AND FTQ_EXER_TYP  = :st_contract.c_exrc_typ
       AND FTQ_OPT_TYP   = :st_contract.c_opt_typ
       AND FTQ_STRK_PRC  = :st_contract.l_strike_prc; 
    
    /*** Ver 1.5 Ends   ***/   

   if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
   {
    fn_errlog( c_ServiceName, "S31045", SQLMSG , c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    sprintf ( c_msg, "Failed in Processing match a/c - [%s], Underlying - [%s], Exp dt - [%s], Strike Price - [%ld], [%c%c]",
        c_cln_mtch_accnt,
        st_contract.c_xchng_cd,
        st_contract.c_undrlyng,
        st_contract.c_expry_dt,
        st_contract.l_strike_prc,
        st_contract.c_opt_typ,
        st_contract.c_exrc_typ );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
   if( SQLCODE == NO_DATA_FOUND )
   {
     i_tck_sz = 5;
   } 

   if(DEBUG_MSG_LVL_0)
   {
    fn_userlog(c_ServiceName," FTQ Tick Size Is :%d:",i_tck_sz);
   }
 
  /*** ver 1.3 Ends Here ***/

  d_trg_prc = 0.0;
  d_ers_trg_prc = 0.0;   /** ver 1.3 **/

<<<<<<< HEAD
  i_returncode = fn_nearst_paise( c_ServiceName,
=======
  i_returncode = fn_nearest_paise_optcal( c_ServiceName,
>>>>>>> 8ffe737154acc4dad92e1776ba08ed36474f546a
                                   d_trigger_prc,
                                  /** 5,  ** Ver 1.3 **/
                                   i_tck_sz,  /** Ver 1.3 **/
                                   i_up_down,
                                   c_err_msg,
                                   &d_trg_prc );

  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31050", LIBMSG , c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  	/** Exch cd in below c_msg is added in Ver 1.2 **/
	sprintf ( c_msg, "Failed in Processing match a/c - [%s], Underlying - [%s], Exp dt - [%s], Strike Price - [%ld], [%c%c]",
        c_cln_mtch_accnt,
				st_contract.c_xchng_cd, 
        st_contract.c_undrlyng,
        st_contract.c_expry_dt,
        st_contract.l_strike_prc,
        st_contract.c_opt_typ,
        st_contract.c_exrc_typ );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /**** Ver 1.3 Starts here ****/
<<<<<<< HEAD
  i_returncode = fn_nearst_paise( c_ServiceName,
=======
  i_returncode = fn_nearest_paise_optcal( c_ServiceName,
>>>>>>> 8ffe737154acc4dad92e1776ba08ed36474f546a
                                   d_ers_trigger_prc,
                                   i_tck_sz, 
                                   i_up_down,
                                   c_err_msg,
                                   &d_ers_trg_prc );

  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31055", LIBMSG , c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    /** Exch cd in below c_msg is added in Ver 1.2 **/
  sprintf ( c_msg, "Failed in Processing match a/c - [%s], Underlying - [%s], Exp dt - [%s], Strike Price - [%ld], [%c%c]",
        c_cln_mtch_accnt,
        st_contract.c_xchng_cd,
        st_contract.c_undrlyng,
        st_contract.c_expry_dt,
        st_contract.l_strike_prc,
        st_contract.c_opt_typ,
        st_contract.c_exrc_typ );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /**** Ver 1.3 Ends here ****/

if(DEBUG_MSG_LVL_3){
  fn_userlog( c_ServiceName, "d_trg_prc after round off :%lf:", d_trg_prc);
}

  EXEC SQL
		UPDATE	fop_fo_options_pstn
		SET			fop_trggr_prc 				= :d_trg_prc,
		  		  fop_min_trg_prc	= :d_ers_trg_prc   /** ver 1.3 **/
		WHERE		fop_clm_mtch_accnt 		=	:c_cln_mtch_accnt
		AND			fop_xchng_cd 					=	:st_contract.c_xchng_cd
		AND			fop_prdct_typ					=	:st_contract.c_prd_typ
		AND			fop_indstk						=	:st_contract.c_ctgry_indstk
		AND			fop_undrlyng					=	:st_contract.c_undrlyng
		AND			fop_expry_dt					=	to_date(:st_contract.c_expry_dt,
																						'dd-Mon-yyyy')
		AND			fop_exer_typ					= :st_contract.c_exrc_typ
		AND			fop_opt_typ						= :st_contract.c_opt_typ
		AND			fop_strk_prc					= :st_contract.l_strike_prc;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31060", SQLMSG , c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  	/** Exch cd in below c_msg is added in Ver 1.2 **/
	sprintf ( c_msg, "Failed in Processing match a/c - [%s],  Exch cd-[%s], Underlying - [%s], Exp dt - [%s], Strike Price - [%ld], [%c%c]",
        c_cln_mtch_accnt,
				st_contract.c_xchng_cd, 
        st_contract.c_undrlyng,
        st_contract.c_expry_dt,
        st_contract.l_strike_prc,
        st_contract.c_opt_typ,
        st_contract.c_exrc_typ );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Ver 1.3 Starts Here ***/
<<<<<<< HEAD
  i_returncode =  fn_upd_ins_trigprc(c_ServiceName,
=======
  i_returncode =  fn_upd_ins_trgprc_optcal(c_ServiceName,
>>>>>>> 8ffe737154acc4dad92e1776ba08ed36474f546a
                                    c_cln_mtch_accnt,
                                    &st_contract,
                                    d_trg_prc,
                                    d_ers_trg_prc,
                                    c_err_msg);

  /*** Ver 1.3 Ends Here ***/ 
  

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "S31065", LIBMSG , c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  	/** Exch cd in below c_msg is added in Ver 1.2 **/
	sprintf ( c_msg, "Failed in Processing match a/c - [%s],Exch cd-[%s], Underlying - [%s], Exp dt - [%s], Strike Price - [%ld], [%c%c]",
        c_cln_mtch_accnt,
				st_contract.c_xchng_cd, 
        st_contract.c_undrlyng,
        st_contract.c_expry_dt,
        st_contract.l_strike_prc,
        st_contract.c_opt_typ,
        st_contract.c_exrc_typ );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
  }

  sprintf ( c_msg, "Successfully Processed match a/c - [%s],Exch cd-[%s], Underlying - [%s], Exp dt - [%s], Strike Price - [%ld], [%c%c]",
        c_cln_mtch_accnt,
	st_contract.c_xchng_cd, 
        st_contract.c_undrlyng,
        st_contract.c_expry_dt,
        st_contract.l_strike_prc,
        st_contract.c_opt_typ,
        st_contract.c_exrc_typ );
  fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );

  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Ibuf, 0 , 0 );
}


<<<<<<< HEAD
int fn_nearst_paise(  char   *c_ServiceName,
=======
int fn_nearest_paise_optcal(  char   *c_ServiceName,
>>>>>>> 8ffe737154acc4dad92e1776ba08ed36474f546a
                       double d_rate,
                       int    tick,
                       int    up_down,
                       char   *c_err_msg,
                       double *d_amount )
{

/************************************************************
up_down =1 for lower bound and 2 for upper bound
tick will be the nearest paise
************************************************************/

  long  l_rate ;

  d_rate =  floor(d_rate);
  l_rate = (long) d_rate ;

  if(up_down == LOWER)
  {
     d_rate = (double)(l_rate  - (  l_rate %  tick ) ) ;
     *d_amount = d_rate;
  }
  else if(up_down == UPPER)
  {
     if ( (  l_rate %  tick ) != 0)
     {
       d_rate = (double)(l_rate  - (  l_rate %  tick ) + tick ) ;
     }
     *d_amount = d_rate;
  }
  else
  {
    strcpy( c_err_msg, "Invalid up_down of bound" );
    fn_errlog( c_ServiceName, "S31070", DEFMSG, c_err_msg );
    return FAILURE;
  }

  return SUCCESS;
}

/*** Ver 1.3 Starts here ***/
<<<<<<< HEAD
int fn_upd_ins_trigprc(char *c_ServiceName,
=======
int fn_upd_ins_trgprc_optcal(char *c_ServiceName,
>>>>>>> 8ffe737154acc4dad92e1776ba08ed36474f546a
                      char *c_cln_mtch_accnt,
                      struct vw_contract *ptr_st_contract,
                      double d_trg_prc,
                      double d_ers_trg_prc,
                      char *c_err_msg)
{
  double d_min_margin_pctg= 0.0;
  char c_sem_map_vl[24];
  char c_sem_map_vl1[24];
  double d_wght_avgprc=0;
  double d_opn_pos_val=0;
  long d_opn_pos_qty=0;
  long l_opn_pos_qty=0;

  char c_opnpstn_flw='\0';

  int i_trnsctn;

  MEMSET(c_sem_map_vl);
  MEMSET(c_sem_map_vl1);

  EXEC SQL
    SELECT abs(nvl(FOP_OPNPSTN_VAL,0)),
           abs(nvl(FOP_OPNPSTN_QTY,0)),
           FOP_OPNPSTN_FLW
      INTO  :d_opn_pos_val,
            :l_opn_pos_qty,
            :c_opnpstn_flw
      FROM FOP_FO_OPTIONS_PSTN
     WHERE FOP_CLM_MTCH_ACCNT =:c_cln_mtch_accnt
       AND FOP_XCHNG_CD =:ptr_st_contract->c_xchng_cd
       AND FOP_PRDCT_TYP =:ptr_st_contract->c_prd_typ
       AND FOP_INDSTK    =:ptr_st_contract->c_ctgry_indstk
       AND FOP_UNDRLYNG  =:ptr_st_contract->c_undrlyng
       AND FOP_EXPRY_DT  =:ptr_st_contract->c_expry_dt
       AND FOP_STRK_PRC  =:ptr_st_contract->l_strike_prc
       AND FOP_EXER_TYP  =:ptr_st_contract->c_exrc_typ
       AND FOP_OPT_TYP   =:ptr_st_contract->c_opt_typ;
  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31075",SQLMSG,c_err_msg);
    return FAILURE;
  }

  if( l_opn_pos_qty != 0 && c_opnpstn_flw == 'S' )   /*** Ver 1.4 *** c_opnpstn_flw added **/
  {

   d_wght_avgprc = (double) d_opn_pos_val / l_opn_pos_qty ;   
   if (strcmp(ptr_st_contract->c_xchng_cd,"NFO") == 0 )
   {

      EXEC SQL
        SELECT  SEM_MAP_VL
          INTO  :c_sem_map_vl
          FROM  SEM_STCK_MAP
          WHERE SEM_STCK_CD = :ptr_st_contract->c_undrlyng
          AND   SEM_ENTTY = decode(:ptr_st_contract->c_ctgry_indstk,'I','12',1);

   }
   else if (strcmp(ptr_st_contract->c_xchng_cd,"BFO") == 0 )
   {
    EXEC SQL
      SELECT  SEM_MAP_VL
        INTO  :c_sem_map_vl
        FROM  SEM_STCK_MAP
        WHERE SEM_STCK_CD = :ptr_st_contract->c_undrlyng
        AND   SEM_ENTTY = decode(:ptr_st_contract->c_ctgry_indstk,'I','12',6);
   }
   else
   {
     fn_errlog( c_ServiceName, "S31080","Invalid Exchange code",c_err_msg);
     return FAILURE;
   }

   if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
   {
     fn_errlog( c_ServiceName, "S31085",SQLMSG,c_err_msg);
     return FAILURE;
   }

   rtrim(c_sem_map_vl);
   strcpy(c_sem_map_vl1,c_sem_map_vl);
 
   if( ptr_st_contract->c_ctgry_indstk == 'S' )
   {
    sprintf(c_sem_map_vl,"%sEQ",c_sem_map_vl);
   } 
   
   rtrim(c_sem_map_vl);
   rtrim(c_sem_map_vl1);
   EXEC SQL
    UPDATE  FMD_FO_MTM_DTLS
    SET     FMD_LMT_RT=:d_wght_avgprc,
            FMD_TRGR_RT= :d_trg_prc,
            FMD_MIN_TRGR_RT= :d_ers_trg_prc,
            FMD_ORDR_FLW = :c_opnpstn_flw,
            FMD_STATUS = 'N',
						FMD_PSTN_TYP = 'N',     /** ver 1.7 **/
            FMD_TRG_SYSTM=sysdate       /** ver 1.8 **/
    WHERE FMD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
    AND   FMD_XCHNG_CD = :ptr_st_contract->c_xchng_cd
    AND   FMD_PRDCT_TYP = :ptr_st_contract->c_prd_typ
    AND   FMD_INDSTK = :ptr_st_contract->c_ctgry_indstk
    AND   FMD_UNDRLYNG = :ptr_st_contract->c_undrlyng
    AND   FMD_EXPRY_DT = :ptr_st_contract->c_expry_dt
    AND   FMD_EXER_TYP = :ptr_st_contract->c_exrc_typ
    AND   FMD_OPT_TYP = :ptr_st_contract->c_opt_typ
    AND   FMD_STRK_PRC = :ptr_st_contract->l_strike_prc
    AND   FMD_SEM_VAL !='SYSORDSQOFF';
   if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
   {
    fn_errlog( c_ServiceName, "S31090",SQLMSG,c_err_msg);
    return FAILURE;
   }
   if(SQLCODE == NO_DATA_FOUND)
   {

    EXEC SQL
      INSERT INTO FMD_FO_MTM_DTLS
      (
        FMD_CLM_MTCH_ACCNT,
        FMD_XCHNG_CD,
        FMD_PRDCT_TYP,
        FMD_INDSTK,
        FMD_UNDRLYNG,
        FMD_EXPRY_DT,
        FMD_EXER_TYP,
        FMD_OPT_TYP,
        FMD_STRK_PRC,
        FMD_ORDR_FLW,
        FMD_CNTRCT_TAG,
        FMD_CNTRCT_DESC,
        FMD_STATUS,
        FMD_LMT_RT,
        FMD_TRGR_RT,
        FMD_MIN_TRGR_RT,
        FMD_SEQUENCE,
        FMD_SEM_VAL,
				FMD_PSTN_TYP,			 /** ver 1.7 **/
        FMD_TRG_SYSTM          /** ver 1.8 **/
      )
      VALUES
      (
        :c_cln_mtch_accnt,
        :ptr_st_contract->c_xchng_cd,
        :ptr_st_contract->c_prd_typ,
        :ptr_st_contract->c_ctgry_indstk,
        :ptr_st_contract->c_undrlyng,
        :ptr_st_contract->c_expry_dt,
        :ptr_st_contract->c_exrc_typ,
        :ptr_st_contract->c_opt_typ,
        :ptr_st_contract->l_strike_prc,
        :c_opnpstn_flw,
        '', 
        :c_sem_map_vl,
        'N',
        :d_wght_avgprc,
        :d_trg_prc,
        :d_ers_trg_prc,
        FO_AUTO_MTM_SEQ.NEXTVAL,
        :c_sem_map_vl1,
				'N',     /** ver 1.7 **/
        sysdate  /** ver 1.8 **/
      );

     if( SQLCODE != 0 )
     {
      fn_errlog( c_ServiceName, "S31095",SQLMSG,c_err_msg);
      return FAILURE;
     }
    }
   EXEC SQL
     INSERT INTO FTP_FO_TRGPRC_POSDTLS
          (FTP_CLM_MTCH_ACCNT,
           FTP_XCHNG_CD      ,
           FTP_PRDCT_TYP     ,
           FTP_INDSTK        ,
           FTP_UNDRLYNG      ,
           FTP_EXPRY_DT      ,
           FTP_STRK_PRC      ,
           FTP_EXER_TYP      ,
           FTP_OPT_TYP       ,
           FTP_IBUY_QTY      ,
           FTP_IBUY_ORD_VAL  ,
           FTP_ISELL_QTY     ,
           FTP_ISELL_ORD_VAL ,
           FTP_EXBUY_QTY     ,
           FTP_EXBUY_ORD_VAL ,
           FTP_EXSELL_QTY    ,
           FTP_EXSELL_ORD_VAL ,
           FTP_BUY_EXCTD_QTY  ,
           FTP_SELL_EXCTD_QTY ,
           FTP_OPNPSTN_FLW    ,
           FTP_OPNPSTN_QTY    ,
           FTP_OPNPSTN_VAL    ,
           FTP_UORDR_MRGN     ,
           FTP_UEXCTD_MRGN    ,
           FTP_TRGR_RT        ,  /** Ver 1.4 **/
           FTP_MIN_TRGR_RT    ,  /** Ver 1.4 **/
           FTP_TRG_DT            /** Ver 1.4 **/
          )
          ( SELECT
            FOP_CLM_MTCH_ACCNT,
            FOP_XCHNG_CD,
            FOP_PRDCT_TYP,
            FOP_INDSTK,
            FOP_UNDRLYNG,
            FOP_EXPRY_DT,
            FOP_STRK_PRC,
            FOP_EXER_TYP,
            FOP_OPT_TYP,
            FOP_IBUY_QTY,
            FOP_IBUY_ORD_VAL,
            FOP_ISELL_QTY,
            FOP_ISELL_ORD_VAL,
            FOP_EXBUY_QTY,
            FOP_EXBUY_ORD_VAL,
            FOP_EXSELL_QTY,
            FOP_EXSELL_ORD_VAL,
            FOP_BUY_EXCTD_QTY,
            FOP_SELL_EXCTD_QTY,
            FOP_OPNPSTN_FLW,
            FOP_OPNPSTN_QTY,
            FOP_OPNPSTN_VAL,
            FOP_UORDR_MRGN,
            FOP_UEXCTD_MRGN,
            FOP_TRGGR_PRC,    /** Ver 1.4 **/
            FOP_MIN_TRG_PRC,  /** Ver 1.4 **/
            SYSDATE           /** Ver 1.4 **/
            FROM FOP_FO_OPTIONS_PSTN
            WHERE FOP_CLM_MTCH_ACCNT =:c_cln_mtch_accnt
              AND FOP_XCHNG_CD = :ptr_st_contract->c_xchng_cd
              AND FOP_PRDCT_TYP =:ptr_st_contract->c_prd_typ
              AND FOP_UNDRLYNG = :ptr_st_contract->c_undrlyng
              AND FOP_EXPRY_DT = to_date(:ptr_st_contract->c_expry_dt,'dd-Mon-yyyy')
              AND FOP_STRK_PRC = :ptr_st_contract->l_strike_prc
              AND FOP_OPT_TYP  = :ptr_st_contract->c_opt_typ
          );

     if( SQLCODE != 0 )
     {
      fn_errlog( c_ServiceName, "S31100",SQLMSG,c_err_msg);
      return FAILURE;
     }
   } 
    
  return SUCCESS;
}

/*** Ver 1.3 Ends Here ***/

