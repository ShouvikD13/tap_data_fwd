/******************************************************************************/
/*	Program	    			:	SFO_HDG_CALC                                      		*/
/*                                                                            */
/*  Input             : User Id 									FFO_USR_ID                  */
/*                      Session ID								FFO_SSSN_ID                 */
/*                      Route  create							FFO_ROUT_CRT							  */
/*                      Match Account 						FFO_EBA_MTCH_ACT_NO         */
/*                      Run Number 								FFO_RUN_NUM         				*/
/*                      Trade date								FFO_TRD_DT								  */
/*                      Service called by					FFO_IS_FLG				          */
/*                      [C -Client / B - Business ]                           */
/*                      Exchange code							FFO_XCHNG_CD  		          */
/*                      Starting nifty	level 		FFO_USER_INDEX   		        */
/*                     	Underlying								FFO_UNDRLYNG [n]            */
/*                      Category (Stock/Index)		FFO_CTGRY_INDSTK [n]        */
/*                      Product type							FFO_PRDCT_TYP [n]           */
/*                      Expiry Date								FFO_EXPRY_DT [n]            */
/*                      Order quantity 						FFO_OPNPSTN_QTY[n]          */
/*                      Buy/Sell Flag 						FFO_OPNPSTN_FLW [n]         */
/*                      Open position value				FFO_BASE_ORD_VAL[n]         */
/*                      Position flag(Hedge- H		FFO_SPL_FLG [n]             */
/*                                    Portfolio -C)                           */
/*                      Exercise type 						FFO_EXER_TYP [n]      		  */
/*                      Option Type 							FFO_OPT_TYP  [n]            */
/*                      Strike price							FFO_STRIKE_PRC [n]          */
/*                                                                            */
/*                      n = no.of positions(existing + hedge ) of the client  */
/*                                                                            */
/*  Output            : Match Account 						FFO_EBA_MTCH_ACT_NO         */
/*                      Exchange code							FFO_XCHNG_CD 		            */
/*                      Gross Allocation					FFO_AMOUNT 			            */
/*                      Free Limit								FFO_LIMIT 			            */
/*                      Number of spot levels			FFO_COUNT 			            */
/*                      Interval									FFO_INTERVAL 		            */
/*                      Intial spot level					FFO_INDEX  	    			      */
/*                      Quantity									FFO_OPNPSTN_QTY  			      */
/*                      Net profit and loss of		FFO_MAX_PROFIT	            */
/*                      both cumulative and hedge                             */
/*                      positions                                             */
/*                      Options obligation				FFO_OPNPSTN_VAL [n] 	      */
/*                      Margin blocked						FFO_ADD_MRGN_AMT  [n]     	*/
/*                      Status Flag 							FFO_STATUS_FLG  [n]	      	*/
/*                      [A - contract total]                                  */
/*                      [C - Group total]                                     */
/*                      [T - Match account  total]                            */
/*                      Out of pocket levels 			FFO_BRK_EVN_PT [n]			    */
/*                      Out of pocket at level		FFO_CA_LVL	[n]           	*/
/*                      Position flag(Hedge- H		FFO_SPL_FLG [n]             */
/*                                    Portfolio -C)                           */
/*                      Product type							FFO_PRDCT_TYP [n]           */
/*                     	Underlying								FFO_UNDRLYNG [n]            */
/*                      Expiry Date								FFO_EXPRY_DT [n]            */
/*                      Option Type 							FFO_OPT_TYP  [n]            */
/*                      Exercise type 						FFO_EXER_TYP [n]      		  */
/*                      Strike price							FFO_STRIKE_PRC [n]          */
/*                      Buy/Sell Flag 						FFO_OPNPSTN_FLW [n]         */
/*                      Last traded price					FFO_EFF_LTP [n]      			  */
/*                                                                            */
/*  Description       : This service computes the hedged profit and loss      */
/*                      and out of pocket levels of given portfolio           */
/*                                                                            */
/*  Log               :                                                       */
/*										:	Ver	1.1	CRARE43554	Risk Analyzer Phase II						*/
/*										:	Ver	1.2	Risk Analyzer Phase III												*/
/*                    : Ver 1.4 Contract Master and Trade Quote Merger Changes*/
/******************************************************************************/
/* 02-Dec-2009    Ver 1.0           Indrajit Bhadange                         */
/* 17-Feb-2011		Ver	1.1						Sandeep  Patil														*/
/* 05-Jun-2012		Ver	1.2						Swati Bharankar                           */
/* 11-Aug-2015    Ver 1.4           Anand Dhopte                              */
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>

/*Add header files here */

#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h> 
#include <fn_val_ord.h> 
#include <fml_rout.h> 
#include <fn_read_debug_lvl.h> 
#include <fn_pos.h> 

#define DONT_EXIT 		1
#define EXIT      		0
#define BUF_MULTIPLY 	9
#define NUM_OF_LEVELS	10
#define INTERVAL			100
#define NULLTERM(a) a[strlen(a) - 1]='\0'
/*replce uppercase to uppercase_calc in ver TOL*/
void uppercase_calc( char* c_input_str);

void SFO_HDG_CALC ( TPSVCINFO *rqst )
{
  char 	c_ServiceName[33];
  char 	c_err_msg[256];
  char 	c_srvc_nm[33];
  char 	c_temp_var[10];
  char 	c_cntrct_pnl[256];
  char 	c_undrlyng_pnl[256];
  char 	c_netpnl[256];
  char 	c_opoc_cntrct[256];
  char 	c_opoc_undrlyng[256];
  char 	c_opoc_total[256];
  char 	c_usr_flg;
  char 	c_status_flg;
  char 	c_delimiter;
  char 	c_trd_flg = 'N';
	char	c_prc_indctr;			/***	Ver	1.1	***/
  char  c_clsltp_flg;     /***  Ver 1.1 ***/

  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_usr_prfl st_usr_prfl;
		char c_user_id[256];
  	varchar	c_match_acc[11];
  	varchar	c_sprd_match_acc[11];
		varchar c_sysdate[ 23 ];      /*** Ver 1.2 ***/
		char	c_undrlyng[7];
		char	c_undrlying[7];
		char	c_prev_undrlyng[7];
		char	c_sprd_undrlyng[7];
  	char	c_ctgry_indstk;
  	char	c_indstk;
		char	c_xchng_cd[4];
		char	c_ltq_xchng_cd[4];
		char	c_ltq_underlying[7];
  	char	c_prdct_typ;
  	char	c_exer_typ;
  	char 	c_opt_typ;
  	char 	c_sprd_tag;
		char c_rout_crt[256];
  	varchar	c_expry_dt[LEN_DATE];
  	varchar	c_run_dt[LEN_DATE];
		char	c_ordr_flw;
		char	c_spl_flg;
		char c_iv_indctr;
  	double d_intrst_rt = 0.0;
  	double d_dvdnd = 0.0;
  	double d_idx_spot_val = 0.0;
  	double d_usridx_spot_val = 0.0;
 		double d_stck_spot_val = 0.0;
		double d_currnt_premium = 0.0;
		double d_beta = 0.0;
		double d_time_for_exp = 0.0;
		double d_strk_prc = 0.0;
		double d_ltp_prc = 0.0;
		double d_frntltp_prc = 0.0;			/***	Ver	1.1	***/
		double d_stk_spt_tmp = 0.0;
		double d_opt_oblgtn = 0.0;
		double d_fut_oblgtn = 0.0;
		double d_grp_opt_oblgtn = 0.0;
		double d_total_opt_oblgtn = 0.0;
		double d_mrgn_blocked = 0.0;
		double d_sprd_mrgn = 0.0;
		double d_total_sprd_mrgn = 0.0;
		double d_grp_mrgn_blocked = 0.0;
		double d_total_mrgn_blocked = 0.0;

		double d_user_iv = 0.0;
		double d_ci_buy_qty = 0.0;
		double d_ci_buy_ord_vl = 0.0;
		double d_ci_sell_qty = 0.0;
		double d_ci_sell_ord_vl = 0.0;
		double d_buy_exctd_qty = 0.0;
		double d_sell_exctd_qty = 0.0;
		double d_opnpstn_qty = 0.0;
		double d_org_opn_val = 0.0;
		double d_grs_allctn = 0.0;
		double d_alctd_amt = 0.0;
		double d_bft_amt = 0.0;
		double d_plg_amt = 0.0;
		double d_base_price = 0.0;
		double d_free_limit = 0.0;
		double d_out_of_pocket_by = 0.0;
		double d_currnt_pnl = 0.0;
		double d_out_of_poc_at = 0.0;
		double d_currnt_level = 0.0;
		double d_init_spot = 0.0;
		double d_fut_cls_prc;
	
		double d_arr_cntrct_opoc[NUM_OF_LEVELS] = {0.0};
		double d_arr_undrlyng_opoc[NUM_OF_LEVELS] = {0.0};
		double d_arr_total_opoc[NUM_OF_LEVELS] = {0.0};
		double d_arr_net_total[NUM_OF_LEVELS] = {0.0};
		double d_arr_cntrct_pnl[NUM_OF_LEVELS] = {0.0};
		double d_arr_undrlyng_total[NUM_OF_LEVELS] = {0.0};
		double d_oblgtn_ltp	=	0.0;
  	double d_prc_dffrnc;      						      /***  Ver 1.1 ***/
		double d_out_of_pocket_dwn	=	0.0;					/***	Ver	1.1	***/
		double d_out_of_pocket_up	=	0.0;						/***	Ver	1.1	***/
		double d_levels[10] =	{0.0};				    		/***	Ver	1.1	***/
		

  	long 	l_run_no = 0;
  	long 	l_quantity = 0;
  	long 	l_group_quantity = 0;
  	long 	l_total_quantity = 0;
  	long 	l_out_of_poc_undrlyng_at = 0;
  	long 	l_out_of_poc_cntrct_at = 0;
  	long 	l_out_of_poc_total_at = 0;
  	long 	l_cnt = 0;
  	long 	l_req_buff_sz = 0;
		long	l_lot_sz = 0 ;												/***	Ver	1.1	***/
		long	l_out_of_poc_undrlyng_dwn	=	0;			/***	Ver	1.1	***/
		long	l_out_of_poc_undrlyng_up	=	0;				/***  Ver 1.1 ***/
		long	l_out_of_poc_cntrct_dwn		=	0;				/***  Ver 1.1 ***/
		long	l_out_of_poc_cntrct_up		=	0;					/***  Ver 1.1 ***/
		long	l_out_of_poc_total_dwn		=	0;					/***  Ver 1.1 ***/
		long	l_out_of_poc_total_up			=	0;					/***  Ver 1.1 ***/
		long	l_nifty_spot;										/***	Ver	1.1	***/
		long	l_dwn_sptlvl;										/***  Ver 1.1 ***/
		long	l_uppr_sptlvl;									/***  Ver 1.1 ***/
		long	l_netout_of_poc_atdwn	=	0;				  /***  Ver 1.1 ***/
		long	l_netout_of_poc_atup	=	0;						/***  Ver 1.1 ***/
		long	l_crrnt_lvl[10];
		long	l_lot_size = 0;												/***	Ver	1.2	***/

  EXEC SQL END DECLARE SECTION;

	long 	l_num_levels = NUM_OF_LEVELS;
	long 	l_interval =  INTERVAL;
	long 	l_session_id = 0.0;
	long 	li_recvbuf;
	long 	l_temp_idx;

	int		i_err[ 25 ] = {0}; 
	int		i_ferr[ 25 ] = {0}; 
	int		i_returncode;
  int 	i_trnsctn;
  int 	i_cnt;
	int		i,j,k;
	int		i_ip_len;
	int		i_op_len;
	int		i_tot_rec;
	int		i_ch_val;
	int   i_counter; 
	int 	i_exit_stts;
	int 	i_rec_exst;
	int 	i_trd_exst;
  int   i_clsprc_chk = 0; /***  Ver 1.1 ***/
	int		i_dwncnt;				  /***  Ver 1.1 ***/
	int		i_upcnt;					/***  Ver 1.1 ***/
	int		i_net_up;					/***  Ver 1.1 ***/
	int		i_net_dwn;				/***  Ver 1.1 ***/
	int		i_cls_chk  = 0; 	/***  Ver 1.1 ***/

  FBFR32 *ptr_fml_Ibuf = (FBFR32 *)NULL;
  FBFR32 *ptr_fml_Obuf = (FBFR32 *)NULL;
  FBFR32 *ptr_fml_Rbuf = (FBFR32 *)NULL; 
  FBFR32 *ptr_fml_Sbuf = (FBFR32 *)NULL;

  struct vw_err_msg 	st_err_msg;

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy(c_ServiceName, rqst->name);
	INITDBGLVL(c_ServiceName);

	MEMSET(c_cntrct_pnl);
	MEMSET(c_undrlyng_pnl);
	MEMSET(c_opoc_cntrct);
	MEMSET(c_opoc_undrlyng);
	MEMSET(c_netpnl);
	MEMSET(c_opoc_total);

 	i_ch_val = Fvftos32( ptr_fml_Ibuf,
                      (char *) &st_usr_prfl,
                      "vw_usr_prfl" );
  if ( i_ch_val == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	
	/*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );


    fn_userlog( c_ServiceName, "User id       :%s:", st_usr_prfl.c_user_id );
    fn_userlog( c_ServiceName, "Session id    :%ld:", st_usr_prfl.l_session_id );
    fn_userlog( c_ServiceName, "Match Account :%s:", st_usr_prfl.c_cln_mtch_accnt );
    fn_userlog( c_ServiceName, "Pipe id :%s:", st_usr_prfl.c_pipe_id );

  i_ch_val = fn_chk_sssn( c_ServiceName, &st_usr_prfl, &st_err_msg );
  if ( i_ch_val == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", LIBMSG, st_err_msg.c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	strcpy(c_user_id,st_usr_prfl.c_user_id);
	l_session_id = st_usr_prfl.l_session_id;
	strcpy(c_rout_crt,(char *)st_usr_prfl.c_rout_crt);
	c_iv_indctr = 'R';	
	c_delimiter = '^';	

  fn_init_ddr_pop ( st_usr_prfl.c_pipe_id,TRADING_SECTION,COMMON);

	i_cnt = 0;
	
 	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
 	if ( i_trnsctn == -1 )
 	{
 		fn_errlog( c_ServiceName, "S31015", LIBMSG , c_err_msg );
 		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
 		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}
	
	tpfree((char *)ptr_fml_Sbuf);
  ptr_fml_Sbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  if (ptr_fml_Sbuf == NULL)
 	{
  	fn_errlog(c_ServiceName, "S31020", TPMSG, c_err_msg);
   	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
  }

	tpfree((char *)ptr_fml_Rbuf);
  ptr_fml_Rbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN * BUF_MULTIPLY );
  if (ptr_fml_Rbuf == NULL)
 	{
  	fn_errlog(c_ServiceName, "S31025", TPMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpfree((char *)ptr_fml_Sbuf);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
  }

	tpfree ( ( char * )ptr_fml_Obuf);
  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN * BUF_MULTIPLY );
  if (ptr_fml_Obuf == NULL)
  {
    fn_errlog(c_ServiceName, "S31030", TPMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpfree((char *)ptr_fml_Sbuf);
    tpfree((char *)ptr_fml_Rbuf);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
  }

	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_RUN_NUM ,0,(char *)&l_run_no, 0);
  i_ferr [ 0 ] = Ferror32;
	if(i_err[0] == -1)
  {
  	fn_errlog( c_ServiceName, "S31035",Fstrerror32(i_ferr[0]),c_err_msg);
    fn_userlog(c_ServiceName,"Error in retrieving run number" );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char *)ptr_fml_Sbuf);
    tpfree((char *)ptr_fml_Rbuf);
    tpfree((char *)ptr_fml_Obuf);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}
	
	MEMSET(c_match_acc);	
	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_EBA_MTCH_ACT_NO ,0,(char *)c_match_acc.arr, 0);
  i_ferr [ 0 ] = Ferror32;

	if(i_err[0] == -1)
  {
  	fn_errlog( c_ServiceName, "S31040",Fstrerror32(i_ferr[0]),c_err_msg);
    fn_userlog(c_ServiceName,"Error in retrieving match account" );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char *)ptr_fml_Sbuf);
    tpfree((char *)ptr_fml_Rbuf);
    tpfree((char *)ptr_fml_Obuf);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}
	SETLEN(c_match_acc);
	SETNULL(c_match_acc);

	MEMSET(c_run_dt);

	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_TRD_DT ,0,(char *)c_run_dt.arr, 0);
  i_ferr [ 0 ] = Ferror32;

	if(i_err[0] == -1)
  {
  	fn_errlog( c_ServiceName, "S31045",Fstrerror32(i_ferr[0]),c_err_msg);
    fn_userlog(c_ServiceName,"Error in retrieving run date" );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char *)ptr_fml_Sbuf);
    tpfree((char *)ptr_fml_Rbuf);
    tpfree((char *)ptr_fml_Obuf);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}
	
	SETLEN(c_run_dt);
	SETNULL(c_run_dt);

	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_IS_FLG ,0,(char *)&c_usr_flg, 0);
  i_ferr [ 0 ] = Ferror32;

	if(i_err[0] == -1)
  {
  	fn_errlog( c_ServiceName, "S31050",Fstrerror32(i_ferr[0]),c_err_msg);
    fn_userlog(c_ServiceName,"Error in retrieving user flag" );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char *)ptr_fml_Sbuf);
    tpfree((char *)ptr_fml_Rbuf);
    tpfree((char *)ptr_fml_Obuf);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}
	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName,"User flag is :%c:",c_usr_flg );
	}

  i_err[0]= Fget32(ptr_fml_Ibuf, FFO_XCHNG_CD,0,(char *)c_xchng_cd, 0);
  i_ferr [ 0 ] = Ferror32;
	if(i_err[0] == -1)
  {
  	fn_errlog( c_ServiceName, "S31055",Fstrerror32(i_ferr[0]),c_err_msg);
    fn_userlog(c_ServiceName,"Error in retrieving Exchange code" );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char *)ptr_fml_Sbuf);
    tpfree((char *)ptr_fml_Rbuf);
    tpfree((char *)ptr_fml_Obuf);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}

  i_err[0]= Fget32(ptr_fml_Ibuf, FFO_USER_INDEX,0,(char *)&d_usridx_spot_val, 0);
  i_ferr [ 0 ] = Ferror32;

	if(i_err[0] == -1)
  {
  	fn_errlog( c_ServiceName, "S31060",Fstrerror32(i_ferr[0]),c_err_msg);
    fn_userlog(c_ServiceName,"Error in retrieving User index" );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char *)ptr_fml_Sbuf);
    tpfree((char *)ptr_fml_Rbuf);
    tpfree((char *)ptr_fml_Obuf);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}

	/***	Ver	1.1	Starts	***/

	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_INTERVAL,0,(char *)&l_interval, 0);
  i_ferr [ 0 ] = Ferror32;
	
  if(i_err[0] == -1 && i_ferr[0] != FNOTPRES )
  {
    fn_errlog( c_ServiceName, "S31065",Fstrerror32(i_ferr[0]),c_err_msg);
    fn_userlog(c_ServiceName,"Error in retrieving User index" );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char *)ptr_fml_Sbuf);
    tpfree((char *)ptr_fml_Rbuf);
    tpfree((char *)ptr_fml_Obuf);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	
  if ( i_ferr[0] == FNOTPRES )
	{
		l_interval	=	INTERVAL;

	}

  fn_userlog(c_ServiceName," l_run_no Is :%ld: ",l_run_no );
  fn_userlog(c_ServiceName," c_run_dt  Is :%s: ",c_run_dt.arr);

	/*** Ver 1.2 -- copying tradedate as system date ***/

  EXEC SQL
    SELECT  TO_CHAR( SYSDATE, 'DD-Mon-YYYY hh24:mi:ss' )
    INTO    :c_sysdate
    FROM    dual;

  if(SQLCODE != 0)
  {
		fn_errlog( c_ServiceName, "S31070",Fstrerror32(i_ferr[0]),c_err_msg);
    fn_userlog(c_ServiceName,"Error in retrieving User index" );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char *)ptr_fml_Sbuf);
    tpfree((char *)ptr_fml_Rbuf);
    tpfree((char *)ptr_fml_Obuf);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	strcpy (c_run_dt.arr,c_sysdate.arr);                  
  fn_userlog(c_ServiceName," c_run_dt after copying   Is :%s: ",c_run_dt.arr);

	/*** Ver 1.2 Ends ***/

	EXEC SQL
    SELECT FRC_FO_SPOT_INTERVAL 
		INTO   :l_interval 
		FROM    FRC_FO_RSK_CUMLTV
		WHERE   FRC_FO_RUN_NO         = :l_run_no
    /*** AND     FRC_FO_TRD_DT    = :c_run_dt Commented In Ver 1.2 ***/
    AND     TRIM(FRC_FO_TRD_DT)   = TRIM(:c_run_dt)   /*** Ver 1.2 ***/
    AND     FRC_FO_XCHNG_CD       = :c_xchng_cd       /*** Ver 1.2 ***/
    AND     ROWNUM <2;	

		/*** if ( SQLCODE != 0 ) Commented In  Ver 1.2 ***/
		if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
    {
     fn_errlog( c_ServiceName, "S31075",SQLMSG,c_err_msg);
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     tpfree((char *)ptr_fml_Sbuf);
     tpfree((char *)ptr_fml_Rbuf);
     tpfree((char *)ptr_fml_Obuf);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }	
	

	strcpy(c_user_id,"system");
  l_session_id = 0L;

	i_err[0] = Fadd32(ptr_fml_Sbuf,FFO_USR_ID, (char *)c_user_id , 0);
 	i_ferr [ 0 ] = Ferror32;
  i_err[1] = Fadd32(ptr_fml_Sbuf,FFO_SSSN_ID, (char *)&l_session_id , 0);
 	i_ferr [ 1 ] = Ferror32;
  i_err[2] = Fadd32(ptr_fml_Sbuf,FFO_EBA_MTCH_ACT_NO, (char *)c_match_acc.arr, 0);
 	i_ferr [ 2 ] = Ferror32;
  i_err[3] = Fadd32(ptr_fml_Sbuf,FFO_TRD_DT, (char *)c_run_dt.arr, 0);
 	i_ferr [ 3 ] = Ferror32;
  i_err[4] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)c_rout_crt , 0);
 	i_ferr [ 4 ] = Ferror32;
	
	for(j=0;j<5;j++)
  {
  	if(i_err[j] == -1)
    {
    	fn_errlog( c_ServiceName, "S31080",Fstrerror32(i_ferr[j]),c_err_msg);
      fn_userlog(c_ServiceName,"Error in Fadd32 field %d",j );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpfree((char *)ptr_fml_Sbuf);
			tpfree((char *)ptr_fml_Rbuf);
			tpfree((char *)ptr_fml_Obuf);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   	}
 	}
	
  fn_userlog(c_ServiceName,"Calling service SFO_VIEW_LIMITS ");
	i_returncode = tpcall("SFO_VIEW_LIMITS",(char*)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&li_recvbuf,0);
  if(i_returncode == -1)
  {
  	Fget32(ptr_fml_Rbuf, FFO_ERR_MSG, 0, c_err_msg,0);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_errlog( c_ServiceName, "Error while calling service SFO_VIEW_LIMITS", FMLMSG, c_err_msg  );
		tpfree((char *)ptr_fml_Sbuf);
		tpfree((char *)ptr_fml_Rbuf);
		tpfree((char *)ptr_fml_Obuf);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	
	i_err[0] = Fget32(ptr_fml_Rbuf,FFO_LIMIT,0,(char *)&d_free_limit,0);
 	i_ferr [ 0 ] = Ferror32;
	i_err[1] = Fget32(ptr_fml_Rbuf,FFO_BAL_AMT,0,(char *)&d_alctd_amt,0);
 	i_ferr [ 1 ] = Ferror32;
	i_err[2] = Fget32(ptr_fml_Rbuf,FFO_ORD_AMT_BLKD,0,(char *)&d_bft_amt,0);
 	i_ferr [ 2 ] = Ferror32;
	i_err[3] = Fget32(ptr_fml_Rbuf,FFO_PLG_AMT,0,(char *)&d_plg_amt,0);
 	i_ferr [ 3 ] = Ferror32;

	for(j=0;j<4;j++)
  {
  	if(i_err[j] == -1)
    {
    	fn_errlog( c_ServiceName, "S31085",Fstrerror32(i_ferr[j]),c_err_msg);
      fn_userlog(c_ServiceName,"Error in retrieving limits ,Fget32 field %d",j);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpfree((char *)ptr_fml_Sbuf);
			tpfree((char *)ptr_fml_Rbuf);
			tpfree((char *)ptr_fml_Obuf);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   	}
 	}
	
  d_grs_allctn = d_alctd_amt + d_bft_amt + d_plg_amt;

	if(DEBUG_MSG_LVL_3)
  {	
  	fn_userlog(c_ServiceName,"Match account is :%s:",c_match_acc.arr);
  	fn_userlog(c_ServiceName,"User Id  is :%s:",c_user_id );
  	fn_userlog(c_ServiceName,"Session Id  is :%ld:",l_session_id );
  	fn_userlog(c_ServiceName,"Run date is :%s:",c_run_dt.arr);
  	fn_userlog(c_ServiceName,"Gross allocation is :%lf:",d_grs_allctn );
  	fn_userlog(c_ServiceName,"Allocated amount is :%lf:",d_alctd_amt );
  	fn_userlog(c_ServiceName,"Blocked amount is :%lf:",d_bft_amt );
  	fn_userlog(c_ServiceName,"Pledged amount is :%lf:",d_plg_amt );
	}
	tpfree((char *)ptr_fml_Sbuf);
  ptr_fml_Sbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  if (ptr_fml_Sbuf == NULL)
 	{
  	fn_errlog(c_ServiceName, "S31090", TPMSG, c_err_msg);
   	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
		tpfree((char *)ptr_fml_Obuf);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
  }
	Finit32(ptr_fml_Sbuf, Fsizeof32(ptr_fml_Sbuf));	

	tpfree((char *)ptr_fml_Rbuf);
  ptr_fml_Rbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  if (ptr_fml_Rbuf == NULL)
 	{
  	fn_errlog(c_ServiceName, "S31095", TPMSG, c_err_msg);
   	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
		tpfree((char *)ptr_fml_Obuf);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
  }
	Finit32(ptr_fml_Rbuf, Fsizeof32(ptr_fml_Rbuf));	

	MEMSET(c_prev_undrlyng);
	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_UNDRLYNG ,0,(char *)c_prev_undrlyng, 0);
  i_ferr [ 0 ] = Ferror32;
	
  if ( i_err[ 0 ] == -1 )
  {
  	fn_errlog( c_ServiceName, "S31100",Fstrerror32(i_ferr[0]),c_err_msg);
    fn_userlog(c_ServiceName,"Error in retrieving prev underlying ");
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpfree((char *)ptr_fml_Sbuf);
		tpfree((char *)ptr_fml_Rbuf);
		tpfree((char *)ptr_fml_Obuf);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  fn_userlog(c_ServiceName,"++++++++c_prev_undrlyng before converting is :%s:",c_prev_undrlyng);

	uppercase_calc(c_prev_undrlyng);

  fn_userlog(c_ServiceName,"++++++++c_prev_undrlyng after converting is :%s:",c_prev_undrlyng);

	i_exit_stts = DONT_EXIT;	

	l_req_buff_sz = (2*sizeof(c_status_flg))+
									(2*sizeof(c_spl_flg))+
									(2*sizeof(c_prdct_typ))+
									(2*sizeof(c_undrlyng))+
									(2*sizeof(c_expry_dt))+
									(2*sizeof(c_opt_typ))+
									(2*sizeof(c_exer_typ))+
									(2*sizeof(d_strk_prc))+
									(2*sizeof(l_quantity))+
									(2*sizeof(c_ordr_flw))+
									(2*sizeof(c_cntrct_pnl))+
									(2*sizeof(d_mrgn_blocked))+
									(2*sizeof(d_currnt_premium))+
									(2*sizeof(d_opt_oblgtn))+
									(2*sizeof(l_out_of_poc_cntrct_at))+
									(2*sizeof(l_out_of_poc_undrlyng_up))+
									(2*sizeof(l_out_of_poc_undrlyng_dwn))+
									(2*sizeof(l_netout_of_poc_atup))+
									(2*sizeof(l_netout_of_poc_atdwn))+
									(2*sizeof(l_out_of_poc_total_up))+
									(2*sizeof(l_out_of_poc_total_dwn))+
									(2*sizeof(c_opoc_cntrct))+
									sizeof(c_match_acc)+
									sizeof(c_xchng_cd)+
									sizeof(d_grs_allctn)+
									sizeof(d_free_limit)+
									sizeof(l_num_levels)+
									sizeof(l_interval)+
									sizeof(d_init_spot);
	
	while( i_exit_stts == DONT_EXIT )
	{
		if( Fneeded32( 1, l_req_buff_sz ) > Funused32( ptr_fml_Obuf ) )
    {
    	fn_userlog(c_ServiceName,"SPACE NEEDED :%ld: SPACE AVAILABLE IN BUFFER :%ld:",
                                Fneeded32( 1, l_req_buff_sz ),
                                Funused32( ptr_fml_Obuf ));

      ptr_fml_Obuf = ( FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
                     ( Fsizeof32(ptr_fml_Obuf) + (i*l_req_buff_sz )));

      if (ptr_fml_Obuf == NULL)
      {
      	fn_errlog(c_ServiceName, "S31105", TPMSG, c_err_msg);
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
      }
      fn_userlog(c_ServiceName,"SPACE AVAILABLE AFTER REALLOCATION :%ld:", Fsizeof32(ptr_fml_Obuf));
  	}

		
		MEMSET(d_arr_cntrct_opoc);
		MEMSET(d_arr_cntrct_pnl);
		MEMSET(c_undrlyng);

		i_err[0]= Fget32(ptr_fml_Ibuf, FFO_UNDRLYNG ,i_cnt,(char *)c_undrlyng, 0);
    i_ferr[0] = Ferror32;
		if( i_err[0] == -1 && i_ferr[0] == FNOTPRES )
		{
			i_exit_stts = EXIT;
    	fn_userlog(c_ServiceName,"*********All records processed succesfully**********");
		}

    fn_userlog(c_ServiceName,"++++++++c_undrlyng before converting is :%s:",c_undrlyng);

		uppercase_calc(c_undrlyng);
    fn_userlog(c_ServiceName,"++++++++c_undrlyng after converting is :%s:",c_undrlyng);

		fn_userlog(c_ServiceName,"BEFORE IF");

		/* Loop for adding underlying group total */	
		if((strcmp(c_prev_undrlyng,c_undrlyng) != 0) || (i_exit_stts == EXIT) )
		{
			c_status_flg = 'C';	
			c_prdct_typ = '*';	
			strcpy(c_expry_dt.arr,"-");
			c_opt_typ = '*';	
			c_exer_typ = '-';	
			c_prc_indctr	=	'*';			/***	Ver	1.1	***/
			d_strk_prc = 0.0;	
			c_ordr_flw = '-';	
			d_mrgn_blocked = 0.0;	
			d_currnt_premium = 0.0;	
      MEMSET(c_temp_var);

			/********** Check if there is any case of spread margin to be deducted from group margin *********/
			EXEC SQL
			DECLARE cur_sprd_mrgn CURSOR FOR
			SELECT  FRB_FO_MTCH_ACC,
							FRB_FO_UNDRLYNG,
							FRB_FO_CNTRCT_TAG,
							FRB_FO_MRGN_BLKD,
							count(*)
			FROM FRB_FO_RSK_BRKUP
			WHERE FRB_FO_MTCH_ACC 		= :c_match_acc
			/*** AND FRB_FO_TRD_DT 		= :c_run_dt   COmmented In Ver 1.2 ***/
			AND TRIM(FRB_FO_TRD_DT)  	= TRIM(:c_run_dt)          /*** Ver 1.2 ***/
			AND FRB_FO_XCHNG_CD 			= :c_xchng_cd      				 /*** Ver 1.2 ***/
			AND FRB_FO_RUN_NO 				= :l_run_no
			AND TRIM(FRB_FO_UNDRLYNG) = :c_prev_undrlyng
			AND FRB_FO_PRD_TYP = decode(:c_prdct_typ,'F','F','O','O',FRB_FO_PRD_TYP)
			HAVING COUNT(*) > 1
			GROUP BY FRB_FO_MTCH_ACC,FRB_FO_UNDRLYNG,FRB_FO_CNTRCT_TAG ,FRB_FO_MRGN_BLKD;

			EXEC SQL OPEN cur_sprd_mrgn;

			if ( SQLCODE != 0 )
			{
				fn_errlog( c_ServiceName, "S31110",SQLMSG,c_err_msg);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpfree((char *)ptr_fml_Sbuf);
				tpfree((char *)ptr_fml_Rbuf);
				tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			d_total_sprd_mrgn = 0.0;

			while(1)
      {
				d_sprd_mrgn = 0.0;
      	EXEC SQL
        FETCH cur_sprd_mrgn
        INTO  :c_sprd_match_acc,
         			:c_sprd_undrlyng,
              :c_sprd_tag,
              :d_sprd_mrgn,
              :l_cnt;

        if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
        {
        	fn_errlog( c_ServiceName, "S31115",SQLMSG,c_err_msg);
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpfree((char *)ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if ( SQLCODE == NO_DATA_FOUND)
        {
          fn_userlog(c_ServiceName,"Total Spread margin to be deducted is :%lf: ",d_total_sprd_mrgn );
          break;
        }

        fn_userlog(c_ServiceName,"Spread margin on :%s: is :%lf: ",c_sprd_undrlyng,d_sprd_mrgn );
        d_total_sprd_mrgn = d_total_sprd_mrgn+d_sprd_mrgn;

      }
      EXEC SQL CLOSE cur_sprd_mrgn;
      fn_userlog(c_ServiceName,"Margin before spread deduction is :%lf:",d_grp_mrgn_blocked);
      d_grp_mrgn_blocked = d_grp_mrgn_blocked - d_total_sprd_mrgn;
      fn_userlog(c_ServiceName,"Margin after spread deduction is :%lf:",d_grp_mrgn_blocked);
						
			/*************************************************************************************************/


			for (i = 0 ; i < NUM_OF_LEVELS ; i++ )
			{
				d_out_of_pocket_by = 0.0;
    		if( d_arr_undrlyng_total[i] < 0)
    		{
      		d_out_of_pocket_by = d_arr_undrlyng_total[i]+d_grp_mrgn_blocked+d_grp_opt_oblgtn;
      		if(d_out_of_pocket_by > 0 )
      		{
        		d_out_of_pocket_by = 0.0;
      		}
    		}
    		d_arr_undrlyng_opoc[i]=d_out_of_pocket_by;
		
				sprintf(c_temp_var,"%0.2lf%c",d_arr_undrlyng_total[i],c_delimiter);
      	strcat(c_undrlyng_pnl,c_temp_var);
      	MEMSET(c_temp_var);
			
				sprintf(c_temp_var,"%0.2lf%c",d_arr_undrlyng_opoc[i],c_delimiter);
      	strcat(c_opoc_undrlyng,c_temp_var);
      	MEMSET(c_temp_var);
				
				
				if (d_arr_undrlyng_opoc[i] < 0 )
      	{
					if(l_out_of_poc_undrlyng_at == 0)
					{
						l_out_of_poc_undrlyng_at  =  d_usridx_spot_val + (i*l_interval);
					}
				}
			}
				
			i_upcnt=0;
      i_dwncnt=0;
			l_out_of_poc_undrlyng_dwn = 0;
			l_out_of_poc_undrlyng_up  = 0;

      l_nifty_spot = d_idx_spot_val;

      d_levels[0]   = d_usridx_spot_val;

      for(k = 1 ; k < 10 ; k++)
      {
       d_levels[k]= d_levels[k-1] + l_interval ;
      }

      for( k = 0 ; k < 10 ; k++)
      {
       if(d_levels[k]>l_nifty_spot)
       {
        i_upcnt = k;
        break;
       }
      }

      i_dwncnt = i_upcnt - 1 ;

      if( i_upcnt == 0)
      {
       if( l_nifty_spot > d_levels[9] )
       {
        i_upcnt  = 10;
        i_dwncnt = 9;
       }
      }


			for ( i_net_dwn = i_dwncnt  ; i_net_dwn >= 0  ; i_net_dwn -- )
      {
				d_out_of_pocket_by = 0.0;

        if( d_arr_undrlyng_total[i_net_dwn] < 0)
        {
          d_out_of_pocket_by = d_arr_undrlyng_total[i_net_dwn]+d_grp_mrgn_blocked+d_grp_opt_oblgtn;

          if(d_out_of_pocket_by > 0 )
          {
            d_out_of_pocket_by = 0.0;
          }
        }

        d_arr_undrlyng_opoc[i_net_dwn]	=	d_out_of_pocket_by;

        if (d_arr_undrlyng_opoc[i_net_dwn] < 0 )
        {
          if(l_out_of_poc_undrlyng_dwn == 0)
          {
            l_out_of_poc_undrlyng_dwn  =  d_usridx_spot_val + (i_net_dwn	*	l_interval);
          }
        }
	
      }

      for ( i_net_up = i_upcnt ; i_net_up <= 9 ; i_net_up ++  )
      {
				d_out_of_pocket_by = 0.0;

        if( d_arr_undrlyng_total[i_net_up] < 0)
        {
          d_out_of_pocket_by = d_arr_undrlyng_total[i_net_up]	+	d_grp_mrgn_blocked	+	d_grp_opt_oblgtn;

          if(d_out_of_pocket_by > 0 )
          {
            d_out_of_pocket_by = 0.0;
          }
        }

        d_arr_undrlyng_opoc[i_net_up]  = d_out_of_pocket_by;

        if (d_arr_undrlyng_opoc[i_net_up] < 0 )
        {
          if(l_out_of_poc_undrlyng_up == 0)
          {
            l_out_of_poc_undrlyng_up  =  d_usridx_spot_val + (i_net_up * l_interval);
          }
        }
      }

				
			NULLTERM(c_undrlyng_pnl);
			NULLTERM(c_opoc_undrlyng);
	 		if(DEBUG_MSG_LVL_3)
    	{
      	fn_userlog(c_ServiceName,"**************Adding group total for :%s:*************",c_prev_undrlyng);
      	fn_userlog(c_ServiceName,"c_status_flg is :%c:",c_status_flg);
      	fn_userlog(c_ServiceName,"c_spl_flg is :%c:",c_spl_flg);
      	fn_userlog(c_ServiceName,"c_prdct_typ is :%c:",c_prdct_typ);
      	fn_userlog(c_ServiceName,"c_expry_dt.arr is :%s:",c_expry_dt.arr );
      	fn_userlog(c_ServiceName,"c_opt_typ is :%c:",c_opt_typ);
      	fn_userlog(c_ServiceName,"c_exer_typ is :%c:",c_exer_typ );
      	fn_userlog(c_ServiceName,"c_undrlyng is :%s:",i_cnt,c_undrlyng);
      	fn_userlog(c_ServiceName,"d_strk_prc is :%lf:",d_strk_prc );
      	fn_userlog(c_ServiceName,"l_group_quantity is :%ld:",l_group_quantity );
      	fn_userlog(c_ServiceName,"d_grp_opt_oblgtn is :%lf:",d_grp_opt_oblgtn );
      	fn_userlog(c_ServiceName,"c_undrlyng_pnl is :%s:",c_undrlyng_pnl );
      	fn_userlog(c_ServiceName,"c_ordr_flw is :%c:",i_cnt,c_ordr_flw );
      	fn_userlog(c_ServiceName,"d_grp_mrgn_blocked is :%lf:",d_grp_mrgn_blocked);
      	fn_userlog(c_ServiceName,"d_currnt_premium is :%lf:",d_currnt_premium );
      	fn_userlog(c_ServiceName,"c_opoc_undrlyng is :%s:",c_opoc_undrlyng );
      	fn_userlog(c_ServiceName,"l_out_of_poc_undrlyng_at is :%ld:",l_out_of_poc_undrlyng_at );
      	fn_userlog(c_ServiceName,"******************************************************");
    	}

    	i_err[1]= Fadd32( ptr_fml_Obuf, FFO_STATUS_FLG, (char *)&c_status_flg, 0);
    	i_ferr [ 1 ] = Ferror32;
    	i_err[1]= Fadd32( ptr_fml_Obuf, FFO_SPL_FLG, (char *)&c_spl_flg, 0);
    	i_ferr [ 1 ] = Ferror32;
    	i_err[0]= Fadd32( ptr_fml_Obuf, FFO_PRDCT_TYP, (char *)&c_prdct_typ, 0);
    	i_ferr [ 0 ] = Ferror32;
			i_err[1]= Fadd32( ptr_fml_Obuf, FFO_UNDRLYNG, (char *)c_prev_undrlyng, 0 );
  		i_ferr [ 1 ] = Ferror32;
    	i_err[2]= Fadd32( ptr_fml_Obuf, FFO_EXPRY_DT, (char *)c_expry_dt.arr, 0);
    	i_ferr [ 2 ] = Ferror32;
    	i_err[3]= Fadd32( ptr_fml_Obuf, FFO_OPT_TYP, (char *)&c_opt_typ, 0);
    	i_ferr [ 3 ] = Ferror32;
    	i_err[4]= Fadd32( ptr_fml_Obuf, FFO_EXER_TYP, (char *)&c_exer_typ, 0);
    	i_ferr [ 4 ] = Ferror32;
    	i_err[5]= Fadd32( ptr_fml_Obuf, FFO_STRIKE_PRC, (char *)&d_strk_prc, 0);
    	i_ferr [ 5 ] = Ferror32;

    	i_err[6]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_QTY,	(char *)&l_group_quantity, 0);
    	i_ferr [ 6 ] = Ferror32;
			i_err[7]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_VAL, (char *)&d_grp_opt_oblgtn , 0 );
  		i_ferr [ 7 ] = Ferror32;
			l_total_quantity = l_total_quantity + l_group_quantity;
			d_total_opt_oblgtn = d_total_opt_oblgtn + d_grp_opt_oblgtn;
			l_group_quantity = 0;
			d_grp_opt_oblgtn = 0.0;

			i_err[8]= Fadd32( ptr_fml_Obuf, FFO_MAX_PROFIT,(char *)c_undrlyng_pnl, 0 );
  		i_ferr [ 8 ] = Ferror32;
			MEMSET(d_arr_undrlyng_total);

    	i_err[9]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_FLW, (char *)&c_ordr_flw, 0);
    	i_ferr [ 9 ] = Ferror32;
			i_err[10]= Fadd32( ptr_fml_Obuf, FFO_ADD_MRGN_AMT, (char *)&d_grp_mrgn_blocked, 0 );
  		i_ferr [ 10 ] = Ferror32;
			d_total_mrgn_blocked = d_total_mrgn_blocked + d_grp_mrgn_blocked;
			d_grp_mrgn_blocked = 0.0;

			i_err[11]= Fadd32( ptr_fml_Obuf,  FFO_EFF_LTP, (char *)&d_currnt_premium , 0 );
  		i_ferr [ 11 ] = Ferror32;

			i_err[12]	 = Fadd32( ptr_fml_Obuf,FFO_PRC_INDCTR, (char *)&c_prc_indctr, 0 );			/***	Ver	1.1	***/
      i_ferr[12] = Ferror32;			 /***  Ver 1.1 ***/

			/*** Ver 1.2 Starts ***/
		
			i_err[13]  = Fadd32( ptr_fml_Obuf,FFO_BOARD_LOT_QTY, (char *)&l_lot_size, 0 );     
      i_ferr[13] = Ferror32;
	
			i_err[14]  = Fadd32( ptr_fml_Obuf,FFO_XCHNG_CD, (char *)c_xchng_cd, 0 );   
      i_ferr[14] = Ferror32;

			/*** Ver 1.2 Ends   ***/

			/*** for(j=0;j<13;j++)			 ***  Ver 1.1 *** commented In Ver 1.2 ***/
			for(j=0;j<15;j++)			 /***  Ver 1.2 ***/
    	{
      	if(i_err[j] == -1)
      	{
       		fn_errlog( c_ServiceName, "S31120",Fstrerror32(i_ferr[j]),c_err_msg);
       		fn_userlog(c_ServiceName,"Error in adding output to FML,Fadd32 field %d in record no %d",j,i_cnt );
       		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       		tpfree((char *)ptr_fml_Sbuf);
       		tpfree((char *)ptr_fml_Rbuf);
       		tpfree((char *)ptr_fml_Obuf);
       		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
    	}

			if(c_usr_flg != 'C')
			{
				i_err[0]= Fadd32( ptr_fml_Obuf, FFO_BRK_EVN_PT, (char *)c_opoc_undrlyng, 0 );
  			i_ferr [ 0 ] = Ferror32;

				i_err[1]= Fadd32( ptr_fml_Obuf,FFO_HGH_INDX_VAL , (char *)&l_out_of_poc_undrlyng_up, 0 );				/***	Ver	1.1	***/
  			i_ferr [ 1 ] = Ferror32;

				i_err[2]= Fadd32( ptr_fml_Obuf, FFO_LOW_INDX_VAL , (char *)&l_out_of_poc_undrlyng_dwn, 0 );			/***  Ver 1.1 ***/
  			i_ferr [ 2 ] = Ferror32;

				for(j=0;j<3;j++)
    		{
      		if(i_err[j] == -1)
      		{
       			fn_errlog( c_ServiceName, "S31125",Fstrerror32(i_ferr[j]),c_err_msg);
       			fn_userlog(c_ServiceName,"Error in adding output to FML,Fadd32 field %d in record no %d",j,i_cnt );
       			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       			tpfree((char *)ptr_fml_Sbuf);
       			tpfree((char *)ptr_fml_Rbuf);
       			tpfree((char *)ptr_fml_Obuf);
       			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      		}
				}
			}
			MEMSET(d_arr_undrlyng_opoc);
			l_out_of_poc_undrlyng_at = 0;
		
			l_out_of_poc_undrlyng_up	=	0;			/***	Ver	1.1	***/
			l_out_of_poc_undrlyng_dwn	=	0;			/***	Ver	1.1	***/

		} /* End of loop for adding underlying group total */	
		
		fn_userlog(c_ServiceName,"After IF");

		if( i_exit_stts == EXIT)
		{
			
		  fn_userlog(c_ServiceName," i_exit_stts == EXIT Codition");
			break;
		}

		fn_userlog(c_ServiceName,"After IF 1");


    i_err[1]= Fget32(ptr_fml_Ibuf, FFO_CTGRY_INDSTK,i_cnt,(char *)&c_ctgry_indstk, 0);
    i_ferr [ 1 ] = Ferror32;

    i_err[2]= Fget32(ptr_fml_Ibuf, FFO_PRDCT_TYP,i_cnt,(char *)&c_prdct_typ, 0);
    i_ferr [ 2 ] = Ferror32;

		MEMSET(c_expry_dt);
    i_err[3]= Fget32(ptr_fml_Ibuf, FFO_EXPRY_DT,i_cnt,(char *)c_expry_dt.arr, 0);
    i_ferr [ 3 ] = Ferror32;

		fn_userlog(c_ServiceName,"After IF 2");
		fn_userlog(c_ServiceName,"c_xchng_cd	Is :%s:",c_xchng_cd);
		fn_userlog(c_ServiceName,"c_prdct_typ	Is :%c:",c_prdct_typ);
		fn_userlog(c_ServiceName,"c_undrlyng Is :%s:",c_undrlyng);
		fn_userlog(c_ServiceName,"c_ctgry_indstk Is :%c:",c_ctgry_indstk);

    /*** Commented in Ver 1.4 ***

		EXEC SQL
			SELECT	FCM_UNDRLYNG,
							FCM_INDSTK
			INTO		:c_undrlying,
							:c_indstk
			FROM		FCM_FO_CNTRCT_MSTR
			WHERE		FCM_XCHNG_CD	=	:c_xchng_cd			***	Ver	1.1	***
			AND			FCM_PRDCT_TYP	=	:c_prdct_typ		
			AND			FCM_UNDRLYNG	=	:c_undrlyng
			AND			FCM_INDSTK		=	:c_ctgry_indstk
			AND			rownum < 2	;
    ***/
    /*** Ver 1.4 Starts ***/

     EXEC SQL
      SELECT  FTQ_UNDRLYNG,
              FTQ_INDSTK
      INTO    :c_undrlying,
              :c_indstk
      FROM    FTQ_FO_TRD_QT     
      WHERE   FTQ_XCHNG_CD  = :c_xchng_cd   
      AND     FTQ_PRDCT_TYP = :c_prdct_typ
      AND     FTQ_UNDRLYNG  = :c_undrlyng
      AND     FTQ_INDSTK    = :c_ctgry_indstk
      AND     rownum < 2  ;

    /*** Ver 1.4 Ends   ***/
		if ( SQLCODE != 0 )
		{
			if(SQLCODE == NO_DATA_FOUND)
			{
				fn_errlog( c_ServiceName, "B29027",DEFMSG,c_err_msg);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpfree((char *)ptr_fml_Sbuf);
  			tpfree((char *)ptr_fml_Rbuf);
  			tpfree((char *)ptr_fml_Obuf);
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			
			fn_errlog( c_ServiceName, "S31130",SQLMSG,c_err_msg);
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpfree((char *)ptr_fml_Sbuf);
			tpfree((char *)ptr_fml_Rbuf);
			tpfree((char *)ptr_fml_Obuf);
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

   if(DEBUG_MSG_LVL_0)
   {
    fn_userlog(c_ServiceName,"FTQ Underlying :%s",c_undrlying);
    fn_userlog(c_ServiceName,"FTQ Index/Stock :%c",c_indstk);
   } 

		if(strcmp(c_expry_dt.arr,"NEAR") == 0)
		{
      /*** Commented in Ver 1.4 ***
			EXEC SQL 
				SELECT	MIN(FCM_EXPRY_DT)
				INTO 		:c_expry_dt
				FROM 		FCM_FO_CNTRCT_MSTR 
				WHERE		FCM_XCHNG_CD  = :c_xchng_cd     ***  Ver 1.1 ***
				AND 		FCM_PRDCT_TYP ='F'
				AND		 	FCM_UNDRLYNG = :c_undrlyng
				AND 		FCM_QT_TRDNG_FLG ='T' ;
      ***/
      /*** Ver 1.4 Starts ***/

     EXEC SQL
        SELECT  MIN(FTQ_EXPRY_DT)
        INTO    :c_expry_dt
        FROM    FTQ_FO_TRD_QT      
        WHERE   FTQ_XCHNG_CD  = :c_xchng_cd    
        AND     FTQ_PRDCT_TYP ='F'
        AND     FTQ_UNDRLYNG = :c_undrlyng
        AND     FTQ_QT_TRDNG_FLG ='T' ;
  
      /*** Ver 1.4 Ends   ***/
			if ( SQLCODE != 0 )
    	{
      	fn_errlog( c_ServiceName, "S31135",SQLMSG,c_err_msg);
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpfree((char *)ptr_fml_Sbuf);
				tpfree((char *)ptr_fml_Rbuf);
				tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

      /*** Commented in Ver 1.4 ***
			EXEC SQL                 *** Ver 1.2 ***
        SELECT  FCM_LOT_SZ                      
        INTO    :l_lot_sz                      
        FROM    FCM_FO_CNTRCT_MSTR
        WHERE   FCM_XCHNG_CD  = :c_xchng_cd  
        AND     FCM_PRDCT_TYP ='F'
        AND     FCM_UNDRLYNG = :c_undrlyng
        AND     FCM_QT_TRDNG_FLG ='T'
        AND     FCM_EXPRY_DT =  :c_expry_dt ;
      ***/
      /*** Ver 1.4 Starts ***/

      EXEC SQL                
        SELECT  FTQ_MIN_LOT_QTY
        INTO    :l_lot_sz
        FROM    FTQ_FO_TRD_QT     
        WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
        AND     FTQ_PRDCT_TYP ='F'
        AND     FTQ_UNDRLYNG = :c_undrlyng
        AND     FTQ_QT_TRDNG_FLG ='T'
        AND     FTQ_EXPRY_DT =  :c_expry_dt ;

      /*** Ver 1.4 Ends   ***/

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31140",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpfree((char *)ptr_fml_Sbuf);
        tpfree((char *)ptr_fml_Rbuf);
        tpfree((char *)ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
	
      if(DEBUG_MSG_LVL_0)
      {
       fn_userlog(c_ServiceName,"FTQ Lot Size :%ld:",l_lot_sz);
       fn_userlog(c_ServiceName,"FTQ Near Expiry Date :%s:" ,c_expry_dt.arr);
      }    
	

      fn_userlog(c_ServiceName,"NEAR MONTH EXPIRY FOR :%s: is :%s:",c_undrlyng,c_expry_dt.arr);
			fn_userlog(c_ServiceName,"FAR MONTH EXPIRY  LOT SIZE :%ld:",l_lot_sz );
	
		}
		else if(strcmp(c_expry_dt.arr,"MID") == 0)
		{
      /*** Commented in Ver 1.4 ***
			EXEC SQL 
				SELECT	MIN(FCM_EXPRY_DT)
				INTO 		:c_expry_dt
				FROM 		FCM_FO_CNTRCT_MSTR 
				WHERE		FCM_XCHNG_CD  = :c_xchng_cd     ***  Ver 1.1 ***
				AND 		FCM_PRDCT_TYP ='F'
				AND	 		FCM_UNDRLYNG = :c_undrlyng
				AND 		FCM_QT_TRDNG_FLG ='T'
				AND 		FCM_EXPRY_DT != (	SELECT	MIN(FCM_EXPRY_DT)
		 															FROM 		FCM_FO_CNTRCT_MSTR 
																	WHERE		FCM_XCHNG_CD  = :c_xchng_cd     ***  Ver 1.1 ***
																	AND 		FCM_PRDCT_TYP ='F'
																	AND 		FCM_UNDRLYNG = :c_undrlyng 
																	AND 		FCM_QT_TRDNG_FLG ='T') ;
      ***/
      /*** Ver 1.4 Starts ***/
    
      EXEC SQL
        SELECT  MIN(FTQ_EXPRY_DT)
        INTO    :c_expry_dt
        FROM    FTQ_FO_TRD_QT       
        WHERE   FTQ_XCHNG_CD  = :c_xchng_cd    
        AND     FTQ_PRDCT_TYP ='F'
        AND     FTQ_UNDRLYNG = :c_undrlyng
        AND     FTQ_QT_TRDNG_FLG ='T'
        AND     FTQ_EXPRY_DT != ( SELECT  MIN(FTQ_EXPRY_DT)
                                  FROM    FTQ_FO_TRD_QT
                                  WHERE   FTQ_XCHNG_CD  = :c_xchng_cd  
                                  AND     FTQ_PRDCT_TYP ='F'
                                  AND     FTQ_UNDRLYNG = :c_undrlyng
                                  AND     FTQ_QT_TRDNG_FLG ='T') ;

      /*** Ver 1.4 Ends   ***/

			if ( SQLCODE != 0 )
    	{
      	fn_errlog( c_ServiceName, "S31145",SQLMSG,c_err_msg);
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpfree((char *)ptr_fml_Sbuf);
				tpfree((char *)ptr_fml_Rbuf);
				tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

      /*** Commented in Ver 1.4 ***
			EXEC SQL                     *** Ver 1.2 ***
        SELECT  FCM_LOT_SZ                      
        INTO    :l_lot_sz                     
        FROM    FCM_FO_CNTRCT_MSTR
        WHERE   FCM_XCHNG_CD  = :c_xchng_cd  
        AND     FCM_PRDCT_TYP ='F'
        AND     FCM_UNDRLYNG = :c_undrlyng
        AND     FCM_QT_TRDNG_FLG ='T'
        AND     FCM_EXPRY_DT = :c_expry_dt ; 
      ***/
      /*** Ver 1.4 Starts ***/
   
      EXEC SQL                    
        SELECT  FTQ_MIN_LOT_QTY
        INTO    :l_lot_sz
        FROM    FTQ_FO_TRD_QT     
        WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
        AND     FTQ_PRDCT_TYP ='F'
        AND     FTQ_UNDRLYNG = :c_undrlyng
        AND     FTQ_QT_TRDNG_FLG ='T'
        AND     FTQ_EXPRY_DT = :c_expry_dt ;

      /*** Ver 1.4 Ends   ***/

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31150",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpfree((char *)ptr_fml_Sbuf);
        tpfree((char *)ptr_fml_Rbuf);
        tpfree((char *)ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      fn_userlog(c_ServiceName,"FTQ MID MONTH EXPIRY FOR :%s: is :%s:",c_undrlyng,c_expry_dt.arr);
      fn_userlog(c_ServiceName,"FTQ MID MONTH EXPIRY LOT SIZE :%ld:",l_lot_sz);
		}
		else if(strcmp(c_expry_dt.arr,"FAR") == 0)
		{
      /*** Commented in Ver 1.4 ***
			EXEC SQL 
				SELECT	MAX(FCM_EXPRY_DT)
				INTO 		:c_expry_dt
				FROM 		FCM_FO_CNTRCT_MSTR 
				WHERE		FCM_XCHNG_CD  = :c_xchng_cd    ***  Ver 1.1 ***
				AND 		FCM_PRDCT_TYP ='F'
				AND	 		FCM_UNDRLYNG =:c_undrlyng
				AND 		FCM_QT_TRDNG_FLG ='T' ;
      ***/
      /*** Ver 1.4 Starts ***/

      EXEC SQL
        SELECT  MAX(FTQ_EXPRY_DT)
        INTO    :c_expry_dt
        FROM    FTQ_FO_TRD_QT     
        WHERE   FTQ_XCHNG_CD  = :c_xchng_cd    
        AND     FTQ_PRDCT_TYP ='F'
        AND     FTQ_UNDRLYNG =:c_undrlyng
        AND     FTQ_QT_TRDNG_FLG ='T' ;
  
      /*** Ver 1.4 Ends   ***/
			if ( SQLCODE != 0 )
    	{
      	fn_errlog( c_ServiceName, "S31155",SQLMSG,c_err_msg);
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpfree((char *)ptr_fml_Sbuf);
				tpfree((char *)ptr_fml_Rbuf);
				tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

       /*** Commented in Ver 1.4 ***        
			 EXEC SQL                               *** Ver 1.2 ***
        SELECT  FCM_LOT_SZ                     
        INTO    :l_lot_sz                     
        FROM    FCM_FO_CNTRCT_MSTR
        WHERE   FCM_XCHNG_CD  = :c_xchng_cd    
        AND     FCM_PRDCT_TYP ='F'
        AND     FCM_UNDRLYNG =:c_undrlyng
        AND     FCM_QT_TRDNG_FLG ='T' 
				AND     FCM_EXPRY_DT = :c_expry_dt ;
      ***/
      /*** Ver 1.4 Starts ***/

      EXEC SQL                             
        SELECT  FTQ_MIN_LOT_QTY
        INTO    :l_lot_sz
        FROM    FTQ_FO_TRD_QT     
        WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
        AND     FTQ_PRDCT_TYP ='F'
        AND     FTQ_UNDRLYNG =:c_undrlyng
        AND     FTQ_QT_TRDNG_FLG ='T'
        AND     FTQ_EXPRY_DT = :c_expry_dt ;

      /*** Ver 1.4 Ends   ***/
      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31160",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpfree((char *)ptr_fml_Sbuf);
        tpfree((char *)ptr_fml_Rbuf);
        tpfree((char *)ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      fn_userlog(c_ServiceName,"FTQ FAR MONTH EXPIRY FOR :%s: is :%s:",c_undrlyng,c_expry_dt.arr);
      fn_userlog(c_ServiceName,"FTQ FAR MONTH EXPIRY  LOT SIZE :%ld:",l_lot_sz );
		}
		SETLEN(c_expry_dt);
		SETNULL(c_expry_dt);

    i_err[4]= Fget32(ptr_fml_Ibuf, FFO_OPNPSTN_QTY,i_cnt,(char *)&l_quantity, 0);
    i_ferr [ 4 ] = Ferror32;

    i_err[5]= Fget32(ptr_fml_Ibuf, FFO_OPNPSTN_FLW,i_cnt,(char *)&c_ordr_flw, 0);
    i_ferr [ 5 ] = Ferror32;

    i_err[6]= Fget32(ptr_fml_Ibuf, FFO_BASE_ORD_VAL,i_cnt,(char *)&d_org_opn_val, 0);
    i_ferr [ 6 ] = Ferror32;

    i_err[7]= Fget32(ptr_fml_Ibuf, FFO_SPL_FLG,i_cnt,(char *)&c_spl_flg, 0);
    i_ferr [ 7 ] = Ferror32;

		for(i= 0; i < 8; i++)
    {
      if ( i_err[ i ] == -1 )
      {
      	fn_errlog( c_ServiceName, "S31165",Fstrerror32(i_ferr[i]),c_err_msg);
        fn_userlog(c_ServiceName,"Error in field %d in record no %d",i,i_cnt );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpfree((char *)ptr_fml_Sbuf);
				tpfree((char *)ptr_fml_Rbuf);
				tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

		c_exer_typ = 'E';
		c_opt_typ	= '*';
		d_strk_prc = 0.0;

		if(	c_spl_flg	==	'H'	)			/***	Ver	1.1	***/
		{
			l_quantity	=	l_quantity	*	l_lot_sz;
		}

	 	if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"------------------------------------------------------------------------- ");
      fn_userlog(c_ServiceName,"              Printing INPUT [%d]",i_cnt);
      fn_userlog(c_ServiceName,"------------------------------------------------------------------------- ");
      fn_userlog(c_ServiceName,"Record [%d] : l_run_no is :%ld:",i_cnt,l_run_no);
      fn_userlog(c_ServiceName,"Record [%d] : c_match_acc is :%s:",i_cnt,c_match_acc.arr);
      fn_userlog(c_ServiceName,"Record [%d] : c_run_dt is :%s:",i_cnt,c_run_dt.arr);
      fn_userlog(c_ServiceName,"Record [%d] : c_usr_flg is :%c:",i_cnt,c_usr_flg );
      fn_userlog(c_ServiceName,"Record [%d] : c_xchng_cd is :%s:",i_cnt,c_xchng_cd);
      fn_userlog(c_ServiceName,"Record [%d] : d_usridx_spot_val is :%lf:",i_cnt,d_usridx_spot_val );
      fn_userlog(c_ServiceName,"Record [%d] : c_undrlyng is :%s:",i_cnt,c_undrlyng);
      fn_userlog(c_ServiceName,"Record [%d] : c_ctgry_indstk is :%c:",i_cnt,c_ctgry_indstk );
      fn_userlog(c_ServiceName,"Record [%d] : c_prdct_typ is :%c:",i_cnt,c_prdct_typ );
      fn_userlog(c_ServiceName,"Record [%d] : c_expry_dt is :%s:",i_cnt,c_expry_dt.arr );
      fn_userlog(c_ServiceName,"Record [%d] : l_quantity is :%lf:",i_cnt,l_quantity );
      fn_userlog(c_ServiceName,"Record [%d] : c_ordr_flw is :%c:",i_cnt,c_ordr_flw );
      fn_userlog(c_ServiceName,"Record [%d] : d_org_opn_val is :%lf:",i_cnt,d_org_opn_val );
      fn_userlog(c_ServiceName,"Record [%d] : c_spl_flg is :%c:",i_cnt,c_spl_flg );
      fn_userlog(c_ServiceName,"Record [%d] : l_lot_sz is :%ld:",i_cnt,l_lot_sz);
    }

		if(c_prdct_typ == 'O')
		{
    	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_OPT_TYP,i_cnt,(char *)&c_opt_typ, 0);
    	i_ferr [ 0 ] = Ferror32;

    	i_err[1]= Fget32(ptr_fml_Ibuf, FFO_STRIKE_PRC,i_cnt,(char *)&d_strk_prc, 0);
    	i_ferr [ 1 ] = Ferror32;
			for(i= 0; i < 2; i++)
			{
				if ( i_err[ i ] == -1 )
				{
					fn_errlog( c_ServiceName, "S31170",Fstrerror32(i_ferr[i]),c_err_msg);
					fn_userlog(c_ServiceName,"Error in field %d in record no %d",i,i_cnt );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpfree((char *)ptr_fml_Sbuf);
					tpfree((char *)ptr_fml_Rbuf);
					tpfree((char *)ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}

    	i_err[0]= Fget32(ptr_fml_Ibuf, FFO_EXER_TYP,i_cnt,(char *)&c_exer_typ, 0);
    	i_ferr [ 0 ] = Ferror32;

			if ( i_err[ 0 ] == -1 )
			{
        /*** Commented in Ver 1.4 ***
				EXEC SQL
				SELECT FCM_EXER_TYP
				INTO :c_exer_typ 
				FROM FCM_FO_CNTRCT_MSTR 
				WHERE FCM_XCHNG_CD =:c_xchng_cd 
				AND FCM_PRDCT_TYP =:c_prdct_typ  
				AND FCM_UNDRLYNG =:c_undrlyng 
				AND FCM_INDSTK =:c_ctgry_indstk 
				AND FCM_EXPRY_DT =:c_expry_dt 
				AND FCM_OPT_TYP = :c_opt_typ
				AND FCM_STRK_PRC =:d_strk_prc;
				
        ***/
        /*** Ver 1.4 Starts ***/

        EXEC SQL
        SELECT FTQ_EXER_TYP
        INTO :c_exer_typ
        FROM FTQ_FO_TRD_QT     
        WHERE FTQ_XCHNG_CD =:c_xchng_cd
        AND FTQ_PRDCT_TYP =:c_prdct_typ
        AND FTQ_UNDRLYNG =:c_undrlyng
        AND FTQ_INDSTK =:c_ctgry_indstk
        AND FTQ_EXPRY_DT =:c_expry_dt
        AND FTQ_OPT_TYP = :c_opt_typ
        AND FTQ_STRK_PRC =:d_strk_prc;

        /*** Ver 1.4 Ends   ***/ 
				if( SQLCODE != 0 )
				{
					fn_errlog( c_ServiceName, "S31175",SQLMSG,c_err_msg);
					fn_userlog(c_ServiceName,"Error in field %d in record no %d",i,i_cnt );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpfree((char *)ptr_fml_Sbuf);
					tpfree((char *)ptr_fml_Rbuf);
					tpfree((char *)ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}

		}	

    if(DEBUG_MSG_LVL_0)
    {
     fn_userlog(c_ServiceName," FTQ Exercise Type Is :%c:",c_exer_typ);
    }

	 	if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Record [%d] : c_exer_typ is :%c:",i_cnt,c_exer_typ );
      fn_userlog(c_ServiceName,"Record [%d] : c_opt_typ is :%c:",i_cnt,c_opt_typ );
      fn_userlog(c_ServiceName,"Record [%d] : d_strk_prc is :%lf:",i_cnt,d_strk_prc );
      fn_userlog(c_ServiceName,"------------------------------------------------------------------------- ");
    }

	 	if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Indrajit l_run_no is :%ld:",l_run_no );
      fn_userlog(c_ServiceName,"Indrajit c_run_dt is :%s:",c_run_dt.arr );
      fn_userlog(c_ServiceName,"Indrajit c_xchng_cd is :%s:",c_xchng_cd );
      fn_userlog(c_ServiceName,"Indrajit c_match_acc is :%s:",c_match_acc.arr );
      fn_userlog(c_ServiceName,"Indrajit c_prdct_typ is :%c:",c_prdct_typ );
      fn_userlog(c_ServiceName,"Indrajit c_ctgry_indstk is :%c:",c_ctgry_indstk );
      fn_userlog(c_ServiceName,"Indrajit c_undrlyng is :%s:",c_undrlyng );
      fn_userlog(c_ServiceName,"Indrajit c_expry_dt is :%s:",c_expry_dt.arr );
      fn_userlog(c_ServiceName,"Indrajit c_exer_typ is :%c:",c_exer_typ );
      fn_userlog(c_ServiceName,"Indrajit c_opt_typ is :%c:",c_opt_typ );
      fn_userlog(c_ServiceName,"Indrajit c_spl_flg is :%c:",c_spl_flg );
      fn_userlog(c_ServiceName,"Indrajit d_strk_prc is :%lf:",d_strk_prc );
		}

		if(c_spl_flg == 'C')
		{

			EXEC SQL		
			SELECT NVL(FRB_FO_OPT_OBGLTN,0),NVL(FRB_FO_MRGN_BLKD,0)
			INTO :d_opt_oblgtn,:d_mrgn_blocked
			FROM FRB_FO_RSK_BRKUP
			WHERE	FRB_FO_RUN_NO = :l_run_no 
			/*** AND FRB_FO_TRD_DT =  :c_run_dt  Commented In Ver 1.2 ***/
			AND TRIM(FRB_FO_TRD_DT) =  TRIM(:c_run_dt)       /*** Ver 1.2 ***/
	  	AND	FRB_FO_XCHNG_CD = :c_xchng_cd
			AND FRB_FO_MTCH_ACC = :c_match_acc
			AND FRB_FO_PRD_TYP = :c_prdct_typ
			AND FRB_FO_INDSTK = :c_ctgry_indstk
			AND FRB_FO_UNDRLYNG = :c_undrlyng
			AND FRB_FO_EXPIRY_DT = :c_expry_dt
			AND FRB_FO_EXER_TYP = :c_exer_typ
			AND FRB_FO_OPT_TYP = :c_opt_typ
			AND FRB_FO_STRK_PRC = :d_strk_prc;
		
			if ( SQLCODE != 0 )
    	{
      	fn_errlog( c_ServiceName, "S31180",SQLMSG,c_err_msg);
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpfree((char *)ptr_fml_Sbuf);
				tpfree((char *)ptr_fml_Rbuf);
				tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
		}
		
		if(c_spl_flg != 'C')
		{
			d_opt_oblgtn = 0.0;
			d_mrgn_blocked = 0.0;
		}

	 	if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Record [%d] : d_mrgn_blocked is :%lf:",i_cnt,d_mrgn_blocked );
    	fn_userlog(c_ServiceName,"Record [%d] : d_opt_oblgtn is :%lf:",i_cnt,d_opt_oblgtn );
    }

		/* Interest rates and dividend have been hard coded to 0 as per the new requirements discussed in 
			 the meeting	*/

		d_intrst_rt = 0.0;
		d_dvdnd = 0.0;
		
      	fn_userlog(c_ServiceName," c_prdct_typ Is :%c:",c_prdct_typ);
      	fn_userlog(c_ServiceName," c_ctgry_indstk Is :%c:",c_ctgry_indstk);
      	fn_userlog(c_ServiceName," c_undrlyng Is :%s:",c_undrlyng);
      	fn_userlog(c_ServiceName," c_xchng_cd Is :%s:",c_xchng_cd);
		EXEC SQL		
		SELECT	NVL(FUM_BETA,1)
		INTO 		:d_beta
		FROM 		FUM_FO_UNDRLYNG_MSTR
		WHERE		FUM_PRDCT_TYP = :c_prdct_typ
		AND 		trim(FUM_UNDRLYNG) = :c_undrlyng
		AND		 	trim(FUM_XCHNG_CD) = :c_xchng_cd
		AND 		FUM_CTGRY_INDSTK = :c_ctgry_indstk;

		 
		if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31185",SQLMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpfree((char *)ptr_fml_Sbuf);
			tpfree((char *)ptr_fml_Rbuf);
			tpfree((char *)ptr_fml_Obuf);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	
		if( strcmp(c_xchng_cd,"NFO") == 0)
		{
			strcpy(c_ltq_xchng_cd,"NSE");
			strcpy(c_ltq_underlying,"NIFTY");
		}
		else
		{
			strcpy(c_ltq_xchng_cd,"BSE");
			strcpy(c_ltq_underlying,"BSESEN");
		}

		EXEC SQL		
			SELECT	NVL(LTQ_RT,0) 
			INTO 		:d_idx_spot_val
			FROM 		LTQ_TRD_QT 
			WHERE	 	LTQ_STCK_CD = :c_ltq_underlying
			AND		 	LTQ_XCHNG_CD = :c_ltq_xchng_cd;

		if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31190",SQLMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpfree((char *)ptr_fml_Sbuf);
			tpfree((char *)ptr_fml_Rbuf);
			tpfree((char *)ptr_fml_Obuf);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
			
		/***	Ver	1.1	Starts	***/
		
		
		/***	Ver	1.1	Ends	***/	
		
		
		if(c_usr_flg == 'C')
		{	
    	fn_userlog(c_ServiceName,"d_idx_spot_val is :%lf:",d_idx_spot_val );
    	fn_userlog(c_ServiceName,"l_interval is :%ld:",l_interval );
			d_usridx_spot_val = d_idx_spot_val -(5*l_interval);	
	 		if(DEBUG_MSG_LVL_3)
    	{
      	fn_userlog(c_ServiceName,"Request is from client,moving initial spot level to :%lf:",d_usridx_spot_val );
			}
		}
	
	 	if(DEBUG_MSG_LVL_3)
    {
    	fn_userlog(c_ServiceName,"INPUT	USER INDEX is :%lf:",d_usridx_spot_val );
		}
		
		/*************  Rounding off the index level to the nearest one in the multiple of 100 ************/		
		l_temp_idx = d_usridx_spot_val;
	 	if(DEBUG_MSG_LVL_3)
    {
    	fn_userlog(c_ServiceName,"d_usridx_spot_val is :%lf:",d_usridx_spot_val );
    	fn_userlog(c_ServiceName,"l_temp_idx is :%lf:",l_temp_idx );
		}
		if(l_temp_idx%100 > 50)
		{
			d_usridx_spot_val = d_usridx_spot_val-(l_temp_idx%100)+100;
		}
		else
		{
			d_usridx_spot_val = d_usridx_spot_val-(l_temp_idx%100);
		}
		
		EXEC SQL
    SELECT trunc(:d_usridx_spot_val)
    INTO :d_usridx_spot_val
    FROM DUAL;

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31195",SQLMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_Rbuf);
      tpfree((char *)ptr_fml_Obuf);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

	 	if(DEBUG_MSG_LVL_3)
    {
    	fn_userlog(c_ServiceName,"ROUNDED OFF USER INDEX is :%lf:",d_usridx_spot_val );
		}
		
		EXEC SQL		
		SELECT	NVL(LTQ_RT,0) 
		INTO 		:d_stck_spot_val
		FROM 		LTQ_TRD_QT 
		 WHERE		LTQ_STCK_CD = :c_undrlyng  
		AND 		LTQ_XCHNG_CD = :c_ltq_xchng_cd;

		if ( SQLCODE != 0 )
		{
			fn_errlog( c_ServiceName, "S31200",SQLMSG,c_err_msg);
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpfree((char *)ptr_fml_Sbuf);
			tpfree((char *)ptr_fml_Rbuf);
			tpfree((char *)ptr_fml_Obuf);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		/*** Ver 1.1 Commented Starts 
		EXEC SQL		
		SELECT NVL(FTQ_LST_TRD_PRC,0)
		INTO :d_currnt_premium
		FROM FTQ_FO_TRD_QT
		WHERE FTQ_XCHNG_CD = :c_xchng_cd
		AND FTQ_PRDCT_TYP = :c_prdct_typ
		AND FTQ_UNDRLYNG = :c_undrlyng
		AND FTQ_INDSTK = :c_ctgry_indstk
		AND FTQ_EXPRY_DT = :c_expry_dt
		AND FTQ_EXER_TYP = :c_exer_typ
		AND FTQ_OPT_TYP = :c_opt_typ
		AND FTQ_STRK_PRC = :d_strk_prc;
		
		if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31205",SQLMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpfree((char *)ptr_fml_Sbuf);
			tpfree((char *)ptr_fml_Rbuf);
			tpfree((char *)ptr_fml_Obuf);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		Ver 1.1 Commented Ends ***/
		
		EXEC SQL		
		SELECT (to_date(:c_expry_dt,'dd-Mon-yyyy') - trunc(sysdate) + 1)/365 
		INTO :d_time_for_exp
		FROM DUAL;


		/*******************************************************************************************************
		Here onwards the d_base_price value is overwritten in order to have latest quotes according to 
		new logic given as follows

			For P&L forecast at different NIFTY levels, (Theoretical price - LTP) x quantity Where;
			a)In case of Future positions LTP would be - 
						1st priority: If contract is traded on that day then last traded price of the contract.
            2nd priority: If contract is not traded on that day then consider the spot price.
      b)In case of Option positions LTP would be - 
						1st priority: If contract is traded on that day then last traded price of the contract.
            2nd priority: If contract is not traded on that day then consider the intrinsic value.
            3rd priority: If contract is not traded on that day and also the contract is out of money   
                          then consider the previous close price.

		******************************************************************************************************/
		i_rec_exst = 0;

		/***		Ver 1.1 Comment Starts

    EXEC SQL
    SELECT  1
    INTO    :i_rec_exst
    FROM    dual
    WHERE EXISTS
    (
    	SELECT  FTQ_XCHNG_CD
      FROM    FTQ_FO_TRD_QT
      WHERE 	FTQ_XCHNG_CD = :c_xchng_cd  
			AND 		FTQ_PRDCT_TYP = :c_prdct_typ
      AND     FTQ_UNDRLYNG  = :c_undrlyng
      AND     FTQ_EXPRY_DT  = :c_expry_dt
      AND     FTQ_EXER_TYP  = :c_exer_typ
      AND     FTQ_OPT_TYP   = :c_opt_typ
      AND     FTQ_STRK_PRC  = :d_strk_prc
      AND     TRUNC(FTQ_LST_TRD_TM) = trunc(sysdate)
    );
		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog( c_ServiceName, "S31210",SQLMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpfree((char *)ptr_fml_Sbuf);
			tpfree((char *)ptr_fml_Rbuf);
			tpfree((char *)ptr_fml_Obuf);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		*********** Base price calcluation ************
		if( i_rec_exst == 1 )
		{
			if( c_clsltp_flg  == 'C' )     ***  Ver 1.1 ***
			{
				EXEC SQL
      		SELECT  FTQ_BASE_PRC
      		INTO    :d_ltp_prc
      		FROM    FTQ_FO_TRD_QT
      		WHERE   FTQ_XCHNG_CD = :c_xchng_cd
					AND 		FTQ_PRDCT_TYP = :c_prdct_typ
      		AND     FTQ_UNDRLYNG  = :c_undrlyng
      		AND     FTQ_INDSTK    = :c_ctgry_indstk
      		AND     FTQ_EXPRY_DT  = :c_expry_dt
      		AND     FTQ_EXER_TYP  = :c_exer_typ
      		AND     FTQ_OPT_TYP   = :c_opt_typ
      		AND     FTQ_STRK_PRC  = :d_strk_prc;

				if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
				{
					fn_errlog( c_ServiceName, "S31215",SQLMSG,c_err_msg);
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpfree((char *)ptr_fml_Sbuf);
					tpfree((char *)ptr_fml_Rbuf);
					tpfree((char *)ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}
			else
			{
				EXEC SQL
          SELECT  FTQ_LST_TRD_PRC
          INTO    :d_ltp_prc
          FROM    FTQ_FO_TRD_QT
          WHERE   FTQ_XCHNG_CD = :c_xchng_cd
          AND     FTQ_PRDCT_TYP = :c_prdct_typ
          AND     FTQ_UNDRLYNG  = :c_undrlyng
          AND     FTQ_INDSTK    = :c_ctgry_indstk
          AND     FTQ_EXPRY_DT  = :c_expry_dt
          AND     FTQ_EXER_TYP  = :c_exer_typ
          AND     FTQ_OPT_TYP   = :c_opt_typ
          AND     FTQ_STRK_PRC  = :d_strk_prc;

        if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
        {
          fn_errlog( c_ServiceName, "S31220",SQLMSG,c_err_msg);
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpfree((char *)ptr_fml_Sbuf);
          tpfree((char *)ptr_fml_Rbuf);
          tpfree((char *)ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

			}

			******	if(c_prdct_typ == 'O' )
			{
				d_base_price = d_stck_spot_val;
			} *****

			c_trd_flg = 'T';
			d_oblgtn_ltp	=	d_ltp_prc	;
		}
		else
		{
			if(c_prdct_typ == 'F' )
      {
				fn_userlog(c_ServiceName,"Inside FUTURE");

				if( c_clsltp_flg  == 'C' )     ***  Ver 1.1 ***
				{
					fn_userlog(c_ServiceName,"Inside FUTURE CLOSING PRICE");

        	EXEC SQL
          	SELECT  LTQ_CLS_PRC * 100
          	INTO    :d_ltp_prc
          	FROM    LTQ_TRD_QT
          	WHERE		LTQ_STCK_CD   = :c_undrlyng
						AND   	LTQ_XCHNG_CD  = 'NSE'; 

        	if ( SQLCODE != 0 )
        	{
			 			fn_errlog( c_ServiceName, "S31225",SQLMSG,c_err_msg);
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						tpfree((char *)ptr_fml_Sbuf);
						tpfree((char *)ptr_fml_Rbuf);
						tpfree((char *)ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}

      		d_oblgtn_ltp  = d_ltp_prc ;
				}
				else
				{
					fn_userlog(c_ServiceName,"Inside FUTURE LTP");

					EXEC SQL
            SELECT  LTQ_RT * 100
            INTO    :d_ltp_prc
            FROM    LTQ_TRD_QT
            WHERE		LTQ_STCK_CD   = :c_undrlyng
						AND		  LTQ_XCHNG_CD  = 'NSE'; 

          if ( SQLCODE != 0 )
          {
            fn_errlog( c_ServiceName, "S31230",SQLMSG,c_err_msg);
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpfree((char *)ptr_fml_Sbuf);
            tpfree((char *)ptr_fml_Rbuf);
            tpfree((char *)ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

					EXEC SQL
						SELECT  FTQ_CLS_PRC
						INTO    :d_oblgtn_ltp
						FROM    FTQ_FO_TRD_QT
						WHERE   FTQ_XCHNG_CD  = :c_xchng_cd   
						AND     FTQ_PRDCT_TYP = :c_prdct_typ
						AND     FTQ_UNDRLYNG  = :c_undrlyng
						AND     FTQ_EXPRY_DT  = :c_expry_dt
						AND     FTQ_EXER_TYP  = :c_exer_typ
						AND     FTQ_OPT_TYP   = :c_opt_typ
						AND     FTQ_STRK_PRC  = :d_strk_prc;

					if ( SQLCODE != 0 )
 					{
   					fn_errlog( c_ServiceName, "S31235",SQLMSG,c_err_msg);
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			 			tpfree((char *)ptr_fml_Sbuf);
			 			tpfree((char *)ptr_fml_Rbuf);
			 			tpfree((char *)ptr_fml_Obuf);
			 			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			 			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 					}
				}
				
      }
			else if ( c_prdct_typ == 'O' )
			{
        fn_userlog(c_ServiceName,"Inside OPTION");

        if( c_clsltp_flg  == 'C' )     ***  Ver 1.1 ***
				{
				  fn_userlog(c_ServiceName,"Inside OPTION CLOSING PRICE");

          EXEC SQL
            SELECT  FUM_CLS_PRC
            INTO  :d_ltp_prc
            FROM  FUM_FO_UNDRLYNG_MSTR
            WHERE	FUM_PRDCT_TYP	=	:c_prdct_typ
            AND   FUM_UNDRLYNG  = :c_undrlyng
 						AND		FUM_XCHNG_CD  = :c_xchng_cd;

          if( SQLCODE != 0 )
          {
						fn_errlog( c_ServiceName, "S31240",SQLMSG,c_err_msg);
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpfree((char *)ptr_fml_Sbuf);
            tpfree((char *)ptr_fml_Rbuf);
            tpfree((char *)ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

        }
				else
				{
					EXEC SQL
        		SELECT  FTQ_LST_TRD_PRC
        		INTO    :d_ltp_prc
        		FROM    FTQ_FO_TRD_QT
        		WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
						AND 		FTQ_PRDCT_TYP = :c_prdct_typ
        		AND     FTQ_UNDRLYNG  = :c_undrlyng
        		AND     FTQ_EXPRY_DT  = :c_expry_dt
        		AND     FTQ_EXER_TYP  = :c_exer_typ
        		AND     FTQ_OPT_TYP   = :c_opt_typ
        		AND     FTQ_STRK_PRC  = :d_strk_prc;

					if( SQLCODE != 0 )
					{
						fn_errlog( c_ServiceName, "S31245",SQLMSG,c_err_msg);
				  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				  	tpfree((char *)ptr_fml_Sbuf);
				  	tpfree((char *)ptr_fml_Rbuf);
				  	tpfree((char *)ptr_fml_Obuf);
				  	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
				}
			}
			c_trd_flg = 'N';
		}
	
		Ver	1.1	Comment Ends	***/

		EXEC SQL
      SELECT  1
      INTO  :i_clsprc_chk
      FROM  FTQ_FO_TRD_QT/*** Commented in Ver 1.4 *** ,FCM_FO_CNTRCT_MSTR ***/
      WHERE FTQ_XCHNG_CD  = :c_xchng_cd
      AND   FTQ_PRDCT_TYP = :c_prdct_typ
      AND   FTQ_UNDRLYNG  = :c_undrlyng
      AND   FTQ_EXPRY_DT  = :c_expry_dt
      AND   FTQ_EXER_TYP  = :c_exer_typ
      AND   FTQ_OPT_TYP   = :c_opt_typ
      AND   FTQ_STRK_PRC  = :d_strk_prc
      /*** Ver 1.4 Comment Starts ***
      AND   FCM_XCHNG_CD  = :c_xchng_cd
      AND   FCM_UNDRLYNG  = FTQ_UNDRLYNG
      AND   FCM_PRDCT_TYP = FTQ_PRDCT_TYP
      AND   TRUNC(FTQ_LST_TRD_TM) = TRUNC(FCM_CLS_PRC_DT) ***/
      AND   TRUNC(FTQ_LST_TRD_TM) = TRUNC(FTQ_CLS_PRC_DT) /*** Ver 1.4 ***/
      AND   ROWNUM < 2;

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog(c_ServiceName, "S31250", SQLMSG, c_err_msg );
			tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_Rbuf);
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
    }

    if ( i_clsprc_chk  ==  1 )
    {
      c_clsltp_flg  ='C';
    }
		else
    {
			
			if ( c_prdct_typ ==  'F' )
			{
       EXEC SQL
         SELECT  1
         INTO    :i_cls_chk
         FROM    FTQ_FO_TRD_QT/*** Commented in Ver 1.4 *** ,FCM_FO_CNTRCT_MSTR ***/
         WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
         AND     FTQ_PRDCT_TYP = :c_prdct_typ
         AND     FTQ_UNDRLYNG  = :c_undrlyng
         AND     FTQ_EXPRY_DT  = :c_expry_dt
         AND     FTQ_EXER_TYP  = :c_exer_typ
         AND     FTQ_OPT_TYP   = :c_opt_typ
         AND     FTQ_STRK_PRC  = :d_strk_prc
         /*** Commented in Ver 1.4 ***
         AND     FCM_XCHNG_CD  = :c_xchng_cd
         AND     FCM_UNDRLYNG  = FTQ_UNDRLYNG
         AND     FCM_PRDCT_TYP = FTQ_PRDCT_TYP
         AND     TRUNC(FTQ_LST_TRD_TM) < TRUNC(FCM_CLS_PRC_DT) ***/
         AND     TRUNC(FTQ_LST_TRD_TM) < TRUNC(FTQ_CLS_PRC_DT) /*** Ver 1.4 ***/ 
         AND     ROWNUM < 2;
			}
			else if ( c_prdct_typ == 'O')
			{
         EXEC SQL
          SELECT  1
          INTO    :i_cls_chk
          FROM    FTQ_FO_TRD_QT,FUM_FO_UNDRLYNG_MSTR
          WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
          AND     FTQ_PRDCT_TYP = :c_prdct_typ
          AND     FTQ_UNDRLYNG  = :c_undrlyng
          AND     FTQ_EXPRY_DT  = :c_expry_dt
          AND     FTQ_EXER_TYP  = :c_exer_typ
          AND     FTQ_OPT_TYP   = :c_opt_typ
          AND     FTQ_STRK_PRC  = :d_strk_prc
          AND     FUM_XCHNG_CD  = :c_xchng_cd
          AND     FUM_UNDRLYNG  = FTQ_UNDRLYNG
          AND     FUM_PRDCT_TYP = FTQ_PRDCT_TYP
          AND     TRUNC(FTQ_LST_TRD_TM) <= TRUNC(FUM_CLS_PRC_DT)
          AND     ROWNUM < 2;
      }
		
      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName, "S31255", SQLMSG, c_err_msg );
				tpfree((char *)ptr_fml_Sbuf);
      	tpfree((char *)ptr_fml_Rbuf);
      	tpfree((char *)ptr_fml_Obuf);
        tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
      }

      if ( i_cls_chk == 1 )
      {
        c_clsltp_flg  ='C';
      }
      else
      {
        c_clsltp_flg  ='L';
      }
    }
		
		 EXEC SQL
      SELECT  1
      INTO    :i_rec_exst
      FROM    dual
      WHERE EXISTS
      (
        SELECT  FTQ_XCHNG_CD
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD          = :c_xchng_cd
        AND     FTQ_PRDCT_TYP         = :c_prdct_typ
        AND     FTQ_UNDRLYNG          = :c_undrlyng
        AND     FTQ_EXPRY_DT          = :c_expry_dt
        AND     FTQ_EXER_TYP          = :c_exer_typ
        AND     FTQ_OPT_TYP           = :c_opt_typ
        AND     FTQ_STRK_PRC          = :d_strk_prc
        AND     TRUNC(FTQ_LST_TRD_TM) = TRUNC(SYSDATE)
      );


    if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog(c_ServiceName,"S31260",SQLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_Rbuf);
      tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0);
    }

    if ( i_rec_exst == 1 )
    {
      c_trd_flg     ='T';
    }

		fn_userlog(c_ServiceName,"FLAG IS :%c:",c_clsltp_flg);


    if( c_clsltp_flg  == 'C' )     /***  Ver 1.1 ***/
    {

		fn_userlog(c_ServiceName," ---- Inside c_clsltp_flg  == 'C' ------" );
		fn_userlog(c_ServiceName," c_xchng_cd IS :%s:",c_xchng_cd);
		fn_userlog(c_ServiceName,"c_prdct_typ IS :%c:",c_prdct_typ);
		fn_userlog(c_ServiceName,"c_undrlyng  IS :%s:",c_undrlyng);
		fn_userlog(c_ServiceName,"c_expry_dt  IS :%c:",c_expry_dt);
		fn_userlog(c_ServiceName,"c_exer_typ  IS :%c:",c_exer_typ);
		fn_userlog(c_ServiceName,"c_opt_typ   IS :%c:",c_opt_typ);
		fn_userlog(c_ServiceName,"d_strk_prc  IS :%lf:",d_strk_prc);

      EXEC SQL
        SELECT  FTQ_CLS_PRC
        INTO    :d_ltp_prc
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
        AND     FTQ_PRDCT_TYP = :c_prdct_typ
        AND     FTQ_UNDRLYNG  = :c_undrlyng
        AND     FTQ_EXPRY_DT  = :c_expry_dt
        AND     FTQ_EXER_TYP  = :c_exer_typ
        AND     FTQ_OPT_TYP   = :c_opt_typ
        AND     FTQ_STRK_PRC  = :d_strk_prc;

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31265", SQLMSG, c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpfree((char *)ptr_fml_Sbuf);
      	tpfree((char *)ptr_fml_Rbuf);
      	tpfree((char *)ptr_fml_Obuf);
        fn_userlog(c_ServiceName,"Error While Fetching Spot Price ");
        tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
      }

      d_oblgtn_ltp  = d_ltp_prc;
		  d_currnt_premium = d_ltp_prc;

    }
		else
    {
      EXEC SQL
        SELECT  FTQ_LST_TRD_PRC
        INTO    :d_ltp_prc
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :c_xchng_cd           
        AND     FTQ_PRDCT_TYP = :c_prdct_typ
        AND     FTQ_UNDRLYNG  = :c_undrlyng
        AND     FTQ_EXPRY_DT  = :c_expry_dt
        AND     FTQ_EXER_TYP  = :c_exer_typ
        AND     FTQ_OPT_TYP   = :c_opt_typ
        AND     FTQ_STRK_PRC  = :d_strk_prc;

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31270", SQLMSG, c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpfree((char *)ptr_fml_Sbuf);
      	tpfree((char *)ptr_fml_Rbuf);
      	tpfree((char *)ptr_fml_Obuf);
        fn_userlog(c_ServiceName,"Error While Fetching Spot Price ");
        tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
      }

      d_oblgtn_ltp  = d_ltp_prc;
			d_currnt_premium = d_ltp_prc;
    }

  	if (DEBUG_MSG_LVL_3)
  	{
    	fn_userlog(c_ServiceName,"LTP PRICE Record Exist d_ltp_prc ;%lf:",d_ltp_prc);
  	}

		
	
		EXEC SQL
      SELECT  FTQ_CLS_PRC
      INTO    :d_fut_cls_prc
      FROM    FTQ_FO_TRD_QT
      WHERE   FTQ_XCHNG_CD  = :c_xchng_cd      /** Ver 1.1 **/ 
			AND     FTQ_PRDCT_TYP = :c_prdct_typ
      AND     FTQ_UNDRLYNG  = :c_undrlyng
      AND     FTQ_EXPRY_DT  = :c_expry_dt
      AND     FTQ_EXER_TYP  = :c_exer_typ
      AND     FTQ_OPT_TYP   = :c_opt_typ
      AND     FTQ_STRK_PRC  = :d_strk_prc;


    if( SQLCODE != 0 )
    {
			fn_errlog( c_ServiceName, "S31275",SQLMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_Rbuf);
      tpfree((char *)ptr_fml_Obuf);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		/***	Ver	1.1	Strated	***/

		d_prc_dffrnc	=	d_ltp_prc	-	d_fut_cls_prc;
		
	  if ( d_prc_dffrnc < 0 )
  	{
    	c_prc_indctr  = '-';
  	}
  	else if ( d_prc_dffrnc > 0 )
  	{
    	c_prc_indctr  = '+';
  	}

		/***  Ver 1.1 Ends	***/	

    fn_userlog(c_ServiceName,"Future Closing Price Is :%lf:",d_fut_cls_prc);

    d_fut_cls_prc = d_fut_cls_prc/100;
	
		d_org_opn_val	=	d_ltp_prc * l_quantity	;


		if ( c_prdct_typ == 'F')
		{
			d_base_price = d_org_opn_val / l_quantity; 
		}	
		/************Base price calculation ends********/

		/************* Obligation Handling *************/
		if ( c_prdct_typ == 'O')
		{
			/**** d_opt_oblgtn = d_currnt_premium * l_quantity; ***** Commented on 22-Mar-2010 to add new logic
			 of option obligation calculation as per the new requirements ******/
			d_opt_oblgtn = d_ltp_prc * l_quantity;
		}	
		else if ( c_prdct_typ == 'F')
		{
			EXEC SQL
      SELECT  1
      INTO    :i_trd_exst
      FROM    dual
      WHERE EXISTS
      (
      	SELECT  FTD_XCHNG_CD
        FROM    FTD_FO_tRD_DTLS
        WHERE   FTD_CLM_MTCH_ACCNT  = :c_match_acc
        AND     FTD_INDSTK          = :c_ctgry_indstk
        AND     FTD_UNDRLYNG        = :c_undrlyng
        AND     FTD_EXPRY_DT        = :c_expry_dt
        AND     TRUNC(FTD_TRD_DT)   = trunc(sysdate)
        AND     FTD_XCHNG_CD        = :c_xchng_cd        /*** Ver 1.2 ***/ 
      );

			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
			{
				fn_errlog( c_ServiceName, "S31280",SQLMSG,c_err_msg);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpfree((char *)ptr_fml_Sbuf);
				tpfree((char *)ptr_fml_Rbuf);
				tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		
			if( i_trd_exst == 1)
			{
				fn_userlog(c_ServiceName,"Inside TRADE EXIST for option obligation calcution");
				d_fut_oblgtn  = d_org_opn_val / l_quantity ;
				fn_userlog(c_ServiceName,"FUTURE OBLIGATION in trade exists case IS :%lf:",d_fut_oblgtn);
			}
			else
			{
				EXEC SQL
        SELECT  FTQ_CLS_PRC
        INTO    :d_fut_oblgtn
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :c_xchng_cd        /** Ver 1.1 **/ 
				AND     FTQ_PRDCT_TYP = :c_prdct_typ
        AND     FTQ_UNDRLYNG  = :c_undrlyng
        AND     FTQ_EXPRY_DT  = :c_expry_dt
        AND     FTQ_EXER_TYP  = :c_exer_typ
        AND     FTQ_OPT_TYP   = :c_opt_typ
        AND     FTQ_STRK_PRC  = :d_strk_prc;

				if ( SQLCODE != 0 )
				{
					fn_errlog( c_ServiceName, "S31285",SQLMSG,c_err_msg);
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpfree((char *)ptr_fml_Sbuf);
					tpfree((char *)ptr_fml_Rbuf);
					tpfree((char *)ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				fn_userlog(c_ServiceName,"FUTURE OBLIGATION in trade not exists case IS :%lf:",d_fut_oblgtn);

		/*********	d_opt_oblgtn  = ( d_currnt_premium - d_fut_oblgtn )  * l_quantity  ; **** Commented on 
			22-Mar-2010 to add new logic of option obligation calculation as per the new requirements *******/

				d_opt_oblgtn  = ( d_oblgtn_ltp - d_fut_oblgtn )  * l_quantity  ;

			}
		}
		/**********Obligation handling ends*************/

		if(DEBUG_MSG_LVL_3)
    {	
    	fn_userlog(c_ServiceName,"Record [%d] : Calling service SFO_CALC_RSK");
    	fn_userlog(c_ServiceName,"Record [%d] : d_time_for_exp is :%lf:",i_cnt,d_time_for_exp );
    	fn_userlog(c_ServiceName,"Record [%d] : c_prdct_typ is :%c:",i_cnt,c_prdct_typ );
    	fn_userlog(c_ServiceName,"Record [%d] : d_base_price is :%lf:",i_cnt,d_base_price );
    	fn_userlog(c_ServiceName,"Record [%d] : d_intrst_rt is :%lf:",i_cnt,d_intrst_rt );
    	fn_userlog(c_ServiceName,"Record [%d] : d_dvdnd is :%lf:",i_cnt,d_dvdnd );
    	fn_userlog(c_ServiceName,"Record [%d] : d_beta is :%lf:",i_cnt,d_beta );
    	fn_userlog(c_ServiceName,"Record [%d] : l_quantity is :%ld:",i_cnt,l_quantity );
    	fn_userlog(c_ServiceName,"Record [%d] : c_ordr_flw is :%c:",i_cnt,c_ordr_flw );
    	fn_userlog(c_ServiceName,"Record [%d] : c_iv_indctr is :%c:",i_cnt,c_iv_indctr );
    	fn_userlog(c_ServiceName,"Record [%d] : d_currnt_premium is :%lf:",i_cnt,d_currnt_premium );
    	fn_userlog(c_ServiceName,"Record [%d] : l_interval is :%ld:",i_cnt,l_interval );
    	fn_userlog(c_ServiceName,"Record [%d] : l_num_levels is :%ld:",i_cnt,l_num_levels );
    	fn_userlog(c_ServiceName,"Record [%d] : d_idx_spot_val is :%lf:",i_cnt,d_idx_spot_val );
    	fn_userlog(c_ServiceName,"Record [%d] : d_usridx_spot_val is :%lf:",i_cnt,d_usridx_spot_val );
    	fn_userlog(c_ServiceName,"Record [%d] : c_ctgry_indstk is :%c:",i_cnt,c_ctgry_indstk );
    	fn_userlog(c_ServiceName,"Record [%d] : d_stck_spot_val is :%lf:",i_cnt,d_stck_spot_val );
			if(c_prdct_typ == 'O')
			{
    		fn_userlog(c_ServiceName,"Record [%d] : c_opt_typ is :%c:",i_cnt,c_opt_typ );
    		fn_userlog(c_ServiceName,"Record [%d] : d_strk_prc is :%lf:",i_cnt,d_strk_prc );
    		fn_userlog(c_ServiceName,"Record [%d] : c_exer_typ is :%c:",i_cnt,c_exer_typ );
			}
    	fn_userlog(c_ServiceName,"Record [%d] : d_user_iv is :%lf:",i_cnt,d_user_iv );

    	fn_userlog(c_ServiceName,"Record [%d] : c_undrlyng is :%s:",i_cnt,c_undrlyng);
    	fn_userlog(c_ServiceName,"Record [%d] : c_xchng_cd is :%s:",i_cnt,c_xchng_cd);
    	fn_userlog(c_ServiceName,"Record [%d] : c_expry_dt is :%s:",i_cnt,c_expry_dt.arr);
    	fn_userlog(c_ServiceName,"Record [%d] : c_spl_flg is :%c:",i_cnt,c_spl_flg );
    	fn_userlog(c_ServiceName,"Record [%d] : d_mrgn_blocked is :%lf:",i_cnt,d_mrgn_blocked );
    	fn_userlog(c_ServiceName,"Record [%d] : d_ltp_prc is :%lf:",i_cnt,d_ltp_prc );
		}


		i_err[0] = Fadd32(ptr_fml_Sbuf,FFO_DAY_TO_EXP, (char *)&d_time_for_exp,0);
   	i_ferr [ 0 ] = Ferror32;
		i_err[1] = Fadd32(ptr_fml_Sbuf,FFO_PRDCT_TYP, (char *)&c_prdct_typ,0);
   	i_ferr [ 1 ] = Ferror32;
		d_base_price = d_base_price /100;
		i_err[2] = Fadd32(ptr_fml_Sbuf,FFO_BASE_ORD_VAL, (char *)&d_base_price,0);
   	i_ferr [ 2 ] = Ferror32;
		d_base_price = d_base_price*100;
		i_err[3] = Fadd32(ptr_fml_Sbuf,FFO_INTRST_RT, (char *)&d_intrst_rt,0);
   	i_ferr [ 3 ] = Ferror32;
		i_err[4] = Fadd32(ptr_fml_Sbuf,FFO_PLG_RT, (char *)&d_dvdnd,0);
   	i_ferr [ 4 ] = Ferror32;
		i_err[5] = Fadd32(ptr_fml_Sbuf,FFO_AVM_PRCNT, (char *)&d_beta,0);
   	i_ferr [ 5 ] = Ferror32;
		i_err[6] = Fadd32(ptr_fml_Sbuf,FFO_OPNPSTN_QTY, (char *)&l_quantity,0);
   	i_ferr [ 6 ] = Ferror32;
		i_err[7] = Fadd32(ptr_fml_Sbuf,FFO_OPNPSTN_FLW, (char *)&c_ordr_flw,0);
   	i_ferr [ 7 ] = Ferror32;
		i_err[8] = Fadd32(ptr_fml_Sbuf,FFO_RQST_TYP, (char *)&c_iv_indctr,0);
   	i_ferr [ 8 ] = Ferror32;
		d_currnt_premium = d_currnt_premium/100;
		i_err[9] = Fadd32(ptr_fml_Sbuf,FFO_EFF_LTP, (char *)&d_currnt_premium,0);
   	i_ferr [ 9 ] = Ferror32;
		d_currnt_premium = d_currnt_premium*100;
		i_err[10] = Fadd32(ptr_fml_Sbuf,FFO_INTERVAL, (char *)&l_interval,0);
   	i_ferr [ 10 ] = Ferror32;
		i_err[11] = Fadd32(ptr_fml_Sbuf,FFO_COUNT, (char *)&l_num_levels,0);
   	i_ferr [ 11 ] = Ferror32;
		i_err[12] = Fadd32(ptr_fml_Sbuf,FFO_INDEX, (char *)&d_idx_spot_val,0);
   	i_ferr [ 12 ] = Ferror32;
		i_err[13] = Fadd32(ptr_fml_Sbuf,FFO_USER_INDEX, (char *)&d_usridx_spot_val,0);
   	i_ferr [ 13 ] = Ferror32;
		i_err[14] = Fadd32(ptr_fml_Sbuf,FFO_CTGRY_INDSTK, (char *)&c_ctgry_indstk,0);
   	i_ferr [ 14 ] = Ferror32;
		i_err[15] = Fadd32(ptr_fml_Sbuf,FFO_STCK_PRICE, (char *)&d_stck_spot_val,0);
   	i_ferr [ 15 ] = Ferror32;
		i_err[15] = Fadd32(ptr_fml_Sbuf,FFO_OPT_PREMIUM, (char *)&d_ltp_prc,0);
   	i_ferr [ 15 ] = Ferror32;
		i_err[16] = Fadd32(ptr_fml_Sbuf,FFO_EFF_CLS_PRC, (char *)&d_fut_cls_prc,0);
   	i_ferr [ 16 ] = Ferror32;
		i_err[17] = Fadd32(ptr_fml_Sbuf,FFO_QT_TRDNG_FLG, (char *)&c_trd_flg,0);
   	i_ferr [ 17 ] = Ferror32;
		i_err[18] = Fadd32(ptr_fml_Sbuf,FFO_SYMBOL, (char *)&c_undrlyng,0);             /*** Ver 1.2 ***/
    i_ferr [ 18 ] = Ferror32;
		i_err[19] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CD , (char *)&c_xchng_cd,0);             /*** Ver 1.2 ***/
    i_ferr [ 19 ] = Ferror32;

		/*** for(j=0;j<18;j++)  Commneted In Ver 1.2 ***/
		for(j=0;j< 20;j++) 			/*** Ver 1.2 ***/
    {
    	if(i_err[j] == -1)
     	{
       	fn_errlog( c_ServiceName, "S31290",Fstrerror32(i_ferr[j]),c_err_msg);
       	fn_userlog(c_ServiceName,"Error in Fadd32 for SFO_CALC_RSK,field %d in record no %d",j,i_cnt );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpfree((char *)ptr_fml_Sbuf);
				tpfree((char *)ptr_fml_Rbuf);
				tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }
    }

		if(c_prdct_typ == 'O')
		{
			i_err[0] = Fadd32(ptr_fml_Sbuf,FFO_OPT_TYP, (char *)&c_opt_typ,0);
   		i_ferr [ 0 ] = Ferror32;
			d_strk_prc = d_strk_prc/100;
			i_err[1] = Fadd32(ptr_fml_Sbuf,FFO_STRIKE_PRC, (char *)&d_strk_prc,0);
   		i_ferr [ 1 ] = Ferror32;
			d_strk_prc = d_strk_prc*100;
			for(j=0;j<2;j++)
			{
				if(i_err[j] == -1)
				{
					fn_errlog( c_ServiceName, "S31295",Fstrerror32(i_ferr[j]),c_err_msg);
					fn_userlog(c_ServiceName,"Error in Fadd32 for SFO_CALC_RSK,field %d in record no %d",j,i_cnt );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpfree((char *)ptr_fml_Sbuf);
					tpfree((char *)ptr_fml_Rbuf);
					tpfree((char *)ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}
		}
		/*** if(c_iv_indctr == 'U') commented In Ver 1.2 ***/
		if(c_iv_indctr == 'U' || c_iv_indctr == 'R') /*** Ver 1.2 ***/
		{
			i_err[0] = Fadd32(ptr_fml_Sbuf,FFO_EFF_LMT_RT, (char *)&d_user_iv,0);
   		i_ferr [ 0 ] = Ferror32;
			if(i_err[0] == -1)
			{
				fn_errlog( c_ServiceName, "S31300",Fstrerror32(i_ferr[0]),c_err_msg);
				fn_userlog(c_ServiceName,"Error in Fadd32 for SFO_CALC_RSK,field %d in record no %d",j,i_cnt );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpfree((char *)ptr_fml_Sbuf);
				tpfree((char *)ptr_fml_Rbuf);
				tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}

		i_returncode = tpcall ( "SFO_CALC_RSK",
                            ( char * ) ptr_fml_Sbuf,
                            0,
                            ( char ** ) &ptr_fml_Rbuf,
                            &li_recvbuf,
                            0 );
		
		if ( i_returncode == -1 )
    {
			if ( TPCODE != TPESVCFAIL )
      {
        fn_errlog( c_ServiceName, "S31305", TPMSG,c_err_msg  );
      }
      else
      {
        Fget32(ptr_fml_Rbuf, FFO_ERR_MSG, 0, c_err_msg,0);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        fn_errlog( c_ServiceName, "S31310", TPMSG,c_err_msg  );
     		fn_errlog( c_ServiceName, "Error while calling service SFO_CALC_RSK", FMLMSG, c_err_msg  );
				tpfree((char *)ptr_fml_Sbuf);
				tpfree((char *)ptr_fml_Rbuf);
				tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		}
		
		MEMSET(c_cntrct_pnl);
		MEMSET(c_undrlyng_pnl);
		MEMSET(c_opoc_cntrct);
		MEMSET(c_opoc_undrlyng);

		i_err[0]= Fget32(ptr_fml_Rbuf, FFO_INDEX ,0,(char *)&d_init_spot, 0);
   	i_ferr [ 0 ] = Ferror32;
		if(i_err[0] == -1)
    {
    	fn_errlog( c_ServiceName, "S31315",Fstrerror32(i_ferr[0]),c_err_msg);
      fn_userlog(c_ServiceName,"Error in Fget32 field %d in record no %d",j,i_cnt );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_Rbuf);
      tpfree((char *)ptr_fml_Obuf);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		EXEC SQL
    SELECT trunc(:d_init_spot)
    INTO :d_init_spot
    FROM DUAL;
		
		if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31320",SQLMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_Rbuf);
      tpfree((char *)ptr_fml_Obuf);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"Truncated initial spot is :%lf:",d_init_spot );
		}	

		for (i=0; i<NUM_OF_LEVELS ; i++)
		{
			d_currnt_pnl = 0.0;
			i_err[0]= Fget32(ptr_fml_Rbuf, FFO_INDEX ,i,(char *)&d_currnt_level, 0);
    	i_ferr [ 0 ] = Ferror32;
			
			i_err[1]= Fget32(ptr_fml_Rbuf, FFO_RLZD_PL ,i,(char *)&d_currnt_pnl, 0);
    	i_ferr [ 1 ] = Ferror32;
			
			d_currnt_pnl = d_currnt_pnl*100;

			l_crrnt_lvl[i]	=	d_currnt_level;			/***	Ver	1.1	***/

			for(j=0;j<2;j++)
    	{
      	if(i_err[j] == -1)
      	{
       		fn_errlog( c_ServiceName, "S31325",Fstrerror32(i_ferr[j]),c_err_msg);
       		fn_userlog(c_ServiceName,"Error in retrieving pnl ,Fget32 field %d in record no %d",j,i_cnt );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	tpfree((char *)ptr_fml_Sbuf);
        	tpfree((char *)ptr_fml_Rbuf);
        	tpfree((char *)ptr_fml_Obuf);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       	}
     	}
			if(DEBUG_MSG_LVL_3)
			{
      	fn_userlog(c_ServiceName,"Current Pnl is  :%lf: in record no %d",d_currnt_pnl,i_cnt );
      	fn_userlog(c_ServiceName,"Current Index is  :%lf: in record no %d",d_currnt_level,i_cnt );
			}
			/******* Out of Pocket calculation *****/
			d_out_of_pocket_by = 0.0;

			if(d_currnt_pnl < 0)
			{
				d_out_of_pocket_by = d_currnt_pnl + d_mrgn_blocked +d_opt_oblgtn;
				if(d_out_of_pocket_by > 0)
				{
					d_out_of_pocket_by = 0;
				}
			}

			d_arr_cntrct_opoc[i] = d_out_of_pocket_by;
	/*		d_arr_undrlyng_opoc[i] = d_arr_undrlyng_opoc[i]+d_out_of_pocket_by; */
	/* 	d_arr_total_opoc[i] = d_arr_total_opoc[i]+d_out_of_pocket_by; */

			if (d_arr_cntrct_opoc[i] < 0 )
      {
				if(l_out_of_poc_cntrct_at == 0)
				{
					l_out_of_poc_cntrct_at  =  d_currnt_level;
				}
			}

			d_arr_cntrct_pnl[i] = d_currnt_pnl;
			d_arr_undrlyng_total[i] =d_arr_undrlyng_total[i]+d_currnt_pnl;
			d_arr_net_total[i] =d_arr_net_total[i] + d_currnt_pnl;

			if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"---- Testing For  Total -----------");
        fn_userlog(c_ServiceName," Value of  d_currnt_pnl Is :%lf:",d_currnt_pnl);
        fn_userlog(c_ServiceName," Value of  d_arr_net_total[%d] Is :%lf:",i,d_arr_net_total[i]);
      }

			sprintf(c_temp_var,"%0.2lf%c",d_arr_cntrct_pnl[i],c_delimiter);
			strcat(c_cntrct_pnl,c_temp_var);
			MEMSET(c_temp_var);

		/*	sprintf(c_temp_var,"%0.2lf%c",d_arr_undrlyng_total[i],c_delimiter);
			strcat(c_undrlyng_pnl,c_temp_var);
			MEMSET(c_temp_var); */

			sprintf(c_temp_var,"%0.2lf%c",d_arr_cntrct_opoc[i],c_delimiter);
			strcat(c_opoc_cntrct,c_temp_var);
			MEMSET(c_temp_var);

		/*	sprintf(c_temp_var,"%0.2lf%c",d_arr_undrlyng_opoc[i],c_delimiter);
			strcat(c_opoc_undrlyng,c_temp_var);
			MEMSET(c_temp_var); */
		}



		/***	Ver	1.1	Starts	***/

    i_upcnt=0;
    i_dwncnt=0;
    l_netout_of_poc_atdwn = 0;
    l_netout_of_poc_atup  = 0;

    l_nifty_spot = d_idx_spot_val;

    d_levels[0]   = d_usridx_spot_val;

    for(k = 1 ; k < 10 ; k++)
    {
     d_levels[k]= d_levels[k-1] + l_interval ;
    }

    for( k = 0 ; k < 10 ; k++)
    {
     if(d_levels[k]>l_nifty_spot)
     {
      i_upcnt = k;
      break;
     }
    }

    i_dwncnt = i_upcnt - 1 ;

    if( i_upcnt == 0)
    {
     if( l_nifty_spot > d_levels[9] )
     {
      i_upcnt  = 10;
      i_dwncnt = 9;
     }
    }

		for ( i_net_dwn = i_dwncnt  ; i_net_dwn >= 0  ; i_net_dwn -- )
    {
        if( d_arr_cntrct_opoc[i_net_dwn] >= 0)
        {
          d_arr_cntrct_opoc[i_net_dwn]  = 0.0;
        }
        else
        {
          if( l_netout_of_poc_atdwn == 0 )
          {
            l_netout_of_poc_atdwn  =  d_usridx_spot_val + (i_net_dwn  * l_interval); 
          }
        }
      }
      for ( i_net_up = i_upcnt ; i_net_up <= 9 ; i_net_up ++  )
      {
        if( d_arr_cntrct_opoc[i_net_up] >= 0)
        {
          d_arr_cntrct_opoc[i_net_up]  = 0.0;
        }
        else
        {
          if( l_netout_of_poc_atup == 0 )
          {
            l_netout_of_poc_atup  =  d_usridx_spot_val + (i_net_up * l_interval);  
          }
        }
      }

		l_group_quantity = l_group_quantity + l_quantity;
		d_grp_opt_oblgtn = d_grp_opt_oblgtn + d_opt_oblgtn;
		d_grp_mrgn_blocked = d_grp_mrgn_blocked + d_mrgn_blocked;

		NULLTERM(c_cntrct_pnl);
/*		NULLTERM(c_undrlyng_pnl);*/
		NULLTERM(c_opoc_cntrct);
/*		NULLTERM(c_opoc_undrlyng); */

		c_status_flg = 'A';	
		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"c_undrlyng is  :%s: in record no %d",c_undrlyng,i_cnt );
    	fn_userlog(c_ServiceName,"c_prdct_typ is  :%c: in record no %d",c_prdct_typ,i_cnt );
    	fn_userlog(c_ServiceName,"c_opt_typ is  :%c: in record no %d",c_opt_typ,i_cnt );
    	fn_userlog(c_ServiceName,"c_expry_dt is  :%s: in record no %d",c_expry_dt.arr,i_cnt );
      fn_userlog(c_ServiceName,"d_strk_prc is  :%lf: in record no %d",d_strk_prc,i_cnt );
      fn_userlog(c_ServiceName,"l_quantity is  :%ld: in record no %d",l_quantity,i_cnt );
    	fn_userlog(c_ServiceName,"c_ordr_flw is  :%c: in record no %d",c_ordr_flw,i_cnt );
    	fn_userlog(c_ServiceName,"d_currnt_premium is  :%lf: in record no %d",d_currnt_premium,i_cnt );
    	fn_userlog(c_ServiceName,"c_cntrct_pnl is  :%s: in record no %d",c_cntrct_pnl,i_cnt );
      fn_userlog(c_ServiceName,"d_mrgn_blocked is  :%lf: in record no %d",d_mrgn_blocked,i_cnt );
      fn_userlog(c_ServiceName,"d_opt_oblgtn is  :%lf: in record no %d",d_opt_oblgtn,i_cnt );
      fn_userlog(c_ServiceName,"c_opoc_cntrct is  :%s: in record no %d",c_opoc_cntrct,i_cnt );
      fn_userlog(c_ServiceName,"c_status_flg is  :%c: in record no %d",c_status_flg,i_cnt );
      fn_userlog(c_ServiceName,"c_spl_flg is  :%c: in record no %d",c_spl_flg,i_cnt );
      fn_userlog(c_ServiceName,"l_out_of_poc_cntrct_at is  :%ld: in record no %d",l_out_of_poc_cntrct_at,i_cnt );
		}

		
  	/***  Ver 1.1 ***/

    l_lot_size = 0;     /*** Ver 1.4 taken here from below***/

  	EXEC SQL
   		SELECT  FTQ_LST_TRD_PRC,
              FTQ_MIN_LOT_QTY   /*** Ver 1.4 ***/
   		INTO    :d_frntltp_prc,
              :l_lot_size       /*** Ver 1.4 ***/
   		FROM    FTQ_FO_TRD_QT
   		WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
   		AND     FTQ_PRDCT_TYP = :c_prdct_typ
   		AND     FTQ_UNDRLYNG  = :c_undrlyng
   		AND     FTQ_EXPRY_DT  = :c_expry_dt
   		AND     FTQ_EXER_TYP  = :c_exer_typ
   		AND     FTQ_OPT_TYP   = :c_opt_typ
   		AND     FTQ_STRK_PRC  = :d_strk_prc;

  	if( SQLCODE != 0 )
  	{
    	fn_errlog( c_ServiceName, "S31330",SQLMSG,c_err_msg);
      fn_userlog(c_ServiceName,"Error in field %d in record no %d",i,i_cnt );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpfree((char *)ptr_fml_Sbuf);
    	tpfree((char *)ptr_fml_Rbuf);
    	tpfree((char *)ptr_fml_Obuf);
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

    if(DEBUG_MSG_LVL_0)
    {
     fn_userlog(c_ServiceName," FTQ Lot Size :%ld:",l_lot_size);
    }

  	/***  Ver 1.1 Ends  ***/

  	/***  Ver 1.2 Starts ***/
		
  /***		l_lot_size = 0;  Commented in Ver 1.4 and taken above ***/

    /*** Commented in Ver 1.4 ***
		EXEC SQL
        SELECT FCM_LOT_SZ 
        INTO :l_lot_size
        FROM FCM_FO_CNTRCT_MSTR
        WHERE FCM_XCHNG_CD  =:c_xchng_cd
        AND FCM_PRDCT_TYP   =:c_prdct_typ
        AND FCM_UNDRLYNG    =:c_undrlyng
        AND FCM_INDSTK      =:c_ctgry_indstk
        AND FCM_EXPRY_DT    =:c_expry_dt
        AND FCM_OPT_TYP     = :c_opt_typ
        AND FCM_STRK_PRC    =:d_strk_prc;

    if( SQLCODE != 0 )
    {
    	fn_errlog( c_ServiceName, "S31335",SQLMSG,c_err_msg);
    	fn_userlog(c_ServiceName,"Error in field %d in record no %d",i,i_cnt );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpfree((char *)ptr_fml_Sbuf);
    	tpfree((char *)ptr_fml_Rbuf);
    	tpfree((char *)ptr_fml_Obuf);
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
 
    ***/
  	/***  Ver 1.2 Ends  ***/

    i_err[0]= Fadd32( ptr_fml_Obuf, FFO_STATUS_FLG, (char *)&c_status_flg, 0);
    i_ferr [ 0 ] = Ferror32;
    i_err[1]= Fadd32( ptr_fml_Obuf, FFO_SPL_FLG, (char *)&c_spl_flg, 0);
    i_ferr [ 1 ] = Ferror32;
    i_err[2]= Fadd32( ptr_fml_Obuf, FFO_PRDCT_TYP, (char *)&c_prdct_typ, 0);
    i_ferr [ 2 ] = Ferror32;
		i_err[3]= Fadd32( ptr_fml_Obuf, FFO_UNDRLYNG, (char *)c_undrlyng, 0 );
  	i_ferr [ 3 ] = Ferror32;
    i_err[4]= Fadd32( ptr_fml_Obuf, FFO_EXPRY_DT, (char *)c_expry_dt.arr, 0);
    i_ferr [ 4 ] = Ferror32;
    i_err[5]= Fadd32( ptr_fml_Obuf, FFO_OPT_TYP, (char *)&c_opt_typ, 0);
    i_ferr [ 5 ] = Ferror32;
    i_err[6]= Fadd32( ptr_fml_Obuf, FFO_EXER_TYP, (char *)&c_exer_typ, 0);
    i_ferr [ 6 ] = Ferror32;
    i_err[7]= Fadd32( ptr_fml_Obuf, FFO_STRIKE_PRC, (char *)&d_strk_prc, 0);
    i_ferr [ 7 ] = Ferror32;
    i_err[8]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_QTY,	(char *)&l_quantity, 0);
    i_ferr [ 8 ] = Ferror32;
    i_err[9]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_FLW, (char *)&c_ordr_flw, 0);
    i_ferr [ 9 ] = Ferror32;
		i_err[10]= Fadd32( ptr_fml_Obuf, FFO_MAX_PROFIT,(char *)c_cntrct_pnl, 0 );
  	i_ferr [ 10 ] = Ferror32;
		i_err[11]= Fadd32( ptr_fml_Obuf, FFO_ADD_MRGN_AMT, (char *)&d_mrgn_blocked, 0 );
  	i_ferr [ 11 ] = Ferror32;

	/***	i_err[12]= Fadd32( ptr_fml_Obuf, FFO_EFF_LTP, (char *)&d_currnt_premium , 0 ); Commented In Ver 1.1	****/

		i_err[12]= Fadd32( ptr_fml_Obuf, FFO_EFF_LTP, (char *)&d_frntltp_prc , 0 );				/***	Ver	1.1	***/
  	i_ferr [ 12 ] = Ferror32;
		i_err[13]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_VAL, (char *)&d_opt_oblgtn , 0 );
  	i_ferr [ 13 ] = Ferror32;
  	i_err[14]  = Fadd32( ptr_fml_Obuf,FFO_PRC_INDCTR, (char *)&c_prc_indctr, 0 );     /***  Ver 1.1 ***/
    i_ferr[14] = Ferror32;       /***  Ver 1.1 ***/
	
		/*** Ver 1.2 Starts ***/
		i_err[15]  = Fadd32( ptr_fml_Obuf,FFO_BOARD_LOT_QTY, (char *)&l_lot_size, 0 );     
    i_ferr[15] = Ferror32;
		
		i_err[16]  = Fadd32( ptr_fml_Obuf,FFO_XCHNG_CD, (char *)&c_xchng_cd, 0 );    
    i_ferr[16] = Ferror32;
		
		/*** Ver 1.2 Ends   ***/

		/*** for(j=0;j<15;j++)		***	Ver	1.1	*** Commented In Ver 1.2 ***/
		for(j=0;j<17;j++)			/***	Ver	1.2	***/
    {
      if(i_err[j] == -1)
      {
        fn_errlog( c_ServiceName, "S31340",Fstrerror32(i_ferr[j]),c_err_msg);
        fn_userlog(c_ServiceName,"Error in adding output to FML,Fadd32 field %d in record no %d",j,i_cnt );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpfree((char *)ptr_fml_Sbuf);
        tpfree((char *)ptr_fml_Rbuf);
        tpfree((char *)ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

		if(c_usr_flg != 'C')
		{
			i_err[0]= Fadd32( ptr_fml_Obuf, FFO_CA_LVL, (char *)&l_out_of_poc_cntrct_at, 0 );
  		i_ferr [ 0 ] = Ferror32;
			i_err[1]= Fadd32( ptr_fml_Obuf, FFO_BRK_EVN_PT, (char *)c_opoc_cntrct, 0 );
  		i_ferr [ 1 ] = Ferror32;
			i_err[2]= Fadd32( ptr_fml_Obuf,FFO_HGH_INDX_VAL , (char *)&l_netout_of_poc_atup, 0 );			/***	Ver	1.1	***/
			i_err[2]= Fadd32( ptr_fml_Obuf,FFO_LOW_INDX_VAL , (char *)&l_netout_of_poc_atdwn, 0 );		/***	Ver	1.1	***/
  		i_ferr [ 3 ] = Ferror32;
  		i_ferr [ 3 ] = Ferror32;

			for(j=0;j<3;j++)
    	{
      	if(i_err[j] == -1)
      	{
        	fn_errlog( c_ServiceName, "S31345",Fstrerror32(i_ferr[j]),c_err_msg);
        	fn_userlog(c_ServiceName,"Error in adding output to FML,Fadd32 field %d in record no %d",j,i_cnt );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	tpfree((char *)ptr_fml_Sbuf);
        	tpfree((char *)ptr_fml_Rbuf);
        	tpfree((char *)ptr_fml_Obuf);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
    	}
		}

		l_out_of_poc_cntrct_at = 0;

		strcpy(c_prev_undrlyng,c_undrlyng);
		i_cnt++;	/* Record(no. of rows) Counter */

		tpfree((char *)ptr_fml_Sbuf);
		ptr_fml_Sbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
		if (ptr_fml_Sbuf == NULL)
		{
			fn_errlog(c_ServiceName, "S31350", TPMSG, c_err_msg);
			Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
			tpfree((char *)ptr_fml_Obuf);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
		}
		Finit32(ptr_fml_Sbuf, Fsizeof32(ptr_fml_Sbuf));	

		tpfree((char *)ptr_fml_Rbuf);
		ptr_fml_Rbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
		if (ptr_fml_Rbuf == NULL)
		{
			fn_errlog(c_ServiceName, "S31355", TPMSG, c_err_msg);
			Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
			tpfree((char *)ptr_fml_Obuf);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
		}
		Finit32(ptr_fml_Rbuf, Fsizeof32(ptr_fml_Rbuf));	
	} /* End of while loop for processing records recieved from frontend */
	MEMSET(c_cntrct_pnl);
	MEMSET(c_undrlyng_pnl);
	MEMSET(c_opoc_cntrct);
	MEMSET(c_opoc_undrlyng);
	

	for (i = 0 ; i < NUM_OF_LEVELS ; i++ )
	{
		d_out_of_pocket_by = 0.0;
		
		fn_userlog(c_ServiceName,"------- Testing : Just Before Adding to c_netpnl "); 
		fn_userlog(c_ServiceName," Value of  d_arr_net_total[%d] Is :%lf:",i,d_arr_net_total[i]);

		if( d_arr_net_total[i] < 0)
		{
			d_out_of_pocket_by = d_arr_net_total[i]+	d_total_mrgn_blocked +d_total_opt_oblgtn;
			if(d_out_of_pocket_by > 0 )
			{
				d_out_of_pocket_by = 0.0;
			}
		}
		d_arr_total_opoc[i]=d_out_of_pocket_by;

		sprintf(c_temp_var,"%0.2lf%c",d_arr_net_total[i],c_delimiter);
		strcat(c_netpnl,c_temp_var);
		fn_userlog(c_ServiceName," Value of  Is :%s:",c_netpnl);
		MEMSET(c_temp_var);
		sprintf(c_temp_var,"%0.2lf%c",d_arr_total_opoc[i],c_delimiter);
		strcat(c_opoc_total,c_temp_var);
		MEMSET(c_temp_var);
		if (d_arr_total_opoc[i] < 0 )
		{
			if(l_out_of_poc_total_at == 0)
			{
				l_out_of_poc_total_at  =  d_init_spot + (i*l_interval);
			}
		}
	}

	for ( i_net_dwn = i_dwncnt  ; i_net_dwn >= 0  ; i_net_dwn -- )
  {
		d_out_of_pocket_dwn = 0.0;

		if( d_arr_net_total[i_net_dwn] < 0)
    {
      d_out_of_pocket_dwn = d_arr_net_total[i_net_dwn]+  d_total_mrgn_blocked +	d_total_opt_oblgtn;

      if(d_out_of_pocket_dwn > 0 )
      {
        d_out_of_pocket_dwn = 0.0;
      }
    }
	
		d_arr_total_opoc[i_net_dwn]	=	d_out_of_pocket_dwn;
		
		if (d_arr_total_opoc[i_net_dwn] < 0 )
    {
      if(l_out_of_poc_total_dwn == 0)
      {
        l_out_of_poc_total_dwn =  d_init_spot + (i_net_dwn * l_interval);
      }
    }

  }

  for ( i_net_up = i_upcnt ; i_net_up <= 9 ; i_net_up ++  )
  {
  	d_out_of_pocket_up = 0.0;

    if( d_arr_net_total[i_net_up] < 0)
    {
      d_out_of_pocket_up = d_arr_net_total[i_net_up]+  d_total_mrgn_blocked +	d_total_opt_oblgtn;

      if(d_out_of_pocket_up > 0 )
      {
        d_out_of_pocket_up = 0.0;
      }
    }

    d_arr_total_opoc[i_net_up] = d_out_of_pocket_up;

    if (d_arr_total_opoc[i_net_up] < 0 )
    {
      if(l_out_of_poc_total_up == 0)
      {
        l_out_of_poc_total_up =  d_init_spot + (i_net_up	*l_interval);
      }
    }
  }
	
	NULLTERM(c_netpnl);
	NULLTERM(c_opoc_total);

	c_status_flg = 'C';	
	
	if(DEBUG_MSG_LVL_3)
	{
    fn_userlog(c_ServiceName,"**************Adding TOTAL for :%s:*************",c_match_acc.arr);
    fn_userlog(c_ServiceName,"Output c_status_flg is :%c:",c_status_flg);
   	fn_userlog(c_ServiceName,"Output c_xchng_cd is  :%s: ",c_xchng_cd);
   	fn_userlog(c_ServiceName,"Output d_grs_allctn is  :%lf: ",d_grs_allctn);
   	fn_userlog(c_ServiceName,"Output d_free_limit is  :%lf: ",d_free_limit);
   	fn_userlog(c_ServiceName,"Output l_num_levels is  :%ld: ",l_num_levels);
   	fn_userlog(c_ServiceName,"Output l_interval is  :%ld: ",l_interval);
   	fn_userlog(c_ServiceName,"Output d_init_spot is  :%lf: ",d_init_spot);
   	fn_userlog(c_ServiceName,"Output l_total_quantity is  :%ld: ",l_total_quantity);
   	fn_userlog(c_ServiceName,"Output d_total_opt_oblgtn is  :%lf: ",d_total_opt_oblgtn);
   	fn_userlog(c_ServiceName,"Output d_total_mrgn_blocked is  :%lf: ",d_total_mrgn_blocked);
   	fn_userlog(c_ServiceName,"Output c_netpnl is  :%s: ",c_netpnl);
   	fn_userlog(c_ServiceName,"Output c_opoc_total is  :%s: ",c_opoc_total);
   	fn_userlog(c_ServiceName,"Output l_out_of_poc_total_at is  :%ld: ",l_out_of_poc_total_at);
    fn_userlog(c_ServiceName,"c_opoc_total is :%s:",c_opoc_total );
    fn_userlog(c_ServiceName,"l_out_of_poc_total_at is :%ld:",l_out_of_poc_total_at );
    fn_userlog(c_ServiceName,"******************************************************");
	}
	
	i_err[0]= Fadd32( ptr_fml_Obuf, FFO_EBA_MTCH_ACT_NO, (char *)c_match_acc.arr, 0 );
  i_ferr [ 0 ] = Ferror32;
	i_err[1]= Fadd32( ptr_fml_Obuf, FFO_XCHNG_CD, (char *)c_xchng_cd, 0 );
  i_ferr [ 1 ] = Ferror32;
	i_err[2]= Fadd32( ptr_fml_Obuf, FFO_AMOUNT, (char *)&d_grs_allctn, 0 );
  i_ferr [ 2 ] = Ferror32;
	i_err[3]= Fadd32( ptr_fml_Obuf, FFO_LIMIT, (char *)&d_free_limit, 0 );
  i_ferr [ 3 ] = Ferror32;
	i_err[4]= Fadd32( ptr_fml_Obuf, FFO_COUNT,(char *)&l_num_levels, 0 );
  i_ferr [ 4 ] = Ferror32;
	i_err[5]= Fadd32( ptr_fml_Obuf, FFO_INTERVAL,(char *)&l_interval, 0 );
  i_ferr [ 5 ] = Ferror32;
	i_err[6]= Fadd32( ptr_fml_Obuf, FFO_INDEX, (char *)&d_init_spot, 0 );
  i_ferr [ 6 ] = Ferror32;
  i_err[6]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_QTY,	(char *)&l_total_quantity, 0);
  i_ferr [ 6 ] = Ferror32;
	i_err[7]= Fadd32( ptr_fml_Obuf, FFO_MAX_PROFIT, (char *)c_netpnl, 0 );
  i_ferr [ 7 ] = Ferror32;
	i_err[8]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_VAL, (char *)&d_total_opt_oblgtn , 0 );
  i_ferr [ 8 ] = Ferror32;
	i_err[9]= Fadd32( ptr_fml_Obuf, FFO_ADD_MRGN_AMT, (char *)&d_total_mrgn_blocked, 0 );
  i_ferr [ 9 ] = Ferror32;
  i_err[10]= Fadd32( ptr_fml_Obuf, FFO_STATUS_FLG, (char *)&c_status_flg, 0);
  i_ferr [ 10 ] = Ferror32;
  i_err[11]= Fadd32( ptr_fml_Obuf, FFO_SPL_FLG, (char *)&c_spl_flg, 0);
  i_ferr [ 11 ] = Ferror32;
	i_err[12]= Fadd32( ptr_fml_Obuf, FFO_PRDCT_TYP, (char *)&c_prdct_typ, 0);
  i_ferr [ 12 ] = Ferror32;
  i_err[13]= Fadd32( ptr_fml_Obuf, FFO_UNDRLYNG, (char *)c_prev_undrlyng, 0 );
  i_ferr [ 13 ] = Ferror32;
  i_err[14]= Fadd32( ptr_fml_Obuf, FFO_EXPRY_DT, (char *)c_expry_dt.arr, 0);
  i_ferr [ 14 ] = Ferror32;
  i_err[15]= Fadd32( ptr_fml_Obuf, FFO_OPT_TYP, (char *)&c_opt_typ, 0);
  i_ferr [ 15 ] = Ferror32;
  i_err[16]= Fadd32( ptr_fml_Obuf, FFO_EXER_TYP, (char *)&c_exer_typ, 0);
  i_ferr [ 16 ] = Ferror32;
  i_err[17]= Fadd32( ptr_fml_Obuf, FFO_STRIKE_PRC, (char *)&d_strk_prc, 0);
  i_ferr [ 17 ] = Ferror32;
	i_err[18]= Fadd32( ptr_fml_Obuf, FFO_OPNPSTN_FLW, (char *)&c_ordr_flw, 0);
  i_ferr [ 18 ] = Ferror32;
	/** i_err[19]= Fadd32( ptr_fml_Obuf,  FFO_EFF_LTP, (char *)&d_currnt_premium , 0 );	Commented In Ver 1.1		***/

	i_err[19]= Fadd32( ptr_fml_Obuf,  FFO_EFF_LTP, (char *)&d_ltp_prc, 0 );			/***	Ver	1.1	***/
  i_ferr [ 19 ] = Ferror32;

	i_err[20]= Fadd32( ptr_fml_Obuf,FFO_PRC_INDCTR , (char *)&c_prc_indctr, 0 );	
  i_ferr [ 20 ] = Ferror32;

	/*** Ver 1.2 Starts ***/

   i_err[21]  = Fadd32( ptr_fml_Obuf,FFO_BOARD_LOT_QTY, (char *)&l_lot_size, 0 );
   i_ferr[21] = Ferror32;

   /*** Ver 1.2 Ends   ***/	

	
	/*** for(j=0;j<21;j++)			***  Ver 1.1 *** commented In Ver 1.2 ***/
	for(j=0;j<22;j++)			/***  Ver 1.2 ***/
  {
  	if(i_err[j] == -1)
    {
    	fn_errlog( c_ServiceName, "S31360",Fstrerror32(i_ferr[j]),c_err_msg);
      fn_userlog(c_ServiceName,"Error in adding output to FML,Fadd32 field %d ",j);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_Rbuf);
      tpfree((char *)ptr_fml_Obuf);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
  }

	if(c_usr_flg != 'C')
	{
		i_err[0]= Fadd32( ptr_fml_Obuf, FFO_BRK_EVN_PT, (char *)c_opoc_total, 0 );
  	i_ferr [ 0 ] = Ferror32;

		i_err[1]= Fadd32( ptr_fml_Obuf, FFO_CA_LVL, (char *)&l_out_of_poc_total_at, 0 );
  	i_ferr [ 1 ] = Ferror32;

		i_err[1]= Fadd32( ptr_fml_Obuf,FFO_HGH_INDX_VAL , (char *)&l_out_of_poc_total_up, 0 );			/***	Ver	1.1	***/
    i_ferr [ 1 ] = Ferror32;

		i_err[3]= Fadd32( ptr_fml_Obuf,FFO_LOW_INDX_VAL , (char *)&l_out_of_poc_total_dwn, 0 );			/***	Ver	1.1	***/
    i_ferr [ 3 ] = Ferror32;

		for(j=0;j<2;j++)
  	{
  		if(i_err[j] == -1)
    	{
    		fn_errlog( c_ServiceName, "S31365",Fstrerror32(i_ferr[j]),c_err_msg);
      	fn_userlog(c_ServiceName,"Error in adding output to FML,Fadd32 field %d ",j);
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	tpfree((char *)ptr_fml_Sbuf);
      	tpfree((char *)ptr_fml_Rbuf);
      	tpfree((char *)ptr_fml_Obuf);
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     	}
  	}
	}

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree((char *)ptr_fml_Sbuf);
    tpfree((char *)ptr_fml_Rbuf);
    tpfree((char *)ptr_fml_Obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	tpfree((char *)ptr_fml_Ibuf);

  fn_userlog(c_ServiceName,"*****Service completed succesfully********************");
  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
}

void uppercase_calc( char* c_input_str)
{
  int i, length;
  length = strlen(c_input_str);
  for(i=0;i<=length;i++)
  {
		if(c_input_str[i] > 96 )
    {
      c_input_str[i] =c_input_str[i]-32;
    }
  }
	c_input_str[length] = '\0';
  return;
}
