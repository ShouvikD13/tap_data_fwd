/*                                                                            */
/*   Program      :   SFO_MKT_TRCKR                                           */
/*                                                                            */
/*   Input        :   FFO_USR_ID																							*/ 
/*																																						*/
/*   Description	:		To collect the values to be shown on NSE market tracker	*/                   
/*                                                                            */
/*	 Log          : 1.0 01-Jan-2011  Shamili Dalvi.														*/ 
/*	 Log					: 1.1	10-May-2011	 Shamili Dalvi.														*/
/*	 Log					: 1.2	22-Sep-2011	 Shamili Dalvi.														*/
/*	 Log					: 1.3 26-Sep-2011	 Shamili Dalvi														*/
/*	 Log				  : 1.4	25-Nov-2011	 Shamili Dalvi.														*/
/*	 Log				  : 1.5	10-Jan-2012	 Shamili Dalvi.														*/
/*   Log					: 1.6 29-Jun-2012  Shamili Dalvi.														*/
/*   Log					: 1.6 09-Jul-2012  Shamili Dalvi.														*/
/*   Log					: 2.2 30-Dec-2014  Samip M																	*/
/*   Log          : 2.3 05-Aug-2015  Anand Dhopte                             */
/*   Log          : 2.4 10-Mar-2017  Anand Dhopte/ Vishal Borhade             */
/*   Log          : VQC 19-Aug-2016  Anand Dhopte                             */
/******************************************************************************/
/*  1.0  -  New release                                                       */
/*  1.1  -  Bugfix																														*/
/*	1.2	 -  Global Indices																										*/
/*	1.3	 -  Option Chain																											*/
/*	1.4	 -  Expiry date bug fixing																						*/
/*	1.5	 -  BSE ORS																														*/
/*  1.6  -  Default Exch code is set as 'NSE' if Exch code field not present  */ 
/*  1.7  -  exchange code is changed to NFO instead of NSE.										*/ 
/*  2.0  -  Introduction of Exchange code in the where clause									*/
/*  2.2	 -  View to FML changes																								*/
/*  2.3  -  Contract Master and Trade Quote Table Merger Changes              */
/*  2.4  -  Optimization Changes                                              */
/*  VQC  -  VERSION QUALITY CONTROL CHANGES                                   */ 
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>

#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
/** #include <fo_view_def.h> *** Commented for Ver 2.2 ***/
#include <fo_view_def.h>		/** Ver 2.2 **/
#include <fml_rout.h>       /** Ver 2.2 **/

#include <fn_log.h>
#include <fn_session.h>

#include <fn_tuxlib.h>
/* #include <fn_session.h> * Commented in VQC as it included twice */
#include <fn_read_debug_lvl.h>

#define TOTAL_FML 50 

	/* int		i_loop; Commented in VQC and declared locally inside service */
	int   i =0;
 /*	int   i_date_diff = 0; Commented in VQC and declared and initialized locally in fn_get_qt funtion */ 

  /*char  c_prdct_typ;*/
  char  c_prdct_typ1 = '\0'; /* DataType changed from character array[2] to char and variable initialized in VQC*/   
  char  c_ind_stk = '\0';   /* variable initialized in VQC */
 /* char  c_expry_dt[23]; Commented in VQC and declared locally in fn_get_qt and fn_opt_chain funtion */
  char  c_opt_typ					 = '*' ;           	  
  char  c_mkt_tablename[5];
	/*char  c_expry_dt_arr[15][12];			*/     /** Ver 1.2 **/
	char  c_expry_dt_arr[25][12];							 /** Ver 1.2 **/
	char  c_expry_dt_arr_bse[25][12];					 /** Ver 1.5 **/
	char  c_expiry_dt[300];
	char  c_expiry_dt_bse[300];								 /** Ver 1.5 **/
	char  c_expiry_dt_min[23];								 /** Ver 1.4 **/
	char  c_expiry_dt_min_bse[23];						 /** Ver 1.5 **/
	char	c_money_mkt ='\0' ;		 /** Ver 1.3 **/ /* variable initialized in VQC */

  long  l_tot_cntrct 			 = 0;           		 

  double d_undrlyng_val 	 = 0.0;         		
 /*	double d_days_to_exp 		 = 0.0;  Commented in VQC and declared and initialized locally in fn_get_qt funtion */
 /*	double d_days_to_exp_temp = 0.0; Commented in VQC and declared and initialized locally in fn_get_qt funtion */


void  trim(char *str);

int fn_shw_mkt_wtch( char *c_ServiceName, FBFR32 * ptr_fml_Ibuffer, long l_call_no );

int	fn_most_actv_und( char *c_ServiceName,FBFR32 * ptr_fml_Ibuffer,long l_call_no); 

int fn_most_actv_contr(char *c_ServiceName,FBFR32 * ptr_fml_Ibuffer,long l_call_no);

int fn_most_actv_call_put(char *c_ServiceName,FBFR32 * ptr_fml_Ibuffer,long l_call_no);

int fn_opt_chain(char *c_ServiceName,FBFR32 * ptr_fml_Ibuffer,long l_call_no);

int	fn_get_qt(char *c_ServiceName,FBFR32 * ptr_fml_Ibuffer,long l_call_no);

FBFR32 *ptr_fml_Ibuffer;
FBFR32 *ptr_fml_Obuffer;

EXEC SQL INCLUDE "table/ftq_fo_trd_qt.h";

/******************************************************************************/

void SFO_MKT_TRCKR(TPSVCINFO *rqst)
{


			EXEC SQL BEGIN DECLARE SECTION;
     /* int     i_err[TOTAL_FML];	Commented in VQC as this variable is declared locally also */ 	
     /* int     i_ferr[TOTAL_FML]; Commented in VQC as this variable is not used */
			int     i_returncode = 0;
			int			i_dt_count = 0;
      int     i_loop = 0;        /* Declared and initialized locally in VQC */   
      char    c_ServiceName[33];
			varchar c_err_msg[256]; /*Datatype changed from char to varchar in VQC and all occurence of c_err_msg changed to c_err_msg.arr*/
			char    c_table_name[5];
      long    l_call_no = 0;
			struct  vw_usr_prfl st_usr_prfl;
			EXEC SQL END DECLARE SECTION;

			struct  vw_err_msg  st_err_msg;

      /*** Commented in VQC as we are copying service name from input buffer ***
			strcpy(c_ServiceName,"SFO_MKT_TRCKR");
      ******/    

			INITDBGLVL(c_ServiceName);

      ptr_fml_Ibuffer = (FBFR32 *)rqst->data;
      strcpy( c_ServiceName, rqst->name );

/******************************************************************************/

			MEMSET(st_usr_prfl);
			
		  /*** Commented for Ver 2.2 *********	

  		i_returncode = Fvftos32( ptr_fml_Ibuffer, (char *) &st_usr_prfl, "vw_usr_prfl" );

		  ******* Ver 2.2 ******/

		  /*** Added for Ver 2.2 ***/

  		i_returncode = fn_unpack_fmltovar_dflt(c_ServiceName,
                                      c_err_msg.arr,
                                      ptr_fml_Ibuffer,
                                      10,
                                      FFO_USR_ID,(char *)st_usr_prfl.c_user_id, "*",
                                      FFO_SSSN_ID,(char *)&st_usr_prfl.l_session_id, "NULL",
                                      FFO_PIPE_ID,(char *)st_usr_prfl.c_pipe_id, "*",
                                      FFO_EBA_MTCH_ACT_NO,(char *)st_usr_prfl.c_cln_mtch_accnt, "*",
                                      FFO_DPID,(char *)st_usr_prfl.c_dp_id, "*",
                                      FFO_CLNT_DPID,(char *)st_usr_prfl.c_dp_clnt_id, "*",
                                      FFO_BNK_ACT_NO,(char *)st_usr_prfl.c_bnk_accnt_nmbr, "*",
                                      FFO_CLNT_CTGRY,(char *)&st_usr_prfl.l_clnt_ctgry, "-1",
                                      FFO_USR_FLG,(char *)&st_usr_prfl.l_usr_flg, "0",
                                      FFO_ROUT_CRT,(char *)st_usr_prfl.c_rout_crt, "*"
                                      );

  		/*** Ver 2.2 ***/

  		if ( i_returncode == -1 )
  		{
						fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg.arr  );
						Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
  		}

  		if (st_usr_prfl.l_session_id !=0)
  		{
    			i_returncode = fn_chk_sssn( c_ServiceName,
                                &st_usr_prfl,
                                &st_err_msg) ;

    			if ( i_returncode == -1 )
    			{
							fn_errlog( c_ServiceName, "S31010", LIBMSG, st_err_msg.c_err_msg );
      				Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
    			}
  		}


			/************* Expiry date selection for NSE **************/
		

			MEMSET(c_table_name);
			MEMSET(c_expry_dt_arr);

      /*** Commented in Ver 2.3 ***
			EXEC SQL
					 SELECT count(distinct(fcm_expry_dt))
					 INTO :i_dt_count
					 FROM	fcm_fo_cntrct_mstr
					 WHERE fcm_undrlyng = 'NIFTY';							** Ver 1.2 **
       
      ***/
      /*** Ver 2.3 Starts ***/

      EXEC SQL
           SELECT count(distinct(ftq_expry_dt))
           INTO :i_dt_count
           FROM ftq_fo_trd_qt
           WHERE ftq_undrlyng = 'NIFTY';

     
      /*** Ver 2.3 Ends   ***/

					 if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
           {
               fn_userlog( c_ServiceName,"Cannot get expiry dates for " );
               fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg.arr  );
               Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
               tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
           }

			for( i_loop = 0; i_loop < i_dt_count; i_loop++ )
    	{
      		MEMSET(c_expry_dt_arr[i_loop]);
    	}
    		  MEMSET(c_expiry_dt);
    		  MEMSET(c_expiry_dt_min);											/** Ver 1.4 **/

       /*** Commented in Ver 2.3 ***

    	 EXEC SQL
         SELECT  fcm_expry_dt
         INTO   :c_expry_dt_arr
         FROM    (
                   SELECT distinct(fcm_expry_dt)
                   FROM   fcm_fo_cntrct_mstr
									 WHERE  fcm_undrlyng = 'NIFTY'					** Ver 1.2 **
                   ORDER BY fcm_expry_dt
                 );
       ***/
       /*** Ver 2.3 Starts ***/

       EXEC SQL
         SELECT  ftq_expry_dt
         INTO   :c_expry_dt_arr
         FROM    (
                   SELECT distinct(ftq_expry_dt)
                   FROM   ftq_fo_trd_qt
                   WHERE  ftq_undrlyng = 'NIFTY'
                   ORDER BY ftq_expry_dt
                 ); 
        
       /*** Ver 2.3 Ends   ***/ 

     		if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
     		{
							 fn_userlog( c_ServiceName,"Cannot get expiry dates for " );
							 fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg.arr  );
							 Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
							 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
     		}


				strcpy(c_expiry_dt,c_expry_dt_arr[0]);
				strcpy(c_expiry_dt_min,c_expry_dt_arr[0]);		/** Ver 1.4 **/
				i = 0;

			  while(i < i_dt_count)
				{
				strcat(c_expiry_dt,"||");
				strcat(c_expiry_dt,c_expry_dt_arr[i+1]);
				i++;
				
				}


			 rtrim(c_expiry_dt_min);														/**1.4 **/
				

			
			if(DEBUG_MSG_LVL_3){	
			/*** fn_userlog(c_ServiceName,"c_expiry_dt aval :%s:",c_expiry_dt); ***			** Ver 1.2 **/
			fn_userlog(c_ServiceName,"c_expiry_dt_min  :%s:",c_expiry_dt_min);}			/** Ver 1.4 **/ /*** Log included in debug level in VQC ***/



			 /************* Expiry date selection for BSE  1.5 **************/


				MEMSET(c_expry_dt_arr_bse);

        /*** Commented in Ver 2.3 ***
        EXEC SQL
           SELECT count(distinct(fcm_expry_dt))
           INTO :i_dt_count
           FROM fcm_fo_cntrct_mstr
           WHERE fcm_undrlyng = 'BSESEN';         
        ***/
        /*** Ver 2.3 Starts ***/

        EXEC SQL
           SELECT count(distinct(ftq_expry_dt))
           INTO :i_dt_count
           FROM ftq_fo_trd_qt
           WHERE ftq_undrlyng = 'BSESEN';
     
        /*** Ver 2.3 Ends   ***/
           if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
           {
               fn_userlog( c_ServiceName,"Cannot get expiry dates for " );
               fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg.arr  );
               Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
               tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
           }

					for( i_loop = 0; i_loop < i_dt_count; i_loop++ )
      		{
          		MEMSET(c_expry_dt_arr_bse[i_loop]);
      		}

          MEMSET(c_expiry_dt_bse);
          MEMSET(c_expiry_dt_min_bse);      

       /*** Commented in Ver 2.3 ***
       EXEC SQL
         SELECT  fcm_expry_dt
         INTO   :c_expry_dt_arr_bse
         FROM    (
                   SELECT distinct(fcm_expry_dt)
                   FROM   fcm_fo_cntrct_mstr
                   WHERE  fcm_undrlyng = 'BSESEN'  
                   ORDER BY fcm_expry_dt
                 );
 
       ***/
       /*** Ver 2.3 Starts ***/

        EXEC SQL
         SELECT  ftq_expry_dt
         INTO   :c_expry_dt_arr_bse
         FROM    (
                   SELECT distinct(ftq_expry_dt)
                   FROM   ftq_fo_trd_qt
                   WHERE  ftq_undrlyng = 'BSESEN'
                   ORDER BY ftq_expry_dt
                 );

        /*** Ver 2.3 Ends   ***/

			if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
        {
               fn_userlog( c_ServiceName,"Cannot get expiry dates for " );
               fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg.arr  );
               Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
               tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
        }
   
        strcpy(c_expiry_dt_bse,c_expry_dt_arr_bse[0]);
        strcpy(c_expiry_dt_min_bse,c_expry_dt_arr_bse[0]);    
        i = 0;

        while(i < i_dt_count)
        {
        strcat(c_expiry_dt_bse,"||");
        strcat(c_expiry_dt_bse,c_expry_dt_arr_bse[i+1]);
        i++;

        }


       rtrim(c_expiry_dt_min_bse);    
       if (DEBUG_MSG_LVL_3)  /* Debug level added in VQC */
       {             
        fn_userlog(c_ServiceName,"c_expiry_dt_min BSE  :%s:",c_expiry_dt_min_bse);
       }

			if(Fget32(ptr_fml_Ibuffer,FFO_PRDCT_DESC,0,(char *)c_table_name,0) == -1)
  		{
						if(Ferror32 != FNOTPRES)
						{

											fn_errlog( c_ServiceName, "S31035", FMLMSG, c_err_msg.arr  );
                    /*  tpfree ( ( char * )ptr_fml_Obuffer); commented in VQC as memeory is released before allocation */
											Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
											tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );

						}

						if(Ferror32 == FNOTPRES)
						{
											/* The service is called normally and not for any search criteria */
											l_call_no = 0;

						}
		  }
  		else
  	  {
							/* The service is called for a particualr table data i.e for a search criteria */
							l_call_no = 1;
		  }
			
/******************************************************************************/

		 if(l_call_no == 0)
		 {

         if (DEBUG_MSG_LVL_3)  /* Debug level Added in VQC */
         {   
					fn_userlog(c_ServiceName,"--------Checking General Page -----");
         }
				
					/* Initializing output buffer */

        	ptr_fml_Obuffer = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*200 );
        	if ( ptr_fml_Obuffer == NULL )
        	{
              fn_errlog( c_ServiceName, "S31040", TPMSG, c_err_msg.arr  );
              /*** tpfree ( ( char * )ptr_fml_Obuffer); Commented in VQC as memory is released before allocation ***/
              Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
        	}


				 if(Fadd32(ptr_fml_Obuffer,FML_AVL_DT,(char *)c_expiry_dt,0) == -1)
				 {
				 			fn_errlog( c_ServiceName, "S31045",FMLMSG,c_err_msg.arr);
              tpfree ( ( char * )ptr_fml_Obuffer);
							Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );

				 }


				 if(Fadd32(ptr_fml_Obuffer,FML_EX_BONUS_DT,(char *)c_expiry_dt_bse,0) == -1) /*** 1.5 ***/
         {
              fn_errlog( c_ServiceName, "S31050",FMLMSG,c_err_msg.arr);
              tpfree ( ( char * )ptr_fml_Obuffer);
              Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );

         }
				
				 i_returncode = fn_shw_mkt_wtch(c_ServiceName,ptr_fml_Ibuffer,l_call_no);

         if ( i_returncode == -1 )
         {
									fn_errlog( c_ServiceName, "S31055", DEFMSG, c_err_msg.arr  );
              		tpfree ( ( char * )ptr_fml_Obuffer);	
									Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
         }

				 i_returncode=fn_opt_chain(c_ServiceName,ptr_fml_Ibuffer,l_call_no);

         if ( i_returncode == -1 )
         {
                  fn_errlog( c_ServiceName, "S31060", DEFMSG, c_err_msg.arr  );
                  tpfree ( ( char * )ptr_fml_Obuffer);
                  Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
         } 


				 i_returncode=fn_most_actv_und(c_ServiceName,ptr_fml_Ibuffer,l_call_no);

         if ( i_returncode == -1 )
         {
                  fn_errlog( c_ServiceName, "S31065", DEFMSG, c_err_msg.arr  );
                  tpfree ( ( char * )ptr_fml_Obuffer);
                  Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
         } 
			

				 i_returncode=fn_most_actv_contr(c_ServiceName,ptr_fml_Ibuffer,l_call_no);

         if ( i_returncode == -1 )
         {
                  fn_errlog( c_ServiceName, "S31070", DEFMSG, c_err_msg.arr  );
                  tpfree ( ( char * )ptr_fml_Obuffer);
                  Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
         }
  
 
				 i_returncode=fn_most_actv_call_put(c_ServiceName,ptr_fml_Ibuffer,l_call_no);

         if ( i_returncode == -1 )
         {
                  fn_errlog( c_ServiceName, "S31075", DEFMSG, c_err_msg.arr  );
                  tpfree ( ( char * )ptr_fml_Obuffer);
                  Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
         }

		 }


/******************************************************************************/

		 if(l_call_no == 1)
     {

         if (DEBUG_MSG_LVL_3)  /* Added in VQC */
         { 
				  fn_userlog(c_ServiceName,"--------Checking Special search-----");
         } 

				 /* Initializing output buffer */

          ptr_fml_Obuffer = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*200 );
          if ( ptr_fml_Obuffer == NULL )
          {
              fn_errlog( c_ServiceName, "S31080", TPMSG, c_err_msg.arr  );
              /*** tpfree ( ( char * )ptr_fml_Obuffer); Commented in VQC as memory is released before allocation ***/
              Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
          }


				  if(strcmp(c_table_name,"GQT") == 0)
				  {

								 i_returncode=fn_get_qt(c_ServiceName,ptr_fml_Ibuffer,l_call_no);

								 if ( i_returncode == -1 )
								 {
													fn_errlog( c_ServiceName, "S31085", DEFMSG, c_err_msg.arr  );
                  				tpfree ( ( char * )ptr_fml_Obuffer);
													Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
													tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
								 } 

				  }
					else if(strcmp(c_table_name,"SMW") == 0)
					{

								 i_returncode=fn_shw_mkt_wtch(c_ServiceName,ptr_fml_Ibuffer,l_call_no);

                 if ( i_returncode == -1 )
                 {
                          fn_errlog( c_ServiceName, "S31090", DEFMSG, c_err_msg.arr  );
                          tpfree ( ( char * )ptr_fml_Obuffer);
                          Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
                          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
                 }

					}
					else if(strcmp(c_table_name,"MAU") == 0)
					{

									i_returncode=fn_most_actv_und(c_ServiceName,ptr_fml_Ibuffer,l_call_no);

                 if ( i_returncode == -1 )
                 {
                          fn_errlog( c_ServiceName, "S31095", DEFMSG, c_err_msg.arr  );
                          tpfree ( ( char * )ptr_fml_Obuffer);
                          Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
                          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
                 }
					}
					else if(strcmp(c_table_name,"MAC") == 0)
					{

								i_returncode=fn_most_actv_contr(c_ServiceName,ptr_fml_Ibuffer,l_call_no);

                 if ( i_returncode == -1 )
                 {
                          fn_errlog( c_ServiceName, "S31100", DEFMSG, c_err_msg.arr  );
                          tpfree ( ( char * )ptr_fml_Obuffer);
                          Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
                          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
                 }


					}
					else if(strcmp(c_table_name,"OC") == 0)
					{

								 i_returncode=fn_opt_chain(c_ServiceName,ptr_fml_Ibuffer,l_call_no);

                 if ( i_returncode == -1 )
                 {
                          fn_errlog( c_ServiceName, "S31105", DEFMSG, c_err_msg.arr  );
                          tpfree ( ( char * )ptr_fml_Obuffer);
                          Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
                          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
                 }
					}
					else if(strcmp(c_table_name,"MACP") == 0)
					{

								 i_returncode=fn_most_actv_call_put(c_ServiceName,ptr_fml_Ibuffer,l_call_no);

                 if ( i_returncode == -1 )
                 {
                          fn_errlog( c_ServiceName, "S31110", DEFMSG, c_err_msg.arr  ); 
                          tpfree ( ( char * )ptr_fml_Obuffer);
                          Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 ); 
                          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
                 }
					}
					else
					{

								fn_userlog(c_ServiceName,"Invalid type ");
								fn_errlog( c_ServiceName, "S31115","", c_err_msg.arr  );
                tpfree ( ( char * )ptr_fml_Obuffer);	
								Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );

					}

     }


/******************************************************************************/

			
			tpfree ( ( char * )ptr_fml_Ibuffer);
     
      if (DEBUG_MSG_LVL_3)  /* Debug level Added in VQC */
      {
			 fn_userlog(c_ServiceName,"STAGE - FINAL - EXECUTION COMPLETE");
      }
  
  		tpreturn(TPSUCCESS,0,(char *)ptr_fml_Obuffer,0L,0); 


}


/******************************************************************************/


int fn_shw_mkt_wtch(   char   	*c_ServiceName,
                       FBFR32 	*ptr_fml_Ibuffer,
                       long   	l_indicator
                     )
{
	EXEC SQL BEGIN DECLARE SECTION;
	sql_cursor   cur_mkt_SMW;             
 /***  int  				 i = 0;   *** commented in VQC ***/
  int  				 i_err[TOTAL_FML];
  int  			   i_count = 0;
  int  				 i_cnt = 0;
  long 				 l_spot_prc = 0;
  char 				 c_tablename[5];
	varchar 		 c_err_msg[256];  /* Datatype changed from char to varchar in VQC */
	char				 c_mkt_undrlyng[7];
	double  		 d_turnovr         = 0.0;
	double  		 d_tot_turnover		 = 0.0;
	EXEC SQL END DECLARE SECTION;

  strcpy( c_tablename,"SMW" );
	MEMSET(c_mkt_undrlyng);

	EXEC SQL ALLOCATE :cur_mkt_SMW;

	if( l_indicator == 0 )
  {
			EXEC SQL EXECUTE
      BEGIN
      OPEN :cur_mkt_SMW FOR
			SELECT ftq_indstk,
						 ftq_expry_dt,
						 nvl(ftq_strk_prc,0),
						 nvl(ftq_opt_typ,'*'),
						 ftq_exer_typ,  
             :c_tablename,
						 ftq_prdct_typ,
						 ftq_undrlyng,
             nvl(ftq_opn_prc,0),
             nvl(ftq_hgh_prc,0),
             nvl(ftq_low_prc,0),
             nvl(ftq_prvs_cls_prc,0),
             nvl(ftq_lst_trd_prc,0),
						 nvl(ftq_min_lot_qty,0),
						 nvl(ftq_tot_val_trdd,0),
						 nvl(ftq_tot_qty_trdd,0),
             CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0 
						 ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END
      FROM   ftq_fo_trd_qt
      WHERE  ftq_xchng_cd = 'NFO'
        AND  ftq_tot_qty_trdd > 0     /*** Added in Ver 2.4 for Optimization ***/
      ORDER BY 17 DESC ;

	 		END;
   	  END-EXEC;

	}
	else if( l_indicator != 0 ) 
	{

			if(Fget32(ptr_fml_Ibuffer,FFO_CTGRY_INDSTK,0,(char *)&c_ind_stk,0) == -1)
			{
					fn_errlog( c_ServiceName, "S31120",FMLMSG,c_err_msg.arr);
				  EXEC SQL CLOSE :cur_mkt_SMW; /*** Added in VQC ***/
        	EXEC SQL FREE :cur_mkt_SMW;
          return -1;
			}

			if(c_ind_stk == 'I' )
			{	
							if(DEBUG_MSG_LVL_3){
							fn_userlog(c_ServiceName,"==================== I ===================");}

							i_err[0] = Fget32(ptr_fml_Ibuffer,FFO_UNDRLYNG,0,(char *)c_mkt_undrlyng,0);
							i_err[1] = Fget32(ptr_fml_Ibuffer,FFO_PRDCT_TYP,0,(char *)&c_prdct_typ1,0);

							for( i_cnt = 0; i_cnt < 2; i_cnt++ )
							{
											 if( i_err[i_cnt] == -1 )
											 {
												 fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
												 fn_errlog( c_ServiceName, "S31125",FMLMSG,c_err_msg.arr);
                         EXEC SQL CLOSE :cur_mkt_SMW; /*** Added in VQC ***/
												 EXEC SQL FREE :cur_mkt_SMW;
												 return -1;
											 }

							}

			}
			else 
			{
						
						 if(DEBUG_MSG_LVL_3){
					   fn_userlog(c_ServiceName,"==================== S ===================");}

						 if(i_err[0] = Fget32(ptr_fml_Ibuffer,FFO_PRDCT_TYP,0,(char *)&c_prdct_typ1,0) == -1)
						 {
						 			fn_errlog( c_ServiceName, "S31130",FMLMSG,c_err_msg.arr);
                  EXEC SQL CLOSE :cur_mkt_SMW; /*** Added in VQC ***/	
									EXEC SQL FREE :cur_mkt_SMW;
                  return -1;
						 }

					   strcpy(c_mkt_undrlyng,"%");

			}

		/*	trim(c_prdct_typ1); commented in VQC */
			trim(c_mkt_undrlyng);

			if(DEBUG_MSG_LVL_3){
			fn_userlog(c_ServiceName,"c_mkt_undrlyng:%s:",c_mkt_undrlyng);
			fn_userlog(c_ServiceName,"sql_ftq_undrlyng:%s:",sql_ftq_undrlyng);
			fn_userlog(c_ServiceName,"c_prdct_typ1 :%c:",c_prdct_typ1);
			}


			EXEC SQL EXECUTE
      BEGIN
      OPEN :cur_mkt_SMW FOR
      SELECT ftq_indstk, 
						 ftq_expry_dt,
             nvl(ftq_strk_prc,0),
             nvl(ftq_opt_typ,'*'),
             ftq_exer_typ,
             :c_tablename,
						 ftq_prdct_typ,
						 ftq_undrlyng,
             nvl(ftq_opn_prc,0),
             nvl(ftq_hgh_prc,0),
             nvl(ftq_low_prc,0),
             nvl(ftq_prvs_cls_prc,0),
             nvl(ftq_lst_trd_prc,0),
						 nvl(ftq_min_lot_qty,0),
						 nvl(ftq_tot_val_trdd,0),
						 nvl(ftq_tot_qty_trdd,0),
             CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0 
						 ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END
      FROM   ftq_fo_trd_qt
      WHERE  ftq_xchng_cd  			= 'NFO'
			AND	   ftq_prdct_typ 			like  :c_prdct_typ1
			AND	   ftq_undrlyng	like decode(:c_mkt_undrlyng,'%','%',rpad(:c_mkt_undrlyng,6,' '))
			AND		 ftq_indstk	like decode(:c_ind_stk,'A','%',:c_ind_stk)
      AND    ftq_tot_qty_trdd > 0     /*** Added in Ver 2.4 for Optimization ***/ 
      ORDER BY 17 DESC;

				
	  END;
    END-EXEC;
	}

	if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31135", SQLMSG, c_err_msg.arr  );
    EXEC SQL CLOSE :cur_mkt_SMW; /*** Added in VQC ***/
    EXEC SQL FREE :cur_mkt_SMW;
		return -1;
  }

	i_count = 0;

	while(1)
  {

					EXEC SQL
          FETCH :cur_mkt_SMW
          INTO  :sql_ftq_indstk, 
								:sql_ftq_expry_dt, 
								:sql_ftq_strk_prc,
								:sql_ftq_opt_typ,
								:sql_ftq_exer_typ,
                :c_mkt_tablename,
								:sql_ftq_prdct_typ,
								:sql_ftq_undrlyng,
								:sql_ftq_opn_prc,
                :sql_ftq_hgh_prc,
                :sql_ftq_low_prc,
                :sql_ftq_prvs_cls_prc,
                :sql_ftq_lst_trd_prc,
								:sql_ftq_min_lot_qty,
								:d_turnovr,
                :sql_ftq_tot_qty_trdd,
                :l_tot_cntrct;


					if(SQLCODE != 0) 
        	{

							if(SQLCODE == NO_DATA_FOUND)
							{
								if(DEBUG_MSG_LVL_3){	
								fn_userlog(c_ServiceName," SMW no data found");}
								break;	
							}

              fn_errlog(c_ServiceName, "S31140", SQLMSG,c_err_msg.arr);
              EXEC SQL CLOSE :cur_mkt_SMW; /*** Added in VQC ***/
              EXEC SQL FREE :cur_mkt_SMW;
              return -1;
        	}

				  trim(sql_ftq_undrlyng);

					d_tot_turnover = (double)(sql_ftq_tot_qty_trdd *1.0 *( sql_ftq_lst_trd_prc + sql_ftq_strk_prc)); 
    

			    if(DEBUG_MSG_LVL_3)  
          {
        	 fn_userlog( c_ServiceName,"SMW:c_mkt_tablename:%s:"			,c_mkt_tablename);
        	 fn_userlog( c_ServiceName,"SMW:sql_ftq_prdct_typ:%c:"		,sql_ftq_prdct_typ);
        	 fn_userlog( c_ServiceName,"SMW:sql_ftq_indstk:%c:"				,sql_ftq_indstk);
        	 fn_userlog( c_ServiceName,"SMW:sql_ftq_undrlyng:%s:" 		,sql_ftq_undrlyng);
        	 fn_userlog( c_ServiceName,"SMW:sql_ftq_expry_dt:%s:" 		,sql_ftq_expry_dt.arr);
           fn_userlog( c_ServiceName,"SMW:sql_ftq_strk_prc:%ld:"		,sql_ftq_strk_prc);
           fn_userlog( c_ServiceName,"SMW:sql_ftq_opt_typ:%c:"  		,sql_ftq_opt_typ);
           fn_userlog( c_ServiceName,"SMW:sql_ftq_exer_typ:%c:" 		,sql_ftq_exer_typ);
           fn_userlog( c_ServiceName,"SMW:sql_ftq_opn_prc:%ld:" 		,sql_ftq_opn_prc);
           fn_userlog( c_ServiceName,"SMW:sql_ftq_hgh_prc:%ld:" 		,sql_ftq_hgh_prc);
           fn_userlog( c_ServiceName,"SMW:sql_ftq_low_prc:%ld:" 		,sql_ftq_low_prc);
           fn_userlog( c_ServiceName,"SMW:sql_ftq_prvs_cls_prc:%ld:",sql_ftq_prvs_cls_prc);
           fn_userlog( c_ServiceName,"SMW:sql_ftq_lst_trd_prc:%ld:" ,sql_ftq_lst_trd_prc);
           fn_userlog( c_ServiceName,"SMW:l_tot_cntrct:%ld:"				,l_tot_cntrct);
           fn_userlog( c_ServiceName,"SMW:sql_ftq_tot_qty_trdd:%ld:",sql_ftq_tot_qty_trdd);
           fn_userlog( c_ServiceName,"SMW:d_tot_turnover:%lf:"			,d_tot_turnover);
						
          }

									EXEC SQL
									SELECT nvl(ltq_rt*100,0)
									INTO   :l_spot_prc
									FROM   ltq_trd_qt
									WHERE  ltq_xchng_cd = 'NSE'
									AND    ltq_stck_cd  = :sql_ftq_undrlyng;


				  if(SQLCODE != 0)
          {
              fn_errlog(c_ServiceName, "S31145", SQLMSG,c_err_msg.arr);
              EXEC SQL CLOSE :cur_mkt_SMW; /*** Added in VQC ***/
              EXEC SQL FREE :cur_mkt_SMW;
              return -1;
          }

      		d_undrlyng_val = (double)l_spot_prc;
			
					if(DEBUG_MSG_LVL_3)    {
					fn_userlog( c_ServiceName,"SMW:l_spot_prc :%ld",l_spot_prc);
					fn_userlog( c_ServiceName,"SMW:d_undrlyng_val:%lf",d_undrlyng_val);
					}

				  i_err[0]  = Fadd32 ( ptr_fml_Obuffer, FFO_PRDCT_DESC,( char *)c_mkt_tablename, 0 );

      	  /****  contract  details ****/
			
        	i_err[1] = Fadd32(ptr_fml_Obuffer,FFO_PRDCT_TYP,(char *)&sql_ftq_prdct_typ, 0);
        	i_err[2] = Fadd32(ptr_fml_Obuffer,FFO_UNDRLYNG,(char *)sql_ftq_undrlyng, 0);
					i_err[3] = Fadd32(ptr_fml_Obuffer,FFO_EXPRY_DT,(char *)sql_ftq_expry_dt.arr,0);
					i_err[4] = Fadd32(ptr_fml_Obuffer,FFO_CTGRY_INDSTK,(char *)&sql_ftq_indstk,0);
        	i_err[5] = Fadd32(ptr_fml_Obuffer,FFO_STRK_PRC,(char *)&sql_ftq_strk_prc,0);
					i_err[6] = Fadd32(ptr_fml_Obuffer,FFO_OPT_TYP,(char *)&sql_ftq_opt_typ,0);
					i_err[7] = Fadd32(ptr_fml_Obuffer,FFO_EXER_TYP,(char *)&sql_ftq_exer_typ,0);

      	 /**** price details ****/

        	i_err[8] = Fadd32(ptr_fml_Obuffer, FFO_HGH_PRC,(char *)&sql_ftq_hgh_prc, 0);
        	i_err[9] = Fadd32(ptr_fml_Obuffer, FFO_LOW_PRC,(char *)&sql_ftq_low_prc, 0);
        	i_err[10] = Fadd32(ptr_fml_Obuffer, FFO_OPN_PRC,(char *)&sql_ftq_opn_prc, 0);
          i_err[11] = Fadd32(ptr_fml_Obuffer, FFO_PRVS_CLS_PRC,(char *)&sql_ftq_prvs_cls_prc, 0);
          i_err[12] = Fadd32(ptr_fml_Obuffer, FFO_LST_TRD_PRC,(char *)&sql_ftq_lst_trd_prc, 0);

      	 /**** Extra details ****/

      		i_err[13] = Fadd32 ( ptr_fml_Obuffer, FFO_TOT_QTY_TRDD,( char *)&l_tot_cntrct, 0);
      		i_err[14] = Fadd32 ( ptr_fml_Obuffer, FFO_SOMC_PRCNT,(char *)&d_tot_turnover, 0 );
      		i_err[15] = Fadd32 ( ptr_fml_Obuffer, FFO_BASE_ORD_VAL,(char *)&d_undrlyng_val, 0 );

					i_err[16]= Fadd32(ptr_fml_Obuffer,FML_IDD_BST_BID_QTY,(char *)&sql_ftq_tot_bid_qty, 0);
      		i_err[17]= Fadd32(ptr_fml_Obuffer,FML_IDD_BST_BID_PRC,(char *)&sql_ftq_bst1_bid_prc,0);
      		i_err[18]= Fadd32(ptr_fml_Obuffer,FML_IDD_BST_OFFR_QTY,(char *)&sql_ftq_tot_offr_qty,0);
      		i_err[19]= Fadd32(ptr_fml_Obuffer,FML_IDD_BST_OFFR_PRC,(char *)&sql_ftq_bst1_offr_prc,0);

      		i_err[20] = Fadd32(ptr_fml_Obuffer,FFO_CRNT_OI,(char *)&sql_ftq_crnt_oi,0);
      		i_err[21] = Fadd32(ptr_fml_Obuffer,FFO_CHNG_OI,(char *)&sql_ftq_chng_oi,0);
					i_err[22]= Fadd32(ptr_fml_Obuffer, FFO_MIN_LOT_QTY,(char*)&sql_ftq_min_lot_qty,0);

					/******* Ver 1.3 Starts ******/
					i_err[23]= Fadd32(ptr_fml_Obuffer,FFO_CHNG_PRVS_CLS,(char *)&sql_ftq_chng_prvs_cls,0);
      		i_err[24]= Fadd32(ptr_fml_Obuffer,FFO_MKT_TYP,(char *)&c_money_mkt, 0); 
					/******* Ver 1.3 Ends ******/

					for( i_cnt = 0; i_cnt < 25; i_cnt++ )
      		{
							 if( i_err[i_cnt] == -1 )
							 {
								 fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
								 fn_errlog( c_ServiceName, "S31150",FMLMSG,c_err_msg.arr);
                 EXEC SQL CLOSE :cur_mkt_SMW; /*** Added in VQC ***/
								 EXEC SQL FREE :cur_mkt_SMW;
								 return -1;
							 }

          }

					i_count ++;

					if(DEBUG_MSG_LVL_3){
					fn_userlog(c_ServiceName,"SMW total_count1 :%d:",i_count);}

					/*if ((i_count == 10 && l_indicator == 0) || ( i_count == 10 && c_ind_stk == 'S'))*/
					if (i_count == 20 ) 
					{

								fn_userlog(c_ServiceName,"SMW i_count :%d:",i_count);
								break;

					} 
		
         /*** Commented in VQC	
					if(DEBUG_MSG_LVL_3){
				  fn_userlog(c_ServiceName,"-----------------------------------------------------------"); }***/ 
  }  /* Loops 10 times */

    EXEC SQL CLOSE :cur_mkt_SMW; /*** Added in VQC ***/
    EXEC SQL FREE :cur_mkt_SMW;

		return (0);

}


/***************************************************************************************/

int fn_most_actv_und( char 		 *c_ServiceName,
											FBFR32   *ptr_fml_Ibuffer,
											long     l_indicator)
{


	EXEC SQL BEGIN DECLARE SECTION;
  sql_cursor   cur_act_und;             /* a cursor variable */
 /***	int  				 i = 0; *** commented in VQC ***/
  int  				 i_err[TOTAL_FML];
  int  				 i_count = 0;
  int  				 i_cnt = 0;
 /***  long 				 l_spot_prc = 0; commented in VQC as variable is not used locally inside this function ***/
  char 				 c_tablename[5];
  varchar 				 c_err_msg[256];
	char				 c_disp_ord ='C';
	/*** char         c_mkt_undrlyng[7]; Commented in VQC as this variable is not used locally ***/
	double       d_turnovr         = 0.0;
	double       d_tot_turnover    = 0.0;
	EXEC SQL END DECLARE SECTION;


	strcpy( c_tablename,"MAU" );
	/*** MEMSET(c_mkt_undrlyng); Commented in VQC as variable is not used ***/

	EXEC SQL ALLOCATE :cur_act_und;

	if (l_indicator == 0 ) 
	{

		EXEC SQL EXECUTE
               BEGIN
               OPEN   :cur_act_und FOR
               SELECT ftq_undrlyng,
                      :c_tablename,
											nvl(ftq_min_lot_qty,0),
                      SUM(CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
                      ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END),
                      SUM(nvl(ftq_tot_val_trdd,0)),
											SUM((nvl(ftq_lst_trd_prc,0)+nvl(ftq_strk_prc,0))*nvl(ftq_tot_qty_trdd,0))
               FROM   ftq_fo_trd_qt
               WHERE  ftq_xchng_cd = 'NFO'
                 AND  ftq_tot_qty_trdd > 0    /*** Added in Ver 2.4 for Optimization ***/
               GROUP BY ftq_undrlyng,ftq_min_lot_qty
               ORDER BY 4 DESC;

               END;
               END-EXEC;

	}

	if (l_indicator == 1)
	{


			if(Fget32(ptr_fml_Ibuffer,FFO_RQST_TYP,0,(char *)&c_disp_ord,0) == -1)
			{
  				fn_errlog( c_ServiceName, "S31155",FMLMSG,c_err_msg.arr);
          EXEC SQL CLOSE :cur_act_und; /*** Added in VQC ***/
    			EXEC SQL FREE :cur_act_und;
    			return -1;
			}

			if(DEBUG_MSG_LVL_3){
			fn_userlog(c_ServiceName,"c_disp_ord :%c:",c_disp_ord);}

			if(c_disp_ord == 'C')
			{				

							 EXEC SQL EXECUTE
							 BEGIN 
							 OPEN   :cur_act_und FOR
							 SELECT ftq_undrlyng,
											:c_tablename,
											nvl(ftq_min_lot_qty,0),
											SUM(CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
											ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END),
											SUM(nvl(ftq_tot_val_trdd,0)),
											SUM((nvl(ftq_lst_trd_prc,0)+nvl(ftq_strk_prc,0))*nvl(ftq_tot_qty_trdd,0))
							 FROM   ftq_fo_trd_qt
							 WHERE  ftq_xchng_cd = 'NFO'
                 AND  ftq_tot_qty_trdd > 0  /*** Added in Ver 2.4 for Optimization ***/
							 GROUP BY ftq_undrlyng,ftq_min_lot_qty
							 ORDER BY 4 DESC; 

							 END;
							 END-EXEC;
			 }
			 else if(c_disp_ord == 'V')
			 {

							 EXEC SQL EXECUTE
               BEGIN
               OPEN   :cur_act_und FOR
               SELECT ftq_undrlyng,
                      :c_tablename,
											nvl(ftq_min_lot_qty,0),
											SUM(CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
                      ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END),
                      SUM(nvl(ftq_tot_val_trdd,0)),							
											SUM((nvl(ftq_lst_trd_prc,0)+nvl(ftq_strk_prc,0))*nvl(ftq_tot_qty_trdd,0))
               FROM   ftq_fo_trd_qt
               WHERE  ftq_xchng_cd = 'NFO'
                 AND  ftq_tot_qty_trdd > 0  /*** Added in Ver 2.4 for Optimization ***/
               GROUP BY ftq_undrlyng,ftq_min_lot_qty
               ORDER BY 6 DESC;

               END;
               END-EXEC;

			 }
				
  }


  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31160", SQLMSG, c_err_msg.arr  );
    EXEC SQL CLOSE :cur_act_und; /*** Added in VQC ***/
    EXEC SQL FREE :cur_act_und;
    return -1;
  }	



	i_count = 0;
	while(1)	
  {


      EXEC SQL
          FETCH :cur_act_und 
          INTO  
               :sql_ftq_undrlyng,
               :c_mkt_tablename,
							 :sql_ftq_min_lot_qty,
               :l_tot_cntrct,
							 :d_turnovr, 
							 :d_tot_turnover;

			if(SQLCODE != 0)
      {

					  if(SQLCODE == NO_DATA_FOUND)
              {

								if(DEBUG_MSG_LVL_3){
								fn_userlog(c_ServiceName,"MAU no data found");}
								break;

              }	 	
					 
           fn_errlog(c_ServiceName, "S31165", SQLMSG,c_err_msg.arr);
           EXEC SQL CLOSE :cur_act_und; /*** Added in VQC ***/
           EXEC SQL FREE :cur_act_und;
           return -1;
      }



		/*	trim(c_expry_dt);   Commented in VQC as variable is commented */

			if(DEBUG_MSG_LVL_3)
      {
           fn_userlog( c_ServiceName,"MAU:c_mkt_tablename:%s:"      ,c_mkt_tablename);
           fn_userlog( c_ServiceName,"MAU:sql_ftq_prdct_typ:%c:"    ,sql_ftq_prdct_typ);
           fn_userlog( c_ServiceName,"MAU:sql_ftq_indstk:%c:"       ,sql_ftq_indstk);
           fn_userlog( c_ServiceName,"MAU:sql_ftq_undrlyng:%s:"     ,sql_ftq_undrlyng);
           fn_userlog( c_ServiceName,"MAU:sql_ftq_expry_dt:%s:"     ,sql_ftq_expry_dt.arr);
           fn_userlog( c_ServiceName,"MAU:sql_ftq_strk_prc:%ld:"    ,sql_ftq_strk_prc);
           fn_userlog( c_ServiceName,"MAU:sql_ftq_opt_typ:%c:"      ,sql_ftq_opt_typ);
           fn_userlog( c_ServiceName,"MAU:sql_ftq_exer_typ:%c:"     ,sql_ftq_exer_typ);
           fn_userlog( c_ServiceName,"MAU:sql_ftq_opn_prc:%ld:"     ,sql_ftq_opn_prc);
           fn_userlog( c_ServiceName,"MAU:sql_ftq_hgh_prc:%ld:"     ,sql_ftq_hgh_prc);
           fn_userlog( c_ServiceName,"MAU:sql_ftq_low_prc:%ld:"     ,sql_ftq_low_prc);
           fn_userlog( c_ServiceName,"MAU:sql_ftq_prvs_cls_prc:%ld:",sql_ftq_prvs_cls_prc);
           fn_userlog( c_ServiceName,"MAU:sql_ftq_lst_trd_prc:%ld:" ,sql_ftq_lst_trd_prc);
           fn_userlog( c_ServiceName,"MAU:l_tot_cntrct:%ld:"        ,l_tot_cntrct);
           fn_userlog( c_ServiceName,"MAU:d_tot_turnover:%lf:"      ,d_tot_turnover);
      }

					
          i_err[0]  = Fadd32 ( ptr_fml_Obuffer, FFO_PRDCT_DESC,( char *)c_mkt_tablename, 0 );


					/****  contract  details ****/

          i_err[1] = Fadd32(ptr_fml_Obuffer, FFO_PRDCT_TYP,(char *)&sql_ftq_prdct_typ, 0);
          i_err[2] = Fadd32(ptr_fml_Obuffer, FFO_UNDRLYNG,(char *)sql_ftq_undrlyng, 0);
          i_err[3] = Fadd32(ptr_fml_Obuffer,FFO_EXPRY_DT,(char *)sql_ftq_expry_dt.arr,0);
          i_err[4] = Fadd32(ptr_fml_Obuffer,FFO_CTGRY_INDSTK,(char *)&sql_ftq_indstk,0);
          i_err[5] = Fadd32(ptr_fml_Obuffer,FFO_STRK_PRC,(char *)&sql_ftq_strk_prc,0);
          i_err[6] = Fadd32(ptr_fml_Obuffer,FFO_OPT_TYP,(char *)&sql_ftq_opt_typ,0);
          i_err[7] = Fadd32(ptr_fml_Obuffer,FFO_EXER_TYP,(char *)&sql_ftq_exer_typ,0);

         /**** price details ****/

          i_err[8] = Fadd32(ptr_fml_Obuffer, FFO_HGH_PRC,(char *)&sql_ftq_hgh_prc, 0);
          i_err[9] = Fadd32(ptr_fml_Obuffer, FFO_LOW_PRC,(char *)&sql_ftq_low_prc, 0);
          i_err[10] = Fadd32(ptr_fml_Obuffer, FFO_OPN_PRC,(char *)&sql_ftq_opn_prc, 0);
          i_err[11] = Fadd32(ptr_fml_Obuffer, FFO_PRVS_CLS_PRC,(char *)&sql_ftq_prvs_cls_prc, 0);
          i_err[12] = Fadd32(ptr_fml_Obuffer, FFO_LST_TRD_PRC,(char *)&sql_ftq_lst_trd_prc, 0);

         /**** Extra details ****/

          i_err[13] = Fadd32 ( ptr_fml_Obuffer, FFO_TOT_QTY_TRDD,( char *)&l_tot_cntrct, 0);
          i_err[14] = Fadd32 ( ptr_fml_Obuffer, FFO_SOMC_PRCNT,(char *)&d_tot_turnover, 0 );
          i_err[15] = Fadd32 ( ptr_fml_Obuffer, FFO_BASE_ORD_VAL,(char *)&d_undrlyng_val, 0 );

					i_err[16]= Fadd32(ptr_fml_Obuffer,FML_IDD_BST_BID_QTY,(char *)&sql_ftq_tot_bid_qty, 0);
          i_err[17]= Fadd32(ptr_fml_Obuffer,FML_IDD_BST_BID_PRC,(char *)&sql_ftq_bst1_bid_prc,0);
          i_err[18]= Fadd32(ptr_fml_Obuffer,FML_IDD_BST_OFFR_QTY,(char *)&sql_ftq_tot_offr_qty,0);
          i_err[19]= Fadd32(ptr_fml_Obuffer,FML_IDD_BST_OFFR_PRC,(char *)&sql_ftq_bst1_offr_prc,0);

          i_err[20] = Fadd32(ptr_fml_Obuffer,FFO_CRNT_OI,(char *)&sql_ftq_crnt_oi,0);
          i_err[21] = Fadd32(ptr_fml_Obuffer,FFO_CHNG_OI,(char *)&sql_ftq_chng_oi,0);
					i_err[22]= Fadd32(ptr_fml_Obuffer, FFO_MIN_LOT_QTY,(char*)&sql_ftq_min_lot_qty,0);

					/******* Ver 1.3 Starts ******/
          i_err[23]= Fadd32(ptr_fml_Obuffer,FFO_CHNG_PRVS_CLS,(char *)&sql_ftq_chng_prvs_cls,0);
          i_err[24] = Fadd32(ptr_fml_Obuffer,FFO_MKT_TYP,(char *)&c_money_mkt, 0);
          /******* Ver 1.3 Ends ******/


					for( i_cnt = 0; i_cnt < 25; i_cnt++ )
					{
               if( i_err[i_cnt] == -1 )
               {
                 fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
                 fn_errlog( c_ServiceName, "S31170",FMLMSG,c_err_msg.arr);
                 EXEC SQL CLOSE :cur_act_und; /*** Added in VQC ***/
                 EXEC SQL FREE :cur_act_und;
                 return -1;
               }

          }

			 		i_count ++;
					if(DEBUG_MSG_LVL_3){
      		fn_userlog(c_ServiceName,"MAU total i_count :%d:",i_count);}

      		if (i_count == 10) 
      		{

								fn_userlog(c_ServiceName,"MAU i_count :%d:",i_count);
								break;

				  }


      /*** Commented in VQC ***
			if(DEBUG_MSG_LVL_3){
      fn_userlog(c_ServiceName,"-----------------------------------------------------------");} ***/

			
  }
    EXEC SQL CLOSE :cur_act_und; /*** Added in VQC ***/
	  EXEC SQL FREE :cur_act_und;

    return (0);

}
/******************************************************************************/

int fn_most_actv_contr( char 		*c_ServiceName,
                        FBFR32 	*ptr_fml_Ibuffer,
                        long 		l_indicator)
{


	EXEC SQL BEGIN DECLARE SECTION;
  sql_cursor   		cur_act_cnt;         
 /***  int  						i = 0; *** commented in VQC ***/
  int  						i_err[TOTAL_FML];
  int  						i_count = 0;
  int  						i_cnt = 0;
  long 						l_spot_prc = 0;
  char 						c_tablename[5];
  varchar 			  c_err_msg[256]; /* Datatype changed from char to varchar in VQC */
	char						c_disp_ord = 'C';
	char            c_mkt_undrlyng[7];
	double          d_turnovr         = 0.0;
	double          d_tot_turnover		= 0.0;
	EXEC SQL END DECLARE SECTION;

	

  strcpy( c_tablename,"MAC" );

	MEMSET(c_mkt_undrlyng);

	EXEC SQL ALLOCATE :cur_act_cnt;

	if( l_indicator == 0 ) 
	{

	 		EXEC SQL EXECUTE
	 		BEGIN
	 		OPEN	  :cur_act_cnt FOR
	 		SELECT	:c_tablename, 
							ftq_indstk,
							ftq_prdct_typ,
							ftq_undrlyng,
							ftq_expry_dt,
							ftq_opt_typ,
							ftq_exer_typ,
							nvl(ftq_strk_prc,0),
							nvl(ftq_min_lot_qty,0),
							nvl(ftq_tot_qty_trdd,0),
							CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
              ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END tot_cntrct,
			 				nvl(ftq_tot_val_trdd,0),
			   			nvl(ftq_lst_trd_prc,0),
							nvl(ftq_crnt_oi,0)
	 	  FROM 	  ftq_fo_trd_qt
			Where   ftq_xchng_cd='NFO'   /* Ver 2.0 */
        AND   ftq_tot_qty_trdd > 0   /*** Added in Ver 2.4 for Optimization ***/
      ORDER BY tot_cntrct DESC;				

      END;
      END-EXEC;


	}
	else if ( l_indicator !=0 )
	{

			i_err[0] = Fget32(ptr_fml_Ibuffer,FFO_RQST_TYP,0,(char *)&c_disp_ord,0);
		  i_err[1] = Fget32(ptr_fml_Ibuffer,FFO_CTGRY_INDSTK,0,(char *)&c_ind_stk,0);

			for( i_cnt = 0; i_cnt < 2; i_cnt++ )
      {
           if( i_err[i_cnt] == -1 )
					 {
						fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
						fn_errlog( c_ServiceName, "S31175",FMLMSG,c_err_msg.arr);
            EXEC SQL CLOSE :cur_act_cnt; /*** Added in VQC ***/
						EXEC SQL Free :cur_act_cnt;
						return -1;
					 }

      }

			if(DEBUG_MSG_LVL_3){
			fn_userlog(c_ServiceName,"c_ind_stk :%c:",c_ind_stk);}

			if(c_ind_stk == 'I' )
			{

							i_err[0] = Fget32(ptr_fml_Ibuffer,FFO_UNDRLYNG,0,(char *)c_mkt_undrlyng,0);
							i_err[1] = Fget32(ptr_fml_Ibuffer,FFO_PRDCT_TYP,0,(char *)&c_prdct_typ1,0);

							for( i_cnt = 0; i_cnt < 2; i_cnt++ )
							{
               	  if( i_err[i_cnt] == -1 )
                  {
                 		fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
                 		fn_errlog( c_ServiceName, "S31180",FMLMSG,c_err_msg.arr);
                    EXEC SQL CLOSE :cur_act_cnt; /*** Added in VQC ***/
										EXEC SQL Free :cur_act_cnt;
                 		return -1;
                	}

							}


			}
			else if(c_ind_stk == 'S')
			{

						  if(i_err[0] = Fget32(ptr_fml_Ibuffer,FFO_PRDCT_TYP,0,(char *)&c_prdct_typ1,0) == -1)
							{
										fn_errlog( c_ServiceName, "S31185",FMLMSG,c_err_msg.arr);
                    EXEC SQL CLOSE :cur_act_cnt; /*** Added in VQC ***/
										EXEC SQL Free :cur_act_cnt;
                    return -1;
							}

							strcpy(c_mkt_undrlyng,"%");

			}
			else
			{
				strcpy(c_mkt_undrlyng,"%");
			/*	strcpy(c_prdct_typ1,"%"); Commented in VQC */
        c_prdct_typ1='%'; /*** Added in VQC ***/

				if(DEBUG_MSG_LVL_3){
				fn_userlog(c_ServiceName,"=======All contracts=========");}

			}
			

			 trim(c_mkt_undrlyng);
			/* trim(c_prdct_typ1); Commented in VQC */
		

			if(DEBUG_MSG_LVL_3){	
			fn_userlog(c_ServiceName,"c_mkt_undrlyng:%s:",c_mkt_undrlyng);
      fn_userlog(c_ServiceName,"c_prdct_typ1 :%c:",c_prdct_typ1);	
			}

		  if(c_disp_ord == 'V' )
			{

			 EXEC SQL EXECUTE
     	 BEGIN
     	 OPEN :cur_act_cnt FOR
		 	 SELECT :c_tablename,
          		ftq_indstk,
          		ftq_prdct_typ,
          		ftq_undrlyng,
          		ftq_expry_dt,
          		ftq_opt_typ,
          		ftq_exer_typ,
          		nvl(ftq_strk_prc,0),
							nvl(ftq_min_lot_qty,0),
							nvl(ftq_tot_qty_trdd,0),
							CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
							ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END  tot_cntrct, 
          		nvl(ftq_tot_val_trdd,0) tot_val,										 
          		nvl( ftq_lst_trd_prc,0),
          		nvl(ftq_crnt_oi,0)
			FROM    ftq_fo_trd_qt
	 		WHERE 	ftq_xchng_cd 	= 'NFO'
   		AND   	ftq_prdct_typ like :c_prdct_typ1
   		AND   	ftq_undrlyng like  decode(:c_mkt_undrlyng,'%','%',rpad(:c_mkt_undrlyng,6,' '))
			AND     ftq_indstk like decode(:c_ind_stk,'A','%',:c_ind_stk)
   	  AND     ftq_tot_qty_trdd > 0    /*** Added in Ver 2.4 for optimization ***/
    	ORDER BY (nvl(ftq_lst_trd_prc,0)+nvl(ftq_strk_prc,0))*nvl(ftq_tot_qty_trdd,0) DESC;      

			END;
			END-EXEC;

		}
		else
		{

			 EXEC SQL EXECUTE
       BEGIN
       OPEN :cur_act_cnt FOR
       SELECT :c_tablename,
              ftq_indstk,
              ftq_prdct_typ,
              ftq_undrlyng,
              ftq_expry_dt,
              ftq_opt_typ,
              ftq_exer_typ,
              nvl(ftq_strk_prc,0),
							nvl(ftq_min_lot_qty,0),
							nvl(ftq_tot_qty_trdd,0),
							CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
							ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END	tot_cntrct ,
              nvl(ftq_tot_val_trdd,0),
              nvl(ftq_lst_trd_prc,0),
              nvl(ftq_crnt_oi,0)
      FROM    ftq_fo_trd_qt
      WHERE   ftq_xchng_cd  = 'NFO'
      AND     ftq_prdct_typ like :c_prdct_typ1
      AND     ftq_undrlyng like decode(:c_mkt_undrlyng,'%','%',rpad(:c_mkt_undrlyng,6,' ')) 
			AND     ftq_indstk like decode(:c_ind_stk,'A','%',:c_ind_stk)
      AND     ftq_tot_qty_trdd > 0    /*** Added in Ver 2.4 for optimization ***/
      ORDER BY tot_cntrct DESC;					

			END;
      END-EXEC;


		}

	}

  if(SQLCODE != 0)
  {
      fn_errlog(c_ServiceName, "S31190", SQLMSG,c_err_msg.arr);
      EXEC SQL CLOSE :cur_act_cnt; /*** Added in VQC ***/
      EXEC SQL FREE :cur_act_cnt;
			Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
      return -1;
  }


	i_count = 0;
	
	 while(1)
   {


      EXEC SQL
          FETCH :cur_act_cnt
          INTO :c_mkt_tablename,
							 :sql_ftq_indstk,
							 :sql_ftq_prdct_typ,
							 :sql_ftq_undrlyng,
						   :sql_ftq_expry_dt,
						 	 :sql_ftq_opt_typ,
						   :sql_ftq_exer_typ,
						   :sql_ftq_strk_prc,
							 :sql_ftq_min_lot_qty,
							 :sql_ftq_tot_qty_trdd,
						 	 :l_tot_cntrct,
							 :d_turnovr,									/** Contract Value **/
						   :sql_ftq_lst_trd_prc,
						   :sql_ftq_crnt_oi;

      if(SQLCODE != 0)
      {

						
              if(SQLCODE == NO_DATA_FOUND)
              {
								
								if(DEBUG_MSG_LVL_3){
								fn_userlog(c_ServiceName,"MAC no data found");}
								break;

              }

           fn_errlog(c_ServiceName, "S31195", SQLMSG,c_err_msg.arr);
           EXEC SQL CLOSE :cur_act_cnt; /*** Added in VQC ***/
           EXEC SQL FREE :cur_act_cnt;
           return -1;
      }


			trim(sql_ftq_undrlyng);	
     if (DEBUG_MSG_LVL_3)  /* Added in VQC */
     {
		  fn_userlog(c_ServiceName,"sql_ftq_undrlyng:%s:",sql_ftq_undrlyng);
     }

			EXEC SQL
         SELECT NVL(ltq_rt*100,0)
         INTO   :l_spot_prc
         FROM   ltq_trd_qt
         WHERE  ltq_xchng_cd = 'NSE'
         AND    ltq_stck_cd  = :sql_ftq_undrlyng;

				 if(SQLCODE != 0)
         {
              fn_errlog(c_ServiceName, "S31200", SQLMSG,c_err_msg.arr);
              EXEC SQL CLOSE :cur_act_cnt; /*** Added in VQC ***/
              EXEC SQL FREE :cur_act_cnt;
              return -1;
         }


      	 d_undrlyng_val = (double)l_spot_prc;
				 d_tot_turnover = (double)(sql_ftq_tot_qty_trdd *1.0*( sql_ftq_lst_trd_prc + sql_ftq_strk_prc));	

				 if(DEBUG_MSG_LVL_3){
         fn_userlog( c_ServiceName,"MAC:l_spot_prc :%ld",l_spot_prc);
         fn_userlog( c_ServiceName,"MAC:d_undrlyng_val:%lf",d_undrlyng_val);
				 }


				if(DEBUG_MSG_LVL_3)
          {
           fn_userlog( c_ServiceName,"MAC:c_mkt_tablename:%s:"      ,c_mkt_tablename);
           fn_userlog( c_ServiceName,"MAC:sql_ftq_prdct_typ:%c:"    ,sql_ftq_prdct_typ);
           fn_userlog( c_ServiceName,"MAC:sql_ftq_indstk:%c:"       ,sql_ftq_indstk);
           fn_userlog( c_ServiceName,"MAC:sql_ftq_undrlyng:%s:"     ,sql_ftq_undrlyng);
           fn_userlog( c_ServiceName,"MAC:sql_ftq_expry_dt:%s:"     ,sql_ftq_expry_dt.arr);
           fn_userlog( c_ServiceName,"MAC:sql_ftq_strk_prc:%ld:"    ,sql_ftq_strk_prc);
           fn_userlog( c_ServiceName,"MAC:sql_ftq_opt_typ:%c:"      ,sql_ftq_opt_typ);
           fn_userlog( c_ServiceName,"MAC:sql_ftq_exer_typ:%c:"     ,sql_ftq_exer_typ);
           fn_userlog( c_ServiceName,"MAC:sql_ftq_opn_prc:%ld:"     ,sql_ftq_opn_prc);
           fn_userlog( c_ServiceName,"MAC:sql_ftq_hgh_prc:%ld:"     ,sql_ftq_hgh_prc);
           fn_userlog( c_ServiceName,"MAC:sql_ftq_low_prc:%ld:"     ,sql_ftq_low_prc);
           fn_userlog( c_ServiceName,"MAC:sql_ftq_prvs_cls_prc:%ld:",sql_ftq_prvs_cls_prc);
           fn_userlog( c_ServiceName,"MAC:sql_ftq_lst_trd_prc:%ld:" ,sql_ftq_lst_trd_prc);
           fn_userlog( c_ServiceName,"MAC:l_tot_cntrct:%ld:"        ,l_tot_cntrct);
           fn_userlog( c_ServiceName,"MAC:sql_ftq_tot_qty_trdd:%ld:",sql_ftq_tot_qty_trdd);
           fn_userlog( c_ServiceName,"MAC:d_tot_turnover:%lf:"      ,d_tot_turnover);
          }


        i_err[0]  = Fadd32 ( ptr_fml_Obuffer, FFO_PRDCT_DESC,( char *)c_mkt_tablename, 0 );

       /****  contract  details ****/
	
			  i_err[1] = Fadd32(ptr_fml_Obuffer, FFO_PRDCT_TYP,(char *)&sql_ftq_prdct_typ, 0);
        i_err[2] = Fadd32(ptr_fml_Obuffer, FFO_UNDRLYNG,(char *)sql_ftq_undrlyng, 0);
        i_err[3] = Fadd32(ptr_fml_Obuffer,FFO_EXPRY_DT,(char *)sql_ftq_expry_dt.arr,0);
        i_err[4] = Fadd32(ptr_fml_Obuffer,FFO_CTGRY_INDSTK,(char *)&sql_ftq_indstk,0);
        i_err[5] = Fadd32(ptr_fml_Obuffer,FFO_STRK_PRC,(char *)&sql_ftq_strk_prc,0);
        i_err[6] = Fadd32(ptr_fml_Obuffer,FFO_OPT_TYP,(char *)&sql_ftq_opt_typ,0);
        i_err[7] = Fadd32(ptr_fml_Obuffer,FFO_EXER_TYP,(char *)&sql_ftq_exer_typ,0);


			 /**** price details ****/

        i_err[8] = Fadd32(ptr_fml_Obuffer, FFO_HGH_PRC,(char *)&sql_ftq_hgh_prc, 0);
        i_err[9] = Fadd32(ptr_fml_Obuffer, FFO_LOW_PRC,(char *)&sql_ftq_low_prc, 0);
        i_err[10] = Fadd32(ptr_fml_Obuffer, FFO_OPN_PRC,(char *)&sql_ftq_opn_prc, 0);
        i_err[11] = Fadd32(ptr_fml_Obuffer, FFO_PRVS_CLS_PRC,(char *)&sql_ftq_prvs_cls_prc, 0);
        i_err[12] = Fadd32(ptr_fml_Obuffer, FFO_LST_TRD_PRC,(char *)&sql_ftq_lst_trd_prc, 0);

      /**** Extra details ****/

        i_err[13] = Fadd32 ( ptr_fml_Obuffer, FFO_TOT_QTY_TRDD,( char *)&l_tot_cntrct, 0);
        i_err[14] = Fadd32 ( ptr_fml_Obuffer, FFO_SOMC_PRCNT,(char *)&d_tot_turnover, 0 );
        i_err[15] = Fadd32 ( ptr_fml_Obuffer, FFO_BASE_ORD_VAL,(char *)&d_undrlyng_val, 0 );

				i_err[16]= Fadd32(ptr_fml_Obuffer,FML_IDD_BST_BID_QTY,(char *)&sql_ftq_tot_bid_qty, 0);
        i_err[17]= Fadd32(ptr_fml_Obuffer,FML_IDD_BST_BID_PRC,(char *)&sql_ftq_bst1_bid_prc,0);
        i_err[18]= Fadd32(ptr_fml_Obuffer,FML_IDD_BST_OFFR_QTY,(char *)&sql_ftq_tot_offr_qty,0);
        i_err[19]= Fadd32(ptr_fml_Obuffer,FML_IDD_BST_OFFR_PRC,(char *)&sql_ftq_bst1_offr_prc,0);

        i_err[20] = Fadd32(ptr_fml_Obuffer,FFO_CRNT_OI,(char *)&sql_ftq_crnt_oi,0);
        i_err[21] = Fadd32(ptr_fml_Obuffer,FFO_CHNG_OI,(char *)&sql_ftq_chng_oi,0);
				i_err[22]= Fadd32(ptr_fml_Obuffer, FFO_MIN_LOT_QTY,(char*)&sql_ftq_min_lot_qty,0);

				/******* Ver 1.3 Starts ******/
          i_err[23]= Fadd32(ptr_fml_Obuffer,FFO_CHNG_PRVS_CLS,(char *)&sql_ftq_chng_prvs_cls,0);
          i_err[24] = Fadd32(ptr_fml_Obuffer,FFO_MKT_TYP,(char *)&c_money_mkt, 0);
          /******* Ver 1.3 Ends ******/


      	for( i_cnt = 0; i_cnt < 25; i_cnt++ )
      	{
               if( i_err[i_cnt] == -1 )
               {
                 fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
                 fn_errlog( c_ServiceName, "S31205",FMLMSG,c_err_msg.arr);
                 EXEC SQL CLOSE :cur_act_cnt; /*** Added in VQC ***/
                 EXEC SQL FREE :cur_act_cnt;
                 return -1;
               }

      	}

				i_count ++;

				if(DEBUG_MSG_LVL_3){
				fn_userlog(c_ServiceName,"MAC Total i_count :%d:",i_count);}

      	/*if ((i_count == 10 && l_indicator == 0)||
					 ( i_count == 10 && c_ind_stk == 'S')|| 
					 (i_count == 10 && c_ind_stk == 'A')) */

				if(i_count == 10)
      	{

        	fn_userlog(c_ServiceName,"MAC i_count :%d:",i_count);
        	break;

      	}

       /*** Commmented in VQC ***
				if(DEBUG_MSG_LVL_3){
				fn_userlog(c_ServiceName,"-----------------------------------------------------------");} ***/


		}

    EXEC SQL CLOSE :cur_act_cnt; /*** Added in VQC ***/
		EXEC SQL Free :cur_act_cnt;

    return (0);

}


int fn_most_actv_call_put( char 	*c_ServiceName,
                        	 FBFR32 *ptr_fml_Ibuffer,
                           long 	 l_indicator)
{

	EXEC SQL BEGIN DECLARE SECTION;
	sql_cursor   cur_act_macp;          
  /*** int  i = 0;   *** commented in VQC ***/
  int  i_err[TOTAL_FML];
  int  i_count = 0;
  int  i_cnt = 0;
  long l_spot_prc = 0;
  char c_tablename[5];
  varchar c_err_msg[256]; /* Datatype changed from char to varchar in VQC */
	char c_mkt_undrlyng[7];
	char c_disp_ord='C';
	double       d_turnovr         = 0.0;
	double       d_tot_turnover		 = 0.0;
	EXEC SQL END DECLARE SECTION;


  strcpy( c_tablename,"MACP" );
	MEMSET(c_mkt_undrlyng);

	EXEC SQL ALLOCATE :cur_act_macp;

	if( l_indicator == 0 )
  {

		EXEC SQL EXECUTE
		BEGIN
		OPEN :cur_act_macp FOR
		SELECT :c_tablename,
					  ftq_indstk,
						ftq_prdct_typ,
						ftq_undrlyng,
						ftq_expry_dt,
						ftq_opt_typ,
						ftq_exer_typ,
						nvl(ftq_strk_prc,0),
						nvl(ftq_min_lot_qty,0),
						nvl(ftq_tot_qty_trdd,0),
						CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0 
						ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END no_cnt_traded,
						nvl(ftq_tot_val_trdd,0),
						nvl(ftq_lst_trd_prc,0),
						nvl(ftq_crnt_oi,0)
    FROM    ftq_fo_trd_qt
    WHERE   ftq_xchng_cd = 'NFO' 
    AND     ftq_prdct_typ = 'O'
		AND		  ftq_undrlyng = 'NIFTY'
		AND			ftq_opt_typ = 'C'
    AND     ftq_tot_qty_trdd > 0    /*** Added in Ver 2.4 for Optimization ***/
    ORDER BY no_cnt_traded DESC;

	 END;
   END-EXEC;

	}
	else if ( l_indicator !=0 )
  {

		i_err[0]= Fget32(ptr_fml_Ibuffer,FFO_RQST_TYP,0,(char *)&c_disp_ord,0); 
    i_err[1]= Fget32(ptr_fml_Ibuffer,FFO_CTGRY_INDSTK,0,(char *)&c_ind_stk,0); 
		i_err[2]= Fget32(ptr_fml_Ibuffer,FFO_OPT_TYP,0,(char *)&c_opt_typ,0);

		
    for( i_cnt = 0; i_cnt < 3; i_cnt++ )
    {
							 if( i_err[i_cnt] == -1 )
							 {
								 fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
                 EXEC SQL CLOSE :cur_act_macp; /*** Added in VQC ***/
								 EXEC SQL Free :cur_act_macp;
								 fn_errlog( c_ServiceName, "S31210",FMLMSG,c_err_msg.arr);
								 return -1;
							 }

		}

		if(c_ind_stk == 'I' )
		{


						if(Fget32(ptr_fml_Ibuffer,FFO_UNDRLYNG,0,(char *)c_mkt_undrlyng,0) == -1)
						{
                fn_errlog( c_ServiceName, "S31215",FMLMSG,c_err_msg.arr);
                EXEC SQL CLOSE :cur_act_macp; /*** Added in VQC ***/
							  EXEC SQL Free :cur_act_macp;
                return -1;
						}

		}
    else
    {
        strcpy(c_mkt_undrlyng,"%");
				if(DEBUG_MSG_LVL_3){
        fn_userlog(c_ServiceName,"=======All contracts=========");}

    }


		if(DEBUG_MSG_LVL_3){
    fn_userlog(c_ServiceName,"c_disp_ord:%c:",c_disp_ord);
    fn_userlog(c_ServiceName,"c_ind_stk :%c:",c_ind_stk);
    fn_userlog(c_ServiceName,"c_opt_typ:%c:",c_opt_typ);
		fn_userlog(c_ServiceName,"c_mkt_undrlyng:%s:",c_mkt_undrlyng);
		}

		if(c_disp_ord == 'C')
		{

						EXEC SQL EXECUTE
						BEGIN
						OPEN	 :cur_act_macp FOR
						SELECT :c_tablename,
										ftq_indstk,
										ftq_prdct_typ,
										ftq_undrlyng,
										ftq_expry_dt,
										ftq_opt_typ,
										ftq_exer_typ,
										nvl(ftq_strk_prc,0),
										nvl(ftq_min_lot_qty,0),
										nvl(ftq_tot_qty_trdd,0),
										CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0 
										ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END no_cnt_traded,
										nvl(ftq_tot_val_trdd,0),
										nvl(ftq_lst_trd_prc,0),
										nvl(ftq_crnt_oi,0)
						FROM    ftq_fo_trd_qt 
						WHERE   ftq_xchng_cd = 'NFO' 
						AND     ftq_prdct_typ = 'O'
						AND			ftq_undrlyng like decode(:c_mkt_undrlyng,'%','%',rpad(:c_mkt_undrlyng,6,' ')) 
						AND		  ftq_opt_typ = :c_opt_typ 
						AND			ftq_indstk like decode(:c_ind_stk,'A','%',:c_ind_stk)
					  AND     ftq_tot_qty_trdd > 0   /*** Added in Ver 2.4 for Optimization ***/
          	ORDER BY no_cnt_traded DESC;


						END;
						END-EXEC;	

		}
		else
		{

						EXEC SQL EXECUTE
						BEGIN
						OPEN   :cur_act_macp FOR
						SELECT :c_tablename,
										ftq_indstk,
										ftq_prdct_typ,
										ftq_undrlyng,
										ftq_expry_dt,
										ftq_opt_typ,
										ftq_exer_typ,
										nvl(ftq_strk_prc,0),
										nvl(ftq_min_lot_qty,0),
										nvl(ftq_tot_qty_trdd,0),
										CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
										ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END no_cnt_traded,
										nvl(ftq_tot_val_trdd,0) val_traded,
										nvl(ftq_lst_trd_prc,0),
										nvl(ftq_crnt_oi,0)
						FROM    ftq_fo_trd_qt
						WHERE   ftq_xchng_cd = 'NFO' 
						AND     ftq_prdct_typ = 'O'
						AND		  ftq_undrlyng like decode(:c_mkt_undrlyng,'%','%',rpad(:c_mkt_undrlyng,6,' ')) 
						AND     ftq_opt_typ = :c_opt_typ
						AND     ftq_indstk like decode(:c_ind_stk,'A','%',:c_ind_stk)
            AND     ftq_tot_qty_trdd > 0   /*** Added in Ver 2.4 for Optimization ***/ 
						ORDER BY (nvl(ftq_lst_trd_prc,0)+nvl(ftq_strk_prc,0))*nvl(ftq_tot_qty_trdd,0) DESC;


						END;
						END-EXEC;

		}
	
	}

	if(SQLCODE != 0)
  {
      fn_errlog(c_ServiceName, "S31220", SQLMSG,c_err_msg.arr);
      EXEC SQL CLOSE :cur_act_macp; /*** Added in VQC ***/
      EXEC SQL FREE :cur_act_macp;
      return -1;
  } 


		i_count = 0;

    while(1)
  	{

      EXEC SQL
      FETCH :cur_act_macp
      INTO  :c_mkt_tablename,
            :sql_ftq_indstk,
            :sql_ftq_prdct_typ,
            :sql_ftq_undrlyng,
            :sql_ftq_expry_dt,
            :sql_ftq_opt_typ,
            :sql_ftq_exer_typ,
            :sql_ftq_strk_prc,
						/*:sql_ftq_tot_qty_trdd,*/
						:sql_ftq_min_lot_qty,
						:sql_ftq_tot_qty_trdd,
						:l_tot_cntrct,
						:d_turnovr,
            :sql_ftq_lst_trd_prc,
            :sql_ftq_crnt_oi;


      if(SQLCODE != 0)
      {

					 if(SQLCODE == NO_DATA_FOUND)
              {

								if(DEBUG_MSG_LVL_3){
								fn_userlog(c_ServiceName,"MACP no data found");}
								break;
              }

           fn_errlog(c_ServiceName, "S31225", SQLMSG,c_err_msg.arr);
           EXEC SQL CLOSE :cur_act_macp; /*** Added in VQC ***/
           EXEC SQL FREE :cur_act_macp;
           return -1;
      }


			EXEC SQL
           SELECT nvl(ltq_rt*100,0)
           INTO   :l_spot_prc
           FROM   ltq_trd_qt
           WHERE  ltq_xchng_cd = 'NSE'
           /*AND    ltq_stck_cd  = 'NIFTY';*/				/**1.1**/
           AND    ltq_stck_cd  = :sql_ftq_undrlyng; /**1.1**/ 

				  if(SQLCODE != 0)
          {
              fn_errlog(c_ServiceName, "S31230", SQLMSG,c_err_msg.arr);
              EXEC SQL CLOSE :cur_act_macp; /*** Added in VQC ***/ 
              EXEC SQL FREE :cur_act_macp;
              return -1;
          }


         if (DEBUG_MSG_LVL_3)  /* Debug Level Added in VQC */
         {
					fn_userlog( c_ServiceName,"MACP:sql_ftq_tot_qty_trdd : %ld",sql_ftq_tot_qty_trdd);
					fn_userlog( c_ServiceName,"MACP:sql_ftq_lst_trd_prc: %ld",sql_ftq_lst_trd_prc);
					fn_userlog( c_ServiceName,"MACP:sql_ftq_strk_prc: %ld",sql_ftq_strk_prc);
					fn_userlog( c_ServiceName,"MACP:d_tot_turnoverI: %lf",d_tot_turnover);
         }

      		d_undrlyng_val = (double)l_spot_prc;
					d_tot_turnover = (double)(sql_ftq_tot_qty_trdd * 1.0 * ( sql_ftq_lst_trd_prc + sql_ftq_strk_prc));

          if (DEBUG_MSG_LVL_3)  /* Added in VQC */
          {  
					 fn_userlog( c_ServiceName,"MACP:d_tot_turnoverII: %lf",d_tot_turnover);
          }
  
					if(DEBUG_MSG_LVL_3)
      		{
           fn_userlog( c_ServiceName,"MACP:c_mkt_tablename:%s:"      ,c_mkt_tablename);
           fn_userlog( c_ServiceName,"MACP:sql_ftq_prdct_typ:%c:"    ,sql_ftq_prdct_typ);
           fn_userlog( c_ServiceName,"MACP:sql_ftq_indstk:%c:"       ,sql_ftq_indstk);
           fn_userlog( c_ServiceName,"MACP:sql_ftq_undrlyng:%s:"     ,sql_ftq_undrlyng);
           fn_userlog( c_ServiceName,"MACP:sql_ftq_expry_dt:%s:"     ,sql_ftq_expry_dt.arr);
           fn_userlog( c_ServiceName,"MACP:sql_ftq_strk_prc:%ld:"    ,sql_ftq_strk_prc);
           fn_userlog( c_ServiceName,"MACP:sql_ftq_opt_typ:%c:"      ,sql_ftq_opt_typ);
           fn_userlog( c_ServiceName,"MACP:sql_ftq_exer_typ:%c:"     ,sql_ftq_exer_typ);
           fn_userlog( c_ServiceName,"MACP:sql_ftq_opn_prc:%ld:"     ,sql_ftq_opn_prc);
           fn_userlog( c_ServiceName,"MACP:sql_ftq_hgh_prc:%ld:"     ,sql_ftq_hgh_prc);
           fn_userlog( c_ServiceName,"MACP:sql_ftq_low_prc:%ld:"     ,sql_ftq_low_prc);
           fn_userlog( c_ServiceName,"MACP:sql_ftq_prvs_cls_prc:%ld:",sql_ftq_prvs_cls_prc);
           fn_userlog( c_ServiceName,"MACP:sql_ftq_lst_trd_prc:%ld:" ,sql_ftq_lst_trd_prc);
           fn_userlog( c_ServiceName,"MACP:l_tot_cntrct:%ld:"        ,l_tot_cntrct);
           fn_userlog( c_ServiceName,"MACP:sql_ftq_tot_qty_trdd:%ld:" ,sql_ftq_tot_qty_trdd);
					 fn_userlog( c_ServiceName,"MACP:l_spot_prc :%ld"					 ,l_spot_prc);
           fn_userlog( c_ServiceName,"MACP:d_undrlyng_val:%lf"			 ,d_undrlyng_val);
           fn_userlog( c_ServiceName,"MACP:d_tot_turnover:%lf"			 ,d_tot_turnover);
      		}


      		i_err[0]  = Fadd32 ( ptr_fml_Obuffer, FFO_PRDCT_DESC,( char *)c_mkt_tablename, 0 );

      		/****  contract  details ****/
			
			 	  i_err[1] = Fadd32(ptr_fml_Obuffer, FFO_PRDCT_TYP,(char *)&sql_ftq_prdct_typ, 0);
       		i_err[2] = Fadd32(ptr_fml_Obuffer, FFO_UNDRLYNG,(char *)sql_ftq_undrlyng, 0);
       		i_err[3] = Fadd32(ptr_fml_Obuffer,FFO_EXPRY_DT,(char *)sql_ftq_expry_dt.arr,0);
       		i_err[4] = Fadd32(ptr_fml_Obuffer,FFO_CTGRY_INDSTK,(char *)&sql_ftq_indstk,0);
       		i_err[5] = Fadd32(ptr_fml_Obuffer,FFO_STRK_PRC,(char *)&sql_ftq_strk_prc,0);
       		i_err[6] = Fadd32(ptr_fml_Obuffer,FFO_OPT_TYP,(char *)&sql_ftq_opt_typ,0);
       		i_err[7] = Fadd32(ptr_fml_Obuffer,FFO_EXER_TYP,(char *)&sql_ftq_exer_typ,0);


      		/**** price details ****/


			 	  i_err[8] = Fadd32(ptr_fml_Obuffer, FFO_HGH_PRC,(char *)&sql_ftq_hgh_prc, 0);
       		i_err[9] = Fadd32(ptr_fml_Obuffer, FFO_LOW_PRC,(char *)&sql_ftq_low_prc, 0);
       		i_err[10] = Fadd32(ptr_fml_Obuffer, FFO_OPN_PRC,(char *)&sql_ftq_opn_prc, 0);
       		i_err[11] = Fadd32(ptr_fml_Obuffer, FFO_PRVS_CLS_PRC,(char *)&sql_ftq_prvs_cls_prc, 0);
       		i_err[12] = Fadd32(ptr_fml_Obuffer, FFO_LST_TRD_PRC,(char *)&sql_ftq_lst_trd_prc, 0);


					/**** Extra details ****/

        	i_err[13] = Fadd32 ( ptr_fml_Obuffer, FFO_TOT_QTY_TRDD,( char *)&l_tot_cntrct, 0);
        	i_err[14] = Fadd32 ( ptr_fml_Obuffer, FFO_SOMC_PRCNT,(char *)&d_tot_turnover, 0 );
        	i_err[15] = Fadd32 ( ptr_fml_Obuffer, FFO_BASE_ORD_VAL,(char *)&d_undrlyng_val, 0 );

					i_err[16]= Fadd32(ptr_fml_Obuffer,FML_IDD_BST_BID_QTY,(char *)&sql_ftq_tot_bid_qty, 0);
          i_err[17]= Fadd32(ptr_fml_Obuffer,FML_IDD_BST_BID_PRC,(char *)&sql_ftq_bst1_bid_prc,0);
          i_err[18]= Fadd32(ptr_fml_Obuffer,FML_IDD_BST_OFFR_QTY,(char *)&sql_ftq_tot_offr_qty,0);
          i_err[19]= Fadd32(ptr_fml_Obuffer,FML_IDD_BST_OFFR_PRC,(char *)&sql_ftq_bst1_offr_prc,0);

          i_err[20] = Fadd32(ptr_fml_Obuffer,FFO_CRNT_OI,(char *)&sql_ftq_crnt_oi,0);
          i_err[21] = Fadd32(ptr_fml_Obuffer,FFO_CHNG_OI,(char *)&sql_ftq_chng_oi,0);
					i_err[22]= Fadd32(ptr_fml_Obuffer, FFO_MIN_LOT_QTY,(char*)&sql_ftq_min_lot_qty,0);

					/******* Ver 1.3 Starts ******/
          i_err[23]= Fadd32(ptr_fml_Obuffer,FFO_CHNG_PRVS_CLS,(char *)&sql_ftq_chng_prvs_cls,0);
          i_err[24] = Fadd32(ptr_fml_Obuffer,FFO_MKT_TYP,(char *)&c_money_mkt, 0);
          /******* Ver 1.3 Ends ******/


      		for( i_cnt = 0; i_cnt < 25; i_cnt++ )
      		{
               if( i_err[i_cnt] == -1 )
               {
                 fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
                 fn_errlog( c_ServiceName, "S31235",FMLMSG,c_err_msg.arr);
                 EXEC SQL CLOSE :cur_act_macp; /*** Added in VQC ***/
                 EXEC SQL FREE :cur_act_macp;
                 return -1;
               }

      		}

					i_count ++;

					if(DEBUG_MSG_LVL_3){
      		fn_userlog(c_ServiceName,"MACP tptal i_count :%d:",i_count);}

      		if (i_count == 10 ) 
      		{

        		fn_userlog(c_ServiceName,"MACP i_count :%d:",i_count);
        		break;

      		} 

         /*** Commented in VQC ***
					if(DEBUG_MSG_LVL_3){
      		fn_userlog(c_ServiceName,"-----------------------------------------------------------");} ***/
		
		}


    EXEC SQL CLOSE :cur_act_macp; /*** Added in VQC ***/
		EXEC SQL FREE :cur_act_macp;

    return (0);


}

int	fn_opt_chain( char *c_ServiceName,
                  FBFR32 * ptr_fml_Ibuffer,
                  long l_indicator)
{


	EXEC SQL BEGIN DECLARE SECTION;
  sql_cursor   cur_act_oc;             
	/*** int  				 i = 0; *** commented in VQC ***/
  int  				 i_err[TOTAL_FML];
  int  				 i_count = 0;
  int  				 i_cnt = 0;
  long 				 l_spot_prc = 0;
  char 				 c_tablename[5];
  varchar 		 c_err_msg[256]; /* Datatype changed from char to varchar in VQC */
	char				 c_mkt_undrlyng[7];
	char				 c_xchng_cd[4];										/*** Ver 1.5 ***/
  char         c_expry_dt[23];                  /*** Added in VQC ***/

	double       d_turnovr         = 0.0;
	double       d_tot_turnover		 = 0.0;
	double 			 sql_ftq_bst1_bid_prc1 = 0.0;
	double 			 sql_ftq_bst1_offr_prc1= 0.0;
	
	EXEC SQL END DECLARE SECTION;

  strcpy( c_tablename,"OC" );

	MEMSET(c_mkt_undrlyng);
	MEMSET(c_xchng_cd);					/*** Ver 1.5 ***/

	EXEC SQL ALLOCATE :cur_act_oc;

	if ( l_indicator == 0 )
	{

    if (DEBUG_MSG_LVL_3)  /* Debug Level Added in VQC */
    {
		 fn_userlog(c_ServiceName,"default case for OC");
    }

		/********** Starts  Ver 1.3 ************/

		EXEC SQL
          SELECT nvl(ltq_rt*100,0)
          INTO   :l_spot_prc
          FROM   ltq_trd_qt
					WHERE  ltq_xchng_cd = 'NSE' 
          AND    ltq_stck_cd  = 'NIFTY';


		if(SQLCODE != 0)
     {
            fn_errlog(c_ServiceName, "S31240", SQLMSG,c_err_msg.arr);
            EXEC SQL FREE :cur_act_oc;
            return -1;
     }
	

	/*	fn_userlog(c_ServiceName,"222"); commentede in VQC */

		/********** Ends Ver 1.3 ************/

		EXEC SQL EXECUTE 
		BEGIN
				 OPEN :cur_act_oc FOR
				 select :c_tablename, 
					ftq_undrlyng,
          ftq_expry_dt,
          nvl(ftq_crnt_oi,0),
          nvl(ftq_chng_oi,0),
          nvl(ftq_lst_trd_prc,0),
					nvl(ftq_prvs_cls_prc,0),			/*** Ver 1.3 ****/
					nvl(ftq_chng_prvs_cls,0),			/*** Ver 1.3 ****/
          nvl(ftq_tot_val_trdd,0), 
          nvl(ftq_bst1_bid_qty,0),
          nvl(ftq_bst1_bid_prc,0),
          nvl(ftq_bst1_offr_prc,0),
          nvl(ftq_bst1_offr_qty,0),
          nvl(ftq_strk_prc,0),
					CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
          ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END no_cnt_traded,
					nvl(ftq_min_lot_qty,0),
					nvl(ftq_tot_qty_trdd,0),
					ftq_indstk,
          ftq_opt_typ,
					decode(ftq_opt_typ,'C', decode(sign(ftq_strk_prc-:l_spot_prc),1,'O',
                                                    -1,   'I', 'A'), 
															'P',decode(sign(ftq_strk_prc-:l_spot_prc),1,'I',
                                                    -1,   'O', 'A'), 'A') money_typ  /**1.3 **/
		FROM ftq_fo_trd_qt	
    WHERE ftq_xchng_cd = 'NFO' 
    AND   ftq_prdct_typ = 'O'
		AND		ftq_undrlyng = 'NIFTY'
    /*AND   to_char(ftq_expry_dt,'mon-yyyy') = to_char(sysdate,'mon-yyyy') */ /** 1.5 **/
    AND   ftq_expry_dt = :c_expiry_dt_min     /** 1.4 **/
    ORDER BY ftq_strk_prc,ftq_opt_typ;

	END;
	END-EXEC;

	}
	else if ( l_indicator != 0 )
	{

      if (DEBUG_MSG_LVL_3)  /* Debug Level Added in VQC */
      {
			 fn_userlog(c_ServiceName,"Special case for OC");
      }

	 		i_err[0] = Fget32(ptr_fml_Ibuffer,FFO_UNDRLYNG,0,(char *)c_mkt_undrlyng,0);
	 		i_err[1] = Fget32(ptr_fml_Ibuffer,FFO_EXPRY_DT,0,(char *)c_expry_dt,0);
	 		i_err[2] = Fget32(ptr_fml_Ibuffer,FFO_OPT_TYP,0,(char *)&c_opt_typ,0);		/*** Ver 1.3 ****/
	 		/*i_err[3] = Fget32(ptr_fml_Ibuffer,FFO_XCHNG_CD,0,(char *)c_xchng_cd,0);		*** Ver 1.5 ****/
		

	  	/*for( i_cnt = 0; i_cnt < 2; i_cnt++ )  */					/*** Ver 1.3 ***/
	  	/*for( i_cnt = 0; i_cnt < 3; i_cnt++ )  */					/*** Ver 1.5 ***/
	  	/*for( i_cnt = 0; i_cnt < 4; i_cnt++ )  */					/*** Ver 1.6 ***/

	  	for( i_cnt = 0; i_cnt < 3; i_cnt++ )
      {
               if( i_err[i_cnt] == -1 )
               {
                 fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
                 fn_errlog( c_ServiceName, "S31245",FMLMSG,c_err_msg.arr);
								 EXEC SQL FREE :cur_act_oc;
                 return -1;
               }

      }

			
			/***************** Ver 1.6 Starts ***************/


			if(Fget32(ptr_fml_Ibuffer,FFO_XCHNG_CD,0,(char *)c_xchng_cd,0)== -1)	
			{

						if(Ferror32 == FNOTPRES)
            {

								/*strcpy(c_xchng_cd,"NSE"); */
								strcpy(c_xchng_cd,"NFO");				/*** Ver 1.7 ***/
	
						}
						else
					  {

								 fn_errlog( c_ServiceName, "S31250",FMLMSG,c_err_msg.arr);
                 EXEC SQL FREE :cur_act_oc;
                 return -1;


						}	


			}

			/***************** Ver 1.6 Ends ***************/
			

			trim(c_expry_dt);

			if(DEBUG_MSG_LVL_3){
      fn_userlog(c_ServiceName,"c_mkt_undrlyng:%s:",c_mkt_undrlyng);
      fn_userlog(c_ServiceName,"c_expry_dt:%s:",c_expry_dt);
      fn_userlog(c_ServiceName,"c_xchng_cd:%s:",c_xchng_cd);	/*** Ver 1.5 ***/
			}


			/************ Ver 1.3 Starts *********/

			EXEC SQL
          SELECT nvl(ltq_rt*100,0)
          INTO   :l_spot_prc
          FROM   ltq_trd_qt
          /*WHERE  ltq_xchng_cd = 'NSE' */																/*** Ver 1.5 ***/
          WHERE  ltq_xchng_cd =  decode(:c_xchng_cd,'BFO','BSE','NSE')    /*** Ver 1.5 ***/
          AND    ltq_stck_cd  = :c_mkt_undrlyng;

			if(SQLCODE != 0)
  		{
					fn_errlog(c_ServiceName, "S31255", SQLMSG,c_err_msg.arr);
          EXEC SQL CLOSE :cur_act_oc; /*** Added in VQC ***/ 
					EXEC SQL FREE :cur_act_oc;
					return -1;
  		}



	 		if(Fget32(ptr_fml_Ibuffer,FFO_MKT_TYP,0,(char *)&c_money_mkt,0) == -1)
			{
							fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
              fn_errlog( c_ServiceName, "S31260",FMLMSG,c_err_msg.arr);
              EXEC SQL FREE :cur_act_oc;
              return -1;


			}

      if (DEBUG_MSG_LVL_3)  /* Added in VQC */
      {
			 fn_userlog(c_ServiceName,"c_money_mkt :%c:",c_money_mkt);
      }

			if( c_money_mkt == '*')
			{

			if(c_opt_typ == 'A')
			c_opt_typ = '%';
	

	 		EXEC SQL EXECUTE
	 		BEGIN
   		OPEN :cur_act_oc FOR
    	SELECT :c_tablename,
						 ftq_undrlyng,
				  	 ftq_expry_dt,
				  	 nvl(ftq_crnt_oi,0),
						 nvl(ftq_chng_oi,0),
						 nvl(ftq_lst_trd_prc,0),
						 nvl(ftq_prvs_cls_prc,0),					
						 nvl(ftq_chng_prvs_cls,0),			
						 nvl(ftq_tot_val_trdd,0),
          	 nvl(ftq_bst1_bid_qty,0),
          	 nvl(ftq_bst1_bid_prc,0),
          	 nvl(ftq_bst1_offr_prc,0),
          	 nvl(ftq_bst1_offr_qty,0),
						 nvl(ftq_strk_prc,0),
						 CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
          	 ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END no_cnt_traded,
						 nvl(ftq_min_lot_qty,0),
						 nvl(ftq_tot_qty_trdd,0),
						 ftq_indstk,
						 ftq_opt_typ,
						 decode(ftq_opt_typ,'C', decode(sign(ftq_strk_prc-:l_spot_prc),1,'O',
                                                    -1,   'I', 'A'),
                              'P',decode(sign(ftq_strk_prc-:l_spot_prc),1,'I',
                                                    -1,   'O', 'A'), 'A') money_typ  

    	FROM  ftq_fo_trd_qt
    	/*WHERE ftq_xchng_cd = 'NFO'  */            /*** Ver 1.5 ***/
    	WHERE ftq_xchng_cd =  :c_xchng_cd  				  /*** Ver 1.5 ***/
    	AND   ftq_prdct_typ = 'O'
			AND		ftq_undrlyng 	= :c_mkt_undrlyng
    	AND   to_char(ftq_expry_dt,'dd-Mon-yyyy') = :c_expry_dt 
			AND		ftq_opt_typ like :c_opt_typ  
    	ORDER BY ftq_strk_prc,ftq_opt_typ;

			END;
			END-EXEC;


			}
			else if( c_money_mkt != '*')
			{


					if(c_opt_typ == 'A'	)
					{


										if(c_money_mkt == 'I')
										{


												EXEC SQL EXECUTE
															BEGIN
															OPEN :cur_act_oc FOR
															SELECT :c_tablename,
																		 ftq_undrlyng,
																		 ftq_expry_dt,
																		 nvl(ftq_crnt_oi,0),
																		 nvl(ftq_chng_oi,0),
																		 nvl(ftq_lst_trd_prc,0),
																		 nvl(ftq_prvs_cls_prc,0),           
																		 nvl(ftq_chng_prvs_cls,0),         
																		 nvl(ftq_tot_val_trdd,0),
																		 nvl(ftq_bst1_bid_qty,0),
																		 nvl(ftq_bst1_bid_prc,0),
																		 nvl(ftq_bst1_offr_prc,0),
																		 nvl(ftq_bst1_offr_qty,0),
																		 nvl(ftq_strk_prc,0),
																		 CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
																		 ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END no_cnt_traded,
																		 nvl(ftq_min_lot_qty,0),
																		 nvl(ftq_tot_qty_trdd,0),
																		 ftq_indstk,
																		 ftq_opt_typ,
																		 :c_money_mkt 
															FROM  ftq_fo_trd_qt
															/*WHERE ftq_xchng_cd = 'NFO'*/							/*** Ver 1.5 ***/
														  WHERE ftq_xchng_cd =  :c_xchng_cd           /*** Ver 1.5 ***/	
															AND   ftq_prdct_typ = 'O'
															AND   ftq_undrlyng  = :c_mkt_undrlyng
															AND   to_char(ftq_expry_dt,'dd-Mon-yyyy') = :c_expry_dt
															AND   ((ftq_opt_typ ='C' and ftq_strk_prc < :l_spot_prc) OR
                                    (ftq_opt_typ ='P' and ftq_strk_prc > :l_spot_prc))
															ORDER BY ftq_strk_prc,ftq_opt_typ;

															END;
															END-EXEC;



										}
										else if(c_money_mkt == 'A')
										{



														EXEC SQL EXECUTE
                              BEGIN
                              OPEN :cur_act_oc FOR
                              SELECT :c_tablename,
                                     ftq_undrlyng,
                                     ftq_expry_dt,
                                     nvl(ftq_crnt_oi,0),
                                     nvl(ftq_chng_oi,0),
                                     nvl(ftq_lst_trd_prc,0),
																		 nvl(ftq_prvs_cls_prc,0),           
																		 nvl(ftq_chng_prvs_cls,0),         
                                     nvl(ftq_tot_val_trdd,0),
                                     nvl(ftq_bst1_bid_qty,0),
                                     nvl(ftq_bst1_bid_prc,0),
                                     nvl(ftq_bst1_offr_prc,0),
                                     nvl(ftq_bst1_offr_qty,0),
                                     nvl(ftq_strk_prc,0),
                                     CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
                                     ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END no_cnt_traded,
                                     nvl(ftq_min_lot_qty,0),
                                     nvl(ftq_tot_qty_trdd,0),
                                     ftq_indstk,
                                     ftq_opt_typ,
																		 :c_money_mkt 
                              FROM  ftq_fo_trd_qt
															/*WHERE ftq_xchng_cd = 'NFO'*/              /*** Ver 1.5 ***/
                              WHERE ftq_xchng_cd =  :c_xchng_cd           /*** Ver 1.5 ***/
                              AND   ftq_prdct_typ = 'O'
                              AND   ftq_undrlyng  = :c_mkt_undrlyng
                              AND   to_char(ftq_expry_dt,'dd-Mon-yyyy') = :c_expry_dt
                              AND   ftq_strk_prc = :l_spot_prc
                              ORDER BY ftq_strk_prc,ftq_opt_typ;

                              END;
                              END-EXEC;


										}
										else if(c_money_mkt == 'O')
										{



															EXEC SQL EXECUTE
                              BEGIN
                              OPEN :cur_act_oc FOR
                              SELECT :c_tablename,
                                     ftq_undrlyng,
                                     ftq_expry_dt,
                                     nvl(ftq_crnt_oi,0),
                                     nvl(ftq_chng_oi,0),
                                     nvl(ftq_lst_trd_prc,0),
																		 nvl(ftq_prvs_cls_prc,0),           
																		 nvl(ftq_chng_prvs_cls,0),         
                                     nvl(ftq_tot_val_trdd,0),
                                     nvl(ftq_bst1_bid_qty,0),
                                     nvl(ftq_bst1_bid_prc,0),
                                     nvl(ftq_bst1_offr_prc,0),
                                     nvl(ftq_bst1_offr_qty,0),
                                     nvl(ftq_strk_prc,0),
                                     CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
                                     ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END no_cnt_traded,
                                     nvl(ftq_min_lot_qty,0),
                                     nvl(ftq_tot_qty_trdd,0),
                                     ftq_indstk,
                                     ftq_opt_typ,
																		 :c_money_mkt 
                              FROM  ftq_fo_trd_qt
															/*WHERE ftq_xchng_cd = 'NFO'*/              /*** Ver 1.5 ***/
                              WHERE ftq_xchng_cd =  :c_xchng_cd           /*** Ver 1.5 ***/
                              AND   ftq_prdct_typ = 'O'
                              AND   ftq_undrlyng  = :c_mkt_undrlyng
                              AND   to_char(ftq_expry_dt,'dd-Mon-yyyy') = :c_expry_dt
															AND   ((ftq_opt_typ ='C' and ftq_strk_prc > :l_spot_prc) OR
                                    (ftq_opt_typ ='P' and ftq_strk_prc < :l_spot_prc))
                              ORDER BY ftq_strk_prc,ftq_opt_typ;

                              END;
                              END-EXEC;


										}

				  }
			  else 
				  {



										if(c_money_mkt == 'I')
										{



													EXEC SQL EXECUTE
                              BEGIN
                              OPEN :cur_act_oc FOR
                              SELECT :c_tablename,
                                     ftq_undrlyng,
                                     ftq_expry_dt,
                                     nvl(ftq_crnt_oi,0),
                                     nvl(ftq_chng_oi,0),
                                     nvl(ftq_lst_trd_prc,0),
																		 nvl(ftq_prvs_cls_prc,0),           
																		 nvl(ftq_chng_prvs_cls,0),         
                                     nvl(ftq_tot_val_trdd,0),
                                     nvl(ftq_bst1_bid_qty,0),
                                     nvl(ftq_bst1_bid_prc,0),
                                     nvl(ftq_bst1_offr_prc,0),
                                     nvl(ftq_bst1_offr_qty,0),
                                     nvl(ftq_strk_prc,0),
                                     CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
                                     ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END no_cnt_traded,
                                     nvl(ftq_min_lot_qty,0),
                                     nvl(ftq_tot_qty_trdd,0),
                                     ftq_indstk,
                                     ftq_opt_typ,
																		 :c_money_mkt 
                              FROM  ftq_fo_trd_qt
															/*WHERE ftq_xchng_cd = 'NFO'*/              /*** Ver 1.5 ***/
                              WHERE ftq_xchng_cd =  :c_xchng_cd           /*** Ver 1.5 ***/
                              AND   ftq_prdct_typ = 'O'
                              AND   ftq_undrlyng  = :c_mkt_undrlyng
                              AND   to_char(ftq_expry_dt,'dd-Mon-yyyy') = :c_expry_dt
															AND	  ftq_opt_typ = :c_opt_typ 
                              AND   ((ftq_opt_typ ='C' and ftq_strk_prc < :l_spot_prc) OR
																		(ftq_opt_typ ='P' and ftq_strk_prc > :l_spot_prc))
                              ORDER BY ftq_strk_prc,ftq_opt_typ;

                              END;
                              END-EXEC;



										}
										else if(c_money_mkt == 'A')
										{


													EXEC SQL EXECUTE
                              BEGIN
                              OPEN :cur_act_oc FOR
                              SELECT :c_tablename,
                                     ftq_undrlyng,
                                     ftq_expry_dt,
                                     nvl(ftq_crnt_oi,0),
                                     nvl(ftq_chng_oi,0),
                                     nvl(ftq_lst_trd_prc,0),
																		 nvl(ftq_prvs_cls_prc,0),           
																		 nvl(ftq_chng_prvs_cls,0),         
                                     nvl(ftq_tot_val_trdd,0),
                                     nvl(ftq_bst1_bid_qty,0),
                                     nvl(ftq_bst1_bid_prc,0),
                                     nvl(ftq_bst1_offr_prc,0),
                                     nvl(ftq_bst1_offr_qty,0),
                                     nvl(ftq_strk_prc,0),
                                     CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
                                     ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END no_cnt_traded,
                                     nvl(ftq_min_lot_qty,0),
                                     nvl(ftq_tot_qty_trdd,0),
                                     ftq_indstk,
                                     ftq_opt_typ,
																		 :c_money_mkt 
                              FROM  ftq_fo_trd_qt
															/*WHERE ftq_xchng_cd = 'NFO'*/              /*** Ver 1.5 ***/
                              WHERE ftq_xchng_cd =  :c_xchng_cd           /*** Ver 1.5 ***/
                              AND   ftq_prdct_typ = 'O'
                              AND   ftq_undrlyng  = :c_mkt_undrlyng
                              AND   to_char(ftq_expry_dt,'dd-Mon-yyyy') = :c_expry_dt
                              AND   ftq_opt_typ = :c_opt_typ
                              AND   ftq_strk_prc = :l_spot_prc
                              ORDER BY ftq_strk_prc,ftq_opt_typ;

                              END;
                              END-EXEC;




										}
										else if(c_money_mkt == 'O')
										{


														EXEC SQL EXECUTE
                              BEGIN
                              OPEN :cur_act_oc FOR
                              SELECT :c_tablename,
                                     ftq_undrlyng,
                                     ftq_expry_dt,
                                     nvl(ftq_crnt_oi,0),
                                     nvl(ftq_chng_oi,0),
                                     nvl(ftq_lst_trd_prc,0),
																		 nvl(ftq_prvs_cls_prc,0),          
																		 nvl(ftq_chng_prvs_cls,0),        
                                     nvl(ftq_tot_val_trdd,0),
                                     nvl(ftq_bst1_bid_qty,0),
                                     nvl(ftq_bst1_bid_prc,0),
                                     nvl(ftq_bst1_offr_prc,0),
                                     nvl(ftq_bst1_offr_qty,0),
                                     nvl(ftq_strk_prc,0),
                                     CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
                                     ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END no_cnt_traded,
                                     nvl(ftq_min_lot_qty,0),
                                     nvl(ftq_tot_qty_trdd,0),
                                     ftq_indstk,
                                     ftq_opt_typ,
																		 :c_money_mkt 
                              FROM  ftq_fo_trd_qt
															/*WHERE ftq_xchng_cd = 'NFO'*/              /*** Ver 1.5 ***/
                              WHERE ftq_xchng_cd =  :c_xchng_cd           /*** Ver 1.5 ***/
                              AND   ftq_prdct_typ = 'O'
                              AND   ftq_undrlyng  = :c_mkt_undrlyng
                              AND   to_char(ftq_expry_dt,'dd-Mon-yyyy') = :c_expry_dt
                              AND   ftq_opt_typ = :c_opt_typ
															AND   ((ftq_opt_typ ='C' and ftq_strk_prc > :l_spot_prc) OR
                                    (ftq_opt_typ ='P' and ftq_strk_prc < :l_spot_prc))
                              ORDER BY ftq_strk_prc,ftq_opt_typ;

                              END;
                              END-EXEC;



										}



				  }



			}
			



	}

	/********** Ver 1.3 Ends **********/


	if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {

      fn_errlog(c_ServiceName, "S31265", SQLMSG,c_err_msg.arr);
      EXEC SQL CLOSE :cur_act_oc; /*** Added in VQC ***/
      EXEC SQL FREE :cur_act_oc;
      return -1;
  }


	i_count = 0 ;
	
  
	while(1)
  {


      EXEC SQL
          FETCH :cur_act_oc 
          INTO	:c_mkt_tablename,
						 		:sql_ftq_undrlyng,
						 		:sql_ftq_expry_dt,
						 		:sql_ftq_crnt_oi,
						 		:sql_ftq_chng_oi,
						 		:sql_ftq_lst_trd_prc,
								:sql_ftq_prvs_cls_prc,            /***1.3 ****/
								:sql_ftq_chng_prvs_cls,           /***1.3 ****/
							  :d_turnovr, 
						    :sql_ftq_bst1_bid_qty,
						    :sql_ftq_bst1_bid_prc,
						    :sql_ftq_bst1_offr_prc,
						    :sql_ftq_bst1_offr_qty,
						    :sql_ftq_strk_prc,
								:l_tot_cntrct,
								:sql_ftq_min_lot_qty,
								:sql_ftq_tot_qty_trdd,
							  :sql_ftq_indstk,		
						    :sql_ftq_opt_typ,
								:c_money_mkt;
										 
      if(SQLCODE != 0)
      {


					 if(SQLCODE == NO_DATA_FOUND)
              {
								if(DEBUG_MSG_LVL_3){
								fn_userlog( c_ServiceName,"OC No data found");}
								break;
              }


           fn_errlog(c_ServiceName, "S31270", SQLMSG,c_err_msg.arr);
           EXEC SQL CLOSE :cur_act_oc; /*** Added in VQC ***/
           EXEC SQL FREE :cur_act_oc;
           return -1;
      }


    /*** Commented in VQC as it is already selected before fetch 
    and it is extra db hit in while loop for each record fetched  ***

			EXEC SQL
       SELECT nvl(ltq_rt*100,0)
       INTO   :l_spot_prc
       FROM   ltq_trd_qt
			*WHERE  ltq_xchng_cd = 'NSE' *                               *** Ver 1.5 ***
        WHERE  ltq_xchng_cd =  decode(:c_xchng_cd,'BFO','BSE','NSE')    *** Ver 1.5 ***
       AND    ltq_stck_cd  = :sql_ftq_undrlyng;

       if(SQLCODE != 0)
       {
              fn_errlog(c_ServiceName, "S31275", SQLMSG,c_err_msg.arr);
              EXEC SQL FREE :cur_act_oc;
              return -1;
       }

       ****************************************/

       d_undrlyng_val = (double)l_spot_prc;

        if(DEBUG_MSG_LVL_3){
        fn_userlog( c_ServiceName,"OC:l_spot_prc :%ld",l_spot_prc);
        fn_userlog( c_ServiceName,"OC:d_undrlyng_val:%lf",d_undrlyng_val);
        }


			d_tot_turnover = (double)(sql_ftq_tot_qty_trdd *1.0*( sql_ftq_lst_trd_prc + sql_ftq_strk_prc));


		 if(DEBUG_MSG_LVL_3)
		 {
        fn_userlog( c_ServiceName,"OC:c_mkt_tablename:%s:"      ,c_mkt_tablename);
        fn_userlog( c_ServiceName,"OC:sql_ftq_prdct_typ:%c:"    ,sql_ftq_prdct_typ);
        fn_userlog( c_ServiceName,"OC:sql_ftq_indstk:%c:"       ,sql_ftq_indstk);
        fn_userlog( c_ServiceName,"OC:sql_ftq_undrlyng:%s:"     ,sql_ftq_undrlyng);
        fn_userlog( c_ServiceName,"OC:sql_ftq_expry_dt:%s:"     ,sql_ftq_expry_dt.arr);
        fn_userlog( c_ServiceName,"OC:sql_ftq_strk_prc:%ld:"    ,sql_ftq_strk_prc);
        fn_userlog( c_ServiceName,"OC:sql_ftq_opt_typ:%c:"      ,sql_ftq_opt_typ);
        fn_userlog( c_ServiceName,"OC:sql_ftq_exer_typ:%c:"     ,sql_ftq_exer_typ);
        fn_userlog( c_ServiceName,"OC:sql_ftq_opn_prc:%ld:"     ,sql_ftq_opn_prc);
        fn_userlog( c_ServiceName,"OC:sql_ftq_hgh_prc:%ld:"     ,sql_ftq_hgh_prc);
        fn_userlog( c_ServiceName,"OC:sql_ftq_low_prc:%ld:"     ,sql_ftq_low_prc);
        fn_userlog( c_ServiceName,"OC:sql_ftq_prvs_cls_prc:%ld:",sql_ftq_prvs_cls_prc);
        fn_userlog( c_ServiceName,"OC:sql_ftq_chng_prvs_cls:%ld:",sql_ftq_chng_prvs_cls);
        fn_userlog( c_ServiceName,"OC:sql_ftq_lst_trd_prc:%ld:" ,sql_ftq_lst_trd_prc);
        fn_userlog( c_ServiceName,"OC:l_tot_cntrct:%ld:"        ,l_tot_cntrct);
        fn_userlog( c_ServiceName,"OC:sql_ftq_tot_qty_trdd:%ld:" ,sql_ftq_tot_qty_trdd);
        fn_userlog( c_ServiceName,"OC:d_tot_turnover:%lf:"      ,d_tot_turnover);
        fn_userlog( c_ServiceName,"OC:sql_ftq_bst1_bid_qty:%ld:" ,sql_ftq_bst1_bid_qty);
        fn_userlog( c_ServiceName,"OC:sql_ftq_bst1_offr_qty:%ld:",sql_ftq_bst1_offr_qty);
        fn_userlog( c_ServiceName,"OC:c_money_mkt:%c:",c_money_mkt);			/**Ver 1.3 **/
      }


      i_err[0]  = Fadd32 ( ptr_fml_Obuffer, FFO_PRDCT_DESC,( char *)c_mkt_tablename, 0 );

      /****  contract  details ****/
    
			i_err[1] = Fadd32(ptr_fml_Obuffer, FFO_PRDCT_TYP,(char *)&sql_ftq_prdct_typ, 0);
   
      i_err[2] = Fadd32(ptr_fml_Obuffer, FFO_UNDRLYNG,(char *)sql_ftq_undrlyng, 0);
      i_err[3] = Fadd32(ptr_fml_Obuffer,FFO_EXPRY_DT,(char *)sql_ftq_expry_dt.arr,0);
     
      i_err[4] = Fadd32(ptr_fml_Obuffer,FFO_CTGRY_INDSTK,(char *)&sql_ftq_indstk,0);
   
      i_err[5] = Fadd32(ptr_fml_Obuffer,FFO_STRK_PRC,(char *)&sql_ftq_strk_prc,0);
      i_err[6] = Fadd32(ptr_fml_Obuffer,FFO_OPT_TYP,(char *)&sql_ftq_opt_typ,0);
     
      i_err[7] = Fadd32(ptr_fml_Obuffer,FFO_EXER_TYP,(char *)&sql_ftq_exer_typ,0);

      /**** price details ****/


			i_err[8] = Fadd32(ptr_fml_Obuffer, FFO_HGH_PRC,(char *)&sql_ftq_hgh_prc, 0);
      i_err[9] = Fadd32(ptr_fml_Obuffer, FFO_LOW_PRC,(char *)&sql_ftq_low_prc, 0);
      i_err[10] = Fadd32(ptr_fml_Obuffer, FFO_OPN_PRC,(char *)&sql_ftq_opn_prc, 0);
      i_err[11] = Fadd32(ptr_fml_Obuffer, FFO_PRVS_CLS_PRC,(char *)&sql_ftq_prvs_cls_prc, 0);

      i_err[12] = Fadd32(ptr_fml_Obuffer, FFO_LST_TRD_PRC,(char *)&sql_ftq_lst_trd_prc, 0);


			/**** Extra details ****/	
	
			sql_ftq_bst1_bid_prc1 = (double)sql_ftq_bst1_bid_prc;
			sql_ftq_bst1_offr_prc1	= (double)sql_ftq_bst1_offr_prc;


      i_err[13] = Fadd32 ( ptr_fml_Obuffer, FFO_TOT_QTY_TRDD,( char *)&l_tot_cntrct, 0);
      i_err[14] = Fadd32 ( ptr_fml_Obuffer, FFO_SOMC_PRCNT,(char *)&d_tot_turnover, 0 );
      i_err[15] = Fadd32 ( ptr_fml_Obuffer, FFO_BASE_ORD_VAL,(char *)&d_undrlyng_val, 0 );

			i_err[16]= Fadd32(ptr_fml_Obuffer, FML_IDD_BST_BID_QTY, (char *)&sql_ftq_bst1_bid_qty, 0);
			i_err[17]= Fadd32(ptr_fml_Obuffer, FML_IDD_BST_BID_PRC, (char *)&sql_ftq_bst1_bid_prc1, 0);
			i_err[18]= Fadd32(ptr_fml_Obuffer, FML_IDD_BST_OFFR_QTY, (char *)&sql_ftq_bst1_offr_qty, 0);
			i_err[19]= Fadd32(ptr_fml_Obuffer, FML_IDD_BST_OFFR_PRC, (char *)&sql_ftq_bst1_offr_prc1, 0);

			i_err[20] = Fadd32(ptr_fml_Obuffer,FFO_CRNT_OI,(char *)&sql_ftq_crnt_oi,0);
      i_err[21] = Fadd32(ptr_fml_Obuffer,FFO_CHNG_OI,(char *)&sql_ftq_chng_oi,0);
			i_err[22] = Fadd32(ptr_fml_Obuffer, FFO_MIN_LOT_QTY,(char*)&sql_ftq_min_lot_qty,0);
      i_err[23] = Fadd32(ptr_fml_Obuffer,FFO_CHNG_PRVS_CLS,(char *)&sql_ftq_chng_prvs_cls,0);/*1.3*/
      i_err[24] = Fadd32(ptr_fml_Obuffer,FFO_MKT_TYP,(char *)&c_money_mkt, 0); /**1.3 **/

			/*for( i_cnt = 0; i_cnt < 23; i_cnt++ ) */
			for( i_cnt = 0; i_cnt < 25; i_cnt++ )						/** 1.3 **/ 
      {
               if( i_err[i_cnt] == -1 )
               {
                 fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
                 fn_errlog( c_ServiceName, "S31280",FMLMSG,c_err_msg.arr);
                 EXEC SQL CLOSE :cur_act_oc; /*** Added in VQC ***/
                 EXEC SQL FREE :cur_act_oc;
                 return -1;
               }

      }
							


			i_count ++;


			if(DEBUG_MSG_LVL_3){
      fn_userlog(c_ServiceName,"OC total i_count :%d:",i_count);}

     /* if (i_count == 20) 
      {

        fn_userlog(c_ServiceName,"OC i_count :%d:",i_count);
        break;

      }*/

      /*** Commented in VQC ***
			if(DEBUG_MSG_LVL_3){
      fn_userlog(c_ServiceName,"-----------------------------------------------------------");} ***/


	}

    EXEC SQL CLOSE :cur_act_oc; /*** Added in VQC ***/
		EXEC SQL FREE :cur_act_oc;

    return (0);		


}

int fn_get_qt( char 		*c_ServiceName,
               FBFR32	  * ptr_fml_Ibuffer,
               long 		l_call_no)
{


  /*** int  i = 0; *** commented in VQC ***/
  int  i_err[TOTAL_FML];
  /*** int  i_count = 0; Commented in VQC as variable is not used in this function ***/
  int  i_cnt = 0;
	int	 i_ret_val = 0;
  int   i_date_diff = 0;  /* Added in VQC */
  long l_spot_prc = 0;
	long l_strk_prc         = 0;
	/*long li_session_id				= -1;*/
	long li_session_id				= 0; 
	char c_user_id[7]; 
	char c_exrc_typ         = 'E';
  /*** char c_tablename[5];  Commented in VQC as variable is not used ***/
  varchar c_err_msg[256]; /* Datatype changed from char to varchar in VQC */
	char c_mkt_undrlyng[7];

	char	c_prdct_typ;
  /*** char  c_date[12]; Commented in VQC as variable is not used ***/
  char c_expry_dt[23];    /* Added in VQC */

	long  l_bufferlength = 0;

	double d_turnovr         = 0.0;
	double d_tot_turnover		 = 0.0;
	double d_ltp = 0.00;
	double d_imp_vol = 0.00;
  double d_delta= 0.00;
  double d_theta= 0.00;
  double d_vega= 0.00;
  double d_gamma= 0.00;
	double d_strk_price = 0.00;
	double d_dividend = 25.00;
	double d_interest_rt = 12.00;
	double d_undrlyng_val1= 0.00;
  double sql_ftq_lst_trd_prc1 = 0.0;
  double sql_ftq_bst1_bid_prc1 = 0.0;
  double sql_ftq_bst2_bid_prc1 = 0.0;
  double sql_ftq_bst3_bid_prc1 = 0.0;
  double sql_ftq_bst4_bid_prc1 = 0.0;
  double sql_ftq_bst5_bid_prc1 = 0.0;
  double sql_ftq_bst1_offr_prc1 = 0.0;
  double sql_ftq_bst2_offr_prc1 = 0.0;
  double sql_ftq_bst3_offr_prc1 = 0.0;
  double sql_ftq_bst4_offr_prc1 = 0.0;
  double sql_ftq_bst5_offr_prc1 = 0.0;

  double d_days_to_exp     = 0.0;  /* Added in VQC */ 
  double d_days_to_exp_temp = 0.0; /* Added in VQC */ 

  double d_tot_offr_qty = 0.0; /* Added in VQC */
  double d_tot_bid_qty = 0.0;  /* Added in VQC */

	FBFR32 *ptr_Ibuf;
	FBFR32 *ptr_Obuf;

  /* Initializing input buffer */

	ptr_Ibuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*10 );

  if ( ptr_Ibuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31285", TPMSG, c_err_msg.arr  );
    return -1;
  }


	/* Initializing output buffer */

  ptr_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*10 );

  if ( ptr_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31290", TPMSG, c_err_msg.arr  );
    tpfree ( ( char * )ptr_Ibuf);   /* Added in VQC */
    return -1;
  }

	MEMSET(c_mkt_undrlyng);
	MEMSET(c_user_id); 

	/*** strcpy( c_tablename,"GQT" ); *** Commented in VQC as variable is not used ***/
	strcpy( c_user_id,"system" );


	/*i_err[0] = Fget32(ptr_fml_Ibuffer,FFO_USR_ID,0,(char *)c_user_id,0);
	i_err[1] = Fget32(ptr_fml_Ibuffer,FFO_SSSN_ID,0,(char *)&li_session_id,0);*/
	i_err[0] = Fget32(ptr_fml_Ibuffer,FFO_UNDRLYNG,0,(char *)c_mkt_undrlyng,0);
  i_err[1] = Fget32(ptr_fml_Ibuffer,FFO_EXPRY_DT,0,(char *)c_expry_dt,0);
  i_err[2] = Fget32(ptr_fml_Ibuffer,FFO_PRDCT_TYP,0,(char *)&c_prdct_typ,0);
  i_err[3] = Fget32(ptr_fml_Ibuffer,FFO_CTGRY_INDSTK,0,(char *)&c_ind_stk,0);

	for( i_cnt = 0; i_cnt < 4; i_cnt++ )
  {
         if( i_err[i_cnt] == -1 )
          {
                 fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
                 fn_errlog( c_ServiceName, "S31295",FMLMSG,c_err_msg.arr);
                 tpfree ( ( char * )ptr_Ibuf);   /* Added in VQC */
                 tpfree ( ( char * )ptr_Obuf);   /* Added in VQC */
                 return -1;
          }

  }
	


	if(c_prdct_typ == 'O')
	{
  		i_err[4] = Fget32(ptr_fml_Ibuffer,FFO_STRK_PRC,0,(char *)&l_strk_prc,0);
  		i_err[5] = Fget32(ptr_fml_Ibuffer,FFO_OPT_TYP,0,(char *)&c_opt_typ,0);
  		i_err[6] = Fget32(ptr_fml_Ibuffer,FFO_EXER_TYP,0,(char *)&c_exrc_typ,0);

			for( i_cnt = 4; i_cnt < 7; i_cnt++ )
  		{
								 if( i_err[i_cnt] == -1 )
								 {
												 fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
												 fn_errlog( c_ServiceName, "S31300",FMLMSG,c_err_msg.arr);
                         tpfree ( ( char * )ptr_Ibuf);   /* Added in VQC */
                         tpfree ( ( char * )ptr_Obuf);   /* Added in VQC */
												 return -1;
								 }

  		}
	
	}


	if(DEBUG_MSG_LVL_3){
	 fn_userlog(c_ServiceName,"c_user_id :%s:",c_user_id);
   fn_userlog(c_ServiceName,"li_session_id:%ld:",li_session_id);
	 fn_userlog(c_ServiceName,"c_mkt_undrlyng :%s:",c_mkt_undrlyng);
	 fn_userlog(c_ServiceName,"c_expry_dt:%s:",c_expry_dt);
	 fn_userlog(c_ServiceName,"c_prdct_typ :%c:",c_prdct_typ);
	 fn_userlog(c_ServiceName,"c_ind_stk:%c:",c_ind_stk);
	 fn_userlog(c_ServiceName,"l_strk_prc:%ld:",l_strk_prc);
	 fn_userlog(c_ServiceName,"c_opt_typ:%c:",c_opt_typ);
	 fn_userlog(c_ServiceName,"c_exrc_typ:%c:",c_exrc_typ);
	}


	/*trim(sql_ftq_undrlyng);*/


	EXEC SQL
       SELECT nvl(ltq_rt*100,0)
       INTO   :l_spot_prc
       FROM   ltq_trd_qt
       WHERE  ltq_xchng_cd = 'NSE'
       AND    ltq_stck_cd  = :c_mkt_undrlyng;

       if(SQLCODE != 0)
       {
              fn_errlog(c_ServiceName, "S31305", SQLMSG,c_err_msg.arr);
              tpfree ( ( char * )ptr_Ibuf);   /* Added in VQC */
              tpfree ( ( char * )ptr_Obuf);   /* Added in VQC */
              return -1;
       }


       d_undrlyng_val = (double)l_spot_prc;

			 if(DEBUG_MSG_LVL_3){
			 fn_userlog( c_ServiceName,"GQT:l_spot_prc :%ld",l_spot_prc);
       fn_userlog( c_ServiceName,"GQT:d_undrlyng_val:%lf",d_undrlyng_val);}


		EXEC SQL
			  SELECT  ftq_prdct_typ,
								ftq_indstk,
								ftq_undrlyng,
								ftq_expry_dt,
								NVL(ftq_exer_typ,'*'),
								NVL(ftq_opt_typ,'*'),
								NVL(ftq_strk_prc,0),   
								NVL(ftq_opn_prc,0),
								NVL(ftq_hgh_prc,0),
								NVL(ftq_low_prc,0),
								NVL(ftq_lst_trd_prc,0),
								NVL(ftq_prvs_cls_prc,0),
								NVL(ftq_cls_prc,0),
								NVL(ftq_chng_prvs_cls,0),
							  NVL(ftq_indctr,'+'),
								NVL(ftq_crnt_oi,0),
								NVL(ftq_chng_oi,0),
								NVL(ftq_bst1_bid_qty,0),
								NVL(ftq_bst2_bid_qty,0),
								NVL(ftq_bst3_bid_qty,0),
								NVL(ftq_bst4_bid_qty,0),
								NVL(ftq_bst5_bid_qty,0),
								NVL(ftq_bst1_bid_prc,0),
								NVL(ftq_bst2_bid_prc,0),
								NVL(ftq_bst3_bid_prc,0),
								NVL(ftq_bst4_bid_prc,0),
								NVL(ftq_bst5_bid_prc,0),
								NVL(ftq_bst1_offr_qty,0),
								NVL(ftq_bst2_offr_qty,0),
								NVL(ftq_bst3_offr_qty,0),
								NVL(ftq_bst4_offr_qty,0),
								NVL(ftq_bst5_offr_qty,0),
								NVL(ftq_bst1_offr_prc,0),
								NVL(ftq_bst2_offr_prc,0),
								NVL(ftq_bst3_offr_prc,0),
								NVL(ftq_bst4_offr_prc,0),
								NVL(ftq_bst5_offr_prc,0),
								NVL(ftq_tot_bid_qty,0),
								NVL(ftq_tot_offr_qty,0),
								NVL(ftq_min_lot_qty,0),
								NVL(ftq_tot_val_trdd,0),
								NVL(ftq_tot_qty_trdd,0),
								CASE WHEN nvl(ftq_min_lot_qty,0) = 0 THEN 0
             	  ELSE nvl(ftq_tot_qty_trdd,0)/ftq_min_lot_qty END
       INTO
								:sql_ftq_prdct_typ,
								:sql_ftq_indstk,
								:sql_ftq_undrlyng,
								:sql_ftq_expry_dt,
								:sql_ftq_exer_typ,
								:sql_ftq_opt_typ,
								:sql_ftq_strk_prc,   
								:sql_ftq_opn_prc,
								:sql_ftq_hgh_prc,
								:sql_ftq_low_prc,
								:sql_ftq_lst_trd_prc,
								:sql_ftq_prvs_cls_prc,
								:sql_ftq_cls_prc,
								:sql_ftq_chng_prvs_cls,
								:sql_ftq_indctr,
								:sql_ftq_crnt_oi,
								:sql_ftq_chng_oi,
                :sql_ftq_bst1_bid_qty,
                :sql_ftq_bst2_bid_qty,
                :sql_ftq_bst3_bid_qty,
                :sql_ftq_bst4_bid_qty,
                :sql_ftq_bst5_bid_qty,
                :sql_ftq_bst1_bid_prc,
                :sql_ftq_bst2_bid_prc,
                :sql_ftq_bst3_bid_prc,
                :sql_ftq_bst4_bid_prc,
                :sql_ftq_bst5_bid_prc,
                :sql_ftq_bst1_offr_qty,
                :sql_ftq_bst2_offr_qty,
                :sql_ftq_bst3_offr_qty,
                :sql_ftq_bst4_offr_qty,
                :sql_ftq_bst5_offr_qty,
                :sql_ftq_bst1_offr_prc,
                :sql_ftq_bst2_offr_prc,
                :sql_ftq_bst3_offr_prc,
                :sql_ftq_bst4_offr_prc,
                :sql_ftq_bst5_offr_prc,
								:sql_ftq_tot_bid_qty,
                :sql_ftq_tot_offr_qty,
                :sql_ftq_min_lot_qty,
								:d_turnovr,
								:sql_ftq_tot_qty_trdd,
								:l_tot_cntrct
					FROM  ftq_fo_trd_qt
				  WHERE ftq_xchng_cd  = 'NFO' 
					AND		ftq_prdct_typ = :c_prdct_typ
					AND		ftq_undrlyng  = :c_mkt_undrlyng 
					AND		ftq_indstk  	= :c_ind_stk
					AND		ftq_expry_dt  = :c_expry_dt
					AND		ftq_strk_prc  = decode(:c_prdct_typ,'O',:l_strk_prc,0)
					AND	  ftq_opt_typ		= decode(:c_prdct_typ,'O',:c_opt_typ,'*');

					if(SQLCODE != 0)
          {

							if( SQLCODE == NO_DATA_FOUND)
							{

                fn_errlog( c_ServiceName, "B21016",DEFMSG,c_err_msg.arr);
               /*** Commented in VQC  as below handling is already present in error condition of function call *** 
                Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 ); ***/ 

							}
							else
							{
                fn_errlog(c_ServiceName, "S31310", SQLMSG,c_err_msg.arr);
							}
             
              tpfree ( ( char * )ptr_Ibuf);   /* Added in VQC */
              tpfree ( ( char * )ptr_Obuf);   /* Added in VQC */
              return -1;
          }


			EXEC SQL
       SELECT (to_date(:sql_ftq_expry_dt,'dd-Mon-YYYY') - to_date(sysdate,'dd-Mon-YYYY') + 1 ),
              (to_date(:sql_ftq_expry_dt,'dd-Mon-YYYY') - to_date(sysdate,'dd-Mon-YYYY') ),
              to_date(:sql_ftq_expry_dt,'dd-Mon-YYYY') - to_date(sysdate,'dd-Mon-YYYY')
       INTO   :d_days_to_exp ,
              :d_days_to_exp_temp ,
              :i_date_diff
       FROM   DUAL;

  		 if( SQLCODE != 0 )
  		 {
						fn_errlog( c_ServiceName, "S31315", SQLMSG, c_err_msg.arr  );
            tpfree ( ( char * )ptr_Ibuf);   /* Added in VQC */
            tpfree ( ( char * )ptr_Obuf);   /* Added in VQC */
						return -1;
			 }

			 if(DEBUG_MSG_LVL_3){
			 fn_userlog(c_ServiceName,"date_diff:%d:",i_date_diff);}

			 if(i_date_diff != 0 )
			 {
						d_days_to_exp = d_days_to_exp_temp;
			 }


			 d_strk_price = (double)l_strk_prc/100;
			 sql_ftq_lst_trd_prc1 = (double)sql_ftq_lst_trd_prc; 
			 sql_ftq_lst_trd_prc1 = sql_ftq_lst_trd_prc1/100; 
			 d_undrlyng_val1= (double)d_undrlyng_val/100; 

			 d_tot_turnover = (double)(sql_ftq_tot_qty_trdd *1.0*( sql_ftq_lst_trd_prc + sql_ftq_strk_prc));
			 
			 if(DEBUG_MSG_LVL_3){
			 fn_userlog(c_ServiceName,"c_user_id :%s:",		  c_user_id);
			 fn_userlog(c_ServiceName,"li_session_id:%ld:", li_session_id);
			 fn_userlog(c_ServiceName,"d_strk_price:%lf:",  d_strk_price);
			 fn_userlog(c_ServiceName,"d_dividend:%lf:",    d_dividend);
			 fn_userlog(c_ServiceName,"d_undrlyng_val:%lf:",d_undrlyng_val1);
			 fn_userlog(c_ServiceName,"d_interest_rt:%lf:", d_interest_rt);
			 fn_userlog(c_ServiceName,"d_days_to_exp:%lf:", d_days_to_exp);
			 fn_userlog(c_ServiceName,"c_opt_typ:%c:",      c_opt_typ);
			 fn_userlog(c_ServiceName,"c_exrc_typ:%c:",     c_exrc_typ);
			 fn_userlog(c_ServiceName,"d_tot_turnover:%lf:",d_tot_turnover);
			 fn_userlog(c_ServiceName,"sql_ftq_lst_trd_prc1:%lf:",sql_ftq_lst_trd_prc1);}


			 i_err[0] = Fadd32(ptr_Ibuf, FFO_USR_ID, 				(char *)c_user_id, 0 );
       i_err[1] = Fadd32(ptr_Ibuf, FFO_SSSN_ID,				(char *)&li_session_id, 0 ); 
       i_err[2] = Fadd32(ptr_Ibuf, FFO_EFF_LTP,				(char *)&sql_ftq_lst_trd_prc1, 0);
       i_err[3] = Fadd32(ptr_Ibuf, FFO_STCK_PRICE,		(char *)&d_undrlyng_val1, 0);
       i_err[4] = Fadd32(ptr_Ibuf, FFO_STRIKE_PRC,		(char *)&d_strk_price, 0);
       i_err[5] = Fadd32(ptr_Ibuf, FFO_OPT_TYP,				(char *)&c_opt_typ, 0);
       i_err[6] = Fadd32(ptr_Ibuf, FFO_EXER_TYP,			(char *)&c_exrc_typ, 0);
       i_err[7] = Fadd32(ptr_Ibuf, FFO_INTRST_RT,			(char *)&d_interest_rt, 0 );
       i_err[8] = Fadd32(ptr_Ibuf, FFO_PLG_RT,				(char *)&d_dividend, 0 );
       i_err[9] = Fadd32(ptr_Ibuf, FFO_DAY_TO_EXP,		(char *)&d_days_to_exp, 0 );

			 for( i_cnt = 0; i_cnt < 10; i_cnt++ )
       {
               if( i_err[i_cnt] == -1 )
               {
                 fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
                 fn_errlog( c_ServiceName, "S31320",FMLMSG,c_err_msg.arr);
                 tpfree ( ( char * )ptr_Ibuf);   /* Added in VQC */
                 tpfree ( ( char * )ptr_Obuf);   /* Added in VQC */
                 return -1;
               }

        }


        l_bufferlength = Fsizeof32(ptr_Obuf) + MIN_FML_BUF_LEN * 10;

				if(DEBUG_MSG_LVL_3){
				fn_userlog( c_ServiceName,"Calling SFO_CAL_GREEKS");}

        i_ret_val=tpcall("SFO_CAL_GREEKS",(char*)ptr_Ibuf,0,(char **)&ptr_Obuf,&l_bufferlength,0);

        if( i_ret_val == -1 )
        {				

					  fn_userlog( c_ServiceName," Call to service for fetching implied volatility failed " );
            tpfree ( ( char * )ptr_Ibuf);   /* Added in VQC */
            tpfree ( ( char * )ptr_Obuf);   /* Added in VQC */
            return -1;

        }

				i_err[0] = Fget32( ptr_Obuf, FFO_EFF_LMT_RT,0,					(char *)&d_imp_vol,0) ;
				i_err[1] = Fget32( ptr_Obuf, FFO_EFF_LTP,0,							(char *)&d_ltp, 0);
				i_err[2] = Fget32( ptr_Obuf, FFO_INIT_MRGN_PRCNT,0,			(char *)&d_delta, 0);
				i_err[3] = Fget32( ptr_Obuf, FFO_MIN_MRGN_PRCNT,0,			(char *)&d_theta, 0);
				i_err[4] = Fget32( ptr_Obuf, FFO_SOMC_PRCNT,0,					(char *)&d_vega, 0);
				i_err[5] = Fget32( ptr_Obuf, FFO_AVM_PRCNT,0,						(char *)&d_gamma, 0);

				for(i_cnt=0;i_cnt<5;i_cnt++)
    		{
      			if(i_err[i_cnt]==-1)
      			{
								fn_userlog( c_ServiceName, "Error in Fadd for i_cnt=%d", i_cnt);
								fn_errlog( c_ServiceName, "S31325", FMLMSG, c_err_msg.arr  );
								/*Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
								tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuffer,0L,0) ; */
                tpfree ( ( char * )ptr_Ibuf);   /* Added in VQC */
                tpfree ( ( char * )ptr_Obuf);   /* Added in VQC */
								return -1;
      			}
    		}

				i_err[0] = Fadd32(ptr_fml_Obuffer, FFO_PRDCT_TYP,(char *)&sql_ftq_prdct_typ, 0);

				i_err[1] = Fadd32(ptr_fml_Obuffer, FFO_UNDRLYNG,(char *)sql_ftq_undrlyng, 0);

				i_err[2] = Fadd32(ptr_fml_Obuffer, FFO_OPN_PRC,(char *)&sql_ftq_opn_prc, 0);

				i_err[3] = Fadd32(ptr_fml_Obuffer, FFO_HGH_PRC,(char *)&sql_ftq_hgh_prc, 0);

				i_err[4] = Fadd32(ptr_fml_Obuffer, FFO_LOW_PRC,(char *)&sql_ftq_low_prc, 0);

				i_err[5] = Fadd32(ptr_fml_Obuffer, FFO_PRVS_CLS_PRC,(char *)&sql_ftq_prvs_cls_prc, 0);

				i_err[6] = Fadd32(ptr_fml_Obuffer, FFO_LST_TRD_PRC,(char *)&sql_ftq_lst_trd_prc, 0);

				sql_ftq_bst1_bid_prc1 = (double)sql_ftq_bst1_bid_prc;

				i_err[7] = Fadd32(ptr_fml_Obuffer, FML_IDD_BST_BID_PRC, (char *)&sql_ftq_bst1_bid_prc1, 0);

        /*** Commented in VQC as variable used was incorrect ***
        sql_ftq_bst2_bid_prc1 = (double)sql_ftq_bst1_bid_prc;
        ***/     

				sql_ftq_bst2_bid_prc1 = (double)sql_ftq_bst2_bid_prc; /* Correct variable used in VQC */

				i_err[8] = Fadd32(ptr_fml_Obuffer, FML_LTQ_BST2_BID_PRC,(char *)&sql_ftq_bst2_bid_prc1, 0);

        /*** Commented in VQC as variable used was incorrect ***
        sql_ftq_bst3_bid_prc1 = (double)sql_ftq_bst1_bid_prc;
        ***/

				sql_ftq_bst3_bid_prc1 = (double)sql_ftq_bst3_bid_prc; /* Correct variable used in VQC */

				i_err[9] = Fadd32(ptr_fml_Obuffer, FML_LTQ_BST3_BID_PRC,(char *)&sql_ftq_bst3_bid_prc1, 0);
   
        /*** Commented in VQC as variable used was incorrect ***
	       sql_ftq_bst4_bid_prc1 = (double)sql_ftq_bst1_bid_prc;
        ***/  
  		
      	sql_ftq_bst4_bid_prc1 = (double)sql_ftq_bst4_bid_prc; /* Correct variable used in VQC */

				i_err[10]= Fadd32(ptr_fml_Obuffer, FML_LTQ_BST4_BID_PRC,(char *)&sql_ftq_bst4_bid_prc1, 0);

        /*** Commented in VQC as variable used was incorrect ***
        sql_ftq_bst5_bid_prc1 = (double)sql_ftq_bst1_bid_prc;    
        ***/

				sql_ftq_bst5_bid_prc1 = (double)sql_ftq_bst5_bid_prc; /* Correct variable used in VQC */

				i_err[11]= Fadd32(ptr_fml_Obuffer, FML_LTQ_BST5_BID_PRC,(char *)&sql_ftq_bst5_bid_prc1, 0);

				i_err[12]= Fadd32(ptr_fml_Obuffer, FML_IDD_BST_BID_QTY, (char *)&sql_ftq_bst1_bid_qty, 0);

				i_err[13]= Fadd32(ptr_fml_Obuffer, FML_LTQ_BST2_BID_QTY,(char *)&sql_ftq_bst2_bid_qty, 0);

				i_err[14]= Fadd32(ptr_fml_Obuffer, FML_LTQ_BST3_BID_QTY,(char *)&sql_ftq_bst3_bid_qty, 0);

				i_err[15]= Fadd32(ptr_fml_Obuffer, FML_LTQ_BST4_BID_QTY,(char *)&sql_ftq_bst4_bid_qty, 0);

				i_err[16]= Fadd32(ptr_fml_Obuffer, FML_LTQ_BST5_BID_QTY,(char *)&sql_ftq_bst5_bid_qty, 0);

				i_err[17]= Fadd32(ptr_fml_Obuffer, FML_IDD_BST_OFFR_QTY, (char*)&sql_ftq_bst1_offr_qty,0);

				i_err[18]= Fadd32(ptr_fml_Obuffer, FML_LTQ_BST2_OFFR_QTY,(char*)&sql_ftq_bst2_offr_qty,0);

				i_err[19]= Fadd32(ptr_fml_Obuffer, FML_LTQ_BST3_OFFR_QTY,(char*)&sql_ftq_bst3_offr_qty,0);

				i_err[20]= Fadd32(ptr_fml_Obuffer, FML_LTQ_BST4_OFFR_QTY,(char*)&sql_ftq_bst4_offr_qty,0);

				i_err[21]= Fadd32(ptr_fml_Obuffer, FML_LTQ_BST5_OFFR_QTY,(char*)&sql_ftq_bst5_offr_qty,0);

				sql_ftq_bst1_offr_prc1 = (double)sql_ftq_bst1_offr_prc;

				i_err[22]= Fadd32(ptr_fml_Obuffer, FML_IDD_BST_OFFR_PRC, (char*)&sql_ftq_bst1_offr_prc1,0);

        /*** Commented in VQC as variable used was incorrect ***
				sql_ftq_bst2_offr_prc1 = (double)sql_ftq_bst1_offr_prc;
        ***/

        sql_ftq_bst2_offr_prc1 = (double)sql_ftq_bst2_offr_prc; /* Correct variable used in VQC */

				i_err[23]= Fadd32(ptr_fml_Obuffer, FML_LTQ_BST2_OFFR_PRC,(char*)&sql_ftq_bst2_offr_prc1,0);

        /*** Commented in VQC as variable used was incorrect ***
				sql_ftq_bst3_offr_prc1 = (double)sql_ftq_bst1_offr_prc;
        ***/
       
        sql_ftq_bst3_offr_prc1 = (double)sql_ftq_bst3_offr_prc; /* Correct variable used in VQC */

				i_err[24]= Fadd32(ptr_fml_Obuffer, FML_LTQ_BST3_OFFR_PRC,(char*)&sql_ftq_bst3_offr_prc1,0);

        /*** Commented in VQC as variable used was incorrect ***
				sql_ftq_bst4_offr_prc1 = (double)sql_ftq_bst1_offr_prc;
        ***/

        sql_ftq_bst4_offr_prc1 = (double)sql_ftq_bst4_offr_prc; /* Correct variable used in VQC */

				i_err[25]= Fadd32(ptr_fml_Obuffer, FML_LTQ_BST4_OFFR_PRC,(char*)&sql_ftq_bst4_offr_prc1,0);

        /*** Commented in VQC as variable used was incorrect ***
				sql_ftq_bst5_offr_prc1 = (double)sql_ftq_bst1_offr_prc;
        ***/

        sql_ftq_bst5_offr_prc1 = (double)sql_ftq_bst5_offr_prc; /* Correct variable used in VQC */

				i_err[26]= Fadd32(ptr_fml_Obuffer, FML_LTQ_BST5_OFFR_PRC,(char*)&sql_ftq_bst5_offr_prc1,0);

				i_err[27]= Fadd32(ptr_fml_Obuffer, FFO_MIN_LOT_QTY,(char*)&sql_ftq_min_lot_qty,0);

  			i_err[28] = Fadd32(ptr_fml_Obuffer,FFO_EXPRY_DT,(char *)sql_ftq_expry_dt.arr,0);

  			i_err[29] = Fadd32(ptr_fml_Obuffer,FFO_CTGRY_INDSTK,(char *)&sql_ftq_indstk,0);

  			i_err[30] = Fadd32(ptr_fml_Obuffer,FFO_STRK_PRC,(char *)&sql_ftq_strk_prc,0);

  			i_err[31] = Fadd32(ptr_fml_Obuffer,FFO_OPT_TYP,(char *)&sql_ftq_opt_typ,0);

  			i_err[32] = Fadd32(ptr_fml_Obuffer,FFO_CRNT_OI,(char *)&sql_ftq_crnt_oi,0);

  			i_err[33] = Fadd32(ptr_fml_Obuffer,FFO_CHNG_OI,(char *)&sql_ftq_chng_oi,0);

  			i_err[34] = Fadd32(ptr_fml_Obuffer,FFO_CLS_PRC,(char *)&sql_ftq_cls_prc,0);

  			i_err[35] = Fadd32(ptr_fml_Obuffer,FFO_EXER_TYP,(char *)&sql_ftq_exer_typ,0);

				i_err[36] = Fadd32 ( ptr_fml_Obuffer, FFO_BASE_ORD_VAL,(char *)&d_undrlyng_val, 0 );

				i_err[37] =	Fadd32 ( ptr_fml_Obuffer, FFO_TOT_QTY_TRDD,( char *)&l_tot_cntrct, 0);

				i_err[38] =	Fadd32 ( ptr_fml_Obuffer, FFO_INIT_MRGN_PRCNT,( char *)&d_delta, 0);

				i_err[39] =	Fadd32 ( ptr_fml_Obuffer, FFO_MIN_MRGN_PRCNT,( char *)&d_theta, 0);

				i_err[40] =	Fadd32 ( ptr_fml_Obuffer, FFO_SOMC_PRCNT,( char *)&d_vega, 0);

				i_err[41] =	Fadd32 ( ptr_fml_Obuffer, FFO_AVM_PRCNT,( char *)&d_gamma, 0);


        d_tot_bid_qty = (double)sql_ftq_tot_bid_qty; /* Added in VQC as incorrect value was displayed on front-end */       

        i_err[42] = Fadd32 ( ptr_fml_Obuffer, FFO_TOT_BID_QTY,( char *)&d_tot_bid_qty, 0);

        d_tot_offr_qty  = (double)sql_ftq_tot_offr_qty; /* Added in VQC as incorrect value was displayed on front-end */

        i_err[43] = Fadd32 ( ptr_fml_Obuffer, FFO_TOT_OFFR_QTY,( char *)&d_tot_offr_qty, 0);


				i_err[44] =	Fadd32 ( ptr_fml_Obuffer, FFO_CHNG_PRVS_CLS,( char *)&sql_ftq_chng_prvs_cls,0);

				i_err[45] =	Fadd32 ( ptr_fml_Obuffer, FFO_INDX_INDCTR,( char *)&sql_ftq_indctr,0);

				/*i_err[46] =	Fadd32 ( ptr_fml_Obuffer, FFO_TOTAL_PL,( char *)&d_tot_turnover,0) ; */

				i_err[46] =	Fadd32 ( ptr_fml_Obuffer, FFO_EFF_LTP,( char *)&d_tot_turnover,0); /** turnover**/

				i_err[47] =	Fadd32 ( ptr_fml_Obuffer, FFO_EFF_LMT_RT,( char *)&d_imp_vol,0);


				for( i_cnt = 0; i_cnt < 48; i_cnt++ )
      	{
               if( i_err[i_cnt] == -1 )
               {
                 fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
                 fn_errlog( c_ServiceName, "S31330",FMLMSG,c_err_msg.arr);
                 tpfree ( ( char * )ptr_Ibuf);   /* Added in VQC */
                 tpfree ( ( char * )ptr_Obuf);   /* Added in VQC */
                 return -1;
               }

      	}

		tpfree((char *)ptr_Ibuf);
  	tpfree((char *)ptr_Obuf);	

    return (0);



}


/***************************************************************************************/

void trim(char *str)
{
  int i=0;
  char *ptr;
  ptr = str;
  while ( *str != '\0' )
  {
    if (*str != ' ' && *str != '\t')
    {
      i=i+1;
      *ptr++=*str;
    }
    str++;
  }
  *ptr='\0';
  while( i != 0 )
  {
    ptr--;
    i=i-1;
  }
  str = ptr;
}

