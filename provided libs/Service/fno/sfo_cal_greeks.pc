/******************************************************************************/
/*  Program           : SFO_CAL_GREEKS	                                      */
/*                                                                            */
/*  Input             : 																											*/
/*                                                                            */
/*  Output            : 																											*/
/*                                                                            */
/*  Description       : To get contract information as input from Front end , */
/*											compute volatility, delta,gamma,vega,theta and return */ 
/*											the same to front end													        */
/*                                                                            */
/*  Log               : 1.0  22-Sep-2010   Shailesh H.								        */
/*  Log               : 1.1  07-Nov-2014   Sachin Birje 							        */
/*  Log               : 1.2  09-Oct-2014   Sachin Birje 							        */
/*  Log               : VQC	 23-Jun-2016	 Ritesh Deolekar										*/ 
/*  Log               : 1.3	 04-Jun-2020	 Navina D.                          */ 
/******************************************************************************/
/*  1.0  -  New release                                                       */
/*  1.1  -  Commented Fprint32 Statement                                      */
/*  1.1  -  View to FML Changes                                               */
/*  VQC  -  VERSION QUALITY CONTROL                                           */
/*  1.3  -  DEBUG level changes                                               */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fo_fml_def.h>
/** #include <fo_view_def.h> ** Ver 1.2 **/
#include <fo_view_def.h>     /** Ver 1.2 **/
#include <fml_rout.h>          /** Ver 1.2 **/
#include <fn_log.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
/***	#include <fn_ddr.h>					*** Commented in VQC ***/	
/***	#include <fn_session.h>			*** Commented in VQC ***/
#include <fn_read_debug_lvl.h>
#include <fn_cal_greek_lib.h>

#define CAL_PRC 'P'
#define CAL_VOL 'V'

void SFO_CAL_GREEKS(TPSVCINFO *rqst)
{

  FBFR32 *ptr_fml_Ibuffer;
  FBFR32 *ptr_fml_Obuffer;

  struct  vw_usr_prfl st_usr_prfl;
  struct vw_err_msg  st_err_msg;

  char    c_ServiceName[33];
	/***	char    c_err_msg[256];			Data type changed to varchar in VQC ***/
	int i_cnt=0;
	int i_err[8];									/***	Array Size changed from 20 to 8 in VQC	***/
	int i_ferr[8];								/***	Array Size changed from 20 to 8 in VQC  ***/
	int i_returncode = 0;					/*** Variable initialised to 0 in VQC ***/

	double d_ltp = 0.00;
	double d_imp_vol = 0.00;
	double d_ltq_stk_prc = 0.00;
	double d_strk_price = 0.00;
	double d_dividend = 0.00;
	double d_interest_rt = 0.00;
	double d_maturity = 0.00;
	double d_vol= 0.00;
	double d_price= 0.00;
	double d_delta= 0.00;
	double d_theta= 0.00;
	double d_vega= 0.00;
	double d_gamma= 0.00;

	char c_opt_typ  = '\0';			/*** Initilized to null in VQC  ***/
	char c_exer_typ = '\0';			/*** Initilized to null in VQC  ***/
	char c_opr_typ  = '\0';			/*** Initilized to null in VQC  ***/

	varchar c_err_msg[256];				/***	Data type changed to varchar in VQC ***/
	
 	strcpy(c_ServiceName,"SFO_CAL_GREEKS");

  /* Getting data from input buffer */

  ptr_fml_Ibuffer = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );

  /* Debug level is being read */
  INITDBGLVL(c_ServiceName);

	/**To be removed after testing **/
	/** Fprint32( ptr_fml_Ibuffer ); ** Ver 1.1 **/

  /* Getting from FMLS into user profile structure and do session check*/
	MEMSET(st_usr_prfl);
  /*** Commented in Ver 1.2 ********************************************
  i_returncode = Fvftos32( ptr_fml_Ibuffer, (char *) &st_usr_prfl, "vw_usr_prfl" );
  ************** Ver 1.2 Ends Here **************************************/

  /***** Ver 1.2 Starts Here ******/
  i_returncode = fn_unpack_fmltovar_dflt ( c_ServiceName,
                                      c_err_msg.arr,
                                      ptr_fml_Ibuffer,
                                      4,
                                      FFO_USR_ID,(char *)st_usr_prfl.c_user_id, "NULL",
                                      FFO_SSSN_ID,(char*)&st_usr_prfl.l_session_id, "NULL",
                                      FFO_EBA_MTCH_ACT_NO,(char*)st_usr_prfl.c_cln_mtch_accnt, "***",
                                      FFO_ROUT_CRT,(char*)st_usr_prfl.c_rout_crt, "***" );
  /***** Ver 1.2 Ends Here *******/
 
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg.arr  );
    Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
  }


  if (st_usr_prfl.l_session_id !=0)
  {
    i_returncode = fn_chk_sssn( c_ServiceName,
                                &st_usr_prfl,
                                &st_err_msg ) ;

    if ( i_returncode == -1 )
    {
      Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
    }
  }

/* Getting FMLs from Input Buffer*/
	MEMSET(i_err);
	MEMSET(i_ferr);

	if(DEBUG_MSG_LVL_4)	/*** Added in VQC ***/ /*** changed in Ver 1.3 ***/
	{
		fn_userlog(c_ServiceName,"i_ferr[0]:%d:i_ferr[1]:%d:",i_ferr[0],i_ferr[1]);
	}

	i_err[0] = Fget32(ptr_fml_Ibuffer,FFO_EFF_LTP,0,(char *)&d_ltp,0) ;
	if(i_err[0] == -1 )
	{
  	i_ferr [0] = Ferror32;
	}
  i_err[1] = Fget32(ptr_fml_Ibuffer,FFO_EFF_LMT_RT,0,(char *)&d_imp_vol,0) ;
	if(i_err[1] == -1 )
	{
  	i_ferr [1] = Ferror32;
	}

	if(DEBUG_MSG_LVL_3)	/*** Added in VQC ***/ /*** changed in Ver 1.3 ***/
	{
		fn_userlog(c_ServiceName,"i_ferr[0]:%d:i_ferr[1]:%d:",i_ferr[0],i_ferr[1]);
  }

	for(i_cnt=0;i_cnt<2;i_cnt++)
  {
    if(i_err[i_cnt] == -1 && i_ferr[i_cnt]!= FNOTPRES)
    {
      fn_userlog(c_ServiceName,"Error in Fget for i_cnt [%d]",i_cnt);
			fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg.arr  );
			Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
    }
  }

	if(DEBUG_MSG_LVL_3)	/*** Added in VQC ***/ /*** changed in Ver 1.3 ***/
	{
		fn_userlog(c_ServiceName,"i_ferr[0]:%d:i_ferr[1]:%d:",i_ferr[0],i_ferr[1]);
	}

	if((i_ferr[0] == FNOTPRES) && (i_ferr[1] == FNOTPRES))
	{
		fn_userlog(c_ServiceName,"Volatility and Last Traded Price: Minimum one input is expected");
		strcpy(c_err_msg.arr,"Volatility and Last Traded Price: Minimum one input is expected");
		Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
	}

	if(i_ferr[0] == FNOTPRES)
	 {	
			c_opr_typ = CAL_PRC;
	 }
	 else if(i_ferr[1] == FNOTPRES)
				{
						c_opr_typ = CAL_VOL;
				}
	if(DEBUG_MSG_LVL_3)	/*** Added in VQC ***/ /*** changed in Ver 1.3 ***/
	{
		fn_userlog(c_ServiceName,"Operation Type is :%c:",c_opr_typ);
	}

	MEMSET(i_err);
	MEMSET(i_ferr);
	i_cnt=0;

  i_err[0] = Fget32(ptr_fml_Ibuffer,FFO_STCK_PRICE	,0,(char *)&d_ltq_stk_prc,0) ;
  i_ferr [0] = Ferror32;
  i_err[1] = Fget32(ptr_fml_Ibuffer,FFO_STRIKE_PRC,0,(char *)&d_strk_price,0) ;
  i_ferr [1] = Ferror32;
  i_err[2] = Fget32(ptr_fml_Ibuffer,FFO_PLG_RT,0,(char *)&d_dividend,0) ;
  i_ferr [2] = Ferror32;
  i_err[3] = Fget32(ptr_fml_Ibuffer,FFO_INTRST_RT,0,(char *)&d_interest_rt,0) ;
  i_ferr [3] = Ferror32;
  i_err[4] = Fget32(ptr_fml_Ibuffer,FFO_DAY_TO_EXP,0,(char *)&d_maturity,0) ;
  i_ferr [4] = Ferror32;
  i_err[5] = Fget32(ptr_fml_Ibuffer,FFO_OPT_TYP,0,(char *)&c_opt_typ,0) ;
  i_ferr [5] = Ferror32;
  i_err[6] = Fget32(ptr_fml_Ibuffer,FFO_EXER_TYP,0,(char *)&c_exer_typ,0) ;
  i_ferr [6] = Ferror32;

  for(i_cnt=0;i_cnt<7;i_cnt++)
  {
    if(i_err[i_cnt] == -1)
    {
      fn_userlog(c_ServiceName,"Error in Fget for i_cnt [%d]",i_cnt);
			fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg.arr  );
			Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
    }
  }

 if(DEBUG_MSG_LVL_2) /*** changed in Ver 1.3 ***/ 
    {
      fn_userlog( c_ServiceName,"LTP:%lf:Implied Vol:%lf:Stock Price:%lf:Strike Price:%lf:",d_ltp,d_imp_vol,d_ltq_stk_prc,d_strk_price);
			fn_userlog( c_ServiceName,"Dividend:%lf:Interest Rate:%lf:Days To Expiry:%lf:Opt Typ:%c:Exer Typ:%c",d_dividend,d_interest_rt,d_maturity,c_opt_typ,c_exer_typ);
    }

 /* Initializing output buffer */
	ptr_fml_Obuffer = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN);
	if ( ptr_fml_Obuffer == NULL )
	{
		fn_errlog( c_ServiceName, "S31020", TPMSG, c_err_msg.arr  );
		Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
	}

	d_imp_vol = d_imp_vol / 100;
	d_interest_rt = d_interest_rt / 100;
	d_dividend = d_dividend / 100;
	
	if(c_opr_typ == CAL_PRC)
	{
		if(c_exer_typ == 'A')
		{
				if( c_opt_typ == 'C')
				{
					d_price = americancall(c_ServiceName,d_ltq_stk_prc,d_strk_price,d_maturity,d_imp_vol,d_interest_rt,d_dividend);

				}else if( c_opt_typ == 'P')
				{
					d_price = americanput(c_ServiceName,d_ltq_stk_prc,d_strk_price,d_maturity,d_imp_vol,d_interest_rt,d_dividend);
				}
		} else if(c_exer_typ == 'E')
				 {
						if( c_opt_typ == 'C')
						{
							d_price = eurpcall(c_ServiceName,d_ltq_stk_prc,d_strk_price,d_maturity,d_imp_vol,d_interest_rt);

						}else if( c_opt_typ == 'P')
						{
							d_price = eurpput(c_ServiceName,d_ltq_stk_prc,d_strk_price,d_maturity,d_imp_vol,d_interest_rt);
						}
				 }

			d_ltp = d_price ;
	}
	else if (c_opr_typ == CAL_VOL)
			 {
					if(c_exer_typ == 'A')
					{
							if( c_opt_typ == 'C')
							{
								d_vol = vol_acall(c_ServiceName,d_ltq_stk_prc,d_strk_price,d_maturity,d_interest_rt,d_dividend,d_ltp);

							}else if( c_opt_typ == 'P')
							{
								d_vol = vol_aput(c_ServiceName,d_ltq_stk_prc,d_strk_price,d_maturity,d_interest_rt,d_dividend,d_ltp);
							}
					} else if(c_exer_typ == 'E')
							 {
									if( c_opt_typ == 'C')
									{
										d_vol = vol_ecall(c_ServiceName,d_ltq_stk_prc,d_strk_price,d_maturity,d_interest_rt,d_ltp);
									}else if( c_opt_typ == 'P')
									{
										d_vol = vol_eput(c_ServiceName,d_ltq_stk_prc,d_strk_price,d_maturity,d_interest_rt,d_ltp);
									}
							 }
					d_imp_vol = d_vol;		/**Use this IV from Greeks Calculation **/
			 }

	if(DEBUG_MSG_LVL_3)	/*** Added in VQC ***/ /*** changed in Ver 1.3 ***/
	{
		fn_userlog(c_ServiceName,"After computation of Vol/Price");
	}

		if(c_exer_typ == 'A')
		{
				if( c_opt_typ == 'C')
				{
					d_delta = delta_americancall(c_ServiceName,d_ltq_stk_prc,d_strk_price, d_interest_rt,d_maturity,d_imp_vol,d_dividend);
					d_theta = americancalltheta(c_ServiceName,d_ltq_stk_prc, d_strk_price, d_interest_rt, d_maturity, d_imp_vol, d_dividend);
					d_vega = vega_amercall(c_ServiceName,d_ltq_stk_prc, d_strk_price, d_maturity, d_imp_vol, d_interest_rt, d_dividend);
					d_gamma = americancallgamma(c_ServiceName,d_ltq_stk_prc, d_strk_price, d_interest_rt, d_maturity, d_imp_vol, d_dividend);

				}else if( c_opt_typ == 'P')
				{
					d_delta = delta_americanput(c_ServiceName,d_ltq_stk_prc, d_strk_price, d_interest_rt, d_maturity, d_imp_vol, d_dividend);
					d_theta = americanputtheta(c_ServiceName,d_ltq_stk_prc, d_strk_price, d_interest_rt, d_maturity, d_imp_vol, d_dividend);
					d_vega = vega_amerput(c_ServiceName,d_ltq_stk_prc, d_strk_price, d_maturity, d_imp_vol, d_interest_rt, d_dividend);
					d_gamma = americanputgamma(c_ServiceName,d_ltq_stk_prc, d_strk_price, d_interest_rt, d_maturity, d_imp_vol, d_dividend);
				}
		} else if(c_exer_typ == 'E')
				 {
						if( c_opt_typ == 'C')
						{
							d_delta = delta_eurpcall(c_ServiceName,d_ltq_stk_prc, d_strk_price, d_maturity, d_imp_vol, d_interest_rt);
							d_theta = theta_eurpcall(c_ServiceName,d_ltq_stk_prc, d_strk_price, d_maturity, d_imp_vol, d_interest_rt);
							d_vega = vega_eurpcall(c_ServiceName,d_ltq_stk_prc, d_strk_price, d_maturity, d_imp_vol, d_interest_rt);
							d_gamma = gamma_eurpcall(c_ServiceName,d_ltq_stk_prc, d_strk_price, d_maturity, d_imp_vol, d_interest_rt);

						}else if( c_opt_typ == 'P')
						{
							d_delta = delta_eurpput(c_ServiceName,d_ltq_stk_prc, d_strk_price, d_maturity, d_imp_vol, d_interest_rt);
							d_theta = theta_eurpput(c_ServiceName,d_ltq_stk_prc, d_strk_price, d_maturity, d_imp_vol, d_interest_rt);
							d_vega = vega_eurpput(c_ServiceName,d_ltq_stk_prc, d_strk_price, d_maturity, d_imp_vol, d_interest_rt);
							d_gamma = gamma_eurpput(c_ServiceName,d_ltq_stk_prc, d_strk_price, d_maturity, d_imp_vol, d_interest_rt);
						}
				 }

	MEMSET(i_err);
	MEMSET(i_ferr);
	i_cnt=0;

	d_imp_vol = d_imp_vol * 100;

	i_err[0] = Fadd32( ptr_fml_Obuffer, FFO_EFF_LTP, (char *)&d_ltp, 0);
	i_err[1] = Fadd32( ptr_fml_Obuffer, FFO_EFF_LMT_RT, (char *)&d_imp_vol, 0);
	i_err[2] = Fadd32( ptr_fml_Obuffer, FFO_INIT_MRGN_PRCNT, (char *)&d_delta, 0);
	i_err[3] = Fadd32( ptr_fml_Obuffer, FFO_MIN_MRGN_PRCNT, (char *)&d_theta, 0);
	i_err[4] = Fadd32( ptr_fml_Obuffer, FFO_SOMC_PRCNT, (char *)&d_vega, 0);
	i_err[5] = Fadd32( ptr_fml_Obuffer, FFO_AVM_PRCNT, (char *)&d_gamma, 0);

 		for(i_cnt=0;i_cnt<6;i_cnt++)
    {
      if(i_err[i_cnt]==-1)
      {
        fn_userlog( c_ServiceName, "Error in Fadd for i_cnt=%d", i_cnt);
        fn_errlog( c_ServiceName, "S31025", FMLMSG, c_err_msg.arr  );
        Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg.arr, 0 );
				tpfree ( ( char * ) ptr_fml_Obuffer );       /*** Added in VQC ***/
        tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuffer,0L,0) ;
      }
    }

	if(DEBUG_MSG_LVL_2)	/*** Added in VQC ***/ /*** changed in Ver 1.3 ***/
	{
		fn_userlog(c_ServiceName,"delta:%lf:Gamma:%lf:Theta:%lf:Vega:%lf:Vol:%lf:",d_delta,d_gamma,d_theta,d_vega,d_imp_vol);
	}
/**To be removed after testing **/
/** Fprint32( ptr_fml_Obuffer ); ** Ver 1.1 **/

  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuffer, 0L, 0 );	
}
