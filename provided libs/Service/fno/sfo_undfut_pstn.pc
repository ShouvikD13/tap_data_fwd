/******************************************************************************/
/*	Program	    			:	SFO_UNDFUT_PSTN                                       */
/*                                                                            */
/*  Input             : FFO_OPERATION_TYP                                     */
/*                      FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_ROUT_CRT                                          */
/*                                                                            */
/*  Output            : FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_CNTRCT_TAG                                        */
/*                      FFO_UI_BUY_QTY                                        */
/*                      FFO_UI_SELL_QTY                                       */
/*                      FFO_UI_BUY_ORD_VL                                     */
/*                      FFO_UI_SELL_ORD_VL                                    */
/*                      FFO_UE_BUY_QTY                                        */
/*                      FFO_UE_SELL_QTY                                       */
/*                      FFO_UE_BUY_ORD_VL                                     */
/*                      FFO_UE_SELL_ORD_VL                                    */
/*                      FFO_UBUY_EXCTD_QTY                                    */
/*                      FFO_USELL_EXCTD_QTY                                   */
/*                      FFO_U_OPNPSTN_FLW                                     */
/*                      FFO_U_OPNPSTN_QTY                                     */
/*                      FFO_U_ORG_OPN_VAL                                     */
/*                      FFO_U_MTM_OPN_VAL                                     */
/*											FFO_U_ORDR_MRGN																				*/
/*											FFO_U_EXCTD_MRGN																			*/
/*											FFO_U_SPRD_MRGN																				*/
/*											FFO_U_SPRD_PL																					*/
/*											FFO_U_ADD_MRGN_VAL    																*/
/*											FFO_U_TRD_MRGN        																*/
/*                                                                            */
/*  Description       : This service retrieves the values of the entire       */
/*                      futures position book given different input           */
/*                      parameters based on two different operation types:    */
/*                      U - Underlying as Input	                              */
/*                      W - Without Underlying                                */
/*                                                                            */
/*  Log               : 1.0   03-Dec-2001   S. Balamurugan                    */
/*										:	1.1		19-Dec-2007		S.K.S.	-	IBM Migration						*/
/*                                                                            */
/******************************************************************************/
/*  1.0     -  New Release                                                    */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>             /*  Ver 1.1 : Added 	*/
#include <fn_session.h>         /*  Ver 1.1 : Added 	*/
#include <fn_read_debug_lvl.h>  /*  Ver 1.1 : Added   */

void SFO_UNDFUT_PSTN( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

	char c_ServiceName[33];
  char c_errmsg[256];
	char c_option_type;

  int  i_returncode;
  int  i_err[4];
  int  i_ferr[4];
  int  i_cnt;
  int  i_counter = 1;

  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_undfut_pos *ptr_st_fut_pos;
    struct vw_usr_prfl st_usr_prfl;
		sql_cursor	sys_cursor;
		char c_opr_typ;
		char c_mtch_accnt_no[11];
		char c_xchng_cd[4];
		char c_undrlyng[7];
  EXEC SQL END DECLARE SECTION;

	struct vw_err_msg st_err_msg;

	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, "SFO_UNDFUT_PSTN");
	INITDBGLVL(c_ServiceName);            /*  Ver 1.1 : Added   */

	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_usr_prfl,
                           "vw_usr_prfl" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	strcpy ( ( char * )c_mtch_accnt_no, st_usr_prfl.c_cln_mtch_accnt );

if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.1 : Debug level Change  */
	fn_userlog( c_ServiceName,"c_mtch_accnt_no        :%s:", c_mtch_accnt_no );
}

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

		i_returncode = fn_chk_sssn( c_ServiceName, 
																&st_usr_prfl,
                                &st_err_msg ) ;

    if ( i_returncode == -1 )
    {
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

	i_err[0] = Fget32( ptr_fml_Ibuf, FFO_OPERATION_TYP, 0,
                                   (char *)&c_opr_typ, 0 );
  i_ferr [0] = Ferror32;

	if ( i_err[0] == -1 )
	{
		fn_errlog( c_ServiceName, "S31010", FMLMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.1 : Debug level Change  */
	fn_userlog( c_ServiceName,"c_opr_typ   :%c:", c_opr_typ );
}

	i_err[1] = Fget32( ptr_fml_Ibuf, FFO_XCHNG_CD, 0,
                                   (char *)c_xchng_cd, 0 );
  i_ferr [1] = Ferror32;

	i_err[2] = Fget32( ptr_fml_Ibuf, FFO_UNDRLYNG, 0,
                                   (char *)c_undrlyng, 0 );
  i_ferr [2] = Ferror32;

	for ( i_cnt = 1;  i_cnt <= 2; i_cnt++ )
	{
		if ( i_err[i_cnt] == -1 && i_ferr[i_cnt] != FNOTPRES )
		{
			fn_errlog( c_ServiceName, "S31015", Fstrerror32( i_ferr[i_cnt] ), 
								 c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		else if ( i_err[i_cnt] == -1 && i_ferr[i_cnt] == FNOTPRES )
		{
				if ( c_opr_typ == WITH_UNDERLYING )
				{
						fn_errlog( c_ServiceName, "S31020", Fstrerror32( i_ferr[i_cnt] ), 
											 c_errmsg  );
      			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
		}
	}

if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.1 : Debug level Change  */
	fn_userlog( c_ServiceName,"c_xchng_cd   :%s:", c_xchng_cd );
}

	EXEC SQL ALLOCATE :sys_cursor;

	if ( c_opr_typ == WITH_UNDERLYING )
	{
if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.1 : Debug level Change  */
	fn_userlog( c_ServiceName,"c_undrlyng    :%s:", c_undrlyng );
}
		EXEC SQL	EXECUTE
				BEGIN
					OPEN	:sys_cursor	FOR
							SELECT fup_prdct_typ,
                     fup_indstk,
                     fup_undrlyng,
                     fup_cntrct_tag,
                     fup_uibuy_qty,
                     fup_uibuy_val,
                     fup_uisell_qty,
                     fup_uisell_val,
                     fup_uexbuy_qty,
                     fup_uexbuy_val,
                     fup_uexsell_qty,
                     fup_uexsell_val,
                     fup_ubuy_exctd_qty,
                     fup_usell_exctd_qty,
                     fup_uopnpstn_flw,
                     fup_uopnpstn_qty,
                     fup_uopnpstn_val,
                     fup_umtm_opn_val,
                     fup_uordr_mrgn,
                     fup_uexctd_mrgn,
                     fup_uspread_mrgn,
                     fup_uspread_pnl,
                     fup_utrd_mrgn,
										 fup_add_mrgn_val
              FROM 	 fup_fut_undrlyng_pstn
              WHERE  fup_clm_mtch_accnt = :c_mtch_accnt_no
              AND    fup_xchng_cd = :c_xchng_cd
              AND    fup_undrlyng = :c_undrlyng;
				END;
			END-EXEC;
	}
	else if ( c_opr_typ == WITHOUT_UNDERLYING )
	{
			EXEC SQL	EXECUTE
				BEGIN
					OPEN	:sys_cursor	FOR
							SELECT fup_prdct_typ,
                     fup_indstk,
                     fup_undrlyng,
                     fup_cntrct_tag,
                     fup_uibuy_qty,
                     fup_uibuy_val,
                     fup_uisell_qty,
                     fup_uisell_val,
                     fup_uexbuy_qty,
                     fup_uexbuy_val,
                     fup_uexsell_qty,
                     fup_uexsell_val,
                     fup_ubuy_exctd_qty,
                     fup_usell_exctd_qty,
                     fup_uopnpstn_flw,
                     fup_uopnpstn_qty,
                     fup_uopnpstn_val,
                     fup_umtm_opn_val,
                     fup_uordr_mrgn,
                     fup_uexctd_mrgn,
                     fup_uspread_mrgn,
                     fup_uspread_pnl,
                     fup_utrd_mrgn,
										 fup_add_mrgn_val
              FROM 	 fup_fut_undrlyng_pstn
              WHERE  fup_clm_mtch_accnt = :c_mtch_accnt_no
              AND    fup_xchng_cd = :c_xchng_cd;
				END;
			END-EXEC;
	}
	else
  {
    fn_errlog( c_ServiceName, "S31025", "Invalid Option Type", c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	if ( SQLCODE != 0 )
	{
		fn_errlog( c_ServiceName, "S31030", SQLMSG, c_errmsg  );
    EXEC SQL FREE :sys_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31035", TPMSG, c_errmsg  );
    EXEC SQL CLOSE :sys_cursor;
    EXEC SQL FREE :sys_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  ptr_st_fut_pos = ( struct vw_undfut_pos * ) tpalloc ( "VIEW32",
                                                         "vw_undfut_pos",
                                              sizeof ( struct vw_undfut_pos ) );
  if ( ptr_st_fut_pos == NULL )
  {
    fn_errlog( c_ServiceName, "S31040", TPMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  memset ( ptr_st_fut_pos, 0, sizeof ( struct vw_undfut_pos ) );

	ptr_st_fut_pos->c_oprn_typ = c_opr_typ; 
	strcpy ( ptr_st_fut_pos->c_cln_mtch_accnt, c_mtch_accnt_no );

  i_counter = 1 ;

	for ( ; ; )
	{
		EXEC SQL FETCH :sys_cursor
							INTO :ptr_st_fut_pos->c_prd_typ,
                   :ptr_st_fut_pos->c_ctgry_indstk,
                   :ptr_st_fut_pos->c_undrlyng,
                   :ptr_st_fut_pos->c_cntrct_tag,
                   :ptr_st_fut_pos->l_ibuy_qty,
                   :ptr_st_fut_pos->d_ibuy_ord_vl,
                   :ptr_st_fut_pos->l_isell_qty,
                   :ptr_st_fut_pos->d_isell_ord_vl,
                   :ptr_st_fut_pos->l_exbuy_qty,
                   :ptr_st_fut_pos->d_exbuy_ord_vl,
                   :ptr_st_fut_pos->l_exsell_qty,
                   :ptr_st_fut_pos->d_exsell_ord_vl,
                   :ptr_st_fut_pos->l_buy_exctd_qty,
                   :ptr_st_fut_pos->l_sell_exctd_qty,
                   :ptr_st_fut_pos->c_opnpstn_flw,
                   :ptr_st_fut_pos->l_opnpstn_qty,
                   :ptr_st_fut_pos->d_org_opn_val,
                   :ptr_st_fut_pos->d_mtm_opn_val,
                   :ptr_st_fut_pos->d_ordr_mrgn,
                   :ptr_st_fut_pos->d_exctd_mrgn,
                   :ptr_st_fut_pos->d_sprd_mrgn,
                   :ptr_st_fut_pos->d_sprd_pl,
                   :ptr_st_fut_pos->d_trd_mrgn,
                   :ptr_st_fut_pos->d_add_mrgn_val;

		if ( SQLCODE != 0 )
		{
			if ( SQLCODE == NO_DATA_FOUND )
			{
				break;
			}
			else
			{
				fn_errlog( c_ServiceName, "S31045", SQLMSG, c_errmsg  );
      	EXEC SQL CLOSE :sys_cursor;
      	EXEC SQL FREE :sys_cursor;
   			tpfree ( ( char * ) ptr_st_fut_pos );
      	tpfree ( ( char * ) ptr_fml_Obuf );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}

    i_returncode = Fvstof32( ptr_fml_Obuf, (char *) ptr_st_fut_pos,
                              FCONCAT, "vw_undfut_pos" );
    if ( i_returncode == -1 )
    {
      if( Ferror32 == FNOSPACE )
      {
        i_counter++;
        ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
                            i_counter * MIN_FML_BUF_LEN );

        if ( ptr_fml_Obuf == NULL )
        {
          fn_errlog( c_ServiceName, "S31050", TPMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
   				tpfree ( ( char * ) ptr_st_fut_pos );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
				
				i_returncode = Fvstof32( ptr_fml_Obuf, (char *) ptr_st_fut_pos,
                                 FCONCAT, "vw_undfut_pos" );

        if ( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31055", FMLMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
   				tpfree ( ( char * ) ptr_st_fut_pos );
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }
      else
      {
        fn_errlog( c_ServiceName, "S31060", FMLMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
   			tpfree ( ( char * ) ptr_st_fut_pos );
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
	}
	EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;
 	tpfree ( ( char * ) ptr_st_fut_pos );

  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
}
