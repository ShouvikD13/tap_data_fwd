/***********************************************************************************************/
/*	Program	    			:	SFO_OPT_PAYOFF                                                         */
/*                                                                                             */
/*  Input             : FFO_OPERATION_TYP                                                      */
/*                      FFO_USR_ID                                                             */
/*                      FFO_SSSN_ID                                                            */
/*                      FFO_EBA_MTCH_ACT_NO                                                    */
/*                      FFO_XCHNG_CD                                                           */
/*                      FFO_UNDRLYNG                                                           */
/*                      FFO_ROUT_CRT                                                           */
/*                                                                                             */ 
/*                      FFO_EXPRY_DT                                                           */
/*                      FFO_EXER_TYP                                                           */
/*                      FFO_OPT_TYP                                                            */
/*                      FFO_STRK_PRC                                                           */
/*                                                                                             */
/*                                                                                             */
/*  Output            : FFO_XCHNG_CD                                                           */
/*											FFO_EBA_MTCH_ACT_NO																		                 */
/*											FFO_PRDCT_TYP																				                   */	
/*											FFO_UNDRLYNG                                                           */
/*											FFO_EXPRY_DT                                                           */
/*											FFO_EXER_TYP                                                           */
/*											FFO_OPT_TYP                                                            */
/*											FFO_STRK_PRC                                                           */
/*											FFO_CTGRY_INDSTK                                                       */
/*											FFO_C_OPNPSTN_FLW                                                      */
/*											FFO_C_OPNPSTN_QTY                                                      */
/*											FFO_C_ORG_OPN_VAL                                                      */
/*											FFO_LST_TRD_PRC                                                        */
/*											FFO_SUB_BUF_CNT                                                        */
/*											FFO_CLS_PRC                                                            */
/*                      FFO_AMOUNT                                                             */
/*                      FFO_FUT_PRC                                                            */
/*                      FFO_LIMIT                                                              */
/*                      FFO_BAL_AMT                                                            */
/*                      FFO_U_MM_EX_MRGN                                                       */
/*                      FFO_U_MM_SP_MRGN                                                       */
/*                                                                                             */
/*  Description       : This service retrieves the payoff of the entire                        */
/*                      contract Options position book given different input                   */
/*                      parameters such as payoff today and payoff at expiry                   */
/*                                                                                             */
/*	Log								:	1.0		06-Jan-2020		Shailesh Hinge										                 */
/*                    : 1.1   10-Sep-2020   Anuj Pancholi CR-ISEC10-138335 : Snap View Changes */
/*  Log               : VQC   17-Aug-2020   Kiran Itkar                      									 */
/*                    : 1.2   09-Mar-2021   Anuj Pancholi                                      */
/*                    : 1.3   06-Jun-2023   Ravi Malla                                         */
/***********************************************************************************************/
/*  1.0     -  New Release                                                                     */
/*  VQC     -  Version Quality Control                                        								 */
/*  1.2     -  CR-ISEC10-138149 Advance Pay-off Analyser                                       */
/*  1.3     -  Spira RNA Fix                                   															   */
/***********************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>             
#include <fn_session.h>         
#include <fn_read_debug_lvl.h>  
#define CAL_PRC 'P'
#define CAL_IV 'V'
#define SNAP_VIEW 'S'
#define ADVANCE_PAYOFF_ANALYSR 'A'  /** ver 1.2 **/

struct st_cntrct_greeks{
char  c_cln_mtch_accnt[11];
char  c_xchng_cd[4];
char  c_prd_typ;
char  c_undrlyng[7];
char  c_expry_dt[23];
char  c_exrc_typ;
char  c_opt_typ;
long  l_strike_prc;
char  c_ctgry_indstk;
char	c_opnpstn_flw;
long	l_opnpstn_qty;
double d_opnpstn_val;
double d_base_prc;
double d_lst_trd_prc;
double d_underlyng_val;
double d_imp_vol;
double d_ltp;
double d_delta;
double d_theta;
double d_vega;
double d_gamma;
double d_payoff_mat_spt[20];	/***Ver 1.2 changed 10 to 20 ***/
double d_payoff_mat_today[20];/***Ver 1.2 changed 10 to 20 ***/	
double d_payoff_mat_exp[20];	/***Ver 1.2 changed 10 to 20 ***/
};
  
/** ver 1.1 Starts **/
char c_call_idf        = '\0';
double d_imp_vol_snap  = 0.00;
double d_delta_snap    = 0.00;
double d_theta_snap    = 0.00;
double d_vega_snap     = 0.00;
double d_gamma_snap    = 0.00; 
double d_iv_prcnt        = 0.00;
/** ver 1.1 ends **/

/*** ver 1.2 starts **/
long l_no_of_strks = 10;
long l_lwr_rnge = 0;
long l_upr_rnge = 0;
double d_incrmntl_vol = 0.0;
char c_lwr_uppr_rng_flg='N';
double d_undrlyn_spot_prc = 0.0; 
/** double d_voltlty_prcnt = 0.0; ***/
/** ver 1.2 ends **/

int fn_gen_spot_levels( char *c_ServiceName,
                   struct vw_err_msg *ptr_st_err_msg,
                   struct st_cntrct_greeks *ptr_cntrct_greeks
                 );

void fn_print_payoff(char* c_ServiceName, struct st_cntrct_greeks *ptr_cntrct_greeks);

int fn_get_payoff(char *c_ServiceName,
                  struct vw_err_msg *ptr_st_err_msg,
									struct vw_usr_prfl *ptr_usr_prfl,
									struct st_cntrct_greeks *ptr_cntrct_greeks);

int fn_calc_implied_volatility( char  *c_ServiceName,
                  							struct vw_err_msg *ptr_st_err_msg,
																struct vw_usr_prfl *ptr_usr_prfl,
																char c_opr_typ,
																struct st_cntrct_greeks *ptr_cntrct_greeks);

int fn_pack_data(char  *c_ServiceName,
								 struct vw_err_msg *ptr_st_err_msg,
								 /*** FBFR32 *ptr_fml_Obuf, ***/
								 FBFR32 **ptr_fml_Obuf,   /*** Ver VQC ***/ 
								 struct vw_usr_prfl *ptr_usr_prfl,
								 struct st_cntrct_greeks *ptr_cntrct_greeks);

void SFO_OPT_PAYOFF( TPSVCINFO *rqst )
{

	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Obuf;

	char c_ServiceName[33]= "\0"; /*** Ver VQC ***/
  char c_errmsg[256]= "\0";     /*** Ver VQC ***/
  char c_spn_allwd_flg= '\0';             
  int  i_returncode=0;          /*** Ver VQC ***/
  int  i_err[10]=  {0};    /** ver 1.1 size chnged from 5 to 10 **/ /*** Initialize in VQC ***/                  
  int  i_ferr[10]= {0};   /** ver 1.1 size chnged from 5 to 10 **/ /*** Initialize in VQC ***/                 
  int  i_cnt=0;
	int  i_size=0;									
	int  i_ccntr=0;
	int  i_ucntr=0;
  int i_ch_val=0;    /** ver 1.2 **/

	long li_sssn_id=0;								

EXEC SQL BEGIN DECLARE SECTION;
    struct vw_usr_prfl st_usr_prfl;
		sql_cursor	sys_cursor;
		char c_opr_typ='\0';
		char c_rqst_typ = 'N';			
		char c_mtch_accnt_no[11]="\0";
		char c_xchng_cd[4]="\0";
		char c_undrlyng[7]="\0";
		char c_prev_undr[7]="\0";
		char c_prd_typ='O';
		char c_ctgry_indstk='\0';
		char c_expry_dt[12]="\0";
		char c_exrc_typ='\0';
		char c_opnpstn_flw='\0';
    char c_src_flg ='\0';  /** ver 1.1 **/
		long l_opnpstn_qty=0;
		double d_opnpstn_val=0.0;
		/* long l_cvr_qty=0; Commented in Ver VQC */	
		long l_spot_prc =0 ;						
		/* long l_lot_size=0; Commented in Ver VQC */	
    long l_strike_prc=0;
    char c_opt_typ='\0';



	struct st_cntrct_greeks st_cntrct_greeks_data;
	struct st_cntrct_greeks st_cntrct_greeks_data_prev;
  EXEC SQL END DECLARE SECTION;

	struct vw_err_msg st_err_msg;
	struct vw_err_msg ptr_st_err_msg; /*** VQC ***/

	MEMSET(st_err_msg);
 
	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);          

	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_usr_prfl,
                           "vw_usr_prfl" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	strcpy ( ( char * )c_mtch_accnt_no, st_usr_prfl.c_cln_mtch_accnt );

if( DEBUG_MSG_LVL_5 ) {          
	fn_userlog( c_ServiceName,"c_mtch_accnt_no        :%s:", c_mtch_accnt_no );
}
	
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

 /********** ver 1.2 starts *************/

 i_err[0] = Fget32( ptr_fml_Ibuf, FFO_REQ_TYP, 0,
                                 (char *)&c_call_idf, 0 );
 i_ferr [0] = Ferror32;

 if ( (i_err[0] == -1) && (i_ferr[0] != FNOTPRES ) )
 {
   fn_errlog( c_ServiceName, "S31010", FMLMSG, c_errmsg  );
   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 }
 else if ((i_err[0] == -1) && (i_ferr[0] == FNOTPRES ))
 {
  c_call_idf = 'N'; /** Call From Normal Pay-off **/
 } 

 fn_userlog( c_ServiceName,"Call Identifier Flag is :%c:", c_call_idf ); 
  
 /********** ver 1.2 ends ***************/

	i_err[0] = Fget32( ptr_fml_Ibuf, FFO_OPERATION_TYP, 0,
                                   (char *)&c_opr_typ, 0 );
  i_ferr [0] = Ferror32;

	if ( i_err[0] == -1 )
	{
		fn_errlog( c_ServiceName, "S31015", FMLMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  
 if ( c_call_idf == 'N' )    /*** ver 1.2 call from Normal pay-off ***/
 {

	i_err[1] = Fget32( ptr_fml_Ibuf, FFO_XCHNG_CD, 0,
                                   (char *)c_xchng_cd, 0 );
  i_ferr [1] = Ferror32;

	i_err[2] = Fget32( ptr_fml_Ibuf, FFO_UNDRLYNG, 0,
                                   (char *)c_undrlyng, 0 );
  i_ferr [2] = Ferror32;
 
 }

	i_err[3] = Fget32( ptr_fml_Ibuf,FML_RQST_TYP,0,
																	(char *)&c_rqst_typ, 0 );			
	i_ferr [3] = Ferror32;
	if ( i_err[3] == -1 )	
	{

			if( DEBUG_MSG_LVL_3 ) {
			fn_userlog( c_ServiceName,"Normal User");
			fn_userlog(c_ServiceName,"Advisor's id not present");
			}
			c_rqst_typ = 'N';

	}

	i_err[4] = Fget32( ptr_fml_Ibuf, FFO_CLSR_TYP, 0,(char *)&c_spn_allwd_flg, 0 );
	i_ferr [4] = Ferror32;

   if ( i_err[4]  == FNOTPRES && c_rqst_typ == 'Y' )
   {
    fn_errlog( c_ServiceName, "S31020", FMLMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

if ( c_call_idf == 'N' )    /*** ver 1.2 ***/
{
	for ( i_cnt = 1;  i_cnt <= 2; i_cnt++ )     
	{
		if ( (i_err[i_cnt] == -1) && (i_ferr[i_cnt] != FNOTPRES ))
		{
			if( DEBUG_MSG_LVL_5 )
			{
    		fn_userlog(c_ServiceName,"i_cnt[%d]",i_cnt);
			}

			fn_errlog( c_ServiceName, "S31025", Fstrerror32( i_ferr[i_cnt] ), 
								 c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		else if ( (i_err[i_cnt] == -1) && (i_ferr[i_cnt] == FNOTPRES))
		{
			if( DEBUG_MSG_LVL_5 ) 
			{
       	fn_userlog(c_ServiceName,"i_cnt[%d]",i_cnt);
			}
				if ((( c_opr_typ == WITH_UNDERLYING ) && ( i_cnt == 2)) ||
				   (( c_opr_typ == WITH_UNDERLYING_TAG ) && ( i_cnt == 4)))
				{
						fn_errlog( c_ServiceName, "S31030", Fstrerror32( i_ferr[i_cnt] ), 
											 c_errmsg  );
      			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
		}
	}

}

if ( c_call_idf == 'N' )    /*** ver 1.2 ***/ 
{
  /** ver 1.1 Starts **/

  i_err[5] = Fget32( ptr_fml_Ibuf, FFO_OPT_TYP, 0,(char *)&c_opt_typ, 0 );
  i_ferr [5] = Ferror32;  
 
  if ( (i_err[5] == -1) && (i_ferr[5] == FNOTPRES ))
  {
   if( DEBUG_MSG_LVL_5 )
   {
     fn_userlog(c_ServiceName,"i_cnt[%d]",i_cnt);
   }
  } 
  else if ( (i_err[4] == -1) && (i_ferr[4] != FNOTPRES ))
  {
    if( DEBUG_MSG_LVL_5 )
    {
     fn_userlog(c_ServiceName,"i_cnt[%d]",i_cnt);
    }

    fn_errlog( c_ServiceName, "S31035", Fstrerror32( i_ferr[i_cnt] ), c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  else 
  {
    if ( c_opr_typ != WITH_UNDERLYING || c_mtch_accnt_no == "*" )
    {
     fn_userlog(c_ServiceName ,"match id and  underlyn is required for Snap View"); 
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );  
    }  
 
    if( DEBUG_MSG_LVL_3 ) {
    fn_userlog( c_ServiceName,"Call from Snap View page ------------ ");
    }
    
    i_err[6] = Fget32( ptr_fml_Ibuf, FFO_EXPRY_DT, 0,(char *)c_expry_dt, 0 );
    i_ferr [6] = Ferror32;
    i_err[7] = Fget32( ptr_fml_Ibuf, FFO_EXER_TYP, 0,(char *)&c_exrc_typ, 0 );
    i_ferr [7] = Ferror32; 
    i_err[8] = Fget32( ptr_fml_Ibuf, FFO_STRK_PRC, 0,(char *)&l_strike_prc, 0 );
    i_ferr [8] = Ferror32;
  
    for ( i_cnt = 6;  i_cnt <= 8; i_cnt++ )
    {
      if ( (i_err[i_cnt] == -1) && (i_ferr[i_cnt] != FNOTPRES ))
      {
        if( DEBUG_MSG_LVL_5 )
        {
          fn_userlog(c_ServiceName,"i_cnt[%d]",i_cnt);
        }

        fn_errlog( c_ServiceName, "S31040", Fstrerror32( i_ferr[i_cnt] ), c_errmsg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    rtrim(c_expry_dt);
    c_src_flg = SNAP_VIEW;

    if( DEBUG_MSG_LVL_3 )
    {
     fn_userlog(c_ServiceName,"Source is :%c:",c_src_flg); 
     fn_userlog(c_ServiceName,"Expiry Date is :%s:",c_expry_dt);
     fn_userlog(c_ServiceName,"Excise typ is :%c:",c_exrc_typ);
     fn_userlog(c_ServiceName,"Opt typ is :%c:",c_opt_typ);
     fn_userlog(c_ServiceName,"Strike Prc is :%ld:",l_strike_prc);
    }
    
  }

 }
 
 /*** ver 1.2 starts ***/ 

 if ( c_call_idf ==  ADVANCE_PAYOFF_ANALYSR )
 {

   i_err[6] = Fget32( ptr_fml_Ibuf, FFO_EXEC_QTY, 0,(char *)&l_no_of_strks, 0 );
   i_ferr [6] = Ferror32;
   
   if ( (i_err[6] == -1) && (i_ferr[6] != FNOTPRES ))
   {
     fn_errlog( c_ServiceName, "S31045", Fstrerror32( i_ferr[6] ), c_errmsg  );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );    
   }
   else if ( ( (i_err[6] == -1) && (i_ferr[6] == FNOTPRES )) || l_no_of_strks == 0 )
   {
     l_no_of_strks = 10;   /** setting the default number of strikes **/
   } 
  
   i_err[7] = Fget32( ptr_fml_Ibuf, FFO_U_SPRD_PL, 0,(char *)&d_incrmntl_vol, 0 );
   i_ferr [7] = Ferror32;

   if ( (i_err[7] == -1) && (i_ferr[7] != FNOTPRES ))
   {
     fn_errlog( c_ServiceName, "S31050", Fstrerror32( i_ferr[7] ), c_errmsg  );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
  
   fn_userlog(c_ServiceName,"d_incrmntl_vol recieved is [%lf]",d_incrmntl_vol);   
     
   i_err[8] = Fget32( ptr_fml_Ibuf, FFO_STP_LSS_TGR, 0,(char *)&l_lwr_rnge, 0 );
   i_ferr [8] = Ferror32;
   i_err[9] = Fget32( ptr_fml_Ibuf, FFO_STLMNT_PRC, 0,(char *)&l_upr_rnge, 0 );
   i_ferr [9] = Ferror32;
  
   for ( i_cnt = 8;  i_cnt <= 9; i_cnt++ )
   {
    if ( (i_err[i_cnt] == -1) && (i_ferr[i_cnt] != FNOTPRES ))
    {
      if( DEBUG_MSG_LVL_5 )
      {
        fn_userlog(c_ServiceName,"i_cnt[%d]",i_cnt);
      }

      fn_errlog( c_ServiceName, "S31055", Fstrerror32( i_ferr[i_cnt] ), c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		else if ( ((i_err[i_cnt] == -1) && (i_ferr[i_cnt] == FNOTPRES )) || l_lwr_rnge == 0 || l_upr_rnge == 0 )
		{
      c_lwr_uppr_rng_flg = 'N';  /** setting flag for range not provided **/
		}
    else 
    {
      c_lwr_uppr_rng_flg = 'Y';  /** setting flag for range provided **/ 
    }

   } 
   l_lwr_rnge = l_lwr_rnge; 
	 l_upr_rnge = l_upr_rnge;
   fn_userlog(c_ServiceName,"Nmbr of Strikes :%ld: Rnge Flg :%c:",l_no_of_strks,c_lwr_uppr_rng_flg); 
   
 }
 /*** ver 1.2 ends ***/
   
  /** ver 1.1 Ends **/

  li_sssn_id  = st_usr_prfl.l_session_id;  

 if ( c_call_idf == 'N' )    /*** ver 1.2 ***/
 { 
  if( DEBUG_MSG_LVL_0 ) {
  fn_userlog( c_ServiceName,"<%s><%s><%s><%s><%c><%c>",c_mtch_accnt_no,st_usr_prfl.c_user_id,c_xchng_cd,c_undrlyng,c_rqst_typ,c_opr_typ );
  }

  if(c_rqst_typ == 'Y')
  {
		if( DEBUG_MSG_LVL_3 )
		{
    	fn_userlog(c_ServiceName,"User is ATS customer");
		}

    li_sssn_id = 0;
  }
  else if(c_rqst_typ == 'N')
  {
		if( DEBUG_MSG_LVL_3 )
		{
    	fn_userlog(c_ServiceName,"User is not ATS customer");
		}
  }
  else
  {
		if( DEBUG_MSG_LVL_3 )
		{
    	fn_userlog(c_ServiceName,"Advisor's Flag is invalid :%c:", c_rqst_typ);
		}
    strcpy(c_errmsg, "Advisor's Flag is invalid");
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


		EXEC SQL
		SELECT  NVL(CLM_SPAN_ALLWD,'N')
		INTO    :c_spn_allwd_flg
		FROM    CLM_CLNT_MSTR
		WHERE   CLM_MTCH_ACCNT  = :st_usr_prfl.c_cln_mtch_accnt;

		if ( SQLCODE  !=  0 )
		{
			fn_errlog( c_ServiceName, "S31060",SQLMSG,c_errmsg);
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

	 if( DEBUG_MSG_LVL_3 )
	 {
   	fn_userlog(c_ServiceName,"SPAN ALLWD FLAG IS :%c:SessionId:%ld:",c_spn_allwd_flg,li_sssn_id); 
	 }

 }

	 if( li_sssn_id !=0 )		
	 {
		i_returncode = fn_chk_sssn( c_ServiceName,
																				&st_usr_prfl,
																				&st_err_msg ) ;
		if ( i_returncode == -1 )
		{
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
	  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	 }
 

  /******* tpbegin ************/
  if(tpbegin( TRAN_TIMEOUT, 0 ) == -1)
  {
    fn_errlog( c_ServiceName, "S31065", TPMSG, c_errmsg  );	/*** VQC ***/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	EXEC SQL ALLOCATE :sys_cursor;

	if( DEBUG_MSG_LVL_3 )   
	{
		fn_userlog(c_ServiceName," c_rqst_typ :%c:c_opr_typ:%c:",c_rqst_typ,c_opr_typ);
		fn_userlog(c_ServiceName," c_mtch_accnt_no:%s",c_mtch_accnt_no);
	}

 if ( c_call_idf == 'N' )   /*** ver 1.2 ***/
 {

  if( strcmp( c_mtch_accnt_no, "*" ) == 0 )
  {
    if( st_usr_prfl.c_user_id[0] == BPID )
    {
      /** insert into fdm all acounts for this bpid **/
      EXEC SQL
      INSERT INTO
      FDM_DT_MTCH
      SELECT CLM_MTCH_ACCNT FROM CLM_CLNT_MSTR
      WHERE CLM_BP_ID = :st_usr_prfl.c_user_id;
      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31070", SQLMSG, c_errmsg );
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpcommit(0);
        tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
      }
    }
		else if(c_rqst_typ == 'Y' )   
		{

			if( DEBUG_MSG_LVL_3 ) {
		  fn_userlog(c_ServiceName," Advisor user");
			}

      EXEC SQL
      INSERT INTO
      FDM_DT_MTCH
      SELECT DISTINCT ACM_MTCH_ACCNT FROM ACM_ADV_CLNT_MAP,CLM_CLNT_MSTR
      WHERE ACM_MTCH_ACCNT = CLM_MTCH_ACCNT
      AND ACM_ADVISOR_ID = :st_usr_prfl.c_user_id
      AND ACM_ACTV_FLG = 'A'
      AND DECODE(:c_xchng_cd,'NFO',NVL(CLM_SPAN_ALLWD,'N'),'BFO',NVL(CLM_BSESPAN_ALLWD,'N')) = DECODE(:c_spn_allwd_flg,'Y','Y','N');
  
			if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31075", SQLMSG, c_errmsg );
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpcommit(0);
        tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
      }	

		}
    else
    {
      EXEC SQL
      INSERT  INTO  FDM_DT_MTCH
      SELECT  UAC_CLM_MTCH_ACCNT FROM uac_usr_accnts
      WHERE   UAC_USR_ID = :st_usr_prfl.c_user_id ;
      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31080", SQLMSG, c_errmsg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpcommit(0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

		if ( c_opr_typ == WITHOUT_UNDERLYING )
    {
		
		 if(c_spn_allwd_flg== 'N')
	   {	
		 EXEC SQL  EXECUTE
        BEGIN
          OPEN  :sys_cursor FOR
              SELECT  fop_clm_mtch_accnt,	
											fop_xchng_cd,
                      fop_prdct_typ,
                      fop_indstk,
                      fop_undrlyng,
                      to_char( fop_expry_dt, 'DD-Mon-YYYY' ) fop_expry_dt,
                      fop_exer_typ,
                      fop_opt_typ,
                      fop_strk_prc,
                      fop_opnpstn_flw,
                      abs(fop_opnpstn_qty),
                      fop_opnpstn_val
             FROM     fop_fo_options_pstn,FDM_DT_MTCH						
             WHERE    fop_clm_mtch_accnt = FDM_CLM_MTCH_ACCNT 
             AND      fop_xchng_cd = :c_xchng_cd
             AND      (     fop_opnpstn_qty != 0
                        OR  fop_ibuy_qty != 0
                        OR  fop_isell_qty != 0 )
             ORDER BY fop_clm_mtch_accnt,fop_undrlyng, fop_expry_dt;		
        END;
      END-EXEC;
			}
			else
			{
    			EXEC SQL  EXECUTE
          BEGIN
            OPEN  :sys_cursor FOR
              SELECT distinct FCP_CLM_MTCH_ACCNT,     
										FCP_XCHNG_CD,
                    FCP_PRDCT_TYP,
                    FCP_INDSTK,
                    FCP_UNDRLYNG,
                    TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY') FCP_EXPRY_DT, 
                    FCP_EXER_TYP,
                    FCP_OPT_TYP,
                    FCP_STRK_PRC,
                    FCP_OPNPSTN_FLW,
                    abs(FCP_OPNPSTN_QTY),
                    FCP_MTM_OPN_VAL
          FROM     FCP_FO_SPN_CNTRCT_PSTN,FDM_DT_MTCH 
          WHERE    FCP_CLM_MTCH_ACCNT = FDM_CLM_MTCH_ACCNT 
          AND      FCP_XCHNG_CD = :c_xchng_cd
           AND      (    FCP_OPNPSTN_QTY != 0
                      OR FCP_IBUY_QTY    != 0
                      OR FCP_ISELL_QTY   != 0 )
					AND      FCP_PRDCT_TYP=:c_prd_typ
          ORDER BY FCP_CLM_MTCH_ACCNT,
                    FCP_UNDRLYNG,
                    FCP_EXPRY_DT;
        END;
      END-EXEC;
			}
	  }

  else if ( c_opr_typ == WITH_UNDERLYING)
    {
		 if(c_spn_allwd_flg== 'N')
	   {	

    		EXEC SQL  EXECUTE
        BEGIN
          OPEN  :sys_cursor FOR
              SELECT  fop_clm_mtch_accnt,
                      fop_xchng_cd,
                      fop_prdct_typ,
                      fop_indstk,
                      fop_undrlyng,
                      to_char( fop_expry_dt, 'DD-Mon-YYYY' ) fop_expry_dt,
                      fop_exer_typ,
                      fop_opt_typ,
                      fop_strk_prc,
                      fop_opnpstn_flw,
                      abs(fop_opnpstn_qty),
                      fop_opnpstn_val
             FROM     fop_fo_options_pstn,FDM_DT_MTCH
             WHERE    fop_clm_mtch_accnt = FDM_CLM_MTCH_ACCNT
             AND      fop_xchng_cd = :c_xchng_cd
             AND      (     fop_opnpstn_qty != 0
                        OR  fop_ibuy_qty != 0
                        OR  fop_isell_qty != 0 )
            AND     fop_undrlyng    =  :c_undrlyng
             ORDER BY fop_clm_mtch_accnt,fop_undrlyng, fop_expry_dt;
        END;
      END-EXEC;
			} else
				{
    			EXEC SQL  EXECUTE
          BEGIN
            OPEN  :sys_cursor FOR
              SELECT distinct FCP_CLM_MTCH_ACCNT,     
										FCP_XCHNG_CD,
                    FCP_PRDCT_TYP,
                    FCP_INDSTK,
                    FCP_UNDRLYNG,
                    TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY') FCP_EXPRY_DT, 
                    FCP_EXER_TYP,
                    FCP_OPT_TYP,
                    FCP_STRK_PRC,
                    FCP_OPNPSTN_FLW,
                    abs(FCP_OPNPSTN_QTY),
                    FCP_MTM_OPN_VAL
          FROM     FCP_FO_SPN_CNTRCT_PSTN,FDM_DT_MTCH 
          WHERE    FCP_CLM_MTCH_ACCNT = FDM_CLM_MTCH_ACCNT 
          AND      FCP_XCHNG_CD = :c_xchng_cd
           AND      (    FCP_OPNPSTN_QTY != 0
                      OR FCP_IBUY_QTY    != 0
                      OR FCP_ISELL_QTY   != 0 )
					AND      FCP_PRDCT_TYP=:c_prd_typ
					AND      FCP_UNDRLYNG =:c_undrlyng
          ORDER BY FCP_CLM_MTCH_ACCNT, FCP_UNDRLYNG,FCP_EXPRY_DT;
        END;
      END-EXEC;
				}
    }
  }
	else if( c_opr_typ == WITH_UNDERLYING)
	{

		if(c_rqst_typ == 'N' ) 
		{
			if( DEBUG_MSG_LVL_3 ) {          
			fn_userlog( c_ServiceName,"c_undrlyng    :%s:", c_undrlyng );
			fn_userlog( c_ServiceName,"c_opr_typ == WITH_UNDERLYING &&  c_rqst_typ == 'N'");
			}
		 if(c_spn_allwd_flg== 'N')
	   { 
      /** ver 1.1 starts **/
      if ( c_src_flg == SNAP_VIEW )
      {
        fn_userlog( c_ServiceName,"Inside fetch for snap view ----------------------- ");
        EXEC SQL  EXECUTE
        BEGIN
          OPEN  :sys_cursor FOR
              SELECT  fop_clm_mtch_accnt,
                      fop_xchng_cd,
                      fop_prdct_typ,
                      fop_indstk,
                      fop_undrlyng,
                      to_char( fop_expry_dt, 'DD-Mon-YYYY') fop_expry_dt,
                      fop_exer_typ,
                      fop_opt_typ,
                      fop_strk_prc,
                      fop_opnpstn_flw,
                      abs(fop_opnpstn_qty),
                      fop_opnpstn_val
             FROM     fop_fo_options_pstn
             WHERE    fop_clm_mtch_accnt = :c_mtch_accnt_no
             AND      fop_xchng_cd = :c_xchng_cd
             AND      fop_undrlyng    =  :c_undrlyng
             AND      (     fop_opnpstn_qty != 0
                        OR  fop_ibuy_qty != 0
                        OR  fop_isell_qty != 0 )
            AND      trunc(FOP_EXPRY_DT) = :c_expry_dt
            AND      FOP_EXER_TYP        = :c_exrc_typ
            AND      FOP_OPT_TYP         = :c_opt_typ
            AND      FOP_STRK_PRC        = :l_strike_prc
            ORDER BY fop_clm_mtch_accnt,fop_expry_dt;
         END;
         END-EXEC;   
       }
      /** ver 1.1 Ends **/
       else 
       {	
				EXEC SQL	EXECUTE
				BEGIN
					OPEN	:sys_cursor	FOR
              SELECT  fop_clm_mtch_accnt,		
											fop_xchng_cd,
											fop_prdct_typ,
											fop_indstk,
											fop_undrlyng,
											to_char( fop_expry_dt, 'DD-Mon-YYYY') fop_expry_dt,
											fop_exer_typ,
                      fop_opt_typ,
                      fop_strk_prc,
											fop_opnpstn_flw,
											abs(fop_opnpstn_qty),
											fop_opnpstn_val
             FROM     fop_fo_options_pstn
			   		 WHERE	  fop_clm_mtch_accnt = :c_mtch_accnt_no
             AND      fop_xchng_cd = :c_xchng_cd
             AND      fop_undrlyng    =  :c_undrlyng
             AND      ( 		fop_opnpstn_qty != 0
                        OR	fop_ibuy_qty != 0
												OR	fop_isell_qty != 0 )
             ORDER BY fop_clm_mtch_accnt,fop_expry_dt;					
			 	END;
			  END-EXEC;
       }
      
			}else
			{
        /** ver 1.1 starts **/
        if ( c_src_flg == SNAP_VIEW )
        {
          fn_userlog( c_ServiceName,"Inside fetch for snap view for span ----------------------- ");
          EXEC SQL  EXECUTE
          BEGIN
            OPEN  :sys_cursor FOR
              SELECT distinct FCP_CLM_MTCH_ACCNT,
                    FCP_XCHNG_CD,
                    FCP_PRDCT_TYP,
                    FCP_INDSTK,
                    FCP_UNDRLYNG,
                    TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY') FCP_EXPRY_DT,
                    FCP_EXER_TYP,
                    FCP_OPT_TYP,
                    FCP_STRK_PRC,
                    FCP_OPNPSTN_FLW,
                    abs(FCP_OPNPSTN_QTY),
                    FCP_MTM_OPN_VAL
          FROM     FCP_FO_SPN_CNTRCT_PSTN
          WHERE    FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
          AND      FCP_XCHNG_CD = :c_xchng_cd
           AND      (    FCP_OPNPSTN_QTY != 0
                      OR FCP_IBUY_QTY    != 0
                      OR FCP_ISELL_QTY   != 0 )
          AND      FCP_PRDCT_TYP=:c_prd_typ
          AND      FCP_UNDRLYNG =:c_undrlyng
          AND      trunc(FCP_EXPRY_DT) = :c_expry_dt
          AND      FCP_EXER_TYP        = :c_exrc_typ
          AND      FCP_OPT_TYP         = :c_opt_typ
          AND      FCP_STRK_PRC        = :l_strike_prc
          ORDER BY FCP_CLM_MTCH_ACCNT, FCP_EXPRY_DT;
          END;
          END-EXEC; 
        }
        /** ver 1.1 Ends **/
        else 
        {
    			EXEC SQL  EXECUTE
          BEGIN
            OPEN  :sys_cursor FOR
              SELECT distinct FCP_CLM_MTCH_ACCNT,     
										FCP_XCHNG_CD,
                    FCP_PRDCT_TYP,
                    FCP_INDSTK,
                    FCP_UNDRLYNG,
                    TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY') FCP_EXPRY_DT, 
                    FCP_EXER_TYP,
                    FCP_OPT_TYP,
                    FCP_STRK_PRC,
                    FCP_OPNPSTN_FLW,
                    abs(FCP_OPNPSTN_QTY),
                    FCP_MTM_OPN_VAL
          FROM     FCP_FO_SPN_CNTRCT_PSTN
          WHERE    FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
          AND      FCP_XCHNG_CD = :c_xchng_cd
           AND      (    FCP_OPNPSTN_QTY != 0
                      OR FCP_IBUY_QTY    != 0
                      OR FCP_ISELL_QTY   != 0 )
					AND      FCP_PRDCT_TYP=:c_prd_typ
					AND      FCP_UNDRLYNG =:c_undrlyng
          ORDER BY FCP_CLM_MTCH_ACCNT, FCP_EXPRY_DT;
			  	END;
			   END-EXEC;
        }
			 } 
			}
			else if(c_rqst_typ == 'Y') 
			{

					if( DEBUG_MSG_LVL_3 ) {
					fn_userlog(c_ServiceName," WITH_UNDERLYING && c_rqst_typ == 'Y' ");
					}
		 if(c_spn_allwd_flg== 'N')
	   {
      /** ver 1.1 starts **/
      if ( c_src_flg == SNAP_VIEW )
      {
        fn_userlog( c_ServiceName,"Inside fetch for snap view for ATS ---------------------- ");
        EXEC SQL  EXECUTE
        BEGIN
          OPEN  :sys_cursor FOR
              SELECT  distinct fop_clm_mtch_accnt,
                      fop_xchng_cd,
                      fop_prdct_typ,
                      fop_indstk,
                      fop_undrlyng,
                      to_char( fop_expry_dt, 'DD-Mon-YYYY' ) fop_expry_dt,
                      fop_exer_typ,
                      fop_opt_typ,
                      fop_strk_prc,
                      fop_opnpstn_flw,
                      abs(fop_opnpstn_qty),
                      fop_opnpstn_val
                      FROM     fop_fo_options_pstn,
                               acm_adv_clnt_map
             WHERE   fop_clm_mtch_accnt = acm_mtch_accnt
             AND     NVL(ACM_ACTV_FLG,'A') = 'A'
             AND     fop_clm_mtch_accnt = :c_mtch_accnt_no
             AND     fop_xchng_cd = :c_xchng_cd
             AND     fop_undrlyng    =  :c_undrlyng
             AND     (     fop_opnpstn_qty != 0
                        OR  fop_ibuy_qty != 0
                        OR  fop_isell_qty != 0 )
             AND      trunc(FOP_EXPRY_DT) = :c_expry_dt
             AND      FOP_EXER_TYP        = :c_exrc_typ
             AND      FOP_OPT_TYP         = :c_opt_typ
             AND      FOP_STRK_PRC        = :l_strike_prc
             ORDER BY fop_clm_mtch_accnt,fop_expry_dt;
        END;
       END-EXEC;  
      }
      /** ver 1.1 ends **/	
      else 
      {
			 EXEC SQL  EXECUTE
        BEGIN
          OPEN  :sys_cursor FOR
              SELECT  distinct fop_clm_mtch_accnt,            
                      fop_xchng_cd,
                      fop_prdct_typ,
                      fop_indstk,
                      fop_undrlyng,
                      to_char( fop_expry_dt, 'DD-Mon-YYYY' ) fop_expry_dt, 
                      fop_exer_typ,
                      fop_opt_typ,
                      fop_strk_prc,
                      fop_opnpstn_flw,
                      abs(fop_opnpstn_qty),
                      fop_opnpstn_val
											FROM     fop_fo_options_pstn,
															 acm_adv_clnt_map	
             WHERE   fop_clm_mtch_accnt = acm_mtch_accnt 
             AND     NVL(ACM_ACTV_FLG,'A') = 'A' 
						 AND		 fop_clm_mtch_accnt = :c_mtch_accnt_no
             AND     fop_xchng_cd = :c_xchng_cd
             AND     fop_undrlyng    =  :c_undrlyng
             AND     (     fop_opnpstn_qty != 0
                        OR  fop_ibuy_qty != 0
                        OR  fop_isell_qty != 0 )
             ORDER BY fop_clm_mtch_accnt,fop_expry_dt;            
        END;
        END-EXEC;
       }
			}else 
					{
      /** ver 1.1 starts ***/
      if ( c_src_flg == SNAP_VIEW )
      {
       fn_userlog( c_ServiceName,"Inside fetch for snap view ATS span ----------------------- ");
       EXEC SQL  EXECUTE
       BEGIN
        OPEN  :sys_cursor FOR
          SELECT    distinct FCP_CLM_MTCH_ACCNT,
                    FCP_XCHNG_CD,
                    FCP_PRDCT_TYP,
                    FCP_INDSTK,
                    FCP_UNDRLYNG,
                    to_char( FCP_EXPRY_DT, 'DD-Mon-YYYY' ) FCP_EXPRY_DT,
                    FCP_EXER_TYP,
                    FCP_OPT_TYP,
                    FCP_STRK_PRC,
                    FCP_OPNPSTN_FLW,
                    abs(FCP_OPNPSTN_QTY),
                    FCP_MTM_OPN_VAL
          FROM      FCP_FO_SPN_CNTRCT_PSTN, ACM_ADV_CLNT_MAP
          WHERE     ACM_MTCH_ACCNT = FCP_CLM_MTCH_ACCNT
          AND       NVL(ACM_ACTV_FLG,'A') = 'A'
          AND       FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
          AND       FCP_XCHNG_CD = :c_xchng_cd
          AND       FCP_UNDRLYNG    =  :c_undrlyng
          AND       (    FCP_OPNPSTN_QTY != 0
                    OR FCP_IBUY_QTY    != 0
                    OR FCP_ISELL_QTY   != 0 )
          AND      trunc(FCP_EXPRY_DT) = :c_expry_dt
          AND      FCP_EXER_TYP        = :c_exrc_typ
          AND      FCP_OPT_TYP         = :c_opt_typ
          AND      FCP_STRK_PRC        = :l_strike_prc
         ORDER BY  FCP_CLM_MTCH_ACCNT, FCP_EXPRY_DT;
        END;
        END-EXEC;  
      } 
      /** ver 1.1 ends **/
      else 
      { 
			 EXEC SQL  EXECUTE
       BEGIN
        OPEN  :sys_cursor FOR
          SELECT    distinct FCP_CLM_MTCH_ACCNT,  
										FCP_XCHNG_CD,
                    FCP_PRDCT_TYP,
                    FCP_INDSTK,
                    FCP_UNDRLYNG,
                    to_char( FCP_EXPRY_DT, 'DD-Mon-YYYY' ) FCP_EXPRY_DT, 
                    FCP_EXER_TYP,
                    FCP_OPT_TYP,
                    FCP_STRK_PRC,
                    FCP_OPNPSTN_FLW,
                    abs(FCP_OPNPSTN_QTY),
                    FCP_MTM_OPN_VAL
          FROM      FCP_FO_SPN_CNTRCT_PSTN, ACM_ADV_CLNT_MAP
          WHERE     ACM_MTCH_ACCNT = FCP_CLM_MTCH_ACCNT
          AND       NVL(ACM_ACTV_FLG,'A') = 'A'   
          AND       FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
          AND       FCP_XCHNG_CD = :c_xchng_cd
          AND       FCP_UNDRLYNG    =  :c_undrlyng
          AND       (    FCP_OPNPSTN_QTY != 0
                    OR FCP_IBUY_QTY    != 0
                    OR FCP_ISELL_QTY   != 0 )
          ORDER BY  FCP_CLM_MTCH_ACCNT, FCP_EXPRY_DT;
        END;
        END-EXEC;
      }

				}
	 }
	}
	else if ( c_opr_typ == WITHOUT_UNDERLYING) 
				{ 
			  if(c_rqst_typ == 'N')
				{

						if( DEBUG_MSG_LVL_3 ) {
						fn_userlog( c_ServiceName,"c_opr_typ == WITHOUT_UNDERLYING  && c_rqst_typ == 'N'");
						}
		 if(c_spn_allwd_flg== 'N')
	   {	
			EXEC SQL	EXECUTE
				BEGIN
					OPEN	:sys_cursor	FOR
              SELECT  fop_clm_mtch_accnt,				
											fop_xchng_cd,
                      fop_prdct_typ,
											fop_indstk,
											fop_undrlyng,
											to_char( fop_expry_dt, 'DD-Mon-YYYY' ) fop_expry_dt,
											fop_exer_typ,
                      fop_opt_typ,
                      fop_strk_prc,
											fop_opnpstn_flw,
											abs(fop_opnpstn_qty),
											fop_opnpstn_val
             FROM     fop_fo_options_pstn
			   		 WHERE	  fop_clm_mtch_accnt = :c_mtch_accnt_no
             AND      fop_xchng_cd = :c_xchng_cd
             AND      ( 		fop_opnpstn_qty != 0
                        OR	fop_ibuy_qty != 0
												OR	fop_isell_qty != 0 )
             ORDER BY fop_clm_mtch_accnt,fop_undrlyng, fop_expry_dt;
				END;
			END-EXEC;
		}
		else{
    			EXEC SQL  EXECUTE
          BEGIN
            OPEN  :sys_cursor FOR
              SELECT distinct FCP_CLM_MTCH_ACCNT,     
										FCP_XCHNG_CD,
                    FCP_PRDCT_TYP,
                    FCP_INDSTK,
                    FCP_UNDRLYNG,
                    TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY') FCP_EXPRY_DT, 
                    FCP_EXER_TYP,
                    FCP_OPT_TYP,
                    FCP_STRK_PRC,
                    FCP_OPNPSTN_FLW,
                    abs(FCP_OPNPSTN_QTY),
                    FCP_MTM_OPN_VAL
          FROM     FCP_FO_SPN_CNTRCT_PSTN
          WHERE    FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
          AND      FCP_XCHNG_CD = :c_xchng_cd
           AND      (    FCP_OPNPSTN_QTY != 0
                      OR FCP_IBUY_QTY    != 0
                      OR FCP_ISELL_QTY   != 0 )
					AND      FCP_PRDCT_TYP=:c_prd_typ
          ORDER BY FCP_CLM_MTCH_ACCNT, FCP_EXPRY_DT;
				END;
			END-EXEC;
				}
		} if(c_rqst_typ == 'Y')  
  		{

		if( DEBUG_MSG_LVL_3 ) {
		fn_userlog(c_ServiceName,"WITHOUT_UNDERLYING &&  c_rqst_typ == 'Y'");
		}

		 if(c_spn_allwd_flg== 'N')
	   {	
				EXEC SQL  EXECUTE
        BEGIN
          OPEN  :sys_cursor FOR
              SELECT  distinct fop_clm_mtch_accnt,              
                      fop_xchng_cd,
                      fop_prdct_typ,
                      fop_indstk,
                      fop_undrlyng,
                      to_char( fop_expry_dt, 'DD-Mon-YYYY' ) fop_expry_dt, 
                      fop_exer_typ,
                      fop_opt_typ,
                      fop_strk_prc,
                      fop_opnpstn_flw,
                      abs(fop_opnpstn_qty),
                      fop_opnpstn_val
             FROM     fop_fo_options_pstn,
											acm_adv_clnt_map
						 WHERE    fop_clm_mtch_accnt = acm_mtch_accnt
             AND      NVL(ACM_ACTV_FLG,'A') = 'A'                 
						 AND			fop_clm_mtch_accnt = :c_mtch_accnt_no
             AND      fop_xchng_cd = :c_xchng_cd
             AND      (     fop_opnpstn_qty != 0
                        OR  fop_ibuy_qty != 0
                        OR  fop_isell_qty != 0 )
             ORDER BY fop_clm_mtch_accnt,fop_undrlyng, fop_expry_dt;      
        END;
      END-EXEC;
			} else
					 {
			 EXEC SQL  EXECUTE
       BEGIN
        OPEN  :sys_cursor FOR
          SELECT    distinct FCP_CLM_MTCH_ACCNT, 
										FCP_XCHNG_CD, 
                    FCP_PRDCT_TYP,
                    FCP_INDSTK,
                    FCP_UNDRLYNG,
                    to_char( FCP_EXPRY_DT, 'DD-Mon-YYYY' ) FCP_EXPRY_DT, 
                    FCP_EXER_TYP,
                    FCP_OPT_TYP,
                    FCP_STRK_PRC,
                    FCP_OPNPSTN_FLW,
                    abs(FCP_OPNPSTN_QTY),
                    FCP_MTM_OPN_VAL
          FROM      FCP_FO_SPN_CNTRCT_PSTN, ACM_ADV_CLNT_MAP
          WHERE     ACM_MTCH_ACCNT = FCP_CLM_MTCH_ACCNT
          AND       NVL(ACM_ACTV_FLG,'A') = 'A'   
          AND       FCP_CLM_MTCH_ACCNT = :c_mtch_accnt_no
          AND       FCP_XCHNG_CD = :c_xchng_cd
          AND       (    FCP_OPNPSTN_QTY != 0
                    OR FCP_IBUY_QTY    != 0
                    OR FCP_ISELL_QTY   != 0 )
          ORDER BY  FCP_CLM_MTCH_ACCNT, FCP_EXPRY_DT;
        END;
      END-EXEC;

				}
			}
		}
	else
	{
    tpcommit(0);
		fn_errlog( c_ServiceName, "S31085", "Invalid Option Type", c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

 }

 if ( SQLCODE != 0 )
	{
    tpcommit(0);
    fn_errlog( c_ServiceName, "S31090", SQLMSG, c_errmsg  );
    EXEC SQL FREE :sys_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	ptr_fml_Obuf = (FBFR32 *)NULL;  /*** Ver VQC ***/
	/*** Commented in Ver VQC
	ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*10 );
  if ( ptr_fml_Obuf == NULL )
  {
    tpcommit(0);
		fn_errlog( c_ServiceName, "S31095", SQLMSG, c_errmsg  );
    EXEC SQL FREE :sys_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	} ****/

	i_ccntr=0;
	MEMSET(st_cntrct_greeks_data);
	MEMSET(st_cntrct_greeks_data_prev);

 fn_rewind_rs(ptr_fml_Ibuf); 
	for ( ; ; )
	{
	 /*MEMSET(st_cntrct_greeks_data); *** Ver 1.2 ***/
	 MEMSET(st_cntrct_greeks_data.c_expry_dt);
	/* MEMSET(st_cntrct_greeks_data.d_lst_trd_prc); **Ver 1.2 ***/
   
   /***** ver 1.2 starts ******/ 
   if ( c_call_idf == ADVANCE_PAYOFF_ANALYSR )   
   {
     i_ch_val = fn_getnxt_rs  (   ptr_fml_Ibuf,
                              c_ServiceName,
                              c_errmsg,
                              12,
                              FFO_EBA_MTCH_ACT_NO,  (char *)st_cntrct_greeks_data.c_cln_mtch_accnt, NULL,
                              FFO_XCHNG_CD,         (char *)st_cntrct_greeks_data.c_xchng_cd, NULL,
                              FFO_PRDCT_TYP,        (char *)&st_cntrct_greeks_data.c_prd_typ, NULL,
                              FFO_CTGRY_INDSTK,     (char *)&st_cntrct_greeks_data.c_ctgry_indstk, NULL,
                              FFO_UNDRLYNG,         (char *)st_cntrct_greeks_data.c_undrlyng, NULL,
                              FFO_EXPRY_DT,         (char *)st_cntrct_greeks_data.c_expry_dt, NULL,
                              FFO_EXER_TYP,         (char *)&st_cntrct_greeks_data.c_exrc_typ, NULL,
                              FFO_OPT_TYP,          (char *)&st_cntrct_greeks_data.c_opt_typ, NULL,
                              FFO_STRK_PRC,         (char *)&st_cntrct_greeks_data.l_strike_prc, NULL,
                              FFO_C_OPNPSTN_FLW,    (char *)&st_cntrct_greeks_data.c_opnpstn_flw, NULL,
                              FFO_C_OPNPSTN_QTY,    (char *)&st_cntrct_greeks_data.l_opnpstn_qty, NULL,
                              FFO_C_MTM_OPN_VAL,    (char *)&st_cntrct_greeks_data.d_opnpstn_val, NULL
                             );

			if (st_cntrct_greeks_data.c_opnpstn_flw == 'S')
			{
				st_cntrct_greeks_data.d_opnpstn_val = (st_cntrct_greeks_data.d_opnpstn_val * st_cntrct_greeks_data.l_opnpstn_qty) * -1;
			}
			else
			{
				st_cntrct_greeks_data.d_opnpstn_val = st_cntrct_greeks_data.d_opnpstn_val * st_cntrct_greeks_data.l_opnpstn_qty; 
			}
   }
   else
   {
	 	 EXEC SQL FETCH :sys_cursor
							INTO :st_cntrct_greeks_data.c_cln_mtch_accnt,               
									 :st_cntrct_greeks_data.c_xchng_cd,
                   :st_cntrct_greeks_data.c_prd_typ,
                   :st_cntrct_greeks_data.c_ctgry_indstk,
                   :st_cntrct_greeks_data.c_undrlyng,
                   :st_cntrct_greeks_data.c_expry_dt,
                   :st_cntrct_greeks_data.c_exrc_typ,
                   :st_cntrct_greeks_data.c_opt_typ,
                   :st_cntrct_greeks_data.l_strike_prc,
                   :st_cntrct_greeks_data.c_opnpstn_flw,
                   :st_cntrct_greeks_data.l_opnpstn_qty,
                   :st_cntrct_greeks_data.d_opnpstn_val;
   }
										
    if( DEBUG_MSG_LVL_3 ) {          
		fn_userlog(c_ServiceName,"Match accnt|underlyng|expiry selected:%s:%s:%s:%c:%ld:%c:%c:%c:%c:%ld:%lf:",st_cntrct_greeks_data.c_cln_mtch_accnt,st_cntrct_greeks_data.c_undrlyng,st_cntrct_greeks_data.c_expry_dt,st_cntrct_greeks_data.c_prd_typ,st_cntrct_greeks_data.l_strike_prc,st_cntrct_greeks_data.c_ctgry_indstk,st_cntrct_greeks_data.c_exrc_typ,st_cntrct_greeks_data.c_opt_typ,st_cntrct_greeks_data.c_opnpstn_flw,st_cntrct_greeks_data.l_opnpstn_qty,st_cntrct_greeks_data.d_opnpstn_val); /*** logs added in Ver 1.2 ***/
    }

		if ( SQLCODE != 0 || i_ch_val !=0 )  /** ver 1.2 **/
		{
			if ( SQLCODE == NO_DATA_FOUND  || i_ch_val == NO_DATA_FOUND ) /** ver 1.2 **/
			{
				if(i_ccntr != 0)
				{
						i_returncode= fn_pack_data(c_ServiceName, 
																				&ptr_st_err_msg,	/*** & in VQC ***/ 
																				/*** ptr_fml_Obuf, ****/
                                        &ptr_fml_Obuf,  /*** Ver VQC ***/	
																				&st_usr_prfl,
                 												&st_cntrct_greeks_data);
						if(i_returncode!=0 )
						{
							tpcommit(0);
							fn_errlog( c_ServiceName, "S31100", SQLMSG, c_errmsg  );
							EXEC SQL CLOSE :sys_cursor;
							EXEC SQL FREE :sys_cursor;
							tpfree ( ( char * ) ptr_fml_Obuf );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
						
				  MEMSET(st_cntrct_greeks_data);
				  i_ucntr++;
   			}

				break;  
			}
			else
			{
    		tpcommit(0);
				fn_errlog( c_ServiceName, "S31105", SQLMSG, c_errmsg  );
      	EXEC SQL CLOSE :sys_cursor;
      	EXEC SQL FREE :sys_cursor;
      	tpfree ( ( char * ) ptr_fml_Obuf );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}
 
    rtrim(st_cntrct_greeks_data.c_undrlyng);
    rtrim(st_cntrct_greeks_data.c_expry_dt);

    EXEC SQL
         SELECT nvl(FTQ_LST_TRD_PRC,0)
         INTO :st_cntrct_greeks_data.d_lst_trd_prc
				 FROM ftq_fo_trd_qt
				 WHERE ftq_xchng_cd = :st_cntrct_greeks_data.c_xchng_cd
				 AND  ftq_prdct_typ = decode(:st_cntrct_greeks_data.c_prd_typ,'P','F','U','F','I','O',:st_cntrct_greeks_data.c_prd_typ) /*** decode added in Ver 1.2 ***/
				 /* AND  ftq_indstk = :st_cntrct_greeks_data.c_ctgry_indstk  Commented in Ver 1.2 */
         AND  ftq_undrlyng = :st_cntrct_greeks_data.c_undrlyng
				 AND	ftq_exer_typ = :st_cntrct_greeks_data.c_exrc_typ
				 AND	ftq_opt_typ = :st_cntrct_greeks_data.c_opt_typ
				 AND	ftq_strk_prc = :st_cntrct_greeks_data.l_strike_prc
         AND  ftq_expry_dt = :st_cntrct_greeks_data.c_expry_dt;
    
		if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ))
    { 
    	tpcommit(0);
			fn_errlog( c_ServiceName, "S31110", SQLMSG, c_errmsg  );
     	EXEC SQL CLOSE :sys_cursor;
     	EXEC SQL FREE :sys_cursor;
     	tpfree ( ( char * ) ptr_fml_Obuf );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    else if ( SQLCODE == NO_DATA_FOUND && c_call_idf == 'N' )    /** ver 1.2 **/
    {
     st_cntrct_greeks_data.d_lst_trd_prc = 0;
    }
    else if ( SQLCODE == NO_DATA_FOUND && c_call_idf == ADVANCE_PAYOFF_ANALYSR )  /** Condition added in ver 1.2 **/
    {
      tpcommit(0);
      
	          /***debug start*/	
				fn_userlog(c_ServiceName,"xchng_cd: %s",st_cntrct_greeks_data.c_xchng_cd);
				fn_userlog(c_ServiceName,"Product Type: %c",st_cntrct_greeks_data.c_prd_typ);
				fn_userlog(c_ServiceName,"c_ctgry_indstk: %c",st_cntrct_greeks_data.c_ctgry_indstk);
        fn_userlog(c_ServiceName,"Underlying: %s",st_cntrct_greeks_data.c_undrlyng);
				fn_userlog(c_ServiceName,"exrc_type: %c",st_cntrct_greeks_data.c_exrc_typ);
				fn_userlog(c_ServiceName,"Option Type: %c",st_cntrct_greeks_data.c_opt_typ);
	     fn_userlog(c_ServiceName,"Strike Price: %ld",st_cntrct_greeks_data.l_strike_prc);
        fn_userlog(c_ServiceName,"Expiry Date: %s",st_cntrct_greeks_data.c_expry_dt);
      /***debug end*/		
	
			fn_userlog(c_ServiceName,"Inside Contract Not Found in FTQ"); 
      fn_errlog( c_ServiceName, "B28510", DEFMSG, c_errmsg  );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    } 

		EXEC SQL 
			SELECT NVL(ltq_rt,0) * 100
			into :d_undrlyn_spot_prc
			FROM ltq_trd_qt
			WHERE LTQ_STCK_CD = :st_cntrct_greeks_data.c_undrlyng
			AND LTQ_XCHNG_CD = DECODE(:st_cntrct_greeks_data.c_xchng_cd,'NFO','NSE','BFO','BSE');

		if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ))
    { 
    	tpcommit(0);
			fn_errlog( c_ServiceName, "S31115", SQLMSG, c_errmsg  );
     	EXEC SQL CLOSE :sys_cursor;
     	EXEC SQL FREE :sys_cursor;
     	tpfree ( ( char * ) ptr_fml_Obuf );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    else if ( SQLCODE == NO_DATA_FOUND )
    {
		 d_undrlyn_spot_prc=0;
     st_cntrct_greeks_data.d_underlyng_val = 0;
    }

    st_cntrct_greeks_data.d_underlyng_val = d_undrlyn_spot_prc;   /** ver 1.2 **/

    if( DEBUG_MSG_LVL_5 ) {          
		fn_userlog(c_ServiceName,"c_xchng_cd:%s:",st_cntrct_greeks_data.c_xchng_cd);
		fn_userlog(c_ServiceName,"c_prd_typ:%c:",st_cntrct_greeks_data.c_prd_typ);
		fn_userlog(c_ServiceName,"c_undrlyng:%s:",st_cntrct_greeks_data.c_undrlyng);
		fn_userlog(c_ServiceName,"c_exrc_typ:%c:",st_cntrct_greeks_data.c_exrc_typ);
		fn_userlog(c_ServiceName,"c_opt_typ:%c:",st_cntrct_greeks_data.c_opt_typ);
		fn_userlog(c_ServiceName,"l_strike_prc:%ld:",st_cntrct_greeks_data.l_strike_prc);
		fn_userlog(c_ServiceName,"c_expry_dt:%s:",st_cntrct_greeks_data.c_expry_dt);
		fn_userlog(c_ServiceName,"N Spot Price is  :%lf:",st_cntrct_greeks_data.d_underlyng_val);  					
		fn_userlog(c_ServiceName,"Lst trd prc is :%lf:",st_cntrct_greeks_data.d_lst_trd_prc);  		
    }
		
		if(strcmp(st_cntrct_greeks_data_prev.c_undrlyng,st_cntrct_greeks_data.c_undrlyng)!=0 && (i_ccntr!=0))
 		{ 
      /** ver 1.2 starts **/

      /*** if ( c_call_idf == ADVANCE_PAYOFF_ANALYSR )
      {
        fn_userlog(c_ServiceName,"Inside break for Multiple underlying");
        break;
      } ***/ 

      /** ver 1.2 ends **/    

			i_returncode = fn_pack_data(c_ServiceName, 
																				&ptr_st_err_msg,	/*** & in VQC ***/ 
																				/*** ptr_fml_Obuf, ***/
                                        &ptr_fml_Obuf,    /*** Ver VQC ***/	
																				&st_usr_prfl,
                 												&st_cntrct_greeks_data_prev);
						if(i_returncode!=0 )
						{
							tpcommit(0);
							fn_errlog( c_ServiceName, "S31120", SQLMSG, c_errmsg  );
							EXEC SQL CLOSE :sys_cursor;
							EXEC SQL FREE :sys_cursor;
							tpfree ( ( char * ) ptr_fml_Obuf );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
						
			 MEMSET(st_cntrct_greeks_data_prev);
			 i_ucntr++;
			 i_ccntr=0;
			 MEMSET(st_cntrct_greeks_data.d_payoff_mat_spt);
			 MEMSET(st_cntrct_greeks_data.d_payoff_mat_today);
			 MEMSET(st_cntrct_greeks_data.d_payoff_mat_exp);
 		}

		if(i_ccntr == 0 )
		{
				i_returncode= fn_gen_spot_levels( c_ServiceName,
                   &ptr_st_err_msg,	/*** & in VQC ***/
                   &st_cntrct_greeks_data);
						if(i_returncode!=0 )
						{
							tpcommit(0);
							fn_errlog( c_ServiceName, "S31125", SQLMSG, c_errmsg  );
							EXEC SQL CLOSE :sys_cursor;
							EXEC SQL FREE :sys_cursor;
							tpfree ( ( char * ) ptr_fml_Obuf );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
		}

	  i_returncode=  fn_get_payoff(c_ServiceName, &ptr_st_err_msg, &st_usr_prfl, &st_cntrct_greeks_data);	/*** &err in VQC ***/
		if(i_returncode!=0 )
		{
			tpcommit(0);
			fn_errlog( c_ServiceName, "S31130", SQLMSG, c_errmsg  );
			EXEC SQL CLOSE :sys_cursor;
			EXEC SQL FREE :sys_cursor;
			tpfree ( ( char * ) ptr_fml_Obuf );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

	 strcpy(c_prev_undr, st_cntrct_greeks_data.c_undrlyng);
	 memcpy(&st_cntrct_greeks_data_prev,&st_cntrct_greeks_data,sizeof(struct st_cntrct_greeks));

	 i_ccntr++;

   } /* For loop */

	EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

	tpcommit(0);					
  
  if( DEBUG_MSG_LVL_5 ) {          
	fn_userlog(c_ServiceName,"size of ptr_fml_Obuf:%ld:",Fsizeof32(ptr_fml_Obuf));
  }

  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
}


int fn_gen_spot_levels( char *c_ServiceName,
                   struct vw_err_msg *ptr_st_err_msg,
                   struct st_cntrct_greeks *ptr_cntrct_greeks)
{

 int i=0;
 sql_cursor  sys_cursor;

	EXEC SQL BEGIN DECLARE SECTION; 
 	/* struct st_cntrct_greeks st_cntrct_greeks_data;*/
	 char c_prd_typ='O';
	 char c_ch_call='C';
	 char c_ch_put='P';
	 long l_current_rspot = 0;
	 char c_prd_typ_F='F';
	 char c_undrlyng_nifty[7];
	 char c_undrlyng[7]="\0"; /***VQC ***/
	 char c_qt_trdng_flg_T = 'T';
	 char c_xchng_cd[4]="\0"; /*** VQC ***/
   long l_no_of_uppr_strks = 0;  /** ver 1.2 **/
   long l_no_of_lowr_strks = 0;  /** ver 1.2 **/
   long l_uppr_strk = 0;         /** ver 1.2 **/
   long l_lowr_strk = 0;         /** ver 1.2 **/
	EXEC SQL END DECLARE SECTION;

	/*memcpy(&st_cntrct_greeks_data,ptr_cntrct_greeks,sizeof(struct st_cntrct_greeks));*/

	MEMSET(c_undrlyng_nifty);
  strcpy(c_undrlyng_nifty, "NIFTY");
	rtrim(c_undrlyng_nifty);
  strcpy(c_undrlyng, ptr_cntrct_greeks->c_undrlyng);
  strcpy(c_xchng_cd, ptr_cntrct_greeks->c_xchng_cd);
	rtrim(c_undrlyng);
	rtrim(c_xchng_cd);

	if( DEBUG_MSG_LVL_5 ) {
	fn_userlog(c_ServiceName,"c_xchng_cd:%s:c_undrlyng:%s:",c_xchng_cd,c_undrlyng);
	}

EXEC SQL 
	  select distinct ftq_strk_prc
    into
    :l_current_rspot
    from
    ( select distinct ftq_strk_prc,ltq_rt*100,abs(ftq_strk_prc - (ltq_rt*100)) diff from ftq_fo_trd_qt,ltq_trd_qt
     where ftq_undrlyng=ltq_stck_cd
    and ftq_xchng_cd=:c_xchng_cd
    and ltq_xchng_cd=decode(:c_xchng_cd,'NFO','NSE','BFO','BSE')
    and ftq_strk_prc between (ltq_rt*100)-500000 and (ltq_rt*100)+500000
    and ftq_undrlyng=:c_undrlyng
    and ftq_expry_dt=(    SELECT min(FTQ_EXPRY_DT) FROM    ( SELECT DISTINCT(FTQ_EXPRY_DT) FROM   FTQ_FO_TRD_QT 
									WHERE  FTQ_XCHNG_CD =:c_xchng_cd
                 AND    FTQ_PRDCT_TYP = :c_prd_typ_F
                 /* AND    FTQ_UNDRLYNG  = :c_undrlyng_nifty	 commented in Ver 1.3 **/
                 AND    FTQ_UNDRLYNG  = :c_undrlyng	/** Ver 1.3 **/
                 AND    FTQ_QT_TRDNG_FLG= :c_qt_trdng_flg_T
                 ORDER BY FTQ_EXPRY_DT
               )
       WHERE ROWNUM < 4)
    and ftq_prdct_typ=:c_prd_typ
    /*and mod(ftq_strk_prc,10000)=0*/
    order by diff)
    where rownum < 2;
    if(( SQLCODE != 0) )
    {
      if(SQLCODE==NO_DATA_FOUND)
      {
        fn_userlog(c_ServiceName,"There is some error in getting rounded SPOT");
      }
      fn_errlog( c_ServiceName, "S31135", SQLMSG, ptr_st_err_msg->c_err_msg);
			return -1;
    }

  /*** ver 1.2 starts ***/
  if ( l_no_of_strks % 2 == 0 ) 
  {
    l_no_of_lowr_strks = l_no_of_strks / 2; 
    l_no_of_uppr_strks = l_no_of_lowr_strks;
  } 
  else
  {
    l_no_of_lowr_strks = l_no_of_strks / 2;
    l_no_of_uppr_strks = l_no_of_lowr_strks +1; 
  }
  
  if ( c_lwr_uppr_rng_flg == 'Y' )  /** Range given in input **/
  {
    l_uppr_strk = l_upr_rnge;
    l_lowr_strk = l_lwr_rnge; 
  }
  else  
  {
   l_uppr_strk = l_current_rspot;
   l_lowr_strk = l_current_rspot; 
  }
  /*** ver 1.2 ends ***/

  EXEC SQL ALLOCATE :sys_cursor;

if ( c_lwr_uppr_rng_flg == 'Y' ) /*** Ver 1.2 ***/
{
		EXEC SQL EXECUTE 
		BEGIN   
		OPEN :sys_cursor FOR
 select strk from(
 select ftq_strk_prc strk from(
 select ftq_strk_prc
        from ftq_fo_trd_qt
        where ftq_undrlyng=:c_undrlyng
        and ftq_expry_dt=(
                 SELECT min(FTQ_EXPRY_DT) FROM
                  ( SELECT DISTINCT(FTQ_EXPRY_DT) FROM   FTQ_FO_TRD_QT WHERE  FTQ_XCHNG_CD = :c_xchng_cd 
                 AND    FTQ_PRDCT_TYP = :c_prd_typ_F 
                 /* AND    FTQ_UNDRLYNG  = :c_undrlyng_nifty  commented in Ver 1.3 **/
                 AND    FTQ_UNDRLYNG  = :c_undrlyng /** Ver 1.3 **/
                 AND    FTQ_QT_TRDNG_FLG= :c_qt_trdng_flg_T
                 ORDER BY FTQ_EXPRY_DT))
        and ftq_prdct_typ= :c_prd_typ
        and ftq_strk_prc> :l_current_rspot  
        and ftq_strk_prc between :l_lowr_strk and :l_uppr_strk    
        and ftq_opt_typ= :c_ch_call
        order by ftq_strk_prc asc
                   )
   /**  where rownum < 6 ** ver 1.2 **/
        where rownum <= :l_no_of_lowr_strks  /** ver 1.2 **/
UNION
 select ftq_strk_prc strk from (
  select ftq_strk_prc
        from ftq_fo_trd_qt
        where ftq_undrlyng=:c_undrlyng
        and ftq_expry_dt=( SELECT min(FTQ_EXPRY_DT) FROM 
										     ( SELECT DISTINCT(FTQ_EXPRY_DT) FROM   FTQ_FO_TRD_QT WHERE  FTQ_XCHNG_CD = :c_xchng_cd 
                 AND    FTQ_PRDCT_TYP = :c_prd_typ_F 
                 /* AND    FTQ_UNDRLYNG  = :c_undrlyng_nifty  commented in Ver 1.3 **/
                 AND    FTQ_UNDRLYNG  = :c_undrlyng	/** Ver 1.3 **/
                 AND    FTQ_QT_TRDNG_FLG= :c_qt_trdng_flg_T 
                 ORDER BY FTQ_EXPRY_DT))
        and ftq_prdct_typ=:c_prd_typ
        and ftq_strk_prc< :l_current_rspot   
        and ftq_strk_prc between :l_lowr_strk and :l_uppr_strk
				and ftq_opt_typ= :c_ch_put
        order by ftq_strk_prc desc
      )
  /**  where rownum < 6  ** ver 1.2 **/
       where rownum <= :l_no_of_uppr_strks); /** 1.2 **/
      END;
      END-EXEC;
}
else if ( c_lwr_uppr_rng_flg == 'N' ) /*** cond Ver 1.2 ***/
{
    EXEC SQL EXECUTE
    BEGIN
    OPEN :sys_cursor FOR
 select strk from(
 select ftq_strk_prc strk from(
 select ftq_strk_prc
        from ftq_fo_trd_qt
        where ftq_undrlyng=:c_undrlyng
        and ftq_expry_dt=(
                 SELECT min(FTQ_EXPRY_DT) FROM
                  ( SELECT DISTINCT(FTQ_EXPRY_DT) FROM   FTQ_FO_TRD_QT WHERE  FTQ_XCHNG_CD = :c_xchng_cd
                 AND    FTQ_PRDCT_TYP = :c_prd_typ_F
                 /* AND    FTQ_UNDRLYNG  = :c_undrlyng_nifty  commented in Ver 1.3 **/
                 AND    FTQ_UNDRLYNG  = :c_undrlyng /** Ver 1.3 **/
                 AND    FTQ_QT_TRDNG_FLG= :c_qt_trdng_flg_T
                 ORDER BY FTQ_EXPRY_DT))
        and ftq_prdct_typ= :c_prd_typ
        and ftq_strk_prc> :l_current_rspot
        and ftq_opt_typ= :c_ch_call
        order by ftq_strk_prc asc
                   )
        where rownum <= :l_no_of_uppr_strks /*** 1.2 changed from 6 to l_no_of_uppr_strks ***/ 
UNION
select ftq_strk_prc strk from (
  select ftq_strk_prc
        from ftq_fo_trd_qt
        where ftq_undrlyng=:c_undrlyng
        and ftq_expry_dt=( SELECT min(FTQ_EXPRY_DT) FROM
                         ( SELECT DISTINCT(FTQ_EXPRY_DT) FROM   FTQ_FO_TRD_QT WHERE  FTQ_XCHNG_CD = :c_xchng_cd
                 AND    FTQ_PRDCT_TYP = :c_prd_typ_F
                 /* AND    FTQ_UNDRLYNG  = :c_undrlyng_nifty  commented in Ver 1.3 **/
                 AND    FTQ_UNDRLYNG  = :c_undrlyng /** Ver 1.3 **/
                 AND    FTQ_QT_TRDNG_FLG= :c_qt_trdng_flg_T
                 ORDER BY FTQ_EXPRY_DT))
        and ftq_prdct_typ=:c_prd_typ
        and ftq_strk_prc< :l_current_rspot
        and ftq_opt_typ= :c_ch_put
        order by ftq_strk_prc desc
      )
      where rownum <= :l_no_of_uppr_strks ); /*** 1.2 changed from 6 to l_no_of_uppr_strks ***/ 
      END;
      END-EXEC;
}
		if ( SQLCODE != 0 )
		{
			fn_errlog( c_ServiceName, "S31140", SQLMSG, ptr_st_err_msg->c_err_msg);
			EXEC SQL FREE :sys_cursor;
			return -1;
  	}

		for(i=0;i<=l_no_of_strks-1;i++) /*** changed from 9 to l_no_of_strks in Ver 1.2 ***/
		{

		 EXEC SQL FETCH :sys_cursor
	   into :ptr_cntrct_greeks->d_payoff_mat_spt[i];	

      if ( SQLCODE != 0 )
      {
        if(SQLCODE==NO_DATA_FOUND)
        {
          break;
        }
  			EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog( c_ServiceName, "S31145", SQLMSG, ptr_st_err_msg->c_err_msg);
				return -1;
      }
		 }
  
  if( DEBUG_MSG_LVL_4 ) {
		fn_print_payoff(c_ServiceName,ptr_cntrct_greeks);
	}
	EXEC SQL CLOSE :sys_cursor;
	EXEC SQL FREE :sys_cursor;
 return 0;
}

void fn_print_payoff(char* c_ServiceName,struct st_cntrct_greeks* ptr_cntrct_greeks)
{
 int i=0;
	 fn_userlog(c_ServiceName, "Print d_payoff_mat");
 for(i=0; i<=l_no_of_strks-1; i++) /*** changed from 9 to l_no_of_strks in Ver 1.2 ***/
 {
	 fn_userlog(c_ServiceName,"%d Row:%lf:%lf:%lf:",i,ptr_cntrct_greeks->d_payoff_mat_spt[i],ptr_cntrct_greeks->d_payoff_mat_today[i],
														ptr_cntrct_greeks->d_payoff_mat_exp[i]);
 }
}


int fn_get_payoff(char *c_ServiceName,
                  struct vw_err_msg *ptr_st_err_msg,
									struct vw_usr_prfl *ptr_usr_prfl,
									struct st_cntrct_greeks *ptr_cntrct_greeks)
{

int i_returncode= 0;
int i=0;
double d_intrinsic_val=0.0;

	if( DEBUG_MSG_LVL_4 ) {
		fn_userlog(c_ServiceName, "Before computing vols");
		fn_print_payoff(c_ServiceName,ptr_cntrct_greeks);
		fn_userlog(c_ServiceName, "Row Before computing vols");
	}
/**compute the IV for the input contract**/
	
 i_returncode=	fn_calc_implied_volatility( c_ServiceName, 
																				ptr_st_err_msg,
																				ptr_usr_prfl,
																				CAL_IV,
																				ptr_cntrct_greeks);
	if(i_returncode!=0)
	{
		fn_userlog(c_ServiceName,"Error computing IV");
		return -1;
	}

	if( DEBUG_MSG_LVL_4 ) {
  fn_userlog(c_ServiceName, "My LTP:%lf: Computed IV :%lf:", ptr_cntrct_greeks->d_lst_trd_prc,ptr_cntrct_greeks->d_imp_vol);
	}
 
  /** ver 1.2 starts **/
  if ( c_call_idf == ADVANCE_PAYOFF_ANALYSR )  
  {
   ptr_cntrct_greeks->d_imp_vol = ptr_cntrct_greeks->d_imp_vol + d_incrmntl_vol;
  }
  /** ver 1.2 ends **/

	ptr_cntrct_greeks->d_base_prc =  ptr_cntrct_greeks->d_opnpstn_val / ptr_cntrct_greeks->l_opnpstn_qty;

	for(i=0; i<l_no_of_strks; i++) /*** changed from 10 to l_no_of_strks in Ver 1.2 ***/
	{
			ptr_cntrct_greeks->d_underlyng_val = ptr_cntrct_greeks->d_payoff_mat_spt[i];

			 i_returncode=	fn_calc_implied_volatility( c_ServiceName, 
																							ptr_st_err_msg,
																							ptr_usr_prfl,
																							CAL_PRC,
																							ptr_cntrct_greeks);
				if(i_returncode!=0)
				{
					fn_userlog(c_ServiceName,"Error computing Price");
					return -1;
				}

		    if( DEBUG_MSG_LVL_5 ) {
				fn_userlog(c_ServiceName, "My IV:%lf: Computed PRC :%lf:", ptr_cntrct_greeks->d_imp_vol,ptr_cntrct_greeks->d_ltp);
				}

			ptr_cntrct_greeks->d_ltp = ptr_cntrct_greeks->d_ltp * 100.0;

			if(ptr_cntrct_greeks->c_opt_typ== 'C')
			{
				if(ptr_cntrct_greeks->d_underlyng_val > ptr_cntrct_greeks->l_strike_prc) 
				{
					 d_intrinsic_val = ptr_cntrct_greeks->d_underlyng_val - ptr_cntrct_greeks->l_strike_prc;
				} 
				else
				{
					 d_intrinsic_val = 0;
				}
			}else if(ptr_cntrct_greeks->c_opt_typ=='P')
			{
				if(ptr_cntrct_greeks->d_underlyng_val < ptr_cntrct_greeks->l_strike_prc) 
				{
					 d_intrinsic_val = ptr_cntrct_greeks->l_strike_prc - ptr_cntrct_greeks->d_underlyng_val;	
				} 
				else
				{
					 d_intrinsic_val = 0;
				}
			}

			/**Compute the NET PNL for current SPOT level entered **/
			if(ptr_cntrct_greeks->c_opnpstn_flw == 'B')
			{
						ptr_cntrct_greeks->d_payoff_mat_today[i] = ptr_cntrct_greeks->d_payoff_mat_today[i] + 
																										(ptr_cntrct_greeks->l_opnpstn_qty * (ptr_cntrct_greeks->d_ltp - ptr_cntrct_greeks->d_base_prc));
						if( DEBUG_MSG_LVL_5 ) {
							fn_userlog(c_ServiceName,"counter:%d:valTB:%lf:ltp:%lf:base:%lf:",i,ptr_cntrct_greeks->d_payoff_mat_today[i],ptr_cntrct_greeks->d_ltp,ptr_cntrct_greeks->d_base_prc);
							fn_userlog(c_ServiceName,"<opt_typ:%c:><l_strike_prc:%ld:><d_underlyng_val:%lf:><d_intrinsic_val:%lf:><c_opnpstn_flw:%c:><l_opnpstn_qty:%ld:>",ptr_cntrct_greeks->c_opt_typ,ptr_cntrct_greeks->l_strike_prc, ptr_cntrct_greeks->d_underlyng_val,d_intrinsic_val,ptr_cntrct_greeks->c_opnpstn_flw,ptr_cntrct_greeks->l_opnpstn_qty);

						}
			}
			else if (ptr_cntrct_greeks->c_opnpstn_flw == 'S')
							{
											ptr_cntrct_greeks->d_payoff_mat_today[i] = ptr_cntrct_greeks->d_payoff_mat_today[i] + 
																										(ptr_cntrct_greeks->l_opnpstn_qty * ((-1)*ptr_cntrct_greeks->d_base_prc - ptr_cntrct_greeks->d_ltp));
							 if( DEBUG_MSG_LVL_5 ) {
								fn_userlog(c_ServiceName,"counter:%d:valTS:%lf:ltp:%lf:base:%lf:",i,ptr_cntrct_greeks->d_payoff_mat_today[i],ptr_cntrct_greeks->d_ltp,ptr_cntrct_greeks->d_base_prc);
								fn_userlog(c_ServiceName,"<opt_typ:%c:><l_strike_prc:%ld:><d_underlyng_val:%lf:><d_intrinsic_val:%lf:><c_opnpstn_flw:%c:><l_opnpstn_qty:%ld:>",ptr_cntrct_greeks->c_opt_typ,ptr_cntrct_greeks->l_strike_prc, ptr_cntrct_greeks->d_underlyng_val,d_intrinsic_val,ptr_cntrct_greeks->c_opnpstn_flw,ptr_cntrct_greeks->l_opnpstn_qty);

								}
							}


		 if(d_intrinsic_val == 0)
		 {
				if(ptr_cntrct_greeks->c_opnpstn_flw == 'B')
				{
							ptr_cntrct_greeks->d_payoff_mat_exp[i] = ptr_cntrct_greeks->d_payoff_mat_exp[i] + ((-1)* 
																									(ptr_cntrct_greeks->l_opnpstn_qty * ptr_cntrct_greeks->d_base_prc ));
						if( DEBUG_MSG_LVL_5 ) {
							fn_userlog(c_ServiceName,"counter:%d:valEI0B:%lf:base:%lf:",i,ptr_cntrct_greeks->d_payoff_mat_exp[i],ptr_cntrct_greeks->d_base_prc);
							fn_userlog(c_ServiceName,"<opt_typ:%c:><l_strike_prc:%ld:><d_underlyng_val:%lf:><d_intrinsic_val:%lf:><c_opnpstn_flw:%c:><l_opnpstn_qty:%ld:>",ptr_cntrct_greeks->c_opt_typ,ptr_cntrct_greeks->l_strike_prc, ptr_cntrct_greeks->d_underlyng_val,d_intrinsic_val,ptr_cntrct_greeks->c_opnpstn_flw,ptr_cntrct_greeks->l_opnpstn_qty);

						}
				}
				else if (ptr_cntrct_greeks->c_opnpstn_flw == 'S')
				{
							ptr_cntrct_greeks->d_payoff_mat_exp[i] = ptr_cntrct_greeks->d_payoff_mat_exp[i] +  
																									(ptr_cntrct_greeks->l_opnpstn_qty * (-1) * ptr_cntrct_greeks->d_base_prc );
							if( DEBUG_MSG_LVL_5 ) {
								fn_userlog(c_ServiceName,"counter:%d:valEI0S:%lf:base:%lf:",i,ptr_cntrct_greeks->d_payoff_mat_exp[i],ptr_cntrct_greeks->d_base_prc);
								fn_userlog(c_ServiceName,"<opt_typ:%c:><l_strike_prc:%ld:><d_underlyng_val:%lf:><d_intrinsic_val:%lf:><c_opnpstn_flw:%c:><l_opnpstn_qty:%ld:>",ptr_cntrct_greeks->c_opt_typ,ptr_cntrct_greeks->l_strike_prc, ptr_cntrct_greeks->d_underlyng_val,d_intrinsic_val,ptr_cntrct_greeks->c_opnpstn_flw,ptr_cntrct_greeks->l_opnpstn_qty);

							}
				}

		 }else
			{
				if(ptr_cntrct_greeks->c_opnpstn_flw == 'B')
				{
	  				ptr_cntrct_greeks->d_payoff_mat_exp[i] = ptr_cntrct_greeks->d_payoff_mat_exp[i] + 
																									(ptr_cntrct_greeks->l_opnpstn_qty * (d_intrinsic_val - ptr_cntrct_greeks->d_base_prc));
						if( DEBUG_MSG_LVL_5 ) {
							fn_userlog(c_ServiceName,"counter:%d:valEIVB:%lf:intrc:%lf:base:%lf:",i,ptr_cntrct_greeks->d_payoff_mat_exp[i],d_intrinsic_val,ptr_cntrct_greeks->d_base_prc);
						fn_userlog(c_ServiceName,"<opt_typ:%c:><l_strike_prc:%ld:><d_underlyng_val:%lf:><d_intrinsic_val:%lf:><c_opnpstn_flw:%c:><l_opnpstn_qty:%ld:>",ptr_cntrct_greeks->c_opt_typ,ptr_cntrct_greeks->l_strike_prc, ptr_cntrct_greeks->d_underlyng_val,d_intrinsic_val,ptr_cntrct_greeks->c_opnpstn_flw,ptr_cntrct_greeks->l_opnpstn_qty);
						}
				}
				else if (ptr_cntrct_greeks->c_opnpstn_flw == 'S')
				{
	  				ptr_cntrct_greeks->d_payoff_mat_exp[i] = ptr_cntrct_greeks->d_payoff_mat_exp[i] + 
																									(ptr_cntrct_greeks->l_opnpstn_qty * ((-1)*ptr_cntrct_greeks->d_base_prc - d_intrinsic_val));
						if( DEBUG_MSG_LVL_5 ) {
						fn_userlog(c_ServiceName,"counter:%d:valEVIS:%lf:intrc:%lf:base:%lf:",i,ptr_cntrct_greeks->d_payoff_mat_exp[i],d_intrinsic_val,ptr_cntrct_greeks->d_base_prc);
						fn_userlog(c_ServiceName,"<opt_typ:%c:><l_strike_prc:%ld:><d_underlyng_val:%lf:><d_intrinsic_val:%lf:><c_opnpstn_flw:%c:><l_opnpstn_qty:%ld:>",ptr_cntrct_greeks->c_opt_typ,ptr_cntrct_greeks->l_strike_prc, ptr_cntrct_greeks->d_underlyng_val,d_intrinsic_val,ptr_cntrct_greeks->c_opnpstn_flw,ptr_cntrct_greeks->l_opnpstn_qty);

						}
				}
		
			}

	}

	if( DEBUG_MSG_LVL_5 ) {
		fn_print_payoff(c_ServiceName,ptr_cntrct_greeks);
  }

	return 0;
}

int fn_calc_implied_volatility( char  *c_ServiceName,
                  							struct vw_err_msg *ptr_st_err_msg,
																struct vw_usr_prfl *ptr_usr_prfl,
																char c_opr_typ,
																struct st_cntrct_greeks *ptr_cntrct_greeks)
{

	double d_days_to_exp=0.0, d_days_to_exp_temp=0.0;
	int i_date_diff=0;
	double d_ltp = 0.00;
  double d_imp_vol = 0.00;
  double d_delta= 0.00;
  double d_theta= 0.00;
  double d_vega= 0.00;
  double d_gamma= 0.00;
  double d_strk_price = 0.00;
  double d_dividend = 25.00;
  double d_interest_rt = 12.00;
  double d_undrlyng_val= 0.00;
  double d_undrlyng_val_rupee= 0.00;
	double d_lst_trd_prc_rupee=0.00;
	long l_spot_prc=0;
	long l_bufferlength = 0;
  int  i_err[10];                   
  int  i_ferr[10];                   
	int i_cnt = 0;
	int i_returncode=0;
	char c_user_id_tmp[7]="\0"; /*** VQC ***/
	long l_session_id_tmp=0;

  FBFR32 *ptr_Ibuf;
  FBFR32 *ptr_Obuf;

	strcpy(c_user_id_tmp,"system");
	l_session_id_tmp=0;

  /* Initializing input buffer */

  ptr_Ibuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*10 );

  if ( ptr_Ibuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31150", TPMSG, ptr_st_err_msg->c_err_msg  );
    return -1;
  }

/* Initializing output buffer */

  ptr_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*10 );

  if ( ptr_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31155", TPMSG, ptr_st_err_msg->c_err_msg  );
    tpfree ( ( char * )ptr_Ibuf);   /* Added in VQC */
    return -1;
  }

EXEC SQL
       SELECT NVL((to_date(:ptr_cntrct_greeks->c_expry_dt,'dd-Mon-YYYY') - to_date(sysdate,'dd-Mon-YYYY') + 1 ),1),
              NVL(to_date(:ptr_cntrct_greeks->c_expry_dt,'dd-Mon-YYYY') - to_date(sysdate,'dd-Mon-YYYY') ,0),
              NVL(to_date(:ptr_cntrct_greeks->c_expry_dt,'dd-Mon-YYYY') - to_date(sysdate,'dd-Mon-YYYY'),0)
       INTO   :d_days_to_exp ,
              :d_days_to_exp_temp ,
              :i_date_diff
       FROM   DUAL;

       if( SQLCODE != 0 )
       {
            fn_errlog( c_ServiceName, "S31160", SQLMSG, ptr_st_err_msg->c_err_msg );
    				tpfree ( ( char * )ptr_Ibuf);   
    				tpfree ( ( char * )ptr_Obuf);   
            return -1;
       }

       if(DEBUG_MSG_LVL_3){
       fn_userlog(c_ServiceName,"date_diff:%d:",i_date_diff);}

       if(i_date_diff != 0 )
       {
            d_days_to_exp = d_days_to_exp_temp;
       }

 			 d_strk_price = (double)ptr_cntrct_greeks->l_strike_prc/100;
       d_undrlyng_val_rupee= (double)l_spot_prc/100;


       if(DEBUG_MSG_LVL_3){
       fn_userlog(c_ServiceName,"c_user_id :%s:",     ptr_usr_prfl->c_user_id);
       fn_userlog(c_ServiceName,"l_session_id:%ld:", ptr_usr_prfl->l_session_id);
       fn_userlog(c_ServiceName,"d_strk_price:%lf:",  d_strk_price);
       fn_userlog(c_ServiceName,"d_dividend:%lf:",    d_dividend);
       fn_userlog(c_ServiceName,"d_interest_rt:%lf:", d_interest_rt);
       fn_userlog(c_ServiceName,"d_days_to_exp:%lf:", d_days_to_exp);
       fn_userlog(c_ServiceName,"c_opt_typ:%c:",      ptr_cntrct_greeks->c_opt_typ);
       fn_userlog(c_ServiceName,"c_exrc_typ:%c:",     ptr_cntrct_greeks->c_exrc_typ);
				}


       i_err[0] = Fadd32(ptr_Ibuf, FFO_USR_ID,        (char *)c_user_id_tmp, 0 );
       i_err[1] = Fadd32(ptr_Ibuf, FFO_SSSN_ID,       (char *)&l_session_id_tmp, 0 );

			 d_undrlyng_val_rupee = ptr_cntrct_greeks->d_underlyng_val/100;
			 d_lst_trd_prc_rupee = ptr_cntrct_greeks->d_lst_trd_prc/100;

			 if( DEBUG_MSG_LVL_5 ) {
       	fn_userlog(c_ServiceName,"lst_trd_prc1:%lf:",  d_lst_trd_prc_rupee);
       	fn_userlog(c_ServiceName,"d_undrlyng_val:%lf:",d_undrlyng_val_rupee);
			 }

		   if(c_opr_typ == CAL_PRC)
			 {
       						i_err[2] = Fadd32(ptr_Ibuf, FFO_EFF_LMT_RT,(char *)&ptr_cntrct_greeks->d_imp_vol, 0);

									/**Set the spot level as input from the payoff matrix**/

			 } else if (c_opr_typ == CAL_IV)
							{
									/**Get LTP from the Trade Quot table **/
       						 i_err[2] = Fadd32(ptr_Ibuf, FFO_EFF_LTP,       (char *)&d_lst_trd_prc_rupee, 0);
							}
	
       i_err[3] = Fadd32(ptr_Ibuf, FFO_STCK_PRICE,    (char *)&d_undrlyng_val_rupee, 0);
       i_err[4] = Fadd32(ptr_Ibuf, FFO_STRIKE_PRC,    (char *)&d_strk_price, 0);
       i_err[5] = Fadd32(ptr_Ibuf, FFO_OPT_TYP,       (char *)&ptr_cntrct_greeks->c_opt_typ, 0);
       i_err[6] = Fadd32(ptr_Ibuf, FFO_EXER_TYP,      (char *)&ptr_cntrct_greeks->c_exrc_typ, 0);
       i_err[7] = Fadd32(ptr_Ibuf, FFO_INTRST_RT,     (char *)&d_interest_rt, 0 );
       i_err[8] = Fadd32(ptr_Ibuf, FFO_PLG_RT,        (char *)&d_dividend, 0 );
       i_err[9] = Fadd32(ptr_Ibuf, FFO_DAY_TO_EXP,    (char *)&d_days_to_exp, 0 );

      for( i_cnt = 0; i_cnt < 10; i_cnt++ )
       {
               if( i_err[i_cnt] == -1 )
               {
                 fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
                 fn_errlog( c_ServiceName, "S31165",FMLMSG,ptr_st_err_msg->c_err_msg);
                 tpfree ( ( char * )ptr_Ibuf); 
                 tpfree ( ( char * )ptr_Obuf);
                 return -1;
               }

        }


        l_bufferlength = Fsizeof32(ptr_Obuf) + MIN_FML_BUF_LEN * 10;

        if(DEBUG_MSG_LVL_3){
        fn_userlog( c_ServiceName,"Calling SFO_CAL_GREEKS");}

        i_returncode=tpcall("SFO_CAL_GREEKS",(char*)ptr_Ibuf,0,(char **)&ptr_Obuf,&l_bufferlength,0);

        if( i_returncode== -1 )
        {

            fn_userlog( c_ServiceName," Call to service for fetching implied volatility failed " );
            tpfree ( ( char * )ptr_Ibuf);   /* Added in VQC */
            tpfree ( ( char * )ptr_Obuf);   /* Added in VQC */
            return -1;

        }

        i_err[0] = Fget32( ptr_Obuf, FFO_EFF_LMT_RT,0,          (char *)&d_imp_vol,0) ;
        i_err[1] = Fget32( ptr_Obuf, FFO_EFF_LTP,0,             (char *)&d_ltp, 0);
        i_err[2] = Fget32( ptr_Obuf, FFO_INIT_MRGN_PRCNT,0,     (char *)&d_delta, 0);
        i_err[3] = Fget32( ptr_Obuf, FFO_MIN_MRGN_PRCNT,0,      (char *)&d_theta, 0);
        i_err[4] = Fget32( ptr_Obuf, FFO_SOMC_PRCNT,0,          (char *)&d_vega, 0);
        i_err[5] = Fget32( ptr_Obuf, FFO_AVM_PRCNT,0,           (char *)&d_gamma, 0);

        for(i_cnt=0;i_cnt<=5;i_cnt++)
        {
            if(i_err[i_cnt]==-1)
            {
                fn_userlog( c_ServiceName, "Error in Fadd for i_cnt=%d", i_cnt);
                fn_errlog( c_ServiceName, "S31170", FMLMSG, ptr_st_err_msg->c_err_msg  );
                tpfree ( ( char * )ptr_Ibuf);  
                tpfree ( ( char * )ptr_Obuf);
                return -1;
            }
        }
			ptr_cntrct_greeks->d_imp_vol = d_imp_vol;
			ptr_cntrct_greeks->d_ltp = d_ltp;
			ptr_cntrct_greeks->d_delta= d_delta;
			ptr_cntrct_greeks->d_theta= d_theta;
			ptr_cntrct_greeks->d_vega = d_vega;
			ptr_cntrct_greeks->d_gamma = d_gamma;
  
     /** ver 1.1 starts **/
     if ( c_opr_typ == CAL_IV )
     { 
       d_imp_vol_snap = d_imp_vol;
       d_delta_snap = d_delta;
       d_theta_snap = d_theta;
       d_vega_snap = d_vega;
       d_gamma_snap = d_gamma; 
    
      /** Previous Closing IV percent **/ 
      EXEC SQL
      select round(decode(NVL(FTQ_CLS_IV,0),0,0,((:d_imp_vol-FTQ_CLS_IV)/FTQ_CLS_IV)*100),2)
      into :d_iv_prcnt
      from FTQ_FO_TRD_QT
      where FTQ_XCHNG_CD         ='NFO'
      and 	FTQ_PRDCT_TYP        ='O'
      and   FTQ_UNDRLYNG         = :ptr_cntrct_greeks->c_undrlyng
      and   FTQ_OPT_TYP          = :ptr_cntrct_greeks->c_opt_typ
      and   trunc(FTQ_EXPRY_DT)  = :ptr_cntrct_greeks->c_expry_dt
      and   FTQ_STRK_PRC         = :ptr_cntrct_greeks->l_strike_prc
      and   FTQ_EXER_TYP         = :ptr_cntrct_greeks->c_exrc_typ;
    
			fn_userlog(c_ServiceName,"ptr_cntrct_greeks->c_undrlyng=:%s: ptr_cntrct_greeks->c_opt_typ=:%c: ptr_cntrct_greeks->c_expry_dt=:%s: ptr_cntrct_greeks->l_strike_prc=:%ld: ptr_cntrct_greeks->c_exrc_typ=:%c:",ptr_cntrct_greeks->c_undrlyng,ptr_cntrct_greeks->c_opt_typ,ptr_cntrct_greeks->c_expry_dt,ptr_cntrct_greeks->l_strike_prc,ptr_cntrct_greeks->c_exrc_typ); 

      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31175", SQLMSG, ptr_st_err_msg->c_err_msg );
        tpfree ( ( char * )ptr_Ibuf);
        tpfree ( ( char * )ptr_Obuf);
        return -1;
      }
  
     }
     /** ver 1.1 ends **/
			
			if( DEBUG_MSG_LVL_3 ) {
			fn_userlog(c_ServiceName,"Greeks:delta:%lf:Gamma:%lf:Theta:%lf:Vega:%lf:Vols:%lf:prc:%lf",d_delta,d_gamma,d_theta,d_vega,d_imp_vol,d_ltp);
			}

			tpfree ( ( char * )ptr_Ibuf);   
			tpfree ( ( char * )ptr_Obuf);  

	return 0;

}

int fn_pack_data(char  *c_ServiceName,
								 struct vw_err_msg *ptr_st_err_msg,
								 /*** FBFR32 *ptr_fml_Obuf, ***/
                 FBFR32 **ptr_fml_Obuf,     /*** Ver VQC ***/ 
								 struct vw_usr_prfl *ptr_usr_prfl,
								 struct st_cntrct_greeks *ptr_cntrct_greeks)
								 
{

int i_returncode =0;
int i=0;
char c_identifier='D';
double d_dummy_spt=0.0;
double d_dummy_today=0.0;
double d_dummy_expry=0.0;
double d_payoff_mat_today_tc=0.0;
double d_payoff_mat_exp_tc=0.0;
double d_zero=0.0;

/**Pass one Dummy Header **/	
			i_returncode = fn_pack_vartofml ( c_ServiceName,
																				ptr_st_err_msg->c_err_msg,
																				/**** &ptr_fml_Obuf, ***/
                                        ptr_fml_Obuf,   /*** Ver VQC ***/	
																				7,
																			FFO_EBA_MTCH_ACT_NO,(char*)ptr_usr_prfl->c_cln_mtch_accnt,	
																			FFO_XCHNG_CD, (char *)ptr_cntrct_greeks->c_xchng_cd,
																			FFO_UNDRLYNG,(char *)ptr_cntrct_greeks->c_undrlyng,
																			FFO_SO_AMT_BLKD, (char *)&d_dummy_spt,
                                      FFO_OPNPSTN_VAL, (char *)&d_dummy_today,
                                      FFO_C_ORDR_MRGN, (char *)&d_dummy_expry,
                                      FFO_CTGRY_INDSTK, (char *)&c_identifier
																			);	 	

			 if ( i_returncode == -1 )
			 {
          fn_errlog( c_ServiceName, "S31180", LIBMSG, ptr_st_err_msg->c_err_msg); 	/*** VQC ***/
					return -1;
		 	 }

		c_identifier='A';

		for(i=0;i<l_no_of_strks;i++) /*** changed from 10 to l_no_of_strks in Ver 1.2 ***/
		{

			if( ptr_cntrct_greeks->d_payoff_mat_spt[i] != d_zero)
			{

				d_payoff_mat_today_tc = (int)(ptr_cntrct_greeks->d_payoff_mat_today[i]);
				d_payoff_mat_exp_tc = (int)(ptr_cntrct_greeks->d_payoff_mat_exp[i]);

				int i_returncode=0;
				i_returncode = fn_pack_vartofml ( c_ServiceName,
																					ptr_st_err_msg->c_err_msg,
																					/*** &ptr_fml_Obuf, ***/
                                          ptr_fml_Obuf,     /*** Ver VQC ***/	
																					7,
																				FFO_EBA_MTCH_ACT_NO,(char*)ptr_usr_prfl->c_cln_mtch_accnt,	
																				FFO_XCHNG_CD, (char *)ptr_cntrct_greeks->c_xchng_cd,
																				FFO_UNDRLYNG,(char *)ptr_cntrct_greeks->c_undrlyng,
																				FFO_SO_AMT_BLKD, (char *)&ptr_cntrct_greeks->d_payoff_mat_spt[i],
																				FFO_OPNPSTN_VAL, (char *)&d_payoff_mat_today_tc,
																				FFO_C_ORDR_MRGN, (char *)&d_payoff_mat_exp_tc,
																				FFO_CTGRY_INDSTK, (char *)&c_identifier
																				);	 	

				 if ( i_returncode == -1 )
				 {
						fn_errlog( c_ServiceName, "S31185", LIBMSG, ptr_st_err_msg->c_err_msg);	/*** VQC ***/
					return -1;
		 	 	 }
			}
		}
  
     
    /***** ver 1.2 starts ****
    if ( c_call_idf == ADVANCE_PAYOFF_ANALYSR )
    {

     EXEC SQL
     select (T1.put_iv + T2.call_iv)/2
     INTO :d_voltlty_prcnt
     from (select NVL(sum(FTQ_CLS_IV),0) put_iv from FTQ_FO_TRD_QT where FTQ_UNDRLYNG=:ptr_cntrct_greeks->c_undrlyng  and FTQ_OPT_TYP='P') T1 , ( select NVL(sum(FTQ_CLS_IV),0) call_iv from FTQ_FO_TRD_QT where FTQ_UNDRLYNG=:ptr_cntrct_greeks->c_undrlyng and FTQ_OPT_TYP='C' ) T2; 

     if ( SQLCODE  !=  0 )
     {
       fn_errlog( c_ServiceName, "S31190",SQLMSG, ptr_st_err_msg->c_err_msg);
       return -1;
     } 
    
    
    }  
    ***** ver 1.2 ends ****/   
  
    /** ver 1.1 starts **/
    i_returncode = fn_pack_vartofml ( c_ServiceName,
                                      ptr_st_err_msg->c_err_msg,
                                     	/*** &ptr_fml_Obuf, ***/
                                      ptr_fml_Obuf,     /*** Ver VQC ***/ 
                                      6,
                                      FFO_AMOUNT,(char*)&d_imp_vol_snap,
                                      FFO_FUT_PRC,(char*)&d_iv_prcnt,
                                      FFO_LIMIT,(char*)&d_delta_snap,
                                      FFO_BAL_AMT,(char*)&d_gamma_snap,
                                      FFO_U_MM_EX_MRGN,(char*)&d_vega_snap,
                                      FFO_U_MM_SP_MRGN,(char*)&d_theta_snap
                                      /** FFO_BASE_ORD_VAL,(char*)&d_undrlyn_spot_prc, ** ver 1.2 **/
                                      /** FFO_ORD_AMT_BLKD,(char*)&d_voltlty_prcnt     ** ver 1.2 **/
                                    );
 
    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31195", FMLMSG, ptr_st_err_msg->c_err_msg);
      return -1;
     } 
    /** ver 1.1 Ends **/
	
		if( DEBUG_MSG_LVL_5 ) {
		fn_print_payoff(c_ServiceName,ptr_cntrct_greeks);
		}

		return 0;

}
