/******************************************************************************/
/*  Program           : SFO_FUT_PRTFL                                         */
/*                                                                            */
/*  Input             : Required                                              */
/*                      FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */

/*                      FFO_FROM_DT                                           */
/*                      FFO_TO_DT                                             */
/*                      FFO_ORD_ROUT                                          */
/*                                                                            */
/*                      Optional                                              */
/*                                                                            */
/*                                                                            */
/*  Output            : FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_OPNPSTN_QTY                                       */
/*                      FFO_OPNPSTN_VAL                                       */
/*                                                                            */
/*  Description       : This service retrieves the open position qty and rate */
/*                      for each contract. In addition it calculates the      */
/*                      Realized and Unrealized Profit & Loss for each of     */
/*                      these contracts.                                      */
/*                                                                            */
/*  Log               : 1.0   07-Feb-2002   Vinod Banjan                      */
/*  									: 1.1   28-Dec-2006   Abhishek Agrawal									*/
/*                    : 1.2   09-Apr-2007   Vikash Kumar                      */
/*                    : 1.3   14-Dec-2007   Vidyayini Krish                   */
/*										: 1.4   17-Mar-2009		Sandeep Patil											*/
/*										: 1.5   19-May-2010		Venture M     										*/	
/*										: 1.6   02-Feb-2011		Sangeet       										*/	
/*										: 1.7		24-Feb-2011		Shamili Dalvi.										*/
/*										: 1.8		18-Apr-2011		Shamili Dalvi.										*/
/*										: 1.9		07-Mar-2012 	Mahesh Shinde.										*/
/*										:	2.0		23-Apr-2012		Mahesh Shinde.										*/
/*										:	2.1		23-Jul-2012		Shamili Dalvi.										*/
/*                    : 2.2   19-May-2013   Vishnu Nair.                      */
/*                    : 2.3   18-Feb-2013   Mahesh Shinde.                    */
/*										: 2.4		11-Jun-2013	  Vishnu Nair												*/
/*                    : 2.5   05-Jun-2013   Bhushan Sonwane                   */
/*                    : 2.6   08-Aug-2013   Mahesh Shinde                     */
/*                    : 2.8   27-Jun-2014   Mahesh Shinde                     */
/*                    : 2.9   29-May-2015   Navina D.                         */
/*                    : 3.1   27-Jul-2016   Navina D.                         */
/*                    : VQC   23-Mar-2017   Anand Dhopte                      */ 
/*                    : 3.2   20-Feb-2017   Swapnil More & Mrinal Kishore     */
/*                    : 3.3   27-Jun-2017   Sandip Tambe                      */
/*                    : 3.4   31-Oct-2017   Anand Dhopte                      */
/*                    : 3.5   01-Dec-2017   Anand Dhopte                      */
/*                    : 3.6   06-Dec-2019   Tanmay Patel                      */
/*                    : 3.8   23-Mar-2021   Anuj Pancholi                     */
/*										:	3.9		04-Aug-2021		Shlok Ghan 												*/
/*										: 4.0		11-Jan-2022		Ravindra Panda										*/
/******************************************************************************/
/* 1.0    -   New Release                                                     */
/* 1.1	  -   DL optimization																									*/
/* 1.2    -   DLrevamp  Option type and Strike Price added as '*' and 0 resp  */
/* 1.3    -   IBM changes                                                     */
/* 1.4		-		Portfolio Merger																								*/
/* 1.5    -   CRSCM43225 ( Average price added to display )                   */
/* 1.6    -   FDM_DT_MTCH replaced with FDM_DT_MTCH_PRTFL for gtt lock issue  */
/* 1.7		-	  FDM_DT_MTCH_PRTFL and transaction are removed.								  */ 	
/* 1.8		-   Bug fixing in  Avg price display																*/
/* 1.9		-		SPAN Portfolio Changes																					*/
/* 2.0		-		Portfolio Bug fix. (Order By clause changed)										*/	 
/* 2.1		-		Portfolio Bug fix. (Average Trade Price computation changed)		*/	 
/* 2.2    -   Changes for SLTP FUTUREPLUS                                     */
/* 2.3    -   Changes for SPAN FUTUREPLUS                                     */
/* 2.4 		-		Bug Fix																													*/
/* 2.5    -   CR-ISEC04-39734_FNO_EXPIRY                                      */
/* 2.6    -   Optimization Selection crieteria taken from allready calculated */
/*            Realized Unrealized PNL                                         */	
/* 2.8    -   CR_ISEC10_42750_open_position_display.                          */
/* 2.9    -   Changes for contracts which are reintroduced	for trading 			*/
/*            after adhoc expiry 																						  */
/* 3.1    -   Debug level changes                                       			*/
/* VQC    -   Version Quality Control Changes                                 */ 
/* 3.2    -   DB hits reduction                                               */
/* 3.3    -   GST Changes                                                     */
/* 3.4    -   Changes for reducing hard parsing of sql queries                */
/* 3.5    -   Logs introduced to debug spike in service response time         */  
/* 3.6    -   Sensibull Integration                                           */
/* 3.7    -   CR-ISEC14-142332_Sensibull_Enhancements                         */ 
/* 3.8    -   Vendor Validation Changes                                       */
/* 3.9		-		Removal of Sensibull Link																				*/
/* 4.0		-		Handling added fro NO RECORDS case												      */
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fn_log.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_read_debug_lvl.h>
#include <fn_val_ord.h>         /** Ver 3.6 **/

int fn_buy_opnpsn(char *c_ServiceName,
									 char *c_cln_mtch_accnt,
									 char *c_xchng_cd,
									 char *c_undrlyng,
									 char *c_expry_dt,
									 char c_exrc_typ,
									 char c_prdct_typ ,
									 char c_cprdct_typ);  /* fn_buy_opnpstn to fn_buy_opnpsn in Ver TOL */

int fn_sell_opnpsn(char *c_ServiceName,
                    char *c_cln_mtch_accnt,
                    char *c_xchng_cd,
                    char *c_undrlyng,
                    char *c_expry_dt,
                    char c_exrc_typ,
                    char c_prdct_typ ,
                    char c_cprdct_typ); /* fn_sell_opnpstn to fn_sell_opnpsn n Ver TOL */

int fn_sqroff_pstn (char *c_ServiceName,
										char *c_cln_mtch_accnt,
									  char *c_xchng_cd,
                    char *c_undrlyng, 
									  char *c_expry_dt,
										char c_exrc_typ,
										char c_prdct_typ ,
		                char c_cprdct_typ);         
      
  /*** Commented in VQC as function is not used 

int fn_opnpstn (char *c_ServiceName,
							  char *c_cln_mtch_accnt,
                char *c_xchng_cd,
                char *c_undrlyng,
                char *c_expry_dt,
                char c_exrc_typ,
								char c_trd_flw,
                char c_prdct_typ ,
                char c_cprdct_typ);

   ******************/

/** Ver 2.4 Starts **/
int fn_sltpbuy_opnpstn(char *c_ServiceName,
                   char *c_cln_mtch_accnt,
                   char *c_xchng_cd,
                   char *c_undrlyng,
                   char *c_expry_dt,
                   char c_exrc_typ);

int fn_sltpsell_opnpstn(char *c_ServiceName,
                   char *c_cln_mtch_accnt,
                   char *c_xchng_cd,
                   char *c_undrlyng,
                   char *c_expry_dt,
                   char c_exrc_typ);
/*** Ver 2.4 Ends ***/


/*** Global declaration commented and declared in main function in VQC

	struct vw_cntfut_pos st_cntfut_pos; 
	struct vw_contract st_cntrct_q;   

********************************************/

struct vw_cntrct_qt st_cntrct_qt;

/*** Global declaration commented and declared in main function in VQC

 struct vw_contract st_cntrct;    
 struct vw_usr_prfl st_usr_prfl; 

********************************************/

/*** Global declaration commented and declared in main function in VQC	

sql_cursor cont_cursor;   
sql_cursor brkg_cursor;      

********************************************/

sql_cursor trd_cursor;

char c_ServiceName[33];
varchar c_errmsg[256];    /*** Changed datatype from char to varchar in VQC ***/
char c_cln_mtch_accnt [ 11 ];
char c_xchng_cd [ 4 ];
/*** char c_user_id[ 15 ];				** 1.7 ** *** Global declaration commented and declared in main function in VQC ***/

/*** char c_prd_typ ;      *** Commented in VQC as variable is not used  ***/

char c_prdct_typ = '\0';    /*** Variable initialized in VQC ***/
char c_cprdct_typ = '\0';   /*** Variable initialized in VQC ***/

/*** char c_ctgry_indstk ; ***  Commented in VQC as variable is not used  ***/

char c_undrlyng [ 7 ];
char c_expry_dt [ LEN_DATE ];
char c_exrc_typ = '\0';    /*** Variable initialized in VQC ***/

/*** char c_trd_flw; Commented in VQC as variable is not used ***/ 

int l_rec_hstry_exists = 0 ;  /*** Variable initialized in VQC and data type changed from long int to int ***/
int l_rec_main_exists  = 0 ;  /*** Variable initialized in VQC and data type changed from long int to int ***/
long int l_tot_sell_qty_m = 0;
double d_sell_val_m = 0.0 ;       /*** Variable initialized from 0 to 0.0 in VQC ***/
long int l_tot_sell_qty_h = 0;
double d_sell_val_h = 0.0 ;       /*** Variable initialized from 0 to 0.0 in VQC ***/ 
long int l_tot_sell_qty = 0;
double d_sell_val = 0.0 ;        /*** Variable initialized from 0 to 0.0 in VQC ***/ 

/*** Commented in VQC as variable is not used

 double d_fpsell_val = 0 ;  
 double d_Csell_val = 0.0 ; 
 double d_fpopn_sell_val = 0.0 ; 

********************************************/


double d_opn_sell_val =  0.0 ;        /*** Variable initialized from 0 to 0.0 in VQC ***/ 
/*** long l_fdm_count = 0;   Commented in VQC as variable is not used ***/
long l_tot_brkg = 0 ;

/*** VQC global variable declaration commented and it is declared in main function

long l_fp_opnpstn_qty = 0 ;
long l_f_opnpstn_qty = 0;

***********************************************/

long int l_tot_buy_qty_m = 0 ;
double d_buy_val_m = 0.0 ;        /*** Variable initialized from 0 to 0.0 in VQC ***/ 
long int l_tot_buy_qty_h = 0;
double d_buy_val_h = 0.0 ;        /*** Variable initialized from 0 to 0.0 in VQC ***/
long int l_tot_buy_qty = 0 ;
double d_buy_val = 0.0 ;        	/*** Variable initialized from 0 to 0.0 in VQC ***/ 
/*** double d_Cbuy_val =  0.0 ;    Commented in VQC as variable use is commented ***/   
double d_opn_buy_val = 0.0 ;      /*** Variable initialized from 0 to 0.0 in VQC ***/ 

double d_cls_val_m = 0.0 ;        /*** Variable initialized from 0 to 0.0 in VQC ***/ 
double d_cls_val_h = 0.0 ;        /*** Variable initialized from 0 to 0.0 in VQC ***/ 
double d_cls_val = 0.0 ;        	/*** Variable initialized from 0 to 0.0 in VQC ***/ 
/*** long int li_rec_cnt = 0; Commenetd in VQC as variable use is commented ***/
long int li_bal_qty = 0 ;
long int li_crst_qty = 0 ;
/*** long int li_fpcrst_qty = 0 ;  Commented in VQC as variable is not used ***/
long int li_uncrst_qty = 0 ;
/*** long int li_fpuncrst_qty = 0 ;
long int li_funcrst_qty = 0 ;     Commented in VQC as variables use is commented ***/
double d_crst_prft = 0.0 ;        /*** Variable initialized from 0 to 0.0 in VQC ***/ 
/*** double d_fcrst_prft = 0 ;
double d_fpcrst_prft = 0 ;
double d_Ccrst_prft = 0 ;
double d_Cuncrst_prft = 0 ; *** Commented in VQC as variable use is commented ***/
double d_uncrst_prft = 0.0 ;        /*** Variable initialized from 0 to 0.0 in VQC ***/ 
/*** double d_funcrst_prft = 0;
double d_fpuncrst_prft = 0 ;  *** Commented in VQC as variable use is commented ***/

long int li_exctd_qty = 0 ;
long int li_exctd_rt = 0 ;

/***	Commented in VQC 

 long int li_fexctd_rt = 0 ; 
 long int li_fpexctd_rt = 0 ; 

************************************/

double d_frsh_brk = 0.0 ;       /*** Variable initialized from 0 to 0.0 in VQC ***/ 
double d_cvr_brk = 0.0 ;        /*** Variable initialized from 0 to 0.0 in VQC ***/ 
varchar c_trd_dt [ LEN_DATE ];

long int l_avg_trd_prc=0;      /* Ver 1.5 */
/*** double	 d_base_prc=0.0;         * Ver 1.8 * *** Commenetd in VQC as variable use is commented ***/ 

double d_avg_pr = 0.0; /* Ver 2.1 */  /*** Variable initialized from 0 to 0.0 in VQC ***/

/***	Commented in VQC

double d_fpnet_avg_rt = 0; * Ver 2.1 *  
long int li_fpnet_qty_bal = 0; * Ver 2.1 *
double d_fnet_avg_rt = 0; * Ver 2.1 *
long int li_fnet_qty_bal = 0; * Ver 2.1 * 

***************************************************/

long int li_net_qty_bal = 0; /* Ver 2.1 */
double  d_net_avg_rt = 0.0; /* Ver 2.1 */         /*** Variable initialized from 0 to 0.0 in VQC ***/
double d_opn_sltp_val = 0.0; /** Ver 2.4 **/      /*** Variable initialized from 0 to 0.0 in VQC ***/

/*** Ver 2.9 ***/
long int l_tot_buy_qty_fco_m = 0 ;
long int l_tot_buy_qty_fco_h = 0 ;
double d_buy_val_fco_h = 0.0 ;        /*** Variable initialized from 0 to 0.0 in VQC ***/ 
double d_buy_val_fco_m = 0.0 ;        /*** Variable initialized from 0 to 0.0 in VQC ***/ 
long int l_tot_sell_qty_fco_m = 0 ;
long int l_tot_sell_qty_fco_h = 0 ;
double d_sell_val_fco_h = 0.0 ;        /*** Variable initialized from 0 to 0.0 in VQC ***/ 
double d_sell_val_fco_m = 0.0 ;        /*** Variable initialized from 0 to 0.0 in VQC ***/ 
/*** Ver 2.9 ***/

void SFO_FUT_PRTFL( TPSVCINFO *rqst )
{
  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  EXEC SQL INCLUDE "table/icd_info_client_dtls.h"; /*** Ver 3.6 ***/

/*  char c_ServiceName[33];
  char c_errmsg[256];	Commented in Ver 1.4 */
  int  i_ch_val;

  char c_tmp_mtch_accnt[11] ;               /*** Ver 2.3 ***/
	char c_tmp_xchng_cd[4] ;								 /*** Ver 1.9 ***/
	char c_tmp_undrlyng[7] ;								 /*** Ver 1.9 ***/
	char c_tmp_expry_dt[LEN_DATE];				 /*** Ver 1.9 ***/
	char c_spn_allwd_flg = '\0';  				 /* 2.2 */
	char c_bsespn_allwd_flg = '\0'; 			 /* 2.2 */
	char c_req_flg = '\0';                 /** Ver 4.0 **/

	long l_sltp_opnpstn_qty = 0; 					 /* Ver 2.2 */
	long l_spn_opnpstn_qty = 0;						 /*** Ver 1.9	***/
	
  char c_exp_date[LEN_DATE];            /*** Ver 3.2 ***/
  char c_min_ftq_exp_dt[LEN_DATE];      /*** Ver 3.2 ***/

  /*** Added in Ver 3.4 ***/
  
  char c_nfo_xchng_cd[4] = "NFO";
  char c_fut_prd_typ = 'F';
  char c_futpls_prd_typ = 'P';
  char c_sltpfp_prd_typ = 'U';
  long l_zero_val = 0; 
 
  /*** Ver 3.4 ends ***/ 
	
	/***	Commented In VQC 

	int i_ip_len;
	int i_op_len;  

	***********************/

	/* Ver 1.3 */
	unsigned long int i_str_len; /* int i_str_len; */
	unsigned long int i_trim; /* int i_trim; */
	/* Ver 1.3 Ends */

	int rec_cnt = 1;        /*********** Ver 1.1 initialized in ver 2.6 **************/
	int ret_val = 0;        /*********** Ver 1.1 initialized in ver 2.6 **************/
	int i_returncode ;	/* Ver 1.4 */
	/* int i_clnts = 1;        *********** Ver 1.1/1.3 **************/

	/*** long int i_clnts = 1; * Ver 1.3 *  *** Commented in VQC as variable use is commented ***/

  EXEC SQL BEGIN DECLARE SECTION;
/*  struct vw_contract st_cntrct;
    struct vw_usr_prfl st_usr_prfl; Commented In Ver 1.4 */

  	varchar c_frm_dt[ LEN_DATE + 1];
  	varchar c_to_dt[ LEN_DATE + 1];
 

    sql_cursor cont_cursor; /* VQC Global declaration commented, cursors declared locally as they are used in main fun only */ 
    sql_cursor brkg_cursor; /* VQC Global declaration commented, cursors declared locally as they are used in main fun only */


/*  sql_cursor cont_cursor;
		sql_cursor brkg_cursor; * Ver 1.4 *
    sql_cursor trd_cursor;
		struct vw_cntfut_pos st_cntfut_pos;
    struct vw_contract st_cntrct_q;
  	struct vw_cntrct_qt st_cntrct_qt;

		char c_cln_mtch_accnt [ 11 ];
		char c_xchng_cd [ 4 ];
		char c_prdct_typ;
		char c_ctgry_indstk;
		char c_undrlyng [ 7 ];
		char c_expry_dt [ LEN_DATE ];
		char c_exrc_typ;

		long int l_rec_hstry_exists;
		long int l_rec_main_exists;

		long int l_tot_sell_qty_m;
		double d_sell_val_m;
		long int l_tot_sell_qty_h;
		double d_sell_val_h;
		long int l_tot_sell_qty;
		double d_sell_val;
		double d_opn_sell_val;

    long l_fdm_count=0;    	 	** ver 1.2 ***
		long int l_tot_buy_qty_m;
		double d_buy_val_m;
		long int l_tot_buy_qty_h;
		double d_buy_val_h;
		long int l_tot_buy_qty;
		double d_buy_val;
		double d_opn_buy_val;

		double d_cls_val_m;
		double d_cls_val_h;
		double d_cls_val;

		long int li_rec_cnt;
		long int li_bal_qty;
		long int li_crst_qty;
		long int li_uncrst_qty;

		double d_crst_prft;
		double d_uncrst_prft;

		long int li_exctd_qty;
		long int li_exctd_rt;
		double d_frsh_brk;
		double d_cvr_brk;
		varchar c_trd_dt [ LEN_DATE ];
		char c_cprdct_typ;				* Ver 1.4 */

    char c_api_src_flg = '\0';   /*** Ver 3.6 ***/
    varchar c_ven_id[50];        /*** Ver 3.6 ***/
		char c_ven_nm[15] = "\0";		 /*** Ver 3.6 ***/

		int     i_exists_ftd = 0;       /*** Added in ver 2.8 ***/
		long int l_charges    = 0;      /*** Added in ver 2.6 ***/
    int     i_exists      = 0;      /*** Added in ver 2.6 ***/
    int     i_exists_main = 0;      /*** Added in ver 2.6 ***/
    long int l_opnpstn_qty= 0;      /*** Added in ver 2.6 ***/
		double d_ltp         = 0.0;   /*** Added in ver 2.6 ***/
    double d_org_opn_val = 0.0;   /*** Added in ver 2.6 ***/
    double d_total_prft  = 0.0;   /*** Added in ver 2.6 ***/
    char   c_opnpstn_flw ='\0';     /*** Added in ver 2.6 ***/
    char  c_user_id[ 15 ];        /*** VQC Global declaration commented and variable declared in main function ***/ 

    long l_fp_opnpstn_qty = 0 ;  /*** VQC Global declaration commented and variable declared in main function ***/
    long l_f_opnpstn_qty = 0;    /*** VQC Global declaration commented and variable declared in main function ***/

  EXEC SQL END DECLARE SECTION;

  struct vw_err_msg st_err_msg;
 
  /*** Following structure declaration brought insdie main function in VQC ***/

  struct vw_usr_prfl st_usr_prfl;  
  struct vw_cntfut_pos st_cntfut_pos;
  struct vw_contract st_cntrct_q;
  struct vw_contract st_cntrct;

	MEMSET(st_cntrct);  /*** Ver 2.8 ***/

  /*** Added in VQC ***/

  MEMSET(c_trd_dt);
  MEMSET(c_frm_dt);
  MEMSET(c_to_dt);
  MEMSET(c_user_id); 
  MEMSET(c_ven_id); /*** Ver 3.6 ***/
	/*** VQC Change Ends ***/

  /*** Ver 3.4 Starts ***/

  c_nfo_xchng_cd[3] = '\0';   

  /*** Ver 3.4 Ends ***/ 


  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);

  i_ch_val = Fvftos32( ptr_fml_Ibuf,
                       (char *)&st_usr_prfl,
                       "vw_usr_prfl" );
  if ( i_ch_val == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_errmsg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

  i_ch_val = fn_chk_sssn( c_ServiceName,
                          &st_usr_prfl,
                          &st_err_msg ) ;
  if ( i_ch_val == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  i_ch_val = Fvftos32( ptr_fml_Ibuf,
                       (char *)&st_cntrct,
                       "vw_contract" );
  if ( i_ch_val == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_errmsg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if ( st_cntrct.c_rqst_typ != 'O')    /*** Added in ver 2.8 ***/
  {

	i_ch_val = fn_unpack_fmltovar ( c_ServiceName,
                                  c_errmsg.arr,
                                  ptr_fml_Ibuf,
                                  2,
                             FFO_FROM_DT, ( char * )c_frm_dt.arr, NULL,
                             FFO_TO_DT,   ( char * )c_to_dt.arr,  NULL);
	if( i_ch_val != 0 )
	{
  	fn_errlog( c_ServiceName, "S31015", LIBMSG , c_errmsg.arr );
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
  	tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}
  SETLEN( c_frm_dt );
  SETLEN( c_to_dt );

	/** Ver 4.0 strats here **/

	if(Fget32(ptr_fml_Ibuf,FFO_RQST_TYP,0,(char *)&c_req_flg, 0 )== -1 )
  {
    if( Ferror32 != FNOTPRES )
    {
      fn_errlog( c_ServiceName, "S31020", FMLMSG, c_errmsg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  if(DEBUG_MSG_LVL_3)
  {
	fn_userlog(c_ServiceName,"Service called with c_req_flg value :%c:",c_req_flg);
  }

	/** Ver 4.0 ends here **/

  /*** Ver 3.6 Starts ***/

  if(Fget32(ptr_fml_Ibuf,FFO_SOURCE_FLG,0,(char *)&c_api_src_flg, 0 )== -1 )
  {
    if( Ferror32 != FNOTPRES )
    {
      fn_errlog( c_ServiceName, "S31025", FMLMSG, c_errmsg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Source Flag :%c:",c_api_src_flg);
	}

  if( c_api_src_flg == 'A' )
  {    
    MEMSET(c_ven_id);
    strcpy ( c_user_id, st_usr_prfl.c_user_id);

    if (Fget32(ptr_fml_Ibuf,FFO_USER_CODE,0,(char *)c_ven_id.arr, 0) == -1 )
    {
        /** ver 3.8 starts **/
        if( Ferror32 == FNOTPRES )
        {
         fn_userlog(c_ServiceName,"Normal call");
         strcpy(c_ven_id.arr,"%");
        } 
        /** ver 3.8 ends **/
        else   /** ver 3.8 **/
        {
         fn_errlog( c_ServiceName, "S31030", FMLMSG, c_errmsg.arr  );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
    }

    SETLEN(c_ven_id);  

		if(DEBUG_MSG_LVL_4)
		{ 
    	fn_userlog(c_ServiceName," Vendor ID :%s:",c_ven_id.arr);
		}

   if ( strcmp(c_ven_id.arr,"%") != 0)   /** ver 3.8 **/
   {
     i_returncode = fn_chk_vendor ( c_ServiceName,
                     c_user_id,
                     c_ven_id.arr,
                     c_ven_nm,
                     &st_err_msg );


     if ( i_returncode == -1 )
     {
         fn_errlog( c_ServiceName, "S31035","Error in function fn_chk_vendor",c_errmsg.arr);
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
   }

	  if(DEBUG_MSG_LVL_4)
		{
			fn_userlog(c_ServiceName," Inside sfo_fut_prtfl Vendor Name:%s:",c_ven_nm);
		}
    if ( strcmp(c_ven_nm,"SENSIBULL") == 0 )
    {   
		/*** ver 3.9 Sensibull removal of link
	     i_returncode = fn_chk_vendor_validity ( c_ServiceName,
                                              c_user_id,
                                              &st_err_msg
                                            ); 

      if ( i_returncode == -1 )
      {
         fn_errlog( c_ServiceName, "S31040","Error in function fn_chk_vendor_Validity",c_errmsg.arr);
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
			ver 3.9 end ***/

			/*** TNC check commented as we will show positions even if Idirect Sensibull TNC is not accepted ***
      i_returncode = fn_chk_sensibull_tnc( c_ServiceName,
                                           c_user_id,
                                           &st_err_msg
                                          );

      if ( i_returncode == -1 )
      {
         fn_errlog( c_ServiceName, "S31045","Error in function fn_chk_sensibull_tnc",c_errmsg.arr);
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
     ***/

	  	rtrim(c_ven_id.arr);

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Vendor Id = ESP_ID is :%s:",c_ven_id.arr);
			}
			if( c_user_id[0] == BPID )
      {
         fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst,Sensibull is desabled");
         fn_errlog( c_ServiceName, "B35018", "", c_errmsg.arr );
				 strcpy(c_errmsg.arr,"Since you are Attached to a Direct Business Catalyst,Sensibull is desabled");
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      } 

      EXEC SQL
      	SELECT  ICD_CUST_TYPE
      	INTO    :sql_icd_cust_type
      	FROM    ICD_INFO_CLIENT_DTLS,
      	IAI_INFO_ACCOUNT_INFO
      	WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
      	AND     IAI_MATCH_ACCOUNT_NO  = :st_usr_prfl.c_cln_mtch_accnt;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31050",SQLMSG,c_errmsg.arr);
      	fn_userlog(c_ServiceName,"Error NRI Customer check for :%s:",st_usr_prfl.c_cln_mtch_accnt);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
			
			SETNULL(sql_icd_cust_type);

			if(strcmp(sql_icd_cust_type.arr,"NRI") == 0)
      {
        fn_userlog( c_ServiceName, "NRI Customer Trying To Place Order from SENSIBULL");
        fn_errlog( c_ServiceName, "S31055","NRI Customer Trying To Place Order from SENSIBULL",c_errmsg.arr);
        strcpy(c_errmsg.arr," NRI Customer Trying To Place Order from SENSIBULL.");
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		}
    else
    {
      /************* commented in ver 3.8 ***************
       fn_userlog( c_ServiceName, "Invalid Vendor" );
       fn_errlog( c_ServiceName, "S31060","InValid Vendor.",c_errmsg.arr );
       strcpy( c_errmsg.arr,"InValid Vendor.");
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      *****************************************************/
      fn_userlog(c_ServiceName,"Call from Vendor with ESP_ID :%s: Vendor Name:%s:",c_ven_id.arr,c_ven_nm);  /** ver 3.8 **/
    }
		
  }
  /*** Ver 3.6 Ends ***/

  /*** Ver 3.5 Starts ***/

  if(DEBUG_MSG_LVL_2)
  {

    fn_userlog(c_ServiceName,"MtchAccnt:%s:Exg:%s:Undrlyg:%s:FrDate:%s:ToDate:%s:<%c><%s><%s> ",st_usr_prfl.c_cln_mtch_accnt,st_cntrct.c_xchng_cd,st_cntrct.c_undrlyng,c_frm_dt.arr,c_to_dt.arr,c_api_src_flg,c_ven_nm,c_ven_id.arr); /*** Ver 3.6 added API logs ***/

  }
  /*** Ver 3.5 Ends ***/

	i_str_len = 0;
  if ( strcmp ( st_cntrct.c_undrlyng , "A" ) ==  0 )
  {
    strcpy ( c_undrlyng, "%" );
  }
	else
	{
		strcpy ( c_undrlyng, st_cntrct.c_undrlyng );
    
		rtrim(c_undrlyng);
		if ( strlen(c_undrlyng) < 6 )
		{
			i_str_len = strlen(c_undrlyng);
			for(i_trim=i_str_len;i_trim<6;i_trim++)
			{
  			strcat(c_undrlyng," ");
			}
		} 
	}	

  if ( st_cntrct.c_prd_typ == 'A' )
  {
    st_cntrct.c_prd_typ = '%';
  }

  /********* Commented in Ver 3.2 ***************
	********************Date formatiing for Ver 1.1 *****************
  * converting the date into dd-mon-yyyy *
  EXEC SQL
    SELECT to_char(to_date(:c_frm_dt),'dd-mon-yyyy'),
           to_char(to_date(:c_to_dt),'dd-mon-yyyy')
    into   :c_frm_dt,
           :c_to_dt
    FROM   dual;

  if (SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31065", SQLMSG, c_errmsg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    ret_val = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID ,(char*)&ret_val, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	**********formatting for Ver 1.1 Ends here ****************************

  ******** Commented in Ver 3.2 ********/


  /*** Ver 3.2 Starts ****/

  MEMSET(c_min_ftq_exp_dt);

   /*** In below query function name changed to capital case in Ver 3.4 ***/ 

   EXEC SQL
      SELECT TO_CHAR(MIN(FTQ_EXPRY_DT), 'YYYYMMDD'),
             TO_CHAR(TO_DATE(:c_frm_dt),'dd-mon-yyyy'),
             TO_CHAR(TO_DATE(:c_to_dt),'dd-mon-yyyy')
      INTO   :c_min_ftq_exp_dt,
             :c_frm_dt,
             :c_to_dt
      FROM   FTQ_FO_TRD_QT
    /***  WHERE  FTQ_XCHNG_CD = 'NFO';  Commented in Ver 3.4 ***/
      WHERE  FTQ_XCHNG_CD = :c_nfo_xchng_cd;  /*** Ver 3.4 Bind variable used instead of hard coded values ***/       


  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31070", SQLMSG, c_errmsg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    ret_val = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID ,(char*)&ret_val, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  rtrim(c_min_ftq_exp_dt);

  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName, "Minimum FTQ Exp Date:[%s]", c_min_ftq_exp_dt);
    fn_userlog(c_ServiceName, "From Date:[%s]", c_frm_dt);
    fn_userlog(c_ServiceName, "To Date:[%s]", c_to_dt);
  }

  /*** Ver 3.2 Ends ****/



	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "Match account :%s:",st_usr_prfl.c_cln_mtch_accnt );
	}

	if(DEBUG_MSG_LVL_5)
	{
  fn_userlog( c_ServiceName, "Match account :%s:",st_usr_prfl.c_cln_mtch_accnt );
  fn_userlog( c_ServiceName, "Contract details" );
  fn_userlog( c_ServiceName, ":%s:", st_cntrct.c_xchng_cd );
  fn_userlog( c_ServiceName, ":%c:", st_cntrct.c_prd_typ );
  fn_userlog( c_ServiceName, "underlying:%s:", st_cntrct.c_undrlyng );
  fn_userlog( c_ServiceName, "New underlying:%s:", c_undrlyng );
  fn_userlog( c_ServiceName, ":%s:", st_cntrct.c_expry_dt );
  fn_userlog( c_ServiceName, ":%c:", st_cntrct.c_exrc_typ );
  fn_userlog( c_ServiceName, ":%ld:", st_cntrct.l_strike_prc );
  fn_userlog( c_ServiceName, "c_frm_dt      :%s:", c_frm_dt.arr );
  fn_userlog( c_ServiceName, "c_to_dt       :%s:", c_to_dt.arr);

	}

	l_rec_main_exists = 0;
	l_rec_hstry_exists = 0;


	/***************** Ver 1.7 Starts ********************************/

	/********************Ver 1.1 *****************
  if(tpbegin( TRAN_TIMEOUT, 0 ) == -1)
	{
		fn_errlog( c_ServiceName, "S31075", SQLMSG, c_errmsg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}


  if( strcmp( st_usr_prfl.c_cln_mtch_accnt , "*" ) == 0 )
  {
		if(DEBUG_MSG_LVL_3)
		{
    fn_userlog(c_ServiceName,"Problem If I am here ");
		}
    if( st_usr_prfl.c_user_id[0] == BPID )
    {
      ** insert into fdm all acounts for this bpid **
      EXEC SQL
      INSERT INTO
      FDM_DT_MTCH_PRTFL
      SELECT CLM_MTCH_ACCNT FROM CLM_CLNT_MSTR
      WHERE CLM_BP_ID = :st_usr_prfl.c_user_id;
      if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31080", SQLMSG, c_errmsg );
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpcommit(0);
        tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
      }
			i_clnts = sqlca.sqlerrd[2];
    }
    else
    {
      EXEC SQL
      INSERT  INTO  FDM_DT_MTCH_PRTFL
      SELECT  UAC_CLM_MTCH_ACCNT FROM uac_usr_accnts
      WHERE   UAC_USR_ID = :st_usr_prfl.c_user_id ;
      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31085", SQLMSG, c_errmsg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpcommit(0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }	
		i_clnts = sqlca.sqlerrd[2];
	}
	else
	{
		if(DEBUG_MSG_LVL_3)
		{
    fn_userlog(c_ServiceName,"I wanted to be here ");
		}
      EXEC SQL
      INSERT  INTO  FDM_DT_MTCH_PRTFL VALUES (:st_usr_prfl.c_cln_mtch_accnt );
      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31090", SQLMSG, c_errmsg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpcommit(0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
			i_clnts = 1;
	}
	**********Ver 1.1 Ends here ****************************


	EXEC SQL
		SELECT	1
		INTO		:l_rec_hstry_exists
		FROM		DUAL
		WHERE 	EXISTS (
								SELECT	1
								FROM 		ffp_fo_futures_pstn_hstry,FDM_DT_MTCH_PRTFL
								* WHERE 	ffp_clm_mtch_accnt = :st_usr_prfl.c_cln_mtch_accnt *
								WHERE 	ffp_clm_mtch_accnt = FDM_CLM_MTCH_ACCNT
								AND			ffp_xchng_cd 			 = :st_cntrct.c_xchng_cd
								
								*** Commented In Ver 1.4
								AND			ffp_prdct_typ 		 LIKE :st_cntrct.c_prd_typ
								***
								AND			ffp_undrlyng 			LIKE :c_undrlyng
								AND 		ffp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
								AND 		ffp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
								AND			
								(				ffp_buy_exctd_qty	!= 0
								  OR		ffp_sell_exctd_qty	!= 0
								)
										) ;
	if ( ( SQLCODE !=0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
		tpcommit(0);
    fn_errlog( c_ServiceName, "S31095", SQLMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	EXEC SQL
		SELECT	1
		INTO		:l_rec_main_exists
		FROM		DUAL
		WHERE 	EXISTS (
								SELECT	1
								FROM 		ffp_fo_futures_pstn,FDM_DT_MTCH_PRTFL
								* WHERE 	ffp_clm_mtch_accnt = :st_usr_prfl.c_cln_mtch_accnt *
								WHERE 	ffp_clm_mtch_accnt = FDM_CLM_MTCH_ACCNT
								AND			ffp_xchng_cd 			 = :st_cntrct.c_xchng_cd
		
								*** Commented In Ver 1.4
								AND			ffp_prdct_typ 		 LIKE :st_cntrct.c_prd_typ
								***
								AND			ffp_undrlyng 			LIKE :c_undrlyng
								AND 		ffp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
								AND 		ffp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
								AND			
								(				ffp_buy_exctd_qty	!= 0
								  OR		ffp_sell_exctd_qty	!= 0
								)	
										) ;

	if ( ( SQLCODE !=0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
		tpcommit(0);
    fn_errlog( c_ServiceName, "S31100", SQLMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

 	EXEC SQL ALLOCATE :cont_cursor;

	strcpy ( c_xchng_cd, st_cntrct.c_xchng_cd );
	c_prdct_typ = st_cntrct.c_prd_typ;

	if ( (l_rec_main_exists == 1 ) && (l_rec_hstry_exists == 0 ) )
  {

    EXEC SQL  EXECUTE
        BEGIN
          OPEN  :cont_cursor FOR
              SELECT  ffp_xchng_cd,

											*** Commented In Ver 1.4
											ffp_prdct_typ,
											***
											ffp_indstk,
											ffp_undrlyng,
											to_char(ffp_expry_dt,'DD-Mon-YYYY'),
											ffp_exer_typ,
											SUM (ffp_opnpstn_qty),
											SUM (ffp_opnpstn_val),
											ffp_clm_mtch_accnt
							FROM 		ffp_fo_futures_pstn, FDM_DT_MTCH_PRTFL
							* WHERE 	ffp_clm_mtch_accnt 	= :c_cln_mtch_accnt *
							WHERE 	ffp_clm_mtch_accnt 	= FDM_CLM_MTCH_ACCNT
							AND			ffp_xchng_cd 				= :c_xchng_cd
						
							*** Commented In Ver 1.4
              AND     ffp_prdct_typ       LIKE :c_prdct_typ
              ***
							AND			ffp_undrlyng 			LIKE :c_undrlyng
							AND 		ffp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
							AND 		ffp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
							AND			
							(				ffp_buy_exctd_qty	!= 0
							  OR		ffp_sell_exctd_qty	!= 0
							)
							GROUP BY  ffp_xchng_cd, 

												*** Commented In Ver 1.4
												ffp_prdct_typ,
												***
												ffp_indstk, 
												ffp_undrlyng, 
												ffp_expry_dt, 
												ffp_exer_typ,
												ffp_clm_mtch_accnt
							ORDER BY  ffp_xchng_cd, 
												ffp_clm_mtch_accnt,
	
												*** Commented In Ver 1.4
												ffp_prdct_typ,
												***
												ffp_undrlyng, 
												ffp_expry_dt ;
        END;
      END-EXEC;
  }
	else if ( (l_rec_main_exists == 0 ) && (l_rec_hstry_exists == 1 ) )
  {
    EXEC SQL  EXECUTE
        BEGIN
          OPEN  :cont_cursor FOR
              SELECT  ffp_xchng_cd,

											*** Commented In Ver 1.4
											ffp_prdct_typ,
											***
											ffp_indstk,
											ffp_undrlyng,
											to_char(ffp_expry_dt,'DD-Mon-YYYY'),
											ffp_exer_typ,
											SUM (ffp_opnpstn_qty),
											SUM (ffp_opnpstn_val),
											ffp_clm_mtch_accnt
							FROM 		ffp_fo_futures_pstn_hstry,FDM_DT_MTCH_PRTFL
							* WHERE 	ffp_clm_mtch_accnt 	= :c_cln_mtch_accnt *
							WHERE 	ffp_clm_mtch_accnt 	= FDM_CLM_MTCH_ACCNT
							AND			ffp_xchng_cd 				= :c_xchng_cd

							*** Commented In Ver 1.4
							AND			ffp_prdct_typ 			LIKE :c_prdct_typ
							***
							AND			ffp_undrlyng 			LIKE :c_undrlyng
							AND 		ffp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
							AND 		ffp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
							AND			
							(				ffp_buy_exctd_qty	!= 0
							  OR		ffp_sell_exctd_qty	!= 0
							)
							GROUP BY  ffp_xchng_cd, 

												*** Commented In Ver 1.4
												ffp_prdct_typ, 
												***
												ffp_indstk, 
												ffp_undrlyng, 
												ffp_expry_dt, 
												ffp_exer_typ,
												ffp_clm_mtch_accnt
							ORDER BY  ffp_xchng_cd, 
												ffp_clm_mtch_accnt,

												*** Commented In Ver 1.4
												ffp_prdct_typ, 
												***
												ffp_undrlyng, 
												ffp_expry_dt ;
        END;
      END-EXEC;
  }
	else if ( (l_rec_main_exists == 1 ) && (l_rec_hstry_exists == 1 ) )
  {
    EXEC SQL  EXECUTE
        BEGIN
          OPEN  :cont_cursor FOR
              SELECT  ffp_xchng_cd,

											*** Commented In Ver 1.4
											ffp_prdct_typ,
											***
											ffp_indstk,
											ffp_undrlyng,
											to_char(ffp_expry_dt,'DD-Mon-YYYY'),
											ffp_exer_typ,
											SUM (ffp_opnpstn_qty),
											SUM (ffp_opnpstn_val),
											ffp_clm_mtch_accnt
							FROM 		ffp_fo_futures_pstn,FDM_DT_MTCH_PRTFL
							* WHERE 	ffp_clm_mtch_accnt 	= :c_cln_mtch_accnt *
							WHERE 	ffp_clm_mtch_accnt 	= FDM_CLM_MTCH_ACCNT
							AND			ffp_xchng_cd 				= :c_xchng_cd

							*** Commented In Ver 1.4
							AND			ffp_prdct_typ 			LIKE :c_prdct_typ
							***
							AND			ffp_undrlyng 			LIKE :c_undrlyng
							AND 		ffp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
							AND 		ffp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
							AND			
							(				ffp_buy_exctd_qty	!= 0
							  OR		ffp_sell_exctd_qty	!= 0
							)
							GROUP BY  ffp_xchng_cd, 

												*** Commented In Ver 1.4
												ffp_prdct_typ, 
												***
												ffp_indstk, 
												ffp_undrlyng, 
												ffp_expry_dt, 
												ffp_exer_typ,
												ffp_clm_mtch_accnt
							UNION ALL
              SELECT  ffp_xchng_cd,

											*** Commented In Ver 1.4
											ffp_prdct_typ,
											***
											ffp_indstk,
											ffp_undrlyng,
											to_char(ffp_expry_dt,'DD-Mon-YYYY'),
											ffp_exer_typ,
											SUM (ffp_opnpstn_qty),
											SUM (ffp_opnpstn_val),
											ffp_clm_mtch_accnt
							FROM 		ffp_fo_futures_pstn_hstry,FDM_DT_MTCH_PRTFL
							* WHERE 	ffp_clm_mtch_accnt 	= :c_cln_mtch_accnt *
							WHERE 	ffp_clm_mtch_accnt 	= FDM_CLM_MTCH_ACCNT
							AND			ffp_xchng_cd 				= :c_xchng_cd

							*** Commented In Ver 1.4
							AND			ffp_prdct_typ 			LIKE :c_prdct_typ
							***		
							AND			ffp_undrlyng 			LIKE :c_undrlyng
							AND 		ffp_expry_dt >= to_date ( :c_frm_dt,'dd-mon-yyyy')
							AND 		ffp_expry_dt <= to_date ( :c_to_dt,'dd-mon-yyyy')
							AND			
							(				ffp_buy_exctd_qty	!= 0
							  OR		ffp_sell_exctd_qty	!= 0
							)
							GROUP BY  ffp_xchng_cd,

												*** Commented In Ver 1.4 
												ffp_prdct_typ, 
												***
												ffp_indstk, 
												ffp_undrlyng, 
												ffp_expry_dt, 
												ffp_exer_typ,
												ffp_clm_mtch_accnt
							ORDER BY  1, 2, 4, 5 , 7;
        END;
      END-EXEC;
  }
	else
	{
		tpcommit(0);
    fn_errlog( c_ServiceName, "B28548", DEFMSG, c_errmsg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  if ( SQLCODE != 0 )
  {
		tpcommit(0);
    fn_errlog( c_ServiceName, "S31105", SQLMSG, c_errmsg  );
    EXEC SQL FREE :cont_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
  }*/

	/***************** Ver 1.7 Ends ********************************/	

	/***************** Ver 1.7 Starts********************************/	

	if( strcmp( st_usr_prfl.c_cln_mtch_accnt , "*" ) == 0 )
  {
		if( st_usr_prfl.c_user_id[0] == BPID )
		{

    /*** Below queries changed to upper case in Ver 3.4 ***/

					if(DEBUG_MSG_LVL_3){
					fn_userlog(c_ServiceName,"BPID");}

						  EXEC SQL
									SELECT  1
									INTO    :l_rec_hstry_exists
									FROM    DUAL
									WHERE   EXISTS (
																	SELECT  1				 
																	FROM    FFP_FO_FUTURES_PSTN_HSTRY,CLM_CLNT_MSTR 
																	WHERE   FFP_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT 
																	AND     FFP_UNDRLYNG      LIKE :c_undrlyng
																	AND     FFP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
																	AND     FFP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
																	AND     CLM_BP_ID = :st_usr_prfl.c_user_id
                                  AND     FFP_XCHNG_CD       = :st_cntrct.c_xchng_cd
																	AND
						/*** Commented in Ver 3.4  (	FFP_BUY_EXCTD_QTY != 0
																					OR    FFP_SELL_EXCTD_QTY  != 0
																				)  ***/
                                       (  FFP_BUY_EXCTD_QTY !=  :l_zero_val         /*** Ver 3.4 bind variable used ***/
                                          OR    FFP_SELL_EXCTD_QTY  != :l_zero_val  /*** Ver 3.4 bind variable used ***/ 
                                        )
														UNION ALL                                                       /* Ver 1.9 SPAN Portfolio */
                        		(
                           				SELECT  1
                                  FROM    FCP_FO_SPN_CNTRCT_PSTN_HSTRY,CLM_CLNT_MSTR
                                  WHERE   FCP_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
                                  AND     FCP_UNDRLYNG      LIKE :c_undrlyng
                                  AND     FCP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                                  AND     FCP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                                  AND     CLM_BP_ID = :st_usr_prfl.c_user_id
                                  AND     FCP_XCHNG_CD       = :st_cntrct.c_xchng_cd
                               /***   AND     FCP_PRDCT_TYP = 'F'  Commented in Ver 3.4 ***/
                                  AND     FCP_PRDCT_TYP = :c_fut_prd_typ /*** Ver 3.4 Bind variable used instead of hard coded value ***/ 
                                  AND
            /*** Commented in Ver 3.4  ( FCP_BUY_EXCTD_QTY != 0
                                          OR
                                          FCP_SELL_EXCTD_QTY  != 0
                                        )    ***/
                                        ( FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                                          OR
                                          FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                                        )
                        		)		
														UNION ALL                                                   /* Ver 2.2 SLTP FPLUS Portfolio */
                            (

                              SELECT  1
                                  FROM    FOD_FO_ORDR_DTLS_HSTRY,CLM_CLNT_MSTR
                                  WHERE   FOD_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
                                  AND     FOD_UNDRLYNG      LIKE :c_undrlyng
                                  AND     FOD_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                                  AND     FOD_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                                  AND     CLM_BP_ID = :st_usr_prfl.c_user_id
                                  AND     FOD_XCHNG_CD       = :st_cntrct.c_xchng_cd
                            /***      AND     FOD_PRDCT_TYP = 'U'  Commented in Ver 3.4 ***/
                                  AND     FOD_PRDCT_TYP = :c_sltpfp_prd_typ /*** Ver 3.4 Bind variable used instead of hard code d value ***/
                         /***     AND     FOD_EXEC_QTY != 0  Commented in Ver 3.4 ***/
                                  AND     FOD_EXEC_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                            )
												 );	

								
								EXEC SQL
								    SELECT  1
										INTO    :l_rec_main_exists
										FROM    DUAL
										WHERE   EXISTS	(
																			SELECT  1
																			FROM    FFP_FO_FUTURES_PSTN,CLM_CLNT_MSTR
																			WHERE   FFP_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
																			AND     FFP_UNDRLYNG      LIKE :c_undrlyng
																			AND     FFP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
																			AND     FFP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
																			AND     FFP_XCHNG_CD       = :st_cntrct.c_xchng_cd
																		  AND			CLM_BP_ID = :st_usr_prfl.c_user_id
																			AND
									/*** Commented in Ver 3.4		( FFP_BUY_EXCTD_QTY != 0
																					OR    FFP_SELL_EXCTD_QTY  != 0
																			        )***/
                                               ( FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                                          OR    FFP_SELL_EXCTD_QTY  !=:l_zero_val /*** Ver 3.4 bind variable used ***/
                                      )
														UNION ALL                                                         /* Ver 1.9 SPAN Portfolio */
                        		(
                          						SELECT  1
                                  		FROM    FCP_FO_SPN_CNTRCT_PSTN,CLM_CLNT_MSTR
                                  		WHERE   FCP_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
                                  		AND     FCP_UNDRLYNG      LIKE :c_undrlyng
                                  		AND     FCP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                                  		AND     FCP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                                  		AND     FCP_XCHNG_CD       = :st_cntrct.c_xchng_cd
                                  		AND     CLM_BP_ID = :st_usr_prfl.c_user_id
                                 /*** 		AND     FCP_PRDCT_TYP = 'F'  Commented in Ver 3.4 ***/
                                      AND     FCP_PRDCT_TYP = :c_fut_prd_typ  /*** Ver 3.4 Bind variable used instead of hard coded value ***/ 
                                  		AND
          /*** Commented in Ver 3.4   ( FCP_BUY_EXCTD_QTY != 0
                                        OR
                                        FCP_SELL_EXCTD_QTY  != 0
                                      ) ***/
                                      ( FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                                        OR
                                        FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                                      )
                        	)	
													UNION ALL                                                     /* Ver 2.2 SLTP FPlus Portfolio */
                          (
                                      SELECT  1
                                      FROM    FOD_FO_ORDR_DTLS,CLM_CLNT_MSTR
                                      WHERE   FOD_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
                                      AND     FOD_UNDRLYNG      LIKE :c_undrlyng
                                      AND     FOD_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                                      AND     FOD_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                                      AND     FOD_XCHNG_CD       = :st_cntrct.c_xchng_cd
                                      AND     CLM_BP_ID = :st_usr_prfl.c_user_id
                                  /***    AND     FOD_PRDCT_TYP = 'U'  Commented in Ver 3.4 ***/
                                      AND     FOD_PRDCT_TYP = :c_sltpfp_prd_typ /*** Ver 3.4 Bind variable used instead of hard coded value ***/
                               /***       AND     FOD_EXEC_QTY != 0  Commented in Ver 3.4 ***/
                                          AND     FOD_EXEC_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/             
                          )
											 );

						
		}	
		else
		{

       /*** Below queries changed to upper case in Ver 3.4 ***/

								EXEC SQL
                    SELECT  1
                    INTO    :l_rec_hstry_exists
                    FROM    DUAL
                    WHERE   EXISTS (
                                      SELECT  1
                                      FROM    FFP_FO_FUTURES_PSTN_HSTRY,UAC_USR_ACCNTS
                                      WHERE   FFP_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
                                      AND     FFP_UNDRLYNG      LIKE :c_undrlyng
                                      AND     FFP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                                      AND     FFP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
																			AND     FFP_XCHNG_CD       = :st_cntrct.c_xchng_cd
																			AND     UAC_USR_ID = :st_usr_prfl.c_user_id
                                      AND
        /*** Commented in Ver 3.4     (       FFP_BUY_EXCTD_QTY != 0
                                        OR    FFP_SELL_EXCTD_QTY  != 0
                                      ) ***/
                                      (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                                        OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/
                                      )
                                
													UNION ALL                                                         /* Ver 1.9 SPAN Portfolio */
                        						(
                          						SELECT  1
                                  		FROM    FCP_FO_SPN_CNTRCT_PSTN_HSTRY,UAC_USR_ACCNTS
                                  		WHERE   FCP_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
                                  		AND     FCP_UNDRLYNG      LIKE :c_undrlyng
                                  		AND     FCP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                                  		AND     FCP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                                  		AND     FCP_XCHNG_CD       = :st_cntrct.c_xchng_cd
                                  		AND     UAC_USR_ID = :st_usr_prfl.c_user_id
                                 /*** 		AND     FCP_PRDCT_TYP = 'F'   Commented in Ver 3.4 ***/
                                      AND     FCP_PRDCT_TYP = :c_fut_prd_typ /*** Ver 3.4 Bind variable used instead of hard coded value ***/
                                  		AND
         /*** Commented in Ver 3.4   (       FCP_BUY_EXCTD_QTY != 0
                                        OR    FCP_SELL_EXCTD_QTY  != 0
                                      ) ***/
                                     (       FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                                        OR    FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                                      )
                        						)
													UNION ALL                                                       /* Ver 2.2 SLTP FPlus Portfolio */
                                    (
                                      SELECT  1
                                      FROM    FOD_FO_ORDR_DTLS_HSTRY,UAC_USR_ACCNTS
                                      WHERE   FOD_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
                                      AND     FOD_UNDRLYNG      LIKE :c_undrlyng
                                      AND     FOD_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                                      AND     FOD_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                                      AND     FOD_XCHNG_CD       = :st_cntrct.c_xchng_cd
                                      AND     UAC_USR_ID = :st_usr_prfl.c_user_id
                                    /***  AND     FOD_PRDCT_TYP = 'U' Commented in Ver 3.4 ***/
                                      AND     FOD_PRDCT_TYP = :c_sltpfp_prd_typ /*** Ver 3.4 Bind variable used instead of hard coded value ***/
                             /***     AND     FOD_EXEC_QTY != 0  Commented in Ver 3.4 ***/
                                      AND     FOD_EXEC_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                                    )	
                                  );

						



								EXEC SQL
                    SELECT  1
                    INTO    :l_rec_main_exists
                    FROM    DUAL
                    WHERE   EXISTS (
                                      SELECT  1
                                      FROM    FFP_FO_FUTURES_PSTN,UAC_USR_ACCNTS
                                      WHERE   FFP_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
                                      AND     FFP_UNDRLYNG      LIKE :c_undrlyng
                                      AND     FFP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                                      AND     FFP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
																			AND     FFP_XCHNG_CD       = :st_cntrct.c_xchng_cd
																			AND			UAC_USR_ID = :st_usr_prfl.c_user_id
                                      AND
        /*** Commented in Ver 3.4     (       FFP_BUY_EXCTD_QTY != 0
                                        OR    FFP_SELL_EXCTD_QTY  != 0
                                      ) ***/
                                      (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                                        OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                                      )
																UNION ALL                                                   /* Ver 1.9 SPAN Portfolio */
                        						(
                            					SELECT  1
                                  		FROM    FCP_FO_SPN_CNTRCT_PSTN,UAC_USR_ACCNTS
                                  		WHERE   FCP_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
                                  		AND     FCP_UNDRLYNG      LIKE :c_undrlyng
                                  		AND     FCP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                                  		AND     FCP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                                  		AND     FCP_XCHNG_CD       = :st_cntrct.c_xchng_cd
                                  		AND     UAC_USR_ID = :st_usr_prfl.c_user_id
                                 /*** 		AND     FCP_PRDCT_TYP = 'F' Commented in Ver 3.4 ***/
                                      AND     FCP_PRDCT_TYP = :c_fut_prd_typ /*** Ver 3.4 Bind variable used instead of hard coded value ***/ 
                                  		AND
         /*** Commented in Ver 3.4   (       FCP_BUY_EXCTD_QTY != 0
                                        OR    FCP_SELL_EXCTD_QTY  != 0
                                      ) ***/
                                     (       FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                                        OR    FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                                      )
                        					 )
																UNION ALL                                                /* Ver 2.2 SLTP FPlus Portfolio */
                                    (
                                      SELECT  1
                                      FROM    FOD_FO_ORDR_DTLS,UAC_USR_ACCNTS
                                      WHERE   FOD_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
                                      AND     FOD_UNDRLYNG      LIKE :c_undrlyng
                                      AND     FOD_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                                      AND     FOD_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                                      AND     FOD_XCHNG_CD       = :st_cntrct.c_xchng_cd
                                      AND     UAC_USR_ID = :st_usr_prfl.c_user_id
                                   /***   AND     FOD_PRDCT_TYP = 'U'   Commented in Ver 3.4 ***/
                                      AND     FOD_PRDCT_TYP = :c_sltpfp_prd_typ /*** Ver 3.4 Bind variable used instead of hard coded value ***/ 
                       /***           AND     FOD_EXEC_QTY != 0  Commented in Ver 3.4 ***/
                                      AND     FOD_EXEC_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                                    )
                                 );

	    }
	

  }
	else
	{

    /*** Below queries changed to upper case in Ver 3.4 ***/


							if(DEBUG_MSG_LVL_3){
							fn_userlog(c_ServiceName,"NON BPID");}


							 EXEC SQL
                		SELECT  1
                    INTO    :l_rec_hstry_exists
                    FROM    DUAL
                    WHERE   EXISTS (
                                      SELECT  1
                                      FROM    FFP_FO_FUTURES_PSTN_HSTRY
                                      WHERE   FFP_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt 
                                      AND     FFP_UNDRLYNG      LIKE :c_undrlyng
                                      AND     FFP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                                      AND     FFP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
																			AND     FFP_XCHNG_CD       = :st_cntrct.c_xchng_cd
                                      AND
    /*** Commented in Ver 3.4         (       FFP_BUY_EXCTD_QTY != 0
                                        OR    FFP_SELL_EXCTD_QTY  != 0
                                      )  ***/
                                      (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                                        OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/
                                      )
																	 UNION ALL                                           /* Ver 1.9 SPAN Portfolio */
                        						(
                          						SELECT  1
                                  		FROM    FCP_FO_SPN_CNTRCT_PSTN_HSTRY
                                  		WHERE   FCP_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
                                  		AND     FCP_UNDRLYNG      LIKE :c_undrlyng
                                  		AND     FCP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                                  		AND     FCP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                                  		AND     FCP_XCHNG_CD       = :st_cntrct.c_xchng_cd
                                 /*** 		AND     FCP_PRDCT_TYP = 'F' Commented in Ver 3.4 ***/
                                      AND     FCP_PRDCT_TYP = :c_fut_prd_typ /*** Ver 3.4 Bind variable used instead of hard coded value ***/  
                                  		AND
        /*** Commented in Ver 3.4     (       FCP_BUY_EXCTD_QTY != 0
                                        OR    FCP_SELL_EXCTD_QTY  != 0
                                      ) ***/
                                      (       FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                                        OR    FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/
                                      )
                        						)
																	 UNION ALL                                         /* Ver 2.2 SLTP FPlus Portfolio */
                                    (
                                      SELECT  1
                                      FROM    FOD_FO_ORDR_DTLS_HSTRY
                                      WHERE   FOD_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
                                      AND     FOD_UNDRLYNG      LIKE :c_undrlyng
                                      AND     FOD_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                                      AND     FOD_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                                      AND     FOD_XCHNG_CD       = :st_cntrct.c_xchng_cd
                                    /***  AND     FOD_PRDCT_TYP = 'U'  Commented in Ver 3.4 ***/
                                      AND     FOD_PRDCT_TYP = :c_sltpfp_prd_typ /*** Ver 3.4 Bind variable used instead of hard coded value ***/
                          /***        AND     FOD_EXEC_QTY != 0   Commented in Ver 3.4 ***/
                                      AND     FOD_EXEC_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                                    )
                                   );

				

							EXEC SQL
                		SELECT  1
                    INTO    :l_rec_main_exists
                    FROM    DUAL
                    WHERE   EXISTS (
                                      SELECT  1
                                      FROM    FFP_FO_FUTURES_PSTN
                                      WHERE   FFP_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
                                      AND     FFP_XCHNG_CD       = :st_cntrct.c_xchng_cd
                                      AND     FFP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                                      AND     FFP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
																			AND     FFP_UNDRLYNG      LIKE :c_undrlyng
                                      AND
        /*** Commented in Ver 3.4     (       FFP_BUY_EXCTD_QTY != 0
                                        OR    FFP_SELL_EXCTD_QTY  != 0
                                      )  ***/
                                      (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                                        OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                                      )
																UNION ALL                                               /* Ver 1.9 SPAN Portfolio */
                        						(
                           						SELECT  1
                                  		FROM    FCP_FO_SPN_CNTRCT_PSTN
                                  		WHERE   FCP_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
                                  		AND     FCP_XCHNG_CD       = :st_cntrct.c_xchng_cd
                                  		AND     FCP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                                  		AND     FCP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                                  		AND     FCP_UNDRLYNG      LIKE :c_undrlyng
                              /***    		AND     FCP_PRDCT_TYP = 'F'   Commented in Ver 3.4 ***/
                                      AND     FCP_PRDCT_TYP = :c_fut_prd_typ /*** Ver 3.4 Bind variable used instead of hard coded value ***/ 
                                  		AND
       /*** Commented in Ver 3.4     (       FCP_BUY_EXCTD_QTY != 0
                                        OR    FCP_SELL_EXCTD_QTY  != 0
                                      ) ***/
                                      (       FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                                        OR    FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                                      )
                        						)
																UNION ALL                                               /* Ver 2.2 SLTP FPlus Portfolio */
                                    (
                                      SELECT  1
                                      FROM    FOD_FO_ORDR_DTLS
                                      WHERE   FOD_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
                                      AND     FOD_XCHNG_CD       = :st_cntrct.c_xchng_cd
                                      AND     FOD_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                                      AND     FOD_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                                      AND     FOD_UNDRLYNG      LIKE :c_undrlyng
                                  /***    AND     FOD_PRDCT_TYP = 'U' Commented in Ver 3.4 ***/
                                      AND     FOD_PRDCT_TYP = :c_sltpfp_prd_typ /*** Ver 3.4 Bind variable used instead of hard coded value ***/
                               /***   AND     FOD_EXEC_QTY != 0  Commented in Ver 3.4 ***/
                                      AND     FOD_EXEC_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                                    )
                                   );




	}

	if ( ( SQLCODE !=0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog( c_ServiceName, "S31110", SQLMSG, c_errmsg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	 EXEC SQL ALLOCATE :cont_cursor;

   strcpy ( c_xchng_cd, st_cntrct.c_xchng_cd );
   c_prdct_typ = st_cntrct.c_prd_typ;	

	 if ( (l_rec_main_exists == 1 ) && (l_rec_hstry_exists == 0 ) )
   {

				if( strcmp( st_usr_prfl.c_cln_mtch_accnt , "*" ) == 0 )
				{

						strcpy ( c_user_id, st_usr_prfl.c_user_id);

						if( st_usr_prfl.c_user_id[0] == BPID )
						{

								 if(DEBUG_MSG_LVL_3){
							   fn_userlog(c_ServiceName,"BPID");	}

       /*** Below queries changed to upper case in Ver 3.4 ***/ 

										EXEC SQL  EXECUTE
								    BEGIN
									  OPEN  :cont_cursor FOR
										SELECT  FFP_XCHNG_CD,
														FFP_INDSTK,
														FFP_UNDRLYNG,
														TO_CHAR(FFP_EXPRY_DT,'DD-Mon-YYYY'),
														FFP_EXER_TYP,
                            /** Commented in Ver 2.2 **
														sum (ffp_opnpstn_qty),
														sum (ffp_opnpstn_val),
														sum (ffp_mtm_opn_val),			** 1.8 **
                            **/
														FFP_CLM_MTCH_ACCNT,
                            TO_CHAR(FFP_EXPRY_DT,'YYYYMMDD')        /** Ver 3.2 **/
											FROM  FFP_FO_FUTURES_PSTN,
														CLM_CLNT_MSTR 
											WHERE FFP_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT 
											AND   FFP_UNDRLYNG      LIKE :c_undrlyng
											AND   FFP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
											AND   FFP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                      AND   FFP_XCHNG_CD        = :c_xchng_cd
											AND   CLM_BP_ID           = :c_user_id
											AND
	              /***  (       FFP_BUY_EXCTD_QTY != 0
												OR    FFP_SELL_EXCTD_QTY  != 0
											)  *** Commented in Ver 3.4 ***/
                      (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                        OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                      )
											GROUP BY  FFP_XCHNG_CD,
															  FFP_INDSTK,
															  FFP_UNDRLYNG,
															  FFP_EXPRY_DT,
															  FFP_EXER_TYP,
															  FFP_CLM_MTCH_ACCNT
								/**			ORDER BY  FFP_XCHNG_CD,
																FFP_CLM_MTCH_ACCNT,
																FFP_UNDRLYNG,
																FFP_EXPRY_DT ;															** Commented in Ver 1.9 ***/
			
										UNION ALL																							/*** Ver 1.9 SPAN Portfolio ***/

										SELECT  FCP_XCHNG_CD,
                            FCP_INDSTK,
                            FCP_UNDRLYNG,
                            TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
                            FCP_EXER_TYP,
                            /** Commented in Ver 2.2 **
                            SUM (fcp_opnpstn_qty),
                            SUM (fcp_opnpstn_val),
                            SUM (FCP_MTM_OPN_VAL),
                            **/
                            FCP_CLM_MTCH_ACCNT,
                            TO_CHAR(FCP_EXPRY_DT,'YYYYMMDD')        /** Ver 3.2 **/
                      FROM  FCP_FO_SPN_CNTRCT_PSTN,
                            CLM_CLNT_MSTR
                      WHERE FCP_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
                      AND   FCP_UNDRLYNG      LIKE :c_undrlyng
                      AND   FCP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND   FCP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                      AND   FCP_XCHNG_CD        = :c_xchng_cd
                      AND   CLM_BP_ID           = :c_user_id
               /***   AND   FCP_PRDCT_TYP       = 'F'  Commented in Ver 3.4 ***/
                      AND   FCP_PRDCT_TYP       = :c_fut_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */                      AND
            /***      (       FCP_BUY_EXCTD_QTY != 0
                        OR    FCP_SELL_EXCTD_QTY  != 0
                      )  *** Commented in Ver 3.4 ***/
                      (       FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                        OR    FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/
                      )
                      GROUP BY  FCP_XCHNG_CD,
                                FCP_INDSTK,
                                FCP_UNDRLYNG,
                                FCP_EXPRY_DT,
                                FCP_EXER_TYP,
                                FCP_CLM_MTCH_ACCNT
									UNION ALL                          /* Ver 2.2 SLTP FPlus Portfolio */
                      SELECT FOD_XCHNG_CD,
                             FOD_INDSTK,
                             FOD_UNDRLYNG,
                             TO_CHAR(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                             FOD_EXER_TYP,
                             FOD_CLM_MTCH_ACCNT,
                             TO_CHAR(FOD_EXPRY_DT,'YYYYMMDD')        /** Ver 3.2 **/
                      FROM   FOD_FO_ORDR_DTLS,
                             CLM_CLNT_MSTR
                      WHERE  FOD_CLM_MTCH_ACCNT = clm_mtch_accnt
                      AND    FOD_UNDRLYNG LIKE :c_undrlyng
                      AND    FOD_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND    FOD_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                      AND    FOD_XCHNG_CD =  :c_xchng_cd
                      AND    CLM_BP_ID = :c_user_id
               /***   AND    FOD_PRDCT_TYP = 'U'  Commented in Ver 3.4 ***/
                      AND    FOD_PRDCT_TYP = :c_sltpfp_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */
               /***       AND    FOD_EXEC_QTY != 0  Commented in Ver 3.4 ***/
                      AND    FOD_EXEC_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                      GROUP BY  FOD_XCHNG_CD,
                                FOD_INDSTK,
                                FOD_UNDRLYNG,
                                FOD_EXPRY_DT,
                                FOD_EXER_TYP,
                                FOD_CLM_MTCH_ACCNT
                 /***     ORDER BY  1,
                                2,
                                3,
                                4,
                                9;				*** Commented in ver 2.0 ***/
											/** ORDER BY	1,9,3,4;	*** Added in ver 2.0 Commented in ver 2.2   ***/
											ORDER BY  1,6,3,4; /** ver 2.2 **/		
										END;
										END-EXEC;  


						}
						else
						{


									  EXEC SQL  EXECUTE
                    BEGIN
                    OPEN  :cont_cursor FOR
                    SELECT  FFP_XCHNG_CD,
                            FFP_INDSTK,
                            FFP_UNDRLYNG,
                            TO_CHAR(FFP_EXPRY_DT,'DD-Mon-YYYY'),
                            FFP_EXER_TYP,
                            /** Commented in Ver 2.2 *
                            SUM (ffp_opnpstn_qty),
                            SUM (ffp_opnpstn_val),
														SUM (ffp_mtm_opn_val),      ** 1.8 **
                            **/
                            FFP_CLM_MTCH_ACCNT,
                            TO_CHAR(FFP_EXPRY_DT,'YYYYMMDD')        /*** Ver 3.2 ***/
											FROM  FFP_FO_FUTURES_PSTN,
														UAC_USR_ACCNTS
                      WHERE   FFP_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT 
                      AND     FFP_UNDRLYNG      LIKE :c_undrlyng
                      AND     FFP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND     FFP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                      AND     FFP_XCHNG_CD        = :c_xchng_cd
											AND     UAC_USR_ID = :c_user_id
                      AND
           /***       (       FFP_BUY_EXCTD_QTY != 0
                        OR    FFP_SELL_EXCTD_QTY  != 0
                      )    *** Commented in Ver 3.4 ***/
                      (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                        OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/
                      )
                      GROUP BY  FFP_XCHNG_CD,
                                FFP_INDSTK,
                                FFP_UNDRLYNG,
                                FFP_EXPRY_DT,
                                FFP_EXER_TYP,		
																FFP_CLM_MTCH_ACCNT
                /**      ORDER BY  ffp_xchng_cd,
                                ffp_clm_mtch_accnt,
                                ffp_undrlyng,
                                ffp_expry_dt ;				Commented In Ver 1.9***/
									
									UNION ALL																								/*** Ver 1.9 SPAN Portfolio ***/ 
										 SELECT FCP_XCHNG_CD,
                            FCP_INDSTK,
                            FCP_UNDRLYNG,
                            TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
                            FCP_EXER_TYP,
                             /** Commented in Ver 2.2 *
                            SUM (fcp_opnpstn_qty),
                            SUM (fcp_opnpstn_val),
                            SUM (FCP_MTM_OPN_VAL),
                             **/
                            FCP_CLM_MTCH_ACCNT,
                            TO_CHAR(FCP_EXPRY_DT,'YYYYMMDD')        /** Ver 3.2 **/
                      FROM  FCP_FO_SPN_CNTRCT_PSTN,
                            UAC_USR_ACCNTS
                      WHERE   FCP_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
                      AND     FCP_UNDRLYNG      LIKE :c_undrlyng
                      AND     FCP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND     FCP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                      AND     FCP_XCHNG_CD        = :c_xchng_cd
                      AND     UAC_USR_ID = :c_user_id
                 /***     AND     FCP_PRDCT_TYP     = 'F' Commented in Ver 3.4 ***/ 
                      AND     FCP_PRDCT_TYP     = :c_fut_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */
                      AND
             /***     (       FCP_BUY_EXCTD_QTY != 0
                        OR    FCP_SELL_EXCTD_QTY  != 0
                      )  *** Commented in Ver 3.4 ***/
                      (       FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                        OR    FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/
                      )
                      GROUP BY  FCP_XCHNG_CD,
                                FCP_INDSTK,
                                FCP_UNDRLYNG,
                                FCP_EXPRY_DT,
                                FCP_EXER_TYP,
                                FCP_CLM_MTCH_ACCNT
											UNION ALL              /* Ver 2.2 SLTP FPlus Portfolio */
                   SELECT FOD_XCHNG_CD,
                          FOD_INDSTK,
                          FOD_UNDRLYNG,
                          TO_CHAR(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                          FOD_EXER_TYP,
                          FOD_CLM_MTCH_ACCNT,
                          TO_CHAR(FOD_EXPRY_DT,'YYYYMMDD')        /** Ver 3.2 **/
                  FROM    FOD_FO_ORDR_DTLS,
                          UAC_USR_ACCNTS
                  WHERE   FOD_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
                  AND     FOD_UNDRLYNG LIKE :c_undrlyng
                  AND     FOD_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                  AND     FOD_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                  AND     FOD_XCHNG_CD =  :c_xchng_cd
                  AND     UAC_USR_ID  = :c_user_id
              /***    AND     FOD_PRDCT_TYP = 'U'  Commented in Ver 3.4 ***/
                  AND     FOD_PRDCT_TYP = :c_sltpfp_prd_typ /*** Ver 3.4 Bind variable used instead of hard coded value ***/               /***    AND     FOD_EXEC_QTY != 0  Commented in Ver 3.4 ***/
                  AND     FOD_EXEC_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                  GROUP BY  FOD_XCHNG_CD,
                            FOD_INDSTK,
                            FOD_UNDRLYNG,
                            FOD_EXPRY_DT,
                            FOD_EXER_TYP,
                            FOD_CLM_MTCH_ACCNT
                 /***     ORDER BY  1,
                                2,
                                3,
                                4;				** Commented in ver 2.0 ***/
										/**	ORDER BY 1,9,3,4;	*** Added in ver 2.0  Commented in ver 2.2   ***/ 
                      ORDER BY  1,6,3,4; /** ver 2.2 **/
                    END;
                    END-EXEC;
																

						}


				}
				else
				{

							strcpy ( c_cln_mtch_accnt, st_usr_prfl.c_cln_mtch_accnt);

								EXEC SQL  EXECUTE
                    BEGIN
                    OPEN  :cont_cursor FOR
                    SELECT  FFP_XCHNG_CD,
                            FFP_INDSTK,
                            FFP_UNDRLYNG,
                            TO_CHAR(FFP_EXPRY_DT,'DD-Mon-YYYY'),
                            FFP_EXER_TYP,
                            /** Commented in Ver 2.2 *
                            SUM (ffp_opnpstn_qty),
                            SUM (ffp_opnpstn_val),
														SUM (ffp_mtm_opn_val),      ** 1.8 **
                            **/
                            FFP_CLM_MTCH_ACCNT,
                            TO_CHAR(FFP_EXPRY_DT, 'YYYYMMDD')     /*** Added in 3.2 ***/
                      FROM  FFP_FO_FUTURES_PSTN
                      WHERE   FFP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt 
                      AND     FFP_UNDRLYNG      LIKE :c_undrlyng
                      AND     FFP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND     FFP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
											AND     FFP_XCHNG_CD        = :c_xchng_cd
                      AND
            /***      (       FFP_BUY_EXCTD_QTY != 0
                        OR    FFP_SELL_EXCTD_QTY  != 0
                      )  *** Commented in Ver 3.4 ***/
                      (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                        OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                      )
                      GROUP BY  FFP_XCHNG_CD,
                                FFP_INDSTK,
                                FFP_UNDRLYNG,
                                FFP_EXPRY_DT,
                                FFP_EXER_TYP,
                                FFP_CLM_MTCH_ACCNT
										/**	ORDER BY  ffp_xchng_cd,
                                ffp_clm_mtch_accnt,
                                ffp_undrlyng,
                                ffp_expry_dt ;						Commented in Ver 1.9***/
										UNION ALL																		/*** Ver 1.9 SPAN Portfolio ***/
										  SELECT FCP_XCHNG_CD,
                             FCP_INDSTK,
                             FCP_UNDRLYNG,
                             TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
                             FCP_EXER_TYP,
                             /** Commented in Ver 2.2 *
                             SUM (fcp_opnpstn_qty),
                             SUM (fcp_opnpstn_val),
                             SUM (FCP_MTM_OPN_VAL),
                             **/
                             FCP_CLM_MTCH_ACCNT,
                              TO_CHAR(FCP_EXPRY_DT, 'YYYYMMDD')     /*** Added in 3.2 ***/
                      FROM   FCP_FO_SPN_CNTRCT_PSTN
                      WHERE   FCP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
                      AND     FCP_UNDRLYNG      LIKE :c_undrlyng
                      AND     FCP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND     FCP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                      AND     FCP_XCHNG_CD        = :c_xchng_cd
                /***      AND   	FCP_PRDCT_TYP       = 'F'  Commented in Ver 3.4 ***/
                      AND     FCP_PRDCT_TYP       = :c_fut_prd_typ /*** Ver 3.4 Bind variable used instead of hard coded value ***/ 
                      AND
               /***   (       FCP_BUY_EXCTD_QTY != 0
                        OR    FCP_SELL_EXCTD_QTY  != 0
                      )  *** Commented in Ver 3.4 ***/
                      (       FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                        OR    FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                      )
                      GROUP BY  FCP_XCHNG_CD,
                                FCP_INDSTK,
                                FCP_UNDRLYNG,
                                FCP_EXPRY_DT,
                                FCP_EXER_TYP,
                                FCP_CLM_MTCH_ACCNT
											UNION ALL              /* Ver 2.2 SLTP FPlus Portfolio */
                    SELECT FOD_XCHNG_CD,
                           FOD_INDSTK,
                           FOD_UNDRLYNG,
                           TO_CHAR(FOD_EXPRY_DT,'DD-Mon-YYYY') ,
                           FOD_EXER_TYP,
                           FOD_CLM_MTCH_ACCNT,
                           TO_CHAR(FOD_EXPRY_DT, 'YYYYMMDD')     /*** Added in 3.2 ***/
                    FROM   FOD_FO_ORDR_DTLS
                    WHERE  FOD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
                    AND    FOD_UNDRLYNG LIKE :c_undrlyng
                    AND    FOD_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                    AND    FOD_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                    AND    FOD_XCHNG_CD =  :c_xchng_cd
                  /***  AND    FOD_PRDCT_TYP = 'U'   Commented in Ver 3.4 ***/
                    AND    FOD_PRDCT_TYP = :c_sltpfp_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */                  /***      AND    FOD_EXEC_QTY != 0   Commented in Ver 3.4 ***/
                    AND    FOD_EXEC_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                    GROUP BY  FOD_XCHNG_CD,
                              FOD_INDSTK,
                              FOD_UNDRLYNG,
                              FOD_EXPRY_DT,
                              FOD_EXER_TYP,
                              FOD_CLM_MTCH_ACCNT
                   /***   ORDER BY  1,
                                2,
                                3,
                                4 ;						*** Commented in Ver 2.0 ***/
									/***		ORDER BY 1,9,3,4;			*** Added in ver 2.0	Commented in ver 2.2		***/	
									        ORDER BY 1,6,3,4;  /* Added in ver 2.2 */

                    END;
                    END-EXEC;




				}


	}
	else if ( (l_rec_main_exists == 0 ) && (l_rec_hstry_exists == 1 ) )
  {
				if( strcmp( st_usr_prfl.c_cln_mtch_accnt , "*" ) == 0 )
        {

						strcpy ( c_user_id, st_usr_prfl.c_user_id);

            if( st_usr_prfl.c_user_id[0] == BPID )
            {

										if(DEBUG_MSG_LVL_3){
                    fn_userlog(c_ServiceName,"BPID");  }

     /*** Below queries changed to upper case in Ver 3.4 ***/

                    EXEC SQL  EXECUTE
                    BEGIN
                    OPEN  :cont_cursor FOR
                    SELECT  FFP_XCHNG_CD,
                            FFP_INDSTK,
                            FFP_UNDRLYNG,
                            TO_CHAR(FFP_EXPRY_DT,'DD-Mon-YYYY'),
                            FFP_EXER_TYP,
                            /** Commented in Ver 2.2 *
                            SUM (ffp_opnpstn_qty),
                            SUM (ffp_opnpstn_val),
														SUM (ffp_mtm_opn_val),      ** 1.8 **
                            **/
                            FFP_CLM_MTCH_ACCNT,
                            TO_CHAR(FFP_EXPRY_DT,'YYYYMMDD')      /** Ver 3.2 **/
                      FROM  FFP_FO_FUTURES_PSTN_HSTRY,
													  CLM_CLNT_MSTR
                      WHERE FFP_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
                      AND   FFP_UNDRLYNG      LIKE :c_undrlyng
                      AND   FFP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND   FFP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
											AND   FFP_XCHNG_CD        = :c_xchng_cd
											AND		CLM_BP_ID = :c_user_id
                      AND
                /***  (       FFP_BUY_EXCTD_QTY != 0
                        OR    FFP_SELL_EXCTD_QTY  != 0
                      )  *** Commented in Ver 3.4 ***/
                      (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                        OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                      )
											GROUP BY  FFP_XCHNG_CD,
                                FFP_INDSTK,
                                FFP_UNDRLYNG,
                                FFP_EXPRY_DT,
                                FFP_EXER_TYP,
                                FFP_CLM_MTCH_ACCNT
                 /***     ORDER BY  ffp_xchng_cd,
                                ffp_clm_mtch_accnt,
                                ffp_undrlyng,
                                ffp_expry_dt ;		** Commented In Ver 1.9 ****/
										UNION ALL																													/*** Ver 1.9 SPAN Portfolio ***/
											SELECT FCP_XCHNG_CD,
                            FCP_INDSTK,
                            FCP_UNDRLYNG,
                            TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
                            FCP_EXER_TYP,
                            /** Commented in Ver 2.2 *
                            SUM (fcp_opnpstn_qty),
                            SUM (fcp_opnpstn_val),
                            SUM (FCP_MTM_OPN_VAL),
                            ***/
                            FCP_CLM_MTCH_ACCNT,
                            TO_CHAR(FCP_EXPRY_DT,'YYYYMMDD')      /*** Ver 3.2 ***/
                      FROM  FCP_FO_SPN_CNTRCT_PSTN_HSTRY,
                            CLM_CLNT_MSTR
                      WHERE FCP_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
                      AND   FCP_UNDRLYNG      LIKE :c_undrlyng
                      AND   FCP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND   FCP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                      AND   FCP_XCHNG_CD        = :c_xchng_cd
                      AND   CLM_BP_ID = :c_user_id
                /***      AND   FCP_PRDCT_TYP      = 'F' Commented in Ver 3.4 ***/ 
                      AND   FCP_PRDCT_TYP      = :c_fut_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */
                      AND
                /***  (       FCP_BUY_EXCTD_QTY != 0
                        OR    FCP_SELL_EXCTD_QTY  != 0
                      )  Commented in Ver 3.4 ***/
                      (       FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                        OR    FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/
                      )
                      GROUP BY  FCP_XCHNG_CD,
                                FCP_INDSTK,
                                FCP_UNDRLYNG,
                                FCP_EXPRY_DT,
                                FCP_EXER_TYP,
                                FCP_CLM_MTCH_ACCNT
										UNION ALL              /* Ver 2.2 SLTP FPlus Portfolio */
                      SELECT FOD_XCHNG_CD,
                             FOD_INDSTK,
                             FOD_UNDRLYNG,
                             TO_CHAR(FOD_EXPRY_DT,'DD-Mon-YYYY') ,
                             FOD_EXER_TYP,
                             FOD_CLM_MTCH_ACCNT,
                             TO_CHAR(FOD_EXPRY_DT,'YYYYMMDD')     /*** Ver 3.2 ***/
                      FROM   FOD_FO_ORDR_DTLS_HSTRY,
                             CLM_CLNT_MSTR
                      WHERE  FOD_CLM_MTCH_ACCNT = clm_mtch_accnt
                      AND    FOD_UNDRLYNG LIKE :c_undrlyng
                      AND    FOD_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND    FOD_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                      AND    FOD_XCHNG_CD =  :c_xchng_cd
                      AND    CLM_BP_ID = :c_user_id
                  /***    AND    FOD_PRDCT_TYP = 'U'  Commented in Ver 3.4 ***/
                      AND    FOD_PRDCT_TYP = :c_sltpfp_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */
                  /***    AND    FOD_EXEC_QTY != 0   Commented in Ver 3.4 ***/
                      AND    FOD_EXEC_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                      GROUP BY  FOD_XCHNG_CD,
                                FOD_INDSTK,
                                FOD_UNDRLYNG,
                                FOD_EXPRY_DT,
                                FOD_EXER_TYP,
                                FOD_CLM_MTCH_ACCNT
                     /* ORDER BY  1,
                                9,
                                3,
                                4;	** Commented in Ver 2.2 **/
                        ORDER BY 1,6,3,4;  /* Added in ver 2.2 */
                    END;
                    END-EXEC;


						}
						else
            {

           /*** Below queries changed to upper case in Ver 3.4 ***/

										if(DEBUG_MSG_LVL_3){
                    fn_userlog(c_ServiceName,"NONBPID");  }

                    EXEC SQL  EXECUTE
                    BEGIN
                    OPEN  :cont_cursor FOR
                    SELECT  FFP_XCHNG_CD,
                            FFP_INDSTK,
                            FFP_UNDRLYNG,
                            TO_CHAR(FFP_EXPRY_DT,'DD-Mon-YYYY'),
                            FFP_EXER_TYP,
                            /** Commented in Ver 2.2 *
                            SUM (ffp_opnpstn_qty),
                            SUM (ffp_opnpstn_val),
														SUM (ffp_mtm_opn_val),      ** 1.8 **
                            **/
                            FFP_CLM_MTCH_ACCNT,
                            TO_CHAR(FFP_EXPRY_DT,'YYYYMMDD')    /*** Ver 3.2 ***/
                      FROM  FFP_FO_FUTURES_PSTN_HSTRY,
														UAC_USR_ACCNTS
                      WHERE   FFP_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT 
                      AND     FFP_UNDRLYNG      LIKE :c_undrlyng
                      AND     FFP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND     FFP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
											AND     FFP_XCHNG_CD        = :c_xchng_cd
											AND			UAC_USR_ID = :c_user_id

                      AND
             /***     (       FFP_BUY_EXCTD_QTY != 0
                        OR    FFP_SELL_EXCTD_QTY  != 0
                      )  ***  Commented in Ver 3.4 ***/
                      (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                        OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                      ) 
                      GROUP BY  FFP_XCHNG_CD,
                                FFP_INDSTK,
                                FFP_UNDRLYNG,
                                FFP_EXPRY_DT,
                                FFP_EXER_TYP,
                                FFP_CLM_MTCH_ACCNT
                    /**  ORDER BY  ffp_xchng_cd,
                                ffp_clm_mtch_accnt,
                                ffp_undrlyng,						
																ffp_expry_dt 	;									** Commented In Ver 1.9 ***/
										UNION ALL																		/*** Ver 1.9 SPAN Portfolio ***/
										 SELECT FCP_XCHNG_CD,
                            FCP_INDSTK,
                            FCP_UNDRLYNG,
                            TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
                            FCP_EXER_TYP,
                            /** Commented in Ver 2.2 *
                            SUM (fcp_opnpstn_qty),
                            SUM (fcp_opnpstn_val),
                            SUM (FCP_MTM_OPN_VAL),
                            **/
                            FCP_CLM_MTCH_ACCNT,
                            TO_CHAR(FCP_EXPRY_DT,'YYYYMMDD')      /** Ver 3.2 **/
                      FROM  FCP_FO_SPN_CNTRCT_PSTN_HSTRY,
                            UAC_USR_ACCNTS
                      WHERE   FCP_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
                      AND     FCP_UNDRLYNG      LIKE :c_undrlyng
                      AND     FCP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND     FCP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                      AND     fcp_xchng_cd        = :c_xchng_cd
                      AND     UAC_USR_ID = :c_user_id
                   /***   AND   FCP_PRDCT_TYP      = 'F' Commented in Ver 3.4 ***/
                      AND   FCP_PRDCT_TYP      = :c_fut_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */                       AND
              /***    (       FCP_BUY_EXCTD_QTY != 0
                        OR    FCP_SELL_EXCTD_QTY  != 0
                      )  ***  Commented in Ver 3.4 ***/
                      (       FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                        OR    FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                      )
                      GROUP BY  FCP_XCHNG_CD,
                                FCP_INDSTK,
                                FCP_UNDRLYNG,
                                FCP_EXPRY_DT,
                                FCP_EXER_TYP,
                                FCP_CLM_MTCH_ACCNT
											UNION ALL              /* Ver 2.2 SLTP FPlus Portfolio */
                    SELECT FOD_XCHNG_CD,
                           FOD_INDSTK,
                           FOD_UNDRLYNG,
                           TO_CHAR(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                           FOD_EXER_TYP,
                           FOD_CLM_MTCH_ACCNT,
                           TO_CHAR(FOD_EXPRY_DT,'YYYYMMDD')             /*** Ver 3.2 ***/
                    FROM    FOD_FO_ORDR_DTLS_HSTRY,
                            UAC_USR_ACCNTS
                    WHERE   FOD_CLM_MTCH_ACCNT =  UAC_CLM_MTCH_ACCNT
                    AND     FOD_UNDRLYNG LIKE :c_undrlyng
                    AND     FOD_EXPRY_DT >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                    AND     FOD_EXPRY_DT <= to_date ( :c_to_dt,'dd-mon-yyyy')
                    AND     FOD_XCHNG_CD =  :c_xchng_cd
                    AND     UAC_USR_ID = :c_user_id
                /***    AND     FOD_PRDCT_TYP = 'U'   Commented in Ver 3.4 ***/
                    AND     FOD_PRDCT_TYP = :c_sltpfp_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */
                /***    AND     FOD_EXEC_QTY != 0   Commented in Ver 3.4 ***/
                    AND     FOD_EXEC_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                    GROUP BY  FOD_XCHNG_CD,
                                FOD_INDSTK,
                                FOD_UNDRLYNG,
                                FOD_EXPRY_DT,
                                FOD_EXER_TYP,
                                FOD_CLM_MTCH_ACCNT
                     /* ORDER BY  1,
                                9,
                                3,
                                4;  ** Commented in Ver 2.2 **/
                      ORDER BY 1,6,3,4;  /* Added in ver 2.2 */
                    END;
                    END-EXEC;


            }


				}
				else
				{

									if(DEBUG_MSG_LVL_3){
                  fn_userlog(c_ServiceName,"NONBPID");  }


									strcpy ( c_cln_mtch_accnt, st_usr_prfl.c_cln_mtch_accnt);
						
         /*** Below queries changed to upper case in Ver 3.4 ***/
	
										EXEC SQL  EXECUTE
                    BEGIN
                    OPEN  :cont_cursor FOR
                    SELECT  FFP_XCHNG_CD,
                            FFP_INDSTK,
                            FFP_UNDRLYNG,
                            TO_CHAR(FFP_EXPRY_DT,'DD-Mon-YYYY'),
                            FFP_EXER_TYP,
                            /** Commented in Ver 2.2 *
                            SUM (ffp_opnpstn_qty),
                            SUM (ffp_opnpstn_val),
														SUM (ffp_mtm_opn_val),      ** 1.8 **
                            **/
                            FFP_CLM_MTCH_ACCNT,
                            TO_CHAR(FFP_EXPRY_DT, 'YYYYMMDD')     /*** Added in 3.2 ***/
                      FROM  FFP_FO_FUTURES_PSTN_HSTRY
                      WHERE   FFP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
                      AND     FFP_UNDRLYNG      LIKE :c_undrlyng
                      AND     FFP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND     FFP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
											AND     FFP_XCHNG_CD        = :c_xchng_cd
                      AND
             /***     (       FFP_BUY_EXCTD_QTY != 0
                        OR    FFP_SELL_EXCTD_QTY  != 0
                      )  *** Commented in Ver 3.4 ***/
                      (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                        OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                      )
                      GROUP BY  FFP_XCHNG_CD,
                                FFP_INDSTK,
                                FFP_UNDRLYNG,
                                FFP_EXPRY_DT,
                                FFP_EXER_TYP,
                                FFP_CLM_MTCH_ACCNT
                     /** ORDER BY  ffp_xchng_cd,
                                ffp_clm_mtch_accnt,
                                ffp_undrlyng,
                                ffp_expry_dt ;								Commented In Ver 1.9 *****/
										UNION ALL																	/*** Ver 1.9 SPAN Portfolio ***/
										 SELECT FCP_XCHNG_CD,
                            FCP_INDSTK,
                            FCP_UNDRLYNG,
                            TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
                            FCP_EXER_TYP,
                            /** Commented in Ver 2.2 *
                            SUM (fcp_opnpstn_qty),
                            SUM (fcp_opnpstn_val),
                            SUM (FCP_MTM_OPN_VAL),
                            **/
                            FCP_CLM_MTCH_ACCNT,
                            TO_CHAR(FCP_EXPRY_DT, 'YYYYMMDD')     /*** Added in 3.2 ***/
                      FROM  FCP_FO_SPN_CNTRCT_PSTN_HSTRY
                      WHERE   FCP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
                      AND     FCP_UNDRLYNG      LIKE :c_undrlyng
                      AND     FCP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND     FCP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                      AND     FCP_XCHNG_CD        = :c_xchng_cd
                  /***    AND   FCP_PRDCT_TYP         = 'F'  Commented in Ver 3.4 ***/
                      AND   FCP_PRDCT_TYP       = :c_fut_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */                      AND
              /***    (       FCP_BUY_EXCTD_QTY != 0
                        OR    FCP_SELL_EXCTD_QTY  != 0
                      )  ***  Commented in Ver 3.4 ***/
                      (       FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                        OR    FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                      )
                      GROUP BY  FCP_XCHNG_CD,
                                FCP_INDSTK,
                                FCP_UNDRLYNG,
                                FCP_EXPRY_DT,
                                FCP_EXER_TYP,
                                FCP_CLM_MTCH_ACCNT
										UNION ALL              /* Ver 2.2 SLTP FPlus Portfolio */
                    SELECT FOD_XCHNG_CD,
                           FOD_INDSTK,
                           FOD_UNDRLYNG,
                           TO_CHAR(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                           FOD_EXER_TYP,
                           FOD_CLM_MTCH_ACCNT,
                           TO_CHAR(FOD_EXPRY_DT, 'YYYYMMDD')     /*** Added in 3.2 ***/
                    FROM    FOD_FO_ORDR_DTLS_HSTRY
                    WHERE   FOD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
                    AND     FOD_UNDRLYNG LIKE :c_undrlyng
                    AND     FOD_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                    AND     FOD_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                    AND     FOD_XCHNG_CD =  :c_xchng_cd
                /***    AND     FOD_PRDCT_TYP = 'U'   Commented in Ver 3.4 ***/
                    AND     FOD_PRDCT_TYP = :c_sltpfp_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */
                /***    AND     FOD_EXEC_QTY != 0  *** Commented in Ver 3.4 ***/
                    AND     FOD_EXEC_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                    GROUP BY  FOD_XCHNG_CD,
                                FOD_INDSTK,
                                FOD_UNDRLYNG,
                                FOD_EXPRY_DT,
                                FOD_EXER_TYP,
                                FOD_CLM_MTCH_ACCNT	
                   /***    ORDER BY  1,
                                2,
                                3,
                                4;    **** Commented in ver 2.0 ***/
									/*	ORDER BY	1,9,3,4;*** Added in ver 2.0	Commented in ver 2.2	***/	
                    ORDER BY 1,6,3,4;  /* Added in ver 2.2 */
                    END;
                    END-EXEC;

				}

				

	}
	else if ( (l_rec_main_exists == 1 ) && (l_rec_hstry_exists == 1 ) )
  {
				if( strcmp( st_usr_prfl.c_cln_mtch_accnt , "*" ) == 0 )
        {


						strcpy ( c_user_id, st_usr_prfl.c_user_id);

            if( st_usr_prfl.c_user_id[0] == BPID )
            {

										if(DEBUG_MSG_LVL_3){
                    fn_userlog(c_ServiceName,"BPID");  }

              /*** Below queries changed to upper case in Ver 3.4 ***/ 

                    EXEC SQL  EXECUTE
                    BEGIN
                    OPEN  :cont_cursor FOR
                    SELECT  FFP_XCHNG_CD,
                            FFP_INDSTK,
                            FFP_UNDRLYNG,
                            TO_CHAR(FFP_EXPRY_DT,'DD-Mon-YYYY'),
                            FFP_EXER_TYP,
                            /** Commented in Ver 2.2 *
                            SUM (ffp_opnpstn_qty),
                            SUM (ffp_opnpstn_val),
														SUM (ffp_mtm_opn_val),      ** 1.8 **
                            ***/
                            FFP_CLM_MTCH_ACCNT,
                            TO_CHAR(FFP_EXPRY_DT,'YYYYMMDD')        /*** Ver 3.2 ***/
                      FROM  FFP_FO_FUTURES_PSTN,
														CLM_CLNT_MSTR
                      WHERE FFP_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
                      AND   FFP_UNDRLYNG      LIKE :c_undrlyng
                      AND   FFP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND   FFP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
											AND   FFP_XCHNG_CD        = :c_xchng_cd
											AND		CLM_BP_ID = :c_user_id
                      AND
                /***  (       FFP_BUY_EXCTD_QTY != 0
                        OR    FFP_SELL_EXCTD_QTY  != 0
                      )  *** Commented in Ver 3.4 ***/
                      (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                        OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                      ) 
                      GROUP BY  FFP_XCHNG_CD,
                                FFP_INDSTK,
                                FFP_UNDRLYNG,
                                FFP_EXPRY_DT,
																FFP_EXER_TYP,
                                FFP_CLM_MTCH_ACCNT
							UNION ALL
										SELECT  FFP_XCHNG_CD,
                            FFP_INDSTK,
                            FFP_UNDRLYNG,
                            TO_CHAR(FFP_EXPRY_DT,'DD-Mon-YYYY'),
                            FFP_EXER_TYP,
                            /** Commented in Ver 2.2 *
                            SUM (ffp_opnpstn_qty),
                            SUM (ffp_opnpstn_val),
														SUM (ffp_mtm_opn_val),      ** 1.8 **
                            ***/
                            FFP_CLM_MTCH_ACCNT,
                            TO_CHAR(FFP_EXPRY_DT,'YYYYMMDD')      /*** Ver 3.2 ****/
                      FROM  FFP_FO_FUTURES_PSTN_HSTRY,
														CLM_CLNT_MSTR
                      WHERE FFP_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
                      AND   FFP_UNDRLYNG      LIKE :c_undrlyng
                      AND   FFP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND   FFP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
											AND   FFP_XCHNG_CD        = :c_xchng_cd
											AND		CLM_BP_ID = :c_user_id
                      AND
              /***    (       FFP_BUY_EXCTD_QTY != 0
                        OR    FFP_SELL_EXCTD_QTY  != 0
                      )   *** Commented in Ver 3.4 ***/
                      (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                        OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/
                      )
                      GROUP BY  FFP_XCHNG_CD,
                                FFP_INDSTK,
                                FFP_UNDRLYNG,
                                FFP_EXPRY_DT,
                                FFP_EXER_TYP,
                                FFP_CLM_MTCH_ACCNT
                    /**  ORDER BY  1, 2, 4, 5 , 7;						Commented In Ver 1.9 ***/
							UNION ALL																				/*** Ver 1.9 SPAN Portfolio ***/
										 SELECT FCP_XCHNG_CD,
                            FCP_INDSTK,
                            FCP_UNDRLYNG,
                            TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
                            FCP_EXER_TYP,
                            /** Commented in Ver 2.2 *
                            SUM (fcp_opnpstn_qty),
                            SUM (fcp_opnpstn_val),
                            SUM (FCP_MTM_OPN_VAL),
                            ***/
                            FCP_CLM_MTCH_ACCNT,
                            TO_CHAR(FCP_EXPRY_DT,'YYYYMMDD')      /*** Ver 3.2 ****/
                      FROM  FCP_FO_SPN_CNTRCT_PSTN,
                            CLM_CLNT_MSTR
                      WHERE FCP_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
                      AND   FCP_UNDRLYNG      LIKE :c_undrlyng
                      AND   FCP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND   FCP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                      AND   FCP_XCHNG_CD        = :c_xchng_cd
                      AND   CLM_BP_ID = :c_user_id
                  /***    AND   FCP_PRDCT_TYP       = 'F'  Commented in Ver 3.4 ***/
                      AND   FCP_PRDCT_TYP       = :c_fut_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */                      AND
             /***     (       FCP_BUY_EXCTD_QTY != 0
                        OR    FCP_SELL_EXCTD_QTY  != 0
                      )  *** Commented in Ver 3.4 ***/
                      (       FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                        OR    FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                      )
                      GROUP BY  FCP_XCHNG_CD,
                                FCP_INDSTK,
                                FCP_UNDRLYNG,
                                FCP_EXPRY_DT,
                                FCP_EXER_TYP,
                                FCP_CLM_MTCH_ACCNT
							UNION ALL																							/*** Ver 1.9 SPAN Portfolio ***/
										 SELECT FCP_XCHNG_CD,
                            FCP_INDSTK,
                            FCP_UNDRLYNG,
                            TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
                            FCP_EXER_TYP,
                            /** Commented in Ver 2.2 *
                            SUM (fcp_opnpstn_qty),
                            SUM (fcp_opnpstn_val),
                            SUM (FCP_MTM_OPN_VAL),
                            ***/
                            FCP_CLM_MTCH_ACCNT,
                            TO_CHAR(FCP_EXPRY_DT,'YYYYMMDD')      /*** Ver 3.2 ****/
                      FROM  FCP_FO_SPN_CNTRCT_PSTN_HSTRY,
                            CLM_CLNT_MSTR
                      WHERE FCP_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
                      AND   FCP_UNDRLYNG      LIKE :c_undrlyng
                      AND   FCP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND   FCP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                      AND   FCP_XCHNG_CD        = :c_xchng_cd
                      AND   CLM_BP_ID = :c_user_id
                  /***     AND   FCP_PRDCT_TYP      = 'F'  Commented in Ver 3.4 ***/
                      AND   FCP_PRDCT_TYP      = :c_fut_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */ 
                      AND
                /***  (       FCP_BUY_EXCTD_QTY != 0
                        OR    FCP_SELL_EXCTD_QTY  != 0
                      )  *** Commented in Ver 3.4 ***/
                      (       FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                        OR    FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                      )
                      GROUP BY  FCP_XCHNG_CD,
                                FCP_INDSTK,
                                FCP_UNDRLYNG,
                                FCP_EXPRY_DT,
                                FCP_EXER_TYP,
                                FCP_CLM_MTCH_ACCNT
							UNION ALL                           /* Ver 2.2 SLTP FPlus Portfolio */
                    SELECT FOD_XCHNG_CD,
                           FOD_INDSTK,
                           FOD_UNDRLYNG,
                           TO_CHAR(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                           FOD_EXER_TYP,
                           FOD_CLM_MTCH_ACCNT,
                           TO_CHAR(FOD_EXPRY_DT,'YYYYMMDD')      /*** Ver 3.2 ****/
                    FROM   FOD_FO_ORDR_DTLS,
                           CLM_CLNT_MSTR
                    WHERE   FOD_CLM_MTCH_ACCNT = clm_mtch_accnt
                    AND     FOD_UNDRLYNG LIKE :c_undrlyng
                    AND     FOD_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                    AND     FOD_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                    AND     FOD_XCHNG_CD =  :c_xchng_cd
                    AND     CLM_BP_ID = :c_user_id
                 /***   AND     FOD_PRDCT_TYP = 'U'  Commented in Ver 3.4 ***/
                    AND     FOD_PRDCT_TYP = :c_sltpfp_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */
                 /***   AND     FOD_EXEC_QTY != 0   Commented in Ver 3.4 ***/
                    AND     FOD_EXEC_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                    GROUP BY  FOD_XCHNG_CD,
                              FOD_INDSTK,
                              FOD_UNDRLYNG,
                              FOD_EXPRY_DT,
                              FOD_EXER_TYP,
                              FOD_CLM_MTCH_ACCNT
                    UNION ALL
                    SELECT  FOD_XCHNG_CD,
                            FOD_INDSTK,
                            FOD_UNDRLYNG,
                            TO_CHAR(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                            FOD_EXER_TYP,
                            FOD_CLM_MTCH_ACCNT,
                            TO_CHAR(FOD_EXPRY_DT,'YYYYMMDD')      /*** Ver 3.2 ****/
                    FROM    FOD_FO_ORDR_DTLS_HSTRY,
                            CLM_CLNT_MSTR
                    WHERE   FOD_CLM_MTCH_ACCNT = clm_mtch_accnt
                    AND     FOD_UNDRLYNG LIKE :c_undrlyng
                    AND     FOD_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                    AND     FOD_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                    AND     FOD_XCHNG_CD =  :c_xchng_cd
                    AND     CLM_BP_ID = :c_user_id
               /***     AND     FOD_PRDCT_TYP = 'U'   Commented in Ver 3.4 ***/
                    AND     FOD_PRDCT_TYP = :c_sltpfp_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */ 
               /*** AND     FOD_EXEC_QTY != 0  Commented in Ver 3.4 ***/
                    AND     FOD_EXEC_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                    GROUP BY  FOD_XCHNG_CD,
                              FOD_INDSTK,
                              FOD_UNDRLYNG,
                              FOD_EXPRY_DT,
                              FOD_EXER_TYP,
                              FOD_CLM_MTCH_ACCNT
               /***       ORDER BY  1, 2, 4, 5, 7;			Commented in ver 2.0    ***/
							 /***				ORDER BY	1,9,3,4;					*** Added in ver 2.0 Commented in ver 2.2	***/
                    ORDER BY 1,6,3,4;  /* Added in ver 2.2 */						
											
                    END;
                    END-EXEC;


            }
            else
						{

										if(DEBUG_MSG_LVL_3){
                    fn_userlog(c_ServiceName,"NONBPID");  }

               /*** Below queries changed to upper case in Ver 3.4 ***/

                    EXEC SQL  EXECUTE
                    BEGIN
                    OPEN  :cont_cursor FOR
                    SELECT  FFP_XCHNG_CD,
                            FFP_INDSTK,
                            FFP_UNDRLYNG,
                            TO_CHAR(FFP_EXPRY_DT,'DD-Mon-YYYY'),
                            FFP_EXER_TYP,
                            /** Commented in Ver 2.2 **
                            SUM (ffp_opnpstn_qty),
                            SUM (ffp_opnpstn_val),
														SUM (ffp_mtm_opn_val),      ** 1.8 **
                            **/
                            FFP_CLM_MTCH_ACCNT,
                            TO_CHAR(FFP_EXPRY_DT,'YYYYMMDD')          /*** Ver 3.2 ***/
                      FROM  FFP_FO_FUTURES_PSTN,
														UAC_USR_ACCNTS
                      WHERE   FFP_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT 
                      AND     FFP_UNDRLYNG      LIKE :c_undrlyng
                      AND     FFP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND     FFP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
											AND     FFP_XCHNG_CD        = :c_xchng_cd
											AND			UAC_USR_ID = :c_user_id
                      AND
           /***       (       FFP_BUY_EXCTD_QTY != 0
                        OR    FFP_SELL_EXCTD_QTY  != 0
                      )  ***   Commented in Ver 3.4 ***/
                      (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                        OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                      )
                      GROUP BY  FFP_XCHNG_CD,
                                FFP_INDSTK,
                                FFP_UNDRLYNG,
                                FFP_EXPRY_DT,
                                FFP_EXER_TYP,
                                FFP_CLM_MTCH_ACCNT
								UNION ALL
										SELECT  FFP_XCHNG_CD,
                            FFP_INDSTK,
                            FFP_UNDRLYNG,
                            TO_CHAR(FFP_EXPRY_DT,'DD-Mon-YYYY'),
                            FFP_EXER_TYP,
                            /** Commented in Ver 2.2 **
                            SUM (ffp_opnpstn_qty),
                            SUM (ffp_opnpstn_val),
														SUM (ffp_mtm_opn_val),      ** 1.8 **
                            **/
                            FFP_CLM_MTCH_ACCNT,
                            TO_CHAR(FFP_EXPRY_DT,'YYYYMMDD')          /*** Ver 3.2 ***/
                      FROM  FFP_FO_FUTURES_PSTN_HSTRY,
														UAC_USR_ACCNTS
                      WHERE   FFP_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT 
                      AND     FFP_UNDRLYNG      LIKE :c_undrlyng
                      AND     FFP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND     FFP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
											AND     FFP_XCHNG_CD        = :c_xchng_cd
											AND			UAC_USR_ID = :c_user_id
                      AND
              /***    (       FFP_BUY_EXCTD_QTY != 0
                        OR    FFP_SELL_EXCTD_QTY  != 0
                      )  *** Commented in Ver 3.4 ***/
                      (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                        OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                      )
                      GROUP BY  FFP_XCHNG_CD,
                                FFP_INDSTK,
                                FFP_UNDRLYNG,
                                FFP_EXPRY_DT,
                                FFP_EXER_TYP,
                                FFP_CLM_MTCH_ACCNT
									/***		ORDER BY  1, 2, 4, 5 , 7;		** Commented In Ver 1.9 ***/
						UNION ALL			        										/*** Ver 1.9 SPAN Portfolio ***/
											 SELECT FCP_XCHNG_CD,
                            FCP_INDSTK,
                            FCP_UNDRLYNG,
                            TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
                            FCP_EXER_TYP,
                            /** Commented in Ver 2.2 **														
                            SUM (fcp_opnpstn_qty),
                            SUM (fcp_opnpstn_val),
                            SUM (FCP_MTM_OPN_VAL),
                            **/
                            FCP_CLM_MTCH_ACCNT,
                            TO_CHAR(FCP_EXPRY_DT,'YYYYMMDD')          /*** Ver 3.2 ***/
                      FROM  FCP_FO_SPN_CNTRCT_PSTN,
                            UAC_USR_ACCNTS
                      WHERE   FCP_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
                      AND     FCP_UNDRLYNG      LIKE :c_undrlyng
                      AND     FCP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND     FCP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                      AND     FCP_XCHNG_CD        = :c_xchng_cd
                      AND     UAC_USR_ID = :c_user_id
                 /***       AND   FCP_PRDCT_TYP      = 'F' Commented in Ver 3.4 ***/
                      AND   FCP_PRDCT_TYP      = :c_fut_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */ 
                      AND
                /***  (       FCP_BUY_EXCTD_QTY != 0
                        OR    FCP_SELL_EXCTD_QTY  != 0
                      )  *** Commented in Ver 3.4 ***/
                      (       FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                        OR    FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                      )
                      GROUP BY  FCP_XCHNG_CD,
                                FCP_INDSTK,
                                FCP_UNDRLYNG,
                                FCP_EXPRY_DT,
                                FCP_EXER_TYP,
                                FCP_CLM_MTCH_ACCNT
						UNION ALL																	/*** Ver 1.9 SPAN Portfolio ***/
                     SELECT FCP_XCHNG_CD,
                            FCP_INDSTK,
                            FCP_UNDRLYNG,
                            TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
                            FCP_EXER_TYP,
                            /** Commented in Ver 2.2 **
                            SUM (fcp_opnpstn_qty),
                            SUM (fcp_opnpstn_val),
                            SUM (FCP_MTM_OPN_VAL),
                            **/
                            FCP_CLM_MTCH_ACCNT,
                            TO_CHAR(FCP_EXPRY_DT,'YYYYMMDD')          /*** Ver 3.2 ***/
                      FROM  FCP_FO_SPN_CNTRCT_PSTN_HSTRY,
                            UAC_USR_ACCNTS
                      WHERE   FCP_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
                      AND     FCP_UNDRLYNG      LIKE :c_undrlyng
                      AND     FCP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND     FCP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                      AND     FCP_XCHNG_CD        = :c_xchng_cd
                      AND     UAC_USR_ID = :c_user_id
                   /***   AND     FCP_PRDCT_TYP       = 'F' Commented in Ver 3.4 ***/
                      AND     FCP_PRDCT_TYP     = :c_fut_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */                      AND
              /***    (       FCP_BUY_EXCTD_QTY != 0
                        OR    FCP_SELL_EXCTD_QTY  != 0
                      ) *** Commented in Ver 3.4 ***/
                      (       FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                        OR    FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                      )
                      GROUP BY  FCP_XCHNG_CD,
                                FCP_INDSTK,
                                FCP_UNDRLYNG,
                                FCP_EXPRY_DT,
                                FCP_EXER_TYP,
                                FCP_CLM_MTCH_ACCNT
								UNION ALL                                 /* Ver 2.2 SLTP FPLUS Portfolio */
                    SELECT   FOD_XCHNG_CD,
                             FOD_INDSTK,
                             FOD_UNDRLYNG,
                             TO_CHAR(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                             FOD_EXER_TYP,
                             FOD_CLM_MTCH_ACCNT,
                             TO_CHAR(FOD_EXPRY_DT,'YYYYMMDD')          /*** Ver 3.2 ***/
                      FROM   FOD_FO_ORDR_DTLS,
                             UAC_USR_ACCNTS
                      WHERE  FOD_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
                      AND    FOD_UNDRLYNG LIKE :c_undrlyng
                      AND    FOD_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND    FOD_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                      AND    FOD_XCHNG_CD =  :c_xchng_cd
                      AND    UAC_USR_ID = :c_user_id
                  /***    AND    FOD_PRDCT_TYP = 'U' Commented in Ver 3.4 ***/
                      AND    FOD_PRDCT_TYP = :c_sltpfp_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */ 
               /***   AND    FOD_EXEC_QTY != 0  *** Commented in Ver 3.4 ***/
                      AND    FOD_EXEC_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                      GROUP BY  FOD_XCHNG_CD,
                                FOD_INDSTK,
                                FOD_UNDRLYNG,
                                FOD_EXPRY_DT,
                                FOD_EXER_TYP,
                                FOD_CLM_MTCH_ACCNT
                      UNION ALL
                      SELECT  FOD_XCHNG_CD,
                              FOD_INDSTK,
                              FOD_UNDRLYNG,
                              TO_CHAR(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                              FOD_EXER_TYP,
                              FOD_CLM_MTCH_ACCNT,
                              TO_CHAR(FOD_EXPRY_DT,'YYYYMMDD')          /*** Ver 3.2 ***/
                      FROM    FOD_FO_ORDR_DTLS_HSTRY,
                              UAC_USR_ACCNTS
                      WHERE   FOD_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
                      AND     FOD_UNDRLYNG LIKE :c_undrlyng
                      AND     FOD_EXPRY_DT >= to_date ( :c_frm_dt,'dd-mon-yyyy')
                      AND     FOD_EXPRY_DT <= to_date ( :c_to_dt,'dd-mon-yyyy')
                      AND     FOD_XCHNG_CD =  :c_xchng_cd
                      AND     uac_usr_id = :c_user_id
                   /***   AND     fod_prdct_typ = 'U' Commented in Ver 3.4 ***/
                      AND     FOD_PRDCT_TYP = :c_sltpfp_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */
              /***    AND     fod_exec_qty != 0  *** Commented in Ver 3.4 ***/
                      AND    FOD_EXEC_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                      GROUP BY  FOD_XCHNG_CD,
                                FOD_INDSTK,
                                FOD_UNDRLYNG,
                                FOD_EXPRY_DT,
                                FOD_EXER_TYP,
                                FOD_CLM_MTCH_ACCNT
               /***       ORDER BY  1, 2, 4, 5 , 7;		** Commented in ver 2.0	***/
							 /**			ORDER BY	1,9,3,4;							*** Added in ver 2.0 Commented in ver 2.2    ***/
                    ORDER BY 1,6,3,4;  /* Added in ver 2.2 */
                    END;
                    END-EXEC;


            	}


					}
					else
          {

										if(DEBUG_MSG_LVL_3){
                    fn_userlog(c_ServiceName,"NONBPID");  }

										strcpy ( c_cln_mtch_accnt, st_usr_prfl.c_cln_mtch_accnt);

                   /*** Below queries changed to upper case in Ver 3.4 ***/

                    EXEC SQL  EXECUTE
                    BEGIN
                    OPEN  :cont_cursor FOR
                    SELECT  FFP_XCHNG_CD,
                            FFP_INDSTK,
                            FFP_UNDRLYNG,
                            TO_CHAR(FFP_EXPRY_DT,'DD-Mon-YYYY'),
                            FFP_EXER_TYP,
                            /** Commented in Ver 2.2 **
                            SUM (ffp_opnpstn_qty),
                            SUM (ffp_opnpstn_val),
														SUM (ffp_mtm_opn_val),      ** 1.8 **
                            **/
                            FFP_CLM_MTCH_ACCNT,
                            TO_CHAR(FFP_EXPRY_DT, 'YYYYMMDD')     /*** Added in 3.2 ***/
                      FROM  FFP_FO_FUTURES_PSTN
                      WHERE   FFP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
                      AND     FFP_UNDRLYNG      LIKE :c_undrlyng
                      AND     FFP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND     FFP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
											AND     FFP_XCHNG_CD        = :c_xchng_cd
                      AND
            /***      (       FFP_BUY_EXCTD_QTY != 0
                        OR    FFP_SELL_EXCTD_QTY  != 0
                      )  ***  Commented in Ver 3.4 ***/
                      (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                        OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                      )
                      GROUP BY  FFP_XCHNG_CD,
                                FFP_INDSTK,
                                FFP_UNDRLYNG,
                                FFP_EXPRY_DT,
                                FFP_EXER_TYP,
                                FFP_CLM_MTCH_ACCNT
									UNION ALL
											SELECT  FFP_XCHNG_CD,
                            FFP_INDSTK,
                            FFP_UNDRLYNG,
                            TO_CHAR(FFP_EXPRY_DT,'DD-Mon-YYYY'),
                            FFP_EXER_TYP,
                            /** Commented in Ver 2.2 **
                            SUM (ffp_opnpstn_qty),
                            SUM (ffp_opnpstn_val),
														SUM (ffp_mtm_opn_val),      ** 1.8 **
                            **/
                            FFP_CLM_MTCH_ACCNT,
                            TO_CHAR(FFP_EXPRY_DT, 'YYYYMMDD')     /*** Added in 3.2 ***/
                      FROM  FFP_FO_FUTURES_PSTN_HSTRY
                      WHERE   FFP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
                      AND     FFP_UNDRLYNG      LIKE :c_undrlyng
                      AND     FFP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND     FFP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
											AND     FFP_XCHNG_CD        = :c_xchng_cd
                      AND
              /***    (       FFP_BUY_EXCTD_QTY != 0
                        OR    FFP_SELL_EXCTD_QTY  != 0
                      )  ***  Commented in Ver 3.4 ***/
                      (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                        OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/
                      )
                      GROUP BY  FFP_XCHNG_CD,
                                FFP_INDSTK,
                                FFP_UNDRLYNG,
                                FFP_EXPRY_DT,
                                FFP_EXER_TYP,
                                FFP_CLM_MTCH_ACCNT
									/***		ORDER BY  1, 2, 4, 5 , 7;					Commented In Ver 1.9	***/
							 UNION ALL																		/*** Ver 1.9 SPAN Portfolio ***/		
										SELECT  FCP_XCHNG_CD,
                            FCP_INDSTK,
                            FCP_UNDRLYNG,
                            TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
                            FCP_EXER_TYP,
                            /** Commented in Ver 2.2 **
                            SUM (fcp_opnpstn_qty),
                            SUM (fcp_opnpstn_val),
                            SUM (FCP_MTM_OPN_VAL),
                            **/
                            FCP_CLM_MTCH_ACCNT,
                            TO_CHAR(FCP_EXPRY_DT, 'YYYYMMDD')     /*** Added in 3.2 ***/
                      FROM  FCP_FO_SPN_CNTRCT_PSTN
                      WHERE   FCP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
                      AND     FCP_UNDRLYNG      LIKE :c_undrlyng
                      AND     FCP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND     FCP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                      AND     FCP_XCHNG_CD        = :c_xchng_cd
                   /***   AND   FCP_PRDCT_TYP      = 'F' Commented in Ver 3.4 ***/ 
                      AND   FCP_PRDCT_TYP      = :c_fut_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */
											AND
              /***    (       FCP_BUY_EXCTD_QTY != 0
                        OR    FCP_SELL_EXCTD_QTY  != 0
                      )  *** Commented in Ver 3.4 ***/
                      (       FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                        OR    FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/
                      )
                      GROUP BY  FCP_XCHNG_CD,
                                FCP_INDSTK,
                                FCP_UNDRLYNG,
                                FCP_EXPRY_DT,
                                FCP_EXER_TYP,
                                FCP_CLM_MTCH_ACCNT
								 UNION ALL																			/*** Ver 1.9 SPAN Portfolio ***/
                     SELECT FCP_XCHNG_CD,
                            FCP_INDSTK,
                            FCP_UNDRLYNG,
                            TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
                            FCP_EXER_TYP,
                            /** Commented in Ver 2.2 **
                            SUM (fcp_opnpstn_qty),
                            SUM (fcp_opnpstn_val),
                            SUM (FCP_MTM_OPN_VAL),
                            **/
                            FCP_CLM_MTCH_ACCNT,
                            TO_CHAR(FCP_EXPRY_DT, 'YYYYMMDD')     /*** Added in 3.2 ***/
                      FROM  FCP_FO_SPN_CNTRCT_PSTN_HSTRY
                      WHERE   FCP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
                      AND     FCP_UNDRLYNG      LIKE :c_undrlyng
                      AND     FCP_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                      AND     FCP_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                      AND     FCP_XCHNG_CD        = :c_xchng_cd
                  /***    AND   FCP_PRDCT_TYP      = 'F' Commented in Ver 3.4 ***/
                      AND   FCP_PRDCT_TYP      = :c_fut_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */ 
											AND
               /***   (       FCP_BUY_EXCTD_QTY != 0
                        OR    FCP_SELL_EXCTD_QTY  != 0
                      )  *** Commented in Ver 3.4 ***/
                      (       FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                        OR    FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
                      )
                      GROUP BY  FCP_XCHNG_CD,
                                FCP_INDSTK,
                                FCP_UNDRLYNG,
                                FCP_EXPRY_DT,
                                FCP_EXER_TYP,
                                FCP_CLM_MTCH_ACCNT
									UNION ALL                              /* Ver 2.2 SLTP FPLUS Portfolio */
                   SELECT  FOD_XCHNG_CD,
                           FOD_INDSTK,
                           FOD_UNDRLYNG,
                           TO_CHAR(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                           FOD_EXER_TYP,
                           FOD_CLM_MTCH_ACCNT,
                           TO_CHAR(FOD_EXPRY_DT, 'YYYYMMDD')     /*** Added in 3.2 ***/
                   FROM    FOD_FO_ORDR_DTLS
                   WHERE   FOD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
                   AND     FOD_UNDRLYNG LIKE :c_undrlyng
                   AND     FOD_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                   AND     FOD_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                   AND     FOD_XCHNG_CD =  :c_xchng_cd
                 /***  AND     FOD_PRDCT_TYP = 'U' Commented in Ver 3.4 ***/
                   AND     FOD_PRDCT_TYP = :c_sltpfp_prd_typ /*** Ver 3.4 Bind variable used instead of hard coded value ***/
             /***      AND     FOD_EXEC_QTY != 0   Commented in Ver 3.4 ***/
                   AND     FOD_EXEC_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                   GROUP BY  FOD_XCHNG_CD,
                             FOD_INDSTK,
                             FOD_UNDRLYNG,
                             FOD_EXPRY_DT,
                             FOD_EXER_TYP,
                             FOD_CLM_MTCH_ACCNT
                  UNION ALL
                  SELECT  FOD_XCHNG_CD,
                          FOD_INDSTK,
                          FOD_UNDRLYNG,
                          TO_CHAR(FOD_EXPRY_DT,'DD-Mon-YYYY'),
                          FOD_EXER_TYP,
                          FOD_CLM_MTCH_ACCNT,
                          TO_CHAR(FOD_EXPRY_DT, 'YYYYMMDD')     /*** Added in 3.2 ***/
                  FROM    FOD_FO_ORDR_DTLS_HSTRY
                  WHERE   FOD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
                  AND     FOD_UNDRLYNG LIKE :c_undrlyng
                  AND     FOD_EXPRY_DT >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
                  AND     FOD_EXPRY_DT <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
                  AND     FOD_XCHNG_CD =  :c_xchng_cd
               /***   AND     FOD_PRDCT_TYP = 'U' Commented in Ver 3.4 ***/
                  AND     FOD_PRDCT_TYP = :c_sltpfp_prd_typ /*** Ver 3.4 Bind variable used instead of hard coded value ***/
           /***   AND     FOD_EXEC_QTY != 0    Commented in Ver 3.4 ***/
                  AND     FOD_EXEC_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
                  GROUP BY  FOD_XCHNG_CD,
                            FOD_INDSTK,
                            FOD_UNDRLYNG,
                            FOD_EXPRY_DT,
                            FOD_EXER_TYP,
                            FOD_CLM_MTCH_ACCNT			
             /***          ORDER BY  1, 2, 4, 5 , 7;		** Commented in ver 2.0	***/
						 /***					 ORDER BY	1,9,3,4;							*** Added in ver 2.0	Commented in ver 2.2	  ***/			
                    ORDER BY 1,6,3,4;  /* Added in ver 2.2 */
											END;
											END-EXEC;
					}



	}
	else
	{
		/*** fn_errlog( c_ServiceName, "B28548", DEFMSG, c_errmsg  );  *** Commented in Ver 3.1 ***/
		strcpy(c_errmsg.arr,"No record to be shown in this view"); /*** Ver 3.1 ***/
    if(DEBUG_MSG_LVL_2)
    { 
      fn_userlog(c_ServiceName,"Service SFO_FUT_PRTFL Ends - Inside No Data Found");  /*** Ver 3.5 ***/
	  }
    EXEC SQL CLOSE :cont_cursor;            /*** Added in VQC ***/
    EXEC SQL FREE :cont_cursor;             /*** Added in VQC ***/
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
		/** Added in Ver 4.0 **/
		if ( c_req_flg == 'S' )
			tpreturn(TPSUCCESS, SUCC_BFR, (char *)ptr_fml_Ibuf, 0, 0);
		else
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
		/** Ver 4.0 ends here **/
  }


	if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31115", SQLMSG, c_errmsg.arr  );
    EXEC SQL CLOSE :cont_cursor;            /*** Added in VQC ***/
    EXEC SQL FREE :cont_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	
	/***************** Ver 1.7 Ends ********************************/	
	
	/**********************
  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*i_clnts );
  if ( ptr_fml_Obuf == NULL )
  {
		tpcommit(0);
    fn_errlog( c_ServiceName, "S31120", TPMSG, c_errmsg  );
    EXEC SQL CLOSE :cont_cursor;
    EXEC SQL FREE :cont_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	************************/

	ptr_fml_Obuf = NULL;
	if(DEBUG_MSG_LVL_5)
	{
		fn_userlog( c_ServiceName, "After opening cursor");
	}

  MEMSET(c_tmp_mtch_accnt);   /*** Ver 2.3 ***/
	MEMSET(c_tmp_xchng_cd);
  MEMSET(c_tmp_undrlyng);
  MEMSET(c_tmp_expry_dt);

  for ( ; ; )
  {

		/*** Ver 2.3 Initialized variables for junk open position quantity issue of closed position ***/	

		st_cntfut_pos.l_opnpstn_qty = 0;
		st_cntfut_pos.d_org_opn_val = 0;
		st_cntfut_pos.d_mtm_opn_val = 0;

    MEMSET(c_exp_date);                             /*** Ver 3.2 ***/

    EXEC SQL FETCH :cont_cursor
              INTO :st_cntfut_pos.c_xchng_cd,
					
									 /*** Commented In Ver 1.4
  	               :st_cntfut_pos.c_prdct_typ,
									 ***/
                   :st_cntfut_pos.c_ctgry_indstk,
                   :st_cntfut_pos.c_undrlyng,
                   :st_cntfut_pos.c_expry_dt,
                   :st_cntfut_pos.c_exrc_typ,
                   /** Commented in Ver 2.2 **
                   :st_cntfut_pos.l_opnpstn_qty,
                   :st_cntfut_pos.d_org_opn_val,
                   :st_cntfut_pos.d_mtm_opn_val,				**1.8**
                   **/
									 :c_cln_mtch_accnt,
                   :c_exp_date;                         /*** Ver 3.2 ***/
    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        break;
      }
      else
      {
				/*tpcommit(0);*/				/*1.7*/
        fn_errlog( c_ServiceName, "S31125", SQLMSG, c_errmsg.arr  );
        EXEC SQL CLOSE :cont_cursor;
        EXEC SQL FREE :cont_cursor;
        /*** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
		rtrim(st_cntfut_pos.c_xchng_cd);
		rtrim(st_cntfut_pos.c_undrlyng);
		rtrim(st_cntfut_pos.c_expry_dt);
		rtrim(c_cln_mtch_accnt);

		/*** Ver 1.9 Added for SPAN Portfolio ***/

		if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"Before if condition");
      fn_userlog(c_ServiceName,"Expiry Date Is      :%s:",st_cntfut_pos.c_expry_dt);
      fn_userlog(c_ServiceName,"Underlying Is       :%s:",st_cntfut_pos.c_undrlyng);
      fn_userlog(c_ServiceName,"Exchnge Is          :%s:",st_cntfut_pos.c_xchng_cd);
      fn_userlog(c_ServiceName,"copied exchange Is  :%s:",c_tmp_xchng_cd);
      fn_userlog(c_ServiceName,"copied Match account Is   :%s:",c_tmp_mtch_accnt);   /*** ver 2.3 ***/
      fn_userlog(c_ServiceName,"copied Underlying Is:%s:",c_tmp_undrlyng);
      fn_userlog(c_ServiceName,"copied expiry  Is   :%s:",c_tmp_expry_dt);
      fn_userlog(c_ServiceName,"Open Position qty Is:%ld:",st_cntfut_pos.l_opnpstn_qty);
      fn_userlog(c_ServiceName,"open position val Is:%lf:",st_cntfut_pos.d_org_opn_val);
      fn_userlog(c_ServiceName,"open mtm val Is     :%lf:",st_cntfut_pos.d_mtm_opn_val);
    }
	
		/*** Match account check added in Ver 2.3 ***/

		if( (strcmp(c_tmp_mtch_accnt,c_cln_mtch_accnt) == 0) && (strcmp(c_tmp_xchng_cd,st_cntfut_pos.c_xchng_cd) == 0) && (strcmp(c_tmp_undrlyng,st_cntfut_pos.c_undrlyng) == 0) && (strcmp(c_tmp_expry_dt,st_cntfut_pos.c_expry_dt)==0) )
		{
			if(DEBUG_MSG_LVL_3)	/*** Ver 3.1 ***/
			{
				fn_userlog( c_ServiceName, " Last Contract is Same so Continuing with next record ");
			}
			continue;
		}

    MEMSET(c_tmp_mtch_accnt);  /*** Ver 2.3 ***/
		MEMSET(c_tmp_xchng_cd);
  	MEMSET(c_tmp_undrlyng);
  	MEMSET(c_tmp_expry_dt);
			
    strcpy(c_tmp_mtch_accnt,c_cln_mtch_accnt);  /*** Ver 2.3 ***/
		strcpy(c_tmp_xchng_cd,st_cntfut_pos.c_xchng_cd);
		strcpy(c_tmp_undrlyng,st_cntfut_pos.c_undrlyng);
		strcpy(c_tmp_expry_dt,st_cntfut_pos.c_expry_dt);

    rtrim(c_tmp_mtch_accnt);   /*** Ver 2.3 ***/
		rtrim(c_tmp_xchng_cd);
		rtrim(c_tmp_undrlyng);
		rtrim(c_tmp_expry_dt);
		
		if(DEBUG_MSG_LVL_5)		
		{
			fn_userlog(c_ServiceName,"Expiry Date Is 			:%s:",st_cntfut_pos.c_expry_dt);
			fn_userlog(c_ServiceName,"Underlying Is 			:%s:",st_cntfut_pos.c_undrlyng);
			fn_userlog(c_ServiceName,"Exchnge Is 					:%s:",st_cntfut_pos.c_xchng_cd);
			fn_userlog(c_ServiceName,"copied exchange Is 	:%s:",c_tmp_xchng_cd);
			fn_userlog(c_ServiceName,"copied Underlying Is:%s:",c_tmp_undrlyng);
			fn_userlog(c_ServiceName,"copied expiry  Is 	:%s:",c_tmp_expry_dt);
		}

		/*** Ver 1.9 ***/

		strcpy ( st_cntrct_q.c_xchng_cd, st_cntfut_pos.c_xchng_cd );

		/*** Commented In Ver 1.4
		st_cntrct_q.c_prd_typ = st_cntfut_pos.c_prd_typ;
		***/
		st_cntrct_q.c_prd_typ = 'F';	/* Ver 1.4 */
		st_cntrct_q.c_ctgry_indstk = st_cntfut_pos.c_ctgry_indstk;
		strcpy ( st_cntrct_q.c_undrlyng, st_cntfut_pos.c_undrlyng );
		strcpy ( st_cntrct_q.c_expry_dt, st_cntfut_pos.c_expry_dt );
		st_cntrct_q.c_exrc_typ = 'E';
		st_cntrct_q.c_opt_typ = '*';
		st_cntrct_q.l_strike_prc = 0;

		/***	li_rec_cnt = 0; Commeneted in VQC as variable use is commented ***/

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "After opening cursor %s",c_cln_mtch_accnt);
		}
		
		/****** Commented in ver 2.6 ****

    EXEC SQL
        SELECT    1
          INTO    :li_rec_cnt
        FROM      dual
        WHERE     EXISTS
        (
        SELECT    1
          FROM    fcm_fo_cntrct_mstr
         WHERE    fcm_xchng_cd       = :st_cntrct_q.c_xchng_cd
           AND    fcm_prdct_typ      = decode(:st_cntrct_q.c_prd_typ ,'P','F',:st_cntrct_q.c_prd_typ)
           AND    fcm_undrlyng  = :st_cntrct_q.c_undrlyng
           AND    fcm_expry_dt  = to_date( :st_cntrct_q.c_expry_dt,
																														'dd-mon-yyyy')
           AND    fcm_exer_typ  = :st_cntrct_q.c_exrc_typ
           AND    fcm_opt_typ   = :st_cntrct_q.c_opt_typ
           AND    fcm_strk_prc  = :st_cntrct_q.l_strike_prc
        );

  	if((SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND))
  	{
			*tpcommit(0);*	*1.7*
    	fn_errlog( c_ServiceName, "S31130", SQLMSG, c_errmsg  );
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      tpfree ( ( char * ) ptr_fml_Obuf );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}


		if ( li_rec_cnt == 1 )
		{
  		i_ip_len = sizeof ( struct vw_contract );
  		i_op_len = sizeof ( struct vw_cntrct_qt );

  		*** Added for Order Routing ***
			fn_cpy_ddr ( st_cntrct_q.c_rout_crt );


  		i_ch_val = fn_call_svc ( c_ServiceName,
                           	 	c_errmsg,
                             	&st_cntrct_q,
                             	&st_cntrct_qt,
                             	"vw_contract",
                             	"vw_cntrct_qt",
                             	i_ip_len,
                             	i_op_len,
                             	0,
                             	"SFO_GET_QT" );
  		if ( i_ch_val != SUCC_BFR )
  		{
				*tpcommit(0);*			*1.7*
    		fn_errlog( c_ServiceName, "S31135", LIBMSG, c_errmsg  );
      	EXEC SQL CLOSE :cont_cursor;
      	EXEC SQL FREE :cont_cursor;
      	tpfree ( ( char * ) ptr_fml_Obuf );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}

		}
		else
		{
			st_cntrct_qt.l_lst_trdd_prc = 0;
		}
		
		********* Comment end ver 2.6 *************************/
	
    rtrim(c_exp_date);      /*** Ver 3.2 ***/

		/***	Ver 3.2 Below IF condition added to reduce DB hits in case of Expired Contracts. ***/
 
    if(strcmp(c_exp_date, c_min_ftq_exp_dt) >= 0)     
    {
	
			/**** Added in Ver 2.6 ***/

     EXEC SQL
          SELECT  NVL(FTQ_LST_TRD_PRC,0)
          INTO    :d_ltp
          FROM    FTQ_FO_TRD_QT
          WHERE   FTQ_XCHNG_CD  = :st_cntfut_pos.c_xchng_cd
        /***  AND     FTQ_PRDCT_TYP = 'F'  *** Commented in Ver 3.4 ***/
          AND     FTQ_PRDCT_TYP = :c_fut_prd_typ  /*** Ver 3.4 Bind variable used instead of hard coded value ***/ 
          AND     FTQ_UNDRLYNG  = :st_cntfut_pos.c_undrlyng
          AND     FTQ_EXPRY_DT  = :st_cntfut_pos.c_expry_dt
          AND     FTQ_EXER_TYP  = :st_cntfut_pos.c_exrc_typ;

      if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S31140", SQLMSG, c_errmsg.arr  );
        EXEC SQL CLOSE :cont_cursor;
        EXEC SQL FREE :cont_cursor;
       /***  tpfree ( ( char * ) ptr_fml_Obuf ); Commented in VQC  ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

     if( SQLCODE == NO_DATA_FOUND )
     {
      d_ltp = 0.0;
     }

     st_cntrct_qt.l_lst_trdd_prc = d_ltp;

     EXEC SQL
        SELECT 1
        INTO  :i_exists
        FROM DUAL        /*** Ver 3.4 Table Name changed to upper case ***/
        WHERE EXISTS
        (
          SELECT 1
          FROM FTD_FO_TRD_DTLS
          WHERE   FTD_CLM_MTCH_ACCNT =:c_cln_mtch_accnt
          AND     FTD_XCHNG_CD       =:st_cntfut_pos.c_xchng_cd
          AND     FTD_UNDRLYNG       =:st_cntfut_pos.c_undrlyng
          AND     FTD_PRDCT_TYP      IN ('F','P','U')
          AND     FTD_EXPRY_DT       =:st_cntfut_pos.c_expry_dt
          AND     FTD_EXER_TYP       =:st_cntfut_pos.c_exrc_typ
        );

		 if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
     {
       fn_errlog( c_ServiceName, "S31145", SQLMSG, c_errmsg.arr  );
       EXEC SQL CLOSE :cont_cursor;
       EXEC SQL FREE :cont_cursor;
       /*** tpfree ( ( char * ) ptr_fml_Obuf ); *** Commented in VQC ***/
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

     if( SQLCODE == NO_DATA_FOUND )
     {
      i_exists = 0;
     }

		 if(DEBUG_MSG_LVL_3)
     {
      fn_userlog( c_ServiceName, "position exists |%d|",i_exists);
     }

    	/**** Ver 2.6 ends ***/

    }   /** Ver 3.2 if condition ends here **/
		else    /** Ver 3.2 else condition added**/
    { 
			i_exists = 0;
      d_ltp 	 = 0.0;
      st_cntrct_qt.l_lst_trdd_prc = d_ltp;
    }

		if ( i_exists == 1 )  /*** Condition added in ver 2.6 ***/
    {

		strcpy ( c_xchng_cd, st_cntfut_pos.c_xchng_cd );
		c_prdct_typ = st_cntfut_pos.c_prd_typ;
		/***c_ctgry_indstk = st_cntfut_pos.c_ctgry_indstk;  *** commented in VQC as variable is not used ***/
		strcpy ( c_undrlyng, st_cntfut_pos.c_undrlyng );
		strcpy ( c_expry_dt, st_cntfut_pos.c_expry_dt );
		c_exrc_typ = st_cntfut_pos.c_exrc_typ;

		l_tot_sell_qty_m = 0;
		d_sell_val_m = 0;
		l_tot_sell_qty_h = 0;
		d_sell_val_h = 0;
		l_tot_sell_qty = 0;
		d_sell_val = 0;
		/***	d_fpsell_val = 0;			* Ver 1.4 * Commenetd in VQC as variable is not used ***/
		d_opn_sell_val = 0;
		/*** d_fpopn_sell_val = 0; * Ver 1.4 *  Commented in VQC as variable is not used ***/

		l_tot_buy_qty_m = 0;
		d_buy_val_m = 0;
		l_tot_buy_qty_h = 0;
		d_buy_val_h = 0;
		l_tot_buy_qty = 0;
		d_buy_val = 0;
		d_opn_buy_val = 0;

		d_cls_val_m = 0;
		d_cls_val_h = 0;
		d_cls_val = 0;

		li_bal_qty = 0;
		li_crst_qty = 0;
		/*** li_fpcrst_qty = 0;		* Ver 1.4 * Commented in VQC as variable is not used ***/
		li_uncrst_qty = 0;
		/*** li_fpuncrst_qty = 0;	* Ver 1.4 * Commented in VQC as variable use is commented ***/
		d_crst_prft = 0; 

		/***	Commented in VQC 

		d_fcrst_prft = 0;			
		d_fpcrst_prft = 0;	

		*******************/

		d_uncrst_prft = 0;

		/***  Commented in VQC

		d_funcrst_prft = 0;   
		d_fpuncrst_prft = 0; 

		*******************/

		l_avg_trd_prc = 0;    /* Ver 1.8 */

    d_avg_pr = 0; /* Ver 2.1 */

		/***  Ver 1.4 Starts  ***/

		/*** Commented In Ver 1.9 Added SPAN effect below
		if(st_cntfut_pos.l_opnpstn_qty > 0 )
		{
			st_cntfut_pos.c_opnpstn_flw = 'B';
		}
		else if(st_cntfut_pos.l_opnpstn_qty < 0 )
		{
			 st_cntfut_pos.c_opnpstn_flw = 'S';
		}
		else
		{
			st_cntfut_pos.c_opnpstn_flw = 'N';
		}
		****/

		EXEC SQL ALLOCATE :brkg_cursor;

    /*** Below queries changed to upper case in Ver 3.4 ***/

		EXEC SQL  EXECUTE
			BEGIN
				OPEN  :brkg_cursor FOR
					SELECT  SUM(s1) from
					(
						SELECT SUM(NVL(FTD_BRKG,0)+FTD_STT+FTD_SRC_TX+FTD_SEBI_TT+FTD_TRAN_CHRG+FTD_STAMP_DUTY+NVL(FTD_BRKRG_IGST,0 )+ NVL(FTD_BRKRG_CGST,0 )+NVL(FTD_BRKRG_SGST,0 ) +NVL( FTD_BRKRG_UGST,0)) s1   /** ver 3.3 **/
						FROM  FTD_FO_TRD_DTLS
						WHERE FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
						AND   FTD_XCHNG_CD        = :c_xchng_cd
						AND   FTD_UNDRLYNG        = :c_undrlyng
            AND   FTD_PRDCT_TYP    IN ('P','F','U') /* Added SLTPFP Check in Ver 2.2 */
						AND   FTD_EXER_TYP        = :c_exrc_typ
						AND   FTD_EXPRY_DT        = :c_expry_dt
  					AND   FTD_EXPRY_DT 			 >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
						AND   FTD_EXPRY_DT 			 <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
						UNION ALL
						SELECT  SUM(NVL(FTD_BRKG,0)+NVL(FTD_STT,0)+NVL(FTD_SRC_TX,0)+NVL(FTD_SEBI_TT,0)+NVL(FTD_TRAN_CHRG,0)+NVL(FTD_STAMP_DUTY,0)+NVL(FTD_BRKRG_IGST,0 )+ NVL(FTD_BRKRG_CGST,0 )+NVL(FTD_BRKRG_SGST,0 ) +NVL( FTD_BRKRG_UGST,0)) s1 /** Ver 3.3 **/
						FROM FTD_FO_TRD_DTLS_HSTRY
						WHERE FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
						AND   FTD_XCHNG_CD        = :c_xchng_cd
						AND   FTD_UNDRLYNG        = :c_undrlyng
            AND   FTD_PRDCT_TYP    IN ('P','F','U') /* Added SLTPFP Check in Ver 2.2 */
						AND   FTD_EXER_TYP        = :c_exrc_typ
						AND   FTD_EXPRY_DT        = :c_expry_dt
						AND   FTD_EXPRY_DT			 >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
						AND   FTD_EXPRY_DT 			 <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
						UNION ALL
						SELECT SUM(NVL(FCO_BRKG,0)+FCO_STT+FCO_SRC_TX+FCO_SEBI_TT+FCO_TRAN_CHRG+FCO_STAMP_DUTY) s1
						FROM	FCO_FO_FCLSOUT
						WHERE	FCO_CLM_MTCH_ACCNT	= :c_cln_mtch_accnt
						AND		FCO_XCHNG_CD				= :c_xchng_cd
						AND		FCO_UNDRLYNG				= :c_undrlyng
            AND   FCO_PRDCT_TYP       IN ('P','F','U') /* Added SLTPFP Check in Ver 2.2 */
						AND		FCO_EXPRY_DT				= :c_expry_dt 
						AND		FCO_EXER_TYP				= :c_exrc_typ
						AND		FCO_EXPRY_DT			 >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
						AND   FCO_EXPRY_DT 			 <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
						UNION ALL
						SELECT SUM(NVL(FCO_BRKG,0)+FCO_STT+FCO_SRC_TX+FCO_SEBI_TT+FCO_TRAN_CHRG+FCO_STAMP_DUTY) s1
            FROM  FCO_FO_FCLSOUT_HSTRY
            WHERE FCO_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
            AND   FCO_XCHNG_CD        = :c_xchng_cd
            AND   FCO_UNDRLYNG        = :c_undrlyng
            AND   FCO_PRDCT_TYP       IN ('P','F','U') /* Added SLTPFP Check in Ver 2.2 */
            AND   FCO_EXPRY_DT        = :c_expry_dt
            AND   FCO_EXER_TYP        = :c_exrc_typ
            AND   FCO_EXPRY_DT       >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
            AND   FCO_EXPRY_DT       <= TO_DATE ( :c_to_dt,'dd-mon-yyyy') 
					);
			END;
		END-EXEC;


		EXEC SQL FETCH  :brkg_cursor
						 INTO  	:l_tot_brkg;

		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName,"Here Brokrage Is :%ld:",l_tot_brkg);
		}
		
		if ( SQLCODE != 0 )
 		{
    	if ( SQLCODE == NO_DATA_FOUND )
   		{
     		fn_userlog(c_ServiceName,"Inside NO_DATA_FOUND");
     		l_tot_brkg = 0;
   		}
   		else
   		{
     		/*tpcommit(0);*/
     		EXEC SQL CLOSE :cont_cursor;
     		EXEC SQL FREE  :cont_cursor;
     		EXEC SQL CLOSE :brkg_cursor;
     		EXEC SQL FREE  :brkg_cursor;
   			/*** tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC ***/
     		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
     		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   		}
 		}

 		EXEC SQL CLOSE :brkg_cursor;
 		EXEC SQL FREE  :brkg_cursor;

		/*** Open Position Quantity For Futureplus Selected ***/

	  /*** Below queries changed to upper case in Ver 3.4 ***/ 
 
			EXEC SQL
				SELECT	SUM (s2)
				INTO		:l_fp_opnpstn_qty
				FROM
				(
					SELECT	NVL(SUM(FFP_OPNPSTN_QTY),0)s2
					FROM		FFP_FO_FUTURES_PSTN	
					WHERE		FFP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
					AND			FFP_XCHNG_CD       = :c_xchng_cd
			/***		AND			FFP_PRDCT_TYP			 = 'P'  Commented in Ver 3.4 ***/
          AND     FFP_PRDCT_TYP      = :c_futpls_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */
					AND			FFP_UNDRLYNG			 = :c_undrlyng
					AND			FFP_EXPRY_DT			 = :c_expry_dt			
					AND     FFP_EXPRY_DT 			>= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
          AND     FFP_EXPRY_DT 			<= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
          AND
    /***  (       FFP_BUY_EXCTD_QTY != 0
            OR    FFP_SELL_EXCTD_QTY  != 0
          )  *** Commented in Ver 3.4 ***/
          (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
            OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
          )	
					UNION ALL
					SELECT  NVL(SUM(FFP_OPNPSTN_QTY),0) s2
					FROM    FFP_FO_FUTURES_PSTN_HSTRY
          WHERE   FFP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
          AND     FFP_XCHNG_CD       = :c_xchng_cd
				  AND     FFP_EXPRY_DT       = :c_expry_dt     
      /***    AND     FFP_PRDCT_TYP      = 'P'   Commented in Ver 3.4 ***/
          AND     FFP_PRDCT_TYP      = :c_futpls_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */ 
          AND     FFP_UNDRLYNG       = :c_undrlyng
          AND     FFP_EXPRY_DT 			>= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
          AND     FFP_EXPRY_DT 			<= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
          AND
     /*** (       FFP_BUY_EXCTD_QTY != 0
            OR    FFP_SELL_EXCTD_QTY  != 0
          )  *** Commented in Ver 3.4 ***/
          (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
            OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/
          )    
				);

			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    	{
     		/*tpcommit(0);*/		/* 1.7*/
     		fn_errlog( c_ServiceName, "S31150", SQLMSG, c_errmsg.arr  );
     		EXEC SQL CLOSE :cont_cursor;
     		EXEC SQL FREE :cont_cursor;
     		/***	tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC ***/
     		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
     		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
	
			 EXEC SQL
        SELECT  SUM (s3)
        INTO    :l_f_opnpstn_qty
        FROM
        (
          SELECT  NVL(SUM(FFP_OPNPSTN_QTY),0)s3
          FROM    FFP_FO_FUTURES_PSTN
          WHERE   FFP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
          AND     FFP_XCHNG_CD       = :c_xchng_cd
       /***   AND     FFP_PRDCT_TYP      = 'F'  Commented in Ver 3.4 ***/
          AND     FFP_PRDCT_TYP      = :c_fut_prd_typ /*** Ver 3.4 Bind variable used instead of hard coded value ***/ 
          AND     FFP_UNDRLYNG       = :c_undrlyng
          AND     FFP_EXPRY_DT       = :c_expry_dt
          AND     FFP_EXPRY_DT      >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
          AND     FFP_EXPRY_DT      <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
          AND
     /*** (       FFP_BUY_EXCTD_QTY != 0
            OR    FFP_SELL_EXCTD_QTY  != 0
          )  *** Commented in Ver 3.4 ***/
          (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
            OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
          )
          UNION ALL
          SELECT  NVL(SUM(FFP_OPNPSTN_QTY),0) s3
          FROM    FFP_FO_FUTURES_PSTN_HSTRY
          WHERE   FFP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
          AND     FFP_XCHNG_CD       = :c_xchng_cd
          AND     FFP_EXPRY_DT       = :c_expry_dt
        /***  AND     FFP_PRDCT_TYP      = 'F'   Commented in Ver 3.4 ***/
          AND     FFP_PRDCT_TYP      = :c_fut_prd_typ /*** Ver 3.4 Bind variable used instead of hard coded value ***/
          AND     FFP_UNDRLYNG       = :c_undrlyng
          AND     FFP_EXPRY_DT      >= TO_DATE ( :c_frm_dt,'dd-mon-yyyy')
          AND     FFP_EXPRY_DT      <= TO_DATE ( :c_to_dt,'dd-mon-yyyy')
          AND
  /***    (       FFP_BUY_EXCTD_QTY != 0
            OR    FFP_SELL_EXCTD_QTY  != 0
          )  *** Commented in Ver 3.4 ***/
          (       FFP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
            OR    FFP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
          )
				);

				if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      	{
        	/*tpcommit(0);*/      /*1.7*/
        	fn_errlog( c_ServiceName, "S31155", SQLMSG, c_errmsg.arr  );
        	EXEC SQL CLOSE :cont_cursor;
        	EXEC SQL FREE :cont_cursor;
        	/***	tpfree ( ( char * ) ptr_fml_Obuf ); *** Commented in VQC ***/
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}

			/*** Ver 1.9 Added for SPAN Portfolio ***/
	
			 EXEC SQL
        SELECT  SUM (s4)
        INTO    :l_spn_opnpstn_qty
        FROM
        (
          SELECT NVL(SUM(FCP_OPNPSTN_QTY),0) s4
          FROM   FCP_FO_SPN_CNTRCT_PSTN
          WHERE  FCP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
          AND    FCP_XCHNG_CD       = :c_xchng_cd
     /***     AND    FCP_PRDCT_TYP      = 'F'    Commented in Ver 3.4 ***/
          AND    FCP_PRDCT_TYP      = :c_fut_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */
          AND    FCP_UNDRLYNG       = :c_undrlyng
          AND    FCP_EXPRY_DT       = :c_expry_dt
          AND
    /***  (      FCP_BUY_EXCTD_QTY != 0
            OR   FCP_SELL_EXCTD_QTY  != 0
          )  *** Commented in Ver 3.4 ***/
          (      FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
            OR   FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/
          )
					UNION ALL
          SELECT  NVL(SUM(FCP_OPNPSTN_QTY),0) s4
          FROM    FCP_FO_SPN_CNTRCT_PSTN_HSTRY
          WHERE   FCP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
          AND     FCP_XCHNG_CD       = :c_xchng_cd
          AND     FCP_EXPRY_DT       = :c_expry_dt
       /***   AND     FCP_PRDCT_TYP      = 'F'   Commented in Ver 3.4 ***/
          AND     FCP_PRDCT_TYP      = :c_fut_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */
          AND     FCP_UNDRLYNG       = :c_undrlyng
          AND
    /***  (       FCP_BUY_EXCTD_QTY != 0
            OR    FCP_SELL_EXCTD_QTY  != 0
          )   *** Commented in Ver 3.4 ***/
          (       FCP_BUY_EXCTD_QTY != :l_zero_val /*** Ver 3.4 bind variable used ***/
            OR    FCP_SELL_EXCTD_QTY  != :l_zero_val /*** Ver 3.4 bind variable used ***/ 
          )	
        );

      	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      	{
        	/*tpcommit(0);*/			/*1.7*/
        	fn_errlog( c_ServiceName, "S31160", SQLMSG, c_errmsg.arr  );
        	EXEC SQL CLOSE :cont_cursor;
        	EXEC SQL FREE :cont_cursor;
        	/*** tpfree ( ( char * ) ptr_fml_Obuf ); Commented in VQC ***/
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
	
				EXEC SQL                          /* Ver 2.2 SLTP FPLUS Portfolio */
         SELECT SUM(s1 -s2)
         INTO   :l_sltp_opnpstn_qty
         FROM
         (
          SELECT NVL(SUM(DECODE(FOD_ORDR_FLW,'B',FOD_EXEC_QTY)),0) s1,
                 NVL(SUM(DECODE(FOD_ORDR_FLW,'S',FOD_EXEC_QTY)),0) s2
          FROM   FOD_FO_ORDR_DTLS
          WHERE  FOD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
          AND    FOD_XCHNG_CD       = :c_xchng_cd
          AND    FOD_EXPRY_DT       = :st_cntfut_pos.c_expry_dt
       /***   AND    FOD_PRDCT_TYP      = 'U'   Commented in Ver 3.4 ***/
          AND    FOD_PRDCT_TYP      = :c_sltpfp_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */ 
          AND    FOD_UNDRLYNG       = :st_cntfut_pos.c_undrlyng
          AND    FOD_EXER_TYP       = :st_cntfut_pos.c_exrc_typ
      /***    AND    FOD_EXEC_QTY       != 0  *** Commented in Ver 3.4 ***/
          AND    FOD_EXEC_QTY       != :l_zero_val /*** Ver 3.4 bind variable used ***/
          UNION ALL
          SELECT NVL(SUM(DECODE(FOD_ORDR_FLW,'B',FOD_EXEC_QTY)),0) s1,
                 NVL(SUM(DECODE(FOD_ORDR_FLW,'S',FOD_EXEC_QTY)),0) s2
          FROM   FOD_FO_ORDR_DTLS_HSTRY
          WHERE  FOD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
          AND    FOD_XCHNG_CD       = :c_xchng_cd
          AND    FOD_EXPRY_DT       = :st_cntfut_pos.c_expry_dt
        /***  AND    FOD_PRDCT_TYP      = 'U'   Commented in Ver 3.4 ***/
          AND    FOD_PRDCT_TYP      = :c_sltpfp_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */
          AND    FOD_UNDRLYNG       = :st_cntfut_pos.c_undrlyng
          AND    FOD_EXER_TYP       = :st_cntfut_pos.c_exrc_typ
      /***    AND    FOD_EXEC_QTY       != 0  *** Commented in Ver 3.4 ***/
          AND    FOD_EXEC_QTY       != :l_zero_val /*** Ver 3.4 bind variable used ***/
         );

        if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
        {
          fn_errlog( c_ServiceName, "S31165", SQLMSG, c_errmsg.arr  );
          EXEC SQL CLOSE :cont_cursor;
          EXEC SQL FREE :cont_cursor;
          /*** tpfree ( ( char * ) ptr_fml_Obuf ); Commented in VQC ***/
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

  /****** Commented in Ver 2.2 *************
	
	if ((l_f_opnpstn_qty != 0) || (l_fp_opnpstn_qty != 0))
	{
		EXEC SQL
		 SELECT SUM(ffp_opnpstn_qty),
            SUM(ffp_opnpstn_val),
            SUM(ffp_mtm_opn_val)
			INTO  :st_cntfut_pos.l_opnpstn_qty,
            :st_cntfut_pos.d_org_opn_val,
            :st_cntfut_pos.d_mtm_opn_val     
     FROM   ffp_fo_futures_pstn
     WHERE   ffp_clm_mtch_accnt = :c_cln_mtch_accnt
		 AND     ffp_xchng_cd       = :c_xchng_cd	
     AND     ffp_undrlyng 		  = :st_cntfut_pos.c_undrlyng
     AND     ffp_expry_dt 			= :st_cntfut_pos.c_expry_dt
		 AND 		 FFP_EXER_TYP				= :st_cntfut_pos.c_exrc_typ;
	
		 if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      {
         fn_errlog( c_ServiceName, "S31170", SQLMSG, c_errmsg  );
         EXEC SQL CLOSE :cont_cursor;
         EXEC SQL FREE :cont_cursor;
         tpfree ( ( char * ) ptr_fml_Obuf );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }		 
	}
	
	l_f_opnpstn_qty = l_f_opnpstn_qty + l_spn_opnpstn_qty;		 

	if( DEBUG_MSG_LVL_5 )
	{
		fn_userlog(c_ServiceName,"OPEN POSITION QTY FOR FUTURE  IS :%ld:",l_f_opnpstn_qty);
		fn_userlog(c_ServiceName,"OPEN POSITION QTY FOR FUTURE PLUS IS :%ld:",l_fp_opnpstn_qty);
		fn_userlog(c_ServiceName,"OPEN POSITION QTY FOR SPAN IS :%ld:",l_spn_opnpstn_qty);
	}

	if (l_spn_opnpstn_qty != 0)
  {
		EXEC SQL
		 SELECT FCP_OPNPSTN_QTY,
						FCP_OPNPSTN_VAL,
						FCP_MTM_OPN_VAL
			INTO  :st_cntfut_pos.l_opnpstn_qty,
						:st_cntfut_pos.d_org_opn_val,
						:st_cntfut_pos.d_mtm_opn_val 
			FROM  FCP_FO_SPN_CNTRCT_PSTN
			WHERE FCP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
			AND		FCP_XCHNG_CD 			 = :c_xchng_cd
			AND   FCP_EXPRY_DT       = :st_cntfut_pos.c_expry_dt
      AND   FCP_PRDCT_TYP      = 'F'
      AND   FCP_UNDRLYNG       = :st_cntfut_pos.c_undrlyng 
			AND		FCP_EXER_TYP   		 = :st_cntfut_pos.c_exrc_typ;
			
		  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      {
         fn_errlog( c_ServiceName, "S31175", SQLMSG, c_errmsg  );
         EXEC SQL CLOSE :cont_cursor;
         EXEC SQL FREE :cont_cursor;
         tpfree ( ( char * ) ptr_fml_Obuf );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
	}
	**********************/
	
	 /************************ Ver 2.2 Starts ************************/


  EXEC SQL
       SELECT  NVL(CLM_SPAN_ALLWD,'N'),
               NVL(CLM_BSESPAN_ALLWD,'N')
       INTO    :c_spn_allwd_flg,
               :c_bsespn_allwd_flg
       FROM    CLM_CLNT_MSTR
       WHERE   CLM_MTCH_ACCNT  = :c_cln_mtch_accnt;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31180", SQLMSG, c_errmsg.arr  );
    EXEC SQL CLOSE :cont_cursor;
    EXEC SQL FREE :cont_cursor;
   /*** tpfree ( ( char * ) ptr_fml_Obuf ); Commented in VQC ***/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if( (c_spn_allwd_flg == 'N' && strcmp(c_xchng_cd,"NFO")==0 ) ||
      (c_bsespn_allwd_flg == 'N' && strcmp(c_xchng_cd,"BFO")== 0))
  {
 /* if ((l_f_opnpstn_qty != 0) || (l_fp_opnpstn_qty != 0) || ( l_sltp_opnpstn_qty != 0)) ** Commented in ver 2.4 **/
    if ((l_f_opnpstn_qty != 0) || (l_fp_opnpstn_qty != 0))
    {

      /*** Below queries changed to upper case in Ver 3.4 ***/

      EXEC SQL
      SELECT SUM ( QTY ),
             SUM ( VAL ),
             SUM ( MTM_VAL )
      INTO   :st_cntfut_pos.l_opnpstn_qty ,  
             :st_cntfut_pos.d_org_opn_val,
             :st_cntfut_pos.d_mtm_opn_val
      FROM
      (
       SELECT SUM(FFP_OPNPSTN_QTY) QTY,
              SUM(FFP_OPNPSTN_VAL) VAL,
              SUM(FFP_MTM_OPN_VAL) MTM_VAL
       FROM   FFP_FO_FUTURES_PSTN
       WHERE   FFP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
       AND     FFP_XCHNG_CD       = :c_xchng_cd
       AND     FFP_UNDRLYNG       = :st_cntfut_pos.c_undrlyng
       AND     FFP_EXPRY_DT       = :st_cntfut_pos.c_expry_dt
       AND     FFP_EXER_TYP       = :st_cntfut_pos.c_exrc_typ
			/***************** Commented In ver 2.3 ************************	
			UNION ALL
       SELECT SUM(s1 - s2) QTY,
              SUM(decode(sign(s1 -s2),1,(s1 -s2) * s3,-1,(s1 -s2) * s4,0)) VAL,
              SUM(decode(sign(s1 -s2),1,(s1 -s2) * s3,-1, (s1 -s2) * s4,0)) MTM_VAL
       FROM
       (
        SELECT nvl(sum(decode(FOD_ORDR_FLW,'B',FOD_EXEC_QTY)),0) s1,
               nvl(sum(decode(FOD_ORDR_FLW,'S',FOD_EXEC_QTY)),0) s2,
               sum(decode(FOD_ORDR_FLW,'B',FOD_LMT_RT)) s3,
               sum(decode(FOD_ORDR_FLW,'S',FOD_LMT_RT)) s4
        FROM   FOD_FO_ORDR_DTLS
        WHERE  FOD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
        AND    FOD_XCHNG_CD       = :c_xchng_cd
        AND    FOD_EXPRY_DT       = :st_cntfut_pos.c_expry_dt
        AND    FOD_PRDCT_TYP      = 'U'
        AND    FOD_UNDRLYNG       = :st_cntfut_pos.c_undrlyng
        AND    FOD_EXER_TYP       = :st_cntfut_pos.c_exrc_typ
        AND    FOD_EXEC_QTY       != 0
        UNION ALL
        SELECT nvl(sum(decode(FOD_ORDR_FLW,'B',FOD_EXEC_QTY)),0) s1,
               nvl(sum(decode(FOD_ORDR_FLW,'S',FOD_EXEC_QTY)),0) s2,
               sum(decode(FOD_ORDR_FLW,'B',FOD_LMT_RT)) s3,
               sum(decode(FOD_ORDR_FLW,'S',FOD_LMT_RT)) s4
        FROM   FOD_FO_ORDR_DTLS_HSTRY
        WHERE  FOD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
        AND    FOD_XCHNG_CD       = :c_xchng_cd
        AND    FOD_EXPRY_DT       = :st_cntfut_pos.c_expry_dt
        AND    FOD_PRDCT_TYP      = 'U'
        AND    FOD_UNDRLYNG       = :st_cntfut_pos.c_undrlyng
        AND    FOD_EXER_TYP       = :st_cntfut_pos.c_exrc_typ
        AND    FOD_EXEC_QTY       != 0
        )
			  ***********************************************************/
      );

			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      {
          fn_errlog( c_ServiceName, "S31185", SQLMSG, c_errmsg.arr  );
          EXEC SQL CLOSE :cont_cursor;
          EXEC SQL FREE :cont_cursor;
    			/***  tpfree ( ( char * ) ptr_fml_Obuf ); Commented in VQC ***/
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

     }	
	}
  else
  {
 /* if ((l_spn_opnpstn_qty != 0) || (l_sltp_opnpstn_qty != 0) || (l_fp_opnpstn_qty != 0))	 Condition changed in ver 2.3 *  Commented in ver 2.4 **/
    if ((l_spn_opnpstn_qty != 0) ||  (l_fp_opnpstn_qty != 0)) 
    {

      EXEC SQL
      SELECT SUM ( QTY ),
             SUM ( VAL ),
             SUM ( MTM_VAL )
      INTO   :st_cntfut_pos.l_opnpstn_qty, 
             :st_cntfut_pos.d_org_opn_val,
             :st_cntfut_pos.d_mtm_opn_val
      FROM
      (
        SELECT FCP_OPNPSTN_QTY QTY,
               FCP_OPNPSTN_VAL VAL,
               FCP_MTM_OPN_VAL MTM_VAL
        FROM  FCP_FO_SPN_CNTRCT_PSTN
        WHERE FCP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
        AND   FCP_XCHNG_CD       = :c_xchng_cd
        AND   FCP_EXPRY_DT       = :st_cntfut_pos.c_expry_dt
      /***  AND   FCP_PRDCT_TYP      = 'F'  Commented in Ver 3.4 ***/
        AND   FCP_PRDCT_TYP      = :c_fut_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */
        AND   FCP_UNDRLYNG       = :st_cntfut_pos.c_undrlyng
        AND   FCP_EXER_TYP       = :st_cntfut_pos.c_exrc_typ
    	/**********  Commented in Ver 2.4 **********************
				UNION ALL
        SELECT SUM(s1 - s2) QTY,
               SUM(decode(sign(s1 -s2),1,(s1 -s2) * s3,-1,(s1 -s2) * s4,0)) VAL,
               SUm(decode(sign(s1 -s2),1,(s1 -s2) * s3,-1, (s1 -s2) * s4,0)) MTM_VAL
        FROM
        (
          SELECT nvl(sum(decode(FOD_ORDR_FLW,'B',FOD_EXEC_QTY)),0) s1,
                 nvl(sum(decode(FOD_ORDR_FLW,'S',FOD_EXEC_QTY)),0) s2,
                 sum(decode(FOD_ORDR_FLW,'B',FOD_LMT_RT)) s3,
                 sum(decode(FOD_ORDR_FLW,'S',FOD_LMT_RT)) s4
          FROM   FOD_FO_ORDR_DTLS
          WHERE  FOD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
          AND    FOD_XCHNG_CD       = :c_xchng_cd
          AND    FOD_EXPRY_DT       = :st_cntfut_pos.c_expry_dt
          AND    FOD_PRDCT_TYP      = 'U'
          AND    FOD_UNDRLYNG       = :st_cntfut_pos.c_undrlyng
          AND    FOD_EXER_TYP       = :st_cntfut_pos.c_exrc_typ
          AND    FOD_EXEC_QTY       != 0
        )
			******************************************************/
			 UNION ALL                                           /*** added in Ver 2.3 for F+ position of SPAN customer ***/
        /*** Below queries changed to upper case in Ver 3.4 ***/ 
        SELECT SUM(FFP_OPNPSTN_QTY) QTY,
               SUM(FFP_OPNPSTN_VAL) VAL,
               SUM(FFP_MTM_OPN_VAL) MTM_VAL
        FROM   FFP_FO_FUTURES_PSTN
        WHERE  FFP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
        AND    FFP_XCHNG_CD       = :c_xchng_cd
        AND    FFP_UNDRLYNG       = :st_cntfut_pos.c_undrlyng
        AND    FFP_EXPRY_DT       = :st_cntfut_pos.c_expry_dt
        AND    FFP_EXER_TYP       = :st_cntfut_pos.c_exrc_typ
      );

			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      {
          fn_errlog( c_ServiceName, "S31190", SQLMSG, c_errmsg.arr  );
          EXEC SQL CLOSE :cont_cursor;
          EXEC SQL FREE :cont_cursor;
  				/*** tpfree ( ( char * ) ptr_fml_Obuf ); *** Commented in VQC ***/
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

    }

  }

	/*** Ver 2.4 Starts ***/

	d_opn_sltp_val = 0.0;

	if(l_sltp_opnpstn_qty > 0 )
	{
		i_returncode = fn_sltpbuy_opnpstn(c_ServiceName,
                   										c_cln_mtch_accnt,
                   										c_xchng_cd,
                   										c_undrlyng,
                   										c_expry_dt,
                    									c_exrc_typ);

		if ( i_returncode == -1 )
    {
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      /*** tpfree ( ( char * ) ptr_fml_Obuf );   Commented in VQC ***/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }	
	
	}
	else if(l_sltp_opnpstn_qty < 0)
	{
		i_returncode = fn_sltpsell_opnpstn(c_ServiceName,
                                      c_cln_mtch_accnt,
                                      c_xchng_cd,
                                      c_undrlyng,
                                      c_expry_dt,
                                      c_exrc_typ);
	
		if ( i_returncode == -1 )
    {
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      /***  tpfree ( ( char * ) ptr_fml_Obuf );   Commented in VQC ***/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }	
	}
	else
	{
		d_opn_sltp_val = 0.0;	
	}

	st_cntfut_pos.l_opnpstn_qty = st_cntfut_pos.l_opnpstn_qty + l_sltp_opnpstn_qty;	
	st_cntfut_pos.d_org_opn_val = st_cntfut_pos.d_org_opn_val + d_opn_sltp_val;
	st_cntfut_pos.d_mtm_opn_val	= st_cntfut_pos.d_mtm_opn_val + d_opn_sltp_val;

	if( DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"SLTP FP open val :%lf:",d_opn_sltp_val);
		fn_userlog(c_ServiceName,"After change open val :%lf:",st_cntfut_pos.d_org_opn_val);
		fn_userlog(c_ServiceName,"After change mtm open val :%lf:",st_cntfut_pos.d_mtm_opn_val); 
		fn_userlog(c_ServiceName,"After Change opn qty :%ld:",st_cntfut_pos.l_opnpstn_qty); 
	}	
	/*** Ver 2.4 Ends ***/


  l_f_opnpstn_qty = l_f_opnpstn_qty + l_spn_opnpstn_qty + l_fp_opnpstn_qty + l_sltp_opnpstn_qty;

  if( DEBUG_MSG_LVL_5 )
  {
    fn_userlog(c_ServiceName,"OPEN POSITION QTY FOR FUTURE  IS :%ld:",l_f_opnpstn_qty);
    fn_userlog(c_ServiceName,"OPEN POSITION QTY FOR FUTURE PLUS IS :%ld:",l_fp_opnpstn_qty);
    fn_userlog(c_ServiceName,"OPEN POSITION QTY FOR SPAN IS :%ld:",l_spn_opnpstn_qty);
    fn_userlog(c_ServiceName,"OPEN POSITION QTY FOR SLTPFP IS :%ld:",l_sltp_opnpstn_qty);
  }

  /**** Ver 2.2 Ends ****/

	if(st_cntfut_pos.l_opnpstn_qty > 0 )
  {
   	st_cntfut_pos.c_opnpstn_flw = 'B';
  }
  else if(st_cntfut_pos.l_opnpstn_qty < 0 )
  { 
   	st_cntfut_pos.c_opnpstn_flw = 'S';
  }
  else
  {
   	st_cntfut_pos.c_opnpstn_flw = 'N';
  }

  /*** Ver 1.9 END ***/	
	/*** Ver 1.4 Starts	 ***/

  /******************************* Commented in Ver 2.2 *******************************

	MEMSET(c_prdct_typ);
	MEMSET(c_cprdct_typ);

	d_fpnet_avg_rt = 0;
  li_fpnet_qty_bal = 0;
	d_fnet_avg_rt = 0;
  li_fnet_qty_bal = 0;

	if( l_fp_opnpstn_qty > 0 && l_f_opnpstn_qty == 0 )
	{
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog (c_ServiceName,"INSIDE CONDITION l_fp_opnpstn_qty > 0 && l_f_opnpstn_qty == 0");
		}

		c_prdct_typ  = 'P';
		c_cprdct_typ = 'P';


		i_returncode = fn_buy_opnpsn(c_ServiceName,
																	c_cln_mtch_accnt,
																	c_xchng_cd,
										 							c_undrlyng,
																	c_expry_dt,
																	c_exrc_typ,
																	c_prdct_typ,
																	c_cprdct_typ);
		if ( i_returncode == -1 )
		{
			EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		d_fpcrst_prft    =  d_crst_prft;
		d_fpuncrst_prft  =  d_uncrst_prft;
    d_fpnet_avg_rt   =  d_net_avg_rt;
    li_fpnet_qty_bal = li_net_qty_bal;

		if( DEBUG_MSG_LVL_5 )
		{
			fn_userlog(c_ServiceName,"Buy Crystalised Profit/Loss Is :%lf:",d_fpcrst_prft);
			fn_userlog(c_ServiceName,"Buy UnCrystalised Profit/Loss Is :%lf:",d_fpuncrst_prft);
		}

	}
	else if (l_fp_opnpstn_qty > 0 && l_f_opnpstn_qty != 0 ) *** Added To Handel Same Position In Different Products ***
	{
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog (c_ServiceName,"INSIDE CONDITION l_fp_opnpstn_qty > 0 && l_f_opnpstn_qty != 0" );
		}

		if(l_f_opnpstn_qty > 0 )
		{
			c_prdct_typ  = 'P';
 			c_cprdct_typ = 'P';

 			i_returncode = fn_buy_opnpsn(c_ServiceName,
    	                            	c_cln_mtch_accnt,
                                  	c_xchng_cd,
                                  	c_undrlyng,
                                  	c_expry_dt,
                                  	c_exrc_typ,
                                  	c_prdct_typ,
                                  	c_cprdct_typ);
			if ( i_returncode == -1 )
 			{
    		EXEC SQL CLOSE :cont_cursor;
    		EXEC SQL FREE :cont_cursor;
   			tpfree ( ( char * ) ptr_fml_Obuf );
   			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
   			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 			}

 			d_fpcrst_prft   = d_crst_prft;
 			d_fpuncrst_prft = d_uncrst_prft;
   	  d_fpnet_avg_rt   =  d_net_avg_rt;
      li_fpnet_qty_bal = li_net_qty_bal;
		}

		if( DEBUG_MSG_LVL_5 )
		{
 			fn_userlog(c_ServiceName,"Buy Crystalised Profit/Loss Is :%lf:",d_fpcrst_prft);
			fn_userlog(c_ServiceName,"Buy UnCrystalised Profit/Loss Is :%lf:",d_fpuncrst_prft);
		}

	}
	else if ( l_fp_opnpstn_qty < 0 && l_f_opnpstn_qty == 0 )
	{
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog (c_ServiceName,"INSIDE CONDITION l_fp_opnpstn_qty < 0 && l_f_opnpstn_qty == 0" );
		}

		c_prdct_typ  = 'P';
		c_cprdct_typ = 'P';

  	i_returncode = fn_sell_opnpsn(c_ServiceName,
                                   c_cln_mtch_accnt,
                                   c_xchng_cd,
                                   c_undrlyng,
                                   c_expry_dt,
                                   c_exrc_typ,
                                   c_prdct_typ,
                                   c_cprdct_typ);

		if ( i_returncode == -1 )
    {
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		d_fpcrst_prft   = d_crst_prft;
		d_fpuncrst_prft = d_uncrst_prft;
    d_fpnet_avg_rt   =  d_net_avg_rt;
    li_fpnet_qty_bal = li_net_qty_bal;

		if( DEBUG_MSG_LVL_5 )
		{
			fn_userlog(c_ServiceName,"Sell Crystalised Profit/Loss Is :%lf:",d_fpcrst_prft);
 			fn_userlog(c_ServiceName,"Sell UnCrystalised Profit/Loss Is :%lf:",d_fpuncrst_prft);
		}

	}
	else if ( l_fp_opnpstn_qty < 0 && l_f_opnpstn_qty != 0 )
	{
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog (c_ServiceName,"INSIDE CONDITION  l_fp_opnpstn_qty < 0 && l_f_opnpstn_qty != 0");
		}

		if( l_f_opnpstn_qty < 0 )
		{
    	c_prdct_typ  = 'P';
    	c_cprdct_typ = 'P';

    	i_returncode = fn_sell_opnpsn(c_ServiceName,
                                   	 c_cln_mtch_accnt,
                                   	 c_xchng_cd,
                                     c_undrlyng,
                                     c_expry_dt,
                                   	 c_exrc_typ,
                                   	 c_prdct_typ,
                                   	 c_cprdct_typ);

    	if ( i_returncode == -1 )
    	{
      	EXEC SQL CLOSE :cont_cursor;
      	EXEC SQL FREE :cont_cursor;
      	tpfree ( ( char * ) ptr_fml_Obuf );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

    	d_fpcrst_prft   = d_crst_prft;
    	d_fpuncrst_prft = d_uncrst_prft;
      d_fpnet_avg_rt   =  d_net_avg_rt;
      li_fpnet_qty_bal = li_net_qty_bal;

			if( DEBUG_MSG_LVL_5 )
			{
    		fn_userlog(c_ServiceName,"Sell Crystalised Profit/Loss Is :%lf:",d_fpcrst_prft);
    		fn_userlog(c_ServiceName,"Sell UnCrystalised Profit/Loss Is :%lf:",d_fpuncrst_prft);
			}
		}

	}
	else if ( l_fp_opnpstn_qty == 0 && l_f_opnpstn_qty != 0 )
	{
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog (c_ServiceName,"INSIDE CONDITION l_fp_opnpstn_qty == 0 && l_f_opnpstn_qty != 0 ");
		}

		c_prdct_typ  = 'P';
    c_cprdct_typ = 'P';

		i_returncode = fn_sqroff_pstn (c_ServiceName,
                                   c_cln_mtch_accnt,
                                   c_xchng_cd,
                                   c_undrlyng,
                                   c_expry_dt,
                                   c_exrc_typ,
                                   c_prdct_typ ,
                                   c_cprdct_typ);

		if ( i_returncode == -1 )
 		{
   		EXEC SQL CLOSE :cont_cursor;
    	EXEC SQL FREE :cont_cursor;
   		tpfree ( ( char * ) ptr_fml_Obuf );
   		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
   		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 		}

 		d_fpcrst_prft   = d_crst_prft;
 		d_fpuncrst_prft = d_uncrst_prft;

		if( DEBUG_MSG_LVL_5 )
		{
 			fn_userlog(c_ServiceName,"Crystalised Profit/Loss Is :%lf:",d_fpcrst_prft);
 			fn_userlog(c_ServiceName,"UnCrystalised Profit/Loss Is :%lf:",d_fpuncrst_prft);
		}

	}
	else if ( l_fp_opnpstn_qty == 0 && l_f_opnpstn_qty == 0 )
	{
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog (c_ServiceName,"INSIDE CONDITION l_fp_opnpstn_qty == 0 && l_f_opnpstn_qty == 0 ");
		}

		c_prdct_typ  = 'P';
    c_cprdct_typ = 'P';


		i_returncode = fn_sqroff_pstn (c_ServiceName,
                                   c_cln_mtch_accnt,
                                   c_xchng_cd,
                                   c_undrlyng,
                                   c_expry_dt,
                                   c_exrc_typ,
                                   c_prdct_typ ,
                                   c_cprdct_typ);

    if ( i_returncode == -1 )
    {
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    d_fpcrst_prft   = d_crst_prft;
    d_fpuncrst_prft = d_uncrst_prft;

		if( DEBUG_MSG_LVL_5 )
		{
    	fn_userlog(c_ServiceName,"Crystalised Profit/Loss Is :%lf:",d_fpcrst_prft);
    	fn_userlog(c_ServiceName,"UnCrystalised Profit/Loss Is :%lf:",d_fpuncrst_prft);
		}
	}

	***	Handling Of Future Cases ***


	if( l_f_opnpstn_qty > 0 && l_fp_opnpstn_qty == 0 )
	{
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog (c_ServiceName,"INSIDE CONDITION l_f_opnpstn_qty > 0 && l_fp_opnpstn_qty == 0");
		}

		c_prdct_typ  = 'F';
		c_cprdct_typ = 'F';

		i_returncode = fn_buy_opnpsn(c_ServiceName,
                                  c_cln_mtch_accnt,
                                  c_xchng_cd,
																  c_undrlyng,
                                  c_expry_dt,
                                  c_exrc_typ,
                                  c_prdct_typ,
                                  c_cprdct_typ);
    if ( i_returncode == -1 )
    {
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		d_fcrst_prft   = d_crst_prft;
    d_funcrst_prft = d_uncrst_prft;
    d_fnet_avg_rt   =  d_net_avg_rt;
    li_fnet_qty_bal = li_net_qty_bal;

		if( DEBUG_MSG_LVL_5 )
		{
    	fn_userlog(c_ServiceName,"Buy Crystalised Profit/Loss Is :%lf:",d_fcrst_prft);
    	fn_userlog(c_ServiceName,"Buy UnCrystalised Profit/Loss Is :%lf:",d_funcrst_prft);
		  fn_userlog(c_ServiceName,"=============li_uncrst_qty is :%d:",li_uncrst_qty);
      fn_userlog(c_ServiceName,"=============d_Csell_val is :%lf:",d_Csell_val); 
      fn_userlog(c_ServiceName,"=============d_Cbuy_val is :%lf:",d_Cbuy_val);
		}

		
	
	}
	else if (l_f_opnpstn_qty > 0 && l_fp_opnpstn_qty != 0 )
	{
		if( DEBUG_MSG_LVL_3 )
		{
  		fn_userlog (c_ServiceName,"INSIDE CONDITION l_f_opnpstn_qty > 0 && l_fp_opnpstn_qty != 0 ");
		}

		if( l_fp_opnpstn_qty > 0 )
		{
  		c_prdct_typ  = 'F';
  		c_cprdct_typ = 'F';

  		i_returncode = fn_buy_opnpsn(c_ServiceName,
     		                            c_cln_mtch_accnt,
        	                        	c_xchng_cd,
          	                      	c_undrlyng,
            	                    	c_expry_dt,
              	                  	c_exrc_typ,
                	                	c_prdct_typ,
                  	              	c_cprdct_typ);
  		if ( i_returncode == -1 )
  		{
    		EXEC SQL CLOSE :cont_cursor;
    		EXEC SQL FREE :cont_cursor;
    		tpfree ( ( char * ) ptr_fml_Obuf );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}

  		d_fcrst_prft   = d_crst_prft;
  		d_funcrst_prft = d_uncrst_prft;
      d_fnet_avg_rt   =  d_net_avg_rt;
      li_fnet_qty_bal = li_net_qty_bal;

			if( DEBUG_MSG_LVL_5 )
			{
 		 		fn_userlog(c_ServiceName,"Buy Crystalised Profit/Loss Is :%lf:",d_fcrst_prft);
  			fn_userlog(c_ServiceName,"Buy UnCrystalised Profit/Loss Is :%lf:",d_funcrst_prft);
			}
		}
	}
	else if ( l_f_opnpstn_qty < 0 && l_fp_opnpstn_qty == 0 )
	{
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog (c_ServiceName,"INSIDE CONDITION l_f_opnpstn_qty < 0 && l_fp_opnpstn_qty == 0 ");
		}

		c_prdct_typ  = 'F';
    c_cprdct_typ = 'F';

		i_returncode = fn_sell_opnpsn(c_ServiceName,
                                   c_cln_mtch_accnt,
                                   c_xchng_cd,
                                   c_undrlyng,
                                   c_expry_dt,
                                   c_exrc_typ,
                                   c_prdct_typ,
                                   c_cprdct_typ);

		if ( i_returncode == -1 )
		{
  		EXEC SQL CLOSE :cont_cursor;
  		EXEC SQL FREE :cont_cursor;
  		tpfree ( ( char * ) ptr_fml_Obuf );
  		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
  		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		d_fcrst_prft   = d_crst_prft;
		d_funcrst_prft = d_uncrst_prft;
    d_fnet_avg_rt   =  d_net_avg_rt;
    li_fnet_qty_bal = li_net_qty_bal;
	
		if( DEBUG_MSG_LVL_5 )
		{
			fn_userlog(c_ServiceName,"Sell Crystalised Profit/Loss Is :%lf:",d_fcrst_prft);
			fn_userlog(c_ServiceName,"Sell UnCrystalised Profit/Loss Is :%lf:",d_funcrst_prft);
		}

	}
	else if ( l_f_opnpstn_qty < 0 && l_fp_opnpstn_qty != 0 )
	{
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog (c_ServiceName,"INSIDE CONDITION l_f_opnpstn_qty < 0 && l_fp_opnpstn_qty != 0");
		}

		if( l_fp_opnpstn_qty < 0)
		{
    	c_prdct_typ  = 'F';
    	c_cprdct_typ = 'F';

    	i_returncode = fn_sell_opnpsn(c_ServiceName,
      	                             c_cln_mtch_accnt,
        	                           c_xchng_cd,
          	                         c_undrlyng,
            	                       c_expry_dt,
              	                     c_exrc_typ,
                	                   c_prdct_typ,
                  	                 c_cprdct_typ);

    	if ( i_returncode == -1 )
    	{
      	EXEC SQL CLOSE :cont_cursor;
      	EXEC SQL FREE :cont_cursor;
      	tpfree ( ( char * ) ptr_fml_Obuf );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

    	d_fcrst_prft   = d_crst_prft;
    	d_funcrst_prft = d_uncrst_prft;
      d_fnet_avg_rt   =  d_net_avg_rt;
      li_fnet_qty_bal = li_net_qty_bal;

			if( DEBUG_MSG_LVL_5 )
			{
    		fn_userlog(c_ServiceName,"Sell Crystalised Profit/Loss Is :%lf:",d_fcrst_prft);
    		fn_userlog(c_ServiceName,"Sell UnCrystalised Profit/Loss Is :%lf:",d_funcrst_prft);	\
			}
		}

	}
	else if ( l_f_opnpstn_qty == 0 && l_fp_opnpstn_qty != 0 )
	{
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog (c_ServiceName,"INSIDE CONDITION l_f_opnpstn_qty == 0 && l_fp_opnpstn_qty != 0");
		}
	
		c_prdct_typ  = 'F';
		c_cprdct_typ = 'F';

		 i_returncode = fn_sqroff_pstn (c_ServiceName,
                                   c_cln_mtch_accnt,
                                   c_xchng_cd,
                                   c_undrlyng,
                                   c_expry_dt,
                                   c_exrc_typ,
                                   c_prdct_typ ,
                                   c_cprdct_typ);

    if ( i_returncode == -1 )
    {
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    d_fcrst_prft   = d_crst_prft;
    d_funcrst_prft = d_uncrst_prft;

		if( DEBUG_MSG_LVL_5 )
		{
    	fn_userlog(c_ServiceName,"Crystalised Profit/Loss Is :%lf:",d_fcrst_prft);
    	fn_userlog(c_ServiceName,"UnCrystalised Profit/Loss Is :%lf:",d_funcrst_prft);
		}

	}
	else if ( l_f_opnpstn_qty == 0 && l_fp_opnpstn_qty == 0 )
	{
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog (c_ServiceName,"INSIDE CONDITION l_f_opnpstn_qty == 0 && l_fp_opnpstn_qty == 0");
		}

		c_prdct_typ  = 'F';
		c_cprdct_typ = 'F';

		i_returncode = fn_sqroff_pstn (c_ServiceName,
                    						 	 c_cln_mtch_accnt,
                    							 c_xchng_cd,
                    							 c_undrlyng,
                    							 c_expry_dt,
                    							 c_exrc_typ,
                    							 c_prdct_typ ,
                    							 c_cprdct_typ);

		if ( i_returncode == -1 )
    {
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		d_fcrst_prft   = d_crst_prft;
		d_funcrst_prft = d_uncrst_prft;

		if( DEBUG_MSG_LVL_5 )
		{
			fn_userlog(c_ServiceName,"Crystalised Profit/Loss Is :%lf:",d_fcrst_prft);
			fn_userlog(c_ServiceName,"UnCrystalised Profit/Loss Is :%lf:",d_funcrst_prft);
		}

	}

		d_fnet_avg_rt = d_fpnet_avg_rt + d_fnet_avg_rt; * Ver 2.1 *
    li_fnet_qty_bal = li_fpnet_qty_bal + li_fnet_qty_bal; * Ver 2.1 *

	   d_avg_pr = d_fnet_avg_rt/(double)li_fnet_qty_bal; * Ver 2.1 *

	*** Handeling Of Cross Sqr-Off In Different Products ***

	if( l_fp_opnpstn_qty > 0 && l_f_opnpstn_qty < 0 && st_cntfut_pos.l_opnpstn_qty < 0 )
	{
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName,"INSIDE CROSS SQR-OFF CASE - 1");
		}

		d_Ccrst_prft 	  = 0;
		d_Cuncrst_prft  = 0;
		d_fpcrst_prft   = 0;
		d_fpuncrst_prft = 0;
		d_fcrst_prft    = 0;
    d_funcrst_prft  = 0;
		d_Cbuy_val      = 0;
		d_Csell_val     = 0;

		if( l_fp_opnpstn_qty > 0 )
		{
			c_prdct_typ  = 'P';
 			c_cprdct_typ = 'P';

 			i_returncode = fn_buy_opnpsn(c_ServiceName,
      				                      c_cln_mtch_accnt,
                             				c_xchng_cd,
                             				c_undrlyng,
                             				c_expry_dt,
                             				c_exrc_typ,
                             				c_prdct_typ,
                             				c_cprdct_typ);
 			if ( i_returncode == -1 )
 			{
   			EXEC SQL CLOSE :cont_cursor;
   			EXEC SQL FREE :cont_cursor;
   			tpfree ( ( char * ) ptr_fml_Obuf );
   			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
   			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 			}

 			d_fpcrst_prft   = d_crst_prft;
 			d_fpuncrst_prft = d_uncrst_prft;
			li_fpuncrst_qty = li_uncrst_qty ;
			d_Cbuy_val 		  = d_opn_buy_val ;

			if( DEBUG_MSG_LVL_5 )
			{
 				fn_userlog(c_ServiceName,"d_fpcrst_prft Is :%lf:",d_fpcrst_prft);
 				fn_userlog(c_ServiceName,"d_fpuncrst_prft Is :%lf:",d_fpuncrst_prft);
				fn_userlog(c_ServiceName,"li_fpuncrst_qty Is :%ld:",li_fpuncrst_qty);
				fn_userlog(c_ServiceName,"CROSS SQR-OFF BEFORE BUY VAL IS :%lf:",d_Cbuy_val);
			}
		}
		if ( l_f_opnpstn_qty < 0 )
		{
			c_prdct_typ  = 'F';
			c_cprdct_typ = 'F';

 			i_returncode = fn_sell_opnpsn(c_ServiceName,
                                		 c_cln_mtch_accnt,
                                		 c_xchng_cd,
                                		 c_undrlyng,
                                     c_expry_dt,
                                     c_exrc_typ,
                                     c_prdct_typ,
                                     c_cprdct_typ);

 			if ( i_returncode == -1 )
 			{
   			EXEC SQL CLOSE :cont_cursor;
   			EXEC SQL FREE :cont_cursor;
   			tpfree ( ( char * ) ptr_fml_Obuf );
   			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
   			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 			}

 			d_fcrst_prft   = d_crst_prft;
 			d_funcrst_prft = d_uncrst_prft;
			li_funcrst_qty = li_uncrst_qty ;
			li_fexctd_rt   = li_exctd_rt ;
			d_Csell_val 	 = d_sell_val;

			if( DEBUG_MSG_LVL_5 )
			{
 				fn_userlog(c_ServiceName,"d_fcrst_prft Is :%lf:",d_fcrst_prft);
 				fn_userlog(c_ServiceName,"d_funcrst_prft Is :%lf:",d_funcrst_prft);
				fn_userlog(c_ServiceName,"li_funcrst_qty Is :%ld:",li_funcrst_qty);
			}
		}
		
			li_crst_qty   = li_funcrst_qty - li_fpuncrst_qty;
			li_uncrst_qty = li_funcrst_qty - li_crst_qty;

			d_Csell_val    = ( li_crst_qty * li_fexctd_rt ) - d_frsh_brk - d_cvr_brk;
			d_funcrst_prft = d_Csell_val  - ((double) li_uncrst_qty * (double)st_cntrct_qt.l_lst_trdd_prc );

			d_Ccrst_prft 	 = d_fcrst_prft + d_fpcrst_prft + (d_Csell_val - d_Cbuy_val) ;
			d_Cuncrst_prft = d_funcrst_prft;


			d_fcrst_prft    = 0;
			d_fpcrst_prft   = 0;
			d_fpuncrst_prft = 0;
			d_funcrst_prft  = 0;

	}
	else if ( l_fp_opnpstn_qty > 0 && l_f_opnpstn_qty < 0 && st_cntfut_pos.l_opnpstn_qty > 0 )
	{
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName,"INSIDE CROSS SQR-OFF CASE - 2");
		}

		d_Ccrst_prft    = 0;
    d_Cuncrst_prft  = 0;
    d_fpcrst_prft   = 0;
    d_fpuncrst_prft = 0;
    d_fcrst_prft    = 0;
    d_funcrst_prft  = 0;
    d_Cbuy_val      = 0;
    d_Csell_val     = 0;
		li_fpuncrst_qty = 0;
		li_fpexctd_rt   = 0;
		li_funcrst_qty	= 0;
		li_fexctd_rt		=	0;

		*commented in version 2.1*
		*if( l_fp_opnpstn_qty > 0 )
		{
			c_prdct_typ  = 'P';
 			c_cprdct_typ = 'P';

			i_returncode = fn_buy_opnpsn(c_ServiceName,
                                  	c_cln_mtch_accnt,
                                  	c_xchng_cd,
                                  	c_undrlyng,
                                  	c_expry_dt,
                                  	c_exrc_typ,
                                  	c_prdct_typ,
                                  	c_cprdct_typ);
    	if ( i_returncode == -1 )
    	{
      	EXEC SQL CLOSE :cont_cursor;
      	EXEC SQL FREE :cont_cursor;
      	tpfree ( ( char * ) ptr_fml_Obuf );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

			d_fpcrst_prft   = d_crst_prft;
      d_fpuncrst_prft = d_uncrst_prft;
      li_fpuncrst_qty = li_uncrst_qty ;
			li_fpexctd_rt		=	li_exctd_rt;
      d_Cbuy_val      = d_opn_buy_val ;

			if( DEBUG_MSG_LVL_5 )
			{
				fn_userlog(c_ServiceName,"Inside Check d_fpcrst_prft is :%lf:",d_fpcrst_prft);
				fn_userlog(c_ServiceName,"Inside Check d_fpuncrst_prft is :%lf:",d_fpuncrst_prft);
				fn_userlog(c_ServiceName,"Inside Check d_Cbuy_val is :%lf:",d_Cbuy_val);
				fn_userlog(c_ServiceName,"Inside Check li_fpuncrst_qty is :%ld:",li_fpuncrst_qty); 
			}

		}*

		if ( l_f_opnpstn_qty < 0 )
		{
			c_prdct_typ  = 'F';
 			c_cprdct_typ = 'F';

 			i_returncode = fn_sell_opnpsn(c_ServiceName,
      		                           c_cln_mtch_accnt,
                                     c_xchng_cd,
                                     c_undrlyng,
                                     c_expry_dt,
                                     c_exrc_typ,
                                     c_prdct_typ,
                                     c_cprdct_typ);

 		  if ( i_returncode == -1 )
 			{
   			EXEC SQL CLOSE :cont_cursor;
   			EXEC SQL FREE :cont_cursor;
   			tpfree ( ( char * ) ptr_fml_Obuf );
   			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
   			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 			}

 			d_fcrst_prft   = d_crst_prft;
 			d_funcrst_prft = d_uncrst_prft;
 			li_funcrst_qty = li_uncrst_qty ;
 			li_fexctd_rt   = li_exctd_rt ;
 			d_Csell_val    = d_opn_sell_val;

			if( DEBUG_MSG_LVL_5 )
			{
				fn_userlog(c_ServiceName,"Inside Sell Check d_fcrst_prft is :%lf:",d_fcrst_prft);
				fn_userlog(c_ServiceName,"Inside Sell Check d_funcrst_prft is :%lf:",d_funcrst_prft);
				fn_userlog(c_ServiceName,"Inside Sell Check li_funcrst_qty is :%ld:", li_funcrst_qty);
				fn_userlog(c_ServiceName,"Inside Sell Check li_fexctd_rt is :%ld:",li_fexctd_rt);
				fn_userlog(c_ServiceName,"Inside Sell Check d_Csell_val is :%lf:", d_Csell_val);
			}

		}
    *Ver 2.1 Start* 
		if( l_fp_opnpstn_qty > 0 )
    {
      c_prdct_typ  = 'P';
      c_cprdct_typ = 'P';

      i_returncode = fn_buy_opnpsn(c_ServiceName,
                                    c_cln_mtch_accnt,
                                    c_xchng_cd,
                                    c_undrlyng,
                                    c_expry_dt,
                                    c_exrc_typ,
                                    c_prdct_typ,
                                    c_cprdct_typ);
      if ( i_returncode == -1 )
      {
        EXEC SQL CLOSE :cont_cursor;
        EXEC SQL FREE :cont_cursor;
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      d_fpcrst_prft   = d_crst_prft;
      d_fpuncrst_prft = d_uncrst_prft;
      li_fpuncrst_qty = li_uncrst_qty ;
      li_fpexctd_rt   = li_exctd_rt;
      d_Cbuy_val      = d_opn_buy_val ;

      if( DEBUG_MSG_LVL_5 )
      {
        fn_userlog(c_ServiceName,"Inside Check d_fpcrst_prft is :%lf:",d_fpcrst_prft);
        fn_userlog(c_ServiceName,"Inside Check d_fpuncrst_prft is :%lf:",d_fpuncrst_prft);
        fn_userlog(c_ServiceName,"Inside Check d_Cbuy_val is :%lf:",d_Cbuy_val);
        fn_userlog(c_ServiceName,"Inside Check li_fpuncrst_qty is :%ld:",li_fpuncrst_qty);
      }

    }* Version 2.1 Ends *

		li_crst_qty   = li_fpuncrst_qty - li_funcrst_qty;
    li_uncrst_qty = li_fpuncrst_qty - li_crst_qty;

		if( DEBUG_MSG_LVL_5 )
		{
			fn_userlog(c_ServiceName,"li_crst_qty is :%ld:",li_crst_qty);
			fn_userlog(c_ServiceName,"li_uncrst_qty  is :%ld:",li_uncrst_qty);
		}

    d_Cbuy_val    = ( li_crst_qty * li_fpexctd_rt ) - d_frsh_brk - d_cvr_brk;
    d_fpuncrst_prft = ((double) li_uncrst_qty * (double)st_cntrct_qt.l_lst_trdd_prc ) - d_Cbuy_val;

		if( DEBUG_MSG_LVL_5 )
		{
			fn_userlog(c_ServiceName,"d_Csell_val IS :%lf:",d_Csell_val);
			fn_userlog(c_ServiceName,"d_Cbuy_val IS :%lf:",d_Cbuy_val);
		}

    d_Ccrst_prft   = d_fcrst_prft + d_fpcrst_prft + (d_Csell_val - d_Cbuy_val) ;
    d_Cuncrst_prft = d_fpuncrst_prft;


    d_fcrst_prft    = 0;
    d_fpcrst_prft   = 0;
    d_fpuncrst_prft = 0;
    d_funcrst_prft  = 0;
	
	}
	else if ( l_fp_opnpstn_qty < 0 && l_f_opnpstn_qty > 0 && st_cntfut_pos.l_opnpstn_qty < 0 )
	{
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName,"INSIDE CROSS SQR-OFF CASE - 3");
		}
		
 		d_Ccrst_prft    = 0;
	  d_Cuncrst_prft  = 0;
 		d_fpcrst_prft   = 0;
 		d_fpuncrst_prft = 0;
 		d_fcrst_prft    = 0;
 		d_funcrst_prft  = 0;
 		d_Cbuy_val      = 0;
 		d_Csell_val     = 0;
 		li_fpuncrst_qty = 0;
 		li_fpexctd_rt   = 0;
 		li_funcrst_qty  = 0;
 		li_fexctd_rt    = 0;

    * Commented in ver 2.1 *
		*if(l_fp_opnpstn_qty < 0)
		{
			c_prdct_typ  = 'P';
 			c_cprdct_typ = 'P';

 			i_returncode = fn_sell_opnpsn(c_ServiceName,
      		                           c_cln_mtch_accnt,
           			                     c_xchng_cd,
                		                 c_undrlyng,
                     			           c_expry_dt,
                          		       c_exrc_typ,
                                     c_prdct_typ,
                                		 c_cprdct_typ);

 			if ( i_returncode == -1 )
 			{
   			EXEC SQL CLOSE :cont_cursor;
   			EXEC SQL FREE :cont_cursor;
   			tpfree ( ( char * ) ptr_fml_Obuf );
   			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
   			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 			}
			
			d_fpcrst_prft   = d_crst_prft;
 			d_fpuncrst_prft = d_uncrst_prft;
 			li_fpuncrst_qty = li_uncrst_qty ;
 			li_fpexctd_rt   = li_exctd_rt ;
 			d_Csell_val    = d_sell_val;

		} *
		
		if ( l_f_opnpstn_qty > 0 )
		{
			c_prdct_typ  = 'F';
      c_cprdct_typ = 'F';

			
      i_returncode = fn_buy_opnpsn(c_ServiceName,
                                    c_cln_mtch_accnt,
                                    c_xchng_cd,
                                    c_undrlyng,
                                    c_expry_dt,
                                    c_exrc_typ,
                                    c_prdct_typ,
                                    c_cprdct_typ);
      if ( i_returncode == -1 )
      {
        EXEC SQL CLOSE :cont_cursor;
        EXEC SQL FREE :cont_cursor;
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      d_fcrst_prft   = d_crst_prft;
      d_funcrst_prft = d_uncrst_prft;
      li_funcrst_qty = li_uncrst_qty ;
      li_fexctd_rt   = li_exctd_rt;
      d_Cbuy_val     = d_opn_buy_val ;

		}
    * Version 2.1 Starts *
    if(l_fp_opnpstn_qty < 0)
    {
      c_prdct_typ  = 'P';
      c_cprdct_typ = 'P';

      i_returncode = fn_sell_opnpsn(c_ServiceName,
                                     c_cln_mtch_accnt,
                                     c_xchng_cd,
                                     c_undrlyng,
                                     c_expry_dt,
                                     c_exrc_typ,
                                     c_prdct_typ,
                                     c_cprdct_typ);

      if ( i_returncode == -1 )
      {
        EXEC SQL CLOSE :cont_cursor;
        EXEC SQL FREE :cont_cursor;
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      d_fpcrst_prft   = d_crst_prft;
      d_fpuncrst_prft = d_uncrst_prft;
      li_fpuncrst_qty = li_uncrst_qty ;
      li_fpexctd_rt   = li_exctd_rt ;
      d_Csell_val    = d_sell_val;

    }* Version 2.1 ends *
	
		li_crst_qty   = li_fpuncrst_qty - li_funcrst_qty;
		li_uncrst_qty = li_fpuncrst_qty - li_crst_qty;

		d_Csell_val = ( li_crst_qty * li_fpexctd_rt ) - d_frsh_brk - d_cvr_brk;


		if( DEBUG_MSG_LVL_5 )
		{
			fn_userlog(c_ServiceName,"d_fcrst_prft is :%lf:",d_fcrst_prft);
			fn_userlog(c_ServiceName,"d_fpcrst_prft is :%lf:",d_fpcrst_prft);
			fn_userlog(c_ServiceName,"d_Csell_val is :%lf:",d_Csell_val);
			fn_userlog(c_ServiceName,"d_Cbuy_val is :%lf:",d_Cbuy_val);
		}

		d_Ccrst_prft   = d_fcrst_prft + d_fpcrst_prft + (d_Csell_val - d_Cbuy_val) ;

		d_fpuncrst_prft = d_Csell_val  - ((double) li_uncrst_qty * (double)st_cntrct_qt.l_lst_trdd_prc );


		d_Cuncrst_prft = d_fpuncrst_prft;

		if( DEBUG_MSG_LVL_5 )
		{
			fn_userlog(c_ServiceName,"d_uncrst_prft is :%lf:",d_uncrst_prft);
		}

    d_fcrst_prft    = 0;
    d_fpcrst_prft   = 0;
    d_fpuncrst_prft = 0;
    d_funcrst_prft  = 0;
		
	}
	else if ( l_fp_opnpstn_qty < 0 && l_f_opnpstn_qty > 0 && st_cntfut_pos.l_opnpstn_qty > 0 )
	{
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName,"INSIDE CROSS SQR-OFF CASE - 4");
		}
		
		d_Ccrst_prft    = 0;
		d_Cuncrst_prft  = 0;
		d_fpcrst_prft   = 0;
		d_fpuncrst_prft = 0;
		d_fcrst_prft    = 0;
		d_funcrst_prft  = 0;
		d_Cbuy_val      = 0;
		d_Csell_val     = 0;
		li_fpuncrst_qty = 0;
		li_fpexctd_rt   = 0;
		li_funcrst_qty  = 0;
		li_fexctd_rt    = 0;

		if ( l_fp_opnpstn_qty < 0 )
		{
	  	c_prdct_typ  = 'P';
 			c_cprdct_typ = 'P';

		  i_returncode = fn_sell_opnpsn(c_ServiceName,
      		                           c_cln_mtch_accnt,
           			                     c_xchng_cd,
                		                 c_undrlyng,
                      		           c_expry_dt,
                           			     c_exrc_typ,
                                		 c_prdct_typ,
                                		 c_cprdct_typ);

 			if ( i_returncode == -1 )
 			{
   			EXEC SQL CLOSE :cont_cursor;
   			EXEC SQL FREE :cont_cursor;
   			tpfree ( ( char * ) ptr_fml_Obuf );
   			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
   			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 			}

 			d_fpcrst_prft   = d_crst_prft;
 			d_fpuncrst_prft = d_uncrst_prft;
 			li_fpuncrst_qty = li_uncrst_qty ;
 			li_fpexctd_rt   = li_exctd_rt ;
 			d_Csell_val     = d_opn_sell_val;

			if( DEBUG_MSG_LVL_5 )
			{
 				fn_userlog(c_ServiceName,"Inside Sell Check d_fpcrst_prft is :%lf:",d_fpcrst_prft);
 				fn_userlog(c_ServiceName,"Inside Sell Check d_fpuncrst_prft is :%lf:",d_fpuncrst_prft);
 				fn_userlog(c_ServiceName,"Inside Sell Check li_fpuncrst_qty is :%ld:", li_fpuncrst_qty);
 				fn_userlog(c_ServiceName,"Inside Sell Check li_fpexctd_rt is :%ld:",li_fpexctd_rt);
 				fn_userlog(c_ServiceName,"Inside Sell Check d_Csell_val is :%lf:", d_Csell_val);
			}
		}

		if ( l_f_opnpstn_qty > 0 )
		{
			c_prdct_typ  = 'F';
 			c_cprdct_typ = 'F';

 			i_returncode = fn_buy_opnpsn(c_ServiceName,
      		                          c_cln_mtch_accnt,
           			                    c_xchng_cd,
                		                c_undrlyng,
                     			          c_expry_dt,
                          		      c_exrc_typ,
                               			c_prdct_typ,
                               			c_cprdct_typ);
 			if ( i_returncode == -1 )
 			{
   			EXEC SQL CLOSE :cont_cursor;
   			EXEC SQL FREE :cont_cursor;
   			tpfree ( ( char * ) ptr_fml_Obuf );
   			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
   			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 			}

 			d_fcrst_prft   = d_crst_prft;
 			d_funcrst_prft = d_uncrst_prft;
 			li_funcrst_qty = li_uncrst_qty ;
 			li_fexctd_rt   = li_exctd_rt;
		}

		li_crst_qty   = li_funcrst_qty - li_fpuncrst_qty;
		li_uncrst_qty = li_funcrst_qty - li_crst_qty;

		d_Cbuy_val    = ( li_crst_qty * li_fexctd_rt ) - d_frsh_brk - d_cvr_brk;

		if( DEBUG_MSG_LVL_5 )
		{
			fn_userlog(c_ServiceName,"HERE d_Cbuy_val is :%lf:",d_Cbuy_val);
			fn_userlog(c_ServiceName,"HERE d_Csell_val is :%lf:",d_Csell_val);
			fn_userlog(c_ServiceName,"HERE st_cntrct_qt.l_lst_trdd_prc is :%ld:",st_cntrct_qt.l_lst_trdd_prc);
			fn_userlog(c_ServiceName,"HERE li_uncrst_qty  is :%ld:",li_uncrst_qty);
		}

		d_funcrst_prft = ((double) li_uncrst_qty * (double) st_cntrct_qt.l_lst_trdd_prc ) - d_Cbuy_val;

		if( DEBUG_MSG_LVL_5 )
		{
			fn_userlog(c_ServiceName,"HERE d_fcrst_prft is :%lf:",d_fcrst_prft);
			fn_userlog(c_ServiceName,"HERE d_fpcrst_prft is :%lf:",d_fpcrst_prft);
		}
                   
		d_Ccrst_prft   = d_fcrst_prft + d_fpcrst_prft + (d_Csell_val - d_Cbuy_val) ;

		if( DEBUG_MSG_LVL_5 )
		{
			fn_userlog(c_ServiceName,"HERE d_Ccrst_prft  is :%lf:",d_Ccrst_prft);
		}
		d_Cuncrst_prft = d_funcrst_prft;
			

		d_fcrst_prft    = 0;
 		d_fpcrst_prft   = 0;
 	  d_fpuncrst_prft = 0;
    d_funcrst_prft  = 0;
	}
	else if ( l_fp_opnpstn_qty < 0 && l_f_opnpstn_qty > 0 && st_cntfut_pos.l_opnpstn_qty == 0 )
	{
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName,"INSIDE CROSS SQR-OFF CASE - 5");
		}

		c_prdct_typ  = 'F';
    c_cprdct_typ = 'P';
    d_fpcrst_prft = 0 ;
	  d_fcrst_prft = 0 ;
    d_fpuncrst_prft = 0;
		d_funcrst_prft = 0;
		d_Ccrst_prft = 0 ;
 		d_Cuncrst_prft = 0;


		if(l_fp_opnpstn_qty < 0 )
		{
			c_prdct_typ  = 'P';
    	c_cprdct_typ = 'P';
			
			i_returncode = fn_sell_opnpsn(c_ServiceName,
                                   c_cln_mtch_accnt,
                                   c_xchng_cd,
                                   c_undrlyng,
                                   c_expry_dt,
                                   c_exrc_typ,
                                   c_prdct_typ,
                                   c_cprdct_typ);

    	if ( i_returncode == -1 )
    	{
      	EXEC SQL CLOSE :cont_cursor;
      	EXEC SQL FREE :cont_cursor;
      	tpfree ( ( char * ) ptr_fml_Obuf );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

    	d_fpcrst_prft   = d_crst_prft;
    	d_fpuncrst_prft = d_uncrst_prft;

			if( DEBUG_MSG_LVL_5 )
			{
				fn_userlog(c_ServiceName,"d_fpcrst_prft Is :%lf:",d_fpcrst_prft);
				fn_userlog(c_ServiceName,"d_fpuncrst_prft Is :%lf:",d_fpuncrst_prft);
			}
		}

		if ( l_f_opnpstn_qty > 0 )
		{
			c_prdct_typ  = 'F';
			c_cprdct_typ = 'F';

			
    	i_returncode = fn_buy_opnpsn(c_ServiceName,
      	                            c_cln_mtch_accnt,
        	                          c_xchng_cd,
          	                        c_undrlyng,
            	                      c_expry_dt,
              	                    c_exrc_typ,
                	                  c_prdct_typ,
                  	                c_cprdct_typ);
    	if ( i_returncode == -1 )
    	{
      	EXEC SQL CLOSE :cont_cursor;
      	EXEC SQL FREE :cont_cursor;
      	tpfree ( ( char * ) ptr_fml_Obuf );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

    	d_fcrst_prft   = d_crst_prft;
    	d_funcrst_prft = d_uncrst_prft;

			if( DEBUG_MSG_LVL_5 )
			{
				fn_userlog(c_ServiceName,"d_fcrst_prft Is :%lf:",d_fcrst_prft);
				fn_userlog(c_ServiceName,"d_funcrst_prft Is :%lf:",d_funcrst_prft);
			}

		}
		
		d_Ccrst_prft = d_fpcrst_prft + d_fpuncrst_prft + d_fcrst_prft + d_funcrst_prft;

		d_fpcrst_prft = 0;
		d_fpuncrst_prft = 0;
		d_fcrst_prft = 0;
		d_funcrst_prft = 0;

		if( DEBUG_MSG_LVL_5 )
		{
			fn_userlog(c_ServiceName,"AFTER ADDITION CRYSTALISED PROFIT/LOSS IS :%lf:",d_Ccrst_prft);
		}
		
		d_avg_pr = 0.00; * Version 2.1 *
	}
	else if ( l_fp_opnpstn_qty > 0 && l_f_opnpstn_qty < 0 && st_cntfut_pos.l_opnpstn_qty == 0 )
	{
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName,"INSIDE CROSS SQR-OFF CASE - 6");
		}

		d_fpcrst_prft = 0 ;
 		d_fcrst_prft = 0 ;
 		d_fpuncrst_prft = 0;
 		d_funcrst_prft = 0;
 		d_Ccrst_prft = 0 ;
 		d_Cuncrst_prft = 0;

		if( l_fp_opnpstn_qty > 0 )
		{
			c_prdct_typ  = 'P';
 			c_cprdct_typ = 'P';

			i_returncode = fn_buy_opnpsn(c_ServiceName,
                                  c_cln_mtch_accnt,
                                  c_xchng_cd,
                                  c_undrlyng,
                                  c_expry_dt,
                                  c_exrc_typ,
                                  c_prdct_typ,
                                  c_cprdct_typ);
    	if ( i_returncode == -1 )
    	{
      	EXEC SQL CLOSE :cont_cursor;
      	EXEC SQL FREE :cont_cursor;
      	tpfree ( ( char * ) ptr_fml_Obuf );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

			d_fpcrst_prft   = d_crst_prft;
    	d_fpuncrst_prft = d_uncrst_prft;

			if( DEBUG_MSG_LVL_5 )
			{
				fn_userlog(c_ServiceName,"d_fpcrst_prft Is :%lf:",d_fpcrst_prft);
      	fn_userlog(c_ServiceName,"d_fpuncrst_prft Is :%lf:",d_fpuncrst_prft);
			}
		}
		
		if ( l_f_opnpstn_qty < 0 )
		{
			c_prdct_typ  = 'F';
 			c_cprdct_typ = 'F';

 			i_returncode = fn_sell_opnpsn(c_ServiceName,
      		                           c_cln_mtch_accnt,
           			                     c_xchng_cd,
                			               c_undrlyng,
                      			         c_expry_dt,
                            			   c_exrc_typ,
                                     c_prdct_typ,
                                		 c_cprdct_typ);

 			if ( i_returncode == -1 )
 			{
   			EXEC SQL CLOSE :cont_cursor;
   			EXEC SQL FREE :cont_cursor;
   			tpfree ( ( char * ) ptr_fml_Obuf );
   			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
   			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 			}

 			d_fcrst_prft   = d_crst_prft;
 			d_funcrst_prft = d_uncrst_prft;

			if( DEBUG_MSG_LVL_5 )
			{
				fn_userlog(c_ServiceName,"d_fcrst_prft Is :%lf:",d_fcrst_prft);
 				fn_userlog(c_ServiceName,"d_funcrst_prft Is :%lf:",d_funcrst_prft);
			}
		}

		d_Ccrst_prft = d_fpcrst_prft + d_fpuncrst_prft + d_fcrst_prft + d_funcrst_prft;

    d_fpcrst_prft = 0;
    d_fpuncrst_prft = 0;
    d_fcrst_prft = 0;
    d_funcrst_prft = 0;

		if( DEBUG_MSG_LVL_5 )
		{
    	fn_userlog(c_ServiceName,"AFTER ADDITION CRYSTALISED PROFIT/LOSS IS :%lf:",d_Ccrst_prft);
		}
		d_avg_pr = 0.00; * Version 2.1 *
	}

  ******************* Comment Ends ver 2.2  ******************************************/

	/*** Ver 2.2 Starts *****/

	c_cprdct_typ = 'F'; /*** ver 2.8 this variable used as a request type for open position page changes ***/

  if (l_f_opnpstn_qty > 0 )
  {
    st_cntfut_pos.c_opnpstn_flw = 'B';

      i_returncode = fn_buy_opnpsn(c_ServiceName,
                                  c_cln_mtch_accnt,
                                  c_xchng_cd,
                                  c_undrlyng,
                                  c_expry_dt,
                                  c_exrc_typ,
                                  c_prdct_typ,
                                  c_cprdct_typ);

      if(i_returncode == -1)
      {
        EXEC SQL CLOSE :cont_cursor;
        EXEC SQL FREE :cont_cursor;
        /***  tpfree ( ( char * ) ptr_fml_Obuf );   Commented in VQC ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
  }
  else if ( l_f_opnpstn_qty < 0 )
    {
       st_cntfut_pos.c_opnpstn_flw = 'S';

    i_returncode = fn_sell_opnpsn(c_ServiceName,
                                     c_cln_mtch_accnt,
                                     c_xchng_cd,
                                     c_undrlyng,
                                     c_expry_dt,
                                     c_exrc_typ,
                                     c_prdct_typ,
                                     c_cprdct_typ);

      if(i_returncode == -1)
      {
        EXEC SQL CLOSE :cont_cursor;
        EXEC SQL FREE :cont_cursor;
        /***   tpfree ( ( char * ) ptr_fml_Obuf );   Commented in VQC ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    else if ( l_f_opnpstn_qty == 0 )
    {
      st_cntfut_pos.c_opnpstn_flw = 'N';
			
			i_returncode = fn_sqroff_pstn (c_ServiceName,
                                   c_cln_mtch_accnt,
                                   c_xchng_cd,
                                   c_undrlyng,
                                   c_expry_dt,
                                   c_exrc_typ,
                                   c_prdct_typ ,
                                   c_cprdct_typ);

      if(i_returncode == -1)
      {
        EXEC SQL CLOSE :cont_cursor;
        EXEC SQL FREE :cont_cursor;
        /*** tpfree ( ( char * ) ptr_fml_Obuf );       Commented in VQC ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

	/*** Ver 2.2 ends *****/


	if( DEBUG_MSG_LVL_5 )
	{
		fn_userlog(c_ServiceName,"d_crst_prft Is :%lf:",d_crst_prft);
		/*** Commented in VQC as variables are commented *** 

  	fn_userlog(c_ServiceName,"d_fpcrst_prft Is :%lf:",d_fpcrst_prft); 
		fn_userlog(c_ServiceName,"d_fpuncrst_prft Is :%lf:", d_fpuncrst_prft);

		 ***/
		fn_userlog(c_ServiceName,"=============li_uncrst_qty is :%d:",li_uncrst_qty);
    /*** Commented in VQC *** fn_userlog(c_ServiceName,"=============d_Csell_val is :%lf:",d_Csell_val); 
    fn_userlog(c_ServiceName,"=============d_Cbuy_val is :%lf:",d_Cbuy_val); ***/
	}

  if( st_cntfut_pos.c_opnpstn_flw == 'N') /** Version 2.1 */
	{
		d_avg_pr = 0.00; 
	}

	/*******
	d_crst_prft 	= d_fpcrst_prft 	+ d_fcrst_prft + d_Ccrst_prft;
	d_uncrst_prft = d_fpuncrst_prft + d_funcrst_prft + d_Cuncrst_prft;
	Commented in Ver 2.2 ****/

	rec_cnt =  1;
	ret_val = 0;
   
   /*** Commeneted in VQC as DEBUG is not defined so it will never get executed ***
	
		#ifdef DEBUG
		i_clnts = sizeof(st_cntrct_q.c_xchng_cd)+sizeof(st_cntrct_q.c_prdct_typ)+sizeof(st_cntrct_q.c_undrlyng);
		i_clnts = i_clnts + sizeof(st_cntrct_q.c_expry_dt)+sizeof(st_cntrct_q.c_exrc_typ);
    i_clnts = i_clnts + sizeof(st_cntrct_q.c_ctgry_indstk)+ sizeof(st_cntfut_pos.l_opnpstn_qty);
    i_clnts = i_clnts + sizeof(st_cntfut_pos.d_org_opn_val)+sizeof(st_cntrct_qt.l_lst_trdd_prc);
		i_clnts = i_clnts + sizeof(d_crst_prft)+sizeof(d_uncrst_prft);
		i_clnts = i_clnts + sizeof(c_cln_mtch_accnt)+sizeof(rec_cnt)+sizeof(ret_val);
		
		fn_userlog( c_ServiceName, "Size of fml is %d", i_clnts);

    fn_userlog( c_ServiceName, "Open Position Value is :%lf:",st_cntfut_pos.d_org_opn_val);
		#endif

    ****************************/


/******************************************************************************/

		/** Ver  1.8 average price  display is only for open position **/ 

  /*** Commented in VQC Starts ***

		EXEC SQL
      SELECT decode(:st_cntfut_pos.l_opnpstn_qty, 0, 0, round(((:st_cntfut_pos.d_mtm_opn_val/:st_cntfut_pos.l_opnpstn_qty)),2) )
      INTO : d_base_prc
      FROM  dual;	

  *******************************/

			/*l_avg_trd_prc = (long)d_base_prc;*//*commented in ver 2.1*/
			l_avg_trd_prc = (long)d_avg_pr;/* Ver 2.1 */


	/*********************************** Ver 1.8 Ends *****************************/


	if( DEBUG_MSG_LVL_5 )
	{
		fn_userlog(c_ServiceName,"l_avg_trd_prc Is :%ld:", l_avg_trd_prc);		/** 1.8 **/
 /*	fn_userlog(c_ServiceName,"d_base_prc Is :%lf:", d_base_prc);	** 1.8 **  Commented in VQC ***/
		fn_userlog(c_ServiceName,"C_CLN_MTCH_ACCNT Is :%s:",c_cln_mtch_accnt);
		fn_userlog(c_ServiceName,"C_PRD_TYP Is :%c:",st_cntrct.c_prd_typ);
		fn_userlog(c_ServiceName,"C_UNDRLYNG Is :%s:", c_undrlyng);
		fn_userlog(c_ServiceName,"C_EXPRY_DT Is :%s:", c_expry_dt);
		fn_userlog(c_ServiceName,"C_XCHNG_CD Is :%s:", c_xchng_cd);
	}

	
		/*** follwoing querry is commented in Ver 1.8 ********/
    /* 1.5 Changes by Venture M for adding average price to Portfolio display*/

/*    EXEC SQL
      SELECT SUM(SUM_TOTAL_VAL)/ SUM(SUM_TOTAL_QTY)
      INTO :l_avg_trd_prc
      FROM
      (
      SELECT 
        FTD_CLM_MTCH_ACCNT ,
        SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT ) SUM_TOTAL_VAL , 
        SUM (FTD_EXCTD_QTY ) SUM_TOTAL_QTY
      FROM  ftd_fo_trd_dtls
      where 
        FTD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
        AND FTD_PRDCT_TYP <> 'O'   ** SN to pick Futures and FuturePLUS *
        AND FTD_UNDRLYNG = :c_undrlyng
				AND FTD_EXPRY_DT >= to_date ( :c_frm_dt,'dd-mon-yyyy')
				AND FTD_EXPRY_DT <= to_date ( :c_to_dt,'dd-mon-yyyy')
       ** SN comments  AND FTD_EXPRY_DT = :c_expry_dt **
        AND FTD_XCHNG_CD = :c_xchng_cd
        GROUP BY FTD_CLM_MTCH_ACCNT
      UNION 
      SELECT 
        FTD_CLM_MTCH_ACCNT ,
        SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT ) SUM_TOTAL_VAL , 
        SUM (FTD_EXCTD_QTY ) SUM_TOTAL_QTY
      FROM  FTD_FO_TRD_DTLS_HSTRY
      WHERE 
        FTD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
        ** SN Comments  AND FTD_PRDCT_TYP = :st_cntrct.c_prd_typ **
        AND FTD_PRDCT_TYP <> 'O'   ** SN to pick Futures and FuturePLUS *
        AND FTD_UNDRLYNG = :c_undrlyng
				AND FTD_EXPRY_DT >= to_date ( :c_frm_dt,'dd-mon-yyyy')
				AND FTD_EXPRY_DT <= to_date ( :c_to_dt,'dd-mon-yyyy')
        ** SN comments for RNA AND FTD_EXPRY_DT = :c_expry_dt **
        AND FTD_XCHNG_CD = :c_xchng_cd
        GROUP BY FTD_CLM_MTCH_ACCNT
      ) TEMP
      GROUP BY FTD_CLM_MTCH_ACCNT;

    if ( SQLCODE != 0 )
    {
      *tpcommit(0);*		*1.7*
      fn_errlog( c_ServiceName, "S31195", SQLMSG, c_errmsg  );
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

******************************************************/
    
/******************************************************************************/


		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog( c_ServiceName, "Open Position Value is :%lf:",st_cntfut_pos.d_org_opn_val);
			fn_userlog(c_ServiceName,  "l_avg_trd_prc :%ld",l_avg_trd_prc);      /* Ver 1.5 */
		}
     /** Commented in Ver 3.7 ****
		*** ver 3.6 Add Starts ***
    if(strcmp(c_ven_nm,"SENSIBULL") == 0 )
    {
			if(DEBUG_MSG_LVL_4)
			{
				fn_userlog(c_ServiceName,"For SENSIBULL1: Open Position Quantity check");
      }
			if(st_cntfut_pos.l_opnpstn_qty != 0)
      {
				i_ch_val =  fn_pack_vartofml ( c_ServiceName,
                                   c_errmsg.arr,
                                   &ptr_fml_Obuf,
                                   19,
                       FFO_XCHNG_CD,      st_cntrct_q.c_xchng_cd,
                       FFO_PRDCT_TYP,     (char *)&st_cntrct_q.c_prd_typ,
                       FFO_UNDRLYNG,      st_cntrct_q.c_undrlyng,
                       FFO_EXPRY_DT,      st_cntrct_q.c_expry_dt,
                       FFO_EXER_TYP,      (char *)&st_cntrct_q.c_exrc_typ,
                       FFO_CTGRY_INDSTK,  (char *)&st_cntrct_q.c_ctgry_indstk,
                       FFO_OPNPSTN_QTY,   (char *)&st_cntfut_pos.l_opnpstn_qty,
                       FFO_OPNPSTN_VAL,   (char *)&st_cntfut_pos.d_org_opn_val,
                       FFO_TRD_FLW,       (char *)&st_cntfut_pos.c_opnpstn_flw, 
                       FFO_BRKRG_VL,      (char *)&l_tot_brkg,  
                       FFO_OPT_TYP,       (char *)&st_cntrct_q.c_opt_typ, 
                       FFO_STRK_PRC,      (char *)&st_cntrct_q.l_strike_prc,
                       FFO_CUR_MKT_PRC,   (char *)&st_cntrct_qt.l_lst_trdd_prc,
                       FFO_RLZD_PL,       (char *)&d_crst_prft,
                       FFO_UNRLZD_PL,     (char *)&d_uncrst_prft,
                       FFO_EBA_MTCH_ACT_NO, (char *) c_cln_mtch_accnt,
                       FFO_AVRG_TRD_PRC,  (char *)&l_avg_trd_prc,               
                       FFO_SUB_BUF_CNT,   (char *)&rec_cnt,
                       FFO_ACTN_ID,       (char *)&ret_val );
			}
		}
		else
		{
    *** ver 3.6 Add Ends ***
    ** Comment Ends Ver 3.7 **/
		i_ch_val =  fn_pack_vartofml ( c_ServiceName,
                                   c_errmsg.arr,
                                   &ptr_fml_Obuf,
                                   19,							/*Ver 1.7 Parameters Changed From 16 To 19 */
                       FFO_XCHNG_CD,      st_cntrct_q.c_xchng_cd,
                       FFO_PRDCT_TYP,     (char *)&st_cntrct_q.c_prd_typ,
                       FFO_UNDRLYNG,      st_cntrct_q.c_undrlyng,
                       FFO_EXPRY_DT,      st_cntrct_q.c_expry_dt,
                       FFO_EXER_TYP,      (char *)&st_cntrct_q.c_exrc_typ,
                       FFO_CTGRY_INDSTK,  (char *)&st_cntrct_q.c_ctgry_indstk,
                       FFO_OPNPSTN_QTY,   (char *)&st_cntfut_pos.l_opnpstn_qty,
                       FFO_OPNPSTN_VAL,   (char *)&st_cntfut_pos.d_org_opn_val,
											 FFO_TRD_FLW,       (char *)&st_cntfut_pos.c_opnpstn_flw, /* Ver 1.4 */
											 FFO_BRKRG_VL,      (char *)&l_tot_brkg,  /* Ver 1.4 */
                       FFO_OPT_TYP,       (char *)&st_cntrct_q.c_opt_typ, /* ver 1.2 */
                       FFO_STRK_PRC,      (char *)&st_cntrct_q.l_strike_prc,/*ver 1.2 */
                       FFO_CUR_MKT_PRC,   (char *)&st_cntrct_qt.l_lst_trdd_prc,
                       FFO_RLZD_PL,       (char *)&d_crst_prft,
                       FFO_UNRLZD_PL,     (char *)&d_uncrst_prft,
											 FFO_EBA_MTCH_ACT_NO, (char *) c_cln_mtch_accnt,
                       FFO_AVRG_TRD_PRC,  (char *)&l_avg_trd_prc,               /* Ver 1.5 */
											 FFO_SUB_BUF_CNT, 	(char *)&rec_cnt,
											 FFO_ACTN_ID, 			(char *)&ret_val );
    /** }      *** Ver 3.6 *** Commented in Ver 3.7 **/
		if ( i_ch_val == -1 )
		{
			/*tpcommit(0);*/			/*1.7*/
    	fn_errlog( c_ServiceName, "S31200", LIBMSG, c_errmsg.arr  );
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      /***  tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC ***/
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		
	}
	/***	Commented In Ver 1.7 tpcommit(0);		**** Ver 1.1 *****/
	else     /**** condition added in ver 2.6 ***/
  {

		if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "Inside Already calculated");
    }

		l_opnpstn_qty = 0;
		d_org_opn_val = 0.0;
		c_opnpstn_flw = '\0';
		d_crst_prft 	= 0.0;
		l_charges 		= 0;
		l_avg_trd_prc = 0;
		d_total_prft  = 0.0;
		i_exists_main = 0;

   /*** Below queries changed to upper case in Ver 3.4 ***/

    EXEC SQL
			SELECT 1
        INTO  :i_exists_main
        FROM DUAL
        WHERE EXISTS
			(
      SELECT 1
      FROM  PCP_PRTFL_CNTRCT_PRDCT
      WHERE PCP_CLM_MTCH_ACCNT =:c_cln_mtch_accnt
      AND   PCP_XCHNG_CD       =:st_cntfut_pos.c_xchng_cd
      AND   PCP_PRDCT_TYP      IN ('F','P','U')
      AND   PCP_UNDRLYNG       =:st_cntfut_pos.c_undrlyng
      AND   PCP_EXPRY_DT       =:st_cntfut_pos.c_expry_dt
      AND   PCP_EXER_TYP       =:st_cntfut_pos.c_exrc_typ
			);

    if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog( c_ServiceName, "S31205", SQLMSG, c_errmsg.arr  );
      EXEC SQL CLOSE :cont_cursor;
      EXEC SQL FREE :cont_cursor;
      /***  tpfree ( ( char * ) ptr_fml_Obuf );   Commented in VQC ***/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if (i_exists_main == 1)
    {
			if(DEBUG_MSG_LVL_3)
      {
        fn_userlog( c_ServiceName,"Inside main of PCP");
			}

     /*** Below queries function names changed to upper case in Ver 3.4 ***/

      EXEC SQL
          SELECT NVL(SUM(PCP_OPNPSTN_QTY),0),
                 NVL(SUM(PCP_OPNPSTN_VAL),0),
                 NVL(SUM(PCP_RLLZD_PNL),0),
                 NVL(SUM(PCP_BRKG_VAL),0),
                 NVL(SUM(PCP_AVG_TRD_PRC),0),
                 NVL(SUM(PCP_TOTAL_PNL),0)
          INTO  :l_opnpstn_qty,
                :d_org_opn_val,
                :d_crst_prft,
                :l_charges,
                :l_avg_trd_prc,
                :d_total_prft
          FROM  PCP_PRTFL_CNTRCT_PRDCT
          WHERE PCP_CLM_MTCH_ACCNT =:c_cln_mtch_accnt
          AND   PCP_XCHNG_CD       =:st_cntfut_pos.c_xchng_cd
          AND   PCP_PRDCT_TYP      IN ('F','P','U')
          AND   PCP_UNDRLYNG       =:st_cntfut_pos.c_undrlyng
          AND   PCP_EXPRY_DT       =:st_cntfut_pos.c_expry_dt
          AND   PCP_EXER_TYP       =:st_cntfut_pos.c_exrc_typ;
			
			if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
        {
          fn_errlog( c_ServiceName, "S31210", SQLMSG, c_errmsg.arr  );
          EXEC SQL CLOSE :cont_cursor;
          EXEC SQL FREE :cont_cursor;
          /***    tpfree ( ( char * ) ptr_fml_Obuf );     Commented in VQC ***/
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

    }
    else
    {
			if(DEBUG_MSG_LVL_3)
      {
        fn_userlog( c_ServiceName,"Inside history of PCP");
      }

     /*** Below queries function names changed to upper case in Ver 3.4 ***/

      EXEC SQL
          SELECT NVL(SUM(PCP_OPNPSTN_QTY),0),
                 NVL(SUM(PCP_OPNPSTN_VAL),0),
                 NVL(SUM(PCP_RLLZD_PNL),0),
                 NVL(SUM(PCP_BRKG_VAL),0),
                 NVL(SUM(PCP_AVG_TRD_PRC),0),
                 NVL(SUM(PCP_TOTAL_PNL),0)
          INTO  :l_opnpstn_qty,
                :d_org_opn_val,
                :d_crst_prft,
                :l_charges,
                :l_avg_trd_prc,
                :d_total_prft
          FROM  PCP_PRTFL_CNTRCT_PRDCT_HSTRY
          WHERE PCP_CLM_MTCH_ACCNT =:c_cln_mtch_accnt
          AND   PCP_XCHNG_CD       =:st_cntfut_pos.c_xchng_cd
          AND   PCP_PRDCT_TYP      IN ('F','P','U')
          AND   PCP_UNDRLYNG       =:st_cntfut_pos.c_undrlyng
          AND   PCP_EXPRY_DT       =:st_cntfut_pos.c_expry_dt
          AND   PCP_EXER_TYP       =:st_cntfut_pos.c_exrc_typ;

        if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
        {
          fn_errlog( c_ServiceName, "S31215", SQLMSG, c_errmsg.arr  );
          EXEC SQL CLOSE :cont_cursor;
          EXEC SQL FREE :cont_cursor;
          /***   tpfree ( ( char * ) ptr_fml_Obuf );   Commented in VQC ***/
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

      }

			st_cntrct_q.c_opt_typ    = '*';
      st_cntrct_q.l_strike_prc = 0;

			if ( l_opnpstn_qty > 0)
			{
				c_opnpstn_flw = 'B';
			}
			else if ( l_opnpstn_qty < 0)
			{
				c_opnpstn_flw = 'S';
			}
			else
			{
				c_opnpstn_flw = 'N';
			}

      if( c_opnpstn_flw == 'B' )
      {
				d_uncrst_prft = ( d_ltp - (double)l_avg_trd_prc) * (double) l_opnpstn_qty;	
      }
      else if (c_opnpstn_flw == 'S' )
      {
				d_uncrst_prft = ( (double)l_avg_trd_prc - d_ltp ) * (double)( l_opnpstn_qty * -1);
      }
      else
      {
        d_uncrst_prft=0.0;
      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog( c_ServiceName,"Realized PNL is   |%lf|",d_crst_prft);
        fn_userlog( c_ServiceName,"Unrealized PNL is |%lf|",d_uncrst_prft);
        fn_userlog( c_ServiceName,"Total PNL is      |%lf|",d_total_prft);
        fn_userlog( c_ServiceName,"Average prize is  |%lf|",l_avg_trd_prc);
        fn_userlog( c_ServiceName,"charges       is  |%ld|",l_charges);
        fn_userlog( c_ServiceName,"l_opnpstn_qty is  |%ld|",l_opnpstn_qty);
        fn_userlog( c_ServiceName,"d_org_opn_val is  |%lf|",d_org_opn_val);
        fn_userlog( c_ServiceName,"c_opnpstn_flw is  |%c|",c_opnpstn_flw);
      }
      /** Commented on Ver 3.7 **  
		 ** ver 3.6 Add Starts **
		  if(strcmp(c_ven_nm,"SENSIBULL") == 0 )
			{
				if(DEBUG_MSG_LVL_4)
				{
					fn_userlog(c_ServiceName,"For SENSIBULL: Open Position Quantity check");
				}

				if(l_opnpstn_qty != 0)
				{
      		i_ch_val =  fn_pack_vartofml ( c_ServiceName,
                                   c_errmsg.arr,
                                   &ptr_fml_Obuf,
                                   19,
                       FFO_XCHNG_CD,      st_cntfut_pos.c_xchng_cd,
                       FFO_PRDCT_TYP,     (char *)&st_cntrct_q.c_prd_typ,
                       FFO_UNDRLYNG,      st_cntfut_pos.c_undrlyng,
                       FFO_EXPRY_DT,      st_cntfut_pos.c_expry_dt,
                       FFO_EXER_TYP,      (char *)&st_cntrct_q.c_exrc_typ,
                       FFO_CTGRY_INDSTK,  (char *)&st_cntrct_q.c_ctgry_indstk,
                       FFO_OPNPSTN_QTY,   (char *)&l_opnpstn_qty,
                       FFO_OPNPSTN_VAL,   (char *)&d_org_opn_val,
                       FFO_TRD_FLW,       (char *)&c_opnpstn_flw,
                       FFO_BRKRG_VL,      (char *)&l_charges,
                       FFO_OPT_TYP,       (char *)&st_cntrct_q.c_opt_typ,
                       FFO_STRK_PRC,      (char *)&st_cntrct_q.l_strike_prc,
                       FFO_CUR_MKT_PRC,   (char *)&st_cntrct_qt.l_lst_trdd_prc,
                       FFO_RLZD_PL,       (char *)&d_crst_prft,
                       FFO_UNRLZD_PL,     (char *)&d_uncrst_prft,
                       FFO_EBA_MTCH_ACT_NO, (char *) c_cln_mtch_accnt,
                       FFO_AVRG_TRD_PRC,  (char *)&l_avg_trd_prc,
                       FFO_SUB_BUF_CNT,   (char *)&rec_cnt,
                       FFO_ACTN_ID,       (char *)&ret_val );
				}
			}
			else
			{
			*** ver 3.6 Add Ends ***
     *** Comment Ends  Ver 3.7 **/

      i_ch_val =  fn_pack_vartofml ( c_ServiceName,
                                   c_errmsg.arr,
                                   &ptr_fml_Obuf,
                                   19,
                       FFO_XCHNG_CD,      st_cntfut_pos.c_xchng_cd,
                       FFO_PRDCT_TYP,     (char *)&st_cntrct_q.c_prd_typ,
                       FFO_UNDRLYNG,      st_cntfut_pos.c_undrlyng,
                       FFO_EXPRY_DT,      st_cntfut_pos.c_expry_dt,
                       FFO_EXER_TYP,      (char *)&st_cntrct_q.c_exrc_typ,
                       FFO_CTGRY_INDSTK,  (char *)&st_cntrct_q.c_ctgry_indstk,
                       FFO_OPNPSTN_QTY,   (char *)&l_opnpstn_qty,
                       FFO_OPNPSTN_VAL,   (char *)&d_org_opn_val,
                       FFO_TRD_FLW,       (char *)&c_opnpstn_flw,
                       FFO_BRKRG_VL,      (char *)&l_charges,
                       FFO_OPT_TYP,       (char *)&st_cntrct_q.c_opt_typ,
                       FFO_STRK_PRC,      (char *)&st_cntrct_q.l_strike_prc,
                       FFO_CUR_MKT_PRC,   (char *)&st_cntrct_qt.l_lst_trdd_prc,
                       FFO_RLZD_PL,       (char *)&d_crst_prft,
                       FFO_UNRLZD_PL,     (char *)&d_uncrst_prft,
                       FFO_EBA_MTCH_ACT_NO, (char *) c_cln_mtch_accnt,
                       FFO_AVRG_TRD_PRC,  (char *)&l_avg_trd_prc,
                       FFO_SUB_BUF_CNT,   (char *)&rec_cnt,
                       FFO_ACTN_ID,       (char *)&ret_val );
			/* }				*** Ver 3.6 *** Commented  in Ver 3.7 **/
			if ( i_ch_val == -1 )
      {
        fn_errlog( c_ServiceName, "S31220", LIBMSG, c_errmsg.arr  );
        EXEC SQL CLOSE :cont_cursor;
        EXEC SQL FREE :cont_cursor;
        /***   tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
   } /*** End of else loop ver 2.6 ***/	
	} /**** End of for loop ***/	

  EXEC SQL CLOSE :cont_cursor;
  EXEC SQL FREE :cont_cursor;

	}       /**** Ver 2.8 starts*****/
  else
  {
		if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName,"st_usr_prfl.c_cln_mtch_accnt is   |%s|",st_usr_prfl.c_cln_mtch_accnt);
      fn_userlog( c_ServiceName,"c_xchng_cd is              |%s|",c_xchng_cd);
      fn_userlog( c_ServiceName,"st_cntrct.c_xchng_cd is    |%s|",st_cntrct.c_xchng_cd);
      fn_userlog( c_ServiceName,"st_cntrct.c_prd_typ is     |%c|",st_cntrct.c_prd_typ);
      fn_userlog( c_ServiceName,"st_cntrct.c_ctgry_indstk is|%c|",st_cntrct.c_ctgry_indstk);
      fn_userlog( c_ServiceName," st_cntrct.c_undrlyng is   |%s|",st_cntrct.c_undrlyng);
      fn_userlog( c_ServiceName," st_cntrct.c_expry_dt is   |%s|",st_cntrct.c_expry_dt);
      fn_userlog( c_ServiceName," st_cntrct.c_exrc_typ is   |%c|",st_cntrct.c_exrc_typ);
    }

    EXEC SQL
          SELECT  NVL(FTQ_LST_TRD_PRC,0)
          INTO    :d_ltp
          FROM    FTQ_FO_TRD_QT
          WHERE   FTQ_XCHNG_CD  = :st_cntrct.c_xchng_cd
         /*** AND     FTQ_PRDCT_TYP = 'F'  Commented in Ver 3.4 ***/
          AND     FTQ_PRDCT_TYP = :c_fut_prd_typ  /*** Ver 3.4 Bind variable used instead of hard coded values ***/
          AND     FTQ_UNDRLYNG  = :st_cntrct.c_undrlyng
          AND     FTQ_EXPRY_DT  = :st_cntrct.c_expry_dt
          AND     FTQ_EXER_TYP  = :st_cntrct.c_exrc_typ;

    if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
    {
       fn_errlog( c_ServiceName, "S31225", SQLMSG, c_errmsg.arr  );
       /***   tpfree ( ( char * ) ptr_fml_Obuf );    Commented in VQC  ***/
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if( SQLCODE == NO_DATA_FOUND )
    {
      d_ltp = 0.0;
    }

    st_cntrct_qt.l_lst_trdd_prc = d_ltp;

    if(DEBUG_MSG_LVL_3)
    {
       fn_userlog( c_ServiceName,"last trade price is         |%lf|",d_ltp);
    }

		EXEC SQL
        SELECT 1
        INTO  :i_exists_ftd
        FROM DUAL      /*** Table name changed to upper case in Ver 3.4 ***/
        WHERE EXISTS
        (
          SELECT 1
          FROM FTD_FO_TRD_DTLS
          WHERE   FTD_CLM_MTCH_ACCNT =:st_usr_prfl.c_cln_mtch_accnt
          AND     FTD_XCHNG_CD       =:st_cntrct.c_xchng_cd
          AND     FTD_UNDRLYNG       =:st_cntrct.c_undrlyng
          AND     FTD_PRDCT_TYP      =:st_cntrct.c_prd_typ
          AND     FTD_EXPRY_DT       =:st_cntrct.c_expry_dt
          AND     FTD_EXER_TYP       =:st_cntrct.c_exrc_typ
        );

    if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
    {
       fn_errlog( c_ServiceName, "S31230", SQLMSG, c_errmsg.arr  );
     
       /*** Commeneted in VQC
 
       EXEC SQL CLOSE :cont_cursor;
       EXEC SQL FREE :cont_cursor;    
       tpfree ( ( char * ) ptr_fml_Obuf );
   
       ****************************/
      
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if( SQLCODE == NO_DATA_FOUND )
    {
      i_exists_ftd = 0;
    }

		if ( i_exists_ftd == 1 )
		{

		EXEC SQL
      SELECT  NVL(CLM_SPAN_ALLWD,'N'),
              NVL(CLM_BSESPAN_ALLWD,'N')
      INTO    :c_spn_allwd_flg,
              :c_bsespn_allwd_flg
      FROM    CLM_CLNT_MSTR
      WHERE   CLM_MTCH_ACCNT  = :st_usr_prfl.c_cln_mtch_accnt;

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31235", SQLMSG, c_errmsg.arr  );
      /***  tpfree ( ( char * ) ptr_fml_Obuf );    Commented in VQC ***/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName,"c_spn_allwd_flg is         |%c|",c_spn_allwd_flg);
      fn_userlog( c_ServiceName,"c_bsespn_allwd_flg is      |%c|",c_bsespn_allwd_flg);
    }

    if( (c_spn_allwd_flg == 'N' && strcmp(st_cntrct.c_xchng_cd,"NFO")==0 ) ||
        (c_bsespn_allwd_flg == 'N' && strcmp(st_cntrct.c_xchng_cd,"BFO")== 0))
    {
      EXEC SQL
        SELECT FFP_OPNPSTN_QTY,
               FFP_OPNPSTN_FLW,
               FFP_OPNPSTN_VAL
          INTO :l_opnpstn_qty,
               :c_opnpstn_flw,
               :d_org_opn_val
          FROM FFP_FO_FUTURES_PSTN
        WHERE  FFP_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
          AND  FFP_XCHNG_CD       = :st_cntrct.c_xchng_cd
          AND  FFP_PRDCT_TYP      = :st_cntrct.c_prd_typ
          AND  FFP_INDSTK         = :st_cntrct.c_ctgry_indstk
          AND  FFP_UNDRLYNG       = :st_cntrct.c_undrlyng
          AND  FFP_EXPRY_DT       = :st_cntrct.c_expry_dt
          AND  FFP_EXER_TYP       = :st_cntrct.c_exrc_typ;

			if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31240", SQLMSG, c_errmsg.arr  );
        /***  tpfree ( ( char * ) ptr_fml_Obuf );   Commented in VQC ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    else
    {
     if ( st_cntrct.c_prd_typ == 'P')
     {
       EXEC SQL
          SELECT FFP_OPNPSTN_QTY,
                 FFP_OPNPSTN_FLW,
                 FFP_OPNPSTN_VAL
            INTO :l_opnpstn_qty,
                 :c_opnpstn_flw,
                 :d_org_opn_val
            FROM FFP_FO_FUTURES_PSTN
            WHERE  FFP_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
            AND  FFP_XCHNG_CD       = :st_cntrct.c_xchng_cd
            AND  FFP_PRDCT_TYP      = :st_cntrct.c_prd_typ
            AND  FFP_INDSTK         = :st_cntrct.c_ctgry_indstk
            AND  FFP_UNDRLYNG       = :st_cntrct.c_undrlyng
            AND  FFP_EXPRY_DT       = :st_cntrct.c_expry_dt
            AND  FFP_EXER_TYP       = :st_cntrct.c_exrc_typ;

        if ( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S31245", SQLMSG, c_errmsg.arr  );
          /***  tpfree ( ( char * ) ptr_fml_Obuf ); Commented in VQC ***/
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }
      else
			{
        EXEC SQL
            SELECT FCP_OPNPSTN_QTY,
                  FCP_OPNPSTN_FLW,
                  FCP_OPNPSTN_VAL
              INTO :l_opnpstn_qty,
                  :c_opnpstn_flw,
                  :d_org_opn_val
              FROM FCP_FO_SPN_CNTRCT_PSTN
            WHERE  FCP_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
            AND  FCP_XCHNG_CD       = :st_cntrct.c_xchng_cd
              AND  FCP_PRDCT_TYP      = :st_cntrct.c_prd_typ
              AND  FCP_INDSTK         = :st_cntrct.c_ctgry_indstk
              AND  FCP_UNDRLYNG       = :st_cntrct.c_undrlyng
              AND  FCP_EXPRY_DT       = :st_cntrct.c_expry_dt
              AND  FCP_EXER_TYP       = :st_cntrct.c_exrc_typ;

        if ( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S31250", SQLMSG, c_errmsg.arr  );
          /***   tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC ***/
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
       }
      }

     if (l_opnpstn_qty > 0 )
     {

       i_returncode = fn_buy_opnpsn(c_ServiceName,
                                    st_usr_prfl.c_cln_mtch_accnt,
                                    st_cntrct.c_xchng_cd,
                                    st_cntrct.c_undrlyng,
                                    st_cntrct.c_expry_dt,
                                    st_cntrct.c_exrc_typ,
                                    st_cntrct.c_prd_typ,
                                    st_cntrct.c_rqst_typ);

        if(i_returncode == -1)
        {
          /***  tpfree ( ( char * ) ptr_fml_Obuf );   Commented in VQC ***/
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }
      else if ( l_opnpstn_qty < 0 )
      {
				i_returncode = fn_sell_opnpsn(c_ServiceName,
                                      st_usr_prfl.c_cln_mtch_accnt,
                                      st_cntrct.c_xchng_cd,
                                      st_cntrct.c_undrlyng,
                                      st_cntrct.c_expry_dt,
                                      st_cntrct.c_exrc_typ,
                                      st_cntrct.c_prd_typ,
                                      st_cntrct.c_rqst_typ);
        if(i_returncode == -1)
        {
        /***  tpfree ( ( char * ) ptr_fml_Obuf );   Commented in VQC ***/
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }
      else if ( l_opnpstn_qty == 0 )
      {

        i_returncode = fn_sqroff_pstn (c_ServiceName,
                                    st_usr_prfl.c_cln_mtch_accnt,
                                    st_cntrct.c_xchng_cd,
                                    st_cntrct.c_undrlyng,
                                    st_cntrct.c_expry_dt,
                                    st_cntrct.c_exrc_typ,
                                    st_cntrct.c_prd_typ ,
                                    st_cntrct.c_rqst_typ);

        if(i_returncode == -1)
        {
          /***  tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC  ***/
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }
		}
		else
    {
      EXEC SQL
            SELECT PCP_OPNPSTN_QTY,
                  PCP_OPNPSTN_FLW,
                  PCP_OPNPSTN_VAL,	
									PCP_AVG_TRD_PRC
              INTO :l_opnpstn_qty,
                  :c_opnpstn_flw,
                  :d_org_opn_val,
									:d_avg_pr
              FROM PCP_PRTFL_CNTRCT_PRDCT
            WHERE  PCP_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
              AND  PCP_XCHNG_CD       = :st_cntrct.c_xchng_cd
              AND  PCP_PRDCT_TYP      = :st_cntrct.c_prd_typ
              AND  PCP_INDSTK         = :st_cntrct.c_ctgry_indstk
              AND  PCP_UNDRLYNG       = :st_cntrct.c_undrlyng
              AND  PCP_EXPRY_DT       = :st_cntrct.c_expry_dt
              AND  PCP_EXER_TYP       = :st_cntrct.c_exrc_typ;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31255", SQLMSG, c_errmsg.arr  );
        /***  tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		}	

		l_avg_trd_prc = (long)d_avg_pr;

		if( c_opnpstn_flw == 'B' )
    {
      d_uncrst_prft = ( d_ltp - (double)l_avg_trd_prc) * (double) l_opnpstn_qty;
    }
    else if (c_opnpstn_flw == 'S' )
    {
      d_uncrst_prft = ( (double)l_avg_trd_prc - d_ltp ) * (double)( l_opnpstn_qty * -1);
			l_opnpstn_qty = l_opnpstn_qty * -1;
    }
    else
    {
      d_uncrst_prft=0.0;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName,"Last traded  is   |%lf|",d_ltp);
      fn_userlog( c_ServiceName,"Unrealized PNL is |%lf|",d_uncrst_prft);
      fn_userlog( c_ServiceName,"Average prize is  |%lf|",l_avg_trd_prc);
      fn_userlog( c_ServiceName,"charges       is  |%ld|",l_charges);
      fn_userlog( c_ServiceName,"l_opnpstn_qty is  |%ld|",l_opnpstn_qty);
      fn_userlog( c_ServiceName,"d_org_opn_val is  |%lf|",d_org_opn_val);
      fn_userlog( c_ServiceName,"c_opnpstn_flw is  |%c|",c_opnpstn_flw);
    }
		
		ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

    if ( ptr_fml_Obuf == NULL )
    {
      fn_errlog( c_ServiceName, "S31260", LIBMSG, c_errmsg.arr  );
      /***  tpfree ( ( char * ) ptr_fml_Obuf );   Commented in VQC ***/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    i_ch_val =  fn_pack_vartofml ( c_ServiceName,
                                   c_errmsg.arr,
                                   &ptr_fml_Obuf,
                                   4,
                       FFO_OPNPSTN_QTY,   (char *)&l_opnpstn_qty,
                       FFO_TRD_FLW,       (char *)&c_opnpstn_flw,
                       FFO_UNRLZD_PL,     (char *)&d_uncrst_prft,
                       FFO_AVRG_TRD_PRC,  (char *)&l_avg_trd_prc);

      if ( i_ch_val == -1 )
      {
        fn_errlog( c_ServiceName, "S31265", LIBMSG, c_errmsg.arr  );
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

  }   /**** Ver 2.8 Ends ***/

  /*** Ver 3.5 Starts ***/
  if(DEBUG_MSG_LVL_2)
  {
		fn_userlog(c_ServiceName,"Service SFO_FUT_PRTFL Ends ");
  }
  /*** Ver 3.5 Ends ***/
	
  tpreturn(TPSUCCESS, SUCC_BFR, (char *)ptr_fml_Obuf, 0, 0 );
}
int fn_buy_opnpsn(char *c_ServiceName,
									 char *c_cln_mtch_accnt,
									 char *c_xchng_cd,
									 char *c_undrlyng,
									 char *c_expry_dt,
									 char c_exrc_typ,
								   char c_prdct_typ,
									 /*** char c_cprdct_typ *** Commented in Ver 2.8 ***/
                   char c_req_typ )  /*** Added in ver 2.8 ***/
{


	varchar c_trd_dt [ LEN_DATE ];

	l_tot_sell_qty_m = 0;
	l_tot_sell_qty_h = 0;
	d_sell_val_m = 0;
	d_sell_val_h = 0;
	d_sell_val = 0;
  d_buy_val = 0;
	d_opn_buy_val = 0;
  d_uncrst_prft = 0;
	l_tot_sell_qty = 0;
  li_uncrst_qty = 0;
	/*** d_Ccrst_prft = 0 ;
   d_Cuncrst_prft = 0;  *** Commented in VQC as variable is not used ***/

	 /* Ver 2.1 starts */ 
	long int li_qty_bal = 0;
	long int li_cum_exctd_qty = 0;
	li_net_qty_bal = 0;
	d_net_avg_rt = 0;
	/* Ver 2.1 ends */

  char c_sell_flw = 'S';   /*** Added in Ver 3.4 ***/
  char c_buy_flw  = 'B';   /*** Added in Ver 3.4 ***/

	if( DEBUG_MSG_LVL_3 )	
	{
		fn_userlog(c_ServiceName,"Inside Function fn_buy_opnpsn");
	}

	if( DEBUG_MSG_LVL_5 )
	{
  	fn_userlog(c_ServiceName,"Match Account Is ;%s:",c_cln_mtch_accnt);
		fn_userlog(c_ServiceName,"Exchnage Code Is :%s:",c_xchng_cd);
		fn_userlog(c_ServiceName,"CProduct Type Is :%c:",c_cprdct_typ);
		fn_userlog(c_ServiceName,"Product Type Is :%c:",c_prdct_typ);
		fn_userlog(c_ServiceName,"Expiry Date Is :%s:",c_expry_dt);
		fn_userlog(c_ServiceName,"Exercise Type Is :%c:",c_exrc_typ);
		fn_userlog(c_ServiceName,"Underlying Is :%s:",c_undrlyng);
	}

  /*** Below query changed to upper case in Ver 3.4 ***/ 

	EXEC SQL
        SELECT  NVL ( SUM ( FTD_EXCTD_QTY ), 0),
                NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) -
                            NVL ( FTD_FRS_BRKG,0 )           -
                            NVL ( FTD_CVR_BRKG,0 )             ), 0 )
        INTO    :l_tot_sell_qty_m,
                :d_sell_val_m
        FROM    FTD_FO_TRD_DTLS
        WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
        AND     FTD_XCHNG_CD        = :c_xchng_cd
/*				AND     ftd_prdct_typ       = :c_cprdct_typ  Commented in Ver 2.2*/
        AND     FTD_PRDCT_TYP IN ('F','P','U')   /* Ver 2.2 */
        AND     FTD_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')    /* Added in Ver 2.8 */
        AND     FTD_UNDRLYNG        = :c_undrlyng
        AND     FTD_EXPRY_DT        = :c_expry_dt
        AND     FTD_EXER_TYP        = :c_exrc_typ
     /***   AND     FTD_TRD_FLW         = 'S';   Commented in Ver 3.4 ***/
        AND     FTD_TRD_FLW         = :c_sell_flw ; /*** Ver 3.4 bind variable used instead of hard coded value ***/

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31270", SQLMSG, c_errmsg.arr  );
				return -1;
      }

  /*** Below query changed to upper case in Ver 3.4 ***/

	 EXEC SQL
        SELECT  NVL ( SUM ( FTD_EXCTD_QTY ), 0),
                NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) -
                            NVL ( FTD_FRS_BRKG,0 )           -
                            NVL ( FTD_CVR_BRKG,0 )             ), 0 )
        INTO    :l_tot_sell_qty_h,
                :d_sell_val_h
        FROM    FTD_FO_TRD_DTLS_HSTRY
        WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
        AND     FTD_XCHNG_CD        = :c_xchng_cd
	/*				AND     ftd_prdct_typ       = :c_cprdct_typ  Commented in Ver 2.2 */
        AND     FTD_PRDCT_TYP IN ('F','P','U')   /* Ver 2.2 */
        AND     FTD_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')    /* Added in Ver 2.8 */
        AND     FTD_UNDRLYNG        = :c_undrlyng
        AND     FTD_EXPRY_DT        = :c_expry_dt
        AND     FTD_EXER_TYP        = :c_exrc_typ
     /***   AND     FTD_TRD_FLW         = 'S';    Commented in Ver 3.4 ***/
        AND     FTD_TRD_FLW         = :c_sell_flw ; /*** Ver 3.4 bind variable used instead of hard coded value ***/

   if ( SQLCODE != 0 )
   {
   	fn_errlog( c_ServiceName, "S31275", SQLMSG, c_errmsg.arr  );
		return -1;
   }

		/*** Ver 2.9 starts ***/

   /*** Below query changed to upper case in Ver 3.4 ***/

		EXEC SQL
		SELECT  ABS( NVL ( SUM ( FCO_CLS_QTY ), 0) ),
						ABS( NVL ( SUM ( FCO_CLS_QTY * FCO_CLS_RT ), 0 ) )
    INTO    :l_tot_sell_qty_fco_h,
            :d_sell_val_fco_h
    FROM  FCO_FO_FCLSOUT_HSTRY
    WHERE FCO_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
    AND   FCO_XCHNG_CD        = :c_xchng_cd
    AND   FCO_PRDCT_TYP IN ('F','U','P')
    AND   FCO_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')
    AND   FCO_UNDRLYNG        = :c_undrlyng
    AND   FCO_EXPRY_DT        = :c_expry_dt
    AND   FCO_EXER_TYP        = :c_exrc_typ
	/***	AND   FCO_ORDR_FLW				= 'B';   Commented in Ver 3.4 ***/
    AND   FCO_ORDR_FLW        = :c_buy_flw ;  /*** Ver 3.4 bind variable used instead of hard coded value ***/ 


   if ( SQLCODE != 0 )
   {
		 fn_errlog( c_ServiceName, "S31280", SQLMSG, c_errmsg.arr  );
		 return -1;
   }

    /*** Below query changed to upper case in Ver 3.4 ***/

		EXEC SQL
		SELECT  ABS( NVL ( SUM ( FCO_CLS_QTY ), 0) ),
						ABS( NVL ( SUM ( FCO_CLS_QTY * FCO_CLS_RT ), 0 ) )
    INTO    :l_tot_sell_qty_fco_m,
            :d_sell_val_fco_m
    FROM  FCO_FO_FCLSOUT
    WHERE FCO_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
    AND   FCO_XCHNG_CD        = :c_xchng_cd
    AND   FCO_PRDCT_TYP IN ('F','U','P')
    AND   FCO_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')
    AND   FCO_UNDRLYNG        = :c_undrlyng
    AND   FCO_EXPRY_DT        = :c_expry_dt
    AND   FCO_EXER_TYP        = :c_exrc_typ
	/*** 	AND   FCO_ORDR_FLW				= 'B';  Commented in Ver 3.4 ***/
    AND   FCO_ORDR_FLW        = :c_buy_flw ;  /*** Ver 3.4 bind variable used instead of hard coded value ***/

   if ( SQLCODE != 0 )
   {
		 fn_errlog( c_ServiceName, "S31285", SQLMSG, c_errmsg.arr  );
		 return -1;
   }

	 /*** Ver 2.9 ends ***/

    l_tot_sell_qty = l_tot_sell_qty_m + l_tot_sell_qty_h + l_tot_sell_qty_fco_m + l_tot_sell_qty_fco_h; /*** fco added in Ver 2.9 ***/
    d_sell_val = d_sell_val_m + d_sell_val_h + d_sell_val_fco_m + d_sell_val_fco_h;  /*** fco added in Ver 2.9 ***/
	
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Total Sell Qty Is ;%ld:",l_tot_sell_qty);	/*** Ver 2.9 ***/
			fn_userlog(c_ServiceName,"Total Sell Value Is ;%lf:",d_sell_val);	/*** Ver 2.9 ***/
		}

		EXEC SQL ALLOCATE :trd_cursor;

		if ( (l_rec_main_exists == 0 ) && (l_rec_hstry_exists == 1 ) )
      {
   
       /*** Below query changed to upper case in Ver 3.4 ***/

        EXEC SQL  EXECUTE
          BEGIN
            OPEN  :trd_cursor FOR
              SELECT FTD_EXCTD_QTY,
                     FTD_EXCTD_RT,
                     NVL (FTD_FRS_BRKG, 0),
                     NVL (FTD_CVR_BRKG, 0),
                     FTD_TRD_DT
              FROM FTD_FO_TRD_DTLS_HSTRY
              WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
              AND     FTD_XCHNG_CD        = :c_xchng_cd
	/*							AND     ftd_prdct_typ       = :c_prdct_typ *Commented in ver 2.2 */
              AND     FTD_PRDCT_TYP IN ('F','P','U') /* Ver 2.2*/
              AND     FTD_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')    /* Added in Ver 2.8 */
              AND     FTD_UNDRLYNG        = :c_undrlyng
              AND     FTD_EXPRY_DT        = :c_expry_dt
              AND     FTD_EXER_TYP        = :c_exrc_typ
           /***   AND     FTD_TRD_FLW         = 'B'  Commented in Ver 3.4 ***/
              AND     FTD_TRD_FLW         = :c_buy_flw /*** Ver 3.4 Bind variable used instead of hard coded value ***/
							UNION ALL																			/*** FCO UNION ALL added in Ver 2.9 ***/
							SELECT  ABS(FCO_CLS_QTY),
											FCO_CLS_RT,
											0,
											0,
											FCO_CLS_TM														/*** Doubt pls confirm ***/
							FROM  FCO_FO_FCLSOUT_HSTRY
							WHERE FCO_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
							AND   FCO_XCHNG_CD        = :c_xchng_cd
							AND   FCO_PRDCT_TYP IN ('F','U','P')
							AND   FCO_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')
							AND   FCO_UNDRLYNG        = :c_undrlyng
							AND   FCO_EXPRY_DT        = :c_expry_dt
							AND   FCO_EXER_TYP        = :c_exrc_typ
				/***			AND   FCO_ORDR_FLW				= 'S'   Commented in Ver 3.4 ***/
              AND   FCO_ORDR_FLW        = :c_sell_flw /*** Ver 3.4 Bind variable used instead of hard coded value ***/
              ORDER BY 5;		/*** Changed order by clause from ftd_trd_dt to 5 ***/
          END;
        END-EXEC;
      }
		else
      {
   
       /*** Below query changed to upper case in Ver 3.4 ***/

        EXEC SQL  EXECUTE
          BEGIN
            OPEN  :trd_cursor FOR
              SELECT FTD_EXCTD_QTY,
                     FTD_EXCTD_RT,
                     NVL (FTD_FRS_BRKG, 0),
                     NVL (FTD_CVR_BRKG, 0),
                     FTD_TRD_DT
              FROM FTD_FO_TRD_DTLS
              WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
              AND     FTD_XCHNG_CD        = :c_xchng_cd
	/*              AND     ftd_prdct_typ       = :c_prdct_typ *Commented in ver 2.2 */
              AND     FTD_PRDCT_TYP IN ('F','U','P') /* Ver 2.2*/
              AND     FTD_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')    /* Added in Ver 2.8 */
              AND     FTD_UNDRLYNG        = :c_undrlyng
              AND     FTD_EXPRY_DT        = :c_expry_dt
              AND     FTD_EXER_TYP        = :c_exrc_typ
           /***   AND     FTD_TRD_FLW         = 'B'    Commented in Ver 3.4 ***/
              AND     FTD_TRD_FLW         = :c_buy_flw /*** Ver 3.4 Bind variable used instead of hard coded value ***/
              UNION ALL
              SELECT FTD_EXCTD_QTY,
                     FTD_EXCTD_RT,
                     NVL (FTD_FRS_BRKG, 0),
                     NVL (FTD_CVR_BRKG, 0),
                     FTD_TRD_DT
              FROM FTD_FO_TRD_DTLS_HSTRY
              WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
              AND     FTD_XCHNG_CD        = :c_xchng_cd
	/*              AND     ftd_prdct_typ       = :c_prdct_typ *Commented in ver 2.2 */
              AND     FTD_PRDCT_TYP IN ('F','U','P') /* Ver 2.2*/
              AND     FTD_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')    /* Added in Ver 2.8 */
              AND     FTD_UNDRLYNG        = :c_undrlyng
              AND     FTD_EXPRY_DT        = :c_expry_dt
              AND     FTD_EXER_TYP        = :c_exrc_typ
         /***     AND     FTD_TRD_FLW         = 'B'    Commented in Ver 3.4 ***/
              AND     FTD_TRD_FLW         = :c_buy_flw /*** Ver 3.4 Bind variable used instead of hard coded value ***/
							UNION ALL																			/*** FCO UNION ALL added in Ver 2.9 ***/
							SELECT  ABS(FCO_CLS_QTY),
											FCO_CLS_RT,
											0,
											0,
											FCO_CLS_TM														/*** Doubt pls confirm ***/
							FROM  FCO_FO_FCLSOUT	
							WHERE FCO_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
							AND   FCO_XCHNG_CD        = :c_xchng_cd
							AND   FCO_PRDCT_TYP IN ('F','U','P')
							AND   FCO_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')
							AND   FCO_UNDRLYNG        = :c_undrlyng
							AND   FCO_EXPRY_DT        = :c_expry_dt
							AND   FCO_EXER_TYP        = :c_exrc_typ
				/***			AND   FCO_ORDR_FLW				= 'S'  Commented in Ver 3.4 ***/
              AND   FCO_ORDR_FLW        = :c_sell_flw /*** Ver 3.4 Bind variable used instead of hard coded value ***/
							UNION ALL																			/*** FCO UNION ALL added in Ver 2.9 ***/
							SELECT  ABS(FCO_CLS_QTY),
											FCO_CLS_RT,
											0,
											0,
											FCO_CLS_TM														/*** Doubt pls confirm ***/
							FROM  FCO_FO_FCLSOUT_HSTRY
							WHERE FCO_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
							AND   FCO_XCHNG_CD        = :c_xchng_cd
							AND   FCO_PRDCT_TYP IN ('F','U','P')
							AND   FCO_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')
							AND   FCO_UNDRLYNG        = :c_undrlyng
							AND   FCO_EXPRY_DT        = :c_expry_dt
							AND   FCO_EXER_TYP        = :c_exrc_typ
				/***			AND   FCO_ORDR_FLW				= 'S'    Commented in Ver 3.4 ***/
              AND   FCO_ORDR_FLW        = :c_sell_flw /*** Ver 3.4 Bind variable used instead of hard coded value ***/
              ORDER BY 5;
          END;
        END-EXEC;
      }

      li_bal_qty = l_tot_sell_qty;

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Initial balance Qty Is ;%ld:",li_bal_qty);	/*** Ver 2.9 ***/
			}

		while ( 1 )
      {
      	li_qty_bal = 0;	/* Ver 2.1 */

        EXEC SQL
          FETCH :trd_cursor
          INTO :li_exctd_qty,
               :li_exctd_rt,
               :d_frsh_brk,
               :d_cvr_brk,
               :c_trd_dt;
        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
						
            break;
          }
          else
          {
            fn_errlog( c_ServiceName, "S31290", SQLMSG, c_errmsg.arr  );
            EXEC SQL CLOSE :trd_cursor;
            EXEC SQL FREE :trd_cursor;
	
          	/*** Commented in VQC ***	
          
          	EXEC SQL CLOSE :cont_cursor;
        		EXEC SQL FREE :cont_cursor;

            **************************/
						return -1;
          }
        }

				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"While loop Executed Qty Is ;%ld:",li_exctd_qty);	/*** Ver 2.9 ***/
					fn_userlog(c_ServiceName,"While loop Executed Rate Is ;%ld:",li_exctd_rt);	/*** Ver 2.9 ***/
					fn_userlog(c_ServiceName,"While loop Balance Qty Is ;%ld:",li_bal_qty);	/*** Ver 2.9 ***/
				}

			if ( li_bal_qty > 0 )
        {
					if(DEBUG_MSG_LVL_5)
					{
						fn_userlog(c_ServiceName,"Inside li_bal_qty > 0");
						fn_userlog(c_ServiceName,"HERE li_bal_qty is :%ld:",li_bal_qty);
						fn_userlog(c_ServiceName,"HERE li_exctd_qty is :%ld:",li_exctd_qty);
					}

          li_crst_qty = fn_minl ( li_bal_qty, li_exctd_qty );
          d_buy_val = d_buy_val + ( (double) li_crst_qty * (double)  li_exctd_rt ) +
                      d_frsh_brk + d_cvr_brk;

          li_bal_qty = li_bal_qty - li_crst_qty;

          if ( li_bal_qty == 0 )
          {
            li_uncrst_qty = li_exctd_qty - li_crst_qty;
            d_opn_buy_val = d_opn_buy_val  + ( (double) li_uncrst_qty * (double) li_exctd_rt ) +
                            d_frsh_brk + d_cvr_brk;
          }
        }
        else
        {
					if(DEBUG_MSG_LVL_5)
					{
						fn_userlog(c_ServiceName,"Inside li_bal_qty = 0");
						fn_userlog(c_ServiceName,"Executed Qty Is :%ld:",li_exctd_qty);
					}

          li_uncrst_qty = li_uncrst_qty + li_exctd_qty;
          d_opn_buy_val = d_opn_buy_val  + ( (double) li_exctd_qty * (double)  li_exctd_rt ) +
                          d_frsh_brk + d_cvr_brk;

					if(DEBUG_MSG_LVL_5)
					{
						fn_userlog(c_ServiceName,"Uncrystalised Qty Is :%ld:",li_uncrst_qty);
					}
        }

				/* Ver 2.1 starts*/
				li_cum_exctd_qty = li_cum_exctd_qty + li_exctd_qty;

				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"Cumulative Executed Qty Is ;%ld:",li_cum_exctd_qty);	/*** Ver 2.9 ***/
				}

				if( (li_cum_exctd_qty  - l_tot_sell_qty) > 0)
				{
					li_qty_bal = fn_minl(li_cum_exctd_qty  - l_tot_sell_qty, li_exctd_qty);
					li_net_qty_bal = li_net_qty_bal + li_qty_bal;
				}

				if ( li_qty_bal > 0 )
				{
					d_net_avg_rt = d_net_avg_rt + (double) li_qty_bal * (double) li_exctd_rt;
				}
				/* Ver 2.1 ends*/

				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"While loop Net Avg Rate Is ;%lf:",d_net_avg_rt);	/*** Ver 2.9 ***/
					fn_userlog(c_ServiceName,"While loop Net Qty Bal Is ;%ld:",li_net_qty_bal);	/*** Ver 2.9 ***/
				}
      }

      EXEC SQL CLOSE :trd_cursor;
      EXEC SQL FREE :trd_cursor;

	    d_avg_pr = d_net_avg_rt/(double)li_net_qty_bal; /* Ver 2.1*/

      d_crst_prft = d_sell_val - d_buy_val;

			if( DEBUG_MSG_LVL_5 )
			{
				fn_userlog (c_ServiceName,"BEFORE li_uncrst_qty is :%ld:",li_uncrst_qty);
				fn_userlog (c_ServiceName,"BEFORE st_cntrct_qt.l_lst_trdd_prc is :%ld:",st_cntrct_qt.l_lst_trdd_prc);
				fn_userlog (c_ServiceName,"BEFORE	d_opn_buy_val is :%lf:",d_opn_buy_val);
			}

      d_uncrst_prft = ((double) li_uncrst_qty * (double) st_cntrct_qt.l_lst_trdd_prc ) -
                      d_opn_buy_val;



		
			if( DEBUG_MSG_LVL_5 )
			{
				fn_userlog (c_ServiceName,"INSIDE FUNCTION BUY VAL IS :%lf:",d_buy_val);
				fn_userlog (c_ServiceName,"INSIDE FUNCTION OPEN BUY VAL IS :%lf:",d_opn_buy_val);
				fn_userlog (c_ServiceName,"Inside Function d_crst_prft is :%lf:",d_crst_prft);
				fn_userlog (c_ServiceName,"Inside Function d_uncrst_prft is :%lf:",d_uncrst_prft);
			  fn_userlog(c_ServiceName,"sss=============li_uncrst_qty is :%d:",li_uncrst_qty);
      	fn_userlog(c_ServiceName,"sss=============d_opn_buy_val is :%lf:",d_opn_buy_val);
      	fn_userlog(c_ServiceName,"sss=============d_buy_val is :%lf:",d_buy_val);
      	fn_userlog(c_ServiceName,"Avgtrd Pr=============d_avg_pr is :%lf:",d_avg_pr);
			}
}
int fn_sell_opnpsn(char *c_ServiceName,
                   char *c_cln_mtch_accnt,
                   char *c_xchng_cd,
                   char *c_undrlyng,
                   char *c_expry_dt,
                   char c_exrc_typ,
                   char c_prdct_typ,
									 /* char c_cprdct_typ *** Commented in Ver 2.8 ***/
                   char c_req_typ )  /*** Added in ver 2.8 ***/
{

	d_sell_val = 0;
	d_buy_val = 0;
	d_opn_sell_val = 0;
	d_uncrst_prft = 0;
  d_crst_prft = 0;
	li_uncrst_qty = 0;
	/*** d_Ccrst_prft = 0 ;
  d_Cuncrst_prft = 0;  *** Commented in VQC as variable is not used ***/

	/* Ver 2.1 Starts*/
	long int li_qty_bal = 0;
	long int li_cum_exctd_qty = 0;
	li_net_qty_bal = 0;
	d_net_avg_rt = 0;
	/* Ver 2.1 Ends*/

  char c_sell_flw = 'S';   /*** Added in Ver 3.4 ***/
  char c_buy_flw  = 'B';   /*** Added in Ver 3.4 ***/

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog(c_ServiceName,"Inside Function fn_sell_opnpsn ");
	}

	if( DEBUG_MSG_LVL_5 )
	{
		fn_userlog(c_ServiceName,"Match Account Is ;%s:",c_cln_mtch_accnt);
  	fn_userlog(c_ServiceName,"Exchnage Code Is :%s:",c_xchng_cd);
  	fn_userlog(c_ServiceName,"CProduct Type Is :%c:",c_cprdct_typ);
  	fn_userlog(c_ServiceName,"Product Type Is :%c:",c_prdct_typ);
  	fn_userlog(c_ServiceName,"Expiry Date Is :%s:",c_expry_dt);
  	fn_userlog(c_ServiceName,"Exercise Type Is :%c:",c_exrc_typ);
  	fn_userlog(c_ServiceName,"Underlying Is :%s:",c_undrlyng);
	}

  /*** Below query changed to upper case in Ver 3.4 ***/

	EXEC SQL
  	SELECT  NVL ( SUM ( FTD_EXCTD_QTY ), 0),
            NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) -
                            NVL ( FTD_FRS_BRKG,0 )           -
                            NVL ( FTD_CVR_BRKG,0 )             ), 0 )
    INTO    :l_tot_buy_qty_m,
            :d_buy_val_m
    FROM    FTD_FO_TRD_DTLS
    WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
    AND     FTD_XCHNG_CD        = :c_xchng_cd
	/*    AND     ftd_prdct_typ       = :c_cprdct_typ * Commented in Ver 2.2 */
    AND     FTD_PRDCT_TYP IN ('F','U','P')   /* Ver 2.2 */
    AND     FTD_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')    /* Added in Ver 2.8 */
    AND     FTD_UNDRLYNG        = :c_undrlyng
    AND     FTD_EXPRY_DT        = :c_expry_dt
    AND     FTD_EXER_TYP        = :c_exrc_typ
  /***  AND     FTD_TRD_FLW         = 'B';  Commented in Ver 3.4 ***/
    AND     FTD_TRD_FLW         = :c_buy_flw ; /*** Ver 3.4 Bind variable used instead of hard coded value ***/

    if ( SQLCODE != 0 )
    {
    	fn_errlog( c_ServiceName, "S31295", SQLMSG, c_errmsg.arr  );
			return -1;
    }

  /*** Below query changed to upper case in Ver 3.4 ***/

	EXEC SQL
  	SELECT  NVL ( SUM ( FTD_EXCTD_QTY ), 0),
            NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) -
                            NVL ( FTD_FRS_BRKG,0 )           -
                            NVL ( FTD_CVR_BRKG,0 )             ), 0 )
    INTO    :l_tot_buy_qty_h,
            :d_buy_val_h
    FROM    FTD_FO_TRD_DTLS_HSTRY
    WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
    AND     FTD_XCHNG_CD        = :c_xchng_cd
   /* AND     ftd_prdct_typ       = :c_cprdct_typ * Commented in Ver 2.2 */
    AND     FTD_PRDCT_TYP IN ('F','U','P')   /* Ver 2.2 */
    AND     FTD_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')    /* Added in Ver 2.8 */
    AND     FTD_UNDRLYNG        = :c_undrlyng
    AND     FTD_EXPRY_DT        = :c_expry_dt
    AND     FTD_EXER_TYP        = :c_exrc_typ
  /***  AND     FTD_TRD_FLW         = 'B';    Commented in Ver 3.4 ***/
    AND     FTD_TRD_FLW         = :c_buy_flw ; /*** Ver 3.4 Bind variable used instead of hard coded value ***/ 

   if ( SQLCODE != 0 )
   {
		 fn_errlog( c_ServiceName, "S31300", SQLMSG, c_errmsg.arr  );
		 return -1;
   }

	 /*** Ver 2.9 starts ***/

   /*** Below query changed to upper case in Ver 3.4 ***/

		EXEC SQL
		SELECT  ABS(NVL ( SUM ( FCO_CLS_QTY ), 0)),
						ABS(NVL ( SUM ( FCO_CLS_QTY * FCO_CLS_RT ), 0 ))
    INTO    :l_tot_buy_qty_fco_h,
            :d_buy_val_fco_h
    FROM  FCO_FO_FCLSOUT_HSTRY
    WHERE FCO_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
    AND   FCO_XCHNG_CD        = :c_xchng_cd
    AND   FCO_PRDCT_TYP IN ('F','U','P')
    AND   FCO_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')
    AND   FCO_UNDRLYNG        = :c_undrlyng
    AND   FCO_EXPRY_DT        = :c_expry_dt
    AND   FCO_EXER_TYP        = :c_exrc_typ
 /***		AND   FCO_ORDR_FLW				= 'S';   Commented in Ver 3.4 ***/
    AND   FCO_ORDR_FLW        = :c_sell_flw ; /*** Ver 3.4 Bind variable used instead of hard coded value ***/


   if ( SQLCODE != 0 )
   {
		 fn_errlog( c_ServiceName, "S31305", SQLMSG, c_errmsg.arr  );
		 return -1;
   }

   /*** Below query changed to upper case in Ver 3.4 ***/

		EXEC SQL
		SELECT  ABS(NVL ( SUM ( FCO_CLS_QTY ), 0)),
						ABS(NVL ( SUM ( FCO_CLS_QTY * FCO_CLS_RT ), 0 ))
    INTO    :l_tot_buy_qty_fco_m,
            :d_buy_val_fco_m
    FROM  FCO_FO_FCLSOUT
    WHERE FCO_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
    AND   FCO_XCHNG_CD        = :c_xchng_cd
    AND   FCO_PRDCT_TYP IN ('F','U','P')
    AND   FCO_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')
    AND   FCO_UNDRLYNG        = :c_undrlyng
    AND   FCO_EXPRY_DT        = :c_expry_dt
    AND   FCO_EXER_TYP        = :c_exrc_typ
 /***		AND   FCO_ORDR_FLW				= 'S';  Commented in Ver 3.4 ***/
    AND   FCO_ORDR_FLW        = :c_sell_flw ; /*** Ver 3.4 Bind variable used instead of hard coded value ***/

   if ( SQLCODE != 0 )
   {
		 fn_errlog( c_ServiceName, "S31310", SQLMSG, c_errmsg.arr  );
		 return -1;
   }

	 /*** Ver 2.9 ends ***/

   l_tot_buy_qty = l_tot_buy_qty_m + l_tot_buy_qty_h + l_tot_buy_qty_fco_m + l_tot_buy_qty_fco_h; /*** fco added in Ver 2.9 ***/
   d_buy_val = d_buy_val_m + d_buy_val_h + d_buy_val_fco_m + d_buy_val_fco_h;  /*** fco added in Ver 2.9 ***/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Total Buy Qty Is ;%ld:",l_tot_buy_qty);	/*** Ver 2.9 ***/
		fn_userlog(c_ServiceName,"Total Buy Value Is ;%lf:",d_buy_val);	/*** Ver 2.9 ***/
	}

   EXEC SQL ALLOCATE :trd_cursor;

	 if ( (l_rec_main_exists == 0 ) && (l_rec_hstry_exists == 1 ) )
      {

       /*** Below query changed to upper case in Ver 3.4 ***/

        EXEC SQL  EXECUTE
          BEGIN
            OPEN  :trd_cursor FOR
              SELECT FTD_EXCTD_QTY,
                     FTD_EXCTD_RT,
                     NVL (FTD_FRS_BRKG, 0),
                     NVL (FTD_CVR_BRKG, 0),
                     FTD_TRD_DT
              FROM FTD_FO_TRD_DTLS_HSTRY
              WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
              AND     FTD_XCHNG_CD        = :c_xchng_cd
	/*              AND     ftd_prdct_typ       = :c_prdct_typ * Commented in Ver 2.2 */
              AND     FTD_PRDCT_TYP IN ('F','U','P')    /* Ver 2.2*/
    					AND     FTD_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')    /* Added in Ver 2.8 */
              AND     FTD_UNDRLYNG        = :c_undrlyng
              AND     FTD_EXPRY_DT        = :c_expry_dt
              AND     FTD_EXER_TYP        = :c_exrc_typ
          /***    AND     FTD_TRD_FLW         = 'S'   Commented in Ver 3.4 ***/
              AND     FTD_TRD_FLW         = :c_sell_flw  /*** Ver 3.4 Bind variable used instead of hard coded value ***/ 
							UNION ALL																			/*** FCO UNION ALL added in Ver 2.9 ***/
							SELECT  ABS(FCO_CLS_QTY),
											FCO_CLS_RT,
											0,
											0,
											FCO_CLS_TM														/*** Doubt pls confirm ***/
							FROM  FCO_FO_FCLSOUT_HSTRY
							WHERE FCO_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
							AND   FCO_XCHNG_CD        = :c_xchng_cd
							AND   FCO_PRDCT_TYP IN ('F','U','P')
							AND   FCO_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')
							AND   FCO_UNDRLYNG        = :c_undrlyng
							AND   FCO_EXPRY_DT        = :c_expry_dt
							AND   FCO_EXER_TYP        = :c_exrc_typ
					/***		AND   FCO_ORDR_FLW				= 'B'  Commented in Ver 3.4 ***/
              AND   FCO_ORDR_FLW        = :c_buy_flw /*** Ver 3.4 Bind variable used instead of hard coded value ***/ 
						ORDER BY 5;																/*** Changed order by clause from ftd_trd_dt to 5 ***/
          END;
        END-EXEC;
      }
      else
      {

      /*** Below query changed to upper case in Ver 3.4 ***/

        EXEC SQL  EXECUTE
          BEGIN
            OPEN  :trd_cursor FOR
              SELECT FTD_EXCTD_QTY,
                     FTD_EXCTD_RT,
                     NVL (FTD_FRS_BRKG, 0),
                     NVL (FTD_CVR_BRKG, 0),
                     FTD_TRD_DT
              FROM FTD_FO_TRD_DTLS
              WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
              AND     FTD_XCHNG_CD        = :c_xchng_cd
      /*        AND     ftd_prdct_typ       = :c_prdct_typ * Commented in Ver 2.2 */
              AND     FTD_PRDCT_TYP IN ('F','U','P')    /* Ver 2.2*/
              AND     FTD_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')    /* Added in Ver 2.8 */
              AND     FTD_UNDRLYNG        = :c_undrlyng
              AND     FTD_EXPRY_DT        = :c_expry_dt
              AND     FTD_EXER_TYP        = :c_exrc_typ
         /***     AND     FTD_TRD_FLW         = 'S'   Commented in Ver 3.4 ***/
              AND     FTD_TRD_FLW         = :c_sell_flw /*** Ver 3.4 Bind variable used instead of hard coded value ***/
              UNION ALL
              SELECT FTD_EXCTD_QTY,
                     FTD_EXCTD_RT,
                     NVL (FTD_FRS_BRKG, 0),
                     NVL (FTD_CVR_BRKG, 0),
                     FTD_TRD_DT
              FROM FTD_FO_TRD_DTLS_HSTRY
              WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
              AND     FTD_XCHNG_CD        = :c_xchng_cd
	    /*              AND     ftd_prdct_typ       = :c_prdct_typ * Commented in Ver 2.2 */
              AND     FTD_PRDCT_TYP IN ('F','U','P')    /* Ver 2.2*/
              AND     FTD_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')    /* Added in Ver 2.8 */
              AND     FTD_UNDRLYNG        = :c_undrlyng
              AND     FTD_EXPRY_DT        = :c_expry_dt
              AND     FTD_EXER_TYP        = :c_exrc_typ
         /***     AND     FTD_TRD_FLW         = 'S'  Commented in Ver 3.4 ***/
              AND     FTD_TRD_FLW         = :c_sell_flw /*** Ver 3.4 Bind variable used instead of hard coded value ***/
							UNION ALL																			/*** FCO UNION ALL added in Ver 2.9 ***/
							SELECT  ABS(FCO_CLS_QTY),
											FCO_CLS_RT,
											0,
											0,
											FCO_CLS_TM														/*** Doubt pls confirm ***/
							FROM  FCO_FO_FCLSOUT	
							WHERE FCO_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
							AND   FCO_XCHNG_CD        = :c_xchng_cd
							AND   FCO_PRDCT_TYP IN ('F','U','P')
							AND   FCO_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')
							AND   FCO_UNDRLYNG        = :c_undrlyng
							AND   FCO_EXPRY_DT        = :c_expry_dt
							AND   FCO_EXER_TYP        = :c_exrc_typ
					/***		AND   FCO_ORDR_FLW				= 'B'  Commented in Ver 3.4 ***/
              AND   FCO_ORDR_FLW        = :c_buy_flw /*** Ver 3.4 Bind variable used instead of hard coded value ***/
							UNION ALL																			/*** FCO UNION ALL added in Ver 2.9 ***/
							SELECT  ABS(FCO_CLS_QTY),
											FCO_CLS_RT,
											0,
											0,
											FCO_CLS_TM														/*** Doubt pls confirm ***/
							FROM  FCO_FO_FCLSOUT_HSTRY
							WHERE FCO_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
							AND   FCO_XCHNG_CD        = :c_xchng_cd
							AND   FCO_PRDCT_TYP IN ('F','U','P')
							AND   FCO_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')
							AND   FCO_UNDRLYNG        = :c_undrlyng
							AND   FCO_EXPRY_DT        = :c_expry_dt
							AND   FCO_EXER_TYP        = :c_exrc_typ
				/***			AND   FCO_ORDR_FLW				= 'B'   Commented in Ver 3.4 ***/
              AND   FCO_ORDR_FLW        = :c_buy_flw /*** Ver 3.4 Bind variable used instead of hard coded value ***/
              ORDER BY 5;
          END;
        END-EXEC;
      }

      li_bal_qty = l_tot_buy_qty;

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Initial balance Qty Is ;%ld:",li_bal_qty);	/*** Ver 2.9 ***/
			}
		while ( 1 )
      {
      li_qty_bal = 0; /* Ver 2.1 */

        EXEC SQL
          FETCH :trd_cursor
          INTO :li_exctd_qty,
               :li_exctd_rt,
               :d_frsh_brk,
               :d_cvr_brk,
               :c_trd_dt;
        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
            break;
          }
          else
          {
            fn_errlog( c_ServiceName, "S31315", SQLMSG, c_errmsg.arr  );
            EXEC SQL CLOSE :trd_cursor;
            EXEC SQL FREE :trd_cursor;
	
          	/*** Commented in VQC *** 	
          
          	EXEC SQL CLOSE :cont_cursor;
        		EXEC SQL FREE :cont_cursor; 

            *************************/
          }
        }

				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"While loop Executed Qty Is ;%ld:",li_exctd_qty);	/*** Ver 2.9 ***/
					fn_userlog(c_ServiceName,"While loop Executed Rate Is ;%ld:",li_exctd_rt);	/*** Ver 2.9 ***/
					fn_userlog(c_ServiceName,"While loop Balance Qty Is ;%ld:",li_bal_qty);	    /*** Ver 2.9 ***/
				}

        if ( li_bal_qty > 0 )
        {
          li_crst_qty = fn_minl ( li_bal_qty, li_exctd_qty );
          d_sell_val = d_sell_val + ( (double) li_crst_qty * (double)  li_exctd_rt ) -
                      d_frsh_brk - d_cvr_brk;
          li_bal_qty = li_bal_qty - li_crst_qty;

          if ( li_bal_qty == 0 )
          {
						if(DEBUG_MSG_LVL_5)
						{
							fn_userlog(c_ServiceName,"Inside SELL li_bal_qty == 0 ");
						}

            li_uncrst_qty = li_exctd_qty - li_crst_qty;
            d_opn_sell_val = d_opn_sell_val  + ( (double) li_uncrst_qty * (double) li_exctd_rt ) -
                             d_frsh_brk - d_cvr_brk;
          }
        }
				 else
        {
          li_uncrst_qty = li_uncrst_qty + li_exctd_qty;
          d_opn_sell_val = d_opn_sell_val + ( (double) li_exctd_qty * (double) li_exctd_rt ) -
                          d_frsh_brk - d_cvr_brk;
        }

				/* Ver 2.1 Starts */
				li_cum_exctd_qty = li_cum_exctd_qty + li_exctd_qty;

				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"Cumulative Executed Qty Is ;%ld:",li_cum_exctd_qty);	/*** Ver 2.9 ***/
				}

				if( (li_cum_exctd_qty  - l_tot_buy_qty) > 0)
				{
					li_qty_bal = fn_minl(li_cum_exctd_qty  - l_tot_buy_qty, li_exctd_qty);
					li_net_qty_bal = li_net_qty_bal + li_qty_bal;
				}

				if ( li_qty_bal > 0 )
				{
					d_net_avg_rt = d_net_avg_rt + (double) li_qty_bal * (double) li_exctd_rt;
				}
				/* Ver 2.1 Ends */

				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"While loop Net Avg Rate Is ;%lf:",d_net_avg_rt);	/*** Ver 2.9 ***/
					fn_userlog(c_ServiceName,"While loop Net Qty Bal Is ;%ld:",li_net_qty_bal);	/*** Ver 2.9 ***/
				}
      }

	EXEC SQL CLOSE :trd_cursor;
  EXEC SQL FREE :trd_cursor;

	if(DEBUG_MSG_LVL_5)
  {
  	fn_userlog(c_ServiceName,"d_sell_val [%lf]",d_sell_val);
  	fn_userlog(c_ServiceName,"d_buy_val [%lf]",d_buy_val);
  	fn_userlog(c_ServiceName,"d_opn_sell_val [%lf]",d_opn_sell_val);
  	fn_userlog(c_ServiceName,"li_uncrst_qty [%ld]",li_uncrst_qty);
  	fn_userlog(c_ServiceName,"st_cntrct_qt.l_lst_trdd_prc [%ld]",st_cntrct_qt.l_lst_trdd_prc);
  }

  d_avg_pr = d_net_avg_rt/(double)li_net_qty_bal; /* Ver 2.1 */

  d_crst_prft = d_sell_val - d_buy_val;
  d_uncrst_prft = d_opn_sell_val -
                 ((double) li_uncrst_qty * (double)st_cntrct_qt.l_lst_trdd_prc );
	
	if( DEBUG_MSG_LVL_5 )
	{
		fn_userlog(c_ServiceName,"Inside SELL Function d_uncrst_prft is :%lf:",d_uncrst_prft);
		fn_userlog(c_ServiceName,"Inside SELL Function d_crst_prft is :%lf:",d_crst_prft);
		fn_userlog(c_ServiceName,"Avgtrd Pr=============d_avg_pr is :%lf:",d_avg_pr);
	}
}

int fn_sqroff_pstn(char *c_ServiceName,
                   char *c_cln_mtch_accnt,
                   char *c_xchng_cd,
                   char *c_undrlyng,
                   char *c_expry_dt,
                   char c_exrc_typ,
                   char c_prdct_typ,
									 /* char c_cprdct_typ   *** Commented in Ver 2.8 ***/
                   char c_req_typ )  /*** Added in ver 2.8 ***/
{
	d_buy_val  = 0;
	d_sell_val = 0;
	d_cls_val  = 0;
	d_uncrst_prft = 0;
	d_crst_prft = 0;
	/*** d_Ccrst_prft = 0 ;
	d_Cuncrst_prft = 0;  *** Commented in VQC as variable is not used ***/

  char c_sell_flw = 'S';   /*** Added in Ver 3.4 ***/
  char c_buy_flw  = 'B';   /*** Added in Ver 3.4 ***/

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog(c_ServiceName,"INSIDE POSITION SQR-OFF");
	}

	if( DEBUG_MSG_LVL_5 )
	{
		fn_userlog(c_ServiceName,"Match Account Is ;%s:",c_cln_mtch_accnt);
		fn_userlog(c_ServiceName,"Exchnage Code Is :%s:",c_xchng_cd);
		fn_userlog(c_ServiceName,"CProduct Type Is :%c:",c_cprdct_typ);
		fn_userlog(c_ServiceName,"Product Type Is :%c:",c_prdct_typ);
		fn_userlog(c_ServiceName,"Expiry Date Is :%s:",c_expry_dt);
		fn_userlog(c_ServiceName,"Exercise Type Is :%c:",c_exrc_typ);
		fn_userlog(c_ServiceName,"Underlying Is :%s:",c_undrlyng);
	}

  /*** Below query changed to upper case in Ver 3.4 ***/

	EXEC SQL
  	SELECT  NVL ( SUM ( FTD_EXCTD_QTY ), 0),
            NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) -
                          NVL ( FTD_FRS_BRKG,0 )           -
                          NVL ( FTD_CVR_BRKG,0 )             ), 0 )
    INTO    :l_tot_sell_qty_m,
            :d_sell_val_m
    FROM    FTD_FO_TRD_DTLS
    WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
    AND     FTD_XCHNG_CD        = :c_xchng_cd
	/*    AND     ftd_prdct_typ       = :c_cprdct_typ  *Commented in ver 2.2 */
    AND     FTD_PRDCT_TYP IN ('F','U','P')    /* Ver 2.2*/
    AND     FTD_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')    /* Added in Ver 2.8 */
    AND     FTD_UNDRLYNG        = :c_undrlyng
    AND     FTD_EXPRY_DT        = :c_expry_dt
    AND     FTD_EXER_TYP        = :c_exrc_typ
  /***  AND     FTD_TRD_FLW         = 'S';  Commented in Ver 3.4 ***/
    AND     FTD_TRD_FLW         = :c_sell_flw ; /*** Ver 3.4 Bind variable used instead of hard coded value ***/

    if ( SQLCODE != 0 )
    {
    	fn_errlog( c_ServiceName, "S31320", SQLMSG, c_errmsg.arr  );
			return -1;
    }
	
  /*** Below query changed to upper case in Ver 3.4 ***/

	EXEC SQL
    SELECT  NVL ( SUM ( FTD_EXCTD_QTY ), 0),
            NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) -
                          NVL ( FTD_FRS_BRKG,0 )           -
                          NVL ( FTD_CVR_BRKG,0 )             ), 0 )
    INTO    :l_tot_sell_qty_h,
            :d_sell_val_h
    FROM    FTD_FO_TRD_DTLS_HSTRY
    WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
    AND     FTD_XCHNG_CD        = :c_xchng_cd
   /* AND     ftd_prdct_typ       = :c_cprdct_typ *Commented in ver 2.2 */
    AND     FTD_PRDCT_TYP IN ('F','U','P')    /* Ver 2.2*/
    AND     FTD_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')    /* Added in Ver 2.8 */
    AND     FTD_UNDRLYNG        = :c_undrlyng
    AND     FTD_EXPRY_DT        = :c_expry_dt
    AND     FTD_EXER_TYP        = :c_exrc_typ
 /***   AND     FTD_TRD_FLW         = 'S';  Commented in Ver 3.4 ***/
     AND     FTD_TRD_FLW         = :c_sell_flw ; /*** Ver 3.4 Bind variable used instead of hard coded value ***/

    if ( SQLCODE != 0 )
    {
    	fn_errlog( c_ServiceName, "S31325", SQLMSG, c_errmsg.arr  );
			return -1;
    }

		l_tot_sell_qty = l_tot_sell_qty_m + l_tot_sell_qty_h;
		d_sell_val = d_sell_val_m + d_sell_val_h;

   /*** Below query changed to upper case in Ver 3.4 ***/

		EXEC SQL
      SELECT  NVL ( SUM ( FTD_EXCTD_QTY ), 0),
              NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) -
                            NVL ( FTD_FRS_BRKG,0 )           -
                            NVL ( FTD_CVR_BRKG,0 )             ), 0 )
      INTO    :l_tot_buy_qty_m,
              :d_buy_val_m
      FROM    FTD_FO_TRD_DTLS
      WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
      AND     FTD_XCHNG_CD        = :c_xchng_cd
	/*      AND     ftd_prdct_typ       = :c_prdct_typ *Commented in ver 2.2 */
      AND     FTD_PRDCT_TYP IN ('F','U','P')    /* Ver 2.2*/
      AND     FTD_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')    /* Added in Ver 2.8 */
      AND     FTD_UNDRLYNG        = :c_undrlyng
      AND     FTD_EXPRY_DT        = :c_expry_dt
      AND     FTD_EXER_TYP        = :c_exrc_typ
  /***    AND     FTD_TRD_FLW         = 'B';   Commented in Ver 3.4 ***/
      AND     FTD_TRD_FLW         = :c_buy_flw ; /*** Ver 3.4 Bind variable used instead of hard coded value ***/

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31330", SQLMSG, c_errmsg.arr  );
				return -1;
      }

  /*** Below query changed to upper case in Ver 3.4 ***/

	EXEC SQL
    SELECT  NVL ( SUM ( FTD_EXCTD_QTY ), 0),
            NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) -
                          NVL ( FTD_FRS_BRKG,0 )           -
                          NVL ( FTD_CVR_BRKG,0 )             ), 0 )
    INTO    :l_tot_buy_qty_h,
            :d_buy_val_h
    FROM    FTD_FO_TRD_DTLS_HSTRY
    WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
    AND     FTD_XCHNG_CD        = :c_xchng_cd
   /* AND     ftd_prdct_typ       = :c_prdct_typ *Commented in ver 2.2 */
    AND     FTD_PRDCT_TYP IN ('F','U','P')    /* Ver 2.2*/
    AND     FTD_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')    /* Added in Ver 2.8 */
    AND     FTD_UNDRLYNG        = :c_undrlyng
    AND     FTD_EXPRY_DT        = :c_expry_dt
    AND     FTD_EXER_TYP        = :c_exrc_typ
    /***AND     FTD_TRD_FLW         = 'B';     Commented in Ver 3.4 ***/
    AND     FTD_TRD_FLW         = :c_buy_flw ; /*** Ver 3.4 Bind variable used instead of hard coded value ***/

    if ( SQLCODE != 0 )
    {
    	fn_errlog( c_ServiceName, "S31335", SQLMSG, c_errmsg.arr  );
			return -1;
    }

   /*** Below query changed to upper case in Ver 3.4 ***/

	EXEC SQL
		/*** SELECT NVL ( ( fco_cls_qty * fco_cls_rt ), 0 ) ** Commented in 2.5 ***/
		SELECT NVL( (SUM( FCO_CLS_QTY * FCO_CLS_RT )), 0 )    /*** Ver 2.5 ***/
    INTO :d_cls_val_m
    FROM FCO_FO_FCLSOUT
    WHERE FCO_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
    AND   FCO_XCHNG_CD        = :c_xchng_cd
	/*    AND   fco_prdct_typ       = :c_prdct_typ   *Commented in Ver 2.2 */
    AND   FCO_PRDCT_TYP IN ('F','U','P')   /* Ver 2.2 */
    AND   FCO_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')    /* Added in Ver 2.8 */
    AND   FCO_UNDRLYNG        = :c_undrlyng
    AND   FCO_EXPRY_DT        = :c_expry_dt
    AND   FCO_EXER_TYP        = :c_exrc_typ;

    if ( SQLCODE != 0 )
    {
    	if ( SQLCODE != NO_DATA_FOUND )
      {
      	fn_errlog( c_ServiceName, "S31340", SQLMSG, c_errmsg.arr  );
				return -1;
      }
      else
      {
      	d_cls_val_m = 0;
       }
    }

  /*** Below query changed to upper case in Ver 3.4 ***/

	EXEC SQL
		/*** SELECT NVL ( ( fco_cls_qty * fco_cls_rt ), 0 ) ** Commented in 2.5 ***/
		SELECT NVL( (SUM( FCO_CLS_QTY * FCO_CLS_RT )), 0 )   /*** Ver 2.5 ***/
    INTO :d_cls_val_h
    FROM FCO_FO_FCLSOUT_HSTRY
    WHERE FCO_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
    AND   FCO_XCHNG_CD        = :c_xchng_cd
	/*    AND   fco_prdct_typ       = :c_prdct_typ *Commented in Ver 2.2 */
    AND   FCO_PRDCT_TYP IN ('F','U','P')   /* Ver 2.2 */
    AND   FCO_PRDCT_TYP LIKE DECODE(:c_req_typ,'O',:c_prdct_typ,'%')    /* Added in Ver 2.8 */
    AND   FCO_UNDRLYNG        = :c_undrlyng
    AND   FCO_EXPRY_DT        = :c_expry_dt
    AND   FCO_EXER_TYP        = :c_exrc_typ;

    if ( SQLCODE != 0 )
    {
    	if ( SQLCODE != NO_DATA_FOUND )
      {
      	fn_errlog( c_ServiceName, "S31345", SQLMSG, c_errmsg.arr  );
				return -1;
      }
      else
      {
      	d_cls_val_h = 0;
      }
    }

	d_cls_val = d_cls_val_m + d_cls_val_h;

	l_tot_buy_qty = l_tot_buy_qty_m + l_tot_buy_qty_h;
	d_buy_val = d_buy_val_m + d_buy_val_h;

	d_crst_prft = d_sell_val - d_buy_val - d_cls_val;
	
	if( DEBUG_MSG_LVL_5 )
	{
		fn_userlog(c_ServiceName,"SQR-OFF d_sell_val Is :%lf:",d_sell_val);
		fn_userlog(c_ServiceName,"SQR-OFF d_buy_val Is :%lf:",d_buy_val);
	}

	d_uncrst_prft = 0.0;

	if( DEBUG_MSG_LVL_5 )
	{
		fn_userlog(c_ServiceName,"Inside SQR-Off Crystalised Profit is :%lf:",d_crst_prft);
	}

}
/*** Ver 2.4  Starts ***/
int fn_sltpbuy_opnpstn(char *c_ServiceName,
                   		 char *c_cln_mtch_accnt,
                   		 char *c_xchng_cd,
                   		 char *c_undrlyng,
                   		 char *c_expry_dt,
                   		 char c_exrc_typ
                  		)
{


  varchar c_trd_dt [ LEN_DATE ];

  
  l_tot_sell_qty = 0;
  d_sell_val = 0;
  d_opn_sltp_val = 0;
  li_uncrst_qty = 0;
	li_crst_qty = 0;

  long int li_qty_bal = 0;
  long int li_cum_exctd_qty = 0;
  li_net_qty_bal = 0;

  char c_sell_flw = 'S';   /*** Added in Ver 3.4 ***/
  char c_buy_flw  = 'B';   /*** Added in Ver 3.4 ***/
  char c_sltpfp_prd_typ = 'U'; /*** Added in Ver 3.4 ***/ 

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Inside Function fn_sltpbuy_opnpstn");
  }

  if( DEBUG_MSG_LVL_5 )
  {
    fn_userlog(c_ServiceName,"Match Account Is ;%s:",c_cln_mtch_accnt);
    fn_userlog(c_ServiceName,"Exchnage Code Is :%s:",c_xchng_cd);
    fn_userlog(c_ServiceName,"CProduct Type Is :%c:",c_cprdct_typ);
    fn_userlog(c_ServiceName,"Product Type Is :%c:",c_prdct_typ);
    fn_userlog(c_ServiceName,"Expiry Date Is :%s:",c_expry_dt);
    fn_userlog(c_ServiceName,"Exercise Type Is :%c:",c_exrc_typ);
    fn_userlog(c_ServiceName,"Underlying Is :%s:",c_undrlyng);
  }

  /*** Below query changed to upper case in Ver 3.4 ***/

  EXEC SQL
        SELECT  NVL ( SUM ( FTD_EXCTD_QTY ), 0),
                NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) ), 0 )
        INTO    :l_tot_sell_qty,
                :d_sell_val
        FROM    FTD_FO_TRD_DTLS
        WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
        AND     FTD_XCHNG_CD        = :c_xchng_cd
      /***  AND     FTD_PRDCT_TYP = 'U'  Commented in Ver 3.4 ***/
        AND     FTD_PRDCT_TYP = :c_sltpfp_prd_typ /*** Ver 3.4 Bind variable used instead of hard coded value ***/
        AND     FTD_UNDRLYNG        = :c_undrlyng
        AND     FTD_EXPRY_DT        = :c_expry_dt
        AND     FTD_EXER_TYP        = :c_exrc_typ
      /***  AND     FTD_TRD_FLW         = 'S';  Commented in Ver 3.4 ***/
        AND     FTD_TRD_FLW         = :c_sell_flw ; /*** Ver 3.4 Bind variable used instead of hard coded value ***/

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31350", SQLMSG, c_errmsg.arr  );
        return -1;
      }

    EXEC SQL ALLOCATE :trd_cursor;

    /*** Below query changed to upper case in Ver 3.4 ***/

        EXEC SQL  EXECUTE
          BEGIN
            OPEN  :trd_cursor FOR
              SELECT FTD_EXCTD_QTY,
                     FTD_EXCTD_RT,
                     FTD_TRD_DT
              FROM FTD_FO_TRD_DTLS
              WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
              AND     FTD_XCHNG_CD        = :c_xchng_cd
            /***  AND     FTD_PRDCT_TYP = 'U'  Commented in Ver 3.4 ***/
              AND     FTD_PRDCT_TYP = :c_sltpfp_prd_typ /*** Ver 3.4 Bind variable used instead of hard coded value ***/
              AND     FTD_UNDRLYNG        = :c_undrlyng
              AND     FTD_EXPRY_DT        = :c_expry_dt
              AND     FTD_EXER_TYP        = :c_exrc_typ
            /***  AND     FTD_TRD_FLW         = 'B'    Commented in Ver 3.4 ***/
              AND     FTD_TRD_FLW         = :c_buy_flw  /*** Ver 3.4 Bind variable used instead of hard coded value ***/
              ORDER BY FTD_TRD_DT;
          END;
        END-EXEC;
    

      li_bal_qty = l_tot_sell_qty;

    while ( 1 )
    {
        li_qty_bal = 0;

        EXEC SQL
          FETCH :trd_cursor
          INTO :li_exctd_qty,
               :li_exctd_rt,
               :c_trd_dt;
	      
        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {

            break;
          }
          else
          {
            fn_errlog( c_ServiceName, "S31355", SQLMSG, c_errmsg.arr  );
            EXEC SQL CLOSE :trd_cursor;
            EXEC SQL FREE :trd_cursor;
    
            /***  Commented in VQC ***
  
            EXEC SQL CLOSE :cont_cursor;
            EXEC SQL FREE :cont_cursor; 
       
            **************************/
            return -1;
          }
        }

     if ( li_bal_qty > 0 )
     {
          if(DEBUG_MSG_LVL_5)
          {
            fn_userlog(c_ServiceName,"Inside li_bal_qty > 0");
            fn_userlog(c_ServiceName,"HERE li_bal_qty is :%ld:",li_bal_qty);
            fn_userlog(c_ServiceName,"HERE li_exctd_qty is :%ld:",li_exctd_qty);
          }

          li_crst_qty = fn_minl ( li_bal_qty, li_exctd_qty );

          li_bal_qty = li_bal_qty - li_crst_qty;

          if ( li_bal_qty == 0 )
          {
            li_uncrst_qty = li_exctd_qty - li_crst_qty;
            d_opn_sltp_val= d_opn_sltp_val + ( (double) li_uncrst_qty * (double) li_exctd_rt );
          }
        }
        else
        {
          if(DEBUG_MSG_LVL_5)
          {
            fn_userlog(c_ServiceName,"Inside li_bal_qty = 0");
            fn_userlog(c_ServiceName,"Executed Qty Is :%ld:",li_exctd_qty);
          }

          li_uncrst_qty = li_uncrst_qty + li_exctd_qty;
          d_opn_sltp_val = d_opn_sltp_val  + ( (double) li_exctd_qty * (double)  li_exctd_rt );

          if(DEBUG_MSG_LVL_5)
          {
            fn_userlog(c_ServiceName,"Uncrystalised Qty Is :%ld:",li_uncrst_qty);
          }
        }

      }

      EXEC SQL CLOSE :trd_cursor;
      EXEC SQL FREE :trd_cursor;

     
      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog (c_ServiceName,"Sltp buy  d_opn_sltp_val is :%lf:",d_opn_sltp_val);
      }


}

int fn_sltpsell_opnpstn(char *c_ServiceName,
                   		  char *c_cln_mtch_accnt,
                        char *c_xchng_cd,
                   			char *c_undrlyng,
                   			char *c_expry_dt,
                   			char c_exrc_typ)
{

  d_buy_val = 0;
  d_opn_sell_val = 0;
  li_uncrst_qty = 0;
	d_opn_sltp_val = 0;
  long int li_qty_bal = 0;

  char c_sell_flw = 'S';   /*** Added in Ver 3.4 ***/
  char c_buy_flw  = 'B';   /*** Added in Ver 3.4 ***/
  char c_sltpfp_prd_typ = 'U'; /*** Added in Ver 3.4 ***/

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"Inside Function fn_sltpsell_opnpstn ");
  }

  if( DEBUG_MSG_LVL_5 )
  {
    fn_userlog(c_ServiceName,"Match Account Is ;%s:",c_cln_mtch_accnt);
    fn_userlog(c_ServiceName,"Exchnage Code Is :%s:",c_xchng_cd);
    fn_userlog(c_ServiceName,"CProduct Type Is :%c:",c_cprdct_typ);
    fn_userlog(c_ServiceName,"Product Type Is :%c:",c_prdct_typ);
    fn_userlog(c_ServiceName,"Expiry Date Is :%s:",c_expry_dt);
    fn_userlog(c_ServiceName,"Exercise Type Is :%c:",c_exrc_typ);
    fn_userlog(c_ServiceName,"Underlying Is :%s:",c_undrlyng);
  }

  /*** Below query changed to upper case in Ver 3.4 ***/

  EXEC SQL
    SELECT  NVL ( SUM ( FTD_EXCTD_QTY ), 0),
            NVL ( SUM ( ( FTD_EXCTD_QTY * FTD_EXCTD_RT ) ),0)
    INTO    :l_tot_buy_qty,
            :d_buy_val
    FROM    FTD_FO_TRD_DTLS
    WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
    AND     FTD_XCHNG_CD        = :c_xchng_cd
   /***  AND     FTD_PRDCT_TYP = 'U'   Commented in Ver 3.4 ***/
    AND     FTD_PRDCT_TYP = :c_sltpfp_prd_typ  /***  Ver 3.4 Bind variable used instead of hard coded value ***/ 
    AND     FTD_UNDRLYNG        = :c_undrlyng
    AND     FTD_EXPRY_DT        = :c_expry_dt
    AND     FTD_EXER_TYP        = :c_exrc_typ
   /*** AND     FTD_TRD_FLW         = 'B';  Commented in Ver 3.4 ***/
    AND     FTD_TRD_FLW         = :c_buy_flw ; /***  Ver 3.4 Bind variable used instead of hard coded value ***/

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31360", SQLMSG, c_errmsg.arr  );
      return -1;
    }


   EXEC SQL ALLOCATE :trd_cursor;

   /*** Below query changed to upper case in Ver 3.4 ***/

        EXEC SQL  EXECUTE
          BEGIN
            OPEN  :trd_cursor FOR
              SELECT FTD_EXCTD_QTY,
                     FTD_EXCTD_RT,
                     FTD_TRD_DT
              FROM FTD_FO_TRD_DTLS
              WHERE   FTD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
              AND     FTD_XCHNG_CD        = :c_xchng_cd  
           /***   AND     FTD_PRDCT_TYP 			= 'U'  Commented in Ver 3.4 ***/
              AND     FTD_PRDCT_TYP       = :c_sltpfp_prd_typ /* Ver 3.4 Bind variable used instead of hard coded value */
              AND     FTD_UNDRLYNG        = :c_undrlyng
              AND     FTD_EXPRY_DT        = :c_expry_dt
              AND     FTD_EXER_TYP        = :c_exrc_typ
           /***   AND     FTD_TRD_FLW         = 'S'  Commented in Ver 3.4 ***/
              AND     FTD_TRD_FLW         = :c_sell_flw /* Ver 3.4 Bind variable used instead of hard coded value */     
              ORDER BY 3;
          END;
        END-EXEC;


      li_bal_qty = l_tot_buy_qty;

    while ( 1 )
      {
      li_qty_bal = 0; 

        EXEC SQL
          FETCH :trd_cursor
          INTO :li_exctd_qty,
               :li_exctd_rt,
               :c_trd_dt;

        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
            break;
          }
          else
          {
            fn_errlog( c_ServiceName, "S31365", SQLMSG, c_errmsg.arr  );
            EXEC SQL CLOSE :trd_cursor;
            EXEC SQL FREE :trd_cursor;
   
            /*** Commented in VQC ***
   
            EXEC SQL CLOSE :cont_cursor;
            EXEC SQL FREE :cont_cursor;

            *************************/
          }
        }

        if ( li_bal_qty > 0 )
        {
          li_crst_qty = fn_minl ( li_bal_qty, li_exctd_qty );
          li_bal_qty = li_bal_qty - li_crst_qty;

          if ( li_bal_qty == 0 )
          {
            if(DEBUG_MSG_LVL_5)
            {
              fn_userlog(c_ServiceName,"Inside SELL li_bal_qty == 0 ");
            }

            li_uncrst_qty = li_exctd_qty - li_crst_qty;
            d_opn_sltp_val = d_opn_sltp_val + ( (double) li_uncrst_qty * (double) li_exctd_rt );
                             
          }
        }
         else
        {
          li_uncrst_qty = li_uncrst_qty + li_exctd_qty;
          d_opn_sltp_val = d_opn_sltp_val + ( (double) li_exctd_qty * (double) li_exctd_rt ); 
                          
        }

      }

  EXEC SQL CLOSE :trd_cursor;
  EXEC SQL FREE :trd_cursor;

		d_opn_sltp_val = d_opn_sltp_val * (-1);

	 if( DEBUG_MSG_LVL_3 )
   {
       fn_userlog (c_ServiceName,"Sltp Sell  d_opn_sltp_val is :%lf:",d_opn_sltp_val);
   }
}
/*** Ver 2.4 **/
