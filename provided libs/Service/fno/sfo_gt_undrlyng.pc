/******************************************************************************/
/*	Program	    			:	SFO_GT_UNDRLYNG                                       */
/*                                                                            */
/*  Input             : vw_undrlyng                                           */
/*                                                                            */
/*  Output            : vw_undrlyng                                           */
/*                      vw_err_msg                                            */
/*                                                                            */
/*  Description       : To get the details of the underlying for the given    */
/*                      input of exchange code, product type and underlying   */
/*                                                                            */
/*  Log               : 1.0   17-Sep-2001   S. Swaminathan                    */
/*										:	1.1		03-Mar-2008		Sandeep Patil											*/
/*										:	1.2		19-Mar-2008		Smitha Nuti												*/
/*                                                                            */
/******************************************************************************/
/*  1.0  -  New release                                                       */
/*	1.1	 -  IBM MIGRATION CHANGES																							*/
/*	1.2	 -  FP CHANGES																												*/
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <sqlca.h>
#include <fml32.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fn_read_debug_lvl.h>			/*** Ver1.1 ***/

void SFO_GT_UNDRLYNG( TPSVCINFO *rqst )
{
	char c_ServiceName[ 33];
	char c_errmsg[256];
	char c_msg[256];

	EXEC SQL BEGIN DECLARE SECTION;
		struct vw_undrlyng *ptr_st_undrlyng;
    varchar c_close_prc_tm[ LEN_DATE ];
	EXEC SQL END DECLARE SECTION;

	struct vw_err_msg *ptr_st_err_msg;

	ptr_st_undrlyng = ( struct vw_undrlyng *)rqst->data;
	strcpy( c_ServiceName, rqst->name );

	INITDBGLVL(c_ServiceName);			/*** Ver1.1 ***/

	ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
	if ( ptr_st_err_msg ==  NULL )
	{
		fn_errlog ( c_ServiceName, "S31005", TPMSG, c_errmsg );
		tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
	}

	memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

	if (DEBUG_MSG_LVL_3)			/*** Ver1.1 ***/
	{
  	fn_userlog ( c_ServiceName,"Exchange Code:%s:", ptr_st_undrlyng->c_xchng_cd );
  	fn_userlog ( c_ServiceName,"Product Type  :%c:", ptr_st_undrlyng->c_prd_typ );
  	fn_userlog ( c_ServiceName,"Undryling :%s:",    ptr_st_undrlyng->c_undrlyng );
	}

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_undrlyng->c_rout_crt );

	EXEC SQL
			SELECT 	fum_xchng_cd,
							fum_prdct_typ,
							fum_undrlyng,
							fum_ctgry_indstk,
							fum_stlmnt_typ,
							fum_dlvry_allwd,
							fum_qt_trdng_flg,
							NVL(fum_cls_prc,0),
							NVL(to_char(fum_cls_prc_dt,'DD-Mon-YYYY'),'*')
		   INTO		:ptr_st_undrlyng->c_xchng_cd,
		   				:ptr_st_undrlyng->c_prd_typ,
		   				:ptr_st_undrlyng->c_undrlyng,
		   				:ptr_st_undrlyng->c_ctgry_indstk,
		   				:ptr_st_undrlyng->c_stlmnt_typ,
		   				:ptr_st_undrlyng->c_dlvry_allwd,
		   				:ptr_st_undrlyng->c_qt_trdng_flg,
		   				:ptr_st_undrlyng->l_close_prc,
		   				:c_close_prc_tm
		   FROM 	fum_fo_undrlyng_mstr
		  WHERE 	fum_xchng_cd	= :ptr_st_undrlyng->c_xchng_cd 
		    AND		fum_prdct_typ	= decode(:ptr_st_undrlyng->c_prd_typ,'P','F',:ptr_st_undrlyng->c_prd_typ) /*Ver 1.2 */
		    AND		fum_undrlyng	= :ptr_st_undrlyng->c_undrlyng;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31010", SQLMSG, ptr_st_err_msg->c_err_msg );
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

  if ( SQLCODE == NO_DATA_FOUND )
  {
    fn_errlog ( c_ServiceName, "B21033", DEFMSG, ptr_st_err_msg->c_err_msg );
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

  SETNULL ( c_close_prc_tm );

  if(strcmp((char *)c_close_prc_tm.arr,"*")== 0)
  {
    strcpy ( ptr_st_undrlyng->c_cls_prc_tm ," ");
  }
  else
  {
    strcpy ( ptr_st_undrlyng->c_cls_prc_tm , (char *) c_close_prc_tm.arr );
  }

	tpfree ( ( char * ) ptr_st_err_msg );
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_undrlyng, 
                                  sizeof( struct vw_undrlyng ), 0 );
}

