
/******************************************************************************/
/*	Program	    			:	sfo_asgnt_dwld                                        */
/*  Input             :                                                       */
/*  Output            :                                                       */
/*  Description       :                                                       */
/*  Log               :                                                       */
/******************************************************************************/
/*  25-Mar-2001    		: Ver 1.0       Infotech|Sangeet   						        	*/
/*	02-Nov-2007				: Ver 1.1				Infotech|Ranjit		 											*/
/*	18-Jul-2011				:	Ver 1.2				Infotech|Swati                        	*/
/*	24-Feb-2012				:	Ver 1.3				Infotech|sandip                        	*/
/*	12-Jul-2012				:	Ver 1.4				Infotech|sandip                        	*/
/*  22-Feb-2013       : Ver 1.5       Infotech|Sachin                         */
/*  02-May-2015       : Ver 1.6       Infotech|Anand Dhopte                   */
/*  07-Mar-2023       : Ver 1.7       Infotech|Mahesh Shinde                  */
/******************************************************************************/
/*  Ver 1.0        		: New Release																						*/
/*  Ver 1.1        		: IBM Migration                                         */
/*  Ver 1.2        		: SPAN Changes                                          */
/*  Ver 1.3        		: BSE Changes                                           */
/*  Ver 1.4        		: BSE condition Fix                                     */
/*  Ver 1.5           : Game Backoffice Automation                            */
/*  Ver 1.6           : Contract Master and Trade Quote Merger Changes        */
/*  Ver 1.7    			  : FNO lock user changes - Mahesh             						*/
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fo_fml_def.h>
#include <fo.h>
#include <fn_log.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_session.h>       	/* ver 1.1 */
#include <fn_read_debug_lvl.h>	/* ver 1.1 */
#include <fn_span_lib.h>      	/* ver 1.2 */
#include <fn_pos.h>   /** Ver 1.5 ***/

int fn_upd_assnbk (  char *c_ServiceName ,							/***	Ver	1.2	***/
										 struct st_asgnmt *st_ip_asgnmt,
							    	 struct st_err_msg *ptr_st_err_msg ); 



void SFO_ASGNT_DWLD( TPSVCINFO *rqst )
{

	FBFR32 *ptr_fml_Ibuf;

	char c_ServiceName [33];
  char c_err_msg [256];
	int  i_returncode;
	int  i_ip_len;
	int  i_op_len;
	int  i_trnsctn;
	char c_tag [ 256 ];
	long int li_rec_no  = 0;
	char c_cln_mtch_accnt[11];
	long l_opnpstn_qty  = 0;
	char c_msg[256];

  /**** Ver 1.5 Starts ****/
  char c_program_nm[33];
  char c_xchng_cd_tmp[4];
  char c_match_id[11];
  char c_error_txt[256];

  MEMSET(c_program_nm);
  MEMSET(c_xchng_cd_tmp);
  MEMSET(c_match_id);
  MEMSET(c_error_txt);

  /**** Ver 1.5 Ends ***/
	
	EXEC SQL BEGIN DECLARE SECTION;
	int  i_rec_exists;
	char c_trd_dt[12];
	char c_input_dt[12];
	char c_date[9];
	struct vw_asgnmt st_asgnmt;
	EXEC SQL END DECLARE SECTION;

	struct vw_mtch_cntrct st_mtch_cntrct;
	struct vw_contract st_contract;
	struct vw_pstn_actn st_pstn_actn;
	struct vw_sequence st_seq;
	
	/***** Ver 1.2 Starts *****/

	struct  st_pstn_actn st_ip_pstn;
  char    c_spn_flag   = 'N';
  char    c_bse_spn_flag   = 'N';					/**** Ver 1.3 **/
	struct  st_asgnmt	   st_ip_asgnmt	;
	struct  st_err_msg   st_error_mg;

	/***** Ver 1.2 Ends   *****/

	ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
	strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);		/* ver 1.1 */

  /*** Ver 1.5 ***/
  strcpy(c_program_nm,"bat_asgnt_dwld");

  /** Ver 1.5 ends ***/

	i_returncode = Fvftos32( ptr_fml_Ibuf,
													 ( char * )&st_mtch_cntrct,
                           "vw_mtch_cntrct" );
	if( i_returncode == -1 )
	{
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    sprintf ( c_msg, "%s",c_err_msg );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.5 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.5 ***/ 
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );		
	}

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_mtch_cntrct.c_rout_crt );
  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                      c_err_msg,
																		  ptr_fml_Ibuf,
																		  5,
					 FFO_EBA_MTCH_ACT_NO , ( char * )st_asgnmt.c_cln_mtch_accnt, NULL,
					 FFO_ASSIGN_QTY , ( char * )&st_asgnmt.l_asgnd_qty, NULL,
					 FFO_OPNPSTN_QTY , ( char * )&st_asgnmt.l_opnpstn_qty, NULL,
					 FFO_ASGN_DT , ( char * )st_asgnmt.c_asgn_dt, NULL,
					 FFO_TRD_DT , ( char * )c_input_dt, NULL);
	if( i_returncode == SYSTEM_ERROR )
	{
		fn_errlog( c_ServiceName, "S31010", LIBMSG , c_err_msg );
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    sprintf ( c_msg, "%s",c_err_msg );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.5 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.5 ***/ 
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}
															
  strcpy(c_match_id,st_asgnmt.c_cln_mtch_accnt);  /*** Ver 1.5 ***/
  strcpy(c_xchng_cd_tmp,st_mtch_cntrct.c_xchng_cd);      /*** Ver 1.5 ***/
	
	i_ip_len = sizeof( struct vw_mtch_cntrct );
	i_op_len = sizeof( struct vw_contract );

	fn_cpy_ddr(st_mtch_cntrct.c_rout_crt);
	st_mtch_cntrct.c_rqst_typ = MATCH_ID_TO_CONTRACT;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "c_xchng_cd [%s]",st_mtch_cntrct.c_xchng_cd );
		fn_userlog( c_ServiceName, "c_instrmnt_typ [%s]",st_mtch_cntrct.c_instrmnt_typ );
		fn_userlog( c_ServiceName, "d_strike_prc [%lf]", st_mtch_cntrct.d_strike_prc );
		fn_userlog( c_ServiceName, "c_symbol [%s]",st_mtch_cntrct.c_symbol );
		fn_userlog( c_ServiceName, "c_expry_dt [%s]",st_mtch_cntrct.c_expry_dt );
		fn_userlog( c_ServiceName, "c_opt_typ [%s]",st_mtch_cntrct.c_opt_typ );
		fn_userlog( c_ServiceName, "l_ca_lvl [%ld]",st_mtch_cntrct.l_ca_lvl );
		fn_userlog( c_ServiceName, "c_rqst_typ [%c]",st_mtch_cntrct.c_rqst_typ );
		fn_userlog( c_ServiceName, "c_cln_mtch_accnt [%s]",st_asgnmt.c_cln_mtch_accnt );
		fn_userlog( c_ServiceName, "st_asgnmt  [%ld]",st_asgnmt.l_asgnd_qty );
		fn_userlog( c_ServiceName, "l_opnpstn_qty [%ld]",st_asgnmt.l_opnpstn_qty );
	}

	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_mtch_cntrct,
                              &st_contract,
                              "vw_mtch_cntrct",
                              "vw_contract",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_CNT_FOR_ENT" );
	if( i_returncode != SUCC_BFR )
	{
		fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    sprintf ( c_msg, "%s",c_err_msg );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.5 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.5 ***/
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}
	if(DEBUG_MSG_LVL_3)
  {
		fn_userlog( c_ServiceName, "c_exrc_typ [%c]",st_contract.c_exrc_typ );
		fn_userlog( c_ServiceName, "c_ctgry_indstk [%c]",st_contract.c_ctgry_indstk );
		fn_userlog( c_ServiceName, "c_xchng_cd [%s]",st_contract.c_xchng_cd );
		fn_userlog( c_ServiceName, "c_prd_typ [%c]",st_contract.c_prd_typ );
		fn_userlog( c_ServiceName, "l_strike_prc [%ld]", st_contract.l_strike_prc );
		fn_userlog( c_ServiceName, "c_undrlyng [%s]",st_contract.c_undrlyng );
		fn_userlog( c_ServiceName, "c_expry_dt [%s]",st_contract.c_expry_dt );
		fn_userlog( c_ServiceName, "c_opt_typ [%c]",st_contract.c_opt_typ );
		fn_userlog( c_ServiceName, "l_ca_lvl [%ld]",st_contract.l_ca_lvl );
		fn_userlog( c_ServiceName, "c_ctgry_indstk [%c]",st_contract.c_ctgry_indstk );
	}


	strcpy(st_asgnmt.c_xchng_cd, st_contract.c_xchng_cd );
	strcpy(st_asgnmt.c_undrlyng, st_contract.c_undrlyng );
	strcpy(st_asgnmt.c_expry_dt, st_contract.c_expry_dt );
	st_asgnmt.l_eba_cntrct_id = st_contract.l_eba_cntrct_id;
	st_asgnmt.c_prd_typ = st_contract.c_prd_typ;
	st_asgnmt.c_exrc_typ = st_contract.c_exrc_typ;
	st_asgnmt.c_opt_typ = st_contract.c_opt_typ;
	st_asgnmt.l_strike_prc = st_contract.l_strike_prc;
	st_asgnmt.c_ctgry_indstk = st_contract.c_ctgry_indstk;
/****************commented because the view is not having thae field*****************/
/*	st_asgnmt.l_ca_lvl = st_contract.l_ca_lvl; */
/****************commented because the view is not having thae field*****************/


	i_rec_exists = 0;

	EXEC SQL
	SELECT  1
	INTO :i_rec_exists	
	FROM  dual
	WHERE EXISTS
	( SELECT 1
	FROM FAB_FO_ASGNMNT_BOOK 
	WHERE FAB_CLM_MTCH_ACCNT= :st_asgnmt.c_cln_mtch_accnt
	AND FAB_XCHNG_CD= :st_asgnmt.c_xchng_cd
	AND FAB_PRDCT_TYP= :st_asgnmt.c_prd_typ
	AND FAB_UNDRLYNG = :st_asgnmt.c_undrlyng 
	AND FAB_EXPRY_DT = to_date (:st_asgnmt.c_expry_dt,'DD-Mon-YYYY')
	AND FAB_EXER_TYP = :st_asgnmt.c_exrc_typ
	AND FAB_OPT_TYP = :st_asgnmt.c_opt_typ
	AND FAB_STRK_PRC = :st_asgnmt.l_strike_prc 
	AND FAB_ASGND_DT = to_date (:st_asgnmt.c_asgn_dt,'DD-Mon-YYYY') 
	) ; 

	if ( i_rec_exists == 1 )
	{	
  	fn_userlog(c_ServiceName,"Processed successfully"); 						
		tpreturn(TPSUCCESS, SUCC_BFR, NULL, 0, 0 );
	}
	
	/*** Form the Assignment reference number ***/
	EXEC SQL
		SELECT to_char( exg_nxt_trd_dt, 'DD-Mon-YYYY' ),
     			 to_char( exg_nxt_trd_dt, 'YYYYMMDD' )
		INTO   :c_trd_dt,
     			 :c_date
		FROM   exg_xchng_mstr
		WHERE  exg_xchng_cd = :st_asgnmt.c_xchng_cd
		AND    exg_mkt_typ  = 'D';

	if ( SQLCODE != 0 )
	{
		fn_errlog( c_ServiceName, "S31020", SQLMSG , c_err_msg );
 		sprintf ( c_msg, "%s",c_err_msg );
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
 		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.5 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.5 ***/
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}

	strcpy( st_seq.c_trd_dt , c_trd_dt );
	st_seq.c_rqst_typ = GET_ASGNMT_SEQ;


	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_seq,
                              &st_seq,
                              "vw_sequence",
                              "vw_sequence",
                              sizeof(st_seq),
                              sizeof(st_seq),
                              0,
                              "SFO_GET_SEQ" );

	if( i_returncode != SUCC_BFR )
	{
		fn_errlog( c_ServiceName, "S31025", LIBMSG , c_err_msg );
  	sprintf ( c_msg, "%s",c_err_msg );
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.5 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.5 ***/
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}

	sprintf( st_asgnmt.c_asgn_rfrnc, "%s%010d",c_date,st_seq.l_seq_num );
	fn_userlog( c_ServiceName, "C_ASGN_RFRNC [%s]",st_asgnmt.c_asgn_rfrnc );

	/*** Update the positions ***/
	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
		fn_errlog( c_ServiceName, "S31030", LIBMSG , c_err_msg );
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    sprintf ( c_msg, "%s",c_err_msg );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.5 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.5 ***/ 
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }
  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "i_trnsctn:%d:", i_trnsctn );
  }

	/* i_returncode = fn_lock_usr( c_ServiceName, st_asgnmt.c_cln_mtch_accnt ); Ver 1.7 ***/
	i_returncode = fn_lock_fno( c_ServiceName, st_asgnmt.c_cln_mtch_accnt ); /** Ver 1.7 ***/
	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31035", LIBMSG , c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	sprintf ( c_msg, "%s",c_err_msg );
  	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.5 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.5 ***/
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}

	strcpy(st_pstn_actn.c_cln_mtch_accnt, st_asgnmt.c_cln_mtch_accnt);
	st_pstn_actn.l_eba_cntrct_id = st_asgnmt.l_eba_cntrct_id ;
	strcpy(st_pstn_actn.c_xchng_cd , st_asgnmt.c_xchng_cd);
	st_pstn_actn.c_prd_typ = st_asgnmt.c_prd_typ ;
	strcpy(st_pstn_actn.c_undrlyng , st_asgnmt.c_undrlyng);
	strcpy(st_pstn_actn.c_expry_dt , st_asgnmt.c_expry_dt);
	st_pstn_actn.c_exrc_typ  = st_asgnmt.c_exrc_typ ;
	st_pstn_actn.c_opt_typ = st_asgnmt.c_opt_typ ;
	st_pstn_actn.l_strike_prc = st_asgnmt.l_strike_prc ;
	st_pstn_actn.c_ctgry_indstk = st_asgnmt.c_ctgry_indstk ;
	st_pstn_actn.l_ca_lvl  = st_contract.l_ca_lvl ;
	st_pstn_actn.l_actn_typ = ASGMNT ;
	st_pstn_actn.l_orgnl_qty = 0 ;
	st_pstn_actn.l_orgnl_rt  = 0 ;
	st_pstn_actn.l_new_qty = 0 ;
	st_pstn_actn.l_new_rt  = 0 ;
	st_pstn_actn.l_exec_qty  = st_asgnmt.l_asgnd_qty ;
	st_pstn_actn.l_exec_rt  = 0 ;
	st_pstn_actn.d_add_mrgn_amt  = 0 ;
	strcpy(st_pstn_actn.c_ref_rmrks , st_asgnmt.c_asgn_rfrnc);

	if(DEBUG_MSG_LVL_3)
  {
		fn_userlog( c_ServiceName, "st_pstn_actn.c_cln_mtch_accnt [%s]",st_pstn_actn.c_cln_mtch_accnt );
		fn_userlog( c_ServiceName, "st_pstn_actn.l_eba_cntrct_id [%ld]",st_pstn_actn.l_eba_cntrct_id );
		fn_userlog( c_ServiceName, "st_pstn_actn.c_xchng_cd [%s]",st_pstn_actn.c_xchng_cd );
		fn_userlog( c_ServiceName, "st_pstn_actn.c_prd_typ [%c]",st_pstn_actn.c_prd_typ );
		fn_userlog( c_ServiceName, "st_pstn_actn.c_undrlyng [%s]",st_pstn_actn.c_undrlyng );
		fn_userlog( c_ServiceName, "st_pstn_actn.c_expry_dt [%s]",st_pstn_actn.c_expry_dt );
		fn_userlog( c_ServiceName, "st_pstn_actn.c_exrc_typ [%c]",st_pstn_actn.c_exrc_typ );
		fn_userlog( c_ServiceName, "st_pstn_actn.c_opt_typ [%c]",st_pstn_actn.c_opt_typ );
		fn_userlog( c_ServiceName, "st_pstn_actn.l_strike_prc [%ld]",st_pstn_actn.l_strike_prc );
		fn_userlog( c_ServiceName, "st_pstn_actn.c_ctgry_indstk [%c]",st_pstn_actn.c_ctgry_indstk );
		fn_userlog( c_ServiceName, "st_pstn_actn.l_ca_lvl [%c]",st_pstn_actn.l_ca_lvl );
		fn_userlog( c_ServiceName, "st_pstn_actn.l_exec_qty [%ld]",st_pstn_actn.l_exec_qty );
		fn_userlog( c_ServiceName, "st_pstn_actn.c_ref_rmrks [%s]",st_pstn_actn.c_ref_rmrks );
		fn_userlog( c_ServiceName, "st_asgnmt.c_asgn_dt [%s]",st_asgnmt.c_asgn_dt );
	}

	EXEC SQL																/***	Ver	1.2	***/
  	SELECT  NVL(CLM_SPAN_ALLWD,'N'),
						NVL(CLM_BSESPAN_ALLWD,'N')		/*** Ver 1.3 ***/
  	INTO    :c_spn_flag,
						:c_bse_spn_flag								/*** Ver 1.3 ***/
  	FROM    CLM_CLNT_MSTR
  	WHERE   CLM_MTCH_ACCNT = :st_pstn_actn.c_cln_mtch_accnt;

	if( SQLCODE != 0 )
  {
  	fn_errlog( c_ServiceName, "S31040", SQLMSG , c_err_msg );
  	sprintf ( c_msg, "%s",c_err_msg );
  	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.5 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.5 ***/
  	tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }

  fn_userlog( c_ServiceName, " SPAN : c_spn_flag Is :%c:",c_spn_flag);
  fn_userlog( c_ServiceName, " BSE SPAN : c_bse_spn_flag Is :%c:",c_bse_spn_flag);

	i_ip_len = sizeof ( struct vw_pstn_actn );
  i_op_len = sizeof ( struct vw_pstn_actn );

	/**if( c_spn_flag != 'Y')		***	Ver	1.2	***       Ver 1.3 comment ***/
	if( (c_spn_flag == 'N' && strcmp(st_pstn_actn.c_xchng_cd,"NFO") == 0 ) ||
			(c_bse_spn_flag =='N' && strcmp(st_pstn_actn.c_xchng_cd,"BFO") == 0 )
		)		/*** Ver 1.3 ***/ /** Ver 1.4 "!=" condition changed to"==" for c_xchng_cd ***/	
	{
  	i_returncode = fn_call_svc( c_ServiceName,
    	                          c_err_msg,
      	                        &st_pstn_actn,
        	                      &st_pstn_actn,
          	                    "vw_pstn_actn",
            	                  "vw_pstn_actn",
              	                i_ip_len,
                	              i_op_len,
                  	            0,
                    	          "SFO_UPD_OPT_POS" );

		if( i_returncode != SUCC_BFR )
		{
			fn_errlog( c_ServiceName, "S31045", LIBMSG , c_err_msg );
  		sprintf ( c_msg, "%s",c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      sprintf(c_error_txt,"%s",c_err_msg);  /*** Ver 1.5 ***/ 
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.5 ***/
			tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}
	}
	/**else  *** ver 1.3 comment **/
	if( (c_spn_flag == 'Y' && strcmp(st_pstn_actn.c_xchng_cd,"NFO") == 0 ) ||
			(c_bse_spn_flag =='Y' && strcmp(st_pstn_actn.c_xchng_cd,"BFO") == 0 )
		)		/*** Ver 1.3 ***//** Ver 1.4 "!=" condition changed to"==" for c_xchng_cd ***/	
	{
	

  i_returncode = fn_call_svc_fml ( c_ServiceName,
                                   c_err_msg,
                                   "SFO_PRCS_ASSGNT",
                                   0,
                                   12,
                                   0,
                                   FFO_EBA_MTCH_ACT_NO, (char *)st_pstn_actn.c_cln_mtch_accnt,
                                   FFO_ASSIGN_QTY, (char *)&st_pstn_actn.l_exec_qty,
                                   FFO_XCHNG_CD, (char *)st_pstn_actn.c_xchng_cd,
                                   FFO_PRDCT_TYP, (char *)&st_pstn_actn.c_prd_typ,
                                   FFO_UNDRLYNG, (char *)st_pstn_actn.c_undrlyng,
                                   FFO_EXPRY_DT, (char *)st_pstn_actn.c_expry_dt,
                                   FFO_EXER_TYP, (char *)&st_pstn_actn.c_exrc_typ,
                                   FFO_OPT_TYP, (char *)&st_pstn_actn.c_opt_typ,
                                   FFO_STRK_PRC, (char *)&st_pstn_actn.l_strike_prc,
                                   FFO_CTGRY_INDSTK, (char *)&st_pstn_actn.c_ctgry_indstk,
                                   FFO_REF_NO, (char *)st_pstn_actn.c_ref_rmrks,
                                   FFO_CA_LVL, (char *)&st_pstn_actn.l_ca_lvl
                                   );

  	if( i_returncode != SUCC_BFR )
  	{
  		fn_errlog( c_ServiceName, "S31050", LIBMSG , c_err_msg );
  		sprintf ( c_msg, "%s",c_err_msg );
  		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      sprintf(c_error_txt,"%s",c_err_msg);  /*** Ver 1.5 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.5 ***/
  		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  	}
	}


  EXEC SQL
    SELECT  fum_cls_prc
    INTO    :st_asgnmt.l_sttlmnt_prc
    FROM    fum_fo_undrlyng_mstr
    WHERE   fum_xchng_cd = :st_asgnmt.c_xchng_cd
    AND     fum_prdct_typ = :st_asgnmt.c_prd_typ
    AND     fum_ctgry_indstk = :st_asgnmt.c_ctgry_indstk
    AND     fum_undrlyng = :st_asgnmt.c_undrlyng
    AND     fum_cls_prc_dt = :st_asgnmt.c_asgn_dt;

  if ( SQLCODE != 0 )
  {
		if ( SQLCODE == NO_DATA_FOUND )
		{
    	fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg );
		}
		else
		{
    	fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg );
		}

  	sprintf ( c_msg, "%s",c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    strcpy(c_error_txt,"System Error. Contact System Support");  /*** Ver 1.5 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.5 ***/
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }    

	st_asgnmt.l_cur_mkt_prc = 0;

	/********** Following Commented For Ver 1.2 

	i_ip_len = sizeof ( struct vw_asgnmt );
  i_op_len = sizeof ( struct vw_asgnmt );

	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_asgnmt,
                              &st_asgnmt,
                              "vw_asgnmt",
                              "vw_asgnmt",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_ASGNBK" );

	if( i_returncode != SUCC_BFR )
	{
		fn_errlog( c_ServiceName, "S31065", LIBMSG , c_err_msg );
  	sprintf ( c_msg, "%s",c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
		tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}
	**************/

	/***** Ver 1.2 Starts *****/
	
  strcpy(st_ip_asgnmt.c_cln_mtch_accnt, st_asgnmt.c_cln_mtch_accnt );
  strcpy(st_ip_asgnmt.c_xchng_cd, st_asgnmt.c_xchng_cd );
  st_ip_asgnmt.c_prd_typ = st_asgnmt.c_prd_typ;
  st_ip_asgnmt.c_ctgry_indstk = st_asgnmt.c_ctgry_indstk;
  strcpy(st_ip_asgnmt.c_undrlyng, st_asgnmt.c_undrlyng );
  strcpy(st_ip_asgnmt.c_expry_dt, st_asgnmt.c_expry_dt );
  st_ip_asgnmt.c_exrc_typ = st_asgnmt.c_exrc_typ;
  st_ip_asgnmt.c_opt_typ = st_asgnmt.c_opt_typ;
  st_ip_asgnmt.l_strike_prc = st_asgnmt.l_strike_prc;
  strcpy(st_ip_asgnmt.c_asgn_rfrnc, st_asgnmt.c_asgn_rfrnc );
  strcpy(st_ip_asgnmt.c_asgn_dt, st_asgnmt.c_asgn_dt );
  st_ip_asgnmt.l_asgnd_qty = st_asgnmt.l_asgnd_qty;
  st_ip_asgnmt.l_opnpstn_qty = st_asgnmt.l_opnpstn_qty;
  st_ip_asgnmt.l_sttlmnt_prc = st_asgnmt.l_sttlmnt_prc;
  st_ip_asgnmt.l_cur_mkt_prc = st_asgnmt.l_cur_mkt_prc;

	i_returncode = fn_upd_assnbk(c_ServiceName,&st_ip_asgnmt,&st_error_mg);
	
 	if ( i_returncode == -1 )
  {
	  fn_errlog( c_ServiceName, "S31070", LIBMSG , c_err_msg );
    sprintf ( c_msg, "%s",c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    sprintf(c_error_txt,"%s",c_msg);          /*** Ver 1.5 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.5 ***/
    tpreturn ( TPFAIL, ERR_BFR, ( char *)c_err_msg, 0, 0);
  }
	/***** Ver 1.2 Ends   *****/ 
	
	
  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
		fn_errlog( c_ServiceName, "S31075", LIBMSG , c_err_msg );
  	sprintf ( c_msg, "%s",c_err_msg );
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    strcpy(c_error_txt,"System Error. Contact System Support");          /*** Ver 1.5 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.5 ***/ 
    tpreturn ( TPFAIL, ERR_BFR, ( char *)c_err_msg, 0, 0);
  }

	tpreturn(TPSUCCESS, SUCC_BFR, NULL, 0, 0 );
}


/*** Ver 1.2 Starts ***/
int fn_upd_assnbk (  char *c_ServiceName ,
                     struct st_asgnmt *st_ip_asgnmt,
                     struct st_err_msg *ptr_st_err_msg)
{
  long l_lot_size  = 0;

	fn_userlog(c_ServiceName," Inside Function fn_upd_assnbk.");
 
  /*** Commented in Ver 1.6 ***
  EXEC SQL
  	SELECT	FCM_LOT_SZ
  	INTO    :l_lot_size
  	FROM    FCM_FO_CNTRCT_MSTR
  	WHERE 	FCM_XCHNG_CD      = :st_ip_asgnmt->c_xchng_cd
  	AND   	FCM_PRDCT_TYP     = :st_ip_asgnmt->c_prd_typ
  	AND   	FCM_INDSTK        = :st_ip_asgnmt->c_ctgry_indstk
  	AND   	FCM_UNDRLYNG      = :st_ip_asgnmt->c_undrlyng
  	AND   	FCM_EXPRY_DT      = to_date (:st_ip_asgnmt->c_expry_dt,'DD-Mon-YYYY')
  	AND   	FCM_EXER_TYP      = :st_ip_asgnmt->c_exrc_typ
  	AND   	FCM_OPT_TYP       = :st_ip_asgnmt->c_opt_typ
  	AND   	FCM_STRK_PRC      = :st_ip_asgnmt->l_strike_prc;
  *** Ver 1.6 Comment Ends ***/ 
   
  /*** Ver 1.6 Starts ***/

   EXEC SQL
   SELECT  FTQ_MIN_LOT_QTY
     INTO  :l_lot_size
     FROM  FTQ_FO_TRD_QT
    WHERE  FTQ_XCHNG_CD      = :st_ip_asgnmt->c_xchng_cd
      AND  FTQ_PRDCT_TYP     = :st_ip_asgnmt->c_prd_typ
      AND  FTQ_INDSTK        = :st_ip_asgnmt->c_ctgry_indstk
      AND  FTQ_UNDRLYNG      = :st_ip_asgnmt->c_undrlyng
      AND  FTQ_EXPRY_DT      = to_date (:st_ip_asgnmt->c_expry_dt,'DD-Mon-YYYY')
      AND  FTQ_EXER_TYP      = :st_ip_asgnmt->c_exrc_typ
      AND  FTQ_OPT_TYP       = :st_ip_asgnmt->c_opt_typ
      AND  FTQ_STRK_PRC      = :st_ip_asgnmt->l_strike_prc;

  /*** Ver 1.6 Ends   ***/

  if ( SQLCODE != 0 )
  {
  	fn_userlog(c_ServiceName,"SPAN  - Failed To Get The Lot Size.");
    return -1;
  }
 	fn_userlog(c_ServiceName,"SPAN  - The Lot Size Is :%ld:",l_lot_size);


	EXEC SQL
  	INSERT INTO FAB_FO_ASGNMNT_BOOK
  	(
   		FAB_CLM_MTCH_ACCNT,
   		FAB_XCHNG_CD,
   		FAB_PRDCT_TYP,
   		FAB_INDSTK,
   		FAB_UNDRLYNG,
   		FAB_EXPRY_DT,
   		FAB_EXER_TYP,
   		FAB_OPT_TYP,
   		FAB_STRK_PRC,
   		FAB_ASGN_RFRNC_NO,
   		FAB_ASGND_DT,
   		FAB_ASGND_QTY,
   		FAB_OPNPSTN_QTY,
   		FAB_STTLMNT_PRC,
   		FAB_CURR_MKT_PRC,
   		FAB_MIN_LOT_SIZE             
  	)
		VALUES
  	(
   		:st_ip_asgnmt->c_cln_mtch_accnt,
   		:st_ip_asgnmt->c_xchng_cd,
   		:st_ip_asgnmt->c_prd_typ,
   		:st_ip_asgnmt->c_ctgry_indstk,
   		:st_ip_asgnmt->c_undrlyng,
   		to_date (: st_ip_asgnmt->c_expry_dt, 'DD-Mon-yyyy' ),
   		:st_ip_asgnmt->c_exrc_typ,
   		:st_ip_asgnmt->c_opt_typ,
   		:st_ip_asgnmt->l_strike_prc,
   		:st_ip_asgnmt->c_asgn_rfrnc,
   		to_date (: st_ip_asgnmt->c_asgn_dt, 'DD-Mon-yyyy hh24:mi:ss' ),
   		:st_ip_asgnmt->l_asgnd_qty,
   		:st_ip_asgnmt->l_opnpstn_qty,
   		:st_ip_asgnmt->l_sttlmnt_prc,
   		:st_ip_asgnmt->l_cur_mkt_prc,
   		:l_lot_size                   
  	);

  if ( SQLCODE != 0 )
  {
	fn_errlog( c_ServiceName, "S31080",SQLMSG, ptr_st_err_msg->c_err_msg);
  return -1;
  }

	return 0;
}
/*** Ver 1.2 Ends ***/
