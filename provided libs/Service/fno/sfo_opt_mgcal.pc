/******************************************************************************/
/*  Program           : SFO_OPT_MGCAL                                         */
/*                                                                            */
/*  Input             : FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_CI_BUY_QTY                                        */
/*                      FFO_CI_BUY_ORD_VL                                     */
/*                      FFO_CI_SELL_QTY                                       */
/*                      FFO_CI_SELL_ORD_VL                                    */
/*                      FFO_CBUY_EXCTD_QTY                                    */
/*                      FFO_CSELL_EXCTD_QTY                                   */
/*                      FFO_C_OPNPSTN_FLW                                     */
/*                      FFO_C_OPNPSTN_QTY                                     */
/*                      FFO_C_ORG_OPN_VAL                                     */
/*                      FFO_ROUT_CRT                                          */
/*                                                                            */
/*  Output            : FFO_C_ORDR_MRGN                                       */
/*                      FFO_C_TRD_MRGN                                        */
/*                                                                            */
/*  Description       : This service calculates the margin  for a given       */
/*                      options positions                                     */
/*                                                                            */
/*  Log               : 1.0   02-Mar-2002  Sridhar.T.N                        */
/*                    : 1.1   28-Dec-2007  Vidyayini Krish                    */
/*                    :	1.2		01-Feb-2010	 Shamili Dalvi.			                */
/*		                : 1.3   03-Mar-2011  Nitin Save		  	                  */
/*		                : 1.4   24-Jan-2012  Navina D. 		  	                  */
/*										:	1.5		03-Dec-2012  Vishnu N.													*/	
/*										:	1.6		10-Mar-2014  Vishnu N.													*/	
/*										:	1.7		05-Nov-2014  Navina D.													*/	
/*                    : 1.8   17-Jun-2015  Sachin B.                          */
/*                    : 2.0   27-Jan-2016  Tanmay W.                          */
/*                    : 2.1   20-Sep-2019  Navina D.                          */
/*                    : 2.2   26-May-2021  Suchita D.                         */
/*                    : 2.3   22-Jan-2021  Anuj Pancholi                      */
/*                    : 2.4   16-Jul-2021  Navina D.                          */
/*                    : 2.5   15-Jul-2022  Naveena R.                         */
/******************************************************************************/
/*  1.0    -  New Release                                                     */
/*  1.1    -  IBM Changes                                                     */
/*	1.2		 -  Fixing bug in calculating order margin 													*/
/*  1.3    -  Margin Calc Changes in Order placement screen                   */
/*  1.4    -  BSE ORS Changes																									*/
/*  1.5		 -  Restricting NRI customers to calculating margin for product     */
/*            FuturePlus and exchange bse 																		*/
/*	1.6		 -  Service call to SVC_GET_QUOTE removed and function introduced	  */
/*	1.7		 -  Margin calculation changes                                   	  */
/*  1.8    -  AUTO MTM Changes                                                */
/*  2.0    -  Migration of RI to NRI																					*/
/*  2.1    -  Strategy margin with position and order margin                  */
/*  2.2    -  View margin changes                                             */ 
/*  2.3    -  Vendor Validation Changes                                       */
/*  2.4    -  Premium  with existing position                                 */
/*  2.5    -  CR-ISEC14-170021 Revision of Margin logic of FPSL, Oplus & Opt  */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <eba_to_ors.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fo_view_def.h>
#include <sqlca.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_session.h>
#include <fn_pos.h>
#include <fn_ddr.h>
#include <fml_rout.h> /* Ver 1.1 */
#include <fn_read_debug_lvl.h> /* Ver 1.1 */
#include <fo_get_records.h> /* Ver 1.6 */
#include <fn_val_ord.h>		/* Ver 2.1 */
#include <math.h> /** ver 2.2 **/ 
#define CAL_UPPER 1 /** ver 2.2 **/
#define CAL_LOWER 2 /*** ver 2.2 ***/

int fn_upd_mrgn ( char *c_ServiceName,
                  struct vw_pstn_actn *ptr_st_pstn_actn,
                  struct vw_cntopt_pos *ptr_st_cntopt_pos_crrnt,
                  struct vw_cntopt_pos *ptr_st_cntopt_pos,
                  struct vw_err_msg *ptr_st_err_msg );

/** ver 2.2 starts ***/
int fn_mrgncal_sltp ( char *c_ServiceName,
            char *c_err_msg,
            struct vw_cntopt_pos *ptr_st_undfut_pos,
            double *ptr_d_ord_mrgn_amt,
            double *ptr_d_ord_mrgn_amt_sell );

long fn_cal_price_optplus(char *,long,double,int,char *,int);        /*** Ver 1.1 ***/
long fn_max(char *, long, long);                                     /*** Ver 1.1 ***/

/*** ver 2.2 ends ***/

void SFO_OPT_MGCAL( TPSVCINFO *rqst )
{
  char c_ServiceName[33];
  char c_err_msg[256];

  int i_ch_val;
  int i_trnsctn;

  double  d_base_prc;
  char    c_ltq_dt[23];
  char    c_xchng_cd[4];
  char    c_routing_crt[4];
  char    c_source_flg = 'M'; /**  Ver 1.3  **/
 	int     i_err[2];         	/**  Ver 1.3  **/
	int     i_ferr[2];        	/**  Ver 1.3  **/
	char    c_flg;        			/**  Ver 1.3  **/
  char    c_api_src_flg = '\0';  /** Ver 2.1 **/
  char    c_user_id[9] ="\0";    /** Ver 2.1 **/
  varchar c_ven_id[50+1];        /** Ver 2.1 **/
	char  	c_ven_nm[15] = "\0";   /** Ver 2.1 **/
	int			i_returncode = 0;			 /** Ver 2.1 **/

  double d_ord_mrgn_amt = 0.0; /*** ver 2.2 ***/
  double d_ord_mrgn_amt_sell = 0.0; /*** ver 2.2 ***/

	double d_blkd_ordr_mrgn = 0.0; /*** Ver 2.1 ***/
	double d_blkd_trd_mrgn = 0.0; /*** Ver 2.1 ***/
  long    l_prmum_qty  = 0; /*** Ver 2.4 ***/
	double  d_opt_sprmum   = 0.0; /*** Ver 2.4 ***/
	char   c_bsktopnpstn_flw = 'N'; /*** Ver 2.4 ***/
	long   l_bsktopnpstn_qty = 0; /*** Ver 2.4 ***/
  long   l_net_opn_qty = 0; /*** Ver 2.4 ***/

  /*** Ver 2.1 ***/
  long l_ibuy_qty = 0;
  double d_ibuy_ord_vl = 0.0;
  long l_isell_qty = 0;
  double d_isell_ord_vl = 0.0;
  /*** Ver 2.1 ***/

  char c_req_type = '\0'; /*** ver 2.2 ***/

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  struct vw_usr_prfl st_usr_prfl;
  struct vw_err_msg st_err_msg;
	struct vw_cntopt_pos st_cntopt_pos;
	struct vw_cntopt_pos st_cntopt_pos_crrnt;
	struct vw_pstn_actn st_pstn_actn;
  EXEC SQL INCLUDE "table/icd_info_client_dtls.h"; /*** Ver 2.0 ***/

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);

  i_ch_val = Fvftos32( ptr_fml_Ibuf,
                       (char *)&st_usr_prfl,
                       "vw_usr_prfl" );
  if ( i_ch_val == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

  i_ch_val = fn_chk_sssn( c_ServiceName,
                          &st_usr_prfl,
                          &st_err_msg );
  if ( i_ch_val == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", LIBMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  i_ch_val = Fvftos32( ptr_fml_Ibuf,
                       (char *)&st_cntopt_pos,
                       "vw_cntopt_pos" );
  if ( i_ch_val == -1 )
  {
    fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** ver 2.2 starts ***/
  i_err[0]=Fget32(ptr_fml_Ibuf,FFO_RQST_TYP,0,(char *)&c_req_type,0);
  i_ferr [0] = Ferror32;
  if (( i_err[0] == -1 ) && ( i_ferr[0] != FNOTPRES ))
  {
    fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  fn_userlog( c_ServiceName, "FFO_RQST_TYP : %c:", c_req_type);
  /*** ver 2.2 ends ***/

	if(DEBUG_MSG_LVL_3)
	{
	fn_userlog(c_ServiceName, "Buy qty :%ld", st_cntopt_pos.l_ibuy_qty);
	fn_userlog(c_ServiceName, "Buy ord val :%lf", st_cntopt_pos.d_ibuy_ord_vl);
	fn_userlog(c_ServiceName, "Sell qty :%ld", st_cntopt_pos.l_isell_qty);
	fn_userlog(c_ServiceName, "Sell ord val :%lf", st_cntopt_pos.d_isell_ord_vl);
	fn_userlog(c_ServiceName, "Open pos qty :%ld", st_cntopt_pos.l_opnpstn_qty);
	fn_userlog(c_ServiceName, "Open pos val :%lf", st_cntopt_pos.d_org_opn_val);
	fn_userlog(c_ServiceName, "flow :%c", st_cntopt_pos.c_opnpstn_flw);
	fn_userlog(c_ServiceName, "Strike prc :%ld", st_cntopt_pos.l_strike_prc);
	}

	/******* Ver 1.5 Starts **********/
		
	 /****** Added in Ver 2.0 *******/

      MEMSET( sql_icd_cust_type ) ;
      EXEC SQL
      SELECT  ICD_CUST_TYPE
      INTO    :sql_icd_cust_type
      FROM    ICD_INFO_CLIENT_DTLS,
      				IAI_INFO_ACCOUNT_INFO
      WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
      AND     IAI_MATCH_ACCOUNT_NO  = :st_cntopt_pos.c_cln_mtch_accnt;
	
			if ( SQLCODE != 0 )	
			{
    		fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg  );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}

    	SETNULL(sql_icd_cust_type);

			/****** Added  Ver 2.0 * Ends *****/
      if((strcmp(sql_icd_cust_type.arr,"NRI") == 0) && (strcmp(st_cntopt_pos.c_xchng_cd,"BFO") == 0))  /**** Check Added in Ver 2.0 ****/
      {
				fn_errlog( c_ServiceName, "S31030", "Currently BSE Derivative is not allowed for NRI customers", c_err_msg  );
     	 	strcpy( c_err_msg ,"Currently BSE Derivative is not allowed for NRI customers");
     	 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
	
			/******* Commeted in Ver 2.0 *******

  if ( ((strncmp(st_cntopt_pos.c_cln_mtch_accnt, "750", 3)  == 0 ) 	||
       	(strncmp(st_cntopt_pos.c_cln_mtch_accnt, "751", 3)  == 0 ) 	||
       	(strncmp(st_cntopt_pos.c_cln_mtch_accnt, "650", 3)  == 0 ) 	||
       	(strncmp(st_cntopt_pos.c_cln_mtch_accnt, "651", 3)  == 0 ))	&&
			 	(strcmp(st_cntopt_pos.c_xchng_cd,"BFO") == 0)
     )
  {
      fn_errlog( c_ServiceName, "S31035", "Currently BSE Derivative is not allowed for NRI customers", c_err_msg  );
      strcpy( c_err_msg ,"Currently BSE Derivative is not allowed for NRI customers");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  } 

      ******* Commeted Ver 2.0 Ends *******/


  /******* Ver 1.5  Ends   **********/
  
	/*******************       1.3 Changes Start  **************************************/

	c_flg='N';
  i_err[0]=Fget32(ptr_fml_Ibuf,FFO_SOURCE_FLG,0,(char *)&c_source_flg,0);
  i_ferr [0] = Ferror32;

  if (( i_err[0] == -1 ) && ( i_ferr[0] != FNOTPRES ))
  {
    fn_errlog( c_ServiceName, "S31040", Fstrerror32(i_ferr[0]),c_err_msg);
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  
	if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "Val of Outer i_err after fget :%d:", i_err[0] );
    fn_userlog( c_ServiceName, "Val of Outer i_ferr after fget :%d:", i_ferr[0] ); 
    fn_userlog( c_ServiceName, "Val of Outer c_source_flg after fget :%c:",c_source_flg );
  }
	/*** Ver 2.1 Starts ***/
   if ( Fget32(ptr_fml_Ibuf,FFO_UPLD_MTCH_FLG,0,(char *)&c_api_src_flg, 0 ) == -1)
   {
     if ( Ferror32 != FNOTPRES )
     {
       fn_errlog( c_ServiceName, "S31045", FMLMSG,c_err_msg);
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
   }

   fn_userlog(c_ServiceName,"API Source Flag :%c:",c_api_src_flg);
   if (c_api_src_flg == 'A')
	 {
		fn_userlog( c_ServiceName, "Check starts for sensibull :%c: Source:%c:",c_api_src_flg,c_source_flg);
		MEMSET(c_ven_id);
		if ( Fget32(ptr_fml_Ibuf,FFO_USER_CODE,0,(char *)c_ven_id.arr, 0) == -1 )
		{
			fn_userlog( c_ServiceName, "Val of i_err after fget in error :%d:", i_err[0] );
     	fn_userlog( c_ServiceName, "Val of i_ferr after fget in error :%d:", i_ferr[0] );
			fn_errlog( c_ServiceName, "S31050", Fstrerror32(i_ferr[0]),c_err_msg);
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		strcpy(c_user_id,st_usr_prfl.c_user_id);
		i_returncode = fn_chk_vendor( c_ServiceName,
                                   c_user_id,
                                   c_ven_id.arr,
                                   c_ven_nm,
                                   &st_err_msg
                                 );
		if (i_returncode == -1 )
		{
			fn_errlog( c_ServiceName,"S31055","Error in function fn_chk_vendor", c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		fn_userlog(c_ServiceName," Inside sfo_fut_prtfl Vendor Name:%s:",c_ven_nm);
		if(strcmp(c_ven_nm,"SENSIBULL") == 0 )
		{
			if( c_user_id[0] == BPID )
			{
				fn_userlog( c_ServiceName, "You are Attached to a Direct Business Catalyst,Sensibull is disabled");
        fn_errlog( c_ServiceName, "B35018", "",c_err_msg);
        strcpy(c_err_msg,"Since you are Attached to a Direct Business Catalyst,Sensibull is disabled");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			EXEC SQL
        SELECT ICD_CUST_TYPE
        INTO   :sql_icd_cust_type
        FROM   ICD_INFO_CLIENT_DTLS,
               IAI_INFO_ACCOUNT_INFO
        WHERE  ICD_SERIAL_NO = IAI_SERIAL_NO
        AND    IAI_MATCH_ACCOUNT_NO  = :st_usr_prfl.c_cln_mtch_accnt;
      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31060",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if(strcmp(sql_icd_cust_type.arr,"NRI") == 0)
      {
        fn_userlog( c_ServiceName,"NRI Customer Trying To Place Order from SENSIBULL");
        fn_errlog( c_ServiceName, "S31065","NRI Customer Trying To Place Order from SENSIBULL",c_err_msg);
        strcpy(c_err_msg," NRI Customer Trying To Place Order from SENSIBULL.");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		}
    else
    {
      /*** commented in Ver 2.3 ***
      fn_userlog( c_ServiceName, "Invalid Vendor" );
      fn_errlog( c_ServiceName, "S31070","InValid Vendor.",c_err_msg );
      strcpy( c_err_msg,"InValid Vendor.");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      ***/
      fn_userlog(c_ServiceName,"Call from Vendor with ESP_ID :%s: Vendor Name:%s:",c_ven_id.arr,c_ven_nm);  /** ver 2.3 **/
    }
	}
	/*** Ver 2.1 Ends ***/

  if (c_source_flg == 'P' || c_source_flg == 'S')  /*** 'S' added in Ver 2.1 ***/
  {
			c_flg='Y';
     if(DEBUG_MSG_LVL_3)
		 { 
       fn_userlog( c_ServiceName, "Val of c_source_flg after fget :%c:",c_source_flg );
			 fn_userlog( c_ServiceName, "Val of i_err after fget :%d:", i_err[0] );
       fn_userlog( c_ServiceName, "Val of i_ferr after fget :%d:", i_ferr[0] ); 
       fn_userlog( c_ServiceName, "Val of c_flg :%c:", c_flg ); 
      }


	 if (c_source_flg == 'S') /*** if loop added in Ver 2.1 ***/
	 {

		c_bsktopnpstn_flw = st_cntopt_pos.c_opnpstn_flw ; /*** Ver 2.4 ***/
		l_bsktopnpstn_qty = st_cntopt_pos.l_opnpstn_qty ; /*** ver 2.4 ***/
    
		if (st_cntopt_pos.c_opnpstn_flw == 'S') /*** Ver 2.4 default net qty is set to basket qty ***/
		{
			l_net_opn_qty = st_cntopt_pos.l_opnpstn_qty * -1;
		}
		else
		{
			l_net_opn_qty = st_cntopt_pos.l_opnpstn_qty;
		}

		/*** st_cntopt_pos.c_opnpstn_flw = 'N'; *** Ver 2.4 ***/
		/*** st_cntopt_pos.l_opnpstn_qty = 0; *** Ver 2.4 ***/

		EXEC SQL 
		 SELECT		fop_clm_mtch_accnt,
							fop_opnpstn_flw,
							abs(fop_opnpstn_qty),
							fop_ibuy_qty + :st_cntopt_pos.l_ibuy_qty,
							fop_ibuy_ord_val + :st_cntopt_pos.d_ibuy_ord_vl,
							abs(fop_isell_qty) + abs(:st_cntopt_pos.l_isell_qty),
							abs(fop_isell_ord_val) + abs(:st_cntopt_pos.d_isell_ord_vl),
							fop_uordr_mrgn,
              FOP_UEXCTD_MRGN,
						  fop_opnpstn_qty + decode(:c_bsktopnpstn_flw,'S',:l_bsktopnpstn_qty*-1, :l_bsktopnpstn_qty) /*** Ver 2.4 ***/ 
		 INTO    :st_cntopt_pos.c_cln_mtch_accnt,
						 :st_cntopt_pos.c_opnpstn_flw,
						 :st_cntopt_pos.l_opnpstn_qty,
						 :l_ibuy_qty,
						 :d_ibuy_ord_vl,
						 :l_isell_qty,
						 :d_isell_ord_vl,
						 :d_blkd_ordr_mrgn,
						 :d_blkd_trd_mrgn,
						 :l_net_opn_qty /*** Ver 2.4 ***/
		 FROM    FOP_FO_OPTIONS_PSTN
		 WHERE	 fop_clm_mtch_accnt = :st_cntopt_pos.c_cln_mtch_accnt
		 AND     fop_xchng_cd 		  = :st_cntopt_pos.c_xchng_cd
		 AND     fop_undrlyng    	  = :st_cntopt_pos.c_undrlyng
		 AND     fop_prdct_typ      = :st_cntopt_pos.c_prd_typ
		 AND     fop_expry_dt       = :st_cntopt_pos.c_expry_dt
		 AND     fop_strk_prc       = :st_cntopt_pos.l_strike_prc
		 AND     fop_exer_typ       = :st_cntopt_pos.c_exrc_typ
		 AND     fop_opt_typ        = :st_cntopt_pos.c_opt_typ
		 AND     (fop_opnpstn_qty   != 0 OR fop_ibuy_qty != 0 OR fop_isell_qty != 0);
	 }
	 else
	 {
			EXEC SQL 
		  		 SELECT  fop_clm_mtch_accnt,
								   fop_opnpstn_flw,
							     abs(fop_opnpstn_qty)
			 		 INTO    :st_cntopt_pos.c_cln_mtch_accnt,
	    		 				 :st_cntopt_pos.c_opnpstn_flw,
	     						 :st_cntopt_pos.l_opnpstn_qty
			 		 FROM    FOP_FO_OPTIONS_PSTN
			 		 WHERE	 fop_clm_mtch_accnt = :st_cntopt_pos.c_cln_mtch_accnt
			 		 AND     fop_xchng_cd 		  = :st_cntopt_pos.c_xchng_cd
			 		 AND     fop_undrlyng    	  = :st_cntopt_pos.c_undrlyng
					 AND     fop_prdct_typ      = :st_cntopt_pos.c_prd_typ
					 AND     fop_expry_dt       = :st_cntopt_pos.c_expry_dt
					 AND     fop_strk_prc       = :st_cntopt_pos.l_strike_prc
					 AND     fop_exer_typ       = :st_cntopt_pos.c_exrc_typ
					 AND     fop_opt_typ        = :st_cntopt_pos.c_opt_typ
			 		 AND     fop_opnpstn_qty   != 0;

	 }
  		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND  )
  		{
    		fn_errlog ( c_ServiceName, "S31075", SQLMSG, c_err_msg );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}

/*** Ver 2.1 ***/
			else if (SQLCODE == 0)
			{
			   st_cntopt_pos.l_ibuy_qty     =     l_ibuy_qty;
			   st_cntopt_pos.d_ibuy_ord_vl  =     d_ibuy_ord_vl;
	 			 st_cntopt_pos.l_isell_qty    =     l_isell_qty;
				 st_cntopt_pos.d_isell_ord_vl =     d_isell_ord_vl;
			}

	fn_userlog( c_ServiceName, "l_ibuy_qty:%ld: d_ibuy_ord_vl :%lf: l_isell_qty :%ld: d_isell_ord_vl :%lf: ", st_cntopt_pos.l_ibuy_qty, st_cntopt_pos.d_ibuy_ord_vl,st_cntopt_pos.l_isell_qty, st_cntopt_pos.d_isell_ord_vl );
/*** Ver 2.1 ***/
 fn_userlog( c_ServiceName, "2.4: st_cntopt_pos.c_opnpstn_flw=:%c: st_cntopt_pos.l_opnpstn_qty=:%ld:",st_cntopt_pos.c_opnpstn_flw,st_cntopt_pos.l_opnpstn_qty); /*** Ver 2.4 ***/


			/*** Ver 2.4 starts ***/
			l_prmum_qty = 0;
			if (c_source_flg == 'S')
			{
				if ( st_cntopt_pos.c_prd_typ ==  'O' &&  c_bsktopnpstn_flw == 'B' ) /*** Basket flow ***/
        {
          if( st_cntopt_pos.c_opnpstn_flw == 'S' ) /*** Existing position Flow ***/
          {
            if(DEBUG_MSG_LVL_3)
            {
 	            fn_userlog(c_ServiceName,"Cal Premium Non-SPAN  - Cover Order For Sell Open Position.");
            }
            l_prmum_qty = (st_cntopt_pos.l_opnpstn_qty * -1) + l_bsktopnpstn_qty  ;

            if ( l_prmum_qty > 0 )
            {
              d_opt_sprmum = d_opt_sprmum + ( (double)l_prmum_qty * (st_cntopt_pos.d_org_opn_val/l_bsktopnpstn_qty) ) ; /*** Basket rate ***/
            }
          }
          else
          {
            d_opt_sprmum = d_opt_sprmum +  st_cntopt_pos.d_org_opn_val ; /*** Basket value ***/
          }
			    fn_userlog(c_ServiceName,"l_prmum_qty=:%ld:, st_cntopt_pos.d_org_opn_val=:%lf:,l_bsktopnpstn_qty=:%ld:,d_opt_sprmum=:%lf:,st_cntopt_pos.l_opnpstn_qty=:%ld:",l_prmum_qty, st_cntopt_pos.d_org_opn_val,l_bsktopnpstn_qty,d_opt_sprmum,st_cntopt_pos.l_opnpstn_qty);
          }

					/***if (SQLCODE == NO_DATA_FOUND)
					{
						st_cntopt_pos.c_opnpstn_flw = c_bsktopnpstn_flw;
						st_cntopt_pos.l_opnpstn_qty = l_bsktopnpstn_qty;
					}***/

					if (l_net_opn_qty < 0 )
					{
						st_cntopt_pos.c_opnpstn_flw = 'S';
						st_cntopt_pos.l_opnpstn_qty = l_net_opn_qty * -1;
					}
					else if (l_net_opn_qty > 0)
					{
						st_cntopt_pos.c_opnpstn_flw = 'B';
						st_cntopt_pos.l_opnpstn_qty = l_net_opn_qty;
					}
					else
					{
						st_cntopt_pos.c_opnpstn_flw = 'N';
						st_cntopt_pos.l_opnpstn_qty = 0; 
					}
					fn_userlog(c_ServiceName,"st_cntopt_pos.c_opnpstn_flw=:%c:,st_cntopt_pos.l_opnpstn_qty=:%ld:,l_net_opn_qty=:%ld:",st_cntopt_pos.c_opnpstn_flw,st_cntopt_pos.l_opnpstn_qty,l_net_opn_qty);
			}
			
			l_prmum_qty  = 0;
			/*** Ver 2.4 ends ***/

  		if(DEBUG_MSG_LVL_3)
			{
   			fn_userlog( c_ServiceName, "Val of c_cln_mtch_accnt after db fetch :%s:", st_cntopt_pos.c_cln_mtch_accnt );
   			fn_userlog( c_ServiceName, "Val of c_opnpstn_flw after db fetch :%c:", st_cntopt_pos.c_opnpstn_flw );
   			fn_userlog( c_ServiceName, "Val of l_opnpstn_qty after db fetch :%ld:", st_cntopt_pos.l_opnpstn_qty );
  		}


	    /*** Addition on 01-Apr-2011 for Existing Sell/Buy Position Chk Starts ****/

			if(st_cntopt_pos.c_opnpstn_flw == 'B')
			{
			 st_cntopt_pos.l_buy_exctd_qty  = st_cntopt_pos.l_opnpstn_qty;
			}
			if(st_cntopt_pos.c_opnpstn_flw == 'S')
			{
			 st_cntopt_pos.l_sell_exctd_qty = st_cntopt_pos.l_opnpstn_qty;
			}
		  
			if(DEBUG_MSG_LVL_3)
			{
			  fn_userlog( c_ServiceName, "Val of Buy  Open pos qty to be displayed :%ld:", st_cntopt_pos.l_buy_exctd_qty  );
			  fn_userlog( c_ServiceName, "Val of Sell Open pos qty to be displayed :%ld:", st_cntopt_pos.l_sell_exctd_qty );
			}

			/*** Addition on 01-Apr-2011 for Existing Sell/Buy Position Chk Ends****/


  }


   /*******************       1.3 Changes End  **************************************/





	st_cntopt_pos.l_isell_qty = (-1) * st_cntopt_pos.l_isell_qty;
	st_cntopt_pos.d_isell_ord_vl = (-1) * st_cntopt_pos.d_isell_ord_vl;
	st_cntopt_pos.l_sell_exctd_qty = (-1) * st_cntopt_pos.l_sell_exctd_qty;
	if ( st_cntopt_pos.c_opnpstn_flw == 'S' )
	{
    st_cntopt_pos.l_opnpstn_qty = (-1 ) * st_cntopt_pos.l_opnpstn_qty;
    st_cntopt_pos.d_org_opn_val = (-1.0 ) * st_cntopt_pos.d_org_opn_val;
	}
	
	st_cntopt_pos.l_exbuy_qty = st_cntopt_pos.l_ibuy_qty ;
	st_cntopt_pos.l_exsell_qty = st_cntopt_pos.l_isell_qty ;
	st_cntopt_pos.d_exbuy_ord_vl = st_cntopt_pos.d_ibuy_ord_vl ;
	st_cntopt_pos.d_exsell_ord_vl = st_cntopt_pos.d_isell_ord_vl ;
	
	if ( st_cntopt_pos.l_opnpstn_qty == 0 )
	{
	  st_cntopt_pos.c_opnpstn_flw = 'N';
	}
	
	/*** Set all the other fields in this structure st_cntopt_pos to default ***/
	st_cntopt_pos.d_ordr_mrgn = 0;
	st_cntopt_pos.d_trd_mrgn = 0;
	st_cntopt_pos.l_exrc_qty = 0;
	st_cntopt_pos.l_iexrc_qty = 0;
	st_cntopt_pos.l_exexrc_qty = 0;
	st_cntopt_pos.l_ord_dp_qty = 0;
	st_cntopt_pos.l_asgnd_qty = 0;
	st_cntopt_pos.l_blkd_ordr_qty = 0;
	st_cntopt_pos.l_blkd_trd_qty = 0;
	st_cntopt_pos.l_mtm_trg_prc = 0;

  if ( strcmp( st_cntopt_pos.c_xchng_cd, "NFO" ) == 0 )
  {
    strcpy( c_xchng_cd, "NSE" );
  }
	else  if ( strcmp( st_cntopt_pos.c_xchng_cd, "BFO" ) == 0 )		/*** Ver 1.4 ***/
	{
    strcpy( c_xchng_cd, "BSE" );
  }

	/** Commented in Ver 1.6 **
  *** Added for Order Routing ***
	fn_cpy_ddr ( c_routing_crt );

  i_ch_val = fn_call_svc_fml( c_ServiceName,
                              c_err_msg,
                              "SVC_GET_QUOTE",
                              0,
                              5,
                              3,
                    FML_USR_ID, (char *)st_usr_prfl.c_user_id,
                    FML_SSSN_ID, (char *)&st_usr_prfl.l_session_id,
                    FML_STCK_CD, (char *)st_cntopt_pos.c_undrlyng,
                    FML_XCHNG_CD, (char *)c_xchng_cd,
                    FFO_ROUT_CRT, (char *)c_routing_crt,
                    FML_QUOTE, ( char *)&st_pstn_actn.d_und_quote, NULL,
                    FML_GMS_AMNT_ALLCTD, (char *)&d_base_prc, NULL,
                    FML_QUOTE_TIME, (char *)c_ltq_dt, NULL );

  if ( i_ch_val != SUCC_BFR )
  {
    fn_errlog(c_ServiceName, "S31080", SQLMSG, st_err_msg.c_err_msg );
    tpreturn( TPFAIL, ERR_BFR, (char *)&st_err_msg, 0, 0 );
  }
	if(DEBUG_MSG_LVL_3)
	{
	fn_userlog(c_ServiceName, "quote prc :%lf",st_pstn_actn.d_und_quote);
	fn_userlog(c_ServiceName, "Base prc :%lf",d_base_prc);
	}

	**/

	/** Ver 1.6 Starts **/
		
	i_ch_val = fn_get_spotprc(c_ServiceName,
                            st_cntopt_pos.c_undrlyng, 
                            c_xchng_cd,
                            &st_pstn_actn.d_und_quote, 
                            c_ltq_dt,
                            c_err_msg
                            );

	
  if ( i_ch_val != SUCC_BFR )
  {
    fn_errlog( c_ServiceName, "S31085", LIBMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName," Quote price :%lf:",st_pstn_actn.d_und_quote);
    fn_userlog(c_ServiceName," Quote Time  :%s:",c_ltq_dt);
  }

	/** Ver 1.6 Ends **/

	strcpy(st_pstn_actn.c_cln_mtch_accnt, st_cntopt_pos.c_cln_mtch_accnt);
	strcpy(st_pstn_actn.c_xchng_cd, st_cntopt_pos.c_xchng_cd);
	st_pstn_actn.c_prd_typ = st_cntopt_pos.c_prd_typ;
	strcpy(st_pstn_actn.c_undrlyng, st_cntopt_pos.c_undrlyng);
	strcpy(st_pstn_actn.c_expry_dt, st_cntopt_pos.c_expry_dt);
	st_pstn_actn.c_exrc_typ= st_cntopt_pos.c_exrc_typ;
	st_pstn_actn.c_opt_typ= st_cntopt_pos.c_opt_typ;
	st_pstn_actn.l_strike_prc= st_cntopt_pos.l_strike_prc;
	st_pstn_actn.c_ctgry_indstk= st_cntopt_pos.c_ctgry_indstk;
	
	st_pstn_actn.l_actn_typ = CALCULATE_MARGIN;
	
	memcpy ( &st_cntopt_pos_crrnt, &st_cntopt_pos, sizeof(st_cntopt_pos_crrnt) );
	
	i_ch_val = fn_upd_mrgn ( c_ServiceName,
	            						 &st_pstn_actn,
	             						 &st_cntopt_pos_crrnt,
	             						 &st_cntopt_pos,
	             						 &st_err_msg );
	if ( i_ch_val != 0 )
	{
    strcpy( c_err_msg, st_err_msg.c_err_msg );
    fn_errlog( c_ServiceName, "S31090", LIBMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}

 /*** ver 2.2 starts ***/
  if( c_req_type == 'V' )
  {

  i_ch_val = fn_mrgncal_sltp ( c_ServiceName,
            c_err_msg,
            &st_cntopt_pos,
            &d_ord_mrgn_amt,
            &d_ord_mrgn_amt_sell );

  if ( i_ch_val != 0 )
  {
    fn_errlog( c_ServiceName, "S31095", LIBMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }

  }
  /*** ver 2.2 ends ***/
  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31100", TPMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	if(DEBUG_MSG_LVL_3)
	{
	fn_userlog(c_ServiceName, "Order Margin :%lf", st_cntopt_pos.d_ordr_mrgn);
	fn_userlog(c_ServiceName, "Trade Margin :%lf", st_cntopt_pos.d_trd_mrgn);
	}
  /*
	i_ch_val = fn_pack_vartofml ( c_ServiceName,
                                c_err_msg,
                                &ptr_fml_Obuf,
                                2,
                            FFO_C_ORDR_MRGN, (char *)&st_cntopt_pos.d_ordr_mrgn,
                            FFO_C_TRD_MRGN, (char *)&st_cntopt_pos.d_trd_mrgn
                                  );
  */
  
   /***       Added 2 parameters in output for version 1.3  *****/
  
  if(st_cntopt_pos.c_opnpstn_flw == 'S' && c_flg == 'Y')   /*** Ver 1.3 ***/
  {
    st_cntopt_pos.l_opnpstn_qty = (-1) * st_cntopt_pos.l_opnpstn_qty;
  }

  fn_userlog(c_ServiceName, "Order Margin :%lf", st_cntopt_pos.d_ordr_mrgn);
  fn_userlog(c_ServiceName, "Trade Margin :%lf", st_cntopt_pos.d_trd_mrgn);
  fn_userlog(c_ServiceName, "d_blkd_ordr_mrgn :%lf", d_blkd_ordr_mrgn);
  fn_userlog(c_ServiceName, "d_blkd_trd_mrgn :%lf", d_blkd_trd_mrgn);
  
  i_ch_val = fn_pack_vartofml ( c_ServiceName,
                                c_err_msg,
                                &ptr_fml_Obuf,
                                10, /*** Changed from 4 to 6 in Ver 2.1 ***/ /***  Changed from 6 to 9 in ver 2.2 ***/ /*** 9 to 10 in Ver 2.4 ***/
                            		FFO_C_ORDR_MRGN, (char *)&st_cntopt_pos.d_ordr_mrgn,
                            		FFO_C_TRD_MRGN, (char *)&st_cntopt_pos.d_trd_mrgn,
													  		FFO_C_OPNPSTN_QTY, (char *)&st_cntopt_pos.l_opnpstn_qty,  /** Ver 1.3  **/
		                        		FFO_C_OPNPSTN_FLW, (char *)&st_cntopt_pos.c_opnpstn_flw,   /** Ver 1.3  **/
																FFO_ORD_AMT_BLKD,(char *)&d_blkd_ordr_mrgn, /*** Ver 2.1 ***/
																FFO_C_BLKD_TRD_MRGN,(char *)&d_blkd_trd_mrgn,  /*** Ver 2.1 ***/
                                FFO_ADD_MRGN_AMT  ,(char *)&d_ord_mrgn_amt, /*** ver 2.2 ***/
                                FFO_U_MM_TRD_MRGN  ,(char *)&d_ord_mrgn_amt_sell, /** ver 2.2 **/
                                FFO_U_ORDR_MRGN,(char *)&st_cntopt_pos.d_ordr_mrgn, /*** ver 2.2 **/
																FFO_EFF_LMT_RT,(char *)&d_opt_sprmum      /*** Ver 2.4 ***/
                              );

  if ( i_ch_val != 0 )
  {
    fn_errlog( c_ServiceName, "S31105", LIBMSG, c_err_msg );
    tpfree ( ( char * ) ptr_fml_Obuf );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }

  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );

}

int fn_upd_mrgn ( char *c_ServiceName,
                  struct vw_pstn_actn *ptr_st_pstn_actn,
                  struct vw_cntopt_pos *ptr_st_cntopt_pos_crrnt,
                  struct vw_cntopt_pos *ptr_st_cntopt_pos,
                  struct vw_err_msg *ptr_st_err_msg )
{
  int i_returncode;
  int i_ip_len;
  int i_op_len;

  long int li_itm_prc;
  long int li_oom_prc;
  long int li_ose_qty;
  long int li_ibm_qty;
  long int li_ebm_qty;
  long int li_obe_qty;
  long int li_ism_qty;
  long int li_esm_qty;
  long int li_cls_prc;
  long int li_stk_prc;

  double d_initial_mrgn = 0.0;
  double d_min_mrgn = 0.0;
  double d_somc  = 0.0;
  double d_i_exp = 0.0;
  double d_e_exp = 0.0;

  double d_min_trggr_prcnt =0.0;  /** Ver 1.8 **/
  double d_trigger_prc;  

/****  Margin Calc  ***/
  double d_c1 = 0.0;
  double d_c2 = 0.0;
  double d_c3 = 0.0;
  double d_c4 = 0.0;
  double d_c5 = 0.0;

  /** Get the margin percentages **/
  i_returncode = fn_get_mrgn_prntg_opt( c_ServiceName,
                                 				ptr_st_pstn_actn,
                                 				ptr_st_err_msg,
                                 				&d_initial_mrgn,
                                 				&d_min_mrgn,
                                 				&d_somc,
																			  &d_min_trggr_prcnt );  /** Ver 1.8 **/ 

	if(DEBUG_MSG_LVL_3)
	{
	fn_userlog(c_ServiceName, "Initial Margin :%lf", d_initial_mrgn);
	fn_userlog(c_ServiceName, "Min Margin :%lf", d_min_mrgn);
	fn_userlog(c_ServiceName, "SOMC :%lf", d_somc);
  fn_userlog( c_ServiceName,"Minimum Trigger percentage is :%lf:",d_min_trggr_prcnt );  /** Ver 1.8 **/
	}

  if ( i_returncode == -1 )
  {
    return ( -1 );
  }

  if ( ptr_st_pstn_actn->c_opt_typ == 'P' )
  {
    li_cls_prc = (long)(ptr_st_pstn_actn->d_und_quote*100.0);
    li_stk_prc = ptr_st_cntopt_pos->l_strike_prc;

    if ( li_cls_prc < li_stk_prc )
    {
      li_itm_prc = li_stk_prc - li_cls_prc;
      li_oom_prc = 0;
    }
    else
    {
      li_oom_prc = li_cls_prc - li_stk_prc;
      li_itm_prc = 0;
    }

    if ( ptr_st_cntopt_pos->l_ibuy_qty != 0 )
    {
      li_ose_qty = fn_maxl ( ( ( ptr_st_cntopt_pos->l_sell_exctd_qty * -1 ) -
                               ptr_st_cntopt_pos->l_buy_exctd_qty             ),
                             0 );

      li_ibm_qty = fn_maxl ( (ptr_st_cntopt_pos->l_ibuy_qty - li_ose_qty),
                             0 );

      ptr_st_cntopt_pos->d_ibuy_mrgn =
         ( (double)li_ibm_qty * ( ptr_st_cntopt_pos->d_ibuy_ord_vl /
                                  (double)ptr_st_cntopt_pos->l_ibuy_qty  ) );
    }
    else
    {
      ptr_st_cntopt_pos->d_ibuy_mrgn = 0;
    }

    if ( ptr_st_cntopt_pos->l_exbuy_qty != 0 )
    {
      li_ose_qty = fn_maxl ( ( ( ptr_st_cntopt_pos->l_sell_exctd_qty * -1 ) -
                                 ptr_st_cntopt_pos->l_buy_exctd_qty           ),
                             0 );

      li_ebm_qty = fn_maxl( ( ptr_st_cntopt_pos->l_exbuy_qty - li_ose_qty ),
                            0 );

      ptr_st_cntopt_pos->d_exbuy_mrgn =
          ( (double)li_ebm_qty ) * ( ptr_st_cntopt_pos->d_exbuy_ord_vl /
                                     (double)ptr_st_cntopt_pos->l_exbuy_qty );
    }
    else
    {
      ptr_st_cntopt_pos->d_exbuy_mrgn = 0;
    }

    if ( ptr_st_cntopt_pos->l_isell_qty != 0 )
    {
      li_obe_qty = fn_maxl ( ( ptr_st_cntopt_pos->l_buy_exctd_qty -
                               ( ptr_st_cntopt_pos->l_sell_exctd_qty * -1 ) ),
                             0 );

      li_ism_qty = fn_maxl ( ( ( ptr_st_cntopt_pos->l_isell_qty * -1 ) -
                               li_obe_qty                                ),
                             0 );

      /*** d_c1 =
        ( (double)li_ism_qty            *
          ptr_st_pstn_actn->d_und_quote * 100.0 *
          d_initial_mrgn / 100.0                   ) -
        (double)( li_oom_prc * li_ism_qty          ) +
        (double)( li_itm_prc * li_ism_qty          ); *** Commented in Ver 1.7 ***/

			d_c1 =
        ( (double)li_ism_qty            *
          ptr_st_pstn_actn->d_und_quote * 100.0 *
          d_initial_mrgn / 100.0                   ) -
         ((double) li_oom_prc  * (double) li_ism_qty )  +
         ((double) li_itm_prc * (double) li_ism_qty )  ;   /*** Added in Ver 1.7 ***/ 


      d_c2 =  ( (double)li_ism_qty *
                (double)ptr_st_cntopt_pos->l_strike_prc *
                d_somc / 100.0 );

      d_c3 = fn_maxd( d_c1, d_c2 );

/********************************
      d_c4 = ( ( ptr_st_cntopt_pos->d_isell_ord_vl      /
                 (double)ptr_st_cntopt_pos->l_isell_qty   ) *
               (double)li_ism_qty                             );
*************************************/

			d_c4 = ptr_st_cntopt_pos->d_isell_ord_vl * -1;

      /*d_c5 = d_c3 - d_c4;*/			/*** 1.2 ***/
				d_c5 = d_c3;							/*** 1.2 ***/

      ptr_st_cntopt_pos->d_isell_mrgn = fn_maxd( d_c5, 0 );
    }
    else
    {
      ptr_st_cntopt_pos->d_isell_mrgn = 0.0;
    }

    if ( ptr_st_cntopt_pos->l_exsell_qty != 0 )
    {
      li_obe_qty = fn_maxl ( ( ptr_st_cntopt_pos->l_buy_exctd_qty -
                               ( ptr_st_cntopt_pos->l_sell_exctd_qty * -1 ) ),
                             0 );

      li_esm_qty = fn_maxl ( ( ( ptr_st_cntopt_pos->l_exsell_qty * -1 ) -
                               li_obe_qty                                ),
                             0 );

      /*** d_c1 =
        ( (double)li_esm_qty            *
          ptr_st_pstn_actn->d_und_quote *  100.0 *
          d_initial_mrgn / 100.0                   ) -
        (double)( li_oom_prc * li_esm_qty          ) +
        (double)( li_itm_prc * li_esm_qty          );		*** Commented in Ver 1.7 ***/

      d_c1 =
        ( (double)li_esm_qty            *
          ptr_st_pstn_actn->d_und_quote *  100.0 *
          d_initial_mrgn / 100.0									) -
         ((double) li_oom_prc * (double) li_esm_qty)				+
         ((double) li_itm_prc * (double) li_esm_qty)				;		/*** Ver 1.7 ***/ 


      d_c2 =  ( (double)li_esm_qty *
                (double)ptr_st_cntopt_pos->l_strike_prc *
                d_somc / 100.0 );

      d_c3 = fn_maxd( d_c1, d_c2 );

/***************************
      d_c4 = ( ( ptr_st_cntopt_pos->d_exsell_ord_vl    /
                 (double)ptr_st_cntopt_pos->l_exsell_qty   ) *
               (double)li_esm_qty                              );
***************************/
			d_c4 = ptr_st_cntopt_pos->d_exsell_ord_vl  * -1;

      /*d_c5 = d_c3 - d_c4;*/								/*** 1.2 ***/
			d_c5 = d_c3;													/*** 1.2 ***/

      ptr_st_cntopt_pos->d_exsell_mrgn = fn_maxd( d_c5, 0 );
    }
    else
    {
      ptr_st_cntopt_pos->d_exsell_mrgn = 0.0;
    }

    d_i_exp = fn_maxd( ptr_st_cntopt_pos->d_ibuy_mrgn,
                       ptr_st_cntopt_pos->d_exbuy_mrgn );

    d_e_exp = fn_maxd( ptr_st_cntopt_pos->d_isell_mrgn,
                       ptr_st_cntopt_pos->d_exsell_mrgn );

    ptr_st_cntopt_pos->d_ordr_mrgn = fn_maxd ( d_i_exp, d_e_exp );

    if ( ptr_st_cntopt_pos->l_opnpstn_qty < 0 )
    {
        /*** d_c1 =
          ( ( (double)ptr_st_cntopt_pos->l_opnpstn_qty * -1.0 ) *
            ptr_st_pstn_actn->d_und_quote * 100.0               *
            d_initial_mrgn / 100.0                                       ) -
          (double)( li_oom_prc * ptr_st_cntopt_pos->l_opnpstn_qty * -1 ) +
          (double)( li_itm_prc * ptr_st_cntopt_pos->l_opnpstn_qty * -1 ); *** Commented in Ver 1.7 ***/

					d_c1 =
          ( ( (double)ptr_st_cntopt_pos->l_opnpstn_qty * -1.0 ) *
            ptr_st_pstn_actn->d_und_quote * 100.0               *
            d_initial_mrgn / 100.0                                       ) -
           ((double) li_oom_prc *  (double) ( ptr_st_cntopt_pos->l_opnpstn_qty * -1 )) +
           ((double) li_itm_prc *  (double) ( ptr_st_cntopt_pos->l_opnpstn_qty * -1 ));	/*** Ver 1.7 ***/


        d_c2 =  ( ( (double)ptr_st_cntopt_pos->l_opnpstn_qty * -1.0 ) *
                  (double)ptr_st_cntopt_pos->l_strike_prc             *
                  d_somc / 100.0                                        );

        ptr_st_cntopt_pos->d_trd_mrgn =  fn_maxd( d_c1, d_c2 );
    }
    else
    {
        ptr_st_cntopt_pos->d_trd_mrgn = 0;
    }
	}
	else
	{
    li_cls_prc = (long)(ptr_st_pstn_actn->d_und_quote * 100.0 );
    li_stk_prc = ptr_st_cntopt_pos->l_strike_prc;

    if ( li_cls_prc > li_stk_prc )
    {
      li_itm_prc = li_cls_prc - li_stk_prc;
      li_oom_prc = 0;
    }
    else
    {
      li_oom_prc = li_stk_prc - li_cls_prc;
      li_itm_prc = 0;
    }

    if ( ptr_st_cntopt_pos->l_ibuy_qty != 0 )
    {
      li_ose_qty = fn_maxl ( ( ( ptr_st_cntopt_pos->l_sell_exctd_qty * -1 ) -
                               ptr_st_cntopt_pos->l_buy_exctd_qty             ),
                             0 );

      li_ibm_qty = fn_maxl ( (ptr_st_cntopt_pos->l_ibuy_qty - li_ose_qty),
                             0 );

      ptr_st_cntopt_pos->d_ibuy_mrgn =
         ( (double)li_ibm_qty * ( ptr_st_cntopt_pos->d_ibuy_ord_vl /
                                  (double)ptr_st_cntopt_pos->l_ibuy_qty  ) );
    }
    else
    {
      ptr_st_cntopt_pos->d_ibuy_mrgn = 0;
    }

    if ( ptr_st_cntopt_pos->l_exbuy_qty != 0 )
    {
      li_ose_qty = fn_maxl ( ( ( ptr_st_cntopt_pos->l_sell_exctd_qty * -1 ) -
                                 ptr_st_cntopt_pos->l_buy_exctd_qty           ),
                             0 );

      li_ebm_qty = fn_maxl( ( ptr_st_cntopt_pos->l_exbuy_qty - li_ose_qty ),
                            0 );

      ptr_st_cntopt_pos->d_exbuy_mrgn =
          ( (double)li_ebm_qty ) * ( ptr_st_cntopt_pos->d_exbuy_ord_vl /
                                     (double)ptr_st_cntopt_pos->l_exbuy_qty );
    }
    else
    {
      ptr_st_cntopt_pos->d_exbuy_mrgn = 0;
    }

    if ( ptr_st_cntopt_pos->l_isell_qty != 0 )
    {
      li_obe_qty = fn_maxl ( ( ptr_st_cntopt_pos->l_buy_exctd_qty -
                               ( ptr_st_cntopt_pos->l_sell_exctd_qty * -1 )),
                             0 );

      li_ism_qty = fn_maxl ( ( ( ptr_st_cntopt_pos->l_isell_qty * -1 ) -
                               li_obe_qty                                ),
                             0 );

      /*** d_c1 =
        ( (double)li_ism_qty    *
          ptr_st_pstn_actn->d_und_quote * 100.0 *
          d_initial_mrgn / 100.0                           ) -
        (double)( li_oom_prc * li_ism_qty ) +
        (double)( li_itm_prc * li_ism_qty ); *** Commented in Ver 1.7 ***/

			d_c1 =
        ( (double)li_ism_qty    *
          ptr_st_pstn_actn->d_und_quote * 100.0 *
          d_initial_mrgn / 100.0                           ) -
        ((double) li_oom_prc * (double) li_ism_qty ) +
        ((double) li_itm_prc * (double) li_ism_qty );		/*** Ver 1.7 ***/ 


      d_c2 =  ( (double)li_ism_qty *
                (double)ptr_st_cntopt_pos->l_strike_prc *
                d_somc / 100.0 );

      d_c3 = fn_maxd( d_c1, d_c2 );

/**********************************
      d_c4 = ( ( ptr_st_cntopt_pos->d_isell_ord_vl      /
                 (double)ptr_st_cntopt_pos->l_isell_qty   ) *
               (double)li_ism_qty                             );
*************************************/
			d_c4 = ptr_st_cntopt_pos->d_isell_ord_vl * -1 ;

      /*d_c5 = d_c3 - d_c4; */									/*** 1.2 ***/
				d_c5 = d_c3;														/*** 1.2 ***/

      ptr_st_cntopt_pos->d_isell_mrgn = fn_maxd( d_c5, 0 );
    }
    else
    {
      ptr_st_cntopt_pos->d_isell_mrgn = 0.0;
    }

    if ( ptr_st_cntopt_pos->l_exsell_qty != 0 )
    {
      li_obe_qty = fn_maxl ( ( ptr_st_cntopt_pos->l_buy_exctd_qty -
                               ( ptr_st_cntopt_pos->l_sell_exctd_qty * -1 )),
                             0 );

      li_esm_qty = fn_maxl ( ( ( ptr_st_cntopt_pos->l_exsell_qty * -1 ) -
                               li_obe_qty                                ),
                             0 );

      /*** d_c1 =
        ( (double)li_esm_qty *
          ptr_st_pstn_actn->d_und_quote *  100.0 *
          d_initial_mrgn / 100.0                          ) -
        (double)( li_oom_prc * li_esm_qty ) +
        (double)( li_itm_prc * li_esm_qty ); *** Commented in Ver 1.7 ***/

			d_c1 =
        ( (double)li_esm_qty *
          ptr_st_pstn_actn->d_und_quote *  100.0 *
          d_initial_mrgn / 100.0                          ) -
        ((double) li_oom_prc * (double) li_esm_qty ) +
        ((double) li_itm_prc * (double) li_esm_qty );	/*** Ver 1.7 ***/ 


      d_c2 =  ( (double)li_esm_qty *
                (double)ptr_st_cntopt_pos->l_strike_prc *
                d_somc / 100.0 );

      d_c3 = fn_maxd( d_c1, d_c2 );

/**********************************
      d_c4 = ( ( ptr_st_cntopt_pos->d_exsell_ord_vl    /
                 (double)ptr_st_cntopt_pos->l_exsell_qty   ) *
               (double)li_esm_qty                              );
**************************/
			d_c4 = ptr_st_cntopt_pos->d_exsell_ord_vl * -1;

      /*d_c5 = d_c3 - d_c4; */									/*** 1.2 ***/
			  d_c5 = d_c3;                            /*** 1.2 ***/

      ptr_st_cntopt_pos->d_exsell_mrgn = fn_maxd( d_c5, 0 );
    }
    else
    {
      ptr_st_cntopt_pos->d_exsell_mrgn = 0.0;
    }

    d_i_exp = fn_maxd( ptr_st_cntopt_pos->d_ibuy_mrgn,
                       ptr_st_cntopt_pos->d_exbuy_mrgn );

    d_e_exp = fn_maxd( ptr_st_cntopt_pos->d_isell_mrgn,
                       ptr_st_cntopt_pos->d_exsell_mrgn );

    ptr_st_cntopt_pos->d_ordr_mrgn = fn_maxd ( d_i_exp, d_e_exp );

    if ( ptr_st_cntopt_pos->l_opnpstn_qty < 0 )
    {
      /*** d_c1 =
        ( (double)(ptr_st_cntopt_pos->l_opnpstn_qty * -1.0) *
          ptr_st_pstn_actn->d_und_quote *  100.0 *
          d_initial_mrgn / 100.0                              ) -
        (double)( li_oom_prc * ptr_st_cntopt_pos->l_opnpstn_qty * -1.0  ) +
        (double)( li_itm_prc * ptr_st_cntopt_pos->l_opnpstn_qty * -1.0  ); *** Commented in ver 1.7 ***/

			d_c1 =
        ( (double)(ptr_st_cntopt_pos->l_opnpstn_qty * -1.0) *
          ptr_st_pstn_actn->d_und_quote *  100.0 *
          d_initial_mrgn / 100.0                              ) -
        ((double) li_oom_prc * (double) (ptr_st_cntopt_pos->l_opnpstn_qty * -1.0  )) +
        ((double) li_itm_prc * (double) (ptr_st_cntopt_pos->l_opnpstn_qty * -1.0  ));	/*** Ver 1.7 ***/


      d_c2 =  ( (double)( ptr_st_cntopt_pos->l_opnpstn_qty * -1.0 ) *
                (double)ptr_st_cntopt_pos->l_strike_prc *
                d_somc / 100.0                                    );
      ptr_st_cntopt_pos->d_trd_mrgn =  fn_maxd( d_c1, d_c2 );
    }
    else
    {
      ptr_st_cntopt_pos->d_trd_mrgn = 0;
    }
	}
	return SUCCESS;
}


/*** ver 2.2 starts ***/
int fn_mrgncal_sltp ( char *c_ServiceName,
            char *c_err_msg,
            struct vw_cntopt_pos *ptr_st_undfut_pos,
            double *ptr_d_ord_mrgn_amt,
            double *ptr_d_ord_mrgn_amt_sell )
{
  long l_basket_id;
  long l_lst_trd_prc;
  double d_mul_factor;
  long l_lot_size;
  double d_spltp_diff_per = 0.0;
  double d_stp_lss_amt = 0;
  double d_sltp_amt = 0;
  double d_act_diff = 0;
  double d_lmt_prc = 0;
  double d_mrg_amnt = 0;
  char c_otm_flg = '\0';
  char c_buy_zero = 'N';
  char c_sell_zero = 'N';
 
  double d_sltp_prcnt = 0.0;
  double d_xchng_prcnt = 0.0;
  double d_xchng_amt = 0.0;
  double d_mrg_amnt1 = 0;

  double d_spn_per_lot = 0.0;
  long l_lot_sz = 0;
  long l_frm_cutoff_premium = 0;
  double d_op_flat_rt = 0.0;
  double d_bop_sebi_prcnt = 0.0;
  double d_sop_sebi_prcnt = 0.0;
  double d_expr_prcnt = 0.0;
  double d_frm_diffrnc_mrgn = 0.0;
  char c_frs_ordr_flw = '\0';
  long l_tot_pending_qty = 0;
  double d_frs_wap_lmt = 0.0;
  double d_cvr_wap_lmt = 0.0;
  double d_mrgn_amt = 0.0;
  double d_lss_amt = 0.0;
  double d_lss_amt_sell = 0.0;
  double d_prem_amt = 0.0;
  double d_comp1_mrgn = 0.0;
  double d_comp1_pl = 0.0;
  double d_spn_mrgn = 0.0;
  double d_spot = 0.0;
  double d_expr_mrgn = 0.0;
  int i_tick_sz = 0;
  long l_sltp_lmt_diff=0;
  double d_limit_diff = 0.0;
  long li_stp_lss_tgr_prc = 0;
  long l_lmt_rt = 0;
  long l_minimum_sltp = 0;
  long l_lmt_diff = 0;
  long l_max_limit_diff = 0;

	double d_prev_und_quote = 0.0; /*** Ver 2.5 ***/

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~fn_mrgncal_sltp logs starts~~~~~~~~~~~~~~~~~~~~~~~~~");
      fn_userlog( c_ServiceName, "Match account :%s:",ptr_st_undfut_pos->c_cln_mtch_accnt);
      fn_userlog( c_ServiceName, "Contract details" );
      fn_userlog( c_ServiceName, "EX :%s:", ptr_st_undfut_pos->c_xchng_cd );
      fn_userlog( c_ServiceName, "PRD:%c:", ptr_st_undfut_pos->c_prd_typ );
      fn_userlog( c_ServiceName, "UND:%s:", ptr_st_undfut_pos->c_undrlyng );
      fn_userlog( c_ServiceName, "EXP:%s:", ptr_st_undfut_pos->c_expry_dt );
      fn_userlog( c_ServiceName, "Ex :%c:", ptr_st_undfut_pos->c_exrc_typ );
      fn_userlog( c_ServiceName, "OP :%c:", ptr_st_undfut_pos->c_opt_typ );
      fn_userlog( c_ServiceName, "SP :%ld:", ptr_st_undfut_pos->l_strike_prc );
      fn_userlog( c_ServiceName, "I/S:%c:", ptr_st_undfut_pos->c_ctgry_indstk );
      fn_userlog( c_ServiceName, "Ibuy qty:%ld:", ptr_st_undfut_pos->l_ibuy_qty );
      fn_userlog( c_ServiceName, "Ibuy ord val:%lf:", ptr_st_undfut_pos->d_ibuy_ord_vl );
      fn_userlog( c_ServiceName, "buy Exec qty:%ld:", ptr_st_undfut_pos->l_buy_exctd_qty );
      fn_userlog( c_ServiceName, "Values after modification" );
      fn_userlog( c_ServiceName, "M-Isell qty:%ld:", ptr_st_undfut_pos->l_isell_qty );
      fn_userlog( c_ServiceName, "M-Isell ord val:%lf:", ptr_st_undfut_pos->d_isell_ord_vl );
      fn_userlog( c_ServiceName, "M-sell Exec qty:%ld:", ptr_st_undfut_pos->l_sell_exctd_qty );
      fn_userlog( c_ServiceName, "M-open pos flow:%c:", ptr_st_undfut_pos->c_opnpstn_flw );
      fn_userlog( c_ServiceName, "M-open pos qty:%ld:", ptr_st_undfut_pos->l_opnpstn_qty );
      fn_userlog( c_ServiceName, "M-open pos val:%lf:", ptr_st_undfut_pos->d_org_opn_val );
    }
  EXEC SQL
    SELECT  FCB_UNDRLYNG_BSKT_ID
    INTO    :l_basket_id
    FROM    FCB_FO_CLN_BSKT_ALLTD
    WHERE   FCB_CLN_LVL = ( SELECT  CLM_CLNT_LVL
                            FROM    CLM_CLNT_MSTR
                            WHERE   CLM_MTCH_ACCNT = :ptr_st_undfut_pos->c_cln_mtch_accnt );
  if ( SQLCODE != 0 )
  {
  fn_errlog( c_ServiceName, "S31110", SQLMSG, c_err_msg );
  return FAILURE;
  }
    EXEC SQL
    SELECT NVL(FTQ_SPN_PER_LOT,0),
           NVL(FTQ_MIN_LOT_QTY,0),
           NVL(FTQ_LST_TRD_PRC,0),
           NVL(FTQ_OTM_FLG,'N')
    INTO   :d_spn_per_lot,
           :l_lot_sz,
           :l_lst_trd_prc,
           :c_otm_flg         
    FROM   FTQ_FO_TRD_QT
    WHERE  FTQ_XCHNG_CD = :ptr_st_undfut_pos->c_xchng_cd
    AND    FTQ_UNDRLYNG = :ptr_st_undfut_pos->c_undrlyng
    AND    FTQ_PRDCT_TYP = 'O'
    AND    trunc(FTQ_EXPRY_DT) = trim(:ptr_st_undfut_pos->c_expry_dt)
    AND    FTQ_STRK_PRC = :ptr_st_undfut_pos->l_strike_prc
    AND    FTQ_EXER_TYP = :ptr_st_undfut_pos->c_exrc_typ
    AND    FTQ_OPT_TYP = :ptr_st_undfut_pos->c_opt_typ;
  if ( SQLCODE != 0 )
  {
  fn_errlog( c_ServiceName, "S31115", SQLMSG, c_err_msg );
  return FAILURE;
  }

  EXEC SQL
    SELECT  NVL(FMM_SLTP_DIFF_PRCNT,0),  
            NVL(FMM_OPLUS_FLAT_RT,0) * 100,
            NVL(FMM_OPLUS_SEBI_PRCNT_B,0),
            NVL(FMM_OPLUS_SEBI_PRCNT_S,0),
            decode(:c_otm_flg,'Y',NVL(FMM_DEEP_OTM_EXPSR,0),NVL(FMM_EXPSR,0)) 
    INTO     :d_spltp_diff_per, 
                :d_op_flat_rt,
                :d_bop_sebi_prcnt,
                :d_sop_sebi_prcnt,
                :d_expr_prcnt    
    FROM     FMM_FO_MRGN_MSTR 
         WHERE    FMM_UNDRLYNG = :ptr_st_undfut_pos->c_undrlyng
         AND    FMM_XCHNG_CD = :ptr_st_undfut_pos->c_xchng_cd
         AND   FMM_PRDCT_TYP = 'O'
         AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
         FROM    FCB_FO_CLN_BSKT_ALLTD
         WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
         FROM    CLM_CLNT_MSTR
         WHERE   CLM_MTCH_ACCNT = :ptr_st_undfut_pos->c_cln_mtch_accnt));

  if ( SQLCODE != 0 )
  {
  fn_errlog( c_ServiceName, "S31120", SQLMSG, c_err_msg );
  return FAILURE;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "d_spltp_diff_per:%lf:", d_spltp_diff_per);
  }

  if(ptr_st_undfut_pos->l_ibuy_qty != 0)
  l_lot_size = ptr_st_undfut_pos->l_ibuy_qty;
  else if(ptr_st_undfut_pos->l_isell_qty != 0)
  l_lot_size = ptr_st_undfut_pos->l_isell_qty;
  else
  l_lot_size = 0;


  if(ptr_st_undfut_pos->c_ctgry_indstk == 'I')
  d_mul_factor = 0.25;
  else if(ptr_st_undfut_pos->c_ctgry_indstk == 'S')
  d_mul_factor = 0.5;
  else
  {
    fn_errlog( c_ServiceName, "S31125", LIBMSG, c_err_msg ); /*22005*/  /*** SQLMSG Replaced with LIBMSG in VQC ***/
    return FAILURE;
  }

  d_stp_lss_amt = ( d_mul_factor * l_lst_trd_prc )/100;

  if(DEBUG_MSG_LVL_3)
  {
  fn_userlog( c_ServiceName, "d_stp_lss_amt :%lf:", d_stp_lss_amt);
  }
  l_frm_cutoff_premium = 0 ;

  EXEC SQL
   SELECT DISTINCT(NVL(FRM_CUTOFF_PREMIUM,0))
   INTO   :l_frm_cutoff_premium
   FROM   FRM_FO_RANGE_MSTR
   WHERE  FRM_XCHNG_CD     =:ptr_st_undfut_pos->c_xchng_cd
   AND    FRM_UNDRLYNG     =:ptr_st_undfut_pos->c_undrlyng
   AND    FRM_CUTOFF_PREMIUM IS NOT NULL;

  if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
  {
    fn_errlog( c_ServiceName, "S31130",SQLMSG,c_err_msg);
    return ( -1 ) ;
  }
  if(DEBUG_MSG_LVL_3)
  {
  fn_userlog(c_ServiceName,"l_frm_cutoff_premium  :%ld:",  l_frm_cutoff_premium);
  }


    EXEC SQL
      SELECT DISTINCT (FTQ_TCK_SZ)
      INTO  :i_tick_sz
      FROM  FTQ_FO_TRD_QT
      WHERE FTQ_XCHNG_CD  = :ptr_st_undfut_pos->c_xchng_cd
      AND   FTQ_PRDCT_TYP = 'O' 
      AND   FTQ_UNDRLYNG  = :ptr_st_undfut_pos->c_undrlyng ;

  if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
  {
      fn_errlog( c_ServiceName, "S31135",SQLMSG,c_err_msg);
      fn_userlog(c_ServiceName,"******Invalid Stock Code*******");
  }
  else if(SQLCODE != 0)
  {
      fn_errlog( c_ServiceName, "S31140",SQLMSG,c_err_msg);
      return (-1);
  }

  if(DEBUG_MSG_LVL_3)
  {
      fn_userlog(c_ServiceName,"Tick size :%d:",i_tick_sz);
  }
/**
  if(ptr_st_undfut_pos->l_ibuy_qty != 0)
  d_sltp_amt = l_lst_trd_prc - d_stp_lss_amt;
  else if(ptr_st_undfut_pos->l_isell_qty != 0)
  d_sltp_amt = l_lst_trd_prc + d_stp_lss_amt;
  else
  {
    fn_errlog( c_ServiceName, "S31145", LIBMSG, c_err_msg );
    return FAILURE;
  }

**/

  l_tot_pending_qty=l_lot_size;
  d_frs_wap_lmt=0;
  d_cvr_wap_lmt=0;
/**
  d_act_diff = (d_sltp_amt * d_spltp_diff_per)/100;
  d_lmt_prc = d_sltp_amt - d_act_diff;
**/

  d_mrgn_amt = (double) l_tot_pending_qty * d_op_flat_rt;
  c_frs_ordr_flw = 'B';
  if(c_frs_ordr_flw == 'B' )
  {
   d_sltp_amt = l_lst_trd_prc - d_stp_lss_amt;

  EXEC SQL
  SELECT nvl(FRM_DIFFRNC_MRGN,0)
  INTO   :d_frm_diffrnc_mrgn
  FROM   FRM_FO_RANGE_MSTR
  WHERE  FRM_XCHNG_CD = :ptr_st_undfut_pos->c_xchng_cd
    AND    FRM_UNDRLYNG = :ptr_st_undfut_pos->c_undrlyng
    AND    FRM_ORDR_FLOW = :c_frs_ordr_flw
    AND    FRM_FROM_RANGE <= :d_sltp_amt
    AND    :d_sltp_amt   < FRM_TO_RANGE
    AND    (:d_sltp_amt > 0 ) ;

  if ( SQLCODE  !=  0  && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog( c_ServiceName, "S31150",SQLMSG,c_err_msg);
    return ( -1 ) ;
  }

/*  d_sltp_amt = l_lst_trd_prc - d_stp_lss_amt;
  d_act_diff = (d_sltp_amt * d_frm_diffrnc_mrgn)/100;
  d_lmt_prc = d_sltp_amt - d_act_diff; */

  l_sltp_lmt_diff = (long) (d_sltp_amt* d_frm_diffrnc_mrgn/100);
  
  d_limit_diff = l_sltp_lmt_diff;
  
  li_stp_lss_tgr_prc = (long)d_sltp_amt;

  if(d_frm_diffrnc_mrgn == 100)
  {
    l_lmt_rt = 5;
  }
  else
  {
    fn_userlog(c_ServiceName,"Fresh Order is BUY Order :sltp perc diff value d_limit_diff :%lf:",d_limit_diff);
    l_lmt_rt=fn_cal_price_optplus(c_ServiceName,li_stp_lss_tgr_prc,d_limit_diff,CAL_LOWER,ptr_st_undfut_pos->c_xchng_cd,i_tick_sz);
  }

  if(DEBUG_MSG_LVL_3)
  {
   fn_userlog(c_ServiceName,"Input SLTP :%ld: Calculated Limit Price :%ld:",li_stp_lss_tgr_prc,l_lmt_rt);
   fn_userlog( c_ServiceName, "BUY d_frm_diffrnc_mrgn :%lf:  d_sltp_amt :%lf: l_lst_trd_prc :%lf:",d_frm_diffrnc_mrgn,d_sltp_amt,l_lst_trd_prc);

  }

  if((d_frm_diffrnc_mrgn == -1) || ( d_sltp_amt > l_lst_trd_prc ))
  {
    fn_userlog( c_ServiceName, " BUY ZERO d_frm_diffrnc_mrgn :%lf:",d_frm_diffrnc_mrgn);
    c_buy_zero = 'Y';

  }

  if(DEBUG_MSG_LVL_3)
  {  
  fn_userlog( c_ServiceName, "BUY d_frm_diffrnc_mrgn :%lf: l_tot_pending_qty :%ld: l_lst_trd_prc :%ld: d_lmt_prc :%lf:",d_frm_diffrnc_mrgn,l_tot_pending_qty,l_lst_trd_prc,d_lmt_prc );
   }

  if(d_frm_diffrnc_mrgn < 100)
  d_lss_amt =   (double)l_tot_pending_qty * ((double)(l_lst_trd_prc - l_lmt_rt));
  else if(d_frm_diffrnc_mrgn == 100)
  d_lss_amt =   (double)l_tot_pending_qty * (double)(l_lst_trd_prc);

  if(DEBUG_MSG_LVL_3)
  {
  fn_userlog( c_ServiceName, "BUY d_lss_amt :%lf:",d_lss_amt);
  fn_userlog( c_ServiceName, "BUY d_bop_sebi_prcnt :%lf:",d_bop_sebi_prcnt);
  }

  d_prem_amt = (double) l_tot_pending_qty * (double)(l_lst_trd_prc);
  d_xchng_amt =((double) l_tot_pending_qty * (double)(l_lst_trd_prc)  * d_bop_sebi_prcnt)/100;
  d_comp1_mrgn = d_mrgn_amt;
  d_comp1_pl   = d_lss_amt;
  if(DEBUG_MSG_LVL_3)
  {
  fn_userlog( c_ServiceName, "BUY d_prem_amt :%lf: d_xchng_amt :%lf: d_comp1_mrgn :%lf: d_comp1_pl :%lf:",d_prem_amt,d_xchng_amt,d_comp1_mrgn,d_comp1_pl);
  }

  if ( d_xchng_amt > (d_mrgn_amt + d_lss_amt) ) 
  {
      if ( d_xchng_amt < d_prem_amt)   
      {
        fn_userlog( c_ServiceName, "BUY : 1");
        d_lss_amt = d_xchng_amt;
        d_mrgn_amt = 0.0;
      }
      else
      {
        fn_userlog( c_ServiceName, "BUY : 2");
        d_lss_amt = d_prem_amt;
        d_mrgn_amt = 0.0;
      }
  }
  else
  {
      if ( (d_lss_amt + d_mrgn_amt) < d_prem_amt)  
      {
        fn_userlog( c_ServiceName, "BUY : 3");
        d_lss_amt = (d_lss_amt + d_mrgn_amt);
        d_mrgn_amt = 0.0;
      }
      else
      {
        fn_userlog( c_ServiceName, "BUY : 4");
        d_lss_amt = d_prem_amt;
        d_mrgn_amt = 0.0;
      }
   }
   fn_userlog( c_ServiceName, "BUY d_lss_amt :%lf:",d_lss_amt);
 }
 c_frs_ordr_flw = 'S';

 if(c_frs_ordr_flw == 'S' )
  {
  d_sltp_amt = 0;

  d_sltp_amt = l_lst_trd_prc + d_stp_lss_amt;

  EXEC SQL
  SELECT nvl(FRM_DIFFRNC_MRGN,0),
         NVL(FRM_MINIMUM_SLTP,0)
  INTO   :d_frm_diffrnc_mrgn,
         :l_minimum_sltp
  FROM   FRM_FO_RANGE_MSTR
  WHERE  FRM_XCHNG_CD = :ptr_st_undfut_pos->c_xchng_cd
    AND    FRM_UNDRLYNG = :ptr_st_undfut_pos->c_undrlyng
    AND    FRM_ORDR_FLOW = :c_frs_ordr_flw
    AND    FRM_FROM_RANGE <= :d_sltp_amt
    AND    :d_sltp_amt   < FRM_TO_RANGE
    AND    (:d_sltp_amt > 0 ) ;

  if ( SQLCODE  !=  0  && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog( c_ServiceName, "S31155",SQLMSG,c_err_msg);
    return ( -1 ) ;
  }

  /* d_act_diff = (d_sltp_amt * d_frm_diffrnc_mrgn)/100;
  d_lmt_prc = d_sltp_amt - d_act_diff; */

  l_sltp_lmt_diff = (long) (d_sltp_amt * d_frm_diffrnc_mrgn/100);

  if(DEBUG_MSG_LVL_3)
  {
  fn_userlog(c_ServiceName,"l_minimum_sltp      :%ld:",  l_minimum_sltp);
  }

  l_lmt_diff =  l_minimum_sltp;
  l_max_limit_diff = fn_max(c_ServiceName, l_sltp_lmt_diff, l_lmt_diff); 

  if(DEBUG_MSG_LVL_3)
  {
  fn_userlog( c_ServiceName," SLTP price *  Difference Margin : l_sltp_lmt_diff: :%ld:",l_sltp_lmt_diff);
  fn_userlog( c_ServiceName," Minimum l_lmt_diff :%ld:",l_lmt_diff);
  fn_userlog( c_ServiceName," fn_max :l_max_limit_diff:  :%ld:",l_max_limit_diff);
  }

  d_limit_diff = (double) l_max_limit_diff;
  if(DEBUG_MSG_LVL_3)
  {
  fn_userlog(c_ServiceName,"Fresh Order is SELL Order :sltp perc diff value d_limit_diff :%lf:",d_limit_diff);
  }
  li_stp_lss_tgr_prc = (long)d_sltp_amt;
 
  l_lmt_rt=fn_cal_price_optplus(c_ServiceName,li_stp_lss_tgr_prc,d_limit_diff,CAL_UPPER,ptr_st_undfut_pos->c_xchng_cd,i_tick_sz);

  if(DEBUG_MSG_LVL_3)
  {
  fn_userlog(c_ServiceName,"Input SLTP :%ld: Calculated Limit Price :%ld:",li_stp_lss_tgr_prc,l_lmt_rt);
  fn_userlog( c_ServiceName, "SELL l_frm_cutoff_premium :%ld: d_sltp_amt :%lf: l_lst_trd_prc :%ld:",l_frm_cutoff_premium,d_sltp_amt,l_lst_trd_prc);
  }

  if(( l_lst_trd_prc < l_frm_cutoff_premium ) || ( d_sltp_amt < l_lst_trd_prc ))
  {
  fn_userlog( c_ServiceName, "SELL ZERO ");
  fn_userlog( c_ServiceName, "FOR SELL CAL l_tot_pending_qty :%ld: l_lst_trd_prc :%ld: d_lmt_prc :%lf:",l_tot_pending_qty,l_lst_trd_prc,d_lmt_prc);
  c_sell_zero = 'Y';
  }

  if(DEBUG_MSG_LVL_3)
  {
  fn_userlog( c_ServiceName, "FOR SELL CAL l_tot_pending_qty :%ld: l_lst_trd_prc :%ld: d_lmt_prc :%lf:",l_tot_pending_qty,l_lst_trd_prc,d_lmt_prc);
  }
     EXEC SQL
      SELECT  NVL(LTQ_RT,0.0) * 100,  /*** NVL added in Ver 2.5 ***/
							NVL(LTQ_PREV_CLS_PRC,0.0) * 100  /*** Ver 2.5 ***/
      INTO    :d_spot,
							:d_prev_und_quote  /*** Ver 2.5 ***/
      FROM    LTQ_TRD_QT
      WHERE   LTQ_XCHNG_CD  = decode(:ptr_st_undfut_pos->c_xchng_cd,'BFO','BSE','NSE')
      AND     LTQ_STCK_CD   = :ptr_st_undfut_pos->c_undrlyng;

    if ( SQLCODE  !=  0 )
    {
      fn_errlog( c_ServiceName, "S31160",SQLMSG,c_err_msg);
      return ( -1 ) ;
    }
  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "SPOT :%lf:",d_spot);
  }

  d_lss_amt_sell = ((double)l_tot_pending_qty * (l_lst_trd_prc - l_lmt_rt) * -1);
  if(DEBUG_MSG_LVL_3)
  {
  fn_userlog( c_ServiceName, "FOR SELL CAL d_lss_amt_sell :%lf:",d_lss_amt_sell);
  fn_userlog( c_ServiceName, "FOR SELL CAL l_lot_sz :%ld: d_spn_per_lot :%lf: d_spot :%lf: d_expr_prcnt :%lf: d_sop_sebi_prcnt :%lf:",l_lot_sz,d_spn_per_lot,d_spot,d_expr_prcnt,d_sop_sebi_prcnt);
  }

  d_spn_mrgn = d_spn_per_lot * ((double)l_tot_pending_qty)/(double) l_lot_sz ;
  d_expr_mrgn = (double)l_tot_pending_qty * fn_maxd(d_spot,d_prev_und_quote) * d_expr_prcnt/100; /** Max with prev closing taken in Ver 2.5 **/
  d_xchng_amt = d_sop_sebi_prcnt/100 * (d_spn_mrgn + d_expr_mrgn) ;

  if(DEBUG_MSG_LVL_3)
  {
  fn_userlog( c_ServiceName, "FOR SELL CAL d_spn_mrgn :%lf: d_expr_mrgn :%lf: d_xchng_amt :%lf:",d_spn_mrgn,d_expr_mrgn,d_xchng_amt);
  }
  
  d_comp1_mrgn = d_mrgn_amt;
  if ( d_xchng_amt > (d_mrgn_amt + d_lss_amt_sell) ) /*** Taking Max component ***/
  {
        fn_userlog( c_ServiceName, "SELL : 1");
        d_lss_amt_sell = d_xchng_amt;
        d_mrgn_amt = 0.0;
   }
   else
   {
        fn_userlog( c_ServiceName, "SELL : 2");
        d_lss_amt_sell = (d_lss_amt_sell + d_mrgn_amt);
        d_mrgn_amt = 0.0;
   }
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, "d_act_diff :%lf:", d_act_diff);
    fn_userlog( c_ServiceName, "d_lmt_prc :%lf:", d_lmt_prc);
    fn_userlog( c_ServiceName, "d_mrg_amnt :%lf:", d_mrg_amnt);
    fn_userlog( c_ServiceName, "d_xchng_amt:%lf:", d_xchng_amt); 
  fn_userlog( c_ServiceName, "d_lss_amt :%lf: d_lss_amt_sell :%lf:",d_lss_amt,d_lss_amt_sell);
  }

  if( c_sell_zero == 'Y' )
  {
   d_lss_amt_sell = 0;
  }
  if( c_buy_zero == 'Y' )
  {
   d_lss_amt = 0;
  }
  *ptr_d_ord_mrgn_amt = d_lss_amt; 
  *ptr_d_ord_mrgn_amt_sell = d_lss_amt_sell; 

   return 0;
}

long fn_cal_price_optplus(char *c_ServiceName,long l_sltp_price,double d_limit_diff,int i_hilow,char * c_exg,int i_tick_sz)
{
  long l_price=0;
  double d_price= 0.0;


  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Inside fn_cal_price_optplus function");
    fn_userlog(c_ServiceName,"SLTP Price :%ld:",l_sltp_price);
    fn_userlog(c_ServiceName,"Exchng :%s:",c_exg);
    fn_userlog(c_ServiceName,"limit difference :d_limit_diff: :%lf:",d_limit_diff);
    fn_userlog(c_ServiceName,"Upper(1) Lower(2) :%d:",i_hilow);
    fn_userlog(c_ServiceName,"Tick size :%d:",i_tick_sz);
  }

  if(i_hilow == CAL_UPPER )
  {
    d_price = d_limit_diff + (double)l_sltp_price;

    l_price = (long) ceil(d_price);

    if(l_price %  i_tick_sz !=0)
    {
      l_price = l_price - (l_price % i_tick_sz - i_tick_sz);

      if(DEBUG_MSG_LVL_0) 
      {
        fn_userlog(c_ServiceName,"after tick - function final values l_price :%ld:",l_price);
      }

    }
  }
  else /** CAL_LOWER **/
  {
    d_price = (double) l_sltp_price - d_limit_diff;

    l_price = (long) floor(d_price);

    if(DEBUG_MSG_LVL_3) 
    {
      fn_userlog(c_ServiceName,"before tick - function l_price :%ld:",l_price);
    }

    if(l_price % i_tick_sz !=0)
    {
      l_price = l_price - (l_price % i_tick_sz);

      if(DEBUG_MSG_LVL_0) 
      {
        fn_userlog(c_ServiceName," after tick - function final values l_price :%ld:",l_price);
      }
    }
  }

  return l_price;

}



long fn_max(char *c_ServiceName, long l_limit_diff, long l_sltp_lmt_diff)
{
  if(DEBUG_MSG_LVL_3) 
  {
    fn_userlog(c_ServiceName,"Inside fn_max funtion");
  }

  long l_max_val = 0;

  if (l_limit_diff>= l_sltp_lmt_diff)

     l_max_val = l_limit_diff;

  else if (l_limit_diff < l_sltp_lmt_diff)

     l_max_val = l_sltp_lmt_diff;

  return l_max_val;
}

/**** ver 2.2 ends ****/
