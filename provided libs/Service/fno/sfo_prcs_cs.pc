/******************************************************************************/
/*	Program	    			:	SFO_PRCS_CS                                            */
/*                                                                            */
/*  Input             : FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_CNTRCT_TAG                                        */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_NEW_CNTRCT_TAG                                    */
/*                                                                            */
/*  Output            : Success / Failure                                     */
/*                                                                            */
/*  Description       : To process the records in contract split process      */
/*                      called by the batch program.                          */
/*                                                                            */
/*  Log               : Ver 1.1   AIX Migration(SKS)	-	19-Dec-2007           */
/*  Log               : Ver 1.2   Changes for Client lock	-	07-Mar-2023       */
/*                                                                            */
/******************************************************************************/
/*  03-Jan-2002     Ver 1.0        Vinod Banjan      Release 1.0              */
/*  07-Mar-2023     Ver 1.2        Samip M					 Changes for Client lock	*/
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fml_def.h>
#include <fo_view_def.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fo.h>
#include <fn_ddr.h>
#include <fn_log.h>             /*  Ver 1.1 : Added 	*/
#include <fn_session.h>         /*  Ver 1.1 : Added 	*/
#include <fn_read_debug_lvl.h>  /*  Ver 1.1 : Added   */

void SFO_PRCS_CS( TPSVCINFO *rqst )
{
  FBFR32 *ptr_fml_Ibuf;

  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
  int i_returncode;
  int i_ip_len;
  int i_op_len;
  int i_trnsctn;

  char c_tag [ 256 ];
  char c_msg [ 256 ];

  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_pstn_actn st_pstn_actn;
    varchar   c_trd_dt[LEN_DATE];
  EXEC SQL END DECLARE SECTION;

  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.1 : Added   */

  i_returncode = Fvftos32( ptr_fml_Ibuf,
                         ( char * )&st_pstn_actn,
                         "vw_pstn_actn" );

  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_pstn_actn.c_rout_crt );

  i_returncode = Fget32( ptr_fml_Ibuf, FFO_BAT_TAG, 0,
                                   (char *)c_tag, 0 );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.1 : Debug level Change  */
    fn_userlog( c_ServiceName, "Match Account :%s:",
                                  st_pstn_actn.c_cln_mtch_accnt );
    fn_userlog( c_ServiceName, "Exchange code :%s:",
                                  st_pstn_actn.c_xchng_cd );
    fn_userlog( c_ServiceName, "Product Type  :%c:",
                                  st_pstn_actn.c_prd_typ );
    fn_userlog( c_ServiceName, "Underlyng     :%s:",
                                  st_pstn_actn.c_undrlyng );
    fn_userlog( c_ServiceName, "Expiry date   :%s:",
                                  st_pstn_actn.c_expry_dt );
    fn_userlog( c_ServiceName, "Excercise Type:%c:",
                                  st_pstn_actn.c_exrc_typ );
    fn_userlog( c_ServiceName, "Category      :%c:",
                                 st_pstn_actn.c_ctgry_indstk );
    fn_userlog( c_ServiceName, "Contract tag  :%c:",
                                 st_pstn_actn.c_cntrct_tag );
    fn_userlog( c_ServiceName, "New Contract tag  :%c:",
                                 st_pstn_actn.c_new_cntrct_tag );
  }

  sprintf ( c_msg, "Processing match a/c - [%s], Underlying - [%s], Expiry dt - [%s], New Tag - [%c] ",
        st_pstn_actn.c_cln_mtch_accnt,
        st_pstn_actn.c_undrlyng,
        st_pstn_actn.c_expry_dt,
        st_pstn_actn.c_new_cntrct_tag );
  /*fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );*/

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	
	/** Commented and changed below for Ver 1.2 ***
  i_returncode = fn_lock_usr( c_ServiceName,
                              st_pstn_actn.c_cln_mtch_accnt );
	** Ver 1.1 **/

  i_returncode = fn_lock_fno( c_ServiceName,
                              st_pstn_actn.c_cln_mtch_accnt );
  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  strcpy(st_pstn_actn.c_user_id,"system");
  st_pstn_actn.l_session_id  = 0;
  st_pstn_actn.c_opt_typ = '*';
  st_pstn_actn.l_strike_prc  = 0;

  st_pstn_actn.l_actn_typ = CONTRACT_SPLIT;
  st_pstn_actn.c_trnsctn_flw = '*';
  st_pstn_actn.l_orgnl_qty = 0;
  st_pstn_actn.l_orgnl_rt  = 0;
  st_pstn_actn.l_new_qty = 0;
  st_pstn_actn.l_new_rt  = 0;
  st_pstn_actn.l_exec_qty  = 0;
  st_pstn_actn.l_exec_rt  = 0;
  st_pstn_actn.l_fresh_qty  = 0;
  st_pstn_actn.l_cover_qty  = 0;
  st_pstn_actn.d_add_mrgn_amt = 0;
	fn_cpy_ddr(st_pstn_actn.c_rout_crt);

  i_ip_len = sizeof ( struct vw_pstn_actn );
  i_op_len = sizeof ( struct vw_pstn_actn );

  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_pstn_actn,
                              &st_pstn_actn,
                              "vw_pstn_actn",
                              "vw_pstn_actn",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_FUT_POS" );

  if ( i_returncode == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  sprintf ( c_msg, "Succesfully Processed match a/c - [%s], Underlying - [%s], Expiry dt - [%s], New Tag - [%c] ",
        st_pstn_actn.c_cln_mtch_accnt,
        st_pstn_actn.c_undrlyng,
        st_pstn_actn.c_expry_dt,
        st_pstn_actn.c_new_cntrct_tag );
  /*fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );*/

  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Ibuf, 0 , 0 );
}
