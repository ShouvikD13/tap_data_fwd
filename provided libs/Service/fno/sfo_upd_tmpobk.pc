/******************************************************************************/
/*	Program	    			:	SFO_UPD_TMPOBK                                        */
/*                                                                            */
/*  Input             : vw_orderbook                                          */
/*                                                                            */
/*  Output            : vw_orderbook                                          */
/*                      vw_err_msg                                            */
/*                                                                            */
/*  Description       : To update the Temp Order Book based on the following  */
/*                      request:-                                             */
/*                      INSERT_ON_ORDER_PLACEMENT      'N'                    */
/*                      UPDATE_ORDER_MODIFICATION      'M'                    */
/*                      UPDATE_ORDER_CANCELATION       'C'                    */
/*                                                                            */
/*  Log               : 1.0   29-May-2002   Vinod Banjan                      */
/*  Log               : 1.1   29-Feb-2008   Vidyayini Krish                   */
/*                                                                            */
/******************************************************************************/
/*  1.0  -  New release                                                       */
/*  1.1  -  Bp release                                                        */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <sqlca.h>
#include <fml32.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_read_debug_lvl.h> /* Ver 1.1 */

void SFO_UPD_TMPOBK( TPSVCINFO *rqst )
{
	char c_ServiceName[ 33];
	char c_errmsg[256];
	char c_msg[256];
	int i_trnsctn=0;

	EXEC SQL BEGIN DECLARE SECTION;
		struct vw_orderbook *ptr_st_orderbook;
		varchar c_alias[9];
	EXEC SQL END DECLARE SECTION;

	struct vw_err_msg *ptr_st_err_msg;

	ptr_st_orderbook = ( struct vw_orderbook *)rqst->data;
	strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);

	ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
	if ( ptr_st_err_msg ==  NULL )
	{
		fn_errlog ( c_ServiceName, "S31005", TPMSG, c_errmsg );
		tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
	}

	memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

if(DEBUG_MSG_LVL_3){
  fn_userlog ( c_ServiceName,"c_oprn_typ:%c:", ptr_st_orderbook->c_oprn_typ );
  fn_userlog ( c_ServiceName,"c_undrlyng:%s:", ptr_st_orderbook->c_undrlyng );
}
  fn_userlog ( c_ServiceName,"clm_mtch_accnt:%s:", ptr_st_orderbook->c_cln_mtch_accnt );
  fn_userlog ( c_ServiceName,"clm_bp_id:%s:", ptr_st_orderbook->c_bp_id );

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_orderbook->c_rout_crt );
			
				EXEC SQL
        SELECT nvl(clm_alias_name,'*')
        INTO   :c_alias
        FROM   clm_clnt_mstr
        WHERE  clm_mtch_accnt = :ptr_st_orderbook->c_cln_mtch_accnt
        AND    nvl(clm_bp_id,'*')      = :ptr_st_orderbook->c_bp_id;
		if ( SQLCODE != 0 )
  	{
    	fn_errlog ( c_ServiceName, "S31010", SQLMSG, ptr_st_err_msg->c_err_msg );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  	}
	
		SETNULL(c_alias);
		fn_userlog(c_ServiceName,"c_alias is :%s:",c_alias);


	i_trnsctn = fn_begintran( c_ServiceName, c_errmsg );

	if ( i_trnsctn == -1 )
	{
		strcpy( ptr_st_err_msg->c_err_msg, c_errmsg );
		tpreturn ( TPFAIL, ERR_BFR,  ( char * )ptr_st_err_msg, 0, 0 );
	}

	switch( ptr_st_orderbook->c_oprn_typ )
	{
		case	INSERT_ON_ORDER_PLACEMENT:

			EXEC SQL
				INSERT INTO fto_fo_tmp_ord_dtls
				(
					fto_clm_mtch_accnt,
					fto_tmp_ordr_rfrnc,
					fto_xchng_cd,
					fto_prdct_typ,
					fto_undrlyng,
					fto_expry_dt,
					fto_exer_typ,
					fto_opt_typ,
					fto_strk_prc,
					fto_ordr_flw,
					fto_lmt_mrkt_sl_flg,
					fto_dsclsd_qty,
					fto_ordr_tot_qty,
					fto_lmt_rt,
					fto_stp_lss_tgr,
					fto_ordr_type,
					fto_ordr_valid_dt,
					fto_trd_dt,
					fto_ordr_stts,
					fto_mdfctn_cntr,
					fto_settlor,
					fto_spl_flag,
					fto_indstk,
					fto_rqst_tm,
					fto_rms_prcsd_flg,
					fto_channel,
					fto_bp_id,
					fto_alias
				)
				VALUES
				(
					:ptr_st_orderbook->c_cln_mtch_accnt,
					:ptr_st_orderbook->c_sprd_ord_rfrnc,
					:ptr_st_orderbook->c_xchng_cd,
					:ptr_st_orderbook->c_prd_typ,
					:ptr_st_orderbook->c_undrlyng,
					to_date( :ptr_st_orderbook->c_expry_dt, 'dd-mon-yyyy' ),
					:ptr_st_orderbook->c_exrc_typ,
					:ptr_st_orderbook->c_opt_typ,
					:ptr_st_orderbook->l_strike_prc,
					:ptr_st_orderbook->c_ordr_flw,
					:ptr_st_orderbook->c_slm_flg,
					:ptr_st_orderbook->l_dsclsd_qty,
					:ptr_st_orderbook->l_ord_tot_qty,
					:ptr_st_orderbook->l_ord_lmt_rt,
					:ptr_st_orderbook->l_stp_lss_tgr,
					:ptr_st_orderbook->c_ord_typ,
					to_date( :ptr_st_orderbook->c_valid_dt,'dd-mon-yyyy' ),
					to_date( :ptr_st_orderbook->c_trd_dt,'dd-mon-yyyy' ),
					:ptr_st_orderbook->c_ordr_stts,
					:ptr_st_orderbook->l_mdfctn_cntr,
					:ptr_st_orderbook->c_settlor,
					:ptr_st_orderbook->c_spl_flg,
					:ptr_st_orderbook->c_ctgry_indstk,
					to_date (:ptr_st_orderbook->c_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),
					:ptr_st_orderbook->c_req_typ,
					:ptr_st_orderbook->c_channel ,
					:ptr_st_orderbook->c_bp_id,
					:c_alias
				);
			break;

		case	UPDATE_ORDER_MODIFICATION:
			EXEC SQL
				UPDATE	fto_fo_tmp_ord_dtls
				SET			fto_lmt_mrkt_sl_flg = :ptr_st_orderbook->c_slm_flg,
								fto_dsclsd_qty      = :ptr_st_orderbook->l_dsclsd_qty,
								fto_ordr_type				=	:ptr_st_orderbook->c_ord_typ,
								fto_stp_lss_tgr			=	:ptr_st_orderbook->l_stp_lss_tgr,
								fto_ordr_tot_qty		=	:ptr_st_orderbook->l_ord_tot_qty,
								fto_lmt_rt					=	:ptr_st_orderbook->l_ord_lmt_rt,
								fto_ordr_valid_dt   = to_date (:ptr_st_orderbook->c_valid_dt,
                                               'dd-mon-yyyy' ),
								fto_mdfctn_cntr     = :ptr_st_orderbook->l_mdfctn_cntr,
								fto_rqst_tm = to_date (:ptr_st_orderbook->c_ack_tm,
                                               'dd-mon-yyyy hh24:mi:ss')
				WHERE		fto_tmp_ordr_rfrnc	=	:ptr_st_orderbook->c_sprd_ord_rfrnc;
			break;

		case	UPDATE_ORDER_CANCELATION:
			EXEC SQL
				UPDATE	fto_fo_tmp_ord_dtls
				SET			fto_ordr_stts 			= :ptr_st_orderbook->c_ordr_stts,
								fto_mdfctn_cntr     = :ptr_st_orderbook->l_mdfctn_cntr,
								fto_rqst_tm = to_date (:ptr_st_orderbook->c_ack_tm,
                                               'dd-mon-yyyy hh24:mi:ss')
				WHERE		fto_tmp_ordr_rfrnc	=	:ptr_st_orderbook->c_sprd_ord_rfrnc;
			break;

		default:
			strcpy( ptr_st_err_msg->c_err_msg, "Invalid Operation Type" );
    	fn_errlog ( c_ServiceName, "S31015", DEFMSG, ptr_st_err_msg->c_err_msg );
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
			break;
	}
	if ( SQLCODE != 0 ) 
  {
    fn_errlog ( c_ServiceName, "S31020", SQLMSG, ptr_st_err_msg->c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

	if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 )
	{
		strcpy( ptr_st_err_msg->c_err_msg, c_errmsg );
		tpreturn ( TPFAIL, ERR_BFR,  ( char * )ptr_st_err_msg, 0, 0 );
	}
	tpfree ( ( char * ) ptr_st_err_msg );
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_orderbook, 
                                  sizeof( struct vw_orderbook ), 0 );
}
