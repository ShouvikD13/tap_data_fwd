/*******************************************************************************/
/*	Program	    			:	SFO_FUT_PLC_ORD                                       */
/*                                                                            */
/*  Input             : FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_CHANNEL                                           */
/*                      FFO_ALIAS                                             */
/*                      FFO_EBA_MTCH_ACT_NO																		*/
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_ORDR_FLW                                          */
/*                      FFO_LMT_MKT_SL_FLG                                    */
/*                      FFO_ORD_TYP                                           */
/*                      FFO_DSCLSD_QTY                                        */
/*                      FFO_STP_LSS_TGR                                       */
/*                      FFO_ORD_TOT_QTY                                       */
/*                      FFO_LMT_RT                                            */
/*                      FFO_PIPE_ID                                           */
/*                      FFO_SPL_FLG                                           */
/*                                                                            */
/*  Optional          : FFO_SPRD_ORD_IND                                      */
/*                      FFO_ORD_SEQ                                           */
/*                      FFO_SEQ_NUM                                           */
/*                      FFO_SPRD_ORD_REF                                      */
/*                      FFO_SETTLOR                                           */
/*                      FFO_ORDR_VALID_DT                                     */
/*                      FFO_TRD_PSSWD                                         */
/*                                                                            */
/*  Output            : FFO_ORDR_RFRNC                                        */
/*                      FFO_PIPE_ID                                           */
/*                      FFO_CANCL_QTY                                         */
/*                      FFO_CHANNEL                                           */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_DSCLSD_QTY                                        */
/*                      FFO_EXEC_QTY                                          */ 
/*                      FFO_EXER_TYP                                          */
/*                      FFO_EXPRD_QTY                                         */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_LMT_MKT_SL_FLG                                    */
/*                      FFO_LMT_RT                                            */
/*                      FFO_C_OPNPSTN_QTY                                     */
/*                      FFO_ACK_NMBR                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_ORD_TOT_QTY                                       */
/*                      FFO_ORD_TYP                                           */
/*                      FFO_ORD_VALID_DT                                      */
/*                      FFO_ORDR_FLW                                          */
/*                      FFO_ORDR_STTS                                         */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_SPL_FLG                                           */
/*                      FFO_STP_LSS_TGR                                       */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_TRD_DT                                            */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_XCHNG_CD                                          */
/*                                                                            */
/*  Description       : To place a fresh Futures order or a futures order     */
/*                      forming part of a spread order.                       */
/*                                                                            */
/*  Log               : 1.0   13-Oct-2001   P.Senthil Kumar                   */
/*  Log               : 1.1   11-Jul-2002   Infotech|Sangeet                  */
/*  Log               : 1.2   17-Sep-2002   Infotech|Sangeet                  */
/*  Log               : 1.3   19-Nov-2002   Infotech|Sangeet                  */
/*  Log               : 1.4   20-Jan-2003   Infotech|Sonali                   */
/*  Log               : 1.5   16-Jun-2003   Infotech|Sangeet                  */
/*  Log               : 1.6   29-Jul-2004   Infotech|Sangeet                  */
/*  Log               : 1.7   24-Sep-2004   Infotech|Sangeet                  */
/*  Log               : 1.8   04-Oct-2005   Infotech|Jagapathi                */
/*  Log 					    : 1.9   21-Sep-2006   Infotech|Shailesh                 */                 
/*  Log 					    : 2.0   28-Oct-2006   Infotech|Abhishek									*/                 
/*  Log               : 2.1   17-Apr-2007   Infotech|Shailesh                 */
/*  Log               : 2.2   08-Jan-2007   Infotech|Vikash / Sushil          */
/*  Log               : 2.3   14-Dec-2007   Infotech|Vidyayini Krish          */
/*  Log               : 2.4   11-Mar-2008   Infotech|Shamili                  */
/*  Log               : 2.6   07-Nov-2008   Infotech|Shailesh                 */
/*  Log               : 2.7   30-Dec-2008   Infotech|Shailesh                 */
/*  Log               : 2.8   02-Jan-2009   Infotech|Shailesh & Prakash       */
/*  Log               : 2.9   12-Mar-2009   Infotech|Vidyayini Krish					*/
/*  Log               : 3.0   07-Sep-2009   Infotech|Vidyayini Krish					*/
/*  Log               : 3.1   15-Sep-2009   Infotech|Sangeet									*/
/*  Log               : 3.2   10-Aug-2010   Infotech|Shailesh									*/
/*	Log								:	3.3		16-Nov-2010		Infotech|Sandeep									*/
/*	Log								:	3.4		24-Nov-2010		Infotech|Sandeep									*/
/*	Log								:	3.5		04-Aug-2011		Infotech|Sandeep									*/
/*  Log               : 3.6   30-Aug-2011   Infotech|Sachin                   */
/*  Log               : 3.7   16-Nov-2011   Infotech|Navina D.                */
/*	Log								:	3.8		22-Dec-2011		Infotech|Sandeep									*/
/*  Log               : 3.9   11-Oct-2011   Infotech|Sandeep                  */
/*  Log               : 4.0   20-Jan-2012   Infotech|Navina D.  							*/
/*  Log               : 4.1   02-Jul-2012   Infotech|Mahesh                   */
/*  Log               : 4.2   03-Jul-2012   Infotech|Navina D.  							*/
/*	Log								: 4.3		19-Oct-2012		Infotech|Bhushan S								*/
/*  Log               : 4.4   09-Nov-2012		Infotech|Vishnu                   */
/*  Log								:	4.5		22-oct-2012		Infotech|Vishnu										*/ 
/*  Log								:	4.6		07-Nov-2012		Infotech|Swati 										*/ 
/*  Log								:	4.7		07-Nov-2012		Infotech|Vishnu 									*/ 
/*  Log               : 4.8   20-Dec-2012   Infotech|Mahesh                   */
/*  Log               : 4.9   28-Jan-2013   Infotech|Swati A.B                */
/*  Log               : 5.0   30-Jan-2013   Infotech|Shamili D.               */
/*  Log               : 5.1   04-Feb-2013   Infotech|Navina                   */
/*  Log               : 5.2   13-Feb-2013   Infotech|Swati A.B								*/
/*  Log               : 5.3   23-Apr-2013   Infotech|Bhushan S                */
/*  Log               : 5.5   27-May-2013   Infotech|Bhushan S                */
/*  Log               : 5.6   13-May-2013   Infotech|Samip M                  */
/*  Log               : 5.7   03-Jun-2013   Infotech|Bhushan S                */
/*  log               : 5.8   02-Jul-2013   Infotech|Swati A.B                */
/*  Log               : 5.9   04-Jul-2013   Infotech|Sandeep                  */
/*  Log               : 6.0   12-Jul-2013   Infotech|Navina D.                */
/*  Log               : 6.1   30-Jul-2013   Infotech|Navina D.                */
/*  Log               : 6.2   04-Dec-2013   Infotech|Navina D.                */
/*  Log               : 6.3   06-Nov-2013   Infotech|Swati A.B                */
/*  Log               : 6.4   02-Dec-2013   Infotech|Sachin Birje             */
/*  Log               : 6.6   24-Dec-2013   Infotech|Bhushan Sonwane          */
/*  Log               : 6.7   24-Dec-2013   Infotech|Bhushan Sonwane          */
/*  Log               : 6.8   01-Jan-2014   Infotech|Bhushan Sonwane          */
/*  Log               : 7.0   21-Jan-2014   Infotech|Bhushan Sonwane          */
/*  Log               : 7.1   31-Jan-2014   Infotech|Sachin Birje             */
/*  Log               : 7.2   22-Jan-2014   Infotech|Vishnu N.                */
/*  Log               : 7.3		13-Feb-2014   Infotech|Bhushan Sonwane          */
/*  Log               : 7.4   02-Apr-2014   Infotech|Shailesh S.              */
/*  Log               : 7.5   17-Apr-2014   Infotech|Vishnu N.                */
/*  Log               : 7.6   21-May-2014   Infotech|Swati A.B                */
/*  log               : 7.7   10-Jun-2014   Infotech|Navina D.                */
/*  Log               : 7.8   30-May-2014   Infotech|Sachin B.                */
/*  Log               : 7.9   17-Jun-2014   Infotech|Vishnu Nair              */
/*  Log               : 8.0   01-Aug-2014   Infotech|Vishnu Nair|Sachin       */
/*  Log               : 8.1   27-Nov-2014   Infotech|Ritesh D                 */
/*  Log               : 8.2   29-Jan-2015   Infotech|Anand Dhopte             */
/*  Log               : 8.3   24-Feb-2015   Infotech|Anand Dhopte             */
/*  Log               : 8.6   04-Aug-2015   Infotech|Samip M                  */
/*  Log               : 8.5   30-Jul-2015   Infotech|Kishor Borkar            */ 
/*  Log               : 8.7   12-Aug-2015   Infotech|Anand Dhopte             */
/*  Log               : 9.0   23-Oct-2015   Infotech|Navina D                 */
/*  Log               : 9.1   06-Jan-2015   Infotech|Anand Dhopte             */
/*  Log               : 9.2   28-Jan-2016   Infotech|Tanmay Warkhade          */
/*  Log               : 9.3   22-Feb-2016   infotech|Anand Dhopte             */
/*  Log               : 9.4   26-Feb-2016   infotech|Kishor Borkar            */
/*  Log               : 9.5   10-Mar-2016   infotech|Kishor Borkar            */
/*  Log               : 9.6   14-Jun-2016   infotech|Bhupendra Malik          */
/*  Log               : 9.7   04-Aug-2016   infotech|Tanmay Warkhade          */
/*	Log								:	9.8		26-Aug-2016		infotech|Kishor Borkar						*/
/*  Log               : 9.9   29-Aug-2016   infotech|Vishal Borhade           */
/*  Log               : 10.0  05-Dec-2016   infotech|Kishor Borkar            */
/*  Log               : 10.1  10-Jan-2016   Infotech|Anand Dhopte             */
/*  Log               : 10.2  14-Jun-2017   Infotech|Bhupendra Malik          */
/*  Log     					: 10.3  06-Nov-2017   Infotech|Afzal K.		              */
/*  Log               : 10.4  10-Nov-2017   infotech|Kishor Borkar/Mrinal     */
/*	Log								: 10.5	03-May-2018		Infotech|Parag Kanojia						*/
/*	Log								:	10.6	06-Jul-2018		Infotech|Parag Kanojia						*/
/*  Log               : 10.7  11-Jul-2018   Infotech|Tanmay Patel             */
/*  Log               : 10.8  07-Mar-2018   Infotech|Parag Kanojia            */
/*  Log               : 10.9  26-Jul-2018   Infotech|Suchita Dabir            */
/*  Log               : 11.0  03-Sep-2018 	Infotech|Suchita Dabir            */
/*  Log               : 11.1  09-May-2019 	Infotech|Parag Kanojia            */
/*  Log               : 11.2  06-Jun-2019   Infotech|Tanmay Patel             */
/*  Log               : 11.3  24-Oct-2019   Infotech|Tanmay Patel             */
/*  Log               : 11.4  11-Nov-2019   Infotech|Anand Dhopte             */
/*  Log               : 11.5  26-Nov-2019   Infotech|Navina D.                */
/*  Log               : 11.6  02-Mar-2020   Infotech|Navina D.                */
/*  Log               : 11.7  12-Jun-2020   Infotech|Navina D.                */
/*	Log								: 11.8	02-Feb-2021		Infotech|Kiran Itkar							*/
/*	Log								: 11.9	01-Mar-2021		Infotech|Sachin Birje						  */
/*	Log								: 12.0	17-May-2021		Infotech|Sandip Tambe 						*/
/*  Log               : 12.1  29-May-2021   Infotech|Akash B                  */
/*  Log               : 12.2  13-Jul-2021   Infotech|Kiran Itkar              */
/*  Log               : 12.3  20-Oct-2021   Infotech|Shlok Ghan               */
/*	Log							  : 12.4  14-Nov-2022		Infotech|Suchita Dabir	  				*/ 
/*	Log								:	12.5	14-Feb-2022		Infotech|Shlok Ghan								*/
/*	Log								:	12.6	28-Arp-2022   Infotech|Sachin Birje             */
/*	Log								: 12.7  03-Jun-2022		infotech|Shlok Ghan								*/
/*  Log               : 12.8  09-Jun-2022   Infotech|Roshni Pawar             */
/*  log               : 12.9  27-Jun-2022   Infotech|Naveena R , Ravi M       */
/*  log               : 13.0  24-Aug-2022   Infotech|Naveena R                */
/*  log               : 13.1  09-Sep-2022   Infotech|Ravi M                		*/
/*  log               : 13.2  14-Sep-2022   Infotech|Bhavana                  */
/*  log               : 13.3  16-Sep-2022   Infotech|Ravi M										*/
/*  log               : 13.4  04-Nov-2022   Infotech|Mahesh shinde						*/
/*  log               : 13.5  23-Nov-2022   Infotech|Ravi M 									*/
/*  log               : 13.6  06-Dec-2022   Infotech|Ravi M 									*/
/*  log               : 13.7  07-Mar-2023   Infotech|Vipul Sharma             */
/*  log               : 13.8  22-Feb-2023   Ankita Satav                      */
/*  log    						: 13.9  30-Mar-2023   Infotech|Bhavana                  */
/*  Log               : TOL   07-Aug-2023   Agam                              */
/******************************************************************************/
/*  1.0  -  New release                                                       */
/*  1.1  -  For the implementation of BP                                      */
/*  1.2  -  To Restricted Market Orders by ops IT                             */
/*  1.3  -  DT changes																												*/
/*  1.4  -  CR1038 To identify orders placed thro Superuser                   */
/*  1.5  -  To block the square off orders not having proper positions.				*/
/*  1.6  -  To disable the GTD orders																					*/
/*  1.7  -  New locking logic for placement																		*/
/*  1.8  -  Get/Store  the DBC users ctcl id            											*/
/*  1.9  -  Order Flow NULL handling                                          */      
/*  2.0  -  Exchange check for corporate action orders using 									*/
/*					c_xchng_rmrks field from vw_xchngbook															*/      
/*  2.1  -  Broker status check for NNF 803                                   */
/*  2.2  -  DLrevamp Changes for Adding SLTP checks and Trading details check */
/*          Returning the Order Details if the Channel is APP or VSAT         */
/*          Passing user_id only when DL allowed                              */
/*  2.3  -  IBM Changes                                                       */
/*	2.4	 -  FuturePlus																												*/
/*	2.5	 -  FuturePlus Err Handling Change																		*/
/*  2.6  -  Trading Limit Password check introduced                           */
/*  2.7  -  FuturePlus error-return bug fixed																	*/
/*  2.8  -  NNF Changes For Extended Market Hours                             */
/*  2.9  -  CRCNT22353 addition for cse id																		*/
/*  3.0  -  CRCON31530 Freeze check																						*/
/*  3.1  -  Blocking SLM Flag and Order Typ null bug													*/
/*  3.2  -  Blocking Index Stk Type null bug																	*/
/*	3.3	 -	BP ID Changes- 																						       	*/
/*	3.4	 -	Silver Light Changes	For Action ID and Fut SQR Off -             */ 
/*          check open position																					      */
/*	3.5  -  User ID Changes																										*/		
/*  3.6  -  Global Indices Changes CR-ISEC14-18343                            */
/*  3.7  -  DBC user - Incorrect nick name handling                           */
/*	3.8	 -	Channel Bug Fix																										*/
/*  3.9  -  SPAN Changes                                                      */
/*  4.0  -  BSE ORS changes                                                   */
/*  4.1  -  Span TNC flag handling                                            */
/*  4.2  -  Storing ip address in Exchange book                               */
/* 	4.3	 -	Disable FuturePlus for BSE																				*/	
/*	4.4	 -	Disabling Futplus and BSE Derivative  for  NRI customers          */
/*	4.5	 -  ROLLOVER changes																									*/
/*	4.6	 -  CR-Overnight Orders changes																				*/
/*	4.7  -  Changes for SLTP Future Plus                                      */
/*  4.8  -  Broker closeout changes                                           */
/*  4.9  -  Consolidated Order Validation changes                             */
/*  5.0  -  Price band relaxation changes 																		*/
/*  5.1  -  SPAN FuturePLUS changes                                           */
/*  5.2  -  Removal of Limit Alloc/Dealloc in Corp Action Changes 						*/
/*  5.3  -  System Place Order Changes for DL.NET                             */
/*  5.5  -  Restrict DBC mapped customer to place order if CLM_TRD_FLG = 'N'  */
/*  5.6  -  Modify Allocation changes                                         */
/*  5.7  -  Condition added for CNT Channel (DL .NET Super User)              */
/*  5.8  -  Changes in Error code handlingof function contract check  for     */
/*       -  Modification of orders under BAN period                           */
/*  5.9  -  Channel Handling Introduced for New Trade Racer                   */
/*  6.0  -  FuturePLUS SLTP product type validation.                          */
/*  6.1  -  CR-ISEC14-40339 FP SLTP Excess qty offline upload                 */
/*  6.2  -  Skip contract enable disable check while placing squareoff order  */
/*  6.3  -   FNO limit Logging (Swati A.B)                                   	*/
/*  6.4  -  VTC Order Placement (Sachin Birje)                                */
/*  6.6  -  Changes For SPAN FuturePlus in LBS                                */
/*  6.7  -  Changes For SPAN FuturePlus in IPhone                             */
/*  6.8  -  Changes For SPAN FuturePlus in SilverLight, WINDOWS Mobile        */
/*          and Windows 8																											*/
/*  7.0  -  Contract Note Changes(handlig of IMTM_SYS_SQUAREOFF,              */
/*          LMTNEG_SYS_SQUAREOFF flag )                                       */
/*  7.1  -  FNO BSE Ack number Change                                         */
/*  7.2  -  Allowing Super user to place Future Plus order and                */
/*          Index/Stock check commented                                       */
/*  7.3  -  Enabling FP and SLTP FP for NRI clients 						              */
/*  7.4  -  Changes For SPAN FuturePlus in android                            */
/*  7.5  -  Service call to SFO_GET_QT commented and function introduced      */
/*  7.6  -  Enabling SPAN futurePLUS in DL .net                               */
/*  7.7  -  Exception EOS for SLTP Futureplus                                 */
/*  7.8  -  FNO Common TNC Changes                                            */
/*  7.9  -  Multiple DB Hits to CLM_CLNT_MSTR reduced by fetching all         */
/*          required details into single DB hit.                              */
/*  8.0  -  FNO Auto MTM Changes                                              */
/*  8.1  -  Channel WEH added for HTML5                                       */
/*  8.2  -  Insufficient Limits - Modify Allocation changes for DL .Net       */
/*  8.3  -  character array c_sys_msg size changed from 4 to 11(Live Bug Fix) */
/*  8.5  -  Limit order check for SLTP Future Plus                            */
/*  8.6  -  Include changes for Insider trading check                         */
/*  8.7  -  Contract Master and Trade Quote Table Merger Changes              */
/*  9.0  -  SLTP FuturePlus to Futures conversion                             */
/*  9.1  -  IDirect Lite Channel Changes                                      */
/*  9.2  -  Migration of RI to NRI                                            */
/*  9.3  -  Live Bug Fix                                                      */
/*  9.4  -  Cloud Order Changes                                               */
/*  9.5  -  Transaction Flag in Check Session IP                              */
/*  9.6  -  Log Maintainance                                                  */
/*  9.7  -  MYEOS changes                                                     */
/*	9.8	 -	Future Trail 																											*/
/*  9.9  -  Remove the Check of max order value for orders placed in          */
/*          Corporate action and Offline order upload process.                */
/*  10.0 -  Transaction through IP for SLTP Futureplus                        */
/*  10.1 -  Channel check for SPAN FuturePLUS commented                       */
/*  10.2 -  Nickname issue fix for dbc customer for quick exit                */
/*  10.3 -  Hard Parsing reduction changes																		*/
/*  10.4 -  Optimization                                                      */
/*	10.5 -	NNF_CHANGES_7.21(PAN CHANGES)																			*/
/*	10.6 -	Physical Settlement of Stock Derivative Changes										*/
/*  10.7 -  Disallow clients with outstanding form taking fresh exposure      */
/*  10.8 -  Rollover With Spread Changes                                      */
/*  10.9 -  Handing deadlock for EOS,Quick exit,sltp cover placement          */
/*  11.0 -  Physical Settlement of Stock Derivative Changes phase 2 changes		*/
/*  11.1 -  EOS enhancements for Physical settlement in F&O	Changes						*/
/*  11.2 -  Handling checks of sqroffmode for offline order                   */
/*  11.3 -  Ipv6 Format                                                       */
/*  11.4 -  CR-ISEC18-127640 Sub-broker dual order placement changes          */
/*  11.5 -  Sensibull Integration  (Navina D.)																*/
/*  11.6 -  FPSL margin change CR-ISEC14-133200   - Navina D.                 */
/*  11.7 -  Removal of SOVL for FPSL   - Navina D.                            */
/*	11.8 -	Separate EOS for Stock and Index Underlyings in FPSL							*/
/*  11.9 -  Minor Changes: Multileg Order Single Pipe ID                      */
/*  12.0 -  Derivative_trd_restrict_CR_ISEC04_152948                          */
/*  12.1 -  FNO UCC Changes - Akash B                                         */
/*  12.2 -  Physical settlement in Stock derivatives                          */
/*  12.3 -  1Click Derivative - Shlok Ghan                                    */
/*  12.4 -  Profit Order - Suchita Dabir                                      */
/*	12.5 -	CR-ISEC14-165712 Enhancements to Physical settlement Stocks disable contracts and EOS for Options Buy - Shlok Ghan */
/*  12.6 -  CR-ISEC14-169739 -Introduction of Algorithm Trading Strategies- Sachin Birje*/
/*	12.7 -	Minor Change 																											*/
/*  12.8 -  CR-ISEC14-163069 Disable market order placement for illiquid options contracts under F&O segment */	
/*  12.9 -  Flash Trade                                                       */
/*  13.0  - CR-ISEC14-175042 Pending order value check for Span Customers   */
/*  13.1	- Flash Trade Validations																						*/
/*  13.2  - CR-ISEC18-175354_ Unique Device Identifiers                       */
/*  13.3  - Flash Trade Validations - Future prd popup				*/
/*  13.4  - CR-ISEC14-175042 Pending order value check bug fix						    */
/*  13.5  - Flash Spira change to change 5 mins to 15mins						    			*/
/*  13.6  - Minor changes - Changing default customer consent as "Yes"				*/
/*  13.7  - Changing fn_lock_usr to fn_lock_fno																*/
/*  13.8  - Flash Trade in F&O Segment,Till Expiry Spira Changes              */
/*  13.9  - Real-time margin reporting regulatory changes   									*/
/*  TOL   - Tux on Linux                                    									*/
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <eba_to_ors.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_log.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_val_ord.h> /* Ver 2.3 */
#include <fn_session.h> /* Ver 2.3 */
#define	FAILED 'Y'
#include <fml_rout.h> /* Ver 2.3 */
#include <fn_read_debug_lvl.h> /* Ver 2.3 */
#include <fn_pos.h>		/* Ver 4.2 */
#include <fo_get_records.h> /* Ver 7.5 */

EXEC SQL INCLUDE "table/fum_fo_undrlyng_mstr.h"; /* Ver 3.0 */

int fn_check_inp_fut( char *c_ServiceName,
                  struct vw_xchngbook *ptr_st_xchngbook, 
                  struct vw_cntrct_qt *ptr_st_cntrct_qt, 
                  char c_fum_mrkt_typ,                 /* Ver 2.8 */
                  char c_fcm_mrkt_typ,                 /* Ver 2.8 */
                  int i_rollover_ord_ind,              /* Ver 10.8 */
                  char *c_spd_expry_dt1,               /* Ver 10.8 */
                  char *c_spd_expry_dt2,               /* Ver 10.8 */
                  struct vw_err_msg *ptr_st_err_msg );

int fn_check_ord_fut( char *c_ServiceName,
                  struct vw_cntrt_gen_inf *ptr_st_cntrt_gen_inf, 
                  struct vw_xchngbook *ptr_st_xchngbook, 
                  struct vw_orderbook *ptr_st_ordbook, 
                  struct vw_err_msg *ptr_st_err_msg ) ;

int fn_get_trdng_dtls(  char *user_id, 
												char *mtch_accnt,
											  char *trd_flag,
												char *prod_code );  /* Ver 2.3 */

int fn_chk_cntrctfp(char * c_ServiceName,
                  struct vw_contract *ptr_st_cntrct,
                  char *c_fum_mrkt_typ,                 /* Ver 2.8 */
                  char *c_fcm_mrkt_typ,                 /* Ver 2.8 */
                  struct vw_err_msg *ptr_st_err_msg );  /* Ver 2.4 */


int fn_chk_cntrct_fp_sqoff(char * c_ServiceName,
                        struct vw_contract *ptr_st_cntrct,
                        char *c_fum_mrkt_typ,                 /* Ver 2.8 */
                        char *c_fcm_mrkt_typ,                 /* Ver 2.8 */
                        struct vw_err_msg *ptr_st_err_msg );   /* Ver 2.4*/

int fn_chk_cntrct_sltpfp_sqoff(char * c_ServiceName,
                              struct vw_contract *ptr_st_cntrct,
                              char *c_fum_mrkt_typ,
                              char *c_fcm_mrkt_typ,
                              struct vw_err_msg *ptr_st_err_msg );   /*** Ver 4.7 ***/

int fn_eos_sltpfp ( char  *c_ServiceName,
                    char  *c_cover_ord_ref,
                    struct vw_orderbook *ptr_st_ordbook,
                    struct vw_err_msg *ptr_st_err_msg
                   );                                         /*** Ver 4.7 ***/

int fn_cover_sltpfp ( char  *c_ServiceName,
                    char  *c_cover_ord_ref,
                    struct vw_orderbook *ptr_st_ordbook,
                    struct vw_pstn_actn *ptr_st_pstn_actn,
                    struct vw_err_msg *ptr_st_err_msg
                   );                                         /*** Ver 4.7 ***/

int fn_off_sltpfp ( char  *c_ServiceName,
                    char  *c_fresh_ord_ref,
                    struct vw_orderbook *ptr_st_ordbook,
                    struct vw_err_msg *ptr_st_err_msg
                   );                                         /*** Ver 6.1 ***/

int fn_ins_ordrbook ( char  *c_ServiceName,                   /***  Ver 3.4 ***/
											char  *c_user_id,
                      char   c_span_flag,                     /*** Ver 7.9 ***/
											char   c_source_flg,										/*** Ver 9.4 ***/
											char c_prcimpv_ordrbk_flg,	            /*** Ver 9.8 ***/	
		      						long l_trail_ordrbk_amt,		            /*** Ver 9.8 ***/	
		      						long l_ordrbk_lmt_offset,		            /*** Ver 9.8 ***/	
											char *c_pan_no,												/*** Added In Ver 10.5 ***/
                      char c_settlement_flg,                /*** ver 11.0 ***/
											char *c_ven_id,											  /*** ver 11.5 ***/
                      char *c_algo_id,               /*** Ver 12.6 **/
                      char *c_algo_ord_rmrks,        /*** Ver 12.6 **/ 
                      long l_sqroff_tm, /* Ver 12.9 */
                      char c_fc_flg,    /* Ver 12.9 */
                      struct vw_orderbook *ptr_st_ordbook,
                      struct vw_err_msg *ptr_st_err_msg,
                      char c_1clk_flg,              /** Ver 12.3 **/
                      char *c_1clk_prtflio_id       /** Ver 12.3  **/
                    );

void fn_round2(double*);  /** Ver 4.7 */
void fn_avg_price(long *, long *,  double *,int);  /** Ver 4.7 */

/*** Ver 7.7 starts ***/
int fn_excpt_eos_fppls ( char  *c_ServiceName,												
													char  *c_cover_ord_ref,
													struct vw_orderbook *ptr_st_ordbook,
													struct vw_err_msg *ptr_st_err_msg
												);     
/*** Ver 7.7 ends ***/

int fn_get_quote_zero ( char *c_ServiceName, char c_ord_flw, long l_best_bid_price, long l_best_offer_price, long l_previous_close_price, long *l_quote_zero);		/*** Added in Ver 11.1 ***/

void SFO_FUT_PLC_ORD( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Obuf;

	char c_ServiceName[33];
	char c_usm_sup_usr_typ;
	char c_channel[4];/*1.1 BP*/
	char c_alias[9];/*1.1 BP*/
  char c_bp_id[9];/*1.1 BP*/
	char c_err_msg[256];
	char c_msg[256];
	char c_trdng_psswrd_flg = YES;
	char c_temp_psswrd[LEN_USR_TRDNG_PSSWRD];
  char c_fno_dmn_nm [ 16 ];
  char c_fno_trg_nm [ 16 ];
  char c_fno_trg_dat [ 256 ];
  /** char c_xchng_ack [ 16 ];      *2.2 DL* ** Ver 7.1 **/
  char c_xchng_ack [ 20 ];  /** Ver 7.1 **/
	char prd[4] = "FNO";					/*2.2 DL*/
  char c_trd_dtls;							/*2.2 DL*/   
	char c_roll_stts;             /* Ver 2.4*/
  /*** char c_sys_msg[4];           * Ver 2.4*** Array size changed to 11 in Ver 8.3  ***/
  char c_sys_msg[11];           /*** Ver 8.3 ***/
  char c_can_req;               /* Ver 2.4*/
  char c_can_sqr_off;           /* Ver 2.4*/
	char  c_svc_name [15+1];			/* Ver 2.4*/
  char c_fum_mrkt_typ;          /* Ver 2.8 */
  char c_fcm_mrkt_typ;          /* Ver 2.8 */
	char c_user_id[16];						/* Ver 3.4 */	
	char	c_trd_flg;			/***	Ver	3.5	***/
	char c_spn_flg;               /* Ver 3.9 */
	char c_bse_spn_flg;           /* Ver 4.0 */
	char c_ip_address[45+1]="\0";	/** Changed to 45 from 15 in Ver 11.3 **/	/* Ver 4.2 */
  char c_request_typ = 'P';     /* Ver 4.8 */
	char c_ord_val_flg = 'N';     /* Ver 4.9 */
	char c_cumopn_val_flg = 'N';     /* Ver 4.9 */
	char c_serv_call_flg = '\0';     /* Ver 4.9 */
	char c_actn_flg = '\0';          /* Ver 6.3 */
  char c_span_flag = '\0';         /* Ver 7.9 */
  char c_nkd_blkd_flg='\0';     /** Ver 8.0 **/
  char c_lmt_allwd_flg='\0';    /** Ver 8.5 **/
	char c_source_flg='\0';    /** Ver 9.4 **/	
  char c_txn_flg='Y';             /*** Ver 9.5 ***/
  char c_prcimpv_ordrbk_flg='\0'; /*** Ver 9.8 ***/
  char c_trail_usr_flg='\0'; /*** Ver 9.8 ***/
	char c_trail_flg='\0';    /** Ver 9.8 **/
  char c_prcimpv_flg='\0';  /*** Ver 9.8 ***/
  int i_pnd_stts = 0 ;           /*** Ver 9.7 ***/
  int i_open_qt = 0 ;           /*** Ver 9.7 ***/
  
  char c_mleg_pipe_id[3];       /* Ver 11.9 */

	int i_mtm_flg = 0;            /* Ver 2.4*/
	int i_returncode;
	int i_level_exists;
	int i_trnsctn;
  int i_err[30];  /* Ver 2.3 i_err[24]; */
  int i_ferr[30]; /* Ver 2.3 i_ferr[16]; */
  int i_cnt;
  int i_ip_len;
  int i_op_len;
	int i_actn_id	=	-1;			/***	Ver	3.4	***/
	int i_corp_rec_exists = 0 ;			/***	Ver	4.6	***/
  int i_is_dbc_cust = 0 ;            /***  Ver 5.5 ***/
	int i_excp_flag = 0;		/*** Ver 7.7 ***/
	int i_exist = 0;        /*** Ver 9.8 ***/
	int i_popup=0;  /*** Ver 13.6 ***/

	long	l_record_cnt ;
	long	l_token =0 ;
	long 	l_opnpstn_qty = 0;
	long	l_opn_qty	=	0;			/***  Ver 3.4 ***/
	long	l_cvr_qty;			/***	Ver	3.4	***/
  long  l_rws_qty = 0;  /*** Ver 10.8 ***/
  long  l_can_qty = 0; /*2.2 DL*/
  long  l_open_qty = 0; /*2.2 DL*/
  long  l_exprd_qty = 0; /*2.2 DL*/
  long  l_ord_lmt_rt=0;  /* Ver 2.6*/
	int 	i_counter = 1;
  int insider_exist = 0;    /*** Ver 8.6 ***/


  long  l_tot_bid_qty = 0; /* Ver 4.7 */
  long  l_tot_offr_qty = 0; /* Ver 4.7 */
  long  l_bst_offr_qty[5]; /* Ver 4.7 */
  long  l_bst_bid_qty[5];  /* Ver 4.7 */
  long  l_bst_offr_prc[5]; /* Ver 4.7 */
  long  l_bst_bid_prc[5]; /* Ver 4.7 */
  long  l_clnt_ctgry = 0;     /** Ver 7.9 **/
	long l_init_sltp_rt=0;	/*** Ver 9.8 ***/
  long l_init_lmt_rt=0;		/*** Ver 9.8 ***/
  long l_lTP=0;			/*** Ver 9.8 ***/
  long l_trail_amt=0;		/*** Ver 9.8 ***/
  long l_lmt_offset=0;		/*** Ver 9.8 ***/
  long l_trail_ordrbk_amt=0;	/*** Ver 9.8 ***/
  long l_ordrbk_lmt_offset=0;	/*** Ver 9.8 ***/
  long l_old_ord_qty = 0;     /*** Ver 10.7 ***/
  double  d_fum_trail_amt =0;    /** Ver 9.8 **/
	double d_netadj_ord_val ; /* Ver 4.9 */
  char c_cover_ord_ref[19]; /* Ver 4.7 */
  char c_sltp_allwd = '\0'; /* Ver 4.7 */
  char c_sltp_eos = '\0';   /* Ver 4.7 */
	char c_call_source[20] = "\0";	/* Ver 6.0 */
	char c_fresh_ord_ref[19] = "\0"; /* Ver 6.1 */
	char c_ordr_ref_to_upd[19] = "\0"; /* Ver 6.1 */
  char c_myeos_frs_ord_ref[19] = "\0";  /*** Ver 9.7 ***/

  char c_1clk_flg='\0';           /** Ver 12.3 **/
  char c_1clk_prtflio_id[11];     /** Ver 12.3 **/ 
  
	/*** ver 12.5 start ***/
  char c_buy_allwd = '\0';
  char c_sell_allwd = '\0';
  /*** ver 12.5 end ***/
  char c_mrkt_ordr_flg = '\0'; /*** ver 12.8 ***/

  /*****Ver 10.3 Hard Parsing***/
  char c_mrket_typ ='D';
  char c_prduct_typ = 'F';
  char c_run_stts = 'P'; 
  char c_cvr_flg ='C';
  char c_frsh_flg = 'F';
 /*****Ver 10.3 Hard Parsing***/

 /*** ver 10.9 starts ***/
  char c_sltplck_ord_ref[19];
  char c_sltp_ord_rfrnc_lck[2][19];
  char c_ordr_rfrnc_lck[2][19];
 /*** ver 10.9 ends ***/

	/*** Ver 10.6 Starts ***/
	char c_dlvry_pos_allwd = 'Y';
	char c_setlmnt_flg = 'C';
	char c_dlvry_eos_flg = 'N';
	/*** Ver 10.6 Ends ***/

  double d_required_amt = 0.0;  /* Ver 5.6 */
  char c_insuff_flg = 'N';  /* Ver 5.6 */
  char c_alias_nm[9];           /** Ver 7.9 **/

  char c_ucc_flg='N';    /** Ver 12.1 **/
  /*** ver 12.4 start ***/
  char c_sub_rqst = '\0';
  long l_sltp_trg_prft = 0;
  double d_frsh_exe_val = 0.0;
  long  li_tot_exec_qty = 0;
  double d_avg_prc = 0;
  char c_rqst_typ='\0';
  char c_profit_flg ='T';
  char c_cvr_ordr_flw='\0';
  long l_ret_limit_rt=0;
  char c_profit_ordr[19]="\0";
  double d_prft_percntg=0.0;
  /*** ver 12.4 ends ***/

  long l_sqroff_tm=0; /*** Ver 12.9 ***/
  char c_fc_flg ='\0'; /*** Ver 12.9 ***/

	/*** Ver 13.1 start***/
  long l_buy_exe_qty=0;
  long l_sell_exe_qty=0;
  long l_sell_ord_qty=0;
  long l_buy_ord_qty=0;

  long l_fe_sell_qty=0;
  long l_fe_buy_qty=0;
  long l_fp_sell_qty=0;
  long l_fp_buy_qty=0;

  long l_site_sell=0;
  long l_site_buy=0;
  long l_site_osell=0;
  long l_site_obuy=0;

  char c_popup_flg='\0';
  char c_popup='P';
	int fav_cnt=0;
	int fut_cnt=0; /* Ver 13.3 */
  /*** Ver 13.1 end***/

	char c_cntrct_pstn_flw = '\0'; /*** Ver 13.4 ***/
  char c_sqroff_flg = '\0';      /*** Ver 13.4 ***/
  long l_cntrct_pstn_qty = 0;    /*** Ver 13.4 ***/
  long l_cvr_pstn_qty = 0;       /*** Ver 13.4 ***/

  /***** Ver 10.8 Starts *****/
  int i_rollover_ord_ind = 0;
  long l_expry_dt1 = 0;
  long l_expry_dt2 = 0;

  char c_expry_dt2[LEN_DATE];
  char c_spd_expry_dt1[LEN_DATE];
  char c_spd_expry_dt2[LEN_DATE];

  MEMSET(c_expry_dt2);
  MEMSET(c_spd_expry_dt1);
  MEMSET(c_spd_expry_dt2);
  /***** Ver 10.8 Ends *****/

	varchar c_ven_id[50+1];  /*** Ver 11.5 ***/
	MEMSET (c_ven_id);			 /*** Ver 11.5 ***/
  varchar c_ven_nm[15] = {'\0'};  /*** Ver 11.5 ***/
  varchar c_algo_ord_rmrks[50];  /** Ver 12.6 **/
  varchar c_algo_id[50];  /** Ver 12.6 **/ 

	/*** Ver 11.1 Starts ***/
  int  i_phy_sqroff_check = 0;
  long l_quote_zero = 0;
  long l_best_bid_price = 0;
  long l_best_offer_price = 0;
  long l_previous_close_price = 0;
  /*** Ver 11.1 Ends ***/

	TPTRANID tranid  ; /*** Ver 6.3 ***/
  EXEC SQL INCLUDE "table/icd_info_client_dtls.h"; /*** Ver 9.2 ***/
	EXEC SQL BEGIN DECLARE SECTION;
		struct vw_contract st_cntrct;
		struct vw_usr_prfl st_usr_prfl;
		struct vw_orderbook st_ordbook;
		struct vw_xchngbook st_xchngbook;
    varchar c_expiry_dt [ LEN_DATE ];
 /* varchar sql_usr_usr_psswrd [ LEN_USR_TRDNG_PSSWRD ];  */    /***** VER 2.2  ******/
		long l_ord_seq_num;
		long l_xchng_seq_num;
		char c_seq_num[9];
		varchar v_user_id [ 9 ];         /*2.2 DL*/
  	varchar v_user_id_bkup [ 9 ];    /*2.2 DL*/
		varchar c_date[9];
		varchar c_trd_dt[LEN_DATE];
		varchar c_nrml_trd_dt[LEN_DATE];	/*** Ver 4.6 ***/
		varchar c_sysdate[LEN_DATE];
		varchar c_usr_usr_psswrd[50+1];
		varchar v_pan_no[30+1];					/*** Added In Ver 10.5 ***/
	EXEC SQL END DECLARE SECTION;

  EXEC SQL INCLUDE "table/usr_user_master.h";                  /***** VER 2.2   ******/

	struct vw_cntrct_qt st_cntrct_qt;
	struct vw_sequence st_s_sequence;
	struct vw_sequence st_r_sequence;
	struct vw_pstn_actn st_pstn_actn;
	struct vw_cntrt_gen_inf st_cntrct_gen_inf;
	struct vw_err_msg st_err_msg;

	MEMSET (st_pstn_actn);                  /*** Ver 4.5 ***/

  MEMSET(c_temp_psswrd);    /** Ver 5.6 **/
  MEMSET(c_usr_usr_psswrd); /** Ver 5.6 **/
  MEMSET(c_nrml_trd_dt);    /** Ver 8.3 **/
	MEMSET(c_cover_ord_ref);  /*** Ver 9.7 ***/

	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
	strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);

	MEMSET(c_sys_msg);  /*** Ver 4.7 ***/
	MEMSET(st_err_msg);  /*** Ver 4.9 ***/
	MEMSET(v_pan_no);			/*** Added In Ver 10.5 ***/
  MEMSET( c_sltplck_ord_ref ); /*** ver 10.9 ***/
  MEMSET(c_sltp_ord_rfrnc_lck);/*** ver 10.9 ***/
  MEMSET(c_ordr_rfrnc_lck);/*** ver 10.9 ***/

  MEMSET(c_mleg_pipe_id);   /** Ver 11.9 **/

/** Fprint32(ptr_fml_Ibuf) ;                    commented in ver 2.4  ** Temporary for square off tracking **/ 

	if(DEBUG_MSG_LVL_5) /* 2.5 added */
	{
		Fprint32(ptr_fml_Ibuf); 
	}

	i_returncode = Fvftos32( ptr_fml_Ibuf, 
                           (char *) &st_cntrct, 
                           "vw_contract" );
	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32(	ptr_fml_Ibuf,	FFO_ACTN_ID,(char *)&i_actn_id, 0 );			/***	Ver	3.4	***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/ 
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	
  i_returncode = Fvftos32( ptr_fml_Ibuf, 
                           (char *) &st_usr_prfl, 
                           "vw_usr_prfl" );
	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

	}

  i_returncode = Fvftos32( ptr_fml_Ibuf, 
                           (char *) &st_xchngbook, 
                           "vw_xchngbook" );
	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
	  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
  strcpy ( ( char * )c_expiry_dt.arr, st_cntrct.c_expry_dt );
  SETLEN ( c_expiry_dt );

  /*** Ver 11.9 Starts Here ***/
  if( st_xchngbook.c_spl_flg == ROLLOVER_WITH_SPREAD ||
      st_xchngbook.c_spl_flg == ROLLOVER ||
      st_xchngbook.c_spl_flg == L2_ORDER ||
      st_xchngbook.c_spl_flg == L3_ORDER ||
      st_xchngbook.c_spl_flg == JOINT_SQUAREOFF 
    )
  {
    MEMSET(c_mleg_pipe_id);
    strcpy(c_mleg_pipe_id,"NA");
    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_INDX_CD,0,(char *)c_mleg_pipe_id,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
     if ( Ferror32 != FNOTPRES )
     {
       fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg  );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
       Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
     else if( Ferror32 == FNOTPRES )
     {
       strcpy(c_mleg_pipe_id,"NA");
     }
    }

    fn_userlog(c_ServiceName,"c_mleg_pipe_id :%s:",c_mleg_pipe_id);

    if(strcmp(c_mleg_pipe_id,"NA") !=0 )
    {
      strcpy(st_xchngbook.c_pipe_id,c_mleg_pipe_id);
    }

    fn_userlog(c_ServiceName,"st_xchngbook.c_pipe_id :%s:",st_xchngbook.c_pipe_id);
  }
  /*** Ver 11.9 Ends Here ***/
 
  /***** Ver 10.8 Starts *****/
  if ( st_xchngbook.c_spl_flg == ROLLOVER_WITH_SPREAD )
  {
    i_err[0] = Fget32(ptr_fml_Ibuf,FFO_EXECN_DT,0,(char *)c_expry_dt2,0);
    if ( i_err[0] == -1 )
    {
        fn_errlog( c_ServiceName, "S31025", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    fn_timearr_to_long(st_cntrct.c_expry_dt,&l_expry_dt1);
    fn_timearr_to_long(c_expry_dt2,&l_expry_dt2);
    if ( l_expry_dt1 < l_expry_dt2 )
    {
      i_rollover_ord_ind = 1;
      strcpy(c_spd_expry_dt1,st_cntrct.c_expry_dt);
      strcpy(c_spd_expry_dt2,c_expry_dt2);
    }
    else if ( l_expry_dt1 > l_expry_dt2 )
    {
      i_rollover_ord_ind = 2;
      strcpy(c_spd_expry_dt1,c_expry_dt2);
      strcpy(c_spd_expry_dt2,st_cntrct.c_expry_dt);
    }
    else
    {
      fn_errlog( c_ServiceName, "S31030", "Currnet and Rollover Expiry dates cannot be same.", c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"Rollover with Spread c_spd_expry_dt1 is :%s:",c_spd_expry_dt1);
    fn_userlog(c_ServiceName,"Rollover with Spread c_spd_expry_dt2 is :%s:",c_spd_expry_dt2);
  }
  /***** Ver 10.8 Ends *****/
  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"PIPE ID IS :%s:",st_xchngbook.c_pipe_id);
  }

		/**** Ver 9.4 Starts Here ****/
    MEMSET(c_source_flg);
    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_STATUS_FLG,0,(char *)&c_source_flg,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
        fn_errlog( c_ServiceName, "S31035", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
				c_source_flg='O';		
      }
    }

		/**** Ver 9.4 Ends Here ****/


		/** Ver 13.1 by Ravi Start **/
    l_site_sell=0;l_site_buy=0;l_site_osell=0;l_site_obuy=0;
    if( st_cntrct.c_prd_typ == 'F'  ) /* Ver 13.3 */
    {
      EXEC SQL
      SELECT
          NVL(ABS(FFP_OPNPSTN_QTY),0) PSTN_QTY,
          NVL(FFP_BUY_EXCTD_QTY,0) PSTN_E_QBUY,NVL(ABS(FFP_SELL_EXCTD_QTY),0) PSTN_E_QSELL,
          NVL(GREATEST( ABS(FFP_ISELL_QTY), ABS(FFP_EXSELL_QTY)),0) PSTN_SELL_QTY,
          NVL(GREATEST( ABS(FFP_IBUY_QTY), ABS(FFP_EXBUY_QTY)),0) PSTN_BUY_QTY
      INTO
          :l_opnpstn_qty,
          :l_buy_exe_qty,:l_sell_exe_qty,
          :l_sell_ord_qty,:l_buy_ord_qty
      FROM
          FFP_FO_FUTURES_PSTN
      WHERE
          FFP_CLM_MTCH_ACCNT    	= :st_usr_prfl.c_cln_mtch_accnt
          AND FFP_UNDRLYNG        = :st_cntrct.c_undrlyng
          AND FFP_EXPRY_DT        = :st_cntrct.c_expry_dt
          AND FFP_PRDCT_TYP       = :st_cntrct.c_prd_typ
          AND FFP_XCHNG_CD        = :st_cntrct.c_xchng_cd;

			if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
      {
        fn_errlog( c_ServiceName, "S31040",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amt,0);   
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); 
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if (SQLCODE == NO_DATA_FOUND)
      {
        l_opnpstn_qty = 0;l_buy_exe_qty=0;l_sell_exe_qty=0;l_sell_ord_qty=0;l_buy_ord_qty=0;
      }

			l_fe_sell_qty=0;l_fe_buy_qty=0;l_fp_sell_qty=0;l_fp_buy_qty=0;
      EXEC SQL
      SELECT
        SUM(SELL_EXEC_QTY) SELL_EXEC_QTY,SUM(BUY_EXEC_QTY) BUY_EXEC_QTY, SUM(SELL_QTY) SELL_QTY,SUM(BUY_QTY) BUY_QTY
      INTO
        :l_fe_sell_qty,:l_fe_buy_qty,:l_fp_sell_qty,:l_fp_buy_qty
      FROM
      (
        SELECT
          NVL(SUM(DECODE(FOD_ORDR_FLW,'S',FOD_EXEC_QTY,0)),0) SELL_EXEC_QTY,
          NVL(SUM(DECODE(FOD_ORDR_FLW,'B',FOD_EXEC_QTY,0)),0) BUY_EXEC_QTY,
          NVL(SUM(DECODE(FOD_ORDR_FLW,'S',(FOD_ORDR_TOT_QTY-(FOD_CNCL_QTY+FOD_EXPRD_QTY+FOD_EXEC_QTY)),0)),0) SELL_QTY,
          NVL(SUM(DECODE(FOD_ORDR_FLW,'B',(FOD_ORDR_TOT_QTY-(FOD_CNCL_QTY+FOD_EXPRD_QTY+FOD_EXEC_QTY)),0)),0) BUY_QTY
        FROM
          FOD_FO_ORDR_DTLS
        WHERE
          FOD_XCHNG_CD          = 'NFO'
          AND FOD_PRDCT_TYP     = :st_cntrct.c_prd_typ
          AND FOD_CLM_MTCH_ACCNT  = :st_usr_prfl.c_cln_mtch_accnt
          AND FOD_ORDR_STTS       IN ('O','Q','R','P','E','B','D')
          AND FOD_UNDRLYNG        = :st_cntrct.c_undrlyng
          AND FOD_EXPRY_DT        = :st_cntrct.c_expry_dt
          AND FOD_XCHNG_CD        = :st_cntrct.c_xchng_cd
          AND FOD_STRK_PRC        = :st_cntrct.l_strike_prc
          AND FOD_EXER_TYP        = :st_cntrct.c_exrc_typ
          AND FOD_OPT_TYP         = :st_cntrct.c_opt_typ
          AND FOD_SOURCE_FLG      = 'F'
				UNION ALL
        SELECT
          NVL(SUM(DECODE(FOD_ORDR_FLW,'S',FOD_EXEC_QTY,0)),0) SELL_EXEC_QTY,
          NVL(SUM(DECODE(FOD_ORDR_FLW,'B',FOD_EXEC_QTY,0)),0) BUY_EXEC_QTY,
          0 SELL_QTY,
          0 BUY_QTY
        FROM
          FOD_FO_ORDR_DTLS_HSTRY
        WHERE
          FOD_XCHNG_CD          = 'NFO'
          AND FOD_PRDCT_TYP     = :st_cntrct.c_prd_typ
          AND FOD_CLM_MTCH_ACCNT  = :st_usr_prfl.c_cln_mtch_accnt
          AND FOD_ORDR_STTS       IN ('P','E','B','D')
          AND FOD_UNDRLYNG        = :st_cntrct.c_undrlyng
          AND FOD_EXPRY_DT        = :st_cntrct.c_expry_dt
          AND FOD_XCHNG_CD        = :st_cntrct.c_xchng_cd
          AND FOD_STRK_PRC        = :st_cntrct.l_strike_prc
          AND FOD_EXER_TYP        = :st_cntrct.c_exrc_typ
          AND FOD_OPT_TYP         = :st_cntrct.c_opt_typ
          AND FOD_SOURCE_FLG      = 'F'
        );


			if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
      {
        fn_errlog( c_ServiceName, "S31045",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amt,0);   /*** Ver 5.8 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 5.8 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if (SQLCODE == NO_DATA_FOUND)
      {
        l_fe_sell_qty=0;l_fe_buy_qty=0;l_fp_sell_qty=0;l_fp_buy_qty=0;
      }

				fav_cnt=0;
        EXEC SQL SELECT COUNT(*) INTO :fav_cnt FROM FFS_FO_FLASH_DISCRYP
        WHERE
        FFS_CLM_MTCH_ACCNT=:st_usr_prfl.c_cln_mtch_accnt
        AND FFS_XCHNG_CD=:st_cntrct.c_xchng_cd
        AND FFS_PRDCT_TYP=:st_cntrct.c_prd_typ
        AND FFS_UNDRLYNG =:st_cntrct.c_undrlyng
        AND FFS_EXPRY_DT=to_date(:st_cntrct.c_expry_dt,'DD-Mon-YYYY')
        AND FFS_OPT_TYP=DECODE(:st_cntrct.c_prd_typ,'F',FFS_OPT_TYP,:st_cntrct.c_opt_typ)
        AND FFS_STRK_PRC=DECODE(:st_cntrct.c_prd_typ,'F',FFS_STRK_PRC,:st_cntrct.l_strike_prc);

      	if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
      	{	
        	fn_errlog( c_ServiceName, "S31050",SQLMSG,c_err_msg);	
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );	
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   
        	Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amt,0);  	
        	Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}

      l_site_sell=l_sell_exe_qty-l_fe_sell_qty;
      l_site_buy=l_buy_exe_qty-l_fe_buy_qty;
      l_site_osell=l_sell_ord_qty-l_fp_sell_qty;
      l_site_obuy=l_buy_ord_qty-l_fp_buy_qty;

	/* Ver 13.3 start */
			fut_cnt=0;

      EXEC SQL SELECT COUNT(*) into :fut_cnt FROM FOD_FO_ORDR_DTLS
      WHERE
      FOD_XCHNG_CD            = 'NFO'
      AND FOD_CLM_MTCH_ACCNT  = :st_usr_prfl.c_cln_mtch_accnt
      AND FOD_PRDCT_TYP       = :st_cntrct.c_prd_typ
      AND FOD_UNDRLYNG        = :st_cntrct.c_undrlyng
      AND FOD_EXPRY_DT        = :st_cntrct.c_expry_dt
      AND FOD_ORDR_FLW        = DECODE(:st_xchngbook.c_ordr_flw,'B','S','S','B',:st_xchngbook.c_ordr_flw)
			AND FOD_ORDR_STTS       IN ('O','Q','R','P','E','B','D')
      AND FOD_SOURCE_FLG      = 'F'
      AND FOD_SLTP_ORDR_RFRNC is null;

      if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
      {
       fn_errlog( c_ServiceName, "S31055",SQLMSG,c_err_msg);
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );  
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amt,0);   
       Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); 
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      } /* Ver 13.3 end*/
		}

    /** Ver 13.1 by Ravi End **/

  /*** Ver 12.9 starts ***/

    fn_userlog( c_ServiceName, "c_source_flg:%c:",c_source_flg);

    if (c_source_flg == 'F' )
    {
				/*Added FFS_MARGIN for Ver 13.8*/
      EXEC SQL
        SELECT DECODE(FFS_MARGIN,-1,FFS_MARGIN,FFS_CLS_TIME)
        INTO  :l_sqroff_tm
        FROM  FFS_FO_FLASH_SETTING
        WHERE FFS_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt;

      if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
      {
        fn_errlog( c_ServiceName, "S31060",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amt,0);   /*** Ver 5.8 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 5.8 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if (SQLCODE == NO_DATA_FOUND)
      {
					/** Ver 13.5 Start **/
					EXEC SQL SELECT MAX(NVL(FFC_DEF_TIMER,15)) INTO :l_sqroff_tm FROM FFC_CATEGORY_MASTER;
					if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
					{
						fn_errlog( c_ServiceName, "S31065",SQLMSG,c_err_msg);
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
						Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amt,0);
						Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
					else
					{
					l_sqroff_tm = 15;    /** Changing from 5 to 15 in Ver 11.8 **/
					} /** Ver 13.5 end **/
      }

      if (st_xchngbook.c_spl_flg != CLIENT_SQROFF && st_xchngbook.c_spl_flg != SYSTEM_SQUAREOFF )
      {
        c_fc_flg = 'F';

				/** Ver 13.1 by Ravi Start **/

      	if(l_site_sell!=l_site_buy )
      	{
      		fn_userlog(c_ServiceName, "This Contract not allowed in Flash Trade as Trades/Discrepancy found on this contract.");
      		strcpy(c_err_msg,"This Contract not allowed in Flash Trade as Trades/Discrepancy found on this contract. ");
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
      	else if (l_site_osell>0 || l_site_obuy>0)
     		{
      		fn_userlog(c_ServiceName, "This Contract not allowed in Flash Trade as website orders found in your trades on this contract please square off or cancel to continue with flash.");
      		strcpy(c_err_msg, "This Contract not allowed in Flash Trade as website orders found in your trades on this contract please square off or cancel to continue with flash.");
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
			 	else if (fav_cnt >0)
      	{
      		fn_userlog(c_ServiceName, "Order not placed as Discrepacncy Found in Flash Trade.");
      		strcpy(c_err_msg, "Order not placed as Discrepacncy Found in Flash Trade.");
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
      	/** Ver 13.1 Ravi End **/
      }
		}
    fn_userlog( c_ServiceName,"c_source_flg:%c: st_xchngbook.c_spl_flg:%c: l_sqroff_tm:%ld: c_fc_flg=:%c:",c_source_flg,st_xchngbook.c_spl_flg,l_sqroff_tm,c_fc_flg);
    /*** Ver 12.9 ends ***/

			/** Ver 13.1 Ravi Start **/

			if ( (  st_cntrct.c_prd_typ == 'F' ) /* Ver 13.3 */
        && c_source_flg !='F'
        && (!strstr( st_xchngbook.c_xchng_rmrks,"Physical Settlement EOS")) && (st_xchngbook.c_spl_flg !=  PHYSICAL_DLVRY_SQOFF)
        && (st_xchngbook.c_spl_flg != SYSTEM_SQUAREOFF )
        && (st_xchngbook.c_spl_flg != IMTM_SYS_SQUAREOFF)
        && (st_xchngbook.c_spl_flg != LMTNEG_SYS_SQUAREOFF )
       )
			{
				i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_CNTRCT_TAG,0,(char *)&c_popup_flg,0);
				i_ferr [0] = Ferror32;

				if ( i_err[0] == -1 )
				{
					if ( Ferror32 != FNOTPRES )
					{
						fn_errlog( c_ServiceName, "S31070", FMLMSG, c_err_msg  );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );   /*** Ver 3.0 ***/
						Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amt,0);   /*** Ver 5.8 ***/
						Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 5.8 ***/
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
					else if( Ferror32 == FNOTPRES )
					{
						fn_userlog( c_ServiceName," FFO_CNTRCT_TAG tag not present ");
						c_popup_flg ='Y';	/** Ver 13.6 **/
					}
				}	
				fn_userlog( c_ServiceName," FFO_CNTRCT_TAG tag value :%c ",c_popup_flg);

				 if(fav_cnt>0)       /* Popup already displayed */
        		c_popup_flg='Z';
				/* Ver 13.3 start*/
				 if(fut_cnt<=0) /* futures opposite order type check */
        			c_popup_flg='Z';
				/* Ver 13.3 end*/

/** Ver 13.6 Start **/
        if(((l_fe_sell_qty+l_fp_sell_qty)-(l_fe_buy_qty+l_fp_buy_qty))!=0)
           {
	             i_popup=1;
		        }
/** Ver 13.6 End **/

       if (  c_popup_flg == 'N' && i_popup==1 )		/*** Ver 13.6 added i_popup ***/
				{
			/**		if(((l_fe_sell_qty+l_fp_sell_qty)-(l_fe_buy_qty+l_fp_buy_qty))!=0) commented in Ver 13.6 **/
					{
						fn_userlog(c_ServiceName,"You are creating an offsetting position which might square off your existing Flash Orders/Trades");
						strcpy(c_err_msg,"You are creating an offsetting position which might square off your existing Flash Orders/Trades");
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						Fchg32( ptr_fml_Ibuf, FFO_CNTRCT_TAG,0, (char *)&c_popup, 0 );
						Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
				}
				else
				{
						if(DEBUG_MSG_LVL_3)
						fn_userlog( c_ServiceName, " No Flash Popup ");
				}
    	}	
			/* Ver 13.1 Ravi End */

		 /**** Ver 9.8 Starts Here ****/
    c_trail_flg='\0';
    i_err[1]  = Fget32(ptr_fml_Ibuf,FFO_BNK_TRN_TYP,0,(char *)&c_trail_flg,0);
    i_ferr [1] = Ferror32;

    if ( i_err[1] == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
        fn_errlog( c_ServiceName, "S31075", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); 
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
        c_trail_flg='N';
      }
    }

  	if(DEBUG_MSG_LVL_3)
  	{
    	fn_userlog(c_ServiceName, "c_trail_flg************:%c:",c_trail_flg);
		}

    if( st_xchngbook.c_ord_typ == VTC_ORDER && c_trail_flg == 'Y' )
    {
       strcpy(c_err_msg,"VTC Order with Trail option not allowed."); 
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
       Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    /**** Ver 9.8 Ends Here ****/

		/*** Ver 11.5 starts here ***/
		MEMSET(c_ven_id);
    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_USER_CODE,0,(char *)c_ven_id.arr,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
        fn_errlog( c_ServiceName, "S31080", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
				strcpy(c_ven_id.arr,"");		
      }
    }
		i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_INSTRMNT_TYP,0,(char *)c_ven_nm.arr,0);
		i_ferr [0] = Ferror32;
		if ( i_err[0] == -1 )
		{
			if ( Ferror32 != FNOTPRES )
			{
				fn_errlog( c_ServiceName, "S31085", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			else if( Ferror32 == FNOTPRES )
      {
        strcpy(c_ven_nm.arr,"");
      }
		}
		SETLEN(c_ven_nm);
		SETLEN(c_ven_id);
		fn_userlog( c_ServiceName, "Vendor id = ESP_ID	:%s: Vendor Name :%s:",c_ven_id.arr,c_ven_nm.arr);

		/*** Ver 11.5 ends ***/

    /**** Ver 12.6 Starts here ***/
    MEMSET(c_algo_id);
    MEMSET(c_algo_ord_rmrks);
    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_ACTION2,0,(char *)c_algo_id.arr,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
        fn_errlog( c_ServiceName, "S31090", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
        strcpy(c_algo_id.arr,"");
      }
    }
    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_PRDCT_DESC,0,(char *)c_algo_ord_rmrks.arr,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
        fn_errlog( c_ServiceName, "S31095", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
        strcpy(c_algo_ord_rmrks.arr,"");
      }
    }
    SETLEN(c_algo_id);
    SETLEN(c_algo_ord_rmrks);
    if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog( c_ServiceName, "c_algo_id :%s: c_algo_ord_rmrks  :%s:",c_algo_id.arr,c_algo_ord_rmrks.arr);
    }
    /**** Ver 12.6 Ends Here ****/


    /** Ver 12.3 starts **/
    MEMSET(c_1clk_prtflio_id);
    i_err[0]   = Fget32(ptr_fml_Ibuf,FFO_CLSR_TYP,0,(char *)&c_1clk_flg,0);
    i_ferr [0] = Ferror32;
    i_err[1]   = Fget32(ptr_fml_Ibuf,FFO_BILL_NO,0,(char *)c_1clk_prtflio_id,0);
    i_ferr [1] = Ferror32;
    if ( i_err[0] == -1 || i_err[1] == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
        fn_errlog( c_ServiceName, "S31100", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
        c_1clk_flg = 'N';
        strcpy(c_1clk_prtflio_id,"");
      }
    }
    fn_userlog( c_ServiceName, "Portfolio flag  :%c: ",c_1clk_flg);
    fn_userlog( c_ServiceName, "Portfolio id    :%s: ",c_1clk_prtflio_id);

    /** Ver 12.3 ends **/

	/***1.8 start***


	***1.1 start***

  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                      c_err_msg,
                                      ptr_fml_Ibuf,
                                      1,
                            FFO_CHANNEL, (char * )c_channel, NULL);

  if( i_returncode  == SYSTEM_ERROR )
  {
    fn_errlog( c_ServiceName, "S31105", LIBMSG , c_err_msg );
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }


	 *********************************************************************************
   * Checking for the callntrade flag in the usm_sssn_mngr table before proceeding *
   *********************************************************************************
    EXEC SQL SELECT NVL(USM_SUP_USR_TYP, 'N')
             INTO   :c_usm_sup_usr_typ
             FROM   USM_SSSN_MNGR
             WHERE  USM_USR_ID = :st_usr_prfl.c_user_id
             AND    USM_SSSN_ID = :st_usr_prfl.l_session_id ;

      if(SQLCODE != 0 )
      {
						fn_errlog( c_ServiceName, "S31110", SQLMSG, c_err_msg  );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

	if(c_usm_sup_usr_typ == 'C') 
	{
		strcpy(c_channel,"CNT"); 
	}
	if(c_usm_sup_usr_typ == 'S')   * V1.4 Superuser *
	{
		strcpy(c_channel,"CN1"); 
	}
  ***************************************************************************
  * Checking for the callntrade flag through                                *
  ***************************************************************************


	***1.1 ends***


	***1.8 ends***/
    /*** Ver 10.0 Starts ***/
    MEMSET(c_ip_address);

    i_err[1]  = Fget32(ptr_fml_Ibuf,FFO_OI_INDCTR,0,(char *)c_ip_address,0);
    i_ferr [1] = Ferror32;

    if ( i_err[1] == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
        fn_errlog( c_ServiceName, "S31115", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog( c_ServiceName, "c_ip_address is...:%s:",c_ip_address);
    }
    /*** Ver 10.0 Ends ***/


  /********** Ver 7.9 Starts *************/

  MEMSET(c_bp_id);
  MEMSET(c_alias_nm);
  c_trd_flg ='\0';
  c_spn_flg='\0';
  c_bse_spn_flg='\0';
  l_clnt_ctgry = 0;

 if (strncmp(st_usr_prfl.c_cln_mtch_accnt,"552",3) != 0 )  /*** Added in Ver 12.1 ***/
 {
  c_ucc_flg='N';

  EXEC SQL
    SELECT CLM_TRD_FLG,
           NVL(CLM_BP_ID,'*'),
           NVL(CLM_SPAN_ALLWD,'N'),
           NVL(CLM_BSESPAN_ALLWD,'N'),
           CLM_CLNT_CTGRY_ID,
           NVL(CLM_ALIAS_NAME,'*'),
           NVL(IUD_FNO_UCC_TRDNG_ENBL_FLG,'N')
    INTO   :c_trd_flg,
           :c_bp_id,
           :c_spn_flg,
           :c_bse_spn_flg,
           :l_clnt_ctgry,
           :c_alias_nm,
           :c_ucc_flg
    FROM   CLM_CLNT_MSTR,IUD_INFO_UCC_DTLS
    WHERE  IUD_UCC_CD = NVL(CLM_CLNT_CD,CLM_MTCH_ACCNT)
    AND CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt;

   if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
   {
    fn_userlog(c_ServiceName, "Failed To Get SPAN Flag.");
    fn_errlog(c_ServiceName, "S31120", SQLMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
   }

   if ( SQLCODE == NO_DATA_FOUND )
   {
    fn_userlog(c_ServiceName,"Match Account :%s: UCC Flag :%c:",st_usr_prfl.c_cln_mtch_accnt,c_ucc_flg);
   }

   if ( DEBUG_MSG_LVL_3 )
   {
    fn_userlog(c_ServiceName,"UCC flag :%c:",c_ucc_flg);
   }

   if(c_ucc_flg != 'Y' )
   {
    fn_errlog( c_ServiceName, "B14021", DEFMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
   }
 }
 else                /**** Ver 12.1 Ends ***/
 { 

  EXEC SQL
    SELECT CLM_TRD_FLG,
           NVL(CLM_BP_ID,'*'),
           NVL(CLM_SPAN_ALLWD,'N'),
           NVL(CLM_BSESPAN_ALLWD,'N'),
           CLM_CLNT_CTGRY_ID,
           NVL(CLM_ALIAS_NAME,'*')
    INTO   :c_trd_flg,
           :c_bp_id,
           :c_spn_flg,
           :c_bse_spn_flg,
           :l_clnt_ctgry,
           :c_alias_nm
    FROM   CLM_CLNT_MSTR
    WHERE  CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt;

  if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName, "Failed To Get SPAN Flag.");
    fn_errlog(c_ServiceName, "S31125", SQLMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }
 }

  rtrim(c_bp_id);
  rtrim(c_alias_nm);

	if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
	{
	  fn_userlog(c_ServiceName,"Trade flag :%c:",c_trd_flg);
		fn_userlog(c_ServiceName,"BP id :%s:",c_bp_id);
		fn_userlog(c_ServiceName," NSE span flag :%c:,Bse Span Flag :%c:",c_spn_flg,c_bse_spn_flg);
		fn_userlog(c_ServiceName,"Client category Id :%ld:",l_clnt_ctgry);
		fn_userlog(c_ServiceName,"Nick Name :%s:",c_alias_nm);
	}
 if(st_usr_prfl.c_user_id[0] != BPID && strcmp(st_usr_prfl.c_user_id,"system") != 0 && c_trd_flg == 'N' && strcmp(c_bp_id,"*"
) != 0)
  {
    fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst, this facility has been Disabled");
    fn_errlog( c_ServiceName, "B35018", "", c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /********** Ver 7.9 Ends *************/
  /*********** Commented in Ver 7.9 ***************************
  ***  Ver 5.5 Starts  ***

  if(st_usr_prfl.c_user_id[0] != BPID && strcmp(st_usr_prfl.c_user_id,"system") != 0)
  {
    i_is_dbc_cust = 0;

    EXEC SQL
        SELECT 1
            INTO :i_is_dbc_cust
        FROM  CLM_CLNT_MSTR
        WHERE CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
        AND   CLM_TRD_FLG = 'N'                          
        AND   CLM_BP_ID IS NOT NULL;

    if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
    {
      fn_errlog( c_ServiceName, "S31130",SQLMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if ( i_is_dbc_cust == 1 )
    {
      fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst, this facility has been Disabled");
      fn_errlog( c_ServiceName, "B35018", "", c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

  ***  Ver 5.5  Ends  ***
  ****************** Ver 7.9 Comment ends *********************/
  /**** Ver 7.8 Starts Here ****/

    /*** Ver 8.6 Starts ******/

if ( ( st_xchngbook.c_spl_flg != CLIENT_SQROFF ) &&
        ( st_xchngbook.c_spl_flg != SYSTEM_SQUAREOFF)  &&
        ( st_xchngbook.c_spl_flg != IMTM_SYS_SQUAREOFF )  && 
        ( st_xchngbook.c_spl_flg != LMTNEG_SYS_SQUAREOFF )  &&
        ( st_xchngbook.c_spl_flg != JOINT_SQUAREOFF ) )				/** Ver 12.0 if introduced to skip insider check for square off **/
  {
  i_returncode = fn_chk_und_insider(c_ServiceName,
                                    st_usr_prfl,
                                    /*st_cntrct.c_undrlyng,  Ver 12.0 comment**/
                                    st_cntrct,				/** Ver 12.0 **/
                                    &insider_exist);
  if (i_returncode == -1)
  {
      fn_errlog( c_ServiceName, "S31135", "Error in Function fn_chk_und_insider", c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if (insider_exist == 1)
  {
      fn_errlog( c_ServiceName, "B91164", DEFMSG, c_err_msg  );/** Ver 12.0 B21042 changed to B91164 **/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
 }
  /*** End of Ver 8.6 ***/
	if ( DEBUG_MSG_LVL_0 ) /**** Added in Ver 9.6 ****/
	{
	  fn_userlog(c_ServiceName," st_usr_prfl.c_user_id :%s:",st_usr_prfl.c_user_id);
	}

  MEMSET(v_user_id);

  strcpy((char *)v_user_id.arr,st_usr_prfl.c_user_id);

  SETLEN(v_user_id);

  if ( strcmp((char *)v_user_id.arr,"system") == 0 )
  {
    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"SYSTEM PLACING ORDER");
    }
    MEMSET(v_user_id);

  /***************** Commented in Ver 7.9 *********************************
    EXEC SQL  SELECT  DECODE(NVL(CLM_BP_ID,'*'),'*',UAC_USR_ID,CLM_BP_ID)
              INTO    :v_user_id
              FROM    UAC_USR_ACCNTS, CLM_CLNT_MSTR
              WHERE   CLM_MTCH_ACCNT      = :st_usr_prfl.c_cln_mtch_accnt
              AND     UAC_CLM_MTCH_ACCNT  = CLM_MTCH_ACCNT;
   ***************** Ver 7.9 Comment ends here ***************************/

  /****Ver 10.3 Query Changed to Uppercase***/ 
 
    EXEC SQL  SELECT  DECODE(:c_bp_id,'*',UAC_USR_ID,:c_bp_id)              /** Ver 7.9 **/
            INTO    :v_user_id
            FROM    UAC_USR_ACCNTS
            WHERE   UAC_CLM_MTCH_ACCNT  = :st_usr_prfl.c_cln_mtch_accnt;
   
    if(( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
      fn_errlog( c_ServiceName, "S31140", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    SETNULL(v_user_id);

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"BP ID IS  :%s:", v_user_id.arr);
    }

    /**** Ver 8.0 Starts Here ****/

    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_NKD_BLKD_FLG,0,(char *)&c_nkd_blkd_flg,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
        fn_errlog( c_ServiceName, "S31145", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    /**** Ver 8.0 Ends here ****/
  }

  sql_usr_fno_accpt_flg ='\0';
  sql_usr_dt_allwd_flg ='\0';

  EXEC SQL  SELECT  USR_DT_ALLWD_FLG,
                    USR_FNO_ACCPT_FLG
            INTO    :sql_usr_dt_allwd_flg,
                    :sql_usr_fno_accpt_flg
            FROM    USR_USER_MASTER
            WHERE   USR_USR_ID  =:v_user_id;
  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31150", SQLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
	{
	  fn_userlog(c_ServiceName,"sql_usr_dt_allwd_flg :%c:",sql_usr_dt_allwd_flg);
		fn_userlog(c_ServiceName,"sql_usr_fno_accpt_flg :%c:",sql_usr_fno_accpt_flg);
	}

  if(st_usr_prfl.c_user_id[0] != BPID && strcmp(st_usr_prfl.c_user_id,"system") != 0)
  {
    if(sql_usr_fno_accpt_flg != 'Y')
    {
      fn_errlog( c_ServiceName, "B31017",DEFMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  /**** Ver 7.8 Ends Here ****/

  /*** Ver 11.4 Starts ***/

  if(st_usr_prfl.c_user_id[0] ==BPID)
   {
     fn_userlog(c_ServiceName,"Before calling fn_simaltns_ssn_term");

     if( fn_simaltns_ssn_term ( c_ServiceName,st_usr_prfl.c_user_id,st_usr_prfl.l_session_id,st_usr_prfl.c_cln_mtch_accnt,c_err_msg) == -1 )
     {
      fn_errlog(c_ServiceName,"S31155","Error while checking simultaneous active session",c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

  /*** Ver 11.4 Ends ***/

  /********* Commented in Ver 7.9 ********************* 
	***  Ver 3.9 SPAN Flag Check ***

  EXEC SQL
    SELECT  NVL(CLM_SPAN_ALLWD,'N'),
						NVL(CLM_BSESPAN_ALLWD,'N')			***	Ver	4.0	***
    INTO    :c_spn_flg,
						:c_bse_spn_flg									***  Ver 4.0 ***
    FROM    CLM_CLNT_MSTR
    WHERE   CLM_MTCH_ACCNT  = :st_usr_prfl.c_cln_mtch_accnt;

  if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName, "Failed To Get SPAN Flag.");
    fn_errlog(c_ServiceName, "S31160", SQLMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }
  ************* Ver 7.9 Comment Ends ******************/ 

	if(DEBUG_MSG_LVL_5)
	{
  	fn_userlog(c_ServiceName,"NSE SPAN Allowed Flag Is :%c:",c_spn_flg);
  	fn_userlog(c_ServiceName,"NSE SPAN Allowed Flag Is :%c:",c_bse_spn_flg);
	}

/********* Ver 11.2 Starts *********/

  i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_ordbook,
                           "vw_orderbook" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31165", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
    fn_userlog(c_ServiceName,"channel== :%s:",st_ordbook.c_channel);

/********* Ver 11.2  Ends *********/



/******** Ver 10.7 Starts ********/
   if (strcmp(st_ordbook.c_channel,"OFF") != 0)  /*** If Condition Added in Ver 11.2 ***/
   {
     if ( st_xchngbook.c_spl_flg != 'C' && st_cntrct.c_prd_typ != 'U'  )
     {
       i_returncode = fn_disallow_frsh_expsre(c_ServiceName,
                                              st_usr_prfl.c_cln_mtch_accnt,
                                              c_spn_flg,
                                              st_xchngbook.c_ordr_flw,
                                              st_xchngbook.l_ord_tot_qty,
                                              l_old_ord_qty,
                                              &st_cntrct,
                                              &st_err_msg );

       if(i_returncode == -1 || i_returncode ==-2)
       {
         fn_errlog( c_ServiceName, "S31170", "Error in Function fn_disallow_frsh_expsre", c_err_msg  );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
         Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
         Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
         Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }
     }
   }
/******** Ver 10.7 Ends ********/
 
	/**** Ver 12.2 starts *******/

  if ( st_cntrct.c_prd_typ == 'F' )
  {
    i_returncode = fn_disallow_frsh_ordr(c_ServiceName,
                                              st_usr_prfl.c_cln_mtch_accnt,
                                              c_spn_flg,
                                              st_xchngbook.c_ordr_flw,
                                              st_xchngbook.l_ord_tot_qty,
                                              &st_cntrct,
                                              &st_err_msg );

    if(i_returncode == -1)
    {
      fn_errlog( c_ServiceName, "S31175", "Error in Function fn_disallow_frsh_expsre", c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

  }

/**** Ver 12.2 ends *****/
 
/***	if ( ( c_spn_flg == 'Y')	Commented In Ver 4.0		***/

	/*** Ver 4.1 SPAN flag Z added in condition for customer who not accepted TNC ***/

	if( (	( c_spn_flg == 'Y' || c_spn_flg =='Z') && strcmp(st_cntrct.c_xchng_cd,"NFO") == 0 )	||			/***	Ver 4.0	***/
    ( c_bse_spn_flg == 'Y' && strcmp(st_cntrct.c_xchng_cd,"BFO") == 0 ) )
  {
		if( st_cntrct.c_prd_typ != 'P' )		/*** Ver 5.1 ***/
		{																		/*** Ver 5.1 ***/
			fn_userlog(c_ServiceName, "SPAN Customer Trying To Place Order Under Normal Margining System.");
	/*  strcpy(c_err_msg,"You Are Marked Under SPAN.Can Place Order Only Through New Site."); commented in ver 4.4 */
			strcpy(c_err_msg,"You Are Marked Under SPAN. Please Visit WebSite To Place Order."); /* ver 4.4 */
			Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
		}	/*** Ver 5.1 ***/
  }

	/***  Ver 3.9 SPAN Flag Check Ends ***/

		if(DEBUG_MSG_LVL_0)
		{
  		fn_userlog( c_ServiceName, "User id				:%s:",st_usr_prfl.c_user_id );
  		fn_userlog( c_ServiceName, "Session id		:%ld:", st_usr_prfl.l_session_id );
  		fn_userlog( c_ServiceName, "Match Account	:%s:", st_usr_prfl.c_cln_mtch_accnt );
  		fn_userlog( c_ServiceName, "Exchange code :%s:", st_cntrct.c_xchng_cd );
  		fn_userlog( c_ServiceName, "Product Type  :%c:", st_cntrct.c_prd_typ );
  		fn_userlog( c_ServiceName, "Underlyng     :%s:", st_cntrct.c_undrlyng );
  		fn_userlog( c_ServiceName, "Expiry date   :%s:", c_expiry_dt.arr );
  		fn_userlog( c_ServiceName, "Excercise Type:%c:", st_cntrct.c_exrc_typ );
  		fn_userlog( c_ServiceName, "Category 			:%c:", st_cntrct.c_ctgry_indstk );
  		fn_userlog( c_ServiceName, "Order flow B/S:%c:", st_xchngbook.c_ordr_flw );
  		fn_userlog( c_ServiceName, "Lmt/Mkt/StpLss:%c:", st_xchngbook.c_slm_flg );
  		fn_userlog( c_ServiceName, "GTT/GTD Order	:%c:", st_xchngbook.c_ord_typ );
  		fn_userlog( c_ServiceName, "Disclosed Qty	:%ld:", st_xchngbook.l_dsclsd_qty );
  		fn_userlog( c_ServiceName, "Stop Loss Trgg:%ld:", st_xchngbook.l_stp_lss_tgr );
  		fn_userlog( c_ServiceName, "Order Qty			:%ld:", st_xchngbook.l_ord_tot_qty );
  		fn_userlog( c_ServiceName, "Limit Rate		:%ld:", st_xchngbook.l_ord_lmt_rt );
  		fn_userlog( c_ServiceName, "special flag		:%c:", st_xchngbook.c_spl_flg );
			fn_userlog( c_ServiceName, "Exchange remarks :%s:", st_xchngbook.c_xchng_rmrks);  /*** Ver 5.2 ***/
			fn_userlog(c_ServiceName,"PIPE ID IS :%s:",st_xchngbook.c_pipe_id);
		}

  	/*** Ver 4.0 Starts Here *****/

		if( strcmp(st_cntrct.c_xchng_cd,"BFO") == 0 )
   	{
			 /****** Added in Ver 9.2 *******/
				
				MEMSET(sql_icd_cust_type.arr);

        EXEC SQL
        SELECT  ICD_CUST_TYPE
        INTO    :sql_icd_cust_type
        FROM    ICD_INFO_CLIENT_DTLS,
                IAI_INFO_ACCOUNT_INFO
        WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
        AND     IAI_MATCH_ACCOUNT_NO  = :st_usr_prfl.c_cln_mtch_accnt;

			if ( SQLCODE != 0 )
  		{
   		  fn_errlog(c_ServiceName, "S31180", SQLMSG, c_err_msg);
    		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  		}

      fn_userlog( c_ServiceName, "CUST TYPE IS :%s:",sql_icd_cust_type.arr);
      if(strcmp(sql_icd_cust_type.arr,"NRI") == 0)
      {
         fn_userlog( c_ServiceName, "NRI Customer Trying To Place Order In BSE Derivatives");
         fn_errlog( c_ServiceName, "S31185", "NRI Customer Trying To Place Order In BSE Derivatives", c_err_msg  );
         strcpy(c_err_msg," NRI Customer Trying To Place Order In BSE Derivatives .");
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
         Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
         Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
         Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }

			/****** Added in Ver 9.2 Ends ******/
			
			/********* Commented in Ver 9.2 *********


			if ( (strncmp(st_usr_prfl.c_cln_mtch_accnt, "750", 3)  == 0 ) ||       ***  Ver 4.4 ***
          (strncmp(st_usr_prfl.c_cln_mtch_accnt, "751", 3)  == 0 ) ||
          (strncmp(st_usr_prfl.c_cln_mtch_accnt, "650", 3)  == 0 ) ||
          (strncmp(st_usr_prfl.c_cln_mtch_accnt, "651", 3)  == 0 )
         )
       {
         if(DEBUG_MSG_LVL_3)
         {
           fn_userlog(c_ServiceName,"NRI Customer Trying To Place Order In BSE Derivatives.");
         }

         fn_errlog( c_ServiceName, "S31190", "", c_err_msg  );
         strcpy(c_err_msg," Currently BSE Derivative is not allowed for NRI customers.");
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
         Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
         Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  *** Ver 8.2 ***
         Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   *** Ver 8.2 ***
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }

			 ********* Commented in Ver 9.2 *********/

			/***** Ver 4.3 Starts *****/
			
			if( st_cntrct.c_prd_typ == 'P' )
				{
				 fn_errlog( c_ServiceName, "S31195", "This facility is currently not enabled for BSE", c_err_msg  );
         strcpy(c_err_msg,"This facility is currently not enabled for BSE."); 
				 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
         Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
         Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
         Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

			/***** Ver 4.3 Ends ******/
			
			/***	Ver 4.4 Below check is shifted above

     if ( (strncmp(st_usr_prfl.c_cln_mtch_accnt, "750", 3)  == 0 ) ||
          (strncmp(st_usr_prfl.c_cln_mtch_accnt, "751", 3)  == 0 ) ||
          (strncmp(st_usr_prfl.c_cln_mtch_accnt, "650", 3)  == 0 ) ||
          (strncmp(st_usr_prfl.c_cln_mtch_accnt, "651", 3)  == 0 )
        )
       {
				 if(DEBUG_MSG_LVL_3)
				 {
					 fn_userlog(c_ServiceName,"NRI Customer Trying To Place Order In BSE Derivatives.");
				 }

         fn_errlog( c_ServiceName, "S31200", "", c_err_msg  );
         strcpy(c_err_msg," Currently BSE Derivative is not allowed for NRI customers."); 
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
         Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }

				*******************************/
   }



  /*** Ver 4.0 Ends Here *******/
  
	/*** Ver 4.4 Starts *** Commented in Ver 7.3 ***

  *** if ( ((strncmp(st_usr_prfl.c_cln_mtch_accnt, "750", 3)  == 0 ) ||
        (strncmp(st_usr_prfl.c_cln_mtch_accnt, "751", 3)  == 0 ) ||
        (strncmp(st_usr_prfl.c_cln_mtch_accnt, "650", 3)  == 0 ) ||
       (strncmp(st_usr_prfl.c_cln_mtch_accnt, "651", 3)  == 0 )) &&
        *** st_cntrct.c_prd_typ == 'P' Commented In Ver 6.8 ***
        ( st_cntrct.c_prd_typ == 'P' || st_cntrct.c_prd_typ == 'U') *** Ver 6.8 *** 
     )
   {
   		if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"NRI Customer Trying To Place FuturePlus Order .");
      }

      fn_errlog( c_ServiceName, "S31205", "This facility is not enabled for NRI customers.", c_err_msg  );
      strcpy(c_err_msg,"This facility is not enabled for NRI customers");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }


   *** Ver 4.4 Ends *** Commented Ends Ver 7.3 ***/

  /*** 2.2 Starts Cannot allow to place order if both Buy and Sell is not allowed. ***/
	if(DEBUG_MSG_LVL_3)
	{
  fn_userlog(c_ServiceName, "Going to check for Buy Sell allwd flag caling fn_get_trdng_dtls");
	}
  if(fn_get_trdng_dtls(st_usr_prfl.c_user_id,st_usr_prfl.c_cln_mtch_accnt, &c_trd_dtls, prd) == -1)
  {
    fn_userlog(c_ServiceName, "Error in Function Call");
    fn_errlog(c_ServiceName, "S31210", LIBMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

  if(c_trd_dtls != 'A')
  {
    fn_userlog( c_ServiceName, "For Placing any order in FNO both Buy and Sell must be allowed.");
    fn_errlog( c_ServiceName, "B28555", "DEFMSG", c_err_msg  );   
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }
  /*** 2.2 Ends ***/

	/**********1.6 Starts *********************/
	if(st_xchngbook.c_ord_typ	== GOOD_TILL_DATE)
	{
		fn_userlog( c_ServiceName, "GTD Orders are not allowed for FNO from 30-07-2004");
		fn_errlog( c_ServiceName, "B28572", "DEFMSG", c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
	  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	/**********	1.6 Ends	*********************/

	/**********1.9 Starts *********************/
	if(st_xchngbook.c_ordr_flw	!='B' && st_xchngbook.c_ordr_flw  != 'S')
	{
		fn_userlog( c_ServiceName, "ORDER FLOW is NULL");
		fn_errlog( c_ServiceName, "S31215", "Invalid Order Flow", c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
	  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	/**********	1.9 Ends	*********************/

	/***	Ver	3.4	Starts	***/

	if(st_xchngbook.l_stp_lss_tgr	>	0	)
	{
		if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
		{
			fn_userlog(c_ServiceName,"Inside Stop Loss Trigger Price Check.");
		}
		st_xchngbook.c_slm_flg	=	'S'	;
		if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
		{
			fn_userlog(c_ServiceName," SLM Flag Is :%c:",st_xchngbook.c_slm_flg);
		}

	}

	/***	Ver	3.4	Ends	***/

  /**********3.1 Starts *********************/
  if(st_xchngbook.c_slm_flg !='L' && st_xchngbook.c_slm_flg  != 'S' && st_xchngbook.c_slm_flg !='M' )
  {
    fn_userlog( c_ServiceName, "c_slm_flg is NULL");
    fn_errlog( c_ServiceName, "S31220", "Invalid SLM Flag", c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  if(st_xchngbook.c_ord_typ !='T' && st_xchngbook.c_ord_typ  != 'I' && st_xchngbook.c_ord_typ  != 'V' )  /** Ver 6.4 'V' added **/
  {
    fn_userlog( c_ServiceName, "ORDER TYPE is NULL");
    fn_errlog( c_ServiceName, "S31225", "Invalid Order Type", c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /********** 3.1 Ends  *********************/
  /********** Ver 3.6 Starts *************/

	/****** Added in Ver 9.2 *******/

    MEMSET(sql_icd_cust_type.arr);

    EXEC SQL
    SELECT  ICD_CUST_TYPE,
						NVL(ICD_PAN_NO,'*')			/*** Added In Ver 10.5 ***/
    INTO    :sql_icd_cust_type,
						:v_pan_no				/*** Added In Ver 10.5 ***/
    FROM    ICD_INFO_CLIENT_DTLS,
            IAI_INFO_ACCOUNT_INFO
    WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
    AND     IAI_MATCH_ACCOUNT_NO  = :st_usr_prfl.c_cln_mtch_accnt;

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog(c_ServiceName, "S31230", SQLMSG, c_err_msg);
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
    }
		/*** Ver 10.5 Starts ***/
		SETNULL(v_pan_no);
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName,"Fetched v_pan_no is :%s:",v_pan_no.arr);
		}
		if (v_pan_no.len != 10)
		{
			fn_errlog( c_ServiceName, "B91176", DEFMSG, c_err_msg  );
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
		}
		/*** Ver 10.5 Ends ***/
     /****** Added in Ver 9.2 Ends ******/

		/*********** Commented in Ver 9.2 ****************

  if ( (strncmp(st_usr_prfl.c_cln_mtch_accnt, "750", 3)  == 0 ) ||
       (strncmp(st_usr_prfl.c_cln_mtch_accnt, "751", 3)  == 0 ) ||
       (strncmp(st_usr_prfl.c_cln_mtch_accnt, "650", 3)  == 0 ) ||
       (strncmp(st_usr_prfl.c_cln_mtch_accnt, "651", 3)  == 0 )
      )
		*********** Commented in Ver 9.2 ****************/

   fn_userlog( c_ServiceName, "CUST TYPE 2 IS :%s:",sql_icd_cust_type.arr);     /** added in Ver 9.2 **/
   if(strcmp(sql_icd_cust_type.arr,"NRI") == 0)   /** Check added in Ver 9.2 **/
   {
     /******** Check if NRI customer is allowed for trade or not for Underlying ***/

		 if(DEBUG_MSG_LVL_3)
		 {
     	fn_userlog(c_ServiceName,"Inside NRI Check ");
		 }
     i_returncode = fn_nri_validation( c_ServiceName,
                                       st_cntrct.c_undrlyng,
                                       st_cntrct.c_prd_typ,
																			 st_cntrct.c_xchng_cd ,			/*** Ver 4.0 ***/
                                       &st_err_msg);
     if( i_returncode == -1 )
     {
       fn_errlog( c_ServiceName, "S31235", "", c_err_msg  );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
       Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
     if( i_returncode == -2 )
     {
       fn_errlog( c_ServiceName, "S31240", "Business Error", c_err_msg  );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
       Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
   }
  /********** Ver 3.6 Ends ***************/ 

  /**********2.1 Starts *********************/

  i_returncode=fn_chk_closeout(c_ServiceName,
															 st_usr_prfl.c_cln_mtch_accnt,          /*** Added in ver 4.8 ***/
                               c_request_typ,                         /*** Added in ver 4.8 ***/
                               st_cntrct,                             /*** Added in ver 4.8 ***/
                               &st_xchngbook,
                               &st_err_msg);

  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31245", "Broker Under Closeout", c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /**********2.1 Ends*********************/

 /************  Comment Starts Ver 11.2 *************

  i_returncode = Fvftos32( ptr_fml_Ibuf, 
                           (char *) &st_ordbook, 
                           "vw_orderbook" );
	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31250", FMLMSG, c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      ***  Ver 3.4 ***
	  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  *** Ver 8.2 ***
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   *** Ver 8.2 ***
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

   ************* Comment Ends Ver 11.2 ****************/

  /*** Commented in Ver 10.1 ***

	*** Ver 5.1 starts ***
	if( (	( c_spn_flg == 'Y' || c_spn_flg =='Z') && strcmp(st_cntrct.c_xchng_cd,"NFO") == 0 )	||	
		( c_bse_spn_flg == 'Y' && strcmp(st_cntrct.c_xchng_cd,"BFO") == 0 ) )
	{
		if ( DEBUG_MSG_LVL_0 )  **** Added in Ver 9.6 ****
		{
			fn_userlog(c_ServiceName,"channel :%s:",st_ordbook.c_channel);
		}
		if ( st_cntrct.c_prd_typ == 'P' && (strcmp(st_ordbook.c_channel,"WEB") != 0) && (strcmp(st_ordbook.c_channel,"CNT") != 0)	
		 && (strcmp(st_ordbook.c_channel,"SYS") != 0) && (strcmp(st_ordbook.c_channel,"WE1") != 0) 
		 && (strcmp(st_ordbook.c_channel,"OFF") != 0) && (strcmp(st_ordbook.c_channel,"WE3") != 0) 
		 && (strcmp(st_ordbook.c_channel,"WE4") != 0) && (strcmp(st_ordbook.c_channel,"WE7") != 0)
     && (strcmp(st_ordbook.c_channel,"WE8") != 0) && (strcmp(st_ordbook.c_channel,"WE9") != 0)
     && (strcmp(st_ordbook.c_channel,"CN1") != 0) && (strcmp(st_ordbook.c_channel,"WE6") != 0)
		 && (strcmp(st_ordbook.c_channel,"NET") != 0) && (strcmp(st_ordbook.c_channel,"WEH") != 0) 
     && (strcmp(st_ordbook.c_channel,"WEN") != 0) && (strcmp(st_ordbook.c_channel,"WEO") != 0)
     && (strcmp(st_ordbook.c_channel,"WEP") != 0)) * Ver 7.2 *  ***  Ver 6.6 ** Channel WE3 added for SPAN FuturePlus in LBS  **  ***  Ver 6.8 ** Channel  WE4 (SilverLight), WE9 (Windows Mobile) and WE8 (Win 8) added for SPAN FuturePlus *** ***  Ver 6.7 ** Channel  WE7 added for SPAN FuturePlus in IPhone  ***
		*** Ver 7.4 ** Channel  WE6 added for SPAN FuturePlus in android ***
		*** Ver 7.6 Channel NET  added for SPAN FuturePlus in DL.net ***
		***  Ver 8.1 ** Channel WEH added for HTML5  *** *** Channel WEN,WEO and WEP added for Idirect Lite in Ver 9.1 ***
		{
			fn_userlog(c_ServiceName, "You Are Marked Under SPAN. Please Visit WebSite To Place Order.");
			strcpy(c_err_msg,"You Are Marked Under SPAN. Please Visit WebSite To Place Order."); 
			Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
	    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  *** Ver 8.2 ***
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   *** Ver 8.2 ***
  		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
		}
	}
	*** Ver 5.1 ends ***

  *** Ver 10.1 Comment Ends ***/

	st_ordbook.c_slm_flg	=	st_xchngbook.c_slm_flg;													/***	Ver	3.4	***/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName," SLM Flag Is :%c:",st_ordbook.c_slm_flg);			/***	Ver	3.4	***/
		fn_userlog(c_ServiceName,"Stock Code :%s:",st_cntrct.c_undrlyng);			/*** Ver 4.4	***/
	  fn_userlog(c_ServiceName,"IND/STK :%c:",st_cntrct.c_ctgry_indstk);			/*** Ver 4.4  ***/ 
	}

  /********** 3.2 starts *********************/
	 
 /* if(st_cntrct.c_ctgry_indstk !='I' && st_cntrct.c_ctgry_indstk != 'S')
  {	Commented in Ver 7.2 */
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "INVALID INDEX STOCK TYPE:%c:", st_cntrct.c_ctgry_indstk);
		}

    /*** Commented in Ver 8.7 ***
    
    EXEC SQL
    SELECT FCM_LOT_SZ,                        * Ver 7.9 *
           FCM_TCK_SZ,                        * Ver 7.9 *
           FCM_INDSTK
    INTO   :st_cntrct_gen_inf.l_min_lot_qty,  * Ver 7.9 *
           :st_cntrct_gen_inf.l_tick_sz,      * Ver 7.9 *
           :st_cntrct.c_ctgry_indstk
    FROM  FCM_FO_CNTRCT_MSTR
    WHERE FCM_XCHNG_CD  =:st_cntrct.c_xchng_cd
    AND   FCM_PRDCT_TYP ='F'
    AND   FCM_UNDRLYNG  =:st_cntrct.c_undrlyng
    AND   FCM_EXPRY_DT  =:st_cntrct.c_expry_dt ;

    ***/

    /*** Ver 10.8 Starts ***/
    if ( st_xchngbook.c_spl_flg != ROLLOVER_WITH_SPREAD )
    {
    /*** Ver 10.8 Ends ***/
    /*** Ver 8.7 Starts ***/

    EXEC SQL
    SELECT FTQ_MIN_LOT_QTY,
           FTQ_TCK_SZ,
           FTQ_INDSTK,
					 NVL(FTQ_BST1_BID_PRC,0),		/*** Ver 11.1 ***/
					 NVL(FTQ_BST1_OFFR_PRC,0),	/*** Ver 11.1 ***/
					 NVL(FTQ_CLS_PRC,0)					/*** Ver 11.1 ***/
    INTO   :st_cntrct_gen_inf.l_min_lot_qty,
           :st_cntrct_gen_inf.l_tick_sz,
           :st_cntrct.c_ctgry_indstk,
					 :l_best_bid_price,					/*** Ver 11.1 ***/
					 :l_best_offer_price,				/*** Ver 11.1 ***/
					 :l_previous_close_price		/*** Ver 11.1 ***/
    FROM  FTQ_FO_TRD_QT
    WHERE FTQ_XCHNG_CD  =:st_cntrct.c_xchng_cd
    /***AND   FTQ_PRDCT_TYP ='F' *****commented in ver 10.3***/
    AND   FTQ_PRDCT_TYP =:c_prduct_typ                   /*****Ver 10.3 Hard Parsing*****/
    AND   FTQ_UNDRLYNG  =:st_cntrct.c_undrlyng
    AND   FTQ_EXPRY_DT  =:st_cntrct.c_expry_dt ;


    /*** Ver 8.7 Ends   ***/
    /*** Ver 10.8 Starts ***/
    }
    else
    {
    EXEC SQL
    SELECT FTQ_MIN_LOT_QTY,
           FTQ_TCK_SZ,
           FTQ_INDSTK
    INTO   :st_cntrct_gen_inf.l_min_lot_qty,
           :st_cntrct_gen_inf.l_tick_sz,
           :st_cntrct.c_ctgry_indstk
    FROM  FTQ_FO_TRD_QT
    WHERE FTQ_XCHNG_CD  =:st_cntrct.c_xchng_cd
    AND   FTQ_PRDCT_TYP =DECODE(:c_prduct_typ,'F','S',:c_prduct_typ)
    AND   FTQ_UNDRLYNG  =:st_cntrct.c_undrlyng
    AND   FTQ_EXPRY_DT  =:c_spd_expry_dt1
    AND   FTQ_EXPRY_DT2 =:c_spd_expry_dt2;
    }
    /*** Ver 10.8 Ends ***/

	 	if(SQLCODE != 0 )
    {
			fn_userlog( c_ServiceName, "INDEX STOCK TYPE is NULL");
   		fn_errlog( c_ServiceName, "S31255", SQLMSG, c_err_msg  ); 
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }	
    st_ordbook.c_ctgry_indstk = st_cntrct.c_ctgry_indstk;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "CORRECTED FTQ INDEX STOCK TYPE:%c:%c:", st_cntrct.c_ctgry_indstk,st_ordbook.c_ctgry_indstk);
	    fn_userlog( c_ServiceName, "FTQ Tick zize :%ld:",st_cntrct_gen_inf.l_tick_sz);     /* Ver 7.9 */
      fn_userlog( c_ServiceName, "FTQ Lot Size :%ld:",st_cntrct_gen_inf.l_min_lot_qty);  /* Ver 7.9 */
  
  	}
/* } Commented in Ver 7.2 */
  /**********3.2 Ends *********************/

	/*** Ver 6.0 starts here ***/
	if (st_cntrct.c_prd_typ == 'U')
	{
		if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
		{
			fn_userlog( c_ServiceName, "st_xchngbook.c_spl_flg= :%c:,st_ordbook.c_channel = :%s: ",st_xchngbook.c_spl_flg,st_ordbook.c_channel);
		}
		if (st_xchngbook.l_ord_tot_qty < 0 ) /*** Ver 7.7 ***/
		{
			st_xchngbook.l_ord_tot_qty = st_xchngbook.l_ord_tot_qty * -1;
			st_ordbook.l_ord_tot_qty = st_ordbook.l_ord_tot_qty * -1;
			i_excp_flag = 1;
			if ( DEBUG_MSG_LVL_0 ) /**** Added in Ver 9.6 ****/
			{
				fn_userlog( c_ServiceName, "st_xchngbook.l_ord_tot_qty= :%ld:",st_xchngbook.l_ord_tot_qty);
				fn_userlog( c_ServiceName, "st_ordbook.l_ord_tot_qty= :%ld:",st_ordbook.l_ord_tot_qty);
			}
		}

		MEMSET(c_call_source);
		i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_ACTION1,0,(char *)c_call_source,0);
		i_ferr [0] = Ferror32;

		if ( i_err[0] == -1 )
		{
			if ( Ferror32 != FNOTPRES )
			{
				fn_errlog( c_ServiceName, "S31260", FMLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/  
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			else if( Ferror32 == FNOTPRES )
			{
				/*** This code checks whether service is called from...other than Order link, EOS or Offline ***/
				if ( st_xchngbook.c_spl_flg != 'C' && strcmp(st_ordbook.c_channel,"SYS") !=0 && strcmp(st_ordbook.c_channel,"OFF") !=0 ) 
				{
					fn_userlog( c_ServiceName, "*** FuturePLUS SLTP product type validation fails ***");
					fn_errlog( c_ServiceName, "S31265", LIBMSG, c_err_msg  );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
		      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
          Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}
		}
		else /* success condition */
		{
			if ( strcmp(c_call_source,"PLC_SLTPFP") == 0 )
			{
				if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
				{
					fn_userlog( c_ServiceName, "*** FuturePLUS SLTP order placement ***");
				}


         /*** ver 12.4 starts ****/
      fn_userlog( c_ServiceName, "TODAYY st_xchngbook.c_spl_flg :%c:",st_xchngbook.c_spl_flg);
       if( st_xchngbook.c_spl_flg == 'P' )
       {
        i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_MTCH_CNTCT_KEY,0,(char *)c_profit_ordr,0);
        i_ferr [0] = Ferror32;

        if ( i_err[0] == -1 )
        {
        fn_userlog( c_ServiceName, "Called from :%s:",c_call_source);
        fn_errlog( c_ServiceName, "S31270", LIBMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
       rtrim(c_profit_ordr);
        fn_userlog(c_ServiceName,"TODAYY 2 Fresh Order refernce in profit:%s:",c_profit_ordr);
      }
      /*** ver 12.4 ends **/
			}
			else /*** This code should never execute ***/
			{
				fn_userlog( c_ServiceName, "Called from :%s:",c_call_source);
				fn_errlog( c_ServiceName, "S31275", LIBMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
		    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}
		i_err[0] = 0;
		i_ferr[0] = 0;
	}
	/*** Ver 6.0 ends here ***/

  /****************** VER 2.2 ADDITION STARTS **********************************/

  /*********** Ver 7.8 Starts here ***** This code is taken above ******
  strcpy((char *)v_user_id.arr,st_ordbook.c_user_id);

  SETLEN(v_user_id);
	if(DEBUG_MSG_LVL_5)
	{
  fn_userlog(c_ServiceName,"st_ordbook.c_user_id IS  :%s:", st_ordbook.c_user_id);
  fn_userlog(c_ServiceName,"v_user_id IS  :%s:", v_user_id.arr );
	fn_userlog(c_ServiceName,"st_ordbook.l_cse_id IS :%ld:",st_ordbook.l_cse_id); * Ver 2.9 *
	}

  if ( strcmp((char *)v_user_id.arr,"system") == 0 )
  {
		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"SYSTEM PLACING ORDER");
		}

   EXEC SQL  SELECT  decode(nvl(clm_bp_id,'*'),'*',uac_usr_id,clm_bp_id)
              INTO    :v_user_id
              FROM    uac_usr_accnts, clm_clnt_mstr
              WHERE   clm_mtch_accnt      = :st_ordbook.c_cln_mtch_accnt
              AND     uac_clm_mtch_accnt  = clm_mtch_accnt;

    if(( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    {
      fn_errlog( c_ServiceName, "S31280", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      ***  Ver 3.4 ***
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    SETNULL(v_user_id);

		if(DEBUG_MSG_LVL_5)
		{
    	fn_userlog(c_ServiceName,"BP ID IS  :%s:", v_user_id.arr);
		}
  }

  ***** Ver 7.8 Ends here ****/	

  /**********************   VER 2.2 ADDITION ENDS   *****************************/

/* 1.8 starts *********/
	if (st_ordbook.c_ctcl_id[0]=='\0' )  /* NULL Replaced with '\0' in Ver TOL */
	{
 		fn_userlog( c_ServiceName, "ERROR ctcl id valu is null :%s:", st_ordbook.c_ctcl_id); 
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	if(DEBUG_MSG_LVL_5)
	{
 		fn_userlog( c_ServiceName, "jagan ctcl id :%s:", st_ordbook.c_ctcl_id); 
	}

/* 1.8 ends *********/

	/*Added By sangeet to OVERCOME CNXIT problem of ctgry_indstk  Ver 2.2 Commented *
	if(strcmp(st_ordbook.c_undrlyng ,"CNXIT") == 0)
	{
			st_ordbook.c_ctgry_indstk = 'I'	;
			st_cntrct.c_ctgry_indstk = 'I'	;

			if(DEBUG_MSG_LVL_3)
			{
      fn_userlog(c_ServiceName,"c_ctgry_indstk is :%c: for :%s:",st_ordbook.c_ctgry_indstk,st_cntrct.c_undrlyng);
      fn_userlog(c_ServiceName,"c_ctgry_indstk is :%c: for :%s:",st_cntrct.c_ctgry_indstk,st_cntrct.c_undrlyng);
			}
	} */


	fn_init_ddr_pop ( st_xchngbook.c_pipe_id,TRADING_SECTION,F_CS);

  /***1.1 start ***/
    
  if(st_usr_prfl.c_user_id[0] == BPID)   
  {
    if(Fget32(ptr_fml_Ibuf,FFO_ALIAS,0,(char *)c_alias,0) == -1)
    {
			fn_errlog( c_ServiceName, "S31285", FMLMSG, c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/		
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

   /************************* Commented in Ver 7.9 ***************************
    i_level_exists = 0;
    EXEC SQL
    SELECT 1
    INTO   :i_level_exists
    FROM   clm_clnt_mstr
    WHERE  clm_mtch_accnt = :st_usr_prfl.c_cln_mtch_accnt 
	  AND    clm_bp_id      = :st_usr_prfl.c_user_id
    AND    clm_alias_name = :c_alias;

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)						*** Ver 3.7 Added NO_DATA_FOUND condn *** 
    {
      fn_errlog( c_ServiceName, "S31290",SQLMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      **  Ver 3.4 ***
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		if(DEBUG_MSG_LVL_5)
		{
    fn_userlog(c_ServiceName,"BP alias  is :%s:",c_alias);
		}

	  ****1.8
    fn_userlog(c_ServiceName,"BP channel  is :%s:",c_channel);
	  ****1.8*******

    if(i_level_exists != 1 )
    {
			fn_errlog( c_ServiceName, "B55006", "", c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      ***  Ver 3.4 ***
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    *************************** Ver 7.9 Comment ends *****************************/
    
    if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
    {
   		fn_userlog(c_ServiceName,"FMl alias name :%s:",c_alias);
		}
		/************* Ver 10.2 Starts Here ******************************/
	  MEMSET(c_sys_msg);
		if(st_cntrct.c_prd_typ == 'U')
		{	
			i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0);
			i_ferr [0] = Ferror32;
		
			if ( i_err[0] == -1 && Ferror32 != FNOTPRES )
			{
				fn_errlog( c_ServiceName, "S31295", FMLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      	Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  
      	Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); 
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		rtrim(c_sys_msg);
	 }
	 /******** Ver 10.2 Ends Here *********/	
		if(strcmp(c_sys_msg,"MY_EOS") !=0) /****** Check added in Ver 10.2 ******/
		{
			if( strcmp(c_alias,c_alias_nm) != 0 )         /** Ver 7.9 **/
    	{
       	fn_errlog( c_ServiceName, "B55006", "", c_err_msg  );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      	Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
      	Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
		} 

    strcpy(c_bp_id,st_usr_prfl.c_user_id);
  } 
  else
  {
		/***	Ver	3.3	Starts	***/

		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"For Normal USER ID ");
		}
	
    /***************** Commented in Ver 7.9 ********************************	
		EXEC SQL
			SELECT	NVL(CLM_BP_ID,'*')
			INTO		:c_bp_id
			FROM		CLM_CLNT_MSTR
			WHERE		CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt;

		if(SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31300",SQLMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      ***  Ver 3.4 ***
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    ************************* Ver 7.9 comment ends ***********************/

		if(c_bp_id [0] != '*')
		{
      strcpy((char *)v_user_id.arr,st_ordbook.c_user_id);

      SETLEN(v_user_id);
		}

		/***	Ver	3.3	Ends	***/

	/*strcpy(c_bp_id,"*");	Commented In Ver 3.3	***/
  }

	if(DEBUG_MSG_LVL_5)
	{
	fn_userlog(c_ServiceName,"The BP id is :%s: ,:%s:", c_bp_id,st_usr_prfl.c_user_id); 
	fn_userlog(c_ServiceName,"The Alias is :%s: ", c_alias); 
	}

/**Ver 3.3, This check is moved from above to the place after the BPID and alias verification so that normal customers
   for whom dt allowed flag is N, there user id will not get populated in Order book**/

	if(DEBUG_MSG_LVL_5)
	{
		fn_userlog(c_ServiceName,"v_user_id Is :%s:",v_user_id.arr);
	}

  /****** Ver 7.8 Starts Here *******

  EXEC SQL  SELECT  USR_DT_ALLWD_FLG
            INTO    :sql_usr_dt_allwd_flg
            FROM    USR_USER_MASTER
            WHERE   USR_USR_ID  = :v_user_id;

  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31305", SQLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      ***  Ver 3.4 ***
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  ******* Ver 7.8 Ends Here ******/


  if( sql_usr_dt_allwd_flg != 'Y')	
  {
    MEMSET(v_user_id);
  }
	if(DEBUG_MSG_LVL_5)
	{
  fn_userlog(c_ServiceName,"DT ALLOWED FLAG IS  :%c:", sql_usr_dt_allwd_flg);
  fn_userlog(c_ServiceName,"USER ID IS  :%s:", v_user_id.arr);
	}

  /****1.8
  fn_userlog(c_ServiceName,"BP channel  is :%s:",c_channel);
  ****1.8****/
		
	/***1.1 end ***/	
	if(DEBUG_MSG_LVL_5)
	{
	fn_userlog( c_ServiceName, "st_xchngbook.c_xchng_cd :%s:", st_xchngbook.c_xchng_cd );
	}

	/*** Following Commented In Ver 4.6 
	EXEC SQL
	SELECT to_char( exg_nxt_trd_dt, 'DD-Mon-YYYY' ),
				 to_char( exg_nxt_trd_dt, 'YYYYMMDD' ), ***/

  /****Ver 10.3 Query Changed to Uppercase***/

	EXEC SQL
	SELECT TO_CHAR( GREATEST(EXG_NXT_TRD_DT,EXG_TMP_TRD_DT), 'DD-Mon-YYYY' ),			  /*** Ver 4.6 ***/
				 TO_CHAR( GREATEST(EXG_NXT_TRD_DT,EXG_TMP_TRD_DT), 'YYYYMMDD' ),					/*** Ver 4.6 ***/
				 TO_CHAR( EXG_NXT_TRD_DT, 'DD-Mon-YYYY' ),                              	/*** Ver 4.6 ***/
				 TO_CHAR( SYSDATE, 'DD-Mon-YYYY hh24:mi:ss' )	
	INTO	 :c_trd_dt,
				 :c_date,
				 :c_nrml_trd_dt,        /*** Ver 4.6 ***/
				 :c_sysdate
	FROM	 EXG_XCHNG_MSTR
	WHERE	 EXG_XCHNG_CD = :st_xchngbook.c_xchng_cd
 /***  AND    exg_mkt_typ  = 'D';  *****commented in ver 10.3***/
	AND		 EXG_MKT_TYP	=	:c_mrket_typ;   /*** Ver 10.3 Hard Parsing ****/
	
	if ( SQLCODE != 0 )
	{
   	fn_errlog( c_ServiceName, "S31310",SQLMSG,c_err_msg);
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
  SETNULL ( c_trd_dt );
  SETNULL ( c_sysdate );
  SETNULL ( c_date );

	strcpy( st_xchngbook.c_mod_trd_dt, (char *) c_trd_dt.arr);
	strcpy( st_ordbook.c_trd_dt, (char *) c_trd_dt.arr);

	/*** Ver 4.6 Starts ***/
  /*** Following checks whether the underlying in which client trying to place order will come under corporate action ***/

  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"Underlying Is :%s:",st_ordbook.c_undrlyng);
    fn_userlog(c_ServiceName,"Exchange Trade date Is :%s:",c_nrml_trd_dt.arr);
  }

	i_corp_rec_exists = 0 ;

	if(strcmp(st_ordbook.c_channel,"OFF") != 0)
	{
   
  	EXEC SQL
    	SELECT  1
    	INTO   :i_corp_rec_exists
    	FROM   FCM_FO_CORP_MSTR
    	WHERE  FCM_UNDRLYNG = :st_ordbook.c_undrlyng
    	AND    FCM_ACTN_DT  = :c_nrml_trd_dt
			/***  AND    FCM_RUN_STTS != 'P';  *****commented in ver 10.3***/ 
			AND    FCM_RUN_STTS != :c_run_stts;    /****Ver 10.3 Hard Parsing****/

  	if ( i_corp_rec_exists == 1)
  	{
    	fn_errlog ( c_ServiceName, "B28518", DEFMSG, c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  	}
	}
	
  /*** Ver 4.6 Ends   ***/
	

	if(DEBUG_MSG_LVL_5)
	{
	fn_userlog( c_ServiceName, " c_spl_flg :%c:", st_xchngbook.c_spl_flg );
	}

	c_trdng_psswrd_flg = YES;


	/*** Following moved from below in Ver 4.9 ***/
	if( st_xchngbook.c_slm_flg == MARKET )
  {
	  /** Commented in Ver 7.5 **

    i_ip_len = sizeof ( struct vw_contract );
    i_op_len = sizeof ( struct vw_cntrct_qt );

    fn_cpy_ddr ( st_cntrct.c_rout_crt );
    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_cntrct,
                                &st_cntrct_qt,
                                "vw_contract",
                                "vw_cntrct_qt",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_GET_QT" );
		 ****/
			
	   /** Ver 7.5 Starts **/

     i_returncode = fn_get_qt(c_ServiceName,
                             &st_cntrct,
                             &st_cntrct_qt,
                             c_err_msg);

     /** Ver 7.5 Ends **/

     if ( i_returncode != SUCC_BFR )
     {
       fn_errlog( c_ServiceName, "S31315", LIBMSG, c_err_msg  );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
       Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
     	l_ord_lmt_rt = st_cntrct_qt.l_lst_trdd_prc;
    }
    else
    {
     	l_ord_lmt_rt = st_xchngbook.l_ord_lmt_rt;
    }



/********** ver 12.4 starts **********/
fn_userlog(c_ServiceName,"TODAYY 3 :%c: %c:",st_cntrct.c_prd_typ,st_xchngbook.c_spl_flg);
if( st_cntrct.c_prd_typ == SLTP_FUTUREPLUS && st_xchngbook.c_spl_flg == 'P' )
{
      c_source_flg = 'P';
      c_rqst_typ  = 'P';
      c_sub_rqst = 'A';
      l_sltp_trg_prft = 0;

      EXEC SQL
      SELECT FOD_STP_LSS_TGR
      INTO :l_sltp_trg_prft
      FROM FOD_FO_ORDR_DTLS
      WHERE FOD_FC_FLAG= 'C'
      AND FOD_LMT_MRKT_SL_FLG ='S'
      AND Decode(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )= :c_profit_ordr; /*** Fresh reference ***/

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31320",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      EXEC SQL
       SELECT  NVL(SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),0),
               NVL(SUM(FTD_EXCTD_QTY),0)
              INTO    :d_frsh_exe_val,
                      :li_tot_exec_qty
              FROM    FTD_FO_TRD_DTLS
              WHERE   FTD_ORDR_RFRNC = :c_profit_ordr; /*** Fresh reference ***/

       if( SQLCODE != 0 )
       {
         fn_errlog( c_ServiceName, "S31325",SQLMSG,c_err_msg);
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
         Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
         Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        d_avg_prc  = (double) (d_frsh_exe_val / li_tot_exec_qty);

        fn_userlog( c_ServiceName, "st_ordbook.c_ordr_flw.:%c: AVG :%lf:",st_ordbook.c_ordr_flw,d_avg_prc);

        i_returncode  = fn_call_svc_fml ( c_ServiceName,
                                           c_err_msg,
                                           "SFO_LMT_PRC_CAL",
                                           0,
                                           15,
                                           1,
                                           FFO_USR_ID                 , (char *)st_usr_prfl.c_user_id,
                                           FFO_SSSN_ID                , (char *)&st_usr_prfl.l_session_id,
                                           FFO_XCHNG_CD               , (char *)st_ordbook.c_xchng_cd,
                                           FFO_ORDR_FLW               , (char *)&st_ordbook.c_ordr_flw,
                                           FFO_UNDRLYNG               , (char *)st_ordbook.c_undrlyng,
                                           FFO_EBA_MTCH_ACT_NO        , (char *)st_usr_prfl.c_cln_mtch_accnt,
                                           FFO_RQST_TYP               , (char *)&c_rqst_typ ,
                                           FFO_PRDCT_TYP              , (char *)&st_ordbook.c_prd_typ,
                                           FFO_OPT_TYP                , (char *)&st_ordbook.c_opt_typ,
                                           FFO_STRK_PRC               , (char *)&st_ordbook.l_strike_prc,
                                           FFO_STP_LSS_TGR            , (char *)&l_sltp_trg_prft,
                                           FFO_EXPRY_DT               , (char *)st_ordbook.c_expry_dt,
                                           FFO_SOURCE_FLG             , (char *)&c_source_flg ,
                                           FFO_DLVRY_ALLWD            , (char *)&c_sub_rqst,
                                           FFO_CHNG_OI                , (char *)&d_prft_percntg,
                                           FFO_LMT_RT                 , (char *)&l_ret_limit_rt ,NULL
                                        );


      if (i_returncode != 0)
      {
       fn_errlog( c_ServiceName, "S31330", LIBMSG, c_err_msg  );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
       Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      fn_userlog( c_ServiceName, "st_ordbook.c_ordr_flw=:%c:l_sltp_trg_prft=:%ld:l_ret_limit_rt:%ld:st_ordbook.l_ord_lmt_rt=:%ld:",
      st_ordbook.c_ordr_flw,l_sltp_trg_prft,l_ret_limit_rt,st_ordbook.l_ord_lmt_rt);


      /** The profit order limit price should be above the Stop Loss Trigger price + X% of Stop Loss trigger Price **/
      if( st_ordbook.c_ordr_flw == 'S' && (l_ret_limit_rt > st_ordbook.l_ord_lmt_rt))
      {
      strcpy(c_err_msg,"Profit Limit Price should be above the SLTP+X% SLTP FOR SELL");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if( st_ordbook.c_ordr_flw == 'B' && (l_ret_limit_rt < st_ordbook.l_ord_lmt_rt))
      {
       fn_userlog( c_ServiceName, "Profit Limit Price should be below  the SLTP+X% SLTP FOR BUY");
      strcpy(c_err_msg,"Profit Limit Price should be below  the SLTP+X% SLTP FOR BUY");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      /** Profit Limit Price cannot be less than Fresh Order Price In case of Fresh Buy Order **/
      if( st_ordbook.c_ordr_flw == 'S' && ( st_ordbook.l_ord_lmt_rt < d_avg_prc ))
      {
       fn_userlog( c_ServiceName, "Profit Limit Price cannot be less than Fresh Order Price BUY");
      strcpy(c_err_msg,"Profit Limit Price cannot be less than Fresh Order Price");
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if( st_ordbook.c_ordr_flw == 'B' && ( st_ordbook.l_ord_lmt_rt > d_avg_prc))
      {
       fn_userlog( c_ServiceName, "Profit Limit Price cannot be greater than Fresh Order Price SELL");
      strcpy(c_err_msg,"Profit Limit Price cannot be greater than Fresh Order Price");
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

}

/*** ver 12.4 ends *******/
	
	/*** Moved from below in Ver 4.9 Ends ***/	

	/***** code moved  from line 2171 for ver 9.7 Starts ****/

if ( ( st_xchngbook.c_spl_flg == CLIENT_SQROFF ) ||
        ( st_xchngbook.c_spl_flg == SYSTEM_SQUAREOFF)  ||
        ( st_xchngbook.c_spl_flg == IMTM_SYS_SQUAREOFF )  ||                  /*** Ver 7.0 ***/
        ( st_xchngbook.c_spl_flg == LMTNEG_SYS_SQUAREOFF )  ||                /*** Ver 7.0 ***/
        ( st_xchngbook.c_spl_flg == JOINT_SQUAREOFF ) || ( st_xchngbook.c_spl_flg == 'P') )  /** P spl flg added ver 12.4 ***/ 
  {
    if(st_cntrct.c_prd_typ == 'U')
    {
      MEMSET(c_sys_msg);
      i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0);
      i_ferr [0] = Ferror32;

      if ( i_err[0] == -1 )
      {
        if ( Ferror32 != FNOTPRES )
        {
          fn_errlog( c_ServiceName, "S31335", FMLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); 
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        else if( Ferror32 == FNOTPRES )
        {
         if ( DEBUG_MSG_LVL_3 ) 
         {
           fn_userlog(c_ServiceName," 666");
         }
          i_mtm_flg =2;       /* if called by SLTP FP Customer from ASP */
          strcpy(c_sys_msg,"COVER_SLTP");
        }
      }
      else /* success condition */
      {
        /*** if ( i_excp_flag == 1)  *** EXCPT_EOS added in Ver 7.7 *** commented in 9.7 ****
        {
            strcpy(c_sys_msg,"EXCPT_EOS");
        }    ****/

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName," 777");
          fn_userlog(c_ServiceName,"c_sys_msg =:%s:",c_sys_msg); /* if called from backoffice EOS */
        }
        if (( (strcmp(c_sys_msg,"EOS") == 0 || strcmp(c_sys_msg,"OFF") == 0 || strcmp(c_sys_msg,"EXCPT_EOS") == 0 )  && ( st_xchngbook.c_spl_flg == SYSTEM_SQUAREOFF || st_xchngbook.c_spl_flg == IMTM_SYS_SQUAREOFF || st_xchngbook.c_spl_flg == LMTNEG_SYS_SQUAREOFF  ) ))   /***  Check for IMTM_SYS_SQUAREOFF  and LMTNEG_SYS_SQUAREOFF added in Ver 7.0 ***/  /*** EXCPT_EOS added in Ver 7.7 ***/
        {
          i_mtm_flg=1;
        }
        else if ( strcmp(c_sys_msg,"MY_EOS") == 0 )  /*** Else if added in Ver 9.7 ***/
        {
          i_mtm_flg=2;
        }
      }

      if(DEBUG_MSG_LVL_3)
      {
      fn_userlog(c_ServiceName,"In fn_chk_cntrct_sltpfp_sqoff");
      }

      rtrim(st_cntrct.c_expry_dt);

      /*** if ( i_mtm_flg != 1 && i_mtm_flg != 2 ) *** Ver 6.2 ***
      {	*** Commented in Ver 9.7  ***/
        i_returncode = fn_chk_cntrct_sltpfp_sqoff(c_ServiceName,&st_cntrct,&c_fum_mrkt_typ,&c_fcm_mrkt_typ,&st_err_msg );
				if ( i_returncode != 0 )  
				{
					 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
					 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      
					 Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); 
					 Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); 
					 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				} 
      /*** }  Commented in Ver 9.7  ***/
    }
	}

    /*** moved code to line 1929 in ver 9.7 Ends ****/

	if (( st_xchngbook.c_spl_flg != 'J' ) 					 && 
	   ( st_xchngbook.c_spl_flg != SYSTEM_SQUAREOFF) &&
		 ( st_xchngbook.c_spl_flg	!= L2_ORDER) 				 &&
		 ( st_xchngbook.c_spl_flg	!= L3_ORDER) 				 &&
     ( st_xchngbook.c_spl_flg != ROLLOVER)         &&         /** Ver 4.5 **/
     ( st_xchngbook.c_spl_flg != ROLLOVER_WITH_SPREAD)  &&    /** Ver 10.8 **/
     ( st_cntrct.c_prd_typ != SLTP_FUTUREPLUS || (st_cntrct.c_prd_typ == SLTP_FUTUREPLUS && st_xchngbook.c_spl_flg == CLIENT_SQROFF ))    &&         /** Ver 4.7 **** OR condition added in Ver 9.3 as session check was getting skipped while Placing Cover Order from Open Position ***  ***/
		 ( st_xchngbook.c_spl_flg	!= ARBITRAGE )			&&
     ( st_xchngbook.c_spl_flg != IMTM_SYS_SQUAREOFF ) &&       /*** Ver 7.0 ***/
     ( st_xchngbook.c_spl_flg != LMTNEG_SYS_SQUAREOFF ) &&      /*** Ver 7.0 ***/
		 ( strcmp(st_usr_prfl.c_user_id,"system") != 0 ) &&
     ( c_1clk_flg != 'Y' ) ) 				/**Ver 2.6, added L2,L3 and arbitrage skipping **//** Ver 12.3 c_1clk_flg added **/
	{
   if (  strcmp(c_sys_msg , "MY_EOS") != 0 )       /** Ver 9.7 ***/
   {
  	i_err[0] = Fget32( ptr_fml_Ibuf, FFO_TRD_PSSWD, 0,
                         		(char *)c_usr_usr_psswrd.arr,0);
  	i_ferr [0] = Ferror32;

  	if (( i_err[0] == -1 ) && ( i_ferr[0] != FNOTPRES ))
  	{
    	fn_errlog( c_ServiceName, "S31340", Fstrerror32(i_ferr[0]),c_err_msg);
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
/***Commented for Ver 2.6
  	else if (( i_err[0] == -1 ) && ( i_ferr[0] == FNOTPRES ))
  	{
			c_trdng_psswrd_flg = NO;
  	}
  	else 
  	{
			c_trdng_psswrd_flg = YES;
  	}
********/

		/**Ver 2.6 starts **/

		/*** Following commented and taken above in Ver 4.9 
		if( st_xchngbook.c_slm_flg == MARKET )
		{
			i_ip_len = sizeof ( struct vw_contract );
			i_op_len = sizeof ( struct vw_cntrct_qt );

			fn_cpy_ddr ( st_cntrct.c_rout_crt );
			i_returncode = fn_call_svc( c_ServiceName,
																	c_err_msg,
																	&st_cntrct,
																	&st_cntrct_qt,
																	"vw_contract",
																	"vw_cntrct_qt",
																	i_ip_len,
																	i_op_len,
																	0,
																	"SFO_GET_QT" );
			if ( i_returncode != SUCC_BFR )
			{
				fn_errlog( c_ServiceName, "S31345", LIBMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      ***  Ver 3.4 ***
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
				l_ord_lmt_rt = st_cntrct_qt.l_lst_trdd_prc;
		}
		else
		{
				l_ord_lmt_rt = st_xchngbook.l_ord_lmt_rt;
		}
		commented and taken above in Ver 4.9 Ends ****/

		/**Call function for trading limit check **/
		i_returncode = fn_chk_trdng_limit(c_ServiceName,
																			st_xchngbook.l_ord_tot_qty,
																			l_ord_lmt_rt,
																			&c_trdng_psswrd_flg,
																			&st_usr_prfl,
																			&st_err_msg );
		if ( i_returncode == -1 )
		{
			fn_errlog( c_ServiceName, "S31350", LIBMSG, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	
		if(DEBUG_MSG_LVL_5)
		{ 
		fn_userlog( c_ServiceName, "c_trdng_psswrd_flg:%c:", c_trdng_psswrd_flg );
		}
		/**Ver 2.6 ends **/
		/*** Ver 11.5 Starts ***/
		if (c_trdng_psswrd_flg == YES && strcmp(c_ven_nm.arr,"SENSIBULL") == 0)
    {
      fn_errlog( c_ServiceName, "S31355", "Please try placing order with lesser order value using sensibull", c_err_msg );
			strcpy(c_err_msg,"Please try placing order with lesser order value from sensibull");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		/*** Ver 11.5 Ends ***/

		SETLEN( c_usr_usr_psswrd );
		if ( c_trdng_psswrd_flg == YES )
		{
			strcpy( c_temp_psswrd, (char *)c_usr_usr_psswrd.arr );
		}
	 }
	 else if( strcmp ( c_sys_msg , "MY_EOS") == 0 )    /** Else part added in Ver 9.7 **/
   {
     c_trdng_psswrd_flg = NO;
   }

		/*** Commented in Ver 4.2 ***
  	i_returncode =  fn_check_user ( c_ServiceName,
                                 		&st_usr_prfl ,
																	  c_temp_psswrd,
																		c_trdng_psswrd_flg,
																		&st_err_msg );
		*****************************/

		/*** Added in Ver 4.2 ***/
		i_returncode =  fn_check_user_ip ( c_ServiceName,
																			 &st_usr_prfl ,
																			 c_temp_psswrd,
																			 c_trdng_psswrd_flg,
																			 c_ip_address,
                                     	 c_txn_flg,                   /*** Ver 9.5 ***/
																			 &st_err_msg );

		/*************************/

  	if ( i_returncode == -1 )
  	{
			fn_errlog( c_ServiceName, "S31360", LIBMSG, c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );

				/***	Ver	3.4	Starts	***/

			if ( c_trdng_psswrd_flg	==	'Y'	)
			{
				i_actn_id = 1;
			}
			else
			{
				i_actn_id = -1;
			}

			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 ); 
	    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/ 
			/***	Ver	3.4	Ends	***/
	     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		} 
	}

  /**** Ver 8.0 *** Starst Here ****/
  if(DEBUG_MSG_LVL_4)
  {
    fn_userlog(c_ServiceName," c_nkd_blkd_flg :%c:",c_nkd_blkd_flg);
  }

  if( c_nkd_blkd_flg == 'A'  || c_nkd_blkd_flg == 'Z' || c_nkd_blkd_flg=='G' ) /*** Auto MTM Process Call (System SQ order) ***/ /** Z ,G added in ver 12.4 **/
  {
    MEMSET(c_ip_address);
    sprintf(c_ip_address,"%c",c_nkd_blkd_flg);
  }
  /*** Ver 8.0 *** Ends Here ***/

	/*** Ver 4.9 Starts ***/
  /**Call function for order maximum limit check **/

  c_ord_val_flg = 'N';
  c_cumopn_val_flg = 'N';
	d_netadj_ord_val = 0.0 ; /*** Set to zero in case of placement ****/
	c_serv_call_flg = 'P' ; /*** Set to 'P' in case of placement ****/

  if(DEBUG_MSG_LVL_5)
  {
   fn_userlog( c_ServiceName, "c_ord_val_flg   before  :%c:", c_ord_val_flg );
	 fn_userlog( c_ServiceName, "Before fn_chk_ord_max_limit, st_ordbook.c_channel :%s:",st_ordbook.c_channel );/** Ver 9.9 **/	
  }

	if(strcmp(st_ordbook.c_channel,"OFF") != 0)               /** Ver 9.9 **/
	{
  	i_returncode = fn_chk_ord_max_limit(c_ServiceName,
        	                              st_usr_prfl.c_cln_mtch_accnt ,
    		                                st_xchngbook.l_ord_tot_qty,
          	                            l_ord_lmt_rt,
																				d_netadj_ord_val,
																				c_serv_call_flg,
                	                      st_xchngbook.c_slm_flg,
                  	                    st_cntrct.c_xchng_cd ,
                    	                  &c_ord_val_flg,
                      	                &c_cumopn_val_flg,
                        	              &st_err_msg );
    if ( i_returncode == -1 )
    {
   	  fn_errlog( c_ServiceName, "S31365", LIBMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/ 
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	}
	
  if(DEBUG_MSG_LVL_5)
  {
   fn_userlog( c_ServiceName, "c_ord_val_flg     :%c:", c_ord_val_flg );
   fn_userlog( c_ServiceName, "c_cumopn_val_flg  :%c:", c_cumopn_val_flg);
   fn_userlog( c_ServiceName, " st_err_msg.c_err_msg :%s:", st_err_msg.c_err_msg );

  }

	if( !strstr( st_xchngbook.c_xchng_rmrks,"Physical Settlement EOS") )	/*** Added in Ver 10.6 ***/
	{
  if(c_cumopn_val_flg == 'Y')
  {
		if( (st_cntrct.c_prd_typ == FUTURE_PLUS) && (st_xchngbook.c_spl_flg !=  CLIENT_SQROFF ) && 
				(st_xchngbook.c_spl_flg != SYSTEM_SQUAREOFF )
			 ) /*** Added in Ver 13.0 ***/
		{ 
			/**** Added in Ver 13.4  ****/
			EXEC SQL
      SELECT  NVL(FFP_OPNPSTN_FLW,'N'),
            NVL(FFP_OPNPSTN_QTY,0),
            DECODE(FFP_OPNPSTN_FLW,'S',GREATEST(ABS(FFP_IBUY_QTY),ABS(FFP_EXBUY_QTY)),
                                   'B',GREATEST(ABS(FFP_ISELL_QTY), ABS(FFP_EXSELL_QTY)),0)
      INTO
        :c_cntrct_pstn_flw,
        :l_cntrct_pstn_qty,
        :l_cvr_pstn_qty
      FROM   FFP_FO_FUTURES_PSTN
      WHERE  FFP_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
      AND    FFP_UNDRLYNG       = :st_cntrct.c_undrlyng
      AND    FFP_EXPRY_DT       = :c_expiry_dt
      AND    FFP_PRDCT_TYP      = :st_cntrct.c_prd_typ
      AND    FFP_XCHNG_CD       = :st_cntrct.c_xchng_cd;

			if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      {
        fn_errlog( c_ServiceName, "S31370", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog( c_ServiceName,"c_cntrct_pstn_flw:%c: l_cntrct_pstn_qty:%ld:l_cvr_pstn_qty:%ld:",
                                   c_cntrct_pstn_flw,l_cntrct_pstn_qty,l_cvr_pstn_qty);
        fn_userlog( c_ServiceName,"st_xchngbook.c_ordr_flw:%c: st_xchngbook.l_ord_tot_qty:%ld:",
                                   st_xchngbook.c_ordr_flw,st_xchngbook.l_ord_tot_qty);
      }

      if ( c_cntrct_pstn_flw != st_xchngbook.c_ordr_flw && c_cntrct_pstn_flw !='N' &&
           abs(l_cntrct_pstn_qty) >=  abs(st_xchngbook.l_ord_tot_qty)+abs(l_cvr_pstn_qty))

      {
        fn_userlog( c_ServiceName, "SKIP Order Value exceeding max Cumulative open order value.");
        c_sqroff_flg = 'Y';
      }
    }

		if(c_sqroff_flg == 'Y')
    {
        fn_userlog( c_ServiceName, "SKIP Order Value exceeding max Cumulative open order value.");
    } /*** Ver 13.4 Ends ***/
    else
    {
    	fn_userlog( c_ServiceName, "Order Value exceeding max Cumulative open order value .");
    	fn_errlog( c_ServiceName, "B21077", "DEFMSG", c_err_msg  );
    	strcat(c_err_msg,st_err_msg.c_err_msg);
    	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
    	Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
		}
   }
	}

  if(c_ord_val_flg == 'Y')
  {
   if ( (st_cntrct.c_prd_typ == SLTP_FUTUREPLUS) && ( (strcmp(c_sys_msg,"EOS") == 0 || strcmp(c_sys_msg,"MY_EOS") == 0 
				|| strcmp(c_sys_msg,"EXCPT_EOS") == 0) ) ) /*** if loop added in  Ver 11.7 ***/
   {
     fn_userlog( c_ServiceName, "SKIP check of Order value Exceeding Max Market/Limit value allowed.");
   }
   else
   {
    fn_userlog( c_ServiceName, "Order value Exceeding Max Market/Limit value allowed.");
    fn_errlog( c_ServiceName, "B23035", "DEFMSG", c_err_msg  );
    strcat(c_err_msg,st_err_msg.c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
   }
	}

  /*** Ver 4.9 Ends   ***/

 
 	if(DEBUG_MSG_LVL_3)	/*** Ver 4.2 ***/
	{
		fn_userlog(c_ServiceName,"ip address:%s:",c_ip_address);
	}

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"===============PRDCT TYPE===========:%c:",st_cntrct.c_prd_typ);
	}

	if ( ( st_xchngbook.c_spl_flg == CLIENT_SQROFF ) || 
        ( st_xchngbook.c_spl_flg == SYSTEM_SQUAREOFF)  ||
        ( st_xchngbook.c_spl_flg == IMTM_SYS_SQUAREOFF )  ||                  /*** Ver 7.0 ***/
        ( st_xchngbook.c_spl_flg == LMTNEG_SYS_SQUAREOFF )  ||                /*** Ver 7.0 ***/
	 			( st_xchngbook.c_spl_flg == JOINT_SQUAREOFF ) )
	{ 
		if(st_cntrct.c_prd_typ == 'F')
    {

    if(DEBUG_MSG_LVL_3)                                               /* Ver 2.8 */ 
    {
	  fn_userlog(c_ServiceName,"In fn_chk_cntrct_sqoff");
    }

			/*** Ver 9.8 starts **/
    	if( c_trail_flg == 'Y')
    	{
      	i_returncode = fn_chk_trail_cntrct_sqoff( c_ServiceName,
                                            			&st_cntrct,
                                            			&c_fum_mrkt_typ,
                                            			&c_fcm_mrkt_typ, 
                                            			&st_err_msg );
    	}
			 /*** Ver 9.8 Ends ***/
			else
			{
  			i_returncode = fn_chk_cntrct_sqoff(	c_ServiceName,
   		                            					&st_cntrct,
																						&c_fum_mrkt_typ,                 /* Ver 2.8 */
																						&c_fcm_mrkt_typ,                 /* Ver 2.8 */
     		                          					&st_err_msg );
		 }
	 }

    /********* Ver 2.4 Starts *******************/
		
		else if(st_cntrct.c_prd_typ == 'P')
    {
      i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0);
      i_ferr [0] = Ferror32;

			/*** 2.5 commented
      if ( i_err[0] == -1  && Ferror32 != FNOTPRES )
      {
          fn_errlog( c_ServiceName, "S31375", FMLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else
      {
           fn_userlog(c_ServiceName," 555");

           if( Ferror32 == FNOTPRES )
           {
              fn_userlog(c_ServiceName," 666");
              i_mtm_flg =2;       * if called by FP Customer from ASP *
           }
           else if (Ferror32 != FNOTPRES)
           {
              fn_userlog(c_ServiceName," 777");
              fn_userlog(c_ServiceName,"c_sys_msg =:%s:",c_sys_msg); * if called from backoffice EOS  *
              if (strcmp(c_sys_msg,"EOS") == 0  && st_xchngbook.c_spl_flg == SYSTEM_SQUAREOFF)
              i_mtm_flg=1;
           }
      }
			**** 2.5 ends */

			/* 2.5 added */
      if ( i_err[0] == -1 )
			{
				if ( Ferror32 != FNOTPRES )
      	{
          fn_errlog( c_ServiceName, "S31380", FMLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/  
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
        else if( Ferror32 == FNOTPRES )
        {
          if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
          {
   					fn_userlog(c_ServiceName," 666");
					}
					i_mtm_flg =2;       /* if called by FP Customer from ASP */
        }
			}
			else /* success condition */
			{
				if(DEBUG_MSG_LVL_3)
				{
        	fn_userlog(c_ServiceName," 777");
        	fn_userlog(c_ServiceName,"c_sys_msg =:%s:",c_sys_msg); /* if called from backoffice EOS  */
				}
        if ((strcmp(c_sys_msg,"EOS") == 0 )  && ( st_xchngbook.c_spl_flg == SYSTEM_SQUAREOFF || st_xchngbook.c_spl_flg == IMTM_SYS_SQUAREOFF || st_xchngbook.c_spl_flg == LMTNEG_SYS_SQUAREOFF ))    /***  Check for IMTM_SYS_SQUAREOFF  and LMTNEG_SYS_SQUAREOFF added in Ver 7.0 ***/ 
				{
          i_mtm_flg=1;
				}
      }
			/* 2.5 added ends */

      if(DEBUG_MSG_LVL_3)                                      /* Ver 2.8 */
      {
	    fn_userlog(c_ServiceName,"In fn_chk_cntrct_fp_sqoff");
      }

      i_returncode = fn_chk_cntrct_fp_sqoff(c_ServiceName,&st_cntrct,&c_fum_mrkt_typ,&c_fcm_mrkt_typ,&st_err_msg ); /* Ver 2.8 */  
    }

	  /********* Ver 2.4 Ends *******************/

    /*** Added in Ver 4.7 ***/
    /** commented in Ver 9.7 and code moved at line 1767 **
    else if(st_cntrct.c_prd_typ == 'U')
    {
      MEMSET(c_sys_msg);
      i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0);
      i_ferr [0] = Ferror32;

      if ( i_err[0] == -1 )
      {
        if ( Ferror32 != FNOTPRES )
        {
          fn_errlog( c_ServiceName, "S31385", FMLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); *** Ver 8.2 ***
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); *** Ver 8.2 ***
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        else if( Ferror32 == FNOTPRES )
        {
         if ( DEBUG_MSG_LVL_3 ) **** Added in Ver 9.6 ****
         {
   				 fn_userlog(c_ServiceName," 666");
				 }
					i_mtm_flg =2;       * if called by SLTP FP Customer from ASP *
					strcpy(c_sys_msg,"COVER_SLTP");
        }
      }
      else * success condition *
      {
				if ( i_excp_flag == 1)	*** EXCPT_EOS added in Ver 7.7 ***
				{
						strcpy(c_sys_msg,"EXCPT_EOS");
				}

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName," 777");
          fn_userlog(c_ServiceName,"c_sys_msg =:%s:",c_sys_msg); * if called from backoffice EOS *
        }
        if (( (strcmp(c_sys_msg,"EOS") == 0 || strcmp(c_sys_msg,"OFF") == 0 || strcmp(c_sys_msg,"EXCPT_EOS") == 0 )  && ( st_xchngbook.c_spl_flg == SYSTEM_SQUAREOFF || st_xchngbook.c_spl_flg == IMTM_SYS_SQUAREOFF || st_xchngbook.c_spl_flg == LMTNEG_SYS_SQUAREOFF  ) ))   ***  Check for IMTM_SYS_SQUAREOFF  and LMTNEG_SYS_SQUAREOFF added in Ver 7.0 ***  *** EXCPT_EOS added in Ver 7.7 ***
        {
          i_mtm_flg=1;
        }
      }

      if(DEBUG_MSG_LVL_3)
      {
      fn_userlog(c_ServiceName,"In fn_chk_cntrct_sltpfp_sqoff");
      }

      rtrim(st_cntrct.c_expry_dt);

			if ( i_mtm_flg != 1 && i_mtm_flg != 2 ) *** Ver 6.2 ***
			{
      	i_returncode = fn_chk_cntrct_sltpfp_sqoff(c_ServiceName,&st_cntrct,&c_fum_mrkt_typ,&c_fcm_mrkt_typ,&st_err_msg );
			}
    }

    ** Commented Ver 9.7 Ends **/

    if (st_cntrct.c_prd_typ != 'U')
    {
    /*** Ver 4.7 Ends ***/

		/********* Ver 2.4 Ends *******************/

		/*******************************************************************************/
		/*****************1.5 by sangeet for false position in square off **************/
		/*******************************************************************************/
		EXEC SQL
    SELECT	FFP_OPNPSTN_QTY,
						DECODE(FFP_OPNPSTN_FLW,'S',GREATEST(ABS(FFP_IBUY_QTY),ABS(FFP_EXBUY_QTY)),'B',GREATEST( ABS(FFP_ISELL_QTY), ABS(FFP_EXSELL_QTY)),0)	/*Ver 3.4  Added field */
    INTO   :l_opnpstn_qty,
					 :l_cvr_qty   /*Ver 3.4  Added field */
    FROM   FFP_FO_FUTURES_PSTN
    WHERE  FFP_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
    AND    FFP_UNDRLYNG       = :st_cntrct.c_undrlyng
    AND    FFP_EXPRY_DT       = :c_expiry_dt
    AND    FFP_PRDCT_TYP      = :st_cntrct.c_prd_typ        /*Ver 2.4 */
    AND    FFP_XCHNG_CD       = :st_cntrct.c_xchng_cd;
		
    if(SQLCODE != 0 )
    {
				fn_errlog( c_ServiceName, "S31390", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
	      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
  			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

   /*** ver 10.8 starts RWS ORDER IS PLACED AND CUST IS TRYING CLIENT SQOFF ***/
    l_rws_qty = 0;

    EXEC SQL
    SELECT NVL(SUM(NVL(FOD_ORDR_TOT_QTY,0)-NVL(FOD_EXEC_QTY,0)-NVL(FOD_CNCL_QTY,0)-NVL(FOD_EXPRD_QTY,0)),0)
      INTO :l_rws_qty        
      FROM FOD_FO_ORDR_DTLS
     WHERE
           FOD_PRDCT_TYP  = :st_cntrct.c_prd_typ
       AND FOD_EXPRY_DT   = :c_expiry_dt
       AND FOD_XCHNG_CD   = :st_cntrct.c_xchng_cd 
       AND FOD_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
       AND FOD_SPL_FLAG = 'O'
       AND FOD_UNDRLYNG       = :st_cntrct.c_undrlyng
       AND FOD_ORDR_STTS IN ('R','P','Q','O');


    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
        fn_errlog( c_ServiceName, "S31395", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); 
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
     l_cvr_qty = l_cvr_qty+l_rws_qty;
     
    /*** ver 10.8 ends ****/ 
		if(DEBUG_MSG_LVL_0)
		{
	  fn_userlog( c_ServiceName, " C_ORDR_FLW :%c:", st_xchngbook.c_ordr_flw );
	  fn_userlog( c_ServiceName, " L_OPNPSTN_QTY :%ld:", l_opnpstn_qty );
    fn_userlog( c_ServiceName, " RWS_QTY :%ld: CVR_QTY :%ld:",l_rws_qty,l_cvr_qty);  /*** ver 10.8 ***/
		}

		if(st_xchngbook.c_ordr_flw == 'B' && l_opnpstn_qty > 0)
		{
				fn_errlog( c_ServiceName, "S31400", "Improper square off - Buy Combination, Please contact Customer Service", c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/  
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		if(st_xchngbook.c_ordr_flw == 'S' && l_opnpstn_qty < 0)
		{
				fn_errlog( c_ServiceName, "S31405", "Improper square off - Sell Combination, Please contact Customer Service", c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
 				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
			
		/*******************************************************************************/
		/***********1.5 by sangeet for false position in square off  ends **************/
		/*******************************************************************************/

		/***	Ver	3.4	Squre Off Qty Check Start ***/

		if ( st_xchngbook.l_ord_tot_qty <= 0 )
		{
			fn_userlog(c_ServiceName,"Total Order Qty Is :%ld:",st_xchngbook.l_ord_tot_qty);
			fn_errlog( c_ServiceName, "S31410", "Square Off Qty Can Not Be Zero/Negative. ", c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,"Square Off Qty Can Not Be Zero/Negative. Please Enter Valid Value." , 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if ( st_xchngbook.c_ordr_flw == 'B' )
		{
			l_opn_qty	=	l_opnpstn_qty	*	(-1);
		}
		else
		{
			l_opn_qty	=	l_opnpstn_qty	;
		}

		if(l_opn_qty < (st_xchngbook.l_ord_tot_qty	+	l_cvr_qty) )	
		{
			fn_userlog(c_ServiceName,"Inside Squre Off Qty Check");
			fn_userlog(c_ServiceName,"Open Position Qty Is :%ld:",l_opn_qty);
			fn_userlog(c_ServiceName,"Total Order Qty Is :%ld:",st_xchngbook.l_ord_tot_qty);
			fn_userlog(c_ServiceName,"Cover Qty Is :%ld:",l_cvr_qty);
			fn_errlog( c_ServiceName, "S31415", "Square Off Qty Can Not Be Greater Than Available Qty", c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,"Square Off Qty Can Not Be Greater Than Available Qty" , 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 ); 
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		/***	Ver	3.4	Ends	***/

		} /*** Ver 4.7  ***/

	}

	 /*********** Ver 2.4 Starts **********/
  else
  {
		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog( c_ServiceName,"***** Prod_type 1= %c ",st_pstn_actn.c_prd_typ);
    	fn_userlog( c_ServiceName,"***** Prod_type 2= %c ",st_cntrct.c_prd_typ);
		}

		if (st_cntrct.c_prd_typ == 'F')	
		{ 

    if(DEBUG_MSG_LVL_3)                               /* Ver 2.8 */
    {
      fn_userlog(c_ServiceName,"In fn_chk_cntrct");
    }
			
			/*** Ver 4.5 Starts ***/
  /***    if (st_xchngbook.c_spl_flg == ROLLOVER) *** Commented in Ver 10.8 ***/
      if (st_xchngbook.c_spl_flg == ROLLOVER || st_xchngbook.c_spl_flg == ROLLOVER_WITH_SPREAD) /*** Added in Ver 10.8 ***/
      {
				if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
				{
					fn_userlog( c_ServiceName,"Contract Check skipped in ROLLOVER");
				}
			}	
			else
			{
			/*** Ver 4.5 Ends **/
				/*** Ver 9.8 Starts ***/
				if ( c_trail_flg == 'Y' )
      	{
          c_trail_usr_flg='P';
        	i_returncode=fn_chk_trail_cntrct( c_ServiceName,
                                    &st_cntrct,
                                    c_trail_usr_flg,
                                    &c_fum_mrkt_typ,
                                    &c_fcm_mrkt_typ,
                                    &st_err_msg );
      	}
					/*** ver 9.8 Ends ***/
				else
				{
					i_returncode = fn_chk_cntrct(	c_ServiceName,
   		                            &st_cntrct,
                                  &c_fum_mrkt_typ,                 /* Ver 2.8 */
                                  &c_fcm_mrkt_typ,                 /* Ver 2.8 */
     		                          &st_err_msg );
				}
			} /* Ver 4.5 */
  	}
	  else if (st_cntrct.c_prd_typ == 'P')
    {

    if(DEBUG_MSG_LVL_3)                               /* Ver 2.8 */
    {
      fn_userlog(c_ServiceName,"In fn_chk_cntrctfp");
    }
      i_returncode = fn_chk_cntrctfp( c_ServiceName,
                                  &st_cntrct,
                                  &c_fum_mrkt_typ,                 /* Ver 2.8 */
                                  &c_fcm_mrkt_typ,                 /* Ver 2.8 */
                                  &st_err_msg );
    }
  }

	/*********** Ver 2.4 Ends ************/

  /*** if ( i_returncode == -1 ) Commented In Ver 5.8 ***/
  if ( i_returncode != 0 )   /*** Ver 5.8 ***/
  {
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
		 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
     Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
     Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	} 

	/** Commented in Ver 7.5 **

	i_ip_len = sizeof ( struct vw_contract );
	i_op_len = sizeof ( struct vw_cntrct_qt );

	fn_cpy_ddr ( st_cntrct.c_rout_crt );
	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_cntrct,
                              &st_cntrct_qt,
                              "vw_contract",
                              "vw_cntrct_qt",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_GET_QT" );
	***/

	/*** Commented in Ver 10.6 ***

	** Ver 7.5 Starts **

  i_returncode = fn_get_qt(c_ServiceName,
                           &st_cntrct,
                           &st_cntrct_qt,
                           c_err_msg);

  ** Ver 7.5 Ends **

	*** Commented in Ver 10.6 ***/

  /*** Ver 10.8 Starts ***/
  if ( st_xchngbook.c_spl_flg != ROLLOVER_WITH_SPREAD )
  {
  /*** Ver 10.8 Ends ***/

	/*** Ver 10.6 Starts here ***/

	i_returncode = fn_get_quote(c_ServiceName,
                           		&st_cntrct,
                           		&st_cntrct_qt,
															&c_setlmnt_flg,
															&c_dlvry_pos_allwd,
															&c_buy_allwd,   /*** ver 12.5 ***/
															&c_sell_allwd,  /*** ver 12.5 ***/
                              &c_mrkt_ordr_flg, /**** ver 12.8 ****/ 
                           		c_err_msg);

	/*** Ver 10.6 Ends here ***/
 
  /*** Ver 10.8 Starts ***/
  }
  else
  {
  i_returncode = fn_get_quote_rws (c_ServiceName,
                                   &st_cntrct,
                                   &st_cntrct_qt,
                                   &c_setlmnt_flg,
                                   &c_dlvry_pos_allwd,
                                   c_spd_expry_dt1,
                                   c_spd_expry_dt2,
                                   c_err_msg);
  }
  /*** Ver 10.8 Ends ***/
	if ( i_returncode != SUCC_BFR )
  {
		fn_errlog( c_ServiceName, "S31420", LIBMSG, c_err_msg  );
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}                            	

	/*** Ver 10.6 Starts here ***/

	if ( st_cntrct.c_prd_typ != 'P' && st_cntrct.c_prd_typ != 'U' && st_cntrct.c_prd_typ != 'I' )
	{
	 if (c_dlvry_pos_allwd == 'N')
	 {
		if( Fget32(ptr_fml_Ibuf,FFO_BK_UBK_FLG,0,(char *)&c_dlvry_eos_flg,0) == -1 )
		{
			if ( Ferror32 != FNOTPRES )
      {
        fn_errlog( c_ServiceName, "S31425", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /*** Ver 8.2 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /*** Ver 8.2 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
        c_dlvry_eos_flg='N';
      }
		}

		/*** Ver 11.1 Starts ***/

		EXEC SQL
		SELECT  NVL(FFP_OPNPSTN_QTY,0),
            DECODE(FFP_OPNPSTN_FLW,'S',GREATEST(ABS(FFP_IBUY_QTY),ABS(FFP_EXBUY_QTY)),'B',GREATEST(ABS(FFP_ISELL_QTY), ABS(FFP_EXSELL_QTY)),0)
    INTO   :l_opnpstn_qty,
           :l_cvr_qty
    FROM   FFP_FO_FUTURES_PSTN
    WHERE  FFP_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
    AND    FFP_UNDRLYNG       = :st_cntrct.c_undrlyng
    AND    FFP_EXPRY_DT       = :c_expiry_dt
    AND    FFP_PRDCT_TYP      = :st_cntrct.c_prd_typ
    AND    FFP_XCHNG_CD       = :st_cntrct.c_xchng_cd;

		if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog( c_ServiceName, "S31430", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if(SQLCODE == NO_DATA_FOUND)
		{
			l_opnpstn_qty = 0;
			l_cvr_qty = 0;
		}

   /*** ver 10.8 starts RWS ORDER IS PLACED AND CUST IS TRYING CLIENT SQOFF ***/
    l_rws_qty = 0;

    EXEC SQL
    SELECT NVL(SUM(NVL(FOD_ORDR_TOT_QTY,0)-NVL(FOD_EXEC_QTY,0)-NVL(FOD_CNCL_QTY,0)-NVL(FOD_EXPRD_QTY,0)),0)
      INTO :l_rws_qty
      FROM FOD_FO_ORDR_DTLS
     WHERE
           FOD_PRDCT_TYP  = :st_cntrct.c_prd_typ
       AND FOD_EXPRY_DT   = :c_expiry_dt
       AND FOD_XCHNG_CD   = :st_cntrct.c_xchng_cd
       AND FOD_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
       AND FOD_SPL_FLAG = 'O'
       AND FOD_UNDRLYNG       = :st_cntrct.c_undrlyng
       AND FOD_ORDR_STTS IN ('R','P','Q','O');

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog( c_ServiceName, "S31435", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    l_rws_qty = l_cvr_qty+l_rws_qty;
    /*** ver 10.8 ends ***/
   
 
		if(st_xchngbook.c_ordr_flw == 'B' && l_opnpstn_qty > 0)
    {
			fn_userlog( c_ServiceName,"Improper square off - Buy Combination/No New Positions are not allowed in this contract, Please contact Customer Service");
      strcpy( c_err_msg,"Improper square off - Buy Combination/No New Positions are not allowed in this contract, Please contact Customer Service");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if(st_xchngbook.c_ordr_flw == 'S' && l_opnpstn_qty < 0)
    {
			fn_userlog( c_ServiceName,"Improper square off - Sell Combination/No New Positions are not allowed in this contract, Please contact Customer Service");
      strcpy( c_err_msg,"Improper square off - Sell Combination/No New Positions are not allowed in this contract, Please contact Customer Service");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if ( st_xchngbook.c_ordr_flw == 'B' )
    {
      l_opn_qty = l_opnpstn_qty * (-1);
    }
    else
    {
      l_opn_qty = l_opnpstn_qty ;
    }

		if( l_opn_qty >= (st_xchngbook.l_ord_tot_qty + l_cvr_qty) )
    {
			i_phy_sqroff_check = 1;
		}
		/*** Ver 11.1 Ends ***/

/***		if (c_dlvry_eos_flg!='E')	*** Commented in Ver 11.1 ***/
		if (c_dlvry_eos_flg!='E' && i_phy_sqroff_check != 1)	/*** Modified in Ver 11.1 ***/
		{
			fn_userlog( c_ServiceName,"Currently Trading is not allowed in this contract");
			strcpy( c_err_msg,"Currently Trading is not allowed in this contract");
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
    	Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	 }
	}

	/*** Ver 10.6 Ends here ***/

	if ( st_xchngbook.c_slm_flg == MARKET )
	{
		st_xchngbook.l_quote = st_cntrct_qt.l_lst_trdd_prc;
		/*** Ver 11.1 Starts ***/
		if ( st_xchngbook.l_quote == 0 && i_phy_sqroff_check == 1 )
		{
			i_returncode = fn_get_quote_zero(c_ServiceName,st_xchngbook.c_ordr_flw,l_best_bid_price,l_best_offer_price,l_previous_close_price,&l_quote_zero);

			if( i_returncode != 1 )
    	{
				fn_userlog( c_ServiceName,"function fn_get_quote_zero failure");
      	strcpy( c_err_msg,"System Error.Contact Customer Support");
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      	Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      	Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

			st_xchngbook.l_quote = l_quote_zero;
			if(DEBUG_MSG_LVL_5)
  		{
				fn_userlog( c_ServiceName,"After fn_get_quote_zero st_xchngbook.l_quote is :%ld:",st_xchngbook.l_quote);
			}
		}
		/*** Ver 11.1 Ends ***/
		strcpy ( st_xchngbook.c_qt_tm, 
             (char *)st_cntrct_qt.c_lst_trdd_time );
		st_ordbook.l_ord_lmt_rt = st_xchngbook.l_quote;
	}

	/****************** Ver 2.4 Starts *******************/

	if(DEBUG_MSG_LVL_5)
	{
		fn_userlog( c_ServiceName,"Prod type Bef1  =%c ",st_pstn_actn.c_prd_typ);       /*2.4*/
  	fn_userlog( c_ServiceName,"Prod type Bef2  =%c ",st_cntrct.c_prd_typ);          /*2.4*/
	}

  if(st_cntrct.c_prd_typ == 'P' && i_mtm_flg == 0 )   /* Normal FP order placed */
  {
		fn_userlog( c_ServiceName, "CR-ISEC14-144377 Index/Stock :%c:",  st_cntrct.c_ctgry_indstk );   /*** Added in Ver 11.8 ***/

    EXEC SQL
     SELECT /*** MTM_ROLL_STTS Commented in Ver 11.8 ***/
						/*** DECODE added in Ver 11.8 ***/
						DECODE ( :st_cntrct.c_ctgry_indstk,'I',MTM_ROLL_STTS,'S',MTM_ROLL_STTS_S,'N' )
     INTO   :c_roll_stts
     FROM   MTM_APPLN_STTS
     WHERE  MTM_XCHNG_CD =  :st_xchngbook.c_xchng_cd
     AND    MTM_PIPE_ID  =  :st_xchngbook.c_pipe_id;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31440", SQLMSG,c_err_msg  );

			/***Commented for Ver 2.7
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
			***/

      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );		/**Ver 2.7 **/
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if (c_roll_stts == 'N' )
    {
      fn_errlog( c_ServiceName, "B31027",DEFMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
	else if (st_cntrct.c_prd_typ == 'P' && i_mtm_flg == 2)   /*  2.4 Client placed Square off*/
  {
    
   /****Ver 10.3 Query Changed to Uppercase***/
		
		fn_userlog( c_ServiceName, "CR-ISEC14-144377 Index/Stock :%c:",  st_cntrct.c_ctgry_indstk );   /*** Added in Ver 11.8 ***/

    EXEC SQL
    SELECT /*** MTM_CAN_REQ,
           MTM_CAN_SQR_OFF Commented in Ver 11.8 ***/
					 /*** DECODE added in Ver 11.8 ***/
					 DECODE ( :st_cntrct.c_ctgry_indstk,'I',MTM_CAN_REQ,'S',MTM_CAN_REQ_S,'N' ),
					 DECODE ( :st_cntrct.c_ctgry_indstk,'I',MTM_CAN_SQR_OFF,'S',MTM_CAN_SQR_OFF_S,'N' )
    INTO :c_can_req,
         :c_can_sqr_off
    FROM MTM_APPLN_STTS
    WHERE  MTM_XCHNG_CD =  :st_xchngbook.c_xchng_cd
    AND    MTM_PIPE_ID  =  :st_xchngbook.c_pipe_id;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31445", SQLMSG,c_err_msg  );

			/**Commented for Ver 2.7
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
			**/

      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );		/**Ver 2.7 **/
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if ( c_can_req == 'Y' && c_can_sqr_off == 'Y' )
    {
      fn_errlog( c_ServiceName, "B31028",DEFMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

  }
  /****************** Ver 2.4 Ends *******************/
	/*** Ver 4.7 starts here ***/
  else if (st_cntrct.c_prd_typ == 'U' && i_mtm_flg == 2)   /* Client placed Square off*/
  {

		fn_userlog( c_ServiceName, "CR-ISEC14-144377 Index/Stock :%c:",  st_cntrct.c_ctgry_indstk );   /*** Added in Ver 11.8 ***/
   /****Ver 10.3 Query Changed to Uppercase***/
  
    EXEC SQL
    SELECT /*** MTM_SLTP_ALLWD_STTS,
           MTM_SLTP_EOS_FLG Commented in Ver 11.8 ***/
					 /*** DECODE added in Ver 11.8 ***/
					 DECODE ( :st_cntrct.c_ctgry_indstk,'I',MTM_SLTP_ALLWD_STTS_I,'S',MTM_SLTP_ALLWD_STTS_S,'N' ),
					 DECODE ( :st_cntrct.c_ctgry_indstk,'I',MTM_SLTP_EOS_FLG,'S',MTM_SLTP_EOS_FLG_S,'N' )
    INTO   :c_sltp_allwd,
           :c_sltp_eos
    FROM   MTM_APPLN_STTS
    WHERE  MTM_XCHNG_CD =  :st_xchngbook.c_xchng_cd
    AND    MTM_PIPE_ID  =  :st_xchngbook.c_pipe_id;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31450", SQLMSG,c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if (c_sltp_allwd == 'N' )
    {
      fn_errlog( c_ServiceName, "B35013",DEFMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if ( c_sltp_eos == 'Y')
    {
      fn_errlog( c_ServiceName, "B35014",DEFMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  /*** Ver 4.7 ends here ***/	
   	
  /*** Ver 6.4 Starts Here ***/
  else if( st_cntrct.c_prd_typ == 'F' && st_xchngbook.c_ord_typ == VTC_ORDER )
  {
   if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
   {
   	 fn_userlog(c_ServiceName,"Sachin st_xchngbook.l_ord_lmt_rt :%ld:",st_xchngbook.l_ord_lmt_rt );
   }
	 i_returncode=fn_chk_vtcord(c_ServiceName,
                                &st_xchngbook,
                                &st_cntrct,
                                &st_err_msg );
   if ( i_returncode == -1 )
   {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
  }
  /*** Ver 6.4 Ends Here ***/
	
	i_returncode = fn_check_inp_fut( c_ServiceName, 
                               		 &st_xchngbook, 
                               		 &st_cntrct_qt, 
                                   c_fum_mrkt_typ,         /* Ver 2.8 */  
                                   c_fcm_mrkt_typ,         /* Ver 2.8 */
                                   i_rollover_ord_ind,     /* Ver 10.8 */
                                   c_spd_expry_dt1,        /* Ver 10.8 */
                                   c_spd_expry_dt2,        /* Ver 10.8 */
                               		 &st_err_msg );
  if ( i_returncode == -1 )
  {
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}                            	

  /*** Ver 8.5 Starts ***/
  if( st_xchngbook.c_slm_flg == 'L' && st_cntrct.c_prd_typ  == 'U' )
  {
			
    /****Ver 10.3 Query Changed to Uppercase***/
 
    EXEC SQL
        SELECT  NVL(FUM_SLTPFP_LMT_ALLWD_FLG,'N')
        INTO  :c_lmt_allwd_flg
        FROM  FUM_FO_UNDRLYNG_MSTR
        WHERE  FUM_UNDRLYNG = :st_ordbook.c_undrlyng
        AND  FUM_XCHNG_CD = :st_cntrct.c_xchng_cd
        AND  FUM_PRDCT_TYP = DECODE(:st_cntrct.c_prd_typ,'U','F','I','O','P','F',:st_cntrct.c_prd_typ);

   if ( SQLCODE != 0 )
   {
     fn_userlog(c_ServiceName, "Failed To Get LIMIT Allowed Flag.");
     fn_errlog(c_ServiceName, "S31455", SQLMSG, c_err_msg);
     Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
     Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
     Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
     Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
   }

    if( c_lmt_allwd_flg == 'N')
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName,"S31460","Only Market orders are allowed in this stock. Please enter market as order type to place your order.",c_err_msg);
      strcpy(c_err_msg,"Only Market orders are allowed in this stock. Please enter market as order type to place your order.");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  /*** Ver 8.5 Ends ***/

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
	if ( i_trnsctn == -1 )
	{
		fn_errlog( c_ServiceName, "S31465", LIBMSG, c_err_msg  );
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  /*********** Commented in Ver 7.9 *************************	
	********1.7 - fn_lock_user removed from here		***********

	i_ip_len = sizeof ( struct vw_contract );
	i_op_len = sizeof ( struct vw_cntrt_gen_inf );

	fn_cpy_ddr ( st_cntrct.c_rout_crt );
	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_cntrct,
                              &st_cntrct_gen_inf,
                              "vw_contract",
                              "vw_cntrt_gen_inf",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_GETCNT_GEN" );
  if ( i_returncode != SUCC_BFR )
  {
		fn_errlog( c_ServiceName, "S31470", LIBMSG, c_err_msg  );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      ***  Ver 3.4 ***
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}                            	

  ****************** Ver 7.9 comment ends ******************/

	i_returncode = fn_check_ord_fut( c_ServiceName,
                               &st_cntrct_gen_inf,
                               &st_xchngbook,
                               &st_ordbook, 
                               &st_err_msg );
  if ( i_returncode == -1 )
  {
		fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}                            	

	if ( st_xchngbook.c_slm_flg == MARKET )
	{
		st_xchngbook.l_ord_lmt_rt = st_xchngbook.l_quote;
	}

	if(DEBUG_MSG_LVL_5)
	{
	fn_userlog( c_ServiceName, "Sprd Ord Ind :%c:", st_xchngbook.c_sprd_ord_ind );
	}

	i_ip_len = sizeof ( struct vw_sequence );
	i_op_len = sizeof ( struct vw_sequence );

	if(DEBUG_MSG_LVL_5)
	{
		fn_userlog(c_ServiceName,"st_xchngbook.c_mod_trd_dt Is :%s:",st_xchngbook.c_mod_trd_dt);
	}

	if(DEBUG_MSG_LVL_0)  /*** Ver 4.6 ***/
	{
		fn_userlog(c_ServiceName,"st_ordbook.c_channel Is :%s:",st_ordbook.c_channel);
	}

	/***  strcpy( st_s_sequence.c_pipe_id, st_xchngbook.c_pipe_id ); Commented In Ver 4.6 ***/
  /*** Ver 4.6 Starts ***/

  if(strcmp(st_ordbook.c_channel,"OFF") == 0)
  {
		if ( strcmp( st_xchngbook.c_xchng_cd , "NFO") == 0 )
		{	
    	strcpy( st_s_sequence.c_pipe_id,"99");
		}
		else if ( strcmp( st_xchngbook.c_xchng_cd , "BFO") == 0 ) 
		{	
    	strcpy( st_s_sequence.c_pipe_id,"A9");
		}
    strcpy( st_xchngbook.c_pipe_id,st_s_sequence.c_pipe_id);
  }
  else
  {
    strcpy( st_s_sequence.c_pipe_id, st_xchngbook.c_pipe_id );
  }
  /*** Ver 4.6 Ends ***/

  strcpy( st_s_sequence.c_trd_dt, st_xchngbook.c_mod_trd_dt );
  st_s_sequence.c_rqst_typ = GET_XCHNG_SEQ;

	if(DEBUG_MSG_LVL_5)
	{
		fn_userlog(c_ServiceName,"st_s_sequence.c_trd_dt Is :%s:",st_s_sequence.c_trd_dt);
	}


	fn_cpy_ddr ( st_s_sequence.c_rout_crt );
  /**************** Commented in Ver 10.4 ********************
	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_s_sequence,
                              &st_r_sequence,
                              "vw_sequence",
                              "vw_sequence",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_GET_SEQ" );
  ***************** Comment End in Ver 10.4  *****************/
  /******* Added in Ver 10.4 **************/
  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"Before Calling function fn_get_seq **********");
  }
  i_returncode = fn_get_seq(c_ServiceName,c_err_msg,st_s_sequence.c_pipe_id,&st_r_sequence.l_seq_num,st_s_sequence.c_rqst_typ);
  /******* Add ended in Ver 10.4 **************/
	if ( i_returncode != SUCC_BFR )
	{
		fn_errlog( c_ServiceName, "S31475", LIBMSG, c_err_msg  );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
 		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}                            	

	l_xchng_seq_num = st_r_sequence.l_seq_num;

	/***  strcpy( st_s_sequence.c_pipe_id, st_xchngbook.c_pipe_id ); Commented In Ver 4.6 ***/
  /*** Ver 4.6 Starts ***/

  if(strcmp(st_ordbook.c_channel,"OFF") == 0)
  {
	
		if ( strcmp( st_xchngbook.c_xchng_cd , "NFO") == 0 )       
		{                                                          
  		strcpy( st_s_sequence.c_pipe_id,"99");                   
		}                                                          
		else if ( strcmp( st_xchngbook.c_xchng_cd , "BFO") == 0 )  
		{                                                          
 		  strcpy( st_s_sequence.c_pipe_id,"A9");                   
		}                                                          
	
    strcpy( st_xchngbook.c_pipe_id,st_s_sequence.c_pipe_id);
  }
  else
  {
    strcpy( st_s_sequence.c_pipe_id, st_xchngbook.c_pipe_id );
  }
  /*** Ver 4.6 Ends ***/
	
  strcpy( st_s_sequence.c_trd_dt, st_xchngbook.c_mod_trd_dt );
  st_s_sequence.c_rqst_typ = GET_ORDER_SEQ;

	fn_cpy_ddr ( st_s_sequence.c_rout_crt );
  /**************** Commented in Ver 10.4 ********************
	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_s_sequence,
                              &st_r_sequence,
                              "vw_sequence",
                              "vw_sequence",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_GET_SEQ" );
  ***************** Comment End in Ver 10.4  *****************/
  /******* Added in Ver 10.4 **************/
  if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"Before Calling function fn_get_seq **********");
  }
  i_returncode = fn_get_seq(c_ServiceName,c_err_msg,st_s_sequence.c_pipe_id,&st_r_sequence.l_seq_num,st_s_sequence.c_rqst_typ);
  /******* Add ended in Ver 10.4 **************/
	if ( i_returncode != SUCC_BFR )
	{
		fn_errlog( c_ServiceName, "S31480", LIBMSG, c_err_msg  );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
 		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}                            	
	/********1.7 - Commit transaction introduced here*************/
	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
	{
		fn_errlog( c_ServiceName, "S31485", LIBMSG, c_err_msg  );
 		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	l_ord_seq_num = st_r_sequence.l_seq_num;

	if ( ( st_xchngbook.c_ord_typ == GOOD_TILL_TODAY     ) ||
			 ( st_xchngbook.c_ord_typ == IMMEDIATE_OR_CANCEL )  )
	{
		strcpy ( st_xchngbook.c_valid_dt, (char *)c_trd_dt.arr ); 
	}
  else if( st_xchngbook.c_ord_typ == VTC_ORDER  ) /*** Ver 6.4 Starts Here ***/
  {
    if( strcmp(st_xchngbook.c_valid_dt,"") == 0 )
    {
      fn_errlog( c_ServiceName, "S31490", LIBMSG, c_err_msg  );
      fn_userlog(c_ServiceName,"Invalid VTC order Validity Date, pls check");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }                                               /*** Ver 6.4 Ends Here ***/

		/**** Ver 9.8 Starts ****/
  c_prcimpv_flg='N';
  c_prcimpv_ordrbk_flg='N';

    if( c_trail_flg == 'Y' )
    {
        if ( DEBUG_MSG_LVL_3 )
        {
          fn_userlog(c_ServiceName, "st_cntrct.c_xchng_cd********:%s:",st_cntrct.c_xchng_cd);
          fn_userlog(c_ServiceName, "st_cntrct.c_prd_typ*******:%c:",st_cntrct.c_prd_typ);
          fn_userlog(c_ServiceName, "st_cntrct.c_undrlyng*****:%s:",st_cntrct.c_undrlyng);
          fn_userlog(c_ServiceName, "st_cntrct.c_expry_dt******:%s:",st_cntrct.c_expry_dt);
          fn_userlog(c_ServiceName, "st_cntrct.c_exrc_typ******:%c:",st_cntrct.c_exrc_typ);
          fn_userlog(c_ServiceName, "st_cntrct.c_opt_typ********:%c:",st_cntrct.c_opt_typ);
          fn_userlog(c_ServiceName, "st_cntrct.l_strike_prc**********:%ld:",st_cntrct.l_strike_prc);
				}

      EXEC SQL
        SELECT  NVL(FTQ_LST_TRD_PRC,0)
        INTO    :l_lTP
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :st_cntrct.c_xchng_cd
        AND     FTQ_PRDCT_TYP = :st_cntrct.c_prd_typ
        AND     FTQ_UNDRLYNG  = :st_cntrct.c_undrlyng
        AND     FTQ_EXPRY_DT  = :st_cntrct.c_expry_dt
        AND     FTQ_EXER_TYP  = :st_cntrct.c_exrc_typ
        AND     FTQ_OPT_TYP   = :st_cntrct.c_opt_typ
        AND     FTQ_STRK_PRC  = :st_cntrct.l_strike_prc;

        if ( SQLCODE !=0 )
        {
     			fn_userlog(c_ServiceName, "Failed To Get LIMIT Allowed Flag.");
     			fn_errlog(c_ServiceName, "S31495", SQLMSG, c_err_msg);
     			Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
     			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
     			Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
     			Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
     			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
        }

        if( st_ordbook.c_ordr_flw == 'B' )
        {
          l_trail_amt= st_xchngbook.l_stp_lss_tgr - l_lTP; 
        }
        else
        {
          l_trail_amt= l_lTP - st_xchngbook.l_stp_lss_tgr;
        }

        l_lmt_offset=abs( st_xchngbook.l_ord_lmt_rt - st_xchngbook.l_stp_lss_tgr );
        l_init_sltp_rt=st_xchngbook.l_stp_lss_tgr ;
        l_init_lmt_rt=st_xchngbook.l_ord_lmt_rt;
        c_prcimpv_flg='Y';
        c_prcimpv_ordrbk_flg=c_trail_flg;
        l_trail_ordrbk_amt=l_trail_amt;
        l_ordrbk_lmt_offset=l_lmt_offset;

        if ( DEBUG_MSG_LVL_3 )
        {
          fn_userlog(c_ServiceName, "l_trail_amt********:%ld:",l_trail_amt);
          fn_userlog(c_ServiceName, "l_lmt_offset*******:%ld:",l_lmt_offset);
          fn_userlog(c_ServiceName, "l_init_sltp_rt*****:%ld:",l_init_sltp_rt);
          fn_userlog(c_ServiceName, "l_init_lmt_rt******:%ld:",l_init_lmt_rt);
          fn_userlog(c_ServiceName, "c_prcimpv_flg******:%c:",c_prcimpv_flg);
          fn_userlog(c_ServiceName, "c_prcimpv_ordrbk_flg********:%c:",c_prcimpv_ordrbk_flg);
          fn_userlog(c_ServiceName, "l_trail_amt**********:%ld:",l_trail_ordrbk_amt);
          fn_userlog(c_ServiceName, "l_lmt_offset*********:%ld:",l_ordrbk_lmt_offset);
          fn_userlog(c_ServiceName, "l_lTP**************:%ld:",l_lTP);
				}

        EXEC SQL
          SELECT NVL(FUM_TRAIL_AMT,0)*100
          INTO   :d_fum_trail_amt
          FROM   FUM_FO_UNDRLYNG_MSTR
          WHERE  FUM_XCHNG_CD  =:st_cntrct.c_xchng_cd
          AND    FUM_PRDCT_TYP =:st_cntrct.c_prd_typ
          AND    FUM_UNDRLYNG  =:st_cntrct.c_undrlyng;

        if ( SQLCODE !=0 )
        {
          fn_userlog(c_ServiceName, "Failed To Get LIMIT Allowed Flag.");
          fn_errlog(c_ServiceName, "S31500", SQLMSG, c_err_msg);
          Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
        }

      if( (double)(l_trail_amt) < d_fum_trail_amt  )
      {
          fn_userlog(c_ServiceName, "Failed To Get LIMIT Allowed Flag.");
          if( st_ordbook.c_ordr_flw == 'B' )
          {
            sprintf(c_err_msg,"The difference between SLTP and LTP should be greater than minimum difference of %lf in case of Buy order",(d_fum_trail_amt/100));
          }
          else
          {
            sprintf(c_err_msg,"The difference between LTP and SLTP should be greater than minimum difference of %lf in case of Sell order",(d_fum_trail_amt/100));

          }

          Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
      }
    }
	/****  Ver 9.8 Ends ****/

	if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
	{
	  fn_userlog(c_ServiceName,"Sachin l_ord_seq_num :%ld:",l_ord_seq_num);
	}

	sprintf( c_seq_num, "%08d", l_ord_seq_num );
  if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
  {
  	fn_userlog(c_ServiceName,"Sachin c_seq_num :%ld:",c_seq_num);
	}
	strcpy( st_xchngbook.c_ordr_rfrnc, (char *)c_date.arr );
	strcat( st_xchngbook.c_ordr_rfrnc, st_xchngbook.c_pipe_id );
	strcat( st_xchngbook.c_ordr_rfrnc, c_seq_num );
	strcpy( st_ordbook.c_ordr_rfrnc, st_xchngbook.c_ordr_rfrnc);

	st_xchngbook.l_mdfctn_cntr = 1;
	st_ordbook.l_mdfctn_cntr = 1;

  strcpy(st_pstn_actn.c_user_id, st_usr_prfl.c_user_id);
  st_pstn_actn.l_session_id  = st_usr_prfl.l_session_id;
	strcpy(st_pstn_actn.c_cln_mtch_accnt,st_ordbook.c_cln_mtch_accnt);
	st_pstn_actn.l_eba_cntrct_id = st_cntrct.l_eba_cntrct_id;
	strcpy(st_pstn_actn.c_xchng_cd,st_cntrct.c_xchng_cd);
	st_pstn_actn.c_prd_typ = st_cntrct.c_prd_typ;
	strcpy(st_pstn_actn.c_undrlyng,st_cntrct.c_undrlyng);
	strcpy(st_pstn_actn.c_expry_dt,st_cntrct.c_expry_dt);
	st_pstn_actn.c_exrc_typ = st_cntrct.c_exrc_typ;
	st_pstn_actn.c_opt_typ = st_cntrct.c_opt_typ;
	st_pstn_actn.l_strike_prc = st_cntrct.l_strike_prc;
	st_pstn_actn.c_ctgry_indstk = st_cntrct.c_ctgry_indstk;
	st_pstn_actn.l_ca_lvl = st_cntrct.l_ca_lvl;
	st_pstn_actn.c_cntrct_tag = '*';

  if ( st_xchngbook.c_spl_flg == SYSTEM_SQUAREOFF || st_xchngbook.c_spl_flg == IMTM_SYS_SQUAREOFF || st_xchngbook.c_spl_flg== LMTNEG_SYS_SQUAREOFF )     /***  Check for IMTM_SYS_SQUAREOFF  and LMTNEG_SYS_SQUAREOFF added in Ver 7.0 ***/
  {
  	st_pstn_actn.l_actn_typ = SYSTEM_PLACE_ORDER;
  }
	else if ( st_xchngbook.c_spl_flg == 'J' )
  {
  	st_pstn_actn.l_actn_typ = JOINT_SQUARE_OFF_ORDER;
  }
  else
  {
		st_pstn_actn.l_actn_typ = ORS_NEW_ORD_REQ;
  }

	st_pstn_actn.c_trnsctn_flw = st_ordbook.c_ordr_flw;
	st_pstn_actn.l_orgnl_qty = 0;
	st_pstn_actn.l_orgnl_rt  = 0;
	st_pstn_actn.l_new_qty = st_xchngbook.l_ord_tot_qty;

	if ( st_xchngbook.c_slm_flg == MARKET )
	{
		st_pstn_actn.l_new_rt  = st_xchngbook.l_quote;
	}
	else
	{
		st_pstn_actn.l_new_rt  = st_xchngbook.l_ord_lmt_rt;
	}

	st_pstn_actn.l_exec_qty  = 0;
	st_pstn_actn.l_exec_rt  = 0;
	st_pstn_actn.l_fresh_qty  = 0;
	st_pstn_actn.l_cover_qty  = 0;
	st_pstn_actn.d_add_mrgn_amt  = 0;

	st_pstn_actn.l_curr_rt = st_cntrct_qt.l_lst_trdd_prc;
	sprintf(st_pstn_actn.c_ref_rmrks,"%s-%ld",st_ordbook.c_ordr_rfrnc,
															 	st_ordbook.l_mdfctn_cntr);
	rtrim(st_pstn_actn.c_ref_rmrks);

	i_ip_len = sizeof ( struct vw_pstn_actn );
	i_op_len = sizeof ( struct vw_pstn_actn );

	/********1.7 - Begin transaction  anf user locking introduced here*************/
	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
	if ( i_trnsctn == -1 )
	{
		fn_errlog( c_ServiceName, "S31505", LIBMSG, c_err_msg  );
		fn_userlog(c_ServiceName," PLEASE CHECK THE THE FORWARDING STOPPED");
		fn_userlog(c_ServiceName," PLEASE CHECK THE SEQUENCE NO OR INCREASE BY ONE");
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

/*** commented in version 10.9 
	i_returncode = fn_lock_usr( c_ServiceName,
															st_usr_prfl.c_cln_mtch_accnt );
	if ( i_returncode == -1 )
	{
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		fn_userlog(c_ServiceName," PLEASE CHECK THE THE FORWARDING STOPPED");
		fn_userlog(c_ServiceName," PLEASE CHECK THE SEQUENCE NO OR INCREASE BY ONE");
 		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      ***  Ver 3.4 ***
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); *** Ver 8.2 ***
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); *** Ver 8.2 ***
 		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	} *** 10.9 comment ends here *****/

	/*******************************************************/
	fn_cpy_ddr ( st_pstn_actn.c_rout_crt );


	/********** Ver 2.4 Starts **********/

	if(DEBUG_MSG_LVL_5)
	{
		fn_userlog(c_ServiceName,"********Product type = :%c:",st_pstn_actn.c_prd_typ);     /*2.4*/
	}

	/*** Ver 9.7 starts ***/
  if ( st_cntrct.c_prd_typ == 'U' &&
		   ( strcmp(c_sys_msg,"EOS") == 0 || strcmp(c_sys_msg,"COVER_SLTP") == 0 || strcmp(c_sys_msg,"EXCPT_EOS") == 0  || strcmp(c_sys_msg,"MY_EOS") == 0 || strcmp(c_sys_msg,"SYS_EVENT") == 0)/*** ver 12.4 Added SYS_EVENT ***/ 
		 )
	{
		  if ( strcmp(c_sys_msg,"MY_EOS") == 0 )
      {
        i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_ORDR_RFRNC,0,(char *)c_myeos_frs_ord_ref,0);
        i_ferr [0] = Ferror32;

				if ( i_err[0] == -1 )
				{
					fn_errlog( c_ServiceName, "S31510", FMLMSG, c_err_msg  );
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
  
    /****Ver 10.3 Query Changed to Uppercase***/

      	EXEC SQL
				SELECT  DECODE(FOD_FC_FLAG,'F',FOD_SLTP_ORDR_RFRNC,FOD_ORDR_RFRNC),
                FOD_SLTP_ORDR_RFRNC /*** added in ver 10.9 ***/
				INTO    :c_cover_ord_ref,
                :c_sltplck_ord_ref /** added in ver 10.9 **/
				FROM    FOD_FO_ORDR_DTLS
				WHERE   FOD_ORDR_RFRNC = :c_myeos_frs_ord_ref;
    
       if ( SQLCODE  !=  0 )
       {
          fn_errlog( c_ServiceName, "S31515",SQLMSG,c_err_msg);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }

				 /*** ver 10.9 starts ***/
        EXEC  SQL
        SELECT  FOD_ORDR_RFRNC,
                FOD_SLTP_ORDR_RFRNC
        INTO    :c_ordr_rfrnc_lck,
		            :c_sltp_ord_rfrnc_lck
        FROM    FOD_FO_ORDR_DTLS
        WHERE   FOD_ORDR_RFRNC in ( :c_myeos_frs_ord_ref,:c_sltplck_ord_ref )
        FOR     UPDATE OF FOD_ORDR_RFRNC;
        /*** ver 10.9 ends ***/
      }
      else
      {
				i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_ORDR_RFRNC,0,(char *)c_cover_ord_ref,0);
				i_ferr [0] = Ferror32;

				if ( i_err[0] == -1 )
				{
					fn_errlog( c_ServiceName, "S31520", FMLMSG, c_err_msg  );
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
      
       /*** ver 10.9 starts ***/
       EXEC SQL
       SELECT  FOD_SLTP_ORDR_RFRNC
       INTO    :c_sltplck_ord_ref
       FROM    FOD_FO_ORDR_DTLS
       WHERE   FOD_ORDR_RFRNC = :c_cover_ord_ref;

       if ( SQLCODE  !=  0 )
       {
          fn_errlog( c_ServiceName, "S31525",SQLMSG,c_err_msg);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }

        EXEC  SQL
        SELECT  FOD_ORDR_RFRNC,
                FOD_SLTP_ORDR_RFRNC
        INTO    :c_ordr_rfrnc_lck,
                :c_sltp_ord_rfrnc_lck
        FROM    FOD_FO_ORDR_DTLS
        WHERE   FOD_ORDR_RFRNC in ( :c_cover_ord_ref,:c_sltplck_ord_ref )
        FOR     UPDATE OF FOD_ORDR_RFRNC;
      }
      
      if ( SQLCODE  !=  0) 
      {
         if (SQLCODE == -54)
         {
             fn_userlog( c_ServiceName, "Resource busy and failed to acquire lock" );
         }
         fn_errlog( c_ServiceName, "S31530",SQLMSG,c_err_msg);
         fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else
      {
        fn_userlog( c_ServiceName, "Sucessfully acquired FOR UPDATE lock on :%s: and :%s: and :%s:",c_sltplck_ord_ref,c_cover_ord_ref,c_myeos_frs_ord_ref );
      }
      /*** version 10.9 ends ***/
	 		if (DEBUG_MSG_LVL_3) 
			{
				fn_userlog( c_ServiceName, "c_cover_ord_ref = :%s:", c_cover_ord_ref );
			}
	}


  /*** ver 10.9 starts ***/
  /*i_returncode = fn_lock_usr( c_ServiceName,st_usr_prfl.c_cln_mtch_accnt ); Commneted in Ver 13.7*/
  i_returncode = fn_lock_fno( c_ServiceName,  st_usr_prfl.c_cln_mtch_accnt ); /* Added in Ver 13.7 */
  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog( c_ServiceName, "S31535",LIBMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /*** ver 10.9 ends ***/

	if(st_cntrct.c_prd_typ == SLTP_FUTUREPLUS)
  {
		if( strcmp(c_sys_msg, "MY_EOS") == 0 || strcmp(c_sys_msg, "EXCPT_EOS")== 0 ||  strcmp(c_sys_msg, "EOS") == 0 || strcmp(c_sys_msg, "SYS_EVENT")== 0)/** ver 12.4 SYS_EVENT added ***/
		{
			i_pnd_stts = 0 ;
			i_open_qt = 0 ;

    /****Ver 10.3 Query Changed to Uppercase***/

			EXEC SQL
			SELECT COUNT(1)
			INTO  :i_pnd_stts
			FROM FOD_FO_ORDR_DTLS
			WHERE DECODE( FOD_FC_FLAG, 'F',FOD_ORDR_RFRNC ,FOD_SLTP_ORDR_RFRNC) =
			(SELECT DECODE( FOD_FC_FLAG, 'F',FOD_ORDR_RFRNC ,FOD_SLTP_ORDR_RFRNC) FROM FOD_FO_ORDR_DTLS WHERE FOD_ORDR_RFRNC = :c_cover_ord_ref )
			AND FOD_ORDR_STTS IN ('O','Q','R','P');

			if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
			{
				 fn_errlog ( c_ServiceName, "S31540", SQLMSG, c_err_msg);
				 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				 tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
			}
  
	/****Ver 10.3 Query Changed to Uppercase***/
	
			EXEC SQL
			SELECT ABS(NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FTD_EXCTD_QTY, 'T', -1 * FTD_EXCTD_QTY, FTD_EXCTD_QTY ) ), 0 ))/** ver 12.4 T added ***/
			INTO   :i_open_qt
			FROM   FOD_FO_ORDR_DTLS,
						 FTD_FO_TRD_DTLS
			WHERE  FTD_ORDR_RFRNC = FOD_ORDR_RFRNC
			AND    DECODE( FOD_FC_FLAG, 'F',FOD_ORDR_RFRNC ,FOD_SLTP_ORDR_RFRNC) =(SELECT DECODE( FOD_FC_FLAG, 'F',FOD_ORDR_RFRNC ,FOD_SLTP_ORDR_RFRNC)
																																						FROM FOD_FO_ORDR_DTLS
																																						WHERE FOD_ORDR_RFRNC = :c_cover_ord_ref);

			if(SQLCODE != 0 )
			{
				 fn_errlog ( c_ServiceName, "S31545", SQLMSG, c_err_msg);
				 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				 tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
			}

			if(DEBUG_MSG_LVL_0) /* 2.5 added */
			{
				fn_userlog ( c_ServiceName, "c_myeos_frs_ord_ref :%s:,c_cover_ord_ref :%s:", c_myeos_frs_ord_ref ,c_cover_ord_ref);
				fn_userlog ( c_ServiceName, "st_xchngbook.l_ord_tot_qty :%ld:,i_open_qt :%ld:,i_pnd_stts  :%d:", st_xchngbook.l_ord_tot_qty ,i_open_qt,i_pnd_stts);
			}
			if(i_pnd_stts > 0  || i_open_qt < st_xchngbook.l_ord_tot_qty  ) /*** != to < in Ver 12.4 ***/
			{
				fn_userlog(c_ServiceName, " The EOS in progress, Pls refresh the status ");
				fn_errlog( c_ServiceName, "B35025","",c_err_msg);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_NO, "B35025", 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}
  }
	/*** Ver 9.7 ends ***/

	if( st_pstn_actn.c_prd_typ == FUTURES )
      strcpy(c_svc_name,"SFO_UPD_FUT_POS");
  else
    {
      if ( st_pstn_actn.c_prd_typ == FUTURE_PLUS )
      strcpy(c_svc_name,"SFO_UPD_FUT_PLS");
			else if (st_pstn_actn.c_prd_typ == SLTP_FUTUREPLUS )   /** ver 4.7 **/
   		{
				if ( DEBUG_MSG_LVL_3 )  /**** Added in Ver 9.6 ****/
				{
					fn_userlog(c_ServiceName,"Product is SLTP_FUTUREPLUS");
				}
			}
			else
      {
          strcpy( c_err_msg, "Invalid Prdct Type" );
          fn_userlog ( c_ServiceName, "ERROR :%s:", c_err_msg );
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn ( TPFAIL, ERR_BFR, ( char * )c_err_msg, 0, 0 );
      }
    }

 	 if(DEBUG_MSG_LVL_3) /*** Ver 4.5 ***/
 	 {
    fn_userlog(c_ServiceName,"st_xchngbook.c_spl_flg |%c|",st_xchngbook.c_spl_flg);
    fn_userlog(c_ServiceName,"st_pstn_actn.c_nkd_blkd_flg %c|",st_pstn_actn.c_nkd_blkd_flg);
 	 }

    if ( st_xchngbook.c_spl_flg == ROLLOVER )   /*** Ver 4.5 ***/
    {
      st_pstn_actn.c_nkd_blkd_flg = ROLLOVER;
    }
    else if ( st_xchngbook.c_spl_flg == ROLLOVER_WITH_SPREAD )    /*** Ver 10.8 ***/
    {
      st_pstn_actn.c_nkd_blkd_flg = ROLLOVER_WITH_SPREAD;
    }

		/**** Ver 5.2 Starts ***/
		if ((strncmp ( st_xchngbook.c_xchng_rmrks , "CORP ACTN" , 9)==0)&& (strcmp(st_ordbook.c_channel,"OFF") == 0))
		{
			st_pstn_actn.c_nkd_blkd_flg = 'P' ;
			if(DEBUG_MSG_LVL_3)
   		{
    		fn_userlog(c_ServiceName,"Inside CORP ACTN for Square-off order");
			}
		}
		/**** Ver 5.2 Ends  ***/

    /**** Ver 9.0 Starts ***/
    if ((strncmp ( st_xchngbook.c_xchng_rmrks , "SLTP FuturePlus to Futures" , 26)==0)&& (strcmp(st_ordbook.c_channel,"SYS")== 0))
    {
      st_pstn_actn.c_nkd_blkd_flg = 'P' ;
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside SLTP FuturePlus to Futures conversion for Square-off order");
      }
    }
    /**** Ver 9.0 Ends  ***/

	 if(DEBUG_MSG_LVL_3)
	 {
   	fn_userlog ( c_ServiceName, "calling service :%s:", c_svc_name );	
	 }

    /** Ver 9.7 Starts ***/

  if(st_cntrct.c_prd_typ == SLTP_FUTUREPLUS)
  {

    if(strcmp(c_sys_msg, "MY_EOS") == 0 )
    {
      st_ordbook.c_req_typ = 'M';
    }
    if(strcmp(c_sys_msg, "EOS") == 0 )
    {
      st_ordbook.c_req_typ = 'N';
    }
    if(strcmp(c_sys_msg, "EXCPT_EOS") == 0 )
    {
      st_ordbook.c_req_typ = 'E';
    }
    if(strcmp(c_sys_msg, "SYS_EVENT") == 0 ) /***Added in Ver 12.4 ***/
    {
      st_ordbook.c_req_typ = 'S';
    }
  }
     /** Ver 9.7 Ends ***/
	 
  if ( (st_pstn_actn.c_prd_typ == FUTURES || st_pstn_actn.c_prd_typ == FUTURE_PLUS) && st_pstn_actn.c_prd_typ != SLTP_FUTUREPLUS && st_xchngbook.c_spl_flg != ROLLOVER_WITH_SPREAD ) /** ver 4.7 added check for SLTP future plus **/ /** Ver 10.8 added check for Rollover With Spread **/
	i_returncode = fn_call_svc( c_ServiceName,
                             	c_err_msg,
                             	&st_pstn_actn,
                             	&st_pstn_actn,
                             	"vw_pstn_actn",
                             	"vw_pstn_actn",
                             	i_ip_len,
                             	i_op_len,
                             	0,
															c_svc_name);          /*ver 2.4 */

	 if ( i_returncode != SUCC_BFR )
  	{
    /** Ver 4.5 Starts **/
    if(( st_xchngbook.c_spl_flg != ROLLOVER) ||(st_xchngbook.c_spl_flg == ROLLOVER && i_returncode != INSUFFICIENT_LIMITS))
    {
    /** Ver 4.5 Ends **/

    /* 5.6 Starts */
    if(i_returncode == INSUFFICIENT_LIMITS)
    {
      c_insuff_flg = 'Y';
      strcpy(c_err_msg,strtok(c_err_msg,"|"));
      d_required_amt = atof(strtok(NULL,"|"));
			if ( DEBUG_MSG_LVL_3 )  /**** Added in Ver 9.6 ****/
			{
	      fn_userlog(c_ServiceName,"c_err_msg :%s:",c_err_msg);
		    fn_userlog(c_ServiceName,"d_required_amt :%lf:",d_required_amt);
			}
		}
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
    /* 5.6 Ends */
 
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );		/**Abort the  old transaction*/
		fn_errlog( c_ServiceName, "S31550", LIBMSG, c_err_msg  );
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
		/***************************start*************************************/
		/********1.7 - New Error condition added here*************************/
		/***************************start*************************************/
		i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
		if ( i_trnsctn == -1 )
		{
			fn_userlog(c_ServiceName," PLEASE CHECK THE THE FORWARDING STOPPED");
			fn_userlog(c_ServiceName," PLEASE CHECK THE SEQUENCE NO OR INCREASE BY ONE");
			fn_errlog( c_ServiceName, "S31555", LIBMSG, c_err_msg  );
   		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
   		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		/*** Ver 6.3  Starts ***/

		if(i_returncode == INSUFFICIENT_LIMITS &&  c_1clk_flg != 'Y')  /** Ver 12.3 ** c_1clk_flg added **/
    {
			i_returncode = 0 ;
			c_actn_flg = 'P' ;
    i_returncode = tpsuspend ( &tranid, 0 );
    if ( i_returncode== -1 )
    {
      fn_errlog( c_ServiceName, "S31560", LIBMSG, c_err_msg  );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
 
		i_returncode =  fn_ins_ffl_log_tbl  (  c_ServiceName,
                                           st_ordbook,
                                           c_err_msg,
                                           d_required_amt ,
																					 c_actn_flg 
                                        );
    if ( i_returncode != 0 )
    {
      fn_errlog( c_ServiceName, "S31565", LIBMSG, c_err_msg  );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

    }

		i_returncode = tpresume ( &tranid, 0 );
    if ( i_returncode== -1 )
    {
      fn_errlog( c_ServiceName, "S31570", LIBMSG, c_err_msg  );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

	  }

		/*** Ver 6.3  Ends   ***/

	
		if ( st_xchngbook.c_spl_flg == '*' )
		{
			st_xchngbook.c_spl_flg = NORMAL_ORDER;
			st_ordbook.c_spl_flg = NORMAL_ORDER;
		}
		
		st_xchngbook.l_ord_seq = l_xchng_seq_num;

		st_xchngbook.c_req_typ = NEW;
		st_xchngbook.c_ex_ordr_typ = ORDINARY_ORDER;

		/*** Addition done for Temporary orders placment during expiry****/
		if ( st_xchngbook.c_spl_flg == TEMPORARY_ORDER )
		{
			strcpy ( st_xchngbook.c_rqst_tm , st_xchngbook.c_ack_tm );
		}
		else
		{
			strcpy ( st_xchngbook.c_rqst_tm , (char *)c_sysdate.arr );
		}

		st_xchngbook.c_plcd_stts = 'J'; /* Rejected by EBA */

		/* Ver 2.9 Begins */

    if( c_fum_mrkt_typ == EXTND_MRKT && c_fcm_mrkt_typ == EXTND_MRKT )
    {
      st_ordbook.c_mrkt_typ = 'X';
      st_xchngbook.c_mkrt_typ = 'X';
    }
		else
		{
			st_ordbook.c_mrkt_typ = 'N';
			st_xchngbook.c_mkrt_typ = 'N';
		}

    /* Ver 2.9 Ends */

		i_ip_len = sizeof ( struct vw_xchngbook );
		i_op_len = sizeof ( struct vw_xchngbook );

		st_xchngbook.c_oprn_typ = INSERTION_ON_ORDER_MODIFICATION;

		fn_cpy_ddr ( st_xchngbook.c_rout_crt );

		/*** Commented in Ver 4.2 ***
		i_returncode = fn_call_svc( c_ServiceName,
																c_err_msg,
																&st_xchngbook,
																&st_xchngbook,
																"vw_xchngbook",
																"vw_xchngbook",
																i_ip_len,
																i_op_len,
																0,
																"SFO_UPD_XCHNGBK" );
		*************************/

		/*** Added in Ver 4.2 ***/
		i_returncode = fn_upd_xchngbk  ( c_ServiceName,
																		 &st_xchngbook,
																		 c_ip_address,
																	   st_usr_prfl.c_cln_mtch_accnt,		/*** Ver 5.1 ***/
																		 c_err_msg,
																		 l_init_sltp_rt,  /*** Ver 9.8 ****/
																		 l_init_lmt_rt,   /*** Ver 9.8 ****/
																		 l_lTP,           /*** Ver 9.8 ****/
																		 l_lmt_offset,    /*** Ver 9.8 ****/
																		 l_trail_amt,     /*** Ver 9.8 ****/
																		 c_prcimpv_flg,   /*** Ver 9.8 ****/
																		 st_usr_prfl.l_session_id  /** Ver 13.2 **/
																	 );
		/************************/

		if ( i_returncode != SUCC_BFR )
		{
			fn_errlog( c_ServiceName, "S31575", LIBMSG, c_err_msg  );
			fn_userlog(c_ServiceName," PLEASE CHECK THE THE FORWARDING STOPPED");
			fn_userlog(c_ServiceName," PLEASE CHECK THE SEQUENCE NO OR INCREASE BY ONE");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}                            	
     st_ordbook.l_clnt_ctgry = l_clnt_ctgry;  /** Ver 7.9 **/

    /******************* Commented in Ver 7.9 ************************
		EXEC SQL
    	SELECT  clm_clnt_ctgry_id
	  	INTO    :st_ordbook.l_clnt_ctgry
	  	FROM    clm_clnt_mstr
	  	WHERE   clm_mtch_accnt = :st_ordbook.c_cln_mtch_accnt;

		if ( SQLCODE != 0 )
		{
			fn_errlog( c_ServiceName, "S31580",SQLMSG,c_err_msg);
			fn_userlog(c_ServiceName," PLEASE CHECK THE THE FORWARDING STOPPED");
			fn_userlog(c_ServiceName," PLEASE CHECK THE SEQUENCE NO OR INCREASE BY ONE");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      ***  Ver 3.4 ***
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
    ********************** Ver 7.9 Comment ends **********************/ 
    
		EXEC SQL
			SELECT  CCG_PRO_CLI_IND
			INTO    :st_ordbook.c_pro_cli_ind
			FROM    CCG_CLNT_CTGRY
			WHERE   CCG_CLNT_CTGRY_ID = :st_ordbook.l_clnt_ctgry;

		if ( SQLCODE != 0 )
		{
			fn_errlog( c_ServiceName, "S31585",SQLMSG,c_err_msg);
			fn_userlog(c_ServiceName," PLEASE CHECK THE THE FORWARDING STOPPED");
			fn_userlog(c_ServiceName," PLEASE CHECK THE SEQUENCE NO OR INCREASE BY ONE");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		strcpy( st_ordbook.c_pipe_id, st_xchngbook.c_pipe_id ); 
		st_ordbook.c_ordr_stts = FAILED   /*** Failed in EBA 'F' Status***/;
		st_ordbook.c_oprn_typ = INSERT_ON_ORDER_PLACEMENT;
		strcpy ( st_ordbook.c_valid_dt,st_xchngbook.c_valid_dt);

		i_ip_len = sizeof ( struct vw_orderbook );
		i_op_len = sizeof ( struct vw_orderbook );

 /* 1.8		strcpy( st_ordbook.c_channel, c_channel ); **** 1.1***   * 1.8***/
		strcpy( st_ordbook.c_bp_id, c_bp_id );  /* 1.1 */

		if(DEBUG_MSG_LVL_5)
		{
		fn_userlog(c_ServiceName,"The BP id is :%s:", st_ordbook.c_bp_id); 
		fn_userlog(c_ServiceName,"The Alias is :%s: ",c_alias); 
		fn_userlog(c_ServiceName,"BP channel  is :%s:",st_ordbook.c_channel);
		}

		fn_cpy_ddr ( st_ordbook.c_rout_crt );

		/******************		 	VER 2.2 ADDITION STARTS		**********************/

    strcpy((char*)v_user_id_bkup.arr,st_ordbook.c_user_id);
    SETLEN(v_user_id_bkup);
    strcpy(st_ordbook.c_user_id,(char *)v_user_id_bkup.arr);

		if ( strcmp(st_usr_prfl.c_user_id,"system") == 0 && (c_bp_id [0] != '*') )      /***  Ver 3.5 ***/
  	{
      /******************** Commented in Ver 7.9 ****************
			EXEC SQL
				SELECT	CLM_TRD_FLG
				INTO		:c_trd_flg
				FROM		CLM_CLNT_MSTR
				WHERE		CLM_MTCH_ACCNT	=	:st_ordbook.c_cln_mtch_accnt;

			if ( SQLCODE	!=	0	)
			{
				fn_errlog( c_ServiceName, "S31590",SQLMSG,c_err_msg);
 				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
 				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );   
 				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
      ********************  Ver 7.9 Comment Ends ****************/	

			if ( c_trd_flg	!=	'Y'	)
			{ 
				rtrim(c_bp_id);
    		strcpy(st_usr_prfl.c_user_id,c_bp_id);
			}
			else
    	{
      	EXEC SQL
        	SELECT  UAC_USR_ID
        	INTO    :st_usr_prfl.c_user_id
        	FROM    UAC_USR_ACCNTS
        	WHERE   UAC_CLM_MTCH_ACCNT  = :st_ordbook.c_cln_mtch_accnt;

      	if ( SQLCODE  !=  0 )
      	{
        	fn_errlog( c_ServiceName, "S31595",SQLMSG,c_err_msg);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}

				rtrim(st_usr_prfl.c_user_id);
    	}
  	}
		else if ( strcmp(st_usr_prfl.c_user_id,"system") == 0 && (c_bp_id [0] == '*') ) 
  	{
			/*** fn_userlog(c_ServiceName,"Inside Failure Case User ID Is :%s:",st_ordbook.c_user_id);
    	strcpy(st_usr_prfl.c_user_id,st_ordbook.c_user_id); ** Commented in Ver 5.3 **/

      /**** Ver 5.3 Starts ***/

      if( sql_usr_dt_allwd_flg == 'Y')
      {
        strcpy(st_usr_prfl.c_user_id,(char *)v_user_id.arr);
      }
      else
      {
        if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
        {
   				fn_userlog(c_ServiceName,"Inside Failure Case User ID Is :%s:",st_ordbook.c_user_id);
				}
				strcpy(st_usr_prfl.c_user_id,st_ordbook.c_user_id);
      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"DT ALLOWED FLAG IS  :%c:", sql_usr_dt_allwd_flg);
        fn_userlog(c_ServiceName,"USER ID IS  :%s:", v_user_id.arr);
      }

      /**** Ver 5.3 Ends ***/
			
  	}

		if(DEBUG_MSG_LVL_5)
		{
    	fn_userlog(c_ServiceName,"v_user_id_bkup is   :%s:",v_user_id_bkup.arr);
    	fn_userlog(c_ServiceName,"st_ordbook.c_user_id is   :%s:",st_ordbook.c_user_id);
    	fn_userlog(c_ServiceName,"CALLING SFO_UPD_ORDRBK");
		}

		/*******************			VER 2.2 ADDITION ENDS			**********************/

		/***  Ver 3.4 Starts  ***/

    i_returncode  = fn_chk_dtallwd  ( c_ServiceName,
                                      &st_usr_prfl,
                                      c_user_id,
                                      &st_err_msg
                                    );

    if ( i_returncode != 0 )
    {
      fn_userlog(c_ServiceName,"Error While Selecting DL Set Up No. ");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"User ID from DT allowed function Is :%s:",c_user_id);
		}

     /*** Ver 7.9 Starts ***/
    c_span_flag = 'N';
    if(strcmp(st_ordbook.c_xchng_cd,"NFO") == 0)
    {
      c_span_flag = c_spn_flg;
    }
    else if(strcmp(st_ordbook.c_xchng_cd,"BFO") == 0)
    {
      c_span_flag = c_bse_spn_flg;
    }
    /** Ver 7.9 Ends **/

  	i_returncode  = fn_ins_ordrbook ( c_ServiceName,
																			c_user_id,
                                      c_span_flag,  /** Ver 7.9 **/
																			c_source_flg,	/** Ver 9.4 **/
 																			c_prcimpv_ordrbk_flg,	      /*** Ver 9.8 ***/
																			l_trail_ordrbk_amt,		      /*** Ver 9.8 ***/
																			l_ordrbk_lmt_offset,		    /*** Ver 9.8 ***/
																			v_pan_no.arr,			/*** Added In Ver 10.5 ***/
																			c_setlmnt_flg, /*** Ver 11.0 ***/
																			c_ven_id.arr,			 /*** Ver 11.5 ***/
                                      c_algo_id.arr,      /** ver 12.6 **/
                                      c_algo_ord_rmrks.arr, /** ver 12.6 **/
                                      l_sqroff_tm, /* Ver 12.9 */
                                      c_fc_flg,    /* Ver 12.9 */
																			&st_ordbook,
                                      &st_err_msg,
                                      c_1clk_flg,           /** Ver 12.3  **/
                                      c_1clk_prtflio_id     /** Ver 12.3  **/
                                    );

    if ( i_returncode != 0 )
    {
      fn_errlog( c_ServiceName, "S31600", LIBMSG, c_err_msg  );
      fn_userlog(c_ServiceName," PLEASE CHECK THE THE FORWARDING STOPPED");
      fn_userlog(c_ServiceName," PLEASE CHECK THE SEQUENCE NO OR INCREASE BY ONE");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		/***	Ver	3.4	Ends	***/

		/***	Commented In Ver	3.4

		i_returncode = fn_call_svc( c_ServiceName,
																c_err_msg,
																&st_ordbook,
																&st_ordbook,
																"vw_orderbook",
																"vw_orderbook",
																i_ip_len,
																i_op_len,
																0,
																"SFO_UPD_ORDRBK" );


		if ( i_returncode != SUCC_BFR )
		{
			fn_errlog( c_ServiceName, "S31605", LIBMSG, c_err_msg  );
			fn_userlog(c_ServiceName," PLEASE CHECK THE THE FORWARDING STOPPED");
			fn_userlog(c_ServiceName," PLEASE CHECK THE SEQUENCE NO OR INCREASE BY ONE");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		*******************************/                         

		/* Ver 2.9 Comment Begins 

    ****************************     Ver 2.8 Starts          **************************
    *** Code for temporary usage of immediate compliance release for extended market.**
    *** Shall be aligned with Order book and xchnge book views in next view release. **

    if( c_fum_mrkt_typ == EXTND_MRKT && c_fcm_mrkt_typ == EXTND_MRKT )
    {
						EXEC SQL
						UPDATE  fod_fo_ordr_dtls
						SET     fod_mrkt_typ = 'X'
						WHERE   fod_ordr_rfrnc = :st_ordbook.c_ordr_rfrnc ;

						if(SQLCODE != 0)
						{
							fn_errlog ( c_ServiceName, "S31610", SQLMSG, c_err_msg);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
						}

						EXEC SQL
							UPDATE  fxb_fo_xchng_book
							SET     fxb_mrkt_typ = 'X'
							WHERE   fxb_ordr_rfrnc = :st_xchngbook.c_ordr_rfrnc
							AND     fxb_mdfctn_cntr = :st_xchngbook.l_mdfctn_cntr ;

						if(SQLCODE != 0)
						{
							fn_errlog ( c_ServiceName, "S31615", SQLMSG, c_err_msg);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
						}
		}

    ******************     Ver 2.8 Ends            ************************ 

		 Ver 2.9 Comment Ends */

    /******************     VER 2.2 ADDITION STARTS   **********************/

    strcpy(st_ordbook.c_user_id,(char *)v_user_id_bkup.arr);

		if(DEBUG_MSG_LVL_5)
		{
    fn_userlog(c_ServiceName,"c_user_id_bkup is   :%s:",v_user_id_bkup.arr);
    fn_userlog(c_ServiceName,"st_ordbook.c_user_id is   :%s:",st_ordbook.c_user_id);
		}

    /*******************     VER 2.2 ADDITION ENDS     **********************/

		if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
		{
			fn_errlog( c_ServiceName, "S31620", LIBMSG, c_err_msg  );
			fn_userlog(c_ServiceName," PLEASE CHECK THE THE FORWARDING STOPPED");
			fn_userlog(c_ServiceName," PLEASE CHECK THE SEQUENCE NO OR INCREASE BY ONE");
 			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
 		  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		/***Posting the trigger***/
    strcpy ( c_fno_dmn_nm, "FNO" );
    strcpy ( c_fno_trg_nm, "TRG_LOOK_TAB" );
    strcpy ( c_fno_trg_dat, "TRG_LOOK_TAB" );

    i_returncode = fn_call_svc_fml ( c_ServiceName,
                                    c_err_msg,
                                    "SFO_FOS_TRG",
                                    0,
                                    4,
                                    0,
                                    FFO_DMN_NM, (char *)c_fno_dmn_nm,
                                    FFO_TRG_NM, (char *)c_fno_trg_nm,
                                    FFO_ABT_TRG_DATA, (char *)c_fno_trg_dat,
                                    FFO_ABT_FILTER, (char *)st_xchngbook.c_pipe_id);

    if ( i_returncode != SUCC_BFR )
    {
      fn_errlog( c_ServiceName, "S31625", LIBMSG, c_err_msg  );
    }
		/***Posting the trigger ends***/


	/*****************************End**********************************/
		if(DEBUG_MSG_LVL_3)
		{
		fn_userlog(c_ServiceName,"ONE FAILURE ORDER INSERTED");
		}

 		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

		} /* Ver 4.5 */
  }
	
	if ( st_xchngbook.c_spl_flg == '*' )
	{
		st_xchngbook.c_spl_flg = NORMAL_ORDER;
		st_ordbook.c_spl_flg = NORMAL_ORDER;
	}
	
	st_xchngbook.l_ord_seq = l_xchng_seq_num;

	st_xchngbook.c_req_typ = NEW;
	st_xchngbook.c_ex_ordr_typ = ORDINARY_ORDER;

	/*** Addition done for Temporary orders placment during expiry****/
	if ( st_xchngbook.c_spl_flg == TEMPORARY_ORDER )
	{
		strcpy ( st_xchngbook.c_rqst_tm , st_xchngbook.c_ack_tm );
	}
	else
	{
		strcpy ( st_xchngbook.c_rqst_tm , (char *)c_sysdate.arr );
	}

  st_xchngbook.c_plcd_stts = 'R'; /* Request Placed */

	/* Ver 2.9 Begins */

    if( c_fum_mrkt_typ == EXTND_MRKT && c_fcm_mrkt_typ == EXTND_MRKT )
    {
      st_ordbook.c_mrkt_typ = 'X';
      st_xchngbook.c_mkrt_typ = 'X';
    }
		else
		{
			st_ordbook.c_mrkt_typ = 'N';
			st_xchngbook.c_mkrt_typ = 'N';
		}

  /* Ver 2.9 Ends */

	i_ip_len = sizeof ( struct vw_xchngbook );
	i_op_len = sizeof ( struct vw_xchngbook );

	st_xchngbook.c_oprn_typ = INSERTION_ON_ORDER_MODIFICATION;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"2-st_ordbook.l_cse_id IS :%ld:",st_ordbook.l_cse_id); /* Ver 2.9 */
	}

	fn_cpy_ddr ( st_xchngbook.c_rout_crt );

	/*** Commented in Ver 4.2 ***
	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_xchngbook,
                              &st_xchngbook,
                              "vw_xchngbook",
                              "vw_xchngbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_XCHNGBK" );
	*****************************/

	/*** Added in Ver 4.2 ***/
  if(DEBUG_MSG_LVL_3) /**** Added in Ver 9.6 ****/
	{
		fn_userlog(c_ServiceName,"sachin st_xchngbook.c_ordr_rfrnc :%s:",st_xchngbook.c_ordr_rfrnc);
	}
	i_returncode = fn_upd_xchngbk  ( c_ServiceName,
																	 &st_xchngbook,
																	 c_ip_address,
																	 st_usr_prfl.c_cln_mtch_accnt,		/*** Ver 5.1 ***/
																	 c_err_msg,
																	 l_init_sltp_rt,  /*** Ver 9.8 ****/
                                   l_init_lmt_rt,   /*** Ver 9.8 ****/
                                   l_lTP,           /*** Ver 9.8 ****/
                                   l_lmt_offset,    /*** Ver 9.8 ****/
                                   l_trail_amt,     /*** Ver 9.8 ****/
                                   c_prcimpv_flg,   /*** Ver 9.8 ****/
																	 st_usr_prfl.l_session_id  /** Ver 13.2 **/
																 );
	/************************/

  if ( i_returncode != SUCC_BFR )
 	{
		fn_errlog( c_ServiceName, "S31630", LIBMSG, c_err_msg  );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
 		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}                            	

  st_ordbook.l_clnt_ctgry = l_clnt_ctgry; /** Ver 7.9 **/ 
 
  /*********************** Commented in Ver 7.9 **************************
  EXEC SQL
    SELECT  CLM_CLNT_CTGRY_ID
    INTO    :st_ordbook.l_clnt_ctgry
    FROM    CLM_CLNT_MSTR
    WHERE   CLM_MTCH_ACCNT = :st_ordbook.c_cln_mtch_accnt;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31635",SQLMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      ***  Ver 3.4 ***
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  ************************ Ver 7.9 comment ends **********************/

  EXEC SQL
    SELECT  CCG_PRO_CLI_IND
    INTO    :st_ordbook.c_pro_cli_ind
    FROM    CCG_CLNT_CTGRY
    WHERE   CCG_CLNT_CTGRY_ID = :st_ordbook.l_clnt_ctgry;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31640",SQLMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	strcpy( st_ordbook.c_pipe_id, st_xchngbook.c_pipe_id ); 
	st_ordbook.c_ordr_stts = REQUESTED;
	st_ordbook.c_oprn_typ = INSERT_ON_ORDER_PLACEMENT;
  strcpy ( st_ordbook.c_valid_dt,st_xchngbook.c_valid_dt);

	i_ip_len = sizeof ( struct vw_orderbook );
	i_op_len = sizeof ( struct vw_orderbook );

/* 1.8	strcpy( st_ordbook.c_channel, c_channel ); * 1.1 *  *1.8*/
	strcpy( st_ordbook.c_bp_id, c_bp_id );  /* 1.1 */

	if(DEBUG_MSG_LVL_5)
	{
	fn_userlog(c_ServiceName,"The BP id is :%s:", st_ordbook.c_bp_id); 
	fn_userlog(c_ServiceName,"The Alias Is :%s: ",c_alias); 
  fn_userlog(c_ServiceName,"BP channel  is :%s:",st_ordbook.c_channel);
	}

	fn_cpy_ddr ( st_ordbook.c_rout_crt );

  /******************     VER 2.2 ADDITION STARTS   **********************/

  strcpy((char*)v_user_id_bkup.arr,st_ordbook.c_user_id);
  SETLEN(v_user_id_bkup);
  strcpy(st_ordbook.c_user_id,(char *)v_user_id_bkup.arr);

	if ( strcmp(st_usr_prfl.c_user_id,"system") == 0 && (c_bp_id [0] != '*') )      /***  Ver 3.5 ***/
	{
    /************** Commented in Ver 7.9 ********************** 
   	EXEC SQL
    	SELECT  CLM_TRD_FLG
    	INTO    :c_trd_flg
    	FROM    CLM_CLNT_MSTR
    	WHERE   CLM_MTCH_ACCNT  = :st_ordbook.c_cln_mtch_accnt;

  	if ( SQLCODE  !=  0 )
  	{
    	fn_errlog( c_ServiceName, "S31645",SQLMSG,c_err_msg);
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );     
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
    ************** Comment Ends Ver 7.9 ***********************/  

  	if ( c_trd_flg  !=  'Y' )
  	{
    	rtrim(c_bp_id);
    	strcpy(st_usr_prfl.c_user_id,c_bp_id);
  	}
		else
		{
			EXEC SQL
				SELECT	UAC_USR_ID
				INTO		:st_usr_prfl.c_user_id
				FROM		UAC_USR_ACCNTS
				WHERE		UAC_CLM_MTCH_ACCNT	=	:st_ordbook.c_cln_mtch_accnt;

			if ( SQLCODE  !=  0 )
    	{
      	fn_errlog( c_ServiceName, "S31650",SQLMSG,c_err_msg);
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

	    rtrim(st_usr_prfl.c_user_id);
		}
	}
	else if ( strcmp(st_usr_prfl.c_user_id,"system") == 0 && (c_bp_id [0] == '*') )
	{
		/*** strcpy(st_usr_prfl.c_user_id,st_ordbook.c_user_id); ** Commented in Ver 5.3 ***/

    /**** Ver 5.3 Starts ***/

    if( sql_usr_dt_allwd_flg == 'Y')
    {
      strcpy(st_usr_prfl.c_user_id,(char *)v_user_id.arr);
    }
    else
    {
      strcpy(st_usr_prfl.c_user_id,st_ordbook.c_user_id);
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"DT ALLOWED FLAG IS  :%c:", sql_usr_dt_allwd_flg);
      fn_userlog(c_ServiceName,"USER ID IS  :%s:", v_user_id.arr);
    }

    /**** Ver 5.3 Ends ***/
	}

	if(DEBUG_MSG_LVL_5)
	{
  	fn_userlog(c_ServiceName,"v_user_id_bkup is   :%s:",v_user_id_bkup.arr);
  	fn_userlog(c_ServiceName,"st_ordbook.c_user_id is   :%s:",st_ordbook.c_user_id);
  	fn_userlog(c_ServiceName,"CALLING SFO_UPD_ORDRBK");
	}

  /*******************     VER 2.2 ADDITION ENDS     **********************/

  /***  Ver 3.4 Starts  ***/

	i_returncode  = fn_chk_dtallwd  ( c_ServiceName,
                                  &st_usr_prfl,
                                	c_user_id,
                                  &st_err_msg
                                );

	if ( i_returncode != 0 )
	{
  	fn_userlog(c_ServiceName,"Error While Selecting DL Set Up No. ");
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName,"User ID from DT allowed function Is :%s:",c_user_id);
	}

  /*** Ver 7.9 Starts ***/
    c_span_flag = 'N';
    if(strcmp(st_ordbook.c_xchng_cd,"NFO") == 0)
    {
      c_span_flag = c_spn_flg;
    }
    else if(strcmp(st_ordbook.c_xchng_cd,"BFO") == 0)
    {
      c_span_flag = c_bse_spn_flg;
    }
    /** Ver 7.9 Ends **/

	i_returncode  = fn_ins_ordrbook ( c_ServiceName,
                                    c_user_id,
                                  	c_span_flag,  /** Ver 7.9 **/
																		c_source_flg,	/** Ver 9.4 **/
                                   	c_prcimpv_ordrbk_flg,       /*** Ver 9.8 ***/
                                    l_trail_ordrbk_amt,         /*** Ver 9.8 ***/
                                    l_ordrbk_lmt_offset,        /*** Ver 9.8 ***/
																		v_pan_no.arr,			/*** Added In Ver 10.5 ***/
																		c_setlmnt_flg,   /*** Ver 11.0 ***/
																		c_ven_id.arr,			 /*** Ver 11.5 ***/
                                    c_algo_id.arr,      /** ver 12.6 **/
                                    c_algo_ord_rmrks.arr, /** ver 12.6 **/
                                    l_sqroff_tm, /* Ver 12.9 */
                                    c_fc_flg,    /* Ver 12.9 */
																		&st_ordbook,
                                  	&st_err_msg,
                                    c_1clk_flg,           /** Ver 12.3  **/
                                    c_1clk_prtflio_id     /** Ver 12.3  **/
 	                               	);

	if ( i_returncode != 0 )
	{
  	fn_errlog( c_ServiceName, "S31655", LIBMSG, c_err_msg  );
  	fn_userlog(c_ServiceName," PLEASE CHECK THE THE FORWARDING STOPPED");
  	fn_userlog(c_ServiceName," PLEASE CHECK THE SEQUENCE NO OR INCREASE BY ONE");
  	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/ 
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	/***	Ver	3.4	Ends	***/

	/*** Ver 4.7 Starts ***/

  if ( st_cntrct.c_prd_typ == 'U' &&
		   ( strcmp(c_sys_msg,"EOS") == 0 || strcmp(c_sys_msg,"COVER_SLTP") == 0 || strcmp(c_sys_msg,"OFF") == 0  || strcmp(c_sys_msg,"EXCPT_EOS") == 0  || strcmp(c_sys_msg,"MY_EOS") == 0 || strcmp(c_sys_msg,"SYS_EVENT")  ==0 ) /*** EXCPT_EOS added in Ver 7.7 ***/ /*** MY_EOS added in Ver 9.7 ***//*** ver 12.7 SYS_EVENT ***/
     )
	{
    if ( strcmp(c_sys_msg,"OFF") == 0 )
		{
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"st_xchngbook.c_ordr_flw is :%c:",st_xchngbook.c_ordr_flw);
				fn_userlog(c_ServiceName,"st_xchngbook.l_ord_tot_qty is :%ld:",st_xchngbook.l_ord_tot_qty);
			}

			/*** Ver 6.1 starts here ***/

			/*******************************************************************************************************************************
			1.
			System shall first check if any Fresh open position exist and match offline order & trade against Fresh open position.
			If multiple open position exists of same order description then system shall map the offline order with any one random position 
			by taking rownum equals one.
			i.e.
			FRESH		BUY		A1	A2	200		|		Offline order
			COVER		SELL	A2	A1	50		|		SELL	150

			Here 150 Fresh BUY open position shall be mapped with 150 SELL Offline order.
			********************************************************************************************************************************/

			EXEC SQL
				SELECT
								FOD_ORDR_RFRNC
				INTO    :c_fresh_ord_ref		
				FROM    FOD_FO_ORDR_DTLS F,
							 (
								SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
											 SUM( DECODE( FOD_ORDR_FLW, 'S', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY
								FROM   FOD_FO_ORDR_DTLS
								WHERE  FOD_XCHNG_CD       = :st_cntrct.c_xchng_cd
								AND    FOD_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
								AND    FOD_UNDRLYNG       = :st_cntrct.c_undrlyng
								AND    FOD_PRDCT_TYP      = :st_cntrct.c_prd_typ
								AND    FOD_EXPRY_DT       = :c_expiry_dt
								AND    FOD_INDSTK         = :st_cntrct.c_ctgry_indstk
								AND    FOD_EXER_TYP       = :st_cntrct.c_exrc_typ
								GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
								HAVING    SUM( DECODE( FOD_ORDR_FLW, 'S', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) )  != 0
							 ) PSTN
				WHERE   PSTN.FRSH_ORDR_RFRNC = F.FOD_ORDR_RFRNC
				AND     DECODE( F.FOD_ORDR_FLW ,'B', PSTN.OPEN_QTY , PSTN.OPEN_QTY * -1 ) > 0
				AND     F.FOD_ORDR_FLW       = DECODE(:st_xchngbook.c_ordr_flw,'B','S','S','B')
				AND     ABS(PSTN.OPEN_QTY)   = :st_xchngbook.l_ord_tot_qty
				AND     ROWNUM = 1;

			if ( SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND)
			{
				fn_errlog( c_ServiceName, "S31660",SQLMSG,c_err_msg);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		 }
	
		 if ( SQLCODE == NO_DATA_FOUND )
		 {
		  fn_userlog( c_ServiceName, "OFFLINE upload inside cover Excess position");
			
			/******************************************************************************************************
			2.
			If  there is no further fresh position against which the order or trade can be matched 
			then system shall check whether any excess cover position created and treat this as a Fresh position.
			i.e.
			FRESH		BUY		C1	C3	200
			COVER		SELL	C2	C1	200
			COVER		SELL	C3	C1	100

			Cover excess position will be determined i.e C3
			*******************************************************************************************************/

			EXEC SQL
				SELECT	MAX(FOD_ORDR_RFRNC)
				INTO		:c_ordr_ref_to_upd
				FROM		FOD_FO_ORDR_DTLS
				WHERE		FOD_SLTP_ORDR_RFRNC IN 
								(SELECT	DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC )
								FROM		FOD_FO_ORDR_DTLS
								WHERE		FOD_XCHNG_CD       = :st_cntrct.c_xchng_cd
								AND			FOD_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
								AND			FOD_UNDRLYNG       = :st_cntrct.c_undrlyng
								AND			FOD_PRDCT_TYP      = :st_cntrct.c_prd_typ
								AND			FOD_EXPRY_DT       = :c_expiry_dt
								AND			FOD_INDSTK         = :st_cntrct.c_ctgry_indstk
								AND			FOD_EXER_TYP       = :st_cntrct.c_exrc_typ
								GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
								HAVING    SUM( DECODE( FOD_ORDR_FLW, 'S', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) )  != 0
							 ) 
				/***AND     DECODE( FOD_ORDR_FLW ,'S', PSTN.OPEN_QTY , 'B', PSTN.OPEN_QTY * -1 ) < 0 Check if required ***/
				AND     FOD_ORDR_FLW					= decode(:st_xchngbook.c_ordr_flw,'B','S','S','B')
				AND     FOD_EXEC_QTY					= :st_xchngbook.l_ord_tot_qty
       /***  AND     FOD_FC_FLAG = 'C';  *****commented in ver 10.3***/
				/** commented in ver 12.4 AND     FOD_FC_FLAG = :c_cvr_flg  *****Ver 10.3 Hard Parsing*****/
        AND     FOD_FC_FLAG in ( :c_cvr_flg,:c_profit_flg);  /***Ver 12.4 *****/
			
			if ( SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND && SQLCODE != NULL_RETURN )
			{
				fn_errlog( c_ServiceName, "S31665",SQLMSG,c_err_msg);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		  }

			if (SQLCODE == 0)
			{
        
				if(DEBUG_MSG_LVL_3)
			  {
					fn_userlog(c_ServiceName,"c_ordr_ref_to_upd = :%s:",c_ordr_ref_to_upd);
			  }

				/********************************************************
				3. Treat this cover excess position as fresh.
				i.e.
				FRESH		BUY		C1	C3		200
				COVER		SELL	C2	C1		200
				FRESH		SELL	C3	NULL	100
				*********************************************************/

				EXEC SQL
					UPDATE	FOD_FO_ORDR_DTLS
            
					SET		/*** FOD_FC_FLAG = 'F'  *****commented in ver 10.3***/
                 	FOD_FC_FLAG = :c_frsh_flg,  /*****Ver 10.3 Hard Parsing *****/
									FOD_SLTP_ORDR_RFRNC = NULL
					WHERE		FOD_ORDR_RFRNC = :c_ordr_ref_to_upd;
		
				if ( SQLCODE  !=  0 )
				{
					fn_errlog( c_ServiceName, "S31670",SQLMSG,c_err_msg);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
	        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
  				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog( c_ServiceName,"Updated :%d: record as Fresh due to Excess qty in %s|%s|%s|%c|%s", sqlca.sqlerrd[2], st_cntrct.c_xchng_cd,st_usr_prfl.c_cln_mtch_accnt,st_cntrct.c_undrlyng,st_cntrct.c_prd_typ,c_expiry_dt.arr);
				}

				/************************************************************************************
				4. De-reference the cover excess position, from the previous Fresh order tagged.
				Max is taken in order to handle multiple covers mapped to single fresh.
				i.e.
				FRESH		BUY		C1	C2		200
				COVER		SELL	C2	C1		200
				FRESH		SELL	C3	NULL	100
				*************************************************************************************/

				EXEC SQL
					UPDATE	FOD_FO_ORDR_DTLS
					SET			FOD_SLTP_ORDR_RFRNC = (	SELECT MAX(FOD_ORDR_RFRNC) 
																					FROM	 FOD_FO_ORDR_DTLS
																					WHERE	 FOD_SLTP_ORDR_RFRNC IN (	SELECT FOD_ORDR_RFRNC 
																																					FROM	 FOD_FO_ORDR_DTLS
																																					WHERE	 FOD_SLTP_ORDR_RFRNC = :c_ordr_ref_to_upd
																																				)
																				)
					WHERE		FOD_SLTP_ORDR_RFRNC = :c_ordr_ref_to_upd;
		
				if ( SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
				{
					fn_errlog( c_ServiceName, "S31675",SQLMSG,c_err_msg);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
	        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
  				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}

			/**********************************************************************************************************************
			5.
			System shall then map the offline square off transaction against such excess cover position open in the system. 
			i.e.
			FRESH		BUY		C1	C2		200		|		Offline order
			COVER		SELL	C2	C1		200		|		BUY	100
			FRESH		SELL	C3	NULL	100		|

			Here 100 SELL open position shall be mapped with 100 BUY square off Offline order.
			***********************************************************************************************************************/
     
    /****Ver 10.3 Query Changed to Uppercase***/
 
			EXEC SQL
			SELECT
								FOD_ORDR_RFRNC
				INTO    :c_fresh_ord_ref		
				FROM    FOD_FO_ORDR_DTLS F,
							 (
								SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
											 SUM( DECODE( FOD_ORDR_FLW, 'S', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY
								FROM   FOD_FO_ORDR_DTLS
								WHERE  FOD_XCHNG_CD       = :st_cntrct.c_xchng_cd
								AND    FOD_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
								AND    FOD_UNDRLYNG       = :st_cntrct.c_undrlyng
								AND    FOD_PRDCT_TYP      = :st_cntrct.c_prd_typ
								AND    FOD_EXPRY_DT       = :c_expiry_dt
								AND    FOD_INDSTK         = :st_cntrct.c_ctgry_indstk
								AND    FOD_EXER_TYP       = :st_cntrct.c_exrc_typ
								GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
								HAVING    SUM( DECODE( FOD_ORDR_FLW, 'S', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) )  != 0
							 ) PSTN
				WHERE   PSTN.FRSH_ORDR_RFRNC = F.FOD_ORDR_RFRNC
				AND     F.FOD_ORDR_FLW       = ( CASE WHEN DECODE( F.FOD_ORDR_FLW ,'B', PSTN.OPEN_QTY , 'S', PSTN.OPEN_QTY * -1 ) > 0 
																						  THEN DECODE(:st_xchngbook.c_ordr_flw,'B','S','S','B')
																			   ELSE :st_xchngbook.c_ordr_flw	
																			   END 
																			 )		
				AND     ABS(PSTN.OPEN_QTY)   = :st_xchngbook.l_ord_tot_qty
				AND     ROWNUM = 1;

				if ( SQLCODE  !=  0 )
				{
					fn_errlog( c_ServiceName, "S31680",SQLMSG,c_err_msg);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
		      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
          Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			 }
		  } 

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName, "OFFLINE c_fresh_ord_ref = :%s:", c_fresh_ord_ref );	
			}
			/*** Ver 6.1 ends here ***/

			/*** Commented in Ver 6.1 ***
			 EXEC SQL
				SELECT
								FOD_SLTP_ORDR_RFRNC
				INTO    :c_cover_ord_ref
				FROM    FOD_FO_ORDR_DTLS F,
							 (
								SELECT DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) FRSH_ORDR_RFRNC,
											 SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) OPEN_QTY
								FROM   FOD_FO_ORDR_DTLS
								WHERE  FOD_XCHNG_CD       = :st_cntrct.c_xchng_cd
								AND    FOD_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
								AND    FOD_UNDRLYNG       = :st_cntrct.c_undrlyng
								AND    FOD_PRDCT_TYP      = :st_cntrct.c_prd_typ
								AND    FOD_EXPRY_DT       = :c_expiry_dt
								AND    FOD_INDSTK         = :st_cntrct.c_ctgry_indstk
								AND    FOD_EXER_TYP       = :st_cntrct.c_exrc_typ
								GROUP BY  DECODE(FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC )
								HAVING    SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ) > 0
							 ) PSTN
				WHERE   PSTN.FRSH_ORDR_RFRNC = F.FOD_ORDR_RFRNC
				AND     F.FOD_ORDR_FLW       = decode(:st_xchngbook.c_ordr_flw,'B','S','S','B')
				AND     PSTN.OPEN_QTY        = :st_xchngbook.l_ord_tot_qty
				AND     ROWNUM = 1;

			if ( SQLCODE  !=  0 )
			{
				fn_errlog( c_ServiceName, "S31685",SQLMSG,c_err_msg);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		 }
		 fn_userlog( c_ServiceName, "OFFLINE c_cover_ord_ref = :%s:", c_cover_ord_ref );
		 ***/
	 }
	 /*** else  *** Else loop commented and taken up in Ver 9.7 to get input order reference and check overlap of EOS process ***
   {
			i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_ORDR_RFRNC,0,(char *)c_cover_ord_ref,0);
			i_ferr [0] = Ferror32;

			if ( i_err[0] == -1 )
			{
				fn_errlog( c_ServiceName, "S31690", FMLMSG, c_err_msg  );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
	      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); *** Ver 8.2 ***
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); *** Ver 8.2 ***
  			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			if (DEBUG_MSG_LVL_3) **** Added in Ver 9.6 ****
			{
				fn_userlog( c_ServiceName, "c_cover_ord_ref = :%s:", c_cover_ord_ref );
			}
		} ***/
		
		if ( strcmp(c_sys_msg,"COVER_SLTP") == 0 )
		{
			if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
			{
				fn_userlog( c_ServiceName, "Inside COVER_SLTP" );
			}
			i_returncode  = fn_cover_sltpfp ( c_ServiceName,
																				c_cover_ord_ref,
																				&st_ordbook,
																				&st_pstn_actn,
																				&st_err_msg
																			);
		}
		else if (( strcmp(c_sys_msg,"EOS") == 0  || strcmp(c_sys_msg,"MY_EOS") == 0 || strcmp(c_sys_msg,"EXCPT_EOS") == 0 || strcmp(c_sys_msg,"SYS_EVENT") == 0)  && i_excp_flag == 0 )		/*** strcmp condition added in else loop Ver 6.1 ***/    /*** Added in Ver 9.7 MY_EOS, EXCPT_EOS, i_excp_flag***//***  SYS_EVENT added in ver 12.4 **/
		{
			if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
			{
				fn_userlog( c_ServiceName, "Inside Else" );
			}
			i_returncode  = fn_eos_sltpfp ( c_ServiceName,
																			c_cover_ord_ref,
																			&st_ordbook,
																			&st_err_msg
																		);
		}
		else if ( strcmp(c_sys_msg,"OFF") == 0 )		/*** else if loop added in Ver 6.1 ***/
		{
			if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
			{
				fn_userlog( c_ServiceName, "Inside OFFLINE" );
			}
			/***********************************************************************************
			6.
			Finally, the offline order placed shall be mapped with the cover excess position.
			i.e.
			FRESH		BUY		C1	C2	200		
			COVER		SELL	C2	C1	200		
			FRESH		SELL	C3	C4	100
			COVER		BUY		C4	C3	100
			************************************************************************************/

			i_returncode  = fn_off_sltpfp ( c_ServiceName,
																			c_fresh_ord_ref,
																			&st_ordbook,
																			&st_err_msg
																		);
		}
		else if (( strcmp(c_sys_msg,"EXCPT_EOS") == 0 || strcmp(c_sys_msg,"MY_EOS") == 0 || strcmp(c_sys_msg,"EOS") == 0) && i_excp_flag == 1 )     /*** Ver 7.7 ***/   /*** Added i_excp_flag, MY_EOS, EOS  in Ver 9.7 ***/
    {
			if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
			{
				fn_userlog( c_ServiceName, "Inside Exception EOS" );
			}
      i_returncode  = fn_excpt_eos_fppls ( c_ServiceName,
																						c_cover_ord_ref,
																						&st_ordbook,
																						&st_err_msg
																					);
    }


		if ( i_returncode != 0 )
		{
			fn_errlog( c_ServiceName, "S31695", LIBMSG, c_err_msg  );
			fn_userlog(c_ServiceName," Error in fun fn_eos_sltpfp");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
	    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
  		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
	/*** Ver 4.7 Ends ***/
	
	/***	Commented In Ver	3.4
	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_ordbook,
                              &st_ordbook,
                              "vw_orderbook",
                              "vw_orderbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_ORDRBK" );
  if ( i_returncode != SUCC_BFR )
 	{
		fn_errlog( c_ServiceName, "S31700", LIBMSG, c_err_msg  );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
 		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}                  

	********************************/

	/* Ver 2.9 Comment Begins           	

    ****************************     Ver 2.8 Starts          **************************
    *** Code for temporary usage of immediate compliance release for extended market.**
    *** Shall be aligned with Order book and xchnge book views in next view release. **

  if( c_fum_mrkt_typ == EXTND_MRKT && c_fcm_mrkt_typ == EXTND_MRKT )
  {
					EXEC SQL
						UPDATE  fod_fo_ordr_dtls
						SET     fod_mrkt_typ = 'X'
						WHERE   fod_ordr_rfrnc = :st_ordbook.c_ordr_rfrnc ;

					if(SQLCODE != 0)
					{
						fn_errlog ( c_ServiceName, "S31705", SQLMSG, c_err_msg);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
					}

					EXEC SQL
						UPDATE  fxb_fo_xchng_book
						SET     fxb_mrkt_typ = 'X'
						WHERE   fxb_ordr_rfrnc = :st_xchngbook.c_ordr_rfrnc
						AND     fxb_mdfctn_cntr = :st_xchngbook.l_mdfctn_cntr ;

					if(SQLCODE != 0)
					{
						fn_errlog ( c_ServiceName, "S31710", SQLMSG, c_err_msg);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
					}
  }

  ******************     Ver 2.8 Ends            ************************

	Ver 2.9 Comment Ends */

  /******************     VER 2.2 ADDITION STARTS   **********************/

  strcpy(st_ordbook.c_user_id,(char *)v_user_id_bkup.arr);

	if(DEBUG_MSG_LVL_5)
	{
  fn_userlog(c_ServiceName,"v_user_id_bkup is   :%s:",v_user_id_bkup.arr);
  fn_userlog(c_ServiceName,"st_ordbook.c_user_id is   :%s:",st_ordbook.c_user_id);
	}

  /*******************     VER 2.2 ADDITION ENDS     **********************/


/*** ver 12.4 start ***/
  fn_userlog(c_ServiceName,"TODAYY st_cntrct.c_prd_typ :%c: c_sys_msg :%s:",st_cntrct.c_prd_typ,c_sys_msg);
 if (  st_cntrct.c_prd_typ == 'U' &&
         strcmp(c_sys_msg,"PROF_ORD") == 0 )
 {
    fn_userlog(c_ServiceName,"TODAYY 8 c_profit_ordr :%s: st_ordbook.c_ordr_rfrnc :%s:",c_profit_ordr,st_ordbook.c_ordr_rfrnc);

    EXEC SQL
      UPDATE FOD_FO_ORDR_DTLS
         SET FOD_SLTP_ORDR_RFRNC = :c_profit_ordr,
             FOD_FC_FLAG = 'T'
         WHERE FOD_ORDR_RFRNC = :st_ordbook.c_ordr_rfrnc;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31715", SQLMSG, c_err_msg  );
      fn_userlog(c_ServiceName," Error in fun fn_eos_sltpfp");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
 }


  /** ver 12.4 ends ***/
  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31720", TPMSG, c_err_msg  );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if ( Fadd32 ( ptr_fml_Obuf, FFO_ORDR_RFRNC,
                ( char *)st_ordbook.c_ordr_rfrnc, 0 ) == -1 )
	{
 		fn_errlog( c_ServiceName, "S31725",FMLMSG,c_err_msg);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
 	  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  /*************1.7 Changes for DT removed from here ***************************/
	if ( Fadd32 ( ptr_fml_Obuf, FFO_PIPE_ID,
                ( char *)st_xchngbook.c_pipe_id, 0 ) == -1 )
	{
 		fn_errlog( c_ServiceName, "S31730",FMLMSG,c_err_msg);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	/**** Ver 13.1 Start ****/
    if ( (  st_cntrct.c_prd_typ == 'F') /* Ver 13.3 */
        /*&& (st_xchngbook.c_spl_flg == CLIENT_SQROFF || st_xchngbook.c_spl_flg=='*') */
        && c_source_flg !='F'
        && (!strstr( st_xchngbook.c_xchng_rmrks,"Physical Settlement EOS")) && (st_xchngbook.c_spl_flg !=  PHYSICAL_DLVRY_SQOFF)
        && (st_xchngbook.c_spl_flg != SYSTEM_SQUAREOFF )
        && (st_xchngbook.c_spl_flg != IMTM_SYS_SQUAREOFF)
        && (st_xchngbook.c_spl_flg != LMTNEG_SYS_SQUAREOFF )
       )
    {

			if ( c_popup_flg == 'Y' && i_popup==1 )	/*** Ver 13.6  added i_popup ***/
    	{
      EXEC SQL INSERT INTO FFS_FO_FLASH_DISCRYP
               (
                FFS_CLM_MTCH_ACCNT,FFS_XCHNG_CD,FFS_PRDCT_TYP,FFS_UNDRLYNG,FFS_EXPRY_DT,
                FFS_EXER_TYP,FFS_OPT_TYP,FFS_STRK_PRC,FFS_LMT_MRKT_FLG,FFS_LMT_RT,FFS_ORDR_TOT_QTY,FFS_CLS_TIME,
                FFS_CONF_REQ,FFS_INS_DT,FFS_CONSENT_DATE
                )
                SELECT
                FFS_CLM_MTCH_ACCNT,FFS_XCHNG_CD,FFS_PRDCT_TYP,FFS_UNDRLYNG,FFS_EXPRY_DT,
                FFS_EXER_TYP,FFS_OPT_TYP,FFS_STRK_PRC,FFS_LMT_MRKT_FLG,FFS_LMT_RT,FFS_ORDR_TOT_QTY,FFS_CLS_TIME,
                FFS_CONF_REQ,FFS_INS_DT,sysdate
                FROM FFS_FO_FLASH_SETTING  where FFS_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt;

     	if( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31735",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amt,0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
			EXEC SQL DELETE FROM FFS_FO_FLASH_SETTING  where FFS_CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt;
      if( SQLCODE != 0 && SQLCODE!=NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S31740",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT,(char *)&d_required_amt,0);
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    	}
    }
    /**** Ver 13.1 End ****/

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
	{
		fn_errlog( c_ServiceName, "S31745", LIBMSG, c_err_msg  );
 		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
    Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	/***Ver 13.9 *func call to compute real time margin ***/
	i_returncode = fn_upd_nrmlmrgn_reporting(st_usr_prfl.c_cln_mtch_accnt,
                                       st_cntrct.c_xchng_cd,
                                       c_ServiceName,
                                       c_err_msg
                                      );
  if( i_returncode != 0 )
  {
    	fn_errlog(c_ServiceName, "S31750", LIBMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	/***Ver 13.9 Ends here ***/

	if ( i_trnsctn == LOCAL_TRNSCTN )
	{
		/*
		fn_pst_trg( c_ServiceName, "TRG_LOOK_TAB", "TRG_LOOK_TAB", 
                             	st_xchngbook.c_pipe_id );
		*/
	
    /******************************************************/
    /****Changes for Tux4 Triggers***************************/
    /********************************************************/


      /* To post the Trigger in Tux3 Domain Call the service SFO_FOS_TRG */
    strcpy ( c_fno_dmn_nm, "FNO" );
    strcpy ( c_fno_trg_nm, "TRG_LOOK_TAB" );
    strcpy ( c_fno_trg_dat, "TRG_LOOK_TAB" );
    i_returncode = fn_call_svc_fml ( c_ServiceName,
                                    c_err_msg,
                                    "SFO_FOS_TRG",
                                    0,
                                    4,
                                    0,
                                    FFO_DMN_NM, (char *)c_fno_dmn_nm,
                                    FFO_TRG_NM, (char *)c_fno_trg_nm,
                                    FFO_ABT_TRG_DATA, (char *)c_fno_trg_dat,
                                    FFO_ABT_FILTER, (char *)st_xchngbook.c_pipe_id);

    if ( i_returncode != SUCC_BFR )
    {
      fn_errlog( c_ServiceName, "S31755", LIBMSG, c_err_msg  );
    }

    /********************************************************/
    /****Changes for Tux4 Triggers ends**********************/
    /********************************************************/	
		
	}


  /*************************** 2.2 Addition Starts ****************************/

  if ( strcmp( st_ordbook.c_channel , "APP") == 0 || strcmp( st_ordbook.c_channel , "VSA") == 0 || strncmp( st_ordbook.c_channel , "CN", 2) == 0 || strcmp(st_ordbook.c_channel,"NET") == 0 )   /*** Ver 5.7 ** condition added for CNT channel ***/ 
							/***  Ver 5.9 Condition added for New Trade Racer ***/
  {
    l_can_qty = 0;  
    l_open_qty = st_xchngbook.l_ord_tot_qty;
    l_exprd_qty = 0;
		strcpy(c_xchng_ack,"0");
   
		if(DEBUG_MSG_LVL_3)
		{ 
		fn_userlog(c_ServiceName,"INSIDE APP / VSAT / CNT");  /*** Ver 5.7 ***/
		}

		i_err[0] = Fadd32 ( ptr_fml_Obuf, FFO_CANCL_QTY,( char *)&l_can_qty, 0 ); 
		i_err[1] = Fadd32 ( ptr_fml_Obuf, FFO_CHANNEL,( char *)st_ordbook.c_channel, 0 );
		i_err[2] = Fadd32 ( ptr_fml_Obuf, FFO_CTGRY_INDSTK,( char *)&(st_cntrct.c_ctgry_indstk), 0 ); 
		i_err[3] = Fadd32 ( ptr_fml_Obuf, FFO_EBA_MTCH_ACT_NO,( char *)st_usr_prfl.c_cln_mtch_accnt, 0 );
		i_err[4] = Fadd32 ( ptr_fml_Obuf, FFO_DSCLSD_QTY,( char *)&(st_xchngbook.l_dsclsd_qty), 0 ); 
		i_err[5] = Fadd32 ( ptr_fml_Obuf, FFO_EXEC_QTY,( char *)&(st_pstn_actn.l_exec_qty), 0 ); 
		i_err[6] = Fadd32 ( ptr_fml_Obuf, FFO_EXER_TYP,( char *)&(st_cntrct.c_exrc_typ), 0 ); 
		i_err[7] = Fadd32 ( ptr_fml_Obuf, FFO_EXPRD_QTY,( char *)&l_exprd_qty, 0 );
		i_err[8] = Fadd32 ( ptr_fml_Obuf, FFO_EXPRY_DT,( char *)st_cntrct.c_expry_dt, 0 );
		i_err[9] = Fadd32 ( ptr_fml_Obuf, FFO_LMT_MKT_SL_FLG,( char *)&(st_xchngbook.c_slm_flg), 0 );
		i_err[10]= Fadd32 ( ptr_fml_Obuf, FFO_LMT_RT,( char *)&(st_xchngbook.l_ord_lmt_rt), 0 );
    /************ ver 2.2 DLrevamp New FML used start**********/
		i_err[11]= Fadd32 ( ptr_fml_Obuf, FFO_C_OPNPSTN_QTY,( char *)&l_open_qty, 0 );  
		i_err[12]= Fadd32 ( ptr_fml_Obuf, FFO_ACK_NMBR,( char *)c_xchng_ack, 0 );
		i_err[13]= Fadd32 ( ptr_fml_Obuf, FFO_OPT_TYP,( char *)&(st_cntrct.c_opt_typ), 0 );
		i_err[14]= Fadd32 ( ptr_fml_Obuf, FFO_ORD_TOT_QTY,( char *)&(st_xchngbook.l_ord_tot_qty), 0 );
		i_err[15]= Fadd32 ( ptr_fml_Obuf, FFO_ORD_TYP,( char *)&(st_xchngbook.c_ord_typ), 0 );
		i_err[16]= Fadd32 ( ptr_fml_Obuf, FFO_ORD_VALID_DT,( char *)st_xchngbook.c_valid_dt, 0 );
		i_err[17]= Fadd32 ( ptr_fml_Obuf, FFO_ORDR_FLW,( char *)&(st_xchngbook.c_ordr_flw), 0 );
		i_err[18]= Fadd32 ( ptr_fml_Obuf, FFO_ORDR_STTS,( char *)&(st_ordbook.c_ordr_stts), 0 );
		i_err[19]= Fadd32 ( ptr_fml_Obuf, FFO_PRDCT_TYP,( char *)&(st_cntrct.c_prd_typ), 0 );
		i_err[20]= Fadd32 ( ptr_fml_Obuf, FFO_SPL_FLG,( char *)&(st_xchngbook.c_spl_flg), 0 );
		i_err[21]= Fadd32 ( ptr_fml_Obuf, FFO_STP_LSS_TGR,( char *)&(st_xchngbook.l_stp_lss_tgr), 0 );
		i_err[22]= Fadd32 ( ptr_fml_Obuf, FFO_STRK_PRC,( char *)&(st_cntrct.l_strike_prc), 0 );
		i_err[23]= Fadd32 ( ptr_fml_Obuf, FFO_TRD_DT,( char *)st_ordbook.c_trd_dt, 0 );
		i_err[24]= Fadd32 ( ptr_fml_Obuf, FFO_UNDRLYNG,( char *)st_cntrct.c_undrlyng, 0 );
		i_err[25]= Fadd32 ( ptr_fml_Obuf, FFO_XCHNG_CD,( char *)st_cntrct.c_xchng_cd, 0 );
    /************ ver 2.2 DLrevamp New FML used End**********/

    for( i_cnt = 0; i_cnt < 26; i_cnt++ ) 
    {
      if( i_err[i_cnt] == -1 )
      {
        fn_errlog( c_ServiceName, "S31760",FMLMSG,c_err_msg);
        fn_userlog(c_ServiceName, "Order has been sent but error while generating snapshot");
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); /*** Ver 8.2 ***/
        Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); /*** Ver 8.2 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }  
    }
  }
   
  /*************************** 2.2 Addition Ends ****************************/

	i_actn_id	=	0;			/***	Ver	3.4	***/
	Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );      /***  Ver 3.4 ***/
	tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
}

int fn_check_inp_fut( char *c_ServiceName,
                  struct vw_xchngbook *ptr_st_xchngbook, 
                  struct vw_cntrct_qt *ptr_st_cntrct_qt, 
                  char c_fum_mrkt_typ,                 /* Ver 2.8 */
                  char c_fcm_mrkt_typ,                 /* Ver 2.8 */               
                  int i_rollover_ord_ind,              /* Ver 10.8 */
                  char *c_spd_expry_dt1,               /* Ver 10.8 */
                  char *c_spd_expry_dt2,               /* Ver 10.8 */
                  struct vw_err_msg *ptr_st_err_msg )
{
	int i_dategreater=0;
	int i_returncode;
	char c_exg_crrnt_stts;
  char c_exg_extnd_stts;                            /* Ver 2.8 */
	char c_exg_ovrnght_stts ;     										/* Ver 4.6 */
	char c_err_msg[256];
	varchar	c_near_expry_dt [ LEN_DATE ];
	double d_min_ordr_val=0.0;
	double d_dsclsd_prcntg=0.0;
	long long ll_ordr_val;
	long long ll_min_ordr_val;

 /****Ver 10.3 Query Changed to Uppercase***/

  EXEC SQL
     SELECT EXG_CRRNT_STTS,
            EXG_EXTND_MRKT_STTS,                   /* Ver 2.8 */
						EXG_TMP_MKT_STTS,         						 /* Ver 4.6 */
            EXG_DSCLSD_PRCNTG
     INTO   :c_exg_crrnt_stts,
            :c_exg_extnd_stts,                     /* Ver 2.8 */
						:c_exg_ovrnght_stts,     						   /* Ver 4.6 */
            :d_dsclsd_prcntg
     FROM   EXG_XCHNG_MSTR
     WHERE  EXG_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd;

	if ( SQLCODE != 0 )
	{
 		fn_errlog( c_ServiceName, "S31765",SQLMSG,ptr_st_err_msg->c_err_msg);
		return FAILURE;
	}

	/** Addition done in the below validation for temporary order  **/
	/** placement during expiry                                    **/

	/** Orders cannnot be placed when the Exchange is under Expiry **/
	if ( ( c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY ) &&
			 ( ptr_st_xchngbook->c_spl_flg != TEMPORARY_ORDER ) && 
			 ( c_exg_ovrnght_stts !=  EXCHANGE_OPEN ) &&  											/*** Ver 4.6 ***/
			 ( strncmp ( ptr_st_xchngbook->c_xchng_rmrks , "CORP ACTN" , 9)!=0) &&		/********* Ver 2.0 ***********/
       (strncmp(ptr_st_xchngbook->c_xchng_rmrks, "SLTP FuturePlus to Futures" , 26)!=0 ) /*** Ver 9.0 ***/
     )
	{
 		/**  commented in Ver 2.8 
    fn_errlog( c_ServiceName, "B28518",DEFMSG,ptr_st_err_msg->c_err_msg);
		return FAILURE;
    comment ends **/

    /** Ver 2.8 Starts **/
    if( c_exg_extnd_stts == EXCHANGE_UNDER_EXPIRY )
    {
      fn_errlog( c_ServiceName, "B28518",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
    else if ( c_fum_mrkt_typ == NORMAL_MRKT && ptr_st_xchngbook->c_slm_flg != MARKET &&
             ptr_st_xchngbook->c_ord_typ != IMMEDIATE_OR_CANCEL )      /**  Underlying Level Check  **/
    {
      /** Only Normal Limit and SLTP orders come in this loop **/
      fn_userlog( c_ServiceName,"This Underlying Is Disabled For Extended Market Hours");
      fn_errlog( c_ServiceName, "B66066",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
    else if ( c_fcm_mrkt_typ == NORMAL_MRKT && ptr_st_xchngbook->c_slm_flg != MARKET &&
              ptr_st_xchngbook->c_ord_typ != IMMEDIATE_OR_CANCEL )     /**  Contract Level Check  **/
    {
      /** Only Normal Limit and SLTP orders come in this loop **/
      fn_userlog( c_ServiceName,"This Contract Is Disabled For Extended Market Hours");
      fn_errlog( c_ServiceName, "B66066",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
    /** Ver 2.8 Ends **/ 
	} 

	/** Temp Orders can be uploaded only when the Exchange is under Expiry **/
	if ( ( c_exg_crrnt_stts != EXCHANGE_UNDER_EXPIRY || c_exg_extnd_stts != EXCHANGE_UNDER_EXPIRY ) &&
			 ( ptr_st_xchngbook->c_spl_flg == TEMPORARY_ORDER ) )                    /** OR added in Ver 2.8 */
	{
 		fn_errlog( c_ServiceName, "B28564",DEFMSG,ptr_st_err_msg->c_err_msg);
		return FAILURE;
	} 

	if ( ( ptr_st_xchngbook->c_slm_flg == LIMIT ) ||
     ( ptr_st_xchngbook->c_slm_flg == STOP_LOSS ) )
	{

		/** Limit rate cannot be less than or equal to Zero for Limit orders **/

		/* if ( ptr_st_xchngbook->l_ord_lmt_rt <= 0 ) *** Commented in Ver 10.8 ***/
		if ( ptr_st_xchngbook->l_ord_lmt_rt <= 0 &&  (ptr_st_xchngbook->c_spl_flg != ROLLOVER_WITH_SPREAD))		/*** ver 10.8 ***/
		{

 			fn_errlog( c_ServiceName, "B28519",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE;
		}
 
    /*** 2.2 Added SL trigger price cannot be Zero for Stop Loss Order. ***/
    if(ptr_st_xchngbook->l_stp_lss_tgr == 0 && ptr_st_xchngbook->c_slm_flg == STOP_LOSS)
    {
      fn_errlog( c_ServiceName,"S31770"
          ,"Stop Loss trigger price cannot be Zero for Stop Loss Order.",ptr_st_err_msg->c_err_msg  );
      return FAILURE;
    }

    /*** Ver 10.8 Starts ***/

    if ( ptr_st_xchngbook->c_spl_flg == ROLLOVER_WITH_SPREAD)
    {
        if ( i_rollover_ord_ind != 2 )
        {
          i_returncode = fn_vrfy_prc_band_mkt_rws( c_ServiceName,
                                                   ptr_st_cntrct_qt->c_xchng_cd,
                                                   ptr_st_cntrct_qt->c_prd_typ,
                                                   ptr_st_cntrct_qt->c_undrlyng,
                                                   ptr_st_xchngbook->l_ord_lmt_rt,
                                                   c_spd_expry_dt1,
                                                   c_spd_expry_dt2,
                                                   ptr_st_err_msg);
        }
    }
    else
    {
    /*** Ver 10.8 Ends ***/
		/********* Ver 5.0 started ******************/

		if ( c_exg_crrnt_stts == EXCHANGE_OPEN )
		{
				rtrim(ptr_st_cntrct_qt->c_expry_dt);
				if(DEBUG_MSG_LVL_3) {
				fn_userlog( c_ServiceName,"ptr_st_cntrct_qt->c_expry_dt:%s:",ptr_st_cntrct_qt->c_expry_dt);
				}
				i_returncode = fn_vrfy_prc_band_mkt( c_ServiceName,
																						 ptr_st_cntrct_qt->c_xchng_cd,
																						 ptr_st_cntrct_qt->c_prd_typ,
																						 ptr_st_cntrct_qt->c_undrlyng,
																						 ptr_st_xchngbook->l_ord_lmt_rt,
																						 ptr_st_cntrct_qt->c_expry_dt,
																						 ptr_st_err_msg);
				if ( i_returncode == -1 )
				{
							fn_errlog( c_ServiceName, "B28006",DEFMSG,ptr_st_err_msg->c_err_msg);
							return FAILURE;
				}
		}
		/********* Ver 5.0 Ends ******************/
		else 
		{
						i_returncode = fn_vrfy_prc_band( c_ServiceName,
																						 ptr_st_cntrct_qt->c_xchng_cd,
																						 ptr_st_cntrct_qt->c_prd_typ,
																						 ptr_st_cntrct_qt->c_undrlyng,
																						 ptr_st_xchngbook->l_ord_lmt_rt,
																						 ptr_st_cntrct_qt->l_base_prc,
																						 ptr_st_err_msg);
						if ( i_returncode == -1 )
						{
							fn_errlog( c_ServiceName, "B28006",DEFMSG,ptr_st_err_msg->c_err_msg);
							return FAILURE;
						}	

		}
    }               /*** Ver 10.8 Bracket Closed ***/

	}
	else if ( ptr_st_xchngbook->c_slm_flg == MARKET )
	{
		/** Market orders can be placed only when the Exchange is open **/
		if ( c_exg_crrnt_stts != EXCHANGE_OPEN )
		{
 			/** commented in Ver 2.8 
      fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE; 
      comment ends **/

      /** Ver 2.8 Starts **/
      if( c_exg_extnd_stts != EXCHANGE_OPEN )
      {
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }

      else if (c_fum_mrkt_typ == NORMAL_MRKT )      /***  Underlying Level Check  ***/
      {
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
      else if ( c_fcm_mrkt_typ == NORMAL_MRKT )     /***  Contract Level Check  ***/
      {
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
      /** Ver 2.8 Ends **/
		} 

		/** Limit rate should be Zero for Market orders **/
		if ( ptr_st_xchngbook->l_ord_lmt_rt != 0 )
		{
 			fn_errlog( c_ServiceName, "B28521",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE;
		}

		if ( ptr_st_xchngbook->l_quote == 0 )
		{

 			fn_errlog( c_ServiceName, "B28540",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE;
		}
	}
 
  /*** 2.2 Added SLTP prc shouldn't be present for Market or Limit Orders. ***/ 
  if((ptr_st_xchngbook->c_slm_flg == MARKET  || ptr_st_xchngbook->c_slm_flg == LIMIT) && ptr_st_xchngbook->l_stp_lss_tgr !=0)
  {
    fn_errlog( c_ServiceName,"S31775","Cannot enter Stop Loss trigger price for Market and Limit Orders.",ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }
 

	if ( ptr_st_xchngbook->c_ord_typ == IMMEDIATE_OR_CANCEL  )
	{
		/** IOC orders can be placed only when the Exchange is open **/
		if ( c_exg_crrnt_stts != EXCHANGE_OPEN )
		{
 			/** commented in Ver 2.8 
      fn_errlog( c_ServiceName, "B28011",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE;
      comment ends **/

      /** Ver 2.8 Starts **/
      if( c_exg_extnd_stts != EXCHANGE_OPEN )
      {
        fn_errlog( c_ServiceName, "B28011",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }

      else if (c_fum_mrkt_typ == NORMAL_MRKT )      /** Underlying Level Check **/
      {
        fn_userlog( c_ServiceName,"This Underlying Is Disabled For Extended Market Hours");
        fn_errlog( c_ServiceName, "B28011",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
      else if ( c_fcm_mrkt_typ == NORMAL_MRKT )     /** Contract Level Check **/
      {
        fn_userlog( c_ServiceName,"This Contract Is Disabled For Extended Market Hours");
        fn_errlog( c_ServiceName, "B28011",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
      /** Ver 2.8 Ends **/    
		} 
	}

	/** Disclosed Quantity cannot be greater than the order qty **/
	if ( ptr_st_xchngbook->l_dsclsd_qty > ptr_st_xchngbook->l_ord_tot_qty )
	{
 			fn_errlog( c_ServiceName, "B28522",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE;
	}

  if ( ptr_st_xchngbook->l_stp_lss_tgr != 0 )
  {
    if ( ptr_st_xchngbook->c_ordr_flw == BUY )
    {
			/** Stop loss trigger price cannot be greater than limit rate **/
      /** for Buy order                                             **/
      if ( ptr_st_xchngbook->l_stp_lss_tgr > ptr_st_xchngbook->l_ord_lmt_rt )
      {
        fn_errlog( c_ServiceName, "B28524",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }

			/** Stop loss trigger price cannot be less than last traded   **/
      /** price for Buy order                                       **/
      if ( ptr_st_xchngbook->l_stp_lss_tgr < ptr_st_cntrct_qt->l_lst_trdd_prc )
      {
        fn_errlog( c_ServiceName, "B22009",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
    }
    if ( ptr_st_xchngbook->c_ordr_flw == SELL )
    {
			/** Stop loss trigger price cannot be less  than limit rate   **/
			/** for Sell order                                            **/
      if ( ptr_st_xchngbook->l_stp_lss_tgr < ptr_st_xchngbook->l_ord_lmt_rt )
      {
        fn_errlog( c_ServiceName, "B28525",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }

			/** Stop loss trigger price cannot be greater than last traded **/
			/** price for Sell order                                       **/
      if ( ptr_st_xchngbook->l_stp_lss_tgr > ptr_st_cntrct_qt->l_lst_trdd_prc )
      {
        fn_errlog( c_ServiceName, "B22010",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
    }
  }

	/** Disclosed Quantity cannot be less than  Minimum disclosed      **/
  /** percentage ratio of the order qty                              **/
	if( (ptr_st_xchngbook->l_dsclsd_qty != 0 ) &&
      ( ptr_st_xchngbook->l_dsclsd_qty < 
              ( ( d_dsclsd_prcntg / 100 ) * ptr_st_xchngbook->l_ord_tot_qty )))
	{
 			fn_errlog( c_ServiceName, "B28526",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE;
	}
 
	/**********1.6 Starts *********************
	if ( ptr_st_xchngbook->c_ord_typ == GOOD_TILL_DATE ) 
	{
		if ( strcmp( ptr_st_xchngbook->c_valid_dt, "*" ) == 0 )
		{
 			fn_errlog( c_ServiceName, "B28527",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE;
		}
		else
		{
			i_dategreater = 0;

			EXEC SQL
				SELECT	1
				INTO 		:i_dategreater
				FROM		exg_xchng_mstr
				WHERE		exg_xchng_cd = :ptr_st_xchngbook->c_xchng_cd
				AND			exg_nxt_trd_dt < to_date( :ptr_st_xchngbook->c_valid_dt,
																				 'DD-Mon-YYYY' );
			if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND )) 
			{
 				fn_errlog( c_ServiceName, "S31780", SQLMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}	

			if ( i_dategreater != 1 )
			{
 				fn_errlog( c_ServiceName, "B28528", DEFMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}

			i_dategreater = 0;

			EXEC SQL
				SELECT	1
				INTO 		:i_dategreater
				FROM		dual
				WHERE		to_date( :ptr_st_cntrct_qt->c_expry_dt, 'DD-Mon-YYYY' )
				 				< to_date( :ptr_st_xchngbook->c_valid_dt, 'DD-Mon-YYYY' );

			if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND )) 
			{
 				fn_errlog( c_ServiceName, "S31785", SQLMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}	

			if ( i_dategreater == 1 )
			{
 				fn_errlog( c_ServiceName, "B28539", DEFMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}
			

			EXEC SQL
				SELECT	to_char ( min (FCM_EXPRY_DT),'dd-Mon-yyyy')
				INTO		:c_near_expry_dt
				FROM		fcm_fo_cntrct_mstr
				WHERE		fcm_xchng_cd 		= :ptr_st_cntrct_qt->c_xchng_cd 
				AND			fcm_prdct_typ		= :ptr_st_cntrct_qt->c_prd_typ
				AND			fcm_undrlyng		= :ptr_st_cntrct_qt->c_undrlyng
				AND			fcm_cntrct_tag	=
 								(   SELECT  A.fcm_cntrct_tag
  									FROM    fcm_fo_cntrct_mstr A
  									WHERE   A.fcm_xchng_cd    = :ptr_st_cntrct_qt->c_xchng_cd
  									AND     A.fcm_prdct_typ   = :ptr_st_cntrct_qt->c_prd_typ
  									AND     A.fcm_undrlyng    = :ptr_st_cntrct_qt->c_undrlyng
  									AND     A.fcm_expry_dt    = 
																				to_date( :ptr_st_cntrct_qt->c_expry_dt,
                                        'dd-mon-yyyy' )
  									AND     A.fcm_exer_typ    = :ptr_st_cntrct_qt->c_exrc_typ );

			if ( SQLCODE != 0 )
			{
 				fn_errlog( c_ServiceName, "S31790", SQLMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}	

			SETNULL ( c_near_expry_dt );
      i_dategreater = -1;

			EXEC SQL
				SELECT	to_date(:c_near_expry_dt, 'DD-Mon-YYYY' ) -
                to_date( :ptr_st_xchngbook->c_valid_dt, 'DD-Mon-YYYY' ) -
                exg_gtd_valid_days
				INTO 		:i_dategreater
				FROM		exg_xchng_mstr
				WHERE		exg_xchng_cd = :ptr_st_xchngbook->c_xchng_cd
				AND			exg_nxt_trd_dt < to_date( :ptr_st_cntrct_qt->c_expry_dt,
                               'DD-Mon-YYYY' ) - exg_gtd_valid_days ; 

			if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND )) 
			{
 				fn_errlog( c_ServiceName, "S31795", SQLMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}	

			if ( i_dategreater < 0 ) 
			{
 				fn_errlog( c_ServiceName, "B28547", DEFMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}
		}
	}	
	**********1.6 Ends *********************/
	return SUCCESS;
}

int fn_check_ord_fut( char *c_ServiceName,
                  struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf, 
                  struct vw_xchngbook *ptr_st_xchngbook, 
                  struct vw_orderbook *ptr_st_ordbook,
                  struct vw_err_msg *ptr_st_err_msg ) 
{

	char c_mkt_allwd_flg;
	char c_err_msg[256];
	char c_exg_crrnt_stts ;		/*** Ver 4.6 ***/   
	char c_exg_ovrnght_stts;	/*** Ver 4.6 ***/   
	int i_flg = 0;						/*** Ver 4.6 ***/ 

	/** Order quantity should be in Multiples of Contract Lot size.   **/
	if ( ptr_st_xchngbook->l_ord_tot_qty % ptr_st_cntrct_gen_inf->l_min_lot_qty
                                                                != 0 )
	{
 		fn_errlog( c_ServiceName, "B28529", DEFMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

	/** Disclosed quantity should be in Multiples of Contract Lot size **/
	if ( ptr_st_xchngbook->l_dsclsd_qty % ptr_st_cntrct_gen_inf->l_min_lot_qty
                                                                != 0 )
	{
 		fn_errlog( c_ServiceName, "B28530", DEFMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

	/** Limit rate should be in Multiples of Contract Tick size        **/
  if (strncmp(ptr_st_xchngbook->c_xchng_rmrks, "SLTP FuturePlus to Futures" , 26)!=0 ) /*** If condiftion added in Ver 9.0 ***/
  {
	  if ( ptr_st_xchngbook->l_ord_lmt_rt % ptr_st_cntrct_gen_inf->l_tick_sz != 0 )
	  {
 		  fn_errlog( c_ServiceName, "B28531", DEFMSG, ptr_st_err_msg->c_err_msg );
		  return FAILURE;
	  }
  }

	/** Stop loss Trigger Price should be in Multiples of Contract Tick size **/
	if ( ptr_st_xchngbook->l_stp_lss_tgr % ptr_st_cntrct_gen_inf->l_tick_sz != 0 )
	{
 		fn_errlog( c_ServiceName, "B28532", DEFMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

	if ( ptr_st_xchngbook->c_ord_typ == IMMEDIATE_OR_CANCEL  )
	{
		if ( ptr_st_xchngbook->l_stp_lss_tgr != 0 )
		{
 			fn_errlog( c_ServiceName, "B28012", DEFMSG, ptr_st_err_msg->c_err_msg );
			return FAILURE;
		}
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"PIPE ID IS :%s:",ptr_st_xchngbook->c_pipe_id);
	}

	if ( ptr_st_xchngbook->c_slm_flg == MARKET )
	{
    
   /****Ver 10.3 Query Changed to Uppercase***/

		EXEC SQL
			SELECT	OPM_MKT_ALLWD
			INTO		:c_mkt_allwd_flg
			FROM		OPM_ORD_PIPE_MSTR
			WHERE		OPM_PIPE_ID	=	:ptr_st_xchngbook->c_pipe_id;

		if ( SQLCODE != 0 )
		{
 			fn_errlog( c_ServiceName, "S31800", SQLMSG, ptr_st_err_msg->c_err_msg );
			return FAILURE;
		}

		if ( c_mkt_allwd_flg == NO )
		{
      if(ptr_st_xchngbook->c_spl_flg != SYSTEM_SQUAREOFF || ptr_st_xchngbook->c_spl_flg != IMTM_SYS_SQUAREOFF || ptr_st_xchngbook->c_spl_flg != LMTNEG_SYS_SQUAREOFF )     /***  Check for IMTM_SYS_SQUAREOFF  and LMTNEG_SYS_SQUAREOFF added in Ver 7.0 ***/										/*  1.2  */
      {
        fn_errlog( c_ServiceName, "B28001", DEFMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
		}
	}

	/* Ver 3.0 Additional check */

	if( DEBUG_MSG_LVL_5)
	{
		fn_userlog( c_ServiceName,"Exchange code is :%s:", ptr_st_xchngbook->c_xchng_cd );
		fn_userlog( c_ServiceName,"Product type is :%c:", ptr_st_ordbook->c_prd_typ );
		fn_userlog( c_ServiceName,"Underlying is :%s:", ptr_st_ordbook->c_undrlyng );
	}
 
 /****Ver 10.3 Query Changed to Uppercase***/
 
	EXEC SQL
			 SELECT FUM_FREEZE_QTY
			 INTO   :sql_fum_freeze_qty
		   FROM   FUM_FO_UNDRLYNG_MSTR
			 WHERE  FUM_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd
	/*	 AND    fum_prdct_typ = decode(:ptr_st_ordbook->c_prd_typ,'P','F',:ptr_st_ordbook->c_prd_typ) commented in ver 4.7 */
			 AND    FUM_PRDCT_TYP =DECODE(:ptr_st_ordbook->c_prd_typ,'P','F','U','F',:ptr_st_ordbook->c_prd_typ) /* Ver 4.7 */ 
			 AND    FUM_UNDRLYNG = :ptr_st_ordbook->c_undrlyng;

	if ( SQLCODE != 0 )
  {
     fn_errlog( c_ServiceName, "S31805", SQLMSG, ptr_st_err_msg->c_err_msg );
     return FAILURE;
  }

  if(ptr_st_xchngbook->c_spl_flg != SYSTEM_SQUAREOFF) /*** if condition added in Ver 12.4 ***/
  {
	if( ptr_st_xchngbook->l_ord_tot_qty > sql_fum_freeze_qty && sql_fum_freeze_qty != 0 )
	{
		fn_errlog( c_ServiceName, "B66071", DEFMSG, ptr_st_err_msg->c_err_msg );
		/* sprintf(ptr_st_err_msg->c_err_msg,"%s:%ld",ptr_st_err_msg->c_err_msg,(sql_fum_freeze_qty-ptr_st_cntrct_gen_inf->l_min_lot_qty)); */
		sprintf(ptr_st_err_msg->c_err_msg,"%s:%ld",ptr_st_err_msg->c_err_msg,sql_fum_freeze_qty); 
    return FAILURE;
	} 
 }
	/* Ver 3.0 Ends */
	
		/*** Ver 4.6 Starts ***/
  
  /****Ver 10.3 Query Changed to Uppercase***/

  EXEC SQL
    SELECT EXG_CRRNT_STTS,
           EXG_TMP_MKT_STTS
    INTO   :c_exg_crrnt_stts,
           :c_exg_ovrnght_stts
    FROM   EXG_XCHNG_MSTR
    WHERE  EXG_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31810",SQLMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }


  if( DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName," c_exg_ovrnght_stts  is :%c:", c_exg_ovrnght_stts);
    fn_userlog( c_ServiceName," c_exg_crrnt_stts is :%c:", c_exg_crrnt_stts);
    fn_userlog( c_ServiceName,"ptr_st_ordbook->c_expry_dt is :%s:", ptr_st_ordbook->c_expry_dt );
  }


  if( c_exg_ovrnght_stts == EXCHANGE_OPEN && c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY)
  {
		if( DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName," ---Inside Comparison of Overnight COndition ---");
		}

    i_flg = 0 ;
  
   /****Ver 10.3 Query Changed to Uppercase***/

    EXEC SQL
    SELECT 1
    INTO   :i_flg
    FROM   DUAL
    WHERE  TO_DATE(SYSDATE , 'DD-Mon-YYYY') >= TO_DATE(:ptr_st_ordbook->c_expry_dt, 'DD-Mon-YYYY') ;

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog( c_ServiceName, "S31815",SQLMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }

		if( DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName," i_flg is :%d:", i_flg);
		}


    if (  i_flg == 1 )
    {
        fn_userlog( c_ServiceName," Cannot place an  order expired contract ");
        fn_errlog( c_ServiceName, "B56024",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
    }

  }
	/*** Ver 4.6 Ends ***/	
			 
	return SUCCESS;
}

int fn_ins_ordrbook ( char  *c_ServiceName,										/***	Ver	3.4	***/
                      char  *c_user_id,
                      char  c_span_flag,                      /** Ver 7.9 **/
											char  c_source_flg,											/** Ver 9.4 **/
											char c_prcimpv_ordrbk_flg,	      /*** Ver 9.8 ***/	
		      						long l_trail_ordrbk_amt,		      /*** Ver 9.8 ***/	
		      						long l_ordrbk_lmt_offset,		      /*** Ver 9.8 ***/
											char *c_pan_no,									/*** Added In Ver 10.5 ***/
                      char c_settlement_flg,           /*** added in ver 11.0 ***/
											char *c_ven_id,									 /*** Ver 11.5 ***/
                      char *c_algo_id,               /*** Ver 12.6 **/
                      char *c_algo_ord_rmrks,        /*** Ver 12.6 **/ 
                      long l_sqroff_tm, /* Ver 12.9 */
                      char c_fc_flg,    /* Ver 12.9 */
                      struct vw_orderbook *ptr_st_ordbook,
                      struct vw_err_msg *ptr_st_err_msg,
                      char c_1clk_flg,              /** Ver 12.3 **/
                      char *c_1clk_prtflio_id       /** Ver 12.3  **/
                    )
{
	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName,"User ID Inside Function Insert Order book IS :%s:",c_user_id);
	}

  /* char c_span_flag  = 'N'; *** Ver 5.1 *** Commented in Ver 7.9 **/
 		 char c_ucc_cd[13]; /*** Ver 13.9 ***/ 
	/***	Ver	3.8	Starts	***/

	if( ptr_st_ordbook->c_channel[0] == ' ' || ptr_st_ordbook->c_channel[0]  == '\0' )
	{
		if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
		{
			fn_userlog(c_ServiceName,"CHANNEL NOT PRESENT.");
			fn_userlog(c_ServiceName,"Channel Is :%s:",ptr_st_ordbook->c_channel);  
		}
		ptr_st_ordbook->c_channel[0] = '$';

		if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
		{
			fn_userlog(c_ServiceName,"Channel Is :%s:",ptr_st_ordbook->c_channel);  
		}

	}

	/***	Ver	3.8	Ends	***/ 
  /*************** Commented in Ver 7.9 ************
	*** Ver 5.1 starts ***
	if ( strcmp(ptr_st_ordbook->c_xchng_cd,"NFO") == 0 )
	{
		EXEC  SQL                                               
     SELECT  nvl(CLM_SPAN_ALLWD,'N')
     INTO    :c_span_flag
     FROM    CLM_CLNT_MSTR
     WHERE   CLM_MTCH_ACCNT =:ptr_st_ordbook->c_cln_mtch_accnt;
	}
	if ( strcmp(ptr_st_ordbook->c_xchng_cd,"BFO") == 0 )
	{
		EXEC  SQL                                               
     SELECT  nvl(CLM_BSESPAN_ALLWD,'N')
     INTO    :c_span_flag
     FROM    CLM_CLNT_MSTR
     WHERE   CLM_MTCH_ACCNT =:ptr_st_ordbook->c_cln_mtch_accnt;
	}

	if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND )
	{
		fn_errlog( c_ServiceName, "S31820", SQLMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}
  *********************  Ver 7.9 comment ends ********/  
 
	/*** Ver 13.9 starts ***/
		MEMSET(c_ucc_cd);

		EXEC SQL
		 SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT ) 
		 INTO  :c_ucc_cd 
		 FROM  CLM_CLNT_MSTR
		 WHERE CLM_MTCH_ACCNT =:ptr_st_ordbook->c_cln_mtch_accnt;	
	
	 if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND )
 	{
   	fn_userlog(c_ServiceName," Error while fetching UCC code for :%s:",	ptr_st_ordbook->c_cln_mtch_accnt); 
		fn_errlog( c_ServiceName, "S31825", SQLMSG, ptr_st_err_msg->c_err_msg );
   	return FAILURE;
  }
	
	rtrim(c_ucc_cd);
	if(DEBUG_MSG_LVL_3)
    fn_userlog(c_ServiceName," MAtch ID :%s: have ucc code :%s:", ptr_st_ordbook->c_cln_mtch_accnt, c_ucc_cd);
	
	/*** Ver 13.9 ends ***/
 
	if (c_span_flag == 'Y')
	{
		c_span_flag = 'S';
	}
	if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
	{
		fn_userlog(c_ServiceName," SPAN FLAG IS :%c:",c_span_flag);            
	}
	/*** Ver 5.1 Ends ***/

  EXEC SQL
    INSERT INTO FOD_FO_ORDR_DTLS
    (
      FOD_CLM_MTCH_ACCNT,
      FOD_CLNT_CTGRY,
      FOD_ORDR_RFRNC,
      FOD_PIPE_ID,
      FOD_XCHNG_CD,
      FOD_PRDCT_TYP,
      FOD_UNDRLYNG,
      FOD_EXPRY_DT,
      FOD_EXER_TYP,
      FOD_OPT_TYP,
      FOD_STRK_PRC,
      FOD_ORDR_FLW,
      FOD_LMT_MRKT_SL_FLG,
      FOD_DSCLSD_QTY,
      FOD_ORDR_TOT_QTY,
      FOD_LMT_RT,
      FOD_STP_LSS_TGR,
      FOD_ORDR_TYPE,
      FOD_ORDR_VALID_DT,
      FOD_TRD_DT,
      FOD_ORDR_STTS,
      FOD_SPRD_ORDR_REF,
      FOD_MDFCTN_CNTR,
      FOD_SETTLOR,
      FOD_SPL_FLAG,
      FOD_INDSTK,
			FOD_PRO_CLI_IND,
      FOD_CHANNEL,
      FOD_BP_ID,
      FOD_CTCL_ID,
      FOD_USR_ID,
      FOD_MRKT_TYP,
      FOD_CSE_ID,
			FOD_SPN_FLG,		/*** Ver 5.1 ***/
			FOD_SOURCE_FLG,		/*** Ver 9.4 ***/
      FOD_SLTP_ORDR_RFRNC,   /** Ver 6.4 **/ 
			FOD_PRCIMPV_FLG,		/*** Ver 9.8 ***/
			FOD_TRAIL_AMT,		/*** Ver 9.8 ***/
			FOD_LMT_OFFSET,		/*** Ver 9.8 ***/ 
      FOD_EOS_FLG,   /** Ver 9.7 **/
			FOD_PAN_NO,			/*** Added In Ver 10.5 ***/
			FOD_SETLMNT_FLG, /*** Added In Ver 11.0 ***/
			FOD_ESP_ID,			/*** Ver 11.5 ***/
      FOD_1CLICK_FLG, /** Ver 12.3 **/
      FOD_1CLICK_PRTFL_ID, /** Ver 12.3 **/
      FOD_ALGO_ID,           /** Ver 12.6 **/
      FOD_APIREMARKS,         /** Ver 12.6 **/
      FOD_FC_FLAG,  /*** Ver 12.9 ***/
      FOD_SQROFF_TM, /*** Ver 12.9 ***/
			FOD_UCC_CD  /***Ver 13.9 ***/
    )
    VALUES
    (
      :ptr_st_ordbook->c_cln_mtch_accnt,
      :ptr_st_ordbook->l_clnt_ctgry,
      :ptr_st_ordbook->c_ordr_rfrnc,
      :ptr_st_ordbook->c_pipe_id,
      :ptr_st_ordbook->c_xchng_cd,
      :ptr_st_ordbook->c_prd_typ,
      :ptr_st_ordbook->c_undrlyng,
      to_date( :ptr_st_ordbook->c_expry_dt, 'dd-mon-yyyy' ),
      :ptr_st_ordbook->c_exrc_typ,
      :ptr_st_ordbook->c_opt_typ,
      :ptr_st_ordbook->l_strike_prc,
      :ptr_st_ordbook->c_ordr_flw,
      :ptr_st_ordbook->c_slm_flg,
      :ptr_st_ordbook->l_dsclsd_qty,
      :ptr_st_ordbook->l_ord_tot_qty,
      :ptr_st_ordbook->l_ord_lmt_rt,
      :ptr_st_ordbook->l_stp_lss_tgr,
      :ptr_st_ordbook->c_ord_typ,
      to_date( :ptr_st_ordbook->c_valid_dt,'dd-mon-yyyy' ),
      to_date( :ptr_st_ordbook->c_trd_dt,'dd-mon-yyyy' ),
      :ptr_st_ordbook->c_ordr_stts,
      :ptr_st_ordbook->c_sprd_ord_rfrnc,
      :ptr_st_ordbook->l_mdfctn_cntr,
      :ptr_st_ordbook->c_settlor,
      :ptr_st_ordbook->c_spl_flg,
      :ptr_st_ordbook->c_ctgry_indstk,
      :ptr_st_ordbook->c_pro_cli_ind,
      :ptr_st_ordbook->c_channel,
      :ptr_st_ordbook->c_bp_id,
      :ptr_st_ordbook->c_ctcl_id,
      :c_user_id,
      :ptr_st_ordbook->c_mrkt_typ,
      :ptr_st_ordbook->l_cse_id,
			:c_span_flag,		/*** Ver 5.1 ***/
			:c_source_flg,   /*** Ver 9.4 ***/
      DECODE(:ptr_st_ordbook->c_ord_typ,'V',:ptr_st_ordbook->c_ordr_rfrnc,NULL), /** Ver 6.4 **/
      :c_prcimpv_ordrbk_flg,			/**** Ver 9.8 ****/
			:l_trail_ordrbk_amt,				/**** Ver 9.8 ****/
			:l_ordrbk_lmt_offset,				/**** Ver 9.8 ****/
			:ptr_st_ordbook->c_req_typ,   /** Ver 9.7 **/
			:c_pan_no,									/*** Added In Ver 10.5 ***/
			:c_settlement_flg,           /*** Ver 11.0 ***/
			:c_ven_id,										 /*** Ver 11.5 ***/
      :c_1clk_flg,                  /** Ver 12.3  **/
      :c_1clk_prtflio_id,            /** Ver 12.3 **/
      :c_algo_id,          /** Ver 12.6 **/
      :c_algo_ord_rmrks,    /** Ver 12.6 **/
      :c_fc_flg,   /* Ver 12.9 */
      :l_sqroff_tm,  /* Ver 12.9 */
			:c_ucc_cd  /***Ver 13.9 ***/
    );

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31830", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

    return 0;
}

/*** Ver 4.7 Starts *****/
int fn_eos_sltpfp ( char  *c_ServiceName,
                    char  *c_cover_ord_ref,
                    struct vw_orderbook *ptr_st_ordbook,
                    struct vw_err_msg *ptr_st_err_msg
                   )
{
    char c_fresh_ord_ref[19];
     
    char c_cvr_flg ='C'; /*****Ver 10.3 ******/

    int   i_returncode;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"c_cover_ord_ref :%s:",c_cover_ord_ref);
		}

		EXEC SQL
    SELECT
          FOD_SLTP_ORDR_RFRNC
    INTO  :c_fresh_ord_ref
    FROM  FOD_FO_ORDR_DTLS
    WHERE FOD_ORDR_RFRNC = :c_cover_ord_ref;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31835", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

		if(DEBUG_MSG_LVL_3)
		{	
			fn_userlog(c_ServiceName,"c_fresh_ord_ref :%s:",c_fresh_ord_ref);
		}

		EXEC SQL
       UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_SLTP_ORDR_RFRNC = :ptr_st_ordbook->c_ordr_rfrnc
       WHERE      FOD_ORDR_RFRNC = :c_fresh_ord_ref;

      if(SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S31840", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
 
     /****Ver 10.3 Query Changed to Uppercase***/
    
      EXEC SQL
       UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_SLTP_ORDR_RFRNC = :c_fresh_ord_ref,
               /****  FOD_FC_FLAG = 'C'  *****commented in ver 10.3***/
                  FOD_FC_FLAG = :c_cvr_flg /*****Ver 10.3 Hard Parsing*****/
       WHERE      FOD_ORDR_RFRNC = :ptr_st_ordbook->c_ordr_rfrnc;

      if(SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S31845", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
}

void fn_avg_price(long *l_arr_qty,long *l_arr_price, double *d_avg_price,int sql_ord_ordr_qty)
{
  int     i_loop;
  long    l_total_qty;
  double  d_total_value;

  l_total_qty = 0;
  d_total_value = 0;

  for(i_loop = 0; i_loop < 5; i_loop++)
  {
    if(sql_ord_ordr_qty == l_total_qty)
      break;
    else if((sql_ord_ordr_qty - l_total_qty) >= l_arr_qty[i_loop])
    {
      d_total_value = d_total_value + (l_arr_qty[i_loop] * l_arr_price[i_loop]);
      l_total_qty += l_arr_qty[i_loop];
    }
    else if((sql_ord_ordr_qty - l_total_qty) < l_arr_qty[i_loop])
    {
      d_total_value = d_total_value + ((sql_ord_ordr_qty - l_total_qty) * l_arr_price[i_loop]);
      l_total_qty += sql_ord_ordr_qty - l_total_qty;
    }
  }
   *d_avg_price = d_total_value/l_total_qty;

  fn_round2(d_avg_price);
}

/***********Function for rounding off to 2 decimal places*************/
void fn_round2(double *d_vl)
{
  char c_temp[30];
  long l_temp;

  *d_vl = (*d_vl + 0.005) * 100;

  sprintf(c_temp, "%lf", *d_vl);
  sscanf(c_temp, "%ld", &l_temp);

  *d_vl = ((double)l_temp)/100;
}

int fn_cover_sltpfp ( char  *c_ServiceName,
											char  *c_cover_ord_ref,
											struct vw_orderbook *ptr_st_ordbook,
											struct vw_pstn_actn *ptr_st_pstn_actn,
											struct vw_err_msg *ptr_st_err_msg
                   )
{
    double d_fmm_sltp_prcnt = 0.0;
    double d_amt_to_be_blckd = 0.0;
    double d_lss_amt_to_be_blckd = 0.0;
    double d_amt_blkd = 0.0;
    double d_lss_amt_blkd = 0.0;
    double d_diff_amt_blkd = 0.0;
    double d_diff_lss_amt_blkd = 0.0;
    double d_frsh_exe_val = 0.0;
    double d_balance_amt = 0.0;
    double d_wgt_avrg_price = 0.0;
    double d_diff_amt= 0.0;
    double d_diff_loss= 0.0;
    double d_frsh_lmt_rt= 0.0;          /** Ver 8.5 **/

    long  li_tot_exec_qty = 0;
    long  l_open_qty = 0;
    long  l_frsh_xtd_qty = 0;

    char c_ord_flw = '\0';
    char c_narration_id[4];
    char c_fresh_ord_ref[19];
    char c_cvr_flg ='C';   /*****Ver 10.3 ******/

	  char c_ref_rmrks[100] = "\0";			 /*** Ver 11.6 ***/
	  char	c_tmp_rmrks [ 100 ] = "\0";	 /*** Ver 11.6 ***/
		double d_comp1_mrgn = 0.0;  /*** Ver 11.6 ***/
    double d_comp1_pl = 0.0;    /*** Ver 11.6 ***/
    double d_xchng_amt = 0.0;   /*** Ver 11.6 ***/
		
    int   i_returncode;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"c_cover_ord_ref :%s:",c_cover_ord_ref);
		}

		EXEC SQL
    SELECT
          FOD_SLTP_ORDR_RFRNC
    INTO  :c_fresh_ord_ref
    FROM  FOD_FO_ORDR_DTLS
    WHERE FOD_ORDR_RFRNC = :c_cover_ord_ref;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31850", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"c_fresh_ord_ref :%s:",c_fresh_ord_ref);
		}

    EXEC SQL
    SELECT
          NVL(FOD_AMT_BLCKD,0),
          NVL(FOD_LSS_AMT_BLCKD,0),
          FOD_ORDR_FLW,
          FOD_LMT_RT                                      /** Ver 8.5 **/
    INTO  :d_amt_blkd,
          :d_lss_amt_blkd,
          :c_ord_flw,
          :d_frsh_lmt_rt                                  /** Ver 8.5 **/
    FROM  FOD_FO_ORDR_DTLS
    WHERE FOD_ORDR_RFRNC = :c_fresh_ord_ref;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31855", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }
		/*** Commented in Ver 8.5
		*Get the current margin percentage from the database *
    EXEC SQL
     SELECT     FMM_SLTP_PRCNT
     INTO       :d_fmm_sltp_prcnt
     FROM       FMM_FO_MRGN_MSTR
     WHERE      FMM_XCHNG_CD = :ptr_st_ordbook->c_xchng_cd
     AND        FMM_PRDCT_TYP ='F'
     AND        FMM_UNDRLYNG = :ptr_st_ordbook->c_undrlyng
     AND        FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
                                     FROM    FCB_FO_CLN_BSKT_ALLTD
                                     WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                                           FROM    CLM_CLNT_MSTR
                                                           WHERE   CLM_MTCH_ACCNT =:ptr_st_ordbook->c_cln_mtch_accnt));

    if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_userlog(c_ServiceName,"******Invalid Stock Code*******");
      fn_errlog( c_ServiceName, "S31860", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }
    else if(SQLCODE != 0)
    {
      fn_errlog( c_ServiceName, "S31865", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"SLTP Percentage   :%lf:", d_fmm_sltp_prcnt);
    }
		
		** Getting the total executed value and quantity of FRESH order. **
     EXEC SQL
      SELECT  NVL(SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),0),
              NVL(SUM(FTD_EXCTD_QTY),0)
      INTO    :d_frsh_exe_val,
              :li_tot_exec_qty
      FROM    FTD_FO_TRD_DTLS
      WHERE   FTD_ORDR_RFRNC = :c_fresh_ord_ref;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31870", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

    * Checking if Fresh order value & quantity is equals to zero. *
    if (d_frsh_exe_val == 0 || li_tot_exec_qty == 0)
    {
      fn_errlog( c_ServiceName, "S31875", LIBMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

    ** Calculating the Weight Average Price for the executed quantity of FRESH Order. **
		d_wgt_avrg_price = 0;

		if (li_tot_exec_qty != 0 )
		{
			d_wgt_avrg_price = (double) (d_frsh_exe_val / li_tot_exec_qty);
		}

		* Calculate open quantity *
    EXEC SQL
      SELECT  NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FTD_EXCTD_QTY,
                                                       FTD_EXCTD_QTY ) ), 0 ),
              NVL( SUM( DECODE( FOD_FC_FLAG, 'F', FTD_EXCTD_QTY, 0 ) ), 0 )
      INTO    :l_open_qty,
              :l_frsh_xtd_qty
      FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
      WHERE   FOD_CLM_MTCH_ACCNT    = :ptr_st_ordbook->c_cln_mtch_accnt
      AND     FOD_TRD_DT            = :ptr_st_ordbook->c_trd_dt
      AND     FOD_PRDCT_TYP         = :ptr_st_ordbook->c_prd_typ
      AND     FTD_ORDR_RFRNC        = FOD_ORDR_RFRNC
      AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_fresh_ord_ref;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31880", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

    if(l_open_qty <0 )
    {
      l_open_qty=0;
    }

		* Calculate Margin amount to be blocked *
    d_amt_to_be_blckd = ((double)(l_open_qty * d_wgt_avrg_price) * d_fmm_sltp_prcnt / 100.0);

    * Calculate Loss amount to be blocked *
    if ( c_ord_flw == BUY )
    {
			d_lss_amt_to_be_blckd = (double) (l_open_qty * (ptr_st_ordbook->l_ord_lmt_rt - d_wgt_avrg_price) );
    }
    else if ( c_ord_flw == SELL )
    {
    	d_lss_amt_to_be_blckd = (double) (l_open_qty * (d_wgt_avrg_price - ptr_st_ordbook->l_ord_lmt_rt) );  
    }
       Comment end in Ver 8.5 ***/
    /**  Ver 8.5 starts from here **/
    /** Call function for margin calcluation **/

    if ( DEBUG_MSG_LVL_3 ) /**** Added in Ver 9.6 ****/
    {
    	 fn_userlog(c_ServiceName,"Calling function fn_cal_mrgn_sltp1111111111111111111111111111111111111111");
		}
		 i_returncode =  fn_cal_mrgn_sltp(c_ServiceName,
                                    c_fresh_ord_ref,
                                    d_frsh_lmt_rt,
                                    ptr_st_ordbook->l_ord_lmt_rt,
                                    &d_amt_to_be_blckd,
                                    &d_lss_amt_to_be_blckd,
																		c_ref_rmrks,  /*** Ver 11.6 ***/
                                    &d_comp1_mrgn,/*** Ver 11.6 ***/
                                    &d_comp1_pl,  /*** Ver 11.6 ***/
                                    &d_xchng_amt, /*** Ver 11.6 ***/
                                    c_err_msg);
    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31885", LIBMSG, c_err_msg );
      return FAILURE;
    }

    d_lss_amt_to_be_blckd = d_lss_amt_to_be_blckd * (-1);

    /** Ver 8.5 Ends Here **/

    /* Difference margin & loss */
    d_diff_amt  = d_amt_blkd - d_amt_to_be_blckd;
    d_diff_loss = d_lss_amt_blkd + d_lss_amt_to_be_blckd;


    if(DEBUG_MSG_LVL_3)
    {
			fn_userlog(c_ServiceName,"ptr_st_ordbook->l_ord_lmt_rt :%ld:",ptr_st_ordbook->l_ord_lmt_rt);
			fn_userlog(c_ServiceName,"l_open_qty = :%ld",l_open_qty);	
			fn_userlog(c_ServiceName,"d_wgt_avrg_price = :%lf:",d_wgt_avrg_price);
      fn_userlog(c_ServiceName,"d_amt_blkd = :%lf:", d_amt_blkd);
      fn_userlog(c_ServiceName,"d_amt_to_be_blckd = :%lf:", d_amt_to_be_blckd);
      fn_userlog(c_ServiceName,"d_lss_amt_blkd = :%lf:", d_lss_amt_blkd);
      fn_userlog(c_ServiceName,"d_lss_amt_to_be_blckd = :%lf:", d_lss_amt_to_be_blckd);
			fn_userlog(c_ServiceName,"d_diff_amt = :%lf:",d_diff_amt);
			fn_userlog(c_ServiceName,"d_diff_loss = :%lf:",d_diff_loss);
    }

		/* Block the margin amount */
    strcpy( c_narration_id , ON_ORDER_PLACEMENT);
    if(d_diff_amt != 0)
    {
        d_balance_amt  = 0.0;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Block the margin amount");
        }
        i_returncode = fn_upd_limits( c_ServiceName,
                          ptr_st_pstn_actn,
                          ptr_st_err_msg,
                          c_narration_id,
                          DEBIT_TILL_LIMIT,
                          d_diff_amt,
                          &d_balance_amt);


        if ( i_returncode != 0 )
        {
          fn_errlog( c_ServiceName, "S31890", LIBMSG, ptr_st_err_msg->c_err_msg );
          return FAILURE;
        }

        d_amt_to_be_blckd = d_amt_to_be_blckd + d_balance_amt ;
      }

			/*** Ver 11.6 started ***/
			 MEMSET(c_tmp_rmrks);    
			 strcpy ( c_tmp_rmrks, ptr_st_pstn_actn->c_ref_rmrks ); 
			 sprintf(ptr_st_pstn_actn->c_ref_rmrks,"%s%s",c_ref_rmrks,c_tmp_rmrks);  
			/*** Ver 11.6 ends ***/

		/* Block the loss amount */
      strcpy( c_narration_id , ON_ORDER_PLACEMENT);
      
		if( d_lss_amt_to_be_blckd <= 0 )
    {
			if(d_diff_loss != 0)
      {
        d_balance_amt  = 0.0;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Block the loss amount");
        }
        i_returncode = fn_upd_limits( c_ServiceName,
                          ptr_st_pstn_actn,
                          ptr_st_err_msg,
                          c_narration_id,
                          DEBIT_TILL_LIMIT,
                          d_diff_loss,
                          &d_balance_amt);


        if ( i_returncode != 0 )
        {
          fn_errlog( c_ServiceName, "S31895", LIBMSG, ptr_st_err_msg->c_err_msg );
          return FAILURE;
        }
         d_lss_amt_to_be_blckd = d_lss_amt_to_be_blckd - d_balance_amt ;
      }
		}
		else if(d_lss_amt_to_be_blckd > 0)
    {
      if(d_lss_amt_blkd != 0)
      {
        d_balance_amt  = 0.0;

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Release old loss amount in case or profit");
        }
        i_returncode = fn_upd_limits( c_ServiceName,
                          ptr_st_pstn_actn,
                          ptr_st_err_msg,
                          c_narration_id,
                          DEBIT_TILL_LIMIT,
                          d_lss_amt_blkd,
                          &d_balance_amt);


        if ( i_returncode != 0 )
        {
          fn_errlog( c_ServiceName, "S31900", LIBMSG, ptr_st_err_msg->c_err_msg );
          return FAILURE;
        }
      }
       d_lss_amt_to_be_blckd = 0;
    }

		strcpy ( ptr_st_pstn_actn->c_ref_rmrks, c_tmp_rmrks);    /**** Ver 11.6 ***/
    MEMSET(c_tmp_rmrks);																		 /**** Ver 11.6 ***/

	  	if( DEBUG_MSG_LVL_3) /**** Added in Ver 9.6 ****/
		{
			fn_userlog(c_ServiceName,"d_amt_blkd :%lf:",d_amt_blkd);
			fn_userlog(c_ServiceName,"d_diff_amt :%lf:",d_diff_amt);
			fn_userlog(c_ServiceName,"d_lss_amt_to_be_blckd :%lf:",d_lss_amt_to_be_blckd);
			fn_userlog(c_ServiceName,"d_diff_loss :%lf:",d_diff_loss);	
		}

   /****Ver 10.3 Query Changed to Uppercase***/
 
		EXEC SQL
       UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_SLTP_ORDR_RFRNC = :ptr_st_ordbook->c_ordr_rfrnc,
                  FOD_AMT_BLCKD = :d_amt_to_be_blckd,
                  FOD_LSS_AMT_BLCKD = ABS(:d_lss_amt_to_be_blckd),
									FOD_SLTP_MRGN = :d_comp1_mrgn,			/*** Ver 11.6 ***/
                  FOD_SLTP_PL   = :d_comp1_pl,				/*** Ver 11.6 ***/ 
                  FOD_SLTP_SEBI_MRGN = :d_xchng_amt   /*** Ver 11.6 ***/
       WHERE      FOD_ORDR_RFRNC = :c_fresh_ord_ref;

      if(SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S31905", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
  
   /****Ver 10.3 Query Changed to Uppercase***/

      EXEC SQL
        UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_SLTP_ORDR_RFRNC = :c_fresh_ord_ref,
      /****FOD_FC_FLAG = 'C' *****commented in ver 10.3***/
                  FOD_FC_FLAG = :c_cvr_flg  /*****Ver 10.3 Hard Parsing*****/
       WHERE      FOD_ORDR_RFRNC = :ptr_st_ordbook->c_ordr_rfrnc;

      if(SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S31910", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
}
/*** Ver 4.7 Ends *****/

/*** Ver 6.1 starts here ***/
int fn_off_sltpfp ( char  *c_ServiceName,
                    char  *c_fresh_ord_ref,
                    struct vw_orderbook *ptr_st_ordbook,
                    struct vw_err_msg *ptr_st_err_msg
                   )
{
    char c_cvr_flg ='C'; /*****Ver 10.3*****/

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"c_fresh_ord_ref :%s:",c_fresh_ord_ref);
		}

		EXEC SQL
       UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_SLTP_ORDR_RFRNC = :ptr_st_ordbook->c_ordr_rfrnc
       WHERE      FOD_ORDR_RFRNC = :c_fresh_ord_ref;

      if(SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S31915", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }

 
   /****Ver 10.3 Query Changed to Uppercase***/

      EXEC SQL
       UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_SLTP_ORDR_RFRNC = :c_fresh_ord_ref,
								/*** FOD_FC_FLAG = 'C' *****commented in ver 10.3***/
                  FOD_FC_FLAG =:c_cvr_flg /*****Ver 10.3 Hard Parsing*****/
       WHERE      FOD_ORDR_RFRNC = :ptr_st_ordbook->c_ordr_rfrnc;

      if(SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S31920", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
}
/*** Ver 6.1 ends here ***/

/*** Ver 7.7 starts *****/
int fn_excpt_eos_fppls ( char  *c_ServiceName,
																char  *c_cover_ord_ref,
																struct vw_orderbook *ptr_st_ordbook,
																struct vw_err_msg *ptr_st_err_msg
														 )
{
    char c_fresh_ord_ref[19];
    char c_exptn_flag ='E';   /*******Ver 10.3********/

    int   i_returncode;

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"c_cover_ord_ref :%s:",c_cover_ord_ref);
    }

    EXEC SQL
    SELECT
          FOD_SLTP_ORDR_RFRNC
    INTO  :c_fresh_ord_ref
    FROM  FOD_FO_ORDR_DTLS
    WHERE FOD_ORDR_RFRNC = :c_cover_ord_ref;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31925", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"c_fresh_ord_ref :%s:",c_fresh_ord_ref);
    }

    EXEC SQL
       UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_SLTP_ORDR_RFRNC = :ptr_st_ordbook->c_ordr_rfrnc
       WHERE      FOD_ORDR_RFRNC = :c_fresh_ord_ref;

      if(SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S31930", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
    
   /****Ver 10.3 Query Changed to Uppercase***/
 
      EXEC SQL
       UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_SLTP_ORDR_RFRNC = :c_fresh_ord_ref,
              /****  FOD_FC_FLAG = 'E' *****commented in ver 10.3***/
                  FOD_FC_FLAG =:c_exptn_flag/*****Ver 10.3 Hard Parsing *****/
       WHERE      FOD_ORDR_RFRNC = :ptr_st_ordbook->c_ordr_rfrnc;

      if(SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S31935", SQLMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
}
/*** Ver 7.7 Ends *****/

/*** Ver 11.1 Starts ***/
int fn_get_quote_zero ( char *c_ServiceName, char c_ord_flw, long l_best_bid_price, long l_best_offer_price, long l_previous_close_price, long *l_quote_zero)
{
	if(DEBUG_MSG_LVL_5)
  {
		fn_userlog(c_ServiceName,"Inside function fn_get_quote_zero");
		fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_best_bid_price is :%ld:",l_best_bid_price);
		fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_best_offer_price is :%ld:",l_best_offer_price);
		fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_previous_close_price is :%ld:",l_previous_close_price);
	}
	if(c_ord_flw == 'B')
	{
		if(l_best_offer_price == 0)
		{
			*l_quote_zero = l_previous_close_price;
		}
		else
		{
			*l_quote_zero = l_best_offer_price;
		}
	}
	else if (c_ord_flw == 'S')
  {
    if(l_best_bid_price == 0)
    {
      *l_quote_zero = l_previous_close_price;
    }
    else
    {
      *l_quote_zero = l_best_bid_price;
    }
  }
	else
	{
		return -1;
	}
	if(DEBUG_MSG_LVL_5)
  {
		fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_quote_zero is :%ld:",*l_quote_zero);
	}
	return 1;
}
/*** Ver 11.1 Ends ***/
