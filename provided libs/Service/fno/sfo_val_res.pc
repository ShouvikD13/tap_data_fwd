/******************************************************************************/
/*	Program	    			:	SFO_VAL_RES		                                        */
/*                                                                            */
/*  Input             : FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACCT_NO                                  */
/*                                                                            */
/*  Output            : FFO_EBA_MTCH_ACCT_NO                                  */
/*                      FFO_DPID                                              */
/*                      FFO_CLNT_DPID                                         */
/*                      FFO_BNK_ACT_NO                                        */
/*                      FFO_CLNT_CTGRY                                        */
/*                      FFO_TRD_PSWD_LMT                                      */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_DESC                                        */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_STATUS_FLG   Char FNO Buy/Sell  Allowed  ver 1.3  */
/*                      FFO_PIPE_ID   	 String Pipe id 1.4  									*/
/*                                                                            */
/*  Description       : To fetch the user details for a given                 */
/*                      user id                                               */
/*                                                                            */
/*  Log               : 1.0   10-JUL-2002   Infotech|Sangeet Sinha						*/
/*                    : 1.1   17-Oct-2005   Infotech|MG (Scrolling messages)	*/
/*                    : 1.2   17-Oct-2005   Infotech|MG (buffer alloc)				*/
/*                    : 1.3   08-May-2006   Infotech|Payal (to return FNO buy	*/
/*																						and FNO sell allowed Flag)			*/	
/*                    : 1.4   19-Apr-2007   Infotech|SN (FNO optimization to  */ 
/*																					return FFO_PIPE_ID for match accnt*/
/*                    : 1.5   13-Nov-2007		Infotech|SKS	(INR 65)            */
/*																						DL Revamp												*/
/*										:	1.6		20-Dec-2007		Infotech|SKS	(AIX Migration)			*/
/*										: 1.7   11-May-2008		Infotech | Rohit									*/
/*										: 1.8   12-Jun-2008		Infotech | Sangeet								*/
/*										: 1.9   27-Aug-2009		Infotech | Umesh									*/
/*										:	2.0		01-Apr-2010		Infotech | Sandeep								*/
/*										:	2.1		20-Apr-2010		Infotech | Venture								*/
/*										:	2.2		08-Aug-2011		Infotech | Nitin S								*/
/*										:	2.3		08-Mar-2011		Infotech | Sandeep								*/
/*										:	2.4		23-Feb-2012		Infotech | Sandeep								*/
/*										:	2.5		21-Aug-2012		Infotech | Sandeep								*/
/*										:	2.6		04-Sep-2012		Infotech | Sandeep								*/
/*                    : 2.7   11-Jan-2013   Infotech | Navina 								*/
/*                    : 2.8   23-Jan-2013   Infotech | Sandip                 */
/*                    : 2.9   21-May-2013   Infotech | Navina                 */
/*                    : 3.0   30-Jan-2014   Infotech | SN		                  */
/*										: 3.1		06-Jun-2014		Infotech | Vishnu Nair.						*/
/*										: 3.2		23-Sep-2014		Infotech | Sandip Tambe.					*/
/*										: 3.3		28-Oct-2015		Infotech | Sandip Tambe.					*/
/*										: 3.5		20-Apr-2017		Infotech | Sandip Tambe.					*/
/*										: 3.6		18-Dec-2019		Infotech | Sandip Tambe.					*/
/*										: 3.7		18-Nov-2021		Infotech | Samip M.								*/
/******************************************************************************/
/*  1.0  -  New release                                                       */
/*	1.7	 -  Change for Reallocation																						*/
/*	1.8	 -  Ordering Change for FP																						*/
/*	2.0	 -	Risk Exposure																											*/
/*	2.1	 -	Changes for SEBI Compliance CR mandate                            */
/*	2.2	 -	Sebi 2nd time process	-Commented allocation check of Ver 2.1			*/
/*          and added entry for ADH, FDT and UAC flag update                  */
/*	2.3	 -	SPAN Flag Check																										*/
/*	2.4	 -  BSE Changes																												*/ 
/*	2.5	 -	Condiiton Commented For Derivative World													*/
/*	2.6	 -	DP Account Check added in where condition													*/
/*  2.7  -  SPAN FuturePLUS                                                   */
/*  2.8  -  OPM Front End CR-ISEC14-33377                                     */
/*  2.9  -  SLTP FuturePLUS                                                   */
/*  3.0  -  ADH insert 																												*/
/*	3.1  -  Commented the fetch for Dp id,Client id and Bank account number 	*/
/*				  as it is not used in frondend because same has been fetched from	*/
/*				  SVC_GET_MATCH_DP.																									*/ 
/*  3.2  -  I-Gain Profit Pricing CR ISEC14-55222                             */
/*  3.3  -  Demat Based Derivative Enablement                                 */
/*  3.5  -  Demat Based Derivative Enablement considering BSE price           */
/*  3.6  -  CR_ISEC14_131137 Option 20 brokerage scheme changes               */
/*  3.7  -  Minor Changes : FNO Condition change from 5000 to 100							*/
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_log.h>             /*  Ver 1.6 : Added   */
#include <userlog.h>						/*  Ver 1.6 : Added   */
#include <fml_rout.h>						/*  Ver 1.6 : Added   */
#include <fn_read_debug_lvl.h>  /*  Ver 1.6 : Added   */

#define DEFLOG3 if (DEBUG_MSG_LVL_3)	/* Ver 2.1 */
#define DEFLOG5 if (DEBUG_MSG_LVL_5)  /* Ver 2.1 */


/*** Commnted below function declarations of Ver 2.1 for Changes in Ver 2.2 ****/
/* double fn_get_total_allocation(char * i_match_acnt_id,char * i_usr_id , char i_type); */ /* Ver 2.1 */ 
/* double fn_get_NRI_total_allocation(char * i_match_acnt_id); */ /* Ver 2.1 */

char c_ServiceName[33];
char c_err_msg[256];
char c_g_error_code='N';

	EXEC SQL BEGIN DECLARE SECTION;
	
	double    d_g_plg_amount   = 0.00;
	double    d_g_eq_amount    = 0.00;
	double    d_g_fo_amount    = 0.00;
	double    d_g_cd_amount    = 0.00;
	double    d_g_mio_amount   = 0.00;
	double    d_g_total_amount = 0.00;

	char 			c_l_dp_id[9]={0};
	char 			c_l_dp_clnt_id[9]={0};
	
	EXEC SQL END   DECLARE SECTION;



void SFO_VAL_RES (TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Obuf;

	/*char c_ServiceName[33];*/
	char c_trd_dtls;       /* ver 1.3 */					
	/*char c_err_msg[256];*/
	char c_msg[256];
	char c_prdt_typ;
	char c_client_type = 'R';
	char c_nri_flag = 'N';
	char c_inst_flag = 'N';
	char c_spn_actvn_flg = 'N';				/**		Ver	2.3	***/
  char c_fno_ftrs[6];     /***  Ver 2.0 ***/
  char c_spn_alwd;        /***  Ver 2.3 ***/
  char c_bsespn_alwd;     /***  Ver 2.4 ***/
 	char c_rfrnc_nmbr[16];	/***  Ver 2.3 ***/
  char c_accpt_by[16];		/***  Ver 2.3 ***/
  char c_xchng_cd[3+1];   /***  Ver 2.4 ***/
  /*** char c_prd_desc[10+1];  ***  Ver 2.4 ***   Commented in Ver 2.9 ***/
  char c_prd_desc[20+1];		 /*** Ver 2.9 ***/
  char c_xchng_cd_tmp[3+1];  /***  Ver 2.4 ***/
  char c_tmp_char;           /***  Ver 2.4 ***/
  char c_tmp_char_str[2];    /***  Ver 2.4 ***/
	int i_err[3];           /*** Ver 2.4 , indes value increased from 2 to 3 ****/
  int i_ferr[3];          /***  Ver 2.3 ***/ /*** Ver 2.4 , indes value increased from 2 to 3 ****/
	int i_returncode;
  int i_counter = 7;	/* 1.2 made 5 */ /* 1.9 made 7 */
	int i_count = 5;		/* 1.2 made 5 */
	int i_cnt=0;
	int i_cntr=0;
	int i_val_res[1];
	int i_valres_err[1];
	FLDLEN32 l_recordlength=0;		/*  Ver 1.6 : Data type changed from long to FLDLEN32   */
  int  i_level_exists;
	char prd[4] = "FNO";	/* Ver 1.6 : Array size changed from 3 to 4	*/
	char c_pcm_crnt_pipe_id[3] ;	/* Ver 1.4 */

  EXEC SQL BEGIN DECLARE SECTION;
		  double d_dflt_prtcn_percnt;
		  char c_mtch_accnt_no[11];
		  char c_clm_clnt_lvl;
		   char c_l_uac_fno_allwd;  /* Ver 2.1 */  
		   double d_l_total_allocation=0.00; 			/* Ver 2.1 */ /** Commnted in Ver 2.2 **/ /** Ver 3.3 uncomment **/
		  char   c_l_usr_id[11]={'\0'};		  			/* Ver 2.1 */  
		  /* char   c_l_trim_of_mtch_acnt_id[4]={0}; */ /* Ver 2.1 */  /** Commnted in Ver 2.2 **/
	EXEC SQL END DECLARE SECTION;

	EXEC SQL INCLUDE "table/mfl_flr_lst.h";

	EXEC SQL INCLUDE "table/clm_clnt_mstr.h";       /*** Ver 2.8 ***/

	struct vw_usr_dtls st_usr_dtls;
	struct vw_usr_prfl st_usr_prfl;
	struct vw_err_msg st_err_msg;

	int fn_get_trdng_dtls( char *, char *, char *, char * );	/* Ver 1.6 : Function Prototype Added	*/

	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
	strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.6 : Added   */
  MEMSET(c_xchng_cd_tmp);  /** Ver 2.4 ***/

	i_returncode = Fvftos32(ptr_fml_Ibuf,
                        	 (char *)&st_usr_dtls, 
                         		"vw_usr_dtls" );
	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	i_returncode = Fvftos32( ptr_fml_Ibuf, 
                           (char *)&st_usr_prfl, 
                           "vw_usr_prfl" );
	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.6 : Debug level Change  */
		fn_userlog( c_ServiceName, "User Id :%s:", st_usr_dtls.c_user_id );
		fn_userlog( c_ServiceName, "Session Id  :%ld", st_usr_dtls.l_session_id );				
	}


	/***	Ver	2.3	Starts	***/

	fn_userlog(c_ServiceName,"SPAN  Before Activation Flag Is :%c:",c_spn_actvn_flg);

	if(Fget32(ptr_fml_Ibuf,FFO_SOURCE_FLG,0,(char *) &c_spn_actvn_flg,0) == -1 ) 
	{
		if(Ferror32 != FNOTPRES)
		{
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
 			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

		}

	}

	fn_userlog(c_ServiceName,"SPAN  Activation Flag Is :%c:",c_spn_actvn_flg);

	/***  Ver 2.3 Ends	***/

/* As a Replacement of sfo_fno_trdng start */
	
	strcpy ( c_mtch_accnt_no,st_usr_prfl.c_cln_mtch_accnt );
	strcpy ( st_usr_prfl.c_cln_mtch_accnt, "*" );	
	strcpy ( c_l_usr_id , st_usr_dtls.c_user_id );   /* Ver 2.1 */ 

	i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl, &st_err_msg );
  if ( i_returncode == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  
	/*------------------------------Ver 2.1----------------------------------*/
	/******** Commented Ver 2.1 Changes for Ver 2.2 starts*************************/
	/********************************************************************************
	EXEC SQL
		SELECT
				uac_fno_allwd
		INTO 
				:c_l_uac_fno_allwd
		FROM 
				uac_usr_accnts
		WHERE 
				uac_clm_mtch_accnt=:c_mtch_accnt_no;
		
  if ( SQLCODE != 0 ) 
  {
    fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  if (c_l_uac_fno_allwd == 'X') 
  {  
   	fn_userlog( c_ServiceName, "FNO alwd:%c:",c_l_uac_fno_allwd);
   	
   	strncpy(c_l_trim_of_mtch_acnt_id,c_mtch_accnt_no,3);
   	fn_userlog( c_ServiceName, "Trim Match :%s:",c_l_trim_of_mtch_acnt_id);


 		if (strcmp(c_l_trim_of_mtch_acnt_id,"751") != 0 )
			d_l_total_allocation=fn_get_total_allocation(c_mtch_accnt_no,c_l_usr_id,'N');
		else
			d_l_total_allocation=fn_get_NRI_total_allocation(c_mtch_accnt_no);

   	
  	fn_userlog( c_ServiceName, "Allocation :%lf:",d_l_total_allocation);
   	fn_userlog( c_ServiceName, "Match |%s|",c_mtch_accnt_no);
   	
 
  	if ( c_g_error_code =='N' )
  	{
	  	if (d_l_total_allocation >= 10000)
	  	{
	  		if( DEBUG_MSG_LVL_3 )
	  		fn_userlog( c_ServiceName, "Enable FNO Match |%s|",c_mtch_accnt_no);
	  		
	  		if( tpbegin(0,0)== -1 )
	  		{
	  			fn_userlog( c_ServiceName, "Unable to open tran ");
			    fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg  );
			    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	  			
				}
	  		
			  EXEC SQL
					UPDATE UAC_USR_ACCNTS
					SET UAC_FNO_ALLWD = 'Y'
					WHERE  UAC_CLM_MTCH_ACCNT = :c_mtch_accnt_no;
					
			  if ( SQLCODE != 0 )
			  {
			    fn_errlog ( c_ServiceName, "S31025", SQLMSG, c_err_msg  );
	    	  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			  }
			  
				if( DEBUG_MSG_LVL_3 )
				fn_userlog( c_ServiceName, "Log Insert ADH FNO Match |%s|",c_mtch_accnt_no);
			
			 ** Ver 3.0 adds columns **	
			  EXEC SQL
			  	INSERT INTO adh_act_deact_hstry
					(	ADH_USR_ID,
						ADH_CLM_MTCH_ACCNT,
						ADH_ACT_DEACT_FLG,
						ADH_ACT_DEACT_DT,
						ADH_ACT_DEACT_SRC,
						ADH_RMRKS,
						ADH_UPGRD_FLG
					)
			  VALUES
			  	(:c_l_usr_id ,:c_mtch_accnt_no , 'A', SYSDATE, 'FNO_COMPLIANCE' 
						, 'FNO - Existing Customer initiated Fund & Share allocation more than Rs 10000' , 'N' );
						
			  if ( SQLCODE != 0 )
			  {
			    fn_errlog ( c_ServiceName, "S31030", SQLMSG, c_err_msg  );
	    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			  }
			  
				EXEC SQL
					SELECT NVL(dbd_dp_id,'NA') , NVL(dbd_dp_clnt_id,'NA')
					INTO   :c_l_dp_id, :c_l_dp_clnt_id
					FROM   dbd_dp_blck_dtls
					WHERE  dbd_clm_mtch_accnt = :c_mtch_accnt_no
					AND rownum < 2;

			  if ( ( SQLCODE != 0 ) &&  ( SQLCODE != NO_DATA_FOUND ) )
			  {
				    fn_errlog ( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
		    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
					
					
				if (SQLCODE == NO_DATA_FOUND)
				{
					strcpy(c_l_dp_id,"NA");
					strcpy(c_l_dp_clnt_id,"NA");
				}			  
			  
			  EXEC SQL
					INSERT INTO FDT_FNO_DISABLE_TRACK
					SELECT 
						SEQ_DISBL_FNO_NMBR.NEXTVAL,
						uac_usr_id , uac_clm_mtch_accnt , clb_bnk_acct_nmbr ,
						'Y' , 'X' ,
						:d_g_plg_amount,:d_g_eq_amount, :d_g_fo_amount, :d_g_mio_amount, :d_g_cd_amount,
						'AUTOENABLE : FNO - Existing Customer initiated Fund & Share allocation more than Rs 10000', 
						 SYSDATE,:c_l_dp_id, :c_l_dp_clnt_id, 'Y'
					FROM UAC_USR_ACCNTS , CLB_BNK_ACCTS
					WHERE
						uac_clm_mtch_accnt = clb_clm_mtch_accnt 
						AND uac_clm_mtch_accnt = :c_mtch_accnt_no;
						
			  if ( SQLCODE != 0 )
			  {
			    fn_errlog ( c_ServiceName, "S31040", SQLMSG, c_err_msg  );
	    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			  }
				  
			  EXEC SQL
				  UPDATE clm_clnt_mstr
					SET clm_clnt_lvl = 1 ,
					clm_lst_upd_dt = SYSDATE
					WHERE
					clm_mtch_accnt = :c_mtch_accnt_no;
					
				if ( SQLCODE != 0 )
				{
				  fn_errlog ( c_ServiceName, "S31045", SQLMSG, c_err_msg  );
	    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				  
		  	if( tpcommit(0)== -1 )
	  		{
	  			fn_userlog( c_ServiceName, "Unable to close tran ");
			    fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg  );
			    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	  			
				}
			}
			else
			{
				if( DEBUG_MSG_LVL_3 )
				fn_userlog( c_ServiceName, "B28666 Allocation Less Match |%s|",c_mtch_accnt_no);
		    fn_errlog( c_ServiceName, "B28666", SQLMSG, c_err_msg  );
		    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		    tpreturn(TPFAIL, 2, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}
		else
		{
	    fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg  );
	    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
	****************************************************************************/
	/**** Commnted part of Ver 2.1 for Ver 2.2 Ends ********************************************/
	/*-------------------------------Ver 2.1 END-------------------------------*/
  
  /********* Ver 2.2 New code starts *****************/ 

	EXEC SQL
		SELECT uac_fno_allwd
		INTO 	 :c_l_uac_fno_allwd
		FROM 	 uac_usr_accnts
		WHERE  uac_clm_mtch_accnt=:c_mtch_accnt_no;
		
  if ( SQLCODE != 0 ) 
  {
    fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  if (c_l_uac_fno_allwd == 'Z' || c_l_uac_fno_allwd == 'D' )			/** ver 3.3 **/ 
  { 	
   	fn_userlog( c_ServiceName, "FNO alwd:%c:",c_l_uac_fno_allwd);
		/*** Ver 3.3 **/
		if(c_l_uac_fno_allwd == 'D' )
		{
			/*EXEC SQL
				select 	nvl ( sum (  ( nvl(dbd_tot_qty,0) ) *  nvl( ltq_rt, 0)  ),0 ) 
				into  :d_l_total_allocation
				from 		dbd_dp_blck_dtls, ltq_trd_qt
				where 	dbd_clm_mtch_accnt  = :c_mtch_accnt_no
				and 		dbd_stck_cd      		= ltq_stck_cd
				and ltq_xchng_cd     				= 'NSE';*/  /** Ver 3.5 comment **/
			/** ver 3.5 Changed Query ***/
			EXEC SQL 
			select  nvl ( sum (  ( nvl(dbd_tot_qty,0) ) *  nvl( ltq_rt, 0)  ),0 )
			into  :d_l_total_allocation
			from    dbd_dp_blck_dtls,
							(
								select ltq_stck_cd ,ltq_rt
								from ltq_trd_qt N
								where ltq_xchng_cd = 'NSE'
							union
								select ltq_stck_cd ,ltq_rt
								from ltq_trd_qt B
								where ltq_xchng_cd = 'BSE'
								and not exists
								(select 1 from ltq_trd_qt where ltq_xchng_cd='NSE' and ltq_stck_cd=B.ltq_stck_cd)
								order by ltq_stck_cd
							)
			where dbd_clm_mtch_accnt  = :c_mtch_accnt_no
			and   dbd_stck_cd         = ltq_stck_cd;

			if(SQLCODE != 0 )
			{
    		fn_errlog( c_ServiceName, "S31065", SQLMSG, c_err_msg  );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			fn_userlog(c_ServiceName,"total Demat Allocation for :%s: is :%lf:",c_mtch_accnt_no,d_l_total_allocation);

			/** if( d_l_total_allocation < 5000 ) ** Commented for Ver 3.7 and changed to 100 **/
			if( d_l_total_allocation < 100 )
			{
    		/** fn_errlog( c_ServiceName, "B28667", SQLMSG, c_err_msg  ); ** Commented and changed error code for Ver 3.7 **/
    		fn_errlog( c_ServiceName, "S31070", "Error for Demat Validation", c_err_msg  );	/** Added for Ver 3.7 **/
				sprintf(c_err_msg,"The value of your Demat holding should be greater than Rs.100 to activate F&O segment. Shares bought today will be credited in your demat on T+2 working days. Please try again, once sufficient holding is in your demat account."); /** Added for Ver 3.7 **/
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}
		/** Ver 3.3 Ends **/

	 	if( tpbegin(0,0)== -1 )
	 	{
	 		fn_userlog( c_ServiceName, "Unable to open tran ");
	    fn_errlog( c_ServiceName, "S31075", SQLMSG, c_err_msg  );
	    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	  			
		}
	  EXEC SQL
			UPDATE UAC_USR_ACCNTS
			SET UAC_FNO_ALLWD = 'Y'
			WHERE  UAC_CLM_MTCH_ACCNT = :c_mtch_accnt_no;
	  if ( SQLCODE != 0 )
	  {
	    fn_errlog ( c_ServiceName, "S31080", SQLMSG, c_err_msg  );
	 	  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	  }

		if( DEBUG_MSG_LVL_3 )
		  fn_userlog( c_ServiceName, "Log Insert ADH FNO Match |%s|",c_mtch_accnt_no);
			

		/*** Ver 3.0 adds columns ***/	
	  EXEC SQL
	  	INSERT INTO adh_act_deact_hstry (
						ADH_USR_ID,
						ADH_CLM_MTCH_ACCNT,
						ADH_ACT_DEACT_FLG,
						ADH_ACT_DEACT_DT,
						ADH_ACT_DEACT_SRC,
						ADH_RMRKS,
						ADH_UPGRD_FLG)
		  VALUES
			  	(:c_l_usr_id ,:c_mtch_accnt_no , 'A', SYSDATE, 'FNO_SEBI_TIME' , 
					decode(:c_l_uac_fno_allwd,'Z','FNO - Existing Customer accpted conditions as per Bank acnt 6 months old criteria',
									'D','FNO - Existing Customer accpted conditions as per Demat Holding > 100') /** Ver 3.3 decode added **/ /** Changed from 5000 to 100 for Ver 3.7 **/
					, 'N' );
						
		if ( SQLCODE != 0 )
		{
		  fn_errlog ( c_ServiceName, "S31085", SQLMSG, c_err_msg  );
	  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
			 
		/**** 23-Sep-2011 following FDT INsert Added after accepting SEBI Declaration ***/
		if( DEBUG_MSG_LVL_3 )
		  fn_userlog( c_ServiceName, "Log Insert in FDT for match |%s|",c_mtch_accnt_no);
	
	  EXEC SQL
			INSERT INTO FDT_FNO_DISABLE_TRACK
							 SELECT SEQ_DISBL_FNO_NMBR.NEXTVAL,
							 :c_l_usr_id,
							 :c_mtch_accnt_no,
							 '',
							 :c_l_uac_fno_allwd, /** Ver 3.3 'Z' replaced with variable **/
							 'Y',
							 :d_l_total_allocation, /*** Ver 3.3 '0.00' repladed with variable **/
							 '0.00',
							 '0.00',
							 '0.00',
							 '0.00',
							 decode(:c_l_uac_fno_allwd,'Z','FNO_ALLWD Flag changed from Z to Y as user accepted SEBI Declaration',
											 'D','FNO_ALLWD Flag changed from D to Y as user accepted SEBI Declaration'),	/** Ver 3.3 decode add */
							 SYSDATE,
							 '',
							 '',
							 'Y'
		  FROM 	UAC_USR_ACCNTS
			WHERE UAC_CLM_MTCH_ACCNT = :c_mtch_accnt_no;
						
							 			  
		if ( SQLCODE != 0 )
		{
		  fn_errlog ( c_ServiceName, "S31090", SQLMSG, c_err_msg  );
	  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
				  
		if( tpcommit(0)== -1 )
	  {
	  	fn_userlog( c_ServiceName, "Unable to close tran ");
		  fn_errlog( c_ServiceName, "S31095", SQLMSG, c_err_msg  );
		  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	  			
		}
	}
 /**************************Ver 2.2 new code ends ***************/

	/***	Commented In Ver 2.4 ***

	***	Ver	2.3	Starts	***
	
	if (	c_spn_actvn_flg == 'Z' )
	{

		fn_userlog(c_ServiceName,"Inside SPAN Activation Condiiotn.");
		fn_userlog(c_ServiceName,"SPAN Activation Flag Is :%c:",c_spn_actvn_flg); 
		fn_userlog(c_ServiceName,"Matcvh Account Is :%s:",c_mtch_accnt_no);

		if( tpbegin(0,0)== -1 )
    {
      fn_userlog( c_ServiceName, "Unable to open tran ");
      fn_errlog( c_ServiceName, "S31100", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		EXEC SQL
			UPDATE	CLM_CLNT_MSTR
			SET			CLM_SPAN_ALLWD	=	'Y'
			WHERE		CLM_MTCH_ACCNT  = :c_mtch_accnt_no ;

		if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  	{
    	fn_errlog( c_ServiceName, "S31105", SQLMSG, c_err_msg  );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

		strcpy(c_accpt_by,"\0");
		strcpy(c_rfrnc_nmbr,"\0");

		EXEC SQL
			INSERT INTO	UAH_USR_ACCPT_HSTRY
								(	UAH_USR_ID,
									UAH_PRDCT_CD,
								 	UAH_VRSN_NMBR,
									UAH_ACCPT_FLG,
								 	UAH_ACCPT_DT,
								 	UAH_ACCPT_SSSN,
								 	UAH_RFRNC_NMBR,
								 	UAH_ACCPT_BY
								)
							VALUES
								(
									:st_usr_dtls.c_user_id,
									'SPN',
									1.0,
									:c_spn_actvn_flg,
									SYSDATE,
								 	:st_usr_dtls.l_session_id,
									:c_rfrnc_nmbr,
									:c_accpt_by
								);

		if( tpcommit(0)== -1 )
    {
      fn_userlog( c_ServiceName, "Unable to close tran ");
      fn_errlog( c_ServiceName, "S31110", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

	}

	***	Ver	2.3	Ends	***

	*** Comment Ends Ver 2.4	***/ 
  
	i_level_exists=0;
  MEMSET(sql_clm_opt_schm_cd);            /** Ver 2.8 **/
  MEMSET(sql_clm_brkr_cmpt_flg);          /** Ver 2.8 **/
  MEMSET(sql_clm_igain_fp_flg);           /** Ver 3.2 **/
  MEMSET(sql_clm_igain_fp_schm_cd);       /** Ver 3.2 **/
  MEMSET(sql_clm_igain_op_flg);           /** Ver 3.2 **/
  MEMSET(sql_clm_igain_op_schm_cd);       /** Ver 3.2 **/
  MEMSET(sql_clm_op20_flg);           		/** Ver 3.6 **/
  MEMSET(sql_clm_op20_schm_cd);       		/** Ver 3.6 **/

  EXEC SQL
    SELECT  1,
						NVL(clm_fno_features,'N'),		/***	2.0	***/
            NVL(CLM_SPAN_ALLWD,'N'),           /***  Ver 2.3 ***/
            NVL(CLM_BSESPAN_ALLWD,'N'),         /***  Ver 2.4 ***/
            CLM_BRKR_CMPT_FLG,            /** Ver 2.8 **/
            NVL(CLM_OPT_SCHM_CD,'NA'),     /** Ver 2.8 **/
            nvl(CLM_OP20_FLG,'N'),          /** Ver 3.6 **/
            NVL(CLM_OP20_SCHM_CD,'NA'),     /** Ver 3.6 **/
						NVL(CLM_IGAIN_FP_FLG,'N'),		  /** Ver 3.2 **/
						NVL(CLM_IGAIN_OP_FLG,'N'),		  /** Ver 3.2 **/
						NVL(CLM_IGAIN_FP_SCHM_CD,'NA'), /** Ver 3.2 **/
						NVL(CLM_IGAIN_OP_SCHM_CD,'NA')	/** Ver 3.2 **/
    INTO    :i_level_exists,
						:c_fno_ftrs,       					/***  2.0 ***/
            :c_spn_alwd,                /***  Ver 2.3 ***/
            :c_bsespn_alwd,              /***  Ver 2.4 ***/
            :sql_clm_brkr_cmpt_flg,      /** Ver 2.8 **/
            :sql_clm_opt_schm_cd,        /** Ver 2.8 **/
            :sql_clm_op20_flg,      		 /** Ver 3.6 **/
            :sql_clm_op20_schm_cd,       /** Ver 3.6 **/
						:sql_clm_igain_fp_flg,		   /** Ver 3.2 **/
						:sql_clm_igain_op_flg,		   /** Ver 3.2 **/
						:sql_clm_igain_fp_schm_cd, 	 /** Ver 3.2 **/
						:sql_clm_igain_op_schm_cd		 /** Ver 3.2 **/
    FROM    clm_clnt_mstr
    WHERE   clm_mtch_accnt  = :c_mtch_accnt_no
    AND     clm_clnt_lvl IS NOT NULL;

    if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.6 : Debug level Change  */
			fn_userlog( c_ServiceName, "134 i_level_exists  :%d:", i_level_exists);
			fn_userlog( c_ServiceName, "135 c_mtch_accnt_no :%s", c_mtch_accnt_no );
    }	



  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog( c_ServiceName, "S31115", SQLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  SETNULL(sql_clm_opt_schm_cd);       /*** Ver 2.8 **/
  SETNULL(sql_clm_op20_schm_cd);      /*** Ver 3.6 **/
  SETNULL(sql_clm_op20_flg);      		 /*** Ver 3.6 **/
  /* COMMENTED IN VER TOL : TUX on LINUX (Ravindra) * SETNULL(sql_clm_brkr_cmpt_flg);       *** Ver 2.8 **/
  sql_clm_brkr_cmpt_flg = '\0';  /* VER TOL */
  SETNULL(sql_clm_igain_fp_flg);       /*** Ver 3.2 **/
  SETNULL(sql_clm_igain_op_flg);       /*** Ver 3.2 **/
  SETNULL(sql_clm_igain_fp_schm_cd);   /*** Ver 3.2 **/
  SETNULL(sql_clm_igain_op_schm_cd);   /*** Ver 3.2 **/

  if ( i_level_exists != 1 )
  {
    fn_errlog( c_ServiceName, "B28555", SQLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, 2, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	fn_userlog(c_ServiceName,"FNO Fetures :%s:",c_fno_ftrs);      /***  Ver 2.0 ***/

/* As a Replacement of sfo_fno_trdng end */
 
/** Commented in Ver 3.1 

	EXEC SQL 
			DECLARE get_match_dp_bnk_dtls CURSOR
      FOR	SELECT	UAC.UAC_CLM_MTCH_ACCNT,
									CLD.CLD_DP_ID,
									CLD.CLD_DP_CLNT_ID,
									CLB.CLB_BNK_ACCT_NMBR  *Required*
         		FROM	UAC_USR_ACCNTS UAC,
									CLD_DP_ACCTS CLD,
									CLB_BNK_ACCTS CLB
						WHERE	UAC.UAC_CLM_MTCH_ACCNT = :c_mtch_accnt_no
						AND		CLD.CLD_CLM_MTCH_ACCNT = UAC.UAC_CLM_MTCH_ACCNT
            AND   CLB.CLB_CLM_MTCH_ACCNT = UAC.UAC_CLM_MTCH_ACCNT
						AND		CLD_DP_ACC_TYP				 = 'E';										***	Ver	2.6	***

 EXEC SQL OPEN get_match_dp_bnk_dtls; 
	
 if ( SQLCODE != 0 )
  {
	fn_errlog( c_ServiceName, "S31120", SQLMSG, c_err_msg  );
 	EXEC SQL CLOSE get_match_dp_bnk_dtls;
	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN * i_counter ); * 1.2 *
	
	if ( ptr_fml_Obuf == NULL )
	{
		fn_errlog( c_ServiceName, "S31125", TPMSG, c_err_msg  );
  	EXEC SQL CLOSE get_match_dp_bnk_dtls;
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  while(1)
  {
    EXEC SQL FETCH get_match_dp_bnk_dtls 
	    			 INTO 	:st_usr_dtls.c_cln_mtch_accnt[i_cnt],
		 								:st_usr_dtls.c_dp_id[i_cnt],
		  							:st_usr_dtls.c_dp_clnt_id[i_cnt],
		  							:st_usr_dtls.c_bnk_accnt_nmbr[i_cnt];

    if (SQLCODE != 0)
    {
      if(SQLCODE == NO_DATA_FOUND)
      {
        break;
      }
			fn_errlog( c_ServiceName, "S31130", SQLMSG, c_err_msg  );
  		EXEC SQL CLOSE get_match_dp_bnk_dtls;
			tpfree ( ( char * ) ptr_fml_Obuf );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

	rtrim( st_usr_dtls.c_bnk_accnt_nmbr[i_cnt] );
	if( DEBUG_MSG_LVL_3 ) {          *  Ver 1.6 : Debug level Change  *
  	fn_userlog( c_ServiceName, "c_cln_mtch_accnt:%s:",
                                st_usr_dtls.c_cln_mtch_accnt[i_cnt] );
  	fn_userlog( c_ServiceName, "c_dp_id:%s:", 
                                st_usr_dtls.c_dp_id[i_cnt] );
  	fn_userlog( c_ServiceName, "c_dp_clnt_id:%s:", 
                                st_usr_dtls.c_dp_clnt_id[i_cnt] );
  	fn_userlog( c_ServiceName, "c_bnk_accnt_nmbr:%s:", 
                                st_usr_dtls.c_bnk_accnt_nmbr[i_cnt]);
	}

			i_cnt++;
    }

    EXEC SQL CLOSE get_match_dp_bnk_dtls;
  
Comment ends ver 3.1 ****/ 

	/** Ver 3.1 Starts   **/
	
	ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN * i_counter );

	if ( ptr_fml_Obuf == NULL )
 	{
		fn_errlog( c_ServiceName, "S31135", TPMSG, c_err_msg  );
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}
	
	/** Ver 3.1 Ends **/
	

/* 1.1 start */

	EXEC SQL
    DECLARE msg_board_cur CURSOR FOR
    SELECT mfl_mssg_cd,mfl_mssg_dspld
    FROM mfl_flr_lst where mfl_mssg_flg = 'F';

    EXEC SQL
       OPEN msg_board_cur;


		while(1)
    {
       	EXEC SQL
          FETCH msg_board_cur INTO
             		:sql_mfl_mssg_cd,
             		:sql_mfl_mssg_dspld;

     		if ( SQLCODE == NO_DATA_FOUND )
     		{
      		break;
     		}

     		SETNULL(sql_mfl_mssg_cd);
     		SETNULL(sql_mfl_mssg_dspld);

        l_recordlength  = sizeof( sql_mfl_mssg_cd ) +
                      sizeof( sql_mfl_mssg_dspld ) ;

        if(Funused32(ptr_fml_Obuf) <= Fneeded32(1,l_recordlength))
        {
          i_count++;

						/* Ver 1.7 starts  */

          /*if((ptr_fml_Obuf = (FBFR32*)tprealloc((char *)ptr_fml_Obuf,
                                            i_count * MIN_FML_BUF_LEN))==NULL) */
 					/*	if((ptr_fml_Obuf = (FBFR32*)tprealloc((char *)ptr_fml_Obuf,
															 (Fsizeof32(ptr_fml_Obuf) + (i_count * MIN_FML_BUF_LEN )))) == NULL)*/ /*ver 1.9*/ 
						/* Ver 1.7 Ends */
					if((ptr_fml_Obuf = (FBFR32*)tprealloc((char *)ptr_fml_Obuf,
                               (Fsizeof32(ptr_fml_Obuf) + (Fneeded32(1,i_count*l_recordlength) )))) == NULL)
          {
            EXEC SQL
              CLOSE msg_board_cur;
              fn_errlog(c_ServiceName,"S31140",TPMSG,c_err_msg);
              tpfree((char* )ptr_fml_Obuf);
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        }

				i_err[0] = Fadd32(ptr_fml_Obuf, FFO_INDX_CD,
                                            (char *)sql_mfl_mssg_cd.arr,0);
        i_err[1] = Fadd32(ptr_fml_Obuf, FFO_SYS_MSG,
                                            (char*)sql_mfl_mssg_dspld.arr,0);

        for(i_cntr = 0;i_cntr < 2;i_cntr++)
        {
           if(i_err[i_cntr] == -1)
           {
            userlog("i_cntr :%d:",i_cntr);
            userlog("FMLMSG :%s:",FMLMSG);
						EXEC SQL
              CLOSE msg_board_cur;
              fn_errlog(c_ServiceName,"S31145",TPMSG,c_err_msg);
              tpfree((char* )ptr_fml_Obuf);
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
           }
         }

     	}

     	EXEC SQL
       	CLOSE msg_board_cur;


/*1.1 over*/

    EXEC SQL SELECT 
                   NVL(CCG_FO_TRD_PSWD_LMT,0) ,
                   CCG_CLNT_CTGRY_ID
             INTO
                   :st_usr_dtls.l_passwd_lmt,    /*Required*/
                   :st_usr_dtls.l_clnt_ctgry
             FROM
                   clm_clnt_mstr clm,
                   ccg_clnt_ctgry ccg
             WHERE
                   clm.clm_clnt_ctgry_id=ccg.ccg_clnt_ctgry_id
             AND
                   clm.clm_mtch_accnt= (SELECT uac_clm_mtch_accnt
                               FROM 		uac_usr_accnts
														   WHERE		UAC_CLM_MTCH_ACCNT = :c_mtch_accnt_no
                               AND 			rownum = 1);
    
   	if ( SQLCODE != 0 )
    {
		    fn_errlog( c_ServiceName, "S31150", SQLMSG, c_err_msg  );
			  tpfree ( ( char * ) ptr_fml_Obuf );
		    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		
		if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.6 : Debug level Change  */
			fn_userlog(c_ServiceName,"THE PASSWD LIMIT is %ld",st_usr_dtls.l_passwd_lmt);
		}
  /*********** Ver 2.4 starts here ************/
   i_returncode = Fvstof32( ptr_fml_Obuf, (char *) &st_usr_dtls,
                          FCONCAT, "vw_usr_dtls" );

  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31155", FMLMSG, c_err_msg  );
    if( Ferror32 == FNOSPACE )
    {
      i_counter++;

      /* ver 1.7 starts */
      /*ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
                            i_counter * MIN_FML_BUF_LEN );*/

        ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
                       (Fsizeof32( ptr_fml_Obuf ) +(i_counter *MIN_FML_BUF_LEN)));

      /* Ver 1.7 ENds */

      if ( ptr_fml_Obuf == NULL )
      {
        fn_errlog( c_ServiceName, "S31160", TPMSG, c_err_msg  );
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      i_returncode = Fvstof32( ptr_fml_Obuf, (char *)&st_usr_dtls,
                                 FCONCAT, "vw_usr_dtls" );

      if ( i_returncode == -1 )
      {
        fn_errlog( c_ServiceName, "S31165", FMLMSG, c_err_msg  );
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    else
    {
      fn_errlog( c_ServiceName, "S31170", FMLMSG, c_err_msg  );
      tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  } 

  /*********** Ver 2.4 Ends Here **************/

  EXEC SQL DECLARE get_exg_prdct_dtls CURSOR
           FOR
						SELECT	CPM.CPM_XCHNG_CD,
										CPM.CPM_PRDCT_TYP,
										PRM.PRM_PRDCT_NM
						FROM		CPM_CCG_PRM_MAP CPM,
                    PRM_PRDCT_MSTR PRM
						WHERE		CPM.CPM_CLN_CTGRY_ID = :st_usr_dtls.l_clnt_ctgry
						AND			PRM.PRM_PRDCT_TYP = CPM.CPM_PRDCT_TYP
            AND     CPM.CPM_MKT_TYP = 'D'
						ORDER BY  CPM.CPM_XCHNG_CD DESC,PRM.PRM_PRDCT_NM ;     /** 1.8 ***/
                      /*** Ver 2.4, added CPM.CPM_XCHNG_CD in order by clause ***/

 EXEC SQL OPEN get_exg_prdct_dtls; 
	
 	if ( SQLCODE != 0 )
  {
		fn_errlog( c_ServiceName, "S31175", SQLMSG, c_err_msg  );
  	EXEC SQL CLOSE get_exg_prdct_dtls;
		tpfree ( ( char * ) ptr_fml_Obuf );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	i_cnt=0;
 
  while(1)
  {
    /***** Commented in Ver 2.4 ************ 
    EXEC SQL FETCH get_exg_prdct_dtls 
						 INTO :st_usr_dtls.c_xchng_cd[i_cnt],
									:c_prdt_typ,
						 		  :st_usr_dtls.c_prd_desc[i_cnt];
    ****************************************/
    /*** Ver 2.4 starts here ****/
    EXEC SQL FETCH get_exg_prdct_dtls
             INTO :c_xchng_cd,
                  :c_prdt_typ,
                  :c_prd_desc;
    /*** Ver 2.4 Ends here *****/

    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        break;
      }
			fn_errlog( c_ServiceName, "S31180", SQLMSG, c_err_msg  );
  		EXEC SQL CLOSE get_exg_prdct_dtls;
			tpfree ( ( char * ) ptr_fml_Obuf );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	  
	  /**	st_usr_dtls.c_prd_typ[i_cnt]=c_prdt_typ;
		rtrim(st_usr_dtls.c_prd_desc[i_cnt]);     **** Commented in ver 2.4 ***
   
	if( DEBUG_MSG_LVL_3 ) {          *  Ver 1.6 : Debug level Change * 
  	fn_userlog( c_ServiceName, "c_xchng_cd:%s:",
                               st_usr_dtls.c_xchng_cd[i_cnt] );
  	fn_userlog( c_ServiceName, "c_prd_typ:%c:%c:", 
                               st_usr_dtls.c_prd_typ[i_cnt],c_prdt_typ);
  	fn_userlog( c_ServiceName, "c_prd_desc:%s:", 
                                st_usr_dtls.c_prd_desc[i_cnt]);
    }
    ************** Ver 2.4  Comment end *********/

    /********* Ver 2.4 Starts here *************/
    if( DEBUG_MSG_LVL_3 ) 
    {
     fn_userlog( c_ServiceName, "c_xchng_cd:%s:",c_xchng_cd);
     fn_userlog( c_ServiceName, "c_prd_typ:%c:%c:",c_prdt_typ);
     fn_userlog( c_ServiceName, "c_prd_desc:%s:",c_prd_desc);
    }

    if( strcmp(c_xchng_cd_tmp,'\0') == 0 )
    {
      strcpy(c_xchng_cd_tmp,c_xchng_cd);
      rtrim(c_xchng_cd_tmp);
    }
        /*** bcoz front end required product list exchange code wise '|' seperated ****/

    if( strcmp(c_xchng_cd_tmp,c_xchng_cd) != 0)  
    {
     c_tmp_char = '|';   
     strcpy(c_tmp_char_str,"|");

     i_err[0] = Fadd32(ptr_fml_Obuf, FFO_PRDCT_TYP,(char*)&c_tmp_char,0);
     i_err[1] = Fadd32(ptr_fml_Obuf, FFO_PRDCT_DESC,(char*)c_tmp_char_str,0);
     for(i_cntr = 0;i_cntr < 2;i_cntr++)
     {
      if(i_err[i_cntr] == -1)
      {
       userlog("i_cntr :%d:",i_cntr);
       userlog("FMLMSG :%s:",FMLMSG);
       fn_errlog(c_ServiceName,"S31185",TPMSG,c_err_msg);
       tpfree((char* )ptr_fml_Obuf);
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
     }
     strcpy(c_xchng_cd_tmp,c_xchng_cd);
     rtrim(c_xchng_cd_tmp);
    }

    if( Fadd32(ptr_fml_Obuf, FFO_XCHNG_CD,(char *)c_xchng_cd,0) == -1)
    {
     userlog("FMLMSG :%s:",FMLMSG);
     fn_errlog(c_ServiceName,"S31190",TPMSG,c_err_msg);
     tpfree((char* )ptr_fml_Obuf);
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
    }

    /*** Futures plus is not allowed for SPAN customer, so do not sent Future Plus product to front end ***/

		
    if (
					/***	Commented In Ver 2.5
			 		(( strcmp(c_xchng_cd,"NFO") == 0 ) &&  c_spn_alwd == 'Y'   &&  c_prdt_typ !='P' && c_prdt_typ != 'L')
					***/
					/*** Commented in Ver 2.7 ***
			 		(( strcmp(c_xchng_cd,"NFO") == 0 ) &&  c_spn_alwd == 'Y'   &&  c_prdt_typ !='P') ||
         (( strcmp(c_xchng_cd,"BFO") == 0 ) &&  c_bsespn_alwd == 'Y'  && c_prdt_typ !='P' && c_prdt_typ != 'L' ) 
				 ***/
			 	 (( strcmp(c_xchng_cd,"NFO") == 0 ) &&  c_spn_alwd == 'Y') ||
         (( strcmp(c_xchng_cd,"BFO") == 0 ) &&  c_bsespn_alwd == 'Y' && c_prdt_typ !='P' && c_prdt_typ != 'L' )	/*** Ver 2.7 ***/
       )
    { 
     if( Fadd32(ptr_fml_Obuf, FFO_PRDCT_TYP,(char*)&c_prdt_typ,0) == -1 )
     {
      userlog("FMLMSG :%s:",FMLMSG);
      fn_errlog(c_ServiceName,"S31195",TPMSG,c_err_msg);
      tpfree((char* )ptr_fml_Obuf);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
 
     if(Fadd32(ptr_fml_Obuf, FFO_PRDCT_DESC,(char*)c_prd_desc,0) == -1 )
     {
      userlog("FMLMSG :%s:",FMLMSG);
      fn_errlog(c_ServiceName,"S31200",TPMSG,c_err_msg);
      tpfree((char* )ptr_fml_Obuf);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
    }
    else if ( (( strcmp(c_xchng_cd,"NFO") == 0 ) &&  c_spn_alwd == 'N' ) ||
              (( strcmp(c_xchng_cd,"BFO") == 0 ) &&  c_bsespn_alwd == 'N') )
    {
     if( Fadd32(ptr_fml_Obuf, FFO_PRDCT_TYP,(char*)&c_prdt_typ,0) == -1 )
     {
      userlog("FMLMSG :%s:",FMLMSG);
      fn_errlog(c_ServiceName,"S31205",TPMSG,c_err_msg);
      tpfree((char* )ptr_fml_Obuf);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

     if(Fadd32(ptr_fml_Obuf, FFO_PRDCT_DESC,(char*)c_prd_desc,0) == -1 )
     {
      userlog("FMLMSG :%s:",FMLMSG);
      fn_errlog(c_ServiceName,"S31210",TPMSG,c_err_msg);
      tpfree((char* )ptr_fml_Obuf);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
 
    }   
    /********* Ver 2.4 Ends here ***************/

	i_cnt++;
  }        
  EXEC SQL CLOSE get_exg_prdct_dtls;
  /**** Commented in Ver 2.4 **************

  i_returncode = Fvstof32( ptr_fml_Obuf, (char *) &st_usr_dtls, 
													FCONCAT, "vw_usr_dtls" );
    
  if ( i_returncode == -1 )
  {
		fn_errlog( c_ServiceName, "S31215", FMLMSG, c_err_msg  );
    if( Ferror32 == FNOSPACE )
    {
      i_counter++;

			 ver 1.7 starts 
      ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
                            i_counter * MIN_FML_BUF_LEN );
	
				ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
											 (Fsizeof32( ptr_fml_Obuf ) +(i_counter *MIN_FML_BUF_LEN)));

			 Ver 1.7 ENds 

      if ( ptr_fml_Obuf == NULL )
      {
				fn_errlog( c_ServiceName, "S31220", TPMSG, c_err_msg  );
				tpfree ( ( char * ) ptr_fml_Obuf );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

			i_returncode = Fvstof32( ptr_fml_Obuf, (char *)&st_usr_dtls,
                                 FCONCAT, "vw_usr_dtls" );

      if ( i_returncode == -1 )
      {
				fn_errlog( c_ServiceName, "S31225", FMLMSG, c_err_msg  );
				tpfree ( ( char * ) ptr_fml_Obuf );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    else
    {
			fn_errlog( c_ServiceName, "S31230", FMLMSG, c_err_msg  );
			tpfree ( ( char * ) ptr_fml_Obuf );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	}
  *************** Ver 2.4 ends here ********/

	/* code added for getting Default protection protection percentage 
	    in case of arbitrage order placement system */								

	EXEC SQL
	SELECT par_dflt_prtctn_prcntg
		INTO	:d_dflt_prtcn_percnt
		FROM par_systm_prmtr;
	if (SQLCODE != 0)
	{
		fn_errlog( c_ServiceName, "S31235", SQLMSG, c_err_msg  );
		tpfree ( ( char * ) ptr_fml_Obuf );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.6 : Debug level Change  */
		fn_userlog(c_ServiceName, "default percnt :%lf",d_dflt_prtcn_percnt);
	}
	/*** To send default protection percentage for arbitrage system ***/
	i_returncode = Fadd32(ptr_fml_Obuf, FFO_AVM_PRCNT, 
															(char*) &d_dflt_prtcn_percnt,0);
  if ( i_returncode == -1 )
  {
    if( Ferror32 == FNOSPACE )
    {
      i_counter++;

			/* Ver 1.7 Starts */

      /*ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
                            i_counter * MIN_FML_BUF_LEN ); */

				ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
                       (Fsizeof32( ptr_fml_Obuf ) +(i_counter *MIN_FML_BUF_LEN)));
			/* Ver 1.7 Ends */
				

      if ( ptr_fml_Obuf == NULL )
      {
				fn_errlog( c_ServiceName, "S31240", TPMSG, c_err_msg  );
				tpfree ( ( char * ) ptr_fml_Obuf );

				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

			i_returncode = Fadd32(ptr_fml_Obuf, FFO_AVM_PRCNT, 
															(char*) &d_dflt_prtcn_percnt,0);

      if ( i_returncode == -1 )
      {
				fn_errlog( c_ServiceName, "S31245", FMLMSG, c_err_msg  );
				tpfree ( ( char * ) ptr_fml_Obuf );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    else
    {
			fn_errlog( c_ServiceName, "S31250", FMLMSG, c_err_msg  );
			tpfree ( ( char * ) ptr_fml_Obuf );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	}

	/* 1.3 - Addition for fno buy n sell allwd flag */

  if(fn_get_trdng_dtls(st_usr_dtls.c_user_id, c_mtch_accnt_no, &c_trd_dtls, prd) == -1)	/* Ver 1.5 : Adding User_id as 1st parameter	*/
	{
  	fn_userlog(c_ServiceName, "Error in Function Call");
  	fn_errlog(c_ServiceName, "S31255", FMLMSG, c_err_msg);
  	tpfree((char *)ptr_fml_Obuf);
  	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
	}
	else
	{
  	i_err[0] = Fadd32(ptr_fml_Obuf, FFO_STATUS_FLG, (char *)&c_trd_dtls, 0);
  		if(i_err[0] == -1)
  		{
    		fn_errlog(c_ServiceName, "S31260", TPMSG, c_err_msg);
    		tpfree((char *) ptr_fml_Obuf);
    		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    		tpreturn(TPFAIL , ERR_BFR , (char *)ptr_fml_Ibuf , 0 ,0);
  		}
	}
 
	/*1.3 ends */

	/* 1.4 start - Get the currect pipe present in for match account*/
	/** Added else part for NO_DATA_FOUND   **/

	EXEC SQL 
			 SELECT  pcm_crnt_pipe_id
			 INTO    :c_pcm_crnt_pipe_id
			 FROM    pcm_pipe_clm_map
			 WHERE   pcm_xchng_cd         = 'NFO'
			 AND   	 pcm_clm_mtch_accnt   = :c_mtch_accnt_no;

	if ((SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ))
	{
		fn_errlog( c_ServiceName, "S31265", SQLMSG, c_err_msg  );
		tpfree ( ( char * ) ptr_fml_Obuf );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	else if ( SQLCODE == NO_DATA_FOUND)
	{
		strcpy(c_pcm_crnt_pipe_id,"00");
	}


	if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.6 : Debug level Change  */
		fn_userlog(c_ServiceName, "PIPE ID :%s:",c_pcm_crnt_pipe_id);
	}

	i_err[0] = Fadd32(ptr_fml_Obuf, FFO_PIPE_ID, (char *)c_pcm_crnt_pipe_id, 0);

	if(i_err[0] == -1)
	{
		fn_errlog(c_ServiceName, "S31270", TPMSG, c_err_msg);
		tpfree((char *) ptr_fml_Obuf);
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
		tpreturn(TPFAIL , ERR_BFR , (char *)ptr_fml_Ibuf , 0 ,0);
	}

	/* 1.4 ends */

	/***  Ver 2.0 Starts  ***/

  i_err[0] = Fadd32(ptr_fml_Obuf,FFO_FILTER , (char *)c_fno_ftrs, 0);       /***  FNO Features Allowed Flag ***/

  if(i_err[0] == -1)
  {
    fn_errlog(c_ServiceName, "S31275", TPMSG, c_err_msg);
    tpfree((char *) ptr_fml_Obuf);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpreturn(TPFAIL , ERR_BFR , (char *)ptr_fml_Ibuf , 0 ,0);
  }

  /***  Ver 2.0 Ends  ***/

	/***  Ver 2.3 Starts  ***/


  i_ferr[0] = Fadd32(ptr_fml_Obuf,FFO_SOURCE_FLG, (char *)&c_spn_alwd, 0);

  if(i_ferr[0] == -1)
  {
    fn_errlog(c_ServiceName, "S31280", TPMSG, c_err_msg);
    tpfree((char *) ptr_fml_Obuf);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpreturn(TPFAIL , ERR_BFR , (char *)ptr_fml_Ibuf , 0 ,0);
  }

  /***  Ver 2.3 Ends  ***/

	/***  Ver 2.4 Starts  ***/

	fn_userlog(c_ServiceName,"BSE Span Allowed Flag Is :%c:",c_bsespn_alwd);

  i_ferr[1] = Fadd32(ptr_fml_Obuf,FFO_SPL_FLG, (char *)&c_bsespn_alwd, 0);

  if(i_ferr[1] == -1)
  {
    fn_errlog(c_ServiceName, "S31285", TPMSG, c_err_msg);
    tpfree((char *) ptr_fml_Obuf);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpreturn(TPFAIL , ERR_BFR , (char *)ptr_fml_Ibuf , 0 ,0);
  }

  /***  Ver 2.4 Ends  ***/
  /** Ver 2.8 starts **/
  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Brokerage comput Flag Is :%c:",sql_clm_brkr_cmpt_flg); /* VER TOL : TUX o LINUX -- Chnaged format specifier to '%c' from '%s' and removed '.arr' (Ravindra) */
    fn_userlog(c_ServiceName,"sql_clm_opt_schm_cd   Is :%s:",sql_clm_opt_schm_cd.arr);
    fn_userlog(c_ServiceName,"Option 20 schm flag Is :%s:",sql_clm_op20_flg.arr);			/** Ver 3.6 **/
    fn_userlog(c_ServiceName,"Option 20 schm Code Is :%s:",sql_clm_op20_schm_cd.arr);	/** Ver 3.6 **/
    fn_userlog(c_ServiceName,"I-Gain FP Flag        Is :%s:",sql_clm_igain_fp_flg.arr);/* Ver3.2 */
    fn_userlog(c_ServiceName,"I-Gain OP Flag        Is :%s:",sql_clm_igain_op_flg.arr);/* Ver3.2 */
    fn_userlog(c_ServiceName,"sql_clm_igain_fp_schm_cd   Is :%s:",sql_clm_igain_fp_schm_cd.arr);/*V 3.2*/
    fn_userlog(c_ServiceName,"sql_clm_igain_op_schm_cd   Is :%s:",sql_clm_igain_fp_schm_cd.arr);/*V 3.2*/
  }
  if(Fadd32(ptr_fml_Obuf,FFO_CLNT_TYP, (char *)&sql_clm_brkr_cmpt_flg, 0) == -1 ) /* VER TOL : TUX on LINUX -- Added '&' and remove '.arr' (Ravindra) */
  {
    fn_errlog(c_ServiceName, "S31290", TPMSG, c_err_msg);
    tpfree((char *) ptr_fml_Obuf);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpreturn(TPFAIL , ERR_BFR , (char *)ptr_fml_Ibuf , 0 ,0);
  }
  if(Fadd32(ptr_fml_Obuf,FFO_STCK_CD,(char *)sql_clm_opt_schm_cd.arr,0) == -1 )
  {
    fn_errlog(c_ServiceName, "S31295", TPMSG, c_err_msg);
    tpfree((char *) ptr_fml_Obuf);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpreturn(TPFAIL , ERR_BFR , (char *)ptr_fml_Ibuf , 0 ,0);
  }
  /*** Ver 2.8 Ends ***/
	/** Ver 3.6 starts **/
  if(Fadd32(ptr_fml_Obuf,FFO_REQ_TYP, (char *)sql_clm_op20_flg.arr, 0) == -1 )
  {
    fn_errlog(c_ServiceName, "S31300", TPMSG, c_err_msg);
    tpfree((char *) ptr_fml_Obuf);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpreturn(TPFAIL , ERR_BFR , (char *)ptr_fml_Ibuf , 0 ,0);
  }
  if(Fadd32(ptr_fml_Obuf,FFO_ACK_NMBR,(char *)sql_clm_op20_schm_cd.arr,0) == -1 )
  {
    fn_errlog(c_ServiceName, "S31305", TPMSG, c_err_msg);
    tpfree((char *) ptr_fml_Obuf);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpreturn(TPFAIL , ERR_BFR , (char *)ptr_fml_Ibuf , 0 ,0);
  }
  /*** Ver 3.6 Ends ***/
  /** Ver 3.2 starts **/

  if(Fadd32(ptr_fml_Obuf,FFO_MOD_CAN_FLG, (char *)sql_clm_igain_fp_flg.arr, 0) == -1 )
  {
    fn_errlog(c_ServiceName, "S31310", TPMSG, c_err_msg);
    tpfree((char *) ptr_fml_Obuf);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpreturn(TPFAIL , ERR_BFR , (char *)ptr_fml_Ibuf , 0 ,0);
  }
  if(Fadd32(ptr_fml_Obuf,FFO_OPTION_TYP,(char *)sql_clm_igain_fp_schm_cd.arr,0) == -1 )
  {
    fn_errlog(c_ServiceName, "S31315", TPMSG, c_err_msg);
    tpfree((char *) ptr_fml_Obuf);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpreturn(TPFAIL , ERR_BFR , (char *)ptr_fml_Ibuf , 0 ,0);
  }
  if(Fadd32(ptr_fml_Obuf,FFO_IS_FLG, (char *)sql_clm_igain_op_flg.arr, 0) == -1 )
  {
    fn_errlog(c_ServiceName, "S31320", TPMSG, c_err_msg);
    tpfree((char *) ptr_fml_Obuf);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpreturn(TPFAIL , ERR_BFR , (char *)ptr_fml_Ibuf , 0 ,0);
  }
  if(Fadd32(ptr_fml_Obuf,FFO_PSTN_FLG,(char *)sql_clm_igain_op_schm_cd.arr,0) == -1 )
  {
    fn_errlog(c_ServiceName, "S31325", TPMSG, c_err_msg);
    tpfree((char *) ptr_fml_Obuf);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpreturn(TPFAIL , ERR_BFR , (char *)ptr_fml_Ibuf , 0 ,0);
  }

  /*** Ver 3.2 Ends ***/

	if( DEBUG_MSG_LVL_3 )	
	{          /*  Ver 1.6 : Debug level Change  */
		fn_userlog(c_ServiceName, "Returning successfully");
	}

	tpreturn( TPSUCCESS, SUCC_BFR, (char *)ptr_fml_Obuf, 0 , 0 );
}

/****** Commented below fn of Ver 2.1 for changes in Ver 2.2  ****************************/
/************************************Ver 2.1*******START***********************/

/******************************************************************************
double fn_get_total_allocation(i_mtch_acnt_id,i_usr_id , i_type)
EXEC SQL BEGIN DECLARE SECTION;
char   * i_mtch_acnt_id;
char * i_usr_id;
char i_type;
EXEC SQL END   DECLARE SECTION;
{

	EXEC SQL BEGIN DECLARE SECTION;
	
	double    d_l_plg_amount   = 0.00;
	double    d_l_eq_amount    = 0.00;
	double    d_l_fo_amount    = 0.00;
	double    d_l_cd_amount    = 0.00;
	double    d_l_mio_amount   = 0.00;
	double    d_l_total_amount = 0.00;
	char 			c_l_fno_chg_flag;
	
	char 			c_l_dp_id[9]={0};
	char 			c_l_dp_clnt_id[9]={0};
	
	EXEC SQL END   DECLARE SECTION;

	DEFLOG5
	fn_userlog(c_ServiceName, "Allocation for |%s|",i_mtch_acnt_id );
	
	EXEC SQL
		SELECT
		NVL ( SUM (  (NVL(dbd_tot_qty,0) + NVL(dbd_plg_req_qty,0) + NVL(dbd_tifp_qty,0) ) * NVL( ltq_cls_prc, 0) ) , 0) 
		INTO :d_l_plg_amount
		from dbd_dp_blck_dtls, ltq_trd_qt
		WHERE
		dbd_clm_mtch_accnt   = :i_mtch_acnt_id
		AND dbd_stck_cd      = ltq_stck_cd 
		AND ltq_xchng_cd     = 'BSE';

	if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_userlog (c_ServiceName," Failed in fetching  ");
    fn_errlog ( c_ServiceName, "S31330", SQLMSG, c_err_msg  );
    c_g_error_code='P';
    return (-1);
  }
  
  DEFLOG5
  fn_userlog (c_ServiceName," PLG %lf ",d_l_plg_amount  );
			
	EXEC SQL
		SELECT NVL(clm_allctd_amt,0) +  NVL(clm_blk_trd_amt,0) 
		INTO  :d_l_eq_amount
		FROM clm_clnt_mstr
		WHERE CLM_MTCH_ACCNT = :i_mtch_acnt_id;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_userlog (c_ServiceName," Failed in fetching  ");
    fn_errlog ( c_ServiceName, "S31335", SQLMSG, c_err_msg  );
    c_g_error_code='E';
    return (-1);
  }
  
  DEFLOG5
  fn_userlog (c_ServiceName," EQ  %lf ",d_l_eq_amount   );
	  
	EXEC SQL
		SELECT ( NVL(fab_alctd_amt,0) + NVL(fab_bft_amt,0) ) / 100 
		INTO  :d_l_fo_amount
		FROM fab_fo_alc_bft_smry
		WHERE FAB_CLM_MTCH_ACCNT = :i_mtch_acnt_id ;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_userlog (c_ServiceName," Failed in fetching  FAB ");
    fn_errlog ( c_ServiceName, "S31340", SQLMSG, c_err_msg  );
    c_g_error_code='F';
    return (-1);
  }
  
  DEFLOG5
  fn_userlog (c_ServiceName," FNO %lf ",d_l_fo_amount   );
	
	EXEC SQL
	SELECT NVL(cab_alctd_amt,0) + NVL( cab_bft_amt, 0) 
	INTO  :d_l_cd_amount
	FROM   cab_cdx_alc_bft_smry
	WHERE  cab_clm_mtch_accnt =  :i_mtch_acnt_id ;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_userlog (c_ServiceName," Failed in fetching  ");
    fn_errlog ( c_ServiceName, "S31345", SQLMSG, c_err_msg  );
    c_g_error_code='C';
    return (-1);
  }
  
  DEFLOG5
	fn_userlog (c_ServiceName," CDX %lf ",d_l_cd_amount   );
	 	  
	EXEC SQL
		SELECT NVL(CLM_MF_ALLCTD_AMT,0)
		INTO  :d_l_mio_amount
		FROM clm_clnt_mstr
		WHERE CLM_MTCH_ACCNT = :i_mtch_acnt_id;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_userlog (c_ServiceName," Failed in fetching ");
    fn_errlog ( c_ServiceName, "S31350", SQLMSG, c_err_msg  );
    c_g_error_code='M';
    return (-1);
  }
  
  DEFLOG5
  fn_userlog (c_ServiceName," MIO %lf ",d_l_mio_amount  ); 


	d_l_total_amount=d_l_plg_amount + d_l_eq_amount + d_l_fo_amount + d_l_cd_amount + d_l_mio_amount;
	c_l_fno_chg_flag=(d_l_total_amount < 10000 ) ? 'X' : '*'; 

	d_g_plg_amount = d_g_plg_amount + d_l_plg_amount;
	d_g_eq_amount  = d_g_eq_amount  + d_l_eq_amount ;
	d_g_fo_amount  = d_g_fo_amount  + d_l_fo_amount ;
	d_g_cd_amount  = d_g_cd_amount  + d_l_cd_amount ;
	d_g_mio_amount = d_g_mio_amount + d_l_mio_amount;
	
	d_g_total_amount = d_g_total_amount + d_l_total_amount;

	DEFLOG5
  fn_userlog (c_ServiceName," TOTAL %lf ",d_l_total_amount  );

  
  EXEC SQL
		SELECT NVL(dbd_dp_id,'NA') , NVL(dbd_dp_clnt_id,'NA')
		INTO   :c_l_dp_id, :c_l_dp_clnt_id
		FROM   dbd_dp_blck_dtls
		WHERE  dbd_clm_mtch_accnt = :i_mtch_acnt_id
		AND rownum < 2;

  if ( ( SQLCODE != 0 ) &&  ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_userlog (c_ServiceName," Failed in fetching ");
    fn_errlog ( c_ServiceName, "S31355", SQLMSG, c_err_msg  );
    c_g_error_code='T';
    return (-1);
  }
  
  if (SQLCODE == NO_DATA_FOUND)
  {
  	strcpy(c_l_dp_id,"NA");
  	strcpy(c_l_dp_clnt_id,"NA");
	}


	DEFLOG5
  fn_userlog (c_ServiceName," DP %s  DP CLNT %s ",c_l_dp_id,  c_l_dp_clnt_id );	
	DEFLOG3  
  fn_userlog (c_ServiceName,"||%s|| \n |SHR:%lf|EQ:%lf|FO:%lf|CR:%lf|MF:%lf| = |TOTAL:%lf| |DP-%s| |DP_CLNT-%s|",
  						i_mtch_acnt_id ,
							d_l_plg_amount , d_l_eq_amount , 
							d_l_fo_amount  , d_l_cd_amount , 
							d_l_mio_amount , d_l_total_amount ,
							c_l_dp_id			 , c_l_dp_clnt_id );
	  
	return (d_l_total_amount);

}



double fn_get_NRI_total_allocation(i_mtch_acnt_id)
EXEC SQL BEGIN DECLARE SECTION;
char   * i_mtch_acnt_id;
EXEC SQL END   DECLARE SECTION;
{

	EXEC SQL BEGIN DECLARE SECTION;
	
	char   c_l_l_mtch_acnt_id[4][11]={0};
	double d_alloc1=0.00F;
	double d_alloc2=0.00F;
	double d_alloc3=0.00F;
	double d_alloc4=0.00F;
	char   c_l_l_user_id[14]={0};
	
	EXEC SQL END   DECLARE SECTION;

	
	EXEC SQL
		SELECT UAC_USR_ID
			INTO  :c_l_l_user_id
		FROM UAC_USR_ACCNTS
		WHERE UAC_CLM_MTCH_ACCNT = :i_mtch_acnt_id;
  
  
	if ( SQLCODE != 0 )
  {
    fn_userlog (c_ServiceName," Failed in fetching User Id ");
    fn_errlog ( c_ServiceName, "S31360", SQLMSG, c_err_msg  );
    c_g_error_code='U';
    return (-1);
  }
  
  SQLCODE=0;
  
  rtrim(c_l_l_user_id);
	
	EXEC SQL
		SELECT UAC_CLM_MTCH_ACCNT 
		INTO   :c_l_l_mtch_acnt_id
		FROM   UAC_USR_ACCNTS
		WHERE
		UAC_USR_ID = TRIM(:c_l_l_user_id);
	
  
  if ( ( SQLCODE != 0 ) &&   ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_userlog (c_ServiceName," Failed in fetching NRI Matches for |%s|",c_l_l_user_id);
    fn_errlog ( c_ServiceName, "S31365", SQLMSG, c_err_msg  );
    c_g_error_code='R';
    return (-1);
  }
  
  
  DEFLOG5     
	fn_userlog (c_ServiceName,"NRI MATCH |%s|%s|%s|%s|",
						c_l_l_mtch_acnt_id[0],c_l_l_mtch_acnt_id[1],
						c_l_l_mtch_acnt_id[2],c_l_l_mtch_acnt_id[3]);
						
  if ( strcmp(c_l_l_mtch_acnt_id[0],"") != 0 )
  		d_alloc1=fn_get_total_allocation(c_l_l_mtch_acnt_id[0],c_l_l_user_id,'R');
  
  if ( strcmp(c_l_l_mtch_acnt_id[1],"") != 0 )
  		d_alloc2=fn_get_total_allocation(c_l_l_mtch_acnt_id[1],c_l_l_user_id,'R');
  		
  if ( strcmp(c_l_l_mtch_acnt_id[2],"") != 0 )
			d_alloc3=fn_get_total_allocation(c_l_l_mtch_acnt_id[2],c_l_l_user_id,'R');
			
  if ( strcmp(c_l_l_mtch_acnt_id[3],"") != 0 )
			d_alloc4=fn_get_total_allocation(c_l_l_mtch_acnt_id[3],c_l_l_user_id,'R');


	DEFLOG3  
  fn_userlog (c_ServiceName,"||NRI:%s|| \n |SHR:%lf|EQ:%lf|FO:%lf|CR:%lf|MF:%lf| = |TOTAL:%lf|",
  						c_l_l_user_id ,
							d_g_plg_amount , d_g_eq_amount , 
							d_g_fo_amount  , d_g_cd_amount , 
							d_g_mio_amount , d_g_total_amount );
							
	return (d_alloc1+d_alloc2+d_alloc3+d_alloc4);

}

***************************************************/
/************************************Ver 2.1******END***********************/
/**********  Commnted function of Ver 2.1 for changes of Ver 2.2 Ends ****************/

