/******************************************************************************/
/*  Program           : SFO_OPRTFL_DTLS                                       */
/*                                                                            */
/*  Input             : FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_ROUT_CRT                                          */
/*                                                                            */
/*  Output            : vw_tradebook                                          */
/*                                                                            */
/*  Description       : This service displays the portfolio details for       */
/*                      each options contract position                        */
/*                                                                            */
/*                                                                            */
/*  Log               :                                                       */
/*                                                                            */
/******************************************************************************/
/* 16-Feb-2002     	Ver 1.0        	S.Swaminathan     Release 1.0             */
/* 02-Jan-2007		 	Ver 1.1        	Abhishek 																	*/
/* 02-Mar-2007			Ver 1.2					Ranjit																		*/		
/* 20-Dec-2007			Ver 1.3					Sushil																		*/
/* 27-Jan-2009			Ver 1.4					Prakash																		*/
/* 21-Sep-2013			Ver 1.5				  Bhushan Sonwane														*/
/* 20-Nov-2015			Ver 1.6				  Sachin Birje   														*/
/* 22-Jun-2017			Ver 1.7				  Sandip Tambe   														*/
/* 26-Jan-2018      Ver 1.8         Afzal K.																	*/ 
/* 22-Apr-2019			Ver 1.9					Bhushan Harekar														*/
/* 22-JUN-2021			Ver 2.0					SUCHITA DABIR  														*/
/******************************************************************************/
/* Ver 1.1        DL Optimization																							*/
/* Ver 1.3				AIX Migration																								*/
/* Ver 1.4				CRCSN25616 ( Portfolio Changes )                            */
/* Ver 1.5				Changes For OptionPlus																			*/
/* Ver 1.6				Changes For OptionPlus conversion   												*/
/* Ver 1.7				Changes For GST                     												*/
/* Ver 1.8        DB Hits Reduction 																					*/
/* Ver 1.9				Optimization																								*/
/* Ver 2.0 				CR_ISEC04_132410 changes																							*/
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fml_def.h>
#include <fo_view_def.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fo.h>
#include <fn_ddr.h>
#include <fn_log.h>             /*  Ver 1.3 : Added   */
#include <fn_session.h>         /*  Ver 1.3 : Added   */
#include <fn_read_debug_lvl.h>  /*  Ver 1.3 : Added   */

void SFO_OPRTFL_DTLS( TPSVCINFO *rqst )
{
  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;
  FBFR32 *ptr_fml_Tempbuf;

  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
  varchar c_rmrks[257];     /** Ver 1.6 **/
  int i_returncode;

	int i_counter;
	/**int rec_cnt = 0;    *** V 1.1 ***/		/**commented in ver 1.2 **/
	/**int ret_val;					*** V 1.1 **/		/**commented in ver 1.2 **/
	double d_value	= 0.00;	/******** V 1.2 ************/

	/* FLDID32 fieldid1[18];    (commented in Ver 1.4) ******** V 1.1 *************/
  FLDID32 fieldid1[25];       /* Ver 1.4 */  /*** Changed from 24 to 25 Ver 1.6 ***/
	long l_buff_len = 0;        /* Ver 1.4 */

  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_usr_prfl st_usr_prfl;
		struct vw_contract st_contract;
		struct vw_tradebook st_tradebook;
  EXEC SQL END DECLARE SECTION;

	struct vw_err_msg st_err_msg;

	st_tradebook.C_c_dp_id = 0;
	st_tradebook.C_c_bnk_accnt_nmbr = 0;
  MEMSET(c_rmrks); /** Ver 1.6 **/

  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.3 : Added   */

	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *)&st_usr_prfl,
                           "vw_usr_prfl" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *)&st_contract,
                           "vw_contract" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

	i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl,
                                             &st_err_msg ) ;

  if ( i_returncode == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.3 : Debug level Change  */
  fn_userlog ( c_ServiceName, "c_cln_mtch_accnt:%s:", 
																				st_usr_prfl.c_cln_mtch_accnt );
  fn_userlog ( c_ServiceName, "c_xchng_cd**:%s:", st_contract.c_xchng_cd );
  fn_userlog ( c_ServiceName, "c_prd_typ   :%c:", st_contract.c_prd_typ );
  fn_userlog ( c_ServiceName, "c_undrlyng  :%s:", st_contract.c_undrlyng );
  fn_userlog ( c_ServiceName, "c_expiry_dt :%s:", st_contract.c_expry_dt );
  fn_userlog ( c_ServiceName, "c_exrc_typ  :%c:", st_contract.c_exrc_typ );
  fn_userlog ( c_ServiceName, "c_opt_typ  :%c:", st_contract.c_opt_typ );
  fn_userlog ( c_ServiceName, "l_strike_prc :%ld:", st_contract.l_strike_prc );
}

	EXEC SQL
		DECLARE cur_oprtfl CURSOR FOR	
		SELECT	ftd_xchng_cd,
						ftd_prdct_typ,
						ftd_indstk,
						ftd_undrlyng,
						ftd_expry_dt,
						ftd_exer_typ,
						ftd_opt_typ,
						ftd_strk_prc,
						to_char( ftd_trd_dt, 'DD-Mon-YYYY hh24:mi:ss' ),
						ftd_trd_flw,
            ftd_eba_trd_ref,
						ftd_exctd_qty,
						ftd_exctd_rt,
						NVL ((ftd_frs_brkg + ftd_cvr_brkg), 0),
          /* Ver 1.4 starts */
				    NVL( ftd_brkg, 0 ), 
				    NVL( ftd_tran_chrg, 0 ), 
				    NVL( ftd_stamp_duty, 0 ), 
			 	    NVL( ftd_sebi_tt, 0 ), 
				    NVL( ftd_stt, 0 ), 
				    NVL( ftd_src_tx, 0 )+nvl(FTD_BRKRG_IGST,0)+nvl(FTD_BRKRG_CGST,0)+nvl(FTD_BRKRG_SGST,0)+nvl(FTD_BRKRG_UGST,0), 
          /* Ver 1.4 ends */   /*** Ver 1.7 GST columns added **/
            DECODE(ftd_prdct_typ||ftd_fut_conv_flg,'OQ','Converted Option','IQ','Converted To Option','ON','Option','IN','OptionPLUS','Option')  /*** Ver 1.6 ***/ 
		FROM		ftd_fo_trd_dtls
		WHERE		ftd_clm_mtch_accnt	= :st_usr_prfl.c_cln_mtch_accnt
		AND			ftd_xchng_cd		= :st_contract.c_xchng_cd
		/*** AND			ftd_prdct_typ		= :st_contract.c_prd_typ     *** Commented in Ver 1.5 ***/
		AND     ftd_prdct_typ   in ('O','I')											/*** Added OptionPlus in Ver 1.5 ***/ 
		AND			ftd_undrlyng		= :st_contract.c_undrlyng
		AND			ftd_expry_dt		= :st_contract.c_expry_dt
		AND			ftd_exer_typ		= :st_contract.c_exrc_typ
		AND			ftd_opt_typ			= :st_contract.c_opt_typ
		AND			ftd_strk_prc		= :st_contract.l_strike_prc
		UNION ALL
		SELECT	ftd_xchng_cd,
            ftd_prdct_typ,
            ftd_indstk,
            ftd_undrlyng,
            ftd_expry_dt,
            ftd_exer_typ,
            ftd_opt_typ,
            ftd_strk_prc,
						to_char( ftd_trd_dt, 'DD-Mon-YYYY hh24:mi:ss' ),
            ftd_trd_flw,
						ftd_eba_trd_ref,
            ftd_exctd_qty,
            ftd_exctd_rt,
            NVL ((ftd_frs_brkg + ftd_cvr_brkg), 0),
          /* Ver 1.4 starts */
				    NVL( ftd_brkg, 0 ), 
				    NVL( ftd_tran_chrg, 0 ), 
				    NVL( ftd_stamp_duty, 0 ), 
			 	    NVL( ftd_sebi_tt, 0 ), 
				    NVL( ftd_stt, 0 ), 
				    NVL( ftd_src_tx, 0 )+nvl(FTD_BRKRG_IGST,0)+nvl(FTD_BRKRG_CGST,0)+nvl(FTD_BRKRG_SGST,0)+nvl(FTD_BRKRG_UGST,0), 
          /* Ver 1.4 ends */	/*** Ver 1.7 GST columns added **/
            DECODE(ftd_prdct_typ||ftd_fut_conv_flg,'OQ','Converted Option','IQ','Converted To Option','ON','Option','IN','OptionPLUS','Option') /*** Ver 1.6 ***/
    FROM		ftd_fo_trd_dtls_hstry
    WHERE		ftd_clm_mtch_accnt	= :st_usr_prfl.c_cln_mtch_accnt
    AND			ftd_xchng_cd		= :st_contract.c_xchng_cd
    /*** AND			ftd_prdct_typ		= :st_contract.c_prd_typ  		*** Commented in Ver 1.5 ***/
		AND			ftd_prdct_typ   in ('O','I')  										/*** Added OptionPlus in Ver 1.5 ***/
    AND			ftd_undrlyng		= :st_contract.c_undrlyng
    AND			ftd_expry_dt		= :st_contract.c_expry_dt
    AND			ftd_exer_typ		= :st_contract.c_exrc_typ
		AND			ftd_opt_typ			= :st_contract.c_opt_typ
		AND			ftd_strk_prc		= :st_contract.l_strike_prc
    UNION ALL
		SELECT	fco_xchng_cd,
            fco_prdct_typ,
            fco_indstk,
            fco_undrlyng,
            fco_expry_dt,
            fco_exer_typ,
            fco_opt_typ,
            fco_strk_prc,
						to_char( fco_cls_tm, 'DD-Mon-YYYY hh24:mi:ss' ),
            DECODE (fco_ordr_flw,'B','T','S','G','*'),
						'Close Out',
            fco_cls_qty,
            fco_cls_rt,
            0,
          /* Ver 1.4 starts */
				    0, 
				    0, 
				    0, 
				    0, 
				    0, 
				    0, 
          /* Ver 1.4 ends */
            DECODE(fco_dlvry_mode_flg,'Y','Delivry Stock Settled Options','N','Option Cash Settled','Close Out')   /** Ver 1.6 ***/ /** 2.0***/
		FROM		fco_fo_fclsout
		WHERE		fco_clm_mtch_accnt	= :st_usr_prfl.c_cln_mtch_accnt
		AND			fco_xchng_cd		= :st_contract.c_xchng_cd
		AND			fco_prdct_typ		= :st_contract.c_prd_typ
		AND			fco_undrlyng		= :st_contract.c_undrlyng
		AND			fco_expry_dt		= :st_contract.c_expry_dt
		AND			fco_exer_typ		= :st_contract.c_exrc_typ
		AND			fco_opt_typ			= :st_contract.c_opt_typ
		AND			fco_strk_prc		= :st_contract.l_strike_prc
		UNION ALL
		SELECT	fco_xchng_cd,
            fco_prdct_typ,
            fco_indstk,
            fco_undrlyng,
            fco_expry_dt,
            fco_exer_typ,
            fco_opt_typ,
            fco_strk_prc,
						to_char( fco_cls_tm, 'DD-Mon-YYYY hh24:mi:ss' ),
            DECODE (fco_ordr_flw,'B','T','S','G','*'),
						'Close Out',
            fco_cls_qty,
            fco_cls_rt,
            0,
          /* Ver 1.4 starts */
				    0, 
				    0, 
				    0, 
				    0, 
				    0, 
				    0, 
          /* Ver 1.4 ends */
            DECODE(fco_dlvry_mode_flg,'Y','Delivry Stock Settled Options','N','Option Cash Settled','Close Out')  /*** Ver 1.6 **//** ver 2.0 **/
		FROM		fco_fo_fclsout_hstry
		WHERE		fco_clm_mtch_accnt	= :st_usr_prfl.c_cln_mtch_accnt
		AND			fco_xchng_cd		= :st_contract.c_xchng_cd
		AND			fco_prdct_typ		= :st_contract.c_prd_typ
		AND			fco_undrlyng		= :st_contract.c_undrlyng
		AND			fco_expry_dt		= :st_contract.c_expry_dt
		AND			fco_exer_typ		= :st_contract.c_exrc_typ
		AND			fco_opt_typ			= :st_contract.c_opt_typ
		AND			fco_strk_prc		= :st_contract.l_strike_prc
		UNION ALL
		SELECT	fab_xchng_cd,
						fab_prdct_typ,
						fab_indstk,
						fab_undrlyng,
						fab_expry_dt,
						fab_exer_typ,
						fab_opt_typ,
						fab_strk_prc,
						to_char( fab_asgnd_dt, 'DD-Mon-YYYY hh24:mi:ss' ),
						'A',
            fab_asgn_rfrnc_no,
            fab_asgnd_qty,
		/******	( fab_sttlmnt_prc - fab_strk_prc ), *commented in ver 1.8****/
						ABS( fab_sttlmnt_prc - fab_strk_prc ) * -1,   /*** Added in Ver 1.8 ***/
						0,
          /* Ver 1.4 starts */
				    NVL( fab_brkrg_val, 0 ),
				    NVL( fab_tran_chrg, 0 ),
				    NVL( fab_stamp_duty, 0 ),
				    NVL( fab_sebi_tt, 0 ),
				    NVL( fab_stt, 0 ),
				    NVL( fab_src_tx , 0),
          /* Ver 1.4 ends */
            'Assignment'   /*** Ver 1.6 ***/ 
		FROM		fab_fo_asgnmnt_book
		WHERE		fab_clm_mtch_accnt	= :st_usr_prfl.c_cln_mtch_accnt
		AND			fab_xchng_cd		= :st_contract.c_xchng_cd
		AND			fab_prdct_typ		= :st_contract.c_prd_typ
		AND			fab_undrlyng		= :st_contract.c_undrlyng
		AND			fab_expry_dt		= :st_contract.c_expry_dt
		AND			fab_exer_typ		= :st_contract.c_exrc_typ
		AND			fab_opt_typ			= :st_contract.c_opt_typ
		AND			fab_strk_prc		= :st_contract.l_strike_prc
/**** Comment starts for ver 1.8 ***
		AND 		fab_opt_typ = 'P'
		UNION ALL
		SELECT	fab_xchng_cd,
						fab_prdct_typ,
						fab_indstk,
						fab_undrlyng,
						fab_expry_dt,
						fab_exer_typ,
						fab_opt_typ,
						fab_strk_prc,
						to_char( fab_asgnd_dt, 'DD-Mon-YYYY hh24:mi:ss' ),
						'A',
            fab_asgn_rfrnc_no,
            fab_asgnd_qty,
						(fab_strk_prc - fab_sttlmnt_prc),
						0,
          * Ver 1.4 starts *
				    NVL( fab_brkrg_val, 0 ),
				    NVL( fab_tran_chrg, 0 ),
				    NVL( fab_stamp_duty, 0 ),
				    NVL( fab_sebi_tt, 0 ),
				    NVL( fab_stt, 0 ),
				    NVL( fab_src_tx , 0),
          * Ver 1.4 ends *
            'Assignment'   *** Ver 1.6 ***
		FROM		fab_fo_asgnmnt_book
		WHERE		fab_clm_mtch_accnt	= :st_usr_prfl.c_cln_mtch_accnt
		AND			fab_xchng_cd		= :st_contract.c_xchng_cd
		AND			fab_prdct_typ		= :st_contract.c_prd_typ
		AND			fab_undrlyng		= :st_contract.c_undrlyng
		AND			fab_expry_dt		= :st_contract.c_expry_dt
		AND			fab_exer_typ		= :st_contract.c_exrc_typ
		AND			fab_opt_typ			= :st_contract.c_opt_typ
		AND			fab_strk_prc		= :st_contract.l_strike_prc
		AND 		fab_opt_typ = 'C'
  ***Comment ends for ver 1.8****/
		UNION ALL
		SELECT	fab_xchng_cd,
						fab_prdct_typ,
						fab_indstk,
						fab_undrlyng,
						fab_expry_dt,
						fab_exer_typ,
						fab_opt_typ,
						fab_strk_prc,
						to_char( fab_asgnd_dt, 'DD-Mon-YYYY hh24:mi:ss' ),
						'A',
            fab_asgn_rfrnc_no,
            fab_asgnd_qty,
				/**		( fab_sttlmnt_prc - fab_strk_prc ), **commented in ver 1.8***/
						ABS( fab_sttlmnt_prc - fab_strk_prc ) * -1, /*** Added in Ver 1.8 ***/
						0,
          /* Ver 1.4 starts */
				    NVL( fab_brkrg_val, 0 ),
				    NVL( fab_tran_chrg, 0 ),
				    NVL( fab_stamp_duty, 0 ),
				    NVL( fab_sebi_tt, 0 ),
				    NVL( fab_stt, 0 ),
				    NVL( fab_src_tx , 0),
          /* Ver 1.4 ends */
            'Assignment'   /*** Ver 1.6 ***/
		FROM		fab_fo_asgnmnt_book_hstry
		WHERE		fab_clm_mtch_accnt	= :st_usr_prfl.c_cln_mtch_accnt
		AND			fab_xchng_cd		= :st_contract.c_xchng_cd
		AND			fab_prdct_typ		= :st_contract.c_prd_typ
		AND			fab_undrlyng		= :st_contract.c_undrlyng
		AND			fab_expry_dt		= :st_contract.c_expry_dt
		AND			fab_exer_typ		= :st_contract.c_exrc_typ
		AND			fab_opt_typ			= :st_contract.c_opt_typ
		AND			fab_strk_prc		= :st_contract.l_strike_prc
/****comment starts for ver 1.8***
		AND 		fab_opt_typ = 'P'
		UNION ALL
		SELECT	fab_xchng_cd,
						fab_prdct_typ,
						fab_indstk,
						fab_undrlyng,
						fab_expry_dt,
						fab_exer_typ,
						fab_opt_typ,
						fab_strk_prc,
						to_char( fab_asgnd_dt, 'DD-Mon-YYYY hh24:mi:ss' ),
						'A',
            fab_asgn_rfrnc_no,
            fab_asgnd_qty,
						(fab_strk_prc - fab_sttlmnt_prc),
						0,
          * Ver 1.4 starts *
				    NVL( fab_brkrg_val, 0 ),
				    NVL( fab_tran_chrg, 0 ),
				    NVL( fab_stamp_duty, 0 ),
				    NVL( fab_sebi_tt, 0 ),
				    NVL( fab_stt, 0 ),
				    NVL( fab_src_tx , 0),
          * Ver 1.4 ends *
            'Assignment'   *** Ver 1.6 ***
		FROM		fab_fo_asgnmnt_book_hstry
		WHERE		fab_clm_mtch_accnt	= :st_usr_prfl.c_cln_mtch_accnt
		AND			fab_xchng_cd		= :st_contract.c_xchng_cd
		AND			fab_prdct_typ		= :st_contract.c_prd_typ
		AND			fab_undrlyng		= :st_contract.c_undrlyng
		AND			fab_expry_dt		= :st_contract.c_expry_dt
		AND			fab_exer_typ		= :st_contract.c_exrc_typ
		AND			fab_opt_typ			= :st_contract.c_opt_typ
		AND			fab_strk_prc		= :st_contract.l_strike_prc
		AND 		fab_opt_typ = 'C'
  ***Comment ends for ver 1.8****/
		UNION ALL
		SELECT	fec_xchng_cd,
						fec_prdct_typ,
						fec_indstk,
						fec_undrlyng,
						fec_expry_dt,
						fec_exer_typ,
						fec_opt_typ,
						fec_strk_prc,
						to_char( fec_exrc_dt, 'DD-Mon-YYYY hh24:mi:ss' ),
						'E',
            fec_exrc_rfrnc_no,
            fec_exrc_qty,
		/***				(fec_strk_prc - fec_curr_mkt_prc), ****commented in ver 1.8**/
						ABS( fec_strk_prc - fec_curr_mkt_prc ),  /*** Ver 1.8 ***/
						0,
          /* Ver 1.4 starts */
				    NVL( fec_brkg_val, 0 ),
				    NVL( fec_tran_chrg, 0 ),
				    NVL( fec_stamp_duty, 0 ),
				    NVL( fec_sebi_tt, 0 ),
				    NVL( fec_stt, 0 ),
				    NVL( fec_src_tx, 0 ),
          /* Ver 1.4 ends */
            'Exercise'   /*** Ver 1.6 ***/
		FROM		fec_fo_exrc_conf
		WHERE		fec_clm_mtch_accnt	= :st_usr_prfl.c_cln_mtch_accnt
		AND			fec_xchng_cd		= :st_contract.c_xchng_cd
		AND			fec_prdct_typ		= :st_contract.c_prd_typ
		AND			fec_undrlyng		= :st_contract.c_undrlyng
		AND			fec_expry_dt		= :st_contract.c_expry_dt
		AND			fec_exer_typ		= :st_contract.c_exrc_typ
		AND			fec_opt_typ			= :st_contract.c_opt_typ
		AND			fec_strk_prc		= :st_contract.l_strike_prc
 /****Commenmt starts for 1.8****
		AND 		fec_opt_typ 		= 'P'
		UNION ALL
		SELECT	fec_xchng_cd,
						fec_prdct_typ,
						fec_indstk,
						fec_undrlyng,
						fec_expry_dt,
						fec_exer_typ,
						fec_opt_typ,
						fec_strk_prc,
						to_char( fec_exrc_dt, 'DD-Mon-YYYY hh24:mi:ss' ),
						'E',
            fec_exrc_rfrnc_no,
            fec_exrc_qty,
						(fec_curr_mkt_prc - fec_strk_prc),
						0,
          * Ver 1.4 starts *
				    NVL( fec_brkg_val, 0 ),
				    NVL( fec_tran_chrg, 0 ),
				    NVL( fec_stamp_duty, 0 ),
				    NVL( fec_sebi_tt, 0 ),
				    NVL( fec_stt, 0 ),
				    NVL( fec_src_tx, 0 ),
          * Ver 1.4 ends *
            'Exercise'   *** Ver 1.6 ***
		FROM		fec_fo_exrc_conf
		WHERE		fec_clm_mtch_accnt	= :st_usr_prfl.c_cln_mtch_accnt
		AND			fec_xchng_cd		= :st_contract.c_xchng_cd
		AND			fec_prdct_typ		= :st_contract.c_prd_typ
		AND			fec_undrlyng		= :st_contract.c_undrlyng
		AND			fec_expry_dt		= :st_contract.c_expry_dt
		AND			fec_exer_typ		= :st_contract.c_exrc_typ
		AND			fec_opt_typ			= :st_contract.c_opt_typ
		AND			fec_strk_prc		= :st_contract.l_strike_prc
		AND 		fec_opt_typ 		= 'C'
     ***comment end for ver 1.8****/
		UNION ALL
		SELECT	fec_xchng_cd,
						fec_prdct_typ,
						fec_indstk,
						fec_undrlyng,
						fec_expry_dt,
						fec_exer_typ,
						fec_opt_typ,
						fec_strk_prc,
						to_char( fec_exrc_dt, 'DD-Mon-YYYY hh24:mi:ss' ),
						'E',
            fec_exrc_rfrnc_no,
            fec_exrc_qty,
						/*** (fec_strk_prc - fec_curr_mkt_prc), ***commented in ver 1.8***/
						ABS( fec_strk_prc - fec_curr_mkt_prc ), 	/*** Ver 1.8 ***/
						0,
          /* Ver 1.4 starts */
				    NVL( fec_brkg_val, 0 ),
				    NVL( fec_tran_chrg, 0 ),
				    NVL( fec_stamp_duty, 0 ),
				    NVL( fec_sebi_tt, 0 ),
				    NVL( fec_stt, 0 ),
				    NVL( fec_src_tx, 0 ),
          /* Ver 1.4 ends */
            'Exercise'   /*** Ver 1.6 ***/
		FROM		fec_fo_exrc_conf_hstry
		WHERE		fec_clm_mtch_accnt	= :st_usr_prfl.c_cln_mtch_accnt
		AND			fec_xchng_cd		= :st_contract.c_xchng_cd
		AND			fec_prdct_typ		= :st_contract.c_prd_typ
		AND			fec_undrlyng		= :st_contract.c_undrlyng
		AND			fec_expry_dt		= :st_contract.c_expry_dt
		AND			fec_exer_typ		= :st_contract.c_exrc_typ
		AND			fec_opt_typ			= :st_contract.c_opt_typ
		AND			fec_strk_prc		= :st_contract.l_strike_prc
/*** Comment starts for ver 1.8***
		AND 		fec_opt_typ 		= 'P'
		UNION ALL
		SELECT	fec_xchng_cd,
						fec_prdct_typ,
						fec_indstk,
						fec_undrlyng,
						fec_expry_dt,
						fec_exer_typ,
						fec_opt_typ,
						fec_strk_prc,
						to_char( fec_exrc_dt, 'DD-Mon-YYYY hh24:mi:ss' ),
						'E',
            fec_exrc_rfrnc_no,
            fec_exrc_qty,
						(fec_curr_mkt_prc - fec_strk_prc),
						0,
          * Ver 1.4 starts *
				    NVL( fec_brkg_val, 0 ),
				    NVL( fec_tran_chrg, 0 ),
				    NVL( fec_stamp_duty, 0 ),
				    NVL( fec_sebi_tt, 0 ),
				    NVL( fec_stt, 0 ),
				    NVL( fec_src_tx, 0 ),
          * Ver 1.4 ends *
            'Exercise'   *** Ver 1.6 ***
		FROM		fec_fo_exrc_conf_hstry
		WHERE		fec_clm_mtch_accnt	= :st_usr_prfl.c_cln_mtch_accnt
		AND			fec_xchng_cd		= :st_contract.c_xchng_cd
		AND			fec_prdct_typ		= :st_contract.c_prd_typ
		AND			fec_undrlyng		= :st_contract.c_undrlyng
		AND			fec_expry_dt		= :st_contract.c_expry_dt
		AND			fec_exer_typ		= :st_contract.c_exrc_typ
		AND			fec_opt_typ			= :st_contract.c_opt_typ
		AND			fec_strk_prc		= :st_contract.l_strike_prc
		AND 		fec_opt_typ 		= 'C'
    **comment ends for ver  1.8***/  
		ORDER BY 9; /*** Ordered by the Transaction Time / Trade Date ***/

	EXEC SQL
		OPEN cur_oprtfl;
	if( SQLCODE != 0 )
	{	
		fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}

	/*** Ver 1.8 Starts ***/

	l_buff_len  =   sizeof( struct vw_tradebook ) +        
                  sizeof( d_value ) +
                  300;	

	/*** Ver 1.8 Ends ***/
	
	/** ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN ); ** Commented in Ver 1.8 **/

	ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, l_buff_len * 5 );  /*** Ver 1.8 ***/

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31020", TPMSG, c_err_msg  );
		EXEC SQL
    	CLOSE cur_oprtfl;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.3 : Debug level Change  */
		fn_userlog( c_ServiceName, "After Opening cursor" );
	}	

	i_counter = 1;
  /*** 
	l_buff_len  =   sizeof( struct vw_tradebook ) +                 * Ver 1.4 *
                  sizeof( d_value ) +
                  300; 
	*** Commented in Ver 1.8 ***/

	if( DEBUG_MSG_LVL_3 ) {
		fn_userlog( c_ServiceName, "l_buff_len :%ld:", l_buff_len);
	}

	while (1)
  {
    MEMSET(c_rmrks);
		EXEC SQL
			FETCH cur_oprtfl
			INTO	:st_tradebook.c_xchng_cd,
						:st_tradebook.c_prd_typ,
						:st_tradebook.c_ctgry_indstk,
						:st_tradebook.c_undrlyng,
						:st_tradebook.c_expry_dt,
						:st_tradebook.c_exrc_typ,
						:st_tradebook.c_opt_typ,
						:st_tradebook.l_strike_prc,
						:st_tradebook.c_trd_dt,
						:st_tradebook.c_trd_flw,
						:st_tradebook.c_trd_rfrnc,
						:st_tradebook.l_exctd_qty,
						:st_tradebook.l_exctd_rt,
						:st_tradebook.l_frs_brkg_val,
           /* Added in Ver 1.4 */
						:st_tradebook.l_brkg_val,
						:st_tradebook.l_trn_chrg,
						:st_tradebook.l_stmp_dty,
						:st_tradebook.l_sebi_tt,
						:st_tradebook.l_stt,
						:st_tradebook.l_src_tx ,
            :c_rmrks ;   /** Ver 1.6 **/
           /* Ver 1.4 Ends */

		if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  	{
    	fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	EXEC SQL
      	CLOSE cur_oprtfl;
    	tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  	}

		if( SQLCODE == NO_DATA_FOUND )
		{
			break;
		}
	if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.3 : Debug level Change  */
		fn_userlog( c_ServiceName, "After Fetching cursor" );
	}	

		/**rec_cnt++;**/		/**commented in ver 1.2 **/

  /* Ver 1.4 Reallocation handling */
  if ( Fneeded32( 1, l_buff_len ) > Funused32( ptr_fml_Obuf ) )
  {
    i_counter++;
    if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog( c_ServiceName," SPACE NEEDED :%ld: & UNUSED SPACE :%ld:", 
                                     Fneeded32( 1, l_buff_len ), Funused32( ptr_fml_Obuf ) );
    }

    /** ptr_fml_Tempbuf = (FBFR32 *)tprealloc((char *)ptr_fml_Obuf, i_counter * l_buff_len ); ** Commented in Ver 1.8 **/
    ptr_fml_Tempbuf = (FBFR32 *)tprealloc((char *)ptr_fml_Obuf, Fsizeof32(ptr_fml_Obuf) + i_counter * l_buff_len * 5);		/*** Ver 1.8 ***/

		if( DEBUG_MSG_LVL_3 )
		{
    	fn_userlog( c_ServiceName," Isec : tprealloc ends " ); /*** Ver 1.8 ***/  
 		}

    if ( ptr_fml_Tempbuf == NULL )
    {
       fn_errlog( c_ServiceName, "S31030", TPMSG, c_err_msg  );
       EXEC SQL
           CLOSE cur_oprtfl;
       tpfree((char *)ptr_fml_Obuf);
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    } 
    ptr_fml_Obuf = ptr_fml_Tempbuf;
    ptr_fml_Tempbuf = (FBFR32 *)NULL;
    if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog( c_ServiceName," SPACE NEEDED :%ld: & UNUSED SPACE :%ld:", 
                                     Fneeded32( 1, l_buff_len ), Funused32( ptr_fml_Obuf ) );
    }
  }
  /* Ver 1.4 Ends */

	/*** Commented in Ver 1.9 ***

		i_returncode = Fvstof32( ptr_fml_Obuf, (char *)&st_tradebook,
                              FCONCAT, "vw_tradebook" );

    if ( i_returncode == -1 )
    {
     *  if( Ferror32 == FNOSPACE )
      {
        i_counter++;
        ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
                            i_counter * MIN_FML_BUF_LEN );

        if ( ptr_fml_Obuf == NULL )
        {
          fn_errlog( c_ServiceName, "S31035", TPMSG, c_err_msg  );
					EXEC SQL
          	CLOSE cur_oprtfl;
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        i_returncode = Fvstof32( ptr_fml_Obuf, (char *)&st_tradebook,
                                 FCONCAT, "vw_tradebook" );

        if ( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31040", FMLMSG, c_err_msg  );
					EXEC SQL
          	CLOSE cur_oprtfl;
   				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }
      else
      {  commented in Ver 1.4 * 
        fn_errlog( c_ServiceName, "S31045", FMLMSG, c_err_msg  );
				EXEC SQL			
        	CLOSE cur_oprtfl;
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       * } * 
    }
		**** Ver 1.9 Comment Ends ****/

		/*********added in ver 1.2  ***********/	
		
		d_value = st_tradebook.l_exctd_qty * st_tradebook.l_exctd_rt;
		fn_userlog( c_ServiceName, "l_exctd_qty :%ld:",st_tradebook.l_exctd_qty );
		fn_userlog( c_ServiceName, "l_exctd_rate :%ld:",st_tradebook.l_exctd_rt );
		fn_userlog( c_ServiceName,"d_value is :%lf:",d_value );

		/*** Commented in Ver 1.9 ***
		if ( Fadd32 ( ptr_fml_Obuf, FFO_SOMC_PRCNT, (char *)&d_value, 0 ) == -1 )
		{
  		fn_errlog( c_ServiceName, "S31050", FMLMSG, c_err_msg  );
  		EXEC SQL
    		CLOSE cur_oprtfl;
  		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}	
		***********ver 1.2	upto here **************************	

    **** Ver 1.6 Starts Here ****
    if ( Fadd32 ( ptr_fml_Obuf, FFO_XCHNG_RMRKS, (char *)c_rmrks.arr, 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31055", FMLMSG, c_err_msg  );
      EXEC SQL
        CLOSE cur_oprtfl;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    **** Ver 1.6 Ends Here ******
		**** Ver 1.9 Comment Ends ***/

		/*** Ver 1.9 Starts ***/
		i_returncode = fn_pack_vartofml (c_ServiceName,
																		 c_err_msg,
																		 &ptr_fml_Obuf,
																		 22,
																		 FFO_XCHNG_CD,(char *)st_tradebook.c_xchng_cd,
																		 FFO_PRDCT_TYP,(char *)&st_tradebook.c_prd_typ,
																		 FFO_CTGRY_INDSTK,(char *)&st_tradebook.c_ctgry_indstk,
																		 FFO_UNDRLYNG,(char *)st_tradebook.c_undrlyng,
																		 FFO_EXPRY_DT,(char *)st_tradebook.c_expry_dt,
																		 FFO_EXER_TYP,(char *)&st_tradebook.c_exrc_typ,
																		 FFO_OPT_TYP,(char *)&st_tradebook.c_opt_typ,
																		 FFO_STRK_PRC,(char *)&st_tradebook.l_strike_prc,
																		 FFO_TRD_DT,(char *)st_tradebook.c_trd_dt,
																		 FFO_TRD_FLW,(char *)&st_tradebook.c_trd_flw,
																		 FFO_TRD_RFRNC,(char *)st_tradebook.c_trd_rfrnc,
																		 FFO_EXEC_QTY,(char *)&st_tradebook.l_exctd_qty,
																		 FFO_EXCTD_RT,(char *)&st_tradebook.l_exctd_rt,
																		 FFO_FRS_BRKG,(char *)&st_tradebook.l_frs_brkg_val,
																		 FFO_BRKRG_VL,(char *)&st_tradebook.l_brkg_val,
																		 FFO_TRAN_CHRG,(char *)&st_tradebook.l_trn_chrg,
																		 FFO_STAMP_DUTY,(char *)&st_tradebook.l_stmp_dty,
																		 FFO_SEBI_TT,(char *)&st_tradebook.l_sebi_tt,
																		 FFO_STT,(char *)&st_tradebook.l_stt,
																		 FFO_SRC_TX,(char *)&st_tradebook.l_src_tx,
																		 FFO_XCHNG_RMRKS, (char *)c_rmrks.arr,
																		 FFO_SOMC_PRCNT, (char *)&d_value
																		);


		/*** Ver 1.9 Ends ***/
	}

  /************Commented in version 1.1 *****************/
  fieldid1[0]  = FFO_XCHNG_CD;                       /******* F/O ***********/
  fieldid1[1]  = FFO_PRDCT_TYP;                       /******* F/O ***********/
  fieldid1[2]  = FFO_UNDRLYNG;                          /********** contract *************/
  fieldid1[3]  = FFO_EXPRY_DT;                          /*********** contract *************/
  fieldid1[4]  = FFO_EXER_TYP;
  fieldid1[5]  = FFO_OPT_TYP;                         /************** contract ***************/
  fieldid1[6]  = FFO_STRK_PRC;                          /*********** contract ****************/
  fieldid1[7]  = FFO_CTGRY_INDSTK;                      /*********** contract ****************/
  fieldid1[8]  = FFO_TRD_DT;                    /*if > 0 then display POSITION >> QUANTITY */
  fieldid1[9]  = FFO_TRD_FLW;                   /* BUY-SELL */
  fieldid1[10]  = FFO_TRD_RFRNC;                    /* BASE PRICE=(FFO_C_MTM_OPN_VAL/FFO_C_OPNPSTN_QTY)*/
  fieldid1[11]  = FFO_EXEC_QTY;                        /* BUY ORDER QUANTITY if > 0 */
  fieldid1[12]  = FFO_EXCTD_RT;                      /* SELL ORDER QUANTITY if != 0 */
  fieldid1[13]  = FFO_FRS_BRKG;                      /* SELL ORDER QUANTITY if != 0 */
  fieldid1[14]  = FFO_FRS_QTY;                      /* SELL ORDER QUANTITY if != 0 */
  fieldid1[15]  = FFO_CVR_QTY;                      /* SELL ORDER QUANTITY if != 0 */
	fieldid1[16]	=	FFO_SOMC_PRCNT;						/*FFO_SOMC_PRCNT =FFO_EXCTD_RT * FFO_EXEC_QTY **added by ranjit*/ 
  /* Ver 1.4 starts */
	fieldid1[17]	=	FFO_BRKRG_VL;						  /* ftd_brkg */
	fieldid1[18]	=	FFO_TRAN_CHRG;					  /* ftd_tran_chrg */
	fieldid1[19]	=	FFO_STAMP_DUTY;				    /* ftd_stamp_duty */
	fieldid1[20]	=	FFO_SEBI_TT;					    /* ftd_sebi_tt */
	fieldid1[21]	=	FFO_STT;						      /* ftd_stt */
	fieldid1[22]	=	FFO_SRC_TX;						    /* ftd_src_tx */
	fieldid1[23]	=	FFO_XCHNG_RMRKS;				  /* c_rmrks  Ver 1.6 */
  /* fieldid1[17]  = BADFLDID;             commented in Ver 1.4*/
  fieldid1[24]  = BADFLDID;									/* changed from 23 to 24  Ver 1.6 */
  /* Ver 1.4 Ends */

  if(Fproj32(ptr_fml_Obuf,fieldid1) <  0)
  {
    fn_errlog( c_ServiceName, "S31060", FMLMSG, c_err_msg );
    EXEC SQL
      CLOSE cur_oprtfl;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/** comment in ver 1.2 starts**	
  ******Added in V1.1 ***********
  if ( Fadd32 ( ptr_fml_Obuf, FFO_SUB_BUF_CNT, (char *)&rec_cnt, 0 ) == -1 )	
  {
    fn_errlog( c_ServiceName, "S31065", FMLMSG, c_err_msg  );
    EXEC SQL
      CLOSE cur_oprtfl;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  ret_val = 0; 
  if ( Fadd32 ( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&ret_val, 0 ) == -1 )
  {
    fn_errlog( c_ServiceName, "S31070", FMLMSG, c_err_msg  );
    EXEC SQL
      CLOSE cur_oprtfl;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }																																				
  ******Added in V1.1 ************
	*************commented in ver 1.2 upto here **/

	EXEC SQL
		CLOSE cur_oprtfl;

	if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog(c_ServiceName,"Service oprtfl Ends");  /*** Ver 1.8 ***/
	}
	tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
}
