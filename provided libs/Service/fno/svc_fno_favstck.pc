/******************************************************************************************************\
* Service Name      : SVC_FNO_FAVSTCK                                                								  *
*                                                                                   									*
* Description       :	This service is for Aadding or Deleting contracts for FNO											  *
*                                                                                     					      *
* Input Parameters  :                                                                 							  *
*                                                                                     							  *
* Called By         : Front End (ASP)                                                 						    *
*                                                                                     							  *
* Author            : 			                                                          						    *
*                                                                                     						    *
* Created on        : 26-May-2010 				Amisha  New Release                         							  *
*                     15-Jun-2010 Ver 1.1 Amisha	Defining 50 stocks each             						    *
*                     28-Jul-2010 Ver 1.2 Amisha	storing strike prc as Strk prc * 100						    *
*                     10-Nov-2010 Ver 1.3 Silverlight Changes (Sheethal Kanchan)      								*
*                     09-Dec-2010 Ver 1.4 Silverlight Changes -FNO-Stock Search (Nitin Save)      	  *
*											30-May-2011 Ver 1.5 Silverlight Change for FNO stock Search (Navina Dhumal)		  *
*                     08-Jun-2012 Ver 1.6 Changes to allow trading in sub series     					 				*
*                                         in exchanges.(Vishnu Nair)                  								*
*                     07-May-2012 Ver 1.7 Changes to implement BSE contracts for BSE-FNO 						  *
*                     22-Aug-2013 Ver 1.8 NFO hardocded for exchange for exchange code not received   *
*																					from front-end 																					    *
*											28-Oct-2014	Ver 1.9 Silverlight Changes to calculate "% Changes In OI" (Bhushan)*
*											27-Feb-2015	Ver 2.0 trim included for Underlying (Samip M)											*
*                     13-Aug-2015 Ver 2.2 Contract Master and Trade Quote Table Merger Changes        *
*                     24-Aug-2016 Ver 2.5 Session check skipped for Non Logged In WatchList on        *
*                                         Mobile App  (Anand Dhopte)                                  *
*                     13-Jan-2017 Ver 2.6 Changes to display Expiry Date wise records with additional *
*                                         fields on Derivative Chain                                  *
*											27-Oct-2021	ver 2.7 CR-ISEC14-150651 1Click Derivative	(Shlok Ghan)						*				
*******************************************************************************************************/
/******************************************************************************************************/
/* 1.4 - Silverlight Changes-FNO- I/P and O/P FML: FML_TRD_ORD_FLG for Trading Allowed Flag 				  */
/*                                O/P FML : FML_TRD_PRC for Last Trading price    									  */
/* 1.5 - Silverlight Changes-FNO - Initialise variables. 
																	 FML_TRADE_PRICE (strike price) was added twice to output buffer 
																	 hence commented one.																							  */
/* 1.6 - Changes to allow trading in sub series in exchanges.(Vishnu Nair)													  */
/* 1.7 - BSE- FNO changes                                                                 					  */
/* 1.8 - NFO hardocded for exchange for exchange code not received from front-end (Swati  A.B)        */
/* 1.9 - Silverlight Changes-FNO- Need to send "Closing OI" in Output to calculate "% Changes In OI"  */
/* 2.0 - trim included for Underlying																																  */
/* 2.2 - Contract Master and Trade Quote Table Merger Changes (Ritesh Deolekar)                       */ 
/******************************************************************************************************/


#include <stdio.h>
#include <stdlib.h>
#include <sqlca.h>
#include <atmi.h>
#include <userlog.h>
#include <fml32.h>
#include <eba.h>
#include <Usysflds.h>
#include <fml_def.h>
#include <string.h>
#include <fn_read_debug_lvl.h>
#include <fo_view_def.h>     /* Version 1.4  */

EXEC SQL INCLUDE "table/sm_stck_mon.h";   /* Version 1.4  */
EXEC SQL INCLUDE "table/fmw_fno_mkt_wtch.h";  /* Version 1.4  */
EXEC SQL INCLUDE "table/stk_stk_mstr.h";  /*Ver 1.3*/


void SVC_FNO_FAVSTCK( TPSVCINFO *rqst )
{
	EXEC SQL INCLUDE "table/fcm_fo_cntrct_mstr.h";

  FBFR32  *ptr_fml_Ibuffer;
  FBFR32  *ptr_fml_Obuffer;
  FBFR32  *ptr_fml_temp_buffer;    /*Ver 1.3*/

  char    c_err_msg[256];
  char    c_ServiceName[33];
  char    c_user_id[20];
	char		c_undrlyng[10];
	char		c_xchng_cd[4];
	char		c_product_type;
	char		c_fnotrans_flg;
	char		c_option_type;
	char		c_cntrct_name[50];
	char		c_prd_name[4];
	char		c_expiry_date[21];
  char    c_stck_flg; /*Ver 1.3*/
  char    c_tokn_nmbr[50]; /*Ver 1.3*/
  char    c_fcm_undrlyng[10]; /*Ver 1.3*/
  int     i_err[27];   /*** Changed to 27 from 16 in Ver 2.6 ***/  
  int     i_ferr[27];  /*Ver 1.3*/ /*** Changed to 27 from 16 in Ver 2.6 ***/
	int 		i_buf_len=0; 
	int 		i=0;
	int			i_stck_count=0;
	int			i_tot_count=0;
  long    li_session_id;
  long    l_strk_prc=0.0;
	long		l_sssn_id_chk;
	long  	l_ftq_cls_oi1 =0;   /*** Ver 1.9 ***/
	long  	l_ftq_cls_oi2 =0;   /*** Ver 1.9 ***/
	long		l_spot_prc	= 0;		/*** ver 2.7 ***/
  double  d_strk_prc=0.0;	/* Added in Ver 1.2 */
  double  d_ltp=0;  /** Ver 2.7 **/

  double  d_ftq_lst_trd_prc = 0;		 /* Added in Ver 1.4 */
  char    c_fcm_qt_trdng_flg ='\0';  /* Added in Ver 1.5 */
  char    c_fml_rqst_typ = '\0';     /* Added in Ver 1.5 */
  char		c_tkn_nmbr = '\0' ;        /* Added in Ver 1.5 */
  varchar c_fmw_tkn_nmbr_bse[30]; /** Added in ver 1.7 **/



  strcpy( c_ServiceName, rqst->name );
  INITDBGLVL(c_ServiceName);  

  ptr_fml_Ibuffer = (FBFR32 *)rqst->data;
  ptr_fml_Obuffer = (FBFR32 *)NULL;
  ptr_fml_temp_buffer = (FBFR32 *)NULL;  /*Ver 1.3*/ 
 
 
  ptr_fml_Obuffer = (FBFR32 *)tpalloc("FML32", NULL, MIN_FML_BUF_LEN * 5);
  if(ptr_fml_Obuffer == NULL)
  {
    errlog(c_ServiceName, "S31005", FMLMSG, DEF_USR, DEF_SSSN, c_err_msg);
    Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
    tpreturn(TPFAIL, 0, (char *)ptr_fml_Ibuffer, 0, 0);
  }

  i_err[0] = Fget32(ptr_fml_Ibuffer, FML_USR_ID, 0, (char *)c_user_id, 0 );
  i_err[1] = Fget32(ptr_fml_Ibuffer, FML_SSSN_ID, 0, (char *)&li_session_id, 0 );

		/* Values of c_fnotrans_flg
			 E -- To get Expiry Date
			 S --	To get Strike Price 
			 A -- To Add Contract 		
			 D -- To Delete Contract */
 		
  i_err[2] = Fget32(ptr_fml_Ibuffer, FML_TRNSCTN_FLW, 0, (char *)&c_fnotrans_flg, 0 ); 	

  for(i=0;i<3;i++)
  {
    if(i_err[i]==-1)
    {
      userlog("Error in Fget for i=%d>",i);
      errlog(c_ServiceName,"S31010",FMLMSG,(char *)c_user_id,li_session_id,c_err_msg) ;
      Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,c_err_msg,0) ;
      tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuffer,0L,0) ;
    }
  }

  if(DEBUG_MSG_LVL_3)
  {
    userlog("Input for svc_fno_favstck are ");
    userlog("User [%s]",c_user_id);
    userlog("Session Id [%ld]",li_session_id);
    userlog("Transaction Type [%c]",c_fnotrans_flg);
  }





	if ((c_fnotrans_flg != 'D') && (c_fnotrans_flg != 'C'))  /*Ver 1.3*/ 
	{
  	i_err[3] = Fget32(ptr_fml_Ibuffer, FML_ORD_STCK_CD, 0, (char *)c_undrlyng, 0 );
  	i_err[4] = Fget32(ptr_fml_Ibuffer, FML_PRDCT_TYP, 0, (char *)&c_product_type, 0 );	/* F- Futures O - Options */

		/* Future Option type --  * Option Call -- C Option Put --P */
  	i_err[5] = Fget32(ptr_fml_Ibuffer, FML_ORD_ORDR_FLW, 0, (char *)&c_option_type, 0 ); 

		/*****************        Version 1.4 Starts ***********************************/
	  i_err[6] = Fget32(ptr_fml_Ibuffer, FML_TRD_ORD_FLG, 0, (char *)&c_fcm_qt_trdng_flg, 0 ); 
	  userlog("Val c_fcm_qt_trdng_flg [%c]", c_fcm_qt_trdng_flg);

		i_err[7] = Fget32(ptr_fml_Ibuffer, FML_RQST_TYP, 0, (char *)&c_fml_rqst_typ, 0 ); 
	
		/*****************        Version 1.4 Ends ***********************************/
	  i_err[8] = Fget32(ptr_fml_Ibuffer, FML_XCHNG_CD, 0, (char *)sql_fcm_xchng_cd, 0 ); /* Added in Ver 1.7 */
		userlog("Val sql_fcm_xchng_cd initially [%s]", sql_fcm_xchng_cd);  /* Added in Ver 1.7 */


    for(i=3;i<6;i++)	
    {
    	if(i_err[i]==-1)
    	{
      	userlog("Error in Fget for i=%d>",i);
      	errlog(c_ServiceName,"S31015",FMLMSG,(char *)c_user_id,li_session_id,c_err_msg) ;
      	Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,c_err_msg,0) ;
      	tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuffer,0L,0) ;
    	}
  	}

		rtrim(c_undrlyng);		/*** Ver 2.0 ***/

		/***************      Version 1.4 Starts   *********************/
  	for(i=6;i<7;i++)	 
  	{
	   if(i_err[i]==-1)
	   {
	   i_ferr [i] = Ferror32;
	   }
		   if(i_err[i] == -1 && i_ferr[i]!= FNOTPRES)
		   {  userlog("Error in Fget for i=%d>",i);
		      errlog(c_ServiceName,"S31020",FMLMSG,(char *)c_user_id,li_session_id,c_err_msg) ;
		      Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,c_err_msg,0) ;
		      tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuffer,0L,0) ;
		   }
		   if(i_err[i] == -1 && i_ferr[i]== FNOTPRES)
		   {  userlog("No FML for Trading Flag Set..Default -A");
		      c_fcm_qt_trdng_flg ='A';
		   }
  	}
		/***************      Version 1.4 Ends   *********************/

		/****** Ver 1.7 Starts *****/
    for(i=8;i<9;i++)	
    {
			i_ferr [i] = Ferror32;   /*** Ver 1.8 ***/
     if(i_err[i]==-1 && i_ferr[i]!= FNOTPRES )   /*** Ver 1.8 -- FNOTPRES handled ***/
     {
       userlog("Error in Fget for i=%d>",i);
     	 errlog(c_ServiceName,"S31025",FMLMSG,(char *)c_user_id,li_session_id,c_err_msg) ;
     	 Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,c_err_msg,0) ;
     	 tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuffer,0L,0) ;
     }
		 else if (i_err[i]==-1 && i_ferr[i] == FNOTPRES )  /*** Ver 1.8 ***/
		 {
				strcpy(sql_fcm_xchng_cd,"NFO");
		 }
  	}
		/****** Ver 1.7 Ends ********/

		if(DEBUG_MSG_LVL_3)
		{
			userlog("Underlying [%s]", c_undrlyng);
			userlog("Product Type [%c]",c_product_type);
			userlog("Option Type [%c]",c_option_type);
			userlog("sql_fcm_xchng_cd [%s]", sql_fcm_xchng_cd);  /* Added in Ver 1.7 */
		}
	}
	
	/*****************  Version 1.4 Start   ***************/
		if(DEBUG_MSG_LVL_3)
		{
			userlog("Val of c_fml_rqst_typ [%c]", c_fml_rqst_typ);
		}


	if((c_fml_rqst_typ == 'A') || (c_fml_rqst_typ == 'Z'))
	{
	   c_fnotrans_flg = 'L';  
	   i_err[9] =  Fget32(ptr_fml_Ibuffer, FML_ORD_STCK_CD, 0, (char *)c_undrlyng, 0 );
   	   i_err[10] = Fget32(ptr_fml_Ibuffer, FML_PRDCT_TYP, 0, (char *)&c_product_type, 0 );
	   if(i_err[9]==-1)
    	{
      	userlog("Error in Fget for 9>");
      	errlog(c_ServiceName,"S31030",FMLMSG,(char *)c_user_id,li_session_id,c_err_msg) ;
      	Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,c_err_msg,0) ;
      	tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuffer,0L,0) ;
    	}
	 if(i_err[10]==-1)
    	{
      	userlog("Error in Fget for 10>");
      	errlog(c_ServiceName,"S31035",FMLMSG,(char *)c_user_id,li_session_id,c_err_msg) ;
      	Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,c_err_msg,0) ;
      	tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuffer,0L,0) ;
    	}
			
			rtrim(c_undrlyng);		/*** Ver 2.0 ***/

	}
	/*****************  Version 1.4 End   ***************/


  if ( li_session_id != 0 ) /*** if condition added in Ver 2.5 ***/
  {
  	l_sssn_id_chk = chk_sssn(c_ServiceName,c_user_id,li_session_id,c_err_msg);

   if(l_sssn_id_chk ==  -1)
   {
   /*	errlog(c_ServiceName ,"S31040"," ",(char *)c_user_id,li_session_id,c_err_msg);  */  /***  1.4 Commented */
    /*strcpy(c_err_msg,"Session Timed Out"); */   /***  1.4 Commented */
    Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
    userlog("Error in Session <%s> ", c_err_msg);
    tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuffer, 0L, 0);
   }
  }

	if(c_fnotrans_flg == 'E') /* to get Expiry Date */
	{
		MEMSET(c_xchng_cd);
		/* strcpy(c_xchng_cd,"NFO"); */  /* Commented in Ver 1.7 */
		strcpy(c_xchng_cd,sql_fcm_xchng_cd); /* Added in Ver 1.7 */

		if(DEBUG_MSG_LVL_3)
		{
			userlog("Exchange [%s] value of option type [%c] ",c_xchng_cd,c_option_type);
		}

  /*** Commented in Ver 2.2 ***	

		EXEC SQL
			DECLARE cur_get_exp_dt CURSOR FOR
				SELECT  distinct trunc(FCM_EXPRY_DT),
				***  Added in Version 1.4 start *********
				FCM_UNDRLYNG,
        '0'	as  PRC,
				FCM_EXER_TYP,
				FCM_LOT_SZ,
		                FCM_INDSTK,
				***  Added in Version 1.4 End *********
                FCM_QT_TRDNG_FLG
				FROM    FCM_FO_CNTRCT_MSTR
      	WHERE   FCM_XCHNG_CD  =	:c_xchng_cd 
      	AND     FCM_UNDRLYNG  = :c_undrlyng
      	AND     FCM_PRDCT_TYP = :c_product_type
      	AND     FCM_OPT_TYP 	=	decode(:c_option_type,'*',FCM_OPT_TYP ,:c_option_type)
	AND     FCM_QT_TRDNG_FLG = decode(:c_fcm_qt_trdng_flg,'A',FCM_QT_TRDNG_FLG ,:c_fcm_qt_trdng_flg)  * Version 1.4 *
      	ORDER BY FCM_QT_TRDNG_FLG DESC ,trunc(FCM_EXPRY_DT) ASC; 

	*** Ver 2.2 Comment Ends ***/

	/*** Ver 2.2 Starts ***/

	  EXEC SQL
      DECLARE cur_get_exp_dt CURSOR FOR
        SELECT  distinct trunc(FTQ_EXPRY_DT),
        FTQ_UNDRLYNG,
        '0' as  PRC,
        FTQ_EXER_TYP,
        NVL(FTQ_MIN_LOT_QTY,0),
        FTQ_INDSTK,
        FTQ_QT_TRDNG_FLG
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
        AND     FTQ_UNDRLYNG  = :c_undrlyng
        AND     FTQ_PRDCT_TYP = :c_product_type
        AND     FTQ_OPT_TYP   = decode(:c_option_type,'*',FTQ_OPT_TYP ,:c_option_type)
 	/***	AND     FTQ_QT_TRDNG_FLG = decode(:c_fcm_qt_trdng_flg,'A',FTQ_QT_TRDNG_FLG ,:c_fcm_qt_trdng_flg)   *** Commented in Ver 2.5 ***/
        AND     FTQ_QT_TRDNG_FLG = 'T'    /*** Added in Ver 2.5 for sending expiry date of enabled contracts only  ***/ 
        ORDER BY FTQ_QT_TRDNG_FLG DESC ,trunc(FTQ_EXPRY_DT) ASC;

	/*** Ver 2.2 Ends ***/

		EXEC SQL
			OPEN cur_get_exp_dt;

    if(SQLCODE != 0)
    {
			userlog("Failed in getting Expiry Date ");
    	errlog(c_ServiceName,"S31045",SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
      EXEC SQL CLOSE cur_get_exp_dt;
      Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Obuffer);
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
    }
		
		i_buf_len = sizeof(sql_fcm_expry_dt) +	
			    /*    Added for Version 1.4 start *******/
			    sizeof(sql_fcm_undrlyng) +
			    sizeof(sql_fcm_strk_prc) +
			    sizeof(sql_fcm_exer_typ)+
			    sizeof(sql_fcm_lot_sz)+
			    sizeof(sql_fcm_indstk)+
			    sizeof(d_ftq_lst_trd_prc)+
			    sizeof(c_tkn_nmbr)+
			    /*    Added for Version 1.4 End *******/
								sizeof(sql_fcm_qt_trdng_flg) + 512;	

		while(1)
		{
			EXEC SQL
				FETCH cur_get_exp_dt
				INTO  :sql_fcm_expry_dt,
				/*    Added for Version 1.4 Start *******/
				      :sql_fcm_undrlyng,
				      :sql_fcm_strk_prc,
				      :sql_fcm_exer_typ,
				      :sql_fcm_lot_sz,
				      :sql_fcm_indstk,
				/*    Added for Version 1.4 End *******/
							:sql_fcm_qt_trdng_flg;

			if(SQLCODE != 0)
			{
				if(SQLCODE == NO_DATA_FOUND)
				{	
					EXEC SQL CLOSE cur_get_exp_dt;
					userlog("End of records in Cursor-EXP ");
					break;
				}
      	userlog("Failed in fetching Expiry Date ");
      	errlog(c_ServiceName,"S31050",SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
      	EXEC SQL CLOSE cur_get_exp_dt;
      	tpfree((char *)ptr_fml_Obuffer);
      	Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
			}

			SETNULL(sql_fcm_expry_dt);

			if(DEBUG_MSG_LVL_3)
			{
				userlog("Exchange Code [%s]",c_xchng_cd);
				userlog("Expiry date 	 [%s]",sql_fcm_expry_dt.arr);	
				userlog("Trading Flag	 [%c]",sql_fcm_qt_trdng_flg);	
			/*    Added for Version 1.4 Start *******/
				userlog("Underlying [%s]",sql_fcm_undrlyng);
				userlog("Strike Price 	 [%f]",sql_fcm_strk_prc);	
				userlog("Exercise Type	 [%c]",sql_fcm_exer_typ);	
				userlog("Lot Size 	 [%d]",sql_fcm_lot_sz);	
				userlog("Ind/Stk Indicator	 [%c]",sql_fcm_indstk);	

			/*    Added for Version 1.4 End *******/


			}

/**********************    Version 1.4 Starts  ***********************************/

     if((c_product_type == 'F')|| c_product_type == 'O')
     {
		  EXEC SQL
				SELECT nvl(FTQ_LST_TRD_PRC,'0')
				INTO  :d_ftq_lst_trd_prc 
				FROM 	FTQ_FO_TRD_QT 
				/* WHERE FTQ_XCHNG_CD ='NFO'  */ /* Commented in Ver 1.7 */
				WHERE FTQ_XCHNG_CD = :c_xchng_cd   /* Changed in Ver 1.7 */
				AND   FTQ_UNDRLYNG =  :c_undrlyng 
				AND   FTQ_PRDCT_TYP = :c_product_type
				AND   trunc(FTQ_EXPRY_DT) = to_date(:sql_fcm_expry_dt,'DD-Mon-YYYY')
				/* AND   FTQ_STRK_PRC = :sql_fcm_strk_prc */
				AND   FTQ_STRK_PRC = '0' 
				AND   FTQ_EXER_TYP = :sql_fcm_exer_typ
				AND   FTQ_OPT_TYP = decode(:c_option_type,'*',FTQ_OPT_TYP ,:c_option_type);

      if(DEBUG_MSG_LVL_3)
      {
        userlog("Exercise type in selection[%c] ",sql_fcm_exer_typ);
        userlog("Underlying [%s] ",c_undrlyng);
        userlog("Product Type[%c] ",c_product_type);
        userlog("Expry dt[%s] ",sql_fcm_expry_dt.arr);
        userlog("Option type[%c] ",c_option_type);
        userlog("Last Traded Price After Select: [%lf] ",d_ftq_lst_trd_prc);
      }

	c_tkn_nmbr = '*';
     }
/***************************  Version 1.4  Ends ****************************/




     if(Fneeded32(1,i_buf_len) > Funused32(ptr_fml_Obuffer))
     {
        ptr_fml_Obuffer = (FBFR32 *)tprealloc((char *)ptr_fml_Obuffer,
                                        (Fsizeof32(ptr_fml_Obuffer) + MIN_FML_BUF_LEN));
        if(ptr_fml_Obuffer == NULL)
        {
          errlog(c_ServiceName,"S31055",TPMSG,(char *)c_user_id,li_session_id,c_err_msg);
          Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
        }
     }

		 if((Fadd32(ptr_fml_Obuffer,FML_EXPIRY_DATE, (char *)sql_fcm_expry_dt.arr,0)) == -1)
		 {
      	userlog("Failed in Fadd FML_EXPIRY_DATE");
      	errlog(c_ServiceName,"S31060",SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
      	EXEC SQL CLOSE cur_get_exp_dt;
      	tpfree((char *)ptr_fml_Obuffer);
      	Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
		 }


/*************  Added for Version 1.4 Start *****************/
     if((c_product_type == 'F')||c_product_type == 'O')
     {


      i_err[0]  = Fadd32(ptr_fml_Obuffer,FML_ORD_STCK_CD, (char *)c_undrlyng,0);
      i_ferr[0] = Ferror32;
      i_err[1]  = Fadd32(ptr_fml_Obuffer,FML_TRADE_PRICE, (char *)&sql_fcm_strk_prc,0);
      i_ferr[1] = Ferror32;
      i_err[2]  = Fadd32(ptr_fml_Obuffer,FML_ST, (char *)&sql_fcm_exer_typ,0);
      i_ferr[2] = Ferror32;
      i_err[3]  = Fadd32(ptr_fml_Obuffer,FML_IDD_LST_QTY, (char *)&sql_fcm_lot_sz,0);
      i_ferr[3] = Ferror32;
      i_err[4]  = Fadd32(ptr_fml_Obuffer,FML_MMD_IND, (char *)&sql_fcm_indstk,0);
      i_ferr[4] = Ferror32;
      i_err[5]  = Fadd32(ptr_fml_Obuffer,FML_TRD_PRC, (char *)&d_ftq_lst_trd_prc,0);
      i_ferr[5] = Ferror32;
      i_err[6]  = Fadd32(ptr_fml_Obuffer,FML_TRD_ORD_FLG, (char *)&sql_fcm_qt_trdng_flg,0);
      i_ferr[6] = Ferror32;
      i_err[7]  = Fadd32(ptr_fml_Obuffer,FML_O_PARTI_CD, (char *)&c_tkn_nmbr,0);
      i_ferr[7] = Ferror32;
      i_err[8]  = Fadd32(ptr_fml_Obuffer,FML_XCHNG_CD, (char *)c_xchng_cd,0);  /* Added in Ver 1.7 */
      i_ferr[8] = Ferror32;   /* Added in Ver 1.7 */

      for (i = 0;i < 9 ;i++)  /* Changed count 9 from 8 in Ver 1.7 */
      {
        if(i_err[i] == -1)
        {
      	userlog("Failed in Fadd of [%d] for exp sel", i);
      	errlog(c_ServiceName,"S31065",SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
      	EXEC SQL CLOSE cur_get_exp_dt;
      	tpfree((char *)ptr_fml_Obuffer);
      	Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
        }
      }

     }

/*************  Added for Version 1.4 End *****************/


			
		}	/* End of while */
 
     /**** Ver 2.7 starts here  ***/
     d_ltp=0;
     EXEC SQL
       SELECT LTQ_RT
         INTO :d_ltp 
         FROM LTQ_TRD_QT
        WHERE LTQ_STCK_CD=:c_undrlyng
          AND LTQ_XCHNG_CD= decode(:c_xchng_cd,'NFO','NSE','BFO','BSE');
     if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
     {
        errlog(c_ServiceName,"S31070",SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
        tpfree((char *)ptr_fml_Obuffer);
        Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);  
      } 

      i_err[0]  = Fadd32(ptr_fml_Obuffer,FML_IDD_LAST_PRC, (char *)&d_ltp,0);
      i_ferr[0] = Ferror32;
      for (i = 0;i < 1 ;i++)  
      {
        if(i_err[i] == -1)
        {
        userlog("Failed in Fadd of [%d] for exp sel", i);
        tpfree((char *)ptr_fml_Obuffer);
        Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
        }
      }

     /*** Ver 2.7 Ends Here ***/

	}	/* End of c_fnotrans_flg == 'E' */
	else if( (c_product_type == 'O') && ( c_fnotrans_flg == 'S')) /* to get Strike Price */
	{
		//c_expiry_date[0]='\0';
		MEMSET(c_expiry_date);
		if(Fget32(ptr_fml_Ibuffer,FML_EXPIRY_DATE,0,(char *)c_expiry_date,0) == -1)/*Send Exp Date in DD-Mon-YYYY format */
		{
      userlog("Error in getting Expiry Date");
      errlog(c_ServiceName,"S31075",FMLMSG,(char *)c_user_id,li_session_id,c_err_msg) ;
      Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,c_err_msg,0) ;
      tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuffer,0L,0) ;
		}

    MEMSET(c_xchng_cd);
    /* strcpy(c_xchng_cd,"NFO"); */ /* Commented in Ver 1.7 */
    strcpy(c_xchng_cd,sql_fcm_xchng_cd); /* Added in Ver 1.7 */

		userlog("In Strike price loop Exchange [%s] Expiry Date [%s]",c_xchng_cd,c_expiry_date);
 
	/*** Commented in Ver 2.2 ***

    EXEC SQL
      DECLARE cur_get_strk_price CURSOR FOR
        SELECT	
								*	(nvl(FCM_STRK_PRC,0) / 100),	Ver 1.2 *
								nvl(FCM_STRK_PRC,0),	* Added in Ver 1.2 *
								***  Added in Version 1.4 start *********
								FCM_UNDRLYNG,
								FCM_EXER_TYP,
								FCM_LOT_SZ,
								FCM_INDSTK,
								***  Added in Version 1.4 End *********
								FCM_QT_TRDNG_FLG 
				FROM    FCM_FO_CNTRCT_MSTR
        WHERE   FCM_XCHNG_CD  = :c_xchng_cd
        AND     FCM_UNDRLYNG  = :c_undrlyng
        AND     FCM_PRDCT_TYP = :c_product_type
        AND     FCM_OPT_TYP   = :c_option_type
				AND			trunc(FCM_EXPRY_DT) = to_date(:c_expiry_date,'DD-Mon-YYYY')
			  AND     FCM_QT_TRDNG_FLG = decode(:c_fcm_qt_trdng_flg,'A',FCM_QT_TRDNG_FLG ,:c_fcm_qt_trdng_flg)  * Version 1.4 *
        ORDER BY FCM_QT_TRDNG_FLG DESC ,FCM_STRK_PRC ASC;

	*** Ver 2.2 Comment Ends ***/

	/*** Ver 2.2 Starts ***/

		EXEC SQL
      DECLARE cur_get_strk_price CURSOR FOR
        SELECT
                nvl(FTQ_STRK_PRC,0), 
                FTQ_UNDRLYNG,
                FTQ_EXER_TYP,
                NVL(FTQ_MIN_LOT_QTY,0),
                FTQ_INDSTK,
                FTQ_QT_TRDNG_FLG
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
        AND     FTQ_UNDRLYNG  = :c_undrlyng
        AND     FTQ_PRDCT_TYP = :c_product_type
        AND     FTQ_OPT_TYP   = :c_option_type
        AND     trunc(FTQ_EXPRY_DT) = to_date(:c_expiry_date,'DD-Mon-YYYY')
        AND     FTQ_QT_TRDNG_FLG = decode(:c_fcm_qt_trdng_flg,'A',FTQ_QT_TRDNG_FLG ,:c_fcm_qt_trdng_flg) 
        ORDER BY FTQ_QT_TRDNG_FLG DESC ,FTQ_STRK_PRC ASC;

	/*** Ver 2.2 Ends ***/

    EXEC SQL
      OPEN cur_get_strk_price;

    if(SQLCODE != 0)
    {
      userlog("Strike Price loop Failed in getting details ");
      errlog(c_ServiceName,"S31080",SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
      EXEC SQL CLOSE cur_get_strk_price;
      Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Obuffer);
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
    }

    i_buf_len = sizeof(sql_fcm_strk_prc) +
    	/*    Added for Version 1.4 start *******/
	    sizeof(sql_fcm_undrlyng) +
	    sizeof(sql_fcm_exer_typ)+
	    sizeof(sql_fcm_lot_sz)+
	    sizeof(sql_fcm_indstk)+
	    sizeof(d_ftq_lst_trd_prc)+
	    sizeof(c_tkn_nmbr)+
    	/*    Added for Version 1.4 End *******/
      sizeof(sql_fcm_qt_trdng_flg) + 512;

    while(1)
    {
      EXEC SQL
        FETCH cur_get_strk_price
        INTO  :sql_fcm_strk_prc,
	/***    Added for Version 1.4 Start *******/
	      :sql_fcm_undrlyng,
	      :sql_fcm_exer_typ,
	      :sql_fcm_lot_sz,
	      :sql_fcm_indstk,
	/***    Added for Version 1.4 End *******/
        :sql_fcm_qt_trdng_flg;

      if(SQLCODE != 0)
      {
        if(SQLCODE == NO_DATA_FOUND)
        {
          EXEC SQL CLOSE cur_get_strk_price;
          break;
        }
        userlog("Failed in fetching details in Strike price loop  ");
        errlog(c_ServiceName,"S31085",SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
        EXEC SQL CLOSE cur_get_strk_price;
        tpfree((char *)ptr_fml_Obuffer);
        Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
      }

      if(DEBUG_MSG_LVL_3)
      {
        userlog("Exchange Code [%s]",c_xchng_cd);
        userlog("Expiry date   [%s]",c_expiry_date);
        userlog("Trading Flag  [%c]",sql_fcm_qt_trdng_flg);
			  userlog("Strike Price  [%ld]",sql_fcm_strk_prc);
	/*    Added for Version 1.4 End *******/
				userlog("Underlying [%s]",sql_fcm_undrlyng);
				userlog("Strike Price 	 [%f]",sql_fcm_strk_prc);	
				userlog("Exercise Type	 [%c]",sql_fcm_exer_typ);	
				userlog("Lot Size 	 [%d]",sql_fcm_lot_sz);	
				userlog("Ind/Stk Indicator	 [%c]",sql_fcm_indstk);	

	/*    Added for Version 1.4 End *******/


      }


/**********************    Version 1.4 Starts  ***********************************/


		  EXEC SQL
					SELECT nvl(FTQ_LST_TRD_PRC,'0')
					INTO :d_ftq_lst_trd_prc 
					FROM FTQ_FO_TRD_QT 
					/* WHERE FTQ_XCHNG_CD ='NFO' */    /* Commented in Ver 1.7 */
					WHERE FTQ_XCHNG_CD = :c_xchng_cd   /* Added in Ver 1.7 */
					AND   FTQ_UNDRLYNG =  :c_undrlyng 
					AND   FTQ_PRDCT_TYP = :c_product_type
					AND   trunc(FTQ_EXPRY_DT) = to_date(:c_expiry_date,'DD-Mon-YYYY')
				  /* AND   FTQ_STRK_PRC = :sql_fcm_strk_prc */
					AND   FTQ_STRK_PRC = :sql_fcm_strk_prc
					AND   FTQ_EXER_TYP = :sql_fcm_exer_typ
				  AND   FTQ_OPT_TYP = decode(:c_option_type,'*',FTQ_OPT_TYP ,:c_option_type);

      if(DEBUG_MSG_LVL_3)
      {
        userlog("Exercise type in selection[%c] ",sql_fcm_exer_typ);
        userlog("Underlying [%s] ",c_undrlyng);
        userlog("Product Type[%c] ",c_product_type);
        userlog("Expry dt[%s] ",c_expiry_date);
        userlog("Option type[%c] ",c_option_type);
        userlog("Last Traded Price After Select: [%lf] ",d_ftq_lst_trd_prc);
        userlog("sTRIKE pRICEt: [%d] ",sql_fcm_strk_prc);
      }

      c_tkn_nmbr = '*';

/***************************  Version 1.4  Ends ****************************/




      if(Fneeded32(1,i_buf_len) > Funused32(ptr_fml_Obuffer))
      {
        ptr_fml_Obuffer = (FBFR32 *)tprealloc((char *)ptr_fml_Obuffer,
                                        (Fsizeof32(ptr_fml_Obuffer) + MIN_FML_BUF_LEN));
        if(ptr_fml_Obuffer == NULL)
        {
          errlog(c_ServiceName,"S31090",TPMSG,(char *)c_user_id,li_session_id,c_err_msg);
          Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
        }
      }
			
			/*** Ver 1.5 Comment
      if((Fadd32(ptr_fml_Obuffer,FML_TRADE_PRICE, (char *)&sql_fcm_strk_prc,0)) == -1)
      {
        userlog("Failed in strike price Fadd ");
        errlog(c_ServiceName,"S31095",SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
        EXEC SQL CLOSE cur_get_strk_price;
        tpfree((char *)ptr_fml_Obuffer);
        Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
      }
			***/

/*************  Added for Version 1.4 Start *****************/

      if(c_product_type == 'O')
      {

      i_err[0]  = Fadd32(ptr_fml_Obuffer,FML_ORD_STCK_CD, (char *)c_undrlyng,0);
      i_ferr[0] = Ferror32;
      i_err[1]  = Fadd32(ptr_fml_Obuffer,FML_TRADE_PRICE, (char *)&sql_fcm_strk_prc,0);
      i_ferr[1] = Ferror32;
      i_err[2]  = Fadd32(ptr_fml_Obuffer,FML_ST, (char *)&sql_fcm_exer_typ,0);
      i_ferr[2] = Ferror32;
      i_err[3]  = Fadd32(ptr_fml_Obuffer,FML_IDD_LST_QTY, (char *)&sql_fcm_lot_sz,0);
      i_ferr[3] = Ferror32;
      i_err[4]  = Fadd32(ptr_fml_Obuffer,FML_MMD_IND, (char *)&sql_fcm_indstk,0);
      i_ferr[4] = Ferror32;
      i_err[5]  = Fadd32(ptr_fml_Obuffer,FML_TRD_PRC, (char *)&d_ftq_lst_trd_prc,0);
      i_ferr[5] = Ferror32;
      i_err[6]  = Fadd32(ptr_fml_Obuffer,FML_TRD_ORD_FLG, (char *)&sql_fcm_qt_trdng_flg,0);
      i_ferr[6] = Ferror32;
      i_err[7]  = Fadd32(ptr_fml_Obuffer,FML_O_PARTI_CD, (char *)&c_tkn_nmbr,0);
      i_ferr[7] = Ferror32;
      i_err[8]  = Fadd32(ptr_fml_Obuffer,FML_EXPIRY_DATE, (char *)c_expiry_date,0);
      i_ferr[8] = Ferror32;
      i_err[9]  = Fadd32(ptr_fml_Obuffer,FML_XCHNG_CD, (char *)c_xchng_cd,0);  /* Added in Ver 1.7 */
      i_ferr[9] = Ferror32;  /* Added in Ver 1.7 */


      for (i = 0;i < 10 ;i++)   /* Changed count from 9 to 10 in Ver 1.7 */
      {
        if(i_err[i] == -1)
        {
      	userlog("Failed in Fadd of [%d] for strk sel", i);
        errlog(c_ServiceName,"S31100",SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
        EXEC SQL CLOSE cur_get_strk_price;
        tpfree((char *)ptr_fml_Obuffer);
        Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
        }
      }

		 
      }

/*************  Added for Version 1.4 End *****************/


    } /* End of while */
		/*** ver 2.7 ***/
     l_spot_prc=0;
			EXEC SQL
        SELECT LTQ_RT * 100
        INTO :l_spot_prc
        FROM LTQ_TRD_QT
        WHERE LTQ_STCK_CD = :c_undrlyng
        AND LTQ_XCHNG_CD = DECODE(:c_xchng_cd,'NFO','NSE','NSE');
				
			 if(SQLCODE !=0)
      {
        errlog( c_ServiceName, "S31105", SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
        Fadd32( ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0 );
      }


			 i_err[1]  = Fadd32(ptr_fml_Obuffer,FML_URQ_RQST_NMBR, (char *)&l_spot_prc,0);
   		 i_ferr[1] = Ferror32;	

			if(i_err[1] == -1 && i_ferr[1]!= FNOTPRES)
      {
        userlog("Failed in Fadd of [10] for strk sel");
        errlog(c_ServiceName,"S31110",SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
        tpfree((char *)ptr_fml_Obuffer);
        Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
      }	
    
 
		/*** ver 2.7 End ***/
	

	} /* End of c_fnotrans_flg == 'S' */
	else if(c_fnotrans_flg == 'A') /* to Add Contract */ 
	{
    MEMSET(c_xchng_cd);
    /* strcpy(c_xchng_cd,"NFO"); */ /* Commented in Ver 1.7 */
    strcpy(c_xchng_cd,sql_fcm_xchng_cd); /* Added in Ver 1.7 */


		if(DEBUG_MSG_LVL_3)
    {
      userlog("In ADD loop");
      userlog("Exchange Code [%s]",c_xchng_cd);
    }

		EXEC SQL
				SELECT	count(*)
				INTO		:i_tot_count
				FROM		FMW_FNO_MKT_WTCH
				WHERE		FMW_USR_ID		=	:c_user_id
				AND			FMW_XCHNG_CD	=	:c_xchng_cd
        AND     FMW_APP_CD IS NULL;  /*Ver 1.3*/

    if(SQLCODE != 0)
    {
      if(DEBUG_MSG_LVL_3)
      {
        userlog("Error  while getting count for exchange [%s] User [%s] Product [%c]",c_xchng_cd,c_user_id,c_product_type);
      }
      errlog(c_ServiceName,"S31115", SQLMSG, (char *)c_user_id, li_session_id, c_err_msg);
			Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,c_err_msg,0);	
			tpabort(0);
			tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuffer,0L,0);
    }

    if(i_tot_count >= 50)	/* Changed 30 to 50  Ver 1.1 */
    {
      errlog(c_ServiceName,"B21070"," ",(char *)c_user_id,li_session_id, c_err_msg);
      if(DEBUG_MSG_LVL_3)
      {
        userlog("Stock count exceeding max limit of 50 ");
      }
      //errlog(c_ServiceName,"S31120", SQLMSG, (char *)c_user_id, li_session_id, c_err_msg);
			Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,c_err_msg,0);
			tpabort(0);
			tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuffer,0L,0);
    }
    if(DEBUG_MSG_LVL_3)
    {
      userlog("%d contract exist in FMW_FNO_MKT_WTCH for User [%s] Exchange [%s] Product [%c]",i_tot_count,c_user_id,c_xchng_cd,c_product_type);
    }

    MEMSET(c_expiry_date);
    if(Fget32(ptr_fml_Ibuffer,FML_EXPIRY_DATE,0,(char *)c_expiry_date,0) == -1)/*Send Exp Date in DD-Mon-YYYY format */
    {
    	userlog("Error in getting Expiry Date");
      errlog(c_ServiceName,"S31125",FMLMSG,(char *)c_user_id,li_session_id,c_err_msg) ;
      Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,c_err_msg,0) ;
      tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuffer,0L,0) ;
    }
		if(DEBUG_MSG_LVL_3)
		{
    	userlog("Expiry Date [%s]",c_expiry_date);
		}

    MEMSET(c_prd_name);
    MEMSET(c_cntrct_name);

    if(c_product_type == 'F')
    {
      strcpy(c_prd_name,"FUT");
      sprintf(c_cntrct_name,"%s-%s-%s",c_prd_name,c_undrlyng,c_expiry_date);
      userlog("In Futures Product type [%c] Product Name [%s] Contract Name [%s]",c_product_type,c_prd_name,c_cntrct_name);

		/*** Commented in Ver 2.2 ***

    	EXEC SQL
        SELECT  FCM_EXER_TYP,
                *	(nvl(FCM_STRK_PRC,0) / 100),	Ver 1.2 *
                nvl(FCM_STRK_PRC,0),		* Added in Ver 1.2 *
                FCM_LOT_SZ,
                FCM_INDSTK,
                FCM_QT_TRDNG_FLG
        INTO    :sql_fcm_exer_typ,
                :sql_fcm_strk_prc,
                :sql_fcm_lot_sz,
                :sql_fcm_indstk,
                :sql_fcm_qt_trdng_flg
        FROM    FCM_FO_CNTRCT_MSTR
        WHERE   FCM_XCHNG_CD  = :c_xchng_cd
        AND     FCM_UNDRLYNG  = :c_undrlyng
        AND     FCM_PRDCT_TYP = :c_product_type
        AND     FCM_OPT_TYP   = :c_option_type
        AND     trunc(FCM_EXPRY_DT) = to_date(:c_expiry_date,'DD-Mon-YYYY')
        ORDER BY FCM_QT_TRDNG_FLG DESC ,FCM_EXPRY_DT,FCM_STRK_PRC ASC;
		
		 *** Ver 2.2 Comment Ends ***/

		/*** Ver 2.2 Starts ***/

			EXEC SQL
        SELECT  FTQ_EXER_TYP,
                nvl(FTQ_STRK_PRC,0),   
                NVL(FTQ_MIN_LOT_QTY,0),
                FTQ_INDSTK,
                FTQ_QT_TRDNG_FLG
        INTO    :sql_fcm_exer_typ,
                :sql_fcm_strk_prc,
                :sql_fcm_lot_sz,
                :sql_fcm_indstk,
                :sql_fcm_qt_trdng_flg
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
        AND     FTQ_UNDRLYNG  = :c_undrlyng
        AND     FTQ_PRDCT_TYP = :c_product_type
        AND     FTQ_OPT_TYP   = :c_option_type
        AND     trunc(FTQ_EXPRY_DT) = to_date(:c_expiry_date,'DD-Mon-YYYY')
        ORDER BY FTQ_QT_TRDNG_FLG DESC ,FTQ_EXPRY_DT,FTQ_STRK_PRC ASC;

		/*** Ver 2.2 Ends ***/

    }
    else
    {
			userlog("In Else Loop");
    	if(Fget32(ptr_fml_Ibuffer,FML_TRADE_PRICE,0,(char *)&l_strk_prc,0) == -1)
      {
      	userlog("Error in getting Strike Price");
        errlog(c_ServiceName,"S31130",FMLMSG,(char *)c_user_id,li_session_id,c_err_msg) ;
        Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,c_err_msg,0) ;
        tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuffer,0L,0) ;
      }
			if(DEBUG_MSG_LVL_3)
			{
      	userlog("Strike Price [%ld]",l_strk_prc);
			}

		/*** Commented in Ver 2.2 ***	

      EXEC SQL
        SELECT  FCM_EXER_TYP,
                *	nvl(FCM_STRK_PRC,0) / 100),	Ver 1.2 *
                nvl(FCM_STRK_PRC,0) ,	* Added in Ver 1.2 *
                FCM_LOT_SZ,
                FCM_INDSTK,
                FCM_QT_TRDNG_FLG
        INTO    :sql_fcm_exer_typ,
                :sql_fcm_strk_prc,
                :sql_fcm_lot_sz,
                :sql_fcm_indstk,
                :sql_fcm_qt_trdng_flg
        FROM    FCM_FO_CNTRCT_MSTR
        WHERE   FCM_XCHNG_CD  = :c_xchng_cd
        AND     FCM_UNDRLYNG  = :c_undrlyng
        AND     FCM_PRDCT_TYP = :c_product_type
        AND     FCM_OPT_TYP   = :c_option_type
        AND     trunc(FCM_EXPRY_DT) = to_date(:c_expiry_date,'DD-Mon-YYYY')
        *	AND     (FCM_STRK_PRC / 100) = :l_strk_prc	Ver 1.2 *
        AND     FCM_STRK_PRC  = :l_strk_prc	* Added in Ver 1.2 *

        ORDER BY FCM_QT_TRDNG_FLG DESC ,FCM_EXPRY_DT,FCM_STRK_PRC ASC;

		*** Ver 2.2 Comment Ends ***/

		/*** Ver 2.2 Starts ***/

		  EXEC SQL
        SELECT  FTQ_EXER_TYP,
                nvl(FTQ_STRK_PRC,0) , 
                NVL(FTQ_MIN_LOT_QTY,0),
                FTQ_INDSTK,
                FTQ_QT_TRDNG_FLG
        INTO    :sql_fcm_exer_typ,
                :sql_fcm_strk_prc,
                :sql_fcm_lot_sz,
                :sql_fcm_indstk,
                :sql_fcm_qt_trdng_flg
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
        AND     FTQ_UNDRLYNG  = :c_undrlyng
        AND     FTQ_PRDCT_TYP = :c_product_type
        AND     FTQ_OPT_TYP   = :c_option_type
        AND     trunc(FTQ_EXPRY_DT) = to_date(:c_expiry_date,'DD-Mon-YYYY')
        AND     FTQ_STRK_PRC  = :l_strk_prc 

        ORDER BY FTQ_QT_TRDNG_FLG DESC ,FTQ_EXPRY_DT,FTQ_STRK_PRC ASC;
	
		/*** Ver 2.2 Ends ***/

        strcpy(c_prd_name,"OPT");

				d_strk_prc	=	l_strk_prc;	/* Added in Ver 1.2 to display decimal point	*/
				d_strk_prc	=	(d_strk_prc	/100);	/* Added in Ver 1.2 to display decimal point	*/
      	userlog("Strike Price in double  [%lf]",d_strk_prc);	 /* Added in Ver 1.2 */

        /*	sprintf(c_cntrct_name,"%s-%s-%s-%ld-%c%c",c_prd_name,c_undrlyng,c_expiry_date,l_strk_prc,c_option_type,sql_fcm_exer_typ);	commented in Ver 1.2 */

        sprintf(c_cntrct_name,"%s-%s-%s-%.2lf-%c%c",c_prd_name,c_undrlyng,c_expiry_date,d_strk_prc,c_option_type,sql_fcm_exer_typ);	/* Added in Ver 1.2 to display decimal point in contract note  */

        userlog("In Options Product type [%c] Product Name [%s] Contract Name [%s]",c_product_type,c_prd_name,c_cntrct_name);
     }
     if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
     {
     		tpabort(0);
      	errlog(c_ServiceName,"S31135",SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
      	Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
      }

      if(DEBUG_MSG_LVL_3)
      {
        userlog("Exercise type [%c] ",sql_fcm_exer_typ);
        userlog("Lot Size      [%d]",sql_fcm_lot_sz);
        userlog("Ind Stk       [%c]",sql_fcm_indstk);
      	userlog("Strike Price  [%ld]",sql_fcm_strk_prc);
        userlog("Stock Enable Disable Flag [%c]",sql_fcm_qt_trdng_flg);
			  userlog("Exchange Code [%s] ",c_xchng_cd);  /* Added in ver 1.7 */
      }

			EXEC SQL
				SELECT	1
				INTO		:i_stck_count
				FROM		FMW_FNO_MKT_WTCH
				WHERE		FMW_USR_ID=:c_user_id	
				AND			FMW_CNTRCT_NM=:c_cntrct_name
				AND     FMW_XCHNG_CD =:c_xchng_cd   /* Added in Ver 1.7 */
        AND     FMW_APP_CD IS NULL;  /*Ver 1.3*/

    	if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    	{
      	tpabort(0);
      	errlog(c_ServiceName, "S31140",SQLMSG,(char *)c_user_id, li_session_id, c_err_msg);
      	Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
    	}

    	if(SQLCODE == 0 && i_stck_count == 1)
    	{
      	if(DEBUG_MSG_LVL_3)
      	{
        	userlog("Contract [%s] already exists for user [%s] with xchng [%s]",c_cntrct_name,c_user_id, c_xchng_cd);  
				  /* Added c_xchng_cd in Ver 1.7 */
      	}
      	tpabort(0);
      	errlog(c_ServiceName, "B56032"," ",(char *)c_user_id,li_session_id, c_err_msg); 
      	Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
    	}
	
    	if (tpbegin(TRAN_TIMEOUT,0)== -1)
    	{
      	errlog(c_ServiceName,"S31145",TPMSG,(char *)c_user_id,li_session_id,c_err_msg);
      	if(DEBUG_MSG_LVL_3)
      	{
        	userlog( "Transaction time Out");
      	}
      	tpabort( 0 );
      	tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuffer, 0L, 0);
    	}

      EXEC SQL
        INSERT INTO FMW_FNO_MKT_WTCH
        (
          FMW_USR_ID,
          FMW_XCHNG_CD,
          FMW_PRDCT_TYP,
          FMW_UNDRLYNG,
          FMW_EXPRY_DT,
          FMW_EXER_TYP,
          FMW_OPT_TYP,
          FMW_STRK_PRC,
          FMW_LOT_SZ,
          FMW_INDSTK,	
					FMW_CNTRCT_NM,
					FMW_INS_DT
        )
        VALUES
        (
          :c_user_id,
          :c_xchng_cd,
          :c_product_type,
          :c_undrlyng,
          to_date( :c_expiry_date, 'DD-Mon-yyyy' ),
          :sql_fcm_exer_typ,
          :c_option_type,
          :sql_fcm_strk_prc,
          :sql_fcm_lot_sz,
          :sql_fcm_indstk,
					:c_cntrct_name,
					SYSDATE
        );

    	if ( SQLCODE != 0)
    	{
      	if(DEBUG_MSG_LVL_3)
      	{
        	userlog("Error while inserting user [%s] contract [%s] ",c_user_id,c_cntrct_name);
      	}
      	errlog(c_ServiceName, "S31150",SQLMSG,(char *)c_user_id, li_session_id, c_err_msg);
      	tpabort( 0 );
      	Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuffer, 0L, 0);
    	}
    	if(DEBUG_MSG_LVL_3)
    	{
      	userlog("User [%s] contract [%s] SYSDATE Exchange [%s] inserted",c_user_id,c_cntrct_name,c_xchng_cd); /* Ver 1.1 */
    	}

  		if (tpcommit(0) == -1)
  		{
  			errlog(c_ServiceName,"S31155",TPMSG,(char *)c_user_id,li_session_id,c_err_msg);
    		Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
    		tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuffer, 0L, 0);
  		}

	}	/* End of c_fnotrans_flg == 'A' */
	else if(c_fnotrans_flg == 'D') /* to Delete Contract */
	{
    if(DEBUG_MSG_LVL_3)
    {
      userlog("In Delete Mode ");
    }

		i_err[8] = Fget32(ptr_fml_Ibuffer, FML_XCHNG_CD, 0, (char *)sql_fcm_xchng_cd, 0 ); /* Added in Ver 1.7 */
		userlog("Val sql_fcm_xchng_cd in delete mode [%s]", sql_fcm_xchng_cd);  /* Added in Ver 1.7 */

		/* Ver 1.7 Starts */
    for(i=8;i<9;i++)	
    {
			i_ferr [i] = Ferror32;   /*** Ver 1.8 ***/

     if(i_err[i]==-1 && i_ferr[i]!= FNOTPRES )   /*** Ver 1.8 -- FNOTPRES handled ***/
     {
       userlog("Error in Fget for i=%d>",i);
       errlog(c_ServiceName,"S31160",FMLMSG,(char *)c_user_id,li_session_id,c_err_msg) ;
       Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,c_err_msg,0) ;
       tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuffer,0L,0) ;
     }
     else if (i_err[i]==-1 && i_ferr[i] == FNOTPRES )  /*** Ver 1.8 ***/
     {
        strcpy(sql_fcm_xchng_cd,"NFO");
     }

     /** Ver 1.8 comment  if(i_err[i]==-1)
      {
      	 userlog("Error in Fget for i=%d>",i);
      	 errlog(c_ServiceName,"S31165",FMLMSG,(char *)c_user_id,li_session_id,c_err_msg) ;
      	 Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,c_err_msg,0) ;
      	 tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuffer,0L,0) ;
    	 }**/
  	}
		/* Ver 1.7 Ends */


    MEMSET(c_xchng_cd);
    /* strcpy(c_xchng_cd,"NFO"); */ /* Commented in Ver 1.7 */
    strcpy(c_xchng_cd,sql_fcm_xchng_cd); /* Added in Ver 1.7 */
		MEMSET(c_cntrct_name);

    if((Fget32(ptr_fml_Ibuffer,FML_USR_ADDRSS_LN1, 0, (char *)c_cntrct_name, 0)) == -1)
    {
      errlog(c_ServiceName ,"S31170",FMLMSG,(char *)c_user_id,li_session_id,c_err_msg);
      if(DEBUG_MSG_LVL_3)
      {
        userlog("contract not present in Input Buf in Delete Mode");
      }
      Fadd32(ptr_fml_Ibuffer , FML_ERR_MSG , c_err_msg ,0);
      tpreturn(TPFAIL , 0L , (char *)ptr_fml_Ibuffer , 0L ,0);
    }

    if (tpbegin(TRAN_TIMEOUT,0)== -1)
    {
      errlog(c_ServiceName,"S31175",TPMSG,(char *)c_user_id,li_session_id,c_err_msg);
      if(DEBUG_MSG_LVL_3)
      {
        userlog( "Transaction time Out");
      }
      tpabort( 0 );
      tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuffer, 0L, 0);
    }

    EXEC SQL
      DELETE  FROM FMW_FNO_MKT_WTCH
      WHERE   FMW_USR_ID 		= :c_user_id
      AND     FMW_CNTRCT_NM	=	:c_cntrct_name
      AND     FMW_XCHNG_CD = :c_xchng_cd /* Added in Ver 1.7 */
      AND     FMW_APP_CD IS NULL;  /*Ver 1.3*/

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      errlog(c_ServiceName,"S31180",SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
      tpabort( 0 );
      Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuffer, 0L, 0);
    }
    if(DEBUG_MSG_LVL_3)
    {
      userlog("[%d]Record deleted from FMW_FNO_MKT_WTCH for user [%s] Contract[%s] Exchange[%s]",sqlca.sqlerrd[2],c_user_id,c_cntrct_name, c_xchng_cd);
    }

    if (tpcommit(0) == -1)
    {
      errlog(c_ServiceName,"S31185",TPMSG,(char *)c_user_id,li_session_id,c_err_msg);
      Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuffer, 0L, 0);
    }

	}
   
  /*Ver 1.3 starts */

  else if(c_fnotrans_flg == 'C')
  {
    MEMSET(sql_stk_stck_nm);
    MEMSET(c_fcm_undrlyng);
    MEMSET(sql_fmw_tkn_nmbr);

	/*** Commented in Ver 2.2 ***

    EXEC SQL
    DECLARE cur_cntrct_dtls CURSOR FOR
    SELECT distinct FCM_XCHNG_CD, * Added exchange code in Ver 1.7 *
           FCM_UNDRLYNG, 
           FCM_PRDCT_TYP,
           FCM_EXPRY_DT,
           NVL(FCM_STRK_PRC,0) as PRC,
           FCM_LOT_SZ,
           FCM_EXER_TYP,
           FCM_INDSTK
    FROM   FCM_FO_CNTRCT_MSTR
    ORDER BY FCM_UNDRLYNG, 
             FCM_PRDCT_TYP,
             FCM_XCHNG_CD, * Added exchange code in Ver 1.7 *
						 FCM_EXPRY_DT,
             PRC;

	*** Ver 2.2 Comment Ends ***/

	/*** Ver 2.2 Starts ***/

	EXEC SQL
    DECLARE cur_cntrct_dtls CURSOR FOR
    SELECT distinct FTQ_XCHNG_CD,
           FTQ_UNDRLYNG,
           FTQ_PRDCT_TYP,
           FTQ_EXPRY_DT,
           NVL(FTQ_STRK_PRC,0) as PRC,
           NVL(FTQ_MIN_LOT_QTY,0),
           FTQ_EXER_TYP,
           FTQ_INDSTK
    FROM   FTQ_FO_TRD_QT
    ORDER BY FTQ_UNDRLYNG,
             FTQ_PRDCT_TYP,
             FTQ_XCHNG_CD,
             FTQ_EXPRY_DT,
             PRC;

	/*** Ver 2.2 Ends ***/

    EXEC SQL OPEN cur_cntrct_dtls;

    if(SQLCODE != 0)
    {
      errlog(c_ServiceName, "S31190", SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
      userlog("Error -<%ld>", SQLCODE);
      EXEC SQL CLOSE cur_cntrct_dtls; 
      Fadd32(ptr_fml_Ibuffer, FML_ERR_MSG, c_err_msg, 0);
      tpfree((char *)ptr_fml_Obuffer);
      tpreturn(TPFAIL, 0, (char *)ptr_fml_Ibuffer, 0, 0);
    }

    i_buf_len = sizeof(sql_fcm_xchng_cd) + /* Added in Ver 1.7 */
								sizeof(sql_fcm_undrlyng) +
                sizeof(sql_fcm_prdct_typ) +
                sizeof(sql_fcm_strk_prc)+
			 		 		  sizeof(sql_fcm_lot_sz)+
				 			  sizeof(sql_fcm_exer_typ)+
							  sizeof(sql_fcm_indstk)+
                sizeof(sql_stk_stck_nm)+
                sizeof(sql_fmw_tkn_nmbr)+
                sizeof(sql_fcm_expry_dt)+ 200;

    if(DEBUG_MSG_LVL_3)
    {
      userlog("i_buf_len :%d:",i_buf_len);
    }

    userlog("sqlca.sqlerrd[2] :%d:",sqlca.sqlerrd[2]);

    while(1)
    {
			l_ftq_cls_oi1 =0;     /*** Ver 1.9 ***/
			l_ftq_cls_oi2 =0;     /*** Ver 1.9 ***/

      EXEC SQL
           FETCH cur_cntrct_dtls
           INTO  :sql_fcm_xchng_cd, /* Added in ver 1.7 */
	         			 :sql_fcm_undrlyng,
                 :sql_fcm_prdct_typ,
                 :sql_fcm_expry_dt,
                 :sql_fcm_strk_prc,
                 :sql_fcm_lot_sz,
                 :sql_fcm_exer_typ,
                 :sql_fcm_indstk;

      if(SQLCODE != 0 )
      {
        if(SQLCODE == NO_DATA_FOUND)
        {
          userlog("In no data found");
          EXEC SQL CLOSE cur_cntrct_dtls;
          break;
        }
        EXEC SQL CLOSE cur_cntrct_dtls;
        errlog(c_ServiceName,"S31195",SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
        Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
        tpfree((char *)ptr_fml_Obuffer);
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
      }
     
      SETNULL(sql_fcm_expry_dt);
      SETNULL(sql_stk_stck_nm);

		 	/*** Ver 1.9 ** Starts ***/
	
			EXEC SQL
								SELECT 	NVL(FTQ_CLS_OI,0)
								INTO  	:l_ftq_cls_oi1
								FROM	 	FTQ_FO_TRD_QT
								WHERE 	FTQ_XCHNG_CD 	=	:sql_fcm_xchng_cd
							  AND			FTQ_PRDCT_TYP = :sql_fcm_prdct_typ
								AND 		FTQ_INDSTK 		= :sql_fcm_indstk
								AND 		FTQ_UNDRLYNG 	=	:sql_fcm_undrlyng
								AND 		trunc(FTQ_EXPRY_DT) 	=	to_date(:sql_fcm_expry_dt,'DD-Mon-YYYY')
								AND 		FTQ_EXER_TYP 	= :sql_fcm_exer_typ
								AND 		FTQ_OPT_TYP 	= decode(:sql_fcm_prdct_typ,'F','*','C')	
								AND			FTQ_STRK_PRC	= :sql_fcm_strk_prc ;

			if ( SQLCODE == NO_DATA_FOUND )
      {
         l_ftq_cls_oi1 = 0;
      }

			if(sql_fcm_prdct_typ != 'F')
			{
			  EXEC SQL
                SELECT  NVL(FTQ_CLS_OI,0)
                INTO    :l_ftq_cls_oi2
                FROM    FTQ_FO_TRD_QT
                WHERE   FTQ_XCHNG_CD  = :sql_fcm_xchng_cd
                AND     FTQ_PRDCT_TYP = :sql_fcm_prdct_typ
                AND     FTQ_INDSTK    = :sql_fcm_indstk
                AND     FTQ_UNDRLYNG  = :sql_fcm_undrlyng
                AND     trunc(FTQ_EXPRY_DT)   = to_date(:sql_fcm_expry_dt,'DD-Mon-YYYY')
                AND     FTQ_EXER_TYP  = :sql_fcm_exer_typ
                AND     FTQ_OPT_TYP   = 'P'
                AND     FTQ_STRK_PRC  = :sql_fcm_strk_prc ;

				if ( SQLCODE == NO_DATA_FOUND )
      	{
					l_ftq_cls_oi2 = 0;
      	}
			}

			if(DEBUG_MSG_LVL_3)
      {
				userlog("Exercise type in selection[%c] ",sql_fcm_exer_typ);
      	userlog("Underlying [%s] ",sql_fcm_undrlyng);
      	userlog("Product Type[%c] ",sql_fcm_prdct_typ);
      	userlog("Expry dt[%s] ",sql_fcm_expry_dt.arr);
      	userlog("Strike Price[%ld] ",sql_fcm_strk_prc);
      	userlog("Exchange Code[%s] in selection of FTQ ",sql_fcm_xchng_cd); 
				userlog("Closing OI l_ftq_cls_oi1 :%ld:",l_ftq_cls_oi1);
				userlog("Closing OI l_ftq_cls_oi2 :%ld:",l_ftq_cls_oi2);
			}
			/*** Ver 1.9 ** Ends ***/ 	
    
      if(strcmp(sql_fcm_undrlyng,c_fcm_undrlyng) !=0)
      {
        if(DEBUG_MSG_LVL_3)
        { 
          userlog("sql_fcm_xchng_cd :%s:",sql_fcm_xchng_cd);  /* Added in Ver 1.7 */
	  			userlog("sql_fcm_undrlyng :%s:",sql_fcm_undrlyng);
          userlog("sql_fcm_indstk :%c:",sql_fcm_indstk);
        }
 
        if(sql_fcm_indstk == 'I')
        {
          
	  /** Added below on 17-Jul-2012 for Token generation for INDEX **/
	  
    MEMSET(sql_fmw_tkn_nmbr);       /***  Ver 2.6 ***/
    MEMSET(c_fmw_tkn_nmbr_bse);     /***  Ver 2.6 ***/ 

    if (strcmp(sql_fcm_xchng_cd,"NFO")== 0)
	  {
	  
	  EXEC SQL
               SELECT NVL(SEM_MAP_VL,'*'),
                      STK_STCK_NM
               INTO   :sql_fmw_tkn_nmbr,
                      :sql_stk_stck_nm
               FROM   SEM_STCK_MAP,
                      STK_STK_MSTR
               WHERE  SEM_ENTTY='12'
               AND    SEM_STCK_CD = STK_STCK_CD
               AND    STK_STCK_CD = :sql_fcm_undrlyng;

          if( SQLCODE != 0 )
          {
            if ( SQLCODE == NO_DATA_FOUND )
            {
              MEMSET(sql_fmw_tkn_nmbr);
              MEMSET(sql_stk_stck_nm);
            }
            else            
            {
              errlog ( c_ServiceName, "S31200", SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
              Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
              tpfree((char *)ptr_fml_Obuffer);
              tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
            } 
          }
          SETNULL(sql_fmw_tkn_nmbr); 
	  userlog("Val of Equity-sql_fmw_tkn_nmbr in Stock List for FNO-STOCK <%s>",sql_fmw_tkn_nmbr.arr);
	  }
	  	  if (strcmp(sql_fcm_xchng_cd,"BFO")== 0)
	  {

	  MEMSET(sql_fmw_tkn_nmbr);
          EXEC SQL
               SELECT NVL(SEM_MAP_VL,'*'),
	              STK_STCK_NM
               INTO   :c_fmw_tkn_nmbr_bse,
		       :sql_stk_stck_nm
               FROM   SEM_STCK_MAP,
                      STK_STK_MSTR
               WHERE  SEM_ENTTY='12' 
               AND    SEM_STCK_CD = STK_STCK_CD
               AND    STK_STCK_CD = :sql_fcm_undrlyng;

          if( SQLCODE != 0 )
          {
            if ( SQLCODE == NO_DATA_FOUND )
            {
              MEMSET(c_fmw_tkn_nmbr_bse);
	      MEMSET(sql_stk_stck_nm);
            }
            else            
            {
              errlog ( c_ServiceName, "S31205", SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
              Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
              tpfree((char *)ptr_fml_Obuffer);
              tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
            } 
          }
	 SETNULL(c_fmw_tkn_nmbr_bse); 
         userlog("Val of Equity-c_fmw_tkn_nmbr_bse in Stock List for FNO-STOCK <%s>",c_fmw_tkn_nmbr_bse.arr);
	  }

	strcat(sql_fmw_tkn_nmbr.arr, ";" );  /** Added in ver 1.7 **/
	strcat(sql_fmw_tkn_nmbr.arr, c_fmw_tkn_nmbr_bse.arr );  /** Added in ver 1.7 **/
  
        if(DEBUG_MSG_LVL_3)
        {
          userlog("Val of Equity-sql_fmw_tkn_nmbr in Stock List for FNO-STOCK <%s>",sql_fmw_tkn_nmbr.arr);
	  userlog("Val of Equity-sql_stk_stck_nm in Stock List for FNO-STOCK <%s>",sql_stk_stck_nm.arr);
        }
        }

        else
        {

	  		/***** Commented in Ver 1.6 *********

          EXEC SQL
               SELECT NVL(SEM_MAP_VL||ESM_XCHNG_SERIES,'*'),
                      STK_STCK_NM
               INTO :sql_fmw_tkn_nmbr,
                    :sql_stk_stck_nm
               FROM SEM_STCK_MAP,ESM_XCHNG_SGMNT_MSTR,ESS_SGMNT_STCK,STK_STK_MSTR
               WHERE SEM_STCK_CD = :sql_fcm_undrlyng
               AND ESM_XCHNG_CD ='NSE' 
               AND ESS_STCK_CD = SEM_STCK_CD
               AND ESS_STCK_CD = STK_STCK_CD
               AND ESS_XCHNG_CD = ESM_XCHNG_CD
               AND ESS_XCHNG_SGMNT_CD = ESM_SGMNT_CD
               AND SEM_ENTTY =1; 

        **********************************/
				/******** Ver 1.6 Starts *********/

        userlog("Val of sql_fcm_undrlyng for NSE :%s:",sql_fcm_undrlyng);		
	      userlog("Val of sql_fcm_xchng_cd for NSE :%s:",sql_fcm_xchng_cd);		
	    
	      EXEC SQL
               SELECT  NVL(SEM_MAP_VL||ESS_XCHNG_SUB_SERIES,'*'),
                    STK_STCK_NM
               INTO :sql_fmw_tkn_nmbr,
                    :sql_stk_stck_nm
               FROM SEM_STCK_MAP,
                    ESS_SGMNT_STCK,
                    STK_STK_MSTR
               WHERE SEM_STCK_CD = :sql_fcm_undrlyng
                AND ESS_XCHNG_CD ='NSE' 
                AND ESS_STCK_CD = SEM_STCK_CD
                AND ESS_STCK_CD = STK_STCK_CD
                AND SEM_ENTTY =1; 


	  		SETNULL(sql_fmw_tkn_nmbr); 
	  		userlog("Val of sql_fmw_tkn_nmbr for NSE ---:%s: - Sqlcode<%ld>",sql_fmw_tkn_nmbr.arr, SQLCODE);		

        /***** Ver 1.6 Ends ******/

        if( SQLCODE != 0 )
        {
            if ( SQLCODE == NO_DATA_FOUND )
            {
              MEMSET(sql_fmw_tkn_nmbr);
              MEMSET(sql_stk_stck_nm);
            }
            else
            {
              errlog ( c_ServiceName, "S31210", SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
              Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
              tpfree((char *)ptr_fml_Obuffer);
              tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
            }
        } 
	    
	    	/***** Ver 1.7 Starts ******/
	    	EXEC SQL
               SELECT  NVL(SEM_MAP_VL,'*')
               INTO :c_fmw_tkn_nmbr_bse
               FROM SEM_STCK_MAP,
                    ESS_SGMNT_STCK,
                    STK_STK_MSTR
               WHERE SEM_STCK_CD = :sql_fcm_undrlyng
                AND ESS_XCHNG_CD = decode(:sql_fcm_xchng_cd,'BFO','BSE') /* Added in Ver 1.7 */
                AND ESS_STCK_CD = SEM_STCK_CD
                AND ESS_STCK_CD = STK_STCK_CD
                AND SEM_ENTTY = decode(:sql_fcm_xchng_cd,'BFO','6'); /* Added in Ver 1.7 */

        if( SQLCODE != 0 )
        {
            if ( SQLCODE == NO_DATA_FOUND )
            {
              MEMSET(c_fmw_tkn_nmbr_bse);
            }
            else
            {
              errlog ( c_ServiceName, "S31215", SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
              Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
              tpfree((char *)ptr_fml_Obuffer);
              tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
            }
        } 

	  		SETNULL(c_fmw_tkn_nmbr_bse); 
	  		userlog("Val of c_fmw_tkn_nmbr_bse :%s:",c_fmw_tkn_nmbr_bse.arr);

				/***** Ver 1.7 Ends ******/

        }  
        SETNULL(sql_fmw_tkn_nmbr); 
        SETNULL(sql_stk_stck_nm); 

				/** Added below part in Ver 1.7 ****/
				strcat(sql_fmw_tkn_nmbr.arr, ";");
				strcat(sql_fmw_tkn_nmbr.arr, c_fmw_tkn_nmbr_bse.arr);
				/*** Ver 1.7 Changes Ends **********/
  
        if(DEBUG_MSG_LVL_3)
        {
          userlog("sql_stk_stck_nm :%s:",sql_stk_stck_nm.arr);
          userlog("sql_fmw_tkn_nmbr :%s:",sql_fmw_tkn_nmbr.arr);
        }
      } 
     
      if(Fneeded32(1,i_buf_len) > Funused32(ptr_fml_Obuffer))
      {
        ptr_fml_temp_buffer = (FBFR32 *)tprealloc((char *)ptr_fml_Obuffer,
                             (Fsizeof32(ptr_fml_Obuffer) + MIN_FML_BUF_LEN));
        if(ptr_fml_temp_buffer == NULL)
        {
          EXEC SQL CLOSE cur_cntrct_dtls;
          errlog(c_ServiceName,"S31220",TPMSG,(char *)c_user_id,li_session_id,c_err_msg);
          Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
          tpfree((char *)ptr_fml_Obuffer);
          tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
        }
        else
        {
          ptr_fml_Obuffer = ptr_fml_temp_buffer;
        }
      }

      i_err[0]  = Fadd32(ptr_fml_Obuffer,FML_STCK_CD,(char *)sql_fcm_undrlyng,0);
      i_ferr[0] = Ferror32;
      i_err[1]  = Fadd32(ptr_fml_Obuffer,FML_PRDCT_TYP,(char *)&sql_fcm_prdct_typ,0);
      i_ferr[1] = Ferror32;
      i_err[2]  = Fadd32(ptr_fml_Obuffer,FML_EXPIRY_DATE,(char *)sql_fcm_expry_dt.arr,0);
      i_ferr[2] = Ferror32;
      i_err[3]  = Fadd32(ptr_fml_Obuffer,FML_TRADE_PRICE,(char *)&sql_fcm_strk_prc,0);
      i_ferr[3] = Ferror32;
      i_err[4]  = Fadd32(ptr_fml_Obuffer,FML_IDD_LST_QTY,(char *)&sql_fcm_lot_sz,0);
      i_ferr[4] = Ferror32;
      i_err[5]  = Fadd32(ptr_fml_Obuffer,FML_ST,(char *)&sql_fcm_exer_typ,0);
      i_ferr[5] = Ferror32;
      i_err[6]  = Fadd32(ptr_fml_Obuffer,FML_MMD_IND,(char *)&sql_fcm_indstk,0);
      i_ferr[6] = Ferror32;
      i_err[7]  = Fadd32(ptr_fml_Obuffer,FML_ORD_STCK_CD,(char *)sql_stk_stck_nm.arr,0);
      i_ferr[7] = Ferror32;
      i_err[8]  = Fadd32(ptr_fml_Obuffer,FML_STCK_FRM_ALLWD,(char *)sql_fmw_tkn_nmbr.arr,0);
      i_ferr[8] = Ferror32;
      i_err[9]  = Fadd32(ptr_fml_Obuffer,FML_XCHNG_CD,(char *)sql_fcm_xchng_cd,0); /* Added in Ver 1.7 */
      i_ferr[9] = Ferror32;
			i_err[10]  = Fadd32(ptr_fml_Obuffer,FML_OTRNSCTN_QTY,(char *)&l_ftq_cls_oi1,0);      /*** Ver 1.9 ***/
			i_ferr[10] = Ferror32;
			i_err[11]  = Fadd32(ptr_fml_Obuffer,FML_QTY_HLD,(char *)&l_ftq_cls_oi2,0);      /*** Ver 1.9 ***/
			i_ferr[11] = Ferror32;

      for (i = 0;i < 12 ;i++)  /* Changed count from 9 to 10 in Ver 1.7 */ /* Changed count from 10 to 12  in Ver 1.9 */
      {
        if(i_err[i] == -1)
        {
          userlog("i :%d:",i);
          errlog(c_ServiceName,"S31225",Fstrerror32(i_ferr[i]),(char *)c_user_id,li_session_id,c_err_msg);
          Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
          tpfree((char *)ptr_fml_Obuffer);
          tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
        }
      }
      strcpy(c_fcm_undrlyng,sql_fcm_undrlyng);
    }
  }
    /*Ver 1.3 ends */ 
  
/****************  Version 1.4 start   FOR View Contract  ****************************/

  else 	if((c_fnotrans_flg == 'L' && c_fml_rqst_typ == 'A')) /* to get All Details */
	{

		MEMSET(c_xchng_cd);
		/* strcpy(c_xchng_cd,"NFO"); */ /* Commented in Ver 1.7 */
		strcpy(c_xchng_cd,sql_fcm_xchng_cd); /* Added in Ver 1.7 */

		if(DEBUG_MSG_LVL_3)
		{
			userlog("Exchange Code Val [%s]",c_xchng_cd);
		}

		userlog("Product Type Is [%c]",c_product_type);

	/*** Commented in Ver 2.2 ***

		EXEC SQL
			DECLARE cur_get_all_dtls CURSOR FOR
			SELECT   distinct trunc(FCM_EXPRY_DT),
						FCM_UNDRLYNG,
						NVL(FCM_STRK_PRC,0) as PRC,
						FCM_EXER_TYP,
						FCM_LOT_SZ,
						FCM_INDSTK,
						FCM_PRDCT_TYP,
						FCM_OPT_TYP,
						* decode(FCM_XCHNG_CD,'NSE','NFO','NFO'), *
						FCM_XCHNG_CD,
						decode(FCM_QT_TRDNG_FLG,'T','Y','N')
						FROM    FCM_FO_CNTRCT_MSTR
			WHERE   FCM_XCHNG_CD  =	:c_xchng_cd
			AND     FCM_UNDRLYNG  = :c_undrlyng
			AND	FCM_PRDCT_TYP = :c_product_type
			ORDER BY FCM_OPT_TYP ,FCM_UNDRLYNG,trunc(FCM_EXPRY_DT) ASC; 

	*** Ver 2.2 Comment Ends ***/

	/*** Ver 2.2 Starts ***/

		EXEC SQL
      DECLARE cur_get_all_dtls CURSOR FOR
      SELECT   distinct trunc(FTQ_EXPRY_DT),
            FTQ_UNDRLYNG,
            NVL(FTQ_STRK_PRC,0) as PRC,
            FTQ_EXER_TYP,
            NVL(FTQ_MIN_LOT_QTY,0),
            FTQ_INDSTK,
            FTQ_PRDCT_TYP,
            FTQ_OPT_TYP,
            FTQ_XCHNG_CD,
            decode(FTQ_QT_TRDNG_FLG,'T','Y','N')
            FROM    FTQ_FO_TRD_QT
      WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
      AND     FTQ_UNDRLYNG  = :c_undrlyng
      AND FTQ_PRDCT_TYP = :c_product_type
      ORDER BY FTQ_OPT_TYP ,FTQ_UNDRLYNG,trunc(FTQ_EXPRY_DT) ASC;

	/*** Ver 2.2 Ends ***/

		EXEC SQL
			OPEN cur_get_all_dtls;

    if(SQLCODE != 0)
    {
			userlog("Failed in getting record for Underlying:<%s>- SQL-ERROR<%ld> ",c_undrlyng, SQLCODE );
    	errlog(c_ServiceName,"S31230",SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
      EXEC SQL CLOSE cur_get_all_dtls;
      Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Obuffer);
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
    }
		
		i_buf_len = sizeof(sql_fcm_expry_dt) +	
			    sizeof(sql_fcm_undrlyng) +
			    sizeof(sql_fcm_strk_prc) +
			    sizeof(sql_fcm_exer_typ)+
			    sizeof(sql_fcm_lot_sz)+
			    sizeof(sql_fcm_indstk)+
			    sizeof(d_ftq_lst_trd_prc)+
			    sizeof(c_tkn_nmbr)+
			    sizeof(sql_fcm_xchng_cd)+			    
			    sizeof(sql_fcm_prdct_typ)+			    
			    sizeof(sql_fcm_opt_typ)+
			    sizeof(sql_fcm_qt_trdng_flg) + 512;	

		while(1)
		{
			EXEC SQL
				FETCH cur_get_all_dtls
				INTO  :sql_fcm_expry_dt,
				      :sql_fcm_undrlyng,
				      :sql_fcm_strk_prc,
				      :sql_fcm_exer_typ,
				      :sql_fcm_lot_sz,
				      :sql_fcm_indstk,
				      :sql_fcm_prdct_typ,
				      :sql_fcm_opt_typ,
				      :sql_fcm_xchng_cd,
							:sql_fcm_qt_trdng_flg;

			if(SQLCODE != 0)
			{
				if(SQLCODE == NO_DATA_FOUND)
				{	
					EXEC SQL CLOSE cur_get_all_dtls;
					userlog("End of records in Cursor-All_Details - Total Records<%ld>",sqlca.sqlerrd[2]);
					break;
				}
      	userlog("Failed in fetching All details ");
      	errlog(c_ServiceName,"S31235",SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
      	EXEC SQL CLOSE cur_get_all_dtls;
      	tpfree((char *)ptr_fml_Obuffer);
      	Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
			}

			SETNULL(sql_fcm_expry_dt);

			if(DEBUG_MSG_LVL_3)
			{
				userlog("Exchange Code [%s]",sql_fcm_xchng_cd);
				userlog("Expiry date 	 [%s]",sql_fcm_expry_dt.arr);	
				userlog("Trading Flag	 [%c]",sql_fcm_qt_trdng_flg);	
				userlog("Underlying [%s]",sql_fcm_undrlyng);
				userlog("Strike Price 	 [%f]",sql_fcm_strk_prc);	
				userlog("Exercise Type	 [%c]",sql_fcm_exer_typ);	
				userlog("Lot Size 	 [%d]",sql_fcm_lot_sz);	
				userlog("Ind/Stk Indicator	 [%c]",sql_fcm_indstk);	
				userlog("Product Type 	 [%c]",sql_fcm_prdct_typ);	
				userlog("Option Type	 [%c]",sql_fcm_opt_typ);	

			}


  		EXEC SQL
				SELECT nvl(FTQ_LST_TRD_PRC,'0')
		  	INTO :d_ftq_lst_trd_prc 
				FROM FTQ_FO_TRD_QT 
				/* WHERE FTQ_XCHNG_CD ='NFO' */ /* Commented in Ver 1.7 */
				WHERE FTQ_XCHNG_CD = :sql_fcm_xchng_cd  /* Changed in Ver 1.7 */
				AND   FTQ_UNDRLYNG =  :c_undrlyng 
				AND   FTQ_PRDCT_TYP = :sql_fcm_prdct_typ
		  	AND   trunc(FTQ_EXPRY_DT) = to_date(:sql_fcm_expry_dt,'DD-Mon-YYYY')
				AND   FTQ_STRK_PRC = :sql_fcm_strk_prc
				AND   FTQ_EXER_TYP = :sql_fcm_exer_typ
				AND   FTQ_OPT_TYP = :sql_fcm_opt_typ;

      if(DEBUG_MSG_LVL_3)
      {
        userlog("Exercise type in selection[%c] ",sql_fcm_exer_typ);
        userlog("Underlying [%s] ",c_undrlyng);
        userlog("Product Type[%c] ",sql_fcm_prdct_typ);
        userlog("Expry dt[%s] ",sql_fcm_expry_dt.arr);
        userlog("Option type[%c] ",sql_fcm_opt_typ);
        userlog("Strike Price[%lf] ",sql_fcm_strk_prc);
        userlog("Last Traded Price After Select: [%lf] ",d_ftq_lst_trd_prc);
			  userlog("Exchange Code[%s] in selection of FTQ ",sql_fcm_xchng_cd);  /* Added in Ver 1.7 */
      }

      c_tkn_nmbr   = '*';


      if(Fneeded32(1,i_buf_len) > Funused32(ptr_fml_Obuffer))
      {
        ptr_fml_Obuffer = (FBFR32 *)tprealloc((char *)ptr_fml_Obuffer,
                                        (Fsizeof32(ptr_fml_Obuffer) + MIN_FML_BUF_LEN));
        if(ptr_fml_Obuffer == NULL)
        {
          errlog(c_ServiceName,"S31240",TPMSG,(char *)c_user_id,li_session_id,c_err_msg);
          Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
        }
      }




      i_err[0]  = Fadd32(ptr_fml_Obuffer,FML_EXPIRY_DATE, (char *)sql_fcm_expry_dt.arr,0);
      i_ferr[0] = Ferror32;
      i_err[1]  = Fadd32(ptr_fml_Obuffer,FML_ORD_STCK_CD, (char *)c_undrlyng,0);
      i_ferr[1] = Ferror32;
      i_err[2]  = Fadd32(ptr_fml_Obuffer,FML_XCHNG_CD, (char *)sql_fcm_xchng_cd,0);
      i_ferr[2] = Ferror32;
      i_err[3]  = Fadd32(ptr_fml_Obuffer,FML_PRDCT_TYP, (char *)&sql_fcm_prdct_typ,0);
      i_ferr[3] = Ferror32;
      i_err[4]  = Fadd32(ptr_fml_Obuffer,FML_ORD_ORDR_FLW, (char *)&sql_fcm_opt_typ,0);
      i_ferr[4] = Ferror32;
      i_err[5]  = Fadd32(ptr_fml_Obuffer,FML_TRADE_PRICE, (char *)&sql_fcm_strk_prc,0);
      i_ferr[5] = Ferror32;
      i_err[6]  = Fadd32(ptr_fml_Obuffer,FML_ST, (char *)&sql_fcm_exer_typ,0);
      i_ferr[6] = Ferror32;
      i_err[7]  = Fadd32(ptr_fml_Obuffer,FML_IDD_LST_QTY, (char *)&sql_fcm_lot_sz,0);
      i_ferr[7] = Ferror32;
      i_err[8]  = Fadd32(ptr_fml_Obuffer,FML_MMD_IND, (char *)&sql_fcm_indstk,0);
      i_ferr[8] = Ferror32;
      i_err[9]  = Fadd32(ptr_fml_Obuffer,FML_TRD_PRC, (char *)&d_ftq_lst_trd_prc,0);
      i_ferr[9] = Ferror32;
      i_err[10]  = Fadd32(ptr_fml_Obuffer,FML_TRD_ORD_FLG, (char *)&sql_fcm_qt_trdng_flg,0);
      i_ferr[10] = Ferror32;
      i_err[11]  = Fadd32(ptr_fml_Obuffer,FML_O_PARTI_CD, (char *)&c_tkn_nmbr,0);
      i_ferr[11] = Ferror32;

      for (i = 0;i < 12 ;i++)
      {
        if(i_err[i] == -1)
        {
          userlog("i :%d:",i);
          errlog(c_ServiceName,"S31245",Fstrerror32(i_ferr[i]),(char *)c_user_id,li_session_id,c_err_msg);
          Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
          tpfree((char *)ptr_fml_Obuffer);
          tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
        }
      }








			
		}	/* End of while */
	}	/* End of c_fnotrans_flg == 'L' */


/**********************  Version 1.4 End ****************************/


/****************  Version 1.4 start   FOR Derivative Chain  ****************************/

  else 	if((c_fnotrans_flg == 'L' && c_fml_rqst_typ == 'Z')) /* to get All Details */
	{

   /*** Added in Ver 2.6 ***/

   long l_bst_bid_prc = 0;
   long l_bst_bid_qty = 0;
   long l_bst_ofr_prc = 0;
   long l_bst_ofr_qty = 0;
   long l_hgh_prc = 0;
   long l_low_prc = 0;
   long l_tot_buy_qty = 0;
   long l_tot_sell_qty = 0;
   long l_lst_trd_qty = 0;
   long l_prcntg_chng = 0;
   long l_prev_close = 0;
   long l_volume = 0;
   long l_opn_prc = 0;

   double d_opn_int = 0.0;
   double d_cls_oi  = 0.0;

   /*** Ver 2.6 Ends ***/
 

		MEMSET(sql_fmw_tkn_nmbr);     /* Added on 28-Feb-2011 for Equity-FNO Token */

		MEMSET(c_xchng_cd);
		/* strcpy(c_xchng_cd,"NFO"); */ /* Commented in Ver 1.7 */
		strcpy(c_xchng_cd,sql_fcm_xchng_cd); /* Added in Ver 1.7 */

		if(DEBUG_MSG_LVL_3)
		{
			userlog("Exchange Code Val [%s]",c_xchng_cd);
		}

    /*** Ver 2.6 Starts ***/

    MEMSET(c_expiry_date);

    if(Fget32(ptr_fml_Ibuffer,FML_EXPIRY_DATE,0,(char *)c_expiry_date,0) == -1)
    {
      if ( Ferror32 == FNOTPRES )
      {
       userlog("Inside Expiry Date FNOTPRES condition");
       strcpy(c_expiry_date,"%");
      }
      else
      {
      userlog("Error in getting Expiry Date");
      errlog(c_ServiceName,"S31250",FMLMSG,(char *)c_user_id,li_session_id,c_err_msg) ;
      Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,c_err_msg,0) ;
      tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuffer,0L,0) ;
      }
    }

    if(DEBUG_MSG_LVL_5)
    {
     userlog(c_ServiceName,"Input Expiry Date Is :%s:",c_expiry_date);
    }

    /*** Ver 2.6 Ends ***/

	
	/*** Commented in Ver 2.2 ***

		EXEC SQL
			DECLARE cur_get_drvt_chain CURSOR FOR
			SELECT   distinct trunc(FCM_EXPRY_DT),
						FCM_UNDRLYNG,
						NVL(FCM_STRK_PRC,0) as PRC,
						FCM_EXER_TYP,
						FCM_LOT_SZ,
						FCM_INDSTK,
						FCM_PRDCT_TYP,
						FCM_OPT_TYP,
						* decode(FCM_XCHNG_CD,'NSE','NFO','NFO'), * * Commented in Ver 1.7 *
						FCM_XCHNG_CD,  * Changed in Ver 1.7 *
						decode(FCM_QT_TRDNG_FLG,'T','Y','N')
						FROM    FCM_FO_CNTRCT_MSTR
			WHERE   FCM_XCHNG_CD  =	:c_xchng_cd
			AND     FCM_UNDRLYNG  = :c_undrlyng
			ORDER BY FCM_OPT_TYP ,FCM_UNDRLYNG,trunc(FCM_EXPRY_DT) ASC; 

	*** Ver 2.2 Comment Ends ***/

	/*** Ver 2.2 Starts ***/

		EXEC SQL
      DECLARE cur_get_drvt_chain CURSOR FOR
      SELECT   distinct trunc(FTQ_EXPRY_DT),
            FTQ_UNDRLYNG,
            NVL(FTQ_STRK_PRC,0) as PRC,
            FTQ_EXER_TYP,
            NVL(FTQ_MIN_LOT_QTY,0),
            FTQ_INDSTK,
            FTQ_PRDCT_TYP,
            FTQ_OPT_TYP,
            FTQ_XCHNG_CD,  
            decode(FTQ_QT_TRDNG_FLG,'T','Y','N'),
            nvl(FTQ_LST_TRD_PRC,0.0),  /*** In Ver 2.6 merged selection of LTP from while loop with this query ***/
            nvl(FTQ_BST1_BID_PRC,0),         /*** Ver 2.6 ***/
            nvl(FTQ_BST1_BID_QTY,0),         /*** Ver 2.6 ***/
            nvl(FTQ_BST1_OFFR_PRC,0),        /*** Ver 2.6 ***/
            nvl(FTQ_BST1_OFFR_QTY,0),        /*** Ver 2.6 ***/
            nvl(FTQ_HGH_PRC,0),              /*** Ver 2.6 ***/
            nvl(FTQ_LOW_PRC,0),              /*** Ver 2.6 ***/
            nvl(FTQ_TOT_BID_QTY,0),          /*** Ver 2.6 ***/
            nvl(FTQ_TOT_OFFR_QTY,0),         /*** Ver 2.6 ***/
            nvl(FTQ_LST_TRD_QTY,0),          /*** Ver 2.6 ***/
            nvl(FTQ_CRNT_OI,0.0),            /*** Ver 2.6 ***/
            nvl(FTQ_CHNG_PRVS_CLS,0),        /*** Ver 2.6 ***/
            nvl(FTQ_CLS_PRC,0),              /*** Ver 2.6 ***/
            nvl(FTQ_TOT_QTY_TRDD,0),         /*** Ver 2.6 ***/
            nvl(FTQ_OPN_PRC,0),              /*** Ver 2.6 ***/
            nvl(FTQ_CLS_OI,0)                /*** Ver 2.6 ***/
            FROM    FTQ_FO_TRD_QT
      WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
      AND     FTQ_UNDRLYNG  = :c_undrlyng
			AND     ftq_EXPRY_DT <= ( select max(ftq_expry_dt)
                              from ftq_fo_trd_qt
                              where ftq_prdct_typ ='F' and ftq_UNDRLYNG  = 'NIFTY')
      AND     FTQ_EXPRY_DT like :c_expiry_date  /*** Added in Ver 2.6 ***/
      ORDER BY FTQ_OPT_TYP ,FTQ_UNDRLYNG,trunc(FTQ_EXPRY_DT) ASC;

	/*** Ver 2.2 Ends ***/
		EXEC SQL
			OPEN cur_get_drvt_chain;

    if(SQLCODE != 0)
    {
			userlog("Failed in getting record for Underlying:<%s>- SQL-ERROR<%ld> ",c_undrlyng, SQLCODE );
    	errlog(c_ServiceName,"S31255",SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
      EXEC SQL CLOSE cur_get_drvt_chain;
      Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Obuffer);
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
    }
		
		i_buf_len = sizeof(sql_fcm_expry_dt) +	
			    	   sizeof(sql_fcm_undrlyng) +
			    		 sizeof(sql_fcm_strk_prc) +
			   			 sizeof(sql_fcm_exer_typ)+
			    		 sizeof(sql_fcm_lot_sz)+
			    		 sizeof(sql_fcm_indstk)+
			    		 sizeof(d_ftq_lst_trd_prc)+
			    		 sizeof(c_tkn_nmbr)+
			    		 sizeof(sql_fcm_xchng_cd)+			    
			    	   sizeof(sql_fcm_prdct_typ)+			    
			    		 sizeof(sql_fcm_opt_typ)+
			    		 sizeof(sql_fcm_qt_trdng_flg) +
               /*** Ver 2.6 Starts ***/
               sizeof(d_ftq_lst_trd_prc) +
               sizeof(l_bst_bid_prc) +
               sizeof(l_bst_bid_qty) +
               sizeof(l_bst_ofr_prc) +
               sizeof(l_bst_ofr_qty) +
               sizeof(l_hgh_prc) +
               sizeof(l_low_prc) +
               sizeof(l_tot_buy_qty) +
               sizeof(l_tot_sell_qty) +
               sizeof(l_lst_trd_qty) +
               sizeof(d_opn_int) +
               sizeof(l_prcntg_chng) +
               sizeof(l_prev_close) +
               sizeof(l_volume) +
               sizeof(l_opn_prc) +
               sizeof(d_cls_oi) +
               /*** Ver 2.6 Ends ***/              
               512;	

		while(1)
		{
			EXEC SQL
				FETCH cur_get_drvt_chain
				INTO  :sql_fcm_expry_dt,
				      :sql_fcm_undrlyng,
				      :sql_fcm_strk_prc,
				      :sql_fcm_exer_typ,
				      :sql_fcm_lot_sz,
				      :sql_fcm_indstk,
				      :sql_fcm_prdct_typ,
				      :sql_fcm_opt_typ,
				      :sql_fcm_xchng_cd,
							:sql_fcm_qt_trdng_flg,
              :d_ftq_lst_trd_prc,         /*** Ver 2.6 ***/
              :l_bst_bid_prc,             /*** Ver 2.6 ***/
              :l_bst_bid_qty,             /*** Ver 2.6 ***/
              :l_bst_ofr_prc,             /*** Ver 2.6 ***/
              :l_bst_ofr_qty,             /*** Ver 2.6 ***/
              :l_hgh_prc,                 /*** Ver 2.6 ***/
              :l_low_prc,                 /*** Ver 2.6 ***/
              :l_tot_buy_qty,             /*** Ver 2.6 ***/
              :l_tot_sell_qty,            /*** Ver 2.6 ***/
              :l_lst_trd_qty,             /*** Ver 2.6 ***/
              :d_opn_int,                 /*** Ver 2.6 ***/
              :l_prcntg_chng,             /*** Ver 2.6 ***/
              :l_prev_close,              /*** Ver 2.6 ***/
              :l_volume,                  /*** Ver 2.6 ***/
              :l_opn_prc,                 /*** Ver 2.6 ***/
              :d_cls_oi ;                 /*** Ver 2.6 ***/

			if(SQLCODE != 0)
			{
				if(SQLCODE == NO_DATA_FOUND)
				{	
					EXEC SQL CLOSE cur_get_drvt_chain;
					userlog("End of records in Cursor-All_Details - Total Records<%ld>",sqlca.sqlerrd[2]);
					break;
				}
      	userlog("Failed in fetching All details ");
      	errlog(c_ServiceName,"S31260",SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
      	EXEC SQL CLOSE cur_get_drvt_chain;
      	tpfree((char *)ptr_fml_Obuffer);
      	Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
			}

			SETNULL(sql_fcm_expry_dt);

			if(DEBUG_MSG_LVL_3)
			{
				userlog("Exchange Code [%s]",sql_fcm_xchng_cd);
				userlog("Expiry date 	 [%s]",sql_fcm_expry_dt.arr);	
				userlog("Trading Flag	 [%c]",sql_fcm_qt_trdng_flg);	
				userlog("Underlying [%s]",sql_fcm_undrlyng);
				userlog("Strike Price 	 [%f]",sql_fcm_strk_prc);	
				userlog("Exercise Type	 [%c]",sql_fcm_exer_typ);	
				userlog("Lot Size 	 [%d]",sql_fcm_lot_sz);	
				userlog("Ind/Stk Indicator	 [%c]",sql_fcm_indstk);	
				userlog("Product Type 	 [%c]",sql_fcm_prdct_typ);	
				userlog("Option Type	 [%c]",sql_fcm_opt_typ);	

			}

    /*** Commented in Ver 2.6 and LTP selected in above query ***

  		EXEC SQL
				SELECT nvl(FTQ_LST_TRD_PRC,'0')
			  INTO :d_ftq_lst_trd_prc 
				FROM FTQ_FO_TRD_QT 
				* WHERE FTQ_XCHNG_CD ='NFO' * * Commented in Ver 1.7 *
				WHERE FTQ_XCHNG_CD = :sql_fcm_xchng_cd * Changed in Ver 1.7 *
				AND   FTQ_UNDRLYNG =  :c_undrlyng 
			  AND   FTQ_PRDCT_TYP = :sql_fcm_prdct_typ
				AND   trunc(FTQ_EXPRY_DT) = to_date(:sql_fcm_expry_dt,'DD-Mon-YYYY')
				AND   FTQ_STRK_PRC = :sql_fcm_strk_prc
				AND   FTQ_EXER_TYP = :sql_fcm_exer_typ
				AND   FTQ_OPT_TYP = :sql_fcm_opt_typ;
     
     *** Ver 2.6 Comment Ends ***/ 

      if(DEBUG_MSG_LVL_3)
      {
        userlog("Underlying [%s] ",c_undrlyng);
        userlog("Product Type[%c] ",sql_fcm_prdct_typ);
        userlog("Expry dt[%s] ",sql_fcm_expry_dt.arr);
        userlog("Option type[%c] ",sql_fcm_opt_typ);
	      userlog("Exercise type in selection[%c] ",sql_fcm_exer_typ);
        userlog("Strike Price[%lf] ",sql_fcm_strk_prc);
        userlog("Last Traded Price After Select: [%lf] ",d_ftq_lst_trd_prc);
			  userlog("Exchange code in selection--[%s] ",sql_fcm_xchng_cd); /* Added in ver 1.7 */
      }

      /************************************************************************************************/
      /*                     Added on 28-Feb-2011   for Equity- FNO Token Generation   Starts                 */
      /************************************************************************************************/

        if(sql_fcm_indstk == 'I')
        {

	  /** Added below on 17-Jul-2012 for Token generation for INDEX **/
	  if (strcmp(sql_fcm_xchng_cd,"NFO")== 0)
	  {
          EXEC SQL
               SELECT NVL(SEM_MAP_VL,'*')
               INTO   :sql_fmw_tkn_nmbr
               FROM   SEM_STCK_MAP,
                      STK_STK_MSTR
               WHERE  SEM_ENTTY='12' 
               AND    SEM_STCK_CD = STK_STCK_CD
               AND    STK_STCK_CD = :sql_fcm_undrlyng;

          if( SQLCODE != 0 )
          {
            if ( SQLCODE == NO_DATA_FOUND )
            {
              MEMSET(sql_fmw_tkn_nmbr);
            }
            else            
            {
              errlog ( c_ServiceName, "S31265", SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
              Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
              tpfree((char *)ptr_fml_Obuffer);
              tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
            } 
          }
          SETNULL(sql_fmw_tkn_nmbr); 
	  userlog("Val of Equity-sql_fmw_tkn_nmbr in Stock List for FNO-STOCK <%s>",sql_fmw_tkn_nmbr.arr);

	  }

	  if (strcmp(sql_fcm_xchng_cd,"BFO")== 0)
	  {
          EXEC SQL
               SELECT NVL(SEM_MAP_VL,'*')
               INTO   :c_fmw_tkn_nmbr_bse
               FROM   SEM_STCK_MAP,
                      STK_STK_MSTR
               WHERE  SEM_ENTTY='12' 
               AND    SEM_STCK_CD = STK_STCK_CD
               AND    STK_STCK_CD = :sql_fcm_undrlyng;

          if( SQLCODE != 0 )
          {
            if ( SQLCODE == NO_DATA_FOUND )
            {
              MEMSET(c_fmw_tkn_nmbr_bse);
            }
            else            
            {
              errlog ( c_ServiceName, "S31270", SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
              Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
              tpfree((char *)ptr_fml_Obuffer);
              tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
            } 
          }
	 SETNULL(c_fmw_tkn_nmbr_bse); 
         userlog("Val of Equity-c_fmw_tkn_nmbr_bse in Stock List for FNO-STOCK <%s>",c_fmw_tkn_nmbr_bse.arr);
	  }   


	strcat(sql_fmw_tkn_nmbr.arr, ";" );  /** Added in ver 1.7 **/
	strcat(sql_fmw_tkn_nmbr.arr, c_fmw_tkn_nmbr_bse.arr );  /** Added in ver 1.7 **/
  
        if(DEBUG_MSG_LVL_3)
        {
          userlog("Val of Equity-sql_fmw_tkn_nmbr in Stock List for FNO-STOCK <%s>",sql_fmw_tkn_nmbr.arr);
        }


        }
        else
        {
          
	  
					/*********** Commented in Ver 1.6 ******

          EXEC SQL
               SELECT NVL(SEM_MAP_VL||ESM_XCHNG_SERIES,'*')
               INTO :sql_fmw_tkn_nmbr
               FROM SEM_STCK_MAP,ESM_XCHNG_SGMNT_MSTR,ESS_SGMNT_STCK,STK_STK_MSTR
               WHERE SEM_STCK_CD = :sql_fcm_undrlyng
               AND ESM_XCHNG_CD ='NSE'
               AND ESS_STCK_CD = SEM_STCK_CD
               AND ESS_STCK_CD = STK_STCK_CD
               AND ESS_XCHNG_CD = ESM_XCHNG_CD
               AND ESS_XCHNG_SGMNT_CD = ESM_SGMNT_CD
               AND SEM_ENTTY =1;
					*************/
					
					/********* Ver 1.6 Starts *********/

          EXEC SQL
               SELECT  NVL(SEM_MAP_VL||ESS_XCHNG_SUB_SERIES,'*')
               INTO :sql_fmw_tkn_nmbr
               FROM SEM_STCK_MAP,
                    ESS_SGMNT_STCK,
                    STK_STK_MSTR
               WHERE SEM_STCK_CD = :sql_fcm_undrlyng
               /* AND ESS_XCHNG_CD ='NSE' */ /** Commented in Ver 1.7 **/
	       			 AND ESS_XCHNG_CD = decode(:sql_fcm_xchng_cd,'NFO','NSE') /* Added in Ver 1.7 */
               AND ESS_STCK_CD = SEM_STCK_CD
               AND ESS_STCK_CD = STK_STCK_CD
               /* AND SEM_ENTTY =1 */  /** Commented in Ver 1.7 **/
	      			 AND SEM_ENTTY = decode(:sql_fcm_xchng_cd,'NFO','1'); /* Added in Ver 1.7 */

          /********* Ver 1.6 Ends *************/
          if( SQLCODE != 0 )
          {
            if ( SQLCODE == NO_DATA_FOUND )
            {
              MEMSET(sql_fmw_tkn_nmbr);
            }
            else
            {
              errlog ( c_ServiceName, "S31275", SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
              Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
              tpfree((char *)ptr_fml_Obuffer);
              tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
            }
          } 

					 /********* Ver 1.7 Starts *********/

          EXEC SQL
               SELECT  NVL(SEM_MAP_VL,'*')
               INTO :c_fmw_tkn_nmbr_bse
               FROM SEM_STCK_MAP,
                    ESS_SGMNT_STCK,
                    STK_STK_MSTR
               WHERE SEM_STCK_CD = :sql_fcm_undrlyng
               AND ESS_XCHNG_CD = decode(:sql_fcm_xchng_cd,'BFO','BSE') /* Added in Ver 1.7 */
               AND ESS_STCK_CD = SEM_STCK_CD
               AND ESS_STCK_CD = STK_STCK_CD
               AND SEM_ENTTY = decode(:sql_fcm_xchng_cd,'BFO','6'); /* Added in Ver 1.7 */

          if( SQLCODE != 0 )
          {
            if ( SQLCODE == NO_DATA_FOUND )
            {
              MEMSET(c_fmw_tkn_nmbr_bse);
            }
            else
            {
              errlog ( c_ServiceName, "S31280", SQLMSG,(char *)c_user_id,li_session_id,c_err_msg);
              Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
              tpfree((char *)ptr_fml_Obuffer);
              tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
            }
          } 
	 				SETNULL(c_fmw_tkn_nmbr_bse); 
	  			userlog("Val of Equity-c_fmw_tkn_nmbr_bse in Stock List for FNO <%s>",c_fmw_tkn_nmbr_bse.arr);

          /********* Ver 1.7 Ends *************/

        }  
        SETNULL(sql_fmw_tkn_nmbr); 

	strcat(sql_fmw_tkn_nmbr.arr, ";" );  /** Added in ver 1.7 **/
	strcat(sql_fmw_tkn_nmbr.arr, c_fmw_tkn_nmbr_bse.arr );  /** Added in ver 1.7 **/
  
        if(DEBUG_MSG_LVL_3)
        {
          userlog("Val of Equity-sql_fmw_tkn_nmbr in Stock List for FNO <%s>",sql_fmw_tkn_nmbr.arr);
        }

        if(DEBUG_MSG_LVL_3)
        {
         userlog("Before Token Generation Product Type[%c] ",sql_fcm_prdct_typ);
         userlog("Before Token Generation Expry dt[%s] ",sql_fcm_expry_dt.arr);
         userlog("Before Token Generation Option type[%c] ",sql_fcm_opt_typ);
	       userlog("Before Token Generation Exercise type in selection[%c] ",sql_fcm_exer_typ);
         userlog("Before Token Generation Strike Price[%lf] ",sql_fcm_strk_prc);
	      }


      /************************************************************************************************/
      /*                     Added on 28-Feb-2011   for FNO Token Generation   Ends                   */
      /************************************************************************************************/

      /* c_tkn_nmbr = '*';  */   /* Commented on 28-Feb-2011 to generate proper Token Number for FNO */


      if(Fneeded32(1,i_buf_len) > Funused32(ptr_fml_Obuffer))
      {
        ptr_fml_Obuffer = (FBFR32 *)tprealloc((char *)ptr_fml_Obuffer,
                                        (Fsizeof32(ptr_fml_Obuffer) + MIN_FML_BUF_LEN));
        if(ptr_fml_Obuffer == NULL)
        {
          errlog(c_ServiceName,"S31285",TPMSG,(char *)c_user_id,li_session_id,c_err_msg);
          Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
        }
      }


      rtrim(sql_fmw_tkn_nmbr.arr);      /***  Ver 2.6 ***/

      i_err[0]  = Fadd32(ptr_fml_Obuffer,FML_EXPIRY_DATE, (char *)sql_fcm_expry_dt.arr,0);
      i_ferr[0] = Ferror32;
      i_err[1]  = Fadd32(ptr_fml_Obuffer,FML_ORD_STCK_CD, (char *)c_undrlyng,0);
      i_ferr[1] = Ferror32;
      i_err[2]  = Fadd32(ptr_fml_Obuffer,FML_XCHNG_CD, (char *)sql_fcm_xchng_cd,0);
      i_ferr[2] = Ferror32;
      i_err[3]  = Fadd32(ptr_fml_Obuffer,FML_PRDCT_TYP, (char *)&sql_fcm_prdct_typ,0);
      i_ferr[3] = Ferror32;
      i_err[4]  = Fadd32(ptr_fml_Obuffer,FML_ORD_ORDR_FLW, (char *)&sql_fcm_opt_typ,0);
      i_ferr[4] = Ferror32;
      i_err[5]  = Fadd32(ptr_fml_Obuffer,FML_TRADE_PRICE, (char *)&sql_fcm_strk_prc,0);
      i_ferr[5] = Ferror32;
      i_err[6]  = Fadd32(ptr_fml_Obuffer,FML_ST, (char *)&sql_fcm_exer_typ,0);
      i_ferr[6] = Ferror32;
      i_err[7]  = Fadd32(ptr_fml_Obuffer,FML_IDD_LST_QTY, (char *)&sql_fcm_lot_sz,0);
      i_ferr[7] = Ferror32;
      i_err[8]  = Fadd32(ptr_fml_Obuffer,FML_MMD_IND, (char *)&sql_fcm_indstk,0);
      i_ferr[8] = Ferror32;
      i_err[9]  = Fadd32(ptr_fml_Obuffer,FML_TRD_PRC, (char *)&d_ftq_lst_trd_prc,0);
      i_ferr[9] = Ferror32;
      i_err[10]  = Fadd32(ptr_fml_Obuffer,FML_TRD_ORD_FLG, (char *)&sql_fcm_qt_trdng_flg,0);
      i_ferr[10] = Ferror32;
      i_err[11]  = Fadd32(ptr_fml_Obuffer,FML_O_PARTI_CD, (char *)sql_fmw_tkn_nmbr.arr,0);
      i_ferr[11] = Ferror32;

      /*** Added in Ver 2.6 ***/

      i_err[12]  = Fadd32(ptr_fml_Obuffer,FML_TRN_NO, (char *)&l_bst_bid_prc,0);
      i_ferr[12]  = Ferror32;
      i_err[13]  = Fadd32(ptr_fml_Obuffer,FML_IDD_BST_BID_QTY, (char *)&l_bst_bid_qty,0);
      i_ferr[13] = Ferror32;
      i_err[14]  = Fadd32(ptr_fml_Obuffer,FML_O_AUC_NO, (char *)&l_bst_ofr_prc,0);
      i_ferr[14]  = Ferror32;
      i_err[15]  = Fadd32(ptr_fml_Obuffer,FML_IDD_BST_OFFR_QTY, (char *)&l_bst_ofr_qty,0);
      i_ferr[15]  = Ferror32;
      i_err[16]  = Fadd32(ptr_fml_Obuffer,FML_NN_ADVANCES, (char *)&l_hgh_prc,0);
      i_ferr[16]  = Ferror32;
      i_err[17]  = Fadd32(ptr_fml_Obuffer,FML_NN_DECLINES, (char *)&l_low_prc,0);
      i_ferr[17]  = Ferror32;
      i_err[18]  = Fadd32(ptr_fml_Obuffer,FML_TOTAL_BUY, (char *)&l_tot_buy_qty,0);
      i_ferr[18]  = Ferror32;
      i_err[19]  = Fadd32(ptr_fml_Obuffer,FML_TOTAL_SELL, (char *)&l_tot_sell_qty,0);
      i_ferr[19] = Ferror32;
      i_err[20]  = Fadd32(ptr_fml_Obuffer,FML_ALLWD_LRV, (char *)&l_lst_trd_qty,0);
      i_ferr[20]  = Ferror32;
      i_err[21]  = Fadd32(ptr_fml_Obuffer,FML_RT, (char *)&d_opn_int,0);
      i_ferr[21]  = Ferror32;
      i_err[22]  = Fadd32(ptr_fml_Obuffer,FML_TRD_XCHNG_RFRNC, (char *)&l_prcntg_chng,0);
      i_ferr[22]  = Ferror32;
      i_err[23]  = Fadd32(ptr_fml_Obuffer,FML_BOOK_CLS_ST_DT, (char *)&l_prev_close,0);
      i_ferr[23]  = Ferror32;
      i_err[24]  = Fadd32(ptr_fml_Obuffer,FML_IDD_VLME, (char *)&l_volume,0);
      i_ferr[24]  = Ferror32;
      i_err[25]  = Fadd32(ptr_fml_Obuffer,FML_OPEN_QTY, (char *)&l_opn_prc,0);
      i_ferr[25]  = Ferror32;
      i_err[26]  = Fadd32(ptr_fml_Obuffer,FML_CLS_RT, (char *)&d_cls_oi,0);
      i_ferr[26]  = Ferror32;
      
      /*** Ver 2.6 Ends ***/

      for (i = 0;i < 27 ;i++)  /*** Changed to 27 from 12 in Ver 2.6 ***/
      {
        if(i_err[i] == -1)
        {
          userlog("i :%d:",i);
          errlog(c_ServiceName,"S31290",Fstrerror32(i_ferr[i]),(char *)c_user_id,li_session_id,c_err_msg);
          Fadd32( ptr_fml_Ibuffer,FML_ERR_MSG, c_err_msg, 0 );
          tpfree((char *)ptr_fml_Obuffer);
          tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
        }
      }


	
		}	/* End of while */
	}	/* End of c_fnotrans_flg == 'L' */


/**********************  Version 1.4 End Derivative Chain ****************************/

  if(DEBUG_MSG_LVL_3)
  {
  	userlog ( " Service SVC_FNO_FAVSTCK  runs fine for client : |%s| ", c_user_id);
  }

  tpreturn(TPSUCCESS, 0, (char *)ptr_fml_Obuffer, 0L, 0); 
}

