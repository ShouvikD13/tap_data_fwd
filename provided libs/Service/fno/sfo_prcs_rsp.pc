/******************************************************************************/
/*  Program           : SFO_PRCS_RSP                                          */
/*                                                                            */
/*  Input             : vw_xchngbook                                          */
/*                                                                            */
/*  Output            : vw_err_msg                                            */
/*                                                                            */
/*  Description       : This service updates the order book, exchange book,   */
/*                      positions  on getting Response from the Exchange      */
/*                      Futures/option  orders placed by SPAN customers.      */
/*                      The various response got from the Exchange are:       */
/*                                                                            */
/*                        ORS_NEW_ORD_ACPT                                    */
/*                        ORS_NEW_ORD_RJCT                                    */
/*                        ORS_MOD_ORD_ACPT                                    */
/*                        ORS_MOD_ORD_RJCT                                    */
/*                        ORS_CAN_ORD_ACPT                                    */
/*                        ORS_CAN_ORD_RJCT                                    */
/*                        ORS_ORD_EXP                                         */
/*                        ORS_SPD_ORD_CNCL                                    */
/*                        ORS_2L_ORD_CNCL                                     */
/*                        ORS_3L_ORD_CNCL                                     */
/*                                                                            */
/*  Log               : 1.0   13-Jun-2011   																	*/
/*  Log               : 1.1   02-Apr-2012   																	*/
/*  Log               : 1.2   09-Oct-2012                                     */
/*                    : 1.3   28-Sep-2012                                     */
/*                    : 1.4   29-Nov-2012                                     */
/*                    : 1.5   11-Dec-2012                                     */
/*                    : 1.6   08-May-2013                                     */
/*                    : 1.7   18-Jun-2013                                     */
/*                    : 1.8   18-Jul-2013                                     */
/*                    : 1.9   18-Feb-2013                                     */
/*                    : 2.0   18-Sep-2013                                     */
/*                    : 2.1		21-Jan-2014																			*/
/*                    : 2.2		09-Jun-2014																			*/
/*                    : 2.3   20-Jun-2014			                                */
/*                    : 2.4  	07-Mar-2015		                                  */
/*										: 2.5   05-Aug-2015																			*/
/*										: 2.6   13-Oct-2015																			*/
/*										: 2.7   15-Jan-2016																			*/
/*                    : 2.8   23-Nov-2015                                     */
/*										: 2.9   15-Mar-2016																			*/
/*                    : 3.0   05-May-2016                                     */
/*                    : 3.1   19-May-2016                                     */
/*                    : 3.2   24-May-2016                                     */
/*                    : 3.3   22-Jun-2016                                     */
/*                    : 3.4   31-Aug-2016                                     */
/*                    : 3.5   08-Sep-2016                                     */
/*                    : 3.6   07-Nov-2016                                     */
/*										: 3.7		22-Nov-2016																			*/
/*                    : 3.8   22-Dec-2016                                     */
/*  Log               : 3.9   24-Jul-2017   																	*/
/*										: 4.0		07-Aug-2017																			*/
/*  Log               : 4.1   24-Oct-2017                                     */
/*  Log               : 4.3   12-Apr-2018                                     */
/*	Log								: 4.4		16-Aug-2018																			*/
/*  Log               : 4.5   10-Oct-2018                                     */
/*  Log               : 4.7   16-Jan-2019                                     */
/*                    : 4.8   16-Mar-2018                                     */
/*	Log								: 4.9		01-Apr-2019																			*/
/*  Log               : 5.1   08-May-2019                                     */
/*  Log               : 5.2   08-May-2019                                     */
/*  Log               : 5.3   24-Jul-2019                                     */
/*  Log               : 5.4   17-Oct-2019                                     */
/*  Log               : VQC   24-Dec-2019                                     */
/*  Log               : 5.5   18-Mar-2020                                     */
/*  Log               : 5.6   30-Jan-2020                                     */
/*  Log               : 5.7   15-Jul-2020                                     */
/*  Log               : 5.8   15-Sep-2020                                     */
/*  Log               : 5.9   05-OCT-2020                                     */
/*  Log               : 6.0   24-Dec-2020   Mrinal Kishore                    */
/*  Log               : 6.1   01-JAN-2021   Suchita Dabir                     */
/*  Log               : 6.2   02-Feb-2021                                     */
/*  Log               : 6.3   12-JUL-2021                                      */
/*	Log								:	6.4		25-oct-2021																			*/
/*	Log								:	6.5		16-Feb-2022																			*/
/*	Log								:	6.6		14-Jul-2022																			*/
/*	Log								:	6.7		14-Jul-2022																			*/
/*  Log               : 6.8   15-Jul-2022                                     */
/*  Log               : 6.9   22-Dec-2022                                     */
/*  Log               : 7.0   01-Feb-2023																			*/
/*  Log               : 7.1   07-Mar-2023																			*/
/*  Log               : 7.2   12-Apr-2023                                     */ 
/*  Log               : 7.3   24-Jun-2023                                     */ 
/******************************************************************************/
/*                                                                            */
/*  1.0   -   New Release                                                     */
/*  1.1   -   Bug Fix     (Swati A.B)                                         */
/*  1.2   -   Bug fix for Auto square off without running                     */   
/*            IMTM Square off process  (Navina D.)	                          */
/*  1.3   -   CR-ISEC14-33503 (IOC/2L/3L/Freeze Order Handling) (Swati A.B)   */
/*  1.4   -   BSE SPAN CHANGES (Sandip Tambe)                                 */
/*  1.5   -   SLTP FuturePLUS handling (Navina D.)                            */
/*  1.6   -   Balance amount bug fix (Navina D.)                              */
/*  1.7   -   SPAN Bug CHANGES for reading string (mahesh Shinde)             */
/*  1.8   -   Cancellation response processing and trigger of square off to be*/
/*            processed in separate transaction in sltp F+                    */
/*  1.9   -   Exchange initiated expiry (Navina D.)   					              */
/*  2.0   -   OptionPLUS handling (Swati A.B )                                */
/*  2.1		-		Contract Note Changes (Bhushan Sonwane)													*/
/*  2.2   -   Exception EOS for FP SLTP & OptionPLUS                          */
/*  2.3		-		SLTP Order modification Remarks Changes													*/
/*  2.4  -    character array c_sys_msg size changed from 4 to 11(Live Bug Fix) */
/*            (Ritesh Deolekar)                                               */
/*  2.5   -   SLTP FuturePLUS handling for order expiry	(Tanmay)							*/
/*  2.6   -   Optionplus handling for order expiry	(Aakash)									*/
/*  2.7  -	  Bug Fix for Unprocessed Trade Case (Bhupendra/Akash             */
/*  2.8   -   Core Fix (Bhupendra Malik)                                      */
/*	2.9	 -  Processing trades on functional exit and Core product lock      	*/		 
/*  3.0   -   Check for Self Ack                                              */
/*  3.1   -   Log Maintainance (Kishor B.)																		*/
/*  3.2   -   core fix (Bhupendra Malik)                                      */
/*  3.3   -   Changes for spread order acceptance                             */
/*  3.4   -   My Eos Changes  (Bhupendra Malik)                               */
/*  3.5   -   Future SLTP trail Order Changes((Sachin Birje)                  */
/*  3.6   -   fn_prcs_trade moved in fn_ors_rms(Kishor B)                     */
/*	3.7		-		Maximum order Quantity Limit in F&O(Kishor B)                   */
/*  3.8   -   Core Fix & Fill Qty Fetch (Bhupendra Malik/Tanmay W. )          */
/*  3.9   -   Service call with TPNOTRAN and TPNOREPLY options                */
/*	4.0		-		core fix (Bhushan Harekar)																			*/
/*  4.1   -		BankNifty client issue changes(Mrinal Kishore)									*/
/*  4.3   -   Order Rejection Status Clash With My EOS Changes(Mrinal Kishore)*/
/*	4.4		- 	Order Expiry Issues	( Bhushan Harekar )													*/
/*  4.5   -   Double margin debit ( Suchita Dabir )                           */
/*  4.7   -   Using traded quantity available in cancellation response packet */
/*            for solicited cancellation response processing( Suchita Dabir)  */
/*  4.8   -   Rollover with spread changes ( Suchita Dabir )                  */
/*	4.9		-   FO Direct Connectivity Changes ( Bhushan Harekar )							*/
/*  5.1   -   Handling of Margin Release on Order Rejection in                */
/*            FPSL & OP due to Quantity Freeze ( Suchita Dabir )              */
/*  5.2  -  Handling for extra open position caused                           */
/*          by multiple triggers of exception EOS( Suchita Dabir )            */
/*  5.3  -  Physical delivery margin changes ( Kiran Itkar )                  */
/*  5.4  -  Input string size change CR-ISEC14-128972 ( Tanmay )              */
/*  VQC  -    VQC (Mrinal Kishore & Susmita M)                                */
/*  5.5  -   FPSL Margin Changes  ( Akash B )                                 */
/*  5.6  -  Handling for extra open position unsolicited cancellation(Suchita)*/
/*  5.7  -   Core Fix (Mrinal Kishore)                                        */
/*  5.8  -  Trigger Price changes (Suchita)                                   */
/*  5.9  -  Oplus changes(Suchita)                                            */
/*  6.0  -  Rollover with Spread P-Executed Cancellation Bug Fix - Mrinal K.  */
/*  6.1  -  Allowing cancellation in case of insufficient limits - Suchita D. */ 
/*  6.2  -  Separate EOS for Stock and Index Underlyings in FPSL - Kiran Itkar*/
/*  6.3  -  CR_ISEC04_132410 changes - Suchita        */
/*	6.4	 -  CR-ISEC14-150750 FPSL Profit Order - Shlok 												*/
/*	6.5	 -  Core fix for buffer free when cntrct cnt >10 											*/
/*  6.6  -  CR-ISEC14-170192 Otions premium for Fresh Option buy( Suchita Dabir)*/
/*  6.7  -  SPAN_BOD_MRGN_CR-ISEC14-172812 (Sachin Birje)                     */
/*  6.8  -  LODM Minor changes ( Suchita Dabir )                              */
/*  6.9  -  Flash Trade OptionPlus ( Ravi Malla )                              */
/*  7.0  -  Bug Fix for FCP selection - Mahesh Shinde													*/
/*  7.1  -  Changes for Client level lock - Samip M														*/
/*  7.2  -  Margin reporting regulatory changes: Dipin                        */
/*  7.3  -  RQ:3117 FO GTT changes : Edwin Thomas                             */
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <time.h>
#include <fo.h>
#include <eba_to_ors.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fn_log.h>
#include <fn_ddr.h>
#include <fn_session.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>
#include <fn_span_lib.h>
#include <fn_pos.h>
#include <math.h>
#include <fo_spn_rcv_lib.h> /**** Added in ver 3.3 ***/
#include <fn_ors_rms.h>     /**** Added in ver 3.6 ***/
/* COMMENTED IN VER TOL : TUX on LINUX (Ravindra) * #include <fo_view_def.h> ** ver 4.8 **/

/*** int fn_prcs_trade(char *c_ServiceName,char *c_err_msg ,char c_prd_typ, char* c_ordr_rfrnc ,char* c_sltp_ord_rfrnc); Commented in Ver 3.6 *** Ver 2.7 ***/

EXEC SQL INCLUDE "table/fum_fo_undrlyng_mstr.h";    /*** Ver 1.5 ***/

void SFO_PRCS_RSP( TPSVCINFO *rqst )
{  

	FBFR32 *ptr_fml_Ibuf = NULL;									/** Intialized in VQC **/	
  FBFR32 *ptr_fml_Obuf = NULL;									/** Intialized in VQC **/
	FBFR32 *ptr_fml_Sbuf = NULL; /*** Ver 2.5 ***//** Intialized in VQC **/	
	ptr_fml_Sbuf  = ( FBFR32 *)NULL; /*** Ver 2.5 ***/

	char     c_ServiceName[33];

  char     c_run_mode[2]="\0"; /** ver 6.1 **/

  /* char     c_err_msg[256];              	    Commented in VQC */
	varchar     c_err_msg[256];     							/** Converted to varchar in VQC **/
	/* char     c_imtm_remarks[256];              Commented in VQC */
	varchar     c_imtm_remarks[256] = {'\0'};  	/** Initialized in VQC **/
	/** varchar  c_xchng_rmrks[2000];  Commented in Ver 4.0 **/
	

	int     i_trnsctn=0;												/** Variable initialized in VQC **/
	int     i_returncode =0;										/** Variable initialized in VQC **/
	/*** Commented in Ver 4.0 Starts ***
	int     i_ip_len;			
	int     i_op_len; 					
	*** Ver 4.0 Ends	***/

  int  i_canrej_flag = 1; /*** ver 4.5 ***/ 

	int     i_expsr_rtrn =0 ;
	short int si_null = 0;											/** Variable initialized in VQC **/

	long    l_ftd_trd_qty = 0;
  /** commented in ver 4.7 long    l_ftd_qty     = 0; **/ 
	long    l_basket_id   = 0;  
  long 		l_max_allowed_qty = 0 ; /*** Ver 3.7 ***/

	char    c_tag [ 256 ]="\0";									/** Variable initialized in VQC **/	
	/*** char    c_svc_name [15+1];  Commented in Ver 4.0 ***/	             
	char  	c_prc_flg = 'N';
	/*char    c_command[100];  		*** Ver 4.1 ***
	char  	c_mail_remarks[100]; 	** ver 4.1 ***  converted to varchar in VQC **/	
	varchar	c_command[250] = {'\0'};          	/*** converted to varchar in VQC ***/
	varchar c_mail_remarks[100] = {'\0'};     	/*** converted to varchar in VQC ***/

	/** added variables **/
	/** char    c_cntrct_tag;  Commented in Ver 4.0 **/
	char    c_mtm_flag='\0';					/** Variable initialized in VQC **/
	char    c_pos_avl='\0';						/** Variable initialized in VQC **/
	varchar c_exp_dt[LEN_DATE];
	varchar c_xchng_cd [20];

	int 		i_xchngbkerr[7];   /*** Ver 1.3 -- changed array size  6 to 7 ***/
	int 		i_ferr[7];         /*** Ver 1.3 -- changed array sized 6 to 7 ***/
	int 		i;
	int   i_commit_flg = 0;		/*** Ver 1.8 ***/

	/*** Following Added for Rejection Case ***/
	double  d_ltp           = 0.0;
	/*long    l_strike_prc    = 0;*/		/*** Ver 1.1 ***/
	char    c_expry_dt[10];
	long    l_max_opn_qty   = 0;
	long    l_min_opn_qty   = 0;
	long    l_temp_qty      = 0;
	char    c_inp_strng1[ 16000 ];  /*** changed from 8000 to 16000 in Ver 5.4 ***/
	char    c_inp_strng2[ 16000 ];   /*** changed from 8000 to 16000 in Ver 5.4 ***/
	char    c_inp_strng11[ 16000 ];  /*** changed from 8000 to 16000 in Ver 5.4 ***/
	char    c_inp_strng22[ 16000 ];  /*** changed from 8000 to 16000 in Ver 5.4 ***/
	long    l_prtfl_seq1    = 0; 
	long    l_prtfl_seq2    = 0;
	char    c_seq_num1[12000]= "\0";	/** Variable initialized in VQC **/	
	char    c_seq_num2[12000]= "\0";	/** Variable initialized in VQC **/
	/*** Commented in Ver 4.0 Starts ***
 	char 		c_sltp_ord_rfrnc_lck[2][19];	*** Ver 2.6 *** 
  char 		c_ordr_rfrnc_lck[2][19];    
 	char 		c_cvr_prd_typ = '\0';       
  int 		i_status = 0;              *** Ver 2.6 ***
	*** Ver 4.0 Ends ***/
	char    c_inp_strng[ 16000 ];
	char    c_pipe_id[3]="\0";					/** Variable initialized in VQC **/	
	long    l_cntr  = 0;
	long    l_length1 = 0;
	long    l_length2 = 0;
	long    li_len_tobuf = 0;
	/*** long    l_prmum_qty  = 0;	Commented in Ver 4.0 ***/
	long    l_remain_qty = 0;
	long    l_xchng_can_qty = 0;   /*** Ver 1.3 ***/
	int     i_rtrn_cd1 =0 ;                     /*** Initialized in VQC ***/
	char    c_op_strng[ 16000 ]	= "\0";       /*** Initialized in VQC ***/
	char    c_op_strng1[ 16000 ] = "\0";      /*** Initialized in VQC ***/
	char    c_op_strng2[ 16000 ] = "\0";      /*** Initialized in VQC ***/
	char    *null_ptr  = 0;
	char    c_mrgn_indctr[3]= "\0";           /*** Initialized in VQC ***/
	char    c_mtch_accnt1[11]="\0";           /*** Initialized in VQC ***/
	char    c_spn_mrgn1[20]="\0";             /*** Initialized in VQC ***/
	char    c_nov1[20]="\0";                  /*** Initialized in VQC ***/
	char    c_total_mrgn1[20]="\0";           /*** Initialized in VQC ***/
	char    c_mtch_accnt2[11]="\0";           /*** Initialized in VQC ***/
	char    c_spn_mrgn2[20]="\0";             /*** Initialized in VQC ***/
	char    c_nov2[20]="\0";                  /*** Initialized in VQC ***/
	char    c_total_mrgn2[20]="\0";           /*** Initialized in VQC ***/
	char    c_strk_prc[20]="\0";              /*** Initialized in VQC ***//*** Ver 1.1 ***/
	char    c_channel[4]="\0";                /*** Initialized in VQC ***//*** Ver 1.2 ***/
	char 		c_xchng_cd1[3]="\0";              /*** Initialized in VQC ***//*** Ver 1.4 ***/
	char 		c_xchng_cd2[3]="\0";              /*** Initialized in VQC ***//*** Ver 1.4 ***/
	char		c_cover_ref[19] = "\0";  /*** Ver 2.2 ***/
	char    c_ordr_rfrnce[19]="\0"; /**** Added in ver 3.0 ****/
	char		c_ipord_ref[19] = "\0";   /*** Ver 3.3 ***/
  /*** char c_prcimpv_flg='\0';  ** Ver 3.5 ** Commented in Ver 4.0 ***/
  char c_rqst_flg='\0';  /** Ver 3.5 **/
  char c_new_mod_ord_flg='\0';  /** Ver 3.5 **/
	char c_rqst_typ='\0';         /*** Ver 5.3 ***/
  char c_span_flg='Y';          /*** Ver 5.3 ***/
  char c_fcpmtm_flg='\0';       /*** Ver 5.3 ***/

	double  d_spn_mrgn1 = 0.0;
	double  d_spn_mrgn2 = 0.0;
	/** double  d_diff_mrgn = 0.0;          ** Commented in VQC **/ 
	double  d_balance_amt = 0.0;
	double  d_nov1       = 0.0;
	double  d_nov2       = 0.0;
	double  d_nov        = 0.0;
	double  d_expsr= 0.0;
	double  d_total_mrgn1 = 0.0;
	double  d_total_mrgn2 = 0.0;
	double  d_total_mrgn  = 0.0;
	double  d_spn_mrgn    = 0.0;
	double  d_mltplr = 0.0;
	double  d_min_mrgn    = 0.0;
	double  d_intl_mrgn   = 0.0;
	double  d_undrlyng_pl = 0.0;
	double  d_cntrct_pl   = 0.0;
	double  d_total_prmum = 0.0;
	double  d_blkd_prmum  = 0.0;
	double  d_opt_prmum   = 0.0;
	double  d_clsng_prc    = 0.0;
	double  d_oblckd_amnt = 0.0;
	double  d_diff_pl     = 0.0;
	double  d_blckd_pnl   = 0.0;		
	double  d_min_expsr_mrgn = 0.0;
	double  d_min_expsr 	= 0.0;
	double  d_expsr_mrgn  = 0.0;
	double  d_upd_amount  = 0.0;
	double  d_strike_prc	= 0.0;		/*** Ver 1.1 ***/
	int i_cntrct_cnt = 0;		/*** Ver 1.1 ***/

	/*** Commented in Ver 4.0 Starts***
  double d_trail_amt=0.0;  ** Ver 3.5 **
  double d_lmt_offset=0.0; ** Ver 3.5 **
	*** Ver 4.0 Ends ***/

  /** ver 6.3 starts ***/
  char c_prvsnl_opnpos_flow = '\0'; 
  long l_prvsnl_pending_qty = 0;
  char c_sub_mode = '\0'; 
  char c_ordr_flow_phy = '\0';
  char c_ref_rmrks_phy[133]="\0";
/** ver 6.3 ends **/

	char    c_narration_id[4]="\0";      /** Variable intialize in VQC **/
	char    c_dr_without_lmt_flg='\0';   /** Variable intialize in VQC **/

  char   c_extra_update='\0'; /*** ver 5.8 ***/

	/*** Ver 1.5 starts here ***/
	char c_ordr_stts = '\0';		
	char c_mtm_sltp_req = '\0';
/*char c_remarks[50];         *** VQC ***/
	char c_svc_nm[20]="\0";     /** Variable intialize in VQC **/
	char c_slm_flg='\0';        /** Variable intialize in VQC **/
	char c_ord_typ='\0';        /** Variable intialize in VQC **/
	char  c_spl_flg = '\0'; 
	char c_ordr_flw = '\0';
	char c_sys_msg[11] = "\0";  /* Ver 2.4 Array size increase from 4 to 11 */  
	char c_sys_msg1[11] = "\0"; /* Ver 6.4 */
  char c_nkd_blkd_flg='\0'; /** ver 6.4 **/
  char c_source_flg='\0'; /** ver 6.9 **/
	varchar c_remarks[50];      /*** VQC ***/

	long	l_exctd_qty = 0;
	long	li_tot_exec_qty = 0;
	long	l_open_qty = 0;	
	long	l_frsh_xtd_qty = 0;	
	/*** long  l_exec_qty = 0;  Commented in Ver 4.0 ***/
	long	li_dsclsd_qty = 0;
	long	li_stp_lss_tgr_prc = 0;
	long int li_lmt_rt = 0;
	long l_fsh_ord_lmt_rt = 0;  /*** Ver 2.5 ***/
	long l_cvr_ord_lmt_rt = 0;  /*** Ver 2.5 ***/
	/*** long l_ftd_ord_exe_qty = 0; Cpmmented in Ver 3.8 ***** Added in ver 3.0 *****/
	long l_ors_msg_typ=0; /*** Ver 3.3 ***/

	/*** Ver 2.6 Start***/
	/*** Commented in Ver 4.0 Starts ***
 	MEMSET(c_sltp_ord_rfrnc_lck);
  MEMSET(c_ordr_rfrnc_lck);			
	*** Ver 4.0 Ends ***/
  /*** Ver 2.6 End***/

	/* double d_fmm_sltp_prcnt = 0.0;					*** Commented in VQC ***/
	/* double d_frsh_exe_val = 0.0;						*** Commented in VQC ***/
	double d_amt_to_be_blckd = 0.0;		
	double d_lss_amt_to_be_blckd = 0.0; 
	/* double d_wgt_avrg_price = 0.0;	        *** Commented in VQC ***/			
	double d_diff_amt= 0.0;
	double d_diff_loss= 0.0;
	/*** Ver 1.5 ends here ***/
char c_can_ordr_ref[19] = "\0" ;
  double d_prem_amt = 0.0;    /*** Ver 5.9 ***/
  double d_expr_mrgn = 0.0;   /*** Ver 5.9 ***/

	/*** Ver 2.0 Starts here ***/
	/* double d_frm_diffrnc_mrgn = 0.0 ;	    *** Commented in VQC ***/	
	/* double d_fmm_sltp_diff_prcnt = 0.0 ;   *** Commented in VQC ***/
	double d_amt_blkd = 0.0 ;
	double d_lss_amt_blkd = 0.0 ;
	long   l_temp_stp_lss_tgr = 0 ;
	/* long   l_amt = 0 ;											*** Commented in VQC ***/					
	char   c_ord_flw = '\0';
	char c_frsh_ordr_stts = '\0';
	/*** Ver 2.0 Ends   here ***/

  /** Ver 6.7 Starts here **/
  int    i_ret_val=0;

  double d_spn_bmrgn1=0;
  double d_bnov1=0;
  double d_total_bmrgn1=0;

  double d_spn_bmrgn2=0;
  double d_bnov2=0;
  double d_total_bmrgn2=0;

  double d_spn_bmrgn=0;
  double d_bnov=0;
  double d_total_bmrgn=0;
	/** Ver 6.7 Ends here **/

	struct 	st_xchngbook st_ip_xchngbk;
	/*** struct 	st_xchngbook *ptr_ip_xchngbk;		Commented in Ver 4.0 ***/
	struct 	st_xchngbook st_op_xchngbk ;
	struct 	st_orderbook st_ip_orderbook;
	struct 	st_orderbook st_op_orderbook;
	struct 	st_tradebook st_tradebk;		
	struct 	st_pstn_actn st_pstn_actn_var;
	struct 	st_fus_undrlyng_pstn st_undfus_pos_crrnt ;
	struct 	st_fus_undrlyng_pstn st_undfus_pos_to_be ;
	struct 	st_fcp_cntrct_pstn   st_cntfcp_pos_crrnt ;
	/*** struct 	st_fcp_cntrct_pstn   st_cntfcp_pos_to_be ;	Commented in Ver 4.0 ***/	
	struct 	st_fcp_cntrct_pstn   st_cntpos_old ;		
	struct 	st_fcp_cntrct_pstn   st_cntpos_md_rc  ; /*** the contract on which actn is applied ***/
	
	struct st_xchngbook st_xchngbk;	  /*** Ver 2.5 ***/
	char c_ordr_rfrnc[2][20]={'\0'};   /*** Ver 2.5 ***/ /** VQC **/
	char c_sltp_ord_rfrnc[2][20]={'\0'};/*** Ver 2.5 ***/ /** VQC **/
	int i_cnt = 0;									  /*** Ver 2.5 ***/
	char c_ordr_rfrnc_fut[20]= "\0";  /*** Ver 2.9 ***/ 
	char c_lst_act_ref[22]= "\0";     /*** Ver 4.9 ***/ /** VQC **/
	char c_dlvrmtm_flg = 'O';         /*** Ver 5.3 ***/

 /** ver 4.8 starts**/
  long l_sroll_diff_amt = 0;
  long l_sroll_lss_amt = 0;
  char c_another_ordr_rfrnc[2][19];
  MEMSET(c_another_ordr_rfrnc);
  int i_source_dest_flg = 0;
  char c_expry_date_current_ordr[23];
  MEMSET( c_expry_date_current_ordr );
  char c_cvr_ordr_rfrnc[19]="\0";

  struct vw_orderbook st_next_ordbk;
  MEMSET( st_next_ordbk );
  struct vw_orderbook st_frst_ordbk;
  MEMSET( st_frst_ordbk );

  char c_other_ordr_ref[19];
  MEMSET(c_other_ordr_ref );

  char c_ordr_rfrnc_lck[2][19];
  MEMSET(c_ordr_rfrnc_lck);

  long  l_pnd_ord= -1 ; /*** Ver 6.4 ***/

  TPTRANID tranid;

  char c_g_fc_flg='\0'; /** ver 6.1 **/
	long l_tot_pend =0; /*** Ver 6.4 ***/

  int i_trnsctn_temp = 0;
  /** ver 4.8 ends**/
	/*** Ver 5.7 starts ***/
	MEMSET (st_ip_xchngbk);
	MEMSET (st_ip_orderbook);
	MEMSET (st_tradebk);
	MEMSET (st_pstn_actn_var);
	MEMSET (st_undfus_pos_crrnt);
	MEMSET (st_undfus_pos_to_be);
	MEMSET (st_cntfcp_pos_crrnt);
	MEMSET (st_cntpos_old);
	MEMSET (st_cntpos_md_rc);
	MEMSET (c_remarks);
	/*** Ver 5.7 Ends ***/


  char c_ref_rmrks[133] = "\0";      /*** Ver 5.5 ***//** size 100 to 133 in ver 5.9 **/
  char  c_tmp_rmrks [ 133 ] = "\0";  /*** Ver 5.5 ***//** size 100 to 133 in ver 5.9 **/
  double d_comp1_mrgn = 0.0;  /*** Ver 5.5 ***/
  double d_comp1_pl = 0.0;    /*** Ver 5.5 ***/
  double d_xchng_amt = 0.0;   /*** Ver 5.5 ***/

	int i_gtt_flg = 0; /** Ver 7.3 **/
	char c_src_flg = '\0'; /** Ver 7.3 **/

	MEMSET(st_xchngbk);						/*** Ver 2.5 ***/
	MEMSET(c_ordr_rfrnc);				  /*** Ver 2.5 ***/
	MEMSET(c_sltp_ord_rfrnc);		  /*** Ver 2.5 ***/
	MEMSET(st_op_orderbook);      /*** Ver 2.5 ***/
	MEMSET(c_mail_remarks);       /*** Ver 4.1 ***/
	MEMSET(c_command);						/*** Ver 4.1 ***/
	MEMSET(c_lst_act_ref);				/*** Ver 4.9 ***/
  MEMSET(c_err_msg);						/*** VQC ***/
	MEMSET(c_xchng_cd);           /*** VQC ***/
	MEMSET(i_xchngbkerr);         /*** VQC ***/
	MEMSET(i_ferr);								/*** VQC ***/
	MEMSET(c_expry_dt);           /*** VQC ***/

	EXEC SQL BEGIN DECLARE SECTION;
	sql_cursor     sys_cursor;      /* a cursor variable */
	char  	sql_cln_mtch_accnt[11]="\0";   /** Variable intialize in VQC **/  
	char  	sql_xchng_cd[4]="\0";          /** Variable intialize in VQC **/
	char  	sql_prd_typ='\0';	             /** Variable intialize in VQC **/
	char  	sql_undrlyng[7]="\0";          /** Variable intialize in VQC **/
	
	EXEC SQL END DECLARE SECTION;
	
	ptr_fml_Ibuf = (FBFR32 *)rqst->data; 
	

	strcpy( c_ServiceName, rqst->name );
	
	INITDBGLVL(c_ServiceName);
	
	/** Following for error msg **/

	struct st_err_msg *ptr_st_err_msg;
		
	i_xchngbkerr  [ 0 ] = Fget32( ptr_fml_Ibuf ,FFO_ROUT_CRT,0,(char *) st_ip_xchngbk.c_rout_crt,0);
	i_ferr[0] = Ferror32;
	i_xchngbkerr  [ 1 ] = Fget32( ptr_fml_Ibuf ,FFO_ORDR_RFRNC,0,(char *) st_ip_xchngbk.c_ordr_rfrnc,0);
	i_ferr[1] = Ferror32;
	i_xchngbkerr  [ 2 ] = Fget32( ptr_fml_Ibuf ,FFO_ORS_MSG_TYP,0,(char *) &st_ip_xchngbk.l_ors_msg_typ,0);
	i_ferr[2] = Ferror32;
	i_xchngbkerr  [ 3 ] = Fget32( ptr_fml_Ibuf ,FFO_MDFCTN_CNTR,0,(char *) &st_ip_xchngbk.l_mdfctn_cntr,0);
	i_ferr[3] = Ferror32;
	i_xchngbkerr  [ 4 ] = Fget32( ptr_fml_Ibuf ,FFO_ACK_TM,0,(char *) st_ip_xchngbk.c_ack_tm,0);
	i_ferr[4] = Ferror32;
	i_xchngbkerr  [ 5 ] = Fget32( ptr_fml_Ibuf ,FFO_PREV_ACK_TM,0,(char *) st_ip_xchngbk.c_entry_dt_tm,0);
	i_ferr[5] = Ferror32;
	/*** Ver 1.3 starts ***/
  i_xchngbkerr  [ 6 ] = Fget32( ptr_fml_Ibuf ,FFO_XCHNG_CAN_QTY,0,(char *) &l_xchng_can_qty,0);
  i_ferr[6] = Ferror32;
  /*** Ver 1.3 Ends ***/

	for(i=0;i<7;i++)   /*** Ver 1.3 -- Changed count  from 6 to 7 ***/
	{
		if(i_xchngbkerr[i] == -1 )
		{
			if ( i_ferr[ 6 ] == FNOTPRES )  /*** Ver 1.3 -- if condiion addded ***/
      {
        fn_userlog(c_ServiceName," l_xchng_can_qty not present **** 0");
        l_xchng_can_qty  = 0;
      }
			else
      {
				fn_userlog( c_ServiceName, " Error in field no %d", i);
				errlog(c_ServiceName, "S31005", Fstrerror32(i_ferr[i]),(char *)DEF_USR,DEF_SSSN, c_err_msg.arr);				/***	VQC	***/
				Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0)	;																										/***  VQC ***/
				tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
      }
		}
	}		

  if(DEBUG_MSG_LVL_0)   /*** Ver 3.1 ***/
  {
    fn_userlog( c_ServiceName, " Order Referenc No. Is   :%s: ", st_ip_xchngbk.c_ordr_rfrnc );
	}	
	if(DEBUG_MSG_LVL_2)  /**** Ver 3.1 ****/
	{
		fn_userlog( c_ServiceName, " Following Are The Inputs To The Service    ");
		fn_userlog( c_ServiceName, " Order Referenc No. Is   :%s: ", st_ip_xchngbk.c_ordr_rfrnc );
		fn_userlog( c_ServiceName, " Operation Typ Is        :%c: ", st_ip_xchngbk.c_oprn_typ );
		fn_userlog( c_ServiceName, " Ors message type Is     :%ld:", st_ip_xchngbk.l_ors_msg_typ );
		fn_userlog( c_ServiceName, " Modification Counter Is :%ld", st_ip_xchngbk.l_mdfctn_cntr );
		fn_userlog( c_ServiceName, " Exchange Cancel qty Is  :%ld:", st_ip_xchngbk.l_xchng_can_qty);
		fn_userlog( c_ServiceName, " Route crt Is            :%s: ", st_ip_xchngbk.c_rout_crt);
		fn_userlog( c_ServiceName, " Ack Time Is             :%s: ", st_ip_xchngbk.c_ack_tm);
		fn_userlog( c_ServiceName, " Entry Date - Time Is    :%s: ", st_ip_xchngbk.c_entry_dt_tm);
	}	

	

  ptr_fml_Sbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );		/*** Ver 2.5 ***/

  if ( ptr_fml_Sbuf == NULL )	/*** Ver 2.5 ***/
  {
		/* fn_errlog ( c_ServiceName, "S31010", LIBMSG, c_err_msg.arr );				*** VQC * commented in Ver 5.7 **/						
		fn_errlog ( c_ServiceName, "S31015", TPMSG, c_err_msg.arr );				/*** Ver 5.7 ***/						
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );							/*** VQC ***/
		/** tpfree((char *)ptr_fml_Obuf);  Commented In Ver 2.8 **/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, " Begining Transaction");
	}

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr);							/*** VQC ***/
	if ( i_trnsctn == -1 )
	{
		fn_errlog ( c_ServiceName, "S31020", LIBMSG, c_err_msg.arr );				/*** VQC ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );							/*** VQC ***/
		/**  tpfree((char *)ptr_fml_Obuf);  Ver 2.8 **/
   	tpfree((char *)ptr_fml_Sbuf);   /** Ver 2.8 ****/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	/*** Added for Order Routing ***/
	fn_init_ddr_val (st_ip_xchngbk.c_rout_crt);
	
	/*** Calling Function fn_spnref_to_ord from Span Lib ***/

	/*** Ver 2.5 ***/
	EXEC  SQL
	SELECT  FOD_PRDCT_TYP,
					DECODE(FOD_EOS_FLG,'M','MY_EOS','N','EOS','E','EXCPT_EOS','S','SYS_EVENT','X'), /** Ver 3.4 **/ /*** SYS event in Ver 6.0 ***/
					DECODE(FOD_EOS_FLG,'M',FOD_CHANNEL,'E','SYS','N','SYS','S','SYS',FOD_CHANNEL),  /** Ver 3.4 **/ /*** Ver 6.0 ***/
					          NVL(FOD_SROLL_DIFF_AMT,0), /** ver 4.8 **/
          NVL(FOD_SROLL_LSS_AMT,0), /** ver 4.8 **/
          FOD_SPL_FLAG, /** ver 4.8 **/
          FOD_EXPRY_DT, /** ver 4.8 **/
          NVL(FOD_FC_FLAG,'*'), /** ver 6.1 **/
          FOD_ORDR_FLW, /** ver 6.3 **/
          NVL(FOD_SLTP_ORDR_RFRNC,'*'),  /** ver 6.4 **/
					NVL(FOD_SOURCE_FLG, 'O')/** Ver 7.3 **/
	INTO    :st_op_orderbook.c_prd_typ,
					:c_sys_msg,    /*** Ver 3.4 ***/
					:st_pstn_actn_var.c_channel, /*** Ver 3.4 ***/
       :l_sroll_diff_amt,/** ver 4.8 **/
          :l_sroll_lss_amt,/** ver 4.8 **/
          :c_spl_flg,/** ver 4.8 **/
          :c_expry_date_current_ordr,/** ver 4.8 **/
          :c_g_fc_flg, /** ver 6.1 **/
          :c_ordr_flow_phy, /** ver 6.3 ***/
          :c_cvr_ordr_rfrnc,	/*** ver 6.4 ***/
					:c_src_flg /** Ver 7.3 **/
	FROM    FOD_FO_ORDR_DTLS
	WHERE   FOD_ORDR_RFRNC = :st_ip_xchngbk.c_ordr_rfrnc;

	if(SQLCODE !=0 )
	{
		fn_errlog ( c_ServiceName, "S31025", SQLMSG, c_err_msg.arr );							/*** VQC ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );										/*** VQC ***/
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );									/*** VQC ***/
	  /**tpfree((char *)ptr_fml_Obuf);  Ver 2.8 **/
   	tpfree((char *)ptr_fml_Sbuf); /** Ver 2.8 ***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	
	rtrim(c_sys_msg); /*** Ver 3.4 ***/
	rtrim(st_pstn_actn_var.c_channel); /*** Ver 3.4 ***/
	if(DEBUG_MSG_LVL_2)
	{
		fn_userlog( c_ServiceName, "Product Type :%c:",st_op_orderbook.c_prd_typ);
	}
	if (st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS || st_op_orderbook.c_prd_typ == OPTIONPLUS)  /** Optionplus added in Ver 2.6 ***/
	{

		EXEC  SQL
			SELECT  FOD_SLTP_ORDR_RFRNC
			INTO    :st_op_orderbook.c_sltp_ord_rfrnc
			FROM    FOD_FO_ORDR_DTLS
			WHERE   FOD_ORDR_RFRNC = :st_ip_xchngbk.c_ordr_rfrnc;
		
			if(SQLCODE !=0 )
			{
				fn_errlog ( c_ServiceName, "S31030", SQLMSG, c_err_msg.arr );					/*** VQC ***/
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );								/*** VQC ***/
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );							/*** VQC ***/
     	  /**	tpfree((char *)ptr_fml_Obuf); Ver 2.8 ***/
        tpfree((char *)ptr_fml_Sbuf); /** Ver 2.8 ***/ 
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

		if(DEBUG_MSG_LVL_2)
		{
			fn_userlog( c_ServiceName, "st_ip_xchngbk.c_ordr_rfrnc :%s:,st_op_orderbook.c_sltp_ord_rfrnc = :%s:",st_ip_xchngbk.c_ordr_rfrnc,st_op_orderbook.c_sltp_ord_rfrnc);
		}


		EXEC  SQL
			SELECT  FOD_ORDR_RFRNC,
							FOD_SLTP_ORDR_RFRNC
			INTO    :c_ordr_rfrnc,
							:c_sltp_ord_rfrnc
			FROM    FOD_FO_ORDR_DTLS
			WHERE   FOD_ORDR_RFRNC in (:st_ip_xchngbk.c_ordr_rfrnc,:st_op_orderbook.c_sltp_ord_rfrnc)
			FOR			UPDATE OF FOD_ORDR_RFRNC NOWAIT;

		if(SQLCODE !=0 )
		{
			if (SQLCODE == -54)
			{
       if(DEBUG_MSG_LVL_0)  /*** Ver 3.1 ***/
        {
					fn_userlog( c_ServiceName, "Resource busy and acquire with NOWAIT specified or timeout expired");
				}
			}
			fn_errlog ( c_ServiceName, "S31035", SQLMSG, c_err_msg.arr);									/*** VQC ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );												/*** VQC ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );											/*** VQC ***/
			/**   tpfree((char *)ptr_fml_Obuf); Ver 2.8 ***/
      tpfree((char *)ptr_fml_Sbuf);  /***Ver 2.8 ***/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		else
		{
        if(DEBUG_MSG_LVL_0) /*** Ver 3.1 ***/
        {
					fn_userlog( c_ServiceName, "Sucessfully acquired FOR UPDATE NOWAIT on :%s: and :%s:", st_ip_xchngbk.c_ordr_rfrnc,st_op_orderbook.c_sltp_ord_rfrnc);
				}
		}
	}
	/*** Ver 2.5 ***/

	/*** Ver 2.9 Starts***/
	 else if(st_op_orderbook.c_prd_typ == FUTURES || st_op_orderbook.c_prd_typ == OPTIONS)
	{
		MEMSET(c_ordr_rfrnc_fut);
    /** ver 4.8 started **/ 
    fn_userlog( c_ServiceName, "ROLLOVER_WITH_SPREAD :%c: and st_ip_xchngbk.c_ordr_rfrnc is :%s:",c_spl_flg,st_ip_xchngbk.c_ordr_rfrnc);
	  if( c_spl_flg == ROLLOVER_WITH_SPREAD )
    {
         EXEC SQL
         SELECT FSD_ORDR_RFRNC,
                FOD_EXPRY_DT,
                FOD_UNDRLYNG,
                FOD_PRDCT_TYP,
                FOD_EXER_TYP,
                FOD_XCHNG_CD,
                FOD_CLM_MTCH_ACCNT,
                FOD_LMT_RT,
                FOD_ORDR_FLW,
                FOD_INDSTK,
                FOD_OPT_TYP,
                FOD_STRK_PRC
         INTO   :c_other_ordr_ref,
                :st_next_ordbk.c_expry_dt,
                :st_next_ordbk.c_undrlyng,
                :st_next_ordbk.c_prd_typ,
                :st_next_ordbk.c_exrc_typ,
                :st_next_ordbk.c_xchng_cd,
                :st_next_ordbk.c_cln_mtch_accnt,
                :st_next_ordbk.l_ord_lmt_rt,
                :st_next_ordbk.c_ordr_flw,
                :st_next_ordbk.c_ctgry_indstk,
                :st_next_ordbk.c_opt_typ,
                :st_next_ordbk.l_strike_prc
         FROM   FSD_FO_SPRD_DTLS,FOD_FO_ORDR_DTLS
         WHERE  FSD_SPRD_RFRNC = ( SELECT FSD_SPRD_RFRNC
                                   FROM   FSD_FO_SPRD_DTLS
                                   WHERE  FSD_ORDR_RFRNC = :st_ip_xchngbk.c_ordr_rfrnc )
         AND    FSD_ORDR_RFRNC = FOD_ORDR_RFRNC
         AND    FSD_ORDR_RFRNC != :st_ip_xchngbk.c_ordr_rfrnc;

        if( SQLCODE != 0 )
        {
               fn_errlog ( c_ServiceName, "S31040", SQLMSG, c_err_msg.arr );								/*** VQC ***/
               Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );												/*** VQC ***/	
               fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );				              /*** VQC ***/	
               tpfree((char *)ptr_fml_Sbuf); 
               tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        rtrim( c_expry_date_current_ordr );

        fn_userlog( c_ServiceName,"ROLLOVER_WITH_SPREAD c_other_ordr_ref :%s:",c_other_ordr_ref);
        fn_userlog( c_ServiceName,"ROLLOVER_WITH_SPREAD st_next_ordbk.c_expry_dt :%s:",st_next_ordbk.c_expry_dt);
        fn_userlog( c_ServiceName,"ROLLOVER_WITH_SPREAD c_expry_date_current_ordr :%s:",c_expry_date_current_ordr);

        EXEC SQL
        SELECT COUNT(1)
        INTO :i_source_dest_flg
        FROM   DUAL
        WHERE TO_DATE(:c_expry_date_current_ordr,'dd-Mon-yyyy') < TO_DATE(:st_next_ordbk.c_expry_dt,'dd-Mon-yyyy');

        if( SQLCODE != 0 )
        {
               fn_errlog ( c_ServiceName, "S31045", SQLMSG, c_err_msg.arr );								/*** VQC ***/				
               Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );														/*** VQC ***/
               fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );													/*** VQC ***/
               tpfree((char *)ptr_fml_Sbuf);
               tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

       fn_userlog( c_ServiceName, "ROLLOVER_WITH_SPREAD SPAN i_source_dest_flg :%d:",i_source_dest_flg );

        EXEC SQL
             SELECT FOD_ORDR_RFRNC,
                    FOD_ORDR_RFRNC
             INTO   :c_ordr_rfrnc_lck,
                    :c_another_ordr_rfrnc
             FROM   FOD_FO_ORDR_DTLS
             WHERE  FOD_ORDR_RFRNC IN(:st_ip_xchngbk.c_ordr_rfrnc,:c_other_ordr_ref)
             FOR UPDATE OF FOD_ORDR_RFRNC NOWAIT;


      if ( SQLCODE != 0)
      {
         if (SQLCODE == -54)
         {
            fn_userlog( c_ServiceName, "Resource busy and acquire with NOWAIT specified or timeout expired");
         }

         fn_userlog( c_ServiceName, "here - No data found");
         fn_errlog ( c_ServiceName, "S31050", SQLMSG, c_err_msg.arr );						/*** VQC ***/
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );										/*** VQC ***/
         fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );									/*** VQC ***/
         tpfree((char *)ptr_fml_Sbuf);
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else
      {
				if(DEBUG_MSG_LVL_0) /*** Ver 3.1 ***/
				{	
         fn_userlog( c_ServiceName, "Sucessfully acquired FOR UPDATE NOWAIT on :%s: and :%s: ",st_ip_xchngbk.c_ordr_rfrnc,c_other_ordr_ref);
      	}
			}        
    }/** ver 4.8 ended **/
    else
    {

		EXEC  SQL
		SELECT  FOD_ORDR_RFRNC
        INTO	:c_ordr_rfrnc_fut
		FROM    FOD_FO_ORDR_DTLS
		WHERE   FOD_ORDR_RFRNC = :st_ip_xchngbk.c_ordr_rfrnc
		FOR   UPDATE OF FOD_ORDR_RFRNC NOWAIT;
		if ( SQLCODE != 0)
		{
		  if (SQLCODE == -54)
		  {
			fn_userlog( c_ServiceName, "Resource busy and acquire with NOWAIT specified or timeout expired");
		  }

			fn_userlog( c_ServiceName, "here - No data found");
			fn_errlog ( c_ServiceName, "S31055", SQLMSG, c_err_msg.arr );									/*** VQC ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );												/*** VQC ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );											/*** VQC ***/
			tpfree((char *)ptr_fml_Sbuf);	  
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		else
		{
		  fn_userlog( c_ServiceName, "Sucessfully acquired FOR UPDATE NOWAIT on :%s:",st_ip_xchngbk.c_ordr_rfrnc); /*** Ver 3.8 ***/
		}
    if(DEBUG_MSG_LVL_3)  /*** Ver 3.1 ***/
    {
			fn_userlog( c_ServiceName, "Just B4 taking lock :%s ", c_ordr_rfrnc);
		  /*** fn_userlog( c_ServiceName, "After NOWAIT on :%s: and :%s:",st_ip_xchngbk.c_ordr_rfrnc); ***Commented in Ver 4.0 ***/
		  fn_userlog( c_ServiceName, "After NOWAIT on :%s:",st_ip_xchngbk.c_ordr_rfrnc); /** Added in Ver 4.0 ***/
		}
	}
	}
	/*** Ver 2.9 Ends***/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "Calling Function fn_spnref_to_ord");
	}

	strcpy( st_ip_orderbook.c_ordr_rfrnc, st_ip_xchngbk.c_ordr_rfrnc);
	st_ip_orderbook.c_oprn_typ = FOR_UPDATE;
	
	i_returncode = fn_spnref_to_ord( &st_ip_orderbook ,&st_op_orderbook,c_ServiceName,c_err_msg.arr);				/*** VQC ***/

	if ( i_returncode != 0)
	{
		fn_errlog ( c_ServiceName, "S31060", LIBMSG, c_err_msg.arr );											/*** VQC ***/		
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );														/*** VQC ***/
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );													/*** VQC ***/
		/** tpfree((char *)ptr_fml_Obuf);  ** Ver 2.8 **/
   	tpfree((char *)ptr_fml_Sbuf); /** Ver 2.8 ***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	/** if(DEBUG_MSG_LVL_1) ** Commented in Ver 3.1 ***/
  if(DEBUG_MSG_LVL_2) /** Debug level changed to 2 in Ver 3.1 **/
	{
		fn_userlog( c_ServiceName, " Following Are The Details From FOD Table ");
		fn_userlog( c_ServiceName, " Order Status  Is   :%c:   ", st_op_orderbook.c_ordr_stts );
		fn_userlog( c_ServiceName, " Match ACcount Is   :%s:   ", st_op_orderbook.c_cln_mtch_accnt);
		fn_userlog( c_ServiceName, " User Id Is         :%s:   ", st_op_orderbook.c_user_id);
		fn_userlog( c_ServiceName, " Contract Id Is     :%ld:  ", st_op_orderbook.l_eba_cntrct_id);
		fn_userlog( c_ServiceName, " Exchange Code Is   :%s:   ", st_op_orderbook.c_xchng_cd);
		fn_userlog( c_ServiceName, " Product Type Is    :%c:   ", st_op_orderbook.c_prd_typ);
		fn_userlog( c_ServiceName, " Underlying Is      :%s:   ", st_op_orderbook.c_undrlyng);
		fn_userlog( c_ServiceName, " Expiry Date Is     :%s:   ", st_op_orderbook.c_expry_dt);
		fn_userlog( c_ServiceName, " Exercise Type  Is  :%c:   ", st_op_orderbook.c_exrc_typ);
		fn_userlog( c_ServiceName, " Option Type  Is    :%c:   ", st_op_orderbook.c_opt_typ);
		fn_userlog( c_ServiceName, " Strike Price Is    :%ld:  ", st_op_orderbook.l_strike_prc);
		fn_userlog( c_ServiceName, " Category Index Is  :%c:   ", st_op_orderbook.c_ctgry_indstk);
		fn_userlog( c_ServiceName, " l_ca_lvl Is        :%ld:  ", st_op_orderbook.l_ca_lvl);
		fn_userlog( c_ServiceName, " Order Flow Is      :%c:   ", st_op_orderbook.c_ordr_flw);
		fn_userlog( c_ServiceName, " Spl Flag Is        :%c:   ", st_op_orderbook.c_spl_flg);
		fn_userlog( c_ServiceName, " Total Order Qty Is :%ld:  ", st_op_orderbook.l_ord_tot_qty);
		fn_userlog( c_ServiceName, " Limit Rate Is      :%ld:  ", st_op_orderbook.l_ord_lmt_rt);
		fn_userlog( c_ServiceName, " Executed Qty Is    :%ld:  ", st_op_orderbook.l_exctd_qty);
		fn_userlog( c_ServiceName, " Span  Flag Is      :%c:   ", st_op_orderbook.c_spn_flg);
		fn_userlog( c_ServiceName, " Channel Is         :%s:   ", st_op_orderbook.c_channel);			/*** Ver 1.2 ***/
		fn_userlog( c_ServiceName, " SLTP ordr Ref Is   :%s:   ", st_op_orderbook.c_sltp_ord_rfrnc);			/*** Ver 1.5 ***/
		fn_userlog( c_ServiceName, " Margin blocked Is  :%lf:  ", st_op_orderbook.d_amt_blkd);						/*** Ver 1.5 ***/
		fn_userlog( c_ServiceName, " Loss blocked Is    :%lf:  ", st_op_orderbook.d_lss_amt_blkd);				/*** Ver 1.5 ***/
		fn_userlog( c_ServiceName, " Fresh Cover flg Is :%c:   ", st_op_orderbook.c_fc_flg);							/*** Ver 1.5 ***/
		fn_userlog( c_ServiceName, " Diff margin blck   :%lf:  ", st_op_orderbook.d_diff_amt_blkd);				/*** Ver 1.5 ***/
		fn_userlog( c_ServiceName, " Diff loss blck     :%lf:  ", st_op_orderbook.d_diff_lss_amt_blkd);		/*** Ver 1.5 ***/
	}	

	
	if ( st_op_orderbook.c_ordr_stts == REQUESTED )
	{
		st_ip_xchngbk.c_oprn_typ = WITHOUT_ORS_MSG_TYP;
	}
	else
	{
		st_ip_xchngbk.c_oprn_typ = WITH_ORS_MSG_TYP;
	}


	/*** Calling Function fn_spnref_to_omd from Span Lib ***/

	if(DEBUG_MSG_LVL_3)
	{	
		fn_userlog( c_ServiceName, "Calling Function fn_spnref_to_omd");
	}

	MEMSET(st_op_xchngbk);
	
	/*** Commented in Ver 4.9 *****
	i_returncode = fn_spnref_to_omd(&st_ip_xchngbk ,&st_op_xchngbk,c_ServiceName,c_err_msg);  *****/

	/** Ver 4.9 Started **/
	i_returncode = fn_spnref_to_omd_ors(&st_ip_xchngbk ,&st_op_xchngbk,c_lst_act_ref,c_ServiceName,c_err_msg.arr);			/*** VQC ***/ 
	/** Ver 4.9 Ends **/
	
	if ( i_returncode != 0)
	{
		fn_errlog ( c_ServiceName, "S31065", LIBMSG, c_err_msg.arr );						/*** VQC ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );									/*** VQC ***/
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );								/*** VQC ***/
		/** tpfree((char *)ptr_fml_Obuf);  Ver 2.8 **/
   	tpfree((char *)ptr_fml_Sbuf); /** Ver 2.8***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
 
  /** ver 6.3 starts ***/ 
  strcpy( c_ref_rmrks_phy,st_op_xchngbk.c_xchng_rmrks);
  rtrim( c_ref_rmrks_phy );
  /** ver 6.3 ends ****/

	st_op_xchngbk.l_xchng_can_qty = l_xchng_can_qty; /*** Ver 1.3 ***/
	
  /** if(DEBUG_MSG_LVL_1) ** Commented in Ver 3.1 ***/
	if(DEBUG_MSG_LVL_2) /** Debug level changed to 2 in Ver 3.1 **/
	{
		fn_userlog( c_ServiceName, " Following Are The Details From FXB  Table ");
		fn_userlog( c_ServiceName, " Rms Processed Flag Is    :%c:   ",st_op_xchngbk.c_rms_prcsd_flg);
		fn_userlog( c_ServiceName, " Total Qty  Is            :%ld:  ",st_op_xchngbk.l_ord_tot_qty);
		fn_userlog( c_ServiceName, " Limit Rate Is            :%ld:  ",st_op_xchngbk.l_ord_lmt_rt);
		fn_userlog( c_ServiceName, " c_slm_flg  Is            :%c:   ",st_op_xchngbk.c_slm_flg);
		fn_userlog( c_ServiceName, " Disclosed Qty Is         :%ld   ",st_op_xchngbk.l_dsclsd_qty);
		fn_userlog( c_ServiceName, " Stop Loss Trg Price Is   :%ld:  ",st_op_xchngbk.l_stp_lss_tgr);
		fn_userlog( c_ServiceName, " Order Type Is            :%c:   ",st_op_xchngbk.c_ord_typ);
		fn_userlog( c_ServiceName, " Valid Date Is            :%s:   ",st_op_xchngbk.c_valid_dt);
    fn_userlog( c_ServiceName, " Trade Date Is            :%s:   ",st_op_xchngbk.c_mod_trd_dt);
		fn_userlog( c_ServiceName, " Pipe ID    Is            :%s:   ",st_op_xchngbk.c_pipe_id);
		fn_userlog( c_ServiceName, " Cancel qty Is            :%ld:  ",st_op_xchngbk.l_xchng_can_qty);
		fn_userlog( c_ServiceName, " Span Flag  Is            :%c:   ",st_op_xchngbk.c_spn_flg);
		fn_userlog( c_ServiceName, " Exchange Remarks Is 			:%s:        ",st_op_xchngbk.c_xchng_rmrks);
	}	 

	strcpy(st_ip_xchngbk.c_xchng_rmrks,st_op_xchngbk.c_xchng_rmrks); 

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, " Exchange Remarks In Input struct Is  :%s:   ",st_ip_xchngbk.c_xchng_rmrks);

		fn_userlog( c_ServiceName, "Begin Transaction");
	}

	/* i_returncode = fn_lock_usr( c_ServiceName,  st_op_orderbook.c_cln_mtch_accnt); ** Commented and changed for Ver 7.1 **/
	i_returncode = fn_lock_fno( c_ServiceName,  st_op_orderbook.c_cln_mtch_accnt); /* Ver 7.1 */

	if ( i_returncode != 0 )
	{
		fn_errlog ( c_ServiceName, "S31070", LIBMSG, c_err_msg.arr );							/*** VQC ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );										/*** VQC ***/
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );									/*** VQC ***/
		/** tpfree((char *)ptr_fml_Obuf); Ver 2.8 **/
   	tpfree((char *)ptr_fml_Sbuf); /** Ver 2.8 ***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	
	if ( st_op_xchngbk.c_rms_prcsd_flg == 'P' )
	{
	  if(DEBUG_MSG_LVL_0)   /*** VQC ***/
  	{
		fn_userlog( c_ServiceName, "Record already processed");
    }
		strcpy ( c_err_msg.arr, "Record already processed" );											/*** VQC ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );										/*** VQC ***/
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );									/*** VQC ***/
	
		/*** Ver 2.7 Start***/
    /*** Commented in Ver 3.6
    i_returncode= fn_prcs_trade(c_ServiceName,c_err_msg.arr, st_op_orderbook.c_prd_typ, st_ip_xchngbk.c_ordr_rfrnc, st_op_orderbo
ok.c_sltp_ord_rfrnc);
    *****************/
    /*** Ver 3.6 Starts Here ***/
    i_returncode= fn_prcs_trd(c_ServiceName,c_err_msg.arr, st_op_orderbook.c_prd_typ, st_ip_xchngbk.c_ordr_rfrnc);					/*** VQC ***/
    /*** Ver 3.6 Ends Here ***/

 		if(i_returncode != 0)
		{
			fn_errlog ( c_ServiceName, "S31075", LIBMSG, c_err_msg.arr );						/*** VQC ***/
		}	
		/*** Ver 2.7 End***/

		/** tpfree((char *)ptr_fml_Obuf);  Ver 2.8 **/
   	tpfree((char *)ptr_fml_Sbuf); /** Ver 2.8 ***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}	

	/*** Getting Total Traded Quantity And Unprocessed Quantity ***/

	if(st_ip_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_ACPT)
	{
		EXEC  SQL
			SELECT  nvl(sum(FTD_EXCTD_QTY),0)
			INTO    :l_ftd_trd_qty
			FROM    FTD_FO_TRD_DTLS
			WHERE   FTD_ORDR_RFRNC =:st_ip_xchngbk.c_ordr_rfrnc
      AND     FTD_RMS_PRCSD_FLG = 'P'; /** ver 4.7 **/

		if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND )
		{
			fn_errlog ( c_ServiceName, "S31080", SQLMSG, c_err_msg.arr );						/*** VQC ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr , 0 );									/*** VQC ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );								/*** VQC ***/
			/** tpfree((char *)ptr_fml_Obuf);  Ver 2.8 **/
			tpfree((char *)ptr_fml_Sbuf);  /** Ver 2.8 ***/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

  /*** comment starts for ver 4.7 ***
		EXEC  SQL
			SELECT  nvl(sum(FTD_EXCTD_QTY),0)
			INTO    :l_ftd_qty
			FROM    FTD_FO_TRD_DTLS
			WHERE   FTD_ORDR_RFRNC =:st_ip_xchngbk.c_ordr_rfrnc
			AND     FTD_RMS_PRCSD_FLG = 'N';

		if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND )
		{
			fn_errlog ( c_ServiceName, "S31085", SQLMSG, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			** tpfree((char *)ptr_fml_Obuf);  Ver 2.8 **
			tpfree((char *)ptr_fml_Sbuf); **  Ver 2.8 ***
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
  *** comment ends for ver 4.7 ***/
		if(DEBUG_MSG_LVL_2)
		{
			fn_userlog(c_ServiceName,"Total Traded Quantity Is :%ld:",l_ftd_trd_qty);
      /* fn_userlog(c_ServiceName,"Unprocessed Quantity Is :%ld:",l_ftd_qty); commented in ver 4.7 **/
		}
	}	

	/*** Creating Position Structure ***/

	strcpy(st_pstn_actn_var.c_user_id,"system");
	st_pstn_actn_var.l_session_id  = 0;
	strcpy( st_pstn_actn_var.c_cln_mtch_accnt , st_op_orderbook.c_cln_mtch_accnt);
	st_pstn_actn_var.l_eba_cntrct_id = st_op_orderbook.l_eba_cntrct_id;
	strcpy( st_pstn_actn_var.c_xchng_cd , st_op_orderbook.c_xchng_cd);
	st_pstn_actn_var.c_prd_typ = st_op_orderbook.c_prd_typ;
	strcpy( st_pstn_actn_var.c_undrlyng , st_op_orderbook.c_undrlyng);
	strcpy( st_pstn_actn_var.c_expry_dt , st_op_orderbook.c_expry_dt);
	st_pstn_actn_var.c_exrc_typ  = st_op_orderbook.c_exrc_typ;
	st_pstn_actn_var.c_opt_typ = st_op_orderbook.c_opt_typ;
	st_pstn_actn_var.l_strike_prc = st_op_orderbook.l_strike_prc;
	st_pstn_actn_var.c_ctgry_indstk = st_op_orderbook.c_ctgry_indstk;
	st_pstn_actn_var.l_ca_lvl  = st_op_orderbook.l_ca_lvl;
	st_pstn_actn_var.c_cntrct_tag  = '*';
	st_pstn_actn_var.l_actn_typ = st_ip_xchngbk.l_ors_msg_typ;
	st_pstn_actn_var.c_trnsctn_flw = st_op_orderbook.c_ordr_flw;
	st_pstn_actn_var.l_fresh_qty  = 0;
	st_pstn_actn_var.l_cover_qty  = 0;
	st_pstn_actn_var.d_add_mrgn_amt  = 0;
	st_pstn_actn_var.l_curr_rt = 0;

	sprintf(st_pstn_actn_var.c_ref_rmrks,"%s-%ld",st_ip_xchngbk.c_ordr_rfrnc,
	st_ip_xchngbk.l_mdfctn_cntr);
	rtrim(st_pstn_actn_var.c_ref_rmrks);
	
	/** Setting the Value Of Orginal Qty & Rate , New Qty & Rate , Executed Qty & Rate ***/	

	/** if(DEBUG_MSG_LVL_1) ** Commented in Ver 3.1 ***/
  if(DEBUG_MSG_LVL_2) /** Debug level changed to 2 in Ver 3.1 **/
	{
		fn_userlog(c_ServiceName," Before Switch st_ip_xchngbk.l_ors_msg_typ Is :%ld:",st_ip_xchngbk.l_ors_msg_typ);
	}

 /*** if ( st_op_orderbook.c_prd_typ != SLTP_FUTUREPLUS )	*** if condition added in Ver 1.5 Commented In Ver 2.0 ***/
 if ( st_op_orderbook.c_prd_typ != SLTP_FUTUREPLUS && st_op_orderbook.c_prd_typ != OPTIONPLUS  && c_spl_flg != ROLLOVER_WITH_SPREAD)	/*** Ver 2.0 ***/  /*** ver 4.8 ROLLOVER_WITH_SPREAD ***/
 {
	switch ( st_ip_xchngbk.l_ors_msg_typ )
	{
	case	ORS_NEW_ORD_ACPT:
	case	ORS_NEW_ORD_RJCT:
					st_pstn_actn_var.l_orgnl_qty = 0;
					st_pstn_actn_var.l_orgnl_rt  = 0;
				  st_pstn_actn_var.l_new_qty = st_op_xchngbk.l_ord_tot_qty;
					st_pstn_actn_var.l_new_rt  = st_op_xchngbk.l_ord_lmt_rt;
					st_pstn_actn_var.l_exec_qty  = 0;
					st_pstn_actn_var.l_exec_rt  = 0;

					if ( ( st_op_orderbook.c_spl_flg == SYSTEM_SQUAREOFF ) || 
							 ( st_op_orderbook.c_spl_flg == IMTM_SYS_SQUAREOFF ) ||         /*** Ver 2.1 ***/ 
							 ( st_op_orderbook.c_spl_flg == LMTNEG_SYS_SQUAREOFF ) ||       /*** Ver 2.1 ***/
							 ( st_op_orderbook.c_spl_flg == JOINT_SQUAREOFF  ) || 
							 ( st_op_orderbook.c_spl_flg == PHYSICAL_DLVRY_SQOFF  ) )       /*** Ver 5.3 ***/ 
					{
						st_pstn_actn_var.c_mtm_flag = ORD_ACCPT_FOR_SYSTEM_SQ_OFF;
					}
					break;

	case	ORS_MOD_ORD_ACPT:
	case	ORS_MOD_ORD_RJCT:
					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"Inside ORS_MOD_ORD_ACPT");
					}
					st_pstn_actn_var.l_orgnl_qty = st_op_orderbook.l_ord_tot_qty;
					st_pstn_actn_var.l_orgnl_rt  = st_op_orderbook.l_ord_lmt_rt;
					st_pstn_actn_var.l_new_qty = st_op_xchngbk.l_ord_tot_qty;
					st_pstn_actn_var.l_new_rt  = st_op_xchngbk.l_ord_lmt_rt;
					st_pstn_actn_var.l_exec_qty  = st_op_orderbook.l_exctd_qty;
					st_pstn_actn_var.l_exec_rt  = 0;

					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"st_pstn_actn_var.l_orgnl_qty Is :%ld:",st_pstn_actn_var.l_orgnl_qty);
						fn_userlog(c_ServiceName,"st_pstn_actn_var.l_orgnl_rt Is :%ld:",st_pstn_actn_var.l_orgnl_rt);
						fn_userlog(c_ServiceName,"st_pstn_actn_var.l_new_qty Is :%ld:",st_pstn_actn_var.l_new_qty);
						fn_userlog(c_ServiceName,"st_pstn_actn_var.l_new_rt Is :%ld:",st_pstn_actn_var.l_new_rt);
						fn_userlog(c_ServiceName,"st_pstn_actn_var.l_exec_qty Is :%ld:",st_pstn_actn_var.l_exec_qty);
					}
					break;

	case	ORS_CAN_ORD_ACPT:
	case	ORS_CAN_ORD_RJCT:

					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"Inside ORS_CAN_ORD_ACPT");
					}
					st_pstn_actn_var.l_orgnl_qty = st_op_orderbook.l_ord_tot_qty;
					st_pstn_actn_var.l_orgnl_rt  = st_op_orderbook.l_ord_lmt_rt;

					if( st_ip_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_ACPT )			
					{
						if(DEBUG_MSG_LVL_3)
						{
							fn_userlog(c_ServiceName,"On cancellation Accept");
							fn_userlog(c_ServiceName,"l_ftd_trd_qty Is :%ld:",l_ftd_trd_qty);
            /** fn_userlog(c_ServiceName,"l_ftd_qty Is :%ld:",l_ftd_qty); **//** commented in ver 4.7 **/
						}
            /** st_pstn_actn_var.l_exec_qty  = l_ftd_trd_qty; **//** commented in ver 4.7 **/
            /** st_pstn_actn_var.l_new_qty   =  l_ftd_qty;  **//** commented in ver 4.7 **/


            /*** ver 4.7 starts ***/
            st_pstn_actn_var.l_exec_qty =  st_op_xchngbk.l_xchng_can_qty;
            st_pstn_actn_var.l_new_qty  = st_op_xchngbk.l_xchng_can_qty - l_ftd_trd_qty;
            if(DEBUG_MSG_LVL_0)
            {
               fn_userlog(c_ServiceName,"In cancellation acceptance st_pstn_actn_var.l_exec_qty is :%ld: and unprocessed traded qty st_pstn_actn_var.l_new_qty is :%ld:",st_pstn_actn_var.l_exec_qty,st_pstn_actn_var.l_new_qty );
            }
            /*** ver 4.7 ends ***/
					}
					else if ( st_ip_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_RJCT )	
					{
						st_pstn_actn_var.l_new_qty = 0;	
						st_pstn_actn_var.l_exec_qty  = st_op_orderbook.l_exctd_qty;
					}

					st_pstn_actn_var.l_new_rt  = 0;
					st_pstn_actn_var.l_exec_rt  = 0;

					l_remain_qty = st_op_orderbook.l_ord_tot_qty - st_pstn_actn_var.l_exec_qty;
			
					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"st_pstn_actn_var.l_orgnl_qty Is :%ld:",st_pstn_actn_var.l_orgnl_qty);
						fn_userlog(c_ServiceName,"st_pstn_actn_var.l_orgnl_rt Is :%ld:",st_pstn_actn_var.l_orgnl_rt);
						fn_userlog(c_ServiceName,"st_pstn_actn_var.l_new_qty Is :%ld:",st_pstn_actn_var.l_new_qty);
						fn_userlog(c_ServiceName,"st_pstn_actn_var.l_new_rt Is :%ld:",st_pstn_actn_var.l_new_rt);
						fn_userlog(c_ServiceName,"st_pstn_actn_var.l_exec_qty Is :%ld:",st_pstn_actn_var.l_exec_qty);
						fn_userlog(c_ServiceName,"l_remain_qty Is :%ld:",l_remain_qty);
					}

					break;

	case	ORS_SPD_ORD_CNCL:
	case	ORS_2L_ORD_CNCL:
	case	ORS_3L_ORD_CNCL:
	case	ORS_IOC_CAN_ACPT:
	case  ORS_ORD_FRZ_CNCL:
					if(DEBUG_MSG_LVL_0)   /*** VQC ***/
					{	
					fn_userlog(c_ServiceName,"st_op_xchngbk.l_xchng_can_qty Is :%ld:",st_op_xchngbk.l_xchng_can_qty); /*** Ver 1.3 ***/
					}
					st_pstn_actn_var.l_actn_typ = ORS_ORD_EXP;
					st_pstn_actn_var.l_orgnl_qty = st_op_orderbook.l_ord_tot_qty;
					st_pstn_actn_var.l_orgnl_rt  = st_op_orderbook.l_ord_lmt_rt;
					st_pstn_actn_var.l_new_qty = 0;
					st_pstn_actn_var.l_new_rt  = 0;
					st_pstn_actn_var.l_exec_qty  = st_op_xchngbk.l_xchng_can_qty;
					st_pstn_actn_var.l_exec_rt  = 0;
					break;

	/*** Ver 1.9 starts ***/
	case  ORS_ORD_EXP:
				st_pstn_actn_var.l_orgnl_qty = st_op_orderbook.l_ord_tot_qty;
				st_pstn_actn_var.l_orgnl_rt  = st_op_orderbook.l_ord_lmt_rt;
				st_pstn_actn_var.l_new_qty = 0;
				st_pstn_actn_var.l_new_rt  = 0;
				st_pstn_actn_var.l_exec_qty  = st_op_orderbook.l_exctd_qty;
				st_pstn_actn_var.l_exec_rt  = 0;
				break;
	/*** Ver 1.9 end ***/

	default:
					strcpy( c_err_msg.arr, "Invalid Operation Type" );											/*** VQC ***/
					if(DEBUG_MSG_LVL_0)   /*** VQC ***/
					{																					
					fn_userlog ( c_ServiceName, "ERROR :%s:", c_err_msg.arr);								/*** VQC ***/
					}	
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );									/*** VQC ***/
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );								/*** VQC ***/	
					/** tpfree((char *)ptr_fml_Obuf);  Ver 2.8 **/
					tpfree((char *)ptr_fml_Sbuf);  /** Ver 2.8 ***/
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					break;
	} 	

	/******** Get underlying level position for the Exchange, client, ********/
	/******** underlying, tag combination into UPOS_crrnt             ********/

	EXEC SQL
		SELECT  FUS_CLM_MTCH_ACCNT,
						FUS_XCHNG_CD,
						FUS_INDSTK,
						FUS_UNDRLYNG,
						FUS_UIBUY_QTY,
						FUS_UIBUY_VAL,
						FUS_UISELL_QTY,
						FUS_UISELL_VAL,
						FUS_UEXBUY_QTY,
						FUS_UEXBUY_VAL,
						FUS_UEXSELL_QTY,
						FUS_UEXSELL_VAL,
						FUS_UOPNPSTN_FLW,
						FUS_INITIAL_MRGN,
						FUS_REQD_INITIAL_MRGN,
						FUS_EBA_EXPR_MRGN,
						FUS_USPAN_WENOV_MRGN,
						FUS_SPAN_WEMULT_MRGN,
						FUS_BLCKD_PL,
						NVL(FUS_MTM_FLG,'O')
		INTO   	:st_undfus_pos_crrnt.c_cln_mtch_accnt,
						:st_undfus_pos_crrnt.c_xchng_cd,
						:st_undfus_pos_crrnt.c_indstk,
						:st_undfus_pos_crrnt.c_undrlyng,
						:st_undfus_pos_crrnt.l_uibuy_qty,
						:st_undfus_pos_crrnt.d_uibuy_val,
						:st_undfus_pos_crrnt.l_uisell_qty,
						:st_undfus_pos_crrnt.d_uisell_val,
						:st_undfus_pos_crrnt.l_uexbuy_qty,
						:st_undfus_pos_crrnt.d_uexbuy_val,
						:st_undfus_pos_crrnt.l_uexsell_qty,
						:st_undfus_pos_crrnt.d_uexsell_val,
						:st_undfus_pos_crrnt.c_uopnpstn_flw,
						:st_undfus_pos_crrnt.d_initial_mrgn,
						:st_undfus_pos_crrnt.d_reqd_initial_mrgn,
						:st_undfus_pos_crrnt.d_eba_expr_mrgn,
						:st_undfus_pos_crrnt.d_uspan_wenov_mrgn,
						:st_undfus_pos_crrnt.d_span_wemult_mrgn,
						:st_undfus_pos_crrnt.d_blckd_pl,
						:c_mtm_flag
		FROM    FUS_FO_UNDRLYNG_SPN_PSTN
		WHERE	  FUS_CLM_MTCH_ACCNT  = :st_pstn_actn_var.c_cln_mtch_accnt
		AND     FUS_XCHNG_CD        = :st_pstn_actn_var.c_xchng_cd
		AND     FUS_UNDRLYNG        = :st_pstn_actn_var.c_undrlyng;

	if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
	{
		fn_errlog ( c_ServiceName, "S31090", SQLMSG, c_err_msg.arr );								/*** VQC ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );											/*** VQC ***/
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );										/*** VQC ***/
		/** tpfree((char *)ptr_fml_Obuf);  Ver 2.8 **/
   	tpfree((char *)ptr_fml_Sbuf); /** Ver 2.8 ***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	if ( SQLCODE == NO_DATA_FOUND )
	{
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog ( c_ServiceName, " Inside No Data Found For Following :" );
			fn_userlog ( c_ServiceName, " Match Account Is %s:",st_pstn_actn_var.c_cln_mtch_accnt );
			fn_userlog ( c_ServiceName, " Underlying Is    %s:",st_pstn_actn_var.c_undrlyng );
			fn_userlog ( c_ServiceName, " Exchange Code Is %s:",st_pstn_actn_var.c_xchng_cd );
		}
		fn_errlog ( c_ServiceName, "S31095", SQLMSG, c_err_msg.arr );								/*** VQC ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );											/*** VQC ***/
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );										/*** VQC ***/
		/** tpfree((char *)ptr_fml_Obuf);  Ver 2.8 **/
   	tpfree((char *)ptr_fml_Sbuf); /**  Ver 2.8 ***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	if ( ( c_mtm_flag == UNDER_MTM ) && ( strcmp ( st_pstn_actn_var.c_user_id,"system" ) != 0 ) &&
			 ( st_pstn_actn_var.l_session_id!= 0 ))   
	{
		fn_errlog(c_ServiceName, "B28009", DEFMSG, c_err_msg.arr );									/*** VQC ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );											/*** VQC ***/
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );										/*** VQC ***/
		/** tpfree((char *)ptr_fml_Obuf);  Ver 2.8 **/
   	tpfree((char *)ptr_fml_Sbuf); /**  Ver 2.8 ***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}


	 
	/******** Set UPOS_to_be fields to default ********/
	strcpy( st_undfus_pos_to_be.c_cln_mtch_accnt,st_pstn_actn_var.c_cln_mtch_accnt );
	strcpy( st_undfus_pos_to_be.c_xchng_cd, st_pstn_actn_var.c_xchng_cd );
	strcpy( st_undfus_pos_to_be.c_undrlyng, st_pstn_actn_var.c_undrlyng );
	st_undfus_pos_to_be.c_indstk  = st_pstn_actn_var.c_ctgry_indstk;
   
	st_undfus_pos_to_be.l_uibuy_qty = 0;
	st_undfus_pos_to_be.d_uibuy_val = 0;
	st_undfus_pos_to_be.l_uisell_qty = 0;
	st_undfus_pos_to_be.d_uisell_val = 0;
	st_undfus_pos_to_be.l_uexbuy_qty = 0;
	st_undfus_pos_to_be.d_uexbuy_val = 0;
	st_undfus_pos_to_be.l_uexsell_qty = 0;
	st_undfus_pos_to_be.d_uexsell_val = 0;
	st_undfus_pos_to_be.c_uopnpstn_flw = 'N';

	st_undfus_pos_to_be.l_ubuy_exctd_qty = 0;
	st_undfus_pos_to_be.l_usell_exctd_qty = 0;

	st_undfus_pos_to_be.l_uopnpstn_qty = 0;
	st_undfus_pos_to_be.d_uopnpstn_val = 0;
	st_undfus_pos_to_be.d_umtm_opn_val = 0;

	/*** Fetch each of the contracts from fcp table      ***/
	/*** and  find the contract on action needs to       ***/
	/*** be applied . Go on adding each of the contarcts ***/
	/*** to the underlying position .                    ***/

	/*** Copying the req details to fetch from the contract table ***/

	strcpy( sql_cln_mtch_accnt,st_pstn_actn_var.c_cln_mtch_accnt);
	strcpy( sql_xchng_cd,st_pstn_actn_var.c_xchng_cd);
	strcpy( sql_undrlyng,st_pstn_actn_var.c_undrlyng);
	sql_prd_typ = st_pstn_actn_var.c_prd_typ; 

	/*** Ver 7.0 Quantity check added in FCP selection ****/

	EXEC SQL ALLOCATE :sys_cursor;

	EXEC SQL EXECUTE                                                       
		BEGIN                                                             
		OPEN :sys_cursor FOR                                             
					SELECT	FCP_CLM_MTCH_ACCNT,                       
									FCP_XCHNG_CD,                             
									FCP_PRDCT_TYP,                            
									FCP_INDSTK,                               
									FCP_UNDRLYNG,                             
									TO_CHAR (FCP_EXPRY_DT,'DD-Mon-YYYY'),     
									FCP_EXER_TYP,                             
									FCP_IBUY_QTY,                             
									FCP_IBUY_ORD_VAL,                         
									FCP_ISELL_QTY,                            
									FCP_ISELL_ORD_VAL,                        
									FCP_EXBUY_QTY,                            
									FCP_EXBUY_ORD_VAL,                        
									FCP_EXSELL_QTY,                           
									FCP_EXSELL_ORD_VAL, 
									FCP_OPT_TYP,
									FCP_STRK_PRC,                      
									FCP_BUY_EXCTD_QTY,        
									FCP_SELL_EXCTD_QTY,       
									FCP_OPNPSTN_FLW,          
									FCP_OPNPSTN_QTY,           
									FCP_OPNPSTN_VAL,          
									FCP_MTM_OPN_VAL,          
									FCP_OPT_PREMIUM
					FROM   FCP_FO_SPN_CNTRCT_PSTN                    
					WHERE  FCP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt  
					AND	FCP_XCHNG_CD          = :sql_xchng_cd        
					AND	FCP_UNDRLYNG          = :sql_undrlyng   
					AND   ( FCP_IBUY_QTY <> 0 OR FCP_ISELL_QTY <> 0 OR FCP_EXBUY_QTY <> 0 OR FCP_EXSELL_QTY <> 0 
									OR FCP_OPNPSTN_QTY <> 0 OR FCP_OPT_PREMIUM <> 0 )
					ORDER BY FCP_EXPRY_DT asc;                       
	END;                                                             
	END-EXEC;                                                        


	if ( SQLCODE != 0 )
	{
		EXEC SQL FREE :sys_cursor;
		fn_errlog ( c_ServiceName, "S31100", SQLMSG, c_err_msg.arr );									/*** VQC ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );												/*** VQC ***/			
	  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );											/*** VQC ***/
		/** tpfree((char *)ptr_fml_Obuf);  Ver 2.8 **/
   	tpfree((char *)ptr_fml_Sbuf);  /** Ver 2.8 ***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	
	c_pos_avl = 'N';

	if(st_ip_xchngbk.l_ors_msg_typ == ORS_NEW_ORD_RJCT ||
		st_ip_xchngbk.l_ors_msg_typ  == ORS_MOD_ORD_RJCT ||
		st_ip_xchngbk.l_ors_msg_typ  == ORS_MOD_ORD_ACPT ||  
		st_ip_xchngbk.l_ors_msg_typ  == ORS_CAN_ORD_ACPT ||
    st_ip_xchngbk.l_ors_msg_typ  == ORS_IOC_CAN_ACPT ||                   /*** Ver 1.3 ***/
    st_ip_xchngbk.l_ors_msg_typ  == ORS_2L_ORD_CNCL  ||                   /*** Ver 1.3 ***/
    st_ip_xchngbk.l_ors_msg_typ  == ORS_3L_ORD_CNCL  ||                   /*** Ver 1.3 ***/
    st_ip_xchngbk.l_ors_msg_typ  == ORS_IOC_CAN_ACPT ||                   /*** Ver 1.3 ***/
    st_ip_xchngbk.l_ors_msg_typ  == ORS_ORD_FRZ_CNCL ||                   /*** Ver 1.3 ***/
		st_ip_xchngbk.l_ors_msg_typ  == ORS_ORD_EXP ||												/*** Ver 1.9 ***/
		st_ip_xchngbk.l_ors_msg_typ  == ORS_CAN_ORD_RJCT) /*** Added On 07-Dec-2011 ***/
	{
		/******** Commented in Ver 3.2 Starts *****************
		ptr_fml_Obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

		if ( ptr_fml_Obuf == NULL )
		{
			fn_errlog(c_ServiceName, "S31105", TPMSG, c_err_msg);						
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );		
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
**   tpfree((char *)ptr_fml_Obuf); Ver 2.8 ***
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
*******************Ver 3.2 Ends *****************************/
		/*** ptr_fml_Ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN*10);
								*** Ver 1.1 - Size increased by multiple of 10 to accomodate the big sized portfolio ***
		*** Commented in Ver 4.0 ***/

		ptr_fml_Ibuf = (FBFR32 *)tprealloc((char *)ptr_fml_Ibuf,( Fsizeof32(ptr_fml_Ibuf) + MIN_FML_BUF_LEN*10));  				/*** Added in Ver 4.0 ***/	


		if ( ptr_fml_Ibuf == NULL )
		{
			EXEC SQL CLOSE :sys_cursor; /** Ver 3.8 **/
      EXEC SQL FREE :sys_cursor;  /** Ver 3.8 **/
			fn_errlog(c_ServiceName, "S31110", TPMSG, c_err_msg.arr);											/*** VQC ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );												/*** VQC ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );											/*** VQC ***/
			/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
			tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}


		EXEC  SQL
		SELECT  SPN_PRTFL1_SEQ.nextval
		INTO    :l_prtfl_seq1
		FROM    DUAL;

		if ( SQLCODE  !=  0 )
		{
			EXEC SQL CLOSE :sys_cursor; /** Ver 3.8 **/
      EXEC SQL FREE :sys_cursor;  /** Ver 3.8 **/
			fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
			fn_errlog(c_ServiceName,"S31115",SQLMSG, c_err_msg.arr);												/*** VQC ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );													/*** VQC ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );												/*** VQC ***/
			/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
			tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		EXEC  SQL
		SELECT  SPN_PRTFL1_SEQ.nextval
		INTO    :l_prtfl_seq2
		FROM    DUAL;

		if ( SQLCODE  !=  0 )
		{ 
			EXEC SQL CLOSE :sys_cursor; /** Ver 3.8 **/
      EXEC SQL FREE :sys_cursor;  /** Ver 3.8 **/
			fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
			fn_errlog(c_ServiceName,"S31120",SQLMSG, c_err_msg.arr);												/*** VQC ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );													/*** VQC ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );												/*** VQC ***/
			/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
			tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		MEMSET(c_inp_strng);     /*** Ver 1.1 ***/
		MEMSET(c_inp_strng1);   /*** Ver 1.1 ***/
		MEMSET(c_inp_strng11);   /*** Ver 1.1 ***/
		MEMSET(c_inp_strng2);   /*** Ver 1.1 ***/
		MEMSET(c_inp_strng22);   /*** Ver 1.1 ***/

		strcpy(c_inp_strng1,"1^");
		strcpy(c_inp_strng2,"|");
		/** Ver 1.4 starts ***/
		if(strcmp(sql_xchng_cd,"NFO") == 0)
		{
			strcat(c_inp_strng1,"NSE^");
		}
		else if (strcmp(sql_xchng_cd,"BFO") == 0)
		{
			strcat(c_inp_strng1,"BSE^");
		}
		/** Ver 1.4 Ends ****/
		sprintf(c_seq_num1,"%ld",l_prtfl_seq1);
		sprintf(c_seq_num2,"%ld",l_prtfl_seq2);

		strcat( c_inp_strng1 , c_seq_num1 );
		strcat( c_inp_strng2 , c_seq_num2 );

		strcat(c_inp_strng1,"^");
		strcat(c_inp_strng2,"^");

	}


				
	EXEC SQL
		SELECT  FCB_UNDRLYNG_BSKT_ID
		INTO    :l_basket_id
		FROM    FCB_FO_CLN_BSKT_ALLTD
		WHERE   FCB_CLN_LVL = ( SELECT  CLM_CLNT_LVL
														FROM    CLM_CLNT_MSTR
														WHERE   CLM_MTCH_ACCNT = :sql_cln_mtch_accnt);

	if ( SQLCODE != 0 )
	{
		EXEC SQL CLOSE :sys_cursor;
		EXEC SQL FREE :sys_cursor; 
		fn_errlog ( c_ServiceName, "S31125", SQLMSG, c_err_msg.arr );									/*** VQC ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );												/*** VQC ***/
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );											/*** VQC ***/
		/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
		tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}


	while ( 1 )
	{

		d_opt_prmum = 0.0;
    d_expsr_mrgn      = 0.0;
    d_min_expsr_mrgn  = 0.0;
		d_cntrct_pl = 0.0;
		d_strike_prc = 0.0;		/*** Ver 1.1 ***/
		d_blkd_prmum = 0.0;										/*** Ver 5.7 ***/
		MEMSET(c_exp_dt);											/*** Ver 5.7 ***/
		MEMSET(st_cntfcp_pos_crrnt);					/*** Ver 5.7 ***/

		EXEC SQL 
		FETCH :sys_cursor
		INTO		                   					
		:st_cntfcp_pos_crrnt.c_cln_mtch_accnt, 				
		:st_cntfcp_pos_crrnt.c_xchng_cd,       				
		:st_cntfcp_pos_crrnt.c_prd_typ,        				
		:st_cntfcp_pos_crrnt.c_ctgry_indstk,   				
		:st_cntfcp_pos_crrnt.c_undrlyng,       				
		:c_exp_dt,                         				
		:st_cntfcp_pos_crrnt.c_exer_typ,       				
		:st_cntfcp_pos_crrnt.l_ibuy_qty,       				
		:st_cntfcp_pos_crrnt.d_ibuy_ord_val,    				
		:st_cntfcp_pos_crrnt.l_isell_qty,      				
		:st_cntfcp_pos_crrnt.d_isell_ord_val,   				
		:st_cntfcp_pos_crrnt.l_exbuy_qty,      				
		:st_cntfcp_pos_crrnt.d_exbuy_ord_val,   				
		:st_cntfcp_pos_crrnt.l_exsell_qty,     				
		:st_cntfcp_pos_crrnt.d_exsell_ord_val,  				
		:st_cntfcp_pos_crrnt.c_opt_typ,  				
		:st_cntfcp_pos_crrnt.l_strike_prc,  				
		:st_cntfcp_pos_crrnt.l_buy_exctd_qty,  				
		:st_cntfcp_pos_crrnt.l_sell_exctd_qty, 				
		:st_cntfcp_pos_crrnt.c_opnpstn_flw,    				
		:st_cntfcp_pos_crrnt.l_opnpstn_qty,    				
		:st_cntfcp_pos_crrnt.d_opnpstn_val,    				
		:st_cntfcp_pos_crrnt.d_mtm_opn_val,
		:d_blkd_prmum;

		if ( SQLCODE != 0 )
		{
			if ( SQLCODE == NO_DATA_FOUND )
			{
				break;
			}

			EXEC SQL CLOSE :sys_cursor;
			EXEC SQL FREE :sys_cursor;
			fn_errlog ( c_ServiceName, "S31130", SQLMSG,c_err_msg.arr );											/*** VQC ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );														/*** VQC ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );													/*** VQC ***/
			/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
			tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

		}

		i_cntrct_cnt++;							/*** Ver 1.1 ***/

		SETNULL( c_exp_dt );                                                                                  
		strcpy ( st_cntfcp_pos_crrnt.c_expry_dt, (char *) c_exp_dt.arr );                                         
		rtrim(st_cntfcp_pos_crrnt.c_xchng_cd);                                                                    
		rtrim(st_cntfcp_pos_crrnt.c_undrlyng);                                                                    
		rtrim(st_cntfcp_pos_crrnt.c_expry_dt);                                                                    
		rtrim(st_pstn_actn_var.c_undrlyng);                                                                    

		if(DEBUG_MSG_LVL_3)                                                                                   
		{                                                                                                     
			fn_userlog ( c_ServiceName, "Getting current contract level Position");                         
			fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_exp_dt.arr );                         
			fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntfcp_pos_crrnt.l_ibuy_qty );          
			fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntfcp_pos_crrnt.d_ibuy_ord_val);       
			fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntfcp_pos_crrnt.l_isell_qty );         
			fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntfcp_pos_crrnt.d_isell_ord_val);      
			fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntfcp_pos_crrnt.l_exbuy_qty );         
			fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntfcp_pos_crrnt.d_exbuy_ord_val);      
			fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntfcp_pos_crrnt.l_exsell_qty );
			fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", st_cntfcp_pos_crrnt.d_exsell_ord_val );        
			fn_userlog ( c_ServiceName, "Option Type is    :%c: ", st_cntfcp_pos_crrnt.c_opt_typ);        
			fn_userlog ( c_ServiceName, "Strike Price is   :%ld:", st_cntfcp_pos_crrnt.l_strike_prc);        
			fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntfcp_pos_crrnt.l_buy_exctd_qty );     
			fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntfcp_pos_crrnt.l_sell_exctd_qty );    
			fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntfcp_pos_crrnt.l_opnpstn_qty );       
			fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntfcp_pos_crrnt.d_opnpstn_val);       
			fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntfcp_pos_crrnt.d_mtm_opn_val );       
		}                                                                                                     

		if(DEBUG_MSG_LVL_3)
		{

			fn_userlog ( c_ServiceName, "FOllowing Fetched from contract ");    
			fn_userlog ( c_ServiceName, "Exchnge code :%s:", st_cntfcp_pos_crrnt.c_xchng_cd);    
			fn_userlog ( c_ServiceName, "Product Type is:%c:",st_cntfcp_pos_crrnt.c_prd_typ );    
			fn_userlog ( c_ServiceName, "Underlying is:%s:",st_cntfcp_pos_crrnt.c_undrlyng );    
			fn_userlog ( c_ServiceName, "Expiry Date IS:%s:",st_cntfcp_pos_crrnt.c_expry_dt );    
			fn_userlog ( c_ServiceName, "Option Type IS:%c:",st_cntfcp_pos_crrnt.c_opt_typ );    
			fn_userlog ( c_ServiceName, "Strike Price :%ld:", st_cntfcp_pos_crrnt.l_strike_prc);    
			fn_userlog ( c_ServiceName, "Exercie Type is:%c:",st_cntfcp_pos_crrnt.c_exer_typ );   

			fn_userlog ( c_ServiceName, "FOllowing from  Position Struct");
			fn_userlog ( c_ServiceName, "Exchnge code :%s:", st_pstn_actn_var.c_xchng_cd );
			fn_userlog ( c_ServiceName, "Product Type is:%c:",st_pstn_actn_var.c_prd_typ);
			fn_userlog ( c_ServiceName, "Underlying is:%s:",st_pstn_actn_var.c_undrlyng);
			fn_userlog ( c_ServiceName, "Expiry Date IS:%s:",st_pstn_actn_var.c_expry_dt);
			fn_userlog ( c_ServiceName, "Option Type IS:%c:",st_pstn_actn_var.c_opt_typ);
			fn_userlog ( c_ServiceName, "Strike Price :%ld:", st_pstn_actn_var.l_strike_prc);
			fn_userlog ( c_ServiceName, "Exercie Type is:%c:",st_pstn_actn_var.c_exrc_typ);
			fn_userlog ( c_ServiceName, "Just Before Comparison");

		}


		if( (strcmp(st_cntfcp_pos_crrnt.c_xchng_cd,st_pstn_actn_var.c_xchng_cd) == 0 ) &&
		(st_cntfcp_pos_crrnt.c_prd_typ == st_pstn_actn_var.c_prd_typ) && 
		(strcmp(st_cntfcp_pos_crrnt.c_undrlyng,st_pstn_actn_var.c_undrlyng) == 0 ) &&
		(strcasecmp(st_cntfcp_pos_crrnt.c_expry_dt,st_pstn_actn_var.c_expry_dt) == 0 ) &&
		(st_cntfcp_pos_crrnt.c_opt_typ == st_pstn_actn_var.c_opt_typ) && 
		(st_cntfcp_pos_crrnt.l_strike_prc == st_pstn_actn_var.l_strike_prc) && 
		(st_cntfcp_pos_crrnt.c_exer_typ == st_pstn_actn_var.c_exrc_typ) )
		{
			if(DEBUG_MSG_LVL_2)
			{
				fn_userlog ( c_ServiceName, " InsideMatch FOund :: ");
			}
			memcpy ( &st_cntpos_old,  &st_cntfcp_pos_crrnt,  sizeof( st_cntpos_old ) );	

   
			i_returncode = fn_apply_spn_actn( c_ServiceName,&st_pstn_actn_var, &st_cntfcp_pos_crrnt,ptr_st_err_msg );  
			if ( i_returncode == -1 )
			{
				EXEC SQL CLOSE :sys_cursor; /** Ver 3.8 **/
        EXEC SQL FREE :sys_cursor;  /** Ver 3.8 **/
				fn_errlog ( c_ServiceName, "S31135", LIBMSG, c_err_msg.arr );													/*** VQC ***/
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																/*** VQC ***/
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );															/*** VQC ***/
				/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
				tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

			}

			memcpy ( &st_cntpos_md_rc, &st_cntfcp_pos_crrnt,  sizeof( st_cntpos_md_rc ) );

			if(	st_ip_xchngbk.l_ors_msg_typ == ORS_NEW_ORD_RJCT ||
					st_ip_xchngbk.l_ors_msg_typ == ORS_MOD_ORD_RJCT ||
					st_ip_xchngbk.l_ors_msg_typ == ORS_MOD_ORD_ACPT || 
					st_ip_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_ACPT ||
					st_ip_xchngbk.l_ors_msg_typ == ORS_IOC_CAN_ACPT ||                   /*** Ver 1.3 ***/
					st_ip_xchngbk.l_ors_msg_typ == ORS_2L_ORD_CNCL  ||                   /*** Ver 1.3 ***/
					st_ip_xchngbk.l_ors_msg_typ == ORS_3L_ORD_CNCL  ||                   /*** Ver 1.3 ***/
					st_ip_xchngbk.l_ors_msg_typ == ORS_IOC_CAN_ACPT ||                   /*** Ver 1.3 ***/
					st_ip_xchngbk.l_ors_msg_typ == ORS_ORD_FRZ_CNCL ||                   /*** Ver 1.3 ***/
					st_ip_xchngbk.l_ors_msg_typ == ORS_ORD_EXP ||												 /*** Ver 1.9 ***/
					st_ip_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_RJCT ) /*** added On 07_Dec_2011 ***/

			{	

				if(DEBUG_MSG_LVL_3)
				{
					if(DEBUG_MSG_LVL_0)   /*** VQC ***/
  				{
						fn_userlog(c_ServiceName,"SPAN  - Inside Premium Calculation.");
					}
					fn_userlog(c_ServiceName,"st_pstn_actn_var.c_trnsctn_flw Is :%c:.",st_pstn_actn_var.c_trnsctn_flw);
				}

				if( st_cntfcp_pos_crrnt.c_prd_typ	==	'O' && st_pstn_actn_var.c_trnsctn_flw == 'B')		
				{
					d_opt_prmum = st_cntfcp_pos_crrnt.d_ibuy_ord_val ;
					d_total_prmum = d_blkd_prmum  - d_opt_prmum ;

					if(DEBUG_MSG_LVL_2)
					{
						fn_userlog(c_ServiceName,"SPAN  - d_opt_prmum Is :%lf:",d_opt_prmum);
						fn_userlog(c_ServiceName,"SPAN  - d_total_prmum Is :%lf:",d_total_prmum);
						fn_userlog(c_ServiceName,"SPAN  d_blkd_prmum  Is :%lf:",d_blkd_prmum);
					}

					switch ( st_pstn_actn_var.l_actn_typ)
					{
						case  ORS_NEW_ORD_RJCT:
									strcpy( c_narration_id , ON_ORDER_REJECTION);
									c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
									break;
						case  ORS_NEW_ORD_ACPT:
                  strcpy( c_narration_id , ON_ORDER_ACCEPTANCE);
                  c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                  break;
						case  ORS_MOD_ORD_RJCT:
									strcpy( c_narration_id , ON_MODIFICATION_REJECTION);
									c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
									break;
						case  ORS_MOD_ORD_ACPT:
									strcpy( c_narration_id , ON_MODIFICATION_ACCEPTANCE);
									c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
									break;  
						case  ORS_CAN_ORD_ACPT:
									strcpy( c_narration_id , ON_CANCELLATION_ACCEPTANCE);
									c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
									break;  
						case  ORS_CAN_ORD_RJCT:
                  strcpy( c_narration_id , ON_CANCELLATION_REJECT);
                  c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                  break; 
						case  ORS_ORD_EXP:				/*** Ver 1.3 ***/
                  strcpy( c_narration_id , ON_EXPIRY );
                  c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                  break; 
					}

					if ( d_total_prmum  !=  0 )
					{
						d_balance_amt  = 0.0;   /*** Ver 1.1 ***/
						i_returncode = fn_upd_spnlimits ( c_ServiceName,
																							&st_pstn_actn_var,
																							ptr_st_err_msg,
																							c_narration_id,
																							c_dr_without_lmt_flg,
																							d_total_prmum,
																							&d_balance_amt
																						);
						if ( i_returncode != 0 )
						{
							fn_errlog( c_ServiceName, "S31140",LIBMSG , c_err_msg.arr );								/*** VQC ***/
							EXEC SQL CLOSE :sys_cursor;	/*** Ver 5.7 ***/
							EXEC SQL FREE :sys_cursor;  /** Ver 3.8 **/
							/* EXEC SQL CLOSE :sys_cursor; *** Ver 5.7 ***/
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );											/*** VQC ***/
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );										/*** VQC ***/
							/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
							tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						} 
						d_total_prmum = d_total_prmum - d_balance_amt;		/*** Ver 1.6 ***/
					}

					EXEC SQL
					UPDATE  FCP_FO_SPN_CNTRCT_PSTN
					SET     FCP_OPT_PREMIUM     = :d_total_prmum * (-1)  +  FCP_OPT_PREMIUM
					WHERE   FCP_CLM_MTCH_ACCNT  = :st_cntfcp_pos_crrnt.c_cln_mtch_accnt
					AND     FCP_XCHNG_CD        = :st_cntfcp_pos_crrnt.c_xchng_cd
					AND     FCP_PRDCT_TYP       = :st_cntfcp_pos_crrnt.c_prd_typ
					AND     FCP_UNDRLYNG        = :st_cntfcp_pos_crrnt.c_undrlyng
					AND     FCP_EXPRY_DT        = :c_exp_dt
					AND     FCP_EXER_TYP        = :st_cntfcp_pos_crrnt.c_exer_typ
					AND     FCP_OPT_TYP         = :st_cntfcp_pos_crrnt.c_opt_typ
					AND     FCP_STRK_PRC        = :st_cntfcp_pos_crrnt.l_strike_prc;

					if ( SQLCODE != 0 )
					{
						fn_errlog(c_ServiceName, "S31145", SQLMSG, c_err_msg.arr );										/*** VQC ***/
						EXEC SQL CLOSE :sys_cursor;
						EXEC SQL FREE :sys_cursor;  /** Ver 3.8 **/
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );												/*** VQC ***/
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );											/*** VQC ***/
						/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
						tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}

				}

			} /** end of if **/
			c_pos_avl = 'Y';
		}


		if(	st_ip_xchngbk.l_ors_msg_typ == ORS_NEW_ORD_RJCT ||
				st_ip_xchngbk.l_ors_msg_typ == ORS_MOD_ORD_RJCT ||
			  st_ip_xchngbk.l_ors_msg_typ == ORS_MOD_ORD_ACPT ||  
				st_ip_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_ACPT ||
				st_ip_xchngbk.l_ors_msg_typ == ORS_IOC_CAN_ACPT ||                   /*** Ver 1.3 ***/
				st_ip_xchngbk.l_ors_msg_typ == ORS_2L_ORD_CNCL  ||                   /*** Ver 1.3 ***/
				st_ip_xchngbk.l_ors_msg_typ == ORS_3L_ORD_CNCL  ||                   /*** Ver 1.3 ***/
				st_ip_xchngbk.l_ors_msg_typ == ORS_IOC_CAN_ACPT ||                   /*** Ver 1.3 ***/
				st_ip_xchngbk.l_ors_msg_typ == ORS_ORD_FRZ_CNCL ||                   /*** Ver 1.3 ***/
				st_ip_xchngbk.l_ors_msg_typ == ORS_ORD_EXP ||												 /*** Ver 1.9 ***/
				st_ip_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_RJCT ) /*** added On 07_Dec_2011 ***/

		{
			if(DEBUG_MSG_LVL_3)
			{ 
				fn_userlog ( c_ServiceName, " Inside String formation And Option Premium Calculation :: ");		 
			}

			EXEC SQL
			SELECT  NVL(FTQ_LST_TRD_PRC,0)    	/*** Ver 1.1 ***/
			INTO    :d_ltp
			FROM    FTQ_FO_TRD_QT
			WHERE   FTQ_XCHNG_CD  = :st_cntfcp_pos_crrnt.c_xchng_cd 
			AND     FTQ_PRDCT_TYP = :st_cntfcp_pos_crrnt.c_prd_typ
			AND     FTQ_UNDRLYNG  = :st_cntfcp_pos_crrnt.c_undrlyng
			AND     FTQ_EXPRY_DT  = :c_exp_dt
			AND     FTQ_EXER_TYP  = :st_cntfcp_pos_crrnt.c_exer_typ
			AND     FTQ_OPT_TYP   = :st_cntfcp_pos_crrnt.c_opt_typ
			AND     FTQ_STRK_PRC  = :st_cntfcp_pos_crrnt.l_strike_prc ;

			if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
			{
				fn_errlog ( c_ServiceName, "S31150", SQLMSG, c_err_msg.arr );											/*** VQC ***/
				EXEC SQL CLOSE :sys_cursor;
				EXEC SQL FREE :sys_cursor;  /** Ver 3.8 **/
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );														/*** VQC ***/
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );													/*** VQC ***/
				/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
				tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}


			if ( SQLCODE == NO_DATA_FOUND )  /*** Note : NO_DATA_FOUND handling Added For CorpActn Issue ***/
			{
				d_ltp = 0.0;
			}

			d_ltp = d_ltp / 100;

				EXEC SQL
					SELECT  SEM_MAP_VL
					INTO    :c_xchng_cd
					FROM    SEM_STCK_MAP
					WHERE   SEM_STCK_CD = :st_cntfcp_pos_crrnt.c_undrlyng
			/**	AND     SEM_ENTTY   = 3;								*** Ver 1.4 comment ***/
					AND     SEM_ENTTY   = decode(:sql_xchng_cd,'NFO',3,'BFO',14);	/*** Ver 1.4 **/

				if ( SQLCODE  !=  0 )
				{
					fn_errlog ( c_ServiceName, "S31155", SQLMSG, c_err_msg.arr );										/*** VQC ***/
					EXEC SQL CLOSE :sys_cursor;
					EXEC SQL FREE :sys_cursor;  /** Ver 3.8 **/
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );													/*** VQC ***/
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );  /** Ver 3.8 **/				/*** VQC ***/
					tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
					/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

			SETNULL(c_xchng_cd);


			EXEC SQL
			SELECT to_char(to_date(:st_cntfcp_pos_crrnt.c_expry_dt,'DD-Mon-YYYY'),'dd-Mon-YY')
			INTO  :c_expry_dt
			FROM  DUAL;

 
			if ( SQLCODE  !=  0 )
			{
				fn_errlog ( c_ServiceName, "S31160", SQLMSG, c_err_msg.arr );									  	/*** VQC ***/										
				EXEC SQL CLOSE :sys_cursor;
				EXEC SQL FREE :sys_cursor;  /** Ver 3.8 **/
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );														/*** VQC ***/
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );													/*** VQC ***/
				tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
				/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			/*** l_strike_prc  = st_cntfcp_pos_crrnt.l_strike_prc/100  ; 	*** Commented in Ver 1.1 ***/

			/*** Ver 1.1 starts here ***/
			d_strike_prc  = (double) st_cntfcp_pos_crrnt.l_strike_prc / 100.00  ;	
			sprintf(c_strk_prc,"%lf",d_strike_prc);

			fn_spn_rtrim(c_strk_prc,'0');
			fn_spn_rtrim(c_strk_prc,'.');
			/*** Ver 1.1 ends here ***/
	
			/**** Commented by Mahesh 
			l_max_opn_qty = st_cntfcp_pos_crrnt.l_opnpstn_qty   +  st_cntfcp_pos_crrnt.l_ibuy_qty ;
			l_min_opn_qty = st_cntfcp_pos_crrnt.l_opnpstn_qty   +  st_cntfcp_pos_crrnt.l_isell_qty   ;
			*********************/

			l_max_opn_qty = st_cntfcp_pos_crrnt.l_opnpstn_qty  +  fn_maxl(st_cntfcp_pos_crrnt.l_ibuy_qty,st_cntfcp_pos_crrnt.l_exbuy_qty) ;
      l_min_opn_qty = st_cntfcp_pos_crrnt.l_opnpstn_qty  +  fn_maxl(abs(st_cntfcp_pos_crrnt.l_isell_qty),abs(st_cntfcp_pos_crrnt.l_exsell_qty)) * -1  ;

			if ( st_cntfcp_pos_crrnt.c_prd_typ ==  'O' )
			{			
				l_temp_qty    = fn_minl ( l_max_opn_qty , l_min_opn_qty );
				l_max_opn_qty = l_temp_qty  ;
				l_min_opn_qty = l_temp_qty  ;

				if ( d_opt_prmum == 0 )
				{
					if(DEBUG_MSG_LVL_0)   /*** VQC ***/
					{
					fn_userlog(c_ServiceName,"SPAN  - Inside d_opt_prmum Is 0.");
					}
					d_opt_prmum = d_blkd_prmum;
				}

			}

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog ( c_ServiceName, " d_ltp Is :: %lf",d_ltp);		 
				fn_userlog ( c_ServiceName, " c_expry_dt Is :: %s",c_expry_dt);		
				fn_userlog ( c_ServiceName, " c_strk_prc Is :: %s",c_strk_prc);			/*** Ver 1.1 ***/
				fn_userlog ( c_ServiceName, " Product Type Is:: %c",st_cntfcp_pos_crrnt.c_prd_typ);		
				fn_userlog ( c_ServiceName, " st_cntfcp_pos_crrnt.l_opnpstn_qty Is :: %ld",
																			st_cntfcp_pos_crrnt.l_opnpstn_qty);		
				fn_userlog ( c_ServiceName, " st_cntfcp_pos_crrnt.l_ibuy_qty Is :: %ld",
																			st_cntfcp_pos_crrnt.l_ibuy_qty);		
				fn_userlog ( c_ServiceName, " st_cntfcp_pos_crrnt.l_isell_qty Is :: %ld",
																			st_cntfcp_pos_crrnt.l_isell_qty);	    
				fn_userlog ( c_ServiceName, " l_max_opn_qty Is :: %ld",l_max_opn_qty);		
				fn_userlog ( c_ServiceName, " l_min_opn_qty Is :: %ld",l_min_opn_qty);		
			}

			if(	l_cntr	==	0	)
			{

				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"l_cntr Is :%ld:",l_cntr);
				}

				if(st_cntfcp_pos_crrnt.c_prd_typ	==	'F')
				{
					sprintf(c_inp_strng11,"%s^%s~%c:%s^%ld^%lf",st_cntfcp_pos_crrnt.c_cln_mtch_accnt,c_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);

					strcat(c_inp_strng1,c_inp_strng11);

					sprintf(c_inp_strng22,"%s^%s~%c:%s^%ld^%lf",st_cntfcp_pos_crrnt.c_cln_mtch_accnt,c_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);

					strcat(c_inp_strng2,c_inp_strng22);

				}
				else
				{
					sprintf(c_inp_strng11,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntfcp_pos_crrnt.c_cln_mtch_accnt,c_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,st_cntfcp_pos_crrnt.c_opt_typ,st_cntfcp_pos_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

					strcat(c_inp_strng1,c_inp_strng11);

					sprintf(c_inp_strng22,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntfcp_pos_crrnt.c_cln_mtch_accnt,c_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,st_cntfcp_pos_crrnt.c_opt_typ,st_cntfcp_pos_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

					strcat(c_inp_strng2,c_inp_strng22);

				}
			}	
			else
			{
				if(st_cntfcp_pos_crrnt.c_prd_typ  ==  'F')
				{
					sprintf(c_inp_strng11,"%s~%c:%s^%ld^%lf",c_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);

					strcat(c_inp_strng1,c_inp_strng11);

					sprintf(c_inp_strng22,"%s~%c:%s^%ld^%lf",c_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);

					strcat(c_inp_strng2,c_inp_strng22);

				}
				else
				{
					sprintf(c_inp_strng11,"%s~%c:%s:%c%c:%s^%ld^%lf",c_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,st_cntfcp_pos_crrnt.c_opt_typ,st_cntfcp_pos_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

					strcat(c_inp_strng1,c_inp_strng11);

					sprintf(c_inp_strng22,"%s~%c:%s:%c%c:%s^%ld^%lf",c_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,st_cntfcp_pos_crrnt.c_opt_typ,st_cntfcp_pos_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp); /*** Strike prc changed from long to char in Ver 1.1 ***/

					strcat(c_inp_strng2,c_inp_strng22);
	
				}
			}


			if(DEBUG_MSG_LVL_3)
			{	
				fn_userlog ( c_ServiceName, " Profit & Loss Calulation In Case Of Rejection & Cancelation Accept:: ");	
			}


			EXEC SQL
				SELECT  NVL(FTQ_LST_TRD_PRC,0),   /*** Ver 1.1 ***/
								NVL(FTQ_CLS_PRC,0)        /*** Ver 1.1 ***/
				INTO		:d_ltp,
								:d_clsng_prc
				FROM    FTQ_FO_TRD_QT
				WHERE   FTQ_XCHNG_CD  = :st_cntfcp_pos_crrnt.c_xchng_cd 
				AND     FTQ_PRDCT_TYP = :st_cntfcp_pos_crrnt.c_prd_typ
				AND     FTQ_UNDRLYNG  = :st_cntfcp_pos_crrnt.c_undrlyng
				AND     FTQ_EXPRY_DT  = :c_exp_dt
				AND     FTQ_EXER_TYP  = :st_cntfcp_pos_crrnt.c_exer_typ
				AND     FTQ_OPT_TYP   = :st_cntfcp_pos_crrnt.c_opt_typ
				AND     FTQ_STRK_PRC  = :st_cntfcp_pos_crrnt.l_strike_prc ;

			if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
			{
				EXEC SQL CLOSE :sys_cursor;
				EXEC SQL FREE :sys_cursor;
				fn_errlog ( c_ServiceName, "S31165", SQLMSG, c_err_msg.arr );												/*** VQC ***/
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );															/*** VQC ***/
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );														/*** VQC ***/
				/* tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.8 */
				tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			if ( SQLCODE == NO_DATA_FOUND)  /*** Note : NO_DATA_FOUND Handling Added For CorpActn Issue ***/
			{
				d_ltp = 0.0;
				d_clsng_prc = 0.0;
			}	



	
			if ( st_cntfcp_pos_crrnt.l_opnpstn_qty != 0 )      
			{

				if(st_cntfcp_pos_crrnt.c_prd_typ == 'O' && st_cntfcp_pos_crrnt.l_opnpstn_qty < 0)
				{
					d_cntrct_pl = (double) abs(st_cntfcp_pos_crrnt.l_opnpstn_qty) * ( d_clsng_prc - d_ltp ); /*** Added abs on 12-Dec-2011 ***/

				}
				else
				{
					if (  st_cntfcp_pos_crrnt.c_prd_typ  ==  'F' )
					{

						if( st_cntfcp_pos_crrnt.l_opnpstn_qty  > 0 )
						{
							d_cntrct_pl = ( d_ltp * (double) st_cntfcp_pos_crrnt.l_opnpstn_qty ) - 
															st_cntfcp_pos_crrnt.d_opnpstn_val; 
						}
						else if ( st_cntfcp_pos_crrnt.l_opnpstn_qty < 0 )
						{
							/* Commented By Mahesh 29-Dec-2011 
							d_cntrct_pl = fabs(st_cntfcp_pos_crrnt.d_opnpstn_val  -  
														( d_ltp * (double) abs(st_cntfcp_pos_crrnt.l_opnpstn_qty) )) ;   */

						  d_cntrct_pl = fabs(st_cntfcp_pos_crrnt.d_opnpstn_val) -  ( d_ltp * (double) abs(st_cntfcp_pos_crrnt.l_opnpstn_qty) );
						}
					}
				}

			}

			if(DEBUG_MSG_LVL_3)
			{	
				fn_userlog ( c_ServiceName, " d_cntrct_pl Is :%lf: ",d_cntrct_pl);	
			}

			i_expsr_rtrn  = fn_cal_expsr  ( c_ServiceName,
																			st_cntfcp_pos_crrnt,
																			l_basket_id,
																			&d_expsr_mrgn,
																			&d_min_expsr_mrgn,
																			&d_mltplr,
																			c_err_msg.arr																/*** VQC ***/
																		);

			if ( i_expsr_rtrn != 0 )
			{
				EXEC SQL CLOSE :sys_cursor;
				EXEC SQL FREE :sys_cursor;
				/* fn_errlog ( c_ServiceName, "S31170", SQLMSG, c_err_msg.arr ); 						*** VQC * commented in ver 5.7 **/
				fn_errlog ( c_ServiceName, "S31175", LIBMSG, c_err_msg.arr ); 						/*** Ver 5.7 ***/
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );										/*** VQC ***/
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );									/*** VQC ***/
				tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
				/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}		

			d_expsr     = d_expsr_mrgn  + d_expsr ;
			d_min_expsr = d_min_expsr_mrgn  + d_min_expsr ;

 
		}/*** end of string formation ***/ 

		fn_sum_spnpos( st_cntfcp_pos_crrnt,&st_undfus_pos_to_be);

		strcat(c_inp_strng1,",");
		strcat(c_inp_strng2,",");

		l_cntr  ++;
		d_undrlyng_pl = d_undrlyng_pl + d_cntrct_pl ;

	}   /*** end of while loop ***/

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;


  if ( c_pos_avl == 'N' )
  {
		if(DEBUG_MSG_LVL_0)   /*** VQC ***/
		{
    fn_userlog ( c_ServiceName, " No Match Found For the Given Contract" );
		}
    /* fn_errlog ( c_ServiceName, "S31180", SQLMSG, c_err_msg.arr );									*** VQC * Commented in Ver 5.7 **/
    fn_errlog ( c_ServiceName, "S31185", "NO_Match_found_for_given_contract", c_err_msg.arr );	/*** Ver 5.7 ***/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																		/*** VQC ***/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																	/*** VQC ***/
		tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
		/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }



	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog ( c_ServiceName, " After While Loop");
	}

	if(st_ip_xchngbk.l_ors_msg_typ == ORS_NEW_ORD_RJCT ||
     st_ip_xchngbk.l_ors_msg_typ == ORS_MOD_ORD_RJCT ||
     st_ip_xchngbk.l_ors_msg_typ == ORS_MOD_ORD_ACPT ||  
		 st_ip_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_ACPT ||
     st_ip_xchngbk.l_ors_msg_typ == ORS_IOC_CAN_ACPT ||                   /*** Ver 1.3 ***/
     st_ip_xchngbk.l_ors_msg_typ == ORS_2L_ORD_CNCL  ||                   /*** Ver 1.3 ***/
     st_ip_xchngbk.l_ors_msg_typ == ORS_3L_ORD_CNCL  ||                   /*** Ver 1.3 ***/
     st_ip_xchngbk.l_ors_msg_typ == ORS_IOC_CAN_ACPT ||                   /*** Ver 1.3 ***/
     st_ip_xchngbk.l_ors_msg_typ == ORS_ORD_FRZ_CNCL ||                   /*** Ver 1.3 ***/
		 st_ip_xchngbk.l_ors_msg_typ == ORS_ORD_EXP ||											  /*** Ver 1.9 ***/
     st_ip_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_RJCT ) /*** added On 07_Dec_2011 ***/

	{

		/********** Ver 3.2 Starts **************************/

		ptr_fml_Obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

		if ( ptr_fml_Obuf == NULL )
		{
			fn_errlog(c_ServiceName, "S31190", TPMSG, c_err_msg.arr);													/*** VQC ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );														/*** VQC ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );													/*** VQC ***/
			tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

   /******************* Ver 3.2 Ends ************************/
		
		st_undfus_pos_to_be.d_eba_expr_mrgn = 0.0;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog ( c_ServiceName, " Inside Rejection Cases Is :: ");		
		}

		l_length1 = strlen(c_inp_strng1);

		if( c_inp_strng1[l_length1  - 1 ] == ',')
		{
			c_inp_strng1[l_length1 -1]  ='\0';
		}

		l_length2 = strlen(c_inp_strng2);

		if( c_inp_strng2[l_length2  - 1 ] == ',')
		{
			c_inp_strng2[l_length2 -1]  ='\0';
		}


		/*** Ver 1.1 starts here ***/
  	/** if(DEBUG_MSG_LVL_1) ** Commented in Ver 3.1 ***/
  	if(DEBUG_MSG_LVL_2) /** Debug level changed to 2 in Ver 3.1 **/
  	{
    	fn_userlog( c_ServiceName, "i_cntrct_cnt = :%d:",i_cntrct_cnt);
  	}

  	if (i_cntrct_cnt > 10)
		{
    	fn_userlog( c_ServiceName, " Inside i_cntrct_cnt = :%d:",i_cntrct_cnt);
			if ( Fadd32 (ptr_fml_Ibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)	==	-1 )
			{
			 	fn_errlog( c_ServiceName, "S31195",FMLMSG , c_err_msg.arr );												/*** VQC ***/
			 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );															/*** VQC ***/
			 	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );														/*** VQC ***/
			 	tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			 	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			fn_cpy_ddr ( st_ip_xchngbk.c_rout_crt);

			MEMSET(c_inp_strng);
			strcpy(c_inp_strng,c_inp_strng1);
			strcat(c_inp_strng,"\n");
			
			if(DEBUG_MSG_LVL_5)
			{
				fn_userlog(c_ServiceName,"c_inp_strng 1 = :%s:",c_inp_strng);
			}

			if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)	==	-1 )
			{
				fn_errlog( c_ServiceName, "S31200",FMLMSG , c_err_msg.arr );												/*** VQC ***/
			 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );															/*** VQC ***/
			 	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );														/*** VQC ***/
			 	tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			 	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
			}

			i_rtrn_cd1	=	tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

			if(	i_rtrn_cd1 != 0	)
			{
				/* fn_errlog( c_ServiceName, "S31205",FMLMSG , c_err_msg.arr );												*** VQC * Ver 5.7 **/
				fn_errlog( c_ServiceName, "S31210",TPMSG , c_err_msg.arr );												/*** Ver 5.7 ***/
			 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );															/*** VQC ***/
			 	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );														/*** VQC ***/
			 	tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			 	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng1,0)  ==  -1 )
			{	
				fn_errlog( c_ServiceName, "S31215",FMLMSG , c_err_msg.arr );												/*** VQC ***/
			 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );															/*** VQC ***/
			 	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );														/*** VQC ***/
			 	tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			 	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

  		/** if(DEBUG_MSG_LVL_1) ** Commented in Ver 3.1 ***/
  		if(DEBUG_MSG_LVL_2) /** Debug level changed to 2 in Ver 3.1 **/
			{
				fn_userlog(c_ServiceName,"Output String 1 Is :%s:",c_op_strng1);
			}


      /*** Ver 6.7 Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                   c_err_msg.arr 
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31220",LIBMSG , c_err_msg.arr );     
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );        
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );     
        tpfree((char *)ptr_fml_Obuf);
        tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
   
    /*** Ver 6.7 Ends here ***/
			MEMSET(c_inp_strng);

			 /**** Ver 1.4 BUG bix Starts Here *****/

    	if( strcmp(sql_xchng_cd,"NFO") == 0 )
    	{
      	strcpy( c_inp_strng ,"1^NSE^");
    	}
    	else
    	{
        strcpy( c_inp_strng ,"1^BSE^");
    	}
    	/**** Ver 1.4 Ends Here ******/

			if(DEBUG_MSG_LVL_5)
			{
				fn_userlog(c_ServiceName,"Initial c_inp_strng2 = :%s:",c_inp_strng2);
			}

			fn_spn_ltrim(c_inp_strng2,'|');
			/*** sprintf(c_inp_strng,"1^%s",c_inp_strng2); *** Ver 1.4 ***/
			/*** sprintf(c_inp_strng,"%s",c_inp_strng2);   *** Ver 1.4 ***/
			strcat(c_inp_strng,c_inp_strng2);							/*** Ver 1.4 ***/	
			strcat(c_inp_strng,"\n");	

			if(DEBUG_MSG_LVL_5)
			{
				fn_userlog(c_ServiceName,"c_inp_strng 2 = :%s:",c_inp_strng);
			}

			if ( Fchg32 (ptr_fml_Ibuf,FFO_REMARKS,0,(char *)c_inp_strng,0)	==	-1 )
			{
				fn_errlog( c_ServiceName, "S31225",FMLMSG , c_err_msg.arr );														/*** VQC ***/
			 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																	/*** VQC ***/
			 	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																/*** VQC ***/
			 	tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			 	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
			}

			i_rtrn_cd1	=	tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

			if(	i_rtrn_cd1 != 0	)
			{
				/* fn_errlog( c_ServiceName, "S31230",FMLMSG , c_err_msg.arr );													*** VQC * Ver 5.7 **/
				fn_errlog( c_ServiceName, "S31235",TPMSG , c_err_msg.arr );													/*** Ver 5.7 ***/
			 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																/*** VQC ***/
			 	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );															/*** VQC ***/
			 	tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			 	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng2,0)  ==  -1 )
			{
				fn_errlog( c_ServiceName, "S31240",FMLMSG , c_err_msg.arr );  												/*** VQC ***/  
 				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );         												/*** VQC ***/
 				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );       												/*** VQC ***/
 				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
 				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );    
			}
		
			fn_spn_ltrim(c_op_strng2,'1');
			fn_spn_ltrim(c_op_strng2,'^');

			/** if(DEBUG_MSG_LVL_1) ** Commented in Ver 3.1 ***/
  		if(DEBUG_MSG_LVL_2) /** Debug level changed to 2 in Ver 3.1 **/
			{
				fn_userlog(c_ServiceName,"Output String 2 Is :%s:",c_op_strng2);
			}

      /*** Ver 6.7 Starts Here ***/
      i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn2,
                                    &d_bnov2,
                                    &d_total_bmrgn2,
                                    c_ServiceName,
                                    c_err_msg.arr 
                                   );
      if( i_ret_val != 0 )
      {
        fn_errlog( c_ServiceName, "S31245",LIBMSG , c_err_msg.arr );        
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );             
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );          
        tpfree((char *)ptr_fml_Obuf);
        tpfree((char *)ptr_fml_Sbuf);  
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
      }

      if(DEBUG_MSG_LVL_4)
      {
        fn_userlog(c_ServiceName,"d_spn_bmrgn2 :%lf: d_bnov2:%lf: d_total_bmrgn2:%lf:",d_spn_bmrgn2,d_bnov2,d_total_bmrgn2);
      } 
      /*** Ver 6.7 Ends here ***/
		}
		else
  	{
  	/*** Ver 1.1 Ends here ***/	
		strcpy(c_inp_strng,c_inp_strng1);
		strcat(c_inp_strng,c_inp_strng2);
		strcat(c_inp_strng,"\n");
		strcpy( c_pipe_id, st_op_xchngbk.c_pipe_id);


	
		if ( Fadd32 (ptr_fml_Ibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31250",FMLMSG , c_err_msg.arr );									/*** VQC ***/
			/* EXEC SQL CLOSE :sys_cursor; Commented in Ver 3.8 */
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );												/*** VQC ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );											/*** VQC ***/
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31255",FMLMSG , c_err_msg.arr );									/*** VQC ***/
			/* EXEC SQL CLOSE :sys_cursor; Commented in Ver 3.8 */
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );												/*** VQC ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );											/*** VQC ***/
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}

		fn_cpy_ddr ( st_ip_xchngbk.c_rout_crt);

		i_rtrn_cd1  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

		if( i_rtrn_cd1 != 0 )
		{
			fn_errlog( c_ServiceName, "S31260",TPMSG , c_err_msg.arr );										/*** VQC ***/
			/* EXEC SQL CLOSE :sys_cursor; Commented in Ver 3.8 */
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );												/*** VQC ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );											/*** VQC ***/
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31265",FMLMSG , c_err_msg.arr );									/*** VQC ***/		
			/* EXEC SQL CLOSE :sys_cursor; Commented in Ver 3.8 */	
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );												/*** VQC ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );											/*** VQC ***/
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		/** if(DEBUG_MSG_LVL_1) ** Commented in Ver 3.1 ***/
 	  if(DEBUG_MSG_LVL_2) /** Debug level changed to 2 in Ver 3.1 **/
		{
			fn_userlog(c_ServiceName,"Output String Is :%s:",c_op_strng);
		}

		strcpy(c_op_strng1,strtok(c_op_strng,"|"));
		strcpy(c_op_strng2,strtok(null_ptr,"|"));

    /*** Ver 6.7 Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg.arr 
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31270",LIBMSG , c_err_msg.arr );  
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );     
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );  
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Sbuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 6.7 Ends here ***/

		} /*** End Of Else In Ver 1.1 ***/
/*** Ver 6.5 For core start ***/
	 if(DEBUG_MSG_LVL_4)
	 {
   	fn_userlog(c_ServiceName,"Before tpfree:%s:%s:%d:",st_pstn_actn_var.c_cln_mtch_accnt,st_pstn_actn_var.c_undrlyng,i_cntrct_cnt);
	 }
    tpfree((char *)ptr_fml_Obuf);

	 if(DEBUG_MSG_LVL_4)
	 {
    fn_userlog(c_ServiceName,"After tpfree:%s:%s:%d:",st_pstn_actn_var.c_cln_mtch_accnt,st_pstn_actn_var.c_undrlyng,i_cntrct_cnt);
	 }
/*** Ver 6.5 For core ends ***/

		strcpy(c_mrgn_indctr,strtok(c_op_strng1,"^"));
		strcpy(c_xchng_cd1,strtok(null_ptr,"^"));				/*** Ver 1.4 ***/
		strcpy(c_seq_num1,strtok(null_ptr,"^"));
		strcpy(c_mtch_accnt1,strtok(null_ptr,"^"));
		strcpy(c_spn_mrgn1,strtok(null_ptr,"^"));
		strcpy(c_nov1,strtok(null_ptr,"^"));
		strcpy(c_total_mrgn1,strtok(null_ptr,"^"));

		if (i_cntrct_cnt > 10)  /*** Condition Added in Ver 1.7 ***/
    {
    strcpy(c_xchng_cd2,strtok(c_op_strng2,"^"));    /** Ver 1.4 ***/
	 /*	strcpy(c_seq_num2,strtok(c_op_strng2,"^"));    ** Ver 1.4 ***/
	 	strcpy(c_seq_num2,strtok(null_ptr,"^"));        /** Ver 1.4 ***/
		}
		else
		{
			strcpy(c_seq_num2,strtok(c_op_strng2,"^"));   /*** Ver 1.7 ***/
		}
		strcpy(c_mtch_accnt2,strtok(null_ptr,"^"));
		strcpy(c_spn_mrgn2,strtok(null_ptr,"^"));
		strcpy(c_nov2,strtok(null_ptr,"^"));
		strcpy(c_total_mrgn2,strtok(null_ptr,"^"));

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN c_mtch_accnt1 Is :%s:",c_mtch_accnt1);
			fn_userlog(c_ServiceName,"SPAN c_xchng_cd1 Is :%s:",c_xchng_cd1);		 /*** Ver 1.4 ***/
			fn_userlog(c_ServiceName,"SPAN c_xchng_cd2 Is :%s:",c_xchng_cd2); /** Ver 1.4 ***/
      fn_userlog(c_ServiceName,"SPAN c_seq_num2 Is :%s:",c_seq_num2);  /** Ver 1.4 ***/
      fn_userlog(c_ServiceName,"SPAN c_spn_mrgn2 Is :%s:",c_spn_mrgn2); /** Ver 1.4 ***/
      fn_userlog(c_ServiceName,"SPAN c_nov2 Is :%s:",c_nov2);            /** Ver 1.4 ***/
      fn_userlog(c_ServiceName,"SPAN c_total_mrgn2 Is :%s:",c_total_mrgn2); /** Ver 1.4 ***/
		}

		if ( c_mtch_accnt1[0] == '1' || c_mtch_accnt1[0] == '2' || c_mtch_accnt1[0] == '3' )  /*** Ver 1.1 ***/
		{
			fn_errlog( c_ServiceName, "S31275",LIBMSG , c_err_msg.arr );												/*** VQC ***/		
			fn_userlog(c_ServiceName,"Service Return Error.");
			/* EXEC SQL CLOSE :sys_cursor; Commented in Ver 3.8 */
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );															/*** VQC ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );														/*** VQC ***/
			/*** tpfree((char *)ptr_fml_Obuf);  Ver 6.5 ***/
			tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		d_spn_mrgn1   = atof(c_spn_mrgn1);
		d_spn_mrgn2   = atof(c_spn_mrgn2);
		d_nov1        = atof(c_nov1);
		d_nov2        = atof(c_nov2);
		d_total_mrgn1 = atof(c_total_mrgn1);
		d_total_mrgn2 = atof(c_total_mrgn2);

    /*** Ver 6.7 Starts here ***/
     d_spn_bmrgn = fn_maxd(d_spn_bmrgn1,d_spn_bmrgn2) * 100;
     d_bnov      = fn_maxd(d_bnov1,d_bnov2) * 100;
     d_total_bmrgn = fn_maxd(d_total_bmrgn1,d_total_bmrgn2) * 100;
     if(DEBUG_MSG_LVL_3)
     {
       fn_userlog(c_ServiceName,"d_spn_bmrgn :%lf: d_bnov :%lf: d_total_bmrgn:%lf:",d_spn_bmrgn,d_bnov,d_total_bmrgn);
     }
    /*** Ver 6.7 Ends here ***/

		st_undfus_pos_to_be.d_uspan_nenov_mrgn  = fn_maxd(d_spn_mrgn1,d_spn_mrgn2) * 100;
		st_undfus_pos_to_be.d_net_optn_val      = fn_maxd(d_nov1,d_nov2) * 100;
		st_undfus_pos_to_be.d_uspan_wenov_mrgn  = fn_maxd(d_total_mrgn1,d_total_mrgn2) * 100 ;

    /*** Ver 6.7 Starts Here ***/
    st_undfus_pos_to_be.d_uspan_nenov_mrgn  = fn_maxd(st_undfus_pos_to_be.d_uspan_nenov_mrgn,d_spn_bmrgn);
    st_undfus_pos_to_be.d_net_optn_val = fn_maxd(st_undfus_pos_to_be.d_net_optn_val,d_bnov);
    st_undfus_pos_to_be.d_uspan_wenov_mrgn = fn_maxd(st_undfus_pos_to_be.d_uspan_wenov_mrgn,d_total_bmrgn);
    /*** Ver 6.7 Ends Here ***/


		d_spn_mrgn    = st_undfus_pos_to_be.d_uspan_nenov_mrgn    ;     /***  SPAN  MRGN  ***/
		d_nov         = st_undfus_pos_to_be.d_net_optn_val        ;     /***  NOV ***/
		d_total_mrgn  = st_undfus_pos_to_be.d_uspan_wenov_mrgn    ;     /***  SPAN +/- NOV  ***/

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN - SPAN MARGIN Is :%lf:",d_spn_mrgn);
		}

		i_returncode  = fn_cal_mrgn ( c_ServiceName,
																	d_total_mrgn,
																	d_mltplr,
																	d_expsr,
																	d_min_expsr,
																	&d_min_mrgn,
																	&d_intl_mrgn,
																	c_err_msg.arr																			/*** VQC ***/
																);


		if ( i_returncode !=  0 )
		{
			fn_errlog( c_ServiceName, "S31280",LIBMSG , c_err_msg.arr );									/*** VQC ***/
			fn_userlog(c_ServiceName,"Service Return Error.");
			/* EXEC SQL CLOSE :sys_cursor; Commented in Ver 3.8 */
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );												/*** VQC ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );											/*** VQC ***/
			/*** tpfree((char *)ptr_fml_Obuf); *** Ver 6.5 ***/
			tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if(DEBUG_MSG_LVL_2)
		{
			fn_userlog(c_ServiceName,"SPAN  - SPAN MARGIN IS :%lf:",d_spn_mrgn);
			fn_userlog(c_ServiceName,"SPAN  - NOV IS :%lf:",d_nov);
			fn_userlog(c_ServiceName,"SPAN  - Total Margin  IS :%lf:",d_total_mrgn);
			fn_userlog(c_ServiceName,"SPAN  - Exposure  IS :%lf:",d_expsr);
			fn_userlog(c_ServiceName,"SPAN  - Min. Margin IS :%lf:",d_min_mrgn);
			fn_userlog(c_ServiceName,"SPAN  - Initial Margin IS :%lf:",d_intl_mrgn);
		}
	
		/* Type Casted by Mahesh for 1 paisa issue */
		st_undfus_pos_to_be.d_multpr            = d_mltplr      ;
		st_undfus_pos_to_be.d_eba_expr_mrgn     = (long long)d_expsr;
		st_undfus_pos_to_be.d_span_wemult_mrgn  = (long long)d_total_mrgn * d_mltplr  ;
		st_undfus_pos_to_be.d_min_mrgn          = d_min_mrgn;
		st_undfus_pos_to_be.d_reqd_initial_mrgn = (long long)d_intl_mrgn;
		st_undfus_pos_to_be.d_ntnl_pl           = d_undrlyng_pl ;

		/*** Following Taken Below on 08-Dec-2011

		switch ( st_pstn_actn_var.l_actn_typ)
		{
			case  ORS_NEW_ORD_RJCT:
															strcpy( c_narration_id , ON_ORDER_REJECTION);
															c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
															break;
			case  ORS_NEW_ORD_ACPT:
                              strcpy( c_narration_id , ON_ORDER_ACCEPTANCE);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;
			case  ORS_MOD_ORD_RJCT:
															strcpy( c_narration_id , ON_MODIFICATION_REJECTION);
															c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
															break;
			case  ORS_MOD_ORD_ACPT:
															strcpy( c_narration_id , ON_MODIFICATION_ACCEPTANCE);
															c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
															break;   
			case  ORS_CAN_ORD_ACPT:
															strcpy( c_narration_id , ON_CANCELLATION_ACCEPTANCE);
															c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
															break;
			case  ORS_CAN_ORD_RJCT:
                              strcpy( c_narration_id , ON_CANCELLATION_REJECT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;

		}
	
		Commented On 08-Dec-2011 Ends ****/
			


		if(DEBUG_MSG_LVL_3)
		{	
			fn_userlog ( c_ServiceName, "---------------- Check ------------------"); 
			fn_userlog ( c_ServiceName, " st_undfus_pos_crrnt.d_reqd_initial_mrgn Is :%lf:", 
			st_undfus_pos_crrnt.d_reqd_initial_mrgn);

			fn_userlog ( c_ServiceName, " st_undfus_pos_to_be.d_initial_mrgn Is :%lf:", 
			st_undfus_pos_to_be.d_initial_mrgn);

			fn_userlog ( c_ServiceName, " st_undfus_pos_crrnt.d_initial_mrgn Is :%lf:", 
			st_undfus_pos_crrnt.d_initial_mrgn);
		}

		/****
		d_diff_mrgn = st_undfus_pos_crrnt.d_reqd_initial_mrgn  - st_undfus_pos_to_be.d_reqd_initial_mrgn ;
		***/

		/*** Following Commented On 05-Dec-2011

		d_diff_mrgn = st_undfus_pos_crrnt.d_initial_mrgn - st_undfus_pos_to_be.d_reqd_initial_mrgn ;

		if(DEBUG_MSG_LVL_2)
		{
			fn_userlog ( c_ServiceName, "Difference in MRGN :%lf:", d_diff_mrgn );
		}

		if ( d_diff_mrgn != 0 )
		{
			i_returncode = fn_upd_spnlimits(  c_ServiceName,
																				&st_pstn_actn_var,
																				ptr_st_err_msg,
																				c_narration_id,
																				c_dr_without_lmt_flg,
																				d_diff_mrgn,
																				&d_balance_amt);
			if ( i_returncode != 0 )
			{
				fn_errlog( c_ServiceName, "S31285",LIBMSG , c_err_msg );
				EXEC SQL CLOSE :sys_cursor;
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );		
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpfree((char *)ptr_fml_Obuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}  

			fn_userlog(c_ServiceName,"SPAN	-	d_balance_amt Is :%lf:",d_balance_amt);

			*** Added to take care of balance amount in case of ***
			*** DEBIT_TILL_LIMIT. d_balance_amt is added        ***
			*** since it is always negative or Zero             ***

			st_undfus_pos_to_be.d_initial_mrgn = st_undfus_pos_to_be.d_reqd_initial_mrgn  + d_balance_amt ;

			if ( d_balance_amt != 0 )
			{
				if( (-1)* d_balance_amt >= st_undfus_pos_crrnt.d_eba_expr_mrgn )
				{
					st_undfus_pos_to_be.d_uspan_wenov_mrgn	= st_undfus_pos_crrnt.d_uspan_wenov_mrgn	- 
					((-1)*d_balance_amt - st_undfus_pos_crrnt.d_eba_expr_mrgn );
					st_undfus_pos_crrnt.d_eba_expr_mrgn = 0;
				}
				else
				{
					st_undfus_pos_to_be.d_eba_expr_mrgn = st_undfus_pos_crrnt.d_eba_expr_mrgn + d_balance_amt;
				}
			}
		}
		
		Commented On 05-Dec-2011 Ends ***/
		
		/*** Following Changes Done On 05-Dec-2011 ***/

		 /** if(DEBUG_MSG_LVL_1) ** Commented in Ver 3.1 ***/
  	if(DEBUG_MSG_LVL_2) /** Debug level changed to 2 in Ver 3.1 **/
		{
			fn_userlog( c_ServiceName, "Releasing  Blocked Margin");
  		fn_userlog( c_ServiceName, "Intial Margin Is :%lf: ",st_undfus_pos_crrnt.d_initial_mrgn);
		}

		switch ( st_pstn_actn_var.l_actn_typ)
    {
      case  ORS_NEW_ORD_RJCT:
                              strcpy( c_narration_id , REL_TRDMRGN_ON_NEWORD_RJCT);
                              break;
      case  ORS_NEW_ORD_ACPT:
                              strcpy( c_narration_id , REL_TRDMRGN_ON_NEWORD_ACPT);
                              break;
      case  ORS_MOD_ORD_RJCT:
                              strcpy( c_narration_id , REL_TRDMRGN_ON_MODORD_RJCT);
                              break;
      case  ORS_MOD_ORD_ACPT:
                              strcpy( c_narration_id , REL_TRDMRGN_ON_MODORD_ACPT);
                              break;
      case  ORS_CAN_ORD_ACPT:
                              strcpy( c_narration_id , REL_TRDMRGN_ON_CANORD_ACPT);
                              break;
      case  ORS_CAN_ORD_RJCT:
                              strcpy( c_narration_id , REL_TRDMRGN_ON_CANORD_RJCT);
                              break;
			case  ORS_ORD_EXP     :								/*** Ver 1.3 ***/ 
                              strcpy( c_narration_id , REL_TRDMRGN_ON_IOC_2L_3L_CANORD_ACCPT);
                              break;

    }


  	if ( st_undfus_pos_crrnt.d_initial_mrgn != 0 )
  	{

		 d_balance_amt  = 0.0;   /*** Ver 1.1 ***/
     i_returncode = fn_upd_spnlimits( c_ServiceName,
                                    &st_pstn_actn_var,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    DEBIT_WITHOUT_LIMIT,
                                    st_undfus_pos_crrnt.d_initial_mrgn,
                                    &d_balance_amt);

      if ( i_returncode != 0 )
      {
				fn_errlog( c_ServiceName, "S31290",LIBMSG , c_err_msg.arr );											/*** VQC ***/
        /* EXEC SQL CLOSE :sys_cursor; Commented in Ver 3.8 */
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );														/*** VQC ***/
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );													/*** VQC ***/
				/*** tpfree((char *)ptr_fml_Obuf);  *** Ver 6.5 ***/
				tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

      }

  	 }	


		 switch ( st_pstn_actn_var.l_actn_typ)
     {
      case  ORS_NEW_ORD_RJCT:
                              strcpy( c_narration_id , REL_BLKDLOSS_ON_NEWORD_RJCT);
                              break;
      case  ORS_NEW_ORD_ACPT:
                              strcpy( c_narration_id , REL_BLKDLOSS_ON_NEWORD_ACPT);
                              break;
      case  ORS_MOD_ORD_RJCT:
                              strcpy( c_narration_id , REL_BLKDLOSS_ON_MODORD_RJCT);
                              break;
      case  ORS_MOD_ORD_ACPT:
                              strcpy( c_narration_id , REL_BLKDLOSS_ON_MODORD_ACPT);
                              break;
      case  ORS_CAN_ORD_ACPT:
                              strcpy( c_narration_id , REL_BLKDLOSS_ON_CANORD_ACPT);
                              break;
      case  ORS_CAN_ORD_RJCT:
                              strcpy( c_narration_id , REL_BLKDLOSS_ON_CANORD_RJCT);
                              break;
      case  ORS_ORD_EXP:      /*** Ver 1.3 ***/
                              strcpy( c_narration_id , REL_BLKDLOSS_ON_IOC_2L_3L_CANORD_ACCPT);
                              break;

     } 

	  /** if(DEBUG_MSG_LVL_1) ** Commented in Ver 3.1 ***/
  	if(DEBUG_MSG_LVL_2) /** Debug level changed to 2 in Ver 3.1 **/
		{	
			 fn_userlog( c_ServiceName, "Releasing  Notional P&L");
  	 	 fn_userlog( c_ServiceName, "P&L Is :%lf: ",st_undfus_pos_crrnt.d_blckd_pl);
		}

     if ( st_undfus_pos_crrnt.d_blckd_pl != 0 )
     {

			 d_balance_amt  = 0.0;   /*** Ver 1.1 ***/
				if(DEBUG_MSG_LVL_3)
				{
       		fn_userlog( c_ServiceName, "Before fn_upd_spnlimits :i_returncode Is :%d:",i_returncode);
				}
       i_returncode = fn_upd_spnlimits( c_ServiceName,
                                        &st_pstn_actn_var,
                                        ptr_st_err_msg,
                                        c_narration_id,
                                        DEBIT_WITHOUT_LIMIT,
                                        st_undfus_pos_crrnt.d_blckd_pl,
                                        &d_balance_amt);
			 if(DEBUG_MSG_LVL_3)
			 {
       		fn_userlog( c_ServiceName, "i_returncode Is :%d:",i_returncode);
			 }
       if ( i_returncode != 0 )
       {
				 fn_errlog( c_ServiceName, "S31295",LIBMSG , c_err_msg.arr );															/*** VQC ***/
         /* EXEC SQL CLOSE :sys_cursor; Commented in Ver 3.8 */
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																		/*** VQC ***/
         fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																	/*** VQC ***/	
				 /*** tpfree((char *)ptr_fml_Obuf); *** Ver 6.5 ***/
				 tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }


     } /** End of P&L **/

		switch ( st_pstn_actn_var.l_actn_typ)
    {
      case  ORS_NEW_ORD_RJCT:
                              strcpy( c_narration_id , BLK_SPAN_MRGN_ON_NEWORD_RJCT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;
      case  ORS_NEW_ORD_ACPT:
                              strcpy( c_narration_id , BLK_SPAN_MRGN_ON_NEWORD_ACPT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;
      case  ORS_MOD_ORD_RJCT:
                              strcpy( c_narration_id , BLK_SPAN_MRGN_ON_MODORD_RJCT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;
      case  ORS_MOD_ORD_ACPT:
                              strcpy( c_narration_id , BLK_SPAN_MRGN_ON_MODORD_ACPT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;
      case  ORS_CAN_ORD_ACPT:
                              strcpy( c_narration_id , BLK_SPAN_MRGN_ON_CANORD_ACPT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;
      case  ORS_CAN_ORD_RJCT:
                              strcpy( c_narration_id , BLK_SPAN_MRGN_ON_CANORD_RJCT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;
      case  ORS_ORD_EXP:			/*** Ver 1.3 ***/
                              strcpy( c_narration_id , BLK_SPAN_MRGN_ON_IOC_2L_3L_CANORD_ACCPT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;

    } 

		d_upd_amount = (-1) * st_undfus_pos_to_be.d_span_wemult_mrgn ;

		if(DEBUG_MSG_LVL_3)
		{	
    	fn_userlog(c_ServiceName," OLD SPAN MARGIN WITH MULTIPLIER Is :%lf:",
															 st_undfus_pos_crrnt.d_span_wemult_mrgn);
    	fn_userlog(c_ServiceName," NEW SPAN MARGIN WITH MULTIPLIER Is :%lf:",
															 st_undfus_pos_to_be.d_span_wemult_mrgn);
    	fn_userlog(c_ServiceName," d_upd_amount In SPAN MARGIN WITH MULTIPLIER Is :%lf:",d_upd_amount);
		}

    if ( d_upd_amount != 0 )
    {
			d_balance_amt  = 0.0;   /*** Ver 1.1 ***/
      i_returncode = fn_upd_spnlimits( c_ServiceName,
                                    &st_pstn_actn_var,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    c_dr_without_lmt_flg,
                                    d_upd_amount,
                                    &d_balance_amt);
      if ( i_returncode != 0 )
      {
				fn_errlog( c_ServiceName, "S31300",LIBMSG , c_err_msg.arr );															/*** VQC ***/
        /*EXEC SQL CLOSE :sys_cursor; Commented in Ver 3.8 */
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																		/*** VQC ***/
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																	/*** VQC ***/
				/*** tpfree((char *)ptr_fml_Obuf);  *** Ver 6.5 ***/
				tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
			st_undfus_pos_to_be.d_span_wemult_mrgn = st_undfus_pos_to_be.d_span_wemult_mrgn + d_balance_amt ;   /*** Ver 1.6 ***/
    }

    /*** st_undfus_pos_to_be.d_span_wemult_mrgn = st_undfus_pos_to_be.d_span_wemult_mrgn + d_balance_amt ;   Commented in Ver 1.6 ***/
		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"d_balance_amt in d_span_wemult_mrgn:%lf:",d_balance_amt);
    	fn_userlog(c_ServiceName,"Here st_undfus_pos_to_be.d_span_wemult_mrgn :%lf:",
															st_undfus_pos_to_be.d_span_wemult_mrgn);
		}

		d_upd_amount = (-1) * st_undfus_pos_to_be.d_eba_expr_mrgn ;

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName," d_upd_amount In EXPOSURE Is :%lf:",d_upd_amount);
		}

		switch ( st_pstn_actn_var.l_actn_typ)
    {
      case  ORS_NEW_ORD_RJCT:
                              strcpy( c_narration_id , BLK_EXPR_MRGN_ON_NEWORD_RJCT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;
      case  ORS_NEW_ORD_ACPT:
                              strcpy( c_narration_id , BLK_EXPR_MRGN_ON_NEWORD_ACPT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;
      case  ORS_MOD_ORD_RJCT:
                              strcpy( c_narration_id , BLK_EXPR_MRGN_ON_MODORD_RJCT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;
      case  ORS_MOD_ORD_ACPT:
                              strcpy( c_narration_id , BLK_EXPR_MRGN_ON_MODORD_ACPT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;
      case  ORS_CAN_ORD_ACPT:
                              strcpy( c_narration_id , BLK_EXPR_MRGN_ON_CANORD_ACPT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;
      case  ORS_CAN_ORD_RJCT:
                              strcpy( c_narration_id , BLK_EXPR_MRGN_ON_CANORD_RJCT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;
      case  ORS_ORD_EXP :			/*** Ver 1.3 ***/
                              strcpy( c_narration_id , BLK_EXPR_MRGN_ON_IOC_2L_3L_CANORD_ACPT );
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;

    }			

    if ( d_upd_amount != 0 )
    {
			d_balance_amt  = 0.0;   /*** Ver 1.1 ***/
      i_returncode = fn_upd_spnlimits( c_ServiceName,
                                       &st_pstn_actn_var,
                                       ptr_st_err_msg,
                                       c_narration_id,
                                       c_dr_without_lmt_flg,
                                       d_upd_amount,
                                       &d_balance_amt);
      if ( i_returncode != 0 )
      {
				fn_errlog( c_ServiceName, "S31305",LIBMSG , c_err_msg.arr );												/*** VQC ***/
        /**  EXEC SQL CLOSE :sys_cursor;  Commented in Ver 3.8 **/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );															/*** VQC ***/
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );														/*** VQC ***/
				/*** tpfree((char *)ptr_fml_Obuf); *** Ver 6.5 ***/
				tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
			st_undfus_pos_to_be.d_eba_expr_mrgn = st_undfus_pos_to_be.d_eba_expr_mrgn + d_balance_amt;		/*** Ver 1.6 ***/
    }

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"d_balance_amt in d_expsr :%lf:",d_balance_amt);
		}

    /*** st_undfus_pos_to_be.d_eba_expr_mrgn = st_undfus_pos_to_be.d_eba_expr_mrgn + d_balance_amt;		Commented in Ver 1.6 ***/

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName," Calculating Final INITIAL MARGIN ")  ;

   	 	fn_userlog(c_ServiceName,"Here st_undfus_pos_to_be.d_span_wemult_mrgn Is :%lf:",
                              st_undfus_pos_to_be.d_span_wemult_mrgn);
    	fn_userlog(c_ServiceName,"Here st_undfus_pos_to_be.d_eba_expr_mrgn  Is  :%lf:",
                              st_undfus_pos_to_be.d_eba_expr_mrgn);
		}


    st_undfus_pos_to_be.d_initial_mrgn = st_undfus_pos_to_be.d_span_wemult_mrgn +
                                         st_undfus_pos_to_be.d_eba_expr_mrgn ;
		if(DEBUG_MSG_LVL_2)
		{
    	fn_userlog(c_ServiceName,"Here FINAL INTIAL MARGIN TO BE BLOCKED Is :%lf:",
                              st_undfus_pos_to_be.d_initial_mrgn);
		}

		switch ( st_pstn_actn_var.l_actn_typ)
    {
      case  ORS_NEW_ORD_RJCT:
                              strcpy( c_narration_id , BLK_NOTIONAL_LOSS_ON_NEWORD_RJCT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;
      case  ORS_NEW_ORD_ACPT:
                              strcpy( c_narration_id , BLK_NOTIONAL_LOSS_ON_NEWORD_ACPT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;
      case  ORS_MOD_ORD_RJCT:
                              strcpy( c_narration_id , BLK_NOTIONAL_LOSS_ON_MODORD_RJCT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;
      case  ORS_MOD_ORD_ACPT:
                              strcpy( c_narration_id , BLK_NOTIONAL_LOSS_ON_MODORD_ACPT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;
      case  ORS_CAN_ORD_ACPT:
                              strcpy( c_narration_id , BLK_NOTIONAL_LOSS_ON_CANORD_ACPT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;
      case  ORS_CAN_ORD_RJCT:
                              strcpy( c_narration_id , BLK_NOTIONAL_LOSS_ON_CANORD_RJCT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;
      case  ORS_ORD_EXP     :	/*** Ver 1.3 ***/
                              strcpy( c_narration_id , BLK_NOTIONAL_LOSS_ON_IOC_2L_3L_CANORD_ACPT);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;

    }

		if ( d_undrlyng_pl < 0 )
    {
				d_balance_amt  = 0.0;   /*** Ver 1.1 ***/
        i_returncode = fn_upd_spnlimits( c_ServiceName,
                                       &st_pstn_actn_var,
                                       ptr_st_err_msg,
                                       c_narration_id,
                                       c_dr_without_lmt_flg,
                                       d_undrlyng_pl,
                                       &d_balance_amt);
				if(DEBUG_MSG_LVL_3)
				{
        	fn_userlog( c_ServiceName, "i_returncode Is :%d:",i_returncode);
				}

        if ( i_returncode != 0 )
        {
					fn_errlog( c_ServiceName, "S31310",LIBMSG , c_err_msg.arr );											/** VQC **/
       		/* EXEC SQL CLOSE :sys_cursor; Commented in Ver 3.8 */
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );														/** VQC **/
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );													/** VQC **/
					/*** tpfree((char *)ptr_fml_Obuf);  *** Ver 6.5 ***/
					tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

       st_undfus_pos_to_be.d_blckd_pl  = ( d_undrlyng_pl * (-1)) + d_balance_amt  ;
			 if(DEBUG_MSG_LVL_2)
				{
      	 	fn_userlog(c_ServiceName,"SPAN  - d_balance_amt Is :%lf:",d_balance_amt);

   		    fn_userlog(c_ServiceName,"SPAN  - st_undfus_pos_to_be.d_blckd_pl Is :%lf:",
      	                                   st_undfus_pos_to_be.d_blckd_pl);
				}

    }
    else
    {
			  if(DEBUG_MSG_LVL_3)
				{
       		fn_userlog(c_ServiceName,"SPAN - In PROFIT COndition" );
				}
       st_undfus_pos_to_be.d_blckd_pl  = 0 ;
		
		   if(DEBUG_MSG_LVL_2)
			 {
       		fn_userlog(c_ServiceName,"SPAN  - st_undfus_pos_to_be.d_blckd_pl Is :%lf:",
                                         st_undfus_pos_to_be.d_blckd_pl);
			 }
    }
		
	
		
		/*** Changes On 05-Dec-2011 Completed ***/	

		/*** Following Commented On 05-Dec-2011
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName," Updating Limits for P&L ");
		}

		EXEC SQL
			SELECT  NVL(FUS_BLCKD_PL,0)
			INTO    :d_oblckd_amnt
			FROM    FUS_FO_UNDRLYNG_SPN_PSTN
			WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
			AND     FUS_UNDRLYNG        = :sql_undrlyng
			AND     FUS_XCHNG_CD        = :sql_xchng_cd;  

		if ( SQLCODE != 0 && SQLCODE  !=  NO_DATA_FOUND)
		{
			fn_errlog( c_ServiceName, "S31315",SQLMSG , c_err_msg );
			EXEC SQL CLOSE :sys_cursor;
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );		
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	
		st_undfus_pos_to_be.d_blckd_pl = d_oblckd_amnt;

		if ( d_undrlyng_pl >= 0 )
		{
			d_diff_pl = d_oblckd_amnt ;
		}
		else
		{
			d_diff_pl = d_oblckd_amnt + d_undrlyng_pl ;
		}


		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog ( c_ServiceName, "Difference in P&L :%lf:", d_diff_pl );
		}			


		if(DEBUG_MSG_LVL_2)
		{
			fn_userlog ( c_ServiceName, "d_undrlyng_pl Is:%lf:", d_undrlyng_pl);
			fn_userlog ( c_ServiceName, "d_oblckd_amnt Is :%lf:", d_oblckd_amnt);
			fn_userlog ( c_ServiceName, "Difference in P&L :%lf:", d_diff_pl );
		}

		if ( d_diff_pl != 0 )
		{
			i_returncode = fn_upd_spnlimits(  c_ServiceName,
																				&st_pstn_actn_var,
																				ptr_st_err_msg,
																				c_narration_id,
																				c_dr_without_lmt_flg,
																				d_diff_pl,
																				&d_balance_amt);
			if ( i_returncode != 0 )
			{
				switch ( i_returncode )
				{
					case  INSUFFICIENT_LIMITS :

								fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg );	
								EXEC SQL CLOSE :sys_cursor;
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
								tpfree((char *)ptr_fml_Obuf);
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

					default:

								fn_errlog( c_ServiceName, "S31320",LIBMSG , c_err_msg );
								EXEC SQL CLOSE :sys_cursor;
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								tpfree((char *)ptr_fml_Obuf);
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}
			if(DEBUG_MSG_LVL_2)	
			{
				fn_userlog(c_ServiceName,"SPAN  - d_diff_pl :%lf:",d_diff_pl);
				fn_userlog(c_ServiceName,"SPAN  - d_balance_amt Is :%lf:",d_balance_amt);
			}

			if ( d_diff_pl > 0 )
			{
				st_undfus_pos_to_be.d_blckd_pl  = d_oblckd_amnt - d_diff_pl ;
			}
			else
			{
				st_undfus_pos_to_be.d_blckd_pl = d_undrlyng_pl - d_balance_amt ;  
													 ***  New blocked loss is added into Old blocked loss at undrlying level ***
			}

			if( st_undfus_pos_to_be.d_blckd_pl > 0)
			{
			  st_undfus_pos_to_be.d_blckd_pl  = st_undfus_pos_to_be.d_blckd_pl  * (-1)  ;
			}

			if(DEBUG_MSG_LVL_2)
			{
				fn_userlog(c_ServiceName,"SPAN  - d_blckd_pnl Is :%lf:",d_blckd_pnl);
			}

		}

		
		if ( d_diff_pl == 0 )
		{
			st_undfus_pos_to_be.d_blckd_pl  = st_undfus_pos_to_be.d_blckd_pl  * (-1)  ;
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName," Updating FUS In Rejection and cancellation Case ");
			fn_userlog(c_ServiceName," st_undfus_pos_to_be.d_eba_expr_mrgn is :%lf:",
																	st_undfus_pos_to_be.d_eba_expr_mrgn);
			fn_userlog(c_ServiceName," d_balance_amt Is :%lf:",d_balance_amt);
		}

		COmmented On 05-Dec-2011 Ends ****/

		EXEC SQL
			UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
			SET     FUS_INITIAL_MRGN        = :st_undfus_pos_to_be.d_initial_mrgn,
							FUS_SPAN_WEMULT_MRGN    = :st_undfus_pos_to_be.d_span_wemult_mrgn,
							FUS_MIN_MRGN            = :st_undfus_pos_to_be.d_min_mrgn,
							FUS_EBA_EXPR_MRGN       = :st_undfus_pos_to_be.d_eba_expr_mrgn,
							FUS_MULTIPLIER          = :st_undfus_pos_to_be.d_multpr,
							FUS_REQD_INITIAL_MRGN   = :st_undfus_pos_to_be.d_reqd_initial_mrgn,
							FUS_USPAN_WENOV_MRGN    = :st_undfus_pos_to_be.d_uspan_wenov_mrgn,
							FUS_USPAN_NENOV_MRGN    = :st_undfus_pos_to_be.d_uspan_nenov_mrgn,
							FUS_BLCKD_PL            = :st_undfus_pos_to_be.d_blckd_pl ,
							FUS_NTNL_PL             = :st_undfus_pos_to_be.d_ntnl_pl,
							FUS_NET_OPTN_VAL        = :st_undfus_pos_to_be.d_net_optn_val,
							FUS_MTM_FLG             = :c_mtm_flag
			WHERE  FUS_CLM_MTCH_ACCNT  = :st_pstn_actn_var.c_cln_mtch_accnt
			AND    FUS_XCHNG_CD        = :st_pstn_actn_var.c_xchng_cd
			AND    FUS_UNDRLYNG        = :st_pstn_actn_var.c_undrlyng ;

		if ( SQLCODE != 0 )
		{
			fn_errlog(c_ServiceName, "S31325", SQLMSG, c_err_msg.arr );												/** VQC **/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );														/** VQC **/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );													/** VQC **/
			/*** tpfree((char *)ptr_fml_Obuf); *** Ver 6.5 ***/
			tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		/*** tpfree((char *)ptr_fml_Obuf);   *** Commented in Ver 6.5 ***/

	} /*** End of Margin Updation for Rejection Cases ***/ 


  if ( st_cntpos_md_rc.l_opnpstn_qty > 0 )
  {
    st_cntpos_md_rc.c_opnpstn_flw = BUY;
  }
  else if ( st_cntpos_md_rc.l_opnpstn_qty < 0 )
  {
    st_cntpos_md_rc.c_opnpstn_flw = SELL;
  }
  else
  {
    st_cntpos_md_rc.c_opnpstn_flw = NEUTRAL;
  }

	 
	if(DEBUG_MSG_LVL_3)
  {
  	fn_userlog ( c_ServiceName, "Before Updating At Contrat Level ::" );
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_ibuy_qty : %ld :",st_cntpos_md_rc.l_ibuy_qty);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.d_ibuy_ord_val: %lf :",st_cntpos_md_rc.d_ibuy_ord_val);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_isell_qty: %ld :",st_cntpos_md_rc.l_isell_qty);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.d_isell_ord_val: %lf :",st_cntpos_md_rc.d_isell_ord_val);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_exbuy_qty: %ld :",st_cntpos_md_rc.l_exbuy_qty);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.d_exbuy_ord_val: %lf :",st_cntpos_md_rc.d_exbuy_ord_val);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_exsell_qty: %ld :",st_cntpos_md_rc.l_exsell_qty);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.d_exsell_ord_val: %lf :",st_cntpos_md_rc.d_exsell_ord_val);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_buy_exctd_qty: %ld :",st_cntpos_md_rc.l_buy_exctd_qty);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_sell_exctd_qty: %ld :",st_cntpos_md_rc.l_sell_exctd_qty);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.c_opnpstn_flw: %c :",st_cntpos_md_rc.c_opnpstn_flw);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_opnpstn_qty: %ld :",st_cntpos_md_rc.l_opnpstn_qty);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.d_opnpstn_val: %lf :",st_cntpos_md_rc.d_opnpstn_val);
    fn_userlog ( c_ServiceName, "st_cntpos_md_rc.d_mtm_opn_val: %lf :",st_cntpos_md_rc.d_mtm_opn_val);
    fn_userlog ( c_ServiceName, "st_pstn_actn_var.c_cln_mtch_accnt: %s :",st_pstn_actn_var.c_cln_mtch_accnt);
    fn_userlog ( c_ServiceName, "st_pstn_actn_var.c_xchng_cd: %s :",st_pstn_actn_var.c_xchng_cd);
    fn_userlog ( c_ServiceName, "st_pstn_actn_var.c_prd_typ: %c :",st_pstn_actn_var.c_prd_typ);
    fn_userlog ( c_ServiceName, "st_pstn_actn_var.c_undrlyng: %s :",st_pstn_actn_var.c_undrlyng);
    fn_userlog ( c_ServiceName, "st_pstn_actn_var.c_opt_typ: %c :",st_pstn_actn_var.c_opt_typ);
    fn_userlog ( c_ServiceName, "st_pstn_actn_var.l_strike_prc: %ld :",st_pstn_actn_var.l_strike_prc);
    fn_userlog ( c_ServiceName, "st_pstn_actn_var.c_expry_dt: %s :",st_pstn_actn_var.c_expry_dt);
    fn_userlog ( c_ServiceName, "st_pstn_actn_var.c_exrc_typ: %c :",st_pstn_actn_var.c_exrc_typ);
  }


  /*** Now updating the contract table with the resulted contract  ***/
  EXEC SQL
  UPDATE  FCP_FO_SPN_CNTRCT_PSTN
  SET     FCP_IBUY_QTY       = :st_cntpos_md_rc.l_ibuy_qty,
          FCP_IBUY_ORD_VAL   = :st_cntpos_md_rc.d_ibuy_ord_val,
          FCP_ISELL_QTY      = :st_cntpos_md_rc.l_isell_qty,
          FCP_ISELL_ORD_VAL  = :st_cntpos_md_rc.d_isell_ord_val,
          FCP_EXBUY_QTY      = :st_cntpos_md_rc.l_exbuy_qty,
          FCP_EXBUY_ORD_VAL  = :st_cntpos_md_rc.d_exbuy_ord_val,
          FCP_EXSELL_QTY     = :st_cntpos_md_rc.l_exsell_qty,
          FCP_EXSELL_ORD_VAL = :st_cntpos_md_rc.d_exsell_ord_val,
          FCP_BUY_EXCTD_QTY  = :st_cntpos_md_rc.l_buy_exctd_qty,
          FCP_SELL_EXCTD_QTY = :st_cntpos_md_rc.l_sell_exctd_qty,
          FCP_OPNPSTN_FLW    = :st_cntpos_md_rc.c_opnpstn_flw,
          FCP_OPNPSTN_QTY    = :st_cntpos_md_rc.l_opnpstn_qty,
          FCP_OPNPSTN_VAL    = :st_cntpos_md_rc.d_opnpstn_val,
          FCP_MTM_OPN_VAL    = :st_cntpos_md_rc.d_mtm_opn_val
   WHERE   FCP_CLM_MTCH_ACCNT = :st_pstn_actn_var.c_cln_mtch_accnt
   AND     FCP_XCHNG_CD       = :st_pstn_actn_var.c_xchng_cd
   AND     FCP_PRDCT_TYP      = :st_pstn_actn_var.c_prd_typ
   AND     FCP_UNDRLYNG       = :st_pstn_actn_var.c_undrlyng
   AND     FCP_OPT_TYP        = :st_pstn_actn_var.c_opt_typ
   AND     FCP_STRK_PRC       = :st_pstn_actn_var.l_strike_prc
   AND     FCP_EXPRY_DT       = to_date(:st_pstn_actn_var.c_expry_dt,
                                    'DD-Mon-YYYY')
   AND     FCP_EXER_TYP       = :st_pstn_actn_var.c_exrc_typ
	 RETURNING NVL (FCP_MTM_FLG,'O') INTO :c_dlvrmtm_flg;   /*** Ver 5.3 ****/
	
     
   if ( SQLCODE != 0 )
   {
      fn_errlog(c_ServiceName, "S31330", SQLMSG, c_err_msg.arr );														/** VQC **/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																/** VQC **/
  	  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );															/** VQC **/
		/**	tpfree((char *)ptr_fml_Obuf);  Commented in Ver 3.2 *****/
			tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	 
   }


   /************** ver 5.8 starts ****************/
  c_extra_update = 'N';
  i_returncode  = fn_cal_trg_prc( c_ServiceName , &st_pstn_actn_var ,c_extra_update,
                                      ptr_st_err_msg  );

  if( i_returncode != 0 )
  {
      fn_errlog(c_ServiceName, "S31335", SQLMSG, c_err_msg.arr );
      fn_userlog ( c_ServiceName, "ERROR IN fn_cal_trg_prc");
  }
  /*** ver 5.8 ends ***********/

  /*** ver 6.6 Starts Here ***/
  i_returncode=fn_cal_premutilzed( c_ServiceName, &st_pstn_actn_var);
  if ( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31340",LIBMSG , c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );     
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );  
    tpfree((char *)ptr_fml_Sbuf); 
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
  }
  /*** Ver 6.6 Ends here ***/

	 /**** Ver 5.3 Started ****/
		if (DEBUG_MSG_LVL_3)
		{
    	fn_userlog ( c_ServiceName, "Kiran fetching MTM flag is :%c:",c_dlvrmtm_flg);
    	fn_userlog (c_ServiceName, "user id is :%s:",st_pstn_actn_var.c_user_id);
    	fn_userlog (c_ServiceName, "session id is :%ld:",st_pstn_actn_var.l_session_id);
		}

    if ( (  c_dlvrmtm_flg== UNDER_PHYDLVRY_MTM ) && ( strcmp ( st_pstn_actn_var.c_user_id,"system" ) != 0 )&&(st_pstn_actn_var.l_session_id!= 0 ))
    {
      fn_errlog(c_ServiceName, "B28009", DEFMSG, c_err_msg.arr );														/** VQC **/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																/** VQC **/
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );															/** VQC **/
      tpfree((char *)ptr_fml_Sbuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    /***** Ver 5.3 Ended *******/
 
   if(DEBUG_MSG_LVL_3)
   {
    fn_userlog ( c_ServiceName, "After Updating At Contrat Level" );
   }

   if(DEBUG_MSG_LVL_3)
   {
    fn_userlog ( c_ServiceName, "Calcualted underlying level position" );
    fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_undfus_pos_to_be.l_uibuy_qty);
    fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_undfus_pos_to_be.d_uibuy_val);
    fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_undfus_pos_to_be.l_uisell_qty);
    fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_undfus_pos_to_be.d_uisell_val);
    fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_undfus_pos_to_be.l_uexbuy_qty);
    fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_undfus_pos_to_be.d_uexbuy_val);
    fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_undfus_pos_to_be.l_uexsell_qty);
    fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", st_undfus_pos_to_be.d_uexsell_val);
    fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_undfus_pos_to_be.l_ubuy_exctd_qty);
    fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_undfus_pos_to_be.l_usell_exctd_qty);
    fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_undfus_pos_to_be.l_uopnpstn_qty);
    fn_userlog ( c_ServiceName, "Original open val :%lf:", st_undfus_pos_to_be.d_uopnpstn_val);
    fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_undfus_pos_to_be.d_umtm_opn_val);
    fn_userlog ( c_ServiceName, "Add Margin val    :%lf:", st_undfus_pos_to_be.d_add_mrgn_val);
   }

   if ( st_undfus_pos_to_be.l_uopnpstn_qty > 0 )
   {
    st_undfus_pos_to_be.c_uopnpstn_flw = BUY;
   }
   else if ( st_undfus_pos_to_be.l_uopnpstn_qty < 0 )
   {
    st_undfus_pos_to_be.c_uopnpstn_flw = SELL;
   }
   else
   {
    st_undfus_pos_to_be.c_uopnpstn_flw = NEUTRAL;
   }

   if(DEBUG_MSG_LVL_3)
   {
    fn_userlog ( c_ServiceName, "Before  Updating At Undrlying Level Level" );
    fn_userlog ( c_ServiceName, "Open Position Flow set to :%c: ",st_undfus_pos_to_be.c_uopnpstn_flw );
   }	


   EXEC SQL
     UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
     SET			FUS_UIBUY_QTY       = :st_undfus_pos_to_be.l_uibuy_qty,
							FUS_UIBUY_VAL       = :st_undfus_pos_to_be.d_uibuy_val,
							FUS_UISELL_QTY      = :st_undfus_pos_to_be.l_uisell_qty,
							FUS_UISELL_VAL      = :st_undfus_pos_to_be.d_uisell_val,
							FUS_UEXBUY_QTY      = :st_undfus_pos_to_be.l_uexbuy_qty,
							FUS_UEXBUY_VAL      = :st_undfus_pos_to_be.d_uexbuy_val,
							FUS_UEXSELL_QTY     = :st_undfus_pos_to_be.l_uexsell_qty,
							FUS_UEXSELL_VAL     = :st_undfus_pos_to_be.d_uexsell_val,
							FUS_UBUY_EXCTD_QTY  = :st_undfus_pos_to_be.l_ubuy_exctd_qty,
							FUS_USELL_EXCTD_QTY = :st_undfus_pos_to_be.l_usell_exctd_qty,
							FUS_UOPNPSTN_FLW    = :st_undfus_pos_to_be.c_uopnpstn_flw,
							FUS_UOPNPSTN_QTY    = :st_undfus_pos_to_be.l_uopnpstn_qty,
							FUS_UOPNPSTN_VAL    = :st_undfus_pos_to_be.d_uopnpstn_val,
							FUS_UMTM_OPN_VAL    = :st_undfus_pos_to_be.d_umtm_opn_val,
              FUS_MTM_FLG         = :c_mtm_flag
      WHERE 	FUS_CLM_MTCH_ACCNT  = :st_pstn_actn_var.c_cln_mtch_accnt
    	AND   	FUS_XCHNG_CD        = :st_pstn_actn_var.c_xchng_cd
    	AND   	FUS_UNDRLYNG        = :st_pstn_actn_var.c_undrlyng ;
    

   if ( SQLCODE != 0 )
   {
     	fn_errlog(c_ServiceName, "S31345", SQLMSG, c_err_msg.arr );															/** VQC **/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																	/** VQC **/
   	  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																/** VQC **/
	/**	tpfree((char *)ptr_fml_Obuf);  *** Commented in Ver 3.2 ****/
    	tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

	 st_pstn_actn_var.c_mtm_flag = 'O'; /* default */
	 if(DEBUG_MSG_LVL_3)
	 {
	 		fn_userlog(c_ServiceName,"MTM FLG:%c:",c_mtm_flag);
	 }

	 /*** Ver 1.2 starts ***/
	 strcpy (c_channel,"WEB");

	 EXEC SQL
	 SELECT 'SYS'
	 INTO   :c_channel
	 FROM		FXB_FO_XCHNG_BOOK
	 WHERE  FXB_ORDR_RFRNC = :st_ip_xchngbk.c_ordr_rfrnc
	 AND    FXB_MDFCTN_CNTR = :st_ip_xchngbk.l_mdfctn_cntr
	 AND	  FXB_XCHNG_RMRKS LIKE '%System placed Cancellation%';    
	
	 if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
   {
     	fn_errlog(c_ServiceName, "S31350", SQLMSG, c_err_msg.arr );																	/** VQC **/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																			/** VQC **/
   	  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																		/** VQC **/
	/**	tpfree((char *)ptr_fml_Obuf);  Commented in Ver 3.2 *****/
    	tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
	 /*** Ver 1.2 Ends ***/

   if ( ( c_mtm_flag == UNDER_MTM ) &&
       ( st_undfus_pos_to_be.l_uibuy_qty == 0 )   &&
       ( st_undfus_pos_to_be.l_uexbuy_qty == 0 )  &&
       ( st_undfus_pos_to_be.l_uisell_qty == 0 )  &&
       ( st_undfus_pos_to_be.l_uexsell_qty == 0 ) &&
			 ( strcmp(c_channel,"SYS") == 0 )										/*** Ver 1.2 ***/
		  )
   {
    st_pstn_actn_var.c_mtm_flag = NO_OPEN_ORDERS;
   }

	 /*** Ver 5.3 started ***/
   else if ( ( c_dlvrmtm_flg == UNDER_PHYDLVRY_MTM ) &&
             ( st_cntpos_md_rc.l_ibuy_qty == 0 ) &&
             ( st_cntpos_md_rc.l_exbuy_qty == 0 ) &&
             ( st_cntpos_md_rc.l_isell_qty == 0 ) &&
             ( st_cntpos_md_rc.l_exsell_qty == 0 ) &&
             ( strcmp(c_channel,"SYS") == 0 )
            )
   {
     c_fcpmtm_flg= NO_PHYDLVRY_OPEN_ORDERS;
   }
   /*** Ver 5.3 ends ***/

   else if ( c_mtm_flag == UNDER_MTM )
   {
    st_pstn_actn_var.c_mtm_flag = FOR_REMARKS_ENTRY;
   }

   if(DEBUG_MSG_LVL_3)
   {
    fn_userlog ( c_ServiceName, "After  Updating At Undrlying Level Level" );

   }

 /*** below addd in ver 6.8 **/
   if(DEBUG_MSG_LVL_3)
   {
    fn_userlog ( c_ServiceName, "c_dlvrmtm_flg REJ :%c:",c_dlvrmtm_flg);
   }
    if( (st_ip_xchngbk.l_ors_msg_typ == ORS_NEW_ORD_RJCT) && ( c_dlvrmtm_flg == UNDER_PHYDLVRY_MTM ))
    {
      if(DEBUG_MSG_LVL_3)
      {
       fn_userlog ( c_ServiceName, "REJ SUCHITA After  :%ld:",st_ip_xchngbk.l_ors_msg_typ);
      }
      i_returncode  = fn_unmark_lodm_rej( c_ServiceName , &st_pstn_actn_var ,c_err_msg.arr);
      if( i_returncode != 0 )
      {
       fn_errlog(c_ServiceName, "S31355", LIBMSG, c_err_msg.arr );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
       fn_userlog ( c_ServiceName, "ERROR IN fn_unmark_lodm_rej");
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
       tpfree((char *)ptr_fml_Sbuf);
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
  /** ver 6.8 ends ***/

	 if(DEBUG_MSG_LVL_2)
	 {
   		fn_userlog ( c_ServiceName, "st_pstn_actn_var.c_mtm_flag is :%c:",st_pstn_actn_var.c_mtm_flag );
			fn_userlog ( c_ServiceName, "c_fcpmtm_flg :%c:", c_fcpmtm_flg );
			/* fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_ibuy_qty :%c: st_cntpos_md_rc.l_exbuy_qty :%c: st_cntpos_md_rc.l_isell_qty :%c: st_cntpos_md_rc.l_exsell_qty :%c: ",st_cntpos_md_rc.l_ibuy_qty, st_cntpos_md_rc.l_exbuy_qty, st_cntpos_md_rc.l_isell_qty, st_cntpos_md_rc.l_exsell_qty );  *** Ver 5.7 ***/
			fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_ibuy_qty :%ld: st_cntpos_md_rc.l_exbuy_qty :%ld: st_cntpos_md_rc.l_isell_qty :%ld: st_cntpos_md_rc.l_exsell_qty :%ld: ",st_cntpos_md_rc.l_ibuy_qty, st_cntpos_md_rc.l_exbuy_qty, st_cntpos_md_rc.l_isell_qty, st_cntpos_md_rc.l_exsell_qty ); 			/*** Ver 5.7 ***/
	 }

   if ( st_pstn_actn_var.c_mtm_flag == FOR_REMARKS_ENTRY )
	 {
		switch (st_ip_xchngbk.l_ors_msg_typ )
		{
			case	ORS_NEW_ORD_ACPT:
					sprintf(c_imtm_remarks.arr,"RECEIVED SQUAREOFF CONFIRMATION FOR [%s]",              /** VQC **/
																						st_ip_xchngbk.c_ordr_rfrnc );
  				i_returncode = fn_ins_spn_rep_tbl( c_ServiceName,
                             							c_err_msg.arr,																			/** VQC **/
                             							&st_pstn_actn_var,
                             							c_imtm_remarks.arr );                               /** VQC **/
					if ( i_returncode != 0 )
					{
						fn_errlog ( c_ServiceName, "S31360", LIBMSG, c_err_msg.arr);											/** VQC **/
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );														/** VQC **/		
  				  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );													/** VQC **/
			/***	tpfree((char *)ptr_fml_Obuf);  Commented in Ver 3.2 ****/
  				  tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
					break;

			case	ORS_NEW_ORD_RJCT:
					sprintf(c_imtm_remarks.arr,"RECEIVED SQUAREOFF REJECTION FOR [%s]",                 /** VQC **/
																						st_ip_xchngbk.c_ordr_rfrnc );
  				i_returncode = fn_ins_spn_rep_tbl( c_ServiceName,
                             							c_err_msg.arr,																			/** VQC **/
                             							&st_pstn_actn_var,
                             							c_imtm_remarks.arr );                               /** VQC **/
					if ( i_returncode != 0 )
					{
						fn_errlog ( c_ServiceName, "S31365", LIBMSG, c_err_msg.arr );											/** VQC **/
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );														/** VQC **/
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );													/** VQC **/
	/***			tpfree((char *)ptr_fml_Obuf);  Commented in Ver 3.2 ****/
 				    tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
					break;

			case	ORS_CAN_ORD_ACPT:
					sprintf(c_imtm_remarks.arr,"RECEIVED CANCELLATION ACCEPTANCE FOR [%s]",              /** VQC **/
																						st_ip_xchngbk.c_ordr_rfrnc );
  				i_returncode = fn_ins_spn_rep_tbl( c_ServiceName,
                             							c_err_msg.arr,																				/** VQC **/
                             							&st_pstn_actn_var,
                             							c_imtm_remarks.arr );                                 /** VQC **/
					if ( i_returncode != 0 )
					{
						fn_errlog ( c_ServiceName, "S31370", LIBMSG, c_err_msg.arr );												/** VQC **/
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );															/** VQC **/
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );														/** VQC **/
    /****		tpfree((char *)ptr_fml_Obuf);  Commented in Ver 3.2 ****/
            tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
					break;

			case	ORS_SPD_ORD_CNCL:
			case	ORS_2L_ORD_CNCL:
			case	ORS_3L_ORD_CNCL:
			case	ORS_IOC_CAN_ACPT:
				sprintf(c_imtm_remarks.arr,"RECEIVED AUTO CANCELLATION ACCEPTANCE FOR [%s]", st_ip_xchngbk.c_ordr_rfrnc );          /** VQC **/
  				i_returncode = fn_ins_spn_rep_tbl( c_ServiceName,
                             							c_err_msg.arr,																	/** VQC **/
                             							&st_pstn_actn_var,
                             							c_imtm_remarks.arr );                           /** VQC **/
					if ( i_returncode != 0 )
					{
						fn_errlog ( c_ServiceName, "S31375", LIBMSG, c_err_msg.arr );									/** VQC **/											
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );												/** VQC **/
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );											/** VQC **/
    /***		tpfree((char *)ptr_fml_Obuf);  Commented in Ver 3.2 ***/
						tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
    				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
					break;

			case	ORS_CAN_ORD_RJCT:
					sprintf(c_imtm_remarks.arr,"RECEIVED CANCELLATION REJECTION FOR [%s]",           /** VQC **/
																						st_ip_xchngbk.c_ordr_rfrnc );
  				i_returncode = fn_ins_spn_rep_tbl( c_ServiceName,
                             							c_err_msg.arr,																	 /** VQC **/
                             							&st_pstn_actn_var,
                             							c_imtm_remarks.arr );                            /** VQC **/
					if ( i_returncode != 0 )
					{
						fn_errlog ( c_ServiceName, "S31380", LIBMSG, c_err_msg.arr );							/** VQC **/
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );										/** VQC **/
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );									/** VQC **/
		/****   tpfree((char *)ptr_fml_Obuf);  Commented in Ver 3.2 ****/
						tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
  				  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
					break;
		}

   }
 
	} /*** Ver 1.5 ***/
  switch ( st_ip_xchngbk.l_ors_msg_typ )
	{
		case	ORS_NEW_ORD_ACPT:
					if(DEBUG_MSG_LVL_3)
					{
				  	fn_userlog ( c_ServiceName, " Inside ORS_NEW_ORD_ACPT case ");
					}
 
					if ( ( st_op_orderbook.c_ordr_stts == QUEUED ) || ( st_op_orderbook.c_ordr_stts == FREEZED )  )
					{
						st_op_orderbook.c_ordr_stts = ORDERED;
					}
					strcpy( st_op_orderbook.c_ack_tm,st_ip_xchngbk.c_ack_tm );	
				  strcpy( st_op_orderbook.c_prev_ack_tm, st_ip_xchngbk.c_entry_dt_tm );	
					st_op_orderbook.c_oprn_typ = UPDATE_STATUS_ACK_TM;
					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog ( c_ServiceName, "  st_op_orderbook.c_ordr_stts :%c:", st_op_orderbook.c_ordr_stts);
						fn_userlog ( c_ServiceName, "  st_op_orderbook.c_ack_tm:%s:", st_op_orderbook.c_ack_tm);
						fn_userlog ( c_ServiceName, "  st_op_orderbook.c_prev_ack_tm :%s:",st_op_orderbook.c_prev_ack_tm);
					}

					break;

		case	ORS_NEW_ORD_RJCT:
					st_op_orderbook.c_ordr_stts = REJECTED;
					strcpy( st_op_orderbook.c_ack_tm,st_ip_xchngbk.c_ack_tm );	
					/** This value is to update the fod_ord_ack_tm     **/
					strcpy( st_op_orderbook.c_prev_ack_tm, 
                 st_ip_xchngbk.c_entry_dt_tm );	
					st_op_orderbook.c_oprn_typ = UPDATE_STATUS_ACK_TM;
					break;

		case	ORS_MOD_ORD_ACPT:
					if ( st_op_orderbook.l_exctd_qty == 0 )
					{
						if ( ( st_op_orderbook.c_ordr_stts == QUEUED ) ||
                 ( st_op_orderbook.c_ordr_stts == FREEZED )  )
						{
							st_op_orderbook.c_ordr_stts = ORDERED;
						}
					}
					else if ( st_op_orderbook.l_exctd_qty < st_op_orderbook.l_ord_tot_qty )
					{
						if ( ( st_op_orderbook.c_ordr_stts == QUEUED ) ||
                 ( st_op_orderbook.c_ordr_stts == FREEZED )  )
						{
							st_op_orderbook.c_ordr_stts = PARTIALLY_EXECUTED;
						}
					}
					else
					{
						st_op_orderbook.c_ordr_stts = EXECUTED;
					}

					if(st_op_orderbook.c_slm_flg == 'S')  /*** If Condition Added in Ver 2.3 ***/
          {
            strcpy(st_ip_xchngbk.c_xchng_rmrks,"SLTP Order Modification Accepted");
          }
          else
          {
          strcpy(st_ip_xchngbk.c_xchng_rmrks,"Modification Accepted");
          }

					st_op_orderbook.c_slm_flg = st_op_xchngbk. c_slm_flg;
					st_op_orderbook.l_dsclsd_qty = st_op_xchngbk.l_dsclsd_qty;
					st_op_orderbook.l_ord_tot_qty = st_op_xchngbk.l_ord_tot_qty;
					st_op_orderbook.l_ord_lmt_rt = st_op_xchngbk.l_ord_lmt_rt;
					st_op_orderbook.l_stp_lss_tgr = st_op_xchngbk.l_stp_lss_tgr;
					st_op_orderbook.c_ord_typ = st_op_xchngbk.c_ord_typ;
					strcpy( st_op_orderbook.c_valid_dt , st_op_xchngbk.c_valid_dt);
					strcpy( st_op_orderbook.c_trd_dt , st_op_xchngbk.c_mod_trd_dt);
					strcpy( st_op_orderbook.c_ack_tm ,st_ip_xchngbk.c_ack_tm);
					st_op_orderbook.c_oprn_typ = UPDATE_ORDER_MODIFICATION;

					/*** Commented in Ver 2.3 **
					strcpy(st_ip_xchngbk.c_xchng_rmrks,"Modification Accepted");
					***/
					break;

		case	ORS_MOD_ORD_RJCT:

          /* Ver 4.4 Starts */
          if(DEBUG_MSG_LVL_0)
          {
            fn_userlog(c_ServiceName, "st_op_orderbook.l_can_qty:%ld:", st_op_orderbook.l_can_qty);
            fn_userlog(c_ServiceName, "st_op_orderbook.l_exprd_qty:%ld:",st_op_orderbook.l_exprd_qty); 
          }
          /* Ver 4.4 Ends */

					if ( st_op_orderbook.l_exctd_qty == 0 )
					{
				/** if ( (st_op_orderbook.l_ord_tot_qty - st_op_orderbook.l_can_qty) > 0 ) ** Commented in Ver 4.4 **/
						if((st_op_orderbook.l_ord_tot_qty - (st_op_orderbook.l_can_qty + st_op_orderbook.l_exprd_qty)) > 0) /** added in Ver 4.4 **/
            {
              st_op_orderbook.c_ordr_stts = ORDERED;
            }
						/** Ver 4.4 Starts **/
						else if( st_op_orderbook.l_exprd_qty > 0 )
						{
							st_op_orderbook.c_ordr_stts = EXPIRED;
						}
						/** Ver 4.4 Ends **/
            else
            {
              st_op_orderbook.c_ordr_stts = CANCELLED;
            }
					}
					else if ( st_op_orderbook.l_exctd_qty < st_op_orderbook.l_ord_tot_qty )
					{
            if ( (st_op_orderbook.l_exctd_qty + st_op_orderbook.l_can_qty) ==
                            st_op_orderbook.l_ord_tot_qty )
            {
              st_op_orderbook.c_ordr_stts = PARTIALLY_EXECUTED_AND_CANCELLED;
            }
						/** Ver 4.4 Starts **/
						else if((st_op_orderbook.l_exctd_qty + st_op_orderbook.l_exprd_qty) == 
														st_op_orderbook.l_ord_tot_qty )
						{
							st_op_orderbook.c_ordr_stts = PARTIALLY_EXECUTED_AND_EXPIRED;
						}
						/** Ver 4.4 Ends **/
            else
            {
              st_op_orderbook.c_ordr_stts = PARTIALLY_EXECUTED;
            }
					}
					else
					{
						st_op_orderbook.c_ordr_stts = EXECUTED;
					}
					strcpy( st_op_orderbook.c_ack_tm ,st_ip_xchngbk.c_ack_tm);
					strcpy( st_op_orderbook.c_trd_dt , st_op_xchngbk.c_mod_trd_dt);
					/** st_op_orderbook.l_exprd_qty = 0; ** Commented in Ver 4.4 **/
					st_op_orderbook.c_oprn_typ = UPDATE_XCHNG_RESP_DTLS;

          strcpy(st_ip_xchngbk.c_xchng_rmrks,"Modification Rejected");
					break;

		case	ORS_SPD_ORD_CNCL:
		case	ORS_2L_ORD_CNCL:
		case	ORS_3L_ORD_CNCL:
		case	ORS_IOC_CAN_ACPT:
		case  ORS_ORD_FRZ_CNCL:
          st_op_orderbook.l_can_qty = st_op_orderbook.l_ord_tot_qty -
                                  st_op_xchngbk.l_xchng_can_qty; /*** ver 5.6 **/
          fn_userlog ( c_ServiceName,"EOS_Qty :%ld: :%ld:",st_op_orderbook.l_can_qty,st_op_xchngbk.l_xchng_can_qty); /*** Ver 5.6 ***/

         if( (st_op_orderbook.l_exctd_qty + st_op_orderbook.l_can_qty)==st_op_orderbook.l_ord_tot_qty) /*** ver 5.6 If condition added ***/
         {
						/** l_xchng_can_qty holds the executed qty ***/
						if (st_op_xchngbk.l_xchng_can_qty == 0 )
						{
							fn_userlog ( c_ServiceName, "INSIDE st_op_xchngbk.l_xchng_can_qty == 0 CASE  ");
							st_op_orderbook.c_ordr_stts = CANCELLED;
						}
						else 
						{
							fn_userlog ( c_ServiceName, "INSIDE ELSE  st_op_xchngbk.l_xchng_can_qty == 0 CASE  ");
							st_op_orderbook.c_ordr_stts = PARTIALLY_EXECUTED_AND_CANCELLED;
						}
         }
         else /*** ver 5.6 started ***/
         {
            /*** No trade is processed yet or is in-flight and cancellation arrived ***/
            if ( st_op_orderbook.l_exctd_qty == 0 )
            {
              st_op_orderbook.c_ordr_stts = ORDERED;
            }
            else /** Some trades are processed and some are not yet processed or are in-flight and cancellation arrived ***/
            {
              st_op_orderbook.c_ordr_stts = PARTIALLY_EXECUTED;
            }

            if(DEBUG_MSG_LVL_0)
            {
              fn_userlog(c_ServiceName, "In Cancellation Acceptance FINAL ORDER STATUS IS :%c:",st_op_orderbook.c_ordr_stts);
            }
          } /*** ver 5.6 ends **/
					strcpy( st_op_orderbook.c_trd_dt , st_op_xchngbk.c_mod_trd_dt);
          /*** st_op_orderbook.l_can_qty = st_op_orderbook.l_ord_tot_qty -
                                  st_op_xchngbk.l_xchng_can_qty; *** ver 5.6 ***/
					strcpy( st_op_orderbook.c_ack_tm ,st_ip_xchngbk.c_ack_tm);
					st_op_orderbook.l_exprd_qty = 0;
					st_op_orderbook.c_oprn_typ = UPDATE_XCHNG_RESP_DTLS_CA;
					break;

		case	ORS_CAN_ORD_ACPT:

          /*** ver 4.7 starts ***/
          /*** Even if trade is not processed or is in-flight , we'll get correct cancelled quantity ***/
          st_op_orderbook.l_can_qty = st_op_orderbook.l_ord_tot_qty- st_op_xchngbk.l_xchng_can_qty;
          if(DEBUG_MSG_LVL_0)
          {
             fn_userlog(c_ServiceName, "In Cancellation Acceptance l_xchng_can_qty :%ld: and l_can_qty :%ld: and st_op_orderbook.l_exctd_qty is :%ld: and st_op_orderbook.c_ordr_stts is :%c:",st_op_xchngbk.l_xchng_can_qty,st_op_orderbook.l_can_qty,st_op_orderbook.l_exctd_qty,st_op_orderbook.c_ordr_stts);
          }
          /*** ver 4.7 ends ***/

          if( (st_op_orderbook.l_exctd_qty + st_op_orderbook.l_can_qty)==st_op_orderbook.l_ord_tot_qty) /*** ver 5.2 If condition added ***/
         {
					if ( st_op_orderbook.l_exctd_qty == 0 )
					{
						st_op_orderbook.c_ordr_stts = CANCELLED;
					}
					else 
					{
						st_op_orderbook.c_ordr_stts = PARTIALLY_EXECUTED_AND_CANCELLED;
					}
         }
          else /*** ver 5.2 started ***/
          {
            /*** No trade is processed yet or is in-flight and cancellation arrived ***/
            if ( st_op_orderbook.l_exctd_qty == 0 )
            {
              st_op_orderbook.c_ordr_stts = ORDERED;
            }
            else /** Some trades are processed and some are not yet processed or are in-flight and cancellation arrived ***/
            {
              st_op_orderbook.c_ordr_stts = PARTIALLY_EXECUTED;
            }

            if(DEBUG_MSG_LVL_0)
            {
              fn_userlog(c_ServiceName, "In Cancellation Acceptance FINAL ORDER STATUS IS :%c:",st_op_orderbook.c_ordr_stts);
            }
          } /*** ver 5.2 ends **/
					strcpy( st_op_orderbook.c_trd_dt , st_op_xchngbk.c_mod_trd_dt);

          /* st_op_orderbook.l_can_qty = st_op_orderbook.l_ord_tot_qty - l_ftd_trd_qty; **/ /** commented in ver 4.7 ***/

					strcpy( st_op_orderbook.c_ack_tm ,st_ip_xchngbk.c_ack_tm);
					st_op_orderbook.l_exprd_qty = 0;
					st_op_orderbook.c_oprn_typ = UPDATE_XCHNG_RESP_DTLS_CA;

          strcpy(st_ip_xchngbk.c_xchng_rmrks,"Cancellation Accepted");
					break;

		case	ORS_CAN_ORD_RJCT:

					/* Ver 4.3 Starts */
          if(DEBUG_MSG_LVL_0)
          {
						fn_userlog(c_ServiceName, "st_op_orderbook.l_can_qty:%ld:", st_op_orderbook.l_can_qty);
						fn_userlog(c_ServiceName, "st_op_orderbook.l_exprd_qty:%ld:",st_op_orderbook.l_exprd_qty); /*** Ver 4.4 ***/
					}
					/* Ver 4.3 Ends */
					if ( st_op_orderbook.l_exctd_qty == 0 )
					{
						/** if ( (st_op_orderbook.l_ord_tot_qty - st_op_orderbook.l_can_qty) > 0 ) * Ver 4.3 ** Commented in Ver 4.4 **/
						if((st_op_orderbook.l_ord_tot_qty - (st_op_orderbook.l_can_qty + st_op_orderbook.l_exprd_qty)) > 0 ) /** added in Ver 4.4 **/
						{
							st_op_orderbook.c_ordr_stts = ORDERED;
						}
						/** Ver 4.4 Starts **/
						else if(st_op_orderbook.l_exprd_qty > 0)
						{
							st_op_orderbook.c_ordr_stts = EXPIRED;
						}
						/** Ver 4.4 Ends **/
						/* Ver 4.3 Starts */
            else
            {
              st_op_orderbook.c_ordr_stts = CANCELLED;
            }
            /* Ver 4.3 Ends */
					}
					else if ( st_op_orderbook.l_exctd_qty < st_op_orderbook.l_ord_tot_qty )
					{
						/* Ver 4.3 Starts */
            if ( (st_op_orderbook.l_exctd_qty + st_op_orderbook.l_can_qty) == st_op_orderbook.l_ord_tot_qty )
            {
              st_op_orderbook.c_ordr_stts = PARTIALLY_EXECUTED_AND_CANCELLED;
            }
						/** Ver 4.4 Starts **/
						else if((st_op_orderbook.l_exctd_qty + st_op_orderbook.l_exprd_qty) == st_op_orderbook.l_ord_tot_qty )
						{
							st_op_orderbook.c_ordr_stts = PARTIALLY_EXECUTED_AND_EXPIRED;
						}
						/** Ver 4.4 Ends **/
            else
            {
            /* Ver 4.3 Ends */
						st_op_orderbook.c_ordr_stts = PARTIALLY_EXECUTED;
						}     /* Ver 4.3 */
					}
					else
					{
						st_op_orderbook.c_ordr_stts = EXECUTED;
					}

					strcpy( st_op_orderbook.c_trd_dt , st_op_xchngbk.c_mod_trd_dt);
					strcpy( st_op_orderbook.c_ack_tm ,st_ip_xchngbk.c_ack_tm);
					/* st_op_orderbook.l_can_qty = 0; *** Commented in Ver 4.3 ***/
					/** st_op_orderbook.l_exprd_qty = 0; ** Commented in Ver 4.4 **/
					st_op_orderbook.c_oprn_typ = UPDATE_XCHNG_RESP_DTLS;

          strcpy(st_ip_xchngbk.c_xchng_rmrks,"Cancellation Rejected");
					break;

		/*** Ver 1.9 starts ***/
		case  ORS_ORD_EXP:

          if ( st_op_orderbook.l_exctd_qty == 0 )
          {
            st_op_orderbook.c_ordr_stts = EXPIRED;
          }
          else
          {
            st_op_orderbook.c_ordr_stts = PARTIALLY_EXECUTED_AND_EXPIRED;
          }

          strcpy( st_op_orderbook.c_trd_dt , st_op_xchngbk.c_mod_trd_dt);
          strcpy( st_op_orderbook.c_ack_tm , st_ip_xchngbk.c_ack_tm);
          st_op_orderbook.l_can_qty = 0;
          st_op_orderbook.l_exprd_qty = st_op_orderbook.l_ord_tot_qty -
																			  st_op_orderbook.l_exctd_qty;
          st_op_orderbook.c_oprn_typ = UPDATE_XCHNG_RESP_DTLS;
          break;
		/*** Ver 1.9 ends ***/

		default:
  				strcpy( c_err_msg.arr, "Invalid Operation Type" );																	/** VQC **/	
  				if(DEBUG_MSG_LVL_0)   /*** VQC ***/
					{
					fn_userlog ( c_ServiceName, "ERROR :%s:", c_err_msg.arr );													/** VQC **/
					}	
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );															/** VQC **/
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );														/** VQC **/
     /***	tpfree((char *)ptr_fml_Obuf);   Commented in Ver 3.2 ****/
					tpfree((char *)ptr_fml_Sbuf);   /*** Added in Ver 4.0 ***/
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					break;
	}

	strcpy( st_op_orderbook.c_ordr_rfrnc, st_ip_xchngbk.c_ordr_rfrnc);

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog ( c_ServiceName, "Calling Function fn_spnupd_ordrbook");
  }
		
  st_op_orderbook.c_prcimpv_flg  =st_op_xchngbk.c_prcimpv_flg;  /** ver 3.5 **/

	/*** Commented in Ver 4.9 ***

	i_returncode = fn_spnupd_ordrbook( c_ServiceName , 
																    &st_op_orderbook,
											              ptr_st_err_msg );   ***/

	/*** Ver 4.9 Starts ***/
	i_returncode = fn_spnupd_ordrbook_ors( c_ServiceName ,
																				 &st_op_orderbook,
																				 c_lst_act_ref,
																				 ptr_st_err_msg );

	/*** Ver 4.9 Ends ***/
  if ( i_returncode != 0 )
  {
	  fn_errlog ( c_ServiceName, "S31385", LIBMSG, c_err_msg.arr );																/** VQC **/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																			/** VQC **/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																		/** VQC **/
	/** tpfree((char *)ptr_fml_Obuf);  Commented in Ver 3.2 ****/
		tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


	st_ip_xchngbk.c_rms_prcsd_flg = 'P';
	st_ip_xchngbk.c_oprn_typ = UPDATE_RMS_PRCSD_FLG;

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog ( c_ServiceName, "Calling Function fn_spnupd_xchngbk");
  	fn_userlog ( c_ServiceName, "st_ip_xchngbk.c_xchng_rmrks is :%s:",st_ip_xchngbk.c_xchng_rmrks);
  	fn_userlog ( c_ServiceName, "st_op_xchngbk.c_xchng_rmrks is :%s:",st_op_xchngbk.c_xchng_rmrks);
	}
  i_returncode = fn_spnupd_xchngbk( c_ServiceName,
                                 &st_ip_xchngbk ,
                                 c_err_msg.arr																									/** VQC **/
                                 ); 
  if ( i_returncode != 0)
  {
		fn_errlog ( c_ServiceName, "S31390", LIBMSG, c_err_msg.arr );																/** VQC **/
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																			/** VQC **/
  	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																		/** VQC **/
 /***tpfree((char *)ptr_fml_Obuf);  Commented in ver 3.2 ***/
		tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/*** Ver 1.5 starts here ***/

	if(DEBUG_MSG_LVL_3)
  {
		fn_userlog ( c_ServiceName, "----1-----");
		fn_userlog ( c_ServiceName, "st_op_orderbook.c_fc_flg is :%c:",st_op_orderbook.c_fc_flg);
		fn_userlog ( c_ServiceName, "st_op_orderbook.c_prd_typ is :%c:",st_op_orderbook.c_prd_typ);
	}


	 /*** if ( st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS )	 Commented In Ver 2.0 ***/
	 if ( st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS || st_op_orderbook.c_prd_typ == OPTIONPLUS ) /*** Ver 2.0 ***/	
	 {
		if(DEBUG_MSG_LVL_3)
  	{
    	fn_userlog ( c_ServiceName, "----2-----");
  	}
			/** strcpy(st_pstn_actn_var.c_channel,"SYS"); Commented in Ver 3.4 **/
			strcpy(st_pstn_actn_var.c_alias,"*");

			switch ( st_ip_xchngbk.l_ors_msg_typ )
			{
				case	ORS_NEW_ORD_ACPT:
							break;

				case	ORS_NEW_ORD_RJCT:
							
							/*If it is a fresh order rejection, place a cancel request for the cover order*/
							if(st_op_orderbook.c_fc_flg == 'F') /*Fresh Order*/
							{
								/*Check if the cover order is in open state*/
								EXEC SQL
								SELECT	FOD_ORDR_STTS,
												FOD_EXEC_QTY
								INTO		:c_ordr_stts,
												:l_exctd_qty
								FROM		FOD_FO_ORDR_DTLS
								WHERE		FOD_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc;

								if(SQLCODE != 0)
								{
									fn_errlog ( c_ServiceName, "S31395", SQLMSG, c_err_msg.arr );																	/** VQC **/
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																				/** VQC **/
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																			/** VQC **/
          /***		tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
									tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}

								if(c_ordr_stts == 'Q')
								{
                  i_canrej_flag = 0; /*** ver 4.5 ***/ 
								  if(DEBUG_MSG_LVL_0) /*** Ver 3.1 ***/
  								{
										fn_userlog(c_ServiceName,"cancellation of cover order not possible as order already placed with the exchange");
										fn_userlog(c_ServiceName,"Cover order in QUEUED state, hence dont release margin and loss");	/*** Ver 2.0 ***/
									}
 	
									/***fn_errlog ( c_ServiceName, "S31400", LIBMSG, c_err_msg );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									tpfree((char *)ptr_fml_Obuf);
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); *** Commented in Ver 2.0 ***/
								}
								else if(c_ordr_stts != 'J' && c_ordr_stts != 'C' && c_ordr_stts != 'F' && l_exctd_qty == 0) /*** In ver 5.1 'F' status is added ***/ 
								{
                  i_canrej_flag = 0; /*** ver 4.5 ***/
									strcpy(c_remarks.arr,"System placed Cancellation");                                           /** VQC **/

									i_returncode = fn_call_svc_fml ( c_ServiceName,
																				 c_err_msg.arr,																													/** VQC **/
																				 "SFO_SPN_CANCEL",
																				 0,
																				 9,
																				 0,
																				 FFO_USR_ID, (char *)st_pstn_actn_var.c_user_id,
																				 FFO_SSSN_ID, (char *)&st_pstn_actn_var.l_session_id,
																				 FFO_XCHNG_CD,(char *)st_op_orderbook.c_xchng_cd,
																				 FFO_EBA_MTCH_ACT_NO,(char *)st_op_orderbook.c_cln_mtch_accnt,
																				 FFO_ORDR_RFRNC, (char *)st_op_orderbook.c_sltp_ord_rfrnc,
																				 FFO_XCHNG_RMRKS, (char *)c_remarks.arr,                                /** VQC **/
																				 FFO_CHANNEL,(char *)st_pstn_actn_var.c_channel,     
																				 FFO_ALIAS,(char *)st_pstn_actn_var.c_alias,
																				 FFO_PIPE_ID, (char *)st_op_orderbook.c_pipe_id );

									if ( i_returncode != SUCC_BFR )
									{
										fn_errlog ( c_ServiceName, "S31405", LIBMSG, c_err_msg.arr );																/** VQC **/ 
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																			/** VQC **/	
										fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																		/** VQC **/
            /*****  tpfree((char *)ptr_fml_Obuf);  Commented in Ver 3.2 ****/
										tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
										tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
									}
								}/*** ver 4.5 starts ***/
                else if(c_ordr_stts != 'J' && c_ordr_stts != 'C' && c_ordr_stts != 'F' ) /*** In ver 5.1 'F' status is added ***/
                {
                     i_canrej_flag = 0;
                }/*** ver 4.5 ends ***/
							} 
/****	else if(st_op_orderbook.c_fc_flg == 'C') *Cover Order* *** else loop added in Ver 2.0  commented in ver 4.5 ***/
              if((st_op_orderbook.c_fc_flg == 'C') || (st_op_orderbook.c_fc_flg == 'F' && i_canrej_flag == 1 )) /*** added in ver 4.5 ***/           
							{
									st_op_orderbook.d_amt_blkd = 0.0;
									st_op_orderbook.d_lss_amt_blkd = 0.0;

									EXEC SQL
										SELECT  FOD_AMT_BLCKD,
														FOD_LSS_AMT_BLCKD,
														FOD_ORDR_STTS
										INTO		:st_op_orderbook.d_amt_blkd,
														:st_op_orderbook.d_lss_amt_blkd,
														:c_frsh_ordr_stts
										FROM    FOD_FO_ORDR_DTLS
					/*** WHERE   FOD_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc; commented in ver 4.5 **/
                    WHERE   FOD_ORDR_RFRNC =DECODE( :st_op_orderbook.c_fc_flg,'C',:st_op_orderbook.c_sltp_ord_rfrnc,:st_op_orderbook.c_ordr_rfrnc ); /*** ver 4.5 ***/

									if(SQLCODE != 0)
									{
										fn_errlog ( c_ServiceName, "S31410", SQLMSG, c_err_msg.arr );																/** VQC **/
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																			/** VQC **/
										fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																		/** VQC **/
										/*** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
										tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
										tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
									}
 
                  /*** ver 4.5 starts ***/
                  if(DEBUG_MSG_LVL_0)
                  {
                     fn_userlog(c_ServiceName,"Inside rejection case st_op_orderbook.c_fc_flg is :%c: and c_frsh_ordr_stts is :%c:",st_op_orderbook.c_fc_flg,c_frsh_ordr_stts);
                  }
                  /*** ver 4.5 ends ***/   

									if(DEBUG_MSG_LVL_3)
									{
										fn_userlog(c_ServiceName,"Margin Amount of the fresh order :%lf:", st_op_orderbook.d_amt_blkd);
										fn_userlog(c_ServiceName,"Loss Amount of the fresh order :%lf:", st_op_orderbook.d_lss_amt_blkd);
									}	

									if( c_frsh_ordr_stts == 'J'  || c_frsh_ordr_stts == 'C' || c_frsh_ordr_stts == 'F' ) /*** Ver 2.2 Cancel status added ***/ /*** In ver 5.1 'F' status is added ***/
									{
										/*Release the margin and loss amount blocked*/
										strcpy( c_narration_id , ON_ORDER_REJECTION);
										
										if(st_op_orderbook.d_amt_blkd != 0)
										{	
											if(DEBUG_MSG_LVL_3)
											{
												fn_userlog(c_ServiceName,"Release the margin amount blocked");
											}

											i_returncode = fn_upd_spnlimits( c_ServiceName,
																			&st_pstn_actn_var,
																			ptr_st_err_msg,
																			c_narration_id,
																			DEBIT_WITHOUT_LIMIT,
												         /***	st_op_orderbook.d_amt_blkd * -1, commented in ver 4.5 ***/
                                      st_op_orderbook.d_amt_blkd, /*** added in ver 4.5 ***/
																			&d_balance_amt);

											if ( i_returncode != 0 )
											{
												fn_errlog ( c_ServiceName, "S31415", LIBMSG, c_err_msg.arr );															/** VQC **/
												Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																		/** VQC **/
												fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																	/** VQC **/
												/*** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 *****/
												tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
												tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
											}
										}

										/*Release the diff loss amount blocked*/
										strcpy( c_narration_id , ON_MODIFICATION_REJECTION);
										if(st_op_orderbook.d_lss_amt_blkd != 0)
										{	
											if(DEBUG_MSG_LVL_3)
											{		
												fn_userlog(c_ServiceName,"Release the loss amount blocked");
											}
											i_returncode = fn_upd_spnlimits( c_ServiceName,
																				&st_pstn_actn_var,
																				ptr_st_err_msg,
																				c_narration_id,
																				DEBIT_WITHOUT_LIMIT,
											       	/*** 	st_op_orderbook.d_lss_amt_blkd * -1, commented in ver 4.5 ***/
                                        st_op_orderbook.d_lss_amt_blkd, /*** added in ver 4.5 ***/
																				&d_balance_amt);


											if ( i_returncode != 0 )
											{
												fn_errlog ( c_ServiceName, "S31420", LIBMSG, c_err_msg.arr );																		/** VQC **/
												Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																					/** VQC **/
												fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																				/** VQC **/
												/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
												tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
												tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
											}
										}

										EXEC SQL	
										 UPDATE			FOD_FO_ORDR_DTLS
							/***   SET				FOD_AMT_BLCKD			= 0,
																FOD_LSS_AMT_BLCKD = 0
					 WHERE FOD_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc; commented in ver 4.5 ***/
                     /*** ver 4.5 starts ***/
                  SET        FOD_AMT_BLCKD     = FOD_AMT_BLCKD - :st_op_orderbook.d_amt_blkd,
                             FOD_LSS_AMT_BLCKD = FOD_LSS_AMT_BLCKD - :st_op_orderbook.d_lss_amt_blkd,
														 FOD_SLTP_MRGN			= 0,				/*** Ver 5.5 ***/	
														 FOD_SLTP_PL				= 0,				/*** Ver 5.5 ***/	 
														 FOD_SLTP_SEBI_MRGN= 0,					/*** Ver 5.5 ***/		
                             FOD_OPLUS_PREMIUM  = 0, /*** Ver 5.9 ***/
                             FOD_SPAN_MRGN = 0,       /*** Ver 5.9 ***/
                             FOD_EXPR_MRGN = 0       /*** Ver 5.9 ***/
                  WHERE      FOD_ORDR_RFRNC    =  DECODE( :st_op_orderbook.c_fc_flg,'C',:st_op_orderbook.c_sltp_ord_rfrnc,:st_op_orderbook.c_ordr_rfrnc ); /*** ver 4.5 ends ***/

										if(SQLCODE != 0)
										{
												fn_errlog ( c_ServiceName, "S31425", SQLMSG, c_err_msg.arr );																		/** VQC **/
												Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																					/** VQC **/
												fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																				/** VQC **/
												/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
												tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
												tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
										}
									}
							 }
							break;

				case	ORS_MOD_ORD_ACPT:

							if(st_op_orderbook.c_fc_flg == 'C' && (st_op_orderbook.c_prd_typ == OPTIONPLUS || st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS) ) /*Cover*/ /*** Ver 2.0 ***/ /*** SLTP_FUTUREPLUS added in Ver 2.5 ***/
							{

								fn_userlog(c_ServiceName," Inside ORS_MOD_ORD_ACPT for OPTIONPLUS OR SLTP_FUTUREPLUS order...");  /*** SLTP_FUTUREPLUS added in Ver 2.5 ***/
								st_op_orderbook.d_amt_blkd = 0.0;
    						st_op_orderbook.d_lss_amt_blkd = 0.0;
								l_temp_stp_lss_tgr = st_op_xchngbk.l_stp_lss_tgr ; /*** Modified SLTP stored in temp ***/
					
								EXEC SQL
							 		SELECT  FOD_AMT_BLCKD,
													FOD_LSS_AMT_BLCKD ,
													FOD_ORDR_FLW
													/*** FOD_LMT_RT			*** Ver 2.5 *** Commented in Ver 2.6 ***/
							 		INTO    :st_op_orderbook.d_amt_blkd,
													:st_op_orderbook.d_lss_amt_blkd ,
													:c_ord_flw
													/*** :l_fsh_ord_lmt_rt		*** Ver 2.5 *** Commented  in Ver 2.6 ***/
							 		FROM    FOD_FO_ORDR_DTLS
							 		WHERE   FOD_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc;

								if(SQLCODE != 0)
								{
									fn_errlog ( c_ServiceName, "S31430", SQLMSG, c_err_msg.arr );																	/** VQC **/
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																				/** VQC **/
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																			/** VQC **/
									/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
									tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}

			
								d_amt_blkd = st_op_orderbook.d_amt_blkd ;
								d_lss_amt_blkd = st_op_orderbook.d_lss_amt_blkd ;

								if(DEBUG_MSG_LVL_3)
								{
									fn_userlog(c_ServiceName,"Margin Amount of the fresh order :%lf:", st_op_orderbook.d_amt_blkd);
									fn_userlog(c_ServiceName,"Loss Amount of the fresh order :%lf:", st_op_orderbook.d_lss_amt_blkd);
									fn_userlog(c_ServiceName,"st_op_orderbook.d_diff_amt_blkd is :%lf:",st_op_orderbook.d_diff_amt_blkd);
									fn_userlog(c_ServiceName,"st_op_orderbook.d_diff_lss_amt_blkd is :%lf:",st_op_orderbook.d_diff_lss_amt_blkd);
									fn_userlog(c_ServiceName,"c_ord_flw is :%c:",c_ord_flw);
								}
								
							/******************** Commented in Ver 2.6 ****************
			
							if (st_op_orderbook.c_prd_typ == OPTIONPLUS )  *** If condition added in Ver 2.5 ***
							{
								*Get the current margin percentage and sltp % diff. from the database *
								EXEC SQL
									SELECT nvl(FMM_SLTP_DIFF_PRCNT,0),
												 nvl(FMM_SLTP_PRCNT,0),
												 abs(:st_op_xchngbk.l_stp_lss_tgr - :st_op_xchngbk.l_ord_lmt_rt)
								  INTO   :d_fmm_sltp_diff_prcnt,
											 	 :d_fmm_sltp_prcnt,
											 	 :l_amt
									FROM   FMM_FO_MRGN_MSTR
									WHERE  FMM_PRDCT_TYP= DECODE (:st_op_orderbook.c_prd_typ,'U','F','O') 
									AND    FMM_UNDRLYNG = :st_op_orderbook.c_undrlyng
									AND    FMM_XCHNG_CD = :st_op_orderbook.c_xchng_cd
									AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
																							 	FROM    FCB_FO_CLN_BSKT_ALLTD
																							 	WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
																														 					FROM    CLM_CLNT_MSTR
																														 					WHERE   CLM_MTCH_ACCNT = :st_op_orderbook.c_cln_mtch_accnt));

								if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
								{
									fn_userlog(c_ServiceName,"******Invalid Stock Code*******");
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									fn_errlog( c_ServiceName, "S31435", SQLMSG, c_err_msg );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );	
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}
								else if(SQLCODE != 0)
								{
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );				
									fn_errlog( c_ServiceName, "S31440", SQLMSG, c_err_msg  );	
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );			
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}

								if(DEBUG_MSG_LVL_3)
								{
									fn_userlog(c_ServiceName,"SLTP Percentage   :%lf:", d_fmm_sltp_prcnt);
									fn_userlog(c_ServiceName,"SLTP diff. Percentage   :%lf:", d_fmm_sltp_diff_prcnt);
									fn_userlog(c_ServiceName,"st_op_xchngbk.l_stp_lss_tgr :%ld:", st_op_xchngbk.l_stp_lss_tgr );
									fn_userlog(c_ServiceName,"st_op_xchngbk.l_ord_lmt_rt :%ld:", st_op_xchngbk.l_ord_lmt_rt);
									fn_userlog(c_ServiceName,"l_amt   :%ld:", l_amt);
								}
					
								** Getting the total executed value and quantity of FRESH order. **
								EXEC SQL
									SELECT  NVL(SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),0),
													NVL(SUM(FTD_EXCTD_QTY),0)
									INTO    :d_frsh_exe_val,
													:li_tot_exec_qty
									FROM    FTD_FO_TRD_DTLS
									WHERE   FTD_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc;

								if( SQLCODE != 0 )
								{
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );			
									fn_errlog( c_ServiceName, "S31445", SQLMSG, c_err_msg  );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );			
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}

								** Checking if Fresh order value & quantity is equals to zero. *
								if (d_frsh_exe_val == 0 || li_tot_exec_qty == 0)
								{
									fn_userlog(c_ServiceName, "******Fresh order is not yet executed.*********");
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg);
									fn_errlog( c_ServiceName, "B23007", DEFMSG, c_err_msg  );		
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}

			
								d_wgt_avrg_price = (double) (d_frsh_exe_val / li_tot_exec_qty);

								EXEC SQL
									SELECT  NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FTD_EXCTD_QTY,
																																	 FTD_EXCTD_QTY ) ), 0 ),
													NVL( SUM( DECODE( FOD_FC_FLAG, 'F', FTD_EXCTD_QTY, 0 ) ), 0 )
									INTO    :l_open_qty,
											  	:l_frsh_xtd_qty
									FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
									WHERE   FOD_CLM_MTCH_ACCNT    = :st_op_orderbook.c_cln_mtch_accnt
									AND     FOD_TRD_DT            = :st_op_orderbook.c_trd_dt
									AND     FOD_PRDCT_TYP         = :st_op_orderbook.c_prd_typ
									AND     FTD_ORDR_RFRNC        = FOD_ORDR_RFRNC
									AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :st_op_orderbook.c_sltp_ord_rfrnc;

								if( SQLCODE != 0 )
								{
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									fn_errlog( c_ServiceName, "S31450", SQLMSG, c_err_msg  );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );			
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}

								if(l_open_qty <0 )
								{
									l_open_qty=0;
								}
	
								EXEC SQL
									SELECT nvl(FRM_DIFFRNC_MRGN,0)
									INTO   :d_frm_diffrnc_mrgn
									FROM   FRM_FO_RANGE_MSTR
									WHERE  FRM_XCHNG_CD        = TRIM(:st_op_orderbook.c_xchng_cd)
									AND    TRIM(FRM_UNDRLYNG)  = TRIM(:st_op_orderbook.c_undrlyng)
									AND    FRM_ORDR_FLOW = :c_ord_flw                     *** Fresh order flow ***
									AND    FRM_FROM_RANGE <= :l_temp_stp_lss_tgr
                  AND    :l_temp_stp_lss_tgr   < FRM_TO_RANGE;    *** Modified SLTP price used ***

								if ( SQLCODE  !=  0  && SQLCODE != NO_DATA_FOUND)
								{
									fn_errlog( c_ServiceName, "S31455",SQLMSG,c_err_msg);
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}
					
								* Calculate Margin amount to be blocked *
								d_amt_to_be_blckd = ((double)(l_open_qty * d_wgt_avrg_price) * d_fmm_sltp_prcnt / 100.0);

								if ( c_ord_flw == BUY ) 
								{
									if( d_frm_diffrnc_mrgn < 100 )
									{
										d_lss_amt_to_be_blckd =(l_open_qty * (d_wgt_avrg_price - st_op_xchngbk.l_ord_lmt_rt ) );
									}
									else if ( d_frm_diffrnc_mrgn == 100 )
									{
										d_lss_amt_to_be_blckd =(l_open_qty * (d_wgt_avrg_price ) );
									}
								}
								else if ( c_ord_flw == SELL )
								{
									d_lss_amt_to_be_blckd =(l_open_qty * (d_wgt_avrg_price - st_op_xchngbk.l_ord_lmt_rt ) * -1 );
								}
							}

							*************** Commented in Ver 2.6 Ends ****************/

							/*** else if (st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS  == OPTIONPLUS)  *** Else if loop added in Ver 2.5 *** Commented in Ver 2.6 ****/
							if (st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS || st_op_orderbook.c_prd_typ == OPTIONPLUS)  /*** Else if loop added in Ver 2.5 *** OPTIONPLUS Added in Ver 2.6 ***/
							{
									/*** EXEC SQL
										SELECT  FOD_LMT_RT
										INTO    :l_cvr_ord_lmt_rt
										FROM    FOD_FO_ORDR_DTLS
										WHERE   FOD_ORDR_RFRNC = :st_op_orderbook.c_ordr_rfrnc; *** Commented on 23Oct2015 in Ver 2.6 ***/

								/*** Added on 23Oct2015 Ver 2.6 ***/
								EXEC SQL
									SELECT	FXB_LMT_RT
									INTO		:l_fsh_ord_lmt_rt
									FROM		FXB_FO_XCHNG_BOOK
									WHERE		FXB_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc
									AND			FXB_MDFCTN_CNTR = (select max(FXB_MDFCTN_CNTR) FROM FXB_FO_XCHNG_BOOK
									WHERE		FXB_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc
									AND     FXB_PLCD_STTS != 'J' );

								
								if(SQLCODE != 0)
								{
								/**	fn_errlog ( c_ServiceName, "S31460", SQLMSG, ptr_st_err_msg->c_err_msg );
									fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); Commented in Ver 2.8**/
											/*** Added in ver 2.8 ***/
                  fn_errlog ( c_ServiceName, "S31465", SQLMSG,c_err_msg.arr);																				/** VQC **/
                  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																						/** VQC **/
                  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																					/** VQC **/
                  /***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
									tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                /*** Ver 2.8 Ends ***/
								}

								EXEC SQL
									SELECT	FXB_LMT_RT
									INTO		:l_cvr_ord_lmt_rt
									FROM		FXB_FO_XCHNG_BOOK
									WHERE		FXB_ORDR_RFRNC = :st_op_orderbook.c_ordr_rfrnc
									AND			FXB_MDFCTN_CNTR = (select max(FXB_MDFCTN_CNTR) FROM FXB_FO_XCHNG_BOOK
									WHERE		FXB_ORDR_RFRNC = :st_op_orderbook.c_ordr_rfrnc);
									/*** Ver 2.6 ends ***/

									if(SQLCODE != 0)
									{
						 /**		fn_errlog ( c_ServiceName, "S31470", SQLMSG, ptr_st_err_msg->c_err_msg );
										fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
										tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
										 Commented in Ver 2.8 ***/
										 /*** Ver 2.8 Starts ***/
                    fn_errlog ( c_ServiceName, "S31475", SQLMSG, c_err_msg.arr );																		/** VQC **/
                    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																					/** VQC **/
                    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																				/** VQC **/
                    /***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
										tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
                    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                    /*** Ver 2.8 Ends ****/
									}

									if(DEBUG_MSG_LVL_3)
									{
										fn_userlog(c_ServiceName,"Cover Order Limit Rate :%ld:", l_cvr_ord_lmt_rt);
									}

									/* Calculate Margin amount to be blocked */

										if(st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS) /** Added in ver 2.6 Starts **/
										{	
											i_returncode =    fn_cal_mrgn_sltp 
																				(
																					c_ServiceName, 
																					st_op_orderbook.c_sltp_ord_rfrnc,
																					l_fsh_ord_lmt_rt,				
																					l_cvr_ord_lmt_rt,
																					&d_amt_to_be_blckd,
																					&d_lss_amt_to_be_blckd,
																					c_ref_rmrks,  /*** Ver 5.5 ***/
																					&d_comp1_mrgn,/*** Ver 5.5 ***/
																					&d_comp1_pl,  /*** Ver 5.5 ***/
																					&d_xchng_amt, /*** Ver 5.5 ***/
																					c_err_msg.arr																										/** VQC **/
																				);
                    }
                    else if (st_op_orderbook.c_prd_typ == OPTIONPLUS)
                    {
                       i_returncode =    fn_cal_mrgn_sltp_op
                                         (
                                           c_ServiceName,
                                           st_op_orderbook.c_sltp_ord_rfrnc,
                                           l_fsh_ord_lmt_rt,
                                           l_cvr_ord_lmt_rt,
                                           &d_amt_to_be_blckd,
                                           &d_lss_amt_to_be_blckd,
                                           c_ref_rmrks,  /*** Ver 5.9 ***/
                                           &d_comp1_mrgn,/*** Ver 5.9 ***/
                                           &d_comp1_pl,  /*** Ver 5.9  ***/
                                           &d_xchng_amt, /*** Ver 5.9 ***/
                                           &d_prem_amt,  /*** Ver 5.9 ***/
                                           &d_spn_mrgn,  /*** Ver 5.9 ***/
                                           &d_expr_mrgn, /*** Ver 5.9  ***/
                                           'E',
                                           c_err_msg.arr																									/** VQC **/
                                         );
                    }

                 /************ Added Ver 2.6 Ends *********/

									if ( i_returncode != SUCC_BFR )
									{
											fn_errlog ( c_ServiceName, "S31480", LIBMSG, c_err_msg.arr );												/** VQC **/
											Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );															/** VQC **/
											fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );														/** VQC **/
											/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
											tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
											tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
									}
							 }
								/* Difference margin & loss */
								d_diff_amt = (double) d_amt_blkd - d_amt_to_be_blckd;
								d_diff_loss = (double) d_lss_amt_blkd - d_lss_amt_to_be_blckd;

								/*** if ( st_op_orderbook.c_prd_typ == OPTIONPLUS )   *** Ver 2.0 ***
								{	 *** if condition commented in Ver 2.5 ***/
									d_diff_amt  = (long) (long) d_diff_amt; 
									d_diff_loss = (long) (long) d_diff_loss; 
								/*** } Ver 2.5 ***/


								if(DEBUG_MSG_LVL_3)
								{
									fn_userlog(c_ServiceName,"l_temp_stp_lss_tgr = :%ld:", l_temp_stp_lss_tgr );  
				    	/** fn_userlog(c_ServiceName,"d_frm_diffrnc_mrgn = :%lf:", d_frm_diffrnc_mrgn );           *** Commented in VQC ***/  
									fn_userlog(c_ServiceName,"d_amt_blkd = :%lf:", d_amt_blkd);
									fn_userlog(c_ServiceName,"d_amt_to_be_blckd = :%lf:", d_amt_to_be_blckd);
									fn_userlog(c_ServiceName,"d_diff_amt = :%lf:", d_diff_amt);
									fn_userlog(c_ServiceName,"d_lss_amt_blkd = :%lf:", d_lss_amt_blkd);
									fn_userlog(c_ServiceName,"d_lss_amt_to_be_blckd = :%lf:", d_lss_amt_to_be_blckd);
									fn_userlog(c_ServiceName,"d_diff_loss = :%lf:", d_diff_loss);
								}
						
								/* Not releasing the profit */
								/* Block difference in the margin amount */
								strcpy( c_narration_id , ON_MODIFICATION_ACCEPTANCE);


								if( d_diff_amt != 0)
								{
									d_balance_amt = 0.0;

									if(DEBUG_MSG_LVL_3)
									{
										fn_userlog(c_ServiceName,"Block diff in margin amount");
									}
									i_returncode = fn_upd_spnlimits( 	c_ServiceName,
																										&st_pstn_actn_var,
																										ptr_st_err_msg,
																										c_narration_id,
																										DEBIT_TILL_LIMIT,  /*** WHEN limit to TILL limit ***/
																										d_diff_amt,
																										&d_balance_amt);

									if ( i_returncode != 0 )
									{
										fn_errlog ( c_ServiceName, "S31485", LIBMSG, c_err_msg.arr );															/** VQC **/
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																		/** VQC **/
										fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																	/** VQC **/
										/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
										tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
										tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
									}

									d_diff_amt = d_diff_amt - d_balance_amt ;
								}


								/*** Ver 5.5 started ***/
								if(st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS || st_op_orderbook.c_prd_typ == OPTIONPLUS)/** ver 5.9 option plus added**/
								{
									MEMSET(c_tmp_rmrks);
									strcpy ( c_tmp_rmrks, st_pstn_actn_var.c_ref_rmrks );
									sprintf(st_pstn_actn_var.c_ref_rmrks,"%s%s",c_ref_rmrks,c_tmp_rmrks);
								}
								/*** Ver 5.5 ends ***/

								if( d_lss_amt_to_be_blckd < 0)
								{

									if( d_lss_amt_blkd !=0)
									{
										i_returncode = fn_upd_spnlimits(	c_ServiceName,
																											&st_pstn_actn_var,
																											ptr_st_err_msg,
																											c_narration_id,
																											DEBIT_TILL_LIMIT, /*** WHEN limit to TILL limit ***/
																											d_lss_amt_blkd,
																											&d_balance_amt);


										if ( i_returncode != 0 )
										{
												fn_errlog ( c_ServiceName, "S31490", LIBMSG, c_err_msg.arr );														/** VQC **/
												Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																	/** VQC **/
												fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																/** VQC **/
												/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
												tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
												tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
									
										}

									}
									d_diff_loss= d_lss_amt_blkd ;
								}
								else if(d_diff_loss != 0)
								{
									d_balance_amt = 0.0;

									if(DEBUG_MSG_LVL_3)
									{
										fn_userlog(c_ServiceName,"Block diff in loss amount");
									}
									i_returncode = fn_upd_spnlimits(  c_ServiceName,
																										&st_pstn_actn_var,
																										ptr_st_err_msg,
																										c_narration_id,
																										DEBIT_TILL_LIMIT, /*** WHEN limit to TILL limit ***/
																										d_diff_loss,
																										&d_balance_amt);


									if ( i_returncode != 0 )
									{
											fn_errlog ( c_ServiceName, "S31495", LIBMSG, c_err_msg.arr );															/** VQC **/
											Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																		/** VQC **/
											fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																	/** VQC **/
											/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
											tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
											tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
									}

									d_diff_loss = d_diff_loss  - d_balance_amt ;
								}	
	
								if(DEBUG_MSG_LVL_3)
								{
								 fn_userlog(c_ServiceName,"vishnu d_amt_blkd :%lf:",d_amt_blkd);
								 fn_userlog(c_ServiceName,"vishnu d_diff_amt :%lf:",d_diff_amt);
								 fn_userlog(c_ServiceName,"vishnu d_lss_amt_blkd :%lf:",d_lss_amt_blkd);
								 fn_userlog(c_ServiceName,"vishnu d_diff_loss :%lf:",d_diff_loss);
								}

								if(st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS || st_op_orderbook.c_prd_typ == OPTIONPLUS)  /**** loop added in Ver 5.5 ***/ /*** ver 5.9 option plus added ***/
								{
									strcpy ( st_pstn_actn_var.c_ref_rmrks, c_tmp_rmrks);    
									MEMSET(c_tmp_rmrks);       
									
								 EXEC SQL
									UPDATE     FOD_FO_ORDR_DTLS
									SET        FOD_AMT_BLCKD     = :d_amt_blkd - :d_diff_amt,
														 FOD_LSS_AMT_BLCKD = :d_lss_amt_blkd - :d_diff_loss,
														 FOD_SLTP_MRGN = :d_comp1_mrgn,			
														 FOD_SLTP_PL   = :d_comp1_pl,				 
														 FOD_SLTP_SEBI_MRGN = :d_xchng_amt,
                             FOD_OPLUS_PREMIUM  = :d_prem_amt,  /*** Ver 5.9 ***/
                             FOD_SPAN_MRGN = :d_spn_mrgn,       /*** Ver 5.9 ***/
                             FOD_EXPR_MRGN = :d_expr_mrgn       /*** Ver 5.9 ***/  
									WHERE      FOD_ORDR_RFRNC    = :st_op_orderbook.c_sltp_ord_rfrnc;
								}
								else /*** Else condition added in Ver 5.5 ***/
								{
								EXEC SQL
								 UPDATE     FOD_FO_ORDR_DTLS
								 SET        FOD_AMT_BLCKD     = :d_amt_blkd - :d_diff_amt,
														FOD_LSS_AMT_BLCKD = :d_lss_amt_blkd - :d_diff_loss
								 WHERE      FOD_ORDR_RFRNC    = :st_op_orderbook.c_sltp_ord_rfrnc;
								}
								if(SQLCODE != 0)
								{
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																					/** VQC **/
									fn_errlog( c_ServiceName, "S31500", SQLMSG, c_err_msg.arr  );																			/** VQC **/
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																						/** VQC **/
									tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}
								
	
								 EXEC SQL
								 UPDATE     FOD_FO_ORDR_DTLS
								 SET        FOD_DIFF_AMT_BLCKD      =  0,
														FOD_DIFF_LSS_AMT_BLCKD  =  0 
								 WHERE      FOD_ORDR_RFRNC          = :st_ip_orderbook.c_ordr_rfrnc;

								if(SQLCODE != 0)
								{
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																					/** VQC **/
									fn_errlog( c_ServiceName, "S31505", SQLMSG, c_err_msg.arr  );																			/** VQC **/
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																						/** VQC **/
									tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}
							} /** Condition for Cover Ends ***/	
	 						break;

						case	ORS_MOD_ORD_RJCT:
							if(st_op_orderbook.c_fc_flg == 'C') /*Cover*/
							{
								/****************** Commented in Ver 2.6 *****************
								
								if (st_op_orderbook.c_prd_typ == OPTIONPLUS ) ***If condition added in Ver 2.5 ***
								{
									st_op_orderbook.d_amt_blkd = 0.0;
									st_op_orderbook.d_lss_amt_blkd = 0.0;

									EXEC SQL	
										 SELECT			FOD_AMT_BLCKD,
																FOD_LSS_AMT_BLCKD
										 INTO				:st_op_orderbook.d_amt_blkd,
																:st_op_orderbook.d_lss_amt_blkd
										 FROM				FOD_FO_ORDR_DTLS
										 WHERE			FOD_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc;

									if(SQLCODE != 0)
									{
										fn_errlog ( c_ServiceName, "S31510", SQLMSG, c_err_msg );
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );			
										fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
										tpfree((char *)ptr_fml_Obuf);
										tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
									}
									
									if(DEBUG_MSG_LVL_3)
									{
										fn_userlog(c_ServiceName,"Margin Amount of the fresh order :%lf:", st_op_orderbook.d_amt_blkd);
										fn_userlog(c_ServiceName,"Loss Amount of the fresh order :%lf:", st_op_orderbook.d_lss_amt_blkd);
										fn_userlog(c_ServiceName,"st_op_orderbook.d_diff_amt_blkd is :%lf:",st_op_orderbook.d_diff_amt_blkd);
										fn_userlog(c_ServiceName,"st_op_orderbook.d_diff_lss_amt_blkd is :%lf:",st_op_orderbook.d_diff_lss_amt_blkd);
									}

								*Release the diff margin amount blocked*
								strcpy( c_narration_id , ON_MODIFICATION_REJECTION);
								if(st_op_orderbook.d_diff_amt_blkd != 0)
								{	
									if(DEBUG_MSG_LVL_3)
									{
										fn_userlog(c_ServiceName,"Release or Block the diff margin amount blocked");
									}

									i_returncode = fn_upd_spnlimits( c_ServiceName,
																	&st_pstn_actn_var,
																	ptr_st_err_msg,
																	c_narration_id,
																	DEBIT_WITHOUT_LIMIT,
																	st_op_orderbook.d_diff_amt_blkd * -1,
																	&d_balance_amt);

									if ( i_returncode != 0 )
									{
										fn_errlog ( c_ServiceName, "S31515", LIBMSG, c_err_msg );		
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				
										fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );		
										tpfree((char *)ptr_fml_Obuf);
										tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
									}
								}

								*Release the diff loss amount blocked*
								strcpy( c_narration_id , ON_MODIFICATION_REJECTION);
								if(st_op_orderbook.d_diff_lss_amt_blkd != 0)
								{	
									if(DEBUG_MSG_LVL_3)
									{		
										fn_userlog(c_ServiceName,"Release the diff loss amount blocked");
									}
									i_returncode = fn_upd_spnlimits( c_ServiceName,
																		&st_pstn_actn_var,
																		ptr_st_err_msg,
																		c_narration_id,
																		DEBIT_WITHOUT_LIMIT,
																		st_op_orderbook.d_diff_lss_amt_blkd * -1,
																		&d_balance_amt);


									if ( i_returncode != 0 )
									{
										fn_errlog ( c_ServiceName, "S31520", LIBMSG, c_err_msg );	
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );			
										fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
										tpfree((char *)ptr_fml_Obuf);
										tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
									}
								}

								EXEC SQL	
								 UPDATE			FOD_FO_ORDR_DTLS
								 SET				FOD_AMT_BLCKD = :st_op_orderbook.d_amt_blkd + :st_op_orderbook.d_diff_amt_blkd,
														FOD_LSS_AMT_BLCKD = :st_op_orderbook.d_lss_amt_blkd + :st_op_orderbook.d_diff_lss_amt_blkd
								 WHERE			FOD_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc;

								if(SQLCODE != 0)
								{
										fn_errlog ( c_ServiceName, "S31525", SQLMSG, c_err_msg );		
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				
										fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg )	;		
										tpfree((char *)ptr_fml_Obuf);
										tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}

								EXEC SQL	
								 UPDATE			FOD_FO_ORDR_DTLS
								 SET				FOD_DIFF_AMT_BLCKD			= 0, 
														FOD_DIFF_LSS_AMT_BLCKD	= 0 
								 WHERE			FOD_ORDR_RFRNC					= :st_ip_orderbook.c_ordr_rfrnc;

								if(SQLCODE != 0)
								{
									fn_errlog ( c_ServiceName, "S31530", SQLMSG, ptr_st_err_msg->c_err_msg );
									fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );		
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
								}
							 }

							 *************** Commented in Ver 2.6 ********************/

							 /***  else if (st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS  ) ***If loop added in Ver 2.5 *** Commented in Ver 2.6 ****/  
							 if (st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS || st_op_orderbook.c_prd_typ == OPTIONPLUS )/**** optionplus added in Ver 2.6 ***/
							 {
								 	if(DEBUG_MSG_LVL_3)
									{ 	
										fn_userlog(c_ServiceName," Inside ORS_MOD_ORD_RJCT for SLTP_FUTUREPLUS order...");
									} 
									st_op_orderbook.d_amt_blkd = 0.0;
									st_op_orderbook.d_lss_amt_blkd = 0.0;
									l_temp_stp_lss_tgr = st_op_xchngbk.l_stp_lss_tgr ; /*** Modified SLTP stored in temp ***/
						
									EXEC SQL
										SELECT  FOD_AMT_BLCKD,
														FOD_LSS_AMT_BLCKD ,
														FOD_ORDR_FLW ,
														FOD_LMT_RT			
										INTO    :st_op_orderbook.d_amt_blkd,
														:st_op_orderbook.d_lss_amt_blkd ,
														:c_ord_flw ,
														:l_fsh_ord_lmt_rt	
										FROM    FOD_FO_ORDR_DTLS
										WHERE   FOD_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc;

									if(SQLCODE != 0)
									{
										fn_errlog ( c_ServiceName, "S31535", SQLMSG, c_err_msg.arr );																			/** VQC **/					
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																						/** VQC **/
										fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																					/** VQC **/
										/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
										tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
										tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
									}

				
									d_amt_blkd = st_op_orderbook.d_amt_blkd ;
									d_lss_amt_blkd = st_op_orderbook.d_lss_amt_blkd ;

									if(DEBUG_MSG_LVL_3)
									{
										fn_userlog(c_ServiceName,"Margin Amount of the fresh order :%lf:", st_op_orderbook.d_amt_blkd);
										fn_userlog(c_ServiceName,"Loss Amount of the fresh order :%lf:", st_op_orderbook.d_lss_amt_blkd);
										fn_userlog(c_ServiceName,"st_op_orderbook.d_diff_amt_blkd is :%lf:",st_op_orderbook.d_diff_amt_blkd);
										fn_userlog(c_ServiceName,"st_op_orderbook.d_diff_lss_amt_blkd is :%lf:",st_op_orderbook.d_diff_lss_amt_blkd);
										fn_userlog(c_ServiceName,"c_ord_flw is :%c:",c_ord_flw);
									}
									
										EXEC SQL
											SELECT  FOD_LMT_RT
											INTO    :l_cvr_ord_lmt_rt
											FROM    FOD_FO_ORDR_DTLS
											WHERE   FOD_ORDR_RFRNC = :st_op_orderbook.c_ordr_rfrnc;

										if(SQLCODE != 0)
										{
	                      /*********** Commented in Ver 2.8 ********
											fn_errlog ( c_ServiceName, "S31540", SQLMSG, ptr_st_err_msg->c_err_msg);
											fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg);		
											tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); **********/								
											/********** Ver 2.8 Starts ***********/
                      fn_errlog ( c_ServiceName, "S31545", SQLMSG,c_err_msg.arr);																	/** VQC **/	
                      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																			/** VQC **/
                      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																		/** VQC **/
											tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
                      /***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
                      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                     /*********** Ver 2.8 Ends ******************/
										}

										if(DEBUG_MSG_LVL_3)
										{
											fn_userlog(c_ServiceName,"Cover Order Limit Rate :%ld:", l_cvr_ord_lmt_rt);
										}

										/* Calculate Margin amount to be blocked */

										if (st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS)		/***** Ver 2.6 ****/
										{

	 											i_returncode =    fn_cal_mrgn_sltp 
																					(
																						c_ServiceName, 
																						st_op_orderbook.c_sltp_ord_rfrnc,
																						l_fsh_ord_lmt_rt,				
																						l_cvr_ord_lmt_rt,
																						&d_amt_to_be_blckd,
																						&d_lss_amt_to_be_blckd,
																						c_ref_rmrks,  /*** Ver 5.5 ***/
																						&d_comp1_mrgn,/*** Ver 5.5 ***/
																						&d_comp1_pl,  /*** Ver 5.5 ***/
																						&d_xchng_amt, /*** Ver 5.5 ***/
																						c_err_msg.arr																												 /** VQC **/
																					);
										}
										else if (st_op_orderbook.c_prd_typ == OPTIONPLUS)
										{
											 i_returncode =    fn_cal_mrgn_sltp_op (  c_ServiceName,
                                            									  st_op_orderbook.c_sltp_ord_rfrnc,
                                            										l_fsh_ord_lmt_rt,
                                            										l_cvr_ord_lmt_rt,
                                            										&d_amt_to_be_blckd,
                                            										&d_lss_amt_to_be_blckd,
                                                                c_ref_rmrks,  /*** Ver 5.9 ***/
                                                                &d_comp1_mrgn,/*** Ver 5.9 ***/
                                                                &d_comp1_pl,  /*** Ver 5.9  ***/
                                                                &d_xchng_amt, /*** Ver 5.9 ***/
                                                                &d_prem_amt,  /*** Ver 5.9 ***/
                                                                &d_spn_mrgn,  /*** Ver 5.9 ***/
                                                                &d_expr_mrgn, /*** Ver 5.9  ***/
																																'E',
                                            										c_err_msg.arr																			/** VQC **/
                                         										 );
										}

																															/************ Added Ver 2.6 Ends *********/

										if ( i_returncode != SUCC_BFR )
										{
												fn_errlog ( c_ServiceName, "S31550", LIBMSG, c_err_msg.arr );																				/** VQC **/
												Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																							/** VQC **/
												fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																						/** VQC **/
												tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
												/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
												tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
										}
								 
									/* Difference margin & loss */
									d_diff_amt = (double) d_amt_blkd - d_amt_to_be_blckd;
									d_diff_loss = (double) d_lss_amt_blkd - d_lss_amt_to_be_blckd;

									d_diff_amt  = (long) (long) d_diff_amt; 
									d_diff_loss = (long) (long) d_diff_loss; 


									if(DEBUG_MSG_LVL_3)
									{
										fn_userlog(c_ServiceName,"l_temp_stp_lss_tgr = :%ld:", l_temp_stp_lss_tgr );  
				    	/**		fn_userlog(c_ServiceName,"d_frm_diffrnc_mrgn = :%lf:", d_frm_diffrnc_mrgn );             *** Commented in VQC ***/
										fn_userlog(c_ServiceName,"d_amt_blkd = :%lf:", d_amt_blkd);
										fn_userlog(c_ServiceName,"d_amt_to_be_blckd = :%lf:", d_amt_to_be_blckd);
										fn_userlog(c_ServiceName,"d_diff_amt = :%lf:", d_diff_amt);
										fn_userlog(c_ServiceName,"d_lss_amt_blkd = :%lf:", d_lss_amt_blkd);
										fn_userlog(c_ServiceName,"d_lss_amt_to_be_blckd = :%lf:", d_lss_amt_to_be_blckd);
										fn_userlog(c_ServiceName,"d_diff_loss = :%lf:", d_diff_loss);
									}
							
									/* Block difference in the margin amount */
									strcpy( c_narration_id , ON_MODIFICATION_ACCEPTANCE);

									if( d_diff_amt != 0)
									{
										d_balance_amt = 0.0;

										if(DEBUG_MSG_LVL_3)
										{
											fn_userlog(c_ServiceName,"Block diff in margin amount");
										}
										i_returncode = fn_upd_spnlimits( 	c_ServiceName,
																											&st_pstn_actn_var,
																											ptr_st_err_msg,
																											c_narration_id,
																											DEBIT_TILL_LIMIT, /*** WHEN limit to TILL limit ***/
																											d_diff_amt,
																											&d_balance_amt);

										if ( i_returncode != 0 )
										{
											fn_errlog ( c_ServiceName, "S31555", LIBMSG, c_err_msg.arr );																	/** VQC **/
											Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																				/** VQC **/
											fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																			/** VQC **/
											/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
											tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
											tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
										}

										d_diff_amt = d_diff_amt - d_balance_amt ;
									}

									/*** Ver 5.5 started ***/
									if (st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS  || st_op_orderbook.c_prd_typ == OPTIONPLUS)  /*** ver 5.9 option plus added***/	
									{
										MEMSET(c_tmp_rmrks);
										strcpy ( c_tmp_rmrks, st_pstn_actn_var.c_ref_rmrks );
										sprintf(st_pstn_actn_var.c_ref_rmrks,"%s%s",c_ref_rmrks,c_tmp_rmrks);
									}
									/*** Ver 5.5 ends ***/
		
									if( d_lss_amt_to_be_blckd < 0)
									{

										if( d_lss_amt_blkd !=0)
										{
											i_returncode = fn_upd_spnlimits(	c_ServiceName,
																												&st_pstn_actn_var,
																												ptr_st_err_msg,
																												c_narration_id,
																												DEBIT_TILL_LIMIT, /*** WHEN limit to TILL limit ***/
																												d_lss_amt_blkd,
																												&d_balance_amt);


											if ( i_returncode != 0 )
											{
													fn_errlog ( c_ServiceName, "S31560", LIBMSG, c_err_msg.arr );											/** VQC **/
													Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );														/** VQC **/
													fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );													/** VQC **/
													/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
													tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
													tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
										
											}

										}
										d_diff_loss= d_lss_amt_blkd ;
									}
									else if(d_diff_loss != 0)
									{
										d_balance_amt = 0.0;

										if(DEBUG_MSG_LVL_3)
										{
											fn_userlog(c_ServiceName,"Block diff in loss amount");
										}
										i_returncode = fn_upd_spnlimits(  c_ServiceName,
																											&st_pstn_actn_var,
																											ptr_st_err_msg,
																											c_narration_id,
																											DEBIT_TILL_LIMIT, /*** WHEN limit to TILL limit ***/
																											d_diff_loss,
																											&d_balance_amt);


										if ( i_returncode != 0 )
										{
												fn_errlog ( c_ServiceName, "S31565", LIBMSG, c_err_msg.arr );																/** VQC **/
												Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																			/** VQC **/
												fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																		/** VQC **/
												/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
												tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
												tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
										}

										d_diff_loss = d_diff_loss  - d_balance_amt ;
									}	
		
									if(DEBUG_MSG_LVL_3)
									{
									 fn_userlog(c_ServiceName,"vishnu d_amt_blkd :%lf:",d_amt_blkd);
									 fn_userlog(c_ServiceName,"vishnu d_diff_amt :%lf:",d_diff_amt);
									 fn_userlog(c_ServiceName,"vishnu d_lss_amt_blkd :%lf:",d_lss_amt_blkd);
									 fn_userlog(c_ServiceName,"vishnu d_diff_loss :%lf:",d_diff_loss);
									}

									if (st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS || st_op_orderbook.c_prd_typ == OPTIONPLUS)	 /**** loop added in Ver 5.5 ***/ /*** ver 5.9 option plus added ***/
									{
										strcpy ( st_pstn_actn_var.c_ref_rmrks, c_tmp_rmrks);    
										MEMSET(c_tmp_rmrks);      
										
									 EXEC SQL
									 UPDATE     FOD_FO_ORDR_DTLS
									 SET        FOD_AMT_BLCKD     = :d_amt_blkd - :d_diff_amt,
															FOD_LSS_AMT_BLCKD = :d_lss_amt_blkd - :d_diff_loss,
															FOD_SLTP_MRGN = :d_comp1_mrgn,			
															FOD_SLTP_PL   = :d_comp1_pl,				 
															FOD_SLTP_SEBI_MRGN = :d_xchng_amt,
                              FOD_OPLUS_PREMIUM  = :d_prem_amt,  /*** Ver 5.9 ***/
                              FOD_SPAN_MRGN = :d_spn_mrgn,       /*** Ver 5.9 ***/
                              FOD_EXPR_MRGN = :d_expr_mrgn       /*** Ver 5.9 ***/  
									 WHERE      FOD_ORDR_RFRNC    = :st_op_orderbook.c_sltp_ord_rfrnc;
									}
									else  /*** Else condition added in Ver 5.5 ***/
								  {
									EXEC SQL
									 UPDATE     FOD_FO_ORDR_DTLS
									 SET        FOD_AMT_BLCKD     = :d_amt_blkd - :d_diff_amt,
															FOD_LSS_AMT_BLCKD = :d_lss_amt_blkd - :d_diff_loss
									 WHERE      FOD_ORDR_RFRNC    = :st_op_orderbook.c_sltp_ord_rfrnc;
									}
									if(SQLCODE != 0)
									{
										fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																		/** VQC **/
										fn_errlog( c_ServiceName, "S31570", SQLMSG, c_err_msg.arr  );																/** VQC **/
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																			/** VQC **/
										tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
										tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
									}
							 }
							}
							break;

						case	ORS_CAN_ORD_ACPT:
						case  ORS_IOC_CAN_ACPT: /*** Ver 2.2 ***/


             /****** ver 6.4 starts **/
					l_pnd_ord= -1;
					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"st_ip_orderbook.c_ordr_rfrnc:%s:st_op_orderbook.c_sltp_ord_rfrnc:%s:",st_ip_orderbook.c_ordr_rfrnc,st_op_orderbook.c_sltp_ord_rfrnc);
					}
          EXEC SQL
          select count(0)
          INTO :l_pnd_ord
          from FOD_FO_ORDR_DTLS
          where
          FOD_ORDR_STTS in ('R','Q','O','P')
					AND DECODE(FOD_FC_FLAG,'F',FOD_ORDR_RFRNC,FOD_SLTP_ORDR_RFRNC ) =
					     DECODE(:st_op_orderbook.c_fc_flg,'F',:st_ip_orderbook.c_ordr_rfrnc,:st_op_orderbook.c_sltp_ord_rfrnc);
				
					 if( SQLCODE != 0 )
          {
            fn_errlog ( c_ServiceName, "S31575", SQLMSG, ptr_st_err_msg->c_err_msg );
            fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
          }

          if(DEBUG_MSG_LVL_3)
          {
						fn_userlog(c_ServiceName,"l_pnd_ord:%ld",l_pnd_ord);
          }
         /****** ver 6.4 ends ***********/

						/*** start Ver 2.2 ***/
						/* Calculate order status */
						c_ordr_stts = '\0';
						EXEC SQL
							SELECT  distinct decode(FOD_ORDR_STTS,'J','C','D','C',FOD_ORDR_STTS)
							INTO    :c_ordr_stts
							FROM    FOD_FO_ORDR_DTLS
							WHERE		FOD_ORDR_RFRNC in ( :st_ip_orderbook.c_ordr_rfrnc, :st_op_orderbook.c_sltp_ord_rfrnc);

						if( SQLCODE != 0 && SQLCODE != TOO_MANY_ROWS_FETCHED)
						{
							fn_errlog ( c_ServiceName, "S31580", SQLMSG, c_err_msg.arr );																			/** VQC **/
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																						/** VQC **/
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																					/** VQC **/
							/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
							tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
						fn_userlog(c_ServiceName,"c_ordr_stts :%c:",c_ordr_stts);

						if (SQLCODE == TOO_MANY_ROWS_FETCHED)
						{
							c_ordr_stts = '\0';
						}

						/* Calculate open quantity */
						EXEC SQL
							SELECT  NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FTD_EXCTD_QTY, 'T', -1 * FTD_EXCTD_QTY, FTD_EXCTD_QTY ) ), 0 ) /*** T handling in Ver 6.4 ***/
							INTO    :l_open_qty
							FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
							WHERE   FOD_CLM_MTCH_ACCNT    = :st_op_orderbook.c_cln_mtch_accnt
							AND     FOD_TRD_DT            = :st_op_orderbook.c_trd_dt
							AND     FOD_PRDCT_TYP         = :st_op_orderbook.c_prd_typ
							AND     FTD_ORDR_RFRNC        = FOD_ORDR_RFRNC
							AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = decode(:st_op_orderbook.c_fc_flg,'F',:st_ip_orderbook.c_ordr_rfrnc,:st_op_orderbook.c_sltp_ord_rfrnc); 

						if( SQLCODE != 0 )
						{
							fn_errlog ( c_ServiceName, "S31585", SQLMSG, c_err_msg.arr );																					/** VQC **/
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																								/** VQC **/
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																							/** VQC **/
							/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
							tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
					fn_userlog(c_ServiceName,"c_ordr_stts :%c: and l_open_qty :%ld:",c_ordr_stts,l_open_qty);

  				if(DEBUG_MSG_LVL_3)  /*** Ver 3.1 ***/
  				{
						fn_userlog(c_ServiceName,"l_open_qty is :%ld:", l_open_qty); 
					}

						if ( (c_ordr_stts == 'C' && l_open_qty == 0) ||  (l_pnd_ord == 0 && l_open_qty == 0) )/*** ver 6.4 l_pnd_ord adaded ***/ 
						{
							fn_userlog(c_ServiceName,"Inside ckeck pt 1");
													
									/*** Release the margin and loss amount blocked ***/
							 	EXEC SQL
									SELECT
												NVL(FOD_AMT_BLCKD,0),
												NVL(FOD_LSS_AMT_BLCKD,0)
									INTO  :d_amt_blkd,
												:d_lss_amt_blkd
									FROM  FOD_FO_ORDR_DTLS
									WHERE FOD_ORDR_RFRNC = decode(:st_op_orderbook.c_fc_flg,'C',:st_op_orderbook.c_sltp_ord_rfrnc, 'T', :st_op_orderbook.c_sltp_ord_rfrnc,:st_ip_orderbook.c_ordr_rfrnc); /*** ver 6.4 ***/


									if( SQLCODE != 0 )
									{
										fn_errlog ( c_ServiceName, "S31590", SQLMSG, c_err_msg.arr );																		/** VQC **/
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																					/** VQC **/
										fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																				/** VQC **/
										/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
										tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
										tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
									}
									
									strcpy( c_narration_id , ON_CANCELLATION_ACCEPTANCE);
									
									if(d_amt_blkd > 0)
									{
										d_balance_amt  = 0.0;

										if(DEBUG_MSG_LVL_3)
										{
											fn_userlog(c_ServiceName,"Release old margin amount blocked");
										}
										fn_userlog(c_ServiceName,"Updating limits fn_upd_spnlimits......");								
										i_returncode = fn_upd_spnlimits(	c_ServiceName,
																											&st_pstn_actn_var,
																											ptr_st_err_msg,
																											c_narration_id,
																											DEBIT_WITHOUT_LIMIT,
																											d_amt_blkd,
																											&d_balance_amt);

										if ( i_returncode != 0 )
										{
											/* fn_errlog ( c_ServiceName, "S31595", SQLMSG, c_err_msg.arr );	** VQC * Coomented in Ver 5.7**/
											fn_errlog ( c_ServiceName, "S31600", LIBMSG, c_err_msg.arr );			/*** Ver 5.7 ***/
											Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																					/** VQC **/
											fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																				/** VQC **/
											/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
											tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
											tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
										}
									}
													
									if(d_lss_amt_blkd > 0)
									{
										d_balance_amt  = 0.0;

										if(DEBUG_MSG_LVL_3)
										{
											fn_userlog(c_ServiceName,"Release old loss amount");
										}
										 fn_userlog(c_ServiceName,"Updating limits fn_upd_spnlimits when d_lss_amt_blkd > 0......");

										i_returncode = fn_upd_spnlimits(	c_ServiceName,
																											&st_pstn_actn_var,
																											ptr_st_err_msg,
																											c_narration_id,
																											DEBIT_WITHOUT_LIMIT,
																											d_lss_amt_blkd,
																											&d_balance_amt);


										if ( i_returncode != 0 )
										{
											/* fn_errlog ( c_ServiceName, "S31605", SQLMSG, c_err_msg.arr );	** VQC * Coomented in Ver 5.7**/
											fn_errlog ( c_ServiceName, "S31610", LIBMSG, c_err_msg.arr );			/*** Ver 5.7 ***/
											Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																				/** VQC **/
											fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																			/** VQC **/
											/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
											tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
											tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
										}
									}

									if( DEBUG_MSG_LVL_3 )
									{
										fn_userlog(c_ServiceName,"Update margin & loss released");
									}

					 				EXEC SQL
											 UPDATE FOD_FO_ORDR_DTLS
											 SET    FOD_AMT_BLCKD			= 0,
															FOD_LSS_AMT_BLCKD = 0,
														  FOD_SLTP_MRGN			= 0,				/*** Ver 5.5 ***/	
														  FOD_SLTP_PL				= 0,				/*** Ver 5.5 ***/	 
														  FOD_SLTP_SEBI_MRGN= 0,					/*** Ver 5.5 ***/		
                              FOD_OPLUS_PREMIUM  = 0, /*** Ver 5.9 ***/
                              FOD_SPAN_MRGN = 0,       /*** Ver 5.9 ***/
                              FOD_EXPR_MRGN = 0       /*** Ver 5.9 ***/
											 WHERE  FOD_ORDR_RFRNC		= decode(:st_op_orderbook.c_fc_flg, 'C', :st_op_orderbook.c_sltp_ord_rfrnc, 'T', :st_op_orderbook.c_sltp_ord_rfrnc,:st_ip_orderbook.c_ordr_rfrnc ); /*** ver 6.4 ***/
									
									if ( SQLCODE != 0 )
									{
										fn_errlog ( c_ServiceName, "S31615", SQLMSG, c_err_msg.arr );																		/** VQC **/
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																					/** VQC **/
										fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																				/** VQC **/
										/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
										tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
										tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
									}
							}
							/*** End Ver 2.2 ***/

							/*** Commented in Ver 2.2 ***
							if(st_op_orderbook.c_fc_flg == 'F') *Fresh*
							{
								st_op_orderbook.d_amt_blkd = 0.0;
								st_op_orderbook.d_lss_amt_blkd = 0.0;
								c_ordr_stts = '\0';

								EXEC SQL	
									 SELECT			NVL(FOD_AMT_BLCKD,0),
															NVL(FOD_LSS_AMT_BLCKD,0),
															FOD_ORDR_STTS,
															FOD_ORDR_FLW
									 INTO				:st_op_orderbook.d_amt_blkd,
															:st_op_orderbook.d_lss_amt_blkd,
															:c_ordr_stts,
															:c_ordr_flw
									 FROM				FOD_FO_ORDR_DTLS
									 WHERE			FOD_ORDR_RFRNC = :st_ip_orderbook.c_ordr_rfrnc;

								if(SQLCODE != 0)
								{
									fn_errlog ( c_ServiceName, "S31620", SQLMSG, c_err_msg );				
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );						
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );				
									tpfree((char *)ptr_fml_Obuf);
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}
								
								if(DEBUG_MSG_LVL_3)
								{
									fn_userlog(c_ServiceName,"Margin Amount of the fresh order :%lf:", st_op_orderbook.d_amt_blkd);
									fn_userlog(c_ServiceName,"Loss Amount of the fresh order :%lf:", st_op_orderbook.d_lss_amt_blkd);
								}

								*Get the current margin percentage from the database *
								EXEC SQL
								 SELECT     FMM_SLTP_PRCNT
								 INTO       :d_fmm_sltp_prcnt
								 FROM       FMM_FO_MRGN_MSTR
								 WHERE      FMM_XCHNG_CD = :st_op_orderbook.c_xchng_cd
								 *** AND        FMM_PRDCT_TYP ='F' Commented In Ver 2.0 ***
								 AND        FMM_PRDCT_TYP = DECODE(:st_op_orderbook.c_prd_typ ,'U','F','I','O',:st_op_orderbook.c_prd_typ)    																																																		*** Ver 2.0 ***
								 AND        FMM_UNDRLYNG = :st_op_orderbook.c_undrlyng
								 AND        FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
																								 FROM    FCB_FO_CLN_BSKT_ALLTD
																								 WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
																																			 FROM    CLM_CLNT_MSTR
																																			 WHERE   CLM_MTCH_ACCNT =:st_op_orderbook.c_cln_mtch_accnt));

								if(SQLCODE != 0)
								{
									fn_errlog ( c_ServiceName, "S31625", SQLMSG, c_err_msg );	
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );			
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
									tpfree((char *)ptr_fml_Obuf);
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}

								** Getting the total executed value and quantity of FRESH order. **
								 EXEC SQL
									SELECT  NVL(SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),0),
													NVL(SUM(FTD_EXCTD_QTY),0)
									INTO    :d_frsh_exe_val,
													:li_tot_exec_qty
									FROM    FTD_FO_TRD_DTLS
									WHERE   FTD_ORDR_RFRNC = :st_ip_orderbook.c_ordr_rfrnc;

								if( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
								{
									fn_errlog ( c_ServiceName, "S31630", SQLMSG, c_err_msg );		
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );		
									tpfree((char *)ptr_fml_Obuf);
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}
								else if (SQLCODE == NO_DATA_FOUND)
								{
									d_frsh_exe_val = 0;
									li_tot_exec_qty = 0;
								}

								** Calculating the Weight Average Price for the executed quantity of FRESH Order. **
								d_wgt_avrg_price = 0;
							
								if (li_tot_exec_qty != 0 )
								{
									d_wgt_avrg_price = (double) (d_frsh_exe_val / li_tot_exec_qty);
								}

								li_lmt_rt = 0;

								EXEC SQL	
								 SELECT			NVL(FOD_LMT_RT,0),
														NVL(FOD_STP_LSS_TGR,0)   *** Ver 2.0 ***
								 INTO				:li_lmt_rt,
														:l_temp_stp_lss_tgr      *** Ver 2.0 ***
								 FROM				FOD_FO_ORDR_DTLS
								 WHERE			FOD_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc; 

								if(SQLCODE != 0)
								{
									fn_errlog ( c_ServiceName, "S31635", SQLMSG, c_err_msg );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									tpfree((char *)ptr_fml_Obuf);
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}
								
								* Calculate open quantity *
								EXEC SQL
									SELECT  NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FTD_EXCTD_QTY,
																																	 FTD_EXCTD_QTY ) ), 0 ),
													NVL( SUM( DECODE( FOD_FC_FLAG, 'F', FTD_EXCTD_QTY, 0 ) ), 0 )
									INTO    :l_open_qty,
													:l_frsh_xtd_qty
									FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
									WHERE   FOD_CLM_MTCH_ACCNT    = :st_op_orderbook.c_cln_mtch_accnt
									AND     FOD_TRD_DT            = :st_op_orderbook.c_trd_dt
									AND     FOD_PRDCT_TYP         = :st_op_orderbook.c_prd_typ
									AND     FTD_ORDR_RFRNC        = FOD_ORDR_RFRNC
									AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :st_ip_orderbook.c_ordr_rfrnc;

								if( SQLCODE != 0 )
								{
									fn_errlog ( c_ServiceName, "S31640", SQLMSG, c_err_msg );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );			
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
									tpfree((char *)ptr_fml_Obuf);
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}

								*** Ver 2.0 Starts ***
								**** Getting the min margin difference ****
								EXEC SQL
									SELECT nvl(FRM_DIFFRNC_MRGN,0)
									INTO   :d_frm_diffrnc_mrgn
									FROM   FRM_FO_RANGE_MSTR
									WHERE  FRM_XCHNG_CD  = :st_ip_orderbook.c_xchng_cd
									AND    FRM_UNDRLYNG  = :st_ip_orderbook.c_undrlyng
									AND    FRM_ORDR_FLOW = :c_ordr_flw
								  AND    FRM_FROM_RANGE <= :l_temp_stp_lss_tgr
                  AND    :l_temp_stp_lss_tgr   < FRM_TO_RANGE;    *** Modified SLTP price used ***

								if ( SQLCODE  !=  0  && SQLCODE != NO_DATA_FOUND)
								{
									fn_errlog( c_ServiceName, "S31645",SQLMSG,c_err_msg);			
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );		
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );		
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}

								*** Ver 2.0 Ends ***
								* Calculate Margin amount to be blocked *
								d_amt_to_be_blckd = ((double)(l_open_qty * d_wgt_avrg_price) * d_fmm_sltp_prcnt / 100.0);

								* Calculate Loss amount to be blocked *
								if ( c_ordr_flw == BUY && st_op_orderbook.c_prd_typ == OPTIONPLUS )  *** Ver 2.0 ***
								{
									if( d_frm_diffrnc_mrgn < 100 )
       						{
										d_lss_amt_to_be_blckd = (double) (l_open_qty * ( li_lmt_rt - d_wgt_avrg_price) );
									}
       						else if ( d_frm_diffrnc_mrgn == 100 )
        					{
										d_lss_amt_to_be_blckd = (double) (l_open_qty *  d_wgt_avrg_price ) ;
									}
								}
								else if ( c_ordr_flw == BUY && st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS ) * Ver 2.0 prdct cnd add ***
								{
									d_lss_amt_to_be_blckd = (double) (l_open_qty * ( li_lmt_rt - d_wgt_avrg_price) );
								} 
								else if ( c_ordr_flw == SELL )
								{
									d_lss_amt_to_be_blckd = (double) (l_open_qty * (d_wgt_avrg_price - li_lmt_rt) );  
								}

								* Difference margin & loss *
								d_diff_amt  = st_op_orderbook.d_amt_blkd - d_amt_to_be_blckd;
								d_diff_loss = st_op_orderbook.d_lss_amt_blkd + d_lss_amt_to_be_blckd;
								
								if ( st_op_orderbook.c_prd_typ == OPTIONPLUS )  *** Ver 2.0 ***
								{	
									d_diff_amt  = (long) (long) d_diff_amt ;   
									d_diff_loss = (long) (long) d_diff_loss ; 
								}
	

								if(DEBUG_MSG_LVL_3)
								{
									fn_userlog(c_ServiceName,"Cover li_lmt_rt :%ld",li_lmt_rt);
									fn_userlog(c_ServiceName,"Fresh l_open_qty qty = :%ld",l_open_qty);	
									fn_userlog(c_ServiceName,"d_wgt_avrg_price = :%lf:",d_wgt_avrg_price);
									fn_userlog(c_ServiceName,"st_op_orderbook.d_amt_blkd = :%lf:", st_op_orderbook.d_amt_blkd);
									fn_userlog(c_ServiceName,"st_op_orderbook.d_lss_amt_blkd = :%lf:", st_op_orderbook.d_lss_amt_blkd);
									fn_userlog(c_ServiceName,"d_amt_to_be_blckd = :%lf:", d_amt_to_be_blckd);
									fn_userlog(c_ServiceName,"d_lss_amt_to_be_blckd = :%lf:", d_lss_amt_to_be_blckd);
									fn_userlog(c_ServiceName,"d_diff_amt = :%lf:",d_diff_amt);
									fn_userlog(c_ServiceName,"d_diff_loss = :%lf:",d_diff_loss);
								}

								* Block Release the margin amount *
								strcpy( c_narration_id , ON_CANCELLATION_ACCEPTANCE);
								if(d_diff_amt != 0)
								{
										d_balance_amt  = 0.0;

										if(DEBUG_MSG_LVL_3)
										{
											fn_userlog(c_ServiceName,"Block the margin amount");
										}

										i_returncode = fn_upd_spnlimits( c_ServiceName,
																											&st_pstn_actn_var,
																											ptr_st_err_msg,
																											c_narration_id,
																											DEBIT_TILL_LIMIT,
																											d_diff_amt,
																											&d_balance_amt);


										if ( i_returncode != 0 )
										{
											fn_errlog ( c_ServiceName, "S31650", LIBMSG, c_err_msg );
											Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );			
											fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
											tpfree((char *)ptr_fml_Obuf);
											tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
										}

										d_amt_to_be_blckd = d_amt_to_be_blckd + d_balance_amt ;
									}

								* Block Release the loss amount *
								strcpy( c_narration_id , ON_CANCELLATION_ACCEPTANCE);
									
								if( d_lss_amt_to_be_blckd <= 0 )
								{
									if(d_diff_loss != 0)
									{
										d_balance_amt  = 0.0;

										if(DEBUG_MSG_LVL_3)
										{
											fn_userlog(c_ServiceName,"Block the loss amount");
										}

										i_returncode = fn_upd_spnlimits( c_ServiceName,
																										&st_pstn_actn_var,
																										ptr_st_err_msg,
																										c_narration_id,
																										DEBIT_TILL_LIMIT,
																										d_diff_loss,
																										&d_balance_amt);


										if ( i_returncode != 0 )
										{
											fn_errlog ( c_ServiceName, "S31655", LIBMSG, c_err_msg );	
											Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
											fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
											tpfree((char *)ptr_fml_Obuf);
											tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
										}

										 d_lss_amt_to_be_blckd = d_lss_amt_to_be_blckd - d_balance_amt ;
									}
								}
								else if(d_lss_amt_to_be_blckd > 0)
								{
									if(st_op_orderbook.d_lss_amt_blkd != 0)
									{
										d_balance_amt  = 0.0;

										if(DEBUG_MSG_LVL_3)
										{
											fn_userlog(c_ServiceName,"Release old loss amount in case or profit");
										}
									
										i_returncode = fn_upd_spnlimits( c_ServiceName,
																									&st_pstn_actn_var,
																									ptr_st_err_msg,
																									c_narration_id,
																									DEBIT_TILL_LIMIT,
																									st_op_orderbook.d_lss_amt_blkd,
																									&d_balance_amt);


										if ( i_returncode != 0 )
										{
											fn_errlog ( c_ServiceName, "S31660", LIBMSG, c_err_msg );
											Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
											fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
											tpfree((char *)ptr_fml_Obuf);
											tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
										}
									}
									 d_lss_amt_to_be_blckd = 0;
								}

								EXEC SQL
									 UPDATE     FOD_FO_ORDR_DTLS
									 SET        FOD_AMT_BLCKD = :d_amt_to_be_blckd,
															FOD_LSS_AMT_BLCKD = abs(:d_lss_amt_to_be_blckd) 
									 WHERE      FOD_ORDR_RFRNC = :st_ip_orderbook.c_ordr_rfrnc;

									if(SQLCODE != 0)
									{
										fn_errlog ( c_ServiceName, "S31665", SQLMSG, c_err_msg)	;
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );	
										fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
										tpfree((char *)ptr_fml_Obuf);
										tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
									}
							}
							*** Commented in Ver 2.2 ***/
						 
						 if ( st_ip_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_ACPT  && strcmp(c_sys_msg,"X") != 0 ) /*** Ver 2.2 ***/ /*** Ver 6.4 skip user event for sqroff at mkt ***/
						{
							if(st_op_orderbook.c_fc_flg == 'C' || st_op_orderbook.c_fc_flg == 'F' || st_op_orderbook.c_fc_flg == 'E' || st_op_orderbook.c_fc_flg == 'T') /*Cover*/ /*** Fresh flag added in Ver 2.2 ***/ /*** T handled in Ver 6.4 ***/
							{
								/***  Ver 1.8 starts ...Commit cancellation acceptance...and place squareoff order in another transaction ***/
								if ( fn_committran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg ) == -1 )
								{
									 fn_errlog ( c_ServiceName, "S31670", LIBMSG, c_err_msg.arr );																			/** VQC **/
									 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																							/** VQC **/
									 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																						/** VQC **/
									 /***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
									 tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
									 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}

								i_commit_flg = 1;
  						if(DEBUG_MSG_LVL_0)		/*** Ver 3.1 ***/
  						{
								fn_userlog(c_ServiceName,"Transaction commited...i_commit_flg = :%d:",i_commit_flg);
							}
								/*** Ver 1.8 ends ***/


								EXEC SQL	
									 SELECT			FOD_ORDR_STTS,NVL(FOD_SOURCE_FLG,'O')	/** Ver 6.9 Added source flag */
									 INTO				:c_ordr_stts,:c_source_flg			/** Ver 6.9 Added source flag */
									 FROM				FOD_FO_ORDR_DTLS
									 WHERE			FOD_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc;

								if(SQLCODE != 0)
								{
									fn_errlog ( c_ServiceName, "S31675", SQLMSG, c_err_msg.arr );																							/** VQC **/
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																										/** VQC **/
									/*** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	 *** Commented in Ver 1.8 ***/
									/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
									tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}
							
							/* Calculate open quantity */
							EXEC SQL
								SELECT  NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FTD_EXCTD_QTY, 'T', -1 * FTD_EXCTD_QTY,
																																 FTD_EXCTD_QTY ) ), 0 ),
												NVL( SUM( DECODE( FOD_FC_FLAG, 'F', FTD_EXCTD_QTY, 0 ) ), 0 )
								INTO    :l_open_qty,
												:l_frsh_xtd_qty
								FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
								WHERE   FOD_CLM_MTCH_ACCNT    = :st_op_orderbook.c_cln_mtch_accnt
								AND     FOD_TRD_DT            = :st_op_orderbook.c_trd_dt
								AND     FOD_PRDCT_TYP         = :st_op_orderbook.c_prd_typ
								AND     FTD_ORDR_RFRNC        = FOD_ORDR_RFRNC
								AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = decode(:st_op_orderbook.c_fc_flg,'F',:st_ip_orderbook.c_ordr_rfrnc,:st_op_orderbook.c_sltp_ord_rfrnc); /*** Ver 2.2 decode added ***/

							if( SQLCODE != 0 )
							{
								fn_errlog ( c_ServiceName, "S31680", SQLMSG, c_err_msg.arr );																								/** VQC **/
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																											/** VQC **/
								/*** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	 *** Commented in Ver 1.8 ***/
								/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
								tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}

					  if(DEBUG_MSG_LVL_3) /*** Ver 3.1 ***/
  					{
							fn_userlog(c_ServiceName,"l_open_qty is :%ld:", l_open_qty); /*** Ver 2.2 ***/
						}
		
							if (l_open_qty == 0  ) /*** if loop added in Ver 2.2 ***/
							{
								break;
							}

							fn_userlog( c_ServiceName, "CR-ISEC14-144377 Index/Stock :%c:",  st_op_orderbook.c_ctgry_indstk );   /*** Added in Ver 6.2 ***/

							EXEC SQL	
							 /*** SELECT MTM_SLTP_REQ Commented In Ver 2.0 ***/
							 /*** SELECT DECODE(:st_op_orderbook.c_prd_typ,'U',MTM_SLTP_REQ,MTM_OP_REQ) *** Ver 2.0 ***   Commented in Ver 6.2 ***/
							 SELECT DECODE(:st_op_orderbook.c_prd_typ,'U',DECODE(:st_op_orderbook.c_ctgry_indstk,'I',MTM_SLTP_REQ,'S',MTM_SLTP_REQ_S,'N'),
                                                            DECODE(:st_op_orderbook.c_ctgry_indstk,'I',MTM_OP_REQ,'S',MTM_OP_REQ_S,'N') ) /*** Added in Ver 6.2 ***/
							 INTO		:c_mtm_sltp_req
							 FROM		MTM_APPLN_STTS
							 WHERE  mtm_xchng_cd = :st_op_orderbook.c_xchng_cd
							 AND    mtm_pipe_id LIKE :st_op_orderbook.c_pipe_id;
							
							if(SQLCODE != 0)
							{
								fn_errlog ( c_ServiceName, "S31685", SQLMSG, c_err_msg.arr );																							/** VQC **/
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																										/** VQC **/
								/*** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	 *** Commented in Ver 1.8 ***/
								tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
								/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
							
							if(DEBUG_MSG_LVL_3)	/*** Ver 1.8 ***/
							{
								fn_userlog(c_ServiceName,"Order status of fresh order :%c:", c_ordr_stts);
								fn_userlog(c_ServiceName,"Request type :%c:", c_mtm_sltp_req);
								fn_userlog(c_ServiceName,"c_sys_msg is :%s:",c_sys_msg); /** Ver 3.4 **/
							}
               /** ver 6.4 starts ***/
              if( st_op_orderbook.c_fc_flg == 'C' || st_op_orderbook.c_fc_flg == 'T' )
              { 

							if (st_op_orderbook.c_fc_flg == 'C')
							{
							fn_userlog(c_ServiceName,"inside st_op_orderbook.c_fc_flg == C");

								EXEC SQL
									select FOD_ORDR_RFRNC
									INTO
									:c_can_ordr_ref
									from FOD_FO_ORDR_DTLS
									where
									FOD_FC_FLAG= 'T'
									and FOD_ORDR_STTS in ('R','Q','P','O')
									and DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_cvr_ordr_rfrnc;
							}
							else if (st_op_orderbook.c_fc_flg == 'T')
							{
								 fn_userlog(c_ServiceName,"inside st_op_orderbook.c_fc_flg == T");
								EXEC SQL
									select FOD_ORDR_RFRNC
									INTO
									:c_can_ordr_ref
									from FOD_FO_ORDR_DTLS
									where
									FOD_FC_FLAG= 'C'
									and FOD_ORDR_STTS in ('R','Q','P','O')
									and DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_cvr_ordr_rfrnc;
							}
							if(SQLCODE !=0 && SQLCODE !=NO_DATA_FOUND)
							{
													fn_errlog ( c_ServiceName, "S31690", SQLMSG, c_err_msg.arr );                                             /** VQC **/
													Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );                                                    /** VQC **/
													/*** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  *** Commented in Ver 1.8 ***/
													tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
													/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
													tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}

							if (SQLCODE != NO_DATA_FOUND)
							{
								fn_userlog( c_ServiceName, "Place Cancellation of :%s:",c_can_ordr_ref);
								strcpy(c_remarks.arr,"System placed Cancellation");
								/*** strcpy(c_sys_msg1,"SYS_EVENT"); ***/
      				  strcpy(c_sys_msg1,c_sys_msg);
      					if (strcmp(c_sys_msg,"SYS_EVENT")==0)
      					{
        					c_nkd_blkd_flg = 'Z';
      					}
								 fn_userlog(c_ServiceName,"System placing cancellation for ordr ref :%s:",c_can_ordr_ref);

														i_returncode = fn_acall_svc_fml ( c_ServiceName,
																									 c_err_msg.arr,                                                         /** VQC **/
																									 "SFO_SPN_CANCEL",
																									 0,
																									 11,
																									 FFO_USR_ID, (char *)st_pstn_actn_var.c_user_id,
																									 FFO_SSSN_ID, (char *)&st_pstn_actn_var.l_session_id,
																									 FFO_XCHNG_CD,(char *)st_op_orderbook.c_xchng_cd,
																									 FFO_EBA_MTCH_ACT_NO,(char *)st_op_orderbook.c_cln_mtch_accnt,
																									 FFO_ORDR_RFRNC, (char *)c_can_ordr_ref,
																									 FFO_XCHNG_RMRKS, (char *)c_remarks.arr,                                /** VQC **/
																									 FFO_CHANNEL,(char *)st_pstn_actn_var.c_channel,
																									 FFO_ALIAS,(char *)st_pstn_actn_var.c_alias,
																									 FFO_PIPE_ID, (char *)st_op_orderbook.c_pipe_id ,
                                                   FFO_MKT_TYP,(char *)&c_nkd_blkd_flg,
																									 FFO_SYS_MSG, (char *)c_sys_msg1);
								if ( i_returncode != SUCC_BFR )
								{
													fn_errlog ( c_ServiceName, "S31695", LIBMSG, c_err_msg.arr );                                             /** VQC **/
													Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );                                                    /** VQC **/
													/*** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  *** Commented in Ver 1.8 ***/
													tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
													/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
													tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}
							 }
							}


							/*** Ver 6.4 ***/
							l_tot_pend = 0;

							EXEC SQL
								select SUM(decode(FOD_ORDR_STTS,'E',0,'B',0,'D',0,'C',0,'X',0,1))
								INTO
								:l_tot_pend
								from FOD_FO_ORDR_DTLS
								where
								DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = decode(:st_op_orderbook.c_fc_flg,'F',:st_ip_orderbook.c_ordr_rfrnc,:st_op_orderbook.c_sltp_ord_rfrnc);;
							
							if(SQLCODE !=0 )
							{
								fn_errlog ( c_ServiceName, "S31700", SQLMSG, c_err_msg.arr );                                             /** VQC **/
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );                                                    /** VQC **/
								tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
							if(DEBUG_MSG_LVL_3)
							{
								fn_userlog( c_ServiceName,"Pending order present :%ld:", l_tot_pend);
							 	fn_userlog(c_ServiceName,"c_mtm_sltp_req :%c:",c_mtm_sltp_req);
								fn_userlog(c_ServiceName,"c_sys_msg :%s:",c_sys_msg);
							}
							/*** Ver 6.4 ends here ***/
						
							if (c_mtm_sltp_req == 'A' || strcmp(c_sys_msg,"MY_EOS")==0 || strcmp(c_sys_msg,"SYS_EVENT")==0 )	/* Request type is 'B' when EOS is run for Cancellation & squareoff both */ /**Ver 3.4 **/ /*** Ver 6.4 SYS_EVENT added ***/
							{
								if ( (c_ordr_stts == EXECUTED || /*** c_ordr_stts == PARTIALLY_EXECUTED ||***/  c_ordr_stts == PARTIALLY_EXECUTED_AND_EXPIRED || c_ordr_stts == PARTIALLY_EXECUTED_AND_CANCELLED || c_ordr_stts == CANCELLED || c_ordr_stts == REJECTED) && l_tot_pend == 0  )	/* Check order status of fresh order */  /*** l_tot_pend added in ver 6.4 ***/
								/*** CANCELLED,REJECTED condition added in Ver 2.2  and PARTIALLY_EXECUTED condition removed ***/
								{
									fn_userlog(c_ServiceName,"Placing SFO_SPN_PLC_ORD");
									/* Place square off order */
									strcpy( c_svc_nm, "SFO_SPN_PLC_ORD");
									c_slm_flg=MARKET;
									c_ord_typ=GOOD_TILL_TODAY;
									li_dsclsd_qty = 0;
									li_stp_lss_tgr_prc = 0;
									li_lmt_rt = 0;
									/** strcpy (c_sys_msg,"EOS"); Commented in Ver 3.4 **/
									if(strcmp(c_sys_msg,"MY_EOS")==0)   /*** If condition added in ver 3.4 ***/
									{
										c_spl_flg=CLIENT_SQROFF;
									}
									else
									{
										c_spl_flg = SYSTEM_SQUAREOFF;
									}
									
									
									sql_fum_freeze_qty = 0;

  /*** Commented in Ver 3.7
									EXEC SQL
									 SELECT fum_freeze_qty
									 INTO   :sql_fum_freeze_qty
									 FROM   fum_fo_undrlyng_mstr
									 WHERE  fum_xchng_cd  = :st_pstn_actn_var.c_xchng_cd
									 *** AND    fum_prdct_typ = 'F' Commented In Ver 2.0 ***
									 AND    fum_prdct_typ = DECODE(:st_op_orderbook.c_prd_typ,'U','F','I','O',:st_op_orderbook.c_prd_typ)
																																												     *** Ver 2.0 ***
									 AND    fum_undrlyng  = :st_pstn_actn_var.c_undrlyng; *** Comment Ends ***/

              /*** Ver 3.7 starts ***/
                if( DEBUG_MSG_LVL_3)
                {
                  fn_userlog( c_ServiceName,"st_pstn_actn_var.c_xchng_cd is :%s:", st_pstn_actn_var.c_xchng_cd);
                  fn_userlog( c_ServiceName,"st_pstn_actn_var.c_undrlyng is :%s:", st_pstn_actn_var.c_undrlyng);
                  fn_userlog( c_ServiceName,"st_pstn_actn_var.c_expry_dt is :%s:", st_pstn_actn_var.c_expry_dt);
                }

                EXEC SQL
                  SELECT fum_freeze_qty,trunc(fum_freeze_qty/ftq_min_lot_qty) * ftq_min_lot_qty
                  INTO   :sql_fum_freeze_qty,
                         :l_max_allowed_qty
                  FROM   ftq_fo_trd_qt,fum_fo_undrlyng_mstr
                  WHERE  fum_xchng_cd  =  ftq_xchng_cd
                  AND    fum_prdct_typ =  ftq_prdct_typ
                  AND    fum_undrlyng  =  ftq_undrlyng
                  AND    ftq_xchng_cd  =  :st_pstn_actn_var.c_xchng_cd
                  AND    ftq_prdct_typ =  DECODE(:st_op_orderbook.c_prd_typ,'U','F','I','O',:st_op_orderbook.c_prd_typ) 
                  AND    ftq_opt_typ   =  :st_pstn_actn_var.c_opt_typ
                  AND    ftq_strk_prc  =  :st_pstn_actn_var.l_strike_prc
                  AND    ftq_undrlyng  =  :st_pstn_actn_var.c_undrlyng
                  AND    ftq_expry_dt  =  :st_pstn_actn_var.c_expry_dt;

              /*** Ver 3.7 ends ***/
									if ( SQLCODE != 0 )
									{
										fn_errlog ( c_ServiceName, "S31705", SQLMSG, c_err_msg.arr );																			/** VQC **/
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																						/** VQC **/
										/*** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	 *** Commented in Ver 1.8 ***/
										/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
										tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
										tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
									}

                /*** Ver 3.7 Starts ***/
                if( DEBUG_MSG_LVL_3)
                {
                  fn_userlog( c_ServiceName,"l_max_allowed_qty is :%ld:", l_max_allowed_qty );
                }
                /*** Ver 3.7 Ends ***/

								if (strcmp(c_sys_msg,"SYS_EVENT")!=0 ) /*** Ver 6.4 ***/
								{
									if( l_open_qty  > sql_fum_freeze_qty && sql_fum_freeze_qty != 0 )
									{
                  	/*** l_open_qty = sql_fum_freeze_qty; Commented in Ver 3.7 ***/
                  	l_open_qty = l_max_allowed_qty;  /*** Added in Ver 3.7 ***/
									}
								}
									/*** starts Ver 2.2 ***/
									if( DEBUG_MSG_LVL_3)
									{
										fn_userlog( c_ServiceName," N st_op_orderbook.c_fc_flg = :%c:",st_op_orderbook.c_fc_flg);
										fn_userlog( c_ServiceName," N l_open_qty Is :%ld:",l_open_qty);
										fn_userlog( c_ServiceName," N st_pstn_actn_var.c_trnsctn_flw Is :%c:",st_pstn_actn_var.c_trnsctn_flw);
									}
									if ( st_op_orderbook.c_fc_flg == 'C' || st_op_orderbook.c_fc_flg == 'T' )
									{	
										strcpy(c_cover_ref,st_ip_orderbook.c_ordr_rfrnc);
										if (l_open_qty < 0 ) 
										{
											st_pstn_actn_var.c_trnsctn_flw = (st_pstn_actn_var.c_trnsctn_flw == 'B') ? 'S' : 'B'; 
										}
									}
									else if ( st_op_orderbook.c_fc_flg == 'E')
									{	
										strcpy(c_cover_ref,st_ip_orderbook.c_ordr_rfrnc);
									}
									else 
									{
										strcpy(c_cover_ref,st_op_orderbook.c_sltp_ord_rfrnc);
										if (l_open_qty > 0 ) 
										{
											st_pstn_actn_var.c_trnsctn_flw = (st_pstn_actn_var.c_trnsctn_flw == 'B') ? 'S' : 'B'; 
										}
									}

  								if(DEBUG_MSG_LVL_3)		/*** Ver 3.1 ***/
  								{
										fn_userlog( c_ServiceName,"NN st_pstn_actn_var.c_trnsctn_flw Is :%c:",st_pstn_actn_var.c_trnsctn_flw);
									}
									if (l_open_qty < 0) 
									{
										/*** fn_userlog( c_ServiceName,"Sys msg set to EXCPT_EOS");
										strcpy(c_sys_msg,"EXCPT_EOS");
										l_open_qty = l_open_qty * -1; Commented in Ver 3.4 ***/
										fn_userlog( c_ServiceName,"Open Qty :%ld:",l_open_qty); /** Added in Ver 3.4 ***/
									}

									/*** Ver 2.2 ends ****/
                  /** ver 6.4 starts ***/
                  if( strcmp(c_sys_msg,"SYS_EVENT")==0 )
                  {
                  c_nkd_blkd_flg = 'Z';
                  }
                 /** ver 6.4 ends **/   
									/*** Ver 6.9 start **/
									if(st_op_orderbook.c_fc_flg == 'C' && c_source_flg=='F')
									{
											/* c_spl_flg=SYSTEM_SQUAREOFF;*/
											c_nkd_blkd_flg='G';

											if(c_spl_flg == 'S')
											{
											MEMSET(c_sys_msg);
											strcpy(c_sys_msg,"SYS_EVENT");
											}
											/*MEMSET(c_call_source);
											strcpy(c_call_source,"PLC_OPTPLUS");*/
									}
									/*** Ver 6.9 end **/

									i_returncode = fn_acall_svc_fml( c_ServiceName,			/*** Ver 1.8 changed from fn_call_svc_fml to fn_acall_svc_fml ***/
																									 c_err_msg.arr,																														/** VQC **/
																									 "SFO_ORD_ROUT",
																									 0,
																									 26,/** 24 changed to 25 in ver 6.4 **/	/**changed frm 25 to 26 in Ver 6.9 **/
																									 /*** 2, *** Commented in Ver 1.8 ***/
																									/*** FFO_ORDR_RFRNC, (char *)st_ip_orderbook.c_ordr_rfrnc, *** Commented in Ver 2.2 ***/
																									FFO_ORDR_RFRNC, (char *)c_cover_ref,	/*** Added in Ver 2.2 ***/
																									FFO_SVC_NAME, (char *)c_svc_nm,
																									FFO_USR_ID, (char *)st_pstn_actn_var.c_user_id,
																									FFO_SSSN_ID, (char *)&st_pstn_actn_var.l_session_id,
																									FFO_XCHNG_CD, (char *)st_pstn_actn_var.c_xchng_cd,
																									FFO_EBA_MTCH_ACT_NO, (char *)st_pstn_actn_var.c_cln_mtch_accnt,
																									FFO_PRDCT_TYP, (char *)&st_pstn_actn_var.c_prd_typ,
																									FFO_UNDRLYNG, (char *)st_pstn_actn_var.c_undrlyng,
																									FFO_EXPRY_DT, (char *)st_pstn_actn_var.c_expry_dt,
																									FFO_EXER_TYP, (char *)&st_pstn_actn_var.c_exrc_typ,
																									FFO_OPT_TYP , (char *)&st_pstn_actn_var.c_opt_typ,
																									FFO_STRK_PRC, (char *)&st_pstn_actn_var.l_strike_prc,
																									FFO_CTGRY_INDSTK , (char *)&st_pstn_actn_var.c_ctgry_indstk,
																									FFO_ORDR_FLW, (char *)&st_pstn_actn_var.c_trnsctn_flw,
																									FFO_LMT_MKT_SL_FLG ,(char *)&c_slm_flg,
																									FFO_ORD_TYP ,(char *)&c_ord_typ,
																									FFO_DSCLSD_QTY , &li_dsclsd_qty,
																									FFO_STP_LSS_TGR , &li_stp_lss_tgr_prc,
																									FFO_ORD_TOT_QTY, (char *)&l_open_qty,
																									FFO_LMT_RT, &li_lmt_rt,
																									FFO_SPL_FLG ,(char *)&c_spl_flg,
																									FFO_CHANNEL, (char *)st_pstn_actn_var.c_channel, 
																									FFO_ALIAS, (char *)st_pstn_actn_var.c_alias,  
																									FFO_SYS_MSG, (char *)c_sys_msg,
                                                FFO_NKD_BLKD_FLG,(char *)&c_nkd_blkd_flg,  /*** ver 6.4 **/ 
                                                FFO_STATUS_FLG,(char *)&c_source_flg);  /*** ver 6.9 **/ 
																									/*** FFO_ORDR_RFRNC, (char *)st_ip_orderbook.c_ordr_rfrnc, NULL,
																									FFO_PIPE_ID, (char *)st_op_orderbook.c_pipe_id, NULL); *** Commented in Ver 1.8 ***/

								if ( i_returncode != SUCC_BFR )
								{
									fn_errlog ( c_ServiceName, "S31710", LIBMSG, c_err_msg.arr );																				/** VQC **/
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																							/** VQC **/
									/*** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	 *** Commented in Ver 1.8 ***/
									/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
									tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}
							}
						}
					 }
 				  } /*** if loop ended in Ver 2.2 ***/
						break;

					case ORS_CAN_ORD_RJCT:
						break;

				/** Added in Ver 2.5 **/

					case ORS_ORD_EXP:

					if(st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS || st_op_orderbook.c_prd_typ ==OPTIONPLUS)  /** Ver 2.6 optionplus **/
					{
						 if(DEBUG_MSG_LVL_3)
						 {
 		         	fn_userlog(c_ServiceName ,"c_fc_flg is is :%c:",st_op_orderbook.c_fc_flg );
						 }
		
    	      if(st_op_orderbook.c_fc_flg == 'F' || st_op_orderbook.c_fc_flg == 'C' || st_op_orderbook.c_fc_flg == 'T' ) 
      	    {
							if(DEBUG_MSG_LVL_3)
							{
          	   fn_userlog(c_ServiceName," c_fc_flg is :%c:",st_op_orderbook.c_fc_flg );
							}
	            st_op_orderbook.d_amt_blkd = 0.0;
  	          st_op_orderbook.d_lss_amt_blkd = 0.0;
 	            c_ordr_stts = '\0';
		
    		        EXEC SQL
      	         SELECT     NVL(FOD_AMT_BLCKD,0),
        	                  NVL(FOD_LSS_AMT_BLCKD,0),
          	                FOD_ORDR_STTS,
            	              FOD_ORDR_FLW,
              	            FOD_ORDR_RFRNC,
                	          FOD_SLTP_ORDR_RFRNC,
                  	        FOD_LMT_RT
              	 INTO       :st_op_orderbook.d_amt_blkd,
                	          :st_op_orderbook.d_lss_amt_blkd,
               	            :c_ordr_stts,
                            :c_ordr_flw,
                            :st_ip_orderbook.c_ordr_rfrnc,
                            :st_op_orderbook.c_sltp_ord_rfrnc ,
                            :li_lmt_rt
              	 FROM       FOD_FO_ORDR_DTLS
 	              WHERE      FOD_ORDR_RFRNC = decode(:st_op_orderbook.c_fc_flg ,'F',:st_ip_orderbook.c_ordr_rfrnc,:st_op_orderbook.c_sltp_ord_rfrnc);

            if(SQLCODE != 0)
            {
             	/*******  Commented in Ver 2.8 ********
              fn_errlog ( c_ServiceName, "S31715", SQLMSG, ptr_st_err_msg->c_err_msg );
              fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); *****/
							/************ Ver 2.8 Starts **********/
              fn_errlog ( c_ServiceName, "S31720", SQLMSG,c_err_msg.arr);																			/** VQC **/
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																					/** VQC **/
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																				/** VQC **/
              /***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
							tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            /************ Ver 2.8 Ends ***************/
            }

            if(DEBUG_MSG_LVL_3)
            {
              fn_userlog(c_ServiceName,"Margin Amount of the fresh order :%lf:",st_op_orderbook.d_amt_blkd);
              fn_userlog(c_ServiceName,"Loss Amount of the fresh order :%lf:", st_op_orderbook.d_lss_amt_blkd);
            }

            long int li_sltp_lmt_rt = 0;

            EXEC SQL
            SELECT      NVL(FOD_LMT_RT,0)
            INTO        :li_sltp_lmt_rt
            FROM        FOD_FO_ORDR_DTLS
            WHERE       FOD_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc;

            if(SQLCODE != 0)
            {
              /*********** commented in Ver 2.8 ***********
              fn_errlog ( c_ServiceName, "S31725", SQLMSG, ptr_st_err_msg->c_err_msg );
              fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); *********/
							/******* Ver 2.8 Starts ********/
              fn_errlog ( c_ServiceName, "S31730", SQLMSG,c_err_msg.arr);																							/** VQC **/
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																									/** VQC **/
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																								/** VQC **/
              /***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
							tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              /************ Ver 2.8 Ends ***********/
            }
							
						/*** Ver 2.6 Starts ****/

						if(st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS)	
						{
             i_returncode = fn_cal_mrgn_sltp ( c_ServiceName,
                                               st_ip_orderbook.c_ordr_rfrnc,
                                               li_lmt_rt,
                                               li_sltp_lmt_rt,
                                               &d_amt_to_be_blckd,
                                               &d_lss_amt_to_be_blckd,
																							 c_ref_rmrks,  /*** Ver 5.5 ***/
																							 &d_comp1_mrgn,/*** Ver 5.5 ***/
																							 &d_comp1_pl,  /*** Ver 5.5 ***/
																							 &d_xchng_amt, /*** Ver 5.5 ***/
                                               c_err_msg.arr																													/** VQC **/
                                             );
						}
						else if(st_op_orderbook.c_prd_typ == OPTIONPLUS)
						{
						 i_returncode = fn_cal_mrgn_sltp_op ( c_ServiceName,
                                               st_ip_orderbook.c_ordr_rfrnc,
                                               li_lmt_rt,
                                               li_sltp_lmt_rt,
                                               &d_amt_to_be_blckd,
                                               &d_lss_amt_to_be_blckd,
                                               c_ref_rmrks,  /*** Ver 5.9 ***/
                                               &d_comp1_mrgn,/*** Ver 5.9 ***/
                                               &d_comp1_pl,  /*** Ver 5.9  ***/
                                               &d_xchng_amt, /*** Ver 5.9 ***/
                                               &d_prem_amt,  /*** Ver 5.9 ***/
                                               &d_spn_mrgn,  /*** Ver 5.9 ***/
                                               &d_expr_mrgn, /*** Ver 5.9  ***/
																							 'E',
                                               c_err_msg.arr																													/** VQC **/
                                             );

						}
              if(DEBUG_MSG_LVL_3)
							{
              	fn_userlog(c_ServiceName," d_amt_to_be_blckd is :%lf:",d_amt_to_be_blckd);
              	fn_userlog(c_ServiceName," d_lss_amt_to_be_blckd is :%lf:",d_lss_amt_to_be_blckd);
							}

              if ( i_returncode != 0 )
              {
								/*********** Commented in Ver 2.8 ***
                 fn_errlog ( c_ServiceName, "S31735", LIBMSG, ptr_st_err_msg->c_err_msg );
                 fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
                 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); ********/
								/******* Ver 2.8 Starts *********/
                 fn_errlog ( c_ServiceName, "S31740", LIBMSG,c_err_msg.arr);																				/** VQC **/
                 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																							/** VQC **/
                 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																						/** VQC **/
								 tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
                 /***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
                 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              /********** Ver 2.8 Ends ***********/
              }

            /* Difference margin & loss */
            d_diff_amt  = d_amt_blkd - d_amt_to_be_blckd;
            d_diff_loss = d_lss_amt_blkd + d_lss_amt_to_be_blckd;






            if(DEBUG_MSG_LVL_3)
            {
						  fn_userlog(c_ServiceName," d_diff_amt is :%lf:",d_diff_amt);
              fn_userlog(c_ServiceName," d_diff_loss is :%lf:",d_diff_loss);
              fn_userlog(c_ServiceName,"Cover li_lmt_rt :%ld",li_lmt_rt);
              fn_userlog(c_ServiceName,"Fresh Open qty = :%ld",l_open_qty);
            /*fn_userlog(c_ServiceName,"d_wgt_avrg_price = :%lf:",d_wgt_avrg_price);    **  Commented in VQC **/	
              fn_userlog(c_ServiceName,"d_amt_blkd = :%lf:", d_amt_blkd);
              fn_userlog(c_ServiceName,"d_lss_amt_blkd = :%lf:", d_lss_amt_blkd);
              fn_userlog(c_ServiceName,"d_amt_to_be_blckd = :%lf:", d_amt_to_be_blckd);
              fn_userlog(c_ServiceName,"d_lss_amt_to_be_blckd = :%lf:", d_lss_amt_to_be_blckd);
              fn_userlog(c_ServiceName,"d_diff_amt = :%lf:",d_diff_amt);
              fn_userlog(c_ServiceName,"d_diff_loss = :%lf:",d_diff_loss);
            }

            /* Block Release the margin amount */
            strcpy( c_narration_id , ON_EXPIRY);
            if(d_diff_amt != 0)
            {
                d_balance_amt  = 0.0;

                if(DEBUG_MSG_LVL_3)
                {
                  fn_userlog(c_ServiceName,"Block the margin amount");
                }

                i_returncode = fn_upd_spnlimits( c_ServiceName,
                                              &st_pstn_actn_var,
                                              ptr_st_err_msg,
                                              c_narration_id,
                                              DEBIT_TILL_LIMIT,
                                              d_diff_amt,
                                              &d_balance_amt);


                if ( i_returncode != 0 )
                {
                  /******* Commented in Ver 2.8 ******
                  fn_errlog ( c_ServiceName, "S31745", LIBMSG, ptr_st_err_msg->c_err_msg );
                  fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );*******/
									/************ Ver 2.8 Starts ********/
                  fn_errlog ( c_ServiceName, "S31750", LIBMSG,c_err_msg.arr);																					/** VQC **/
                  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																							/** VQC **/
                  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																						/** VQC **/
									tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
                  /***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                /************* Ver 2.8 Ends **********/

                }

                d_amt_to_be_blckd = d_amt_to_be_blckd + d_balance_amt ;
              }

						/*** Ver 5.5 started ***/
						if (st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS || st_op_orderbook.c_prd_typ == OPTIONPLUS ) /** ver 5.9 OPTIONPLUS added ***/	
						{
							MEMSET(c_tmp_rmrks);
							strcpy ( c_tmp_rmrks, st_pstn_actn_var.c_ref_rmrks );
							sprintf(st_pstn_actn_var.c_ref_rmrks,"%s%s",c_ref_rmrks,c_tmp_rmrks);
						}
						/*** Ver 5.5 ends ***/

            /* Block Release the loss amount */
            strcpy( c_narration_id , ON_EXPIRY);

            if( d_lss_amt_to_be_blckd <= 0 )
            {
              if(d_diff_loss != 0)
              {
                d_balance_amt  = 0.0;

                if(DEBUG_MSG_LVL_3)
                {
                  fn_userlog(c_ServiceName,"Block the loss amount");
                }

                i_returncode = fn_upd_spnlimits ( c_ServiceName,
                                              &st_pstn_actn_var ,
                                              ptr_st_err_msg,
                                              c_narration_id,
                                              DEBIT_TILL_LIMIT,
                                              d_diff_loss,
                                              &d_balance_amt);


                if ( i_returncode != 0 )
                {
                  /******* Commented In Ver 2.8 ****
                  fn_errlog ( c_ServiceName, "S31755", LIBMSG, ptr_st_err_msg->c_err_msg );
                  fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );*********/
									 /******* Ver 2.8 starts ********/
                  fn_errlog ( c_ServiceName, "S31760", LIBMSG,c_err_msg.arr);																						/** VQC **/
                  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																								/** VQC **/
                  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																							/** VQC **/
									tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
                 /***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              /**************** Ver 2.8 Ends **************/
                }

                 d_lss_amt_to_be_blckd = d_lss_amt_to_be_blckd - d_balance_amt ;
              }
            }
            else if(d_lss_amt_to_be_blckd > 0)
            {
              if(d_lss_amt_blkd != 0)
              {
                d_balance_amt  = 0.0;

                if(DEBUG_MSG_LVL_3)
                {
                  fn_userlog(c_ServiceName,"Release old loss amount in case or profit");
                }

                i_returncode = fn_upd_spnlimits ( c_ServiceName,
                                              &st_pstn_actn_var ,
                                              ptr_st_err_msg,
                                              c_narration_id,
                                              DEBIT_TILL_LIMIT,
                                              d_lss_amt_blkd,
                                              &d_balance_amt);


                if ( i_returncode != 0 )
                {
									/********* commented in Ver 2.8 *********
                  fn_errlog ( c_ServiceName, "S31765", LIBMSG, ptr_st_err_msg->c_err_msg );
                  fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); ******/
									/*********** Ver 2.8 Starts ***********/
                  fn_errlog ( c_ServiceName, "S31770", LIBMSG,c_err_msg.arr);																							/** VQC **/
                  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																									/** VQC **/
                  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																								/** VQC **/
									tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
                  /***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                 /*********** Ver 2.8 Ends ***********/
                }
              }
               d_lss_amt_to_be_blckd = 0;
            }

						if (st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS)	 /**** loop added in Ver 5.5 ***/
						{
							strcpy ( st_pstn_actn_var.c_ref_rmrks, c_tmp_rmrks);    
							MEMSET(c_tmp_rmrks);    
							
							EXEC SQL
               UPDATE     FOD_FO_ORDR_DTLS
               SET        FOD_AMT_BLCKD = :d_amt_to_be_blckd,
                          FOD_LSS_AMT_BLCKD = abs(:d_lss_amt_to_be_blckd),
													FOD_SLTP_MRGN = :d_comp1_mrgn,			
													FOD_SLTP_PL   = :d_comp1_pl,				 
													FOD_SLTP_SEBI_MRGN = :d_xchng_amt  
               WHERE      FOD_ORDR_RFRNC = :st_ip_orderbook.c_ordr_rfrnc;
						}
						else	/*** Else condition added in Ver 5.5 ***/
						{
              strcpy ( st_pstn_actn_var.c_ref_rmrks, c_tmp_rmrks); /** ver 5.9 **/
              MEMSET(c_tmp_rmrks); /** ver 5.9 **/
            EXEC SQL
               UPDATE     FOD_FO_ORDR_DTLS
               SET        FOD_AMT_BLCKD = :d_amt_to_be_blckd,
                          FOD_LSS_AMT_BLCKD = abs(:d_lss_amt_to_be_blckd),
                          FOD_SLTP_MRGN = :d_comp1_mrgn, /*** Ver 5.9 ***/
                          FOD_SLTP_PL   = :d_comp1_pl, /*** Ver 5.9 ***/
                          FOD_SLTP_SEBI_MRGN = :d_xchng_amt, /*** Ver 5.9 ***/
                          FOD_OPLUS_PREMIUM  = :d_prem_amt,  /*** Ver 5.9 ***/
                          FOD_SPAN_MRGN = :d_spn_mrgn,       /*** Ver 5.9 ***/
                          FOD_EXPR_MRGN = :d_expr_mrgn       /*** Ver 5.9 ***/
               WHERE      FOD_ORDR_RFRNC = :st_ip_orderbook.c_ordr_rfrnc;
						}
              if(SQLCODE != 0)
              {
								/********** Commented in Ver 2.8 **********
                fn_errlog ( c_ServiceName, "S31775", LIBMSG, ptr_st_err_msg->c_err_msg );
                fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); **********/
								/******** Ver 2.8 starts **********/
                fn_errlog ( c_ServiceName, "S31780", SQLMSG,c_err_msg.arr);																				/** VQC **/
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );																						/** VQC **/
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );																					/** VQC **/
								tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
                /***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              /************* Ver 2.8 Ends *************/
              }
           }
					}
          break;		
				
					/** Ver 2.5 Ends  **/

				}	
	 }
	 /*** Ver 1.5 ends here ***/

   /***** Ver 3.5 Starts Here *****/
	 /*** Commented in Ver 4.0 Starts ***	
   d_trail_amt=0;
   d_lmt_offset=0;
	 *** Ver 4.0 Ends ***/

   c_new_mod_ord_flg='\0';

   if ( st_op_orderbook.c_prd_typ == 'F' )
   {

    if( st_op_xchngbk.c_prcimpv_flg== 'Y' )  /** Trail order modification ***/
    {
      if( st_ip_xchngbk.l_ors_msg_typ == ORS_MOD_ORD_ACPT ||
          st_ip_xchngbk.l_ors_msg_typ == ORS_MOD_ORD_RJCT ||
          st_ip_xchngbk.l_ors_msg_typ == ORS_NEW_ORD_ACPT ||
          st_ip_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_ACPT
        )
      {
        if( st_ip_xchngbk.l_ors_msg_typ == ORS_NEW_ORD_ACPT ||
            st_ip_xchngbk.l_ors_msg_typ == ORS_MOD_ORD_ACPT
          )
        {
           c_rqst_flg = 'A' ;
           c_new_mod_ord_flg='P';
        }
        else if(
                 st_ip_xchngbk.l_ors_msg_typ == ORS_MOD_ORD_RJCT
               )
        {
           c_rqst_flg = 'J' ;
           c_new_mod_ord_flg='M';
        }
        else if( st_ip_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_ACPT )
        {
           c_rqst_flg = 'R' ;
           c_new_mod_ord_flg='M';
        }

        i_returncode  = fn_cal_spn_incrmntl_price(c_ServiceName,
                              c_new_mod_ord_flg,
                              c_rqst_flg,
                              c_err_msg.arr,																							/** VQC **/
                              &st_op_orderbook,
                             &st_ip_xchngbk
                              );
        if (  i_returncode != 0 )
        {
          fn_errlog ( c_ServiceName, "S31785", LIBMSG,c_err_msg.arr);											/** VQC **/		
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );													/** VQC **/
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );												/** VQC **/
					tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/	
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

      }  /****
      else
      {
        c_rqst_flg = 'A' ;
        c_new_mod_ord_flg='M';
        i_returncode  = fn_cal_spn_incrmntl_price(c_ServiceName,
                              c_new_mod_ord_flg,
                              c_rqst_flg,
                              c_err_msg,
                              &st_op_orderbook,
                             &st_ip_xchngbk
                              );

        if (  i_returncode != 0 )
        {
           fn_errlog ( c_ServiceName, "S31790", LIBMSG,c_err_msg);
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }  ***/
    }
   }
   /***** ver 3.5 Ends here *******/
/****** ver 4.8 starts *******/
 
  if ( st_op_orderbook.c_prd_typ == 'F' && c_spl_flg == ROLLOVER_WITH_SPREAD && i_source_dest_flg == 1 )
  {
   /*** memcpy( &st_frst_ordbk, &st_op_orderbook , sizeof( struct st_orderbook ) ); ****/
   st_frst_ordbk.l_ord_lmt_rt = st_op_orderbook.l_ord_lmt_rt;
   /* st_frst_ordbk.l_ord_tot_qty = st_op_orderbook.l_ord_tot_qty; *** Ver 6.0 ***/
   /*** Ver 6.0 Starts ***/
	 fn_userlog(c_ServiceName,"st_op_orderbook.l_exctd_qty :%ld:",st_op_orderbook.l_exctd_qty);
	 st_frst_ordbk.l_ord_tot_qty = (st_op_orderbook.l_ord_tot_qty - st_op_orderbook.l_exctd_qty); 
   /*** Ver 6.0 Ends ***/
   strcpy(st_frst_ordbk.c_expry_dt, st_op_orderbook.c_expry_dt);
   strcpy(st_frst_ordbk.c_cln_mtch_accnt,st_op_orderbook.c_cln_mtch_accnt);
   strcpy(st_frst_ordbk.c_xchng_cd,st_op_orderbook.c_xchng_cd);
   st_frst_ordbk.c_exrc_typ = st_op_orderbook.c_exrc_typ;
   st_frst_ordbk.c_prd_typ = st_op_orderbook.c_prd_typ;
   strcpy(st_frst_ordbk.c_undrlyng,st_op_orderbook.c_undrlyng);
   st_frst_ordbk.c_ordr_flw = st_op_orderbook.c_ordr_flw;
   st_frst_ordbk.c_spl_flg = st_op_orderbook.c_spl_flg;
   st_frst_ordbk.c_slm_flg = st_op_orderbook.c_slm_flg;
   st_frst_ordbk.c_ctgry_indstk = st_op_orderbook.c_ctgry_indstk;
   strcpy(st_frst_ordbk.c_pipe_id,st_op_orderbook.c_pipe_id);

   fn_userlog( c_ServiceName," st_ip_xchngbk.l_ors_msg_typ is :%ld:",st_ip_xchngbk.l_ors_msg_typ );

   fn_userlog(c_ServiceName,"l_sroll_diff_amt :%ld:",l_sroll_diff_amt );

   st_next_ordbk.l_ord_lmt_rt = st_frst_ordbk.l_ord_lmt_rt;
   st_next_ordbk.l_ord_tot_qty = st_frst_ordbk.l_ord_tot_qty;

    fn_userlog( c_ServiceName,"st_frst_ordbk.l_ord_lmt_rt :%ld: st_frst_ordbk.l_ord_tot_qty :%ld:",st_frst_ordbk.l_ord_lmt_rt,st_frst_ordbk.l_ord_tot_qty);

   /* fn_userlog( c_ServiceName," FOR SPAN c_narration_id is :%s: and c_dr_without_lmt_flg :%s:", c_narration_id,c_dr_without_lmt_flg ); 			*** Ver 5.7 ***/
   fn_userlog( c_ServiceName," FOR SPAN c_narration_id is :%s: and c_dr_without_lmt_flg :%c:", c_narration_id,c_dr_without_lmt_flg );  /** Ver 5.7 **/
   switch ( st_ip_xchngbk.l_ors_msg_typ )
   {
       case ORS_NEW_ORD_ACPT:
       case ORS_MOD_ORD_ACPT:
       case ORS_MOD_ORD_RJCT:
       case ORS_CAN_ORD_RJCT:

            fn_userlog(c_ServiceName," ***** INSIDE ORS_NEW_ORD_ACPT--ORS_MOD_ORD_ACPT--ORS_MOD_ORD_RJCT-- CASE FOR SPAN ***** ");
            /*** RELEASE BLOCKED DIFFERENCE MARGIN IF EXISTS *******/ 
            if( st_ip_xchngbk.l_ors_msg_typ == ORS_MOD_ORD_ACPT )
            {
                strcpy( c_narration_id , REL_ROMARG_ORDMOD_ACCPT);
            }
            else if( st_ip_xchngbk.l_ors_msg_typ == ORS_MOD_ORD_RJCT )
            {
                 strcpy( c_narration_id , ON_ROMOD_REJ);
            }
            else if( st_ip_xchngbk.l_ors_msg_typ == ORS_NEW_ORD_ACPT )
            {
                strcpy( c_narration_id , REL_ROMARG_ORD_ACCPT);
            }
            else if( st_ip_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_RJCT )
            {
                strcpy( c_narration_id ,ON_ROCAN_REJ);
            }

            fn_userlog(c_ServiceName,"l_sroll_diff_amt is :%ld:",l_sroll_diff_amt);
            fn_userlog(c_ServiceName,"l_sroll_lss_amt is :%ld:",l_sroll_lss_amt);

            if( l_sroll_diff_amt != 0 )
            {
                i_returncode = fn_upd_spnlimits(  c_ServiceName,
                                                  &st_pstn_actn_var,
                                                  ptr_st_err_msg,
                                                  c_narration_id,
                                                  DEBIT_WITHOUT_LIMIT,
                                                  (double)l_sroll_diff_amt,
                                                  &d_balance_amt );

             if ( i_returncode != 0 )
             {
                      fn_errlog ( c_ServiceName, "S31795", LIBMSG, c_err_msg.arr );																	/** VQC **/
                      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
											tpfree((char *)ptr_fml_Sbuf);				/*** Ver 5.7 ***/
                   		/* tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );			** Ver 5.7 ***/
		 							 		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );					/*** Ver 5.7 ***/
             }
            }
            /*** RELEASE BLOCKED LOSS IF EXISTS *******/
            if( st_ip_xchngbk.l_ors_msg_typ == ORS_MOD_ORD_ACPT )
            {
                strcpy( c_narration_id , REL_ROPNL_ORDMOD_ACCPT);
            }
            else if( st_ip_xchngbk.l_ors_msg_typ == ORS_MOD_ORD_RJCT )
            {
                 strcpy( c_narration_id , ON_ROMOD_PL_REJ);
            }
            else if( st_ip_xchngbk.l_ors_msg_typ == ORS_NEW_ORD_ACPT )
            {
                strcpy( c_narration_id , REL_ROPNL_ORD_ACCPT);
            }
            else if( st_ip_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_RJCT )
            {
                strcpy( c_narration_id ,ON_ROCAN_PL_REJ);
            }

            if( l_sroll_lss_amt != 0)
            { 
                i_returncode = fn_upd_spnlimits(  c_ServiceName,
                                                  &st_pstn_actn_var,
                                                  ptr_st_err_msg,
                                                  c_narration_id,
                                                  DEBIT_WITHOUT_LIMIT,
                                                  (double)l_sroll_lss_amt,
                                                  &d_balance_amt );

                if ( i_returncode != 0 )
                {
                      fn_errlog ( c_ServiceName, "S31800", LIBMSG, c_err_msg.arr );																	/** VQC **/
                      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
											tpfree((char *)ptr_fml_Sbuf);				/*** Ver 5.7 ***/
                   		/* tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );			** Ver 5.7 ***/
		 							 		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );					/*** Ver 5.7 ***/
                }
            }

              i_returncode = tpsuspend ( &tranid, 0 );
              if ( i_returncode == -1 )
              {
                   /* tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );			** Ver 5.7 ***/
									 tpfree((char *)ptr_fml_Sbuf);				/*** Ver 5.7 ***/
		 							 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );					/*** Ver 5.7 ***/
              }


              /****** RECALCULATE DIFFERENCE MARGIN AND PROFIT/LOSS *********/ 
              i_trnsctn_temp = fn_begintran( c_ServiceName, ptr_st_err_msg->c_err_msg);

              if ( i_trnsctn_temp == -1 )
              {
									 tpfree((char *)ptr_fml_Sbuf);				/*** Ver 5.7 ***/
                   /* tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );			** Ver 5.7 ***/
		 							 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );					/*** Ver 5.7 ***/
              }

              fn_userlog( c_ServiceName," *********** before fn_chk_spn_mrgn *********** " );
             
              i_returncode = fn_chk_spn_mrgn( c_ServiceName,st_frst_ordbk,st_next_ordbk,&st_pstn_actn_var,&d_diff_amt,&d_diff_loss,EXG_RESPONSE,c_err_msg.arr );
																																																																									/** VQC **/

              if ( i_returncode != 0 )
              {
                   fn_errlog ( c_ServiceName, "S31805", LIBMSG, c_err_msg.arr );																		/** VQC **/
                   fn_aborttran( c_ServiceName, i_trnsctn_temp, ptr_st_err_msg->c_err_msg );			
                   fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
									 tpfree((char *)ptr_fml_Sbuf);				/*** Ver 5.7 ***/
                   /* tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );			** Ver 5.7 ***/
		 							 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );					/*** Ver 5.7 ***/
              }

              fn_userlog( c_ServiceName," *********** after fn_chk_spn_mrgn *********** " ); 
              fn_userlog( c_ServiceName, " d_diff_amt and d_diff_loss is :%lf: :%lf:",d_diff_amt,d_diff_loss );
              i_trnsctn_temp = fn_aborttran( c_ServiceName, i_trnsctn_temp, ptr_st_err_msg->c_err_msg);
              if ( i_trnsctn_temp == -1 )
              {
									tpfree((char *)ptr_fml_Sbuf);				/*** Ver 5.7 ***/
                  /* tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );			** Ver 5.7 ***/
		 							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );					/*** Ver 5.7 ***/
              }

              i_returncode = tpresume(&tranid, 0);

              if ( i_returncode == -1 )
              {
									tpfree((char *)ptr_fml_Sbuf);				/*** Ver 5.7 ***/
                  /* tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );			** Ver 5.7 ***/
		 							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );					/*** Ver 5.7 ***/
              }

            /********* BLOCK RECALCULATED DIFFERENCE MARGIN ************/
              if( st_ip_xchngbk.l_ors_msg_typ == ORS_MOD_ORD_ACPT )
            {
                strcpy( c_narration_id , BLK_ROMARG_ORDMOD_ACCPT);
            }
            else if( st_ip_xchngbk.l_ors_msg_typ == ORS_MOD_ORD_RJCT )
            {
                 strcpy( c_narration_id , BLK_ROMARG_ORDMOD_RJCT);
            }
            else if ( st_ip_xchngbk.l_ors_msg_typ == ORS_NEW_ORD_ACPT)
            {
                strcpy( c_narration_id , BLK_ROMARG_ORD_ACCPT);
            }
            else if( st_ip_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_RJCT )
            {
                strcpy( c_narration_id , BLK_ROMARG_ORDCAN_RJCT);
            }           

              if( d_diff_amt < 0 )
              {
                 i_returncode = fn_upd_spnlimits(  c_ServiceName,
                                                   &st_pstn_actn_var,
                                                   ptr_st_err_msg,
                                                   c_narration_id,
                                                   DEBIT_TILL_LIMIT,
                                                   d_diff_amt,
                                                   &d_balance_amt );
                  if ( i_returncode != 0 )
                  {
                       fn_errlog ( c_ServiceName, "S31810", LIBMSG, c_err_msg.arr );																		/** VQC **/
                       fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );	
									 		 tpfree((char *)ptr_fml_Sbuf);				/*** Ver 5.7 ***/
                   		 /* tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );			** Ver 5.7 ***/
		 							 		 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );					/*** Ver 5.7 ***/
                  }
                  d_diff_amt = (d_diff_amt * -1)+d_balance_amt;
              }
              else /** do not block difference margin ***/
              {
                    d_diff_amt = 0;
              }

             /********* BLOCK RECALCULATED PROFIT AND LOSS ************/
            if( st_ip_xchngbk.l_ors_msg_typ == ORS_MOD_ORD_ACPT )
            {
                strcpy( c_narration_id , BLK_ROPNL_ORDMOD_ACCPT);
            }
            else if( st_ip_xchngbk.l_ors_msg_typ == ORS_MOD_ORD_RJCT )
            {
                 strcpy( c_narration_id ,BLK_ROPNL_ORDMOD_RJCT);
            }
            else if ( st_ip_xchngbk.l_ors_msg_typ == ORS_NEW_ORD_ACPT)
            {
                strcpy( c_narration_id , BLK_ROPNL_ORD_ACCPT);
            }
            else if( st_ip_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_RJCT )
            {
                strcpy( c_narration_id ,BLK_ROPNL_ORDCAN_RJCT); 
            }

              if( d_diff_loss < 0 )
              {
                 i_returncode = fn_upd_spnlimits(  c_ServiceName,
                                                   &st_pstn_actn_var,
                                                   ptr_st_err_msg,
                                                   c_narration_id,
                                                   DEBIT_TILL_LIMIT,
                                                   d_diff_loss,
                                                   &d_balance_amt );
                  if ( i_returncode != 0 )
                  {
                       fn_errlog ( c_ServiceName, "S31815", LIBMSG, c_err_msg.arr );																				/** VQC **/
                       fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
									 		 tpfree((char *)ptr_fml_Sbuf);				/*** Ver 5.7 ***/
                   		 /* tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );			** Ver 5.7 ***/
		 							 		 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );					/*** Ver 5.7 ***/
                  }
                  d_diff_loss = (d_diff_loss  * -1)+d_balance_amt;
              }
              else
              {
                   d_diff_loss = 0;
              }
              fn_userlog(c_ServiceName," ***** d_diff_amt is :%lf: and d_diff_loss is :%lf: d_balance_amt :%lf:***** suchita **",d_diff_amt,d_diff_loss,d_balance_amt);

              EXEC SQL
              UPDATE FOD_FO_ORDR_DTLS
              SET    FOD_SROLL_DIFF_AMT = :d_diff_amt,FOD_SROLL_LSS_AMT = :d_diff_loss
              WHERE  FOD_ORDR_RFRNC = :st_ip_xchngbk.c_ordr_rfrnc;

              if( SQLCODE != 0 )
              {
                   /* fn_errlog ( c_ServiceName, "S31820", LIBMSG, c_err_msg.arr );			** VQC * commented in ver 5.7 ***/
                   fn_errlog ( c_ServiceName, "S31825", SQLMSG, c_err_msg.arr );			/*** Ver 5.7 ***/
                   fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
									 tpfree((char *)ptr_fml_Sbuf);				/*** Ver 5.7 ***/
                   /* tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );			** Ver 5.7 ***/
		 							 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );					/*** Ver 5.7 ***/
              }
              break;
       case ORS_CAN_ORD_ACPT:
	           fn_userlog(c_ServiceName,"****  INSIDE ORS_CAN_ORD_ACPT **** and l_sroll_diff_amt is :%ld:",l_sroll_diff_amt);
             
            strcpy( c_narration_id , REL_ROMARG_ORDCAN_ACCPT);

            if( l_sroll_diff_amt != 0 )
            {
                 i_returncode = fn_upd_spnlimits(  c_ServiceName,
                                                   &st_pstn_actn_var,
                                                   ptr_st_err_msg,
                                                   c_narration_id,
                                                   DEBIT_WITHOUT_LIMIT, 
                                                   (double)l_sroll_diff_amt,
                                                   &d_balance_amt );

             if ( i_returncode != 0 )
             {
                  fn_errlog ( c_ServiceName, "S31830", LIBMSG, c_err_msg.arr );																							/** VQC **/
                  fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
									tpfree((char *)ptr_fml_Sbuf);				/*** Ver 5.7 ***/
                  /* tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );			** Ver 5.7 ***/
		 							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );					/*** Ver 5.7 ***/
             }
             l_sroll_diff_amt = 0;
             }
             
             strcpy( c_narration_id , REL_ROPNL_ORDCAN_ACCPT);
             if( l_sroll_lss_amt != 0)
             {
                 i_returncode = fn_upd_spnlimits(  c_ServiceName,
                                                   &st_pstn_actn_var,
                                                   ptr_st_err_msg,
                                                   c_narration_id, 
                                                   DEBIT_WITHOUT_LIMIT, 
                                                   (double)l_sroll_lss_amt,
                                                   &d_balance_amt );
              if ( i_returncode != 0 )
              {
                   fn_errlog ( c_ServiceName, "S31835", LIBMSG, c_err_msg.arr );																			/** VQC **/
                   fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
									 tpfree((char *)ptr_fml_Sbuf);				/*** Ver 5.7 ***/
                   /* tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );			** Ver 5.7 ***/
		 							 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );					/*** Ver 5.7 ***/

              }
               l_sroll_lss_amt = 0;
              }

             EXEC SQL
                  UPDATE FOD_FO_ORDR_DTLS
                  SET    FOD_SROLL_DIFF_AMT = :l_sroll_diff_amt,FOD_SROLL_LSS_AMT = :l_sroll_lss_amt
                  WHERE  FOD_ORDR_RFRNC = :st_ip_xchngbk.c_ordr_rfrnc;


                  if( SQLCODE != 0 )
                  {
                   /* fn_errlog ( c_ServiceName, "S31840", LIBMSG, c_err_msg.arr );	** VQC * Commented in Ver 5.7 **/
                   fn_errlog ( c_ServiceName, "S31845", SQLMSG, c_err_msg.arr );		/*** Ver 5.7 ***/
                   fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
									 tpfree((char *)ptr_fml_Sbuf);				/*** Ver 5.7 ***/
                   /* tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );			** Ver 5.7 ***/
		 							 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );					/*** Ver 5.7 ***/
                  }
            break;
       case ORS_ORD_EXP:
       case ORS_NEW_ORD_RJCT:
            fn_userlog(c_ServiceName,"**** INSIDE ORS_NEW_ORD_RJCT / ORS_ORD_EXP ****");
            if( st_ip_xchngbk.l_ors_msg_typ == ORS_ORD_EXP  )
            {
                strcpy( c_narration_id , ON_ROORD_REJ);
            }
            else 
            {
                 strcpy( c_narration_id , ON_ROORD_REJ);
            }
            if( l_sroll_diff_amt != 0 )
            {
                 i_returncode = fn_upd_spnlimits(  c_ServiceName,
                                                   &st_pstn_actn_var,
                                                   ptr_st_err_msg,
                                                   c_narration_id,
                                                   DEBIT_WITHOUT_LIMIT,
                                                   (double)l_sroll_diff_amt,
                                                   &d_balance_amt );

             if ( i_returncode != 0 )
             {
                  fn_errlog ( c_ServiceName, "S31850", LIBMSG, c_err_msg.arr );																						/** VQC **/ 
                  fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
									tpfree((char *)ptr_fml_Sbuf);				/*** Ver 5.7 ***/
                  /* tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );			** Ver 5.7 ***/
		 							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );					/*** Ver 5.7 ***/
             }
             l_sroll_diff_amt = 0;
             }

             if( l_sroll_lss_amt != 0)
             {
                 i_returncode = fn_upd_spnlimits(  c_ServiceName,
                                                   &st_pstn_actn_var,
                                                   ptr_st_err_msg,
                                                   c_narration_id,
                                                   DEBIT_WITHOUT_LIMIT,
                                                   (double)l_sroll_lss_amt,
                                                   &d_balance_amt );
              if ( i_returncode != 0 )
              {
                   fn_errlog ( c_ServiceName, "S31855", LIBMSG, c_err_msg.arr );																						/** VQC ***/
                   fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
									 tpfree((char *)ptr_fml_Sbuf);				/*** Ver 5.7 ***/
                   /* tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );			** Ver 5.7 ***/
		 							 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );					/*** Ver 5.7 ***/
              }
               l_sroll_lss_amt = 0;
            }
             EXEC SQL
                  UPDATE FOD_FO_ORDR_DTLS
                  SET    FOD_SROLL_DIFF_AMT = :l_sroll_diff_amt,FOD_SROLL_LSS_AMT=:l_sroll_lss_amt
                  WHERE  FOD_ORDR_RFRNC = :st_ip_xchngbk.c_ordr_rfrnc;

                  if( SQLCODE != 0 )
                  {
                   /* fn_errlog ( c_ServiceName, "S31860", LIBMSG, c_err_msg.arr );		*** VQC * Commented in Ver 5.7 ***/
                   fn_errlog ( c_ServiceName, "S31865", SQLMSG, c_err_msg.arr );		/*** Ver 5.7 ***/
                   fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
									 tpfree((char *)ptr_fml_Sbuf);				/*** Ver 5.7 ***/
                   /* tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );			** Ver 5.7 ***/
		 							 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );					/*** Ver 5.7 ***/
                  }
             break;
 
  }
 } 
  /*********** ver 4.8 ends *******/  

   /** Ver 7.3 starts **/

   if(c_src_flg == 'H')
   {
   EXEC SQL
     SELECT COUNT(1)
     INTO :i_gtt_flg
     FROM FGL_FO_GTT_LEGDTLS WHERE FGL_FRESH_ORDR_REF = :st_ip_xchngbk.c_ordr_rfrnc;

   if ( SQLCODE != 0 )
   {
     fn_errlog ( c_ServiceName, "S31870", SQLMSG, c_err_msg.arr );
     fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
     tpfree((char *)ptr_fml_Sbuf);
     Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
     tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
   }

   fn_userlog(c_ServiceName,"i_gtt_flg is :%d:", i_gtt_flg);

   if( i_gtt_flg > 0 )
   {
     if( st_ip_xchngbk.l_ors_msg_typ == ORS_NEW_ORD_RJCT ||
         st_ip_xchngbk.l_ors_msg_typ == ORS_ORD_EXP ||
         st_ip_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_ACPT )
     {
       EXEC SQL
               UPDATE FGL_FO_GTT_LEGDTLS
               SET FGL_GTT_STTS= 'C'
               WHERE FGL_FRESH_ORDR_REF = :st_ip_xchngbk.c_ordr_rfrnc;

       if ( SQLCODE != 0 )
       {
               fn_errlog ( c_ServiceName, "S31875", SQLMSG, c_err_msg.arr );
               fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
               tpfree((char *)ptr_fml_Sbuf);
               Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
               tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
       }
     }
   }
   }
   /** Ver 7.3 ends **/

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog( c_ServiceName, "Before Commit");
	}

	if ( i_commit_flg == 0 ) /*** Ver 1.8 ***/
	{
		if ( fn_committran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg ) == -1 )
		{
		 fn_errlog ( c_ServiceName, "S31880", LIBMSG, c_err_msg.arr );				/*** VQC ***/
		 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );								/*** VQC ***/
		 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr ); /*** Ver 3.8 *** VQC ***/
		 /***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
		 tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
		 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
  /* Ver 7.2 Starts here **/
    i_returncode = fn_upd_mrgn_reporting( st_op_orderbook.c_cln_mtch_accnt,
                                      st_op_orderbook.c_xchng_cd,
                                        c_ServiceName,
                                        c_err_msg.arr);

    if ( i_returncode != 0 )
    {
      fn_errlog ( c_ServiceName, "S31885", LIBMSG, c_err_msg.arr );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree((char *)ptr_fml_Sbuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    /** Ver 7.2 Ends Here ***/

	i_commit_flg = 0; /*** Ver 1.8 ***/

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog( c_ServiceName, "After Commit");
	}

	/*** Ver 2.5 starts ***/
	
	if (st_op_orderbook.c_prd_typ == SLTP_FUTUREPLUS || st_op_orderbook.c_prd_typ == OPTIONPLUS) /** option plus added in Ver 2.6 ***/
	{
		MEMSET(st_xchngbk);

		if(DEBUG_MSG_LVL_2)
		{
			fn_userlog( c_ServiceName, "Fetch details of Order Ref:%s:", st_op_orderbook.c_sltp_ord_rfrnc);
		}

		i_cnt = 0; 
	  MEMSET(c_ordr_rfrnce);  /**** Added in ver 3.0 **********/   
		strcpy(c_ordr_rfrnce,st_op_orderbook.c_sltp_ord_rfrnc); /**** Added in Ver 3.0 ****/	

		/****** Commented in Ver 3.0 ***************************
		EXEC SQL
          SELECT FXB_ORS_MSG_TYP,
								 FXB_MDFCTN_CNTR,
								 nvl(to_char(FXB_ACK_TM, 'dd-mon-yyyy hh24:mi:ss'),'*')
          INTO   :st_xchngbk.l_ors_msg_typ,
								 :st_xchngbk.l_mdfctn_cntr,
								 :st_xchngbk.c_ack_tm
          FROM   FXB_FO_XCHNG_BOOK
          WHERE  FXB_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc
          AND    fxb_mdfctn_cntr = (select max(FXB_MDFCTN_CNTR)
                                    from   FXB_FO_XCHNG_BOOK
                                    where  FXB_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc
                                   ) 
				  AND    FXB_RMS_PRCSD_FLG = 'N';    ***********************/

				/********** Ver 3.0 Starts **************************/
			EXEC SQL
			SELECT  FXB_ORS_MSG_TYP,
							FXB_MDFCTN_CNTR,
							nvl(to_char(FXB_ACK_TM, 'dd-mon-yyyy hh24:mi:ss'),'*'),
           		NVL(FXB_XCHNG_CNCLD_QTY,0)                            /***** Ver 3.8 ***/
			 INTO   :st_xchngbk.l_ors_msg_typ,
							:st_xchngbk.l_mdfctn_cntr,
							:st_xchngbk.c_ack_tm,
							:st_xchngbk.l_xchng_can_qty														/***** Ver 3.8 ******/
			 FROM   FXB_FO_XCHNG_BOOK
       WHERE  FXB_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc
       AND    FXB_MDFCTN_CNTR =
			(
					SELECT min(FXB_MDFCTN_CNTR)
					FROM   FXB_FO_XCHNG_BOOK
					WHERE  FXB_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc
					AND    FXB_JIFFY =
						(	select min(FXB_JIFFY)
							from   FXB_FO_XCHNG_BOOK
							where  FXB_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc
							AND    FXB_RMS_PRCSD_FLG = 'N'
						)
					AND FXB_RMS_PRCSD_FLG = 'N'
			)
		AND    FXB_RMS_PRCSD_FLG = 'N';
/**************************** Ver 3.0 Ends *********************************/

		if(SQLCODE !=0 )
		{
			/*** i_cnt = 1;	Commented in  Ver 3.0 ***/
      if(DEBUG_MSG_LVL_0)    /*** Ver 3.1 ***/
      {		
				fn_userlog( c_ServiceName, "No opposite leg unprocessed record");
				fn_userlog( c_ServiceName, "Checking for Same leg "); /*** Added in ver 3.0 ***/
			}
			fn_errlog ( c_ServiceName, "S31890", SQLMSG, c_err_msg.arr );				/*** VQC ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );							/*** VQC ***/

      /***** Added in Ver 3.0 Starts ********/

			MEMSET(st_xchngbk.l_ors_msg_typ);
			MEMSET(st_xchngbk.l_mdfctn_cntr);
			MEMSET(st_xchngbk.c_ack_tm);
			EXEC SQL
			SELECT FXB_ORS_MSG_TYP,
						 FXB_MDFCTN_CNTR,
							nvl(to_char(FXB_ACK_TM, 'dd-mon-yyyy hh24:mi:ss'),'*'),
              NVL(FXB_XCHNG_CNCLD_QTY,0)                            /***** Ver 3.8 ***/
			INTO   :st_xchngbk.l_ors_msg_typ,
						 :st_xchngbk.l_mdfctn_cntr,
						 :st_xchngbk.c_ack_tm,
             :st_xchngbk.l_xchng_can_qty                           /*** Ver 3.8 ***/
			FROM   FXB_FO_XCHNG_BOOK
			WHERE  FXB_ORDR_RFRNC = :st_ip_orderbook.c_ordr_rfrnc
			AND    FXB_JIFFY =
					(select min(FXB_JIFFY)
					from   FXB_FO_XCHNG_BOOK
					where  FXB_ORDR_RFRNC =  :st_ip_orderbook.c_ordr_rfrnc
					AND    FXB_RMS_PRCSD_FLG = 'N'
			)
			AND    FXB_RMS_PRCSD_FLG = 'N';

			if(SQLCODE !=0 )
			{
				i_cnt = 1;
				fn_userlog( c_ServiceName, "No Same leg to process ");
				fn_errlog ( c_ServiceName, "S31895", SQLMSG, c_err_msg.arr );				/*** VQC ***/
			}
			else
			{
      if(DEBUG_MSG_LVL_0)    /*** Ver 3.1 ***/
      {
				fn_userlog( c_ServiceName, "Same leg unprocessed ... so process it...");
			}	
				strcpy(c_ordr_rfrnce,st_ip_orderbook.c_ordr_rfrnc);
				if(DEBUG_MSG_LVL_0)  /*** Ver 3.1 ***/
				{
					fn_userlog( c_ServiceName, "Before Calling  SFO_PRCS_CVRRSP for Order Ref:%s:", st_ip_orderbook.c_ordr_rfrnc);							
				}
			}
			/****************** Ver 3.0 Ends ********************/
		}
		else
		{ 
			if(DEBUG_MSG_LVL_0)    /*** Ver 3.1 ***/
			{
				fn_userlog( c_ServiceName, "Opposite leg unprocessed record exist so process it...");
				fn_userlog( c_ServiceName, "Before Calling  SFO_PRCS_CVRRSP for Order Ref:%s:", st_op_orderbook.c_sltp_ord_rfrnc); /*** Added in Ver 3.0 ****/
			}
		}

		if (i_cnt != 1)
		{
			fn_cpy_ddr ( st_xchngbk.c_rout_crt );
			strcpy(st_xchngbk.c_entry_dt_tm,st_xchngbk.c_ack_tm);
			
		/******** Ver 3.0 Starts ******************** Commented in Ver 3.8 **********
			EXEC SQL
				SELECT    NVL(SUM(ftd_exctd_qty),0)
          INTO    :l_ftd_ord_exe_qty
          FROM    ftd_fo_trd_dtls
          WHERE   ftd_ordr_rfrnc = :c_ordr_rfrnce;

			  if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
        {
          fn_errlog ( c_ServiceName, "S31900", SQLMSG,c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpfree((char *)ptr_fml_Sbuf);  ** Ver 3.8 **
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        } 
  		if(DEBUG_MSG_LVL_3)  *** Ver 3.1 ***
  		{
        fn_userlog( c_ServiceName, "l_ftd_ord_exe_qty: %ld",l_ftd_ord_exe_qty);	
    	}	
		************* 3.0 Ends *************** Commented Ver 3.8 Ends ***************/
	
			if(DEBUG_MSG_LVL_2)
			{
			/***	fn_userlog( c_ServiceName, "Before Calling  SFO_PRCS_CVRRSP for Order Ref:%s:", st_op_orderbook.c_sltp_ord_rfrnc); *** Commented in Ver 3.0 ****/
				fn_userlog( c_ServiceName, "st_xchngbk.c_entry_dt_tm:%s:", st_xchngbk.c_entry_dt_tm);
				fn_userlog( c_ServiceName, "st_xchngbk.c_ack_tm:%s:", st_xchngbk.c_ack_tm);
				fn_userlog( c_ServiceName, "st_xchngbk.l_mdfctn_cntrm:%ld:", st_xchngbk.l_mdfctn_cntr);
				fn_userlog( c_ServiceName, "st_xchngbk.l_ors_msg_typ:%ld:", st_xchngbk.l_ors_msg_typ);
			}


			i_xchngbkerr [0] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_xchngbk.c_rout_crt,0);
			i_ferr[0] = Ferror32;
			i_xchngbkerr [1] = Fadd32(ptr_fml_Sbuf,FFO_ORDR_RFRNC, (char *)c_ordr_rfrnce,0); /*** variable change in ver 3.0 ***/
			i_ferr[1] = Ferror32;
			i_xchngbkerr [2] = Fadd32(ptr_fml_Sbuf,FFO_ORS_MSG_TYP, (char *)&st_xchngbk.l_ors_msg_typ,0);
			i_ferr[2] = Ferror32;
			i_xchngbkerr [3] = Fadd32(ptr_fml_Sbuf,FFO_MDFCTN_CNTR, (char *)&st_xchngbk.l_mdfctn_cntr,0);
			i_ferr[3] = Ferror32;
			i_xchngbkerr [4] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM, (char *)st_xchngbk.c_ack_tm,0);
			i_ferr[4] = Ferror32;
			i_xchngbkerr [5] = Fadd32(ptr_fml_Sbuf,FFO_PREV_ACK_TM, (char *)st_xchngbk.c_entry_dt_tm,0);
			i_ferr[5] = Ferror32;
			/******* Added in Ver 3.0 Starts ************/
			/** i_xchngbkerr [6] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CAN_QTY, (char *)&l_ftd_ord_exe_qty,0); **** Commented in Ver  3.8 ****/
			i_xchngbkerr [6] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CAN_QTY, (char *)&st_xchngbk.l_xchng_can_qty,0);  /********* Added in Ver 3.8 *******/
			i_ferr[6] = Ferror32;
      /********** Ver 3.0 Ends *********************/
			for (i = 0;i < 7 ;i++)  /***** Ver 3.0 change i<6 to i <7 **********/ 
			{
				if(i_xchngbkerr[i] == -1 )
				{
					fn_userlog( c_ServiceName, "Error in :%d:",i );
					fn_errlog( c_ServiceName, "S31905", Fstrerror32( i_ferr[i]),c_err_msg.arr );			/*** VQC ***/
					tpfree((char *)ptr_fml_Sbuf);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}

			i_returncode  = tpacall ( "SFO_PRCS_CVRRSP", (char *)ptr_fml_Sbuf,0, TPNOTRAN|TPNOREPLY);

			if ( i_returncode != SUCC_BFR )
			{
				/* fn_errlog ( c_ServiceName, "S31910", LIBMSG, c_err_msg.arr );			*** VQC * Commented in Ver 5.7 ***/
				fn_errlog ( c_ServiceName, "S31915", TPMSG, c_err_msg.arr );			/*** Ver 5.7 ***/
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );						/*** VQC ***/
			}
			
			if(DEBUG_MSG_LVL_2)
			{
				fn_userlog( c_ServiceName, "After Calling  SFO_PRCS_CVRRSP for Order Ref:%s:", st_op_orderbook.c_sltp_ord_rfrnc);
			}
		

		}

		if(DEBUG_MSG_LVL_2)
		{
			fn_userlog( c_ServiceName, "Go ahead for trade processing if any");
		}
	}
	/*** Ver 2.5 ends ***/
		/*** Ver 4.8 starts ***/
	else if (st_op_orderbook.c_prd_typ == FUTURES  && c_spl_flg == ROLLOVER_WITH_SPREAD )
	{
	
		MEMSET(st_xchngbk);
    
    fn_userlog( c_ServiceName, "************INSIDE SPREAD ROLLOVER ORDER PROCESSING************");

		if(DEBUG_MSG_LVL_2)
		{
			fn_userlog( c_ServiceName, "Fetch details of Order Ref:%s:", st_op_orderbook.c_sltp_ord_rfrnc);
		}

		i_cnt = 0; 
	  MEMSET(c_ordr_rfrnce);  
		strcpy(c_ordr_rfrnce,st_op_orderbook.c_sltp_ord_rfrnc); 	

			EXEC SQL
			SELECT  FXB_ORS_MSG_TYP,
							FXB_MDFCTN_CNTR,
							nvl(to_char(FXB_ACK_TM, 'dd-mon-yyyy hh24:mi:ss'),'*'),
           		NVL(FXB_XCHNG_CNCLD_QTY,0)                           
			 INTO   :st_xchngbk.l_ors_msg_typ,
							:st_xchngbk.l_mdfctn_cntr,
							:st_xchngbk.c_ack_tm,
							:st_xchngbk.l_xchng_can_qty													
			 FROM   FXB_FO_XCHNG_BOOK
       WHERE  FXB_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc
       AND    FXB_MDFCTN_CNTR =
			(
					SELECT min(FXB_MDFCTN_CNTR)
					FROM   FXB_FO_XCHNG_BOOK
					WHERE  FXB_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc
					AND    FXB_JIFFY =
						(	select min(FXB_JIFFY)
							from   FXB_FO_XCHNG_BOOK
							where  FXB_ORDR_RFRNC = :st_op_orderbook.c_sltp_ord_rfrnc
							AND    FXB_RMS_PRCSD_FLG = 'N'
						)
					AND FXB_RMS_PRCSD_FLG = 'N'
			)
		AND    FXB_RMS_PRCSD_FLG = 'N';

		if(SQLCODE !=0 )
		{
      if(DEBUG_MSG_LVL_0)  
      {		
				fn_userlog( c_ServiceName, "No opposite leg unprocessed record");
				fn_userlog( c_ServiceName, "Checking for Same leg "); 
			}
			fn_errlog ( c_ServiceName, "S31920", SQLMSG, c_err_msg.arr );			/*** VQC ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );						/*** VQC ***/


			MEMSET(st_xchngbk.l_ors_msg_typ);
			MEMSET(st_xchngbk.l_mdfctn_cntr);
			MEMSET(st_xchngbk.c_ack_tm);
			EXEC SQL
			SELECT FXB_ORS_MSG_TYP,
						 FXB_MDFCTN_CNTR,
							nvl(to_char(FXB_ACK_TM, 'dd-mon-yyyy hh24:mi:ss'),'*'),
              NVL(FXB_XCHNG_CNCLD_QTY,0)                         
			INTO   :st_xchngbk.l_ors_msg_typ,
						 :st_xchngbk.l_mdfctn_cntr,
						 :st_xchngbk.c_ack_tm,
             :st_xchngbk.l_xchng_can_qty                          
			FROM   FXB_FO_XCHNG_BOOK
			WHERE  FXB_ORDR_RFRNC = :st_ip_orderbook.c_ordr_rfrnc
			AND    FXB_JIFFY =
					(select min(FXB_JIFFY)
					from   FXB_FO_XCHNG_BOOK
					where  FXB_ORDR_RFRNC =  :st_ip_orderbook.c_ordr_rfrnc
					AND    FXB_RMS_PRCSD_FLG = 'N'
			)
			AND    FXB_RMS_PRCSD_FLG = 'N';

			if(SQLCODE !=0 )
			{
				i_cnt = 1;
				fn_userlog( c_ServiceName, "No Same leg to process ");
				fn_errlog ( c_ServiceName, "S31925", SQLMSG, c_err_msg.arr );				/*** VQC ***/
			}
			else
			{
				if(DEBUG_MSG_LVL_0)    
				{
					fn_userlog( c_ServiceName, "Same leg unprocessed ... so process it...");
				}	
				strcpy(c_ordr_rfrnce,st_ip_orderbook.c_ordr_rfrnc);
				if(DEBUG_MSG_LVL_0)  
				{
					fn_userlog( c_ServiceName, "Before Calling  SFO_PRCS_CVRRSP for Order Ref:%s:", st_ip_orderbook.c_ordr_rfrnc);							
				}
			}
		}
		else
		{ 
			if(DEBUG_MSG_LVL_0)    
			{
				fn_userlog( c_ServiceName, "Opposite leg unprocessed record exist so process it...");
				fn_userlog( c_ServiceName, "Before Calling  SFO_PRCS_CVRRSP for Order Ref:%s:", st_op_orderbook.c_sltp_ord_rfrnc); /*** Added in Ver 3.0 ****/
			}
		}

		if (i_cnt != 1)
		{
			fn_cpy_ddr ( st_xchngbk.c_rout_crt );
			strcpy(st_xchngbk.c_entry_dt_tm,st_xchngbk.c_ack_tm);
			
			if(DEBUG_MSG_LVL_2)
			{
				fn_userlog( c_ServiceName, "st_xchngbk.c_entry_dt_tm:%s:", st_xchngbk.c_entry_dt_tm);
				fn_userlog( c_ServiceName, "st_xchngbk.c_ack_tm:%s:", st_xchngbk.c_ack_tm);
				fn_userlog( c_ServiceName, "st_xchngbk.l_mdfctn_cntrm:%ld:", st_xchngbk.l_mdfctn_cntr);
				fn_userlog( c_ServiceName, "st_xchngbk.l_ors_msg_typ:%ld:", st_xchngbk.l_ors_msg_typ);
			}

      if( st_xchngbk.l_ors_msg_typ == ORS_SPN_ORD_ACPT)
			{
				st_xchngbk.l_ors_msg_typ = ORS_NEW_ORD_ACPT;
			}
			else if(st_xchngbk.l_ors_msg_typ == ORS_SPN_ORD_RJCT)
			{
				st_xchngbk.l_ors_msg_typ = ORS_NEW_ORD_RJCT;
			}
			else if(st_xchngbk.l_ors_msg_typ == ORS_SPRD_MOD_ACPT)
			{
				st_xchngbk.l_ors_msg_typ = ORS_MOD_ORD_ACPT;
			}
			else if(st_xchngbk.l_ors_msg_typ == ORS_SPRD_MOD_RJCT)
			{
				st_xchngbk.l_ors_msg_typ = ORS_MOD_ORD_RJCT;
			}
			else if(st_xchngbk.l_ors_msg_typ == ORS_SPRD_CAN_RJCT)
			{
				st_xchngbk.l_ors_msg_typ = ORS_CAN_ORD_RJCT;
			}
			else if(st_xchngbk.l_ors_msg_typ == ORS_SPRD_CAN_ACPT)
			{
				st_xchngbk.l_ors_msg_typ = ORS_CAN_ORD_ACPT;
			}
			fn_userlog( c_ServiceName, "INPUT TO SERVICE st_xchngbk.l_ors_msg_typ:%ld:", st_xchngbk.l_ors_msg_typ);

			i_xchngbkerr [0] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_xchngbk.c_rout_crt,0);
			i_ferr[0] = Ferror32;
			i_xchngbkerr [1] = Fadd32(ptr_fml_Sbuf,FFO_ORDR_RFRNC, (char *)c_ordr_rfrnce,0);
			i_ferr[1] = Ferror32;
			i_xchngbkerr [2] = Fadd32(ptr_fml_Sbuf,FFO_ORS_MSG_TYP, (char *)&st_xchngbk.l_ors_msg_typ,0);
			i_ferr[2] = Ferror32;
			i_xchngbkerr [3] = Fadd32(ptr_fml_Sbuf,FFO_MDFCTN_CNTR, (char *)&st_xchngbk.l_mdfctn_cntr,0);
			i_ferr[3] = Ferror32;
			i_xchngbkerr [4] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM, (char *)st_xchngbk.c_ack_tm,0);
			i_ferr[4] = Ferror32;
			i_xchngbkerr [5] = Fadd32(ptr_fml_Sbuf,FFO_PREV_ACK_TM, (char *)st_xchngbk.c_entry_dt_tm,0);
			i_ferr[5] = Ferror32;
			i_xchngbkerr [6] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CAN_QTY, (char *)&st_xchngbk.l_xchng_can_qty,0);  
			i_ferr[6] = Ferror32;
 			for (i = 0;i < 7 ;i++) 
			{
				if(i_xchngbkerr[i] == -1 )
				{
					fn_userlog( c_ServiceName, "Error in :%d:",i );
					fn_errlog( c_ServiceName, "S31930", Fstrerror32( i_ferr[i]),c_err_msg.arr );			/*** VQC ***/
					tpfree((char *)ptr_fml_Sbuf);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}

      fn_userlog( c_ServiceName, "******** BEFORE CALL TO SFO_PRCS_CVRRSP FOR :%s:",c_ordr_rfrnce);

			i_returncode  = tpacall ( "SFO_PRCS_CVRRSP", (char *)ptr_fml_Sbuf,0, TPNOTRAN|TPNOREPLY);

			if ( i_returncode != SUCC_BFR )
			{
				/*fn_errlog ( c_ServiceName, "S31935", LIBMSG, c_err_msg.arr );				*** VQC * Commented in Ver 5.7 ***/
				fn_errlog ( c_ServiceName, "S31940", TPMSG, c_err_msg.arr );					/*** Ver 5.7 ***/
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );								/*** VQC ***/
			}
			
			if(DEBUG_MSG_LVL_2)
			{
				fn_userlog( c_ServiceName, "After Calling  SFO_PRCS_CVRRSP for Order Ref:%s:", st_op_orderbook.c_sltp_ord_rfrnc);
			}
		

		}
	}
	/**** Ver 4.8 ends ***/
	/**** Added in Ver 3.0  Starts ******************/
  else if ( st_op_orderbook.c_prd_typ == FUTURES  || st_op_orderbook.c_prd_typ == OPTIONS)
	{
			i_cnt =0;

			MEMSET(st_xchngbk.l_ors_msg_typ);
      MEMSET(st_xchngbk.l_mdfctn_cntr);
      MEMSET(st_xchngbk.c_ack_tm);
      
      EXEC SQL
      SELECT FXB_ORS_MSG_TYP,
						 FXB_MDFCTN_CNTR,
						 nvl(to_char(FXB_ACK_TM, 'dd-mon-yyyy hh24:mi:ss'),'*'),
						 NVL(FXB_XCHNG_CNCLD_QTY, 0)                                    /***** Ver 3.8 ****/
		  INTO   :st_xchngbk.l_ors_msg_typ,
						 :st_xchngbk.l_mdfctn_cntr,
						 :st_xchngbk.c_ack_tm,
         		 :st_xchngbk.l_xchng_can_qty                                 /***** Ver 3.8 ****/
			FROM   FXB_FO_XCHNG_BOOK
			WHERE  FXB_ORDR_RFRNC = :st_ip_orderbook.c_ordr_rfrnc
			AND    FXB_JIFFY =
					(select min(FXB_JIFFY)
					from   FXB_FO_XCHNG_BOOK
					where  FXB_ORDR_RFRNC =  :st_ip_orderbook.c_ordr_rfrnc
					AND    FXB_RMS_PRCSD_FLG = 'N'
			)
			AND    FXB_RMS_PRCSD_FLG = 'N';

			if(SQLCODE !=0)
      {	
				i_cnt =1;
        if(DEBUG_MSG_LVL_0)    /*** Ver 3.1 ***/
        {
					fn_userlog( c_ServiceName, "No Same leg to process ");
		    }
				fn_errlog ( c_ServiceName, "S31945", SQLMSG, c_err_msg.arr );				/*** VQC ***/
			}
			else
			{
        if(DEBUG_MSG_LVL_0)    /*** Ver 3.1 ***/
        {
					fn_userlog( c_ServiceName, "Same leg unprocessed ... so process it...");
					fn_userlog( c_ServiceName, "Before Calling  SFO_PRCS_CVRRSP for Order Ref:%s:", st_ip_orderbook.c_ordr_rfrnc);
				}
			}

			/**** ver 3.3 Starts ******************/
			if(st_xchngbk.l_ors_msg_typ == ORS_2LN_ORD_ACPT || st_xchngbk.l_ors_msg_typ == ORS_3LN_ORD_ACPT ||
          st_xchngbk.l_ors_msg_typ == ORS_2L_ORD_CNCL || st_xchngbk.l_ors_msg_typ == ORS_3L_ORD_CNCL)
      {
        l_ors_msg_typ = st_xchngbk.l_ors_msg_typ;
        strcpy(c_ipord_ref, st_ip_orderbook.c_ordr_rfrnc);

        i_returncode = fn_spn_spd_acpt(c_ServiceName,c_ipord_ref,l_ors_msg_typ);
        if( i_returncode == -1)
        {
          /* fn_errlog(c_ServiceName, "S31950", SQLMSG, c_err_msg.arr);			*** VQC * Commented in Ver 5.7 ***/
          fn_errlog(c_ServiceName, "S31955", LIBMSG, c_err_msg.arr);							/*** Ver 5.7 ***/
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );									/*** VQC ***/
					tpfree((char *)ptr_fml_Sbuf);  /** Ver 3.8 **/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }
      /*** Ver 3.3  Ends ***/
			if (i_cnt != 1 && (st_xchngbk.l_ors_msg_typ!=ORS_2LN_ORD_ACPT && st_xchngbk.l_ors_msg_typ!= ORS_3LN_ORD_ACPT &&       
				     st_xchngbk.l_ors_msg_typ != ORS_2L_ORD_CNCL && st_xchngbk.l_ors_msg_typ != ORS_3L_ORD_CNCL)) /*** if condition changes in ver 3.3 ***/
    	{
      	fn_cpy_ddr ( st_xchngbk.c_rout_crt );
      	strcpy(st_xchngbk.c_entry_dt_tm,st_xchngbk.c_ack_tm);

				/********** Commented in Ver 3.8 **************
			
				EXEC SQL
          SELECT  NVL(SUM(ftd_exctd_qty),0)
          INTO    :l_ftd_ord_exe_qty
          FROM    ftd_fo_trd_dtls
          WHERE   ftd_ordr_rfrnc = :st_ip_orderbook.c_ordr_rfrnc;

        if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
        {
          fn_errlog ( c_ServiceName, "S31960", SQLMSG,c_err_msg );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
  
				if(DEBUG_MSG_LVL_3) *** Ver 3.1 ***
  			{
        	fn_userlog( c_ServiceName, "l_ftd_ord_exe_qty: %ld",l_ftd_ord_exe_qty);	
				}

				********* Commented in Ver 3.8 Ends ************/

				if(DEBUG_MSG_LVL_2)
				{
					fn_userlog( c_ServiceName, "st_xchngbk.c_entry_dt_tm:%s:", st_xchngbk.c_entry_dt_tm);
					fn_userlog( c_ServiceName, "st_xchngbk.c_ack_tm:%s:", st_xchngbk.c_ack_tm);
					fn_userlog( c_ServiceName, "st_xchngbk.l_mdfctn_cntrm:%ld:", st_xchngbk.l_mdfctn_cntr);
					fn_userlog( c_ServiceName, "st_xchngbk.l_ors_msg_typ:%ld:", st_xchngbk.l_ors_msg_typ);
				}
				
				/*** Commented in Ver 4.0  Starts *** 
				ptr_fml_Sbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );
				if ( ptr_fml_Sbuf == NULL )
				{
					fn_errlog ( c_ServiceName, "S31965", LIBMSG, c_err_msg );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );  ** Ver 3.8 **
        	***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				 *** Ver 4.0 Ends ***/

				i_xchngbkerr [0] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_xchngbk.c_rout_crt,0);
      	i_ferr[0] = Ferror32;
      	i_xchngbkerr [1] = Fadd32(ptr_fml_Sbuf,FFO_ORDR_RFRNC, (char *)st_ip_orderbook.c_ordr_rfrnc,0);
      	i_ferr[1] = Ferror32;
      	i_xchngbkerr [2] = Fadd32(ptr_fml_Sbuf,FFO_ORS_MSG_TYP, (char *)&st_xchngbk.l_ors_msg_typ,0);
      	i_ferr[2] = Ferror32;
      	i_xchngbkerr [3] = Fadd32(ptr_fml_Sbuf,FFO_MDFCTN_CNTR, (char *)&st_xchngbk.l_mdfctn_cntr,0);
      	i_ferr[3] = Ferror32;
      	i_xchngbkerr [4] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM, (char *)st_xchngbk.c_ack_tm,0);
      	i_ferr[4] = Ferror32;
      	i_xchngbkerr [5] = Fadd32(ptr_fml_Sbuf,FFO_PREV_ACK_TM, (char *)st_xchngbk.c_entry_dt_tm,0);
      	i_ferr[5] = Ferror32;
				/** i_xchngbkerr [6] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CAN_QTY, (char *)&l_ftd_ord_exe_qty,0);   *** Commented in Ver 3.8 ******/
				i_xchngbkerr [6] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CAN_QTY, (char *)&st_xchngbk.l_xchng_can_qty,0); /**** Ver 3.8 *****/
      	i_ferr[6] = Ferror32;

      	for (i = 0;i < 7 ;i++)
      	{
        	if(i_xchngbkerr[i] == -1 )
        	{
          	fn_userlog( c_ServiceName, "Error in :%d:",i );
          	fn_errlog( c_ServiceName, "S31970", Fstrerror32( i_ferr[i]),c_err_msg.arr );			/*** VQC ***/
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );														/*** VQC ***/
          	tpfree((char *)ptr_fml_Sbuf);
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}
      	}

 				i_returncode  = tpacall ( "SFO_PRCS_CVRRSP", (char *)ptr_fml_Sbuf,0, TPNOTRAN|TPNOREPLY);

      	if ( i_returncode != SUCC_BFR )
      	{
        	/* fn_errlog ( c_ServiceName, "S31975", LIBMSG, c_err_msg.arr );				*** VQC * Commented in Ver 5.7 **/
        	fn_errlog ( c_ServiceName, "S31980", TPMSG, c_err_msg.arr );												/*** Ver 5.7 ***/
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );															/*** VQC ***/
      	}

      	if(DEBUG_MSG_LVL_2)
      	{
        	fn_userlog( c_ServiceName, "After Calling  SFO_PRCS_CVRRSP for Order Ref:%s:", st_op_orderbook.c_sltp_ord_rfrnc);
				}
			/***	tpfree((char *)ptr_fml_Sbuf);  *** Commented in Ver 4.0 ***/
			}
			if(DEBUG_MSG_LVL_2)
    	{
      	fn_userlog( c_ServiceName, "Go ahead for trade processing if any");
    	}
		}	

/****** Ver 3.0 Ends *****************************/
	/*** Commented in Ver 2.7 Starts ***/
/*	if ( st_op_orderbook.c_prd_typ != SLTP_FUTUREPLUS && st_op_orderbook.c_prd_typ != OPTIONPLUS )	*** Ver 2.5 *** optionplus in Ver 2.6 ****
	{
  EXEC SQL
		DECLARE	cur_trd CURSOR FOR
		SELECT	ftd_clm_mtch_accnt,
						ftd_xchng_cd,
						ftd_prdct_typ,
						ftd_indstk,
						ftd_undrlyng,
						to_char(ftd_expry_dt,'DD-Mon-YYYY'),
						ftd_exer_typ,
						ftd_opt_typ,
						ftd_strk_prc,
						ftd_ordr_rfrnc,
						ftd_eba_trd_ref,
						ftd_ord_ack_nmbr,
						ftd_xchng_trd_no,
						to_char(ftd_trd_dt,'DD-Mon-YYYY hh24:mi:ss'),
						ftd_trnsctn_typ,
						ftd_trd_flw,
						ftd_exctd_qty,
						ftd_exctd_rt
		FROM		ftd_fo_trd_dtls
		WHERE		ftd_ordr_rfrnc = :st_ip_xchngbk.c_ordr_rfrnc
		AND			ftd_rms_prcsd_flg = 'N';
	
	EXEC SQL
		OPEN	cur_trd;

	}
	else *** Else loop added in Ver 2.5 ***
	{
  EXEC SQL
		DECLARE	cur_trd1 CURSOR FOR
		SELECT	ftd_clm_mtch_accnt,
						ftd_xchng_cd,
						ftd_prdct_typ,
						ftd_indstk,
						ftd_undrlyng,
						to_char(ftd_expry_dt,'DD-Mon-YYYY'),
						ftd_exer_typ,
						ftd_opt_typ,
						ftd_strk_prc,
						ftd_ordr_rfrnc,
						ftd_eba_trd_ref,
						ftd_ord_ack_nmbr,
						ftd_xchng_trd_no,
						to_char(ftd_trd_dt,'DD-Mon-YYYY hh24:mi:ss'),
						ftd_trnsctn_typ,
						ftd_trd_flw,
						ftd_exctd_qty,
						ftd_exctd_rt
		FROM		ftd_fo_trd_dtls
		WHERE		ftd_ordr_rfrnc in (:st_ip_xchngbk.c_ordr_rfrnc, :st_op_orderbook.c_sltp_ord_rfrnc)
		AND			ftd_rms_prcsd_flg = 'N';

		EXEC SQL
		OPEN	cur_trd1;

	}

	if ( SQLCODE != 0 )
	{
  	fn_errlog ( c_ServiceName, "S31985", SQLMSG, c_err_msg );
		if ( st_op_orderbook.c_prd_typ != SLTP_FUTUREPLUS && st_op_orderbook.c_prd_typ != OPTIONPLUS )	*** Ver 2.5 ***OPTIONPLUS added in Ver 2.6***
		{
		EXEC SQL 
		CLOSE cur_trd;
		}
		else 	*** Ver 2.5 ***
		{
			EXEC SQL CLOSE cur_trd1;
		}
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	

	while (1)
	{
		if ( st_op_orderbook.c_prd_typ != SLTP_FUTUREPLUS && st_op_orderbook.c_prd_typ != OPTIONPLUS)	*** Ver 2.5 *****OPTIONPLU
S added in Ver 2.6***
		{
		EXEC SQL
			FETCH	cur_trd
			INTO	:st_tradebk.c_cln_mtch_accnt,
						:st_tradebk.c_xchng_cd,
						:st_tradebk.c_prd_typ,
						:st_tradebk.c_ctgry_indstk,
						:st_tradebk.c_undrlyng,
						:st_tradebk.c_expry_dt,
						:st_tradebk.c_exrc_typ,
						:st_tradebk.c_opt_typ,
						:st_tradebk.l_strike_prc,
						:st_tradebk.c_ordr_rfrnc,
						:st_tradebk.c_trd_rfrnc,
						:st_tradebk.c_xchng_ack,
						:st_tradebk.l_xchng_trd_no,
						:st_tradebk.c_trd_dt,
						:st_tradebk.c_trnsctn_typ:si_null,
						:st_tradebk.c_trd_flw,
						:st_tradebk.l_exctd_qty,
						:st_tradebk.l_exctd_rt;
		}
		else  *** Else loop added in Ver 2.5 ***
		{
			EXEC SQL
			FETCH	cur_trd1
			INTO	:st_tradebk.c_cln_mtch_accnt,
						:st_tradebk.c_xchng_cd,
						:st_tradebk.c_prd_typ,
						:st_tradebk.c_ctgry_indstk,
						:st_tradebk.c_undrlyng,
						:st_tradebk.c_expry_dt,
						:st_tradebk.c_exrc_typ,
						:st_tradebk.c_opt_typ,
						:st_tradebk.l_strike_prc,
						:st_tradebk.c_ordr_rfrnc,
						:st_tradebk.c_trd_rfrnc,
						:st_tradebk.c_xchng_ack,
						:st_tradebk.l_xchng_trd_no,
						:st_tradebk.c_trd_dt,
						:st_tradebk.c_trnsctn_typ:si_null,
						:st_tradebk.c_trd_flw,
						:st_tradebk.l_exctd_qty,
						:st_tradebk.l_exctd_rt;
		}

		if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
		{
  		fn_errlog ( c_ServiceName, "S31990", SQLMSG,c_err_msg );
			if ( st_op_orderbook.c_prd_typ != SLTP_FUTUREPLUS && st_op_orderbook.c_prd_typ != OPTIONPLUS )	*** Ver 2.5 ***OPTIONPLUS added in Ver 2.6**
			{
			EXEC SQL 
		  CLOSE cur_trd;
			}
			else 	*** Ver 2.5 ***
			{
				EXEC SQL 
					CLOSE cur_trd1;
			}		
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
   	  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if ( SQLCODE == NO_DATA_FOUND )
		{
			break;
		}

  	*** Added for Order Routing ***
		fn_cpy_ddr ( st_tradebk.c_rout_crt );

		i_returncode = fn_call_svc_fml ( c_ServiceName,
                                     c_err_msg,
                                     "SFO_PRCS_TRD",
                                     0,
                                     18,
                                     0,
                                     FFO_ROUT_CRT, (char *)st_tradebk.c_rout_crt,    
                                     FFO_ORDR_RFRNC, (char *)st_tradebk.c_ordr_rfrnc,  
                                     FFO_TRD_RFRNC, (char *)st_tradebk.c_trd_rfrnc,  
                                     FFO_EBA_MTCH_ACT_NO, (char *)st_tradebk.c_cln_mtch_accnt, 
                                     FFO_EBA_CNTRCT_ID, (char *)&st_tradebk.l_eba_cntrct_id,* Needtoget *
                                     FFO_XCHNG_CD, (char *)st_tradebk.c_xchng_cd,  
                                     FFO_PRDCT_TYP, (char *)&st_tradebk.c_prd_typ, 
                                     FFO_UNDRLYNG, (char *)st_tradebk.c_undrlyng,  
                                     FFO_EXPRY_DT, (char *)st_tradebk.c_expry_dt,  
                                     FFO_EXER_TYP, (char *)&st_tradebk.c_exrc_typ,  
                                     FFO_OPT_TYP, (char *)&st_tradebk.c_opt_typ,  
                                     FFO_STRK_PRC, (char *)&st_tradebk.l_strike_prc,  
                                     FFO_CTGRY_INDSTK, (char *)&st_tradebk.c_ctgry_indstk,  
                                     FFO_CA_LVL, (char *)&st_tradebk.l_ca_lvl,    *** Need to get ***
                                     FFO_TRD_FLW, (char *)&st_tradebk.c_trd_flw,  
                                     FFO_EXEC_QTY, (char *)&st_tradebk.l_exctd_qty,  
                                     FFO_EXCTD_RT, (char *)&st_tradebk.l_exctd_rt,  
                                     FFO_TRD_DT, (char *)st_tradebk.c_trd_dt  
                                   );		
		
		if ( i_returncode == -1 && i_returncode == -100 )
		{
			fn_errlog ( c_ServiceName, "S31995", LIBMSG, c_err_msg );
			**if ( st_op_orderbook.c_prd_typ != SLTP_FUTUREPLUS )**	*** Ver 2.5 ***
			if ( st_op_orderbook.c_prd_typ != SLTP_FUTUREPLUS && st_op_orderbook.c_prd_typ != OPTIONPLUS )*** Ver 2.6 ***
			{
				EXEC SQL
				CLOSE cur_trd;
			}
			else 	*** Ver 2.5 ***
			{
				EXEC SQL CLOSE cur_trd1;
			}
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

	}

	if ( st_op_orderbook.c_prd_typ != SLTP_FUTUREPLUS && st_op_orderbook.c_prd_typ != OPTIONPLUS  )	*** Ver 2.5 **OPTIONPLUS   added in Ver 2.6***
	{
	EXEC SQL
		CLOSE cur_trd;
	}
	else 	*** Ver 2.5 ***
	{
		EXEC SQL CLOSE cur_trd1;
	}*/
	/*** Commented in Ver 2.7 Ends ***/
	/*** Ver 2.7 Starts ***/
    /*** Commented in Ver 3.6
    i_returncode= fn_prcs_trade(c_ServiceName,c_err_msg, st_op_orderbook.c_prd_typ, st_ip_xchngbk.c_ordr_rfrnc, st_op_orderbook.c_sltp_ord_rfrnc);
    *****************/

    /*** Ver 3.6 Starts Here ***/
  i_returncode= fn_prcs_trd(c_ServiceName,c_err_msg.arr, st_op_orderbook.c_prd_typ, st_ip_xchngbk.c_ordr_rfrnc);				/** VQC **/
    /*** Ver 3.6 Ends Here ***/

	if(i_returncode != 0)
	{
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );						/** VQC **/
		fn_errlog ( c_ServiceName, "S32000", LIBMSG, c_err_msg.arr );			/** VQC **/
		/* fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );					** VQC * Commented in Ver 5.7 ***/
		tpfree((char *)ptr_fml_Sbuf); /*** Added in Ver 4.0 ***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	/*** Ver 2.7 Ends ***/
 /*** if ( st_op_orderbook.c_prd_typ != SLTP_FUTUREPLUS )	*** if condition added in Ver 1.5 Commented In Ver 2.0 ***/
 if ( st_op_orderbook.c_prd_typ != SLTP_FUTUREPLUS && st_op_orderbook.c_prd_typ != OPTIONPLUS )	/*** Ver 2.0 ***/
 {
		if ( st_pstn_actn_var.c_mtm_flag == NO_OPEN_ORDERS )
	{
		switch ( st_ip_xchngbk.l_ors_msg_typ )
		{
			case	ORS_NEW_ORD_ACPT:
					sprintf(st_pstn_actn_var.c_imtm_rmrks, "RECEIVED SQUAREOFF CONFIRMATION FOR [%s]",
																						st_ip_xchngbk.c_ordr_rfrnc );
					break;

			case	ORS_NEW_ORD_RJCT:
					sprintf(st_pstn_actn_var.c_imtm_rmrks,
					"RECEIVED SQUAREOFF REJECTION FOR [%s]",
																						st_ip_xchngbk.c_ordr_rfrnc );
					break;

			case	ORS_CAN_ORD_ACPT:
					sprintf(st_pstn_actn_var.c_imtm_rmrks,
					"RECEIVED CANCELLATION ACCEPTANCE FOR [%s]",
																						st_ip_xchngbk.c_ordr_rfrnc );
					break;

			case	ORS_CAN_ORD_RJCT:
					sprintf(st_pstn_actn_var.c_imtm_rmrks,
					"RECEIVED CANCELLATION REJECTION FOR [%s]",
																						st_ip_xchngbk.c_ordr_rfrnc );
					break;
			case	ORS_IOC_CAN_ACPT:                /*** Ver 1.3 ***/
					sprintf(st_pstn_actn_var.c_imtm_rmrks,
					"RECEIVED IOC CANCELLATION  ACCEPTANCE FOR [%s]",
																						st_ip_xchngbk.c_ordr_rfrnc );
					break;
			case	ORS_2L_ORD_CNCL :								/*** Ver 1.3 ***/
					sprintf(st_pstn_actn_var.c_imtm_rmrks,
					"RECEIVED 2L ORDER CANCELLATION FOR [%s]",
																						st_ip_xchngbk.c_ordr_rfrnc );
					break;
			case	ORS_3L_ORD_CNCL :								/*** Ver 1.3 ***/
					sprintf(st_pstn_actn_var.c_imtm_rmrks,
					"RECEIVED 3L ORDER CANCELLATION FOR [%s]",
																						st_ip_xchngbk.c_ordr_rfrnc );
					break;
			case	ORS_ORD_FRZ_CNCL:								/*** Ver 1.3 ***/
					sprintf(st_pstn_actn_var.c_imtm_rmrks,
					"RECEIVED FREEZE ORDER CANCELLATION FOR [%s]",
																						st_ip_xchngbk.c_ordr_rfrnc );
					break;
			/******default ????? ************/
		}

    sprintf( c_tag,"bat_intra_mtm_%s",st_pstn_actn_var.c_xchng_cd);

    i_returncode = fn_acall_svc_fml ( c_ServiceName,
                                  		ptr_st_err_msg->c_err_msg,
                                  		"SFO_PRCS_SIMTM",
                                    /***0, **** Ver 3.9 ***/
                                      TPNOTRAN|TPNOREPLY,  /**** Ver 3.9 ***/
                                  		10,     
                 		FFO_XCHNG_CD, ( char * )st_pstn_actn_var.c_xchng_cd,
                 		FFO_EBA_MTCH_ACT_NO, ( char *)st_pstn_actn_var.c_cln_mtch_accnt,
                 		FFO_PRDCT_TYP, ( char * )&st_pstn_actn_var.c_prd_typ,
                		FFO_UNDRLYNG, ( char * )st_pstn_actn_var.c_undrlyng,
                		FFO_CTGRY_INDSTK, ( char * )&st_pstn_actn_var.c_ctgry_indstk,
                		FFO_CNTRCT_TAG, ( char * )&st_pstn_actn_var.c_cntrct_tag,
                 		FFO_IMTM_RMRKS, ( char * )st_pstn_actn_var.c_imtm_rmrks,
                 		FFO_PIPE_ID, ( char * )st_op_xchngbk.c_pipe_id,
                    FFO_SPL_FLG,(char *)&c_prc_flg,     
                 		FFO_BAT_TAG, ( char * )c_tag);
		if ( i_returncode != SUCC_BFR )
		{
			fn_errlog ( c_ServiceName, "S32005", LIBMSG, c_err_msg.arr );			/** VQC **/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );						/** VQC **/
      /* fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );					** VQC * Commented in Ver 5.7 **/
			/***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
			tpfree((char *)ptr_fml_Sbuf); /*** Added in Ver 4.0 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}

	/** Ver 5.3 Starts Here ***/
  else if (c_fcpmtm_flg== NO_PHYDLVRY_OPEN_ORDERS )
  {
    c_rqst_typ='I';
    /*** call service for Dlvry ***/
    i_returncode = fn_acall_svc_fml ( c_ServiceName,
                                      c_err_msg.arr,						/** VQC **/
                                      "SFO_DLVMRG_PRC",
                                      TPNOTRAN|TPNOREPLY,
                                      11,
                                      FFO_EBA_MTCH_ACT_NO, ( char *)st_pstn_actn_var.c_cln_mtch_accnt,
                                      FFO_XCHNG_CD, ( char * )st_pstn_actn_var.c_xchng_cd,
                                      FFO_PRDCT_TYP, ( char * )&st_pstn_actn_var.c_prd_typ,
                                      FFO_UNDRLYNG, ( char * )st_pstn_actn_var.c_undrlyng,
                                      FFO_EXPRY_DT, ( char * )st_pstn_actn_var.c_expry_dt,
                                      FFO_EXER_TYP, ( char * )&st_pstn_actn_var.c_exrc_typ,
                                      FFO_OPT_TYP, ( char * )&st_pstn_actn_var.c_opt_typ,
                                      FFO_STRK_PRC, ( char * )&st_pstn_actn_var.l_strike_prc,
                                      FFO_CTGRY_INDSTK, ( char * )&st_pstn_actn_var.c_ctgry_indstk,
                                      FFO_RQST_TYP, (char *)&c_rqst_typ,
                                      FFO_STATUS_FLG,(char *)&c_span_flg );

    if ( i_returncode == -1 )
    {
      fn_errlog ( c_ServiceName, "S32010", LIBMSG, c_err_msg.arr );				/** VQC **/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );							/** VQC **/
      /* fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );						** VQC * Commented in Ver 5.7 **/
      tpfree((char *)ptr_fml_Sbuf); /*** Added in Ver 4.0 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  else if ( strstr( c_ref_rmrks_phy,"Provisional Delivery Process Cancellation")) /*** loop added in ver 6.3 ***/
  {
      c_span_flg = 'S';
      c_rqst_typ = 'I';
		if(DEBUG_MSG_LVL_3)
      {	
      fn_userlog( c_ServiceName,"STRSTR :%s:%s:%c:%c:%s:%c:%ld:%s:%c:%c:",st_pstn_actn_var.c_cln_mtch_accnt,st_pstn_actn_var.c_xchng_cd,st_pstn_actn_var.c_prd_typ,st_pstn_actn_var.c_ctgry_indstk,st_pstn_actn_var.c_undrlyng,st_pstn_actn_var.c_opt_typ,st_pstn_actn_var.l_strike_prc,st_pstn_actn_var.c_expry_dt,st_pstn_actn_var.c_exrc_typ,c_ordr_flow_phy);
			}
      EXEC SQL
            SELECT decode(:c_ordr_flow_phy,'B',greatest(abs(FCP_IBUY_QTY),abs(FCP_EXBUY_QTY)) ,'S',greatest(abs(FCP_ISELL_QTY),abs(FCP_EXSELL_QTY) ),0) ,
            FCP_OPNPSTN_FLW
            INTO :l_prvsnl_pending_qty,
                 :c_prvsnl_opnpos_flow
             FROM FCP_FO_SPN_CNTRCT_PSTN
        WHERE FCP_CLM_MTCH_ACCNT =:st_pstn_actn_var.c_cln_mtch_accnt
        AND   FCP_XCHNG_CD       =:st_pstn_actn_var.c_xchng_cd
        AND   FCP_PRDCT_TYP      =:st_pstn_actn_var.c_prd_typ
        AND   FCP_INDSTK         =:st_pstn_actn_var.c_ctgry_indstk
        AND   FCP_UNDRLYNG       =:st_pstn_actn_var.c_undrlyng
        AND   FCP_OPT_TYP        =:st_pstn_actn_var.c_opt_typ
        AND   FCP_STRK_PRC       =:st_pstn_actn_var.l_strike_prc
        AND   FCP_EXPRY_DT       =:st_pstn_actn_var.c_expry_dt
        AND   FCP_EXER_TYP       =:st_pstn_actn_var.c_exrc_typ
        AND   FCP_OPNPSTN_FLW    =:c_ordr_flow_phy;

  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S32015", SQLMSG, c_err_msg.arr );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree((char *)ptr_fml_Sbuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }


      if( st_pstn_actn_var.c_prd_typ == 'F' )
      {
          if( c_prvsnl_opnpos_flow == 'B')
          {
             c_sub_mode = 'A';
          }
          else
          {
             c_sub_mode = 'S';
          }
      }
      else if ( st_pstn_actn_var.c_prd_typ == 'O')
      {
           if( st_pstn_actn_var.c_opt_typ == 'C' )
           {
              if( c_prvsnl_opnpos_flow == 'B' )
              {  
                  c_sub_mode = 'A';
              }
              else
              {
                   c_sub_mode = 'S';
              }
          }
          else if ( st_pstn_actn_var.c_prd_typ == 'P' )
          {
              if( c_prvsnl_opnpos_flow == 'B' )
              {
                  c_sub_mode = 'S';
              }
              else
              {
                 c_sub_mode = 'A';
              }
          } 
      }
       fn_userlog( c_ServiceName,"STRSTR l_prvsnl_pending_qty :%ld:",l_prvsnl_pending_qty);

       if(l_prvsnl_pending_qty  == 0 )
       {
         i_returncode = fn_acall_svc_fml ( c_ServiceName,
                                c_err_msg.arr,
                               "SFO_PRVSNL_PRC",
                                TPNOTRAN|TPNOREPLY,
                                13,
                                FFO_EBA_MTCH_ACT_NO,(char*)st_pstn_actn_var.c_cln_mtch_accnt,
                                FFO_XCHNG_CD,(char*)st_pstn_actn_var.c_xchng_cd,
                                FFO_PRDCT_TYP,(char*)&st_pstn_actn_var.c_prd_typ,
                                FFO_UNDRLYNG, (char*)st_pstn_actn_var.c_undrlyng,
                                FFO_EXPRY_DT, (char*)st_pstn_actn_var.c_expry_dt,
                                FFO_EXER_TYP, (char*)&st_pstn_actn_var.c_exrc_typ,
                                FFO_OPT_TYP, (char*)&st_pstn_actn_var.c_opt_typ,
                                FFO_STRK_PRC, (char*)&st_pstn_actn_var.l_strike_prc,
                                FFO_CTGRY_INDSTK, (char*)&st_pstn_actn_var.c_ctgry_indstk,
                                FFO_RQST_TYP, (char*)&c_rqst_typ,
                                FFO_STATUS_FLG,(char *)&c_span_flg,
                                FFO_MOD_CAN_FLG,(char *)&c_sub_mode,
                                  FFO_OPNPSTN_FLW,(char *)&c_prvsnl_opnpos_flow);

    if ( i_returncode == -1 )
    {
      fn_errlog ( c_ServiceName, "S32020", LIBMSG, c_err_msg.arr );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree((char *)ptr_fml_Sbuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

  } /** ver 6.3 loop ends **/
  /**** Ver 5.3 Ends Here ****/
 else if ( st_ip_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_ACPT && c_g_fc_flg == 'I'  ) /*** ver 6.1 starts ***/
 {
    sprintf(c_run_mode,"%d",RUN_SPAN_IMTM_IMPNL);

    c_rqst_typ = 'M';

    fn_userlog(c_ServiceName,"Call SFO_MARK_SIMTM with Operation type :%s:",c_run_mode);

    i_returncode = fn_acall_svc_fml (  c_ServiceName,
                                       ptr_st_err_msg->c_err_msg,
                                       "SFO_MARK_SIMTM",
                                       TPNOTRAN|TPNOREPLY,
                                       7,
                                       FFO_XCHNG_CD, ( char * )st_pstn_actn_var.c_xchng_cd,
                                       FFO_EBA_MTCH_ACT_NO, ( char *)st_pstn_actn_var.c_cln_mtch_accnt,
                                       FFO_UNDRLYNG, ( char * )st_pstn_actn_var.c_undrlyng,
                                       FFO_CTGRY_INDSTK, ( char * )&st_pstn_actn_var.c_ctgry_indstk,
                                       FFO_IMTM_RMRKS, ( char * )st_pstn_actn_var.c_imtm_rmrks,
                                       FFO_OPERATION_TYP,(char *)c_run_mode,
                                       FFO_REQ_TYP, (char *)&c_rqst_typ );


    if ( i_returncode == -1 )
    {
      fn_errlog ( c_ServiceName, "S32025", LIBMSG, c_err_msg.arr );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree((char *)ptr_fml_Sbuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

   } /***  ver 6.1 ends  ***/

 }	/*** Ver 1.5 ***/
	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog( c_ServiceName, "Service Completed Successfully");
	}

	/*** Ver 4.1 Starts ***/
	rtrim(st_op_xchngbk.c_xchng_rmrks);

	if(DEBUG_MSG_LVL_5)
	{
		fn_userlog( c_ServiceName, "c_prd_typ :%c:",st_op_orderbook.c_prd_typ);
  	fn_userlog( c_ServiceName, "c_fc_flg :%c:",st_op_orderbook.c_fc_flg);
  	fn_userlog( c_ServiceName, "c_plcd_stts :%c:",st_op_orderbook.c_ordr_stts);
  	fn_userlog( c_ServiceName, "c_xchng_rmrks :%s:",st_op_xchngbk.c_xchng_rmrks);
	}

  if ( st_op_orderbook.c_prd_typ == OPTIONPLUS && st_op_orderbook.c_fc_flg == 'C' && st_op_orderbook.c_ordr_stts == CANCELLED && strncmp(st_op_xchngbk.c_xchng_rmrks,"The Price is out of the current execution range",45)==0) 
	{
		strcpy(c_mail_remarks.arr,"The Price is out of the current execution range");				/** VQC **/
		sprintf(c_command.arr, "nohup ksh opplus_cvr_rej_mail.sh '%s' '%s' '%s' &",st_op_orderbook.c_cln_mtch_accnt,st_op_orderbook.c_ordr_rfrnc,c_mail_remarks.arr);				/** VQC **/
    system(c_command.arr);				/** VQC **/
	}


  /*** Ver 4.1 Ends ***/
		
  /***** tpfree((char *)ptr_fml_Obuf); Commented in Ver 3.2 ****/
	tpfree((char *)ptr_fml_Sbuf); /*** Added in Ver 4.0 ***/
  tpfree((char *)ptr_fml_Ibuf);
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )NULL, 0, 0 );


} /*** end of service ***/

/*** Ver 2.7 Starts***
int fn_prcs_trade(char *c_ServiceName,char *c_err_msg ,char c_prd_typ, char* c_ordr_rfrnc ,char* c_sltp_ord_rfrnc)
{
	int     i_returncode;
	short int si_null;
	struct  st_tradebook st_tradebk;
	MEMSET(st_tradebk);

	if ( c_prd_typ != SLTP_FUTUREPLUS && c_prd_typ != OPTIONPLUS )
	{
		EXEC SQL
		DECLARE cur_trd CURSOR FOR
		SELECT  ftd_clm_mtch_accnt,
       		  ftd_xchng_cd,
            ftd_prdct_typ,
            ftd_indstk,
            ftd_undrlyng,
            to_char(ftd_expry_dt,'DD-Mon-YYYY'),
            ftd_exer_typ,
            ftd_opt_typ,
            ftd_strk_prc,
            ftd_ordr_rfrnc,
            ftd_eba_trd_ref,
            ftd_ord_ack_nmbr,
            ftd_xchng_trd_no,
            to_char(ftd_trd_dt,'DD-Mon-YYYY hh24:mi:ss'),
						ftd_trnsctn_typ,
            ftd_trd_flw,
            ftd_exctd_qty,
            ftd_exctd_rt
    FROM    ftd_fo_trd_dtls
    WHERE   ftd_ordr_rfrnc = :c_ordr_rfrnc
    AND     ftd_rms_prcsd_flg = 'N';

  	EXEC SQL
    OPEN  cur_trd;

	}
	else
	{
		EXEC SQL
   	DECLARE cur_trd1 CURSOR FOR
   	SELECT  ftd_clm_mtch_accnt,
            ftd_xchng_cd,
            ftd_prdct_typ,
            ftd_indstk,
            ftd_undrlyng,
            to_char(ftd_expry_dt,'DD-Mon-YYYY'),
            ftd_exer_typ,
            ftd_opt_typ,
            ftd_strk_prc,
            ftd_ordr_rfrnc,
            ftd_eba_trd_ref,
            ftd_ord_ack_nmbr,
            ftd_xchng_trd_no,
            to_char(ftd_trd_dt,'DD-Mon-YYYY hh24:mi:ss'),
						ftd_trnsctn_typ,
            ftd_trd_flw,
            ftd_exctd_qty,
            ftd_exctd_rt
    FROM    ftd_fo_trd_dtls
    WHERE   ftd_ordr_rfrnc in (:c_ordr_rfrnc, :c_sltp_ord_rfrnc)
    AND     ftd_rms_prcsd_flg = 'N';

    EXEC SQL
    OPEN  cur_trd1;

  }
  if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S32030", SQLMSG, c_err_msg );
    if ( c_prd_typ != SLTP_FUTUREPLUS && c_prd_typ != OPTIONPLUS )
	{
    	EXEC SQL
    	CLOSE cur_trd;
    }
	else
	{
			EXEC SQL CLOSE cur_trd1;
    }
	return -1;
  }
	while (1)
  {
    if ( c_prd_typ != SLTP_FUTUREPLUS && c_prd_typ != OPTIONPLUS)
	{
    	EXEC SQL
      FETCH cur_trd
      INTO  :st_tradebk.c_cln_mtch_accnt,
            :st_tradebk.c_xchng_cd,
            :st_tradebk.c_prd_typ,
            :st_tradebk.c_ctgry_indstk,
            :st_tradebk.c_undrlyng,
            :st_tradebk.c_expry_dt,
            :st_tradebk.c_exrc_typ,
            :st_tradebk.c_opt_typ,
            :st_tradebk.l_strike_prc,
            :st_tradebk.c_ordr_rfrnc,
            :st_tradebk.c_trd_rfrnc,
            :st_tradebk.c_xchng_ack,
            :st_tradebk.l_xchng_trd_no,
            :st_tradebk.c_trd_dt,
            :st_tradebk.c_trnsctn_typ:si_null,
            :st_tradebk.c_trd_flw,
            :st_tradebk.l_exctd_qty,
            :st_tradebk.l_exctd_rt;
    }
	else
	{
      EXEC SQL
      FETCH cur_trd1
      INTO  :st_tradebk.c_cln_mtch_accnt,
            :st_tradebk.c_xchng_cd,
            :st_tradebk.c_prd_typ,
            :st_tradebk.c_ctgry_indstk,
            :st_tradebk.c_undrlyng,
            :st_tradebk.c_expry_dt,
            :st_tradebk.c_exrc_typ,
            :st_tradebk.c_opt_typ,
            :st_tradebk.l_strike_prc,
            :st_tradebk.c_ordr_rfrnc,
            :st_tradebk.c_trd_rfrnc,
            :st_tradebk.c_xchng_ack,
            :st_tradebk.l_xchng_trd_no,
            :st_tradebk.c_trd_dt,
						 :st_tradebk.c_trnsctn_typ:si_null,
            :st_tradebk.c_trd_flw,
            :st_tradebk.l_exctd_qty,
            :st_tradebk.l_exctd_rt;
    }

    if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog ( c_ServiceName, "S32035", SQLMSG,c_err_msg );
      if ( c_prd_typ != SLTP_FUTUREPLUS && c_prd_typ != OPTIONPLUS )			
	  {
      	EXEC SQL
      	CLOSE cur_trd;
      }
	  else
	  {
		EXEC SQL
		CLOSE cur_trd1;
      }
	  return -1;
	}
	if ( SQLCODE == NO_DATA_FOUND )
    {
	    break;
    }
	
		fn_cpy_ddr ( st_tradebk.c_rout_crt );

		
    i_returncode = fn_acall_svc_fml ( c_ServiceName,
									  									c_err_msg,
                                     "SFO_PRCS_TRD",
                                     0,
                                     18,
                                     FFO_ROUT_CRT, (char *)st_tradebk.c_rout_crt,
                                     FFO_ORDR_RFRNC, (char *)st_tradebk.c_ordr_rfrnc,
                                     FFO_TRD_RFRNC, (char *)st_tradebk.c_trd_rfrnc,
                                     FFO_EBA_MTCH_ACT_NO, (char *)st_tradebk.c_cln_mtch_accnt,
                                     FFO_EBA_CNTRCT_ID, (char *)&st_tradebk.l_eba_cntrct_id,
                                     FFO_XCHNG_CD, (char *)st_tradebk.c_xchng_cd,
                                     FFO_PRDCT_TYP, (char *)&st_tradebk.c_prd_typ,
                                     FFO_UNDRLYNG, (char *)st_tradebk.c_undrlyng,
                                     FFO_EXPRY_DT, (char *)st_tradebk.c_expry_dt,
                                     FFO_EXER_TYP, (char *)&st_tradebk.c_exrc_typ,
                                     FFO_OPT_TYP, (char *)&st_tradebk.c_opt_typ,
                                     FFO_STRK_PRC, (char *)&st_tradebk.l_strike_prc,
                                     FFO_CTGRY_INDSTK, (char *)&st_tradebk.c_ctgry_indstk,
                                     FFO_CA_LVL, (char *)&st_tradebk.l_ca_lvl,
                                     FFO_TRD_FLW, (char *)&st_tradebk.c_trd_flw,
                                     FFO_EXEC_QTY, (char *)&st_tradebk.l_exctd_qty,
                                     FFO_EXCTD_RT, (char *)&st_tradebk.l_exctd_rt,
                                     FFO_TRD_DT, (char *)st_tradebk.c_trd_dt
                                   );

  ***  if ( i_returncode == -1 && i_returncode == -100 ) commented in ver 2.7 ****
	if ( i_returncode != SUCC_BFR  )  **** Added in Ver 2.7 for Core Fix  ****
	{	
		fn_errlog ( c_ServiceName, "S32040", LIBMSG, c_err_msg );
	  if ( c_prd_typ != SLTP_FUTUREPLUS && c_prd_typ != OPTIONPLUS )
		{
        EXEC SQL
        CLOSE cur_trd;
      }
      else  *** Ver 2.5 ***
      {
        EXEC SQL CLOSE cur_trd1;
      }

		return -1;
	  }
	}
		 

  if ( c_prd_typ != SLTP_FUTUREPLUS && c_prd_typ != OPTIONPLUS  )
  {
	EXEC SQL
		CLOSE cur_trd;
  }
  else
  {
    EXEC SQL CLOSE cur_trd1;
  }

	return 0;
 }
Commented in Ver 3.6 *** Ver 2.7 Ends***/
