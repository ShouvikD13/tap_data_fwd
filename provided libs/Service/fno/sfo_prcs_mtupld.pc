/******************************************************************************/
/*	Program	    			:	SFO_PRCS_MTUPLD                                       */
/*  Input             :                                                       */
/*  Output            :                                                       */
/*  Description       :                                                       */
/*  Log               :                                                       */
/******************************************************************************/
/*     09-Dec-2001       Ver 1.0        Infotech|sangeet   Release 1.0        */
/*											 Ver 1.1				Infotech|Firoz		 Release 1.1        */	
/*		 26-Sep-2006			 Ver 1.2				Infotech|Lavine R	 Release 1.2        */	
/*		 03-Mar-2008			 Ver 1.3				infotech|SKS			 AIX Migration			*/
/*     19-Apr-2011       Ver 1.4        infotech|Sachin    Option Pricing     */  
/******************************************************************************/

/*What is the use of c_eba_trade_no?****/
/*Why FFO_STATUS_FLAG is not populated?****/
/*What to supply for the user id and l_session_id ****/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fo_fml_def.h>
#include <fo.h>
#include <fn_log.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_read_debug_lvl.h>  /*  Ver 1.3 : Added   */

void SFO_PRCS_MTUPLD( TPSVCINFO *rqst )
{

	FBFR32 *ptr_fml_Ibuffer;
	FBFR32 *ptr_fml_Obuffer;
	FBFR32 *ptr_fml_Rbuffer;

	char c_ServiceName [33];
  char c_err_msg [256];
	int  i_returncode;
	int  i;
	int  i_ip_len;
	int  i_op_len;
	long int li_rec_no;
	char c_cln_mtch_accnt[11];
	long l_opnpstn_qty;
	int  i_rec_exists;
	char c_msg[256];
	char c_tag[256];
	int	 i_err[25];
	int	 i_count = 1;
	long	l_Obuffer_len;
	long	l_rcv_length;
	EXEC SQL BEGIN DECLARE SECTION;
  sql_cursor     mtch_upld_cursor;             /* a cursor variable */
	EXEC SQL END DECLARE SECTION;
	
char    c_pro_cli_flg;
char 		c_settlor[13];
char 		c_eba_trd_no [20];
long  	l_cvr_brkg_val;
long  	l_brkrg_vl;
char 		c_rqst_typ;
int			i_trnsctn ;
char  	c_xchng_cd[4];
char  	c_clnt_mtch_accnt [11];
char 		c_trd_dt[12];
char 		c_trd_rfrnc[19];
char 		c_tm_stmp[23];
char 		c_status_flg;
char    c_trd_ack_tm[23]; /*** 1.1 ***/
char    c_trd_flw[2] ; /* 1.1 */
char    c_ordr_rfrnc[19] ; /* 1.1 */
char    c_member_cd[6];		/*Added for Ver 1.2*/
char    c_brk_cmpt_flg;    /*** Added in ver 1.4 ***/

struct   	vw_tradebook st_tradebook;
struct 		vw_contract  st_contract;
struct 		vw_mtch_cntrct st_mtch_cntrct;
struct 		vw_err_msg *ptr_st_err_msg;


char 			c_usr_id [33];
long 			l_session_id ;

	memset(&st_tradebook , 0 , sizeof( struct vw_tradebook) );
	memset(&st_contract , 0 , sizeof( struct vw_contract) );
	memset( &st_mtch_cntrct, 0, sizeof( struct vw_mtch_cntrct ) );

 	ptr_fml_Ibuffer = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.3 : Added   */
	c_status_flg = 'Y';
  i_returncode = Fvftos32( ptr_fml_Ibuffer,
                           ( char * )&st_tradebook,
                           "vw_tradebook" );
  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuffer, 0, 0 );
  }

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_tradebook.c_rout_crt );

	i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                      c_err_msg,
                                      ptr_fml_Ibuffer,
                                      6,
           FFO_TRD_RFRNC , ( char * )c_eba_trd_no, NULL,
           FFO_SPL_FLG , ( char * )&c_pro_cli_flg, NULL,
           FFO_BRKRG_VL  , (char * )&l_brkrg_vl, NULL,
           FFO_TM_STMP  , (char * )c_tm_stmp, NULL,
           FFO_SETTLOR , ( char * )c_settlor, NULL,
           FFO_BAT_TAG , ( char * )c_tag, NULL);
  if( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31010", LIBMSG , c_err_msg );
    Fadd32(ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
		sprintf (c_msg, "Failed in Processing record for Trade no.:%s:",c_eba_trd_no);
		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuffer, 0, 0 );
  }

  /*** 1.1 **/
  
  memset(c_trd_ack_tm,'\0',sizeof(c_trd_ack_tm));
  
  if (Fget32(ptr_fml_Ibuffer,FFO_EXECN_DT, 0, (char *)c_trd_ack_tm,0)  == -1)
  {
    fn_errlog( c_ServiceName, "S31015", LIBMSG , c_err_msg );
    Fadd32(ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
		sprintf (c_msg, "Order Ack Time Not Present for trade :%s:",c_eba_trd_no);
		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuffer, 0, 0 );
  }

  memset(c_trd_flw,'\0',sizeof(c_trd_flw));
  
  if (Fget32(ptr_fml_Ibuffer,FFO_TRD_FLW, 0, (char *)c_trd_flw,0)  == -1)
  {
    fn_errlog( c_ServiceName, "S31020", LIBMSG , c_err_msg );
    Fadd32(ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
		sprintf (c_msg, "c_trd_flw Not Present for trade :%s:",c_eba_trd_no);
		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuffer, 0, 0 );
  }

  memset(c_trd_rfrnc,'\0',sizeof(c_trd_rfrnc));
  
  if (Fget32(ptr_fml_Ibuffer,FFO_TRD_RFRNC, 0, (char *)c_trd_rfrnc,0)  == -1)
  {
    fn_errlog( c_ServiceName, "S31025", LIBMSG , c_err_msg );
    Fadd32(ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
		sprintf (c_msg, "c_trd_flw Not Present for trade :%s:",c_eba_trd_no);
		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuffer, 0, 0 );
  }

  memset(c_ordr_rfrnc,'\0',sizeof(c_ordr_rfrnc));
  if (Fget32(ptr_fml_Ibuffer,FFO_ORDR_RFRNC, 0, (char *)c_ordr_rfrnc,0)  == -1)
  {
    fn_errlog( c_ServiceName, "S31030", LIBMSG , c_err_msg );
    Fadd32(ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
		sprintf (c_msg, "c_trd_flw Not Present for trade :%s:",c_eba_trd_no);
		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuffer, 0, 0 );
  }
   /*** 1.1 **/
  
  if (Fget32(ptr_fml_Ibuffer,FFO_DLVRY_ALLWD, 0, (char *)&c_brk_cmpt_flg,0)  == -1)   /*** Ver 1.4 ***/
  {
    fn_errlog( c_ServiceName, "S41030", LIBMSG , c_err_msg );
    Fadd32(ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
    sprintf (c_msg, "c_trd_flw Not Present for trade :%s:",c_eba_trd_no);
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuffer, 0, 0 );
  }
 
  
  i_op_len = sizeof( struct vw_mtch_cntrct );
  i_ip_len = sizeof( struct vw_contract );

				st_contract.c_rqst_typ = CONTRACT_TO_MATCH_ID;


				strcpy(st_contract.c_xchng_cd,st_tradebook.c_xchng_cd);
				st_contract.c_prd_typ = st_tradebook.c_prd_typ ;
				strcpy(st_contract.c_undrlyng,st_tradebook.c_undrlyng);
				strcpy(st_contract.c_expry_dt,st_tradebook.c_expry_dt);
				st_contract.c_exrc_typ = st_tradebook.c_exrc_typ;
				st_contract.c_opt_typ = st_tradebook.c_opt_typ;
				st_contract.l_strike_prc = st_tradebook.l_strike_prc ;
				st_contract.c_ctgry_indstk = st_tradebook.c_ctgry_indstk ;
				rtrim(st_contract.c_expry_dt);
				rtrim(st_contract.c_xchng_cd);
				rtrim(st_contract.c_undrlyng);
				rtrim(st_tradebook.c_expry_dt);
				rtrim(st_tradebook.c_xchng_cd);
				rtrim(st_tradebook.c_undrlyng);
				rtrim(st_tradebook.c_trd_rfrnc);
				rtrim(st_tradebook.c_ordr_rfrnc);
				rtrim(st_tradebook.c_xchng_ack);
				rtrim(st_tradebook.c_trnsctn_typ);
				rtrim(c_eba_trd_no);
				rtrim(c_settlor);
				rtrim(c_tm_stmp);
        rtrim (c_trd_ack_tm) ; /** 1.1 **/
        rtrim (c_trd_rfrnc) ; /** 1.1 **/


  fn_userlog( c_ServiceName, "c_ordr_rfrnc [%s]",st_tradebook.c_ordr_rfrnc );
if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.3 : Debug level Change  */
  fn_userlog( c_ServiceName, "c_xchng_cd [%s]",st_contract.c_xchng_cd );
  fn_userlog( c_ServiceName, "c_prd_typ [%c]",st_contract.c_prd_typ );
  fn_userlog( c_ServiceName, "c_undrlyng [%s]",st_contract.c_undrlyng );
 	fn_userlog( c_ServiceName, "c_expry_dt [%s]",st_contract.c_expry_dt );
  fn_userlog( c_ServiceName, "c_exrc_typ [%c]",st_contract.c_exrc_typ );
  fn_userlog( c_ServiceName, "c_opt_typ [%c]",st_contract.c_opt_typ );
  fn_userlog( c_ServiceName, "l_strike_prc[%ld]", st_contract.l_strike_prc );
  fn_userlog( c_ServiceName, "c_ctgry_indstk [%c]",st_contract.c_ctgry_indstk );
  fn_userlog( c_ServiceName, "l_ca_lvl [%ld]",st_contract.l_ca_lvl );
  fn_userlog( c_ServiceName, "c_trd_rfrnc  [%s]",st_tradebook.c_trd_rfrnc );
  /* 1.1 */
  fn_userlog( c_ServiceName, "c_trd_rfrnc  [%s]", c_trd_rfrnc );
  /* 1.1 */
  fn_userlog( c_ServiceName, "c_ordr_rfrnc [%s]",st_tradebook.c_ordr_rfrnc );

  fn_userlog( c_ServiceName, "c_ordr_rfrnc [%s]",c_ordr_rfrnc );

  fn_userlog( c_ServiceName, "FFO_ACK_NMBR  [%s]",st_tradebook.c_xchng_ack );
  fn_userlog( c_ServiceName, "l_xchng_trd_no  [%ld]",st_tradebook.l_xchng_trd_no );
  fn_userlog( c_ServiceName, "FFO_TRD_FLW  [%c]",st_tradebook.c_trd_flw );
  /* 1.1 */
  fn_userlog( c_ServiceName, "c_trd_flw  [%s]",c_trd_flw );

  fn_userlog( c_ServiceName, "FFO_EXEC_QTY  [%ld]",st_tradebook.l_exctd_qty );
  fn_userlog( c_ServiceName, "FFO_EBA_MTCH_ACT_NO  [%s]",st_tradebook.c_cln_mtch_accnt );
  fn_userlog( c_ServiceName, "FFO_BRKRG_VL  [%ld]",l_brkrg_vl );
  fn_userlog( c_ServiceName, "FFO_SPL_FLG  [%c]",c_pro_cli_flg );
  fn_userlog( c_ServiceName, "FFO_SETTLOR  [%s]",c_settlor );
  fn_userlog( c_ServiceName, "FFO_TM_STMP  [%s]",c_tm_stmp );
  fn_userlog( c_ServiceName, "FFO_TRNSCTN_TYP  [%s]",st_tradebook.c_trnsctn_typ );
  fn_userlog( c_ServiceName, "c_trd_ack_tm  [%s]",c_trd_ack_tm );
  fn_userlog( c_ServiceName, " c_brk_cmpt_flg [%c]",c_brk_cmpt_flg);
 
}

	strncpy(st_tradebook.c_trd_rfrnc,c_eba_trd_no ,18);

	fn_cpy_ddr(st_contract.c_rout_crt);
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_contract,
                              &st_mtch_cntrct,
                              "vw_contract",
                              "vw_mtch_cntrct",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_GT_EXT_CNT" );
  if( i_returncode != SUCC_BFR )
  {
    fn_errlog( c_ServiceName, "S31035", LIBMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
		sprintf (c_msg, "Failed in Processing record for Trade no.:%s:",c_eba_trd_no);
		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuffer, 0, 0 );
  }

	strcpy(c_usr_id,"system");
	l_session_id = 0 ;

	ptr_fml_Obuffer = (FBFR32 *)tpalloc("FML32" ,NULL ,MIN_FML_BUF_LEN*4);
	if(ptr_fml_Obuffer == NULL )
	{
    fn_userlog(c_ServiceName,"Error in Buffer allocation");
    fn_errlog ( c_ServiceName, "S31040", TPMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
		sprintf (c_msg, "Failed in Processing record for Trade no.:%s:",c_eba_trd_no);
		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn ( TPFAIL, ERR_BFR, NULL, 0, 0 );
	}

	ptr_fml_Rbuffer = (FBFR32 *)tpalloc("FML32" ,NULL ,MIN_FML_BUF_LEN);
	if(ptr_fml_Obuffer == NULL )
	{
    fn_userlog(c_ServiceName,"Error in Buffer allocation");
    fn_errlog ( c_ServiceName, "S31045", TPMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
		sprintf (c_msg, "Failed in Processing record for Trade no.:%s:",c_eba_trd_no);
		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn ( TPFAIL, ERR_BFR, NULL, 0, 0 );
	}

  if (Fadd32(ptr_fml_Obuffer, FFO_USR_ID, (char *)c_usr_id,0)  == -1)
  {
    fn_userlog(c_ServiceName,"Error in Fadd");
    fn_errlog ( c_ServiceName, "S31050", FMLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
		sprintf (c_msg, "Failed in Processing record for Trade no.:%s:",c_eba_trd_no);
		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn ( TPFAIL, ERR_BFR, NULL, 0, 0 );
  }
  if (Fadd32(ptr_fml_Obuffer, FFO_SSSN_ID,  (char *)&l_session_id,0)  == -1)
  {
    fn_userlog(c_ServiceName,"Error in Fadd");
    fn_errlog ( c_ServiceName, "S31055", FMLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
		sprintf (c_msg, "Failed in Processing record for Trade no.:%s:",c_eba_trd_no);
		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn ( TPFAIL, ERR_BFR, NULL, 0, 0 );
  }
  
  /*Added for Ver 1.2 */
	memset ( c_member_cd, 0, sizeof ( c_member_cd ) );
	EXEC SQL
	  SELECT ltrim(rtrim(EXG_BRKR_ID))
	  INTO   :c_member_cd
	  FROM   EXG_XCHNG_MSTR
	  WHERE	 EXG_XCHNG_CD = 'NFO';

	if( SQLCODE != 0 )
	{
    fn_errlog ( c_ServiceName, "S31060", SQLMSG, c_err_msg );
		Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
		sprintf (c_msg, "Failed in Processing record for Trade no.:%s:",c_eba_trd_no);
		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn ( TPFAIL, ERR_BFR, NULL, 0, 0 );
	}

	c_member_cd[strlen(c_member_cd)] = '\0';

	/*End of Added for Ver 1.2*/

  i_err[0] = Fadd32(ptr_fml_Obuffer, FFO_XCHNG_CD ,
															 (char *)st_mtch_cntrct.c_xchng_cd, 0 );
  i_err[1] = Fadd32(ptr_fml_Obuffer, FFO_ACK_NMBR  ,
															 (char *)st_tradebook.c_xchng_ack, 0 );
  i_err[2] = Fadd32(ptr_fml_Obuffer, FFO_XCHNG_TRD_NO ,
														   (char *)&st_tradebook.l_xchng_trd_no, 0 );
  i_err[3] = Fadd32(ptr_fml_Obuffer, FFO_TRD_RFRNC ,
															 (char *)c_eba_trd_no, 0 );
  i_err[4] = Fadd32(ptr_fml_Obuffer, FFO_INSTRMNT_TYP , 
															 (char *)st_mtch_cntrct.c_instrmnt_typ, 0 );
  i_err[5] = Fadd32(ptr_fml_Obuffer, FFO_SYMBOL ,
										    		   (char *)st_mtch_cntrct.c_symbol, 0 );
  i_err[6] = Fadd32(ptr_fml_Obuffer, FFO_EXPRY_DT ,
															 (char *)st_mtch_cntrct.c_expry_dt, 0 );
  i_err[7] = Fadd32(ptr_fml_Obuffer, FFO_OPTION_TYP ,
															 (char *)st_mtch_cntrct.c_opt_typ, 0 );/**/
  i_err[8] = Fadd32(ptr_fml_Obuffer,FFO_STRIKE_PRC ,
														   (char *)&st_mtch_cntrct.d_strike_prc, 0 );/**/
/* 1.1  i_err[9] = Fadd32(ptr_fml_Obuffer, FFO_TRD_FLW ,
														   (char *)&st_tradebook.c_trd_flw, 0 ); */
  i_err[9] = Fadd32(ptr_fml_Obuffer, FFO_TRD_FLW ,
														   (char *)c_trd_flw, 0 ); 

  i_err[10] = Fadd32(ptr_fml_Obuffer, FFO_EXEC_QTY ,
														   (char *)&st_tradebook.l_exctd_qty, 0 );/**/
  i_err[11] = Fadd32(ptr_fml_Obuffer, FFO_EXCTD_RT ,
														   (char *)&st_tradebook.l_exctd_rt, 0 );/**/
  i_err[12] = Fadd32(ptr_fml_Obuffer, FFO_EBA_MTCH_ACT_NO ,
															 (char *)st_tradebook.c_cln_mtch_accnt, 0 );
	i_err[13] = Fadd32(ptr_fml_Obuffer, FFO_BRKRG_VL ,
															 (char *)&l_brkrg_vl, 0 );/**/
  i_err[14] = Fadd32(ptr_fml_Obuffer, FFO_SPL_FLG , (char *)&c_pro_cli_flg, 0 );
  i_err[15] = Fadd32(ptr_fml_Obuffer, FFO_SETTLOR , (char *)c_settlor, 0 );
  i_err[16] = Fadd32(ptr_fml_Obuffer, FFO_TM_STMP , (char *)c_tm_stmp, 0 );
  i_err[17] = Fadd32(ptr_fml_Obuffer, FFO_TRNSCTN_TYP , (char *)st_tradebook.c_trnsctn_typ, 0 );
  i_err[18] = Fadd32(ptr_fml_Obuffer, FFO_STATUS_FLG , (char *)&c_status_flg, 0 );
  i_err[19] = Fadd32(ptr_fml_Obuffer, FFO_CA_LVL , (char *)&st_mtch_cntrct.l_ca_lvl, 0 );
  /** 1.1 **/
  i_err[20] = Fadd32(ptr_fml_Obuffer, FFO_CLOSURE_DT , (char *)c_trd_ack_tm, 0 );
  /** 1.1 **/

  /*Added for Ver 1.2*/
  i_err[21] = Fadd32(ptr_fml_Obuffer, FFO_USER_CODE, (char *)c_member_cd, 0 );
  /*End of Added for Ver 1.2*/

  /**** Ver 1.4  ****/ 
  i_err[22] = Fadd32(ptr_fml_Obuffer,FFO_DLVRY_ALLWD,(char *)&c_brk_cmpt_flg,0);
  /**** Ver 1.4 ****/


/** 1.1   for (i=0;i<20;i++) **/
/**   for (i=0;i<21;i++)  Commented and added for Ver 1.2 **/
  
  for (i=0;i<23;i++)
  {
    if (i_err[i] == -1)
    {
    fn_userlog(c_ServiceName,"Error in Fadd at %d",i);
    fn_errlog ( c_ServiceName, "S31065", FMLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
		sprintf (c_msg, "Failed in Processing record for Trade no.:%s:",c_eba_trd_no);
		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn ( TPFAIL, ERR_BFR, NULL, 0, 0 );
    }
  }

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    strcpy ( ptr_st_err_msg->c_err_msg, c_err_msg );
    fn_errlog ( c_ServiceName, "S31070", LIBMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
		sprintf (c_msg, "Failed in Processing record for Trade no.:%s:",c_eba_trd_no);
		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }



  if(tpcall("SFO_UPLDTRADE",(char *)ptr_fml_Obuffer,0,
											(char **)&ptr_fml_Rbuffer,&l_rcv_length,TPNOTRAN) == -1)
	{
    fn_userlog(c_ServiceName,"Error in tpcall ");
    fn_errlog ( c_ServiceName, "S31075", TPMSG, c_err_msg );
    Fadd32(ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
		sprintf (c_msg, "Failed in Processing record for Trade no.:%s:",c_eba_trd_no);
		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		tpfree((char *)ptr_fml_Obuffer);
		tpfree((char *)ptr_fml_Rbuffer);
    tpreturn ( TPFAIL, ERR_BFR, NULL, 0, 0 );
		
	}
	      
        strcat (st_tradebook.c_ordr_rfrnc,"\0");
        strcat (c_trd_rfrnc,"\0");
        		

/* 1.1 EXEC SQL
				UPDATE FTD_FO_TRD_DTLS
				      SET FTD_UPLD_MTCH_FLG = 'Y'
				WHERE FTD_EBA_TRD_REF = st_tradebook.c_trd_rfrnc 
			        AND FTD_ORDR_RFRNC = :st_tradebook.c_ordr_rfrnc;  */

      EXEC SQL
				UPDATE FTD_FO_TRD_DTLS
				      SET FTD_UPLD_MTCH_FLG = 'Y'
				WHERE FTD_EBA_TRD_REF = :c_trd_rfrnc ; 


				if  ( SQLCODE != 0)
				{
						fn_userlog(c_ServiceName,"382 st_tradebook.c_trd_rfrnc :%s",st_tradebook.c_trd_rfrnc);

            fn_userlog(c_ServiceName,"384 c_trd_rfrnc :%s",c_trd_rfrnc);

            fn_userlog(c_ServiceName,"386 c_ordr_rfrnc :%s",c_ordr_rfrnc);

            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						fn_errlog ( c_ServiceName, "S31080", SQLMSG, c_err_msg );
						Fadd32(ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
						sprintf (c_msg, "Failed in Processing record for Trade no.:%s:",c_eba_trd_no);
						fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
						tpfree((char *)ptr_fml_Obuffer);
						tpfree((char *)ptr_fml_Rbuffer);
						tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
				}
				else
				{
					 fn_userlog(c_ServiceName,"399 st_tradebook.c_trd_rfrnc :%s",st_tradebook.c_trd_rfrnc);

            fn_userlog(c_ServiceName,"400 c_trd_rfrnc :%s",c_trd_rfrnc);

            fn_userlog(c_ServiceName,"403 st_tradebook.c_ordr_rfrnc :%s",st_tradebook.c_ordr_rfrnc);

           if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
						{
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							strcpy ( ptr_st_err_msg->c_err_msg, c_err_msg );
							fn_errlog ( c_ServiceName, "S31085", SQLMSG, c_err_msg );
							Fadd32(ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
							sprintf (c_msg, "Failed in Processing record for Trade no.:%s:",c_eba_trd_no);
							fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
							tpfree((char *)ptr_fml_Obuffer);
							tpfree((char *)ptr_fml_Rbuffer);
							tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
						}
				}
  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuffer, 0 , 0 );
}
