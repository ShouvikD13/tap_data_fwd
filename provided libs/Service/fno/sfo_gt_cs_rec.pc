/******************************************************************************/
/*	Program	    			:	SFO_GT_CS_REC                                         */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_CNTRCT_TAG                                        */
/*                      FFO_NEW_CNTRCT_TAG                                    */
/*                                                                            */
/*  Output            : FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_CNTRCT_TAG                                        */
/*                      FFO_CTGRY_INDSTK                                      */
/*                                                                            */
/*  Description       : To get the records for running the End-of-day MTM     */
/*                      process and passing it to the calling batch program   */
/*                                                                            */
/*  Log               : 1) Modified to add old contract tag as input - 19-6-02*/
/*  Log               : 2) Modified to Automate the process		- 27-Dec-2018   */
/*                                                                            */
/******************************************************************************/
/* 03-Jan-2002     Ver 1.0        Vinod Banjan      Release 1.0								*/
/* 03-Mar-2008		 Ver 1.1        Sandeep Patil			IBM CHANGES								*/
/* 28-Feb-2012     Ver 1.2        Shamili Dalvi.	 Spread benefit for selective*/
/*																								 scripts. 									*/
/* 13-Jul-2015     Ver 1.3        Anand Dhopte     Contract Master and Trade  */
/*                                                 Quote Table Merger Changes */        
/* 27-Dec-2018     Ver 1.4        Mrinal Kishore   AUTOMATION CHANGES         */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fn_battmpt.h>
#include <fn_tuxlib.h>
#include <fn_log.h>			 /*** Ver 1.1 ***/
#include <fn_read_debug_lvl.h>			/*** Ver 1.1 ***/

void SFO_GT_CS_REC( TPSVCINFO *rqst )
{

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
  char c_new_cntrct_tag ;
	/*** Add Start in Ver 1.4 ***/
  char c_sprd_allwd_flg = '\0';    					
	char c_sprd_allwd_flg1[2];  						
	char c_prd_typ = '\0';
	char c_prd_typ1[2]; 
  char c_sprd_chg_dt [ LEN_DATE ]; 			
	/*** Add ends in Ver 1.4 ***/

  int i_returncode;

  EXEC SQL BEGIN DECLARE SECTION;
    char c_xchng_cd [ 4 ];
		char	c_exp_dt [ LEN_DATE ];
    char sql_clm_mtch_accnt [ 11 ];
    char sql_xchng_cd [ 4 ];
    char sql_prdct_typ;
    char sql_undrlyng [ 7 ];
    varchar sql_expry_dt [ LEN_DATE ];
    char sql_exer_typ;
    char sql_indstk;
    char sql_cntrct_tag;
    char c_old_cntrct_tag;
    char c_old_cntrct_tag1[2];	/*** Ver 1.2 ***/
		char c_und_str[200]; 		/*** Ver 1.2 ***/
		varchar select_stmt[500];	/*** Ver 1.2 ***/
		varchar select_stmt1[500];	/*** Ver 1.2 ***/

  EXEC SQL END DECLARE SECTION;

  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );

	INITDBGLVL(c_ServiceName);			/*** Ver 1.1 ***/

	fn_userlog(c_ServiceName,"Inside sfo_gt_cs_rec...."); /** 1.2 **/ 

	MEMSET(c_und_str);     /**1.2 **/ 
	MEMSET(select_stmt);	 /**1.2**/
	MEMSET(select_stmt1);	 /**1.2**/
	MEMSET(c_sprd_chg_dt);	 /**1.4**/

	fn_userlog(c_ServiceName,"Unpacking FML ");   /** 1.2 **/

  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                    c_err_msg,
                                    ptr_fml_Ibuf,
                                    7,						/** Ver 1.2 ,4 changes to 5 *5->7 in ver 1.4***/
                                  FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                                  FFO_EXPRY_DT, ( char * )c_exp_dt, NULL,
                                  FFO_CNTRCT_TAG,(char *)&c_old_cntrct_tag,NULL,
                                  FFO_NEW_CNTRCT_TAG,(char *)&c_new_cntrct_tag,NULL,
																	FFO_STCK_CD,(char *)c_und_str,NULL, /*** 1.2 ***/
																	FFO_SOURCE_FLG, (char *)&c_sprd_allwd_flg,NULL,   /*** ver 1.4 ***/
																	FFO_RCRD_DT, ( char * )c_sprd_chg_dt, NULL);      /*** Ver 1.4 ***/

  if( i_returncode != 0 )
  {
		fn_userlog(c_ServiceName,"Error..........");
    fn_errlog( c_ServiceName, "S31005", LIBMSG , c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }

  if (DEBUG_MSG_LVL_3)			/*** Ver 1.1 ***/ 
	{
    fn_userlog( c_ServiceName, "c_xchng_cd :%s:", c_xchng_cd );
    fn_userlog( c_ServiceName, "c_exp_dt :%s:", c_exp_dt );
    fn_userlog( c_ServiceName, "c_old_cntrct_tag :%c:", c_old_cntrct_tag );
    fn_userlog( c_ServiceName, "c_new_cntrct_tag :%c:", c_new_cntrct_tag );
    fn_userlog( c_ServiceName, "c_und_str:%s:", c_und_str);		/*** Ver 1.2 ***/
    fn_userlog( c_ServiceName, "c_sprd_allwd_flg:%c:", c_sprd_allwd_flg);		/*** Ver 1.4 ***/
    fn_userlog( c_ServiceName, "c_sprd_chg_dt:%s:", c_sprd_chg_dt);		/*** Ver 1.4 ***/
  }

	/*********** Ver 1.2 starts *************/

	if(strcmp(c_und_str,"NONE")!=0 && strcmp(c_und_str,"AUT_SPLT")!=0)		/*** Ver 1.4 ***/
	{

			fn_userlog(c_ServiceName," New string present ....."); 
    
     /*** Commented in Ver 1.3 ***

		 strcpy ((char *)select_stmt.arr,"SELECT distinct FCM_CNTRCT_TAG FROM FCM_FO_CNTRCT_MSTR WHERE FCM_XCHNG_CD = '");
        strcat((char *)select_stmt.arr, c_xchng_cd);
        strcat((char *)select_stmt.arr,"' AND FCM_PRDCT_TYP = 'F");   
        strcat((char *)select_stmt.arr,"' AND FCM_EXPRY_DT = to_date('");  
        strcat((char *)select_stmt.arr,c_exp_dt); 
        strcat((char *)select_stmt.arr,"','dd-Mon-yyyy')"); 
        strcat((char *)select_stmt.arr,"AND FCM_UNDRLYNG in ("); 
        strcat((char *)select_stmt.arr,c_und_str);
        strcat((char *)select_stmt.arr,")");
     ******/

     /*** Ver 1.3 Starts ***/

     strcpy ((char *)select_stmt.arr,"SELECT distinct FTQ_CNTRCT_TAG FROM FTQ_FO_TRD_QT WHERE FTQ_XCHNG_CD = '");
     strcat((char *)select_stmt.arr, c_xchng_cd);
     strcat((char *)select_stmt.arr,"' AND FTQ_PRDCT_TYP = 'F");
     strcat((char *)select_stmt.arr,"' AND FTQ_EXPRY_DT = to_date('");
     strcat((char *)select_stmt.arr,c_exp_dt);
     strcat((char *)select_stmt.arr,"','dd-Mon-yyyy')");
     strcat((char *)select_stmt.arr,"AND FTQ_UNDRLYNG in (");
     strcat((char *)select_stmt.arr,c_und_str);
     strcat((char *)select_stmt.arr,")");  
 
     /*** Ver 1.3 Ends   ***/

			SETLEN(select_stmt);
		
			
			if (DEBUG_MSG_LVL_3){
			fn_userlog(c_ServiceName,"select_stmt.arr :%s:",select_stmt.arr);
			fn_userlog(c_ServiceName,"preparing qry");
			}

			EXEC SQL PREPARE sql_stmt FROM :select_stmt;
			if(SQLCODE != 0)
      {
            fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }


			 EXEC SQL DECLARE tag_cursor CURSOR FOR sql_stmt;

			 EXEC SQL OPEN tag_cursor;
			 if(SQLCODE != 0)
  		 {
						fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  			}

			 EXEC SQL FETCH tag_cursor INTO :sql_cntrct_tag;

      if(SQLCODE != 0)
      {
            fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						EXEC SQL CLOSE tag_cursor;
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

			EXEC SQL CLOSE tag_cursor;

	}
	else if(strcmp(c_und_str,"NONE")==0 && strcmp(c_und_str,"AUT_SPLT")!=0)		/*** Ver 1.4 ***/
	{
	fn_userlog(c_ServiceName," string Not present ....."); 

  /*** Commented in Ver 1.3 ***
	EXEC SQL
     SELECT distinct FCM_CNTRCT_TAG
     INTO :sql_cntrct_tag
     FROM FCM_FO_CNTRCT_MSTR
     WHERE FCM_XCHNG_CD = :c_xchng_cd
     AND   FCM_PRDCT_TYP = 'F'
     AND   FCM_EXPRY_DT = to_date (:c_exp_dt,'dd-Mon-yyyy');
  ******/

  /*** Ver 1.3 Starts ***/

  EXEC SQL
     SELECT distinct FTQ_CNTRCT_TAG
     INTO :sql_cntrct_tag
     FROM FTQ_FO_TRD_QT
     WHERE FTQ_XCHNG_CD = :c_xchng_cd
     AND   FTQ_PRDCT_TYP = 'F'
     AND   FTQ_EXPRY_DT = to_date (:c_exp_dt,'dd-Mon-yyyy'); 

  /*** Ver 1.3 Ends   ***/

	/*********** Ver 1.2 Ends *************/

  if( SQLCODE != 0 )
  {
     /* Multiple rows returned is also a failure */
     /* Contract tag is supposed to be uniform accross scrips for a given */
     /* expiry date */

      fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	}
	/*** Ver 1.4 Started ***/
	else if( strcmp(c_und_str,"AUT_SPLT")==0 )
	{
		fn_userlog(c_ServiceName," Inside Automated call case .....");
		EXEC SQL
		 SELECT distinct FTQ_CNTRCT_TAG
     INTO :sql_cntrct_tag
     FROM FTQ_FO_TRD_QT
     WHERE FTQ_XCHNG_CD = :c_xchng_cd
     AND   FTQ_PRDCT_TYP = 'F'
     AND   FTQ_EXPRY_DT = to_date (:c_exp_dt,'dd-Mon-yyyy')
		 AND	 FTQ_UNDRLYNG in (select FUM_UNDRLYNG
                             FROM  FUM_FO_UNDRLYNG_MSTR
                             WHERE NVL(FUM_SPRD_ALLWD_FLG,'*') = :c_sprd_allwd_flg
                             AND   FUM_XCHNG_CD = :c_xchng_cd
                             AND   FUM_PRDCT_TYP = 'F'
														 AND	 FUM_SPRD_CHNG_DT = TO_DATE(:c_sprd_chg_dt,'DD-MON-YYYY'));
	 if( SQLCODE != 0 )
   {
     /* Multiple rows returned is also a failure */
     /* Contract tag is supposed to be uniform accross scrips for a given FUM_SPRD_ALLWD_FLG,FUM_SPRD_CHNG_DT*/
     /* and FTQ_EXPRY_DT*/
      fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
	}
	else
	{
		fn_userlog(c_ServiceName,"Invalid Spread Allowed Flag. Please check...");
		strcpy ( c_err_msg , "Invalid Spread Allowed Flag. Please check...");
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	/*** Ver 1.4 Ends ***/
	 if (DEBUG_MSG_LVL_3){
	 fn_userlog(c_ServiceName,"sql_cntrct_tag :%c:",sql_cntrct_tag);
	 fn_userlog(c_ServiceName,"c_new_cntrct_tag:%c:",c_new_cntrct_tag);
	 }
  
  if ( sql_cntrct_tag != c_new_cntrct_tag )
  {
		fn_userlog(c_ServiceName,"Contract tag Mismatch");
    strcpy ( c_err_msg , "Contract tag Mismatch ");
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

/*******************
  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );
*******************/


  ptr_fml_Obuf = NULL;

	/*********************** Commented in Ver 1.2 *******************

	EXEC SQL
      DECLARE cur_cntrct_splt_rec CURSOR FOR
      SELECT  ffp_clm_mtch_accnt,
              ffp_xchng_cd,
              ffp_prdct_typ,
              ffp_undrlyng,
              to_char(ffp_expry_dt,'DD-Mon-YYYY'),
              ffp_exer_typ,
              ffp_cntrct_tag,
              ffp_indstk
      FROM    ffp_fo_futures_pstn
      WHERE   ffp_xchng_cd = :c_xchng_cd
      AND     ffp_cntrct_tag = :c_old_cntrct_tag
      AND     ffp_expry_dt = to_date (:c_exp_dt,'dd-Mon-yyyy');

    EXEC SQL
      OPEN cur_cntrct_splt_rec;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg );
      tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }


	****************************************************************/


	/*********** Ver 1.2 Starts ***************/

	c_old_cntrct_tag1[0] = c_old_cntrct_tag;
	c_old_cntrct_tag1[1] = '\0'; 
	/*** ver 1.4 Starts ***/
	c_sprd_allwd_flg1[0] = c_sprd_allwd_flg;
  c_sprd_allwd_flg1[1] = '\0';
	c_prd_typ1[0] = 'F';
	c_prd_typ1[1] = '\0';
	/*** ver 1.4 Ends ***/

	if (DEBUG_MSG_LVL_3){
	fn_userlog(c_ServiceName,"c_old_cntrct_tag1:%s:",c_old_cntrct_tag1);
	fn_userlog(c_ServiceName,"c_sprd_allwd_flg1:%s:",c_sprd_allwd_flg1);		/*** Ver 1.4 ***/
	fn_userlog(c_ServiceName,"c_prd_typ1:%s:",c_prd_typ1);		/*** Ver 1.4 ***/
	}

	/* if(strcmp(c_und_str,"NONE")!=0 )															*** ver 1.4 ***/      
	if(strcmp(c_und_str,"NONE")!=0 && strcmp(c_und_str,"AUT_SPLT")!=0)			/*** ver 1.4 ***/      
	{

		if (DEBUG_MSG_LVL_3){
		fn_userlog(c_ServiceName,"c_und_str is not NONE"); }

		strcpy ((char *)select_stmt1.arr,"SELECT ffp_clm_mtch_accnt,ffp_xchng_cd,ffp_prdct_typ,ffp_undrlyng,to_char(ffp_expry_dt,'DD-Mon-YYYY'),ffp_exer_typ,ffp_cntrct_tag,ffp_indstk FROM ffp_fo_futures_pstn WHERE ffp_xchng_cd = '");
      strcat((char *)select_stmt1.arr,c_xchng_cd);
      strcat((char *)select_stmt1.arr,"' AND ffp_cntrct_tag = '");    
      strcat((char *)select_stmt1.arr,c_old_cntrct_tag1);
			strcat((char *)select_stmt1.arr,"' AND ffp_expry_dt = to_date('");
      strcat((char *)select_stmt1.arr,c_exp_dt);
      strcat((char *)select_stmt1.arr,"',");
      strcat((char *)select_stmt1.arr,"'dd-Mon-yyyy')");
      strcat((char *)select_stmt1.arr,"AND ffp_undrlyng in (");
      strcat((char *)select_stmt1.arr, c_und_str);
      strcat((char *)select_stmt1.arr, ")");


		}
	/*	else if(strcmp(c_und_str,"NONE")==0)			*** ver 1.4 ***/
		else if(strcmp(c_und_str,"NONE")==0 && strcmp(c_und_str,"AUT_SPLT")!=0)    /*** Ver 1.4 ***/
		{

			if (DEBUG_MSG_LVL_3){
			fn_userlog(c_ServiceName,"c_und_str is NONE");}


			strcpy ((char *)select_stmt1.arr,"SELECT ffp_clm_mtch_accnt,ffp_xchng_cd,ffp_prdct_typ,ffp_undrlyng,to_char(ffp_expry_dt,'DD-Mon-YYYY'),ffp_exer_typ,ffp_cntrct_tag,ffp_indstk FROM ffp_fo_futures_pstn WHERE ffp_xchng_cd = '");
      strcat((char *)select_stmt1.arr,c_xchng_cd);
      strcat((char *)select_stmt1.arr,"' AND ffp_cntrct_tag = '");
      strcat((char *)select_stmt1.arr,c_old_cntrct_tag1);
      strcat((char *)select_stmt1.arr,"' AND ffp_expry_dt = to_date('");
      strcat((char *)select_stmt1.arr,c_exp_dt);
      strcat((char *)select_stmt1.arr,"',");
			strcat((char *)select_stmt1.arr,"'dd-Mon-yyyy'");
      strcat((char *)select_stmt1.arr,")");

		}
		/*** Ver 1.4 Started ***/
		else if( strcmp(c_und_str,"AUT_SPLT")==0 )
		{
			if (DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Preparing query for automated call");
			}
			strcpy ((char *)select_stmt1.arr,"SELECT ffp_clm_mtch_accnt,ffp_xchng_cd,ffp_prdct_typ,ffp_undrlyng,to_char(ffp_expry_dt,'DD-Mon-YYYY'),ffp_exer_typ,ffp_cntrct_tag,ffp_indstk FROM ffp_fo_futures_pstn WHERE ffp_xchng_cd = '");
			strcat((char *)select_stmt1.arr,c_xchng_cd);
			strcat((char *)select_stmt1.arr,"' AND ffp_cntrct_tag = '");
			strcat((char *)select_stmt1.arr,c_old_cntrct_tag1);
			strcat((char *)select_stmt1.arr,"' AND ffp_expry_dt = to_date('");
			strcat((char *)select_stmt1.arr,c_exp_dt);
			strcat((char *)select_stmt1.arr,"',");
			strcat((char *)select_stmt1.arr,"'dd-Mon-yyyy')");
			strcat((char *)select_stmt1.arr,"AND ffp_undrlyng in (");
			strcat((char *)select_stmt1.arr,"select FUM_UNDRLYNG FROM FUM_FO_UNDRLYNG_MSTR WHERE FUM_SPRD_ALLWD_FLG='");
			strcat((char *)select_stmt1.arr,c_sprd_allwd_flg1);
			strcat((char *)select_stmt1.arr,"' AND   FUM_XCHNG_CD='");
			strcat((char *)select_stmt1.arr,c_xchng_cd);
			strcat((char *)select_stmt1.arr,"' AND FUM_PRDCT_TYP = '");
			strcat((char *)select_stmt1.arr,c_prd_typ1);
			strcat((char *)select_stmt1.arr,"' AND FUM_SPRD_CHNG_DT = TO_DATE('");
			strcat((char *)select_stmt1.arr,c_sprd_chg_dt);
			strcat((char *)select_stmt1.arr,"',");
			strcat((char *)select_stmt1.arr,"'dd-Mon-yyyy'");
			strcat((char *)select_stmt1.arr,")");
			strcat((char *)select_stmt1.arr,")");
		}
		/*** Ver 1.4 Ends ***/

    if( SQLCODE != 0 )
    {
							fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg );
							tpfree ( ( char * ) ptr_fml_Obuf );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		SETLEN(select_stmt1);

		EXEC SQL PREPARE sql_stmt1 FROM :select_stmt1;
  	if(SQLCODE != 0)
  	{
						fn_errlog( c_ServiceName, "S31045", SQLMSG, c_err_msg );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}	

		EXEC SQL DECLARE cur_cntrct_splt_rec CURSOR FOR sql_stmt1;

  	EXEC SQL OPEN cur_cntrct_splt_rec;

  	if(SQLCODE != 0)
  	{
						fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg );
						tpfree ( ( char * ) ptr_fml_Obuf );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

	
		/************** Ver 1.2 Ends *****************************/



    while(1)
    {


      EXEC SQL
        FETCH cur_cntrct_splt_rec
        INTO  :sql_clm_mtch_accnt,
              :sql_xchng_cd,
              :sql_prdct_typ,
              :sql_undrlyng,
              :sql_expry_dt,
              :sql_exer_typ,
              :sql_cntrct_tag,
              :sql_indstk;

        if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
        {
          fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg );
					EXEC SQL CLOSE cur_cntrct_splt_rec;
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        if( SQLCODE == NO_DATA_FOUND )
        {

					fn_userlog(c_ServiceName,"Inside NO_DATA_FOUND");
          break;
        }

        SETNULL ( sql_expry_dt );
        rtrim(sql_undrlyng);
        rtrim(sql_clm_mtch_accnt);
        rtrim(sql_xchng_cd);


				fn_userlog(c_ServiceName,"packing data");

        i_returncode = fn_pack_vartofml( c_ServiceName,
                                         c_err_msg,
                                         &ptr_fml_Obuf,
                                         8,
                             FFO_EBA_MTCH_ACT_NO, ( char * )sql_clm_mtch_accnt,
                             FFO_XCHNG_CD, ( char * )sql_xchng_cd,
                             FFO_PRDCT_TYP, ( char * )&sql_prdct_typ,
                             FFO_UNDRLYNG, ( char * )sql_undrlyng,
                             FFO_EXPRY_DT, ( char * )sql_expry_dt.arr,
                             FFO_EXER_TYP, ( char * )&sql_exer_typ,
                             FFO_CNTRCT_TAG, ( char * )&sql_cntrct_tag,
                             FFO_CTGRY_INDSTK, ( char * )&sql_indstk );

        if( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31060", LIBMSG, c_err_msg );
          EXEC SQL
						CLOSE cur_cntrct_splt_rec;
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }
     }

		fn_userlog(c_ServiceName,"clearing cursor");

    EXEC SQL
			CLOSE cur_cntrct_splt_rec;

  tpreturn(TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
}

