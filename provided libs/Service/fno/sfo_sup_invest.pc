/********************************************************************************************************/
/*  Program           : SFO_SUP_INVEST                                                                  */
/*                                                                                                      */
/*  Description       : This service retrieves,insert and update profit,challenge status and            */
/*                      customer details in to registration table.                                      */
/*                                                                                                      */
/*  Log               : 1.0     02-Dec-2021                                                             */
/********************************************************************************************************/
/*                                                                                                      */
/*  1.0   -   New Release  (Mahesh Regulwar)                                                            */
/********************************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fml_rout.h>
#include <fml_def.h>
#include <fo_fml_def.h>
#include <fn_span_lib.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fn_session.h>
#include <fn_read_debug_lvl.h>
#include <math.h>
#include <fo_view_def.h>
#include <stdarg.h>
#include <fn_battmpt.h>
#include <fn_pos.h>
#include <eba_to_ors.h>


int fn_pack_vartofml ( char *c_ServiceName,
                       char *c_err_msg,
                       FBFR32 **ptr_fml_obuf,
                       int i_tot_ofields,
                       ... );

void SFO_SUP_INVEST(TPSVCINFO *rqst)

{



  int  i_ch_val = 0;
  int  i_returncode = 0;
  int  i_return=0;

	char  c_err_chck[256] = "\0";
  char  c_rqst_type = '\0';
  char  c_reg_dt[22] = "\0";
  char  c_strt_dt[22] = "\0";
  char  c_end_dt[22] = "\0";
  char  c_challenge[101] = "\0";
  char  c_match_accnt[21] = "\0";
  char  c_first_name[21] = "\0";
  char  c_middle_name[21] = "\0";
  char  c_last_name[21] = "\0";
  char  c_pan_no[11] = "\0";
  char  c_status = '\0';
  char  c_ServiceName[33]="\0";
  char  c_err_msg[256]="\0";
  char  c_msg[256]="\0";
  char  c_tag[256]="\0"; 
  char  c_ongreg_dt[22] = "\0";
  char  c_ongend_dt[22] = "\0";
  char  c_mon_name[22]  = "\0"; 
  char  c_xchng_cd[4]="NFO";
  char  c_cln_mtch_accnt [ 11 ];
  char  c_prdct_typ_opt = 'O';
  char  c_prdct_typ_fut = 'F';
  char  c_rout_crt[5] = "111";
  char  c_strt_dt_temp[LEN_DATE];
  char  c_undrlyng[2] = "A";
  char  c_end_dt_temp[LEN_DATE];
  char  c_user_id[21] = "system";
  char  c_chlnguser_id[21] = "system";
  char  c_chlng_acc_flg='N';
  char  c_mssg_typ= '\0';
  char  c_accpt_flg= '\0';
  char  c_prdct_cd[4]= "\0";
  char  c_lst_trd_dt[LEN_DATE]="\0";
  char  c_req_flg = 'S';
	char  c_err_chck_opt[256] = {'\0'};
  char  c_err_chck_fut[256] = {'\0'};
	char  c_chlng_enddt[LEN_DATE]="\0";

  int i_rec_exists = 0;
  double d_prtfl_tot_charges= 0.0;
  double d_prtfl_tot_pl = 0.0;
 
  double  d_rlzd_pl_opt = 0.0;
  long    l_charges_opt = 0;
  double  d_unrlzd_pl_opt = 0.0;
  double  d_rlzd_pl_fut = 0.0;
  long    l_charges_fut = 0;
  double  d_unrlzd_pl_fut = 0.0;
  double  d_tot_charges = 0.0;
  double  d_tot_pl = 0.0;
  double  d_rlzd_pl_opt_temp = 0.0;
  long    l_charges_opt_temp = 0;
  double  d_unrlzd_pl_opt_temp = 0.0;
  double  d_rlzd_pl_fut_temp = 0.0;
  long    l_charges_fut_temp = 0;
  double  d_unrlzd_pl_fut_temp = 0.0;
  double  d_pnl = 0.0;
  
  int  i_err[36];
  int  i_ferr[36];
  int  i_cnt = 0; 
  int  counter = 0; 
  int  i_trnsctn = 0;
  int  i_opt_count = 0;
  int  i_fut_count = 0;
  int  i_opt_counter = 0;
  int  i_fut_counter = 0;
  int  i = 0;
  int  i_err_cnt_fut = 0;
  int  i_err_cnt_opt = 0;
 
  long  l_session_id[21] = {0};
  long  l_recvbuf = 0;
  long  l_recvbuff = 0;

  FBFR32 *ptr_fml_IObuf = (FBFR32 *)NULL;
  FBFR32 *ptr_fml_IFbuf = (FBFR32 *)NULL;
  FBFR32 *ptr_fml_Obuf = (FBFR32 *)NULL; /* pointer to FML output */
  FBFR32 *ptr_fml_Ibuf = (FBFR32 *)NULL; /* pointer to FML input */
  FBFR32 *ptr_fml_SObuf = (FBFR32 *)NULL;  /*** Buffer used for Options ***/
  FBFR32 *ptr_fml_SFbuf = (FBFR32 *)NULL;   /*** Buffer used for Futures ***/ 
  FBFR32 *ptr_fml_Sbuffer = (FBFR32 *)NULL;
  FBFR32 *ptr_fml_Rbuffer = (FBFR32 *)NULL;

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
  if( DEBUG_MSG_LVL_3)
  {
  fn_userlog(c_ServiceName, "Working on this service");
  }
   
  struct vw_usr_prfl st_usr_prfl;
  struct vw_err_msg st_err_msg;
  MEMSET(c_err_msg);
  
  if( DEBUG_MSG_LVL_3)
  {
  fn_userlog(c_ServiceName," ---------- SFO_SUP_INVEST started -----------");
  }

  /********************************************* User and session authentication starts here ****************************************/

  i_ch_val = fn_unpack_fmltovar_dflt ( c_ServiceName,
                                      c_err_msg,
                                      ptr_fml_Ibuf,
                                      3,
                                      FFO_EBA_MTCH_ACT_NO, (char*)st_usr_prfl.c_cln_mtch_accnt, "*",
                                      FFO_USR_ID, (char*)st_usr_prfl.c_user_id, "NULL",
                                      FFO_SSSN_ID, (char*)&st_usr_prfl.l_session_id, "0");
  if ( i_ch_val != 0  )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if ( strcmp(st_usr_prfl.c_user_id,"system") != 0 && st_usr_prfl.l_session_id != 0)
  {
    i_ch_val = fn_chk_sssn( c_ServiceName, &st_usr_prfl, &st_err_msg );

    if ( i_ch_val == -1 )
    {
      fn_errlog( c_ServiceName,"S31010", LIBMSG, st_err_msg.c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }



 /*********************************************************** authentication ends here ********************************************/

  if (Fget32(ptr_fml_Ibuf, FFO_RQST_TYP, 0, (char * )&c_rqst_type, 0) == -1)
  {
    fn_userlog(c_ServiceName, "error occured while fetching c_reqst_type ---- request type not available");
    fn_errlog(c_ServiceName, "S31015", LIBMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);

  }
  if( DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName, "Retreived reqst_type sucessfully is :%c:",c_rqst_type);
  }

  /* Allocating memory to output-buffer */
  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  strcpy(c_match_accnt,st_usr_prfl.c_cln_mtch_accnt);
  rtrim(c_match_accnt);

  /*** Selecting last trade date of month based on system date start here ***/
  EXEC SQL
  select SYSDATE
  into  :c_ongreg_dt
  from DUAL;
  if( SQLCODE != 0 )
  {
     fn_errlog(c_ServiceName, "S31025", SQLMSG, c_err_msg);
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     tpfree( ( char * )ptr_fml_Obuf);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	
  if( DEBUG_MSG_LVL_3)
  {
	 fn_userlog(c_ServiceName,"c_ongreg_dt :%s:",c_ongreg_dt);
  }

  EXEC SQL
  select MONTH_NAME
  into :c_mon_name
  from( select   to_char(to_date(:c_ongreg_dt,'dd-Mon-yyyy'),'Mon') AS MONTH_NAME
        from dual);
  if( SQLCODE != 0 )
  {
     fn_errlog(c_ServiceName, "S31030", SQLMSG, c_err_msg);
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     tpfree( ( char * )ptr_fml_Obuf);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	rtrim(c_mon_name);
  if( DEBUG_MSG_LVL_3)
  {
  fn_userlog(c_ServiceName, "c_mon_name :%s:",c_mon_name);
  }
  
  EXEC SQL
 	select max(FBC_TRD_DT) 
	Into : c_chlng_enddt
	from FBC_FO_BRNCH_CAL where FBC_TRD_DT <= last_day(sysdate) and FBC_XCHNG_CD= :c_xchng_cd; 
  
	if( SQLCODE != 0 )
  {
     fn_errlog(c_ServiceName, "S31035", SQLMSG, c_err_msg);
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     tpfree( ( char * )ptr_fml_Obuf);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/*** Added by Ravindra ***/
	if ( Fadd32(ptr_fml_Obuf, FFO_EXPRY_DT, (char *)c_chlng_enddt, 0) == -1)
	{
  	fn_userlog(c_ServiceName,"Error in Fadd for i [%d]",i_cnt);
  	fn_errlog( c_ServiceName, "S31040", FMLMSG, c_err_msg  );
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree( ( char * )ptr_fml_Obuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
  }
	/*** Added by Ravindra ***/	

  if( c_rqst_type == 'V' )  /** rqst_type = 'V', to fetch Super Investor table starts here **/
  {

		i_opt_count = 0;
		i_fut_count = 0;
	
    EXEC SQL
      select trunc(sysdate,'MM'),
             last_day(add_months(sysdate,2) ) 
      into   :c_strt_dt,
             :c_end_dt
      from dual;

      if( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31045", SQLMSG, c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpfree( ( char * )ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
      }


      /*** Calculation for Option Trades starts here ***/
      i_returncode = fn_pack_vartofml ( c_ServiceName,
                     c_err_msg,
                     &ptr_fml_SObuf,
                     10,
                     FFO_PRDCT_TYP,      (char *)&c_prdct_typ_opt,
                     FFO_UNDRLYNG,       (char *)&c_undrlyng,
                     FFO_SSSN_ID,             (char *) &st_usr_prfl.l_session_id,
                     FFO_ROUT_CRT,        (char *)c_rout_crt,
                     FFO_USR_ID,              (char *)st_usr_prfl.c_user_id,
                     FFO_XCHNG_CD,       (char *)c_xchng_cd,
                     FFO_EBA_MTCH_ACT_NO,  (char *)c_match_accnt,
                     FFO_FROM_DT,         (char *)c_strt_dt,
                     FFO_TO_DT,               (char *)c_end_dt,
                     FFO_RQST_TYP,              (char *)&c_req_flg);
       if ( i_returncode != 0 )
       {
         fn_errlog( c_ServiceName, "S31050", LIBMSG, c_err_msg);
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         tpfree( ( char * )ptr_fml_Obuf);
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }

       ptr_fml_IObuf = ( FBFR32 *)NULL;
       ptr_fml_IObuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

       if ( ptr_fml_IObuf  == NULL )
       {
         fn_errlog( c_ServiceName, "S31055", TPMSG, c_err_msg);
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				 tpfree( ( char * )ptr_fml_Obuf);
         tpfree( ( char * )ptr_fml_SObuf);
         tpfree( ( char * )ptr_fml_Obuf);
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }

       i_returncode = tpcall ( "SFO_OPT_PRTFL",
                    ( char *)ptr_fml_SObuf,
                    0,
                    ( char **)&ptr_fml_IObuf ,
                    &l_recvbuf,
                    0
                    );
			 if ( i_returncode != SUCC_BFR)
       {
          fn_errlog( c_ServiceName, "S31060",TPMSG,c_err_msg);
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpfree( ( char * )ptr_fml_Obuf);
          tpfree( ( char * )ptr_fml_IObuf);
          tpfree( ( char * )ptr_fml_SObuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }
       if ( Fget32( ptr_fml_IObuf,FFO_ERR_MSG,0,(char *)c_err_chck_opt, 0)== -1)
       {
         if( Ferror32 != FNOTPRES )
         {
           fn_errlog( c_ServiceName, "S31065",TPMSG,c_err_msg);
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           tpfree( ( char * )ptr_fml_Obuf);
           tpfree( ( char * )ptr_fml_IObuf);
           tpfree( ( char * )ptr_fml_SObuf);
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }
         else
           i_err_cnt_opt = 1;
       }

       if ( i_err_cnt_opt != 1 )
       {
         fn_userlog(c_ServiceName, "C_ERR_CHCK_OPT is :%s:.",c_err_chck_opt);
         if ( strcmp(c_err_chck_opt,"No record to be shown in this view") != 0 )
         {
           fn_errlog( c_ServiceName, "S31070",TPMSG,c_err_msg);
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           tpfree( ( char * )ptr_fml_Obuf);
           tpfree( ( char * )ptr_fml_IObuf);
           tpfree( ( char * )ptr_fml_SObuf);
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }
         fn_userlog(c_ServiceName, "No records for for match id :%s: under OPTION PROTFOLIO.",c_match_accnt);
       }
       
       /* Fetching total options record count returned by sfo_opt_prtfl service for particular match id */
       i_opt_count = Foccur32((FBFR32 * ) ptr_fml_IObuf, FFO_RLZD_PL);
       if( DEBUG_MSG_LVL_3)
       {
        fn_userlog(c_ServiceName, "Total count records returned by sfo_opt_prtfl for match id :%s: is :%d:", c_match_accnt,i_opt_count);
        }
       	for ( i_opt_counter = 0; i_opt_counter < i_opt_count; i_opt_counter++ ) /** for loop to process values returned by sfo_opt_prtfl **/
       	{
        	d_rlzd_pl_opt_temp = 0.0;
        	l_charges_opt_temp = 0;
        	d_unrlzd_pl_opt_temp = 0.0;

        	i_err [ 0 ] = Fget32( ptr_fml_IObuf ,FFO_RLZD_PL,i_opt_counter,(char *)&d_rlzd_pl_opt_temp ,0);
        	i_ferr[0] = Ferror32;
        	i_err [ 1 ] = Fget32( ptr_fml_IObuf ,FFO_BRKRG_VL,i_opt_counter,(char *)&l_charges_opt_temp ,0);
        	i_ferr[1] = Ferror32;
        	i_err [ 2] = Fget32( ptr_fml_IObuf ,FFO_UNRLZD_PL,i_opt_counter,(char *)&d_unrlzd_pl_opt_temp ,0);
        	i_ferr[2] = Ferror32;

        	for ( i =0; i<3; i++ )
        	{
          	if(i_err[0] == -1 )
          	{
            	fn_userlog( c_ServiceName, "Error in Fetching PL and Charges Vlues for Option trades");
            	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              tpfree( ( char * )ptr_fml_Obuf);
            	tpfree( ( char * )ptr_fml_IObuf);
            	tpfree( ( char * )ptr_fml_SObuf);
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
          	}
        	}
          if( DEBUG_MSG_LVL_3)
         {
					fn_userlog(c_ServiceName,"OPT RLZD=:%lf: UNRLZD=:%lf: CHARGES=:%ld:", d_rlzd_pl_opt_temp,d_unrlzd_pl_opt_temp,l_charges_opt_temp);
         }  
        	d_rlzd_pl_opt = d_rlzd_pl_opt_temp + d_rlzd_pl_opt;
        	l_charges_opt = l_charges_opt_temp + l_charges_opt;
        	d_unrlzd_pl_opt = d_unrlzd_pl_opt_temp + d_unrlzd_pl_opt;
          if( DEBUG_MSG_LVL_3)
         {
					fn_userlog(c_ServiceName,"OPT NET RLZD=:%lf: UNRLZD=:%lf: CHARGES=:%ld:", d_rlzd_pl_opt,d_unrlzd_pl_opt,l_charges_opt);
         }

       	}   /*** For loop used for summing values returned by sfo_opt_prtfl ends here ***/
      /*** Calculations for Options trade ends here ***/

       /*** Calculations for Futures trade starts here ***/
       i_returncode = fn_pack_vartofml ( c_ServiceName,
                     c_err_msg,
                     &ptr_fml_SFbuf,
                     10,
                     FFO_PRDCT_TYP,      (char *)&c_prdct_typ_fut,
                     FFO_UNDRLYNG,       (char *)&c_undrlyng,
                     FFO_SSSN_ID,             (char *) &st_usr_prfl.l_session_id,
                     FFO_ROUT_CRT,        (char *)c_rout_crt,
                     FFO_USR_ID,              (char *)st_usr_prfl.c_user_id,
                     FFO_XCHNG_CD,       (char *)c_xchng_cd,
                     FFO_EBA_MTCH_ACT_NO,  (char *)c_match_accnt,
                     FFO_FROM_DT,         (char *)c_strt_dt,
                     FFO_TO_DT,               (char *)c_end_dt,
                     FFO_RQST_TYP,              (char *)&c_req_flg);
       if ( i_returncode != 0 )
       {
        fn_errlog( c_ServiceName, "S31075", LIBMSG, c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpfree( ( char * )ptr_fml_Obuf);
        tpfree( ( char * )ptr_fml_IObuf);
        tpfree( ( char * )ptr_fml_SObuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }

       ptr_fml_IFbuf = ( FBFR32 *)NULL;
       ptr_fml_IFbuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

       if ( ptr_fml_IFbuf  == NULL )
       {
        fn_errlog( c_ServiceName, "S31080", TPMSG, c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpfree( ( char * )ptr_fml_SFbuf);
        tpfree( ( char * )ptr_fml_Obuf);
        tpfree( ( char * )ptr_fml_IObuf);
        tpfree( ( char * )ptr_fml_SObuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );       
       }

       i_returncode = tpcall ( "SFO_FUT_PRTFL",
                    ( char *)ptr_fml_SFbuf,
                    0,
                    ( char **)&ptr_fml_IFbuf ,
                    &l_recvbuf,
                    0
                    );
			  if ( i_returncode != SUCC_BFR)
        {
          fn_errlog( c_ServiceName, "S31085","NOT THE EXPECTED ERROR MESSAGE.",c_err_msg);
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpfree( ( char * )ptr_fml_Obuf);
          tpfree( ( char * )ptr_fml_IFbuf);
          tpfree( ( char * )ptr_fml_SFbuf);
          tpfree( ( char * )ptr_fml_IObuf);
          tpfree( ( char * )ptr_fml_SObuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

				if ( Fget32( ptr_fml_IObuf,FFO_ERR_MSG,0,(char *)c_err_chck_fut, 0)== -1)
        {
          if( Ferror32 != FNOTPRES )
          {
            fn_errlog( c_ServiceName, "S31090","No value in FML FFO_ERR_MSG.",c_err_msg);
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpfree( ( char * )ptr_fml_Obuf);
            tpfree( ( char * )ptr_fml_IFbuf);
            tpfree( ( char * )ptr_fml_SFbuf);
            tpfree( ( char * )ptr_fml_IObuf);
            tpfree( ( char * )ptr_fml_SObuf);
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
          else
            i_err_cnt_fut = 1;
        }

        if ( i_err_cnt_fut != 1 )
        {
          fn_userlog(c_ServiceName, "C_ERR_CHCK_FUT is :%s:.",c_err_chck_fut);
          if ( strcmp(c_err_chck_fut,"No record to be shown in this view") != 0 )
          {
            fn_errlog( c_ServiceName, "S31095","NOT THE EXPECTED ERROR MESSAGE.",c_err_msg);
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpfree( ( char * )ptr_fml_Obuf);
            tpfree( ( char * )ptr_fml_IFbuf);
            tpfree( ( char * )ptr_fml_SFbuf);
            tpfree( ( char * )ptr_fml_IObuf);
            tpfree( ( char * )ptr_fml_SObuf);
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
          fn_userlog(c_ServiceName, "No records for for match id :%s: under FUTURE PROTFOLIO.",c_match_accnt);
        }

       /* Fetching total options record count returned by sfo_fut_prtfl service for particular match id */
       i_fut_count = Foccur32((FBFR32 * ) ptr_fml_IFbuf, FFO_RLZD_PL);
      
       if( DEBUG_MSG_LVL_3)
       {
        fn_userlog(c_ServiceName, "Total count records returned by sfo_fut_prtfl for match id :%s: is :%d:", c_match_accnt,i_fut_count);
       }

       	for ( i_fut_counter = 0; i_fut_counter < i_fut_count; i_fut_counter++ ) /** for loop to process values returned by sfo_fut_prtfl **/
       	{
        	d_rlzd_pl_fut_temp = 0.0;
        	l_charges_fut_temp = 0;
        	d_unrlzd_pl_fut_temp = 0.0;

        	i_err [ 0 ] = Fget32( ptr_fml_IFbuf ,FFO_RLZD_PL,i_fut_counter,(char *)&d_rlzd_pl_fut_temp ,0);
        	i_ferr[0] = Ferror32;
        	i_err [ 1 ] = Fget32( ptr_fml_IFbuf ,FFO_BRKRG_VL,i_fut_counter,(char *)&l_charges_fut_temp ,0);
        	i_ferr[1] = Ferror32;
        	i_err [ 2] = Fget32( ptr_fml_IFbuf ,FFO_UNRLZD_PL,i_fut_counter,(char *)&d_unrlzd_pl_fut_temp , 0);
        	i_ferr[2] = Ferror32;

        	for ( i =0; i<3; i++ )
        	{
          	if(i_err[0] == -1 )
          	{
            	fn_userlog( c_ServiceName, "Error in Fetching PL and Charges Vlues for Option trades");
            	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              tpfree( ( char * )ptr_fml_Obuf);
            	tpfree( ( char * )ptr_fml_IFbuf);
            	tpfree( ( char * )ptr_fml_SFbuf);
              tpfree( ( char * )ptr_fml_IObuf);
              tpfree( ( char * )ptr_fml_SObuf);
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );  
          	}
        	}
          if( DEBUG_MSG_LVL_3)
          {
					 fn_userlog(c_ServiceName,"FUT RLZD=:%lf: UNRLZD=:%lf: CHARGES=:%ld:", d_rlzd_pl_fut_temp,d_unrlzd_pl_fut_temp,l_charges_fut_temp);
        	}
          d_rlzd_pl_fut = d_rlzd_pl_fut_temp + d_rlzd_pl_fut;
        	l_charges_fut = l_charges_fut_temp + l_charges_fut;
        	d_unrlzd_pl_fut = d_unrlzd_pl_fut_temp + d_unrlzd_pl_fut;
					if( DEBUG_MSG_LVL_3)
           {
            fn_userlog(c_ServiceName,"FUT NET RLZD=:%lf: UNRLZD=:%lf: CHARGES=:%ld:", d_rlzd_pl_fut,d_unrlzd_pl_fut,l_charges_fut);
           }
       	}   /*** For loop used for summing values returned by sfo_fut_prtfl ends here ***/
       /*** Calculations for Futures ends here ***/

       /*** Total PL and Charges calculation ***/
       d_prtfl_tot_pl = (d_rlzd_pl_fut + d_rlzd_pl_opt) + (d_unrlzd_pl_fut + d_unrlzd_pl_opt) - (l_charges_fut + l_charges_opt);
       d_prtfl_tot_charges = l_charges_fut + l_charges_opt;
			if( DEBUG_MSG_LVL_3)
      {
       fn_userlog(c_ServiceName,"TOTAL PNL:%lf: CHARGES:%lf:", d_prtfl_tot_pl,d_prtfl_tot_charges);
      }
       /*** Total PL and Charges calculation Ends ***/
 
     

/* 
  if( c_rqst_type == 'V' )  ** rqst_type = 'V', to fetch Super Investor table starts here **
  {
*/
    if( DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName, "Performing Operation on Super Invester Table for request type V");
    }

    EXEC SQL
    DECLARE view_data CURSOR FOR
    Select FSI_REG_DT,
           to_char(to_date(FSI_STRT_DT,'dd-mon-yyyy'),'mon-yyyy'),
           FSI_END_DT,
           FSI_CHALLENGE,
           FSI_STATUS,
           NVL(FSI_TOT_CHARGES,0),
           NVL(FSI_PNL,0)
    FROM FSI_FO_SUPER_INVESTER
    WHERE FSI_CLM_MTCH_ACCNT =:c_match_accnt
    AND   FSI_CHALLENGE = 'FO'
    ORDER BY FSI_STATUS DESC,FSI_STRT_DT DESC ;
   
  EXEC SQL
  OPEN view_data;    /** Opening view_data cursor **/
  if( SQLCODE != 0 )
  {
     fn_errlog(c_ServiceName, "S31100", SQLMSG, c_err_msg);
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     tpfree( ( char * )ptr_fml_Obuf);
     tpfree( ( char * )ptr_fml_IFbuf);
     tpfree( ( char * )ptr_fml_SFbuf);
     tpfree( ( char * )ptr_fml_IObuf);
     tpfree( ( char * )ptr_fml_SObuf);
		 EXEC SQL CLOSE view_data;
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

   
  for( ; ; )
  {
     EXEC SQL
     FETCH view_data
     INTO  :c_reg_dt,
           :c_strt_dt,
           :c_end_dt,
           :c_challenge,
           :c_status,
           :d_tot_charges,
           :d_pnl;
     if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          fn_userlog(c_ServiceName,"NO DATA FOUND IN VIEW_DATA CURSOR. ");
          break;
        }
        else
        {
           fn_errlog(c_ServiceName, "S31105", SQLMSG, c_err_msg);
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           tpfree( ( char * )ptr_fml_Obuf);
           tpfree( ( char * )ptr_fml_IFbuf);
           tpfree( ( char * )ptr_fml_SFbuf);
           tpfree( ( char * )ptr_fml_IObuf);
           tpfree( ( char * )ptr_fml_SObuf);
           EXEC SQL CLOSE view_data;
					 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }

      if (c_status == 'O')
      {
        strcpy(c_reg_dt,c_ongreg_dt);
        strcpy(c_end_dt,c_chlng_enddt);
        rtrim(c_reg_dt);
        rtrim(c_end_dt);
        d_tot_charges = d_prtfl_tot_charges; 
        d_pnl         = d_prtfl_tot_pl;

      }
     
      if( DEBUG_MSG_LVL_3)
   { 
      fn_userlog(c_ServiceName,"----------------------------------------------");
      fn_userlog(c_ServiceName,"Match account :%s:",c_match_accnt);
      fn_userlog(c_ServiceName,"Registration Date  is :%s",c_reg_dt);
      fn_userlog(c_ServiceName,"Start Date  is :%s:",c_strt_dt);
      fn_userlog(c_ServiceName,"End date is :%s:",c_end_dt);
      fn_userlog(c_ServiceName,"Total Charges is :%lf:",d_tot_charges);
      fn_userlog(c_ServiceName,"PNL is :%lf:",d_pnl);
      fn_userlog(c_ServiceName,"----------------------------------------------");
   } 

			i_err[0] = Fadd32(ptr_fml_Obuf, FFO_EBA_MTCH_ACT_NO, (char *)c_match_accnt, 0);
   		i_err[1] = Fadd32(ptr_fml_Obuf, FFO_RCRD_DT, (char *)c_reg_dt, 0);
   		i_err[2] = Fadd32(ptr_fml_Obuf, FFO_FROM_DT, (char *)c_strt_dt, 0);
   		i_err[3] = Fadd32(ptr_fml_Obuf, FFO_TO_DT, (char *)c_end_dt, 0);
   		i_err[4] = Fadd32(ptr_fml_Obuf, FFO_XCHNG_CD, (char *)c_challenge, 0);
   		i_err[5] = Fadd32(ptr_fml_Obuf, FFO_PLCD_STTS , (char *)&c_status, 0);
   		i_err[6] = Fadd32(ptr_fml_Obuf, FFO_AMOUNT, (char *)&d_tot_charges, 0);
   		i_err[7] = Fadd32(ptr_fml_Obuf, FFO_OPNPSTN_VAL, (char *)&d_pnl, 0);

			for(i_cnt=0;i_cnt<=7;i_cnt++)
      {
        if(i_err[i_cnt] == -1)
        {
          fn_userlog(c_ServiceName,"Error in Fadd for i [%d]",i_cnt);
          fn_errlog( c_ServiceName, "S31110", FMLMSG, c_err_msg  );
          tpfree ( ( char * ) ptr_fml_Obuf );
          tpfree( ( char * )ptr_fml_IFbuf);
          tpfree( ( char * )ptr_fml_SFbuf);
          tpfree( ( char * )ptr_fml_IObuf);
          tpfree( ( char * )ptr_fml_SObuf);
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          EXEC SQL CLOSE view_data;
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
        }
      }

      if(Fneeded32(1,MIN_FML_BUF_LEN) > Funused32(ptr_fml_Obuf))
      {
        counter ++;
        ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf, Fsizeof32(ptr_fml_Obuf) + counter * MIN_FML_BUF_LEN * 2);
        if ( ptr_fml_Obuf == NULL )
        {
          fn_errlog( c_ServiceName, "S31115", TPMSG, c_err_msg  );
          tpfree ( ( char * ) ptr_fml_Obuf );
          tpfree( ( char * )ptr_fml_IFbuf);
          tpfree( ( char * )ptr_fml_SFbuf);
          tpfree( ( char * )ptr_fml_IObuf);
          tpfree( ( char * )ptr_fml_SObuf);
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          EXEC SQL CLOSE view_data;
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }

	}
  }
    if( c_rqst_type == 'C' )  /** rqst_type = 'C', to display Customer Details **/
  {
    if( DEBUG_MSG_LVL_3)
   {
      fn_userlog(c_ServiceName, "Performing Operation on Super Invester Table for request type C");
   }
        strcpy(c_reg_dt,c_ongreg_dt);
        strcpy(c_end_dt,c_ongreg_dt);
        rtrim(c_reg_dt);
        rtrim(c_end_dt);

    EXEC SQL
    Select NVL(IPD_FIRST_NAME,' '),
           NVL(IPD_MIDDLE_NAME,' '),
           NVL(IPD_LAST_NAME,' '), 
           NVL(ICD_PAN_NO,' ') 
    INTO   :c_first_name,
           :c_middle_name,
           : c_last_name,
           :c_pan_no
    FROM  IPD_INFO_PERSONAL_DTLS,ICD_INFO_CLIENT_DTLS,uac_usr_accnts
    where uac_clm_mtch_accnt = :c_match_accnt
    AND   ICD_USER_ID = uac_usr_id  
    AND   ipd_type = 'APPLICANT' 
    AND   ICD_SERIAL_NO = IPD_SERIAL_NO;
    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31120", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char*)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    
    i_err[0] = Fadd32(ptr_fml_Obuf, FFO_EBA_MTCH_ACT_NO, (char *)c_match_accnt, 0);
      i_err[1] = Fadd32(ptr_fml_Obuf, FFO_RCRD_DT, (char *)c_reg_dt, 0);
      i_err[2] = Fadd32(ptr_fml_Obuf, FFO_FROM_DT, (char *)c_ongreg_dt, 0);
      i_err[3] = Fadd32(ptr_fml_Obuf, FFO_TO_DT, (char *)c_chlng_enddt, 0);
      i_err[4] = Fadd32(ptr_fml_Obuf, FFO_BNK_ACT_NO, (char *)c_pan_no, 0);
      i_err[5] = Fadd32(ptr_fml_Obuf, FFO_QUEUE_NAME, (char *)c_first_name, 0);
      i_err[6] = Fadd32(ptr_fml_Obuf, FFO_QSPACE_NAME, (char *)c_middle_name, 0);
      i_err[7] = Fadd32(ptr_fml_Obuf, FFO_MTCH_CNTCT_KEY, (char *)c_last_name, 0);

      for(i_cnt=0;i_cnt<=7;i_cnt++)
      {
        if(i_err[i_cnt] == -1)
        {
          fn_userlog(c_ServiceName,"Error in Fadd for i [%d]",i_cnt);
          fn_errlog( c_ServiceName, "S31125", FMLMSG, c_err_msg  );
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }

      if(Fneeded32(1,MIN_FML_BUF_LEN) > Funused32(ptr_fml_Obuf))
      {
        counter ++;
        ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf, Fsizeof32(ptr_fml_Obuf) + counter * MIN_FML_BUF_LEN * 2);
        if ( ptr_fml_Obuf == NULL )
        {
          fn_errlog( c_ServiceName, "S31130", TPMSG, c_err_msg  );
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }
     } 
  if( c_rqst_type == 'R' )  /** rqst_type = 'R', to insert Customer Details **/
  {
    if( DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName, "Performing Operation on Super Invester Table for request type R");
    }

      /********* Terms & Conditions Acceptance Starts Here ***********/

          MEMSET(c_chlnguser_id);
          strcpy(c_user_id,st_usr_prfl.c_user_id);
          rtrim(c_user_id);
     if( DEBUG_MSG_LVL_3)
   {
			fn_userlog(c_ServiceName,"c_user_id :%s: st_usr_prfl.c_user_id :%s:",c_user_id,st_usr_prfl.c_user_id);
   }
      EXEC SQL
      SELECT NVL(USR_CHLNG_ACCPT_FLG,'N'),
             USR_USR_ID
      INTO   :c_chlng_acc_flg,
             :c_chlnguser_id
      FROM   USR_USER_MASTER
      /* WHERE  UPPER(USR_USR_ID) = UPPER(:c_user_id); */
      WHERE  USR_USR_ID = :c_user_id;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName,"S31135", SQLMSG, c_err_msg);
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
        tpfree((char *)ptr_fml_Obuf);
        tpreturn(TPFAIL, 0, (char *)ptr_fml_Ibuf, 0, 0);
      }

      /* SETLEN(c_chlnguser_id); */

      if ( c_chlng_acc_flg != 'Y' )
      {

        ptr_fml_Sbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
        if (ptr_fml_Sbuffer == NULL)
        {
          fn_errlog(c_ServiceName, "S31140", TPMSG, c_err_msg);
          Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG,  c_err_msg, 0);
          tpfree((char *)ptr_fml_Obuf);
          tpreturn(TPFAIL, 0, (char *)ptr_fml_Ibuf, 0, 0);
        }

        ptr_fml_Rbuffer = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
        if (ptr_fml_Rbuffer == NULL)
        {
          fn_errlog(c_ServiceName, "S31145", TPMSG, c_err_msg);
          Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG,  c_err_msg, 0);
          tpfree((char *)ptr_fml_Obuf);
          tpfree((char *)ptr_fml_Sbuffer);
          tpreturn(TPFAIL, 0, (char *)ptr_fml_Ibuf, 0, 0);
        }

        c_mssg_typ = 'S';
        c_accpt_flg = 'Y';
        strcpy(c_prdct_cd, "CNG");
     
        if( DEBUG_MSG_LVL_3)
       {
        fn_userlog(c_ServiceName, "st_usr_prfl.l_session_id  :%ld",st_usr_prfl.l_session_id);
       }

        i_err[0]=Fadd32(ptr_fml_Sbuffer, FML_USR_ID, (char *)c_chlnguser_id, 0);
        i_err[1]=Fadd32(ptr_fml_Sbuffer, FML_SSSN_ID, (char *)&st_usr_prfl.l_session_id, 0);
        i_err[2]=Fadd32(ptr_fml_Sbuffer, FML_MSG_TYP, (char *)&c_mssg_typ, 0);
        i_err[3]=Fadd32(ptr_fml_Sbuffer, FML_USR_DPRTMNT_ID, (char *)c_prdct_cd, 0);
        i_err[4]=Fadd32(ptr_fml_Sbuffer, FML_TRNSCTN_FLW, (char *)&c_accpt_flg, 0);

        for(i_cnt = 0; i_cnt < 5; i_cnt++)
        {
          if(i_err[i_cnt] == -1)
          {
            fn_errlog(c_ServiceName, "S31150",TPMSG, c_err_msg);
            tpfree((char *)ptr_fml_Obuf);
            tpfree((char *)ptr_fml_Sbuffer);
            tpfree((char *)ptr_fml_Rbuffer);
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, 0, (char *)ptr_fml_Ibuf, 0, 0);
          }
        }

        i_return = tpcall("SVC_ACCEPT",(char *)ptr_fml_Sbuffer,0,(char **)&ptr_fml_Rbuffer,&l_recvbuff,0);

        if(i_return == -1)
        {
          if(TPCODE != TPESVCFAIL)
          {
            fn_errlog(c_ServiceName, "S31155", TPMSG, c_err_msg);
          }
          else
          {
            i_return = Fget32(ptr_fml_Rbuffer, FFO_ERR_MSG, 0, c_err_msg, 0);

            if(i_return == -1)
            {
              fn_errlog(c_ServiceName, "S31160", SQLMSG, c_err_msg);
              Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
              tpfree((char *)ptr_fml_Sbuffer);
              tpfree((char *)ptr_fml_Rbuffer);
              tpfree((char *)ptr_fml_Obuf);
              tpreturn(TPFAIL, 0, (char *)ptr_fml_Ibuf, 0, 0);
            }
          }

          Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
          tpfree((char *)ptr_fml_Sbuffer);
          tpfree((char *)ptr_fml_Rbuffer);
          tpfree((char *)ptr_fml_Obuf);
          tpreturn(TPFAIL, 0, (char *)ptr_fml_Ibuf, 0, 0);
        }

        tpfree((char *)ptr_fml_Sbuffer);
        tpfree((char *)ptr_fml_Rbuffer);
      }



         /********* Terms & Conditions Acceptance Ends  Here ***********/
      
	 i_rec_exists = 0;

   EXEC SQL
      SELECT	count(0) 
      INTO   :i_rec_exists    
      FROM   FSI_FO_SUPER_INVESTER
      WHERE  FSI_CLM_MTCH_ACCNT  = :c_match_accnt
      AND    FSI_CHALLENGE = 'FO' 
      AND    FSI_STATUS ='O';  
     
      if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
    {
      fn_errlog( c_ServiceName, "S31165", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char*)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    
     if (  i_rec_exists != 0)
     {
     fn_userlog(c_ServiceName, "Customer has already registered for new challenge");
		 fn_errlog( c_ServiceName, "S31170", LIBMSG, c_err_msg  );
		 strcpy(c_err_msg,"Client has an active Ongoing challenge");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char*)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

    /*** Initiating transaction ***/
    i_trnsctn = fn_begintran(c_ServiceName, c_err_msg);

    if (i_trnsctn == -1)
    {
      fn_userlog(c_ServiceName, "Failed in initial begin transaction");
      fn_errlog(c_ServiceName, "S31175", TPMSG, c_err_msg);
    }
    /*** Transaction intiation ends here ***/
      

      EXEC SQL
            INSERT INTO FSI_FO_SUPER_INVESTER
           (
           FSI_CLM_MTCH_ACCNT,
           FSI_REG_DT,
           FSI_STRT_DT,
           FSI_END_DT,
           FSI_CHALLENGE,
           FSI_STATUS

           )
           Values
          (
           :c_match_accnt,
           SYSDATE,
           trunc(SYSDATE),
           :c_chlng_enddt,
           'FO',
           'O'
          );
          if (SQLCODE != 0)
            {
                fn_errlog( c_ServiceName, "S31180", SQLMSG, c_err_msg  );
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                tpfree((char*)ptr_fml_Obuf);
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

		/*** Transaction commited ***/
		if (fn_committran(c_ServiceName, i_trnsctn, c_err_msg) == -1)
  	{
     fn_userlog(c_ServiceName, "Failed in committing transaction");
     fn_errlog(c_ServiceName, "S31185", TPMSG, c_err_msg);
  	}

}
   if( DEBUG_MSG_LVL_3)
    {
    fn_userlog(c_ServiceName," ---------- SFO_SUP_INVEST ends -----------");
    }

  tpreturn(TPSUCCESS, 0L, (char *)ptr_fml_Obuf, 0L, 0);
}

