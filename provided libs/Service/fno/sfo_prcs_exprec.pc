/******************************************************************************/
/*	Program	    			:	SFO_PRCS_EXPREC                                       */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                      FFO_ORDR_RFRNC                                        */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_MDFCTN_CNTR                                       */
/*                      FFO_PIPE_ID                                           */
/*											FFO_IPC_KEY																						*/
/*											FFO_EBA_MTCH_ACT_NO																		*/
/*  Output            :                                                       */
/*                                                                            */
/*  Description       :                                                       */
/*                                                                            */
/*  Log               : 1.1	28-Oct-2002		Infotech|Mohit                      */
/*                      1.2 06-Feb-2004		Infotech(SR)                        */		
/*                      1.3 12-Oct-2004   Infotech(Nitin A)                   */
/*                      1.4 02-Feb-2007   Infotech(Vikash)                    */
/*											1.5	20-Dec-2007		Infotech(Sushil)										*/
/*											1.6 12-Nov-2008		Infotech|Sandeep										*/
/*                      1.7 01-Dec-2008   Infotech|Shailesh & Prakash					*/
/*											1.8	26-Jul-2010		Infotech|Sandeep										*/
/*                      1.9 22-Feb-2013   Infotech|Sachin                     */
/*                      2.0 22-May-2013   Infotech|Navina                     */
/*											2.1	20-Sep-2013   Infotech|Shailesh Sabale						*/
/*											2.2	03-Dec-2015   Infotech|Sachin Birje.  						*/
/*                      2.3 09-Oct-2018   Infotech|Anand Dhopte               */
/******************************************************************************/
/*      28-Nov-2001      Ver 1.0        S.Balamurugan       Release 1.0       */
/*      06-Feb-2004      Ver 1.2        Changes for DL Ver 1.1                */
/*      12-Oct-2004			 Ver 1.3				Changes in the reverse messaging      */
/*																			architecture for trade and order      */
/*																			confirmation for direct link          */
/*      02-Feb-2007      Ver 1.4        Changes for DL Revamp                 */
/*                                      Broadcast Message Commented           */
/*			20-Dec-2007			 Ver 1.5				IBM Migration													*/
/*			12-Nov-2008			 Ver 1.6				Future Plus Expiry Handling						*/
/*      01-Dec-2008      Ver 1.7        Modification Counter 99 Handling      */
/*			26-Jul-2010			 Ver 1.8				Time Bound Expiry Changes							*/
/*      22-Feb-2013      Ver 1.9        Game Backoffice Automation            */
/*      22-May-2013      Ver 2.0        SLTP F+ Handling                      */
/*			20-Sep-2013			 Ver 2.1				OptionPlus Handling										*/
/*			03-Dec-2015			 Ver 2.2				tpreturn changed                      */
/*      09-Oct-2018      Ver 2.3        Local Transaction Introduced          */ 
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fml_def.h>
/* COMMENTED IN VER TOL : TUX on LINUX (Ravindra) * #include <fo_view_def.h> */
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <eba_to_ors.h>
#include <fn_tuxlib.h>
#include <fo.h>
#include <fn_ddr.h>
#include <fn_log.h>             /*  Ver 1.5 : Added   */
#include <fn_read_debug_lvl.h>  /*  Ver 1.5 : Added */
/*********Changes for 1.1***********************/
#include <fn_env.h>
#include <fn_shm.h>
/************  Commented in ver 1.4  ***********
#include <eba_tgw.h>
#include <fn_msgq.h>
#define FILE_NAME "TGW.ini"

char c_filter [ 256 ];
char c_filter_dt [ 256 ];
char c_temp[MAXDATA];     ***Added in ver 1.3***
***********  End of comment in ver 1.4  *******/
#include <fn_pos.h>         /*** Ver 1.9 ***/

/***** Commented in ver 1.3 ********
EBAFOBrdcstStruct st_brdpckt;
****** End of comment ver 1.3 *****/
/************  Commented in ver 1.4  ***********
EBAQueStruct    st_quepckt;
***********  End of comment in ver 1.4  *******/

/*********Changes for 1.1 ends******************/


int  fn_rej_ord  ( struct vw_xchngbook	st_xchngbook ,
									 char		c_prdct_typ,
                   char   *c_ServiceName,
                   char   *c_err_msg
                 );

void SFO_PRCS_EXPREC( TPSVCINFO *rqst )
{

	FBFR32 *ptr_fml_Ibuf;
	
	char c_ServiceName [ 33 ];
	char c_err_msg [ 256 ];
	int i_returncode;
	int i_ip_len;
	int i_op_len;						/***  Ver 1.8 ***/
	int i_trnsctn;
	int i_ch_val;						/***	Ver	1.8	***/
	long	l_mdfctn_cntr	;		/***  Ver 1.8 ***/
	char c_prdct_typ;
  char c_tag [ 256 ];
  char c_msg [ 256 ];
	char c_ordr_stts;				/***  Ver 1.8 ***/
	char c_pipe_id[3];			/***  Ver 1.8 ***/
	char c_plcd_stts;				/***  Ver 1.8 ***/
	char c_ordr_rfrnc[19];	/***  Ver 1.8 ***/
	char c_svc_name[18];		/***  Ver 1.8 ***/


/*************** Commented in ver 1.4 *********
*********Changes for 1.1 **********************
  int     ipc_key;            * V1.1 *
  int     i_qid = 0;          * V1.1 *
  char    c_pgm_name[33];     * V1.1 *
  char    c_FileName[256];    * V1.1 *
  char    *ptr;               * V1.1 *
*********Changes for 1.1 ends******************
********** ver 1.4 Comment ends **************/
  /*** Ver 1.9 ****/
  char c_program_nm[33];
  char c_xchng_cd_tmp[4];
  char c_match_id[11];
  char c_error_txt[256];

  MEMSET(c_program_nm);
  MEMSET(c_xchng_cd_tmp);
  MEMSET(c_match_id);
  MEMSET(c_error_txt);
  /*** Ver 1.9 ends ***/

	EXEC SQL INCLUDE "table/fxb_fo_xchng_book.h";			/***  Ver 1.8 ***/
	EXEC SQL INCLUDE "table/fod_fo_ordr_dtls.h";			/***	Ver	1.8	***/

	EXEC SQL BEGIN DECLARE SECTION;
		varchar c_systm[LEN_DATE];
		varchar c_sysdt[LEN_DATE];
    char c_cln_mtch_accnt [ 11 ];
	EXEC SQL END DECLARE SECTION;
	
	struct vw_xchngbook st_xchngbook;

	ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
	strcpy( c_ServiceName, "SFO_PRCS_EXPREC" );
  INITDBGLVL(c_ServiceName);            /*  Ver 1.5 : Added   */

  strcpy(c_program_nm,"bat_fo_exp");  /*** Ver 1.9 ***/

	i_returncode = Fvftos32( ptr_fml_Ibuf,
												 ( char * )&st_xchngbook,
												 "vw_xchngbook" );

	if( i_returncode == -1 )
	{
	  fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.9 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.9 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
	}

  strcpy(c_xchng_cd_tmp, st_xchngbook.c_xchng_cd);  /*** Ver 1.9 ***/

/***********************************************
  fn_init_ddr_val ( st_xchngbook.c_rout_crt );
***********************************************/

 	fn_init_ddr_pop ( st_xchngbook.c_pipe_id, TRADING_SECTION, "NA" );

	i_returncode = Fget32( ptr_fml_Ibuf, FFO_PRDCT_TYP, 0,
                                   (char *)&c_prdct_typ, 0 );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.9 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.9 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	i_returncode = Fget32( ptr_fml_Ibuf, FFO_BAT_TAG, 0,
                                   (char *)c_tag, 0 );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.9 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.9 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


  i_returncode = Fget32( ptr_fml_Ibuf, FFO_EBA_MTCH_ACT_NO, 0,
                                   (char *)c_cln_mtch_accnt, 0 );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.9 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.9 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
   
  strcpy(c_match_id,c_cln_mtch_accnt);  /*** Ver 1.9 ***/

	i_returncode = Fget32( ptr_fml_Ibuf,FFO_MDFCTN_CNTR ,0, (char *)&l_mdfctn_cntr, 0 );			/***	Ver	1.8	***/
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31025", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.9 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.9 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	i_returncode = Fget32( ptr_fml_Ibuf,FFO_ORDR_STTS , 0,(char *)&c_ordr_stts, 0 );						/***  Ver 1.8 ***/
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31030", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.9 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.9 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

/********* Commented in ver 1.4 ***************
*********Changes for 1.1 **********************

  i_returncode = Fget32( ptr_fml_Ibuf, FFO_IPC_KEY, 0,
                                   (char *)&ipc_key, 0 );

	fn_userlog(c_ServiceName,"FFO_IPC_KEY got from bat_fo_exp is :%d:",ipc_key);

  if ( i_returncode == -1 )
  {
		********Commented in Ver 1.2
  	********* Get IPC KEY from ini file V1.1 ************
    strcpy ( c_filter_dt, "FML_EVENT == 'T3'");  * V1.1 *
    sprintf(c_FileName, "%s/%s", getenv("BIN"), FILE_NAME);
    fn_init_prcs_spc ( c_ServiceName,c_FileName,"cln_snd_tgw");
    ptr = (char *)fn_get_prcs_spc(c_ServiceName,"MSSG_QUE");
    ipc_key = atoi(ptr);
    fn_userlog(c_ServiceName,"IPC key got is %d ",ipc_key);
    strcpy(c_pgm_name, "cln_snd_tgw"); ***************

		*Added in Ver 1.2*
		fn_userlog(c_ServiceName, "Failed in Getting Memory Queue Id");
		i_qid = 0;
	  *End of Add in Ver 1.2*
  }


*********Changes for 1.1 ends **********************
**************  ver 1.4 Comment ends ***************/

/*
  sprintf ( c_msg, "Processing Order Reference no %s ", 
																	st_xchngbook.c_ordr_rfrnc );
  fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
*/
	EXEC SQL
    SELECT to_char( sysdate, 'DD-Mon-YYYY hh24:mi:ss' ),
					 to_char( sysdate, 'DD-Mon-YYYY' )
    INTO   :c_systm,
					 :c_sysdt
    FROM   dual;              

	if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31035",SQLMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.9 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.9 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

		/*********	Commented In Ver 1.8
    SELECT MAX( fxb_mdfctn_cntr ) ,
           to_char( sysdate, 'DD-Mon-YYYY hh24:mi:ss' ),
           to_char( sysdate, 'DD-Mon-YYYY' )
    INTO   :st_xchngbook.l_mdfctn_cntr,
           :c_systm,
           :c_sysdt
    FROM   fxb_fo_xchng_book
    WHERE  fxb_ordr_rfrnc = :st_xchngbook.c_ordr_rfrnc;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31040",SQLMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	**************************/


  SETNULL ( c_systm );
  SETNULL ( c_sysdt );

  /*** Ver 2.3 Starts ***/
  
  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog ( c_ServiceName, "S31045", LIBMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy(c_error_txt,"System error. Contact System Support");  
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  } 

  EXEC SQL
		SELECT FOD_ORDR_RFRNC
      INTO :st_xchngbook.c_ordr_rfrnc 
			FROM FOD_FO_ORDR_DTLS
		 WHERE FOD_ORDR_RFRNC = :st_xchngbook.c_ordr_rfrnc	
   FOR UPDATE OF FOD_ORDR_RFRNC;
 
  if (SQLCODE != 0)
  {
   fn_errlog( c_ServiceName, "S31050",SQLMSG,c_err_msg);
   fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   strcpy(c_error_txt,"System error. Contact System Support");  
   fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
  }

  fn_userlog(c_ServiceName,"i_trnsctn 1 :%d:",i_trnsctn);

  /*** Ver 2.3 Ends ***/

	/***	Ver	1.8	Starts	***/

	st_xchngbook.c_oprn_typ = WITH_ORS_MSG_TYP;
	st_xchngbook.l_mdfctn_cntr	=	l_mdfctn_cntr;

	i_ip_len = sizeof ( struct vw_xchngbook );
	i_op_len = sizeof ( struct vw_xchngbook );

	fn_cpy_ddr ( st_xchngbook.c_rout_crt );

	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_xchngbook,
                              &st_xchngbook,
                              "vw_xchngbook",
                              "vw_xchngbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_REF_TO_OMD" );

	if ( i_returncode == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  /*** Ver 2.3 ***/
    fn_errlog( c_ServiceName, "S31055",LIBMSG,c_err_msg);
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.9 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.9 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if ( c_ordr_stts == 'R' && st_xchngbook.c_plcd_stts == 'R' )
	{
		st_xchngbook.c_plcd_stts = ACCEPT;
    st_xchngbook.c_rms_prcsd_flg = NOT_PROCESSED;
    st_xchngbook.l_ors_msg_typ = ORS_NEW_ORD_ACPT ;
    strcpy( st_xchngbook.c_ack_tm, (char *) c_systm.arr);
    strcpy( st_xchngbook.c_entry_dt_tm, (char *) c_systm.arr);
    st_xchngbook.l_dwnld_flg = NOT_DOWNLOAD;
    st_xchngbook.d_jiffy = 0;
    st_xchngbook.l_bit_flg  = 0; 
    st_xchngbook.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;

    i_ip_len = sizeof ( struct vw_xchngbook );
    i_op_len = sizeof ( struct vw_xchngbook );

    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_xchngbook,
                                &st_xchngbook,
                                "vw_xchngbook",
                                "vw_xchngbook",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_UPD_XCHNGBK" );

    if ( i_returncode != SUCC_BFR )
    {
      fn_errlog( c_ServiceName, "S31060",LIBMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.9 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.9 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    fn_cpy_ddr ( st_xchngbook.c_rout_crt );


		/*** if ( c_prdct_typ == 'F' || c_prdct_typ == 'P' )										Commented in ver 2.0 ***/
		if ( c_prdct_typ == 'F' || c_prdct_typ == 'P' || c_prdct_typ == 'U' )					/*** Ver 2.0 ***/
		{
			strcpy(c_svc_name, "SFO_FUT_ACK");
		}
		else if ( c_prdct_typ == 'O' || c_prdct_typ == OPTIONPLUS )/*** Ver 2.1 Condition added for option+ handling ***/
		{
			strcpy(c_svc_name,"SFO_OPT_ACK");
		}

   	i_returncode = fn_call_svc( c_ServiceName,
     	                          c_err_msg,
       	                        &st_xchngbook,
         	                      &st_xchngbook,
           	                    "vw_xchngbook",
             	                  "vw_xchngbook",
               	                i_ip_len,
                 	              i_op_len,
                   	            0,
                     	          c_svc_name);

   	if ( i_returncode != SUCC_BFR )
  	{
     	fn_errlog( c_ServiceName, "S31065",LIBMSG,c_err_msg);
     	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.9 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.9 ***/
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   	}
	}
	else if ( st_xchngbook.c_plcd_stts == 'R' )
	{
		i_ch_val	=	fn_rej_ord  ( st_xchngbook,			
															c_prdct_typ,
    	                  			c_ServiceName,
      	                			c_err_msg
        	         					);
						
		if ( i_ch_val != 0 )
  	{
			fn_userlog(c_ServiceName,"Failed While Rejecting Order. ");
    	strcpy ( c_msg, "System error. Contact system support" );
    	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); /*** Ver 2.3 ***/    
      strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.9 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.9 ***/
      /****tpreturn ( TPFAIL, ERR_BFR, ( char * )c_err_msg, 0, 0 ); **** Ver 2.2 ***/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 ); /*** ver 2.2 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); /*** Ver 2.2 ***/
  	}
		else if ( i_ch_val == 0 )
		{
			EXEC SQL
				SELECT FOD_ORDR_STTS
				INTO	 :c_ordr_stts
				FROM	 FOD_FO_ORDR_DTLS
				WHERE	 FOD_ORDR_RFRNC	=	:st_xchngbook.c_ordr_rfrnc;

			if ( SQLCODE != 0 )
  		{
    		fn_errlog( c_ServiceName, "S31070",SQLMSG,c_err_msg);
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  /*** Ver 2.3 ***/
    		strcpy ( c_msg, "System error. Contact system support" );
    		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
        strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.9 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.9 ***/
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}

			if (	c_ordr_stts	==	'J'	)
			{
				fn_userlog(c_ServiceName,"No Need To Expire Order");
				tpreturn( TPSUCCESS, SUCC_BFR, NULL, 0, 0 );
			}

		}
	}

	st_xchngbook.l_mdfctn_cntr	=	st_xchngbook.l_mdfctn_cntr	+	1	;			/***	Ver	1.8	***/

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    i_trnsctn=1;  /** Ver 2.3 **/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); /*** Ver 2.3 ***/   
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.9 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.9 ***/
    /*** tpreturn ( TPFAIL, ERR_BFR, ( char * )c_err_msg, 0, 0 ); *** ver 2.2 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 ); /*** ver 2.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); /*** Ver 2.2 ***/
  }

  fn_userlog(c_ServiceName," i_trnsctn 2 :%d:",i_trnsctn);

	strcpy(st_xchngbook.c_mod_trd_dt, (char *)c_sysdt.arr );
	st_xchngbook.l_ord_seq = 0;
/**	st_xchngbook.l_mdfctn_cntr = 99;                                   commented in Ver 1.7 **/
	strcpy(st_xchngbook.c_ack_tm, (char *)c_systm.arr );
	st_xchngbook.c_plcd_stts = 'X';
	st_xchngbook.c_rms_prcsd_flg = NOT_PROCESSED;
	st_xchngbook.l_ors_msg_typ = ORS_ORD_EXP;
	strcpy(st_xchngbook.c_xchng_rmrks, "Expiry ");
	st_xchngbook.d_jiffy = 0;
	st_xchngbook.l_dwnld_flg = NOT_DOWNLOAD;
	fn_cpy_ddr(st_xchngbook.c_rout_crt);
  st_xchngbook.c_oprn_typ = INSERTION_ON_ORDER_FTE;

	i_returncode = fn_call_svc ( c_ServiceName,
                          		 c_err_msg,
                           	   &st_xchngbook,
                           		 &st_xchngbook,
                           		 "vw_xchngbook",
                               "vw_xchngbook",
                               sizeof ( st_xchngbook ),
                               sizeof ( st_xchngbook ),
                               0,
                               "SFO_UPD_XCHNGBK" );
	
	if ( i_returncode != SUCC_BFR )
  {
    i_trnsctn=1;  /** Ver 2.3 **/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.9 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.9 ***/
    /*** tpreturn(TPFAIL, ERR_BFR, (char *)c_err_msg, 0, 0 ); *** Ver 2.2 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 ); /*** ver 2.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); /*** Ver 2.2 ***/ 
  }

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog ( c_ServiceName, "S31075", TPMSG, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    i_trnsctn=1;  /** Ver 2.3 **/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.9 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.9 ***/
    /*** tpreturn ( TPFAIL, ERR_BFR, ( char * )c_err_msg, 0, 0 ); *** ver 2.2 **/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 ); /*** ver 2.2 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); /*** Ver 2.2 ***/
  }                                                                 

  fn_userlog(c_ServiceName," i_trnsctn 3 :%d:",i_trnsctn);

	i_ip_len = sizeof( struct vw_xchngbook );

	/*** if( c_prdct_typ == FUTURES ||  c_prdct_typ == FUTURE_PLUS )  *** Ver 1.6 ***					Commented in ver 2.0 ***/
	if( c_prdct_typ == FUTURES ||  c_prdct_typ == FUTURE_PLUS || c_prdct_typ == SLTP_FUTUREPLUS)			/*** Ver 2.0 ***/
	{
		i_returncode = fn_call_svc( c_ServiceName,
																c_err_msg,
																&st_xchngbook,
																&st_xchngbook,
																"vw_xchngbook",	
																"vw_xchngbook",	
																i_ip_len,
																i_ip_len,
																0,
																"SFO_FUT_ACK" );

		if( i_returncode != SUCC_BFR )
  	{
    	fn_errlog( c_ServiceName, "S31080", LIBMSG, c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      i_trnsctn=1;  /** Ver 2.3 **/
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  /*** Ver 2.3 ***/  
    	strcpy ( c_msg, "System error. Contact system support" );
    	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag ); 
      strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.9 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.9 ***/
    	tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  	}
	}
	else if( c_prdct_typ == OPTIONS || c_prdct_typ == OPTIONPLUS )	/** Ver 2.1 Condition added for option+ handling **/
	{
		i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_xchngbook,
                                &st_xchngbook,
                                "vw_xchngbook",
                                "vw_xchngbook",
                                i_ip_len,
                                i_ip_len,
                                0,
                                "SFO_OPT_ACK" );

    if( i_returncode != SUCC_BFR )
    {
      fn_errlog( c_ServiceName, "S31085", LIBMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 ); 
      i_trnsctn=1;  /** Ver 2.3 **/
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); /*** Ver 2.3 ***/
    	strcpy ( c_msg, "System error. Contact system support" );
    	fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.9 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.9 ***/
      tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
    }
	}
	else
	{
		fn_errlog( c_ServiceName, "S31090", "Invalid Product Type", c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    i_trnsctn=1;  /** Ver 2.3 **/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); /*** Ver 2.3 ***/
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.9 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.9 ***/
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}

  /*** Ver 2.3 Starts ***/

  fn_userlog(c_ServiceName," i_trnsctn 4 :%d:",i_trnsctn);
  i_trnsctn=1;
  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   {
    fn_errlog ( c_ServiceName, "S31095", LIBMSG, c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy(c_error_txt,"System error. Contact System Support");  
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
   }

   fn_userlog(c_ServiceName,"Transaction commited...");
  
  /*** Ver 2.3 Ends ***/
  /*** Commented in ver 1.4 ***	

  *************************************************************************************
  *********************************DT Broadcast Start**********************************
  *************************************************************************************
  **** Get Q ID   ****
  fn_userlog(c_ServiceName,"BEFORE CALLING_FUNC_OF QUEUE");
	if(ipc_key != 0)		*****Added in Ver 1.2*****
	{
  	if(fn_crt_msg_q(&i_qid, ipc_key, CLIENT, c_ServiceName, c_err_msg) == -1)
  	{
			fn_userlog(c_ServiceName,"DT broadcast Failed to creat .");
			******Commented in Ver 1.2
    	errlog(c_ServiceName,"S31100", FMLMSG, DEF_USR, DEF_SSSN, c_err_msg);*****
  	}
  	else
  	{
    	fn_userlog(c_ServiceName,"DT broadcast Message queue ID is %d", i_qid);
  	}
	}

  ********* V1.1 DT Broadcast ********************
 
  **** ver 1.4 Comment ends  ***/

	/**************Commenetd in ver 1.3***********
	memset(&st_brdpckt, 0, sizeof(st_brdpckt));		*Added in Ver 1.2*
  st_brdpckt.MsgCode = FO_ORDER_EXPIRY;
  strcpy(st_brdpckt.MatchAccount,c_cln_mtch_accnt);
  strcpy(st_brdpckt.OrderReference,st_xchngbook.c_ordr_rfrnc);
  st_brdpckt.Price = 0.0;
  st_brdpckt.Quantity = st_xchngbook.l_ord_tot_qty;
  st_brdpckt.BuySellFlag = ' ';
  st_brdpckt.LimitMarketFlag = ' ';
  st_brdpckt.Undrlyng[0] = '\0';
  st_brdpckt.ExchangeCode[0] = '\0';
  strcpy(st_brdpckt.Remarks,"Expiry.");

  memset(&st_quepckt, 0, sizeof(st_brdpckt));	*Changed in Ver 1.2*
  memcpy(st_quepckt.c_message, (char *)&st_brdpckt, sizeof(st_brdpckt));
  st_quepckt.l_msgtyp = NFO_EBA;	
	sprintf(st_quepckt.c_msglen, "%d", sizeof(st_brdpckt)); *Added in Ver 1.2*
	**************End of comments*****************/

  /********  Commented in ver 1.4  **********

	****Added in ver 1.3****
	memset(&st_quepckt, 0, sizeof(st_quepckt));
	memset(c_temp, 0, MAXDATA);

	sprintf(c_temp, "%d,%s,%s,%s", FNO_EBA,
																 FO_ORDER_EXPIRY,
																 st_xchngbook.c_ordr_rfrnc,
																 c_cln_mtch_accnt);

	sprintf(st_quepckt.c_message, "%c%d,%s", 0x19, strlen(c_temp), c_temp);
	st_quepckt.l_msgtyp = NFO_EBA;
	****End of Add in ver 1.3****

  fn_userlog(c_ServiceName,"BEFORE WRITING INTO QUEUE");
  if(fn_write_msg_q(i_qid, (void *)&st_quepckt, sizeof(st_quepckt),
  c_ServiceName, c_err_msg) == -1)
  {
		*******Commented in Ver 1.2
    errlog(c_ServiceName,"S31105", c_err_msg,(char *)DEF_USR, DEF_SSSN, c_err_msg);*****
		fn_userlog(c_ServiceName, "Failed in sending to Memory Queue :%s:", c_err_msg);	***Ver 1.2***
  }
 *************************************************************************************
 *********************************DT Broadcast complete*******************************
 *************************************************************************************
 
 *********  End of Comment in ver 1.4 ********/

  /*sprintf ( c_msg, "Expired Order no.[%s]", st_xchngbook.c_ordr_rfrnc ); 
  fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag ); */
	tpreturn( TPSUCCESS, SUCC_BFR, NULL, 0, 0 );
}

int  fn_rej_ord  ( struct vw_xchngbook st_xchngbook ,			/***  Ver 1.8 ***/
									 char		c_prdct_typ,
                   char   *c_ServiceName,
                   char   *c_err_msg
                 )
{
	char c_rej_flg;
	char c_svc_name[18];
	char c_ordr_rfrnc[19];  

	int	i_trnsctn;
 	int i_ip_len;
  int i_op_len;
	int	i_ch_val;

	long	l_rec_cnt;
	long	l_cnt;

	struct vw_orderbook   st_orderbook;

	if( DEBUG_MSG_LVL_0 )
	{
		fn_userlog(c_ServiceName,"Inside Function fn_rej_ord");
	}

	i_trnsctn= fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    fn_errlog ( c_ServiceName, "S31110", LIBMSG, c_err_msg );
    return -1;
  }

  strcpy(st_xchngbook.c_ack_tm,st_xchngbook.c_rqst_tm);
  strcpy(st_xchngbook.c_entry_dt_tm,st_xchngbook.c_rqst_tm);
  rtrim(st_xchngbook.c_rqst_tm);
  rtrim(st_xchngbook.c_ack_tm);
  rtrim(st_xchngbook.c_entry_dt_tm);
  st_xchngbook.c_rms_prcsd_flg=NOT_PROCESSED;
  st_xchngbook.l_bit_flg  = 99  ;    

	if ( st_xchngbook.c_req_typ ==	'N' )
	{
		st_xchngbook.l_ors_msg_typ	=	5304;
	}
	else if ( st_xchngbook.c_req_typ == 'M' ) 
	{
		st_xchngbook.l_ors_msg_typ	=	5307;
	}
	else if ( st_xchngbook.c_req_typ == 'C')
	{
		st_xchngbook.l_ors_msg_typ	=	5310;
	}

	if( DEBUG_MSG_LVL_0 )
	{
  	fn_userlog(c_ServiceName,"The Modification Counter is :%ld:",st_xchngbook.l_mdfctn_cntr); 
  	fn_userlog(c_ServiceName,"The Request Type is :%c:",st_xchngbook.c_req_typ);
  	fn_userlog(c_ServiceName,"The Product Type is :%c:",c_prdct_typ);
  	fn_userlog(c_ServiceName,"The Request Time is :%s:",st_xchngbook.c_rqst_tm);
  	fn_userlog(c_ServiceName,"The ORS Message Type is :%d:",st_xchngbook.l_ors_msg_typ); 
  	fn_userlog(c_ServiceName,"The Ack Time is :%s:",st_xchngbook.c_ack_tm);
  	fn_userlog(c_ServiceName,"The Stream No. :%ld:",st_xchngbook.l_bit_flg);
	}

  i_ip_len = sizeof ( struct vw_xchngbook);
  i_op_len = sizeof ( struct vw_xchngbook);

  /*** if(c_prdct_typ==FUTURES  || c_prdct_typ==FUTURE_PLUS)			*** Commented in Ver 2.0 ***/
	if(c_prdct_typ==FUTURES  || c_prdct_typ==FUTURE_PLUS || c_prdct_typ==SLTP_FUTUREPLUS )  /*** Ver 2.0 ***/ 
  {
    strcpy(c_svc_name, "SFO_FUT_ACK");
  }
  else if( c_prdct_typ == OPTIONS || c_prdct_typ == OPTIONPLUS ) /** Ver 2.1 Condition added for option+ handling **/ 
  {
    strcpy(c_svc_name,"SFO_OPT_ACK");
  }

  fn_cpy_ddr(st_xchngbook.c_rout_crt);

  i_ch_val=fn_call_svc(c_ServiceName,
                       c_err_msg,
                       &st_xchngbook,
                       &st_xchngbook,
                       "vw_xchngbook",
                       "vw_xchngbook",
                       i_ip_len,
                       i_op_len,
                       0,
                       c_svc_name);


	if ( i_ch_val !=0)
  {
    fn_userlog(c_ServiceName,"The record %ld failed in Fut/Opt ack:%s|%d|%s|%c|%c:",l_cnt,st_xchngbook.c_ordr_rfrnc,st_xchngbook.l_mdfctn_cntr,                                           st_orderbook.c_undrlyng,st_orderbook.c_prd_typ); 
      fn_errlog ( c_ServiceName, "S31115", LIBMSG, c_err_msg );
			return -1;
  }

  st_xchngbook.c_plcd_stts=REJECT;
  st_xchngbook.d_jiffy=0;
  st_xchngbook.l_dwnld_flg=20;
  st_xchngbook.c_oprn_typ=UPDATION_ON_EXCHANGE_RESPONSE;
  strcpy(st_xchngbook.c_xchng_rmrks,"..Reject");
	
	if( DEBUG_MSG_LVL_3 )
	{
  	fn_userlog(c_ServiceName,"The Modification Counter is :%d:",st_xchngbook.l_mdfctn_cntr);
  	fn_userlog(c_ServiceName,"The Request Type is :%c:",st_xchngbook.c_req_typ);
  	fn_userlog(c_ServiceName,"The Order Status is :%c:",st_orderbook.c_ordr_stts);
  	fn_userlog(c_ServiceName,"The Request Time is :%s:",st_xchngbook.c_rqst_tm);
  	fn_userlog(c_ServiceName,"The ORS Message Type is :%d:",st_xchngbook.l_ors_msg_typ);
  	fn_userlog(c_ServiceName,"The Placed Status is  :%c:",st_xchngbook.c_plcd_stts);
  	fn_userlog(c_ServiceName,"The RMS Processed Flag is :%c:",st_xchngbook.c_rms_prcsd_flg);
  	fn_userlog(c_ServiceName,"The Operation Type is :%c:",st_xchngbook.c_oprn_typ);
  	fn_userlog(c_ServiceName,"Jiffy :%lf:",st_xchngbook.d_jiffy);
  	fn_userlog(c_ServiceName,"The Ack Time is :%s:",st_xchngbook.c_ack_tm);
  	fn_userlog(c_ServiceName,"The Download Flag is :%d:",st_xchngbook.l_dwnld_flg); 
	}

  i_ch_val=fn_call_svc(c_ServiceName,
                       c_err_msg,
                       &st_xchngbook,
                       &st_xchngbook,
                       "vw_xchngbook",
                       "vw_xchngbook",
                       i_ip_len,
                       i_op_len,
                       0,
                       "SFO_UPD_XCHNGBK");

  if(i_ch_val!=SUCC_BFR)
  {
   fn_userlog(c_ServiceName,"The record %ld failed in updating xchng book:%s|%d|%s|%c|%c:",l_cnt,
  st_xchngbook.c_ordr_rfrnc,st_xchngbook.l_mdfctn_cntr,st_orderbook.c_undrlyng,st_orderbook.c_prd_typ); 
    fn_errlog(c_ServiceName,"S31120",LIBMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
  }

  if ( fn_committran( c_ServiceName, i_trnsctn,c_err_msg ) == -1 )
  {
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
    fn_errlog ( c_ServiceName, "S31125", LIBMSG, c_err_msg );
    return -1;
  }

	return 0;

}
