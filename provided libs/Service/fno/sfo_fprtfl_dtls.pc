/******************************************************************************/
/*  Program           : SFO_FPRTFL_DTLS                                       */
/*                                                                            */
/*  Input             : FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_ROUT_CRT                                          */
/*                                                                            */
/*  Output            : vw_tradebook                                          */
/*                                                                            */
/*  Description       : This service displays the portfolio details for       */
/*                      each contract position                                */
/*                                                                            */
/*                                                                            */
/*  Log               :                                                       */
/*                                                                            */
/******************************************************************************/
/* 09-Feb-2002     	Ver 1.0        S.Balamurugan     Release 1.0              */
/* 28-Dec-2006     	Ver 1.1        Abhishek		      Release 1.1               */
/* 02-Mar-2007			Ver 1.2				 Vikash Kumar | Ranjit		                  */ 
/* 20-Dec-2007      Ver 1.3        Sushil                                     */
/* 17-Mar-2009			Ver 1.4				 Sandeep																		*/
/* 10-Oct-2012			Ver 1.5				 Mahesh Shinde															*/
/* 27-Dec-2012		  Ver 1.6 			 Vishnu Nair																*/
/* 30-Oct-2015			Ver 1.8        Tanmay Warkhade														*/
/* 18-Nov-2015			Ver 1.9        Navina D.      														*/
/* 22-Jun-2017 	  	Ver 2.0        Sandip Tambe   														*/
/* 22-Sep-2017      Ver 2.1        Anand Dhopte                               */
/* 22-Apr-2019			Ver 2.2				 Bhushan Harekar														*/
/******************************************************************************/
/* 	Version 	1.1		:	DL Optimization Change 																	*/
/*	Version 	1.2		:	Calculation of total value,	by Ranjit						  			*/
/*                  : DLrevamp Addition of Option Type as '*'                 */
/*                    and Strike Price as 0 for Future trades, by Vikash      */
/*  Version   1.3   : IBM Migration                                           */
/*	Version		1.4		: Portfolio Merger																				*/
/*	Version		1.5		: Remarks for converted future plus position in portfolio	*/
/*									  (CR-ISEC14-32327)																				*/
/*	Version   1.6		:	Changes For SLTP FUTUREPLUS															*/
/*	Version   1.8   : Changes For SLTP FUTUREPLUS_2														*/
/*	Version   1.9   : FPSLTP to Futures Conversion														*/
/*	Version   2.0   : GST Changes                 														*/
/*  Version   2.1   : Logs introduced to debug spike in service response time */ 
/*	Version 	2.2		: Optimization 																						*/
/*	Version 	2.3	: physical settlement																				*/
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fml_def.h>
#include <fo_view_def.h>
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fo.h>
#include <fn_ddr.h>
#include <fn_log.h>             /*  Ver 1.3 : Added   */
#include <fn_session.h>         /*  Ver 1.3 : Added   */
#include <fn_read_debug_lvl.h>  /*  Ver 1.3 : Added   */

void SFO_FPRTFL_DTLS( TPSVCINFO *rqst )
{
  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;
	FBFR32 *ptr_fml_Tempbuf;	/*	Ver 1.2 : Added	*/

  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
  int i_returncode;
  int i_ip_len;
  int i_op_len;
  int i_trnsctn;
	int rec_cnt =0;		/**** V 1.1 *******/
	long	l_buff_len;			/*	Ver 1.2 : Added	*/
	long  l_stt;          /* Ver 1.4 */
  long  l_src_tx;       /* Ver 1.4 */
  long  l_src_tx_igst;       /* Ver 2.0 */
  long  l_src_tx_cgst;       /* Ver 2.0 */
  long  l_src_tx_sgst;       /* Ver 2.0 */
  long  l_src_tx_ugst;       /* Ver 2.0 */
  long  l_sebi_tt;      /* Ver 1.4 */
  long  l_tran_chrg;    /* Ver 1.4 */
  long  l_stmp_duty;    /* Ver 1.4 */
  long  l_brkg;         /* Ver 1.4 */
  int   i;              /* Ver 1.4 */
  int   i_err[7];       /* Ver 1.4 */ 

/***	int ret_val =0;		***Ver 1.1 ***  commented in ver 1.2 ***/

/**	FLDID32 fieldid1[16];   Commented in Ver 1.4  ******Ver 1.1 ***********/

	FLDID32 fieldid1[23]; /* Ver 1.4 */

	int i_counter;
  char c_tag [ 256 ];
  char c_msg [ 256 ];
	double d_value	= 0.0;	/******Ver 1.2 ***********/

  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_usr_prfl st_usr_prfl;
		struct vw_contract st_contract;
		struct vw_tradebook st_tradebook;
		char c_cln_mtch_accnt [ 11 ];
		varchar c_rmrks[257];			/* Ver 1.4 */
  EXEC SQL END DECLARE SECTION;

	struct vw_err_msg st_err_msg;

	st_tradebook.C_c_dp_id = 0;
	st_tradebook.C_c_bnk_accnt_nmbr = 0;

  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.3 : Added   */

  if(DEBUG_MSG_LVL_2)   
  {
   fn_userlog(c_ServiceName," ISEC Before Service SFO_FPRTFL_DTLS  STARTS"); /*** Added in Ver 2.1 ***/ 
  }

	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *)&st_usr_prfl,
                           "vw_usr_prfl" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *)&st_contract,
                           "vw_contract" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

	i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl,
                                             &st_err_msg ) ;

  if ( i_returncode == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.3 : Debug level Change  */
  fn_userlog ( c_ServiceName, "c_cln_mtch_accnt:%s:", 
																				st_usr_prfl.c_cln_mtch_accnt );
  fn_userlog ( c_ServiceName, "c_xchng_cd**:%s:", st_contract.c_xchng_cd );
  fn_userlog ( c_ServiceName, "c_prd_typ   :%c:", st_contract.c_prd_typ );
  fn_userlog ( c_ServiceName, "c_undrlyng  :%s:", st_contract.c_undrlyng );
  fn_userlog ( c_ServiceName, "c_expiry_dt :%s:", st_contract.c_expry_dt );
  fn_userlog ( c_ServiceName, "c_exrc_typ  :%c:", st_contract.c_exrc_typ );
}

  if(DEBUG_MSG_LVL_2)
  {
   fn_userlog(c_ServiceName,"c_cln_mtch_accnt :%s: c_xchng_cd :%s: c_prd_typ :%c: c_undrlyng :%s: c_expiry_dt :%s: c_exrc_typ :%c:",st_usr_prfl.c_cln_mtch_accnt,st_contract.c_xchng_cd,st_contract.c_prd_typ,st_contract.c_undrlyng,st_contract.c_expry_dt,st_contract.c_exrc_typ);     /*** Added in ver 2.1 ***/ 
  }

	EXEC SQL
		DECLARE cur_fprtfl CURSOR FOR	
		SELECT	ftd_xchng_cd,
						ftd_prdct_typ,
						ftd_indstk,
						ftd_undrlyng,
						ftd_expry_dt,
						ftd_exer_typ,
            '*',            /*** ver 1.2 Added for Option Type  Vikash ***/
            0,              /*** ver 1.2 Added for Strike Price Vikash ***/ 
						ftd_trd_dt,
						ftd_trd_flw,
            ftd_eba_trd_ref,
						ftd_exctd_qty,
						ftd_exctd_rt,
						NVL ((ftd_frs_brkg + ftd_cvr_brkg), 0),
						nvl(ftd_brkg,0),          /* Ver 1.4 */
            ftd_stt,          /* Ver 1.4 */
            NVL(ftd_src_tx,0) +nvl(FTD_BRKRG_IGST,0)+nvl(FTD_BRKRG_CGST,0)+nvl(FTD_BRKRG_SGST,0)+nvl(FTD_BRKRG_UGST,0),       /* Ver 1.4 */ /** Ver 2.0 GST columns included **/
            ftd_sebi_tt,      /* Ver 1.4 */
            ftd_tran_chrg,    /* Ver 1.4 */
            ftd_stamp_duty,   /* Ver 1.4 */
			/****			DECODE(ftd_prdct_typ||ftd_fut_conv_flg,'FY','Converted Future','PY','Converted To Future','PN','Future plus','Future')		Commented in ver 1.5  Ver 1.4 */
			/*** 			DECODE(ftd_prdct_typ||ftd_fut_conv_flg,'FY','Converted Future','PY','Converted To Future','PX','Converted Future Plus','FX','Converted to Future Plus','PN','Future plus','Future')			*** Added in ver 1.5 ***   Commented in Ver 1.6 ***/
						DECODE(ftd_prdct_typ||ftd_fut_conv_flg,'FY','Converted Future','PY','Converted To Future','PX','Converted Future Plus','FX','Converted to Future Plus','PN','Future plus','UN','FuturePLUS Stop Loss','UM','Converted to Future','FM','Converted Future','Future')		/*** Ver 1.6 *** 1.8 Ver SLTP Added **/			/*** Ver 1.9 ***/
		FROM		ftd_fo_trd_dtls
		WHERE		ftd_clm_mtch_accnt	= :st_usr_prfl.c_cln_mtch_accnt
		AND			ftd_xchng_cd		= :st_contract.c_xchng_cd
/*	AND			ftd_prdct_typ		in ('P','F')	* Ver 1.4 *  Commented in Ver 1.6 */
		AND			ftd_prdct_typ		in ('P','F','U')	/* Added SLTP in Ver 1.6 */
		AND			ftd_undrlyng		= :st_contract.c_undrlyng
		AND			ftd_expry_dt		= :st_contract.c_expry_dt
		AND			ftd_exer_typ		= :st_contract.c_exrc_typ
		UNION ALL
		SELECT	ftd_xchng_cd,
            ftd_prdct_typ,
            ftd_indstk,
            ftd_undrlyng,
            ftd_expry_dt,
            ftd_exer_typ,
            '*',            /*** ver 1.2 Added for Option Type  Vikash ***/
            0,              /*** ver 1.2 Added for Strike Price Vikash ***/   
            ftd_trd_dt,
            ftd_trd_flw,
						ftd_eba_trd_ref,
            ftd_exctd_qty,
            ftd_exctd_rt,
            NVL ((ftd_frs_brkg + ftd_cvr_brkg), 0),
						nvl(ftd_brkg,0),         /* Ver 1.4 */
            nvl(ftd_stt,0),          /* Ver 1.4 */
            nvl(ftd_src_tx,0)+nvl(FTD_BRKRG_IGST,0)+nvl(FTD_BRKRG_CGST,0)+nvl(FTD_BRKRG_SGST,0)+nvl(FTD_BRKRG_UGST,0),       /* Ver 1.4 */ /** Ver 2.0 GST columns included **/
            nvl(ftd_sebi_tt,0),      /* Ver 1.4 */
            nvl(ftd_tran_chrg,0),    /* Ver 1.4 */
            nvl(ftd_stamp_duty,0),   /* Ver 1.4 */
				/***		DECODE(ftd_prdct_typ||ftd_fut_conv_flg,'FY','Converted Future','PY','Converted To Future','PN','Future plus','Future') Commented in ver 1.5 * Ver 1.4 */
				/*** 		DECODE(ftd_prdct_typ||ftd_fut_conv_flg,'FY','Converted Future','PY','Converted To Future','PX','Converted Future Plus','FX','Converted to Future Plus','PN','Future plus','Future')		*** Added in ver 1.5 ***    *** Commented in Ver 1.6 ***/
						DECODE(ftd_prdct_typ||ftd_fut_conv_flg,'FY','Converted Future','PY','Converted To Future','PX','Converted Future Plus','FX','Converted to Future Plus','PN','Future plus','UN','FuturePLUS Stop Loss','UM','Converted to Future','FM','Converted Future','Future')		/*** Ver 1.6 *** 1.8 Ver SLTP Added **/ 	/*** Ver 1.9 ***/
		FROM		ftd_fo_trd_dtls_hstry
    WHERE		ftd_clm_mtch_accnt	= :st_usr_prfl.c_cln_mtch_accnt
    AND			ftd_xchng_cd		= :st_contract.c_xchng_cd
  /*AND			ftd_prdct_typ		in ('P','F') * Ver 1.4 * Commented in Ver 1.6 */
    AND			ftd_prdct_typ		in ('P','F','U') /* Added SLTP in Ver 1.4 */  
    AND			ftd_undrlyng		= :st_contract.c_undrlyng
    AND			ftd_expry_dt		= :st_contract.c_expry_dt
    AND			ftd_exer_typ		= :st_contract.c_exrc_typ
    UNION ALL
		SELECT	fco_xchng_cd,
            fco_prdct_typ,
            fco_indstk,
            fco_undrlyng,
            fco_expry_dt,
            fco_exer_typ,
            '*',            /*** ver 1.2 Added for Option Type Vikash  ***/
            0,              /*** ver 1.2 Added for Strike Price Vikash ***/  
            fco_cls_tm,
            DECODE (fco_ordr_flw,'B','T','S','G'),
						'Close Out',
            fco_cls_qty,
            fco_cls_rt,
            0.0,
						nvl(fco_brkg,0),      /* Ver 1.4 */
            nvl(fco_stt,0),       /* Ver 1.4 */
            nvl(fco_src_tx,0),    /* Ver 1.4 */
            nvl(fco_sebi_tt,0),   /* Ver 1.4 */
            nvl(fco_tran_chrg,0),        /* Ver 1.4 */
            nvl(fco_stamp_duty,0),       /* Ver 1.4 */
					  DECODE(fco_dlvry_mode_flg,'Y','Delivry Stock Settled Future','N','Future Cash Settled','Close Out') 					/* Ver 1.4 */
		FROM		fco_fo_fclsout
		WHERE		fco_clm_mtch_accnt	= :st_usr_prfl.c_cln_mtch_accnt
		AND			fco_xchng_cd		= :st_contract.c_xchng_cd

		AND			fco_prdct_typ		= 'F'	
		AND			fco_undrlyng		= :st_contract.c_undrlyng
		AND			fco_expry_dt		= :st_contract.c_expry_dt
		AND			fco_exer_typ		= :st_contract.c_exrc_typ
		UNION ALL
		SELECT	fco_xchng_cd,
            fco_prdct_typ,
            fco_indstk,
            fco_undrlyng,
            fco_expry_dt,
            fco_exer_typ,
            '*',            /*** ver 1.2 Added for Option Type Vikash  ***/
            0,              /*** ver 1.2 Added for Strike Price Vikash ***/
            fco_cls_tm,
            DECODE (fco_ordr_flw,'B','T','S','G'),
						'Close Out',
            fco_cls_qty,
            fco_cls_rt,
            0.0,
						nvl(fco_brkg,0),      /* Ver 1.4 */
            nvl(fco_stt,0),      /* Ver 1.4 */
            nvl(fco_src_tx,0),  /* Ver 1.4 */
            nvl(fco_sebi_tt,0), /* Ver 1.4 */
            nvl(fco_tran_chrg,0),      /* Ver 1.4 */
            nvl(fco_stamp_duty,0),     /* Ver 1.4 */
						DECODE(fco_dlvry_mode_flg,'Y','Delivry Stock Settled Future','N','Future Cash Settled','Close Out') 				/* Ver 1.4 */
		FROM		fco_fo_fclsout_hstry
		WHERE		fco_clm_mtch_accnt	= :st_usr_prfl.c_cln_mtch_accnt
		AND			fco_xchng_cd		= :st_contract.c_xchng_cd

		AND			fco_prdct_typ 	=	'F'
		AND			fco_undrlyng		= :st_contract.c_undrlyng
		AND			fco_expry_dt		= :st_contract.c_expry_dt
		AND			fco_exer_typ		= :st_contract.c_exrc_typ
		ORDER BY 9;   /** ver 1.2 Earlier it was order by 7, Vikash **/

  if(DEBUG_MSG_LVL_2)
  {
   fn_userlog(c_ServiceName," ISEC After Select Query"); /*** Added in Ver 2.1 ***/
  }

	EXEC SQL
		OPEN cur_fprtfl;
	if( SQLCODE != 0 )
	{	
		fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}

	/*** Ver 2.2 Starts ***/

  l_buff_len  =   sizeof( struct vw_tradebook )    
                + sizeof( d_value )
                + 300;

	/*** Ver 2.2 Ends ***/

	/*** ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN ); ** Commented in Ver 2.2 ***/

	ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, l_buff_len * 5 ); /*** Ver 2.2 ***/

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31020", TPMSG, c_err_msg  );
		EXEC SQL
    	CLOSE cur_fprtfl;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	i_counter = 1;

	/***
	l_buff_len 	=		sizeof( struct vw_tradebook ) 		 *	Ver 1.2 : Added to calculate l_buff_len	* 
								+	sizeof( d_value )
								+ 300;
	*** Commented in Ver 2.2 ***/

  if(DEBUG_MSG_LVL_2)
  {
   fn_userlog(c_ServiceName," ISEC Before Fetch Loop STARTS"); /*** Added in Ver 2.1 ***/
  }

	while (1)
  {

		MEMSET (c_rmrks);
		l_src_tx=0;
		EXEC SQL
			FETCH cur_fprtfl
			INTO	:st_tradebook.c_xchng_cd,
						:st_tradebook.c_prd_typ,
						:st_tradebook.c_ctgry_indstk,
						:st_tradebook.c_undrlyng,
						:st_tradebook.c_expry_dt,
						:st_tradebook.c_exrc_typ,
            :st_tradebook.c_opt_typ,         /*** ver 1.2 Added for Option Type Vikash ***/
            :st_tradebook.l_strike_prc,      /*** ver 1.2 Added for Strike Price Vikash ***/
						:st_tradebook.c_trd_dt,
						:st_tradebook.c_trd_flw,
						:st_tradebook.c_trd_rfrnc,
						:st_tradebook.l_exctd_qty,
						:st_tradebook.l_exctd_rt,
						:st_tradebook.l_frs_brkg_val,
					  :l_brkg,      /* Ver 1.4 */
						:l_stt,       /* Ver 1.4 */
						:l_src_tx,    /* Ver 1.4 */
						:l_sebi_tt,   /* Ver 1.4 */
						:l_tran_chrg, /* Ver 1.4 */
						:l_stmp_duty, /* Ver 1.4 */
						:c_rmrks;			/* Ver 1.4 */

		if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  	{
    	fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	EXEC SQL
      	CLOSE cur_fprtfl;
    	tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  	}

		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName,"Product Type Is :%c:",st_tradebook.c_prd_typ);
			fn_userlog(c_ServiceName,"Brokerage Is :%ld:",l_brkg);              /* Ver 1.4 */
			fn_userlog(c_ServiceName,"STT Is :%ld:",l_stt);                     /* Ver 1.4 */
			fn_userlog(c_ServiceName,"Service Tax Is :%ld:",l_src_tx);          /* Ver 1.4 */
			fn_userlog(c_ServiceName,"GST on Brk Is :%ld:",l_src_tx);     			/* Ver 2.0 */
			fn_userlog(c_ServiceName,"SEBI TT Is :%ld:",l_sebi_tt);             /* Ver 1.4 */
			fn_userlog(c_ServiceName,"Transaction Charges :%ld:",l_tran_chrg);  /* Ver 1.4 */
			fn_userlog(c_ServiceName,"Stamp Duty Is :%ld:",l_stmp_duty);        /* Ver 1.4 */
			fn_userlog(c_ServiceName,"Remarks Is :%s:",c_rmrks.arr);
		}


		if( SQLCODE == NO_DATA_FOUND )
		{
			break;
		}
		rec_cnt++;

		/*	Ver 1.2 : Addition Begins	*/
    /*  REALLOCATE MEMORY FOR OUTPUT BUFFER */
		if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.3 : Debug level Change  */
        fn_userlog( c_ServiceName," SPACE NEEDED :%ld: & UNUSED SPACE :%ld:", Fneeded32( 1, l_buff_len ), Funused32( ptr_fml_Obuf ) );
		}
    if ( Fneeded32( 1, l_buff_len ) > Funused32( ptr_fml_Obuf ) )
    {
      i_counter++;
       /*** ptr_fml_Tempbuf = (FBFR32 *)tprealloc((char *)ptr_fml_Obuf, i_counter * l_buff_len );  ** Commented in Ver 2.2 ***/

  		 ptr_fml_Tempbuf = (FBFR32 *)tprealloc((char *)ptr_fml_Obuf, Fsizeof32(ptr_fml_Obuf) + i_counter * l_buff_len * 5); /*** Ver 2.2  ***/

      if( ptr_fml_Tempbuf == NULL )
      {
        EXEC SQL CLOSE cur_fprtfl;
        fn_errlog ( c_ServiceName, "S31030", TPMSG, c_err_msg );
        tpfree((char *)ptr_fml_Obuf);
        Fadd32(ptr_fml_Ibuf,FFO_ERR_MSG,c_err_msg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      ptr_fml_Obuf = ptr_fml_Tempbuf;
      ptr_fml_Tempbuf = (FBFR32 *)NULL;

      if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.3 : Debug level Change  */
        fn_userlog( c_ServiceName, "COUNT IS :%ld: & BUFFER LENGTH IS :%ld:",
                                    i_counter, i_counter * l_buff_len );
      }
    }
		/*	Ver 1.2 : Addition Ends	*/

		/**** Ver 2.2 Comment Starts ***

		i_returncode = Fvstof32( ptr_fml_Obuf, (char *)&st_tradebook,
                              FCONCAT, "vw_tradebook" );
    if ( i_returncode == -1 )
    {
*      if( Ferror32 == FNOSPACE )
      {
        i_counter++;
        ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
                            i_counter * MIN_FML_BUF_LEN );

        if ( ptr_fml_Obuf == NULL )
        {
          fn_errlog( c_ServiceName, "S31035", TPMSG, c_err_msg  );
					EXEC SQL
          	CLOSE cur_fprtfl;
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        i_returncode = Fvstof32( ptr_fml_Obuf, (char *)&st_tradebook,
                                 FCONCAT, "vw_tradebook" );

        if ( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31040", FMLMSG, c_err_msg  );
					EXEC SQL
          	CLOSE cur_fprtfl;
   				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }
      else
      {				*** Ver 1.2 : Commented *
        fn_errlog( c_ServiceName, "S31045", FMLMSG, c_err_msg  );
				EXEC SQL			
        	CLOSE cur_fprtfl;
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   * }				*** Ver 1.2 : Commented *
    }
		**** Ver 2.2 Comment ends ***/
	
	 	/*********added in ver 1.2  ***********/

		d_value = (double)(st_tradebook.l_exctd_qty * st_tradebook.l_exctd_rt);
		fn_userlog( c_ServiceName,"d_value is :%lf:",d_value );

		/*** Commented in Ver 2.2 ****

 		if ( Fadd32 ( ptr_fml_Obuf,FFO_SOMC_PRCNT , (char *)&d_value, 0 ) == -1 )
 		{
   		fn_errlog( c_ServiceName, "S31050", FMLMSG, c_err_msg  );
   		EXEC SQL
     		CLOSE cur_fprtfl;
   		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 		}

		***  Ver 1.4 Starts  ***

		fn_userlog(c_ServiceName,"Before Adding Into  FML");

		i_err[0] = Fadd32(ptr_fml_Obuf,FFO_OPN_INDX_VAL,(char *)&l_brkg,0) ; 
		i_err[1] = Fadd32(ptr_fml_Obuf,FFO_MULTPLR,(char *)&l_stt,0) ;
		i_err[2] = Fadd32(ptr_fml_Obuf,FFO_LMT_RT,(char *)&l_src_tx,0) ;
		i_err[3] = Fadd32(ptr_fml_Obuf,FFO_STP_LSS_TGR,(char *)&l_sebi_tt,0) ;
		i_err[4] = Fadd32(ptr_fml_Obuf,FFO_LST_TRD_PRC,(char *)&l_tran_chrg,0) ;
		i_err[5] = Fadd32(ptr_fml_Obuf,FFO_LOW_PRC_RNG,(char *)&l_stmp_duty,0) ;
		i_err[6] = Fadd32(ptr_fml_Obuf,FFO_XCHNG_RMRKS,(char *)c_rmrks.arr,0);

		for(i=0;i<=6;i++)	
    {
      if(i_err[i] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd for i [%d]",i);
        fn_errlog( c_ServiceName, "S31055", FMLMSG, c_err_msg  );
        EXEC SQL
          CLOSE cur_fprtfl;
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

		***** Ver 2.2 Comment Ends ***/

		/**** Ver 2.2 Starts ****/
		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Before Adding Into  FML");
		}

		i_returncode = fn_pack_vartofml( c_ServiceName,
																		 c_err_msg,
																		 &ptr_fml_Obuf,
																		 22,
																		 FFO_XCHNG_CD,(char *)st_tradebook.c_xchng_cd,
																		 FFO_PRDCT_TYP,(char *)&st_tradebook.c_prd_typ,
																		 FFO_CTGRY_INDSTK,(char *)&st_tradebook.c_ctgry_indstk,
																		 FFO_UNDRLYNG,(char *)st_tradebook.c_undrlyng,
																		 FFO_EXPRY_DT,(char *)st_tradebook.c_expry_dt,
																		 FFO_EXER_TYP,(char *)&st_tradebook.c_exrc_typ,
																		 FFO_OPT_TYP,(char *)&st_tradebook.c_opt_typ,
																		 FFO_STRK_PRC,(char *)&st_tradebook.l_strike_prc,
																		 FFO_TRD_DT,(char *)st_tradebook.c_trd_dt,
																		 FFO_TRD_FLW,(char *)&st_tradebook.c_trd_flw,
																		 FFO_TRD_RFRNC,(char *)st_tradebook.c_trd_rfrnc,
																		 FFO_EXEC_QTY,(char *)&st_tradebook.l_exctd_qty,
																		 FFO_EXCTD_RT,(char *)&st_tradebook.l_exctd_rt,
																		 FFO_FRS_BRKG,(char *)&st_tradebook.l_frs_brkg_val,
																		 FFO_SOMC_PRCNT , (char *)&d_value,
																		 FFO_OPN_INDX_VAL,(char *)&l_brkg,
																		 FFO_MULTPLR,(char *)&l_stt,
																		 FFO_LMT_RT,(char *)&l_src_tx,
																		 FFO_STP_LSS_TGR,(char *)&l_sebi_tt,
																		 FFO_LST_TRD_PRC,(char *)&l_tran_chrg,
																		 FFO_LOW_PRC_RNG,(char *)&l_stmp_duty,
																		 FFO_XCHNG_RMRKS,(char *)c_rmrks.arr
																	 );

		/**** Ver 2.2 Ends ****/

    fn_userlog(c_ServiceName,"After Adding Into  FML");

    /***  Ver 1.4 Ends  ***/

 		/************ver 1.2 upto here **************************/	
	}

  if(DEBUG_MSG_LVL_2)
  {
   fn_userlog(c_ServiceName," ISEC After Fetch loop Ends "); /*** Added in Ver 2.1 ***/
  }


  fieldid1[0]  = FFO_XCHNG_CD;                       /******* F/O ***********/
  fieldid1[1]  = FFO_PRDCT_TYP;                       /******* F/O ***********/
  fieldid1[2]  = FFO_UNDRLYNG;                          /********** contract *************/
  fieldid1[3]  = FFO_EXPRY_DT;                          /*********** contract *************/
  fieldid1[4]  = FFO_EXER_TYP;
  fieldid1[5]  = FFO_CTGRY_INDSTK;                       /******** contract ****************/
  fieldid1[6]  = FFO_TRD_DT;                    /*if > 0 then display POSITION >> QUANTITY */
  fieldid1[7]  = FFO_TRD_FLW;                   /* BUY-SELL */
  fieldid1[8]  = FFO_EXEC_QTY;                        /* BUY ORDER QUANTITY if > 0 */
  fieldid1[9]  = FFO_EXCTD_RT;                      /* SELL ORDER QUANTITY if != 0 */
  fieldid1[10]  = FFO_STRK_PRC;                          /********* contract ****************/
  fieldid1[11]  = FFO_FRS_BRKG;                         /*********** contract ****************/
  fieldid1[12]  = FFO_OPT_TYP;                         /************* contract ***************/
  fieldid1[13]  = FFO_TRD_RFRNC;                    /* BASE PRICE=(FFO_C_MTM_OPN_VAL/FFO_C_OPNPSTN_QTY)*/
	fieldid1[14]	=	FFO_SOMC_PRCNT;						/*FFO_SOMC_PRCNT  = FFO_EXEC_QTY *FFO_EXCTD_RT **/		/*ver 1.2 */

	/** Ver 1.4 Starts  **/
	fieldid1[15]  = FFO_OPN_INDX_VAL;         /* Brokerage */
	fieldid1[16]  = FFO_MULTPLR;              /* STT */
	fieldid1[17]  = FFO_LMT_RT;               /* Service Tax */
	fieldid1[18]  = FFO_STP_LSS_TGR;          /* SEBI TT */
	fieldid1[19]  = FFO_LST_TRD_PRC;          /* Transaction Charges */
	fieldid1[20]  = FFO_LOW_PRC_RNG;          /* Stamp Duty */
	fieldid1[21]  = FFO_XCHNG_RMRKS;					/* Remark */
	/** Ver 1.4 Ends  **/

  fieldid1[22]  = BADFLDID;
    
	if(Fproj32(ptr_fml_Obuf,fieldid1) <  0)
  {
    fn_errlog( c_ServiceName, "S31060", FMLMSG, c_err_msg );
		EXEC SQL
			CLOSE cur_fprtfl;
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*****  Commented in ver 1.2 Vikash *****
	********Added in V1.1 *******************
	if ( Fadd32 ( ptr_fml_Obuf, FFO_SUB_BUF_CNT, (char *)&rec_cnt, 0 ) == -1 )
	{
		fn_errlog( c_ServiceName, "S31065", FMLMSG, c_err_msg  );
		EXEC SQL
			CLOSE cur_fprtfl;
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	ret_val = 0;  
	if ( Fadd32 ( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&ret_val, 0 ) == -1 )
	{
		fn_errlog( c_ServiceName, "S31070", FMLMSG, c_err_msg  );
		EXEC SQL
			CLOSE cur_fprtfl;
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	********Added in V1.1 *******************
  ******* end of comment ver 1.2 *********/
	EXEC SQL
    CLOSE cur_fprtfl;
  
  if(DEBUG_MSG_LVL_2)
  {
   fn_userlog(c_ServiceName," ISEC Service SFO_FPRTFL_DTLS Ends "); /*** Added in Ver 2.1 ***/
  }

	tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
}

