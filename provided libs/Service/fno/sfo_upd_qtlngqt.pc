/******************************************************************************/
/*  Program           : SFO_UPD_QTLNGQT                                       */
/*                                                                            */
/*  Input             : st_cntrct_lng_qt & st_cntrct_qt                       */
/*                                                                            */
/*  Output            : vw_err_msg(if any error)                              */
/*                      					                                            */
/*                                                                            */
/*  Description       :	Update the quote & Long Quote                         */
/*                                                                            */
/*  Initial Version   : 07-Aug-2013 (Sachin Birje)  			                    */
/*  log  : Ver 1.1    :	24-Feb-2014 Replacing fn_begintran & fn_committran with*/
/*                      new functions fn_nolog_begintran & fn_nolog_committran*/
/*                      (Sachin Birje )                                       */            
/*  log  : Ver 1.2    : 26-Mar-2015  FTQ Token Id Changes ( Sandeep Patil )   */
/******************************************************************************/
#include <stdio.h> 	/* C Header File*/
#include <stdlib.h> /* C Header File*/
#include <string.h>	/* C Header File*/
#include <atmi.h>		/* TUXEDO Header File*/
#include <fml32.h>	/* TUXEDO Header File*/
#include <sqlca.h>	/* Oracle header file*/	
#include <fo.h>										
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h> 
#include <fn_read_debug_lvl.h> 
#include <fo_fml_def.h>   
#include <fn_span_lib.h> 
#include <fml_def.h>   	

void SFO_UPD_QTLNGQT( TPSVCINFO *rqst )
{
  char  c_ServiceName[33];
  char  c_errmsg[256];
  int   i_trnsctn;
  int   i_flg = 0 ;    
  int   i_ret_val = 0 ;
  double  d_pcnt_chg_prev_cls=0;
  char  *ptr_car_sbuf; 
  char  *ptr_car_sbuf2;
	FBFR32 *ptr_fml_ibuf;
	FLDLEN32  ud_len;		
	FLDLEN32  ud_len2;

  EXEC SQL BEGIN DECLARE SECTION;
	
	struct  st_cntrctlong_qt st_cntrct_lng_qt;			
	struct  st_cntrct_qt st_cntrct_qoute;					
 
  varchar c_expiry_dt [ LEN_DATE ];
  varchar c_lst_trd_tm [ LEN_DATE ];

  EXEC SQL END DECLARE SECTION;

  struct vw_err_msg *ptr_st_err_msg;

  strcpy( c_ServiceName, rqst->name );
  INITDBGLVL(c_ServiceName);
	
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Service SFO_UPD_QTLNGQT starts.....");
	} 

  ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
  if ( ptr_st_err_msg ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31005", TPMSG, c_errmsg );
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }

  memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

	MEMSET(st_cntrct_lng_qt);
	MEMSET(st_cntrct_qoute);
	
	ptr_fml_ibuf = (FBFR32 *)rqst->data;

	ptr_car_sbuf =(char *)tpalloc("CARRAY", NULL, MIN_FML_BUF_LEN );

	if (ptr_car_sbuf == NULL)
  {
		fn_errlog ( c_ServiceName, "S31010", TPMSG, c_errmsg );
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
	}
	
	ud_len = (FLDLEN32)sizeof( struct st_cntrctlong_qt );
	
	i_ret_val = Fget32(ptr_fml_ibuf, FFO_CBUF, 0,(char *)ptr_car_sbuf, &ud_len);

  if (i_ret_val == -1)
  {
		fn_errlog ( c_ServiceName, "S31015", FMLMSG, c_errmsg );
		tpfree ( ( char * )ptr_car_sbuf );          
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
	}
	
	memcpy (&st_cntrct_lng_qt,ptr_car_sbuf,sizeof (struct st_cntrctlong_qt));
	
	ptr_car_sbuf2 =(char *)tpalloc("CARRAY", NULL, MIN_FML_BUF_LEN );

  if (ptr_car_sbuf2 == NULL)
  {
    fn_errlog ( c_ServiceName, "S31020", TPMSG, c_errmsg );
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }

  ud_len2 = (FLDLEN32)sizeof( struct st_cntrct_qt );
	
	i_ret_val = Fget32(ptr_fml_ibuf, FML_SBUF, 0,(char *)ptr_car_sbuf2, &ud_len2);

  if (i_ret_val == -1)
  {
    fn_errlog ( c_ServiceName, "S31025", FMLMSG, c_errmsg );
		tpfree ( ( char * )ptr_car_sbuf );         
    tpfree ( ( char * )ptr_car_sbuf2 );       
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }

	memcpy (&st_cntrct_qoute,ptr_car_sbuf2 ,sizeof (struct st_cntrct_qt));
	
	if(DEBUG_MSG_LVL_3)
  {
     fn_userlog ( c_ServiceName, "st_cntrct_qoute.l_close_prc :%ld:",st_cntrct_qoute.l_close_prc);
     fn_userlog ( c_ServiceName, "st_cntrct_qoute.l_open_prc  :%ld:",st_cntrct_qoute.l_open_prc);
     fn_userlog ( c_ServiceName, "st_cntrct_qoute.l_high_prc  :%ld:",st_cntrct_qoute.l_high_prc);
     fn_userlog ( c_ServiceName, "st_cntrct_qoute.l_low_prc   :%ld:",st_cntrct_qoute.l_low_prc); 
     fn_userlog ( c_ServiceName, "c_xchng_cd :%s:", st_cntrct_lng_qt.c_xchng_cd );
     fn_userlog ( c_ServiceName, "c_prd_typ  :%c:", st_cntrct_lng_qt.c_prd_typ );
     fn_userlog ( c_ServiceName, "c_undrlyng :%s:", st_cntrct_lng_qt.c_undrlyng );
     fn_userlog ( c_ServiceName, "c_expiry_dt:%s:", st_cntrct_lng_qt.c_expry_dt );
     fn_userlog ( c_ServiceName, "c_exrc_typ :%c:", st_cntrct_lng_qt.c_exrc_typ );
     fn_userlog ( c_ServiceName, "c_opt_typ  :%c:", st_cntrct_lng_qt.c_opt_typ );
     fn_userlog ( c_ServiceName, "l_strike_prc:%ld:", st_cntrct_lng_qt.l_strike_prc );
     fn_userlog ( c_ServiceName, "c_ctgry_indstk :%c:", st_cntrct_lng_qt.c_ctgry_indstk );
     fn_userlog ( c_ServiceName, "ftq_lst_trd_prc :%ld:", st_cntrct_lng_qt.l_lst_trdd_prc );
     fn_userlog ( c_ServiceName, "c_lst_trd_tm :%s:", st_cntrct_lng_qt.c_lst_trdd_time );
     fn_userlog( c_ServiceName,"l_bst_bid_prc:%ld:", st_cntrct_lng_qt.l_bst_bid_prc[0]);
     fn_userlog( c_ServiceName,"l_bst_bid_qty:%ld:",st_cntrct_lng_qt.l_bst_bid_qty[0]);
     fn_userlog( c_ServiceName,"l_bst_offr_prc:%ld:",st_cntrct_lng_qt.l_bst_offr_prc[0]);
     fn_userlog( c_ServiceName,"l_bst_offr_qty:%ld:",st_cntrct_lng_qt.l_bst_offr_qty[0]);
  }

	/***  Commented In Ver 1.2

  strcpy ( ( char * )c_expiry_dt.arr, st_cntrct_lng_qt.c_expry_dt );
  SETLEN ( c_expiry_dt );
	******************************/

  strcpy ( ( char * )c_lst_trd_tm.arr, st_cntrct_lng_qt.c_lst_trdd_time );
  SETLEN ( c_lst_trd_tm );
 
	rtrim(st_cntrct_lng_qt.c_undrlyng);
  rtrim(st_cntrct_qoute.c_undrlyng);

  fn_init_ddr_val ( st_cntrct_lng_qt.c_rout_crt );

	/**Transaction Begins **/

  /*** i_trnsctn = fn_begintran( c_ServiceName, c_errmsg ); ** Ver 1.1 **/
  i_trnsctn = fn_nolog_begintran( c_ServiceName, c_errmsg );  /*** Ver 1.1 ***/
	 if ( i_trnsctn == -1 )
  {
		fn_errlog ( c_ServiceName, "S31030", TPMSG, c_errmsg );
		tpfree ( ( char * )ptr_car_sbuf );										
		tpfree ( ( char * )ptr_car_sbuf2 );									
  	strcpy ( ptr_st_err_msg->c_err_msg, c_errmsg );
  	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
 	}

  if(DEBUG_MSG_LVL_4)
	{
     fn_userlog ( c_ServiceName, "st_cntrct_qoute.l_close_prc :%ld:",st_cntrct_qoute.l_close_prc);
     fn_userlog ( c_ServiceName, "st_cntrct_qoute.l_open_prc  :%ld:",st_cntrct_qoute.l_open_prc); 
     fn_userlog ( c_ServiceName, "st_cntrct_qoute.l_high_prc  :%ld:",st_cntrct_qoute.l_high_prc); 
     fn_userlog ( c_ServiceName, "st_cntrct_qoute.l_low_prc   :%ld:",st_cntrct_qoute.l_low_prc);  
     fn_userlog ( c_ServiceName, "c_xchng_cd :%s:", st_cntrct_lng_qt.c_xchng_cd );
     fn_userlog ( c_ServiceName, "c_prd_typ  :%c:", st_cntrct_lng_qt.c_prd_typ );
     fn_userlog ( c_ServiceName, "c_undrlyng :%s:", st_cntrct_lng_qt.c_undrlyng );
     fn_userlog ( c_ServiceName, "c_expiry_dt:%s:", c_expiry_dt.arr );
     fn_userlog ( c_ServiceName, "c_exrc_typ :%c:", st_cntrct_lng_qt.c_exrc_typ );
     fn_userlog ( c_ServiceName, "c_opt_typ  :%c:", st_cntrct_lng_qt.c_opt_typ );
     fn_userlog ( c_ServiceName, "l_strike_prc:%ld:", st_cntrct_lng_qt.l_strike_prc );
     fn_userlog ( c_ServiceName, "c_ctgry_indstk :%c:", st_cntrct_lng_qt.c_ctgry_indstk );
     fn_userlog ( c_ServiceName, "ftq_lst_trd_prc :%ld:", st_cntrct_lng_qt.l_lst_trdd_prc );
     fn_userlog ( c_ServiceName, "c_lst_trd_tm :%s:", c_lst_trd_tm.arr );
     fn_userlog( c_ServiceName,"l_bst_bid_prc:%ld:", st_cntrct_lng_qt.l_bst_bid_prc[0]);
     fn_userlog( c_ServiceName,"l_bst_bid_qty:%ld:",st_cntrct_lng_qt.l_bst_bid_qty[0]);
     fn_userlog( c_ServiceName,"l_bst_offr_prc:%ld:",st_cntrct_lng_qt.l_bst_offr_prc[0]);
     fn_userlog( c_ServiceName,"l_bst_offr_qty:%ld:",st_cntrct_lng_qt.l_bst_offr_qty[0]);
  }

  if ( st_cntrct_qoute.l_close_prc != 0 )
  {
    d_pcnt_chg_prev_cls = ( double )( st_cntrct_qoute.l_lst_trdd_prc -
                          st_cntrct_qoute.l_close_prc   ) /
                          ( double )st_cntrct_qoute.l_close_prc *
                          100.0 * 100.0;
  }
  else
  {
   d_pcnt_chg_prev_cls = 0;
  }

  if(strcmp((char *)c_lst_trd_tm.arr,"01-Jan-1980 00:00:00")!= 0 || st_cntrct_lng_qt.l_bst_bid_qty[0] !=0 || st_cntrct_lng_qt.l_bst_offr_qty[0] !=0) 
  {
		if(DEBUG_MSG_LVL_1)	/*** Ver 1.2 ***/
  	{
			fn_userlog(c_ServiceName,"Long Contract Token no Is :%ld:",st_cntrct_lng_qt.l_eba_cntrct_id);
		}
    
		EXEC SQL
      UPDATE ftq_fo_trd_qt
         SET ftq_lst_trd_prc   = :st_cntrct_lng_qt.l_lst_trdd_prc,
             ftq_lst_trd_tm    = to_date( :c_lst_trd_tm,
                                'dd-Mon-yyyy hh24:mi:ss' ),
             ftq_lst_trd_qty   = :st_cntrct_lng_qt.l_lst_trdd_qty,
             ftq_tot_qty_trdd  = :st_cntrct_lng_qt.l_tot_trdd_qty,
             ftq_avrg_trd_prc  = :st_cntrct_lng_qt.l_avg_trdd_prc,
             ftq_bst1_bid_prc  = :st_cntrct_lng_qt.l_bst_bid_prc[0],
             ftq_bst2_bid_prc  = :st_cntrct_lng_qt.l_bst_bid_prc[1],
             ftq_bst3_bid_prc  = :st_cntrct_lng_qt.l_bst_bid_prc[2],
             ftq_bst4_bid_prc  = :st_cntrct_lng_qt.l_bst_bid_prc[3],
             ftq_bst5_bid_prc  = :st_cntrct_lng_qt.l_bst_bid_prc[4],
             ftq_bst1_bid_qty  = :st_cntrct_lng_qt.l_bst_bid_qty[0],
             ftq_bst2_bid_qty  = :st_cntrct_lng_qt.l_bst_bid_qty[1],
             ftq_bst3_bid_qty  = :st_cntrct_lng_qt.l_bst_bid_qty[2],
             ftq_bst4_bid_qty  = :st_cntrct_lng_qt.l_bst_bid_qty[3],
             ftq_bst5_bid_qty  = :st_cntrct_lng_qt.l_bst_bid_qty[4],
             ftq_bst1_offr_prc = :st_cntrct_lng_qt.l_bst_offr_prc[0],
             ftq_bst2_offr_prc = :st_cntrct_lng_qt.l_bst_offr_prc[1],
             ftq_bst3_offr_prc = :st_cntrct_lng_qt.l_bst_offr_prc[2],
             ftq_bst4_offr_prc = :st_cntrct_lng_qt.l_bst_offr_prc[3],
             ftq_bst5_offr_prc = :st_cntrct_lng_qt.l_bst_offr_prc[4],
             ftq_bst1_offr_qty = :st_cntrct_lng_qt.l_bst_offr_qty[0],
             ftq_bst2_offr_qty = :st_cntrct_lng_qt.l_bst_offr_qty[1],
             ftq_bst3_offr_qty = :st_cntrct_lng_qt.l_bst_offr_qty[2],
             ftq_bst4_offr_qty = :st_cntrct_lng_qt.l_bst_offr_qty[3],
             ftq_bst5_offr_qty = :st_cntrct_lng_qt.l_bst_offr_qty[4],
             ftq_tot_bid_qty   = :st_cntrct_lng_qt.d_tot_bid_qty,
             ftq_tot_offr_qty  = :st_cntrct_lng_qt.d_tot_offr_qty,
             ftq_cls_prc       = :st_cntrct_qoute.l_close_prc,
             ftq_opn_prc       = :st_cntrct_qoute.l_open_prc,
             ftq_hgh_prc       = :st_cntrct_qoute.l_high_prc,
             ftq_low_prc       = :st_cntrct_qoute.l_low_prc,
             ftq_chng_prvs_cls = :d_pcnt_chg_prev_cls,
             ftq_indctr        = :st_cntrct_qoute.c_indctr            
			 WHERE  ftq_token_no      = :st_cntrct_lng_qt.l_eba_cntrct_id;     /***  Added In Ver 1.2  ***/

			 /***  Commented In Ver 1.2 
       WHERE   ftq_xchng_cd      = :st_cntrct_lng_qt.c_xchng_cd
         AND   ftq_prdct_typ     = :st_cntrct_lng_qt.c_prd_typ
         AND   ftq_indstk        = :st_cntrct_lng_qt.c_ctgry_indstk
         AND   ftq_undrlyng      = :st_cntrct_lng_qt.c_undrlyng
         AND   ftq_expry_dt      = to_date ( :c_expiry_dt, 'dd-Mon-yyyy' )
         AND   ftq_exer_typ      = :st_cntrct_lng_qt.c_exrc_typ
         AND   ftq_opt_typ       = :st_cntrct_lng_qt.c_opt_typ
         AND   ftq_strk_prc      = :st_cntrct_lng_qt.l_strike_prc;

				***************/

     if ( SQLCODE != 0 )
     {
      fn_errlog ( c_ServiceName, "S31035", SQLMSG, ptr_st_err_msg->c_err_msg );
      tpfree ( ( char * )ptr_car_sbuf );                    
      tpfree ( ( char * )ptr_car_sbuf2 );                    
      fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
     } 

    }
    else
    {
      if(DEBUG_MSG_LVL_4){
      fn_userlog( c_ServiceName,"INside Update QUOTE 1 ");
      fn_userlog ( c_ServiceName,"c_xchng_cd    :%s:", st_cntrct_lng_qt.c_xchng_cd );
      fn_userlog ( c_ServiceName, "c_prd_typ    :%c:", st_cntrct_lng_qt.c_prd_typ );
      fn_userlog ( c_ServiceName, "c_undrlyng   :%s:", st_cntrct_lng_qt.c_undrlyng );
      fn_userlog ( c_ServiceName, "c_expiry_dt  :%s:",  c_expiry_dt.arr );
      fn_userlog ( c_ServiceName, "c_exrc_typ   :%c:", st_cntrct_lng_qt.c_exrc_typ );
      fn_userlog ( c_ServiceName, "c_opt_typ    :%c:", st_cntrct_lng_qt.c_opt_typ );
      fn_userlog ( c_ServiceName, "l_strike_prc :%ld:", st_cntrct_lng_qt.l_strike_prc );
      fn_userlog ( c_ServiceName, "c_rqst_typ :%c:", st_cntrct_lng_qt.c_rqst_typ );
      fn_userlog ( c_ServiceName, "l_lst_trdd_prc :%ld:", st_cntrct_lng_qt.l_lst_trdd_prc );
      fn_userlog ( c_ServiceName, "ftq_lst_trd_tm :%s:", c_lst_trd_tm.arr );
      }
			
			if(DEBUG_MSG_LVL_1)			/***	Ver 1.2	***/
			{
				fn_userlog(c_ServiceName,"Short Contract Token No Is :%ld:",st_cntrct_qoute.l_eba_cntrct_id);
			}

      EXEC SQL
              UPDATE  ftq_fo_trd_qt
                 SET  ftq_cls_prc       = :st_cntrct_qoute.l_close_prc,
                      ftq_opn_prc       = :st_cntrct_qoute.l_open_prc,
                      ftq_hgh_prc       = :st_cntrct_qoute.l_high_prc,
                      ftq_low_prc       = :st_cntrct_qoute.l_low_prc,
                      ftq_chng_prvs_cls = :d_pcnt_chg_prev_cls,
                      ftq_indctr        = :st_cntrct_qoute.c_indctr
							 WHERE   ftq_token_no      = :st_cntrct_qoute.l_eba_cntrct_id;     /***  Added In Ver 1.2  ***/

							 /***  Commented In Ver 1.2

               WHERE  ftq_xchng_cd      = :st_cntrct_qoute.c_xchng_cd
                 AND  ftq_prdct_typ     = :st_cntrct_qoute.c_prd_typ
                 AND  ftq_undrlyng      = :st_cntrct_qoute.c_undrlyng
                 AND  ftq_expry_dt      = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
                 AND  ftq_exer_typ      = :st_cntrct_qoute.c_exrc_typ
                 AND  ftq_opt_typ       = :st_cntrct_qoute.c_opt_typ
                 AND  ftq_strk_prc      = :st_cntrct_qoute.l_strike_prc
                 AND  ftq_indstk        = :st_cntrct_qoute.c_ctgry_indstk;

								*****************/

     if ( SQLCODE != 0 )
     {
      fn_errlog ( c_ServiceName, "S31040", SQLMSG, ptr_st_err_msg->c_err_msg );
      tpfree ( ( char * )ptr_car_sbuf );    
      tpfree ( ( char * )ptr_car_sbuf2 );  
      fn_aborttran( c_ServiceName, i_trnsctn, c_errmsg );
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
     }
   }
	/**  Commiting Transaction **/
	
	/*** if ( fn_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 ) *** Ver 1.1 ***/
  if ( fn_nolog_committran( c_ServiceName, i_trnsctn, c_errmsg ) == -1 ) /*** Ver 1.1 ***/
  {
     strcpy ( ptr_st_err_msg->c_err_msg, c_errmsg );
     tpfree ( ( char * )ptr_car_sbuf );             
     tpfree ( ( char * )ptr_car_sbuf2 );           
     tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }


 	tpfree ( ( char * ) ptr_st_err_msg );
  tpfree ( ( char * ) ptr_car_sbuf );             
  tpfree ( ( char * ) ptr_car_sbuf2 );           
 	tpreturn ( TPSUCCESS, SUCC_BFR, NULL, 0, 0 ); 

} //End of the service 

