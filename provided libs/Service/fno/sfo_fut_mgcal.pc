/******************************************************************************/
/*  Program           : SFO_FUT_MGCAL                                         */
/*                                                                            */
/*  Input             : FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_CI_BUY_QTY                                        */
/*                      FFO_CI_BUY_ORD_VL                                     */
/*                      FFO_CI_SELL_QTY                                       */
/*                      FFO_CI_SELL_ORD_VL                                    */
/*                      FFO_CBUY_EXCTD_QTY                                    */
/*                      FFO_CSELL_EXCTD_QTY                                   */
/*                      FFO_C_OPNPSTN_FLW                                     */
/*                      FFO_C_OPNPSTN_QTY                                     */
/*                      FFO_C_ORG_OPN_VAL                                     */
/*                      FFO_ROUT_CRT                                          */
/*                                                                            */
/*  Output            : FFO_U_ORDR_MRGN                                       */
/*                      FFO_U_TRD_MRGN                                        */
/*                                                                            */
/*  Description       : This service calculates the margin  for a given       */
/*                      futures positions                                     */
/*                                                                            */
/*  Log               : 1.0   10-Feb-2002  Vinod Banjan                       */
/*                    : 1.1   28-Feb-2008  Vidyayini Krish  									*/
/*										: 1.2   23-may-2008  Sandeep Patil                      */
/*										: 1.3   03-Mar-2011  Nitin Save                         */
/*										: 1.4		26-Oct-2012	 Bhushan Sonwane										*/
/*										: 1.5		19-Nov-2012	 Vishnu Nair												*/
/* 										:	1.6		13-Feb-2014	 Bhushan Sonwane                    */
/*                    : 1.8   13-Jul-2015  Anand Dhopte                       */
/*                    : 1.9   15-Dec-2015  Aakash							                */
/*                    : 2.0   27-Jan-2016  Tanmay Warkhade                    */
/*										: 2.1   07-Aug-2018	 Afzal K.														*/
/*										:	2.2		28-Sep-2018	 Parag Kanojia											*/
/*                    : 2.3   05-Jan-2019  Bhushan Harekar                    */
/*                    : 2.4   28-Dec-2019  Abhinav Kumbhar                    */ 
/*                    : 2.5   20-Sep-2019  Navina D.                          */
/*                    : 2.6   06-May-2020  Navina D.                          */
/*                    : 2.7   22-Jan-2021  Anuj Pancholi                      */
/*                    : 2.8   17-Jun-2021  Navina D.                          */
/*                    : 2.9   16-Jul-2022  Naveena                            */
/******************************************************************************/
/*  1.0    -  New Release                                                     */
/*  1.2    -  FP  Changes																											*/
/*  1.3    -  Margin Calc Changes in Order placement screen                   */ 
/*  1.4		 -	Disable FuturePlus for BSE                                      */
/*	1.5		 -	Restricting NRI customers to calculating margin for product			*/ 
/*						FuturePlus and exchange bse																			*/
/*	1.6		 -	Enabling NRI customers to calculating margin for product     		*/
/*            FuturePlus																											*/
/*  1.8    -  Contract Master and Trade Quote Table Merger Changes            */
/*  1.9    -  CR-ISEC10-70548(CR for Margin display FNO order placement)      */
/*  2.0    -  Migration of RI to NRI                                          */
/*  2.1		 -  Modification for view margin on Dl.Net													*/
/*	2.2		 -	CR-ISEC14-114802_FNO_LIVE_ISSUES Changes												*/
/*  2.3    -  Handling for NIFTY Weekly expiry                                */
/*  2.4		 -  VQC																															*/
/*  2.5    -  Strategy margin with position and order margin                  */
/*  2.6    -  FPSL Margin Changes                                             */ 
/*  2.7    -  Vendor Validation Changes                                       */
/*  2.8    -  Basket order with open position margin                          */
/*  2.9    -  CR-ISEC14-170021 Revision of Margin logic of FPSL, Oplus & Opt  */
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <eba_to_ors.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <sqlca.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_session.h>
#include <fn_pos.h>
#include <fn_ddr.h>
#include <fn_read_debug_lvl.h> /* Ver 1.1 */
#include <fn_val_ord.h> /*** Ver 2.5 ***/

int fn_cal_mrgn ( char *c_servicename,
                  char *c_err_msg,
									char *c_cln_mtch_accnt,
                  char *c_xchng_cd,
                  char *c_undrlyng,
                  char c_prd_typ,
                  char c_ctgry_indstk,
                  char c_cntrct_tag,
                  double *ptr_d_ord_mrgn_amt,
                  double *ptr_d_trd_mrgn_amt) ;

int fn_upd_mrgn_cal( 	char *c_ServiceName,
                  		struct vw_pstn_actn *ptr_st_pstn_actn,
                  		struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                  		struct vw_undfut_pos *ptr_st_undfut_pos,
                  		struct vw_err_msg *ptr_st_err_msg);

/**  Ver 1.9 Starts  **/
int fn_insert_records ( char *c_ServiceName,
						char *c_err_msg,
						struct vw_cntfut_pos *ptr_st_undfut_pos);

int fn_process_records ( char *c_ServiceName,
                  char *c_err_msg,
				  char *c_cln_mtch_accnt,
                  char *c_xchng_cd,
                  char *c_undrlyng,
                  char c_prd_typ,
                  char c_ctgry_indstk,
                  char c_cntrct_tag,
				  double *ptr_d_ord_mrgn_amt,
                  double *ptr_d_trd_mrgn_amt);
/**  Ver 1.9 Starts  **/
int fn_mrgncal_sltp ( char   *c_ServiceName,
					  char *c_err_msg,
					  struct vw_cntfut_pos *ptr_st_undfut_pos,
					  long  *ptr_l_lst_trd_prc,
					  double *ptr_d_ord_mrgn_amt
                      );

/**  Ver 1.9  Ends**/

void SFO_FUT_MGCAL( TPSVCINFO *rqst )
{
  char c_ServiceName[33] = "\0";			/* initialized in VQC */
  /** char c_err_msg[256];				** VQC ***/
  varchar c_err_msg[256] = {'\0'};				/* Converted to Varchar in VQC */
  char c_req_type = '\0';		/**  Ver 1.9  **/

  int i_returncode = 0;				/* initialized in VQC */
  int i_ch_val = 0;       		/* initialized in VQC */
  int i_trnsctn = 0;       		/* initialized in VQC */

  double  d_ord_mrgn_amt = 0.0 ; /*** Initialized in Ver 2.5 ***/
  double  d_trd_mrgn_amt = 0.0 ; /*** Initialized in Ver 2.5 ***/
  double  d_ord_amt_blkd = 0.0 ; /* initialized in VQC */ 
  double  d_pstn_amt_blkd = 0.0 ; /* initialized in VQC */ 
	double	d_fut_ord_mrgn_amt = 0.0;			/**  Ver 1.9  **/
	double	d_fut_plus_ord_mrgn_amt = 0.0;		/**  Ver 1.9  **/
	double	d_fut_plus_sltp_ord_mrgn_amt = 0.0;	/**  Ver 1.9  **/	
  double d_blkd_ordr_mrgn = 0.0; /*** Ver 2.5 ***/
  double d_blkd_trd_mrgn = 0.0; /*** Ver 2.5 ***/
  char  c_ven_nm[15] = "\0";    /*** Ver 2.5 ***/


  long    l_lst_trd_prc = 0;   /**  Ver 1.3  **/
  double  d_lst_trd_prc = 0.0; /**  Ver 1.3  **/
 	int     i_err[2];            /**  Ver 1.3  **/
	int     i_ferr[2];           /**  Ver 1.3  **/
	char    c_flg;           		 /**  Ver 1.3  **/
	char		c_tmp_prdct_typ = 'F';		/*** Ver 2.2 ***/
  char    c_api_src_flg ='\0'; /** Ver 2.5 **/
  char    c_user_id[9]="\0";   /** Ver 2.5 **/
  varchar c_ven_id[51];        /** Ver 2.5 **/


  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  struct vw_usr_prfl st_usr_prfl;
  struct vw_err_msg st_err_msg;

  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_cntfut_pos st_cf_pos;
    struct vw_cntfut_pos st_cf_pos_temp; /*** Ver 2.5 ***/
		char	c_cln_mtch_accnt [ 11 ] = "\0";				/* initialized in VQC */
		char	c_xchng_cd [ 4 ] = "\0";							/* initialized in VQC */
		char	c_ip_undrlying [ 7 ] = "\0";					/* initialized in VQC */
		char	c_prd_typ = '\0';											/* initialized in VQC */
		/* char	c_ip_prd_typ = '\0';		**  Ver 1.9  ** Commented in VQC */
		char	c_ctgry_indstk = '\0';				/* initialized in VQC */
		char	c_ip_tag = '\0';				/* initialized in VQC */
		char	c_fum_qt_trdng_flg = '\0';		/*** Ver 2.2 ***/
		char	c_fum_fp_trdng_flg = '\0';		/*** Ver 2.2 ***/
		char	c_fum_sltp_fp_trdng_flg = '\0';	/*** Ver 2.2 **/
  EXEC SQL END DECLARE SECTION;
  EXEC SQL INCLUDE "table/icd_info_client_dtls.h"; /*** Ver 2.0 ***/

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);

  i_ch_val = Fvftos32( ptr_fml_Ibuf,
                       (char *)&st_usr_prfl,
                       "vw_usr_prfl" );
  if ( i_ch_val == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg.arr  );				/*** Datatype is converted to Varchar in (VQC) ***/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );       	  		/*** Datatype is converted to Varchar in (VQC) ***/	
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  MEMSET(st_cf_pos_temp); /*** Ver 2.5 ***/

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

  i_ch_val = fn_chk_sssn( c_ServiceName,
                          &st_usr_prfl,
                          &st_err_msg ) ;
  if ( i_ch_val == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", LIBMSG, c_err_msg.arr  );      /*** Datatype is converted to Varchar in (VQC) ***/ 
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 ); 
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	fn_rewind_rs ( ptr_fml_Ibuf );

 	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr );           /*** Datatype is converted to Varchar in (VQC) ***/ 
 	if ( i_trnsctn == -1 )
 	{
  	fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg.arr  );      /*** Datatype is converted to Varchar in (VQC) ***/ 
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );             /*** Datatype is converted to Varchar in (VQC) ***/ 
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	}

  EXEC SQL
		DELETE	ffp_fo_futures_pstn_gbt;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31020", SQLMSG, c_err_msg.arr );      /*** Datatype is converted to Varchar in (VQC) ***/ 
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );             /*** Datatype is converted to Varchar in (VQC) ***/ 
fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );               /*** Datatype is converted to Varchar in (VQC) ***/ 
tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
}

/*** Fprint32(ptr_fml_Ibuf); Commented In Ver 1.5	***/


while ( 1 )
{
i_ch_val = fn_getnxt_rs  ( 	ptr_fml_Ibuf,
												c_ServiceName,
												c_err_msg.arr	, /*** Datatype is converted to Varchar in (VQC) ***/ 
												18,
												FFO_EBA_MTCH_ACT_NO, 
												(char *)st_cf_pos.c_cln_mtch_accnt, NULL,
												FFO_XCHNG_CD, 
												(char *)st_cf_pos.c_xchng_cd, NULL,
												FFO_PRDCT_TYP, 
												(char *)&st_cf_pos.c_prd_typ, NULL,
												FFO_UNDRLYNG, 
												(char *)st_cf_pos.c_undrlyng, NULL,
												FFO_EXPRY_DT, 
												(char *)st_cf_pos.c_expry_dt, NULL,
												FFO_EXER_TYP, 
												(char *)&st_cf_pos.c_exrc_typ, NULL, 
												FFO_OPT_TYP, 
												(char *)&st_cf_pos.c_opt_typ, NULL,
												FFO_STRK_PRC, 
												(char *)&st_cf_pos.l_strike_prc, NULL,
												FFO_CTGRY_INDSTK, 
												(char *)&st_cf_pos.c_ctgry_indstk, NULL,
												FFO_CI_BUY_QTY, 
												(char *)&st_cf_pos.l_ibuy_qty, NULL,
												FFO_CI_SELL_QTY, 
												(char *)&st_cf_pos.l_isell_qty, NULL,
												FFO_CI_BUY_ORD_VL, 
												(char *)&st_cf_pos.d_ibuy_ord_vl, NULL,
												FFO_CI_SELL_ORD_VL, 
												(char *)&st_cf_pos.d_isell_ord_vl, NULL,
												FFO_CBUY_EXCTD_QTY, 
												(char *)&st_cf_pos.l_buy_exctd_qty, NULL,
												FFO_CSELL_EXCTD_QTY, 
												(char *)&st_cf_pos.l_sell_exctd_qty, NULL,
												FFO_C_OPNPSTN_FLW, 
												(char *)&st_cf_pos.c_opnpstn_flw, NULL,
												FFO_C_OPNPSTN_QTY, 
												(char *)&st_cf_pos.l_opnpstn_qty, NULL,
												FFO_C_ORG_OPN_VAL, 
												(char *)&st_cf_pos.d_org_opn_val, NULL
										);

if ( i_ch_val == NO_DATA_FOUND )
{
if(DEBUG_MSG_LVL_3) /*** Ver 1.9 ***/
{
fn_userlog( c_ServiceName, "NO DATA FOUND IN BUFFER");
}
break;
}
else if ( i_ch_val != 0 )
{
fn_errlog( c_ServiceName, "S31025", LIBMSG,c_err_msg.arr );             /*** Datatype is converted to Varchar in (VQC) ***/ 
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );            /*** Datatype is converted to Varchar in (VQC) ***/
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );          /*** Datatype is converted to Varchar in (VQC) ***/ 
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
   if(DEBUG_MSG_LVL_3)    
   {
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Match account :%s:",st_cf_pos.c_cln_mtch_accnt);
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Contract details" );
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~EX :%s:", st_cf_pos.c_xchng_cd );
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~PRD:%c:", st_cf_pos.c_prd_typ );
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~UND:%s:", st_cf_pos.c_undrlyng );
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~EXP:%s:", st_cf_pos.c_expry_dt );
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Ex :%c:", st_cf_pos.c_exrc_typ );
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~OP :%c:", st_cf_pos.c_opt_typ );
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~SP :%ld:", st_cf_pos.l_strike_prc );
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~I/S:%c:", st_cf_pos.c_ctgry_indstk );
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Ibuy qty:%ld:", st_cf_pos.l_ibuy_qty );
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Ibuy ord val:%lf:", st_cf_pos.d_ibuy_ord_vl );
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~buy Exec qty:%ld:", st_cf_pos.l_buy_exctd_qty );
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~Values after modification" );
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~M-Isell qty:%ld:", st_cf_pos.l_isell_qty );
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~M-Isell ord val:%lf:", st_cf_pos.d_isell_ord_vl );
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~M-sell Exec qty:%ld:", st_cf_pos.l_sell_exctd_qty );
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~M-open pos flow:%c:", st_cf_pos.c_opnpstn_flw );
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~M-open pos qty:%ld:", st_cf_pos.l_opnpstn_qty );
	fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~M-open pos val:%lf:", st_cf_pos.d_org_opn_val );
      }
  /***** Ver 1.4 Starts *****/

  if( strcmp(st_cf_pos.c_xchng_cd,"BFO") == 0 )
  	{
		  /****** Added in Ver 2.0 *******/

      MEMSET ( sql_icd_cust_type ) ;

      EXEC SQL
      SELECT  ICD_CUST_TYPE
      INTO    :sql_icd_cust_type
      FROM    ICD_INFO_CLIENT_DTLS,
              IAI_INFO_ACCOUNT_INFO
      WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
      AND     IAI_MATCH_ACCOUNT_NO  = :st_usr_prfl.c_cln_mtch_accnt;

    if( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31030", SQLMSG, c_err_msg.arr );     /*** Datatype is converted to Varchar in (VQC) ***/ 
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );            /*** Datatype is converted to Varchar in (VQC) ***/ 
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );          /*** Datatype is converted to Varchar in (VQC) ***/  
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	
		SETNULL(sql_icd_cust_type);

    if(strcmp(sql_icd_cust_type.arr,"NRI") == 0)
    {
      fn_errlog( c_ServiceName, "S31035", "Currently BSE Derivative is not allowed for NRI customers", c_err_msg.arr  );          /*** Datatype is converted to Varchar in (VQC) ***/ 
      strcpy(c_err_msg.arr,"Currently BSE Derivative is not allowed for NRI customers");    /*** Datatype is converted to Varchar in (VQC) ***/ 
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg.arr, 0 );							/*** Datatype is converted to Varchar in (VQC) ***/
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );          /*** Datatype is converted to Varchar in (VQC) ***/ 
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

      /****** Ver 2.0 ******* Ends *****/

      /****** Comented in ver 2.0  **********	
  		if( ((strncmp(st_usr_prfl.c_cln_mtch_accnt, "750", 3)  == 0 ) ||
       		(strncmp(st_usr_prfl.c_cln_mtch_accnt, "751", 3)  == 0 ) ||
       		(strncmp(st_usr_prfl.c_cln_mtch_accnt, "650", 3)  == 0 ) ||
       		(strncmp(st_usr_prfl.c_cln_mtch_accnt, "651", 3)  == 0 )) 
      	)                           																		** ver 1.5 ***
				{
					fn_errlog( c_ServiceName, "S31040", "Currently BSE Derivative is not allowed for NRI customers", c_err_msg  );
					strcpy(c_err_msg,"Currently BSE Derivative is not allowed for NRI customers");
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
        ****** Comented Ends Ver 2.0 **********/
   /*** Ver 2.5 Starts ***/

   strcpy(c_user_id,st_usr_prfl.c_user_id);

   if ( Fget32(ptr_fml_Ibuf,FFO_UPLD_MTCH_FLG,0,(char *)&c_api_src_flg, 0 ) == -1)
   {
     if ( Ferror32 != FNOTPRES )
     {
       fn_userlog( c_ServiceName, "Val of  i_err after fget in error :%d:", i_err[0] );
       fn_userlog( c_ServiceName, "Val of  i_ferr after fget in error :%d:", i_ferr[0] );
       fn_errlog( c_ServiceName, "S31045", Fstrerror32(i_ferr[0]),c_err_msg.arr);
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
   }

	if( DEBUG_MSG_LVL_3 ) 
	{
    fn_userlog(c_ServiceName,"API Source Flag :%c:",c_api_src_flg);
	}
	 if (c_api_src_flg == 'A')
   {
     MEMSET(c_ven_id);

     if ( Fget32(ptr_fml_Ibuf,FFO_USER_CODE,0,(char *)c_ven_id.arr, 0) == -1 )
     {
       fn_userlog( c_ServiceName, "Val of  i_err after fget in error :%d:", i_err[0] );
       fn_userlog( c_ServiceName, "Val of  i_ferr after fget in error :%d:", i_ferr[0] );
       fn_errlog( c_ServiceName, "S31050", Fstrerror32(i_ferr[0]),c_err_msg.arr);
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }


     i_returncode = fn_chk_vendor( c_ServiceName,
                                   c_user_id,
                                   c_ven_id.arr,
                                   c_ven_nm,
                                   &st_err_msg
                                 );

     if (i_returncode == -1 )
     {
        fn_errlog( c_ServiceName,"S31055","Error in function fn_chk_vendor", c_err_msg.arr );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
        tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
     }

     if(strcmp(c_ven_nm,"SENSIBULL") == 0 )
     {
        if( c_user_id[0] == BPID )
        {
          fn_userlog( c_ServiceName, "You are Attached to a Direct Business Catalyst,Sensibull is disabled");
          fn_errlog( c_ServiceName, "B35018", "",c_err_msg.arr);
          strcpy(c_err_msg.arr,"Since you are Attached to a Direct Business Catalyst,Sensibull is disabled");
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg.arr, 0 );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        EXEC SQL
          SELECT  ICD_CUST_TYPE
          INTO    :sql_icd_cust_type
          FROM    ICD_INFO_CLIENT_DTLS,
                  IAI_INFO_ACCOUNT_INFO
          WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
          AND     IAI_MATCH_ACCOUNT_NO  = :st_usr_prfl.c_cln_mtch_accnt;
        if ( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S31060",SQLMSG,c_err_msg.arr);
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg.arr, 0 );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        if(strcmp(sql_icd_cust_type.arr,"NRI") == 0)
        {
          fn_userlog( c_ServiceName,"NRI Customer Trying To Place Order from SENSIBULL");
          fn_errlog( c_ServiceName, "S31065","NRI Customer Trying To Place Order from SENSIBULL",c_err_msg.arr);
          strcpy(c_err_msg.arr," NRI Customer Trying To Place Order from SENSIBULL.");
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg.arr, 0 );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }
    	else
    	{
       /***************** commented in ver 2.7 *****************************
       fn_userlog( c_ServiceName, "Invalid Vendor" );
       fn_errlog( c_ServiceName, "S31070","InValid Vendor.",c_err_msg.arr );
       strcpy( c_err_msg.arr,"InValid Vendor.");
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
			 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       *********************************************************************/
       fn_userlog(c_ServiceName,"Call from Vendor with ESP_ID :%s: Vendor Name:%s:",c_ven_id.arr,c_ven_nm);  /** ver 2.7 **/ 
    	}			
    }
   /*** Ver 2.5 Ends ***/

    	if( st_cf_pos.c_prd_typ == 'P' )
      	{
         	fn_errlog( c_ServiceName, "S31075", "This facility is currently not enabled for BSE", c_err_msg.arr  );           /*** Datatype is converted to Varchar in (VQC) ***/ 
				 	strcpy(c_err_msg.arr,"This facility is currently not enabled for BSE.");	/*** Datatype is converted to Varchar in (VQC) ***/	
         	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg.arr, 0 );             /*** Datatype is converted to Varchar in (VQC) ***/ 
    			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );          /*** Datatype is converted to Varchar in (VQC) ***/ 
         	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
		}

  /***** Ver 1.4 Ends ******/

	/*** Ver 1.5 Starts *** Commented in Ver 1.6 ***


  if ( ((strncmp(st_usr_prfl.c_cln_mtch_accnt, "750", 3)  == 0 ) ||
       (strncmp(st_usr_prfl.c_cln_mtch_accnt, "751", 3)  == 0 ) ||
       (strncmp(st_usr_prfl.c_cln_mtch_accnt, "650", 3)  == 0 ) ||
       (strncmp(st_usr_prfl.c_cln_mtch_accnt, "651", 3)  == 0 )) && 
			 (st_cf_pos.c_prd_typ == 'P')
      )
  {
   if(DEBUG_MSG_LVL_3)
   {
    fn_userlog(c_ServiceName,"NRI Customer Trying To calculate margin for FuturePlus.");
   }

   	fn_errlog( c_ServiceName, "S31080", "This facility is not enabled for NRI customers", c_err_msg);
   	strcpy(c_err_msg," This facility is not enabled for NRI customers.");
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
   	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }


  *** Ver 1.5 Ends *** Comment Ends Ver 1.6 ***/

	/***Ver 1.9 Starts ***/
	i_err[0]=Fget32(ptr_fml_Ibuf,FFO_RQST_TYP,0,(char *)&c_req_type,0);
	i_ferr [0] = Ferror32;

   if (( i_err[0] == -1 ) && ( i_ferr[0] != FNOTPRES ))
   {
     fn_userlog( c_ServiceName, "FFO_RQST_TYP : Val of  i_err after fget in error :%d:", i_err[0] );
     fn_userlog( c_ServiceName, "FFO_RQST_TYP: Val of  i_ferr after fget in error :%d:", i_ferr[0] );
   	 fn_errlog( c_ServiceName, "S31085", Fstrerror32(i_ferr[0]),c_err_msg.arr);	/*** Datatype is converted to Varchar in (VQC) ***/	
   	 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );   /*** Datatype is converted to Varchar in (VQC) ***/ 
		 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr); /*** For Transection abort at Error S31055 in VQC **/
   	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
   else
   {
	 if (i_err[0] != -1)  
    	{
	   if(DEBUG_MSG_LVL_3)
   	   {
	   	fn_userlog( c_ServiceName, "FFO_RQST_TYP : %c:", c_req_type);
	   }
	}
   }
	/***Ver 1.9 Ends ***/


   /*******************       1.3 Changes Start  **************************************/

	c_flg='N';

   i_err[0]=Fget32(ptr_fml_Ibuf,FFO_LST_TRD_PRC,0,(char *)&l_lst_trd_prc,0);
   i_ferr [0] = Ferror32;

	 if(DEBUG_MSG_LVL_3)	/*** Ver 1.9 ***/
   {
     fn_userlog( c_ServiceName, "Val of  i_err after fget At Start :%d:", i_err[0] );
     fn_userlog( c_ServiceName, "Val of  i_ferr after fget At Start :%d:", i_ferr[0] );
	 }
   if (( i_err[0] == -1 ) && ( i_ferr[0] != FNOTPRES ))
   {
     fn_userlog( c_ServiceName, "Val of  i_err after fget in error :%d:", i_err[0] );
     fn_userlog( c_ServiceName, "Val of  i_ferr after fget in error :%d:", i_ferr[0] );
   	 fn_errlog( c_ServiceName, "S31090", Fstrerror32(i_ferr[0]),c_err_msg.arr);	 /*** Datatype is converted to Varchar in (VQC) ***/	
   	 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );	  /*** Datatype is converted to Varchar in (VQC) ***/ 
		 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr);  /** For Transection abort at Error S31060 in VQC **/	
   	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
   else
   {   /* Start of else part i.e : FFO_LST_TRD_PRC present  **/  
   	  if(DEBUG_MSG_LVL_3)
   	  {
	  	fn_userlog( c_ServiceName, "Val of LTP after fget :%ld:", l_lst_trd_prc );
	  }
    if (i_err[0] != -1)  
    {
		c_flg='Y';
      if(DEBUG_MSG_LVL_3)
	  { 
		fn_userlog( c_ServiceName, "Inside new changes for placement screen :");
		fn_userlog( c_ServiceName, "Val of LTP after fget :%ld:", l_lst_trd_prc );
		fn_userlog( c_ServiceName, "Val of i_err after fget :%d:", i_err[0] );
		fn_userlog( c_ServiceName, "Val of i_ferr after fget :%d:", i_ferr[0] ); 
      }

      d_lst_trd_prc = l_lst_trd_prc;     /*** Converting variable from Long to Double for FML adding purpose ***/

	    EXEC SQL 
					 SELECT ffp_clm_mtch_accnt,										
									ffp_opnpstn_flw,
									abs(ffp_opnpstn_qty)
					 INTO   :st_cf_pos.c_cln_mtch_accnt,
		     				  :st_cf_pos.c_opnpstn_flw,
		     				  :st_cf_pos.l_opnpstn_qty
					 FROM   FFP_FO_FUTURES_PSTN
					 WHERE	ffp_clm_mtch_accnt = :st_cf_pos.c_cln_mtch_accnt
					 AND    ffp_xchng_cd    	 = :st_cf_pos.c_xchng_cd
					 AND    ffp_undrlyng       = :st_cf_pos.c_undrlyng
					 AND    ffp_expry_dt       = :st_cf_pos.c_expry_dt 
					 AND	  ffp_prdct_typ      = :st_cf_pos.c_prd_typ
					 AND    ffp_opnpstn_qty != 0;


      if ( SQLCODE != 0)
      { 
				 if ( SQLCODE == NO_DATA_FOUND )
         {
				   d_lst_trd_prc = 0.00;
				   if(DEBUG_MSG_LVL_3) /*** Ver 1.9 ***/
   				 {
							fn_userlog( c_ServiceName, "Val of Open Position Rate in case of no position:%lf:", d_lst_trd_prc );
					 }
         }
         else
         {
           fn_errlog ( c_ServiceName, "S31095", SQLMSG, c_err_msg.arr );  /*** Datatype is converted to Varchar in (VQC) ***/
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );				/*** Datatype is converted to Varchar in (VQC) ***/ 
           fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );     /*** Datatype is converted to Varchar in (VQC) ***/ 
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }
      }
     
      if(DEBUG_MSG_LVL_3)
			{
      	fn_userlog( c_ServiceName, "Val of c_cln_mtch_accnt after db fetch :%s:", st_cf_pos.c_cln_mtch_accnt );
      	fn_userlog( c_ServiceName, "Val of c_opnpstn_flw after db fetch :%c:", st_cf_pos.c_opnpstn_flw );
      	fn_userlog( c_ServiceName, "Val of l_opnpstn_qty after db fetch :%ld:", st_cf_pos.l_opnpstn_qty );
			  fn_userlog( c_ServiceName, "Val of default Open Position Rate :%lf:", d_lst_trd_prc );
			  fn_userlog( c_ServiceName, "Val of c_flg :%c:", c_flg );
      }

      /** After Multiplying rate with quantity (The same multiplication is handled in front-end from Margin-Calc link)****/
      
			st_cf_pos.d_org_opn_val = (l_lst_trd_prc * st_cf_pos.l_opnpstn_qty);

			/*** Addition on 01-Apr-2011 for Existing Sell/Buy Position Chk Starts ****/

			if(st_cf_pos.c_opnpstn_flw == 'B')
			{
			 st_cf_pos.l_buy_exctd_qty  = st_cf_pos.l_opnpstn_qty;
			}
			if(st_cf_pos.c_opnpstn_flw == 'S')
			{
			 st_cf_pos.l_sell_exctd_qty = st_cf_pos.l_opnpstn_qty;
      }
		  
			if(DEBUG_MSG_LVL_3)
			{
			  fn_userlog( c_ServiceName, "Val of Buy  Open pos qty to be displayed :%ld:", st_cf_pos.l_buy_exctd_qty  );
			  fn_userlog( c_ServiceName, "Val of Sell Open pos qty to be displayed :%ld:", st_cf_pos.l_sell_exctd_qty );
		  }

			/*** Addition on 01-Apr-2011 for Existing Sell/Buy Position Chk Ends****/

      if(DEBUG_MSG_LVL_3)
			{
			  fn_userlog( c_ServiceName, "Val of Multiplied Open Position and Rate :%lf:", st_cf_pos.d_org_opn_val );
      }
    }  
   } /** End of Else Part **/

   /*** Ver 2.5 starts ***/
   if(c_req_type == 'S' ) /*** called by sensibull API ***/
   {

    st_cf_pos.l_exbuy_qty = st_cf_pos.l_ibuy_qty ;
    st_cf_pos.l_exsell_qty = st_cf_pos.l_isell_qty ;
    st_cf_pos.d_exbuy_ord_vl = st_cf_pos.d_ibuy_ord_vl ;
    st_cf_pos.d_exsell_ord_vl = st_cf_pos.d_isell_ord_vl ;
	
		/*** Ver 2.8 starts ***/	
		if (st_cf_pos.c_opnpstn_flw == 'B')
		{
      st_cf_pos.l_buy_exctd_qty = st_cf_pos.l_opnpstn_qty;
		}
		else if (st_cf_pos.c_opnpstn_flw == 'S')
		{
			st_cf_pos.l_sell_exctd_qty = st_cf_pos.l_opnpstn_qty * -1;
		} 
		/*** Ver 2.8 ends***/

     EXEC SQL
        SELECT FFP_CLM_MTCH_ACCNT,
               FFP_IBUY_QTY,
               FFP_IBUY_ORD_VAL,
               abs(FFP_ISELL_QTY),  
               abs(FFP_ISELL_ORD_VAL),
               FFP_EXBUY_QTY,
               FFP_EXBUY_ORD_VAL,
               FFP_EXSELL_QTY,  /*** removed abs in Ver 2.8 ***/
               FFP_EXSELL_ORD_VAL, /*** removed abs in Ver 2.8 ***/
               FFP_OPNPSTN_FLW,
               FFP_OPNPSTN_QTY,  /*** removed abs in Ver 2.8 ***/
               FFP_OPNPSTN_VAL,   /*** removed abs in Ver 2.8 ***/
							 FFP_BUY_EXCTD_QTY,  /*** Ver 2.8 ***/
							 FFP_SELL_EXCTD_QTY /*** Ver 2.8 ***/
        INTO  :st_cf_pos_temp.c_cln_mtch_accnt,
              :st_cf_pos_temp.l_ibuy_qty,
              :st_cf_pos_temp.d_ibuy_ord_vl,
              :st_cf_pos_temp.l_isell_qty,
              :st_cf_pos_temp.d_isell_ord_vl,
              :st_cf_pos_temp.l_exbuy_qty,
              :st_cf_pos_temp.d_exbuy_ord_vl,
              :st_cf_pos_temp.l_exsell_qty,
              :st_cf_pos_temp.d_exsell_ord_vl,
              :st_cf_pos_temp.c_opnpstn_flw,
              :st_cf_pos_temp.l_opnpstn_qty,
              :st_cf_pos_temp.d_org_opn_val,
							:st_cf_pos_temp.l_buy_exctd_qty, /*** Ver 2.8 ***/
							:st_cf_pos_temp.l_sell_exctd_qty  /*** Ver 2.8 ***/
        FROM  FFP_FO_FUTURES_PSTN
        WHERE FFP_CLM_MTCH_ACCNT = :st_cf_pos.c_cln_mtch_accnt
        AND   FFP_XCHNG_CD       = :st_cf_pos.c_xchng_cd
        AND   FFP_UNDRLYNG       = :st_cf_pos.c_undrlyng
        AND   FFP_EXPRY_DT       = :st_cf_pos.c_expry_dt
        AND   FFP_PRDCT_TYP      = :st_cf_pos.c_prd_typ
        AND   ( FFP_IBUY_QTY != 0
                OR FFP_ISELL_QTY != 0
                OR FFP_OPNPSTN_QTY != 0
                OR FFP_EXBUY_QTY != 0
                OR FFP_EXSELL_QTY !=0 );
      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      {
        fn_errlog ( c_ServiceName, "S31100", SQLMSG, c_err_msg.arr );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
     else if (SQLCODE == 0)
     {

			 if (st_cf_pos.c_opnpstn_flw == 'S') /*** if loop added in Ver 2.8 ***/
			 {
					st_cf_pos.l_opnpstn_qty = st_cf_pos.l_opnpstn_qty * -1;
				  st_cf_pos.d_org_opn_val = st_cf_pos.d_org_opn_val * -1;	
			 }

        fn_userlog( c_ServiceName, "l_isell_qty :%ld: l_exsell_qty:%ld: temp.l_exsell_qty:%ld:", st_cf_pos.l_isell_qty,st_cf_pos.l_exsell_qty, st_cf_pos_temp.l_exsell_qty ); /*** Ver 2.8 ***/

       st_cf_pos.l_ibuy_qty = st_cf_pos_temp.l_ibuy_qty + st_cf_pos.l_ibuy_qty;
       st_cf_pos.d_ibuy_ord_vl = st_cf_pos_temp.d_ibuy_ord_vl + st_cf_pos.d_ibuy_ord_vl;
       st_cf_pos.l_isell_qty = st_cf_pos_temp.l_isell_qty + st_cf_pos.l_isell_qty;
       st_cf_pos.d_isell_ord_vl = st_cf_pos_temp.d_isell_ord_vl + st_cf_pos.d_isell_ord_vl;
       st_cf_pos.l_exbuy_qty = st_cf_pos_temp.l_exbuy_qty + st_cf_pos.l_exbuy_qty;
       st_cf_pos.d_exbuy_ord_vl = st_cf_pos_temp.d_exbuy_ord_vl + st_cf_pos.d_exbuy_ord_vl;
       st_cf_pos.l_exsell_qty = st_cf_pos_temp.l_exsell_qty + st_cf_pos.l_exsell_qty;
       st_cf_pos.d_exsell_ord_vl = st_cf_pos_temp.d_exsell_ord_vl + st_cf_pos.d_exsell_ord_vl;
    	 st_cf_pos.l_buy_exctd_qty = st_cf_pos_temp.l_buy_exctd_qty + st_cf_pos.l_buy_exctd_qty; /*** Ver 2.8 ***/ 
			 st_cf_pos.l_sell_exctd_qty = (st_cf_pos_temp.l_sell_exctd_qty + st_cf_pos.l_sell_exctd_qty) * -1 ; /*** Ver 2.8 ***/
	     /*** st_cf_pos.c_opnpstn_flw = st_cf_pos_temp.c_opnpstn_flw; *** Commented in Ver 2.8 ***/
       st_cf_pos.l_opnpstn_qty = st_cf_pos_temp.l_opnpstn_qty + st_cf_pos.l_opnpstn_qty; /*** st_cf_pos added in Ver 2.8 ***/
 
			 /*** Ver 2.8 starts ***/ 
       if (st_cf_pos.l_opnpstn_qty > 0)
			 {
					st_cf_pos.c_opnpstn_flw = 'B';
			 }
			 else
			 if (st_cf_pos.c_opnpstn_flw < 0)
			 {
					st_cf_pos.c_opnpstn_flw = 'S';
			 }
			 else
			 {
					st_cf_pos.c_opnpstn_flw = 'N';
			 }
			 /*** Ver 2.8 ends ***/ 
       st_cf_pos.d_org_opn_val = st_cf_pos_temp.d_org_opn_val + st_cf_pos.d_org_opn_val; /*** st_cf_pos added in Ver 2.8 ***/

      /*** Commented in Ver 2.8 ***
			if(st_cf_pos_temp.c_opnpstn_flw == 'B')
      {
       st_cf_pos.l_buy_exctd_qty  =  st_cf_pos_temp.l_opnpstn_qty;
      }
      if(st_cf_pos_temp.c_opnpstn_flw == 'S')
      {
       st_cf_pos.l_sell_exctd_qty = st_cf_pos_temp.l_opnpstn_qty;
      } ***/

       if (st_cf_pos.c_opnpstn_flw == 'S') /*** if loop added Ver 2.8 ***/
       {
          st_cf_pos.l_opnpstn_qty = st_cf_pos.l_opnpstn_qty * -1;
          st_cf_pos.d_org_opn_val = st_cf_pos.d_org_opn_val * -1;
       }

        if(DEBUG_MSG_LVL_5)
      {
        fn_userlog( c_ServiceName, "c_cln_mtch_accnt :%s:", st_cf_pos.c_cln_mtch_accnt );
        fn_userlog( c_ServiceName, "l_ibuy_qty :%ld: l_exbuy_qty :%ld:", st_cf_pos.l_ibuy_qty,st_cf_pos.l_exbuy_qty );
        fn_userlog( c_ServiceName, "d_ibuy_ord_val :%lf: d_exbuy_ord_vl:%lf:", st_cf_pos.d_ibuy_ord_vl, st_cf_pos.d_exbuy_ord_vl);
        fn_userlog( c_ServiceName, "l_isell_qty :%ld: l_exsell_qty:%ld:", st_cf_pos.l_isell_qty,st_cf_pos.l_exsell_qty );
        fn_userlog( c_ServiceName, "d_isell_ord_val :%lf: d_exsell_ord_vl:%lf:", st_cf_pos.d_isell_ord_vl,st_cf_pos.d_exsell_ord_vl );
        fn_userlog( c_ServiceName, "c_opnpstn_flw :%c:", st_cf_pos.c_opnpstn_flw );
        fn_userlog( c_ServiceName, "l_opnpstn_qty :%ld:", st_cf_pos.l_opnpstn_qty );

        fn_userlog( c_ServiceName, "TEMP ffp_ibuy_qty :%ld: l_exbuy_qty:%ld:", st_cf_pos_temp.l_ibuy_qty,st_cf_pos_temp.l_exbuy_qty );
        fn_userlog( c_ServiceName, "TEMP d_ibuy_ord_val :%lf: d_exbuy_ord_vl:%lf:", st_cf_pos_temp.d_ibuy_ord_vl, st_cf_pos_temp.d_exbuy_ord_vl );
        fn_userlog( c_ServiceName, "TEMP l_isell_qty :%ld: l_exsell_qty:%ld:", st_cf_pos_temp.l_isell_qty, st_cf_pos_temp.l_exsell_qty );
        fn_userlog( c_ServiceName, "TEMP d_isell_ord_val :%lf: d_exsell_ord_vl:%lf:", st_cf_pos_temp.d_isell_ord_vl,st_cf_pos_temp.d_exsell_ord_vl );
        fn_userlog( c_ServiceName, "TEMP c_opnpstn_flw :%c:", st_cf_pos_temp.c_opnpstn_flw );
        fn_userlog( c_ServiceName, "TEMP l_opnpstn_qty :%ld:", st_cf_pos_temp.l_opnpstn_qty );
        fn_userlog( c_ServiceName, "TEMP d_org_opn_val :%lf:", st_cf_pos_temp.d_org_opn_val );

        fn_userlog( c_ServiceName, "l_buy_exctd_qty :%ld:", st_cf_pos.l_buy_exctd_qty );
        fn_userlog( c_ServiceName, "l_sell_exctd_qty :%ld:", st_cf_pos.l_sell_exctd_qty );
      }
    }
   }
   /*** Ver 2.5 ends ***/
	
   /***********************     1.3 Changes End      *************************/	
  	/*** Ver 2.1 Starts ***/
	
    if(c_req_type == 'E' )
    {
      if( l_lst_trd_prc <= 0)
      {
        EXEC SQL
          SELECT NVL(FTQ_LST_TRD_PRC,0)
					INTO   :l_lst_trd_prc
					FROM 	 FTQ_FO_TRD_QT  
					WHERE  FTQ_XCHNG_CD  = :st_cf_pos.c_xchng_cd
					AND    FTQ_PRDCT_TYP = :st_cf_pos.c_prd_typ
					AND    FTQ_UNDRLYNG  = :st_cf_pos.c_undrlyng
					AND    FTQ_EXPRY_DT	 = :st_cf_pos.c_expry_dt
					AND    FTQ_EXER_TYP  = :st_cf_pos.c_exrc_typ
					AND    FTQ_OPT_TYP   = :st_cf_pos.c_opt_typ
					AND    FTQ_STRK_PRC  = :st_cf_pos.l_strike_prc;
      }
		
		st_cf_pos.d_ibuy_ord_vl = st_cf_pos.l_ibuy_qty * l_lst_trd_prc;
		st_cf_pos.d_isell_ord_vl = st_cf_pos.l_isell_qty * l_lst_trd_prc;
	
		/********* change for last trade price debug lvl - 0 (VQC) *********/			
			if(DEBUG_MSG_LVL_0)
			{  
				fn_userlog( c_ServiceName, "Last Traded Price  : %ld : " ,l_lst_trd_prc );
    	}
		}
	
    /*** Ver 2.1 Ends   ***/

		st_cf_pos.l_isell_qty = (-1) * st_cf_pos.l_isell_qty;
		st_cf_pos.d_isell_ord_vl = (-1.0) * st_cf_pos.d_isell_ord_vl;
		st_cf_pos.l_sell_exctd_qty = (-1) * st_cf_pos.l_sell_exctd_qty;
		if ( st_cf_pos.c_opnpstn_flw == 'S' )
		{
			st_cf_pos.l_opnpstn_qty = (-1 ) * st_cf_pos.l_opnpstn_qty;
			st_cf_pos.d_org_opn_val = (-1.0 ) * st_cf_pos.d_org_opn_val;
		}
	if(DEBUG_MSG_LVL_3)
	{
  fn_userlog( c_ServiceName, "Match account :%s:",st_cf_pos.c_cln_mtch_accnt);
  fn_userlog( c_ServiceName, "Contract details" );
  fn_userlog( c_ServiceName, "EX :%s:", st_cf_pos.c_xchng_cd );
  fn_userlog( c_ServiceName, "PRD:%c:", st_cf_pos.c_prd_typ );
  fn_userlog( c_ServiceName, "UND:%s:", st_cf_pos.c_undrlyng );
  fn_userlog( c_ServiceName, "EXP:%s:", st_cf_pos.c_expry_dt );
  fn_userlog( c_ServiceName, "Ex :%c:", st_cf_pos.c_exrc_typ );
  fn_userlog( c_ServiceName, "OP :%c:", st_cf_pos.c_opt_typ );
  fn_userlog( c_ServiceName, "SP :%ld:", st_cf_pos.l_strike_prc );
  fn_userlog( c_ServiceName, "I/S:%c:", st_cf_pos.c_ctgry_indstk );
	}

  if(c_req_type != 'S' ) /*** If condition added in Ver 2.5 ***/
  {
    st_cf_pos.l_exbuy_qty = st_cf_pos.l_ibuy_qty ;
		st_cf_pos.l_exsell_qty = st_cf_pos.l_isell_qty ;
		st_cf_pos.d_exbuy_ord_vl = st_cf_pos.d_ibuy_ord_vl ;
		st_cf_pos.d_exsell_ord_vl = st_cf_pos.d_isell_ord_vl ;
  }
		st_cf_pos.d_mtm_opn_val = st_cf_pos.d_org_opn_val ;

		if ( st_cf_pos.l_opnpstn_qty == 0 )
		{
			st_cf_pos.c_opnpstn_flw = 'N';
		}
	if(DEBUG_MSG_LVL_3)
	{
  fn_userlog( c_ServiceName, "Ibuy qty:%ld:", st_cf_pos.l_ibuy_qty );
  fn_userlog( c_ServiceName, "Ibuy ord val:%lf:", st_cf_pos.d_ibuy_ord_vl );
  fn_userlog( c_ServiceName, "buy Exec qty:%ld:", st_cf_pos.l_buy_exctd_qty );
  fn_userlog( c_ServiceName, "Values after modification" );
  fn_userlog( c_ServiceName, "M-Isell qty:%ld:", st_cf_pos.l_isell_qty );
  fn_userlog( c_ServiceName, "M-Isell ord val:%lf:", st_cf_pos.d_isell_ord_vl );
  fn_userlog( c_ServiceName, "M-sell Exec qty:%ld:", st_cf_pos.l_sell_exctd_qty );
  fn_userlog( c_ServiceName, "M-open pos flow:%c:", st_cf_pos.c_opnpstn_flw );
  fn_userlog( c_ServiceName, "M-open pos qty:%ld:", st_cf_pos.l_opnpstn_qty );
  fn_userlog( c_ServiceName, "M-open pos val:%lf:", st_cf_pos.d_org_opn_val );
	}

	/*** Ver 1.2 Started ***/
	if(st_cf_pos.c_prd_typ == 'P')
	{
    /*** Commented in Ver 1.8 ***
    EXEC SQL
      SELECT  fcm_fp_cntrct_tag
      INTO    :st_cf_pos.c_cntrct_tag
      FROM    fcm_fo_cntrct_mstr
      WHERE   fcm_xchng_cd        = :st_cf_pos.c_xchng_cd
      AND     fcm_prdct_typ       = decode(:st_cf_pos.c_prd_typ,'P','F',:st_cf_pos.c_prd_typ)
      AND     fcm_undrlyng        = :st_cf_pos.c_undrlyng
      AND     fcm_expry_dt        = to_date( :st_cf_pos.c_expry_dt,
																						'dd-mon-yyyy' )
      AND     fcm_exer_typ        = :st_cf_pos.c_exrc_typ;
    ******/
    /*** Ver 1.8 Starts ***/
    EXEC SQL
      SELECT  ftq_fp_cntrct_tag
      INTO    :st_cf_pos.c_cntrct_tag
      FROM    ftq_fo_trd_qt
      WHERE   ftq_xchng_cd        = :st_cf_pos.c_xchng_cd
      AND     ftq_prdct_typ       = decode(:st_cf_pos.c_prd_typ,'P','F',:st_cf_pos.c_prd_typ)
      AND     ftq_undrlyng        = :st_cf_pos.c_undrlyng
      AND     ftq_expry_dt        = to_date( :st_cf_pos.c_expry_dt,
                                            'dd-mon-yyyy' )
      AND     ftq_exer_typ        = :st_cf_pos.c_exrc_typ;

    /*** Ver 1.8 Ends   ***/

    if ( SQLCODE != 0 )
    {
      /*** Ver 2.3 Started ***/
      if( SQLCODE == NO_DATA_FOUND )
      {
        fn_errlog ( c_ServiceName, "B28510",DEFMSG, c_err_msg.arr);		/*** Datatype is converted to Varchar in (VQC) ***/	
      }
      else
      {
      /*** Ver 2.3 Ends ***/
      fn_errlog ( c_ServiceName, "S31105", SQLMSG, c_err_msg.arr );				/*** Datatype is converted to Varchar in (VQC) ***/
			}
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );              /*** Datatype is converted to Varchar in (VQC) ***/
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );				    /*** Datatype is converted to Varchar in (VQC) ***/	
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
   
   if(DEBUG_MSG_LVL_3) /*** ver 1.9 ***/
   {
   		fn_userlog(c_ServiceName,"Trade Quote FP Contract Tag :%c:" , st_cf_pos.c_cntrct_tag);
   }

	}
	else
	{
     /*** Commented in Ver 1.8 ***
		 EXEC SQL
      SELECT  fcm_cntrct_tag
      INTO    :st_cf_pos.c_cntrct_tag
      FROM    fcm_fo_cntrct_mstr
      WHERE   fcm_xchng_cd        = :st_cf_pos.c_xchng_cd
      AND     fcm_prdct_typ       = :st_cf_pos.c_prd_typ
      AND     fcm_undrlyng        = :st_cf_pos.c_undrlyng
      AND     fcm_expry_dt        = to_date( :st_cf_pos.c_expry_dt,
                                            'dd-mon-yyyy' )
      AND     fcm_exer_typ        = :st_cf_pos.c_exrc_typ;

       ******/
      /*** Ver 1.8 Starts ***/
	
	if( c_req_type != 'E' )				/*** Added in Ver 1.9 ***/
	{
		  EXEC SQL
		  SELECT  ftq_cntrct_tag
		  INTO    :st_cf_pos.c_cntrct_tag
		  FROM    ftq_fo_trd_qt
		  WHERE   ftq_xchng_cd        = :st_cf_pos.c_xchng_cd
		  AND     ftq_prdct_typ       = :st_cf_pos.c_prd_typ
		  AND     ftq_undrlyng        = :st_cf_pos.c_undrlyng
		  AND     ftq_expry_dt        = to_date( :st_cf_pos.c_expry_dt,
												'dd-mon-yyyy' )
		  AND     ftq_exer_typ        = :st_cf_pos.c_exrc_typ;

		  /*** Ver 1.8 Ends   ***/

		if ( SQLCODE != 0 )
		{
      /*** Ver 2.3 Started ***/
      if( SQLCODE == NO_DATA_FOUND )
      {
        fn_errlog ( c_ServiceName, "B28510",DEFMSG, c_err_msg.arr);			/*** Datatype is converted to Varchar in (VQC) ***/	
      }
      else
      {
      /*** Ver 2.3 Ends ***/
		  fn_errlog ( c_ServiceName, "S31110", SQLMSG, c_err_msg.arr );			/*** Datatype is converted to Varchar in (VQC) ***/	
			}
		  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );						/*** Datatype is converted to Varchar in (VQC) ***/
		  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );					/*** Datatype is converted to Varchar in (VQC) ***/	
		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		 
	   if(DEBUG_MSG_LVL_3)
	   {
			fn_userlog(c_ServiceName,"Trade Quote Contract Tag :%c:" , st_cf_pos.c_cntrct_tag);
	   } 
    }
   	if( c_req_type == 'E' )				/*** Added in Ver 1.9 ***/
	{
		  EXEC SQL
		  SELECT  ftq_cntrct_tag
		  INTO    :st_cf_pos.c_cntrct_tag
		  FROM    ftq_fo_trd_qt
		  WHERE   ftq_xchng_cd        = :st_cf_pos.c_xchng_cd
		  AND     ftq_prdct_typ       = 'F'
		  AND     ftq_undrlyng        = :st_cf_pos.c_undrlyng
		  AND     ftq_expry_dt        = to_date( :st_cf_pos.c_expry_dt,
												'dd-mon-yyyy' )
		  AND     ftq_exer_typ        = :st_cf_pos.c_exrc_typ;

		  /*** Ver 1.8 Ends   ***/

		if ( SQLCODE != 0 )
		{
		  fn_errlog ( c_ServiceName, "S31115", SQLMSG, c_err_msg.arr );		/*** Datatype is converted to Varchar in (VQC) ***/
		  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );					/*** Datatype is converted to Varchar in (VQC) ***/		
		  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );			  /*** Datatype is converted to Varchar in (VQC) ***/
		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		
		if(DEBUG_MSG_LVL_3)
   		{ 
			fn_userlog(c_ServiceName,"Trade Quote Contract Tag :%c:" , st_cf_pos.c_cntrct_tag);
		}
    }
  
  }

	/*** Ver 1.2 Ended ***/

	/*** Commented in Ver 1.9 Starts ***/
    /*EXEC SQL
			INSERT INTO ffp_fo_futures_pstn_gbt
			(
  			ffp_clm_mtch_accnt,
  			ffp_xchng_cd,
  			ffp_prdct_typ,
  			ffp_indstk,
  			ffp_undrlyng,
  			ffp_expry_dt,
  			ffp_exer_typ,
  			ffp_cntrct_tag,
  			ffp_ibuy_qty,
  			ffp_ibuy_ord_val,
  			ffp_isell_qty,
  			ffp_isell_ord_val,
  			ffp_exbuy_qty,
  			ffp_exbuy_ord_val,
  			ffp_exsell_qty,
  			ffp_exsell_ord_val,
  			ffp_buy_exctd_qty,
  			ffp_sell_exctd_qty,
  			ffp_opnpstn_flw,
  			ffp_opnpstn_qty,
  			ffp_opnpstn_val,
  			ffp_mtm_opn_val
			)
			VALUES
			(
  			:st_cf_pos.c_cln_mtch_accnt,
  			:st_cf_pos.c_xchng_cd,
  			:st_cf_pos.c_prd_typ,
  			:st_cf_pos.c_ctgry_indstk,
  			:st_cf_pos.c_undrlyng,
  			to_date(:st_cf_pos.c_expry_dt,'DD-Mon-YYYY'),
  			:st_cf_pos.c_exrc_typ,
  			:st_cf_pos.c_cntrct_tag,
  			:st_cf_pos.l_ibuy_qty,
  			:st_cf_pos.d_ibuy_ord_vl,
  			:st_cf_pos.l_isell_qty,
  			:st_cf_pos.d_isell_ord_vl,
  			:st_cf_pos.l_exbuy_qty,
  			:st_cf_pos.d_exbuy_ord_vl,
  			:st_cf_pos.l_exsell_qty,
  			:st_cf_pos.d_exsell_ord_vl,
  			:st_cf_pos.l_buy_exctd_qty,
  			:st_cf_pos.l_sell_exctd_qty,
  			:st_cf_pos.c_opnpstn_flw,
  			:st_cf_pos.l_opnpstn_qty,
  			:st_cf_pos.d_org_opn_val,
  			:st_cf_pos.d_mtm_opn_val
			);

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31120", SQLMSG, c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	}*/ /* while */

  /*EXEC SQL
    DECLARE sql_ut_cur CURSOR FOR
		SELECT DISTINCT ffp_clm_mtch_accnt,
                    ffp_xchng_cd,
                    ffp_undrlyng,
                    ffp_prdct_typ,
                    ffp_indstk,
                    ffp_cntrct_tag
		FROM ffp_fo_futures_pstn_gbt;

  EXEC SQL
    OPEN sql_ut_cur;
  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31125", LIBMSG, c_err_msg ); 
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }

	d_ord_mrgn_amt = 0;
	d_trd_mrgn_amt = 0;

  while (1)
  {
    EXEC SQL
      FETCH sql_ut_cur
			INTO 	:c_cln_mtch_accnt,
          	:c_xchng_cd,
          	:c_ip_undrlying,
          	:c_prd_typ,
          	:c_ctgry_indstk,
          	:c_ip_tag;

    if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "S31130", SQLMSG, c_err_msg );
      EXEC SQL CLOSE sql_ut_cur;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );      
      tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );      
    }

    if( SQLCODE == NO_DATA_FOUND )
    {
      break;
    }

		i_returncode =	fn_cal_mrgn ( c_ServiceName,
                        			  	c_err_msg ,   
																	c_cln_mtch_accnt ,
                        					c_xchng_cd,
                        					c_ip_undrlying,
                        					c_prd_typ,
                        					c_ctgry_indstk,
                        					c_ip_tag,
                        					&d_ord_amt_blkd,
                        					&d_pstn_amt_blkd );
		if ( i_returncode != 0 )
		{
      fn_errlog( c_ServiceName, "S31135", LIBMSG, c_err_msg );
      EXEC SQL CLOSE sql_ut_cur;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}

		d_ord_mrgn_amt = d_ord_mrgn_amt + d_ord_amt_blkd;
		d_trd_mrgn_amt = d_trd_mrgn_amt + d_pstn_amt_blkd;
  }

  EXEC SQL
    CLOSE sql_ut_cur;

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "S31140",LIBMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char * )ptr_fml_Ibuf, 0, 0 );
  }

  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31145", TPMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }*/

  /*****  Added 3 parameters in o/p for  Ver 1.3    ******/

  /*if(st_cf_pos.c_opnpstn_flw == 'S' && c_flg == 'Y') *//** Ver 1.3 for display negative cannot be displayed hence qty*-1 **/
  /*{
    st_cf_pos.l_opnpstn_qty = (-1) * st_cf_pos.l_opnpstn_qty;
  }  
  
  i_returncode = fn_pack_vartofml ( c_ServiceName,
                                    c_err_msg,
                                    &ptr_fml_Obuf,
                                    5,
                                    FFO_U_ORDR_MRGN, (char *)&d_ord_mrgn_amt,
                                    FFO_U_TRD_MRGN, (char *)&d_trd_mrgn_amt,
																	  FFO_C_OPNPSTN_QTY, (char *)&st_cf_pos.l_opnpstn_qty,*/  /** Ver 1.3 **/
							                      /*FFO_C_OPNPSTN_FLW, (char *)&st_cf_pos.c_opnpstn_flw,*/  /** Ver 1.3 **/
																    /*FFO_C_ORG_OPN_VAL, (char *)&d_lst_trd_prc */  /** Ver 1.3 **/
                                  /*);*/

	/*if ( i_returncode != 0 )
	{
    fn_errlog( c_ServiceName, "S31150", LIBMSG, c_err_msg );
		tpfree ( ( char * ) ptr_fml_Obuf );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}*/

	/*** Commented in Ver 1.9 Ends ***/

	/*** Ver 2.2 Starts ***/

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"st_cf_pos.c_xchng_cd is :%s:",st_cf_pos.c_xchng_cd);
      fn_userlog(c_ServiceName,"st_cf_pos.c_prd_typ is :%c:",st_cf_pos.c_prd_typ);
      fn_userlog(c_ServiceName,"c_tmp_prdct_typ s :%c:",c_tmp_prdct_typ);
      fn_userlog(c_ServiceName,"st_cf_pos.c_undrlyng is :%s:",st_cf_pos.c_undrlyng);
    }

    EXEC SQL
    SELECT NVL(FUM_QT_TRDNG_FLG,'N'),
           NVL(FUM_FP_TRDNG_FLG,'N'),
           NVL(FUM_SLTP_FP_TRDNG_FLG,'N')
    INTO   :c_fum_qt_trdng_flg,
           :c_fum_fp_trdng_flg,
           :c_fum_sltp_fp_trdng_flg
    FROM   FUM_FO_UNDRLYNG_MSTR
    WHERE  FUM_XCHNG_CD  = :st_cf_pos.c_xchng_cd
    AND    FUM_PRDCT_TYP = :c_tmp_prdct_typ
    AND    FUM_UNDRLYNG  = :st_cf_pos.c_undrlyng;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31155", SQLMSG, c_err_msg.arr );  /*** Datatype is converted to Varchar in (VQC) ***/ 
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );         /*** Datatype is converted to Varchar in (VQC) ***/
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );       /*** Datatype is converted to Varchar in (VQC) ***/ 
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"c_fum_qt_trdng_flg is :%c:", c_fum_qt_trdng_flg);
      fn_userlog(c_ServiceName,"c_fum_fp_trdng_flg is :%c:",c_fum_fp_trdng_flg);
      fn_userlog(c_ServiceName,"c_fum_sltp_fp_trdng_flg is :%c:",c_fum_sltp_fp_trdng_flg);
    }

  /*** Ver 2.2 Ends ***/

	/*** Ver 1.9 Starts ***/
	if( c_req_type == 'E' )
	{
	 if ( c_fum_qt_trdng_flg == 'T' )   /*** Added in Ver 2.2 ***/
	 {
		st_cf_pos.c_prd_typ = 'F';
	  i_returncode = fn_insert_records( c_ServiceName,
                        			   c_err_msg.arr, /*** Datatype is converted to Varchar in (VQC) ***/
									               &st_cf_pos);
		if ( i_returncode != 0 )
		{
			fn_errlog( c_ServiceName, "S31160", LIBMSG, c_err_msg.arr );    /*** Datatype is converted to Varchar in (VQC) ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );          /*** Datatype is converted to Varchar in (VQC) ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );        /*** Datatype is converted to Varchar in (VQC) ***/ 
			tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}
	 }

	 if ( c_fum_fp_trdng_flg == 'T' )   /*** Added in Ver 2.2 ***/
	 {
	    st_cf_pos.c_prd_typ = 'P';
	   i_returncode =	fn_insert_records( c_ServiceName,
                        			       c_err_msg.arr,  /*** Datatype is converted to Varchar in (VQC) ***/
					                 				   &st_cf_pos);
		if ( i_returncode != 0 )
		{
			fn_errlog( c_ServiceName, "S31165", LIBMSG, c_err_msg.arr );   /*** Datatype is converted to Varchar in (VQC) ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );         /*** Datatype is converted to Varchar in (VQC) ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );       /*** Datatype is converted to Varchar in (VQC) ***/
			tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}
	 }

	 if ( c_fum_sltp_fp_trdng_flg == 'T' )   /*** Added in Ver 2.2 ***/
	 {
		st_cf_pos.c_prd_typ = 'U';
	   i_returncode =	fn_insert_records( c_ServiceName,
                        			       c_err_msg.arr,  /*** Datatype is converted to Varchar in (VQC) ***/
									                   &st_cf_pos);
		if ( i_returncode != 0 )
		{
			fn_errlog( c_ServiceName, "S31170", LIBMSG, c_err_msg.arr );    /*** Datatype is converted to Varchar in (VQC) ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );          /*** Datatype is converted to Varchar in (VQC) ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );        /*** Datatype is converted to Varchar in (VQC) ***/
			tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}
	 }

	}
	else
	{
		i_returncode =	fn_insert_records( c_ServiceName,
                            			   c_err_msg.arr , /*** Datatype is converted to Varchar in (VQC) ***/
		             			     				   &st_cf_pos);
		if ( i_returncode != 0 )
		{
			fn_errlog( c_ServiceName, "S31175", LIBMSG, c_err_msg.arr );    /*** Datatype is converted to Varchar in (VQC) ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );          /*** Datatype is converted to Varchar in (VQC) ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );        /*** Datatype is converted to Varchar in (VQC) ***/
			tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}
	}
  } /* while */

  if( c_req_type == 'E' )
  {
	 st_cf_pos.c_prd_typ = 'F';

	 if ( c_fum_qt_trdng_flg == 'T' )		/*** Added in Ver 2.2 ***/
	 {
	 i_returncode = fn_process_records (c_ServiceName,
					  c_err_msg.arr ,  /*** Datatype is converted to Varchar in (VQC) ***/ 
					  st_cf_pos.c_cln_mtch_accnt,
					  st_cf_pos.c_xchng_cd,
					  st_cf_pos.c_undrlyng,
					  st_cf_pos.c_prd_typ,
					  st_cf_pos.c_ctgry_indstk,
					  st_cf_pos.c_cntrct_tag,
					  &d_ord_mrgn_amt,
					  &d_trd_mrgn_amt);
		if ( i_returncode != 0 )
		{
			fn_errlog( c_ServiceName, "S31180", LIBMSG, c_err_msg.arr );     /*** Datatype is converted to Varchar in (VQC) ***/ 
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );           /*** Datatype is converted to Varchar in (VQC) ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );         /*** Datatype is converted to Varchar in (VQC) ***/ 
			tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}

     d_fut_ord_mrgn_amt = d_ord_mrgn_amt;
	 }
	 else
	 {
		 d_fut_ord_mrgn_amt = -1.0 ;		/*** Added in Ver 2.2 ***/
	 }

	if ( c_fum_fp_trdng_flg == 'T' )   /*** Added in Ver 2.2 ***/
	{
	st_cf_pos.c_prd_typ = 'P';

	if(DEBUG_MSG_LVL_3)
   	{
		fn_userlog ( c_ServiceName, "B4 fn_process_records c_prd_typ : %c", st_cf_pos.c_prd_typ );
	}
	 i_returncode = fn_process_records (c_ServiceName,
					  c_err_msg.arr,   /*** Datatype is converted to Varchar in (VQC) ***/
					  st_cf_pos.c_cln_mtch_accnt,
					  st_cf_pos.c_xchng_cd,
					  st_cf_pos.c_undrlyng,
					  st_cf_pos.c_prd_typ,
					  st_cf_pos.c_ctgry_indstk,
					  st_cf_pos.c_cntrct_tag,
					  &d_ord_mrgn_amt,
					  &d_trd_mrgn_amt);
		if ( i_returncode != 0 )
		{
			fn_errlog( c_ServiceName, "S31185", LIBMSG, c_err_msg.arr );      /*** Datatype is converted to Varchar in (VQC) ***/ 
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );            /*** Datatype is converted to Varchar in (VQC) ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );          /*** Datatype is converted to Varchar in (VQC) ***/ 
			tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}

	  d_fut_plus_ord_mrgn_amt = d_ord_mrgn_amt;

	 }
	 else
	 {
		d_fut_plus_ord_mrgn_amt = -1.0 ;		/*** Added in Ver 2.2 ***/
	 }

	  /**Code for SLTPFP**/
	 if ( c_fum_sltp_fp_trdng_flg == 'T' )   /*** Added in Ver 2.2 ***/
	 {
	  st_cf_pos.c_prd_typ = 'U';

	  if(DEBUG_MSG_LVL_3)
   	  {
	  	fn_userlog ( c_ServiceName, "B4 fn_process_records c_prd_typ : %c", st_cf_pos.c_prd_typ );
	  }
	  
	  i_returncode = fn_mrgncal_sltp (c_ServiceName,
					  c_err_msg.arr ,  /*** Datatype is converted to Varchar in (VQC) ***/ 
					  &st_cf_pos,
					  &l_lst_trd_prc,
					  &d_ord_mrgn_amt
					  );
		if ( i_returncode != 0 )
		{
			fn_errlog( c_ServiceName, "S31190", LIBMSG, c_err_msg.arr );     /*** Datatype is converted to Varchar in (VQC) ***/ 
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );           /*** Datatype is converted to Varchar in (VQC) ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );         /*** Datatype is converted to Varchar in (VQC) ***/
			tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}

	  d_fut_plus_sltp_ord_mrgn_amt = d_ord_mrgn_amt;
	 }
	 else
	 {
		d_fut_plus_sltp_ord_mrgn_amt = -1.0 ;		/*** Added in Ver 2.2 ***/
	 }

	if (fn_committran(c_ServiceName, i_trnsctn, c_err_msg.arr) == -1)   /*** Datatype is converted to Varchar in (VQC) ***/ 
	{
		fn_errlog(c_ServiceName, "S31195", LIBMSG, c_err_msg.arr);        /*** Datatype is converted to Varchar in (VQC) ***/
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);              /*** Datatype is converted to Varchar in (VQC) ***/
		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg.arr);            /*** Datatype is converted to Varchar in (VQC) ***/
		tpreturn(TPFAIL, ERR_BFR, (char *) ptr_fml_Ibuf, 0, 0);
	}

	  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

	  if ( ptr_fml_Obuf == NULL )
	  {
			fn_errlog(c_ServiceName, "S31200", TPMSG, c_err_msg.arr);       /*** Datatype is converted to Varchar in (VQC) ***/
			Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);            /*** Datatype is converted to Varchar in (VQC) ***/
			tpreturn(TPFAIL, ERR_BFR, (char *) ptr_fml_Ibuf, 0, 0);        
		}

	  if(st_cf_pos.c_opnpstn_flw == 'S' && c_flg == 'Y') /** Ver 1.3 for display negative cannot be displayed hence qty*-1 **/
	  {
		st_cf_pos.l_opnpstn_qty = (-1) * st_cf_pos.l_opnpstn_qty;
	  }  

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "d_fut_ord_mrgn_amt : %lf ", d_fut_ord_mrgn_amt);
		fn_userlog ( c_ServiceName, "d_fut_plus_ord_mrgn_amt : %lf ", d_fut_plus_ord_mrgn_amt);
		fn_userlog(c_ServiceName,"d_fut_plus_sltp_ord_mrgn_amt : %lf:",d_fut_plus_sltp_ord_mrgn_amt);						
	}

	  i_returncode = fn_pack_vartofml ( c_ServiceName,
										c_err_msg.arr , /*** Datatype is converted to Varchar in(VQC) ***/
										&ptr_fml_Obuf,
										6,
										FFO_U_ORDR_MRGN, (char *)&d_fut_ord_mrgn_amt,
										FFO_U_TRD_MRGN, (char *)&d_fut_plus_ord_mrgn_amt,
										FFO_C_ORDR_MRGN, (char *)&d_fut_plus_sltp_ord_mrgn_amt,
										FFO_C_OPNPSTN_QTY, (char *)&st_cf_pos.l_opnpstn_qty,  /** Ver 1.3 **/
										FFO_C_OPNPSTN_FLW, (char *)&st_cf_pos.c_opnpstn_flw,  /** Ver 1.3 **/
										FFO_C_ORG_OPN_VAL, (char *)&d_lst_trd_prc   /** Ver 1.3 **/
									  );

	  if ( i_returncode != 0 )
	  {
		fn_errlog( c_ServiceName, "S31205", LIBMSG, c_err_msg.arr );      /*** Datatype is converted to Varchar in (VQC) ***/
		tpfree ( ( char * ) ptr_fml_Obuf );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );            /*** Datatype is converted to Varchar in (VQC) ***/
		tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	  }
  }
  else
  {

    /*** Ver 2.5 starts ***/
    if (c_req_type == 'S')
    {
		
			if( DEBUG_MSG_LVL_3 ) 
			{
	      fn_userlog ( c_ServiceName, "Insert Spread order/position if any");
			}

      EXEC SQL
      INSERT INTO FFP_FO_FUTURES_PSTN_GBT
      (
        FFP_CLM_MTCH_ACCNT,
        FFP_XCHNG_CD,
        FFP_PRDCT_TYP,
        FFP_INDSTK,
        FFP_UNDRLYNG,
        FFP_EXPRY_DT,
        FFP_EXER_TYP,
        FFP_CNTRCT_TAG,
        FFP_IBUY_QTY,
        FFP_IBUY_ORD_VAL,
        FFP_ISELL_QTY,
        FFP_ISELL_ORD_VAL,
        FFP_EXBUY_QTY,
        FFP_EXBUY_ORD_VAL,
        FFP_EXSELL_QTY,
        FFP_EXSELL_ORD_VAL,
        FFP_BUY_EXCTD_QTY,
        FFP_SELL_EXCTD_QTY,
        FFP_OPNPSTN_FLW,
        FFP_OPNPSTN_QTY,
        FFP_OPNPSTN_VAL,
        FFP_MTM_OPN_VAL
      )
      (
        SELECT
        B.FFP_CLM_MTCH_ACCNT,
        B.FFP_XCHNG_CD,
        B.FFP_PRDCT_TYP,
        B.FFP_INDSTK,
        B.FFP_UNDRLYNG,
        B.FFP_EXPRY_DT,
        B.FFP_EXER_TYP,
        B.FFP_CNTRCT_TAG,
        B.FFP_IBUY_QTY,
        B.FFP_IBUY_ORD_VAL,
        B.FFP_ISELL_QTY,
        B.FFP_ISELL_ORD_VAL,
        B.FFP_EXBUY_QTY,
        B.FFP_EXBUY_ORD_VAL,
        B.FFP_EXSELL_QTY,
        B.FFP_EXSELL_ORD_VAL,
        B.FFP_BUY_EXCTD_QTY,
        B.FFP_SELL_EXCTD_QTY,
        B.FFP_OPNPSTN_FLW,
        B.FFP_OPNPSTN_QTY,
        B.FFP_OPNPSTN_VAL,
        B.FFP_MTM_OPN_VAL
        FROM    FFP_FO_FUTURES_PSTN_GBT A ,FFP_FO_FUTURES_PSTN B
        WHERE   B.FFP_CLM_MTCH_ACCNT = :st_cf_pos.c_cln_mtch_accnt
        AND     A.FFP_CLM_MTCH_ACCNT = B.FFP_CLM_MTCH_ACCNT
        AND     A.FFP_XCHNG_CD= B.FFP_XCHNG_CD
        AND     TRIM(A.FFP_UNDRLYNG)= TRIM(B.FFP_UNDRLYNG)
        AND     A.FFP_PRDCT_TYP= B.FFP_PRDCT_TYP
        AND     A.FFP_INDSTK= B.FFP_INDSTK
        AND     A.FFP_CNTRCT_TAG= B.FFP_CNTRCT_TAG
        AND     B.FFP_EXPRY_DT  NOT IN (SELECT DISTINCT FFP_EXPRY_DT FROM FFP_FO_FUTURES_PSTN_GBT) 
				);

       fn_userlog(c_ServiceName,"No of orws inserted in FFP_FO_FUTURES_PSTN_GBT :%d:",sqlca.sqlerrd[2]);

       if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
        {
          fn_errlog ( c_ServiceName, "S31210", SQLMSG, c_err_msg.arr );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
    }
    /*** Ver 2.5 ends ***/

     i_returncode = fn_process_records (c_ServiceName,
					  c_err_msg.arr,       /*** Datatype is converted to Varchar in (VQC) ***/ 
					  st_cf_pos.c_cln_mtch_accnt,
					  st_cf_pos.c_xchng_cd,
					  st_cf_pos.c_undrlyng,
					  st_cf_pos.c_prd_typ,
					  st_cf_pos.c_ctgry_indstk,
					  st_cf_pos.c_cntrct_tag,
					  &d_ord_mrgn_amt,
					  &d_trd_mrgn_amt);
		if ( i_returncode != 0 )
		{
			fn_errlog( c_ServiceName, "S31215", LIBMSG, c_err_msg.arr );     /*** Datatype is converted to Varchar in (VQC) ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );           /*** Datatype is converted to Varchar in (VQC) ***/
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );         /*** Datatype is converted to Varchar in (VQC) ***/
			tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}

  /*** Ver 2.5 starts ***/
  if (c_req_type == 'S')
  {
		if( DEBUG_MSG_LVL_5 ) 
		{
			fn_userlog ( c_ServiceName, "debug 1 for testing");
			fn_userlog ( c_ServiceName, "d_ord_mrgn_amt :%lf: ", d_ord_mrgn_amt);
			fn_userlog ( c_ServiceName, "d_trd_mrgn_amt :%lf", d_trd_mrgn_amt);
			fn_userlog ( c_ServiceName, "d_blkd_ordr_mrgn :%lf", d_blkd_ordr_mrgn);
			fn_userlog ( c_ServiceName, "d_blkd_trd_mrgn :%lf", d_blkd_trd_mrgn);
			fn_userlog ( c_ServiceName, "st_cf_pos.l_opnpstn_qty :%ld", st_cf_pos.l_opnpstn_qty);
			fn_userlog ( c_ServiceName, "st_cf_pos.c_opnpstn_flw :%c:", st_cf_pos.c_opnpstn_flw);
			fn_userlog ( c_ServiceName, "d_lst_trd_prc :%lf: ", d_lst_trd_prc);
		}
      EXEC SQL
      SELECT  NVL(sum(FUP_UORDR_MRGN),0),
              NVL(sum(FUP_UTRD_MRGN),0)
      INTO    :d_blkd_ordr_mrgn,
              :d_blkd_trd_mrgn
       FROM   FUP_FUT_UNDRLYNG_PSTN
       WHERE  FUP_CLM_MTCH_ACCNT = :st_cf_pos.c_cln_mtch_accnt
       AND    FUP_XCHNG_CD       = :st_cf_pos.c_xchng_cd
       AND    FUP_UNDRLYNG       = :st_cf_pos.c_undrlyng
       AND    FUP_PRDCT_TYP      = :st_cf_pos.c_prd_typ
       AND    FUP_CNTRCT_TAG     IN (SELECT DISTINCT FFP_CNTRCT_TAG FROM FFP_FO_FUTURES_PSTN_GBT) ;

      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
      {
        fn_errlog ( c_ServiceName, "S31220", SQLMSG, c_err_msg.arr );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
  }
  /*** Ver 2.5 ends ***/

	if (fn_committran(c_ServiceName, i_trnsctn, c_err_msg.arr) == -1) 
	{
		fn_errlog(c_ServiceName, "S31225", LIBMSG, c_err_msg.arr);          /*** Datatype is converted to Varchar in (VQC) ***/ 
		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);                /*** Datatype is converted to Varchar in (VQC) ***/ 
		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg.arr);              /*** Datatype is converted to Varchar in (VQC) ***/
		tpreturn(TPFAIL, ERR_BFR, (char *) ptr_fml_Ibuf, 0, 0);
	}

	  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

	  if ( ptr_fml_Obuf == NULL )
	  {
			fn_errlog(c_ServiceName, "S31230", TPMSG, c_err_msg.arr);         /*** Datatype is converted to Varchar in (VQC) ***/
			Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);              /*** Datatype is converted to Varchar in (VQC) ***/
			tpreturn(TPFAIL, ERR_BFR, (char *) ptr_fml_Ibuf, 0, 0);
	  }

	  if(st_cf_pos.c_opnpstn_flw == 'S' && c_flg == 'Y') /** Ver 1.3 for display negative cannot be displayed hence qty*-1 **/
	  {
		st_cf_pos.l_opnpstn_qty = (-1) * st_cf_pos.l_opnpstn_qty;
	  }  

  if(DEBUG_MSG_LVL_3) /*** Ver 2.5 ***/
  {
    fn_userlog ( c_ServiceName, "d_ord_mrgn_amt :%lf: ", d_ord_mrgn_amt);
    fn_userlog ( c_ServiceName, "d_trd_mrgn_amt :%lf", d_trd_mrgn_amt);
    fn_userlog ( c_ServiceName, "d_blkd_ordr_mrgn :%lf", d_blkd_ordr_mrgn);
    fn_userlog ( c_ServiceName, "d_blkd_trd_mrgn :%lf", d_blkd_trd_mrgn);
    fn_userlog ( c_ServiceName, "st_cf_pos.l_opnpstn_qty :%ld", st_cf_pos.l_opnpstn_qty);
    fn_userlog ( c_ServiceName, "st_cf_pos.c_opnpstn_flw :%c:", st_cf_pos.c_opnpstn_flw);
    fn_userlog ( c_ServiceName, "d_lst_trd_prc :%lf: ", d_lst_trd_prc);
  }

	  i_returncode = fn_pack_vartofml ( c_ServiceName,
										c_err_msg.arr,          /*** Datatype is converted to Varchar in (VQC) ***/
										&ptr_fml_Obuf,
										7,		/*** changed from 5 to 7 in Ver 2.5 ***/
										FFO_U_ORDR_MRGN, (char *)&d_ord_mrgn_amt,
										FFO_U_TRD_MRGN, (char *)&d_trd_mrgn_amt,
										FFO_C_OPNPSTN_QTY, (char *)&st_cf_pos.l_opnpstn_qty,  /** Ver 1.3 **/
										FFO_C_OPNPSTN_FLW, (char *)&st_cf_pos.c_opnpstn_flw,  /** Ver 1.3 **/
										FFO_C_ORG_OPN_VAL, (char *)&d_lst_trd_prc,   /** Ver 1.3 **/
                    FFO_ORD_AMT_BLKD,(char *)&d_blkd_ordr_mrgn, /*** Ver 2.5 ***/
                    FFO_C_BLKD_TRD_MRGN,(char *)&d_blkd_trd_mrgn  /*** Ver 2.5 ***/ 
                    );

	  if ( i_returncode != 0 )
	  {
		fn_errlog( c_ServiceName, "S31235", LIBMSG, c_err_msg.arr );        /*** Datatype is converted to Varchar in (VQC) ***/
		tpfree ( ( char * ) ptr_fml_Obuf );  
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );              /*** Datatype is converted to Varchar in (VQC) ***/
		tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	  }
  }
	/*** Ver 1.9 Ends ***/

  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
}


/***Added in Ver 1.9 Starts ***/
int fn_insert_records ( char *c_ServiceName,
                  char *c_err_msg,
				  struct vw_cntfut_pos *ptr_st_undfut_pos )
{
    EXEC SQL
			INSERT INTO ffp_fo_futures_pstn_gbt
			(
  			ffp_clm_mtch_accnt,
  			ffp_xchng_cd,
  			ffp_prdct_typ,
  			ffp_indstk,
  			ffp_undrlyng,
  			ffp_expry_dt,
  			ffp_exer_typ,
  			ffp_cntrct_tag,
  			ffp_ibuy_qty,
  			ffp_ibuy_ord_val,
  			ffp_isell_qty,
  			ffp_isell_ord_val,
  			ffp_exbuy_qty,
  			ffp_exbuy_ord_val,
  			ffp_exsell_qty,
  			ffp_exsell_ord_val,
  			ffp_buy_exctd_qty,
  			ffp_sell_exctd_qty,
  			ffp_opnpstn_flw,
  			ffp_opnpstn_qty,
  			ffp_opnpstn_val,
  			ffp_mtm_opn_val
			)
			VALUES
			(
  			:ptr_st_undfut_pos->c_cln_mtch_accnt,
  			:ptr_st_undfut_pos->c_xchng_cd,
  			:ptr_st_undfut_pos->c_prd_typ,
  			:ptr_st_undfut_pos->c_ctgry_indstk,
  			:ptr_st_undfut_pos->c_undrlyng,
  			to_date(:ptr_st_undfut_pos->c_expry_dt,'DD-Mon-YYYY'),
  			:ptr_st_undfut_pos->c_exrc_typ,
  			:ptr_st_undfut_pos->c_cntrct_tag,
  			:ptr_st_undfut_pos->l_ibuy_qty,
  			:ptr_st_undfut_pos->d_ibuy_ord_vl,
  			:ptr_st_undfut_pos->l_isell_qty,
  			:ptr_st_undfut_pos->d_isell_ord_vl,
  			:ptr_st_undfut_pos->l_exbuy_qty,
  			:ptr_st_undfut_pos->d_exbuy_ord_vl,
  			:ptr_st_undfut_pos->l_exsell_qty,
  			:ptr_st_undfut_pos->d_exsell_ord_vl,
  			:ptr_st_undfut_pos->l_buy_exctd_qty,
  			:ptr_st_undfut_pos->l_sell_exctd_qty,
  			:ptr_st_undfut_pos->c_opnpstn_flw,
  			:ptr_st_undfut_pos->l_opnpstn_qty,
  			:ptr_st_undfut_pos->d_org_opn_val,
  			:ptr_st_undfut_pos->d_mtm_opn_val
			);

    if ( SQLCODE != 0 )
    {
		fn_errlog ( c_ServiceName, "S31240", SQLMSG, c_err_msg );
		return FAILURE;
    }

	return SUCCESS;
}

int fn_process_records ( char *c_ServiceName,
                  char *c_err_msg,
				  char *c_cln_mtch_accnt,
                  char *c_xchng_cd,
                  char *c_undrlyng,
                  char c_prd_typ,
                  char c_ctgry_indstk,
                  char c_cntrct_tag,
				  double *ptr_d_ord_mrgn_amt,
                  double *ptr_d_trd_mrgn_amt)
{
	int i_returncode;
	double d_ord_mrgn_amt;
	double d_trd_mrgn_amt;
	double d_ord_amt_blkd;
    double d_pstn_amt_blkd;
    int i_trnsctn;

	 EXEC SQL
    DECLARE sql_ut_cur CURSOR FOR
		SELECT DISTINCT ffp_clm_mtch_accnt,
                    ffp_xchng_cd,
                    ffp_undrlyng,
                    ffp_prdct_typ,
                    ffp_indstk,
                    ffp_cntrct_tag
		FROM ffp_fo_futures_pstn_gbt
		WHERE FFP_PRDCT_TYP = :c_prd_typ;

  EXEC SQL
    OPEN sql_ut_cur;
  if( SQLCODE != 0 )
  {
	fn_errlog ( c_ServiceName, "S31245", SQLMSG, c_err_msg );
	return FAILURE;
  }

	d_ord_mrgn_amt = 0;
	d_trd_mrgn_amt = 0;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "inside fn_process_records c_prd_typ : %c", c_prd_typ );
	}

  while (1)
  {
    EXEC SQL
      FETCH sql_ut_cur
			INTO 	:c_cln_mtch_accnt,
          	:c_xchng_cd,
          	:c_undrlyng,
          	:c_prd_typ,
          	:c_ctgry_indstk,
          	:c_cntrct_tag;

    if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
		fn_errlog ( c_ServiceName, "S31250", SQLMSG, c_err_msg );	
		return FAILURE;
    }

    if( SQLCODE == NO_DATA_FOUND )
    {
      break;
    }

		i_returncode =	fn_cal_mrgn ( c_ServiceName,
                        					c_err_msg,
											c_cln_mtch_accnt ,
                        					c_xchng_cd,
                        					c_undrlyng,
                        					c_prd_typ,
                        					c_ctgry_indstk,
                        					c_cntrct_tag,
                        					&d_ord_amt_blkd,
                        					&d_pstn_amt_blkd );
		if ( i_returncode != 0 )
		{
	 	/**	fn_errlog ( c_ServiceName, "S31255", SQLMSG, c_err_msg );  Commented in VQC **/
        fn_errlog ( c_ServiceName, "S31260", LIBMSG, c_err_msg );   /*** SQLMSG is Replaced with LIBMSG (VQC) ***/ 
			return FAILURE;
		}

  		d_ord_mrgn_amt = d_ord_mrgn_amt + d_ord_amt_blkd;
		d_trd_mrgn_amt = d_trd_mrgn_amt + d_pstn_amt_blkd;

		*ptr_d_ord_mrgn_amt = d_ord_mrgn_amt;
		*ptr_d_trd_mrgn_amt = d_trd_mrgn_amt;
  }

  EXEC SQL
    CLOSE sql_ut_cur;      

 return SUCCESS;
}
/***Ver 1.9 Ends ***/

int fn_cal_mrgn ( char *c_ServiceName,
                  char *c_err_msg,
									char *c_cln_mtch_accnt,
                  char *c_xchng_cd,
                  char *c_undrlyng,
                  char c_prd_typ,
                  char c_ctgry_indstk,
                  char c_cntrct_tag,
                  double *ptr_d_ord_mrgn_amt,
                  double *ptr_d_trd_mrgn_amt )
{

  int i_returncode;
  struct vw_err_msg st_err_msg;

  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;             /* a cursor variable */
    struct vw_cntfut_pos st_cntpos_crrnt;
    struct vw_undfut_pos st_undfut_pos_to_be;
    struct vw_undfut_pos st_undfut_pos_crrnt;
    struct vw_pstn_actn st_pstn_actn ;
		varchar	c_exp_dt [ LEN_DATE ];
  EXEC SQL END DECLARE SECTION;

	/*****  Set UPOS_to_be fields to default  *******/

	strcpy( st_undfut_pos_to_be.c_cln_mtch_accnt, c_cln_mtch_accnt );
	strcpy( st_undfut_pos_to_be.c_xchng_cd, c_xchng_cd );
	strcpy( st_undfut_pos_to_be.c_undrlyng, c_undrlyng );
	st_undfut_pos_to_be.c_prd_typ  = c_prd_typ;
	st_undfut_pos_to_be.c_ctgry_indstk  = c_ctgry_indstk;
	st_undfut_pos_to_be.c_cntrct_tag = c_cntrct_tag;
	st_undfut_pos_to_be.l_ibuy_qty = 0;
	st_undfut_pos_to_be.d_ibuy_ord_vl = 0;
	st_undfut_pos_to_be.l_isell_qty = 0;
	st_undfut_pos_to_be.d_isell_ord_vl = 0;
	st_undfut_pos_to_be.l_exbuy_qty = 0;
	st_undfut_pos_to_be.d_exbuy_ord_vl = 0;
	st_undfut_pos_to_be.l_exsell_qty = 0;
	st_undfut_pos_to_be.d_exsell_ord_vl = 0;
	st_undfut_pos_to_be.l_buy_exctd_qty = 0;
	st_undfut_pos_to_be.l_sell_exctd_qty = 0;
	st_undfut_pos_to_be.c_opnpstn_flw = 'N';
	st_undfut_pos_to_be.l_opnpstn_qty = 0;
	st_undfut_pos_to_be.d_org_opn_val = 0;
	st_undfut_pos_to_be.d_mtm_opn_val = 0;
	st_undfut_pos_to_be.l_opn_buyqty = 0;
	st_undfut_pos_to_be.l_opn_sellqty = 0;
	st_undfut_pos_to_be.d_ibuy_mrgn = 0;
	st_undfut_pos_to_be.d_isell_mrgn = 0;
	st_undfut_pos_to_be.d_exbuy_mrgn = 0;
	st_undfut_pos_to_be.d_exsell_mrgn = 0;
	st_undfut_pos_to_be.d_add_mrgn_val = 0;
	st_undfut_pos_to_be.d_exctd_mrgn = 0;
	st_undfut_pos_to_be.d_sprd_mrgn = 0;
	st_undfut_pos_to_be.d_sprd_pl = 0;
	st_undfut_pos_to_be.d_trd_mrgn = 0;
	st_undfut_pos_to_be.c_oprn_typ = '*';
	st_undfut_pos_to_be.d_ordr_mrgn = 0;
	st_undfut_pos_to_be.d_imtm_opn_val = 0;
	st_undfut_pos_to_be.d_imtm_exctd_mrgn = 0;
	st_undfut_pos_to_be.d_imtm_sprd_mrgn = 0;
	st_undfut_pos_to_be.d_imtm_sprd_pl = 0;
	st_undfut_pos_to_be.d_imtm_trd_mrgn = 0;
	st_undfut_pos_to_be.d_mm_exctd_mrgn = 0;
	st_undfut_pos_to_be.d_mm_sprd_mrgn = 0;
	st_undfut_pos_to_be.d_mm_sprd_pl = 0;
	st_undfut_pos_to_be.d_mm_trd_mrgn = 0;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "B4 c_prd_typ : %c", c_prd_typ );
	}
  /** Prepare a list of contracts from contract position table **/
  EXEC SQL ALLOCATE :sys_cursor;

    EXEC SQL EXECUTE
      BEGIN
         OPEN :sys_cursor FOR
          SELECT  ffp_clm_mtch_accnt,
                  ffp_xchng_cd,
                  ffp_prdct_typ,
                  ffp_indstk,
                  ffp_undrlyng,
                  to_char (ffp_expry_dt,'DD-Mon-YYYY'),
                  ffp_exer_typ,
                  ffp_cntrct_tag,
                  ffp_ibuy_qty,
                  ffp_ibuy_ord_val,
                  ffp_isell_qty,
                  ffp_isell_ord_val,
                  ffp_exbuy_qty,
                  ffp_exbuy_ord_val,
                  ffp_exsell_qty,
                  ffp_exsell_ord_val,
                  ffp_buy_exctd_qty,
                  ffp_sell_exctd_qty,
                  ffp_opnpstn_flw,
                  ffp_opnpstn_qty,
                  ffp_opnpstn_val,
                  ffp_mtm_opn_val
          FROM    ffp_fo_futures_pstn_gbt
          WHERE   ffp_clm_mtch_accnt = :c_cln_mtch_accnt
          AND     ffp_xchng_cd       = :c_xchng_cd
          AND     ffp_prdct_typ      = :c_prd_typ
          AND     ffp_undrlyng       = :c_undrlyng
          AND     ffp_cntrct_tag     = :c_cntrct_tag
          ORDER BY ffp_expry_dt asc;
        END;
      END-EXEC;

  if ( SQLCODE != 0 )
  {
    EXEC SQL FREE :sys_cursor;
    fn_errlog ( c_ServiceName, "S31265", SQLMSG, c_err_msg );
    return FAILURE;
  }

   while ( 1 )
  {
      EXEC SQL  FETCH   :sys_cursor
                INTO    :st_cntpos_crrnt.c_cln_mtch_accnt,
                        :st_cntpos_crrnt.c_xchng_cd,
                        :st_cntpos_crrnt.c_prd_typ,
                        :st_cntpos_crrnt.c_ctgry_indstk,
                        :st_cntpos_crrnt.c_undrlyng,
                        :c_exp_dt,
                        :st_cntpos_crrnt.c_exrc_typ,
                        :st_cntpos_crrnt.c_cntrct_tag,
                        :st_cntpos_crrnt.l_ibuy_qty,
                        :st_cntpos_crrnt.d_ibuy_ord_vl,
                        :st_cntpos_crrnt.l_isell_qty,
                        :st_cntpos_crrnt.d_isell_ord_vl,
                        :st_cntpos_crrnt.l_exbuy_qty,
                        :st_cntpos_crrnt.d_exbuy_ord_vl,
                        :st_cntpos_crrnt.l_exsell_qty,
                        :st_cntpos_crrnt.d_exsell_ord_vl,
                        :st_cntpos_crrnt.l_buy_exctd_qty,
                        :st_cntpos_crrnt.l_sell_exctd_qty,
                        :st_cntpos_crrnt.c_opnpstn_flw,
                        :st_cntpos_crrnt.l_opnpstn_qty,
                        :st_cntpos_crrnt.d_org_opn_val,
                        :st_cntpos_crrnt.d_mtm_opn_val ;

      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31270", SQLMSG,c_err_msg );
        return FAILURE;
     }
     SETNULL( c_exp_dt );
     strcpy ( st_cntpos_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
     rtrim(st_cntpos_crrnt.c_xchng_cd);
     rtrim(st_cntpos_crrnt.c_undrlyng);
     rtrim(st_cntpos_crrnt.c_expry_dt);

    fn_sum_cpos ( st_cntpos_crrnt,
                  &st_undfut_pos_to_be );
	}

  EXEC SQL CLOSE :sys_cursor; 
  EXEC SQL FREE :sys_cursor;

  memcpy ( &st_undfut_pos_crrnt,
           &st_undfut_pos_to_be,
           sizeof( st_undfut_pos_crrnt ) );

	strcpy(st_pstn_actn.c_cln_mtch_accnt,c_cln_mtch_accnt);
	strcpy(st_pstn_actn.c_xchng_cd, c_xchng_cd);


	st_pstn_actn.c_prd_typ = c_prd_typ;
	strcpy(st_pstn_actn.c_undrlyng, c_undrlyng);
	st_pstn_actn.l_actn_typ = CALCULATE_MARGIN;

	i_returncode = 	fn_upd_mrgn_cal ( c_ServiceName,
                         						&st_pstn_actn,
                         						&st_undfut_pos_crrnt,
                         						&st_undfut_pos_to_be,
                         						&st_err_msg );

	*ptr_d_ord_mrgn_amt = st_undfut_pos_to_be.d_ordr_mrgn;
	*ptr_d_trd_mrgn_amt = st_undfut_pos_to_be.d_trd_mrgn;

  return SUCCESS;
}

int fn_upd_mrgn_cal( 	char *c_ServiceName,
                  		struct vw_pstn_actn *ptr_st_pstn_actn,
                  		struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                  		struct vw_undfut_pos *ptr_st_undfut_pos,
                  		struct vw_err_msg *ptr_st_err_msg )
{
  int   i_returncode;
  
	long int  li_ose_qty = 0;						/* initialized in VQC */
  long int  li_ibm_qty = 0;           /* initialized in VQC */
  long int  li_ebm_qty = 0;           /* initialized in VQC */
  long int  li_obe_qty = 0;           /* initialized in VQC */
  long int  li_ism_qty = 0;           /* initialized in VQC */
  long int  li_esm_qty = 0;           /* initialized in VQC */
  long int  li_opn_qty = 0;           /* initialized in VQC */
  long int  li_unmtchd_qty = 0;           /* initialized in VQC */
  long int  li_sum_CUOQ;
  long int  li_spd_qty = 0;           /* initialized in VQC */

  double d_initial_mrgn = 0.0;           /* initialized in VQC */
  double d_spread_mrgn = 0.0;           /* initialized in VQC */
  double d_min_mrgn = 0.0;           /* initialized in VQC */
  double d_min_spread_mrgn = 0.0;           /* initialized in VQC */
  double d_i_exp = 0.0;
  double d_e_exp = 0.0;
  double d_sum_CUOV;

  char  c_pos_opn;

  struct vw_cntfut_pos st_cntfut_pos;

  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;             /* a cursor variable */
    char  sql_cntrct_tag = '\0';           /* initialized in VQC */
    char  sql_cln_mtch_accnt[11] = "\0";           /* initialized in VQC */
    char  sql_xchng_cd[4] = "\0";           /* initialized in VQC */
    char  sql_prd_typ = '\0';           /* initialized in VQC */
    char  sql_undrlyng[7] = "\0";           /* initialized in VQC */
    double d_far_mtm_opn_val = 0.0;           /* initialized in VQC */
    long int  li_far_opnpstn_qty = 0;           /* initialized in VQC */
		int		i_opn_pos_exists = 0;           /* initialized in VQC */
  EXEC SQL END DECLARE SECTION;

  strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
  strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
  sql_prd_typ = ptr_st_pstn_actn->c_prd_typ;
  sql_cntrct_tag = ptr_st_undfut_pos->c_cntrct_tag;

  /** Get the margin percentages **/
  i_returncode = fn_get_im_prcntg( c_ServiceName,
                                   ptr_st_pstn_actn,
                                   ptr_st_err_msg,
                                   &d_initial_mrgn,
                                   &d_spread_mrgn,
                                   &d_min_mrgn,
                                   &d_min_spread_mrgn,
                                   ptr_st_undfut_pos->c_cntrct_tag );

  if ( i_returncode == -1 )
  {
    return ( -1 );
  }

  /** Calculation of IWTL buy exposure **/
  if ( ptr_st_undfut_pos->l_ibuy_qty != 0 )
  {
    li_ose_qty = fn_maxl( ( ptr_st_undfut_pos->l_sell_exctd_qty * (-1)) -
                           ptr_st_undfut_pos->l_buy_exctd_qty,
                          0 );

    li_ibm_qty = fn_maxl( (ptr_st_undfut_pos->l_ibuy_qty -
                          li_ose_qty),
                          0 );
   
 		ptr_st_undfut_pos->d_ibuy_mrgn = li_ibm_qty *
                                    (ptr_st_undfut_pos->d_ibuy_ord_vl /
                                     ptr_st_undfut_pos->l_ibuy_qty) *
                                      d_initial_mrgn / 100.0 ;
  }
  else
  {
    ptr_st_undfut_pos->d_ibuy_mrgn = 0;
  }

  /** Calculation of EXCH buy exposure **/
  if ( ptr_st_undfut_pos->l_exbuy_qty != 0 )
  {
    li_ose_qty = fn_maxl( (ptr_st_undfut_pos->l_sell_exctd_qty * (-1)) -
                           ptr_st_undfut_pos->l_buy_exctd_qty,
                          0 );
    li_ebm_qty = fn_maxl( (ptr_st_undfut_pos->l_exbuy_qty -
                          li_ose_qty),
                          0 );
    ptr_st_undfut_pos->d_exbuy_mrgn = li_ebm_qty *
                                    (ptr_st_undfut_pos->d_exbuy_ord_vl /
                                     ptr_st_undfut_pos->l_exbuy_qty) *
                                      d_initial_mrgn / 100.0 ;
  }
  else
  {
    ptr_st_undfut_pos->d_exbuy_mrgn = 0;
  }

  /** Calculation of IWTL sell exposure **/
  if ( ptr_st_undfut_pos->l_isell_qty != 0 )
  {
    li_obe_qty = fn_maxl( ptr_st_undfut_pos->l_buy_exctd_qty -
                          (ptr_st_undfut_pos->l_sell_exctd_qty * (-1) ),
                          0 );

    li_ism_qty = fn_maxl( ( ( ptr_st_undfut_pos->l_isell_qty * (-1)) -
                          li_obe_qty),
                          0 );

    ptr_st_undfut_pos->d_isell_mrgn = li_ism_qty *
                                    (ptr_st_undfut_pos->d_isell_ord_vl /
                                     ptr_st_undfut_pos->l_isell_qty) *
                                    d_initial_mrgn / 100.0 ;
  }
 else
  {
    ptr_st_undfut_pos->d_isell_mrgn = 0;
  }


  /** Calculation of EXCH sell exposure **/
  if ( ptr_st_undfut_pos->l_exsell_qty != 0 )
  {
    li_obe_qty = fn_maxl( ptr_st_undfut_pos->l_buy_exctd_qty -
                         ( ptr_st_undfut_pos->l_sell_exctd_qty * (-1) ),
                          0 );

    li_esm_qty = fn_maxl( ( ( ptr_st_undfut_pos->l_exsell_qty * (-1)) -
                          li_obe_qty),
                          0 );

    ptr_st_undfut_pos->d_exsell_mrgn = li_esm_qty *
                                    (ptr_st_undfut_pos->d_exsell_ord_vl /
                                     ptr_st_undfut_pos->l_exsell_qty) *
                                      d_initial_mrgn / 100.0 ;
  }
  else
  {
    ptr_st_undfut_pos->d_exsell_mrgn = 0;
  }

  d_i_exp = fn_maxd(ptr_st_undfut_pos->d_ibuy_mrgn,
                    ptr_st_undfut_pos->d_isell_mrgn);

  d_e_exp = fn_maxd(ptr_st_undfut_pos->d_exbuy_mrgn,
                    ptr_st_undfut_pos->d_exsell_mrgn);

  ptr_st_undfut_pos->d_ordr_mrgn = fn_maxd( d_i_exp, d_e_exp );

/*** Code added to check whether any open position exists *****/
	i_opn_pos_exists = 0 ;

  EXEC SQL
    SELECT  1
    INTO    :i_opn_pos_exists
		FROM		DUAL
		WHERE		exists
					( SELECT	1
						FROM ffp_fo_futures_pstn_gbt
						WHERE	ffp_cntrct_tag  = :sql_cntrct_tag
						AND		ffp_opnpstn_qty != 0 );

  if ( ( SQLCODE != 0 ) &&
       	( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog( c_ServiceName, "S31275", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "i_opn_pos_exists :%d:", i_opn_pos_exists );
	}

	if ( i_opn_pos_exists == 1 )
	{
  	/** Calculation of spread margin **/
  	/** Spread qty = min ( sum of open buy qty at contract level,   **/
  	/**                    sum of open sell qty at contract level ) **/
  	/** Spread margin = Spread qty * Far month contract rate * SM / 100 **/
  	li_spd_qty = fn_minl( ptr_st_undfut_pos->l_opn_buyqty,
                  	labs(ptr_st_undfut_pos->l_opn_sellqty) );
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Spread qty :%ld:", li_spd_qty );
	}

  	EXEC SQL
    	SELECT  ffp_mtm_opn_val,
            	ffp_opnpstn_qty
    	INTO    :d_far_mtm_opn_val,
            	:li_far_opnpstn_qty
    	FROM    ffp_fo_futures_pstn_gbt
    	WHERE   ffp_clm_mtch_accnt = :sql_cln_mtch_accnt
    	AND     ffp_xchng_cd       = :sql_xchng_cd
    	AND     ffp_prdct_typ      = :sql_prd_typ
    	AND     ffp_undrlyng       = :sql_undrlyng
    	AND     ffp_cntrct_tag     = :sql_cntrct_tag
    	AND     ffp_expry_dt       =
            	( SELECT  MAX(ffp_expry_dt)
            	FROM    ffp_fo_futures_pstn_gbt
            	WHERE   ffp_clm_mtch_accnt = :sql_cln_mtch_accnt
            	AND     ffp_xchng_cd       = :sql_xchng_cd
            	AND     ffp_prdct_typ      = :sql_prd_typ
            	AND     ffp_undrlyng       = :sql_undrlyng
            	AND     ffp_cntrct_tag     = :sql_cntrct_tag
            	AND     ffp_opnpstn_qty    != 0 );

  	if ( ( SQLCODE != 0 ) &&
       	( SQLCODE != NO_DATA_FOUND ) )
  	{
    	fn_errlog( c_ServiceName, "S31280", SQLMSG, ptr_st_err_msg->c_err_msg );
    	return FAILURE;
  	}

  	if ( SQLCODE == 0 )
  	{
    	ptr_st_undfut_pos->d_sprd_mrgn = li_spd_qty *
      	( d_far_mtm_opn_val / li_far_opnpstn_qty ) * d_spread_mrgn / 100.0;
  	}
  	else
  	{
    	ptr_st_undfut_pos->d_sprd_mrgn = 0;
  	}

  	c_pos_opn = 'Y';

  	EXEC SQL ALLOCATE :sys_cursor;

  	if( ptr_st_undfut_pos->l_opnpstn_qty > 0)
  	{
    	EXEC SQL EXECUTE
      	BEGIN
        	OPEN :sys_cursor FOR
          	SELECT  ffp_mtm_opn_val,
                  	ffp_opnpstn_qty
          	FROM    ffp_fo_futures_pstn_gbt
          	WHERE   ffp_clm_mtch_accnt = :sql_cln_mtch_accnt
          	AND     ffp_xchng_cd       = :sql_xchng_cd
          	AND     ffp_prdct_typ      = :sql_prd_typ
          	AND     ffp_undrlyng       = :sql_undrlyng
          	AND     ffp_cntrct_tag     = :sql_cntrct_tag
          	AND     ffp_opnpstn_qty    > 0
          	ORDER BY ffp_expry_dt desc;
        	END;
      	END-EXEC;
  	}
  	else if( ptr_st_undfut_pos->l_opnpstn_qty < 0)
  	{
    	EXEC SQL EXECUTE
      	BEGIN
        	OPEN :sys_cursor FOR
          	SELECT  ffp_mtm_opn_val,
                  	ffp_opnpstn_qty
          	FROM    ffp_fo_futures_pstn_gbt
          	WHERE   ffp_clm_mtch_accnt = :sql_cln_mtch_accnt
          	AND     ffp_xchng_cd       = :sql_xchng_cd
          	AND     ffp_prdct_typ      = :sql_prd_typ
          	AND     ffp_undrlyng       = :sql_undrlyng
          	AND     ffp_cntrct_tag     = :sql_cntrct_tag
          	AND     ffp_opnpstn_qty    < 0
          	ORDER BY ffp_expry_dt desc;
        	END;
      	END-EXEC;
  	}
  	else
  	{
    	d_sum_CUOV = 0;
    	ptr_st_undfut_pos->d_sprd_pl = (-1) * ptr_st_undfut_pos->d_mtm_opn_val;
    	ptr_st_undfut_pos->d_exctd_mrgn = 0;
    	c_pos_opn = 'N';

    	/*** Set add margin amount to 0 ***/
    	ptr_st_undfut_pos->d_add_mrgn_val = 0;

    	SQLCODE = 0;
  	}

  	if ( SQLCODE != 0 )
  	{
    	fn_errlog( c_ServiceName, "S31285", SQLMSG, ptr_st_err_msg->c_err_msg  );
    	EXEC SQL FREE :sys_cursor;
    	return ( -1 );
  	}

  	if ( c_pos_opn == 'Y' )
  	{
    	li_opn_qty = ptr_st_undfut_pos->l_opnpstn_qty;
    	li_unmtchd_qty = li_opn_qty;
    	li_sum_CUOQ = 0;
    	d_sum_CUOV = 0;

    	while ( li_unmtchd_qty != 0)
    	{
      	EXEC SQL 	FETCH :sys_cursor
              		INTO :st_cntfut_pos.d_mtm_opn_val,
                     	 :st_cntfut_pos.l_opnpstn_qty;

      	if ( SQLCODE != 0 )
      	{
        	fn_errlog( c_ServiceName, "S31290", SQLMSG,
                                        	ptr_st_err_msg->c_err_msg  );
        	EXEC SQL CLOSE :sys_cursor;
        	EXEC SQL FREE :sys_cursor;
        	return ( -1 );
      	}
      	if ( li_opn_qty > 0 )
      	{
        	st_cntfut_pos.l_und_opn_qty = fn_minl( st_cntfut_pos.l_opnpstn_qty,
                                      	li_unmtchd_qty );
      	}
      	else
      	{
        	st_cntfut_pos.l_und_opn_qty = fn_maxl( st_cntfut_pos.l_opnpstn_qty,
                                      	li_unmtchd_qty );
      	}
      	st_cntfut_pos.d_und_opn_val = st_cntfut_pos.l_und_opn_qty *
                	(st_cntfut_pos.d_mtm_opn_val / st_cntfut_pos.l_opnpstn_qty);

      	li_sum_CUOQ = li_sum_CUOQ + st_cntfut_pos.l_und_opn_qty;
      	d_sum_CUOV = d_sum_CUOV + st_cntfut_pos.d_und_opn_val;
      	li_unmtchd_qty = li_unmtchd_qty - st_cntfut_pos.l_und_opn_qty;
    	}

    	EXEC SQL CLOSE :sys_cursor;
    	EXEC SQL FREE :sys_cursor;

    	/** Calculation of Executed margin **/
    	/** Executed margin = d_sum_CUOV * IM / 100 **/
    	ptr_st_undfut_pos->d_sprd_pl = d_sum_CUOV -
                                   	ptr_st_undfut_pos->d_mtm_opn_val;

    	if ( li_opn_qty > 0 )
    	{
        	ptr_st_undfut_pos->d_exctd_mrgn = d_sum_CUOV *
                                        	d_initial_mrgn / 100.0;
    	}
    	else if ( li_opn_qty < 0 )
    	{
      	ptr_st_undfut_pos->d_exctd_mrgn = ( (-1) * d_sum_CUOV )*
                                          	d_initial_mrgn / 100.0;
    	}

    	if ( ( ptr_st_undfut_pos->l_opnpstn_qty == 0 ) ||
         	( ( ptr_st_undfut_pos->l_opnpstn_qty > 0 ) &&
           ( ptr_st_undfut_pos_crrnt->l_opnpstn_qty < 0 ) ) ||
         	( ( ptr_st_undfut_pos->l_opnpstn_qty < 0 ) &&
           ( ptr_st_undfut_pos_crrnt->l_opnpstn_qty > 0 ) ) )
    	{
      	ptr_st_undfut_pos->d_add_mrgn_val = 0;
    	}
  	}
  	else
  	{
    	EXEC SQL CLOSE :sys_cursor;
    	EXEC SQL FREE :sys_cursor;
  	}

  	if ( ( ptr_st_undfut_pos->d_exctd_mrgn +
         	ptr_st_undfut_pos->d_sprd_mrgn ) <=
         	ptr_st_undfut_pos->d_sprd_pl )
  	{
    	ptr_st_undfut_pos->d_trd_mrgn = 0;
  	}
  	else
  	{
    	ptr_st_undfut_pos->d_trd_mrgn = ptr_st_undfut_pos->d_exctd_mrgn +
                                    	ptr_st_undfut_pos->d_sprd_mrgn -
                                    	ptr_st_undfut_pos->d_sprd_pl;
  	}

	if(DEBUG_MSG_LVL_3)
	{
	  fn_userlog ( c_ServiceName, "Actual net open value  :%lf:", d_sum_CUOV );
	  fn_userlog ( c_ServiceName, "MTMed open val         :%lf:", ptr_st_undfut_pos->d_mtm_opn_val );
	  fn_userlog ( c_ServiceName, "Spread Margin          :%lf:", ptr_st_undfut_pos->d_sprd_mrgn );
	  fn_userlog ( c_ServiceName, "Spread PL              :%lf:", ptr_st_undfut_pos->d_sprd_pl );
	  fn_userlog ( c_ServiceName, "Executed Margin        :%lf:", ptr_st_undfut_pos->d_exctd_mrgn );
	  fn_userlog ( c_ServiceName, "Total Trade Margin     :%lf:", ptr_st_undfut_pos->d_trd_mrgn );
	}
  }
  else
  {
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "came inside else");
	}
    ptr_st_undfut_pos->d_trd_mrgn = 0;
  }
  return SUCCESS;
}

int fn_mrgncal_sltp ( char *c_ServiceName, 
					  char *c_err_msg,
					  struct vw_cntfut_pos *ptr_st_undfut_pos,
					  long *ptr_l_lst_trd_prc,
					  double *ptr_d_ord_mrgn_amt ) 
{
	long l_basket_id;
	long l_lst_trd_prc;			
	double d_mul_factor;
	long l_lot_size;
  double d_spltp_diff_per = 0.0;   
	double d_stp_lss_amt = 0;
	double d_sltp_amt = 0;
	double d_act_diff = 0;
	double d_lmt_prc = 0;
	double d_mrg_amnt = 0;

  /*** Ver 2.6 starts ***/
  double d_sltp_prcnt = 0.0;
  double d_xchng_prcnt = 0.0;
  double d_xchng_amt = 0.0;
  double d_mrg_amnt1 = 0;
  /*** Ver 2.6 ends ***/

  double  d_fmm_expsr = 0.0;      /*** Ver 2.9 ***/
  double  d_spn_per_lot = 0.0;    /*** Ver 2.9 ***/
  double  d_spn_per_lot_B = 0.0;    /*** Ver 2.9 ***/
	double  d_fmm_expr = 0.0;				/*** Ver 2.9 ***/

	l_lst_trd_prc = *ptr_l_lst_trd_prc;

	  if(DEBUG_MSG_LVL_3)
	  {
		  fn_userlog( c_ServiceName, "~~~~~~~~~~~~~~~~~~fn_mrgncal_sltp logs starts~~~~~~~~~~~~~~~~~~~~~~~~~");
		  fn_userlog( c_ServiceName, "Match account :%s:",ptr_st_undfut_pos->c_cln_mtch_accnt);
		  fn_userlog( c_ServiceName, "Contract details" );
		  fn_userlog( c_ServiceName, "EX :%s:", ptr_st_undfut_pos->c_xchng_cd );
		  fn_userlog( c_ServiceName, "PRD:%c:", ptr_st_undfut_pos->c_prd_typ );
		  fn_userlog( c_ServiceName, "UND:%s:", ptr_st_undfut_pos->c_undrlyng );
		  fn_userlog( c_ServiceName, "EXP:%s:", ptr_st_undfut_pos->c_expry_dt );
		  fn_userlog( c_ServiceName, "Ex :%c:", ptr_st_undfut_pos->c_exrc_typ );
		  fn_userlog( c_ServiceName, "OP :%c:", ptr_st_undfut_pos->c_opt_typ );
		  fn_userlog( c_ServiceName, "SP :%ld:", ptr_st_undfut_pos->l_strike_prc );
		  fn_userlog( c_ServiceName, "I/S:%c:", ptr_st_undfut_pos->c_ctgry_indstk );
		  fn_userlog( c_ServiceName, "Ibuy qty:%ld:", ptr_st_undfut_pos->l_ibuy_qty );
		  fn_userlog( c_ServiceName, "Ibuy ord val:%lf:", ptr_st_undfut_pos->d_ibuy_ord_vl );
		  fn_userlog( c_ServiceName, "buy Exec qty:%ld:", ptr_st_undfut_pos->l_buy_exctd_qty );
		  fn_userlog( c_ServiceName, "Values after modification" );
		  fn_userlog( c_ServiceName, "M-Isell qty:%ld:", ptr_st_undfut_pos->l_isell_qty );
		  fn_userlog( c_ServiceName, "M-Isell ord val:%lf:", ptr_st_undfut_pos->d_isell_ord_vl );
		  fn_userlog( c_ServiceName, "M-sell Exec qty:%ld:", ptr_st_undfut_pos->l_sell_exctd_qty );
		  fn_userlog( c_ServiceName, "M-open pos flow:%c:", ptr_st_undfut_pos->c_opnpstn_flw );
		  fn_userlog( c_ServiceName, "M-open pos qty:%ld:", ptr_st_undfut_pos->l_opnpstn_qty );
		  fn_userlog( c_ServiceName, "M-open pos val:%lf:", ptr_st_undfut_pos->d_org_opn_val );
	  }


	EXEC SQL
		SELECT  FCB_UNDRLYNG_BSKT_ID
    INTO    :l_basket_id
    FROM    FCB_FO_CLN_BSKT_ALLTD
    WHERE   FCB_CLN_LVL = ( SELECT 	CLM_CLNT_LVL
                          	FROM 		CLM_CLNT_MSTR
                          	WHERE 	CLM_MTCH_ACCNT = :ptr_st_undfut_pos->c_cln_mtch_accnt );
  if ( SQLCODE != 0 )
  {
	fn_errlog( c_ServiceName, "S31295", SQLMSG, c_err_msg );
	return FAILURE;
  }

  
  EXEC SQL
	  SELECT  NVL(FMM_SLTP_DIFF_PRCNT,0),
					  NVL(FMM_SLTP_PRCNT,0),     /*** Ver 2.6 ***/
            NVL(FMM_SLTP_SEBI_PRCNT,0), /*** Ver 2.6 ***/
						NVL(FMM_EXPSR,0)						/*** Ver 2.9 ***/
		INTO    :d_spltp_diff_per,
				    :d_sltp_prcnt, /*** Ver 2.6 ***/
            :d_xchng_prcnt, /*** Ver 2.6 ***/
						:d_fmm_expr     /*** ver 2.9 ***/
	  FROM    FUM_FO_UNDRLYNG_MSTR FUM, FMM_FO_MRGN_MSTR FMM
      WHERE   FUM.FUM_XCHNG_CD      = :ptr_st_undfut_pos->c_xchng_cd
      AND     FUM.FUM_UNDRLYNG = FMM.FMM_UNDRLYNG
      AND     FUM.FUM_XCHNG_CD = FMM.FMM_XCHNG_CD
      AND     FUM.FUM_QT_TRDNG_FLG  = 'T'
		AND     FUM.FUM_FP_TRDNG_FLG = 'T'
		AND     FUM.FUM_SLTP_FP_TRDNG_FLG = 'T'
      AND     FUM.FUM_PRDCT_TYP = 'F'
      AND     FMM.FMM_PRDCT_TYP = 'F'
      AND     FMM.FMM_UNDRLYNG_BSKT_ID = :l_basket_id
      AND     trim(FUM.FUM_UNDRLYNG) = :ptr_st_undfut_pos->c_undrlyng
      ORDER BY  FUM.FUM_UNDRLYNG;
  if ( SQLCODE != 0 )
  {
	fn_errlog( c_ServiceName, "S31300", SQLMSG, c_err_msg );
	return FAILURE;
  }

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "d_spltp_diff_per:%lf:", d_spltp_diff_per);
	}

    /*** Ver 2.9 start ***/
    EXEC SQL
    SELECT NVL(FTQ_SPN_PER_LOT,0),
           NVL(FTQ_SPN_PER_LOT_B,0)
    INTO   :d_spn_per_lot,
           :d_spn_per_lot_B
    FROM   FTQ_FO_TRD_QT
    WHERE  FTQ_XCHNG_CD = :ptr_st_undfut_pos->c_xchng_cd 
    AND    FTQ_UNDRLYNG = :ptr_st_undfut_pos->c_undrlyng 
    AND    FTQ_PRDCT_TYP = 'F'
    AND    trunc(FTQ_EXPRY_DT) = :ptr_st_undfut_pos->c_expry_dt;

    if ( SQLCODE  !=  0 )
    {
      fn_errlog ( c_ServiceName, "S31305", SQLMSG, c_err_msg );
      return FAILURE ;
    }
		fn_userlog( c_ServiceName, "d_spn_per_lot:%lf: d_spn_per_lot_B:%lf:", d_spn_per_lot,d_spn_per_lot_B);
    /*** Ver 2.9  ends ***/

  if(ptr_st_undfut_pos->l_ibuy_qty != 0)
	l_lot_size = ptr_st_undfut_pos->l_ibuy_qty;
  else if(ptr_st_undfut_pos->l_isell_qty != 0)
	l_lot_size = ptr_st_undfut_pos->l_isell_qty;
  else
	l_lot_size = 0;

  if(ptr_st_undfut_pos->c_ctgry_indstk == 'I')
	d_mul_factor = 0.25;
  else if(ptr_st_undfut_pos->c_ctgry_indstk == 'S')
	d_mul_factor = 0.5;
  else
	{
/***	fn_errlog( c_ServiceName, "S31310", SQLMSG, c_err_msg ); "22005" Commented in VQC *****/
	  fn_errlog( c_ServiceName, "S31315", LIBMSG, c_err_msg ); /*22005*/  /*** SQLMSG Replaced with LIBMSG in VQC ***/
		return FAILURE;
	}

  d_stp_lss_amt = ( d_mul_factor * l_lst_trd_prc )/100;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "d_stp_lss_amt :%lf:", d_stp_lss_amt);
	}

  if(ptr_st_undfut_pos->l_ibuy_qty != 0)
	d_sltp_amt = l_lst_trd_prc - d_stp_lss_amt;
  else if(ptr_st_undfut_pos->l_isell_qty != 0)
	d_sltp_amt = l_lst_trd_prc + d_stp_lss_amt;
  else
	{
	/**fn_errlog( c_ServiceName, "S31320", SQLMSG, c_err_msg );  Commented in VQC (SQLMSG to LIBMSG)******/
		fn_errlog( c_ServiceName, "S31325", LIBMSG, c_err_msg );  /*** SQLMSG Replaced with LIBMSG in VQC ***/
		return FAILURE;
	}
	
	d_act_diff = (d_sltp_amt * d_spltp_diff_per)/100;
    d_lmt_prc = d_sltp_amt - d_act_diff;

	d_mrg_amnt = ((double)l_lst_trd_prc - d_lmt_prc)* (double)l_lot_size; 					/*** Ver 2.6 added double ***/
  d_mrg_amnt1= ((double)l_lst_trd_prc * (double)l_lot_size * d_sltp_prcnt)/100; 	/*** Ver 2.6 ***/

  /*** Ver 2.9  starts ***/
  /** FORMULA: FPSL SEBI% * (SPAN + EXPOSURE) **/

  d_xchng_amt =( d_xchng_prcnt/100 *
                 (
                  (  d_spn_per_lot_B )  +
                  ( (double)l_lot_size * (double)l_lst_trd_prc* d_fmm_expr/100 )
                 )
                ) ;
  /*** Ver 2.9 ends ***/

	/*** Commented in Ver 2.9 ***
  d_xchng_amt = ((double)l_lst_trd_prc * (double)l_lot_size * d_xchng_prcnt)/100; *** Ver 2.6 ***
	***/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "d_act_diff :%lf:", d_act_diff);
		fn_userlog( c_ServiceName, "d_lmt_prc :%lf:", d_lmt_prc);
		fn_userlog( c_ServiceName, "d_mrg_amnt :%lf:", d_mrg_amnt);
		fn_userlog( c_ServiceName, "d_xchng_amt:%lf:", d_xchng_amt); /*** Ver 2.6 ***/
	}

	/*** Ver 2.6 starts ***/
  if ( d_xchng_amt > (d_mrg_amnt + d_mrg_amnt1) )
  {
    d_mrg_amnt = d_xchng_amt;
  }
  else
  {
    d_mrg_amnt = d_mrg_amnt + d_mrg_amnt1;
  }
  /*** Ver 2.6 ends ***/

	*ptr_d_ord_mrgn_amt = d_mrg_amnt;

 return (0);
}
