/*****************************************************************************************/
/******************************************************************************************
Service Name          : sfo_dt_modM																											*
																										                             					*
Description           : Allows a DT user Modify a fno order   	                          *
Input parameters							                              															*
																																													*
																FFO_USR_ID																								*
																FFO_SSSN_ID																								*
																FFO_XCHNG_CD																							*
																FFO_SOURCE_FLG																						*
																FFO_ORD_TYP																								*
																FFO_EBA_MTCH_ACT_NO																				*
																FFO_PRDCT_TYP																							*
																FFO_ORDR_FLW																							*
																FFO_LMT_MKT_SL_FLG																				*
																FFO_DSCLSD_QTY																						*
																FFO_STP_LSS_TGR																						*
																FFO_LMT_RT																								*
																FFO_ORD_TOT_QTY																						*
																FFO_ORD_VALID_DT																					*
																FFO_STP_LSS_TGR																						*
																FFO_ORDR_RFRNC																						*
																FFO_EXPRY_DT																							*
																FFO_OLD_QTY																								*
																FFO_EXEC_QTY  (Ver 1.7)																		*
																FFO_STATUS_FLG (Ver 1.6)                                  *																																																															*
Output Parameters																																					*
                        				FFO_ACTN_ID																								*
                        				FFO_ERR_MSG																								*
																																													*
Log                   					: 09/09/2002  1.0 Release ICICI Infotech|Sangeet					*
Log                             : 29/12/2006  1.2 DLrevamp      Infotech|Vikash           *
																:	04/03/2008	1.3 IBM Migration	Infotech|Ranjit						*
                                : 09/09/2009  1.4 Enable Futureplus in DL                 *
																: 05/08/2010  1.5 																				*
																: 05/03/2013	1.6 Changes for SPAN in DL|Vishnu						*
                                : 15/03/2013  1.7 Order Status Check Infotech|Bhushan     *
																:	28/10/2013	1.8	Changes For SLTP F+ in DL |Bhushan 		  *
																:	21/02/2014	1.9 Changes For OptionPLUS in DL |Bhushan   *
                              	: 20/05/2014  2.0 Changes for Span FuturePLUS (Swati A.B) *
                              	: 09/09/2014  2.1 View to FML changes	(Samip M)						*
                                : 22/06/2016  VQC VERSION QUALITY CONTROL (Vishal B)      *
                                : 12/11/2019  2.2 Vendor API  (Navina D)                  *
                                : 22/01/2021  2.3 Vendor Validation Changes ( Anuj P )    *
                                : 28/04/2021  2.4 action id for itrade (Navina D )        *
******************************************************************************************/
/*****************************************************************************************/
#include <stdio.h>									
#include <stdlib.h>																								
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <eba_to_ors.h>
#include <fo_fml_def.h>
/** #include <fo_view_def.h> **/	/** Commented for Ver 2.1 **/
#include <fn_log.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_read_debug_lvl.h>	/* 1.3 */
#include <fn_val_ord.h> /** Ver 2.2 **/
#include <fo_view_def.h> /** Ver 2.2 **/

#include <errno.h>
int 	Z ;
#define INIT(x,y) for(Z=0;Z<y;Z++)x[Z] = 0 ;

/***	Below Variable commneted in VQC as they are not used
long  l_retval;
char  c_errmsg[256];
******************************/


void SFO_DT_MODM(TPSVCINFO *rqst)
{
	FBFR32 	*ptr_fml_Ibuf;
	FBFR32 	*ptr_fml_Obuf;

  EXEC SQL INCLUDE "table/icd_info_client_dtls.h"; /*** Ver 2.2 ***/

	char 	c_ServiceName[33];
 	varchar 	c_err_msg[256];			/** Variable type char changed to varchar in VQC **/
 	int 	i_Fget = 0;							/** Initialized in Ver VQC **/
 	int 	i_err[30];
	int   i_ferr[30]; /***Ver 2.2 ***/
  int   i_returncode = 0 ;   /** Ver 1.7 **/			/** Initialized in Ver VQC **/

 	char  c_usr_id[9] ;			 /*** Array size changed from 50 to 9 in VQC ***/
/* 	char  c_ord_typ ; commented in ver 1.2 */
/* 	char  c_ordr_flw ; commented in ver 1.2 */
	char 	c_pipe_id[2+1];  
/*	char 	c_ordr_rfrnc[18+1];  commented in ver 1.2 */ 
	char  c_ordr_rfrnc[18+1];			/* ver 1.5 */
	char 	c_clm_mtch_accnt[10+1];  
	char 	c_service_nm[30+1];  
	char 	c_xchng_cd[3+1]; 
	char  c_source_flg = '\0';		  /*** Ver 2.2 ***/
	char  c_product_type = '\0';	  /*** Ver 2.2 ***/
  varchar  c_ven_id[10];   /*** Ver 2.2 ***/
  char c_ven_nm[15] = "\0";        /*** Ver 2.2 ***/
  /***  Following variable is commented in VQC as it is not get used 
	char 	c_channel[3+1];  
  ***/ 

 	char  c_ord_valid_dt[11+1] ;
/* 	char  c_expry_dt[11+1] ;	*/

	/***  Following variables are commented in VQC as they are not get used in latest version

 	char  c_exg_nxt_trd_dt[11+1] ;
	char 	c_exg_crrnt_stts;  
	*******************************************/
	
/*	char 	c_lmt_mkt_sl_flg;  commented in ver 1.2 */
	char 	c_prdct_typ = '\0';           /** Initialized in Ver VQC **/  

	/***  Following variable is commented in VQC as it is not get used
	char 	c_exg_ofln_stts;  
	****************/
	char c_spn_flg = '\0';              /* Ver 1.6 */

	/***  Following variable is commented in VQC as it is not get used

  char c_bse_spn_flg ='\0';            * Ver 1.6 *

	*************************/

	/***  Following variable is commented in VQC as it is not get used in latest version

	char c_dl_flg = '\0';						 * Ver 1.6 *

	***************************/

 	long  l_sssn_id = 0 ;                         /** Initialized in Ver VQC **/
 	long  l_stp_lss_tgr = 0 ;                     /** Initialized in Ver VQC **/    
/* 	long  l_lmt_rt ; commented in ver 1.2 */
 	long  l_diff_nxt = 0 ;                        /** Initialized in Ver VQC **/
 	long  l_diff_exp = 0 ;                        /** Initialized in Ver VQC **/
 	long  int li_len_tobuf  = 0 ;                 /** Initialized in Ver VQC **/
 	long  l_acnt_id =-1 ;
	long  l_ord_qty = 0 ;	/* ver 1.5 */           /** Initialized in Ver VQC **/
	long  l_ord_exctd_qty = 0 ;  /* ver 1.5 */    /** Initialized in Ver VQC **/
  long  l_exectd_qty = 0;   /** Ver 1.7 **/
  long  l_val = 0;          /** Ver 1.7 **/

  struct vw_err_msg st_err_msg;  /** Ver 2.1 ***/

   MEMSET(c_err_msg);    /** Added in Ver VQC as DataType of c_err_msg changed from char to varchar **/ 

	strcpy(c_ServiceName,"SFO_DT_MODM");
	INITDBGLVL(c_ServiceName);	/* ver 1.3 */

  ptr_fml_Ibuf = (FBFR32*)rqst->data;
	/*******************************************************/
	/****************Allocating the buffers*****************/
	/*******************************************************/
  ptr_fml_Obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  if(ptr_fml_Obuf == NULL)
	{
		fn_errlog( c_ServiceName, "S31005", TPMSG, c_err_msg.arr  ); /* DataType of c_err_msg changed from char to varchar in
VQC */
    strcpy(c_err_msg.arr,"Problem in Modifying Order,Please Contact Customer Support"); /* DataType of c_err_msg changed from
 char to varchar in VQC */
    
    /*** Comment in VQC starts ***

    Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
 
    *** VQC Comment Ends ***/
    
    /** VQC - Action ID & Error Message is returned in Input Buffer instead of Output Buffer.
        Earlier we are used to send only error message , now we are also sending Action Id .  ***/

    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

    /** Ver VQC Ends **/ 
	}
	/*******************************************************/
	/************Allocation of the buffers over*************/
	/*******************************************************/
	

	/*******************************************************/
	/*****Initialising the string variables*****************/
	/*******************************************************/
	INIT(c_usr_id,9);         /***  VQC - Size changed from 50 to 9  ***/
	INIT(c_clm_mtch_accnt,11);
	INIT(c_ord_valid_dt,12);
	

	/*******************************************************/
	/*****Initialising of string variables over*************/
	/*******************************************************/

	/*** Ver 2.2 starts ***/
	i_returncode = Fget32 ( ptr_fml_Ibuf, FFO_SOURCE_FLG, 0, (char *)&c_source_flg, 0 );
	if( i_returncode == -1 && Ferror32 != FNOTPRES )
	{
			fn_userlog(c_ServiceName,"Error while getting input FFO_SOURCE_FLG.");
			fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg.arr  ); 
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
			tpfree((char *)ptr_fml_Obuf);
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	fn_userlog(c_ServiceName,"Source Flag :%c:",c_source_flg);


	/*** Ver 2.2 ends ***/

	/*******************************************************/
	/*****Getting the nessary check variables **************/
	/*******************************************************/
	i_err[0] = Fget32(ptr_fml_Ibuf,FFO_USR_ID,0,(char *)c_usr_id,0) ;
	i_err[1] = Fget32(ptr_fml_Ibuf,FFO_SSSN_ID,0,(char *)&l_sssn_id,0) ;
	i_err[2] = Fget32(ptr_fml_Ibuf,FFO_PRDCT_TYP,0,(char *)&c_prdct_typ,0) ;
	i_ferr [2] = Ferror32; /*** Ver 2.2 ***/
	i_err[3] = Fget32(ptr_fml_Ibuf,FFO_XCHNG_CD,0,(char *)c_xchng_cd,0) ;
	i_err[4] = Fget32(ptr_fml_Ibuf,FFO_EBA_MTCH_ACT_NO,0,(char *)c_clm_mtch_accnt,0) ;
/*	i_err[5] = Fget32(ptr_fml_Ibuf,FFO_LMT_MKT_SL_FLG,0,(char *)&c_lmt_mkt_sl_flg,0) ; commented in ver 1.2 */
/*	i_err[6] = Fget32(ptr_fml_Ibuf,FFO_ORD_TYP,0,(char *)&c_ord_typ,0) ; commented in ver 1.2 */
/*	i_err[7] = Fget32(ptr_fml_Ibuf,FFO_ORDR_FLW,0,(char *)&c_ordr_flw,0) ; commented in ver 1.2 */
/*	i_err[8] = Fget32(ptr_fml_Ibuf,FFO_EXPRY_DT,0,(char *)c_expry_dt,0) ;		commneted in ver 1.2  */
  i_err[5] = Fget32(ptr_fml_Ibuf,FFO_ORDR_RFRNC,0,(char *)c_ordr_rfrnc,0) ; /*commented in ver 1.2 */ /* uncommented in ver 1.5 */
	i_err[6] = Fget32(ptr_fml_Ibuf,FFO_ORD_TOT_QTY,0,(char *)&l_ord_qty,0);   /* ver 1.5 */
  
 
	for( i_Fget = 0 ; i_Fget < 7 ; i_Fget++ ) /* ver 1.5 counter changed from 5 to 7 */
	{
    if(i_err[i_Fget] == -1)
		{
			if(c_source_flg == 'A' && i_Fget == 2 && i_ferr[i_Fget] == FNOTPRES ) /*** if loop added in Ver 2.2 ***/			
			{
				fn_userlog(c_ServiceName,"API call skip product type input");
		   fn_userlog(c_ServiceName,"API Fget at in service call [%d],[%s]", i_Fget ,Fstrerror32( i_ferr[i_Fget]));
			}
			else
      {
			fn_userlog(c_ServiceName,"Error in Fget of :%d:",i_Fget);
    	fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg.arr  );  /* DataType of c_err_msg changed from char to varchar in
 VQC */
			strcpy(c_err_msg.arr,"Problem in Modifying Order,Please Contact Customer Support"); /* DataType of c_err_msg changed
from char to varchar in VQC */
   
      /*** Commented in VQC starts ***

			Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
    	Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
			tpfree((char *)ptr_fml_Ibuf);
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    
       *** VQC Comment Ends ***/

      /** Added in Ver VQC starts **/

      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

      /** Ver VQC Ends **/
			} /*** Ver 2.2 ***/
		}
	}

  /**** Ver 2.2 Starts ****/
	
  if (c_source_flg == 'A')
  {
    MEMSET(c_ven_id);

    if (Fget32(ptr_fml_Ibuf,FFO_USER_CODE,0,(char *)c_ven_id.arr,0) == -1 )
    {
        fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg.arr  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree((char *)ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    SETLEN(c_ven_id);

      i_returncode =    fn_chk_vendor ( c_ServiceName,
                                   c_usr_id,
                                   c_ven_id.arr,
                                   c_ven_nm, 
                                   &st_err_msg
                                 );
    if ( i_returncode == -1 )
    {
       fn_errlog( c_ServiceName, "S31025","Error in function fn_chk_vendor",c_err_msg.arr);
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       tpfree((char *)ptr_fml_Obuf);
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

	  fn_userlog(c_ServiceName,"Vendor Id = ESP_ID is :%s: c_ven_nm:%s:",c_ven_id.arr,c_ven_nm);
    if(strcmp(c_ven_nm,"SENSIBULL") == 0 )
    {

/************************
      i_returncode = fn_chk_vendor_validity ( c_ServiceName,
                                              c_usr_id,
                                              &st_err_msg
                                             );

      if ( i_returncode == -1 )
      {
         fn_errlog( c_ServiceName, "S31030","Error in function fn_chk_vendor_validity",c_err_msg.arr);
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
         Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
         tpfree((char *)ptr_fml_Obuf);
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

	    fn_userlog(c_ServiceName,"SENSIBULL :After fn_chk_vendor_validity ");
****************************/

      i_returncode = fn_chk_sensibull_tnc ( c_ServiceName,
                                            c_usr_id,
                                            &st_err_msg
                                           );

      if ( i_returncode == -1 )
      {
         fn_errlog( c_ServiceName, "S31035","Error in function fn_chk_sensibull_tnc",c_err_msg.arr);
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
         Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
         tpfree((char *)ptr_fml_Obuf);
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if( c_usr_id[0] == BPID )
      {
        fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst,Sensibull is desabled");
        fn_errlog( c_ServiceName, "B35018", "", c_err_msg.arr );
				strcpy(c_err_msg.arr,"Since you are Attached to a Direct Business Catalyst,Sensibull is desabled");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); /*** Ver 2.4 ***/
        tpfree((char *)ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      EXEC SQL
        SELECT  ICD_CUST_TYPE
        INTO    :sql_icd_cust_type
        FROM    ICD_INFO_CLIENT_DTLS,
        IAI_INFO_ACCOUNT_INFO
        WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
        AND     IAI_MATCH_ACCOUNT_NO  = :c_clm_mtch_accnt;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31040",SQLMSG,c_err_msg.arr);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); /*** Ver 2.4 ***/
        tpfree((char *)ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if(strcmp(sql_icd_cust_type.arr,"NRI") == 0)
      {
        fn_userlog( c_ServiceName, "NRI Customer Trying To Place Order from SENSIBULL");
        fn_errlog( c_ServiceName, "S31045", "NRI Customer Trying To Place Order from SENSIBULL",c_err_msg.arr);
        strcpy(c_err_msg.arr," NRI Customer Trying To Place Order from SENSIBULL.");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ); /*** Ver 2.4 ***/
        tpfree((char *)ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    else
    {
       /*************** commented in ver 2.3 *****************************
       fn_userlog( c_ServiceName, "Invalid Vendor" );
       fn_errlog( c_ServiceName, "S31050","InValid Vendor.",c_err_msg.arr );
       strcpy( c_err_msg.arr,"InValid Vendor.");
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
			 tpfree((char *)ptr_fml_Obuf);
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       ********************************************************************/
       fn_userlog(c_ServiceName,"Call from Vendor with ESP_ID :%s: Vendor Name:%s:",c_ven_id.arr,c_ven_nm);  /** ver 2.3 **/
    }
  }

  /*** Ver 2.2 ends ***/

	/*** Ver 1.6 Starts ***/
  
  /***  Commented in VQC starts ***

  i_returncode = Fget32 ( ptr_fml_Ibuf, FFO_STATUS_FLG, 0, (char *)&c_dl_flg, 0 );

  if (i_returncode == -1 && Ferror32 == FNOTPRES ) ** This check is introduced as DL flag is not passed from front end to back end in OLD DL **
  {
    fn_userlog(c_ServiceName,"Inside FNOTPRES check for input fml FFO_STATUS_FLG.");
  }
  else if( i_returncode == -1 && Ferror32 != FNOTPRES )
  {
    fn_userlog(c_ServiceName,"Error while getting input FFO_STATUS_FLG.");
    fn_errlog( c_ServiceName, "S31055", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
    Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpfree((char *)ptr_fml_Ibuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
  }
	
	fn_userlog(c_ServiceName,"DL flag :%c:",c_dl_flg);

   *** VQC Comment Ends ***/
	
	/*** Ver 1.6 Ends ***/

	/*******************************************************/
	/*****Getting of nessary check variables over***********/
	/*******************************************************/

	/*******************************************************/
	/*****Validating the ASP part***************************/
	/*******************************************************/

  /******************** Commented in Ver VQC ***************************
   ** as columns selected in below query are unused in latest vesrion **
   *********************************************************************

		EXEC SQL
		SELECT	EXG_CRRNT_STTS,
						EXG_OFLN_STTS,
						EXG_NXT_TRD_DT
		INTO		:c_exg_crrnt_stts,
						:c_exg_ofln_stts,
						:c_exg_nxt_trd_dt
		FROM		EXG_XCHNG_MSTR
		WHERE		EXG_XCHNG_CD = :c_xchng_cd ;

		if(SQLCODE != 0)
		{
			fn_userlog(c_ServiceName,"Error in selecting from Exchange master");
      fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg  );
      strcpy(c_err_msg,"Problem in Modifying Order,Please Contact Customer Support");
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpfree((char *)ptr_fml_Ibuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    }
   
    ************************ VQC Comment Ends *************************/

	/* ver 1.5 starts */

		EXEC SQL
		SELECT FOD_EXEC_QTY,
           NVL(FOD_SPN_FLG,'N'),     /** VQC **/
					 FOD_PRDCT_TYP
		INTO	 :l_ord_exctd_qty,
           :c_spn_flg,               /** VQC **/
					 :c_product_type           /*** Ver 2.2 ***/
	  FROM   FOD_FO_ORDR_DTLS
		WHERE  FOD_ORDR_RFRNC = :c_ordr_rfrnc
    AND    FOD_CLM_MTCH_ACCNT   = :c_clm_mtch_accnt ;   /** VQC **/

		if(SQLCODE != 0)
    {
      fn_userlog(c_ServiceName,"Error in selecting from Order Details"); 
      fn_errlog( c_ServiceName, "S31065", SQLMSG, c_err_msg.arr  ); /* DataType of c_err_msg changed from char to varchar in
 VQC */
      strcpy(c_err_msg.arr,"Problem in Modifying Order,Please Contact Customer Support"); /* DataType of c_err_msg changed
from char to varchar in VQC */

       /*** Commented in VQC starts ***

      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpfree((char *)ptr_fml_Ibuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );

       *** VQC Comment Ends ***/

       /** Added in Ver VQC starts **/

      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 ); /* DataType of c_err_msg changed from char to varchar in
VQC */
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

      /** Ver VQC Ends **/

    }

			/*** Ver 2.2 starts ***/
			if (c_source_flg == 'A') /*** API call ***/
			{
				c_prdct_typ = c_product_type;
			}
			/*** Ver 2.2 ends ***/

    /** Ver 1.7 Starts **/

    i_returncode = Fget32 ( ptr_fml_Ibuf, FFO_EXEC_QTY, 0, (char *)&l_exectd_qty, 0 );

    if (i_returncode == -1 && Ferror32 == FNOTPRES ) /** This check is introduced as executed qty is not passed from front en
d to back end in OLD DL **/
    {
      fn_userlog(c_ServiceName,"Inside FNOTPRES check for input fml FFO_EXEC_QTY.");
      l_val = 1;
    }
    else if( i_returncode == -1 && Ferror32 != FNOTPRES )
    {
      fn_userlog(c_ServiceName,"Error while getting input FFO_EXEC_QTY.");
      fn_errlog( c_ServiceName, "S31070", FMLMSG, c_err_msg.arr  );  /* DataType of c_err_msg changed from char to varchar in
 VQC */

      /*** Commented in VQC starts ***
      
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpfree((char *)ptr_fml_Ibuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
     
      *** VQC Comment Ends ***/

      /** Added in Ver VQC starts **/

      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

      /** Ver VQC Ends **/

    }

    if( l_val == 0 )
    {
      if( l_ord_exctd_qty != l_exectd_qty )
      {
        fn_errlog( c_ServiceName, "S31075", "Please check the current order status.", c_err_msg.arr  );   /* DataType of c_err_msg changed from char to varchar in VQC */
        strcpy(c_err_msg.arr,"Please check the current order status.");   /* DataType of c_err_msg changed from char to varchar in VQC */
     
         /*** Commented in VQC starts ***

        Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
        Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree((char *)ptr_fml_Ibuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    
        *** VQC Comment Ends ***/

       /** Added in Ver VQC starts **/

        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree((char *)ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

      /** Ver VQC Ends **/

      }
    }

		if(DEBUG_MSG_LVL_3)
		{
  		fn_userlog(c_ServiceName,"FFO_EXEC_QTY: l_exectd_qty :%ld:",l_exectd_qty);   
  		fn_userlog(c_ServiceName,"FFO_ORD_TOT_QTY: l_ord_qty :%ld:",l_ord_qty);    
  		fn_userlog(c_ServiceName,"FOD_EXEC_QTY: l_ord_exctd_qty :%ld:",l_ord_exctd_qty);
		}

	  /** Ver 1.7 Ends **/
	 l_ord_qty = l_ord_exctd_qty + l_ord_qty ;

	 Fchg32(ptr_fml_Ibuf,FFO_ORD_TOT_QTY,0,(char *)&l_ord_qty,0);

	/* ver 1.5 ends */

	  /** Ver 1.6 Starts **/

  /*** Commented in Ver VQC and span flag is fetched from existing query on Order Details Table ***

  EXEC SQL
    SELECT  NVL(CLM_SPAN_ALLWD,'N'),
            NVL(CLM_BSESPAN_ALLWD,'N')
    INTO    :c_spn_flg,
            :c_bse_spn_flg
    FROM    CLM_CLNT_MSTR
    WHERE   CLM_MTCH_ACCNT  = :c_clm_mtch_accnt;

  if(SQLCODE != 0)
  {
     fn_errlog( c_ServiceName, "S31080", SQLMSG, c_err_msg  );
     strcpy(c_err_msg,"Problem in Modifying Order,Please Contact Customer Support");
     Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
     Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     tpfree((char *)ptr_fml_Ibuf);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"NSE SPAN Allowed Flag Is :%c:",c_spn_flg);
    fn_userlog(c_ServiceName,"BSE SPAN Allowed Flag Is :%c:",c_bse_spn_flg);
  }

   *** VQC Comment Ends ***/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"SPAN Allowed Flag Is :%c:",c_spn_flg);        /** Added in Ver VQC **/
  }


	/*** Following commented In Ver 2.0 for enabling SPAN FP on DL.net
  if( ( (c_spn_flg == 'Y' && strcmp(c_xchng_cd,"NFO") == 0 ) || 
			 	(c_bse_spn_flg == 'Y' && strcmp(c_xchng_cd,"BFO") == 0 ) ) && c_prdct_typ == 'P')
  {
    fn_errlog( c_ServiceName, "B23008",DEFMSG, c_err_msg  );
    Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
		Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpfree((char *)ptr_fml_Ibuf);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
  }
	Commented In Ver 2.0 ends ***/

   /*** Commented in Ver VQC starts ***

	if (c_dl_flg != 'N')
	{
	  if( ( (c_spn_flg == 'Y' || c_spn_flg =='Z') && strcmp(c_xchng_cd,"NFO") == 0 ) || 
    			(c_bse_spn_flg == 'Y' && strcmp(c_xchng_cd,"BFO") == 0 ) )
  	{
    	fn_userlog(c_ServiceName, "SPAN Customer Trying To Place Order From OLD DL.");
    	strcpy(c_err_msg,"You Are Marked Under SPAN. Please Visit WebSite To Place Order.");
    	strcpy(c_err_msg,"You Are Marked Under SPAN.Can Place Order Only Through New Site.");
    	Fadd32(ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0);
    	Fadd32(ptr_fml_Obuf, FFO_ACTN_ID,(char *)&l_acnt_id, 0 );
			tpfree((char *)ptr_fml_Ibuf);
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0);
  	}		
	}
  
  *** VQC Comment Ends ***/

  /** ver 1.6 Ends **/

	/********************************************************/
	/*****Cannot Modify order in expiry Mode******************/
	/********************************************************/

		/*if(c_exg_crrnt_stts == 'X'	)
		{
			fn_userlog(c_ServiceName,"Cannot Modify order, Expiry is under way");
      fn_errlog( c_ServiceName, "S31085", "Cannot Modify order, Expiry is under way ", c_err_msg  );
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpfree((char *)ptr_fml_Ibuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
		}*/

	/*** Commented in ver 1.2
	***Cannot place Market or IOC orders in closed Status*****
	**********************************************************

		if(c_exg_crrnt_stts != 'O' && (c_lmt_mkt_sl_flg == 'M' || c_ord_typ == 'I'))
		{
			fn_userlog(c_ServiceName,"Cannot Modify to Mkt or IOC order, exchange is closed");
      fn_errlog( c_ServiceName,"S31090"
									,"Cannot place Mkt or IOC order, exchange is closed",c_err_msg  );
			strcpy(c_err_msg,"Cannot place Mkt or IOC order, exchange is closed");
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpfree((char *)ptr_fml_Ibuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
		}

		i_err[0] =Fget32(ptr_fml_Ibuf,FFO_LMT_RT,0,(char *)&l_lmt_rt,0) ;
    
		if(i_err[0] != -1 )
		{ 
				***************************************************
				*****Cannot Enter Lmt Price For Mkt Orders*********
				***************************************************

				if(c_lmt_mkt_sl_flg == 'M' && l_lmt_rt != 0)
				{
					fn_userlog(c_ServiceName,"Cannot Enter Limit price for Marke orders");
      		fn_errlog( c_ServiceName,"S31095"
											,"Cannot Enter Limit price for Market orders",c_err_msg  );
					strcpy(c_err_msg,"Cannot Enter Limit price for Market orders");
      		Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      		Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      		tpfree((char *)ptr_fml_Ibuf);
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
				}

				***************************************************
				*****Lmt Price Cannot Be Less Than Equal To 0******
				***************************************************

				if((c_lmt_mkt_sl_flg == 'L' || c_lmt_mkt_sl_flg == 'S') && l_lmt_rt <= 0 )
				{
					fn_userlog(c_ServiceName,"Limit Price Cannot be Less or Equal to Zero");
      		fn_errlog( c_ServiceName,"S31100"
											,"Limit Price Cannot be Less or Equal to Zero",c_err_msg  );
					strcpy(c_err_msg,"Limit Price Cannot be Less or Equal to Zero");
      		Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      		Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      		tpfree((char *)ptr_fml_Ibuf);
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
				}
		}
		else
		{
				***************************************************
				***Lmt Prc Has to be there for 'L' or 'S' orders***
				***************************************************

				if(c_lmt_mkt_sl_flg == 'L'  || c_lmt_mkt_sl_flg == 'S')
				{
					fn_userlog(c_ServiceName,"Please Enter Limit Price");
      		fn_errlog( c_ServiceName,"S31105",FMLMSG ,c_err_msg);
					strcpy(c_err_msg,"Please Enter Limit Price");
      		Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      		Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      		tpfree((char *)ptr_fml_Ibuf);
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
				}
		}

		i_err[0] = Fget32(ptr_fml_Ibuf,FFO_STP_LSS_TGR,0,(char *)&l_stp_lss_tgr,0) ;
    
		if(i_err[0] == -1)
		{
				***************************************************
				***SLTP price is necessary for Stop Loss Orders***
				**************************************************

				if(c_lmt_mkt_sl_flg == 'S')
				{
					fn_userlog(c_ServiceName,"SLTP cannot be Zero for SL orders");
      		fn_errlog( c_ServiceName,"S31110",FMLMSG ,c_err_msg);
					strcpy(c_err_msg,"Stop Loss Trigger Price cannot be Zero for Stop Loss orders");
      		Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      		Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      		tpfree((char *)ptr_fml_Ibuf);
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    		}
		}
		else
		{
				***************************************************
				***SLTP prc shouldn't be present for Market or Limit Orders**
				****************************************************
				if((c_lmt_mkt_sl_flg == 'M'  || c_lmt_mkt_sl_flg == 'L') && l_stp_lss_tgr !=0)
				{
					fn_userlog(c_ServiceName,"Cannot put Stop Loss price to market Orders");
        	fn_errlog( c_ServiceName,"S31115"
          	        ,"Cannot enter Stop Loss price for Market Orders",c_err_msg  );
        	Fadd32( ptr_fml_Obuf, FFO_ERR_MSG,"Cannot Enter Stop Loss price for Market Orders" , 0 );
        	Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        	tpfree((char *)ptr_fml_Ibuf);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
      	}			

				*********************************************************
				***SL trigger price cannot be Zero for Stop Loss order***
				*********************************************************

				if(l_stp_lss_tgr == 0 && c_lmt_mkt_sl_flg == 'S')
				{
					fn_userlog(c_ServiceName,"SL trigger price cannot be Zero");
       	 fn_errlog( c_ServiceName,"S31120"
       	           ,"Stop Loss trigger price cannot be Zero",c_err_msg  );
				  strcpy(c_err_msg,"Stop Loss trigger price cannot be Zero");
       	 Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
       	 Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       	 tpfree((char *)ptr_fml_Ibuf);
       	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
      	}

				*************************************************
				**For Buy SLTP ordr Trg Prc must exceed Lmt Rate*
				*************************************************

				if(c_ordr_flw == 'B' && l_stp_lss_tgr > l_lmt_rt && c_lmt_mkt_sl_flg == 'S')
				{
					fn_userlog(c_ServiceName,"SL trggr price cannot greater than Limit Price for Buy Order");
        	fn_errlog( c_ServiceName,"S31125"
         	      ,"Stop Loss trigger price cannot Greater than Limit Price for Buy Order",c_err_msg  );
					strcpy(c_err_msg,"Stop Loss trigger price cannot Greater than Limit Price for Buy Order");
        	Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
        	Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        	tpfree((char *)ptr_fml_Ibuf);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
      	}

				*************************************************
				**For Sell SLTP ordr Rate must exceed Trg Price**
			  *************************************************

				if(c_ordr_flw == 'S' && l_stp_lss_tgr < l_lmt_rt && c_lmt_mkt_sl_flg == 'S')
				{
					fn_userlog(c_ServiceName,"SL triggr prc cannot less than Limit Price for Sell Order");
        	fn_errlog( c_ServiceName,"S31130"
         	     ,"Stop Loss trigger price cannot Less than Limit Price for Sell Order",c_err_msg  );
					strcpy(c_err_msg,"Stop Loss trigger price cannot Less than Limit Price for Sell Order");
        	Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
        	Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        	tpfree((char *)ptr_fml_Ibuf);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
      	}
		}

		if(c_ord_typ == 'D')
		{
			i_err[0] = Fget32(ptr_fml_Ibuf,FFO_ORD_VALID_DT,0,(char *)c_ord_valid_dt,0) ;

			**For GTD orders Valid date should be present*****
			**************************************************
			if(i_err[0] == -1)
			{
					fn_userlog(c_ServiceName,"Please enter the valid date for GTD orders");
      		fn_errlog( c_ServiceName,"S31135",FMLMSG ,c_err_msg);
					strcpy(c_err_msg,"Please enter the valid date for GTD orders");
     		 	Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
     		 	Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     		 	tpfree((char *)ptr_fml_Ibuf);
     		 	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    	}

			EXEC SQL
			SELECT to_date(:c_ord_valid_dt,'dd-Mon-yyyy') - to_date(:c_exg_nxt_trd_dt,'dd-Mon-yyyy'),
						 to_date(:c_expry_dt,'dd-Mon-yyyy') - to_date(:c_ord_valid_dt,'dd-Mon-yyyy')
			INTO   :l_diff_nxt,
						 :l_diff_exp
			FROM DUAL ;

			if(SQLCODE != 0)
			{
				fn_userlog(c_ServiceName,"Error in selecting from dual ");
     	 fn_errlog( c_ServiceName, "S31140", SQLMSG, c_err_msg  );
     	 strcpy(c_err_msg,"Problem in Modifying Order,Please Contact Customer Support");
     	 Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
     	 Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     	 tpfree((char *)ptr_fml_Ibuf);
     	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    	}

			**************************************************
			**For GTD orders Valid date should be greater to**
			**Next Date ,not more than seven days ahead and***
			**should not be greater than Expiry Date**********
			**************************************************

			if((l_diff_nxt > 7 || l_diff_nxt <= 0) || (l_diff_exp <= 7 ))
			{		
					fn_userlog(c_ServiceName,"Please enter the valid date for GTD orders");
     		 	fn_errlog( c_ServiceName,"S31145"
     	             ,"Please enter the valid date for GTD orders",c_err_msg  );
					strcpy(c_err_msg,"Please enter the valid date for GTD orders");
     		 	Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
     		 	Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     		 	tpfree((char *)ptr_fml_Ibuf);
   		 	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    	}
		}
			
	*******************************************************
	*****Validation of the ASP part over*******************
	*******************************************************


	*****Replacement of exchange code *********************

	if(strcmp(c_xchng_cd,"NSE") == 0)
	{
			strcpy(c_xchng_cd,"NFO") ;
			Fchg32(ptr_fml_Ibuf,FFO_XCHNG_CD,0,(char *)c_xchng_cd,0);
	}
	*****Replacement of exchange code over*****************

	*********** ver 1.2 end of comments ***/

/*	if(DEBUG_MSG_LVL_3)
	{ */

   if(DEBUG_MSG_LVL_0)   /*** Added debug Level in Ver VQC ***/
   {
		fn_userlog(c_ServiceName,"FFO_USR_ID is :%s:",c_usr_id);
		fn_userlog(c_ServiceName,"FFO_SSSN_ID is :%ld:",l_sssn_id);
		fn_userlog(c_ServiceName,"FFO_PRDCT_TYP is :%c:",c_prdct_typ);
		fn_userlog(c_ServiceName,"FFO_XCHNG_CD is :%s:",c_xchng_cd);
/*	fn_userlog(c_ServiceName,"FFO_ORD_TYP is :%c:",c_ord_typ); */
		fn_userlog(c_ServiceName,"FFO_EBA_MTCH_ACT_NO is :%s:",c_clm_mtch_accnt);
   }
	/* } */

	/** Ver 1.6 Starts **/
 
  /*** Commented in Ver VQC ***

	if( ( (( c_spn_flg == 'Y' ) && strcmp(c_xchng_cd,"NFO") == 0 )
       ||
    	( c_bse_spn_flg == 'Y' && strcmp(c_xchng_cd,"BFO") == 0 ) )
			 &&
			( c_prdct_typ != 'P') ) *** Ver 2.0 enabling SPAN FP on DL.net 
 
    ******/

  if( c_spn_flg == 'S' &&  c_prdct_typ != 'P')  /*** Added in VQC ***/
  {
   strcpy(c_service_nm,"SFO_SPN_MOD_ORD");
  }
	else
	{
	/** Ver 1.6 Ends **/
		if(c_prdct_typ == 'F' || c_prdct_typ == 'P' || c_prdct_typ == 'U') /* ver 1.4 */   /*** SLTP F+ added Ver 1.8 ***/
		{
			strcpy(c_service_nm,"SFO_PLCMOD_FUT");
		}
		else if(c_prdct_typ == 'O' || c_prdct_typ == 'I' )    /*** Ver 1.9 ** 'I' Added ***/
		{
			strcpy(c_service_nm,"SFO_PLCMOD_OPT");
		}
		else
		{
   		fn_errlog( c_ServiceName, "S31150","Invalid type of order,Please Contact Customer Support", c_err_msg.arr  );  /* DataType of c_err_msg changed from char to varchar in VQC */
   		strcpy(c_err_msg.arr,"Invalid type of order,Please Contact Customer Support"); /* DataType of c_err_msg changed from
char to varchar in VQC */

      /*** Commented in VQC starts ***
      
   		Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
   		Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
			tpfree((char *)ptr_fml_Ibuf);
   		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
      
       *** VQC Comment Ends ***/

      /** Added in Ver VQC starts **/

      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, (char *)c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

      /** Ver VQC Ends **/
		}

	}

  /**** Commented in ver 1.2 Pipe id comes as input now ****	
	** Added for MP 1.1 **
    EXEC SQL
    SELECT  FOD_PIPE_ID
    INTO    :c_pipe_id
    FROM    FOD_FO_ORDR_DTLS
    WHERE   FOD_ORDR_RFRNC = :c_ordr_rfrnc ;

    if(SQLCODE != 0)
    {
      fn_userlog(c_ServiceName,"Error in selecting from Exchange master");
      fn_errlog( c_ServiceName, "S31155", SQLMSG, c_err_msg  );
      strcpy(c_err_msg,"Problem in Gettign the pipe id");
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
      Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      tpfree((char *)ptr_fml_Ibuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    }
	** Addition for MP 1.1 ends **

  if(Fadd32( ptr_fml_Ibuf, FFO_PIPE_ID, (char *)c_pipe_id, 0 ) == -1)
  {
			fn_userlog(c_ServiceName,"Error in Fadd32");
   		fn_errlog( c_ServiceName, "S31160", FMLMSG, c_err_msg  );
    	strcpy(c_err_msg,"Problem in Modifying Order,Please Contact Customer Support");
    	Fchg32( ptr_fml_Obuf, FFO_ERR_MSG, 0,c_err_msg, 0 );
    	Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
			tpfree((char *)ptr_fml_Ibuf);
   		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
  }

  ****************  Ver 1.2 Comment ends  ****************/

	/*******************************************************/
	/************Calling the service ***********************/
	/*******************************************************/
	if(tpcall(c_service_nm,(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0) == -1)
  {
			fn_userlog(c_ServiceName,"Inside call error");
			if(tperrno != TPESVCFAIL)	/** Ver 1.2:DL Revamp	Condition Added to preserve called svc error in case of failure ***/
			{
    		strcpy(c_err_msg.arr,"Problem in Modifying Order,Please Contact Customer Support"); /* DataType of c_err_msg changed
from char to varchar in VQC */
    		Fchg32( ptr_fml_Obuf, FFO_ERR_MSG, 0,c_err_msg.arr, 0 ); /* DataType of c_err_msg changed from char to varchar in
VQC */
			}
   		fn_errlog( c_ServiceName, "S31165", TPMSG, c_err_msg.arr  ); /* DataType of c_err_msg changed from char to varchar in
VQC */
    /**	Fchg32( ptr_fml_Obuf, FFO_ACTN_ID,0, (char *)&l_acnt_id, 0 ); *** Ver 2.4 ***/
			tpfree((char *)ptr_fml_Ibuf);
   		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
  }
  
	l_acnt_id = 0 ;
  strcpy(c_err_msg.arr,"Successfully Modified the order");  /* DataType of c_err_msg changed from char to varchar in VQC */
  Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); /* DataType of c_err_msg changed from char to varchar in VQC */
	Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );

  if(DEBUG_MSG_LVL_0)    /*** Added debug Level in Ver VQC ***/
  {
	 fn_userlog(c_ServiceName,"Before final success");
	}

  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );	

}
