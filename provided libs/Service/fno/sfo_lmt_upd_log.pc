/******************************************************************************/
/*  Program           : SFO_LMT_UPD_LOG                                       */
/*                                                                            */
/*  Input             : FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_TRD_DT                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_USR_ID                                            */
/*                      FFO_ROUT_CRT                                          */
/*                                                                            */
/*  Output            : FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_LIMIT                                             */
/*                      FFO_REMARKS                                           */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_TRD_DT                                            */
/*                      FFO_PAYIN_DT                                          */
/*                      FFO_PAYOUT_DT                                         */
/*                      FFO_GID                                               */
/*                      FFO_AMOUNT                                            */
/*                      FFO_BAL_AMT                                           */
/*                      FFO_ORD_AMT_BLKD                                      */
/*                                                                            */
/*  Description       : This service is intended to be called from the ASP    */
/*                      frontend in trading screen. This service supplies			*/ 
/*											Limits log for the match account, trade date or  			*/
/*                      the payin  date,user id and session id. 					    */
/*                                                                            */
/*  Log               : 											                                */
/*                                                                            */
/******************************************************************************/
/*      20-Jun-2007       Ver1.0        Vidyayini Krish       Release1.0      */
/*			01-Oct-2007				Ver1.1				Sushil Sharma					AIX Migration		*/
/*			11-May-2008       Ver1.2				Rohit	Change for Reallocation					*/
/*			23-Jan-2011				Ver1.3        Sandip Tambe	FNO BSE Changes					*/
/*      17-Mar-2020       Ver1.4        FPSL margin change CR-ISEC14-133200   */
/*      28-Oct-2020       Ver1.5        OPLUS margin change CR_ISEC14_139243  */ 
/*      28-JUN-2021       Ver1.6        Suchita Dabir CR-ISEC14-152927        */ 
/*      23-May-2023       Ver1.7        Vipul Sharma Core Fix									*/
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fo.h>
#include <fo_view_def.h>
#include <fo_fml_def.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>             /*  Ver 1.1 : Added 	*/
#include <fn_read_debug_lvl.h>  /*  Ver 1.1 : Added   */

#define MEMSET(A) memset(&A,'\0',sizeof(A))

void SFO_LMT_UPD_LOG( TPSVCINFO *rqst )
{

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  char c_ServiceName[33];
  char c_err_msg[256];
	char c_msg[100];
	char c_tag[100];
	char c_user_id[10];
  int i_err[5];
  int i_ferr[5];
  int i_cnt = 0;
	int i_counter = 1;
	long l_session_id = 0;
	int	 i_buflen = 0;				/*** Ver 1.1 : Data Type changed from long to int	***/
  char c_mtch_accnt_no[12];
  char c_from_dt[24];
	char c_exg_cd[4];
  char c_nrr_desc[100];
  char c_remarks[100];
  char c_dc_flg;
  double d_dc_amt = 0.0;
 double d_isec_withheld_amount = 0.0; /** ver 1.6 **/	
  struct vw_err_msg st_err_msg;

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.1 : Added   */

	strcpy(c_user_id, DEF_USR);
	/**strcpy(c_exg_cd,"NFO");						*** Ver 1.3 Comment ***/
	l_session_id = DEF_SSSN;


	if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.1 : Debug level Change  */
   fn_userlog( c_ServiceName, "Service Started.. ");
  }

	ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );
	/* Ver 1.7 Starts */
	if ( ptr_fml_Obuf == NULL )
	{
		fn_errlog( c_ServiceName, "S31005", TPMSG, c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0, 0 );	
	}
	/* Ver 1.7 Ends*/

  i_err[0] = Fget32( ptr_fml_Ibuf,FFO_EBA_MTCH_ACT_NO,0,c_mtch_accnt_no,0);
  i_ferr [0] = Ferror32;
  i_err[1] = Fget32( ptr_fml_Ibuf,FFO_FROM_DT,0,c_from_dt,0);
  i_ferr [1] = Ferror32;
	i_err[2] = Fget32(ptr_fml_Ibuf,FFO_XCHNG_CD,0,c_exg_cd,0);	/** ver 1.3 **/
	i_ferr[2] = Ferror32;																				/** Ver 1.3 **/

  /*for ( i_cnt=0; i_cnt < 2; i_cnt++ )												** Ver 1.3 comment **/
  for ( i_cnt=0; i_cnt < 3; i_cnt++ )									/** Ver 1.3 counter incremented to 3 **/
  {
    if ( i_err[ i_cnt ] == -1 )
    {
      fn_errlog( c_ServiceName, "S31010", Fstrerror32(i_ferr[i_cnt]), c_err_msg  );
      fn_userlog( c_ServiceName, "At Field %d", i_cnt);
			tpfree((char *)ptr_fml_Obuf);/** Ver 1.7 **/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }


  if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.1 : Debug level Change  */
    fn_userlog(c_ServiceName,"Mtch_Act_no : %s",c_mtch_accnt_no);
    fn_userlog(c_ServiceName,"c_trd_dt : %s",c_from_dt);
    fn_userlog(c_ServiceName,"c_exg_cd : %s",c_exg_cd);		/*** Ver 1.3 ***/
  }


	EXEC SQL
			 DECLARE lmt_log CURSOR FOR

			 SELECT FLL_CLM_MTCH_ACCNT,
       to_char(FLL_TRN_DT,'dd-Mon-YYYY hh24:mi:ss'),
       substr ( FNM_NARRATION_DESC, 0, 50), 
       nvl(substr ( FLL_REF_RMRKS, 0, 130 ),' '), /*** changed from 50 to 80 Ver 1.4 ***//*** 80 to 130 in Ver 1.5 ***/
       FLL_DC_FLG,
       FLL_DC_AMT / 100 ,
       NVL(FLL_ISEC_WITHHELD_AMT / 100,0) /*** ver 1.6 ***/ 
			 FROM FLL_FO_LMTUPD_LOG, FNM_FO_NARRATION_MSTR  
			 WHERE FLL_CLM_MTCH_ACCNT = :c_mtch_accnt_no
			 AND FLL_XCHNG_CD = :c_exg_cd
			 AND FLL_TRD_DT = :c_from_dt
			 AND FLL_NARRATION_ID = FNM_NARRATION_ID 
			 AND FLL_GRP_ID = FNM_GRP_ID
			 ORDER BY TRUNC(FLL_TRN_DT), FLL_SEQ_NUM; 

	if(SQLCODE != 0 )
	{

   fn_errlog(c_ServiceName,"S31015",SQLMSG,c_err_msg);
   fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
	 tpfree((char *)ptr_fml_Obuf); /** Ver 1.7 **/
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}	

	fn_userlog(c_ServiceName,"Created Cursor");		

	EXEC SQL
			 OPEN lmt_log;

	if(SQLCODE != 0 )
  {

     fn_errlog(c_ServiceName,"S31020",SQLMSG,c_err_msg);
     fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
		 tpfree((char *)ptr_fml_Obuf); /** Ver 1.7 **/
		 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	fn_userlog(c_ServiceName,"Opened cursor");

  while(1)
  {

    d_dc_amt = 0.0;
    MEMSET(c_mtch_accnt_no);
		MEMSET(c_from_dt);
		MEMSET(c_nrr_desc);
		MEMSET(c_remarks);	

		fn_userlog(c_ServiceName,"After MEMSETING");

    EXEC SQL  FETCH lmt_log
              INTO    :c_mtch_accnt_no,
                      :c_from_dt,
                      :c_nrr_desc,
                      :c_remarks,
                      :c_dc_flg,
                      :d_dc_amt,
                      :d_isec_withheld_amount; /** ver 1.6 ***/

    if(SQLCODE != 0)
    {
      if(SQLCODE == NO_DATA_FOUND )
      {
				EXEC SQL CLOSE lmt_log;
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );	
        break;
      }
      fn_errlog(c_ServiceName,"S31025",SQLMSG,c_err_msg);

      EXEC SQL CLOSE lmt_log;

			fn_errlog( c_ServiceName, "S31030", FMLMSG, c_err_msg  );
			tpfree((char *)ptr_fml_Obuf); /** Ver 1.7 **/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		rtrim(c_mtch_accnt_no);
		rtrim(c_from_dt);
		rtrim(c_nrr_desc);
		rtrim(c_remarks);

		fn_userlog(c_ServiceName,"After fetching into variable");
		fn_userlog(c_ServiceName,"Match Account is :%s:",c_mtch_accnt_no);
		fn_userlog(c_ServiceName,"From date is :%s:",c_from_dt);
		fn_userlog(c_ServiceName,"Narration Description is :%s:",c_nrr_desc);
		fn_userlog(c_ServiceName,"remarks is :%s:",c_remarks);
		fn_userlog(c_ServiceName,"Flag is :%c:",c_dc_flg);
		fn_userlog(c_ServiceName,"DC amount is :%lf:",d_dc_amt);
		fn_userlog(c_ServiceName,"ISEC withheld amount is :%lf:",d_isec_withheld_amount); /** ver 1.6 **/

		i_buflen = sizeof(c_mtch_accnt_no) +			/* Ver 1.1 : l_buflen changed to i_buflen */
                sizeof(c_from_dt) +
                sizeof(c_nrr_desc) +
                sizeof(c_remarks) +
                sizeof(c_dc_flg) +
                sizeof(d_dc_amt) +
                sizeof(d_isec_withheld_amount) + /*** ver 1.6 ***/
                512;

		if(Fneeded32(1,i_buflen) > Funused32(ptr_fml_Obuf) )	/* Ver 1.1 : l_buflen changed to i_buflen */
    {
      i_counter++;

			/* Ver 1.2 Starts */


      /*ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
                                    i_counter * MIN_FML_BUF_LEN);*/

				ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,(Fsizeof32(ptr_fml_Obuf)+(i_counter *MIN_FML_BUF_LEN)));
					/* Ver 1.2 Ends */
      if(ptr_fml_Obuf == NULL)
      {
				fn_errlog( c_ServiceName, "S31035", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
        /* Commented Ver 1.7 tpfree((char *)ptr_fml_Obuf); */
        EXEC SQL CLOSE lmt_log;
        tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
      }
    }

		 if ( Fadd32 ( ptr_fml_Obuf, FFO_EBA_MTCH_ACT_NO, (char *)c_mtch_accnt_no, 0 ) == -1 )
  	 {
			 EXEC SQL CLOSE lmt_log;
    	 fn_errlog( c_ServiceName, "S31040", FMLMSG, c_err_msg  );
			 tpfree((char *)ptr_fml_Obuf); /** Ver 1.7 **/
    	 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	 }

		 if ( Fadd32 ( ptr_fml_Obuf, FFO_FROM_DT, (char *)c_from_dt, 0 ) == -1 )
     {
			 EXEC SQL CLOSE lmt_log;
       fn_errlog( c_ServiceName, "S31045", FMLMSG, c_err_msg  );
			 tpfree((char *)ptr_fml_Obuf); /** Ver 1.7 **/
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

		 if ( Fadd32 ( ptr_fml_Obuf, FFO_PRDCT_DESC, (char *)c_nrr_desc, 0 ) == -1 )
     {
			 EXEC SQL CLOSE lmt_log;
       fn_errlog( c_ServiceName, "S31050", FMLMSG, c_err_msg  );
			 tpfree((char *)ptr_fml_Obuf); /** Ver 1.7 **/
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

		 if ( Fadd32 ( ptr_fml_Obuf, FFO_XCHNG_RMRKS, (char *)c_remarks, 0 ) == -1 )
     {
			 EXEC SQL CLOSE lmt_log;
       fn_errlog( c_ServiceName, "S31055", FMLMSG, c_err_msg  );
			 tpfree((char *)ptr_fml_Obuf); /** Ver 1.7 **/
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

		 if ( Fadd32 ( ptr_fml_Obuf, FFO_DR_CR_FLG, (char *)&c_dc_flg, 0 ) == -1 )
     {
			 EXEC SQL CLOSE lmt_log;
       fn_errlog( c_ServiceName, "S31060", FMLMSG, c_err_msg  );
			 tpfree((char *)ptr_fml_Obuf); /** Ver 1.7 **/
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

  	 if ( Fadd32 ( ptr_fml_Obuf, FFO_LIMIT, (char *)&d_dc_amt, 0 ) == -1 )
  	 {
			 EXEC SQL CLOSE lmt_log;
    	 fn_errlog( c_ServiceName, "S31065", FMLMSG, c_err_msg  );
			 tpfree((char *)ptr_fml_Obuf); /** Ver 1.7 **/
    	 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	 }
			/*** Ver 1.3 New Code Starts ***/
  	 if ( Fadd32 ( ptr_fml_Obuf, FFO_XCHNG_CD, (char *)c_exg_cd, 0 ) == -1 )
  	 {
			 EXEC SQL CLOSE lmt_log;
    	 fn_errlog( c_ServiceName, "S31070", FMLMSG, c_err_msg  );
			 tpfree((char *)ptr_fml_Obuf); /** Ver 1.7 **/
    	 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	 }
		/*** Ver 1.3 New Code Ends **/

			/*** Ver 1.6 New Code Starts ***/
  	 if ( Fadd32 ( ptr_fml_Obuf, FFO_C_ORG_OPN_VAL , (char *)&d_isec_withheld_amount, 0 ) == -1 )
  	 {
			 EXEC SQL CLOSE lmt_log;
    	 fn_errlog( c_ServiceName, "S31075", FMLMSG, c_err_msg  );
			 tpfree((char *)ptr_fml_Obuf); /** Ver 1.7 **/
    	 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	 }
		/*** Ver 1.6 New Code Ends **/
	}

  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );

}/* Service ends */


