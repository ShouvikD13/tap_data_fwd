/**************************************************************************************/
/*  Program     : SFO_MRGN_PLG                                                        */
/*                                                                                    */
/*  Input       : FFO_PLG_TYP                                                         */
/*                FFO_EXECN_DT                                                        */
/*                FFO_STCK_CD                                                         */
/*                FFO_DP_CLNT_ID                                                      */
/*                FFO_DPID                                                            */
/*                FFO_OPERATION_TYP                                                   */
/*  																																									*/
/*	Output    	: Return Success or Failure                                           */
/*     																																								*/
/*	Description	:	This service caters to Pledge Request Creation, Withdraw Request    */
/*								Creation (Closure), Invoke Request Creation, Pledge Confirmation,   */
/*								Withdrawal Confirmation and Invocation confirmation.                */
/*							  Note that pod order number is internal to EBA and is given when     */
/*								pledge/withdraw/invoke request is placed in EBA. PON or DPM number  */ 
/*							  are given by DP system for a successfull pledge confirmation.       */ 
/*								Based on this number only further withdrawal or invoke can be       */
/*								placed to DP.                                                       */
/*  																																									*/
/*	Log					:	1.0	01-Jul-2020	  Anand Dhopte                                      */
/*                1.1 15-Sep-2020   Tanmay Patel/Anand Dhopte                         */        	
/*                1.2 19-Sep-2020   Tanmay Patel                                      */
/*                1.3 05-Oct-2020   Tanmay Patel                                      */
/*                1.4 15-Dec-2020   Tanmay Patel                                      */
/*                1.5 14-Dec-2020   Anand Dhopte                                      */
/*                1.6 20-Sep-2021   Saurabh Patil                                     */
/*                1.7 27-Mar-2022   Samip M																						*/
/*                1.8 17-Oct-2022   Samip M																						*/
/*                1.9 03-Oct-2022   Tanmay Patel                                      */
/*                2.0 12-Dec-2022   Samip M                                           */
/*                2.1 09-Feb-2023 Samip M                                             */
/*                2.2 29-Mar-2023 Dipin                                               */
/**************************************************************************************/
/*								1.0 -	New Release for CR-ISEC14-138293 Margin Pledge model			    */
/*                1.1 - CR-ISEC04-142511-Pledge Rejection & Withdrawal Success 
                        allocation scenario handling Pledge Margin Changes and 
                        Duplicate Slip No Issue Fix                                   */
/*                1.2 - CR-ISEC04-142904 : SAM related changes for withdraw and       */
/*                      invocation order clubbing (additional parameters in nsdl requset)*/  
/*                1.3 - Minor changes for call DP through file                        */
/*                1.4 - CR-ISEC14-144001 : Segment Preference for Allocating Securities limit */
/*                1.5 - Dummy PON Fix                                                 */
/*                1.6 - CR-ISEC04-154041 : Changes in SAM Pledge Request/Status Book  */
/*                1.7 - Changes for Repledge																					*/
/*                1.8 - CR-ISEC18-177354 Discontinuation of NWB												*/
/*                1.9 - CR-ISEC14-162075 SAM in Currency and Commodity                */
/*                2.0 - Spot Invocation                                               */
/*                2.1 - Prev SAM                                                */
/*                2.2 - Real time margin reporting                                    */     
/**********************************************************************************************/

#include <stdio.h>      /* C Header File                */
#include <stdlib.h>     /* C Header File                */
#include <sqlca.h>      /* Oracle header file           */
#include <atmi.h>       /* TUXEDO Header File           */
#include <userlog.h>    /* TUXEDO Header File           */
#include <fml32.h>      /* TUXEDO Header File           */
#include <Usysflds.h>   /* TUXEDO Field Definitions     */
#include  <string.h>    /* C Header file                */      
#include <fn_read_debug_lvl.h>     

/* User defined h files */

#include <fml_def.h>    /* created for FML handling     */
#include <fo.h>
#include <fo_fml_def.h>
/** #include <fo_view_def.h> **/	/** Commented for  ***/
#include <fn_log.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_eqsam.h>			/**  */

EXEC SQL INCLUDE "table/pps_plg_pstn.h";
EXEC SQL INCLUDE "table/ltq_trd_qt.h";
EXEC SQL INCLUDE "table/fab_fo_alc_bft_smry.h";
EXEC SQL INCLUDE "table/dbd_dp_blck_dtls.h";
EXEC SQL INCLUDE "table/stk_stk_mstr.h";
EXEC SQL INCLUDE "table/ptm_tifp_mstr.h";
EXEC SQL INCLUDE "table/pod_plg_ordr_dtls.h";
EXEC SQL INCLUDE "table/pml_plg_mod_log.h";

int Z;
#define TOTAL_FML 25   /* changed to 23 from 20 in Ver 1.2 */    /** Changed to 25 for Ver 1.7  **/
#define BUF_MULTIPLY 1
#define BAT_POST(msg) if(c_tag_not_pres_flg == 'Y') fn_bat_pst_msg_fno(bat_ServiceName,msg,c_tag)
#define CDSL_ID "16"		/**/
#define CDSL_ID_2 "13"    /**/
#define PLG_REQ_FAIL 228
#define UNPLG_SUCC   229

int fn_mrgplg_sms_mail ( char *c_ServiceName,
                    char *c_clm_mtch_accnt,
                    long l_psn_no,
                    int  i_msg_code );
								
void SFO_MRGN_PLG(TPSVCINFO *rqst)
{
	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;
  FBFR32 *ptr_fml_Sbuf = (FBFR32 *)NULL;
  FBFR32 *ptr_fml_Rbuf = (FBFR32 *)NULL;
	int   i = 0,j = 0;
  char  c_ServiceName[33];
  int   i_err[TOTAL_FML];
  int   i_trnsctn;
  int   i_level_exists;
  int   i_returncode=0; /*Added */
  int   i_dp_flg=0; /* Added  */
  int   i_call_dp_flg=0;
  int   i_req_exist_chk = 0;
  int   i_fab_exist = 0;  /** Ver 1.4 **/
	long  l_acnt_id = 0;
	long  l_rec_cnt = 0;
	long  l_recvbuff = 0;
  char  c_err_msg[256];
	char  temp[200];
  char  c_null_msg [ 18 ];
	char  sql_oprn_typ;
	char  sql_plg_typ;
	char  sql_run_plg_typ;			/** Ver 1.7 **/
	char  cc_status_flg = '\0';	/** Ver 1.7 **/
	char  c_msg[256];
  char  c_tag[35];
	char  bat_ServiceName[33];
	char  c_narration[60+1];
	char  c_tag_not_pres_flg = 'N';
  char  c_upld_typ ='N';    /** Ver 1.3 **/
  char  c_rowid[19 + 1];
  char  cc_cm_rowid[18 + 1];
  char c_cmd_ln[100];/** Ver 1.4 **/
  char c_date[13];   /** Ver 1.4 **/ 
	/** char c_ordr_rfrnc[19]; ****/
	double d_qty_prc = 0.0;
	char c_seg_id = '\0';			/** Ver 1.7 **/
	varchar v_nse_stock_cd[20];		/** Ver 1.7 **/
	varchar v_rrd_stts_rmrks[300];	/** Ver 1.7 **/
  
  char c_ucc_cd[13]; /**ver 2.2 **/

	EXEC SQL BEGIN DECLARE SECTION;
	varchar sql_execn_dt[13];	
	varchar sql_execn_date[13];
	char sql_clsr_typ;
	varchar sql_clsr_dt[13];
	varchar sql_usr_code[4];
	long sql_tifp_qty;
	long l_run_no = 0;			/** Ver 1.7 **/
	varchar sql_isin_nmbr[13];
	varchar sql_pod_ref_no[19];	

  /**  starts **/
  varchar sql_dbd_dp_id_1[9];
  varchar sql_dbd_dp_clnt_id_1[9];
  varchar sql_mtch_accnt_1[11];
  varchar sql_isin_nmbr_1[13];
  /** ends **/

	varchar sql_dbd_dp_id[9];
	varchar sql_dbd_dp_clnt_id[9];
	varchar sql_dbd_dp_id_repledge[9];			/** Ver 1.7 **/
	varchar sql_dbd_dp_clnt_id_repledge[9];	/** Ver 1.7 **/
	char sql_stk_stck_cd[7];
	varchar sql_mtch_accnt[11];
	varchar v_ucc_cd[13];
	/** long sql_crt_slip_no = 0;
	long sql_conf_slip_no = 0; **/
	long long sql_crt_slip_no = 0;
	long long sql_conf_slip_no = 0;
	double sql_plg_val = 0.0;
	double sql_plg_rt = 0.0;        /***  ***/
	double sql_conf_plg_val = 0.0;  /***  ***/
	double sql_rej_plg_val  = 0.0;  /***  ***/
	long long ll_plg_val = 0;
	double sql_ptd_seq = 0.0;
	varchar sql_agree_nmbr[40];
	/** int sql_rtn_stts; ** Commented for Ver 1.7 **/
	long sql_rtn_stts = 0;		/** Ver 1.7 **/
	varchar sql_err_cd[7];
	varchar sql_err_desc[255];
	varchar sql_temp_err_desc[255];  /***  ***/
	varchar sql_rej_desc[255];
  varchar c_conf_date[13]; /*ver 1.7 - added By Swati*/
	long long sql_creation_slip_no;
	varchar sql_plg_stts[4];
	/** long sql_pon_nmbr; --commented **/
	double sql_pon_nmbr=0.0; /** **/ 
	long sql_free_qty = 0;
	long sql_to_upd_qty = 0;
	char c_iwtl_dp_accnt[18];
	char c_cdsl_iwtl_dp_accnt[18]; 	/**/
  char c_brk_cur_flg = 'N';
	varchar sql_rev_agree_nmbr[40];
	long sql_plg_vs_wd_qty = 0;
  long sql_plg_vs_wd_qty_rej = 0;
  long l_conf_qty= 0;   /***  ***/
  long l_rej_qty = 0;   /***  ***/
  long l_tot_qty = 0;   /***  ***/
  char sql_req_typ = '\0';  /*** ver 1.4 ***/

  double d_ordr_val =0;
  double d_conf_qty =0;
  double d_rjct_qty =0;
	char  c_channel[4];
	char  c_bpid[9];
	int   i_haircut=0;
	long  l_tifp_qty = 0;
	char  c_dpm_no_plg[14 +1];
	char  c_dpm_no_plg1[14 +1];			/** Ver 1.7 **/
	char  c_dpm_no_plg2[14 +1];			/** Ver 1.7 **/
	char  c_dpm_no_plg3[14 +1];			/** Ver 1.7 **/
	int i_plg_replg = 0;						/** Ver 1.7 **/
	long l_plg_tifp_qty = 0;				/** Ver 1.7 **/
	long l_pon_wise_replg_qty = 0;	/** Ver 1.7 **/
	long l_plg_without_replg = 0;		/** Ver 1.7 **/
	long l_tot_withdr_inv_tifp_qty = 0;	/** Ver 1.7 **/
	long l_tot_withdr_inv_with_replg = 0;	/** Ver 1.7 **/
	long l_tot_replg1_cls_tifp_qty = 0;	/** Ver 1.7 **/

	char  c_pod_ref_no_plg[18 +1];
	long  l_plg_vs_wd_qty_plg = 0;
	char  c_agree_nmbr_plg[40 + 1];
	long  l_free_qty_plg = 0;
	char  c_tifp_run_dt_plg[22];
	int 	i_counter = 0;
	long  l_rqst_qty = 0;

	long long sql_ptm_min_slip_no;
	long long sql_ptm_max_slip_no;
	long long sql_ptm_current_slip_no;
	double sql_ptm_current_slip_no_d;
	long sql_prs_seq = 0 ;						/** Ver 1.7 **/
	double d_pon_no_pledge = 0.0;		/** Ver 1.7 **/
	double d_pon_no_repledge = 0.0;		/** Ver 1.7 **/
	double d_pon_no_repledge1 = 0.0;		/** Ver 1.7 **/
	double d_pon_no_repledge2 = 0.0;		/** Ver 1.7 **/
	varchar v_agree_no_repledge[41];	/** Ver 1.7 **/	
	double sql_plg_dpm_no = 0.0;			/** Ver 1.7 **/
	int d_repledge2_cnt = 0;					/** Ver 1.7 **/
	int i_repledge_closure = 0;				/** Ver 1.7 **/
	double d_fab_amt = 0.0;						/** Ver 1.7 **/
	double d_eab_amt = 0.0;						/** Ver 1.7 **/
	double d_nwb_amt = 0.0;						/** Ver 1.7 **/
  double d_cab_amt = 0.0;           /** Ver 1.9 **/
  double d_cod_amt = 0.0;           /** Ver 1.9 **/
 
	 /* long sql_dpm_nmbr_rej; --commented  */
	double sql_dpm_nmbr_rej =0.0 ;  /*  */   
	char c_iwtl_dp_accnt_dpid[9];
	char c_iwtl_dp_accnt_clntid[9];
	char c_cdsl_iwtl_dp_accnt_dpid[9]; 	/**/
	char c_cdsl_iwtl_dp_accnt_clntid[9]; 	/**/

	char c_seg_code[3];
	char c_plg_type[3];
  
  /*** Ver 1.2 Starts ***/
  char c_exg_id[3];
  char c_cm_id[7];
  char c_tm_id[6];
  char c_pod_channel[4];		/** Ver 2.0 **/
  /*** Ver 1.2 Ends ***/

		/*** Added for Ver 1.7 **/
		varchar sql_ptd_pod_ref_no[19];
		varchar sql_ptd_clm_mtch_accnt[11];
		varchar sql_ptd_dp_id[9];
		varchar sql_ptd_dp_clnt_id[9];
		varchar sql_ptd_isin_nmbr[13];
		long upd_qty = 0;
		long sql_ptd_tifp_qty = 0;
		long sql_ptd_replg2_qty = 0;
		long sql_ptd_replg1_qty = 0;
		long qty_remaining_to_cls = 0;
		/** End for Ver 1.7 **/

  varchar c_pon_num[20];   /*** Ver 1.5 ***/
  int i_valid_pon = 0;  /*** Ver 1.5 ***/
	double d_inv_value = 0.0;
	EXEC SQL END DECLARE SECTION;


	INITDBGLVL(c_ServiceName);          

	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  ptr_fml_Obuf = (FBFR32 *)NULL;
  strcpy( c_ServiceName, rqst->name );

	strcpy(c_null_msg,"\0");

	MEMSET(sql_execn_dt);

	memset(temp,'\0',sizeof(temp));
	memset(c_msg,'\0',sizeof(c_msg));
	memset(c_tag,'\0',sizeof(c_tag));
	memset(c_iwtl_dp_accnt,'\0',sizeof(c_iwtl_dp_accnt));
	memset(c_cdsl_iwtl_dp_accnt,'\0',sizeof(c_cdsl_iwtl_dp_accnt)); /* Added  */
	memset(bat_ServiceName,'\0',sizeof(bat_ServiceName));

	memset(c_iwtl_dp_accnt_dpid,'\0',sizeof(c_iwtl_dp_accnt_dpid));
	memset(c_iwtl_dp_accnt_clntid,'\0',sizeof(c_iwtl_dp_accnt_clntid));
	memset(c_cdsl_iwtl_dp_accnt_dpid,'\0',sizeof(c_cdsl_iwtl_dp_accnt_dpid));
	memset(c_cdsl_iwtl_dp_accnt_clntid,'\0',sizeof(c_cdsl_iwtl_dp_accnt_clntid));

	MEMSET(sql_dbd_dp_id);
	MEMSET(sql_dbd_dp_clnt_id);
	MEMSET(sql_mtch_accnt);
	MEMSET(sql_isin_nmbr);
	MEMSET(sql_pod_ref_no);
	MEMSET(sql_execn_dt);

  i_err[0] = Fget32(ptr_fml_Ibuf,FFO_OPERATION_TYP,0,(char *)&sql_oprn_typ,0);
  i_err[1] = Fget32(ptr_fml_Ibuf,FFO_PLG_TYP,0,(char *)&sql_plg_typ,0);
  i_err[2] = Fget32(ptr_fml_Ibuf,FFO_REQ_TYP,0,(char *)&sql_req_typ,0); /***ver 1.4***/
	i_err[3] = Fget32(ptr_fml_Ibuf,FFO_PLG_REV_TYP,0,(char *)&sql_run_plg_typ,0); /***ver 1.7 , Same old variable, new FML ***/

	for(j=0;j < 4;j++) /** Change from 2 to 3 in Ver 1.4 **/	/** Changed to 4 for Ver 1.7 **/
  {

    if(i_err[j] == -1) 
    {
      if((j == 2)&& (Ferror32 == FNOTPRES))  /** FNOTPRES Handled in Ver 1.4 **/
      {
        sql_req_typ = 'N';
      }
			/** Added for Ver 1.7 **/
			else if (j == 3 && Ferror32 == FNOTPRES)
			{
				if (sql_plg_typ == 'W')
				{
					sql_run_plg_typ = 'W';
				}
				else if (sql_plg_typ == 'I')
				{
					sql_run_plg_typ = 'I';
				}
			}
			/** End for Ver 1.7 **/
      else
      {
        fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
        fn_userlog(c_ServiceName, "The Fget32 error at [%d]",j);
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

      }
    }
  }

  fn_userlog(c_ServiceName,"Value of sql_oprn_typ :%c:",sql_oprn_typ);
  fn_userlog(c_ServiceName,"Value of sql_plg_typ :%c:",sql_plg_typ);


	MEMSET(v_agree_no_repledge);	/** Ver 1.7 **/
	d_pon_no_repledge = 0.0;			/** Ver 1.7 **/
	MEMSET(sql_stk_stck_cd);			/** Ver 1.7 **/
	sql_tifp_qty = 0;							/** Ver 1.7 **/
	MEMSET(c_pod_channel);				/** Ver 2.0 **/

	if (sql_oprn_typ == 'R')
	{
	i_err[0] = Fget32(ptr_fml_Ibuf,FFO_DPID,0,(char *)sql_dbd_dp_id.arr,0);
  i_err[1] = Fget32(ptr_fml_Ibuf,FFO_DP_CLNT_ID,0,(char *)sql_dbd_dp_clnt_id.arr,0);
  i_err[2] = Fget32(ptr_fml_Ibuf,FFO_STCK_CD,0,(char *)sql_stk_stck_cd,0);
  i_err[3] = Fget32(ptr_fml_Ibuf,FFO_EBA_MTCH_ACT_NO,0,(char *)sql_mtch_accnt.arr,0);
  i_err[4] = Fget32(ptr_fml_Ibuf,FFO_ISIN_NMBR,0,(char *)sql_isin_nmbr.arr,0);
  i_err[5] = Fget32(ptr_fml_Ibuf,FFO_TIFP_QTY,0,(char *)&sql_tifp_qty,0);
 /**  i_err[6] = Fget32(ptr_fml_Ibuf,FFO_SPRD_ORD_REF,0,(char *)sql_pod_ref_no.arr,0); ** Commented in Ver 1.3 **/
  i_err[6] = Fget32(ptr_fml_Ibuf,FFO_EXECN_DT,0,(char *)sql_execn_dt.arr,0);
	i_err[7] = Fget32(ptr_fml_Ibuf,FFO_SOMC_PRCNT,0,(char *)&d_pon_no_repledge,0);
  i_err[8] = Fget32(ptr_fml_Ibuf,FFO_REF_NO,0,(char *)v_agree_no_repledge.arr,0);
  i_err[9] = Fget32(ptr_fml_Ibuf,FFO_RUN_NUM,0,(char *)&l_run_no,0);		/** Ver 1.7 **/
  i_err[10] = Fget32(ptr_fml_Ibuf,FFO_CHANNEL,0,(char *)c_pod_channel,0);   /** Ver 2.0 **/
		
	SETLEN(v_agree_no_repledge);
	SETNULL(v_agree_no_repledge);


  for(j=0;j < 11; j++) /** Chnage from 8 to 7 in Ver 1.3 **/  /** Changed from 7 to 10 for Ver 1.7 **//** 11 for Ver 2.0 **/
  {
    if(i_err[j] == -1)
		{
			/** Added for Ver 1.7 **/
      if((j == 7)&& (Ferror32 == FNOTPRES))  /** FNOTPRES Handled in Ver 1.4 **/
      {
				fn_userlog(c_ServiceName,"Inside fnotpress for 7");
        d_pon_no_repledge = 0.0;
      }
			else if ((j == 8)&& (Ferror32 == FNOTPRES))
			{
				fn_userlog(c_ServiceName,"Inside fnotpress for 8");
				strcpy(v_agree_no_repledge.arr," ");
			}
			else if ((j == 9)&& (Ferror32 == FNOTPRES))
			{
				fn_userlog(c_ServiceName,"Inside fnotpress for 9");
				l_run_no = 0;
			}
			/** End for Ver 1.7 **/
      /** Ver 2.0 **/
      else if ((j == 10)&& (Ferror32 == FNOTPRES))
      {
        fn_userlog(c_ServiceName,"Inside fnotpress for 10");
        strcpy(c_pod_channel," ");
      }
    	else 
    	{
      	fn_errlog(c_ServiceName, "S31010", FMLMSG, c_err_msg);
      	fn_userlog(c_ServiceName, "The Fget32 error at [%d]",j);
      	l_acnt_id = -1;
      	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
		}
  }

	SETLEN(v_agree_no_repledge);		/** Ver 1.7 **/
	SETNULL(v_agree_no_repledge);		/** Ver 1.7 **/

  fn_userlog(c_ServiceName,"Value of sql_dbd_dp_id :%s:",sql_dbd_dp_id.arr);
  fn_userlog(c_ServiceName,"Value of sql_dbd_dp_clnt_id :%s:",sql_dbd_dp_clnt_id.arr);
  fn_userlog(c_ServiceName,"Value of sql_stk_stck_cd :%s:",sql_stk_stck_cd);
  fn_userlog(c_ServiceName,"Value of sql_mtch_accnt :%s:",sql_mtch_accnt.arr);
  fn_userlog(c_ServiceName,"Value of sql_isin_nmbr :%s:",sql_isin_nmbr.arr);
  fn_userlog(c_ServiceName,"Value of sql_tifp_qty :%ld:",sql_tifp_qty);
  fn_userlog(c_ServiceName,"Value of sql_execn_dt :%s:",sql_execn_dt.arr);
	fn_userlog(c_ServiceName,"Value of d_pon_no_repledge :%lf:",d_pon_no_repledge);		/** Ver 1.7 **/
	fn_userlog(c_ServiceName,"Value of v_agree_no_repledge :%s:",v_agree_no_repledge.arr);		/** Ver 1.7 **/
  fn_userlog(c_ServiceName,"Value of c_pod_channel :%s:",c_pod_channel);    /** Ver 2.0 **/

  /*** Ver 1.3 Starts ***/
  i_err[0] = Fget32(ptr_fml_Ibuf,FFO_UPLD_MTCH_FLG,0,(char *)&c_upld_typ,0);

  if((i_err[0] == -1) && (Ferror32 != FNOTPRES))
  {
    fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg  );
    l_acnt_id = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  
  if ( (i_err[0] == -1) && (Ferror32 == FNOTPRES) )
  {
    fn_userlog(c_ServiceName,"Upload flag not present."); 
    c_upld_typ = 'N';
  }

  fn_userlog(c_ServiceName,"Value of c_upld_typ :%c:",c_upld_typ);

  if ( c_upld_typ == 'N')
  {
     i_err[0] = Fget32(ptr_fml_Ibuf,FFO_SPRD_ORD_REF,0,(char *)sql_pod_ref_no.arr,0);

     if(i_err[0] == -1)
     {
       fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg  );
       l_acnt_id = -1;
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
  }
  else 
  {
     MEMSET(c_rowid);

     i_err[0] = Fget32(ptr_fml_Ibuf,FFO_SPRD_ORD_REF,0,(char *)c_rowid,0);

     if(i_err[0] == -1)
     {
       fn_errlog( c_ServiceName, "S31025", FMLMSG, c_err_msg  );
       l_acnt_id = -1;
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
     
     rtrim(c_rowid); 
  }

  /*** Ver 1.3 Ends ***/

	}

	SETLEN(sql_dbd_dp_id);
	SETLEN(sql_dbd_dp_clnt_id);
	SETLEN(sql_mtch_accnt);
	SETLEN(sql_isin_nmbr);
	SETLEN(sql_pod_ref_no);
	SETLEN(sql_execn_dt);
	SETNULL(sql_dbd_dp_id);
	SETNULL(sql_dbd_dp_clnt_id);
	SETNULL(sql_mtch_accnt);
	SETNULL(sql_isin_nmbr);
	SETNULL(sql_pod_ref_no);
	SETNULL(sql_execn_dt);

	fn_userlog(c_ServiceName,"Value of sql_oprn_typ :%c:",sql_oprn_typ);
	fn_userlog(c_ServiceName,"Value of sql_plg_typ :%c:",sql_plg_typ);
	fn_userlog(c_ServiceName,"Value of sql_dbd_dp_id :%s:",sql_dbd_dp_id.arr);
	fn_userlog(c_ServiceName,"Value of sql_dbd_dp_clnt_id :%s:",sql_dbd_dp_clnt_id.arr);
	fn_userlog(c_ServiceName,"Value of sql_stk_stck_cd :%s:",sql_stk_stck_cd);
	fn_userlog(c_ServiceName,"Value of sql_mtch_accnt :%s:",sql_mtch_accnt.arr);
	fn_userlog(c_ServiceName,"Value of sql_isin_nmbr :%s:",sql_isin_nmbr.arr);
	fn_userlog(c_ServiceName,"Value of sql_tifp_qty :%ld:",sql_tifp_qty);
	fn_userlog(c_ServiceName,"Value of sql_pod_ref_no :%s:",sql_pod_ref_no.arr);
	fn_userlog(c_ServiceName,"Value of sql_execn_dt :%s:",sql_execn_dt.arr);

  /** if condition uncommented in Ver 1.3 **/
  if ( sql_oprn_typ == 'R' && c_upld_typ == 'D' && ( sql_plg_typ == 'W' || sql_plg_typ == 'I'))
  {

   MEMSET(sql_pon_nmbr); /** Ver 1.3 **/
   i_err[0] = Fget32(ptr_fml_Ibuf,FFO_JIFFY,0,(char *)&sql_pon_nmbr ,0);   
   /**i_err[1] = Fget32(ptr_fml_Ibuf,FFO_AGREE_NO,0,(char *)sql_agree_nmbr.arr ,0);**/ 

   for(j=0;j < 1;j++)
   {

    if(i_err[j] == -1)
    {
      fn_errlog( c_ServiceName, "S31030", FMLMSG, c_err_msg  );
      fn_userlog(c_ServiceName, "The Fget32 error at [%d]",j);
      l_acnt_id = -1;
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
   }

  } 
    /****** Samip **
  else if( sql_oprn_typ == 'C' )
  {

   if( Fget32(ptr_fml_Ibuf,FFO_CONF_SLIP_NO,0,(char *)&sql_creation_slip_no ,0) == -1 )
   {
     fn_errlog( c_ServiceName, "S31035", FMLMSG, c_err_msg  );
     fn_userlog(c_ServiceName, "Error in Fget of Slip no.");
     l_acnt_id = -1;
     Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   } 

  
  } **** Samip ***/

  /***  Ends ***/

  SETLEN(sql_execn_dt);
	SETNULL(sql_execn_dt);

  /* This service will be called either by bat_prcs_tifp or through URL. If it is called by bat_prcs_tifp then               we need to show console messages. For this we need the c_tag variable as NFO to post the messages.
     When this service is called from URL, there field FFO_BAT_TAG will not be present,in which case    
     the c_tag_not_pres_flg is set as N and BAT_POST macro will not be called. */

  i_err[0] = Fget32(ptr_fml_Ibuf,FFO_BAT_TAG,0,(char *)c_tag,0);
	
	if((i_err[0] == -1) && (Ferror32 != FNOTPRES))
  {
		fn_errlog( c_ServiceName, "S31040", FMLMSG, c_err_msg  );
    l_acnt_id = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	c_brk_cur_flg = 'N';

	if(Ferror32 != FNOTPRES)
	{
		c_tag_not_pres_flg = 'Y'; 
	}

 
	strcpy (bat_ServiceName,"bat_prcs_tifp_NFO");

	fn_userlog(c_ServiceName, "The Date entered by user b4 manipulation [%s]",sql_execn_dt.arr);
	
	/* The Closure date has been hard coded as 5 days hence of the Execution date enetered from the Front End        */
	if (sql_oprn_typ == 'R')
	{
	
	MEMSET(sql_execn_date);
	MEMSET(sql_clsr_dt);

	EXEC SQL 
			 SELECT to_char(to_date(:sql_execn_dt,'DD/MM/YYYY'),'DD-Mon-YYYY'),
	            to_char(to_date((sysdate + 5),'DD/MM/YYYY'),'DD-Mon-YYYY')
	     INTO   :sql_execn_date,
	            :sql_clsr_dt 
	     FROM   dual;
	
	SETNULL(sql_execn_date);
	SETNULL(sql_clsr_dt);

	if(DEBUG_MSG_LVL_3){
	fn_userlog(c_ServiceName, "The Date entered by user is [%s]",sql_execn_date.arr);
	fn_userlog(c_ServiceName, "The Date for closure is [%s]",sql_clsr_dt.arr);
	}

	if( SQLCODE !=0 )
  {
  	fn_errlog( c_ServiceName, "S31045", SQLMSG, c_err_msg  );
		fn_userlog(c_ServiceName, "The Date entered by user is [%s]",sql_execn_date.arr);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    l_acnt_id = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	}

  /* The IWTl DP account is maintained in the PPP table. This has to match with that maintained in Demat  */

/*Added */

    EXEC SQL
       /** SELECT  ppp_iwtl_dp_accnt,
							 ppp_cdsl_iwtl_dp_accnt ***/
       SELECT  PPP_MARGIN_NSDL,
							 PPP_MARGIN_CDSL,
       				 SUBSTR(PPP_MARGIN_NSDL,1,8),SUBSTR(PPP_MARGIN_NSDL,9,16),
       				 SUBSTR(PPP_MARGIN_CDSL,1,8),SUBSTR(PPP_MARGIN_CDSL,9,16)
       INTO    :c_iwtl_dp_accnt,
							 :c_cdsl_iwtl_dp_accnt,
							 :c_iwtl_dp_accnt_dpid,:c_iwtl_dp_accnt_clntid,
							 :c_cdsl_iwtl_dp_accnt_dpid,:c_cdsl_iwtl_dp_accnt_clntid
       FROM    ppp_par_plg_prmtr; 

/*Addtion Close */

	if( SQLCODE !=0 )
  {
  	fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg  );
		fn_userlog(c_ServiceName, "The Date entered by user is [%s]",sql_execn_date.arr);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    l_acnt_id = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	fn_userlog(c_ServiceName, "The IWTL Accnt is [%s]",c_iwtl_dp_accnt);
	fn_userlog(c_ServiceName, "The CDSL IWTL Accnt is [%s]",c_cdsl_iwtl_dp_accnt); /* Added  */

  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN * BUF_MULTIPLY );

	if (ptr_fml_Obuf == NULL)
	{
		fn_errlog(c_ServiceName, "S31055", TPMSG, c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
    Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
  }

	l_rec_cnt = 0;

  fn_userlog(c_ServiceName, "The value of oprn type is [%c]",sql_oprn_typ);	
  fn_userlog(c_ServiceName, "The value of sql_plg_typ  is [%c]",sql_plg_typ);	

	if (sql_oprn_typ == 'R')
	{
		MEMSET(v_ucc_cd);

    EXEC SQL
			SELECT TRIM(NVL(TRIM(CLM_CLNT_CD), CLM_MTCH_ACCNT))
			INTO :v_ucc_cd
			FROM clm_clnt_mstr
			WHERE clm_mtch_accnt= :sql_mtch_accnt;

	if( SQLCODE !=0 )
  {
  	fn_errlog( c_ServiceName, "S31060", SQLMSG, c_err_msg  );
		fn_userlog(c_ServiceName, "The Date entered by user is [%s]",sql_execn_date.arr);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
		
		SETLEN(v_ucc_cd);
		SETNULL(v_ucc_cd);

	fn_userlog(c_ServiceName, "UCC Code is [%s]",v_ucc_cd.arr);

			i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

  		if ( i_trnsctn == -1 )
  		{
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		fn_errlog( c_ServiceName, "S31065",LIBMSG,c_err_msg);
    		l_acnt_id = -1;
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    		tpfree ( ( char * )ptr_fml_Obuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

				fn_userlog(c_ServiceName,"Inside flow of sql_plg_typ :%c: and sql_run_plg_typ :%c:",sql_plg_typ,sql_run_plg_typ);
      if ( c_upld_typ == 'N')  /** if condition added in Ver 1.3 **/
      {

			if (sql_plg_typ == 'P')
			{

        fn_userlog(c_ServiceName, "The value of sql_plg_typ  is [%c]",sql_plg_typ);	
				if(strncmp(sql_dbd_dp_id.arr,CDSL_ID, 1) == 0 )  /* changed 2 to 1 ver 1.7 cheking till 1st position for CDSL*/
        {
            i_dp_flg = 1;
        }
        else
        {
           i_dp_flg = 0;
        }
/************tanmay ************/

       EXEC SQL
        SELECT COUNT(1)
        INTO   :i_req_exist_chk
        FROM   PTD_TIFP_DTLS
        WHERE  trim(PTD_POD_REF_NO) = trim(:sql_pod_ref_no)
        AND    ptd_dp_id = :sql_dbd_dp_id
        AND    ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
        AND    ptd_isin_nmbr = :sql_isin_nmbr
        AND    ptd_plg_rev_typ = 'P'
        AND    ptd_tifp_stts = 'N'
        AND    ptd_slipno_l1 is NULL;

        if(SQLCODE != 0)
        {
           fn_errlog(c_ServiceName, "S31070", SQLMSG, c_err_msg);
           fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           tpfree ( ( char * )ptr_fml_Obuf);
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

       if ( i_req_exist_chk == 0 )
       {

   			EXEC SQL
            INSERT INTO PTD_TIFP_DTLS
            (
                PTD_CLM_MTCH_ACCNT,
                PTD_STCK_CD,
                PTD_TIFP_QTY,
                PTD_PLG_REV_TYP,
                PTD_ISIN_NMBR,
                PTD_DP_ID,
                PTD_DP_CLNT_ID,
                PTD_POD_REF_NO,
                PTD_TIFP_RUN_DT,
                PTD_PLG_VS_WD_QTY,
                PTD_TIFP_STTS,
                PTD_IWTL_DP_ACCNT,
                PTD_CHANNEL         /** Ver 2.0 **/
            )
            values
            (
                :sql_mtch_accnt,
                :sql_stk_stck_cd,
                :sql_tifp_qty,
                :sql_plg_typ,
                :sql_isin_nmbr,
                :sql_dbd_dp_id,
                :sql_dbd_dp_clnt_id,
                :sql_pod_ref_no,
                to_date(SYSDATE,'dd-mm-yyyy hh24:mi:ss'),
                0,
                'N',
                decode(:i_dp_flg, 1,:c_cdsl_iwtl_dp_accnt,:c_iwtl_dp_accnt),
                :c_pod_channel          /** Ver 2.0 **/
            );

 						if(SQLCODE != 0)
            {
                fn_errlog(c_ServiceName, "S31075", SQLMSG, c_err_msg);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    						tpfree ( ( char * )ptr_fml_Obuf);
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }
        }
				else
				{
					EXEC SQL
        	UPDATE   PTD_TIFP_DTLS
					SET 			PTD_TIFP_QTY = :sql_tifp_qty
        	WHERE  trim(PTD_POD_REF_NO) = trim(:sql_pod_ref_no)
        	AND    ptd_dp_id = :sql_dbd_dp_id
        	AND    ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
        	AND    ptd_isin_nmbr = :sql_isin_nmbr
        	AND    ptd_plg_rev_typ = 'P'
        	AND    ptd_tifp_stts = 'N'
        	AND    ptd_slipno_l1 is NULL;

        	if(SQLCODE != 0)
        	{
           	fn_errlog(c_ServiceName, "S31080", SQLMSG, c_err_msg);
           	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
           	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           	tpfree ( ( char * )ptr_fml_Obuf);
           	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}
				}
		}
		/** else if (sql_plg_typ == 'W' || sql_plg_typ == 'I')	*** Commented for Ver 1.7 ***/
		else if ((sql_plg_typ == 'W' && sql_run_plg_typ == 'X') || (sql_plg_typ == 'I' && sql_run_plg_typ == 'J') || (sql_plg_typ == 'I' && sql_run_plg_typ == 'R'))      /* Type flag change for Record Generation for Ver 1.7 **/ /** R added for Ver 2.0 **/
		{
				fn_userlog(c_ServiceName,"Inside flow of sql_plg_typ :%c: and sql_run_plg_typ :%c:",sql_plg_typ,sql_run_plg_typ);

       EXEC SQL
        SELECT COUNT(1)
        INTO   :i_req_exist_chk
        FROM   PTD_TIFP_DTLS
        WHERE  trim(PTD_POD_REF_NO) = trim(:sql_pod_ref_no)
        AND    ptd_dp_id = :sql_dbd_dp_id
        AND    ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
        AND    ptd_isin_nmbr = :sql_isin_nmbr
        AND    ptd_plg_rev_typ = :sql_plg_typ
        AND    ptd_tifp_stts = 'N'
        AND    ptd_slipno_l1 is NULL
       	AND   1 = (CASE
                    WHEN :sql_plg_typ = 'I' AND :sql_run_plg_typ = 'J' AND PTD_CHANNEL = 'SYS' THEN 1
                    WHEN :sql_plg_typ = 'I' AND :sql_run_plg_typ = 'R' AND PTD_CHANNEL <> 'SYS' THEN 1
                    WHEN :sql_plg_typ = 'W' THEN 1
                    ELSE 0
                  END);   /** CASE added for Ver 2.0 **/

      if ( SQLCODE != 0 )
      {
          fn_errlog(c_ServiceName, "S31085", SQLMSG, c_err_msg);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

      }
			fn_userlog(c_ServiceName,"Value of i_req_exist_chk :%d:",i_req_exist_chk);

      if ( i_req_exist_chk == 0 )
      {
      EXEC SQL
      	DECLARE TIFP_CURSOR CURSOR FOR
        SELECT  ( PTD_TIFP_QTY - NVL(PTD_PLG_VS_WD_QTY,0) )as avlb,
        NVL(PTD_PLG_VS_WD_QTY,0),
        to_char(PTD_TIFP_RUN_DT,'dd-mm-yyyy hh24:mi:ss'),
        trim(PTD_DPM_NMBR),
        trim(PTD_POD_REF_NO),
        trim(PTD_AGREE_NMBR),
				trim(NVL(PTD_DPM_NMBR1,0)),				/** Ver 1.7 **/
				trim(NVL(PTD_DPM_NMBR2,0)),				/** Ver 1.7 **/
				trim(NVL(PTD_DPM_NMBR3,0))				/** Ver 1.7 **/
        FROM    PTD_TIFP_DTLS
        WHERE   PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
        AND     PTD_DP_ID             = :sql_dbd_dp_id
        AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
        AND     PTD_STCK_CD           = :sql_stk_stck_cd
        AND     PTD_PLG_REV_TYP       = 'P'
        AND     PTD_LEG_NO            = 'L5'
        AND     PTD_TIFP_STTS         = 'P'
        AND     ( PTD_TIFP_QTY - NVL(PTD_PLG_VS_WD_QTY,0) ) > 0
        ORDER BY trim(PTD_POD_REF_NO) DESC;

 			if ( SQLCODE != 0 )
      {
          fn_errlog(c_ServiceName, "S31090", SQLMSG, c_err_msg);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			tpfree ( ( char * )ptr_fml_Obuf);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

      }
      EXEC SQL OPEN TIFP_CURSOR;

 			if ( SQLCODE != 0 )
      {
          fn_errlog(c_ServiceName, "S31095", SQLMSG, c_err_msg);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			tpfree ( ( char * )ptr_fml_Obuf);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

      }

      i_counter = 0;
			l_rqst_qty = sql_tifp_qty;
      while(1)
      {
        	fn_userlog( c_ServiceName, "Fetching Opposit Pledge Order ");

        l_free_qty_plg = 0;
        l_plg_vs_wd_qty_plg = 0;
        MEMSET(c_dpm_no_plg);
        MEMSET(c_pod_ref_no_plg);
        MEMSET(c_tifp_run_dt_plg);
        MEMSET(c_agree_nmbr_plg);
				MEMSET(c_dpm_no_plg1);				/** Ver 1.7 **/
				MEMSET(c_dpm_no_plg2);				/** Ver 1.7 **/
				MEMSET(c_dpm_no_plg3);				/** Ver 1.7 **/

        EXEC  SQL FETCH TIFP_CURSOR
        INTO  :l_free_qty_plg,
        			:l_plg_vs_wd_qty_plg,
              :c_tifp_run_dt_plg,
              :c_dpm_no_plg,
              :c_pod_ref_no_plg,
              :c_agree_nmbr_plg,
							:c_dpm_no_plg1,				/** Ver 1.7 **/
							:c_dpm_no_plg2,				/** Ver 1.7 **/
							:c_dpm_no_plg3;				/** Ver 1.7 **/

 				if ( SQLCODE != 0 )
        {
           if ( SQLCODE == NO_DATA_FOUND )
           {
              EXEC SQL CLOSE TIFP_CURSOR;
              break;
           }
           else
           {
              EXEC SQL CLOSE TIFP_CURSOR;
              fn_errlog( c_ServiceName, "S31100", SQLMSG, c_err_msg  );
              fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
              fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }
         }
         i_counter++;

				fn_userlog( c_ServiceName, "Stock Code :%s:",sql_stk_stck_cd);
        fn_userlog( c_ServiceName, "Qty Avilable for withdraw :%ld:",l_free_qty_plg);
        fn_userlog( c_ServiceName, "c_tifp_run_dt :%s:",c_tifp_run_dt_plg);
        fn_userlog( c_ServiceName, "c_dpm_no_plg :%s:",c_dpm_no_plg);
        fn_userlog( c_ServiceName, "c_pod_ref_no :%s:",c_pod_ref_no_plg);
        fn_userlog( c_ServiceName, "c_agree_nmbr :%s:",c_agree_nmbr_plg);
        fn_userlog( c_ServiceName, "Qty already Revoke from this order :%ld:",l_plg_vs_wd_qty_plg);
        fn_userlog( c_ServiceName, "Total Qty to be Revoke/Invoke :%ld:",l_rqst_qty);
				fn_userlog( c_ServiceName, "c_dpm_no_plg1 :%s:",c_dpm_no_plg1);				/** Ver 1.7 **/
				fn_userlog( c_ServiceName, "c_dpm_no_plg2 :%s:",c_dpm_no_plg2);				/** Ver 1.7 **/
				fn_userlog( c_ServiceName, "c_dpm_no_plg3 :%s:",c_dpm_no_plg3);				/** Ver 1.7 **/

        l_tifp_qty = 0;
        if(l_free_qty_plg >=  l_rqst_qty)       /* Request Qty is less than free Qty */
        {
        	l_plg_vs_wd_qty_plg += l_rqst_qty;
          l_tifp_qty       = l_rqst_qty;  /* For Inserting in PTD Table  */
        }
        else                                /* Not enough Qty             */
        {
        	l_plg_vs_wd_qty_plg +=  l_free_qty_plg;
        	l_tifp_qty      =   l_free_qty_plg;   /* For Inserting in PTD Table */
        }

        if (DEBUG_MSG_LVL_3)    
        {
        	fn_userlog(c_ServiceName,"l_plg_vs_wd_qty :%ld:",l_plg_vs_wd_qty_plg);
         	fn_userlog(c_ServiceName,"l_tifp_qty :%ld:",l_tifp_qty);
        }

 /******************* Update Opposit order *************************/

        EXEC SQL
        	UPDATE  PTD_TIFP_DTLS
          SET     PTD_PLG_VS_WD_QTY     = :l_plg_vs_wd_qty_plg
          WHERE   trim(PTD_DPM_NMBR)    = trim(:c_dpm_no_plg)
          AND     trim(PTD_POD_REF_NO)  = trim(:c_pod_ref_no_plg)
          AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
          AND     PTD_DP_ID             = :sql_dbd_dp_id
          AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
          AND     PTD_STCK_CD           = :sql_stk_stck_cd
          AND     PTD_PLG_REV_TYP       = 'P'; 

          if ( SQLCODE != 0 )
          {
          	fn_errlog( c_ServiceName, "S31105", SQLMSG, c_err_msg  );
          	EXEC SQL CLOSE TIFP_CURSOR;
          	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    				tpfree ( ( char * )ptr_fml_Obuf);
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

          }

  /********* Insert Into PTD table Withdraw or Invoke order *************/

          if (DEBUG_MSG_LVL_3)    
          {
          	fn_userlog(c_ServiceName,"l_tifp_qty :%ld:",l_tifp_qty);
          }

          /** Added START  **/

          if(strncmp(sql_dbd_dp_id.arr,CDSL_ID, 1) == 0 )  /* changed 2 to 1 ver 1.7 cheking till 1st position for CDSL*/
          {
          	i_dp_flg = 1;
          }
          else
          {
          	i_dp_flg = 0;
          }

          if (DEBUG_MSG_LVL_3)
          {
          	fn_userlog(c_ServiceName,"i_dp_flg :%d:",i_dp_flg);
          }
          /** Add END  **/

					EXEC SQL
          	INSERT INTO PTD_TIFP_DTLS
            (
            	PTD_CLM_MTCH_ACCNT,
              PTD_STCK_CD,
              PTD_TIFP_QTY,
              PTD_PLG_REV_TYP,
              PTD_ISIN_NMBR,
              PTD_DP_ID,
              PTD_DP_CLNT_ID,
              PTD_POD_REF_NO,
              PTD_TIFP_RUN_DT,
              PTD_PLG_VS_WD_QTY,
              PTD_DPM_NMBR,
              PTD_TIFP_STTS,
              PTD_IWTL_DP_ACCNT,
              PTD_AGREE_NMBR,
							PTD_DPM_NMBR1,			/** Ver 1.7 **/
							PTD_DPM_NMBR2,			/** Ver 1.7 **/
							PTD_DPM_NMBR3,				/** Ver 1.7 **/
							PTD_CHANNEL					/** Ver 2.0 **/
            )
            VALUES
            (
              :sql_mtch_accnt,
              :sql_stk_stck_cd,
              :l_tifp_qty,
              :sql_plg_typ,
              :sql_isin_nmbr,
              :sql_dbd_dp_id,
              :sql_dbd_dp_clnt_id,
              :sql_pod_ref_no,
              to_date(SYSDATE,'dd-mm-yyyy hh24:mi:ss'),
              :l_tifp_qty,
              :c_dpm_no_plg,
              'N',
 							decode(:i_dp_flg, 1,:c_cdsl_iwtl_dp_accnt,:c_iwtl_dp_accnt),  /* Added**/
              :c_agree_nmbr_plg,
							:c_dpm_no_plg1,			/** Ver 1.7 **/
							:c_dpm_no_plg2,			/** Ver 1.7 **/
							:c_dpm_no_plg3,			/** Ver 1.7 **/
							:c_pod_channel			/** Ver 2.0 **/
            );

            if ( SQLCODE != 0 )
            {
            	fn_errlog( c_ServiceName, "S31110", SQLMSG, c_err_msg  );
            	fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
            	EXEC SQL CLOSE TIFP_CURSOR;
            	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    					tpfree ( ( char * )ptr_fml_Obuf);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

             
            /** Ver 1.7 Starts **/

            EXEC SQL
            UPDATE    POD_PLG_ORDR_DTLS
            SET       POD_ORDR_STTS       = 'N'
            WHERE     POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt 
            AND       trim(POD_ORDR_NO)   = trim(:sql_pod_ref_no)
            AND       pod_plg_rev_typ     = :sql_plg_typ;

            if ( SQLCODE != 0 )
            {
              fn_errlog( c_ServiceName, "S31115", SQLMSG, c_err_msg  );
              fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
              EXEC SQL CLOSE TIFP_CURSOR;
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              tpfree ( ( char * )ptr_fml_Obuf);
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

            /** Ver 1.7 Ends **/

                /****************************************************************
                If Free Qty is >= Withdraw / Invoke  quantity no need to find
                more opposit pledge orders
                *****************************************************************/

             if(l_free_qty_plg >= l_rqst_qty)
             {
             		l_rqst_qty = 0;
             		break;
             }
             else
             {
             		l_rqst_qty  -= l_free_qty_plg;
             }

					}/* End of While Loop */

            if(i_counter == 0)
            {
                fn_userlog(c_ServiceName,"ERROR: Can Not Find Opposit Pledge Order skiping..");
                strcpy(c_msg,"Cant Find Opposit Pleadge Order Skipping..");
                fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

            if(l_rqst_qty > 0 )
            {
                strcpy( c_msg,"ERROR :Quantity  withdraw is more than avilable in L5");
                fn_bat_pst_msg_fno(c_ServiceName,c_msg,c_tag);
                sprintf(c_msg,"Quantity withdraw is more than avilable by :%d:",l_rqst_qty);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }
        }
			}
      } /** Ver 1.3 **/
      else if ( ( c_upld_typ == 'D') && (sql_plg_typ == 'W' || sql_plg_typ == 'I') )
      {

        MEMSET(sql_agree_nmbr);

        EXEC SQL
        SELECT trim(PTD_AGREE_NMBR)
        INTO   :sql_agree_nmbr 
        FROM    PTD_TIFP_DTLS
        WHERE   PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
        AND     PTD_DP_ID             = :sql_dbd_dp_id
        AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
        AND     PTD_STCK_CD           = :sql_stk_stck_cd
        AND     PTD_PLG_REV_TYP       = 'P'
        AND     PTD_LEG_NO            = 'L5'
        AND     PTD_TIFP_STTS         = 'P'
        AND     ( PTD_TIFP_QTY - NVL(PTD_PLG_VS_WD_QTY,0) ) > 0
        ORDER BY trim(PTD_POD_REF_NO);       

         if ( SQLCODE != 0 )
         {
           fn_errlog( c_ServiceName, "S31120", SQLMSG, c_err_msg  );
           fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
           EXEC SQL CLOSE TIFP_CURSOR;
           fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
           tpfree ( ( char * )ptr_fml_Obuf);
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }

        SETNULL(sql_agree_nmbr);
        SETLEN(sql_agree_nmbr);
      }
			
				/*** Commented and Placed in the Success Request case ***

				EXEC SQL
        	UPDATE    POD_PLG_ORDR_DTLS
        	SET       POD_ORDR_STTS       = 'I',
										POD_PRCSD_QTY				= POD_PRCSD_QTY + :sql_tifp_qty
        	WHERE     trim(POD_ORDR_NO)   = trim(:sql_pod_ref_no)
        	AND       POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
        	RETURNING
                  POD_HAIRCUT,
                  POD_ORDR_VL,
                  NVL(POD_CHANNEL,'*'),
                  NVL(POD_CONF_QTY,0),
                  NVL(POD_RJCT_QTY,0),
                  NVL(POD_BP_ID,'*')
        INTO      :i_haircut,
                  :d_ordr_val,
                  :c_channel,
                  :d_conf_qty,
                  :d_rjct_qty,
                  :c_bpid;

        if(SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S31125", SQLMSG, c_err_msg);
            fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }


 			EXEC SQL
        INSERT INTO  PML_PLG_MOD_LOG
        (
          PML_ORDR_NO,
          PML_STCK_CD,
          PML_ORDR_QTY,
          PML_ORDR_TM,
          PML_HAIRCUT,
          PML_ORDR_VL,
          PML_ISIN_NO,
          PML_DP_CLNT_ACCNT,
          PML_DP_ACCNT,
          PML_CLNT_MTCH_ACCNT,
          PML_PLG_REV_TYP,
          PML_CONF_QTY,
          PML_RJCT_QTY,
          PML_MOD_TYPE,
          PML_STTS,
          PML_MOD_CNTR,
          PML_PLCD_SQNC,
          PML_BP_ID,
          PML_CHANNEL,
          PML_RMRKS
        )
values
        (
          trim(:sql_pod_ref_no),
          :sql_stk_stck_cd,
          :sql_tifp_qty,
          sysdate,
          :i_haircut,
          :d_ordr_val,
          :sql_isin_nmbr,
          :sql_dbd_dp_clnt_id,
          :sql_dbd_dp_id,
          :sql_mtch_accnt,
          :sql_plg_typ,
          :d_conf_qty,
          :d_rjct_qty,
          'L',
          'I',
           0,
           0,
           :c_bpid,
           :c_channel,
           'Create TIFP Update Status'
        );

        if(SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S31130", SQLMSG, c_err_msg);
            fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

				*** Taken to Success case ***/

			if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   		{
				fn_userlog(c_ServiceName,"Pledge Creation Temporary records commit aborted");
    		fn_errlog( c_ServiceName, "S31135", TPMSG, c_err_msg  );
   			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     		tpfree (( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
			}
	
		}

  /**** 'R' - Request for pledge/Withdraw/Invoke Creation ****/	
		
	switch(sql_oprn_typ)
	{
		case 'R':

		if( sql_plg_typ == 'P')
		{
			sql_ptd_seq = 0.0;

			EXEC SQL 
					 SELECT ptd_seq.nextval 
				   INTO   :sql_ptd_seq 
			     FROM   dual;

			if( SQLCODE !=0 )
     	{
     		fn_errlog( c_ServiceName, "S31140", SQLMSG, c_err_msg  );
       	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       	tpfree ( ( char * )ptr_fml_Obuf);
       	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     	}

			if(DEBUG_MSG_LVL_3){
				fn_userlog( c_ServiceName,"The run number from sequence is [%lf]",sql_ptd_seq);
			}

      /**  Selection of Slip No. from PTM table  **/

      i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
       if ( i_trnsctn == -1 )
       {
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         fn_errlog( c_ServiceName, "S31145",LIBMSG,c_err_msg);
         l_acnt_id = -1;
         Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
         tpfree ( ( char * )ptr_fml_Obuf);
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       } 

			EXEC SQL 
			     SELECT ptm_min_slip_no,
									ptm_max_slip_no,
									ptm_current_slip_no 
			     INTO
			            :sql_ptm_min_slip_no, 
									:sql_ptm_max_slip_no, 
									:sql_ptm_current_slip_no
			     FROM   ptm_tifp_mstr
					 WHERE  PTM_PLG_TYP = 'M'
           FOR UPDATE OF ptm_current_slip_no;   /*** for update introduced in Ver 1.1 ***/

			if( SQLCODE !=0 )
  		{
    		fn_errlog( c_ServiceName, "S31150", SQLMSG, c_err_msg  );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpfree ( ( char * )ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); 
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}

			fn_userlog(c_ServiceName,"Value of sql_ptm_min_slip_no :%lld:",sql_ptm_min_slip_no);
			fn_userlog(c_ServiceName,"Value of sql_ptm_max_slip_no :%lld:",sql_ptm_max_slip_no);
			fn_userlog(c_ServiceName,"Value of sql_ptm_current_slip_no :%lld:",sql_ptm_current_slip_no);

      /** Confirming enough slip numbers are maintained for the run  **/
		
			if((sql_ptm_max_slip_no - sql_ptm_current_slip_no) <= 2 )
			{
					fn_errlog( c_ServiceName, "S31155", LIBMSG, c_err_msg  );
					strcpy(c_err_msg,"Slip numbers not available.");
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpfree (( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			else
			if((sql_ptm_current_slip_no < sql_ptm_min_slip_no)||(sql_ptm_current_slip_no > sql_ptm_max_slip_no))
			{
				/* new range has been maintained*/
				sql_crt_slip_no = sql_ptm_min_slip_no;
        fn_userlog(c_ServiceName,"The number of range is [%lld]",(sql_ptm_max_slip_no - sql_ptm_min_slip_no));
			fn_userlog(c_ServiceName,"Value of sql_ptm_min_slip_no :%lld:",sql_ptm_min_slip_no);
			fn_userlog(c_ServiceName,"Value of sql_ptm_max_slip_no :%lld:",sql_ptm_max_slip_no);
			fn_userlog(c_ServiceName,"Value of sql_ptm_current_slip_no :%lld:",sql_ptm_current_slip_no);
			fn_userlog(c_ServiceName,"Value of sql_crt_slip_no :%lld:",sql_crt_slip_no);
			fn_userlog(c_ServiceName,"Value of sql_conf_slip_no :%lld:",sql_conf_slip_no);
			} 
			else
			{
				sql_crt_slip_no = sql_ptm_current_slip_no + 1;
        fn_userlog(c_ServiceName,"The range is [%lld]",(sql_ptm_max_slip_no - sql_ptm_current_slip_no));
			}

			sql_conf_slip_no = sql_crt_slip_no + 1;


      EXEC SQL
       UPDATE ptm_tifp_mstr
       SET ptm_current_slip_no = :sql_conf_slip_no 
       WHERE PTM_PLG_TYP = 'M';

       if( SQLCODE !=0 )
        {
         fn_errlog( c_ServiceName, "S31160", SQLMSG, c_err_msg  );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         l_acnt_id = -1;
         Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
         tpfree ( ( char * )ptr_fml_Obuf);
         fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

      if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
      {
        fn_errlog( c_ServiceName, "S31165", TPMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree (( char * )ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
      }

			fn_userlog(c_ServiceName,"Value of sql_ptm_min_slip_no :%lld:",sql_ptm_min_slip_no);
			fn_userlog(c_ServiceName,"Value of sql_ptm_max_slip_no :%lld:",sql_ptm_max_slip_no);
			fn_userlog(c_ServiceName,"Value of sql_ptm_current_slip_no :%lld:",sql_ptm_current_slip_no);
			fn_userlog(c_ServiceName,"Value of sql_ptm_min_slip_no :%lf:",sql_ptm_min_slip_no);
			fn_userlog(c_ServiceName,"Value of sql_ptm_max_slip_no :%lf:",sql_ptm_max_slip_no);
			sql_ptm_current_slip_no_d = sql_ptm_current_slip_no;
			fn_userlog(c_ServiceName,"Value of sql_ptm_current_slip_no :%lf:",sql_ptm_current_slip_no_d);


				/****** Comment by Samip ***
				sql_tifp_qty=0;
				MEMSET(sql_isin_nmbr);
				MEMSET(sql_pod_ref_no);
				MEMSET(sql_dbd_dp_id);
				MEMSET(sql_dbd_dp_clnt_id);
				memset(sql_stk_stck_cd,'\0',sizeof(sql_stk_stck_cd));
				MEMSET(sql_mtch_accnt);
				MEMSET(sql_err_cd);
				MEMSET(sql_err_desc);
				sql_pon_nmbr = 0.0; **  **
				**** Samip ***/
	
				if(DEBUG_MSG_LVL_3){
				fn_userlog(c_ServiceName,"The tifp qty [%ld]",sql_tifp_qty);
				fn_userlog(c_ServiceName,"The isin nmbr [%s]",sql_isin_nmbr.arr);
				fn_userlog(c_ServiceName,"The dp id  [%s]",sql_dbd_dp_id.arr);
				fn_userlog(c_ServiceName,"The dp clnt acc [%s]",sql_dbd_dp_clnt_id.arr);
				fn_userlog(c_ServiceName,"The pod ref no [%s]",sql_pod_ref_no.arr);
				fn_userlog(c_ServiceName,"The stk code  [%s]",sql_stk_stck_cd);
				fn_userlog(c_ServiceName,"The mtch clnt acc [%s]",sql_mtch_accnt.arr);
				}

       /* LTQ_PLG_RT is the value on which pledge value is calculated. This is updated as 52 week High - Low and 
          also can be changed manually */

					EXEC SQL 
							 SELECT ltq_plg_rt
				       INTO   :sql_plg_val
			 		     FROM   ltq_trd_qt
			 		     WHERE  ltq_stck_cd = :sql_stk_stck_cd
					     AND    ltq_xchng_cd = 'BSE'; /*  NSE to BSE */
		
			 		if(SQLCODE !=0 ) 
        	{
         		fn_errlog( c_ServiceName, "S31170", SQLMSG, c_err_msg  );
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          	tpfree ( ( char * )ptr_fml_Obuf);
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}

					/**  EQ SAM  Get haircut percentage  **/

          i_returncode = fn_get_haircut(c_ServiceName ,
                                        sql_mtch_accnt.arr,
                                        sql_stk_stck_cd,
                                        &sql_stk_plg_haircut,
                                        c_err_msg);

          if(i_returncode == -1)
          {
						fn_errlog( c_ServiceName, "S31175", LIBMSG, c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

          /**  ends ***/

          /* Calculating the Pledge value for the stock selected. The value will be in Paise */

					sql_plg_val = (sql_tifp_qty * (sql_plg_val *(1 - ((double)(sql_stk_plg_haircut)/100))))*100; /** diwa typecast of float made double **/

					if((long long)(sql_plg_val  * 100)%100 > 50)
					{
						sql_plg_val = sql_plg_val + 1.0;
						fn_userlog( c_ServiceName, "The rounded off amount is [%lf]", sql_plg_val);
					}
				
          /* The following long long conversion will round off any centi paise values (as all values are 
						 already in paise, are already in paise, decimal spaces are not required)*/

					ll_plg_val = (long long) sql_plg_val;

				  /* The following double conversion is made as Oracle does not accept long long */

					sql_plg_val = (double) ll_plg_val;

					EXEC SQL 
					     SELECT to_char(sysdate,'YYYYMMDD')||LPAD((PLG_AGREE_SEQ.NEXTVAL),8,0)
					     INTO   :sql_agree_nmbr 
					     FROM   dual;

					if(SQLCODE !=0 )
          {
            fn_errlog( c_ServiceName, "S31180", SQLMSG, c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

					SETNULL(sql_agree_nmbr);

          /**  Begin Transaction  **/

					i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
			   	if ( i_trnsctn == -1 )
				 	{
     				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     				fn_errlog( c_ServiceName, "S31185",LIBMSG,c_err_msg);
     				l_acnt_id = -1;
     				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     				tpfree ( ( char * )ptr_fml_Obuf);
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     			}

					ptr_fml_Sbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
					if (ptr_fml_Sbuf == NULL)
					{
						fn_errlog(c_ServiceName, "S31190", TPMSG, c_err_msg);
						Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
						Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
						tpfree((char *)ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
					}
					
					ptr_fml_Rbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
					if (ptr_fml_Rbuf == NULL)
					{
						fn_errlog(c_ServiceName, "S31195", TPMSG, c_err_msg);
						Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
						Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
						tpfree((char *)ptr_fml_Obuf);
						tpfree((char *)ptr_fml_Sbuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
					}

					strcpy((char *)sql_usr_code.arr,"EBA");	
					SETLEN(sql_usr_code);
					sql_clsr_typ = 'U'; 

          /* Unilateral (Unilateral is applicable only in case of withdrawal 
					and invocation but anyways we send this flag which DP ignores)*/

					i_err[0] = Fadd32(ptr_fml_Sbuf,FFO_OPERATION_TYP, (char *)&sql_oprn_typ,0);
					i_err[1] = Fadd32(ptr_fml_Sbuf,FFO_PLEDGE_TYP, (char *)"PCR",0);
					i_err[2] = Fadd32(ptr_fml_Sbuf,FFO_DPID,(char *)sql_dbd_dp_id.arr,0);	
					i_err[3] = Fadd32(ptr_fml_Sbuf,FFO_DP_CLNT_ID,(char *)sql_dbd_dp_clnt_id.arr,0);
					i_err[4] = Fadd32(ptr_fml_Sbuf,FFO_ISIN_NMBR, (char *)sql_isin_nmbr.arr,0);
					i_err[5] = Fadd32(ptr_fml_Sbuf,FFO_PLG_QTY,(char *)&sql_tifp_qty,0);
					i_err[6] = Fadd32(ptr_fml_Sbuf,FFO_CLOSURE_DT,(char *)sql_clsr_dt.arr,0);
					i_err[7] = Fadd32(ptr_fml_Sbuf,FFO_EXECN_DT,(char *)sql_execn_date.arr,0);
					i_err[8] = Fadd32(ptr_fml_Sbuf,FFO_USER_CODE,(char *)sql_usr_code.arr,0);
					/** i_err[9] = Fadd32(ptr_fml_Sbuf,FFO_CRT_SLIP_NO,(char *)&sql_crt_slip_no,0);
					i_err[10] = Fadd32(ptr_fml_Sbuf,FFO_CONF_SLIP_NO,(char *)&sql_conf_slip_no,0); **/
					i_err[9] = Fadd32(ptr_fml_Sbuf,FFO_INDEX,(char *)&sql_crt_slip_no,0);
					i_err[10] = Fadd32(ptr_fml_Sbuf,FFO_USER_INDEX,(char *)&sql_conf_slip_no,0);
					i_err[11] = Fadd32(ptr_fml_Sbuf,FFO_AGREE_NO,(char *)sql_agree_nmbr.arr,0);
					i_err[12] = Fadd32(ptr_fml_Sbuf,FFO_CLSR_TYP, (char *)&sql_clsr_typ,0);
					/* i_err[13] = Fadd32(ptr_fml_Sbuf,FFO_DPM_NO,(char *)&sql_pon_nmbr,0); --commented  */
				  i_err[13] = Fadd32(ptr_fml_Sbuf,FFO_JIFFY,(char *)&sql_pon_nmbr,0); /**    **/
					i_err[14] = Fadd32(ptr_fml_Sbuf,FFO_EBA_MTCH_ACT_NO,(char *)v_ucc_cd.arr,0);

					MEMSET(c_seg_code);
					MEMSET(c_plg_type);

					if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
					{
						i_err[15] = Fadd32(ptr_fml_Sbuf,FFO_BRKR_ID,(char *)c_iwtl_dp_accnt_dpid,0);
						i_err[16] = Fadd32(ptr_fml_Sbuf,FFO_CTCL_ID,(char *)c_iwtl_dp_accnt_clntid,0);
						strcpy(c_seg_code,"07");
					}
					else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0)
					{
						i_err[15] = Fadd32(ptr_fml_Sbuf,FFO_BRKR_ID,(char *)c_cdsl_iwtl_dp_accnt_dpid,0);
						i_err[16] = Fadd32(ptr_fml_Sbuf,FFO_CTCL_ID,(char *)c_cdsl_iwtl_dp_accnt_clntid,0);
						strcpy(c_seg_code,"AL");
					}

					strcpy(c_plg_type,"MP");
					d_inv_value = 0.0;

					i_err[17] = Fadd32(ptr_fml_Sbuf,FFO_INSTRMNT_TYP,(char *)c_seg_code,0);
					i_err[18] = Fadd32(ptr_fml_Sbuf,FFO_OPTION_TYP,(char *)c_plg_type,0);
					i_err[19] = Fadd32(ptr_fml_Sbuf,FFO_AMOUNT,(char *)&d_inv_value,0);
				
					for(j=0;j <= 19;j++)  
  				{
    				if(i_err[j] == -1)
    				{
      				fn_errlog( c_ServiceName, "S31200", FMLMSG, c_err_msg  );
      				fn_userlog(c_ServiceName, "The Fget32 error at [%d]",j);
      				l_acnt_id = -1;
      				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							tpfree ( ( char * )ptr_fml_Obuf);
							tpfree ( ( char * )ptr_fml_Rbuf);
							tpfree ( ( char * )ptr_fml_Sbuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    				}
  				}

          /*** Ver 1.2 Starts ***/

          MEMSET(c_exg_id);
          MEMSET(c_cm_id);
          MEMSET(c_tm_id);

          if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
          {
            strcpy(c_exg_id,"01");
            strcpy(c_cm_id,"M50519");
            strcpy(c_tm_id,"07730");

            i_err[0] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CD,(char *)c_exg_id,0);
            i_err[1] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM,(char *)c_cm_id,0);
            i_err[2] = Fadd32(ptr_fml_Sbuf,FFO_FRWD_TM,(char *)c_tm_id,0);
            i_err[3] = Fadd32(ptr_fml_Sbuf,FFO_ACTION1,(char *)sql_dbd_dp_id.arr,0);		/** Ver 1.7 **/
            i_err[4] = Fadd32(ptr_fml_Sbuf,FFO_ACTION2,(char *)sql_dbd_dp_clnt_id.arr,0);	/** Ver 1.7 **/

            for(j=0;j <= 4;j++)		/** Changed from 2 to 4 for  **/
            {
             if(i_err[j] == -1)
             {
              fn_errlog( c_ServiceName, "S31205", FMLMSG, c_err_msg  );
              fn_userlog(c_ServiceName, "The Fget32 error at [%d]",j);
              l_acnt_id = -1;
              Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              tpfree ( ( char * )ptr_fml_Obuf);
              tpfree ( ( char * )ptr_fml_Rbuf);
              tpfree ( ( char * )ptr_fml_Sbuf);
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
             }
           }


          }
          /*** Ver 1.2 Ends ***/


          /* DP call for Pledge Request */

/****************** Added  *START****************/
					if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
				 	{
		     		fn_userlog(c_ServiceName,"Calling SFO_CALL_DP ");			 
						i_returncode=tpcall("SFO_CALL_DP",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
	 				}
				 	else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0)
				 	{
						fn_userlog(c_ServiceName,"Calling SFO_CALL_DPC ");			 
						i_returncode=tpcall("SFO_CALL_DPC",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
				 	}

					/**i_returncode = 0;**			*** Temp ***/
	
					fn_userlog(c_ServiceName,"After Call i_returncode : %d ",i_returncode);

					if (i_returncode == -1)
					{
						if(tperrno == TPESVCFAIL)
						{
							if(Fget32(ptr_fml_Rbuf, FFO_ERR_MSG, 0, c_err_msg, 0 ) == -1)
							{
								Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
          	    Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
          	    tpfree((char *)ptr_fml_Sbuf);
          	    tpfree((char *)ptr_fml_Rbuf);
          	    tpfree((char *)ptr_fml_Obuf);
		     				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          	    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
        	  	}
      		  }
      			else
      			{
							fn_errlog(c_ServiceName, "S31210", TPMSG, c_err_msg);
      			}
      
						Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
     				Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
     				tpfree((char *)ptr_fml_Sbuf);
     				tpfree((char *)ptr_fml_Rbuf);
     				tpfree((char *)ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
					}

/****************** Added  *END****************/

			/* The return status zero indicates successful pledge creation. */		
			
			i_err[0] = Fget32(ptr_fml_Rbuf,FFO_RTN_STTS,0,(char *)&sql_rtn_stts,0);
			i_err[1] = Fget32(ptr_fml_Rbuf,FFO_ERR_CD,0,(char *)sql_err_cd.arr,0);
			i_err[2] = Fget32(ptr_fml_Rbuf,FFO_ERR_DESC,0,(char *)sql_err_desc.arr,0);

			tpfree((char * )ptr_fml_Sbuf);
			tpfree((char * )ptr_fml_Rbuf);

			for(j=0; j <= 2; j++)
  		{
    		if(i_err[j] == -1)
    		{
      		fn_errlog( c_ServiceName, "S31215", FMLMSG, c_err_msg  );
      		fn_userlog(c_ServiceName, "The Fget32 error at [%d]",j);
      		l_acnt_id = -1;
      		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}
  		}
			SETLEN(sql_err_cd);
			SETLEN(sql_err_desc);
			SETNULL(sql_err_cd);
			SETNULL(sql_err_desc);


			fn_userlog(c_ServiceName,"The rtn status is [%ld] ",sql_rtn_stts);
			fn_userlog(c_ServiceName,"The err code is [%s] ",sql_err_cd.arr);
			fn_userlog(c_ServiceName,"The rtn status is [%s] ",sql_err_desc.arr);

	    /** On successful Pledge Request Creation (sql_rtn_stts from DP will be 0) **/

      /** Ver 1.3 Starts **/

      if ( c_upld_typ == 'D')  
      {


        EXEC SQL
        UPDATE AUDIT_PLEDGE_TXN_DTLS
        SET    APD_STTS = DECODE(:sql_rtn_stts,0,'P','J'),
               APD_RMRKS = trim(:sql_err_desc)
        WHERE  ROWID = :c_rowid;

        if(SQLCODE != 0)
        {
          fn_errlog(c_ServiceName, "S31220", SQLMSG, c_err_msg);
          fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
        {
          fn_errlog( c_ServiceName, "S31225", TPMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree (( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }

        tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );
      }

      /** Ver 1.3 Ends **/

/********************************
			sql_rtn_stts = 0;		*** Temp ***
			strcpy(sql_err_cd.arr,"E00001");	** Temp **/

			if( sql_rtn_stts == 0)
			{
				fn_userlog( c_ServiceName," Acceptance of [%s] for stck [%s]",sql_mtch_accnt.arr,sql_stk_stck_cd);

				fn_userlog(c_ServiceName,"Value of sql_dbd_dp_id :%s:",sql_dbd_dp_id.arr);
				fn_userlog(c_ServiceName,"Value of sql_dbd_dp_clnt_id :%s:",sql_dbd_dp_clnt_id.arr);
				fn_userlog(c_ServiceName,"Value of sql_isin_nmbr :%s:",sql_isin_nmbr.arr);
				fn_userlog(c_ServiceName,"Value of sql_pod_ref_no :%s:",sql_pod_ref_no.arr);

				EXEC SQL
        	UPDATE    POD_PLG_ORDR_DTLS
        	SET       POD_ORDR_STTS       = 'I',
										POD_PRCSD_QTY				= POD_PRCSD_QTY + :sql_tifp_qty
        	WHERE     trim(POD_ORDR_NO)   = trim(:sql_pod_ref_no)
        	AND       POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
        	RETURNING
                  POD_HAIRCUT,
                  POD_ORDR_VL,
                  NVL(POD_CHANNEL,'*'),
                  NVL(POD_CONF_QTY,0),
                  NVL(POD_RJCT_QTY,0),
                  NVL(POD_BP_ID,'*')
        INTO      :i_haircut,
                  :d_ordr_val,
                  :c_channel,
                  :d_conf_qty,
                  :d_rjct_qty,
                  :c_bpid;

        if(SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S31230", SQLMSG, c_err_msg);
            fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }


 			EXEC SQL
        INSERT INTO  PML_PLG_MOD_LOG
        (
          PML_ORDR_NO,
          PML_STCK_CD,
          PML_ORDR_QTY,
          PML_ORDR_TM,
          PML_HAIRCUT,
          PML_ORDR_VL,
          PML_ISIN_NO,
          PML_DP_CLNT_ACCNT,
          PML_DP_ACCNT,
          PML_CLNT_MTCH_ACCNT,
          PML_PLG_REV_TYP,
          PML_CONF_QTY,
          PML_RJCT_QTY,
          PML_MOD_TYPE,
          PML_STTS,
          PML_MOD_CNTR,
          PML_PLCD_SQNC,
          PML_BP_ID,
          PML_CHANNEL,
          PML_RMRKS
        )
values
        (
          trim(:sql_pod_ref_no),
          :sql_stk_stck_cd,
          :sql_tifp_qty,
          sysdate,
          :i_haircut,
          :d_ordr_val,
          :sql_isin_nmbr,
          :sql_dbd_dp_clnt_id,
          :sql_dbd_dp_id,
          :sql_mtch_accnt,
          :sql_plg_typ,
          :d_conf_qty,
          :d_rjct_qty,
          'L',
          'I',
           0,
           0,
           :c_bpid,
           :c_channel,
           'Create TIFP Update Status'
        );

        if(SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S31235", SQLMSG, c_err_msg);
            fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

				EXEC SQL
				     UPDATE ptd_tifp_dtls 
					   SET ptd_leg_no = 'L1',
				         ptd_slipno_l1 = :sql_crt_slip_no,
				         ptd_slipno_l3 = :sql_conf_slip_no,
				         ptd_tifp_stts = 'P',
				         ptd_tifp_run_dt = sysdate,
				         ptd_exctn_dt = :sql_execn_date,
				         ptd_run_nmbr = :sql_ptd_seq,
				         ptd_agree_nmbr = :sql_agree_nmbr,
								 PTD_SEG_CODE = :c_seg_code
						 WHERE ptd_dp_id = :sql_dbd_dp_id
						 AND   ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
						 AND   ptd_isin_nmbr = :sql_isin_nmbr
						 AND   trim(ptd_pod_ref_no) = trim(:sql_pod_ref_no)
						 AND   ptd_plg_rev_typ = 'P'
						 AND   ptd_tifp_stts = 'N'
						 AND   ptd_slipno_l1 is NULL;

			  if( SQLCODE !=0 )
      	{
					fn_errlog( c_ServiceName, "S31240", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        	tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}

       /**  Update the existing pledge position for the stock and customer in PPS table. 
            If position does not exist, then insert the new position  **/ 

				EXEC SQL 
				     UPDATE pps_plg_pstn 
						 SET    pps_l1_pos = pps_l1_pos + :sql_tifp_qty,
                    pps_net_pos = pps_net_pos + :sql_tifp_qty,
                    pps_plg_rev_flg = 'P'
				     WHERE  pps_stck_cd = :sql_stk_stck_cd
						 AND 		pps_clm_mtch_accnt = :sql_mtch_accnt  			 /**  added **/
             AND    pps_dp_accnt = :sql_dbd_dp_id
             AND    pps_dp_clnt_accnt = :sql_dbd_dp_clnt_id;
				
				if( (SQLCODE !=0) && (SQLCODE != NO_DATA_FOUND) )
        {
        	fn_errlog( c_ServiceName, "S31245", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        	tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
				
				if( SQLCODE == 0)
				{
					fn_userlog(	c_ServiceName, "Updating in PPS for [%s] qty: [%ld]",sql_mtch_accnt.arr,sql_tifp_qty);
				}
				if (SQLCODE == NO_DATA_FOUND)
				{
					fn_userlog(	c_ServiceName, "Inserting in PPS for [%s] qty: [%ld]",sql_mtch_accnt.arr,sql_tifp_qty);

					EXEC SQL 
							 INSERT INTO pps_plg_pstn
				 	     (  
								pps_clm_mtch_accnt,
					      pps_stck_cd,
					      pps_dp_accnt,
					      pps_dp_clnt_accnt,
					      pps_l1_pos,
					      pps_net_pos,
					      pps_plg_rev_flg,
								/** Added for Ver 1.2 **/
								PPS_L2_POS,
								PPS_L3_POS,
 								PPS_L4_POS,
 								PPS_L5_POS,
 								PPS_W1_POS,
 								PPS_W2_POS,
 								PPS_W3_POS,
 								PPS_I1_POS,
 								PPS_I2_POS,
 								PPS_I3_POS
								/** End for Ver 1.2 **/
							 )
					     VALUES 
							(
								:sql_mtch_accnt,
					      :sql_stk_stck_cd,
					      :sql_dbd_dp_id,
					      :sql_dbd_dp_clnt_id,
					      :sql_tifp_qty,
					      :sql_tifp_qty,
					      'P',
								0,0,0,0,0,0,0,0,0,0			/** Ver 1.2 **/
							);
	
					if( SQLCODE !=0 )
        	{
        		fn_errlog( c_ServiceName, "S31250", SQLMSG, c_err_msg  );
        		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        		l_acnt_id = -1;
        		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        		tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}
				}

				EXEC SQL 
				     INSERT INTO ppl_plg_pstn_log
				     (
							ppl_clm_mtch_accnt,
				      ppl_stck_cd,
				      ppl_l1_pos_chg,
				      ppl_avg_pval_chg,
				      ppl_plg_rev_flg,
				      ppl_rmrks
						 )
				     VALUES
				     (	
								:sql_mtch_accnt,
				        :sql_stk_stck_cd,
                :sql_tifp_qty,
				        :sql_plg_val,
				        'P',
				        'Pledge Leg 1'
				     );
				
				if( SQLCODE !=0 )
       	{
       		fn_errlog( c_ServiceName, "S31255", SQLMSG, c_err_msg  );
         	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         	l_acnt_id = -1;
       	 	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
         	tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
         	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       	}	

        /*** Commented after for update introduction *** 
				sql_crt_slip_no = sql_crt_slip_no + 2;
				sql_conf_slip_no = sql_conf_slip_no + 2;
        ***********************************************/
	
				sprintf(c_msg, " Acceptance of [%s] for stck [%s]",sql_mtch_accnt.arr,sql_stk_stck_cd);		
				fn_userlog( c_ServiceName,c_msg);
				
			}/*end of if for return status zero from DP*/

	    /*  For the following cases the record will be rejected and the limits will be withdrawn
	        for the customer. The error codes for rejection are as prescribed by the Product Team  */
			else

				/** if ((sql_rtn_stts == 1) && 
						((strncmp((char *)sql_err_cd.arr,"E00001",6) == 0) ||
						 (strncmp((char *)sql_err_cd.arr,"E00005",6) == 0) ||
						 (strncmp((char *)sql_err_cd.arr,"E00008",6) == 0) ||
						 (strncmp((char *)sql_err_cd.arr,"E00009",6) == 0) ||
						 (strncmp((char *)sql_err_cd.arr,"E00020",6) == 0))) *** Comment by Samip ***/
				{
					fn_userlog(c_ServiceName,"Record rejected of accnt [%s] for stck [%s]",sql_mtch_accnt.arr,sql_stk_stck_cd);
          /** The trim on the pod_ref_no has been placed to remove spaces from right **/
	
					EXEC SQL 
					     UPDATE ptd_tifp_dtls 
						   SET ptd_leg_no = 'L1',
					         ptd_tifp_stts = 'J',
					         ptd_tifp_run_dt = sysdate,
					         ptd_exctn_dt = :sql_execn_date,
                   PTD_RMRKS = trim(:sql_err_desc)     /** Ver 1.6  **/
					     WHERE 
									 ptd_dp_id = :sql_dbd_dp_id
					     AND ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
					     AND ptd_isin_nmbr = :sql_isin_nmbr
					     AND trim(ptd_pod_ref_no) = trim(:sql_pod_ref_no)
					     AND ptd_plg_rev_typ = 'P'
					     AND ptd_tifp_stts = 'N'
					     AND ptd_slipno_l1 is NULL;

		    	if( SQLCODE !=0 )
     			{
       			fn_errlog( c_ServiceName, "S31260", SQLMSG, c_err_msg  );
       			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       			l_acnt_id = -1;
       			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       			tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     			}

					EXEC SQL 
							 UPDATE pod_plg_ordr_dtls 
               SET    pod_ordr_stts = 'J',
											POD_RJCT_QTY = POD_RJCT_QTY + :sql_tifp_qty,
                      POD_RMRKS = trim(:sql_err_desc)
						   WHERE  trim(pod_ordr_no) = trim(:sql_pod_ref_no)
               AND    POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
					     AND    pod_plg_rev_typ = 'P';

		    	if( SQLCODE !=0 )
     			{
       			fn_errlog( c_ServiceName, "S31265", SQLMSG, c_err_msg  );
       			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       			l_acnt_id = -1;
       			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       			tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     			}

          /*  The following count is made for fining the modification counter that has to be entered
              while inserting the rejection record in PML (pledge order log) table  */

					EXEC SQL 
					     SELECT (count(*)+1) 
					     INTO   :sql_pml_mod_cntr
					     FROM   pml_plg_mod_log
					     WHERE  pml_ordr_no = trim(:sql_pod_ref_no)
               AND    PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
					     AND    pml_mod_type in ('N','M','C','J');
	
					if( SQLCODE !=0 )
     			{
       			fn_errlog( c_ServiceName, "S31270", SQLMSG, c_err_msg  );
       			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       			l_acnt_id = -1;
       			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       			tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     			}

					EXEC SQL 
							 INSERT INTO pml_plg_mod_log
					     (
									pml_ordr_no,
									pml_stck_cd,
									pml_ordr_qty,
									pml_ordr_tm,
									pml_haircut,
									pml_ordr_vl,
									pml_isin_no,
									pml_dp_clnt_accnt,
									pml_dp_accnt,
									pml_clnt_mtch_accnt,
									pml_plg_rev_typ,
									pml_conf_qty,
									pml_rjct_qty,
									pml_mod_type,
									pml_stts,
									pml_mod_cntr,
									pml_plcd_sqnc,
									pml_bp_id,
									pml_channel,
									pml_rmrks
							 )
					     VALUES
					     (	:sql_pod_ref_no,
	  				      :sql_stk_stck_cd,
						      :sql_tifp_qty,
						      sysdate,
						      :sql_stk_plg_haircut,		 
   					      :sql_plg_val,
						      :sql_isin_nmbr,
						      :sql_dbd_dp_id,
						      :sql_dbd_dp_clnt_id,
						      :sql_mtch_accnt,
						      'P',
						      0,
						      0,
						      'J',
						      'C',
						      :sql_pml_mod_cntr,
						      0,
						      null,
						      'SYS',
						      :sql_err_desc
							);
					
					if( SQLCODE !=0 )
          {
          	fn_errlog( c_ServiceName, "S31275", SQLMSG, c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

					EXEC SQL 
					     SELECT dbd_tot_qty,
											dbd_qty_blckd
					     INTO   :sql_dbd_tot_qty, 
										  :sql_dbd_qty_blckd
					     FROM   dbd_dp_blck_dtls
					     WHERE  dbd_clm_mtch_accnt = :sql_mtch_accnt 
					     AND    dbd_dp_id = :sql_dbd_dp_id
 	             AND    dbd_dp_clnt_id = :sql_dbd_dp_clnt_id
               AND    dbd_stck_cd = :sql_stk_stck_cd;

					if( SQLCODE !=0 )
          {
          	fn_errlog( c_ServiceName, "S31280", SQLMSG, c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

					EXEC SQL 
					     UPDATE dbd_dp_blck_dtls 
							 SET dbd_tot_qty = dbd_tot_qty + :sql_tifp_qty,
									 DBD_PLG_REQ_QTY = DBD_PLG_REQ_QTY - :sql_tifp_qty		/** Subtracted as rejection **/
					         /*** DBD_SAM_BLCKD_QTY = DBD_SAM_BLCKD_QTY - :sql_tifp_qty   * DBD_SAM_BLCKD_QTY replaced by DBD_SAM_BLCKD_QTY *//** Commented as the same was not updated in Pledge request **/
					     WHERE 
									 dbd_dp_id = :sql_dbd_dp_id
					     AND dbd_dp_clnt_id = :sql_dbd_dp_clnt_id
							 AND dbd_clm_mtch_accnt = :sql_mtch_accnt    /**  added **/ 
					     AND dbd_stck_cd = :sql_stk_stck_cd;
			    	
					if( SQLCODE !=0 )
      		{
        		fn_errlog( c_ServiceName, "S31285", SQLMSG, c_err_msg  );
        		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        		l_acnt_id = -1;
        		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        		tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      		}
          /**  Reduce the Pledge amount for the client **/ 	
			
					EXEC SQL 
							 INSERT INTO DLD_DP_LOG_DTLS
					     (
									dld_clm_mtch_accnt,
					        dld_dp_id,
					        dld_dp_clnt_id,
					        dld_isin_nmbr,
					        dld_stck_cd,
					        dld_tot_qty_chg,
					        dld_qty_blckd_chg,
					        dld_plg_req_qty_chg,
					        /* DLD_SAM_BLCKD_QTY_CHG */ DLD_SAM_BLCKD_QTY_CHG,
					        dld_rev_cov_qty_chg,
					        dld_rev_req_qty_chg,
					        dld_chg_tm,
					        dld_blk_fr_sale_chg,
					        dld_inv_req_qty_chg,
					        dld_inv_cov_qty_chg,
					        dld_rmrks
							 )
					     VALUES
					     (  :sql_mtch_accnt,
					        :sql_dbd_dp_id,
					        :sql_dbd_dp_clnt_id,
					        :sql_isin_nmbr,
					        :sql_stk_stck_cd,
					        /** :sql_dbd_tot_qty, **/
									:sql_tifp_qty,
					        0,
									-(:sql_tifp_qty),
					        /** -(:sql_tifp_qty), ***/
					        0,
					        0,
					        0,
					        sysdate,
					        0,
					        0,
					        0,
					        :sql_err_desc
							);

						
					if( SQLCODE !=0 )
          {
          	fn_errlog( c_ServiceName, "S31290", SQLMSG, c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

          /*** Commented after for update introduction *****
					sql_crt_slip_no = sql_crt_slip_no + 2;
					sql_conf_slip_no = sql_conf_slip_no + 2;
          ********************************************/     

					sprintf( c_msg," Rejection of [%s] for stck [%s]",sql_mtch_accnt.arr,sql_stk_stck_cd);	
					fn_userlog( c_ServiceName, c_msg);
					memset(c_msg,'\0',sizeof(c_msg));
					strncpy(c_msg,sql_err_desc.arr,254);
				
				}
			
         /*  Updates the last confirmation slip number used. This will 2 less than last, as we
             would have incremented the slip number and not used it  */

      /*** Coomented after introduction of for update clause and taken above ***
			 EXEC SQL 
						UPDATE ptm_tifp_mstr 
						SET ptm_current_slip_no = (:sql_conf_slip_no - 2) 
						WHERE PTM_PLG_TYP = 'M';

						if( SQLCODE !=0 )
						{
							fn_errlog( c_ServiceName, "S31295", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							l_acnt_id = -1;
							Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
							tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
	
       ***************************************************************************/
		
			if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
     	{
    		fn_errlog( c_ServiceName, "S31300", TPMSG, c_err_msg  );
     		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       	l_acnt_id = -1;
       	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       	tpfree (( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
      }
		
    tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );

		}  /*end of if for Pledge creation*/
		else

		/***  Withdraw Creation Request  ***/

		/** if( sql_plg_typ == 'W' ) ** Commented for Ver 1.7 **/
		if( sql_plg_typ == 'W' && sql_run_plg_typ == 'W')		/** Changed for Ver 1.7 **/
		{
			fn_userlog(c_ServiceName,"Inside Withdrawal");
			sql_ptd_seq = 0.0;

			EXEC SQL 
					 SELECT ptd_seq.nextval 
					 INTO :sql_ptd_seq 
			     FROM dual;

			if( SQLCODE !=0 )
     	{
     		fn_errlog( c_ServiceName, "S31305", SQLMSG, c_err_msg  );
       	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       	l_acnt_id = -1;
       	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       	tpfree ( ( char * )ptr_fml_Obuf);
       	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     	}


			i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

  		if ( i_trnsctn == -1 )
  		{
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		fn_errlog( c_ServiceName, "S31310",LIBMSG,c_err_msg);
    		l_acnt_id = -1;
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    		tpfree ( ( char * )ptr_fml_Obuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

			EXEC SQL 
					 DELETE FROM TEMP_PLG_RECORDS;

			if((SQLCODE !=0) && (SQLCODE!= NO_DATA_FOUND))
  		{	
    		fn_errlog( c_ServiceName, "S31315", SQLMSG, c_err_msg  );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		l_acnt_id = -1;
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}

      if ( c_upld_typ == 'N' ) /** If condition added in Ver 1.3 **/
      {	
				EXEC SQL 
				     INSERT INTO TEMP_PLG_RECORDS
				     (
								tmp_tifp_qty, 
								tmp_plg_rev_typ,
								tmp_isin_nmbr,
								tmp_dp_id,
								tmp_dp_clnt_id,
								tmp_pod_ref_no,
								tmp_stck_cd,
								tmp_clm_mtch_accnt,
								tmp_dpm_nmbr,
								tmp_agree_nmbr
						 )
				     ( 
				      SELECT ptd_tifp_qty,
				             'W',
				             ptd_isin_nmbr, 
				             ptd_dp_id,
				             ptd_dp_clnt_id,
				             ptd_pod_ref_no, 
			             	 ptd_stck_cd,
				             ptd_clm_mtch_accnt,
			  	           ptd_dpm_nmbr, 
				             ptd_agree_nmbr 
				      FROM   ptd_tifp_dtls 
				      WHERE  ptd_plg_rev_typ='W' 
				      AND    ptd_tifp_stts = 'N' 
				      AND    ptd_leg_no is NULL 
				      AND    ptd_slipno_w1 is NULL
							AND		 ptd_dp_id = :sql_dbd_dp_id
             	AND    ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
             	AND    ptd_stck_cd = :sql_stk_stck_cd
             	AND    ptd_clm_mtch_accnt = :sql_mtch_accnt
							AND    ptd_pod_ref_no = :sql_pod_ref_no
						 );
        }
        /***** Ver 1.3 Starts *****/
        else 
        {
        EXEC SQL
             INSERT INTO TEMP_PLG_RECORDS
             (
                tmp_tifp_qty,
                tmp_plg_rev_typ,
                tmp_isin_nmbr,
                tmp_dp_id,
                tmp_dp_clnt_id,
                tmp_pod_ref_no,
                tmp_stck_cd,
                tmp_clm_mtch_accnt,
                tmp_dpm_nmbr,
                tmp_agree_nmbr
             )
             VALUES
             (
                :sql_tifp_qty,
                'W',
                :sql_isin_nmbr,   
                :sql_dbd_dp_id,
                :sql_dbd_dp_clnt_id,
                '0',
                :sql_stk_stck_cd,
                :sql_mtch_accnt,
                :sql_pon_nmbr,
                :sql_agree_nmbr
             );

        }
        /***** Ver 1.3 Ends *****/

				if( SQLCODE !=0 )
  			{
    			fn_errlog( c_ServiceName, "S31320", SQLMSG, c_err_msg  );
    			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			l_acnt_id = -1;
    			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  			}
			
			if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   		{
				fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
    		fn_errlog( c_ServiceName, "S31325", TPMSG, c_err_msg  );
   			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     		l_acnt_id = -1;
     		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     		tpfree (( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
			}



    /*** Commented and add below for Ver 1.1 ***   
			sql_ptm_max_slip_no = 0;
			sql_ptm_min_slip_no = 0;
			sql_ptm_current_slip_no = 0;

     i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
       if ( i_trnsctn == -1 )
       {
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         fn_errlog( c_ServiceName, "S31330",LIBMSG,c_err_msg);
         l_acnt_id = -1;
         Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
         tpfree ( ( char * )ptr_fml_Obuf);
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }

			EXEC SQL 
			     SELECT 
			           ptm_min_slip_no,
								 ptm_max_slip_no,
								 ptm_current_slip_no 
			     INTO
			           :sql_ptm_min_slip_no, 
	               :sql_ptm_max_slip_no, 
								 :sql_ptm_current_slip_no
			     FROM  ptm_tifp_mstr
					 WHERE PTM_PLG_TYP = 'M'
           FOR UPDATE OF ptm_current_slip_no;    *** for update introduced in Ver 1.1 ***

			if( SQLCODE !=0 )
  		{
    		fn_errlog( c_ServiceName, "S31335", SQLMSG, c_err_msg  );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		l_acnt_id = -1;
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				tpfree ( ( char * )ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}

			if((sql_ptm_current_slip_no < sql_ptm_min_slip_no)||(sql_ptm_current_slip_no > sql_ptm_max_slip_no))
			{
				sql_crt_slip_no = sql_ptm_min_slip_no;

        fn_userlog(c_ServiceName,"The number of range is [%lld]",(sql_ptm_max_slip_no - sql_ptm_min_slip_no));

				if((sql_ptm_max_slip_no - sql_ptm_min_slip_no) ==  0)
				{
					strcpy(c_err_msg,"Slip number for Withdraw is less than count.");
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			} 
			else
			{
				sql_crt_slip_no = sql_ptm_current_slip_no + 1;

        fn_userlog(c_ServiceName,"The range is [%lld]",(sql_ptm_max_slip_no - sql_ptm_current_slip_no));
							
				if((sql_ptm_max_slip_no - sql_ptm_current_slip_no) == 0)
				{
					strcpy(c_err_msg,"Slip number for Withdraw is less than count.");
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}


      EXEC SQL
              UPDATE ptm_tifp_mstr
              SET    ptm_current_slip_no = :sql_crt_slip_no  
              WHERE  PTM_PLG_TYP = 'M';

         if( SQLCODE !=0 )
         {
            fn_errlog( c_ServiceName, "S31340", SQLMSG, c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

      if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
        {
          fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
          fn_errlog( c_ServiceName, "S31345", TPMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree (( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }
 
			sql_conf_slip_no = 0; 

 **************************************************/
				/**** Samip ******
				EXEC SQL 
						DECLARE cur_unplg CURSOR FOR
    				SELECT
                    ptd_tifp_qty,
                    ptd_isin_nmbr,
                    ptd_dp_id,
                    ptd_dp_clnt_id,
                    ptd_pod_ref_no,
                    ptd_stck_cd,
                    ptd_clm_mtch_accnt,
                    ptd_dpm_nmbr,
                    ptd_agree_nmbr
             FROM   ptd_tifp_dtls
             WHERE
                    ptd_dp_id = :sql_dbd_dp_id
             AND    ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
             AND    ptd_stck_cd = :sql_stk_stck_cd
						 AND 		ptd_clm_mtch_accnt = :sql_mtch_accnt
						 AND		ptd_pod_ref_no = :sql_pod_ref_no
             AND    ptd_plg_rev_typ='W'
             AND    ptd_tifp_stts = 'N'
             AND    ptd_leg_no is NULL
             AND    ptd_slipno_w1 is NULL;

						if( SQLCODE !=0 )
            {
              fn_errlog( c_ServiceName, "S31350", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              l_acnt_id = -1;
              Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
              tpfree ( ( char * )ptr_fml_Obuf);
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

					EXEC SQL
						OPEN cur_unplg;

            if( SQLCODE !=0 )
            {
              fn_errlog( c_ServiceName, "S31355", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              l_acnt_id = -1;
              Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
              tpfree ( ( char * )ptr_fml_Obuf);
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

					while(1)
					{

					***** SAmip ***/

    /*******************  **************/

			EXEC SQL 
			     SELECT count(*) 
					 INTO   :l_rec_cnt
			     FROM   TEMP_PLG_RECORDS;

			if( l_rec_cnt == 0 )
			{
				strcpy(c_err_msg,"There are no records for Withdrawal");
				BAT_POST(c_err_msg);
				fn_userlog(c_ServiceName,"There are no records for Withdrawal");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			sprintf(c_msg,"[%ld] records for withdrawal",l_rec_cnt);
			fn_userlog(c_ServiceName,c_msg);
			BAT_POST(c_msg);

			for( i = 0; i < l_rec_cnt; i++)
			{

       /***** Ver 1.1 Starts *****/

        sql_ptm_max_slip_no = 0;
        sql_ptm_min_slip_no = 0;
        sql_ptm_current_slip_no = 0;

        i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
        if ( i_trnsctn == -1 )
        {
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          fn_errlog( c_ServiceName, "S31360",LIBMSG,c_err_msg);
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        EXEC SQL
        SELECT
        ptm_min_slip_no,
        ptm_max_slip_no,
        ptm_current_slip_no
        INTO
        :sql_ptm_min_slip_no,
        :sql_ptm_max_slip_no,
        :sql_ptm_current_slip_no
        FROM  ptm_tifp_mstr
        WHERE PTM_PLG_TYP = 'M'
        FOR   UPDATE OF ptm_current_slip_no;    /*** for update introduced in Ver 1.1 ***/

        if( SQLCODE !=0 )
        {
          fn_errlog( c_ServiceName, "S31365", SQLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if((sql_ptm_current_slip_no < sql_ptm_min_slip_no)||(sql_ptm_current_slip_no > sql_ptm_max_slip_no))
        {
          sql_crt_slip_no = sql_ptm_min_slip_no;

          fn_userlog(c_ServiceName,"The number of range is [%lld]",(sql_ptm_max_slip_no - sql_ptm_min_slip_no));

          if((sql_ptm_max_slip_no - sql_ptm_min_slip_no) ==  0)
          {
            strcpy(c_err_msg,"Slip number for Withdraw is less than count.");
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        }
        else
        {
          sql_crt_slip_no = sql_ptm_current_slip_no + 1;

          fn_userlog(c_ServiceName,"The range is [%lld]",(sql_ptm_max_slip_no - sql_ptm_current_slip_no));

          if((sql_ptm_max_slip_no - sql_ptm_current_slip_no) == 0)
          {
            strcpy(c_err_msg,"Slip number for Withdraw is less than count.");
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        }

        EXEC SQL
        UPDATE ptm_tifp_mstr
        SET    ptm_current_slip_no = :sql_crt_slip_no
        WHERE  PTM_PLG_TYP = 'M';

        if( SQLCODE !=0 )
        {
           fn_errlog( c_ServiceName, "S31370", SQLMSG, c_err_msg  );
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           l_acnt_id = -1;
           Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
           tpfree ( ( char * )ptr_fml_Obuf);
           fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
        {
          fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
          fn_errlog( c_ServiceName, "S31375", TPMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree (( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }

         sql_conf_slip_no = 0 ;  

       /***** Ver 1.1 Ends *****/


			  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
     	  if ( i_trnsctn == -1 )
     	  {
     		  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     		  fn_errlog( c_ServiceName, "S31380",LIBMSG,c_err_msg);
     		  l_acnt_id = -1;
     		  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     		  tpfree ( ( char * )ptr_fml_Obuf);
     		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     	  
        }
      /********* Comment for Pledge *** Samip ***/

				sql_tifp_qty=0;
				MEMSET(sql_isin_nmbr);
				MEMSET(sql_pod_ref_no);
				MEMSET(sql_agree_nmbr);
				MEMSET(sql_dbd_dp_id);
				MEMSET(sql_dbd_dp_clnt_id);
				memset(sql_stk_stck_cd,'\0',sizeof(sql_stk_stck_cd));
				MEMSET(sql_mtch_accnt);
				sql_pon_nmbr = 0.0;
				MEMSET(sql_err_cd);
				MEMSET(sql_err_desc);

				/****** Commented by Samip ***********/

				EXEC SQL 
						 SELECT 
				           tmp_tifp_qty,
				           tmp_isin_nmbr,
				           tmp_dp_id,
				           tmp_dp_clnt_id,
				           tmp_pod_ref_no,
				           tmp_stck_cd, 
				           tmp_clm_mtch_accnt,
				           tmp_dpm_nmbr,
				           trunc(tmp_agree_nmbr)
				     INTO 
			             :sql_tifp_qty,
			             :sql_isin_nmbr,
			             :sql_dbd_dp_id,
			             :sql_dbd_dp_clnt_id,
			             :sql_pod_ref_no,
			             :sql_stk_stck_cd,
			             :sql_mtch_accnt,
			             :sql_pon_nmbr,
			             :sql_agree_nmbr
				     FROM  TEMP_PLG_RECORDS
				     WHERE rownum < 2;

				EXEC SQL 
				     DELETE FROM TEMP_PLG_RECORDS
				     WHERE rownum < 2;
				
				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S31385", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   			{
					fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
    			fn_errlog( c_ServiceName, "S31390", TPMSG, c_err_msg  );
   				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     			l_acnt_id = -1;
     			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     			tpfree (( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
				}

				/** Added for Ver 1.7 **/

				i_plg_replg = 0;
				EXEC SQL
					SELECT COUNT(1)
					INTO :i_plg_replg
					FROM prc_plg_replg_clnts
					WHERE pcr_mtch_Accnt = :sql_mtch_accnt;

				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S31395", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				if(i_plg_replg > 0)
				{

				l_plg_tifp_qty = 0;
				l_pon_wise_replg_qty = 0;
				l_plg_without_replg = 0;
				l_tot_withdr_inv_tifp_qty = 0;
				l_tot_withdr_inv_with_replg = 0;
				l_tot_replg1_cls_tifp_qty = 0;

				EXEC SQL
					SELECT PTD_TIFP_QTY,NVL(PTD_REPLG1_QTY,0)
					INTO :l_plg_tifp_qty,:l_pon_wise_replg_qty
					FROM ptd_tifp_dtls
					WHERE PTD_LEG_NO = 'L5'
					AND PTD_TIFP_STTS = 'P'
					AND PTD_DPM_NMBR1 = :sql_pon_nmbr
					AND PTD_CLM_MTCH_ACCNT = :sql_mtch_accnt
					AND PTD_DP_ID = :sql_dbd_dp_id
					AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id;

				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S31400", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				l_plg_without_replg = l_plg_tifp_qty - l_pon_wise_replg_qty;

				fn_userlog(c_ServiceName,"Total Plg qty :%ld:",l_plg_tifp_qty);
				fn_userlog(c_ServiceName,"Total RePlg qty :%ld:",l_pon_wise_replg_qty);
				fn_userlog(c_ServiceName,"Total Plg without Replg qty :%ld:",l_plg_without_replg);

				EXEC SQL
					SELECT NVL(SUM(PTD_TIFP_QTY),0)
					INTO :l_tot_withdr_inv_tifp_qty
					FROM ptd_tifp_dtls
					WHERE PTD_LEG_NO in ('W3','I3')
					AND PTD_TIFP_STTS = 'P'
					AND PTD_DPM_NMBR1 = :sql_pon_nmbr
					AND PTD_CLM_MTCH_ACCNT = :sql_mtch_accnt
					AND PTD_DP_ID = :sql_dbd_dp_id
					AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id;

				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S31405", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				l_tot_withdr_inv_with_replg = fn_maxl(l_tot_withdr_inv_tifp_qty - l_plg_without_replg,0);

				fn_userlog(c_ServiceName,"Total Withdrawal/Invocation qty :%ld:",l_tot_withdr_inv_tifp_qty);
				fn_userlog(c_ServiceName,"Total Withdrawal/Invocation qty with Replege :%ld:",l_tot_withdr_inv_with_replg);

				EXEC SQL
					SELECT NVL(SUM(PTD_TIFP_QTY),0)
					INTO :l_tot_replg1_cls_tifp_qty
					FROM ptd_tifp_dtls
					WHERE PTD_LEG_NO = 'U5'
					AND PTD_TIFP_STTS = 'P'
					AND PTD_DPM_NMBR1 = :sql_pon_nmbr
					AND PTD_CLM_MTCH_ACCNT = :sql_mtch_accnt
					AND PTD_DP_ID = :sql_dbd_dp_id
					AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id;

				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S31410", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				fn_userlog(c_ServiceName,"Total Replege 1 closure confirmed qty :%ld:",l_tot_replg1_cls_tifp_qty);

				if(l_pon_wise_replg_qty != 0 && l_tot_withdr_inv_with_replg >= l_tot_replg1_cls_tifp_qty)
        {

				/********
				EXEC SQL
					SELECT COUNT(1)
					INTO :i_repledge_closure
					FROM ptd_tifp_dtls
					WHERE PTD_LEG_NO = 'U5'
					AND PTD_TIFP_STTS = 'P'
					AND PTD_DPM_NMBR1 = :sql_pon_nmbr
					AND PTD_CLM_MTCH_ACCNT = :sql_mtch_accnt
					AND PTD_DP_ID = :sql_dbd_dp_id
					AND SUBSTR(PTD_DP_ID,1,1)<>'1'
					AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id;

				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S31415", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

     		fn_userlog(c_ServiceName,"No of Repledge2 Closure record :%d:",i_repledge_closure);
				******/

        	fn_userlog(c_ServiceName,"Repledge1 closure record not confirmed for :%lf:",sql_pon_nmbr);
        	fn_userlog(c_ServiceName,"Skipping WIthdrawal/Invocation closure for :%lf:",sql_pon_nmbr);
        	continue;
				}

				/********* 
				EXEC SQL
					SELECT COUNT(1)
					INTO :i_repledge_closure
					FROM ptd_tifp_dtls
					WHERE PTD_LEG_NO = 'U5'
					AND PTD_TIFP_STTS = 'P'
					AND PTD_DPM_NMBR1 = :sql_pon_nmbr
					AND PTD_CLM_MTCH_ACCNT = :sql_mtch_accnt
					AND PTD_DP_ID = :sql_dbd_dp_id
					AND SUBSTR(PTD_DP_ID,1,1)<>'1'
					AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id;

				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S31420", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

     		fn_userlog(c_ServiceName,"No of Repledge2 Closure record :%d:",i_repledge_closure);

      	if (i_repledge_closure == 0)
      	{
        	fn_userlog(c_ServiceName,"Repledge1 closure record not confirmed for :%lf:",sql_pon_nmbr);
        	fn_userlog(c_ServiceName,"Skipping WIthdrawal/Invocation closure for :%lf:",sql_pon_nmbr);
        	continue;
      	 }
					***************/
				}

				/** End for Ver 1.7 **/
       
        /*****************************  ends *******************************/

				sql_plg_val = 0.0;

				if(DEBUG_MSG_LVL_3){
        	fn_userlog(c_ServiceName,"The tifp qty [%ld]",sql_tifp_qty);
        	fn_userlog(c_ServiceName,"The create slip number [%lld]",sql_crt_slip_no);
        	fn_userlog(c_ServiceName,"The isin nmbr [%s]",sql_isin_nmbr.arr);
        	fn_userlog(c_ServiceName,"The dp id  [%s]",sql_dbd_dp_id.arr);
        	fn_userlog(c_ServiceName,"The dp clnt acc [%s]",sql_dbd_dp_clnt_id.arr);
        	fn_userlog(c_ServiceName,"The pod ref no [%s]",sql_pod_ref_no.arr);
        	fn_userlog(c_ServiceName,"The stk code  [%s]",sql_stk_stck_cd);
        	fn_userlog(c_ServiceName,"The mtch clnt acc [%s]",sql_mtch_accnt.arr);
        	fn_userlog(c_ServiceName,"The pon nmbr  [%lf]",sql_pon_nmbr);  /**  **/
        	fn_userlog(c_ServiceName,"The agree nmbr  [%s]",sql_agree_nmbr.arr);
        }
	
				EXEC SQL 
					   SELECT ltq_plg_rt
				     INTO   :sql_plg_val
			 		   FROM   ltq_trd_qt
			 		   WHERE  ltq_stck_cd = :sql_stk_stck_cd
					   AND    ltq_xchng_cd = 'BSE'; 
		
			 	if(SQLCODE !=0 ) 
       	{
       		fn_errlog( c_ServiceName, "S31425", SQLMSG, c_err_msg  );
         	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         	l_acnt_id = -1;
         	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
         	tpfree ( ( char * )ptr_fml_Obuf);
         	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       	}

        /**  EQ SAM  Get haircut percentage  **/

        i_returncode = fn_get_haircut(c_ServiceName ,
                                      sql_mtch_accnt.arr,
                                      sql_stk_stck_cd,
                                      &sql_stk_plg_haircut,
                                      c_err_msg);

        if(i_returncode == -1)
        {
          fn_errlog( c_ServiceName, "S31430", LIBMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        /**  ends ***/

					
        /* Calculating the Pledge value for the stock selected. The value will be in Paise  */

				sql_plg_val = (sql_tifp_qty * (sql_plg_val *(1 - ((double)(sql_stk_plg_haircut)/100))))*100; /** diwa typecast of
float made double **/

				if((long long)(sql_plg_val  * 100)%100 > 50)
				{
					sql_plg_val = sql_plg_val + 1.0;
					fn_userlog( c_ServiceName, "The rounded off amount is [%lf]", sql_plg_val);
				}
				
				ll_plg_val = (long long) sql_plg_val;

				sql_plg_val = (double) ll_plg_val;

				i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

			 	if ( i_trnsctn == -1 )
		   	{
  		 		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	     		fn_errlog( c_ServiceName, "S31435",LIBMSG,c_err_msg);
	     		l_acnt_id = -1;
	     		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
	     		tpfree ( ( char * )ptr_fml_Obuf);
	     		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			 	}
	
				ptr_fml_Sbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
				if (ptr_fml_Sbuf == NULL)
				{
					fn_errlog(c_ServiceName, "S31440", TPMSG, c_err_msg);
					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
					Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
					tpfree((char *)ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );          
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
				}

				ptr_fml_Rbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
				if (ptr_fml_Rbuf == NULL)
				{
					fn_errlog(c_ServiceName, "S31445", TPMSG, c_err_msg);
					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
					Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
					tpfree((char *)ptr_fml_Obuf);
					tpfree((char *)ptr_fml_Sbuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );					
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
				}

				fn_userlog(c_ServiceName,"The pledge val is [%lld]",ll_plg_val);
					
				strcpy((char *)sql_usr_code.arr,"EBA");
        strcpy((char *)temp,"PCL");
        sql_clsr_typ = 'U';  
        SETLEN(sql_usr_code);

				Fadd32(ptr_fml_Sbuf,FFO_OPERATION_TYP, (char *)&sql_oprn_typ,0);
				Fadd32(ptr_fml_Sbuf,FFO_CLSR_TYP, (char *)&sql_clsr_typ,0);
				Fadd32(ptr_fml_Sbuf,FFO_PLEDGE_TYP, (char *)temp,0);
				Fadd32(ptr_fml_Sbuf,FFO_DPID,(char *)sql_dbd_dp_id.arr,0);	
				Fadd32(ptr_fml_Sbuf,FFO_DP_CLNT_ID,(char *)sql_dbd_dp_clnt_id.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_ISIN_NMBR, (char *)sql_isin_nmbr.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_PLG_QTY,(char *)&sql_tifp_qty,0);
				Fadd32(ptr_fml_Sbuf,FFO_CLOSURE_DT,(char *)sql_clsr_dt.arr,0);
  			Fadd32(ptr_fml_Sbuf,FFO_EXECN_DT,(char *)sql_execn_date.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_USER_CODE,(char *)sql_usr_code.arr,0);
				/** Fadd32(ptr_fml_Sbuf,FFO_CRT_SLIP_NO,(char *)&sql_crt_slip_no,0);
				Fadd32(ptr_fml_Sbuf,FFO_CONF_SLIP_NO,(char *)&sql_conf_slip_no,0); **/
				Fadd32(ptr_fml_Sbuf,FFO_INDEX,(char *)&sql_crt_slip_no,0);
				Fadd32(ptr_fml_Sbuf,FFO_USER_INDEX,(char *)&sql_conf_slip_no,0);
				Fadd32(ptr_fml_Sbuf,FFO_AGREE_NO,(char *)sql_agree_nmbr.arr,0);
				 /** Fadd32(ptr_fml_Sbuf,FFO_DPM_NO,(char *)&sql_pon_nmbr,0);  --commented  **/
	      Fadd32(ptr_fml_Sbuf,FFO_JIFFY,(char *)&sql_pon_nmbr,0);  /**  **/

				Fadd32(ptr_fml_Sbuf,FFO_EBA_MTCH_ACT_NO,(char *)v_ucc_cd.arr,0);

				MEMSET(c_seg_code);
				MEMSET(c_plg_type);
				if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
				{
					Fadd32(ptr_fml_Sbuf,FFO_BRKR_ID,(char *)c_iwtl_dp_accnt_dpid,0);
					Fadd32(ptr_fml_Sbuf,FFO_CTCL_ID,(char *)c_iwtl_dp_accnt_clntid,0);
					strcpy(c_seg_code,"07");
				}
				else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0)
				{
					Fadd32(ptr_fml_Sbuf,FFO_BRKR_ID,(char *)c_cdsl_iwtl_dp_accnt_dpid,0);
					Fadd32(ptr_fml_Sbuf,FFO_CTCL_ID,(char *)c_cdsl_iwtl_dp_accnt_clntid,0);
					strcpy(c_seg_code,"AL");
				}

				strcpy(c_plg_type,"MP");
				d_inv_value = 0.0;

				Fadd32(ptr_fml_Sbuf,FFO_INSTRMNT_TYP,(char *)c_seg_code,0);
				Fadd32(ptr_fml_Sbuf,FFO_OPTION_TYP,(char *)c_plg_type,0);
				Fadd32(ptr_fml_Sbuf,FFO_AMOUNT,(char *)&d_inv_value,0);

        /*** Ver 1.2 Starts ***/

          MEMSET(c_exg_id);
          MEMSET(c_cm_id);
          MEMSET(c_tm_id);


          if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
          {
            strcpy(c_exg_id,"01");
            strcpy(c_cm_id,"M50519");
            strcpy(c_tm_id,"07730");

            i_err[20] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CD,(char *)c_exg_id,0);
            i_err[21] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM,(char *)c_cm_id,0);
            i_err[22] = Fadd32(ptr_fml_Sbuf,FFO_FRWD_TM,(char *)c_tm_id,0);
            i_err[23] = Fadd32(ptr_fml_Sbuf,FFO_ACTION1,(char *)sql_dbd_dp_id.arr,0);		/** Ver 1.7 **/
            i_err[24] = Fadd32(ptr_fml_Sbuf,FFO_ACTION2,(char *)sql_dbd_dp_clnt_id.arr,0);	/** Ver 1.7 **/

          }
         /*** Ver 1.2 Ends ***/


        /* call DP for Withdraw request */

/****************** Added  *START****************/


          if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
          {
            fn_userlog(c_ServiceName,"Calling SFO_CALL_DP ");
            i_returncode=tpcall("SFO_CALL_DP",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
          }
          else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0)
          {
            fn_userlog(c_ServiceName,"Calling SFO_CALL_DPC ");
            i_returncode=tpcall("SFO_CALL_DPC",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
          }

          fn_userlog(c_ServiceName,"After Call i_returncode : %d ",i_returncode);

          if (i_returncode == -1)
          {
            if(tperrno == TPESVCFAIL)
            {
              if(Fget32(ptr_fml_Rbuf, FFO_ERR_MSG, 0, c_err_msg, 0 ) == -1)
              {
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
                tpfree((char *)ptr_fml_Sbuf);
                tpfree((char *)ptr_fml_Rbuf);
                tpfree((char *)ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
              }
            }
            else
            {
              fn_errlog(c_ServiceName, "S31450", TPMSG, c_err_msg);
            }

            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
            tpfree((char *)ptr_fml_Sbuf);
            tpfree((char *)ptr_fml_Rbuf);
            tpfree((char *)ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
          }


/****************** Added  *END******************/

        Fget32(ptr_fml_Rbuf,FFO_RTN_STTS,0,(char *)&sql_rtn_stts,0);
        Fget32(ptr_fml_Rbuf,FFO_ERR_CD,0,(char *)sql_err_cd.arr,0);
        Fget32(ptr_fml_Rbuf,FFO_ERR_DESC,0,(char *)sql_err_desc.arr,0);

        SETLEN(sql_err_cd);
        SETLEN(sql_err_desc);
        SETNULL(sql_err_cd);
        SETNULL(sql_err_desc);

/********************
				sql_rtn_stts = 1;
				strcpy(sql_err_cd.arr,"E00001"); TEMP ****************/

	       /** On successful Withdrawal Request Creation (sql_rtn_stts from DP will be 0) **/


      /** Ver 1.3 Starts **/

      if ( c_upld_typ == 'D')
      {
        
        EXEC SQL
        UPDATE AUDIT_PLEDGE_TXN_DTLS
        SET    APD_STTS = DECODE(:sql_rtn_stts,0,'P','J'),
               APD_RMRKS = trim(:sql_err_desc)
        WHERE  ROWID = :c_rowid;
   
        if(SQLCODE != 0)
        {
          fn_errlog(c_ServiceName, "S31455", SQLMSG, c_err_msg);
          fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }


        if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
        {
          fn_errlog( c_ServiceName, "S31460", TPMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree (( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }

        tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );
      }

      /** Ver 1.3 Ends **/

				if( sql_rtn_stts == 0)
				{

				EXEC SQL
        	UPDATE    POD_PLG_ORDR_DTLS
        	SET       POD_ORDR_STTS       = 'I',
										POD_PRCSD_QTY				= POD_PRCSD_QTY + :sql_tifp_qty
        	WHERE     trim(POD_ORDR_NO)   = trim(:sql_pod_ref_no)
        	AND       POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
        	RETURNING
                  POD_HAIRCUT,
                  POD_ORDR_VL,
                  NVL(POD_CHANNEL,'*'),
                  NVL(POD_CONF_QTY,0),
                  NVL(POD_RJCT_QTY,0),
                  NVL(POD_BP_ID,'*')
        INTO      :i_haircut,
                  :d_ordr_val,
                  :c_channel,
                  :d_conf_qty,
                  :d_rjct_qty,
                  :c_bpid;

        if(SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S31465", SQLMSG, c_err_msg);
            fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }


 			EXEC SQL
        INSERT INTO  PML_PLG_MOD_LOG
        (
          PML_ORDR_NO,
          PML_STCK_CD,
          PML_ORDR_QTY,
          PML_ORDR_TM,
          PML_HAIRCUT,
          PML_ORDR_VL,
          PML_ISIN_NO,
          PML_DP_CLNT_ACCNT,
          PML_DP_ACCNT,
          PML_CLNT_MTCH_ACCNT,
          PML_PLG_REV_TYP,
          PML_CONF_QTY,
          PML_RJCT_QTY,
          PML_MOD_TYPE,
          PML_STTS,
          PML_MOD_CNTR,
          PML_PLCD_SQNC,
          PML_BP_ID,
          PML_CHANNEL,
          PML_RMRKS
        )
values
        (
          trim(:sql_pod_ref_no),
          :sql_stk_stck_cd,
          :sql_tifp_qty,
          sysdate,
          :i_haircut,
          :d_ordr_val,
          :sql_isin_nmbr,
          :sql_dbd_dp_clnt_id,
          :sql_dbd_dp_id,
          :sql_mtch_accnt,
          :sql_plg_typ,
          :d_conf_qty,
          :d_rjct_qty,
          'L',
          'I',
           0,
           0,
           :c_bpid,
           :c_channel,
           'Create TIFP Update Status'
        );

        if(SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S31470", SQLMSG, c_err_msg);
            fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
						
					EXEC SQL 
						   UPDATE ptd_tifp_dtls 
							 SET
						       ptd_leg_no = 'W1',
						       ptd_slipno_w1 = :sql_crt_slip_no,
						       ptd_tifp_stts = 'P',
						       ptd_tifp_run_dt = sysdate,
						       ptd_exctn_dt = :sql_execn_date,
						       ptd_run_nmbr = :sql_ptd_seq,
									 PTD_SEG_CODE = :c_seg_code
						   WHERE 
									 ptd_dp_id = :sql_dbd_dp_id
						   AND ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
						   AND ptd_isin_nmbr = :sql_isin_nmbr
						   AND ptd_dpm_nmbr = :sql_pon_nmbr
						   AND trim(ptd_pod_ref_no) = trim(:sql_pod_ref_no)
					 	   AND ptd_plg_rev_typ = 'W'
						   AND ptd_tifp_stts = 'N'
						   AND ptd_slipno_w1 is NULL
						   AND ptd_tifp_qty = :sql_tifp_qty
						   AND rownum < 2;

			    	   if( SQLCODE !=0 )
      			   {
        			   fn_errlog( c_ServiceName, "S31475", SQLMSG, c_err_msg  );
        			   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			   l_acnt_id = -1;
        			   Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			   tpfree ( ( char * )ptr_fml_Obuf);
							   fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			   }

						EXEC SQL 
						     UPDATE pps_plg_pstn 
								 SET pps_w1_pos = pps_w1_pos + :sql_tifp_qty,
          	         pps_net_pos = pps_net_pos - :sql_tifp_qty,
						         pps_l5_pos = pps_l5_pos - :sql_tifp_qty,
          	         pps_plg_rev_flg = 'W'
						     WHERE pps_stck_cd = :sql_stk_stck_cd
								 AND    pps_clm_mtch_accnt = :sql_mtch_accnt   /**  added **/
          	     AND   pps_dp_accnt = :sql_dbd_dp_id
          	     AND   pps_dp_clnt_accnt = :sql_dbd_dp_clnt_id;
					
						if(SQLCODE !=0)
         	 	{
            	fn_errlog( c_ServiceName, "S31480", SQLMSG, c_err_msg  );
            	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            	l_acnt_id = -1;
            	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            	tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          	}

						EXEC SQL 
						     INSERT INTO ppl_plg_pstn_log
						     (
										ppl_clm_mtch_accnt,
						        ppl_stck_cd,
						        ppl_l1_pos_chg,
						        ppl_avg_pval_chg,
						        ppl_plg_rev_flg,
						        ppl_rmrks
									)
						      VALUES
						      (	
										:sql_mtch_accnt,
					 	        :sql_stk_stck_cd,
           	        :sql_tifp_qty,
					 	        :sql_plg_val,
					 	        'W',
					 	        :sql_err_desc
						      );
				
						if( SQLCODE !=0 )
          	{
          		fn_errlog( c_ServiceName, "S31485", SQLMSG, c_err_msg  );
            	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            	l_acnt_id = -1;
           	 	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            	tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          	}	
					
            /**************** Commented ***************	
						 sql_crt_slip_no = sql_crt_slip_no + 1;
            ********************************************/


						sprintf(c_msg, " Acceptance of [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/    
				
						fn_userlog(c_ServiceName,"End of Acceptance of [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr, sql_stk_stck_cd, sql_pon_nmbr);  /**  **/

						BAT_POST(c_msg);
						
				}/*end of if for return status zero from DP*/
				else
				/*** if ((sql_rtn_stts == 1) &&
				    ((strncmp((char *)sql_err_cd.arr,"E00001",6) == 0) ||
					   (strncmp((char *)sql_err_cd.arr,"E00005",6) == 0) ||
					   (strncmp((char *)sql_err_cd.arr,"E00008",6) == 0) ||
					   (strncmp((char *)sql_err_cd.arr,"E00009",6) == 0) ||
					   (strncmp((char *)sql_err_cd.arr,"E00020",6) == 0))) *** Comment by Samip ***/
				{
						
						EXEC SQL 
								 UPDATE ptd_tifp_dtls 
								 SET
						            /** ptd_leg_no = 'W1',
						            ptd_tifp_stts = 'J', ** Commented for Ver 1.8 **/
						            ptd_tifp_run_dt = sysdate,
						            ptd_exctn_dt = :sql_execn_date,
                        PTD_RMRKS = trim(:sql_err_desc)          /** Ver 1.6  **/
						     WHERE  ptd_dp_id = :sql_dbd_dp_id
						     AND ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
						     AND ptd_isin_nmbr = :sql_isin_nmbr
						     AND trim(ptd_pod_ref_no) = trim(:sql_pod_ref_no)
						     AND ptd_plg_rev_typ = 'W'
						     AND ptd_tifp_stts = 'N'
						     AND ptd_slipno_w1 is NULL
						     AND ptd_dpm_nmbr = :sql_pon_nmbr
						     AND ptd_tifp_qty = :sql_tifp_qty
						     AND rownum < 2;

			    	 if( SQLCODE !=0 )
      			 {
        			 fn_errlog( c_ServiceName, "S31490", SQLMSG, c_err_msg  );
        			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			 l_acnt_id = -1;
        			 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			 tpfree ( ( char * )ptr_fml_Obuf);
							 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			 }
						
						 EXEC SQL 
						      UPDATE pod_plg_ordr_dtls 
									SET    /** pod_ordr_stts = 'J', ** Commented for Ver 1.8 **/
                         POD_RMRKS = trim(:sql_err_desc) 
						      WHERE  trim(pod_ordr_no) = trim(:sql_pod_ref_no)
                  AND    POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						      AND    pod_plg_rev_typ = 'W';
	
			    	 if( SQLCODE !=0 )
		   			 {
			   			 fn_errlog( c_ServiceName, "S31495", SQLMSG, c_err_msg  );
				 			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       				 l_acnt_id = -1;
       				 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       				 tpfree ( ( char * )ptr_fml_Obuf);
							 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       				 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     				 }

             EXEC SQL
                  DECLARE ptd_cur CURSOR FOR
                  SELECT  ptd_plg_vs_wd_qty, 
                          ptd_clm_mtch_accnt ,  
                          ptd_dp_id ,           
                          ptd_dp_clnt_id ,      
                          ptd_isin_nmbr ,       
													ptd_dpm_nmbr 
                  FROM    ptd_tifp_dtls 
                  WHERE   trim(ptd_pod_ref_no) = trim(:sql_pod_ref_no)
									AND ptd_dpm_nmbr = :sql_pon_nmbr
                  AND     ptd_plg_rev_typ = 'W';
             
		    	  if( SQLCODE !=0 )
     			  {
       			  fn_errlog( c_ServiceName, "S31500", SQLMSG, c_err_msg  );
       			  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       			  l_acnt_id = -1;
       			  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       			  tpfree ( ( char * )ptr_fml_Obuf);
						  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       			  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     			  }

            EXEC SQL 
            OPEN ptd_cur;

            if ( SQLCODE != 0 )
            {
                fn_errlog( c_ServiceName, "S31505", SQLMSG, c_err_msg  );
                fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
                EXEC SQL CLOSE ptd_cur;
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       			    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }
          
            while(1)
            {

                /**  starts **/

                MEMSET(sql_mtch_accnt_1);
                MEMSET(sql_dbd_dp_id_1);
                MEMSET(sql_dbd_dp_clnt_id_1);
                MEMSET(sql_isin_nmbr_1);

                /**  ends **/

                EXEC SQL
                FETCH ptd_cur 
								INTO
                      :sql_plg_vs_wd_qty_rej,
                      :sql_mtch_accnt_1,           
                      :sql_dbd_dp_id_1,                
                      :sql_dbd_dp_clnt_id_1,          
                      :sql_isin_nmbr_1,            
                      :sql_dpm_nmbr_rej;

                if ( SQLCODE != 0 )
                {
                    if ( SQLCODE == NO_DATA_FOUND )
                    {
                        EXEC SQL CLOSE ptd_cur;
                        break;
                    }
                    else
										{
												EXEC SQL CLOSE ptd_cur;
												fn_errlog( c_ServiceName, "S31510", SQLMSG, c_err_msg  );
												fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
												fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
												break;
										}
                }

                /**  starts **/

                SETNULL(sql_mtch_accnt_1);
                SETNULL(sql_dbd_dp_id_1);
                SETNULL(sql_dbd_dp_clnt_id_1);
                SETNULL(sql_isin_nmbr_1);

                /**  ends **/
									fn_userlog(c_ServiceName,"Inside withdrwal rejection in requested case......");
									fn_userlog(c_ServiceName,"sql_plg_vs_wd_qty_rej [%ld]",sql_plg_vs_wd_qty_rej);
									fn_userlog(c_ServiceName,"sql_dpm_nmbr_rej [%lf]",sql_dpm_nmbr_rej);
									fn_userlog(c_ServiceName,"sql_mtch_accnt_1 [%s]",sql_mtch_accnt_1.arr);
									fn_userlog(c_ServiceName,"sql_dbd_dp_id_1 [%s]",sql_dbd_dp_id_1.arr);
									fn_userlog(c_ServiceName,"sql_dbd_dp_clnt_id_1 [%s]",sql_dbd_dp_clnt_id_1.arr);
									fn_userlog(c_ServiceName,"sql_isin_nmbr_1 [%s]",sql_isin_nmbr_1.arr);

								/**** Commented for Ver 1.8 ****

                EXEC SQL
                     UPDATE ptd_tifp_dtls
                     SET    ptd_plg_vs_wd_qty = ptd_plg_vs_wd_qty - :sql_plg_vs_wd_qty_rej
                     WHERE  ptd_dpm_nmbr = :sql_dpm_nmbr_rej
                     AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt_1                                
                     AND    ptd_dp_id           = :sql_dbd_dp_id_1                                     
                     AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id_1                               
                     AND    ptd_isin_nmbr       = :sql_isin_nmbr_1                                 
                     AND    ptd_plg_rev_typ = 'P'
										 AND		ptd_leg_no = 'L5';																									** Added for Ver 1.7 **
               
                if ( SQLCODE != 0 )
							  {
									fn_errlog( c_ServiceName, "S31515", SQLMSG, c_err_msg  );
									fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
									EXEC SQL CLOSE ptd_cur;
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							  }   
								*** Commented for Ver 1.8 ***/

								if(DEBUG_MSG_LVL_3)
								{
									fn_userlog(c_ServiceName,"After plgVswthdrw update ......");
								}
 
             } 

						 EXEC SQL 
						      SELECT (count(*)+1) 
						      INTO   :sql_pml_mod_cntr
						      FROM   pml_plg_mod_log
						      WHERE  pml_ordr_no = trim(:sql_pod_ref_no)
                  AND    PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						      AND    pml_mod_type in ('N','M','C','J');
	
						if( SQLCODE !=0 )
     				{
       				fn_errlog( c_ServiceName, "S31520", SQLMSG, c_err_msg  );
	       			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		     			l_acnt_id = -1;
			   			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				 			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	     				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		   			}

						EXEC SQL 
								 INSERT INTO pml_plg_mod_log
						     (
										pml_ordr_no,
						        pml_stck_cd,
						        pml_ordr_qty,
						        pml_ordr_tm,
						        pml_haircut,
						        pml_ordr_vl,
						        pml_isin_no,
						        pml_dp_clnt_accnt,
						        pml_dp_accnt,
						        pml_clnt_mtch_accnt,
						        pml_plg_rev_typ,
						        pml_conf_qty,
						        pml_rjct_qty,
						        pml_mod_type,
						        pml_stts,
						        pml_mod_cntr,
						        pml_plcd_sqnc,
						        pml_bp_id,
						        pml_channel,
						        pml_rmrks
							 	 )
						     VALUES
						     (	:sql_pod_ref_no,
	  					      :sql_stk_stck_cd,
							      :sql_tifp_qty,
							      sysdate,
							      :sql_stk_plg_haircut,		 
		 					      :sql_plg_val,
							      :sql_isin_nmbr,
							      :sql_dbd_dp_clnt_id,
							      :sql_dbd_dp_id,
							      :sql_mtch_accnt,
							      'W',
							      0,
							      0,
							      'J',
							      'C',
							      :sql_pml_mod_cntr,
							      0,
							      null,
							      'SYS',
							      :sql_err_desc
								 );
					
						if( SQLCODE !=0 )
				    {
					  	fn_errlog( c_ServiceName, "S31525", SQLMSG, c_err_msg  );
						  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							l_acnt_id = -1;
	            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		          tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				    }


						EXEC SQL 
						     SELECT dbd_tot_qty , 
											  dbd_qty_blckd
                 INTO   :sql_dbd_tot_qty, 
												:sql_dbd_qty_blckd	
						     FROM   dbd_dp_blck_dtls
						     WHERE  dbd_clm_mtch_accnt = :sql_mtch_accnt 
						     AND    dbd_dp_id = :sql_dbd_dp_id
                 AND    dbd_dp_clnt_id = :sql_dbd_dp_clnt_id
                 AND    dbd_stck_cd = :sql_stk_stck_cd;

						if( SQLCODE !=0 )
            {
              fn_errlog( c_ServiceName, "S31530", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              l_acnt_id = -1;
              Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
              tpfree ( ( char * )ptr_fml_Obuf);
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

						/*** Commented for Ver 1.8 ***
						EXEC SQL 
						     UPDATE dbd_dp_blck_dtls 
								 SET    ** DBD_SAM_BLCKD_QTY = DBD_SAM_BLCKD_QTY + :sql_tifp_qty, **
												DBD_REV_REQ_QTY = DBD_REV_REQ_QTY - :sql_tifp_qty
						     WHERE  dbd_dp_id = :sql_dbd_dp_id
						     AND    dbd_dp_clnt_id = :sql_dbd_dp_clnt_id
								 AND		dbd_clm_mtch_accnt = :sql_mtch_accnt      **  added **
						     AND    dbd_stck_cd = :sql_stk_stck_cd
						     RETURNING dbd_tot_qty , 
													 dbd_qty_blckd
						     INTO      :sql_dbd_tot_qty, 
													 :sql_dbd_qty_blckd;
			    	
						if( SQLCODE !=0 )
      			{
        			fn_errlog( c_ServiceName, "S31535", SQLMSG, c_err_msg  );
        			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			l_acnt_id = -1;
        			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			}
						*** Commented for Ver 1.8 ***/

            /*** The pledge amount is added back as the Withdrawal failed***/	
			
						/** Commented start for Ver 1.8 ***
						EXEC SQL 
						     UPDATE fab_fo_alc_bft_smry 
								 **SET    fab_plg_amt = fab_plg_amt + :sql_plg_val ** Commented **
								 SET    fab_nwb_amt = fab_nwb_amt + :sql_plg_val *** Commented for Ver 1.8 **
						     WHERE  fab_clm_mtch_accnt = :sql_mtch_accnt
						     RETURNING fab_bnk_accnt, 
													 fab_alctd_amt, 
						               fab_bft_amt , 
													 fab_plg_amt, 
													 fab_nwb_amt			**
						     INTO      :sql_fab_bnk_accnt, 
													 :sql_fab_alctd_amt,
						               :sql_fab_bft_amt, 
													 :sql_fab_plg_amt,
													 :sql_fab_nwb_amt;			

						if( SQLCODE !=0 )
            {
              fn_errlog( c_ServiceName, "S31540", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              l_acnt_id = -1;
              Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
              tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }
	
						EXEC SQL 
						     INSERT INTO fal_fo_alcbft_log
						     (
										fal_clm_mtch_accnt,
										fal_bnk_accnt,
										fal_alctd_amt,
										fal_bft_amt,
										fal_trn_dt,
										fal_old_plg_amt,
										** fal_plg_chg_amt,*
										fal_narration,
										fal_nwb_amt,			**
										fal_nwb_chg_amt   **
									)
						      VALUES
						      (
										:sql_mtch_accnt,
										:sql_fab_bnk_accnt,
										:sql_fab_alctd_amt,
										:sql_fab_bft_amt,
										sysdate,
										:sql_fab_plg_amt,
										** :sql_plg_val,      *
						        substr(:sql_err_desc,1,59),
										:sql_fab_nwb_amt,		**
										:sql_plg_val				**
									 );

						if( SQLCODE !=0 )
            {
              fn_errlog( c_ServiceName, "S31545", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              l_acnt_id = -1;
              Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
              tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }


						EXEC SQL 
						     INSERT INTO dld_dp_log_dtls
						     (
										dld_clm_mtch_accnt,
										dld_dp_id,
										dld_dp_clnt_id,
										dld_isin_nmbr,
										dld_stck_cd,
										dld_tot_qty_chg,
										dld_qty_blckd_chg,
										dld_plg_req_qty_chg,
										DLD_SAM_BLCKD_QTY_CHG,
										dld_rev_cov_qty_chg,
										dld_rev_req_qty_chg,
										dld_chg_tm,
										dld_blk_fr_sale_chg,
										dld_inv_req_qty_chg,
										dld_inv_cov_qty_chg,
										dld_rmrks
								 )
						VALUES
						     (
										:sql_mtch_accnt,
										:sql_dbd_dp_id,
										:sql_dbd_dp_clnt_id,
										:sql_isin_nmbr,
										:sql_stk_stck_cd,
										0,
										0,
										0,
										0,
										0,
										-(:sql_tifp_qty),
										sysdate,
										0,
										0,
										0,
										:sql_err_desc
									);

						if( SQLCODE !=0 )
            {
              fn_errlog( c_ServiceName, "S31550", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              l_acnt_id = -1;
              Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
              tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }
				
						*** Commented for Ver 1.8 **/

       /**** Commented after introduction of for update ***
		
						EXEC SQL 
						     UPDATE ptm_tifp_mstr 
								 SET    ptm_current_slip_no = :sql_crt_slip_no 
								 WHERE PTM_PLG_TYP = 'M';
			
						if( SQLCODE !=0 )
						{	
 	    				fn_errlog( c_ServiceName, "S31555", SQLMSG, c_err_msg  );
       				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			       	l_acnt_id = -1;
						 	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
			       	tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			       	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}

						sql_crt_slip_no = sql_crt_slip_no + 1;
       **************************************************/
    
						sprintf(c_msg, " Rejection of [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/
				
						fn_userlog(c_ServiceName,c_msg);
						BAT_POST(c_msg);
						memset(c_msg,'\0',sizeof(c_msg));
						strncpy(c_msg,sql_err_desc.arr,254);
						BAT_POST(c_msg);
			
				}

				 tpfree((char *)ptr_fml_Sbuf);
         tpfree((char *)ptr_fml_Rbuf);
		

    /***   Commented after introduction of for update clause and take above***	
				 EXEC SQL 
							UPDATE ptm_tifp_mstr 
							SET 	 ptm_current_slip_no = :sql_crt_slip_no  -1 
							WHERE  PTM_PLG_TYP = 'M';
			
				 if( SQLCODE !=0 )
				 {	
   					fn_errlog( c_ServiceName, "S31560", SQLMSG, c_err_msg  );
   					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			    	l_acnt_id = -1;
						Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
			    	tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}

      **********************************************/

					if(DEBUG_MSG_LVL_3)
					{
          	fn_userlog(c_ServiceName,"Just before commit....");
					}

				  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
     			{
    				fn_errlog( c_ServiceName, "S31565", TPMSG, c_err_msg  );
     				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						l_acnt_id = -1;
						Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						tpfree (( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
					}

					if(DEBUG_MSG_LVL_3)
					{
          	fn_userlog(c_ServiceName,"Just after commit for match [%s]....",sql_mtch_accnt);
					}

					}

		/**		} **  ends ****//*end of for processing for Withdrawal Creation*/
				tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );

		}/*end of else if for Withdraw Creation*/
		else
		/* Invocation Creation */
			/** if( sql_plg_typ == 'I' ) ** Commented for Ver 1.7 **/
      if( sql_plg_typ == 'I' && (sql_run_plg_typ == 'I' || sql_run_plg_typ == 'S'))   /** Ver 1.7 **//** S added for Ver 2.0 **/
			{

				/**** Commented ****
				MEMSET(c_ordr_rfrnc);
  			i_err[0] = Fget32(ptr_fml_Ibuf,FFO_ORDR_RFRNC,0,(char *)c_ordr_rfrnc,0);

				for(j=0;j < 1;j++)
  			{
    			if(i_err[j] == -1)
    			{
      			fn_errlog( c_ServiceName, "S31570", FMLMSG, c_err_msg  );
      			fn_userlog(c_ServiceName, "The Fget32 error at [%d]",j);
      			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    			}
  			}

				fn_userlog(c_ServiceName,"Order Ref for Invocation :%s:",c_ordr_rfrnc);

				d_qty_prc = 0.0;

				EXEC SQL
					SELECT sum(TRD_EXCTD_QTY*TRD_EXCTD_RT)/sum(TRD_EXCTD_QTY) 
					INTO :d_qty_prc
					FROM TRD_TRD_DTLS 
					WHERE TRD_ORDR_RFRNC = :c_ordr_rfrnc;

				if( SQLCODE !=0 )
     		{
     			fn_errlog( c_ServiceName, "S31575", SQLMSG, c_err_msg  );
       		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       		tpfree ( ( char * )ptr_fml_Obuf);
       		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     		}

				fn_userlog(c_ServiceName,"Trade Exec Rate for single qty :%lf:",d_qty_prc);

				****/

				sql_ptd_seq = 0.0;
			
				EXEC SQL 
						 SELECT ptd_seq.nextval 
						 INTO :sql_ptd_seq 
						 FROM DUAL;

				if( SQLCODE !=0 )
     		{
     			fn_errlog( c_ServiceName, "S31580", SQLMSG, c_err_msg  );
       		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       		l_acnt_id = -1;
       		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       		tpfree ( ( char * )ptr_fml_Obuf);
       		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     		}


				i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  	
				if ( i_trnsctn == -1 )
  			{
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			fn_errlog( c_ServiceName, "S31585",LIBMSG,c_err_msg);
    			l_acnt_id = -1;
    			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    			tpfree ( ( char * )ptr_fml_Obuf);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

				EXEC SQL DELETE FROM TEMP_PLG_RECORDS;

				if((SQLCODE !=0) && (SQLCODE!= NO_DATA_FOUND))
  			{
    			fn_errlog( c_ServiceName, "S31590", SQLMSG, c_err_msg  );
    			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			l_acnt_id = -1;
    			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  			}

	      if ( c_upld_typ == 'N' ) /** If condition added in Ver 1.3 **/
        {	
					EXEC SQL INSERT INTO TEMP_PLG_RECORDS
								(	tmp_tifp_qty, 
									tmp_plg_rev_typ,
									tmp_isin_nmbr,
									tmp_dp_id,
									tmp_dp_clnt_id,
									tmp_pod_ref_no,
									tmp_stck_cd,
									tmp_clm_mtch_accnt,
									tmp_dpm_nmbr,
									tmp_agree_nmbr)
								( SELECT 
									ptd_tifp_qty,
									'I',
									ptd_isin_nmbr,
									ptd_dp_id,
									ptd_dp_clnt_id,
									ptd_pod_ref_no,
									ptd_stck_cd,
									ptd_clm_mtch_accnt,
									ptd_dpm_nmbr,
									ptd_agree_nmbr
									FROM ptd_tifp_dtls 
									WHERE ptd_plg_rev_typ='I'
									AND ptd_tifp_stts = 'N' 
									AND ptd_leg_no is NULL 
									AND ptd_slipno_i1 is NULL
									AND    ptd_dp_id = :sql_dbd_dp_id
              		AND    ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
              		AND    ptd_stck_cd = :sql_stk_stck_cd
              		AND    ptd_clm_mtch_accnt = :sql_mtch_accnt
              		AND    ptd_pod_ref_no = :sql_pod_ref_no
                  AND    ((:sql_run_plg_typ = 'I' AND PTD_CHANNEL = 'SYS') OR (:sql_run_plg_typ = 'S' AND PTD_CHANNEL <> 'SYS')));
                  /** Condition added for Ver 2.0 **/
        }
        /***** Ver 1.3 Starts *****/
        else
        {
           EXEC SQL
             INSERT INTO TEMP_PLG_RECORDS
             (
                tmp_tifp_qty,
                tmp_plg_rev_typ,
                tmp_isin_nmbr,
                tmp_dp_id,
                tmp_dp_clnt_id,
                tmp_pod_ref_no,
                tmp_stck_cd,
                tmp_clm_mtch_accnt,
                tmp_dpm_nmbr,
                tmp_agree_nmbr
             )
             VALUES
             (
                :sql_tifp_qty,
                'I',
                :sql_isin_nmbr,
                :sql_dbd_dp_id,
                :sql_dbd_dp_clnt_id,
                '0',
                :sql_stk_stck_cd,
                :sql_mtch_accnt,
                :sql_pon_nmbr,
                :sql_agree_nmbr
             );
        }
        /***** Ver 1.3 Ends *****/
  
				if( SQLCODE !=0 )
  			{
    			fn_errlog( c_ServiceName, "S31595", SQLMSG, c_err_msg  );
    			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			l_acnt_id = -1;
    			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  			}
			
			if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   		{
				fn_userlog(c_ServiceName,"Invocation Creation Temporary records Committed");
    		fn_errlog( c_ServiceName, "S31600", TPMSG, c_err_msg  );
   			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     		l_acnt_id = -1;
     		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     		tpfree (( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
			}


      /*** Commented and add below in Ver 1.1 *** 
			sql_ptm_max_slip_no = 0;
			sql_ptm_min_slip_no = 0;
			sql_ptm_current_slip_no = 0;
     
     i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

      if ( i_trnsctn == -1 )
      {
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        fn_errlog( c_ServiceName, "S31605",LIBMSG,c_err_msg);
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree ( ( char * )ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }


			EXEC SQL 
			SELECT PTM_MIN_SLIP_NO,PTM_MAX_SLIP_NO,PTM_CURRENT_SLIP_NO 
			INTO :sql_ptm_min_slip_no, :sql_ptm_max_slip_no, :sql_ptm_current_slip_no
			FROM PTM_TIFP_MSTR
			WHERE  PTM_PLG_TYP = 'M'
      FOR UPDATE OF PTM_CURRENT_SLIP_NO;   *** for update introduced in Ver 1.1 ***

			if( SQLCODE !=0 )
  		{
    		fn_errlog( c_ServiceName, "S31610", SQLMSG, c_err_msg  );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		l_acnt_id = -1;
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				tpfree ( ( char * )ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}

			if((sql_ptm_current_slip_no < sql_ptm_min_slip_no)||(sql_ptm_current_slip_no > sql_ptm_max_slip_no))
			{
				sql_crt_slip_no = sql_ptm_min_slip_no;
        fn_userlog(c_ServiceName,"The number of range is [%lld]",(sql_ptm_max_slip_no - sql_ptm_min_slip_no));

				if((sql_ptm_max_slip_no - sql_ptm_min_slip_no) == 0)
				{
					strcpy(c_err_msg,"Slip number for Invocation is less than count.");
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			} 
			else
			{
				sql_crt_slip_no = sql_ptm_current_slip_no + 1 ;
        fn_userlog(c_ServiceName,"The number of range is [%lld]",(sql_ptm_max_slip_no - sql_ptm_current_slip_no));
							
				if((sql_ptm_max_slip_no - sql_ptm_current_slip_no) == 0 )
				{
					strcpy(c_err_msg,"Slip number for Invocation is less than count.");
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}


     EXEC SQL UPDATE PTM_TIFP_MSTR SET
       PTM_CURRENT_SLIP_NO = :sql_crt_slip_no
       WHERE PTM_PLG_TYP = 'M';

       if( SQLCODE !=0 )
       {
         fn_errlog( c_ServiceName, "S31615", SQLMSG, c_err_msg  );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         l_acnt_id = -1;
         Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
         tpfree ( ( char * )ptr_fml_Obuf);
         fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }


      if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
        {
          fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
          fn_errlog( c_ServiceName, "S31620", TPMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree (( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }

			sql_conf_slip_no = 0 ;
      ******************************************/

	
			EXEC SQL 
			SELECT COUNT(*) INTO :l_rec_cnt
			FROM TEMP_PLG_RECORDS;

			if( l_rec_cnt == 0 )
			{
				strcpy(c_err_msg,"There are no records for Invocation Creation");
				BAT_POST(c_err_msg);
				fn_userlog(c_ServiceName,"There are no records for Invocation Creation");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			
			sprintf(c_msg,"[%ld] number of records to be invoked",l_rec_cnt);
			fn_userlog( c_ServiceName,c_msg);
			BAT_POST(c_msg);

			for( i = 0; i < l_rec_cnt; i++)
			{

        /*** ver 1.1 Starts ***/
        sql_ptm_max_slip_no = 0;
        sql_ptm_min_slip_no = 0;
        sql_ptm_current_slip_no = 0;

        i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
   
        if ( i_trnsctn == -1 )
        {
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          fn_errlog( c_ServiceName, "S31625",LIBMSG,c_err_msg);
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }


        EXEC SQL
        SELECT PTM_MIN_SLIP_NO,PTM_MAX_SLIP_NO,PTM_CURRENT_SLIP_NO
        INTO :sql_ptm_min_slip_no, :sql_ptm_max_slip_no, :sql_ptm_current_slip_no
        FROM PTM_TIFP_MSTR
        WHERE  PTM_PLG_TYP = 'M'
        FOR UPDATE OF PTM_CURRENT_SLIP_NO;   /*** for update introduced in Ver 1.1 ***/

        if( SQLCODE !=0 )
        {
          fn_errlog( c_ServiceName, "S31630", SQLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if((sql_ptm_current_slip_no < sql_ptm_min_slip_no)||(sql_ptm_current_slip_no > sql_ptm_max_slip_no))
        {
          sql_crt_slip_no = sql_ptm_min_slip_no;
          fn_userlog(c_ServiceName,"The number of range is [%lld]",(sql_ptm_max_slip_no - sql_ptm_min_slip_no));

          if((sql_ptm_max_slip_no - sql_ptm_min_slip_no) == 0)
          {
            strcpy(c_err_msg,"Slip number for Invocation is less than count.");
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        }
        else
        {
          sql_crt_slip_no = sql_ptm_current_slip_no + 1 ;
          fn_userlog(c_ServiceName,"The number of range is [%lld]",(sql_ptm_max_slip_no - sql_ptm_current_slip_no));

          if((sql_ptm_max_slip_no - sql_ptm_current_slip_no) == 0 )
          {
            strcpy(c_err_msg,"Slip number for Invocation is less than count.");
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        }

        EXEC SQL UPDATE PTM_TIFP_MSTR SET
        PTM_CURRENT_SLIP_NO = :sql_crt_slip_no
        WHERE PTM_PLG_TYP = 'M';

        if( SQLCODE !=0 )
        {
          fn_errlog( c_ServiceName, "S31635", SQLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }


        if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
        {
          fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
          fn_errlog( c_ServiceName, "S31640", TPMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree (( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }

        sql_conf_slip_no = 0 ;

        /*** ver 1.1 Ends ***/


       fn_userlog(c_ServiceName,"Processing record :%d: of total records :%ld:",i+1,l_rec_cnt);

			i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
     	if ( i_trnsctn == -1 )
     	{
     		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     		fn_errlog( c_ServiceName, "S31645",LIBMSG,c_err_msg);
     		l_acnt_id = -1;
     		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     		tpfree ( ( char * )ptr_fml_Obuf);
     		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     	}

				sql_tifp_qty=0;
				MEMSET(sql_isin_nmbr);
				MEMSET(sql_pod_ref_no);
				MEMSET(sql_dbd_dp_id);
				MEMSET(sql_dbd_dp_clnt_id);
				memset(sql_stk_stck_cd,'\0',sizeof(sql_stk_stck_cd));
				MEMSET(sql_mtch_accnt);
				sql_pon_nmbr = 0.0 ;  /**  **/
				MEMSET(sql_err_cd);
				MEMSET(sql_err_desc);
				MEMSET(sql_agree_nmbr);

				EXEC SQL SELECT 
				TMP_TIFP_QTY,
				TMP_ISIN_NMBR,
				TMP_DP_ID,
				TMP_DP_CLNT_ID,
				TMP_POD_REF_NO,
				TMP_STCK_CD, 
				TMP_CLM_MTCH_ACCNT,
		    TMP_DPM_NMBR,
				TRUNC(TMP_AGREE_NMBR)
				INTO 
				:sql_tifp_qty,
				:sql_isin_nmbr,
				:sql_dbd_dp_id,
				:sql_dbd_dp_clnt_id,
				:sql_pod_ref_no,
				:sql_stk_stck_cd,
				:sql_mtch_accnt,
				:sql_pon_nmbr,
				:sql_agree_nmbr
				FROM TEMP_PLG_RECORDS
				WHERE ROWNUM < 2;

				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S31650", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

     /***********************************************************************/
				
				SETNULL(sql_isin_nmbr);
				SETNULL(sql_pod_ref_no);
				SETNULL(sql_dbd_dp_id);
				SETNULL(sql_dbd_dp_clnt_id);
				SETNULL(sql_mtch_accnt);
				SETNULL(sql_agree_nmbr);
		

	
				EXEC SQL 
				DELETE FROM TEMP_PLG_RECORDS
				WHERE ROWNUM < 2;
				
				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S31655", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   			{
					fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
					fn_errlog( c_ServiceName, "S31660", TPMSG, c_err_msg  );
   				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     			l_acnt_id = -1;
     			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     			tpfree (( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
				}	

      /************************************************************************************/
  					/** Added for Ver 1.7 **/

				i_plg_replg = 0;
        EXEC SQL
          SELECT COUNT(1)
          INTO :i_plg_replg
          FROM prc_plg_replg_clnts
          WHERE pcr_mtch_Accnt = :sql_mtch_accnt;

        if(SQLCODE !=0 )
        {
          fn_errlog( c_ServiceName, "S31665", SQLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

				if (i_plg_replg > 0)
				{

				l_plg_tifp_qty = 0;
				l_pon_wise_replg_qty = 0;
				l_plg_without_replg = 0;
				l_tot_withdr_inv_tifp_qty = 0;
				l_tot_withdr_inv_with_replg = 0;
				l_tot_replg1_cls_tifp_qty = 0;

				EXEC SQL
					SELECT PTD_TIFP_QTY,NVL(PTD_REPLG1_QTY,0)
					INTO :l_plg_tifp_qty,:l_pon_wise_replg_qty
					FROM ptd_tifp_dtls
					WHERE PTD_LEG_NO = 'L5'
					AND PTD_TIFP_STTS = 'P'
					AND PTD_DPM_NMBR1 = :sql_pon_nmbr
					AND PTD_CLM_MTCH_ACCNT = :sql_mtch_accnt
					AND PTD_DP_ID = :sql_dbd_dp_id
					AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id;

				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S31670", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				l_plg_without_replg = l_plg_tifp_qty - l_pon_wise_replg_qty;

				fn_userlog(c_ServiceName,"Total Plg qty :%ld:",l_plg_tifp_qty);
				fn_userlog(c_ServiceName,"Total RePlg qty :%ld:",l_pon_wise_replg_qty);
				fn_userlog(c_ServiceName,"Total Plg without Replg qty :%ld:",l_plg_without_replg);

				EXEC SQL
					SELECT NVL(SUM(PTD_TIFP_QTY),0)
					INTO :l_tot_withdr_inv_tifp_qty
					FROM ptd_tifp_dtls
					WHERE PTD_LEG_NO in ('W3','I3')
					AND PTD_TIFP_STTS = 'P'
					AND PTD_DPM_NMBR1 = :sql_pon_nmbr
					AND PTD_CLM_MTCH_ACCNT = :sql_mtch_accnt
					AND PTD_DP_ID = :sql_dbd_dp_id
					AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id;

				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S31675", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				l_tot_withdr_inv_with_replg = fn_maxl(l_tot_withdr_inv_tifp_qty - l_plg_without_replg,0);

				fn_userlog(c_ServiceName,"Total Withdrawal/Invocation qty :%ld:",l_tot_withdr_inv_tifp_qty);
				fn_userlog(c_ServiceName,"Total Withdrawal/Invocation qty with Replege :%ld:",l_tot_withdr_inv_with_replg);

				EXEC SQL
					SELECT NVL(SUM(PTD_TIFP_QTY),0)
					INTO :l_tot_replg1_cls_tifp_qty
					FROM ptd_tifp_dtls
					WHERE PTD_LEG_NO = 'U5'
					AND PTD_TIFP_STTS = 'P'
					AND PTD_DPM_NMBR1 = :sql_pon_nmbr
					AND PTD_CLM_MTCH_ACCNT = :sql_mtch_accnt
					AND PTD_DP_ID = :sql_dbd_dp_id
					AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id;

				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S31680", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				fn_userlog(c_ServiceName,"Total Replege 1 closure confirmed qty :%ld:",l_tot_replg1_cls_tifp_qty);

				if(l_pon_wise_replg_qty != 0 && l_tot_withdr_inv_with_replg >= l_tot_replg1_cls_tifp_qty)
        {

				/********
				EXEC SQL
					SELECT COUNT(1)
					INTO :i_repledge_closure
					FROM ptd_tifp_dtls
					WHERE PTD_LEG_NO = 'U5'
					AND PTD_TIFP_STTS = 'P'
					AND PTD_DPM_NMBR1 = :sql_pon_nmbr
					AND PTD_CLM_MTCH_ACCNT = :sql_mtch_accnt
					AND PTD_DP_ID = :sql_dbd_dp_id
					AND SUBSTR(PTD_DP_ID,1,1)<>'1'
					AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id;

				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S31685", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

     		fn_userlog(c_ServiceName,"No of Repledge2 Closure record :%d:",i_repledge_closure);
				******/

        	fn_userlog(c_ServiceName,"Repledge1 closure record not confirmed for :%lf:",sql_pon_nmbr);
        	fn_userlog(c_ServiceName,"Skipping WIthdrawal/Invocation closure for :%lf:",sql_pon_nmbr);
        	continue;
				}
				}

				/** End for Ver 1.7 **/

				sql_plg_val = 0.0;

				if(DEBUG_MSG_LVL_3){
         fn_userlog(c_ServiceName,"The tifp qty [%ld]",sql_tifp_qty);
         fn_userlog(c_ServiceName,"The creation slip number [%lld]",sql_crt_slip_no);
         fn_userlog(c_ServiceName,"The isin nmbr [%s]",sql_isin_nmbr.arr);
         fn_userlog(c_ServiceName,"The dp id  [%s]",sql_dbd_dp_id.arr);
         fn_userlog(c_ServiceName,"The dp clnt acc [%s]",sql_dbd_dp_clnt_id.arr);
         fn_userlog(c_ServiceName,"The pod ref no [%s]",sql_pod_ref_no.arr);
         fn_userlog(c_ServiceName,"The stk code  [%s]",sql_stk_stck_cd);
         fn_userlog(c_ServiceName,"The mtch clnt acc [%s]",sql_mtch_accnt.arr);
         fn_userlog(c_ServiceName,"The pon nmbr  [%lf]",sql_pon_nmbr);  /**  **/
        }
	
				EXEC SQL SELECT LTQ_PLG_RT
			  INTO :sql_plg_val
		 		FROM LTQ_TRD_QT
		 		WHERE LTQ_STCK_CD = :sql_stk_stck_cd
				AND LTQ_XCHNG_CD = 'BSE';    
		
		 		if(SQLCODE !=0 ) 
       	{
       		fn_errlog( c_ServiceName, "S31690", SQLMSG, c_err_msg  );
         	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         	l_acnt_id = -1;
         	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
         	tpfree ( ( char * )ptr_fml_Obuf);
					/*fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );*/							
         	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       	}

        /**  EQ SAM  Get haircut percentage  **/

        i_returncode = fn_get_haircut(c_ServiceName ,
                                      sql_mtch_accnt.arr,
                                      sql_stk_stck_cd,
                                      &sql_stk_plg_haircut,
                                      c_err_msg);

        if(i_returncode == -1)
        {
          fn_errlog( c_ServiceName, "S31695", LIBMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        /**  ends ***/
					
/* Calculating the Pledge value for the stock selected. The value will be in Paise*/

				sql_plg_val = (sql_tifp_qty * (sql_plg_val *(1 - ((double)(sql_stk_plg_haircut)/100))))*100; /** diwa typecast of
float made double **/
				if((long long)(sql_plg_val  * 100)%100 > 50)
				{
					sql_plg_val = sql_plg_val + 1.0;
					fn_userlog( c_ServiceName, "The rounded off amount is [%lf]", sql_plg_val);
				}
				
				ll_plg_val = (long long) sql_plg_val;

				sql_plg_val = (double) ll_plg_val;
			
				i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
     		if ( i_trnsctn == -1 )
     		{
     			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     			fn_errlog( c_ServiceName, "S31700",LIBMSG,c_err_msg);
     			l_acnt_id = -1;
     			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     			tpfree ( ( char * )ptr_fml_Obuf);
     			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     		}

			/*	tpfree((char *)ptr_fml_Sbuf); commented in */
					
				ptr_fml_Sbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
				if (ptr_fml_Sbuf == NULL)
				{
					fn_errlog(c_ServiceName, "S31705", TPMSG, c_err_msg);
					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
					Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
					tpfree((char *)ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );        
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
				}
					
			/*	tpfree((char *)ptr_fml_Rbuf); commented in */
					
				ptr_fml_Rbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
				if (ptr_fml_Rbuf == NULL)
				{
					fn_errlog(c_ServiceName, "S31710", TPMSG, c_err_msg);
					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
					Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
					tpfree((char *)ptr_fml_Obuf);
					tpfree((char *)ptr_fml_Sbuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );         
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
				}
				strcpy((char *)sql_usr_code.arr,"EBA");

       	/** If added for Ver 2.0 **/
        if(sql_run_plg_typ == 'I')
        {
          strcpy((char *)temp,"PIN");
        }
        else if (sql_run_plg_typ == 'S')
        {
          strcpy((char *)temp,"PCL");
        }
        /** Ver 2.0 **/

        sql_clsr_typ = 'U';
        SETLEN(sql_usr_code);

				Fadd32(ptr_fml_Sbuf,FFO_OPERATION_TYP, (char *)&sql_oprn_typ,0);
				Fadd32(ptr_fml_Sbuf,FFO_CLSR_TYP, (char *)&sql_clsr_typ,0);
				Fadd32(ptr_fml_Sbuf,FFO_PLEDGE_TYP, (char *)temp,0);
				Fadd32(ptr_fml_Sbuf,FFO_DPID,(char *)sql_dbd_dp_id.arr,0);	
				Fadd32(ptr_fml_Sbuf,FFO_DP_CLNT_ID,(char *)sql_dbd_dp_clnt_id.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_ISIN_NMBR, (char *)sql_isin_nmbr.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_PLG_QTY,(char *)&sql_tifp_qty,0);
				Fadd32(ptr_fml_Sbuf,FFO_CLOSURE_DT,(char *)sql_clsr_dt.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_EXECN_DT,(char *)sql_execn_date.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_USER_CODE,(char *)sql_usr_code.arr,0);
				/** Fadd32(ptr_fml_Sbuf,FFO_CRT_SLIP_NO,(char *)&sql_crt_slip_no,0);
				Fadd32(ptr_fml_Sbuf,FFO_CONF_SLIP_NO,(char *)&sql_conf_slip_no,0); **/
				Fadd32(ptr_fml_Sbuf,FFO_INDEX,(char *)&sql_crt_slip_no,0);
				Fadd32(ptr_fml_Sbuf,FFO_USER_INDEX,(char *)&sql_conf_slip_no,0);
				Fadd32(ptr_fml_Sbuf,FFO_AGREE_NO,(char *)sql_agree_nmbr.arr,0);
				/** Fadd32(ptr_fml_Sbuf,FFO_DPM_NO,(char *)&sql_pon_nmbr,0); --commented  **/
				Fadd32(ptr_fml_Sbuf,FFO_JIFFY,(char *)&sql_pon_nmbr,0);   /**  **/

				Fadd32(ptr_fml_Sbuf,FFO_EBA_MTCH_ACT_NO,(char *)v_ucc_cd.arr,0);

				MEMSET(c_seg_code);
				MEMSET(c_plg_type);

				if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
				{
					Fadd32(ptr_fml_Sbuf,FFO_BRKR_ID,(char *)c_iwtl_dp_accnt_dpid,0);
					Fadd32(ptr_fml_Sbuf,FFO_CTCL_ID,(char *)c_iwtl_dp_accnt_clntid,0);
					strcpy(c_seg_code,"07");
				}
				else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0)
				{
					Fadd32(ptr_fml_Sbuf,FFO_BRKR_ID,(char *)c_cdsl_iwtl_dp_accnt_dpid,0);
					Fadd32(ptr_fml_Sbuf,FFO_CTCL_ID,(char *)c_cdsl_iwtl_dp_accnt_clntid,0);
					strcpy(c_seg_code,"AL");
				}

				strcpy(c_plg_type,"MP");
        /** d_inv_value = 1.0; ** Ver 2.0 **/
        d_inv_value = (sql_run_plg_typ == 'I') ? 1.0 : 0.0;   /** Added for Ver 2.0 **/

				Fadd32(ptr_fml_Sbuf,FFO_INSTRMNT_TYP,(char *)c_seg_code,0);
				Fadd32(ptr_fml_Sbuf,FFO_OPTION_TYP,(char *)c_plg_type,0);
				Fadd32(ptr_fml_Sbuf,FFO_AMOUNT,(char *)&d_inv_value,0);

        /*** Ver 1.2 Starts ***/

          MEMSET(c_exg_id);
          MEMSET(c_cm_id);
          MEMSET(c_tm_id);


          if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
          {
            strcpy(c_exg_id,"01");
            strcpy(c_cm_id,"M50519");
            strcpy(c_tm_id,"07730");

            i_err[20] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CD,(char *)c_exg_id,0);
            i_err[21] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM,(char *)c_cm_id,0);
            i_err[22] = Fadd32(ptr_fml_Sbuf,FFO_FRWD_TM,(char *)c_tm_id,0);
            i_err[23] = Fadd32(ptr_fml_Sbuf,FFO_ACTION1,(char *)sql_dbd_dp_id.arr,0);		/** Ver 1.7 **/
            i_err[24] = Fadd32(ptr_fml_Sbuf,FFO_ACTION2,(char *)sql_dbd_dp_clnt_id.arr,0);	/** Ver 1.7 **/

          }

        /*** Ver 1.2 Ends ***/

/* call DP for Invocation request*/

/****************** Added  *START****************/

          if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0) /** Changed '2' to '1' in  **/
          {
            fn_userlog(c_ServiceName,"Calling SFO_CALL_DP ");
            i_returncode=tpcall("SFO_CALL_DP",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
          }
          else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0) /** Changed '2' to '1' in  **/
          {
            fn_userlog(c_ServiceName,"Calling SFO_CALL_DPC ");
            i_returncode=tpcall("SFO_CALL_DPC",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
          }

          fn_userlog(c_ServiceName,"After Call i_returncode : %d ",i_returncode);

          if (i_returncode == -1)
          {
            if(tperrno == TPESVCFAIL)
            {
              if(Fget32(ptr_fml_Rbuf, FFO_ERR_MSG, 0, c_err_msg, 0 ) == -1)
              {
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
                tpfree((char *)ptr_fml_Sbuf);
                tpfree((char *)ptr_fml_Rbuf);
                tpfree((char *)ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
              }
            }
            else
            {
              fn_errlog(c_ServiceName, "S31715", TPMSG, c_err_msg);
            }

            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
            tpfree((char *)ptr_fml_Sbuf);
            tpfree((char *)ptr_fml_Rbuf);
            tpfree((char *)ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
          }

/****************** Added  *END******************/

				Fget32(ptr_fml_Rbuf,FFO_RTN_STTS,0,(char *)&sql_rtn_stts,0);
				Fget32(ptr_fml_Rbuf,FFO_ERR_CD,0,(char *)sql_err_cd.arr,0);
				Fget32(ptr_fml_Rbuf,FFO_ERR_DESC,0,(char *)sql_err_desc.arr,0);

				SETLEN(sql_err_cd);
				SETLEN(sql_err_desc);
				SETNULL(sql_err_cd);
				SETNULL(sql_err_desc);

      /** Ver 1.3 Starts **/

      if ( c_upld_typ == 'D')
      {

        EXEC SQL
        UPDATE AUDIT_PLEDGE_TXN_DTLS
        SET    APD_STTS = DECODE(:sql_rtn_stts,0,'P','J'),
               APD_RMRKS = trim(:sql_err_desc)
        WHERE  ROWID = :c_rowid;

        if(SQLCODE != 0)
        {
          fn_errlog(c_ServiceName, "S31720", SQLMSG, c_err_msg);
          fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
        {
          fn_errlog( c_ServiceName, "S31725", TPMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree (( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }

        tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );
      }

      /** Ver 1.3 Ends **/

/********* On successful Invocation Request Creation (sql_rtn_stts from DP will be 0)*************/
					if( sql_rtn_stts == 0)
					{

				EXEC SQL
        	UPDATE    POD_PLG_ORDR_DTLS
        	SET       POD_ORDR_STTS       = 'I',
										POD_PRCSD_QTY				= POD_PRCSD_QTY + :sql_tifp_qty
        	WHERE     trim(POD_ORDR_NO)   = trim(:sql_pod_ref_no)
        	AND       POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
        	RETURNING
                  POD_HAIRCUT,
                  POD_ORDR_VL,
                  NVL(POD_CHANNEL,'*'),
                  NVL(POD_CONF_QTY,0),
                  NVL(POD_RJCT_QTY,0),
                  NVL(POD_BP_ID,'*')
        INTO      :i_haircut,
                  :d_ordr_val,
                  :c_channel,
                  :d_conf_qty,
                  :d_rjct_qty,
                  :c_bpid;

        if(SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S31730", SQLMSG, c_err_msg);
            fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }


 			EXEC SQL
        INSERT INTO  PML_PLG_MOD_LOG
        (
          PML_ORDR_NO,
          PML_STCK_CD,
          PML_ORDR_QTY,
          PML_ORDR_TM,
          PML_HAIRCUT,
          PML_ORDR_VL,
          PML_ISIN_NO,
          PML_DP_CLNT_ACCNT,
          PML_DP_ACCNT,
          PML_CLNT_MTCH_ACCNT,
          PML_PLG_REV_TYP,
          PML_CONF_QTY,
          PML_RJCT_QTY,
          PML_MOD_TYPE,
          PML_STTS,
          PML_MOD_CNTR,
          PML_PLCD_SQNC,
          PML_BP_ID,
          PML_CHANNEL,
          PML_RMRKS
        )
values
        (
          trim(:sql_pod_ref_no),
          :sql_stk_stck_cd,
          :sql_tifp_qty,
          sysdate,
          :i_haircut,
          :d_ordr_val,
          :sql_isin_nmbr,
          :sql_dbd_dp_clnt_id,
          :sql_dbd_dp_id,
          :sql_mtch_accnt,
          :sql_plg_typ,
          :d_conf_qty,
          :d_rjct_qty,
          'L',
          'I',
           0,
           0,
           :c_bpid,
           :c_channel,
           'Create TIFP Update Status'
        );

        if(SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S31735", SQLMSG, c_err_msg);
            fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
						
						EXEC SQL 
						UPDATE PTD_TIFP_DTLS SET
						PTD_LEG_NO = 'I1',
						PTD_SLIPNO_I1 = :sql_crt_slip_no,
						PTD_TIFP_STTS = 'P',
						PTD_TIFP_RUN_DT = sysdate,
						PTD_EXCTN_DT = :sql_execn_date,
						PTD_RUN_NMBR = :sql_ptd_seq,
							PTD_SEG_CODE = :c_seg_code
						WHERE PTD_DP_ID = :sql_dbd_dp_id
						AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
						AND PTD_ISIN_NMBR = :sql_isin_nmbr
						AND PTD_DPM_NMBR = :sql_pon_nmbr
						AND TRIM(PTD_POD_REF_NO) = TRIM(:sql_pod_ref_no)
						AND PTD_PLG_REV_TYP = 'I'
						AND PTD_TIFP_STTS = 'N'
						AND PTD_SLIPNO_I1 IS NULL
						AND PTD_TIFP_QTY = :sql_tifp_qty
						AND ROWNUM < 2;

			    	if( SQLCODE !=0 )
      			{
        			fn_errlog( c_ServiceName, "S31740", SQLMSG, c_err_msg  );
        			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			l_acnt_id = -1;
        			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			}

						EXEC SQL 
						UPDATE PPS_PLG_PSTN SET
						PPS_I1_POS = PPS_I1_POS + :sql_tifp_qty,
          	PPS_NET_POS = PPS_NET_POS - :sql_tifp_qty,
						PPS_L5_POS = PPS_L5_POS - :sql_tifp_qty,
          	PPS_PLG_REV_FLG = 'I'
						WHERE PPS_STCK_CD = :sql_stk_stck_cd
						AND    pps_clm_mtch_accnt = :sql_mtch_accnt   /** added **/
          	AND PPS_DP_ACCNT = :sql_dbd_dp_id
          	AND PPS_DP_CLNT_ACCNT = :sql_dbd_dp_clnt_id;
					
						if(SQLCODE !=0)
         	 	{
            	fn_errlog( c_ServiceName, "S31745", SQLMSG, c_err_msg  );
            	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            	l_acnt_id = -1;
            	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            	tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          	}
					

						EXEC SQL 
						INSERT INTO PPL_PLG_PSTN_LOG
						(PPL_CLM_MTCH_ACCNT,
						PPL_STCK_CD,
						PPL_L1_POS_CHG,
						PPL_AVG_PVAL_CHG,
						PPL_PLG_REV_FLG,
						PPL_RMRKS)
						VALUES
						(	:sql_mtch_accnt,
					 	:sql_stk_stck_cd,
           	:sql_tifp_qty,
						:sql_plg_val,
					 	'I',
					 	:sql_err_desc
						);
				
						if( SQLCODE !=0 )
          	{
          		fn_errlog( c_ServiceName, "S31750", SQLMSG, c_err_msg  );
            	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            	l_acnt_id = -1;
           	 	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            	tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          	}	
				
            /******** Commented **********	
						sql_crt_slip_no = sql_crt_slip_no + 1;
            ******************************************/

						fn_userlog( c_ServiceName," Acceptance of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);   /**  **/
						sprintf(c_msg,"Acceptance of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/
						BAT_POST(c_msg);
					
					}/*end of if for return status zero from DP*/

					else
	/********* On failure Invocation Request Creation (sql_rtn_stts from DP will be 1)
		They will reject only for the mentioned error codes confirmed by Product Team*************/
					/*** Comment by Samip ****
					if ((sql_rtn_stts == 1) && 
							((strncmp((char *)sql_err_cd.arr,"E00001",6) == 0) ||
						   (strncmp((char *)sql_err_cd.arr,"E00005",6) == 0) ||
						   (strncmp((char *)sql_err_cd.arr,"E00008",6) == 0) ||
						   (strncmp((char *)sql_err_cd.arr,"E00009",6) == 0) ||
						   (strncmp((char *)sql_err_cd.arr,"E00020",6) == 0))) 	**** By Samip ***/
					{
						
						EXEC SQL 
						UPDATE PTD_TIFP_DTLS SET
						PTD_LEG_NO = 'I1',
						PTD_TIFP_STTS = 'J',
						PTD_TIFP_RUN_DT = sysdate,
						PTD_EXCTN_DT = :sql_execn_date,
            PTD_RMRKS = trim(:sql_err_desc)    /** Ver 1.6  **/           
						WHERE PTD_DP_ID = :sql_dbd_dp_id
						AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
						AND PTD_ISIN_NMBR = :sql_isin_nmbr
						AND PTD_DPM_NMBR = :sql_pon_nmbr
						AND TRIM(PTD_POD_REF_NO) = TRIM(:sql_pod_ref_no)
						AND PTD_PLG_REV_TYP = 'I'
						AND PTD_TIFP_STTS = 'N'
						AND PTD_SLIPNO_I1 IS NULL
						AND PTD_TIFP_QTY = :sql_tifp_qty
						AND ROWNUM < 2;

						if( SQLCODE !=0 )
	      		{
		      		fn_errlog( c_ServiceName, "S31755", SQLMSG, c_err_msg  );
			    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				  		l_acnt_id = -1;
							Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	        		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	      		}
						
						EXEC SQL UPDATE POD_PLG_ORDR_DTLS SET
						POD_ORDR_STTS = 'J',
            POD_RMRKS = trim(:sql_err_desc) 
						WHERE trim(POD_ORDR_NO) = TRIM(:sql_pod_ref_no)
            AND    POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND POD_PLG_REV_TYP = 'I';
		
				    if( SQLCODE !=0 )
			   		{
				   		fn_errlog( c_ServiceName, "S31760", SQLMSG, c_err_msg  );
					 		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	       			l_acnt_id = -1;
	       			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
	       			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	       			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	     			}

            

           /**  **/
           EXEC SQL
           DECLARE ptd_cur2 CURSOR FOR
           SELECT PTD_PLG_VS_WD_QTY, PTD_DPM_NMBR,
           PTD_CLM_MTCH_ACCNT,PTD_DP_ID,PTD_DP_CLNT_ID,PTD_ISIN_NMBR  
           FROM PTD_TIFP_DTLS 
           WHERE trim(PTD_POD_REF_NO) = TRIM(:sql_pod_ref_no)
					 AND PTD_DPM_NMBR = :sql_pon_nmbr
           AND   PTD_PLG_REV_TYP = 'I';
             
		    	if( SQLCODE !=0 )
     			{
       			fn_errlog( c_ServiceName, "S31765", SQLMSG, c_err_msg  );
       			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       			l_acnt_id = -1;
       			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       			tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     			}

          EXEC SQL 
          OPEN ptd_cur2;

          if ( SQLCODE != 0 )
          {
                fn_errlog( c_ServiceName, "S31770", SQLMSG, c_err_msg  );
                fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
                EXEC SQL CLOSE ptd_cur2;
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       			    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
          
          while(1)
          {
                
                sql_plg_vs_wd_qty_rej = 0;
                sql_dpm_nmbr_rej = -1;

                /**  starts **/

                MEMSET(sql_mtch_accnt_1);
                MEMSET(sql_dbd_dp_id_1);
                MEMSET(sql_dbd_dp_clnt_id_1);
                MEMSET(sql_isin_nmbr_1);

                /**  ends **/

                EXEC SQL
                FETCH ptd_cur2 INTO
                :sql_plg_vs_wd_qty_rej,
                :sql_dpm_nmbr_rej,
                :sql_mtch_accnt_1,           
                :sql_dbd_dp_id_1,                
                :sql_dbd_dp_clnt_id_1,          
                :sql_isin_nmbr_1;            

                if ( SQLCODE != 0 )
                {
                    if ( SQLCODE == NO_DATA_FOUND )
                    {
                        EXEC SQL CLOSE ptd_cur2;
                        break;
                    }
                    else
										{
												EXEC SQL CLOSE ptd_cur2;
												fn_errlog( c_ServiceName, "S31775", SQLMSG, c_err_msg  );
												fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
												fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
												break;
										}
                }

               /**  starts **/

                SETNULL(sql_mtch_accnt_1);
                SETNULL(sql_dbd_dp_id_1);
                SETNULL(sql_dbd_dp_clnt_id_1);
                SETNULL(sql_isin_nmbr_1);

                /**  ends **/

               EXEC SQL
               UPDATE PTD_TIFP_DTLS
               SET PTD_PLG_VS_WD_QTY = PTD_PLG_VS_WD_QTY - :sql_plg_vs_wd_qty_rej
               WHERE PTD_DPM_NMBR = :sql_dpm_nmbr_rej
                 AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt_1                                
                 AND    ptd_dp_id           = :sql_dbd_dp_id_1                                     
                 AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id_1                               
                 AND    ptd_isin_nmbr       = :sql_isin_nmbr_1                                 
               	 AND   PTD_PLG_REV_TYP = 'P'
								 AND	PTD_LEG_NO = 'L5';					/********* Ver 1.7 ***/
               
               if ( SQLCODE != 0 )
							 {
										fn_errlog( c_ServiceName, "S31780", SQLMSG, c_err_msg  );
                    fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
                    EXEC SQL CLOSE ptd_cur2;
                    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
               }
           }


						EXEC SQL SELECT (COUNT(*)+1) INTO :sql_pml_mod_cntr
						FROM PML_PLG_MOD_LOG
						WHERE PML_ORDR_NO = TRIM(:sql_pod_ref_no)
            AND   PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND PML_MOD_TYPE IN ('N','M','C','J');
		
						if( SQLCODE !=0 )
	     			{
	       			fn_errlog( c_ServiceName, "S31785", SQLMSG, c_err_msg  );
		       		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			     		l_acnt_id = -1;
				   		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					 		tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		     			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			   		}
	
						EXEC SQL INSERT INTO PML_PLG_MOD_LOG
						(PML_ORDR_NO,
						PML_STCK_CD,
						PML_ORDR_QTY,
						PML_ORDR_TM,
						PML_HAIRCUT,
						PML_ORDR_VL,
						PML_ISIN_NO,
						PML_DP_CLNT_ACCNT,
						PML_DP_ACCNT,
						PML_CLNT_MTCH_ACCNT,
						PML_PLG_REV_TYP,
						PML_CONF_QTY,
						PML_RJCT_QTY,
						PML_MOD_TYPE,
						PML_STTS,
						PML_MOD_CNTR,
						PML_PLCD_SQNC,
						PML_BP_ID,
						PML_CHANNEL,
						PML_RMRKS)
						VALUES
						(	
						:sql_pod_ref_no,
		  			:sql_stk_stck_cd,
						:sql_tifp_qty,
						sysdate,
						:sql_stk_plg_haircut,		 
			 			:sql_plg_val,
						:sql_isin_nmbr,
						:sql_dbd_dp_clnt_id,
						:sql_dbd_dp_id,
						:sql_mtch_accnt,
						'I',
						 0,
					   0,
						'J',
						'C',
						:sql_pml_mod_cntr,
						0,
						null,
						'SYS',
						:sql_err_desc);
						
						if( SQLCODE !=0 )
				    {
					  	fn_errlog( c_ServiceName, "S31790", SQLMSG, c_err_msg  );
						  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							l_acnt_id = -1;
		           Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		          tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				    }
	
						EXEC SQL UPDATE DBD_DP_BLCK_DTLS SET
						/** DBD_SAM_BLCKD_QTY = DBD_SAM_BLCKD_QTY + :sql_tifp_qty, **/
						/** DBD_BLOCK_FOR_SALE = DBD_BLOCK_FOR_SALE + :sql_tifp_qty, *** Commented on confirmation from UAT **/
						DBD_INV_REQ_QTY = DBD_INV_REQ_QTY - :sql_tifp_qty
						WHERE DBD_DP_ID = :sql_dbd_dp_id
						AND DBD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
						AND dbd_clm_mtch_accnt = :sql_mtch_accnt     /**  added **/ 
						AND DBD_STCK_CD = :sql_stk_stck_cd
						RETURNING DBD_TOT_QTY , DBD_QTY_BLCKD
						INTO :sql_dbd_tot_qty, :sql_dbd_qty_blckd;
			    	
						if( SQLCODE !=0 )
	     			{
	       			fn_errlog( c_ServiceName, "S31795", SQLMSG, c_err_msg  );
	       			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	       			l_acnt_id = -1;
	       			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
	       			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	       			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	     			}
		
						EXEC SQL INSERT INTO DLD_DP_LOG_DTLS
						(DLD_CLM_MTCH_ACCNT,
						DLD_DP_ID,
						DLD_DP_CLNT_ID,
						DLD_ISIN_NMBR,
						DLD_STCK_CD,
						DLD_TOT_QTY_CHG,
						DLD_QTY_BLCKD_CHG,
						DLD_PLG_REQ_QTY_CHG,
						DLD_SAM_BLCKD_QTY_CHG,
						DLD_REV_COV_QTY_CHG,
						DLD_REV_REQ_QTY_CHG,
						DLD_CHG_TM,
						DLD_BLK_FR_SALE_CHG,
						DLD_INV_REQ_QTY_CHG,
						DLD_INV_COV_QTY_CHG,
						DLD_RMRKS)
						VALUES
						(:sql_mtch_accnt,
						:sql_dbd_dp_id,
						:sql_dbd_dp_clnt_id,
						:sql_isin_nmbr,
						:sql_stk_stck_cd,
						:sql_dbd_tot_qty,
						:sql_dbd_qty_blckd,
						0,
						:sql_tifp_qty,
						0,
						0,
						sysdate,
						/** 0, **/
						0, /*** -(:sql_tifp_qty), ***/
						/** :sql_tifp_qty, **/
						0,
						0,
						:sql_err_desc);
						
						if( SQLCODE !=0 )
	          {
	             fn_errlog( c_ServiceName, "S31800", SQLMSG, c_err_msg  );
	             Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	             l_acnt_id = -1;
	             Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
	             tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	             tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	           }
					
          /**** Commented after intorduction of for update clause ***
	
						EXEC SQL UPDATE PTM_TIFP_MSTR SET
						PTM_CURRENT_SLIP_NO = :sql_crt_slip_no
						WHERE PTM_PLG_TYP = 'M';
					
						if( SQLCODE !=0 )
			      {
			 	    	fn_errlog( c_ServiceName, "S31805", SQLMSG, c_err_msg  );
			       	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			       	l_acnt_id = -1;
			       	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
			       	tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			       	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			      }
	
						sql_crt_slip_no = sql_crt_slip_no + 1;

           **********************************************************/

						fn_userlog( c_ServiceName," Rejection of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/
						sprintf(c_msg,"Rejection of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/
						BAT_POST(c_msg);
						memset(c_msg,'\0',sizeof(c_msg));
						strncpy(c_msg,sql_err_desc.arr,254);
						BAT_POST(c_msg);
					}
					
				tpfree((char *)ptr_fml_Sbuf);
	      tpfree((char *)ptr_fml_Rbuf);
						

     /*** Commneted and taken above ************************	
				EXEC SQL UPDATE PTM_TIFP_MSTR SET
				PTM_CURRENT_SLIP_NO = :sql_crt_slip_no
				* PTM_CURRENT_SLIP_NO = :sql_conf_slip_no - 2 **
				WHERE PTM_PLG_TYP = 'M';
	
				if( SQLCODE !=0 )
				{
					fn_errlog( c_ServiceName, "S31810", SQLMSG, c_err_msg  );
			   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			   	l_acnt_id = -1;
			   	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
			   	tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			  }

      *************************************************************/
	
				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
	     	{
					fn_errlog( c_ServiceName, "S31815", TPMSG, c_err_msg  );
	     		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	       	l_acnt_id = -1;
	       	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
	       	tpfree (( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	       	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
				}
				}
	
		/*	      ends *********//*end of for processing*/
	
			tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );
		}/*end of Invocation Creation if statement*/
		/** Added for Ver 1.7 **/
		else if (sql_run_plg_typ == 'T')
		{
			MEMSET(c_pod_ref_no_plg);
			strcpy(c_pod_ref_no_plg,sql_pod_ref_no.arr);
			MEMSET(sql_pod_ref_no);

      i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

			if ( i_trnsctn == -1 )
			{
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				fn_errlog( c_ServiceName, "S31820",LIBMSG,c_err_msg);
				l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				tpfree ( ( char * )ptr_fml_Obuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			} 

			EXEC SQL SELECT PRS_PLG_REV_SEQ.nextval INTO :sql_prs_seq
			FROM DUAL;

			if (SQLCODE != 0)
			{
				fn_errlog( c_ServiceName, "S31825", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**						l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}	

			EXEC SQL 
			SELECT TO_CHAR(sysdate,'YYYYMMDD')||LPAD((PPS_PLG_SEQ+1),8,0)
			INTO :sql_pod_ordr_no
			FROM PPS_PLG_PLACED_SEQ 
			WHERE PPS_PLG_ORDR_DT = TO_DATE(TO_CHAR(sysdate,'DD-Mon-YYYY'),'DD-Mon-YYYY')
			FOR UPDATE OF PPS_PLG_SEQ;  

			if ((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
			{
				fn_errlog( c_ServiceName, "S31830", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**						l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			SETNULL(sql_pod_ordr_no);
				
			if (SQLCODE == NO_DATA_FOUND)
			{
				EXEC SQL 
				INSERT INTO PPS_PLG_PLACED_SEQ
				(PPS_PLG_SEQ,
				PPS_PLG_ORDR_DT)
				VALUES
				(1,
				TO_DATE(TO_CHAR(sysdate,'DD-Mon-YYYY'),'DD-Mon-YYYY'));
				
				if (SQLCODE != 0)
				{
					fn_errlog( c_ServiceName, "S31835", SQLMSG, c_err_msg  );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**							l_acnt_id = -1;
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				
				/**********Pledge order reference number is created**************************/
				EXEC SQL 
				SELECT TO_CHAR(sysdate,'YYYYMMDD')||LPAD(1,8,0) 
				INTO :sql_pod_ordr_no
				FROM DUAL;

				if (SQLCODE != 0)
				{
					fn_errlog( c_ServiceName, "S31840", SQLMSG, c_err_msg  );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**							l_acnt_id = -1;
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				SETNULL(sql_pod_ordr_no);

			}
			else
			{
				EXEC SQL 
				UPDATE PPS_PLG_PLACED_SEQ SET 
				PPS_PLG_SEQ = PPS_PLG_SEQ +1
				WHERE PPS_PLG_ORDR_DT = TO_DATE(TO_CHAR(sysdate,'DD-Mon-YYYY'),'DD-Mon-YYYY');
			
				if (SQLCODE != 0)
				{
					fn_errlog( c_ServiceName, "S31845", SQLMSG, c_err_msg  );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**							l_acnt_id = -1;
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}

      if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
      {
        fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
        fn_errlog( c_ServiceName, "S31850", TPMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree (( char * )ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
      }

       fn_userlog(c_ServiceName,"Inside TM CM Repledge");
        sql_ptd_seq = 0.0;

        EXEC SQL
             SELECT ptd_seq.nextval
             INTO :sql_ptd_seq
             FROM dual;

       if( SQLCODE !=0 )
        {
          fn_errlog( c_ServiceName, "S31855", SQLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

       	sql_ptm_max_slip_no = 0;
        sql_ptm_min_slip_no = 0;
        sql_ptm_current_slip_no = 0;

        i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
        if ( i_trnsctn == -1 )
        {
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          fn_errlog( c_ServiceName, "S31860",LIBMSG,c_err_msg);
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        EXEC SQL
        SELECT
        ptm_min_slip_no,
        ptm_max_slip_no,
        ptm_current_slip_no
        INTO
        :sql_ptm_min_slip_no,
        :sql_ptm_max_slip_no,
        :sql_ptm_current_slip_no
        FROM  ptm_tifp_mstr
        WHERE PTM_PLG_TYP = 'M'
        FOR   UPDATE OF ptm_current_slip_no;    

      	if( SQLCODE !=0 )
        {
          fn_errlog( c_ServiceName, "S31865", SQLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

       if((sql_ptm_current_slip_no < sql_ptm_min_slip_no)||(sql_ptm_current_slip_no > sql_ptm_max_slip_no))
        {
          sql_crt_slip_no = sql_ptm_min_slip_no;

          fn_userlog(c_ServiceName,"The number of range is [%lld]",(sql_ptm_max_slip_no - sql_ptm_min_slip_no));

          if((sql_ptm_max_slip_no - sql_ptm_min_slip_no) ==  0)
          {
            strcpy(c_err_msg,"Slip number for Withdraw is less than count.");
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        }
        else
        {
          sql_crt_slip_no = sql_ptm_current_slip_no + 1;

          fn_userlog(c_ServiceName,"The range is [%lld]",(sql_ptm_max_slip_no - sql_ptm_current_slip_no));

          if((sql_ptm_max_slip_no - sql_ptm_current_slip_no) == 0)
          {
            strcpy(c_err_msg,"Slip number for Withdraw is less than count.");
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        }

       EXEC SQL
        UPDATE ptm_tifp_mstr
        SET    ptm_current_slip_no = :sql_crt_slip_no
        WHERE  PTM_PLG_TYP = 'M';

        if( SQLCODE !=0 )
        {
           fn_errlog( c_ServiceName, "S31870", SQLMSG, c_err_msg  );
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           l_acnt_id = -1;
           Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
           tpfree ( ( char * )ptr_fml_Obuf);
           fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
        {
          fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
          fn_errlog( c_ServiceName, "S31875", TPMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree (( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }

         sql_conf_slip_no = 0 ;

					/****** Commented for Seg Code sending in CM CC ***

					d_fab_amt = 0.0;
					d_nwb_amt = 0.0;
					d_eab_amt = 0.0;

					EXEC SQL
						SELECT NVL(FAB_PLG_AMT,0),NVL(FAB_NWB_AMT,0)
						INTO :d_fab_amt,:d_nwb_amt
						FROM FAB_FO_ALC_BFT_SMRY
						WHERE FAB_CLM_MTCH_ACCNT = :sql_mtch_accnt;

					if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
					{
						fn_errlog( c_ServiceName, "S31880", SQLMSG, c_err_msg  );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						tpfree ( ( char * )ptr_fml_Obuf);
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
					else if (SQLCODE != 0 && SQLCODE == NO_DATA_FOUND)
					{
						d_fab_amt = 0.0;
						d_nwb_amt = 0.0;
					}

					EXEC SQL
						SELECT NVL(EAB_PLG_AMT,0)
						INTO :d_eab_amt
						FROM EAB_EQ_ALC_BFT_SMRY
						WHERE EAB_CLM_MTCH_ACCNT = :sql_mtch_accnt;
						
					if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
					{
						fn_errlog( c_ServiceName, "S31885", SQLMSG, c_err_msg  );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						tpfree ( ( char * )ptr_fml_Obuf);
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
					else if (SQLCODE != 0 && SQLCODE == NO_DATA_FOUND)
					{
						d_eab_amt = 0.0;
					}
					
					MEMSET(c_seg_code);

					if (d_eab_amt != 0.0 && d_fab_amt == 0.0 && d_nwb_amt == 0.0)
							strcpy(c_seg_code,"01");
					else
							strcpy(c_seg_code,"02");

					fn_userlog(c_ServiceName,"Value of c_seg_code :%s:",c_seg_code);

					****** Comment end **/

       i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
        if ( i_trnsctn == -1 )
        {
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          fn_errlog( c_ServiceName, "S31890",LIBMSG,c_err_msg);
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

        }

			strcpy(sql_pml_channel.arr,"SYS");
			SETLEN(sql_pml_channel);
			SETNULL(sql_pml_channel);
			fn_userlog(c_ServiceName,"Value of sql_pod_ordr_no :%s:",sql_pod_ordr_no.arr);
			fn_userlog(c_ServiceName,"Value of sql_stk_stck_cd :%s:",sql_stk_stck_cd);
			fn_userlog(c_ServiceName,"Value of sql_tifp_qty :%ld:",sql_tifp_qty);
			fn_userlog(c_ServiceName,"Value of sql_isin_nmbr :%s:",sql_isin_nmbr.arr);
			fn_userlog(c_ServiceName,"Value of sql_dbd_dp_clnt_id :%s:",sql_dbd_dp_clnt_id.arr);
			fn_userlog(c_ServiceName,"Value of sql_dbd_dp_id :%s:",sql_dbd_dp_id.arr);
			fn_userlog(c_ServiceName,"Value of sql_mtch_accnt :%s:",sql_mtch_accnt.arr);
			fn_userlog(c_ServiceName,"Value of sql_run_plg_typ :%c:",sql_run_plg_typ);
			fn_userlog(c_ServiceName,"Value of sql_pod_bp_id :%s:",sql_pod_bp_id.arr);
			fn_userlog(c_ServiceName,"Value of sql_pml_channel :%s:",sql_pml_channel.arr);
			fn_userlog(c_ServiceName,"Value of c_pod_ref_no_plg :%s:",c_pod_ref_no_plg);
						
			EXEC SQL INSERT INTO POD_PLG_ORDR_DTLS
			(POD_ORDR_NO,
			POD_STCK_CD,
			POD_ORDR_QTY,
			POD_ORDR_DT,
			POD_HAIRCUT,
			POD_ORDR_VL,
			POD_ISIN_NO,
			POD_DP_CLNT_ACCNT,
			POD_DP_ACCNT,
			POD_CLNT_MTCH_ACCNT ,
			POD_PLG_REV_TYP,
			POD_ORDR_STTS,
			POD_CONF_QTY,
			POD_PRCSD_QTY,   /*******1.3*****/
			POD_RMRKS,
			POD_BP_ID,
			POD_CHANNEL,
			POD_ALLOC_TYP)   /*** ver 4.7 ***/
			VALUES
			(:sql_pod_ordr_no,
			:sql_stk_stck_cd,
			:sql_tifp_qty,
			sysdate,
			0,
			0,
			:sql_isin_nmbr,
			:sql_dbd_dp_clnt_id,
			:sql_dbd_dp_id,
			:sql_mtch_accnt,
			:sql_run_plg_typ,
			'R',
			0,
			0,              /*******1.3*****/
			null,
			:sql_pod_bp_id,
			:sql_pml_channel,
			NULL);  /*** ver 4.7 ***/ 	
				
			if (SQLCODE != 0)
			{
				fn_errlog( c_ServiceName, "S31895", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**						l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			sql_pml_mod_type ='N';
			sql_pml_mod_cntr = 1;

			fn_userlog(c_ServiceName,"Value of sql_tifp_qty :%ld:",sql_tifp_qty);	
			MEMSET(sql_pml_rmrks);

			fn_userlog(c_ServiceName,"Value of sql_pml_channel :%s:",sql_pml_channel.arr);

			EXEC SQL INSERT INTO PML_PLG_MOD_LOG
			(PML_ORDR_NO,
			PML_STCK_CD,
			PML_ORDR_QTY,
			PML_ORDR_TM,
			PML_HAIRCUT,
			PML_ORDR_VL,
			PML_ISIN_NO,
			PML_DP_CLNT_ACCNT,
			PML_DP_ACCNT,
			PML_CLNT_MTCH_ACCNT,
			PML_PLG_REV_TYP,
			PML_MOD_TYPE,
			PML_STTS,
			PML_MOD_CNTR,
			PML_PLCD_SQNC,
			PML_BP_ID,
			PML_CHANNEL,
			PML_RMRKS)
			VALUES
			(:sql_pod_ordr_no,
			:sql_stk_stck_cd,
			:sql_tifp_qty,
			sysdate,
			0,
			0,
			:sql_isin_nmbr,
			:sql_dbd_dp_clnt_id,
			:sql_dbd_dp_id,
			:sql_mtch_accnt,
			:sql_run_plg_typ,
			:sql_pml_mod_type,
			'R',
			:sql_pml_mod_cntr,
			:sql_prs_seq,	
			:sql_pod_bp_id,
			:sql_pml_channel,
			:sql_pml_rmrks);
					
			if (SQLCODE != 0)
			{
				fn_errlog( c_ServiceName, "S31900", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**					l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			EXEC SQL
				INSERT INTO PTD_TIFP_DTLS
				(
					PTD_CLM_MTCH_ACCNT,
					PTD_STCK_CD,
					PTD_TIFP_QTY,
					PTD_PLG_REV_TYP,
					PTD_ISIN_NMBR,
					PTD_DP_ID,
					PTD_DP_CLNT_ID,
					PTD_POD_REF_NO,
					PTD_TIFP_RUN_DT,
					PTD_PLG_VS_WD_QTY,
					PTD_DPM_NMBR1,
					PTD_TIFP_STTS,
					PTD_IWTL_DP_ACCNT,
					PTD_AGREE_NMBR,
					PTD_SLIPNO_L1,
          PTD_CHANNEL       /** Ver 2.0 **/
					/* PTD_SEG_CODE */
				)
				VALUES
				(
					:sql_mtch_accnt,
					:sql_stk_stck_cd,
					:sql_tifp_qty,
					:sql_plg_typ,
					:sql_isin_nmbr,
					:sql_dbd_dp_id,
					:sql_dbd_dp_clnt_id,
					:sql_pod_ordr_no,
					to_date(SYSDATE,'dd-mm-yyyy hh24:mi:ss'),
					0,
					:d_pon_no_repledge,
					'N',
					decode(:i_dp_flg, 1,:c_cdsl_iwtl_dp_accnt,:c_iwtl_dp_accnt),
					:v_agree_no_repledge,
					:sql_crt_slip_no,
          :sql_pml_channel    /** Ver 2.0 **/
					/* :c_seg_code */
				);

				if ( SQLCODE != 0 )
				{
					fn_errlog( c_ServiceName, "S31905", SQLMSG, c_err_msg  );
					fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
					EXEC SQL CLOSE TIFP_CURSOR;
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpfree ( ( char * )ptr_fml_Obuf);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				EXEC SQL
        	UPDATE  PTD_TIFP_DTLS
          SET     PTD_REPLG1_QTY     =  NVL(PTD_REPLG1_QTY,0) + :sql_tifp_qty
									/** PTD_SEG_CODE 			 = :c_seg_code ***/
          WHERE   trim(PTD_DPM_NMBR)    = trim(:d_pon_no_repledge)
          AND     trim(PTD_POD_REF_NO)  = trim(:c_pod_ref_no_plg)
          AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
          AND     PTD_DP_ID             = :sql_dbd_dp_id
          AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
          AND     PTD_STCK_CD           = :sql_stk_stck_cd
          AND     PTD_PLG_REV_TYP       = 'P'; 


				if ( SQLCODE != 0 )
				{
					fn_errlog( c_ServiceName, "S31910", SQLMSG, c_err_msg  );
					fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
					EXEC SQL CLOSE TIFP_CURSOR;
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpfree ( ( char * )ptr_fml_Obuf);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

     EXEC SQL
           DELETE FROM TEMP_PLG_RECORDS;

      if((SQLCODE !=0) && (SQLCODE!= NO_DATA_FOUND))
      {
        fn_errlog( c_ServiceName, "S31915", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree ( ( char * )ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      EXEC SQL
           INSERT INTO TEMP_PLG_RECORDS
           (
              tmp_tifp_qty,
              tmp_plg_rev_typ,
              tmp_isin_nmbr,
              tmp_dp_id,
              tmp_dp_clnt_id,
              tmp_pod_ref_no,
              tmp_stck_cd,
              tmp_clm_mtch_accnt,
              tmp_dpm_nmbr,
              tmp_agree_nmbr
           )
          (
            SELECT ptd_tifp_qty,
                   :sql_plg_typ,
                   ptd_isin_nmbr,
                   ptd_dp_id,
                   ptd_dp_clnt_id,
                   ptd_pod_ref_no,
                   ptd_stck_cd,
                   ptd_clm_mtch_accnt,
                   PTD_DPM_NMBR1,
                   ptd_agree_nmbr
            FROM   ptd_tifp_dtls
            WHERE  ptd_plg_rev_typ=:sql_plg_typ
            AND    ptd_tifp_stts = 'N'
            AND    ptd_dp_id = :sql_dbd_dp_id
            AND    ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
            AND    ptd_stck_cd = :sql_stk_stck_cd
            AND    ptd_clm_mtch_accnt = :sql_mtch_accnt
            AND    ptd_pod_ref_no = :sql_pod_ordr_no
           );

				sql_tifp_qty=0;
				MEMSET(sql_isin_nmbr);
				MEMSET(sql_pod_ref_no);
				MEMSET(sql_agree_nmbr);
				MEMSET(sql_dbd_dp_id);
				MEMSET(sql_dbd_dp_clnt_id);
				memset(sql_stk_stck_cd,'\0',sizeof(sql_stk_stck_cd));
				MEMSET(sql_mtch_accnt);
				sql_pon_nmbr = 0.0;
				MEMSET(sql_err_cd);
				MEMSET(sql_err_desc);

				/****** Commented by Samip ***********/

				EXEC SQL 
						 SELECT 
				           tmp_tifp_qty,
				           tmp_isin_nmbr,
				           tmp_dp_id,
				           tmp_dp_clnt_id,
				           tmp_pod_ref_no,
				           tmp_stck_cd, 
				           tmp_clm_mtch_accnt,
				           tmp_dpm_nmbr,
				           trunc(tmp_agree_nmbr)
				     INTO 
			             :sql_tifp_qty,
			             :sql_isin_nmbr,
			             :sql_dbd_dp_id,
			             :sql_dbd_dp_clnt_id,
			             :sql_pod_ref_no,
			             :sql_stk_stck_cd,
			             :sql_mtch_accnt,
			             :sql_pon_nmbr,
			             :sql_agree_nmbr
				     FROM  TEMP_PLG_RECORDS
				     WHERE rownum < 2;

				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S31920", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				EXEC SQL 
				     DELETE FROM TEMP_PLG_RECORDS
				     WHERE rownum < 2;
				
				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S31925", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				/** Commeted *** Samip **
				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   			{
					fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
    			fn_errlog( c_ServiceName, "S31930", TPMSG, c_err_msg  );
   				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     			l_acnt_id = -1;
     			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     			tpfree (( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
				}
				*** Comment end **/
       
        /*****************************  ends *******************************/

				sql_plg_val = 0.0;

				if(DEBUG_MSG_LVL_3){
        	fn_userlog(c_ServiceName,"The tifp qty [%ld]",sql_tifp_qty);
        	fn_userlog(c_ServiceName,"The create slip number [%lld]",sql_crt_slip_no);
        	fn_userlog(c_ServiceName,"The isin nmbr [%s]",sql_isin_nmbr.arr);
        	fn_userlog(c_ServiceName,"The dp id  [%s]",sql_dbd_dp_id.arr);
        	fn_userlog(c_ServiceName,"The dp clnt acc [%s]",sql_dbd_dp_clnt_id.arr);
        	fn_userlog(c_ServiceName,"The pod ref no [%s]",sql_pod_ref_no.arr);
        	fn_userlog(c_ServiceName,"The stk code  [%s]",sql_stk_stck_cd);
        	fn_userlog(c_ServiceName,"The mtch clnt acc [%s]",sql_mtch_accnt.arr);
        	fn_userlog(c_ServiceName,"The pon nmbr  [%lf]",sql_pon_nmbr);  /**  **/
        	fn_userlog(c_ServiceName,"The agree nmbr  [%s]",sql_agree_nmbr.arr);
        }

         ptr_fml_Sbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
          if (ptr_fml_Sbuf == NULL)
          {
            fn_errlog(c_ServiceName, "S31935", TPMSG, c_err_msg);
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
            tpfree((char *)ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
          }

          ptr_fml_Rbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
          if (ptr_fml_Rbuf == NULL)
          {
            fn_errlog(c_ServiceName, "S31940", TPMSG, c_err_msg);
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
            tpfree((char *)ptr_fml_Obuf);
            tpfree((char *)ptr_fml_Sbuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
          }
				
				strcpy((char *)sql_usr_code.arr,"EBA");
        strcpy((char *)temp,"PCR");
        sql_clsr_typ = 'U';  
        SETLEN(sql_usr_code);

				MEMSET(sql_dbd_dp_id_repledge);
				MEMSET(sql_dbd_dp_clnt_id_repledge);

				if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
				{
					strcpy(sql_dbd_dp_id_repledge.arr,c_iwtl_dp_accnt_dpid);
					strcpy(sql_dbd_dp_clnt_id_repledge.arr,c_iwtl_dp_accnt_clntid);
				}
				else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0)
				{
					strcpy(sql_dbd_dp_id_repledge.arr,c_cdsl_iwtl_dp_accnt_dpid);
					strcpy(sql_dbd_dp_clnt_id_repledge.arr,c_cdsl_iwtl_dp_accnt_clntid);
				}

				Fadd32(ptr_fml_Sbuf,FFO_OPERATION_TYP, (char *)&sql_oprn_typ,0);
				Fadd32(ptr_fml_Sbuf,FFO_CLSR_TYP, (char *)&sql_clsr_typ,0);
				Fadd32(ptr_fml_Sbuf,FFO_PLEDGE_TYP, (char *)temp,0);
				Fadd32(ptr_fml_Sbuf,FFO_DPID,(char *)sql_dbd_dp_id_repledge.arr,0);	
				Fadd32(ptr_fml_Sbuf,FFO_DP_CLNT_ID,(char *)sql_dbd_dp_clnt_id_repledge.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_ISIN_NMBR, (char *)sql_isin_nmbr.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_PLG_QTY,(char *)&sql_tifp_qty,0);
				Fadd32(ptr_fml_Sbuf,FFO_CLOSURE_DT,(char *)sql_clsr_dt.arr,0);
  			Fadd32(ptr_fml_Sbuf,FFO_EXECN_DT,(char *)sql_execn_date.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_USER_CODE,(char *)sql_usr_code.arr,0);
				/** Fadd32(ptr_fml_Sbuf,FFO_CRT_SLIP_NO,(char *)&sql_crt_slip_no,0);
				Fadd32(ptr_fml_Sbuf,FFO_CONF_SLIP_NO,(char *)&sql_conf_slip_no,0); **/
				Fadd32(ptr_fml_Sbuf,FFO_INDEX,(char *)&sql_crt_slip_no,0);
				Fadd32(ptr_fml_Sbuf,FFO_USER_INDEX,(char *)&sql_conf_slip_no,0);
				Fadd32(ptr_fml_Sbuf,FFO_AGREE_NO,(char *)sql_agree_nmbr.arr,0);
				 /** Fadd32(ptr_fml_Sbuf,FFO_DPM_NO,(char *)&sql_pon_nmbr,0);  --commented  **/
	      Fadd32(ptr_fml_Sbuf,FFO_JIFFY,(char *)&sql_pon_nmbr,0);  /**  **/

				Fadd32(ptr_fml_Sbuf,FFO_EBA_MTCH_ACT_NO,(char *)v_ucc_cd.arr,0);

				MEMSET(c_seg_code);
				MEMSET(c_plg_type);
				if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
				{
					Fadd32(ptr_fml_Sbuf,FFO_BRKR_ID,(char *)c_iwtl_dp_accnt_dpid,0);
					Fadd32(ptr_fml_Sbuf,FFO_CTCL_ID,(char *)c_iwtl_dp_accnt_clntid,0);
					strcpy(c_seg_code,"07"); 
				}
				else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0)
				{
					Fadd32(ptr_fml_Sbuf,FFO_BRKR_ID,(char *)c_cdsl_iwtl_dp_accnt_dpid,0);
					Fadd32(ptr_fml_Sbuf,FFO_CTCL_ID,(char *)c_cdsl_iwtl_dp_accnt_clntid,0);
					strcpy(c_seg_code,"AL");
				}

				strcpy(c_plg_type,"MR");
				d_inv_value = 0.0;

				Fadd32(ptr_fml_Sbuf,FFO_INSTRMNT_TYP,(char *)c_seg_code,0);
				Fadd32(ptr_fml_Sbuf,FFO_OPTION_TYP,(char *)c_plg_type,0);
				Fadd32(ptr_fml_Sbuf,FFO_AMOUNT,(char *)&d_inv_value,0);

				MEMSET(c_exg_id);
				MEMSET(c_cm_id);
				MEMSET(c_tm_id);


				if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
				{
					strcpy(c_exg_id,"01");
					strcpy(c_cm_id,"M50519");
					strcpy(c_tm_id,"07730");

					i_err[20] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CD,(char *)c_exg_id,0);
					i_err[21] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM,(char *)c_cm_id,0);
					i_err[22] = Fadd32(ptr_fml_Sbuf,FFO_FRWD_TM,(char *)c_tm_id,0);
          i_err[23] = Fadd32(ptr_fml_Sbuf,FFO_ACTION1,(char *)sql_dbd_dp_id.arr,0);		/** Ver 1.7 **/
          i_err[24] = Fadd32(ptr_fml_Sbuf,FFO_ACTION2,(char *)sql_dbd_dp_clnt_id.arr,0);	/** Ver 1.7 **/

				}

				if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
				{
					fn_userlog(c_ServiceName,"Calling SFO_CALL_DP ");
					i_returncode=tpcall("SFO_CALL_DP",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
				}
				else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0)
				{
					fn_userlog(c_ServiceName,"Calling SFO_CALL_DPC ");
					i_returncode=tpcall("SFO_CALL_DPC",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
				}

				fn_userlog(c_ServiceName,"After Call i_returncode : %d ",i_returncode);

				if (i_returncode == -1)
				{
					if(tperrno == TPESVCFAIL)
					{
						if(Fget32(ptr_fml_Rbuf, FFO_ERR_MSG, 0, c_err_msg, 0 ) == -1)
						{
							Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
							Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
							tpfree((char *)ptr_fml_Sbuf);
							tpfree((char *)ptr_fml_Rbuf);
							tpfree((char *)ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
						}
					}
					else
					{
						fn_errlog(c_ServiceName, "S31945", TPMSG, c_err_msg);
					}

					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
					Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
					tpfree((char *)ptr_fml_Sbuf);
					tpfree((char *)ptr_fml_Rbuf);
					tpfree((char *)ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
				}

        Fget32(ptr_fml_Rbuf,FFO_RTN_STTS,0,(char *)&sql_rtn_stts,0);
        Fget32(ptr_fml_Rbuf,FFO_ERR_CD,0,(char *)sql_err_cd.arr,0);
        Fget32(ptr_fml_Rbuf,FFO_ERR_DESC,0,(char *)sql_err_desc.arr,0);

        SETLEN(sql_err_cd);
        SETLEN(sql_err_desc);
        SETNULL(sql_err_cd);
        SETNULL(sql_err_desc);

				fn_userlog(c_ServiceName,"Status from DP :%ld:",sql_rtn_stts);	/** Changed to ld for Ver 1.7 **/
				/* sql_rtn_stts = 0;		*** Testing purpose **/

			if( sql_rtn_stts == 0)
			{

				EXEC SQL
        	UPDATE    POD_PLG_ORDR_DTLS
        	SET       POD_ORDR_STTS       = 'I',
										POD_PRCSD_QTY				= POD_PRCSD_QTY + :sql_tifp_qty
        	WHERE     trim(POD_ORDR_NO)   = trim(:sql_pod_ref_no)
        	AND       POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
        	RETURNING
                  NVL(POD_CHANNEL,'*'),
                  NVL(POD_CONF_QTY,0),
                  NVL(POD_RJCT_QTY,0),
                  NVL(POD_BP_ID,'*')
        INTO      :c_channel,
                  :d_conf_qty,
                  :d_rjct_qty,
                  :c_bpid;

        if(SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S31950", SQLMSG, c_err_msg);
            fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

 			EXEC SQL
        INSERT INTO  PML_PLG_MOD_LOG
        (
          PML_ORDR_NO,
          PML_STCK_CD,
          PML_ORDR_QTY,
          PML_ORDR_TM,
          PML_HAIRCUT,
          PML_ORDR_VL,
          PML_ISIN_NO,
          PML_DP_CLNT_ACCNT,
          PML_DP_ACCNT,
          PML_CLNT_MTCH_ACCNT,
          PML_PLG_REV_TYP,
          PML_CONF_QTY,
          PML_RJCT_QTY,
          PML_MOD_TYPE,
          PML_STTS,
          PML_MOD_CNTR,
          PML_PLCD_SQNC,
          PML_BP_ID,
          PML_CHANNEL,
          PML_RMRKS
        )
			values
        (
          trim(:sql_pod_ref_no),
          :sql_stk_stck_cd,
          :sql_tifp_qty,
          sysdate,
          :i_haircut,
          :d_ordr_val,
          :sql_isin_nmbr,
          :sql_dbd_dp_clnt_id,
          :sql_dbd_dp_id,
          :sql_mtch_accnt,
          :sql_plg_typ,
          :d_conf_qty,
          :d_rjct_qty,
          'L',
          'I',
           0,
           0,
           :c_bpid,
           :c_channel,
           'Create TIFP Update Status'
        );

        if(SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S31955", SQLMSG, c_err_msg);
            fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
						
				EXEC SQL 
						 UPDATE ptd_tifp_dtls 
						 SET
								 ptd_leg_no = 'T1',
								 /* PTD_SLIPNO_L1 = :sql_crt_slip_no, */
								 ptd_tifp_stts = 'P',
								 ptd_tifp_run_dt = sysdate,
								 ptd_exctn_dt = :sql_execn_date,
								 ptd_run_nmbr = :sql_ptd_seq,
									PTD_SEG_CODE = :c_seg_code
						 WHERE 
								 ptd_dp_id = :sql_dbd_dp_id
						 AND ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
						 AND ptd_isin_nmbr = :sql_isin_nmbr
						 AND PTD_DPM_NMBR1 = :sql_pon_nmbr
						 AND trim(ptd_pod_ref_no) = trim(:sql_pod_ref_no)
						 AND ptd_plg_rev_typ = :sql_plg_typ
						 AND ptd_tifp_stts = 'N'
						 /* AND PTD_SLIPNO_L1 is NULL */
						 AND ptd_tifp_qty = :sql_tifp_qty
						 AND rownum < 2;

					 if( SQLCODE !=0 )
					 {
						 fn_errlog( c_ServiceName, "S31960", SQLMSG, c_err_msg  );
						 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						 l_acnt_id = -1;
						 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						 tpfree ( ( char * )ptr_fml_Obuf);
						 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					 }

            /**************** Commented ***************	
						 sql_crt_slip_no = sql_crt_slip_no + 1;
            ********************************************/

						sprintf(c_msg, " Acceptance of [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/    
				
						fn_userlog(c_ServiceName,"End of Acceptance of [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr, sql_stk_stck_cd, sql_pon_nmbr);  /**  **/

						BAT_POST(c_msg);
						
				}/*end of if for return status zero from DP*/
				else
				{
						
					EXEC SQL 
							 UPDATE ptd_tifp_dtls 
							 SET
											ptd_leg_no = 'T1',
											ptd_tifp_stts = 'J',
											ptd_tifp_run_dt = sysdate,
											ptd_exctn_dt = :sql_execn_date,
											PTD_RMRKS = trim(:sql_err_desc),
											PTD_SEG_CODE = NULL
							 WHERE  ptd_dp_id = :sql_dbd_dp_id
							 AND ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
							 AND ptd_isin_nmbr = :sql_isin_nmbr
							 AND trim(ptd_pod_ref_no) = trim(:sql_pod_ref_no)
							 AND ptd_plg_rev_typ = :sql_plg_typ
							 AND ptd_tifp_stts = 'N'
							 /* AND PTD_SLIPNO_L1 is NULL */
							 AND PTD_DPM_NMBR1 = :sql_pon_nmbr
							 AND ptd_tifp_qty = :sql_tifp_qty
							 AND rownum < 2;

			    	 if( SQLCODE !=0 )
      			 {
        			 fn_errlog( c_ServiceName, "S31965", SQLMSG, c_err_msg  );
        			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			 l_acnt_id = -1;
        			 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			 tpfree ( ( char * )ptr_fml_Obuf);
							 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			 }
				
						 EXEC SQL 
						      UPDATE pod_plg_ordr_dtls 
									SET    pod_ordr_stts = 'J',
                         POD_RMRKS = trim(:sql_err_desc) 
						      WHERE  trim(pod_ordr_no) = trim(:sql_pod_ref_no)
                  AND    POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						      AND    pod_plg_rev_typ = :sql_plg_typ;
	
			    	 if( SQLCODE !=0 )
		   			 {
			   			 fn_errlog( c_ServiceName, "S31970", SQLMSG, c_err_msg  );
				 			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       				 l_acnt_id = -1;
       				 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       				 tpfree ( ( char * )ptr_fml_Obuf);
							 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       				 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     				 }

							fn_userlog(c_ServiceName,"Inside withdrwal rejection in requested case......");
							fn_userlog(c_ServiceName,"sql_tifp_qty [%ld]",sql_tifp_qty);
							fn_userlog(c_ServiceName,"sql_pon_nmbr [%lf]",sql_pon_nmbr);
							fn_userlog(c_ServiceName,"sql_mtch_accnt [%s]",sql_mtch_accnt.arr);
							fn_userlog(c_ServiceName,"sql_dbd_dp_id [%s]",sql_dbd_dp_id_1.arr);
							fn_userlog(c_ServiceName,"sql_dbd_dp_clnt_id [%s]",sql_dbd_dp_clnt_id.arr);
							fn_userlog(c_ServiceName,"sql_isin_nmbr [%s]",sql_isin_nmbr.arr);


						EXEC SQL
								 UPDATE ptd_tifp_dtls
								 SET    PTD_REPLG1_QTY = PTD_REPLG1_QTY - :sql_tifp_qty
												/* PTD_SEG_CODE = NULL */
								 WHERE  ptd_dpm_nmbr = :sql_pon_nmbr
								 AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt                                
								 AND    ptd_dp_id           = :sql_dbd_dp_id                                     
								 AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id                               
								 AND    ptd_isin_nmbr       = :sql_isin_nmbr                                 
								 AND    ptd_plg_rev_typ = 'P';
               
                if ( SQLCODE != 0 )
							  {
									fn_errlog( c_ServiceName, "S31975", SQLMSG, c_err_msg  );
									fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
									EXEC SQL CLOSE ptd_cur;
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							  }   

								if(DEBUG_MSG_LVL_3)
								{
									fn_userlog(c_ServiceName,"After plgVswthdrw update ......");
								}

						 EXEC SQL 
						      SELECT (count(*)+1) 
						      INTO   :sql_pml_mod_cntr
						      FROM   pml_plg_mod_log
						      WHERE  pml_ordr_no = trim(:sql_pod_ref_no)
                  AND    PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						      AND    pml_mod_type in ('N','M','C','J');
	
						if( SQLCODE !=0 )
     				{
       				fn_errlog( c_ServiceName, "S31980", SQLMSG, c_err_msg  );
	       			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		     			l_acnt_id = -1;
			   			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				 			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	     				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		   			}

						EXEC SQL 
								 INSERT INTO pml_plg_mod_log
						     (
										pml_ordr_no,
						        pml_stck_cd,
						        pml_ordr_qty,
						        pml_ordr_tm,
						        pml_haircut,
						        pml_ordr_vl,
						        pml_isin_no,
						        pml_dp_clnt_accnt,
						        pml_dp_accnt,
						        pml_clnt_mtch_accnt,
						        pml_plg_rev_typ,
						        pml_conf_qty,
						        pml_rjct_qty,
						        pml_mod_type,
						        pml_stts,
						        pml_mod_cntr,
						        pml_plcd_sqnc,
						        pml_bp_id,
						        pml_channel,
						        pml_rmrks
							 	 )
						     VALUES
						     (	:sql_pod_ref_no,
	  					      :sql_stk_stck_cd,
							      :sql_tifp_qty,
							      sysdate,
							      :sql_stk_plg_haircut,		 
		 					      :sql_plg_val,
							      :sql_isin_nmbr,
							      :sql_dbd_dp_clnt_id,
							      :sql_dbd_dp_id,
							      :sql_mtch_accnt,
							      :sql_plg_typ,
							      0,
							      0,
							      'J',
							      'J',
							      :sql_pml_mod_cntr,
							      0,
							      null,
							      'SYS',
							      :sql_err_desc
								 );
					
						if( SQLCODE !=0 )
				    {
					  	fn_errlog( c_ServiceName, "S31985", SQLMSG, c_err_msg  );
						  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							l_acnt_id = -1;
	            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		          tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				    }

					}

				 tpfree((char *)ptr_fml_Sbuf);
         tpfree((char *)ptr_fml_Rbuf);

					if(DEBUG_MSG_LVL_3)
					{
          	fn_userlog(c_ServiceName,"Just before commit....");
					}

				  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
     			{
    				fn_errlog( c_ServiceName, "S31990", TPMSG, c_err_msg  );
     				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						l_acnt_id = -1;
						Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						tpfree (( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
					}

					if(DEBUG_MSG_LVL_3)
					{
          	fn_userlog(c_ServiceName,"Just after commit for match [%s]....",sql_mtch_accnt);
					}

					tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );

		}

		else if (sql_run_plg_typ == 'C')
		{
			MEMSET(c_pod_ref_no_plg);
			strcpy(c_pod_ref_no_plg,sql_pod_ref_no.arr);
			MEMSET(sql_pod_ref_no);

      i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

			if ( i_trnsctn == -1 )
			{
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				fn_errlog( c_ServiceName, "S31995",LIBMSG,c_err_msg);
				l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				tpfree ( ( char * )ptr_fml_Obuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			} 

			EXEC SQL SELECT PRS_PLG_REV_SEQ.nextval INTO :sql_prs_seq
			FROM DUAL;

			if (SQLCODE != 0)
			{
				fn_errlog( c_ServiceName, "S32000", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**						l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}	

			EXEC SQL 
			SELECT TO_CHAR(sysdate,'YYYYMMDD')||LPAD((PPS_PLG_SEQ+1),8,0)
			INTO :sql_pod_ordr_no
			FROM PPS_PLG_PLACED_SEQ 
			WHERE PPS_PLG_ORDR_DT = TO_DATE(TO_CHAR(sysdate,'DD-Mon-YYYY'),'DD-Mon-YYYY')
			FOR UPDATE OF PPS_PLG_SEQ;  

			if ((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
			{
				fn_errlog( c_ServiceName, "S32005", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**						l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			SETNULL(sql_pod_ordr_no);
				
			if (SQLCODE == NO_DATA_FOUND)
			{
				EXEC SQL 
				INSERT INTO PPS_PLG_PLACED_SEQ
				(PPS_PLG_SEQ,
				PPS_PLG_ORDR_DT)
				VALUES
				(1,
				TO_DATE(TO_CHAR(sysdate,'DD-Mon-YYYY'),'DD-Mon-YYYY'));
				
				if (SQLCODE != 0)
				{
					fn_errlog( c_ServiceName, "S32010", SQLMSG, c_err_msg  );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**							l_acnt_id = -1;
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				
				/**********Pledge order reference number is created**************************/
				EXEC SQL 
				SELECT TO_CHAR(sysdate,'YYYYMMDD')||LPAD(1,8,0) 
				INTO :sql_pod_ordr_no
				FROM DUAL;

				if (SQLCODE != 0)
				{
					fn_errlog( c_ServiceName, "S32015", SQLMSG, c_err_msg  );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**							l_acnt_id = -1;
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				SETNULL(sql_pod_ordr_no);

			}
			else
			{
				EXEC SQL 
				UPDATE PPS_PLG_PLACED_SEQ SET 
				PPS_PLG_SEQ = PPS_PLG_SEQ +1
				WHERE PPS_PLG_ORDR_DT = TO_DATE(TO_CHAR(sysdate,'DD-Mon-YYYY'),'DD-Mon-YYYY');
			
				if (SQLCODE != 0)
				{
					fn_errlog( c_ServiceName, "S32020", SQLMSG, c_err_msg  );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**							l_acnt_id = -1;
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}

      if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
      {
        fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
        fn_errlog( c_ServiceName, "S32025", TPMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree (( char * )ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
      }

       fn_userlog(c_ServiceName,"Inside TM CM Repledge");
        sql_ptd_seq = 0.0;

        EXEC SQL
             SELECT ptd_seq.nextval
             INTO :sql_ptd_seq
             FROM dual;

       if( SQLCODE !=0 )
        {
          fn_errlog( c_ServiceName, "S32030", SQLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

       	sql_ptm_max_slip_no = 0;
        sql_ptm_min_slip_no = 0;
        sql_ptm_current_slip_no = 0;

        i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
        if ( i_trnsctn == -1 )
        {
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          fn_errlog( c_ServiceName, "S32035",LIBMSG,c_err_msg);
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        EXEC SQL
        SELECT
        ptm_min_slip_no,
        ptm_max_slip_no,
        ptm_current_slip_no
        INTO
        :sql_ptm_min_slip_no,
        :sql_ptm_max_slip_no,
        :sql_ptm_current_slip_no
        FROM  ptm_tifp_mstr
        WHERE PTM_PLG_TYP = 'M'
        FOR   UPDATE OF ptm_current_slip_no;    

      	if( SQLCODE !=0 )
        {
          fn_errlog( c_ServiceName, "S32040", SQLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

       if((sql_ptm_current_slip_no < sql_ptm_min_slip_no)||(sql_ptm_current_slip_no > sql_ptm_max_slip_no))
        {
          sql_crt_slip_no = sql_ptm_min_slip_no;

          fn_userlog(c_ServiceName,"The number of range is [%lld]",(sql_ptm_max_slip_no - sql_ptm_min_slip_no));

          if((sql_ptm_max_slip_no - sql_ptm_min_slip_no) ==  0)
          {
            strcpy(c_err_msg,"Slip number for Withdraw is less than count.");
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        }
        else
        {
          sql_crt_slip_no = sql_ptm_current_slip_no + 1;

          fn_userlog(c_ServiceName,"The range is [%lld]",(sql_ptm_max_slip_no - sql_ptm_current_slip_no));

          if((sql_ptm_max_slip_no - sql_ptm_current_slip_no) == 0)
          {
            strcpy(c_err_msg,"Slip number for Withdraw is less than count.");
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        }

       EXEC SQL
        UPDATE ptm_tifp_mstr
        SET    ptm_current_slip_no = :sql_crt_slip_no
        WHERE  PTM_PLG_TYP = 'M';

        if( SQLCODE !=0 )
        {
           fn_errlog( c_ServiceName, "S32045", SQLMSG, c_err_msg  );
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           l_acnt_id = -1;
           Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
           tpfree ( ( char * )ptr_fml_Obuf);
           fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
        {
          fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
          fn_errlog( c_ServiceName, "S32050", TPMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree (( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }

         sql_conf_slip_no = 0 ;


					d_fab_amt = 0.0;
					d_nwb_amt = 0.0;
					d_eab_amt = 0.0;
          d_cab_amt = 0.0; /* Ver 1.9 */
          d_cod_amt = 0.0; /* Ver 1.9 */

					EXEC SQL
						SELECT NVL(FAB_PLG_AMT,0),NVL(FAB_NWB_AMT,0)
						INTO :d_fab_amt,:d_nwb_amt
						FROM FAB_FO_ALC_BFT_SMRY
						WHERE FAB_CLM_MTCH_ACCNT = :sql_mtch_accnt;

					if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
					{
						fn_errlog( c_ServiceName, "S32055", SQLMSG, c_err_msg  );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						tpfree ( ( char * )ptr_fml_Obuf);
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
					else if (SQLCODE != 0 && SQLCODE == NO_DATA_FOUND)
					{
						d_fab_amt = 0.0;
						d_nwb_amt = 0.0;
					}

					EXEC SQL
						SELECT NVL(EAB_PLG_AMT,0)
						INTO :d_eab_amt
						FROM EAB_EQ_ALC_BFT_SMRY
						WHERE EAB_CLM_MTCH_ACCNT = :sql_mtch_accnt;
						
					if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
					{
						fn_errlog( c_ServiceName, "S32060", SQLMSG, c_err_msg  );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						tpfree ( ( char * )ptr_fml_Obuf);
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
					else if (SQLCODE != 0 && SQLCODE == NO_DATA_FOUND)
					{
						d_eab_amt = 0.0;
					}

          /* Ver 1.9 starts */

          EXEC SQL
            SELECT NVL(CAB_PLG_AMT,0)
            INTO :d_cab_amt
            FROM CAB_CDX_ALC_BFT_SMRY
            WHERE CAB_CLM_MTCH_ACCNT = :sql_mtch_accnt;

          if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
          {
            fn_errlog( c_ServiceName, "S32065", SQLMSG, c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
          else if (SQLCODE != 0 && SQLCODE == NO_DATA_FOUND)
          {
            d_cab_amt = 0.0;
          }

          EXEC SQL
            SELECT NVL(CAB_PLG_AMT, 0)
            INTO :d_cod_amt
            FROM CAB_COD_ALC_BFT_SMRY
            WHERE CAB_CLM_MTCH_ACCNT = :sql_mtch_accnt;

          if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
          {
            fn_errlog( c_ServiceName, "S32070", SQLMSG, c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
          else if (SQLCODE != 0 && SQLCODE == NO_DATA_FOUND)
          {
            d_cod_amt = 0.0;
          }
        /* ver 1.9 ends */

					MEMSET(c_seg_code);

					/** if (d_eab_amt != 0.0 && d_fab_amt == 0.0 && d_nwb_amt == 0.0) ** Ver 1.9 **/
          if (d_eab_amt != 0.0 && d_fab_amt == 0.0 && d_nwb_amt == 0.0 && d_cab_amt == 0.0 && d_cod_amt == 0.0) /* Ver 1.9 */
							strcpy(c_seg_code,"01");
					else
							strcpy(c_seg_code,"02");

					fn_userlog(c_ServiceName,"Value of c_seg_code :%s:",c_seg_code);

			 i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
        if ( i_trnsctn == -1 )
        {
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          fn_errlog( c_ServiceName, "S32075",LIBMSG,c_err_msg);
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

        }


			strcpy(sql_pml_channel.arr,"SYS");
			SETLEN(sql_pml_channel);
			SETNULL(sql_pml_channel);
			fn_userlog(c_ServiceName,"Value of sql_pod_ordr_no :%s:",sql_pod_ordr_no.arr);
			fn_userlog(c_ServiceName,"Value of sql_stk_stck_cd :%s:",sql_stk_stck_cd);
			fn_userlog(c_ServiceName,"Value of sql_tifp_qty :%ld:",sql_tifp_qty);
			fn_userlog(c_ServiceName,"Value of sql_isin_nmbr :%s:",sql_isin_nmbr.arr);
			fn_userlog(c_ServiceName,"Value of sql_dbd_dp_clnt_id :%s:",sql_dbd_dp_clnt_id.arr);
			fn_userlog(c_ServiceName,"Value of sql_dbd_dp_id :%s:",sql_dbd_dp_id.arr);
			fn_userlog(c_ServiceName,"Value of sql_mtch_accnt :%s:",sql_mtch_accnt.arr);
			fn_userlog(c_ServiceName,"Value of sql_run_plg_typ :%c:",sql_run_plg_typ);
			fn_userlog(c_ServiceName,"Value of sql_pod_bp_id :%s:",sql_pod_bp_id.arr);
			fn_userlog(c_ServiceName,"Value of sql_pml_channel :%s:",sql_pml_channel.arr);
			fn_userlog(c_ServiceName,"Value of c_pod_ref_no_plg :%s:",c_pod_ref_no_plg);
						
			EXEC SQL INSERT INTO POD_PLG_ORDR_DTLS
			(POD_ORDR_NO,
			POD_STCK_CD,
			POD_ORDR_QTY,
			POD_ORDR_DT,
			POD_HAIRCUT,
			POD_ORDR_VL,
			POD_ISIN_NO,
			POD_DP_CLNT_ACCNT,
			POD_DP_ACCNT,
			POD_CLNT_MTCH_ACCNT ,
			POD_PLG_REV_TYP,
			POD_ORDR_STTS,
			POD_CONF_QTY,
			POD_PRCSD_QTY,   /*******1.3*****/
			POD_RMRKS,
			POD_BP_ID,
			POD_CHANNEL,
			POD_ALLOC_TYP)   /*** ver 4.7 ***/
			VALUES
			(:sql_pod_ordr_no,
			:sql_stk_stck_cd,
			:sql_tifp_qty,
			sysdate,
			0,
			0,
			:sql_isin_nmbr,
			:sql_dbd_dp_clnt_id,
			:sql_dbd_dp_id,
			:sql_mtch_accnt,
			:sql_run_plg_typ,
			'R',
			0,
			0,              /*******1.3*****/
			null,
			:sql_pod_bp_id,
			:sql_pml_channel,
			NULL);  /*** ver 4.7 ***/ 	
				
			if (SQLCODE != 0)
			{
				fn_errlog( c_ServiceName, "S32080", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**						l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			sql_pml_mod_type ='N';
			sql_pml_mod_cntr = 1;

			fn_userlog(c_ServiceName,"Value of sql_tifp_qty :%ld:",sql_tifp_qty);	
			MEMSET(sql_pml_rmrks);

			fn_userlog(c_ServiceName,"Value of sql_pml_channel :%s:",sql_pml_channel.arr);

			EXEC SQL INSERT INTO PML_PLG_MOD_LOG
			(PML_ORDR_NO,
			PML_STCK_CD,
			PML_ORDR_QTY,
			PML_ORDR_TM,
			PML_HAIRCUT,
			PML_ORDR_VL,
			PML_ISIN_NO,
			PML_DP_CLNT_ACCNT,
			PML_DP_ACCNT,
			PML_CLNT_MTCH_ACCNT,
			PML_PLG_REV_TYP,
			PML_MOD_TYPE,
			PML_STTS,
			PML_MOD_CNTR,
			PML_PLCD_SQNC,
			PML_BP_ID,
			PML_CHANNEL,
			PML_RMRKS)
			VALUES
			(:sql_pod_ordr_no,
			:sql_stk_stck_cd,
			:sql_tifp_qty,
			sysdate,
			0,
			0,
			:sql_isin_nmbr,
			:sql_dbd_dp_clnt_id,
			:sql_dbd_dp_id,
			:sql_mtch_accnt,
			:sql_run_plg_typ,
			:sql_pml_mod_type,
			'R',
			:sql_pml_mod_cntr,
			:sql_prs_seq,	
			:sql_pod_bp_id,
			:sql_pml_channel,
			:sql_pml_rmrks);
					
			if (SQLCODE != 0)
			{
				fn_errlog( c_ServiceName, "S32085", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**					l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			d_pon_no_pledge = 0.0;

			EXEC SQL
				SELECT PTD_DPM_NMBR
				INTO :d_pon_no_pledge
				FROM PTD_TIFP_DTLS
				WHERE PTD_PLG_REV_TYP = 'P'
				AND PTD_TIFP_STTS = 'P'
				AND PTD_DPM_NMBR2 = :d_pon_no_repledge
				AND PTD_LEG_NO = 'L5'
				AND PTD_CLM_MTCH_ACCNT = :sql_mtch_accnt
				AND PTD_STCK_CD = :sql_stk_stck_cd
				AND PTD_DP_ID = :sql_dbd_dp_id
				AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id;

			if (SQLCODE != 0)
			{
				fn_errlog( c_ServiceName, "S32090", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**					l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			/******
			MEMSET(c_seg_code);

			EXEC SQL
				SELECT PTD_SEG_CODE
				INTO :c_seg_code
				FROM PTD_TIFP_DTLS
				WHERE PTD_DPM_NMBR = :d_pon_no_repledge
				AND PTD_LEG_NO = 'T5'
				AND PTD_TIFP_STTS = 'P'
				AND PTD_PLG_REV_TYP = 'T';

			if (SQLCODE != 0)
			{
				fn_errlog( c_ServiceName, "S32095", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			*********/

			EXEC SQL
				INSERT INTO PTD_TIFP_DTLS
				(
					PTD_CLM_MTCH_ACCNT,
					PTD_STCK_CD,
					PTD_TIFP_QTY,
					PTD_PLG_REV_TYP,
					PTD_ISIN_NMBR,
					PTD_DP_ID,
					PTD_DP_CLNT_ID,
					PTD_POD_REF_NO,
					PTD_TIFP_RUN_DT,
					PTD_PLG_VS_WD_QTY,
					PTD_DPM_NMBR1,
					PTD_DPM_NMBR2,
					PTD_TIFP_STTS,
					PTD_IWTL_DP_ACCNT,
					PTD_AGREE_NMBR,
					PTD_SLIPNO_L1,
					PTD_SEG_CODE,
          PTD_CHANNEL     /** Ver 2.0 **/
				)
				VALUES
				(
					:sql_mtch_accnt,
					:sql_stk_stck_cd,
					:sql_tifp_qty,
					:sql_plg_typ,
					:sql_isin_nmbr,
					:sql_dbd_dp_id,
					:sql_dbd_dp_clnt_id,
					:sql_pod_ordr_no,
					to_date(SYSDATE,'dd-mm-yyyy hh24:mi:ss'),
					0,
					:d_pon_no_pledge,
					:d_pon_no_repledge,
					'N',
					decode(:i_dp_flg, 1,:c_cdsl_iwtl_dp_accnt,:c_iwtl_dp_accnt),
					:v_agree_no_repledge,
					:sql_crt_slip_no,
					:c_seg_code,
          :sql_pml_channel      /** Ver 2.0 **/
				);

				if ( SQLCODE != 0 )
				{
					fn_errlog( c_ServiceName, "S32100", SQLMSG, c_err_msg  );
					fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
					EXEC SQL CLOSE TIFP_CURSOR;
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpfree ( ( char * )ptr_fml_Obuf);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				EXEC SQL
        	UPDATE  PTD_TIFP_DTLS
          SET     PTD_REPLG2_QTY     =  NVL(PTD_REPLG2_QTY,0) + :sql_tifp_qty
          WHERE   trim(PTD_DPM_NMBR)    = trim(:d_pon_no_repledge)
          AND     trim(PTD_POD_REF_NO)  = trim(:c_pod_ref_no_plg)
          AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
          AND     PTD_DP_ID             = :sql_dbd_dp_id
          AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
          AND     PTD_STCK_CD           = :sql_stk_stck_cd
          AND     PTD_PLG_REV_TYP       = 'T'; 


				if ( SQLCODE != 0 )
				{
					fn_errlog( c_ServiceName, "S32105", SQLMSG, c_err_msg  );
					fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
					EXEC SQL CLOSE TIFP_CURSOR;
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpfree ( ( char * )ptr_fml_Obuf);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

     EXEC SQL
           DELETE FROM TEMP_PLG_RECORDS;

      if((SQLCODE !=0) && (SQLCODE!= NO_DATA_FOUND))
      {
        fn_errlog( c_ServiceName, "S32110", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree ( ( char * )ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      EXEC SQL
           INSERT INTO TEMP_PLG_RECORDS
           (
              tmp_tifp_qty,
              tmp_plg_rev_typ,
              tmp_isin_nmbr,
              tmp_dp_id,
              tmp_dp_clnt_id,
              tmp_pod_ref_no,
              tmp_stck_cd,
              tmp_clm_mtch_accnt,
              tmp_dpm_nmbr,
              tmp_agree_nmbr
           )
          (
            SELECT ptd_tifp_qty,
                   :sql_plg_typ,
                   ptd_isin_nmbr,
                   ptd_dp_id,
                   ptd_dp_clnt_id,
                   ptd_pod_ref_no,
                   ptd_stck_cd,
                   ptd_clm_mtch_accnt,
                   PTD_DPM_NMBR2,
                   ptd_agree_nmbr
            FROM   ptd_tifp_dtls
            WHERE  ptd_plg_rev_typ=:sql_plg_typ
            AND    ptd_tifp_stts = 'N'
            AND    ptd_dp_id = :sql_dbd_dp_id
            AND    ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
            AND    ptd_stck_cd = :sql_stk_stck_cd
            AND    ptd_clm_mtch_accnt = :sql_mtch_accnt
            AND    ptd_pod_ref_no = :sql_pod_ordr_no
           );

				sql_tifp_qty=0;
				MEMSET(sql_isin_nmbr);
				MEMSET(sql_pod_ref_no);
				MEMSET(sql_agree_nmbr);
				MEMSET(sql_dbd_dp_id);
				MEMSET(sql_dbd_dp_clnt_id);
				memset(sql_stk_stck_cd,'\0',sizeof(sql_stk_stck_cd));
				MEMSET(sql_mtch_accnt);
				sql_pon_nmbr = 0.0;
				MEMSET(sql_err_cd);
				MEMSET(sql_err_desc);

				/****** Commented by Samip ***********/

				EXEC SQL 
						 SELECT 
				           tmp_tifp_qty,
				           tmp_isin_nmbr,
				           tmp_dp_id,
				           tmp_dp_clnt_id,
				           tmp_pod_ref_no,
				           tmp_stck_cd, 
				           tmp_clm_mtch_accnt,
				           tmp_dpm_nmbr,
				           trunc(tmp_agree_nmbr)
				     INTO 
			             :sql_tifp_qty,
			             :sql_isin_nmbr,
			             :sql_dbd_dp_id,
			             :sql_dbd_dp_clnt_id,
			             :sql_pod_ref_no,
			             :sql_stk_stck_cd,
			             :sql_mtch_accnt,
			             :sql_pon_nmbr,
			             :sql_agree_nmbr
				     FROM  TEMP_PLG_RECORDS
				     WHERE rownum < 2;

				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S32115", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				EXEC SQL 
				     DELETE FROM TEMP_PLG_RECORDS
				     WHERE rownum < 2;
				
				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S32120", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				/** Commeted *** Samip **
				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   			{
					fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
    			fn_errlog( c_ServiceName, "S32125", TPMSG, c_err_msg  );
   				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     			l_acnt_id = -1;
     			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     			tpfree (( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
				}
				*** Comment end **/
       
        /*****************************  ends *******************************/

				sql_plg_val = 0.0;

				if(DEBUG_MSG_LVL_3){
        	fn_userlog(c_ServiceName,"The tifp qty [%ld]",sql_tifp_qty);
        	fn_userlog(c_ServiceName,"The create slip number [%lld]",sql_crt_slip_no);
        	fn_userlog(c_ServiceName,"The isin nmbr [%s]",sql_isin_nmbr.arr);
        	fn_userlog(c_ServiceName,"The dp id  [%s]",sql_dbd_dp_id.arr);
        	fn_userlog(c_ServiceName,"The dp clnt acc [%s]",sql_dbd_dp_clnt_id.arr);
        	fn_userlog(c_ServiceName,"The pod ref no [%s]",sql_pod_ref_no.arr);
        	fn_userlog(c_ServiceName,"The stk code  [%s]",sql_stk_stck_cd);
        	fn_userlog(c_ServiceName,"The mtch clnt acc [%s]",sql_mtch_accnt.arr);
        	fn_userlog(c_ServiceName,"The pon nmbr  [%lf]",sql_pon_nmbr);  /**  **/
        	fn_userlog(c_ServiceName,"The agree nmbr  [%s]",sql_agree_nmbr.arr);
        }

         ptr_fml_Sbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
          if (ptr_fml_Sbuf == NULL)
          {
            fn_errlog(c_ServiceName, "S32130", TPMSG, c_err_msg);
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
            tpfree((char *)ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
          }

          ptr_fml_Rbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
          if (ptr_fml_Rbuf == NULL)
          {
            fn_errlog(c_ServiceName, "S32135", TPMSG, c_err_msg);
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
            tpfree((char *)ptr_fml_Obuf);
            tpfree((char *)ptr_fml_Sbuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
          }
				
				strcpy((char *)sql_usr_code.arr,"EBA");
        strcpy((char *)temp,"PCR");
        sql_clsr_typ = 'U';  
        SETLEN(sql_usr_code);

				MEMSET(sql_dbd_dp_id_repledge);
				MEMSET(sql_dbd_dp_clnt_id_repledge);

				if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
				{
					strcpy(sql_dbd_dp_id_repledge.arr,c_iwtl_dp_accnt_dpid);
					strcpy(sql_dbd_dp_clnt_id_repledge.arr,c_iwtl_dp_accnt_clntid);
				}
				else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0)
				{
					strcpy(sql_dbd_dp_id_repledge.arr,c_cdsl_iwtl_dp_accnt_dpid);
					strcpy(sql_dbd_dp_clnt_id_repledge.arr,c_cdsl_iwtl_dp_accnt_clntid);
				}

				Fadd32(ptr_fml_Sbuf,FFO_OPERATION_TYP, (char *)&sql_oprn_typ,0);
				Fadd32(ptr_fml_Sbuf,FFO_CLSR_TYP, (char *)&sql_clsr_typ,0);
				Fadd32(ptr_fml_Sbuf,FFO_PLEDGE_TYP, (char *)temp,0);
				Fadd32(ptr_fml_Sbuf,FFO_DPID,(char *)sql_dbd_dp_id_repledge.arr,0);	
				Fadd32(ptr_fml_Sbuf,FFO_DP_CLNT_ID,(char *)sql_dbd_dp_clnt_id_repledge.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_ISIN_NMBR, (char *)sql_isin_nmbr.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_PLG_QTY,(char *)&sql_tifp_qty,0);
				Fadd32(ptr_fml_Sbuf,FFO_CLOSURE_DT,(char *)sql_clsr_dt.arr,0);
  			Fadd32(ptr_fml_Sbuf,FFO_EXECN_DT,(char *)sql_execn_date.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_USER_CODE,(char *)sql_usr_code.arr,0);
				/** Fadd32(ptr_fml_Sbuf,FFO_CRT_SLIP_NO,(char *)&sql_crt_slip_no,0);
				Fadd32(ptr_fml_Sbuf,FFO_CONF_SLIP_NO,(char *)&sql_conf_slip_no,0); **/
				Fadd32(ptr_fml_Sbuf,FFO_INDEX,(char *)&sql_crt_slip_no,0);
				Fadd32(ptr_fml_Sbuf,FFO_USER_INDEX,(char *)&sql_conf_slip_no,0);
				Fadd32(ptr_fml_Sbuf,FFO_AGREE_NO,(char *)sql_agree_nmbr.arr,0);
				 /** Fadd32(ptr_fml_Sbuf,FFO_DPM_NO,(char *)&sql_pon_nmbr,0);  --commented  **/
	      Fadd32(ptr_fml_Sbuf,FFO_JIFFY,(char *)&sql_pon_nmbr,0);  /**  **/

				Fadd32(ptr_fml_Sbuf,FFO_EBA_MTCH_ACT_NO,(char *)v_ucc_cd.arr,0);

				/**MEMSET(c_seg_code);**/
				MEMSET(c_plg_type);
				if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
				{
					/** Fadd32(ptr_fml_Sbuf,FFO_BRKR_ID,(char *)c_iwtl_dp_accnt_dpid,0);
					Fadd32(ptr_fml_Sbuf,FFO_CTCL_ID,(char *)c_iwtl_dp_accnt_clntid,0); **/
					Fadd32(ptr_fml_Sbuf,FFO_BRKR_ID,(char *)"IN001002",0);
					Fadd32(ptr_fml_Sbuf,FFO_CTCL_ID,(char *)"10009132",0);
					/* strcpy(c_seg_code,"02"); */
				}
				else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0)
				{
					/** Fadd32(ptr_fml_Sbuf,FFO_BRKR_ID,(char *)c_cdsl_iwtl_dp_accnt_dpid,0);
					Fadd32(ptr_fml_Sbuf,FFO_CTCL_ID,(char *)c_cdsl_iwtl_dp_accnt_clntid,0); **/
					Fadd32(ptr_fml_Sbuf,FFO_BRKR_ID,(char *)"IN001002",0);
					Fadd32(ptr_fml_Sbuf,FFO_CTCL_ID,(char *)"10009132",0);
					strcpy(c_seg_code,"AL");
				}

				strcpy(c_plg_type,"MC");
				d_inv_value = 0.0;

				Fadd32(ptr_fml_Sbuf,FFO_INSTRMNT_TYP,(char *)c_seg_code,0);
				Fadd32(ptr_fml_Sbuf,FFO_OPTION_TYP,(char *)c_plg_type,0);
				Fadd32(ptr_fml_Sbuf,FFO_AMOUNT,(char *)&d_inv_value,0);

				MEMSET(c_exg_id);
				MEMSET(c_cm_id);
				MEMSET(c_tm_id);


				if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
				{
					strcpy(c_exg_id,"01");
					strcpy(c_cm_id,"M50519");
					strcpy(c_tm_id,"07730");

					i_err[20] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CD,(char *)c_exg_id,0);
					i_err[21] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM,(char *)c_cm_id,0);
					i_err[22] = Fadd32(ptr_fml_Sbuf,FFO_FRWD_TM,(char *)c_tm_id,0);
         /** i_err[23] = Fadd32(ptr_fml_Sbuf,FFO_ACTION1,(char *)sql_dbd_dp_id.arr,0);	** Ver 1.7 **/
          i_err[23] = Fadd32(ptr_fml_Sbuf,FFO_ACTION1,(char *)sql_dbd_dp_id_repledge.arr,0); /** Ver 1.7 ** Change by tanmay **/
          i_err[24] = Fadd32(ptr_fml_Sbuf,FFO_ACTION2,(char *)sql_dbd_dp_clnt_id.arr,0);	/** Ver 1.7 **/

				}

				if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
				{
					fn_userlog(c_ServiceName,"Calling SFO_CALL_DP ");
					i_returncode=tpcall("SFO_CALL_DP",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
				}
				else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0)
				{
					fn_userlog(c_ServiceName,"Calling SFO_CALL_DPC ");
					i_returncode=tpcall("SFO_CALL_DPC",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
				}

				fn_userlog(c_ServiceName,"After Call i_returncode : %d ",i_returncode);

				if (i_returncode == -1)
				{
					if(tperrno == TPESVCFAIL)
					{
						if(Fget32(ptr_fml_Rbuf, FFO_ERR_MSG, 0, c_err_msg, 0 ) == -1)
						{
							Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
							Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
							tpfree((char *)ptr_fml_Sbuf);
							tpfree((char *)ptr_fml_Rbuf);
							tpfree((char *)ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
						}
					}
					else
					{
						fn_errlog(c_ServiceName, "S32140", TPMSG, c_err_msg);
					}

					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
					Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
					tpfree((char *)ptr_fml_Sbuf);
					tpfree((char *)ptr_fml_Rbuf);
					tpfree((char *)ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
				}

        Fget32(ptr_fml_Rbuf,FFO_RTN_STTS,0,(char *)&sql_rtn_stts,0);
        Fget32(ptr_fml_Rbuf,FFO_ERR_CD,0,(char *)sql_err_cd.arr,0);
        Fget32(ptr_fml_Rbuf,FFO_ERR_DESC,0,(char *)sql_err_desc.arr,0);

        SETLEN(sql_err_cd);
        SETLEN(sql_err_desc);
        SETNULL(sql_err_cd);
        SETNULL(sql_err_desc);

				fn_userlog(c_ServiceName,"Status from DP :%ld:",sql_rtn_stts);	/** Changed to ld for Ver 1.7 **/
				/** sql_rtn_stts = 0;		*** Testing purpose **/

			if( sql_rtn_stts == 0)
			{

				EXEC SQL
        	UPDATE    POD_PLG_ORDR_DTLS
        	SET       POD_ORDR_STTS       = 'I',
										POD_PRCSD_QTY				= POD_PRCSD_QTY + :sql_tifp_qty
        	WHERE     trim(POD_ORDR_NO)   = trim(:sql_pod_ref_no)
        	AND       POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
        	RETURNING
                  NVL(POD_CHANNEL,'*'),
                  NVL(POD_CONF_QTY,0),
                  NVL(POD_RJCT_QTY,0),
                  NVL(POD_BP_ID,'*')
        INTO      :c_channel,
                  :d_conf_qty,
                  :d_rjct_qty,
                  :c_bpid;

        if(SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S32145", SQLMSG, c_err_msg);
            fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

 			EXEC SQL
        INSERT INTO  PML_PLG_MOD_LOG
        (
          PML_ORDR_NO,
          PML_STCK_CD,
          PML_ORDR_QTY,
          PML_ORDR_TM,
          PML_HAIRCUT,
          PML_ORDR_VL,
          PML_ISIN_NO,
          PML_DP_CLNT_ACCNT,
          PML_DP_ACCNT,
          PML_CLNT_MTCH_ACCNT,
          PML_PLG_REV_TYP,
          PML_CONF_QTY,
          PML_RJCT_QTY,
          PML_MOD_TYPE,
          PML_STTS,
          PML_MOD_CNTR,
          PML_PLCD_SQNC,
          PML_BP_ID,
          PML_CHANNEL,
          PML_RMRKS
        )
			values
        (
          trim(:sql_pod_ref_no),
          :sql_stk_stck_cd,
          :sql_tifp_qty,
          sysdate,
          :i_haircut,
          :d_ordr_val,
          :sql_isin_nmbr,
          :sql_dbd_dp_clnt_id,
          :sql_dbd_dp_id,
          :sql_mtch_accnt,
          :sql_plg_typ,
          :d_conf_qty,
          :d_rjct_qty,
          'L',
          'I',
           0,
           0,
           :c_bpid,
           :c_channel,
           'Create TIFP Update Status'
        );

        if(SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S32150", SQLMSG, c_err_msg);
            fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
						
				EXEC SQL 
						 UPDATE ptd_tifp_dtls 
						 SET
								 ptd_leg_no = 'C1',
								 /* PTD_SLIPNO_L1 = :sql_crt_slip_no, */
								 ptd_tifp_stts = 'P',
								 ptd_tifp_run_dt = sysdate,
								 ptd_exctn_dt = :sql_execn_date,
								 ptd_run_nmbr = :sql_ptd_seq
						 WHERE 
								 ptd_dp_id = :sql_dbd_dp_id
						 AND ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
						 AND ptd_isin_nmbr = :sql_isin_nmbr
						 AND PTD_DPM_NMBR2 = :sql_pon_nmbr
						 AND trim(ptd_pod_ref_no) = trim(:sql_pod_ref_no)
						 AND ptd_plg_rev_typ = :sql_plg_typ
						 AND ptd_tifp_stts = 'N'
						 /* AND PTD_SLIPNO_L1 is NULL */
						 AND ptd_tifp_qty = :sql_tifp_qty
						 AND rownum < 2;

					 if( SQLCODE !=0 )
					 {
						 fn_errlog( c_ServiceName, "S32155", SQLMSG, c_err_msg  );
						 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						 l_acnt_id = -1;
						 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						 tpfree ( ( char * )ptr_fml_Obuf);
						 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					 }

            /**************** Commented ***************	
						 sql_crt_slip_no = sql_crt_slip_no + 1;
            ********************************************/

						sprintf(c_msg, " Acceptance of [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/    
				
						fn_userlog(c_ServiceName,"End of Acceptance of [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr, sql_stk_stck_cd, sql_pon_nmbr);  /**  **/

						BAT_POST(c_msg);
						
				}/*end of if for return status zero from DP*/
				else
				{
						
					EXEC SQL 
							 UPDATE ptd_tifp_dtls 
							 SET
											ptd_leg_no = 'C1',
											ptd_tifp_stts = 'J',
											ptd_tifp_run_dt = sysdate,
											ptd_exctn_dt = :sql_execn_date,
											PTD_RMRKS = trim(:sql_err_desc),
											PTD_SEG_CODE = NULL
							 WHERE  ptd_dp_id = :sql_dbd_dp_id
							 AND ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
							 AND ptd_isin_nmbr = :sql_isin_nmbr
							 AND trim(ptd_pod_ref_no) = trim(:sql_pod_ref_no)
							 AND ptd_plg_rev_typ = :sql_plg_typ
							 AND ptd_tifp_stts = 'N'
							 /* AND PTD_SLIPNO_L1 is NULL */
							 AND PTD_DPM_NMBR2 = :sql_pon_nmbr
							 AND ptd_tifp_qty = :sql_tifp_qty
							 AND rownum < 2;

			    	 if( SQLCODE !=0 )
      			 {
        			 fn_errlog( c_ServiceName, "S32160", SQLMSG, c_err_msg  );
        			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			 l_acnt_id = -1;
        			 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			 tpfree ( ( char * )ptr_fml_Obuf);
							 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			 }
				
						 EXEC SQL 
						      UPDATE pod_plg_ordr_dtls 
									SET    pod_ordr_stts = 'J',
                         POD_RMRKS = trim(:sql_err_desc) 
						      WHERE  trim(pod_ordr_no) = trim(:sql_pod_ref_no)
                  AND    POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						      AND    pod_plg_rev_typ = :sql_plg_typ;
	
			    	 if( SQLCODE !=0 )
		   			 {
			   			 fn_errlog( c_ServiceName, "S32165", SQLMSG, c_err_msg  );
				 			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       				 l_acnt_id = -1;
       				 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       				 tpfree ( ( char * )ptr_fml_Obuf);
							 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       				 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     				 }

							fn_userlog(c_ServiceName,"Inside withdrwal rejection in requested case......");
							fn_userlog(c_ServiceName,"sql_tifp_qty [%ld]",sql_tifp_qty);
							fn_userlog(c_ServiceName,"sql_pon_nmbr [%lf]",sql_pon_nmbr);
							fn_userlog(c_ServiceName,"sql_mtch_accnt [%s]",sql_mtch_accnt.arr);
							fn_userlog(c_ServiceName,"sql_dbd_dp_id [%s]",sql_dbd_dp_id_1.arr);
							fn_userlog(c_ServiceName,"sql_dbd_dp_clnt_id [%s]",sql_dbd_dp_clnt_id.arr);
							fn_userlog(c_ServiceName,"sql_isin_nmbr [%s]",sql_isin_nmbr.arr);


						EXEC SQL
								 UPDATE ptd_tifp_dtls
								 SET    PTD_REPLG2_QTY = PTD_REPLG2_QTY - :sql_tifp_qty
								 WHERE  ptd_dpm_nmbr = :sql_pon_nmbr
								 AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt                                
								 AND    ptd_dp_id           = :sql_dbd_dp_id                                     
								 AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id                               
								 AND    ptd_isin_nmbr       = :sql_isin_nmbr                                 
								 AND    ptd_plg_rev_typ = 'T';
               
                if ( SQLCODE != 0 )
							  {
									fn_errlog( c_ServiceName, "S32170", SQLMSG, c_err_msg  );
									fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
									EXEC SQL CLOSE ptd_cur;
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							  }   

								if(DEBUG_MSG_LVL_3)
								{
									fn_userlog(c_ServiceName,"After plgVswthdrw update ......");
								}

						 EXEC SQL 
						      SELECT (count(*)+1) 
						      INTO   :sql_pml_mod_cntr
						      FROM   pml_plg_mod_log
						      WHERE  pml_ordr_no = trim(:sql_pod_ref_no)
                  AND    PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						      AND    pml_mod_type in ('N','M','C','J');
	
						if( SQLCODE !=0 )
     				{
       				fn_errlog( c_ServiceName, "S32175", SQLMSG, c_err_msg  );
	       			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		     			l_acnt_id = -1;
			   			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				 			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	     				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		   			}

						EXEC SQL 
								 INSERT INTO pml_plg_mod_log
						     (
										pml_ordr_no,
						        pml_stck_cd,
						        pml_ordr_qty,
						        pml_ordr_tm,
						        pml_haircut,
						        pml_ordr_vl,
						        pml_isin_no,
						        pml_dp_clnt_accnt,
						        pml_dp_accnt,
						        pml_clnt_mtch_accnt,
						        pml_plg_rev_typ,
						        pml_conf_qty,
						        pml_rjct_qty,
						        pml_mod_type,
						        pml_stts,
						        pml_mod_cntr,
						        pml_plcd_sqnc,
						        pml_bp_id,
						        pml_channel,
						        pml_rmrks
							 	 )
						     VALUES
						     (	:sql_pod_ref_no,
	  					      :sql_stk_stck_cd,
							      :sql_tifp_qty,
							      sysdate,
							      :sql_stk_plg_haircut,		 
		 					      :sql_plg_val,
							      :sql_isin_nmbr,
							      :sql_dbd_dp_clnt_id,
							      :sql_dbd_dp_id,
							      :sql_mtch_accnt,
							      :sql_plg_typ,
							      0,
							      0,
							      'J',
							      'J',
							      :sql_pml_mod_cntr,
							      0,
							      null,
							      'SYS',
							      :sql_err_desc
								 );
					
						if( SQLCODE !=0 )
				    {
					  	fn_errlog( c_ServiceName, "S32180", SQLMSG, c_err_msg  );
						  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							l_acnt_id = -1;
	            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		          tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				    }

					}

				 tpfree((char *)ptr_fml_Sbuf);
         tpfree((char *)ptr_fml_Rbuf);

					if(DEBUG_MSG_LVL_3)
					{
          	fn_userlog(c_ServiceName,"Just before commit....");
					}

				  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
     			{
    				fn_errlog( c_ServiceName, "S32185", TPMSG, c_err_msg  );
     				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						l_acnt_id = -1;
						Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						tpfree (( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
					}

					if(DEBUG_MSG_LVL_3)
					{
          	fn_userlog(c_ServiceName,"Just after commit for match [%s]....",sql_mtch_accnt);
					}

					tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );

		}

		else if (sql_run_plg_typ == 'U')
	{

			MEMSET(c_pod_ref_no_plg);
			strcpy(c_pod_ref_no_plg,sql_pod_ref_no.arr);
			MEMSET(sql_pod_ref_no);

      i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

			if ( i_trnsctn == -1 )
			{
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				fn_errlog( c_ServiceName, "S32190",LIBMSG,c_err_msg);
				l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				tpfree ( ( char * )ptr_fml_Obuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			} 

			EXEC SQL SELECT PRS_PLG_REV_SEQ.nextval INTO :sql_prs_seq
			FROM DUAL;

			if (SQLCODE != 0)
			{
				fn_errlog( c_ServiceName, "S32195", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**						l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}	

			EXEC SQL 
			SELECT TO_CHAR(sysdate,'YYYYMMDD')||LPAD((PPS_PLG_SEQ+1),8,0)
			INTO :sql_pod_ordr_no
			FROM PPS_PLG_PLACED_SEQ 
			WHERE PPS_PLG_ORDR_DT = TO_DATE(TO_CHAR(sysdate,'DD-Mon-YYYY'),'DD-Mon-YYYY')
			FOR UPDATE OF PPS_PLG_SEQ;  

			if ((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
			{
				fn_errlog( c_ServiceName, "S32200", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**						l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			SETNULL(sql_pod_ordr_no);
				
			if (SQLCODE == NO_DATA_FOUND)
			{
				EXEC SQL 
				INSERT INTO PPS_PLG_PLACED_SEQ
				(PPS_PLG_SEQ,
				PPS_PLG_ORDR_DT)
				VALUES
				(1,
				TO_DATE(TO_CHAR(sysdate,'DD-Mon-YYYY'),'DD-Mon-YYYY'));
				
				if (SQLCODE != 0)
				{
					fn_errlog( c_ServiceName, "S32205", SQLMSG, c_err_msg  );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**							l_acnt_id = -1;
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				
				/**********Pledge order reference number is created**************************/
				EXEC SQL 
				SELECT TO_CHAR(sysdate,'YYYYMMDD')||LPAD(1,8,0) 
				INTO :sql_pod_ordr_no
				FROM DUAL;

				if (SQLCODE != 0)
				{
					fn_errlog( c_ServiceName, "S32210", SQLMSG, c_err_msg  );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**							l_acnt_id = -1;
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				SETNULL(sql_pod_ordr_no);

			}
			else
			{
				EXEC SQL 
				UPDATE PPS_PLG_PLACED_SEQ SET 
				PPS_PLG_SEQ = PPS_PLG_SEQ +1
				WHERE PPS_PLG_ORDR_DT = TO_DATE(TO_CHAR(sysdate,'DD-Mon-YYYY'),'DD-Mon-YYYY');
			
				if (SQLCODE != 0)
				{
					fn_errlog( c_ServiceName, "S32215", SQLMSG, c_err_msg  );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**							l_acnt_id = -1;
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}

      if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
      {
        fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
        fn_errlog( c_ServiceName, "S32220", TPMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree (( char * )ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
      }

       fn_userlog(c_ServiceName,"Inside TM CM Repledge");
        sql_ptd_seq = 0.0;

        EXEC SQL
             SELECT ptd_seq.nextval
             INTO :sql_ptd_seq
             FROM dual;

       if( SQLCODE !=0 )
        {
          fn_errlog( c_ServiceName, "S32225", SQLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

       	sql_ptm_max_slip_no = 0;
        sql_ptm_min_slip_no = 0;
        sql_ptm_current_slip_no = 0;

        i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
        if ( i_trnsctn == -1 )
        {
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          fn_errlog( c_ServiceName, "S32230",LIBMSG,c_err_msg);
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        EXEC SQL
        SELECT
        ptm_min_slip_no,
        ptm_max_slip_no,
        ptm_current_slip_no
        INTO
        :sql_ptm_min_slip_no,
        :sql_ptm_max_slip_no,
        :sql_ptm_current_slip_no
        FROM  ptm_tifp_mstr
        WHERE PTM_PLG_TYP = 'M'
        FOR   UPDATE OF ptm_current_slip_no;    

      	if( SQLCODE !=0 )
        {
          fn_errlog( c_ServiceName, "S32235", SQLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

       if((sql_ptm_current_slip_no < sql_ptm_min_slip_no)||(sql_ptm_current_slip_no > sql_ptm_max_slip_no))
        {
          sql_crt_slip_no = sql_ptm_min_slip_no;

          fn_userlog(c_ServiceName,"The number of range is [%lld]",(sql_ptm_max_slip_no - sql_ptm_min_slip_no));

          if((sql_ptm_max_slip_no - sql_ptm_min_slip_no) ==  0)
          {
            strcpy(c_err_msg,"Slip number for Withdraw is less than count.");
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        }
        else
        {
          sql_crt_slip_no = sql_ptm_current_slip_no + 1;

          fn_userlog(c_ServiceName,"The range is [%lld]",(sql_ptm_max_slip_no - sql_ptm_current_slip_no));

          if((sql_ptm_max_slip_no - sql_ptm_current_slip_no) == 0)
          {
            strcpy(c_err_msg,"Slip number for Withdraw is less than count.");
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        }

       EXEC SQL
        UPDATE ptm_tifp_mstr
        SET    ptm_current_slip_no = :sql_crt_slip_no
        WHERE  PTM_PLG_TYP = 'M';

        if( SQLCODE !=0 )
        {
           fn_errlog( c_ServiceName, "S32240", SQLMSG, c_err_msg  );
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           l_acnt_id = -1;
           Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
           tpfree ( ( char * )ptr_fml_Obuf);
           fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
        {
          fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
          fn_errlog( c_ServiceName, "S32245", TPMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree (( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }

         sql_conf_slip_no = 0 ;

       i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
        if ( i_trnsctn == -1 )
        {
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          fn_errlog( c_ServiceName, "S32250",LIBMSG,c_err_msg);
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

        }


			EXEC SQL
				SELECT NVL(PTD_DPM_NMBR1,0), NVL(PTD_DPM_NMBR3,0)
				INTO :d_pon_no_pledge,d_pon_no_repledge2
				FROM PTD_TIFP_DTLS
				WHERE PTD_PLG_REV_TYP = 'P'
				AND PTD_TIFP_STTS = 'P'
				AND PTD_DPM_NMBR2 = :d_pon_no_repledge
				AND PTD_LEG_NO = 'L5'
				AND PTD_CLM_MTCH_ACCNT = :sql_mtch_accnt
				AND PTD_STCK_CD = :sql_stk_stck_cd
				AND PTD_DP_ID = :sql_dbd_dp_id
				AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id;

			if (SQLCODE != 0)
			{
				fn_errlog( c_ServiceName, "S32255", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**					l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			EXEC SQL
				SELECT COUNT(1)
				INTO :d_repledge2_cnt
				FROM PTD_TIFP_DTLS
				WHERE PTD_PLG_REV_TYP = 'D'
				AND PTD_TIFP_STTS = 'P'
				AND PTD_DPM_NMBR2 = :d_pon_no_repledge
				AND PTD_LEG_NO = 'D5'
				AND PTD_CLM_MTCH_ACCNT = :sql_mtch_accnt
				AND PTD_STCK_CD = :sql_stk_stck_cd
				AND PTD_DP_ID = :sql_dbd_dp_id
				AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id;

			if (SQLCODE != 0)
			{
				fn_errlog( c_ServiceName, "S32260", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**					l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			fn_userlog(c_ServiceName,"No of Repledge2 Closure record :%d:",d_repledge2_cnt);

			if (d_repledge2_cnt == 0)
			{
				fn_userlog(c_ServiceName,"Repledge2 closure record not confirmed for :%lf:",d_pon_no_pledge);
				fn_userlog(c_ServiceName,"Skipping Repledge1 closure for :%lf:",d_pon_no_pledge);
				sprintf(c_err_msg,"Repledge2 closure record not confirmed for :%lf:",d_pon_no_pledge);
        fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );
			}

			strcpy(sql_pml_channel.arr,"SYS");
			SETLEN(sql_pml_channel);
			SETNULL(sql_pml_channel);
			fn_userlog(c_ServiceName,"Value of sql_pod_ordr_no :%s:",sql_pod_ordr_no.arr);
			fn_userlog(c_ServiceName,"Value of sql_stk_stck_cd :%s:",sql_stk_stck_cd);
			fn_userlog(c_ServiceName,"Value of sql_tifp_qty :%ld:",sql_tifp_qty);
			fn_userlog(c_ServiceName,"Value of sql_isin_nmbr :%s:",sql_isin_nmbr.arr);
			fn_userlog(c_ServiceName,"Value of sql_dbd_dp_clnt_id :%s:",sql_dbd_dp_clnt_id.arr);
			fn_userlog(c_ServiceName,"Value of sql_dbd_dp_id :%s:",sql_dbd_dp_id.arr);
			fn_userlog(c_ServiceName,"Value of sql_mtch_accnt :%s:",sql_mtch_accnt.arr);
			fn_userlog(c_ServiceName,"Value of sql_run_plg_typ :%c:",sql_run_plg_typ);
			fn_userlog(c_ServiceName,"Value of sql_pod_bp_id :%s:",sql_pod_bp_id.arr);
			fn_userlog(c_ServiceName,"Value of sql_pml_channel :%s:",sql_pml_channel.arr);
			fn_userlog(c_ServiceName,"Value of c_pod_ref_no_plg :%s:",c_pod_ref_no_plg);
						
			EXEC SQL INSERT INTO POD_PLG_ORDR_DTLS
			(POD_ORDR_NO,
			POD_STCK_CD,
			POD_ORDR_QTY,
			POD_ORDR_DT,
			POD_HAIRCUT,
			POD_ORDR_VL,
			POD_ISIN_NO,
			POD_DP_CLNT_ACCNT,
			POD_DP_ACCNT,
			POD_CLNT_MTCH_ACCNT ,
			POD_PLG_REV_TYP,
			POD_ORDR_STTS,
			POD_CONF_QTY,
			POD_PRCSD_QTY,   /*******1.3*****/
			POD_RMRKS,
			POD_BP_ID,
			POD_CHANNEL,
			POD_ALLOC_TYP)   /*** ver 4.7 ***/
			VALUES
			(:sql_pod_ordr_no,
			:sql_stk_stck_cd,
			:sql_tifp_qty,
			sysdate,
			0,
			0,
			:sql_isin_nmbr,
			:sql_dbd_dp_clnt_id,
			:sql_dbd_dp_id,
			:sql_mtch_accnt,
			:sql_run_plg_typ,
			'R',
			0,
			0,              /*******1.3*****/
			null,
			:sql_pod_bp_id,
			:sql_pml_channel,
			NULL);  /*** ver 4.7 ***/ 	
				
			if (SQLCODE != 0)
			{
				fn_errlog( c_ServiceName, "S32265", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**						l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			sql_pml_mod_type ='N';
			sql_pml_mod_cntr = 1;

			fn_userlog(c_ServiceName,"Value of sql_tifp_qty :%ld:",sql_tifp_qty);	
			MEMSET(sql_pml_rmrks);

			fn_userlog(c_ServiceName,"Value of sql_pml_channel :%s:",sql_pml_channel.arr);

			EXEC SQL INSERT INTO PML_PLG_MOD_LOG
			(PML_ORDR_NO,
			PML_STCK_CD,
			PML_ORDR_QTY,
			PML_ORDR_TM,
			PML_HAIRCUT,
			PML_ORDR_VL,
			PML_ISIN_NO,
			PML_DP_CLNT_ACCNT,
			PML_DP_ACCNT,
			PML_CLNT_MTCH_ACCNT,
			PML_PLG_REV_TYP,
			PML_MOD_TYPE,
			PML_STTS,
			PML_MOD_CNTR,
			PML_PLCD_SQNC,
			PML_BP_ID,
			PML_CHANNEL,
			PML_RMRKS)
			VALUES
			(:sql_pod_ordr_no,
			:sql_stk_stck_cd,
			:sql_tifp_qty,
			sysdate,
			0,
			0,
			:sql_isin_nmbr,
			:sql_dbd_dp_clnt_id,
			:sql_dbd_dp_id,
			:sql_mtch_accnt,
			:sql_run_plg_typ,
			:sql_pml_mod_type,
			'R',
			:sql_pml_mod_cntr,
			:sql_prs_seq,	
			:sql_pod_bp_id,
			:sql_pml_channel,
			:sql_pml_rmrks);
					
			if (SQLCODE != 0)
			{
				fn_errlog( c_ServiceName, "S32270", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**					l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}


			EXEC SQL
				INSERT INTO PTD_TIFP_DTLS
				(
					PTD_CLM_MTCH_ACCNT,
					PTD_STCK_CD,
					PTD_TIFP_QTY,
					PTD_PLG_REV_TYP,
					PTD_ISIN_NMBR,
					PTD_DP_ID,
					PTD_DP_CLNT_ID,
					PTD_POD_REF_NO,
					PTD_TIFP_RUN_DT,
					PTD_PLG_VS_WD_QTY,
					PTD_DPM_NMBR1,
					PTD_DPM_NMBR2,
					PTD_DPM_NMBR3,
					PTD_TIFP_STTS,
					PTD_IWTL_DP_ACCNT,
					PTD_AGREE_NMBR,
					PTD_SLIPNO_L1,
					PTD_DPM_NMBR,
          PTD_CHANNEL     /** Ver 2.0 **/
				)
				VALUES
				(
					:sql_mtch_accnt,
					:sql_stk_stck_cd,
					:sql_tifp_qty,
					:sql_plg_typ,
					:sql_isin_nmbr,
					:sql_dbd_dp_id,
					:sql_dbd_dp_clnt_id,
					:sql_pod_ordr_no,
					to_date(SYSDATE,'dd-mm-yyyy hh24:mi:ss'),
					:sql_tifp_qty,
					:d_pon_no_pledge,
					:d_pon_no_repledge,
					:d_pon_no_repledge2,
					'N',
					decode(:i_dp_flg, 1,:c_cdsl_iwtl_dp_accnt,:c_iwtl_dp_accnt),
					:v_agree_no_repledge,
					:sql_crt_slip_no,
					:d_pon_no_repledge,
          :sql_pml_channel      /** Ver 2.0 **/
				);

				if ( SQLCODE != 0 )
				{
					fn_errlog( c_ServiceName, "S32275", SQLMSG, c_err_msg  );
					fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
					EXEC SQL CLOSE TIFP_CURSOR;
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpfree ( ( char * )ptr_fml_Obuf);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

			/***
				EXEC SQL
        	UPDATE  PTD_TIFP_DTLS
          SET     PTD_REPLG2_QTY     =  NVL(PTD_REPLG2_QTY,0) + :sql_tifp_qty
          WHERE   trim(PTD_DPM_NMBR)    = trim(:d_pon_no_repledge)
          AND     trim(PTD_POD_REF_NO)  = trim(:c_pod_ref_no_plg)
          AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
          AND     PTD_DP_ID             = :sql_dbd_dp_id
          AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
          AND     PTD_STCK_CD           = :sql_stk_stck_cd
          AND     PTD_PLG_REV_TYP       = 'T'; 


				if ( SQLCODE != 0 )
				{
					fn_errlog( c_ServiceName, "S32280", SQLMSG, c_err_msg  );
					fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
					EXEC SQL CLOSE TIFP_CURSOR;
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpfree ( ( char * )ptr_fml_Obuf);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				***/


			EXEC SQL
				UPDATE  PTD_TIFP_DTLS
				SET     PTD_PLG_VS_WD_QTY     = NVL(PTD_PLG_VS_WD_QTY,0) + :sql_tifp_qty
				WHERE   trim(PTD_DPM_NMBR)    = trim(:d_pon_no_repledge)
				/*AND     trim(PTD_POD_REF_NO)  = trim(:c_pod_ref_no_plg) */
				AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
				AND     PTD_DP_ID             = :sql_dbd_dp_id
				AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
				AND     PTD_STCK_CD           = :sql_stk_stck_cd
				AND     PTD_PLG_REV_TYP       = 'T'
				AND			PTD_LEG_NO						= 'T5'
				AND			PTD_TIFP_STTS							= 'P'; 


			if ( SQLCODE != 0 )
			{
				fn_errlog( c_ServiceName, "S32285", SQLMSG, c_err_msg  );
				fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
				EXEC SQL CLOSE TIFP_CURSOR;
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpfree ( ( char * )ptr_fml_Obuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			/***

			EXEC SQL
				UPDATE  PTD_TIFP_DTLS
				SET     PTD_REPLG1_QTY     = NVL(PTD_REPLG1_QTY,0) + :sql_tifp_qty
				WHERE   trim(PTD_DPM_NMBR)    = trim(:d_pon_no_pledge)
				AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
				AND     PTD_DP_ID             = :sql_dbd_dp_id
				AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
				AND     PTD_STCK_CD           = :sql_stk_stck_cd
				AND     ((PTD_PLG_REV_TYP = 'W' AND PTD_LEG_NO = 'W3') OR (PTD_PLG_REV_TYP = 'I' AND PTD_LEG_NO = 'I3'))
				AND			PTD_TIFP_STTS							= 'P'; 


			if ( SQLCODE != 0 )
			{
				fn_errlog( c_ServiceName, "S32290", SQLMSG, c_err_msg  );
				fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
				EXEC SQL CLOSE TIFP_CURSOR;
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpfree ( ( char * )ptr_fml_Obuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			*** Commented for combined **/

		 EXEC SQL
					DECLARE REPLG_CLOSURE CURSOR FOR
					SELECT  PTD_POD_REF_NO,
									PTD_TIFP_QTY,
									NVL(PTD_REPLG1_QTY,0),
									ptd_clm_mtch_accnt ,  
									ptd_dp_id ,
									ptd_dp_clnt_id ,
									ptd_isin_nmbr
					FROM    ptd_tifp_dtls 
					WHERE   trim(PTD_DPM_NMBR)    = trim(:d_pon_no_pledge)
					AND     ptd_plg_rev_typ in ('W','I')
					AND			PTD_LEG_NO IS NULL
					AND			PTD_TIFP_STTS = 'N'
					AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
					AND     PTD_DP_ID             = :sql_dbd_dp_id
					AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
					AND     PTD_STCK_CD           = :sql_stk_stck_cd;

			/**********
			EXEC SQL
				UPDATE  PTD_TIFP_DTLS
				SET     PTD_REPLG2_QTY     = NVL(PTD_REPLG2_QTY,0) + :sql_tifp_qty
				WHERE   trim(PTD_DPM_NMBR)    = trim(:d_pon_no_pledge)
				AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
				AND     PTD_DP_ID             = :sql_dbd_dp_id
				AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
				AND     PTD_STCK_CD           = :sql_stk_stck_cd
				AND     ((PTD_PLG_REV_TYP = 'W' AND PTD_LEG_NO = 'W3') OR (PTD_PLG_REV_TYP = 'I' AND PTD_LEG_NO = 'I3'))
				AND			PTD_TIFP_STTS							= 'P'; 
			*****/

			if ( SQLCODE != 0 )
			{
				fn_errlog( c_ServiceName, "S32295", SQLMSG, c_err_msg  );
				fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpfree ( ( char * )ptr_fml_Obuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}


      EXEC SQL OPEN REPLG_CLOSURE;

 			if ( SQLCODE != 0 )
      {
          fn_errlog(c_ServiceName, "S32300", SQLMSG, c_err_msg);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			tpfree ( ( char * )ptr_fml_Obuf);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }


			qty_remaining_to_cls = sql_tifp_qty;

			while(1)
			{

				MEMSET(sql_ptd_pod_ref_no);
				MEMSET(sql_ptd_clm_mtch_accnt);
				MEMSET(sql_ptd_dp_id);
				MEMSET(sql_ptd_dp_clnt_id);
				MEMSET(sql_ptd_isin_nmbr);
				sql_ptd_tifp_qty = 0;
				sql_ptd_replg2_qty = 0;

				EXEC SQL
					FETCH REPLG_CLOSURE
					INTO 
						:sql_ptd_pod_ref_no,
						:sql_ptd_tifp_qty,
						:sql_ptd_replg1_qty,
						:sql_ptd_clm_mtch_accnt,  
						:sql_ptd_dp_id,
						:sql_ptd_dp_clnt_id,
						:sql_ptd_isin_nmbr;

				if ( SQLCODE != 0 )
				{
					if ( SQLCODE == NO_DATA_FOUND )
					{
							EXEC SQL CLOSE REPLG_CLOSURE;
							break;
					}
					else
					{
							EXEC SQL CLOSE REPLG_CLOSURE;
							fn_errlog( c_ServiceName, "S32305", SQLMSG, c_err_msg  );
							fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
							fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
							break;
					}
				}

				SETLEN(sql_ptd_pod_ref_no);
				SETLEN(sql_ptd_clm_mtch_accnt);
				SETLEN(sql_ptd_dp_id);
				SETLEN(sql_ptd_dp_clnt_id);
				SETLEN(sql_ptd_isin_nmbr);

				SETNULL(sql_ptd_pod_ref_no);
				SETNULL(sql_ptd_clm_mtch_accnt);
				SETNULL(sql_ptd_dp_id);
				SETNULL(sql_ptd_dp_clnt_id);
				SETNULL(sql_ptd_isin_nmbr);

				fn_userlog(c_ServiceName,"Inside Cursor of update repledge......");
				fn_userlog(c_ServiceName,"sql_ptd_pod_ref_no [%s]",sql_ptd_pod_ref_no.arr);
				fn_userlog(c_ServiceName,"sql_ptd_clm_mtch_accnt [%s]",sql_ptd_clm_mtch_accnt.arr);
				fn_userlog(c_ServiceName,"sql_ptd_dp_id [%s]",sql_ptd_dp_id.arr);
				fn_userlog(c_ServiceName,"sql_ptd_dp_clnt_id [%s]",sql_ptd_dp_clnt_id.arr);
				fn_userlog(c_ServiceName,"sql_ptd_isin_nmbr [%s]",sql_ptd_isin_nmbr.arr);
				fn_userlog(c_ServiceName,"sql_ptd_tifp_qty :%ld:",sql_ptd_tifp_qty);
				fn_userlog(c_ServiceName,"sql_ptd_replg1_qty :%ld:",sql_ptd_replg1_qty);
				fn_userlog(c_ServiceName,"qty_remaining_to_cls :%ld:",qty_remaining_to_cls);


				if (qty_remaining_to_cls > (sql_ptd_tifp_qty - sql_ptd_replg1_qty))
				{
					upd_qty = sql_ptd_tifp_qty - sql_ptd_replg1_qty;
					qty_remaining_to_cls = qty_remaining_to_cls - (sql_ptd_tifp_qty - sql_ptd_replg1_qty);
				}
				else if (qty_remaining_to_cls <= (sql_ptd_tifp_qty - sql_ptd_replg1_qty))
				{
					upd_qty = qty_remaining_to_cls;
					qty_remaining_to_cls  = 0;
				}
				
				EXEC SQL
					UPDATE  PTD_TIFP_DTLS
					SET     PTD_REPLG1_QTY = NVL(PTD_REPLG1_QTY,0) + :upd_qty
					WHERE   PTD_CLM_MTCH_ACCNT = :sql_ptd_clm_mtch_accnt
					AND     PTD_DP_ID = :sql_ptd_dp_id
					AND     PTD_DP_CLNT_ID = :sql_ptd_dp_clnt_id
					AND			PTD_ISIN_NMBR	= :sql_ptd_isin_nmbr
					AND			PTD_POD_REF_NO	=	:sql_ptd_pod_ref_no
					AND			trim(PTD_DPM_NMBR)    = trim(:d_pon_no_pledge)
					AND     ((PTD_PLG_REV_TYP = 'W' AND PTD_LEG_NO IS NULL) OR (PTD_PLG_REV_TYP = 'I' AND PTD_LEG_NO IS NULL))
					AND			PTD_TIFP_STTS	= 'N'; 


					if ( SQLCODE != 0 )
					{
							fn_errlog(c_ServiceName, "S32310", SQLMSG, c_err_msg);
							EXEC SQL CLOSE REPLG_CLOSURE;
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							tpfree ( ( char * )ptr_fml_Obuf);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
			}

     EXEC SQL
           DELETE FROM TEMP_PLG_RECORDS;

      if((SQLCODE !=0) && (SQLCODE!= NO_DATA_FOUND))
      {
        fn_errlog( c_ServiceName, "S32315", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree ( ( char * )ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      EXEC SQL
           INSERT INTO TEMP_PLG_RECORDS
           (
              tmp_tifp_qty,
              tmp_plg_rev_typ,
              tmp_isin_nmbr,
              tmp_dp_id,
              tmp_dp_clnt_id,
              tmp_pod_ref_no,
              tmp_stck_cd,
              tmp_clm_mtch_accnt,
              tmp_dpm_nmbr,
              tmp_agree_nmbr
           )
          (
            SELECT ptd_tifp_qty,
                   :sql_plg_typ,
                   ptd_isin_nmbr,
                   ptd_dp_id,
                   ptd_dp_clnt_id,
                   ptd_pod_ref_no,
                   ptd_stck_cd,
                   ptd_clm_mtch_accnt,
                   PTD_DPM_NMBR,
                   ptd_agree_nmbr
            FROM   ptd_tifp_dtls
            WHERE  ptd_plg_rev_typ=:sql_plg_typ
            AND    ptd_tifp_stts = 'N'
            AND    ptd_dp_id = :sql_dbd_dp_id
            AND    ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
            AND    ptd_stck_cd = :sql_stk_stck_cd
            AND    ptd_clm_mtch_accnt = :sql_mtch_accnt
            AND    ptd_pod_ref_no = :sql_pod_ordr_no
           );

				sql_tifp_qty=0;
				MEMSET(sql_isin_nmbr);
				MEMSET(sql_pod_ref_no);
				MEMSET(sql_agree_nmbr);
				MEMSET(sql_dbd_dp_id);
				MEMSET(sql_dbd_dp_clnt_id);
				memset(sql_stk_stck_cd,'\0',sizeof(sql_stk_stck_cd));
				MEMSET(sql_mtch_accnt);
				sql_pon_nmbr = 0.0;
				MEMSET(sql_err_cd);
				MEMSET(sql_err_desc);

				/****** Commented by Samip ***********/

				EXEC SQL 
						 SELECT 
				           tmp_tifp_qty,
				           tmp_isin_nmbr,
				           tmp_dp_id,
				           tmp_dp_clnt_id,
				           tmp_pod_ref_no,
				           tmp_stck_cd, 
				           tmp_clm_mtch_accnt,
				           tmp_dpm_nmbr,
				           trunc(tmp_agree_nmbr)
				     INTO 
			             :sql_tifp_qty,
			             :sql_isin_nmbr,
			             :sql_dbd_dp_id,
			             :sql_dbd_dp_clnt_id,
			             :sql_pod_ref_no,
			             :sql_stk_stck_cd,
			             :sql_mtch_accnt,
			             :sql_pon_nmbr,
			             :sql_agree_nmbr
				     FROM  TEMP_PLG_RECORDS
				     WHERE rownum < 2;

				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S32320", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				EXEC SQL 
				     DELETE FROM TEMP_PLG_RECORDS
				     WHERE rownum < 2;
				
				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S32325", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				/** Commeted *** Samip **
				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   			{
					fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
    			fn_errlog( c_ServiceName, "S32330", TPMSG, c_err_msg  );
   				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     			l_acnt_id = -1;
     			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     			tpfree (( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
				}
				*** Comment end **/
       
        /*****************************  ends *******************************/

				sql_plg_val = 0.0;

				if(DEBUG_MSG_LVL_3){
        	fn_userlog(c_ServiceName,"The tifp qty [%ld]",sql_tifp_qty);
        	fn_userlog(c_ServiceName,"The create slip number [%lld]",sql_crt_slip_no);
        	fn_userlog(c_ServiceName,"The isin nmbr [%s]",sql_isin_nmbr.arr);
        	fn_userlog(c_ServiceName,"The dp id  [%s]",sql_dbd_dp_id.arr);
        	fn_userlog(c_ServiceName,"The dp clnt acc [%s]",sql_dbd_dp_clnt_id.arr);
        	fn_userlog(c_ServiceName,"The pod ref no [%s]",sql_pod_ref_no.arr);
        	fn_userlog(c_ServiceName,"The stk code  [%s]",sql_stk_stck_cd);
        	fn_userlog(c_ServiceName,"The mtch clnt acc [%s]",sql_mtch_accnt.arr);
        	fn_userlog(c_ServiceName,"The pon nmbr  [%lf]",sql_pon_nmbr);  /**  **/
        	fn_userlog(c_ServiceName,"The agree nmbr  [%s]",sql_agree_nmbr.arr);
        }

         ptr_fml_Sbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
          if (ptr_fml_Sbuf == NULL)
          {
            fn_errlog(c_ServiceName, "S32335", TPMSG, c_err_msg);
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
            tpfree((char *)ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
          }

          ptr_fml_Rbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
          if (ptr_fml_Rbuf == NULL)
          {
            fn_errlog(c_ServiceName, "S32340", TPMSG, c_err_msg);
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
            tpfree((char *)ptr_fml_Obuf);
            tpfree((char *)ptr_fml_Sbuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
          }
				
				strcpy((char *)sql_usr_code.arr,"EBA");
        strcpy((char *)temp,"PCL");
        sql_clsr_typ = 'U';  
        SETLEN(sql_usr_code);

				MEMSET(sql_dbd_dp_id_repledge);
				MEMSET(sql_dbd_dp_clnt_id_repledge);

				if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
				{
					strcpy(sql_dbd_dp_id_repledge.arr,c_iwtl_dp_accnt_dpid);
					strcpy(sql_dbd_dp_clnt_id_repledge.arr,c_iwtl_dp_accnt_clntid);
				}
				else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0)
				{
					strcpy(sql_dbd_dp_id_repledge.arr,c_cdsl_iwtl_dp_accnt_dpid);
					strcpy(sql_dbd_dp_clnt_id_repledge.arr,c_cdsl_iwtl_dp_accnt_clntid);
				}

				Fadd32(ptr_fml_Sbuf,FFO_OPERATION_TYP, (char *)&sql_oprn_typ,0);
				Fadd32(ptr_fml_Sbuf,FFO_CLSR_TYP, (char *)&sql_clsr_typ,0);
				Fadd32(ptr_fml_Sbuf,FFO_PLEDGE_TYP, (char *)temp,0);
				Fadd32(ptr_fml_Sbuf,FFO_DPID,(char *)sql_dbd_dp_id_repledge.arr,0);	
				Fadd32(ptr_fml_Sbuf,FFO_DP_CLNT_ID,(char *)sql_dbd_dp_clnt_id_repledge.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_ISIN_NMBR, (char *)sql_isin_nmbr.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_PLG_QTY,(char *)&sql_tifp_qty,0);
				Fadd32(ptr_fml_Sbuf,FFO_CLOSURE_DT,(char *)sql_clsr_dt.arr,0);
  			Fadd32(ptr_fml_Sbuf,FFO_EXECN_DT,(char *)sql_execn_date.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_USER_CODE,(char *)sql_usr_code.arr,0);
				/** Fadd32(ptr_fml_Sbuf,FFO_CRT_SLIP_NO,(char *)&sql_crt_slip_no,0);
				Fadd32(ptr_fml_Sbuf,FFO_CONF_SLIP_NO,(char *)&sql_conf_slip_no,0); **/
				Fadd32(ptr_fml_Sbuf,FFO_INDEX,(char *)&sql_crt_slip_no,0);
				Fadd32(ptr_fml_Sbuf,FFO_USER_INDEX,(char *)&sql_conf_slip_no,0);
				Fadd32(ptr_fml_Sbuf,FFO_AGREE_NO,(char *)sql_agree_nmbr.arr,0);
				 /** Fadd32(ptr_fml_Sbuf,FFO_DPM_NO,(char *)&sql_pon_nmbr,0);  --commented  **/
	      Fadd32(ptr_fml_Sbuf,FFO_JIFFY,(char *)&sql_pon_nmbr,0);  /**  **/

				Fadd32(ptr_fml_Sbuf,FFO_EBA_MTCH_ACT_NO,(char *)v_ucc_cd.arr,0);

				MEMSET(c_seg_code);
				MEMSET(c_plg_type);
				if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
				{
					Fadd32(ptr_fml_Sbuf,FFO_BRKR_ID,(char *)c_iwtl_dp_accnt_dpid,0);
					Fadd32(ptr_fml_Sbuf,FFO_CTCL_ID,(char *)c_iwtl_dp_accnt_clntid,0);
					strcpy(c_seg_code,"07");
				}
				else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0)
				{
					Fadd32(ptr_fml_Sbuf,FFO_BRKR_ID,(char *)c_cdsl_iwtl_dp_accnt_dpid,0);
					Fadd32(ptr_fml_Sbuf,FFO_CTCL_ID,(char *)c_cdsl_iwtl_dp_accnt_clntid,0);
					strcpy(c_seg_code,"AL");
				}

				strcpy(c_plg_type,"MR");
				d_inv_value = 0.0;

				Fadd32(ptr_fml_Sbuf,FFO_INSTRMNT_TYP,(char *)c_seg_code,0);
				Fadd32(ptr_fml_Sbuf,FFO_OPTION_TYP,(char *)c_plg_type,0);
				Fadd32(ptr_fml_Sbuf,FFO_AMOUNT,(char *)&d_inv_value,0);

				MEMSET(c_exg_id);
				MEMSET(c_cm_id);
				MEMSET(c_tm_id);


				if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
				{
					strcpy(c_exg_id,"01");
					strcpy(c_cm_id,"M50519");
					strcpy(c_tm_id,"07730");

					i_err[20] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CD,(char *)c_exg_id,0);
					i_err[21] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM,(char *)c_cm_id,0);
					i_err[22] = Fadd32(ptr_fml_Sbuf,FFO_FRWD_TM,(char *)c_tm_id,0);
          i_err[23] = Fadd32(ptr_fml_Sbuf,FFO_ACTION1,(char *)sql_dbd_dp_id.arr,0);		/** Ver 1.7 **/
          i_err[24] = Fadd32(ptr_fml_Sbuf,FFO_ACTION2,(char *)sql_dbd_dp_clnt_id.arr,0);	/** Ver 1.7 **/

				}

				if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
				{
					fn_userlog(c_ServiceName,"Calling SFO_CALL_DP ");
					i_returncode=tpcall("SFO_CALL_DP",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
				}
				else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0)
				{
					fn_userlog(c_ServiceName,"Calling SFO_CALL_DPC ");
					i_returncode=tpcall("SFO_CALL_DPC",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
				}

				fn_userlog(c_ServiceName,"After Call i_returncode : %d ",i_returncode);

				if (i_returncode == -1)
				{
					if(tperrno == TPESVCFAIL)
					{
						if(Fget32(ptr_fml_Rbuf, FFO_ERR_MSG, 0, c_err_msg, 0 ) == -1)
						{
							Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
							Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
							tpfree((char *)ptr_fml_Sbuf);
							tpfree((char *)ptr_fml_Rbuf);
							tpfree((char *)ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
						}
					}
					else
					{
						fn_errlog(c_ServiceName, "S32345", TPMSG, c_err_msg);
					}

					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
					Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
					tpfree((char *)ptr_fml_Sbuf);
					tpfree((char *)ptr_fml_Rbuf);
					tpfree((char *)ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
				}

        Fget32(ptr_fml_Rbuf,FFO_RTN_STTS,0,(char *)&sql_rtn_stts,0);
        Fget32(ptr_fml_Rbuf,FFO_ERR_CD,0,(char *)sql_err_cd.arr,0);
        Fget32(ptr_fml_Rbuf,FFO_ERR_DESC,0,(char *)sql_err_desc.arr,0);

        SETLEN(sql_err_cd);
        SETLEN(sql_err_desc);
        SETNULL(sql_err_cd);
        SETNULL(sql_err_desc);

				fn_userlog(c_ServiceName,"Status from DP :%ld:",sql_rtn_stts);	/** Changed ro ld for Ver 1.7 **/
				/** sql_rtn_stts = 0;		*** Testing purpose **/

			if( sql_rtn_stts == 0)
			{

				EXEC SQL
        	UPDATE    POD_PLG_ORDR_DTLS
        	SET       POD_ORDR_STTS       = 'I',
										POD_PRCSD_QTY				= POD_PRCSD_QTY + :sql_tifp_qty
        	WHERE     trim(POD_ORDR_NO)   = trim(:sql_pod_ref_no)
        	AND       POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
        	RETURNING
                  NVL(POD_CHANNEL,'*'),
                  NVL(POD_CONF_QTY,0),
                  NVL(POD_RJCT_QTY,0),
                  NVL(POD_BP_ID,'*')
        INTO      :c_channel,
                  :d_conf_qty,
                  :d_rjct_qty,
                  :c_bpid;

        if(SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S32350", SQLMSG, c_err_msg);
            fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

 			EXEC SQL
        INSERT INTO  PML_PLG_MOD_LOG
        (
          PML_ORDR_NO,
          PML_STCK_CD,
          PML_ORDR_QTY,
          PML_ORDR_TM,
          PML_HAIRCUT,
          PML_ORDR_VL,
          PML_ISIN_NO,
          PML_DP_CLNT_ACCNT,
          PML_DP_ACCNT,
          PML_CLNT_MTCH_ACCNT,
          PML_PLG_REV_TYP,
          PML_CONF_QTY,
          PML_RJCT_QTY,
          PML_MOD_TYPE,
          PML_STTS,
          PML_MOD_CNTR,
          PML_PLCD_SQNC,
          PML_BP_ID,
          PML_CHANNEL,
          PML_RMRKS
        )
			values
        (
          trim(:sql_pod_ref_no),
          :sql_stk_stck_cd,
          :sql_tifp_qty,
          sysdate,
          :i_haircut,
          :d_ordr_val,
          :sql_isin_nmbr,
          :sql_dbd_dp_clnt_id,
          :sql_dbd_dp_id,
          :sql_mtch_accnt,
          :sql_plg_typ,
          :d_conf_qty,
          :d_rjct_qty,
          'L',
          'I',
           0,
           0,
           :c_bpid,
           :c_channel,
           'Create TIFP Update Status'
        );

        if(SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S32355", SQLMSG, c_err_msg);
            fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
						
				EXEC SQL 
						 UPDATE ptd_tifp_dtls 
						 SET
								 ptd_leg_no = 'U1',
								 /* PTD_SLIPNO_L1 = :sql_crt_slip_no, */
								 ptd_tifp_stts = 'P',
								 ptd_tifp_run_dt = sysdate,
								 ptd_exctn_dt = :sql_execn_date,
								 ptd_run_nmbr = :sql_ptd_seq,
									 PTD_SEG_CODE = :c_seg_code
						 WHERE 
								 ptd_dp_id = :sql_dbd_dp_id
						 AND ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
						 AND ptd_isin_nmbr = :sql_isin_nmbr
						 AND PTD_DPM_NMBR = :sql_pon_nmbr
						 AND trim(ptd_pod_ref_no) = trim(:sql_pod_ref_no)
						 AND ptd_plg_rev_typ = :sql_plg_typ
						 AND ptd_tifp_stts = 'N'
						 /* AND PTD_SLIPNO_L1 is NULL */
						 AND ptd_tifp_qty = :sql_tifp_qty
						 AND rownum < 2;

					 if( SQLCODE !=0 )
					 {
						 fn_errlog( c_ServiceName, "S32360", SQLMSG, c_err_msg  );
						 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						 l_acnt_id = -1;
						 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						 tpfree ( ( char * )ptr_fml_Obuf);
						 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					 }

            /**************** Commented ***************	
						 sql_crt_slip_no = sql_crt_slip_no + 1;
            ********************************************/

						sprintf(c_msg, " Acceptance of [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/    
				
						fn_userlog(c_ServiceName,"End of Acceptance of [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr, sql_stk_stck_cd, sql_pon_nmbr);  /**  **/

						BAT_POST(c_msg);
						
				}/*end of if for return status zero from DP*/
				else
				{
						
					EXEC SQL 
							 UPDATE ptd_tifp_dtls 
							 SET
											ptd_leg_no = 'U1',
											ptd_tifp_stts = 'J',
											ptd_tifp_run_dt = sysdate,
											ptd_exctn_dt = :sql_execn_date,
											PTD_RMRKS = trim(:sql_err_desc)          /** Ver 1.6  **/
							 WHERE  ptd_dp_id = :sql_dbd_dp_id
							 AND ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
							 AND ptd_isin_nmbr = :sql_isin_nmbr
							 AND trim(ptd_pod_ref_no) = trim(:sql_pod_ref_no)
							 AND ptd_plg_rev_typ = :sql_plg_typ
							 AND ptd_tifp_stts = 'N'
							 /* AND PTD_SLIPNO_L1 is NULL */
							 AND PTD_DPM_NMBR = :sql_pon_nmbr
							 AND ptd_tifp_qty = :sql_tifp_qty
							 AND rownum < 2;

			    	 if( SQLCODE !=0 )
      			 {
        			 fn_errlog( c_ServiceName, "S32365", SQLMSG, c_err_msg  );
        			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			 l_acnt_id = -1;
        			 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			 tpfree ( ( char * )ptr_fml_Obuf);
							 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			 }
				
						 EXEC SQL 
						      UPDATE pod_plg_ordr_dtls 
									SET    pod_ordr_stts = 'J',
                         POD_RMRKS = trim(:sql_err_desc) 
						      WHERE  trim(pod_ordr_no) = trim(:sql_pod_ref_no)
                  AND    POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						      AND    pod_plg_rev_typ = :sql_plg_typ;
	
			    	 if( SQLCODE !=0 )
		   			 {
			   			 fn_errlog( c_ServiceName, "S32370", SQLMSG, c_err_msg  );
				 			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       				 l_acnt_id = -1;
       				 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       				 tpfree ( ( char * )ptr_fml_Obuf);
							 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       				 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     				 }

							fn_userlog(c_ServiceName,"Inside withdrwal rejection in requested case......");
							fn_userlog(c_ServiceName,"sql_tifp_qty [%ld]",sql_tifp_qty);
							fn_userlog(c_ServiceName,"sql_pon_nmbr [%lf]",sql_pon_nmbr);
							fn_userlog(c_ServiceName,"sql_mtch_accnt [%s]",sql_mtch_accnt.arr);
							fn_userlog(c_ServiceName,"sql_dbd_dp_id [%s]",sql_dbd_dp_id_1.arr);
							fn_userlog(c_ServiceName,"sql_dbd_dp_clnt_id [%s]",sql_dbd_dp_clnt_id.arr);
							fn_userlog(c_ServiceName,"sql_isin_nmbr [%s]",sql_isin_nmbr.arr);


						EXEC SQL
								 UPDATE ptd_tifp_dtls
								 SET    PTD_PLG_VS_WD_QTY = NVL(PTD_PLG_VS_WD_QTY,0) - :sql_tifp_qty
								 WHERE  ptd_dpm_nmbr = :sql_pon_nmbr
								 AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt                                
								 AND    ptd_dp_id           = :sql_dbd_dp_id                                     
								 AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id                               
								 AND    ptd_isin_nmbr       = :sql_isin_nmbr                                 
								 AND    ptd_plg_rev_typ = 'T'
								 AND		ptd_leg_no = 'T5'
								 AND		PTD_TIFP_STTS = 'P';
               
                if ( SQLCODE != 0 )
							  {
									fn_errlog( c_ServiceName, "S32375", SQLMSG, c_err_msg  );
									fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
									EXEC SQL CLOSE ptd_cur;
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							  }   

								if(DEBUG_MSG_LVL_3)
								{
									fn_userlog(c_ServiceName,"After plgVswthdrw update ......");
								}

							/*** Commented for combined ***
							EXEC SQL
								UPDATE  PTD_TIFP_DTLS
								SET     PTD_REPLG1_QTY     = NVL(PTD_REPLG1_QTY,0) - :sql_tifp_qty
								WHERE   trim(PTD_DPM_NMBR2)    = trim(:sql_pon_nmbr)
								AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
								AND     PTD_DP_ID             = :sql_dbd_dp_id
								AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
								AND     PTD_STCK_CD           = :sql_stk_stck_cd
								AND    ptd_isin_nmbr       = :sql_isin_nmbr
								AND     ((PTD_PLG_REV_TYP = 'W' AND PTD_LEG_NO = 'W3') OR (PTD_PLG_REV_TYP = 'I' AND PTD_LEG_NO = 'I3'))
								AND			PTD_TIFP_STTS							= 'P'; 


							if ( SQLCODE != 0 )
							{
								fn_errlog( c_ServiceName, "S32380", SQLMSG, c_err_msg  );
								fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
								EXEC SQL CLOSE ptd_cur;
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								tpfree ( ( char * )ptr_fml_Obuf);
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}

							*** Comment end **/
						
							 EXEC SQL
										DECLARE REPLG_CLOSURE1 CURSOR FOR
										SELECT  PTD_POD_REF_NO,
														PTD_TIFP_QTY,
														NVL(PTD_REPLG1_QTY,0),
														ptd_clm_mtch_accnt ,  
														ptd_dp_id ,
														ptd_dp_clnt_id ,
														ptd_isin_nmbr
										FROM    ptd_tifp_dtls 
										WHERE   trim(PTD_DPM_NMBR2)    = trim(:sql_pon_nmbr)
										AND     ptd_plg_rev_typ in ('W','I')
										AND			PTD_LEG_NO IS NULL
										AND			PTD_TIFP_STTS = 'N'
								 		AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt                                
								 		AND    ptd_dp_id           = :sql_dbd_dp_id                                     
								 		AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id                               
								 		AND    ptd_isin_nmbr       = :sql_isin_nmbr;

								/**********
								EXEC SQL
									UPDATE  PTD_TIFP_DTLS
									SET     PTD_REPLG2_QTY     = NVL(PTD_REPLG2_QTY,0) + :sql_tifp_qty
									WHERE   trim(PTD_DPM_NMBR)    = trim(:d_pon_no_pledge)
									AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
									AND     PTD_DP_ID             = :sql_dbd_dp_id
									AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
									AND     PTD_STCK_CD           = :sql_stk_stck_cd
									AND     ((PTD_PLG_REV_TYP = 'W' AND PTD_LEG_NO = 'W3') OR (PTD_PLG_REV_TYP = 'I' AND PTD_LEG_NO = 'I3'))
									AND			PTD_TIFP_STTS							= 'P'; 
								*****/

								if ( SQLCODE != 0 )
								{
									fn_errlog( c_ServiceName, "S32385", SQLMSG, c_err_msg  );
									fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									tpfree ( ( char * )ptr_fml_Obuf);
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}


								EXEC SQL OPEN REPLG_CLOSURE1;

								if ( SQLCODE != 0 )
								{
										fn_errlog(c_ServiceName, "S32390", SQLMSG, c_err_msg);
										fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
										tpfree ( ( char * )ptr_fml_Obuf);
										tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}

								qty_remaining_to_cls = sql_tifp_qty;

								while(1)
								{

									MEMSET(sql_ptd_pod_ref_no);
									MEMSET(sql_ptd_clm_mtch_accnt);
									MEMSET(sql_ptd_dp_id);
									MEMSET(sql_ptd_dp_clnt_id);
									MEMSET(sql_ptd_isin_nmbr);
									sql_ptd_tifp_qty = 0;
									sql_ptd_replg1_qty = 0;

									EXEC SQL
										FETCH REPLG_CLOSURE1
										INTO 
											:sql_ptd_pod_ref_no,
											:sql_ptd_tifp_qty,
											:sql_ptd_replg1_qty,
											:sql_ptd_clm_mtch_accnt,  
											:sql_ptd_dp_id,
											:sql_ptd_dp_clnt_id,
											:sql_ptd_isin_nmbr;

									if ( SQLCODE != 0 )
									{
										if ( SQLCODE == NO_DATA_FOUND )
										{
												EXEC SQL CLOSE REPLG_CLOSURE1;
												break;
										}
										else
										{
												EXEC SQL CLOSE REPLG_CLOSURE1;
												fn_errlog( c_ServiceName, "S32395", SQLMSG, c_err_msg  );
												fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
												fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
												break;
										}
									}

									SETLEN(sql_ptd_pod_ref_no);
									SETLEN(sql_ptd_clm_mtch_accnt);
									SETLEN(sql_ptd_dp_id);
									SETLEN(sql_ptd_dp_clnt_id);
									SETLEN(sql_ptd_isin_nmbr);

									SETNULL(sql_ptd_pod_ref_no);
									SETNULL(sql_ptd_clm_mtch_accnt);
									SETNULL(sql_ptd_dp_id);
									SETNULL(sql_ptd_dp_clnt_id);
									SETNULL(sql_ptd_isin_nmbr);

									fn_userlog(c_ServiceName,"Inside Cursor of update repledge......");
									fn_userlog(c_ServiceName,"sql_ptd_pod_ref_no [%s]",sql_ptd_pod_ref_no.arr);
									fn_userlog(c_ServiceName,"sql_ptd_clm_mtch_accnt [%s]",sql_ptd_clm_mtch_accnt.arr);
									fn_userlog(c_ServiceName,"sql_ptd_dp_id [%s]",sql_ptd_dp_id.arr);
									fn_userlog(c_ServiceName,"sql_ptd_dp_clnt_id [%s]",sql_ptd_dp_clnt_id.arr);
									fn_userlog(c_ServiceName,"sql_ptd_isin_nmbr [%s]",sql_ptd_isin_nmbr.arr);
									fn_userlog(c_ServiceName,"sql_ptd_tifp_qty :%ld:",sql_ptd_tifp_qty);
									fn_userlog(c_ServiceName,"sql_ptd_replg1_qty :%ld:",sql_ptd_replg1_qty);
									fn_userlog(c_ServiceName,"qty_remaining_to_cls :%ld:",qty_remaining_to_cls);


									if (qty_remaining_to_cls > sql_ptd_replg1_qty)
									{
										upd_qty = sql_ptd_replg1_qty;
										qty_remaining_to_cls = qty_remaining_to_cls - sql_ptd_replg1_qty;
									}
									else if (qty_remaining_to_cls <= sql_ptd_replg1_qty)
									{
										upd_qty = qty_remaining_to_cls;
										qty_remaining_to_cls  = 0;
									}
									
									EXEC SQL
										UPDATE  PTD_TIFP_DTLS
										SET     PTD_REPLG1_QTY = NVL(PTD_REPLG1_QTY,0) - :upd_qty
										WHERE   PTD_CLM_MTCH_ACCNT = :sql_ptd_clm_mtch_accnt
										AND     PTD_DP_ID = :sql_ptd_dp_id
										AND     PTD_DP_CLNT_ID = :sql_ptd_dp_clnt_id
										AND			PTD_ISIN_NMBR	= :sql_ptd_isin_nmbr
										AND			PTD_POD_REF_NO	=	:sql_ptd_pod_ref_no
										AND			trim(PTD_DPM_NMBR2)    = trim(:sql_pon_nmbr)
										AND     ((PTD_PLG_REV_TYP = 'W' AND PTD_LEG_NO IS NULL) OR (PTD_PLG_REV_TYP = 'I' AND PTD_LEG_NO IS NULL))
										AND			PTD_TIFP_STTS	= 'N'; 


										if ( SQLCODE != 0 )
										{
												fn_errlog(c_ServiceName, "S32400", SQLMSG, c_err_msg);
												EXEC SQL CLOSE REPLG_CLOSURE1;
												fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
												Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
												tpfree ( ( char * )ptr_fml_Obuf);
												tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
										}
								}

						 EXEC SQL 
						      SELECT (count(*)+1) 
						      INTO   :sql_pml_mod_cntr
						      FROM   pml_plg_mod_log
						      WHERE  pml_ordr_no = trim(:sql_pod_ref_no)
                  AND    PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						      AND    pml_mod_type in ('N','M','C','J');
	
						if( SQLCODE !=0 )
     				{
       				fn_errlog( c_ServiceName, "S32405", SQLMSG, c_err_msg  );
	       			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		     			l_acnt_id = -1;
			   			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				 			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	     				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		   			}

						EXEC SQL 
								 INSERT INTO pml_plg_mod_log
						     (
										pml_ordr_no,
						        pml_stck_cd,
						        pml_ordr_qty,
						        pml_ordr_tm,
						        pml_haircut,
						        pml_ordr_vl,
						        pml_isin_no,
						        pml_dp_clnt_accnt,
						        pml_dp_accnt,
						        pml_clnt_mtch_accnt,
						        pml_plg_rev_typ,
						        pml_conf_qty,
						        pml_rjct_qty,
						        pml_mod_type,
						        pml_stts,
						        pml_mod_cntr,
						        pml_plcd_sqnc,
						        pml_bp_id,
						        pml_channel,
						        pml_rmrks
							 	 )
						     VALUES
						     (	:sql_pod_ref_no,
	  					      :sql_stk_stck_cd,
							      :sql_tifp_qty,
							      sysdate,
							      :sql_stk_plg_haircut,		 
		 					      :sql_plg_val,
							      :sql_isin_nmbr,
							      :sql_dbd_dp_clnt_id,
							      :sql_dbd_dp_id,
							      :sql_mtch_accnt,
							      :sql_plg_typ,
							      0,
							      0,
							      'J',
							      'J',
							      :sql_pml_mod_cntr,
							      0,
							      null,
							      'SYS',
							      :sql_err_desc
								 );
					
						if( SQLCODE !=0 )
				    {
					  	fn_errlog( c_ServiceName, "S32410", SQLMSG, c_err_msg  );
						  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							l_acnt_id = -1;
	            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		          tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				    }

					}

				 tpfree((char *)ptr_fml_Sbuf);
         tpfree((char *)ptr_fml_Rbuf);

					if(DEBUG_MSG_LVL_3)
					{
          	fn_userlog(c_ServiceName,"Just before commit....");
					}

				  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
     			{
    				fn_errlog( c_ServiceName, "S32415", TPMSG, c_err_msg  );
     				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						l_acnt_id = -1;
						Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						tpfree (( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
					}

					if(DEBUG_MSG_LVL_3)
					{
          	fn_userlog(c_ServiceName,"Just after commit for match [%s]....",sql_mtch_accnt);
					}

					tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );

		}
		
		else if (sql_run_plg_typ == 'D')
		{

			MEMSET(c_pod_ref_no_plg);
			strcpy(c_pod_ref_no_plg,sql_pod_ref_no.arr);
			MEMSET(sql_pod_ref_no);

      i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

			if ( i_trnsctn == -1 )
			{
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				fn_errlog( c_ServiceName, "S32420",LIBMSG,c_err_msg);
				l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				tpfree ( ( char * )ptr_fml_Obuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			} 

			EXEC SQL SELECT PRS_PLG_REV_SEQ.nextval INTO :sql_prs_seq
			FROM DUAL;

			if (SQLCODE != 0)
			{
				fn_errlog( c_ServiceName, "S32425", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**						l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}	

			EXEC SQL 
			SELECT TO_CHAR(sysdate,'YYYYMMDD')||LPAD((PPS_PLG_SEQ+1),8,0)
			INTO :sql_pod_ordr_no
			FROM PPS_PLG_PLACED_SEQ 
			WHERE PPS_PLG_ORDR_DT = TO_DATE(TO_CHAR(sysdate,'DD-Mon-YYYY'),'DD-Mon-YYYY')
			FOR UPDATE OF PPS_PLG_SEQ;  

			if ((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
			{
				fn_errlog( c_ServiceName, "S32430", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**						l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			SETNULL(sql_pod_ordr_no);
				
			if (SQLCODE == NO_DATA_FOUND)
			{
				EXEC SQL 
				INSERT INTO PPS_PLG_PLACED_SEQ
				(PPS_PLG_SEQ,
				PPS_PLG_ORDR_DT)
				VALUES
				(1,
				TO_DATE(TO_CHAR(sysdate,'DD-Mon-YYYY'),'DD-Mon-YYYY'));
				
				if (SQLCODE != 0)
				{
					fn_errlog( c_ServiceName, "S32435", SQLMSG, c_err_msg  );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**							l_acnt_id = -1;
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				
				/**********Pledge order reference number is created**************************/
				EXEC SQL 
				SELECT TO_CHAR(sysdate,'YYYYMMDD')||LPAD(1,8,0) 
				INTO :sql_pod_ordr_no
				FROM DUAL;

				if (SQLCODE != 0)
				{
					fn_errlog( c_ServiceName, "S32440", SQLMSG, c_err_msg  );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**							l_acnt_id = -1;
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				SETNULL(sql_pod_ordr_no);

			}
			else
			{
				EXEC SQL 
				UPDATE PPS_PLG_PLACED_SEQ SET 
				PPS_PLG_SEQ = PPS_PLG_SEQ +1
				WHERE PPS_PLG_ORDR_DT = TO_DATE(TO_CHAR(sysdate,'DD-Mon-YYYY'),'DD-Mon-YYYY');
			
				if (SQLCODE != 0)
				{
					fn_errlog( c_ServiceName, "S32445", SQLMSG, c_err_msg  );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**							l_acnt_id = -1;
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}

      if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
      {
        fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
        fn_errlog( c_ServiceName, "S32450", TPMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree (( char * )ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
      }

       fn_userlog(c_ServiceName,"Inside TM CM Repledge");
        sql_ptd_seq = 0.0;

        EXEC SQL
             SELECT ptd_seq.nextval
             INTO :sql_ptd_seq
             FROM dual;

       if( SQLCODE !=0 )
        {
          fn_errlog( c_ServiceName, "S32455", SQLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

       	sql_ptm_max_slip_no = 0;
        sql_ptm_min_slip_no = 0;
        sql_ptm_current_slip_no = 0;

        i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
        if ( i_trnsctn == -1 )
        {
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          fn_errlog( c_ServiceName, "S32460",LIBMSG,c_err_msg);
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        EXEC SQL
        SELECT
        ptm_min_slip_no,
        ptm_max_slip_no,
        ptm_current_slip_no
        INTO
        :sql_ptm_min_slip_no,
        :sql_ptm_max_slip_no,
        :sql_ptm_current_slip_no
        FROM  ptm_tifp_mstr
        WHERE PTM_PLG_TYP = 'M'
        FOR   UPDATE OF ptm_current_slip_no;    

      	if( SQLCODE !=0 )
        {
          fn_errlog( c_ServiceName, "S32465", SQLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

       if((sql_ptm_current_slip_no < sql_ptm_min_slip_no)||(sql_ptm_current_slip_no > sql_ptm_max_slip_no))
        {
          sql_crt_slip_no = sql_ptm_min_slip_no;

          fn_userlog(c_ServiceName,"The number of range is [%lld]",(sql_ptm_max_slip_no - sql_ptm_min_slip_no));

          if((sql_ptm_max_slip_no - sql_ptm_min_slip_no) ==  0)
          {
            strcpy(c_err_msg,"Slip number for Withdraw is less than count.");
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        }
        else
        {
          sql_crt_slip_no = sql_ptm_current_slip_no + 1;

          fn_userlog(c_ServiceName,"The range is [%lld]",(sql_ptm_max_slip_no - sql_ptm_current_slip_no));

          if((sql_ptm_max_slip_no - sql_ptm_current_slip_no) == 0)
          {
            strcpy(c_err_msg,"Slip number for Withdraw is less than count.");
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
        }

       EXEC SQL
        UPDATE ptm_tifp_mstr
        SET    ptm_current_slip_no = :sql_crt_slip_no
        WHERE  PTM_PLG_TYP = 'M';

        if( SQLCODE !=0 )
        {
           fn_errlog( c_ServiceName, "S32470", SQLMSG, c_err_msg  );
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           l_acnt_id = -1;
           Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
           tpfree ( ( char * )ptr_fml_Obuf);
           fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
        {
          fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
          fn_errlog( c_ServiceName, "S32475", TPMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree (( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }

         sql_conf_slip_no = 0 ;

       i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
        if ( i_trnsctn == -1 )
        {
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          fn_errlog( c_ServiceName, "S32480",LIBMSG,c_err_msg);
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

        }

			MEMSET(c_seg_id);

			EXEC SQL
				SELECT NVL(PTD_DPM_NMBR1,0), NVL(PTD_DPM_NMBR2,0),NVL(DECODE(PTD_SEG_CODE,'01','C','02','F','F'),'F')
				INTO :d_pon_no_pledge,:d_pon_no_repledge1,:c_seg_id
				FROM PTD_TIFP_DTLS
				WHERE PTD_PLG_REV_TYP = 'C'
				AND PTD_TIFP_STTS = 'P'
				AND PTD_DPM_NMBR3 = :d_pon_no_repledge
				AND PTD_LEG_NO = 'C5'
				AND PTD_CLM_MTCH_ACCNT = :sql_mtch_accnt
				AND PTD_STCK_CD = :sql_stk_stck_cd
				AND PTD_DP_ID = :sql_dbd_dp_id
				AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id;

			if (SQLCODE != 0)
			{
				fn_errlog( c_ServiceName, "S32485", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**					l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			strcpy(sql_pml_channel.arr,"SYS");
			SETLEN(sql_pml_channel);
			SETNULL(sql_pml_channel);
			fn_userlog(c_ServiceName,"Value of sql_pod_ordr_no :%s:",sql_pod_ordr_no.arr);
			fn_userlog(c_ServiceName,"Value of sql_stk_stck_cd :%s:",sql_stk_stck_cd);
			fn_userlog(c_ServiceName,"Value of sql_tifp_qty :%ld:",sql_tifp_qty);
			fn_userlog(c_ServiceName,"Value of sql_isin_nmbr :%s:",sql_isin_nmbr.arr);
			fn_userlog(c_ServiceName,"Value of sql_dbd_dp_clnt_id :%s:",sql_dbd_dp_clnt_id.arr);
			fn_userlog(c_ServiceName,"Value of sql_dbd_dp_id :%s:",sql_dbd_dp_id.arr);
			fn_userlog(c_ServiceName,"Value of sql_mtch_accnt :%s:",sql_mtch_accnt.arr);
			fn_userlog(c_ServiceName,"Value of sql_run_plg_typ :%c:",sql_run_plg_typ);
			fn_userlog(c_ServiceName,"Value of sql_pod_bp_id :%s:",sql_pod_bp_id.arr);
			fn_userlog(c_ServiceName,"Value of sql_pml_channel :%s:",sql_pml_channel.arr);
			fn_userlog(c_ServiceName,"Value of c_pod_ref_no_plg :%s:",c_pod_ref_no_plg);
						
			EXEC SQL INSERT INTO POD_PLG_ORDR_DTLS
			(POD_ORDR_NO,
			POD_STCK_CD,
			POD_ORDR_QTY,
			POD_ORDR_DT,
			POD_HAIRCUT,
			POD_ORDR_VL,
			POD_ISIN_NO,
			POD_DP_CLNT_ACCNT,
			POD_DP_ACCNT,
			POD_CLNT_MTCH_ACCNT ,
			POD_PLG_REV_TYP,
			POD_ORDR_STTS,
			POD_CONF_QTY,
			POD_PRCSD_QTY,   /*******1.3*****/
			POD_RMRKS,
			POD_BP_ID,
			POD_CHANNEL,
			POD_ALLOC_TYP)   /*** ver 4.7 ***/
			VALUES
			(:sql_pod_ordr_no,
			:sql_stk_stck_cd,
			:sql_tifp_qty,
			sysdate,
			0,
			0,
			:sql_isin_nmbr,
			:sql_dbd_dp_clnt_id,
			:sql_dbd_dp_id,
			:sql_mtch_accnt,
			:sql_run_plg_typ,
			'R',
			0,
			0,              /*******1.3*****/
			null,
			:sql_pod_bp_id,
			:sql_pml_channel,
			NULL);  /*** ver 4.7 ***/ 	
				
			if (SQLCODE != 0)
			{
				fn_errlog( c_ServiceName, "S32490", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**						l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			sql_pml_mod_type ='N';
			sql_pml_mod_cntr = 1;

			fn_userlog(c_ServiceName,"Value of sql_tifp_qty :%ld:",sql_tifp_qty);	
			MEMSET(sql_pml_rmrks);

			fn_userlog(c_ServiceName,"Value of sql_pml_channel :%s:",sql_pml_channel.arr);

			EXEC SQL INSERT INTO PML_PLG_MOD_LOG
			(PML_ORDR_NO,
			PML_STCK_CD,
			PML_ORDR_QTY,
			PML_ORDR_TM,
			PML_HAIRCUT,
			PML_ORDR_VL,
			PML_ISIN_NO,
			PML_DP_CLNT_ACCNT,
			PML_DP_ACCNT,
			PML_CLNT_MTCH_ACCNT,
			PML_PLG_REV_TYP,
			PML_MOD_TYPE,
			PML_STTS,
			PML_MOD_CNTR,
			PML_PLCD_SQNC,
			PML_BP_ID,
			PML_CHANNEL,
			PML_RMRKS)
			VALUES
			(:sql_pod_ordr_no,
			:sql_stk_stck_cd,
			:sql_tifp_qty,
			sysdate,
			0,
			0,
			:sql_isin_nmbr,
			:sql_dbd_dp_clnt_id,
			:sql_dbd_dp_id,
			:sql_mtch_accnt,
			:sql_run_plg_typ,
			:sql_pml_mod_type,
			'R',
			:sql_pml_mod_cntr,
			:sql_prs_seq,	
			:sql_pod_bp_id,
			:sql_pml_channel,
			:sql_pml_rmrks);
					
			if (SQLCODE != 0)
			{
				fn_errlog( c_ServiceName, "S32495", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
/**					l_acnt_id = -1;
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );		**  Ver 1.7: Commented  ***/
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}


			EXEC SQL
				INSERT INTO PTD_TIFP_DTLS
				(
					PTD_CLM_MTCH_ACCNT,
					PTD_STCK_CD,
					PTD_TIFP_QTY,
					PTD_PLG_REV_TYP,
					PTD_ISIN_NMBR,
					PTD_DP_ID,
					PTD_DP_CLNT_ID,
					PTD_POD_REF_NO,
					PTD_TIFP_RUN_DT,
					PTD_PLG_VS_WD_QTY,
					PTD_DPM_NMBR1,
					PTD_DPM_NMBR2,
					PTD_DPM_NMBR3,
					PTD_TIFP_STTS,
					PTD_IWTL_DP_ACCNT,
					PTD_AGREE_NMBR,
					PTD_SLIPNO_L1,
					PTD_DPM_NMBR,
          PTD_CHANNEL     /** Ver 2.0 **/
				)
				VALUES
				(
					:sql_mtch_accnt,
					:sql_stk_stck_cd,
					:sql_tifp_qty,
					:sql_plg_typ,
					:sql_isin_nmbr,
					:sql_dbd_dp_id,
					:sql_dbd_dp_clnt_id,
					:sql_pod_ordr_no,
					to_date(SYSDATE,'dd-mm-yyyy hh24:mi:ss'),
					:sql_tifp_qty,
					:d_pon_no_pledge,
					:d_pon_no_repledge1,
					:d_pon_no_repledge,
					'N',
					decode(:i_dp_flg, 1,:c_cdsl_iwtl_dp_accnt,:c_iwtl_dp_accnt),
					:v_agree_no_repledge,
					:sql_crt_slip_no,
					:d_pon_no_repledge,
          :sql_pml_channel      /** Ver 2.0 **/
				);

				if ( SQLCODE != 0 )
				{
					fn_errlog( c_ServiceName, "S32500", SQLMSG, c_err_msg  );
					fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
					EXEC SQL CLOSE TIFP_CURSOR;
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpfree ( ( char * )ptr_fml_Obuf);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

			/***
				EXEC SQL
        	UPDATE  PTD_TIFP_DTLS
          SET     PTD_REPLG2_QTY     =  NVL(PTD_REPLG2_QTY,0) + :sql_tifp_qty
          WHERE   trim(PTD_DPM_NMBR)    = trim(:d_pon_no_repledge)
          AND     trim(PTD_POD_REF_NO)  = trim(:c_pod_ref_no_plg)
          AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
          AND     PTD_DP_ID             = :sql_dbd_dp_id
          AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
          AND     PTD_STCK_CD           = :sql_stk_stck_cd
          AND     PTD_PLG_REV_TYP       = 'T'; 


				if ( SQLCODE != 0 )
				{
					fn_errlog( c_ServiceName, "S32505", SQLMSG, c_err_msg  );
					fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
					EXEC SQL CLOSE TIFP_CURSOR;
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpfree ( ( char * )ptr_fml_Obuf);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				***/

			fn_userlog(c_ServiceName,"Print for Testing **");
			fn_userlog(c_ServiceName,"Value of sql_tifp_qty :%ld:",sql_tifp_qty);
			fn_userlog(c_ServiceName,"Value of d_pon_no_repledge :%lf:",d_pon_no_repledge);
			fn_userlog(c_ServiceName,"Value of c_pod_ref_no_plg :%s:",c_pod_ref_no_plg);
			fn_userlog(c_ServiceName,"Value of sql_mtch_accnt :%s:",sql_mtch_accnt.arr);
			fn_userlog(c_ServiceName,"Value of sql_dbd_dp_id :%s:",sql_dbd_dp_id.arr);
			fn_userlog(c_ServiceName,"Value of sql_dbd_dp_clnt_id :%s:",sql_dbd_dp_clnt_id.arr);
			fn_userlog(c_ServiceName,"Value of sql_stk_stck_cd :%s:",sql_stk_stck_cd);

			EXEC SQL
				UPDATE  PTD_TIFP_DTLS
				SET     PTD_PLG_VS_WD_QTY     = NVL(PTD_PLG_VS_WD_QTY,0) + :sql_tifp_qty
				WHERE   trim(PTD_DPM_NMBR)    = trim(:d_pon_no_repledge)
				/* AND     trim(PTD_POD_REF_NO)  = trim(:c_pod_ref_no_plg) */
				AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
				AND     PTD_DP_ID             = :sql_dbd_dp_id
				AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
				AND     PTD_STCK_CD           = :sql_stk_stck_cd
				AND     PTD_PLG_REV_TYP       = 'C'
				AND			PTD_LEG_NO						= 'C5'
				AND			PTD_TIFP_STTS							=	'P'; 

			if ( SQLCODE != 0 )
			{
				fn_errlog( c_ServiceName, "S32510", SQLMSG, c_err_msg  );
				fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
				EXEC SQL CLOSE TIFP_CURSOR;
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpfree ( ( char * )ptr_fml_Obuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

		 EXEC SQL
					DECLARE REPLG_CLOSURE2 CURSOR FOR
					SELECT  PTD_POD_REF_NO,
									PTD_TIFP_QTY,
									NVL(PTD_REPLG2_QTY,0),
									ptd_clm_mtch_accnt ,  
									ptd_dp_id ,
									ptd_dp_clnt_id ,
									ptd_isin_nmbr
					FROM    ptd_tifp_dtls 
					WHERE   trim(PTD_DPM_NMBR)    = trim(:d_pon_no_pledge)
					AND     ptd_plg_rev_typ in ('W','I')
					AND			PTD_LEG_NO IS NULL
					AND			PTD_TIFP_STTS = 'N'
					AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
					AND     PTD_DP_ID             = :sql_dbd_dp_id
					AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
					AND     PTD_STCK_CD           = :sql_stk_stck_cd;

			/**********
			EXEC SQL
				UPDATE  PTD_TIFP_DTLS
				SET     PTD_REPLG2_QTY     = NVL(PTD_REPLG2_QTY,0) + :sql_tifp_qty
				WHERE   trim(PTD_DPM_NMBR)    = trim(:d_pon_no_pledge)
				AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
				AND     PTD_DP_ID             = :sql_dbd_dp_id
				AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
				AND     PTD_STCK_CD           = :sql_stk_stck_cd
				AND     ((PTD_PLG_REV_TYP = 'W' AND PTD_LEG_NO = 'W3') OR (PTD_PLG_REV_TYP = 'I' AND PTD_LEG_NO = 'I3'))
				AND			PTD_TIFP_STTS							= 'P'; 
			*****/

			if ( SQLCODE != 0 )
			{
				fn_errlog( c_ServiceName, "S32515", SQLMSG, c_err_msg  );
				fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				tpfree ( ( char * )ptr_fml_Obuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}


      EXEC SQL OPEN REPLG_CLOSURE2;

 			if ( SQLCODE != 0 )
      {
          fn_errlog(c_ServiceName, "S32520", SQLMSG, c_err_msg);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			tpfree ( ( char * )ptr_fml_Obuf);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }


			qty_remaining_to_cls = sql_tifp_qty;

			while(1)
			{

				MEMSET(sql_ptd_pod_ref_no);
				MEMSET(sql_ptd_clm_mtch_accnt);
				MEMSET(sql_ptd_dp_id);
				MEMSET(sql_ptd_dp_clnt_id);
				MEMSET(sql_ptd_isin_nmbr);
				sql_ptd_tifp_qty = 0;
				sql_ptd_replg2_qty = 0;

				EXEC SQL
					FETCH REPLG_CLOSURE2
					INTO 
						:sql_ptd_pod_ref_no,
						:sql_ptd_tifp_qty,
						:sql_ptd_replg2_qty,
						:sql_ptd_clm_mtch_accnt,  
						:sql_ptd_dp_id,
						:sql_ptd_dp_clnt_id,
						:sql_ptd_isin_nmbr;

				if ( SQLCODE != 0 )
				{
					if ( SQLCODE == NO_DATA_FOUND )
					{
							EXEC SQL CLOSE REPLG_CLOSURE2;
							break;
					}
					else
					{
							EXEC SQL CLOSE REPLG_CLOSURE2;
							fn_errlog( c_ServiceName, "S32525", SQLMSG, c_err_msg  );
							fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
							fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
							break;
					}
				}

				SETLEN(sql_ptd_pod_ref_no);
				SETLEN(sql_ptd_clm_mtch_accnt);
				SETLEN(sql_ptd_dp_id);
				SETLEN(sql_ptd_dp_clnt_id);
				SETLEN(sql_ptd_isin_nmbr);

				SETNULL(sql_ptd_pod_ref_no);
				SETNULL(sql_ptd_clm_mtch_accnt);
				SETNULL(sql_ptd_dp_id);
				SETNULL(sql_ptd_dp_clnt_id);
				SETNULL(sql_ptd_isin_nmbr);

				fn_userlog(c_ServiceName,"Inside Cursor of update repledge......");
				fn_userlog(c_ServiceName,"sql_ptd_pod_ref_no [%s]",sql_ptd_pod_ref_no.arr);
				fn_userlog(c_ServiceName,"sql_ptd_clm_mtch_accnt [%s]",sql_ptd_clm_mtch_accnt.arr);
				fn_userlog(c_ServiceName,"sql_ptd_dp_id [%s]",sql_ptd_dp_id.arr);
				fn_userlog(c_ServiceName,"sql_ptd_dp_clnt_id [%s]",sql_ptd_dp_clnt_id.arr);
				fn_userlog(c_ServiceName,"sql_ptd_isin_nmbr [%s]",sql_ptd_isin_nmbr.arr);
				fn_userlog(c_ServiceName,"sql_ptd_tifp_qty :%ld:",sql_ptd_tifp_qty);
				fn_userlog(c_ServiceName,"sql_ptd_replg2_qty :%ld:",sql_ptd_replg2_qty);
				fn_userlog(c_ServiceName,"qty_remaining_to_cls :%ld:",qty_remaining_to_cls);


				if (qty_remaining_to_cls > (sql_ptd_tifp_qty - sql_ptd_replg2_qty))
				{
					upd_qty = sql_ptd_tifp_qty - sql_ptd_replg2_qty;
					qty_remaining_to_cls = qty_remaining_to_cls - (sql_ptd_tifp_qty - sql_ptd_replg2_qty);
				}
				else if (qty_remaining_to_cls <= (sql_ptd_tifp_qty - sql_ptd_replg2_qty))
				{
					upd_qty = qty_remaining_to_cls;
					qty_remaining_to_cls  = 0;
				}
				
				EXEC SQL
					UPDATE  PTD_TIFP_DTLS
					SET     PTD_REPLG2_QTY = NVL(PTD_REPLG2_QTY,0) + :upd_qty
					WHERE   PTD_CLM_MTCH_ACCNT = :sql_ptd_clm_mtch_accnt
					AND     PTD_DP_ID = :sql_ptd_dp_id
					AND     PTD_DP_CLNT_ID = :sql_ptd_dp_clnt_id
					AND			PTD_ISIN_NMBR	= :sql_ptd_isin_nmbr
					AND			PTD_POD_REF_NO	=	:sql_ptd_pod_ref_no
					AND			trim(PTD_DPM_NMBR)    = trim(:d_pon_no_pledge)
					AND     ((PTD_PLG_REV_TYP = 'W' AND PTD_LEG_NO IS NULL) OR (PTD_PLG_REV_TYP = 'I' AND PTD_LEG_NO IS NULL))
					AND			PTD_TIFP_STTS	= 'N'; 


					if ( SQLCODE != 0 )
					{
							fn_errlog(c_ServiceName, "S32530", SQLMSG, c_err_msg);
							EXEC SQL CLOSE REPLG_CLOSURE2;
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							tpfree ( ( char * )ptr_fml_Obuf);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
			}


     EXEC SQL
           DELETE FROM TEMP_PLG_RECORDS;

      if((SQLCODE !=0) && (SQLCODE!= NO_DATA_FOUND))
      {
        fn_errlog( c_ServiceName, "S32535", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree ( ( char * )ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      EXEC SQL
           INSERT INTO TEMP_PLG_RECORDS
           (
              tmp_tifp_qty,
              tmp_plg_rev_typ,
              tmp_isin_nmbr,
              tmp_dp_id,
              tmp_dp_clnt_id,
              tmp_pod_ref_no,
              tmp_stck_cd,
              tmp_clm_mtch_accnt,
              tmp_dpm_nmbr,
              tmp_agree_nmbr
           )
          (
            SELECT ptd_tifp_qty,
                   :sql_plg_typ,
                   ptd_isin_nmbr,
                   ptd_dp_id,
                   ptd_dp_clnt_id,
                   ptd_pod_ref_no,
                   ptd_stck_cd,
                   ptd_clm_mtch_accnt,
                   PTD_DPM_NMBR,
                   ptd_agree_nmbr
            FROM   ptd_tifp_dtls
            WHERE  ptd_plg_rev_typ=:sql_plg_typ
            AND    ptd_tifp_stts = 'N'
            AND    ptd_dp_id = :sql_dbd_dp_id
            AND    ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
            AND    ptd_stck_cd = :sql_stk_stck_cd
            AND    ptd_clm_mtch_accnt = :sql_mtch_accnt
            AND    ptd_pod_ref_no = :sql_pod_ordr_no
           );

				sql_tifp_qty=0;
				MEMSET(sql_isin_nmbr);
				MEMSET(sql_pod_ref_no);
				MEMSET(sql_agree_nmbr);
				MEMSET(sql_dbd_dp_id);
				MEMSET(sql_dbd_dp_clnt_id);
				memset(sql_stk_stck_cd,'\0',sizeof(sql_stk_stck_cd));
				MEMSET(sql_mtch_accnt);
				sql_pon_nmbr = 0.0;
				MEMSET(sql_err_cd);
				MEMSET(sql_err_desc);

				/****** Commented by Samip ***********/

				EXEC SQL 
						 SELECT 
				           tmp_tifp_qty,
				           tmp_isin_nmbr,
				           tmp_dp_id,
				           tmp_dp_clnt_id,
				           tmp_pod_ref_no,
				           tmp_stck_cd, 
				           tmp_clm_mtch_accnt,
				           tmp_dpm_nmbr,
				           trunc(tmp_agree_nmbr)
				     INTO 
			             :sql_tifp_qty,
			             :sql_isin_nmbr,
			             :sql_dbd_dp_id,
			             :sql_dbd_dp_clnt_id,
			             :sql_pod_ref_no,
			             :sql_stk_stck_cd,
			             :sql_mtch_accnt,
			             :sql_pon_nmbr,
			             :sql_agree_nmbr
				     FROM  TEMP_PLG_RECORDS
				     WHERE rownum < 2;

				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S32540", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				EXEC SQL 
				     DELETE FROM TEMP_PLG_RECORDS
				     WHERE rownum < 2;
				
				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S32545", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				/** Commeted *** Samip **
				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   			{
					fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
    			fn_errlog( c_ServiceName, "S32550", TPMSG, c_err_msg  );
   				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     			l_acnt_id = -1;
     			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     			tpfree (( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
				}
				*** Comment end **/
       
        /*****************************  ends *******************************/

				sql_plg_val = 0.0;

				if(DEBUG_MSG_LVL_3){
        	fn_userlog(c_ServiceName,"The tifp qty [%ld]",sql_tifp_qty);
        	fn_userlog(c_ServiceName,"The create slip number [%lld]",sql_crt_slip_no);
        	fn_userlog(c_ServiceName,"The isin nmbr [%s]",sql_isin_nmbr.arr);
        	fn_userlog(c_ServiceName,"The dp id  [%s]",sql_dbd_dp_id.arr);
        	fn_userlog(c_ServiceName,"The dp clnt acc [%s]",sql_dbd_dp_clnt_id.arr);
        	fn_userlog(c_ServiceName,"The pod ref no [%s]",sql_pod_ref_no.arr);
        	fn_userlog(c_ServiceName,"The stk code  [%s]",sql_stk_stck_cd);
        	fn_userlog(c_ServiceName,"The mtch clnt acc [%s]",sql_mtch_accnt.arr);
        	fn_userlog(c_ServiceName,"The pon nmbr  [%lf]",sql_pon_nmbr);  /**  **/
        	fn_userlog(c_ServiceName,"The agree nmbr  [%s]",sql_agree_nmbr.arr);
        }

         ptr_fml_Sbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
          if (ptr_fml_Sbuf == NULL)
          {
            fn_errlog(c_ServiceName, "S32555", TPMSG, c_err_msg);
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
            tpfree((char *)ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
          }

          ptr_fml_Rbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
          if (ptr_fml_Rbuf == NULL)
          {
            fn_errlog(c_ServiceName, "S32560", TPMSG, c_err_msg);
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
            tpfree((char *)ptr_fml_Obuf);
            tpfree((char *)ptr_fml_Sbuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
          }
				
				strcpy((char *)sql_usr_code.arr,"EBA");
        strcpy((char *)temp,"PCL");
        sql_clsr_typ = 'U';  
        SETLEN(sql_usr_code);

				/***
				Fadd32(ptr_fml_Sbuf,FFO_OPERATION_TYP, (char *)&sql_oprn_typ,0);
				Fadd32(ptr_fml_Sbuf,FFO_CLSR_TYP, (char *)&sql_clsr_typ,0);
				Fadd32(ptr_fml_Sbuf,FFO_PLEDGE_TYP, (char *)temp,0);
				Fadd32(ptr_fml_Sbuf,FFO_DPID,(char *)sql_dbd_dp_id.arr,0);	
				Fadd32(ptr_fml_Sbuf,FFO_DP_CLNT_ID,(char *)sql_dbd_dp_clnt_id.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_ISIN_NMBR, (char *)sql_isin_nmbr.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_PLG_QTY,(char *)&sql_tifp_qty,0);
				Fadd32(ptr_fml_Sbuf,FFO_CLOSURE_DT,(char *)sql_clsr_dt.arr,0);
  			Fadd32(ptr_fml_Sbuf,FFO_EXECN_DT,(char *)sql_execn_date.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_USER_CODE,(char *)sql_usr_code.arr,0);
				Fadd32(ptr_fml_Sbuf,FFO_INDEX,(char *)&sql_crt_slip_no,0);
				Fadd32(ptr_fml_Sbuf,FFO_USER_INDEX,(char *)&sql_conf_slip_no,0);
				Fadd32(ptr_fml_Sbuf,FFO_AGREE_NO,(char *)sql_agree_nmbr.arr,0);
	      Fadd32(ptr_fml_Sbuf,FFO_JIFFY,(char *)&sql_pon_nmbr,0);

				Fadd32(ptr_fml_Sbuf,FFO_EBA_MTCH_ACT_NO,(char *)v_ucc_cd.arr,0);

				MEMSET(c_seg_code);
				MEMSET(c_plg_type);
				if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
				{
					Fadd32(ptr_fml_Sbuf,FFO_BRKR_ID,(char *)c_iwtl_dp_accnt_dpid,0);
					Fadd32(ptr_fml_Sbuf,FFO_CTCL_ID,(char *)c_iwtl_dp_accnt_clntid,0);
					strcpy(c_seg_code,"07");
				}
				else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0)
				{
					Fadd32(ptr_fml_Sbuf,FFO_BRKR_ID,(char *)c_cdsl_iwtl_dp_accnt_dpid,0);
					Fadd32(ptr_fml_Sbuf,FFO_CTCL_ID,(char *)c_cdsl_iwtl_dp_accnt_clntid,0);
					strcpy(c_seg_code,"AL");
				}

				strcpy(c_plg_type,"MC");
				d_inv_value = 0.0;

				Fadd32(ptr_fml_Sbuf,FFO_INSTRMNT_TYP,(char *)c_seg_code,0);
				Fadd32(ptr_fml_Sbuf,FFO_OPTION_TYP,(char *)c_plg_type,0);
				Fadd32(ptr_fml_Sbuf,FFO_AMOUNT,(char *)&d_inv_value,0);

				MEMSET(c_exg_id);
				MEMSET(c_cm_id);
				MEMSET(c_tm_id);


				if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
				{
					strcpy(c_exg_id,"01");
					strcpy(c_cm_id,"M50519");
					strcpy(c_tm_id,"07730");

					i_err[20] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CD,(char *)c_exg_id,0);
					i_err[21] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM,(char *)c_cm_id,0);
					i_err[22] = Fadd32(ptr_fml_Sbuf,FFO_FRWD_TM,(char *)c_tm_id,0);
          i_err[23] = Fadd32(ptr_fml_Sbuf,FFO_ACTION1,(char *)sql_dbd_dp_id.arr,0);		** Ver 1.7 **
          i_err[24] = Fadd32(ptr_fml_Sbuf,FFO_ACTION2,(char *)sql_dbd_dp_clnt_id.arr,0);	** Ver 1.7 **

				}

				if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
				{
					fn_userlog(c_ServiceName,"Calling SFO_CALL_DP ");
					i_returncode=tpcall("SFO_CALL_DP",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
				}
				else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0)
				{
					fn_userlog(c_ServiceName,"Calling SFO_CALL_DPC ");
					i_returncode=tpcall("SFO_CALL_DPC",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
				}

				fn_userlog(c_ServiceName,"After Call i_returncode : %d ",i_returncode);

				if (i_returncode == -1)
				{
					if(tperrno == TPESVCFAIL)
					{
						if(Fget32(ptr_fml_Rbuf, FFO_ERR_MSG, 0, c_err_msg, 0 ) == -1)
						{
							Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
							Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
							tpfree((char *)ptr_fml_Sbuf);
							tpfree((char *)ptr_fml_Rbuf);
							tpfree((char *)ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
						}
					}
					else
					{
						fn_errlog(c_ServiceName, "S32565", TPMSG, c_err_msg);
					}

					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
					Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
					tpfree((char *)ptr_fml_Sbuf);
					tpfree((char *)ptr_fml_Rbuf);
					tpfree((char *)ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
				}

        Fget32(ptr_fml_Rbuf,FFO_RTN_STTS,0,(char *)&sql_rtn_stts,0);
        Fget32(ptr_fml_Rbuf,FFO_ERR_CD,0,(char *)sql_err_cd.arr,0);
        Fget32(ptr_fml_Rbuf,FFO_ERR_DESC,0,(char *)sql_err_desc.arr,0);

        SETLEN(sql_err_cd);
        SETLEN(sql_err_desc);
        SETNULL(sql_err_cd);
        SETNULL(sql_err_desc);

				fn_userlog(c_ServiceName,"Status from DP :%ld:",sql_rtn_stts);
	*******/

			sql_rtn_stts = 0;		/*** Hard Coded Success value for CC-CM Closure case **/

			if( sql_rtn_stts == 0)
			{

				EXEC SQL
        	UPDATE    POD_PLG_ORDR_DTLS
        	SET       POD_ORDR_STTS       = 'I',
										POD_PRCSD_QTY				= POD_PRCSD_QTY + :sql_tifp_qty
        	WHERE     trim(POD_ORDR_NO)   = trim(:sql_pod_ref_no)
        	AND       POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
        	RETURNING
                  NVL(POD_CHANNEL,'*'),
                  NVL(POD_CONF_QTY,0),
                  NVL(POD_RJCT_QTY,0),
                  NVL(POD_BP_ID,'*')
        INTO      :c_channel,
                  :d_conf_qty,
                  :d_rjct_qty,
                  :c_bpid;

        if(SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S32570", SQLMSG, c_err_msg);
            fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

 			EXEC SQL
        INSERT INTO  PML_PLG_MOD_LOG
        (
          PML_ORDR_NO,
          PML_STCK_CD,
          PML_ORDR_QTY,
          PML_ORDR_TM,
          PML_HAIRCUT,
          PML_ORDR_VL,
          PML_ISIN_NO,
          PML_DP_CLNT_ACCNT,
          PML_DP_ACCNT,
          PML_CLNT_MTCH_ACCNT,
          PML_PLG_REV_TYP,
          PML_CONF_QTY,
          PML_RJCT_QTY,
          PML_MOD_TYPE,
          PML_STTS,
          PML_MOD_CNTR,
          PML_PLCD_SQNC,
          PML_BP_ID,
          PML_CHANNEL,
          PML_RMRKS
        )
			values
        (
          trim(:sql_pod_ref_no),
          :sql_stk_stck_cd,
          :sql_tifp_qty,
          sysdate,
          :i_haircut,
          :d_ordr_val,
          :sql_isin_nmbr,
          :sql_dbd_dp_clnt_id,
          :sql_dbd_dp_id,
          :sql_mtch_accnt,
          :sql_plg_typ,
          :d_conf_qty,
          :d_rjct_qty,
          'L',
          'I',
           0,
           0,
           :c_bpid,
           :c_channel,
           'Create TIFP Update Status'
        );

        if(SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S32575", SQLMSG, c_err_msg);
            fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
						
				EXEC SQL 
						 UPDATE ptd_tifp_dtls 
						 SET
								 ptd_leg_no = 'D1',
								 /* PTD_SLIPNO_L1 = :sql_crt_slip_no, */
								 ptd_tifp_stts = 'P',
								 ptd_tifp_run_dt = sysdate,
								 ptd_exctn_dt = :sql_execn_date,
								 ptd_run_nmbr = :sql_ptd_seq
						 WHERE 
								 ptd_dp_id = :sql_dbd_dp_id
						 AND ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
						 AND ptd_isin_nmbr = :sql_isin_nmbr
						 AND PTD_DPM_NMBR = :sql_pon_nmbr
						 AND trim(ptd_pod_ref_no) = trim(:sql_pod_ref_no)
						 AND ptd_plg_rev_typ = :sql_plg_typ
						 AND ptd_tifp_stts = 'N'
						 /* AND PTD_SLIPNO_L1 is NULL */
						 AND ptd_tifp_qty = :sql_tifp_qty
						 AND rownum < 2;

					 if( SQLCODE !=0 )
					 {
						 fn_errlog( c_ServiceName, "S32580", SQLMSG, c_err_msg  );
						 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						 l_acnt_id = -1;
						 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						 tpfree ( ( char * )ptr_fml_Obuf);
						 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					 }

					/****
					EXEC SQL
						SELECT SEQ_REPLG_DTLS.NEXTVAL
						INTO :l_run_no
						FROM DUAL;

					 if( SQLCODE !=0 )
					 {
						 fn_errlog( c_ServiceName, "S32585", SQLMSG, c_err_msg  );
						 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						 l_acnt_id = -1;
						 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						 tpfree ( ( char * )ptr_fml_Obuf);
						 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					 }
					****/

					/* c_seg_id = 'C'; **/

					MEMSET(v_nse_stock_cd);

					EXEC SQL
						SELECT SEM_MAP_VL
						INTO :v_nse_stock_cd
						FROM SEM_STCK_MAP
						WHERE SEM_STCK_CD = :sql_stk_stck_cd
						AND SEM_ENTTY = 1;

				 if( SQLCODE !=0 )
				 {
					 fn_errlog( c_ServiceName, "S32590", SQLMSG, c_err_msg  );
					 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					 l_acnt_id = -1;
					 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					 tpfree ( ( char * )ptr_fml_Obuf);
					 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				 }

					SETLEN(v_nse_stock_cd);
					SETNULL(v_nse_stock_cd);

					 EXEC SQL
						 INSERT INTO RRD_REPLG_RELESE_DTLS(
							RRD_DATE,
							RRD_OPERATION_TYP,
							RRD_RUN_NMBR,
							RRD_SEG_ID,
							RRD_CM_CD,
							RRD_COLL_TYP,
							RRD_INS_TYP,
							RRD_INS_ID,
							RRD_DP_CD,
							RRD_STCK_CD,
							RRD_QNTY,
							RRD_AMNT,
							RRD_ISIN_NO,
							RRD_TM_CODE,
							RRD_CLNT_CD,
							RRD_BANK_CD,
							RRD_DPM3_NO,
							RRD_DP_ID,
							RRD_FUNG_FLG,
							RRD_STTS_FLG,
							RRD_STTS_READ_FLG)
						VALUES
						 (TRUNC(SYSDATE),
						 'R',
						 :l_run_no,
						 :c_seg_id,
						 DECODE(:c_seg_id,'F','M50519','C','07730'),
						 'ABC',
						 'SDP',
						 NULL,
						 'NSDL',
						 :v_nse_stock_cd,
						 :sql_tifp_qty,
						 'NA',
						 :sql_isin_nmbr,
						 '07730',
						 :v_ucc_cd,
						 'NA',
						 :sql_pon_nmbr,
						 'IN303028',
						 'N',
						 NULL,
						 NULL);


					 if( SQLCODE !=0 )
					 {
						 fn_errlog( c_ServiceName, "S32595", SQLMSG, c_err_msg  );
						 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						 l_acnt_id = -1;
						 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						 tpfree ( ( char * )ptr_fml_Obuf);
						 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					 }


            /**************** Commented ***************	
						 sql_crt_slip_no = sql_crt_slip_no + 1;
            ********************************************/

						sprintf(c_msg, " Acceptance of [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/    
				
						fn_userlog(c_ServiceName,"End of Acceptance of [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr, sql_stk_stck_cd, sql_pon_nmbr);  /**  **/

						BAT_POST(c_msg);
						
				}/*end of if for return status zero from DP*/
				else
				{
						
					EXEC SQL 
							 UPDATE ptd_tifp_dtls 
							 SET
											ptd_leg_no = 'U1',
											ptd_tifp_stts = 'J',
											ptd_tifp_run_dt = sysdate,
											ptd_exctn_dt = :sql_execn_date,
											PTD_RMRKS = trim(:sql_err_desc)          /** Ver 1.6  **/
							 WHERE  ptd_dp_id = :sql_dbd_dp_id
							 AND ptd_dp_clnt_id = :sql_dbd_dp_clnt_id
							 AND ptd_isin_nmbr = :sql_isin_nmbr
							 AND trim(ptd_pod_ref_no) = trim(:sql_pod_ref_no)
							 AND ptd_plg_rev_typ = :sql_plg_typ
							 AND ptd_tifp_stts = 'N'
							 /* AND PTD_SLIPNO_L1 is NULL */
							 AND PTD_DPM_NMBR = :sql_pon_nmbr
							 AND ptd_tifp_qty = :sql_tifp_qty
							 AND rownum < 2;

			    	 if( SQLCODE !=0 )
      			 {
        			 fn_errlog( c_ServiceName, "S32600", SQLMSG, c_err_msg  );
        			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			 l_acnt_id = -1;
        			 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			 tpfree ( ( char * )ptr_fml_Obuf);
							 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			 }
				
						 EXEC SQL 
						      UPDATE pod_plg_ordr_dtls 
									SET    pod_ordr_stts = 'J',
                         POD_RMRKS = trim(:sql_err_desc) 
						      WHERE  trim(pod_ordr_no) = trim(:sql_pod_ref_no)
                  AND    POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						      AND    pod_plg_rev_typ = :sql_plg_typ;
	
			    	 if( SQLCODE !=0 )
		   			 {
			   			 fn_errlog( c_ServiceName, "S32605", SQLMSG, c_err_msg  );
				 			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       				 l_acnt_id = -1;
       				 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       				 tpfree ( ( char * )ptr_fml_Obuf);
							 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       				 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     				 }

							fn_userlog(c_ServiceName,"Inside withdrwal rejection in requested case......");
							fn_userlog(c_ServiceName,"sql_tifp_qty [%ld]",sql_tifp_qty);
							fn_userlog(c_ServiceName,"sql_pon_nmbr [%lf]",sql_pon_nmbr);
							fn_userlog(c_ServiceName,"sql_mtch_accnt [%s]",sql_mtch_accnt.arr);
							fn_userlog(c_ServiceName,"sql_dbd_dp_id [%s]",sql_dbd_dp_id_1.arr);
							fn_userlog(c_ServiceName,"sql_dbd_dp_clnt_id [%s]",sql_dbd_dp_clnt_id.arr);
							fn_userlog(c_ServiceName,"sql_isin_nmbr [%s]",sql_isin_nmbr.arr);


						EXEC SQL
								 UPDATE ptd_tifp_dtls
								 SET    PTD_PLG_VS_WD_QTY = NVL(PTD_PLG_VS_WD_QTY,0) - :sql_tifp_qty
								 WHERE  ptd_dpm_nmbr = :sql_pon_nmbr
								 AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt                                
								 AND    ptd_dp_id           = :sql_dbd_dp_id                                     
								 AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id                               
								 AND    ptd_isin_nmbr       = :sql_isin_nmbr                                 
								 AND    ptd_plg_rev_typ = 'C'
								 AND		ptd_leg_no = 'C5'
								 AND		PTD_TIFP_STTS = 'P';
               
                if ( SQLCODE != 0 )
							  {
									fn_errlog( c_ServiceName, "S32610", SQLMSG, c_err_msg  );
									fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
									EXEC SQL CLOSE ptd_cur;
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							  }   

								if(DEBUG_MSG_LVL_3)
								{
									fn_userlog(c_ServiceName,"After plgVswthdrw update ......");
								}


							/*** Commented for conbined ***
							EXEC SQL
								UPDATE  PTD_TIFP_DTLS
								SET     PTD_REPLG2_QTY     = NVL(PTD_REPLG2_QTY,0) - :sql_tifp_qty
								WHERE   trim(PTD_DPM_NMBR3)    = trim(:sql_pon_nmbr)
								AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
								AND     PTD_DP_ID             = :sql_dbd_dp_id
								AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
								AND     PTD_STCK_CD           = :sql_stk_stck_cd
								AND    ptd_isin_nmbr       = :sql_isin_nmbr
								AND     ((PTD_PLG_REV_TYP = 'W' AND PTD_LEG_NO = 'W3') OR (PTD_PLG_REV_TYP = 'I' AND PTD_LEG_NO = 'I3'))
								AND			PTD_TIFP_STTS							= 'P'; 


							if ( SQLCODE != 0 )
							{
								fn_errlog( c_ServiceName, "S32615", SQLMSG, c_err_msg  );
								fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
								EXEC SQL CLOSE ptd_cur;
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								tpfree ( ( char * )ptr_fml_Obuf);
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
							** Comment ends ***/
	
						 EXEC SQL
									DECLARE REPLG_CLOSURE3 CURSOR FOR
									SELECT  PTD_POD_REF_NO,
													PTD_TIFP_QTY,
													NVL(PTD_REPLG2_QTY,0),
													ptd_clm_mtch_accnt ,  
													ptd_dp_id ,
													ptd_dp_clnt_id ,
													ptd_isin_nmbr
									FROM    ptd_tifp_dtls 
									WHERE   trim(PTD_DPM_NMBR3) = trim(:sql_pon_nmbr)
									AND     ptd_plg_rev_typ in ('W','I')
									AND			PTD_LEG_NO IS NULL
									AND			PTD_TIFP_STTS = 'N'
								 	AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt                                
								 	AND    ptd_dp_id           = :sql_dbd_dp_id                                     
								 	AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id                               
								 	AND    ptd_isin_nmbr       = :sql_isin_nmbr;


							if ( SQLCODE != 0 )
							{
								fn_errlog( c_ServiceName, "S32620", SQLMSG, c_err_msg  );
								fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								tpfree ( ( char * )ptr_fml_Obuf);
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}


							EXEC SQL OPEN REPLG_CLOSURE3;

							if ( SQLCODE != 0 )
							{
									fn_errlog(c_ServiceName, "S32625", SQLMSG, c_err_msg);
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
									tpfree ( ( char * )ptr_fml_Obuf);
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}


							qty_remaining_to_cls = sql_tifp_qty;

							while(1)
							{

								MEMSET(sql_ptd_pod_ref_no);
								MEMSET(sql_ptd_clm_mtch_accnt);
								MEMSET(sql_ptd_dp_id);
								MEMSET(sql_ptd_dp_clnt_id);
								MEMSET(sql_ptd_isin_nmbr);
								sql_ptd_tifp_qty = 0;
								sql_ptd_replg2_qty = 0;

								EXEC SQL
									FETCH REPLG_CLOSURE3
									INTO 
										:sql_ptd_pod_ref_no,
										:sql_ptd_tifp_qty,
										:sql_ptd_replg2_qty,
										:sql_ptd_clm_mtch_accnt,  
										:sql_ptd_dp_id,
										:sql_ptd_dp_clnt_id,
										:sql_ptd_isin_nmbr;

								if ( SQLCODE != 0 )
								{
									if ( SQLCODE == NO_DATA_FOUND )
									{
											EXEC SQL CLOSE REPLG_CLOSURE3;
											break;
									}
									else
									{
											EXEC SQL CLOSE REPLG_CLOSURE3;
											fn_errlog( c_ServiceName, "S32630", SQLMSG, c_err_msg  );
											fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
											fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
											break;
									}
								}

								SETLEN(sql_ptd_pod_ref_no);
								SETLEN(sql_ptd_clm_mtch_accnt);
								SETLEN(sql_ptd_dp_id);
								SETLEN(sql_ptd_dp_clnt_id);
								SETLEN(sql_ptd_isin_nmbr);

								SETNULL(sql_ptd_pod_ref_no);
								SETNULL(sql_ptd_clm_mtch_accnt);
								SETNULL(sql_ptd_dp_id);
								SETNULL(sql_ptd_dp_clnt_id);
								SETNULL(sql_ptd_isin_nmbr);

								fn_userlog(c_ServiceName,"Inside Cursor of update repledge......");
								fn_userlog(c_ServiceName,"sql_ptd_pod_ref_no [%s]",sql_ptd_pod_ref_no.arr);
								fn_userlog(c_ServiceName,"sql_ptd_clm_mtch_accnt [%s]",sql_ptd_clm_mtch_accnt.arr);
								fn_userlog(c_ServiceName,"sql_ptd_dp_id [%s]",sql_ptd_dp_id.arr);
								fn_userlog(c_ServiceName,"sql_ptd_dp_clnt_id [%s]",sql_ptd_dp_clnt_id.arr);
								fn_userlog(c_ServiceName,"sql_ptd_isin_nmbr [%s]",sql_ptd_isin_nmbr.arr);
								fn_userlog(c_ServiceName,"sql_ptd_tifp_qty :%ld:",sql_ptd_tifp_qty);
								fn_userlog(c_ServiceName,"sql_ptd_replg2_qty :%ld:",sql_ptd_replg2_qty);
								fn_userlog(c_ServiceName,"qty_remaining_to_cls :%ld:",qty_remaining_to_cls);


								if (qty_remaining_to_cls > sql_ptd_replg2_qty)
								{
									upd_qty = sql_ptd_replg2_qty;
									qty_remaining_to_cls = qty_remaining_to_cls - sql_ptd_replg2_qty;
								}
								else if (qty_remaining_to_cls <= sql_ptd_replg2_qty)
								{
									upd_qty = qty_remaining_to_cls;
									qty_remaining_to_cls  = 0;
								}
								
								EXEC SQL
									UPDATE  PTD_TIFP_DTLS
									SET     PTD_REPLG2_QTY = NVL(PTD_REPLG2_QTY,0) - :upd_qty
									WHERE   PTD_CLM_MTCH_ACCNT = :sql_ptd_clm_mtch_accnt
									AND     PTD_DP_ID = :sql_ptd_dp_id
									AND     PTD_DP_CLNT_ID = :sql_ptd_dp_clnt_id
									AND			PTD_ISIN_NMBR	= :sql_ptd_isin_nmbr
									AND			PTD_POD_REF_NO	=	:sql_ptd_pod_ref_no
									AND			trim(PTD_DPM_NMBR3) = trim(:sql_pon_nmbr)
									AND     ((PTD_PLG_REV_TYP = 'W' AND PTD_LEG_NO IS NULL) OR (PTD_PLG_REV_TYP = 'I' AND PTD_LEG_NO IS NULL))
									AND			PTD_TIFP_STTS	= 'N'; 


									if ( SQLCODE != 0 )
									{
											fn_errlog(c_ServiceName, "S32635", SQLMSG, c_err_msg);
											EXEC SQL CLOSE REPLG_CLOSURE3;
											fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
											Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
											tpfree ( ( char * )ptr_fml_Obuf);
											tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
									}
							}


						 EXEC SQL 
						      SELECT (count(*)+1) 
						      INTO   :sql_pml_mod_cntr
						      FROM   pml_plg_mod_log
						      WHERE  pml_ordr_no = trim(:sql_pod_ref_no)
                  AND    PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						      AND    pml_mod_type in ('N','M','C','J');
	
						if( SQLCODE !=0 )
     				{
       				fn_errlog( c_ServiceName, "S32640", SQLMSG, c_err_msg  );
	       			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		     			l_acnt_id = -1;
			   			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				 			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	     				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		   			}

						EXEC SQL 
								 INSERT INTO pml_plg_mod_log
						     (
										pml_ordr_no,
						        pml_stck_cd,
						        pml_ordr_qty,
						        pml_ordr_tm,
						        pml_haircut,
						        pml_ordr_vl,
						        pml_isin_no,
						        pml_dp_clnt_accnt,
						        pml_dp_accnt,
						        pml_clnt_mtch_accnt,
						        pml_plg_rev_typ,
						        pml_conf_qty,
						        pml_rjct_qty,
						        pml_mod_type,
						        pml_stts,
						        pml_mod_cntr,
						        pml_plcd_sqnc,
						        pml_bp_id,
						        pml_channel,
						        pml_rmrks
							 	 )
						     VALUES
						     (	:sql_pod_ref_no,
	  					      :sql_stk_stck_cd,
							      :sql_tifp_qty,
							      sysdate,
							      :sql_stk_plg_haircut,		 
		 					      :sql_plg_val,
							      :sql_isin_nmbr,
							      :sql_dbd_dp_clnt_id,
							      :sql_dbd_dp_id,
							      :sql_mtch_accnt,
							      :sql_plg_typ,
							      0,
							      0,
							      'J',
							      'J',
							      :sql_pml_mod_cntr,
							      0,
							      null,
							      'SYS',
							      :sql_err_desc
								 );
					
						if( SQLCODE !=0 )
				    {
					  	fn_errlog( c_ServiceName, "S32645", SQLMSG, c_err_msg  );
						  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							l_acnt_id = -1;
	            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		          tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				    }

					}

				 tpfree((char *)ptr_fml_Sbuf);
         tpfree((char *)ptr_fml_Rbuf);

					if(DEBUG_MSG_LVL_3)
					{
          	fn_userlog(c_ServiceName,"Just before commit....");
					}

				  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
     			{
    				fn_errlog( c_ServiceName, "S32650", TPMSG, c_err_msg  );
     				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						l_acnt_id = -1;
						Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						tpfree (( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
					}

					if(DEBUG_MSG_LVL_3)
					{
          	fn_userlog(c_ServiceName,"Just after commit for match [%s]....",sql_mtch_accnt);
					}

					tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );

		}
		else if ((sql_plg_typ == 'W' && sql_run_plg_typ == 'X') || (sql_plg_typ == 'I' && sql_run_plg_typ == 'J'))	/** Ver 1.7 **/
		{
			fn_userlog(c_ServiceName,"No acion to be followed for sql_plg_typ :%c: and sql_run_plg_typ :%c:",sql_plg_typ,sql_run_plg_typ);
			tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );
		}
		
		/** End for ver 1.7 **/
		else
		{
			strcpy(c_err_msg,"Invalid Pledge Type" );
    	fn_errlog ( c_ServiceName, "S32655", DEFMSG, c_err_msg);
    	tpfree ( ( char * )ptr_fml_Obuf);
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}
		break;
		/******************Confirmation Section*******************/
		case 'C':

		if( sql_plg_typ == 'P')
		{

			i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  		if ( i_trnsctn == -1 )
  		{
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		fn_errlog( c_ServiceName, "S32660",LIBMSG,c_err_msg);
    		l_acnt_id = -1;
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    		tpfree ( ( char * )ptr_fml_Obuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

			EXEC SQL 
			DELETE FROM TEMP_PLG_RECORDS;
			
			if(( SQLCODE !=0) && (SQLCODE!= NO_DATA_FOUND))
  		{
    		fn_errlog( c_ServiceName, "S32665", SQLMSG, c_err_msg  );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		l_acnt_id = -1;
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}
		
				EXEC SQL INSERT INTO TEMP_PLG_RECORDS
				(TMP_TIFP_QTY, 
				TMP_PLG_REV_TYP,
				TMP_ISIN_NMBR,
				TMP_DP_ID,
				TMP_DP_CLNT_ID,
				TMP_POD_REF_NO,
				TMP_STCK_CD,
				TMP_CLM_MTCH_ACCNT,
				TMP_SLIPNO_L1)
				( SELECT 
				PTD_TIFP_QTY,
				'P',
				PTD_ISIN_NMBR,
				PTD_DP_ID,
				PTD_DP_CLNT_ID,
				PTD_POD_REF_NO,
				PTD_STCK_CD,
				PTD_CLM_MTCH_ACCNT,
				PTD_SLIPNO_L1
				FROM PTD_TIFP_DTLS 
				WHERE PTD_PLG_REV_TYP='P' 
				AND PTD_TIFP_STTS = 'P' 
				AND PTD_LEG_NO = 'L1');

				if( SQLCODE !=0 )
  			{
    			fn_errlog( c_ServiceName, "S32670", SQLMSG, c_err_msg  );
    			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			l_acnt_id = -1;
    			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  			}

			if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   		{
				fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
    		fn_errlog( c_ServiceName, "S32675", TPMSG, c_err_msg  );
   			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     		l_acnt_id = -1;
     		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     		tpfree (( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
			}	

			EXEC SQL 
			SELECT COUNT(*) 
			INTO :l_rec_cnt
			FROM TEMP_PLG_RECORDS;

			if( l_rec_cnt == 0 )
			{
				strcpy(c_err_msg,"There are no records for Pledge Confirmation status");
				BAT_POST(c_err_msg);
				fn_userlog(c_ServiceName,"There are no records for Pledge Confirmation status");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			fn_userlog( c_ServiceName,"[%ld] number of records for Pledge Confirmation",l_rec_cnt);

			for (i = 0; i < l_rec_cnt; i++)
			{

       fn_userlog(c_ServiceName,"Processing record :%d: of total records :%ld:",i+1,l_rec_cnt);

				fn_userlog(c_ServiceName,"Before begin 1");
				i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  			if ( i_trnsctn == -1 )
  			{
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			fn_errlog( c_ServiceName, "S32680",LIBMSG,c_err_msg);
    			l_acnt_id = -1;
    			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    			tpfree ( ( char * )ptr_fml_Obuf);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}
				
				sql_tifp_qty=0;
				MEMSET(sql_isin_nmbr);
				MEMSET(sql_pod_ref_no);
				MEMSET(sql_mtch_accnt);
				MEMSET(sql_plg_stts);
				sql_pon_nmbr = 0.0; /**  **/
				MEMSET(sql_err_cd);
				MEMSET(sql_err_desc);
				MEMSET(sql_rej_desc);
				MEMSET(c_conf_date);  /* ver 1.7 */


				EXEC SQL 
				SELECT TMP_TIFP_QTY, TMP_ISIN_NMBR, TMP_DP_ID,
				TMP_DP_CLNT_ID, TMP_POD_REF_NO,	TMP_STCK_CD,
				TMP_CLM_MTCH_ACCNT,	TMP_SLIPNO_L1 
				INTO :sql_tifp_qty, :sql_isin_nmbr, :sql_dbd_dp_id,
				:sql_dbd_dp_clnt_id, :sql_pod_ref_no, :sql_stk_stck_cd,
				:sql_mtch_accnt, :sql_creation_slip_no
				FROM TEMP_PLG_RECORDS
				where rownum < 2;
		
				if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND) 
				{
					fn_errlog( c_ServiceName, "S32685", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				if(SQLCODE == NO_DATA_FOUND)
				{
					break;
				}

				fn_userlog(c_ServiceName,"Value of sql_tifp_qty :%ld",sql_tifp_qty);
				fn_userlog(c_ServiceName,"Value of sql_isin_nmbr :%s",sql_isin_nmbr.arr);
				fn_userlog(c_ServiceName,"Value of sql_dbd_dp_id :%s",sql_dbd_dp_id.arr);
				fn_userlog(c_ServiceName,"Value of sql_dbd_dp_clnt_id :%s",sql_dbd_dp_clnt_id.arr);
				fn_userlog(c_ServiceName,"Value of sql_pod_ref_no :%s",sql_pod_ref_no.arr);
				fn_userlog(c_ServiceName,"Value of sql_stk_stck_cd :%s",sql_stk_stck_cd);
				fn_userlog(c_ServiceName,"Value of sql_mtch_accnt :%s",sql_mtch_accnt.arr);
				fn_userlog(c_ServiceName,"Value of sql_creation_slip_no :%lld",sql_creation_slip_no);
				
				EXEC SQL 
				DELETE FROM TEMP_PLG_RECORDS
				WHERE ROWNUM < 2;
				
				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S32690", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				
				sql_plg_val = 0.0;
	
				EXEC SQL 
				SELECT LTQ_PLG_RT
			  INTO :sql_plg_val
				FROM LTQ_TRD_QT
				WHERE LTQ_STCK_CD = :sql_stk_stck_cd
				AND LTQ_XCHNG_CD = 'BSE';  
		
				if(SQLCODE !=0 ) 
       	{
       		fn_errlog( c_ServiceName, "S32695", SQLMSG, c_err_msg  );
         	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         	l_acnt_id = -1;
         	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
         	tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );           
         	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
					
        i_returncode = fn_get_haircut(c_ServiceName ,
                                      sql_mtch_accnt.arr,
                                      sql_stk_stck_cd,
                                      &sql_stk_plg_haircut,
                                      c_err_msg);

        if(i_returncode == -1)
        {
          fn_errlog( c_ServiceName, "S32700", LIBMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

				sql_plg_val = (sql_tifp_qty * (sql_plg_val *(1 - ((double)(sql_stk_plg_haircut)/100))))*100; /** diwa typecast of float made double **/
				
				if((long long)(sql_plg_val  * 100)%100 > 50)
				{
					sql_plg_val = sql_plg_val + 1.0;
					fn_userlog( c_ServiceName, "The rounded off amount is [%lf]", sql_plg_val);
				}
				
				ll_plg_val = (long long) sql_plg_val;

				sql_plg_val = (double) ll_plg_val;

				ptr_fml_Sbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
				if (ptr_fml_Sbuf == NULL)
				{
					fn_errlog(c_ServiceName, "S32705", TPMSG, c_err_msg);
					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
					Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
					tpfree((char *)ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
				}
					
				ptr_fml_Rbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
				if (ptr_fml_Rbuf == NULL)
				{
					fn_errlog(c_ServiceName, "S32710", TPMSG, c_err_msg);
					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
					Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
					tpfree((char *)ptr_fml_Obuf);
					tpfree((char *)ptr_fml_Sbuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );			
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
				}
					
				strcpy((char *)sql_usr_code.arr,"EBA");	
				strcpy((char *)temp,"PCR");
				sql_clsr_typ = 'U';
				SETLEN(sql_usr_code);
				fn_userlog(c_ServiceName,"After Buffer Allocation");

				i_err [0] = Fadd32( ptr_fml_Sbuf,FFO_OPERATION_TYP, (char *)&sql_oprn_typ,0);
				i_err [1] = Fadd32( ptr_fml_Sbuf, FFO_PLEDGE_TYP, (char *)temp,0);
				/** i_err [2] = Fadd32(ptr_fml_Sbuf,FFO_CRT_SLIP_NO,(char *)&sql_creation_slip_no,0); **/
				i_err [2] = Fadd32(ptr_fml_Sbuf,FFO_INDEX,(char *)&sql_creation_slip_no,0);
				i_err [3] = Fadd32(ptr_fml_Sbuf,FFO_USER_CODE,(char *)sql_usr_code.arr,0);

				for ( j=0; j <= 3; j++ )
				{
					if ( i_err[ j ] == -1 )
          {
						fn_errlog(c_ServiceName, "S32715", TPMSG, c_err_msg);
						Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
						Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
						tpfree((char *)ptr_fml_Obuf);
						tpfree((char *)ptr_fml_Sbuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );					
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
          }
				}



          if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0) /** Changed '2' to '1' in  **/
          {
            fn_userlog(c_ServiceName,"Calling SFO_CALL_DP ");
            i_returncode=tpcall("SFO_CALL_DP",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
          }
          else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0) /** Changed '2' to '1' in  **/
          {
            fn_userlog(c_ServiceName,"Calling SFO_CALL_DPC ");
            i_returncode=tpcall("SFO_CALL_DPC",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
          }

          fn_userlog(c_ServiceName,"After Call i_returncode : %d ",i_returncode);

          if (i_returncode == -1)
          {
            if(tperrno == TPESVCFAIL)
            {
              if(Fget32(ptr_fml_Rbuf, FFO_ERR_MSG, 0, c_err_msg, 0 ) == -1)
              {
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
                tpfree((char *)ptr_fml_Sbuf);
                tpfree((char *)ptr_fml_Rbuf);
                tpfree((char *)ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
              }
            }
            else
            {
              fn_errlog(c_ServiceName, "S32720", TPMSG, c_err_msg);
            }

            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
            tpfree((char *)ptr_fml_Sbuf);
            tpfree((char *)ptr_fml_Rbuf);
            tpfree((char *)ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
          }


				Fget32(ptr_fml_Rbuf,FFO_PLG_STTS,0,(char *)sql_plg_stts.arr,0);
				/**Fget32(ptr_fml_Rbuf,FFO_DPM_NO,0,(char *)&sql_pon_nmbr,0); --commented  **/
				Fget32(ptr_fml_Rbuf,FFO_JIFFY,0,(char *)&sql_pon_nmbr,0);  /** **/
				Fget32(ptr_fml_Rbuf,FFO_RTN_STTS,0,(char *)&sql_rtn_stts,0);
				Fget32(ptr_fml_Rbuf,FFO_ERR_CD,0,(char *)sql_err_cd.arr,0);
				Fget32(ptr_fml_Rbuf,FFO_ERR_DESC,0,(char *)sql_err_desc.arr,0);
				Fget32(ptr_fml_Rbuf,FFO_REJ_DESC,0,(char *)sql_rej_desc.arr,0);
			  Fget32(ptr_fml_Rbuf,FFO_RCRD_DT,0,(char *)c_conf_date.arr,0); /*ver 1.7  */
				SETLEN(sql_plg_stts);
				SETLEN(sql_err_cd);
				SETLEN(sql_err_desc);
				SETLEN(sql_rej_desc);
				SETLEN(c_conf_date);  /*ver 1.7*/

	
				fn_userlog(c_ServiceName,"The plg stts [%s]",sql_plg_stts.arr);
				fn_userlog(c_ServiceName,"The pon nmbr [%lf]",sql_pon_nmbr);  /**  **/
				fn_userlog(c_ServiceName,"The rtn stts [%ld]",sql_rtn_stts);
				fn_userlog(c_ServiceName,"The err code [%s]",sql_err_cd.arr);
				fn_userlog(c_ServiceName,"The err desc [%s]",sql_err_desc.arr);
				fn_userlog(c_ServiceName,"The rej desc [%s]",sql_rej_desc.arr);
				fn_userlog(c_ServiceName,"The confirmation date form DP is [%s]",c_conf_date.arr);/*ver 1.7 */

    /*** Ver 1.5 Starts ***/

    i_valid_pon = 0;

    if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
    {
      MEMSET(c_pon_num);
      sprintf(c_pon_num.arr,"%lf",sql_pon_nmbr);
      SETLEN(c_pon_num);
      SETNULL(c_pon_num);

      fn_userlog(c_ServiceName,"The pon nmbr string is :%s:",c_pon_num.arr);

      if( strncmp (c_pon_num.arr,"1",1) == 0 )
      {
         i_valid_pon = 1;
      }
      else 
      {
         i_valid_pon = 0;
      }
    }
    else
      {
         i_valid_pon = 1;
      }

    fn_userlog(c_ServiceName,"The valid pon flag is :%d:",i_valid_pon);

    /*** Ver 1.5 Ends ***/
  

	/********* On Successful Pledge Confirmation Response (sql_rtn_stts from DP will be 0)*************/
	/*Also there should be valid Pledge Order Number from DP and the status returned should be "PCN"
	for the pledge to considered as successfully confirmed*/

					if( sql_rtn_stts == 0 && sql_pon_nmbr != 0 && (strcmp(sql_plg_stts.arr,"PCN")==0)&& i_valid_pon == 1 ) /* i_valid_pon added in Ver 1.5 */
					{
						fn_userlog(c_ServiceName, "Inside Pledge Confirmation Acceptance" );
						sql_plg_vs_wd_qty = 0;	
						fn_userlog(c_ServiceName, "VAlue of c_conf_date :%s:",c_conf_date.arr);
						fn_userlog(c_ServiceName, "VAlue of sql_pon_nmbr :%lf:",sql_pon_nmbr);
						fn_userlog(c_ServiceName, "VAlue of sql_dbd_dp_id :%s:",sql_dbd_dp_id.arr);
						fn_userlog(c_ServiceName, "VAlue of sql_dbd_dp_clnt_id :%s:",sql_dbd_dp_clnt_id.arr);
						fn_userlog(c_ServiceName, "VAlue of sql_isin_nmbr :%s:",sql_isin_nmbr.arr);
						fn_userlog(c_ServiceName, "VAlue of sql_creation_slip_no :%lld:",sql_creation_slip_no);
            fn_userlog(c_ServiceName, "The valid pon flag is :%d:",i_valid_pon);     /*** Ver 1.5 ***/

						EXEC SQL 
						UPDATE PTD_TIFP_DTLS SET
						PTD_LEG_NO = 'L5',
						PTD_TIFP_RUN_DT = sysdate,
					/*	PTD_EXCTN_DT =:sql_execn_date,--commented for the ver 1.7 */
						PTD_EXCTN_DT =:c_conf_date ,    /* ver 1.7 */
						PTD_DPM_NMBR = :sql_pon_nmbr,
						PTD_DPM_NMBR1 = :sql_pon_nmbr,			/*** 1.7 **/
            PTD_RMRKS = 'Success'                /** Ver 1.6  **/
						WHERE PTD_DP_ID = :sql_dbd_dp_id
						AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
						AND PTD_ISIN_NMBR = :sql_isin_nmbr
						AND PTD_PLG_REV_TYP = 'P'
						AND PTD_TIFP_STTS = 'P'
						AND PTD_SLIPNO_L1 = :sql_creation_slip_no;
						/** RETURNING NVL(PTD_PLG_VS_WD_QTY,0)
						INTO :sql_plg_vs_wd_qty; **/

			    	if( SQLCODE !=0 )
      			{
        			fn_errlog( c_ServiceName, "S32725", SQLMSG, c_err_msg  );
        			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			l_acnt_id = -1;
        			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			}
						
						EXEC SQL 
						UPDATE POD_PLG_ORDR_DTLS SET
						POD_ORDR_STTS = 'C',
            POD_RMRKS = 'Success'
						WHERE trim(POD_ORDR_NO) = TRIM(:sql_pod_ref_no)
            AND    POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND POD_PLG_REV_TYP = 'P';

			    	if( SQLCODE !=0 )
      			{
        			fn_errlog( c_ServiceName, "S32730", SQLMSG, c_err_msg  );
        			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			l_acnt_id = -1;
        			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			}

					EXEC SQL 
					SELECT (COUNT(*)+1) 
					INTO :sql_pml_mod_cntr
					FROM PML_PLG_MOD_LOG
					WHERE PML_ORDR_NO = TRIM(:sql_pod_ref_no)
          AND    PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
					AND PML_MOD_TYPE IN ('N','M','C','J');
	
					if( SQLCODE !=0 )
     			{
       			fn_errlog( c_ServiceName, "S32735", SQLMSG, c_err_msg  );
       			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       			l_acnt_id = -1;
       			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       			tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );           
       			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     			}


					EXEC SQL 
					INSERT INTO PML_PLG_MOD_LOG
					(PML_ORDR_NO,
					PML_STCK_CD,
					PML_ORDR_QTY,
					PML_ORDR_TM,
					PML_HAIRCUT,
					PML_ORDR_VL,
					PML_ISIN_NO,
					PML_DP_CLNT_ACCNT,
					PML_DP_ACCNT,
					PML_CLNT_MTCH_ACCNT,
					PML_PLG_REV_TYP,
					PML_CONF_QTY,
					PML_RJCT_QTY,
					PML_MOD_TYPE,
					PML_STTS,
					PML_MOD_CNTR,
					PML_PLCD_SQNC,
					PML_BP_ID,
					PML_CHANNEL,
					PML_RMRKS)
					VALUES
					(	:sql_pod_ref_no,
  				:sql_stk_stck_cd,
					:sql_tifp_qty,
					sysdate,
					:sql_stk_plg_haircut,		 
 					:sql_plg_val,
					:sql_isin_nmbr,
					:sql_dbd_dp_clnt_id,
					:sql_dbd_dp_id,
					:sql_mtch_accnt,
					'P',
					0,
					0,
					'L',
					'C',
					:sql_pml_mod_cntr,
					0,
					null,
					'SYS',
					'Pledge Confirmed');
					
					if( SQLCODE !=0 )
          {
          	fn_errlog( c_ServiceName, "S32740", SQLMSG, c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );       
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

					EXEC SQL 
					UPDATE PPS_PLG_PSTN SET
					PPS_L1_POS = PPS_L1_POS - :sql_tifp_qty,
					PPS_L5_POS = PPS_L5_POS + :sql_tifp_qty,
         	PPS_PLG_REV_FLG = 'P'
					WHERE PPS_STCK_CD = :sql_stk_stck_cd
					AND    pps_clm_mtch_accnt = :sql_mtch_accnt   /**  added **/
         	AND PPS_DP_ACCNT = :sql_dbd_dp_id
         	AND PPS_DP_CLNT_ACCNT = :sql_dbd_dp_clnt_id;
					
					if(SQLCODE !=0)
         	{
           	fn_errlog( c_ServiceName, "S32745", SQLMSG, c_err_msg  );
           	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           	l_acnt_id = -1;
           	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
           	tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
           	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         	}

					EXEC SQL INSERT INTO PPL_PLG_PSTN_LOG
					(PPL_CLM_MTCH_ACCNT,
					PPL_STCK_CD,
					PPL_L1_POS_CHG,
					PPL_L5_POS_CHG,
					PPL_NET_POS_CHG,
					PPL_AVG_PVAL_CHG,
					PPL_PLG_REV_FLG,
					PPL_RMRKS)
					VALUES
					(	:sql_mtch_accnt,
				 	:sql_stk_stck_cd,
         	-:sql_tifp_qty,
				 	:sql_tifp_qty,
					:sql_tifp_qty,
				 	:sql_plg_val,
					'P',
					'Pledge Leg 5'
					);
				
					if( SQLCODE !=0 )
          {
          	fn_errlog( c_ServiceName, "S32750", SQLMSG, c_err_msg  );
           	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           	l_acnt_id = -1;
           	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
           	tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
           	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

					EXEC SQL 
					SELECT  DBD_TOT_QTY , DBD_QTY_BLCKD,
					NVL(DBD_REV_COV_QTY,0), NVL(DBD_INV_COV_QTY,0)
          INTO :sql_dbd_tot_qty, :sql_dbd_qty_blckd,
					:sql_dbd_rev_cov_qty, :sql_dbd_inv_cov_qty
					FROM DBD_DP_BLCK_DTLS
					WHERE DBD_CLM_MTCH_ACCNT = :sql_mtch_accnt 
					AND DBD_DP_ID = :sql_dbd_dp_id
          AND DBD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
          AND DBD_STCK_CD = :sql_stk_stck_cd;

					if( SQLCODE !=0 )
          {
						fn_errlog( c_ServiceName, "S32755", SQLMSG, c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

				 	EXEC SQL
              UPDATE DBD_DP_BLCK_DTLS SET
              DBD_SAM_BLCKD_QTY = DBD_SAM_BLCKD_QTY + :sql_tifp_qty,
							DBD_PLG_REQ_QTY = DBD_PLG_REQ_QTY - :sql_tifp_qty
              WHERE DBD_DP_ID = :sql_dbd_dp_id
              AND DBD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
              AND dbd_clm_mtch_accnt = :sql_mtch_accnt
              AND DBD_STCK_CD = :sql_stk_stck_cd;

              if( SQLCODE !=0 )
              {
                fn_errlog( c_ServiceName, "S32760", SQLMSG, c_err_msg  );
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                l_acnt_id = -1;
                Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
                tpfree ( ( char * )ptr_fml_Obuf);
                /** EXEC SQL CLOSE POD_REV_CURSOR; **/
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              }

					/*****Check if any Withdraw Cover quantity exist*************************/

					/*** Added for Limit part ***/
          MEMSET(sql_fab_bnk_accnt);
 
          /** Ver 1.4 Starts **/
          /*** Checking Request type in POD Table***/

          EXEC SQL
          select NVL(POD_ALLOC_TYP,'N') 
          into   :sql_req_typ
          from   POD_PLG_ORDR_DTLS
          where  POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
          AND    POD_DP_ACCNT      = :sql_dbd_dp_id
          AND    POD_DP_CLNT_ACCNT = :sql_dbd_dp_clnt_id
          AND    POD_STCK_CD       = :sql_stk_stck_cd
          AND    trim(POD_ORDR_NO)   = trim(:sql_pod_ref_no);

          if (SQLCODE != 0)
          {
            fn_errlog( c_ServiceName, "S32765", SQLMSG, c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
          
          /** Ver 1.4 Ends **/

					/** Added for Ver 1.8 **/
					if(sql_req_typ == 'N')
					{
						sql_req_typ = 'E';
					}
					/** End for Ver 1.8 **/
					/**** Commented for Ver 1.8 *****
          if(sql_req_typ == 'N')  *** If condition added for NWB in Ver 1.4 **
          {
            EXEC SQL
            UPDATE FAB_FO_ALC_BFT_SMRY SET
            FAB_NWB_AMT = nvl(FAB_NWB_AMT,0) + :sql_plg_val
            WHERE FAB_CLM_MTCH_ACCNT = :sql_mtch_accnt
            RETURNING FAB_BNK_ACCNT,FAB_ALCTD_AMT,FAB_BFT_AMT
            INTO :sql_fab_bnk_accnt,:sql_fab_alctd_amt,:sql_fab_bft_amt;

            if ((SQLCODE != 0) && (SQLCODE !=NO_DATA_FOUND)) 
            {
              fn_errlog( c_ServiceName, "S32770", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              tpfree ( ( char * )ptr_fml_Obuf);
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

            SETNULL(sql_fab_bnk_accnt);
  
	  				if(SQLCODE  == NO_DATA_FOUND)
            {
              EXEC SQL SELECT CLB_BNK_ACCT_NMBR
              INTO :sql_fab_bnk_accnt
              FROM CLB_BNK_ACCTS
              WHERE CLB_CLM_MTCH_ACCNT = :sql_mtch_accnt;

              if (SQLCODE != 0)
              {
                fn_errlog( c_ServiceName, "S32775", SQLMSG, c_err_msg  );
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                tpfree ( ( char * )ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              }

              SETNULL(sql_fab_bnk_accnt);

			   			EXEC SQL INSERT INTO FAB_FO_ALC_BFT_SMRY
              (FAB_CLM_MTCH_ACCNT,
               FAB_BNK_ACCNT,
               FAB_ALCTD_AMT,
               FAB_BFT_AMT,
               FAB_PLG_AMT,
               FAB_NWB_AMT
              VALUES
              (:sql_mtch_accnt,
               :sql_fab_bnk_accnt,
               0,
               0,
               0,
               :sql_plg_val
                );    

              if (SQLCODE != 0)
              {
                fn_errlog( c_ServiceName, "S32780", SQLMSG, c_err_msg  );
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                tpfree ( ( char * )ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              }

              sql_fab_alctd_amt = 0;
              sql_fab_bft_amt = 0;

	  				}


            EXEC SQL INSERT INTO FAL_FO_ALCBFT_LOG
            (FAL_CLM_MTCH_ACCNT,
             FAL_BNK_ACCNT,
             FAL_ALCTD_AMT,
             FAL_BFT_AMT,
             FAL_TRN_DT,
             FAL_OLD_PLG_AMT,
             FAL_NARRATION,
             FAL_NWB_AMT,
             FAL_NWB_CHG_AMT)
             VALUES
             (:sql_mtch_accnt,
              :sql_fab_bnk_accnt,
              :sql_fab_alctd_amt,
              :sql_fab_bft_amt,
              sysdate,
              :sql_fab_plg_amt,
              'PL',
              :sql_fab_nwb_amt,
              :sql_plg_val);

					  if (SQLCODE != 0)
            {
              fn_errlog( c_ServiceName, "S32785", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              tpfree( ( char * )ptr_fml_Obuf);
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

          } ** 1.4 End for NWB part **

					*** Comment ends for Ver 1.8 ***/

          /*** Ver 1.4 Starts ***/
          /** FNO **/

        if(sql_req_typ == 'F')
        {
          EXEC SQL
          UPDATE FAB_FO_ALC_BFT_SMRY SET
          FAB_PLG_AMT = nvl(FAB_PLG_AMT,0) + :sql_plg_val
          WHERE FAB_CLM_MTCH_ACCNT = :sql_mtch_accnt
          RETURNING FAB_BNK_ACCNT,FAB_ALCTD_AMT,FAB_BFT_AMT
          INTO :sql_fab_bnk_accnt,:sql_fab_alctd_amt,:sql_fab_bft_amt;

          if ((SQLCODE != 0) && (SQLCODE !=NO_DATA_FOUND))
          {
             fn_errlog( c_ServiceName, "S32790", SQLMSG, c_err_msg  );
             Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
             tpfree ( ( char * )ptr_fml_Obuf);
             fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
             tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

          SETNULL(sql_fab_bnk_accnt);


          if(SQLCODE  == NO_DATA_FOUND)
          {
             EXEC SQL SELECT CLB_BNK_ACCT_NMBR
             INTO :sql_fab_bnk_accnt
             FROM CLB_BNK_ACCTS
             WHERE CLB_CLM_MTCH_ACCNT = :sql_mtch_accnt;

             if (SQLCODE != 0)
             {
                fn_errlog( c_ServiceName, "S32795", SQLMSG, c_err_msg  );
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                tpfree ( ( char * )ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
             }
             
              /**ver 2.2 start**/
             MEMSET(c_ucc_cd);
             EXEC SQL
             SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
             INTO :c_ucc_cd
             FROM  CLM_CLNT_MSTR
             WHERE CLM_MTCH_ACCNT =:sql_mtch_accnt;
            
             if (SQLCODE != 0)
             {
                fn_errlog( c_ServiceName, "S32800", SQLMSG, c_err_msg  );
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                tpfree ( ( char * )ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
             } 
             rtrim(c_ucc_cd); 
             /**ver 2.2 ends **/

             SETNULL(sql_fab_bnk_accnt);

             EXEC SQL INSERT INTO FAB_FO_ALC_BFT_SMRY
             (FAB_CLM_MTCH_ACCNT,
              FAB_BNK_ACCNT,
              FAB_ALCTD_AMT,
              FAB_BFT_AMT,
              FAB_PLG_AMT,
              FAB_NWB_AMT,
              FAB_UCC_CD) /**ver 2.2 **/
              VALUES
              (:sql_mtch_accnt,
               :sql_fab_bnk_accnt,
               0,
               0,
               :sql_plg_val,
               0,
               :c_ucc_cd);


             if (SQLCODE != 0)
             {
                fn_errlog( c_ServiceName, "S32805", SQLMSG, c_err_msg  );
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                tpfree ( ( char * )ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
             }

             sql_fab_alctd_amt = 0;
             sql_fab_bft_amt = 0;
          }

          EXEC SQL INSERT INTO FAL_FO_ALCBFT_LOG
          (FAL_CLM_MTCH_ACCNT,
           FAL_BNK_ACCNT,
           FAL_ALCTD_AMT,
           FAL_BFT_AMT,
           FAL_TRN_DT,
           FAL_OLD_PLG_AMT,
           FAL_PLG_CHG_AMT,
           FAL_NARRATION,
           FAL_NWB_AMT)
           VALUES
           (:sql_mtch_accnt,
            :sql_fab_bnk_accnt,
            :sql_fab_alctd_amt,
            :sql_fab_bft_amt,
            sysdate,
            :sql_fab_plg_amt,
            :sql_plg_val,
            'PL',
            :sql_fab_nwb_amt
            );

           if (SQLCODE != 0)
           {
               fn_errlog( c_ServiceName, "S32810", SQLMSG, c_err_msg  );
               Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
               tpfree ( ( char * )ptr_fml_Obuf);
               fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
               tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
           }

      }

     /** Equity **/
    if(sql_req_typ == 'E')
    {
      EXEC SQL
      UPDATE EAB_EQ_ALC_BFT_SMRY SET
      EAB_PLG_AMT = nvl(EAB_PLG_AMT,0) + :sql_plg_val/100
      WHERE EAB_CLM_MTCH_ACCNT = :sql_mtch_accnt;
 
      if ((SQLCODE != 0) && (SQLCODE !=NO_DATA_FOUND))
      {
         fn_errlog( c_ServiceName, "S32815", SQLMSG, c_err_msg  );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         tpfree ( ( char * )ptr_fml_Obuf);
         fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }


      if(SQLCODE  == NO_DATA_FOUND)
      {
         EXEC SQL
         INSERT INTO EAB_EQ_ALC_BFT_SMRY
         ( EAB_CLM_MTCH_ACCNT,
           EAB_PLG_AMT
         )
         VALUES
         (:sql_mtch_accnt,
          :sql_plg_val/100
         );

         if (SQLCODE != 0)
         {
           fn_errlog( c_ServiceName, "S32820", SQLMSG, c_err_msg  );
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           tpfree ( ( char * )ptr_fml_Obuf);
           fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }

      }

      EXEC SQL
      INSERT INTO EAL_EQ_ALCBFT_LOG
      (EAL_CLM_MTCH_ACCNT,
       EAL_TRN_DT,
       EAL_OLD_PLG_AMT,
       EAL_PLG_CHG_AMT,
       EAL_NARRATION
      )
      VALUES
      (:sql_mtch_accnt,
       sysdate,
       :sql_fab_plg_amt/100,
       :sql_plg_val/100,
       'PL'
      );

      if (SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S32825", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpfree ( ( char * )ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      EXEC SQL
      SELECT COUNT(1)
      into   :i_fab_exist
      FROM   FAB_FO_ALC_BFT_SMRY
      WHERE  FAB_CLM_MTCH_ACCNT = :sql_mtch_accnt;

      if (SQLCODE != 0)
      {
        fn_errlog( c_ServiceName, "S32830", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpfree ( ( char * )ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if ( i_fab_exist == 0 )
      {
         MEMSET(sql_fab_bnk_accnt);
   
         EXEC  SQL 
         SELECT CLB_BNK_ACCT_NMBR
         INTO   :sql_fab_bnk_accnt
         FROM   CLB_BNK_ACCTS
         WHERE  CLB_CLM_MTCH_ACCNT = :sql_mtch_accnt;

         if (SQLCODE != 0)
         {
           fn_errlog( c_ServiceName, "S32835", SQLMSG, c_err_msg  );
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           tpfree ( ( char * )ptr_fml_Obuf);
           fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }

         SETLEN(sql_fab_bnk_accnt);  
         SETNULL(sql_fab_bnk_accnt);
  
          /**ver 2.2 starts**/
          MEMSET(c_ucc_cd);
          EXEC SQL
          SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
          INTO :c_ucc_cd
          FROM  CLM_CLNT_MSTR
          WHERE CLM_MTCH_ACCNT =:sql_mtch_accnt;
      
          if (SQLCODE != 0)
         {
           fn_errlog( c_ServiceName, "S32840", SQLMSG, c_err_msg  );
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           tpfree ( ( char * )ptr_fml_Obuf);
           fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }
         rtrim(c_ucc_cd); 
         /** ver 2.2 ends**/
         
         EXEC SQL 
         INSERT INTO FAB_FO_ALC_BFT_SMRY
         (FAB_CLM_MTCH_ACCNT,
          FAB_BNK_ACCNT,
          FAB_ALCTD_AMT,
          FAB_BFT_AMT,
          FAB_PLG_AMT,
          FAB_NWB_AMT,
          FAB_UCC_CD) /**ver 2.2 **/
         VALUES
         (:sql_mtch_accnt,
          :sql_fab_bnk_accnt,
          0,
          0,
          0,
          0,
          :c_ucc_cd); /**ver 2.2 **/

         if (SQLCODE != 0)
         {
           fn_errlog( c_ServiceName, "S32845", SQLMSG, c_err_msg  );
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           tpfree ( ( char * )ptr_fml_Obuf);
           fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }
      } 
    }

            /*** ver 1.4 end ***/
     /***  Ver 1.9 starts */
    if (sql_req_typ == 'C') /* Currency Ver 1.9 */
    {
          EXEC SQL
          UPDATE CAB_CDX_ALC_BFT_SMRY
          SET    CAB_PLG_AMT = nvl(CAB_PLG_AMT,0) + (:sql_plg_val/100)
          WHERE  CAB_CLM_MTCH_ACCNT = :sql_mtch_accnt
          RETURNING CAB_BNK_ACCNT,
                    CAB_ALCTD_AMT,
                    CAB_BFT_AMT
          INTO :sql_fab_bnk_accnt,
               :sql_fab_alctd_amt,
               :sql_fab_bft_amt;

          if ((SQLCODE != 0) && (SQLCODE !=NO_DATA_FOUND))
          {
             fn_errlog( c_ServiceName, "S32850", SQLMSG, c_err_msg  );
             Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
             tpfree ( ( char * )ptr_fml_Obuf);
             fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
             tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

          SETNULL(sql_fab_bnk_accnt);

          if(SQLCODE  == NO_DATA_FOUND)
          {
             EXEC SQL
             SELECT CLB_BNK_ACCT_NMBR
             INTO   :sql_fab_bnk_accnt
             FROM   CLB_BNK_ACCTS
             WHERE  CLB_CLM_MTCH_ACCNT = :sql_mtch_accnt;

             if (SQLCODE != 0)
             {
                fn_errlog( c_ServiceName, "S32855", SQLMSG, c_err_msg  );
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                tpfree ( ( char * )ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
             }

             SETNULL(sql_fab_bnk_accnt);

             EXEC SQL INSERT INTO CAB_CDX_ALC_BFT_SMRY
             (CAB_CLM_MTCH_ACCNT,
              CAB_BNK_ACCNT,
              CAB_ALCTD_AMT,
              CAB_BFT_AMT,
              CAB_PLG_AMT )
              VALUES
              (:sql_mtch_accnt,
               :sql_fab_bnk_accnt,
               0,
               0,
               :sql_plg_val/100
               );

             if (SQLCODE != 0)
             {
                fn_errlog( c_ServiceName, "S32860", SQLMSG, c_err_msg  );
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                tpfree ( ( char * )ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
             }

             sql_fab_alctd_amt = 0;
             sql_fab_bft_amt = 0;
          }

          EXEC SQL INSERT INTO CAL_CDX_ALCBFT_LOG
          (CAL_CLM_MTCH_ACCNT,
           CAL_BNK_ACCNT,
           CAL_ALCTD_AMT,
           CAL_BFT_AMT,
           CAL_TRN_DT,
           CAL_OLD_PLG_AMT,
           CAL_PLG_CHG_AMT,
           CAL_NARRATION)
           VALUES
           (:sql_mtch_accnt,
            :sql_fab_bnk_accnt,
            :sql_fab_alctd_amt,
            :sql_fab_bft_amt,
            sysdate,
            :sql_fab_plg_amt,
            :sql_plg_val/100,
            'PL'
            );

           if (SQLCODE != 0)
           {
              fn_errlog( c_ServiceName, "S32865", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              tpfree ( ( char * )ptr_fml_Obuf);
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
           }
    }

    if (sql_req_typ == 'X')
    {

          EXEC SQL
          UPDATE CAB_COD_ALC_BFT_SMRY
          SET    CAB_PLG_AMT = nvl(CAB_PLG_AMT,0) + :sql_plg_val
          WHERE  CAB_CLM_MTCH_ACCNT = :sql_mtch_accnt
          RETURNING CAB_BNK_ACCNT,
                    CAB_ALCTD_AMT,
                    CAB_BFT_AMT
          INTO :sql_fab_bnk_accnt,
               :sql_fab_alctd_amt,
               :sql_fab_bft_amt;

          if ((SQLCODE != 0) && (SQLCODE !=NO_DATA_FOUND))
          {
             fn_errlog( c_ServiceName, "S32870", SQLMSG, c_err_msg  );
             Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
             tpfree ( ( char * )ptr_fml_Obuf);
             fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
             tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

          SETNULL(sql_fab_bnk_accnt);

          if(SQLCODE  == NO_DATA_FOUND)
          {
             EXEC SQL
             SELECT CLB_BNK_ACCT_NMBR
             INTO   :sql_fab_bnk_accnt
             FROM   CLB_BNK_ACCTS
             WHERE  CLB_CLM_MTCH_ACCNT = :sql_mtch_accnt;

             if (SQLCODE != 0)
             {
                fn_errlog( c_ServiceName, "S32875", SQLMSG, c_err_msg  );
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                tpfree ( ( char * )ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
             }

             SETNULL(sql_fab_bnk_accnt);

             EXEC SQL INSERT INTO CAB_COD_ALC_BFT_SMRY
             (CAB_CLM_MTCH_ACCNT,
              CAB_BNK_ACCNT,
              CAB_ALCTD_AMT,
              CAB_BFT_AMT,
              CAB_PLG_AMT )
              VALUES
              (:sql_mtch_accnt,
               :sql_fab_bnk_accnt,
               0,
               0,
               :sql_plg_val
               );

             if (SQLCODE != 0)
             {
                fn_errlog( c_ServiceName, "S32880", SQLMSG, c_err_msg  );
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                tpfree ( ( char * )ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
             }

             sql_fab_alctd_amt = 0;
             sql_fab_bft_amt = 0;
          }

          EXEC SQL INSERT INTO CAL_COD_ALCBFT_LOG
          (CAL_CLM_MTCH_ACCNT,
           CAL_BNK_ACCNT,
           CAL_ALCTD_AMT,
           CAL_BFT_AMT,
           CAL_TRN_DT,
           CAL_OLD_PLG_AMT,
           CAL_PLG_CHG_AMT,
           CAL_NARRATION)
           VALUES
           (:sql_mtch_accnt,
            :sql_fab_bnk_accnt,
            :sql_fab_alctd_amt,
            :sql_fab_bft_amt,
            sysdate,
            :sql_fab_plg_amt,
            :sql_plg_val,
            'PL'
            );

           if (SQLCODE != 0)
           {
              fn_errlog( c_ServiceName, "S32885", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              tpfree ( ( char * )ptr_fml_Obuf);
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }
    }
    /****** Ver 1.9 ends ******/
					/*** End of Limit part ***/
          /*** Added for Ver 2.1 **/
          i_returncode = fn_get_prev_sam(c_ServiceName,
                                        sql_mtch_accnt.arr,
                                        c_err_msg);

          if (i_returncode != 0)
          {
              fn_errlog( c_ServiceName, "S32890", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              tpfree ( ( char * )ptr_fml_Obuf);
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
					/** End for Ver 2.1 **/

					/*** Commented Revoke part for Margin Pledge ****

					if (sql_dbd_rev_cov_qty > 0 )
					{
						fn_userlog(c_ServiceName,"The DBD REV COV QTY is [%ld]",sql_dbd_rev_cov_qty);
						fn_userlog(c_ServiceName,"The sql_dbd_dp_id [%s]",sql_dbd_dp_id.arr);
						fn_userlog(c_ServiceName,"The sql_dbd_dp_clnt_id is [%s]",sql_dbd_dp_clnt_id.arr);
						fn_userlog(c_ServiceName,"The sql_stk_stck_cd is [%s]",sql_stk_stck_cd);

*This will select all Withdraw order requests which are in request or in - process state, i.e. 
they are in cover. *

						EXEC SQL
						DECLARE POD_REV_CURSOR CURSOR FOR
						SELECT  POD_ORDR_NO, POD_ORDR_QTY, nvl(POD_CONF_QTY,0), nvl(POD_RJCT_QTY,0)
		        FROM    POD_PLG_ORDR_DTLS
				    WHERE   POD_PLG_REV_TYP       = 'W'
						AND     POD_DP_ACCNT          = :sql_dbd_dp_id
						AND     POD_DP_CLNT_ACCNT     = :sql_dbd_dp_clnt_id
						AND     POD_STCK_CD           = :sql_stk_stck_cd
						AND     POD_ORDR_STTS IN ('I','R')
						AND     POD_ORDR_QTY > (nvl(POD_CONF_QTY,0) + nvl(POD_RJCT_QTY,0));
	
						if( SQLCODE !=0 )
           	{
            	fn_errlog( c_ServiceName, "S32895", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            	l_acnt_id = -1;
             	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
             	tpfree ( ( char * )ptr_fml_Obuf);
             	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
             	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         	 	}

	          EXEC SQL OPEN POD_REV_CURSOR;

						if( SQLCODE !=0 )
            {
            	fn_errlog( c_ServiceName, "S32900", SQLMSG, c_err_msg  );
            	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            	l_acnt_id = -1;
            	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            	tpfree ( ( char * )ptr_fml_Obuf);
            	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
           	}
					
						c_brk_cur_flg = 'N';
								
						while(1)
						{
							MEMSET(sql_pod_ordr_no);

							EXEC SQL 
							FETCH POD_REV_CURSOR
							INTO 
							:sql_pod_ordr_no,
							:sql_pod_ordr_qty,
							:sql_pod_conf_qty,
							:sql_pod_rjct_qty;
							
						 	SETNULL(sql_pod_ordr_no);
   
							if( SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
            	{
              	fn_errlog( c_ServiceName, "S32905", SQLMSG, c_err_msg  );
              	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              	l_acnt_id = -1;
              	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
              	tpfree ( ( char * )ptr_fml_Obuf);
              	EXEC SQL CLOSE POD_REV_CURSOR;
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
           	 	}
		
							if ( SQLCODE == NO_DATA_FOUND )
              {
								fn_userlog(c_ServiceName, "Before closing of cursor on NO_DATA_FOUND");
								EXEC SQL CLOSE POD_REV_CURSOR;
								break;
              }

							*sql_free_qty will have the  value which is the Cover quantity *
							*present in DBD table for the fetched POD Withdrwal request.*
							*We cannot take the dbd_rev_cov_qty value as it could be split across POD request*
							*sql_pod_conf_qty value will be part the quantity that is in dbd_rev_req_qty*
							* for this POD request *

							sql_free_qty = 0;
							sql_to_upd_qty = 0;
							sql_free_qty = sql_pod_ordr_qty - sql_pod_conf_qty - sql_pod_rjct_qty;

							********  *********
              EXEC SQL
              UPDATE POD_PLG_ORDR_DTLS
              SET POD_PRCSD_QTY = POD_PRCSD_QTY + :sql_free_qty
              WHERE trim(POD_ORDR_NO) = trim(:sql_pod_ordr_no)
              AND   POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
              AND   POD_STCK_CD = :sql_stk_stck_cd;

              if(SQLCODE != 0)
              {
                  fn_errlog( c_ServiceName, "S32910", SQLMSG, c_err_msg  );
                  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                  l_acnt_id = -1;
                  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
                  tpfree ( ( char * )ptr_fml_Obuf);
                  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              }
   						******  *******
									
							if(DEBUG_MSG_LVL_3){  
							fn_userlog(c_ServiceName, "POD ref no. Withdraw Cover is [%s]",sql_pod_ordr_no.arr);
							fn_userlog(c_ServiceName, "Order qty  Withdraw Cover is [%ld]",sql_pod_ordr_qty);
							fn_userlog(c_ServiceName, "Conf qty  Withdraw Cover is [%ld]",sql_pod_conf_qty);
							fn_userlog(c_ServiceName, "Reject qty Withdraw Cover is [%ld]",sql_pod_rjct_qty);
							fn_userlog(c_ServiceName, "The TIFP qty is [%ld]. The Free Qty is [%ld]",sql_tifp_qty, sql_free_qty);
							fn_userlog(c_ServiceName, "The Plg vs Withdraw qty is [%ld]", sql_plg_vs_wd_qty);
							}  

              *If Free quantity is less than TIFP quantity, then the
                whole withdrawl can be done for the pledge confirmed.*

							if( (sql_tifp_qty -  sql_plg_vs_wd_qty) >= sql_free_qty)
							{	
								c_brk_cur_flg = 'N';
								sql_to_upd_qty = sql_free_qty;
							}
							else
							{
								c_brk_cur_flg = 'Y';
								sql_to_upd_qty = sql_tifp_qty - sql_plg_vs_wd_qty;
							}

							fn_userlog(c_ServiceName,"The Quantity to be updated in this fetch is [%ld]",sql_to_upd_qty);
							
							if(sql_to_upd_qty <= 0)
							{
 	            	EXEC SQL CLOSE POD_REV_CURSOR;									
								break;
							}

              *The Following update in PTD table updates the Reverse order in pledge for the withdraw*
              *Here we reduce the recently confirmed pledge with the Withdraw Cover quantity*
							
							MEMSET(sql_rev_agree_nmbr);

							EXEC SQL
	            UPDATE  PTD_TIFP_DTLS
		          SET     PTD_PLG_VS_WD_QTY =  PTD_PLG_VS_WD_QTY + :sql_to_upd_qty
			        WHERE   PTD_DP_ID         = :sql_dbd_dp_id
							AND     PTD_DP_CLNT_ID    = :sql_dbd_dp_clnt_id
							AND			PTD_PLG_REV_TYP   = 'P'
							AND     PTD_STCK_CD       = :sql_stk_stck_cd
							AND     TRIM(PTD_POD_REF_NO)    = TRIM(:sql_pod_ref_no)
	            AND     PTD_DPM_NMBR   		= :sql_pon_nmbr
							RETURNING PTD_AGREE_NMBR INTO :sql_rev_agree_nmbr;
	
							SETNULL(sql_rev_agree_nmbr);

							if( SQLCODE !=0 )
	           	{	
	            	fn_errlog( c_ServiceName, "S32915", SQLMSG, c_err_msg  );
	            	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
 	            	l_acnt_id = -1;
 	            	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
 	            	tpfree ( ( char * )ptr_fml_Obuf);
 	            	EXEC SQL CLOSE POD_REV_CURSOR;									
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 	            	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	         	 	}	

            * Added START  *
						if(strncmp(sql_dbd_dp_id.arr,CDSL_ID, 1) == 0) ** Changed '2' to '1' in  **
            { 
            	i_dp_flg = 1; 
						}
						else
						{
							i_dp_flg = 0;
						}
							
					  * Added END  *
								
							EXEC SQL
							INSERT INTO PTD_TIFP_DTLS
							(
								PTD_CLM_MTCH_ACCNT,
					      PTD_STCK_CD,
						    PTD_TIFP_QTY,
                PTD_PLG_VS_WD_QTY,  	*********  *********
							  PTD_PLG_REV_TYP,
							  PTD_ISIN_NMBR,
								PTD_DP_ID,
							  PTD_DP_CLNT_ID,
							  PTD_POD_REF_NO,
								PTD_TIFP_RUN_DT,
								PTD_DPM_NMBR,
								PTD_TIFP_STTS,
								PTD_IWTL_DP_ACCNT,
								PTD_AGREE_NMBR
							)
							VALUES
							(
								:sql_mtch_accnt,
								:sql_stk_stck_cd,
								:sql_to_upd_qty,
                :sql_to_upd_qty, 			*********  *********
								'W',
								:sql_isin_nmbr,
								:sql_dbd_dp_id,
								:sql_dbd_dp_clnt_id,
								:sql_pod_ordr_no,
								sysdate,
								:sql_pon_nmbr,
								'N',
*							:c_iwtl_dp_accnt,  *Commented*  *
							  decode(:i_dp_flg, 1,:c_cdsl_iwtl_dp_accnt,:c_iwtl_dp_accnt),  * Added*  *
								:sql_rev_agree_nmbr
							);

							if ( SQLCODE != 0 )
							{		
              	fn_errlog( c_ServiceName, "S32920", SQLMSG, c_err_msg  );
              	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              	l_acnt_id = -1;
              	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
              	tpfree ( ( char * )ptr_fml_Obuf);
              	EXEC SQL CLOSE POD_REV_CURSOR;
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
           	 	}	


							EXEC SQL 
							UPDATE POD_PLG_ORDR_DTLS SET
							POD_ORDR_STTS = 'I',
							POD_CONF_QTY = POD_CONF_QTY + :sql_to_upd_qty
							WHERE trim(POD_ORDR_NO) = TRIM(:sql_pod_ordr_no)
							AND POD_STCK_CD = :sql_stk_stck_cd
							AND POD_DP_CLNT_ACCNT = :sql_dbd_dp_clnt_id
							AND POD_DP_ACCNT = :sql_dbd_dp_id;	
										
							if( SQLCODE !=0 )
 		          {	
 								fn_errlog( c_ServiceName, "S32925", SQLMSG, c_err_msg  );
 		            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
 		            l_acnt_id = -1;
 		            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
 		            tpfree ( ( char * )ptr_fml_Obuf);
 		            EXEC SQL CLOSE POD_REV_CURSOR;
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 		            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	          	}

							EXEC SQL 
							SELECT (COUNT(*)+1) 
							INTO :sql_pml_mod_cntr
							FROM PML_PLG_MOD_LOG
							WHERE PML_ORDR_NO = TRIM(:sql_pod_ref_no)
              AND   PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
							AND PML_MOD_TYPE IN ('N','M','C','J');
	
							if( SQLCODE !=0 )
					    {
					    	fn_errlog( c_ServiceName, "S32930", SQLMSG, c_err_msg  );
       					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					    	l_acnt_id = -1;
					    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					    	tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );       
					    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					    }

										
							EXEC SQL INSERT INTO PML_PLG_MOD_LOG
							(PML_ORDR_NO,
							PML_STCK_CD,
							PML_ORDR_QTY,
							PML_ORDR_TM,
							PML_HAIRCUT,
							PML_ORDR_VL,
							PML_ISIN_NO,
							PML_DP_CLNT_ACCNT,
							PML_DP_ACCNT,
							PML_CLNT_MTCH_ACCNT,
							PML_PLG_REV_TYP,
							PML_CONF_QTY,
							PML_RJCT_QTY,
							PML_MOD_TYPE,
							PML_STTS,
							PML_MOD_CNTR,
							PML_PLCD_SQNC,
							PML_BP_ID,
							PML_CHANNEL,
							PML_RMRKS)
							VALUES
							(	:sql_pod_ref_no,
	  						:sql_stk_stck_cd,
								:sql_to_upd_qty,
								sysdate,
								:sql_stk_plg_haircut,		 
   							:sql_plg_val,
								:sql_isin_nmbr,
								:sql_dbd_dp_clnt_id,
								:sql_dbd_dp_id,
								:sql_mtch_accnt,
								'P',
								0,
								0,
								'L',
								'I',
								:sql_pml_mod_cntr,
								0,
								null,
								'SYS',
							'Revoke Cover order');
					
							if( SQLCODE !=0 )
						  {
						   	fn_errlog( c_ServiceName, "S32935", SQLMSG, c_err_msg  );
						    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						    l_acnt_id = -1;
						    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						    tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );      
						    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						  }

							EXEC SQL 
							UPDATE DBD_DP_BLCK_DTLS SET
							DBD_SAM_BLCKD_QTY = DBD_SAM_BLCKD_QTY - :sql_to_upd_qty,
							DBD_REV_COV_QTY = DBD_REV_COV_QTY - :sql_to_upd_qty
							WHERE DBD_DP_ID = :sql_dbd_dp_id
			        AND DBD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
							AND dbd_clm_mtch_accnt = :sql_mtch_accnt           
						  AND DBD_STCK_CD = :sql_stk_stck_cd;
							
							if( SQLCODE !=0 )
 		          {	
 		          	fn_errlog( c_ServiceName, "S32940", SQLMSG, c_err_msg  );
 		          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
 		          	l_acnt_id = -1;
 		          	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
 		          	tpfree ( ( char * )ptr_fml_Obuf);
 		          	EXEC SQL CLOSE POD_REV_CURSOR;									
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 		          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	          	}
							
							EXEC SQL
							INSERT INTO DLD_DP_LOG_DTLS
							(DLD_CLM_MTCH_ACCNT,
							DLD_DP_ID,
							DLD_DP_CLNT_ID,
							DLD_ISIN_NMBR,
							DLD_STCK_CD,
							DLD_TOT_QTY_CHG,
							DLD_QTY_BLCKD_CHG,
							DLD_PLG_REQ_QTY_CHG,
							DLD_SAM_BLCKD_QTY_CHG,
							DLD_REV_COV_QTY_CHG,
							DLD_REV_REQ_QTY_CHG,
							DLD_CHG_TM,
							DLD_BLK_FR_SALE_CHG,
							DLD_INV_REQ_QTY_CHG,
							DLD_INV_COV_QTY_CHG,
							DLD_RMRKS)
							VALUES
							(:sql_mtch_accnt,
								:sql_dbd_dp_id,
								:sql_dbd_dp_clnt_id,
								:sql_isin_nmbr,
	  						:sql_stk_stck_cd,
								0,
								0,
								0,
								-(:sql_to_upd_qty),
								-(:sql_to_upd_qty),
								0,
								sysdate,
								0,
								0,
								0,
							'Revoke Cover order');

							if( SQLCODE !=0 )
 		          {	
 		          	fn_errlog( c_ServiceName, "S32945", SQLMSG, c_err_msg  );
 		          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
 		          	l_acnt_id = -1;
 		          	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
 		          	tpfree ( ( char * )ptr_fml_Obuf);
 		          	EXEC SQL CLOSE POD_REV_CURSOR;									
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 		          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	          	}

							if(c_brk_cur_flg == 'Y')
							{
*The following sql_tifp_qty = 0 is done so that further
 Invocation Cover creation takes the correct value*

								sql_tifp_qty = 0;
								fn_userlog(c_ServiceName, "Before closing of cursor ");
								EXEC SQL CLOSE POD_REV_CURSOR;
								break;
							}
							else
							{
*The following is done as in the next fetch of Withdrawal request in cover*
*only the quantity of Pledge Confirmation which has already not been taken care*
* must be considered*

								sql_tifp_qty = sql_tifp_qty - sql_free_qty;
								fn_userlog(c_ServiceName,"In loop for Next fetch with new Tifp qty [%ld]",sql_tifp_qty);
							}

									
						}*end of while for POD_REV_CURSOR*

					}*end of if of revoke cover*

					*** End for Revoke ***/
					
					/*** Revoke commented ***

					if ((sql_dbd_inv_cov_qty > 0) && (sql_tifp_qty > 0) )
					{
						fn_userlog(c_ServiceName,"The DBD INV COV QTY is [%ld]",sql_dbd_inv_cov_qty);
							
					EXEC SQL
					DECLARE POD_INV_CURSOR CURSOR FOR
					SELECT  POD_ORDR_NO,
          POD_ORDR_QTY, nvl(POD_CONF_QTY,0), nvl(POD_RJCT_QTY,0)
		      FROM    POD_PLG_ORDR_DTLS
				  WHERE   POD_PLG_REV_TYP       = 'I'
					AND     POD_DP_ACCNT          = :sql_dbd_dp_id
					AND     POD_DP_CLNT_ACCNT     = :sql_dbd_dp_clnt_id
					AND     POD_STCK_CD           = :sql_stk_stck_cd
					AND     POD_ORDR_STTS IN ('I','R')
					AND     POD_ORDR_QTY > (nvl(POD_CONF_QTY,0) + nvl(POD_RJCT_QTY,0));
	
					if( SQLCODE !=0 )
          {
          	fn_errlog( c_ServiceName, "S32950", SQLMSG, c_err_msg  );
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          	l_acnt_id = -1;
          	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          	tpfree ( ( char * )ptr_fml_Obuf);
          	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         	}

	        EXEC SQL OPEN POD_INV_CURSOR;

					if( SQLCODE !=0 )
          {
          	fn_errlog( c_ServiceName, "S32955", SQLMSG, c_err_msg  );
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          	l_acnt_id = -1;
          	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          	tpfree ( ( char * )ptr_fml_Obuf);
          	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
					
					c_brk_cur_flg = 'N';
					
						while(1)
						{
							MEMSET(sql_pod_ordr_no);
	
							EXEC SQL FETCH POD_INV_CURSOR
							INTO :sql_pod_ordr_no,
							:sql_pod_ordr_qty,
							:sql_pod_conf_qty,
							:sql_pod_rjct_qty;
							
							SETNULL(sql_pod_ordr_no);
							
							if( SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
	          	{
	           		fn_errlog( c_ServiceName, "S32960", SQLMSG, c_err_msg  );
	          		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	          		l_acnt_id = -1;
	          		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
	          		tpfree ( ( char * )ptr_fml_Obuf);
	          		EXEC SQL CLOSE POD_INV_CURSOR;
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	          		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	          	}
			
							if ( SQLCODE == NO_DATA_FOUND )
	          	{
								fn_userlog(c_ServiceName, "Before closing of cursor on NO_DATA_FOUND");
								EXEC SQL CLOSE POD_INV_CURSOR;
								break;
	          	}
							
							sql_free_qty = 0;
							sql_to_upd_qty = 0;
							sql_free_qty = sql_pod_ordr_qty - sql_pod_conf_qty - sql_pod_rjct_qty;

							if(DEBUG_MSG_LVL_3){
							fn_userlog(c_ServiceName, "POD ref no. at invoke is [%s]",sql_pod_ordr_no.arr);
							fn_userlog(c_ServiceName, "Order qty at invoke is [%ld]",sql_pod_ordr_qty);
							fn_userlog(c_ServiceName, "Conf qty  at invoke is [%ld]",sql_pod_conf_qty);
							fn_userlog(c_ServiceName, "Reject qty  at invoke is [%ld]",sql_pod_rjct_qty);
							fn_userlog(c_ServiceName, "The Tifp qty is [%ld].The Free qty is [%ld]",sql_tifp_qty,sql_free_qty);
							fn_userlog(c_ServiceName, "The Plg vs Withdraw qty is [%ld]",sql_plg_vs_wd_qty);
							fn_userlog(c_ServiceName, "The match account is [%s]",sql_mtch_accnt);
							fn_userlog(c_ServiceName, "The Stock code is [%s]",sql_stk_stck_cd);
							}
	
	
*sql_free_qty will have the  value which is the Cover quantity *
*present in DBD table for the fetched POD Invoke request.*
*We cannot take the dbd_inv_cov_qty value as it could be split across POD request*
*sql_pod_conf_qty value will be part the quantity that is in dbd_inv_req_qty*
* for this POD request *
    ********  ver  *********
              EXEC SQL
              UPDATE POD_PLG_ORDR_DTLS 
              SET POD_PRCSD_QTY = POD_PRCSD_QTY + :sql_free_qty
              WHERE trim(POD_ORDR_NO) = trim(:sql_pod_ordr_no)
              AND   POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
              AND   POD_STCK_CD = :sql_stk_stck_cd; 

              if(SQLCODE != 0)
              {
                  fn_errlog( c_ServiceName, "S32965", SQLMSG, c_err_msg  );
								  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								  l_acnt_id = -1;
								  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
								  tpfree ( ( char * )ptr_fml_Obuf);
								  EXEC SQL CLOSE POD_INV_CURSOR;
								  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              } 
   ********* ver  ********

							if( (sql_tifp_qty - sql_plg_vs_wd_qty) >= sql_free_qty)
							{
								c_brk_cur_flg = 'N';
								sql_to_upd_qty = sql_free_qty;	
							}
							else
							{
								c_brk_cur_flg = 'Y';
								sql_to_upd_qty = sql_tifp_qty - sql_plg_vs_wd_qty;	
							}
								
							
							fn_userlog(c_ServiceName,"The Quantity to be updated in this Invoke fetch is [%ld]",sql_to_upd_qty);

							if(sql_to_upd_qty <= 0)
              {
	 		        	EXEC SQL CLOSE POD_INV_CURSOR;									
                break;
              }
	*The Following update in PTD table updates the Reverse order in pledge for the invoke*
							MEMSET(sql_rev_agree_nmbr);

							EXEC SQL
			        UPDATE  PTD_TIFP_DTLS
				      SET     PTD_PLG_VS_WD_QTY =  PTD_PLG_VS_WD_QTY + :sql_to_upd_qty
					    WHERE   PTD_DP_ID         = :sql_dbd_dp_id
							AND     PTD_DP_CLNT_ID    = :sql_dbd_dp_clnt_id
							AND			PTD_PLG_REV_TYP   = 'P'
							AND     PTD_STCK_CD       = :sql_stk_stck_cd
							AND     TRIM(PTD_POD_REF_NO) = TRIM(:sql_pod_ref_no)
			        AND     PTD_DPM_NMBR   		= :sql_pon_nmbr
							RETURNING PTD_AGREE_NMBR INTO :sql_rev_agree_nmbr;
	
							SETNULL(sql_rev_agree_nmbr);
		
							if( SQLCODE !=0 )
	 		        {	
	 		        	fn_errlog( c_ServiceName, "S32970", SQLMSG, c_err_msg  );
	 		        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	 		        	l_acnt_id = -1;
	 		        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
	 		        	tpfree ( ( char * )ptr_fml_Obuf);
	 		        	EXEC SQL CLOSE POD_INV_CURSOR;									
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	 		        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	 	          }	
	
            if(strncmp(sql_dbd_dp_id.arr,CDSL_ID, 1) == 0) ** Changed '2' to '1' in  **
            {
              i_dp_flg = 1;
            }
						else
            {
              i_dp_flg = 0;
            }

							EXEC SQL
							INSERT INTO PTD_TIFP_DTLS
							(
					   	PTD_CLM_MTCH_ACCNT,
						 	PTD_STCK_CD,
						 	PTD_TIFP_QTY,
						 	PTD_PLG_REV_TYP,
						 	PTD_ISIN_NMBR,
						 	PTD_DP_ID,
						 	PTD_DP_CLNT_ID,
						 	PTD_POD_REF_NO,
						 	PTD_TIFP_RUN_DT,
						 	PTD_DPM_NMBR,
						 	PTD_TIFP_STTS,
						 	PTD_IWTL_DP_ACCNT,
							PTD_AGREE_NMBR
							)
						 	VALUES
							(
							:sql_mtch_accnt,
							:sql_stk_stck_cd,
							:sql_to_upd_qty,
							'I',
							:sql_isin_nmbr,
							:sql_dbd_dp_id,
							:sql_dbd_dp_clnt_id,
							:sql_pod_ordr_no,
							sysdate,
							:sql_pon_nmbr,
							'N',
              decode(:i_dp_flg, 1,:c_cdsl_iwtl_dp_accnt,:c_iwtl_dp_accnt),  * Added*  *
							:sql_rev_agree_nmbr
							);
	
							if ( SQLCODE != 0 )
							{		
	          		fn_errlog( c_ServiceName, "S32975", SQLMSG, c_err_msg  );
	          		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	          		l_acnt_id = -1;
	          		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
	          		tpfree ( ( char * )ptr_fml_Obuf);
	          		EXEC SQL CLOSE POD_INV_CURSOR;
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	          		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	          	}	
	
							EXEC SQL 
							UPDATE POD_PLG_ORDR_DTLS SET
							POD_ORDR_STTS = 'I',
							POD_CONF_QTY = POD_CONF_QTY + :sql_to_upd_qty
							WHERE trim(POD_ORDR_NO) = TRIM(:sql_pod_ordr_no)
							AND POD_STCK_CD = :sql_stk_stck_cd
							AND POD_DP_CLNT_ACCNT = :sql_dbd_dp_clnt_id
							AND POD_DP_ACCNT = :sql_dbd_dp_id;	
							
							if( SQLCODE !=0 )
	 		        {	
	 		        	fn_errlog( c_ServiceName, "S32980", SQLMSG, c_err_msg  );
	 		        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	 		        	l_acnt_id = -1;
	 		        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
	 		        	tpfree ( ( char * )ptr_fml_Obuf);
	 		        	EXEC SQL CLOSE POD_INV_CURSOR;									
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	 		        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	 	          }	
	
							EXEC SQL 
							SELECT (COUNT(*)+1) 
							INTO :sql_pml_mod_cntr
							FROM PML_PLG_MOD_LOG
							WHERE PML_ORDR_NO = TRIM(:sql_pod_ref_no)
              AND PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
							AND PML_MOD_TYPE IN ('N','M','C','J');
		
							if( SQLCODE !=0 )
						  {
						  	fn_errlog( c_ServiceName, "S32985", SQLMSG, c_err_msg  );
	       				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						  	l_acnt_id = -1;
						  	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						  	tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    
						  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						  }
	
							EXEC SQL 
							INSERT INTO PML_PLG_MOD_LOG
							(PML_ORDR_NO,
							PML_STCK_CD,
							PML_ORDR_QTY,
							PML_ORDR_TM,
							PML_HAIRCUT,
							PML_ORDR_VL,
							PML_ISIN_NO,
							PML_DP_CLNT_ACCNT,
							PML_DP_ACCNT,
							PML_CLNT_MTCH_ACCNT,
							PML_PLG_REV_TYP,
							PML_CONF_QTY,
							PML_RJCT_QTY,
							PML_MOD_TYPE,
							PML_STTS,
							PML_MOD_CNTR,
							PML_PLCD_SQNC,
							PML_BP_ID,
							PML_CHANNEL,
							PML_RMRKS)
							VALUES
							(	:sql_pod_ref_no,
		  					:sql_stk_stck_cd,
								:sql_to_upd_qty,
								sysdate,
								:sql_stk_plg_haircut,		 
	   						:sql_plg_val,
								:sql_isin_nmbr,
								:sql_dbd_dp_clnt_id,
								:sql_dbd_dp_id,
								:sql_mtch_accnt,
								'P',
								0,
								0,
								'L',
								'I',
								:sql_pml_mod_cntr,
								0,
								null,
								'SYS',
							'Invoke Cover order');
						
							if( SQLCODE !=0 )
							{
							 	fn_errlog( c_ServiceName, "S32990", SQLMSG, c_err_msg  );
							  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							  l_acnt_id = -1;
							  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
							  tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );          
							  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
							
							EXEC SQL 
							UPDATE DBD_DP_BLCK_DTLS SET
							DBD_INV_COV_QTY = DBD_INV_COV_QTY - :sql_to_upd_qty
							WHERE DBD_DP_ID = :sql_dbd_dp_id
				      AND DBD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
							AND dbd_clm_mtch_accnt = :sql_mtch_accnt       **  added **
							AND DBD_STCK_CD = :sql_stk_stck_cd;
							
							if( SQLCODE !=0 )
	 		        {	
	 		        	fn_errlog( c_ServiceName, "S32995", SQLMSG, c_err_msg  );
	 		        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	 		        	l_acnt_id = -1;
	 		        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
	 		        	tpfree ( ( char * )ptr_fml_Obuf);
	 		        	EXEC SQL CLOSE POD_REV_CURSOR;									
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	 		        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 							}	
							EXEC SQL
							INSERT INTO DLD_DP_LOG_DTLS
							(DLD_CLM_MTCH_ACCNT,
							DLD_DP_ID,
							DLD_DP_CLNT_ID,
							DLD_ISIN_NMBR,
							DLD_STCK_CD,
							DLD_TOT_QTY_CHG,
							DLD_QTY_BLCKD_CHG,
							DLD_PLG_REQ_QTY_CHG,
							DLD_SAM_BLCKD_QTY_CHG,
							DLD_REV_COV_QTY_CHG,
							DLD_REV_REQ_QTY_CHG,
							DLD_CHG_TM,
							DLD_BLK_FR_SALE_CHG,
							DLD_INV_REQ_QTY_CHG,
							DLD_INV_COV_QTY_CHG,
							DLD_RMRKS)
							VALUES
							(:sql_mtch_accnt,
								:sql_dbd_dp_id,
								:sql_dbd_dp_clnt_id,
								:sql_isin_nmbr,
	  						:sql_stk_stck_cd,
								0,
								0,
								0,
								-(:sql_to_upd_qty),
								0,
								0,
								sysdate,
								0,
								0,
							-(:sql_to_upd_qty),
							'Invoke Cover order');

							if( SQLCODE !=0 )
 		          {	
 		          	fn_errlog( c_ServiceName, "S33000", SQLMSG, c_err_msg  );
 		          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
 		          	l_acnt_id = -1;
 		          	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
 		          	tpfree ( ( char * )ptr_fml_Obuf);
 		          	EXEC SQL CLOSE POD_REV_CURSOR;									
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 		          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	          	}


							if(c_brk_cur_flg == 'Y')
							{
								fn_userlog(c_ServiceName, "Before closing of cursor ");
								EXEC SQL CLOSE POD_INV_CURSOR;
								break;
							}
							else
							{
*The following is done as in the next fetch of Invocation request in cover*
*only the quantity of Pledge Confirmation which has already not been taken care*
* must be considered*

								sql_tifp_qty = sql_tifp_qty -  sql_free_qty;
								fn_userlog(c_ServiceName,"In loop for Next fetch with new Tifp qty [%ld]",sql_tifp_qty);
							}

								
						}*end of while for POD_INV_CURSOR*

					}*end of if of check of invoke cover*

					*** Comment end for Revoke ***/

					fn_userlog( c_ServiceName," Acceptance of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/
					sprintf(c_msg,"Acceptance of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr); /**  **/
					BAT_POST(c_msg);
				
					}/*end if	of successful pledge confirmation*/
						else
/**************Rejection of Pledge on Confirmation Request******************************/
/*  commented sql_rtn_stts in If condition   
	if ((sql_rtn_stts == 1) && (strcmp(sql_plg_stts.arr,"REJ")==0))*/

						if (strcmp(sql_plg_stts.arr,"REJ")==0)
						{
							fn_userlog( c_ServiceName, " Inside Pledge Confirmation Rejection");
							fn_userlog( c_ServiceName, " Execution date is [%s]",sql_execn_date.arr);

							sql_rtn_stts =1 ; /**/
							
							if(strcmp(sql_plg_stts.arr,"REJ")==0)
							{
								strcpy(sql_err_desc.arr, sql_rej_desc.arr);
							}

							SETLEN(sql_err_desc);

							EXEC SQL 
							UPDATE PTD_TIFP_DTLS SET
							PTD_LEG_NO = 'L5',
							PTD_TIFP_STTS = 'J',
							PTD_TIFP_RUN_DT = sysdate,
							/*PTD_EXCTN_DT = :sql_execn_date --commented for the ver 1.7*/
							PTD_EXCTN_DT = :c_conf_date,  /* ver 1.7 */
              PTD_RMRKS = trim(:sql_err_desc)        /** Ver 1.6  **/
							WHERE PTD_DP_ID = :sql_dbd_dp_id
							AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
							AND PTD_ISIN_NMBR = :sql_isin_nmbr
							AND PTD_PLG_REV_TYP = 'P'
							AND PTD_TIFP_STTS = 'P'
							AND PTD_SLIPNO_L1 = :sql_creation_slip_no;

			    		if( SQLCODE !=0 )
      				{
        				fn_errlog( c_ServiceName, "S33005", SQLMSG, c_err_msg  );
        				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        				l_acnt_id = -1;
        				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        				tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      				}

							fn_userlog( c_ServiceName, " The err desc is [%s]",sql_err_desc.arr);
							fn_userlog( c_ServiceName, " The rej desc is [%s]",sql_rej_desc.arr);
		

							EXEC SQL 
							UPDATE POD_PLG_ORDR_DTLS SET
							POD_ORDR_STTS = 'J',
							POD_PRCSD_QTY = 0,
              POD_RMRKS = trim(:sql_err_desc) 
							WHERE trim(POD_ORDR_NO) = TRIM(:sql_pod_ref_no)
              AND POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
							AND POD_PLG_REV_TYP = 'P';

					  	if( SQLCODE !=0 )
      				{
        				fn_errlog( c_ServiceName, "S33010", SQLMSG, c_err_msg  );
        				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        				l_acnt_id = -1;
        				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        				tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      				}

							EXEC SQL 
							SELECT (COUNT(*)+1) 
							INTO :sql_pml_mod_cntr
							FROM PML_PLG_MOD_LOG
							WHERE PML_ORDR_NO = TRIM(:sql_pod_ref_no)
              AND   PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
							AND PML_MOD_TYPE IN ('N','M','C','J');
	
							if( SQLCODE !=0 )
					    {
								fn_errlog( c_ServiceName, "S33015", SQLMSG, c_err_msg  );
       					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					      l_acnt_id = -1;
					      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					      tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );     
					      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					     }

							EXEC SQL INSERT INTO PML_PLG_MOD_LOG
							(PML_ORDR_NO,
							PML_STCK_CD,
							PML_ORDR_QTY,
							PML_ORDR_TM,
							PML_HAIRCUT,
							PML_ORDR_VL,
							PML_ISIN_NO,
							PML_DP_CLNT_ACCNT,
							PML_DP_ACCNT,
							PML_CLNT_MTCH_ACCNT,
							PML_PLG_REV_TYP,
							PML_CONF_QTY,
							PML_RJCT_QTY,
							PML_MOD_TYPE,
							PML_STTS,
							PML_MOD_CNTR,
							PML_PLCD_SQNC,
							PML_BP_ID,
							PML_CHANNEL,
							PML_RMRKS)
							VALUES
							(	:sql_pod_ref_no,
			  				:sql_stk_stck_cd,
								:sql_tifp_qty,
								sysdate,
								:sql_stk_plg_haircut,		 
		   					:sql_plg_val,
								:sql_isin_nmbr,
								:sql_dbd_dp_clnt_id,
								:sql_dbd_dp_id,
								:sql_mtch_accnt,
								'P',
								0,
								0,
								'J',
								'C',
								:sql_pml_mod_cntr,
								0,
								null,
								'SYS',
								:sql_err_desc);
							
							if( SQLCODE !=0 )
		          {
		          	fn_errlog( c_ServiceName, "S33020", SQLMSG, c_err_msg  );
		            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		            l_acnt_id = -1;
		            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		            tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );         
		            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		          }
							
							EXEC SQL 
							SELECT  DBD_TOT_QTY , DBD_QTY_BLCKD,
							NVL(DBD_REV_COV_QTY,0), NVL(DBD_INV_COV_QTY,0)
              INTO :sql_dbd_tot_qty, :sql_dbd_qty_blckd,
							:sql_dbd_rev_cov_qty, :sql_dbd_inv_cov_qty
							FROM DBD_DP_BLCK_DTLS
							WHERE DBD_CLM_MTCH_ACCNT = :sql_mtch_accnt 
							AND DBD_DP_ID = :sql_dbd_dp_id
              AND DBD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
              AND DBD_STCK_CD = :sql_stk_stck_cd;

							if( SQLCODE !=0 )
              {
                fn_errlog( c_ServiceName, "S33025", SQLMSG, c_err_msg  );
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                l_acnt_id = -1;
                Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
                tpfree ( ( char * )ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              }

							fn_userlog( c_ServiceName, " Update DBD Rejection");

							EXEC SQL 
							UPDATE DBD_DP_BLCK_DTLS SET
							/* DBD_SAM_BLCKD_QTY = DBD_SAM_BLCKD_QTY - :sql_tifp_qty ****/
							/* DBD_TOT_QTY = DBD_TOT_QTY  + :sql_tifp_qty, ** Commented in Ver 1.1 ***/ 
							DBD_PLG_REQ_QTY = DBD_PLG_REQ_QTY - :sql_tifp_qty
							WHERE DBD_DP_ID = :sql_dbd_dp_id
							AND DBD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
							AND dbd_clm_mtch_accnt = :sql_mtch_accnt          /**  added **/ 
							AND DBD_STCK_CD = :sql_stk_stck_cd;
			   	 	
							if( SQLCODE !=0 )
      				{
        				fn_errlog( c_ServiceName, "S33030", SQLMSG, c_err_msg  );
        				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        				l_acnt_id = -1;
        				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        				tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      				}

							fn_userlog(c_ServiceName, "Update PPS Rejection" );

							EXEC SQL
							UPDATE PPS_PLG_PSTN
							SET PPS_L1_POS = PPS_L1_POS - :sql_tifp_qty,
									PPS_NET_POS = PPS_NET_POS - :sql_tifp_qty
							WHERE PPS_STCK_CD = :sql_stk_stck_cd
							AND PPS_CLM_MTCH_ACCNT = :sql_mtch_accnt
							AND PPS_DP_CLNT_ACCNT = :sql_dbd_dp_clnt_id;

							if( SQLCODE !=0 )
							{
								fn_errlog( c_ServiceName, "S33035", SQLMSG, c_err_msg  );
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								l_acnt_id = -1;
								Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
								tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
	
							fn_userlog( c_ServiceName, " Update FAB Rejection");
			
          		/******  EQSAM starts ********/

							/*** Commented as Limit was provided ****
          		MEMSET(c_narration);

          		if(sql_err_desc.len < 60 )
          		{
            		strcpy(c_narration,sql_err_desc.arr);
          		}
          		else
          		{
            		strncpy(c_narration,sql_err_desc.arr,59);
          		}
		
          		i_returncode = fn_reduce_sam_limit(c_ServiceName,
                                        		sql_mtch_accnt.arr,
                                        		sql_plg_val,
                                        		c_narration,
                                        		c_err_msg);
		
		
          		if (i_returncode == -1 )
          		{
            		fn_errlog( c_ServiceName, "S33040", LIBMSG, c_err_msg  );
            		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            		l_acnt_id = -1;
            		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            		tpfree ( ( char * )ptr_fml_Obuf);
            		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          		}
			
							******* Lmit not given ***/
          		/***********  ends ************/

							fn_userlog( c_ServiceName, " Update DLD Rejection");

							EXEC SQL 
							INSERT INTO DLD_DP_LOG_DTLS
							(DLD_CLM_MTCH_ACCNT,
							DLD_DP_ID,
							DLD_DP_CLNT_ID,
							DLD_ISIN_NMBR,
							DLD_STCK_CD,
							DLD_TOT_QTY_CHG,
							DLD_QTY_BLCKD_CHG,
							DLD_PLG_REQ_QTY_CHG,
							DLD_SAM_BLCKD_QTY_CHG,
							DLD_REV_COV_QTY_CHG,
							DLD_REV_REQ_QTY_CHG,
							DLD_CHG_TM,
							DLD_BLK_FR_SALE_CHG,
							DLD_INV_REQ_QTY_CHG,
							DLD_INV_COV_QTY_CHG,
							DLD_RMRKS)
							VALUES
							(:sql_mtch_accnt,
							:sql_dbd_dp_id,
							:sql_dbd_dp_clnt_id,
							:sql_isin_nmbr,
							:sql_stk_stck_cd,
							0, /** :sql_tifp_qty, ** Commented in Ver 1.1  **/
							0,
							-(:sql_tifp_qty),
							0,
							0,
							0,
							sysdate,
							0,
							0,
							0,
							:sql_err_desc);

						
							if( SQLCODE !=0 )
            	{
              	fn_errlog( c_ServiceName, "S33045", SQLMSG, c_err_msg  );
              	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              	l_acnt_id = -1;
              	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
              	tpfree ( ( char * )ptr_fml_Obuf);
              	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
           	 	}
							
							fn_userlog( c_ServiceName," Rejection of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr); /**  **/
							sprintf(c_msg,"Rejection of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr); /**  **/
							BAT_POST(c_msg);
							memset(c_msg,'\0',sizeof(c_msg));
							strncpy(c_msg,sql_err_desc.arr,254);
							BAT_POST(c_msg);
              
              /***  Starts ***/
              fn_userlog(c_ServiceName,"Sens sms/mail....");
              if ( fn_mrgplg_sms_mail(c_ServiceName,sql_mtch_accnt.arr,sql_pon_nmbr,PLG_REQ_FAIL) != 0 )
              {
                fn_userlog(c_ServiceName,"Error in fn_mrgplg_sms..");
                fn_errlog( c_ServiceName, "S33050", LIBMSG, c_err_msg  );
              }
              /***  Ends ***/
							
						}/*end of if for Pledge confirmation Rejection*/
						else
						{
							fn_userlog( c_ServiceName," Skipping record of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/
							sprintf(c_msg,"Skipping record of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/
							BAT_POST(c_msg);
							memset(c_msg,'\0',sizeof(c_msg));
							strncpy(c_msg,sql_err_desc.arr,254);
							BAT_POST(c_msg);
						}
					

					if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
	     		{
						fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
    				fn_errlog( c_ServiceName, "S33055", TPMSG, c_err_msg  );
			 			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				 		l_acnt_id = -1;
       			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       			tpfree (( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
					}	
		      
				 	tpfree((char *)ptr_fml_Sbuf);
         	tpfree((char *)ptr_fml_Rbuf);
					}

      /** ver 1.4 Starts **/
          fn_userlog(c_ServiceName,"Calling bat_mrgnplg_mail_sms............");

          EXEC SQL
          SELECT to_char(sysdate,'DD-Mon-YYYY')
          INTO  :c_date
          FROM DUAL;

          if( SQLCODE !=0 )
          {
            fn_errlog( c_ServiceName, "S33060", SQLMSG, c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }     

      sprintf(c_cmd_ln, "nohup bat_mrgnplg_mail_sms NFO NFO NA %s A P &",c_date);
      fn_userlog(c_ServiceName,"c_cmd_ln :%s:",c_cmd_ln);
      system(c_cmd_ln);
      /** Ver 1.4 Ends **/

			tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );
		}
/* Withdraw Confirmation*/
		else
		if( sql_plg_typ == 'W' )
		{

			i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  		if ( i_trnsctn == -1 )
  		{
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		fn_errlog( c_ServiceName, "S33065",LIBMSG,c_err_msg);
    		l_acnt_id = -1;
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    		tpfree ( ( char * )ptr_fml_Obuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

			EXEC SQL DELETE FROM TEMP_PLG_RECORDS;
			if((SQLCODE !=0) && (SQLCODE!= NO_DATA_FOUND))
  		{
    		fn_errlog( c_ServiceName, "S33070", SQLMSG, c_err_msg  );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		l_acnt_id = -1;
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}
		
				EXEC SQL INSERT INTO TEMP_PLG_RECORDS
				(TMP_TIFP_QTY, 
				TMP_PLG_REV_TYP,
				TMP_ISIN_NMBR,
				TMP_DP_ID,
				TMP_DP_CLNT_ID,
				TMP_POD_REF_NO,
				TMP_STCK_CD,
				TMP_CLM_MTCH_ACCNT,
				TMP_SLIPNO_W1,
				TMP_DPM_NMBR)
				( SELECT 
				PTD_TIFP_QTY,
				'W',
				PTD_ISIN_NMBR,
				PTD_DP_ID, 
				PTD_DP_CLNT_ID, 
				PTD_POD_REF_NO, 
				PTD_STCK_CD,
				PTD_CLM_MTCH_ACCNT, 
				PTD_SLIPNO_W1 ,
				PTD_DPM_NMBR
				FROM PTD_TIFP_DTLS
				WHERE PTD_PLG_REV_TYP='W' 
				AND PTD_TIFP_STTS = 'P'
				AND PTD_LEG_NO = 'W1');

				if( SQLCODE !=0 )
  			{
    			fn_errlog( c_ServiceName, "S33075", SQLMSG, c_err_msg  );
    			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			l_acnt_id = -1;
    			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  			}

			if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   		{
				fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
    		fn_errlog( c_ServiceName, "S33080", TPMSG, c_err_msg  );
   			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     		l_acnt_id = -1;
     		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     		tpfree (( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
			}	

			EXEC SQL SELECT COUNT(*) INTO :l_rec_cnt
			FROM TEMP_PLG_RECORDS;

			if( l_rec_cnt == 0 )
			{
				strcpy(c_err_msg,"There are no records in Withdraw Confirmation status");
				BAT_POST(c_err_msg);
				fn_userlog(c_ServiceName,"There are no records in Withdraw Confirmation status");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			fn_userlog( c_ServiceName," [%ld] number of records for withdrawal confirmation",l_rec_cnt);
			sprintf(c_msg,"%ld number of records for withdrawal confirmation",l_rec_cnt);
			BAT_POST(c_msg);

			for (i =0; i < l_rec_cnt ; i++ )
			{
				i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
 				if ( i_trnsctn == -1 )
 				{
 					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     			fn_errlog( c_ServiceName, "S33085",LIBMSG,c_err_msg);
     			l_acnt_id = -1;
     			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     			tpfree ( ( char * )ptr_fml_Obuf);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     		}
			
					sql_tifp_qty=0;
					MEMSET(sql_isin_nmbr);
					MEMSET(sql_pod_ref_no);
					MEMSET(sql_mtch_accnt);
					MEMSET(sql_plg_stts);
					MEMSET(sql_err_cd);
					MEMSET(sql_err_desc);
					sql_pon_nmbr = 0.0; /**  **/
					MEMSET(sql_rej_desc);


				EXEC SQL SELECT TMP_TIFP_QTY, TMP_ISIN_NMBR, TMP_DP_ID,
				TMP_DP_CLNT_ID, TMP_POD_REF_NO,	TMP_STCK_CD,
				TMP_CLM_MTCH_ACCNT,	TMP_SLIPNO_W1 ,TMP_DPM_NMBR
				INTO :sql_tifp_qty, :sql_isin_nmbr, :sql_dbd_dp_id,
				:sql_dbd_dp_clnt_id, :sql_pod_ref_no, :sql_stk_stck_cd,
				:sql_mtch_accnt, :sql_creation_slip_no,:sql_pon_nmbr
				FROM TEMP_PLG_RECORDS
				where rownum < 2;

				if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND) 
				{
					fn_errlog( c_ServiceName, "S33090", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				if(SQLCODE == NO_DATA_FOUND)
				{
					break;
				}

				EXEC SQL 
				DELETE FROM TEMP_PLG_RECORDS
				WHERE ROWNUM < 2;
				
				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S33095", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   			{
					fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
    			fn_errlog( c_ServiceName, "S33100", TPMSG, c_err_msg  );
   				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     			l_acnt_id = -1;
     			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     			tpfree (( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
				}
	
				/** if(DEBUG_MSG_LVL_3){ **/
				fn_userlog(c_ServiceName,"The Qty for withdrawal is [%ld]",sql_tifp_qty);
				fn_userlog(c_ServiceName,"The ISIN for withdrawal is [%s]",sql_isin_nmbr.arr);
				fn_userlog(c_ServiceName,"The DP for withdrawal is [%s]",sql_dbd_dp_id.arr);
				fn_userlog(c_ServiceName,"The Dp Client id for withdrawal is [%s]",sql_dbd_dp_clnt_id.arr);
				fn_userlog(c_ServiceName,"The POD ref no. for withdrawal is [%s]",sql_pod_ref_no.arr);
				fn_userlog(c_ServiceName,"The Stock Code for withdrawal is [%s]",sql_stk_stck_cd);
				fn_userlog(c_ServiceName,"The Match A/C for withdrawal is [%s]",sql_mtch_accnt.arr);
				fn_userlog(c_ServiceName,"The Creation Slip for withdrawal is [%lld]",sql_creation_slip_no);
				/* } **/
		 		sql_plg_val = 0.0;

				EXEC SQL SELECT LTQ_PLG_RT
			  INTO :sql_plg_val
		 		FROM LTQ_TRD_QT
		 		WHERE LTQ_STCK_CD = :sql_stk_stck_cd
				AND LTQ_XCHNG_CD = 'BSE';        
		
			 		if(SQLCODE !=0 ) 
        	{
         		fn_errlog( c_ServiceName, "S33105", SQLMSG, c_err_msg  );
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          	l_acnt_id = -1;
          	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          	tpfree ( ( char * )ptr_fml_Obuf);
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}

        	/**  EQ SAM  Get haircut percentage  **/

        	i_returncode = fn_get_haircut(c_ServiceName ,
                                      	sql_mtch_accnt.arr,
                                      	sql_stk_stck_cd,
                                      	&sql_stk_plg_haircut,
                                      	c_err_msg);
	
        	if(i_returncode == -1)
        	{
          	fn_errlog( c_ServiceName, "S33110", LIBMSG, c_err_msg  );
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          	l_acnt_id = -1;
          	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          	tpfree ( ( char * )ptr_fml_Obuf);
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}

        	/**  ends ***/


					MEMSET(sql_usr_code);	
					strcpy((char *)sql_usr_code.arr,"EBA");
					SETLEN(sql_usr_code);

					sql_plg_val = (sql_tifp_qty * (sql_plg_val *(1 - ((double)(sql_stk_plg_haircut)/100))))*100; /** diwa typecast of float made double **/
					
					if((long long)(sql_plg_val  * 100)%100 > 50)
					{
						sql_plg_val = sql_plg_val + 1.0;
						fn_userlog( c_ServiceName, "The rounded off amount is [%lf]", sql_plg_val);
					}
				
					ll_plg_val = (long long) sql_plg_val;

					sql_plg_val = (double) ll_plg_val;
					
					i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
     			if ( i_trnsctn == -1 )
     			{
     				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		     		fn_errlog( c_ServiceName, "S33115",LIBMSG,c_err_msg);
		     		l_acnt_id = -1;
		     		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		     		tpfree ( ( char * )ptr_fml_Obuf);
		     		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		     	}

					ptr_fml_Sbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
					if (ptr_fml_Sbuf == NULL)
					{
						fn_errlog(c_ServiceName, "S33120", TPMSG, c_err_msg);
						Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
						Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
						tpfree((char *)ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
						}
					
					ptr_fml_Rbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
					if (ptr_fml_Rbuf == NULL)
					{
						fn_errlog(c_ServiceName, "S33125", TPMSG, c_err_msg);
						Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
						Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
						tpfree((char *)ptr_fml_Obuf);
						tpfree((char *)ptr_fml_Sbuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );     
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
					}
					
					Fadd32( ptr_fml_Sbuf,FFO_OPERATION_TYP, (char *)&sql_oprn_typ,0);
					Fadd32( ptr_fml_Sbuf, FFO_PLEDGE_TYP, (char *)"PCL",0);
					/** Fadd32(ptr_fml_Sbuf,FFO_CRT_SLIP_NO,(char *)&sql_creation_slip_no,0); **/
					Fadd32(ptr_fml_Sbuf,FFO_INDEX,(char *)&sql_creation_slip_no,0);
					Fadd32(ptr_fml_Sbuf,FFO_USER_CODE,(char *)sql_usr_code.arr,0);


					/* Call DP for Withdrawal Confirmation*/


          if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0) 
          {	
						i_call_dp_flg = 1 ;  
            fn_userlog(c_ServiceName,"Calling SFO_CALL_DP ");
            i_returncode=tpcall("SFO_CALL_DP",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
          }
          else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0)
          {
						i_call_dp_flg = 2 ;  
            fn_userlog(c_ServiceName,"Calling SFO_CALL_DPC ");
            i_returncode=tpcall("SFO_CALL_DPC",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
          }

          fn_userlog(c_ServiceName,"After Call i_returncode : %d ",i_returncode);

          if (i_returncode == -1)
          {
            if(tperrno == TPESVCFAIL)
            {
              if(Fget32(ptr_fml_Rbuf, FFO_ERR_MSG, 0, c_err_msg, 0 ) == -1)
              {
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
                tpfree((char *)ptr_fml_Sbuf);
                tpfree((char *)ptr_fml_Rbuf);
                tpfree((char *)ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
              }
            }
            else
            {
              fn_errlog(c_ServiceName, "S33130", TPMSG, c_err_msg);
            }

            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
            tpfree((char *)ptr_fml_Sbuf);
            tpfree((char *)ptr_fml_Rbuf);
            tpfree((char *)ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
          }

					MEMSET(sql_plg_stts);
		 		  MEMSET(c_conf_date);
	
					Fget32(ptr_fml_Rbuf,FFO_PLG_STTS,0,(char *)sql_plg_stts.arr,0);
				 /**	Fget32(ptr_fml_Rbuf,FFO_DPM_NO,0,(char *)&sql_pon_nmbr,0); --commented  **/
					Fget32(ptr_fml_Rbuf,FFO_JIFFY,0,(char *)&sql_pon_nmbr,0); /**  **		*** Need to Comment for Margin Pledge ***/
					Fget32(ptr_fml_Rbuf,FFO_RTN_STTS,0,(char *)&sql_rtn_stts,0);
					Fget32(ptr_fml_Rbuf,FFO_ERR_CD,0,(char *)sql_err_cd.arr,0);
					Fget32(ptr_fml_Rbuf,FFO_ERR_DESC,0,(char *)sql_err_desc.arr,0);
					Fget32(ptr_fml_Rbuf,FFO_REJ_DESC,0,(char *)sql_rej_desc.arr,0);
					Fget32(ptr_fml_Rbuf,FFO_RCRD_DT,0,(char *)c_conf_date.arr,0); /*ver 1.7  */
			

					/***  starts ***/
					l_conf_qty = 0 ;
					l_rej_qty  = 0 ;

					if (i_call_dp_flg == 1)
					{
						Fget32(ptr_fml_Rbuf,FFO_TIFP_QTY,0,(char *)&l_conf_qty,0);
						Fget32(ptr_fml_Rbuf,FFO_CANCL_QTY,0,(char *)&l_rej_qty,0);
					}


					/***  Ends 	***/
	
					SETLEN(sql_plg_stts);
					SETLEN(sql_err_cd);
					SETLEN(sql_err_desc);
					SETLEN(sql_rej_desc);
					SETLEN(c_conf_date);  /*ver 1.7*/


					fn_userlog(c_ServiceName,"The plg stts [%s]",sql_plg_stts.arr);
					fn_userlog(c_ServiceName,"The pon nmbr [%lf]",sql_pon_nmbr);  /**  **/
					fn_userlog(c_ServiceName,"The rtn stts [%ld]",sql_rtn_stts);
					fn_userlog(c_ServiceName,"The err code [%s]",sql_err_cd.arr);
					fn_userlog(c_ServiceName,"The err desc [%s]",sql_err_desc.arr);
					fn_userlog(c_ServiceName,"The rej desc [%s]",sql_rej_desc.arr);
          fn_userlog(c_ServiceName,"The confirmation date form DP is [%s]",c_conf_date.arr);/*ver 1.7*/ 
          fn_userlog(c_ServiceName,"The confirmed  quantiy is [%ld]",l_conf_qty); 	/***  ***/ 
          fn_userlog(c_ServiceName,"The rejected quantiy is [%ld]",l_rej_qty); 			/***  ***/ 
			
					/*******Successfull Withdraw Confirmation from DP****************************/

					/*** if( sql_rtn_stts == 0 && (strcmp(sql_plg_stts.arr,"CCN")==0)) Commented In  ***/

					if( sql_rtn_stts == 0 && (strcmp(sql_plg_stts.arr,"CCN")==0) && (l_rej_qty==0)) /***  ***/
					{
						fn_userlog(c_ServiceName,"Acceptance of Closure confirmation ");	
						EXEC SQL UPDATE PTD_TIFP_DTLS SET
						PTD_LEG_NO = 'W3',
						PTD_TIFP_RUN_DT = sysdate,
						/*  PTD_EXCTN_DT = :sql_execn_date  commented for the ver 1.7 */
						PTD_EXCTN_DT = :c_conf_date, /* ver 1.7 */
            PTD_RMRKS = 'Success'                           /** Ver 1.6  **/ 
						WHERE PTD_DP_ID = :sql_dbd_dp_id
						AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
						AND PTD_ISIN_NMBR = :sql_isin_nmbr
						AND PTD_PLG_REV_TYP = 'W'
						AND PTD_TIFP_STTS = 'P'
						AND PTD_LEG_NO = 'W1'
						AND trim(PTD_POD_REF_NO) = trim(:sql_pod_ref_no)
						AND PTD_DPM_NMBR = :sql_pon_nmbr ;

			    	if( SQLCODE !=0 )
      			{
        			fn_errlog( c_ServiceName, "S33135", SQLMSG, c_err_msg  );
        			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			l_acnt_id = -1;
        			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			}

						EXEC SQL 
						UPDATE POD_PLG_ORDR_DTLS SET
						POD_ORDR_STTS = decode((POD_ORDR_QTY - (POD_CONF_QTY + POD_RJCT_QTY)),0,'C','I'),
            POD_RMRKS = decode((POD_ORDR_QTY - (POD_CONF_QTY + POD_RJCT_QTY)),0,'Success','')
						WHERE trim(POD_ORDR_NO) = TRIM(:sql_pod_ref_no)
            AND POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND POD_PLG_REV_TYP = 'W';

						if( SQLCODE !=0 )
						{
						  fn_errlog( c_ServiceName, "S33140", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						  l_acnt_id = -1;
						  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						  tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}

						EXEC SQL SELECT (COUNT(*)+1) INTO :sql_pml_mod_cntr
						FROM PML_PLG_MOD_LOG
						WHERE PML_ORDR_NO = TRIM(:sql_pod_ref_no)
            AND    PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND PML_MOD_TYPE IN ('N','M','C','J');
	
						if( SQLCODE !=0 )
					  {
							fn_errlog( c_ServiceName, "S33145", SQLMSG, c_err_msg  );
       				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					    l_acnt_id = -1;
					    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					    tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );      
					    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					  }

						EXEC SQL INSERT INTO PML_PLG_MOD_LOG
						(PML_ORDR_NO,
						PML_STCK_CD,
						PML_ORDR_QTY,
						PML_ORDR_TM,
						PML_HAIRCUT,
						PML_ORDR_VL,
						PML_ISIN_NO,
						PML_DP_CLNT_ACCNT,
						PML_DP_ACCNT,
						PML_CLNT_MTCH_ACCNT,
						PML_PLG_REV_TYP,
						PML_CONF_QTY,
						PML_RJCT_QTY,
						PML_MOD_TYPE,
						PML_STTS,
						PML_MOD_CNTR,
						PML_PLCD_SQNC,
						PML_BP_ID,
						PML_CHANNEL,
						PML_RMRKS)
						VALUES
						(	:sql_pod_ref_no,
		  				:sql_stk_stck_cd,
							:sql_tifp_qty,
							sysdate,
							:sql_stk_plg_haircut,		 
	   					:sql_plg_val,
							:sql_isin_nmbr,
							:sql_dbd_dp_clnt_id,
							:sql_dbd_dp_id,
							:sql_mtch_accnt,
							'W',
							0,
							0,
							'L',
							'C',
							:sql_pml_mod_cntr,
							0,
							null,
							'SYS',
							'Withdrawal Completed');
							
							if( SQLCODE !=0 )
		          {
		          	fn_errlog( c_ServiceName, "S33150", SQLMSG, c_err_msg  );
		            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		            l_acnt_id = -1;
		            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		            tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );				
		            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		          }

						EXEC SQL UPDATE PPS_PLG_PSTN SET
						PPS_W1_POS = PPS_W1_POS - :sql_tifp_qty,
						PPS_W3_POS = PPS_W3_POS + :sql_tifp_qty,
          	PPS_PLG_REV_FLG = 'W'
						WHERE PPS_STCK_CD = :sql_stk_stck_cd
						AND    pps_clm_mtch_accnt = :sql_mtch_accnt   /**  added **/
          	AND PPS_DP_ACCNT = :sql_dbd_dp_id
          	AND PPS_DP_CLNT_ACCNT = :sql_dbd_dp_clnt_id;
					
						if(SQLCODE !=0)
         	 	{
            	fn_errlog( c_ServiceName, "S33155", SQLMSG, c_err_msg  );
            	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            	l_acnt_id = -1;
            	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            	tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          	}

						EXEC SQL INSERT INTO PPL_PLG_PSTN_LOG
						(PPL_CLM_MTCH_ACCNT,
						PPL_STCK_CD,
						PPL_W1_POS_CHG,
						PPL_W3_POS_CHG,
						PPL_NET_POS_CHG,
						PPL_AVG_PVAL_CHG,
						PPL_PLG_REV_FLG,
						PPL_RMRKS)
						VALUES
						(	:sql_mtch_accnt,
					 	:sql_stk_stck_cd,
           	-:sql_tifp_qty,
					 	:sql_tifp_qty,
						:sql_tifp_qty,
					 	:sql_plg_val,
					 	'W',
					 	'Withdraw Leg 3'
						);
				
						if( SQLCODE !=0 )
          	{
          		fn_errlog( c_ServiceName, "S33160", SQLMSG, c_err_msg  );
            	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            	l_acnt_id = -1;
           	 	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            	tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          	}


						EXEC SQL
              UPDATE DBD_DP_BLCK_DTLS SET
              DBD_SAM_BLCKD_QTY = DBD_SAM_BLCKD_QTY - :sql_tifp_qty ,
              /** DBD_TOT_QTY = DBD_TOT_QTY + :sql_tifp_qty, ** Commented in Ver 1.1  **/
              DBD_REV_REQ_QTY = DBD_REV_REQ_QTY - :sql_tifp_qty
              WHERE DBD_DP_ID = :sql_dbd_dp_id
              AND DBD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
              AND dbd_clm_mtch_accnt = :sql_mtch_accnt          /**  added **/
              AND DBD_STCK_CD = :sql_stk_stck_cd;

              if( SQLCODE !=0 )
              {
                fn_errlog( c_ServiceName, "S33165", SQLMSG, c_err_msg  );
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                l_acnt_id = -1;
                Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
                tpfree ( ( char * )ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              }

					EXEC SQL
              INSERT INTO DLD_DP_LOG_DTLS
              (DLD_CLM_MTCH_ACCNT,
              DLD_DP_ID,
              DLD_DP_CLNT_ID,
              DLD_ISIN_NMBR,
              DLD_STCK_CD,
              DLD_TOT_QTY_CHG,
              DLD_QTY_BLCKD_CHG,
              DLD_PLG_REQ_QTY_CHG,
              DLD_SAM_BLCKD_QTY_CHG,
              DLD_REV_COV_QTY_CHG,
              DLD_REV_REQ_QTY_CHG,
              DLD_CHG_TM,
              DLD_BLK_FR_SALE_CHG,
              DLD_INV_REQ_QTY_CHG,
              DLD_INV_COV_QTY_CHG,
              DLD_RMRKS)
              VALUES
              (:sql_mtch_accnt,
              :sql_dbd_dp_id,
              :sql_dbd_dp_clnt_id,
              :sql_isin_nmbr,
              :sql_stk_stck_cd,
              0,/** :sql_tifp_qty, Commented in Ver 1.1 **/
              0,
              -(:sql_tifp_qty),
              -(:sql_tifp_qty),
              0,
              0,
              sysdate,
              0,
              0,
              0,
              :sql_err_desc);


              if( SQLCODE !=0 )
              {
                fn_errlog( c_ServiceName, "S33170", SQLMSG, c_err_msg  );
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
                l_acnt_id = -1;
                Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
                tpfree ( ( char * )ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              }


						fn_userlog( c_ServiceName," Acceptance of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);   /**  **/
						sprintf(c_msg,"Acceptance of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/
						BAT_POST(c_msg);
         /***  Starts ***/             
            fn_userlog(c_ServiceName,"Sens sms/mail....");
            if ( fn_mrgplg_sms_mail(c_ServiceName,sql_mtch_accnt.arr,0,UNPLG_SUCC) != 0 )
            {
               fn_errlog( c_ServiceName, "S33175", LIBMSG, c_err_msg  );
               fn_userlog(c_ServiceName,"Error in fn_mrgplg_sms..");
            }
         /***  Ends ***/
					}	
			
					else
/*  commented sql_rtn_stts in If condition   
	if ((sql_rtn_stts == 1) && (strcmp(sql_plg_stts.arr,"REJ")==0))*/
					if (strcmp(sql_plg_stts.arr,"REJ")==0)
					{

						sql_rtn_stts =1 ; /**/
						
						EXEC SQL 
						UPDATE PTD_TIFP_DTLS SET
						/*** PTD_LEG_NO = 'W3',
						PTD_TIFP_STTS = 'J',		*** Commented for Ver 1.8 ****/
						PTD_TIFP_RUN_DT = sysdate,
						/* PTD_EXCTN_DT = :sql_execn_date,--commented for the ver 1.7 */
						PTD_EXCTN_DT = :c_conf_date,  /* ver 1.7 */
            PTD_RMRKS = trim(:sql_err_desc)    /** Ver 1.6  **/           
						WHERE PTD_DP_ID = :sql_dbd_dp_id
						AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
						AND PTD_ISIN_NMBR = :sql_isin_nmbr
						AND PTD_PLG_REV_TYP = 'W'
						AND PTD_TIFP_STTS = 'P'
						AND PTD_LEG_NO = 'W1'
            AND trim(PTD_POD_REF_NO) = trim(:sql_pod_ref_no)
            AND PTD_DPM_NMBR = :sql_pon_nmbr;

			    	if( SQLCODE !=0 )
      			{
        			fn_errlog( c_ServiceName, "S33180", SQLMSG, c_err_msg  );
        			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			l_acnt_id = -1;
        			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			}
            /** starts **/
            EXEC SQL
            DECLARE ptd_cur_rej CURSOR FOR
                  SELECT  ptd_plg_vs_wd_qty,
                          ptd_clm_mtch_accnt ,
                          ptd_dp_id ,
                          ptd_dp_clnt_id ,
                          ptd_isin_nmbr ,
                          ptd_dpm_nmbr
                  FROM    ptd_tifp_dtls
                  WHERE   trim(ptd_pod_ref_no) = trim(:sql_pod_ref_no)
									AND     PTD_DPM_NMBR         = :sql_pon_nmbr    /***  ***/
                  AND     ptd_plg_rev_typ = 'W';



            if( SQLCODE !=0 )
            {
              fn_errlog( c_ServiceName, "S33185", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              l_acnt_id = -1;
              Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
              tpfree ( ( char * )ptr_fml_Obuf);
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

            EXEC SQL
            OPEN ptd_cur_rej;

            if ( SQLCODE != 0 )
            {
                fn_errlog( c_ServiceName, "S33190", SQLMSG, c_err_msg  );
                fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
                EXEC SQL CLOSE ptd_cur_rej;
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

             while(1)
            {

                MEMSET(sql_mtch_accnt_1);
                MEMSET(sql_dbd_dp_id_1);
                MEMSET(sql_dbd_dp_clnt_id_1);
                MEMSET(sql_isin_nmbr_1);

                EXEC SQL
                FETCH ptd_cur_rej
                INTO
                      :sql_plg_vs_wd_qty_rej,
                      :sql_mtch_accnt_1,
                      :sql_dbd_dp_id_1,
                      :sql_dbd_dp_clnt_id_1,
                      :sql_isin_nmbr_1,
                      :sql_dpm_nmbr_rej;

                if ( SQLCODE != 0 )
                {
                    if ( SQLCODE == NO_DATA_FOUND )
                    {
                        EXEC SQL CLOSE ptd_cur_rej;
                        break;
                    }
                    else
                    {
                        EXEC SQL CLOSE ptd_cur_rej;
                        fn_errlog( c_ServiceName, "S33195", SQLMSG, c_err_msg  );
                        fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
                        fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
                        break;
                    }
                }


                SETNULL(sql_mtch_accnt_1);
                SETNULL(sql_dbd_dp_id_1);
                SETNULL(sql_dbd_dp_clnt_id_1);
                SETNULL(sql_isin_nmbr_1);

								/*** Commented for Ver 1.8 ***
                EXEC SQL
                     UPDATE ptd_tifp_dtls
                     SET    ptd_plg_vs_wd_qty = ptd_plg_vs_wd_qty - :sql_plg_vs_wd_qty_rej
                     WHERE  ptd_dpm_nmbr        = :sql_dpm_nmbr_rej
                     AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt_1
                     AND    ptd_dp_id           = :sql_dbd_dp_id_1
                     AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id_1
                     AND    ptd_isin_nmbr       = :sql_isin_nmbr_1
                     AND    ptd_plg_rev_typ     = 'P'
                     AND    ptd_leg_no          = 'L5';

                if ( SQLCODE != 0 )
                {
                  fn_errlog( c_ServiceName, "S33200", SQLMSG, c_err_msg  );
                  fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
                  EXEC SQL CLOSE ptd_cur_rej;
                  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                }
								**** Commented for Ver 1.8 ***/

             }

            /**  ends **/
						/*** Commented for ver 1.8 ****
						EXEC SQL UPDATE POD_PLG_ORDR_DTLS SET
						POD_RJCT_QTY = POD_RJCT_QTY + :sql_tifp_qty,
						POD_CONF_QTY = POD_CONF_QTY - :sql_tifp_qty,
						POD_ORDR_STTS = decode((POD_ORDR_QTY - (POD_CONF_QTY + POD_RJCT_QTY)),0,'J','I'), 
            POD_RMRKS = decode((POD_ORDR_QTY - (POD_CONF_QTY + POD_RJCT_QTY)),0,trim(:sql_err_desc),'')
						WHERE trim(POD_ORDR_NO) = TRIM(:sql_pod_ref_no)
            AND    POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND POD_PLG_REV_TYP = 'W';

						if( SQLCODE !=0 )
						{
						  fn_errlog( c_ServiceName, "S33205", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						  l_acnt_id = -1;
						  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						  tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
						
						**** Ver 1.8 ***/

						EXEC SQL SELECT (COUNT(*)+1) INTO :sql_pml_mod_cntr
						FROM PML_PLG_MOD_LOG
						WHERE PML_ORDR_NO = TRIM(:sql_pod_ref_no)
            AND    PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND PML_MOD_TYPE IN ('N','M','C','J');
	
						if( SQLCODE !=0 )
					  {
							fn_errlog( c_ServiceName, "S33210", SQLMSG, c_err_msg  );
       				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					    l_acnt_id = -1;
					    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					    tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );       
					    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					  }

						EXEC SQL INSERT INTO PML_PLG_MOD_LOG
							(PML_ORDR_NO,
							PML_STCK_CD,
							PML_ORDR_QTY,
							PML_ORDR_TM,
							PML_HAIRCUT,
							PML_ORDR_VL,
							PML_ISIN_NO,
							PML_DP_CLNT_ACCNT,
							PML_DP_ACCNT,
							PML_CLNT_MTCH_ACCNT,
							PML_PLG_REV_TYP,
							PML_CONF_QTY,
							PML_RJCT_QTY,
							PML_MOD_TYPE,
							PML_STTS,
							PML_MOD_CNTR,
							PML_PLCD_SQNC,
							PML_BP_ID,
							PML_CHANNEL,
							PML_RMRKS)
							VALUES
							(	:sql_pod_ref_no,
			  				:sql_stk_stck_cd,
								:sql_tifp_qty,
								sysdate,
								:sql_stk_plg_haircut,		 
		   					:sql_plg_val,
								:sql_isin_nmbr,
								:sql_dbd_dp_clnt_id,
								:sql_dbd_dp_id,
								:sql_mtch_accnt,
								'W',
								0,
								0,
								'J',
								'C',
								:sql_pml_mod_cntr,
								0,
								null,
								'SYS',
								:sql_err_desc);
							
							if( SQLCODE !=0 )
		          {
		          	fn_errlog( c_ServiceName, "S33215", SQLMSG, c_err_msg  );
		            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		            l_acnt_id = -1;
		            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		            tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );           
		            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		          }
					
						/*** Commented for Ver 1.8 *****

						EXEC SQL UPDATE DBD_DP_BLCK_DTLS SET
						**DBD_REV_REQ_QTY = DBD_REV_REQ_QTY - :sql_tifp_qty, commented for  **
						DBD_REV_REQ_QTY = DBD_REV_REQ_QTY - :sql_tifp_qty
						** DBD_SAM_BLCKD_QTY = DBD_SAM_BLCKD_QTY + :sql_tifp_qty ***
						WHERE DBD_DP_ID = :sql_dbd_dp_id
						AND DBD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
						AND dbd_clm_mtch_accnt = :sql_mtch_accnt
						AND DBD_STCK_CD = :sql_stk_stck_cd
						RETURNING DBD_TOT_QTY , DBD_QTY_BLCKD
						INTO :sql_dbd_tot_qty, :sql_dbd_qty_blckd;
			   	 	
						if( SQLCODE !=0 )
      			{
        			fn_errlog( c_ServiceName, "S33220", SQLMSG, c_err_msg  );
        			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			l_acnt_id = -1;
        			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			}
	
            **  starts  **

            EXEC SQL
            UPDATE PPS_PLG_PSTN SET
            PPS_W1_POS      = PPS_W1_POS - :sql_tifp_qty,
            PPS_NET_POS     = PPS_NET_POS + :sql_tifp_qty,
            PPS_L5_POS      = PPS_L5_POS + :sql_tifp_qty,
            PPS_PLG_REV_FLG = 'P'
            WHERE PPS_STCK_CD     = :sql_stk_stck_cd
            AND PPS_DP_ACCNT      = :sql_dbd_dp_id
            AND PPS_DP_CLNT_ACCNT = :sql_dbd_dp_clnt_id
						AND PPS_CLM_MTCH_ACCNT = :sql_mtch_accnt;

            if(SQLCODE !=0)
            {
              fn_errlog( c_ServiceName, "S33225", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              l_acnt_id = -1;
              Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
              tpfree ( ( char * )ptr_fml_Obuf);
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char*)ptr_fml_Ibuf, 0, 0 );
            }

            **  ends **
			

						EXEC SQL 
						UPDATE FAB_FO_ALC_BFT_SMRY SET
						**FAB_PLG_AMT = FAB_PLG_AMT + :sql_plg_val *Commented **
						FAB_NWB_AMT = FAB_NWB_AMT + :sql_plg_val 			
						where FAB_CLM_MTCH_ACCNT = :sql_mtch_accnt
						RETURNING FAB_BNK_ACCNT, FAB_ALCTD_AMT, 
						FAB_BFT_AMT , FAB_PLG_AMT , 
						FAB_NWB_AMT																		
						INTO :sql_fab_bnk_accnt, :sql_fab_alctd_amt,
						:sql_fab_bft_amt, :sql_fab_plg_amt , 
						:sql_fab_nwb_amt;															

						if( SQLCODE !=0 )
           	{
             	fn_errlog( c_ServiceName, "S33230", SQLMSG, c_err_msg  );
             	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
             	l_acnt_id = -1;
             	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
             	tpfree ( ( char * )ptr_fml_Obuf);
             	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
             	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
           	}
	
						EXEC SQL INSERT INTO FAL_FO_ALCBFT_LOG
						(FAL_CLM_MTCH_ACCNT,
						FAL_BNK_ACCNT,
						FAL_ALCTD_AMT,
						FAL_BFT_AMT,
						FAL_TRN_DT,
						FAL_OLD_PLG_AMT,
						** FAL_PLG_CHG_AMT, **					 
						FAL_NARRATION,
						FAL_NWB_AMT,										
						FAL_NWB_CHG_AMT)								
						VALUES
						(:sql_mtch_accnt,
						:sql_fab_bnk_accnt,
						:sql_fab_alctd_amt,
						:sql_fab_bft_amt,
						sysdate,
						:sql_fab_plg_amt,
						** :sql_plg_val,  **           
						substr(:sql_err_desc,1,59),
						:sql_fab_nwb_amt,								
						:sql_plg_val);									

						if( SQLCODE !=0 )
           	{
             	fn_errlog( c_ServiceName, "S33235", SQLMSG, c_err_msg  );
             	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
             	l_acnt_id = -1;
             	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
             	tpfree ( ( char * )ptr_fml_Obuf);
             	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
             	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
           	}



						EXEC SQL INSERT INTO DLD_DP_LOG_DTLS
						(DLD_CLM_MTCH_ACCNT,
						DLD_DP_ID,
						DLD_DP_CLNT_ID,
						DLD_ISIN_NMBR,
						DLD_STCK_CD,
						DLD_TOT_QTY_CHG,
						DLD_QTY_BLCKD_CHG,
						DLD_PLG_REQ_QTY_CHG,
						DLD_SAM_BLCKD_QTY_CHG,
						DLD_REV_COV_QTY_CHG,
						DLD_REV_REQ_QTY_CHG,
						DLD_CHG_TM,
						DLD_BLK_FR_SALE_CHG,
						DLD_INV_REQ_QTY_CHG,
						DLD_INV_COV_QTY_CHG,
						DLD_RMRKS)
						VALUES
						(:sql_mtch_accnt,
						:sql_dbd_dp_id,
						:sql_dbd_dp_clnt_id,
						:sql_isin_nmbr,
						:sql_stk_stck_cd,
						0,
						0,
						0,
						0,
						0,
						:sql_tifp_qty,
						sysdate,
						0,
						0,
						0,
						:sql_err_desc);

						
						if( SQLCODE !=0 )
           	{
             	fn_errlog( c_ServiceName, "S33240", SQLMSG, c_err_msg  );
             	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
             	l_acnt_id = -1;
             	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
             	tpfree ( ( char * )ptr_fml_Obuf);
             	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
             	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
           	}

						**** Comment ends ***/

						fn_userlog( c_ServiceName," Rejection of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);   /**  **/
						sprintf(c_msg,"Rejection of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);    /**  **/
						BAT_POST(c_msg);
						memset(c_msg,'\0',sizeof(c_msg));
						strncpy(c_msg,sql_err_desc.arr,254);
						BAT_POST(c_msg);

					}
					/***  starts ***/
 					else if( sql_rtn_stts == 0 && (strcmp(sql_plg_stts.arr,"CCN")==0) 
							&& (i_call_dp_flg == 1 ) && (l_rej_qty != 0) && (&l_conf_qty != 0) )				
					{				
						if(DEBUG_MSG_LVL_3)
						{									
							fn_userlog(c_ServiceName,"Partial Rejection case  of Closure confirmation for NSDL client  ");	
							fn_userlog(c_ServiceName," Updating withdrwawl request... ");	
						}


						EXEC SQL UPDATE PTD_TIFP_DTLS SET
						/*** PTD_LEG_NO = 'W3',	**** COmmented for Ver 1.8 **/
						ptd_plg_vs_wd_qty = ptd_plg_vs_wd_qty - :l_rej_qty,    /*** Reducing the rejected qty ,need to confirm ***/
						ptd_tifp_qty      = ptd_tifp_qty      - :l_rej_qty,    /*** Reducing the rejected qty ,need to confirm ***/
						PTD_TIFP_RUN_DT = sysdate,
						PTD_EXCTN_DT = :c_conf_date 
						WHERE PTD_DP_ID = :sql_dbd_dp_id
						AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
						AND PTD_ISIN_NMBR = :sql_isin_nmbr
						AND PTD_PLG_REV_TYP = 'W'
						AND PTD_TIFP_STTS = 'P'
						AND PTD_LEG_NO = 'W1'
						AND trim(PTD_POD_REF_NO) = trim(:sql_pod_ref_no)
						AND PTD_DPM_NMBR = :sql_pon_nmbr ;

						if( SQLCODE !=0 )
						{
							fn_errlog( c_ServiceName, "S33245", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							l_acnt_id = -1;
							Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
							tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
						
						if(DEBUG_MSG_LVL_5)
						{
							fn_userlog(c_ServiceName," Updating pledge  request against which withdrwawl was placed ... ");
						}

						 EXEC SQL
						 DECLARE ptd_cur_partrej CURSOR FOR
									 SELECT  ptd_plg_vs_wd_qty,
													 ptd_clm_mtch_accnt ,
													 ptd_dp_id ,
													 ptd_dp_clnt_id ,
													 ptd_isin_nmbr ,
													 ptd_dpm_nmbr
									 FROM    ptd_tifp_dtls
									 WHERE   trim(ptd_pod_ref_no) = trim(:sql_pod_ref_no)
									 AND     PTD_DPM_NMBR         = :sql_pon_nmbr   
									 AND     ptd_plg_rev_typ = 'W';

						 if( SQLCODE !=0 )
						 {
							 fn_errlog( c_ServiceName, "S33250", SQLMSG, c_err_msg  );
							 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							 l_acnt_id = -1;
							 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
							 tpfree ( ( char * )ptr_fml_Obuf);
							 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						 }


						 EXEC SQL
						 OPEN ptd_cur_partrej;

						 if ( SQLCODE != 0 )
						 {
								 fn_errlog( c_ServiceName, "S33255", SQLMSG, c_err_msg  );
								 fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
								 EXEC SQL CLOSE ptd_cur_rej;
								 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     				 }

							while(1)
						 {

								 MEMSET(sql_mtch_accnt_1);
								 MEMSET(sql_dbd_dp_id_1);
								 MEMSET(sql_dbd_dp_clnt_id_1);
								 MEMSET(sql_isin_nmbr_1);

								 EXEC SQL
								 FETCH ptd_cur_partrej 
								 INTO
											 :sql_plg_vs_wd_qty_rej,
											 :sql_mtch_accnt_1,
											 :sql_dbd_dp_id_1,
											 :sql_dbd_dp_clnt_id_1,
											 :sql_isin_nmbr_1,
											 :sql_dpm_nmbr_rej;

								 if ( SQLCODE != 0 )
								 {
										 if ( SQLCODE == NO_DATA_FOUND )
										 {
												 EXEC SQL CLOSE ptd_cur_partrej;
												 break;
										 }
										 else
										 {
												 EXEC SQL CLOSE ptd_cur_rej;
												 fn_errlog( c_ServiceName, "S33260", SQLMSG, c_err_msg  );
												 fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
												 fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
												 break;
										 }
								 }


								 SETNULL(sql_mtch_accnt_1);
								 SETNULL(sql_dbd_dp_id_1);
								 SETNULL(sql_dbd_dp_clnt_id_1);
								 SETNULL(sql_isin_nmbr_1);

								 EXEC SQL
											UPDATE ptd_tifp_dtls
											SET    ptd_plg_vs_wd_qty = ptd_plg_vs_wd_qty - :l_rej_qty    /*** Reducing the rejected qty ***/
											WHERE  ptd_dpm_nmbr        = :sql_dpm_nmbr_rej
											AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt_1
											AND    ptd_dp_id           = :sql_dbd_dp_id_1
											AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id_1
											AND    ptd_isin_nmbr       = :sql_isin_nmbr_1
											AND    ptd_plg_rev_typ     = 'P'
											AND    ptd_leg_no          = 'L5';

								 if ( SQLCODE != 0 )
								 {
									 fn_errlog( c_ServiceName, "S33265", SQLMSG, c_err_msg  );
									 fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
									 EXEC SQL CLOSE ptd_cur_partrej;
									 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								 }

							}  /*** End of while ***/

							if(DEBUG_MSG_LVL_5)
							{
								fn_userlog(c_ServiceName,"Calculating new withdrwal value based on confirmed quantity ... ");	
							}

							sql_plg_rt = 0.0;

							EXEC SQL SELECT LTQ_PLG_RT
							INTO :sql_plg_rt
							FROM LTQ_TRD_QT
							WHERE LTQ_STCK_CD = :sql_stk_stck_cd
							AND LTQ_XCHNG_CD = 'BSE';        

							if(SQLCODE !=0 )
							{
								fn_errlog( c_ServiceName, "S33270", SQLMSG, c_err_msg  );
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								l_acnt_id = -1;
								Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
								tpfree ( ( char * )ptr_fml_Obuf);
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}

							sql_conf_plg_val = 0 ;
							sql_rej_plg_val  = 0 ;

							/**** Calculating Confirmed Value ************/

							sql_conf_plg_val = (l_conf_qty * (sql_plg_rt *(1 - ((double)(sql_stk_plg_haircut)/100))))*100; 

							if((long long)(sql_conf_plg_val * 100)%100 > 50)
							{
								sql_conf_plg_val = sql_conf_plg_val + 1.0;
								fn_userlog( c_ServiceName, "The rounded off amount is [%lf]", sql_conf_plg_val );
							}
							
							ll_plg_val = 0;
			
							ll_plg_val = (long long) sql_conf_plg_val;

							sql_conf_plg_val = (double) ll_plg_val;

							
							/**** Calculating rejected Value ************/

							sql_rej_plg_val = (l_rej_qty * (sql_plg_rt *(1 - ((double)(sql_stk_plg_haircut)/100))))*100;

              if((long long)(sql_rej_plg_val * 100)%100 > 50)
              {
                sql_rej_plg_val = sql_rej_plg_val + 1.0;
                fn_userlog( c_ServiceName, "The rounded off amount is [%lf]", sql_rej_plg_val );
              }

              ll_plg_val = 0;

              ll_plg_val = (long long) sql_rej_plg_val ;

              sql_rej_plg_val = (double) ll_plg_val;
				
							if(DEBUG_MSG_LVL_3)
							{
								fn_userlog(c_ServiceName,"Calculating new withdrwal value based on confirmed quantity Ends ... ");
								fn_userlog(c_ServiceName," l_conf_qty Is :%ld:",l_conf_qty);
								fn_userlog(c_ServiceName," l_rej_qty Is :%ld:",l_rej_qty);
								fn_userlog(c_ServiceName," sql_plg_rt Is :%lf:",sql_plg_rt);
								fn_userlog(c_ServiceName," sql_conf_plg_val Is :%:lf",sql_conf_plg_val);
								fn_userlog(c_ServiceName," sql_rej_plg_val Is :%lf:",sql_rej_plg_val);
							}	

							/*** Commented for Ver 1.8 ***

							EXEC SQL UPDATE POD_PLG_ORDR_DTLS 
							SET POD_RJCT_QTY = POD_RJCT_QTY + :l_rej_qty,
							POD_CONF_QTY     = POD_CONF_QTY - :l_rej_qty,
							POD_ORDR_STTS = decode((POD_ORDR_QTY - (POD_CONF_QTY + POD_RJCT_QTY)),0,'C','I'),
              POD_RMRKS = decode((POD_ORDR_QTY - (POD_CONF_QTY + POD_RJCT_QTY)),0,'Success','')  
							WHERE trim(POD_ORDR_NO) = TRIM(:sql_pod_ref_no)
              AND    POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
							AND POD_PLG_REV_TYP = 'W';

							if( SQLCODE !=0 )
							{
								fn_errlog( c_ServiceName, "S33275", SQLMSG, c_err_msg  );
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								l_acnt_id = -1;
								Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
								tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}

							**** Ver 1.8 ***/

							EXEC SQL SELECT (COUNT(*)+1) 
							INTO :sql_pml_mod_cntr
							FROM PML_PLG_MOD_LOG
							WHERE PML_ORDR_NO = TRIM(:sql_pod_ref_no)
              AND    PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
							AND PML_MOD_TYPE IN ('N','M','C','J');
	
							if( SQLCODE !=0 )
							{
								fn_errlog( c_ServiceName, "S33280", SQLMSG, c_err_msg  );
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								l_acnt_id = -1;
								Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
								tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );        
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}


							if(DEBUG_MSG_LVL_5)
							{	
								fn_userlog(c_ServiceName,"Forming withdrwawl rejection remarks  ... ");	
							}

							EXEC SQL 
							SELECT 'Partial Withdrwal Completed .'||TRIM(:sql_err_desc)
							INTO :sql_temp_err_desc
							FROM dual ;
					
							if(DEBUG_MSG_LVL_5)
							{	
								fn_userlog(c_ServiceName,"sql_err_desc Is :%s: ",sql_temp_err_desc.arr);	
							}	

							EXEC SQL INSERT INTO PML_PLG_MOD_LOG
							(PML_ORDR_NO,
							PML_STCK_CD,
							PML_ORDR_QTY,
							PML_ORDR_TM,
							PML_HAIRCUT,
							PML_ORDR_VL,
							PML_ISIN_NO,
							PML_DP_CLNT_ACCNT,
							PML_DP_ACCNT,
							PML_CLNT_MTCH_ACCNT,
							PML_PLG_REV_TYP,
							PML_CONF_QTY,
							PML_RJCT_QTY,
							PML_MOD_TYPE,
							PML_STTS,
							PML_MOD_CNTR,
							PML_PLCD_SQNC,
							PML_BP_ID,
							PML_CHANNEL,
							PML_RMRKS)
							VALUES
							(	:sql_pod_ref_no,
								:sql_stk_stck_cd,
								:l_rej_qty,                  /*** Sending only rejected qty instead of total qty ***/
								sysdate,
								:sql_stk_plg_haircut,		 
								:sql_rej_plg_val,						 /*** Sending only rejected value instead of total qty ***/
								:sql_isin_nmbr,
								:sql_dbd_dp_clnt_id,
								:sql_dbd_dp_id,
								:sql_mtch_accnt,
								'W',
								:l_conf_qty,
								:l_rej_qty,
								'J',
								'C',
								:sql_pml_mod_cntr,
								0,
								null,
								'SYS',
							  :sql_temp_err_desc	
							);
				
							if( SQLCODE !=0 )
							{
								fn_errlog( c_ServiceName, "S33285", SQLMSG, c_err_msg  );
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								l_acnt_id = -1;
								Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
								tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );						
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}

								if(DEBUG_MSG_LVL_5)
								{
									fn_userlog(c_ServiceName," Updating PPS table  ... ");
								}	

								l_tot_qty = 0 ;
								l_tot_qty = l_conf_qty + l_rej_qty ;

								EXEC SQL UPDATE PPS_PLG_PSTN SET
								PPS_W1_POS			= PPS_W1_POS	- :l_tot_qty ,
								PPS_W3_POS			= PPS_W3_POS	+ :l_conf_qty,
								PPS_NET_POS     = PPS_NET_POS + :l_rej_qty,
								PPS_L5_POS      = PPS_L5_POS	+ :l_rej_qty,
								PPS_PLG_REV_FLG = 'W'
								WHERE PPS_STCK_CD					= :sql_stk_stck_cd
								AND PPS_CLM_MTCH_ACCNT		= :sql_mtch_accnt   
								AND PPS_DP_ACCNT					= :sql_dbd_dp_id
								AND PPS_DP_CLNT_ACCNT			= :sql_dbd_dp_clnt_id;
	
								if(SQLCODE !=0)
								{
									fn_errlog( c_ServiceName, "S33290", SQLMSG, c_err_msg  );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
									l_acnt_id = -1;
									Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
									tpfree ( ( char * )ptr_fml_Obuf);
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}

								EXEC SQL INSERT INTO PPL_PLG_PSTN_LOG
								(PPL_CLM_MTCH_ACCNT,
								PPL_STCK_CD,
								PPL_W1_POS_CHG,
								PPL_W3_POS_CHG,
								PPL_NET_POS_CHG,
								PPL_AVG_PVAL_CHG,
								PPL_PLG_REV_FLG,
								PPL_RMRKS)
								VALUES
								(	:sql_mtch_accnt,
								:sql_stk_stck_cd,
								-:l_tot_qty,
								:l_conf_qty,
								:l_conf_qty,
								:sql_conf_plg_val,
								'W',
								'Partial-Withdraw Leg 3'
								);
					
								if( SQLCODE !=0 )
								{
									fn_errlog( c_ServiceName, "S33295", SQLMSG, c_err_msg  );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
									l_acnt_id = -1;
									Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
									tpfree ( ( char * )ptr_fml_Obuf);
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}


								if(DEBUG_MSG_LVL_5)
								{
									fn_userlog(c_ServiceName," Updating DBD table  ... ");
								}	

								/*** Commented for Ver 1.8 ***

								EXEC SQL
              		UPDATE DBD_DP_BLCK_DTLS SET
              		DBD_SAM_BLCKD_QTY = DBD_SAM_BLCKD_QTY - :l_conf_qty ,
              		** DBD_TOT_QTY = DBD_TOT_QTY + :l_conf_qty, ** Commented in Ver 1.1  **
              		DBD_REV_REQ_QTY = DBD_REV_REQ_QTY - :l_tot_qty
              		WHERE DBD_DP_ID = :sql_dbd_dp_id
              		AND DBD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
              		AND dbd_clm_mtch_accnt = :sql_mtch_accnt
              		AND DBD_STCK_CD = :sql_stk_stck_cd;

							***** Commented by Samip ***

								EXEC SQL UPDATE DBD_DP_BLCK_DTLS SET
								DBD_SAM_BLCKD_QTY = DBD_SAM_BLCKD_QTY + :l_rej_qty
								WHERE DBD_DP_ID = :sql_dbd_dp_id
								AND DBD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
								AND dbd_clm_mtch_accnt = :sql_mtch_accnt
								AND DBD_STCK_CD = :sql_stk_stck_cd
								RETURNING DBD_TOT_QTY , DBD_QTY_BLCKD
								INTO :sql_dbd_tot_qty, :sql_dbd_qty_blckd;

							***
		 	
								if( SQLCODE !=0 )
								{
									fn_errlog( c_ServiceName, "S33300", SQLMSG, c_err_msg  );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
									l_acnt_id = -1;
									Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
									tpfree ( ( char * )ptr_fml_Obuf);
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}

								if(DEBUG_MSG_LVL_5)
								{	
									fn_userlog(c_ServiceName," Updating FAB table  ... ");
								}	
     

								EXEC SQL 
								UPDATE FAB_FO_ALC_BFT_SMRY SET
								FAB_NWB_AMT = FAB_NWB_AMT + :sql_rej_plg_val
								where FAB_CLM_MTCH_ACCNT = :sql_mtch_accnt
								RETURNING FAB_BNK_ACCNT, FAB_ALCTD_AMT, 
								FAB_BFT_AMT , FAB_PLG_AMT , 
								FAB_NWB_AMT																		
								INTO :sql_fab_bnk_accnt, :sql_fab_alctd_amt,
								:sql_fab_bft_amt, :sql_fab_plg_amt , 
								:sql_fab_nwb_amt;															

								if( SQLCODE !=0 )
								{
									fn_errlog( c_ServiceName, "S33305", SQLMSG, c_err_msg  );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
									l_acnt_id = -1;
									Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
									tpfree ( ( char * )ptr_fml_Obuf);
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}
	
								EXEC SQL INSERT INTO FAL_FO_ALCBFT_LOG
								(FAL_CLM_MTCH_ACCNT,
								FAL_BNK_ACCNT,
								FAL_ALCTD_AMT,
								FAL_BFT_AMT,
								FAL_TRN_DT,
								FAL_OLD_PLG_AMT,
								FAL_NARRATION,
								FAL_NWB_AMT,										
								FAL_NWB_CHG_AMT)								
								VALUES
								(:sql_mtch_accnt,
								:sql_fab_bnk_accnt,
								:sql_fab_alctd_amt,
								:sql_fab_bft_amt,
								sysdate,
								:sql_fab_plg_amt,
								substr(:sql_err_desc,1,59),
								:sql_fab_nwb_amt,								
								:sql_rej_plg_val);									

								if( SQLCODE !=0 )
								{
									fn_errlog( c_ServiceName, "S33310", SQLMSG, c_err_msg  );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
									l_acnt_id = -1;
									Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
									tpfree ( ( char * )ptr_fml_Obuf);
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}

								
								EXEC SQL INSERT INTO DLD_DP_LOG_DTLS
								(DLD_CLM_MTCH_ACCNT,
								DLD_DP_ID,
								DLD_DP_CLNT_ID,
								DLD_ISIN_NMBR,
								DLD_STCK_CD,
								DLD_TOT_QTY_CHG,
								DLD_QTY_BLCKD_CHG,
								DLD_PLG_REQ_QTY_CHG,
								DLD_SAM_BLCKD_QTY_CHG,
								DLD_REV_COV_QTY_CHG,
								DLD_REV_REQ_QTY_CHG,
								DLD_CHG_TM,
								DLD_BLK_FR_SALE_CHG,
								DLD_INV_REQ_QTY_CHG,
								DLD_INV_COV_QTY_CHG,
								DLD_RMRKS)
								VALUES
								(:sql_mtch_accnt,
								:sql_dbd_dp_id,
								:sql_dbd_dp_clnt_id,
								:sql_isin_nmbr,
								:sql_stk_stck_cd,
								0, ** :l_conf_qty, Commented in Ver 1.1  **
								0,
								0,
								-(:l_conf_qty),
								0,
								-(:l_tot_qty),
								sysdate,
								0,
								0,
								0,
								:sql_err_desc);

		
								if( SQLCODE !=0 )
								{
									fn_errlog( c_ServiceName, "S33315", SQLMSG, c_err_msg  );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
									l_acnt_id = -1;
									Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
									tpfree ( ( char * )ptr_fml_Obuf);
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}
								**** Comment ends for Ver 1.8 ****/	

								fn_userlog( c_ServiceName," Partial Acceptance of accnt [%s] for stck [%s] for PON number [%lf]",
																						sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  
								sprintf(c_msg," Partial Acceptance of accnt [%s] for stck [%s] for PON number [%lf] ",
																sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  
								BAT_POST(c_msg);
								/*** Need to check wat following does ***/
								memset(c_msg,'\0',sizeof(c_msg));
								strncpy(c_msg,sql_err_desc.arr,254);
								BAT_POST(c_msg);

					}
					/***  Ends ***/
					else
					{
						fn_userlog( c_ServiceName," Skipping record of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/
						sprintf(c_msg,"Skipping record of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);    /**  **/
						BAT_POST(c_msg);
						memset(c_msg,'\0',sizeof(c_msg));
						strncpy(c_msg,sql_err_desc.arr,254);
						BAT_POST(c_msg);
					}

				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
     		{
    			fn_errlog( c_ServiceName, "S33320", TPMSG, c_err_msg  );
     			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       		l_acnt_id = -1;
       		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       		tpfree (( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
				}	
				
				tpfree((char *)ptr_fml_Sbuf);
      	tpfree((char *)ptr_fml_Rbuf);

				}

			tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );
		}	
		
		else
	/* Invocation Confirmation*/
		if( sql_plg_typ == 'I' )
		{

			i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  		if ( i_trnsctn == -1 )
  		{
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		fn_errlog( c_ServiceName, "S33325",LIBMSG,c_err_msg);
    		l_acnt_id = -1;
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    		tpfree ( ( char * )ptr_fml_Obuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

			EXEC SQL DELETE FROM TEMP_PLG_RECORDS;
			if((SQLCODE !=0) && (SQLCODE!= NO_DATA_FOUND) )
  		{
    		fn_errlog( c_ServiceName, "S33330", SQLMSG, c_err_msg  );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		l_acnt_id = -1;
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}
		
				EXEC SQL INSERT INTO TEMP_PLG_RECORDS
				(TMP_TIFP_QTY, 
				TMP_PLG_REV_TYP,
				TMP_ISIN_NMBR,
				TMP_DP_ID,
				TMP_DP_CLNT_ID,
				TMP_POD_REF_NO,
				TMP_STCK_CD,
				TMP_CLM_MTCH_ACCNT,
				TMP_SLIPNO_I1)
				( SELECT 
				PTD_TIFP_QTY,
				'I',
				PTD_ISIN_NMBR,
				PTD_DP_ID,
				PTD_DP_CLNT_ID,
				PTD_POD_REF_NO,
				PTD_STCK_CD,
				PTD_CLM_MTCH_ACCNT,
				PTD_SLIPNO_I1 
				FROM PTD_TIFP_DTLS
				WHERE PTD_PLG_REV_TYP='I' 
				AND PTD_TIFP_STTS = 'P'
				AND PTD_LEG_NO = 'I1');

				if( SQLCODE !=0 )
  			{
    			fn_errlog( c_ServiceName, "S33335", SQLMSG, c_err_msg  );
    			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			l_acnt_id = -1;
    			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  			}

			if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   		{
				fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
    		fn_errlog( c_ServiceName, "S33340", TPMSG, c_err_msg  );
   			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     		l_acnt_id = -1;
     		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     		tpfree (( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
			}	

			EXEC SQL SELECT COUNT(*) INTO :l_rec_cnt
			FROM TEMP_PLG_RECORDS;

			if( l_rec_cnt == 0 )
			{
				strcpy(c_err_msg,"There are no records in Invoke status");
				BAT_POST(c_err_msg);
				fn_userlog(c_ServiceName,"There are no records in Pledge status");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			fn_userlog( c_ServiceName,"[%ld] number of records for invoke confirmation",l_rec_cnt);
			sprintf(c_msg," %ld number of records for invoke confirmation",l_rec_cnt);
			BAT_POST(c_msg);

			for( i = 0; i < l_rec_cnt ; i++)
			{

      fn_userlog(c_ServiceName,"Processing record :%d: of total records :%ld:",i+1,l_rec_cnt);

			i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
     	if ( i_trnsctn == -1 )
     		{
     			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     			fn_errlog( c_ServiceName, "S33345",LIBMSG,c_err_msg);
     			l_acnt_id = -1;
     			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     			tpfree ( ( char * )ptr_fml_Obuf);
     			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     		}
			
				sql_tifp_qty = 0;
				MEMSET(sql_isin_nmbr);
				MEMSET(sql_pod_ref_no);
				MEMSET(sql_mtch_accnt);
				MEMSET(sql_plg_stts);
				MEMSET(sql_err_cd);
				MEMSET(sql_err_desc);
				sql_pon_nmbr = 0.0; /**  **/
				MEMSET(sql_rej_desc);
			 	MEMSET(c_conf_date); /*ver 1.7*/

				EXEC SQL SELECT TMP_TIFP_QTY, TMP_ISIN_NMBR, TMP_DP_ID,
				TMP_DP_CLNT_ID, TMP_POD_REF_NO,	TMP_STCK_CD,
				TMP_CLM_MTCH_ACCNT,	TMP_SLIPNO_I1 
				INTO :sql_tifp_qty, :sql_isin_nmbr, :sql_dbd_dp_id,
				:sql_dbd_dp_clnt_id, :sql_pod_ref_no, :sql_stk_stck_cd,
				:sql_mtch_accnt, :sql_creation_slip_no
				FROM TEMP_PLG_RECORDS
				where rownum < 2;


				if( SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
				{
					fn_errlog( c_ServiceName, "S33350", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				if(SQLCODE == NO_DATA_FOUND)
				{
					break;
				}
		
				EXEC SQL 
				DELETE FROM TEMP_PLG_RECORDS
				WHERE ROWNUM < 2;
				
				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S33355", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   			{
					fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
    			fn_errlog( c_ServiceName, "S33360", TPMSG, c_err_msg  );
   				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     			l_acnt_id = -1;
     			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     			tpfree (( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
				}

        /** Ver 2.0 **/

        MEMSET(c_channel);

        EXEC SQL
          SELECT NVL(PTD_CHANNEL,'SYS')
          INTO :c_channel
          FROM PTD_TIFP_DTLS
          WHERE PTD_PLG_REV_TYP='I'
          AND PTD_TIFP_STTS = 'P'
          AND PTD_LEG_NO = 'I1'
          AND PTD_CLM_MTCH_ACCNT = :sql_mtch_accnt
          AND PTD_DP_ID = :sql_dbd_dp_id
          AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
          AND PTD_SLIPNO_I1 = :sql_creation_slip_no
          AND PTD_POD_REF_NO = :sql_pod_ref_no;

        if(SQLCODE !=0 )
        {
          fn_errlog( c_ServiceName, "S33365", SQLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

       	fn_userlog(c_ServiceName,"Value of c_channel :%s:",c_channel);

        /** End for Ver 2.0 **/
			 
				sql_plg_val = 0.0;
	
				EXEC SQL SELECT LTQ_PLG_RT
				INTO :sql_plg_val
			 	FROM LTQ_TRD_QT
			 	WHERE LTQ_STCK_CD = :sql_stk_stck_cd
				AND LTQ_XCHNG_CD = 'BSE';         
		
			 	if(SQLCODE !=0 ) 
        {
        	fn_errlog( c_ServiceName, "S33370", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        	tpfree ( ( char * )ptr_fml_Obuf);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
				
        /**  EQ SAM  Get haircut percentage  **/

        i_returncode = fn_get_haircut(c_ServiceName ,
                                      sql_mtch_accnt.arr,
                                      sql_stk_stck_cd,
                                      &sql_stk_plg_haircut,
                                      c_err_msg);

        if(i_returncode == -1)
        {
          fn_errlog( c_ServiceName, "S33375", LIBMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        /**  ends ***/

				MEMSET(sql_usr_code);
        strcpy((char *)sql_usr_code.arr,"EBA");
        SETLEN(sql_usr_code);

				sql_plg_val = (sql_tifp_qty * (sql_plg_val *(1 - ((double)(sql_stk_plg_haircut)/100))))*100; /** diwa typecast of
float made double **/

				
				if((long long)(sql_plg_val  * 100)%100 > 50)
				{
					sql_plg_val = sql_plg_val + 1.0;
					fn_userlog( c_ServiceName, "The rounded off amount is [%lf]", sql_plg_val);
				}
				
				ll_plg_val = (long long) sql_plg_val;

				sql_plg_val = (double) ll_plg_val;

			  SETNULL(sql_dbd_dp_id);
			  SETNULL(sql_isin_nmbr);
			  SETNULL(sql_dbd_dp_clnt_id);
			  SETNULL(sql_pod_ref_no);
			  SETNULL(sql_mtch_accnt);
			  
				SETLEN(sql_dbd_dp_id);
			  SETLEN(sql_isin_nmbr);
			  SETLEN(sql_dbd_dp_clnt_id);
			  SETLEN(sql_pod_ref_no);
			  SETLEN(sql_mtch_accnt);
					
				if(DEBUG_MSG_LVL_3){
				fn_userlog(c_ServiceName,"The Qty for Invoke is [%ld]",sql_tifp_qty);
				fn_userlog(c_ServiceName,"The ISIN for Invoke is [%s]",sql_isin_nmbr.arr);
				fn_userlog(c_ServiceName,"The DP for Invoke is [%s]",sql_dbd_dp_id.arr);
				fn_userlog(c_ServiceName,"The Dp Client id for Invoke is [%s]",sql_dbd_dp_clnt_id.arr);
				fn_userlog(c_ServiceName,"The POD ref no. for Invoke is [%s]",sql_pod_ref_no.arr);
				fn_userlog(c_ServiceName,"The Stock Code for Invoke is [%s]",sql_stk_stck_cd);
				fn_userlog(c_ServiceName,"The Match A/C for Invoke is [%s]",sql_mtch_accnt.arr);
				fn_userlog(c_ServiceName,"The Creation Slip for Invoke is [%lld]",sql_creation_slip_no);
				}
				
				i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
     		if ( i_trnsctn == -1 )
     		{
     			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     			fn_errlog( c_ServiceName, "S33380",LIBMSG,c_err_msg);
     			l_acnt_id = -1;
     			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     			tpfree ( ( char * )ptr_fml_Obuf);
     			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     		}

				ptr_fml_Sbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
				if (ptr_fml_Sbuf == NULL)
				{
					fn_errlog(c_ServiceName, "S33385", TPMSG, c_err_msg);
					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
					Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
					tpfree((char *)ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );      
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
					}
				
				ptr_fml_Rbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
				if (ptr_fml_Rbuf == NULL)
				{
					fn_errlog(c_ServiceName, "S33390", TPMSG, c_err_msg);
					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
					Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
					tpfree((char *)ptr_fml_Obuf);
					tpfree((char *)ptr_fml_Sbuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );      
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
				}
				
				Fadd32( ptr_fml_Sbuf,FFO_OPERATION_TYP, (char *)&sql_oprn_typ,0);
        /** Ver 2.0 **/
        if(strcmp(c_channel,"SYS") == 0 )
        {
          Fadd32( ptr_fml_Sbuf, FFO_PLEDGE_TYP, (char *)"PIN",0);
        }
        else
        {
          Fadd32( ptr_fml_Sbuf, FFO_PLEDGE_TYP, (char *)"PCL",0);
        }
        /** End of Ver 2.0 **/
				/** Fadd32(ptr_fml_Sbuf,FFO_CRT_SLIP_NO,(char *)&sql_creation_slip_no,0); **/
				Fadd32(ptr_fml_Sbuf,FFO_INDEX,(char *)&sql_creation_slip_no,0);
				Fadd32(ptr_fml_Sbuf,FFO_USER_CODE,(char *)sql_usr_code.arr,0);


				/* Call DP for Invoke Confirmation*/

					i_call_dp_flg = 0 ; /***  ***/

          if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0) /** Changed '2' to '1' in  **/
          {
						i_call_dp_flg = 1 ;  /***  ***/
            fn_userlog(c_ServiceName,"Calling SFO_CALL_DP ");
            i_returncode=tpcall("SFO_CALL_DP",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
          }
          else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0) /** Changed '2' to '1' in  **/
          {
						i_call_dp_flg = 2 ;  /***  ***/
            fn_userlog(c_ServiceName,"Calling SFO_CALL_DPC ");
            i_returncode=tpcall("SFO_CALL_DPC",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
          }

          fn_userlog(c_ServiceName,"After Call i_returncode : %d ",i_returncode);

          if (i_returncode == -1)
          {
            if(tperrno == TPESVCFAIL)
            {
              if(Fget32(ptr_fml_Rbuf, FFO_ERR_MSG, 0, c_err_msg, 0 ) == -1)
              {
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
                tpfree((char *)ptr_fml_Sbuf);
                tpfree((char *)ptr_fml_Rbuf);
                tpfree((char *)ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
              }
            }
            else
            {
              fn_errlog(c_ServiceName, "S33395", TPMSG, c_err_msg);
            }

            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
            tpfree((char *)ptr_fml_Sbuf);
            tpfree((char *)ptr_fml_Rbuf);
            tpfree((char *)ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
          }

				Fget32(ptr_fml_Rbuf,FFO_PLG_STTS,0,(char *)sql_plg_stts.arr,0);
				/**	Fget32(ptr_fml_Rbuf,FFO_DPM_NO,0,(char *)&sql_pon_nmbr,0); --commented  **/
				Fget32(ptr_fml_Rbuf,FFO_JIFFY,0,(char *)&sql_pon_nmbr,0);  /**  **/
				Fget32(ptr_fml_Rbuf,FFO_RTN_STTS,0,(char *)&sql_rtn_stts,0);
				Fget32(ptr_fml_Rbuf,FFO_ERR_CD,0,(char *)sql_err_cd.arr,0);
				Fget32(ptr_fml_Rbuf,FFO_ERR_DESC,0,(char *)sql_err_desc.arr,0);
				Fget32(ptr_fml_Rbuf,FFO_REJ_DESC,0,(char *)sql_rej_desc.arr,0);
				Fget32(ptr_fml_Rbuf,FFO_RCRD_DT,0,(char *)c_conf_date.arr,0); /*ver 1.7  */


				/***  starts ***/
				l_conf_qty = 0;
				l_rej_qty  = 0;

				if (i_call_dp_flg == 1)
				{
					Fget32(ptr_fml_Rbuf,FFO_TIFP_QTY,0,(char *)&l_conf_qty,0);
					Fget32(ptr_fml_Rbuf,FFO_CANCL_QTY,0,(char *)&l_rej_qty,0);
				}

				/***  Ends 	***/
	
				SETLEN(sql_plg_stts);
				SETLEN(sql_err_cd);
				SETLEN(sql_err_desc);
				SETLEN(sql_rej_desc);
				SETLEN(c_conf_date); /* ver 1.7 */


				fn_userlog(c_ServiceName,"The plg stts [%s]",sql_plg_stts.arr);
				fn_userlog(c_ServiceName,"The pon nmbr [%lf]",sql_pon_nmbr);  /**  **/
				fn_userlog(c_ServiceName,"The rtn stts [%ld]",sql_rtn_stts);
				fn_userlog(c_ServiceName,"The err code [%s]",sql_err_cd.arr);
				fn_userlog(c_ServiceName,"The err desc [%s]",sql_err_desc.arr);
				fn_userlog(c_ServiceName,"The rej desc [%s]",sql_rej_desc.arr);
				fn_userlog(c_ServiceName,"The confirmation date form DP is [%s]",c_conf_date.arr);/*ver 1.7*/
				fn_userlog(c_ServiceName,"The confirmed quantity is [%ld]", l_conf_qty); /***  ***/
				fn_userlog(c_ServiceName,"The Rejected  quantity is [%ld]", l_rej_qty ); /***  ***/
		

				/*** if( sql_rtn_stts == 0 && (strcmp(sql_plg_stts.arr,"CIN")==0)) Commented In  ***/
				if( sql_rtn_stts == 0 && (strcmp(sql_plg_stts.arr,"CIN")==0 || strcmp(sql_plg_stts.arr,"CCN")==0) && (l_rej_qty==0) ) /***  ***/ /** Ver 2.0 CCN added **/
				{
					EXEC SQL UPDATE PTD_TIFP_DTLS SET
					PTD_LEG_NO = 'I3',
					PTD_TIFP_RUN_DT = sysdate,
				/* 	PTD_EXCTN_DT = :sql_execn_date --commented for the ver 1.7*/
					PTD_EXCTN_DT = :c_conf_date,  /* ver 1.7 */
          PTD_RMRKS = 'Success'                        /** Ver 1.6 **/
					WHERE PTD_DP_ID = :sql_dbd_dp_id
					AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
					AND PTD_ISIN_NMBR = :sql_isin_nmbr
					AND PTD_PLG_REV_TYP = 'I'
					AND PTD_TIFP_STTS = 'P'
					AND PTD_LEG_NO = 'I1'
          AND trim(PTD_POD_REF_NO) = trim(:sql_pod_ref_no)
          AND PTD_DPM_NMBR = :sql_pon_nmbr;

			  	if( SQLCODE !=0 )
      		{
        		fn_errlog( c_ServiceName, "S33400", SQLMSG, c_err_msg  );
        		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        		l_acnt_id = -1;
        		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        		tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      		}


					EXEC SQL 
					UPDATE POD_PLG_ORDR_DTLS SET
					POD_ORDR_STTS = decode((POD_ORDR_QTY - (POD_CONF_QTY + POD_RJCT_QTY)),0,'C','I'),
          POD_RMRKS = decode((POD_ORDR_QTY - (POD_CONF_QTY + POD_RJCT_QTY)),0,'Success','') 
					WHERE trim(POD_ORDR_NO) = TRIM(:sql_pod_ref_no)
          AND    POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
					AND POD_PLG_REV_TYP = 'I';

					if( SQLCODE !=0 )
					{
					  fn_errlog( c_ServiceName, "S33405", SQLMSG, c_err_msg  );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					  l_acnt_id = -1;
					  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					  tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}

					
					EXEC SQL SELECT (COUNT(*)+1) INTO :sql_pml_mod_cntr
					FROM PML_PLG_MOD_LOG
					WHERE PML_ORDR_NO = TRIM(:sql_pod_ref_no)
          AND   PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
					AND PML_MOD_TYPE IN ('N','M','C','J');

					if( SQLCODE !=0 )
				  {
						fn_errlog( c_ServiceName, "S33410", SQLMSG, c_err_msg  );
      				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				    l_acnt_id = -1;
				    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				    tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );					
				    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				  }


					EXEC SQL INSERT INTO PML_PLG_MOD_LOG
					(PML_ORDR_NO,
					PML_STCK_CD,
					PML_ORDR_QTY,
					PML_ORDR_TM,
					PML_HAIRCUT,
					PML_ORDR_VL,
					PML_ISIN_NO,
					PML_DP_CLNT_ACCNT,
					PML_DP_ACCNT,
					PML_CLNT_MTCH_ACCNT,
					PML_PLG_REV_TYP,
					PML_CONF_QTY,
					PML_RJCT_QTY,
					PML_MOD_TYPE,
					PML_STTS,
					PML_MOD_CNTR,
					PML_PLCD_SQNC,
					PML_BP_ID,
					PML_CHANNEL,
					PML_RMRKS)
					VALUES
					(	:sql_pod_ref_no,
		 				:sql_stk_stck_cd,
						:sql_tifp_qty,
						sysdate,
						:sql_stk_plg_haircut,		 
						:sql_plg_val,
						:sql_isin_nmbr,
						:sql_dbd_dp_clnt_id,
						:sql_dbd_dp_id,
						:sql_mtch_accnt,
						'I',
						0,
						0,
						'L',
						'C',
						:sql_pml_mod_cntr,
						0,
						null,
						'SYS',
						'Invocation Completed');

					if(SQLCODE !=0)
         	{
          	fn_errlog( c_ServiceName, "S33415", SQLMSG, c_err_msg  );
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          	l_acnt_id = -1;
          	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          	tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}

					EXEC SQL 
					UPDATE PPS_PLG_PSTN SET
					PPS_I1_POS = PPS_I1_POS - :sql_tifp_qty,
					PPS_I3_POS = PPS_I3_POS + :sql_tifp_qty,
        	PPS_PLG_REV_FLG = 'I'
					WHERE PPS_STCK_CD = :sql_stk_stck_cd
					AND PPS_CLM_MTCH_ACCNT = :sql_mtch_accnt   /**  added **/
        	AND PPS_DP_ACCNT = :sql_dbd_dp_id
        	AND PPS_DP_CLNT_ACCNT = :sql_dbd_dp_clnt_id;
				
					if(SQLCODE !=0)
         	{
          	fn_errlog( c_ServiceName, "S33420", SQLMSG, c_err_msg  );
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          	l_acnt_id = -1;
          	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          	tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}


					EXEC SQL 
					INSERT INTO PPL_PLG_PSTN_LOG
					(PPL_CLM_MTCH_ACCNT,
					PPL_STCK_CD,
					PPL_I1_POS_CHG,
					PPL_I3_POS_CHG,
					PPL_NET_POS_CHG,
					PPL_AVG_PVAL_CHG,
					PPL_PLG_REV_FLG,
					PPL_RMRKS)
					VALUES
					(	:sql_mtch_accnt,
				 	:sql_stk_stck_cd,
         	-:sql_tifp_qty,
				 	:sql_tifp_qty,
					:sql_tifp_qty,
				 	:sql_plg_val,
				 	'I',
				 	'Invoke Leg 3'
					);
				
					if( SQLCODE !=0 )
        	{
        		fn_errlog( c_ServiceName, "S33425", SQLMSG, c_err_msg  );
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          	l_acnt_id = -1;
         	 	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          	tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}

					EXEC SQL
              UPDATE DBD_DP_BLCK_DTLS SET
              DBD_INV_REQ_QTY = DBD_INV_REQ_QTY - :sql_tifp_qty
              WHERE DBD_DP_ID = :sql_dbd_dp_id
              AND DBD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
              AND dbd_clm_mtch_accnt = :sql_mtch_accnt
              AND DBD_STCK_CD = :sql_stk_stck_cd;

					if( SQLCODE !=0 )
        	{
        		fn_errlog( c_ServiceName, "S33430", SQLMSG, c_err_msg  );
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          	l_acnt_id = -1;
         	 	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          	tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}

					fn_userlog( c_ServiceName," Acceptance of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);    /**  **/
					sprintf(c_msg,"Acceptance of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);   /**  **/
					BAT_POST(c_msg);

				}	
			
				else
/*  commented sql_rtn_stts in If condition   
	if ((sql_rtn_stts == 1) && (strcmp(sql_plg_stts.arr,"REJ")==0))*/

				if (strcmp(sql_plg_stts.arr,"REJ")==0)
				{
					
					sql_rtn_stts =1 ; /**/

					EXEC SQL UPDATE PTD_TIFP_DTLS SET
					PTD_LEG_NO = 'I3',
					PTD_TIFP_STTS = 'J',
					PTD_TIFP_RUN_DT = sysdate,
				/* 	PTD_EXCTN_DT = :sql_execn_date --commented for the ver 1.7*/
					PTD_EXCTN_DT = :c_conf_date, /* ver 1.7 */
          PTD_RMRKS = trim(:sql_err_desc)                       /** Ver 1.6  **/
					WHERE PTD_DP_ID = :sql_dbd_dp_id
					AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
					AND PTD_ISIN_NMBR = :sql_isin_nmbr
					AND PTD_PLG_REV_TYP = 'I'
					AND PTD_TIFP_STTS = 'P'
					AND PTD_LEG_NO = 'I1'
					AND trim(PTD_POD_REF_NO) = trim(:sql_pod_ref_no)
				        AND PTD_DPM_NMBR = :sql_pon_nmbr;

			  	if( SQLCODE !=0 )
      		{
        		fn_errlog( c_ServiceName, "S33435", SQLMSG, c_err_msg  );
        		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        		l_acnt_id = -1;
        		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        		tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      		}

          /**  starts **/

          EXEC SQL
          DECLARE ptd_cur_inv_rej CURSOR FOR
                SELECT    ptd_plg_vs_wd_qty,
                          ptd_clm_mtch_accnt ,
                          ptd_dp_id ,
                          ptd_dp_clnt_id ,
                          ptd_isin_nmbr ,
                          ptd_dpm_nmbr
                FROM    ptd_tifp_dtls
                WHERE   trim(ptd_pod_ref_no) = trim(:sql_pod_ref_no)
								AND     PTD_DPM_NMBR         = :sql_pon_nmbr    /**  **/
                AND     ptd_plg_rev_typ = 'I';



          if( SQLCODE !=0 )
          {
             fn_errlog( c_ServiceName, "S33440", SQLMSG, c_err_msg  );
             Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
             l_acnt_id = -1;
             Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
             tpfree ( ( char * )ptr_fml_Obuf);
             fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
             tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }



          EXEC SQL
          OPEN ptd_cur_inv_rej;

          if ( SQLCODE != 0 )
          {
             fn_errlog( c_ServiceName, "S33445", SQLMSG, c_err_msg  );
             fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
             EXEC SQL CLOSE ptd_cur_inv_rej;
             fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
             tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

          while(1)
          {


             MEMSET(sql_mtch_accnt_1);
             MEMSET(sql_dbd_dp_id_1);
             MEMSET(sql_dbd_dp_clnt_id_1);
             MEMSET(sql_isin_nmbr_1);


             EXEC SQL
             FETCH ptd_cur_inv_rej
             INTO
                  :sql_plg_vs_wd_qty_rej,
                  :sql_mtch_accnt_1,
                  :sql_dbd_dp_id_1,
                  :sql_dbd_dp_clnt_id_1,
                  :sql_isin_nmbr_1,
                  :sql_dpm_nmbr_rej;

             if ( SQLCODE != 0 )
             {
                  if ( SQLCODE == NO_DATA_FOUND )
                  {
                      EXEC SQL CLOSE ptd_cur_inv_rej;
                      break;
                  }
                  else
                  {
                      EXEC SQL CLOSE ptd_cur_inv_rej;
                      fn_errlog( c_ServiceName, "S33450", SQLMSG, c_err_msg  );
                      fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
                      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
                      break;
                  }
              }


              SETNULL(sql_mtch_accnt_1);
              SETNULL(sql_dbd_dp_id_1);
              SETNULL(sql_dbd_dp_clnt_id_1);
              SETNULL(sql_isin_nmbr_1);

              EXEC SQL
                   UPDATE ptd_tifp_dtls
                   SET    ptd_plg_vs_wd_qty = ptd_plg_vs_wd_qty - :sql_plg_vs_wd_qty_rej
                   WHERE  ptd_dpm_nmbr        = :sql_dpm_nmbr_rej
                   AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt_1
                   AND    ptd_dp_id           = :sql_dbd_dp_id_1
                   AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id_1
                   AND    ptd_isin_nmbr       = :sql_isin_nmbr_1
                   AND    ptd_plg_rev_typ = 'P'
                   AND    ptd_leg_no      = 'L5';

              if ( SQLCODE != 0 )
              {
                fn_errlog( c_ServiceName, "S33455", SQLMSG, c_err_msg  );
                fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
                EXEC SQL CLOSE ptd_cur_inv_rej;
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              }
          }

            /**  ends **/

					EXEC SQL 
					UPDATE POD_PLG_ORDR_DTLS SET
					POD_RJCT_QTY = POD_RJCT_QTY + :sql_tifp_qty,
					POD_CONF_QTY = POD_CONF_QTY - :sql_tifp_qty,
					POD_ORDR_STTS = decode((POD_ORDR_QTY - (POD_CONF_QTY + POD_RJCT_QTY)),0,'J','I'), /***/
          POD_RMRKS = decode((POD_ORDR_QTY - (POD_CONF_QTY + POD_RJCT_QTY)),0,trim(:sql_err_desc),'')  
					WHERE trim(POD_ORDR_NO) = TRIM(:sql_pod_ref_no)
          AND    POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
					AND POD_PLG_REV_TYP = 'I';

					if( SQLCODE !=0 )
					{
					  fn_errlog( c_ServiceName, "S33460", SQLMSG, c_err_msg  );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					  l_acnt_id = -1;
					  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					  tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}

						EXEC SQL SELECT (COUNT(*)+1) INTO :sql_pml_mod_cntr
						FROM PML_PLG_MOD_LOG
						WHERE PML_ORDR_NO = TRIM(:sql_pod_ref_no)
            AND   PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND PML_MOD_TYPE IN ('N','M','C','J');
	
						if( SQLCODE !=0 )
					  {
							fn_errlog( c_ServiceName, "S33465", SQLMSG, c_err_msg  );
       				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					    l_acnt_id = -1;
					    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					    tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );         
					    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					  }

						EXEC SQL INSERT INTO PML_PLG_MOD_LOG
							(PML_ORDR_NO,
							PML_STCK_CD,
							PML_ORDR_QTY,
							PML_ORDR_TM,
							PML_HAIRCUT,
							PML_ORDR_VL,
							PML_ISIN_NO,
							PML_DP_CLNT_ACCNT,
							PML_DP_ACCNT,
							PML_CLNT_MTCH_ACCNT,
							PML_PLG_REV_TYP,
							PML_CONF_QTY,
							PML_RJCT_QTY,
							PML_MOD_TYPE,
							PML_STTS,
							PML_MOD_CNTR,
							PML_PLCD_SQNC,
							PML_BP_ID,
							PML_CHANNEL,
							PML_RMRKS)
							VALUES
							(	:sql_pod_ref_no,
			  				:sql_stk_stck_cd,
								:sql_tifp_qty,
								sysdate,
								:sql_stk_plg_haircut,		 
		   					:sql_plg_val,
								:sql_isin_nmbr,
								:sql_dbd_dp_clnt_id,
								:sql_dbd_dp_id,
								:sql_mtch_accnt,
								'I',
								0,
								0,
								'J',
								'C',
								:sql_pml_mod_cntr,
								0,
								null,
								'SYS',
								:sql_err_desc);
							
							if( SQLCODE !=0 )
		          {
		          	fn_errlog( c_ServiceName, "S33470", SQLMSG, c_err_msg  );
		            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		            l_acnt_id = -1;
		            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		            tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );        
		            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		          }
					
					EXEC SQL 
					UPDATE DBD_DP_BLCK_DTLS SET
					/**DBD_BLOCK_FOR_SALE = DBD_BLOCK_FOR_SALE - :sql_tifp_qty, commented for  **/
					/*** DBD_SAM_BLCKD_QTY = DBD_SAM_BLCKD_QTY + :sql_tifp_qty, *** Commented as per UAT suggestion ***/
					DBD_INV_REQ_QTY = DBD_INV_REQ_QTY - :sql_tifp_qty
					WHERE DBD_DP_ID 		= :sql_dbd_dp_id
					AND DBD_DP_CLNT_ID 	= :sql_dbd_dp_clnt_id
					AND dbd_clm_mtch_accnt = :sql_mtch_accnt
					AND DBD_STCK_CD 		= :sql_stk_stck_cd
					RETURNING DBD_TOT_QTY , DBD_QTY_BLCKD
					INTO :sql_dbd_tot_qty, :sql_dbd_qty_blckd;
			   	
					if( SQLCODE !=0 )
      		{
        		fn_errlog( c_ServiceName, "S33475", SQLMSG, c_err_msg  );
        		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        		l_acnt_id = -1;
        		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        		tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      		}

          /**  starts  **/

            EXEC SQL
            UPDATE PPS_PLG_PSTN SET
            PPS_I1_POS       = PPS_I1_POS - :sql_tifp_qty,
            PPS_NET_POS      = PPS_NET_POS + :sql_tifp_qty,
            PPS_L5_POS       = PPS_L5_POS + :sql_tifp_qty,
            PPS_PLG_REV_FLG  = 'P'
            WHERE PPS_STCK_CD     = :sql_stk_stck_cd
						AND PPS_CLM_MTCH_ACCNT = :sql_mtch_accnt   /**  added **/
            AND PPS_DP_ACCNT      = :sql_dbd_dp_id
            AND PPS_DP_CLNT_ACCNT = :sql_dbd_dp_clnt_id;


            if(SQLCODE !=0)
            {
              fn_errlog( c_ServiceName, "S33480", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              l_acnt_id = -1;
              Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
              tpfree ( ( char * )ptr_fml_Obuf);
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char*)ptr_fml_Ibuf, 0, 0 );
            }

            /**  ends **/

	
					EXEC SQL 
					INSERT INTO DLD_DP_LOG_DTLS
					(DLD_CLM_MTCH_ACCNT,
					DLD_DP_ID,
					DLD_DP_CLNT_ID,
					DLD_ISIN_NMBR,
					DLD_STCK_CD,
					DLD_TOT_QTY_CHG,
					DLD_QTY_BLCKD_CHG,
					DLD_PLG_REQ_QTY_CHG,
					DLD_SAM_BLCKD_QTY_CHG,
					DLD_REV_COV_QTY_CHG,
					DLD_REV_REQ_QTY_CHG,
					DLD_CHG_TM,
					DLD_BLK_FR_SALE_CHG,
					DLD_INV_REQ_QTY_CHG,
					DLD_INV_COV_QTY_CHG,
					DLD_RMRKS)
					VALUES
					(:sql_mtch_accnt,
					:sql_dbd_dp_id,
					:sql_dbd_dp_clnt_id,
					:sql_isin_nmbr,
					:sql_stk_stck_cd,
					0,
					0,
					0,
					:sql_tifp_qty,
					0,
					0,
					sysdate,
					0,
					-(:sql_tifp_qty),
					0,
					:sql_err_desc);

					
					if( SQLCODE !=0 )
         	{
           	fn_errlog( c_ServiceName, "S33485", SQLMSG, c_err_msg  );
           	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           	l_acnt_id = -1;
           	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
           	tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
           	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         	}

					fn_userlog( c_ServiceName," Rejection of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);   /**  **/
					sprintf(c_msg,"Rejection of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);   /**  **/
					BAT_POST(c_msg);
					memset(c_msg,'\0',sizeof(c_msg));
					strncpy(c_msg,sql_err_desc.arr,254);
					BAT_POST(c_msg);

				}
					/***  starts ***/
 				else if( sql_rtn_stts == 0 && (strcmp(sql_plg_stts.arr,"CIN")==0) 
							&& (i_call_dp_flg == 1 ) && (l_rej_qty != 0) && (&l_conf_qty != 0) )				
					{				
						if(DEBUG_MSG_LVL_3)
						{									
							fn_userlog(c_ServiceName,"Partial Rejection case  of Invoaction Request In Leg-2  for NSDL client  ");	
							fn_userlog(c_ServiceName," Updating invocation request in PTD... ");	
						}

						EXEC SQL UPDATE PTD_TIFP_DTLS SET
						PTD_LEG_NO				 = 'I3',
						ptd_plg_vs_wd_qty = ptd_plg_vs_wd_qty - :l_rej_qty,    /*** Reducing the rejected qty ,need to confirm ***/
						ptd_tifp_qty      = ptd_tifp_qty      - :l_rej_qty,    /*** Reducing the rejected qty ,need to confirm ***/
						PTD_TIFP_RUN_DT		= sysdate,
						PTD_EXCTN_DT			= :c_conf_date 
						WHERE PTD_DP_ID		  = :sql_dbd_dp_id
						AND PTD_DP_CLNT_ID	= :sql_dbd_dp_clnt_id
						AND PTD_ISIN_NMBR		= :sql_isin_nmbr
						AND PTD_PLG_REV_TYP = 'I'
						AND PTD_TIFP_STTS		= 'P'
						AND PTD_LEG_NO			= 'I1'
						AND trim(PTD_POD_REF_NO) = trim(:sql_pod_ref_no)
						AND PTD_DPM_NMBR = :sql_pon_nmbr ;

						if( SQLCODE !=0 )
						{
							fn_errlog( c_ServiceName, "S33490", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							l_acnt_id = -1;
							Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
							tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
						
						if(DEBUG_MSG_LVL_5)
						{
							fn_userlog(c_ServiceName," Updating pledge  request against which invocation was placed ... ");
						}

	
						 EXEC SQL
						 DECLARE ptd_cur_par_inv CURSOR FOR
									 SELECT  ptd_plg_vs_wd_qty,
													 ptd_clm_mtch_accnt ,
													 ptd_dp_id ,
													 ptd_dp_clnt_id ,
													 ptd_isin_nmbr ,
													 ptd_dpm_nmbr
									 FROM    ptd_tifp_dtls
									 WHERE   trim(ptd_pod_ref_no) = trim(:sql_pod_ref_no)
									 AND     PTD_DPM_NMBR         = :sql_pon_nmbr   
									 AND     ptd_plg_rev_typ = 'I';

						 if( SQLCODE !=0 )
						 {
							 fn_errlog( c_ServiceName, "S33495", SQLMSG, c_err_msg  );
							 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							 l_acnt_id = -1;
							 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
							 tpfree ( ( char * )ptr_fml_Obuf);
							 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						 }

						 EXEC SQL
						 OPEN ptd_cur_par_inv;

						 if ( SQLCODE != 0 )
						 {
								 fn_errlog( c_ServiceName, "S33500", SQLMSG, c_err_msg  );
								 fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
								 EXEC SQL CLOSE ptd_cur_par_inv;
								 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     				 }

							while(1)
						 {

								 MEMSET(sql_mtch_accnt_1);
								 MEMSET(sql_dbd_dp_id_1);
								 MEMSET(sql_dbd_dp_clnt_id_1);
								 MEMSET(sql_isin_nmbr_1);

								 EXEC SQL
								 FETCH ptd_cur_par_inv 
								 INTO
											 :sql_plg_vs_wd_qty_rej,
											 :sql_mtch_accnt_1,
											 :sql_dbd_dp_id_1,
											 :sql_dbd_dp_clnt_id_1,
											 :sql_isin_nmbr_1,
											 :sql_dpm_nmbr_rej;

								 if ( SQLCODE != 0 )
								 {
										 if ( SQLCODE == NO_DATA_FOUND )
										 {
												 EXEC SQL CLOSE ptd_cur_par_inv;
												 break;
										 }
										 else
										 {
												 EXEC SQL CLOSE ptd_cur_par_inv;
												 fn_errlog( c_ServiceName, "S33505", SQLMSG, c_err_msg  );
												 fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
												 fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
												 break;
										 }
								 }


								 SETNULL(sql_mtch_accnt_1);
								 SETNULL(sql_dbd_dp_id_1);
								 SETNULL(sql_dbd_dp_clnt_id_1);
								 SETNULL(sql_isin_nmbr_1);

								 EXEC SQL
											UPDATE ptd_tifp_dtls
											SET    ptd_plg_vs_wd_qty = ptd_plg_vs_wd_qty - :l_rej_qty    /*** Reducing the rejected qty ***/
											WHERE  ptd_dpm_nmbr        = :sql_dpm_nmbr_rej
											AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt_1
											AND    ptd_dp_id           = :sql_dbd_dp_id_1
											AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id_1
											AND    ptd_isin_nmbr       = :sql_isin_nmbr_1
											AND    ptd_plg_rev_typ     = 'P'
											AND    ptd_leg_no          = 'L5';

								 if ( SQLCODE != 0 )
								 {
									 fn_errlog( c_ServiceName, "S33510", SQLMSG, c_err_msg  );
									 fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
									 EXEC SQL CLOSE ptd_cur_par_inv;
									 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								 }

							}  /*** End of while ***/

							if(DEBUG_MSG_LVL_5)
							{
								fn_userlog(c_ServiceName,"Calculating new invocation value based on confirmed quantity ... ");	
							}

							sql_plg_val = 0.0;
			
							sql_plg_rt	= 0.0;

							EXEC SQL SELECT LTQ_PLG_RT
							INTO :sql_plg_val
							FROM LTQ_TRD_QT
							WHERE LTQ_STCK_CD = :sql_stk_stck_cd
							AND LTQ_XCHNG_CD = 'BSE';        

							if(SQLCODE !=0 )
							{
								fn_errlog( c_ServiceName, "S33515", SQLMSG, c_err_msg  );
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								l_acnt_id = -1;
								Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
								tpfree ( ( char * )ptr_fml_Obuf);
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
			
							sql_plg_rt = sql_plg_val ;

							sql_plg_val = (l_conf_qty * (sql_plg_val *(1 - ((double)(sql_stk_plg_haircut)/100))))*100; 

							if((long long)(sql_plg_val  * 100)%100 > 50)
							{
								sql_plg_val = sql_plg_val + 1.0;
								fn_userlog( c_ServiceName, "The rounded off amount is [%lf]", sql_plg_val);
							}

							ll_plg_val = (long long) sql_plg_val;

							sql_plg_val = (double) ll_plg_val;
				
							/**** Calculating rejected Value ************/
						
							sql_rej_plg_val = 0.0;

							sql_rej_plg_val = (l_rej_qty * (sql_plg_rt *(1 - ((double)(sql_stk_plg_haircut)/100))))*100; 

							if((long long)(sql_rej_plg_val* 100)%100 > 50)
							{
								sql_rej_plg_val = sql_rej_plg_val + 1.0;
								fn_userlog( c_ServiceName, "The rounded off amount is rejected value Is [%lf]", sql_rej_plg_val);
							}

							ll_plg_val = (long long) sql_rej_plg_val;
							sql_rej_plg_val = (double) ll_plg_val;

				
							if(DEBUG_MSG_LVL_3)
							{
								fn_userlog(c_ServiceName,"Calculating new withdrwal value based on confirmed quantity Ends ... ");
								fn_userlog(c_ServiceName," The confirmed Value Is :%lf:" ,sql_plg_val);
								fn_userlog(c_ServiceName," The rejected Value Is :%lf:" ,sql_rej_plg_val);
							}	
			
							

							EXEC SQL UPDATE POD_PLG_ORDR_DTLS 
							SET POD_RJCT_QTY = POD_RJCT_QTY + :l_rej_qty,
							POD_CONF_QTY     = POD_CONF_QTY - :l_rej_qty,
							POD_ORDR_STTS = decode((POD_ORDR_QTY - (POD_CONF_QTY + POD_RJCT_QTY)),0,'C','I'), /*** need to confirm ***/
              POD_RMRKS = decode((POD_ORDR_QTY - (POD_CONF_QTY + POD_RJCT_QTY)),0,'Success','')
							WHERE trim(POD_ORDR_NO) = TRIM(:sql_pod_ref_no)
              AND POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
							AND POD_PLG_REV_TYP = 'I';


							if( SQLCODE !=0 )
							{
								fn_errlog( c_ServiceName, "S33520", SQLMSG, c_err_msg  );
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								l_acnt_id = -1;
								Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
								tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}


							EXEC SQL SELECT (COUNT(*)+1) 
							INTO :sql_pml_mod_cntr
							FROM PML_PLG_MOD_LOG
							WHERE PML_ORDR_NO = TRIM(:sql_pod_ref_no)
              AND PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
							AND PML_MOD_TYPE IN ('N','M','C','J');
	
							if( SQLCODE !=0 )
							{
								fn_errlog( c_ServiceName, "S33525", SQLMSG, c_err_msg  );
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								l_acnt_id = -1;
								Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
								tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );        
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}


							if(DEBUG_MSG_LVL_5)
							{	
								fn_userlog(c_ServiceName,"Forming invocation rejection remarks  ... ");	
							}

							EXEC SQL 
							SELECT 'Partial Invocation Completed .'||TRIM(:sql_err_desc)
							INTO :sql_temp_err_desc
							FROM dual ;
					
							if(DEBUG_MSG_LVL_5)
							{	
								fn_userlog(c_ServiceName,"sql_err_desc Is :%s: ",sql_temp_err_desc.arr);	
							}	

							EXEC SQL INSERT INTO PML_PLG_MOD_LOG
							(PML_ORDR_NO,
							PML_STCK_CD,
							PML_ORDR_QTY,
							PML_ORDR_TM,
							PML_HAIRCUT,
							PML_ORDR_VL,
							PML_ISIN_NO,
							PML_DP_CLNT_ACCNT,
							PML_DP_ACCNT,
							PML_CLNT_MTCH_ACCNT,
							PML_PLG_REV_TYP,
							PML_CONF_QTY,
							PML_RJCT_QTY,
							PML_MOD_TYPE,
							PML_STTS,
							PML_MOD_CNTR,
							PML_PLCD_SQNC,
							PML_BP_ID,
							PML_CHANNEL,
							PML_RMRKS)
							VALUES
							(	:sql_pod_ref_no,
								:sql_stk_stck_cd,
                :l_rej_qty,                  /*** Sending only rejected qty instead of total qty ***/
								sysdate,
								:sql_stk_plg_haircut,		 
								:sql_rej_plg_val,						 /*** Sending only rejected Value instead of total qty ***/
								:sql_isin_nmbr,
								:sql_dbd_dp_clnt_id,
								:sql_dbd_dp_id,
								:sql_mtch_accnt,
								'I',
								:l_conf_qty,
								:l_rej_qty,
								'J',
								'C',
								:sql_pml_mod_cntr,
								0,
								null,
								'SYS',
							  :sql_temp_err_desc	
							);
				
							if( SQLCODE !=0 )
							{
								fn_errlog( c_ServiceName, "S33530", SQLMSG, c_err_msg  );
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								l_acnt_id = -1;
								Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
								tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );						
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}


								if(DEBUG_MSG_LVL_5)
								{
									fn_userlog(c_ServiceName," Updating PPS table  ... ");
								}	


								l_tot_qty = 0 ;
								l_tot_qty = l_conf_qty + l_rej_qty ;

								EXEC SQL UPDATE PPS_PLG_PSTN SET
								PPS_I1_POS			= PPS_I1_POS	- :l_tot_qty ,
								PPS_I3_POS			= PPS_I3_POS	+ :l_conf_qty,
								PPS_NET_POS     = PPS_NET_POS + :l_rej_qty,
								PPS_L5_POS      = PPS_L5_POS	+ :l_rej_qty,
								PPS_PLG_REV_FLG = 'I'
								WHERE PPS_STCK_CD					= :sql_stk_stck_cd
								AND PPS_CLM_MTCH_ACCNT		= :sql_mtch_accnt   
								AND PPS_DP_ACCNT					= :sql_dbd_dp_id
								AND PPS_DP_CLNT_ACCNT			= :sql_dbd_dp_clnt_id;
	
								if(SQLCODE !=0)
								{
									fn_errlog( c_ServiceName, "S33535", SQLMSG, c_err_msg  );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
									l_acnt_id = -1;
									Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
									tpfree ( ( char * )ptr_fml_Obuf);
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}

								EXEC SQL INSERT INTO PPL_PLG_PSTN_LOG
								(PPL_CLM_MTCH_ACCNT,
								PPL_STCK_CD,
								PPL_W1_POS_CHG,
								PPL_W3_POS_CHG,
								PPL_NET_POS_CHG,
								PPL_AVG_PVAL_CHG,
								PPL_PLG_REV_FLG,
								PPL_RMRKS)
								VALUES
								(	:sql_mtch_accnt,
								:sql_stk_stck_cd,
								-:l_tot_qty,
								:l_conf_qty,
								:l_conf_qty,
								:sql_plg_val,
								'I',
								'Invoke Leg 3'
								);
					
								if( SQLCODE !=0 )
								{
									fn_errlog( c_ServiceName, "S33540", SQLMSG, c_err_msg  );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
									l_acnt_id = -1;
									Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
									tpfree ( ( char * )ptr_fml_Obuf);
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}


								if(DEBUG_MSG_LVL_5)
								{
									fn_userlog(c_ServiceName," Updating DBD table  ... ");
								}	


								EXEC SQL UPDATE DBD_DP_BLCK_DTLS SET
								/** DBD_SAM_BLCKD_QTY = DBD_SAM_BLCKD_QTY + :l_rej_qty, **/
								/** DBD_BLOCK_FOR_SALE = DBD_BLOCK_FOR_SALE + :l_rej_qty, *** Commented as per UAT suggestion **/
								DBD_INV_REQ_QTY = DBD_INV_REQ_QTY - :l_tot_qty
								WHERE DBD_DP_ID = :sql_dbd_dp_id
								AND DBD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
								AND dbd_clm_mtch_accnt = :sql_mtch_accnt
								AND DBD_STCK_CD = :sql_stk_stck_cd
								RETURNING DBD_TOT_QTY , DBD_QTY_BLCKD
								INTO :sql_dbd_tot_qty, :sql_dbd_qty_blckd;
		 	
								if( SQLCODE !=0 )
								{
									fn_errlog( c_ServiceName, "S33545", SQLMSG, c_err_msg  );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
									l_acnt_id = -1;
									Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
									tpfree ( ( char * )ptr_fml_Obuf);
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}

								if(DEBUG_MSG_LVL_5)
								{	
									fn_userlog(c_ServiceName," Updating DLD table  ... ");
								}	
     
								EXEC SQL INSERT INTO DLD_DP_LOG_DTLS
								(DLD_CLM_MTCH_ACCNT,
								DLD_DP_ID,
								DLD_DP_CLNT_ID,
								DLD_ISIN_NMBR,
								DLD_STCK_CD,
								DLD_TOT_QTY_CHG,
								DLD_QTY_BLCKD_CHG,
								DLD_PLG_REQ_QTY_CHG,
								DLD_SAM_BLCKD_QTY_CHG,
								DLD_REV_COV_QTY_CHG,
								DLD_REV_REQ_QTY_CHG,
								DLD_CHG_TM,
								DLD_BLK_FR_SALE_CHG,
								DLD_INV_REQ_QTY_CHG,
								DLD_INV_COV_QTY_CHG,
								DLD_RMRKS)
								VALUES
								(:sql_mtch_accnt,
								:sql_dbd_dp_id,
								:sql_dbd_dp_clnt_id,
								:sql_isin_nmbr,
								:sql_stk_stck_cd,
								0,
								0,
								0,
								:l_rej_qty,
								0,
								0,
								sysdate,
								0,
								-:l_tot_qty,
								0,
								:sql_err_desc);

								if( SQLCODE !=0 )
								{
									fn_errlog( c_ServiceName, "S33550", SQLMSG, c_err_msg  );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
									l_acnt_id = -1;
									Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
									tpfree ( ( char * )ptr_fml_Obuf);
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}

								fn_userlog( c_ServiceName," Partial Invoaction Acceptance of accnt [%s] for stck [%s] for PON number [%lf]",
																						sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  
								sprintf(c_msg," Partial Invoaction Acceptance of accnt [%s] for stck [%s] for PON number [%lf] ",
																sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  
								BAT_POST(c_msg);
								/*** Need to check wat following does ***/
								memset(c_msg,'\0',sizeof(c_msg));
								strncpy(c_msg,sql_err_desc.arr,254);
								BAT_POST(c_msg);

					}
					/***  Ends ***/
				else
				{
					fn_userlog( c_ServiceName," Skipping record of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);   /**  **/
					sprintf(c_msg,"Skipping record of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);   /**  **/
					BAT_POST(c_msg);
					memset(c_msg,'\0',sizeof(c_msg));
					strncpy(c_msg,sql_err_desc.arr,254);
					BAT_POST(c_msg);
				}

				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
     		{
					fn_errlog( c_ServiceName, "S33555", TPMSG, c_err_msg  );
   				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     			l_acnt_id = -1;
     			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     			tpfree (( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
				}
			 	
				tpfree((char *)ptr_fml_Sbuf);
      	tpfree((char *)ptr_fml_Rbuf);

				}

			tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );
		}
		else if( sql_plg_typ == 'T' )
		{

      i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
      if ( i_trnsctn == -1 )
      {
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        fn_errlog( c_ServiceName, "S33560",LIBMSG,c_err_msg);
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree ( ( char * )ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      EXEC SQL DELETE FROM TEMP_PLG_RECORDS;
      if((SQLCODE !=0) && (SQLCODE!= NO_DATA_FOUND))
      {
        fn_errlog( c_ServiceName, "S33565", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree ( ( char * )ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

       EXEC SQL INSERT INTO TEMP_PLG_RECORDS
        (TMP_TIFP_QTY,
        TMP_PLG_REV_TYP,
        TMP_ISIN_NMBR,
        TMP_DP_ID,
        TMP_DP_CLNT_ID,
        TMP_POD_REF_NO,
        TMP_STCK_CD,
        TMP_CLM_MTCH_ACCNT,
        TMP_SLIPNO_L1)
        ( SELECT
        PTD_TIFP_QTY,
        :sql_plg_typ,
        PTD_ISIN_NMBR,
        PTD_DP_ID,
        PTD_DP_CLNT_ID,
        PTD_POD_REF_NO,
        PTD_STCK_CD,
        PTD_CLM_MTCH_ACCNT,
        PTD_SLIPNO_L1 
        FROM PTD_TIFP_DTLS
        WHERE PTD_PLG_REV_TYP=:sql_plg_typ
        AND PTD_TIFP_STTS = 'P'
        AND PTD_LEG_NO = 'T1');

       if( SQLCODE !=0 )
        {
          fn_errlog( c_ServiceName, "S33570", SQLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

      if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
      {
        fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
        fn_errlog( c_ServiceName, "S33575", TPMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree (( char * )ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
      }

      EXEC SQL
      SELECT COUNT(*)
      INTO :l_rec_cnt
      FROM TEMP_PLG_RECORDS;

      if( l_rec_cnt == 0 )
      {
        strcpy(c_err_msg,"There are no records for Pledge Confirmation status");
        BAT_POST(c_err_msg);
        fn_userlog(c_ServiceName,"There are no records for Pledge Confirmation status");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      fn_userlog( c_ServiceName,"[%ld] number of records for TMCM Confirmation",l_rec_cnt);

      for (i = 0; i < l_rec_cnt; i++)
      {

       fn_userlog(c_ServiceName,"Processing record :%d: of total records :%ld:",i+1,l_rec_cnt);

        fn_userlog(c_ServiceName,"Before begin 1");
        i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
        if ( i_trnsctn == -1 )
        {
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          fn_errlog( c_ServiceName, "S33580",LIBMSG,c_err_msg);
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

				sql_tifp_qty=0;
				MEMSET(sql_isin_nmbr);
				MEMSET(sql_pod_ref_no);
				MEMSET(sql_mtch_accnt);
				MEMSET(sql_plg_stts);
				sql_pon_nmbr = 0.0; /**  **/
				MEMSET(sql_err_cd);
				MEMSET(sql_err_desc);
				MEMSET(sql_rej_desc);
				MEMSET(c_conf_date);  /* ver 1.7 */


				EXEC SQL 
				SELECT TMP_TIFP_QTY, TMP_ISIN_NMBR, TMP_DP_ID,
				TMP_DP_CLNT_ID, TMP_POD_REF_NO,	TMP_STCK_CD,
				TMP_CLM_MTCH_ACCNT,	TMP_SLIPNO_L1 
				INTO :sql_tifp_qty, :sql_isin_nmbr, :sql_dbd_dp_id,
				:sql_dbd_dp_clnt_id, :sql_pod_ref_no, :sql_stk_stck_cd,
				:sql_mtch_accnt, :sql_creation_slip_no
				FROM TEMP_PLG_RECORDS
				where rownum < 2;
		
				if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND) 
				{
					fn_errlog( c_ServiceName, "S33585", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				if(SQLCODE == NO_DATA_FOUND)
				{
					break;
				}

				EXEC SQL
						SELECT NVL(PTD_DPM_NMBR1,0)
						INTO :sql_plg_dpm_no
						FROM PTD_TIFP_DTLS
						WHERE trim(PTD_POD_REF_NO) = trim(:sql_pod_ref_no);

				if(SQLCODE !=0) 
				{
					fn_errlog( c_ServiceName, "S33590", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}


				fn_userlog(c_ServiceName,"Value of sql_tifp_qty :%ld",sql_tifp_qty);
				fn_userlog(c_ServiceName,"Value of sql_isin_nmbr :%s",sql_isin_nmbr.arr);
				fn_userlog(c_ServiceName,"Value of sql_dbd_dp_id :%s",sql_dbd_dp_id.arr);
				fn_userlog(c_ServiceName,"Value of sql_dbd_dp_clnt_id :%s",sql_dbd_dp_clnt_id.arr);
				fn_userlog(c_ServiceName,"Value of sql_pod_ref_no :%s",sql_pod_ref_no.arr);
				fn_userlog(c_ServiceName,"Value of sql_stk_stck_cd :%s",sql_stk_stck_cd);
				fn_userlog(c_ServiceName,"Value of sql_mtch_accnt :%s",sql_mtch_accnt.arr);
				fn_userlog(c_ServiceName,"Value of sql_creation_slip_no :%lld",sql_creation_slip_no);
				
				EXEC SQL 
				DELETE FROM TEMP_PLG_RECORDS
				WHERE ROWNUM < 2;

				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S33595", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				ptr_fml_Sbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
				if (ptr_fml_Sbuf == NULL)
				{
					fn_errlog(c_ServiceName, "S33600", TPMSG, c_err_msg);
					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
					Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
					tpfree((char *)ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
				}
					
				ptr_fml_Rbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
				if (ptr_fml_Rbuf == NULL)
				{
					fn_errlog(c_ServiceName, "S33605", TPMSG, c_err_msg);
					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
					Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
					tpfree((char *)ptr_fml_Obuf);
					tpfree((char *)ptr_fml_Sbuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );			
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
				}
					
				strcpy((char *)sql_usr_code.arr,"EBA");	
				strcpy((char *)temp,"PCR");
				sql_clsr_typ = 'U';
				SETLEN(sql_usr_code);
				fn_userlog(c_ServiceName,"After Buffer Allocation");

				i_err [0] = Fadd32( ptr_fml_Sbuf,FFO_OPERATION_TYP, (char *)&sql_oprn_typ,0);
				i_err [1] = Fadd32( ptr_fml_Sbuf, FFO_PLEDGE_TYP, (char *)temp,0);
				/** i_err [2] = Fadd32(ptr_fml_Sbuf,FFO_CRT_SLIP_NO,(char *)&sql_creation_slip_no,0); **/
				i_err [2] = Fadd32(ptr_fml_Sbuf,FFO_INDEX,(char *)&sql_creation_slip_no,0);
				i_err [3] = Fadd32(ptr_fml_Sbuf,FFO_USER_CODE,(char *)sql_usr_code.arr,0);

				for ( j=0; j <= 3; j++ )
				{
					if ( i_err[ j ] == -1 )
          {
						fn_errlog(c_ServiceName, "S33610", TPMSG, c_err_msg);
						Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
						Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
						tpfree((char *)ptr_fml_Obuf);
						tpfree((char *)ptr_fml_Sbuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );					
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
          }
				}

          if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0) /** Changed '2' to '1' in  **/
          {
            fn_userlog(c_ServiceName,"Calling SFO_CALL_DP ");
            i_returncode=tpcall("SFO_CALL_DP",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
          }
          else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0) /** Changed '2' to '1' in  **/
          {
            fn_userlog(c_ServiceName,"Calling SFO_CALL_DPC ");
            i_returncode=tpcall("SFO_CALL_DPC",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
          }

          fn_userlog(c_ServiceName,"After Call i_returncode : %d ",i_returncode);

          if (i_returncode == -1)
          {
            if(tperrno == TPESVCFAIL)
            {
              if(Fget32(ptr_fml_Rbuf, FFO_ERR_MSG, 0, c_err_msg, 0 ) == -1)
              {
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
                tpfree((char *)ptr_fml_Sbuf);
                tpfree((char *)ptr_fml_Rbuf);
                tpfree((char *)ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
              }
            }
            else
            {
              fn_errlog(c_ServiceName, "S33615", TPMSG, c_err_msg);
            }

            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
            tpfree((char *)ptr_fml_Sbuf);
            tpfree((char *)ptr_fml_Rbuf);
            tpfree((char *)ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
          }


				Fget32(ptr_fml_Rbuf,FFO_PLG_STTS,0,(char *)sql_plg_stts.arr,0);
				/**Fget32(ptr_fml_Rbuf,FFO_DPM_NO,0,(char *)&sql_pon_nmbr,0); --commented  **/
				Fget32(ptr_fml_Rbuf,FFO_JIFFY,0,(char *)&sql_pon_nmbr,0);  /** **/
				Fget32(ptr_fml_Rbuf,FFO_RTN_STTS,0,(char *)&sql_rtn_stts,0);
				Fget32(ptr_fml_Rbuf,FFO_ERR_CD,0,(char *)sql_err_cd.arr,0);
				Fget32(ptr_fml_Rbuf,FFO_ERR_DESC,0,(char *)sql_err_desc.arr,0);
				Fget32(ptr_fml_Rbuf,FFO_REJ_DESC,0,(char *)sql_rej_desc.arr,0);
			  Fget32(ptr_fml_Rbuf,FFO_RCRD_DT,0,(char *)c_conf_date.arr,0); /*ver 1.7  */
				SETLEN(sql_plg_stts);
				SETLEN(sql_err_cd);
				SETLEN(sql_err_desc);
				SETLEN(sql_rej_desc);
				SETLEN(c_conf_date);  /*ver 1.7*/

	
				fn_userlog(c_ServiceName,"The plg stts [%s]",sql_plg_stts.arr);
				fn_userlog(c_ServiceName,"The pon nmbr [%lf]",sql_pon_nmbr);  /**  **/
				fn_userlog(c_ServiceName,"The rtn stts [%ld]",sql_rtn_stts);
				fn_userlog(c_ServiceName,"The err code [%s]",sql_err_cd.arr);
				fn_userlog(c_ServiceName,"The err desc [%s]",sql_err_desc.arr);
				fn_userlog(c_ServiceName,"The rej desc [%s]",sql_rej_desc.arr);
				fn_userlog(c_ServiceName,"The confirmation date form DP is [%s]",c_conf_date.arr);/*ver 1.7 */

    /*** Ver 1.5 Starts ***/

		/*** Commented for TMCM *****

    i_valid_pon = 0;

    if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
    {
      MEMSET(c_pon_num);
      sprintf(c_pon_num.arr,"%lf",sql_pon_nmbr);
      SETLEN(c_pon_num);
      SETNULL(c_pon_num);

      fn_userlog(c_ServiceName,"The pon nmbr string is :%s:",c_pon_num.arr);

      if( strncmp (c_pon_num.arr,"1",1) == 0 )
      {
         i_valid_pon = 1;
      }
      else 
      {
         i_valid_pon = 0;
      }
    }
    else
      {
         i_valid_pon = 1;
      }

    fn_userlog(c_ServiceName,"The valid pon flag is :%d:",i_valid_pon);

			************** Comment ends **/
			
					/** Start for testing **
					sql_rtn_stts = 0;
					sql_pon_nmbr =123;
					strcpy(sql_plg_stts.arr,"PCN");
					** End for Testing **/

					if( sql_rtn_stts == 0 && sql_pon_nmbr != 0 && (strcmp(sql_plg_stts.arr,"PCN")==0))
					{
						fn_userlog(c_ServiceName, "Inside Pledge Confirmation Acceptance" );
						sql_plg_vs_wd_qty = 0;	
						fn_userlog(c_ServiceName, "VAlue of c_conf_date :%s:",c_conf_date.arr);
						fn_userlog(c_ServiceName, "VAlue of sql_pon_nmbr :%lf:",sql_pon_nmbr);
						fn_userlog(c_ServiceName, "VAlue of sql_dbd_dp_id :%s:",sql_dbd_dp_id.arr);
						fn_userlog(c_ServiceName, "VAlue of sql_dbd_dp_clnt_id :%s:",sql_dbd_dp_clnt_id.arr);
						fn_userlog(c_ServiceName, "VAlue of sql_isin_nmbr :%s:",sql_isin_nmbr.arr);
						fn_userlog(c_ServiceName, "VAlue of sql_creation_slip_no :%lld:",sql_creation_slip_no);
            fn_userlog(c_ServiceName, "The valid pon flag is :%d:",i_valid_pon);     /*** Ver 1.5 ***/

						EXEC SQL 
						UPDATE PTD_TIFP_DTLS SET
						PTD_LEG_NO = 'T5',
						PTD_TIFP_RUN_DT = sysdate,
						PTD_EXCTN_DT =:c_conf_date , 
						PTD_DPM_NMBR = :sql_pon_nmbr,
						PTD_DPM_NMBR2 = :sql_pon_nmbr,
            PTD_RMRKS = 'Success'    
						WHERE PTD_DP_ID = :sql_dbd_dp_id
						AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
						AND PTD_ISIN_NMBR = :sql_isin_nmbr
						AND PTD_PLG_REV_TYP = :sql_plg_typ
						AND PTD_TIFP_STTS = 'P'
						AND PTD_SLIPNO_L1 = :sql_creation_slip_no;

			    	if( SQLCODE !=0 )
      			{
        			fn_errlog( c_ServiceName, "S33620", SQLMSG, c_err_msg  );
        			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			l_acnt_id = -1;
        			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			}
						
						EXEC SQL 
						UPDATE POD_PLG_ORDR_DTLS SET
						POD_ORDR_STTS = 'C',
            POD_RMRKS = 'Success'
						WHERE trim(POD_ORDR_NO) = TRIM(:sql_pod_ref_no)
            AND    POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND POD_PLG_REV_TYP = :sql_plg_typ;

			    	if( SQLCODE !=0 )
      			{
        			fn_errlog( c_ServiceName, "S33625", SQLMSG, c_err_msg  );
        			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			l_acnt_id = -1;
        			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			}

					EXEC SQL 
					SELECT (COUNT(*)+1) 
					INTO :sql_pml_mod_cntr
					FROM PML_PLG_MOD_LOG
					WHERE PML_ORDR_NO = TRIM(:sql_pod_ref_no)
          AND    PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
					AND PML_MOD_TYPE IN ('N','M','C','J');
	
					if( SQLCODE !=0 )
     			{
       			fn_errlog( c_ServiceName, "S33630", SQLMSG, c_err_msg  );
       			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       			l_acnt_id = -1;
       			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       			tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );           
       			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     			}


					EXEC SQL 
					INSERT INTO PML_PLG_MOD_LOG
					(PML_ORDR_NO,
					PML_STCK_CD,
					PML_ORDR_QTY,
					PML_ORDR_TM,
					PML_HAIRCUT,
					PML_ORDR_VL,
					PML_ISIN_NO,
					PML_DP_CLNT_ACCNT,
					PML_DP_ACCNT,
					PML_CLNT_MTCH_ACCNT,
					PML_PLG_REV_TYP,
					PML_CONF_QTY,
					PML_RJCT_QTY,
					PML_MOD_TYPE,
					PML_STTS,
					PML_MOD_CNTR,
					PML_PLCD_SQNC,
					PML_BP_ID,
					PML_CHANNEL,
					PML_RMRKS)
					VALUES
					(	:sql_pod_ref_no,
  				:sql_stk_stck_cd,
					:sql_tifp_qty,
					sysdate,
					:sql_stk_plg_haircut,		 
 					:sql_plg_val,
					:sql_isin_nmbr,
					:sql_dbd_dp_clnt_id,
					:sql_dbd_dp_id,
					:sql_mtch_accnt,
					:sql_plg_typ,
					0,
					0,
					'L',
					'C',
					:sql_pml_mod_cntr,
					0,
					null,
					'SYS',
					'TMCM RePledge Confirmed');
					
					if( SQLCODE !=0 )
          {
          	fn_errlog( c_ServiceName, "S33635", SQLMSG, c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );       
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

   				EXEC SQL
               UPDATE ptd_tifp_dtls
               SET    PTD_DPM_NMBR2 = :sql_pon_nmbr
               WHERE  ptd_dpm_nmbr        = :sql_plg_dpm_no
               AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt
               AND    ptd_dp_id           = :sql_dbd_dp_id
               AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id
               AND    ptd_isin_nmbr       = :sql_isin_nmbr
               AND    ptd_plg_rev_typ     = 'P'
               AND    ptd_leg_no          = 'L5';

            if( SQLCODE !=0 )
            {
              fn_errlog( c_ServiceName, "S33640", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              l_acnt_id = -1;
              Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
              tpfree ( ( char * )ptr_fml_Obuf);
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

   				EXEC SQL
               UPDATE ptd_tifp_dtls
               SET    PTD_DPM_NMBR2 = :sql_pon_nmbr
               WHERE  ptd_dpm_nmbr        = :sql_plg_dpm_no
               AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt
               AND    ptd_dp_id           = :sql_dbd_dp_id
               AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id
               AND    ptd_isin_nmbr       = :sql_isin_nmbr
               AND    ptd_plg_rev_typ     in ('W','I')
							 AND	  PTD_TIFP_STTS = 'N';	

            if( (SQLCODE !=0) && (SQLCODE != NO_DATA_FOUND))
            {
              fn_errlog( c_ServiceName, "S33645", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              l_acnt_id = -1;
              Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
              tpfree ( ( char * )ptr_fml_Obuf);
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

					fn_userlog( c_ServiceName," Acceptance of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/
					sprintf(c_msg,"Acceptance of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr); /**  **/
					BAT_POST(c_msg);
				}
				else	if (strcmp(sql_plg_stts.arr,"REJ")==0)
					{
						fn_userlog( c_ServiceName, " Inside TMCM RePledge Confirmation Rejection");
						fn_userlog( c_ServiceName, " Execution date is [%s]",sql_execn_date.arr);

						sql_rtn_stts =1 ; /**/
						
						if(strcmp(sql_plg_stts.arr,"REJ")==0)
						{
							strcpy(sql_err_desc.arr, sql_rej_desc.arr);
						}

						SETLEN(sql_err_desc);

						EXEC SQL 
						UPDATE PTD_TIFP_DTLS SET
						PTD_LEG_NO = 'T5',
						PTD_TIFP_STTS = 'J',
						PTD_TIFP_RUN_DT = sysdate,
						PTD_EXCTN_DT = :c_conf_date,  
						PTD_RMRKS = trim(:sql_err_desc),
						PTD_SEG_CODE = NULL
						WHERE PTD_DP_ID = :sql_dbd_dp_id
						AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
						AND PTD_ISIN_NMBR = :sql_isin_nmbr
						AND PTD_PLG_REV_TYP = :sql_plg_typ
						AND PTD_TIFP_STTS = 'P'
						AND PTD_SLIPNO_L1 = :sql_creation_slip_no;

						if( SQLCODE !=0 )
						{
							fn_errlog( c_ServiceName, "S33650", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							l_acnt_id = -1;
							Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
							tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}

						fn_userlog( c_ServiceName, " The err desc is [%s]",sql_err_desc.arr);
						fn_userlog( c_ServiceName, " The rej desc is [%s]",sql_rej_desc.arr);
	

						EXEC SQL 
						UPDATE POD_PLG_ORDR_DTLS SET
						POD_ORDR_STTS = 'J',
						POD_PRCSD_QTY = 0,
						POD_RMRKS = trim(:sql_err_desc) 
						WHERE trim(POD_ORDR_NO) = TRIM(:sql_pod_ref_no)
						AND POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND POD_PLG_REV_TYP = :sql_plg_typ;

						if( SQLCODE !=0 )
						{
							fn_errlog( c_ServiceName, "S33655", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							l_acnt_id = -1;
							Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
							tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}

						EXEC SQL 
						SELECT (COUNT(*)+1) 
						INTO :sql_pml_mod_cntr
						FROM PML_PLG_MOD_LOG
						WHERE PML_ORDR_NO = TRIM(:sql_pod_ref_no)
						AND   PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND PML_MOD_TYPE IN ('N','M','C','J');

						if( SQLCODE !=0 )
						{
							fn_errlog( c_ServiceName, "S33660", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							l_acnt_id = -1;
							Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
							tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );     
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						 }

						EXEC SQL INSERT INTO PML_PLG_MOD_LOG
						(PML_ORDR_NO,
						PML_STCK_CD,
						PML_ORDR_QTY,
						PML_ORDR_TM,
						PML_HAIRCUT,
						PML_ORDR_VL,
						PML_ISIN_NO,
						PML_DP_CLNT_ACCNT,
						PML_DP_ACCNT,
						PML_CLNT_MTCH_ACCNT,
						PML_PLG_REV_TYP,
						PML_CONF_QTY,
						PML_RJCT_QTY,
						PML_MOD_TYPE,
						PML_STTS,
						PML_MOD_CNTR,
						PML_PLCD_SQNC,
						PML_BP_ID,
						PML_CHANNEL,
						PML_RMRKS)
						VALUES
						(	:sql_pod_ref_no,
							:sql_stk_stck_cd,
							:sql_tifp_qty,
							sysdate,
							:sql_stk_plg_haircut,		 
							:sql_plg_val,
							:sql_isin_nmbr,
							:sql_dbd_dp_clnt_id,
							:sql_dbd_dp_id,
							:sql_mtch_accnt,
							'P',
							0,
							0,
							'J',
							'C',
							:sql_pml_mod_cntr,
							0,
							null,
							'SYS',
							:sql_err_desc);
							
						if( SQLCODE !=0 )
						{
							fn_errlog( c_ServiceName, "S33665", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							l_acnt_id = -1;
							Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
							tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );         
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}

						EXEC SQL
								 UPDATE ptd_tifp_dtls
								 SET    PTD_REPLG1_QTY = PTD_REPLG1_QTY - :sql_tifp_qty
												/* PTD_SEG_CODE = NULL */
								 WHERE  ptd_dpm_nmbr        = :sql_plg_dpm_no
								 AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt
								 AND    ptd_dp_id           = :sql_dbd_dp_id
								 AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id
								 AND    ptd_isin_nmbr       = :sql_isin_nmbr
								 AND    ptd_plg_rev_typ     = 'P'
								 AND    ptd_leg_no          = 'L5';

						if( SQLCODE !=0 )
						{
							fn_errlog( c_ServiceName, "S33670", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							l_acnt_id = -1;
							Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
							tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );         
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}


							fn_userlog( c_ServiceName," Rejection of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr); /**  **/
							sprintf(c_msg,"Rejection of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr); /**  **/
							BAT_POST(c_msg);
							memset(c_msg,'\0',sizeof(c_msg));
							strncpy(c_msg,sql_err_desc.arr,254);
							BAT_POST(c_msg);
						}
						else
						{
							fn_userlog( c_ServiceName," Skipping record of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/
							sprintf(c_msg,"Skipping record of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/
							BAT_POST(c_msg);
							memset(c_msg,'\0',sizeof(c_msg));
							strncpy(c_msg,sql_err_desc.arr,254);
							BAT_POST(c_msg);
						}
					

					if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
	     		{
						fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
    				fn_errlog( c_ServiceName, "S33675", TPMSG, c_err_msg  );
			 			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				 		l_acnt_id = -1;
       			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       			tpfree (( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
					}	
		      
				 	tpfree((char *)ptr_fml_Sbuf);
         	tpfree((char *)ptr_fml_Rbuf);
				

			}
			tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );
		}

		else if( sql_plg_typ == 'C' )
		{

      i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
      if ( i_trnsctn == -1 )
      {
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        fn_errlog( c_ServiceName, "S33680",LIBMSG,c_err_msg);
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree ( ( char * )ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      EXEC SQL DELETE FROM TEMP_PLG_RECORDS;
      if((SQLCODE !=0) && (SQLCODE!= NO_DATA_FOUND))
      {
        fn_errlog( c_ServiceName, "S33685", SQLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree ( ( char * )ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

       EXEC SQL INSERT INTO TEMP_PLG_RECORDS
        (TMP_TIFP_QTY,
        TMP_PLG_REV_TYP,
        TMP_ISIN_NMBR,
        TMP_DP_ID,
        TMP_DP_CLNT_ID,
        TMP_POD_REF_NO,
        TMP_STCK_CD,
        TMP_CLM_MTCH_ACCNT,
        TMP_SLIPNO_L1)
        ( SELECT
        PTD_TIFP_QTY,
        :sql_plg_typ,
        PTD_ISIN_NMBR,
        PTD_DP_ID,
        PTD_DP_CLNT_ID,
        PTD_POD_REF_NO,
        PTD_STCK_CD,
        PTD_CLM_MTCH_ACCNT,
        PTD_SLIPNO_L1 
        FROM PTD_TIFP_DTLS
        WHERE PTD_PLG_REV_TYP=:sql_plg_typ
        AND PTD_TIFP_STTS = 'P'
        AND PTD_LEG_NO = 'C1');

       if( SQLCODE !=0 )
        {
          fn_errlog( c_ServiceName, "S33690", SQLMSG, c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

      if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
      {
        fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
        fn_errlog( c_ServiceName, "S33695", TPMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpfree (( char * )ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
      }

      EXEC SQL
      SELECT COUNT(*)
      INTO :l_rec_cnt
      FROM TEMP_PLG_RECORDS;

      if( l_rec_cnt == 0 )
      {
        strcpy(c_err_msg,"There are no records for Pledge Confirmation status");
        BAT_POST(c_err_msg);
        fn_userlog(c_ServiceName,"There are no records for Pledge Confirmation status");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      fn_userlog( c_ServiceName,"[%ld] number of records for TMCM Confirmation",l_rec_cnt);

      for (i = 0; i < l_rec_cnt; i++)
      {

       fn_userlog(c_ServiceName,"Processing record :%d: of total records :%ld:",i+1,l_rec_cnt);

        fn_userlog(c_ServiceName,"Before begin 1");
        i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
        if ( i_trnsctn == -1 )
        {
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          fn_errlog( c_ServiceName, "S33700",LIBMSG,c_err_msg);
          l_acnt_id = -1;
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
          tpfree ( ( char * )ptr_fml_Obuf);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

				sql_tifp_qty=0;
				MEMSET(sql_isin_nmbr);
				MEMSET(sql_pod_ref_no);
				MEMSET(sql_mtch_accnt);
				MEMSET(sql_plg_stts);
				sql_pon_nmbr = 0.0; /**  **/
				MEMSET(sql_err_cd);
				MEMSET(sql_err_desc);
				MEMSET(sql_rej_desc);
				MEMSET(c_conf_date);  /* ver 1.7 */


				EXEC SQL 
				SELECT TMP_TIFP_QTY, TMP_ISIN_NMBR, TMP_DP_ID,
				TMP_DP_CLNT_ID, TMP_POD_REF_NO,	TMP_STCK_CD,
				TMP_CLM_MTCH_ACCNT,	TMP_SLIPNO_L1 
				INTO :sql_tifp_qty, :sql_isin_nmbr, :sql_dbd_dp_id,
				:sql_dbd_dp_clnt_id, :sql_pod_ref_no, :sql_stk_stck_cd,
				:sql_mtch_accnt, :sql_creation_slip_no
				FROM TEMP_PLG_RECORDS
				where rownum < 2;
		
				if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND) 
				{
					fn_errlog( c_ServiceName, "S33705", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				if(SQLCODE == NO_DATA_FOUND)
				{
					break;
				}

				EXEC SQL
						SELECT NVL(PTD_DPM_NMBR2,0)
						INTO :sql_plg_dpm_no
						FROM PTD_TIFP_DTLS
						WHERE trim(PTD_POD_REF_NO) = trim(:sql_pod_ref_no);

				if(SQLCODE !=0) 
				{
					fn_errlog( c_ServiceName, "S33710", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}


				fn_userlog(c_ServiceName,"Value of sql_tifp_qty :%ld",sql_tifp_qty);
				fn_userlog(c_ServiceName,"Value of sql_isin_nmbr :%s",sql_isin_nmbr.arr);
				fn_userlog(c_ServiceName,"Value of sql_dbd_dp_id :%s",sql_dbd_dp_id.arr);
				fn_userlog(c_ServiceName,"Value of sql_dbd_dp_clnt_id :%s",sql_dbd_dp_clnt_id.arr);
				fn_userlog(c_ServiceName,"Value of sql_pod_ref_no :%s",sql_pod_ref_no.arr);
				fn_userlog(c_ServiceName,"Value of sql_stk_stck_cd :%s",sql_stk_stck_cd);
				fn_userlog(c_ServiceName,"Value of sql_mtch_accnt :%s",sql_mtch_accnt.arr);
				fn_userlog(c_ServiceName,"Value of sql_creation_slip_no :%lld",sql_creation_slip_no);
				
				EXEC SQL 
				DELETE FROM TEMP_PLG_RECORDS
				WHERE ROWNUM < 2;

				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S33715", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				ptr_fml_Sbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
				if (ptr_fml_Sbuf == NULL)
				{
					fn_errlog(c_ServiceName, "S33720", TPMSG, c_err_msg);
					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
					Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
					tpfree((char *)ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
				}
					
				ptr_fml_Rbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
				if (ptr_fml_Rbuf == NULL)
				{
					fn_errlog(c_ServiceName, "S33725", TPMSG, c_err_msg);
					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
					Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
					tpfree((char *)ptr_fml_Obuf);
					tpfree((char *)ptr_fml_Sbuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );			
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
				}
					
				strcpy((char *)sql_usr_code.arr,"EBA");	
				strcpy((char *)temp,"PCR");
				sql_clsr_typ = 'U';
				SETLEN(sql_usr_code);
				fn_userlog(c_ServiceName,"After Buffer Allocation");

				i_err [0] = Fadd32( ptr_fml_Sbuf,FFO_OPERATION_TYP, (char *)&sql_oprn_typ,0);
				i_err [1] = Fadd32( ptr_fml_Sbuf, FFO_PLEDGE_TYP, (char *)temp,0);
				/** i_err [2] = Fadd32(ptr_fml_Sbuf,FFO_CRT_SLIP_NO,(char *)&sql_creation_slip_no,0); **/
				i_err [2] = Fadd32(ptr_fml_Sbuf,FFO_INDEX,(char *)&sql_creation_slip_no,0);
				i_err [3] = Fadd32(ptr_fml_Sbuf,FFO_USER_CODE,(char *)sql_usr_code.arr,0);

				for ( j=0; j <= 3; j++ )
				{
					if ( i_err[ j ] == -1 )
          {
						fn_errlog(c_ServiceName, "S33730", TPMSG, c_err_msg);
						Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
						Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
						tpfree((char *)ptr_fml_Obuf);
						tpfree((char *)ptr_fml_Sbuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );					
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
          }
				}

          if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0) /** Changed '2' to '1' in  **/
          {
            fn_userlog(c_ServiceName,"Calling SFO_CALL_DP ");
            i_returncode=tpcall("SFO_CALL_DP",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
          }
          else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0) /** Changed '2' to '1' in  **/
          {
            fn_userlog(c_ServiceName,"Calling SFO_CALL_DPC ");
            i_returncode=tpcall("SFO_CALL_DPC",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
          }

          fn_userlog(c_ServiceName,"After Call i_returncode : %d ",i_returncode);

          if (i_returncode == -1)
          {
            if(tperrno == TPESVCFAIL)
            {
              if(Fget32(ptr_fml_Rbuf, FFO_ERR_MSG, 0, c_err_msg, 0 ) == -1)
              {
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
                tpfree((char *)ptr_fml_Sbuf);
                tpfree((char *)ptr_fml_Rbuf);
                tpfree((char *)ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
              }
            }
            else
            {
              fn_errlog(c_ServiceName, "S33735", TPMSG, c_err_msg);
            }

            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
            tpfree((char *)ptr_fml_Sbuf);
            tpfree((char *)ptr_fml_Rbuf);
            tpfree((char *)ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
          }


				Fget32(ptr_fml_Rbuf,FFO_PLG_STTS,0,(char *)sql_plg_stts.arr,0);
				/**Fget32(ptr_fml_Rbuf,FFO_DPM_NO,0,(char *)&sql_pon_nmbr,0); --commented  **/
				Fget32(ptr_fml_Rbuf,FFO_JIFFY,0,(char *)&sql_pon_nmbr,0);  /** **/
				Fget32(ptr_fml_Rbuf,FFO_RTN_STTS,0,(char *)&sql_rtn_stts,0);
				Fget32(ptr_fml_Rbuf,FFO_ERR_CD,0,(char *)sql_err_cd.arr,0);
				Fget32(ptr_fml_Rbuf,FFO_ERR_DESC,0,(char *)sql_err_desc.arr,0);
				Fget32(ptr_fml_Rbuf,FFO_REJ_DESC,0,(char *)sql_rej_desc.arr,0);
			  Fget32(ptr_fml_Rbuf,FFO_RCRD_DT,0,(char *)c_conf_date.arr,0); /*ver 1.7  */
				SETLEN(sql_plg_stts);
				SETLEN(sql_err_cd);
				SETLEN(sql_err_desc);
				SETLEN(sql_rej_desc);
				SETLEN(c_conf_date);  /*ver 1.7*/

	
				fn_userlog(c_ServiceName,"The plg stts [%s]",sql_plg_stts.arr);
				fn_userlog(c_ServiceName,"The pon nmbr [%lf]",sql_pon_nmbr);  /**  **/
				fn_userlog(c_ServiceName,"The rtn stts [%ld]",sql_rtn_stts);
				fn_userlog(c_ServiceName,"The err code [%s]",sql_err_cd.arr);
				fn_userlog(c_ServiceName,"The err desc [%s]",sql_err_desc.arr);
				fn_userlog(c_ServiceName,"The rej desc [%s]",sql_rej_desc.arr);
				fn_userlog(c_ServiceName,"The confirmation date form DP is [%s]",c_conf_date.arr);/*ver 1.7 */

    /*** Ver 1.5 Starts ***/

		/*** Commented for TMCM *****

    i_valid_pon = 0;

    if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0)
    {
      MEMSET(c_pon_num);
      sprintf(c_pon_num.arr,"%lf",sql_pon_nmbr);
      SETLEN(c_pon_num);
      SETNULL(c_pon_num);

      fn_userlog(c_ServiceName,"The pon nmbr string is :%s:",c_pon_num.arr);

      if( strncmp (c_pon_num.arr,"1",1) == 0 )
      {
         i_valid_pon = 1;
      }
      else 
      {
         i_valid_pon = 0;
      }
    }
    else
      {
         i_valid_pon = 1;
      }

    fn_userlog(c_ServiceName,"The valid pon flag is :%d:",i_valid_pon);

			************** Comment ends **/
			
					/** Start for testing **
					sql_rtn_stts = 0;
					sql_pon_nmbr =123;
					strcpy(sql_plg_stts.arr,"PCN");
					* End for Testing **/

					if( sql_rtn_stts == 0 && sql_pon_nmbr != 0 && (strcmp(sql_plg_stts.arr,"PCN")==0))
					{
						fn_userlog(c_ServiceName, "Inside Pledge Confirmation Acceptance" );
						sql_plg_vs_wd_qty = 0;	
						fn_userlog(c_ServiceName, "VAlue of c_conf_date :%s:",c_conf_date.arr);
						fn_userlog(c_ServiceName, "VAlue of sql_pon_nmbr :%lf:",sql_pon_nmbr);
						fn_userlog(c_ServiceName, "VAlue of sql_dbd_dp_id :%s:",sql_dbd_dp_id.arr);
						fn_userlog(c_ServiceName, "VAlue of sql_dbd_dp_clnt_id :%s:",sql_dbd_dp_clnt_id.arr);
						fn_userlog(c_ServiceName, "VAlue of sql_isin_nmbr :%s:",sql_isin_nmbr.arr);
						fn_userlog(c_ServiceName, "VAlue of sql_creation_slip_no :%lld:",sql_creation_slip_no);
            fn_userlog(c_ServiceName, "The valid pon flag is :%d:",i_valid_pon);     /*** Ver 1.5 ***/

						EXEC SQL 
						UPDATE PTD_TIFP_DTLS SET
						PTD_LEG_NO = 'C5',
						PTD_TIFP_RUN_DT = sysdate,
						PTD_EXCTN_DT =:c_conf_date , 
						PTD_DPM_NMBR = :sql_pon_nmbr,
						PTD_DPM_NMBR3 = :sql_pon_nmbr,
            PTD_RMRKS = 'Success'    
						WHERE PTD_DP_ID = :sql_dbd_dp_id
						AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
						AND PTD_ISIN_NMBR = :sql_isin_nmbr
						AND PTD_PLG_REV_TYP = :sql_plg_typ
						AND PTD_TIFP_STTS = 'P'
						AND PTD_SLIPNO_L1 = :sql_creation_slip_no;

			    	if( SQLCODE !=0 )
      			{
        			fn_errlog( c_ServiceName, "S33740", SQLMSG, c_err_msg  );
        			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			l_acnt_id = -1;
        			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			}
						
						EXEC SQL 
						UPDATE POD_PLG_ORDR_DTLS SET
						POD_ORDR_STTS = 'C',
            POD_RMRKS = 'Success'
						WHERE trim(POD_ORDR_NO) = TRIM(:sql_pod_ref_no)
            AND    POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND POD_PLG_REV_TYP = :sql_plg_typ;

			    	if( SQLCODE !=0 )
      			{
        			fn_errlog( c_ServiceName, "S33745", SQLMSG, c_err_msg  );
        			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			l_acnt_id = -1;
        			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			}

					EXEC SQL 
					SELECT (COUNT(*)+1) 
					INTO :sql_pml_mod_cntr
					FROM PML_PLG_MOD_LOG
					WHERE PML_ORDR_NO = TRIM(:sql_pod_ref_no)
          AND    PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
					AND PML_MOD_TYPE IN ('N','M','C','J');
	
					if( SQLCODE !=0 )
     			{
       			fn_errlog( c_ServiceName, "S33750", SQLMSG, c_err_msg  );
       			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       			l_acnt_id = -1;
       			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       			tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );           
       			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     			}


					EXEC SQL 
					INSERT INTO PML_PLG_MOD_LOG
					(PML_ORDR_NO,
					PML_STCK_CD,
					PML_ORDR_QTY,
					PML_ORDR_TM,
					PML_HAIRCUT,
					PML_ORDR_VL,
					PML_ISIN_NO,
					PML_DP_CLNT_ACCNT,
					PML_DP_ACCNT,
					PML_CLNT_MTCH_ACCNT,
					PML_PLG_REV_TYP,
					PML_CONF_QTY,
					PML_RJCT_QTY,
					PML_MOD_TYPE,
					PML_STTS,
					PML_MOD_CNTR,
					PML_PLCD_SQNC,
					PML_BP_ID,
					PML_CHANNEL,
					PML_RMRKS)
					VALUES
					(	:sql_pod_ref_no,
  				:sql_stk_stck_cd,
					:sql_tifp_qty,
					sysdate,
					:sql_stk_plg_haircut,		 
 					:sql_plg_val,
					:sql_isin_nmbr,
					:sql_dbd_dp_clnt_id,
					:sql_dbd_dp_id,
					:sql_mtch_accnt,
					:sql_plg_typ,
					0,
					0,
					'L',
					'C',
					:sql_pml_mod_cntr,
					0,
					null,
					'SYS',
					'TMCM RePledge Confirmed');
					
					if( SQLCODE !=0 )
          {
          	fn_errlog( c_ServiceName, "S33755", SQLMSG, c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            l_acnt_id = -1;
            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
            tpfree ( ( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );       
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

   				EXEC SQL
               UPDATE ptd_tifp_dtls
               SET    PTD_DPM_NMBR3 = :sql_pon_nmbr
               WHERE  ptd_dpm_nmbr        = :sql_plg_dpm_no
               AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt
               AND    ptd_dp_id           = :sql_dbd_dp_id
               AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id
               AND    ptd_isin_nmbr       = :sql_isin_nmbr
               AND    ptd_plg_rev_typ     = 'T'
               AND    ptd_leg_no          = 'T5';

            if( SQLCODE !=0 )
            {
              fn_errlog( c_ServiceName, "S33760", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              l_acnt_id = -1;
              Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
              tpfree ( ( char * )ptr_fml_Obuf);
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

   				EXEC SQL
               UPDATE ptd_tifp_dtls
               SET    PTD_DPM_NMBR3 = :sql_pon_nmbr
               WHERE  PTD_DPM_NMBR2        = :sql_plg_dpm_no
               AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt
               AND    ptd_dp_id           = :sql_dbd_dp_id
               AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id
               AND    ptd_isin_nmbr       = :sql_isin_nmbr
               AND    ptd_plg_rev_typ     = 'P'
               AND    ptd_leg_no          = 'L5';

            if( SQLCODE !=0 )
            {
              fn_errlog( c_ServiceName, "S33765", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              l_acnt_id = -1;
              Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
              tpfree ( ( char * )ptr_fml_Obuf);
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

         EXEC SQL
               UPDATE ptd_tifp_dtls
               SET    PTD_DPM_NMBR3 = :sql_pon_nmbr
               WHERE  PTD_DPM_NMBR2        = :sql_plg_dpm_no
               AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt
               AND    ptd_dp_id           = :sql_dbd_dp_id
               AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id
               AND    ptd_isin_nmbr       = :sql_isin_nmbr
               AND    ptd_plg_rev_typ     in ('W','I')
							 AND		PTD_TIFP_STTS = 'N';

            if( (SQLCODE !=0) && (SQLCODE != NO_DATA_FOUND))
            {
              fn_errlog( c_ServiceName, "S33770", SQLMSG, c_err_msg  );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              l_acnt_id = -1;
              Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
              tpfree ( ( char * )ptr_fml_Obuf);
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }


					fn_userlog( c_ServiceName," Acceptance of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/
					sprintf(c_msg,"Acceptance of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr); /**  **/
					BAT_POST(c_msg);
				}
				else	if (strcmp(sql_plg_stts.arr,"REJ")==0)
					{
						fn_userlog( c_ServiceName, " Inside TMCM RePledge Confirmation Rejection");
						fn_userlog( c_ServiceName, " Execution date is [%s]",sql_execn_date.arr);

						sql_rtn_stts =1 ; /**/
						
						if(strcmp(sql_plg_stts.arr,"REJ")==0)
						{
							strcpy(sql_err_desc.arr, sql_rej_desc.arr);
						}

						SETLEN(sql_err_desc);

						EXEC SQL 
						UPDATE PTD_TIFP_DTLS SET
						PTD_LEG_NO = 'T5',
						PTD_TIFP_STTS = 'J',
						PTD_TIFP_RUN_DT = sysdate,
						PTD_EXCTN_DT = :c_conf_date,  
						PTD_RMRKS = trim(:sql_err_desc),
						PTD_SEG_CODE = NULL
						WHERE PTD_DP_ID = :sql_dbd_dp_id
						AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
						AND PTD_ISIN_NMBR = :sql_isin_nmbr
						AND PTD_PLG_REV_TYP = :sql_plg_typ
						AND PTD_TIFP_STTS = 'P'
						AND PTD_SLIPNO_L1 = :sql_creation_slip_no;

						if( SQLCODE !=0 )
						{
							fn_errlog( c_ServiceName, "S33775", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							l_acnt_id = -1;
							Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
							tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}

						fn_userlog( c_ServiceName, " The err desc is [%s]",sql_err_desc.arr);
						fn_userlog( c_ServiceName, " The rej desc is [%s]",sql_rej_desc.arr);
	

						EXEC SQL 
						UPDATE POD_PLG_ORDR_DTLS SET
						POD_ORDR_STTS = 'J',
						POD_PRCSD_QTY = 0,
						POD_RMRKS = trim(:sql_err_desc) 
						WHERE trim(POD_ORDR_NO) = TRIM(:sql_pod_ref_no)
						AND POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND POD_PLG_REV_TYP = :sql_plg_typ;

						if( SQLCODE !=0 )
						{
							fn_errlog( c_ServiceName, "S33780", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							l_acnt_id = -1;
							Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
							tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}

						EXEC SQL 
						SELECT (COUNT(*)+1) 
						INTO :sql_pml_mod_cntr
						FROM PML_PLG_MOD_LOG
						WHERE PML_ORDR_NO = TRIM(:sql_pod_ref_no)
						AND   PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND PML_MOD_TYPE IN ('N','M','C','J');

						if( SQLCODE !=0 )
						{
							fn_errlog( c_ServiceName, "S33785", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							l_acnt_id = -1;
							Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
							tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );     
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						 }

						EXEC SQL INSERT INTO PML_PLG_MOD_LOG
						(PML_ORDR_NO,
						PML_STCK_CD,
						PML_ORDR_QTY,
						PML_ORDR_TM,
						PML_HAIRCUT,
						PML_ORDR_VL,
						PML_ISIN_NO,
						PML_DP_CLNT_ACCNT,
						PML_DP_ACCNT,
						PML_CLNT_MTCH_ACCNT,
						PML_PLG_REV_TYP,
						PML_CONF_QTY,
						PML_RJCT_QTY,
						PML_MOD_TYPE,
						PML_STTS,
						PML_MOD_CNTR,
						PML_PLCD_SQNC,
						PML_BP_ID,
						PML_CHANNEL,
						PML_RMRKS)
						VALUES
						(	:sql_pod_ref_no,
							:sql_stk_stck_cd,
							:sql_tifp_qty,
							sysdate,
							:sql_stk_plg_haircut,		 
							:sql_plg_val,
							:sql_isin_nmbr,
							:sql_dbd_dp_clnt_id,
							:sql_dbd_dp_id,
							:sql_mtch_accnt,
							'P',
							0,
							0,
							'J',
							'C',
							:sql_pml_mod_cntr,
							0,
							null,
							'SYS',
							:sql_err_desc);
							
						if( SQLCODE !=0 )
						{
							fn_errlog( c_ServiceName, "S33790", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							l_acnt_id = -1;
							Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
							tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );         
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}

						EXEC SQL
								 UPDATE ptd_tifp_dtls
								 SET    PTD_REPLG2_QTY = PTD_REPLG2_QTY - :sql_tifp_qty
								 WHERE  ptd_dpm_nmbr        = :sql_plg_dpm_no
								 AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt
								 AND    ptd_dp_id           = :sql_dbd_dp_id
								 AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id
								 AND    ptd_isin_nmbr       = :sql_isin_nmbr
								 AND    ptd_plg_rev_typ     = 'T'
								 AND    ptd_leg_no          = 'T5';

						if( SQLCODE !=0 )
						{
							fn_errlog( c_ServiceName, "S33795", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							l_acnt_id = -1;
							Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
							tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );         
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}


							fn_userlog( c_ServiceName," Rejection of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr); /**  **/
							sprintf(c_msg,"Rejection of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr); /**  **/
							BAT_POST(c_msg);
							memset(c_msg,'\0',sizeof(c_msg));
							strncpy(c_msg,sql_err_desc.arr,254);
							BAT_POST(c_msg);
						}
						else
						{
							fn_userlog( c_ServiceName," Skipping record of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/
							sprintf(c_msg,"Skipping record of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/
							BAT_POST(c_msg);
							memset(c_msg,'\0',sizeof(c_msg));
							strncpy(c_msg,sql_err_desc.arr,254);
							BAT_POST(c_msg);
						}
					

					if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
	     		{
						fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
    				fn_errlog( c_ServiceName, "S33800", TPMSG, c_err_msg  );
			 			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				 		l_acnt_id = -1;
       			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       			tpfree (( char * )ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
					}	
		      
				 	tpfree((char *)ptr_fml_Sbuf);
         	tpfree((char *)ptr_fml_Rbuf);
				

			}
			tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );
		}
		else if( sql_plg_typ == 'U' )
		{

			i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  		if ( i_trnsctn == -1 )
  		{
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		fn_errlog( c_ServiceName, "S33805",LIBMSG,c_err_msg);
    		l_acnt_id = -1;
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    		tpfree ( ( char * )ptr_fml_Obuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

			EXEC SQL DELETE FROM TEMP_PLG_RECORDS;
			if((SQLCODE !=0) && (SQLCODE!= NO_DATA_FOUND))
  		{
    		fn_errlog( c_ServiceName, "S33810", SQLMSG, c_err_msg  );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		l_acnt_id = -1;
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}
		
				EXEC SQL INSERT INTO TEMP_PLG_RECORDS
				(TMP_TIFP_QTY, 
				TMP_PLG_REV_TYP,
				TMP_ISIN_NMBR,
				TMP_DP_ID,
				TMP_DP_CLNT_ID,
				TMP_POD_REF_NO,
				TMP_STCK_CD,
				TMP_CLM_MTCH_ACCNT,
				TMP_SLIPNO_L1,
				TMP_DPM_NMBR)
				( SELECT 
				PTD_TIFP_QTY,
				:sql_plg_typ,
				PTD_ISIN_NMBR,
				PTD_DP_ID, 
				PTD_DP_CLNT_ID, 
				PTD_POD_REF_NO, 
				PTD_STCK_CD,
				PTD_CLM_MTCH_ACCNT, 
				PTD_SLIPNO_L1,
				PTD_DPM_NMBR
				FROM PTD_TIFP_DTLS
				WHERE PTD_PLG_REV_TYP=:sql_plg_typ
				AND PTD_TIFP_STTS = 'P'
				AND PTD_LEG_NO = 'U1');

				if( SQLCODE !=0 )
  			{
    			fn_errlog( c_ServiceName, "S33815", SQLMSG, c_err_msg  );
    			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			l_acnt_id = -1;
    			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  			}

			if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   		{
				fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
    		fn_errlog( c_ServiceName, "S33820", TPMSG, c_err_msg  );
   			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     		l_acnt_id = -1;
     		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     		tpfree (( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
			}	

			EXEC SQL SELECT COUNT(*) INTO :l_rec_cnt
			FROM TEMP_PLG_RECORDS;

			if( l_rec_cnt == 0 )
			{
				strcpy(c_err_msg,"There are no records in Closure Confirmation status");
				BAT_POST(c_err_msg);
				fn_userlog(c_ServiceName,"There are no records in CLosure Confirmation status");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			fn_userlog( c_ServiceName," [%ld] number of records for Closure  confirmation",l_rec_cnt);
			sprintf(c_msg,"%ld number of records for Closure confirmation",l_rec_cnt);
			BAT_POST(c_msg);

			for (i =0; i < l_rec_cnt ; i++ )
			{
				i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
 				if ( i_trnsctn == -1 )
 				{
 					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     			fn_errlog( c_ServiceName, "S33825",LIBMSG,c_err_msg);
     			l_acnt_id = -1;
     			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     			tpfree ( ( char * )ptr_fml_Obuf);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     		}
			
					sql_tifp_qty=0;
					MEMSET(sql_isin_nmbr);
					MEMSET(sql_pod_ref_no);
					MEMSET(sql_mtch_accnt);
					MEMSET(sql_plg_stts);
					MEMSET(sql_err_cd);
					MEMSET(sql_err_desc);
					sql_pon_nmbr = 0.0; /**  **/
					MEMSET(sql_rej_desc);


				EXEC SQL SELECT TMP_TIFP_QTY, TMP_ISIN_NMBR, TMP_DP_ID,
				TMP_DP_CLNT_ID, TMP_POD_REF_NO,	TMP_STCK_CD,
				TMP_CLM_MTCH_ACCNT,	TMP_SLIPNO_L1 ,TMP_DPM_NMBR
				INTO :sql_tifp_qty, :sql_isin_nmbr, :sql_dbd_dp_id,
				:sql_dbd_dp_clnt_id, :sql_pod_ref_no, :sql_stk_stck_cd,
				:sql_mtch_accnt, :sql_creation_slip_no,:sql_pon_nmbr
				FROM TEMP_PLG_RECORDS
				where rownum < 2;

				if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND) 
				{
					fn_errlog( c_ServiceName, "S33830", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				if(SQLCODE == NO_DATA_FOUND)
				{
					break;
				}

				EXEC SQL 
				DELETE FROM TEMP_PLG_RECORDS
				WHERE ROWNUM < 2;
				
				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S33835", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   			{
					fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
    			fn_errlog( c_ServiceName, "S33840", TPMSG, c_err_msg  );
   				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     			l_acnt_id = -1;
     			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     			tpfree (( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
				}
	
				/** if(DEBUG_MSG_LVL_3){ **/
				fn_userlog(c_ServiceName,"The Qty for closure is [%ld]",sql_tifp_qty);
				fn_userlog(c_ServiceName,"The ISIN for closure is [%s]",sql_isin_nmbr.arr);
				fn_userlog(c_ServiceName,"The DP for closure is [%s]",sql_dbd_dp_id.arr);
				fn_userlog(c_ServiceName,"The Dp Client id for closure is [%s]",sql_dbd_dp_clnt_id.arr);
				fn_userlog(c_ServiceName,"The POD ref no. for closure is [%s]",sql_pod_ref_no.arr);
				fn_userlog(c_ServiceName,"The Stock Code for closure is [%s]",sql_stk_stck_cd);
				fn_userlog(c_ServiceName,"The Match A/C for closure is [%s]",sql_mtch_accnt.arr);
				fn_userlog(c_ServiceName,"The Creation Slip for closure is [%lld]",sql_creation_slip_no);
				/* } **/

					MEMSET(sql_usr_code);	
					strcpy((char *)sql_usr_code.arr,"EBA");
					SETLEN(sql_usr_code);

					sql_plg_val = 0.0;
					
					i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
     			if ( i_trnsctn == -1 )
     			{
     				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		     		fn_errlog( c_ServiceName, "S33845",LIBMSG,c_err_msg);
		     		l_acnt_id = -1;
		     		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		     		tpfree ( ( char * )ptr_fml_Obuf);
		     		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		     	}

					ptr_fml_Sbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
					if (ptr_fml_Sbuf == NULL)
					{
						fn_errlog(c_ServiceName, "S33850", TPMSG, c_err_msg);
						Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
						Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
						tpfree((char *)ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
						}
					
					ptr_fml_Rbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
					if (ptr_fml_Rbuf == NULL)
					{
						fn_errlog(c_ServiceName, "S33855", TPMSG, c_err_msg);
						Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
						Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
						tpfree((char *)ptr_fml_Obuf);
						tpfree((char *)ptr_fml_Sbuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );     
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
					}
					
					Fadd32( ptr_fml_Sbuf,FFO_OPERATION_TYP, (char *)&sql_oprn_typ,0);
					Fadd32( ptr_fml_Sbuf, FFO_PLEDGE_TYP, (char *)"PCL",0);
					/** Fadd32(ptr_fml_Sbuf,FFO_CRT_SLIP_NO,(char *)&sql_creation_slip_no,0); **/
					Fadd32(ptr_fml_Sbuf,FFO_INDEX,(char *)&sql_creation_slip_no,0);
					Fadd32(ptr_fml_Sbuf,FFO_USER_CODE,(char *)sql_usr_code.arr,0);


					/* Call DP for Withdrawal Confirmation*/


          if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0) 
          {	
						i_call_dp_flg = 1 ;  
            fn_userlog(c_ServiceName,"Calling SFO_CALL_DP ");
            i_returncode=tpcall("SFO_CALL_DP",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
          }
          else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0)
          {
						i_call_dp_flg = 2 ;  
            fn_userlog(c_ServiceName,"Calling SFO_CALL_DPC ");
            i_returncode=tpcall("SFO_CALL_DPC",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
          }

          fn_userlog(c_ServiceName,"After Call i_returncode : %d ",i_returncode);

          if (i_returncode == -1)
          {
            if(tperrno == TPESVCFAIL)
            {
              if(Fget32(ptr_fml_Rbuf, FFO_ERR_MSG, 0, c_err_msg, 0 ) == -1)
              {
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
                tpfree((char *)ptr_fml_Sbuf);
                tpfree((char *)ptr_fml_Rbuf);
                tpfree((char *)ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
              }
            }
            else
            {
              fn_errlog(c_ServiceName, "S33860", TPMSG, c_err_msg);
            }

            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
            tpfree((char *)ptr_fml_Sbuf);
            tpfree((char *)ptr_fml_Rbuf);
            tpfree((char *)ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
          }

					MEMSET(sql_plg_stts);
		 		  MEMSET(c_conf_date);
	
					Fget32(ptr_fml_Rbuf,FFO_PLG_STTS,0,(char *)sql_plg_stts.arr,0);
				 /**	Fget32(ptr_fml_Rbuf,FFO_DPM_NO,0,(char *)&sql_pon_nmbr,0); --commented  **/
					Fget32(ptr_fml_Rbuf,FFO_JIFFY,0,(char *)&sql_pon_nmbr,0); /**  **		*** Need to Comment for Margin Pledge ***/
					Fget32(ptr_fml_Rbuf,FFO_RTN_STTS,0,(char *)&sql_rtn_stts,0);
					Fget32(ptr_fml_Rbuf,FFO_ERR_CD,0,(char *)sql_err_cd.arr,0);
					Fget32(ptr_fml_Rbuf,FFO_ERR_DESC,0,(char *)sql_err_desc.arr,0);
					Fget32(ptr_fml_Rbuf,FFO_REJ_DESC,0,(char *)sql_rej_desc.arr,0);
					Fget32(ptr_fml_Rbuf,FFO_RCRD_DT,0,(char *)c_conf_date.arr,0); /*ver 1.7  */
			

					/***  starts ***/
					l_conf_qty = 0 ;
					l_rej_qty  = 0 ;

					if (i_call_dp_flg == 1)
					{
						Fget32(ptr_fml_Rbuf,FFO_TIFP_QTY,0,(char *)&l_conf_qty,0);
						Fget32(ptr_fml_Rbuf,FFO_CANCL_QTY,0,(char *)&l_rej_qty,0);
					}


					/***  Ends 	***/
	
					SETLEN(sql_plg_stts);
					SETLEN(sql_err_cd);
					SETLEN(sql_err_desc);
					SETLEN(sql_rej_desc);
					SETLEN(c_conf_date);  /*ver 1.7*/


					fn_userlog(c_ServiceName,"The plg stts [%s]",sql_plg_stts.arr);
					fn_userlog(c_ServiceName,"The pon nmbr [%lf]",sql_pon_nmbr);  /**  **/
					fn_userlog(c_ServiceName,"The rtn stts [%ld]",sql_rtn_stts);
					fn_userlog(c_ServiceName,"The err code [%s]",sql_err_cd.arr);
					fn_userlog(c_ServiceName,"The err desc [%s]",sql_err_desc.arr);
					fn_userlog(c_ServiceName,"The rej desc [%s]",sql_rej_desc.arr);
          fn_userlog(c_ServiceName,"The confirmation date form DP is [%s]",c_conf_date.arr);/*ver 1.7*/ 
          fn_userlog(c_ServiceName,"The confirmed  quantiy is [%ld]",l_conf_qty); 	/***  ***/ 
          fn_userlog(c_ServiceName,"The rejected quantiy is [%ld]",l_rej_qty); 			/***  ***/ 
			
					/*******Successfull Withdraw Confirmation from DP****************************/

					/*** if( sql_rtn_stts == 0 && (strcmp(sql_plg_stts.arr,"CCN")==0)) Commented In  ***/

					/** if( sql_rtn_stts == 0 && (strcmp(sql_plg_stts.arr,"CCN")==0) && (l_rej_qty==0)) ***  ***//* Commented for Confirmation */
					if(( sql_rtn_stts == 0 && (strcmp(sql_plg_stts.arr,"CCN")==0) && (l_rej_qty==0)) || (strncmp((char *)sql_err_cd.arr,"E00044",6) == 0)) 
					{
						fn_userlog(c_ServiceName,"Acceptance of Closure confirmation ");	

						if(strncmp((char *)sql_err_cd.arr,"E00044",6) == 0)
						{
						EXEC SQL UPDATE PTD_TIFP_DTLS SET
						PTD_LEG_NO = 'U5',
						PTD_TIFP_RUN_DT = sysdate,
						PTD_EXCTN_DT = SYSDATE,
            PTD_RMRKS = 'Success' 
						WHERE PTD_DP_ID = :sql_dbd_dp_id
						AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
						AND PTD_ISIN_NMBR = :sql_isin_nmbr
						AND PTD_PLG_REV_TYP = :sql_plg_typ
						AND PTD_TIFP_STTS = 'P'
						AND PTD_LEG_NO = 'U1'
						AND trim(PTD_POD_REF_NO) = trim(:sql_pod_ref_no);
						}
						else
						{
						EXEC SQL UPDATE PTD_TIFP_DTLS SET
						PTD_LEG_NO = 'U5',
						PTD_TIFP_RUN_DT = sysdate,
						/*  PTD_EXCTN_DT = :sql_execn_date  commented for the ver 1.7 */
						PTD_EXCTN_DT = :c_conf_date, /* ver 1.7 */
            PTD_RMRKS = 'Success'                           /** Ver 1.6  **/ 
						WHERE PTD_DP_ID = :sql_dbd_dp_id
						AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
						AND PTD_ISIN_NMBR = :sql_isin_nmbr
						AND PTD_PLG_REV_TYP = :sql_plg_typ
						AND PTD_TIFP_STTS = 'P'
						AND PTD_LEG_NO = 'U1'
						AND trim(PTD_POD_REF_NO) = trim(:sql_pod_ref_no)
						AND PTD_DPM_NMBR = :sql_pon_nmbr ;
						}

			    	if( SQLCODE !=0 )
      			{
        			fn_errlog( c_ServiceName, "S33865", SQLMSG, c_err_msg  );
        			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			l_acnt_id = -1;
        			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			}

						EXEC SQL 
						UPDATE POD_PLG_ORDR_DTLS SET
						POD_ORDR_STTS = 'C',
            POD_RMRKS = 'Success'
						WHERE trim(POD_ORDR_NO) = TRIM(:sql_pod_ref_no)
            AND POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND POD_PLG_REV_TYP = :sql_plg_typ;

						if( SQLCODE !=0 )
						{
						  fn_errlog( c_ServiceName, "S33870", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						  l_acnt_id = -1;
						  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						  tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}

						EXEC SQL SELECT (COUNT(*)+1) INTO :sql_pml_mod_cntr
						FROM PML_PLG_MOD_LOG
						WHERE PML_ORDR_NO = TRIM(:sql_pod_ref_no)
            AND    PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND PML_MOD_TYPE IN ('N','M','C','J');
	
						if( SQLCODE !=0 )
					  {
							fn_errlog( c_ServiceName, "S33875", SQLMSG, c_err_msg  );
       				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					    l_acnt_id = -1;
					    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					    tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );      
					    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					  }

						EXEC SQL INSERT INTO PML_PLG_MOD_LOG
						(PML_ORDR_NO,
						PML_STCK_CD,
						PML_ORDR_QTY,
						PML_ORDR_TM,
						PML_HAIRCUT,
						PML_ORDR_VL,
						PML_ISIN_NO,
						PML_DP_CLNT_ACCNT,
						PML_DP_ACCNT,
						PML_CLNT_MTCH_ACCNT,
						PML_PLG_REV_TYP,
						PML_CONF_QTY,
						PML_RJCT_QTY,
						PML_MOD_TYPE,
						PML_STTS,
						PML_MOD_CNTR,
						PML_PLCD_SQNC,
						PML_BP_ID,
						PML_CHANNEL,
						PML_RMRKS)
						VALUES
						(	:sql_pod_ref_no,
		  				:sql_stk_stck_cd,
							:sql_tifp_qty,
							sysdate,
							:sql_stk_plg_haircut,		 
	   					:sql_plg_val,
							:sql_isin_nmbr,
							:sql_dbd_dp_clnt_id,
							:sql_dbd_dp_id,
							:sql_mtch_accnt,
							:sql_plg_typ,
							0,
							0,
							'L',
							'C',
							:sql_pml_mod_cntr,
							0,
							null,
							'SYS',
							'Closure Repelege1 Completed');
							
							if( SQLCODE !=0 )
		          {
		          	fn_errlog( c_ServiceName, "S33880", SQLMSG, c_err_msg  );
		            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		            l_acnt_id = -1;
		            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		            tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );				
		            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		          }

						fn_userlog( c_ServiceName," Acceptance of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);   /**  **/
						sprintf(c_msg,"Acceptance of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/
						BAT_POST(c_msg);
					}	
			
					else
/*  commented sql_rtn_stts in If condition   
	if ((sql_rtn_stts == 1) && (strcmp(sql_plg_stts.arr,"REJ")==0))*/
					if (strcmp(sql_plg_stts.arr,"REJ")==0)
					{

						sql_rtn_stts =1 ; /**/
						
						EXEC SQL 
						UPDATE PTD_TIFP_DTLS SET
						PTD_LEG_NO = 'U5',
						PTD_TIFP_STTS = 'J',
						PTD_TIFP_RUN_DT = sysdate,
						/* PTD_EXCTN_DT = :sql_execn_date,--commented for the ver 1.7 */
						PTD_EXCTN_DT = :c_conf_date,  /* ver 1.7 */
            PTD_RMRKS = trim(:sql_err_desc)    /** Ver 1.6  **/           
						WHERE PTD_DP_ID = :sql_dbd_dp_id
						AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
						AND PTD_ISIN_NMBR = :sql_isin_nmbr
						AND PTD_PLG_REV_TYP = :sql_plg_typ
						AND PTD_TIFP_STTS = 'P'
						AND PTD_LEG_NO = 'U1'
            AND trim(PTD_POD_REF_NO) = trim(:sql_pod_ref_no)
            AND PTD_DPM_NMBR = :sql_pon_nmbr;

			    	if( SQLCODE !=0 )
      			{
        			fn_errlog( c_ServiceName, "S33885", SQLMSG, c_err_msg  );
        			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			l_acnt_id = -1;
        			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			}

						EXEC SQL
								 UPDATE ptd_tifp_dtls
								 SET    ptd_plg_vs_wd_qty = ptd_plg_vs_wd_qty - :sql_plg_vs_wd_qty_rej
								 WHERE  ptd_dpm_nmbr        = :sql_pon_nmbr
								 AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt
								 AND    ptd_dp_id           = :sql_dbd_dp_id
								 AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id
								 AND    ptd_isin_nmbr       = :sql_isin_nmbr
								 AND    ptd_plg_rev_typ     = 'T'
								 AND    ptd_leg_no          = 'T5'
								 AND		PTD_TIFP_STTS = 'P'
								 AND		ptd_plg_vs_wd_qty > 0
								 AND ROWNUM < 2;


						if ( SQLCODE != 0 )
						{
							fn_errlog( c_ServiceName, "S33890", SQLMSG, c_err_msg  );
							fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}

						EXEC SQL UPDATE POD_PLG_ORDR_DTLS SET
						POD_ORDR_STTS = 'J',
						POD_PRCSD_QTY = 0,
            POD_RMRKS = trim(:sql_err_desc)
						WHERE trim(POD_ORDR_NO) = TRIM(:sql_pod_ref_no)
            AND    POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND POD_PLG_REV_TYP = :sql_plg_typ;

						if( SQLCODE !=0 )
						{
						  fn_errlog( c_ServiceName, "S33895", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						  l_acnt_id = -1;
						  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						  tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}

						EXEC SQL SELECT (COUNT(*)+1) INTO :sql_pml_mod_cntr
						FROM PML_PLG_MOD_LOG
						WHERE PML_ORDR_NO = TRIM(:sql_pod_ref_no)
            AND    PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND PML_MOD_TYPE IN ('N','M','C','J');
	
						if( SQLCODE !=0 )
					  {
							fn_errlog( c_ServiceName, "S33900", SQLMSG, c_err_msg  );
       				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					    l_acnt_id = -1;
					    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					    tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );       
					    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					  }

						EXEC SQL INSERT INTO PML_PLG_MOD_LOG
							(PML_ORDR_NO,
							PML_STCK_CD,
							PML_ORDR_QTY,
							PML_ORDR_TM,
							PML_HAIRCUT,
							PML_ORDR_VL,
							PML_ISIN_NO,
							PML_DP_CLNT_ACCNT,
							PML_DP_ACCNT,
							PML_CLNT_MTCH_ACCNT,
							PML_PLG_REV_TYP,
							PML_CONF_QTY,
							PML_RJCT_QTY,
							PML_MOD_TYPE,
							PML_STTS,
							PML_MOD_CNTR,
							PML_PLCD_SQNC,
							PML_BP_ID,
							PML_CHANNEL,
							PML_RMRKS)
							VALUES
							(	:sql_pod_ref_no,
			  				:sql_stk_stck_cd,
								:sql_tifp_qty,
								sysdate,
								:sql_stk_plg_haircut,		 
		   					:sql_plg_val,
								:sql_isin_nmbr,
								:sql_dbd_dp_clnt_id,
								:sql_dbd_dp_id,
								:sql_mtch_accnt,
								'W',
								0,
								0,
								'J',
								'C',
								:sql_pml_mod_cntr,
								0,
								null,
								'SYS',
								:sql_err_desc);
							
							if( SQLCODE !=0 )
		          {
		          	fn_errlog( c_ServiceName, "S33905", SQLMSG, c_err_msg  );
		            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		            l_acnt_id = -1;
		            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		            tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );           
		            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		          }
					

							/*** Commented for combined ****

							EXEC SQL
								UPDATE  PTD_TIFP_DTLS
								SET     PTD_REPLG1_QTY     = NVL(PTD_REPLG1_QTY,0) - :sql_tifp_qty
								WHERE   trim(PTD_DPM_NMBR2)    = trim(:sql_pon_nmbr)
								AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
								AND     PTD_DP_ID             = :sql_dbd_dp_id
								AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
								AND     PTD_STCK_CD           = :sql_stk_stck_cd
								AND    ptd_isin_nmbr       = :sql_isin_nmbr
								AND     ((PTD_PLG_REV_TYP = 'W' AND PTD_LEG_NO = 'W3') OR (PTD_PLG_REV_TYP = 'I' AND PTD_LEG_NO = 'I3'))
								AND			PTD_TIFP_STTS							= 'P'; 


							if ( SQLCODE != 0 )
							{
								fn_errlog( c_ServiceName, "S33910", SQLMSG, c_err_msg  );
								fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
								EXEC SQL CLOSE ptd_cur;
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								tpfree ( ( char * )ptr_fml_Obuf);
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}

							*** End for Combined **/
					
							 EXEC SQL
										DECLARE REPLG_CLOSURE4 CURSOR FOR
										SELECT  PTD_POD_REF_NO,
														PTD_TIFP_QTY,
														NVL(PTD_REPLG1_QTY,0),
														ptd_clm_mtch_accnt ,  
														ptd_dp_id ,
														ptd_dp_clnt_id ,
														ptd_isin_nmbr
										FROM    ptd_tifp_dtls 
										WHERE   trim(PTD_DPM_NMBR2)    = trim(:sql_pon_nmbr)
										AND     ptd_plg_rev_typ in ('W','I')
										AND			PTD_LEG_NO IS NULL
										AND			PTD_TIFP_STTS = 'N'
										AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
										AND     PTD_DP_ID             = :sql_dbd_dp_id
										AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
										AND     PTD_STCK_CD           = :sql_stk_stck_cd;

								/**********
								EXEC SQL
									UPDATE  PTD_TIFP_DTLS
									SET     PTD_REPLG2_QTY     = NVL(PTD_REPLG2_QTY,0) + :sql_tifp_qty
									WHERE   trim(PTD_DPM_NMBR)    = trim(:d_pon_no_pledge)
									AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
									AND     PTD_DP_ID             = :sql_dbd_dp_id
									AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
									AND     PTD_STCK_CD           = :sql_stk_stck_cd
									AND     ((PTD_PLG_REV_TYP = 'W' AND PTD_LEG_NO = 'W3') OR (PTD_PLG_REV_TYP = 'I' AND PTD_LEG_NO = 'I3'))
									AND			PTD_TIFP_STTS							= 'P'; 
								*****/

								if ( SQLCODE != 0 )
								{
									fn_errlog( c_ServiceName, "S33915", SQLMSG, c_err_msg  );
									fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									tpfree ( ( char * )ptr_fml_Obuf);
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}


								EXEC SQL OPEN REPLG_CLOSURE4;

								if ( SQLCODE != 0 )
								{
										fn_errlog(c_ServiceName, "S33920", SQLMSG, c_err_msg);
										fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
										tpfree ( ( char * )ptr_fml_Obuf);
										tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
								}

								qty_remaining_to_cls = sql_tifp_qty;

								while(1)
								{

									MEMSET(sql_ptd_pod_ref_no);
									MEMSET(sql_ptd_clm_mtch_accnt);
									MEMSET(sql_ptd_dp_id);
									MEMSET(sql_ptd_dp_clnt_id);
									MEMSET(sql_ptd_isin_nmbr);
									sql_ptd_tifp_qty = 0;
									sql_ptd_replg1_qty = 0;

									EXEC SQL
										FETCH REPLG_CLOSURE4
										INTO 
											:sql_ptd_pod_ref_no,
											:sql_ptd_tifp_qty,
											:sql_ptd_replg1_qty,
											:sql_ptd_clm_mtch_accnt,  
											:sql_ptd_dp_id,
											:sql_ptd_dp_clnt_id,
											:sql_ptd_isin_nmbr;

									if ( SQLCODE != 0 )
									{
										if ( SQLCODE == NO_DATA_FOUND )
										{
												EXEC SQL CLOSE REPLG_CLOSURE4;
												break;
										}
										else
										{
												EXEC SQL CLOSE REPLG_CLOSURE4;
												fn_errlog( c_ServiceName, "S33925", SQLMSG, c_err_msg  );
												fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
												fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
												break;
										}
									}

									SETLEN(sql_ptd_pod_ref_no);
									SETLEN(sql_ptd_clm_mtch_accnt);
									SETLEN(sql_ptd_dp_id);
									SETLEN(sql_ptd_dp_clnt_id);
									SETLEN(sql_ptd_isin_nmbr);

									SETNULL(sql_ptd_pod_ref_no);
									SETNULL(sql_ptd_clm_mtch_accnt);
									SETNULL(sql_ptd_dp_id);
									SETNULL(sql_ptd_dp_clnt_id);
									SETNULL(sql_ptd_isin_nmbr);

									fn_userlog(c_ServiceName,"Inside Cursor of update repledge......");
									fn_userlog(c_ServiceName,"sql_ptd_pod_ref_no [%s]",sql_ptd_pod_ref_no.arr);
									fn_userlog(c_ServiceName,"sql_ptd_clm_mtch_accnt [%s]",sql_ptd_clm_mtch_accnt.arr);
									fn_userlog(c_ServiceName,"sql_ptd_dp_id [%s]",sql_ptd_dp_id.arr);
									fn_userlog(c_ServiceName,"sql_ptd_dp_clnt_id [%s]",sql_ptd_dp_clnt_id.arr);
									fn_userlog(c_ServiceName,"sql_ptd_isin_nmbr [%s]",sql_ptd_isin_nmbr.arr);
									fn_userlog(c_ServiceName,"sql_ptd_tifp_qty :%ld:",sql_ptd_tifp_qty);
									fn_userlog(c_ServiceName,"sql_ptd_replg1_qty :%ld:",sql_ptd_replg1_qty);
									fn_userlog(c_ServiceName,"qty_remaining_to_cls :%ld:",qty_remaining_to_cls);


									if (qty_remaining_to_cls > sql_ptd_replg1_qty)
									{
										upd_qty = sql_ptd_replg1_qty;
										qty_remaining_to_cls = qty_remaining_to_cls - sql_ptd_replg1_qty;
									}
									else if (qty_remaining_to_cls <= sql_ptd_replg1_qty)
									{
										upd_qty = qty_remaining_to_cls;
										qty_remaining_to_cls  = 0;
									}
									
									EXEC SQL
										UPDATE  PTD_TIFP_DTLS
										SET     PTD_REPLG1_QTY = NVL(PTD_REPLG1_QTY,0) - :upd_qty
										WHERE   PTD_CLM_MTCH_ACCNT = :sql_ptd_clm_mtch_accnt
										AND     PTD_DP_ID = :sql_ptd_dp_id
										AND     PTD_DP_CLNT_ID = :sql_ptd_dp_clnt_id
										AND			PTD_ISIN_NMBR	= :sql_ptd_isin_nmbr
										AND			PTD_POD_REF_NO	=	:sql_ptd_pod_ref_no
										AND			trim(PTD_DPM_NMBR2)    = trim(:sql_pon_nmbr)
										AND     ((PTD_PLG_REV_TYP = 'W' AND PTD_LEG_NO IS NULL) OR (PTD_PLG_REV_TYP = 'I' AND PTD_LEG_NO IS NULL))
										AND			PTD_TIFP_STTS	= 'N'; 


										if ( SQLCODE != 0 )
										{
												fn_errlog(c_ServiceName, "S33930", SQLMSG, c_err_msg);
												EXEC SQL CLOSE REPLG_CLOSURE4;
												fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
												Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
												tpfree ( ( char * )ptr_fml_Obuf);
												tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
										}
								}


						
						fn_userlog( c_ServiceName," Rejection of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);   /**  **/
						sprintf(c_msg,"Rejection of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);    /**  **/
						BAT_POST(c_msg);
						memset(c_msg,'\0',sizeof(c_msg));
						strncpy(c_msg,sql_err_desc.arr,254);
						BAT_POST(c_msg);

					}
					else
					{
						fn_userlog( c_ServiceName," Skipping record of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/
						sprintf(c_msg,"Skipping record of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);    /**  **/
						BAT_POST(c_msg);
						memset(c_msg,'\0',sizeof(c_msg));
						strncpy(c_msg,sql_err_desc.arr,254);
						BAT_POST(c_msg);
					}

				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
     		{
    			fn_errlog( c_ServiceName, "S33935", TPMSG, c_err_msg  );
     			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       		l_acnt_id = -1;
       		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       		tpfree (( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
				}	
				
				tpfree((char *)ptr_fml_Sbuf);
      	tpfree((char *)ptr_fml_Rbuf);

				}

			tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );

		}		

		else if( sql_plg_typ == 'D' )
		{

			i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  		if ( i_trnsctn == -1 )
  		{
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		fn_errlog( c_ServiceName, "S33940",LIBMSG,c_err_msg);
    		l_acnt_id = -1;
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    		tpfree ( ( char * )ptr_fml_Obuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

			EXEC SQL DELETE FROM TEMP_PLG_RECORDS;
			if((SQLCODE !=0) && (SQLCODE!= NO_DATA_FOUND))
  		{
    		fn_errlog( c_ServiceName, "S33945", SQLMSG, c_err_msg  );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		l_acnt_id = -1;
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
				tpfree ( ( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}
		
				EXEC SQL INSERT INTO TEMP_PLG_RECORDS
				(TMP_TIFP_QTY, 
				TMP_PLG_REV_TYP,
				TMP_ISIN_NMBR,
				TMP_DP_ID,
				TMP_DP_CLNT_ID,
				TMP_POD_REF_NO,
				TMP_STCK_CD,
				TMP_CLM_MTCH_ACCNT,
				TMP_SLIPNO_L1,
				TMP_DPM_NMBR)
				( SELECT 
				PTD_TIFP_QTY,
				:sql_plg_typ,
				PTD_ISIN_NMBR,
				PTD_DP_ID, 
				PTD_DP_CLNT_ID, 
				PTD_POD_REF_NO, 
				PTD_STCK_CD,
				PTD_CLM_MTCH_ACCNT, 
				PTD_SLIPNO_L1,
				PTD_DPM_NMBR
				FROM PTD_TIFP_DTLS
				WHERE PTD_PLG_REV_TYP=:sql_plg_typ
				AND PTD_TIFP_STTS = 'P'
				AND PTD_LEG_NO = 'D1');

				if( SQLCODE !=0 )
  			{
    			fn_errlog( c_ServiceName, "S33950", SQLMSG, c_err_msg  );
    			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			l_acnt_id = -1;
    			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  			}

			if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   		{
				fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
    		fn_errlog( c_ServiceName, "S33955", TPMSG, c_err_msg  );
   			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     		l_acnt_id = -1;
     		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     		tpfree (( char * )ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
			}	

			EXEC SQL SELECT COUNT(*) INTO :l_rec_cnt
			FROM TEMP_PLG_RECORDS;

			if( l_rec_cnt == 0 )
			{
				strcpy(c_err_msg,"There are no records in Closure Confirmation status");
				BAT_POST(c_err_msg);
				fn_userlog(c_ServiceName,"There are no records in CLosure Confirmation status");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			fn_userlog( c_ServiceName," [%ld] number of records for Closure  confirmation",l_rec_cnt);
			sprintf(c_msg,"%ld number of records for Closure confirmation",l_rec_cnt);
			BAT_POST(c_msg);

			for (i =0; i < l_rec_cnt ; i++ )
			{
				i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
 				if ( i_trnsctn == -1 )
 				{
 					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     			fn_errlog( c_ServiceName, "S33960",LIBMSG,c_err_msg);
     			l_acnt_id = -1;
     			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     			tpfree ( ( char * )ptr_fml_Obuf);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     		}
			
					sql_tifp_qty=0;
					MEMSET(sql_isin_nmbr);
					MEMSET(sql_pod_ref_no);
					MEMSET(sql_mtch_accnt);
					MEMSET(sql_plg_stts);
					MEMSET(sql_err_cd);
					MEMSET(sql_err_desc);
					sql_pon_nmbr = 0.0; /**  **/
					MEMSET(sql_rej_desc);


				EXEC SQL SELECT TMP_TIFP_QTY, TMP_ISIN_NMBR, TMP_DP_ID,
				TMP_DP_CLNT_ID, TMP_POD_REF_NO,	TMP_STCK_CD,
				TMP_CLM_MTCH_ACCNT,	TMP_SLIPNO_L1 ,TMP_DPM_NMBR
				INTO :sql_tifp_qty, :sql_isin_nmbr, :sql_dbd_dp_id,
				:sql_dbd_dp_clnt_id, :sql_pod_ref_no, :sql_stk_stck_cd,
				:sql_mtch_accnt, :sql_creation_slip_no,:sql_pon_nmbr
				FROM TEMP_PLG_RECORDS
				where rownum < 2;

				if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND) 
				{
					fn_errlog( c_ServiceName, "S33965", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
				if(SQLCODE == NO_DATA_FOUND)
				{
					break;
				}

				EXEC SQL 
				DELETE FROM TEMP_PLG_RECORDS
				WHERE ROWNUM < 2;
				
				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S33970", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   			{
					fn_userlog(c_ServiceName,"Pledge Confirmation records Committed");
    			fn_errlog( c_ServiceName, "S33975", TPMSG, c_err_msg  );
   				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     			l_acnt_id = -1;
     			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
     			tpfree (( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
				}
	
				/** if(DEBUG_MSG_LVL_3){ **/
				fn_userlog(c_ServiceName,"The Qty for closure is [%ld]",sql_tifp_qty);
				fn_userlog(c_ServiceName,"The ISIN for closure is [%s]",sql_isin_nmbr.arr);
				fn_userlog(c_ServiceName,"The DP for closure is [%s]",sql_dbd_dp_id.arr);
				fn_userlog(c_ServiceName,"The Dp Client id for closure is [%s]",sql_dbd_dp_clnt_id.arr);
				fn_userlog(c_ServiceName,"The POD ref no. for closure is [%s]",sql_pod_ref_no.arr);
				fn_userlog(c_ServiceName,"The Stock Code for closure is [%s]",sql_stk_stck_cd);
				fn_userlog(c_ServiceName,"The Match A/C for closure is [%s]",sql_mtch_accnt.arr);
				fn_userlog(c_ServiceName,"The Creation Slip for closure is [%lld]",sql_creation_slip_no);
				fn_userlog(c_ServiceName,"The pon nmbr [%lf]",sql_pon_nmbr);  
				/* } **/


					MEMSET(sql_usr_code);	
					strcpy((char *)sql_usr_code.arr,"EBA");
					SETLEN(sql_usr_code);

					sql_plg_val = 0.0;
					
					i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
     			if ( i_trnsctn == -1 )
     			{
     				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		     		fn_errlog( c_ServiceName, "S33980",LIBMSG,c_err_msg);
		     		l_acnt_id = -1;
		     		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		     		tpfree ( ( char * )ptr_fml_Obuf);
		     		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		     	}
			/******************* Commented for CC CM Repledge closure ****

					ptr_fml_Sbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
					if (ptr_fml_Sbuf == NULL)
					{
						fn_errlog(c_ServiceName, "S33985", TPMSG, c_err_msg);
						Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
						Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
						tpfree((char *)ptr_fml_Obuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
						}
					
					ptr_fml_Rbuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
					if (ptr_fml_Rbuf == NULL)
					{
						fn_errlog(c_ServiceName, "S33990", TPMSG, c_err_msg);
						Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
						Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
						tpfree((char *)ptr_fml_Obuf);
						tpfree((char *)ptr_fml_Sbuf);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );     
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
					}
					
					Fadd32( ptr_fml_Sbuf,FFO_OPERATION_TYP, (char *)&sql_oprn_typ,0);
					Fadd32( ptr_fml_Sbuf, FFO_PLEDGE_TYP, (char *)"PCL",0);
					Fadd32(ptr_fml_Sbuf,FFO_INDEX,(char *)&sql_creation_slip_no,0);
					Fadd32(ptr_fml_Sbuf,FFO_USER_CODE,(char *)sql_usr_code.arr,0);


          if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) != 0) 
          {	
						i_call_dp_flg = 1 ;  
            fn_userlog(c_ServiceName,"Calling SFO_CALL_DP ");
            i_returncode=tpcall("SFO_CALL_DP",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
          }
          else if(strncmp(sql_dbd_dp_id.arr,CDSL_ID,1) == 0)
          {
						i_call_dp_flg = 2 ;  
            fn_userlog(c_ServiceName,"Calling SFO_CALL_DPC ");
            i_returncode=tpcall("SFO_CALL_DPC",(char *)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_recvbuff,0);
          }

          fn_userlog(c_ServiceName,"After Call i_returncode : %d ",i_returncode);

          if (i_returncode == -1)
          {
            if(tperrno == TPESVCFAIL)
            {
              if(Fget32(ptr_fml_Rbuf, FFO_ERR_MSG, 0, c_err_msg, 0 ) == -1)
              {
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
                tpfree((char *)ptr_fml_Sbuf);
                tpfree((char *)ptr_fml_Rbuf);
                tpfree((char *)ptr_fml_Obuf);
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0L, 0);
              }
            }
            else
            {
              fn_errlog(c_ServiceName, "S33995", TPMSG, c_err_msg);
            }

            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            Fadd32(ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0);
            tpfree((char *)ptr_fml_Sbuf);
            tpfree((char *)ptr_fml_Rbuf);
            tpfree((char *)ptr_fml_Obuf);
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
          }

					MEMSET(sql_plg_stts);
		 		  MEMSET(c_conf_date);
	
					Fget32(ptr_fml_Rbuf,FFO_PLG_STTS,0,(char *)sql_plg_stts.arr,0);
					Fget32(ptr_fml_Rbuf,FFO_JIFFY,0,(char *)&sql_pon_nmbr,0); 
					Fget32(ptr_fml_Rbuf,FFO_RTN_STTS,0,(char *)&sql_rtn_stts,0);
					Fget32(ptr_fml_Rbuf,FFO_ERR_CD,0,(char *)sql_err_cd.arr,0);
					Fget32(ptr_fml_Rbuf,FFO_ERR_DESC,0,(char *)sql_err_desc.arr,0);
					Fget32(ptr_fml_Rbuf,FFO_REJ_DESC,0,(char *)sql_rej_desc.arr,0);
					Fget32(ptr_fml_Rbuf,FFO_RCRD_DT,0,(char *)c_conf_date.arr,0); 
			

					l_conf_qty = 0 ;
					l_rej_qty  = 0 ;

					if (i_call_dp_flg == 1)
					{
						Fget32(ptr_fml_Rbuf,FFO_TIFP_QTY,0,(char *)&l_conf_qty,0);
						Fget32(ptr_fml_Rbuf,FFO_CANCL_QTY,0,(char *)&l_rej_qty,0);
					}


***** Comment end for CC CM ****/

					SETLEN(sql_plg_stts);
					SETLEN(sql_err_cd);
					SETLEN(sql_err_desc);
					SETLEN(sql_rej_desc);
					SETLEN(c_conf_date);  /*ver 1.7*/

					MEMSET(cc_status_flg);
					MEMSET(v_rrd_stts_rmrks);
					MEMSET(cc_cm_rowid);

					EXEC SQL
						SELECT NVL(RRD_STTS_FLG,'N'),NVL(TRIM(RRD_STTS_RMRKS),' '),ROWID
						INTO :cc_status_flg,:v_rrd_stts_rmrks,:cc_cm_rowid
						FROM RRD_REPLG_RELESE_DTLS
						WHERE RRD_DPM3_NO = :sql_pon_nmbr
						AND	RRD_OPERATION_TYP = 'C'
						AND	NVL(RRD_STTS_READ_FLG,'N') = 'N';

			    	if( SQLCODE !=0 )
      			{
							if (SQLCODE == NO_DATA_FOUND)
							{
								sprintf(c_msg,"No data found for PON :%lf:",sql_pon_nmbr);
								fn_userlog(c_ServiceName,"%s",c_msg);
								BAT_POST(c_msg);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								continue;
							}
							else
							{
								fn_errlog( c_ServiceName, "S34000", SQLMSG, c_err_msg  );
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								l_acnt_id = -1;
								Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
								tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
      			}

						SETLEN(v_rrd_stts_rmrks);
						SETNULL(v_rrd_stts_rmrks);

					fn_userlog(c_ServiceName,"The err desc v_rrd_stts_rmrks [%s]",v_rrd_stts_rmrks.arr);
					fn_userlog(c_ServiceName,"Value of cc_cm_rowid [%s]",cc_cm_rowid);

					EXEC SQL
						UPDATE RRD_REPLG_RELESE_DTLS
						SET RRD_STTS_READ_FLG = 'Y'
						WHERE ROWID = :cc_cm_rowid;

				if(SQLCODE !=0 ) 
				{
					fn_errlog( c_ServiceName, "S34005", SQLMSG, c_err_msg  );
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        	l_acnt_id = -1;
        	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					tpfree ( ( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

					if (cc_status_flg == 'S')
					{
						sql_rtn_stts = 0;
						strcpy(sql_plg_stts.arr,"CCN");
						l_rej_qty = 0;
					}
					else if (cc_status_flg == 'F')
					{
						sql_rtn_stts = 1;
						strcpy(sql_plg_stts.arr,"REJ");
						l_rej_qty = 0;
						strcpy(sql_err_desc.arr,v_rrd_stts_rmrks.arr);
					}

					fn_userlog(c_ServiceName,"The plg stts [%s]",sql_plg_stts.arr);
					fn_userlog(c_ServiceName,"The pon nmbr [%lf]",sql_pon_nmbr);  /**  **/
					fn_userlog(c_ServiceName,"The rtn stts [%ld]",sql_rtn_stts);
					fn_userlog(c_ServiceName,"The err code [%s]",sql_err_cd.arr);
					fn_userlog(c_ServiceName,"The err desc [%s]",sql_err_desc.arr);
					fn_userlog(c_ServiceName,"The rej desc [%s]",sql_rej_desc.arr);
          fn_userlog(c_ServiceName,"The confirmation date form DP is [%s]",c_conf_date.arr);/*ver 1.7*/ 
          fn_userlog(c_ServiceName,"The confirmed  quantiy is [%ld]",l_conf_qty); 	/***  ***/ 
          fn_userlog(c_ServiceName,"The rejected quantiy is [%ld]",l_rej_qty); 			/***  ***/ 
			
					/*******Successfull Withdraw Confirmation from DP****************************/

					/*** if( sql_rtn_stts == 0 && (strcmp(sql_plg_stts.arr,"CCN")==0)) Commented In  ***/

					if( sql_rtn_stts == 0 && (strcmp(sql_plg_stts.arr,"CCN")==0) && (l_rej_qty==0)) /***  ***/
					{
						fn_userlog(c_ServiceName,"Acceptance of Closure confirmation ");	
						EXEC SQL UPDATE PTD_TIFP_DTLS SET
						PTD_LEG_NO = 'D5',
						PTD_TIFP_RUN_DT = sysdate,
						/*  PTD_EXCTN_DT = :sql_execn_date  commented for the ver 1.7 */
						PTD_EXCTN_DT = :c_conf_date, /* ver 1.7 */
            PTD_RMRKS = 'Success'                           /** Ver 1.6  **/ 
						WHERE PTD_DP_ID = :sql_dbd_dp_id
						AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
						AND PTD_ISIN_NMBR = :sql_isin_nmbr
						AND PTD_PLG_REV_TYP = :sql_plg_typ
						AND PTD_TIFP_STTS = 'P'
						AND PTD_LEG_NO = 'D1'
						AND trim(PTD_POD_REF_NO) = trim(:sql_pod_ref_no)
						AND PTD_DPM_NMBR = :sql_pon_nmbr ;

			    	if( SQLCODE !=0 )
      			{
        			fn_errlog( c_ServiceName, "S34010", SQLMSG, c_err_msg  );
        			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			l_acnt_id = -1;
        			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			}

						EXEC SQL 
						UPDATE POD_PLG_ORDR_DTLS SET
						POD_ORDR_STTS = 'C',
            POD_RMRKS = 'Success'
						WHERE trim(POD_ORDR_NO) = TRIM(:sql_pod_ref_no)
            AND POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND POD_PLG_REV_TYP = :sql_plg_typ;

						if( SQLCODE !=0 )
						{
						  fn_errlog( c_ServiceName, "S34015", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						  l_acnt_id = -1;
						  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						  tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}

						EXEC SQL SELECT (COUNT(*)+1) INTO :sql_pml_mod_cntr
						FROM PML_PLG_MOD_LOG
						WHERE PML_ORDR_NO = TRIM(:sql_pod_ref_no)
            AND    PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND PML_MOD_TYPE IN ('N','M','C','J');
	
						if( SQLCODE !=0 )
					  {
							fn_errlog( c_ServiceName, "S34020", SQLMSG, c_err_msg  );
       				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					    l_acnt_id = -1;
					    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					    tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );      
					    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					  }

						EXEC SQL INSERT INTO PML_PLG_MOD_LOG
						(PML_ORDR_NO,
						PML_STCK_CD,
						PML_ORDR_QTY,
						PML_ORDR_TM,
						PML_HAIRCUT,
						PML_ORDR_VL,
						PML_ISIN_NO,
						PML_DP_CLNT_ACCNT,
						PML_DP_ACCNT,
						PML_CLNT_MTCH_ACCNT,
						PML_PLG_REV_TYP,
						PML_CONF_QTY,
						PML_RJCT_QTY,
						PML_MOD_TYPE,
						PML_STTS,
						PML_MOD_CNTR,
						PML_PLCD_SQNC,
						PML_BP_ID,
						PML_CHANNEL,
						PML_RMRKS)
						VALUES
						(	:sql_pod_ref_no,
		  				:sql_stk_stck_cd,
							:sql_tifp_qty,
							sysdate,
							:sql_stk_plg_haircut,		 
	   					:sql_plg_val,
							:sql_isin_nmbr,
							:sql_dbd_dp_clnt_id,
							:sql_dbd_dp_id,
							:sql_mtch_accnt,
							:sql_plg_typ,
							0,
							0,
							'L',
							'C',
							:sql_pml_mod_cntr,
							0,
							null,
							'SYS',
							'Closure Repelege1 Completed');
							
							if( SQLCODE !=0 )
		          {
		          	fn_errlog( c_ServiceName, "S34025", SQLMSG, c_err_msg  );
		            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		            l_acnt_id = -1;
		            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		            tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );				
		            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		          }

						fn_userlog( c_ServiceName," Acceptance of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);   /**  **/
						sprintf(c_msg,"Acceptance of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/
						BAT_POST(c_msg);
					}	
			
					else
/*  commented sql_rtn_stts in If condition   
	if ((sql_rtn_stts == 1) && (strcmp(sql_plg_stts.arr,"REJ")==0))*/
					if (strcmp(sql_plg_stts.arr,"REJ")==0)
					{

						sql_rtn_stts =1 ; /**/
						
						EXEC SQL 
						UPDATE PTD_TIFP_DTLS SET
						PTD_LEG_NO = 'D5',
						PTD_TIFP_STTS = 'J',
						PTD_TIFP_RUN_DT = sysdate,
						/* PTD_EXCTN_DT = :sql_execn_date,--commented for the ver 1.7 */
						PTD_EXCTN_DT = :c_conf_date,  /* ver 1.7 */
            PTD_RMRKS = trim(:sql_err_desc)    /** Ver 1.6  **/           
						WHERE PTD_DP_ID = :sql_dbd_dp_id
						AND PTD_DP_CLNT_ID = :sql_dbd_dp_clnt_id
						AND PTD_ISIN_NMBR = :sql_isin_nmbr
						AND PTD_PLG_REV_TYP = :sql_plg_typ
						AND PTD_TIFP_STTS = 'P'
						AND PTD_LEG_NO = 'D1'
            AND trim(PTD_POD_REF_NO) = trim(:sql_pod_ref_no)
            AND PTD_DPM_NMBR = :sql_pon_nmbr;

			    	if( SQLCODE !=0 )
      			{
        			fn_errlog( c_ServiceName, "S34030", SQLMSG, c_err_msg  );
        			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        			l_acnt_id = -1;
        			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        			tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      			}

						EXEC SQL
								 UPDATE ptd_tifp_dtls
								 SET    ptd_plg_vs_wd_qty = ptd_plg_vs_wd_qty - :sql_plg_vs_wd_qty_rej
								 WHERE  ptd_dpm_nmbr        = :sql_pon_nmbr
								 AND    ptd_clm_mtch_accnt  = :sql_mtch_accnt
								 AND    ptd_dp_id           = :sql_dbd_dp_id
								 AND    ptd_dp_clnt_id      = :sql_dbd_dp_clnt_id
								 AND    ptd_isin_nmbr       = :sql_isin_nmbr
								 AND    ptd_plg_rev_typ     = 'C'
								 AND    ptd_leg_no          = 'C5'
								 AND		PTD_TIFP_STTS  = 'P'
								 AND ptd_plg_vs_wd_qty > 0
								 AND ROWNUM < 2;

						if ( SQLCODE != 0 )
						{
							fn_errlog( c_ServiceName, "S34035", SQLMSG, c_err_msg  );
							fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}

						EXEC SQL UPDATE POD_PLG_ORDR_DTLS SET
						POD_ORDR_STTS = 'J',
						POD_PRCSD_QTY = 0,
            POD_RMRKS = trim(:sql_err_desc)
						WHERE trim(POD_ORDR_NO) = TRIM(:sql_pod_ref_no)
            AND    POD_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND POD_PLG_REV_TYP = :sql_plg_typ;

						if( SQLCODE !=0 )
						{
						  fn_errlog( c_ServiceName, "S34040", SQLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						  l_acnt_id = -1;
						  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
						  tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}

						EXEC SQL SELECT (COUNT(*)+1) INTO :sql_pml_mod_cntr
						FROM PML_PLG_MOD_LOG
						WHERE PML_ORDR_NO = TRIM(:sql_pod_ref_no)
            AND    PML_CLNT_MTCH_ACCNT = :sql_mtch_accnt
						AND PML_MOD_TYPE IN ('N','M','C','J');
	
						if( SQLCODE !=0 )
					  {
							fn_errlog( c_ServiceName, "S34045", SQLMSG, c_err_msg  );
       				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					    l_acnt_id = -1;
					    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
					    tpfree ( ( char * )ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );       
					    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					  }

						EXEC SQL INSERT INTO PML_PLG_MOD_LOG
							(PML_ORDR_NO,
							PML_STCK_CD,
							PML_ORDR_QTY,
							PML_ORDR_TM,
							PML_HAIRCUT,
							PML_ORDR_VL,
							PML_ISIN_NO,
							PML_DP_CLNT_ACCNT,
							PML_DP_ACCNT,
							PML_CLNT_MTCH_ACCNT,
							PML_PLG_REV_TYP,
							PML_CONF_QTY,
							PML_RJCT_QTY,
							PML_MOD_TYPE,
							PML_STTS,
							PML_MOD_CNTR,
							PML_PLCD_SQNC,
							PML_BP_ID,
							PML_CHANNEL,
							PML_RMRKS)
							VALUES
							(	:sql_pod_ref_no,
			  				:sql_stk_stck_cd,
								:sql_tifp_qty,
								sysdate,
								:sql_stk_plg_haircut,		 
		   					:sql_plg_val,
								:sql_isin_nmbr,
								:sql_dbd_dp_clnt_id,
								:sql_dbd_dp_id,
								:sql_mtch_accnt,
								'W',
								0,
								0,
								'J',
								'C',
								:sql_pml_mod_cntr,
								0,
								null,
								'SYS',
								:sql_err_desc);
							
							if( SQLCODE !=0 )
		          {
		          	fn_errlog( c_ServiceName, "S34050", SQLMSG, c_err_msg  );
		            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		            l_acnt_id = -1;
		            Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		            tpfree ( ( char * )ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );           
		            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		          }

							/**** Comment for Combined ***
							EXEC SQL
								UPDATE  PTD_TIFP_DTLS
								SET     PTD_REPLG2_QTY = NVL(PTD_REPLG2_QTY,0) - :sql_tifp_qty
								WHERE   trim(PTD_DPM_NMBR3)    = trim(:sql_pon_nmbr)
								AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
								AND     PTD_DP_ID             = :sql_dbd_dp_id
								AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
								AND     PTD_STCK_CD           = :sql_stk_stck_cd
								AND    ptd_isin_nmbr       = :sql_isin_nmbr
								AND     ((PTD_PLG_REV_TYP = 'W' AND PTD_LEG_NO = 'W3') OR (PTD_PLG_REV_TYP = 'I' AND PTD_LEG_NO = 'I3'))
								AND			PTD_TIFP_STTS							= 'P'; 


							if ( SQLCODE != 0 )
							{
								fn_errlog( c_ServiceName, "S34055", SQLMSG, c_err_msg  );
								fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
								EXEC SQL CLOSE ptd_cur;
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								tpfree ( ( char * )ptr_fml_Obuf);
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}

							*** Comment end ***/

						 EXEC SQL
									DECLARE REPLG_CLOSURE5 CURSOR FOR
									SELECT  PTD_POD_REF_NO,
													PTD_TIFP_QTY,
													NVL(PTD_REPLG2_QTY,0),
													ptd_clm_mtch_accnt ,  
													ptd_dp_id ,
													ptd_dp_clnt_id ,
													ptd_isin_nmbr
									FROM    ptd_tifp_dtls 
									WHERE   trim(PTD_DPM_NMBR3) = trim(:sql_pon_nmbr)
									AND     ptd_plg_rev_typ in ('W','I')
									AND			PTD_LEG_NO IS NULL
									AND			PTD_TIFP_STTS = 'N'
									AND     PTD_CLM_MTCH_ACCNT    = :sql_mtch_accnt
									AND     PTD_DP_ID             = :sql_dbd_dp_id
									AND     PTD_DP_CLNT_ID        = :sql_dbd_dp_clnt_id
									AND    ptd_isin_nmbr       = :sql_isin_nmbr;


							if ( SQLCODE != 0 )
							{
								fn_errlog( c_ServiceName, "S34060", SQLMSG, c_err_msg  );
								fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								tpfree ( ( char * )ptr_fml_Obuf);
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}


							EXEC SQL OPEN REPLG_CLOSURE5;

							if ( SQLCODE != 0 )
							{
									fn_errlog(c_ServiceName, "S34065", SQLMSG, c_err_msg);
									fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
									tpfree ( ( char * )ptr_fml_Obuf);
									tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}


							qty_remaining_to_cls = sql_tifp_qty;

							while(1)
							{

								MEMSET(sql_ptd_pod_ref_no);
								MEMSET(sql_ptd_clm_mtch_accnt);
								MEMSET(sql_ptd_dp_id);
								MEMSET(sql_ptd_dp_clnt_id);
								MEMSET(sql_ptd_isin_nmbr);
								sql_ptd_tifp_qty = 0;
								sql_ptd_replg2_qty = 0;

								EXEC SQL
									FETCH REPLG_CLOSURE5
									INTO 
										:sql_ptd_pod_ref_no,
										:sql_ptd_tifp_qty,
										:sql_ptd_replg2_qty,
										:sql_ptd_clm_mtch_accnt,  
										:sql_ptd_dp_id,
										:sql_ptd_dp_clnt_id,
										:sql_ptd_isin_nmbr;

								if ( SQLCODE != 0 )
								{
									if ( SQLCODE == NO_DATA_FOUND )
									{
											EXEC SQL CLOSE REPLG_CLOSURE5;
											break;
									}
									else
									{
											EXEC SQL CLOSE REPLG_CLOSURE5;
											fn_errlog( c_ServiceName, "S34070", SQLMSG, c_err_msg  );
											fn_bat_pst_msg_fno(c_ServiceName,c_err_msg,c_tag);
											fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
											break;
									}
								}

								SETLEN(sql_ptd_pod_ref_no);
								SETLEN(sql_ptd_clm_mtch_accnt);
								SETLEN(sql_ptd_dp_id);
								SETLEN(sql_ptd_dp_clnt_id);
								SETLEN(sql_ptd_isin_nmbr);

								SETNULL(sql_ptd_pod_ref_no);
								SETNULL(sql_ptd_clm_mtch_accnt);
								SETNULL(sql_ptd_dp_id);
								SETNULL(sql_ptd_dp_clnt_id);
								SETNULL(sql_ptd_isin_nmbr);

								fn_userlog(c_ServiceName,"Inside Cursor of update repledge......");
								fn_userlog(c_ServiceName,"sql_ptd_pod_ref_no [%s]",sql_ptd_pod_ref_no.arr);
								fn_userlog(c_ServiceName,"sql_ptd_clm_mtch_accnt [%s]",sql_ptd_clm_mtch_accnt.arr);
								fn_userlog(c_ServiceName,"sql_ptd_dp_id [%s]",sql_ptd_dp_id.arr);
								fn_userlog(c_ServiceName,"sql_ptd_dp_clnt_id [%s]",sql_ptd_dp_clnt_id.arr);
								fn_userlog(c_ServiceName,"sql_ptd_isin_nmbr [%s]",sql_ptd_isin_nmbr.arr);
								fn_userlog(c_ServiceName,"sql_ptd_tifp_qty :%ld:",sql_ptd_tifp_qty);
								fn_userlog(c_ServiceName,"sql_ptd_replg2_qty :%ld:",sql_ptd_replg2_qty);
								fn_userlog(c_ServiceName,"qty_remaining_to_cls :%ld:",qty_remaining_to_cls);


								if (qty_remaining_to_cls > sql_ptd_replg2_qty)
								{
									upd_qty = sql_ptd_replg2_qty;
									qty_remaining_to_cls = qty_remaining_to_cls - sql_ptd_replg2_qty;
								}
								else if (qty_remaining_to_cls <= sql_ptd_replg2_qty)
								{
									upd_qty = qty_remaining_to_cls;
									qty_remaining_to_cls  = 0;
								}
								
								EXEC SQL
									UPDATE  PTD_TIFP_DTLS
									SET     PTD_REPLG2_QTY = NVL(PTD_REPLG2_QTY,0) - :upd_qty
									WHERE   PTD_CLM_MTCH_ACCNT = :sql_ptd_clm_mtch_accnt
									AND     PTD_DP_ID = :sql_ptd_dp_id
									AND     PTD_DP_CLNT_ID = :sql_ptd_dp_clnt_id
									AND			PTD_ISIN_NMBR	= :sql_ptd_isin_nmbr
									AND			PTD_POD_REF_NO	=	:sql_ptd_pod_ref_no
									AND			trim(PTD_DPM_NMBR3) = trim(:sql_pon_nmbr)
									AND     ((PTD_PLG_REV_TYP = 'W' AND PTD_LEG_NO IS NULL) OR (PTD_PLG_REV_TYP = 'I' AND PTD_LEG_NO IS NULL))
									AND			PTD_TIFP_STTS	= 'N'; 


									if ( SQLCODE != 0 )
									{
											fn_errlog(c_ServiceName, "S34075", SQLMSG, c_err_msg);
											EXEC SQL CLOSE REPLG_CLOSURE5;
											fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
											Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
											tpfree ( ( char * )ptr_fml_Obuf);
											tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
									}
							}


						fn_userlog( c_ServiceName," Rejection of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);   /**  **/
						sprintf(c_msg,"Rejection of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);    /**  **/
						BAT_POST(c_msg);
						memset(c_msg,'\0',sizeof(c_msg));
						strncpy(c_msg,sql_err_desc.arr,254);
						BAT_POST(c_msg);

					}
					else
					{
						fn_userlog( c_ServiceName," Skipping record of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);  /**  **/
						sprintf(c_msg,"Skipping record of accnt [%s] for stck [%s] for PON number [%lf]",sql_mtch_accnt.arr,sql_stk_stck_cd, sql_pon_nmbr);    /**  **/
						BAT_POST(c_msg);
						memset(c_msg,'\0',sizeof(c_msg));
						strncpy(c_msg,sql_err_desc.arr,254);
						BAT_POST(c_msg);
					}

				if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
     		{
    			fn_errlog( c_ServiceName, "S34080", TPMSG, c_err_msg  );
     			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       		l_acnt_id = -1;
       		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
       		tpfree (( char * )ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
				}	
				
				tpfree((char *)ptr_fml_Sbuf);
      	tpfree((char *)ptr_fml_Rbuf);

				}

			tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0, 0 );

		}		

		else
		{
			strcpy(c_err_msg,"Invalid Pledge Type" );
    	fn_errlog ( c_ServiceName, "S34085", DEFMSG, c_err_msg);
    	tpfree ( ( char * )ptr_fml_Obuf);
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}
		break;

		default :
		strcpy(c_err_msg,"Invalid Operation Type" );
    fn_errlog ( c_ServiceName, "S34090", DEFMSG, c_err_msg);
    tpfree ( ( char * )ptr_fml_Obuf);
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
    break;
	}  /*end of switch*/

}/*end of service*/
