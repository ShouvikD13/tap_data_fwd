/******************************************************************************/
/*  Program           : SFO_BRD_PRCS 		                                      */
/*                                                                            */
/*  Input             : C_PIPE_ID                                             */
/*                                                                            */
/*  Output            :Service to process the broadcast messages              */
/*                     received from exchange                                 */
/*                                                                            */
/******************************************************************************/
/*Ver 1.0             : New Release																						*/
/*Ver 1.1             : View to FML Changes (Sachin Birje)    								*/
/******************************************************************************/

/**** C header ****/
#include <stdio.h>
#include <sqlca.h>
#include <sys/socket.h>
#include <time.h>
/**** Tuxedo header ****/
#include <atmi.h>
#include <fml32.h>
#include <Usysflds.h>

/** #include <fo_view_def.h> ** Ver 1.1 **/

#include <fo_fml_def.h>
#include <fml_def.h>
#include <fo.h>
#include <fn_tuxlib.h>
#include <fn_battmpt.h>
#include <fn_scklib_tap.h>
#include <fo_exg_brd_lib.h>

/* Process specific header  */
#include <fn_env.h>
#include <fn_log.h>
#include <userlog.h>
#include <brd_cln_srvr.h>
#include <fn_fil_log.h>
#include <fn_ddr.h>

#include <string.h>
#include <stdlib.h>
#include <fml_rout.h>
#include <fn_signal.h>
#include "lzo1z.h"
#include <fn_read_debug_lvl.h>
#include <sys/time.h>

void fn_procs_msgs ( char *c_bcast_data, 
                     char *c_ServiceName,
                     char *c_err_msg );

void fn_procs_msgs_1 ( char *c_bcast_data, 
                     	 char *c_ServiceName,
                     	 char *c_err_msg );
void fn_gettime(void);
char c_time[12];

char c_xchng_cd [ 3+1 ];
char c_pipe_id [ 5+1 ];
char c_brd_port[10];
char c_tbt_mod;	

int  i_dmp_val;
int	 i_lzo_ret_val;
int  i_sck_id;
int i_exit_stts;

LZO_EXTERN(int) i_lzo_ret_val;

long int li_port;

void SFO_BRD_PRCS ( TPSVCINFO *rqst )
{

  FBFR32 *ptr_fml_ibuf;
  FLDLEN32  ud_len;
	char c_ServiceName [33];
	char c_err_msg [256];
	char c_run_mod;
/*	char *ptr_c_tmp; **/
  char *ptr_car_sbuf;

	int	 i_ret_val;
  int i_errno;
  int i_err [ 7 ];
  int i_ferr [ 7 ];
  int i_cnt;
  int li_sbuf_len;

  struct st_bcast_pack_data st_bcastdata;

  strcpy(c_ServiceName, "SFO_BRD_PRCS" );
  INITDBGLVL(c_ServiceName);
  
  ptr_fml_ibuf = (FBFR32 *)rqst->data;

  strcpy(c_xchng_cd,"NFO");

  ptr_car_sbuf =(char *)tpalloc("CARRAY", NULL, MIN_FML_BUF_LEN);

  if (ptr_car_sbuf == NULL)
  {
    fn_errlog( c_ServiceName, "S31005", TPMSG, c_err_msg  );
    tpfree ( ( char * )ptr_fml_ibuf);
    tpreturn(TPFAIL, 0, (char *)NULL, 0, 0 );
  }

  i_ret_val = Fget32(ptr_fml_ibuf, FFO_TMPLT, 0,(char *)&li_sbuf_len, 0);

  if(i_ret_val == -1 )
  {
    fn_errlog(c_ServiceName,"S31010", DEF_USR,c_err_msg);
    tpfree ( ( char * )ptr_car_sbuf );
    tpfree ( ( char * )ptr_fml_ibuf);
    tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
  }

  ud_len = (FLDLEN32)sizeof(struct st_bcast_pack_data); 
  i_ret_val = Fget32(ptr_fml_ibuf, FFO_CBUF, 0,(char *)ptr_car_sbuf, &ud_len);

  if (i_ret_val == -1)
  {
    fn_errlog(c_ServiceName,"S31015",DEF_USR,c_err_msg);
    tpfree ( ( char * )ptr_car_sbuf );
    tpfree ( ( char * )ptr_fml_ibuf);
    tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
  }

  i_ret_val = Fget32(ptr_fml_ibuf, FFO_DWL_FLG, 0,(char *)&c_run_mod, 0);

  if (i_ret_val == -1)
  {
    fn_errlog(c_ServiceName,"S31020",DEF_USR,c_err_msg);
    tpfree ( ( char * )ptr_car_sbuf );
    tpfree ( ( char * )ptr_fml_ibuf);
    tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
  }
  
  i_ret_val = Fget32(ptr_fml_ibuf, FFO_SOURCE_FLG, 0,(char *)&c_tbt_mod, 0);

  if (i_ret_val == -1)
  {
    fn_errlog(c_ServiceName,"S31025",DEF_USR,c_err_msg);
    tpfree ( ( char * )ptr_car_sbuf );
    tpfree ( ( char * )ptr_fml_ibuf);
    tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
  }

	if ( c_run_mod == WITH_QUOTES )
  {
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Inside RUN_MOD = WITH_QUOTES");
		}

    fn_procs_msgs ( ptr_car_sbuf,
                    c_ServiceName,
                    c_err_msg );
  }
  else
  {
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Inside RUN_MOD = WITHOUT_QUOTES");
		}
    fn_procs_msgs_1 ( ptr_car_sbuf,
                      c_ServiceName,
                      c_err_msg );
  }

  tpfree ( ( char * )ptr_car_sbuf );
  tpreturn(TPSUCCESS, 0, (char *)NULL, 0, 0);	
}


void fn_procs_msgs ( char *c_bcast_data,
                     char *c_ServiceName,
                     char *c_err_msg )
{
	char c_serv_addr[20];
	char *ptr_c_data;
	char c_decmp_data[512];

	int i_family;
  int i_port_no;
	long int li_buf_len ;
	int i_ch_val;
	int i_ret_val;
	int i_msg_count;
	int i_ip_len;
	unsigned int i_op_len;
	int i_trnsctn_cd;
	unsigned short int si_err_cd;

	union st_exch_brd_msg st_exch_msg;
  union st_exch_brd_msg *ptr_exch_msg;
  struct st_bcast_pack_data st_bcastdata;
  struct st_bcast_cmp_packet *st_bcastcmp_packet;

	i_exit_stts = DONT_EXIT;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Inside Function fn_procs_msgs WITH_QUOTES");
	}

  memset ( &st_bcastdata, '\0', sizeof ( struct st_bcast_pack_data ) );
  memcpy ( &st_bcastdata, c_bcast_data, sizeof(st_bcastdata) );

  ptr_c_data = (char *) st_bcastdata.c_pack_data;

  if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName, "No of packets |%d|",st_bcastdata.si_no_of_packets);
	}

	for(i_msg_count=0;i_msg_count<st_bcastdata.si_no_of_packets;i_msg_count++)
	{
		i_ip_len = 0;

		st_bcastcmp_packet = (struct st_bcast_cmp_packet * )ptr_c_data;

		if(DEBUG_MSG_LVL_3)
		{
     	fn_userlog(c_ServiceName, "Compressed %d",st_bcastcmp_packet->si_comp_len);
		}

    if ( st_bcastcmp_packet->si_comp_len > 0 )
    {
      i_ip_len = st_bcastcmp_packet->si_comp_len;

      memset(c_decmp_data, '\0', sizeof(c_decmp_data));

      if(DEBUG_MSG_LVL_2)
      {
       fn_gettime();
       fn_userlog(c_ServiceName,"TIME_STATS NDF Before lzo1z_decompress at :%s:",c_time);
      }
 
      i_lzo_ret_val= lzo1z_decompress ( (char *)st_bcastcmp_packet->c_comp_data,
                      										i_ip_len,
                      										(char *)c_decmp_data,
                      										&i_op_len,
                      										NULL );

      ptr_exch_msg = ( union st_exch_brd_msg * )( (char *)c_decmp_data + 8 );

      ptr_c_data += ( sizeof(st_bcastcmp_packet->si_comp_len) + i_ip_len );
     
      if(DEBUG_MSG_LVL_2)
      {
       fn_gettime();
       fn_userlog(c_ServiceName,"TIME_STATS NDF After lzo1z_decompress at :%s:", c_time);
      }
    }
    else
    {
        ptr_exch_msg =  ( union st_exch_brd_msg * ) ( (char *)st_bcastcmp_packet->c_comp_data + 8 );

        ptr_c_data += ( sizeof(st_bcastcmp_packet->si_comp_len) + ((struct st_bcast_header *)ptr_exch_msg)->si_message_length + 8);
    }
  
   	if(DEBUG_MSG_LVL_3)
	  {
				fn_userlog(c_ServiceName, "Message received - |%d|",ptr_exch_msg->st_hdr.si_transaction_code);
				fn_userlog(c_ServiceName,"Before Switch Case");
		}

			switch ( ptr_exch_msg->st_hdr.si_transaction_code )
			{
				case BCAST_JRNL_VCT_MSG:

				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"Inside Case BCAST_JRNL_VCT_MSG");
					fn_userlog(c_ServiceName,"Inside BCAST_JRNL_VCT_MSG Exchange Code Is :%s:",c_xchng_cd);
				}

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF Before fn_gnrltrd_msg at :%s:",c_time);
        }

				i_ret_val = fn_gnrltrd_msg( &(ptr_exch_msg->st_bcast_msg), 
																	  c_xchng_cd,
																		c_pipe_id,
																	  c_ServiceName,
																	  c_err_msg);		

				if ( i_ret_val == -1 )
        {
        	i_exit_stts = EXIT;
        }

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF After fn_gnrltrd_msg at :%s:",c_time);
        }
 
					break;

				case BCAST_SYSTEM_INFORMATION_OUT:

				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"Inside Case BCAST_SYSTEM_INFORMATION_OUT");
					fn_userlog(c_ServiceName,"Inside BCAST_SYSTEM_INFORMATION_OUT Exchange Code Is :%s:",c_xchng_cd);
				}

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF Before fn_system_information_out at :%s:",c_time);
        }

				i_ret_val = fn_system_information_out ( &(ptr_exch_msg->st_sys_info_dat),
																								c_xchng_cd,
																								c_ServiceName,
																								c_err_msg);

				if ( i_ret_val == -1 )
        {
          i_exit_stts = EXIT;
        }

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF After fn_system_information_out at :%s:",c_time);
        }

					break;

				case BCAST_SECURITY_MSTR_CHG:
				
				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"Inside Case BCAST_SECURITY_MSTR_CHG");
					fn_userlog(c_ServiceName,"Inside BCAST_SECURITY_MSTR_CHG Exchange Code Is :%s:",c_xchng_cd);
				}

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF Before fn_security_mstr_chg at :%s:",c_time);
        }

				i_ret_val = fn_security_mstr_chg ( &(ptr_exch_msg->st_sec_upd_info),
																					 c_xchng_cd,
                                           c_ServiceName,
                                           c_err_msg);
        if ( i_ret_val == -1 )
        {
          i_exit_stts = EXIT;
        }

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF After fn_security_mstr_chg at :%s:",c_time);
        }
				
					break;

				case BCAST_INSTR_MSTR_CHG:

					/*** Not Handled ***/

          break;
		
				case BCAST_PART_MSTR_CHG:

				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"Inside Case BCAST_PART_MSTR_CHG");
			  	fn_userlog(c_ServiceName,"Inside BCAST_PART_MSTR_CHG Exchange Code Is :%s:",c_xchng_cd);
				}

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF Before  fn_part_mstr_chg at :%s:",c_time);
        }

				i_ret_val = fn_part_mstr_chg ( &(ptr_exch_msg->st_part_upd_info),
																				c_xchng_cd,
                                        c_ServiceName,
                                        c_err_msg);
          if ( i_ret_val == -1 )
          {
            i_exit_stts = EXIT;
          }

          if(DEBUG_MSG_LVL_2)
          {
           fn_gettime();
           fn_userlog(c_ServiceName,"TIME_STATS NDF After fn_part_mstr_chg at :%s:",c_time);
          }

          break;

				case BCAST_STOCK_STATUS_CHG:
				case BCAST_STOCK_STATUS_CHG_PREOPEN:
	
				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"Inside Case Stock Status Change");
					fn_userlog(c_ServiceName,"Inside BCAST_STOCK_STATUS_CHG Exchange Code Is :%s:",c_xchng_cd);
				}

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF Before  fn_stock_status_chg at :%s:",c_time);
        }

				i_ret_val = fn_stock_status_chg ( &(ptr_exch_msg->st_sec_stts_upd_info),
																				 		c_xchng_cd,
                                         		c_ServiceName,
                                         		c_err_msg);
          if ( i_ret_val == -1 )
          {
            i_exit_stts = EXIT;
          }

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF After  fn_stock_status_chg at :%s:",c_time);
        }
					break;

				case BCAST_TURNOVER_EXCEEDED:
				case BROADCAST_BROKER_REACTIVATED:

					if(DEBUG_MSG_LVL_0)
					{
						fn_userlog(c_ServiceName,"Inside Case Broker Activation / DeActivation");
						fn_userlog(c_ServiceName,"Inside BCAST_TURNOVER_EXCEEDED Exchange Code Is :%s:",c_xchng_cd);
					}

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF Before fn_turnover_exceeded at :%s:",c_time);
        }

				i_ret_val = fn_turnover_exceeded (&(ptr_exch_msg->st_brd_tlmt_exceed),
                                      			ptr_exch_msg->st_hdr.si_transaction_code,
																						c_xchng_cd,
																						c_pipe_id,
                                      			c_ServiceName,
                                      			c_err_msg);
          if ( i_ret_val == -1 )
          {
            i_exit_stts = EXIT;
          }
        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF After fn_turnover_exceeded at :%s:",c_time);
        }
					break;

				case BC_OPEN_MSG:
				case BC_CLOSE_MSG:
				case BC_PRE_OR_POST_DAY_MSG:
				case BC_PRE_OPEN_ENDED:
				case EQUAL_BC_POSTCLOSE_MSG:

				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"Inside Case Market status Change");  
					fn_userlog(c_ServiceName,"Inside BC_OPEN_MSG Exchange Code Is :%s:",c_xchng_cd);
				}

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF Before fn_brdmkt_stts_chng at :%s:",c_time);
        }

				i_ret_val = fn_brdmkt_stts_chng ( &(ptr_exch_msg->st_brd_vct_msg),
																					 c_xchng_cd,
																					 c_pipe_id,
                            	             c_ServiceName,
                              	           c_err_msg);
          if ( i_ret_val == -1 )
          {
            i_exit_stts = EXIT;
          }
	
        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF After fn_brdmkt_stts_chng at :%s:",c_time);
        }
	
					break;


				case BCAST_TICKER_AND_MKT_INDEX:

				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"Inside Case BCAST_TICKER_AND_MKT_INDEX");
					fn_userlog(c_ServiceName,"Inside BCAST_TICKER_AND_MKT_INDEX Exchange Code Is :%s:",c_xchng_cd);
				}
        
        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF Before fn_ticker_and_mkt_index at :%s:",c_time);
        }

				i_ret_val = fn_ticker_and_mkt_index ( &(ptr_exch_msg->st_ticker),
																								c_xchng_cd,
                                                c_ServiceName,
                                                c_err_msg);
          if ( i_ret_val == -1 )
          {
            i_exit_stts = EXIT;
          }

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF After fn_ticker_and_mkt_index at :%s:",c_time);
        }

					break;

				case BCAST_MBO_MBP_UPDATE:

				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"Inside Case BCAST_MBO_MBP_UPDATE");
					fn_userlog(c_ServiceName,"Inside BCAST_MBO_MBP_UPDATE Exchange Code Is :%s:",c_xchng_cd);
				}

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF Before fn_mbo_mbp_update at :%s:",c_time);
        }

				i_ret_val = fn_mbo_mbp_update ( &(ptr_exch_msg->st_brd_mbo_mbp),
																				  c_xchng_cd,
                                          c_ServiceName,
                                          c_err_msg);
          if ( i_ret_val == -1 )
          {
            i_exit_stts = EXIT;
          }

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF After fn_mbo_mbp_update at :%s:",c_time);
        }

					break;

				case BCAST_ONLY_MBP:

				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"Inside Case BCAST_ONLY_MBP");
					fn_userlog(c_ServiceName,"Inside BCAST_ONLY_MBP Exchange Code Is :%s:",c_xchng_cd);
				}

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF Before fn_bcast_only_mbp at :%s:",c_time);
        }

				i_ret_val = fn_bcast_only_mbp( &(ptr_exch_msg->st_brd_only_mbp),
																				 c_xchng_cd,
                                         c_ServiceName,
																				 c_tbt_mod, 
                                         c_err_msg);

          if ( i_ret_val == -1 )
          {
            i_exit_stts = EXIT;
          }

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF After fn_bcast_only_mbp at :%s:",c_time);
        }

					break;

				case BCAST_MW_ROUND_ROBIN:

				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"Inside Case BCAST_MW_ROUND_ROBIN");
					fn_userlog(c_ServiceName,"Inside BCAST_MW_ROUND_ROBIN Exchange Code Is :%s:",c_xchng_cd);
				}

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF Before fn_mw_round_robin at :%s:",c_time);
        }

				i_ret_val = fn_mw_round_robin ( &(ptr_exch_msg->st_brd_inq_res),
																					c_xchng_cd,
                                          c_ServiceName,
                                          c_err_msg);
          if ( i_ret_val == -1 )
          {
            i_exit_stts = EXIT;
          }

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF After fn_mw_round_robin at :%s:",c_time);
        }
					break;

				case SECURITY_OPEN_PRICE:
			
					 /*** Not Handled ***/
          break;

				case BCAST_CIRCUIT_MSG:
			
					/*** Ignored ***/
          break;

				case BCAST_INDICES:

				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"Inside Case BCAST_INDICES");
					fn_userlog(c_ServiceName,"Inside BCAST_INDICES Exchange Code Is :%s:",c_xchng_cd);
				}

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF Before fn_bcast_indices at :%s:",c_time);
        }

				i_ret_val = fn_bcast_indices ( &(ptr_exch_msg->st_brd_indices),
																				 c_xchng_cd,
                                         c_ServiceName,
                                         c_err_msg);
          if ( i_ret_val == -1 )
          {
            i_exit_stts = EXIT;
          }

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF After fn_bcast_indices at :%s:",c_time);
        }

					break;

				case BCAST_INDUSTRY_INDEX_UPDATE:

				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"Inside Case BCAST_INDUSTRY_INDEX_UPDATE");
					fn_userlog(c_ServiceName,"Inside BCAST_INDUSTRY_INDEX_UPDATE Exchange Code Is :%s:",c_xchng_cd);
				}
	
        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF Before fn_bcast_industry_index_update at :%s:",c_time);
        }
	
				i_ret_val = fn_bcast_industry_index_update (&(ptr_exch_msg->st_brd_indust_indices),
																											c_xchng_cd,
                                        							c_ServiceName,
                                        							c_err_msg);
          if ( i_ret_val == -1 )
          {
            i_exit_stts = EXIT;
          }

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF After fn_bcast_industry_index_update at :%s:",c_time);
        }

					break;

				case BCAST_SPD_MBP_DELTA:

					 /*** Not Handled ***/
          break;

				case BCAST_INDEX_MSTR_CHG:
			
					/*** Not Handled ***/
          break;

				case BCAST_BASE_PRICE:

					 /*** Not Handled ***/
          break;

				case BCAST_INDEX_MAP_TABLE:

					/*** Not Handled ***/
          break;

				case RPRT_MARKET_STATS_OUT_RPT:

				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"Inside Case RPRT_MARKET_STATS_OUT_RPT");
					fn_userlog(c_ServiceName,"Inside RPRT_MARKET_STATS_OUT_RPT Exchange Code Is :%s:",c_xchng_cd);
				}
        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF Before fn_rprt_market_stats_out_rpt at :%s:",c_time);
        }

				i_ret_val = fn_rprt_market_stats_out_rpt ( & ( ptr_exch_msg->st_rp_mkt_stts),
																											c_xchng_cd,
                                                      c_ServiceName,
                                                      c_err_msg);
          if ( i_ret_val == -1 )
          {
            i_exit_stts = EXIT;
          }
        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF After fn_rprt_market_stats_out_rpt at :%s:",c_time);
        }

					break;

				case MKT_MVMT_CM_OI_IN:

				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"Inside Case MKT_MVMT_CM_OI_IN");
					fn_userlog(c_ServiceName,"Inside MKT_MVMT_CM_OI_IN Exchange Code Is :%s:",c_xchng_cd);
				}
         
        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF Before fn_eq_oi_qt at :%s:",c_time);
        }

				i_ret_val = fn_eq_oi_qt ( ptr_exch_msg->st_eq_oi.st_oi_dat,
                                  ptr_exch_msg->st_hdr.c_alpha_char,
                                  ptr_exch_msg->st_hdr.si_error_code,
																  c_xchng_cd,
                                  c_ServiceName,
                                  c_err_msg);
          if ( i_ret_val == -1 )
          {
            i_exit_stts = EXIT;
          }

        if(DEBUG_MSG_LVL_2)
        {
         fn_gettime();
         fn_userlog(c_ServiceName,"TIME_STATS NDF After fn_eq_oi_qt at :%s:",c_time);
        }
					break;

         case BCAST_GI_INDICES_ASSETS :
           if(DEBUG_MSG_LVL_0)
           {
            fn_userlog(c_ServiceName,"Inside Case BCAST_GI_INDICES_ASSETS");
            fn_userlog(c_ServiceName,"Inside BCAST_GI_INDICES_ASSETS Exchange Code Is :%s:",c_xchng_cd);
           }                
             
           if(DEBUG_MSG_LVL_2)
           {
            fn_gettime();
            fn_userlog(c_ServiceName,"TIME_STATS NDF Before fn_upd_global_indices at :%s:",c_time);
           }
  
           i_ret_val = fn_upd_global_indices( &(ptr_exch_msg->st_index_details),
 							                                  c_xchng_cd,
              							                    c_pipe_id,
                            							      c_ServiceName,
                                 						    c_err_msg);

           if ( i_ret_val == -1 )
           {
             i_exit_stts = EXIT;
           } 

          if(DEBUG_MSG_LVL_2)
          {
           fn_gettime();
           fn_userlog(c_ServiceName,"TIME_STATS NDF After fn_upd_global_indices at :%s:",c_time);
          }
          break;

				default:

					fn_userlog ( c_ServiceName, "Warning - Invalid message type - %d",ptr_exch_msg->st_hdr.si_transaction_code );
					break;
			}
		}
	
}

void fn_procs_msgs_1 ( char *c_bcast_data,
                       char *c_ServiceName,
                       char *c_err_msg )
{
	char c_serv_addr[20];
  char *ptr_c_data;
  char c_decmp_data[512];

  int i_family;
  int i_port_no;
  long int li_buf_len ;
  int i_ch_val;
	int i_ret_val;
  int i_msg_count;
  int i_ip_len;
  unsigned int i_op_len;
  unsigned short int si_err_cd;

  union st_exch_brd_msg st_exch_msg;
  union st_exch_brd_msg *ptr_exch_msg;
  struct st_bcast_pack_data st_bcastdata;
  struct st_bcast_cmp_packet *st_bcastcmp_packet;

  i_exit_stts = DONT_EXIT;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Inside Function fn_procs_msgs_1");
	}

  memset ( &st_bcastdata, '\0', sizeof ( struct st_bcast_pack_data ) );
  memcpy ( &st_bcastdata, c_bcast_data, sizeof(st_bcastdata) );

  ptr_c_data = (char *) st_bcastdata.c_pack_data;

	if(DEBUG_MSG_LVL_3)
	{
   	fn_userlog(c_ServiceName, "No of packets |%d|",st_bcastdata.si_no_of_packets);
	}

  for(i_msg_count=0;i_msg_count<st_bcastdata.si_no_of_packets;i_msg_count++)
  {
    i_ip_len = 0;

    st_bcastcmp_packet = (struct st_bcast_cmp_packet * )ptr_c_data;

  	if(DEBUG_MSG_LVL_3)
		{
     	fn_userlog(c_ServiceName, "Compressed %d",st_bcastcmp_packet->si_comp_len);
		}

    if ( st_bcastcmp_packet->si_comp_len > 0 )
    {
      i_ip_len = st_bcastcmp_packet->si_comp_len;

      memset(c_decmp_data, '\0', sizeof(c_decmp_data));

      i_lzo_ret_val = lzo1z_decompress ( (char *)st_bcastcmp_packet->c_comp_data,
                      										 i_ip_len,
                      										 (char *)c_decmp_data,
                      										 &i_op_len,
                      										 NULL);

      ptr_exch_msg = ( union st_exch_brd_msg * )( (char *)c_decmp_data + 8 );

      ptr_c_data += ( sizeof(st_bcastcmp_packet->si_comp_len) + i_ip_len );
    }
    else
    {
      ptr_exch_msg =  ( union st_exch_brd_msg * ) ( (char *)st_bcastcmp_packet->c_comp_data + 8 );

      ptr_c_data += ( sizeof(st_bcastcmp_packet->si_comp_len) + ((struct st_bcast_header *)ptr_exch_msg)->si_message_length + 8);
    }

   	if(DEBUG_MSG_LVL_3)
	  {
    	fn_userlog(c_ServiceName, "Message received - |%d|",ptr_exch_msg->st_hdr.si_transaction_code);
		}

	  	switch ( ptr_exch_msg->st_hdr.si_transaction_code )
      {
        case BCAST_JRNL_VCT_MSG:

				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"Inside Case BCAST_JRNL_VCT_MSG");
				}
		
				i_ret_val = fn_gnrltrd_msg( &(ptr_exch_msg->st_bcast_msg),
                                    c_xchng_cd,
																		c_pipe_id,
                                    c_ServiceName,
                                    c_err_msg);

        if ( i_ret_val == -1 )
        {
          i_exit_stts = EXIT;
        }

          break;

        case BCAST_SYSTEM_INFORMATION_OUT:

					 /*** Not Handled ***/
          break;

        case BCAST_SECURITY_MSTR_CHG:

					 /*** Not Handled ***/
          break;

        case BCAST_INSTR_MSTR_CHG:

          /*** Not Handled ***/

          break;

        case BCAST_PART_MSTR_CHG:
	
					 /*** Not Handled ***/
          break;

        case BCAST_STOCK_STATUS_CHG:
        case BCAST_STOCK_STATUS_CHG_PREOPEN:

					 /*** Not Handled ***/
          break;

        case BCAST_TURNOVER_EXCEEDED:
        case BROADCAST_BROKER_REACTIVATED:

					 /*** Not Handled ***/
          break;

        case BC_OPEN_MSG:
        case BC_CLOSE_MSG:
        case BC_PRE_OR_POST_DAY_MSG:
        case BC_PRE_OPEN_ENDED:
        case EQUAL_BC_POSTCLOSE_MSG:

				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"Inside Case Market status Change");
				}

				i_ret_val = fn_brdmkt_stts_chng ( &(ptr_exch_msg->st_brd_vct_msg),
                          	               c_xchng_cd,
																					 c_pipe_id,
                              	           c_ServiceName,
                                	         c_err_msg);
          if ( i_ret_val == -1 )
          {
            i_exit_stts = EXIT;
          }

					
          break;

				case BCAST_TICKER_AND_MKT_INDEX:

					 /*** Not Handled ***/
          break;

        case BCAST_MBO_MBP_UPDATE:

					 /*** Not Handled ***/
          break;

        case BCAST_ONLY_MBP:

					 /*** Not Handled ***/
          break;

        case BCAST_MW_ROUND_ROBIN:

					 /*** Not Handled ***/
          break;

        case SECURITY_OPEN_PRICE:

           /*** Not Handled ***/
          break;

        case BCAST_CIRCUIT_MSG:

          /*** Ignored ***/
          break;

        case BCAST_INDICES:

					 /*** Not Handled ***/
          break;

        case BCAST_INDUSTRY_INDEX_UPDATE:

					 /*** Not Handled ***/
          break;

        case BCAST_SPD_MBP_DELTA:

           /*** Not Handled ***/
          break;

        case BCAST_INDEX_MSTR_CHG:

          /*** Not Handled ***/
          break;

        case BCAST_BASE_PRICE:

           /*** Not Handled ***/
          break;

				case BCAST_INDEX_MAP_TABLE:

          /*** Not Handled ***/
          break;

        case RPRT_MARKET_STATS_OUT_RPT:

					 /*** Not Handled ***/
          break;

        case MKT_MVMT_CM_OI_IN:

					 /*** Not Handled ***/
          break;

        default:

          fn_userlog ( c_ServiceName, "Warning - Invalid message type - %d",ptr_exch_msg->st_hdr.si_transaction_code );
          break;
      }

		}

 }
void fn_gettime()
{
  int i_mili_sec = 0;
  struct timeval tv;
  struct timezone tz;
  struct tm *tm;

  gettimeofday(&tv, &tz);
  tm=localtime(&tv.tv_sec);
  i_mili_sec= tv.tv_usec/1000;
  sprintf(c_time,"%d:%d:%d:%d",tm->tm_hour, tm->tm_min, tm->tm_sec, i_mili_sec);
  return;
}
