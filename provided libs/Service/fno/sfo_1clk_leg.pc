/******************************************************************************/
/* Program           : SFO_INS_UPD_LEG                                       */
/*                                                                            */
/* Input             :                                                       */
/*                     FFO_XCHNG_CD                                          */
/*                     FFO_PRDCT_TYP                                         */
/*                     FFO_UNDRLYNG                                          */
/*                     FFO_EXPRY_DT                                          */
/*                     FFO_EXER_TYP                                          */
/*                     FFO_OPT_TYP                                           */
/*                     FFO_CHANNEL                                           */
/* Output            :                                                       */
/*                                                                           */
/*                                                                           */
/* Description       : This service                                          */
/*                                                                           */
/* Log               : 1.0                                                   */
/* Log               : 1.1	Shlok Ghan	  		04-Jan-2021  			             */
/* Log               : 1.2  Mahesh Regulwar   04-May-2022                    */ 
/******************************************************************************/
/* 1.0    -  New Release                                                      */ 
/* 1.1    -  Minor Changes to include new request types                       */ 
/* 1.2    -  Minor Changes to add LTP for performance report                  */ 
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fo_view_def.h>
#include <sqlca.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_session.h>
#include <fn_pos.h>
#include <fn_ddr.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>

int fn_ins_cgm(char * , char * );

char c_ServiceName[33];
char c_err_msg[256];

void SFO_1CLK_LEG(TPSVCINFO * rqst) {
    fn_userlog(c_ServiceName, "Inside SFO_1CLK_LEG");

    char c_indstk = '\0'; /**Index/ Stock **/
    char c_indstk_call = '\0'; /**Index/ Stock call**/
    char c_prdct_typ = '\0'; /**Product Type **/
    char c_opt_typ = '\0'; /**Option Type **/
    char c_exer_typ = '\0'; /**Exer Type **/
    char c_action = '\0'; /**Action **/
    char c_risk_profile = '\0'; /**Risk profile **/
    char c_segment = '\0'; /**Segment **/
    char c_rqst_type = '\0'; /**Request Type**/
    char c_xchng_cd[4] = "\0"; /**Exchange **/
    char c_undrlyng[7] = "\0"; /**Stock code **/
    char c_expry_dt[22] = "\0"; /**Expiry **/
    char c_view[21] = "\0"; /**View **/
    char c_remarks[301] = "\0"; /**Remarks **/
    char c_call_action[22] = "\0"; /**Call Actions **/
    char c_prtfl_name[51] = "\0"; /**Portfolio Name **/
    char c_prtfl_desc[501] = "\0"; /**Portfolio Desc **/
    char c_cat_id[6] = "\0"; /**cateogory id**/
		char  c_edit_flag = '\0';  /** Added by ravindra **/
		char  c_fbs_strtgy_launch = '\0';  /** Ver 1.1 **/

    double d_rcmend_prc_frm=0.0; /**Call Actions **/
    double d_rcmend_prc_to=0.0; /**Call Actions **/

    double d_trgt_prc = 0.0; /**Target price **/
    double d_sltp_prc = 0.0; /**SLTP price **/
    double d_book_profit = 0.0; /**Book Profit **/
    double d_book_part_prft_perc = 0.0; /**Book part profit %**/
    double d_exit_price = 0.0; /**Exit price **/
    double d_potential = 0.0; /**Potential % **/
    double d_ex_pft_perlot = 0.0;
    double d_ex_los_perlot = 0.0;
    double d_total_mrgn = 0.0;
		double  d_leg_no = 0.0;  /** Added by ravindra **/
		double  d_leg_no_fetched = 0.0;  /** Added by ravindra **/
    double d_lst_trd_prc = 0.0;      /** Ver 1.2 ***/
	
		/**** ver 1.1 starts *****/
		char c_strtgy_besd_on[21];
    char c_bench_mark[21];
    char c_cust_catrgy;
    char c_mob_catrgy;
    char c_charges;
    char c_brokrgs;
    double d_fees_excld_gst=0.00;
    int i_like_cnt=0;
    int i_view_cnt=0;
    char c_nick_name[250];
    char c_lst_modified_by[11];
		char	c_insert_dt[11];
		char c_prtflo_id2[11];
		char c_prtfl_risk;
		/***** ver 1.1 Ends ****/

    long l_time_frame = 0 ; /**Time frame **/
    long l_strk_prc = 0; /**Strike rate **/
    long l_strgy_id = 0;
    char c_prtflo_id[11] = "\0"; /**Portfolio ID **/

    int i_trnsctn = 0;
		int i = 0;  /** Ver 1.1 **/
		int j = 0;  /** Ver 1.1 **/
    int i_reccount = 0;
    int i_ch_val = 0;
    int i_returncode = 0;
    FBFR32 * ptr_fml_Ibuf;
    FBFR32 * ptr_fml_Obuf;

    fn_userlog(c_ServiceName, " after declaration");
    ptr_fml_Ibuf = (FBFR32 * ) rqst -> data;
    strcpy(c_ServiceName, rqst -> name);
	 ptr_fml_Obuf = (FBFR32 *) NULL;

    int i_err[28];
    int i_ferr[28];
    int i_tot_rec = 0;
    int i_cnt = 0;
    int i_tot_cat_rec = 0;
		int i_leg_count		= 0;
		char c_cust_flg		= 'C';
		char c_a_status		= 'A';  /** maintaining single flag for insert strategy + leg **/
		char c_d_status		= 'D';    /** maintaining single flag for  strategy + leg **/
    struct vw_usr_prfl st_usr_prfl;
    struct vw_err_msg st_err_msg;


 		struct st_fo_1clk_leg
 		{
		char c_xchng_cd[4];
    char c_undrlyng[7]; 
    char c_prdct_typ; 
    char c_opt_typ ; 
    char c_exer_typ ; 
    char c_action;
    char c_indstk; 
    long l_strk_prc; 
    char c_expry_dt[22];
    char c_view[21]; 
    double d_rcmend_prc_frm; 
    double d_rcmend_prc_to;
    long   l_ordr_qty;
    char c_ordr_typ;
    double  d_ordr_rt; 
 		};

 		struct st_fo_1clk_leg st_fo_leg_var[100];

    MEMSET(c_err_msg);
	  MEMSET(c_xchng_cd);
	  MEMSET(c_undrlyng);
	  MEMSET(c_expry_dt);
	  MEMSET(c_view);
    MEMSET(c_remarks);

    /**user and session authentication starts**/

    i_ch_val = Fvftos32(ptr_fml_Ibuf,
                        (char * ) &st_usr_prfl,
                        "vw_usr_prfl");

    i_ch_val = fn_unpack_fmltovar_dflt ( c_ServiceName,
                                      c_err_msg,
                                      ptr_fml_Ibuf,
                                      3,
                                      FFO_EBA_MTCH_ACT_NO, (char*)st_usr_prfl.c_cln_mtch_accnt, "*",
                                     FFO_USR_ID, (char*)st_usr_prfl.c_user_id, "NULL",
                                      FFO_SSSN_ID, (char*)&st_usr_prfl.l_session_id, "0");

    if (i_ch_val != 0)
    {
        fn_userlog(c_ServiceName, "Inside error condition.. user profile eror");
        fn_errlog(c_ServiceName, "S31005", FMLMSG, c_err_msg);
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
        tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
    }

    if (Fget32(ptr_fml_Ibuf, FFO_RQST_TYP, 0, (char * )&c_rqst_type, 0) == -1)
    {
        fn_userlog(c_ServiceName, "Inside error condition.. request type not available");
        fn_errlog(c_ServiceName, "S31010", LIBMSG, c_err_msg);
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
        tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
    }

    fn_userlog(c_ServiceName, "c_rqst_type :%c:",c_rqst_type);

		/*** Ver 1.1 Starts ********/
		if (c_rqst_type == 'A')  /** Request type == 'R' for Recreating**/
    {
			
			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog(c_ServiceName, "Inside A request type");
				fn_userlog(c_ServiceName, "st_usr_prfl.l_session_id :%ld:",st_usr_prfl.l_session_id);
				fn_userlog(c_ServiceName, "c_prtflo_id :%s:",c_prtflo_id);
			}
				
			ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );
 		 if ( ptr_fml_Obuf == NULL )
  		{
    		fn_errlog( c_ServiceName, "S31015", TPMSG, c_err_msg );
				tpfree((char * ) ptr_fml_Obuf);
    		return ;
  		}

      if (Fget32(ptr_fml_Ibuf, FFO_BP_ID, 0, (char * ) c_prtflo_id, 0) == -1)
      {
				fn_userlog(c_ServiceName, "Inside error condition.. portfolio id error");
				fn_errlog(c_ServiceName, "S31020", LIBMSG, c_err_msg);
			  tpfree((char * ) ptr_fml_Obuf);
				Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
				tpreturn(TPFAIL, ERR_BFR, (char * )ptr_fml_Ibuf, 0, 0);
      }
      if(DEBUG_MSG_LVL_3)
         fn_userlog(c_ServiceName, "c_prtflo_id :%s:",c_prtflo_id);
	   
      MEMSET(c_prtflo_id2);

      EXEC SQL
       SELECT SEQ_FSB_PRTFL_ID.NEXTVAL
       INTO :c_prtflo_id2
       FROM DUAL;

      if (SQLCODE != 0)
      {
          fn_errlog(c_ServiceName, "S31025", SQLMSG, c_err_msg);
          tpfree((char * ) ptr_fml_Obuf);
          Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
          tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
      }
			if(DEBUG_MSG_LVL_3)
         fn_userlog(c_ServiceName, "c_prtflo_id2 :%s:",c_prtflo_id2);
	
         fn_userlog(c_ServiceName, "c_prtflo_id :%s:",c_prtflo_id);
			rtrim(c_prtflo_id2);
			rtrim(c_prtflo_id);
			
			 fn_userlog(c_ServiceName,"Portfolio2>>>>>>>>>>> :%s:",c_prtflo_id2);


			i_tot_rec = Foccur32((FBFR32 * ) ptr_fml_Ibuf, FFO_UNDRLYNG);
         fn_userlog(c_ServiceName, "i_tot_rec is :%d:", i_tot_rec);

      if(DEBUG_MSG_LVL_3)
         fn_userlog(c_ServiceName, "i_tot_rec is :%d:", i_tot_rec);

      i_trnsctn = fn_begintran(c_ServiceName, c_err_msg);
      if (i_trnsctn == -1)
      {
           fn_userlog(c_ServiceName, "Failed in initial begin transaction for daily loop");
           fn_errlog(c_ServiceName, "S31030", TPMSG, c_err_msg);
					 tpfree((char * ) ptr_fml_Obuf);				 
           tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
       }

      for (i_reccount = 0; i_reccount < i_tot_rec; i_reccount++)
      {
	          d_leg_no = i_reccount + 1;  
  	        i_err[0] = Fget32(ptr_fml_Ibuf, FFO_XCHNG_CD, i_reccount, (char * ) st_fo_leg_var[i_reccount].c_xchng_cd, 0);
            i_ferr[0] = Ferror32;
            i_err[1] = Fget32(ptr_fml_Ibuf, FFO_UNDRLYNG, i_reccount, (char * ) st_fo_leg_var[i_reccount].c_undrlyng, 0);
            i_ferr[1] = Ferror32;
            i_err[2] = Fget32(ptr_fml_Ibuf, FFO_PRDCT_TYP, i_reccount, (char * ) &st_fo_leg_var[i_reccount].c_prdct_typ, 0);
            i_ferr[2] = Ferror32;
            i_err[3] = Fget32(ptr_fml_Ibuf, FFO_EXPRY_DT, i_reccount, (char * ) st_fo_leg_var[i_reccount].c_expry_dt, 0);
            i_ferr[3] = Ferror32;
            i_err[4] = Fget32(ptr_fml_Ibuf, FFO_OPT_TYP, i_reccount, (char * ) &st_fo_leg_var[i_reccount].c_opt_typ, 0);
            i_ferr[4] = Ferror32;
            i_err[5] = Fget32(ptr_fml_Ibuf, FFO_STRK_PRC, i_reccount, (char * ) &st_fo_leg_var[i_reccount].l_strk_prc, 0);
            i_ferr[5] = Ferror32;
            i_err[6] = Fget32(ptr_fml_Ibuf, FFO_CTGRY_INDSTK, i_reccount, (char * ) &st_fo_leg_var[i_reccount].c_indstk, 0);
            i_ferr[6] = Ferror32;
            i_err[7] = Fget32(ptr_fml_Ibuf, FFO_EXER_TYP, i_reccount, (char * ) &st_fo_leg_var[i_reccount].c_exer_typ, 0);
            i_ferr[7] = Ferror32;
            i_err[8] = Fget32(ptr_fml_Ibuf, FFO_ORDR_FLW, i_reccount, (char * )&st_fo_leg_var[i_reccount].c_action, 0);
            i_ferr[8] = Ferror32;
            i_err[9] = Fget32(ptr_fml_Ibuf, FFO_OI_LOW, i_reccount, (char * )&st_fo_leg_var[i_reccount].d_rcmend_prc_frm , 0);
            i_ferr[9] = Ferror32;
            i_err[10] = Fget32(ptr_fml_Ibuf, FFO_OI_HIGH, i_reccount, (char * )&st_fo_leg_var[i_reccount].d_rcmend_prc_to , 0);
            i_ferr[10] = Ferror32;
            i_err[11] = Fget32(ptr_fml_Ibuf, FFO_IP_VIEW_NM, i_reccount, (char * ) st_fo_leg_var[i_reccount].c_view, 0);
            i_ferr[11] = Ferror32;
            i_err[12] = Fget32(ptr_fml_Ibuf,FFO_PLG_QTY , i_reccount, (char * )&st_fo_leg_var[i_reccount].l_ordr_qty, 0);
            i_ferr[12] = Ferror32;
            i_err[13] = Fget32(ptr_fml_Ibuf,FFO_PLG_TYP , i_reccount, (char * )&st_fo_leg_var[i_reccount].c_ordr_typ, 0);
            i_ferr[13] = Ferror32;
            i_err[14] = Fget32(ptr_fml_Ibuf,FFO_PLG_RT , i_reccount, (char * )&st_fo_leg_var[i_reccount].d_ordr_rt, 0);
            i_ferr[14] = Ferror32;
            i_err[15] = Fget32(ptr_fml_Ibuf, FFO_SPL_FLG , i_reccount, (char * )&c_edit_flag, 0);
            i_ferr[15] = Ferror32;
            i_err[16] = Fget32(ptr_fml_Ibuf, FFO_INDEX, i_reccount, (char * )&d_leg_no_fetched, 0);
            i_ferr[16] = Ferror32;

            for (i_cnt = 0; i_cnt < 9; i_cnt++)
            {
                if (i_err[i_cnt] == -1)
                {
                    fn_errlog(c_ServiceName, "S31035", Fstrerror32(i_ferr[i_cnt]), c_err_msg);
                    fn_userlog(c_ServiceName, "Unable to fget :%d:", i_cnt);
                    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
									  tpfree((char * ) ptr_fml_Obuf);
                    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                    tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
                }
            }
            for(i_cnt = 9;i_cnt <17 ; i_cnt++)
            {
              if ( i_err[i_cnt] == -1 )
              {
                if ( Ferror32 != FNOTPRES )
                {
                  fn_errlog( c_ServiceName, "S31040", FMLMSG, c_err_msg  );
                	tpfree((char * ) ptr_fml_Obuf); 
								  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                }
                else if( Ferror32 == FNOTPRES )
                {
                   if(i_cnt == 9)
                   {
                        st_fo_leg_var[i_reccount].d_rcmend_prc_frm =0;
                   }
                   if(i_cnt == 10)
                   {
                        st_fo_leg_var[i_reccount].d_rcmend_prc_to=0;
                   }
                   if(i_cnt == 11)
                   {
                        strcpy(st_fo_leg_var[i_reccount].c_view,"");
                   }
                   if(i_cnt == 12)
                   {
                        st_fo_leg_var[i_reccount].l_ordr_qty=0;
                   }
                   if(i_cnt == 13)
                   {
                        st_fo_leg_var[i_reccount].c_ordr_typ='\0';
                   }
                   if(i_cnt == 14)
                   {
                        st_fo_leg_var[i_reccount].d_ordr_rt=0;
                   }
                }
              }
            }

            rtrim(st_fo_leg_var[i_reccount].c_xchng_cd);
            rtrim(st_fo_leg_var[i_reccount].c_undrlyng);
            rtrim(st_fo_leg_var[i_reccount].c_view);
            fn_userlog( c_ServiceName, "TESTING...............");
            if(DEBUG_MSG_LVL_3)
            {
              fn_userlog( c_ServiceName, "c_prtflo_id       *****  :%s:", c_prtflo_id  );
              fn_userlog( c_ServiceName, "c_xchng_cd        *****  :%s:", st_fo_leg_var[i_reccount].c_xchng_cd   );
	    	      fn_userlog( c_ServiceName, "c_undrlyng        *****  :%s:", st_fo_leg_var[i_reccount].c_undrlyng  );
              fn_userlog( c_ServiceName, "c_prdct_typ       *****  :%c:", st_fo_leg_var[i_reccount].c_prdct_typ  );
              fn_userlog( c_ServiceName, "c_expry_dt        *****  :%s:", st_fo_leg_var[i_reccount].c_expry_dt  );
              fn_userlog( c_ServiceName, "c_view            *****  :%s:", st_fo_leg_var[i_reccount].c_view );
              fn_userlog( c_ServiceName, "c_opt_typ         *****  :%c:", st_fo_leg_var[i_reccount].c_opt_typ  );
              fn_userlog( c_ServiceName, "c_exer_typ        *****  :%c:", st_fo_leg_var[i_reccount].c_exer_typ  );
              fn_userlog( c_ServiceName, "l_strk_prc        *****  :%ld:", st_fo_leg_var[i_reccount].l_strk_prc  );
              fn_userlog( c_ServiceName, "c_action          *****  :%c:", st_fo_leg_var[i_reccount].c_action  );
              fn_userlog( c_ServiceName, "d_rcmend_prc_frm  *****  :%lf:", st_fo_leg_var[i_reccount].d_rcmend_prc_frm  );
              fn_userlog( c_ServiceName, "d_rcmend_prc_to   *****  :%lf:", st_fo_leg_var[i_reccount].d_rcmend_prc_to );
              fn_userlog( c_ServiceName, "l_ordr_qty        *****  :%ld:", st_fo_leg_var[i_reccount].l_ordr_qty  );
              fn_userlog( c_ServiceName, "c_ordr_typ        *****  :%c:", st_fo_leg_var[i_reccount].c_ordr_typ  );
              fn_userlog( c_ServiceName, "d_ordr_rt         *****  :%ld:", st_fo_leg_var[i_reccount].d_ordr_rt  );
              fn_userlog(c_ServiceName, "edit flag is       *****   :%c:",c_edit_flag);
              fn_userlog(c_ServiceName, "fetched leg no is  *****  :%lf:",d_leg_no_fetched);
            }

           /*** 
            EXEC SQL
            SELECT count(1)
            INTO :i_leg_count
            FROM FSL_FO1CLICK_STRTGY_LEGDTLS
            WHERE FSL_PRTFLO_ID = :c_prtflo_id
            AND FSL_XCHNG_CD  = :st_fo_leg_var[i_reccount].c_xchng_cd
            AND FSL_UNDRLYNG  = :st_fo_leg_var[i_reccount].c_undrlyng
            AND FSL_PRDCT_TYP = :st_fo_leg_var[i_reccount].c_prdct_typ
            AND FSL_EXPRY_DT  = :st_fo_leg_var[i_reccount].c_expry_dt
            AND FSL_OPT_TYP   = :st_fo_leg_var[i_reccount].c_opt_typ
            AND FSL_EXER_TYP  = :st_fo_leg_var[i_reccount].c_exer_typ
            AND FSL_STRK_PRC  = :st_fo_leg_var[i_reccount].l_strk_prc
            AND FSL_INDSTK    = :st_fo_leg_var[i_reccount].c_indstk
            AND FSL_STATUS    = :c_a_status;

             if (SQLCODE != 0 && ( SQLCODE != NO_DATA_FOUND ))
            {
                fn_errlog(c_ServiceName, "S31045", SQLMSG, c_err_msg);
                fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
 							  tpfree((char * ) ptr_fml_Obuf);
	               Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            }
            *************/

            if(DEBUG_MSG_LVL_3)
              fn_userlog( c_ServiceName, "leg count       *****  :%d:",i_leg_count );

            if(i_leg_count == 0)
            {

 		           if(DEBUG_MSG_LVL_3)
    	        {
      	        fn_userlog( c_ServiceName, "inside leg count = 0  TEST    *****  :%d:",i_leg_count  );
        	      fn_userlog( c_ServiceName, "i_reccount :%d:",i_reccount);
          	    fn_userlog( c_ServiceName, "st_fo_leg_var[i_reccount-1].c_undrlyng :%s:",st_fo_leg_var[i_reccount-1].c_undrlyng);
            	  fn_userlog( c_ServiceName, "st_fo_leg_var[i_reccount].c_undrlyng) :%s:",st_fo_leg_var[i_reccount].c_undrlyng);
            	}

              if(st_usr_prfl.l_session_id == 0)
              {
             	 EXEC SQL
             	 SELECT NVL(FTQ_MIN_LOT_QTY,0)
                INTO :st_fo_leg_var[i_reccount].l_ordr_qty 
                FROM FTQ_FO_TRD_QT
               WHERE FTQ_XCHNG_CD   = :st_fo_leg_var[i_reccount].c_xchng_cd
                AND   FTQ_PRDCT_TYP  = :st_fo_leg_var[i_reccount].c_prdct_typ
                AND   FTQ_INDSTK     = :st_fo_leg_var[i_reccount].c_indstk
                AND   FTQ_UNDRLYNG   = :st_fo_leg_var[i_reccount].c_undrlyng
                AND   FTQ_EXPRY_DT   = :st_fo_leg_var[i_reccount].c_expry_dt
                AND   FTQ_EXER_TYP   = :st_fo_leg_var[i_reccount].c_exer_typ
                AND   FTQ_OPT_TYP    = :st_fo_leg_var[i_reccount].c_opt_typ
                AND   FTQ_STRK_PRC   = :st_fo_leg_var[i_reccount].l_strk_prc;

              	if (SQLCODE != 0)
              	{
                	fn_errlog(c_ServiceName, "S31050", SQLMSG, c_err_msg);
                	fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                	tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
              	} 
              }
            EXEC SQL
            INSERT INTO FSL_FO1CLICK_STRTGY_LEGDTLS
                (
                    FSL_MATCH_ACCNT,
                    FSL_PRTFLO_ID,
                    FSL_XCHNG_CD,
                    FSL_UNDRLYNG,
                    FSL_PRDCT_TYP,
                    FSL_EXPRY_DT,
                    FSL_VIEW,
                    FSL_OPT_TYP,
                    FSL_EXER_TYP,
                    FSL_STRK_PRC,
                    FSL_INDSTK,
                    FSL_ACTION,
                    FSL_INSERT_DT,
                    FSL_INSERT_BY,
                    FSL_RCMEND_PRC_FRM,
                    FSL_RCMEND_PRC_TO,
                    FSL_STATUS,
                    FSL_ORDR_QTY,
                    FSL_ORDR_TYP,
                    FSL_ORDR_RT,
                    FSL_LEG_NO
                )
            VALUES
                (
                    :st_usr_prfl.c_cln_mtch_accnt,
                    :c_prtflo_id2,
                    :st_fo_leg_var[i_reccount].c_xchng_cd,
                    :st_fo_leg_var[i_reccount].c_undrlyng,
                    :st_fo_leg_var[i_reccount].c_prdct_typ,
                    :st_fo_leg_var[i_reccount].c_expry_dt,
										:st_fo_leg_var[i_reccount].c_view,
                    :st_fo_leg_var[i_reccount].c_opt_typ,
                    :st_fo_leg_var[i_reccount].c_exer_typ,
                    :st_fo_leg_var[i_reccount].l_strk_prc,
                    :st_fo_leg_var[i_reccount].c_indstk,
                    :st_fo_leg_var[i_reccount].c_action,
                     SYSDATE,
                    :st_usr_prfl.c_user_id,
                    :st_fo_leg_var[i_reccount].d_rcmend_prc_frm,
                    :st_fo_leg_var[i_reccount].d_rcmend_prc_to,
                    :c_a_status,
                    :st_fo_leg_var[i_reccount].l_ordr_qty,
                    :st_fo_leg_var[i_reccount].c_ordr_typ,
                    :st_fo_leg_var[i_reccount].d_ordr_rt,
                    :d_leg_no
                );

            if (SQLCODE != 0)
            {
                fn_errlog(c_ServiceName, "S31055", SQLMSG, c_err_msg);
                fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
 								tpfree((char * ) ptr_fml_Obuf);				
	               Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            }

         }

        }
					if(st_usr_prfl.l_session_id == 0)
					{
							i_err[12] = Fget32(ptr_fml_Ibuf, FFO_PLG_AMT,0, (char * ) &d_trgt_prc, 0);
							i_ferr[12] = Ferror32;
							i_err[13] = Fget32(ptr_fml_Ibuf, FFO_FUT_PRC,0, (char * ) &d_sltp_prc, 0);
							i_ferr[13] = Ferror32;
							i_err[14] = Fget32(ptr_fml_Ibuf, FFO_AMOUNT, 0, (char * ) &d_book_profit, 0);
							i_ferr[14] = Ferror32;
							i_err[15] = Fget32(ptr_fml_Ibuf, FFO_INIT_MRGN_PRCNT,0, (char * ) &d_book_part_prft_perc, 0);
							i_ferr[15] = Ferror32;
							i_err[16] = Fget32(ptr_fml_Ibuf, FFO_OPERATION_TYP , 0, (char * ) &c_indstk_call, 0);
							i_ferr[16] = Ferror32;
							i_err[17] = Fget32(ptr_fml_Ibuf, FFO_EFF_CLS_PRC,0,  (char * ) &d_exit_price, 0);
							i_ferr[17] = Ferror32;
							i_err[18] = Fget32(ptr_fml_Ibuf, FFO_MIN_MRGN_PRCNT,0,  (char * ) &d_potential, 0);
							i_ferr[18] = Ferror32;
							i_err[19] = Fget32(ptr_fml_Ibuf, FFO_OPN_PRC,  0,(char * ) &l_time_frame, 0);
							i_ferr[19] = Ferror32;
							i_err[20] = Fget32(ptr_fml_Ibuf, FFO_ORD_TYP,0, (char * ) &c_risk_profile, 0);
							i_ferr[20] = Ferror32;
							i_err[21] = Fget32(ptr_fml_Ibuf, FFO_EX_ORDR_TYP,0, (char * ) &c_segment, 0);
							i_ferr[21] = Ferror32;
							i_err[22] = Fget32(ptr_fml_Ibuf, FFO_REMARKS,0, (char * ) c_remarks, 0);
							i_ferr[22] = Ferror32;
							i_err[23] = Fget32(ptr_fml_Ibuf, FFO_ACTION1, 0,(char * ) c_call_action, 0);
							i_ferr[23] = Ferror32;
							i_err[24] = Fget32(ptr_fml_Ibuf, FFO_EFF_LMT_RT ,0, (char * )&d_ex_pft_perlot , 0);
							i_ferr[24] = Ferror32;
							i_err[25] = Fget32(ptr_fml_Ibuf, FFO_EFF_EXCTD_RT,  0,(char *)&d_ex_los_perlot, 0);
							i_ferr[25] = Ferror32;
							i_err[26] = Fget32(ptr_fml_Ibuf, FFO_DLVRY_MRGN ,0, (char *)&d_total_mrgn, 0);
							i_ferr[26] = Ferror32;


						for (i_cnt = 12; i_cnt < 27; i_cnt++)
						{
							if (i_err[i_cnt] == -1)
							{
								fn_errlog(c_ServiceName, "S31060", Fstrerror32(i_ferr[i_cnt]), c_err_msg);
								fn_userlog(c_ServiceName, "Unable to fget :%d:", i_cnt);
								fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
								tpfree((char * ) ptr_fml_Obuf);
  							Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
								tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
							}
						}
						fn_userlog(c_ServiceName, " ******************before update************");
						rtrim(c_prtflo_id);
						rtrim(c_call_action);

						strcat(c_remarks," ");
						strcat(c_remarks,c_call_action);
						rtrim(c_remarks);

            if(DEBUG_MSG_LVL_3)
            {
              fn_userlog( c_ServiceName, "c_prtflo_id       *****  :%s:", c_prtflo_id  );
              fn_userlog( c_ServiceName, "l_strgy_id        *****  :%ld:", l_strgy_id   );
              fn_userlog( c_ServiceName, "d_trgt_prc        *****  :%lf:", d_trgt_prc   );
              fn_userlog( c_ServiceName, "d_sltp_prc        *****  :%lf:", d_sltp_prc   );
              fn_userlog( c_ServiceName, "d_book_profit       *****  :%lf:", d_book_profit  );
              fn_userlog( c_ServiceName, "d_book_part_prft_perc       *****  :%lf:", d_book_part_prft_perc  );
              fn_userlog( c_ServiceName, "d_exit_price        *****  :%lf:", d_exit_price  );
              fn_userlog( c_ServiceName, "d_potential       *****  :%lf:", d_potential   );
              fn_userlog( c_ServiceName, "l_time_frame        *****  :%ld:", l_time_frame   );
              fn_userlog( c_ServiceName, "c_risk_profile        *****  :%c:", c_risk_profile  );
              fn_userlog( c_ServiceName, "c_segment       *****  :%c:", c_segment   );
              fn_userlog( c_ServiceName, "c_indstk_call       *****  :%c:", c_indstk_call   );
              /**fn_userlog( c_ServiceName, "c_remarks        *****  :%s:", c_remarks   );**/
              fn_userlog( c_ServiceName, "c_call_action       *****  :%s:", c_call_action   );
              fn_userlog( c_ServiceName, "d_ex_pft_perlot       *****  :%lf:", d_ex_pft_perlot   );
              fn_userlog( c_ServiceName, "d_ex_los_perlot       *****  :%lf:", d_ex_los_perlot   );
              fn_userlog( c_ServiceName, "d_total_mrgn      *****  :%lf:", d_total_mrgn   );
            }
			fn_userlog(c_ServiceName,"New Code start");	
					i_tot_cat_rec = Foccur32((FBFR32 * ) ptr_fml_Ibuf, FFO_NARRATION_ID);
					 for (i_reccount = 0; i_reccount < i_tot_cat_rec; i_reccount++)
            {
                 i_err[27] = Fget32(ptr_fml_Ibuf, FFO_NARRATION_ID,i_reccount , (char * ) c_cat_id, 0);
                 i_ferr[27] = Ferror32;

                 if (i_err[27] == -1)
                 {
                      fn_errlog(c_ServiceName, "S31065", Fstrerror32(i_ferr[i_cnt]), c_err_msg);
                      fn_userlog(c_ServiceName, "Unable to category id fget :%d:", i_cnt);
                      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
 											tpfree((char * ) ptr_fml_Obuf);
                      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                      tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
                  }

                /*******************
                if( i_reccount == 0)
                {
                    EXEC SQL
                    DELETE FROM FCM_FO1CLICK_CTGRT_MSTR
                    WHERE FCM_PRTFL_ID = :c_prtflo_id;

                    if (SQLCODE != 0 && ( SQLCODE != NO_DATA_FOUND ))
                    {
                        fn_errlog(c_ServiceName, "S31070", SQLMSG, c_err_msg);
                        fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
 												tpfree((char * ) ptr_fml_Obuf);
                        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                        tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
                    }
        	        if(DEBUG_MSG_LVL_0)
	                  fn_userlog(c_ServiceName, " ******************deleted************");
                 }
                 *********************/
 
	                if(DEBUG_MSG_LVL_0)
        	          fn_userlog(c_ServiceName, " ******************before category insert************");
                	i_returncode = fn_ins_cgm((char *)c_prtflo_id2, c_cat_id);

									if (i_returncode == -1)
        	        {
                	    fn_errlog(c_ServiceName, "S31075", SQLMSG, c_err_msg);
                 	    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
 											tpfree((char * ) ptr_fml_Obuf);	
                     Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                      tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
                  }
            }

	       /******************Selecting FSB DATA of OLD Portfolio ID ****************/
					/***EXEC SQL
					SELECT
					FSB_PRTFL_NAME,
					FSB_PRTFL_DESC,
					FSB_PRTFL_RISK,
					FSB_STRTGY_BESD_ON,
					FSB_BENCH_MARK,
					FSB_CUST_CATRGY,
					FSB_MOB_CATRGY,
					FSB_CHARGES,
					FSB_BROKRGS,
					FSB_FEES_EXCLD_GST,
					FSB_LIKE_CNT,
					FSB_VIEW_CNT,
					FSB_INSERT_DT,
					FSB_INSERT_BY,
					FSB_LST_MODIFIED_BY,
					FSB_INS_BY_MATCH,
					FSB_STATUS,
					FSB_CUST_RCMEND_FLG,
					FSB_NICK_NAME
			INTO
      		:c_prtfl_name,
      		:c_prtfl_desc,
					:c_prtfl_risk,
					:c_strtgy_besd_on,
					:c_bench_mark,
					:c_cust_catrgy,
					:c_mob_catrgy,
					:c_charges,
					:c_brokrgs,
					:d_fees_excld_gst,
					:i_like_cnt,
					:i_view_cnt,
					:c_insert_dt,
					:st_usr_prfl.c_user_id,
					:c_lst_modified_by,
					:st_usr_prfl.c_cln_mtch_accnt,
      		:c_a_status ,
					:c_cust_flg,
					:c_nick_name
					FROM FSB_FO1CLICK_STRTGY_BUCKTDTLS
					WHERE FSB_PRTFL_ID = :c_prtflo_id;
				
					if ((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
        	{
         		 fn_errlog(c_ServiceName, "S31080", SQLMSG, c_err_msg);
          	fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
 						tpfree((char * ) ptr_fml_Obuf); 
        	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
          	tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
        	}
	          ******/	
			/********* Inserting ALL FSB Data with new portfolio ID ********************/

				EXEC SQL
         INSERT INTO FSB_FO1CLICK_STRTGY_BUCKTDTLS
				(
					FSB_PRTFL_ID,
					FSB_PRTFL_NAME,
					FSB_PRTFL_DESC,
					FSB_STRGY_ID,
					FSB_PRTFL_RISK,
					FSB_STRTGY_BESD_ON,
					FSB_BENCH_MARK,
					FSB_CUST_CATRGY,
					FSB_MOB_CATRGY,
					FSB_CHARGES,
					FSB_BROKRGS,
					FSB_FEES_EXCLD_GST,
					FSB_LIKE_CNT,
					FSB_VIEW_CNT,
					FSB_INSERT_DT,
					FSB_INSERT_BY,
					FSB_INS_BY_MATCH,
					FSB_STATUS,
					FSB_CUST_RCMEND_FLG,
					FSB_NICK_NAME,
					FSB_TRGT_PRC, 
					FSB_SLTP_PRC ,
          FSB_BOOK_PROFIT ,
          FSB_BOOK_PART_PROFT_PERC ,
          FSB_EXIT_PRICE ,
          FSB_POTENTIAL ,
       	  FSB_TIME_FRAME,
          FSB_RISK_PROFILE,
          FSB_SEGMENT ,
          FSB_IND_STK_CALL ,
          FSB_REMARKS ,
          FSB_CALL_ACTION ,
          FSB_EXPTD_PRFT_PERLOT,
          FSB_EXPTD_LOSS_PERLOT,
          FSB_TOTAL_MARGIN ,
          FSB_LST_MODIFIED_DT ,
          FSB_LST_MODIFIED_BY,
          FSB_CALL_DATE
				)
				(
				  SELECT  
          :c_prtflo_id2,
          FSB_PRTFL_NAME,
          FSB_PRTFL_DESC,
          FSB_STRGY_ID,
          FSB_PRTFL_RISK,
          FSB_STRTGY_BESD_ON,
          FSB_BENCH_MARK,
          FSB_CUST_CATRGY,
          FSB_MOB_CATRGY,
          FSB_CHARGES,
          FSB_BROKRGS,
          FSB_FEES_EXCLD_GST,
          FSB_LIKE_CNT,
          FSB_VIEW_CNT,
          SYSDATE,
          :st_usr_prfl.c_user_id,
          FSB_INS_BY_MATCH,
          'A',
          'R',
          FSB_NICK_NAME,
          :d_trgt_prc,
          :d_sltp_prc,
          :d_book_profit,
          :d_book_part_prft_perc,
          :d_exit_price,
          :d_potential,
          :l_time_frame,
          :c_risk_profile,
          :c_segment,
          :c_indstk_call,
          :c_remarks,
          :c_call_action,
          :d_ex_pft_perlot*100 ,
          :d_ex_los_perlot*100 ,
          :d_total_mrgn,
          SYSDATE,
          :st_usr_prfl.c_user_id,
          SYSDATE
          FROM FSB_FO1CLICK_STRTGY_BUCKTDTLS
          WHERE FSB_PRTFL_ID = :c_prtflo_id	
				);
				if (SQLCODE != 0)
				{
					fn_errlog(c_ServiceName, "S31085", SQLMSG, c_err_msg);
					fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
					tpfree((char * ) ptr_fml_Obuf);
				Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
					tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
				}
			fn_userlog(c_ServiceName,"After Inserting in FSB.......");
			}/***End of st_usr_prfl.l_session_id == 0**/
			
		i_trnsctn = fn_committran(c_ServiceName, i_trnsctn, c_err_msg);
    if (i_trnsctn == -1)
    {
       fn_userlog(c_ServiceName, "Failed in committing transaction");
       fn_errlog(c_ServiceName, "S31090", TPMSG, c_err_msg);
 			 tpfree((char * ) ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
    }

			if(Fadd32(ptr_fml_Obuf,FFO_ACTION1,(char *)c_prtflo_id2,0) == -1)
      {
         fn_userlog(c_ServiceName,"Error in Fadd32 ");
         fn_errlog( c_ServiceName, "S31095", FMLMSG, c_err_msg);
 				 tpfree((char * ) ptr_fml_Obuf); 
       tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
      }
		fn_userlog(c_ServiceName,"ver 1.1 Ends");
		tpreturn(TPSUCCESS, 0L, (char *)ptr_fml_Obuf, 0L, 0);

} /** if condition to check edit flag ends here **/
		/********** ver 1.1 Ends *********/

    if (c_rqst_type == 'I')  /** equest type for Inserting **/
    {
			if(DEBUG_MSG_LVL_3)
			{
        fn_userlog(c_ServiceName, "Inside I request type");
        fn_userlog(c_ServiceName, "st_usr_prfl.l_session_id :%ld:",st_usr_prfl.l_session_id);
        fn_userlog(c_ServiceName, "c_prtflo_id :%s:",c_prtflo_id); 
      } 

        if (st_usr_prfl.l_session_id == 0)
        {

            if (Fget32(ptr_fml_Ibuf, FFO_BP_ID, 0, (char * ) c_prtflo_id, 0) == -1)
            {
                fn_userlog(c_ServiceName, "Inside error condition.. portfolio id error");
                fn_errlog(c_ServiceName, "S31100", LIBMSG, c_err_msg);
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * )ptr_fml_Ibuf, 0, 0);
            }
            if(DEBUG_MSG_LVL_3)
            	fn_userlog(c_ServiceName, "c_prtflo_id :%s:",c_prtflo_id);
        }
        else    /**user and session authentication ends**/
        {


            i_ch_val = fn_chk_sssn(c_ServiceName, &st_usr_prfl, &st_err_msg);

            if (i_ch_val == -1)
            {
                fn_errlog(c_ServiceName, "S31105", LIBMSG, st_err_msg.c_err_msg);
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            }
           
            MEMSET(c_prtflo_id);
    
            EXEC SQL
            SELECT SEQ_FSB_PRTFL_ID.NEXTVAL
            INTO :c_prtflo_id
            FROM DUAL;

            if (SQLCODE != 0)
            {
                fn_errlog(c_ServiceName, "S31110", SQLMSG, c_err_msg);
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            }

        }
        rtrim(c_prtflo_id);

				/*SETLEN(c_prtflo_id);*/
        
				i_tot_rec = Foccur32((FBFR32 * ) ptr_fml_Ibuf, FFO_UNDRLYNG);

				if(DEBUG_MSG_LVL_3)
        	fn_userlog(c_ServiceName, "i_tot_rec is :%d:", i_tot_rec);

        i_trnsctn = fn_begintran(c_ServiceName, c_err_msg);

        if (i_trnsctn == -1)
        {
            fn_userlog(c_ServiceName, "Failed in initial begin transaction for daily loop");
           fn_errlog(c_ServiceName, "S31115", TPMSG, c_err_msg);
						tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
        }

        for (i_reccount = 0; i_reccount < i_tot_rec; i_reccount++)
        {
			
						d_leg_no = i_reccount + 1;	/** Added by ravindra **/	
				
            i_err[0] = Fget32(ptr_fml_Ibuf, FFO_XCHNG_CD, i_reccount, (char * ) st_fo_leg_var[i_reccount].c_xchng_cd, 0);
            i_ferr[0] = Ferror32;
            i_err[1] = Fget32(ptr_fml_Ibuf, FFO_UNDRLYNG, i_reccount, (char * ) st_fo_leg_var[i_reccount].c_undrlyng, 0);
            i_ferr[1] = Ferror32;
            i_err[2] = Fget32(ptr_fml_Ibuf, FFO_PRDCT_TYP, i_reccount, (char * ) &st_fo_leg_var[i_reccount].c_prdct_typ, 0);
            i_ferr[2] = Ferror32;
            i_err[3] = Fget32(ptr_fml_Ibuf, FFO_EXPRY_DT, i_reccount, (char * ) st_fo_leg_var[i_reccount].c_expry_dt, 0);
            i_ferr[3] = Ferror32;
            i_err[4] = Fget32(ptr_fml_Ibuf, FFO_OPT_TYP, i_reccount, (char * ) &st_fo_leg_var[i_reccount].c_opt_typ, 0);
            i_ferr[4] = Ferror32;
            i_err[5] = Fget32(ptr_fml_Ibuf, FFO_STRK_PRC, i_reccount, (char * ) &st_fo_leg_var[i_reccount].l_strk_prc, 0);
            i_ferr[5] = Ferror32;
            i_err[6] = Fget32(ptr_fml_Ibuf, FFO_CTGRY_INDSTK, i_reccount, (char * ) &st_fo_leg_var[i_reccount].c_indstk, 0);
            i_ferr[6] = Ferror32;
            i_err[7] = Fget32(ptr_fml_Ibuf, FFO_EXER_TYP, i_reccount, (char * ) &st_fo_leg_var[i_reccount].c_exer_typ, 0);
            i_ferr[7] = Ferror32;
            i_err[8] = Fget32(ptr_fml_Ibuf, FFO_ORDR_FLW, i_reccount, (char * )&st_fo_leg_var[i_reccount].c_action, 0);
            i_ferr[8] = Ferror32;
            i_err[9] = Fget32(ptr_fml_Ibuf, FFO_OI_LOW, i_reccount, (char * )&st_fo_leg_var[i_reccount].d_rcmend_prc_frm , 0);
            i_ferr[9] = Ferror32;
            i_err[10] = Fget32(ptr_fml_Ibuf, FFO_OI_HIGH, i_reccount, (char * )&st_fo_leg_var[i_reccount].d_rcmend_prc_to , 0);
            i_ferr[10] = Ferror32;
            i_err[11] = Fget32(ptr_fml_Ibuf, FFO_IP_VIEW_NM, i_reccount, (char * ) st_fo_leg_var[i_reccount].c_view, 0);
            i_ferr[11] = Ferror32;
            i_err[12] = Fget32(ptr_fml_Ibuf,FFO_PLG_QTY , i_reccount, (char * )&st_fo_leg_var[i_reccount].l_ordr_qty, 0);
            i_ferr[12] = Ferror32;
            i_err[13] = Fget32(ptr_fml_Ibuf,FFO_PLG_TYP , i_reccount, (char * )&st_fo_leg_var[i_reccount].c_ordr_typ, 0);
            i_ferr[13] = Ferror32;
            i_err[14] = Fget32(ptr_fml_Ibuf,FFO_PLG_RT , i_reccount, (char * )&st_fo_leg_var[i_reccount].d_ordr_rt, 0);
            i_ferr[14] = Ferror32;
						i_err[15] = Fget32(ptr_fml_Ibuf, FFO_SPL_FLG , i_reccount, (char * )&c_edit_flag, 0);
						i_ferr[15] = Ferror32;
						i_err[16] = Fget32(ptr_fml_Ibuf, FFO_INDEX, i_reccount, (char * )&d_leg_no_fetched, 0);
						i_ferr[16] = Ferror32;

            for (i_cnt = 0; i_cnt < 9; i_cnt++)
            {
                if (i_err[i_cnt] == -1)
                {
                    fn_errlog(c_ServiceName, "S31120", Fstrerror32(i_ferr[i_cnt]), c_err_msg);
                    fn_userlog(c_ServiceName, "Unable to fget :%d:", i_cnt);
                   fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                    tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
                }
            }
						for(i_cnt = 9;i_cnt <17 ; i_cnt++)
						{
            	if ( i_err[i_cnt] == -1 )
    					{
      					if ( Ferror32 != FNOTPRES )
      					{
        					fn_errlog( c_ServiceName, "S31125", FMLMSG, c_err_msg  );
        					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      					}
      					else if( Ferror32 == FNOTPRES )
      					{
       					   if(i_cnt == 9)
									 {
												st_fo_leg_var[i_reccount].d_rcmend_prc_frm =0;
									 }		 
       					   if(i_cnt == 10)
									 {
												st_fo_leg_var[i_reccount].d_rcmend_prc_to=0;
									 }		 
       					   if(i_cnt == 11)
									 {
												strcpy(st_fo_leg_var[i_reccount].c_view,"");
									 }		 
       					   if(i_cnt == 12)
									 {
										    st_fo_leg_var[i_reccount].l_ordr_qty=0;					
									 }		 
       					   if(i_cnt == 13)
									 {
										    st_fo_leg_var[i_reccount].c_ordr_typ='\0';					
									 }		 
       					   if(i_cnt == 14)
									 {
										    st_fo_leg_var[i_reccount].d_ordr_rt=0;					
									 }		 
      					}
    					}
						}
            rtrim(st_fo_leg_var[i_reccount].c_xchng_cd);
            rtrim(st_fo_leg_var[i_reccount].c_undrlyng);
            rtrim(st_fo_leg_var[i_reccount].c_view);
    			  if(DEBUG_MSG_LVL_3)
						{		
              fn_userlog( c_ServiceName, "c_prtflo_id 	    *****  :%s:", c_prtflo_id  );
    					fn_userlog( c_ServiceName, "c_xchng_cd 	      *****  :%s:", st_fo_leg_var[i_reccount].c_xchng_cd   );
    					fn_userlog( c_ServiceName, "c_undrlyng	      *****  :%s:", st_fo_leg_var[i_reccount].c_undrlyng  );
    					fn_userlog( c_ServiceName, "c_prdct_typ       *****  :%c:", st_fo_leg_var[i_reccount].c_prdct_typ  );
    					fn_userlog( c_ServiceName, "c_expry_dt 	      *****  :%s:", st_fo_leg_var[i_reccount].c_expry_dt  );
    					fn_userlog( c_ServiceName, "c_view 			      *****  :%s:", st_fo_leg_var[i_reccount].c_view );
    					fn_userlog( c_ServiceName, "c_opt_typ 	      *****  :%c:", st_fo_leg_var[i_reccount].c_opt_typ  );
    					fn_userlog( c_ServiceName, "c_exer_typ 	      *****  :%c:", st_fo_leg_var[i_reccount].c_exer_typ  );
    					fn_userlog( c_ServiceName, "l_strk_prc 	      *****  :%ld:", st_fo_leg_var[i_reccount].l_strk_prc  );
    					fn_userlog( c_ServiceName, "c_action 			    *****  :%c:", st_fo_leg_var[i_reccount].c_action  );
    					fn_userlog( c_ServiceName, "d_rcmend_prc_frm  *****  :%lf:", st_fo_leg_var[i_reccount].d_rcmend_prc_frm  );
    					fn_userlog( c_ServiceName, "d_rcmend_prc_to 	*****  :%lf:", st_fo_leg_var[i_reccount].d_rcmend_prc_to );
    					fn_userlog( c_ServiceName, "l_ordr_qty 	      *****  :%ld:", st_fo_leg_var[i_reccount].l_ordr_qty  );
    					fn_userlog( c_ServiceName, "c_ordr_typ        *****  :%c:", st_fo_leg_var[i_reccount].c_ordr_typ  );
    					fn_userlog( c_ServiceName, "d_ordr_rt 	      *****  :%ld:", st_fo_leg_var[i_reccount].d_ordr_rt  );
							fn_userlog(c_ServiceName, "edit flag is       *****   :%c:",c_edit_flag);		
							fn_userlog(c_ServiceName, "fetched leg no is  *****  :%lf:",d_leg_no_fetched);
						}

						if ( c_edit_flag == 'N' || st_usr_prfl.l_session_id !=0 )  /** If condition to check edit flag added by ravindra **/
						{	
						EXEC SQL
						SELECT count(1) 
						INTO :i_leg_count
						FROM FSL_FO1CLICK_STRTGY_LEGDTLS
						WHERE	FSL_PRTFLO_ID = :c_prtflo_id
						AND FSL_XCHNG_CD  = :st_fo_leg_var[i_reccount].c_xchng_cd
						AND FSL_UNDRLYNG  = :st_fo_leg_var[i_reccount].c_undrlyng
						AND FSL_PRDCT_TYP = :st_fo_leg_var[i_reccount].c_prdct_typ
						AND FSL_EXPRY_DT  = :st_fo_leg_var[i_reccount].c_expry_dt
						AND FSL_OPT_TYP	  =	:st_fo_leg_var[i_reccount].c_opt_typ
						AND FSL_EXER_TYP	=	:st_fo_leg_var[i_reccount].c_exer_typ
						AND FSL_STRK_PRC	= :st_fo_leg_var[i_reccount].l_strk_prc
						AND FSL_INDSTK    = :st_fo_leg_var[i_reccount].c_indstk
						AND FSL_STATUS    = :c_a_status;
           
						 if (SQLCODE != 0 && ( SQLCODE != NO_DATA_FOUND ))
            {
                fn_errlog(c_ServiceName, "S31130", SQLMSG, c_err_msg);
               fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            }						
            
						if(DEBUG_MSG_LVL_3)  
							fn_userlog( c_ServiceName, "leg count 	    *****  :%d:",i_leg_count );
						
						if(i_leg_count == 0)
						{
            
						if(DEBUG_MSG_LVL_3)
						{ 
							fn_userlog( c_ServiceName, "inside leg count = 0 	TEST    *****  :%d:",i_leg_count  );
            	fn_userlog( c_ServiceName, "i_reccount :%d:",i_reccount);  
            	fn_userlog( c_ServiceName, "st_fo_leg_var[i_reccount-1].c_undrlyng :%s:",st_fo_leg_var[i_reccount-1].c_undrlyng);
            	fn_userlog( c_ServiceName, "st_fo_leg_var[i_reccount].c_undrlyng) :%s:",st_fo_leg_var[i_reccount].c_undrlyng);
						}

/***        
            if ( i_reccount > 0 )
            { 
              if(strcmp(st_fo_leg_var[i_reccount-1].c_undrlyng,st_fo_leg_var[i_reccount].c_undrlyng) != 0 )
              {
                fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                fn_userlog(c_ServiceName,"Add Leg Allowed in Single Underlying Only, pls check.");
                strcpy(c_err_msg,"Add Leg Allowed in Single Underlying Only, pls check.");

                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);	
              }
            }
 ***/
        
            if(st_usr_prfl.l_session_id == 0)
            {
              EXEC SQL
              SELECT NVL(FTQ_MIN_LOT_QTY,0)
                INTO :st_fo_leg_var[i_reccount].l_ordr_qty
                FROM FTQ_FO_TRD_QT
               WHERE FTQ_XCHNG_CD   = :st_fo_leg_var[i_reccount].c_xchng_cd
                AND   FTQ_PRDCT_TYP  = :st_fo_leg_var[i_reccount].c_prdct_typ
                AND   FTQ_INDSTK     = :st_fo_leg_var[i_reccount].c_indstk
                AND   FTQ_UNDRLYNG   = :st_fo_leg_var[i_reccount].c_undrlyng
                AND   FTQ_EXPRY_DT   = :st_fo_leg_var[i_reccount].c_expry_dt
                AND   FTQ_EXER_TYP   = :st_fo_leg_var[i_reccount].c_exer_typ
                AND   FTQ_OPT_TYP    = :st_fo_leg_var[i_reccount].c_opt_typ
                AND   FTQ_STRK_PRC   = :st_fo_leg_var[i_reccount].l_strk_prc;

                if (SQLCODE != 0)
                {
                  fn_errlog(c_ServiceName, "S31135", SQLMSG, c_err_msg);
                  fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                  Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                  tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
                }
             } 
            EXEC SQL
            INSERT INTO FSL_FO1CLICK_STRTGY_LEGDTLS
                (
										FSL_MATCH_ACCNT,
                    FSL_PRTFLO_ID,
                    FSL_XCHNG_CD,
                    FSL_UNDRLYNG,
                    FSL_PRDCT_TYP,
                    FSL_EXPRY_DT,
                    FSL_VIEW,
                    FSL_OPT_TYP,
                    FSL_EXER_TYP,
                    FSL_STRK_PRC,
										FSL_INDSTK,
                    FSL_ACTION,
										FSL_INSERT_DT,
										FSL_INSERT_BY,
                    FSL_RCMEND_PRC_FRM,
                    FSL_RCMEND_PRC_TO,
										FSL_STATUS,
										FSL_ORDR_QTY,
										FSL_ORDR_TYP,
										FSL_ORDR_RT,
										FSL_LEG_NO
                )
            VALUES
                (
									  :st_usr_prfl.c_cln_mtch_accnt,	
                    :c_prtflo_id,
                    :st_fo_leg_var[i_reccount].c_xchng_cd,
                    :st_fo_leg_var[i_reccount].c_undrlyng,
                    :st_fo_leg_var[i_reccount].c_prdct_typ,
                    :st_fo_leg_var[i_reccount].c_expry_dt,
                    :st_fo_leg_var[i_reccount].c_view,
                    :st_fo_leg_var[i_reccount].c_opt_typ,
                    :st_fo_leg_var[i_reccount].c_exer_typ,
                    :st_fo_leg_var[i_reccount].l_strk_prc,
										:st_fo_leg_var[i_reccount].c_indstk,
                    :st_fo_leg_var[i_reccount].c_action,
										 SYSDATE,
										:st_usr_prfl.c_user_id,									
                    :st_fo_leg_var[i_reccount].d_rcmend_prc_frm,
                    :st_fo_leg_var[i_reccount].d_rcmend_prc_to,
										:c_a_status,
                    :st_fo_leg_var[i_reccount].l_ordr_qty,
                    :st_fo_leg_var[i_reccount].c_ordr_typ,
                    :st_fo_leg_var[i_reccount].d_ordr_rt,
										:d_leg_no
                );

            if (SQLCODE != 0)
            {
                fn_errlog(c_ServiceName, "S31140", SQLMSG, c_err_msg);
               fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            }
						}
            else
            {  /*** Ver 1.2 Starts here ****/
              d_lst_trd_prc=0;

            	EXEC SQL
            	SELECT NVL(FTQ_LST_TRD_PRC,0)
           		  INTO :d_lst_trd_prc
            	  FROM FTQ_FO_TRD_QT
               WHERE FTQ_XCHNG_CD   = :st_fo_leg_var[i_reccount].c_xchng_cd
            		AND   FTQ_PRDCT_TYP  = :st_fo_leg_var[i_reccount].c_prdct_typ
            		AND   FTQ_INDSTK     = :st_fo_leg_var[i_reccount].c_indstk
            		AND   FTQ_UNDRLYNG   = :st_fo_leg_var[i_reccount].c_undrlyng
            		AND   FTQ_EXPRY_DT   = :st_fo_leg_var[i_reccount].c_expry_dt
            		AND   FTQ_EXER_TYP   = :st_fo_leg_var[i_reccount].c_exer_typ
            		AND   FTQ_OPT_TYP    = :st_fo_leg_var[i_reccount].c_opt_typ
            		AND   FTQ_STRK_PRC   = :st_fo_leg_var[i_reccount].l_strk_prc;

            	if (SQLCODE != 0)
            	{
                fn_errlog(c_ServiceName, "S31145", SQLMSG, c_err_msg);
                fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            	}            

	   				 EXEC SQL
           	 UPDATE  FSL_FO1CLICK_STRTGY_LEGDTLS
            	SET     FSL_CNTRCT_LTP = :d_lst_trd_prc
            	WHERE FSL_LEG_NO = :d_leg_no_fetched
           	 	AND   FSL_PRTFLO_ID = :c_prtflo_id;
	    			if (SQLCODE != 0)
            {
              fn_errlog(c_ServiceName, "S31150", SQLMSG, c_err_msg);
              fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
              Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
              tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            }

            } /*** ver 1.2 Ends Here ***/ 
					}  /** if condition to check edit flag ends here **/

					else if ( c_edit_flag == 'E' )  /** If condition for edit flag E added by ravindra **/
					{
					fn_userlog(c_ServiceName,"Req Type :%c:",c_edit_flag);
						if(DEBUG_MSG_LVL_3)
						{
						  fn_userlog( c_ServiceName, "-------- details fetched for EDIT Flag E -----"  );
              fn_userlog( c_ServiceName, "c_xchng_cd        *****  :%s:", st_fo_leg_var[i_reccount].c_xchng_cd   );
              fn_userlog( c_ServiceName, "c_undrlyng        *****  :%s:", st_fo_leg_var[i_reccount].c_undrlyng  );
              fn_userlog( c_ServiceName, "c_prdct_typ       *****  :%c:", st_fo_leg_var[i_reccount].c_prdct_typ  );
              fn_userlog( c_ServiceName, "c_expry_dt        *****  :%s:", st_fo_leg_var[i_reccount].c_expry_dt  );
              fn_userlog( c_ServiceName, "c_view            *****  :%s:", st_fo_leg_var[i_reccount].c_view );
              fn_userlog( c_ServiceName, "c_opt_typ         *****  :%c:", st_fo_leg_var[i_reccount].c_opt_typ  );
              fn_userlog( c_ServiceName, "c_exer_typ        *****  :%c:", st_fo_leg_var[i_reccount].c_exer_typ  );
              fn_userlog( c_ServiceName, "l_strk_prc        *****  :%ld:", st_fo_leg_var[i_reccount].l_strk_prc  );
              fn_userlog( c_ServiceName, "c_action          *****  :%c:", st_fo_leg_var[i_reccount].c_action  );
              fn_userlog( c_ServiceName, "d_rcmend_prc_frm  *****  :%lf:", st_fo_leg_var[i_reccount].d_rcmend_prc_frm  );
              fn_userlog( c_ServiceName, "d_rcmend_prc_to   *****  :%lf:", st_fo_leg_var[i_reccount].d_rcmend_prc_to );
              fn_userlog( c_ServiceName, "l_ordr_qty        *****  :%ld:", st_fo_leg_var[i_reccount].l_ordr_qty  );
              fn_userlog( c_ServiceName, "c_ordr_typ        *****  :%c:", st_fo_leg_var[i_reccount].c_ordr_typ  );
              fn_userlog( c_ServiceName, "---------- Details fetched for EDIT Flag E --------"  );

              fn_userlog( c_ServiceName, "c_prtflo_id *****  :%s:", c_prtflo_id  );
              fn_userlog( c_ServiceName, "d_leg_no_fetched  *****  :%lf:", d_leg_no_fetched  );
						}

            /*** Ver 1.2 Starts Here ***//** To select LTP from FTQ Table ***/
            d_lst_trd_prc=0;

            EXEC SQL
            SELECT NVL(FTQ_LST_TRD_PRC,0),
                   NVL(FTQ_MIN_LOT_QTY,0)
            INTO :d_lst_trd_prc	,
                 :st_fo_leg_var[i_reccount].l_ordr_qty
            FROM FTQ_FO_TRD_QT
            WHERE FTQ_XCHNG_CD   = :st_fo_leg_var[i_reccount].c_xchng_cd
            AND   FTQ_PRDCT_TYP  = :st_fo_leg_var[i_reccount].c_prdct_typ
            AND   FTQ_INDSTK     = :st_fo_leg_var[i_reccount].c_indstk
            AND   FTQ_UNDRLYNG   = :st_fo_leg_var[i_reccount].c_undrlyng
            AND   FTQ_EXPRY_DT   = :st_fo_leg_var[i_reccount].c_expry_dt
            AND   FTQ_EXER_TYP   = :st_fo_leg_var[i_reccount].c_exer_typ
            AND   FTQ_OPT_TYP    = :st_fo_leg_var[i_reccount].c_opt_typ
            AND   FTQ_STRK_PRC   = :st_fo_leg_var[i_reccount].l_strk_prc;
            
            if (SQLCODE != 0)
            {
                fn_errlog(c_ServiceName, "S31155", SQLMSG, c_err_msg);
                fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            }
                  /*** Ver 1.2 Ends ***/   

						EXEC SQL
						UPDATE  FSL_FO1CLICK_STRTGY_LEGDTLS
						SET
						FSL_MATCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt,
						FSL_PRTFLO_ID = :c_prtflo_id,
						FSL_XCHNG_CD = :st_fo_leg_var[i_reccount].c_xchng_cd,
						FSL_UNDRLYNG = :st_fo_leg_var[i_reccount].c_undrlyng, 
						FSL_PRDCT_TYP = :st_fo_leg_var[i_reccount].c_prdct_typ,
						FSL_EXPRY_DT = :st_fo_leg_var[i_reccount].c_expry_dt,
						FSL_VIEW = :st_fo_leg_var[i_reccount].c_view,
						FSL_OPT_TYP = :st_fo_leg_var[i_reccount].c_opt_typ,
						FSL_EXER_TYP = :st_fo_leg_var[i_reccount].c_exer_typ,
						FSL_STRK_PRC = :st_fo_leg_var[i_reccount].l_strk_prc,
						FSL_INDSTK = :st_fo_leg_var[i_reccount].c_indstk,
						FSL_ACTION = :st_fo_leg_var[i_reccount].c_action,
						FSL_INSERT_DT = SYSDATE,
						FSL_INSERT_BY = :st_usr_prfl.c_user_id,
						FSL_RCMEND_PRC_FRM = :st_fo_leg_var[i_reccount].d_rcmend_prc_frm,
						FSL_RCMEND_PRC_TO = :st_fo_leg_var[i_reccount].d_rcmend_prc_to,
						FSL_STATUS = :c_a_status,
						FSL_ORDR_QTY = :st_fo_leg_var[i_reccount].l_ordr_qty,
						FSL_ORDR_TYP = :st_fo_leg_var[i_reccount].c_ordr_typ,
						FSL_ORDR_RT = :st_fo_leg_var[i_reccount].d_ordr_rt,
            FSL_CNTRCT_LTP = :d_lst_trd_prc                                  /*** Ver 1.2 ***/   
						WHERE FSL_LEG_NO = :d_leg_no_fetched
						/*** AND   FSL_MATCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt  ***/
						AND   FSL_PRTFLO_ID = :c_prtflo_id; 

						if (SQLCODE != 0)
						{
							fn_errlog(c_ServiceName, "S31160", SQLMSG, c_err_msg);
							fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
							Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
							tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
						}

						if(DEBUG_MSG_LVL_3)
							fn_userlog(c_ServiceName, "Records updated sucsessfully for leg no :%lf:",d_leg_no_fetched);

					}  /** If condtion for edit flag E ends here **/	
        } /** for loop for multiple occurences**/

        if(st_usr_prfl.l_session_id == 0)
        {
            i_err[12] = Fget32(ptr_fml_Ibuf, FFO_PLG_AMT,0, (char * ) &d_trgt_prc, 0);
            i_ferr[12] = Ferror32;
            i_err[13] = Fget32(ptr_fml_Ibuf, FFO_FUT_PRC,0, (char * ) &d_sltp_prc, 0);
            i_ferr[13] = Ferror32;
            i_err[14] = Fget32(ptr_fml_Ibuf, FFO_AMOUNT, 0, (char * ) &d_book_profit, 0);
            i_ferr[14] = Ferror32;
            i_err[15] = Fget32(ptr_fml_Ibuf, FFO_INIT_MRGN_PRCNT,0, (char * ) &d_book_part_prft_perc, 0);
            i_ferr[15] = Ferror32;
            i_err[16] = Fget32(ptr_fml_Ibuf, FFO_OPERATION_TYP , 0, (char * ) &c_indstk_call, 0);
            i_ferr[16] = Ferror32;
            i_err[17] = Fget32(ptr_fml_Ibuf, FFO_EFF_CLS_PRC,0,  (char * ) &d_exit_price, 0);
            i_ferr[17] = Ferror32;
            i_err[18] = Fget32(ptr_fml_Ibuf, FFO_MIN_MRGN_PRCNT,0,  (char * ) &d_potential, 0);
            i_ferr[18] = Ferror32;
            i_err[19] = Fget32(ptr_fml_Ibuf, FFO_OPN_PRC,  0,(char * ) &l_time_frame, 0);
            i_ferr[19] = Ferror32;
            i_err[20] = Fget32(ptr_fml_Ibuf, FFO_ORD_TYP,0, (char * ) &c_risk_profile, 0);
            i_ferr[20] = Ferror32;
            i_err[21] = Fget32(ptr_fml_Ibuf, FFO_EX_ORDR_TYP,0, (char * ) &c_segment, 0);
            i_ferr[21] = Ferror32;
            i_err[22] = Fget32(ptr_fml_Ibuf, FFO_REMARKS,0, (char * ) c_remarks, 0);
            i_ferr[22] = Ferror32;
            i_err[23] = Fget32(ptr_fml_Ibuf, FFO_ACTION1, 0,(char * ) c_call_action, 0);
            i_ferr[23] = Ferror32;
            i_err[24] = Fget32(ptr_fml_Ibuf, FFO_EFF_LMT_RT ,0, (char * )&d_ex_pft_perlot , 0);
            i_ferr[24] = Ferror32;
            i_err[25] = Fget32(ptr_fml_Ibuf, FFO_EFF_EXCTD_RT,  0,(char *)&d_ex_los_perlot, 0);
            i_ferr[25] = Ferror32;
            i_err[26] = Fget32(ptr_fml_Ibuf, FFO_DLVRY_MRGN ,0, (char *)&d_total_mrgn, 0);
            i_ferr[26] = Ferror32;
				

            for (i_cnt = 12; i_cnt < 27; i_cnt++)
            {
                if (i_err[i_cnt] == -1)
                {
                    fn_errlog(c_ServiceName, "S31165", Fstrerror32(i_ferr[i_cnt]), c_err_msg);
                    fn_userlog(c_ServiceName, "Unable to fget :%d:", i_cnt);
                    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                    tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
                }
            }
            fn_userlog(c_ServiceName, " ******************before update************");
						rtrim(c_prtflo_id);
						rtrim(c_call_action);
 
            strcat(c_remarks," "); 
            strcat(c_remarks,c_call_action);
						rtrim(c_remarks);
            
						if(DEBUG_MSG_LVL_3)
						{  
							fn_userlog( c_ServiceName, "c_prtflo_id 	    *****  :%s:", c_prtflo_id  );
              fn_userlog( c_ServiceName, "l_strgy_id  	    *****  :%ld:", l_strgy_id   );
              fn_userlog( c_ServiceName, "d_trgt_prc  	    *****  :%lf:", d_trgt_prc   );
              fn_userlog( c_ServiceName, "d_sltp_prc  	    *****  :%lf:", d_sltp_prc   );
              fn_userlog( c_ServiceName, "d_book_profit  	    *****  :%lf:", d_book_profit  );
              fn_userlog( c_ServiceName, "d_book_part_prft_perc  	    *****  :%lf:", d_book_part_prft_perc  );
              fn_userlog( c_ServiceName, "d_exit_price  	    *****  :%lf:", d_exit_price  );
              fn_userlog( c_ServiceName, "d_potential  	    *****  :%lf:", d_potential   );
              fn_userlog( c_ServiceName, "l_time_frame  	    *****  :%ld:", l_time_frame   );
              fn_userlog( c_ServiceName, "c_risk_profile  	    *****  :%c:", c_risk_profile  );
              fn_userlog( c_ServiceName, "c_segment  	    *****  :%c:", c_segment   );
              fn_userlog( c_ServiceName, "c_indstk_call  	    *****  :%c:", c_indstk_call   );
              /**fn_userlog( c_ServiceName, "c_remarks  	    *****  :%s:", c_remarks   );**/
              fn_userlog( c_ServiceName, "c_call_action  	    *****  :%s:", c_call_action   );
              fn_userlog( c_ServiceName, "d_ex_pft_perlot  	    *****  :%lf:", d_ex_pft_perlot   );
              fn_userlog( c_ServiceName, "d_ex_los_perlot 	    *****  :%lf:", d_ex_los_perlot   );
              fn_userlog( c_ServiceName, "d_total_mrgn 	    *****  :%lf:", d_total_mrgn   );
						}
            
            EXEC SQL
            UPDATE FSB_FO1CLICK_STRTGY_BUCKTDTLS
            SET
     /**           FSB_STRGY_ID = :l_strgy_id,**/
                FSB_TRGT_PRC =  :d_trgt_prc,
                FSB_SLTP_PRC =  :d_sltp_prc,
                FSB_BOOK_PROFIT = :d_book_profit,
                FSB_BOOK_PART_PROFT_PERC = :d_book_part_prft_perc,
                FSB_EXIT_PRICE =  :d_exit_price,
                FSB_POTENTIAL = :d_potential,
                FSB_TIME_FRAME =  :l_time_frame,
                FSB_RISK_PROFILE = :c_risk_profile,
                FSB_SEGMENT = :c_segment,
                FSB_IND_STK_CALL = :c_indstk_call,
                FSB_REMARKS = :c_remarks,
                FSB_CALL_ACTION = :c_call_action,
                FSB_EXPTD_PRFT_PERLOT= :d_ex_pft_perlot*100 ,  
                FSB_EXPTD_LOSS_PERLOT= :d_ex_los_perlot*100 , 
								FSB_TOTAL_MARGIN = :d_total_mrgn,
								FSB_LST_MODIFIED_DT = SYSDATE,
								FSB_LST_MODIFIED_BY = :st_usr_prfl.c_user_id,
								FSB_CALL_DATE = DECODE(FSB_CALL_ACTION,:c_call_action,FSB_CALL_DATE,SYSDATE)  /** Added by ravindra **/
            WHERE
            FSB_PRTFL_ID = :c_prtflo_id;

            if (SQLCODE != 0)
            {
                fn_errlog(c_ServiceName, "S31170", SQLMSG, c_err_msg);
                fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            }
						
						if(DEBUG_MSG_LVL_3)
              fn_userlog( c_ServiceName, "c_remarks before setnull  	    *****  :%s:", c_remarks   );
            
					  MEMSET(c_remarks);/** make remarks string empty **/
					
						if(DEBUG_MSG_LVL_3)
							fn_userlog( c_ServiceName, "c_remarks after setnull  	    *****  :%s:", c_remarks   );
            i_tot_cat_rec = Foccur32((FBFR32 * ) ptr_fml_Ibuf, FFO_NARRATION_ID);

						for (i_reccount = 0; i_reccount < i_tot_cat_rec;i_reccount++)
            {
                 i_err[27] = Fget32(ptr_fml_Ibuf, FFO_NARRATION_ID,i_reccount , (char * ) c_cat_id, 0);
                 i_ferr[27] = Ferror32;

                 if (i_err[27] == -1)
                 {
                      fn_errlog(c_ServiceName, "S31175", Fstrerror32(i_ferr[i_cnt]), c_err_msg);
                      fn_userlog(c_ServiceName, "Unable to category id fget :%d:", i_cnt);
                      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                      tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
                  }

								if( i_reccount == 0)
								{
					      		EXEC SQL
      		      		DELETE FROM FCM_FO1CLICK_CTGRT_MSTR
  		          		WHERE FCM_PRTFL_ID = :c_prtflo_id;

            				if (SQLCODE != 0 && ( SQLCODE != NO_DATA_FOUND ))
           	 				{
                				fn_errlog(c_ServiceName, "S31180", SQLMSG, c_err_msg);
                				fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                				Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                				tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            				}
								if(DEBUG_MSG_LVL_3)
            			fn_userlog(c_ServiceName, " ******************deleted************");
								}

								if(DEBUG_MSG_LVL_3)	
            			fn_userlog(c_ServiceName, " ******************before category insert************");
                i_returncode = fn_ins_cgm((char *)c_prtflo_id, c_cat_id);

                if (i_returncode == -1)
                {
                    fn_errlog(c_ServiceName, "S31185", SQLMSG, c_err_msg);
                    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                    tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
                }
            }

        }
        else
        {
						fn_userlog(c_ServiceName,"Checking session....");
            i_ch_val = fn_chk_sssn(c_ServiceName, &st_usr_prfl, &st_err_msg);

            if (i_ch_val == -1)
            {
                fn_errlog(c_ServiceName, "S31190", LIBMSG, st_err_msg.c_err_msg);
                fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            }

            /** insert into leg and bucket details**/

            i_err[11] = Fget32(ptr_fml_Ibuf,FFO_TRG_NM, 0, (char * )c_prtfl_name  , 0);
            i_ferr[11] = Ferror32;
            i_err[12] = Fget32(ptr_fml_Ibuf, FFO_PRDCT_DESC,0, (char * ) c_prtfl_desc , 0);
            i_ferr[12] = Ferror32;

            for (i_cnt = 11; i_cnt <= 12; i_cnt++)
            {
                if (i_err[i_cnt] == -1)
                {
                    fn_errlog(c_ServiceName, "S31195", Fstrerror32(i_ferr[i_cnt]), c_err_msg);
                    fn_userlog(c_ServiceName, "Unable to fget :%d:", i_cnt);
                    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                    tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
                }
            }

            rtrim(c_prtfl_name);
            rtrim(c_prtfl_desc);

						if(DEBUG_MSG_LVL_3)
						{
              fn_userlog( c_ServiceName, "Match account   	    *****  :%s:", st_usr_prfl.c_cln_mtch_accnt   );
              fn_userlog( c_ServiceName, "Portfolio id  	    *****  :%s:", c_prtflo_id   );
              fn_userlog( c_ServiceName, "Portfolio name  	    *****  :%s:", c_prtfl_name   );
              fn_userlog( c_ServiceName, "Portfolio desc  	    *****  :%s:", c_prtfl_desc   );
              fn_userlog( c_ServiceName, "Portfolio flag   	    *****  :%c:", c_cust_flg   );
						}

            EXEC SQL
            INSERT INTO FSB_FO1CLICK_STRTGY_BUCKTDTLS
                (
                    FSB_PRTFL_ID,
										FSB_PRTFL_NAME,
                    FSB_PRTFL_DESC,
										FSB_INS_BY_MATCH,
										FSB_INSERT_DT,
										FSB_INSERT_BY,
										FSB_CUST_RCMEND_FLG,
										FSB_STATUS
                )
                VALUES
                (
                  :c_prtflo_id,
									:c_prtfl_name,
                  :c_prtfl_desc,
                  :st_usr_prfl.c_cln_mtch_accnt,
									 SYSDATE,
									:st_usr_prfl.c_user_id,							
                  :c_cust_flg,
                  :c_a_status 
                );

            if (SQLCODE != 0)
            {
                fn_errlog(c_ServiceName, "S31200", SQLMSG, c_err_msg);
                fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            }
					  fn_userlog(c_ServiceName, "I request type successful FROM SITE");
            
        }/**when call is from site**/
				if(DEBUG_MSG_LVL_3)	  
					fn_userlog(c_ServiceName, "I request type successful");

            if (fn_committran(c_ServiceName, i_trnsctn, c_err_msg) == -1)
            {
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            }

            tpreturn(TPSUCCESS, SUCC_BFR, NULL, 0, 0);
    }/**insert request type**/
    if (c_rqst_type == 'U')   /** Request type for Update **/
    {

			if(DEBUG_MSG_LVL_3)
        fn_userlog(c_ServiceName, "Inside U request type");

        if(st_usr_prfl.l_session_id == 0)
        {
            i_err[0] = Fget32(ptr_fml_Ibuf, FFO_BP_ID, 0, (char * ) c_prtflo_id, 0);
            i_ferr[0] = Ferror32;
            i_err[1] = Fget32(ptr_fml_Ibuf, FFO_PLG_AMT,0 , (char * ) &d_trgt_prc, 0);
            i_ferr[1] = Ferror32;
            i_err[2] = Fget32(ptr_fml_Ibuf, FFO_FUT_PRC,0, (char * ) &d_sltp_prc, 0);
            i_ferr[2] = Ferror32;
            i_err[3] = Fget32(ptr_fml_Ibuf, FFO_AMOUNT,0, (char * ) &d_book_profit, 0);
            i_ferr[3] = Ferror32;
            i_err[4] = Fget32(ptr_fml_Ibuf, FFO_INIT_MRGN_PRCNT,0 , (char * ) &d_book_part_prft_perc, 0);
            i_ferr[4] = Ferror32;
            i_err[5] = Fget32(ptr_fml_Ibuf, FFO_EFF_CLS_PRC,0,  (char * ) &d_exit_price, 0);
            i_ferr[5] = Ferror32;
            i_err[6] = Fget32(ptr_fml_Ibuf, FFO_REMARKS,0, (char * ) c_remarks, 0);
            i_ferr[6] = Ferror32;

            for (i_cnt = 0; i_cnt < 7; i_cnt++)
            {
                if (i_err[i_cnt] == -1)
                {
                    fn_errlog(c_ServiceName, "S31205", Fstrerror32(i_ferr[i_cnt]), c_err_msg);
                    fn_userlog(c_ServiceName, "Unable to fget :%d:", i_cnt);
                    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                    tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
                }
            }


            i_trnsctn = fn_begintran(c_ServiceName, c_err_msg);

            if (i_trnsctn == -1)
            {
                fn_userlog(c_ServiceName, "Failed in initial begin transaction for daily loop");
                fn_errlog(c_ServiceName, "S31210", TPMSG, c_err_msg);
								tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            }
				    /*SETLEN(c_prtflo_id);*/	
						
						EXEC SQL
            UPDATE FSB_FO1CLICK_STRTGY_BUCKTDTLS
            SET
                FSB_TRGT_PRC =  :d_trgt_prc,
                FSB_SLTP_PRC =  :d_sltp_prc,
                FSB_BOOK_PROFIT = :d_book_profit,
                FSB_BOOK_PART_PROFT_PERC =  :d_book_part_prft_perc,
                FSB_EXIT_PRICE =  :d_exit_price,
								FSB_REMARKS = :c_remarks,
								FSB_LST_MODIFIED_DT = SYSDATE,
                FSB_LST_MODIFIED_BY = :st_usr_prfl.c_user_id
            WHERE
            FSB_PRTFL_ID =	:c_prtflo_id	;

       			 if (SQLCODE != 0)
      	  {
           		 fn_errlog(c_ServiceName, "S31215", SQLMSG, c_err_msg);
            		fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
            		Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            		tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
   		     }

					if(DEBUG_MSG_LVL_3)	
 		        fn_userlog(c_ServiceName, "U request type successful");

            if (fn_committran(c_ServiceName, i_trnsctn, c_err_msg) == -1)
            {
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            }

            tpreturn(TPSUCCESS, SUCC_BFR, NULL, 0, 0);
        }

    }/**update request type**/

    if (c_rqst_type == 'D')  /** Request type for Leg Delete **/
    {
			if(DEBUG_MSG_LVL_3)
        fn_userlog(c_ServiceName, "Inside D request type");

        if(st_usr_prfl.l_session_id != 0)
        {   i_ch_val = fn_chk_sssn(c_ServiceName, &st_usr_prfl, &st_err_msg);

            if (i_ch_val == -1)
            {
                fn_errlog(c_ServiceName, "S31220", LIBMSG, st_err_msg.c_err_msg);
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            }
        }

        i_trnsctn = fn_begintran(c_ServiceName, c_err_msg);

        if (i_trnsctn == -1)
        {
            fn_userlog(c_ServiceName, "Failed in initial begin transaction for daily loop");
            fn_errlog(c_ServiceName, "S31225", TPMSG, c_err_msg);
            tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0); 
        }

        i_err[0] = Fget32(ptr_fml_Ibuf, FFO_XCHNG_CD, 0, (char * ) c_xchng_cd, 0);
        i_ferr[0] = Ferror32;
        i_err[1] = Fget32(ptr_fml_Ibuf, FFO_UNDRLYNG,0 , (char * ) c_undrlyng, 0);
        i_ferr[1] = Ferror32;
        i_err[2] = Fget32(ptr_fml_Ibuf, FFO_PRDCT_TYP,0 , (char * ) &c_prdct_typ, 0);
        i_ferr[2] = Ferror32;
        i_err[3] = Fget32(ptr_fml_Ibuf, FFO_EXPRY_DT,0, (char * ) c_expry_dt, 0);
        i_ferr[3] = Ferror32;
        i_err[4] = Fget32(ptr_fml_Ibuf, FFO_OPT_TYP,0 , (char * ) &c_opt_typ, 0);
        i_ferr[4] = Ferror32;
        i_err[5] = Fget32(ptr_fml_Ibuf, FFO_STRK_PRC,0 , (char * ) &l_strk_prc, 0);
        i_ferr[5] = Ferror32;
        i_err[6] = Fget32(ptr_fml_Ibuf, FFO_CTGRY_INDSTK,0, (char * ) &c_indstk, 0);
        i_ferr[6] = Ferror32;
        i_err[7] = Fget32(ptr_fml_Ibuf, FFO_BP_ID, 0, (char * )c_prtflo_id, 0);
        i_ferr[7] = Ferror32;

        for (i_cnt = 0; i_cnt < 8; i_cnt++)
        {
            if (i_err[i_cnt] == -1)
            {
                fn_errlog(c_ServiceName, "S31230", Fstrerror32(i_ferr[i_cnt]), c_err_msg);
                fn_userlog(c_ServiceName, "Unable to fget :%d:", i_cnt);
                fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            }
        }
				/*SETLEN(c_prtflo_id)*;*/
        rtrim(c_xchng_cd);
        rtrim(c_undrlyng);
        rtrim(c_prtflo_id);

              fn_userlog( c_ServiceName, "c_prtflo_id       *****  :%s:", c_prtflo_id  );
						if(DEBUG_MSG_LVL_3)
						{
              fn_userlog( c_ServiceName, "c_prtflo_id       *****  :%s:", c_prtflo_id  );
              fn_userlog( c_ServiceName, "c_xchng_cd        *****  :%s:", c_xchng_cd   );
              fn_userlog( c_ServiceName, "c_undrlyng        *****  :%s:", c_undrlyng  );
              fn_userlog( c_ServiceName, "c_prdct_typ       *****  :%c:", c_prdct_typ  );
              fn_userlog( c_ServiceName, "c_expry_dt        *****  :%s:", c_expry_dt  );
              fn_userlog( c_ServiceName, "c_opt_typ         *****  :%c:", c_opt_typ  );
              fn_userlog( c_ServiceName, "l_strk_prc        *****  :%ld:",l_strk_prc  );
              fn_userlog( c_ServiceName, "c_indstk          *****  :%c:",c_indstk  );
						}

				EXEC SQL
				UPDATE FSL_FO1CLICK_STRTGY_LEGDTLS
        SET FSL_STATUS = :c_d_status,
				FSL_LST_MODIFIED_DT = SYSDATE,
			  FSL_LST_MODIFIED_BY = :st_usr_prfl.c_user_id	
				WHERE
        FSL_XCHNG_CD = :c_xchng_cd
        AND FSL_UNDRLYNG = :c_undrlyng
        AND FSL_PRDCT_TYP = :c_prdct_typ
        AND FSL_EXPRY_DT = :c_expry_dt
        AND FSL_OPT_TYP = :c_opt_typ
        AND FSL_STRK_PRC = :l_strk_prc
        AND FSL_INDSTK = :c_indstk
        AND FSL_PRTFLO_ID  = :c_prtflo_id;

        if (SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S31235", SQLMSG, c_err_msg);
            fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
        }

				if(DEBUG_MSG_LVL_3)
        	fn_userlog(c_ServiceName, "D request type successful");
 
        if (fn_committran(c_ServiceName, i_trnsctn, c_err_msg) == -1)
        {
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
        }

        tpreturn(TPSUCCESS, SUCC_BFR, NULL, 0, 0);

    }/**leg delete request type**/

    if (c_rqst_type == 'S')  /** Request type for Single Leg Insert **/
    {
			if(DEBUG_MSG_LVL_3)	
        fn_userlog(c_ServiceName, "Inside S single leg request type");

        if ( st_usr_prfl.l_session_id != 0)
        {
            i_ch_val = fn_chk_sssn(c_ServiceName, &st_usr_prfl, &st_err_msg);

            if (i_ch_val == -1)
            {
                fn_errlog(c_ServiceName, "S31240", LIBMSG, st_err_msg.c_err_msg);
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            }

        }

        i_err[0] = Fget32(ptr_fml_Ibuf, FFO_XCHNG_CD, 0, (char * ) c_xchng_cd, 0);
        i_ferr[0] = Ferror32;
        i_err[1] = Fget32(ptr_fml_Ibuf, FFO_UNDRLYNG,0 , (char * ) c_undrlyng, 0);
        i_ferr[1] = Ferror32;
        i_err[2] = Fget32(ptr_fml_Ibuf, FFO_PRDCT_TYP,0 , (char * ) &c_prdct_typ, 0);
        i_ferr[2] = Ferror32;
        i_err[3] = Fget32(ptr_fml_Ibuf, FFO_EXPRY_DT,0, (char * ) c_expry_dt, 0);
        i_ferr[3] = Ferror32;
        i_err[4] = Fget32(ptr_fml_Ibuf, FFO_OPT_TYP,0 , (char * ) &c_opt_typ, 0);
        i_ferr[4] = Ferror32;
        i_err[5] = Fget32(ptr_fml_Ibuf, FFO_STRK_PRC,0 , (char * ) &l_strk_prc, 0);
        i_ferr[5] = Ferror32;
        i_err[6] = Fget32(ptr_fml_Ibuf, FFO_CTGRY_INDSTK,0 , (char * ) &c_indstk, 0);
        i_ferr[6] = Ferror32;
        i_err[7] = Fget32(ptr_fml_Ibuf, FFO_IP_VIEW_NM, 0, (char * ) c_view, 0);
        i_ferr[7] = Ferror32;
        i_err[8] = Fget32(ptr_fml_Ibuf, FFO_OI_LOW, 0, (char * )&d_rcmend_prc_frm , 0);
        i_ferr[8] = Ferror32;
        i_err[9] = Fget32(ptr_fml_Ibuf, FFO_OI_HIGH, 0, (char * )&d_rcmend_prc_to , 0);
        i_ferr[9] = Ferror32;
        i_err[10] = Fget32(ptr_fml_Ibuf, FFO_ORDR_FLW, 0, (char * )&c_action, 0);
        i_ferr[10] = Ferror32;
        i_err[11] = Fget32(ptr_fml_Ibuf, FFO_BP_ID,0, (char * )c_prtflo_id, 0);
        i_ferr[11] = Ferror32;

        for (i_cnt = 0; i_cnt < 12 ; i_cnt++)
        {
            if (i_err[i_cnt] == -1)
            {
                fn_errlog(c_ServiceName, "S31245", Fstrerror32(i_ferr[i_cnt]), c_err_msg);
                fn_userlog(c_ServiceName, "Unable to fget :%d:", i_cnt);
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            }
        }

        rtrim(c_xchng_cd);
        rtrim(c_undrlyng);
        rtrim(c_view);
        rtrim(c_prtflo_id);

        i_trnsctn = fn_begintran(c_ServiceName, c_err_msg);

        if (i_trnsctn == -1)
        {
            fn_userlog(c_ServiceName, "Failed in initial begin transaction for daily loop");
            fn_errlog(c_ServiceName, "S31250", TPMSG, c_err_msg);
						tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
        }
        EXEC SQL
        INSERT INTO FSL_FO1CLICK_STRTGY_LEGDTLS
            (
                FSL_PRTFLO_ID,
                FSL_XCHNG_CD,
                FSL_UNDRLYNG,
                FSL_PRDCT_TYP,
                FSL_EXPRY_DT,
                FSL_VIEW,
                FSL_OPT_TYP,
                FSL_STRK_PRC,
                FSL_ACTION,
								FSL_INSERT_DT,
                FSL_RCMEND_PRC_FRM,
                FSL_RCMEND_PRC_TO,
								FSL_STATUS
            )
        VALUES
            (
                :c_prtflo_id,
                :c_xchng_cd,
                :c_undrlyng,
                :c_prdct_typ,
                :c_expry_dt,
                :c_view,
                :c_opt_typ,
                :l_strk_prc,
                :c_action,
								 SYSDATE,

                :d_rcmend_prc_frm,
                :d_rcmend_prc_to,
								:c_a_status
            );

        if (SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S31255", SQLMSG, c_err_msg);
            fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
        }
       
				if(DEBUG_MSG_LVL_3) 
       		fn_userlog(c_ServiceName, "S request type successful");

        if (fn_committran(c_ServiceName, i_trnsctn, c_err_msg) == -1)
        {
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
        }
            tpreturn(TPSUCCESS, SUCC_BFR, NULL, 0, 0);

    }/**single leg insert request type**/
    if (c_rqst_type == 'R')  /** Request type for Strategy delete **/ 
    {
			if(DEBUG_MSG_LVL_3)
        fn_userlog(c_ServiceName, "Inside R request type");

        if(st_usr_prfl.l_session_id != 0)
        {
        		fn_userlog(c_ServiceName, "Session id is not 0. Need session id 0");
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0); 
				} 

        i_trnsctn = fn_begintran(c_ServiceName, c_err_msg);

        if (i_trnsctn == -1)
        {
            fn_userlog(c_ServiceName, "Failed in initial begin transaction for daily loop");
            fn_errlog(c_ServiceName, "S31260", TPMSG, c_err_msg);
						tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
        }

        i_err[0] = Fget32(ptr_fml_Ibuf, FFO_BP_ID, 0, (char * )c_prtflo_id, 0);
        i_ferr[0] = Ferror32;

            if (i_err[0] == -1)
            {
                fn_errlog(c_ServiceName, "S31265", Fstrerror32(i_ferr[0]), c_err_msg);
                fn_userlog(c_ServiceName, "Unable to fget :%d:", i_cnt);
                fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
            }
        /*SETLEN(c_prtflo_id)*;*/
        rtrim(c_prtflo_id);
						if(DEBUG_MSG_LVL_3)
              fn_userlog( c_ServiceName, "c_prtflo_id       *****  :%s:", c_prtflo_id  );
        
				EXEC SQL
        UPDATE FSB_FO1CLICK_STRTGY_BUCKTDTLS
    		SET
    		FSB_STATUS=:c_d_status
    		WHERE FSB_PRTFL_ID=:c_prtflo_id;
        
        if (SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S31270", SQLMSG, c_err_msg);
            fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
        }

				if(DEBUG_MSG_LVL_3)
        	fn_userlog(c_ServiceName, "R request type successful");

        if (fn_committran(c_ServiceName, i_trnsctn, c_err_msg) == -1)
        {
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
        }

        tpreturn(TPSUCCESS, SUCC_BFR, NULL, 0, 0);

    }/**strategy delete request type**/

		 /*** Additional request type E and F introduced in Ver 1.1 ***/

    if (c_rqst_type == 'E')  /** Request type for Multiple Strategy delete **/
    {
      i_tot_rec = 0;

      if(DEBUG_MSG_LVL_3)
        fn_userlog(c_ServiceName, "Inside E request type for multiple STRATEGY DELETION");

      if(st_usr_prfl.l_session_id != 0)
      {
          fn_userlog(c_ServiceName, "Session id is not 0. Need session id 0");
          Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
          tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
      }

      i_tot_rec = Foccur32((FBFR32 * ) ptr_fml_Ibuf, FFO_BP_ID);

        fn_userlog(c_ServiceName, "i_tot_rec is :%d:", i_tot_rec);
      if(DEBUG_MSG_LVL_3)
        fn_userlog(c_ServiceName, "i_tot_rec is :%d:", i_tot_rec);

      i_trnsctn = fn_begintran(c_ServiceName, c_err_msg);

      if (i_trnsctn == -1)
      {
          fn_userlog(c_ServiceName, "Failed in initial begin transaction ");
          fn_errlog(c_ServiceName, "S31275", TPMSG, c_err_msg);
          tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
      }
      for ( i =0 ; i < i_tot_rec ; i++ )
      {
        i_err[0] = Fget32(ptr_fml_Ibuf, FFO_BP_ID, i, (char * )c_prtflo_id, 0);
        i_ferr[0] = Ferror32;

        if (i_err[0] == -1)
        {
           fn_errlog(c_ServiceName, "S31280", Fstrerror32(i_ferr[0]), c_err_msg);
           fn_userlog(c_ServiceName, "Unable to fget :%d:", i_cnt);
           fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
           Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
           tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
        }
        rtrim(c_prtflo_id);
         fn_userlog( c_ServiceName, "c_prtflo_id       *****  :%s:", c_prtflo_id  );
        if(DEBUG_MSG_LVL_3)
         fn_userlog( c_ServiceName, "c_prtflo_id       *****  :%s:", c_prtflo_id  );

        EXEC SQL
        UPDATE FSB_FO1CLICK_STRTGY_BUCKTDTLS
        SET
        FSB_STATUS=:c_d_status
        WHERE FSB_PRTFL_ID=:c_prtflo_id;

        if (SQLCODE != 0)
        {
            fn_errlog(c_ServiceName, "S31285", SQLMSG, c_err_msg);
            fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
        }
        if(DEBUG_MSG_LVL_3)
          fn_userlog(c_ServiceName, "E request type successful");
     }

      if (fn_committran(c_ServiceName, i_trnsctn, c_err_msg) == -1)
      {
          Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
          tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
      }
   }/** Multiple strategy delete request type ands here **/

		if (c_rqst_type == 'F')  /** Request type for Multiple Strategy Unlaunch **/
    {
      i_tot_rec = 0;

      if(DEBUG_MSG_LVL_3)
        fn_userlog(c_ServiceName, "Inside E request type for multiple STRATEGY DELETION");

      if(st_usr_prfl.l_session_id != 0)
      {
        fn_userlog(c_ServiceName, "Session id is not 0. Need session id 0");
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
        tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
      }

      i_tot_rec = Foccur32((FBFR32 * ) ptr_fml_Ibuf, FFO_BP_ID);

        fn_userlog(c_ServiceName, "total number of strategies to be unlaunched is :%d:", i_tot_rec);
      if(DEBUG_MSG_LVL_3)
        fn_userlog(c_ServiceName, "total number of strategies to be unlaunched is :%d:", i_tot_rec);

      i_trnsctn = fn_begintran(c_ServiceName, c_err_msg);

      if (i_trnsctn == -1)
      {
        fn_userlog(c_ServiceName, "Failed in initial begin transaction for daily loop");
        fn_errlog(c_ServiceName, "S31290", TPMSG, c_err_msg);
        tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
      }
       for ( i =0 ; i < i_tot_rec ; i++ )
      {
        i_err[0] = Fget32(ptr_fml_Ibuf, FFO_BP_ID, i, (char * )c_prtflo_id, 0);
        i_ferr[0] = Ferror32;
        i_err[1] = Fget32(ptr_fml_Ibuf, FFO_EXRC_RQST_TYP, i, (char * )&c_fbs_strtgy_launch, 0);
        i_ferr[1] = Ferror32;

        for ( j = 0; j < 2; j++ )
        {
          if (i_err[j] == -1)
          {
                fn_errlog(c_ServiceName, "S31295", Fstrerror32(i_ferr[j]), c_err_msg);
                fn_userlog(c_ServiceName, "Unable to fget :%d:", j);
                fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
                Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
                tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
          }
        }

        rtrim(c_prtflo_id);
          fn_userlog( c_ServiceName, "c_prtflo_id       *****  :%s:", c_prtflo_id  );
          fn_userlog( c_ServiceName, "c_fbs_strtgy_launch *****  :%c:", c_fbs_strtgy_launch);
        if(DEBUG_MSG_LVL_3)
          fn_userlog( c_ServiceName, "c_prtflo_id       *****  :%s:", c_prtflo_id  );

        EXEC SQL
        UPDATE FSB_FO1CLICK_STRTGY_BUCKTDTLS
        SET
        FSB_STRTGY_LAUNCH = :c_fbs_strtgy_launch
        WHERE FSB_PRTFL_ID = :c_prtflo_id;
         
        if (SQLCODE != 0)
        {
          fn_errlog(c_ServiceName, "S31300", SQLMSG, c_err_msg);
          fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
          Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
          tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
        }
        if(DEBUG_MSG_LVL_3)
          fn_userlog(c_ServiceName, "F request type successful");
      }

      if (fn_committran(c_ServiceName, i_trnsctn, c_err_msg) == -1)
      {
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
        tpreturn(TPFAIL, ERR_BFR, (char * ) ptr_fml_Ibuf, 0, 0);
      }

    }/** Multiple strategy Unlaunch request type ands here **/

    /*** Ver 1.1 ends here ***/

            tpreturn(TPSUCCESS, SUCC_BFR, NULL, 0, 0);
}


int fn_ins_cgm(char *c_prtflo_id, char *c_mail_cat_id) {

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName, "Inside fn_ins_cgm ....");
    	fn_userlog(c_ServiceName, " c_prtflo_id  - |%s|", c_prtflo_id);
    	fn_userlog(c_ServiceName, "c_mail_cat_id - |%s|", c_mail_cat_id);
		}

    EXEC SQL
    INSERT INTO FCM_FO1CLICK_CTGRT_MSTR
    (
            FCM_PRTFL_ID,
            FCM_MAIL_CAT_ID
    )
    VALUES
    (
            :c_prtflo_id,
            :c_mail_cat_id
     );

    if (SQLCODE != 0)
    {
        fn_errlog(c_ServiceName, "S31305", SQLMSG, c_err_msg);
        return -1;
    }
		if(DEBUG_MSG_LVL_3)
    	fn_userlog(c_ServiceName, "Inserted successfully in CGM");

    return 0;
}
