/******************************************************************************/
/*	Program	    			:	SFO_GT_OTPCALRC                                       */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                      FFO_UNDRLYNG                                          */
/*                                                                            */
/*  Output            : FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_STRK_PRC                                          */
/*                                                                            */
/*  Description       : To get the records for running the recalculation of   */
/*                      trigger price in case of options and pass it on to    */
/*                      the Calling batch program                             */
/*                                                                            */
/*  Log               : Ver 1.1 	IBM Migration	                              */
/*                                                                            */
/******************************************************************************/
/* 16-May-2002     Ver 1.0        Vinod Banjan      Release 1.0               */
/* 19-Dec-2007		 Ver 1.1				Sushil Sharma			IBM Migration							*/
/* 14-Jul-2009     Ver 1.2        Vidyayini Krish   CRCON31510_Trigger_prc    */ 
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */

#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fn_battmpt.h>
#include <fn_tuxlib.h>
#include <fn_log.h>							/*	Ver 1.1 : Added		*/
#include <fn_read_debug_lvl.h>  /*  Ver 1.1 : Added   */

void SFO_GT_OTPCALRC( TPSVCINFO *rqst )
{

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
	char c_rqst_typ; /* 1.2 */

  int i_returncode;

  EXEC SQL BEGIN DECLARE SECTION;
    char c_xchng_cd [ 4 ];
  	char c_undrlyng [ 256 ];
    char sql_clm_mtch_accnt [ 11 ];
    char sql_xchng_cd [ 4 ];
    char sql_prdct_typ;
    char sql_indstk;
    char sql_undrlyng [ 7 ];
    varchar sql_expry_dt [ LEN_DATE ];
    char sql_exer_typ;
    char sql_opt_typ;
    long sql_strk_prc;
		varchar select_stmt[500]; /* 1.2 */
  EXEC SQL END DECLARE SECTION;

  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.1 : Added   */

	memset( c_undrlyng,'\0',sizeof(c_undrlyng) );


	/* Ver 1.2 Increased number of FMLs from 2 to 3 */
  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                    c_err_msg,
                                    ptr_fml_Ibuf,
                                    3,
                                    FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                                    FFO_UNDRLYNG, ( char * )c_undrlyng, NULL,
																	  FFO_RQST_TYP, ( char * )&c_rqst_typ, NULL 
																		);

  if( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31005", LIBMSG , c_err_msg );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }

  if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.1 : Debug level Change  */
    fn_userlog( c_ServiceName, "c_xchng_cd :%s:", c_xchng_cd );
    fn_userlog( c_ServiceName, "c_undrlyng :%s:", c_undrlyng );
  }

	ptr_fml_Obuf = NULL;
	/* 1.2 Begins */ 

	if( c_rqst_typ == 'M' )
	{
		strcpy ((char *)select_stmt.arr,"SELECT fop_clm_mtch_accnt,fop_xchng_cd,fop_prdct_typ,fop_indstk,fop_undrlyng,to_char(fop_expry_dt,'DD-Mon-YYYY'),fop_exer_typ,fop_opt_typ,fop_strk_prc FROM fop_fo_options_pstn WHERE fop_xchng_cd = '");
		strcat((char *)select_stmt.arr, c_xchng_cd);
		strcat((char *)select_stmt.arr,"' AND     fop_undrlyng IN (");
		strcat((char *)select_stmt.arr,c_undrlyng);
		strcat((char *)select_stmt.arr,")");
		strcat((char *)select_stmt.arr," AND     fop_opnpstn_qty < 0 ORDER BY fop_clm_mtch_accnt asc");
	}
	else if( c_rqst_typ == 'S' )
	{
		strcpy ((char *)select_stmt.arr,"SELECT fop_clm_mtch_accnt,fop_xchng_cd,fop_prdct_typ,fop_indstk,fop_undrlyng,to_char(fop_expry_dt,'DD-Mon-YYYY'),fop_exer_typ,fop_opt_typ,fop_strk_prc FROM fop_fo_options_pstn WHERE fop_xchng_cd = '");
    strcat((char *)select_stmt.arr, c_xchng_cd);
		strcat((char *)select_stmt.arr,"' AND     fop_undrlyng = '");
		strcat((char *)select_stmt.arr,c_undrlyng);
    strcat((char *)select_stmt.arr,"' AND     fop_opnpstn_qty < 0 ORDER BY fop_clm_mtch_accnt asc");
	}
	else if( c_rqst_typ == 'A' )
  {
    strcpy ((char *)select_stmt.arr,"SELECT fop_clm_mtch_accnt,fop_xchng_cd,fop_prdct_typ,fop_indstk,fop_undrlyng,to_char(fop_expry_dt,'DD-Mon-YYYY'),fop_exer_typ,fop_opt_typ,fop_strk_prc FROM fop_fo_options_pstn WHERE fop_xchng_cd = '");
    strcat((char *)select_stmt.arr, c_xchng_cd);
    strcat((char *)select_stmt.arr,"' AND     fop_opnpstn_qty < 0 ORDER BY fop_clm_mtch_accnt asc");
  }
	else
	{
		fn_userlog( c_ServiceName,"Invalid request type" );
		strcpy( c_err_msg,"Invalid request type" );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	select_stmt.len = strlen((char *)select_stmt.arr);

	EXEC SQL PREPARE sql_stmt FROM :select_stmt;
  if(SQLCODE != 0)
  {
		fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	EXEC SQL DECLARE cur_recal_otp_rec CURSOR FOR sql_stmt;


	/* 1.2 Ends */

    EXEC SQL
      OPEN cur_recal_otp_rec;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    while(1)
    {
      EXEC SQL
        FETCH cur_recal_otp_rec
        INTO  :sql_clm_mtch_accnt,
              :sql_xchng_cd,
              :sql_prdct_typ,
              :sql_indstk,
              :sql_undrlyng,
              :sql_expry_dt,
              :sql_exer_typ,
							:sql_opt_typ,
							:sql_strk_prc;

        if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
        {
          fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg );
          EXEC SQL
            CLOSE cur_recal_otp_rec;
          tpfree ( ( char * ) ptr_fml_Obuf );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        if( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }

				SETNULL ( sql_expry_dt );
				rtrim(sql_undrlyng);
				rtrim(sql_clm_mtch_accnt);
				rtrim(sql_xchng_cd);

        i_returncode = fn_pack_vartofml( c_ServiceName,
                                         c_err_msg,
                                         &ptr_fml_Obuf,
                                         9,
                             FFO_EBA_MTCH_ACT_NO, ( char * )sql_clm_mtch_accnt,
                             FFO_XCHNG_CD, ( char * )sql_xchng_cd,
                             FFO_PRDCT_TYP, ( char * )&sql_prdct_typ,
                             FFO_CTGRY_INDSTK, ( char * )&sql_indstk,
                             FFO_UNDRLYNG, ( char * )sql_undrlyng,
                             FFO_EXPRY_DT, ( char * )sql_expry_dt.arr,
                             FFO_EXER_TYP, ( char * )&sql_exer_typ,
                             FFO_OPT_TYP, ( char * )&sql_opt_typ,
                             FFO_STRK_PRC, ( char * )&sql_strk_prc );

        if( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg );
          EXEC SQL
            CLOSE cur_recal_otp_rec;
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }
     }

    EXEC SQL
      CLOSE cur_recal_otp_rec;
  tpreturn(TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
}
