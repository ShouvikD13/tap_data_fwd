/******************************************************************************/
/*  Program           :     SFO_CLNT_DUMP                                     */
/*                                                                            */
/*  Input             :		FFO_REMARKS	- If operation type is 'D'    					*/ 
/*                        FFO_OPERATION_TYP - D (DUMP)                        */
/*																						R (REFRESH)                    	*/																						
/*  Output            :   FFO_REMARKS	- If operation type is 'R'							*/
/*																																					  */
/*  Description       :   A socket program to send client SQR OFF defaulters  */
/*                        to Front end Popup application.											*/
/*                                                                            */
/*                                                                            */
/*  Log               : 1.0   29-Dec-2011   Navina D.                         */
/*  Log               : TOL   07-Aug-2023   Agam                              */
/******************************************************************************/
/*  1.0  -  New release                                                       */
/******************************************************************************/

/**** C header ****/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <sqlca.h>

/**** Tuxedo header ****/
#include <atmi.h>
#include <fml32.h>
#include <Usysflds.h>
#include <fcntl.h>

/**** Application header ****/
#include <fo_fml_def.h>
#include <fo.h>
#include <fn_env.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <ud_sck.h>
#include <fn_read_debug_lvl.h>

#define  SET_KEEPALIVE   1
#define DUMP 'D'
#define REFRESH 'R'

extern int li_port;   /* long changed to int in Ver TOL */
extern char c_ip_addr[20];

int fn_crt_clnt_sck(char *c_ip_addr, int li_port, int *i_span_sck_id, char *c_ServiceName, char *c_err_msg); /* long changed to int in Ver TOL */
int fn_close_sck(int i_sck_id,char *c_ServiceName,char *c_err_msg);

void SFO_CLNT_DUMP(TPSVCINFO *ptr_st_ti_rqst)
{

  char c_ServiceName [ 33 ];
  char c_err_msg[ 256 ];
	int i_slen;
	int i_ch_val;
	int i_err[6];  
  int i_ferr[6];
	int i_popup_sck_id;
	char c_userid [ 9 ];
	long li_sssn_id;
	char c_xchng_cd [ 4 ];
	char c_opr_typ;
  char c_remarks[ 100 ];
	int i;
	int i_buf_len = 0;

 /**** Decalre input and output buffer ****/
  FBFR32 *ptr_fml_ibuf;
  FBFR32 *ptr_fml_obuf;

	EXEC SQL BEGIN DECLARE SECTION;
  sql_cursor     sys_cursor;             
  EXEC SQL END DECLARE SECTION;

  strcpy ( c_ServiceName, "SFO_CLNT_DUMP" );

	MEMSET(c_remarks);

  INITDBGLVL(c_ServiceName);

  /**** Read the input into a fml buffer ****/
  ptr_fml_ibuf = (FBFR32 *)ptr_st_ti_rqst->data;
  ptr_fml_obuf = (FBFR32*)NULL ;

 	ptr_fml_obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*100);
  if ( ptr_fml_obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31005", TPMSG, c_err_msg  );
    Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
  }

	i_err		[	0	]			=	Fget32( ptr_fml_ibuf ,FFO_USR_ID,0,(char *) c_userid,0);
	i_ferr	[	0	]			=	Ferror32;
	i_err		[	1	]			=	Fget32( ptr_fml_ibuf ,FFO_SSSN_ID,0,(char *) &li_sssn_id,0);
	i_ferr	[	1	]			=	Ferror32;
	i_err		[	2	]			=	Fget32( ptr_fml_ibuf ,FFO_XCHNG_CD,0,(char *) c_xchng_cd,0);
	i_ferr	[	3	]			=	Ferror32;
	i_err		[	4	]			=	Fget32( ptr_fml_ibuf ,FFO_OPERATION_TYP,0,(char *) &c_opr_typ,0);
	i_ferr	[	4	]			=	Ferror32;
	i_err		[	5	]			=	Fget32( ptr_fml_ibuf ,FFO_REMARKS,0,(char *) c_remarks,0);
	i_ferr	[	5	]			=	Ferror32;

	for ( i=0	;	i < 5 ;	i++ )
	{
		if ( (i_err[ i ] == -1 ) && (i_ferr[ i ]	!= FNOTPRES ) )
    {
    	fn_userlog( c_ServiceName, "Error in :%d:",i );
			tpfree((char *)ptr_fml_obuf);
     	fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
			Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }
	}
	
	/*** strcpy(c_remarks,"NFO|8500111444|NIFTY|Buy|50|26269.00|31269.00|6269.00|-20000.00|"); ****/

	i_slen = strlen(c_remarks);

	/****
	fn_userlog(c_ServiceName,"c_remarks:%s:",c_remarks);

	***************/

	fn_userlog(c_ServiceName,"Size of c_remarks is :%d:",i_slen);
	fn_userlog(c_ServiceName,"c_remarks is :%s:",c_remarks);
	fn_userlog(c_ServiceName,"c_opr_typ=:%c:",c_opr_typ);
	fn_userlog(c_ServiceName,"li_port=:%ld:",li_port);
	fn_userlog(c_ServiceName,"c_ip_addr=:%s:",c_ip_addr);

	if (c_opr_typ == DUMP)
	{
		fn_userlog(c_ServiceName,"INSIDE DUMP...");

		/*** creating client socket. ***/
		if(fn_crt_clnt_sck(c_ip_addr,
												 li_port,
												 &i_popup_sck_id,
												 c_ServiceName,
												 c_err_msg) == -1)
		{
			fn_errlog(c_ServiceName, "L31015", LIBMSG, c_err_msg);
			tpfree((char *)ptr_fml_obuf);
			Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
		}

		fn_userlog(c_ServiceName,"Client Socket created");
		fn_userlog(c_ServiceName,"socket ids: send:%d:",i_popup_sck_id);
		/*****************************************/

		i_ch_val = fn_send (i_popup_sck_id, (char*)&c_remarks,&i_slen);
		if(i_ch_val != 100)
		{
			fn_errlog( c_ServiceName, "S31015", LIBMSG, c_err_msg  );
			tpfree((char *)ptr_fml_obuf);
			Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
		}

		/*** Close the socket connection ***/    
		if( fn_close_sck(i_popup_sck_id,c_ServiceName,c_err_msg) == -1 )
		{
			fn_userlog(c_ServiceName,"Error in closing send socket");
			tpfree((char *)ptr_fml_obuf);
			fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg  );
			Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
		}
		/*****************************************/
	}
	else if (c_opr_typ == REFRESH)
	{
		fn_userlog(c_ServiceName,"INSIDE REFRESH...");

		EXEC SQL ALLOCATE :sys_cursor;
		EXEC SQL EXECUTE
		BEGIN
			OPEN :sys_cursor FOR
			SELECT	TMP_MESSAGE
			FROM		TMP_SQOFF_DEFAULTER
			WHERE 	TMP_XCHNG_CD = :c_xchng_cd
			AND			TMP_PROCESS_FLG ='N';
		END;
		END-EXEC;

	 	if ( SQLCODE != 0 )
		{
			EXEC SQL FREE :sys_cursor;
			tpfree((char *)ptr_fml_obuf);
			fn_errlog ( c_ServiceName, "S31025", SQLMSG, c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
		}

		i = 0;
		while ( 1 )
		{
			EXEC SQL 	FETCH   :sys_cursor
								INTO		:c_remarks;
			
			if ( SQLCODE != 0 )
		  {
				 if ( SQLCODE == NO_DATA_FOUND )
				 {
					break;
				 }
				
				 EXEC SQL CLOSE :sys_cursor;
				 EXEC SQL FREE :sys_cursor;
				 tpfree((char *)ptr_fml_obuf);
				 fn_errlog ( c_ServiceName, "S31030", SQLMSG, c_err_msg);
				 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
		  }
	
			fn_userlog(c_ServiceName,"c_remarks = :%s:",c_remarks);

			i_buf_len = sizeof(c_remarks);

			fn_userlog(c_ServiceName,"i_buf_len = :%d:",i_buf_len);
			fn_userlog(c_ServiceName,"Fneeded32= :%d: | Funused32 = :%d:",Fneeded32(1,i_buf_len),Funused32(ptr_fml_obuf));
	    
			/*if(Fneeded32(1,i_buf_len) > Funused32(ptr_fml_obuf))
			{
					fn_userlog(c_ServiceName,"Reallocate the output buffer");
					ptr_fml_obuf = (FBFR32 *)tprealloc((char *)ptr_fml_obuf, (Fsizeof32(ptr_fml_obuf) + MIN_FML_BUF_LEN));
					if(ptr_fml_obuf == NULL)
					{
						fn_errlog( c_ServiceName, "S31035", FMLMSG, c_err_msg  );
						EXEC SQL CLOSE :sys_cursor;
						EXEC SQL FREE :sys_cursor;
						tpfree ( ( char * ) ptr_fml_obuf );
						Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
					}
			}
			****/

			if ( Fadd32 (ptr_fml_obuf,FFO_REMARKS,(char *)c_remarks,i)  ==  -1 )
			{
				fn_errlog( c_ServiceName, "S31040", LIBMSG, c_err_msg  );
				EXEC SQL CLOSE :sys_cursor;
				EXEC SQL FREE :sys_cursor;
				tpfree ( ( char * ) ptr_fml_obuf );
				Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
			}
			i++;
		}
	  EXEC SQL CLOSE :sys_cursor;
	  EXEC SQL FREE :sys_cursor;
	}
	tpreturn(TPSUCCESS, 0, (char *)ptr_fml_obuf, 0, 0 );
}

/*****************************************************************************/
/*                                                                           */
/*  Description       :  Function to create the socket by reading he desired */
/*                       Inputs from the process space.                      */
/*                                                                           */
/*  Input Parameters  :  socket id.                                          */
/*                                                                           */
/*  Output Parameters :  Returns 0 upon creating the socket and -1 on failure*/
/*                                                                           */
/*****************************************************************************/
int fn_crt_clnt_sck(char *ptr_c_ip_addr,
                    int  i_port_no,
                    int  *ptr_i_sck_id,
                    char *c_ServiceName,
                    char *c_err_msg)
{
  int i_tmp_sck_id;
  int i_setval;

  socklen_t ud_optlen;

  struct sockaddr_in sck_in;

	fn_userlog(c_ServiceName,"Before fn_socket..");

  if(  fn_socket ( &i_tmp_sck_id, AF_INET, SOCK_STREAM, 0 ) == -1 )
  {
    fn_errlog(c_ServiceName, "L31115", UNXMSG, c_err_msg);
    return -1;
  }

	fn_userlog(c_ServiceName,"Before fn_connect..");

  if( fn_connect ( i_tmp_sck_id, AF_INET, ptr_c_ip_addr, i_port_no ) == -1 )
  {
    fn_errlog(c_ServiceName, "L31115", UNXMSG, c_err_msg);
    return -1;
  }
	fn_userlog(c_ServiceName,"After fn_connect..");

 *ptr_i_sck_id = i_tmp_sck_id;

  return 0;

}


int fn_close_sck(int i_sck_id,char *c_ServiceName,char *c_err_msg)
{
  if(close(i_sck_id) == -1)
  {
    fn_errlog(c_ServiceName, "L31065", UNXMSG,c_err_msg);
    return -1;
  }
  return 0;
}
