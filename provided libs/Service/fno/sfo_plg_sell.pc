/******************************************************************************************
Service Name 					: SFO_PLG_SELL

Description						: Allows a DT user to place a sell order

Log										: 08/10/2004	1.0 Release ICICI Infotech|Sangeet
												17/08/2005  1.1 Corporate action in Collateral 3i Infotech |Krishnan
												19/07/2006  1.2 Collateral DBC fix fir channel, Vikash|Vidya
												11/02/2008  1.3 Changes for IBM Vidyayini Krish
																		1.4	ESM series description(Description only added.Not changes)
																		1.5	Change in message tag for new order.(Description only added.Not changes) 
												20/05/2008	1.6	CRARP10522, Preventing the customer to place any Spot order
																				if there is any Withdrawal already placed. infotech|Shamili
												02-Sep-2009 1.7 CRCSN35839-Disable Spot in NSE and enable in BSE|Vidyayini Krish
												27-Nov-2009 1.8 CRCSN36358 BSE_IML/IOC changes (DSK)
												11-Mar-2011 1.9 Silverlight Changes -Added Alias Check and other checks (SwatiA.B)
												12-Aug-2011 2.0	Mobile App Changes - For source & channel (Navina D.)
						06-Jan-2012 2.1 EQ SAM changes for error message
												03-Jul-2013	2.2	Source flag for New DL .NET (Bhushan S)
												09-Jan-2013	2.3	Handling of Spot-Sell Order placment through new DL .NET
																			  (Source flag and channel set ) (Swati A.B )
												05-Jun-2014	2.4 FNO Common TNC Changes (Swati A.B)	
												26-Sep-2014	2.5 Changes for SAM block Unblock (Samip M)
						17-Nov-2015 2.6 Error message for incorrect nickname changed (Anand Dhopte) 
												12-Jan-2016 2.7 Core Changes(Kishor B)
												07-Jan-2016 VQC Version Quality Changes (Vishal B.)
												17-Nov-2017 2.8 Password field length changes (Sachin Birje)/ 
												30-Jan-2019 2.9 ESOP Funding (Samip M)/ 
						08-Jul-2020 3.0 CR_ISEC14_138293 Margin Pledge Model Changes (Anand Dhopte)  
						15-Sep-2020 3.1 CR-ISEC04-142511-Margin Pledge issue (samip M)
						26-Feb-2020 3.2 Common function introduced to get channel (Anand Dhopte)
						15-Jun-2021 3.3 ESOP MTM Automation ( Akash B )
												02-SEP-2022 3.4 CR-ISEC03-175064-ISI_discontinuation_and_Block_Mechanism_Phase1(Shweta M)
												25-Nov-2022	3.5		IN:609 eDIS mandate changes for Spot Sell on Trade racer (Vinod)
												29-01-2023	3.6		Disallow non-system requests for spot sell (Karthik Sujit)
												23-01-2023	3.7		Allow Spot sesll (Samip M)
                        04-Jul-2022 3.8   CR-ISEC04-170888 : Chola ESOP (Samip M)
                        03-May-2023 3.9   Disallow non-system requests for spot sell (Karthik Sujit)
                        11-May-2023 4.0   Reversing "Disallow non-system requests for spot sell" (Karthik Sujit)
												19-May-2023 4.1   Regulatory Survillance popup ( Ravi M)
												31-May-2023 4.2   Temp validation additon for MarketApp&SuperApp,Regulatory Survillance popup ( Ravi M)
******************************************************************************************/
#include <stdio.h>
#include <stdlib.h> /* Ver 1.3 */
#include <string.h>
#include <errno.h>
#include <sqlca.h>
#include <atmi.h>

/** Commented following unused header file in VQC **

#include <userlog.h> 

***/

#include <fml32.h>
#include <eba.h>
#include <fml_def.h>
#include <fo_fml_def.h>
#include <fn_log.h> /* Ver 1.3 */
#include <fml_rout.h> /* Ver 1.3 */
#include <fn_read_debug_lvl.h> /* Ver 1.3 */

#define TOTAL_FML	45


int 	fn_do_error(void);  /*  Ver 1.3 void added */   
 
long	l_retval = 0;       /** Initialised in Ver VQC **/  
varchar	c_errmsg[256];	  /** Variable type char changed to varchar in VQC **/

FBFR32 *ptr_fml_Ibuffer;
FBFR32 *ptr_fml_Obuffer;
FBFR32 *ptr_fml_Sbuffer;
FBFR32 *ptr_fml_Rbuffer;

void SFO_PLG_SELL(TPSVCINFO *rqst)
{
	EXEC SQL INCLUDE "table/ord_ordr_dtls.h";
	EXEC SQL INCLUDE "table/esm_xchng_sgmnt_mstr.h";/*1.4*/

	int i = 0;                    /** Initialised in Ver VQC **/
	int i_err[TOTAL_FML];
	int i_ferr[TOTAL_FML];
	int	i_xoa_typ = 0;					  /** Initialised in Ver VQC **/	
	int	i_no_isin = 0;						/** Initialised in Ver VQC **/	

	/*** Commented following unused variables in Ver VQC **	
	
	int i_order_exists = 0; 			** Ver 1.6 added **	
	int i_inorder_exists = 0; 	 	** Ver 1.6 added **	

	***/

	int i_level_exists = 0;       /** Ver 1.9 added **/

	char	c_Servicename[33];
	char	c_product_cd[10];
	/* char	c_msc_char ='P'; Ver 1.3 */
	char  c_msc_char[2];
  strcpy(c_msc_char,"P"); /*** Ver 2.9 ***/
  c_msc_char[1] = '\0';   /*** Ver 2.9 ***/  
	char	c_submit_ordr[15];
	char	c_place_ordr[15];
	char	c_acc_ref[40];
	char	c_acc_ref_ria[40];      /** Ver 1.9 added **/
	char	c_user_id[10];
	/***char	c_trd_psswd[10]; *** Ver 2.8 ***/
	char	c_trd_psswd[20];   /*** Ver 2.8 ***/
	char	c_alias[10];
	char	c_qt_tm[30];
	char	c_ord_tm[30];
	char	c_temp_msg_tag[15];
	char	c_tmp[5];
	char	c_channel_dt[10];
	char	c_stck_nm[50];
	char	c_channel[LEN_ORD_CHANNEL];
	char	c_py_in_date[LEN_ORD_ORDR_DT];
	char	c_py_out_date[LEN_ORD_ORDR_DT];
  char  c_cpi_dt[LEN_ORD_ORDR_DT];        /** Ver 3.8 **/ 

	/** Commented following unused variable in Ver VQC **

	char	c_btst_segment[LEN_ORD_XCHNG_SGMNT_CD];   

	***/

	char	c_match_accnt[LEN_ORD_CLM_MTCH_ACCNT];
	char	c_dp_id[LEN_ORD_DP_ID];
	char	c_dp_clnt_id[LEN_ORD_DP_CLNT_ID];
	char	c_isin_nmbr[LEN_ORD_ISIN_NMBR];
	char	c_sttl_end_dt[LEN_ORD_ISIN_NMBR];
	char	c_ord_ordr_rfrnc[LEN_ORD_ORDR_RFRNC];

	char	c_source='P';
	char	c_plg_flg = 'Y';
	char	c_trdng_psswrd_flg = 'Y';
	char	c_lm_flag = '\0';          /** Initialised in Ver VQC **/
	char  c_coll_spt_typ = '\0';			/** Added for Ver 2.9 **/
	char  c_esop_loan_ref[20] = {'\0'};	/** Added for Ver 2.9 **/
  char  c_eba_isin_flg = 'E';   /** Ver 3.8 **/
	

  char c_ven_id[10]="\0";     /* Ver 4.2 */
  char c_survmsg[500]="\0";     /* Ver 4.1 */
  char c_surv_flg='\0';        /* Ver 4.1 */

	/*** Commented following unused variable in Ver VQC **
 
	char	c_isin_flg = 'E';  

  ***/

	char	c_isin_input = 'Y';
	char	c_submit	= 'Y';
	char	c_exg_crrnt_stts = '\0';       /** Initialised in Ver VQC **/
	char	c_isin_valid = 'N';
	char  c_clnt_spt_flg = '\0';         /** Initialised in Ver VQC **/ 
	char  c_stk_plg_spt_flag = '\0';      /*V1.1*/    /** Initialised in Ver VQC **/
	char  c_pipe_id[2 + 1];         /* Ver 2.3 */
	char c_usr_fno_accpt_flg = '\0' ;   /*** Ver 2.4 ***/
  char c_dbd_plg_mode = '\0';         /*** Ver 3.0 ***/  
  char c_edis_flg; /*Ver 3.4*/

	char *null_ptr = 0;
	
	long	l_sssn_id = 0;        /** Initialised in Ver VQC **/
	long	l_retbuf = 0;         /** Initialised in Ver VQC **/   
	long	l_dscl_qty = 0;       /** Initialised in Ver VQC **/

	/*** Commented following unused variable in Ver VQC **
	long	li_cvr_qty;
	long	l_dp_acc;
	long	l_btst_sttlmnt;
  ***/

	long  l_message_tag = 0;             /** Initialised in Ver VQC **/

	/** Following variables commented in Ver VQC **  
 
	long  l_chk_cvrd_qty;
	long  l_chk_otp_qty;
	long  l_sbuflen;
	long  l_net_pledge_qty;

  ***/

	long l_conf_qty = 0; /** Ver 1.6 added **/
	long l_dbd_tifp_qty = 0; /** Ver 1.6 added **/

	/*** Following variables commented in Ver VQC **

	long l_sum_pod_ordr_qty = 0; ** Ver 1.6 added **
	long l_inv_req_qty = 0; ** Ver 1.6 added **      
	double	d_trgr_price;

	***/

	double	d_prot_perc = 0.0;            /** Initialised in Ver VQC **/
	double	d_quote=0;

	/*** Following variable commented in Ver VQC **

	double	d_chk_mrgn_amt;   
	
	***/

	double	d_dscl_qty = 0.0 ;            /** Initialised in Ver VQC **/
	double	d_mrgn_per=0;
	double	d_spot_brkrg_val=0;

  long l_pod_cnt = 0;  /*** Ver 3.0 ***/

  char c_sup_usr_typ = '\0'; /*** Ver 3.2 ***/

	FLDID32   fieldid[TOTAL_FML];

	strcpy(c_Servicename,"SFO_PLG_SELL");
	INITDBGLVL(c_Servicename);

	MEMSET(c_errmsg);        /** Added in Ver VQC as DataType of c_err_msg changed from char to varchar **/

	ptr_fml_Ibuffer	=	(FBFR32*)rqst->data;
	ptr_fml_Obuffer = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
	if(ptr_fml_Obuffer == NULL)
	{
	/**	errlog(c_Servicename,"S31005",TPMSG,(char*)DEF_USR,DEF_SSSN,c_errmsg);
		fn_do_error(); Commented in Ver 2.7 **/

	/*** Ver 2.7 Starts ***/
		fn_errlog( c_Servicename , "S31010", TPMSG, c_errmsg.arr  );
  	l_retval = -1;
  	Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
	/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
	Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
	}

	INIT(i_err,TOTAL_FML);
	INIT(i_ferr,TOTAL_FML);
	sql_ord_ordr_qty =0;
	MEMSET(sql_ord_isin_nmbr);
	/************* Get Input parameters ********/
	i_err[0] = Fget32(ptr_fml_Ibuffer,FML_MATCH_ACCNT , 0, (char *)c_acc_ref, 0);
	i_err[1] = Fget32(ptr_fml_Ibuffer,FML_VALID_FLAG , 0, (char *)&c_source, 0);
	i_err[2] = Fget32(ptr_fml_Ibuffer,FML_USR_ID, 0, (char *)c_user_id, 0);
	i_err[3] = Fget32(ptr_fml_Ibuffer,FML_SSSN_ID, 0, (char *)&l_sssn_id, 0);
	i_err[4] = Fget32(ptr_fml_Ibuffer,FML_XCHNG_CD, 0, (char *)sql_ord_xchng_cd, 0);
	i_err[5] = Fget32(ptr_fml_Ibuffer,FML_STCK_CD, 0, (char *)sql_ord_stck_cd, 0);
	i_err[6] = Fget32(ptr_fml_Ibuffer,FML_QTY, 0, (char *)&sql_ord_ordr_qty, 0);
	i_err[7] = Fget32(ptr_fml_Ibuffer,FML_LM_RT , 0, (char *)&sql_ord_lmt_rt, 0);
	i_err[8] = Fget32(ptr_fml_Ibuffer,FML_TRNSCTN_FLW, 0, (char *)&sql_ord_ordr_flw, 0);
	i_err[9] = Fget32(ptr_fml_Ibuffer,FML_FML_NAME , 0, (char *)c_product_cd, 0);
	i_err[10]= Fget32(ptr_fml_Ibuffer,FML_LM_FLG, 0, (char *)&c_lm_flag, 0);
	i_err[11]= Fget32(ptr_fml_Ibuffer,FML_ORD_TRD_DT, 0, (char *)sql_ord_trd_dt.arr, 0);
	/******* Optional parameters ***************/
	if(c_user_id[0] == BPID)
	{
		i_err[13]= Fget32(ptr_fml_Ibuffer,FML_UGR_USR_ALIAS, 0, (char *)c_alias, 0);
	}
	i_err[19]= Fget32(ptr_fml_Ibuffer,FML_ORD_STP_LSS , 0, (char *)&sql_ord_stp_lss_tgr, 0);
	i_ferr[19] = Ferror32;
	i_err[20]= Fget32(ptr_fml_Ibuffer,FML_ORD_DSCLSD_QTY, 0, (char *)&l_dscl_qty, 0);
	i_ferr[20] = Ferror32;
	i_err[21]= Fget32(ptr_fml_Ibuffer,FML_RT , 0, (char *)&d_prot_perc, 0);
	i_ferr[21] = Ferror32;
	i_err[22]= Fget32(ptr_fml_Ibuffer,FML_RQST_TYP, 0, (char *)&sql_ord_ipo_flg, 0);
	i_ferr[22] = Ferror32;
	i_err[23]= Fget32(ptr_fml_Ibuffer,FML_ISIN_NMBR, 0, (char *)sql_ord_isin_nmbr, 0);
	i_ferr[23] = Ferror32;
	i_err[24]= Fget32(ptr_fml_Ibuffer,FML_TRADING_PASSWD, 0, (char *)c_trd_psswd, 0);
	i_ferr[24] = Ferror32;
	/*Added in Ver 1.3*/
	i_err[25]= Fget32(ptr_fml_Ibuffer, FML_ORD_ORDR_RFRNC, 0, (char *)c_ord_ordr_rfrnc, 0);
	i_ferr[25] = Ferror32;
	i_err[26]= Fget32(ptr_fml_Ibuffer, FML_POINT_TYPE, 0, (char *)&sql_ord_ordr_typ, 0);   /* ver 1.8 */
	i_ferr[26] = Ferror32;
	/** Added for Ver 2.9 **/
	i_err[27]= Fget32(ptr_fml_Ibuffer, FML_MSG_TYP, 0, (char *)&c_coll_spt_typ, 0);
	i_ferr[27] = Ferror32;
	i_err[28]= Fget32(ptr_fml_Ibuffer, FML_CLIENT_TITLE, 0, (char *)c_esop_loan_ref, 0);
	i_ferr[28] = Ferror32;
	/** End for Ver 2.9 **/

	for( i = 0 ; i <= 18 ; i++ )
	{
		if(i_err[i] == -1)
		{
			fn_userlog(c_Servicename,"value of i is :%d:",i);

		/**	errlog(c_Servicename,"S31015",FMLMSG,(char*)c_user_id,l_sssn_id,c_errmsg);
			fn_do_error(); Commented in Ver 2.7 **/

		/*** Ver 2.7 Starts ***/
			fn_errlog( c_Servicename , "S31020", FMLMSG, c_errmsg.arr  );
  		l_retval = -1;
	  /** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
  		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
	  Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
	  tpfree ( ( char * )ptr_fml_Obuffer);
	  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
		}
	}
	for( i = 19 ; i <= 28 ; i++ )    /* ver 1.8  max loop value changed from 25 to 26 */ /** Changed to 28 for Ver 2.9 **/
	{
		if( i_err[i] == -1 && i_ferr[i] != FNOTPRES )
		{
			fn_userlog(c_Servicename,"value of i is :%d:",i);

			/** errlog(c_Servicename,"S31025",FMLMSG,(char*)c_user_id,l_sssn_id,c_errmsg);
			 fn_do_error(); Commented in Ver 2.7 **/

		/*** Ver 2.7 Starts ***/
	  fn_errlog( c_Servicename , "S31030", FMLMSG, c_errmsg.arr  );
  		l_retval = -1;
	  /** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
  		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
	  Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
	  tpfree ( ( char * )ptr_fml_Obuffer);
	  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
		}
	}

  /*** Ver 2.4 starts here ****/
  if( c_user_id[0] != BPID && ( strcmp(c_user_id,"system") != 0 ))
  {

		 if(DEBUG_MSG_LVL_0) 				/** Added in VQC **/
		 {	
	 	 fn_userlog(c_Servicename,"c_user_id :%s:",c_user_id);
	 }

	 c_usr_fno_accpt_flg='\0';

	 EXEC SQL
	 SELECT  USR_FNO_ACCPT_FLG
	   INTO  :c_usr_fno_accpt_flg
	   FROM  USR_USER_MASTER
	   WHERE USR_USR_ID  = :c_user_id;

	 if ( SQLCODE != 0 )
	 {
		fn_errlog( c_Servicename , "S31035", TPMSG, c_errmsg.arr  );
		/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
	  	Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
				tpfree ( ( char * )ptr_fml_Obuffer);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
	 }

		 if(DEBUG_MSG_LVL_0)        /** Added in VQC **/
	 {
	 	 fn_userlog(c_Servicename," c_usr_fno_accpt_flg :%c:",c_usr_fno_accpt_flg);
		 }

	 if( c_usr_fno_accpt_flg != 'Y' )
	 {
		fn_errlog( c_Servicename , "B31017",DEFMSG,c_errmsg.arr);
	   /** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
  			Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
				tpfree ( ( char * )ptr_fml_Obuffer);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
	 }
   }

  /*** Ver 2.4 Ends Here ****/	


	/** Ver 1.9 starts **/
	
	i_level_exists = 0;
	
	if(c_user_id[0] == BPID)
  {
		if(DEBUG_MSG_LVL_3)
		{
  	fn_userlog(c_Servicename,"value of c_acc_ref is :%s:",c_acc_ref);	
  	fn_userlog(c_Servicename,"value of c_user_id  is :%s:",c_user_id);	
  	fn_userlog(c_Servicename,"value of c_alias  is :%s:",c_alias);
		}
	
		/********* Get the Match  Account *********************/
		strcpy(c_acc_ref_ria,c_acc_ref);
	strcpy(c_dp_id,strtok(c_acc_ref_ria,"-"));
	strcpy(c_dp_clnt_id,strtok(null_ptr,"-"));
	strcpy(c_match_accnt,strtok(null_ptr,"-"));
	
  	
		EXEC SQL
	SELECT 1
	INTO   :i_level_exists
	FROM   clm_clnt_mstr
	WHERE  clm_mtch_accnt = :c_match_accnt
	AND    clm_bp_id      = :c_user_id
	AND    clm_alias_name = :c_alias;

   if(( SQLCODE !=0 ) && (SQLCODE != NO_DATA_FOUND))
	{  
	  fn_errlog( c_Servicename, "S31040", SQLMSG, c_errmsg.arr);
	 /**  Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
			tpfree ( ( char * )ptr_fml_Obuffer);
	  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
	}

	if(SQLCODE == NO_DATA_FOUND)
	{
	  strcpy((char *)c_errmsg.arr,"Nick Name is incorrect");
	  fn_userlog(c_Servicename,"%s",c_errmsg.arr);
	 /* sprintf(c_errmsg,"Please enter correct alias.");      *** commented in Ver 2.6 ***/
	  sprintf(c_errmsg.arr,"Please enter correct Nick Name.");    /*** Ver 2.6 ***/   
			/** fn_do_error(); **/			/** Ver 2.7 **/
		/*** Ver 2.7 Starts ***/
				l_retval = -1;
		/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
	  	Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
	}
		
		 if(i_level_exists != 1 )
	{
	  fn_errlog( c_Servicename, "B55006", DEFMSG, c_errmsg.arr  );	/*** Ver 2.7 DEFMSG added ***/
	  /** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 );  Commented for ** 2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
	  tpfree ( ( char * )ptr_fml_Obuffer);
	  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
	}
	

   }

	/** Ver 1.9 ends **/

	if(i_err[19] == -1 && i_ferr[19] == FNOTPRES) sql_ord_stp_lss_tgr = 0;
	if(i_err[20] == -1 && i_ferr[20] == FNOTPRES) l_dscl_qty = 0;
	if(i_err[21] == -1 && i_ferr[21] == FNOTPRES) d_prot_perc = 0;
	if(i_err[22] == -1 && i_ferr[22] == FNOTPRES) sql_ord_ipo_flg = 'X';
	if(i_err[23] == -1 && i_ferr[23] == FNOTPRES) c_isin_input = 'N';
	if(i_err[24] == -1 && i_ferr[24] == FNOTPRES) 
	{
		c_trd_psswd[0] = '\0';
		c_trdng_psswrd_flg = 'N'; }
	if(i_err[25] == -1 && i_ferr[25] == FNOTPRES) c_ord_ordr_rfrnc[0] = 0; /*Ver 1.3*/
	if(i_err[26] == -1 && i_ferr[26] == FNOTPRES) sql_ord_ordr_typ = GOOD_TILL_TODAY ; /* ver 1.8 */
		fn_userlog(c_Servicename,"Value of i :%d:",i);
	if(i_err[27] == -1 && i_ferr[27] == FNOTPRES) /** Ver 2.9 **/
	{
		fn_userlog(c_Servicename,"Inside FNOTPRESS");
		c_coll_spt_typ = 'S';	/** Ver 2.9 : S for SAM Spot Sell, E for ESOP Spot Sell **/
	}
	if(i_err[28] == -1 && i_ferr[28] == FNOTPRES) c_esop_loan_ref[0] = '\0';	/** Ver 2.9 : Null for Collateral Sell **/

	SETLEN(sql_ord_trd_dt);
	INIT(i_err,TOTAL_FML);
  rtrim(c_esop_loan_ref);  /*** Ver 3.3  ***/
  if(DEBUG_MSG_LVL_3){	
		fn_userlog(c_Servicename,"STAGE I STARTS");
		fn_userlog(c_Servicename,"Channel  :%c:",c_source);
		fn_userlog(c_Servicename,"Flow  :%c:",sql_ord_ordr_flw);
		fn_userlog(c_Servicename,"Match dp string  :%s:",c_acc_ref);
		fn_userlog(c_Servicename,"c_user_id  :%s:",c_user_id);
		fn_userlog(c_Servicename,"l_sssn_id  :%ld:",l_sssn_id);
		fn_userlog(c_Servicename,"Exchange :%s: ",sql_ord_xchng_cd);
		fn_userlog(c_Servicename,"Stop loss trigger :%lf: ",sql_ord_stp_lss_tgr);
		fn_userlog(c_Servicename,"sql_ord_stck_cd :%s: ",sql_ord_stck_cd);
		fn_userlog(c_Servicename,"sql_ord_ordr_qty :%ld: ",sql_ord_ordr_qty);
		fn_userlog(c_Servicename,"sql_ord_lmt_rt  :%lf: ",sql_ord_lmt_rt);
		fn_userlog(c_Servicename,"sql_ord_ordr_flw :%c:",sql_ord_ordr_flw);
		fn_userlog(c_Servicename,"c_product_cd :%s:",c_product_cd);
		fn_userlog(c_Servicename,"c_lm_flag :%c:",c_lm_flag);
		fn_userlog(c_Servicename,"sql_ord_trd_dt :%s:",sql_ord_trd_dt.arr);
		fn_userlog(c_Servicename,"c_alias :%s:",c_alias);
		fn_userlog(c_Servicename,"l_dscl_qty  :%ld:",l_dscl_qty);
		fn_userlog(c_Servicename,"d_prot_perc :%lf:",d_prot_perc);
		fn_userlog(c_Servicename,"sql_ord_ipo_flg :%c:",sql_ord_ipo_flg);
		fn_userlog(c_Servicename,"sql_ord_isin_nmbr :%s:",sql_ord_isin_nmbr);
		fn_userlog(c_Servicename,"c_trd_psswd :%s:",c_trd_psswd);
		fn_userlog(c_Servicename,"FML_ORD_ORDR_RFRNC :%s:",c_ord_ordr_rfrnc);
		fn_userlog(c_Servicename,"FML_POINT_TYPE -> sql_ord_ordr_typ :%c:",sql_ord_ordr_typ);  /* ver 1.8 */
		fn_userlog(c_Servicename,"c_coll_spt_typ :%c:",c_coll_spt_typ);	/** Ver 2.9 **/
		fn_userlog(c_Servicename,"c_esop_loan_ref :%s:",c_esop_loan_ref);	/** Ver 2.9 **/
		fn_userlog(c_Servicename,"STAGE I ENDS");
	}

  /** Ver 3.6 starts ** *** Uncommented for Ver 3.7 ** ** Ver 3.9 Restored sell request blocking ** ** Ver 4.0 restored spot sell from all sources **
	if (c_source != 'S')
	{
		fn_userlog(c_Servicename, "c_source is :%c:",c_source);
    fn_errlog( c_Servicename , "S31045", "The functionality of selling shares through SPOT is temporarily disabled and will be enabled shortly.We regret the inconvenience caused.", c_errmsg.arr);
    strcpy(c_errmsg.arr,"The functionality of selling shares through SPOT is temporarily disabled and will be enabled shortly. Please unpledge the shares first and then place a Sell order once it reflects in your demat allocation. We regret the inconvenience caused.");
    l_retval = -1;
    Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
    Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
    tpfree ( ( char * )ptr_fml_Obuffer);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
	}

  ** Ver 4.0 Recommented c_source != 'S' block ** ** Restored line comment Ver 3.9 ** ** Ver 3.6 ends **/

	/*********** Set the Channel *******************/
	if(c_source == 'E')				/**Not in use presently because DL always sends P **/
	{
		strcpy(c_channel,"WVP");
	}
	else if(c_source == 'W')	/**Not in use presently because ASP always sends L **/
	{
		strcpy(c_channel,"WAP");
	}
	else if(c_source == 'A')	/**Not in use presently because Fast Buy sell not AVailable **/
	{
		strcpy(c_channel,"WE1");
	}
	/* else if(c_source == 'P' || c_source == 'L' || c_source =='S') */ /*** Ver 2.0 ***/
	/* else if(c_source == 'P'	|| c_source == 'L' || c_source =='S' || c_source =='M')*/ /* Ver 2.0 *//* Com In Ver 2.3 */
	else if(c_source == 'P'	|| c_source == 'L' || c_source =='S' || c_source =='M' || c_source == 'Y' || c_source == 'Z' ) 
																																														/*** Ver 2.3 ***/
	{
		if(c_source == 'P')
		{
			strcpy(c_channel,"WAP");           /* Thru collateral applet Sell */
		}
		else if(c_source == 'L')
		{
			strcpy(c_channel,"WWP");					 /* Thru collateral ASP Sell */
			c_source = 'P' ;
		}
		else if(c_source == 'S')
		{
			strcpy(c_channel,"SYS");					 /* Thru collateral ASP Sell */
			c_source = 'P' ;
		}
		/*** Start Ver 2.0 change ***/
		else if(c_source == 'M')
		{
			strcpy(c_channel,"WE6");					 /* Thru mobile app */
			c_source = 'P' ;
		}
		/*** End Ver 2.0 change ***/
		/*** Ver 2.3 Starts ***/
		else if (c_source == 'Y')       /*** For New Trade Racer ***/
  	{
		strcpy(c_channel,"NET");
			c_source = 'P' ;
  	}
  	else if (c_source == 'Z')       /*** For New Trade Racer by super user ***/
  	{
		strcpy(c_channel,"CN2");
			c_source = 'P' ;
  	}
		/*** Ver 2.3 Ends   ***/

		fn_userlog(c_Servicename,"THE CHANNEL SEND HERE IS :%s:",c_channel);

	/*** Ver 3.2 Starts ***/

	if( strcmp(c_channel,"SYS") != 0 ) /*** if user is not system ***/
	{
	 EXEC SQL
	   SELECT NVL(USM_SUP_USR_TYP,'*')
		 INTO :c_sup_usr_typ
		 FROM USM_SSSN_MNGR
		WHERE USM_USR_ID = :c_user_id
		  AND USM_SSSN_ID = :l_sssn_id  ;

	   if ( SQLCODE != 0 )
	   {

		l_retval = -1;
		fn_errlog( c_Servicename , "S31050", SQLMSG, c_errmsg.arr  );
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
		Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
	   }

	   fn_userlog(c_Servicename, "Super User Type is :%c:",c_sup_usr_typ);

	   fn_get_channel(c_sup_usr_typ, c_channel);
	}
   
	fn_userlog(c_Servicename, "Channel from fn_get_channel is :%s:",c_channel); 
  
	/*** Ver 3.2 Ends ***/

		/*********************** Himanshu Spot Sell ****************************/

		if(sql_ord_ordr_qty <= 0)
		{
			strcpy(c_errmsg.arr,"Please Enter the Valid Order Quantity");
			fn_userlog(c_Servicename,c_errmsg.arr);
		}

		EXEC SQL
	SELECT PPP_CLNT_SPT_FLG
	INTO   :c_clnt_spt_flg
	FROM PPP_PAR_PLG_PRMTR;

	if(SQLCODE != 0)
	{
		/** errlog(c_Servicename,"S31055",SQLMSG,(char*)c_user_id,l_sssn_id,c_errmsg);
		 fn_do_error();Commented in Ver 2.7 **/
		l_retval = -1;
		/*** Ver 2.7 Starts ***/
			 fn_errlog( c_Servicename , "S31060", SQLMSG, c_errmsg.arr  );
	   /** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
			 Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
	   tpfree ( ( char * )ptr_fml_Obuffer);
	   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
	}

		if(DEBUG_MSG_LVL_0)        /** Added in VQC **/
	{
	  fn_userlog(c_Servicename,"c_clnt_spt_flg :%c:",c_clnt_spt_flg);
	}

	if(c_clnt_spt_flg != 'Y')
	{
		fn_userlog(c_Servicename,"c_clnt_spt_flg :%c:",c_clnt_spt_flg);
		/**strcpy(c_errmsg,
				"Spot Sell of shares deposited as margin is not allowed at the moment"); ** ver 2.1 **/
		fn_userlog(c_Servicename,":%s:",c_errmsg.arr);
			  fn_errlog( c_Servicename , "S31065", "Please try later as shares as margin processing is underway.", c_errmsg.arr);
		strcpy(c_errmsg.arr,"Please try later as shares as margin processing is underway."); /** ver 2.1 **/
		l_retval = -1;
		/** fn_do_error(); **/					/** Ver 2.7 **/
		/*** Ver 2.7 Starts ***/
		/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
				Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
	}	

		/**********************  Spot Sell End ***************************/

	}
	
	/*** Ver 2.2 ** Starts *** Following Commented and moved up in Ver 2.3 

	else if (c_source == 'Y')				*** For New Trade Racer ***	
	{
		strcpy(c_channel,"NET");
	}
	else if (c_source == 'Z')				*** For New Trade Racer by super user ***
	{
		strcpy(c_channel,"CN2");
	}

	*** Ver 2.2 ** Ends Commented in Ver 2.3 Ends ***/

	else
	{
		/** errlog(c_Servicename,"S31070"," ",(char*)c_user_id,l_sssn_id,c_errmsg);
		fn_do_error(); Commented in Ver 2.7 **/
	
		/*** Ver 2.7 Starts ***/
				fn_errlog( c_Servicename , "S31075", " ", c_errmsg.arr  );
				l_retval = -1;
		/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
				Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
	}
	strcpy(c_channel_dt,c_channel); 

		if(DEBUG_MSG_LVL_0)        /** Added in VQC **/
	{
			fn_userlog(c_Servicename,"THE CHANNEL_DT SEND HERE IS :%s:",c_channel_dt);
			fn_userlog(c_Servicename,"STAGE II ");
		}

	/********* Get the Match and Dp ID *********************/
	strcpy(c_dp_id,strtok(c_acc_ref,"-"));
	strcpy(c_dp_clnt_id,strtok(null_ptr,"-"));
	strcpy(c_match_accnt,strtok(null_ptr,"-"));

	/*** Commented following statement as commented unused variable in ver VQC **
 
	l_dp_acc = atol(c_dp_clnt_id); 

	***/

  /*** Ver 3.0 Starts ***/

  if (c_coll_spt_typ != 'E')
  {
   EXEC SQL
   SELECT COUNT(1)
   INTO   :l_pod_cnt
   FROM   POD_PLG_ORDR_DTLS_CNV
   WHERE  POD_PLG_REV_TYP = 'P'
   AND    POD_CLNT_MTCH_ACCNT = :c_match_accnt
   AND    POD_ORDR_STTS in ('R','I')
   AND    POD_ORDR_QTY  > 0;

   if ( SQLCODE != 0 )
   {
	  fn_errlog( c_Servicename , "S31080", TPMSG, c_errmsg.arr  );
	  Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
	  tpfree ( ( char * )ptr_fml_Obuffer);
	  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
   }

   if ( l_pod_cnt > 0)
   {
	  fn_errlog( c_Servicename , "S31085", "Pending Convert to Margin Pledge Request. Spot Sell not allowed.", c_errmsg.arr  );
	  strcpy(c_errmsg.arr,"Pending Convert to Margin Pledge Request. Spot Sell not allowed.");
	  Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
	  tpfree ( ( char * )ptr_fml_Obuffer);
	  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
   }
  }
  /*** Ver 3.0 Ends ***/


		fn_userlog(c_Servicename,"STAGE III ");
	
  	/*** Ver 1.9 Starts ***/

   if( sql_ord_ordr_typ == IMMEDIATE_OR_CANCEL && c_lm_flag == 'L')
   {
	  strcpy((char *)c_errmsg.arr,"Limit Order cannot be placed for IOC order");
	  fn_userlog(c_Servicename,"%s",c_errmsg.arr);
	  sprintf(c_errmsg.arr,"Limit Order cannot be placed for IOC order.");
	  /** fn_do_error(); **/						/** Ver 2.7 **/
		/*** Ver 2.7 Starts ***/
				l_retval = -1;
		/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
				Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/	
   }

	 if( sql_ord_ordr_typ == IMMEDIATE_OR_CANCEL && l_dscl_qty > 0 )
   {
	  strcpy((char *)c_errmsg.arr,"Disclosed Quantity can not be entered in IOC Order");
	  fn_userlog(c_Servicename,"%s",c_errmsg.arr);
	  sprintf(c_errmsg.arr,"Disclosed Quantity can not be entered in IOC Order.");
	  /** fn_do_error(); **/						/** Ver 2.7 **/
		/*** Ver 2.7 Starts ***/
				l_retval = -1;
		/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
				Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
   }


	 if(c_lm_flag == 'L')
   {
			
   if(sql_ord_lmt_rt >sql_ord_stp_lss_tgr && sql_ord_stp_lss_tgr != 0)
   {
	  strcpy((char *)c_errmsg.arr,"Stop loss trigger price cannot be less  than limit rate for Sell order");
	  fn_userlog(c_Servicename,"%s",c_errmsg.arr);
	  sprintf(c_errmsg.arr,"Stop Loss Trigger Price cannot be less than the Limit Price.");
	  /** errlog(c_Servicename,"B28525","Stop loss trigger price cannot be less  than limit rate for Sell order.",(char*)c_user_id,l_sssn_id,c_errmsg); 
	   fn_do_error(); Commented in Ver 2.7 **/

		/*** Ver 2.7 Starts ***/
		fn_errlog( c_Servicename , "B28525", "Stop loss trigger price cannot be less  than limit rate for Sell order.", c_errmsg.arr);
				l_retval = -1;
		/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
				Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
   }
   }

  	/*** Ver 1.9 Ends ***/
	

	if(c_lm_flag == 'L' && sql_ord_lmt_rt == 0 )
	{
		fn_userlog(c_Servicename,"Limit cannot be 0 for limit order");
		/** errlog(c_Servicename,"B56009"," ",(char*)c_user_id,l_sssn_id,c_errmsg);
		 fn_do_error(); Commented in Ver 2.7 **/

		/*** Ver 2.7 Starts ***/
				fn_errlog( c_Servicename , "B56009", DEFMSG, c_errmsg.arr  );	/*** Ver 2.7 DEFMSG added ***/
				l_retval = -1;
		/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
		Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
	}

	if(l_dscl_qty >= sql_ord_ordr_qty)
	{
		fn_userlog(c_Servicename,"Disclosed qty cannot be greater than or equal to qty.");
		/**errlog(c_Servicename,"B56006","Disclosed qty cannot be greater than or equal to qty.",(char*)c_user_id,l_sssn_id,c_errmsg);
		 fn_do_error(); Commented in Ver 2.7 **/

		/*** Ver 2.7 Starts ***/
				fn_errlog( c_Servicename , "B56006", "Disclosed qty cannot be greater than or equal to qty.", c_errmsg.arr  );
		l_retval = -1;     
			  /** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
		Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
	}
	d_dscl_qty = l_dscl_qty;
	if( d_dscl_qty < ((double)sql_ord_ordr_qty/10) && l_dscl_qty > 0 ) 
	{
		fn_userlog(c_Servicename,"Disc qty cannot be less than 10% of Open Qty");
		/** errlog(c_Servicename,"B56008"," ",(char*)c_user_id,l_sssn_id,c_errmsg);
		 fn_do_error(); Commented in Ver 2.7 **/

		/*** Ver 2.7 Starts ***/
				fn_errlog( c_Servicename , "B56008", DEFMSG, c_errmsg.arr );	/*** Ver 2.7 DEFMSG added ***/
		l_retval = -1;
		/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
		Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
	}

	/***Check whether quantity available for sell or not in pledged mode*/

	/**** Commented for Ver 2.5 *********
		EXEC SQL
		SELECT (DBD_TIFP_QTY - DBD_REV_REQ_QTY - DBD_REV_COV_QTY),
		nvl(DBD_TIFP_QTY,0),		* Ver 1.6 add *
		nvl(DBD_INV_REQ_QTY,0)	* Ver 1.6 add *
		INTO  :l_net_pledge_qty,
					:l_dbd_tifp_qty,
					:l_inv_req_qty
	FROM  DBD_DP_BLCK_DTLS
		WHERE DBD_CLM_MTCH_ACCNT  = :c_match_accnt
		AND   DBD_DP_ID           = :c_dp_id
		AND   DBD_DP_CLNT_ID      = :c_dp_clnt_id
		AND   DBD_STCK_CD         = :sql_ord_stck_cd  ;
		********* Ver 2.5 **********/

		/***** Added for Ver 2.5 *********/
	if (c_coll_spt_typ == 'S')
	{
		EXEC SQL
		/** SELECT DBD_SAM_BLCKD_QTY *** Commented for Ver 3.0 **/
		SELECT DBD_SAM_BLCKD_QTY - DBD_REV_REQ_QTY - DBD_REV_COV_QTY		/** Added for Ver 3.0 **/
		INTO  :l_dbd_tifp_qty
	FROM  DBD_DP_BLCK_DTLS
		WHERE DBD_CLM_MTCH_ACCNT  = :c_match_accnt
		AND   DBD_DP_ID           = :c_dp_id
		AND   DBD_DP_CLNT_ID      = :c_dp_clnt_id
		AND   DBD_STCK_CD         = :sql_ord_stck_cd  ;
	}
	else if (c_coll_spt_typ == 'E')
	{

		EXEC SQL
			SELECT ELM_PLG_QTY
			INTO :l_dbd_tifp_qty
			FROM ELM_ESOP_LOAN_MSTR
			WHERE ELM_CLM_MTCH_ACCNT = :c_match_accnt
			AND ELM_DP_ID = :c_dp_id
			AND ELM_DP_CLNT_ID = :c_dp_clnt_id
			AND ELM_STCK_CD = :sql_ord_stck_cd
			AND	ELM_LOAN_REF = :c_esop_loan_ref;
	}
		/***** end Ver 2.5 ****/

	if(SQLCODE != 0)
	{
		/** errlog(c_Servicename,"S31090",SQLMSG,(char*)c_user_id,l_sssn_id,c_errmsg);
		 fn_do_error(); Commented in Ver 2.7 **/

		/*** Ver 2.7 Starts ***/
				fn_errlog( c_Servicename , "S31095", SQLMSG, c_errmsg.arr  );
				l_retval = -1;
		/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
				Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
	}
	
	fn_userlog(c_Servicename,"Value of c_isin_input :%c:",c_isin_input);

	if (c_coll_spt_typ == 'E' && c_isin_input == 'N')
	{
		EXEC SQL
			SELECT TRIM(SEM_MAP_VL) 
			INTO :sql_ord_isin_nmbr
			FROM SEM_STCK_MAP 
			WHERE SEM_STCK_CD = :sql_ord_stck_cd
			AND SEM_ENTTY = 10;

		if(SQLCODE != 0)
		{
					fn_errlog( c_Servicename , "S31100", SQLMSG, c_errmsg.arr  );
					l_retval = -1;
					Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
					Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
					tpfree ( ( char * )ptr_fml_Obuffer);
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		}

		c_isin_input = 'Y';
		c_isin_valid = 'Y' ;

		fn_userlog(c_Servicename,"Inside ESOP ISIN sql_ord_isin_nmbr :%s:",sql_ord_isin_nmbr);
		fn_userlog(c_Servicename,"Value of c_isin_input :%c:",c_isin_input);
	}

	/*** Ver 1.6 Starts ****/
	/*** Commented for Ver 2.5 *******
	EXEC SQL
	SELECT 1
	INTO    :i_order_exists
	from dual
	WHERE EXISTS
	(
		SELECT 1 
		FROM POD_PLG_ORDR_DTLS
		WHERE POD_CLNT_MTCH_ACCNT = :c_match_accnt
		AND POD_DP_ACCNT = :c_dp_id
		AND POD_DP_CLNT_ACCNT = :c_dp_clnt_id
		AND POD_PLG_REV_TYP = 'W'
		AND (POD_ORDR_STTS = 'R' OR POD_ORDR_STTS = 'I')
		AND POD_STCK_CD = :sql_ord_stck_cd
	);

	if ((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
  {
   fn_errlog(c_Servicename,"S31105",SQLMSG,c_errmsg);
	fn_do_error();
  }

 	fn_userlog(c_Servicename,"Value of i_order_exists = %d",i_order_exists);

	if(i_order_exists == 1)
	{
   fn_userlog(c_Servicename,"You have a Withdraw request pending, Cannot place a Spot Sell Order. Match Id :%s: Stock Code :%s:",c_match_accnt,sql_ord_stck_cd);
   sprintf(c_errmsg,"You have a Withdrawal request pending, Cannot place a Spot Sell.");
   fn_errlog(c_Servicename, "B56054", "",c_errmsg  );
	fn_do_error();
 }	

	*********** Ver 2.5 ********/

	/************** Invocation pending in inprocess state,can not place fresh invocation request*****************/

	/******** Commented for Ver 2.5 ***************
	EXEC SQL
  SELECT 1
  INTO    :i_inorder_exists
  from dual
  WHERE EXISTS
  (
	SELECT 1
	FROM POD_PLG_ORDR_DTLS
	WHERE POD_CLNT_MTCH_ACCNT = :c_match_accnt
	AND POD_DP_ACCNT = :c_dp_id
	AND POD_DP_CLNT_ACCNT = :c_dp_clnt_id
	AND POD_PLG_REV_TYP = 'I'
	AND (POD_ORDR_STTS = 'I')
	AND POD_STCK_CD = :sql_ord_stck_cd
  );

  if ((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
  {
   fn_errlog(c_Servicename,"S31110",SQLMSG,c_errmsg);
	fn_do_error();
  }

  fn_userlog(c_Servicename,"Value of i_order_exists = %d",i_order_exists);

  if(i_inorder_exists == 1)
  {
   fn_userlog(c_Servicename,"You have a Spot Sell request pending,Cannot place new invocation Order.Match Id :%s: Stock Code:%s:",c_match_accnt,sql_ord_stck_cd);
   sprintf(c_errmsg,"You have a Spot Sell request Pending,Cannot place a fresh Spot Sell.");
   fn_errlog(c_Servicename, "B56057", "",c_errmsg  );
	fn_do_error();
 }
	********* Ver 2.5 ***********/

	/***** Commented for Ver 2.5 *************	
	EXEC SQL
				SELECT nvl(sum(pod_ordr_qty),0) into :l_sum_pod_ordr_qty
				FROM POD_PLG_ORDR_DTLS
				WHERE POD_CLNT_MTCH_ACCNT = :c_match_accnt
				AND POD_DP_ACCNT = :c_dp_id
				AND POD_DP_CLNT_ACCNT = :c_dp_clnt_id
				AND POD_PLG_REV_TYP = 'P'
				AND POD_ORDR_STTS = 'I'
				AND POD_STCK_CD = :sql_ord_stck_cd;

				if ((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
				{
					 fn_errlog( c_Servicename, "S31115", SQLMSG, c_errmsg  );
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg,0);
					 tpfree ( ( char * )ptr_fml_Obuffer);
					 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
				}

	l_conf_qty = l_dbd_tifp_qty - l_sum_pod_ordr_qty - l_inv_req_qty;

	*********** Ver 2.5 ********/
	l_conf_qty = l_dbd_tifp_qty;	/** Added for Ver 2.5 ***/

	if(sql_ord_ordr_qty > l_conf_qty || l_conf_qty <= 0 )		/*** OR condition added for Ver 3.0 **/
 {
  /*** fn_userlog(c_Servicename,"You have only :%ld: confirmed quantity in Pledge. Please place invocation for lesser quantity. For match :%s: and stock code :%s:",l_conf_qty,c_match_accnt,sql_ord_stck_cd);	*** Commented for Ver 2.5 *******/
  fn_userlog(c_Servicename,"You have only :%ld: as SAM blocked quantity. Please place spot sell for lesser quantity. For match :%s: and stock code :%s:",l_conf_qty,c_match_accnt,sql_ord_stck_cd); /*** Added for Ver 2.5 ***/
   /***sprintf(c_errmsg,"You have only %ld confirmed quantity in Pledge. Please place invocation for lesser quantity.",l_conf_qty); *** Ver 2.1 ***/
   /*** sprintf(c_errmsg,"Your spot sell request is more than the confirmed quantity pledged. Please place spot sell request for less than or equal to confirmed quantity pledged.",l_conf_qty); **** Commented for Ver 2.5 ****/
	/** fn_do_error(); **/									/** Ver 2.7 **/
		/*** Ver 2.7 Starts ***/
 				l_retval = -1;
				fn_errlog( c_Servicename , "S31120", "Your spot sell request is more than the SAM blocked quantity. Please place spot sell request for less than or equal to SAM blocked quantity.", c_errmsg.arr  );
				strcpy(c_errmsg.arr,"Your spot sell request is more than the SAM blocked quantity. Please place spot sell request for less than or equal to SAM blocked quantity."); 
		/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
				Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
 }	

	/** Ver 1.6 ends **/

/*V1.1 Starts*/	
	EXEC SQL SELECT NVL(STK_PLG_SPT_ALLWD,'Y')
	INTO :c_stk_plg_spt_flag
	FROM STK_STK_MSTR
	WHERE STK_STCK_CD = :sql_ord_stck_cd; 
	
	if(SQLCODE != 0 )
	{
		/** errlog(c_Servicename,"S31125",SQLMSG,(char*)c_user_id,l_sssn_id,c_errmsg);
		fn_do_error(); Commented in Ver 2.7 **/

		/*** Ver 2.7 Starts ***/
		l_retval = -1;
				fn_errlog( c_Servicename , "S31130", SQLMSG, c_errmsg.arr  );
		/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
		Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
	}

	if(c_stk_plg_spt_flag == 'N')
	{
	/**strcpy(c_errmsg,"Spot Sell of shares deposited as margin is not allowed at the moment"); ** ver 2.1 **/
	 fn_errlog( c_Servicename , "S31135", "Please try later as shares as margin processing is underway.", c_errmsg.arr); 
	strcpy(c_errmsg.arr, "Please try later as shares as margin processing is underway."); /** ver 2.1 **/
	fn_userlog(c_Servicename,":%s:",c_errmsg.arr);
	l_retval = -1;
	/** fn_do_error(); **/						/** Ver 2.7 **/
		/*** Ver 2.7 Starts ***/
		/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
				Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
				
				/*** Commented in Ver VQC ***
				
				Fprint32(ptr_fml_Ibuffer);  
	
				***/

		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/

	}

/*V1.1 ends*/

	/******** Net Pledge Qty can not be less than  Order Qty ****/

/***** Commented for Ver 2.5 ********
	if(l_net_pledge_qty <= 0 || l_net_pledge_qty <  sql_ord_ordr_qty)
	{
		errlog(c_Servicename,"B56020"," ",(char*)c_user_id,l_sssn_id,c_errmsg);
		 fn_do_error();
	}
********** Ver 2.5 *******/

	/************* Market orders not allowed when exchange is not open ***********/
	EXEC SQL
		SELECT exg_crrnt_stts
		INTO 	 :c_exg_crrnt_stts
		FROM 	 exg_xchng_mstr
		WHERE  exg_xchng_cd = :sql_ord_xchng_cd;
	if(SQLCODE != 0)
	{
		/** errlog(c_Servicename,"S31140",SQLMSG,(char*)c_user_id,l_sssn_id,c_errmsg);
		fn_do_error(); Commented in Ver 2.7 **/

		/*** Ver 2.7 Starts ***/
		l_retval = -1;
			  fn_errlog( c_Servicename , "S31145", SQLMSG, c_errmsg.arr  );	
		/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
		Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
	}

		if(DEBUG_MSG_LVL_0)     /** Added in VQC **/
	{
		  fn_userlog(c_Servicename,"STAGE IV ");
	}

/*	if(c_exg_crrnt_stts != 'O' && c_lm_flag == 'M') changed condition rewritten below : ver 1.8 */
	if(c_exg_crrnt_stts != 'O' && (c_lm_flag == 'M' || sql_ord_ordr_typ == IMMEDIATE_OR_CANCEL )) /* ver 1.8 */
	{
		/** errlog(c_Servicename,"B56010"," ",(char*)c_user_id,l_sssn_id,c_errmsg);
		fn_do_error(); Commented in Ver 2.7 **/

		/*** Ver 2.7 Starts ***/
			l_retval = -1;
		fn_errlog( c_Servicename , "B56010", DEFMSG, c_errmsg.arr);	/*** Ver 2.7 DEFMSG added ***/
		Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
		/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
	}
	if(c_exg_crrnt_stts == 'X')
	{
		/** errlog(c_Servicename,"B56012"," ",(char*)c_user_id,l_sssn_id,c_errmsg);
		fn_do_error(); Commented in Ver 2.7 **/

		/*** Ver 2.7 Starts ***/
				fn_errlog( c_Servicename , "B56012", DEFMSG, c_errmsg.arr  );		/*** Ver 2.7 DEFMSG added ***/
  			l_retval = -1;
  			Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
		/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
	}
	
	if(strcmp(c_product_cd,"SPOT") == 0)
	{
		strcpy(c_submit_ordr,"SVC_SUBMIT_SPT");
		strcpy(c_place_ordr,"SVC_PLC_SPT");
		i_xoa_typ = SPOT;
		sql_ord_prdct_typ = 'S';
	}
  else if(strcmp(c_product_cd,"CASH") == 0)   /** Added for Ver 3.8 **/
  {
    strcpy(c_submit_ordr,"SVC_SUBMIT_CS");
    strcpy(c_place_ordr,"SVC_PLC_CS");
    i_xoa_typ = CASH_SELL;
    sql_ord_prdct_typ = 'C';
  }
	else
	{
		/** errlog(c_Servicename,"S31150"," ",(char*)c_user_id,l_sssn_id,c_errmsg);
		fn_do_error(); Commented in Ver 2.7 **/

		/*** Ver 2.7 Starts ***/
				fn_errlog( c_Servicename , "S31155", " ", c_errmsg.arr  );
		l_retval = -1;
  			Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
				/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/	
	}

	/** Ver 4.1 Start **/
	if(strcmp(c_product_cd,"SPOT") == 0)
	{
		i_err[1]= Fget32(ptr_fml_Ibuffer, FML_EMP_FLAG, 0, (char *)&c_surv_flg, 0);
		i_ferr[1] = Ferror32;

		if(i_err[1] == -1)
		{
				c_surv_flg='Y';
		}

		
		/** Ver 4.2 Start **/
		MEMSET(c_ven_id);
		i_err[2]= Fget32(ptr_fml_Ibuffer, FML_O_PARTI_CD, 0, (char *)c_ven_id, 0);
		i_ferr[2] = Ferror32;
		if(i_err[2] == -1)
		{
		  MEMSET(c_ven_id);
			strcpy(c_ven_id,"NA");	
		}
		/** Ver 4.2 End **/

		if(DEBUG_MSG_LVL_2)
		{
		fn_userlog(c_Servicename," c_surv_flg :%c:,c_product_cd:%s c_ven_id :%s:",c_surv_flg,c_product_cd,c_ven_id);/** added c_ven_id in ver 4.2 **/
		}

		if(c_surv_flg == 'N')
		{

		 MEMSET(c_survmsg);

			if(strcmp(sql_ord_xchng_cd,"BSE")==0)
			{
				EXEC SQL SELECT 'P','This Security is under surveillance Measure by the exchange. Surveillance Reason is :'||NVL(SAM_DESC,'NA')
				INTO    :c_surv_flg,:c_survmsg
				FROM    XSM_XCHNG_STK_MSTR,SAM_SURV_ACTN_MAP
				WHERE   XSM_STCK_CD   =SAM_SEM_STCK_CD
				AND 	XSM_XCHNG_CD  = :sql_ord_xchng_cd
				AND     XSM_STCK_CD   = :sql_ord_stck_cd
				and SAM_ACTN_FLG = 'Y';
			}
			else
			{
      EXEC SQL
      SELECT 'P','This Security is under surveillance Measure by the exchange. Surveillance Reason is :'||NVL(SIM_DESC,'NA')||'['||NVL(SIM_SHORT_CD, ''||']')
      INTO    :c_surv_flg,:c_survmsg
      FROM    XSM_XCHNG_STK_MSTR,SIM_SURV_INDCTR_MSTR
      WHERE   XSM_XCHNG_CD  = :sql_ord_xchng_cd
      AND     SIM_SURV_IND=NVL(XSM_SURV_IND, 0 )
      AND     XSM_STCK_CD   = :sql_ord_stck_cd;
			}

    if ( SQLCODE != 0 && SQLCODE!=NO_DATA_FOUND )
    {
      fn_errlog ( c_Servicename, "S31160", SQLMSG, c_errmsg.arr);
			l_retval = -1;
			Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
			Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
			tpfree ( ( char * )ptr_fml_Obuffer);
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
    }
    else if(SQLCODE == NO_DATA_FOUND)
    {
      c_surv_flg='N';
    }

    rtrim(c_survmsg);

		if(DEBUG_MSG_LVL_2)
		{
    fn_userlog(c_Servicename,"c_surv_flg :%c:",c_surv_flg );
    fn_userlog(c_Servicename,"c_survmsg :%s: ",c_survmsg );
		}


		if(c_surv_flg == 'P')
		{
			i_err[1]=Fchg32(ptr_fml_Ibuffer,FML_EMP_FLAG,0,(char*)&c_surv_flg,0);
			i_ferr[1] = Ferror32;
			i_err[1]=Fadd32(ptr_fml_Ibuffer,FML_SYS_MSG,(char*)c_survmsg,0);
			i_ferr[1] = Ferror32;

			strcpy(c_errmsg.arr,c_survmsg);
			l_retval = -1;
			Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
			Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
			tpfree ( ( char * )ptr_fml_Obuffer);
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		}
		else if(c_surv_flg == 'N') 	/** Added in 4.2 start*/
		{
    	fn_userlog(c_Servicename,"NO Popup c_surv_flg :%c: c_ven_id :%s:",c_surv_flg,c_ven_id );
			if (strcmp(c_ven_id,"1376")==0)  
			{
							fn_userlog(c_Servicename," Returning success");
							strcpy(c_errmsg.arr,"Added for API");
							l_retval = -1;
							Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
							Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
							tpfree ( ( char * )ptr_fml_Obuffer);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
			}
		}	/** Ver 4.2 End **/
	 }

  }
	/** Ver 4.1 End **/

	if(DEBUG_MSG_LVL_3){
		fn_userlog(c_Servicename,"Submitting   :%s:",c_submit_ordr);
		fn_userlog(c_Servicename,"Placing    :%s:",c_place_ordr);
	}

	/************* Allocate buffer for Submit order ***********/

	ptr_fml_Sbuffer = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
	if(ptr_fml_Sbuffer == NULL)
	{
		/**errlog(c_Servicename,"S31165",TPMSG,(char*)c_user_id,l_sssn_id,c_errmsg);
		fn_do_error(); Commented in Ver 2.7 **/

		/*** Ver 2.7 Starts ***/
				fn_errlog( c_Servicename , "S31170", TPMSG, c_errmsg.arr  );
  			l_retval = -1;
  			Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
		/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
	}

	ptr_fml_Rbuffer = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
	if(ptr_fml_Rbuffer == NULL)
	{
		/** errlog(c_Servicename,"S31175",TPMSG,(char*)c_user_id,l_sssn_id,c_errmsg);
		fn_do_error(); Commented in Ver 2.7 **/

		/*** Ver 2.7 Starts ***/
		fn_errlog( c_Servicename , "S31180", TPMSG, c_errmsg.arr);
  			l_retval = -1;
  			Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
		/** Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_errmsg, 0 ); commented for  2.7 **/
		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
		tpfree ( ( char * )ptr_fml_Obuffer);
				tpfree ( ( char * )ptr_fml_Sbuffer);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		/*** Ver 2.7 Ends ***/
	}
	/***** Add the common FML's to send buffer ********/
	i_err[0] = Fadd32(ptr_fml_Sbuffer,FML_USR_ID,(char*)c_user_id,0);
	i_err[1] = Fadd32(ptr_fml_Sbuffer,FML_SSSN_ID,(char*)&l_sssn_id,0);
	i_err[2] = Fadd32(ptr_fml_Sbuffer,FML_ORD_CLM_MTCH_ACCNT,(char*)c_match_accnt,0);
	i_err[3] = Fadd32(ptr_fml_Sbuffer,FML_ORD_STCK_CD,(char*)sql_ord_stck_cd,0);
	i_err[4] = Fadd32(ptr_fml_Sbuffer,FML_ORD_XCHNG_CD,(char*)sql_ord_xchng_cd,0);
	i_err[5] = Fadd32(ptr_fml_Sbuffer,FML_ORD_PRDCT_TYP,(char*)&sql_ord_prdct_typ,0);
	i_err[6] = Fadd32(ptr_fml_Sbuffer,FML_ORD_ORDR_FLW,(char*)&sql_ord_ordr_flw,0);
	i_err[7] = Fadd32(ptr_fml_Sbuffer,FML_ORD_EXCTD_QTY,(char*)&sql_ord_ordr_qty,0);
	i_err[8] = Fadd32(ptr_fml_Sbuffer,FML_ORD_TYP,(char*)&c_lm_flag,0);
	i_err[9] = Fadd32(ptr_fml_Sbuffer,FML_ORD_STP_LSS,(char*)&sql_ord_stp_lss_tgr,0);
	i_err[10]= Fadd32(ptr_fml_Sbuffer,FML_GMS_CSH_PRDCT_PRCNTG,(char*)&d_prot_perc,0);
	i_err[11]= Fadd32(ptr_fml_Sbuffer,FML_SVC_NAME,(char*)c_submit_ordr,0);


	if(DEBUG_MSG_LVL_0)     /** Added in VQC **/
  {
		fn_userlog(c_Servicename,"STAGE V ");
	}

	if(strcmp(c_product_cd,"SPOT") == 0)
	{
		i_err[12]= Fadd32(ptr_fml_Sbuffer,FML_DPID,(char*)c_dp_id,0);
		i_err[13]= Fadd32(ptr_fml_Sbuffer,FML_ORD_DP_CLNT_ID,(char*)c_dp_clnt_id,0);
		i_err[14]= Fadd32(ptr_fml_Sbuffer,FML_ORD_ORDR_QTY,(char*)&sql_ord_ordr_qty,0);
		i_err[15]= Fadd32(ptr_fml_Sbuffer,FML_ORD_DSCLSD_QTY,(char*)&l_dscl_qty,0);
		i_err[16]= Fadd32(ptr_fml_Sbuffer,FML_ORD_LMT_RT,(char*)&sql_ord_lmt_rt,0);
		i_err[17]= Fadd32(ptr_fml_Sbuffer,FML_POINT_TYPE,(char*)&sql_ord_ordr_typ,0);     /* ver 1.8 */
	}
  else if(strcmp(c_product_cd,"CASH") == 0)   /** Added for Ver 3.8 **/
  {
    i_err[12]= Fadd32(ptr_fml_Sbuffer,FML_DPID,(char*)c_dp_id,0);
    i_err[13]= Fadd32(ptr_fml_Sbuffer,FML_ORD_DP_CLNT_ID,(char*)c_dp_clnt_id,0);
    i_err[14]= Fadd32(ptr_fml_Sbuffer,FML_ORD_ORDR_QTY,(char*)&sql_ord_ordr_qty,0);
    i_err[15]= Fadd32(ptr_fml_Sbuffer,FML_ORD_DSCLSD_QTY,(char*)&l_dscl_qty,0);
    i_err[16]= Fadd32(ptr_fml_Sbuffer,FML_ORD_EXCTD_RT,(char*)&sql_ord_lmt_rt,0);
    i_err[17]= Fadd32(ptr_fml_Sbuffer,FML_POINT_TYPE,(char*)&sql_ord_ordr_typ,0);     /* ver 1.8 */
    i_err[18]= Fadd32(ptr_fml_Sbuffer,FML_ORD_TRD_DT,(char*)&sql_ord_trd_dt,0);     /* ver 1.8 */
  }
	for(i = 0 ; i < 18 ; i++)    /* max loop value changed from 16 to 18 : ver 1.8 */
	{
		if(i_err[i] == -1)
		{
			fn_userlog(c_Servicename,"Value of i is :%d:",i);
			/**errlog(c_Servicename,"S31185",FMLMSG,(char*)c_user_id,l_sssn_id,c_errmsg); Commented in Ver 2.7 ***/
			fn_errlog( c_Servicename , "S31190", FMLMSG, c_errmsg.arr  );
			fn_do_error();
		}
	}

		
	/************ CAll SVC_ORDR_ROUT ************************/

		if(DEBUG_MSG_LVL_0)     /** Added in VQC **/
	{
		  fn_userlog(c_Servicename,"STAGE VI ");
	}
 
	if(c_submit == 'Y')
	{
		if(tpcall("SVC_ORD_ROUT",
		(char*)ptr_fml_Sbuffer,0,(char**)&ptr_fml_Rbuffer,&l_retbuf,0)==-1)
		{
			if(TPCODE != TPESVCFAIL)
			{
				/** errlog(c_Servicename,"S31195",TPMSG,(char*)c_user_id,l_sssn_id,c_errmsg); Commented in Ver 2.7 **/
				fn_errlog( c_Servicename , "S31200", TPMSG, c_errmsg.arr  );
		fn_userlog(c_Servicename,"NOT TPESVCFAIL");
			}
			else
			{
		fn_userlog(c_Servicename,"TPESVCFAIL");
				Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,(char*)c_errmsg.arr,0);
			}
	
	  fn_userlog(c_Servicename,"TPCALLFAIL");
			fn_userlog(c_Servicename,c_errmsg.arr);
			fn_do_error();
		}

		if(DEBUG_MSG_LVL_3){
			fn_userlog(c_Servicename," DT Order submitted successfully ");
		}

		INIT(i_err,TOTAL_FML);
		/*********** Get the Output parameters from Submit order ***********/
		if(sql_ord_ordr_flw == 'S')
		{
			i_err[1] = Fget32(ptr_fml_Rbuffer,FML_FUND_OUT_DT,0,(char*)c_py_in_date,0);
			i_err[2] = Fget32(ptr_fml_Rbuffer,FML_DEMAT_IN_DT,0,(char*)c_py_out_date,0);
		}
		if(strcmp(c_product_cd,"SPOT" )== 0)
		{
			i_err[3]=Fget32(ptr_fml_Rbuffer,FML_ORD_BRKRG_VL,0,(char*)&sql_ord_brkrg_val,0);
			i_err[4]=Fget32(ptr_fml_Rbuffer,FML_ORD_XCHNG_SGMNT_CD,0,(char*)sql_ord_xchng_sgmnt_cd,0);
			i_err[5]=Fget32(ptr_fml_Rbuffer,FML_ORD_BRKRG_VL,0,(char*)&d_spot_brkrg_val,0);

		}
    else if(strcmp(c_product_cd,"CASH" )== 0)   /** Added for Ver 3.8 **/
    {
     /** i_err[3]=Fget32(ptr_fml_Rbuffer,FML_ORD_BRKRG_VL,0,(char*)&sql_ord_brkrg_val,0); **/
      i_err[4]=Fget32(ptr_fml_Rbuffer,FML_XCHNG_SGMNT_CD,0,(char*)sql_ord_xchng_sgmnt_cd,0);
      /** i_err[5]=Fget32(ptr_fml_Rbuffer,FML_ORD_BRKRG_VL,0,(char*)&d_spot_brkrg_val,0); **/
      i_err[6]=Fget32(ptr_fml_Rbuffer,FML_FUND_IN_DT,0,(char*)c_cpi_dt,0);
    }
	 	i_err[8] = Fget32(ptr_fml_Rbuffer,FML_QUOTE,0,(char*)&d_quote,0);
		i_err[9] = Fget32(ptr_fml_Rbuffer,FML_STTLMNT_NMBR,0,(char*)&sql_ord_xchng_sgmnt_sttlmnt,0);
		i_err[10]= Fget32(ptr_fml_Rbuffer,FML_QUOTE_TIME,0,(char*)c_qt_tm,0);
		i_err[11]= Fget32(ptr_fml_Rbuffer,FML_TM,0,(char*)c_ord_tm,0);
		i_err[12]= Fget32(ptr_fml_Rbuffer,FML_TRDNG_PSSWRD_FLG,0,(char*)&c_trdng_psswrd_flg,0);
		i_err[13]= Fget32(ptr_fml_Rbuffer,FML_SETL_END_DT,0,(char*)c_sttl_end_dt,0);
		i_err[14]= Fget32(ptr_fml_Rbuffer,FML_STK_STCK_NM,0,(char*)c_stck_nm,0);
		i_err[15]= Fget32(ptr_fml_Rbuffer,FML_SEGMENT,0,(char*)sql_esm_series_desc.arr,0);/*1.4*/
		for(i = 0 ; i <= 15 ; i++)/*1.4*/
		{
			if(i_err[i] == -1)
			{
				fn_userlog(c_Servicename,"Value of i is :%d:",i);
				/**	errlog(c_Servicename,"S31205",FMLMSG,(char*)c_user_id,l_sssn_id,c_errmsg); commented in Ver 2.7 **/
				fn_errlog( c_Servicename , "S31210", FMLMSG, c_errmsg.arr  );
				fn_do_error();
			}
		}

		if(DEBUG_MSG_LVL_0)     /** Added in VQC **/
	{
		  fn_userlog(c_Servicename,"STAGE VII ");
		}

	SETLEN(sql_esm_series_desc);/*1.4*/

		i_no_isin = Foccur32(ptr_fml_Rbuffer,FML_ISIN);
		if(i_no_isin > 1 && c_source == 'A' && c_isin_input == 'N')
		{
			/** In case of ASP and multiple ISIN's return **/
			l_retval = -1;
			Fadd32(ptr_fml_Rbuffer,FML_ACTN_ID,(char*)&l_retval,0);
  		
			tpfree((char*)ptr_fml_Sbuffer);			/** Ver 2.7 **/
  		tpfree((char*)ptr_fml_Obuffer);			/** Ver 2.7 **/

			tpreturn(TPSUCCESS, 0L, (char *)ptr_fml_Rbuffer, 0, 0);
		}

	if (c_isin_input == 'N')
	{
	  if(Fget32(ptr_fml_Rbuffer,FML_ISIN,0,(char*)sql_ord_isin_nmbr,0) == -1)
	  {
		/********
		errlog(c_Servicename,"S31215",FMLMSG,(char*)c_user_id,l_sssn_id,c_errmsg);
		fn_do_error();*******/;
		}
	}
	else
	{
	  for(i=0 ; i< i_no_isin; i++)
	  {
		i_err[13]= Fget32(ptr_fml_Rbuffer,FML_ISIN,i,(char*)c_isin_nmbr,0);
		if(strcmp(sql_ord_isin_nmbr,c_isin_nmbr) == 0)
		c_isin_valid  = 'Y' ;
	  }
	  if(c_isin_valid == 'N')
	  {
		/** errlog(c_Servicename,"B56014",FMLMSG,(char*)c_user_id,l_sssn_id,c_errmsg); Commented in Ver 2.7 **/
			  fn_errlog( c_Servicename , "B56014", FMLMSG, c_errmsg.arr  );
		fn_do_error();
	  }
	}

		if(DEBUG_MSG_LVL_3){
			fn_userlog(c_Servicename,"Segment :%s:",sql_ord_xchng_sgmnt_cd);
			fn_userlog(c_Servicename,"Pay in date :%s:",c_py_in_date);
			fn_userlog(c_Servicename,"Pay out date :%s:",c_py_out_date);
	  fn_userlog(c_Servicename,"Series desc is %s",(char*)sql_esm_series_desc.arr);/*1.4*/
		}
	}

  if(DEBUG_MSG_LVL_3){
	  fn_userlog(c_Servicename,"Order Submitted now placing the Order using ord_rout: ");
  }
	
	/************ Keep the common parameters in send buffer for Submit order ********/
	fieldid[0] = FML_USR_ID;
	fieldid[1] = FML_SSSN_ID;
	fieldid[2] = FML_ORD_CLM_MTCH_ACCNT;
	fieldid[3] = FML_ORD_ORDR_FLW;
	fieldid[4] = FML_ORD_PRDCT_TYP;
	fieldid[5] = FML_ORD_XCHNG_CD;
	fieldid[6] = FML_ORD_TRD_DT;
	fieldid[7] = FML_ORD_STP_LSS;
	fieldid[8] = FML_POINT_TYPE;              /* ver 1.8 */
	fieldid[9] = BADFLDID; 

	if(Fproj32(ptr_fml_Sbuffer,fieldid) == -1 )
	{
		/** errlog(c_Servicename,"S31220",FMLMSG,(char*)c_user_id,l_sssn_id,c_errmsg); Commented in Ver 2.7 **/
		fn_errlog( c_Servicename , "S31225", FMLMSG, c_errmsg.arr  );
		fn_do_error();
	} 

		/***** Add the common FML's for place order to send buffer ********/
	sql_ord_prtctn_rt	= d_prot_perc	;	/****Always 0	****/


	/* ver 1.7 begins */
	if( d_prot_perc == 0.0 )
	{
		if(DEBUG_MSG_LVL_0)     /** Added in VQC **/
	{
		  fn_userlog( c_Servicename,"Protection Percentage before is :%lf:",d_prot_perc );
	}
 
		i_err[16]= Fget32(ptr_fml_Rbuffer,FML_RT,0,(char*)&d_prot_perc,0);	
		if(i_err[16] == -1)
	{
	  fn_userlog(c_Servicename,"Value of i is :%d:",i);
	  /** errlog(c_Servicename,"S31230",FMLMSG,(char*)c_user_id,l_sssn_id,c_errmsg); Commented in Ver 2.7 ***/
		fn_errlog( c_Servicename , "S31235", FMLMSG, c_errmsg.arr  );
	  fn_do_error();
	}

		if(DEBUG_MSG_LVL_0)     /** Added in VQC **/
	{
		  fn_userlog( c_Servicename,"Protection Percentage after is :%lf:",d_prot_perc );
	}

		sql_ord_prtctn_rt = d_prot_perc ;
	}
	/* ver 1.7 ends */

	/* memset(c_msc_char,'\0',sizeof(c_msc_char)); */
   MEMSET(c_msc_char);

  /*** Ver 3.0 Starts ***/
	/*** Commented and moved below for Version 3.1 ***

  EXEC SQL
		SELECT NVL(DBD_PLG_MODE,'P')
			INTO :c_dbd_plg_mode
		FROM DBD_DP_BLCK_DTLS
		 WHERE DBD_CLM_MTCH_ACCNT  = :c_match_accnt
	   AND DBD_DP_ID           = :c_dp_id
	   AND DBD_DP_CLNT_ID      = :c_dp_clnt_id
	   AND DBD_STCK_CD         = :sql_ord_stck_cd  ;


  if(SQLCODE != 0)
  {
   fn_errlog( c_Servicename , "S31240", SQLMSG, c_errmsg.arr  );
   l_retval = -1;
   Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
   Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
   tpfree ( ( char * )ptr_fml_Obuffer);
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
  }

  **** Commented for Ver 3.1 issue ***/
  /*** Ver 3.0 Ends ***/ 

	if (c_coll_spt_typ == 'S')		/** Ver 2.9 **/
	{

		 /*** Above select taken here for live issue in Ver 3.1 ***/

  	EXEC SQL
			SELECT NVL(DBD_PLG_MODE,'P')
			INTO :c_dbd_plg_mode
		FROM DBD_DP_BLCK_DTLS
		 	WHERE DBD_CLM_MTCH_ACCNT  = :c_match_accnt
	   AND DBD_DP_ID           = :c_dp_id
	   AND DBD_DP_CLNT_ID      = :c_dp_clnt_id
	   AND DBD_STCK_CD         = :sql_ord_stck_cd  ;


  	if(SQLCODE != 0)
  	{
   		fn_errlog( c_Servicename , "S31245", SQLMSG, c_errmsg.arr  );
   		l_retval = -1;
   		Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
   		Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);
   		tpfree ( ( char * )ptr_fml_Obuffer);
   		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
  	}

	 if ( c_dbd_plg_mode == 'P' )   /*** if-else condition added in Ver 3.0 ***/
	 { 
		   strcpy(c_msc_char,"P");
	   c_msc_char[1] = '\0'; 
	 }
	 else
	 {
	   strcpy(c_msc_char,"G");
	   c_msc_char[1] = '\0';
	 }  

	}
	/** Ver 2.9 Added **/
	else if (c_coll_spt_typ == 'E')
	{
		 strcpy(c_msc_char,"O"); 
	 c_msc_char[1] = '\0';	
	}
	/** End for Ver 2.9 **/


	INIT(i_err,TOTAL_FML);
	i_err[0] = Fadd32(ptr_fml_Sbuffer,FML_ORD_DSCLSD_QTY,(char*)&l_dscl_qty,0);
	i_err[1] = Fadd32(ptr_fml_Sbuffer,FML_ORD_XCHNG_SGMNT_STTLMNT,
																					(char*)&sql_ord_xchng_sgmnt_sttlmnt,0);
	i_err[3] = Fadd32(ptr_fml_Sbuffer,FML_RT,(char*)&sql_ord_prtctn_rt,0);
	i_err[4] = Fadd32(ptr_fml_Sbuffer,FML_SYMBOL,(char*)c_channel,0);
	i_err[5] = Fadd32(ptr_fml_Sbuffer,FML_SVC_NAME,(char*)c_place_ordr,0);
	i_err[17]= Fadd32(ptr_fml_Sbuffer,FML_QUOTE_TIME,(char*)c_qt_tm,0);
	i_err[33]= Fadd32(ptr_fml_Sbuffer,FML_FLG,(char*)c_msc_char,0); /**1.2**//** Changed for Ver 2.9 **/

	if(c_trdng_psswrd_flg == 'Y')
		i_err[2] = Fadd32(ptr_fml_Sbuffer,FML_TRADING_PASSWD,(char*)c_trd_psswd,0);
	if( c_user_id[0] == BPID)
	{
		i_err[6] = Fadd32(ptr_fml_Sbuffer,FML_UGR_USR_ALIAS,(char*)c_alias,0);
	}

	if(strcmp(c_product_cd,"SPOT" )== 0)
	{
		i_err[22]= Fadd32(ptr_fml_Sbuffer,FML_ORD_ORDR_QTY,(char*)&sql_ord_ordr_qty,0);
		i_err[23]= Fadd32(ptr_fml_Sbuffer,FML_ORD_STCK_CD,(char*)sql_ord_stck_cd,0);
		i_err[24]= Fadd32(ptr_fml_Sbuffer,FML_ORD_XCHNG_SGMNT_CD,(char*)sql_ord_xchng_sgmnt_cd,0);
		i_err[25]= Fadd32(ptr_fml_Sbuffer,FML_ORD_LMT_RT,(char*)&sql_ord_lmt_rt,0);
		i_err[26]= Fadd32(ptr_fml_Sbuffer,FML_DPID,(char*)c_dp_id,0);
		i_err[27]= Fadd32(ptr_fml_Sbuffer,FML_ORD_DP_CLNT_ID,(char*)c_dp_clnt_id,0);
		i_err[28]= Fadd32(ptr_fml_Sbuffer,FML_TM,(char*)c_ord_tm,0);
		i_err[29]= Fadd32(ptr_fml_Sbuffer,FML_ORD_ISIN_NMBR,(char*)sql_ord_isin_nmbr,0);
		i_err[30]= Fadd32(ptr_fml_Sbuffer,FML_ORD_TYP,(char*)&c_lm_flag,0);
		i_err[31]= Fadd32(ptr_fml_Sbuffer,FML_TRDNG_PSSWRD_FLG,(char*)&c_trdng_psswrd_flg,0);
	  i_err[32]= Fadd32(ptr_fml_Sbuffer,FML_ORD_BRKRG_VL,(char*)&sql_ord_brkrg_val,0);
	}
  else if(strcmp(c_product_cd,"CASH" )== 0)   /** Added for Ver 3.8 **/
  {
    i_err[22]= Fadd32(ptr_fml_Sbuffer,FML_O_TOT_QTY,(char*)&sql_ord_ordr_qty,0);
    i_err[23]= Fadd32(ptr_fml_Sbuffer,FML_STCK_CD,(char*)sql_ord_stck_cd,0);
    i_err[24]= Fadd32(ptr_fml_Sbuffer,FML_XCHNG_SG,(char*)sql_ord_xchng_sgmnt_cd,0);
    i_err[25]= Fadd32(ptr_fml_Sbuffer,FML_LM_RT,(char*)&sql_ord_lmt_rt,0);
    i_err[26]= Fadd32(ptr_fml_Sbuffer,FML_ORD_DP_ID,(char*)c_dp_id,0);
    i_err[27]= Fadd32(ptr_fml_Sbuffer,FML_ORD_DP_CLNT_ID,(char*)c_dp_clnt_id,0);
    i_err[28]= Fadd32(ptr_fml_Sbuffer,FML_TM,(char*)c_ord_tm,0);
    i_err[29]= Fadd32(ptr_fml_Sbuffer,FML_ISIN_NMBR,(char*)sql_ord_isin_nmbr,0);
    i_err[30]= Fadd32(ptr_fml_Sbuffer,FML_LM_FLG,(char*)&c_lm_flag,0);
    i_err[31]= Fadd32(ptr_fml_Sbuffer,FML_TRDNG_PSSWRD_FLG,(char*)&c_trdng_psswrd_flg,0);
    i_err[32]= Fadd32(ptr_fml_Sbuffer,FML_ORD_BRKRG_VL,(char*)&sql_ord_brkrg_val,0);
    i_err[33]= Fadd32(ptr_fml_Sbuffer,FML_QTY,(char*)&sql_ord_ordr_qty,0);
    i_err[35]= Fadd32(ptr_fml_Sbuffer,FML_PY_IN_DT,(char*)c_py_in_date,0);
    i_err[36]= Fadd32(ptr_fml_Sbuffer,FML_PY_OUT_DT,(char*)c_py_out_date,0);
    i_err[37]= Fadd32(ptr_fml_Sbuffer,FML_EBA_ISIN_FLG,(char*)&c_eba_isin_flg,0);
    i_err[38]= Fadd32(ptr_fml_Sbuffer,FML_FUND_IN_DT,(char*)c_cpi_dt,0);

  }  

	/** Added for Ver 2.9 **/
	if (c_msc_char[0] == 'O')
	{
		i_err[34]= Fadd32(ptr_fml_Sbuffer, FML_CLIENT_TITLE, (char *)c_esop_loan_ref, 0);
	}
	/** End for Ver 2.9 **/

	for(i = 0 ; i < 35 ; i++)		/** Changed from 34 to 35 for Ver 2.9 **/
	{
		if(i_err[i] == -1)
		{
			fn_userlog(c_Servicename,"Value of i is :%d:",i);
			/** errlog(c_Servicename,"S31250",FMLMSG,(char*)c_user_id,l_sssn_id,c_errmsg); Commented in Ver 2.7 ***/
	  fn_errlog( c_Servicename , "S31255", FMLMSG, c_errmsg.arr  );
			fn_do_error();
		}
	}

	/************ CAll SVC_ORDR_ROUT ************************/
	Finit32(ptr_fml_Rbuffer, (FLDLEN32) Fsizeof32(ptr_fml_Rbuffer));


	if(tpcall("SVC_ORD_ROUT",(char*)ptr_fml_Sbuffer,0,(char**)&ptr_fml_Rbuffer,&l_retbuf,0)== -1)
	{
		if(TPCODE != TPESVCFAIL)
		{
			/** errlog(c_Servicename,"S31260",TPMSG,(char*)c_user_id,l_sssn_id,c_errmsg); Commented in Ver 2.7 **/
			fn_errlog( c_Servicename , "S31265", TPMSG, c_errmsg.arr  );
		}
		else
		{
			Fget32(ptr_fml_Rbuffer,FML_ERR_MSG,0,(char*)c_errmsg.arr,0);
	  /**Ver 3.4 start**/
	  Fget32(ptr_fml_Rbuffer,FML_SQ_FLG,0,(char*)&c_edis_flg,0);
   
	  fn_userlog(c_Servicename,"c_edis_flg:%c:",c_edis_flg);
    
	  if (c_edis_flg == 'Y')
	  {
			 	l_retval = -1; /*Ver 3.5*/
  			Fadd32(ptr_fml_Rbuffer,FML_ACTN_ID,(char*)&l_retval,0); /*Ver 3.5*/

		fn_userlog(c_Servicename,"inside c_edis_flg Y");

	  	tpreturn(TPFAIL, 0L, (char *)ptr_fml_Rbuffer, 0, 0); 
	  }
	  /**Ver 3.4 end**/
		}
		fn_userlog(c_Servicename,"error :%s:",c_errmsg.arr);
		fn_do_error();
	}
  if(strcmp(c_product_cd,"CTD" ) != 0)
  {
	if(Fget32(ptr_fml_Rbuffer,FML_ORD_ORDR_RFRNC,0,(char*)sql_ord_ordr_rfrnc.arr,0) == -1)
	{
	  /** errlog(c_Servicename,"S31270",FMLMSG,(char*)c_user_id,l_sssn_id,c_errmsg); Commented in Ver 2.7 ***/
			fn_errlog( c_Servicename , "S31275", FMLMSG, c_errmsg.arr  );
	  fn_do_error();
	}
	if(Fget32(ptr_fml_Rbuffer,FML_TM,0,(char*)sql_ord_ordr_dt.arr,0) == -1)
	{
	  /** errlog(c_Servicename,"S31280",FMLMSG,(char*)c_user_id,l_sssn_id,c_errmsg); Commented in Ver 2.7 **/
	  fn_errlog( c_Servicename , "S31285", FMLMSG, c_errmsg.arr  );
	  fn_do_error();
	}
		/*** Ver 2.3 Starts ***/
	if(Fget32(ptr_fml_Rbuffer,FML_USR_ZIP_CD,0,(char*)c_pipe_id,0) == -1)
	{
	  /** errlog(c_Servicename,"S31290",FMLMSG,(char*)c_user_id,l_sssn_id,c_errmsg); Commented in Ver 2.7 **/
	  fn_errlog( c_Servicename , "S31295", FMLMSG, c_errmsg.arr  );
	  fn_do_error();
	}
	if(Fget32(ptr_fml_Rbuffer,FML_SQ_FLAG,0,(char*)&sql_ord_sq_flg,0) == -1)
	{
	  /** errlog(c_Servicename,"S31300",FMLMSG,(char*)c_user_id,l_sssn_id,c_errmsg); Commented in Ver 2.7 **/
	  fn_errlog( c_Servicename , "S31305", FMLMSG, c_errmsg.arr  );
	  fn_do_error();
	}
		/*** Ver 2.3 Ends ***/
	/***** Create a Order message tag ******************/
	strcpy ( c_temp_msg_tag,( char * ) &sql_ord_ordr_rfrnc.arr[10] );
	sprintf( c_tmp, "%02d", 1 ); /*** For a New order as Modification No will be 1 ****/
	strcat ( c_temp_msg_tag, c_tmp );

	i_xoa_typ += TYP_NEW_ORDER;   /*Added in Ver 1.5 for New order*/
	sprintf( c_tmp, "%02d", i_xoa_typ );
	strcat ( c_temp_msg_tag, c_tmp );
	/*******Commented for Ver 1.5
	strcat ( c_temp_msg_tag, "1" ); *** For a New order ****/
	l_message_tag = atoi(c_temp_msg_tag);

	sql_ord_ordr_dt.arr[17] = '\0';
	  fn_userlog(c_Servicename,"Pipe id %s",c_pipe_id);     /*** Ver 2.3 ***/
	if(DEBUG_MSG_LVL_3){
	  fn_userlog(c_Servicename,"Order time %s",sql_ord_ordr_dt.arr);
	  fn_userlog(c_Servicename,"Order reference %s",sql_ord_ordr_rfrnc.arr);
	  fn_userlog(c_Servicename,"Pipe id %s",c_pipe_id);     /*** Ver 2.3 ***/
	  fn_userlog(c_Servicename,"Square-off flag %c",sql_ord_sq_flg);  /*** Ver 2.3 ***/
	}
	i_err[0] = Fadd32(ptr_fml_Obuffer,FML_ORD_ORDR_RFRNC,(char*)sql_ord_ordr_rfrnc.arr,0);
	i_err[1] = Fadd32(ptr_fml_Obuffer,FML_GMS_ID,(char*)&l_message_tag,0);
	i_err[2] = Fadd32(ptr_fml_Obuffer,FML_TM,(char*)sql_ord_ordr_dt.arr,0);
  }	

	sql_ord_amt_blckd = 0;
	if(strcmp(c_channel,"WVP") == 0)
		strcpy(c_channel_dt,"VSA");	
	else if(strcmp(c_channel,"WWP") == 0)
		strcpy(c_channel_dt,"WE1");	
	else if(strcmp(c_channel,"WAP") == 0)
		strcpy(c_channel_dt,"APP");	
	/*** Start Ver 2.0 change ***/
	else if(strcmp(c_channel,"WE6") == 0)
		strcpy(c_channel_dt,"WEB");	
	/*** End Ver 2.0 change ***/		

	if(c_user_id[0] == BPID)
		strcat(c_channel_dt," DBC");

		if(DEBUG_MSG_LVL_0)     /** Added in VQC **/
	{
		  fn_userlog(c_Servicename,"THE CHANNEL_DT SEND HERE IS before add :%s:",c_channel);
	}

	/** Added for Ver 2.9 **
	if (c_msc_char[0] == 'E')
	{
		fn_userlog(c_Servicename,"Updating the ESOP Details");

		EXEC SQL
			UPDATE ELM_ESOP_LOAN_MSTR
			SET ELM_PLG_QTY = ELM_PLG_QTY - :sql_ord_ordr_qty,
			ELM_BLOCK_FOR_SALE = NVL(ELM_BLOCK_FOR_SALE,0) + :sql_ord_ordr_qty
			WHERE ELM_LOAN_REF = :c_esop_loan_ref;
	}
** End for Ver 2.9 **/

	l_retval = 0;
	strcpy(c_errmsg.arr,"Order placed successfully");
	i_err[7] = Fadd32(ptr_fml_Obuffer,FML_ACTN_ID,(char*)&l_retval,0);
	i_err[8] = Fadd32(ptr_fml_Obuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
	i_err[9] = Fadd32(ptr_fml_Obuffer,FML_SYMBOL,(char*)c_channel_dt,0);
	i_err[10] = Fadd32(ptr_fml_Obuffer,FML_XCHNG_SGMNT_CD,(char*)sql_ord_xchng_sgmnt_cd,0);
	i_err[11] = Fadd32(ptr_fml_Obuffer,FML_STTLMNT_NMBR,(char*)&sql_ord_xchng_sgmnt_sttlmnt,0);
	i_err[12] = Fadd32(ptr_fml_Obuffer,FML_QUOTE,(char*)&d_quote,0);
	i_err[13] = Fadd32(ptr_fml_Obuffer,FML_FUND_OUT_DT,(char*)c_py_in_date,0);   /* for ASP */
	i_err[14]= Fadd32(ptr_fml_Obuffer,FML_DEMAT_OUT_DT,(char*)c_py_out_date,0); /* for ASP */
	i_err[15]= Fadd32(ptr_fml_Obuffer,FML_SETL_END_DT,(char*)c_sttl_end_dt,0);  /* for ASP */
	i_err[16]= Fadd32(ptr_fml_Obuffer,FML_QUOTE_TIME,(char*)c_qt_tm,0); 				/* for ASP */
	i_err[17]= Fadd32(ptr_fml_Obuffer,FML_STK_STCK_NM,(char*)c_stck_nm,0); 			/* for ASP */
	i_err[18]= Fadd32(ptr_fml_Obuffer,FML_MRGN_PRDCT_PRCNTG,(char*)&d_mrgn_per,0);/* for ASP */
	i_err[19]= Fadd32(ptr_fml_Obuffer,FML_ORD_BRKRG_VL,(char*)&d_spot_brkrg_val,0); /* for ASP */
	i_err[20]= Fadd32(ptr_fml_Obuffer,FML_SEGMENT,(char*)sql_esm_series_desc.arr,0); /* for ASP *//*1.4*/
	i_err[21]= Fadd32(ptr_fml_Obuffer,FML_PLG_FLG,(char*)&c_plg_flg,0);
	/*** Ver 2.3 Starts ***/
	i_err[22]= Fadd32(ptr_fml_Obuffer,FML_ORD_ORDR_DT,(char*)sql_ord_ordr_dt.arr,0);
	i_err[23]= Fadd32(ptr_fml_Obuffer,FML_USR_ZIP_CD,(char*)c_pipe_id,0);
	i_err[24]= Fadd32(ptr_fml_Obuffer,FML_SQ_FLAG,(char*)&sql_ord_sq_flg,0);
	/*** Ver 2.3 Ends ***/
	/*** for(i = 0 ; i <= 20 ; i++) Commented In Ver 2.3 ***/
	for(i = 0 ; i <= 23 ; i++)   /*** Ver 2.3 ***/
	{
		if(i_err[i] == -1)
		{
			fn_userlog(c_Servicename,"Value of i is :%d:",i);
			/** errlog(c_Servicename,"S31310",FMLMSG,(char*)c_user_id,l_sssn_id,c_errmsg); Commented in Ver 2.7 **/
	  fn_errlog( c_Servicename , "S31315", FMLMSG, c_errmsg.arr  );
			fn_do_error();
		}
	}

	tpfree((char*)ptr_fml_Sbuffer);
	tpfree((char*)ptr_fml_Rbuffer);

	tpreturn(TPSUCCESS, 0L, (char *)ptr_fml_Obuffer, 0, 0);
}


int fn_do_error ()
{
	l_retval = -1;
	Fadd32(ptr_fml_Ibuffer,FML_ERR_MSG,(char*)c_errmsg.arr,0);
	Fadd32(ptr_fml_Ibuffer,FML_ACTN_ID,(char*)&l_retval,0);

	tpfree((char*)ptr_fml_Sbuffer);
	tpfree((char*)ptr_fml_Rbuffer);
	tpfree((char*)ptr_fml_Obuffer);

	tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0, 0);
}
