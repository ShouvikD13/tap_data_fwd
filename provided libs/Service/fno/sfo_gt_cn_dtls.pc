/**************************************************************************************
Service       : sfo_gt_cn_dtls

Purpose       : To get the details of contract notes from match and

Input Param   :
										EBA_MTCH_ACT_NO - Match no
										EBA_CNTRCT_ID		- Cntrt no /E/A conf nt
										OPERATION_TYP 	- 'F' or 'E'

Output        :  FOR 'FNO' 
									IP_VIEW_NM - Client name 
									INDX_CD Address ln 1
									UNDRLYNG Address ln 2
									UND_PRC_TM Address ln 3
									OP_VIEW_NM - Address ln 4
									OI_INDCTR - Tel no 
									BOARD_LOT_QTY - PAN no 
									EBA_MTCH_ACT_NO	- Match no
									EBA_CNTRCT_ID	- Contract no
									RCRD_DT - Contract date 
									SPRD_ORD_REF  - Order reference 
									TRD_RFRNC- Trade reference 
									TRD_DT	- Trade date 
									LST_TRD_QTY - Quantity 
									CLS_PRC - Price
									BST_BID_PRC - Total Brokerage value 
									MTCH_CNTCT_KEY  - Service tax
									BAL_AMT - Amount 
									SYMBOL - Contract specifications 
									(INFOSYSTCH-FUTSTK-26SEP2002-PA3200)
									TOTAL_PL - Amount 
									TRD_FLW	- Buy/Sell

								FOR 'EA'
									IP_VIEW_NM - Client name 
									INDX_CD Address ln 1
									UNDRLYNG Address ln 2
									UND_PRC_TM Address ln 3
									OP_VIEW_NM - Address ln 4
									OI_INDCTR - Tel no 
									BOARD_LOT_QTY - PAN no 
									EBA_MTCH_ACT_NO	- Match no
									EBA_CNTRCT_ID	- E/A note 
									RCRD_DT - E/A  date 
									ORDR_RFRNC-  Call /Put 
									TRD_DT - Expiry date 
									LST_TRD_QTY - Quantity 
									CLS_PRC - Sttlmnt Price
									BST_BID_PRC - Total Brokerage 
									MTCH_CNTCT_KEY - Service tax
									BAL_AMT - Amount 
									SYMBOL - Contract code 
									TOTAL_PL - Amount Payable
									TRD_FLW- E or A flag 
									STRIKE_PRC - Strike Price 


Tables        : FNO_CNTRCT_MSTR			 S
								FNO_CNTRCT_DTLS			 S
								EA_CONF_MSTR				 S
								EA_CONF_DTLS				 S

Author        : ICICI Infotech

Date          : 

Version       : 1.1 : Changes for NNF808 : Vidyayini Krish
							: 1.2 : Changes for IBM by Vidyayini Krish
							: 1.3 : Changes for Reallocation by Shamili

************************************************************************************/

/*  Standard include files    */

#include <stdio.h>
#include <stdlib.h>
#include <atmi.h>
#include <fml32.h>
#include <string.h>
#include <sqlca.h>
#define REC_LENGTH 2000
/*700+150+150*/

/*   User defined header files   */
#include <fo_fml_def.h>
#include <fn_log.h>
#include <fo.h>
#include <fo_view_def.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <eba_to_ors.h> /* Ver 1.1 */
#include <fn_read_debug_lvl.h> /* Ver 1.2 */

#define SETNULL(a) a.arr[a.len]='\0'

/********     Global variables                ***********************/
char        c_ServiceName[33] ;
char        c_cntrct_specs[20] ;

/*********    Program specific Macros         ***********************/

#define CURSOR_OUTPUT_FML 10 
#define UNIQUE_OUTPUT_FML 8

void SFO_GT_CN_DTLS(TPSVCINFO* rqst)
{
		/*	Local variables		*/

	int   i;                            /*    Loop counter */
	int   j;                            /*    Loop counter */
	int   arr_otpt[UNIQUE_OUTPUT_FML+1] ;    /*  Error code array for FML's  */
	int   cur_otpt[CURSOR_OUTPUT_FML+1] ;    /*  Error code array for FML's	 */ 
	char  c_user_id[9],match_accnt_no[12],trd_ref[16];
	char c_src_tx[10];
	char c_oper_type;
	long  li_session_id ;

	long  l_space_avl;
	long  l_space_rqd;
	long  l_bufferlength;

	char temp_ord[LEN_XCHNG_ACK]; /* Ver 1.1 Changed from 16 to 17 */
	char temp_trd[16];

	FBFR32  *ptr_ffo_temp_buffer;

	EXEC SQL INCLUDE "table/fno_cntrct_mstr.h";
	EXEC SQL INCLUDE "table/fno_cntrct_dtls.h";
	EXEC SQL INCLUDE "table/ea_conf_mstr.h";
	EXEC SQL INCLUDE "table/ea_conf_dtls.h";

/***   Tuxedo specific variables ***/

	FBFR32      *ptr_ffo_Ibuffer ;      /*   Input Buffer */
	FBFR32      *ptr_ffo_Obuffer ;      /*   Output Buffer */
	char        c_errmsg[256] ;

	strcpy(c_ServiceName,rqst->name) ;
	INITDBGLVL(c_ServiceName);

/***		Initializations ***/

	ptr_ffo_Ibuffer = (FBFR32*)rqst->data ;
	ptr_ffo_Obuffer = (FBFR32*)NULL ;

	/**    Retrive User Id and Session id **/

	if(Fget32(ptr_ffo_Ibuffer,FFO_USR_ID,0,(char*)c_user_id,0) == -1)
	{
		fn_errlog(c_ServiceName,"S31005",FMLMSG,c_errmsg) ;
		Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
		tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
	}

if(DEBUG_MSG_LVL_3){
	fn_userlog(c_ServiceName,"User id :%s ",c_user_id) ;
}

	if(Fget32(ptr_ffo_Ibuffer,FFO_SSSN_ID,0,(char*)&li_session_id,0) == -1)
	{
		fn_errlog(c_ServiceName,"S31010",FMLMSG,c_errmsg) ;
		Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
		tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
	}

if(DEBUG_MSG_LVL_3){
	fn_userlog(c_ServiceName,"Session id : %ld",li_session_id);
} 

/*		Retrieve Match Accnt */
	if(Fget32(ptr_ffo_Ibuffer,FFO_EBA_MTCH_ACT_NO,0,(char*)sql_fcm_usr_mtch_accno.arr,0) == -1)
	{
		fn_errlog(c_ServiceName,"S31015",FMLMSG,c_errmsg) ;
		Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
		tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
	}
	SETLEN(sql_fcm_usr_mtch_accno);

if(DEBUG_MSG_LVL_3){
	fn_userlog(c_ServiceName,"Match Accnt No : %s",sql_fcm_usr_mtch_accno.arr);
}

	if(Fget32(ptr_ffo_Ibuffer,FFO_NARRATION_ID,0,(char*)sql_fcm_cntrct_nmbr.arr,0) == -1)
	{
		fn_errlog(c_ServiceName,"S31020",FMLMSG,c_errmsg) ;
		Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
		tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
	}
	SETLEN(sql_fcm_cntrct_nmbr);

if(DEBUG_MSG_LVL_3){
	fn_userlog(c_ServiceName,"Cntrct No : %s",sql_fcm_cntrct_nmbr.arr);
}

	if(Fget32(ptr_ffo_Ibuffer,FFO_OPERATION_TYP,0,(char*)&c_oper_type,0) == -1)
	{
		fn_errlog(c_ServiceName,"S31025",FMLMSG,c_errmsg) ;
		Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
		tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
	}

if(DEBUG_MSG_LVL_3){
	fn_userlog(c_ServiceName,"Oper Type : %c",c_oper_type);
}
		
	l_space_rqd = Fneeded32(1,REC_LENGTH);

	/** Allocate memory for output buffer **/
		
	if((ptr_ffo_Obuffer=(FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN))==NULL)
	{
		fn_errlog(c_ServiceName,"S31030",TPMSG,c_errmsg) ;
		Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
		tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
	}

/***	Selecting data from FNO_CNTRCT_MSTR ***/

	if(c_oper_type == 'F')
	{
		strcpy((char *)sql_fcm_add_ln1.arr," ");
		strcpy((char *)sql_fcm_add_ln2.arr," ");
		strcpy((char *)sql_fcm_add_ln3.arr," ");
		strcpy((char *)sql_fcm_add_ln4.arr," ");

		EXEC SQL 
			SELECT 
					nvl(FCM_USR_NM,' '),
					nvl(FCM_ADD_LN1,' '),
					nvl(FCM_ADD_LN2,' '),
					nvl(FCM_ADD_LN3,' '),
					nvl(FCM_ADD_LN4,' '),
					NVL(FCM_PAN_NO,' '),
					NVL(FCM_TEL_NO,' '),
					FCM_CNTRCT_DT
			INTO
					:sql_fcm_usr_nm,
					:sql_fcm_add_ln1,
					:sql_fcm_add_ln2,
					:sql_fcm_add_ln3,
					:sql_fcm_add_ln4,
					:sql_fcm_pan_no,
					:sql_fcm_tel_no,
					:sql_fcm_cntrct_dt
			FROM FNO_CNTRCT_MSTR
			WHERE FCM_USR_MTCH_ACCNO=:sql_fcm_usr_mtch_accno
			AND FCM_CNTRCT_NMBR=:sql_fcm_cntrct_nmbr
			AND FCM_SIGN IS NULL;

		if(SQLCODE == NO_DATA_FOUND)
		{
			fn_errlog(c_ServiceName,"S31035",SQLMSG,c_errmsg) ;
			Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,"signed contract note not available",0);
			tpfree((char*)ptr_ffo_Obuffer) ;
			tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		}	
		else if (SQLCODE)
		{
			fn_errlog(c_ServiceName,"S31040",SQLMSG,c_errmsg) ;
			Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,"signed contract note not available",0);
			tpfree((char*)ptr_ffo_Obuffer) ;
			tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		}

		SETNULL(sql_fcm_usr_nm);
		SETNULL(sql_fcm_add_ln1);
		SETNULL(sql_fcm_add_ln2);
		SETNULL(sql_fcm_add_ln3);
		SETNULL(sql_fcm_add_ln4);
		SETNULL(sql_fcm_pan_no);
		SETNULL(sql_fcm_tel_no);
		SETNULL(sql_fcm_cntrct_dt);

if(DEBUG_MSG_LVL_3){
	fn_userlog(c_ServiceName,"Data for Contract note   <%s>",sql_fcm_cntrct_nmbr.arr);
	fn_userlog(c_ServiceName,"Contract date		 <%s>",sql_fcm_cntrct_dt.arr);
} 

/** Populate the output buffer with the unique values **/
		arr_otpt[0] = Fadd32(ptr_ffo_Obuffer,FFO_IP_VIEW_NM,(char*)sql_fcm_usr_nm.arr,0);
		arr_otpt[1] = Fadd32(ptr_ffo_Obuffer,FFO_INDX_CD,(char*)sql_fcm_add_ln1.arr,0);
		arr_otpt[2] = Fadd32(ptr_ffo_Obuffer,FFO_UNDRLYNG,(char*)sql_fcm_add_ln2.arr,0);
		arr_otpt[3] = Fadd32(ptr_ffo_Obuffer,FFO_UND_PRC_TM,(char*)sql_fcm_add_ln3.arr,0);
		arr_otpt[4] = Fadd32(ptr_ffo_Obuffer,FFO_OP_VIEW_NM,(char*)sql_fcm_add_ln4.arr,0);
		arr_otpt[5] = Fadd32(ptr_ffo_Obuffer,FFO_SERIES,(char*)sql_fcm_pan_no.arr,0);
		arr_otpt[6] = Fadd32(ptr_ffo_Obuffer,FFO_OI_INDCTR,(char*)sql_fcm_tel_no.arr,0);
		arr_otpt[7] = Fadd32(ptr_ffo_Obuffer,FFO_RCRD_DT,(char*)sql_fcm_cntrct_dt.arr,0);

		for(i=0;i < UNIQUE_OUTPUT_FML;i++)
		{
			if(arr_otpt[i]==-1)
			{
				fn_errlog(c_ServiceName,"S31045",FMLMSG,c_errmsg);
				Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
				tpfree((char*)ptr_ffo_Obuffer) ;
				tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
			}
		}

if(DEBUG_MSG_LVL_3){
	fn_userlog(c_ServiceName,"before declaring cursor <%s>,<%s>",sql_fcm_usr_mtch_accno.arr,sql_fcm_cntrct_nmbr.arr);
} /* Ver 1.2  removed ; */
			
		 EXEC SQL 
		 DECLARE get_fno_det CURSOR for
		 SELECT to_char(nvl(FCD_ORDR_REF,0)), /* Ver 1.1 */
		 				to_char(FCD_TRD_REF),
		 				FCD_TRD_DT,
		 				FCD_TRD_FLW,
		 				FCD_PRC,
		 				FCD_QTY,
		 				FCD_BRKG,
		 				to_char(FCD_SRC_TX),
		 				FCD_STRK_PRC,
		 				FCD_CNTRCT_AMT,
						FCD_CNTRCT_SPECS
		 FROM FNO_CNTRCT_DTLS
		 WHERE FCD_CNTRCT_NMBR=:sql_fcm_cntrct_nmbr
		 ORDER BY nvl(FCD_ORDR_REF,0),FCD_TRD_FLW;

		 if(SQLCODE)
		 {
				fn_errlog(c_ServiceName,"S31050",SQLMSG,c_errmsg) ;
				Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
				tpfree((char*)ptr_ffo_Obuffer) ;
				tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		 }

/*        Open the cursor */

		 EXEC SQL
			OPEN get_fno_det;
			
		 if(SQLCODE)
		 {
				fn_errlog(c_ServiceName,"S31055",SQLMSG,c_errmsg) ;
				Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
				tpfree((char*)ptr_ffo_Obuffer) ;
				tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		 }
		 j=0;

		 while(1)
		 {
				EXEC SQL 	
					FETCH get_fno_det 
					INTO :temp_ord,
							 :temp_trd,
							 :sql_fcd_trd_dt,
							 :sql_fcd_trd_flw,
							 :sql_fcd_prc,
							 :sql_fcd_qty,
							 :sql_fcd_brkg,
							 :c_src_tx,
							 :sql_fcd_strk_prc,
							 :sql_fcd_cntrct_amt;
				
				if((SQLCODE==NO_DATA_FOUND)&&(j==0))
				{
					EXEC SQL
					CLOSE get_fno_det;
					fn_errlog(c_ServiceName,"S31060",SQLMSG,c_errmsg);
					Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,"matching data not found",0) ;
					tpfree((char*)ptr_ffo_Obuffer) ;
					tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
				}
				else if(SQLCODE==NO_DATA_FOUND)
				{
					EXEC SQL
					CLOSE get_fno_det;
					break;
				}
				else if(SQLCODE)
				{
					EXEC SQL
					CLOSE get_fno_det;
					fn_errlog(c_ServiceName,"S31065",SQLMSG,c_errmsg);
					Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
					tpfree((char*)ptr_ffo_Obuffer) ;
					tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
				}
				SETNULL(sql_fcd_trd_dt);
				SETNULL(sql_fcd_cntrct_specs);

				l_space_avl = Funused32(ptr_ffo_Obuffer);

				if (l_space_avl < l_space_rqd)
				{
						/* Reallocate a output buffer */

					/*l_bufferlength=strlen(sql_fcm_usr_nm.arr) 
													+ strlen(sql_fcm_usr_nm.arr)
													+ strlen(sql_fcm_add_ln1.arr)
													+ strlen(sql_fcm_add_ln2.arr)
													+ strlen(sql_fcm_add_ln3.arr)
													+ strlen(sql_fcm_add_ln4.arr)
													+ strlen(sql_fcm_pan_no.arr)
													+ strlen(sql_fcm_tel_no.arr)
													+ strlen(sql_fcm_cntrct_dt.arr)
													+ sizeof(temp_ord)
													+ sizeof(temp_trd)
													+ strlen(sql_fcd_trd_dt.arr)
													+ sizeof(sql_fcd_qty)
													+ sizeof(sql_fcd_prc)
													+ sizeof(sql_fcd_brkg)
													+ sizeof(sql_fcd_src_tx)
													+ sizeof(sql_fcd_cntrct_amt) + 1
													+ strlen(sql_fcd_cntrct_specs.arr)+1000;

					*/

					l_bufferlength = Fsizeof32(ptr_ffo_Obuffer) + MIN_FML_BUF_LEN * 10;
					ptr_ffo_temp_buffer=(FBFR32 *)tprealloc((char *)ptr_ffo_Obuffer,l_bufferlength);

					if (ptr_ffo_temp_buffer == NULL)
					{
						fn_errlog(c_ServiceName,"S31070",FMLMSG,c_errmsg);
						Fadd32( ptr_ffo_Ibuffer,FFO_ERR_MSG, c_errmsg, 0 );
						tpfree((char *)ptr_ffo_Obuffer);
						tpreturn(TPFAIL,0L, (char *)ptr_ffo_Ibuffer, 0L, 0);
					}
					else
					{
						ptr_ffo_Obuffer = ptr_ffo_temp_buffer;
						/*Finit32(ptr_ffo_temp_buffer, Fsizeof32(ptr_ffo_temp_buffer)); * Ver 1.2 Fsizeof to Fsizeof32 */ /*1.3*/
					}
				}
				cur_otpt[0]=Fadd32(ptr_ffo_Obuffer,FFO_SPRD_ORD_REF,(char*)temp_ord,0);
				cur_otpt[1]=Fadd32(ptr_ffo_Obuffer,FFO_TRD_RFRNC,(char*)temp_trd,0);
				cur_otpt[2]=Fadd32(ptr_ffo_Obuffer,FFO_TRD_DT,(char*)sql_fcd_trd_dt.arr,0);
				cur_otpt[3]=Fadd32(ptr_ffo_Obuffer,FFO_LST_TRD_QTY,(char*)&sql_fcd_qty,0);
				cur_otpt[4]=Fadd32(ptr_ffo_Obuffer,FFO_CLS_PRC,(char*)&sql_fcd_prc,0);
				cur_otpt[5]=Fadd32(ptr_ffo_Obuffer,FFO_BST_BID_PRC,(char*)&sql_fcd_brkg,0);
				cur_otpt[6]=Fadd32(ptr_ffo_Obuffer,FFO_MTCH_CNTCT_KEY,(char*)c_src_tx,0);
				cur_otpt[7]=Fadd32(ptr_ffo_Obuffer,FFO_BAL_AMT,(char*)&sql_fcd_cntrct_amt,0);
				cur_otpt[8]=Fadd32(ptr_ffo_Obuffer,FFO_TRD_FLW,(char*)&sql_fcd_trd_flw,0);
				cur_otpt[9]=Fadd32(ptr_ffo_Obuffer,FFO_SYMBOL,(char*)sql_fcd_cntrct_specs.arr,0);

        for(i=0;i <= CURSOR_OUTPUT_FML;i++)
				{
					if(cur_otpt[i]==-1)
					{
						fn_errlog(c_ServiceName,"S31075",FMLMSG,c_errmsg);
						Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
						tpfree((char*)ptr_ffo_Obuffer) ;
						tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
					}
				}
				j++;
		 }/*End of while */

	  EXEC SQL
			CLOSE get_fno_det;

		if(SQLCODE)
		{
			fn_errlog(c_ServiceName,"S31080",SQLMSG,c_errmsg) ;
			Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
			tpfree((char*)ptr_ffo_Obuffer) ;
			tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		}
	}
	else if(c_oper_type =='E')
	{
		strcpy((char *)sql_ecm_add_ln1.arr," ");
		strcpy((char *)sql_ecm_add_ln2.arr," ");
		strcpy((char *)sql_ecm_add_ln3.arr," ");
		strcpy((char *)sql_ecm_add_ln4.arr," ");

		EXEC SQL 
		SELECT ECM_USR_NM,
					 ECM_ADD_LN1,
					 ECM_ADD_LN2,
					 ECM_ADD_LN3,
					 ECM_ADD_LN4,
					 ECM_PAN_NO,
					 ECM_TEL_NO,
					 ECM_TOTAL_AMOUNT
		INTO 	:sql_ecm_usr_nm,
					:sql_ecm_add_ln1,
					:sql_ecm_add_ln2,
					:sql_ecm_add_ln3,
					:sql_ecm_add_ln4,
					:sql_ecm_pan_no,
					:sql_ecm_tel_no,
					:sql_ecm_total_amount
		FROM EA_CONF_MSTR
		WHERE ECM_USR_MTCH_ACCNO=:sql_fcm_usr_mtch_accno
		AND ECM_CNTRCT_NMBR=:sql_fcm_cntrct_nmbr
		AND ECM_SIGN IS NULL;
			
		if(SQLCODE == NO_DATA_FOUND)
		{
			fn_errlog(c_ServiceName,"S31085",SQLMSG,c_errmsg) ;
			Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,"signed contract note not available",0);
			tpfree((char*)ptr_ffo_Obuffer) ;
			tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		}
		else if (SQLCODE)
		{
			fn_errlog(c_ServiceName,"S31090",SQLMSG,c_errmsg) ;
			Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,"signed contract note not available",0);
			tpfree((char*)ptr_ffo_Obuffer) ;
			tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		}
		SETNULL(sql_ecm_usr_nm);
		SETNULL(sql_ecm_tel_no);
		SETNULL(sql_ecm_pan_no);
		SETNULL(sql_ecm_add_ln1);
		SETNULL(sql_ecm_add_ln2);
		SETNULL(sql_ecm_add_ln3);
		SETNULL(sql_ecm_add_ln4);

if(DEBUG_MSG_LVL_3){
	fn_userlog(c_ServiceName," Data for Contract note <%s>",sql_fcm_cntrct_nmbr.arr);
	fn_userlog(c_ServiceName," Contract date <%s>",sql_fcm_cntrct_dt.arr);
	fn_userlog(c_ServiceName," Add1 <%s>",sql_ecm_add_ln1.arr);
	fn_userlog(c_ServiceName," Add2 <%s>",sql_ecm_add_ln2.arr);
	fn_userlog(c_ServiceName," Add3 <%s>",sql_ecm_add_ln3.arr);
	fn_userlog(c_ServiceName," Add4 <%s>",sql_ecm_add_ln4.arr);
	fn_userlog(c_ServiceName," # no <%s>",sql_ecm_tel_no.arr);

}

/*					Populate  output buffer */

		arr_otpt[0] = Fadd32(ptr_ffo_Obuffer,FFO_IP_VIEW_NM,(char*)sql_ecm_usr_nm.arr,0);
		arr_otpt[1] = Fadd32(ptr_ffo_Obuffer,FFO_INDX_CD,(char*)sql_ecm_add_ln1.arr,0);
		arr_otpt[2] = Fadd32(ptr_ffo_Obuffer,FFO_UNDRLYNG,(char*)sql_ecm_add_ln2.arr,0);
		arr_otpt[3] = Fadd32(ptr_ffo_Obuffer,FFO_UND_PRC_TM,(char*)sql_ecm_add_ln3.arr,0);
		arr_otpt[4] = Fadd32(ptr_ffo_Obuffer,FFO_OP_VIEW_NM,(char*)sql_ecm_add_ln4.arr,0);
		arr_otpt[5] = Fadd32(ptr_ffo_Obuffer,FFO_SERIES,(char*)sql_ecm_pan_no.arr,0);
		arr_otpt[6] = Fadd32(ptr_ffo_Obuffer,FFO_OI_INDCTR,(char*)sql_ecm_tel_no.arr,0);
		arr_otpt[7] = Fadd32(ptr_ffo_Obuffer,FFO_TOTAL_PL,(char*)&sql_ecm_total_amount,0);

		for(i=0;i < UNIQUE_OUTPUT_FML;i++)
		{
			if(arr_otpt[i]==-1)
			{
				fn_errlog(c_ServiceName,"S31095",FMLMSG,c_errmsg);
				Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
				tpfree((char*)ptr_ffo_Obuffer) ;
				tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
			}
		}
if(DEBUG_MSG_LVL_3){
fn_userlog(c_ServiceName,"before declaring EA cursor <%s>,<%s>",sql_fcm_usr_mtch_accno.arr,sql_fcm_cntrct_nmbr.arr);
} /* Ver 1.2 removed ; */

		EXEC SQL
			DECLARE get_ea_det CURSOR for
			SELECT ECD_EA_DT,
						 ECD_QTY,
						 ECD_BRKG,
						 to_char(ECD_SRC_TX),
						 ECD_STRK_PRC,
						 ECD_EA_FLG,
						 ECD_SETLMNT_PRC,
						 ECD_EXPR_DT,
						 ECD_CNTRCT_AMT,
						 ECD_CNTRCT_INST_TYP,
						 ECD_CNTRCT_OPTN_TYP,
						 ECD_CNTRCT_SYMBL
			FROM EA_CONF_DTLS
			WHERE ECD_CNTRCT_NMBR=:sql_fcm_cntrct_nmbr
			ORDER BY ECD_BRKG;

		if(SQLCODE)
		{
			fn_errlog(c_ServiceName,"S31100",SQLMSG,c_errmsg);
			Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0);
			tpfree((char*)ptr_ffo_Obuffer);
			tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0);
		}

/*		Open the cursor */

		EXEC SQL
				 OPEN get_ea_det;

		if(SQLCODE)
		{
			fn_errlog(c_ServiceName,"S31105",SQLMSG,c_errmsg) ;
			Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
			tpfree((char*)ptr_ffo_Obuffer) ;
			tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		}

		j=0;

		while(1)
		{
			EXEC SQL
				FETCH get_ea_det
				INTO :sql_ecd_ea_dt,
						 :sql_ecd_qty,
						 :sql_ecd_brkg,
						 :c_src_tx,
						 :sql_ecd_strk_prc,
						 :sql_ecd_ea_flg,
						 :sql_ecd_setlmnt_prc,
						 :sql_ecd_expr_dt,
						 :sql_ecd_cntrct_amt,
						 :sql_ecd_cntrct_inst_typ,
						 :sql_ecd_cntrct_optn_typ,
						 :sql_ecd_cntrct_symbl;

			if((SQLCODE==NO_DATA_FOUND)&&(j==0))
			{
				EXEC SQL
					CLOSE get_ea_det;
				fn_errlog(c_ServiceName,"S31110",SQLMSG,c_errmsg);
				Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,"Matching data not found",0) ;
				tpfree((char*)ptr_ffo_Obuffer) ;
				tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
			}
			else if(SQLCODE==NO_DATA_FOUND)
			{
				EXEC SQL
					CLOSE get_ea_det;
				break;
			}
			else if(SQLCODE)
			{
				EXEC SQL
					CLOSE get_fno_det;
				fn_errlog(c_ServiceName,"S31115",SQLMSG,c_errmsg);
				Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
				tpfree((char*)ptr_ffo_Obuffer) ;
				tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
			}
			SETNULL(sql_ecd_ea_dt);
			SETNULL(sql_ecd_expr_dt);
			SETNULL(sql_ecd_cntrct_optn_typ);
			SETNULL(sql_ecd_cntrct_inst_typ);
			SETNULL(sql_ecd_cntrct_symbl);

			strcpy(c_cntrct_specs,"");
			strcat(c_cntrct_specs,(char *)sql_ecd_cntrct_symbl.arr);
			strcat(c_cntrct_specs,"-");
			strcat(c_cntrct_specs,(char *)sql_ecd_cntrct_inst_typ.arr);

			l_space_avl = Funused32(ptr_ffo_Obuffer);

			if (l_space_avl < l_space_rqd)
			{
					/* Reallocate a output buffer */

				l_bufferlength = Fsizeof32(ptr_ffo_Obuffer) + MIN_FML_BUF_LEN * 10;
				ptr_ffo_temp_buffer=(FBFR32 *)tprealloc((char *)ptr_ffo_Obuffer,l_bufferlength);
				if (ptr_ffo_temp_buffer == NULL)
				{
					fn_errlog(c_ServiceName,"S31120",FMLMSG,c_errmsg);
					Fadd32( ptr_ffo_Ibuffer,FFO_ERR_MSG, c_errmsg, 0 );
					tpfree((char *)ptr_ffo_Obuffer);
					tpreturn(TPFAIL,0L, (char *)ptr_ffo_Ibuffer, 0L, 0);
				}
				else
				{
					ptr_ffo_Obuffer = ptr_ffo_temp_buffer;
					/*Finit32(ptr_ffo_temp_buffer, Fsizeof32(ptr_ffo_temp_buffer)); * Ver 1.2 Fsizeof to Fsizeof32 */ /*1.3*/
				}
			}

			cur_otpt[0]=Fadd32(ptr_ffo_Obuffer,FFO_ORDR_RFRNC,(char*)sql_ecd_cntrct_optn_typ.arr,0);
			cur_otpt[1]=Fadd32(ptr_ffo_Obuffer,FFO_TRD_DT,(char*)sql_ecd_ea_dt.arr,0);
			cur_otpt[2]=Fadd32(ptr_ffo_Obuffer,FFO_LST_TRD_QTY,(char*)&sql_ecd_qty,0);
			cur_otpt[3]=Fadd32(ptr_ffo_Obuffer,FFO_CLS_PRC,(char*)&sql_ecd_setlmnt_prc,0);
			cur_otpt[4]=Fadd32(ptr_ffo_Obuffer,FFO_BST_BID_PRC,(char*)&sql_ecd_brkg,0);
			cur_otpt[5]=Fadd32(ptr_ffo_Obuffer,FFO_MTCH_CNTCT_KEY,(char*)c_src_tx,0);
			cur_otpt[6]=Fadd32(ptr_ffo_Obuffer,FFO_BAL_AMT,(char*)&sql_ecd_cntrct_amt,0);
			cur_otpt[7]=Fadd32(ptr_ffo_Obuffer,FFO_TRD_FLW,(char*)&sql_ecd_ea_flg,0);
			cur_otpt[8]=Fadd32(ptr_ffo_Obuffer,FFO_STRIKE_PRC,(char*)&sql_ecd_strk_prc,0);
			cur_otpt[9]=Fadd32(ptr_ffo_Obuffer,FFO_SYMBOL,c_cntrct_specs,0);
			
			for(i=0;i <= CURSOR_OUTPUT_FML;i++)
			{
				if(cur_otpt[i]==-1)
				{
						fn_errlog(c_ServiceName,"S31125",FMLMSG,c_errmsg);
						Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
						tpfree((char*)ptr_ffo_Obuffer) ;
						tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
				}
			}
			j++;
		}/*End of while */
		EXEC SQL
			CLOSE get_ea_det;

		if(SQLCODE)
		{
			fn_errlog(c_ServiceName,"S31130",SQLMSG,c_errmsg) ;
			Fadd32(ptr_ffo_Ibuffer,FFO_ERR_MSG,c_errmsg,0) ;
			tpfree((char*)ptr_ffo_Obuffer) ;
			tpreturn(TPFAIL,0L,(char *)ptr_ffo_Ibuffer,0L,0) ;
		}
	}

if(DEBUG_MSG_LVL_3){
	fn_userlog(c_ServiceName,"Service completed successfully  ");
}
	tpreturn(TPSUCCESS,0,(char *)ptr_ffo_Obuffer,0L,0) ;

}/*End of service */
