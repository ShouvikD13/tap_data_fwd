/******************************************************************************/
/*	Program           : SFO_DLVRY_UPDT																				*/
/*																																						*/
/*	Input             :	FFO_SSSN_ID																						*/
/*											FFO_PRDCT_TYP																					*/	
/*											FFO_OPERATION_TYP																			*/
/*											FFO_OPT_TYP																						*/
/*											FFO_USR_ID																						*/
/*											FFO_UNDRLYNG																					*/
/*											FFO_XCHNG_CD																					*/
/*											FFO_EBA_MTCH_ACT_NO																		*/
/*											FFO_EXER_TYP																					*/
/*											FFO_CTGRY_INDSTK																			*/	
/*											FFO_EXPRY_DT																					*/
/*											FFO_STRK_PRC																					*/
/*											FFO_OPNPSTN_FLW																				*/	
/*											FFO_STLMNT_PRC																				*/
/*											FFO_LST_TRD_QTY																				*/	
/*											FFO_PI_PO_AMT 																				*/
/*											FFO_DLVRY_ALLWD																				*/
/*											FFO_CHANNEL																						*/
/*																																						*/
/*	Description 			: */
/*																																						*/
/*	Log								:	1.0	31-Mar-2021		Kiran Itkar													*/
/*																																						*/
/******************************************************************************/
/*	1.0			- 	New Release																										*/
/*	1.1			- 	Physical settlement in Stock Derivatives minor development.  	*/
/*																																						*/
/******************************************************************************/	
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <math.h>
/*Add header files here */
#include <fml_def.h>
/*#include <fo_view_def.h>*/
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_session.h>
#include <fn_ddr.h>
#include <fo_view_def.h>
#include <fn_read_debug_lvl.h>

void SFO_DLVRY_UPDT( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

	int 	i_err[15];
	int 	i_ferr[15];
	int 	i_trnsctn;
	int 	i;
	int		i_actn_id;
	char 	c_ServiceName[33];
	char 	c_err_msg[256];
	char 	c_option_type='\0';
	char 	c_rqst_typ='\0';
	char  c_channel[4];
	char  c_usr_id[15];
	char  c_xchng_cd[4];
	char  c_cln_mtch_accnt[11];
	char  c_prd_typ='\0';
	char  c_undrlyng[7];
	char  c_expry_dt[23];
	char  c_exrc_typ='\0';
	char  c_opt_typ='\0';
	char  c_ctgry_indstk='\0';
	char  c_rout_crt[4];
	char	c_dlvry_flg='\0';
	char 	c_span_flg       ='\0';
	char 	c_opnpstn_flw='\0';
	char c_edis_flg='\0';
	char c_edis_flw='\0';
	char c_isin_no[21];
	char c_dp_id[9];
	char c_dp_clnt_id[9];	
	char c_provisional_prcrun_flg='\0';
	char c_dlvry_enbl_flg='\0';

	long  l_eba_cntrct_id=0;
	long  l_ca_lvl=0;
	long  l_strike_prc=0;
	long	l_dlvry_prc=0;
	long	l_dlvry_qty=0;
	long	li_sssn_id=0;
	long 	l_btst_blck_qty=0;
	long	l_opnpstn_qty=0;
	double	d_dlvry_amnt=0;
	double d_mndt_free_qty=0;
	double d_lst_trd_prc=0;

  /** ver 1.1 starts ***/
  double d_opn_pos_val = 0.0;
  double d_ltp_calc = 0.0;
  double d_funds_to_display = 0.0;
  double d_wght_price = 0.0;
  double d_val = 0.0;
  char c_msg_to_display[200]="\0";
  /*** ver 1.1 ends **/

	int i_returncode;

	EXEC SQL BEGIN DECLARE SECTION;
    struct vw_usr_prfl st_usr_prfl;
		struct vw_err_msg st_err_msg;
	EXEC SQL END DECLARE SECTION;

	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
  /*INITDBGLVL(c_ServiceName); */

	MEMSET(c_err_msg);

	i_err 	[ 0 ]   = Fget32( ptr_fml_Ibuf ,FFO_USR_ID,0,(char *) c_usr_id,0); 
  i_ferr	[ 0 ]   = Ferror32;
  i_err   [ 1 ]   = Fget32( ptr_fml_Ibuf ,FFO_SSSN_ID,0,(char *) &li_sssn_id,0);
  i_ferr 	[ 1 ]   = Ferror32;
  i_err   [ 2 ]   = Fget32( ptr_fml_Ibuf ,FFO_XCHNG_CD,0,(char *) c_xchng_cd,0);
  i_ferr 	[ 2 ]   = Ferror32;
  i_err   [ 3 ]   = Fget32( ptr_fml_Ibuf ,FFO_EBA_MTCH_ACT_NO,0,(char *) c_cln_mtch_accnt,0);
  i_ferr 	[ 3 ]   = Ferror32;
  i_err   [ 4 ]   = Fget32( ptr_fml_Ibuf ,FFO_PRDCT_TYP,0,(char *) &c_prd_typ,0);
  i_ferr 	[ 4 ]   = Ferror32;
  i_err   [ 5 ]   = Fget32( ptr_fml_Ibuf ,FFO_UNDRLYNG,0,(char *) c_undrlyng,0);
  i_ferr 	[ 5 ]   = Ferror32;
  i_err   [ 6 ]   = Fget32( ptr_fml_Ibuf ,FFO_EXPRY_DT,0,(char *) c_expry_dt,0);
  i_ferr 	[ 6 ]   = Ferror32;
  i_err   [ 7 ]   = Fget32( ptr_fml_Ibuf ,FFO_EXER_TYP,0,(char *) &c_exrc_typ,0);
  i_ferr 	[ 7 ]   = Ferror32;
  i_err   [ 8 ]   = Fget32( ptr_fml_Ibuf ,FFO_OPT_TYP,0,(char *) &c_opt_typ,0);
  i_ferr 	[ 8 ]   = Ferror32;
  i_err   [ 9 ]   = Fget32( ptr_fml_Ibuf ,FFO_STRK_PRC,0,(char *) &l_strike_prc,0);
  i_ferr 	[ 9 ]   = Ferror32;
  i_err   [ 10 ]   = Fget32( ptr_fml_Ibuf ,FFO_CTGRY_INDSTK,0,(char *) &c_ctgry_indstk,0);
  i_ferr 	[ 10 ]   = Ferror32;
  i_err   [ 11 ]   = Fget32( ptr_fml_Ibuf ,FFO_OPERATION_TYP,0,(char *) &c_dlvry_flg,0);
  i_ferr 	[ 11 ]   = Ferror32;
  i_err   [ 12 ]  = Fget32( ptr_fml_Ibuf ,FFO_OPNPSTN_FLW,0,(char *) &c_rout_crt,0);
  i_ferr 	[ 12 ]  = Ferror32;
  i_err   [ 13 ]  = Fget32( ptr_fml_Ibuf ,FFO_CHANNEL,0,(char *)  c_channel,0);
  i_ferr 	[ 13 ]  = Ferror32;

	for(i=0;i<14;i++)
  {
    if(i_err[i] == -1 )
    {
      fn_userlog( c_ServiceName, " Error in field no %d", i);
      fn_errlog(c_ServiceName, "S31005", Fstrerror32(i_ferr[i]), c_err_msg);
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
    }
  }

	rtrim(c_cln_mtch_accnt);
	rtrim(c_xchng_cd);
	rtrim(c_undrlyng);
	rtrim(c_expry_dt);


if(DEBUG_MSG_LVL_3)
{
	fn_userlog(c_ServiceName,"c_cln_mtch_accnt :%s:",c_cln_mtch_accnt);
	fn_userlog(c_ServiceName,"c_usr_id :%s:",c_usr_id);
	fn_userlog(c_ServiceName,"c_xchng_cd :%s:",c_xchng_cd);
	fn_userlog(c_ServiceName,"c_prd_typ :%c:",c_prd_typ);
	fn_userlog(c_ServiceName,"c_undrlyng :%s:",c_undrlyng);
	fn_userlog(c_ServiceName,"c_expry_dt :%s:",c_expry_dt);
	fn_userlog(c_ServiceName,"c_exrc_typ  :%c:",c_exrc_typ);
	fn_userlog(c_ServiceName,"c_opt_typ :%c:",c_opt_typ);
	fn_userlog(c_ServiceName,"l_strike_prc :%ld:",l_strike_prc);
	fn_userlog(c_ServiceName,"c_ctgry_indstk :%c:",c_ctgry_indstk);
	fn_userlog(c_ServiceName,"c_dlvry_flg1 :%c:",c_dlvry_flg);
}
	strcpy( st_usr_prfl.c_user_id, c_usr_id );
  st_usr_prfl.l_session_id = li_sssn_id;
	strcpy( st_usr_prfl.c_cln_mtch_accnt,c_cln_mtch_accnt);
	fn_cpy_ddr ( st_usr_prfl.c_rout_crt );

	/* Check the session */
  i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl,
                                             &st_err_msg ) ;

  if ( i_returncode == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/*** Check for provisional process is run or not ***/
	EXEC SQL
		SELECT  NVL(FLM_DLVRYENBL_FLG,'N'),
     				NVL(FLM_PRVSLN_PRCSRUN_FLG,'N')
    INTO    :c_dlvry_enbl_flg,
            :c_provisional_prcrun_flg               
    FROM    FLM_FO_LODM_MSTR
    WHERE   FLM_UNDRLYNG = :c_undrlyng
    AND     FLM_EOS_DT >= ( SELECT EXG_NXT_TRD_DT FROM EXG_XCHNG_MSTR WHERE EXG_XCHNG_CD ='NFO'); 

  if( (SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_userlog( c_ServiceName,"Error while selecting provisional for underlying flag");
    fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg  );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
  }
  else if ( SQLCODE == NO_DATA_FOUND )
  { 
    EXEC SQL
     	SELECT  NVL(FLM_DLVRYENBL_FLG,'N'),
     					NVL(FLM_PRVSLN_PRCSRUN_FLG,'N')
      INTO    :c_dlvry_enbl_flg,
         			:c_provisional_prcrun_flg               
      FROM    FLM_FO_LODM_MSTR
      WHERE   FLM_UNDRLYNG = 'ALL'
      AND     FLM_EOS_DT >= ( SELECT EXG_NXT_TRD_DT FROM EXG_XCHNG_MSTR WHERE EXG_XCHNG_CD ='NFO'); 

     if( (SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ) )
     {
      	fn_userlog( c_ServiceName,"Error while selecting provisional for all flag");
    		fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg  );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
     }
  }

	if( c_provisional_prcrun_flg == 'Y' )
	{
   	fn_userlog( c_ServiceName,"Provisional process is run and Choose delivery/non delivery option is not allowed now.");
    strcpy(c_err_msg,"Provisional process is run and Choose delivery/non delivery option is not allowed now.");
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
	}
	if( c_dlvry_enbl_flg != 'Y' )
	{
		fn_userlog( c_ServiceName,"Choose delivery/non delivery option is not allowed currently.");
    strcpy(c_err_msg,"Choose delivery/non delivery option is not allowed currently.");
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
	}
	/*** Checking customer is SPAN or normal ***/


  EXEC SQL
  SELECT  NVL(CLM_SPAN_ALLWD,'N')
  INTO    :c_span_flg
  FROM    CLM_CLNT_MSTR
  WHERE   CLM_MTCH_ACCNT  = :c_cln_mtch_accnt;

  if(SQLCODE  !=  0 )
  {
    fn_userlog( c_ServiceName,"Error while selecting SPAN flag");
    fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg  );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
  }

	fn_userlog( c_ServiceName,"SPAN flag is |%c|",c_span_flg);

	if ( c_span_flg == 'Y' )
  {
    EXEC SQL
      SELECT 	NVL(FTQ_LST_TRD_PRC,0),
	     				NVL(FCP_DLVRY_QTY_BLCKD,0),
							FCP_OPNPSTN_FLW,
              NVL(FTQ_LST_TRD_PRC,0), /*** ver 1.1 ***/
							ABS(FCP_OPNPSTN_QTY)	
      INTO   	:l_dlvry_prc,
	     				:l_dlvry_qty,
							:c_opnpstn_flw,
              :d_ltp_calc,/** ver 1.1 **/    
							:l_opnpstn_qty
      FROM   	FCP_FO_SPN_CNTRCT_PSTN,FTQ_FO_TRD_QT
      WHERE  	FCP_XCHNG_CD       	= :c_xchng_cd
			AND			FCP_XCHNG_CD			 	=	FTQ_XCHNG_CD
      AND    	FCP_CLM_MTCH_ACCNT 	= :c_cln_mtch_accnt
      AND    	FCP_PRDCT_TYP      	= :c_prd_typ
			AND			FCP_PRDCT_TYP				=	FTQ_PRDCT_TYP	
      AND    	FCP_OPT_TYP        	= :c_opt_typ
			AND			FCP_OPT_TYP					=	FTQ_OPT_TYP
      AND    	FCP_EXER_TYP       	= :c_exrc_typ
			AND			FCP_EXER_TYP				=	FTQ_EXER_TYP
      AND    	FCP_UNDRLYNG       	= :c_undrlyng
			AND			FCP_UNDRLYNG				=	FTQ_UNDRLYNG
      AND    	FCP_EXPRY_DT       	= :c_expry_dt
			AND			FCP_EXPRY_DT				=	FTQ_EXPRY_DT
      AND    	FCP_STRK_PRC       	= :l_strike_prc
			AND			FCP_STRK_PRC				=	FTQ_STRK_PRC
      AND    	FCP_INDSTK         	= :c_ctgry_indstk
			AND			FCP_INDSTK					=	FTQ_INDSTK;

  }
  else if ( c_span_flg == 'N' )
  {
    if ( c_prd_typ == 'F' )
    {
      EXEC SQL
	 			SELECT 	NVL(FTQ_LST_TRD_PRC,0),
								NVL(FFP_DLVRY_QTY_BLCKD,0),
								FFP_OPNPSTN_FLW,
								ABS(FFP_OPNPSTN_QTY),
                abs(NVL(FFP_MTM_OPN_VAL,0)), /** ver 1.1 **/
                NVL(FTQ_LST_TRD_PRC,0) /*** ver 1.1 ***/
				INTO		:l_dlvry_prc,
								:l_dlvry_qty,
								:c_opnpstn_flw,
								:l_opnpstn_qty,
                :d_opn_pos_val, /*** ver 1.1 ****/
                :d_ltp_calc /*** ver 1.1 ****/
         FROM		FFP_FO_FUTURES_PSTN,FTQ_FO_TRD_QT
         WHERE  FFP_XCHNG_CD        = :c_xchng_cd
				 AND		FFP_XCHNG_CD				=	FTQ_XCHNG_CD
         AND    FFP_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
         AND    FFP_PRDCT_TYP       = :c_prd_typ
				 AND		FFP_PRDCT_TYP				=	FTQ_PRDCT_TYP
         AND    FFP_EXER_TYP        = :c_exrc_typ
				 AND		FFP_EXER_TYP				=	FTQ_EXER_TYP
         AND    FFP_UNDRLYNG        = :c_undrlyng
				 AND		FFP_UNDRLYNG				=	FTQ_UNDRLYNG
         AND    FFP_EXPRY_DT        = :c_expry_dt
				 AND		FFP_EXPRY_DT				=	FTQ_EXPRY_DT
         AND    FFP_INDSTK          = :c_ctgry_indstk
				 AND		FFP_INDSTK					=	FTQ_INDSTK;

    }
    else if ( c_prd_typ == 'O' )
    {
      EXEC SQL
        SELECT 	NVL(FTQ_LST_TRD_PRC,0),	
								NVL(FOP_DLVRY_QTY_BLCKD,0),
								FOP_OPNPSTN_FLW,
								ABS(FOP_OPNPSTN_QTY),
                NVL(FTQ_LST_TRD_PRC,0) /*** ver 1.1 ***/
				INTO		:l_dlvry_prc,
								:l_dlvry_qty,
								:c_opnpstn_flw,
								:l_opnpstn_qty,
                :d_ltp_calc /*** ver 1.1 ***/
        FROM  	FOP_FO_OPTIONS_PSTN,FTQ_FO_TRD_QT
        WHERE   FOP_XCHNG_CD        = :c_xchng_cd
				AND			FOP_XCHNG_CD				=	FTQ_XCHNG_CD
        AND     FOP_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
        AND     FOP_PRDCT_TYP       = :c_prd_typ
				AND			FOP_PRDCT_TYP				=	FTQ_PRDCT_TYP
        AND     FOP_OPT_TYP         = :c_opt_typ
				AND			FOP_OPT_TYP					=	FTQ_OPT_TYP
        AND     FOP_EXER_TYP        = :c_exrc_typ
				AND			FOP_EXER_TYP				=	FTQ_EXER_TYP
				AND     FOP_UNDRLYNG        = :c_undrlyng
				AND			FOP_UNDRLYNG				=	FTQ_UNDRLYNG
				AND     FOP_EXPRY_DT        = :c_expry_dt
				AND			FOP_EXPRY_DT				= FTQ_EXPRY_DT
				AND     FOP_STRK_PRC        = :l_strike_prc
				AND			FOP_STRK_PRC				=	FTQ_STRK_PRC
				AND     FOP_INDSTK          = :c_ctgry_indstk
				AND			FOP_INDSTK					=	FTQ_INDSTK;
		}

	}	

	if(SQLCODE  !=  0 )
	{
		fn_userlog( c_ServiceName,"Error while selecting position data");
		fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg  );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
   
  fn_userlog( c_ServiceName,"c_opnpstn_flw :%c:",c_opnpstn_flw);

  /*** ver 1.1 starts ***/
   if((c_prd_typ == 'F' && c_opnpstn_flw == 'B' ) || ( c_prd_typ == 'O' && ((c_opnpstn_flw == 'B' && c_opt_typ == 'C'))) || ( c_prd_typ == 'O' && ((c_opnpstn_flw == 'S' && c_opt_typ == 'P'))))
   {
      if( c_span_flg == 'Y' && c_prd_typ == 'F' )
      {
         d_funds_to_display =  l_opnpstn_qty* d_ltp_calc;
      }
      else if( c_span_flg == 'N' && c_prd_typ == 'F' )
      {
         d_wght_price = (double) d_opn_pos_val / l_opnpstn_qty;
         if( d_wght_price > d_ltp_calc  )
         {
           d_val = ( d_wght_price - d_ltp_calc ) * l_opnpstn_qty;
         }
         else
         {
           d_val = 0.0;
         }

         d_funds_to_display  = ( l_opnpstn_qty  * d_ltp_calc )  + d_val;
   
      } 
      else if ( c_prd_typ == 'O' )
      {
        d_funds_to_display = l_opnpstn_qty*(double)l_strike_prc;
      }
      MEMSET(c_msg_to_display);
      sprintf( c_msg_to_display,"Settlement mode changed to Choose Delivery Successfully.Approx. amount of funds %0.2lf ",d_funds_to_display/100.0); 
   }
   else
   {
       MEMSET( c_msg_to_display);
       sprintf( c_msg_to_display,"Settlement mode changed to Choose Delivery Successfully.Approx. amount of shares to block %ld",l_opnpstn_qty);
   }
   if( c_dlvry_flg == 'C' )
   {
       MEMSET( c_msg_to_display);
       sprintf( c_msg_to_display,"Settlement mode changed to Choose Non Delivery Successfully.");
   }

  /*** ver 1.1 ends ***/

  if( (c_prd_typ == 'F' && c_opnpstn_flw == 'S') || (c_prd_typ == 'O' && ((c_opnpstn_flw == 'S' && c_opt_typ == 'C') || (c_opnpstn_flw == 'B' && c_opt_typ == 'P'))) )
    {
      EXEC SQL
        SELECT  CLD_DP_ID,
                CLD_DP_CLNT_ID
        INTO    :c_dp_id,
                :c_dp_clnt_id
        FROM    CLD_DP_ACCTS
        WHERE   CLD_DP_ACC_TYP = 'E'
        AND     CLD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt;

      if(SQLCODE  !=  0 && SQLCODE != TOO_MANY_ROWS_FETCHED)
      {
        fn_userlog( c_ServiceName,"Error while selecting dp id and dp client id");
        fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg  );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if (SQLCODE == TOO_MANY_ROWS_FETCHED)
      {
        fn_userlog( c_ServiceName,"As you have multiple demat accounts, you may please  give your delivery intent for shares payable i n Futures and Options by calling us on 9321410550.");
        /*fn_errlog(c_ServiceName,"B20202"," ",c_err_msg);*/
        strcpy(c_err_msg, "As you have multiple demat accounts, you may please  give your delivery intent for shares payable in Futures and Options by calling us on 9321410550.");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    rtrim(c_dp_id);
    rtrim(c_dp_clnt_id);
    rtrim(c_isin_no);
		/*** Check for eDIS customer 	******/
			EXEC SQL
				SELECT  NVL(ICD_POA_PEND,'N'),
								DECODE(PAR_EDIS_POPUP_BLOCK,'Y','Y',NVL(USR_EDIS_FLW,'N'))
				INTO    :c_edis_flg,
								:c_edis_flw
				FROM    ICD_INFO_CLIENT_DTLS,
								USR_USER_MASTER,
								UAC_USR_ACCNTS,
								PAR_SYSTM_PRMTR
				WHERE   ICD_USER_ID         = USR_USR_ID
				AND     USR_USR_ID          = UAC_USR_ID
				AND     UAC_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt;

			if(SQLCODE  !=  0 )
			{
				fn_userlog( c_ServiceName,"Error while selecting edis flag");
				fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			if( c_edis_flw != 'N' )
			{

			}
			else if( c_edis_flg == 'Y' )
			{
				EXEC SQL
					SELECT  SEM_MAP_VL
					INTO    :c_isin_no
      		FROM    sem_stck_map
     			WHERE   SEM_ENTTY =10
     	 		AND     SEM_STCK_CD = :c_undrlyng;

    if(SQLCODE  !=  0 )
    {
      fn_userlog( c_ServiceName,"Error while selecting isin number");
      fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg  );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		EXEC SQL
      SELECT  NVL(SUM(ORD_ORDR_QTY),0)
        INTO  :l_btst_blck_qty
        FROM  ORD_ORDR_DTLS,
              EXG_XCHNG_MSTR
        WHERE ORD_TRD_DT          = EXG_NXT_TRD_DT
        AND   ORD_XCHNG_CD        = EXG_XCHNG_CD
        AND   ORD_PRDCT_TYP       = 'B'
        AND   ORD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
        AND   ORD_STCK_CD         = :c_undrlyng
        AND   (ORD_ORDR_STTS IN ('R','Q','O','P','E')
        OR    ORD_EXCTD_QTY > 0);

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_userlog( c_ServiceName,"Error while selecting order quantity");
      fn_errlog( c_ServiceName, "S31045", SQLMSG, c_err_msg  );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if( SQLCODE == NO_DATA_FOUND )
		{
			l_btst_blck_qty=0;
		}

    fn_userlog( c_ServiceName,"c_opnpstn_flw :%c:",c_opnpstn_flw);
     /*******
		if( (c_prd_typ == 'F' && c_opnpstn_flw == 'S') || (c_prd_typ == 'O' && ((c_opnpstn_flw == 'S' && c_opt_typ == 'C') || (c_opnpstn_flw == 'B' && c_opt_typ == 'P'))) ) 	
		{
			EXEC SQL
      	SELECT  CLD_DP_ID,
        	      CLD_DP_CLNT_ID
      	INTO    :c_dp_id,
        	      :c_dp_clnt_id
      	FROM    CLD_DP_ACCTS
      	WHERE   CLD_DP_ACC_TYP = 'E'
				AND			CLD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt;

    	if(SQLCODE  !=  0 && SQLCODE != TOO_MANY_ROWS_FETCHED)
    	{
      	fn_userlog( c_ServiceName,"Error while selecting dp id and dp client id");
      	fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg  );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
			if (SQLCODE == TOO_MANY_ROWS_FETCHED)
    	{
      	fn_userlog( c_ServiceName,"As you have multiple demat accounts, you may please  give your delivery intent for shares payable in Futures and Options by calling us on 9321410550.");
				strcpy(c_err_msg, "As you have multiple demat accounts, you may please  give your delivery intent for shares payable in Futures and Options by calling us on 9321410550.");
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}	
		}	
		rtrim(c_dp_id);
		rtrim(c_dp_clnt_id);
		rtrim(c_isin_no);
    **************/

if(DEBUG_MSG_LVL_3)
{
		fn_userlog( c_ServiceName,"c_cln_mtch_accnt :%s:",c_cln_mtch_accnt);
		fn_userlog( c_ServiceName,"c_dp_id :%s:",c_dp_id);
		fn_userlog( c_ServiceName,"c_dp_clnt_id :%s:",c_dp_clnt_id);
		fn_userlog( c_ServiceName,"c_isin_no :%s:",c_isin_no);
		fn_userlog( c_ServiceName,"c_undrlyng :%s:",c_undrlyng);		
}
		EXEC SQL
      SELECT  NVL(DBD_MNDT_QTY,0) - ABS(NVL(DBD_QTY_BLCKD,0)+:l_btst_blck_qty)
        INTO  :d_mndt_free_qty
        FROM  DBD_DP_BLCK_DTLS,
              STK_STK_MSTR
        WHERE DBD_STCK_CD         = STK_STCK_CD
        AND   DBD_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
        AND   DBD_DP_ID           = :c_dp_id
        AND   DBD_DP_CLNT_ID      = :c_dp_clnt_id
        AND   DBD_ISIN_NMBR       = :c_isin_no
        AND   DBD_STCK_CD         = :c_undrlyng;

    if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_userlog( c_ServiceName,"Error while selecting mandate free quantity");
      fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg  );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		if(	SQLCODE == NO_DATA_FOUND )
		{
			d_mndt_free_qty=0;
		}

   if( (c_prd_typ == 'F' && c_opnpstn_flw == 'S') || (c_prd_typ == 'O' && ((c_opnpstn_flw == 'S' && c_opt_typ == 'C') || (c_opnpstn_flw == 'B' && c_opt_typ == 'P'))) )
  { 
		if (d_mndt_free_qty < l_opnpstn_qty)
    {
      fn_userlog( c_ServiceName,"Insufficient Mandate Qty: Please visit the Demat Allocation page to Add Mandate");
      fn_errlog(c_ServiceName,"B10101"," ",c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
 }
	/****** eDIS check ended ****/


	i_trnsctn =  fn_begintran( c_ServiceName, c_err_msg);

	if ( i_trnsctn == -1 ) 
  {
   fn_userlog (c_ServiceName,"Failed in initial begin transaction");
   fn_errlog ( c_ServiceName, "S31060", TPMSG, c_err_msg);
   return ;
  }
  
	if ( c_span_flg == 'Y' )
	{
		EXEC SQL
      UPDATE FCP_FO_SPN_CNTRCT_PSTN
      SET 	 FCP_DLVRY_MODE_FLAG 	= DECODE(:c_dlvry_flg,'D','Y','C','N',:c_dlvry_flg)
   		WHERE  FCP_XCHNG_CD 				= :c_xchng_cd
      AND    FCP_CLM_MTCH_ACCNT 	= :c_cln_mtch_accnt
      AND    FCP_PRDCT_TYP       	= :c_prd_typ
      AND    FCP_OPT_TYP         	= :c_opt_typ
      AND    FCP_EXER_TYP        	= :c_exrc_typ
      AND    FCP_UNDRLYNG        	= :c_undrlyng
      AND    FCP_EXPRY_DT        	= :c_expry_dt
      AND    FCP_STRK_PRC        	= :l_strike_prc
	 		AND	   FCP_INDSTK	   				= :c_ctgry_indstk; 

	}
	else if ( c_span_flg == 'N' )
	{
		if ( c_prd_typ == 'F' )
    {
			EXEC SQL
				 UPDATE FFP_FO_FUTURES_PSTN
				 SET		FFP_DLVRY_MODE_FLAG = DECODE(:c_dlvry_flg,'D','Y','C','N',:c_dlvry_flg)
				 WHERE	FFP_XCHNG_CD				= :c_xchng_cd
				 AND		FFP_CLM_MTCH_ACCNT	= :c_cln_mtch_accnt
				 AND		FFP_PRDCT_TYP				= :c_prd_typ
				 AND		FFP_EXER_TYP				= :c_exrc_typ
				 AND 		FFP_UNDRLYNG				= :c_undrlyng
				 AND		FFP_EXPRY_DT				= :c_expry_dt
				 AND		FFP_INDSTK					= :c_ctgry_indstk;	

    }
    else if ( c_prd_typ == 'O' )
    {
			EXEC SQL
				UPDATE	FOP_FO_OPTIONS_PSTN
				SET			FOP_DLVRY_MODE_FLAG = DECODE(:c_dlvry_flg,'D','Y','C','N',:c_dlvry_flg)
				WHERE		FOP_XCHNG_CD				= :c_xchng_cd
				AND			FOP_CLM_MTCH_ACCNT	= :c_cln_mtch_accnt
				AND			FOP_PRDCT_TYP				= :c_prd_typ
				AND			FOP_OPT_TYP					= :c_opt_typ
				AND			FOP_EXER_TYP				= :c_exrc_typ
				AND			FOP_UNDRLYNG				= :c_undrlyng
				AND			FOP_EXPRY_DT				= :c_expry_dt
				AND			FOP_STRK_PRC				= :l_strike_prc
				AND			FOP_INDSTK					= :c_ctgry_indstk;
		}	

	}

	if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31065", SQLMSG, c_err_msg  );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)NULL, 0, 0 );
  }

	EXEC SQL
		UPDATE 	FDD_FO_DLVRYMODE_DTLS
		SET 		FDD_DLVRY_MODE_FLG	= DECODE(:c_dlvry_flg,'D','Y','C','N',:c_dlvry_flg),
						FDD_UPD_DT					= sysdate,
						FDD_OPNPSTN_FLW			= :c_opnpstn_flw, 
						FDD_DLVRY_PRC				= :l_dlvry_prc,	
						FDD_DLVRY_NONDLVRY_QTY = :l_opnpstn_qty 
		WHERE 	FDD_XCHNG_CD				= :c_xchng_cd
		AND			FDD_CLM_MTCH_ACCNT	= :c_cln_mtch_accnt
		AND			FDD_PRDCT_TYP				= :c_prd_typ
		AND			FDD_OPT_TYP					= :c_opt_typ
		AND			FDD_EXER_TYP				= :c_exrc_typ
		AND			FDD_UNDRLYNG				= :c_undrlyng
		AND			FDD_EXPRY_DT				= :c_expry_dt
		AND			FDD_STRK_PRC				= :l_strike_prc
		AND			FDD_INDSTK					= :c_ctgry_indstk;


		if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  	{
    	fn_errlog( c_ServiceName, "S31070", SQLMSG, c_err_msg  );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	tpreturn(TPFAIL, ERR_BFR, (char *)NULL, 0, 0 );
  	}	

		if ( SQLCODE == NO_DATA_FOUND )
		{
			EXEC SQL		
			INSERT INTO FDD_FO_DLVRYMODE_DTLS
				( 
					FDD_CLM_MTCH_ACCNT,
					FDD_XCHNG_CD,
					FDD_PRDCT_TYP,
					FDD_INDSTK,
					FDD_UNDRLYNG,
					FDD_EXPRY_DT,
					FDD_STRK_PRC,
					FDD_EXER_TYP,
					FDD_OPT_TYP,
					FDD_OPNPSTN_FLW,
					FDD_UPD_DT,
					FDD_DLVRY_PRC,
					FDD_DLVRY_NONDLVRY_QTY,
					FDD_DLVERY_AMT,
					FDD_DLVRY_MODE_FLG,
					FDD_CHANNEL,
					FDD_RMRKS ,
					FDD_INSERT_DT
				)
			values 
				(
					:c_cln_mtch_accnt,
					:c_xchng_cd,
					:c_prd_typ,
					:c_ctgry_indstk,
					:c_undrlyng,
					:c_expry_dt,
					:l_strike_prc,
					:c_exrc_typ,
					:c_opt_typ,
					:c_opnpstn_flw,
					sysdate,
					:l_dlvry_prc,
					:l_opnpstn_qty,
					:d_dlvry_amnt,
					DECODE(:c_dlvry_flg,'D','Y','C','N',:c_dlvry_flg),
					:c_channel,
					'',
					sysdate	
				);
				
				if ( SQLCODE != 0 )
  			{
    			fn_errlog( c_ServiceName, "S31075", SQLMSG, c_err_msg  );
    			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    			tpreturn(TPFAIL, ERR_BFR, (char *)NULL, 0, 0 );
  			}
				
		}

		EXEC SQL
			INSERT INTO FDD_FO_DLVRYMODE_DTLSLOG
			( 
				FDD_CLM_MTCH_ACCNT,
				FDD_XCHNG_CD,
				FDD_PRDCT_TYP,
				FDD_INDSTK,
				FDD_UNDRLYNG,
				FDD_EXPRY_DT,
				FDD_STRK_PRC,
				FDD_EXER_TYP,
				FDD_OPT_TYP,
				FDD_OPNPSTN_FLW,
				FDD_UPD_DT,
				FDD_DLVRY_PRC,
				FDD_DLVRY_NONDLVRY_QTY,
				FDD_DLVERY_AMT,
				FDD_DLVRY_MODE_FLG,
				FDD_CHANNEL,
				FDD_RMRKS,
				FDD_INSERT_DT 
			)
			values 
			(
				:c_cln_mtch_accnt,
				:c_xchng_cd,
				:c_prd_typ,
				:c_ctgry_indstk,
				:c_undrlyng,
				:c_expry_dt,
				:l_strike_prc,
				:c_exrc_typ,
				:c_opt_typ,
				:c_opnpstn_flw,
				SYSDATE,
				:l_dlvry_prc,
				:l_opnpstn_qty,
				:d_dlvry_amnt,
				DECODE(:c_dlvry_flg,'D','Y','C','N',:c_dlvry_flg),
				:c_channel,
				'',
				SYSDATE
			);	

		if ( SQLCODE != 0 ) 
    {
      fn_errlog( c_ServiceName, "S31080", SQLMSG, c_err_msg  );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)NULL, 0, 0 );
    }

		if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )  
  	{
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );  
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 	 	}
 
    /*** ver 1.1 starts **/
    rtrim(c_msg_to_display);
    Fadd32( ptr_fml_Ibuf,FFO_XCHNG_RMRKS ,c_msg_to_display,0);
    tpreturn ( TPSUCCESS, SUCC_BFR,(char *)ptr_fml_Ibuf, 0, 0 );
    /*** ver 1.1 ends **/
    /*** tpreturn ( TPSUCCESS, SUCC_BFR, NULL, 0, 0 );	commented in ver 1.1 **/
}
