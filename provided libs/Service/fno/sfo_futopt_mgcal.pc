/***********************************************************************************************/
/*  Program           : SFO_FUTOPT_MGCAL                                                       */
/*                                                                                             */
/*  Input             : FFO_USR_ID                                                             */
/*                      FFO_SSSN_ID                                                            */
/*                      FFO_EBA_MTCH_ACT_NO                                                    */
/*                      FFO_XCHNG_CD                                                           */
/*                      FFO_PRDCT_TYP                                                          */
/*                      FFO_UNDRLYNG                                                           */
/*                      FFO_EXPRY_DT                                                           */
/*                      FFO_EXER_TYP                                                           */
/*                      FFO_OPT_TYP                                                            */
/*                      FFO_STRK_PRC                                                           */
/*                      FFO_CTGRY_INDSTK                                                       */
/*                      FFO_CI_BUY_QTY                                                         */
/*                      FFO_CI_BUY_ORD_VL                                                      */
/*                      FFO_CI_SELL_QTY                                                        */
/*                      FFO_CI_SELL_ORD_VL                                                     */
/*                      FFO_CBUY_EXCTD_QTY                                                     */
/*                      FFO_CSELL_EXCTD_QTY                                                    */
/*                      FFO_C_OPNPSTN_FLW                                                      */
/*                      FFO_C_OPNPSTN_QTY                                                      */
/*                      FFO_C_ORG_OPN_VAL                                                      */
/*                      FFO_ROUT_CRT                                                           */
/*                                                                                             */
/*  Output            : FFO_U_ORDR_MRGN                                                        */
/*                      FFO_U_TRD_MRGN                                                         */
/*                                                                                             */
/*  Description       : This service calculates the margin for a Non-SPAN                      */
/*                      customer for futures and options contracts                             */
/*                                                                                             */
/*  Log               : 1.0   20-Sep-2019  					       			                               */
/*                    : 1.1   08-Feb-2021                                                      */
/***********************************************************************************************/
/*  1.0    -  New Release (Navina D.)                                                          */
/*  1.1    -  CR-ISEC14-145139 Changes for Enhancement in  Margin Calculator ( Anuj Pancholi ) */ 
/***********************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <eba_to_ors.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fo_view_def.h>
#include <sqlca.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_session.h>
#include <fn_pos.h>
#include <fn_ddr.h>
#include <fml_rout.h> 
#include <fn_read_debug_lvl.h> 
#include <fn_span_lib.h> 
#include <stdarg.h>  /** ver 1.1 **/


#define ADVNCE_MARGIN_CALCULATOR 'M'   /** ver 1.1 **/

/** ver 1.1 starts ***/
int fn_pack_vartofml_local ( char *c_ServiceName,
                       char *c_err_msg,
                       FBFR32 **ptr_fml_obuf,
                       int i_tot_ofields,
                       ... );
/** ver 1.1 ends ***/

void SFO_FUTOPT_MGCAL( TPSVCINFO *rqst )
{
  char c_ServiceName[33];
  varchar c_err_msg[256];

	int i_ch_val;
  int i_trnsctn;

  double  d_base_prc = 0.0;
  char    c_ltq_dt[23] ="\0";
  char    c_xchng_cd[4] ="\0";
  char    c_routing_crt[4] ="\0";
  char    c_rqst_typ = 'S';
  char    c_rqst_rcvd;            /** ver 1.1 **/
  char    c_api_src_flg = 'A';

  char c_spn_allwd_flg  = '\0';   /** ver 1.1 **/
  char c_bse_span_flag  = '\0';   /** ver 1.1 **/

 	int     i_err[20];         
	int     i_ferr[20];        
	char    c_flg = '\0';        			
	long    l_fml_count =0;	
	long    l_recvbuf = 0;
	int     i =0 ;
	int     i_fut_cnt = 0;
  int     i_opt_cnt = 0; /** ver 1.1 **/
  long    l_cntr  = 0;
  int     i_returncode = 0;
  long    l_null = 0;        /** ver 1.1 **/          
  long    l_ibuy_qty  = 0;  /** ver 1.1 **/
  long    l_isell_qty = 0;  /** ver 1.1 **/
  long    l_ftq_cnt   = 0;  /** ver 1.1 **/

  double d_tot_ordr_mrgn = 0.0;
  double d_ordr_mrgn= 0.0;
  double d_tot_trd_mrgn = 0.0;
  double d_trd_mrgn = 0.0;
  double d_tot_blkd_ordr_mrgn = 0.0;
  double d_blkd_ordr_mrgn = 0.0;
  double d_tot_blkd_trd_mrgn = 0.0;
  double d_blkd_trd_mrgn = 0.0;
  double d_ordr_mrgn_rcrd_lvl = 0.0;  /** ver 1.1 **/
  double d_null = 0.0;                /** ver 1.1 **/
  double d_ibuy_ord_val  = 0.0;       /** ver 1.1 **/
  double d_isell_ord_val	= 0.0;      /** ver 1.1 **/
  double d_opnpstn_val = 0.0;         /** ver 1.1 **/
  double d_spn_tot_trd_mrgn = 0.0;    /** ver 1.1 **/

   
  FBFR32 *ptr_fml_Ibuf = NULL;
  FBFR32 *ptr_fml_Obuf = NULL;
  FBFR32 *ptr_fml_SObuf = NULL;
  FBFR32 *ptr_fml_SFbuf = NULL;
  FBFR32 *ptr_fml_RFbuf = NULL;
  FBFR32 *ptr_fml_RObuf = NULL;
  
  /*** ver 1.1 Starts ***/
  FBFR32 *ptr_fml_spnbuf  = NULL;
  FBFR32 *ptr_fml_SFObuf = NULL; 
  /*** ver 1.1 ends ***/

  struct vw_usr_prfl st_usr_prfl;
  struct vw_err_msg st_err_msg;
  struct st_fcp_cntrct_pstn   st_cntfcp_pos_crrnt ;

  EXEC SQL INCLUDE "table/icd_info_client_dtls.h";


	MEMSET(st_usr_prfl);

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);

   /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

	MEMSET(c_err_msg);
  MEMSET(st_cntfcp_pos_crrnt);

  i_err [ 0 ] = Fget32( ptr_fml_Ibuf ,FFO_USR_ID,0,(char *)st_usr_prfl.c_user_id ,0);
  i_ferr[0] = Ferror32;
  i_err [ 1 ] = Fget32( ptr_fml_Ibuf ,FFO_SSSN_ID,0,(char *)&st_usr_prfl.l_session_id ,0);
  i_ferr[1] = Ferror32;
  i_err [ 2 ] = Fget32( ptr_fml_Ibuf ,FFO_XCHNG_CD,0,(char *)c_xchng_cd,0);
  i_ferr[2] = Ferror32;
  i_err [ 3 ] = Fget32( ptr_fml_Ibuf ,FFO_EBA_MTCH_ACT_NO,0,(char *)st_usr_prfl.c_cln_mtch_accnt,0);
  i_ferr[3] = Ferror32;
  i_err [ 4 ] = Fget32( ptr_fml_Ibuf ,FFO_ROUT_CRT,0,(char *)st_usr_prfl.c_rout_crt,0);
  i_ferr[4] = Ferror32;
  i_err [ 5 ] = Fget32( ptr_fml_Ibuf ,FFO_REQ_TYP,0,(char *)&c_rqst_rcvd,0);  /** ver 1.1 **/
  i_ferr[5] = Ferror32;  /** ver 1.1 **/

  for(i=0;i<5;i++)  
  {
    if(i_err[i] == -1 )
    {
      fn_userlog( c_ServiceName, " Error in field no %d", i);
      errlog(c_ServiceName, "S31005", Fstrerror32(i_ferr[i]),(char *)DEF_USR,DEF_SSSN, c_err_msg.arr);
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
    }
  }
   
  /*************** ver 1.1 starts ****************/

  if (( i_err[5] == -1 ) && ( i_ferr[5] != FNOTPRES ))
  {
    fn_userlog( c_ServiceName, " Error in field no %d", i);
    errlog(c_ServiceName, "S31010", Fstrerror32(i_ferr[i]),(char *)DEF_USR,DEF_SSSN, c_err_msg.arr);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
    tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);   
  }
  else 
  {
    if (i_err[5] != -1)
    {
      if(DEBUG_MSG_LVL_3)
      {
       fn_userlog( c_ServiceName, "Request Recieved is :%c:", c_rqst_rcvd);
      }
    } 
  }

  /************** ver 1.1 ends *******************/

  i_ch_val = fn_chk_sssn( c_ServiceName,
                          &st_usr_prfl,
                          &st_err_msg );
  if ( i_ch_val == -1 )
  {
    fn_errlog( c_ServiceName, "S31015", LIBMSG, st_err_msg.c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

 if(DEBUG_MSG_LVL_0)
 {
	fn_userlog ( c_ServiceName, "Match accnt :%s :", st_usr_prfl.c_cln_mtch_accnt);
 }

	MEMSET( sql_icd_cust_type ) ;
	
	EXEC SQL
	SELECT  ICD_CUST_TYPE
	INTO    :sql_icd_cust_type
	FROM    ICD_INFO_CLIENT_DTLS,
					IAI_INFO_ACCOUNT_INFO
	WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
	AND     IAI_MATCH_ACCOUNT_NO  = :st_usr_prfl.c_cln_mtch_accnt;

	if ( SQLCODE != 0 )	
	{
		fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg.arr  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	SETNULL(sql_icd_cust_type);

	if((strcmp(sql_icd_cust_type.arr,"NRI") == 0) && (strcmp(c_xchng_cd,"BFO") == 0))  
	{
		fn_errlog( c_ServiceName, "S31025", "Currently BSE Derivative is not allowed for NRI customers", c_err_msg.arr  );
		strcpy( c_err_msg.arr ,"Currently BSE Derivative is not allowed for NRI customers");
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg.arr, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	
	
	l_fml_count = Foccur32(ptr_fml_Ibuf ,FFO_UNDRLYNG);
	fn_userlog ( c_ServiceName, "Total num of records :%ld :", l_fml_count);

  fn_rewind_rs(ptr_fml_Ibuf);
  
  /******* Ver 1.1 Starts *******/

  EXEC SQL
  SELECT  NVL(CLM_SPAN_ALLWD,'N'),
          NVL(CLM_BSESPAN_ALLWD,'N')
  INTO    :c_spn_allwd_flg,
          :c_bse_span_flag
  FROM    CLM_CLNT_MSTR
  WHERE   CLM_MTCH_ACCNT  = :st_usr_prfl.c_cln_mtch_accnt;
   
  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  fn_userlog ( c_ServiceName, "NSE SPAN Flag is :%c:", c_spn_allwd_flg);
  fn_userlog ( c_ServiceName, "BSE SPAN Flag is :%c:", c_bse_span_flag);
  fn_userlog ( c_ServiceName, "Request Recieved is :%c:", c_rqst_rcvd);

  if ( c_rqst_rcvd == ADVNCE_MARGIN_CALCULATOR )
  {
   c_rqst_typ     = '\0';   
   c_api_src_flg  = '\0'; 
   ptr_fml_Obuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
  }

  /******* Ver 1.1 Ends ********/
  
	while ( 1 )
	{
  	 MEMSET(st_cntfcp_pos_crrnt);
		 i_ch_val = fn_getnxt_rs  ( 	ptr_fml_Ibuf,
															c_ServiceName,
															c_err_msg.arr,
															14,				
															FFO_C_OPNPSTN_FLW,  (char *)&st_cntfcp_pos_crrnt.c_opnpstn_flw, NULL,
															FFO_PRDCT_TYP,      (char *)&st_cntfcp_pos_crrnt.c_prd_typ, NULL,
															FFO_UNDRLYNG,       (char *)st_cntfcp_pos_crrnt.c_undrlyng, NULL,
															FFO_EXPRY_DT,       (char *)st_cntfcp_pos_crrnt.c_expry_dt, NULL,
															FFO_EXER_TYP,       (char *)&st_cntfcp_pos_crrnt.c_exer_typ, NULL, 
															FFO_OPT_TYP,        (char *)&st_cntfcp_pos_crrnt.c_opt_typ, NULL,
															FFO_STRK_PRC,       (char *)&st_cntfcp_pos_crrnt.l_strike_prc, NULL,
															FFO_CTGRY_INDSTK,   (char *)&st_cntfcp_pos_crrnt.c_ctgry_indstk, NULL,
															FFO_CI_BUY_QTY,     (char *)&st_cntfcp_pos_crrnt.l_ibuy_qty, NULL,
															FFO_CI_SELL_QTY,    (char *)&st_cntfcp_pos_crrnt.l_isell_qty, NULL,
															FFO_CI_BUY_ORD_VL,  (char *)&st_cntfcp_pos_crrnt.d_ibuy_ord_val, NULL,
															FFO_CI_SELL_ORD_VL, (char *)&st_cntfcp_pos_crrnt.d_isell_ord_val, NULL,
															FFO_C_OPNPSTN_QTY,  (char *)&st_cntfcp_pos_crrnt.l_opnpstn_qty, NULL,
															FFO_C_ORG_OPN_VAL,  (char *)&st_cntfcp_pos_crrnt.d_opnpstn_val, NULL
													);
			fn_userlog ( c_ServiceName, "Total records :%ld: Counter :%ld:", l_fml_count,l_cntr);

			if ( l_cntr == l_fml_count )
		 {
				fn_userlog( c_ServiceName, "NO DATA FOUND IN BUFFER");
				break;
		 }
		 else if ( i_ch_val != 0 && i_ch_val != NO_DATA_FOUND ) 
		 {
				fn_userlog( c_ServiceName, "ERROR in fn_getnxt_rs");
				fn_errlog( c_ServiceName, "S31035", LIBMSG, c_err_msg.arr );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
				tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		 }
	
	/** for testing ** 	if(DEBUG_MSG_LVL_4)
		{ **/
			fn_userlog ( c_ServiceName, "Product Type is   :%c: ", st_cntfcp_pos_crrnt.c_prd_typ );
			fn_userlog ( c_ServiceName, "Underlying is     :%s: ", st_cntfcp_pos_crrnt.c_undrlyng );
			fn_userlog ( c_ServiceName, "Expiry date       :%s :", st_cntfcp_pos_crrnt.c_expry_dt);
			fn_userlog ( c_ServiceName, "Option Type is    :%c: ", st_cntfcp_pos_crrnt.c_opt_typ);
			fn_userlog ( c_ServiceName, "Strike Price is   :%ld:", st_cntfcp_pos_crrnt.l_strike_prc);
			fn_userlog ( c_ServiceName, "Exercie Type is   :%c: ", st_cntfcp_pos_crrnt.c_exer_typ );
			fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntfcp_pos_crrnt.l_ibuy_qty );
			fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntfcp_pos_crrnt.d_ibuy_ord_val);
			fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntfcp_pos_crrnt.l_isell_qty );
			fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntfcp_pos_crrnt.d_isell_ord_val);
			fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntfcp_pos_crrnt.l_exbuy_qty );
			fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntfcp_pos_crrnt.d_exbuy_ord_val);
			fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntfcp_pos_crrnt.l_exsell_qty );
			fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", st_cntfcp_pos_crrnt.d_exsell_ord_val );
			fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntfcp_pos_crrnt.l_opnpstn_qty );
			fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntfcp_pos_crrnt.d_opnpstn_val);
			fn_userlog ( c_ServiceName, "Open Position Flow :%c:", st_cntfcp_pos_crrnt.c_opnpstn_flw);
	/** 	} **/

   /*** ver 1.1 starts ***/
   if ( c_rqst_rcvd == ADVNCE_MARGIN_CALCULATOR )  
   {  
   
     EXEC SQL
      SELECT count(1)
      INTO    :l_ftq_cnt
      FROM   FTQ_FO_TRD_QT
      WHERE  FTQ_XCHNG_CD = :c_xchng_cd
      AND    FTQ_UNDRLYNG = :st_cntfcp_pos_crrnt.c_undrlyng
      AND    FTQ_PRDCT_TYP = :st_cntfcp_pos_crrnt.c_prd_typ
      AND    FTQ_EXPRY_DT = to_date(:st_cntfcp_pos_crrnt.c_expry_dt,'dd-Mon-yyyy')
      AND    FTQ_STRK_PRC = :st_cntfcp_pos_crrnt.l_strike_prc
      AND    FTQ_EXER_TYP = :st_cntfcp_pos_crrnt.c_exer_typ
      AND    FTQ_OPT_TYP =  :st_cntfcp_pos_crrnt.c_opt_typ;

    if(SQLCODE  !=  0 )
    {
     fn_errlog ( c_ServiceName, "S31040", SQLMSG, c_err_msg.arr );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
     tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
    }

    if ( l_ftq_cnt == 0 )
    {
      fn_userlog ( c_ServiceName, "No data found in FTQ for selected contract");
      fn_errlog( c_ServiceName, "B28510",DEFMSG, c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
    }
    fn_userlog ( c_ServiceName, "Contract found in FTQ with count :%ld:",l_ftq_cnt);


    if (st_cntfcp_pos_crrnt.c_prd_typ == 'F' || st_cntfcp_pos_crrnt.c_prd_typ == 'O')   
    {


      if ( (c_spn_allwd_flg == 'N' && strcmp(c_xchng_cd,"NFO")==0) || 
             ( c_bse_span_flag == 'N' && strcmp(c_xchng_cd,"BFO")==0 ))
      {

        fn_userlog ( c_ServiceName, "Inside Call for Non-span");
        d_opnpstn_val =  st_cntfcp_pos_crrnt.d_opnpstn_val/st_cntfcp_pos_crrnt.l_opnpstn_qty;  

      }
      else
      {
        d_opnpstn_val = st_cntfcp_pos_crrnt.d_opnpstn_val;
      }
       
      fn_userlog ( c_ServiceName, "Position value is :%lf:", d_opnpstn_val);        
      
      i_opt_cnt++;
      i_returncode = fn_pack_vartofml_local ( c_ServiceName,
                     c_err_msg.arr,
                     &ptr_fml_spnbuf,
                     19,
                     FFO_C_OPNPSTN_FLW,  (char *)&st_cntfcp_pos_crrnt.c_opnpstn_flw,
                     FFO_PRDCT_TYP,      (char *)&st_cntfcp_pos_crrnt.c_prd_typ,
                     FFO_UNDRLYNG,       (char *)st_cntfcp_pos_crrnt.c_undrlyng,
                     FFO_EXPRY_DT,       (char *)st_cntfcp_pos_crrnt.c_expry_dt,
                     FFO_EXER_TYP,       (char *)&st_cntfcp_pos_crrnt.c_exer_typ,
                     FFO_OPT_TYP,        (char *)&st_cntfcp_pos_crrnt.c_opt_typ,
                     FFO_STRK_PRC,       (char *)&st_cntfcp_pos_crrnt.l_strike_prc,
                     FFO_CTGRY_INDSTK,   (char *)&st_cntfcp_pos_crrnt.c_ctgry_indstk,
                     FFO_CI_BUY_QTY,     (char *)&l_null,
                     FFO_CI_SELL_QTY,    (char *)&l_null,
                     FFO_CI_BUY_ORD_VL,  (char *)&d_null,
                     FFO_CI_SELL_ORD_VL, (char *)&d_null,
                     FFO_C_OPNPSTN_QTY,  (char *)&st_cntfcp_pos_crrnt.l_opnpstn_qty,
                     FFO_C_ORG_OPN_VAL,  (char *)&d_opnpstn_val,
                     FFO_ROUT_CRT,       (char *)st_usr_prfl.c_rout_crt,
                     FFO_USR_ID,         (char *)st_usr_prfl.c_user_id,
                     FFO_SSSN_ID,        (char *)&st_usr_prfl.l_session_id,
                     FFO_XCHNG_CD,       (char *)c_xchng_cd,
                     FFO_EBA_MTCH_ACT_NO,(char *)st_usr_prfl.c_cln_mtch_accnt
                     );
      
      if ( i_returncode != 0 )
      {
        fn_errlog( c_ServiceName, "S31045", LIBMSG, c_err_msg.arr );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
      }

   if ( (c_spn_allwd_flg == 'Y' && strcmp(c_xchng_cd,"NFO")==0) ||
         ( c_bse_span_flag == 'Y' && strcmp(c_xchng_cd,"BFO")==0 )) 
   {
     /**** creating input for calling service to get Record level Order Margin **/ 

     ptr_fml_SFObuf = NULL;  
     i_returncode = fn_pack_vartofml_local ( c_ServiceName,
                     c_err_msg.arr,
                     &ptr_fml_SFObuf,
                     19,
                     FFO_C_OPNPSTN_FLW,  (char *)&st_cntfcp_pos_crrnt.c_opnpstn_flw,
                     FFO_PRDCT_TYP,      (char *)&st_cntfcp_pos_crrnt.c_prd_typ,
                     FFO_UNDRLYNG,       (char *)st_cntfcp_pos_crrnt.c_undrlyng,
                     FFO_EXPRY_DT,       (char *)st_cntfcp_pos_crrnt.c_expry_dt,
                     FFO_EXER_TYP,       (char *)&st_cntfcp_pos_crrnt.c_exer_typ,
                     FFO_OPT_TYP,        (char *)&st_cntfcp_pos_crrnt.c_opt_typ,
                     FFO_STRK_PRC,       (char *)&st_cntfcp_pos_crrnt.l_strike_prc,
                     FFO_CTGRY_INDSTK,   (char *)&st_cntfcp_pos_crrnt.c_ctgry_indstk,
                     FFO_CI_BUY_QTY,     (char *)&st_cntfcp_pos_crrnt.l_ibuy_qty,
                     FFO_CI_SELL_QTY,    (char *)&st_cntfcp_pos_crrnt.l_isell_qty,
                     FFO_CI_BUY_ORD_VL,  (char *)&st_cntfcp_pos_crrnt.d_ibuy_ord_val,
                     FFO_CI_SELL_ORD_VL, (char *)&st_cntfcp_pos_crrnt.d_isell_ord_val,
                     FFO_C_OPNPSTN_QTY,  (char *)&l_null,
                     FFO_C_ORG_OPN_VAL,  (char *)&d_null,
                     FFO_ROUT_CRT,       (char *)st_usr_prfl.c_rout_crt,
                     FFO_USR_ID,         (char *)st_usr_prfl.c_user_id,
                     FFO_SSSN_ID,        (char *)&st_usr_prfl.l_session_id,
                     FFO_XCHNG_CD,       (char *)c_xchng_cd,
                     FFO_EBA_MTCH_ACT_NO,(char *)st_usr_prfl.c_cln_mtch_accnt
                     ); 
     
      if ( i_returncode != 0 )
      {
        fn_errlog( c_ServiceName, "S31050", LIBMSG, c_err_msg.arr );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        tpfree( ( char * )ptr_fml_spnbuf);
        tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
      }

      ptr_fml_RFbuf = ( FBFR32 *)NULL;
      ptr_fml_RFbuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

      if ( ptr_fml_RFbuf == NULL )
      {
       fn_errlog( c_ServiceName, "S31055", TPMSG, c_err_msg.arr  );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
       tpfree( ( char * )ptr_fml_spnbuf);
       tpfree( ( char * )ptr_fml_SFObuf);
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if(DEBUG_MSG_LVL_4)
      {
       fn_userlog( c_ServiceName, " inside record wise order Margin fetch for i_fut_cnt :%d:",i_fut_cnt);
      }
      i_returncode = tpcall ( "SFO_SPN_MRGCAL",
                    ( char *)ptr_fml_SFObuf,
                    0,
                    ( char **)&ptr_fml_RFbuf,
                    &l_recvbuf,
                    0
                    );
      if ( i_returncode != SUCC_BFR )
      {
        fn_errlog( c_ServiceName, "S31060",TPMSG,c_err_msg.arr);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        tpfree( ( char * )ptr_fml_RFbuf);
        tpfree( ( char * )ptr_fml_spnbuf);
        tpfree( ( char * )ptr_fml_SFObuf); 
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      i_err [ 0 ] = Fget32( ptr_fml_RFbuf ,FFO_U_ORDR_MRGN,0,(char *)&d_ordr_mrgn_rcrd_lvl ,0);
      i_ferr[0] = Ferror32;

      if(i_err[0] == -1 )
      {
        fn_userlog( c_ServiceName, "Error in Fetching record Level Order Margin");
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
        tpfree( ( char * )ptr_fml_RFbuf);
        tpfree( ( char * )ptr_fml_SObuf);
        tpfree( ( char * )ptr_fml_SFObuf);
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
      }
   
      fn_userlog( c_ServiceName, "Order Level Margin for Span Future/Option is :%lf:",d_ordr_mrgn_rcrd_lvl);
     
      i_returncode = fn_pack_vartofml_local ( c_ServiceName,
                     c_err_msg.arr,
                     &ptr_fml_Obuf,
                     9,
                     FFO_BASE_ORD_VAL,  (char *)&d_ordr_mrgn_rcrd_lvl,
                     FFO_PRDCT_TYP,      (char *)&st_cntfcp_pos_crrnt.c_prd_typ,
                     FFO_UNDRLYNG,       (char *)st_cntfcp_pos_crrnt.c_undrlyng,
                     FFO_EXPRY_DT,       (char *)st_cntfcp_pos_crrnt.c_expry_dt,
                     FFO_OPT_TYP,        (char *)&st_cntfcp_pos_crrnt.c_opt_typ,
                     FFO_STRK_PRC,       (char *)&st_cntfcp_pos_crrnt.l_strike_prc,
                     FFO_C_OPNPSTN_FLW,  (char *)&st_cntfcp_pos_crrnt.c_opnpstn_flw,
                     FFO_C_OPNPSTN_QTY,  (char *)&st_cntfcp_pos_crrnt.l_opnpstn_qty,
                     FFO_C_ORG_OPN_VAL,  (char *)&st_cntfcp_pos_crrnt.d_opnpstn_val
                     );

      if ( i_returncode != 0 )
      {
        fn_errlog( c_ServiceName, "S31065", LIBMSG, c_err_msg.arr );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        tpfree( ( char * )ptr_fml_RFbuf);
        tpfree( ( char * )ptr_fml_SObuf);
        tpfree( ( char * )ptr_fml_SFObuf);
        tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
      }

      tpfree( ( char * ) ptr_fml_RFbuf);
      tpfree( ( char * )ptr_fml_SFObuf);

    }
    
   }

  } 
  /*** ver 1.1 ends **/

   if ( (c_spn_allwd_flg != 'Y' && strcmp(c_xchng_cd,"NFO")==0) ||     /** Span check added in ver 1.1 **/
          ( c_bse_span_flag != 'Y' && strcmp(c_xchng_cd,"BFO")==0 ))
   {

		if (st_cntfcp_pos_crrnt.c_prd_typ == 'F' ) 
		{
			i_fut_cnt++;

      /********* ver 1.1 starts *********/
      if ( c_rqst_rcvd == ADVNCE_MARGIN_CALCULATOR )
      {
        /**** below values set to 0 for getting total trade margin ****/
        l_ibuy_qty      = 0;
        l_isell_qty     = 0;
        d_ibuy_ord_val  = 0.0;
        d_isell_ord_val = 0.0;
      } 
      else
      {
        l_ibuy_qty      = st_cntfcp_pos_crrnt.l_ibuy_qty;
        l_isell_qty     = st_cntfcp_pos_crrnt.l_isell_qty;
        d_ibuy_ord_val  = st_cntfcp_pos_crrnt.d_ibuy_ord_val;
        d_isell_ord_val = st_cntfcp_pos_crrnt.d_isell_ord_val; 
      }
      /********* ver 1.1 ends ***********/

			i_returncode = fn_pack_vartofml_local ( c_ServiceName,
										 c_err_msg.arr,
										 &ptr_fml_SFbuf,
										 23,
										 FFO_C_OPNPSTN_FLW,  (char *)&st_cntfcp_pos_crrnt.c_opnpstn_flw,
										 FFO_PRDCT_TYP,      (char *)&st_cntfcp_pos_crrnt.c_prd_typ,
										 FFO_UNDRLYNG,       (char *)st_cntfcp_pos_crrnt.c_undrlyng,
										 FFO_EXPRY_DT,       (char *)st_cntfcp_pos_crrnt.c_expry_dt,
										 FFO_EXER_TYP,       (char *)&st_cntfcp_pos_crrnt.c_exer_typ,
										 FFO_OPT_TYP,        (char *)&st_cntfcp_pos_crrnt.c_opt_typ,
										 FFO_STRK_PRC,       (char *)&st_cntfcp_pos_crrnt.l_strike_prc,
										 FFO_CTGRY_INDSTK,   (char *)&st_cntfcp_pos_crrnt.c_ctgry_indstk,
										 FFO_CI_BUY_QTY,     (char *)&l_ibuy_qty,       /** ver 1.1 struct variable replaced with normal variable **/
										 FFO_CI_SELL_QTY,    (char *)&l_isell_qty,      /** ver 1.1 **/
										 FFO_CI_BUY_ORD_VL,  (char *)&d_ibuy_ord_val,   /** ver 1.1 **/
										 FFO_CI_SELL_ORD_VL, (char *)&d_isell_ord_val,  /** ver 1.1 **/
										 FFO_C_OPNPSTN_QTY,  (char *)&st_cntfcp_pos_crrnt.l_opnpstn_qty,
										 FFO_C_ORG_OPN_VAL,  (char *)&st_cntfcp_pos_crrnt.d_opnpstn_val,
										 FFO_RQST_TYP,       (char *)&c_rqst_typ,
										 FFO_ROUT_CRT,			 (char *)st_usr_prfl.c_rout_crt,
										 FFO_USR_ID,				 (char *)st_usr_prfl.c_user_id,
										 FFO_SSSN_ID,				 (char *)&st_usr_prfl.l_session_id,
										 FFO_XCHNG_CD,			 (char *)c_xchng_cd,
										 FFO_EBA_MTCH_ACT_NO,(char *)st_usr_prfl.c_cln_mtch_accnt,
										 FFO_CSELL_EXCTD_QTY,(char *)&st_cntfcp_pos_crrnt.l_sell_exctd_qty,
										 FFO_CBUY_EXCTD_QTY, (char *)&st_cntfcp_pos_crrnt.l_buy_exctd_qty,
										 FFO_UPLD_MTCH_FLG,  (char *)&c_api_src_flg
									   );
			if ( i_returncode != 0 )
			{
				fn_errlog( c_ServiceName, "S31070", LIBMSG, c_err_msg.arr );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
				tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
			}

      /*** ver 1.1 starts  ****/
       
     if ( c_rqst_rcvd == ADVNCE_MARGIN_CALCULATOR )
     {
       /**** creating input for calling service to get Record level Order Margin **/

       /** for testing ****/

        if(DEBUG_MSG_LVL_4)
        {
         fn_userlog( c_ServiceName, " st_cntfcp_pos_crrnt.l_ibuy_qty :%ld:",st_cntfcp_pos_crrnt.l_ibuy_qty);
         fn_userlog( c_ServiceName, " st_cntfcp_pos_crrnt.d_ibuy_ord_val :%lf:",st_cntfcp_pos_crrnt.d_ibuy_ord_val); 
         fn_userlog( c_ServiceName, " st_cntfcp_pos_crrnt.l_isell_qty :%ld:",st_cntfcp_pos_crrnt.l_isell_qty);
         fn_userlog( c_ServiceName, " st_cntfcp_pos_crrnt.d_isell_ord_val :%lf:",st_cntfcp_pos_crrnt.d_isell_ord_val);
        }
     
      ptr_fml_SFObuf = NULL;
      i_returncode = fn_pack_vartofml_local ( c_ServiceName,
                     c_err_msg.arr,
                     &ptr_fml_SFObuf,
                     23,
                     FFO_C_OPNPSTN_FLW,  (char *)&st_cntfcp_pos_crrnt.c_opnpstn_flw,
                     FFO_PRDCT_TYP,      (char *)&st_cntfcp_pos_crrnt.c_prd_typ,
                     FFO_UNDRLYNG,       (char *)st_cntfcp_pos_crrnt.c_undrlyng,
                     FFO_EXPRY_DT,       (char *)st_cntfcp_pos_crrnt.c_expry_dt,
                     FFO_EXER_TYP,       (char *)&st_cntfcp_pos_crrnt.c_exer_typ,
                     FFO_OPT_TYP,        (char *)&st_cntfcp_pos_crrnt.c_opt_typ,
                     FFO_STRK_PRC,       (char *)&st_cntfcp_pos_crrnt.l_strike_prc,
                     FFO_CTGRY_INDSTK,   (char *)&st_cntfcp_pos_crrnt.c_ctgry_indstk,
                     FFO_CI_BUY_QTY,     (char *)&st_cntfcp_pos_crrnt.l_ibuy_qty,
                     FFO_CI_SELL_QTY,    (char *)&st_cntfcp_pos_crrnt.l_isell_qty,
                     FFO_CI_BUY_ORD_VL,  (char *)&st_cntfcp_pos_crrnt.d_ibuy_ord_val,
                     FFO_CI_SELL_ORD_VL, (char *)&st_cntfcp_pos_crrnt.d_isell_ord_val,
                     FFO_C_OPNPSTN_QTY,  (char *)&l_null,
                     FFO_C_ORG_OPN_VAL,  (char *)&d_null,
                     FFO_RQST_TYP,       (char *)&c_rqst_typ,
                     FFO_ROUT_CRT,       (char *)st_usr_prfl.c_rout_crt,
                     FFO_USR_ID,         (char *)st_usr_prfl.c_user_id,
                     FFO_SSSN_ID,        (char *)&st_usr_prfl.l_session_id,
                     FFO_XCHNG_CD,       (char *)c_xchng_cd,
                     FFO_EBA_MTCH_ACT_NO,(char *)st_usr_prfl.c_cln_mtch_accnt,
                     FFO_CSELL_EXCTD_QTY,(char *)&st_cntfcp_pos_crrnt.l_sell_exctd_qty,
                     FFO_CBUY_EXCTD_QTY, (char *)&st_cntfcp_pos_crrnt.l_buy_exctd_qty,
                     FFO_UPLD_MTCH_FLG,  (char *)&c_api_src_flg
                     );          

      if ( i_returncode != 0 )
      {
        fn_errlog( c_ServiceName, "S31075", LIBMSG, c_err_msg.arr );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
      } 
     
      ptr_fml_RFbuf = ( FBFR32 *)NULL;
      ptr_fml_RFbuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

      if ( ptr_fml_RFbuf == NULL )
      {
       fn_errlog( c_ServiceName, "S31080", TPMSG, c_err_msg.arr  );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
       tpfree( ( char * )ptr_fml_SFbuf);
       tpfree( ( char * )ptr_fml_SFObuf);
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      } 
    
     if(DEBUG_MSG_LVL_4)
     {
      fn_userlog( c_ServiceName, " inside record wise order Margin fetch for i_fut_cnt :%d:",i_fut_cnt);
     }
     i_returncode = tpcall ( "SFO_FUT_MGCAL",
                   ( char *)ptr_fml_SFObuf,
                   0,
                   ( char **)&ptr_fml_RFbuf,
                   &l_recvbuf,
                   0
                   );
      if ( i_returncode != SUCC_BFR )
      {
        fn_errlog( c_ServiceName, "S31085",TPMSG,c_err_msg.arr);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        tpfree( ( char * )ptr_fml_RFbuf);
        tpfree( ( char * )ptr_fml_SFbuf);
        tpfree( ( char * )ptr_fml_SFObuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      
      
      i_err [ 0 ] = Fget32( ptr_fml_RFbuf ,FFO_U_ORDR_MRGN,0,(char *)&d_ordr_mrgn_rcrd_lvl ,0);
      i_ferr[0] = Ferror32;

       if(i_err[i] == -1 )
       {
         fn_userlog( c_ServiceName, "Error in Fetching record Level Order Margin"); 
         Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
         tpfree( ( char * )ptr_fml_RFbuf);
         tpfree( ( char * )ptr_fml_SFbuf);
         tpfree( ( char * )ptr_fml_SFObuf);
         tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
       }    
      
      fn_userlog( c_ServiceName, "Order Level Margin for Non-Span Future is :%lf:",d_ordr_mrgn_rcrd_lvl);

      i_returncode = fn_pack_vartofml_local ( c_ServiceName,
                     c_err_msg.arr,
                     &ptr_fml_Obuf,
                     9,
                     FFO_BASE_ORD_VAL,  (char *)&d_ordr_mrgn_rcrd_lvl,
                     FFO_PRDCT_TYP,      (char *)&st_cntfcp_pos_crrnt.c_prd_typ,
                     FFO_UNDRLYNG,       (char *)st_cntfcp_pos_crrnt.c_undrlyng,
                     FFO_EXPRY_DT,       (char *)st_cntfcp_pos_crrnt.c_expry_dt,
                     FFO_OPT_TYP,        (char *)&st_cntfcp_pos_crrnt.c_opt_typ,
                     FFO_STRK_PRC,       (char *)&st_cntfcp_pos_crrnt.l_strike_prc,
                     FFO_C_OPNPSTN_FLW,  (char *)&st_cntfcp_pos_crrnt.c_opnpstn_flw,
                     FFO_C_OPNPSTN_QTY,  (char *)&st_cntfcp_pos_crrnt.l_opnpstn_qty,
                     FFO_C_ORG_OPN_VAL,  (char *)&st_cntfcp_pos_crrnt.d_opnpstn_val
                     );

      if ( i_returncode != 0 )
      {
        fn_errlog( c_ServiceName, "S31090", LIBMSG, c_err_msg.arr );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        tpfree( ( char * )ptr_fml_RFbuf);
        tpfree( ( char * )ptr_fml_SFbuf);
        tpfree( ( char * )ptr_fml_SFObuf);
        tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
      }

      tpfree( ( char * ) ptr_fml_RFbuf);
      tpfree( ( char * )ptr_fml_SFObuf);
     } 

     /*** ver 1.1 ends ****/  
     
		}
		else if (st_cntfcp_pos_crrnt.c_prd_typ == 'O')
		{
			ptr_fml_SObuf = NULL;
      
			i_returncode = fn_pack_vartofml_local ( c_ServiceName,
										 c_err_msg.arr,
										 &ptr_fml_SObuf,
										 21,
										 FFO_C_OPNPSTN_FLW,  (char *)&st_cntfcp_pos_crrnt.c_opnpstn_flw,
										FFO_PRDCT_TYP,      (char *)&st_cntfcp_pos_crrnt.c_prd_typ,
										FFO_UNDRLYNG,       (char *)st_cntfcp_pos_crrnt.c_undrlyng,
										FFO_EXPRY_DT,       (char *)st_cntfcp_pos_crrnt.c_expry_dt,
										FFO_EXER_TYP,       (char *)&st_cntfcp_pos_crrnt.c_exer_typ,
										FFO_OPT_TYP,        (char *)&st_cntfcp_pos_crrnt.c_opt_typ,
										FFO_STRK_PRC,       (char *)&st_cntfcp_pos_crrnt.l_strike_prc,
										FFO_CTGRY_INDSTK,   (char *)&st_cntfcp_pos_crrnt.c_ctgry_indstk,
										FFO_CI_BUY_QTY,     (char *)&st_cntfcp_pos_crrnt.l_ibuy_qty,  
										FFO_CI_SELL_QTY,    (char *)&st_cntfcp_pos_crrnt.l_isell_qty,  
										FFO_CI_BUY_ORD_VL,  (char *)&st_cntfcp_pos_crrnt.d_ibuy_ord_val,
										FFO_CI_SELL_ORD_VL, (char *)&st_cntfcp_pos_crrnt.d_isell_ord_val,
										FFO_C_OPNPSTN_QTY,  (char *)&st_cntfcp_pos_crrnt.l_opnpstn_qty,
										FFO_C_ORG_OPN_VAL,  (char *)&st_cntfcp_pos_crrnt.d_opnpstn_val,
										FFO_SOURCE_FLG,     (char *)&c_rqst_typ,
										FFO_ROUT_CRT,				(char *)st_usr_prfl.c_rout_crt,
                    FFO_USR_ID,         (char *)st_usr_prfl.c_user_id,
                    FFO_SSSN_ID,        (char *)&st_usr_prfl.l_session_id,
                    FFO_XCHNG_CD,       (char *)c_xchng_cd,
                    FFO_EBA_MTCH_ACT_NO,(char *)st_usr_prfl.c_cln_mtch_accnt,
										FFO_UPLD_MTCH_FLG,  (char *)&c_api_src_flg
									   );
			if ( i_returncode != 0 )
			{
				fn_errlog( c_ServiceName, "S31095", LIBMSG, c_err_msg.arr );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
				tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
			}

			 ptr_fml_RObuf = ( FBFR32 *)NULL;																	
			 ptr_fml_RObuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);   
			
			if ( ptr_fml_RObuf == NULL ) 
			{
				fn_errlog( c_ServiceName, "S31100", TPMSG, c_err_msg.arr  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}	
      
			i_returncode = tpcall ( "SFO_OPT_MGCAL",
							 ( char *)ptr_fml_SObuf,
							 0,
							 ( char **)&ptr_fml_RObuf,
							 &l_recvbuf,
							 0
							 );
			if ( i_returncode != SUCC_BFR )
			{
				fn_errlog( c_ServiceName, "S31105",TPMSG,c_err_msg.arr);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
				tpfree( ( char * ) ptr_fml_RObuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			i_err [ 0 ] = Fget32( ptr_fml_RObuf ,FFO_C_ORDR_MRGN,0,(char *)&d_ordr_mrgn ,0);
			i_ferr[0] = Ferror32;
			i_err [ 1 ] = Fget32( ptr_fml_RObuf ,FFO_C_TRD_MRGN,0,(char *)&d_trd_mrgn ,0);
			i_ferr[1] = Ferror32;
			i_err [ 2 ] = Fget32( ptr_fml_RObuf ,FFO_ORD_AMT_BLKD,0,(char *)&d_blkd_ordr_mrgn,0);
			i_ferr[2] = Ferror32;
			i_err [ 3 ] = Fget32( ptr_fml_RObuf ,FFO_C_BLKD_TRD_MRGN,0,(char *)&d_blkd_trd_mrgn,0);
			i_ferr[3] = Ferror32;

		  for(i=0;i<4;i++)
		  {
				if(i_err[i] == -1 )
				{
					fn_userlog( c_ServiceName, " Error in field no %d", i);
					errlog(c_ServiceName, "S31110", Fstrerror32(i_ferr[i]),(char *)DEF_USR,DEF_SSSN, c_err_msg.arr);
					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
					tpfree( ( char * ) ptr_fml_RObuf);
					tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
				}
		  }
      
     /*** ver 1.1 starts ***/
     if ( c_rqst_rcvd == ADVNCE_MARGIN_CALCULATOR )
     { 

      fn_userlog( c_ServiceName, "Order Level Margin for Non-span Option is :%lf:",d_ordr_mrgn);
      
      i_returncode = fn_pack_vartofml_local ( c_ServiceName,
                     c_err_msg.arr,
                     &ptr_fml_Obuf,
                     9,
                     FFO_BASE_ORD_VAL,  (char *)&d_ordr_mrgn,
                     FFO_PRDCT_TYP,      (char *)&st_cntfcp_pos_crrnt.c_prd_typ,
                     FFO_UNDRLYNG,       (char *)st_cntfcp_pos_crrnt.c_undrlyng,
                     FFO_EXPRY_DT,       (char *)st_cntfcp_pos_crrnt.c_expry_dt,
                     FFO_OPT_TYP,        (char *)&st_cntfcp_pos_crrnt.c_opt_typ,
                     FFO_STRK_PRC,       (char *)&st_cntfcp_pos_crrnt.l_strike_prc,
                     FFO_C_OPNPSTN_FLW,  (char *)&st_cntfcp_pos_crrnt.c_opnpstn_flw,
                     FFO_C_OPNPSTN_QTY,  (char *)&st_cntfcp_pos_crrnt.l_opnpstn_qty,
                     FFO_C_ORG_OPN_VAL,  (char *)&st_cntfcp_pos_crrnt.d_opnpstn_val
                     );

      if ( i_returncode != 0 )
      {
        fn_errlog( c_ServiceName, "S31115", LIBMSG, c_err_msg.arr );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        tpfree( ( char * )ptr_fml_RFbuf);
        tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
      }
       
     } 
     /*** ver 1.1 ends ***/ 
        
			d_tot_ordr_mrgn = d_tot_ordr_mrgn + d_ordr_mrgn;
			d_tot_trd_mrgn = d_tot_trd_mrgn + d_trd_mrgn;
			d_tot_blkd_ordr_mrgn = d_tot_blkd_ordr_mrgn + d_blkd_ordr_mrgn;
			d_tot_blkd_trd_mrgn = d_tot_blkd_trd_mrgn + d_blkd_trd_mrgn;

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName, "OPT: :%d: d_ordr_mrgn :%lf:", l_cntr,d_ordr_mrgn);
				fn_userlog( c_ServiceName, "OPT: :%d: d_trd_mrgn :%lf:", l_cntr,d_trd_mrgn);
				fn_userlog( c_ServiceName, "OPT: :%d: d_blkd_ordr_mrgn :%lf:", l_cntr,d_blkd_ordr_mrgn);
				fn_userlog( c_ServiceName, "OPT: :%d: d_blkd_trd_mrgn :%lf:", l_cntr,d_blkd_trd_mrgn);
			}
			tpfree( ( char * ) ptr_fml_RObuf);
		}
   
   }    /*** condition ends for Non-Span ver 1.1 **/

 	 l_cntr  ++;		
	}

	if(DEBUG_MSG_LVL_3)
  {
		fn_userlog( c_ServiceName, " After while loop i_fut_cnt :%d:",i_fut_cnt);	
	}
  
  /******************* ver 1.1 starts ***********************/
  
   if ( i_opt_cnt > 0 )
   {

    ptr_fml_RFbuf = ( FBFR32 *)NULL;
    ptr_fml_RFbuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
    
    if ( ptr_fml_RFbuf == NULL )
    {
      fn_errlog( c_ServiceName, "S31120", TPMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpfree( ( char * )ptr_fml_spnbuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog( c_ServiceName, " inside i_opt_cnt :%d:",i_fut_cnt);
    }
    
    i_returncode = tpcall ( "SFO_SPN_MRGCAL",
                          ( char *)ptr_fml_spnbuf,
                           0,
                          ( char **)&ptr_fml_RFbuf,
                          &l_recvbuf,
                          0
                          );
    if ( i_returncode != SUCC_BFR )
    {
     fn_errlog( c_ServiceName, "S31125",TPMSG,c_err_msg.arr);
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
     tpfree( ( char * )ptr_fml_RFbuf);
     tpfree( ( char * )ptr_fml_spnbuf);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    
    i_err [ 0 ] = Fget32( ptr_fml_RFbuf ,FFO_U_ORDR_MRGN,0,(char *)&d_trd_mrgn ,0);
    i_ferr[0] = Ferror32;
    
    if(i_err[0] == -1 )
    {
      fn_userlog( c_ServiceName, "Error in Fetching Total Trade Margin");
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
      tpfree( ( char * )ptr_fml_RFbuf);
      tpfree( ( char * )ptr_fml_spnbuf);
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
    }
   
    d_spn_tot_trd_mrgn  = d_spn_tot_trd_mrgn + d_trd_mrgn;
  
   } 
   
  
  /******************* ver 1.1 Ends ***********************/

  if (i_fut_cnt > 0)
	{
		 ptr_fml_RFbuf = ( FBFR32 *)NULL;																	
		 ptr_fml_RFbuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);   
		
		 if ( ptr_fml_RFbuf == NULL ) 
		{
			fn_errlog( c_ServiceName, "S31130", TPMSG, c_err_msg.arr  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}	

		if(DEBUG_MSG_LVL_4)
		{
			fn_userlog( c_ServiceName, " inside i_fut_cnt :%d:",i_fut_cnt);	
		}
		i_returncode = tpcall ( "SFO_FUT_MGCAL",
									 ( char *)ptr_fml_SFbuf,
									 0,
									 ( char **)&ptr_fml_RFbuf,
									 &l_recvbuf,
									 0
									 );
			if ( i_returncode != SUCC_BFR )
			{
				fn_errlog( c_ServiceName, "S31135",TPMSG,c_err_msg.arr);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
				tpfree( ( char * )ptr_fml_RFbuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			i_err [ 0 ] = Fget32( ptr_fml_RFbuf ,FFO_U_ORDR_MRGN,0,(char *)&d_ordr_mrgn ,0);
			i_ferr[0] = Ferror32;
			i_err [ 1 ] = Fget32( ptr_fml_RFbuf ,FFO_U_TRD_MRGN,0,(char *)&d_trd_mrgn ,0);
			i_ferr[1] = Ferror32;
			i_err [ 2 ] = Fget32( ptr_fml_RFbuf ,FFO_ORD_AMT_BLKD,0,(char *)&d_blkd_ordr_mrgn,0);
			i_ferr[2] = Ferror32;
			i_err [ 3 ] = Fget32( ptr_fml_RFbuf ,FFO_C_BLKD_TRD_MRGN,0,(char *)&d_blkd_trd_mrgn,0);
			i_ferr[3] = Ferror32;

		  for(i=0;i<4;i++)
		  {
				if(i_err[i] == -1 )
				{
					fn_userlog( c_ServiceName, " Error in field no %d", i);
					errlog(c_ServiceName, "S31140", Fstrerror32(i_ferr[i]),(char *)DEF_USR,DEF_SSSN, c_err_msg.arr);
					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
					tpfree( ( char * )ptr_fml_RFbuf);
					tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
				}
		  }

			if(DEBUG_MSG_LVL_4)
			{
				fn_userlog( c_ServiceName, "FUT: d_ordr_mrgn :%lf:", d_ordr_mrgn);
				fn_userlog( c_ServiceName, "FUT: d_trd_mrgn :%lf:", d_trd_mrgn);
				fn_userlog( c_ServiceName, "FUT: d_blkd_ordr_mrgn :%lf:", d_blkd_ordr_mrgn);
				fn_userlog( c_ServiceName, "FUT: d_blkd_trd_mrgn :%lf:", d_blkd_trd_mrgn);
			}

			d_tot_ordr_mrgn = d_tot_ordr_mrgn + d_ordr_mrgn;
			d_tot_trd_mrgn = d_tot_trd_mrgn + d_trd_mrgn;
			d_tot_blkd_ordr_mrgn = d_tot_blkd_ordr_mrgn + d_blkd_ordr_mrgn;
			d_tot_blkd_trd_mrgn = d_tot_blkd_trd_mrgn + d_blkd_trd_mrgn;

			tpfree( ( char * )ptr_fml_RFbuf);
	 }
   
  if ( c_rqst_rcvd != ADVNCE_MARGIN_CALCULATOR ) /** condition added in ver 1.1 **/
  { 
	 ptr_fml_Obuf = NULL;
  }
	i_ch_val = fn_pack_vartofml_local ( c_ServiceName,
                                c_err_msg.arr,
                                &ptr_fml_Obuf,
                                5,  /** ver 1.1 changd from 4 to 5 **/
                            		FFO_U_ORDR_MRGN, (char *)&d_tot_ordr_mrgn,
                            		FFO_U_TRD_MRGN, (char *)&d_tot_trd_mrgn,
																FFO_ORD_AMT_BLKD, (char *)&d_tot_blkd_ordr_mrgn,
																FFO_C_BLKD_TRD_MRGN, (char *)&d_tot_blkd_trd_mrgn,
                                FFO_INIT_MRGN_PRCNT, (char *)&d_spn_tot_trd_mrgn   /*** ver 1.1 used for span total mrgn **/
                              );

  if ( i_ch_val != 0 )
  {
    fn_errlog( c_ServiceName, "S31145", LIBMSG, c_err_msg.arr );
    tpfree ( ( char * ) ptr_fml_Obuf );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }

	if(DEBUG_MSG_LVL_0)
  {
		fn_userlog( c_ServiceName, "d_tot_ordr_mrgn :%lf:", d_tot_ordr_mrgn);
		fn_userlog( c_ServiceName, "d_tot_trd_mrgn :%lf:", d_tot_trd_mrgn);
		fn_userlog( c_ServiceName, "d_tot_blkd_ordr_mrgn :%lf:", d_tot_blkd_ordr_mrgn);
		fn_userlog( c_ServiceName, "d_tot_blkd_trd_mrgn :%lf:", d_tot_blkd_trd_mrgn);
	}
  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
}

/******** ver 1.1 starts **********/

int fn_pack_vartofml_local ( char *c_ServiceName,
                       char *c_err_msg,
                       FBFR32 **ptr_fml_obuf,
                       int i_tot_ofields,
                       ... )
{
  va_list c_arg_lst;
  int i_cnt;
  int i_ch_val;
  /*unsigned long l_op_fml; */
  unsigned int i_op_fml; /* Ver 1.3 64 bit portability */
  char *c_op_dat;
  static int i_buf_cnt;

  if ( *ptr_fml_obuf == NULL )
  {
    *ptr_fml_obuf = (FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
    if (*ptr_fml_obuf == NULL)
    {
      fn_errlog( c_ServiceName, "L31130", TPMSG, c_err_msg );
      return SYSTEM_ERROR;
    }
    i_buf_cnt = 1;
  }

  fn_userlog( c_ServiceName, "Inside Local pack to fml func");

  va_start ( c_arg_lst,i_tot_ofields );
  for ( i_cnt=1; i_cnt<=i_tot_ofields; i_cnt++ )
  {
    i_op_fml = va_arg ( c_arg_lst, unsigned int ); /* ver 1.3 2nd parameter unsigned long changed to unsigned int */
                                                    /* variable l_op_fml changed to i_op_fml */
    c_op_dat = va_arg ( c_arg_lst, char* );
    i_ch_val = Fadd32(*ptr_fml_obuf, i_op_fml, (char *)c_op_dat, 0);
                                                /* ver 1.3 2nd parameter l_op_fml changed to i_op_fml */
    if ( i_ch_val == -1 )
    {
      if ( Ferror32 == FNOSPACE )
      {
        i_buf_cnt++;
        *ptr_fml_obuf = ( FBFR32 * ) tprealloc ( ( char * )*ptr_fml_obuf,
                                                 i_buf_cnt * MIN_FML_BUF_LEN * 10 );
        if (*ptr_fml_obuf == NULL)
        {
          fn_errlog( c_ServiceName, "L31135", TPMSG, c_err_msg );
          return SYSTEM_ERROR;
        }

        i_ch_val = Fadd32(*ptr_fml_obuf, i_op_fml, (char *)c_op_dat, 0);
                                               /* ver 1.3 2nd parameter l_op_fml changed to i_op_fml */
        if ( i_ch_val == -1 )
        {
          fn_userlog ( c_ServiceName, "Error in field :%d:", i_cnt );
          fn_errlog( c_ServiceName, "L31140", FMLMSG, c_err_msg );
          tpfree ( ( char * )*ptr_fml_obuf );
          return SYSTEM_ERROR;
        }
      }
      else
      {
        fn_userlog ( c_ServiceName, "Error in field :%d:", i_cnt );
        fn_errlog( c_ServiceName, "L31145", FMLMSG, c_err_msg );
        return SYSTEM_ERROR;
      }
    }
  }

  return 0;
}

/******** ver 1.1 Ends *************/
