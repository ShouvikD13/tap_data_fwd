/******************************************************************************/
/*	Program	    			:	SFO_GET_LIMITS                                        */
/*                                                                            */
/*  Input             : FFO_EBA_MTCH_ACT_NO                                   */
/* 											FFO_TRD_DT																						*/
/*                      FFO_RQST_TYP                                          */
/*                                                                            */
/*  Output            :                                                       */
/*																																						*/
/*	Optional					:	FFO_XCHNG_CD																					*/
/*											FFO_GID																								*/
/*                                                                            */
/*  Description       :This service calculates the Limit , Limit  for a given */
/*    								 group id or  the Future uncovered debit amount and     */
/* 										 returns the value depending on the Input request type. */
/*										 This service should be called by any requestor         */
/*										 (ASP / other services) to find the F&O limits of the   */
/*										 client for a given  date.                              */
/*										 To fetch the contract details for a given request      */
/*										 type:																									*/
/*										 A		-		LIMIT_X																				*/
/*										 B		-		LIMIT_X_GID																		*/
/*										 C		-		MAX_UNBLOCK_AMT																*/
/*                                                                            */
/*  Log               :                                                       */
/*                                                                            */
/******************************************************************************/
/* 			05/11/2001				Ver 1.0				S.Balamurugan				Release 1.0       */
/* 			22/10/2003				Ver 1.1				S.Sinha|Infotech		Bank Closed	Issue	*/
/* 			19/08/2004				Ver 1.2				S.Sinha|Infotech		Collateral				*/
/*			25/04/2008				Ver 1.3       Sandeep|Infotech		IBM Changes       */
/*			09/08/2011        Ver 1.4       Mahesh |Infotech    Store Proc Called */
/*			06/08/2014        Ver 1.5       Samip |Infotech    Exception Handling */
/*			07/10/2014        Ver 1.6       Sachin|Infotech    View to FML Changes*/
/*			01/06/2015        Ver 1.7       Sachin|Infotech    memory allocation  */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fo.h>
/** #include <fo_view_def.h> *** Ver 1.6 **/
#include <fo_view_def.h>    /*** Ver 1.6 **/
#include <fo_fml_def.h>       /*** Ver 1.6 **/
#include <fml_rout.h>         /*** Ver 1.6 **/
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fn_read_debug_lvl.h>      /*** Ver 1.3 ***/
#define SAMPLE_BRANCH '0004'    /*changed by sangeet 1.1 */
char		c_sample_branch[5] ;    /*changed by sangeet 1.1 */

double fn_find_limit( char *c_ServiceName, 
                     char *c_errmsg,
                     char *c_trd_dt, 
                     char *c_cln_mtch_accnt, 
                     struct vw_err_msg *ptr_st_err_msg );

void SFO_GET_LIMITS( TPSVCINFO *rqst )
{ 
  /** Ver 1.6 ****/
  FBFR32 *ptr_fml_Ibuf;
 	/** Ver 1.6 Ends ****/

	char c_ServiceName[ 33];
 	char c_err_msg[256];
	char c_mtch_acnt[11];
  char c_rqst_type;
  char c_trade_date[LEN_DATE];
  char c_xchng_code[4];
  long l_grpid;
  double d_amnt;
	int i_returncode;
	int i_trnsctn;
  /** 	struct vw_err_msg *ptr_st_err_msg; ** Ver 1.6 **/
	struct vw_gt_lmt_dtls *ptr_st_gt_lmt_dtls;
  
  /**** Commented in Ver 1.6 ***********************************************	
  ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                    "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
  if ( ptr_st_err_msg ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31005", TPMSG, c_err_msg );
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }
  ********* Ver 1.6 ********************************************************/

  /** memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) ); ***Ver 1.6 **/

  /** 	ptr_st_gt_lmt_dtls = (struct vw_gt_lmt_dtls *) rqst->data; **Ver 1.6 **/
  
  ptr_fml_Ibuf = (FBFR32 *)rqst->data;   /** Ver 1.6 **/
 
  strcpy ( c_ServiceName, rqst->name );
 
  INITDBGLVL(c_ServiceName);

  ptr_st_gt_lmt_dtls = malloc(sizeof(struct vw_gt_lmt_dtls ));  /** Ver 1.7 **/
 
  if ( ptr_st_gt_lmt_dtls == NULL )
  {
    fn_errlog( c_ServiceName, "S31010", TPMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  } 

  i_returncode = fn_unpack_fmltovar_dflt ( c_ServiceName,
                                           c_err_msg,
                                           ptr_fml_Ibuf,
                                           6,
                                           FFO_XCHNG_CD, (char*)ptr_st_gt_lmt_dtls->c_xchng_cd,"*",
                                           FFO_EBA_MTCH_ACT_NO,(char*)ptr_st_gt_lmt_dtls->c_cln_mtch_accnt,"*",
                                           FFO_TRD_DT, (char*)ptr_st_gt_lmt_dtls->c_trd_dt,"NULL",
                                           FFO_GID, (char*)&ptr_st_gt_lmt_dtls->l_gid,0,
                                           FFO_RQST_TYP,(char*)&ptr_st_gt_lmt_dtls->c_rqst_typ,"*",
                                           FFO_ROUT_CRT,(char*)ptr_st_gt_lmt_dtls->c_rout_crt,"*"
                                         );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    free((char*)ptr_st_gt_lmt_dtls);  /** Ver 1.7 **/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Ver 1.6 Ends here ***********/

	 i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

   if ( i_trnsctn == -1 )
   {
      fn_errlog ( c_ServiceName, "S31020",LIBMSG,c_err_msg );
   		/** tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); ** ver 1.6 **/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );        /** Ver 1.6 **/
      free((char*)ptr_st_gt_lmt_dtls);  /** Ver 1.7 **/ 
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );   /** Ver 1.6 **/
	 }

   strcpy ( c_mtch_acnt,  ptr_st_gt_lmt_dtls->c_cln_mtch_accnt );
   strcpy ( c_trade_date, ptr_st_gt_lmt_dtls->c_trd_dt );
   strcpy ( c_xchng_code, ptr_st_gt_lmt_dtls->c_xchng_cd);
   l_grpid = ptr_st_gt_lmt_dtls->l_gid;
   c_rqst_type = ptr_st_gt_lmt_dtls->c_rqst_typ;

	 if ( DEBUG_MSG_LVL_3 )	
	 {	
   		fn_userlog(c_ServiceName," Before Call to Store Proc...");
   		fn_userlog(c_ServiceName," Client Match A/C    |%s|",c_mtch_acnt);
   		fn_userlog(c_ServiceName," Trade Date          |%s|",c_trade_date);
   		fn_userlog(c_ServiceName," Exchange Code       |%s|",c_xchng_code);
   		fn_userlog(c_ServiceName," Group Id            |%ld|",l_grpid);
   		fn_userlog(c_ServiceName," Request Type        |%c|",c_rqst_type);
	 }	
   /****** Ver 1.4 Calling Store proc *******/

     EXEC SQL
          EXECUTE
            BEGIN
            LIMIT_CAL
              ( :c_mtch_acnt,
                :c_trade_date,
                :c_rqst_type,
                :l_grpid,
                :c_xchng_code,
                :d_amnt,
                :i_returncode
              );
            END;
          END-EXEC;

		/** Added for Ver 1.5 **/

		if ( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName," i_returncode	|%d|",i_returncode);
		}
		/** End for Ver 1.5 **/

    if ( i_returncode != 0 ) /** Condition changed for Ver 1.5 **/
    {
  		fn_aborttran ( c_ServiceName, i_trnsctn, c_err_msg );
 			fn_errlog ( c_ServiceName, "S31025",LIBMSG,c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );        /** Ver 1.6 **/
      free((char*)ptr_st_gt_lmt_dtls);  /** Ver 1.7 **/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );   /** Ver 1.6 **/
			/** tpreturn ( TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); ** Ver 1.6 **/
    }

    if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	fn_errlog ( c_ServiceName, "S31030",LIBMSG,c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );        /** Ver 1.6 **/
      free((char*)ptr_st_gt_lmt_dtls);  /** Ver 1.7 **/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );   /** Ver 1.6 **/
			/** tpreturn ( TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); ** Ver 1.6 **/
		}

		if ( DEBUG_MSG_LVL_0 )
		{
    		fn_userlog ( c_ServiceName,"Store Procedure Retuns Amount IS:-     |%lf|",d_amnt);
		}
    
		ptr_st_gt_lmt_dtls->d_amt = d_amnt;



	/************* Commented in VER 1.4 ****************
	long long ll_dr_cr_amt;
	long long ll_amt;
	long long ll_alc;
	long long ll_cbl_before;
	long long ll_cbl_onward;
	varchar c_payio_dt [ 12 ];

	EXEC SQL BEGIN DECLARE SECTION;
		struct vw_gt_lmt_dtls *ptr_st_gt_lmt_dtls;
		varchar c_payin_dt [ 12 ];
		varchar c_payout_dt [ 12 ];
		double d_cbl_before;
		double d_cbl_onward;
		double d_cr_dr_amt;
		double d_alctd_amt;
		double d_bft_amt;
		double d_plg_amt;		*1.2*
		double d_amt;
		int		 i_trnsctn ;

	EXEC SQL END DECLARE SECTION;

	struct vw_err_msg *ptr_st_err_msg;

	ptr_st_gt_lmt_dtls = (struct vw_gt_lmt_dtls *) rqst->data;
	strcpy(c_ServiceName,rqst->name);

	INITDBGLVL(c_ServiceName);			*** Ver 1.3 ***

	ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
  if ( ptr_st_err_msg ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31035", TPMSG, c_errmsg );
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }

  memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

******************************************************************************************
	View_fo_dr_cr_dt, view_cbl_x were initially implemented as oracle views.
 Its performance was having a problem.Hence they have been moved to global temporary tables.
 But the schema names continue to be the same. 23-10-2002
*******************************************************************************************

  i_trnsctn = fn_begintran( c_ServiceName, ptr_st_err_msg->c_err_msg );
  if ( i_trnsctn == -1 )
  {
		fn_errlog( c_ServiceName, "S31040",SQLMSG,ptr_st_err_msg->c_err_msg);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  }

	
	EXEC SQL
	delete view_fo_dr_cr_dt ;
	

	EXEC SQL
	delete view_cbl_x ;



	EXEC SQL
	INSERT 	INTO 	view_fo_dr_cr_dt
								( PAYIO_DT,
									DC_AMT,
									FCB_CLM_MTCH_ACCNT )
							  	( SELECT decode ( FCB_DC_FLG, 'D', 
									FCB_PAYIN_DT, FCB_PAYOUT_DT), 
		   						sum(FCB_DC_AMT), 
		    					FCB_CLM_MTCH_ACCNT 
		   						FROM 	FCB_FO_CLNT_BLNCS 
	  							WHERE FCB_CLM_MTCH_ACCNT = :ptr_st_gt_lmt_dtls->c_cln_mtch_accnt
									AND 	FCB_DC_AMT != 0
		       				group by FCB_CLM_MTCH_ACCNT,decode(FCB_DC_FLG,'D',FCB_PAYIN_DT,FCB_PAYOUT_DT));
	if ( SQLCODE != 0 )
	{
		fn_errlog( c_ServiceName, "S31045",SQLMSG,ptr_st_err_msg->c_err_msg);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
 	}

	EXEC SQL
	INSERT 	INTO view_cbl_x 
							( FCB_CLM_MTCH_ACCNT,
								PAYIO_DT,
								CBL_AMT )
								(SELECT B.FCB_CLM_MTCH_ACCNT , 
		            B.PAYIO_DT ,
		            SUM(A.DC_AMT) 
		       			FROM view_fo_dr_cr_dt A , view_fo_dr_cr_dt B 
		       			WHERE A.PAYIO_DT <= B.PAYIO_DT 
		      			group by B.FCB_CLM_MTCH_ACCNT ,  B.PAYIO_DT ) ; 
	if ( SQLCODE != 0 )
	{
		fn_errlog( c_ServiceName, "S31050",SQLMSG,ptr_st_err_msg->c_err_msg);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
 	}
*************************************************************************************
	End of conversion of view to GTT code
*************************************************************************************

  ptr_st_gt_lmt_dtls->d_amt = 0;

  *** Added for Order Routing ***
  fn_init_ddr_val ( ptr_st_gt_lmt_dtls->c_rout_crt );

	EXEC SQL
		SELECT  NVL(fab_alctd_amt,0),
						NVL(fab_bft_amt,0),
						NVL(fab_plg_amt,0)		*1.2*
		INTO		:d_alctd_amt,
						:d_bft_amt, 
						:d_plg_amt		*1.2*
		FROM		fab_fo_alc_bft_smry
		WHERE		fab_clm_mtch_accnt = :ptr_st_gt_lmt_dtls->c_cln_mtch_accnt;
	
	if( ( SQLCODE != 0 )&& ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog( c_ServiceName, "S31055",SQLMSG,ptr_st_err_msg->c_err_msg);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  }
	else if( SQLCODE == NO_DATA_FOUND )
	{
		d_alctd_amt = 0;
		d_bft_amt = 0;
		d_plg_amt = 0;	*1.2*
	}

	if( ptr_st_gt_lmt_dtls->c_rqst_typ == LIMIT_X )
	{
		d_amt = fn_find_limit(c_ServiceName,
													c_errmsg,
													ptr_st_gt_lmt_dtls->c_trd_dt,
													ptr_st_gt_lmt_dtls->c_cln_mtch_accnt,
													ptr_st_err_msg);
		d_amt = d_amt + d_alctd_amt + d_bft_amt + d_plg_amt;		*1.2*
  	fn_userlog ( c_ServiceName,"FINAL AMT,ALCTD_AMT,BFT_AMT,PLG_AMT IN LIMIT_X is |%lf|%lf|%lf|%lf|",d_amt,d_alctd_amt,d_bft_amt,d_plg_amt);
	}
	else if( ptr_st_gt_lmt_dtls->c_rqst_typ == LIMIT_X_GID )
	{
		if( ptr_st_gt_lmt_dtls->l_gid == -1 )
		{
    	fn_userlog ( c_ServiceName,"Invalid Group Id");
			strcpy(ptr_st_err_msg->c_err_msg,"Invalid Group Id");
	    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}

		if( strcmp(ptr_st_gt_lmt_dtls->c_xchng_cd,"*")==0)
		{
    	fn_userlog ( c_ServiceName,"Invalid Exchange Code");
			strcpy(ptr_st_err_msg->c_err_msg,"Invalid Exchange Code");
	    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}
	
		EXEC SQL
			SELECT  to_char( fcb_payin_dt, 'DD-Mon-YYYY' ),
					 	  to_char( fcb_payout_dt, 'DD-Mon-YYYY' ),
							fcb_dc_amt
			INTO	  :c_payin_dt,
							:c_payout_dt,
              :d_cr_dr_amt
			FROM    fcb_fo_clnt_blncs
			WHERE 	fcb_clm_mtch_accnt  = :ptr_st_gt_lmt_dtls->c_cln_mtch_accnt
			AND 		fcb_trd_dt  = to_date( :ptr_st_gt_lmt_dtls->c_trd_dt,
																				 'dd-Mon-yyyy')
			AND 		fcb_grp_id   = :ptr_st_gt_lmt_dtls->l_gid
			AND			fcb_xchng_cd = :ptr_st_gt_lmt_dtls->c_xchng_cd;

		if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  	{
    	fn_errlog( c_ServiceName, "S31060",SQLMSG,ptr_st_err_msg->c_err_msg);
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  	}	


		if( SQLCODE == NO_DATA_FOUND )
		{
			d_cr_dr_amt = 0;
			strcpy((char * )c_payio_dt.arr,ptr_st_gt_lmt_dtls->c_trd_dt);
			SETLEN(c_payio_dt);
			d_amt = fn_find_limit(c_ServiceName,
														c_errmsg,
														ptr_st_gt_lmt_dtls->c_trd_dt,
														ptr_st_gt_lmt_dtls->c_cln_mtch_accnt,
														ptr_st_err_msg);
		}
		else
		{
			SETNULL(c_payin_dt);
			SETNULL(c_payout_dt);

			ll_dr_cr_amt = (long long) d_cr_dr_amt;

			if( ll_dr_cr_amt <= 0 )
			{
				d_cr_dr_amt = 0;
				strcpy((char *)c_payio_dt.arr,ptr_st_gt_lmt_dtls->c_trd_dt);
				SETLEN(c_payio_dt);
				d_amt = fn_find_limit(c_ServiceName,
															c_errmsg,
															ptr_st_gt_lmt_dtls->c_trd_dt,
															ptr_st_gt_lmt_dtls->c_cln_mtch_accnt,
															ptr_st_err_msg);
			}
			else
			{
				EXEC SQL
					SELECT NVL(MIN(cbl_amt),0)
					INTO	 :d_cbl_before
					FROM	 view_cbl_x
					WHERE	 fcb_clm_mtch_accnt = :ptr_st_gt_lmt_dtls->c_cln_mtch_accnt
					AND		 payio_dt < to_date( :c_payout_dt, 'DD-Mon-yyyy')
				  AND		 payio_dt >= to_date(:c_payin_dt, 'DD-Mon-yyyy');
	
					if(( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
    			{
      			fn_errlog( c_ServiceName, "S31065",SQLMSG,
															ptr_st_err_msg->c_err_msg);
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    			}
					else if( SQLCODE == NO_DATA_FOUND )
					{
						d_cbl_before = 0; 	
					}
	
					EXEC SQL
						SELECT NVL(MIN(cbl_amt),0)
						INTO	 :d_cbl_onward
						FROM	 view_cbl_x
						WHERE	 fcb_clm_mtch_accnt = :ptr_st_gt_lmt_dtls->c_cln_mtch_accnt
						AND		 payio_dt >= to_date( :c_payout_dt, 'DD-Mon-yyyy');

						if(( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND ))
          	{
            	fn_errlog( c_ServiceName, "S31070",SQLMSG,
																				ptr_st_err_msg->c_err_msg);
            	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
          	}
						if( SQLCODE == NO_DATA_FOUND )
						{
							d_cbl_onward = 0;
						}
		
						
						ll_cbl_before = (long long)d_cbl_before;
						ll_cbl_onward = (long long)d_cbl_onward;

						if( ll_cbl_before < ( ll_cbl_onward - ll_dr_cr_amt ) )
						{
							ll_amt = ll_cbl_before;
						}
						else
						{
							ll_amt = ll_cbl_onward - ll_dr_cr_amt;
						}

						ll_amt = ll_dr_cr_amt + ll_amt;
						d_amt = (double)ll_amt;
			} * if ll_dr_cr_amt<=0 *
		}
		
		d_amt = d_amt + d_alctd_amt + d_bft_amt + d_plg_amt;			*1.2*
  	fn_userlog ( c_ServiceName,"FINAL |AMT|ALCTD_AMT|BFT_AMT|PLG_AMT| IN LIMIT_X_GID is |%lf|%lf|%lf|%lf|",d_amt,d_alctd_amt,d_bft_amt,d_plg_amt);
	} *  LIMIT_X_GID  *
	else if( ptr_st_gt_lmt_dtls->c_rqst_typ == MAX_UNBLOCK_AMT ) 
	{
		d_amt = fn_find_limit(c_ServiceName,
													c_errmsg,
													ptr_st_gt_lmt_dtls->c_trd_dt,
													ptr_st_gt_lmt_dtls->c_cln_mtch_accnt,
													ptr_st_err_msg);
		ll_amt = (long long)d_amt;
		ll_alc = (long long)d_alctd_amt;
		
		if( ll_amt > ll_alc )
		{
			d_amt = d_alctd_amt;
		}
  	fn_userlog ( c_ServiceName,"Final d_amt,d_alctd_amt,d_bft_amt IN MAX_UNBLOCK_AMT is :%lf:,:%lf:,:%lf:"
																																						,d_amt,d_alctd_amt,d_bft_amt);
	}
	else
	{
	  fn_userlog ( c_ServiceName,"Invalid Request Type:%c:", 
																					ptr_st_gt_lmt_dtls->c_rqst_typ);
		sprintf(c_errmsg,"Invalid Request Type [%c]",
																					ptr_st_gt_lmt_dtls->c_rqst_typ);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );	
	}
	
	ptr_st_gt_lmt_dtls->d_amt = d_amt;
  fn_userlog ( c_ServiceName,"LIMIT is |%lf|",d_amt);
	

  if ( fn_committran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg ) == -1 )
  {
		fn_errlog( c_ServiceName, "S31075",SQLMSG,ptr_st_err_msg->c_err_msg);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  }
	**************************  Ver 1.4 Comment END *************************************/

  /** tpfree ( ( char * ) ptr_st_err_msg ); ** Ver 1.6 **/

  /** Ver 1.6 Starts Here ********/

  if ( Fchg32 ( ptr_fml_Ibuf, FFO_AMOUNT,0,
                                (char *)&ptr_st_gt_lmt_dtls->d_amt, 0 ) == -1 )
  {
    fn_errlog( c_ServiceName, "S31080", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    free((char*)ptr_st_gt_lmt_dtls);  /** Ver 1.7 **/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  free((char*)ptr_st_gt_lmt_dtls);  /** Ver 1.7 **/

  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Ibuf, 0 , 0 );
  
  /*** Ver 1.6 Ends here *********/
    	
  /*** tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_gt_lmt_dtls, sizeof( struct vw_gt_lmt_dtls ), 0 ); ** Ver 1.6 **/

} /* service end */

double fn_find_limit(char *c_ServiceName,
										 char *c_errmsg,
										 char *c_trd_dt,
										 char *c_cln_mtch_accnt,
										 struct vw_err_msg *ptr_st_err_msg) 
{

	EXEC SQL BEGIN DECLARE SECTION;
		double d_amt;
		double d_amt_before;
		varchar c_payio_dt [ LEN_DATE ];
		varchar c_tmp_payio_dt [ LEN_DATE ];
		char 		c_trd_dt_input [ LEN_DATE ];
	EXEC SQL END DECLARE SECTION;
	d_amt = 0;

  fn_userlog(c_ServiceName,"match acc %s",c_cln_mtch_accnt);
  fn_userlog(c_ServiceName,"trd dt is %s",c_trd_dt);

/****************************************************************
LOGIC CHANGE BY SANGEET FOR BANK CLOSED BUT EXCHANGE OPEN THE
SAME CAN BE ACHIEVED BY CHANGING TRD_DT BY PAYIN DT  version  1.1
*****************************************************************/
	strcpy(c_sample_branch,"0004");	
	strcpy(c_trd_dt_input,c_trd_dt);

	EXEC SQL
		SELECT	FBC_CLN_PYIN_DT
		INTO		:c_trd_dt
		FROM 		FBC_FO_BRNCH_CAL 
		WHERE		FBC_BRANCH = :c_sample_branch
		AND			FBC_TRD_DT = to_date(:c_trd_dt_input, 'DD-Mon-yyyy')
		AND 		FBC_GRP_ID	= 1 ;

  fn_userlog(c_ServiceName,"FBC_CLN_PYIN_DT is :%s:",c_trd_dt);
  fn_userlog(c_ServiceName,"c_trd_dt_input is :%s:",c_trd_dt_input);
/************************1.1 Ends here***************************/

/** prospective code to be added starts here ***/
	EXEC SQL
		SELECT	cbl_amt
		INTO		:d_amt_before
		FROM 		view_cbl_x 
		WHERE		fcb_clm_mtch_accnt = :c_cln_mtch_accnt
		AND			payio_dt = to_date(:c_trd_dt, 'DD-Mon-yyyy');

	if(( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
  {
 		fn_errlog( c_ServiceName, "S31085",SQLMSG,ptr_st_err_msg->c_err_msg);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  }		

	if( SQLCODE == NO_DATA_FOUND )
	{
		EXEC SQL
			SELECT	MAX(to_char( payio_dt, 'DD-Mon-YYYY' ))
			INTO		:c_tmp_payio_dt
			FROM		view_cbl_x
			WHERE		fcb_clm_mtch_accnt = :c_cln_mtch_accnt
			AND			payio_dt <= to_date(:c_trd_dt,'DD-Mon-yyyy');
				
			if(( SQLCODE != 0 ) && ( SQLCODE != NULL_RETURN ))
   		{
 				fn_errlog( c_ServiceName, "S31090",SQLMSG,ptr_st_err_msg->c_err_msg);
     		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
   		}

			if( SQLCODE == NULL_RETURN )
			{
				d_amt_before = 0;
			}
			else
			{
				EXEC SQL
					SELECT	cbl_amt
					INTO		:d_amt_before
					FROM 		view_cbl_x 
					WHERE		fcb_clm_mtch_accnt = :c_cln_mtch_accnt
					AND			payio_dt = to_date(:c_tmp_payio_dt, 'DD-Mon-yyyy');

				if( SQLCODE != 0 ) 
   			{
 					fn_errlog( c_ServiceName,"S31095",SQLMSG,ptr_st_err_msg->c_err_msg);
     			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
   			}		

			}
	}
/** prospective code to be added ends here ***/

	EXEC SQL
		SELECT	MIN(cbl_amt)
		INTO		:d_amt
		FROM 		view_cbl_x 
		WHERE		fcb_clm_mtch_accnt = :c_cln_mtch_accnt
		AND			payio_dt >= to_date(:c_trd_dt, 'DD-Mon-yyyy');

		if(( SQLCODE != 0 ) && ( SQLCODE != NULL_RETURN ))
    {
   		fn_errlog( c_ServiceName, "S31100",SQLMSG,ptr_st_err_msg->c_err_msg);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }		


		if( SQLCODE == NULL_RETURN )
		{
			EXEC SQL
				SELECT	MAX(to_char( payio_dt, 'DD-Mon-YYYY' ))
				INTO		:c_payio_dt
				FROM		view_cbl_x
				WHERE		fcb_clm_mtch_accnt = :c_cln_mtch_accnt
				AND			payio_dt <= to_date(:c_trd_dt,'DD-Mon-yyyy');
				
				if(( SQLCODE != 0 ) && ( SQLCODE != NULL_RETURN ))
    		{
   				fn_errlog( c_ServiceName, "S31105",SQLMSG,ptr_st_err_msg->c_err_msg);
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    		}

				if( SQLCODE == NULL_RETURN )
				{
					d_amt = 0;
				}
				else
				{
					EXEC SQL
						SELECT	NVL(MIN(cbl_amt),0)
						INTO		:d_amt
						FROM 		view_cbl_x 
						WHERE		fcb_clm_mtch_accnt = :c_cln_mtch_accnt
						AND			payio_dt >= to_date(:c_payio_dt, 'DD-Mon-yyyy');

						if( SQLCODE != 0 ) 
        		{
   						fn_errlog( c_ServiceName, "S31110",SQLMSG,
																				ptr_st_err_msg->c_err_msg);
          		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
        		}
				}
		}

/** prospective code to be added starts here ***/
		if ( d_amt_before < d_amt )
		{
			return d_amt_before;
		}
/** prospective code to be added ends here ***/

return d_amt;
			
}/* Function ends */

