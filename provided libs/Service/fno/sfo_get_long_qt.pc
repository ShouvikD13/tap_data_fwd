/******************************************************************************/
/*	Program	    			:	SFO_GET_LONG_QT                                       */
/*                                                                            */
/*  Input             : vw_contract                                           */
/*                                                                            */
/*  Output            : vw_cntrctlong_qt                                      */
/*											vw_err_msg																					  */
/*                                                                            */
/*  Description       : This service gets the detailed quotes of a contract   */
/*                      viz: Last traded time, last traded price, last traded */
/*                      qty, avg. traded price, total qty and value traded,   */
/*                      best five bids and offers, price flow indicator and   */
/*                      open interest details.                                */
/*                                                                            */
/*  Log               : 1.0	18-Sep-2001		Ramesh Reddy.V                      */
/*										:	1.1	03-Mar-2008		Sandeep Patil												*/
/*										:	1.2	19-Mar-2008		Smitha Nuti													*/
/*                    : 1.3 14-Dec-2012   Navina D.                           */
/*                    : 1.4 23-Sep-2013   Navina D.                           */
/*                    : 1.5 12-Feb-2014   Sachin Birje                        */
/*                    : 1.6 20-Feb-2014   Navina D.                           */
/*                    : 1.7 17-jan-2015   Sachin Birje                        */
/*                    : 1.8 11-Aug-2015   Anand Dhopte                        */
/*                    : 1.9 18-Aug-2015   Navina D.                           */
/*                    : 1.9 18-Aug-2015   Navina D.                           */
/*                    : 2.0 01-Sep-2015   Sachin Birje.                       */
/*										: VQC 08-Sep-2016		Swapnil More.												*/	
/*                    : 2.1 04-Oct-2016   Kishor Borkar                       */
/*                    : 2.2 05-Mar-2019   Mrinal Kishore                      */
/*                    : 2.3 27-Apr-2023   Kunwar Prashant                     */ 
/*                    : 2.4 17-May-2023   Kunwar Prashant                     */
/*                    : 2.5 30-May-2023   Ravi Malla 			                    */
/******************************************************************************/
/* 1.0	-	 New Release                                                        */
/* 1.1  -  IBM MIGRATION CHANGES																							*/
/* 1.2  -  FP CHANGES																													*/
/* 1.3  -  SLTP FuturePLUS handling                                           */
/* 1.4  -  OPTIONPLUS handling                                                */
/* 1.5  -  View Changes for storing total_val_traded in exchange              */
/* 1.6  -  To display OptionPLUS link for enabled contracts only              */
/* 1.7  -  View to FML Changes                                                */
/* 1.8  -  Contract Master and Trade Quote Table Merger Changes               */
/* 1.9  -  Error Log printing                                                 */
/* 2.0  -  tpfree function commented and free() added                         */
/* VQC	-  Version Quality Control changes																		*/
/* 2.1  -  Future Trail changes                                               */
/* 2.2  -  Rollover with Spread changes                                       */
/* 2.3  -  Pop up surveillance changes                                        */
/* 2.4  -  core fix																												    */ 
/* 2.5  -  core fix																												    */ 
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
/** #include <fo_view_def.h>**** Ver 1.7 ***/
#include <fo_fml_def.h>      /** Ver 1.7 **/
#include <fo_view_def.h>   /** Ver 1.7 **/
#include <fml_rout.h>        /** Ver 1.7 */
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fn_read_debug_lvl.h>			/*** Ver 1.1 ***/

void SFO_GET_LONG_QT( TPSVCINFO *rqst )
{
	char  c_ServiceName[33];
  varchar  c_errmsg[256];										/** VQC Changed data type from char to varchar **/

	char c_undrlying[7]	; /** Ver 1.7**/
  char c_user_id[9];    /*** Ver 2.1 ***/
	char c_cln_mtch_accnt[11]; /*** Ver 2.1 ***/
  char c_chk_flg='Y';   /*** Ver 2.1 ***/
	char c_r_sprd_flg = 'N'; /*** Ver 2.2 ***/
  char c_survmsg[500]="\0";     /* Ver 2.3 */
  char c_surv_flg='\0';        /* Ver 2.3*/

/*int		i_trnsctn;   Commented in VQC as it was unused **/ 
  int   i_returncode=0;  /** Ver 1.7 **/
  int   i_freturncode=0;  /** Ver 2.1 **/
  int   i;   /** Ver 1.7 **/

  double d_sltp_upd_cnd         = 0.0;          /*** Ver 2.1 ***/

  /** Ver 1.7 ****/
  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;
  /** Ver 1.7 Ends ****/	

  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_contract *ptr_st_contract;
    struct vw_cntrctlong_qt *ptr_st_cntrctlong_qt;
    varchar c_expiry_dt [ LEN_DATE ];
    varchar c_expiry_dt1 [ LEN_DATE ] = {'\0'};				/*** Ver 2.2 ***/
    varchar c_exp_dt [ LEN_DATE ];
    varchar c_lst_trd_dt [ LEN_DATE ];
/*	short i_indctr;    Commented in VQC as it was unused **/
		short i_exrc_typ;
		short i_indstk;
		short i_lst_trd_dt;
  EXEC SQL END DECLARE SECTION;

  struct vw_err_msg *ptr_st_err_msg;

  /**** Ver 1.7 *******************************************
  ptr_st_contract = ( struct vw_contract * )rqst->data;
  ************ Ver 1.7 ***********************************/
  
  /*** Ver 1.7 Starts Here ***/
  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  
  ptr_st_contract = malloc(sizeof(struct vw_contract));
  if ( ptr_st_contract ==  NULL ) 
  {
    fn_errlog ( c_ServiceName, "S31005", TPMSG, c_errmsg.arr );			/** VQC Changed from c_errmsg to c_errmsg.arr **/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );						/** VQC Changed from c_errmsg to c_errmsg.arr **/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Ver 1.7 Ends Here ****/

  strcpy( c_ServiceName, rqst->name );

	INITDBGLVL(c_ServiceName);

	/**Fprint32(ptr_fml_Ibuf);  Temp add**/
  /**** Ver 1.7 Starts Here ****/
  i_returncode = fn_unpack_fmltovar_dflt ( c_ServiceName,
                                           c_errmsg.arr,		/** VQC Changed from c_errmsg to c_errmsg.arr **/
                                           ptr_fml_Ibuf,
                                           10,             /*** Changed from 9 to 10 in Ver 2.1 ***/
                                           FFO_XCHNG_CD, (char*)ptr_st_contract->c_xchng_cd,"*",
                                           FFO_PRDCT_TYP,(char*)&ptr_st_contract->c_prd_typ,"*",
                                           FFO_UNDRLYNG, (char*)ptr_st_contract->c_undrlyng,"NULL",
                                           FFO_EXPRY_DT, (char*)ptr_st_contract->c_expry_dt,0,
                                           FFO_EXER_TYP,(char*)&ptr_st_contract->c_exrc_typ,"*",
                                           FFO_OPT_TYP,(char*)&ptr_st_contract->c_opt_typ,"*",
                                           FFO_STRK_PRC,(char*)&ptr_st_contract->l_strike_prc,"*",
                                           FFO_CTGRY_INDSTK,(char*)&ptr_st_contract->c_ctgry_indstk,"*",
                                           FFO_ROUT_CRT,(char*)ptr_st_contract->c_rout_crt,"000",
                                           FFO_USR_ID,(char*)c_user_id,"*"            /**** Ver 2.1 ****/
                                         );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_errmsg.arr  );	/** VQC Changed from c_errmsg to c_errmsg.arr **/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );					/** VQC Changed from c_errmsg to c_errmsg.arr **/
    free((char * ) ptr_st_contract );   /*** Ver 1.7**/
		ptr_st_contract = NULL; 						/*** VQC NULL value assigned to avoid generation of dangling pointer ***/ 
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  } 

  /**** Ver 1.7 Ends Here *****/

    /*** Ver 2.1 Starts ***/
    MEMSET(c_cln_mtch_accnt);

    i_returncode = Fget32(ptr_fml_Ibuf,FFO_EBA_MTCH_ACT_NO,0,(char *)c_cln_mtch_accnt,0);
    i_freturncode = Ferror32;

    if ( i_returncode == -1 )
    {
      if ( i_freturncode != FNOTPRES )
      {
    		fn_errlog( c_ServiceName, "S31015", FMLMSG, c_errmsg.arr  );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );      
    		free((char * ) ptr_st_contract );  
    		ptr_st_contract = NULL;           
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
			else
			{
				c_chk_flg='N';
			}
    }

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog( c_ServiceName, "c_cln_mtch_accnt is...:%s:",c_cln_mtch_accnt);
    }
    /*** Ver 2.1 Ends ***/
    /*** Ver 2.2 Starts ***/
		if( ptr_st_contract->c_prd_typ == 'S' )
		{
	    i_returncode = Fget32(ptr_fml_Ibuf,FFO_TO_DT,0,(char *)c_expiry_dt1.arr,0);
	    i_freturncode = Ferror32;
	    if ( i_returncode == -1 )
	    {
				fn_errlog( c_ServiceName, "S31020", FMLMSG, c_errmsg.arr  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
				free((char * ) ptr_st_contract );
				ptr_st_contract = NULL;
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	    }
  		SETLEN (c_expiry_dt1);
			if(DEBUG_MSG_LVL_0)
    	{
      	fn_userlog( c_ServiceName, "c_expiry_dt1 for spread rollover is...:%s:",c_expiry_dt1.arr);
    	}
		}
    /*** Ver 2.2 Ends ***/

  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_contract->c_expry_dt );
  SETLEN ( c_expiry_dt );

 	if (DEBUG_MSG_LVL_3)
	{
  	fn_userlog ( c_ServiceName, " BEF c_undrlyng  :%s:", ptr_st_contract->c_undrlyng );
	}
	/** Ver 1.7 **/
	if (strlen(ptr_st_contract->c_undrlyng) > 6)
	{
		 if (DEBUG_MSG_LVL_3)
		 {
  		 fn_userlog ( c_ServiceName, "IN c_undrlyng  :%d:", strlen(ptr_st_contract->c_undrlyng) );
			}
	 strcpy(c_undrlying ,strtok(ptr_st_contract->c_undrlyng," "));
	 MEMSET(ptr_st_contract->c_undrlyng);
	 strcpy(ptr_st_contract->c_undrlyng,c_undrlying);
		 if (DEBUG_MSG_LVL_3)
			{
   			fn_userlog ( c_ServiceName, "NEW c_undrlyng  :%s:", ptr_st_contract->c_undrlyng ); 
			}
	}




  /*** Ver 2.3 Starts ***/
   MEMSET(c_survmsg);

      EXEC SQL 
			SELECT 'P',NVL(SIM_DESC,'')||'['||NVL(SIM_SHORT_CD, ''||']')
      INTO    :c_surv_flg,:c_survmsg
      FROM    XSM_XCHNG_STK_MSTR,SIM_SURV_INDCTR_MSTR
      WHERE   XSM_XCHNG_CD  = 'NSE'
      AND     SIM_SURV_IND=NVL(XSM_SURV_IND, 0 )
      AND     XSM_STCK_CD   = :ptr_st_contract->c_undrlyng;
    
		if ( SQLCODE != 0 && SQLCODE!=NO_DATA_FOUND )
    {
       /* fn_userlog( c_ServiceName, "Error while Selecting" ); commented in ver 2.5 */
       fn_errlog ( c_ServiceName, "S31025", SQLMSG, c_errmsg.arr);
			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
       /**tpfree ( ( char * ) ptr_fml_Obuf );  Commented in ver 2.4**/ 
			 /** Added in Ver 2.4 **/
			 free((char *)ptr_st_contract);  
			 ptr_st_contract = NULL;
			 /** Ver 2.4 Ends **/
			 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
    else if(SQLCODE == NO_DATA_FOUND)
    {
      c_surv_flg='N';
    }

    rtrim(c_survmsg);  
	
    /*** Ver 2.3 Ends ***/

  /**** Ver 2.1 Starts ****/
  if (ptr_st_contract->c_prd_typ == 'F' && c_chk_flg=='Y')
  {
     if (DEBUG_MSG_LVL_3)
      {
        fn_userlog ( c_ServiceName, "c_chk_flg :%c:", c_chk_flg);
      	fn_userlog( c_ServiceName, "c_cln_mtch_accnt is...:%s:",c_cln_mtch_accnt);
      }

        EXEC SQL
        SELECT nvl(FMM_SLTP_UPD_CND,0)*100
          INTO :d_sltp_upd_cnd
          FROM   FMM_FO_MRGN_MSTR
      WHERE  FMM_PRDCT_TYP  ='F'
      AND    FMM_UNDRLYNG   = :ptr_st_contract->c_undrlyng
      AND    FMM_XCHNG_CD   = :ptr_st_contract->c_xchng_cd
      AND    FMM_UNDRLYNG_BSKT_ID   =  (SELECT  FCB_UNDRLYNG_BSKT_ID
                                       FROM    FCB_FO_CLN_BSKT_ALLTD
                                       WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                                             FROM    CLM_CLNT_MSTR
                                                             WHERE   CLM_MTCH_ACCNT = :c_cln_mtch_accnt));

			if(SQLCODE != 0)
			{
        fn_errlog( c_ServiceName, "S31030", SQLMSG, c_errmsg.arr  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 );
        free((char * ) ptr_st_contract );
        ptr_st_contract = NULL;
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
  }
  /**** Ver 2.1 Ends ****/

	if (DEBUG_MSG_LVL_3)			 /*** Ver 1.1 ***/ 
	{
  	fn_userlog ( c_ServiceName, "c_xchng_cd  :%s:", ptr_st_contract->c_xchng_cd );
  	fn_userlog ( c_ServiceName, "c_prd_typ   :%c:", ptr_st_contract->c_prd_typ );
  	fn_userlog ( c_ServiceName, "c_undrlyng  :%s:", ptr_st_contract->c_undrlyng );
  	fn_userlog ( c_ServiceName, "LEN c_undrlyng  :%d:", strlen(ptr_st_contract->c_undrlyng) );
  	fn_userlog ( c_ServiceName, "c_expiry_dt :%s:", c_expiry_dt.arr );
  	fn_userlog ( c_ServiceName, "c_exrc_typ  :%c:", ptr_st_contract->c_exrc_typ );
  	fn_userlog ( c_ServiceName, "c_opt_typ   :%c:", ptr_st_contract->c_opt_typ );
  	fn_userlog ( c_ServiceName, "l_strike_prc:%ld:", 
                                           ptr_st_contract->l_strike_prc );  
	}

  /*** Ver 1.7 *******************************
  ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
  ****************** ver 1.7 ******************/
  
  /**** Ver 1.7 Starts Here ******/
  ptr_st_err_msg = malloc(sizeof(struct vw_err_msg));
 
  /**** Ver 1.7 Ends Here *****/ 
  if ( ptr_st_err_msg ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31035", TPMSG, c_errmsg.arr );		/** VQC Changed from c_errmsg to c_errmsg.arr **/
   /** tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 ); ** Ver 1.7 **/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg.arr, 0 ); /** VQC Changed from c_errmsg to c_errmsg.arr **/  /** Ver 1.7 **/
    free((char * ) ptr_st_contract );   /*** Ver 1.7**/ 
    ptr_st_contract = NULL;							/*** VQC Avoided dangling pointer ***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); /** Ver 1.7 **/
  }

  memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

  /***** COmmented in Ver 1.7 *****************************
  ptr_st_cntrctlong_qt = ( struct vw_cntrctlong_qt * ) tpalloc ( "VIEW32",
                                                           "vw_cntrctlong_qt",
                                          sizeof ( struct vw_cntrctlong_qt ) );
  ************* Ver 1.7 ************************/

  /******* Ver 1.7 Starts Here **********/
   ptr_st_cntrctlong_qt = malloc(sizeof(struct vw_cntrctlong_qt));

  /******* Ver 1.7 Ends Here ************/

  if ( ptr_st_cntrctlong_qt ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31040", TPMSG, ptr_st_err_msg->c_err_msg );
    /** tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 ); ** Ver 1.7 **/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg , 0 );   /** Ver 1.7 **/
    free((char * ) ptr_st_contract );   /*** Ver 1.7**/
    free((char * ) ptr_st_err_msg );    /*** Ver 1.7**/
    ptr_st_contract = NULL;					/*** VQC NULL value assigned to avoid generation of dangling pointer ***/
		ptr_st_err_msg = NULL;					/*** VQC NULL value assigned to avoid generation of dangling pointer ***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); /** Ver 1.7 **/
  }

  memset ( ptr_st_cntrctlong_qt, 0, sizeof ( struct vw_cntrctlong_qt ) );

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_contract->c_rout_crt );

	if(ptr_st_contract->c_prd_typ != 'S')				/*** Ver 2.2 ***/
	{																						/*** Ver 2.2 ***/
	EXEC SQL
			SELECT			ftq_xchng_cd,
									ftq_prdct_typ,
									ftq_undrlyng,
									to_char ( ftq_expry_dt, 'dd-Mon-yyyy' ),
									ftq_exer_typ,
									ftq_opt_typ,
									ftq_strk_prc,
									ftq_indstk,
									NVL(ftq_lst_trd_prc,0),
									to_char ( ftq_lst_trd_tm, 'dd-Mon-yyyy hh24:mi:ss' ),
									NVL(ftq_lst_trd_qty,0),
									NVL(ftq_bst1_bid_prc,0),
									NVL(ftq_bst1_bid_qty,0),
									NVL(ftq_bst2_bid_prc,0),
									NVL(ftq_bst2_bid_qty,0),
									NVL(ftq_bst3_bid_prc,0),
									NVL(ftq_bst3_bid_qty,0),
									NVL(ftq_bst4_bid_prc,0),
									NVL(ftq_bst4_bid_qty,0),
									NVL(ftq_bst5_bid_prc,0),
									NVL(ftq_bst5_bid_qty,0),
									NVL(ftq_bst1_offr_prc,0),
									NVL(ftq_bst1_offr_qty,0),
									NVL(ftq_bst2_offr_prc,0),
									NVL(ftq_bst2_offr_qty,0),
									NVL(ftq_bst3_offr_prc,0),
									NVL(ftq_bst3_offr_qty,0),
									NVL(ftq_bst4_offr_prc,0),
									NVL(ftq_bst4_offr_qty,0),
									NVL(ftq_bst5_offr_prc,0),
									NVL(ftq_bst5_offr_qty,0),
									NVL(ftq_tot_qty_trdd,0),
									NVL(ftq_tot_val_trdd,0),
									NVL(ftq_tot_bid_qty,0),
									NVL(ftq_tot_offr_qty,0),
									'*',
                  /*** Commented in Ver 1.8 ***
									(case when NVL(fcm_qt_trdng_flg,'*') = 'T' and  NVL(fcm_sltp_fp_qt_trdng_flg,'*') =  'T' then '1' else '0' end)	 *** Ver 1.6 ***/
	                (case when NVL(ftq_qt_trdng_flg,'*') = 'T' and  NVL(ftq_sltp_fp_qt_trdng_flg,'*') =  'T' then '1' else '0'
end) /*** Ver 1.8 ***/
  		INTO				:ptr_st_cntrctlong_qt->c_xchng_cd,
									:ptr_st_cntrctlong_qt->c_prd_typ,
									:ptr_st_cntrctlong_qt->c_undrlyng,
					        :c_exp_dt,
                  :ptr_st_cntrctlong_qt->c_exrc_typ:i_exrc_typ,
                  :ptr_st_cntrctlong_qt->c_opt_typ,
                  :ptr_st_cntrctlong_qt->l_strike_prc,
                  :ptr_st_cntrctlong_qt->c_ctgry_indstk:i_indstk,
                  :ptr_st_cntrctlong_qt->l_lst_trdd_prc,
                  :c_lst_trd_dt:i_lst_trd_dt,
                  :ptr_st_cntrctlong_qt->l_lst_trdd_qty,
									:ptr_st_cntrctlong_qt->l_bst_bid_prc[0],
									:ptr_st_cntrctlong_qt->l_bst_bid_qty[0],
									:ptr_st_cntrctlong_qt->l_bst_bid_prc[1],
									:ptr_st_cntrctlong_qt->l_bst_bid_qty[1],
									:ptr_st_cntrctlong_qt->l_bst_bid_prc[2],
									:ptr_st_cntrctlong_qt->l_bst_bid_qty[2],
									:ptr_st_cntrctlong_qt->l_bst_bid_prc[3],
									:ptr_st_cntrctlong_qt->l_bst_bid_qty[3],
									:ptr_st_cntrctlong_qt->l_bst_bid_prc[4],
									:ptr_st_cntrctlong_qt->l_bst_bid_qty[4],
                  :ptr_st_cntrctlong_qt->l_bst_offr_prc[0],
                  :ptr_st_cntrctlong_qt->l_bst_offr_qty[0],
                  :ptr_st_cntrctlong_qt->l_bst_offr_prc[1],
                  :ptr_st_cntrctlong_qt->l_bst_offr_qty[1],
                  :ptr_st_cntrctlong_qt->l_bst_offr_prc[2],
                  :ptr_st_cntrctlong_qt->l_bst_offr_qty[2],
                  :ptr_st_cntrctlong_qt->l_bst_offr_prc[3],
                  :ptr_st_cntrctlong_qt->l_bst_offr_qty[3],
                  :ptr_st_cntrctlong_qt->l_bst_offr_prc[4],
                  :ptr_st_cntrctlong_qt->l_bst_offr_qty[4],
									:ptr_st_cntrctlong_qt->l_tot_qty_trdd,
									/** :ptr_st_cntrctlong_qt->l_tot_val_trdd, *** Ver 1.5 **/
                  :ptr_st_cntrctlong_qt->d_tot_val_trdd, /*** Ver 1.5 **/
									:ptr_st_cntrctlong_qt->d_tot_bid_qty,
									:ptr_st_cntrctlong_qt->d_tot_offr_qty,
									:ptr_st_cntrctlong_qt->c_rqst_typ,
									:ptr_st_cntrctlong_qt->l_avg_trdd_prc		/*** Ver 1.6 ***/
			FROM				ftq_fo_trd_qt /*** Commented in Ver 1.8 ***, fcm_fo_cntrct_mstr		*** FCM table added in Ver 1.6 ***/
		 WHERE				ftq_xchng_cd  = :ptr_st_contract->c_xchng_cd
       /*** AND        ftq_prdct_typ = decode(:ptr_st_contract->c_prd_typ,'P','F',:ptr_st_contract->c_prd_typ) *Ver 1.2*  *** Commented in ver 1.3 ***/
			 /*** AND        ftq_prdct_typ = decode(:ptr_st_contract->c_prd_typ,'P','F','U','F',:ptr_st_contract->c_prd_typ) *** Ver 1.3 ***	Commented in Ver 1.4 ***/
			 AND        ftq_prdct_typ = decode(:ptr_st_contract->c_prd_typ,'P','F','U','F','I','O',:ptr_st_contract->c_prd_typ)	 /*** Ver 1.4 ***/
       AND        ftq_undrlyng  = :ptr_st_contract->c_undrlyng
       AND        ftq_expry_dt  = to_date ( :c_expiry_dt,
                                          'dd-Mon-yyyy' )
       AND        ftq_exer_typ  = :ptr_st_contract->c_exrc_typ
       AND        ftq_opt_typ   = :ptr_st_contract->c_opt_typ
       AND        ftq_strk_prc  = :ptr_st_contract->l_strike_prc;
       /*** Commented in Ver 1.8 ***
			 AND				fcm_xchng_cd  = ftq_xchng_cd
			 AND				fcm_undrlyng  = ftq_undrlyng
       AND				fcm_prdct_typ = ftq_prdct_typ
			 AND				fcm_expry_dt	= ftq_expry_dt
			 AND				fcm_opt_typ   = ftq_opt_typ
			 AND				fcm_strk_prc	= ftq_strk_prc
			 AND				fcm_exer_typ	= ftq_exer_typ;		*** FCM join added in Ver 1.6 ***/
	
	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_errlog ( c_ServiceName, "S31045", SQLMSG, ptr_st_err_msg->c_err_msg );
    /** tpfree ( ( char * ) ptr_st_cntrctlong_qt ); *** Ver 2.0 ***/
    /*** tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 ); *** Ver 1.7 **/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg , 0 );   /** Ver 1.7 **/
    free((char * ) ptr_st_contract );   /*** Ver 1.7**/
    free((char * ) ptr_st_cntrctlong_qt); /*** Ver 1.7**/
    free((char * ) ptr_st_err_msg );    /*** Ver 1.7**/
    ptr_st_contract = NULL;					/*** VQC NULL value assigned to avoid generation of dangling pointer ***/
		ptr_st_cntrctlong_qt = NULL;		/*** VQC NULL value assigned to avoid generation of dangling pointer ***/
		ptr_st_err_msg = NULL;					/*** VQC NULL value assigned to avoid generation of dangling pointer ***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); /** Ver 1.7 **/
  }
	else if ( SQLCODE == NO_DATA_FOUND )
	{
		if (DEBUG_MSG_LVL_2)			 /*** Ver 1.9***/ 
		{
			fn_userlog ( c_ServiceName, "NDF::%s:%c:%s:%d:%s:%c:%c:%ld:", ptr_st_contract->c_xchng_cd,ptr_st_contract->c_prd_typ,ptr_st_contract->c_undrlyng,strlen(ptr_st_contract->c_undrlyng),c_expiry_dt.arr,ptr_st_contract->c_exrc_typ,ptr_st_contract->c_opt_typ,ptr_st_contract->l_strike_prc );
		}

		fn_errlog ( c_ServiceName, "B25000", DEFMSG, ptr_st_err_msg->c_err_msg );

    /*** tpfree ( ( char * ) ptr_st_cntrctlong_qt ); *** ver 2.0 ***/
    /*** tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 ); ***Ver 1.7 **/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg , 0 );   /** Ver 1.7 **/
    free((char * ) ptr_st_contract );   /*** Ver 1.7**/
    free((char * ) ptr_st_cntrctlong_qt); /*** Ver 1.7**/
    free((char * ) ptr_st_err_msg );    /*** Ver 1.7**/
    ptr_st_contract = NULL;         /*** VQC NULL value assigned to avoid generation of dangling pointer ***/
    ptr_st_cntrctlong_qt = NULL;    /*** VQC NULL value assigned to avoid generation of dangling pointer ***/
    ptr_st_err_msg = NULL;          /*** VQC NULL value assigned to avoid generation of dangling pointer ***/    
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); /** Ver 1.7 **/
	}
		/*** Add Start For Ver 2.2 ***/
	}					
	else if( ptr_st_contract->c_prd_typ == 'S' )
	{
  	EXEC SQL
      SELECT      FTQ_XCHNG_CD,
                  FTQ_PRDCT_TYP,
                  FTQ_UNDRLYNG,
                  to_char ( FTQ_EXPRY_DT, 'dd-Mon-yyyy' ),
                  FTQ_EXER_TYP,
                  FTQ_OPT_TYP,
                  FTQ_STRK_PRC,
                  FTQ_INDSTK,
                  NVL(FTQ_LST_TRD_PRC,0),
                  to_char ( FTQ_LST_TRD_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
                  NVL(FTQ_LST_TRD_QTY,0),
                  NVL(FTQ_BST1_BID_PRC,0),
                  NVL(FTQ_BST1_BID_QTY,0),
                  NVL(FTQ_BST2_BID_PRC,0),
                  NVL(FTQ_BST2_BID_QTY,0),
                  NVL(FTQ_BST3_BID_PRC,0),
                  NVL(FTQ_BST3_BID_QTY,0),
                  NVL(FTQ_BST4_BID_PRC,0),
                  NVL(FTQ_BST4_BID_QTY,0),
                  NVL(FTQ_BST5_BID_PRC,0),
                  NVL(FTQ_BST5_BID_QTY,0),
                  NVL(FTQ_BST1_OFFR_PRC,0),
                  NVL(FTQ_BST1_OFFR_QTY,0),
                  NVL(FTQ_BST2_OFFR_PRC,0),
                  NVL(FTQ_BST2_OFFR_QTY,0),
                  NVL(FTQ_BST3_OFFR_PRC,0),
                  NVL(FTQ_BST3_OFFR_QTY,0),
                  NVL(FTQ_BST4_OFFR_PRC,0),
                  NVL(FTQ_BST4_OFFR_QTY,0),
                  NVL(FTQ_BST5_OFFR_PRC,0),
                  NVL(FTQ_BST5_OFFR_QTY,0),
                  NVL(FTQ_TOT_QTY_TRDD,0),
                  NVL(FTQ_TOT_VAL_TRDD,0),
                  NVL(FTQ_TOT_BID_QTY,0),
                  NVL(FTQ_TOT_OFFR_QTY,0),
                  '*',
                  (case when NVL(FTQ_QT_TRDNG_FLG,'*') = 'T' and  NVL(FTQ_SLTP_FP_QT_TRDNG_FLG,'*') =  'T' then'1' else '0' end) 
      INTO        :ptr_st_cntrctlong_qt->c_xchng_cd,
                  :ptr_st_cntrctlong_qt->c_prd_typ,
                  :ptr_st_cntrctlong_qt->c_undrlyng,
                  :c_exp_dt,
                  :ptr_st_cntrctlong_qt->c_exrc_typ:i_exrc_typ,
                  :ptr_st_cntrctlong_qt->c_opt_typ,
                  :ptr_st_cntrctlong_qt->l_strike_prc,
                  :ptr_st_cntrctlong_qt->c_ctgry_indstk:i_indstk,
                  :ptr_st_cntrctlong_qt->l_lst_trdd_prc,
                  :c_lst_trd_dt:i_lst_trd_dt,
                  :ptr_st_cntrctlong_qt->l_lst_trdd_qty,
                  :ptr_st_cntrctlong_qt->l_bst_bid_prc[0],
                  :ptr_st_cntrctlong_qt->l_bst_bid_qty[0],
                  :ptr_st_cntrctlong_qt->l_bst_bid_prc[1],
                  :ptr_st_cntrctlong_qt->l_bst_bid_qty[1],
                  :ptr_st_cntrctlong_qt->l_bst_bid_prc[2],
                  :ptr_st_cntrctlong_qt->l_bst_bid_qty[2],
                  :ptr_st_cntrctlong_qt->l_bst_bid_prc[3],
                  :ptr_st_cntrctlong_qt->l_bst_bid_qty[3],
                  :ptr_st_cntrctlong_qt->l_bst_bid_prc[4],
                  :ptr_st_cntrctlong_qt->l_bst_bid_qty[4],
                  :ptr_st_cntrctlong_qt->l_bst_offr_prc[0],
                  :ptr_st_cntrctlong_qt->l_bst_offr_qty[0],
                  :ptr_st_cntrctlong_qt->l_bst_offr_prc[1],
                  :ptr_st_cntrctlong_qt->l_bst_offr_qty[1],
                  :ptr_st_cntrctlong_qt->l_bst_offr_prc[2],
                  :ptr_st_cntrctlong_qt->l_bst_offr_qty[2],
                  :ptr_st_cntrctlong_qt->l_bst_offr_prc[3],
                  :ptr_st_cntrctlong_qt->l_bst_offr_qty[3],
                  :ptr_st_cntrctlong_qt->l_bst_offr_prc[4],
                  :ptr_st_cntrctlong_qt->l_bst_offr_qty[4],
                  :ptr_st_cntrctlong_qt->l_tot_qty_trdd,
                  :ptr_st_cntrctlong_qt->d_tot_val_trdd, 
                  :ptr_st_cntrctlong_qt->d_tot_bid_qty,
                  :ptr_st_cntrctlong_qt->d_tot_offr_qty,
                  :ptr_st_cntrctlong_qt->c_rqst_typ,
                  :ptr_st_cntrctlong_qt->l_avg_trdd_prc   
      FROM        FTQ_FO_TRD_QT 
     WHERE        FTQ_XCHNG_CD  = :ptr_st_contract->c_xchng_cd
       AND        FTQ_PRDCT_TYP = :ptr_st_contract->c_prd_typ  
       AND        FTQ_UNDRLYNG  = :ptr_st_contract->c_undrlyng
       AND        FTQ_EXPRY_DT  = to_date ( :c_expiry_dt, 'dd-Mon-yyyy' )
       AND        FTQ_EXPRY_DT2 = to_date ( :c_expiry_dt1, 'dd-Mon-yyyy' )
       AND        FTQ_EXER_TYP  = :ptr_st_contract->c_exrc_typ
       AND        FTQ_OPT_TYP   = :ptr_st_contract->c_opt_typ
       AND        FTQ_STRK_PRC  = :ptr_st_contract->l_strike_prc;

  	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  	{
    	fn_errlog ( c_ServiceName, "S31050", SQLMSG, ptr_st_err_msg->c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg , 0 );   
    	free((char * ) ptr_st_contract );   
    	free((char * ) ptr_st_cntrctlong_qt); 
    	free((char * ) ptr_st_err_msg );    
    	ptr_st_contract = NULL;         
    	ptr_st_cntrctlong_qt = NULL;   
    	ptr_st_err_msg = NULL;        
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
  	}
  	else if ( SQLCODE == NO_DATA_FOUND )
  	{
    	if (DEBUG_MSG_LVL_2)       
    	{
      	fn_userlog ( c_ServiceName, "NDF::%s:%c:%s:%d:%s:%c:%c:%ld:", ptr_st_contract->c_xchng_cd,ptr_st_contract->c_prd_typ,ptr_st_contract->c_undrlyng,strlen(ptr_st_contract->c_undrlyng),c_expiry_dt.arr,ptr_st_contract->c_exrc_typ,ptr_st_contract->c_opt_typ,ptr_st_contract->l_strike_prc );
    	}

    	fn_errlog ( c_ServiceName, "B25000", DEFMSG, ptr_st_err_msg->c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg , 0 );   
    	free((char * ) ptr_st_contract );   
    	free((char * ) ptr_st_cntrctlong_qt); 
    	free((char * ) ptr_st_err_msg );    
    	ptr_st_contract = NULL;         
    	ptr_st_cntrctlong_qt = NULL;   
    	ptr_st_err_msg = NULL;        
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
  	}

	}

		/*** Add Ends For Ver 2.2 ***/
  SETNULL ( c_exp_dt );
  SETNULL ( c_lst_trd_dt );

  strcpy ( ptr_st_cntrctlong_qt->c_expry_dt ,( char * ) c_exp_dt.arr );
  strcpy ( ptr_st_cntrctlong_qt->c_lst_trdd_time,( char * ) c_lst_trd_dt.arr );

	/***	Ver 1.4 Starts here	***/
	/**  Sum of best 5 bid quantity **/
	ptr_st_cntrctlong_qt->l_eba_cntrct_id = ptr_st_cntrctlong_qt->l_bst_bid_qty[0]+
																					ptr_st_cntrctlong_qt->l_bst_bid_qty[1]+
																					ptr_st_cntrctlong_qt->l_bst_bid_qty[2]+
																					ptr_st_cntrctlong_qt->l_bst_bid_qty[3]+
																					ptr_st_cntrctlong_qt->l_bst_bid_qty[4];
	
	/**  Sum of best 5 offer quantity **/
  ptr_st_cntrctlong_qt->l_ca_lvl = ptr_st_cntrctlong_qt->l_bst_offr_qty[0]+
																	 ptr_st_cntrctlong_qt->l_bst_offr_qty[1]+
																	 ptr_st_cntrctlong_qt->l_bst_offr_qty[2]+
																	 ptr_st_cntrctlong_qt->l_bst_offr_qty[3]+
																	 ptr_st_cntrctlong_qt->l_bst_offr_qty[4];

	/***  Ver 1.4 ends here ***/

  /*** Ver 1.7 Starts Here ***/
  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*3 );
  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog ( c_ServiceName, "S31055", TPMSG, ptr_st_err_msg->c_err_msg );	/*** Ver 1.9 ***/
    /** tpfree ( ( char * ) ptr_st_cntrctlong_qt ); *** Ver 2.0 **/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg , 0 );   /** Ver 1.7 **/
    free((char * ) ptr_st_contract );   /*** Ver 1.7**/
    free((char * ) ptr_st_cntrctlong_qt); /*** Ver 1.7**/
    free((char * ) ptr_st_err_msg );    /*** Ver 1.7**/
    ptr_st_contract = NULL;         /*** VQC NULL value assigned to avoid generation of dangling pointer ***/
    ptr_st_cntrctlong_qt = NULL;    /*** VQC NULL value assigned to avoid generation of dangling pointer ***/
    ptr_st_err_msg = NULL;          /*** VQC NULL value assigned to avoid generation of dangling pointer ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); /** Ver 1.7 **/ 
  }

  i_returncode = fn_pack_vartofml(c_ServiceName,
                                    c_errmsg.arr,			/** VQC Changed from c_errmsg to c_errmsg.arr **/
                                    &ptr_fml_Obuf,
                                    25,            /**** Changed from 22 to 23 in Ver 2.1 ****//**** Changed from 23 to 25 in Ver 2.3 ****/
                                    FFO_XCHNG_CD, (char*)ptr_st_cntrctlong_qt->c_xchng_cd,
                                    FFO_PRDCT_TYP, (char*)&ptr_st_cntrctlong_qt->c_prd_typ,
                                    FFO_UNDRLYNG, (char*)ptr_st_cntrctlong_qt->c_undrlyng,
                                    FFO_EXPRY_DT, (char*)ptr_st_cntrctlong_qt->c_expry_dt,
                                    FFO_EXER_TYP, (char*)&ptr_st_cntrctlong_qt->c_exrc_typ,
                                    FFO_OPT_TYP, (char*)&ptr_st_cntrctlong_qt->c_opt_typ,
                                    FFO_STRK_PRC, (char*)&ptr_st_cntrctlong_qt->l_strike_prc,
                                    FFO_CTGRY_INDSTK, (char*)&ptr_st_cntrctlong_qt->c_ctgry_indstk,
                                    FFO_LST_TRD_PRC, (char*)&ptr_st_cntrctlong_qt->l_lst_trdd_prc,
                                    FFO_LST_TRD_TM, (char*)&ptr_st_cntrctlong_qt->c_lst_trdd_time,
                                    FFO_LST_TRD_QTY, (char*)&ptr_st_cntrctlong_qt->l_lst_trdd_qty,
                                    FFO_TOT_TRD_QTY, (char*)&ptr_st_cntrctlong_qt->l_tot_trdd_qty,
                                    FFO_AVRG_TRD_PRC, (char*)&ptr_st_cntrctlong_qt->l_avg_trdd_prc,
                                    FFO_TOT_QTY_TRDD, (char*)&ptr_st_cntrctlong_qt->l_tot_qty_trdd,
                                    FFO_TOT_VAL_TRDD, (char*)&ptr_st_cntrctlong_qt->l_tot_val_trdd,
                                    FFO_TOT_BID_QTY, (char*)&ptr_st_cntrctlong_qt->d_tot_bid_qty,
                                    FFO_TOT_OFFR_QTY, (char*)&ptr_st_cntrctlong_qt->d_tot_offr_qty,
                                    FFO_RQST_TYP , (char*)&ptr_st_cntrctlong_qt->c_rqst_typ,
                                    FFO_ROUT_CRT, (char*)&ptr_st_cntrctlong_qt->c_rout_crt,
                                    FFO_AMOUNT, (char*)&ptr_st_cntrctlong_qt->d_tot_val_trdd,
                                    FFO_EBA_CNTRCT_ID, (char*)&ptr_st_cntrctlong_qt->l_eba_cntrct_id,
                                    FFO_CA_LVL, (char*)&ptr_st_cntrctlong_qt->l_ca_lvl,
                                    FFO_FUT_PRC, (char *)&d_sltp_upd_cnd,    /*** Ver 2.1 ***/
                                    FFO_STLMNT_TYP,(char *)&c_surv_flg,      /** Ver 2.3 **/
				    FFO_SYS_MSG, (char *)c_survmsg           /** Ver 2.3 **/ 
																	); 
  if( i_returncode != 0 )
  {
    fn_errlog ( c_ServiceName, "S31060", FMLMSG, ptr_st_err_msg->c_err_msg );	/*** Ver 1.9 ***/
    /*** tpfree ( ( char * ) ptr_st_cntrctlong_qt ); ** ver 2.0 ***/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg , 0 );   /** Ver 1.7 **/
    free((char * ) ptr_st_contract );   /*** Ver 1.7**/
    free((char * ) ptr_st_cntrctlong_qt); /*** Ver 1.7**/
    free((char * ) ptr_st_err_msg );    /*** Ver 1.7**/
    ptr_st_contract = NULL;         /*** VQC NULL value assigned to avoid generation of dangling pointer ***/
    ptr_st_cntrctlong_qt = NULL;    /*** VQC NULL value assigned to avoid generation of dangling pointer ***/
    ptr_st_err_msg = NULL;          /*** VQC NULL value assigned to avoid generation of dangling pointer ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); /** Ver 1.7 **/
  }

  for(i=0;i<=4;i++)
  {
   i_returncode = fn_pack_vartofml(c_ServiceName,
                                    c_errmsg.arr, /** VQC Changed from c_errmsg to c_errmsg.arr **/
                                    &ptr_fml_Obuf,
                                    4,
                                    FFO_BST_BID_PRC, (char*)&ptr_st_cntrctlong_qt->l_bst_bid_prc[i],
                                    FFO_BST_BID_QTY, (char*)&ptr_st_cntrctlong_qt->l_bst_bid_qty[i],
                                    FFO_BST_OFFR_PRC, (char*)&ptr_st_cntrctlong_qt->l_bst_offr_prc[i],
                                    FFO_BST_OFFR_QTY, (char*)&ptr_st_cntrctlong_qt->l_bst_offr_qty[i]
                                   );
   if( i_returncode != 0 )
   {
     fn_errlog ( c_ServiceName, "S31065", FMLMSG, ptr_st_err_msg->c_err_msg );	/*** Ver 1.9 ***/
     /** tpfree ( ( char * ) ptr_st_cntrctlong_qt ); ** Ver 2.0 ***/
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg , 0 );   /** Ver 1.7 **/
     free((char * ) ptr_st_contract );   /*** Ver 1.7**/
     free((char * ) ptr_st_cntrctlong_qt); /*** Ver 1.7**/ 
     free((char * ) ptr_st_err_msg );    /*** Ver 1.7**/
     ptr_st_contract = NULL;         /*** VQC NULL value assigned to avoid generation of dangling pointer ***/
   	 ptr_st_cntrctlong_qt = NULL;    /*** VQC NULL value assigned to avoid generation of dangling pointer ***/
     ptr_st_err_msg = NULL;          /*** VQC NULL value assigned to avoid generation of dangling pointer ***/
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); /** Ver 1.7 **/
   }
  }

  /*** Ver 1.7 Ends Here ***/

  /** tpfree ( ( char * ) ptr_st_err_msg ); ** ver 1.7 **/
  free((char*) ptr_st_err_msg);  /*** Ver 1.7**/
  free((char * ) ptr_st_contract );   /*** Ver 1.7**/
  free((char * ) ptr_st_cntrctlong_qt); /*** Ver 1.7**/
  ptr_st_contract = NULL;         /*** VQC NULL value assigned to avoid generation of dangling pointer ***/
  ptr_st_cntrctlong_qt = NULL;    /*** VQC NULL value assigned to avoid generation of dangling pointer ***/
  ptr_st_err_msg = NULL;          /*** VQC NULL value assigned to avoid generation of dangling pointer ***/
  /***** Ver 1.7 ************************************
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_cntrctlong_qt, 0, 0 );
  ******************** Ver 1.7 *********************/
 
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
}

