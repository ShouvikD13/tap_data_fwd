/******************************************************************************/
/*	Program	    			:	SFO_GET_QT                               							*/
/*                                                                            */
/*  Input             : vw_contract 														              */
/*                                                                            */
/*  Output            : vw_cntrct_qt                                          */
/*											vw_err_msg															              */
/*                                                                            */
/*  Description       : This service will get brief quotes of a contract viz: */
/*                      last traded qty, last	traded price, last traded time, */
/*                      best bid qty and price, best offer qty and price and  */
/*                      price information like open, high, low, close price,  */
/*                      previous close price, net change from previous close  */
/*                      price, high price and low price range.   						  */
/*                                                               							*/
/*  History           : 1.0		17-Sep-2001		Ramesh Reddy.V                    */
/*										:	1.1		03-Mar-2008		Sandeep Patil											*/
/*										:	1.2		19-Mar-2008		Smitha Nuti												*/
/*										:	1.3		29-May-2009		Indrajit Bhadange			      			*/
/*										:	1.4		13-Dec-2012		Navina D.       			      			*/
/*										:	1.5		24-Sep-2013		Swati A.B                         */
/*										:	1.6		12-Feb-2014		Sachin Birje                      */
/*                    : 1.7		20-Feb-2014   Navina D.                         */
/*                    : 1.9   12-Aug-2015   Anand Dhopte                      */ 
/******************************************************************************/
/******************************************************************************/
/* 1.0  -  New release                                           							*/
/* 1.1  -  IBM MIGRATION CHANGES																							*/
/* 1.2  -  FP changes 																												*/
/* 1.3  -  Added lot size field for CRCSN28153 For open position page update 	*/
/* 1.4  -  SLTP FuturePLUS Handling                                           */
/* 1.5  -  OptionPLUS Handling                                                */
/* 1.6  -  View Change for variable total_val_traed in exchange              */
/* 1.7  -  To display OptionPLUS link for enabled contracts only              */
/* 1.9  -  Contract Master and Trade Quote Table Merger Changes               */ 
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fn_read_debug_lvl.h>			/*** Ver 1.1 ***/

void SFO_GET_QT( TPSVCINFO *rqst )
{
  char  c_ServiceName[33];
  char  c_errmsg[256];

	EXEC SQL BEGIN DECLARE SECTION;
  	struct vw_contract *ptr_st_contract;
		struct vw_cntrct_qt *ptr_st_cntrct_qt;
		varchar c_expiry_dt [ LEN_DATE ];
		varchar c_exp_dt [ LEN_DATE ];
		varchar c_lst_trd_dt [ LEN_DATE ];
    short i_trd_tm;
	EXEC SQL END DECLARE SECTION;

	struct vw_err_msg *ptr_st_err_msg;

	ptr_st_contract = ( struct vw_contract * )rqst->data;
  strcpy( c_ServiceName, rqst->name );

	INITDBGLVL(c_ServiceName);			/*** Ver 1.1 ***/

	rtrim ( ptr_st_contract->c_expry_dt );
	strcpy ( ( char * )c_expiry_dt.arr, ptr_st_contract->c_expry_dt );
	SETLEN ( c_expiry_dt );

	if (DEBUG_MSG_LVL_3)			 /*** Ver 1.1 ***/ 
	{
		fn_userlog ( c_ServiceName, "c_xchng_cd**:%s:", ptr_st_contract->c_xchng_cd );
		fn_userlog ( c_ServiceName, "c_prd_typ   :%c:", ptr_st_contract->c_prd_typ );
		fn_userlog ( c_ServiceName, "c_undrlyng  :%s:", ptr_st_contract->c_undrlyng );
		fn_userlog ( c_ServiceName, "c_expiry_dt :%s:", c_expiry_dt.arr );
		fn_userlog ( c_ServiceName, "c_exrc_typ  :%c:", ptr_st_contract->c_exrc_typ );
		fn_userlog ( c_ServiceName, "c_opt_typ   :%c:", ptr_st_contract->c_opt_typ );
		fn_userlog ( c_ServiceName, "l_strike_prc:%ld:", 
																					 ptr_st_contract->l_strike_prc );  
	}

	ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
	if ( ptr_st_err_msg ==  NULL )
	{
		fn_errlog ( c_ServiceName, "S31005", TPMSG, c_errmsg );
		tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
	}

	memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

	ptr_st_cntrct_qt = ( struct vw_cntrct_qt * ) tpalloc ( "VIEW32",
                                                         "vw_cntrct_qt",
                                               sizeof ( struct vw_cntrct_qt ) );
	if ( ptr_st_cntrct_qt ==  NULL )
	{
		fn_errlog ( c_ServiceName, "S31010", TPMSG, ptr_st_err_msg->c_err_msg );
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}

	memset ( ptr_st_cntrct_qt, 0, sizeof ( struct vw_cntrct_qt ) );

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_contract->c_rout_crt );
 
	EXEC SQL
			SELECT   	ftq_xchng_cd,
								ftq_prdct_typ,
								ftq_undrlyng,
								to_char ( ftq_expry_dt, 'dd-Mon-yyyy' ),
								ftq_exer_typ,
								ftq_opt_typ,
								NVL(ftq_strk_prc, 0 ),
								ftq_indstk,
								NVL( ftq_lst_trd_prc, 0 ),
								to_char ( ftq_lst_trd_tm, 'dd-Mon-yyyy hh24:mi:ss' ),
								NVL( ftq_lst_trd_qty, 0 ),
								NVL( ftq_bst1_bid_prc, 0 ),
								NVL( ftq_bst1_bid_qty, 0 ),
								NVL( ftq_bst1_offr_prc, 0 ),
								NVL( ftq_bst1_offr_qty, 0 ),
								NVL( ftq_cls_prc, 0 ),
								NVL( ftq_opn_prc, 0 ),
								NVL( ftq_hgh_prc, 0 ),
								NVL( ftq_low_prc, 0 ),
								NVL( ftq_prvs_cls_prc, 0 ),
								NVL( ftq_chng_prvs_cls, 0 ),
								NVL(ftq_indctr,'+'),
								NVL( ftq_hgh_prc_rng, 0 ),
								NVL( ftq_low_prc_rng, 0 ),
								NVL( ftq_avrg_trd_prc, 0 ),
								NVL( ftq_tot_qty_trdd, 0 ),
								NVL( ftq_tot_val_trdd, 0 ),
								NVL( ftq_base_prc, 0 ),
								NVL( ftq_crnt_oi, 0 ),
								NVL( ftq_chng_oi, 0 ),
								NVL( ftq_oi_high, 0 ),
								NVL( ftq_oi_low, 0 ),
								NVL( ftq_oi_indctr, '+' ),
								'*',
								NVL( ftq_min_lot_qty,'0'), /* Ver 1.3 */ 
							/*** Commented in Ver 1.9 ***	(case when NVL(fcm_qt_trdng_flg,'*') = 'T' and  NVL(fcm_sltp_fp_qt_trdng_flg,'*') =  'T' then '1' else '0' end)	 *** Ver 1.7 ***/
                (case when NVL(ftq_qt_trdng_flg,'*') = 'T' and 
                 NVL(ftq_sltp_fp_qt_trdng_flg,'*') =  'T' then '1' else '0' end) /*** Ver 1.9 ***/
			INTO      :ptr_st_cntrct_qt->c_xchng_cd,
								:ptr_st_cntrct_qt->c_prd_typ,
								:ptr_st_cntrct_qt->c_undrlyng,
								:c_exp_dt,
								:ptr_st_cntrct_qt->c_exrc_typ,
								:ptr_st_cntrct_qt->c_opt_typ,
								:ptr_st_cntrct_qt->l_strike_prc,
								:ptr_st_cntrct_qt->c_ctgry_indstk,
								:ptr_st_cntrct_qt->l_lst_trdd_prc,
								:c_lst_trd_dt:i_trd_tm,
								:ptr_st_cntrct_qt->l_lst_trdd_qty,
								:ptr_st_cntrct_qt->l_bst_bid_prc,
								:ptr_st_cntrct_qt->l_bst_bid_qty,
								:ptr_st_cntrct_qt->l_bst_offr_prc,
								:ptr_st_cntrct_qt->l_bst_offr_qty,
								:ptr_st_cntrct_qt->l_close_prc,
								:ptr_st_cntrct_qt->l_open_prc,
								:ptr_st_cntrct_qt->l_high_prc,
								:ptr_st_cntrct_qt->l_low_prc,
								:ptr_st_cntrct_qt->l_prev_close_prc,
								:ptr_st_cntrct_qt->l_chng_prvs_close_prc,
								:ptr_st_cntrct_qt->c_indctr,
								:ptr_st_cntrct_qt->l_high_prc_rng,
								:ptr_st_cntrct_qt->l_low_prc_rng,
								:ptr_st_cntrct_qt->l_avg_trdd_prc,
								:ptr_st_cntrct_qt->l_tot_qty_trdd,
								/** :ptr_st_cntrct_qt->l_tot_val_trdd, ** Ver 1.6 **/
                :ptr_st_cntrct_qt->d_tot_val_trdd, /** Ver 1.6 **/
								:ptr_st_cntrct_qt->l_base_prc,
								:ptr_st_cntrct_qt->d_crnt_oi,
								:ptr_st_cntrct_qt->d_chng_oi,
								:ptr_st_cntrct_qt->d_oi_high,
								:ptr_st_cntrct_qt->d_oi_low,
								:ptr_st_cntrct_qt->c_oi_indctr,
								:ptr_st_cntrct_qt->c_rqst_typ,
								:ptr_st_cntrct_qt->l_min_lot_qty,  /* Ver 1.3 */
								:ptr_st_cntrct_qt->l_ca_lvl				 /*** Ver 1.7 ***/
			FROM 			ftq_fo_trd_qt/*** Commented in Ver 1.9 ***  , fcm_fo_cntrct_mstr		*** FCM table added in Ver 1.7 ***/
		 WHERE  		ftq_xchng_cd 	= :ptr_st_contract->c_xchng_cd
			 /*** AND 			ftq_prdct_typ = decode(:ptr_st_contract->c_prd_typ,'P','F',:ptr_st_contract->c_prd_typ) *Ver 1.2* ***Commented in Ver 1.4 ***/
       /*** AND 			ftq_prdct_typ = decode(:ptr_st_contract->c_prd_typ,'P','F','U','F',:ptr_st_contract->c_prd_typ) Commented In Ver 1.5 ***/
       AND 			ftq_prdct_typ = decode(:ptr_st_contract->c_prd_typ,'P','F','U','F','I','O',:ptr_st_contract->c_prd_typ)
								/*** Ver 1.5 ***/
       AND      TRIM(ftq_undrlyng) 	= TRIM(:ptr_st_contract->c_undrlyng) /*** Ver 1.5 Trim added ***/
       AND      ftq_expry_dt 	= to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
       AND      ftq_exer_typ 	= :ptr_st_contract->c_exrc_typ
       AND      ftq_opt_typ 	= :ptr_st_contract->c_opt_typ 
       AND      ftq_strk_prc 	= :ptr_st_contract->l_strike_prc;
			 /*** Commented in Ver 1.9 ***
       AND			fcm_xchng_cd  = ftq_xchng_cd
			 AND			fcm_undrlyng  = ftq_undrlyng
       AND			fcm_prdct_typ = ftq_prdct_typ
			 AND			fcm_expry_dt	= ftq_expry_dt
			 AND			fcm_opt_typ   = ftq_opt_typ
			 AND			fcm_strk_prc	= ftq_strk_prc
			 AND			fcm_exer_typ	= ftq_exer_typ;		*** FCM join added in Ver 1.7 ***/

	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )  
	{
		fn_errlog ( c_ServiceName, "S31015", SQLMSG, ptr_st_err_msg->c_err_msg );
		tpfree ( ( char * ) ptr_st_cntrct_qt );
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}
	else if ( SQLCODE == NO_DATA_FOUND )
	{
		fn_userlog ( c_ServiceName, "Inside NO_DATA_FOUND.....");
		fn_errlog ( c_ServiceName, "B28510", DEFMSG, ptr_st_err_msg->c_err_msg );
		tpfree ( ( char * ) ptr_st_cntrct_qt );
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}

	SETNULL ( c_exp_dt );
	SETNULL ( c_lst_trd_dt );

	strcpy ( ptr_st_cntrct_qt->c_expry_dt , ( char * ) c_exp_dt.arr );
	strcpy ( ptr_st_cntrct_qt->c_lst_trdd_time , ( char * ) c_lst_trd_dt.arr );
	tpfree ( ( char * ) ptr_st_err_msg );
	fn_userlog ( c_ServiceName, " Before returning successfully .....");
	tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_cntrct_qt, 0, 0 );
}

