/******************************************************************************/
/*	Program	    			:	SFO_GT_FIMTMRP                                        */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_RQST_TYP                                          */
/*                                                                            */
/*  Optional          : FFO_UNDRLYNG                                          */
/*                                                                            */
/*  Output            : FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_CNTRCT_TAG                                        */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_CTGRY_INDSTK                                      */
/*                                                                            */
/*  Description       : To get the records for running the Intra day MTM      */
/*                      report and pass it on to the Calling batch program    */
/*                                                                            */
/*  Log               :                                                       */
/*                                                                            */
/******************************************************************************/
/*  11-Jun-2002     Ver 1.0        Vinod Banjan      Release 1.0              */
/*	17-Dec-2007			Ver 1.1				 Sushil Sharma		 IBM Migration						*/
/*  20-Mar-2008			Ver 1.2				 Sandeep Patil     Future Plus							*/
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fn_battmpt.h>
#include <fn_tuxlib.h>
#include <fn_log.h>							/***	Ver 1.1 : Added ***/
#include <fn_read_debug_lvl.h>  /*  Ver 1.1 : Added   */

void SFO_GT_FIMTMRP( TPSVCINFO *rqst )
{

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];

  int i_returncode;
  int *ind_undrlyng;
	char	c_und_present='Y';
	char c_prd_typ[2];				/*** Ver 1.2 **/

  EXEC SQL BEGIN DECLARE SECTION;
  	varchar select_stmt[500];
    char c_xchng_cd [ 4 ];
    /*char c_prd_typ;*/
    char c_rqst_typ;
    char c_undrlyng_str [ 200 ];

    char sql_mtch_accnt [ 11 ];
    char sql_xchng_cd [ 4 ];
    char sql_prd_typ;
    char sql_indstk;
    char sql_undrlyng [ 7 ];
    char sql_cntrct_tag;

		char	c_exg_stts;

  EXEC SQL END DECLARE SECTION;

  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.1 : Added   */

  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                    c_err_msg,
                                    ptr_fml_Ibuf,
                                    4,
                                    FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                                    FFO_PRDCT_TYP, ( char * )&c_prd_typ, NULL,
                                    FFO_RQST_TYP, ( char * )&c_rqst_typ, NULL,
                                    FFO_UNDRLYNG, ( char * )c_undrlyng_str, 
																			&ind_undrlyng);

  if( i_returncode != 0 )
  {
		if ( *ind_undrlyng == -1 )
		{
			c_und_present = 'N';
		}
		else
		{
    	fn_errlog( c_ServiceName, "S31005", LIBMSG , c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}
  }

	c_prd_typ[1]='\0';			/*** Ver 1.2 ***/

  if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.1 : Debug level Change  */
    fn_userlog( c_ServiceName, "c_xchng_cd :%s:", c_xchng_cd );
    fn_userlog( c_ServiceName, "c_prd_typ  :%s:", c_prd_typ );
    fn_userlog( c_ServiceName, "c_rqst_typ :%c:", c_rqst_typ );
    fn_userlog( c_ServiceName, "c_undrlyng_str :%s:", c_undrlyng_str );
  }

	if ( ( c_und_present == 'N' ) && ( c_rqst_typ == MTM_FOR_UNDRLYNG ) )
	{
    fn_userlog( c_ServiceName, "Error occurred :%s:", c_err_msg );
		strcpy(c_err_msg,"Invalid reuest type"); 
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	
	if( c_rqst_typ == MTM_ALL_PSTN )
	{
		strcpy ((char *)select_stmt.arr,"SELECT FUP_CLM_MTCH_ACCNT,FUP_XCHNG_CD,FUP_PRDCT_TYP,FUP_INDSTK,FUP_UNDRLYNG,FUP_CNTRCT_TAG FROM FUP_FUT_UNDRLYNG_PSTN WHERE FUP_XCHNG_CD = '");
		strcat((char *)select_stmt.arr, c_xchng_cd);
		strcat((char *)select_stmt.arr,"' AND FUP_PRDCT_TYP = '");      /*** Ver 1.2 ***/
    strcat((char *)select_stmt.arr,c_prd_typ );
    strcat((char *)select_stmt.arr,"' AND FUP_UOPNPSTN_QTY != 0 ORDER BY FUP_UNDRLYNG");
	}
	else if( c_rqst_typ == MTM_FOR_UNDRLYNG )
	{
		strcpy ((char *)select_stmt.arr,"SELECT FUP_CLM_MTCH_ACCNT,FUP_XCHNG_CD,FUP_PRDCT_TYP,FUP_INDSTK,FUP_UNDRLYNG,FUP_CNTRCT_TAG FROM FUP_FUT_UNDRLYNG_PSTN WHERE FUP_XCHNG_CD = '");
		strcat((char *)select_stmt.arr,c_xchng_cd);
		strcat((char *)select_stmt.arr,"' AND FUP_PRDCT_TYP = '");      /*** Ver 1.2 ***/
    strcat((char *)select_stmt.arr,c_prd_typ );
    strcat((char *)select_stmt.arr,"'AND FUP_UOPNPSTN_QTY != 0 AND FUP_UNDRLYNG in (");
    strcat((char *)select_stmt.arr, c_undrlyng_str);
    strcat((char *)select_stmt.arr, ")");
    strcat((char *)select_stmt.arr, "  ORDER BY FUP_UNDRLYNG");

	}
	
	select_stmt.len = strlen((char *)select_stmt.arr);	

/***Commented by sangeet to make Oracle 9i compatiblr***/
	/*EXEC SQL DECLARE sql_stmt STATEMENT;
	if(SQLCODE != 0)
	{
		fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}*/


	EXEC SQL PREPARE sql_stmt FROM :select_stmt;
	if(SQLCODE != 0)
	{
		fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  ptr_fml_Obuf = NULL;

	EXEC SQL DECLARE cur_dyn CURSOR FOR sql_stmt;

	EXEC SQL OPEN cur_dyn ;
	if(SQLCODE != 0)
	{
		fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg );
		tpfree ( ( char * ) ptr_fml_Obuf );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  for (;;)
  {
		EXEC SQL FETCH cur_dyn 
             INTO :sql_mtch_accnt,
                  :sql_xchng_cd,
                  :sql_prd_typ,
                  :sql_indstk,
                  :sql_undrlyng,
                  :sql_cntrct_tag;

		if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        break;
      }
			fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg );
			tpfree ( ( char * ) ptr_fml_Obuf );
    	EXEC SQL CLOSE cur_dyn;
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

    i_returncode = fn_pack_vartofml( c_ServiceName,
                                     c_err_msg,
                                     &ptr_fml_Obuf,
                                     6,
                                 FFO_EBA_MTCH_ACT_NO, ( char * )sql_mtch_accnt,
                                 FFO_XCHNG_CD, ( char * )sql_xchng_cd,
                                 FFO_PRDCT_TYP, ( char * )&sql_prd_typ,
                                 FFO_CTGRY_INDSTK, ( char * )&sql_indstk,
                                 FFO_UNDRLYNG, ( char * )sql_undrlyng,
                                 FFO_CNTRCT_TAG, ( char * )&sql_cntrct_tag );

		if( i_returncode == -1 )
		{
			fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg );
    	EXEC SQL CLOSE cur_dyn;
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
    EXEC SQL CLOSE cur_dyn;

  tpreturn(TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
}

