/******************************************************************************/
/*  Program     : SFO_FDR_DTLS 		                                            */
/*                                                                            */
/*  Input       : FML_ORD_ORDR_RFRNC                                          */
/*                FML_ORD_CLM_MTCH_ACCNT                                      */
/*                FML_PRDCT_TYP                                               */
/*                FML_ORD_STCK_CD                                             */
/*                FML_EXPIRY_DATE                                             */
/*                FML_ORD_PRDCT_TYP                                           */
/*                FML_TRN_PRDT_TYP                                            */
/*                FML_TRADE_PRICE                                             */
/*                FML_TOTAL_QTY                                               */
/*                FML_ORD_TRD_DT                                              */
/*                FML_ORD_ORDR_STTS                                           */
/*                FML_EXEC_QTY                                                */
/*                FML_CANC_QTY                                                */
/*                FML_EXPR_QTY                                                */
/*                                                                            */
/*  Output      :                                                             */
/*                                                                            */
/*  Description : This prgrm inserts or updates the FD details into EBA				*/
/*                                                                            */
/*  Log         : 1.0   04-Apr-2014   Samip M                                 */
/*                                                                            */
/******************************************************************************/
/*  1.0  -  New release                                                       */
/*  1.1  -  View to FML changes ( Sachin Birje )                              */
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fml_def.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fo.h>
#include <fn_session.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fn_read_debug_lvl.h>
#include <fo_bank.h>
#include <fn_pos.h>   /*** Ver 1.1 : Added  ***/
#include <fml_rout.h>         /*** Ver 1.1 **/

EXEC SQL INCLUDE "table/ffm_fo_fdr_mstr.h";

void SFO_FDR_DTLS( TPSVCINFO *rqst )
{

  FBFR32 *ptr_fml_Ibuf;   /* Pointer to FML input buffer  */
  FBFR32 *ptr_fml_Obuf;   /* Pointer to FML output buffer */

  char c_ServiceName [ 33 ];
  char c_err_msg[256];
	int i;
  int i_err[11];
  int i_ferr[11];
  int i_returncode;
  int i_trnsctn;
  int i_ip_len;

  EXEC SQL BEGIN DECLARE SECTION;

  struct vw_gt_lmt_dtls st_gt_lmt;
	int is_cust_exists;
	int is_fd_exist;
	int invalid_dt;
  char c_xchng_cd[4];
 /*** char sql_ffm_mtch_accnt[11];
	char sql_ffm_fd_no[20];
  char sql_ffm_fd_mat_date[12];***/
  char c_sys_dt[12];
/**	char *sql_ffm_fd_stts;
	double sql_ffm_fd_amnt;
	double sql_ffm_qual_fd_amnt;**/
	double d_ffm_qual_fd_amnt;

  EXEC SQL END DECLARE SECTION;

  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
  INITDBGLVL(c_ServiceName);
  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  fn_userlog(c_ServiceName,"Started SFO_ADM_MRGNDTL..,,,,");

  i_err[0]  = Fget32( ptr_fml_Ibuf, FFO_EBA_MTCH_ACT_NO, 0, (char *)sql_ffm_mtch_accnt, 0 );
  i_ferr[0] = Ferror32;
  i_err[1]  = Fget32( ptr_fml_Ibuf, FFO_REF_NO, 0, (char *)sql_ffm_fd_no.arr, 0 );
  i_ferr[1] = Ferror32;
  i_err[2]  = Fget32( ptr_fml_Ibuf, FFO_CLOSURE_DT, 0, (char *)sql_ffm_fd_mat_date.arr, 0 );
  i_ferr[2] = Ferror32;
  i_err[3]  = Fget32( ptr_fml_Ibuf, FFO_ADDL_AMT_BLKD, 0, (char *)&sql_ffm_fd_amnt, 0 );
  i_ferr[3] = Ferror32;
  i_err[4]  = Fget32( ptr_fml_Ibuf, FFO_BAL_AMT, 0, (char *)&sql_ffm_qual_fd_amnt, 0 );
  i_ferr[4] = Ferror32;

  for (i=0;i<5;i++)
  {
    if (i_err[i] == -1)
    {
      fn_userlog(c_ServiceName,"Error in Fget at [%d],[%s]", i,Fstrerror32( i_ferr[i]));
      fn_errlog(c_ServiceName, "S31005", FMLMSG, c_err_msg  );
      fn_userlog(c_ServiceName,"Error in fget value at initial ");
      Fadd32(ptr_fml_Obuf,FFO_ERR_MSG,c_err_msg,0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    }
  }

	sql_ffm_fd_amnt = sql_ffm_fd_amnt * 100.00;
	sql_ffm_qual_fd_amnt = sql_ffm_qual_fd_amnt * 100.00;

	SETLEN(sql_ffm_fd_no);
	SETLEN(sql_ffm_fd_mat_date);

	SETNULL(sql_ffm_fd_no);
	SETNULL(sql_ffm_fd_mat_date);

  /**** Commented in Ver 1.1 *******************
  i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *)&st_gt_lmt,
                           "vw_gt_lmt_dtls" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  ******* Ver 1.1 Ends Here ****************/
 
  /****** Ver 1.1 Starts Here **************/
  i_returncode = fn_unpack_fmltovar_dflt ( c_ServiceName,
                                           c_err_msg,
                                           ptr_fml_Ibuf,
                                           6,
                                           FFO_XCHNG_CD, (char*)st_gt_lmt.c_xchng_cd,"*",
                                           FFO_EBA_MTCH_ACT_NO,(char*)st_gt_lmt.c_cln_mtch_accnt,"*",
                                           FFO_TRD_DT, (char*)st_gt_lmt.c_trd_dt,"NULL",
                                           FFO_GID, (char*)&st_gt_lmt.l_gid,0,
                                           FFO_RQST_TYP,(char*)&st_gt_lmt.c_rqst_typ,"*",
                                           FFO_ROUT_CRT,(char*)st_gt_lmt.c_rout_crt,"*"
                                         );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /****** Ver 1.1 Ends Here ****************/


  i_ip_len = sizeof ( struct vw_gt_lmt_dtls);
  st_gt_lmt.c_rqst_typ = LIMIT_X;
  fn_cpy_ddr ( st_gt_lmt.c_rout_crt );

	EXEC SQL
		SELECT to_char( sysdate, 'DD-Mon-YYYY')
		INTO :c_sys_dt
		FROM DUAL;

	strcpy(st_gt_lmt.c_trd_dt, c_sys_dt);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"INPUT for SFO_FDR_DTLS..");
    fn_userlog(c_ServiceName,"sql_ffm_mtch_accnt [%s]",sql_ffm_mtch_accnt);
    fn_userlog(c_ServiceName,"sql_ffm_fd_no [%s]",sql_ffm_fd_no.arr);
    fn_userlog(c_ServiceName,"sql_ffm_fd_mat_date [%s]",sql_ffm_fd_mat_date.arr);
    fn_userlog(c_ServiceName,"sql_ffm_fd_amnt [%lf]",sql_ffm_fd_amnt);
    fn_userlog(c_ServiceName,"sql_ffm_qual_fd_amnt [%lf]",sql_ffm_qual_fd_amnt);
  }
	
	EXEC SQL
		SELECT 1
		INTO :is_cust_exists
		FROM CLM_CLNT_MSTR
		WHERE CLM_MTCH_ACCNT = :sql_ffm_mtch_accnt;

  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
  }

	EXEC SQL
		SELECT COUNT(1) 
		INTO :is_fd_exist
		FROM FFM_FO_FDR_MSTR
		WHERE FFM_FD_NO = trim(:sql_ffm_fd_no)
		AND FFM_MTCH_ACCNT = :sql_ffm_mtch_accnt;

	fn_userlog(c_ServiceName,"is_fd_exist = :%d:",is_fd_exist);

  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
  }

	if(sql_ffm_qual_fd_amnt > sql_ffm_fd_amnt)
	{
     strcpy(c_err_msg,"Qualified amount should not be greated than Total FD amount");
     fn_userlog(c_ServiceName, "%s",c_err_msg);
     Fadd32(ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0);
	}

	if(sql_ffm_fd_amnt <= 0)
	{
     strcpy(c_err_msg,"Total FD amount should be greater than 0");
     fn_userlog(c_ServiceName, "%s",c_err_msg);
     Fadd32(ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0);
	}

	if(is_fd_exist == 0)
	{

		fn_userlog(c_ServiceName,"New FD, Inserting ......");
		if(sql_ffm_qual_fd_amnt <= 0)
		{
			strcpy(c_err_msg,"Qualified amount should be greater than 0");
			fn_userlog(c_ServiceName, "%s",c_err_msg);
      Fadd32(ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0);
		}

		EXEC SQL
			SELECT 1
			INTO :invalid_dt
			FROM DUAL
			WHERE to_date(:sql_ffm_fd_mat_date,'DD-Mon-YYYY') < to_date(:c_sys_dt,'DD-Mon-YYYY');

		fn_userlog(c_ServiceName,"invalid_dt = :%d:",invalid_dt);

  	if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
  	{
    	fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg );
    	tpfree ( ( char * ) ptr_fml_Obuf );
    	Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
  	}

		if (invalid_dt == 1)
		{
      strcpy(c_err_msg,"Maturity date should be greater than todays date for new FD");
      fn_userlog(c_ServiceName, "%s",c_err_msg);
      Fadd32(ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0);
		}

		sql_ffm_fd_stts = 'A';

	}
	else
	if(is_fd_exist == 1)
	{
		fn_userlog(c_ServiceName,"FD exists, updating ....");	
    if(sql_ffm_qual_fd_amnt < 0)
    {
      strcpy(c_err_msg,"Qualified amount should not be less than 0");
      fn_userlog(c_ServiceName, "%s",c_err_msg);
      Fadd32(ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0);
    }

		if(sql_ffm_qual_fd_amnt == 0)
			sql_ffm_fd_stts='D';
		else
			sql_ffm_fd_stts='A';
	}

  /**** COmmented in Ver 1.1 *************************
  i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_gt_lmt,
                                &st_gt_lmt,
                                "vw_gt_lmt_dtls",
                                "vw_gt_lmt_dtls",
                                i_ip_len,
                                i_ip_len,
                                0,
                                "SFO_GET_LIMITS" );
  ************** Ver 1.1 *****************************/

  /******* Ver 1.1 Starts Here ***********/
   st_gt_lmt.d_amt=0;
   i_returncode = fo_get_trd_limit(c_ServiceName,
                                    st_gt_lmt.c_cln_mtch_accnt,
                                    st_gt_lmt.c_trd_dt,
                                    st_gt_lmt.c_rqst_typ,
                                    st_gt_lmt.c_xchng_cd,
                                    st_gt_lmt.l_gid,
                                    &st_gt_lmt.d_amt,
                                    c_err_msg
                                    );
  /******* Ver 1.1 Ends here **************/

  if ( i_returncode != SUCC_BFR  )
  {
    fn_errlog(c_ServiceName, "S31035", LIBMSG, c_err_msg);
    Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
  }

	fn_userlog(c_ServiceName, "Match accnt :%s:",sql_ffm_mtch_accnt);
	fn_userlog(c_ServiceName, "Before updating FD, Limit is :%lf:",st_gt_lmt.d_amt);

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "S31040", LIBMSG, c_err_msg);
    fn_userlog(c_ServiceName, "Error while beginning the transaction");
    Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
  }

  if(is_fd_exist == 0)
  {

		d_ffm_qual_fd_amnt = 0;

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Before SFO_FDR_DTLS..");
    fn_userlog(c_ServiceName,"sql_ffm_mtch_accnt [%s]",sql_ffm_mtch_accnt);
    fn_userlog(c_ServiceName,"sql_ffm_fd_no [%s]",sql_ffm_fd_no.arr);
    fn_userlog(c_ServiceName,"sql_ffm_fd_mat_date [%s]",sql_ffm_fd_mat_date.arr);
    fn_userlog(c_ServiceName,"sql_ffm_fd_amnt [%lf]",sql_ffm_fd_amnt);
    fn_userlog(c_ServiceName,"sql_ffm_qual_fd_amnt [%lf]",sql_ffm_qual_fd_amnt);
    fn_userlog(c_ServiceName,"sql_ffm_fd_stts [%c]",sql_ffm_fd_stts);
  }

    EXEC SQL
      INSERT INTO FFM_FO_FDR_MSTR(
          FFM_MTCH_ACCNT,
          FFM_FD_NO,
          FFM_FD_MAT_DATE,
          FFM_FD_AMNT,
          FFM_QUAL_FD_AMNT,
          FFM_FD_STTS,
          FFM_INSUPD_DT)
      VALUES(
          :sql_ffm_mtch_accnt,
          :sql_ffm_fd_no,
					:sql_ffm_fd_mat_date,
          :sql_ffm_fd_amnt,
          :sql_ffm_qual_fd_amnt,
          :sql_ffm_fd_stts,
          sysdate);

/***      INSERT INTO FFM_FO_FDR_MSTR(
          FFM_MTCH_ACCNT,
          FFM_FD_NO,
          FFM_FD_MAT_DATE,
          FFM_FD_AMNT,
          FFM_QUAL_FD_AMNT,
          FFM_FD_STTS,
          FFM_INSUPD_DT)
      VALUES(
          :sql_ffm_mtch_accnt,
          '1',
          '23-Mar-2020',
          100,
          :sql_ffm_qual_fd_amnt,
          'A',
          sysdate);***/

    if(SQLCODE != 0)
    {
      fn_errlog( c_ServiceName, "S31045", SQLMSG, c_err_msg );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    }
	}
	else
	if(is_fd_exist == 1)
	{
	
		fn_userlog(c_ServiceName,"Inside Update...");

		EXEC SQL
			SELECT FFM_QUAL_FD_AMNT
			INTO :d_ffm_qual_fd_amnt
			FROM FFM_FO_FDR_MSTR
			WHERE 
          FFM_MTCH_ACCNT = :sql_ffm_mtch_accnt AND
          FFM_FD_NO = :sql_ffm_fd_no;

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    }

		if(SQLCODE == NO_DATA_FOUND)
		{
			d_ffm_qual_fd_amnt = 0;
		}

		fn_userlog(c_ServiceName,"d_ffm_qual_fd_amnt = :%lf:",d_ffm_qual_fd_amnt);
		fn_userlog(c_ServiceName," sql_ffm_qual_fd_amnt :%lf:",sql_ffm_qual_fd_amnt);
		fn_userlog(c_ServiceName," sql_ffm_mtch_accnt :%s:",sql_ffm_mtch_accnt);
		fn_userlog(c_ServiceName," sql_ffm_fd_no :%s:",sql_ffm_fd_no.arr);

		EXEC SQL
			UPDATE FFM_FO_FDR_MSTR
			SET FFM_QUAL_FD_AMNT = :sql_ffm_qual_fd_amnt,
					FFM_FD_STTS = :sql_ffm_fd_stts
			WHERE
					FFM_MTCH_ACCNT = :sql_ffm_mtch_accnt AND
					FFM_FD_NO = :sql_ffm_fd_no;

    if(SQLCODE != 0)
    {
      fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg );
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    }
	}

	i_returncode = fn_upd_fdr_dtls (c_ServiceName,
																	c_err_msg,
																	sql_ffm_mtch_accnt,
																	sql_ffm_fd_no.arr,
																	d_ffm_qual_fd_amnt,
																	sql_ffm_qual_fd_amnt);

	if ( i_returncode != 0 )
  {
      fn_errlog(c_ServiceName, "S31060",LIBMSG,c_err_msg);
    	fn_userlog(c_ServiceName, "Error :%s:", c_err_msg);
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
	}

  if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog(c_ServiceName, "S31065", SQLMSG, c_err_msg);
    fn_userlog(c_ServiceName, "Error in commit [%s] exiting..", c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
  }
	
  /***** Commented in ver 1.1 *****************	
  i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_gt_lmt,
                                &st_gt_lmt,
                                "vw_gt_lmt_dtls",
                                "vw_gt_lmt_dtls",
                                i_ip_len,
                                i_ip_len,
                                0,
                                "SFO_GET_LIMITS" );
  *********** Ver 1.1 Ends here ****************/
  
  /******* Ver 1.1 Starts Here ***********/
   st_gt_lmt.d_amt=0;
   i_returncode = fo_get_trd_limit(c_ServiceName,
                                    st_gt_lmt.c_cln_mtch_accnt,
                                    st_gt_lmt.c_trd_dt,
                                    st_gt_lmt.c_rqst_typ,
                                    st_gt_lmt.c_xchng_cd,
                                    st_gt_lmt.l_gid,
                                    &st_gt_lmt.d_amt,
                                    c_err_msg
                                    );
  /******* Ver 1.1 Ends here **************/
  if ( i_returncode != SUCC_BFR  )
  {
    fn_errlog(c_ServiceName, "S31070", LIBMSG, c_err_msg);
    Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
  }

	fn_userlog(c_ServiceName, "Match accnt :%s:",sql_ffm_mtch_accnt);
	fn_userlog(c_ServiceName, "After updating FD, Limit is :%lf:",st_gt_lmt.d_amt);

  if ( Fadd32 ( ptr_fml_Obuf, FFO_LIMIT,(char *)&st_gt_lmt.d_amt, 0 ) == -1 )
	{
    fn_errlog( c_ServiceName, "S31075", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
  }

  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );

}

/*******

int fn_upd_fdr_dtls ( char *sql_ffm_mtch_accnt,
											char *c_fdr_no,
											double d_ffm_qual_fd_amnt,
											double sql_ffm_qual_fd_amnt)
{

  char c_msg [ 256 ];
  int i_returncode;
  int i_trnsctn;
 	char c_narration[61];
  fn_userlog(c_ServiceName,"Inside FD Update for Match :%s:",sql_ffm_mtch_accnt);

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog(c_ServiceName, "L31285", LIBMSG, c_err_msg);
    strcpy ( c_msg, "System error. Contact system support" );
    fn_userlog(c_ServiceName,"Error in begin tran of fn_upd_adm_alloc_dtls");
    return ( -1 );
  }

  i_returncode = fn_lock_usr( c_ServiceName, sql_ffm_mtch_accnt );
  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "L31290",LIBMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Error in lock of fn_upd_adm_alloc_dtls");
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    return ( -1 );
  }

	EXEC SQL
		SELECT NVL(fab_fdr_amt,0)
		INTO :d_old_fab_fd_amt
		FROM fab_fo_alc_bft_smry
		WHERE FAB_CLM_MTCH_ACCNT = :sql_ffm_mtch_accnt;

  if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_errlog( c_ServiceName, "L31300",SQLMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Error in updating FAB");
    strcpy ( c_msg, "System error. Contact system support" );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    return(-1);
  }

	if(SQLCODE == NO_DATA_FOUND)
	{
		d_old_fab_fd_amt = 0;

    EXEC SQL 
				SELECT CLB_BNK_ACCT_NMBR
        INTO :sql_fab_bnk_accnt
        FROM CLB_BNK_ACCTS
        WHERE CLB_CLM_MTCH_ACCNT = :sql_mtch_accnt;

		if( SQLCODE != 0)
		{
    	fn_errlog( c_ServiceName, "L31300",SQLMSG,c_err_msg);
    	fn_userlog(c_ServiceName,"Error in updating FAB");
    	strcpy ( c_msg, "System error. Contact system support" );
    	fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    	return(-1);	
		}
    SETNULL(sql_fab_bnk_accnt);

    EXEC SQL 
				INSERT INTO FAB_FO_ALC_BFT_SMRY
        (FAB_CLM_MTCH_ACCNT,
        FAB_BNK_ACCNT,
        FAB_ALCTD_AMT,
        FAB_BFT_AMT,
        FAB_PLG_AMT,
        FAB_NWB_AMT,
				FAB_ISEC_MRGN_AMT,
				FAB_ISEC_MRGN_AMT_BSE,
				FAB_FDR_AMT)
        VALUES
        (:sql_mtch_accnt,
        :sql_fab_bnk_accnt,
        0,
        0,
        0,
				0,
				0,
				0,
				:d_old_fab_fd_amt);

		if( SQLCODE != 0)
		{
    	fn_errlog( c_ServiceName, "L31300",SQLMSG,c_err_msg);
    	fn_userlog(c_ServiceName,"Error in updating FAB");
    	strcpy ( c_msg, "System error. Contact system support" );
    	fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    	return(-1);
		}
            
	}

	fn_userlog(c_ServiceName,"Old FD Amount is :%lf:",d_old_fd_amt);

	d_chng_fab_fd_amt = (-1) * d_ffm_qual_fd_amnt + sql_ffm_qual_fd_amnt;

  EXEC SQL
		UPDATE FAB_FO_ALC_BFT_SMRY 
		SET fab_fdr_amt = nvl(fab_fdr_amt,0) + :d_chng_fab_fd_amt
		WHERE FAB_CLM_MTCH_ACCNT = :sql_ffm_mtch_accnt
		RETURNING FAB_BNK_ACCNT,FAB_ALCTD_AMT,FAB_BFT_AMT,FAB_PLG_AMT,FAB_ISEC_MRGN_AMT,FAB_NWB_AMT,FAB_ISEC_MRGN_AMT_BSE
		INTO :sql_fab_bnk_accnt,:sql_fab_alctd_amt,:sql_fab_bft_amt,:sql_fab_plg_amt,:sql_fab_isec_amt,:sql_fab_nwb_amt,:sql_fab_isec_bse_amt;

  SETNULL(sql_fab_bnk_accnt);

  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31300",SQLMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Error in updating FAB");
    strcpy ( c_msg, "System error. Contact system support" );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    return(-1);
  }

	EXEC SQL
			INSERT INTO FAL_FO_ALCBFT_LOG(
				FAL_CLM_MTCH_ACCNT,
				FAL_BNK_ACCNT,
				FAL_ALCTD_AMT,
				FAL_BFT_AMT,
				FAL_TRN_DT,
				FAL_OLD_PLG_AMT,
				FAL_NARRATION,
				FAL_NWB_AMT,
				FAL_ISEC_MRGN_AMT,
				FAL_ISEC_MRGN_AMT_BSE,
				FAL_OLD_FDR_AMT,
				FAL_CHG_FDR_AMT)
			VALUES
				(:sql_ffm_mtch_accnt,
				:sql_fab_bnk_accnt,
				:sql_fab_alctd_amt,
				:sql_fab_bft_amt,
				sysdate,
				:sql_fab_plg_amt,
				'FD Change',
				:sql_fab_nwb_amt,
				:sql_fab_isec_amt,
				:sql_fab_isec_bse_amt,
				:d_ffm_qual_fd_amnt,
				:d_chng_fab_fd_amt);

  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "L31300",SQLMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Error in updating FAB");
    strcpy ( c_msg, "System error. Contact system support" );
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg );
    return(-1);
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog( c_ServiceName, "L31305",LIBMSG,c_err_msg);
    fn_userlog(c_ServiceName,"Error in commit tran");
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    return ( -1 );
  }

  return ( 0 );

}

********/



