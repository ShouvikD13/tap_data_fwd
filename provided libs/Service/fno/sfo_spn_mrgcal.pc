/******************************************************************************/
/*  Program           : SFO_SPN_MRGCAL                                        */
/*                                                                            */
/*  Input             : FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_CI_BUY_QTY                                        */
/*                      FFO_CI_BUY_ORD_VL                                     */
/*                      FFO_CI_SELL_QTY                                       */
/*                      FFO_CI_SELL_ORD_VL                                    */
/*                      FFO_CBUY_EXCTD_QTY                                    */
/*                      FFO_CSELL_EXCTD_QTY                                   */
/*                      FFO_C_OPNPSTN_FLW                                     */
/*                      FFO_C_OPNPSTN_QTY                                     */
/*                      FFO_C_ORG_OPN_VAL                                     */
/*                      FFO_ROUT_CRT                                          */
/*                                                                            */
/*  Output            : FFO_U_ORDR_MRGN                                       */
/*                      FFO_U_TRD_MRGN                                        */
/*                                                                            */
/*  Description       : This service calculates the margin  for a SPAN        */
/*                      customer                                              */
/*                                                                            */
/*  Log               : 1.0   27-Jun-2011  																		*/
/*  									: 1.2   12-Jul-2012  																		*/
/*                    : 1.3   29-Nov-2012                                     */
/*                    : 1.4   07-Jun-2013                                     */
/*                    : 1.5   18-Jun-2013                                     */
/*                    : 1.6   14-Oct-2013                                     */
/*                    : 1.7   04-Mar-2014                                     */
/*                    : 1.9   26-Aug-2015                                     */
/*                    : 2.1   15-Dec-2015									                    */
/*                    : VQC   01-Apr-2016																		  */
/*                    : 2.3   25-Oct-2016                                     */
/*                    : 2.4   16-Jul-2018                                     */ 
/*										: 2.5		09-Oct-2018																			*/
/*                    : 2.7   20-Nov-2019                                     */ 
/*                    : 2.9   21-Jun-2021                                     */ 
/*										: 3.1   19-Aug-2021																			*/
/*										: 3.2   13-Jan-2022																			*/
/*										: 3.3   14-Jul-2022																			*/
/*										: 3.4   23-Aug-2022																			*/
/******************************************************************************/
/*  1.0    -  New Release                                                     */
/*  1.1    -  MEMSET Ip string and NVL in FTQ fetch (30-Mar-2012) -Navina D.  */
/*         -  Bug Fix For Decimal Strike Prices                               */
/*  1.2    -  Bug Fix for exposure margin getting computed for long option		*/ 
/*						positions 																											*/
/*  1.3    -  FNO BSE SPAN Changes                                            */
/*  1.4    -  Bug Fix: Displaying Buisness error for invalid contract         */
/*  1.5    -  Bug Fix: SPAN OUTPUT STRING Handling changes                    */
/*  1.6    -  Available margin to be displayed on frontend                    */
/*  1.7    -	CR-ISEC14-49175 Span margin calculator to display correct values*/
/*            for total & minimum margin                                      */
/*  1.9    -  Bug fix                                                         */
/*  2.1    -  CR-ISEC10-70548(CR for Margin display FNO order placement) - Akash*/
/*	VQC		 -  VERSION QUALITY CONTROL - Ritesh D															*/
/*	2.2		 -  Debug Level changes - Navina D															    */
/*  2.3    -  Check Session IP - PHASE_III                                    */
/*  2.4    -  Correction for last traded price - Susmita M.                   */
/*	2.5		 -	CR-ISEC14-114802_FNO_LIVE_ISSUES Changes - Parag K.							*/
/*  2.7    -  SENSIBULL Strategy margin with position and order margin        */
/*  2.8    -  view margin                                                     */ 
/*  2.9    -  Basket order margin changes                                     */ 
/*	3.1		 -	Addition of Margin Calculator to Non-Logged in Section (Shlok Ghan)*/
/*	3.2		 -	Shortfall excess Margin (Naveena)                               */
/*	3.3		 -  SPAN_BOD_MRGN_CR-ISEC14-172812 (Sachin Birje)   	              */
/*	3.4		 -  Core fix (Naveena R.)   	                                      */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <eba_to_ors.h>
#include <fo_fml_def.h>
/* COMMENTED IN VER TOL : TUX on LINUX (Ravindra) * #include <fo_view_def.h> */
#include <sqlca.h>
#include <fn_log.h>
#include <fn_tuxlib.h>
#include <fn_session.h>
#include <fn_pos.h>
#include <fn_ddr.h>
#include <fn_read_debug_lvl.h> 
#include <fn_span_lib.h> 
#include <fml_rout.h> 
#include <fn_val_ord.h> 

void SFO_SPN_MRGCAL( TPSVCINFO *rqst )
{
	EXEC SQL INCLUDE "table/icd_info_client_dtls.h"; /*** Ver 2.7 ***/
  char c_ServiceName[33];
  char c_err_msg[256];
  char c_req_type = '\0';			/*** Ver 2.1 ***/
  char    c_ven_nm[15]  ="\0";  /** Ver 2.7 **/
  varchar c_ven_id[51];         /** Ver 2.7 **/
  char    c_api_src_flg ='\0';  /** Ver 2.7 **/
  int i_returncode;
  int i_ch_val;
  int i_trnsctn;
  int i;
	int i_cntrct_cnt = 0;		/*** Ver 1.1 ***/

	/***	Following Variables are commented in VQC as they are not used 

	double	d_ord_mrgn_amt = 0.0;	
	double	d_trd_mrgn_amt = 0.0;	
	double	d_ord_amt_blkd = 0.0;
	double	d_pstn_amt_blkd= 0.0;

	 ***/

	double	d_ibuy_rate = 0.0;
	double	d_isell_rate = 0.0 ;
	double	d_opnpstn_rate = 0.0 ;

	double	d_fut_plus_ord_mrgn_amt = 0.0;		/**  Ver 2.1  **/
	double	d_fut_plus_sltp_ord_mrgn_amt = 0.0;	/**  Ver 2.1  **/	
  double d_buy_amt = 0.0; /** ver 2.8 **/
  double d_sell_amt = 0.0; /** ver 2.8 **/

	long int  l_buy_exctd_qty = 0.0;					/**  Ver 2.1  **/	
	long int  l_sell_exctd_qty = 0.0;					/**  Ver 2.1  **/	

  long    l_lst_trd_prc = 0;  
  long l_recvbuf = 0;			/**  Ver 2.1  **/		

	/***	Following Variable is commented in VQC as it is not used
  double  d_lst_trd_prc = 0.0; 
	***/

  /** Ver 3.3 Starts here **/
  int    i_ret_val=0;

  double d_spn_bmrgn1=0;
  double d_bnov1=0;
  double d_total_bmrgn1=0;

  double d_spn_bmrgn2=0;
  double d_bnov2=0;
  double d_total_bmrgn2=0;

  double d_spn_bmrgn=0;
  double d_bnov=0;
  double d_total_bmrgn=0;
  /** Ver 3.3 Ends here **/ 

	
 	int     i_err[23];            	/***Size increased from 6 to 22 in Ver 2.1 ***/
	int     i_ferr[23];           /***Size increased from 6 to 22 in Ver 2.1 ***/

	/***	Following Variable is commented in VQC as it is not used
	char    c_flg;	
	***/
  char	  c_xchng_cd[4];

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;
	FBFR32 *ptr_fml_Ibuf_scall;   /*** Ver 1.1 ***/
  FBFR32 *ptr_fml_Obuf_scall;   /*** Ver 1.1 ***/

	/*** Structure Declaration ***/
  struct 	st_usr_prfl st_usr_prof;

  /*** Ver 2.3 Starts Here  ****/
  struct vw_usr_prfl st_usr_prfl_vw;

  MEMSET(st_usr_prfl_vw);
  /*** Ver 2.3 Ends Here ****/

  /***	Following Structure is commented in VQC as it is not used
	struct 	st_fus_undrlyng_pstn st_undfus_pos_crrnt ;
	***/

  struct 	st_fus_undrlyng_pstn st_undfus_pos_to_be ;
  struct 	st_fcp_cntrct_pstn   st_cntfcp_pos_crrnt ;
  struct 	st_fcp_cntrct_pstn   st_cntfcp_pos_temp ; /*** Ver 2.9 ***/

  struct 	st_pstn_actn st_pstn_actn_var;
  struct 	st_err_msg st_er_msg;
  struct 	vw_err_msg st_err_msg_vw;   /*** Changed name from st_err_msg to st_err_msg in Ver 2.3 ***/ 

  EXEC SQL BEGIN DECLARE SECTION;

  /***  Following Structure is commented in VQC as it is not used
	struct 	vw_cntfut_pos st_cf_pos;	
	***/

  char		c_cln_mtch_accnt [ 11 ];

	/***	Following Variable is commented in VQC as it is not used
	char		c_ip_undrlying [ 7 ];	
	***/

	char		c_prd_typ;
	char		c_ctgry_indstk;

	/***  Following Variable is commented in VQC as it is not used
	char		c_ip_tag;
	***/

  EXEC SQL END DECLARE SECTION;

	/*** Added Variables ***/
  /***	Following Variable is commented in VQC as it is not used
	varchar c_exp_dt[LEN_DATE];
	***/

	varchar vc_xchng_cd [20];
  double  d_ltp  = 0.0;
  /*** long    l_strike_prc = 0; -- Ver 1.1 ***/
  char    c_expry_dt[10];
  long    l_max_opn_qty = 0;
  long    l_min_opn_qty = 0;
  long    l_temp_qty    = 0;
  char    c_inp_strng1[ 8000 ];
  char    c_inp_strng2[ 8000 ];
  char    c_inp_strng11[ 8000 ];
  char    c_inp_strng22[ 8000 ];
  long    l_prtfl_seq1  = 0;
  long    l_prtfl_seq2  = 0;
	char    c_seq_num1[12000];
  char    c_seq_num2[12000];
  char    c_inp_strng[ 16000 ];
  char    c_pipe_id[3];
  long    l_cntr  = 0;
  long    l_length1 = 0;
  long    l_length2 = 0;
  long    li_len_tobuf = 0;
  long    l_prmum_qty  = 0;
	long  	l_basket_id = 0;  /*** 21-Oct-2011 ***/

	int     i_rtrn_cd1;
  char 		c_op_strng[ 16000 ];
  char 		c_op_strng1[ 16000 ];
  char 		c_op_strng2[ 16000 ];
  char 		*null_ptr  = 0;
  char 		c_mrgn_indctr[3];
	char 		c_mtch_accnt1[11];
	char 		c_spn_mrgn1[20];
	char 		c_nov1[20];
	char 		c_total_mrgn1[20];
	char 		c_mtch_accnt2[11];
	char 		c_spn_mrgn2[20];
  char 		c_nov2[20];
  char 		c_total_mrgn2[20];
	char    c_strk_prc[20];       /*** Ver 1.1 ***/
  char    c_xchng_cd1[4];       /*** Ver 1.3 ***/
  char    c_xchng_cd2[4];       /*** Ver 1.3 ***/

  double 	d_spn_mrgn1   = 0.0;
  double 	d_spn_mrgn2   = 0.0;
  double 	d_diff_mrgn   = 0.0;
  double 	d_balance_amt = 0.0;
  double 	d_nov1        = 0.0;
  double 	d_nov2        = 0.0;
  double 	d_nov         = 0.0;
  double 	d_expsr       = 0.0;
  double 	d_total_mrgn1 = 0.0;
  double 	d_total_mrgn2 = 0.0;
  double  d_total_mrgn = 0.0;
  double  d_spn_mrgn	 = 0.0;
	double  d_mltplr		 = 0.0;
  double  d_min_mrgn	 = 0.0;
  double  d_intl_mrgn  = 0.0;
  double  d_undrlyng_pl = 0.0;
  double  d_cntrct_pl   = 0.0;
  double  d_total_prmum = 0.0;
  double  d_blkd_prmum  = 0.0;
  double  d_opt_prmum   = 0.0;
  double  d_opt_sprmum   = 0.0; /*** Ver 2.9 ***/
  double  d_oblckd_amnt = 0.0;
  double  d_diff_pl     = 0.0;
  double  d_blckd_pnl   = 0.0;
  double  d_expsr_mrgn = 0.0;      /*** 21-Oct-2011 ***/
  double  d_min_expsr_mrgn  = 0.0; /*** 21-Oct-2011 ***/
  double  d_min_expsr = 0.0;       /*** 21-Oct-2011 ***/
	double  d_strike_prc = 0.0;    	 /*** Ver 1.1 ***/
  int     i_expsr_rtrn = 0;        /*** 21-Oct-2011 ***/
  char 	  c_narration_id[4];
  char    c_dr_without_lmt_flg;

	long		l_qty = 0;									/*** Ver 1.6 ***/
	double  d_tot_profit_loss = 0.0;		/*** Ver 1.6 ***/
  double  d_und_avail_mrgn = 0.0;		  /*** Ver 1.6 ***/
	double  d_profit_loss = 0.0; 			  /*** Ver 1.6 ***/
	double  d_clsng_prc = 0.0;					/*** Ver 1.6 ***/	
	
	char    c_dummy_flg = 'N';          /*** Ver 1.6 ***/
  int     i_flag    = 0;              /*** Ver 1.6 ***/
  int     j         = 0;              /*** Ver 1.6 ***/
  int     k         = 0;              /*** Ver 1.6 ***/
	long    l_fml_count =0;							/*** Ver 1.6 ***/

	double d_blkd_mrgn = 0.0;					  /*** Ver 2.7 ***/
	long    l_counter  = 0;							 /*** Ver 2.7 ***/
  char c_undrlyng[7]="\0";								/*** Ver 2.7 ***/
	struct st_cntrct                    /*** Ver 1.6 ***/
  {
    char c_prd_typ;
    char c_undrlyng[07];
    char c_expry_dt[12];
    long l_strike_prc;
    char c_opt_typ;
  };

  struct st_cntrct st_cntrt[3];         /*** Ver 1.6 ***/
  MEMSET(st_cntrt);

	/*** Ver 1.9 starts ***/
	MEMSET(st_usr_prof);
	MEMSET(st_undfus_pos_to_be);
	MEMSET(st_cntfcp_pos_crrnt);
	MEMSET(st_pstn_actn_var);
	/*** Ver 1.9 ends ***/

	MEMSET(st_cntfcp_pos_temp); /*** Ver 2.9 ***/

	MEMSET(c_ven_id); /*** Ver 2.7 ***/

  /** Following for error msg **/

  struct st_err_msg *ptr_st_err_msg;

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);
	
  i_err [ 0 ] = Fget32( ptr_fml_Ibuf ,FFO_USR_ID,0,(char *)st_usr_prof.c_user_id ,0);
  i_ferr[0] = Ferror32;
  i_err [ 1 ] = Fget32( ptr_fml_Ibuf ,FFO_SSSN_ID,0,(char *)&st_usr_prof.l_session_id ,0);
  i_ferr[1] = Ferror32;
  i_err [ 2 ] = Fget32( ptr_fml_Ibuf ,FFO_XCHNG_CD,0,(char *)c_xchng_cd,0);
  i_ferr[2] = Ferror32;
  i_err [ 3 ] = Fget32( ptr_fml_Ibuf ,FFO_EBA_MTCH_ACT_NO,0,(char *)st_cntfcp_pos_crrnt.c_cln_mtch_accnt,0);
  i_ferr[3] = Ferror32;
  i_err [ 4 ] = Fget32( ptr_fml_Ibuf ,FFO_ROUT_CRT,0,(char *)st_usr_prof.c_rout_crt,0);
  i_ferr[4] = Ferror32;
  i_err [ 5 ] = Fget32( ptr_fml_Ibuf ,FFO_C_OPNPSTN_FLW,0,(char *)&st_cntfcp_pos_crrnt.c_opnpstn_flw,0);
  i_ferr[5] = Ferror32;

  for(i=0;i<6;i++)
  {
    if(i_err[i] == -1 )
    {
      fn_userlog( c_ServiceName, " Error in field no %d", i);
      errlog(c_ServiceName, "S31005", Fstrerror32(i_ferr[i]),(char *)DEF_USR,DEF_SSSN, c_err_msg);
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
			/*** 	tpfree((char *)ptr_fml_Obuf); 	*** Commented in Ver VQC ***/
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
    }
  }

/** ver 3.1 start**/
	if(( strcmp ( st_usr_prof.c_user_id,"system" ) == 0 ) && ( st_usr_prof.l_session_id == 0 ))
	{
		strcpy(st_cntfcp_pos_crrnt.c_cln_mtch_accnt,"0000000000");
	}	
/** ver 3.1 end**/

	/***Ver 2.1 Starts ***/
	i_err[0]=Fget32(ptr_fml_Ibuf,FFO_RQST_TYP,0,(char *)&c_req_type,0);
	i_ferr [0] = Ferror32;

	if(DEBUG_MSG_LVL_3)  /*** Ver 2.7 ***/
	{
		fn_userlog( c_ServiceName, "Request Type :%c:",c_req_type);
	}

	if(DEBUG_MSG_LVL_3) /*** Ver 2.2 ***/
  {
		fn_userlog( c_ServiceName, "FFO_RQST_TYP : Val of  i_err after fget At Start :%d:", i_err[0] );
		fn_userlog( c_ServiceName, "FFO_RQST_TYP : Val of  i_ferr after fget At Start :%d:", i_ferr[0] );
	}
	
   if (( i_err[0] == -1 ) && ( i_ferr[0] != FNOTPRES ))
   {
     fn_userlog( c_ServiceName, "FFO_RQST_TYP : Val of  i_err after fget in error :%d:", i_err[0] );
     fn_userlog( c_ServiceName, "FFO_RQST_TYP: Val of  i_ferr after fget in error :%d:", i_ferr[0] );
   	 fn_errlog( c_ServiceName, "S31010", Fstrerror32(i_ferr[0]),c_err_msg);
   	 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
   else
   {
	 	if (i_err[0] != -1)  
    {
			if(DEBUG_MSG_LVL_1) /*** Ver 2.2 ***/
			{
	   		fn_userlog( c_ServiceName, "FFO_RQST_TYP : %c:", c_req_type);
			}
		}
   }
   /*** Ver 2.7 Starts ***/
   /*** strcpy(c_user_id,st_usr_prof.c_user_id); ***/

   if ( Fget32(ptr_fml_Ibuf,FFO_UPLD_MTCH_FLG,0,(char *)&c_api_src_flg, 0 ) == -1)
   {
     if ( Ferror32 != FNOTPRES )
     {
       fn_userlog( c_ServiceName, "FFO_RQST_TYP : Val of  i_err after fget in error :%d:", i_err[0] );
       fn_userlog( c_ServiceName, "FFO_RQST_TYP: Val of  i_ferr after fget in error :%d:", i_ferr[0] );
       fn_errlog( c_ServiceName, "S31015", Fstrerror32(i_ferr[0]),c_err_msg);
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
   }

	 if(DEBUG_MSG_LVL_3) 
	 {
			fn_userlog(c_ServiceName,"API Source Flag :%c:",c_api_src_flg);
	 }

   if (c_api_src_flg == 'A')
   {
     MEMSET(c_ven_id);

     if ( Fget32(ptr_fml_Ibuf,FFO_USER_CODE,0,(char *)c_ven_id.arr, 0) == -1 )
     {
       fn_userlog( c_ServiceName, "Val of  i_err after fget in error :%d:", i_err[0] );
       fn_userlog( c_ServiceName, "Val of  i_ferr after fget in error :%d:", i_ferr[0] );
       fn_errlog( c_ServiceName, "S31020", Fstrerror32(i_ferr[0]),c_err_msg);
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

     i_returncode = fn_chk_vendor( c_ServiceName,
                                   st_usr_prof.c_user_id,
                                   c_ven_id.arr,
                                   c_ven_nm,
                                   &st_err_msg_vw
                                 );

     if (i_returncode == -1 )
     {
        fn_errlog( c_ServiceName,"S31025","Error in function fn_chk_vendor", st_err_msg_vw.c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg_vw.c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

		 if(DEBUG_MSG_LVL_3) 
		 {
	     fn_userlog(c_ServiceName," Inside sfo_fut_prtfl Vendor Name:%s:",c_ven_nm);
		 }

	  if ( strcmp(c_ven_nm,"SENSIBULL") == 0 )
		{ 
			rtrim(st_usr_prof.c_user_id);
			rtrim(st_cntfcp_pos_crrnt.c_cln_mtch_accnt);

			if( st_usr_prof.c_user_id[0] == BPID )
			{
				fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst,Sensibull is disabled");
				fn_errlog( c_ServiceName, "B35018", "",c_err_msg);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			EXEC SQL
				SELECT  ICD_CUST_TYPE
				INTO    :sql_icd_cust_type
				FROM    ICD_INFO_CLIENT_DTLS,
								IAI_INFO_ACCOUNT_INFO
				WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
				AND     IAI_MATCH_ACCOUNT_NO  = :st_cntfcp_pos_crrnt.c_cln_mtch_accnt;

			if ( SQLCODE != 0 )
			{
				fn_errlog( c_ServiceName, "S31030",SQLMSG,c_err_msg);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			
			SETNULL(sql_icd_cust_type);

			if(strcmp(sql_icd_cust_type.arr,"NRI") == 0)
			{
				fn_userlog( c_ServiceName, "NRI Customer can not use SENSIBULL");
				fn_errlog( c_ServiceName, "S31035", "NRI Customer can not use SENSIBULL",c_err_msg);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}
	  else
    {
       fn_userlog( c_ServiceName, "Invalid Vendor" );
       fn_errlog( c_ServiceName, "S31040","InValid Vendor.",c_err_msg );
       strcpy( c_err_msg,"InValid Vendor.");
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	 }  
		
	 if(DEBUG_MSG_LVL_0)  
 	 {
   	fn_userlog(c_ServiceName, "Inputs:<%s><%c><%s><%s>" , st_cntfcp_pos_crrnt.c_cln_mtch_accnt,c_api_src_flg,c_ven_nm,c_ven_id.arr);
   }

	/*** Ver 2.7 ends ***/

   if(c_req_type == 'E' || c_req_type == 'V') /*** ver 2.8 req type V added **/
   {
		i_err[0]=Fget32(ptr_fml_Ibuf,FFO_LST_TRD_PRC,0,(char *)&l_lst_trd_prc,0);
		i_ferr [0] = Ferror32;
		
		if(DEBUG_MSG_LVL_3) /*** taken inside debug level in VQC ***/ /*** Ver 2.2 ***/
  	{
			fn_userlog( c_ServiceName, "FFO_LST_TRD_PRC : Val of  i_err after fget At Start :%d:", i_err[0] );
			fn_userlog( c_ServiceName, "FFO_LST_TRD_PRC : Val of  i_ferr after fget At Start :%d:", i_ferr[0] );
		}		
	
	   if (( i_err[0] == -1 ) && ( i_ferr[0] != FNOTPRES ))
	   {
		 fn_userlog( c_ServiceName, "FFO_LST_TRD_PRC : Val of  i_err after fget in error :%d:", i_err[0] );
		 fn_userlog( c_ServiceName, "FFO_LST_TRD_PRC: Val of  i_ferr after fget in error :%d:", i_ferr[0] );
		 fn_errlog( c_ServiceName, "S31045", Fstrerror32(i_ferr[0]),c_err_msg);
		 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	   }

		if(DEBUG_MSG_LVL_3) /*** Ver 2.2 ***/
		{
			fn_userlog( c_ServiceName, "~~~~~~~~~~~~l_lst_trd_prc : %ld: ~~~~~~~~~~~~~~", l_lst_trd_prc);
		}
   }

	
	/***Ver 2.1 Ends ***/

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog ( c_ServiceName, "Open Position Flow :%c:", st_cntfcp_pos_crrnt.c_opnpstn_flw);
	}
	strcpy(st_usr_prof.c_cln_mtch_accnt,st_cntfcp_pos_crrnt.c_cln_mtch_accnt);
	if(DEBUG_MSG_LVL_3)
  {
  	fn_userlog ( c_ServiceName, " Exchnge Code Is :%s:", c_xchng_cd);
	}

  /*** Ver 2.3 Starts Here ***/
  memcpy(&st_usr_prfl_vw,&st_usr_prof,sizeof(struct vw_usr_prfl));

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl_vw.c_rout_crt );

  i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl_vw,
                                             &st_err_msg_vw) ;

  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31050", LIBMSG, st_err_msg_vw.c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg_vw.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /*** Ver 2.3 Ends Here ***/
  /*** Commented in Ver 2.3
  *** Added for Order Routing ***
  fn_init_ddr_val ( st_usr_prof.c_rout_crt );
  i_ch_val = fn_chkspn_sssn ( c_ServiceName,
                              &st_usr_prof,
                              &st_er_msg) ;
  if ( i_ch_val == -1 )
  {
    fn_errlog( c_ServiceName, "S31055", LIBMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    *** tpfree((char *)ptr_fml_Obuf);   *** Commented in Ver VQC ***
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  Comment Ends for Ver 2.3*****/

  /*** Ver 2.7 starts ***/
  if (c_req_type =='S')
  {
		i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_UNDRLYNG,0,(char *)st_cntfcp_pos_crrnt.c_undrlyng,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
			fn_errlog( c_ServiceName, "S31060", FMLMSG, c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		strcpy(c_undrlyng,st_cntfcp_pos_crrnt.c_undrlyng);

		fn_rewind_rs ( ptr_fml_Ibuf ); 
		
		i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
		if ( i_trnsctn == -1 )
		{
			fn_errlog( c_ServiceName, "S31065", LIBMSG, c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		EXEC SQL
			DELETE FROM	FCP_FO_SPN_CNTRCT_PSTN_GBT;

		if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
		{
			fn_errlog ( c_ServiceName, "S31070", SQLMSG, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		} 

		EXEC SQL
			INSERT INTO FCP_FO_SPN_CNTRCT_PSTN_GBT(
			FCP_CLM_MTCH_ACCNT,
			FCP_XCHNG_CD,
			FCP_PRDCT_TYP,
			FCP_INDSTK,
			FCP_UNDRLYNG,
			FCP_EXPRY_DT,
			FCP_EXER_TYP ,
			FCP_STRK_PRC,
			FCP_OPT_TYP,
			FCP_IBUY_QTY,
			FCP_IBUY_ORD_VAL,
			FCP_ISELL_QTY,
			FCP_ISELL_ORD_VAL,
			FCP_EXBUY_QTY,
			FCP_EXBUY_ORD_VAL,
			FCP_EXSELL_QTY,
			FCP_EXSELL_ORD_VAL,
			FCP_BUY_EXCTD_QTY,
			FCP_SELL_EXCTD_QTY,
			FCP_OPNPSTN_FLW,
			FCP_OPNPSTN_QTY,
			FCP_OPNPSTN_VAL
			)
			( SELECT 
				FCP_CLM_MTCH_ACCNT,
				FCP_XCHNG_CD,
				FCP_PRDCT_TYP,
				FCP_INDSTK,
				FCP_UNDRLYNG,
				FCP_EXPRY_DT,
				FCP_EXER_TYP ,
				FCP_STRK_PRC,
				FCP_OPT_TYP,
				FCP_IBUY_QTY,
				FCP_IBUY_ORD_VAL,
				abs(FCP_ISELL_QTY),
				abs(FCP_ISELL_ORD_VAL), 
				FCP_EXBUY_QTY,
				FCP_EXBUY_ORD_VAL,
				abs(FCP_EXSELL_QTY),
				abs(FCP_EXSELL_ORD_VAL),
				FCP_BUY_EXCTD_QTY,
				abs(FCP_SELL_EXCTD_QTY),
				FCP_OPNPSTN_FLW,
				abs(FCP_OPNPSTN_QTY),
				abs(FCP_OPNPSTN_VAL)
				FROM   FCP_FO_SPN_CNTRCT_PSTN
				WHERE  FCP_CLM_MTCH_ACCNT  = :st_cntfcp_pos_crrnt.c_cln_mtch_accnt
				AND    FCP_UNDRLYNG        = :st_cntfcp_pos_crrnt.c_undrlyng
				AND    fcp_xchng_cd			   = :c_xchng_cd
				AND    (FCP_IBUY_QTY != 0 or FCP_ISELL_QTY != 0 or FCP_EXBUY_QTY !=0 or FCP_EXSELL_QTY !=0 or FCP_OPNPSTN_QTY != 0)
			);

		 if ( SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND)
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
				fn_errlog(c_ServiceName,"S31075",SQLMSG, c_err_msg);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );		
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
			}

			l_fml_count = Foccur32(ptr_fml_Ibuf ,FFO_UNDRLYNG);
	
			if(DEBUG_MSG_LVL_3)
			{	
				fn_userlog ( c_ServiceName, "Total num of records :%ld :", l_fml_count); 
			}

			d_opt_sprmum = 0.0; /*** Ver 3.4 ***/ 

			while ( 1 )
			{
			 d_expsr_mrgn     = 0.0 ; 
			 d_min_expsr_mrgn = 0.0 ; 
			 st_cntfcp_pos_crrnt.l_opnpstn_qty   = 0.0 ; 
			 d_profit_loss = 0; 

			 st_cntfcp_pos_crrnt.c_opnpstn_flw = '\0';
			 st_cntfcp_pos_crrnt.c_prd_typ = '\0';
			 st_cntfcp_pos_crrnt.c_exer_typ = '\0';
			 st_cntfcp_pos_crrnt.c_opt_typ = '\0';
			 st_cntfcp_pos_crrnt.l_strike_prc = 0;
			 st_cntfcp_pos_crrnt.c_ctgry_indstk = '\0';
			 st_cntfcp_pos_crrnt.l_ibuy_qty = 0;
			 st_cntfcp_pos_crrnt.l_isell_qty = 0;
			 d_ibuy_rate = 0.0; 				
			 d_isell_rate = 0.0; 				
			 d_opnpstn_rate = 0.0; 			
			 MEMSET(st_cntfcp_pos_crrnt.c_undrlyng);
			 MEMSET(st_cntfcp_pos_crrnt.c_expry_dt);
			 MEMSET(st_cntfcp_pos_temp); /*** Ver 2.9 ***/
			
			 i_ch_val = fn_getnxt_rs  ( 	ptr_fml_Ibuf,
																		c_ServiceName,
																		c_err_msg,
																		14,				
																		FFO_C_OPNPSTN_FLW,  (char *)&st_cntfcp_pos_crrnt.c_opnpstn_flw, NULL,
																		FFO_PRDCT_TYP,      (char *)&st_cntfcp_pos_crrnt.c_prd_typ, NULL,
																		FFO_UNDRLYNG,       (char *)st_cntfcp_pos_crrnt.c_undrlyng, NULL,
																		FFO_EXPRY_DT,       (char *)st_cntfcp_pos_crrnt.c_expry_dt, NULL,
																		FFO_EXER_TYP,       (char *)&st_cntfcp_pos_crrnt.c_exer_typ, NULL, 
																		FFO_OPT_TYP,        (char *)&st_cntfcp_pos_crrnt.c_opt_typ, NULL,
																		FFO_STRK_PRC,       (char *)&st_cntfcp_pos_crrnt.l_strike_prc, NULL,
																		FFO_CTGRY_INDSTK,   (char *)&st_cntfcp_pos_crrnt.c_ctgry_indstk, NULL,
																		FFO_CI_BUY_QTY,     (char *)&st_cntfcp_pos_crrnt.l_ibuy_qty, NULL,
																		FFO_CI_SELL_QTY,    (char *)&st_cntfcp_pos_crrnt.l_isell_qty, NULL,
																		FFO_CI_BUY_ORD_VL,  (char *)&d_ibuy_rate, NULL,
																		FFO_CI_SELL_ORD_VL, (char *)&d_isell_rate, NULL,
																		FFO_C_OPNPSTN_QTY,  (char *)&st_cntfcp_pos_crrnt.l_opnpstn_qty, NULL,
																		FFO_C_ORG_OPN_VAL,  (char *)&d_opnpstn_rate, NULL
																);

				 if ( l_counter == l_fml_count ) 
				 {
						if(DEBUG_MSG_LVL_3) 
						{
							fn_userlog( c_ServiceName, "NO DATA DOUND IN BUFFER");
						}
						break;
				 }
				 else if ( i_ch_val != 0 && i_ch_val != NO_DATA_FOUND )
				 {
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						fn_errlog( c_ServiceName, "S31080", LIBMSG,c_err_msg );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				 }

				if(DEBUG_MSG_LVL_5)
				{	
					fn_userlog ( c_ServiceName, "Input:%ld:%c:%s:%s:%c:%c:%ld,",l_counter,st_cntfcp_pos_crrnt.c_prd_typ,st_cntfcp_pos_crrnt.c_undrlyng,st_cntfcp_pos_crrnt.c_expry_dt,st_cntfcp_pos_crrnt.c_exer_typ,st_cntfcp_pos_crrnt.c_opt_typ,st_cntfcp_pos_crrnt.l_strike_prc); 
					fn_userlog ( c_ServiceName, "Input:%ld:%ld:%ld:%ld:%lf:%lf:%lf:%c:",l_counter,st_cntfcp_pos_crrnt.l_ibuy_qty,st_cntfcp_pos_crrnt.l_isell_qty,st_cntfcp_pos_crrnt.l_opnpstn_qty,d_ibuy_rate,d_isell_rate,d_opnpstn_rate,st_cntfcp_pos_crrnt.c_opnpstn_flw); 
				}

				 /*** Ver 2.9 starts ***/
				 EXEC SQL
					SELECT 
					NVL(FCP_BUY_EXCTD_QTY,0),
					NVL(FCP_SELL_EXCTD_QTY * -1,0),
					NVL(FCP_OPNPSTN_FLW,'N'),
	        NVL(decode(FCP_OPNPSTN_FLW,'S',FCP_OPNPSTN_QTY * -1 ,FCP_OPNPSTN_QTY ), 0), 
          NVL(decode(FCP_OPNPSTN_FLW,'S',FCP_OPNPSTN_VAL * -1 , FCP_OPNPSTN_VAL ),0)
					INTO
					:st_cntfcp_pos_temp.l_buy_exctd_qty,				 
					:st_cntfcp_pos_temp.l_sell_exctd_qty,
					:st_cntfcp_pos_temp.c_opnpstn_flw,				 
					:st_cntfcp_pos_temp.l_opnpstn_qty,				 
					:st_cntfcp_pos_temp.d_opnpstn_val				 
					FROM   FCP_FO_SPN_CNTRCT_PSTN_GBT
					WHERE
							FCP_CLM_MTCH_ACCNT = :st_usr_prof.c_cln_mtch_accnt
					AND FCP_XCHNG_CD = :c_xchng_cd
					AND FCP_PRDCT_TYP = :st_cntfcp_pos_crrnt.c_prd_typ
					AND FCP_UNDRLYNG = :st_cntfcp_pos_crrnt.c_undrlyng
				  AND FCP_EXPRY_DT = :st_cntfcp_pos_crrnt.c_expry_dt
					AND FCP_EXER_TYP = :st_cntfcp_pos_crrnt.c_exer_typ
					AND FCP_OPT_TYP = :st_cntfcp_pos_crrnt.c_opt_typ
					AND FCP_STRK_PRC = :st_cntfcp_pos_crrnt.l_strike_prc;
					
					if( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
          {
            fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            fn_errlog(c_ServiceName, "S31085", SQLMSG, c_err_msg);
            Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
            tpreturn(TPFAIL, ERR_BFR, (char *) ptr_fml_Ibuf, 0, 0);
          }
					if (SQLCODE == 0 )
					{
						/*** Ver 2.9 starts ***/
					  fn_userlog(c_ServiceName,"Inside Found...");	
					  l_prmum_qty = 0;

						if ( st_cntfcp_pos_crrnt.c_prd_typ ==  'O' &&  st_cntfcp_pos_crrnt.l_opnpstn_qty  > 0 ) /*** Basket qty ***/
   					{
               if( st_cntfcp_pos_temp.c_opnpstn_flw == 'S' ) /*** Existing position Flow ***/
      				 {
        					if(DEBUG_MSG_LVL_3)
        					{
         						fn_userlog(c_ServiceName,"Cal Premium SPAN  - Cover Order For Sell Open Position.");
        					}
        					l_prmum_qty = st_cntfcp_pos_temp.l_opnpstn_qty  + st_cntfcp_pos_crrnt.l_opnpstn_qty  ;

        					if ( l_prmum_qty > 0 )
        					{
          					d_opt_sprmum = d_opt_sprmum + ( (double)l_prmum_qty * (d_opnpstn_rate/st_cntfcp_pos_crrnt.l_opnpstn_qty)) ; /*** Basket rate ***/
        					}
      					}
      					else
      					{
        					d_opt_sprmum = d_opt_sprmum +  d_opnpstn_rate ; /*** Basket qty & value ***/
      					}
								fn_userlog(c_ServiceName,"l_prmum_qty=:%ld:,d_opnpstn_rate=:%lf:,st_cntfcp_pos_crrnt.l_opnpstn_qty=:%ld:,d_opt_sprmum=:%lf:",l_prmum_qty,d_opnpstn_rate,st_cntfcp_pos_crrnt.l_opnpstn_qty,d_opt_sprmum);
	 					}
						/*** Ver 2.9 ends ***/

						if (st_cntfcp_pos_crrnt.c_opnpstn_flw == 'B')
						{
							st_cntfcp_pos_crrnt.l_buy_exctd_qty = st_cntfcp_pos_crrnt.l_opnpstn_qty;
						}
						if ( st_cntfcp_pos_crrnt.c_opnpstn_flw == 'S' )
						{
							st_cntfcp_pos_crrnt.l_sell_exctd_qty = st_cntfcp_pos_crrnt.l_opnpstn_qty;
							st_cntfcp_pos_crrnt.l_opnpstn_qty = st_cntfcp_pos_crrnt.l_opnpstn_qty * -1;
							d_opnpstn_rate = d_opnpstn_rate * -1;
						}

						st_cntfcp_pos_crrnt.l_opnpstn_qty = st_cntfcp_pos_temp.l_opnpstn_qty + st_cntfcp_pos_crrnt.l_opnpstn_qty;
					  d_opnpstn_rate = st_cntfcp_pos_temp.d_opnpstn_val + d_opnpstn_rate ; 
           
						if (st_cntfcp_pos_crrnt.l_opnpstn_qty < 0 )
						{
						 st_cntfcp_pos_crrnt.c_opnpstn_flw = 'S';
						}
						else if (st_cntfcp_pos_crrnt.l_opnpstn_qty > 0 )
						{
							st_cntfcp_pos_crrnt.c_opnpstn_flw = 'B';
						}
						else
						{
							st_cntfcp_pos_crrnt.c_opnpstn_flw = 'N';
						}
  

					  EXEC SQL
						UPDATE FCP_FO_SPN_CNTRCT_PSTN_GBT
						SET 	
					  FCP_IBUY_QTY = FCP_IBUY_QTY + :st_cntfcp_pos_crrnt.l_ibuy_qty,
            FCP_IBUY_ORD_VAL = FCP_IBUY_ORD_VAL + :d_ibuy_rate,
            FCP_ISELL_QTY = FCP_ISELL_QTY + :st_cntfcp_pos_crrnt.l_isell_qty,
						FCP_ISELL_ORD_VAL = FCP_ISELL_ORD_VAL + :d_isell_rate,
            FCP_EXBUY_QTY = FCP_EXBUY_QTY + :st_cntfcp_pos_crrnt.l_ibuy_qty,
            FCP_EXBUY_ORD_VAL = FCP_EXBUY_ORD_VAL + :d_ibuy_rate,
            FCP_EXSELL_QTY = FCP_EXSELL_QTY + :st_cntfcp_pos_crrnt.l_isell_qty,
            FCP_EXSELL_ORD_VAL = FCP_EXSELL_ORD_VAL + :d_isell_rate,
            FCP_BUY_EXCTD_QTY = FCP_BUY_EXCTD_QTY + :st_cntfcp_pos_crrnt.l_buy_exctd_qty,
            FCP_SELL_EXCTD_QTY = FCP_SELL_EXCTD_QTY + :st_cntfcp_pos_crrnt.l_sell_exctd_qty,
            FCP_OPNPSTN_FLW = :st_cntfcp_pos_crrnt.c_opnpstn_flw,
            FCP_OPNPSTN_QTY = abs(:st_cntfcp_pos_crrnt.l_opnpstn_qty),
            FCP_OPNPSTN_VAL = abs(:d_opnpstn_rate)
						WHERE
            FCP_CLM_MTCH_ACCNT = :st_usr_prof.c_cln_mtch_accnt
            AND FCP_XCHNG_CD = :c_xchng_cd
            AND FCP_PRDCT_TYP = :st_cntfcp_pos_crrnt.c_prd_typ
            AND FCP_UNDRLYNG = :st_cntfcp_pos_crrnt.c_undrlyng
            AND FCP_EXPRY_DT = :st_cntfcp_pos_crrnt.c_expry_dt
            AND FCP_EXER_TYP = :st_cntfcp_pos_crrnt.c_exer_typ
            AND FCP_OPT_TYP = :st_cntfcp_pos_crrnt.c_opt_typ
            AND FCP_STRK_PRC = :st_cntfcp_pos_crrnt.l_strike_prc ;	
					}
					else 
				  { 
	
				 /*** Ver 2.9 ends ***/
		
					EXEC SQL
					INSERT INTO FCP_FO_SPN_CNTRCT_PSTN_GBT
				  (
						FCP_CLM_MTCH_ACCNT,
						FCP_XCHNG_CD,
						FCP_PRDCT_TYP,
						FCP_INDSTK,
						FCP_UNDRLYNG,
						FCP_EXPRY_DT,
						FCP_EXER_TYP,
						FCP_OPT_TYP,
						FCP_STRK_PRC,
						FCP_IBUY_QTY,
						FCP_IBUY_ORD_VAL,
						FCP_ISELL_QTY,
						FCP_ISELL_ORD_VAL,
						FCP_EXBUY_QTY,
						FCP_EXBUY_ORD_VAL,
						FCP_EXSELL_QTY,
						FCP_EXSELL_ORD_VAL,
						FCP_BUY_EXCTD_QTY,
						FCP_SELL_EXCTD_QTY,
						FCP_OPNPSTN_FLW,
						FCP_OPNPSTN_QTY,
						FCP_OPNPSTN_VAL
					)
					VALUES
					(
						:st_usr_prof.c_cln_mtch_accnt,
						:c_xchng_cd,
						:st_cntfcp_pos_crrnt.c_prd_typ,
						:st_cntfcp_pos_crrnt.c_ctgry_indstk,
						:st_cntfcp_pos_crrnt.c_undrlyng,
						to_date(:st_cntfcp_pos_crrnt.c_expry_dt,'DD-Mon-YYYY'),
						:st_cntfcp_pos_crrnt.c_exer_typ,
						:st_cntfcp_pos_crrnt.c_opt_typ,
						:st_cntfcp_pos_crrnt.l_strike_prc,
						:st_cntfcp_pos_crrnt.l_ibuy_qty,
						:d_ibuy_rate,
						:st_cntfcp_pos_crrnt.l_isell_qty,
						:d_isell_rate,
						:st_cntfcp_pos_crrnt.l_exbuy_qty,
						:st_cntfcp_pos_crrnt.d_exbuy_ord_val,
						:st_cntfcp_pos_crrnt.l_exsell_qty,
						:st_cntfcp_pos_crrnt.d_exsell_ord_val,
						:st_cntfcp_pos_crrnt.l_buy_exctd_qty,
						:st_cntfcp_pos_crrnt.l_sell_exctd_qty,
						:st_cntfcp_pos_crrnt.c_opnpstn_flw,
						:st_cntfcp_pos_crrnt.l_opnpstn_qty,
						:d_opnpstn_rate 
					);

					 if ( st_cntfcp_pos_crrnt.c_prd_typ ==  'O' && st_cntfcp_pos_crrnt.c_opnpstn_flw == 'B' &&  st_cntfcp_pos_crrnt.l_opnpstn_qty  > 0 ) /*** Basket qty Ver 2.9 ***/
					 {
					 	d_opt_sprmum = d_opt_sprmum + d_opnpstn_rate ; /*** Basket qty & rate Ver 2.9 ***/ 
					
					if(DEBUG_MSG_LVL_4) /*** Debug level added in Ver 3.4 ***/
					{	
					fn_userlog(c_ServiceName,"Not found d_opnpstn_rate=:%lf:,st_cntfcp_pos_crrnt.l_opnpstn_qty=:%ld:,d_opt_sprmum=:%lf:",d_opnpstn_rate,st_cntfcp_pos_crrnt.l_opnpstn_qty,d_opt_sprmum); /*** Ver 2.9 ***/
					}
					}
				 } /*** Ver 2.9 ***/	
					if( SQLCODE != 0 )
					{
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					  fn_errlog(c_ServiceName, "S31090", SQLMSG, c_err_msg);
					  Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
					  tpreturn(TPFAIL, ERR_BFR, (char *) ptr_fml_Ibuf, 0, 0);
					}
					l_counter++;
			}

			l_prmum_qty = 0; /*** Ver 2.9 ***/

			/*** Ver 2.9 starts ****************
			if ( Fadd32( ptr_fml_Obuf, FFO_EFF_LMT_RT, ( char *)&d_opt_sprmum, 0 ) == -1 )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog(c_ServiceName, "S31095", FMLMSG, c_err_msg);
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
        tpreturn(TPFAIL, ERR_BFR, (char *) ptr_fml_Ibuf, 0, 0);
      }
			d_opt_sprmum = 0.0;
      ****************** Ver 2.9 ends ***/


			EXEC SQL
				DECLARE sql_fcp_cur CURSOR FOR
				SELECT 		
						fcp_clm_mtch_accnt,
						fcp_xchng_cd,
						fcp_prdct_typ,
						fcp_indstk,
						fcp_undrlyng,
						fcp_expry_dt,
						fcp_exer_typ,
						fcp_opt_typ,
						fcp_strk_prc,
						sum(fcp_ibuy_qty),
						DECODE(sum(fcp_ibuy_qty),0,0,sum(fcp_ibuy_ord_val)/sum(fcp_ibuy_qty)),
						sum(fcp_isell_qty),
						DECODE(sum(fcp_isell_qty),0,0,sum(fcp_isell_ord_val)/sum(fcp_isell_qty)),
						sum(fcp_exbuy_qty),
						DECODE(sum(fcp_exbuy_qty),0,0,sum(fcp_exbuy_ord_val)/sum(fcp_exbuy_qty)),
						sum(fcp_exsell_qty),
						DECODE(sum(fcp_exsell_qty),0,0,sum(fcp_exsell_ord_val)/sum(fcp_exsell_qty)),
						sum(fcp_buy_exctd_qty),
						sum(fcp_sell_exctd_qty),
						fcp_opnpstn_flw,
						sum(fcp_opnpstn_qty),
						DECODE(sum(fcp_opnpstn_qty),0,0,sum(fcp_opnpstn_val)/sum(fcp_opnpstn_qty))
				from FCP_FO_SPN_CNTRCT_PSTN_GBT
				group by fcp_clm_mtch_accnt,fcp_xchng_cd,
						fcp_prdct_typ,
						fcp_indstk,
						fcp_undrlyng,
						fcp_expry_dt,
						fcp_exer_typ,
						fcp_opt_typ,
						fcp_strk_prc,
						fcp_opnpstn_flw;
			
			 EXEC SQL
				 OPEN sql_fcp_cur;

			if( SQLCODE != 0 )
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			  fn_errlog(c_ServiceName, "S31100", SQLMSG, c_err_msg);
			  Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
			  tpreturn(TPFAIL, ERR_BFR, (char *) ptr_fml_Ibuf, 0, 0);
			}
  }
  /*** Ver 2.7 ends ***/

  fn_rewind_rs ( ptr_fml_Ibuf ); 


  EXEC  SQL
  SELECT  SPN_PRTFL1_SEQ.nextval
  INTO    :l_prtfl_seq1
  FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
		fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
	  if (c_req_type =='S') /*** Ver 2.7 ***/
  	{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			EXEC SQL CLOSE sql_fcp_cur;
    }
    fn_errlog(c_ServiceName,"S31105",SQLMSG, c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );		/*** Added in Ver VQC ***/
		/***	tpfree((char *)ptr_fml_Obuf);	
    tpreturn(TPFAIL, ERR_BFR, (char *)c_err_msg, 0, 0 );		*** Commented in Ver VQC ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	/*** Added in Ver VQC ***/	
  }

  EXEC  SQL
  SELECT  SPN_PRTFL1_SEQ.nextval
  INTO    :l_prtfl_seq2
  FROM    DUAL;
  if ( SQLCODE  !=  0 )
  {
    if (c_req_type =='S') /*** Ver 2.7 ***/
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      EXEC SQL CLOSE sql_fcp_cur;
    }
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31110",SQLMSG, c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );	 	/*** Added in Ver VQC ***/ 
		/***	tpfree((char *)ptr_fml_Obuf);	
    tpreturn(TPFAIL, ERR_BFR, (char *)c_err_msg, 0, 0 );	*** Commented in Ver VQC ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); /*** Added in Ver VQC ***/
  }

	/*** Ver 1.1 starts here ***/
	MEMSET(c_inp_strng);
	MEMSET(c_inp_strng1);
	MEMSET(c_inp_strng2);
	MEMSET(c_inp_strng11);
	MEMSET(c_inp_strng22);
	/*** Ver 1.1 Ends here ***/

  strcpy(c_inp_strng1,"1^");
  strcpy(c_inp_strng2,"|");

  /**** Ver 1.3 Starts Here *****/

					if( strcmp(c_xchng_cd,"NFO") == 0 )
					{
					 strcat( c_inp_strng1 ,"NSE^");
					}
					else
					{
					 strcat( c_inp_strng1 ,"BSE^");
					}
					/**** Ver 1.3 Ends Here ******/ 

					sprintf(c_seq_num1,"%ld",l_prtfl_seq1);
					sprintf(c_seq_num2,"%ld",l_prtfl_seq2);

					strcat( c_inp_strng1 , c_seq_num1 );
					strcat( c_inp_strng2 , c_seq_num2 );

					strcat(c_inp_strng1,"^");
					strcat(c_inp_strng2,"^");

					st_undfus_pos_to_be.l_uibuy_qty = 0;
					st_undfus_pos_to_be.d_uibuy_val = 0;
					st_undfus_pos_to_be.l_uisell_qty = 0;
					st_undfus_pos_to_be.d_uisell_val = 0;
					st_undfus_pos_to_be.l_uexbuy_qty = 0;
					st_undfus_pos_to_be.d_uexbuy_val = 0;
					st_undfus_pos_to_be.l_uexsell_qty = 0;
					st_undfus_pos_to_be.d_uexsell_val = 0;
					st_undfus_pos_to_be.l_uopnpstn_qty = 0;
					st_undfus_pos_to_be.d_uopnpstn_val = 0;
					st_undfus_pos_to_be.l_ubuy_exctd_qty= 0; /*** Ver 3.2 ***/
					st_undfus_pos_to_be.l_usell_exctd_qty= 0; /*** Ver 3.2 ***/


					/*** 21-Oct-2011 ***/

/** ver 3.1  **/

				if(( strcmp ( st_usr_prof.c_user_id,"system" ) == 0 ) && ( st_usr_prof.l_session_id == 0 ) )
				{
					l_basket_id = 1;
				}
				else
				{	
					EXEC SQL
					 SELECT  FCB_UNDRLYNG_BSKT_ID
					 INTO    :l_basket_id
					 FROM    FCB_FO_CLN_BSKT_ALLTD
					 WHERE   FCB_CLN_LVL = (   SELECT  CLM_CLNT_LVL
																		 FROM    CLM_CLNT_MSTR
																		 WHERE   CLM_MTCH_ACCNT = :st_cntfcp_pos_crrnt.c_cln_mtch_accnt);
					if ( SQLCODE != 0 )
					{
    				if (c_req_type =='S') /*** Ver 2.7 ***/
    				{
      				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      				EXEC SQL CLOSE sql_fcp_cur;
    				}
						fn_errlog ( c_ServiceName, "S31115", SQLMSG, c_err_msg );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						/***	Commented In VQC
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
						tpfree((char *)ptr_fml_Obuf);
						***/
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					}
				}
					/*** 21-Oct-2011 ***/

					l_fml_count = Foccur32(ptr_fml_Ibuf ,FFO_UNDRLYNG); /*** Ver 1.6 ***/
					
					if(DEBUG_MSG_LVL_3) /*** taken inside debug level in VQC ***/  /*** Ver 2.2 ***/
					{	
						fn_userlog ( c_ServiceName, "Total num of records :%ld :", l_fml_count); /*** Ver 1.6 ***/
					}

					while ( 1 )
					{

					 d_expsr_mrgn     = 0.0 ; /*** Ver 1.2 ***/ 
					 d_min_expsr_mrgn = 0.0 ; /*** Ver 1.2 ***/ 
					 st_cntfcp_pos_crrnt.l_opnpstn_qty   = 0.0 ; /*** Ver 1.6 ***/ 
					 d_profit_loss = 0;  /*** Ver 1.6 ***/ 

					 /*** Ver 1.9 starts ***/
					 st_cntfcp_pos_crrnt.c_opnpstn_flw = '\0';
					 st_cntfcp_pos_crrnt.c_prd_typ = '\0';
					 st_cntfcp_pos_crrnt.c_exer_typ = '\0';
					 st_cntfcp_pos_crrnt.c_opt_typ = '\0';
					 st_cntfcp_pos_crrnt.l_strike_prc = 0;
					 st_cntfcp_pos_crrnt.c_ctgry_indstk = '\0';
					 st_cntfcp_pos_crrnt.l_ibuy_qty = 0;
					 st_cntfcp_pos_crrnt.l_isell_qty = 0;
					 d_ibuy_rate = 0.0; 				
					 d_isell_rate = 0.0; 				
					 d_opnpstn_rate = 0.0; 			
					 MEMSET(st_cntfcp_pos_crrnt.c_undrlyng);
					 MEMSET(st_cntfcp_pos_crrnt.c_expry_dt);
					 /*** Ver 1.9 ends ***/

					 if (c_req_type == 'S') /*** If loop added in Ver 2.7 ***/
					 {
  					   EXEC SQL
						  FETCH sql_fcp_cur
								INTO 	
								:st_cntfcp_pos_crrnt.c_cln_mtch_accnt,
								:st_cntfcp_pos_crrnt.c_xchng_cd,
								:st_cntfcp_pos_crrnt.c_prd_typ,
								:st_cntfcp_pos_crrnt.c_ctgry_indstk,
								:st_cntfcp_pos_crrnt.c_undrlyng,
								:st_cntfcp_pos_crrnt.c_expry_dt,
								:st_cntfcp_pos_crrnt.c_exer_typ, 
 							  :st_cntfcp_pos_crrnt.c_opt_typ,
								:st_cntfcp_pos_crrnt.l_strike_prc,
								:st_cntfcp_pos_crrnt.l_ibuy_qty,
								:d_ibuy_rate,
								:st_cntfcp_pos_crrnt.l_isell_qty,
								:d_isell_rate,
								:st_cntfcp_pos_crrnt.l_exbuy_qty,
								:st_cntfcp_pos_crrnt.d_exbuy_ord_val,
								:st_cntfcp_pos_crrnt.l_exsell_qty,
								:st_cntfcp_pos_crrnt.d_exsell_ord_val,
								:st_cntfcp_pos_crrnt.l_buy_exctd_qty,
								:st_cntfcp_pos_crrnt.l_sell_exctd_qty,
 								:st_cntfcp_pos_crrnt.c_opnpstn_flw,
								:st_cntfcp_pos_crrnt.l_opnpstn_qty,
								:d_opnpstn_rate;

						if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
						{
							EXEC SQL CLOSE sql_fcp_cur;
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							fn_errlog( c_ServiceName, "S31120", SQLMSG,c_err_msg );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );					
						}

						if( SQLCODE == NO_DATA_FOUND )
						{
								EXEC SQL CLOSE sql_fcp_cur;
                if (fn_committran(c_ServiceName, i_trnsctn, c_err_msg) == -1)
                {
        					fn_errlog(c_ServiceName, "S31125", LIBMSG, c_err_msg);
        					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
        					fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
        					tpreturn(TPFAIL, ERR_BFR, (char *) ptr_fml_Ibuf, 0, 0);
      					}
						  break;
						}
				
					  if(DEBUG_MSG_LVL_4) 
					  {
							fn_userlog(c_ServiceName,"Sensibull d_ibuy_rate:%lf:d_isell_rate:%lf:",d_ibuy_rate,d_isell_rate);
						}
					 }
					 else
					 {		/*** Ver 2.7 ends ***/
					 i_ch_val = fn_getnxt_rs  ( 	ptr_fml_Ibuf,
																				c_ServiceName,
																				c_err_msg,
																				16,				/** Ver 1.6 size increased from 14 to 15  **/ /*** Ver 1.7 changed from 15 to 14 ***//*** Changed from 14 to 16 in Ver 3.2 ***/
																				FFO_C_OPNPSTN_FLW,  (char *)&st_cntfcp_pos_crrnt.c_opnpstn_flw, NULL,
																				FFO_PRDCT_TYP,      (char *)&st_cntfcp_pos_crrnt.c_prd_typ, NULL,
																				FFO_UNDRLYNG,       (char *)st_cntfcp_pos_crrnt.c_undrlyng, NULL,
																				FFO_EXPRY_DT,       (char *)st_cntfcp_pos_crrnt.c_expry_dt, NULL,
																				FFO_EXER_TYP,       (char *)&st_cntfcp_pos_crrnt.c_exer_typ, NULL, 
																				FFO_OPT_TYP,        (char *)&st_cntfcp_pos_crrnt.c_opt_typ, NULL,
																				FFO_STRK_PRC,       (char *)&st_cntfcp_pos_crrnt.l_strike_prc, NULL,
																				FFO_CTGRY_INDSTK,   (char *)&st_cntfcp_pos_crrnt.c_ctgry_indstk, NULL,
																				FFO_CI_BUY_QTY,     (char *)&st_cntfcp_pos_crrnt.l_ibuy_qty, NULL,
																				FFO_CI_SELL_QTY,    (char *)&st_cntfcp_pos_crrnt.l_isell_qty, NULL,
																				FFO_CI_BUY_ORD_VL,  (char *)&d_ibuy_rate, NULL,
																				FFO_CI_SELL_ORD_VL, (char *)&d_isell_rate, NULL,
																				FFO_CBUY_EXCTD_QTY, (char *)&st_cntfcp_pos_crrnt.l_buy_exctd_qty, NULL, /*** Ver 3.2 ***/
																				FFO_CSELL_EXCTD_QTY,(char *)&st_cntfcp_pos_crrnt.l_sell_exctd_qty, NULL, /*** Ver 3.2 ***/
																				FFO_C_OPNPSTN_QTY,  (char *)&st_cntfcp_pos_crrnt.l_opnpstn_qty, NULL,
																				FFO_C_ORG_OPN_VAL,  (char *)&d_opnpstn_rate, NULL
																				/*** FFO_SPL_FLG,         &c_dummy_flg, NULL       ** Ver 1.6 FML added ** Commented in Ver 1.7 ***/
																		);

					 /*** if ( i_ch_val == NO_DATA_FOUND ) *** Commented in Ver 1.6 ***/
					 if ( l_cntr == l_fml_count ) /*** Ver 1.6 ***/	
					 {
							if(DEBUG_MSG_LVL_3)  /*** Ver 2.2 ***/
							{
								fn_userlog( c_ServiceName, "NO DATA DOUND IN BUFFER");
							}
							break;
					 }
					 else if ( i_ch_val != 0 && i_ch_val != NO_DATA_FOUND ) /*** NO_DATA_FOUND condition added in Ver 1.6 ***/
					 {
							fn_errlog( c_ServiceName, "S31130", LIBMSG,c_err_msg );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							/***	Commented In VQC
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
							tpfree((char *)ptr_fml_Obuf);
							***/
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
					 }
					 } /*** Ver 2.7 ends ***/	
						/*** Ver 2.4 Starts ***/
					
						
					 if(c_req_type == 'E' || c_req_type == 'V') /*** ver 2.8 req type V added **/
					 {

						 if(l_lst_trd_prc <= 0)
						 {
							EXEC  SQL
							 SELECT NVL(FTQ_LST_TRD_PRC,0)
							 INTO   :l_lst_trd_prc
							 FROM   FTQ_FO_TRD_QT
							 WHERE  FTQ_XCHNG_CD  =  :c_xchng_cd 
			         AND    FTQ_UNDRLYNG  = :st_cntfcp_pos_crrnt.c_undrlyng
			         AND    FTQ_PRDCT_TYP = :st_cntfcp_pos_crrnt.c_prd_typ
		           AND    FTQ_EXPRY_DT  = :st_cntfcp_pos_crrnt.c_expry_dt
			         AND    FTQ_EXER_TYP  = :st_cntfcp_pos_crrnt.c_exer_typ
			         AND    FTQ_OPT_TYP   = :st_cntfcp_pos_crrnt.c_opt_typ
			         AND    FTQ_STRK_PRC  = :st_cntfcp_pos_crrnt.l_strike_prc ;

							 if ( SQLCODE != 0 )
							 {
                fn_errlog ( c_ServiceName, "S31135", SQLMSG, c_err_msg );
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 ); 
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
               }
			
             }
							d_ibuy_rate = d_isell_rate = l_lst_trd_prc ;			
	
							if(DEBUG_MSG_LVL_3)
							{		       
						   fn_userlog ( c_ServiceName, "Last traded Price : %ld :" , l_lst_trd_prc );
							 fn_userlog (c_ServiceName, " Buy Order Val  : %lf : " , d_ibuy_rate);
 				       fn_userlog ( c_ServiceName, " Sell Order Val  : %lf : " , d_isell_rate); 
							}
           }
			
   
    /*** Ver 2.4 Ends ***/
	

	 /*** Ver 1.7 start ***/
	 i_returncode  = Fget32(ptr_fml_Ibuf ,FFO_SPL_FLG,i_cntrct_cnt,(char *)&c_dummy_flg ,0 );
	 if(i_returncode == -1 )
	 {
		if(Ferror32 == FNOTPRES )
		{
		 if(DEBUG_MSG_LVL_2)  /*** Ver 2.2 ***/
		 {
				fn_userlog( c_ServiceName, "Inside FNOTPRES");
		 }
		}
		else
		{
			fn_errlog( c_ServiceName, "S31140", LIBMSG,c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			/***  Commented In VQC
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);	
			***/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	 }
	 /*** Ver 1.7 ends ***/

	 i_cntrct_cnt++;	    /*** Ver 1.1 ***/

	 if(DEBUG_MSG_LVL_3)  /*** Ver 2.2 ***/
   {
   	fn_userlog ( c_ServiceName, "Expiry date       :%s :", st_cntfcp_pos_crrnt.c_expry_dt);
   	fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntfcp_pos_crrnt.l_ibuy_qty );
   	fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntfcp_pos_crrnt.d_ibuy_ord_val);
   	fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntfcp_pos_crrnt.l_isell_qty );
   	fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntfcp_pos_crrnt.d_isell_ord_val);
   	fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntfcp_pos_crrnt.l_exbuy_qty );
   	fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntfcp_pos_crrnt.d_exbuy_ord_val);
   	fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntfcp_pos_crrnt.l_exsell_qty );
   	fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", st_cntfcp_pos_crrnt.d_exsell_ord_val );
   	fn_userlog ( c_ServiceName, "BUY EXCD QTY      :%ld:", st_cntfcp_pos_crrnt.l_buy_exctd_qty); /*** Ver 3.2 ***/
   	fn_userlog ( c_ServiceName, "SELL EXCD QTY     :%ld:", st_cntfcp_pos_crrnt.l_sell_exctd_qty); /*** Ver 3.2 ***/
	 	fn_userlog ( c_ServiceName, "Product Type is   :%c: ", st_cntfcp_pos_crrnt.c_prd_typ );
   	fn_userlog ( c_ServiceName, "Underlying is     :%s: ", st_cntfcp_pos_crrnt.c_undrlyng );
   	fn_userlog ( c_ServiceName, "Option Type is    :%c: ", st_cntfcp_pos_crrnt.c_opt_typ);
   	fn_userlog ( c_ServiceName, "Strike Price is   :%ld:", st_cntfcp_pos_crrnt.l_strike_prc);
	 	fn_userlog ( c_ServiceName, "Exercie Type is   :%c: ", st_cntfcp_pos_crrnt.c_exer_typ );
   	fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntfcp_pos_crrnt.l_opnpstn_qty );
   	fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntfcp_pos_crrnt.d_opnpstn_val);
   	fn_userlog ( c_ServiceName, "Open Position Flow :%c:", st_cntfcp_pos_crrnt.c_opnpstn_flw);
		fn_userlog ( c_ServiceName,"Special flag is     :%c:",c_dummy_flg);       				/*** Ver 1.6 **/
	 }
		
	 /*** Ver 1.6 starts :Validations added for dummy record   ***/

    if( c_dummy_flg == 'D' )
    {
			if(DEBUG_MSG_LVL_2) /*** taken inside debug level in VQC ***/   /*** Ver 2.2 ***/
			{
      	fn_userlog ( c_ServiceName,"Special flag is :%c:",c_dummy_flg);
			}
      st_cntrt[j].c_prd_typ = st_cntfcp_pos_crrnt.c_prd_typ;
      strcpy( st_cntrt[j].c_undrlyng , st_cntfcp_pos_crrnt.c_undrlyng );
      strcpy( st_cntrt[j].c_expry_dt , st_cntfcp_pos_crrnt.c_expry_dt );
      st_cntrt[j].l_strike_prc = st_cntfcp_pos_crrnt.l_strike_prc;
      st_cntrt[j].c_opt_typ = st_cntfcp_pos_crrnt.c_opt_typ;

      EXEC SQL
         SELECT  1
         INTO    :i_flag
         FROM   FCP_FO_SPN_CNTRCT_PSTN
         WHERE  FCP_CLM_MTCH_ACCNT  = :st_cntfcp_pos_crrnt.c_cln_mtch_accnt
         AND    FCP_PRDCT_TYP       = :st_cntfcp_pos_crrnt.c_prd_typ
         AND    FCP_EXPRY_DT        = :st_cntfcp_pos_crrnt.c_expry_dt
         AND    FCP_UNDRLYNG        = :st_cntfcp_pos_crrnt.c_undrlyng
         AND    FCP_OPT_TYP         = :st_cntfcp_pos_crrnt.c_opt_typ
         AND    FCP_STRK_PRC        = :st_cntfcp_pos_crrnt.l_strike_prc
         AND    ( FCP_IBUY_QTY      != 0 or FCP_ISELL_QTY != 0 or FCP_EXBUY_QTY != 0 or FCP_EXSELL_QTY != 0 or
FCP_OPNPSTN_QTY != 0 );

      if(SQLCODE  !=  0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          if(DEBUG_MSG_LVL_5)
          {
           fn_userlog ( c_ServiceName, " No dummy record ");
          }
        }

        else
        {
          fn_errlog ( c_ServiceName, "S31145", SQLMSG, c_err_msg );
          /***	tpfree((char *)ptr_fml_Obuf);		*** Commented in Ver VQC ***/
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );	/*** Ver 1.9 ***/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	 /*** Ver 1.9 changed from ptr_st_err_msg to ptr_fml_Ibuf ***/
        }
      }

      if(i_flag == 1)
      {
        fn_errlog ( c_ServiceName, "S31150", "Duplicate Contract", c_err_msg );
        fn_userlog ( c_ServiceName, "Duplicate Contract");
        sprintf(c_err_msg, "Duplicate Contract:%s",st_cntfcp_pos_crrnt.c_undrlyng);
        /***		tpfree((char *)ptr_fml_Obuf);	*** Commented in Ver VQC ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn( TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0 );
      }

      for( k=0 ; k<j ; k++ )
      {

       if( st_cntrt[j].c_prd_typ == st_cntrt[k].c_prd_typ && strcmp(st_cntrt[j].c_undrlyng , st_cntrt[k].c_undrlyng) == 0 && strcmp( st_cntrt[j].c_expry_dt,st_cntrt[k].c_expry_dt) == 0 && st_cntrt[j].c_opt_typ == st_cntrt[k].c_opt_typ && st_cntrt[j].l_strike_prc == st_cntrt[k].l_strike_prc  )

       {
        fn_errlog ( c_ServiceName, "S31155", "Duplicate Contract", c_err_msg );
        fn_userlog ( c_ServiceName, "Duplicate Contract");
        sprintf(c_err_msg, "Duplicate Contract:%s",st_cntrt[j].c_undrlyng);
        /***		tpfree((char *)ptr_fml_Obuf);		*** Commented in Ver VQC ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn( TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0 );
       }

      }

      j++;

     }

  /*** Ver 1.6 ends ***/

	 st_cntfcp_pos_crrnt.d_ibuy_ord_val   = st_cntfcp_pos_crrnt.l_ibuy_qty * d_ibuy_rate;
   st_cntfcp_pos_crrnt.l_isell_qty      = st_cntfcp_pos_crrnt.l_isell_qty * (-1);
   st_cntfcp_pos_crrnt.d_isell_ord_val  = st_cntfcp_pos_crrnt.l_isell_qty * d_isell_rate;
   st_cntfcp_pos_crrnt.d_opnpstn_val    = st_cntfcp_pos_crrnt.l_opnpstn_qty * d_opnpstn_rate;
   strcpy(st_cntfcp_pos_crrnt.c_xchng_cd,c_xchng_cd);

	 if(DEBUG_MSG_LVL_3)
   {
		 fn_userlog ( c_ServiceName, "Getting LTP :: ");
	 	 fn_userlog ( c_ServiceName, "--- st_cntfcp_pos_crrnt.c_xchng_cd Is :%s: ",st_cntfcp_pos_crrnt.c_xchng_cd);
	 }
		if(DEBUG_MSG_LVL_3) /*** taken inside debug level in VQC ***/  /*** Ver 2.2 ***/
		{
				fn_userlog ( c_ServiceName, " Exchnge Code Is :%s:", st_cntfcp_pos_crrnt.c_xchng_cd);
				fn_userlog ( c_ServiceName, " c_prd_typ Is :%c:", st_cntfcp_pos_crrnt.c_prd_typ);
				fn_userlog ( c_ServiceName, " c_undrlyng Is :%s:", st_cntfcp_pos_crrnt.c_undrlyng);
				fn_userlog ( c_ServiceName, "Expiry date       :%s :", st_cntfcp_pos_crrnt.c_expry_dt);
				fn_userlog ( c_ServiceName, "Exercie Type is   :%c: ", st_cntfcp_pos_crrnt.c_exer_typ);
				fn_userlog ( c_ServiceName, "Option Type is    :%c: ", st_cntfcp_pos_crrnt.c_opt_typ);
				fn_userlog ( c_ServiceName, "Strike Price is   :%ld:", st_cntfcp_pos_crrnt.l_strike_prc);
		}

   EXEC SQL
    SELECT  NVL(FTQ_LST_TRD_PRC,0),			/*** NVL added in Ver 1.1 ***/
						nvl(FTQ_CLS_PRC,0)					/*** Ver 1.6 ***/
    INTO    :d_ltp,
						:d_clsng_prc								/*** Ver 1.6 ***/
    FROM    FTQ_FO_TRD_QT
    WHERE   FTQ_XCHNG_CD  = :st_cntfcp_pos_crrnt.c_xchng_cd 
		AND     FTQ_PRDCT_TYP = :st_cntfcp_pos_crrnt.c_prd_typ
    AND     FTQ_UNDRLYNG  = :st_cntfcp_pos_crrnt.c_undrlyng
    AND     FTQ_EXPRY_DT  = :st_cntfcp_pos_crrnt.c_expry_dt
    AND     FTQ_EXER_TYP  = :st_cntfcp_pos_crrnt.c_exer_typ
    AND     FTQ_OPT_TYP   = :st_cntfcp_pos_crrnt.c_opt_typ
    /*** AND     FTQ_STRK_PRC  = :st_cntfcp_pos_crrnt.l_strike_prc * 100 ; Commented In Ver 1.1 ***/ 
    AND     FTQ_STRK_PRC  = :st_cntfcp_pos_crrnt.l_strike_prc ;  
																			/*** Ver 1.1 -- Strike Price Passed in Paise**/  

   if(SQLCODE  !=  0 )
   {
     if ( SQLCODE == NO_DATA_FOUND )   /*** Ver 1.4 ***/
     {
        if(DEBUG_MSG_LVL_5)
        {
          fn_userlog ( c_ServiceName, " Inside No data found of LTP fetch:: ");
        }
    		if (c_req_type =='S') /*** Ver 2.7 ***/
    		{
      		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      		EXEC SQL CLOSE sql_fcp_cur;
    		}
        fn_errlog( c_ServiceName, "B28510",DEFMSG, c_err_msg);
        /***		tpfree((char *)ptr_fml_Obuf);		*** Commented in Ver VQC ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn( TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0 );
     }
     else
     {
				if (c_req_type =='S') /*** Ver 2.7 ***/
    		{
      		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      		EXEC SQL CLOSE sql_fcp_cur;
    		}	
        fn_errlog ( c_ServiceName, "S31160", SQLMSG, c_err_msg );
        fn_userlog ( c_ServiceName, "Could not get LTP");
        /***		tpfree((char *)ptr_fml_Obuf);		*** Commented in Ver VQC ***/
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				/*** Ver 1.9 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	 /*** Ver 1.9 changed from ptr_st_err_msg to ptr_fml_Ibuf ***/
        /*** fn_userlog ( c_ServiceName, "Could not get LTP"); *** Commented in Ver 1.9 ***/
     }
   }

	 /*** Ver 1.6 starts here ***/
	 if(DEBUG_MSG_LVL_3)   
   {
     fn_userlog(c_ServiceName," d_ltp Is :%lf:",d_ltp);
     fn_userlog(c_ServiceName," d_opnpstn_rate Is :%lf:",d_opnpstn_rate);
     fn_userlog(c_ServiceName," Contract level open position Is :%ld:",st_cntfcp_pos_crrnt.l_opnpstn_qty);
   }

	if ( st_cntfcp_pos_crrnt.l_opnpstn_qty != 0 )     /***  Notional Profit / Loss Calculation Contractwise  ***/
	{
		if (st_cntfcp_pos_crrnt.c_prd_typ == 'O' && st_cntfcp_pos_crrnt.c_opnpstn_flw == BUY ) /*** For option Buy position Notional profit loss is Zero ***/
		{
			d_profit_loss = 0;
		}
		else if (st_cntfcp_pos_crrnt.c_prd_typ == 'O' && st_cntfcp_pos_crrnt.c_opnpstn_flw == SELL )
		{
				d_profit_loss = (double) st_cntfcp_pos_crrnt.l_opnpstn_qty  * ( d_clsng_prc - (double) d_ltp );
		}
		else if (st_cntfcp_pos_crrnt.c_prd_typ == 'F')
		{
			if(st_cntfcp_pos_crrnt.c_opnpstn_flw == BUY)
			{
				d_profit_loss = ( (double) d_ltp - d_opnpstn_rate ) * (double) st_cntfcp_pos_crrnt.l_opnpstn_qty ;
			}
			else if (st_cntfcp_pos_crrnt.c_opnpstn_flw == SELL)
			{
				d_profit_loss = ( d_opnpstn_rate - (double) d_ltp ) * (double) st_cntfcp_pos_crrnt.l_opnpstn_qty ;
			}
		}
	}
	l_qty = l_qty + st_cntfcp_pos_crrnt.l_opnpstn_qty;
	d_tot_profit_loss = d_tot_profit_loss + d_profit_loss;
	/*** Ver 1.6 ends here ***/

   d_ltp = d_ltp / 100;
   
   EXEC SQL
    SELECT  SEM_MAP_VL
    INTO    :vc_xchng_cd
    FROM    SEM_STCK_MAP
    WHERE   SEM_STCK_CD = :st_cntfcp_pos_crrnt.c_undrlyng
    /*** AND     SEM_ENTTY   = 3; *** Ver 1.3 ****/
      AND   SEM_ENTTY   = DECODE(:st_cntfcp_pos_crrnt.c_xchng_cd,'NFO',3,14); /*** Ver 1.3 ***/

   if ( SQLCODE  !=  0 )
   {
    	if (c_req_type =='S') /*** Ver 2.7 ***/
    	{
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	EXEC SQL CLOSE sql_fcp_cur;
    	}
			fn_errlog ( c_ServiceName, "S31165", SQLMSG, c_err_msg );
      /***		tpfree((char *)ptr_fml_Obuf);		*** Commented in Ver VQC ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );	/*** Ver 1.9 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

   SETNULL(vc_xchng_cd);		

	
   EXEC SQL
    SELECT to_char(to_date(:st_cntfcp_pos_crrnt.c_expry_dt,'DD-Mon-YYYY'),'dd-Mon-YY')
    INTO  :c_expry_dt
    FROM  DUAL;

   if ( SQLCODE  !=  0 )
   {
    	if (c_req_type =='S') /*** Ver 2.7 ***/
    	{
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	EXEC SQL CLOSE sql_fcp_cur;
    	}
			fn_errlog ( c_ServiceName, "S31170", SQLMSG, c_err_msg );
			/***	tpfree((char *)ptr_fml_Obuf);		*** Commented in Ver VQC ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				/*** Ver 1.9 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	 /*** Ver 1.9 changed from ptr_st_err_msg to ptr_fml_Ibuf ***/
   }

   /*** l_strike_prc  = st_cntfcp_pos_crrnt.l_strike_prc  ;  *** Commented in Ver 1.1 ***/

	 /*** Ver 1.1 starts here ***/
		d_strike_prc = 0.0;
    d_strike_prc  = (double) st_cntfcp_pos_crrnt.l_strike_prc / 100.00  ;
    sprintf(c_strk_prc,"%lf",d_strike_prc);

    fn_spn_rtrim(c_strk_prc,'0');
    fn_spn_rtrim(c_strk_prc,'.');

    /*** Ver 1.1 ends here ***/

	 /*** Setting Open Position Qty According to the Open Position Flow ***/

	 if(DEBUG_MSG_LVL_3)
 	 {
   	fn_userlog ( c_ServiceName, "Open Position Flow :%c:", st_cntfcp_pos_crrnt.c_opnpstn_flw);
	 }

	 if(st_cntfcp_pos_crrnt.c_opnpstn_flw == 'B')
	 {
			st_cntfcp_pos_crrnt.l_opnpstn_qty = st_cntfcp_pos_crrnt.l_opnpstn_qty;
			st_cntfcp_pos_crrnt.d_opnpstn_val= st_cntfcp_pos_crrnt.d_opnpstn_val;

	 }
	 else if(st_cntfcp_pos_crrnt.c_opnpstn_flw == 'S')
	 {
			st_cntfcp_pos_crrnt.l_opnpstn_qty = st_cntfcp_pos_crrnt.l_opnpstn_qty * (-1);
			st_cntfcp_pos_crrnt.d_opnpstn_val = st_cntfcp_pos_crrnt.d_opnpstn_val * (-1);
	 }
	 else
	 {
			if(DEBUG_MSG_LVL_3)
 		  {
      	fn_userlog ( c_ServiceName, "Open Position Flow Not Given Taking As Buy");
			}
			st_cntfcp_pos_crrnt.l_opnpstn_qty = st_cntfcp_pos_crrnt.l_opnpstn_qty;
			st_cntfcp_pos_crrnt.d_opnpstn_val = st_cntfcp_pos_crrnt.d_opnpstn_val;
	 }

	
	 if(DEBUG_MSG_LVL_3)
   {
		 fn_userlog ( c_ServiceName, "After  Setting Open Position Qty and Val ");
	 	 fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntfcp_pos_crrnt.l_opnpstn_qty );
   	 fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntfcp_pos_crrnt.d_opnpstn_val);
     fn_userlog ( c_ServiceName, "Open Position Flow :%c:", st_cntfcp_pos_crrnt.c_opnpstn_flw);
	 }

	 /********** Commented By Mahesh 	
   l_max_opn_qty = st_cntfcp_pos_crrnt.l_opnpstn_qty   +  st_cntfcp_pos_crrnt.l_ibuy_qty ;
   l_min_opn_qty = st_cntfcp_pos_crrnt.l_opnpstn_qty   +  st_cntfcp_pos_crrnt.l_isell_qty   ;
	 ********************************/

	 l_max_opn_qty = st_cntfcp_pos_crrnt.l_opnpstn_qty  +  fn_maxl(st_cntfcp_pos_crrnt.l_ibuy_qty,st_cntfcp_pos_crrnt.l_exbuy_qty) ;
   l_min_opn_qty = st_cntfcp_pos_crrnt.l_opnpstn_qty  +  fn_maxl(abs(st_cntfcp_pos_crrnt.l_isell_qty),abs(st_cntfcp_pos_crrnt.l_exsell_qty)) * -1  ;


	
	 if ( st_cntfcp_pos_crrnt.c_prd_typ ==  'O' )
   {
     l_temp_qty    = fn_minl ( l_max_opn_qty , l_min_opn_qty );
     l_max_opn_qty = l_temp_qty  ;
     l_min_opn_qty = l_temp_qty  ;

		if (c_req_type !='S' && st_cntfcp_pos_crrnt.l_opnpstn_qty  > 0 ) /*** if loop added in Ver 2.9 for trade level premium in basket ***/
    {
			d_opt_prmum = d_opt_prmum + (d_opnpstn_rate * st_cntfcp_pos_crrnt.l_opnpstn_qty);
    }
    else 
		{
	  if( st_cntfcp_pos_crrnt.l_ibuy_qty  > 0 )
    {
			if(DEBUG_MSG_LVL_3)
  		{
      	fn_userlog(c_ServiceName,"SPAN Inside Option Buy Position.");
			}

      if( st_cntfcp_pos_crrnt.l_opnpstn_qty < 0 )
      {
				if(DEBUG_MSG_LVL_3)
 			  {
       	 fn_userlog(c_ServiceName,"SPAN  - Cover Order For Sell Open Position.");
				}
        l_prmum_qty = st_cntfcp_pos_crrnt.l_opnpstn_qty + st_cntfcp_pos_crrnt.l_ibuy_qty  ;

        if ( l_prmum_qty > 0 )
        {
          d_opt_prmum = (double)l_prmum_qty * (st_cntfcp_pos_crrnt.d_ibuy_ord_val / 
					              (double)st_cntfcp_pos_crrnt.l_ibuy_qty) ;
        }
      }
      else
      {
        d_opt_prmum = st_cntfcp_pos_crrnt.d_ibuy_ord_val ;
      }

    }
		}

	 }

	 if( l_cntr	==	0	)
	 {
		if(DEBUG_MSG_LVL_3)
 	  {
			fn_userlog(c_ServiceName,"l_cntr Is :%ld:",l_cntr);
		}
		if(st_cntfcp_pos_crrnt.c_prd_typ	==	'F')
		{
		  		sprintf(c_inp_strng11,"%s^%s~%c:%s^%ld^%lf",st_cntfcp_pos_crrnt.c_cln_mtch_accnt,vc_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);

      	strcat(c_inp_strng1,c_inp_strng11);

      	sprintf(c_inp_strng22,"%s^%s~%c:%s^%ld^%lf",st_cntfcp_pos_crrnt.c_cln_mtch_accnt,vc_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);

      	strcat(c_inp_strng2,c_inp_strng22);

   	}
		else
		{
      		sprintf(c_inp_strng11,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntfcp_pos_crrnt.c_cln_mtch_accnt,vc_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,st_cntfcp_pos_crrnt.c_opt_typ,st_cntfcp_pos_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp);

      		strcat(c_inp_strng1,c_inp_strng11);

      		sprintf(c_inp_strng22,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntfcp_pos_crrnt.c_cln_mtch_accnt,vc_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,st_cntfcp_pos_crrnt.c_opt_typ,st_cntfcp_pos_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp);

      		strcat(c_inp_strng2,c_inp_strng22);

		}
	 }
	 else
	 {
				if(st_cntfcp_pos_crrnt.c_prd_typ  ==  'F')
        {
        	sprintf(c_inp_strng11,"%s~%c:%s^%ld^%lf",vc_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);

        	strcat(c_inp_strng1,c_inp_strng11);

        	sprintf(c_inp_strng22,"%s~%c:%s^%ld^%lf",vc_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);

        	strcat(c_inp_strng2,c_inp_strng22);

        }
        else
        {
          sprintf(c_inp_strng11,"%s~%c:%s:%c%c:%s^%ld^%lf",vc_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,st_cntfcp_pos_crrnt.c_opt_typ,st_cntfcp_pos_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp);

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s~%c:%s:%c%c:%s^%ld^%lf",vc_xchng_cd.arr,st_cntfcp_pos_crrnt.c_prd_typ,c_expry_dt,st_cntfcp_pos_crrnt.c_opt_typ,st_cntfcp_pos_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp);

          strcat(c_inp_strng2,c_inp_strng22);

        }
	 }

	 strcat(c_inp_strng1,",");
   strcat(c_inp_strng2,",");

   fn_sum_spnpos( st_cntfcp_pos_crrnt,&st_undfus_pos_to_be);

   /*** 21-Oct-2011 ***/
	
	 strcpy(st_cntfcp_pos_crrnt.c_xchng_cd,c_xchng_cd);

   i_expsr_rtrn  = fn_cal_expsr  ( c_ServiceName,
                                   st_cntfcp_pos_crrnt,
                                   l_basket_id,
                                   &d_expsr_mrgn,
                                   &d_min_expsr_mrgn,
                                   &d_mltplr,
                                   c_err_msg
                                  );

   if ( i_expsr_rtrn != 0 )
   {
    	if (c_req_type =='S') /*** Ver 2.7 ***/
    	{
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	EXEC SQL CLOSE sql_fcp_cur;
    	}
			fn_errlog ( c_ServiceName, "S31175", LIBMSG, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			/***	Commented In VQC
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			***/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

	 if(DEBUG_MSG_LVL_3)   /*** Ver 1.2 ***/
   {
     fn_userlog(c_ServiceName," d_expsr_mrgn Is :%lf:",d_expsr_mrgn);
     fn_userlog(c_ServiceName," d_min_expsr_mrgn Is :%lf:",d_min_expsr_mrgn);
   }

   d_expsr     = d_expsr_mrgn  + d_expsr ;
   d_min_expsr = d_min_expsr_mrgn  + d_min_expsr ;

     /*** 21-Oct-2011 ***/	

 	 l_cntr  ++;		
	  /***Ver 2.1 Starts ***/
		if(DEBUG_MSG_LVL_3) /*** Ver 2.2 ***/
		{
			fn_userlog( c_ServiceName, "FFO_RQST_TYP : %c:", c_req_type);
		}

	  if( c_req_type == 'E' || c_req_type == 'V' ) /*** ver 2.8 req type V added **/
	  {
			if(DEBUG_MSG_LVL_3) /*** Ver 2.2 ***/
			{
				fn_userlog( c_ServiceName, "Break After single iteration");
			}
      break;
	  }
	  /***Ver 2.1 Ends ***/
		fn_userlog(c_ServiceName,"d_opt_prmum=:%lf:",d_opt_prmum); /*** Ver 2.9 ***/
	} /* while */


	 if(DEBUG_MSG_LVL_3)
 	 {
  	 fn_userlog ( c_ServiceName, "Outside While Loop:: ");
	 }

   /******** Set UPOS_to_be fields to default ********/

   strcpy( st_undfus_pos_to_be.c_cln_mtch_accnt,st_cntfcp_pos_crrnt.c_cln_mtch_accnt);
   strcpy(st_pstn_actn_var.c_undrlyng,st_cntfcp_pos_crrnt.c_undrlyng );  /** Underlying ***/
   st_pstn_actn_var.c_prd_typ=st_cntfcp_pos_crrnt.c_prd_typ ;  /** Product type***/
   strcpy( st_undfus_pos_to_be.c_xchng_cd, c_xchng_cd );
   strcpy( st_undfus_pos_to_be.c_undrlyng, st_pstn_actn_var.c_undrlyng );
   st_undfus_pos_to_be.c_indstk  = st_pstn_actn_var.c_ctgry_indstk;


   strcpy( st_pstn_actn_var.c_cln_mtch_accnt,st_cntfcp_pos_crrnt.c_cln_mtch_accnt);
   strcpy( st_undfus_pos_to_be.c_cln_mtch_accnt,st_pstn_actn_var.c_cln_mtch_accnt );
   strcpy( st_undfus_pos_to_be.c_xchng_cd, st_pstn_actn_var.c_xchng_cd );
   strcpy( st_undfus_pos_to_be.c_undrlyng, st_pstn_actn_var.c_undrlyng );
   st_undfus_pos_to_be.c_indstk  = st_pstn_actn_var.c_ctgry_indstk;



	 l_length1 = strlen(c_inp_strng1);

   if( c_inp_strng1[l_length1  - 1 ] == ',')
   {
    c_inp_strng1[l_length1 -1]  ='\0';
   }

   l_length2 = strlen(c_inp_strng2);

   if( c_inp_strng2[l_length2  - 1 ] == ',')
   {
    c_inp_strng2[l_length2 -1]  ='\0';
   }


	 /*** Commented and Taken In Else Condition In Ver 1.1 
   strcpy(c_inp_strng,c_inp_strng1);
   strcat(c_inp_strng,c_inp_strng2);
   strcat(c_inp_strng,"\n");
	 ***/

	 if(DEBUG_MSG_LVL_3)
   {
  	 fn_userlog(c_ServiceName,"  st_cntfcp_pos_crrnt.c_cln_mtch_accnt  IS :%s:",
															 st_cntfcp_pos_crrnt.c_cln_mtch_accnt);
   	 fn_userlog(c_ServiceName,"  st_cntfcp_pos_crrnt.c_xchng_cd Is:%s:",st_cntfcp_pos_crrnt.c_xchng_cd);
	 }

/** ver 3.1 **/ 
	if(( strcmp ( st_usr_prof.c_user_id,"system" ) == 0 ) && ( st_usr_prof.l_session_id == 0 ))
	{
		strcpy(c_pipe_id,"11");
	}	
	else
	{
 	  EXEC SQL SELECT pcm_crnt_pipe_id
            INTO   :c_pipe_id
            FROM   PCM_PIPE_CLM_MAP
            WHERE  pcm_clm_mtch_accnt  = :st_cntfcp_pos_crrnt.c_cln_mtch_accnt
            /*** AND    PCM_XCHNG_CD        = 'NFO'; ***/
            AND    PCM_XCHNG_CD        = :st_cntfcp_pos_crrnt.c_xchng_cd; 
 
 	  if (SQLCODE !=0 && SQLCODE!= NO_DATA_FOUND )
  	 {
      fn_errlog( c_ServiceName, "S31180", SQLMSG, c_err_msg  );
      /***	tpfree ( ( char * ) ptr_fml_Obuf );		*** Commented in Ver VQC ***/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			/***	tpfree((char *)ptr_fml_Obuf);		*** Commented in Ver VQC ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	 }
		 else if ( SQLCODE == NO_DATA_FOUND )
	 	{
      fn_userlog(c_ServiceName," Inside No DATA Found ");
  		fn_errlog( c_ServiceName, "S31185", SQLMSG, c_err_msg  );
      /***	tpfree ( ( char * ) ptr_fml_Obuf ); *** Commented in Ver VQC ***/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			/***	tpfree((char *)ptr_fml_Obuf); 	*** Commented in Ver VQC ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	 	}	
	}
   /*** strcpy( c_pipe_id, ); Need to find Out from where to get Pipe ID ***/ 

	 /*** 
	 ptr_fml_Ibuf  = ( FBFR32 *)NULL;
   ptr_fml_Ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN*10); *** Added in ver 1.1 for increase buffer size ***/

	 ptr_fml_Ibuf_scall = ( FBFR32 *)NULL;                                   /*** Ver 1.1 ***/
   ptr_fml_Ibuf_scall = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN*10); /*** Ver 1.1 ***/

	 if ( ptr_fml_Ibuf_scall == NULL )    /*** Added In Ver VQC ***/
   {
     fn_errlog(c_ServiceName, "S31190", TPMSG, c_err_msg);
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

	 ptr_fml_Obuf_scall = ( FBFR32 *)NULL;																	 /*** Ver VQC	***/
	 ptr_fml_Obuf_scall = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);    /*** Ver 1.1 ***/

	 if ( ptr_fml_Obuf_scall == NULL )    /*** Added In Ver VQC ***/
   {
     fn_errlog(c_ServiceName, "S31195", TPMSG, c_err_msg);
     tpfree((char *)ptr_fml_Ibuf_scall);
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

 	 ptr_fml_Obuf = ( FBFR32 *)NULL;																	 /*** Ver VQC ***/
	 ptr_fml_Obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);    /*** Ver 1.1 ***/ 
		
	 if ( ptr_fml_Obuf == NULL ) 	/*** Added In Ver VQC ***/
	 {
		 fn_errlog( c_ServiceName, "S31200", TPMSG, c_err_msg  );
		 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		 tpfree((char *)ptr_fml_Ibuf_scall);
		 tpfree((char *)ptr_fml_Obuf_scall);
		 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }	

	 /*** Commented here and taken above in Ver VQC ***
	
	 if ( ptr_fml_Ibuf_scall == NULL )    *** Ver 1.1 ***
   {
     fn_errlog(c_ServiceName, "S31205", TPMSG, c_err_msg);
     tpfree((char *)ptr_fml_Obuf);
		 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				 *** Ver 1.9 ***
		 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	 *** Ver 1.9 changed from ptr_st_err_msg to ptr_fml_Ibuf ***
   }
	

   if ( ptr_fml_Ibuf == NULL )
   {
     fn_errlog(c_ServiceName, "S31210", TPMSG, c_err_msg);
		 tpfree((char *)ptr_fml_Obuf);
		 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				 *** Ver 1.9 ***
		 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	 *** Ver 1.9 changed from ptr_st_err_msg to ptr_fml_Ibuf ***

   }	

		*** Ver VQC Comment Ends ***/ 
	
	 /*** Ver 1.1 starts here ***/
		if(DEBUG_MSG_LVL_2)  /*** Ver 2.2 ***/
		{
			fn_userlog( c_ServiceName, "i_cntrct_cnt = :%d:",i_cntrct_cnt);
		}

		if (i_cntrct_cnt > 10)
		{
			if ( Fadd32 (ptr_fml_Ibuf_scall,FFO_PIPE_ID,(char *)c_pipe_id,0)	==	-1 )
			{
				fn_errlog( c_ServiceName, "S31215",FMLMSG , c_err_msg );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf_scall);
        tpfree((char *)ptr_fml_Obuf_scall);
		    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				 /*** Ver 1.9 ***/
		    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );		 /*** Ver 1.9 changed from ptr_st_err_msg to ptr_fml_Ibuf ***/
			}

			MEMSET(c_inp_strng);
			strcpy(c_inp_strng,c_inp_strng1);
			strcat(c_inp_strng,"\n");
			
			if(DEBUG_MSG_LVL_5)
			{
				fn_userlog(c_ServiceName,"c_inp_strng 1 = :%s:",c_inp_strng);
			}

			if ( Fadd32 (ptr_fml_Ibuf_scall,FFO_REMARKS,(char *)c_inp_strng,0)	==	-1 )
			{
				fn_errlog( c_ServiceName, "S31220",FMLMSG , c_err_msg );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf_scall);
        tpfree((char *)ptr_fml_Obuf_scall);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				 /*** Ver 1.9 ***/
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );		 /*** Ver 1.9 changed from ptr_st_err_msg to ptr_fml_Ibuf ***/
			}

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
			}

			i_rtrn_cd1	=	tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf_scall,0,(char **)&ptr_fml_Obuf_scall,&li_len_tobuf,0);

			if(	i_rtrn_cd1 != 0	)
			{
				fn_errlog( c_ServiceName, "S31225",FMLMSG , c_err_msg );
				tpfree((char *)ptr_fml_Ibuf_scall);
      	tpfree((char *)ptr_fml_Obuf_scall);
				tpfree((char *)ptr_fml_Obuf);
		    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				 /*** Ver 1.9 ***/
		    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	   /*** Ver 1.9 changed from ptr_st_err_msg to ptr_fml_Ibuf ***/
			}

			if ( Fget32 (ptr_fml_Obuf_scall,FFO_ABT_TRG_DATA,0,(char *)c_op_strng1,0)  ==  -1 )
			{
				fn_errlog( c_ServiceName, "S31230",FMLMSG , c_err_msg );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf_scall);
        tpfree((char *)ptr_fml_Obuf_scall);
			  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				 /*** Ver 1.9 ***/
		    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	 /*** Ver 1.9 changed from ptr_st_err_msg to ptr_fml_Ibuf ***/
			}

			if(DEBUG_MSG_LVL_2)  /*** Ver 2.2 ***/
			{
				fn_userlog(c_ServiceName,"Output String 1 Is :%s:",c_op_strng1);
			}

     /*** Ver 3.3 Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf_scall,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                   c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
       fn_errlog( c_ServiceName, "S31235",LIBMSG , c_err_msg );
        tpfree((char *)ptr_fml_Obuf);
        tpfree((char *)ptr_fml_Ibuf_scall);
        tpfree((char *)ptr_fml_Obuf_scall);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );    
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 3.3 Ends here ***/

			MEMSET(c_inp_strng);

			if(DEBUG_MSG_LVL_5)
			{
				fn_userlog(c_ServiceName,"Initial c_inp_strng2 = :%s:",c_inp_strng2);
			}

  		/**** Ver 1.3 Starts Here *****/

  		if( strcmp(c_xchng_cd,"NFO") == 0 )
  		{
   			strcpy( c_inp_strng ,"1^NSE^");
  		}
  		else
  		{
   			strcpy( c_inp_strng ,"1^BSE^");
  		}
  		/**** Ver 1.3 Ends Here ******/
 
			fn_spn_ltrim(c_inp_strng2,'|');
			/*sprintf(c_inp_strng,"1^%s",c_inp_strng2); ***** Ver 1.3 comment ***/ 
			/*sprintf(c_inp_strng,"%s",c_inp_strng2); **** Ver 1.3 ***/ 
			strcat(c_inp_strng,c_inp_strng2); /**** Ver 1.3 ***/ 
			strcat(c_inp_strng,"\n");	

			if(DEBUG_MSG_LVL_5)
			{
				fn_userlog(c_ServiceName,"c_inp_strng 2 = :%s:",c_inp_strng);
			}

			if ( Fchg32 (ptr_fml_Ibuf_scall,FFO_REMARKS,0,(char *)c_inp_strng,0)	==	-1 )
			{	
				fn_errlog( c_ServiceName, "S31240",FMLMSG , c_err_msg );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf_scall);
        tpfree((char *)ptr_fml_Obuf_scall);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				 /*** Ver 1.9 ***/
		    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	 /*** Ver 1.9 changed from ptr_st_err_msg to ptr_fml_Ibuf ***/

			}

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
			}

			i_rtrn_cd1	=	tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf_scall,0,(char **)&ptr_fml_Obuf_scall,&li_len_tobuf,0);

			if(	i_rtrn_cd1 != 0	)
			{
				fn_errlog( c_ServiceName, "S31245",FMLMSG , c_err_msg );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf_scall);
        tpfree((char *)ptr_fml_Obuf_scall);
		    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				 /*** Ver 1.9 ***/
		    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	 /*** Ver 1.9 changed from ptr_st_err_msg to ptr_fml_Ibuf ***/
			}

			if ( Fget32 (ptr_fml_Obuf_scall,FFO_ABT_TRG_DATA,0,(char *)c_op_strng2,0)  ==  -1 )
			{
				fn_errlog( c_ServiceName, "S31250",FMLMSG , c_err_msg );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf_scall);
        tpfree((char *)ptr_fml_Obuf_scall);
		    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				 /*** Ver 1.9 ***/
		    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	 /*** Ver 1.9 changed from ptr_st_err_msg to ptr_fml_Ibuf ***/
			}
		
			fn_spn_ltrim(c_op_strng2,'1');
			fn_spn_ltrim(c_op_strng2,'^');

			if(DEBUG_MSG_LVL_2)  /*** Ver 2.2 ***/
			{
				fn_userlog(c_ServiceName,"Output String 2 Is :%s:",c_op_strng2);
			}

      /*** Ver 3.3 Starts Here ***/
      i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf_scall,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn2,
                                    &d_bnov2,
                                    &d_total_bmrgn2,
                                    c_ServiceName,
                                    c_err_msg
                                   );
      if( i_ret_val != 0 )
      {
        fn_errlog( c_ServiceName, "S31255",LIBMSG , c_err_msg );
        tpfree((char *)ptr_fml_Obuf);
        tpfree((char *)ptr_fml_Ibuf_scall);
        tpfree((char *)ptr_fml_Obuf_scall);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 ); 
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
      }

      if(DEBUG_MSG_LVL_4)
      {
        fn_userlog(c_ServiceName,"d_spn_bmrgn2 :%lf: d_bnov2:%lf: d_total_bmrgn2:%lf:",d_spn_bmrgn2,d_bnov2,d_total_bmrgn2);
      }
      /*** Ver 3.3 Ends here ***/

		}
		else
		{
			strcpy(c_inp_strng,c_inp_strng1);
			strcat(c_inp_strng,c_inp_strng2);
			strcat(c_inp_strng,"\n");	
			/*** Ver 1.1 Ends here ***/

   		if ( Fadd32 (ptr_fml_Ibuf_scall,FFO_PIPE_ID,(char *)c_pipe_id,0)  ==  -1 )
   		{
    		fn_errlog( c_ServiceName, "S31260",FMLMSG , c_err_msg );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf_scall);
        tpfree((char *)ptr_fml_Obuf_scall);
		    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				 /*** Ver 1.9 ***/
		    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	 /*** Ver 1.9 changed from ptr_st_err_msg to ptr_fml_Ibuf ***/
   		}
	
   		if ( Fadd32 (ptr_fml_Ibuf_scall,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
   		{
    		fn_errlog( c_ServiceName, "S31265",FMLMSG , c_err_msg );
    		tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf_scall);
        tpfree((char *)ptr_fml_Obuf_scall);
		    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				 /*** Ver 1.9 ***/
		    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	 /*** Ver 1.9 changed from ptr_st_err_msg to ptr_fml_Ibuf ***/
   		}	



   		/*** ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN ); Testing ***/

			/*** Commented in Ver VQC ***

   		if ( ptr_fml_Obuf == NULL )
   		{
    		fn_errlog( c_ServiceName, "S31270", TPMSG, c_err_msg  );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf_scall);
        tpfree((char *)ptr_fml_Obuf_scall);
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}

			***  Ver VQC Comment Ends	***/
	
	 		if(DEBUG_MSG_LVL_3)
   		{
		 		fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
	 		}

   		i_rtrn_cd1  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf_scall,0,(char **)&ptr_fml_Obuf_scall,&li_len_tobuf,0);

   		if( i_rtrn_cd1 != 0 )
   		{
    		fn_errlog( c_ServiceName, "S31275",TPMSG , c_err_msg );
    		tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf_scall);
        tpfree((char *)ptr_fml_Obuf_scall);
		    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				 /*** Ver 1.9 ***/
		    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	 /*** Ver 1.9 changed from ptr_st_err_msg to ptr_fml_Ibuf ***/
   		}

   		if ( Fget32 (ptr_fml_Obuf_scall,FFO_ABT_TRG_DATA,0,(char *)c_op_strng,0)  ==  -1 )
   		{
    		fn_errlog( c_ServiceName, "S31280",FMLMSG , c_err_msg );
    		tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf_scall);
        tpfree((char *)ptr_fml_Obuf_scall);
		    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				 /*** Ver 1.9 ***/
		    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	 /*** Ver 1.9 changed from ptr_st_err_msg to ptr_fml_Ibuf ***/
   		}

	
	 		strcpy(c_op_strng1,strtok(c_op_strng,"|"));
   		strcpy(c_op_strng2,strtok(null_ptr,"|"));

    /*** Ver 3.3 Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf_scall,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31285",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf_scall);
      tpfree((char *)ptr_fml_Obuf_scall);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );         /*** Ver 1.9 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 3.3 Ends here ***/


		} /*** End Of Else ***/ /*** Ver 1.1 ***/

   strcpy(c_mrgn_indctr,strtok(c_op_strng1,"^"));
   strcpy(c_xchng_cd1,strtok(null_ptr,"^"));    /** Ver 1.3 ***/ 
   strcpy(c_seq_num1,strtok(null_ptr,"^"));
   strcpy(c_mtch_accnt1,strtok(null_ptr,"^"));
   strcpy(c_spn_mrgn1,strtok(null_ptr,"^"));
   strcpy(c_nov1,strtok(null_ptr,"^"));
   strcpy(c_total_mrgn1,strtok(null_ptr,"^"));
	
	 if(i_cntrct_cnt > 10) 													/** If else condition added in Ver 1.5 **/
	 {
   		strcpy(c_xchng_cd2,strtok(c_op_strng2,"^"));   
   		strcpy(c_seq_num2,strtok(null_ptr,"^"));		
	 }																							/** Ver 1.5 starts ***/
	 else
	 { 
   		strcpy(c_seq_num2,strtok(c_op_strng2,"^"));		
	 }																							/** Ver 1.5 Ends ***/
   strcpy(c_mtch_accnt2,strtok(null_ptr,"^"));
   strcpy(c_spn_mrgn2,strtok(null_ptr,"^"));
   strcpy(c_nov2,strtok(null_ptr,"^"));
   strcpy(c_total_mrgn2,strtok(null_ptr,"^"));


	 if(DEBUG_MSG_LVL_3)
   {
  	 fn_userlog(c_ServiceName,"SPAN c_mtch_accnt1 Is :%s:",c_mtch_accnt1);
  	 fn_userlog(c_ServiceName,"SPAN c_xchng_cd2 Is :%s:",c_xchng_cd2); /** Ver 1.3 ***/
  	 fn_userlog(c_ServiceName,"SPAN c_seq_num2 Is :%s:",c_seq_num2);  /** Ver 1.3 ***/
  	 fn_userlog(c_ServiceName,"SPAN c_spn_mrgn2 Is :%s:",c_spn_mrgn2); /** Ver 1.3 ***/
  	 fn_userlog(c_ServiceName,"SPAN c_nov2 Is :%s:",c_nov2);						/** Ver 1.3 ***/
  	 fn_userlog(c_ServiceName,"SPAN c_total_mrgn2 Is :%s:",c_total_mrgn2); /** Ver 1.3 ***/
	 }

   if ( c_mtch_accnt1[0] == '1' || c_mtch_accnt1[0] == '2' || c_mtch_accnt1[0] == '3' )  /*** Ver 1.1 ***/
   {
      fn_errlog( c_ServiceName, "S31290",LIBMSG , c_err_msg );
      fn_userlog(c_ServiceName,"Service Return Error.");
      tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf_scall);
      tpfree((char *)ptr_fml_Obuf_scall);
		  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				 /*** Ver 1.9 ***/
		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	 /*** Ver 1.9 changed from ptr_st_err_msg to ptr_fml_Ibuf ***/
   }

   /*** Ver 3.3 Starts here ***/
     d_spn_bmrgn = fn_maxd(d_spn_bmrgn1,d_spn_bmrgn2) * 100;
     d_bnov      = fn_maxd(d_bnov1,d_bnov2) * 100;
     d_total_bmrgn = fn_maxd(d_total_bmrgn1,d_total_bmrgn2) * 100;

     if(DEBUG_MSG_LVL_3)
     {
       fn_userlog(c_ServiceName,"d_spn_bmrgn :%lf: d_bnov :%lf: d_total_bmrgn:%lf:",d_spn_bmrgn,d_bnov,d_total_bmrgn);
     }
    /*** Ver 3.3 Ends here ***/

   d_spn_mrgn1   = atof(c_spn_mrgn1);
   d_spn_mrgn2   = atof(c_spn_mrgn2);
   d_nov1        = atof(c_nov1);
   d_nov2        = atof(c_nov2);
   d_total_mrgn1 = atof(c_total_mrgn1);
   d_total_mrgn2 = atof(c_total_mrgn2);

   st_undfus_pos_to_be.d_uspan_nenov_mrgn = fn_maxd(d_spn_mrgn1,d_spn_mrgn2) * 100;
   st_undfus_pos_to_be.d_net_optn_val = fn_maxd(d_nov1,d_nov2) * 100;
   st_undfus_pos_to_be.d_uspan_wenov_mrgn = fn_maxd(d_total_mrgn1,d_total_mrgn2) * 100 ;

   /*** Ver 3.3 Starts Here ***/
    st_undfus_pos_to_be.d_uspan_nenov_mrgn  = fn_maxd(st_undfus_pos_to_be.d_uspan_nenov_mrgn,d_spn_bmrgn);
    st_undfus_pos_to_be.d_net_optn_val = fn_maxd(st_undfus_pos_to_be.d_net_optn_val,d_bnov);
    st_undfus_pos_to_be.d_uspan_wenov_mrgn = fn_maxd(st_undfus_pos_to_be.d_uspan_wenov_mrgn,d_total_bmrgn);
    /*** Ver 3.3 Ends Here ***/

	 d_spn_mrgn    = st_undfus_pos_to_be.d_uspan_nenov_mrgn    ;     /***  SPAN  MRGN  ***/
   d_nov         = st_undfus_pos_to_be.d_net_optn_val        ;     /***  NOV ***/
   d_total_mrgn  = st_undfus_pos_to_be.d_uspan_wenov_mrgn    ;     /***  SPAN +/- NOV  ***/


	 if(DEBUG_MSG_LVL_3)
   {
	 	fn_userlog(c_ServiceName,"SPAN - SPAN MARGIN Is :%lf:",d_spn_mrgn);
	 }

	 /**** Commented  On 21-Oct-2011
   i_returncode  = fn_cal_mrgn ( c_ServiceName,
                                  &st_pstn_actn_var,
                                  &st_undfus_pos_to_be,
                                  d_prmum,
                                  &d_mltplr,
                                  &d_expsr,
                                  &d_min_mrgn,
                                  &d_intl_mrgn,
                                  c_err_msg
                                );
	 ****/

	 i_returncode  = fn_cal_mrgn ( c_ServiceName,
                                  d_total_mrgn,
                                  d_mltplr,
                                  d_expsr,
                                  d_min_expsr,
                                  &d_min_mrgn,
                                  &d_intl_mrgn,
                                  c_err_msg
                                );

   if ( i_returncode !=  0 )
   {
      fn_errlog( c_ServiceName, "S31295",LIBMSG , c_err_msg );
      fn_userlog(c_ServiceName,"Service Return Error.");
      tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf_scall);
      tpfree((char *)ptr_fml_Obuf_scall);
		  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );				 /*** Ver 1.9 ***/
		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	 /*** Ver 1.9 changed from ptr_st_err_msg to ptr_fml_Ibuf ***/
   }

	/*** Ver 1.6 starts here ***/
	/*** Calculate Available margin = Blocked initial margin - Notional Profit Loss ***/

	if ( d_tot_profit_loss > 0 )
	{
		 d_und_avail_mrgn = d_intl_mrgn;
	}
	else
	{
		d_und_avail_mrgn = d_intl_mrgn + d_tot_profit_loss;
	}

	if (l_qty == 0)
	{
		d_und_avail_mrgn = 0.0;
	}
	/*** Ver 1.6 ends here ***/

	 if(DEBUG_MSG_LVL_2)  /*** Ver 2.2 ***/
   {
   	fn_userlog(c_ServiceName,"SPAN  - SPAN MARGIN IS :%lf:",d_spn_mrgn);
   	fn_userlog(c_ServiceName,"SPAN  - NOV IS :%lf:",d_nov);
   	fn_userlog(c_ServiceName,"SPAN  - Total Margin  IS :%lf:",d_total_mrgn);
   	fn_userlog(c_ServiceName,"SPAN  - Exposure  IS :%lf:",d_expsr);
   	fn_userlog(c_ServiceName,"SPAN  - Min. Margin IS :%lf:",d_min_mrgn);
   	fn_userlog(c_ServiceName,"SPAN  - Initial Margin IS :%lf:",d_intl_mrgn);
   	fn_userlog(c_ServiceName,"SPAN  - Open position qty IS :%ld:",l_qty);							/*** Ver 1.6 ***/
   	fn_userlog(c_ServiceName,"SPAN  - Notional PL IS :%lf:",d_tot_profit_loss);				/*** Ver 1.6 ***/
   	fn_userlog(c_ServiceName,"SPAN  - Available Margin IS :%lf:",d_und_avail_mrgn);		/*** Ver 1.6 ***/
	 }

	 /* Type Casted by Mahesh for 1 paisa issue */
		d_intl_mrgn = ( long long )d_intl_mrgn;
  fn_userlog( c_ServiceName, "CHECKKKKKKKKKKKKKKKKK c_req_type :%c:",c_req_type); /** ver 2.8 **/

  if( c_req_type != 'E' && c_req_type != 'V' )			/***Added in Ver 2.1 Starts ***/ /*** ver 2.8 req type V added **/
  {
		  /*** Ver 2.7 starts ***/
			EXEC SQL 
			SELECT NVL(FUS_INITIAL_MRGN,0)
            INTO   :d_blkd_mrgn
            FROM   FUS_FO_UNDRLYNG_SPN_PSTN
            WHERE  FUS_CLM_MTCH_ACCNT  = :st_usr_prof.c_cln_mtch_accnt
            AND    FUS_XCHNG_CD        = :c_xchng_cd 
            AND    FUS_UNDRLYNG        = :c_undrlyng; 
 
		 if (SQLCODE !=0  && SQLCODE != NO_DATA_FOUND )
		 {
				fn_errlog( c_ServiceName, "S31300", SQLMSG, c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		 }

		 if(DEBUG_MSG_LVL_3)
		 {
     	fn_userlog(c_ServiceName,"SPAN  - Initial Margin IS :%lf:",d_intl_mrgn);
     	fn_userlog(c_ServiceName,"SPAN  - Min. Margin IS :%lf:",d_min_mrgn);
     	fn_userlog(c_ServiceName,"SPAN  - Blocked Margin IS :%lf:",d_blkd_mrgn);
	 	 }
		 /*** Ver 2.7 ends ***/

	   i_returncode = fn_pack_vartofml ( c_ServiceName,
										 c_err_msg,
										 &ptr_fml_Obuf,
										 6,  /*** Ver 1.6 changed from 2 to 3 ***/	/*** Changed from 3 to 4 in Ver 2.7 ***/ /*** Changes from 4 to 6 in Ver 2.9 ***/
										 FFO_U_ORDR_MRGN, (char *)&d_intl_mrgn,
										 FFO_U_TRD_MRGN, (char *)&d_min_mrgn,
										 FFO_BAL_AMT, (char *)&d_und_avail_mrgn,		/*** Ver 1.6 ***/
 										 FFO_ORD_AMT_BLKD,(char *)&d_blkd_mrgn,     /*** Ver 2.7 ***/
 										 FFO_OPT_PREMIUM,(char *)&d_opt_prmum,      /*** Ver 2.9 ***/
 										 FFO_EFF_LMT_RT,(char *)&d_opt_sprmum      /*** Ver 2.9 ***/
									   );
	   if ( i_returncode != 0 )
		 {
			fn_errlog( c_ServiceName, "S31305", LIBMSG, c_err_msg );
			/*** tpfree ( ( char * ) ptr_fml_Obuf );								*** Commented in VQC ***/
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf_scall);
			tpfree((char *)ptr_fml_Obuf_scall);
			tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		 }

	 d_opt_sprmum =0.0; /*** Ver 3.4 ***/

	 /** tpfree((char *)ptr_fml_Ibuf); *** Ver 1.1 Free the allocated buffer ***/
	 tpfree((char *)ptr_fml_Ibuf_scall); /*** Ver 1.1 Free the allocated buffer ***/
	 tpfree((char *)ptr_fml_Obuf_scall); /*** Ver 1.1 Free the allocated buffer ***/
 }
 else if( c_req_type == 'E' || c_req_type == 'V' )		/***Ver 2.1 Starts ***/ /*** ver 2.8 req type V added **/
 {
	/*fn_cpy_ddr ( st_tradebk.c_rout_crt );*/
	l_buy_exctd_qty = 0;
	l_sell_exctd_qty = 0;

	/** c_req_type = 'E'; commented by 2.8 **/

	ptr_fml_Ibuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN * 30);
	if ( ptr_fml_Ibuf == NULL )
	{
		fn_errlog( c_ServiceName, "S31310", TPMSG, c_err_msg  );
		return;
	}
	if(DEBUG_MSG_LVL_3) /*** taken inside debug level in VQC ***/  /*** Ver 2.2 ***/
	{
					fn_userlog ( c_ServiceName, "Expiry date       :%s :", st_cntfcp_pos_crrnt.c_expry_dt);
					fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntfcp_pos_crrnt.l_ibuy_qty );
					fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntfcp_pos_crrnt.d_ibuy_ord_val);
					fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntfcp_pos_crrnt.l_isell_qty );
					fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntfcp_pos_crrnt.d_isell_ord_val);
					fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntfcp_pos_crrnt.l_exbuy_qty );
					fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntfcp_pos_crrnt.d_exbuy_ord_val);
					fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntfcp_pos_crrnt.l_exsell_qty );
					fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", st_cntfcp_pos_crrnt.d_exsell_ord_val );
					fn_userlog ( c_ServiceName, "Product Type is   :%c: ", st_cntfcp_pos_crrnt.c_prd_typ );
					fn_userlog ( c_ServiceName, "Underlying is     :%s: ", st_cntfcp_pos_crrnt.c_undrlyng );
					fn_userlog ( c_ServiceName, "Option Type is    :%c: ", st_cntfcp_pos_crrnt.c_opt_typ);
					fn_userlog ( c_ServiceName, "Strike Price is   :%ld:", st_cntfcp_pos_crrnt.l_strike_prc);
					fn_userlog ( c_ServiceName, "Exercie Type is   :%c: ", st_cntfcp_pos_crrnt.c_exer_typ );
					fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntfcp_pos_crrnt.l_opnpstn_qty );
					fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntfcp_pos_crrnt.d_opnpstn_val);
					fn_userlog ( c_ServiceName, "Open Position Flow :%c:", st_cntfcp_pos_crrnt.c_opnpstn_flw);
					fn_userlog ( c_ServiceName, "Index or stock		:%c:", st_cntfcp_pos_crrnt.c_ctgry_indstk);
					fn_userlog ( c_ServiceName, "Match Acc			:%s:", st_cntfcp_pos_crrnt.c_cln_mtch_accnt);		
					fn_userlog ( c_ServiceName, "Ibuy ord val		:%lf:", d_ibuy_rate );
					fn_userlog ( c_ServiceName, "Ibuy ord val		:%lf:", d_isell_rate);
					fn_userlog(c_ServiceName,"SPAN  - Initial Margin IS :%lf:",d_intl_mrgn);
	}

  d_ibuy_rate = st_cntfcp_pos_crrnt.l_ibuy_qty * l_lst_trd_prc;  /*** Ver 2.5 ***/
  d_isell_rate = st_cntfcp_pos_crrnt.l_isell_qty * l_lst_trd_prc;  /*** Ver 2.5 ***/

	i_err[0]  = Fchg32( ptr_fml_Ibuf,FFO_RQST_TYP, 0, (char *)&c_req_type, 0);
	i_ferr[0]  = Ferror32;
	i_err[1]  = Fchg32( ptr_fml_Ibuf,FFO_SSSN_ID, 0, (char *)&st_usr_prof.l_session_id, 0);
	i_ferr[1]  = Ferror32;
	i_err[2]  = Fchg32( ptr_fml_Ibuf,FFO_STRK_PRC, 0, (char *)&st_cntfcp_pos_crrnt.l_strike_prc, 0);
	i_ferr[2]  = Ferror32;
	i_err[3]  = Fchg32( ptr_fml_Ibuf,FFO_CI_BUY_QTY, 0, (char *)&st_cntfcp_pos_crrnt.l_ibuy_qty, 0);
	i_ferr[3]  = Ferror32;
	i_err[4]  = Fchg32( ptr_fml_Ibuf,FFO_CI_SELL_QTY,0, (char *)&st_cntfcp_pos_crrnt.l_isell_qty, 0);
	i_ferr[4]  = Ferror32;
	i_err[5]  = Fchg32( ptr_fml_Ibuf,FFO_CBUY_EXCTD_QTY, 0, (char *)&l_buy_exctd_qty, 0);
	i_ferr[5]  = Ferror32;
	i_err[6]  = Fchg32( ptr_fml_Ibuf,FFO_CSELL_EXCTD_QTY, 0, (char *)&l_sell_exctd_qty, 0);
	i_ferr[6]  = Ferror32;
	i_err[7]  = Fchg32( ptr_fml_Ibuf,FFO_C_OPNPSTN_QTY, 0, (char *)&st_cntfcp_pos_crrnt.l_opnpstn_qty, 0);		
	i_ferr[7]  = Ferror32;
	i_err[8]  = Fchg32( ptr_fml_Ibuf,FFO_CTGRY_INDSTK, 0, (char *)&st_cntfcp_pos_crrnt.c_ctgry_indstk, 0);		
	i_ferr[8]  = Ferror32;
	i_err[9]  = Fchg32( ptr_fml_Ibuf,FFO_EXER_TYP, 0, (char *)&st_cntfcp_pos_crrnt.c_exer_typ, 0);
	i_ferr[9]  = Ferror32;
	i_err[10]  = Fchg32( ptr_fml_Ibuf,FFO_OPT_TYP, 0, (char *)&st_cntfcp_pos_crrnt.c_opt_typ, 0);
	i_ferr[10]  = Ferror32;
	i_err[11]  = Fchg32( ptr_fml_Ibuf,FFO_PRDCT_TYP, 0, (char *)&st_cntfcp_pos_crrnt.c_prd_typ, 0);
	i_ferr[11]  = Ferror32;
	i_err[12]  = Fchg32( ptr_fml_Ibuf,FFO_C_OPNPSTN_FLW, 0, (char *)&st_cntfcp_pos_crrnt.c_opnpstn_flw, 0);		
	i_ferr[12]  = Ferror32;
	i_err[13]  = Fchg32( ptr_fml_Ibuf,FFO_CI_BUY_ORD_VL, 0, (char *)&d_ibuy_rate, 0);
	i_ferr[13]  = Ferror32;
	i_err[14]  = Fchg32( ptr_fml_Ibuf,FFO_CI_SELL_ORD_VL, 0, (char *)&d_isell_rate, 0);
	i_ferr[14]  = Ferror32;
	i_err[15]  = Fchg32( ptr_fml_Ibuf,FFO_C_ORG_OPN_VAL, 0, (char *)&d_opnpstn_rate, 0);
	i_ferr[15]  = Ferror32;
	i_err[16]  = Fchg32( ptr_fml_Ibuf,FFO_ROUT_CRT, 0, (char *)st_usr_prof.c_rout_crt, 0);
	i_ferr[16]  = Ferror32;
	i_err[17]  = Fchg32( ptr_fml_Ibuf,FFO_USR_ID, 0, (char *)st_usr_prof.c_user_id, 0);
	i_ferr[17]  = Ferror32;
	i_err[18]  = Fchg32( ptr_fml_Ibuf,FFO_EXPRY_DT, 0, (char *)st_cntfcp_pos_crrnt.c_expry_dt, 0);
	i_ferr[18]  = Ferror32;
	i_err[19]  = Fchg32( ptr_fml_Ibuf,FFO_UNDRLYNG, 0, (char *)st_cntfcp_pos_crrnt.c_undrlyng, 0);
	i_ferr[19]  = Ferror32;
	i_err[20]  = Fchg32( ptr_fml_Ibuf,FFO_XCHNG_CD, 0, (char *)c_xchng_cd, 0);
	i_ferr[20]  = Ferror32;
	i_err[21]  = Fchg32( ptr_fml_Ibuf,FFO_EBA_MTCH_ACT_NO, 0, (char *)st_cntfcp_pos_crrnt.c_cln_mtch_accnt, 0);		
	i_ferr[21]  = Ferror32;
	i_err[22]  = Fchg32( ptr_fml_Ibuf,FFO_LST_TRD_PRC, 0, (char *)&l_lst_trd_prc, 0);
	i_ferr[22]  = Ferror32;

	  for(i=0; i <=23 ; i++)
	  {
		  if ( (i_err[ i ] == -1 ) )
		  {
			fn_errlog( c_ServiceName, "S31315", Fstrerror32(i_ferr[i]),c_err_msg);
			tpfree ( ( char * ) ptr_fml_Ibuf );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			return;
		  }
	  }
   fn_userlog(c_ServiceName,"CHECKKKKKKKKKKKKK :%c:",st_cntfcp_pos_crrnt.c_prd_typ);
 
   if( st_cntfcp_pos_crrnt.c_prd_typ == 'F' ) /** if condition added in ver 2.8 **/
   {
	  i_returncode = tpcall ( "SFO_FUT_MGCAL",
							 ( char *)ptr_fml_Ibuf,
							 0,
							 ( char **)&ptr_fml_Obuf,
							 &l_recvbuf,
							 0
							 );
		if ( i_returncode != SUCC_BFR )
		{
		  fn_errlog( c_ServiceName, "S31320",TPMSG,c_err_msg);
		  tpfree((char*)ptr_fml_Ibuf);
		  return;
		}

	   /*i_rtrn_cd1	=	tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);*/


		if ( Fget32 (ptr_fml_Obuf,FFO_U_TRD_MRGN,0,(char *)&d_fut_plus_ord_mrgn_amt,0)  ==  -1 )
		{	
			fn_errlog( c_ServiceName, "S31325",FMLMSG , c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			/*** Commented In VQC
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			***/
			tpfree((char *)ptr_fml_Ibuf_scall);											/*** VQC ***/
			tpfree((char *)ptr_fml_Obuf_scall);											/*** VQC ***/
			tpfree((char *)ptr_fml_Obuf);
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if ( Fget32 (ptr_fml_Obuf,FFO_C_ORDR_MRGN,0,(char *)&d_fut_plus_sltp_ord_mrgn_amt,0)  ==  -1 )
		{	
			fn_errlog( c_ServiceName, "S31330",FMLMSG , c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			/*** Commented In VQC
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			***/
      tpfree((char *)ptr_fml_Ibuf_scall);                     /*** VQC ***/
      tpfree((char *)ptr_fml_Obuf_scall);                     /*** VQC ***/
			tpfree((char *)ptr_fml_Obuf);
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
    
  }/** ver 2.8 else loop starts  ****/
  else if ( st_cntfcp_pos_crrnt.c_prd_typ == 'O' )
  {
      i_returncode = tpcall ( "SFO_OPT_MGCAL",
               ( char *)ptr_fml_Ibuf,
               0,
               ( char **)&ptr_fml_Obuf,
               &l_recvbuf,
               0
               );
    if ( i_returncode != SUCC_BFR )
    {
      fn_errlog( c_ServiceName, "S31335",TPMSG,c_err_msg);
      tpfree((char*)ptr_fml_Ibuf);
      return;
    }
    if ( Fget32 (ptr_fml_Obuf,FFO_ADD_MRGN_AMT,0,(char *)&d_buy_amt,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31340",FMLMSG , c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Ibuf_scall);
      tpfree((char *)ptr_fml_Obuf_scall);
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if ( Fget32 (ptr_fml_Obuf,FFO_U_MM_TRD_MRGN,0,(char *)&d_sell_amt,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31345",FMLMSG , c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree((char *)ptr_fml_Ibuf_scall);
      tpfree((char *)ptr_fml_Obuf_scall);
      tpfree((char *)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  } /*** VER 2.8 else ENDS ****/


	if(DEBUG_MSG_LVL_2) /*** taken inside debug level in VQC ***/  /*** Ver 2.2 ***/
	{
		fn_userlog(c_ServiceName,"d_fut_plus_ord_mrgn_amt : %lf:",d_fut_plus_ord_mrgn_amt);						
		fn_userlog(c_ServiceName,"d_fut_plus_sltp_ord_mrgn_amt : %lf:",d_fut_plus_sltp_ord_mrgn_amt);						
		fn_userlog(c_ServiceName,"d_buy_amt : %lf:",d_buy_amt);						
		fn_userlog(c_ServiceName,"d_sell_amt : %lf:",d_sell_amt);						
	}
	  ptr_fml_Obuf = NULL; /*** Ver 2.5 ***/

		i_returncode = fn_pack_vartofml ( c_ServiceName,
										 c_err_msg,
										 &ptr_fml_Obuf,
										 5,  /*** Ver 1.6 changed from 2 to 3 ***//** ver 2.8 3 changed to 5 **/
										 FFO_U_ORDR_MRGN, (char *)&d_intl_mrgn,
										 FFO_U_TRD_MRGN, (char *)&d_fut_plus_ord_mrgn_amt,
										 FFO_C_ORDR_MRGN, (char *)&d_fut_plus_sltp_ord_mrgn_amt,		/*** Ver 1.6 ***/
                     FFO_ADD_MRGN_AMT  ,(char *)&d_buy_amt, /*** ver 2.8 **/
                 	   FFO_U_MM_TRD_MRGN,(char *)&d_sell_amt /*** ver 2.8 **/
									   );

	   if ( i_returncode != 0 )
		 {
			fn_errlog( c_ServiceName, "S31350", LIBMSG, c_err_msg );
			tpfree ( ( char * ) ptr_fml_Obuf );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf_scall);
			tpfree((char *)ptr_fml_Obuf_scall);
			tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		 }

	 /** tpfree((char *)ptr_fml_Ibuf); *** Ver 1.1 Free the allocated buffer ***/
	 tpfree((char *)ptr_fml_Ibuf_scall); /*** Ver 1.1 Free the allocated buffer ***/
	 tpfree((char *)ptr_fml_Obuf_scall); /*** Ver 1.1 Free the allocated buffer ***/
 }
 /***Ver 2.1 Ends ***/
  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
}
