/******************************************************************************/
/*  Program           : SFO_TRD_CLNT                                          */
/*                                                                            */
/*  Input             : C_PIPE_ID                                             */
/*                                                                            */
/*  Output            :                                                       */
/*                                                                            */
/*  Description       :                                                       */
/*                                                                            */
/*  Log               : 1.0   06-Oct-2009     Sandeep Patil                   */
/*  Log               : 1.1   20-Jun-2011     Sandeep Patil                   */
/*  Log               : 1.2   29-Mar-2012     Navina D.                       */
/*  Log               : 1.3   20-Jun-2012     Sandeep Patil										*/
/*  Log               : 1.4   21-Jun-2012     S. H. 													*/
/*  Log               : 1.5   18-Sep-2012     Navina D.                       */
/*  Log               : 1.6   31-Jan-2014     Sandeep Patil										*/
/*  Log               : 1.7   09-Sep-2014     Samip M													*/
/*  Log               : 1.8   17-Dec-2015     Sachin Birje    								*/
/*  Log               : 1.9   04_Feb-2016     Bhupendra Malik									*/
/*  Log               : 2.0   04-Nov-2016     Bhupendra Malik                 */
/*  Log               : 2.1   24-Nov-2016     Sachin Birje                    */
/*  Log               : 2.2   13-Mar-2019			Parag Kanojia                   */
/******************************************************************************/
/*  Version 1.0 - New Release                                                 */
/*  Version 1.1 - SPAN Changes                                                */
/*  Version 1.2 - Exchange Code Handling- 29-Mar-2012  (Navina D.)            */
/*	Version	1.3	-	SPAN Flag Initialsed To 'N'																	*/
/*	Version	1.4	-	SPAN Flag decided from CLM																	*/
/*  Version 1.5 - Avoid messages lying in tuxedo memory queue for NRI customer*/
/*	Version 1.6	- Ack Number Size Increased from 17 to 20											*/
/*	Version 1.7	- View to FML changes																					*/
/*	Version 1.8	- sleep statement commented      															*/
/*  Version 1.9 - Migration of RI to NRI																			*/
/*  Version 2.0 - NRO PINS check added for nri customer                       */
/*  Version 2.1 - Core Fix Changes                                            */
/*  Version 2.2 - FO_Direct_Connectivity Changes                              */
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <atmi.h>
#include <fml32.h>
#include <Usysflds.h>
#include <sqlca.h>
#include <fo_fml_def.h>
/** #include <fo_view_def.h> **/	/** Commented for Ver 1.7 **/
#include <fo.h>
#include <fn_env.h>
#include <fn_tuxlib.h>
#include <fn_fil_log.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fn_span_lib.h>
#include <fml_rout.h>
#include <fml_def.h>
#include <userlog.h>
#include <fn_session.h>
#include <fo_exg_rcv_lib.h>
#include <fo_spn_rcv_lib.h>			/***	Ver	1.1	***/
#include <fn_read_debug_lvl.h>
#include <time.h>                        
#include <netinet/in.h>									/*** Ver 2.2 ***/
#include <fn_nw_to_host_format_nse.h>		/*** Ver 2.2 ***/
#include <sys/time.h>   /* VER TOL : TUX on LINUX -- Added header (Ravindra) */

char c_time[12];                          

/* VER TOL : TUX on LINUX -- "fn_gettime" name chnaged to "fn_gettime_sfc" (Ravindra) */
void fn_gettime_sfc(void);                     

void SFO_TRD_CLNT ( TPSVCINFO *rqst )
{
  FBFR32 *ptr_fml_ibuf;

  FLDLEN32  ud_len;
  char c_ServiceName[33];
  char *ptr_car_sbuf;
  char c_pipe_id[ 2 + 1 ];
  char c_qspacename[32];
  char c_err_qn[32];
  char c_err_msg[256];
  char c_xchng_cd [ 3+1 ];
  varchar c_trd_dt [ 20 + 1 ];
  varchar c_trd_ref [8 + 1];
  char c_skpord_ref[18 + 1];
  char c_rout_str [ 4 ];
	char c_span_flg	=	'N';			/***	Ver	1.1	***/			/***	Ver	1.3	Span Flag Initialsed To 'N'	***/
	char c_xchng_ack[20];	/***	Ver	1.1	***/						/***	Ver 1.6 Ack Size Increased from 17 To 20	***/
  char c_xchng_accnt[11]; /***  Ver 1.4 ***/
  char c_match_accnt[11]; /***  Ver 1.4 ***/


  int i_rtrn_cd =0;   /*** Ver 2.1, variable initialization ***/
  int i_ret_val =0;   /*** Ver 2.1, variable initialization ***/
  int i_dwnld_flg =0; /*** Ver 2.1, variable initialization ***/
  int i_errno=0;      /*** Ver 2.1, variable initialization ***/
  int i_err [ 7 ];
  int i_ferr [ 7 ];
  int i_cnt=0;        /*** Ver 2.1, variable initialization ***/
  int li_sbuf_len=0;  /*** Ver 2.1, variable initialization ***/
  int i_deferred_dwnld_flg=0;

/***  struct st_cmn_header st_hdr;	*** Commented in Ver 2.2 ***/
  struct st_cmn_header_tr st_hdr;			/*** Added in Ver 2.2 ***/
  struct st_trade_confirm st_trd_conf;
  struct st_trade_confirm_tr st_trd_conf_tr;		/*** Added in Ver 2.2 ***/

	EXEC SQL INCLUDE "table/iai_info_account_info.h"; /*** Ver 1.9 ***/

  strcpy(c_ServiceName, "SFO_TRD_CLNT" );

  INITDBGLVL(c_ServiceName);

  ptr_fml_ibuf = (FBFR32 *)rqst->data;

	MEMSET (c_pipe_id);

  i_err [ 0 ] = Fget32(ptr_fml_ibuf,FFO_PIPE_ID,0,(char *)c_pipe_id, 0);
  i_ferr [ 0 ] = Ferror32;
  i_err [ 1 ] = Fget32(ptr_fml_ibuf,FFO_BIT_FLG,0,(char *)&i_dwnld_flg,0);
  i_ferr [ 1 ] = Ferror32;
  i_err [ 2 ] = Fget32(ptr_fml_ibuf,FFO_NXT_TRD_DT,0,(char *)c_trd_dt.arr,0);
  i_ferr [ 2 ] = Ferror32;
  i_err [ 3 ] = Fget32(ptr_fml_ibuf,FFO_XCHNG_CD,0,(char *)c_xchng_cd,0);
  i_ferr [ 3 ] = Ferror32;
  i_err [ 4 ] = Fget32(ptr_fml_ibuf,FFO_REF_NO,0,(char *)c_trd_ref.arr,0);
  i_ferr [ 4 ] = Ferror32;
  i_err [ 5 ] = Fget32(ptr_fml_ibuf,FFO_ORDR_RFRNC,0,(char *)c_skpord_ref,0);
  i_ferr [ 5 ] = Ferror32;
  i_err [ 6 ] = Fget32(ptr_fml_ibuf,FFO_DWNLD_FLG,0,(char *)&i_deferred_dwnld_flg,0);
  i_ferr [ 6 ] = Ferror32;

  for ( i_cnt=0; i_cnt<=6; i_cnt++ )
  {
    if (i_err[i_cnt] == -1)
    {
      fn_userlog(c_ServiceName, "Error in field no. %d",i_cnt);
      fn_errlog(c_ServiceName, "S31005", Fstrerror32(i_ferr[i_cnt]),c_err_msg );
      tpfree ( ( char * )ptr_fml_ibuf);
      tpreturn(TPFAIL,0 , (char *)NULL, 0, 0 );
    }
  }

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"Inside SFO_TRD_CLNT");
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"I/P Pipe ID Is :%s:",c_pipe_id);
  	fn_userlog(c_ServiceName,"I/P Down Load Flag Is :%d:",i_dwnld_flg);
  	fn_userlog(c_ServiceName,"I/P Exchange Code Is :%s:",c_xchng_cd);
  	fn_userlog(c_ServiceName,"I/P Next Trade Date :%s:",c_trd_dt.arr);
  	fn_userlog(c_ServiceName,"I/P Trade Ref Is :%s:",c_trd_ref.arr);
  	fn_userlog(c_ServiceName,"I/P Skip Order Ref Is :%s:",c_skpord_ref);
  	fn_userlog(c_ServiceName,"I/P Deffered DownLoad Flag Is :%d:",i_deferred_dwnld_flg);
	}

  ptr_car_sbuf =(char *)tpalloc("CARRAY", NULL, MIN_FML_BUF_LEN);

  if (ptr_car_sbuf == NULL)
  {
    fn_errlog( c_ServiceName, "S31010", TPMSG, c_err_msg  );
    tpfree ( ( char * )ptr_fml_ibuf);
    tpreturn(TPFAIL, 0, (char *)NULL, 0, 0 );
  }

  MEMSET(c_qspacename);
  MEMSET(c_err_qn);

  sprintf(c_err_qn,"ERR_%s_Q",c_pipe_id);
  sprintf(c_qspacename,"%s_QSPACE",c_pipe_id);

  if( Fadd32(ptr_fml_ibuf,FML_FILE_NAME, (char *)c_err_qn, 0) == -1)
  {
    fn_errlog( c_ServiceName, "S31015", UNXMSG, c_err_msg  );
    tpfree ( ( char * )ptr_car_sbuf );

    if ( tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
    {
      fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
    }
    tpfree ( ( char * )ptr_fml_ibuf);
    tpreturn(TPFAIL, 0, (char *)NULL, 0, 0 );
  }
	

	if ( Fadd32(ptr_fml_ibuf,FML_GMS_NM, (char *)c_qspacename, 0) == -1 )
  {
    fn_errlog( c_ServiceName, "S31020", UNXMSG, c_err_msg  );

    tpfree ( ( char * )ptr_car_sbuf );

    if ( tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
    {
       fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
    }
    tpfree ( ( char * )ptr_fml_ibuf);
    tpreturn(TPFAIL, 0, (char *)NULL, 0, 0 );
  }

  ud_len = (FLDLEN32)sizeof(li_sbuf_len);
  i_ret_val = Fget32(ptr_fml_ibuf, FFO_TMPLT, 0,(char *)&li_sbuf_len, &ud_len);

  if(i_ret_val == -1 )
  {
    fn_errlog(c_ServiceName,"S31025", DEF_USR,c_err_msg);
    tpfree ( ( char * )ptr_car_sbuf );
    if( tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
    {
       fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
    }
    tpfree ( ( char * )ptr_fml_ibuf);
    tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
  }

	ud_len = (FLDLEN32)li_sbuf_len;
  i_ret_val = Fget32(ptr_fml_ibuf, FFO_CBUF, 0,(char *)ptr_car_sbuf, &ud_len);

  if (i_ret_val == -1)
  {
    fn_errlog(c_ServiceName,"S31030",DEF_USR,c_err_msg);
    tpfree ( ( char * )ptr_car_sbuf );
    if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
    {
       fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
    }
    tpfree ( ( char * )ptr_fml_ibuf);
    tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
  }

  strcpy(c_rout_str,"000");

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName,"c_rout_str is :%s:",c_rout_str);
	}

  MEMSET(st_hdr);

/***  memcpy (&st_hdr,ptr_car_sbuf,sizeof (struct st_cmn_header));	*** Commented in Ver 2.2 ***/
  memcpy (&st_hdr,ptr_car_sbuf,sizeof (struct st_cmn_header_tr));		/*** Added in Ver 2.2 ***/
	st_hdr.si_transaction_code = ntohs(st_hdr.si_transaction_code);		/*** Added in Ver 2.2 ***/

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"Transaction Code Received From Exchange Is :%d:",st_hdr.si_transaction_code);
	}

	if(st_hdr.si_transaction_code==TRADE_CONFIRMATION)		/*** Condition Added in Ver 2.2 ***/
	{															/*** Ver 2.2 ***/
  MEMSET(st_trd_conf);
  memcpy (&st_trd_conf,ptr_car_sbuf,sizeof (struct st_trade_confirm ));

	fn_cnvt_nth_trade_confirm(&st_trd_conf);		/*** Ver 2.2 ***/

	if(DEBUG_MSG_LVL_0)
	{
  	fn_userlog(c_ServiceName,"Exchange Ack Is :%lf:",st_trd_conf.d_response_order_number);
	}

	if(i_dwnld_flg == DOWNLOAD && i_deferred_dwnld_flg == 1 )
  {
  	fn_userlog(c_ServiceName,"Inside Deffered Download Condition");
    if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
    {
    	fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
    }
    tpfree ( ( char * )ptr_fml_ibuf);
    tpfree ( ( char * )ptr_car_sbuf );  /** Ver 2.1 **/
    tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
  }

  /* fn_userlog(c_ServiceName,"Before Going To Sleep For 5 Seconds In TRADE_CONFIRMATION Case");
  sleep(5); **Introduced to avoid race condition between order response and trade **/  


	/***	Ver	1.1	Starts	***/

  sprintf(c_xchng_ack,"%16.0lf",st_trd_conf.d_response_order_number);

	rtrim(c_xchng_ack);
	rtrim(c_xchng_cd);			/***	Ver	1.3	***/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Exchange Ack Is :%s:",c_xchng_ack);
		fn_userlog(c_ServiceName,"Exchange Code Is :%s:",c_xchng_cd);
	}

  /*** sleep(1/5);*** Commented 1.8  *****/

	EXEC SQL					
		SELECT	NVL(FOD_SPN_FLG,'N')
		INTO		:c_span_flg
		FROM		FOD_FO_ORDR_DTLS
		WHERE		FOD_XCHNG_CD  = :c_xchng_cd		/*** Ver 1.2 ***/
		AND     FOD_ACK_NMBR	=	:c_xchng_ack
		AND     ROWNUM < 2;

	if ( SQLCODE	!=	0 && SQLCODE != NO_DATA_FOUND	)
	{
 		fn_userlog(c_ServiceName,"Error While Selecting Span Flag.");

    if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
    {
      fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
    }
    tpfree ( ( char * )ptr_fml_ibuf);
    tpfree ( ( char * )ptr_car_sbuf );  /** Ver 2.1 **/
    tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );

	}	

	/**Ver 1.4 starts **/
	 if( SQLCODE == NO_DATA_FOUND )
	{
		sprintf(c_xchng_accnt,"%s",st_trd_conf.c_account_number);

		rtrim(c_xchng_accnt);	

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Exchange Account Is :%s:",c_xchng_accnt);
		}
	  

		/**** Commented in Ver 1.9 ***
		if ( (strncmp(c_xchng_accnt,"65",2) ==  0 )) ***/
		/*** Ver 1.9 Starts *****/
		MEMSET(sql_iai_type);
		EXEC SQL
    SELECT  'NRE'
		INTO     :sql_iai_type
    FROM    IAI_INFO_ACCOUNT_INFO
    WHERE   IAI_MATCH_ACCOUNT_NO = :c_xchng_accnt
    AND     IAI_TYPE  in ('NRE_NON_PINS','NRE_PINS','NRO_PINS'); /*** NRO_PINS Added in Ver 2.0 **/
	
		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
		{
			fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg );
			Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree ( ( char * )ptr_car_sbuf );  /** Ver 2.1 **/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
		}

		/**** Ver 1.9 Ends ****/
	  SETNULL(sql_iai_type);	
		if(strcmp(sql_iai_type.arr,"NRE") == 0) /*** Added in Ver 1.9 ***/ 
		{

			EXEC SQL
				SELECT  CLM_MTCH_ACCNT
				INTO    :c_match_accnt
				FROM    CLM_CLNT_MSTR,IAI_INFO_ACCOUNT_INFO /*** IAI_INFO_ACCOUNT_INFO Added in Ver 1.9 ***/
				WHERE   CLM_CLNT_CD = :c_xchng_accnt
	/*** Added in Ver 1.9 *** Starts ***/
				AND			IAI_TYPE ='NRO_NON_PINS'
				AND			IAI_MATCH_ACCOUNT_NO=CLM_MTCH_ACCNT;
		/*** Ver 1.9 Ends ***/
		/*** AND			CLM_MTCH_ACCNT like '751%'; Commented in Ver 1.9 **/				/*** Ver 1.5 ***/

			if ( SQLCODE != 0 )
			{
				fn_userlog(c_ServiceName,"Error While Selecting Match Account For UCC Code :%s:",c_xchng_accnt);

				if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
				{
					fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
				}
				tpfree ( ( char * )ptr_fml_ibuf);
        tpfree ( ( char * )ptr_car_sbuf );  /** Ver 2.1 **/
				tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );

			}

			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog(c_ServiceName,"NRI Match Account Is :%s:",c_match_accnt);
			}
		}
		else
		{
			sprintf(c_match_accnt,"%s",st_trd_conf.c_account_number);

			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog(c_ServiceName,"EBA Match Account Is :%s:",c_match_accnt);
			}
		}

		  rtrim(c_match_accnt);

			EXEC SQL
				SELECT  NVL(CLM_SPAN_ALLWD,'N')
				INTO    :c_span_flg
				FROM    CLM_CLNT_MSTR
				WHERE   CLM_MTCH_ACCNT  = :c_match_accnt;

			if ( SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
			{
				fn_userlog(c_ServiceName,"Error While Selecting Span Flag.");
				fn_userlog(c_ServiceName,"SQLCODE Is :%ld:",SQLCODE);

				if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
				{
					fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
				}
				tpfree ( ( char * )ptr_fml_ibuf);
        tpfree ( ( char * )ptr_car_sbuf );  /** Ver 2.1 **/ 
				tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
			}

			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog(c_ServiceName,"SPAN Allowed Flag Is :%c:",c_span_flg);
			}

		}

	/***  Ver 1.4 Ends ***/


	if ( c_span_flg == 'S'  || c_span_flg =='Y' )			/***  Ver 1.4 ***/
	{
		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Inside fn_spntrd_cnfrmtn");
		}

		i_ret_val = fn_spntrd_cnfrmtn	( &st_trd_conf,
                                    c_xchng_cd,
                                    c_pipe_id,
                                    c_rout_str,
                                    c_trd_dt.arr,
                                    c_trd_ref.arr,
                                    i_dwnld_flg,
                                    c_ServiceName,
                                    c_err_msg );

	}
	else													/***  Ver 1.1 ***/
	{
		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Inside fn_trd_confirmation");
		}

  	i_ret_val = fn_trd_confirmation ( &st_trd_conf,
    	                                c_xchng_cd,
      	                              c_pipe_id,
        	                            c_rout_str, 
          	                          c_trd_dt.arr,
            	                        c_trd_ref.arr,
              	                      i_dwnld_flg,
                	                    c_ServiceName,
                  	                  c_err_msg );
	}

  if(i_ret_val == -1)
  {
  	if ( tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
    {
       fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
     }
  }

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName,"After Successful Call To fn_trd_cnfrmtn");
	}

	/*** Ver 2.2 Starts ***/
	}
	else
	{
	MEMSET(st_trd_conf_tr);
  memcpy (&st_trd_conf_tr,ptr_car_sbuf,sizeof (struct st_trade_confirm_tr ));

	fn_cnvt_nth_trade_confirm_tr(&st_trd_conf_tr);

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Exchange Ack Is :%lf:",st_trd_conf_tr.d_response_order_number);
  }

  if(i_dwnld_flg == DOWNLOAD && i_deferred_dwnld_flg == 1 )
  {
    fn_userlog(c_ServiceName,"Inside Deffered Download Condition");
    if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
    {
      fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
    }
    tpfree ( ( char * )ptr_fml_ibuf);
    tpfree ( ( char * )ptr_car_sbuf );
    tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
  }

  sprintf(c_xchng_ack,"%16.0lf",st_trd_conf_tr.d_response_order_number);

  rtrim(c_xchng_ack);
  rtrim(c_xchng_cd);

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Exchange Ack Is :%s:",c_xchng_ack);
    fn_userlog(c_ServiceName,"Exchange Code Is :%s:",c_xchng_cd);
  }

  EXEC SQL
    SELECT  NVL(FOD_SPN_FLG,'N')
    INTO    :c_span_flg
    FROM    FOD_FO_ORDR_DTLS
    WHERE   FOD_XCHNG_CD  = :c_xchng_cd
    AND     FOD_ACK_NMBR  = :c_xchng_ack
    AND     ROWNUM < 2;

  if ( SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_userlog(c_ServiceName,"Error While Selecting Span Flag.");

    if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
    {
      fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
    }
    tpfree ( ( char * )ptr_fml_ibuf);
    tpfree ( ( char * )ptr_car_sbuf );  /** Ver 2.1 **/
    tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );

  }

   if( SQLCODE == NO_DATA_FOUND )
  {
    sprintf(c_xchng_accnt,"%s",st_trd_conf_tr.c_account_number);

    rtrim(c_xchng_accnt);

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Exchange Account Is :%s:",c_xchng_accnt);
    }

    MEMSET(sql_iai_type);
    EXEC SQL
    SELECT  'NRE'
    INTO     :sql_iai_type
    FROM    IAI_INFO_ACCOUNT_INFO
    WHERE   IAI_MATCH_ACCOUNT_NO = :c_xchng_accnt
    AND     IAI_TYPE  in ('NRE_NON_PINS','NRE_PINS','NRO_PINS');

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg );
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpfree ( ( char * )ptr_car_sbuf );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }

    SETNULL(sql_iai_type);
    if(strcmp(sql_iai_type.arr,"NRE") == 0)
    {

      EXEC SQL
        SELECT  CLM_MTCH_ACCNT
        INTO    :c_match_accnt
        FROM    CLM_CLNT_MSTR,IAI_INFO_ACCOUNT_INFO
        WHERE   CLM_CLNT_CD = :c_xchng_accnt
        AND     IAI_TYPE ='NRO_NON_PINS'
        AND     IAI_MATCH_ACCOUNT_NO=CLM_MTCH_ACCNT;

			if ( SQLCODE != 0 )
      {
        fn_userlog(c_ServiceName,"Error While Selecting Match Account For UCC Code :%s:",c_xchng_accnt);

        if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
        {
          fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
        }
        tpfree ( ( char * )ptr_fml_ibuf);
        tpfree ( ( char * )ptr_car_sbuf );
        tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );

      }

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"NRI Match Account Is :%s:",c_match_accnt);
      }
    }
    else
    {
      sprintf(c_match_accnt,"%s",st_trd_conf_tr.c_account_number);

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"EBA Match Account Is :%s:",c_match_accnt);
      }
    }

      rtrim(c_match_accnt);

      EXEC SQL
        SELECT  NVL(CLM_SPAN_ALLWD,'N')
				INTO    :c_span_flg
        FROM    CLM_CLNT_MSTR
        WHERE   CLM_MTCH_ACCNT  = :c_match_accnt;

      if ( SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_userlog(c_ServiceName,"Error While Selecting Span Flag.");
        fn_userlog(c_ServiceName,"SQLCODE Is :%ld:",SQLCODE);

        if(tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
        {
          fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
        }
        tpfree ( ( char * )ptr_fml_ibuf);
        tpfree ( ( char * )ptr_car_sbuf );
        tpreturn ( TPFAIL, 0, (char *)NULL, 0, 0 );
      }

      if(DEBUG_MSG_LVL_0)
      {
        fn_userlog(c_ServiceName,"SPAN Allowed Flag Is :%c:",c_span_flg);
      }

    }

  if ( c_span_flg == 'S'  || c_span_flg =='Y' )
  {
		if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Inside fn_spntrd_cnfrmtn_trim");
    }

    i_ret_val = fn_spntrd_cnfrmtn_trim ( &st_trd_conf_tr,
                                    c_xchng_cd,
                                    c_pipe_id,
                                    c_rout_str,
                                    c_trd_dt.arr,
                                    c_trd_ref.arr,
                                    i_dwnld_flg,
                                    c_ServiceName,
                                    c_err_msg );

  }
  else
  {
    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Inside fn_trd_confirmation_trim");
    }

    i_ret_val = fn_trd_confirmation_trim ( &st_trd_conf_tr,
                                      c_xchng_cd,
                                      c_pipe_id,
                                      c_rout_str,
                                      c_trd_dt.arr,
                                      c_trd_ref.arr,
                                      i_dwnld_flg,
                                      c_ServiceName,
                                      c_err_msg );
  }

	if(i_ret_val == -1)
  {
    if ( tpacall("SVC_ENQ_MSG", (char *)ptr_fml_ibuf,  0, TPNOTRAN|TPNOREPLY) == -1)
    {
       fn_userlog(c_ServiceName,"S3130",TPMSG, DEF_USR, DEF_SSSN, c_err_msg);
     }
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"After Successful Call To fn_trd_cnfrmtn_trim");
  }
	}
	/*** Ver 2.2 Ends ***/
  tpfree ( (char *)ptr_car_sbuf );
	tpfree ( (char *)ptr_fml_ibuf );

	if ( i_ret_val == -1 )
  {
		tpreturn(TPFAIL, 0, (char *)NULL, 0, 0);
 	}	

	tpreturn(TPSUCCESS, 0, (char *)NULL, 0, 0);

}
void fn_gettime_sfc()
 {
  int i_mili_sec = 0;
  struct timeval tv;
  struct timezone tz;
  struct tm *tm;

  gettimeofday(&tv, &tz);
  tm=localtime(&tv.tv_sec);
  i_mili_sec= tv.tv_usec/1000;
  sprintf(c_time,"%d:%d:%d:%d",tm->tm_hour, tm->tm_min, tm->tm_sec, i_mili_sec);
  return;
 }
