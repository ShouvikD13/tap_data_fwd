/******************************************************************************/
/*  Program           : SFO_SPD_ACK                                           */
/*                                                                            */
/*  Input             : vw_spdxchbk                                           */
/*                                                                            */
/*  Output            : vw_err_msg                                            */
/*                                                                            */
/*  Description       : This service calls the appropiate acknowledgement     */
/*                      service in a loop.                                    */
/*                                                                            */
/*                                                                            */
/*  Log               : 1.0   14-Feb-2002   Vinod Banjan                      */
/*										:	1.1		03-Mar-2008		SKS|AIX Migration									*/
/*										:	1.2		14-Mar-2018		Sachin Birje    									*/
/*                                                                            */
/******************************************************************************/
/*  1.0  -  New Release                                                       */
/*  1.2  -  Rollover with Spread Changes                                      */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <eba_to_ors.h>
#include <fo_view_def.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fn_log.h>
#include <fn_ddr.h>
#include <fn_read_debug_lvl.h>  /*  Ver 1.1 : Added   */

void SFO_SPD_ACK( TPSVCINFO *rqst )
{
  char  c_ServiceName[33];
  char  c_svc_nm[33];
  char  c_err_msg[256];
  int   i_ch_val;
  int   i_rec_cnt;
  int   i;

  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_spdxchbk *ptr_st_spd_xchbk;
    struct vw_xchngbook st_xchngbook;
    struct vw_orderbook st_i_ordrbk;
  EXEC SQL END DECLARE SECTION;

  struct vw_err_msg *ptr_st_err_msg;

  ptr_st_spd_xchbk = ( struct vw_spdxchbk *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.1 : Added   */

  ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
  if ( ptr_st_err_msg ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31005", TPMSG, c_err_msg );
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }
  memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_spd_xchbk->c_rout_crt );

	if ( ( ptr_st_spd_xchbk->l_ors_msg_typ[0] == ORS_3LN_ORD_ACPT ) || 
			 ( ptr_st_spd_xchbk->l_ors_msg_typ[0] == ORS_3LN_ORD_RJCT ) || 
			 ( ptr_st_spd_xchbk->l_ors_msg_typ[0] == ORS_3L_ORD_CNCL )   )
	{
		i_rec_cnt = 3;
	}
	else
	{
		i_rec_cnt = 2;
	}

	if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.1 : Debug level Change  */
		fn_userlog( c_ServiceName, "i_rec_cnt is :%d:", i_rec_cnt );
	}

	for ( i = 0; i < i_rec_cnt; i++ )
	{
		strcpy ( st_i_ordrbk.c_ordr_rfrnc, ptr_st_spd_xchbk->c_ordr_rfrnc[i] );
		st_i_ordrbk.c_oprn_typ = FOR_VIEW;

		if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.1 : Debug level Change  */
			fn_userlog( c_ServiceName, " :%d: ptr_st_spd_xchbk->c_ordr_rfrnc[i] is :%s:", i,ptr_st_spd_xchbk->c_ordr_rfrnc[i] ); /** i added in ver 1.2 **/
			fn_userlog( c_ServiceName, "st_i_ordrbk.c_ordr_rfrnc is :%s:", st_i_ordrbk.c_ordr_rfrnc );
		}

  	/*** Added for Order Routing ***/
		fn_cpy_ddr ( st_i_ordrbk.c_rout_crt );

		i_ch_val = fn_call_svc(	c_ServiceName,
                         		c_err_msg,
                         		&st_i_ordrbk,
                         		&st_i_ordrbk,
                         		"vw_orderbook",
                         		"vw_orderbook",
                         		sizeof ( st_i_ordrbk ),
                         		sizeof ( st_i_ordrbk ),
                         		0,
                         		"SFO_REF_TO_ORD" );

  	if ( i_ch_val != 0 )
  	{
    	fn_errlog ( c_ServiceName, "S31010", LIBMSG, c_err_msg );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  	}


		strcpy ( st_xchngbook.c_xchng_cd,ptr_st_spd_xchbk->c_xchng_cd[i] );	
		strcpy ( st_xchngbook.c_ordr_rfrnc,ptr_st_spd_xchbk->c_ordr_rfrnc[i] );	
		strcpy ( st_xchngbook.c_pipe_id,ptr_st_spd_xchbk->c_pipe_id[i] );	
		strcpy ( st_xchngbook.c_mod_trd_dt,ptr_st_spd_xchbk->c_mod_trd_dt[i] );	
		st_xchngbook.l_ord_seq = ptr_st_spd_xchbk->l_ord_seq[i];
		st_xchngbook.c_slm_flg = ptr_st_spd_xchbk->c_slm_flg[i];
		st_xchngbook.l_dsclsd_qty = ptr_st_spd_xchbk->l_dsclsd_qty[i];
		st_xchngbook.l_ord_tot_qty = ptr_st_spd_xchbk->l_ord_tot_qty[i];
		st_xchngbook.l_ord_lmt_rt = ptr_st_spd_xchbk->l_ord_lmt_rt[i];
		st_xchngbook.l_stp_lss_tgr = ptr_st_spd_xchbk->l_stp_lss_tgr[i];
		st_xchngbook.l_mdfctn_cntr = ptr_st_spd_xchbk->l_mdfctn_cntr[i];
		strcpy ( st_xchngbook.c_valid_dt,ptr_st_spd_xchbk->c_valid_dt[i] );	
		st_xchngbook.c_ord_typ = ptr_st_spd_xchbk->c_ord_typ[i];
		st_xchngbook.c_sprd_ord_ind = ptr_st_spd_xchbk->c_sprd_ord_ind[i];
		st_xchngbook.c_req_typ = ptr_st_spd_xchbk->c_req_typ[i];
		st_xchngbook.l_quote = ptr_st_spd_xchbk->l_quote[i];
		strcpy ( st_xchngbook.c_qt_tm,ptr_st_spd_xchbk->c_qt_tm[i] );	
		strcpy ( st_xchngbook.c_rqst_tm,ptr_st_spd_xchbk->c_rqst_tm[i] );	
		strcpy ( st_xchngbook.c_frwrd_tm,ptr_st_spd_xchbk->c_frwrd_tm[i] );	
		st_xchngbook.c_plcd_stts = ptr_st_spd_xchbk->c_plcd_stts[i];
		st_xchngbook.c_rms_prcsd_flg = ptr_st_spd_xchbk->c_rms_prcsd_flg[i];
		strcpy ( st_xchngbook.c_ack_tm,ptr_st_spd_xchbk->c_ack_tm[i] );	
		strcpy ( st_xchngbook.c_xchng_rmrks,ptr_st_spd_xchbk->c_xchng_rmrks[i] );	
		st_xchngbook.c_ex_ordr_typ = ptr_st_spd_xchbk->c_ex_ordr_typ[i];
		st_xchngbook.l_xchng_can_qty = ptr_st_spd_xchbk->l_xchng_can_qty[i];
		st_xchngbook.l_bit_flg = ptr_st_spd_xchbk->l_bit_flg[i];
		st_xchngbook.c_spl_flg = ptr_st_spd_xchbk->c_spl_flg[i];
		st_xchngbook.c_ordr_flw = ptr_st_spd_xchbk->c_ordr_flw[i];
		st_xchngbook.c_oprn_typ = ptr_st_spd_xchbk->c_oprn_typ[i];
		st_xchngbook.d_jiffy = ptr_st_spd_xchbk->d_jiffy[i];
		st_xchngbook.l_dwnld_flg = ptr_st_spd_xchbk->l_dwnld_flg[i];
		strcpy ( st_xchngbook.c_entry_dt_tm,ptr_st_spd_xchbk->c_entry_dt_tm[i] );	

    fn_userlog(c_ServiceName,"MSG TYP ptr_st_spd_xchbk->l_ors_msg_typ is :%ld: st_i_ordrbk.c_ordr_rfrnc :%s:",ptr_st_spd_xchbk->l_ors_msg_typ[i],st_i_ordrbk.c_ordr_rfrnc); /*** ver 1.2 ***/

		if ( ( ptr_st_spd_xchbk->l_ors_msg_typ[i] == ORS_SPN_ORD_ACPT ) || 
				 ( ptr_st_spd_xchbk->l_ors_msg_typ[i] == ORS_2LN_ORD_ACPT ) ||
				 ( ptr_st_spd_xchbk->l_ors_msg_typ[i] == ORS_3LN_ORD_ACPT ) )
		{
			st_xchngbook.l_ors_msg_typ = ORS_NEW_ORD_ACPT;
		}
		else if ( ( ptr_st_spd_xchbk->l_ors_msg_typ[i] == ORS_SPN_ORD_RJCT ) || 
				 			( ptr_st_spd_xchbk->l_ors_msg_typ[i] == ORS_2LN_ORD_RJCT ) ||
				 			(	ptr_st_spd_xchbk->l_ors_msg_typ[i] == ORS_3LN_ORD_RJCT ) )
		{
			st_xchngbook.l_ors_msg_typ = ORS_NEW_ORD_RJCT;
		}
    /*** Ver 1.2 Starts here ***/
    else if( ptr_st_spd_xchbk->l_ors_msg_typ[i] == ORS_SPRD_MOD_ACPT )
    {
      st_xchngbook.l_ors_msg_typ = ORS_MOD_ORD_ACPT;  
    }
    else if( ptr_st_spd_xchbk->l_ors_msg_typ[i] == ORS_SPRD_MOD_RJCT )
    {
      st_xchngbook.l_ors_msg_typ = ORS_MOD_ORD_RJCT;
    }
    else if( ptr_st_spd_xchbk->l_ors_msg_typ[i] == ORS_SPRD_CAN_RJCT )
    {
      st_xchngbook.l_ors_msg_typ = ORS_CAN_ORD_RJCT;
    }
    else if( ptr_st_spd_xchbk->l_ors_msg_typ[i] == ORS_SPRD_CAN_ACPT )
    {
      st_xchngbook.l_ors_msg_typ = ORS_CAN_ORD_ACPT;
    }
    /*** Ver 1.2 Ends here ****/
		else
		{
			st_xchngbook.l_ors_msg_typ = ptr_st_spd_xchbk->l_ors_msg_typ[i];
		}
   fn_userlog(c_ServiceName,"MSG TYP AFTER :%ld: st_i_ordrbk.c_ordr_rfrnc :%s:",st_xchngbook.l_ors_msg_typ,st_i_ordrbk.c_ordr_rfrnc); 	/*** ver 1.2 ***/
 
		/*** Added for Order Routing ***/
		fn_cpy_ddr ( st_xchngbook.c_rout_crt );
	

		if ( st_i_ordrbk.c_prd_typ == FUTURES )
		{
			strcpy( c_svc_nm,"SFO_FUT_ACK");
		}
		else
		{
			strcpy( c_svc_nm,"SFO_OPT_ACK");
		}

		fn_userlog(c_ServiceName,"The c_rout_crt is :%s:",st_xchngbook.c_rout_crt);
		fn_userlog(c_ServiceName,"The c_svc_nm II is :%s:",c_svc_nm);

		i_ch_val = fn_call_svc(	c_ServiceName,
                         		c_err_msg,
                         		&st_xchngbook,
                         		&st_xchngbook,
                         		"vw_xchngbook",
                         		"vw_xchngbook",
                         		sizeof ( st_xchngbook ),
                         		sizeof ( st_xchngbook ),
                         		0,
                         		c_svc_nm);
  	if ( i_ch_val != 0 )
  	{
    	fn_errlog ( c_ServiceName, "S31015", LIBMSG, c_err_msg );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  	}

	}

  tpfree ( ( char * ) ptr_st_err_msg );
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_spd_xchbk, 0, 0 );

}
