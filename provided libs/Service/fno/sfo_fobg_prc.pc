/*********************************************************************************/
/*  Program           : SFO_FOBG_PRC                                         */
/*                                                                               */
/*  Description       : This process shall block additional or release extra		 */ 
/*											blocked shares funds 																		 */
/*																																							 */
/*  Log               : 1.0  Kiran Itkar	( 22-Jun-2021 )												 */		 
/*  Log               : 1.1  Suchita Dabir ( 18-Nov-2021 )											 */		 
/*																																							 */
/*********************************************************************************/
/*  Log               : 1.1 Minor changes                                        */
/*********************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fn_log.h>
#include <fml_def.h>
#include <fml_rout.h>
#include <fo_view_def.h>
#include <fo_fml_def.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_pos.h>
#include <fn_span_lib.h>
#include <fn_ddr.h>
#include <fo.h>
#include <fn_read_debug_lvl.h>
#include <math.h>

#define MIN(a,b) ((a) < (b) ? (a) : (b))

struct st_pstn_actn st_pstn_actn;
struct st_err_msg st_err_msg;
 
struct vw_pstn_actn st_nspn_pstn_actn; /** ver 1.1 ***/
struct vw_err_msg *ptr_st_err_msg; /** ver 1.1 **/

void SFO_FOBG_PRC (	TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
 	FBFR32 *ptr_fml_Obuf;

	int   i_err[21];
  int   i_ferr[21];
	int   i_trnsctn;
	int 	i_ch_val=0;
	int		i=0;
	int   i_prdct_nm=0;
	int 	i_returncode=0;
	int		i_qty=0;
	/*int		i_prt_id=1; commented in ver 1.1 **/
  long  l_prt_id = 1; /** ver 1.1 ***/
	int   i_actn_id=0;
	char  c_err_msg[256]="\0";
  char c_final_remarks[256]="\0";
	char	c_remarks[256]="icicidirect";
	char c_ServiceName[33]="\0";
	char c_cln_mtch_accnt[11]="\0";
	char c_usr_id[15]="\0";
	char c_channel[4]="SYS";
	char c_expiry_dt[12]="\0";
	char c_stck_nm[21]="\0";
	char c_usm_ip_id[21]="\0";
	char c_oblgn_dt[12]="\0";
	char c_prcs_dt[12]="\0";
	char c_narration_id[4]="\0";
	char c_xchng_cd[4] = "NFO";
	char c_prcs_flg='\0';
	char c_prdct_typ='\0';
	char c_dr_without_lmt_flg='\0';
	char c_blk_ublk='\0';
	char c_span_flg='\0';
	char c_isin_no[21]="\0";
	char c_stck_cd[21]="\0";	
	char c_dp_id[9]="\0";
  char c_dp_clnt_id[9]="\0";
	char c_actn_typ='\0';
	char c_dam_trn_flg='A';
  char c_trn_type='B';
	char c_batch_flg='B';
	char c_stck_sg='N';
	char c_trd_trd_flw='Y';
	char c_sq_flg='P';
	char c_trd_trd_ref[30]="N";
	
	long l_settlment_no=0;
	long l_buy_volume=0;
	long l_sell_volume=0;
	long l_tifd_qty=0;
	long l_recvlength=0;
	long l_sssn_id=0;
	long l_trn_id=0;
	long l_qty=0;

  double d_payout_amt=0.0;/** ver 1.1 **/
  long long ll_payout_amt = 0;/** ver 1.1 **/

	double d_sell_volume=0.0;
	double d_buy_amt=0.0;
	double d_sell_amt=0.0;
	double d_payin_succ_amt=0.0;
	double d_balance_amt = 0.0;
	double d_qty = 0.0;
  double d_qty_to_update = 0.0;
	double d_dlvry_oblgamt_blckd=0.0;
	double d_dlvry_qty_blckd=0.0;
	double d_dlvry_amt_blckd=0.0;
	double d_dbd_tot_qty=0.0;
	double d_dbd_qty_blckd=0.0;
	double d_dbd_free_qty=0.0;
	double d_brokerage=0.0;
	double d_stmp_comm=0.0;
	double d_trn_charge=0.0;
	double d_buy_amt_blckd=0.0;
	double d_buy_amt_crrnt=0.0;
	double d_buy_amt_total=0.0;
	double d_trnsctn_prc=0.0;
	double d_buy_qty_crrnt=0.0;

	MEMSET (st_pstn_actn);
  MEMSET (st_nspn_pstn_actn); /*** ver 1.1 **/

  /** ver 1.1 starts ***/
  ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
   if ( ptr_st_err_msg ==  NULL )
   {
     fn_errlog ( c_ServiceName, "S31005", LIBMSG, c_err_msg );
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
   }
 /*** ver 1.1 ends ***/

	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
 	strcpy( c_ServiceName, rqst->name );	

	i_err   [ 0 ]   = Fget32( ptr_fml_Ibuf ,FFO_REQ_TYP,0,(char *) &c_actn_typ,0);/** ver 1.1. FFO_ACTN_TYP changed to FFO_REQ_TYP ***/
	i_ferr  [ 0 ]   = Ferror32;
	i_err   [ 1 ]   = Fget32( ptr_fml_Ibuf ,FML_MATCH_ACCOUNT_NO,0,(char *) c_cln_mtch_accnt,0);
	i_ferr  [ 1 ]   = Ferror32;
	for(i=0;i<2;i++)
  {
    if(i_err[i] == -1 )
    {
      fn_userlog( c_ServiceName, " Error in field no %d", i);      
      fn_errlog(c_ServiceName, "S31010", Fstrerror32(i_ferr[i]), c_err_msg);
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
    }
  }

 if(DEBUG_MSG_LVL_3){
	fn_userlog( c_ServiceName, "c_actn_typ :%c:",c_actn_typ);
  }

	if( c_actn_typ == 'A' )
	{
		i_err   [ 2 ]   = Fget32( ptr_fml_Ibuf ,FML_STTLMNT_DT,0,(char *) c_stck_nm,0);
		i_ferr  [ 2 ]   = Ferror32;
		i_err   [ 3 ]   = Fget32( ptr_fml_Ibuf ,FML_USR_DT_BRTH,0,(char *) c_oblgn_dt,0);	
		i_ferr  [ 3 ]   = Ferror32;
		i_err   [ 4 ]   = Fget32( ptr_fml_Ibuf ,FML_TRNSCTN_QTY,0,(char *) &l_buy_volume,0);
		i_ferr  [ 4 ]   = Ferror32;
		i_err   [ 5 ]   = Fget32( ptr_fml_Ibuf ,FML_DELIVERY_VAL,0,(char *) &d_buy_amt,0);
		i_ferr  [ 5 ]   = Ferror32;
		i_err   [ 6 ]   = Fget32( ptr_fml_Ibuf ,FML_QTY_HLD,0, (char *) &l_sell_volume,0);
		i_ferr  [ 6 ]   = Ferror32;
		i_err   [ 7 ]   = Fget32( ptr_fml_Ibuf ,FML_OPN_RT,0, (char *) &d_sell_amt,0);
		i_ferr  [ 7 ]   = Ferror32;
		i_err   [ 8 ]   = Fget32( ptr_fml_Ibuf ,FML_CLS_RT,0, (char *) &d_payin_succ_amt,0);
		i_ferr  [ 8 ]   = Ferror32;
		i_err   [ 9 ]   = Fget32( ptr_fml_Ibuf ,FML_OTRNSCTN_QTY,0, (char *) &l_tifd_qty,0);
		i_ferr  [ 9 ]   = Ferror32;
		i_err   [ 10 ]   = Fget32( ptr_fml_Ibuf ,FML_STCK_FRM_ALLWD,0, (char *) c_prcs_dt,0);
		i_ferr  [ 10 ]   = Ferror32;
		i_err   [ 11 ]   = Fget32( ptr_fml_Ibuf ,FML_PRTFLO_EXISTS,0, (char *) &c_prcs_flg,0);
		i_ferr  [ 11 ]   = Ferror32; 
		i_err   [ 12 ]   = Fget32( ptr_fml_Ibuf ,FML_QTY,0,(char *) &l_settlment_no,0);
  	i_ferr  [ 12 ]   = Ferror32;

		for(i=2;i<13;i++)
  	{
    	if(i_err[i] == -1 )
    	{
      	fn_userlog( c_ServiceName, " Error in field no %d", i);
      	fn_errlog(c_ServiceName, "S31015", Fstrerror32(i_ferr[i]), c_err_msg);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
      	tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
    	}
  	}	
	}
	if( c_actn_typ == 'B' )
	{
		if(Fget32( ptr_fml_Ibuf,FFO_TOT_OFFR_QTY,0,(char *)&d_dlvry_amt_blckd,0 ) == -1)
		{
			fn_errlog( c_ServiceName, "S22222", LIBMSG, c_err_msg  );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		if(Fget32( ptr_fml_Ibuf,FFO_PRDCT_TYP,0,(char *)&c_prdct_typ,0 ) == -1)
		{
			fn_errlog( c_ServiceName, "S22333", LIBMSG, c_err_msg);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		if(Fget32( ptr_fml_Ibuf,FML_STTLMNT_DT,0,(char *)c_stck_nm,0 ) == -1)
    {
      fn_errlog( c_ServiceName, "S22333", LIBMSG, c_err_msg  );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

	}
	if( c_actn_typ == 'C' )
	{
		if(Fget32( ptr_fml_Ibuf,FFO_TOT_OFFR_QTY,0,(char *)&d_dlvry_qty_blckd,0 ) == -1)
		{
      fn_errlog( c_ServiceName, "S22222", LIBMSG, c_err_msg  );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		if(Fget32( ptr_fml_Ibuf,FFO_PRDCT_TYP,0,(char *)&c_prdct_typ,0 ) == -1)
    {
      fn_errlog( c_ServiceName, "S22333", LIBMSG, c_err_msg  );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		if(Fget32( ptr_fml_Ibuf,FML_STTLMNT_DT,0,(char *)c_stck_nm,0 ) == -1)
    {
      fn_errlog( c_ServiceName, "S22333", LIBMSG, c_err_msg  );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

	}
	
	fn_userlog( c_ServiceName,"c_actn_typ :%c:",c_actn_typ);
	
	if( c_actn_typ == 'A' )
	{
		rtrim(c_cln_mtch_accnt);
		rtrim(c_stck_nm);
		rtrim(c_oblgn_dt);
		rtrim(c_prcs_dt);

    if(DEBUG_MSG_LVL_3){
		fn_userlog( c_ServiceName,"INSIDE c_actn_typ == A");
		fn_userlog( c_ServiceName,"l_settlment_no :%ld:",l_settlment_no);
		fn_userlog( c_ServiceName,"c_cln_mtch_accnt :%s:",c_cln_mtch_accnt);
		fn_userlog( c_ServiceName,"c_stck_nm :%s:",c_stck_nm);
		fn_userlog( c_ServiceName,"c_oblgn_dt :%s:",c_oblgn_dt);
		fn_userlog( c_ServiceName,"l_buy_volume :%ld:",l_buy_volume);
		fn_userlog( c_ServiceName,"d_buy_amt :%lf:",d_buy_amt);
		fn_userlog( c_ServiceName,"l_sell_volume :%ld:",l_sell_volume);
		fn_userlog( c_ServiceName,"d_sell_amt :%lf:",d_sell_amt);
		fn_userlog( c_ServiceName,"d_payin_succ_amt :%lf:",d_payin_succ_amt);
		fn_userlog( c_ServiceName,"l_tifd_qty :%ld:",l_tifd_qty);
		fn_userlog( c_ServiceName,"c_prcs_dt :%s:",c_prcs_dt);
		fn_userlog( c_ServiceName,"c_prcs_flg :%c:",c_prcs_flg);	
    }
		i_trnsctn =  fn_begintran( c_ServiceName, c_err_msg);

  	if ( i_trnsctn == -1 )
  	{
   		fn_userlog (c_ServiceName,"Failed in initial begin transaction");
    	fn_errlog ( c_ServiceName, "S31020", TPMSG, c_err_msg);
   		return ;
  	}

		/*** Check Span ****/
		EXEC SQL
  		SELECT  NVL(CLM_SPAN_ALLWD,'N')
  		INTO    :c_span_flg
  		FROM    CLM_CLNT_MSTR
  		WHERE   CLM_MTCH_ACCNT  = :c_cln_mtch_accnt;

  	if(SQLCODE  !=  0 )
  	{
    	fn_userlog( c_ServiceName,"Error while selecting SPAN flag");
    	fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg  );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
   if(DEBUG_MSG_LVL_3){
  	fn_userlog( c_ServiceName,"SPAN flag is |%c|",c_span_flg);
   }
		/*** Fetch DP id ****/
		EXEC SQL
    	SELECT  SEM_MAP_VL
    	INTO    :c_isin_no
    	FROM    sem_stck_map
    	WHERE   SEM_ENTTY =10 
    	AND     SEM_STCK_CD = :c_stck_nm; 

    if(SQLCODE  !=  0 )
    {
      fn_userlog( c_ServiceName,"Error while selecting isin number");
      fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg  );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }	

		if( l_buy_volume > 0 )
		{

			EXEC SQL
    		SELECT  CLD_DP_ID,
        		    CLD_DP_CLNT_ID
    		INTO    :c_dp_id,
      		      :c_dp_clnt_id
    		FROM    CLD_DP_ACCTS
    		WHERE   CLD_DP_ACC_TYP = 'E'
    		AND     CLD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
				AND			ROWNUM=1;

			if(SQLCODE  !=  0 ) 
    	{
      	fn_userlog( c_ServiceName,"Error while selecting dp id and dp client id");
      	fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

			rtrim(c_dp_id);
      rtrim(c_dp_clnt_id);
      rtrim(c_isin_no);
      if(DEBUG_MSG_LVL_3){
      fn_userlog( c_ServiceName,"c_cln_mtch_accnt :%s:",c_cln_mtch_accnt);
      fn_userlog( c_ServiceName,"c_dp_id :%s:",c_dp_id);
      fn_userlog( c_ServiceName,"c_dp_clnt_id :%s:",c_dp_clnt_id);
      fn_userlog( c_ServiceName,"c_isin_no :%s:",c_isin_no);
      fn_userlog( c_ServiceName,"c_stck_nm :%s:",c_stck_nm);
     }
			if( c_span_flg == 'Y' )
			{
				EXEC SQL
				SELECT 	NVL(sum(NVL(FCP_DLVRY_OBLGAMT_BLCKD,0)),0)
				INTO		:d_dlvry_oblgamt_blckd 
				FROM 		FCP_FO_SPN_CNTRCT_PSTN 
				WHERE 	FCP_CLM_MTCH_ACCNT	= :c_cln_mtch_accnt
				AND			FCP_UNDRLYNG = :c_stck_nm;

				if(SQLCODE  !=  0 )
				{
					fn_userlog( c_ServiceName,"Error while fetching delivery obligation blocked");
					fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg  );
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
        if(DEBUG_MSG_LVL_3){ 
				fn_userlog( c_ServiceName,"d_dlvry_oblgamt_blckd :%lf:",d_dlvry_oblgamt_blckd);
				fn_userlog( c_ServiceName, "Releasing  Blocked Margin");
		    }

				strcpy( c_narration_id ,REL_PHYSICAL_DELIVERY_MARGIN);
				d_balance_amt  = 0.0;
				c_dr_without_lmt_flg = DEBIT_TILL_LIMIT ;
        MEMSET(c_final_remarks);
        sprintf( c_final_remarks, ":%s:%s:",c_cln_mtch_accnt,c_stck_nm);
        rtrim(c_final_remarks);
        strcpy(st_pstn_actn.c_ref_rmrks,c_final_remarks);

				strcpy(st_pstn_actn.c_xchng_cd,c_xchng_cd);
				strcpy(st_pstn_actn.c_cln_mtch_accnt,c_cln_mtch_accnt);
        if(DEBUG_MSG_LVL_3){
				fn_userlog( c_ServiceName,"ptr_st_pstn_actn.c_xchng_cd :%s:",st_pstn_actn.c_xchng_cd);
				fn_userlog( c_ServiceName,"ptr_st_pstn_actn.c_cln_mtch_accnt :%s:",st_pstn_actn.c_cln_mtch_accnt);
        }
	
				if ( d_dlvry_oblgamt_blckd != 0 )
				{ 
					i_returncode = fn_upd_spnlimits( c_ServiceName,
                                    	 &st_pstn_actn,	
                                    	 &st_err_msg,
                                    	 c_narration_id,
                                    	 c_dr_without_lmt_flg,
                                    	 d_dlvry_oblgamt_blckd,
                                    	 &d_balance_amt);	

					if ( i_returncode != 0 )
      		{
        		fn_errlog( c_ServiceName, "S31045",LIBMSG,c_err_msg);
        		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      		}
					

					EXEC SQL
					UPDATE 	FCP_FO_SPN_CNTRCT_PSTN
					SET 		FCP_DLVRY_OBLGAMT_BLCKD = 0
					WHERE   FCP_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
					AND			FCP_UNDRLYNG				= :c_stck_nm;

					if ( SQLCODE != 0 )
  				{
    				fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg  );
    				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    				tpreturn(TPFAIL, ERR_BFR, (char *)NULL, 0, 0 );
  				}
				}
	
			}
			else if( c_span_flg == 'N' )
			{
				EXEC SQL
				select 	sum(amt)
				into		:d_dlvry_oblgamt_blckd
				from
				(
        	SELECT 	NVL(sum(NVL(FFP_DLVRY_OBLGAMT_BLCKD,0)),0) amt
					FROM 		FFP_FO_FUTURES_PSTN 
					WHERE 	FFP_CLM_MTCH_ACCNT			=	:c_cln_mtch_accnt
					AND			FFP_UNDRLYNG						=	:c_stck_nm
					AND 		FFP_DLVRY_OBLGAMT_BLCKD!= 0
					UNION ALL
					SELECT 	NVL(sum(NVL(FOP_DLVRY_OBLGAMT_BLCKD,0)),0) amt
					FROM 		FOP_FO_OPTIONS_PSTN 
					WHERE 	FOP_CLM_MTCH_ACCNT			=	:c_cln_mtch_accnt
					AND			FOP_UNDRLYNG						=	:c_stck_nm
					AND 		FOP_DLVRY_OBLGAMT_BLCKD!=	0
				);
		
				if(SQLCODE  !=  0 )
      	{
        	fn_userlog( c_ServiceName,"Error while fetching delivery obligation blocked");
        	fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg  );
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
        if(DEBUG_MSG_LVL_3){
     	 	fn_userlog( c_ServiceName,"d_dlvry_oblgamt_blckd :%lf:",d_dlvry_oblgamt_blckd);
      	fn_userlog( c_ServiceName, "Releasing  Blocked Margin");
        }
      	strcpy( c_narration_id ,REL_PHYSICAL_DELIVERY_MARGIN);
      	d_balance_amt  = 0.0;
      	c_dr_without_lmt_flg = DEBIT_TILL_LIMIT ;
        MEMSET(c_final_remarks);
        sprintf( c_final_remarks, ":%s:%s:",c_cln_mtch_accnt,c_stck_nm);
        rtrim(c_final_remarks);
        strcpy(st_pstn_actn.c_ref_rmrks,c_final_remarks);
				strcpy(st_pstn_actn.c_xchng_cd,c_xchng_cd);
        strcpy(st_pstn_actn.c_cln_mtch_accnt,c_cln_mtch_accnt);

				if ( d_dlvry_oblgamt_blckd != 0 )
				{
					i_returncode = fn_upd_spnlimits( c_ServiceName,
                                       &st_pstn_actn, 
                                       &st_err_msg,
                                       c_narration_id,
                                       c_dr_without_lmt_flg,
                                       d_dlvry_oblgamt_blckd,
                                       &d_balance_amt);

					if ( i_returncode != 0 )
      		{
        		fn_errlog( c_ServiceName, "S31060",LIBMSG,c_err_msg);
        		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      		}

					EXEC SQL	
						UPDATE 	FFP_FO_FUTURES_PSTN
						SET 		FFP_DLVRY_OBLGAMT_BLCKD = 0
						WHERE 	FFP_CLM_MTCH_ACCNT      = :c_cln_mtch_accnt
						AND			FFP_UNDRLYNG						=	:c_stck_nm;
			
					if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
      		{
        		fn_userlog( c_ServiceName,"Error while updating delivery obligation amount");
        		fn_errlog( c_ServiceName, "S31065", SQLMSG, c_err_msg  );
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      		}
					if(SQLCODE == NO_DATA_FOUND)
					{
						fn_userlog( c_ServiceName,"No data found in future position");
					}		
	
					EXEC SQL
						UPDATE  FOP_FO_OPTIONS_PSTN
						SET			FOP_DLVRY_OBLGAMT_BLCKD = 0
        		WHERE   FOP_CLM_MTCH_ACCNT      = :c_cln_mtch_accnt
						AND			FOP_UNDRLYNG						= :c_stck_nm;
        						
					if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
       		{
       			fn_userlog( c_ServiceName,"Error while updating delivery obligation amount");
        		fn_errlog( c_ServiceName, "S31070", SQLMSG, c_err_msg  );
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}
					if(SQLCODE == NO_DATA_FOUND)
          {
            fn_userlog( c_ServiceName,"No data found in option position");
          }
					
				}
			}
			/*** Now block the amount from FOBG02 file ***/
			fn_userlog( c_ServiceName, "Block Margin from FOBG02 file");
			strcpy( c_narration_id ,BLOCK_PHYSICAL_DELIVERY_MARGIN_FOBG);
    	d_balance_amt  = 0.0;
    	c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT ;
			d_buy_amt_total = d_buy_amt;
        MEMSET(c_final_remarks);
        sprintf( c_final_remarks, ":%s:%s:",c_cln_mtch_accnt,c_stck_nm);
        rtrim(c_final_remarks);
        strcpy(st_pstn_actn.c_ref_rmrks,c_final_remarks);
			/*** Check for amount is fully blocked or partial blocked ***/
			EXEC SQL
				SELECT 	NVL(FFD_BUY_AMT_BLCKD,0)
				INTO		:d_buy_amt_crrnt
				FROM		FFD_FOEXG_FOBG02_DTLS
				WHERE		FFD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
				AND			FFD_UNDRLYNG = :c_stck_nm
				AND			FFD_OBLGN_DT = :c_oblgn_dt;

			if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_userlog( c_ServiceName,"Error while updating delivery obligation amount");
        fn_errlog( c_ServiceName, "S31075", SQLMSG, c_err_msg  );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if(SQLCODE == NO_DATA_FOUND)
      {
        d_buy_amt_crrnt = 0.0; 
      }
      if(DEBUG_MSG_LVL_3){
			fn_userlog( c_ServiceName,"d_buy_amt :%lf:",d_buy_amt);
			fn_userlog( c_ServiceName,"d_buy_amt_crrnt :%lf:",d_buy_amt_crrnt);
      }
			if( c_span_flg == 'Y' )
			{
				fn_userlog( c_ServiceName,"Inside block margin of span");
				
				d_buy_amt = d_buy_amt - d_buy_amt_crrnt;
				d_buy_amt = d_buy_amt * (-1);
				strcpy(st_pstn_actn.c_xchng_cd,c_xchng_cd);
      	strcpy(st_pstn_actn.c_cln_mtch_accnt,c_cln_mtch_accnt);

				if ( d_buy_amt !=0 )
				{
 		   		i_returncode = fn_upd_spnlimits( c_ServiceName,
                                     &st_pstn_actn,
                                     &st_err_msg,
                                     c_narration_id,
                                     c_dr_without_lmt_flg,
                                     d_buy_amt, 
                                     &d_balance_amt);

    			if ( i_returncode != 0 )
    			{
      			fn_errlog( c_ServiceName, "S31080",LIBMSG,c_err_msg);
      			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    			}			

					d_buy_amt = d_buy_amt * (-1);
					d_buy_amt_blckd = d_buy_amt + d_balance_amt; 
				}
			}
			else if( c_span_flg == 'N' )
			{
				d_buy_amt = d_buy_amt - d_buy_amt_crrnt;
      	d_buy_amt = d_buy_amt * (-1);
      	strcpy(st_pstn_actn.c_xchng_cd,c_xchng_cd);
      	strcpy(st_pstn_actn.c_cln_mtch_accnt,c_cln_mtch_accnt);

      	if ( d_buy_amt !=0 )
      	{
        	i_returncode = fn_upd_spnlimits( c_ServiceName,
                                     &st_pstn_actn,
                                     &st_err_msg,
                                     c_narration_id,
                                     c_dr_without_lmt_flg,
                                     d_buy_amt,
                                     &d_balance_amt);

        	if ( i_returncode != 0 )
        	{
          	fn_errlog( c_ServiceName, "S31085",LIBMSG,c_err_msg);
          	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}

        	d_buy_amt = d_buy_amt * (-1);
        	d_buy_amt_blckd = d_buy_amt + d_balance_amt;
				}
			}	
      if(DEBUG_MSG_LVL_3){
				fn_userlog( c_ServiceName, "l_settlment_no :%ld:",l_settlment_no);
				fn_userlog( c_ServiceName, "c_xchng_cd :%s:",c_xchng_cd);
				fn_userlog( c_ServiceName, "c_cln_mtch_accnt :%s:",c_cln_mtch_accnt);
				fn_userlog( c_ServiceName, "c_dp_id :%s:",c_dp_id);
				fn_userlog( c_ServiceName, "c_dp_clnt_id :%s:",c_dp_clnt_id);
				fn_userlog( c_ServiceName, "c_isin_no :%s:",c_isin_no);
				fn_userlog( c_ServiceName, "c_oblgn_dt :%s:",c_oblgn_dt);
				fn_userlog( c_ServiceName, "l_buy_volume :%ld:",l_buy_volume);
				fn_userlog( c_ServiceName, "d_buy_amt :%lf:",d_buy_amt);
				fn_userlog( c_ServiceName, "l_sell_volume :%ld:",l_sell_volume); /** ver 1.1 specifier changed ***/
				fn_userlog( c_ServiceName, "d_sell_amt :%lf:",d_sell_amt);
				fn_userlog( c_ServiceName, "c_prcs_dt :%s:",c_prcs_dt);
				fn_userlog( c_ServiceName, "c_prcs_flg :%c:",c_prcs_flg);
				fn_userlog( c_ServiceName, "d_buy_amt :%lf:",d_buy_amt);				
				fn_userlog( c_ServiceName, "c_stck_nm :%s:",c_stck_nm);
       }
				EXEC SQL
					UPDATE	FFD_FOEXG_FOBG02_DTLS
					SET			FFD_BUY_AMT_BLCKD = NVL(FFD_BUY_AMT_BLCKD,0) + :d_buy_amt_blckd
					WHERE	  FFD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
        	AND     FFD_UNDRLYNG = :c_stck_nm
        	AND     FFD_OBLGN_DT = :c_oblgn_dt;

      	if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
      	{
        	fn_userlog( c_ServiceName,"Error while updating delivery obligation amount");
        	fn_errlog( c_ServiceName, "S31090", SQLMSG, c_err_msg  );
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
				if( SQLCODE == NO_DATA_FOUND )			
				{
					/*** Insert record in FOBG02 table ****/
					EXEC SQL
		 				INSERT INTO FFD_FOEXG_FOBG02_DTLS
						(
							FFD_SETTLMENT_NO,	
							FFD_XCHNG_CD,
							FFD_CLM_MTCH_ACCNT,
							FFD_DP_ID,
							FFD_DP_CLNT_ID,
							FFD_ISIN_CD,
							FFD_UNDRLYNG,
							FFD_OBLGN_DT,
							FFD_BUY_VOLUME,
							FFD_BUY_AMT,
							FFD_SELL_VOLUME,
							FFD_SELL_AMT,
							FFD_PRCS_DT,
							FFD_PRCS_FLG,
							FFD_BUY_AMT_BLCKD
						)			
						VALUES
						(
							:l_settlment_no,
							:c_xchng_cd,	
							:c_cln_mtch_accnt,
							:c_dp_id,
							:c_dp_clnt_id,
							:c_isin_no,
							:c_stck_nm,
							:c_oblgn_dt,
							:l_buy_volume,
							:d_buy_amt,
							:l_sell_volume,
							:d_sell_amt,
							:c_prcs_dt,
							'Y',	
							:d_buy_amt_blckd	
						);

					if(SQLCODE  !=  0 )
   	 			{
      			fn_userlog( c_ServiceName,"Error while inserting data into FOBG02 table");
      			fn_errlog( c_ServiceName, "S31095", SQLMSG, c_err_msg  );
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   	 			}
			
			}

			EXEC SQL
        SELECT  NVL(FFD_BUY_AMT_BLCKD,0)
        INTO    :d_buy_amt_crrnt
        FROM    FFD_FOEXG_FOBG02_DTLS
        WHERE   FFD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
        AND     FFD_UNDRLYNG = :c_stck_nm
        AND     FFD_OBLGN_DT = :c_oblgn_dt;

      if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_userlog( c_ServiceName,"Error while updating delivery obligation amount");
        fn_errlog( c_ServiceName, "S31100", SQLMSG, c_err_msg  );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if(SQLCODE == NO_DATA_FOUND)
      {
        d_buy_amt_crrnt = 0.0;
      }
	    if(DEBUG_MSG_LVL_3){	
			fn_userlog( c_ServiceName,"d_buy_amt_total :%lf:",d_buy_amt_total);
			fn_userlog( c_ServiceName,"d_buy_amt_crrnt :%lf:",d_buy_amt_crrnt);
      }

			EXEC SQL
				SELECT	UAC_USR_ID
				INTO		:c_usr_id
				FROM		UAC_USR_ACCNTS
				WHERE		UAC_CLM_MTCH_ACCNT = :c_cln_mtch_accnt;

			if(SQLCODE  !=  0 ) 
      {
        fn_userlog( c_ServiceName,"Error while fetching user id");
        fn_errlog( c_ServiceName, "S31105", SQLMSG, c_err_msg  );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

			rtrim(c_usr_id);
			fn_userlog( c_ServiceName,"c_usr_id :%s:",c_usr_id);

			if( d_buy_amt_total == d_buy_amt_crrnt )
			{
				d_trnsctn_prc = ( ( d_buy_amt_total/100 ) / l_buy_volume );  
				strcpy(c_xchng_cd,"NSE");
				strcpy(c_usm_ip_id,"NA");

				/*** Call to SVC_DAM_PRTFLO service *****/
				Finit32(ptr_fml_Ibuf, (FLDLEN32) Fsizeof32(ptr_fml_Ibuf));

				i_err[0]  = Fadd32(ptr_fml_Ibuf, FML_USR_ID, (char *)c_usr_id, 0);
      	i_ferr[0] = Ferror32;

      	i_err[1]  = Fadd32(ptr_fml_Ibuf, FML_SSSN_ID, (char *)&l_sssn_id, 0);
      	i_ferr[1] = Ferror32;

      	i_err[2]  = Fadd32(ptr_fml_Ibuf, FML_EBA_MTCH_ACT_NO, (char *)c_cln_mtch_accnt, 0);
      	i_ferr[2] = Ferror32;

        /** commented in ver 1.1 ***
      	i_err[3]  = Fadd32(ptr_fml_Ibuf, FML_PRTFLO_ID, (char *)&i_prt_id, 0);
      	i_ferr[3] = Ferror32;
         **/
        /** ver 1.1 starts ***/
      	i_err[3]  = Fadd32(ptr_fml_Ibuf, FML_PRTFLO_ID, (char *)&l_prt_id, 0);
      	i_ferr[3] = Ferror32;
        /*** ver 1.1 ends ***/

      	i_err[4]  = Fadd32(ptr_fml_Ibuf, FML_STCK_CD, (char *)c_stck_nm, 0);
      	i_ferr[4] = Ferror32;

      	i_err[5]  = Fadd32(ptr_fml_Ibuf, FML_DAM_TRNSCTN, (char *)&c_dam_trn_flg, 0);
	      i_ferr[5] = Ferror32;

    	  i_err[6]  = Fadd32(ptr_fml_Ibuf, FML_TRNSCTN_ID, (char *)&l_trn_id, 0);
  	    i_ferr[6] = Ferror32;

 	     	i_err[7]  = Fadd32(ptr_fml_Ibuf, FML_TRNSCTN_DT, (char *)c_oblgn_dt, 0);
  	    i_ferr[7] = Ferror32;

      	i_err[8]  = Fadd32(ptr_fml_Ibuf, FML_TRNSCTN_FLW, (char *)&c_trn_type, 0);
     	 	i_ferr[8] = Ferror32;

      	i_err[9]  = Fadd32(ptr_fml_Ibuf, FML_TRNSCTN_QTY, (char *)&l_buy_volume, 0);
      	i_ferr[9] = Ferror32;

      	i_err[10]  = Fadd32(ptr_fml_Ibuf, FML_TRNSCTN_PRC, (char *)&d_trnsctn_prc, 0);
      	i_ferr[10] = Ferror32;

      	i_err[11]  = Fadd32(ptr_fml_Ibuf, FML_XCHNG_CD, (char *)c_xchng_cd, 0);
      	i_ferr[11] = Ferror32;

      	i_err[12]  = Fadd32(ptr_fml_Ibuf, FML_SQ_FLG, (char *)&c_sq_flg, 0);
      	i_ferr[12] = Ferror32;

      	i_err[13]  = Fadd32(ptr_fml_Ibuf, FML_AVRG_TRNSCTN_RT, (char *)&d_trn_charge, 0);
      	i_ferr[13] = Ferror32;

      	i_err[14]  = Fadd32(ptr_fml_Ibuf, FML_UPS_AVRG_TRNSCTN_RT, (char *)&d_stmp_comm, 0);
      	i_ferr[14] = Ferror32;

      	i_err[15]  = Fadd32(ptr_fml_Ibuf, FML_ARD_CLNT_RMRKS, (char *)c_remarks, 0);
      	i_ferr[15] = Ferror32;

      	i_err[16]  = Fadd32(ptr_fml_Ibuf, FML_ST, (char *)&c_batch_flg, 0);
      	i_ferr[16] = Ferror32;

      	i_err[17] = Fadd32(ptr_fml_Ibuf, FML_TRD_TRD_REF, (char *)c_trd_trd_ref, 0); /** ver 1.1 &c_trd_trd_ref changed **/
      	i_ferr[17] = Ferror32;

      	i_err[18] = Fadd32(ptr_fml_Ibuf, FML_SYS_MSG, (char *)c_channel, 0);
      	i_ferr[18] = Ferror32;

				i_err[19] = Fadd32(ptr_fml_Ibuf, FML_TRD_TRD_FLW, (char *)&c_trd_trd_flw, 0);
				i_ferr[19] = Ferror32;

				i_err[20] = Fadd32(ptr_fml_Ibuf, FML_STCK_SG, (char *)&c_stck_sg, 0);
				i_ferr[20] = Ferror32;

 	    	for(i=0;i<21;i++)
  	    {
    	   	if(i_err[i] == -1 )
      	  {
        	  fn_userlog( c_ServiceName, " Error in field no %d", i);
          	fn_errlog(c_ServiceName, "S31110", Fstrerror32(i_ferr[i]), c_err_msg);
          	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
          	tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
        	}
  	    }
	
        /*** uncommented in ver 1.1 ***/	
 				i_ch_val = tpcall("SVC_DAM_PRTFLO", (char *)ptr_fml_Ibuf, 0,
                        (char **)&ptr_fml_Ibuf, &l_recvlength, 0);

 	  	  if ( i_ch_val != 0 )
  	    {
        	fn_errlog(c_ServiceName,"L31035", TPMSG, c_err_msg);
        	/**fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpfree ( ( char * )ptr_fml_Ibuf);
        	tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);**/	
      	}
 
			}
		}
		else if( l_sell_volume > 0 )	
		{

			EXEC SQL
    		SELECT  CLD_DP_ID,
        		    CLD_DP_CLNT_ID
    		INTO    :c_dp_id,
      		      :c_dp_clnt_id
    		FROM    CLD_DP_ACCTS
    		WHERE   CLD_DP_ACC_TYP = 'E'
    		AND     CLD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt;

    	if(SQLCODE  !=  0  && SQLCODE != TOO_MANY_ROWS_FETCHED)
    	{
      	fn_userlog( c_ServiceName,"Error while selecting dp id and dp client id");
      	fn_errlog( c_ServiceName, "S31115", SQLMSG, c_err_msg  );
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
    	if (SQLCODE == TOO_MANY_ROWS_FETCHED)
    	{
      	fn_userlog( c_ServiceName,"Choose delivery/Non delivery is not allowed for multiple demat account user");
      /*	fn_errlog(c_ServiceName,"B20202"," ",c_err_msg); */
				strcpy(c_err_msg, "As you have multiple demat accounts, you may please  give your delivery intent for shares payable in Futures and Options by calling us on 9321410550.");
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

    	rtrim(c_dp_id);
    	rtrim(c_dp_clnt_id);
    	rtrim(c_isin_no);
      if(DEBUG_MSG_LVL_3){
    	fn_userlog( c_ServiceName,"c_cln_mtch_accnt :%s:",c_cln_mtch_accnt);
    	fn_userlog( c_ServiceName,"c_dp_id :%s:",c_dp_id);
    	fn_userlog( c_ServiceName,"c_dp_clnt_id :%s:",c_dp_clnt_id);
    	fn_userlog( c_ServiceName,"c_isin_no :%s:",c_isin_no);
    	fn_userlog( c_ServiceName,"c_stck_nm :%s:",c_stck_nm);
      }
			if( c_span_flg == 'Y' )
			{

        EXEC SQL
        select  sum(qty),
                sum( payout_amt )/** ver 1.1 ***/
        into    :d_dlvry_qty_blckd,
                :d_payout_amt /** ver 1.1 ***/
        from
        (
				SELECT 	NVL(sum(NVL(FCP_DLVRY_QTY_BLCKD,0)),0) qty,
                0 payout_amt/** ver 1.1 ***/
				FROM 		FCP_FO_SPN_CNTRCT_PSTN 
				WHERE 	FCP_CLM_MTCH_ACCNT	=	:c_cln_mtch_accnt
				AND			FCP_UNDRLYNG				= :c_stck_nm
		    UNION ALL	
          SELECT  NVL(sum(NVL(FFD_SELL_QTYBLKD,0)),0)  qty,
                NVL(SUM(NVL(FFD_PAYOUT_AMT,0)),0) payout_amt
        FROM    FFD_FOEXG_FOBG02_DTLS
        WHERE   FFD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
        AND     FFD_UNDRLYNG = :c_stck_nm
        AND     FFD_OBLGN_DT = :c_oblgn_dt
        );

        if(SQLCODE  !=  0 )
        {
          fn_userlog( c_ServiceName,"Error while updating delivery obligation amount");
          fn_errlog( c_ServiceName, "S31120", SQLMSG, c_err_msg  );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
			}
			else if( c_span_flg == 'N' )
			{
				EXEC SQL
				select 	sum(qty),
                sum(payout_amt) /** ver 1.1 ***/
				into		:d_dlvry_qty_blckd,
                :d_payout_amt /** ver 1.1 ***/
				from
				(
					SELECT 	NVL(sum(NVL(FFP_DLVRY_QTY_BLCKD,0)),0) qty,
                  0 payout_amt /** ver 1.1 ***/
					FROM 		FFP_FO_FUTURES_PSTN 
					WHERE 	FFP_CLM_MTCH_ACCNT	=	:c_cln_mtch_accnt
					AND			FFP_UNDRLYNG				=	:c_stck_nm
					AND 		FFP_DLVRY_QTY_BLCKD	!=	0
					UNION ALL
					SELECT 	NVL(sum(NVL(FOP_DLVRY_QTY_BLCKD,0)),0)	qty,
                  0 payout_amt /** ver 1.1 ***/
					FROM 		FOP_FO_OPTIONS_PSTN 
					WHERE 	FOP_CLM_MTCH_ACCNT	=	:c_cln_mtch_accnt
					AND			FOP_UNDRLYNG				= :c_stck_nm	
					AND 		FOP_DLVRY_QTY_BLCKD	!=	0
          UNION ALL
          SELECT  NVL(sum(NVL(FFD_SELL_QTYBLKD,0)),0)  qty,
                  NVL(SUM(NVL(FFD_PAYOUT_AMT,0)),0) payout_amt /** ver 1.1 ***/
          FROM    FFD_FOEXG_FOBG02_DTLS
          WHERE   FFD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
          AND     FFD_UNDRLYNG = :c_stck_nm
          AND     FFD_OBLGN_DT = :c_oblgn_dt
				);

				if(SQLCODE  !=  0 )
      	{
        	fn_userlog( c_ServiceName,"Error while fetching delivery obligation blocked");
        	fn_errlog( c_ServiceName, "S31125", SQLMSG, c_err_msg  );
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
			}
		  if(DEBUG_MSG_LVL_3){	
	 		fn_userlog( c_ServiceName,"d_dlvry_oblgamt_blckd :%lf:",d_dlvry_oblgamt_blckd);
      fn_userlog( c_ServiceName,"l_sell_volume :%ld:",l_sell_volume);
      }

			d_sell_volume = (double) l_sell_volume;
 
      if(DEBUG_MSG_LVL_3){
			fn_userlog( c_ServiceName,"d_sell_volume :%lf:",d_sell_volume);
      }
	
			if( d_dlvry_qty_blckd > d_sell_volume )
			{
      /********
      	EXEC SQL
        	SELECT  NVL(FFD_SELL_QTYBLKD,0)
        	INTO    :d_buy_qty_crrnt
        	FROM    FFD_FOEXG_FOBG02_DTLS
        	WHERE   FFD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
        	AND     FFD_UNDRLYNG = :c_stck_nm
        	AND     FFD_OBLGN_DT = :c_oblgn_dt;

      	if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
      	{
        	fn_userlog( c_ServiceName,"Error while updating delivery obligation amount");
        	fn_errlog( c_ServiceName, "S31130", SQLMSG, c_err_msg  );
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
      	if(SQLCODE == NO_DATA_FOUND)
      	{
        	d_buy_qty_crrnt = 0.0;
      	}
	      *********/
		
				fn_userlog( c_ServiceName,"In unblock case");	
				c_blk_ublk = 'U';
				d_qty = d_dlvry_qty_blckd - d_sell_volume;
				/*** Initialze a buffer before calling service ****/ 
				Finit32(ptr_fml_Ibuf, (FLDLEN32) Fsizeof32(ptr_fml_Ibuf));	

				i_err	[0]	= Fadd32(ptr_fml_Ibuf,FML_USR_ID, (char *)c_usr_id,0);
				i_ferr[0] = Ferror32;
      	i_err	[1]	= Fadd32(ptr_fml_Ibuf,FML_SSSN_ID,(char *)&l_sssn_id,0);
				i_ferr[1] = Ferror32;
      	i_err	[2]	= Fadd32(ptr_fml_Ibuf,FML_DPID,(char *)c_dp_id, 0);
				i_ferr[2] = Ferror32;
      	i_err	[3]	= Fadd32(ptr_fml_Ibuf,FML_ORD_DP_CLNT_ID, (char *)c_dp_clnt_id,0);
				i_ferr[3] = Ferror32; 
     	 	i_err	[4]	= Fadd32(ptr_fml_Ibuf,FML_GMS_ID, (char *)&i_prdct_nm,0);
				i_ferr[4] = Ferror32;
      	i_err	[5]	= Fadd32(ptr_fml_Ibuf,FML_DPQTY,(char *)&d_qty,0);
				i_ferr[5] = Ferror32;
      	i_err	[6]	= Fadd32(ptr_fml_Ibuf,FML_BLOCK_UNBLOCK,(char *)&c_blk_ublk,0);
				i_ferr[6] = Ferror32;
      	i_err	[7]	= Fadd32(ptr_fml_Ibuf,FML_STCK_CD, (char *)c_stck_nm,0);
				i_ferr[7] = Ferror32;
      	i_err	[8]	= Fadd32(ptr_fml_Ibuf,FML_ISIN, (char *)c_isin_no,0);
				i_ferr[8] = Ferror32;
      	i_err	[9]	= Fadd32(ptr_fml_Ibuf,FML_MATCH_ACCNT, (char *)c_cln_mtch_accnt,0);
				i_ferr[9] = Ferror32;
			
				for(i=0;i<10;i++)
  			{
    			if(i_err[i] == -1 )
    			{
      			fn_userlog( c_ServiceName, " Error in field no %d", i);
      			fn_errlog(c_ServiceName, "S31135", Fstrerror32(i_ferr[i]), c_err_msg);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      			Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
      			tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
    			}
  			}
	
				i_ch_val = tpcall("SVC_DP_BKUBK", (char *)ptr_fml_Ibuf, 0,
                        (char **)&ptr_fml_Ibuf, &l_recvlength, 0);

				if ( i_ch_val != 0 )
  			{
    			fn_errlog(c_ServiceName,"L31035", TPMSG, c_err_msg);
    			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    			tpfree ( ( char * )ptr_fml_Ibuf);
    			tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);	
  			}

				fn_userlog( c_ServiceName,"c_dp_clnt_id :%s:",c_dp_clnt_id);	
				fn_userlog( c_ServiceName,"c_stck_nm :%s:",c_stck_nm);
				fn_userlog( c_ServiceName,"d_qty :%lf:",d_qty);
	
        d_qty_to_update = d_dlvry_qty_blckd - d_qty;
	
				/*** Update DBD table ***/
				EXEC SQL
					UPDATE 	DBD_DP_BLCK_DTLS
					SET			DBD_FODLVRY_BLCKD_QTY = NVL(DBD_FODLVRY_BLCKD_QTY,0) - trunc(:d_qty)
					WHERE   DBD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
          AND     DBD_DP_ID          = :c_dp_id
          AND     DBD_DP_CLNT_ID     = :c_dp_clnt_id
          AND     DBD_STCK_CD        = :c_stck_nm
          AND     DBD_ISIN_NMBR      = :c_isin_no;					

				if(SQLCODE  !=  0 )
        {
          fn_userlog( c_ServiceName,"Error while updating quantity in DBD table"); 
          fn_errlog( c_ServiceName, "S31140", SQLMSG, c_err_msg  );
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }	

			}
			else if( d_dlvry_qty_blckd < d_sell_volume )
			{
				/*** Check for amount is fully blocked or partial blocked ***
        EXEC SQL
          SELECT  NVL(FFD_SELL_QTYBLKD,0)
          INTO    :d_buy_qty_crrnt
          FROM    FFD_FOEXG_FOBG02_DTLS 
          WHERE   FFD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
          AND     FFD_UNDRLYNG = :c_stck_nm
          AND     FFD_OBLGN_DT = :c_oblgn_dt;

        if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND )
        {
          fn_userlog( c_ServiceName,"Error while updating delivery obligation amount");
          fn_errlog( c_ServiceName, "S31145", SQLMSG, c_err_msg  );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        if(SQLCODE == NO_DATA_FOUND)
        {
          d_buy_qty_crrnt = 0.0;
        }
        *************/

				fn_userlog( c_ServiceName,"In block case");
				c_blk_ublk = 'B';
				d_qty = d_sell_volume - d_dlvry_oblgamt_blckd;
				/*** Fetch total free quantity ***/
				EXEC SQL
					SELECT 	NVL(DBD_TOT_QTY,0),
									NVL(DBD_QTY_BLCKD,0)
					INTO		:d_dbd_tot_qty,
									:d_dbd_qty_blckd
					FROM		DBD_DP_BLCK_DTLS
					WHERE		DBD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt 
        	AND   	DBD_DP_ID          = :c_dp_id
        	AND   	DBD_DP_CLNT_ID     = :c_dp_clnt_id
        	AND   	DBD_STCK_CD        = :c_stck_nm
        	AND   	DBD_ISIN_NMBR      = :c_isin_no;
			
				if(SQLCODE  !=  0 )
        {
          fn_userlog( c_ServiceName,"Error while fetching free quantity from DBD table");
          fn_errlog( c_ServiceName, "S31150", SQLMSG, c_err_msg  );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

				d_dbd_free_qty = d_dbd_tot_qty - d_dbd_qty_blckd;

        if(DEBUG_MSG_LVL_3){
				fn_userlog( c_ServiceName,"d_dbd_tot_qty :%lf:",d_dbd_tot_qty);
				fn_userlog( c_ServiceName,"d_dbd_qty_blckd :%lf:",d_dbd_qty_blckd);
				fn_userlog( c_ServiceName,"d_dbd_free_qty :%lf:",d_dbd_free_qty);
				fn_userlog( c_ServiceName,"d_qty :%lf:",d_qty);
	      }

				d_qty = MIN(d_qty,d_dbd_free_qty);
        if(DEBUG_MSG_LVL_3){
				fn_userlog( c_ServiceName,"d_qty :%lf:",d_qty);
	      }
				/*** Initialze a buffer before calling service ****/
      	Finit32(ptr_fml_Ibuf, (FLDLEN32) Fsizeof32(ptr_fml_Ibuf));

      	i_err [0] = Fadd32(ptr_fml_Ibuf,FML_USR_ID, (char *)c_usr_id,0);
      	i_ferr[0] = Ferror32;
      	i_err [1] = Fadd32(ptr_fml_Ibuf,FML_SSSN_ID,(char *)&l_sssn_id,0);
      	i_ferr[1] = Ferror32;
      	i_err [2] = Fadd32(ptr_fml_Ibuf,FML_DPID,(char *)c_dp_id, 0);
      	i_ferr[2] = Ferror32;
      	i_err [3] = Fadd32(ptr_fml_Ibuf,FML_ORD_DP_CLNT_ID, (char *)c_dp_clnt_id,0);
      	i_ferr[3] = Ferror32;
      	i_err [4] = Fadd32(ptr_fml_Ibuf,FML_GMS_ID, (char *)&i_prdct_nm,0);
      	i_ferr[4] = Ferror32;
      	i_err [5] = Fadd32(ptr_fml_Ibuf,FML_DPQTY,(char *)&d_qty,0);
      	i_ferr[5] = Ferror32;
      	i_err [6] = Fadd32(ptr_fml_Ibuf,FML_BLOCK_UNBLOCK,(char *)&c_blk_ublk,0);
      	i_ferr[6] = Ferror32;
      	i_err [7] = Fadd32(ptr_fml_Ibuf,FML_STCK_CD, (char *)c_stck_nm,0);
      	i_ferr[7] = Ferror32;
      	i_err [8] = Fadd32(ptr_fml_Ibuf,FML_ISIN, (char *)c_isin_no,0);
      	i_ferr[8] = Ferror32;
      	i_err [9] = Fadd32(ptr_fml_Ibuf,FML_MATCH_ACCNT, (char *)c_cln_mtch_accnt,0);
      	i_ferr[9] = Ferror32;

      	for(i=0;i<10;i++)
      	{
        	if(i_err[i] == -1 )
        	{
          	fn_userlog( c_ServiceName, " Error in field no %d", i);
          	fn_errlog(c_ServiceName, "S31155", Fstrerror32(i_ferr[i]), c_err_msg);
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          	Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
          	tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
       	 	}
      	}

      	i_ch_val = tpcall("SVC_DP_BKUBK", (char *)ptr_fml_Ibuf, 0,
                        (char **)&ptr_fml_Ibuf, &l_recvlength, 0);

      	if ( i_ch_val != 0 )
      	{
        	fn_errlog(c_ServiceName,"L31035", TPMSG, c_err_msg);
        	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	tpfree ( ( char * )ptr_fml_Ibuf);
        	tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);	
      	}
        d_qty_to_update = d_dlvry_qty_blckd + d_qty;
				EXEC SQL
          UPDATE  DBD_DP_BLCK_DTLS
          SET     DBD_FODLVRY_BLCKD_QTY = NVL(DBD_FODLVRY_BLCKD_QTY,0) + trunc(:d_qty)
         	WHERE   DBD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
          AND     DBD_DP_ID          = :c_dp_id
          AND     DBD_DP_CLNT_ID     = :c_dp_clnt_id
          AND     DBD_STCK_CD        = :c_stck_nm
          AND     DBD_ISIN_NMBR      = :c_isin_no;	

        if(SQLCODE  !=  0 )
        {
          fn_userlog( c_ServiceName,"Error while updating quantity in DBD table");
          fn_errlog( c_ServiceName, "S31160", SQLMSG, c_err_msg  );
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }	

			}
       fn_userlog( c_ServiceName,"*****************d_qty_to_update suchita :%lf:",d_qty_to_update);
    /** ver 1.1 starts ***/
    ll_payout_amt = ( long long ) d_payout_amt;
    fn_userlog ( c_ServiceName,"ll_payout_amt:%lld:",ll_payout_amt);
    if( ll_payout_amt == 0 )
    {
    if( c_span_flg == 'Y' )
    {
       fn_userlog( c_ServiceName,"span d_sell_amt :%lf:",d_sell_amt);
       strcpy(st_pstn_actn.c_xchng_cd,c_xchng_cd);
       strcpy(st_pstn_actn.c_cln_mtch_accnt,c_cln_mtch_accnt);
       MEMSET(c_final_remarks);
       sprintf( c_final_remarks, ":%s:%s:",c_cln_mtch_accnt,c_stck_nm);
       rtrim(c_final_remarks);
       strcpy(st_pstn_actn.c_ref_rmrks,c_final_remarks);
       strcpy( c_narration_id ,REL_PHYSICAL_DELIVERY_MARGIN_SHARES);
       c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;

      i_returncode = fn_upd_spnlimits( c_ServiceName,
                                     &st_pstn_actn,
                                     &st_err_msg,
                                     c_narration_id,
                                     c_dr_without_lmt_flg,
                                     d_sell_amt,
                                     &d_balance_amt);

      if ( i_returncode != 0 )
      {
        fn_errlog( c_ServiceName, "S31165",LIBMSG,c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    else  if( c_span_flg == 'N' )
    {
       fn_userlog( c_ServiceName,"d_sell_amt :%lf:",d_sell_amt);
       strcpy(st_nspn_pstn_actn.c_xchng_cd,c_xchng_cd);
       strcpy(st_nspn_pstn_actn.c_cln_mtch_accnt,c_cln_mtch_accnt);
       MEMSET(c_final_remarks);
       sprintf( c_final_remarks, ":%s:%s:",c_cln_mtch_accnt,c_stck_nm);
       rtrim(c_final_remarks);
       strcpy(st_nspn_pstn_actn.c_ref_rmrks,c_final_remarks);
       strcpy( c_narration_id ,REL_PHYSICAL_DELIVERY_MARGIN_SHARES);
       c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;
       i_returncode = fn_upd_limits( c_ServiceName,
                                &st_nspn_pstn_actn,
                                ptr_st_err_msg,
                                c_narration_id,
                                c_dr_without_lmt_flg,
                                d_sell_amt,
                                &d_balance_amt );

      if ( i_returncode != 0 )
      {
        fn_userlog( c_ServiceName,"Credit REL_PHYSICAL_DELIVERY_MARGIN_SHARES error");
        fn_errlog( c_ServiceName, "S31170", LIBMSG, c_err_msg  );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
     }
    }
      /** ver 1.1 ends **/ 

			EXEC SQL
				UPDATE 	FFD_FOEXG_FOBG02_DTLS 
				SET		 	FFD_SELL_QTYBLKD 		= NVL(FFD_SELL_QTYBLKD,0) + :d_qty_to_update,
                FFD_PAYOUT_AMT = DECODE( :ll_payout_amt , 0, :d_sell_amt,FFD_PAYOUT_AMT) /*** ver 1.1 ***/
				WHERE	 	FFD_CLM_MTCH_ACCNT 	= :c_cln_mtch_accnt
				AND			FFD_UNDRLYNG				= :c_stck_nm
				AND			FFD_OBLGN_DT				= :c_oblgn_dt;

			if(SQLCODE  !=  0  && SQLCODE != NO_DATA_FOUND)
      {
        fn_userlog( c_ServiceName,"Error while inserting data into FOBG02 table");
        fn_errlog( c_ServiceName, "S31175", SQLMSG, c_err_msg  );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }		 
			if(SQLCODE == NO_DATA_FOUND)
			{
				/*** Insert record into FOBG table ***/
				EXEC SQL
        	INSERT INTO FFD_FOEXG_FOBG02_DTLS
        	(
          	FFD_SETTLMENT_NO,
          	FFD_XCHNG_CD,
          	FFD_CLM_MTCH_ACCNT,
          	FFD_DP_ID,
          	FFD_DP_CLNT_ID,
          	FFD_ISIN_CD,
          	FFD_UNDRLYNG,
          	FFD_OBLGN_DT,
          	FFD_BUY_VOLUME,
          	FFD_BUY_AMT,
          	FFD_SELL_VOLUME,
          	FFD_SELL_AMT,
          	FFD_PRCS_DT,
          	FFD_PRCS_FLG,
						FFD_SELL_QTYBLKD
        	)
        	VALUES
        	(
          	:l_settlment_no,
          	:c_xchng_cd,
          	:c_cln_mtch_accnt,
          	:c_dp_id,
          	:c_dp_clnt_id,
          	:c_isin_no,
          	:c_stck_nm,
          	:c_oblgn_dt,
          	:l_buy_volume,
          	:d_buy_amt,
          	:l_sell_volume,
          	:d_sell_amt,
          	:c_prcs_dt,
          	'Y', 
						trunc(:d_qty)
        	);	
				
					if(SQLCODE  !=  0 )
        	{
          	fn_userlog( c_ServiceName,"Error while inserting data into FOBG02 table");
          	fn_errlog( c_ServiceName, "S31180", SQLMSG, c_err_msg  );
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        	}
			}

			/*** Update blocked quantity to 0 ***/
			if( c_span_flg == 'Y' )
    	{
      	EXEC SQL
       		UPDATE  FCP_FO_SPN_CNTRCT_PSTN
       		SET     FCP_DLVRY_QTY_BLCKD =0
       		WHERE     FCP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
					AND			FCP_UNDRLYNG			 = :c_stck_nm;

      	if(SQLCODE  !=  0 )
      	{
       		fn_userlog( c_ServiceName,"Error while updating delivery quantity blocked");
       		fn_errlog( c_ServiceName, "S31185", SQLMSG, c_err_msg  );
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      	}
    	}
			if( c_span_flg == 'N' )
    	{
        EXEC SQL
          UPDATE  FFP_FO_FUTURES_PSTN
          SET     FFP_DLVRY_QTY_BLCKD =0
          WHERE     FFP_CLM_MTCH_ACCNT  =:c_cln_mtch_accnt
					AND			FFP_UNDRLYNG				=:c_stck_nm;

        if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND)
        {
          fn_userlog( c_ServiceName,"Error while updating delivery quantity blocked");
          fn_errlog( c_ServiceName, "S31190", SQLMSG, c_err_msg  );
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
				if(SQLCODE == NO_DATA_FOUND)
				{
					fn_userlog( c_ServiceName,"No data found in future position table");
				}
        EXEC SQL
          UPDATE  FOP_FO_OPTIONS_PSTN
          SET     FOP_DLVRY_QTY_BLCKD = 0
          WHERE     FOP_CLM_MTCH_ACCNT=:c_cln_mtch_accnt
					AND			FOP_UNDRLYNG			=:c_stck_nm;

        if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND)
        {
          fn_userlog( c_ServiceName,"Error while updating delivery quantity blocked");
          fn_errlog( c_ServiceName, "S31195", SQLMSG, c_err_msg  );
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
				if(SQLCODE == NO_DATA_FOUND)
        {
          fn_userlog( c_ServiceName,"No data found in option position table");
        }

    	}
	
		}
		/*** Commit transaction ***/
		if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )  
  	{
			fn_errlog( c_ServiceName, "S31200", LIBMSG, c_err_msg  );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );  
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

	}
	if( c_actn_typ == 'B' )
	{
		rtrim(c_cln_mtch_accnt);
		rtrim(c_stck_nm);

		fn_userlog (c_ServiceName,"c_cln_mtch_accnt :%s:",c_cln_mtch_accnt);
		fn_userlog (c_ServiceName,"c_stck_nm :%s:",c_stck_nm);

		i_trnsctn =  fn_begintran( c_ServiceName, c_err_msg);

    if ( i_trnsctn == -1 )
    {
      fn_userlog (c_ServiceName,"Failed in initial begin transaction");
      fn_errlog ( c_ServiceName, "S31205", TPMSG, c_err_msg);
      return ;
    }

		/*** Check Span ****/
    EXEC SQL
      SELECT  NVL(CLM_SPAN_ALLWD,'N')
      INTO    :c_span_flg
      FROM    CLM_CLNT_MSTR
      WHERE   CLM_MTCH_ACCNT  = :c_cln_mtch_accnt;

    if(SQLCODE  !=  0 )
    {
      fn_userlog( c_ServiceName,"Error while selecting SPAN flag");
      fn_errlog( c_ServiceName, "S31210", SQLMSG, c_err_msg  );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if(DEBUG_MSG_LVL_3){
    fn_userlog( c_ServiceName,"SPAN flag is |%c|",c_span_flg);
		fn_userlog( c_ServiceName, "Release Physical delivery Margin for remaining position");
    }

    strcpy( c_narration_id ,REL_PHYSICAL_DELIVERY_MARGIN_REM_POSITION);
    d_balance_amt  = 0.0;
    c_dr_without_lmt_flg = DEBIT_TILL_LIMIT ;
    MEMSET(c_final_remarks);
    sprintf( c_final_remarks, ":%s:%s:%c:",c_cln_mtch_accnt,c_stck_nm,c_prdct_typ);
		strcpy(st_pstn_actn.c_xchng_cd,c_xchng_cd);
    strcpy(st_pstn_actn.c_cln_mtch_accnt,c_cln_mtch_accnt);
    rtrim(c_final_remarks);
    strcpy(st_pstn_actn.c_ref_rmrks,c_final_remarks);	
		if( d_dlvry_amt_blckd !=0 )
		{
    	i_returncode = fn_upd_spnlimits( c_ServiceName,
                                     &st_pstn_actn,
                                     &st_err_msg,
                                     c_narration_id,
                                     c_dr_without_lmt_flg,
                                     d_dlvry_amt_blckd, 
                                     &d_balance_amt);

    	if ( i_returncode != 0 )
    	{
      	fn_errlog( c_ServiceName, "S31215",LIBMSG,c_err_msg);
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

      if(DEBUG_MSG_LVL_3){
			fn_userlog( c_ServiceName,"c_cln_mtch_accnt :%s:",c_cln_mtch_accnt);
      fn_userlog( c_ServiceName,"c_stck_nm :%s:",c_stck_nm);		
      }

			/*** Update delivery amount ****/
			if( c_span_flg == 'Y' )
    	{
      	EXEC SQL
				UPDATE 	FCP_FO_SPN_CNTRCT_PSTN
    	  SET  		FCP_DLVRY_OBLGAMT_BLCKD =0
        WHERE   FCP_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
				AND			FCP_UNDRLYNG				= :c_stck_nm;

        if(SQLCODE  !=  0 )
        {
          fn_userlog( c_ServiceName,"Error while updating delivery obligation blocked");
          fn_errlog( c_ServiceName, "S31220", SQLMSG, c_err_msg  );
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
    	}		
			else if( c_span_flg == 'N' )
    	{
				if( c_prdct_typ == 'F' )
				{
					EXEC SQL
					UPDATE 	FFP_FO_FUTURES_PSTN
					SET			FFP_DLVRY_OBLGAMT_BLCKD =0	
					WHERE   FFP_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
					AND			FFP_UNDRLYNG				= :c_stck_nm;

					if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND)
          {
            fn_userlog( c_ServiceName,"Error while updating delivery obligation blocked");
            fn_errlog( c_ServiceName, "S31225", SQLMSG, c_err_msg  );
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
					if(SQLCODE == NO_DATA_FOUND)
					{
						fn_userlog( c_ServiceName,"No data found for future position");
					}

				}
				if( c_prdct_typ == 'O' )
				{	
  	    	EXEC SQL
					UPDATE	FOP_FO_OPTIONS_PSTN
					SET			FOP_DLVRY_OBLGAMT_BLCKD =0	
        	WHERE   FOP_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
					AND			FOP_UNDRLYNG				= :c_stck_nm;

        	if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND)
        	{
         	 	fn_userlog( c_ServiceName,"Error while updating delivery obligation blocked");
          	fn_errlog( c_ServiceName, "S31230", SQLMSG, c_err_msg  );
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       	 	}
					if(SQLCODE == NO_DATA_FOUND)
          {
            fn_userlog( c_ServiceName,"No data found for Option position");
          }
				}
			}

    }	
		/*** Commit transaction ***/
    if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    {
			fn_errlog( c_ServiceName, "S31235", LIBMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	}	
	if( c_actn_typ == 'C' )
	{
		rtrim(c_cln_mtch_accnt);
		rtrim(c_stck_nm);

    i_trnsctn =  fn_begintran( c_ServiceName, c_err_msg);

    if ( i_trnsctn == -1 )
    {
      fn_userlog (c_ServiceName,"Failed in initial begin transaction");
      fn_errlog ( c_ServiceName, "S31240", TPMSG, c_err_msg);
      return ;
    }

		/*** Check Span ****/
    EXEC SQL
      SELECT  NVL(CLM_SPAN_ALLWD,'N')
      INTO    :c_span_flg
      FROM    CLM_CLNT_MSTR
      WHERE   CLM_MTCH_ACCNT  = :c_cln_mtch_accnt;

    if(SQLCODE  !=  0 )
    {
      fn_userlog( c_ServiceName,"Error while selecting SPAN flag");
      fn_errlog( c_ServiceName, "S31245", SQLMSG, c_err_msg  );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if(DEBUG_MSG_LVL_3){
    fn_userlog( c_ServiceName,"SPAN flag is |%c|",c_span_flg);
    }

		/*** Fetch DP id ****/
    EXEC SQL
      SELECT  SEM_MAP_VL
      INTO    :c_isin_no
      FROM    sem_stck_map
      WHERE   SEM_ENTTY =10
      AND     SEM_STCK_CD = :c_stck_nm;

    if(SQLCODE  !=  0 )
    {
      fn_userlog( c_ServiceName,"Error while selecting isin number");
      fn_errlog( c_ServiceName, "S31250", SQLMSG, c_err_msg  );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    EXEC SQL
    SELECT  CLD_DP_ID,
            CLD_DP_CLNT_ID
    INTO    :c_dp_id,
            :c_dp_clnt_id
    FROM    CLD_DP_ACCTS
    WHERE   CLD_DP_ACC_TYP = 'E'
    AND     CLD_CLM_MTCH_ACCNT = :c_cln_mtch_accnt;

    if(SQLCODE  !=  0 && SQLCODE != TOO_MANY_ROWS_FETCHED)
    {
      fn_userlog( c_ServiceName,"Error while selecting dp id and dp client id");
      fn_errlog( c_ServiceName, "S31255", SQLMSG, c_err_msg  );
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		if (SQLCODE == TOO_MANY_ROWS_FETCHED)
    {
      fn_userlog( c_ServiceName,"Choose delivery/Non delivery is not allowed for multiple demat account user");
      /*fn_errlog(c_ServiceName,"B20202"," ",c_err_msg);*/
			strcpy(c_err_msg, "As you have multiple demat accounts, you may please  give your delivery intent for shares payable in Futures and Options by calling us on 9321410550.");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		rtrim(c_dp_id);
    rtrim(c_dp_clnt_id);
    rtrim(c_isin_no);

    if(DEBUG_MSG_LVL_3){
    fn_userlog( c_ServiceName,"c_cln_mtch_accnt :%s:",c_cln_mtch_accnt);
    fn_userlog( c_ServiceName,"c_dp_id :%s:",c_dp_id);
    fn_userlog( c_ServiceName,"c_dp_clnt_id :%s:",c_dp_clnt_id);
    fn_userlog( c_ServiceName,"c_isin_no :%s:",c_isin_no);
    fn_userlog( c_ServiceName,"c_stck_nm :%s:",c_stck_nm);
	  }	 

		c_blk_ublk = 'U';

		/*** Initialze a buffer before calling service ****/
    Finit32(ptr_fml_Ibuf, (FLDLEN32) Fsizeof32(ptr_fml_Ibuf));

    i_err [0] = Fadd32(ptr_fml_Ibuf,FML_USR_ID, (char *)c_usr_id,0);
    i_ferr[0] = Ferror32;
    i_err [1] = Fadd32(ptr_fml_Ibuf,FML_SSSN_ID,(char *)&l_sssn_id,0);
    i_ferr[1] = Ferror32;
    i_err [2] = Fadd32(ptr_fml_Ibuf,FML_DPID,(char *)c_dp_id, 0);
    i_ferr[2] = Ferror32;
    i_err [3] = Fadd32(ptr_fml_Ibuf,FML_ORD_DP_CLNT_ID, (char *)c_dp_clnt_id,0);
    i_ferr[3] = Ferror32;
    i_err [4] = Fadd32(ptr_fml_Ibuf,FML_GMS_ID, (char *)&i_prdct_nm,0);
    i_ferr[4] = Ferror32;
    i_err [5] = Fadd32(ptr_fml_Ibuf,FML_DPQTY,(char *)&d_dlvry_qty_blckd,0);
    i_ferr[5] = Ferror32;
    i_err [6] = Fadd32(ptr_fml_Ibuf,FML_BLOCK_UNBLOCK,(char *)&c_blk_ublk,0);
    i_ferr[6] = Ferror32;
    i_err [7] = Fadd32(ptr_fml_Ibuf,FML_STCK_CD, (char *)c_stck_nm,0);
    i_ferr[7] = Ferror32;
    i_err [8] = Fadd32(ptr_fml_Ibuf,FML_ISIN, (char *)c_isin_no,0);
    i_ferr[8] = Ferror32;
    i_err [9] = Fadd32(ptr_fml_Ibuf,FML_MATCH_ACCNT, (char *)c_cln_mtch_accnt,0);
    i_ferr[9] = Ferror32;

    for(i=0;i<10;i++)
    {
      if(i_err[i] == -1 )
      {
        fn_userlog( c_ServiceName, " Error in field no %d", i);
        fn_errlog(c_ServiceName, "S31260", Fstrerror32(i_ferr[i]), c_err_msg);
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
        tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0);
      }
    }

		i_ch_val = tpcall("SVC_DP_BKUBK", (char *)ptr_fml_Ibuf, 0,
                     (char **)&ptr_fml_Ibuf, &l_recvlength, 0);

    if ( i_ch_val != 0 )
    {
      fn_errlog(c_ServiceName,"L31035", TPMSG, c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpfree ( ( char * )ptr_fml_Ibuf);
     	tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0); 
    }
	
		/*** Update blocked qty ***/
		if( c_span_flg == 'Y' )
		{

			EXEC SQL
				UPDATE	FCP_FO_SPN_CNTRCT_PSTN
				SET			FCP_DLVRY_QTY_BLCKD =0
				WHERE			FCP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
				AND			FCP_UNDRLYNG = :c_stck_nm;

			if(SQLCODE  !=  0 )
      {
        fn_userlog( c_ServiceName,"Error while updating delivery quantity blocked");
        fn_errlog( c_ServiceName, "S31265", SQLMSG, c_err_msg  );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		}
		if( c_span_flg == 'N' )
		{
			if( c_prdct_typ == 'F' )
			{
				EXEC SQL
					UPDATE	FFP_FO_FUTURES_PSTN
					SET			FFP_DLVRY_QTY_BLCKD =0
					WHERE			FFP_CLM_MTCH_ACCNT  =:c_cln_mtch_accnt
					AND			FFP_UNDRLYNG        =:c_stck_nm;

				if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND)
        {
          fn_userlog( c_ServiceName,"Error while updating delivery quantity blocked");
          fn_errlog( c_ServiceName, "S31270", SQLMSG, c_err_msg  );
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
				if(SQLCODE == NO_DATA_FOUND)
        {
          fn_userlog( c_ServiceName,"No data found for future position");
        }
			}
			if( c_prdct_typ == 'O' )
			{
				EXEC SQL
					UPDATE	FOP_FO_OPTIONS_PSTN
					SET			FOP_DLVRY_QTY_BLCKD = 0
					WHERE			FOP_CLM_MTCH_ACCNT=:c_cln_mtch_accnt
					AND			FOP_UNDRLYNG = :c_stck_nm;

				if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND)
        {
          fn_userlog( c_ServiceName,"Error while updating delivery quantity blocked");
          fn_errlog( c_ServiceName, "S31275", SQLMSG, c_err_msg  );
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
				if(SQLCODE == NO_DATA_FOUND)
        {
          fn_userlog( c_ServiceName,"No data found for future position");
        }	
			}

		}
	
		/*** Commit transaction ***/
    if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    {
			fn_errlog( c_ServiceName, "S31280", LIBMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }	

	}


	tpreturn(TPSUCCESS, SUCC_BFR, NULL, 0, 0 );

}


