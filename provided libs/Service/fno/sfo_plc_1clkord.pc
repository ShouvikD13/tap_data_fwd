/*****************************************************************************************/
/******************************************************************************************
Service Name          : SFO_PLC_1CLKORD																										*
																										                             					*
Description           : Allows a user to place basket order in derivative                 *
																																													*
																FFO_USR_ID																								*
																FFO_SSSN_ID																								*
																FFO_XCHNG_CD																							*
																FFO_SOURCE_FLG																						*
																FFO_SPL_FLG																								*
																FFO_ORD_TYP																								*
																FFO_EBA_MTCH_ACT_NO																				*
																FFO_PRDCT_TYP																							*
																FFO_UNDRLYNG																							*
																FFO_EXPRY_DT																							*
																FFO_EXER_TYP																							*
																FFO_OPT_TYP																								*
																FFO_STRK_PRC																							*
																FFO_CTGRY_INDSTK																					*
																FFO_ORDR_FLW																							*
																FFO_LMT_MKT_SL_FLG																				*
																FFO_DSCLSD_QTY																						*
																FFO_STP_LSS_TGR																						*
																FFO_LMT_RT																								*
																FFO_ORD_TOT_QTY																						*
																FFO_ORD_VALID_DT																					*
																FFO_STP_LSS_TGR																						*
																                					                  							*
																																													*
Output Parameters			:	   		                                                            *	
                                FFO_ORDR_RFRNC																						*
                        				FFO_ERR_MSG																								*
																																													*
Log                  : 25-Oct-2021		 1.0 New Release |                		  						*
Log                  : 13-Sep-2022     1.1 Unique device identifiers |Dipin               * 
Log                  : 06-Mar-2023     1.2 changing fn_lock_usr to fn_lock_fno |Ravi Malla* 
******************************************************************************************/

#include <stdio.h>					/* C Header File                */
#include <stdlib.h>				  /* C Header File                */
#include <string.h>				  /* C Header File                */
#include <sqlca.h>					/* Oracle header file           */
#include <atmi.h>						/* TUXEDO Header File           */		
#include <fml32.h>					/* TUXEDO Header File           */
#include <fo.h>				
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_log.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_read_debug_lvl.h>
#include <fn_val_ord.h>


int   Z ;
#define INIT(x,y) for(Z=0;Z<y;Z++)x[Z] = 0 ;


void SFO_PLC_1CLKORD(TPSVCINFO *rqst)
{

	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Obuf;
	FBFR32 *ptr_fml_Sbuf;
	FBFR32 *ptr_fml_Rbuf;

  struct vw_usr_prfl st_usr_prfl;
  struct vw_err_msg st_err_msg;
	
	char c_ServiceName[33];
	char c_err_msg[256];
	
	int i_Fget=0;
	int i_err[40];
  int i_cnt = 0;
	int i_ch_val=0;
  int i_bufferlength=0;
  int i_actn_id = -1;
	int insider_exist = 0; 
  int i_returncode=0;  
	char  c_usr_id[50] ="\0";
	char  c_source_flag ='\0';
  char  c_spl_flg ='\0';
  char  c_prdct_typ ='\0';
  char  c_ord_typ ='\0';
  char  c_ordr_flw ='\0';
  char  c_pipe_id[2+1]="\0";
  char  c_clm_mtch_accnt[10+1]="\0";
  char  c_service_nm[30+1]="\0";
  char  c_xchng_cd[3+1]="\0";
  char  c_channel[3+1]="\0";
  char  c_expry_dt[11+1] ="\0";
  char  c_ordr_rfrnc[18+1] ="\0";
  char  c_lmt_mkt_sl_flg='\0';
  char  c_undrlyng[10]="\0";
  char  c_prd_typ='\0';;
  char  c_spn_flg = '\0';
  char  c_bse_spn_flg ='\0';
	char  sql_fcm_opt_typ ='\0';
  char  c_null_msg [ 10 ];
	char  c_ctgry_indstk='\0';
  char  c_exrc_typ ='\0';
	char  c_alias[9]="\0";
  char  c_1clk_prtflio_id[11];
  char  c_1clk_flg='\0';
  char c_ip_address[45+1]="\0";
  char  c_trdng_psswrd_flg = YES;
  char  c_temp_psswrd[LEN_USR_TRDNG_PSSWRD]; 
  char c_txn_flg='Y';

  long  l_sssn_id =0 ;
  long  l_stp_lss_tgr =0 ;
  long  l_lmt_rt =0 ;
	long  sql_fcm_strk_prc =0 ;
	long  int l_no_of_orders =0 ;
  long  int li_len_tobuf=0 ;
	long  l_counter=0;
	long  l_ord_tot_qty=0;
	long	l_dsclsd_qty=0;
  int i_trnsctn=0;


  varchar c_usr_usr_psswrd[50+1];
  
	strcpy(c_ServiceName, "SFO_PLC_1CLKORD");
  INITDBGLVL(c_ServiceName);

	ptr_fml_Ibuf = (FBFR32*)rqst->data;

	MEMSET(st_usr_prfl);
	MEMSET(st_err_msg);


	INIT(i_err,40);
  strcpy(c_null_msg,"\0");

  i_ch_val = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_usr_prfl,
                           "vw_usr_prfl" );
  if ( i_ch_val == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
		Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
  }

	/*** Buffer Allocation ***/

	ptr_fml_Obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN + 256);
	if (ptr_fml_Ibuf == NULL)
	{
		fn_errlog( c_ServiceName, "S31010", TPMSG, c_err_msg  );
		strcpy(c_err_msg,"Problem in Placing order");
		Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );	
	}

  /*** Initialising the string variables ***/

  INIT(c_usr_id,50);
  INIT(c_clm_mtch_accnt,11);
  INIT(c_expry_dt,12);
  INIT(c_ordr_rfrnc,19);

	i_err[0] = Fget32(ptr_fml_Ibuf,FFO_USR_ID,0,(char *)c_usr_id,0) ;
	i_err[1] = Fget32(ptr_fml_Ibuf,FFO_SSSN_ID,0,(char *)&l_sssn_id,0) ;
	i_err[2] = Fget32(ptr_fml_Ibuf,FFO_CHANNEL,0, (char *)c_channel,0);
	i_err[3] = Fget32(ptr_fml_Ibuf,FFO_CLSR_TYP,0,(char *)&c_1clk_flg,0) ;
	i_err[4] = Fget32(ptr_fml_Ibuf,FFO_BILL_NO,0, (char *)c_1clk_prtflio_id,0);

  for( i_Fget = 0 ; i_Fget <= 4 ; i_Fget++ ) 
  {
    if(i_err[i_Fget] == -1)
    {
      fn_userlog(c_ServiceName,"Error in Fget of :%d:",i_Fget);
      fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg  );
      strcpy(c_err_msg,"Problem in Placing order");
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
			Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    }
  }

  /**** session check *****/

  if(Fget32(ptr_fml_Ibuf,FFO_TRD_PSSWD,0,(char *)&c_usr_usr_psswrd.arr,0) == -1)
  {

    if(Ferror32 != FNOTPRES)
    {
      fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpfree((char*)ptr_fml_Obuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if(Ferror32 == FNOTPRES)
    {
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Trading password FML not present.");
      }
      c_trdng_psswrd_flg = NO;
    }
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"Trading password flag is |%c|.",c_trdng_psswrd_flg);
   
  }

  if(st_usr_prfl.l_session_id !=0)
  {
    /**i_ch_val = fn_chk_sssn( c_ServiceName,
                                &st_usr_prfl,
                                &st_err_msg ) ;

    if ( i_ch_val == -1 )
    {
			Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
      Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    }
    ***/
     i_returncode =  fn_check_user_ip ( c_ServiceName,
                                      &st_usr_prfl ,
                                      c_temp_psswrd,
                                      c_trdng_psswrd_flg,
                                      c_ip_address,
                                      c_txn_flg,
                                      &st_err_msg );
    if ( i_ch_val == -1 )
    {
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
      Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Obuf, 0, 0 );
    }
  }


  l_no_of_orders = Foccur32((FBFR32 *)ptr_fml_Ibuf,FFO_EBA_MTCH_ACT_NO);

  if(DEBUG_MSG_LVL_3)
	{
    fn_userlog(c_ServiceName,"FFO_REC_NO :%ld:",l_no_of_orders);
    fn_userlog(c_ServiceName,"FFO_USR_ID is :%s:",c_usr_id);
    fn_userlog(c_ServiceName,"FFO_SSSN_ID is :%ld:",l_sssn_id);
    fn_userlog(c_ServiceName,"FFO_SOURCE_FLG is :%c:",c_source_flag);
    fn_userlog(c_ServiceName,"FFO_SPL_FLG is :%c:",c_spl_flg);
		fn_userlog(c_ServiceName,"Channel :%c:",c_channel);
    fn_userlog(c_ServiceName,"c_ip_address :%s:",c_ip_address);   /*** Ver 1.1 ***/
  }	


  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog( c_ServiceName, "S31025", LIBMSG , c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );  
    tpfree((char*)ptr_fml_Obuf); 
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


  /* i_returncode = fn_lock_usr( c_ServiceName,
                                st_usr_prfl.c_cln_mtch_accnt ); commented in Ver 1.2 */
  i_returncode = fn_lock_fno( c_ServiceName, st_usr_prfl.c_cln_mtch_accnt ); /* added in Ver 1.2 */
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31030", LIBMSG , c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );    
    tpfree((char*)ptr_fml_Obuf); 
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


	for(i_cnt =0 ; i_cnt < l_no_of_orders; i_cnt++)
	{
		INIT(i_err,40);

  	i_err[0] 	= Fget32(ptr_fml_Ibuf,FFO_PRDCT_TYP,i_cnt,(char *)&c_prdct_typ,0) ;
  	i_err[1] 	= Fget32(ptr_fml_Ibuf,FFO_XCHNG_CD,i_cnt,(char *)c_xchng_cd,0) ;
  	i_err[2] 	= Fget32(ptr_fml_Ibuf,FFO_EBA_MTCH_ACT_NO,i_cnt,(char *)c_clm_mtch_accnt,0) ;
  	i_err[3] 	= Fget32(ptr_fml_Ibuf,FFO_LMT_MKT_SL_FLG,i_cnt,(char *)&c_lmt_mkt_sl_flg,0) ;
  	i_err[4] 	= Fget32(ptr_fml_Ibuf,FFO_ORD_TYP,i_cnt,(char *)&c_ord_typ,0) ;
  	i_err[5] 	= Fget32(ptr_fml_Ibuf,FFO_ORDR_FLW,i_cnt,(char *)&c_ordr_flw,0) ;
  	i_err[6] 	= Fget32(ptr_fml_Ibuf,FFO_EXPRY_DT,i_cnt,(char *)c_expry_dt,0) ;
  	i_err[7] 	= Fget32(ptr_fml_Ibuf,FFO_UNDRLYNG,i_cnt,(char *)c_undrlyng,0) ; 
  	i_err[8] 	= Fget32(ptr_fml_Ibuf,FFO_STRK_PRC,i_cnt,(char *)&sql_fcm_strk_prc,0) ;
  	i_err[9] 	= Fget32(ptr_fml_Ibuf,FFO_OPT_TYP,i_cnt,(char *)&sql_fcm_opt_typ,0) ;
		i_err[10] = Fget32(ptr_fml_Ibuf,FFO_LMT_RT,i_cnt,(char *)&l_lmt_rt,0) ;
		i_err[11] = Fget32(ptr_fml_Ibuf,FFO_CTGRY_INDSTK,i_cnt,(char *)&c_ctgry_indstk,0);
		i_err[12] = Fget32(ptr_fml_Ibuf,FFO_STP_LSS_TGR,i_cnt,(char *)&l_stp_lss_tgr,0);
		i_err[13] = Fget32(ptr_fml_Ibuf,FFO_EXER_TYP,i_cnt,(char *)&c_exrc_typ,0);
		i_err[14] = Fget32(ptr_fml_Ibuf,FFO_ORD_TOT_QTY,i_cnt,(char *)&l_ord_tot_qty,0);
	  
		for( i_Fget = 0 ; i_Fget <= 14 ; i_Fget++ ) 
  	{
    	if(i_err[i_Fget] == -1)
    	{
      	fn_userlog(c_ServiceName,"Error in Fget of :%d:",i_Fget);
      	fn_errlog( c_ServiceName, "S31035", FMLMSG, c_err_msg  );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	strcpy(c_err_msg,"Problem in Placing order");
      	Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
				Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
				Fadd32( ptr_fml_Obuf,FFO_ORDR_RFRNC, c_null_msg, 0 );

     		i_ch_val = Fconcat32(ptr_fml_Obuf,ptr_fml_Ibuf);

     		if( i_ch_val == -1)
     		{
      		fn_errlog( c_ServiceName, "S31040",FMLMSG,c_err_msg);
     			Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
		      Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    		  Fadd32( ptr_fml_Obuf,FFO_ORDR_RFRNC, c_null_msg, 0 );
     		}
        tpfree((char*)ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
    	}
  	}

	  if(DEBUG_MSG_LVL_3)
    {
			fn_userlog(c_ServiceName,"ORDER NO |%d|",i_cnt );
      fn_userlog(c_ServiceName,"FFO_EBA_MTCH_ACT_NO is :%s:",c_clm_mtch_accnt);
    	fn_userlog(c_ServiceName,"FFO_PRDCT_TYP is :%c:",c_prdct_typ);
    	fn_userlog(c_ServiceName,"FFO_XCHNG_CD is :%s:",c_xchng_cd);
    	fn_userlog(c_ServiceName,"FFO_UNDRLYNG is :%s:",c_undrlyng);
			fn_userlog(c_ServiceName,"FFO_EXPRY_DT is :%s:",c_expry_dt);
			fn_userlog(c_ServiceName,"FFO_LMT_MKT_SL_FLG is :%c:",c_lmt_mkt_sl_flg);
			fn_userlog(c_ServiceName,"FFO_ORDR_FLW is :%c:",c_ordr_flw);
    	fn_userlog(c_ServiceName,"FFO_STRK_PRC is :%ld:",sql_fcm_strk_prc);
    	fn_userlog(c_ServiceName,"FFO_ORD_TYP is :%c:",c_ord_typ);
    	fn_userlog(c_ServiceName,"FFO_OPT_TYP is :%c:",sql_fcm_opt_typ);
			fn_userlog(c_ServiceName,"FFO_LMT_RT is :%ld:",l_lmt_rt) ;
			fn_userlog(c_ServiceName,"FFO_STP_LSS_TGR is :%ld:",l_stp_lss_tgr);
			fn_userlog(c_ServiceName,"FFO_CTGRY_INDSTK is :%c:",c_ctgry_indstk);
			fn_userlog(c_ServiceName,"FFO_EXER_TYP is :%c:",c_exrc_typ);
			fn_userlog(c_ServiceName,"FFO_ORD_TOT_QTY is :%ld:",l_ord_tot_qty);
  	}

  	if(c_usr_id[0] == BPID)
  	{
    	if(Fget32(ptr_fml_Ibuf,FFO_ALIAS,i_cnt,(char *)c_alias,0) == -1)
    	{
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			  fn_userlog(c_ServiceName,"Error in Fget of :%d:",i_Fget);
        fn_errlog( c_ServiceName, "S31045", FMLMSG, c_err_msg  );
        strcpy(c_err_msg,"Problem in Placing order");
        Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
				Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
				Fadd32( ptr_fml_Obuf,FFO_ORDR_RFRNC, c_null_msg, 0 );

        i_ch_val = Fconcat32(ptr_fml_Obuf,ptr_fml_Ibuf);

        if( i_ch_val == -1)
        {
          fn_errlog( c_ServiceName, "S31050",FMLMSG,c_err_msg);
        }
        tpfree((char*)ptr_fml_Obuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
    	}
  	}

		EXEC SQL
					SELECT  NVL(CLM_SPAN_ALLWD,'N'),
									NVL(CLM_BSESPAN_ALLWD,'N')
					INTO    :c_spn_flg,
									:c_bse_spn_flg
					FROM    CLM_CLNT_MSTR
					WHERE   CLM_MTCH_ACCNT  = :c_clm_mtch_accnt;

		if(SQLCODE != 0)
		{
			fn_errlog( c_ServiceName, "S31055", SQLMSG, c_err_msg  );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			strcpy(c_err_msg,"Error while selecting span flag");
			Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
			Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
			Fadd32( ptr_fml_Obuf,FFO_ORDR_RFRNC, c_null_msg, 0 );

        i_ch_val = Fconcat32(ptr_fml_Obuf,ptr_fml_Ibuf);

        if( i_ch_val == -1)
        {
          fn_errlog( c_ServiceName, "S31060",FMLMSG,c_err_msg);
        }
       tpfree((char*)ptr_fml_Obuf);
		   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
		}   

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"NSE SPAN Allowed Flag Is :%c:",c_spn_flg);
			fn_userlog(c_ServiceName,"BSE SPAN Allowed Flag Is :%c:",c_bse_spn_flg);
			fn_userlog(c_ServiceName,"ALIAS Is :%s:",c_alias);
		}
 
		switch(c_prdct_typ)
		{
			case FUTURES:
			case OPTIONS:
      case FUTURE_PLUS:

       if( c_prdct_typ == FUTURE_PLUS )
       {
         strcpy(c_service_nm,"SFO_FUT_PLC_ORD");
       }
       else
       {
 

			 if( (( ( c_spn_flg == 'Y' ) && strcmp(c_xchng_cd,"NFO") == 0 ) || 
							( c_bse_spn_flg == 'Y' && strcmp(c_xchng_cd,"BFO") == 0 )) )

			 {
					strcpy(c_service_nm,"SFO_SPN_PLC_ORD");
			 }
			 else if (c_prdct_typ == FUTURES)
			 {
					strcpy(c_service_nm,"SFO_FUT_PLC_ORD");
			 }
			 else
			 {
					strcpy(c_service_nm,"SFO_OPT_PLC_ORD");
			 }
      }  
			break;

			default:
				 fn_userlog(c_ServiceName,"Inside DEFAULT");
         fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				 fn_errlog( c_ServiceName, "S31065", "Invalid product type", c_err_msg  );
				 strcpy(c_err_msg,"Invalid product type");
				 Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
				 Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
				 Fadd32( ptr_fml_Obuf,FFO_ORDR_RFRNC, c_null_msg, 0 );

        i_ch_val = Fconcat32(ptr_fml_Obuf,ptr_fml_Ibuf);

        if( i_ch_val == -1)
        {
          fn_errlog( c_ServiceName, "S31070",FMLMSG,c_err_msg);
        }
        tpfree((char*)ptr_fml_Obuf);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
		}
					
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before calling order rout ");
			fn_userlog(c_ServiceName,"MTCH ACNT :%s: XCH :%s: PRDCT :%c: EXPRY DT :%s: UNDRLNG :%s: STRK_PRC :%ld: option type :%c:", c_clm_mtch_accnt, c_xchng_cd, c_prdct_typ, c_expry_dt, c_undrlyng, sql_fcm_strk_prc, sql_fcm_opt_typ ); 
		}
			
		ptr_fml_Sbuf = (FBFR32*)tpalloc ( "FML32", NULL, MIN_FML_BUF_LEN );
				
		if ( ptr_fml_Sbuf == NULL )
		{
			fn_errlog( c_ServiceName, "S31075", TPMSG, c_err_msg  );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			strcpy(c_err_msg,"Problem in Placing order");
			Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
			Fadd32( ptr_fml_Obuf,FFO_ORDR_RFRNC, c_null_msg, 0 );

        i_ch_val = Fconcat32(ptr_fml_Obuf,ptr_fml_Ibuf);

        if( i_ch_val == -1)
        {
          fn_errlog( c_ServiceName, "S31080",FMLMSG,c_err_msg);
        }
      tpfree((char*)ptr_fml_Obuf);
		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
		}

		ptr_fml_Rbuf = ( FBFR32 * ) tpalloc ( "FML32", NULL, MIN_FML_BUF_LEN );

		if ( ptr_fml_Rbuf == NULL )
		{
			fn_errlog( c_ServiceName, "S31085", TPMSG, c_err_msg  );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			strcpy(c_err_msg,"Problem in Placing order");
			Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
			Fadd32( ptr_fml_Obuf,FFO_ORDR_RFRNC, c_null_msg, 0 );

        i_ch_val = Fconcat32(ptr_fml_Obuf,ptr_fml_Ibuf);

        if( i_ch_val == -1)
        {
          fn_errlog( c_ServiceName, "S31090",FMLMSG,c_err_msg);
        }
      tpfree((char*)ptr_fml_Obuf);
		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
		}
						
		i_ch_val = Finit32 ( ptr_fml_Sbuf, MIN_FML_BUF_LEN );
			
		if (i_ch_val == -1)
		{
			fn_errlog( c_ServiceName, "S31095", FMLMSG, c_err_msg  );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			strcpy(c_err_msg,"Problem in Placing order");
			tpfree ( ( char * ) ptr_fml_Sbuf );
			tpfree ( ( char * ) ptr_fml_Rbuf );
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
			Fadd32( ptr_fml_Obuf,FFO_ORDR_RFRNC, c_null_msg, 0 );

        i_ch_val = Fconcat32(ptr_fml_Obuf,ptr_fml_Ibuf);

        if( i_ch_val == -1)
        {
          fn_errlog( c_ServiceName, "S31100",FMLMSG,c_err_msg);
        }
      tpfree((char*)ptr_fml_Obuf);
      tpfree((char*)ptr_fml_Rbuf); 
		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
		}

		i_ch_val = Finit32 ( ptr_fml_Rbuf, MIN_FML_BUF_LEN );
			
		if (i_ch_val == -1)
		{
			fn_errlog( c_ServiceName, "S31105", FMLMSG, c_err_msg  );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			strcpy(c_err_msg,"Problem in Placing order");
			tpfree ( ( char * ) ptr_fml_Sbuf );
			tpfree ( ( char * ) ptr_fml_Rbuf );
			Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_err_msg, 0 );
			Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
			Fadd32( ptr_fml_Obuf,FFO_ORDR_RFRNC, c_null_msg, 0 );

        i_ch_val = Fconcat32(ptr_fml_Obuf,ptr_fml_Ibuf);

        if( i_ch_val == -1)
        {
          fn_errlog( c_ServiceName, "S31110",FMLMSG,c_err_msg);
        }
      tpfree((char*)ptr_fml_Obuf);
      tpfree((char*)ptr_fml_Rbuf); 
		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
		}
						
		INIT(i_err,40);
				
		l_dsclsd_qty = 0;
		c_spl_flg 	 = 'N';

		i_err [ 0 ]  = Fchg32 ( ptr_fml_Sbuf, FFO_SPL_FLG,0, ( char * )&c_spl_flg, 0 );
		i_err [ 1 ]  = Fchg32 ( ptr_fml_Sbuf, FFO_EBA_MTCH_ACT_NO,0, ( char * )c_clm_mtch_accnt, 0 );
		i_err [ 2 ]  = Fchg32 ( ptr_fml_Sbuf, FFO_XCHNG_CD,0, ( char * )c_xchng_cd, 0 );
		i_err [ 3 ]  = Fchg32 ( ptr_fml_Sbuf, FFO_PRDCT_TYP,0, ( char * )&c_prdct_typ, 0 );
		i_err [ 4 ]  = Fchg32 ( ptr_fml_Sbuf, FFO_UNDRLYNG,0, ( char * )c_undrlyng, 0 );
		i_err [ 5 ]  = Fchg32 ( ptr_fml_Sbuf, FFO_EXPRY_DT,0, ( char * )c_expry_dt, 0 );
		i_err [ 6 ]  = Fchg32 ( ptr_fml_Sbuf, FFO_OPT_TYP,0, ( char * )&sql_fcm_opt_typ, 0 );
		i_err [ 7 ]  = Fchg32 ( ptr_fml_Sbuf, FFO_STRK_PRC,0, ( char * )&sql_fcm_strk_prc, 0 );
		i_err [ 8 ]  = Fchg32 ( ptr_fml_Sbuf, FFO_CTGRY_INDSTK,0, ( char * )&c_ctgry_indstk, 0 );
		i_err [ 9 ]  = Fchg32 ( ptr_fml_Sbuf, FFO_LMT_MKT_SL_FLG,0, ( char * )&c_lmt_mkt_sl_flg, 0 );
		i_err [ 10 ] = Fchg32 ( ptr_fml_Sbuf, FFO_ORDR_FLW,0, ( char * )&c_ordr_flw, 0 );
		i_err [ 11 ] = Fchg32 ( ptr_fml_Sbuf, FFO_STP_LSS_TGR,0, ( char * )&l_stp_lss_tgr, 0 );
		i_err [ 12 ] = Fchg32 ( ptr_fml_Sbuf, FFO_LMT_RT,0, ( char * )&l_lmt_rt, 0 );
		i_err [ 13 ] = Fchg32 ( ptr_fml_Sbuf, FFO_ORD_TYP,0, ( char * )&c_ord_typ, 0 );
		i_err [ 14 ] = Fchg32 ( ptr_fml_Sbuf, FFO_SVC_NAME,0, ( char * )c_service_nm, 0 );
		i_err [ 15 ] = Fchg32 ( ptr_fml_Sbuf, FFO_CHANNEL,0, ( char * )c_channel, 0 );
		i_err [ 16 ] = Fchg32 ( ptr_fml_Sbuf, FFO_DSCLSD_QTY,0, ( char * )&l_dsclsd_qty,0);
		i_err [ 17 ] = Fchg32 ( ptr_fml_Sbuf, FFO_ORD_TOT_QTY,0, ( char * )&l_ord_tot_qty,0);
		i_err [ 18 ] = Fchg32 ( ptr_fml_Sbuf, FFO_EXER_TYP,0, ( char * )&c_exrc_typ,0);
		i_err [ 19 ] = Fchg32 ( ptr_fml_Sbuf, FFO_ALIAS,0, ( char * )c_alias,0);
		i_err [ 20 ] = Fchg32 ( ptr_fml_Sbuf, FFO_USR_ID,0,( char * )c_usr_id,0);
		i_err [ 21 ] = Fchg32 ( ptr_fml_Sbuf, FFO_SSSN_ID,0,(char *)&l_sssn_id,0);
		i_err [ 22 ] = Fchg32 ( ptr_fml_Sbuf, FFO_CLSR_TYP,0,( char * )&c_1clk_flg,0);
		i_err [ 23 ] = Fchg32 ( ptr_fml_Sbuf, FFO_BILL_NO,0,(char *)c_1clk_prtflio_id,0);

		for ( i_Fget = 0; i_Fget <= 23; i_Fget++ ) 
		{
			if ( i_err [ i_Fget ] == -1 )
			{
				fn_userlog (c_ServiceName, "Error in field |%d|", i_Fget );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog ( c_ServiceName,"S31115",FMLMSG, c_err_msg  );
				tpfree ( ( char * ) ptr_fml_Sbuf );
				tpfree ( ( char * ) ptr_fml_Rbuf );
				Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
				Fadd32( ptr_fml_Obuf,FFO_ORDR_RFRNC, c_null_msg, 0 );

        i_ch_val = Fconcat32(ptr_fml_Obuf,ptr_fml_Ibuf);

        if( i_ch_val == -1)
        {
          fn_errlog( c_ServiceName, "S31120",FMLMSG,c_err_msg);
        }
        tpfree((char*)ptr_fml_Obuf);
        tpfree((char*)ptr_fml_Rbuf);  
			  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
			}
	 }

/***** Ver 1.1 started ***/

   i_err[ 0 ] = Fchg32 ( ptr_fml_Sbuf, FFO_OI_INDCTR, 0, (char *)c_ip_address, 0);    
   if ( (i_err[ 0 ]  == -1 ) )
   {
        fn_userlog (c_ServiceName, "Error in field |%d|", i_Fget );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog ( c_ServiceName,"S31125",FMLMSG, c_err_msg  );
        tpfree ( ( char * ) ptr_fml_Sbuf );
        tpfree ( ( char * ) ptr_fml_Rbuf );
        Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Obuf,FFO_ORDR_RFRNC, c_null_msg, 0 );

        i_ch_val = Fconcat32(ptr_fml_Obuf,ptr_fml_Ibuf);

        if( i_ch_val == -1)
        {
          fn_errlog( c_ServiceName, "S31130",FMLMSG,c_err_msg);
        }
        tpfree((char*)ptr_fml_Obuf);
        tpfree((char*)ptr_fml_Rbuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );


   }                                                       
                               /******Ver 1.1  ended***/

	if(tpcall("SFO_ORD_ROUT",(char*)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&li_len_tobuf,0) == -1)
		{
			if (TPCODE != TPESVCFAIL)
			{
				 fn_errlog( c_ServiceName, "S31135",TPMSG,c_err_msg);
				 fn_userlog( c_ServiceName, "TP CODE IS    |%d|",TPCODE);
			}
			else
			{

				i_ch_val = Fget32(ptr_fml_Rbuf, FFO_ERR_MSG, 0, ( char * )c_err_msg, 0);

				if (i_ch_val == -1)
				{
					fn_errlog( c_ServiceName, "S31140",FMLMSG,c_err_msg);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );	
					i_ch_val = Fconcat32(ptr_fml_Obuf,ptr_fml_Sbuf);

					tpfree ( ( char * ) ptr_fml_Sbuf );
					tpfree ( ( char * ) ptr_fml_Rbuf );
					Fadd32( ptr_fml_Obuf,FFO_ERR_MSG, c_err_msg, 0 );
					Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
					Fadd32( ptr_fml_Obuf,FFO_ORDR_RFRNC, c_null_msg, 0 );
					tpfree ( ( char * ) ptr_fml_Obuf );
				  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
				}
			}

      if( strstr( c_err_msg,"Available Limits##" ) != NULL )
      {
        MEMSET(c_err_msg);
        strcpy(c_err_msg,"Available Futures& Option limit is insufficient to cover the value. Please add approximate required margin shown on order placement page & try again"); 
      }

       /**************
      Fprint32(ptr_fml_Rbuf);

			i_ch_val = Fget32(ptr_fml_Rbuf, FFO_ACTN_ID, 0, (char *)&i_actn_id, 0);

			if (i_ch_val == -1 && Ferror32 !=FNOTPRES)
			{
				fn_errlog( c_ServiceName, "S31145",FMLMSG,c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				i_ch_val = Fconcat32(ptr_fml_Obuf,ptr_fml_Sbuf);

				tpfree ( ( char * ) ptr_fml_Sbuf );
				tpfree ( ( char * ) ptr_fml_Rbuf );
				Fadd32( ptr_fml_Obuf,FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
				Fadd32( ptr_fml_Obuf,FFO_ORDR_RFRNC, c_null_msg, 0 );
				tpfree ( ( char * ) ptr_fml_Obuf );
 			  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
 			}
			else if( Ferror32 == FNOTPRES)
			{
				i_actn_id = -1;

				Fadd32( ptr_fml_Obuf,FFO_ERR_MSG, c_err_msg, 0 );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31150",FMLMSG,c_err_msg);	
        i_ch_val = Fconcat32(ptr_fml_Obuf,ptr_fml_Sbuf);

        tpfree ( ( char * ) ptr_fml_Sbuf );
        tpfree ( ( char * ) ptr_fml_Rbuf );
        Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Obuf,FFO_ORDR_RFRNC, c_null_msg, 0 );
				tpfree ( ( char * ) ptr_fml_Obuf );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
			}

			if(i_actn_id == 1)
			{	
				fn_userlog(c_ServiceName,"Inside Error ORDER NO |%d|",i_cnt );
				fn_errlog( c_ServiceName,"S31155","Order value very high: Use the normal Buy/Sell screen.",c_err_msg);
				strcpy(c_err_msg,"Order value very high: Use the normal Buy/Sell screen.");
			}
      ****/

			fn_userlog( c_ServiceName, "ERROR Return from SFO_ORD_ROUT for record |%d| is :%s:",i_cnt,c_err_msg);

    	i_bufferlength = MIN_FML_BUF_LEN * 300 ;

    	if (Funused32(ptr_fml_Obuf) <= Fneeded32(1,i_bufferlength))
    	{
      	l_counter++;

      	ptr_fml_Obuf=(FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
       	                   (Fsizeof32(ptr_fml_Obuf)+(l_counter*MIN_FML_BUF_LEN)));

      	if (ptr_fml_Obuf == NULL)
      	{
        	fn_errlog(c_ServiceName,"S31160",TPMSG,c_err_msg);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        	Fadd32( ptr_fml_Obuf,FFO_ERR_MSG, c_err_msg, 0 );
        	Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        	tpfree ( ( char * ) ptr_fml_Sbuf );
        	tpfree ( ( char * ) ptr_fml_Rbuf );
        	tpreturn(TPFAIL,ERR_BFR, (char *)ptr_fml_Obuf, 0, 0);
      	}
    	}
		
			i_ch_val = Fconcat32(ptr_fml_Obuf,ptr_fml_Sbuf);

      tpfree ( ( char * ) ptr_fml_Sbuf );
      tpfree ( ( char * ) ptr_fml_Rbuf );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Obuf,FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Obuf,FFO_ORDR_RFRNC, c_null_msg, 0 );
      Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf,FFO_ORDR_RFRNC, c_null_msg, 0 );	
			tpfree ( ( char * ) ptr_fml_Obuf );
		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
  	}

		i_ch_val = Fget32 ( ptr_fml_Rbuf, FFO_ORDR_RFRNC, 0,
                                ( char * )c_ordr_rfrnc, 0 );
    if( i_ch_val == -1 )
    {	
			fn_errlog ( c_ServiceName,"S31165",FMLMSG, c_err_msg  );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			i_ch_val = Fconcat32(ptr_fml_Obuf,ptr_fml_Sbuf);

      tpfree ( ( char * ) ptr_fml_Sbuf );
      tpfree ( ( char * ) ptr_fml_Rbuf );
      Fadd32( ptr_fml_Obuf,FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Obuf,FFO_ORDR_RFRNC, c_null_msg, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName, "OUTPUT OF SFO_PLC_1CLKORD FOR SUCCESSFUL ORDER no |%d|",i_cnt );
      fn_userlog(c_ServiceName, "c_ordr_rfrnc is     |%s|", c_ordr_rfrnc);
    }

 		i_bufferlength = MIN_FML_BUF_LEN * 300  ; 

  	if (Funused32(ptr_fml_Obuf) <= Fneeded32(1,i_bufferlength))
  	{
    	l_counter++;

    	ptr_fml_Obuf=(FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
    	                    (Fsizeof32(ptr_fml_Obuf)+(l_counter*MIN_FML_BUF_LEN)));

    	if (ptr_fml_Obuf == NULL)
    	{
      	fn_errlog(c_ServiceName,"S31170",TPMSG,c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	Fadd32( ptr_fml_Obuf,FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
				tpfree ( ( char * ) ptr_fml_Sbuf );
      	tpfree ( ( char * ) ptr_fml_Rbuf );
      	tpreturn(TPFAIL,ERR_BFR, (char *)ptr_fml_Obuf, 0, 0);
    	}
  	}

		i_ch_val = Fconcat32(ptr_fml_Obuf,ptr_fml_Rbuf);

    if( i_ch_val == -1)
    {
      fn_errlog( c_ServiceName, "S31175",FMLMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			i_ch_val = Fconcat32(ptr_fml_Obuf,ptr_fml_Sbuf);

      tpfree ( ( char * ) ptr_fml_Sbuf );
      tpfree ( ( char * ) ptr_fml_Rbuf );
      Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Obuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Obuf,FFO_ORDR_RFRNC, c_null_msg, 0 );
      tpfree ( ( char * ) ptr_fml_Obuf );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); 
    }
  	
		tpfree ( ( char * ) ptr_fml_Sbuf );
    tpfree ( ( char * ) ptr_fml_Rbuf );

    strcpy(c_err_msg," Your Order Has Been Placed Successfully");
		
		Fadd32( ptr_fml_Obuf,FFO_ERR_MSG, c_err_msg, 0 );
	
		
	} /* End of for loop */

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    tpfree ( ( char * ) ptr_fml_Obuf );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );  
    tpfree ( ( char * ) ptr_fml_Obuf ); 
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	
	/**tpfree ( ( char * ) ptr_fml_Ibuf );**/

	fn_userlog(c_ServiceName,"FNO BASKET ORDER PLACEMENT SUCCESSFULLY COMPLETED.");

	tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
}

