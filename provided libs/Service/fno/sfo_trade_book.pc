
/*  Program           : SFO_TRADE_BOOK                                        */
/*                                                                            */
/*  Input             : Required                                              */
/*                      FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_OPERATION_TYP                                     */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_FROM_DT                                           */
/*                      FFO_TO_DT                                             */
/*                      FFO_SPL_FLG                                           */
/*                      FFO_ORDR_RFRNC                                        */
/*                                                                            */
/*  Output            : FFO_ORDR_RFRNC                                        */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_EXEC_QTY                                          */
/*                      FFO_EXCTD_RT                                          */
/*                      FFO_TRD_DT                                            */
/*                      FFO_INSTRMNT_TYP                                      */
/*                      FFO_TRD_FLW                                           */
/*                      FFO_TRD_RFRNC                                         */
/*                      FFO_BRKRG_VL                                          */
/*                      FFO_AMOUNT                                            */
/*                                                                            */
/*  Description       : This service retrieves the values of the entire trade */
/*                      book when given different input parameters based on   */
/*                      different needs. The different needs are described    */
/*                      as different operation types.                         */
/*                      A - Underlying(Stock Code) as Input                   */
/*                      B - Without Underlying(Stock Code)                    */
/*                                                                            */
/*  Log               : 1.0                                                   */
/*                      1.1 SN changes as junk values shown for brokerage			*/
/*                      1.2                                                   */
/*                      1.3 Vikash                                            */
/*                    : 1.4 03-Jan-2008   SKS                                 */
/*										:	1.5	22-May-2008		Shamili.														*/
/*										: 1.6 01-Jul-2008		Shamili.														*/
/*										: 1.8 28-Dec-2010		Shailesh.														*/
/*										:	1.9	15-Nov-2010		Sandeep Patil												*/
/*                    : 2.0 21-Jan-2011		Nitin Save                          */
/*                    : 2.1 28-Feb-2012   Nitin Save                          */ 
/*                    : 2.2 11-Jul-2012   Nitin save                          */
/*                    : 2.3 28-Feb-2013   Sachin Birje                        */
/*                    : 2.4 26-Dec-2012   Navina D.                           */
/*										: 2.5 10-Jun-2013   Vishnu N.														*/
/*                    : 2.6 02-May-2013   Bhushan Sonwane                     */
/*                    : 2.7 23-Sep-2013   Shailesh Sabale                     */
/*                    : 2.8 09-Oct-2013   Shailesh Sabale                     */
/*                    : 2.9 07-Feb-2014   Navina D.                           */
/*                    : 3.0 05-May-2014   Samip M.                            */
/*										:	3.1 20-Jun-2014		Bhushan Sonwane                     */
/*                    : 3.2 01-Sep-2014   Samip M.                            */
/*                    : 3.3 01-Oct-2014   Sandip T.                           */
/*                    ; 3.5 04-Apr_2015   Tanmay Warkhade                     */
/*                    ; 3.6 12-Aug-2015   Sandip Tambe                        */
/*                    : 3.7 23-Nov-2015   Anand Dhopte                        */
/*                    : 3.8 15-Dec-2015   Anand Dhopte                        */
/*                    : 3.9 09-Feb-2016   Anand Dhopte                        */
/*                    : 4.0 24-Oct-2016   Kishor Borkar			                  */
/*                    : 4.1 28-Jun-2017   Sandip Tambe 			                  */
/*                    : 4.2 07-Jul-2017   Afzal Khan                          */
/*                    : 4.3 09-Oct-2017   Sandeep															*/
/*                    : 4.4 21-May-2018   Anand Dhopte                        */
/*                    : 4.5 03-Jul-2020   Sanjeet Pawar                       */
/*                    : 4.6 12-Jan-2021   Mahesh Regulwar                     */
/*										:	4.7 10-May-2022		Shlok Ghan													*/
/******************************************************************************/
/******************************************************************************/
/* 1.0    -   New Release                                                     */
/* 1.2    -   Total value of trade exceeds long so changed to doubble         */
/* 1.3    -   Changes for NNF808 increase in size of trade no. and order no.  */
/* 1.4    -   AIX Migration                                                   */
/* 1.5		-		IBM changes for FML string and variable char										*/
/* 1.6		-		Brokerage Link and Display of additional charges                */ 
/*						in Brokeareg link                                               */
/* 1.7    -   IFX changes by zubin  on 04/04/2008                             */
/* 1.8    -   CRSCM44262 to display trades in descendimg order of date				*/
/* 1.9		-		Silver Light Changes																						*/	
/* 2.0   -    CRCSN43910 Option Pricing- To show order level brokerage        */	
/* 2.1   -    BSE- Changes to implement new exchange code- BSE                */
/* 2.2   -    Silverlight- Option Pricing Module Changes                      */
/* 2.3   -    GAME Simulator Changes                                          */
/* 2.4   -    Excluding SLTP F+ trades                                        */ 
/* 2.5	 - 		Changes for Andriod to display records sorted by ordr ref no	  */
/* 2.6   -    SPAN in RIA changes                                             */  
/* 2.7   -    Excluding OptionPlus trades                                     */
/* 2.8   -    Changes for RIA SLTP Future Plus                                */ 
/* 2.9   -    Changes to display scheme details for Optionplus clients mapped */
/* 3.0   -    Changes for Advisor Trade Book                                  */ 
/*            to OPM-195 plan                                                 */
/* 3.1	 -		OptionPlus in RIA																								*/
/* 3.2	 -		View to FML changes																							*/
/* 3.3	 -		CR-ISEC14-55222_I_Gain_Profit_Pricing_Model Changes							*/
/* 3.5   -    Enabling Logs for From Date and To Date                         */
/* 3.6   -    Bullet Pricing scheme changes                                   */
/* 3.7   -    Display of Brokerage and Taxes seperately on other front-ends   */
/* 3.8   -    Changes for displaying product wise records from Mobile App     */
/* 3.9   -    DB HITS Reduction Changes                                       */
/* 4.0	 -		Check Session IP - PHASE_III                                    */
/* 4.1	 -		GST Changes                                                     */
/* 4.2   -    Brokerage scheme details code in case of spl flg 'P' removed    */
/*            as same logic is applied in SFO_TRD_DTLS                        */
/* 4.3   -    Logs Introduced To Find Out Reason Of Spike In Performance			*/
/* 4.4   -    Memory Allocation and reallocation proper handling changes      */
/* 4.5   -    System Order on Advisor Trading Screen                          */                 
/* 4.6   -    Minor Change to return LTP to send over API                     */
/* 4.7	 -		Mother App changes ALL filter																	  */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_fml_def.h>
/** #include <fo_view_def.h> **/	/** Commented for Ver 3.2 ***/
#include <fo_view_def.h> /* Added in Ver 4.0 */
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>         /*  Ver 1.4 : Added */
#include <fn_read_debug_lvl.h>  /*  Ver 1.4 : Added   */
#include <fml_rout.h>     /* Added in Ver 4.0 */

#include <time.h>
#include <sys/time.h> /* VER TOL : TUX on LINUX -- Header file <sys/time.h> added (Ravindra) */     
char c_time[12];      
void fn_gettime(void);  

void SFO_TRADE_BOOK(TPSVCINFO *rqst)
{

	EXEC SQL INCLUDE "table/ifx_usr_mstr.h"; /*ver 1.7*/
	EXEC SQL INCLUDE "table/pism_prepaid_info_sch_mstr.h"; /*** ver 3.3 **/

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  char c_ServiceName[33];
  char c_errmsg[256];
  /***  char c_option_type; *** Commented in Ver 3.9 ***/ 
  char c_spl_flg;
  /*** char c_mod_can_flg = 'N'; 
  char c_rqst_typ ;
  char c_plcd_stts ; *** Commented in Ver 3.9 ***/	
  char c_user_id[9];

  long l_sssn_id = 0;
  int  counter;
  /*** int  i_returncode; *** Commented in Ver 3.9 ***/
  /*int  i_err[14];           *  Ver 1.4 : Array size changed from 9 to 14 */
  /*int  i_ferr[14];          *  Ver 1.4 : Array size changed from 9 to 14 */
  /*	int  i_err[19]; */          /*  Ver 2.0 : Array size changed from 14 to 19 */
	int  i_err[22];           /*  Ver 2.1 : Array size changed from 19 to 20 *//** Changed from 20 to 21 for Ver 3.0 ***//** Changed from 21 to 22 for Ver 4.6 ***/
  /* int  i_ferr[19];  */        /*  Ver 2.0 : Array size changed from 14 to 19 */
  int  i_ferr[20];          /*  Ver 2.1 : Array size changed from 19 to 20 */
  int  i_cnt;
  int  i;
  int  cnt_sysdt;
  /*** int  i_counter = 1; *** Commented in Ver 3.9 ***/
  int  i_hist_flg ;
  int i_error[4];
/*  int i_serr[18];     *** Ver 1.9 *** increased to 19 in Ver 3.7 ***/
  int i_serr[19];     /***  Ver 3.7 ***/
	int	i_berr[22];			/***	Ver	1.9	***/
	int	i_rec_cnt  = 1 ;     /***  Ver 1.9 ***/ /*** Variable initialized in Ver 4.2 ***/
	int  i_returncode;  /*** Ver 4.0 ***/
	
   EXEC SQL BEGIN DECLARE SECTION;
  /*** long    li_sssn_id; *** Commented in Ver 3.9 ***/
  long    li_sssn_id_chk;
   sql_cursor  sys_cursor;
   sql_cursor  sys_iod_cursor;     	/** Ver 3.3 **/
   char c_opr_typ;
   char c_ordr_rfrnc [ 19 ];
   char c_ord_rfr [ 19 ];
   char c_trd_rfrnc [ 19 ];
   varchar c_trd_date [ 19 ];
   varchar c_prev_trd_date [ 19 ];			/***	Ver 3.9	***/
   varchar c_exp_date [ 19 ];
   varchar c_frm_dt[ LEN_DATE ];
   varchar c_to_dt[ LEN_DATE ];
   varchar c_trdbk_seq[25];			/***	Ver	1.9	***/
   char c_product_typ = '\0';		/*** Ver 2.4 variable initialised ***/
   char c_prd_typ;
   /*** char c_date_flag = 'Y'; *** Commented in Ver 3.9 ***/
   char c_mtch_accnt_no[11];
   char c_exchange_cd[4];
   char c_xchng_cd[4];  /** Added in Ver 2.1 **/
   /*char c_indstk; */   /*1.5*/
	 char c_indstk[2];		 /*1.5*/
	long  cnt_rec=0;  /*Ver 1.7*/
   char c_exrc_typ;
   char c_opt_typ;
   char c_trd_flw;
   char c_trade_flw;
   char c_trade_flow;
   char c_underlying[7];
   char c_unlying[7];
   char c_exercise_type;
	 char c_cntrctnt_nmbr[25];			/***	Ver	1.9	***/
   char c_apisrc_flg = '\0';      /*** Ver 4.6 ***/

   char c_clm_brkr_cmpt_flg;      /***  Ver 2.0 **/
   varchar c_clm_fno_schm_code[10];  /***  Ver 2.0 **/
   char c_clm_igain_op_flg;      			/*** Ver 3.3 **/
   varchar c_clm_igain_op_schm[10];  	/*** Ver 3.3 **/
   char c_clm_igain_fp_flg;      			/*** Ver 3.3 **/
   varchar c_clm_igain_fp_schm[10];  	/*** Ver 3.3 **/
   char c_prepaid_flg;  							/*** Ver 3.3 **/
   char c_source_flg;   /***  Ver 2.0 **/
   char c_advisor_id[20];      /*** Ver 3.0 ***/
   char c_sys_order = 'N';          /*** Ver 4.5  ***/
   /*** char c_exg_stts;       *** Ver 3.9 ***  *** Commented in Ver 4.2 as variable use is commented ***/

   long l_strk_prc;
   long l_exctd_qty;
   long l_exctd_rt;
   long l_brkg_val;

   long l_stt;					 /*1.6*/
   long l_srv_tax;			 /*1.6*/
   long l_sebi_tt;			 /*1.6*/
   long l_tran_chrg;		 /*1.6*/
	 long	l_stmp_duty;	   /*1.6*/
   long l_incl_all =0;	 /*1.6*/
	 long	l_ltp=0;					/***	Ver	1.9	***/ /*** initialized in Ver 4.6 ***/
   long l_sum_tax = 0;  /***  Ver 3.7 ***/


   double d_value =0.0; /* 1.2 */
	 double d_exctd_rt = 0.0 ;			/***	Ver	1.9	***/
	 double d_ltp = 0.0 ;						/***	Ver	1.9	***/


   /***  Ver 2.0 Starts  **********/

	 /*** long l_obc_ordr_rfrnc = 0; *** Commented in Ver 3.9 ***/
	 int i_total_lots = 0;
	 int i_intra_day_lots = 0;
	 int i_inrange_lots = 0;
	 int i_below_range_lots = 0;
	 int i_above_range_lots = 0;
	 int i_obc_carry_fwd_lot = 0;
	 long l_inrange_charges = 0;
	 double l_below_range_charges = 0;
	 long l_above_range_charges = 0;
	 double l_carry_fwd_charges = 0;
	 long l_total_charges = 0;


	 int i_loop_cnt = 0;
	 varchar c_osm_schm_code[10];
	 varchar c_period[50];
	 varchar c_osd_lwr_rng_lotsz[30];
	 varchar c_osd_upr_rng_lotsz[30];
	 varchar c_osd_brkr_rng_rate[30];
	 varchar c_osd_chrg_base[30];
	 varchar c_osm_carry_frwd[30];

	 varchar c_below_range_charges[30];
	 varchar c_schm_desc[30];
	 varchar c_below_range[30];
	 varchar c_lot_range[30];
	 varchar c_lot_range_charges[30];
	 varchar c_above_range[30];
	 varchar c_above_range_charges[30];
	 varchar c_carry_fwd_charges[30];

	 varchar c_lot_charges_range[150];
	 varchar c_lot_charges_min[150];
	 varchar c_lot_charges_max[150];
   /*** varchar c_nxt_trd_dt[12];       *** Ver 3.9 ***  *** Commented in Ver 4.2 as variable use is commented ***/

	 int 		i_buf_len=0;
   int    i_buffer_len = 0;        /*** Ver 4.2 ***/
 

  /**  Ver 2.0 Ends  */
  /***  char c_igain_trd_flw ;		** Ver 3.3 **
   char c_prft_loss_flg ;					** Ver 3.3 **
	 short  s_tot_qty_traded=0;			** Ver 3.3 *** Commented in Ver 3.9 ***/ 
	 varchar c_igain_schm_code[10];			/** Ver 3.3 **/
	 varchar c_igain_schm_desc[30];			/** Ver 3.3 **/
   varchar c_igain_ordr_rfrnc [ 100 ];/** Ver 3.3 **/
	 varchar c_igain_ordr_dtls[300];		/** Ver 3.3 **/
	 varchar c_igain_ordr_dtls1[300];		/** Ver 3.3 **/
	 double	 d_profit_rate=0;						/** Ver 3.3 **/
	 double  d_loss_rate = 0;						/** Ver 3.3 **/
	/*** double  d_wtd_avrg_trd_prc = 0;** Ver 3.3 **
	 long  l_ordr_lvl_brkg = 0;					** Ver 3.3 ** Commented in Ver 3.9 ***/
	 int  i_ordr_cnt=0;									/** Ver 3.3 **/

 /**  char c_xchng_ack[16];  unused variable commented in ver 1.3 **/
   EXEC SQL END DECLARE SECTION;

  /*** Ver 4.0 Starts Here ***/
  struct vw_usr_prfl st_usr_prfl;
  struct vw_err_msg st_err_msg;

  MEMSET(st_usr_prfl);
  MEMSET(st_err_msg);
  /*** Ver 4.0 Ends Here ***/

  if (DEBUG_MSG_LVL_2)
  { 
   fn_gettime(); 
   fn_userlog(c_ServiceName,"  - TIME_STATS  Service SFO_TRADE_BOOK Starts  :%s:",c_time); 
  }

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            /*  Ver 1.4 : Added   */


  Fprint32(ptr_fml_Ibuf);   /* testing */

  i_error[0] = Fget32(ptr_fml_Ibuf,FFO_USR_ID,0,(char *)c_user_id,0);
  i_error[1] = Fget32(ptr_fml_Ibuf,FFO_SSSN_ID,0,(char *)&l_sssn_id,0);

	if( DEBUG_MSG_LVL_3 )
	{
  	fn_userlog(c_ServiceName,"User iD is:    [%s] ",c_user_id);
  	fn_userlog(c_ServiceName,"Session iD is: [%ld] ",l_sssn_id);
	}


	MEMSET(c_indstk);			/*1.5*/
	MEMSET(c_unlying);		/** Ver 3.3 **/
  for (i=0; i<2; i++)
  {
    if (i_error[i] == -1 )
    {
       fn_errlog(c_ServiceName,"S31005",FMLMSG,/* (char *)c_user_id,l_sssn_id,*/ c_errmsg); /* Ver 1.4 : 2 arguments commented */
      if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.4 : Debug level Change  */
            fn_userlog(c_ServiceName,"Error in loop : |%d| ",i);  /*  Ver 1.4 : Passing c_ServiceName as 1st argument  */
      }
      Fadd32(ptr_fml_Ibuf,FFO_ERR_MSG,(char *)c_errmsg,0);
      tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuf,0L,0);
    }
  }

	if( DEBUG_MSG_LVL_5 )
	{
  	fn_userlog(c_ServiceName,"Before session validation");
	}



	/********Ver 1.7 commented for ***

  li_sssn_id_chk = chk_sssn(c_ServiceName,c_user_id,l_sssn_id,c_errmsg);
  if(li_sssn_id_chk ==  -1)
  {
     fn_errlog(c_ServiceName,"S31010"," ",* (char *)c_user_id,l_sssn_id, c_errmsg);   Ver 1.4 : 2 arguments commented 
     strcpy(c_errmsg,"Session Timed Out");


     Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_errmsg, 0 );
     tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
  }
	*********Ver 1.7 comment ends*********/


  i_err[0] = Fget32( ptr_fml_Ibuf, FFO_OPERATION_TYP, 0,
                                   (char *)&c_opr_typ, 0 );
  i_ferr [0] = Ferror32;	

  i_err[1] = Fget32( ptr_fml_Ibuf, FFO_XCHNG_CD, 0,
                                   (char *)c_exchange_cd, 0 );
  i_ferr [1] = Ferror32;

  i_err[2] = Fget32( ptr_fml_Ibuf, FFO_UNDRLYNG, 0,
                                   (char *)c_underlying, 0 );
  i_ferr [2] = Ferror32;

  i_err[3] = Fget32( ptr_fml_Ibuf, FFO_FROM_DT, 0,
                                   (char *)c_frm_dt.arr, 0 );
  i_ferr[3] = Ferror32;

  i_err[4] = Fget32( ptr_fml_Ibuf, FFO_TO_DT, 0,
                                   (char *)c_to_dt.arr, 0 );
  i_ferr[4] = Ferror32;

  i_err[5] = Fget32( ptr_fml_Ibuf, FFO_PRDCT_TYP, 0,
                                   (char *)&c_product_typ, 0 );
  i_ferr[5] = Ferror32;

  i_err[6] = Fget32( ptr_fml_Ibuf, FFO_TRD_FLW, 0,
                                   (char *)&c_trd_flw, 0 );
  i_ferr[6] = Ferror32;

  i_err[7] = Fget32( ptr_fml_Ibuf, FFO_EBA_MTCH_ACT_NO, 0,
                                   (char *)c_mtch_accnt_no, 0 );
  i_ferr[7] = Ferror32;

  i_err[8] = Fget32( ptr_fml_Ibuf, FFO_SPL_FLG, 0,
                                   (char *)&c_spl_flg, 0 );
  i_ferr[8] = Ferror32;

  i_err[9] = Fget32( ptr_fml_Ibuf, FFO_ORDR_RFRNC, 0,
                                   (char *)c_ord_rfr, 0 );
  i_ferr[9] = Ferror32;

  i_err[10] = Fget32( ptr_fml_Ibuf, FFO_OPERATION_TYP, 0,
                                   (char *)&c_opr_typ, 0 );
  i_ferr [10] = Ferror32;

  /************* Ver 4.5 *************/
  i_err[11] = Fget32( ptr_fml_Ibuf, FFO_EX_ORDR_TYP, 0,
                                   (char *)&c_sys_order, 0 );
  i_ferr [11] = Ferror32;
 /************ end of version 4.5  **********/ 

  for ( i_cnt = 0;  i_cnt <= 11; i_cnt++ )              /*** change from 10 to 11 for Ver 4.5 **/
  {
    if ( (i_err[i_cnt] == -1) && (i_ferr[i_cnt] != FNOTPRES ))
    {
      fn_userlog(c_ServiceName,"i_cnt[%ld]",i_cnt);
      fn_errlog( c_ServiceName, "S31015", Fstrerror32( i_ferr[i_cnt] ),
                 c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    
  }
   
   /*** Ver 4.6 starts here ***/

  i_returncode = Fget32 ( ptr_fml_Ibuf, FFO_UPLD_MTCH_FLG, 0, (char *)&c_apisrc_flg, 0 );
  if( i_returncode == -1 && Ferror32 != FNOTPRES )
  {
      fn_errlog( c_ServiceName, "S31020", FMLMSG, c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if( DEBUG_MSG_LVL_3 )
  {
    fn_userlog(c_ServiceName,"API Source Flag :%c:",c_apisrc_flg);
  }
  /*** Ver 4.6  ends here ***/

  /** Ver 2.1 Starts **/ 
  if (strcmp( c_exchange_cd, "ALL") == 0 )
  { 
    strcpy(c_exchange_cd , "%");   
    rtrim(c_exchange_cd);
  }
  /** Ver 2.1 Ends **/ 

 	if( DEBUG_MSG_LVL_5 )
	{
    fn_userlog(c_ServiceName,"operation type is    [%c]",c_opr_typ);
    fn_userlog(c_ServiceName,"exchange code is     [%s]",c_exchange_cd);
    fn_userlog(c_ServiceName,"underlying is        [%s]",c_underlying);
    fn_userlog(c_ServiceName,"product type is      [%c]",c_product_typ);
    fn_userlog(c_ServiceName,"trade flow is        [%c]",c_trd_flw);
    fn_userlog(c_ServiceName,"match account no is  [%s]",c_mtch_accnt_no);
    fn_userlog(c_ServiceName,"Special Flag is      [%c]",c_spl_flg);
    fn_userlog(c_ServiceName,"Order ref no is      [%s]",c_ord_rfr);
	}

  SETLEN(c_frm_dt) ;	
  SETLEN(c_to_dt) ;	

	/*** ver 4.7 ***/
		if(c_product_typ == 'A')
		{
			c_product_typ = '%';
			fn_userlog(c_ServiceName,"Changing c_product_typ");
		}
	fn_userlog(c_ServiceName,"NEW product type is      [%c]",c_product_typ);
	/*** ver 4.7 ***/	
	if( DEBUG_MSG_LVL_1)			/* Ver 3.5 */
	{
		fn_userlog(c_ServiceName," The From Date is :%s: and To Date is :%s:",c_frm_dt.arr,c_to_dt.arr); 
		fn_userlog(c_ServiceName,"Match Acocunt :%s: | Operation Type :%c: | Underlying :%s: | Product TYp :%c: | Trade Flow :%c: | Special Flag :%c: ",c_mtch_accnt_no,c_opr_typ,c_underlying,c_product_typ,c_trd_flw,c_spl_flg);		/***	Ver 4.3	***/
 	}

  if( DEBUG_MSG_LVL_5 )           /*  Ver 1.4 : Debug level Change  */
	{
    fn_userlog(c_ServiceName,"from date is  [%s]",c_frm_dt.arr);
    fn_userlog(c_ServiceName,"to date is    [%s]",c_to_dt.arr);
  }


	/***	Ver	1.9	Starts	***/
  
  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();  
   fn_userlog(c_ServiceName,"  - TIME_STATS Before fn_chk_sssn  :%s:",c_time);  
  }

	if ( l_sssn_id != 0 )
	{
		  /*** Ver 4.0 Starts Here ***/
  i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_usr_prfl,
                           "vw_usr_prfl" ); 

  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31025", FMLMSG, c_errmsg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

  i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl,
                                             &st_err_msg ) ;

  if ( i_returncode == -1 )
  {
    fn_errlog(c_ServiceName,"S31030",LIBMSG, st_err_msg.c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /*** Ver 4.0 Ends Here ***/
		/*** Commented in Ver 4.0 
		li_sssn_id_chk = chk_sssn(c_ServiceName,c_user_id,l_sssn_id,c_errmsg);

  	if(li_sssn_id_chk ==  -1)
  	{
     	fn_errlog(c_ServiceName,"S31035"," ", c_errmsg);  
     	strcpy(c_errmsg,"Session Timed Out");
     	Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_errmsg, 0 );
     	tpcommit(0);      
     	tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
  	}
    *** Comment Ends for Ver 4.0 ****/

  if (DEBUG_MSG_LVL_2)
  { 
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after fn_chk_sssn  :%s:",c_time);  
	}
  }
   

	/***	Ver	1.9	Ends	***/

  if ( c_trd_flw == 'A' )
  {
    c_trade_flw = '%';
  }
  else
  {
    c_trade_flw = c_trd_flw;
  }


  SETLEN( c_frm_dt );
  SETLEN( c_to_dt );

   /* converting the date into dd-mon-yyyy */

	if(c_spl_flg != 'B' )			/***	Ver	1.9	***/
	{

  	if (DEBUG_MSG_LVL_2)
  	{ 
   		fn_gettime();   
   		fn_userlog(c_ServiceName,"  - TIME_STATS Before select from DUAL  :%s:",c_time);  
  	}

  	EXEC SQL
  	SELECT to_char(to_date(:c_frm_dt,'dd-mm-yyyy'),'dd-mon-yyyy'),
    	     to_char(to_date(:c_to_dt,'dd-mm-yyyy'),'dd-mon-yyyy')
  	INTO	 :c_frm_dt,
         	 :c_to_dt
  	FROM   DUAL;

   	if (SQLCODE != 0 )
  	{
    	fn_errlog( c_ServiceName, "S31040", SQLMSG, c_errmsg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);			/***	Ver	1.9	***/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

  	if (DEBUG_MSG_LVL_2)
  	{
   		fn_gettime();   
   		fn_userlog(c_ServiceName,"  - TIME_STATS After select from DUAL  :%s:",c_time);  
  	}

 		SETNULL(c_frm_dt);
 		SETNULL(c_to_dt);

   /*** Commented in Ver 4.2 *** as values selected are not used 
   
     *** Ver 3.9 Starts ***

    EXEC SQL
    SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY'),
           EXG_CRRNT_STTS
    INTO   :c_nxt_trd_dt,
           :c_exg_stts
    FROM   EXG_XCHNG_MSTR
    WHERE  EXG_XCHNG_CD = :c_exchange_cd  ;

     *** Ver 3.9 Ends ***
 
    *** Ver 4.2 Comment Ends ***/
	}
 
	if( DEBUG_MSG_LVL_5 )
	{          /*  Ver 1.4 : Debug level Change  */
  	fn_userlog( c_ServiceName, " c_frm_dt after converting into dd-mon-yyyy : [%s] ",c_frm_dt.arr );
  	fn_userlog( c_ServiceName, " c_to_dt after converting into dd-mon-yyyy : [%s] ",c_to_dt.arr );
	}

	/*** Added for Ver 3.0 ***/

  MEMSET(c_advisor_id);
  if (Fget32(ptr_fml_Ibuf,FFO_USER_CODE,0,(char *)c_advisor_id,0)==-1)
  {
    if( Ferror32 == FNOTPRES )
    {
      strcpy((char *)c_advisor_id, "NA");
    }
    else
    {
      fn_errlog(c_ServiceName,"S31045",FMLMSG,c_errmsg);
      Fadd32(ptr_fml_Ibuf,FFO_ERR_MSG,(char *)c_errmsg,0);
      tpcommit(0);
      tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuf,0L,0);
    }
  }
  

	/*** End for Ver 3.0 ***/

	 /**************Ver 1.7 added  for IFX***********/
  if (Fget32(ptr_fml_Ibuf,FFO_BAT_TAG,0,(char *)sql_ifx_acc_id.arr,0)==-1)
  {
    if( Ferror32 == FNOTPRES )
    {
      strcpy((char *)sql_ifx_acc_id.arr, "0");
    }
    else
    {
      fn_errlog(c_ServiceName,"S31050",FMLMSG,c_errmsg);
      Fadd32(ptr_fml_Ibuf,FFO_ERR_MSG,(char *)c_errmsg,0);
      tpcommit(0);      /***  Ver 1.9 ***/
      tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuf,0L,0);
    }
  }
  SETLEN(sql_ifx_acc_id);

	if( DEBUG_MSG_LVL_5 )
	{
  	fn_userlog(c_ServiceName,"ifx ac id  is      [%s]",sql_ifx_acc_id.arr);
  	fn_userlog(c_ServiceName,"match acc is   [%s]",c_mtch_accnt_no);
	}


  if (strcmp((char *)sql_ifx_acc_id.arr,"0")!=0)
  {
  
  	if (DEBUG_MSG_LVL_2)
  	{
   		fn_gettime();   
   		fn_userlog(c_ServiceName,"  - TIME_STATS Before select ifx join uac  :%s:",c_time);  
  	} 
  
  EXEC SQL
      SELECT  count(*)
      INTO    :cnt_rec
      FROM    uac_usr_accnts,ifx_usr_mstr
      WHERE   ifx_acc_id          = :sql_ifx_acc_id
      AND     ifx_usr_id          = uac_usr_id
			AND     uac_clm_mtch_accnt  = :c_mtch_accnt_no;

    if (SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31055", SQLMSG, c_errmsg );
      fn_userlog(c_ServiceName,"in 1");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

  	if (DEBUG_MSG_LVL_2)
  	{ 
   		fn_gettime();   
   		fn_userlog(c_ServiceName,"  - TIME_STATS after  select ifx join uac  :%s:",c_time);  
  	}

    if (cnt_rec==0)
    {
      strcpy ( c_errmsg, "Not matching");
      fn_errlog( c_ServiceName, "B31029",DEFMSG, c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);      /***  Ver 1.9 ***/
      tpreturn( TPFAIL, 0L, (char *)ptr_fml_Ibuf, 0L, 0 );
    }

     EXEC SQL ALLOCATE :sys_cursor ;
  
  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before select cursor FTD for ifx  :%s:",c_time);  
  } 

    EXEC SQL  EXECUTE
           BEGIN
            OPEN  :sys_cursor FOR
              SELECT
	        		  ftd_xchng_cd,   /** Added in Ver 2.1 **/
                ltrim(rtrim(ftd_undrlyng)),
                ftd_prdct_typ,
                ftd_strk_prc,
                ftd_opt_typ,
                ftd_exer_typ,
                ftd_expry_dt,
                to_char ( ftd_trd_dt, 'dd-Mon-yyyy' ),
                ftd_trd_flw,
                ftd_exctd_qty,
                ftd_exctd_rt,
                ftd_indstk,
                ftd_ordr_rfrnc,
								ftd_eba_trd_ref,
                NVL(ftd_brkg,0)
                FROM  ftd_fo_trd_dtls,FDM_DT_MTCH
            		WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no	
                AND  ftd_xchng_cd       LIKE :c_exchange_cd   /** Changed to like for Ver 2.1 **/
               /* AND  ftd_prdct_typ      = :c_product_typ*/
								AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                AND  trunc(ftd_trd_dt) <= to_date(:c_to_dt,'dd-mon-yyyy')
                AND  ftd_trd_flw     LIKE :c_trade_flw
              UNION ALL
              SELECT
	      			 ftd_xchng_cd,      /** Added in Ver 2.1 **/
               ltrim(rtrim(ftd_undrlyng)),
               ftd_prdct_typ,
               ftd_strk_prc,
               ftd_opt_typ,
               ftd_exer_typ,
               ftd_expry_dt,
               to_char ( ftd_trd_dt, 'dd-Mon-yyyy' ),
               ftd_trd_flw,
               ftd_exctd_qty,
               ftd_exctd_rt,
               ftd_indstk,
               ftd_ordr_rfrnc,
               ftd_eba_trd_ref,
               NVL(ftd_brkg,0)
               FROM  ftd_fo_trd_dtls_hstry,FDM_DT_MTCH
               WHERE ftd_clm_mtch_accnt = :c_mtch_accnt_no	
               AND  ftd_xchng_cd       LIKE :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
               /*AND  ftd_prdct_typ      = :c_product_typ*/
							 AND  ftd_prdct_typ      = :c_product_typ /*** ver 4.7 ***/
               AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
               AND  trunc(ftd_trd_dt) <= to_date(:c_to_dt,'dd-mon-yyyy')
               AND  ftd_trd_flw     LIKE :c_trade_flw
	       ORDER BY 13,8,2,9 DESC;	    /** Changed for Ver 2.1 - as exchange code added in selection **/
               /* ORDER BY 12,7,1,8 DESC;	*/						/**Ver 1.8**/
          END;
    END-EXEC;
    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31060", SQLMSG, c_errmsg  );
      EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
      EXEC SQL FREE :sys_cursor;
			 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);      /***  Ver 1.9 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

  if (DEBUG_MSG_LVL_2)
  {     
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after select cursor FTD for ifx  :%s:",c_time);  
  }

    ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN * 10 );				/***	Ver	1.9	***/

    if ( ptr_fml_Obuf == NULL )
    {
      fn_errlog( c_ServiceName, "S31065", FMLMSG, c_errmsg  );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);      /***  Ver 1.9 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    for( ; ; )
    {
			if( DEBUG_MSG_LVL_5 )
			{
      	fn_userlog(c_ServiceName," Value of counter is [%d] ",counter);
			}

  if (DEBUG_MSG_LVL_2)
  {
  fn_gettime();   
  fn_userlog(c_ServiceName,"  - TIME_STATS before fetch  cursor FTD for ifx  :%s:",c_time);  
  } 
 
      EXEC SQL FETCH :sys_cursor
                INTO :c_xchng_cd,  /** Added in Ver 2.1 **/ 
		    						:c_unlying,
                    :c_prd_typ,
                    :l_strk_prc,
                    :c_opt_typ,
                    :c_exrc_typ,
                    :c_exp_date,
                    :c_trd_date,
                    :c_trade_flow,
										:l_exctd_qty,
                    :l_exctd_rt,
                    :c_indstk,
                    :c_ordr_rfrnc,
                     :c_trd_rfrnc,
                    :l_brkg_val ;

      if ( SQLCODE != 0 )
      {

        if ( SQLCODE == NO_DATA_FOUND )
        {
          fn_userlog(c_ServiceName," Inside NO DATA FOUND ");
          break;
        }
        else
        {
          fn_errlog( c_ServiceName, "S31070", SQLMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      		tpcommit(0);      /***  Ver 1.9 ***/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

      }

  		if (DEBUG_MSG_LVL_2)
  		{
   			fn_gettime();   
   			fn_userlog(c_ServiceName,"  - TIME_STATS after  fetch  cursor FTD for ifx  :%s:",c_time);  
  		}
      SETNULL(c_exp_date);
      SETNULL(c_trd_date);

			if( DEBUG_MSG_LVL_5 )
			{
      	fn_userlog(c_ServiceName," Before Fadd312 ");
				fn_userlog(c_ServiceName," order ref is %s",c_ordr_rfrnc);
			}

      i_err[0] = Fadd32(ptr_fml_Obuf,FFO_UNDRLYNG,(char *)c_unlying,0) ;
      i_err[1] = Fadd32(ptr_fml_Obuf,FFO_ORDR_RFRNC,(char *)c_ordr_rfrnc,0) ;
      i_err[2] = Fadd32(ptr_fml_Obuf,FFO_TRD_RFRNC,(char *)c_trd_rfrnc,0) ;
      i_err[3] = Fadd32(ptr_fml_Obuf,FFO_PRDCT_TYP,(char *)&c_prd_typ,0) ;
      i_err[4] = Fadd32(ptr_fml_Obuf,FFO_EXPRY_DT,(char *)c_exp_date.arr,0) ;
      i_err[5] = Fadd32(ptr_fml_Obuf,FFO_EXER_TYP,(char *)&c_exrc_typ,0) ;
			i_err[6] = Fadd32(ptr_fml_Obuf,FFO_OPT_TYP,(char *)&c_opt_typ,0) ;
      i_err[7] = Fadd32(ptr_fml_Obuf,FFO_STRK_PRC,(char *)&l_strk_prc,0) ;
      i_err[8] = Fadd32(ptr_fml_Obuf,FFO_EXEC_QTY,(char *)&l_exctd_qty,0) ;
      i_err[9] = Fadd32(ptr_fml_Obuf,FFO_EXCTD_RT,(char *)&l_exctd_rt,0) ;
      i_err[10] = Fadd32(ptr_fml_Obuf,FFO_INSTRMNT_TYP,(char *)&c_indstk,0) ;
      i_err[11] = Fadd32(ptr_fml_Obuf,FFO_TRD_DT,(char *)c_trd_date.arr,0) ;
      i_err[12] = Fadd32(ptr_fml_Obuf,FFO_TRD_FLW,(char *)&c_trade_flow,0) ;
      i_err[13] = Fadd32(ptr_fml_Obuf,FFO_BRKRG_VL,(char *)&l_brkg_val,0) ;
      i_err[14] = Fadd32(ptr_fml_Obuf,FFO_XCHNG_CD,(char *)c_xchng_cd,0) ;   /** Added in Ver 2.1 **/


      for(i=0;i<15;i++)    /** Count incremented from 14 to 15 for Ver 2.1 **/
      {
        if(i_err[i] == -1)
        {
          fn_userlog(c_ServiceName,"Error in Fadd for i [%d]",i);
          fn_errlog( c_ServiceName, "S31075", FMLMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/
          EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      		tpcommit(0);      /***  Ver 1.9 ***/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }

     /*** Commented in Ver 4.4 ***
      ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
                                     counter * MIN_FML_BUF_LEN );
     ***/


      if(Fneeded32(1,MIN_FML_BUF_LEN) > Funused32(ptr_fml_Obuf))/**Check added in Ver 4.4 as memory was reallocated after every record fetched ***/
    {
      counter ++;
      ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf, Fsizeof32(ptr_fml_Obuf) +
                                                                counter * MIN_FML_BUF_LEN * 5 ); /* Ver 4.4 */
      if ( ptr_fml_Obuf == NULL )
      {
        fn_errlog( c_ServiceName, "S31080", TPMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpcommit(0);      /***  Ver 1.9 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

   } /* For loop */

   EXEC SQL CLOSE :sys_cursor;
   EXEC SQL FREE :sys_cursor;

    tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );


  }
  /***************Ver 1.7 ends for IFX******************/			

	/********Ver 1.7 session check kept here *********
  li_sssn_id_chk = chk_sssn(c_ServiceName,c_user_id,l_sssn_id,c_errmsg);
  if(li_sssn_id_chk ==  -1)
  {
     fn_errlog(c_ServiceName,"S31085"," ",* (char *)c_user_id,l_sssn_id,* c_errmsg);  * Ver 1.4 : 2 arguments commented *
     strcpy(c_errmsg,"Session Timed Out");


     Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_errmsg, 0 );
     tpcommit(0);      ***  Ver 1.9 ***
     tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
  }
  *********Ver 1.7 session chek  ends here *********/

	/**** Ver 3.9 comment starts ***
	*** Ver 3.3 starts ***
  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before select INSD,IMSM and PISM join  :%s:",c_time);  
  } 
	
	EXEC SQL
	  SELECT 'Y',
					 nvl(PISM_FUTURES_PRCNTG,0),
         	 nvl(PISM_OPTIONS_LOT,0)
  	into  :c_prepaid_flg,
					:sql_pism_futures_prcntg,
        	:sql_pism_options_lot
  	FROM
      	INSD_INFO_NTST_SCHEME_DTLS,
      	IMSM_INFO_MATCH_SCHEME_MASTER,
      	PISM_PREPAID_INFO_SCH_MSTR
  	WHERE INSD_MATCH_ACCOUNT_NO      = :c_mtch_accnt_no
  	and   nvl(PISM_SCH_TYP,'') = ( select decode(nvl(ICD_CUST_TYPE,''),'NRI','NRI','RI')
                                           from ICD_INFO_CLIENT_DTLS
                                           where icd_clnt_cd=:c_mtch_accnt_no
                                           and icd_user_id =:c_user_id

                                   )
  AND   INSD_EQ_SCHEMECODE         = IMSM_SCHEMECODE
  AND   INSD_PREPAID_SCHEMECODE    = PISM_GLOBAL_SCH_CD(+);
	if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
	{
      fn_errlog( c_ServiceName, "S31090", SQLMSG, c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);      
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	if(SQLCODE == NO_DATA_FOUND )
	{
		c_prepaid_flg='N';
		sql_pism_futures_prcntg=0;
		sql_pism_options_lot=0;
	}
 
  if (DEBUG_MSG_LVL_2)
  { 
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after select INSD,IMSM and PISM join  :%s:",c_time);  
	} 

	*** Ver 3.3 Ends **/
	/*** Ver 3.9 comment Ends**/
	c_prepaid_flg='N';					/** Ver 3.9 ***/
	sql_pism_futures_prcntg=0;  /** Ver 3.9 ***/
	sql_pism_options_lot=0;			/** Ver 3.9 ***/
  cnt_sysdt = 0;

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before select from DUAL  :%s:",c_time);  
  }
 
 EXEC SQL
 	SELECT 1
	INTO :cnt_sysdt FROM DUAL
 	WHERE trunc(SYSDATE) = to_date(:c_to_dt,'DD-MON-YYYY')
 	AND trunc(SYSDATE) = to_date(:c_frm_dt,'DD-MON-YYYY') ;

 if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ))
   {
      fn_errlog( c_ServiceName, "S31095", SQLMSG, c_errmsg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);      /***  Ver 1.9 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after select from DUAL  :%s:",c_time);  
  }
  
  if(cnt_sysdt == 1)
   {

     i_hist_flg = 0;

   }
  else if(cnt_sysdt == 0)
   {

     i_hist_flg = 1;

   }

 SETNULL(c_frm_dt);
 SETNULL(c_to_dt);
 
	if( DEBUG_MSG_LVL_5 )
	{
  	fn_userlog( c_ServiceName, " cnt_sysdt is:    [%d] ",cnt_sysdt);
  	fn_userlog( c_ServiceName, " History Flag is: [%d] ",i_hist_flg);
  	fn_userlog(c_ServiceName,"Before Allocating Cursor ");
	}


  EXEC SQL ALLOCATE :sys_cursor ;

  if ( c_spl_flg == 'S' )
  {
		if( DEBUG_MSG_LVL_3 )
		{
    	fn_userlog(c_ServiceName,"Inside 'S'- Secondary page of trade book.");
		}
	
   if(i_hist_flg == 0)
		{
		   switch(c_opr_typ)
  			{
          case 'A':

					if( DEBUG_MSG_LVL_3 )
					{
			 			fn_userlog(c_ServiceName," Inside Case 'A' for Today ");
					}

  				if( DEBUG_MSG_LVL_5 )
					{          /*  Ver 1.4 : Debug level Change  */
				fn_userlog(c_ServiceName,"from date is         [%s]",c_frm_dt.arr);
    				fn_userlog(c_ServiceName,"to date is           [%s]",c_to_dt.arr);
    				fn_userlog(c_ServiceName,"operation type is    [%c]",c_opr_typ);
    				fn_userlog(c_ServiceName,"exchange code is     [%s]",c_exchange_cd);
    				fn_userlog(c_ServiceName,"underlying is        [%s]",c_underlying);
    				fn_userlog(c_ServiceName,"product type is      [%c]",c_product_typ);
    				fn_userlog(c_ServiceName,"trade flow is        [%c]",c_trd_flw);
    				fn_userlog(c_ServiceName,"match account no is  [%s]",c_mtch_accnt_no);
    				fn_userlog(c_ServiceName,"Special Flag is      [%c]",c_spl_flg);
    				fn_userlog(c_ServiceName,"Order ref no is      [%s]",c_ord_rfr);
  				}

					if( strcmp(c_mtch_accnt_no, "*" ) == 0 )
					{
    				if( c_user_id[0] == BPID )
						{
  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before select cursor FTD BPID Case A  :%s:",c_time);  
  }
   
			 				EXEC SQL  EXECUTE
           			BEGIN
            		OPEN  :sys_cursor FOR
              		SELECT  
          						FTD_XCHNG_CD,   /** Added in Ver 2.1 **/
										  LTRIM(RTRIM(FTD_UNDRLYNG)),
                      FTD_PRDCT_TYP,
                      FTD_STRK_PRC,
                      FTD_OPT_TYP,
                      FTD_EXER_TYP,
                      FTD_EXPRY_DT,
                      TO_CHAR ( FTD_TRD_DT, 'dd-Mon-yyyy' ),
                      FTD_TRD_FLW,
											FTD_EXCTD_QTY,
											FTD_EXCTD_RT,
											FTD_INDSTK,
											FTD_ORDR_RFRNC,
											FTD_EBA_TRD_REF,
											NVL(FTD_BRKG,0)
                FROM  FTD_FO_TRD_DTLS,CLM_CLNT_MSTR
								WHERE	FTD_CLM_MTCH_ACCNT	=	CLM_MTCH_ACCNT
			  /*** 		WHERE ftd_clm_mtch_accnt 	= :c_mtch_accnt_no	Commented In Ver	1.9	***/
								AND		CLM_BP_ID						=	:c_user_id				/***	Ver	1.9	***/
                AND   FTD_XCHNG_CD       	LIKE  :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
                AND   FTD_UNDRLYNG       	= :c_underlying
                /*AND   FTD_PRDCT_TYP      	= :c_product_typ*/
								AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
							  AND   TRUNC(FTD_TRD_DT)  	= :c_to_dt
                AND   FTD_TRD_FLW     LIKE 	:c_trade_flw
                AND   FTD_ORDR_RFRNC     	= :c_ord_rfr
        				ORDER BY 13,8,2,9 DESC;	  /** Changed for Ver 2.1 **/
							 /* ORDER BY 12,7,1,8 DESC;	*/					 /**Ver 1.8**/
          		END;
        		END-EXEC;

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after select cursor FTD BPID Case A  :%s:",c_time);  
  }
		}
		else
		{


  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before select cursor FTD NOT BPID Case A  :%s:",c_time);  
  }

          	EXEC SQL EXECUTE
              BEGIN
              OPEN  :sys_cursor FOR
                SELECT 
		    						FTD_XCHNG_CD,   /** Added in Ver 2.1 **/
		    						LTRIM(RTRIM(FTD_UNDRLYNG)),
                    FTD_PRDCT_TYP,
                    FTD_STRK_PRC,
                    FTD_OPT_TYP,
                    FTD_EXER_TYP,
                    FTD_EXPRY_DT,
                    TO_CHAR ( FTD_TRD_DT, 'dd-Mon-yyyy' ),
                    FTD_TRD_FLW,
                    FTD_EXCTD_QTY,
                    FTD_EXCTD_RT,
                    FTD_INDSTK,
                    FTD_ORDR_RFRNC,
                    FTD_EBA_TRD_REF,
                    NVL(FTD_BRKG,0)
               FROM FTD_FO_TRD_DTLS,UAC_USR_ACCNTS
               WHERE	FTD_CLM_MTCH_ACCNT  = UAC_CLM_MTCH_ACCNT
        /***   WHERE ftd_clm_mtch_accnt = :c_mtch_accnt_no Commented In Ver  1.9 ***/
               AND		UAC_USR_ID = :c_user_id        /***  Ver 1.9 ***/
               AND   FTD_CLM_MTCH_ACCNT  = UAC_CLM_MTCH_ACCNT
               AND   FTD_XCHNG_CD       LIKE  :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
               AND   FTD_UNDRLYNG       = :c_underlying
              /* AND 	 FTD_PRDCT_TYP      = :c_product_typ*/
							AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
               AND   TRUNC(FTD_TRD_DT)  = :c_to_dt
               AND   FTD_TRD_FLW     LIKE :c_trade_flw
               AND   FTD_ORDR_RFRNC     = :c_ord_rfr
               ORDER BY 13,8,2,9 DESC;    /** Changed for Ver 2.1 **/
	       /* ORDER BY 12,7,1,8 DESC;  */          /**Ver 1.8**/
             END;
           END-EXEC;
				 }

  				if (DEBUG_MSG_LVL_2)
  				{ 
   					fn_gettime();   
   					fn_userlog(c_ServiceName,"  - TIME_STATS after select cursor FTD NOT BPID Case A  :%s:",c_time);  
 	 				}
				}
				else
				{

  				if (DEBUG_MSG_LVL_2)
  				{	 
   					fn_gettime();  
   					fn_userlog(c_ServiceName,"  - TIME_STATS before select cursor FTD Normal User Case A  :%s:",c_time);  
  				}

					EXEC SQL EXECUTE
            BEGIN
            OPEN  :sys_cursor FOR
              SELECT
	          			FTD_XCHNG_CD,           /** Added in Ver 2.1 **/ 
                  LTRIM(RTRIM(FTD_UNDRLYNG)),
                  FTD_PRDCT_TYP,
                  FTD_STRK_PRC,
                  FTD_OPT_TYP,
                  FTD_EXER_TYP,
                  FTD_EXPRY_DT,
                  TO_CHAR ( FTD_TRD_DT, 'dd-Mon-yyyy' ),
                  FTD_TRD_FLW,
                  FTD_EXCTD_QTY,
                  FTD_EXCTD_RT,
                  FTD_INDSTK,
                  FTD_ORDR_RFRNC,
                  FTD_EBA_TRD_REF,
                  NVL(FTD_BRKG,0)
             FROM FTD_FO_TRD_DTLS
             WHERE FTD_CLM_MTCH_ACCNT = :c_mtch_accnt_no 
             AND  FTD_XCHNG_CD       LIKE  :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
             AND  FTD_UNDRLYNG       = :c_underlying
             /*AND  FTD_PRDCT_TYP      = :c_product_typ*/
						 AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
             AND  TRUNC(FTD_TRD_DT)  = :c_to_dt
             AND  FTD_TRD_FLW     LIKE :c_trade_flw
             AND  FTD_ORDR_RFRNC     = :c_ord_rfr
             ORDER BY 13,8,2,9 DESC;    /** Changed for Ver 2.1 **/
	     /* ORDER BY 12,7,1,8 DESC;  */
         	 END;
         	END-EXEC;

  if (DEBUG_MSG_LVL_2)
  { 
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after  select cursor FTD Normal User Case A  :%s:",c_time);  
  }
 
				}

				break ;

				case 'B':

					if( DEBUG_MSG_LVL_3 )
					{
			 			fn_userlog(c_ServiceName," Inside Case 'B' for Today ");
					}


  				if( DEBUG_MSG_LVL_5 )
				  {          /*  Ver 1.4 : Debug level Change  */
    				fn_userlog(c_ServiceName,"from date is         [%s]",c_frm_dt.arr);
    				fn_userlog(c_ServiceName,"to date is           [%s]",c_to_dt.arr);
    				fn_userlog(c_ServiceName,"operation type is    [%c]",c_opr_typ);
    				fn_userlog(c_ServiceName,"exchange code is     [%s]",c_exchange_cd);
    				fn_userlog(c_ServiceName,"underlying is        [%s]",c_underlying);
    				fn_userlog(c_ServiceName,"product type is      [%c]",c_product_typ);
    				fn_userlog(c_ServiceName,"trade flow is        [%c]",c_trd_flw);
    				fn_userlog(c_ServiceName,"match account no is  [%s]",c_mtch_accnt_no);
  				}

					if( strcmp(c_mtch_accnt_no, "*" ) == 0 )
					{
				  	if( c_user_id[0] == BPID )
						{

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before select cursor FTD BPID Case B  :%s:",c_time);  
  }

          		EXEC SQL  EXECUTE
           			BEGIN
            		OPEN  :sys_cursor FOR
              		SELECT  
          						FTD_XCHNG_CD,  /**  Added in Ver 2.1 **/
										  LTRIM(RTRIM(FTD_UNDRLYNG)),
                      FTD_PRDCT_TYP,
                      FTD_STRK_PRC,
                      FTD_OPT_TYP,
                      FTD_EXER_TYP,
                      FTD_EXPRY_DT,
                      TO_CHAR ( FTD_TRD_DT, 'dd-Mon-yyyy' ),
                      FTD_TRD_FLW,
											FTD_EXCTD_QTY,
											FTD_EXCTD_RT,
											FTD_INDSTK,
											FTD_ORDR_RFRNC,
											FTD_EBA_TRD_REF,
											NVL(FTD_BRKG,0)
                FROM  FTD_FO_TRD_DTLS,CLM_CLNT_MSTR
								WHERE	FTD_CLM_MTCH_ACCNT	=	CLM_MTCH_ACCNT
								AND		CLM_BP_ID	=	:c_user_id				
             /**WHERE ftd_clm_mtch_accnt = :c_mtch_accnt_no	Commented In Ver	1.9	***/
                AND   FTD_XCHNG_CD       LIKE  :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
                /*AND   FTD_PRDCT_TYP      = :c_product_typ*/
								AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
							  AND   TRUNC(FTD_TRD_DT)  = :c_to_dt
                AND   FTD_TRD_FLW     LIKE :c_trade_flw
                AND   FTD_ORDR_RFRNC     = :c_ord_rfr
                ORDER BY 13,8,2,9 DESC;	  /** Changed for Ver 2.1 **/
	      /* ORDER BY 12,7,1,8 DESC;	*/			 /**Ver 1.8**/
          	END;
         		END-EXEC;

  if (DEBUG_MSG_LVL_2)
  { 
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after select cursor FTD BPID Case B  :%s:",c_time); 
  }

					}
					else
					{

      fn_gettime();   
  fn_userlog(c_ServiceName,"  - TIME_STATS before select cursor FTD NOT BPID Case B  :%s:",c_time);  

          	EXEC SQL  EXECUTE
              BEGIN
              OPEN  :sys_cursor FOR
                SELECT
                    FTD_XCHNG_CD,   /** Added in Ver 2.1 **/
		    					  LTRIM(RTRIM(FTD_UNDRLYNG)),
                    FTD_PRDCT_TYP,
                    FTD_STRK_PRC,
                    FTD_OPT_TYP,
                    FTD_EXER_TYP,
                    FTD_EXPRY_DT,
                    TO_CHAR ( FTD_TRD_DT, 'dd-Mon-yyyy' ),
                    FTD_TRD_FLW,
                    FTD_EXCTD_QTY,
                    FTD_EXCTD_RT,
                    FTD_INDSTK,
                    FTD_ORDR_RFRNC,
                    FTD_EBA_TRD_REF,
                    NVL(FTD_BRKG,0)
              FROM  FTD_FO_TRD_DTLS,UAC_USR_ACCNTS
              WHERE FTD_CLM_MTCH_ACCNT  = UAC_CLM_MTCH_ACCNT
              AND		UAC_USR_ID	= :c_user_id
           /**WHERE ftd_clm_mtch_accnt = :c_mtch_accnt_no Commented In Ver  1.9 ***/
              AND   FTD_XCHNG_CD       LIKE  :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
              /*AND   FTD_PRDCT_TYP      = :c_product_typ*/
							AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
              AND   TRUNC(FTD_TRD_DT)  = :c_to_dt
              AND   FTD_TRD_FLW     LIKE :c_trade_flw
              AND   FTD_ORDR_RFRNC     = :c_ord_rfr
	      			ORDER BY 13,8,2,9 DESC;    /** Changed for Ver 2.1 **/
            /* ORDER BY 12,7,1,8 DESC;  */      /**Ver 1.8**/
           END;
           END-EXEC;
					}
  if (DEBUG_MSG_LVL_2)
  { 
   fn_gettime();  
   fn_userlog(c_ServiceName,"  - TIME_STATS after select cursor FTD NOT BPID Case B  :%s:",c_time); 
  }
 
				}
				else
				{

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before select cursor FTD NORMAL USER Case B  :%s:",c_time);  
  }

  				EXEC SQL  EXECUTE
            BEGIN
            OPEN  :sys_cursor FOR
              SELECT
                  FTD_XCHNG_CD,   /** Added for Ver 2.1 **/
		  						LTRIM(RTRIM(FTD_UNDRLYNG)),
                  FTD_PRDCT_TYP,
                  FTD_STRK_PRC,
                  FTD_OPT_TYP,
                  FTD_EXER_TYP,
                  FTD_EXPRY_DT,
                  TO_CHAR ( FTD_TRD_DT, 'dd-Mon-yyyy' ),
                  FTD_TRD_FLW,
                  FTD_EXCTD_QTY,
                  FTD_EXCTD_RT,
                  FTD_INDSTK,
                  FTD_ORDR_RFRNC,
                  FTD_EBA_TRD_REF,
                  NVL(FTD_BRKG,0)
            FROM  FTD_FO_TRD_DTLS
         		WHERE FTD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
            AND   FTD_XCHNG_CD       LIKE  :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
            /*AND   FTD_PRDCT_TYP      = :c_product_typ*/
						AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
            AND   TRUNC(FTD_TRD_DT)  = :c_to_dt
            AND   FTD_TRD_FLW     LIKE :c_trade_flw
            AND   FTD_ORDR_RFRNC     = :c_ord_rfr
            ORDER BY 13,8,2,9 DESC;   /* Changed for Ver 2.1 */
          	/* ORDER BY 12,7,1,8 DESC;   */     /**Ver 1.8**/
          END;
          END-EXEC;
				}

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after select cursor FTD NORMAL USER Case B  :%s:",c_time); 
  }

				 break ;

      default:

			fn_userlog(c_ServiceName," Inside Default for Today ");

      strcpy( c_errmsg, "Invalid Operation Type" );
      fn_errlog ( c_ServiceName, "S31100", DEFMSG, c_errmsg );
      EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
      EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
      tpcommit(0);      /***  Ver 1.9 ***/
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
      break;

    }/***********end of switch case ************/

	}/****end of if for today ********/

 	else
  {
  	switch(c_opr_typ)
    {
    	case 'A':

						if( DEBUG_MSG_LVL_3 )
						{
			    		fn_userlog(c_ServiceName," Inside 'A' for History ");
						}

  					if( DEBUG_MSG_LVL_5 )
					  {     
    					fn_userlog(c_ServiceName,"from date is        [%s]",c_frm_dt.arr);
    					fn_userlog(c_ServiceName,"to date is          [%s]",c_to_dt.arr);
    					fn_userlog(c_ServiceName,"operation type is   [%c]",c_opr_typ);
    					fn_userlog(c_ServiceName,"exchange code is    [%s]",c_exchange_cd);
    					fn_userlog(c_ServiceName,"underlying is       [%s]",c_underlying);
    					fn_userlog(c_ServiceName,"product type is     [%c]",c_product_typ);
    					fn_userlog(c_ServiceName,"trade flow is       [%c]",c_trd_flw);
    					fn_userlog(c_ServiceName,"match account no is [%s]",c_mtch_accnt_no);
  					}

						if( strcmp(c_mtch_accnt_no, "*" ) == 0 )
						{
				  		if( c_user_id[0] == BPID )
							{
  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before select cursor FTD and FTD HSTRY BPID Case A  :%s:",c_time);  
  }

          			EXEC SQL  EXECUTE
           				BEGIN
            				OPEN  :sys_cursor FOR
              			SELECT
          							ftd_xchng_cd,  /** *Added for Ver 2.1 */
												ltrim(rtrim(ftd_undrlyng)),
                      	ftd_prdct_typ,
                      	ftd_strk_prc,
                      	ftd_opt_typ,
                      	ftd_exer_typ,
                      	ftd_expry_dt,
                      	to_char ( ftd_trd_dt, 'dd-Mon-yyyy' ),
                      	ftd_trd_flw,
                      	ftd_exctd_qty,
                      	ftd_exctd_rt,
                      	ftd_indstk,
                      	ftd_ordr_rfrnc,
                      	ftd_eba_trd_ref,
                  			NVL(ftd_brkg,0)
                	FROM 	ftd_fo_trd_dtls,CLM_CLNT_MSTR
									WHERE	ftd_clm_mtch_accnt	=	CLM_MTCH_ACCNT
									AND		CLM_BP_ID	=	:c_user_id
               /**WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no	Commented In Ver	1.9	***/
                 	AND  ftd_xchng_cd       LIKE  :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
                 	AND  ftd_undrlyng       = :c_underlying
                 	/*AND  ftd_prdct_typ      = :c_product_typ*/
								  AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                 	AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
								 	AND  trunc(ftd_trd_dt)	<= to_date(:c_to_dt,'dd-mon-yyyy')
                 	AND  ftd_trd_flw     LIKE :c_trade_flw
                 	AND  ftd_ordr_rfrnc     = :c_ord_rfr

								UNION ALL

              	SELECT
          						ftd_xchng_cd, /** Added in Ver 2.1 **/
										  ltrim(rtrim(ftd_undrlyng)),
                      ftd_prdct_typ,
                      ftd_strk_prc,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_expry_dt,
                      to_char ( ftd_trd_dt, 'dd-Mon-yyyy' ),
                      ftd_trd_flw,
                      ftd_exctd_qty,
                      ftd_exctd_rt,
                      ftd_indstk,
                      ftd_ordr_rfrnc,
                      ftd_eba_trd_ref,
                  NVL(ftd_brkg,0)
                FROM  ftd_fo_trd_dtls_hstry,CLM_CLNT_MSTR
								WHERE	ftd_clm_mtch_accnt	=	CLM_MTCH_ACCNT
								AND		CLM_BP_ID	=	:c_user_id
           /***	WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no	Commented In Ver	1.9	***/
                AND  ftd_xchng_cd       LIKE  :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
                AND  ftd_undrlyng       = :c_underlying
                /*AND  ftd_prdct_typ      = :c_product_typ*/
								AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
								AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                AND  ftd_trd_flw     LIKE :c_trade_flw
                AND  ftd_ordr_rfrnc     = :c_ord_rfr
                ORDER BY 13,8,2,9 DESC;	 /** Changed for Ver 2.1 **/
		/* ORDER BY 12,7,1,8 DESC;	*/							 /**Ver 1.8**/
          	END;
         	END-EXEC;

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after select cursor FTD and FTD HSTRY BPID Case A  :%s:",c_time);  
  }
					}
					else
					{

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before select cursor FTD and FTD HSTRY NOT BPID Case A  :%s:",c_time);  
  }

 					EXEC SQL  EXECUTE
            BEGIN
            OPEN  :sys_cursor FOR
              SELECT
	        			ftd_xchng_cd, /** Added in Ver 2.1 **/
                ltrim(rtrim(ftd_undrlyng)),
                ftd_prdct_typ,
                ftd_strk_prc,
                ftd_opt_typ,
                ftd_exer_typ,
                ftd_expry_dt,
                to_char ( ftd_trd_dt, 'dd-Mon-yyyy' ),
                ftd_trd_flw,
                ftd_exctd_qty,
                ftd_exctd_rt,
                ftd_indstk,
                ftd_ordr_rfrnc,
                ftd_eba_trd_ref,
                NVL(ftd_brkg,0)
             	FROM ftd_fo_trd_dtls,UAC_USR_ACCNTS
              WHERE ftd_clm_mtch_accnt  = UAC_CLM_MTCH_ACCNT
              AND		UAC_USR_ID	= :c_user_id
           /**WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no  Commented In Ver  1.9 ***/
              AND  ftd_xchng_cd       LIKE  :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
              AND  ftd_undrlyng       = :c_underlying
              /*AND  ftd_prdct_typ      = :c_product_typ*/
							AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
              AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
              AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
              AND  ftd_trd_flw     LIKE :c_trade_flw
              AND  ftd_ordr_rfrnc     = :c_ord_rfr

            UNION ALL

            SELECT
                  ftd_xchng_cd, /** Added in Ver 2.1 **/
		  						ltrim(rtrim(ftd_undrlyng)),
                  ftd_prdct_typ,
                  ftd_strk_prc,
                  ftd_opt_typ,
                  ftd_exer_typ,
                  ftd_expry_dt,
                  to_char ( ftd_trd_dt, 'dd-Mon-yyyy' ),
                  ftd_trd_flw,
                  ftd_exctd_qty,
                  ftd_exctd_rt,
                  ftd_indstk,
                  ftd_ordr_rfrnc,
                  ftd_eba_trd_ref,
              		NVL(ftd_brkg,0)
            FROM  ftd_fo_trd_dtls_hstry,UAC_USR_ACCNTS
            WHERE  ftd_clm_mtch_accnt  = UAC_CLM_MTCH_ACCNT
    				AND			UAC_USR_ID = :c_user_id
       /*** WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no  Commented In Ver  1.9 ***/
            AND  ftd_xchng_cd       LIKE  :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
            AND  ftd_undrlyng       = :c_underlying
            /*AND  ftd_prdct_typ      = :c_product_typ*/
						AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
            AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
            AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
            AND  ftd_trd_flw     LIKE :c_trade_flw
            AND  ftd_ordr_rfrnc     = :c_ord_rfr
            ORDER BY 13,8,2,9 DESC;   /** Changed for Ver 2.1 **/
	    /* ORDER BY 12,7,1,8 DESC;  */              /**Ver 1.8**/
          END;
        END-EXEC;

  if (DEBUG_MSG_LVL_2)
  {	
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after select cursor FTD and FTD HSTRY NOT BPID Case A  :%s:",c_time); 
	}
					}
				}
				else
				{

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before select cursor FTD and FTD HSTRY NORMAL USER Case A  :%s:",c_time);
  }

      	EXEC SQL  EXECUTE
          BEGIN
          OPEN  :sys_cursor FOR
            SELECT
                ftd_xchng_cd, /** Added for Ver 2.1 **/
								ltrim(rtrim(ftd_undrlyng)),
                ftd_prdct_typ,
                ftd_strk_prc,
                ftd_opt_typ,
                ftd_exer_typ,
                ftd_expry_dt,
                to_char ( ftd_trd_dt, 'dd-Mon-yyyy' ),
                ftd_trd_flw,
                ftd_exctd_qty,
                ftd_exctd_rt,
                ftd_indstk,
                ftd_ordr_rfrnc,
                ftd_eba_trd_ref,
                NVL(ftd_brkg,0)
              FROM ftd_fo_trd_dtls
           		WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no  
              AND  ftd_xchng_cd       LIKE  :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
              AND  ftd_undrlyng       = :c_underlying
              /*AND  ftd_prdct_typ      = :c_product_typ*/
							AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
              AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
              AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
              AND  ftd_trd_flw     LIKE :c_trade_flw
              AND  ftd_ordr_rfrnc     = :c_ord_rfr

            UNION ALL

            SELECT
                  ftd_xchng_cd, /** Added for Ver 2.1 **/
		  						ltrim(rtrim(ftd_undrlyng)),
                  ftd_prdct_typ,
                  ftd_strk_prc,
                  ftd_opt_typ,
                  ftd_exer_typ,
                  ftd_expry_dt,
                  to_char ( ftd_trd_dt, 'dd-Mon-yyyy' ),
                  ftd_trd_flw,
                  ftd_exctd_qty,
                  ftd_exctd_rt,
                  ftd_indstk,
                  ftd_ordr_rfrnc,
                  ftd_eba_trd_ref,
                  NVL(ftd_brkg,0)
            FROM  ftd_fo_trd_dtls_hstry
  					WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no  
            AND  ftd_xchng_cd       LIKE  :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
            AND  ftd_undrlyng       = :c_underlying
            /*AND  ftd_prdct_typ      = :c_product_typ*/
						AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
            AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
            AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
            AND  ftd_trd_flw     LIKE :c_trade_flw
            AND  ftd_ordr_rfrnc     = :c_ord_rfr
            ORDER BY 13,8,2,9 DESC;    /** Changed for Ver 2.1 **/
	    /* ORDER BY 12,7,1,8 DESC;   */             /**Ver 1.8**/
          END;
        END-EXEC;

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after select cursor FTD and FTD HSTRY NORMAL USER Case A  :%s:",c_time); 
  }

				}
					
			 break ;

				 case 'B':

					if( DEBUG_MSG_LVL_3 )
					{
			    	fn_userlog(c_ServiceName," Inside 'B' for History ");
					}


  				if( DEBUG_MSG_LVL_5 )
				  {          /*  Ver 1.4 : Debug level Change  */
    				fn_userlog(c_ServiceName,"from date is         [%s]",c_frm_dt.arr);
    				fn_userlog(c_ServiceName,"to date is           [%s]",c_to_dt.arr);
   				  fn_userlog(c_ServiceName,"operation type is    [%c]",c_opr_typ);
    				fn_userlog(c_ServiceName,"exchange code is     [%s]",c_exchange_cd);
    				fn_userlog(c_ServiceName,"underlying is        [%s]",c_underlying);
    				fn_userlog(c_ServiceName,"product type is      [%c]",c_product_typ);
    				fn_userlog(c_ServiceName,"trade flow is        [%c]",c_trd_flw);
   			 		fn_userlog(c_ServiceName,"match account no is  [%s]",c_mtch_accnt_no);
  				}

					if( strcmp(c_mtch_accnt_no, "*" ) == 0 )
					{
						if( c_user_id[0] == BPID )
						{

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before select cursor FTD and FTD HSTRY  BPID Case B  :%s:",c_time);  
  }
          		EXEC SQL  EXECUTE
           			BEGIN
            		OPEN  :sys_cursor FOR
              		SELECT
          					ftd_xchng_cd, /** Added for Ver 2.1 **/
										ltrim(rtrim(ftd_undrlyng)),
                    ftd_prdct_typ,
                    ftd_strk_prc,
                    ftd_opt_typ,
                    ftd_exer_typ,
                    ftd_expry_dt,
                    to_char ( ftd_trd_dt, 'dd-Mon-yyyy' ),
                    ftd_trd_flw,
                    ftd_exctd_qty,
                    ftd_exctd_rt,
                    ftd_indstk,
                    ftd_ordr_rfrnc,
                    ftd_eba_trd_ref,
                  	NVL(ftd_brkg,0)
               FROM ftd_fo_trd_dtls,CLM_CLNT_MSTR
							 WHERE	ftd_clm_mtch_accnt	=	CLM_MTCH_ACCNT
							 AND	CLM_BP_ID	=	:c_user_id
            /**WHERE ftd_clm_mtch_accnt = :c_mtch_accnt_no	Commented In Ver	1.9	***/
               AND  ftd_xchng_cd       LIKE  :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
               /*AND  ftd_prdct_typ      = :c_product_typ*/
							 AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
               AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
               AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
               AND  ftd_trd_flw     LIKE :c_trade_flw
               AND  ftd_ordr_rfrnc     = :c_ord_rfr

               UNION ALL

              	SELECT          				
									ftd_xchng_cd, /** Added for Ver 2.1 **/
									ltrim(rtrim(ftd_undrlyng)),
                  ftd_prdct_typ,
                  ftd_strk_prc,
                  ftd_opt_typ,
                  ftd_exer_typ,
                  ftd_expry_dt,
                  to_char ( ftd_trd_dt, 'dd-Mon-yyyy' ),
                  ftd_trd_flw,
                  ftd_exctd_qty,
                  ftd_exctd_rt,
                  ftd_indstk,
                  ftd_ordr_rfrnc,
                  ftd_eba_trd_ref,
                  NVL(ftd_brkg,0)
                FROM  ftd_fo_trd_dtls_hstry,CLM_CLNT_MSTR
								WHERE		ftd_clm_mtch_accnt	=	CLM_MTCH_ACCNT
                AND		 CLM_BP_ID	=	:c_user_id
            /**	WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no	Commented In Ver	1.9	***/
                AND  ftd_xchng_cd       LIKE :c_exchange_cd   /** Changed to LIKE for Ver 2.1 **/
                /*AND  ftd_prdct_typ      = :c_product_typ*/
								AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
								AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                AND  ftd_trd_flw     LIKE :c_trade_flw
                AND  ftd_ordr_rfrnc     = :c_ord_rfr
               	ORDER BY 13,8,2,9 DESC;	   /** Changed for Ver 2.1 **/
		/* ORDER BY 12,7,1,8 DESC;	*/				 /**Ver 1.8**/
         	 	END;
         	END-EXEC;

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after select cursor FTD and FTD HSTRY  BPID Case B  :%s:",c_time);  
  }
				}
				else
				{

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before select cursor FTD and FTD HSTRY NOT  BPID Case B  :%s:",c_time);  
  }

					EXEC SQL  EXECUTE
            BEGIN
            OPEN  :sys_cursor FOR
                  SELECT
                    ftd_xchng_cd, /** Added for Ver 2.1 **/
		    						ltrim(rtrim(ftd_undrlyng)),
                    ftd_prdct_typ,
                    ftd_strk_prc,
                    ftd_opt_typ,
                    ftd_exer_typ,
                    ftd_expry_dt,
                    to_char ( ftd_trd_dt, 'dd-Mon-yyyy' ),
                    ftd_trd_flw,
                    ftd_exctd_qty,
                    ftd_exctd_rt,
                    ftd_indstk,
                    ftd_ordr_rfrnc,
                    ftd_eba_trd_ref,
                    NVL(ftd_brkg,0)
               FROM ftd_fo_trd_dtls,UAC_USR_ACCNTS
               WHERE  ftd_clm_mtch_accnt  = UAC_CLM_MTCH_ACCNT
               AND	UAC_USR_ID = :c_user_id
            /**WHERE ftd_clm_mtch_accnt = :c_mtch_accnt_no  Commented In Ver  1.9 ***/
               AND  ftd_xchng_cd       LIKE  :c_exchange_cd   /** Changed to LIKE for Ver 2.1 **/
               /*AND  ftd_prdct_typ      = :c_product_typ*/
							 AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
               AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
               AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
               AND  ftd_trd_flw     LIKE :c_trade_flw
               AND  ftd_ordr_rfrnc     = :c_ord_rfr

               UNION ALL

                SELECT
                  ftd_xchng_cd, /** Added for Ver 2.1 **/
		  						ltrim(rtrim(ftd_undrlyng)),
                  ftd_prdct_typ,
                  ftd_strk_prc,
                  ftd_opt_typ,
                  ftd_exer_typ,
                  ftd_expry_dt,
                  to_char ( ftd_trd_dt, 'dd-Mon-yyyy' ),
                  ftd_trd_flw,
                  ftd_exctd_qty,
                  ftd_exctd_rt,
                  ftd_indstk,
                  ftd_ordr_rfrnc,
                  ftd_eba_trd_ref,
                  NVL(ftd_brkg,0)
                FROM  ftd_fo_trd_dtls_hstry,UAC_USR_ACCNTS
  							WHERE ftd_clm_mtch_accnt  = UAC_CLM_MTCH_ACCNT
                AND	UAC_USR_ID = :c_user_id
            /** WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no  Commented In Ver  1.9 ***/
                AND  ftd_xchng_cd       LIKE :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
                /*AND  ftd_prdct_typ      = :c_product_typ*/
								AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                AND  ftd_trd_flw     LIKE :c_trade_flw
                AND  ftd_ordr_rfrnc     = :c_ord_rfr
                ORDER BY 13,8,2,9 DESC;    /** Changed for Ver 2.1 **/
		/* ORDER BY 12,7,1,8 DESC;  */        /**Ver 1.8**/
            END;
          END-EXEC;
 
  if (DEBUG_MSG_LVL_2)
  {  
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS After select cursor FTD and FTD HSTRY NOT  BPID Case B  :%s:",c_time);  
  }
				}
			}
			else
			{

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before select cursor FTD and FTD HSTRY  NORMAL User Case B  :%s:",c_time);
  }

  			EXEC SQL  EXECUTE
          BEGIN
          OPEN  :sys_cursor FOR
            SELECT
                    ftd_xchng_cd, /** Added for Ver 2.1 **/
		    						ltrim(rtrim(ftd_undrlyng)),
                    ftd_prdct_typ,
                    ftd_strk_prc,
                    ftd_opt_typ,
                    ftd_exer_typ,
                    ftd_expry_dt,
                    to_char ( ftd_trd_dt, 'dd-Mon-yyyy' ),
                    ftd_trd_flw,
                    ftd_exctd_qty,
                    ftd_exctd_rt,
                    ftd_indstk,
                    ftd_ordr_rfrnc,
                    ftd_eba_trd_ref,
                    NVL(ftd_brkg,0)
            FROM	ftd_fo_trd_dtls
            WHERE ftd_clm_mtch_accnt = :c_mtch_accnt_no  
            AND  ftd_xchng_cd       LIKE :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
            /*AND  ftd_prdct_typ      = :c_product_typ*/
						AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
            AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
            AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
            AND  ftd_trd_flw     LIKE :c_trade_flw
            AND  ftd_ordr_rfrnc     = :c_ord_rfr

            UNION ALL

            SELECT
              ftd_xchng_cd, /** Added for Ver 2.1 **/
	      			ltrim(rtrim(ftd_undrlyng)),
              ftd_prdct_typ,
              ftd_strk_prc,
              ftd_opt_typ,
              ftd_exer_typ,
              ftd_expry_dt,
              to_char ( ftd_trd_dt, 'dd-Mon-yyyy' ),
              ftd_trd_flw,
              ftd_exctd_qty,
              ftd_exctd_rt,
              ftd_indstk,
              ftd_ordr_rfrnc,
              ftd_eba_trd_ref,
              NVL(ftd_brkg,0)
           FROM  ftd_fo_trd_dtls_hstry
           WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no  
           AND  ftd_xchng_cd       LIKE :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
           /*AND  ftd_prdct_typ      = :c_product_typ*/
					 AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
           AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
           AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
           AND  ftd_trd_flw     LIKE :c_trade_flw
           AND  ftd_ordr_rfrnc     = :c_ord_rfr
           ORDER BY 13,8,2,9 DESC; /** Changed for Ver 2.1 **/
	   /* ORDER BY 12,7,1,8 DESC; */         /**Ver 1.8**/
         END;
        END-EXEC;
			}

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS After select cursor FTD and FTD HSTRY  NORMAL User Case B  :%s:",c_time);  
  }

	 		break ;

      default:

			fn_userlog(c_ServiceName," Inside default for History ");

      strcpy ( c_errmsg, "Invalid operation type" );
      fn_userlog( c_ServiceName,"Invalid operation type" );
      EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
      EXEC SQL FREE :sys_cursor;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);      /***  Ver 1.9 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      break;

			}

	}

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31105", SQLMSG, c_errmsg  );
    EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
    EXEC SQL FREE :sys_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpcommit(0);      /***  Ver 1.9 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN	*	i_rec_cnt * 5);	/***	Ver	1.9	***/ 
                                                                                      /*** Multiplied by 5 in Ver 4.4 ***/

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31110", FMLMSG, c_errmsg  );
    EXEC SQL CLOSE :sys_cursor;
    EXEC SQL FREE :sys_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpcommit(0);      /***  Ver 1.9 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if( DEBUG_MSG_LVL_5 )
	{
  	fn_userlog(c_ServiceName," Before Fetch ");
	}

  counter = 1;

  for( ; ; )
  {
		if( DEBUG_MSG_LVL_5 )
		{	
    	fn_userlog(c_ServiceName," Value of counter is [%d] ",counter);
		}

    SETLEN(c_exp_date);
    SETLEN(c_trd_date);

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before Fetch cursor FTD and FTD HSTRY   :%s:",c_time); 
  }

    EXEC SQL FETCH :sys_cursor
              INTO   :c_xchng_cd,  /** Added for Ver 2.1 **/    
	             		 :c_unlying,
									 :c_prd_typ,
									 :l_strk_prc,
									 :c_opt_typ,
									 :c_exrc_typ,
									 :c_exp_date,
									 :c_trd_date,
									 :c_trade_flow,
									 :l_exctd_qty,
									 :l_exctd_rt,
									 :c_indstk,
									 :c_ordr_rfrnc,
									 :c_trd_rfrnc,
									 :l_brkg_val ;

    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        fn_userlog(c_ServiceName," Inside NO DATA FOUND ");
        break;
      }
      else
      {
        fn_errlog( c_ServiceName, "S31115", SQLMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpcommit(0);      /***  Ver 1.9 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
 
  if (DEBUG_MSG_LVL_2)
  { 
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after  Fetch cursor FTD and FTD HSTRY   :%s:",c_time); 
  }
    SETNULL(c_exp_date);
    SETNULL(c_trd_date);
		
		if( DEBUG_MSG_LVL_5)
		{
    	fn_userlog(c_ServiceName,"Value of c_xchng_cd is     [%s] ",c_xchng_cd);  /** Added for Ver 2.1 **/
     	fn_userlog(c_ServiceName,"Value of c_unlying is      [%s] ",c_unlying);
     	fn_userlog(c_ServiceName,"Value of c_prd_typ is      [%c] ",c_prd_typ);
     	fn_userlog(c_ServiceName,"Value of l_strk_prc is     [%ld] ",l_strk_prc);
     	fn_userlog(c_ServiceName,"Value of c_opt_typ is      [%c] ",c_opt_typ);
     	fn_userlog(c_ServiceName,"Value of c_exrc_typ is     [%c] ",c_exrc_typ);
     	fn_userlog(c_ServiceName,"Value of c_exp_date is     [%s] ",c_exp_date.arr);
     	fn_userlog(c_ServiceName,"Value of c_trd_date is     [%s] ",c_trd_date.arr);
     	fn_userlog(c_ServiceName,"Value of c_trade_flow is   [%c] ",c_trade_flow);
     	fn_userlog(c_ServiceName,"Value of l_exctd_qty is    [%ld] ",l_exctd_qty);
     	fn_userlog(c_ServiceName,"Value of l_exctd_rt is     [%ld] ",l_exctd_rt);
     	fn_userlog(c_ServiceName,"Value of c_indstk is       [%s] ",c_indstk);
     	fn_userlog(c_ServiceName,"Value of c_ordr_rfrnc is    [%s]",c_ordr_rfrnc);
     	fn_userlog(c_ServiceName,"Value of c_trd_rfrnc is    [%s] ",c_trd_rfrnc);
     	fn_userlog(c_ServiceName,"Value of l_brkg_val is     [%ld] ",l_brkg_val);
		}

		if( DEBUG_MSG_LVL_5)
		{
    	fn_userlog(c_ServiceName," Before Fadd32 ");
		}

    i_err[0] = Fadd32(ptr_fml_Obuf,FFO_UNDRLYNG,(char *)c_unlying,0) ;
    i_err[1] = Fadd32(ptr_fml_Obuf,FFO_ORDR_RFRNC,(char *)c_ordr_rfrnc,0) ;
    i_err[2] = Fadd32(ptr_fml_Obuf,FFO_TRD_RFRNC,(char *)c_trd_rfrnc,0) ;
    i_err[3] = Fadd32(ptr_fml_Obuf,FFO_PRDCT_TYP,(char *)&c_prd_typ,0) ;
    i_err[4] = Fadd32(ptr_fml_Obuf,FFO_EXPRY_DT,(char *)c_exp_date.arr,0) ;
    i_err[5] = Fadd32(ptr_fml_Obuf,FFO_EXER_TYP,(char *)&c_exrc_typ,0) ;
    i_err[6] = Fadd32(ptr_fml_Obuf,FFO_OPT_TYP,(char *)&c_opt_typ,0) ;
    i_err[7] = Fadd32(ptr_fml_Obuf,FFO_STRK_PRC,(char *)&l_strk_prc,0) ;
    i_err[8] = Fadd32(ptr_fml_Obuf,FFO_EXEC_QTY,(char *)&l_exctd_qty,0) ;
    i_err[9] = Fadd32(ptr_fml_Obuf,FFO_EXCTD_RT,(char *)&l_exctd_rt,0) ;
    /*i_err[10] = Fadd32(ptr_fml_Obuf,FFO_INSTRMNT_TYP,(char *)&c_indstk,0) ; */			/*1.5*/
    i_err[10] = Fadd32(ptr_fml_Obuf,FFO_INSTRMNT_TYP,(char *)c_indstk,0) ;       /*1.5*/
    i_err[11] = Fadd32(ptr_fml_Obuf,FFO_TRD_DT,(char *)c_trd_date.arr,0) ;
    i_err[12] = Fadd32(ptr_fml_Obuf,FFO_TRD_FLW,(char *)&c_trade_flow,0) ;
    i_err[13] = Fadd32(ptr_fml_Obuf,FFO_BRKRG_VL,(char *)&l_brkg_val,0) ;
    i_err[14] = Fadd32(ptr_fml_Obuf,FFO_XCHNG_CD,(char *)c_xchng_cd,0) ;  /** Added for Ver 2.1 **/

      for(i=0;i<14;i++)  /** Changed count from 13 to 14 for Ver 2.1 **/
      {
        if(i_err[i] == -1)
        {
          fn_userlog(c_ServiceName,"Error in Fadd for i [%d]",i);
          fn_errlog( c_ServiceName, "S31120", FMLMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
          EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      		tpcommit(0);      /***  Ver 1.9 ***/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }    
      }

     /*** Commented in Ver 4.4 *** 
      ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
                                     counter * MIN_FML_BUF_LEN );
     ***/

      if(Fneeded32(1,MIN_FML_BUF_LEN) > Funused32(ptr_fml_Obuf))/**Check added in Ver 4.4 as memory was reallocated after every record fetched ***/
    {
    	counter ++;
      ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf, Fsizeof32(ptr_fml_Obuf) +
                                                                counter * MIN_FML_BUF_LEN * 5 ); /* Ver 4.4 */
      if ( ptr_fml_Obuf == NULL )
      {
        fn_errlog( c_ServiceName, "S31125", TPMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/  
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpcommit(0);      /***  Ver 1.9 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

   } /* For loop */

 }/******* End of flag used to display secondary page ***********/


  if ( c_spl_flg == 'P' )
  {
		if( DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"Inside 'P'- Primary page of trade book.");
		}

    if(i_hist_flg == 0)
    {
       switch(c_opr_typ)
        {
          case 'A':

					if( DEBUG_MSG_LVL_3)
					{
          	fn_userlog(c_ServiceName," Inside Case 'A' for Today ");
					}

  				if( DEBUG_MSG_LVL_5 )
				 	{  
    				fn_userlog(c_ServiceName,"from date is         [%s]",c_frm_dt.arr);
    				fn_userlog(c_ServiceName,"to date is           [%s]",c_to_dt.arr);
    				fn_userlog(c_ServiceName,"operation type is    [%c]",c_opr_typ);
    				fn_userlog(c_ServiceName,"exchange code is     [%s]",c_exchange_cd);
    				fn_userlog(c_ServiceName,"underlying is        [%s]",c_underlying);
    				fn_userlog(c_ServiceName,"product type is      [%c]",c_product_typ);
    				fn_userlog(c_ServiceName,"trade flow is        [%c]",c_trd_flw);
    				fn_userlog(c_ServiceName,"match account no is  [%s]",c_mtch_accnt_no);
    				fn_userlog(c_ServiceName,"Special Flag is      [%c]",c_spl_flg);
    				fn_userlog(c_ServiceName,"Order ref no is      [%s]",c_ord_rfr);
  				}

					if( strcmp(c_mtch_accnt_no, "*" ) == 0 )
					{
					 if(strcmp(c_advisor_id, "NA") == 0)		/*** Condition added for Ver 3.0 ***/
					 {
    				if( c_user_id[0] == BPID )
						{
 
  if (DEBUG_MSG_LVL_2)
  {  
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before select FTD BPID case A spl_flg P   :%s:",c_time); 
  }

          		EXEC SQL  EXECUTE
           			BEGIN
            		OPEN  :sys_cursor FOR
              	SELECT
		      						ftd_xchng_cd, /** Added for Ver 2.1 **/
											ftd_clm_mtch_accnt,    /** Ver 2.0 **/
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
          						ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)), /*** Ver 1.1 nvl added ***/
                      sum(ftd_exctd_rt * ftd_exctd_qty),
											sum(nvl(ftd_stt,0)),            /* Ver 1.6 */
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),         /* Ver 1.6 */												/** Ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),        /* Ver 1.6 */
                      sum(nvl(ftd_tran_chrg,0)),      /* Ver 1.6 */
                      sum(nvl(ftd_stamp_duty,0))      /* Ver 1.6 */
                FROM  ftd_fo_trd_dtls,CLM_CLNT_MSTR
								WHERE	ftd_clm_mtch_accnt	=	CLM_MTCH_ACCNT
                AND		CLM_BP_ID	=	:c_user_id
            /**	WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no		Commented In Ver	1.9	***/
                AND  ftd_xchng_cd       LIKE :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
                AND  ftd_undrlyng       = :c_underlying
                /*AND  ftd_prdct_typ      = :c_product_typ*/
								AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                AND  trunc(ftd_trd_dt)  = :c_to_dt
                AND  ftd_trd_flw     LIKE :c_trade_flw
             		GROUP BY ftd_xchng_cd, /** Ver 2.1 **/
											ftd_clm_mtch_accnt,    /** Ver 2.0 **/ 
											ftd_ordr_rfrnc,
											ftd_trd_flw,
											ftd_undrlyng,
											ftd_indstk,
											trunc(ftd_trd_dt),
											trunc(ftd_expry_dt),
											ftd_prdct_typ,
											ftd_opt_typ,
											ftd_exer_typ,
											ftd_strk_prc 
								ORDER BY ftd_ordr_rfrnc DESC;								/**Ver 1.8 **/
          		END;
        		END-EXEC;

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after select FTD BPID case A spl_flg P   :%s:",c_time);  
  }
					}
					else
					{
  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();  
   fn_userlog(c_ServiceName,"  - TIME_STATS before  select FTD NOT BPID case A spl_flg P   :%s:",c_time); 
  }

  					EXEC SQL  EXECUTE
              BEGIN
                OPEN  :sys_cursor FOR
                SELECT
		      						ftd_xchng_cd, /** Added for Ver 2.1 **/
											ftd_clm_mtch_accnt,   /** Ver 2.0 **/
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)), /*** Ver 1.1 nvl added ***/
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),            /* Ver 1.6 */
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),         /* Ver 1.6 */		/** ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),        /* Ver 1.6 */
                      sum(nvl(ftd_tran_chrg,0)),      /* Ver 1.6 */
                      sum(nvl(ftd_stamp_duty,0))      /* Ver 1.6 */
                FROM  ftd_fo_trd_dtls,UAC_USR_ACCNTS
                WHERE ftd_clm_mtch_accnt  = UAC_CLM_MTCH_ACCNT
                AND		UAC_USR_ID	= :c_user_id
            /** WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no    Commented In Ver  1.9 ***/
                AND  ftd_xchng_cd       LIKE  :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
                AND  ftd_undrlyng       = :c_underlying
                /*AND  ftd_prdct_typ      = :c_product_typ*/
								AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/	
                AND  trunc(ftd_trd_dt)  = :c_to_dt
                AND  ftd_trd_flw     LIKE :c_trade_flw
                GROUP BY ftd_xchng_cd, /** Ver 2.1 **/ 
		        					ftd_clm_mtch_accnt,    /** Ver 2.0 **/
										  ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc
                ORDER BY ftd_ordr_rfrnc DESC;                /**Ver 1.8 **/
              END;
            END-EXEC;

					}

  if (DEBUG_MSG_LVL_2)
  { 
   fn_gettime();  
   fn_userlog(c_ServiceName,"  - TIME_STATS after  select FTD NOT BPID case A spl_flg P   :%s:",c_time);
  }
				 }
				 /*** Added for Ver 3.0 ***/
				 else if(strcmp(c_advisor_id, "NA") != 0)
				 {
  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before  select FTD Advisor case A spl_flg P   :%s:",c_time);  
  }      
            /*** Ver 4.5 Starts ***/ 
            if (c_sys_order == 'S')    /*** if-else added in Ver 4.5  ***/
            {
            EXEC SQL  EXECUTE
              BEGIN
                OPEN  :sys_cursor FOR
                SELECT
                      ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)),
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),        
                      sum(nvl(ftd_sebi_tt,0)),
                      sum(nvl(ftd_tran_chrg,0)),
                      sum(nvl(ftd_stamp_duty,0))
                FROM  ftd_fo_trd_dtls, FOD_FO_ORDR_DTLS, ACM_ADV_CLNT_MAP   
                WHERE FOD_ORDR_RFRNC     = ftd_ordr_rfrnc
                AND   FOD_CLM_MTCH_ACCNT = ACM_MTCH_ACCNT                  
                AND   FOD_CHANNEL        = 'SYS'                           
                AND   ACM_ACTV_FLG       = 'A'                             
                AND   ACM_ADVISOR_ID     = :c_advisor_id                   
                AND   ftd_xchng_cd       LIKE :c_exchange_cd
                AND   ftd_undrlyng       = :c_underlying
                /*AND   ftd_prdct_typ      = :c_product_typ*/
								AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                AND   FOD_TRD_DT         = :c_to_dt
                AND   FTD_TRD_FLW        LIKE :c_trade_flw
                GROUP BY ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc
                ORDER BY 2,7,5,3;
              END;
            END-EXEC;                 
            }  

            else   /*** Ver 4.5 Ends ***/
            {   
  					EXEC SQL  EXECUTE
              BEGIN
                OPEN  :sys_cursor FOR
                SELECT
                      ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)),
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),							/*** Ver 4.1 ***/
                      sum(nvl(ftd_sebi_tt,0)),
                      sum(nvl(ftd_tran_chrg,0)),
                      sum(nvl(ftd_stamp_duty,0))
                FROM  ftd_fo_trd_dtls, FOD_FO_ORDR_DTLS, CNT_CSE_MAST
                WHERE FOD_ORDR_RFRNC = ftd_ordr_rfrnc
								AND FOD_CSE_ID = CCM_CSE_ID
								AND CCM_LOGIN_NAME = :c_advisor_id
                AND  ftd_xchng_cd       LIKE :c_exchange_cd
                AND  ftd_undrlyng       = :c_underlying
                /*AND  ftd_prdct_typ      = :c_product_typ*/
								AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                AND  FOD_TRD_DT  = :c_to_dt
                AND  FTD_TRD_FLW     LIKE :c_trade_flw
                GROUP BY ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc
                ORDER BY 2,7,5,3;
              END;
            END-EXEC;
				   }
        } 
				 /*** End for Ver 3.0 ***/

  if (DEBUG_MSG_LVL_2)
  {	
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after  select FTD Advisor case A spl_flg P   :%s:",c_time);  
	}
      }
				else
				{
  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before  select FTD Normal case A spl_flg P   :%s:",c_time); 
  }

    			EXEC SQL  EXECUTE
            BEGIN
            	OPEN  :sys_cursor FOR
              SELECT
		      					  ftd_xchng_cd, /** Added for Ver 2.1 **/
							  			ftd_clm_mtch_accnt, /** Ver 2.0  **/
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)), /*** Ver 1.1 nvl added ***/
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),            /* Ver 1.6 */
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),         /* Ver 1.6 */				/** Ver 4.1 ***/
                      sum(nvl(ftd_sebi_tt,0)),        /* Ver 1.6 */
                      sum(nvl(ftd_tran_chrg,0)),      /* Ver 1.6 */
                      sum(nvl(ftd_stamp_duty,0))      /* Ver 1.6 */
                FROM  ftd_fo_trd_dtls
             		WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no 
                AND  ftd_xchng_cd       LIKE :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
                AND  ftd_undrlyng       = :c_underlying
                /*AND  ftd_prdct_typ      = :c_product_typ*/
								AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                AND  trunc(ftd_trd_dt)  = :c_to_dt
                AND  ftd_trd_flw     LIKE :c_trade_flw
                GROUP BY  ftd_xchng_cd, /** Ver 2.1 **/
											ftd_clm_mtch_accnt,    /** Ver 2.0 **/
		      					  ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc
                ORDER BY ftd_ordr_rfrnc DESC;                /**Ver 1.8 **/
              END;
            END-EXEC;


  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after select FTD Normal case A spl_flg P   :%s:",c_time);  
  }

				}
        break ;

        case 'B':

					if( DEBUG_MSG_LVL_3)
					{
          	fn_userlog(c_ServiceName," Inside Case 'B' for Today ");
					}


  				if( DEBUG_MSG_LVL_5 )
				 	{          /*  Ver 1.4 : Debug level Change  */
    				fn_userlog(c_ServiceName,"from date is         [%s]",c_frm_dt.arr);
    				fn_userlog(c_ServiceName,"to date is           [%s]",c_to_dt.arr);
    				fn_userlog(c_ServiceName,"operation type is    [%c]",c_opr_typ);
    				fn_userlog(c_ServiceName,"exchange code is     [%s]",c_exchange_cd);
    				fn_userlog(c_ServiceName,"underlying is        [%s]",c_underlying);
    				fn_userlog(c_ServiceName,"product type is      [%c]",c_product_typ);
    				fn_userlog(c_ServiceName,"trade flow is        [%c]",c_trd_flw);
    				fn_userlog(c_ServiceName,"match account no is  [%s]",c_mtch_accnt_no);
  				}

					if( strcmp(c_mtch_accnt_no, "*" ) == 0 )
					{
           if(strcmp(c_advisor_id, "NA") == 0)    /*** Condition added for Ver 3.0 ***/
					 {
				  	if( c_user_id[0] == BPID )
						{
  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before  select FTD BPID case B spl_flg P   :%s:",c_time); 
  }
          		EXEC SQL  EXECUTE
           			BEGIN
            		OPEN  :sys_cursor FOR
              		SELECT
		      						ftd_xchng_cd, /** Added for Ver 2.1  **/
											ftd_clm_mtch_accnt,  /** Ver 2.0  **/
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)), /*** Ver 1.1 adds nvl ***/
                      sum(ftd_exctd_rt * ftd_exctd_qty),
											sum(nvl(ftd_stt,0)),           /* Ver 1.6 */
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),        /* Ver 1.6 */			/** Ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),        /* Ver 1.6 */
                      sum(nvl(ftd_tran_chrg,0)),      /* Ver 1.6 */
                      sum(nvl(ftd_stamp_duty,0))      /* Ver 1.6 */	
                FROM  ftd_fo_trd_dtls,CLM_CLNT_MSTR
								WHERE	ftd_clm_mtch_accnt	=	CLM_MTCH_ACCNT
                AND		CLM_BP_ID	=	:c_user_id
             /**WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no	Commented In Ver	1.9	***/
                AND  ftd_xchng_cd       LIKE  :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
                /*AND  ftd_prdct_typ      = :c_product_typ*/
								AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                AND  trunc(ftd_trd_dt)  = :c_to_dt
                AND  ftd_trd_flw     LIKE :c_trade_flw
           			GROUP BY ftd_xchng_cd, /** Ver 2.1 **/
											ftd_clm_mtch_accnt,    /** Ver 2.0 **/
											ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
											ftd_strk_prc
						 ORDER BY ftd_ordr_rfrnc DESC; 									/**Ver 1.8**/
          	END;
         	END-EXEC;

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after  select FTD BPID case B spl_flg P   :%s:",c_time);  
  }
					}
					else
					{
  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before  select FTD NOT BPID case B spl_flg P   :%s:",c_time);  
  }
 
              EXEC SQL  EXECUTE
                BEGIN
                OPEN  :sys_cursor FOR
                  SELECT
		      						ftd_xchng_cd, /** Ver 2.1 **/
											ftd_clm_mtch_accnt,  /** Ver 2.0  **/ 
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)), /*** Ver 1.1 adds nvl ***/
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),           /* Ver 1.6 */
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),        /* Ver 1.6 */													/** Ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),        /* Ver 1.6 */
                      sum(nvl(ftd_tran_chrg,0)),      /* Ver 1.6 */
                      sum(nvl(ftd_stamp_duty,0))      /* Ver 1.6 */
                FROM  ftd_fo_trd_dtls,UAC_USR_ACCNTS
                WHERE  ftd_clm_mtch_accnt  = UAC_CLM_MTCH_ACCNT
                AND		UAC_USR_ID	= :c_user_id
             /**WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no  Commented In Ver  1.9 ***/
                AND  ftd_xchng_cd       LIKE :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
                /*AND  ftd_prdct_typ      = :c_product_typ*/
								AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                AND  trunc(ftd_trd_dt)  = :c_to_dt
                AND  ftd_trd_flw     LIKE :c_trade_flw
                GROUP BY ftd_xchng_cd,  /** Ver 2.1 **/
			 								ftd_clm_mtch_accnt,    /** Ver 2.0 **/
		     							ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc
             ORDER BY ftd_ordr_rfrnc DESC;                   /**Ver 1.8**/
            END;
          END-EXEC;

					}
  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after  select FTD NOT BPID case B spl_flg P   :%s:",c_time);  
  }
				 }
				 /** Added for Ver 3.0 ***/
				 else if(strcmp(c_advisor_id, "NA") != 0)
				 {
  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before  select FTD Advisor case B spl_flg P   :%s:",c_time); 
   }          
            /*** Ver 4.5 Starts ***/  
             if ( c_sys_order == 'S')                                   /*** if-else added in Ver 4.5  ***/ 
            {
               EXEC SQL  EXECUTE
                BEGIN
                OPEN  :sys_cursor FOR
                  SELECT
                      ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)),
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)), 
                      sum(nvl(ftd_sebi_tt,0)),
                      sum(nvl(ftd_tran_chrg,0)),
                      sum(nvl(ftd_stamp_duty,0))
                FROM  ftd_fo_trd_dtls,FOD_FO_ORDR_DTLS, ACM_ADV_CLNT_MAP     
                WHERE  FOD_ORDR_RFRNC    = ftd_ordr_rfrnc                    
                AND   FOD_CLM_MTCH_ACCNT = ACM_MTCH_ACCNT                   
                AND   FOD_CHANNEL        = 'SYS'                           
                AND   ACM_ACTV_FLG       = 'A'                            
                AND   ACM_ADVISOR_ID     = :c_advisor_id                 
                AND   ftd_xchng_cd    LIKE :c_exchange_cd
                /*AND   ftd_prdct_typ      = :c_product_typ*/
								AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                AND   FOD_TRD_DT         = :c_to_dt
                AND   ftd_trd_flw  LIKE :c_trade_flw
                GROUP BY ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc
            ORDER BY 2,7,5,3;
                      END;
          END-EXEC;
              
            } 
              
            else   /*** Ver 4.5 Ends ***/
                {
                EXEC SQL  EXECUTE
                BEGIN
                OPEN  :sys_cursor FOR
                  SELECT
                      ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)),
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)), 
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),			/**  Ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),
                      sum(nvl(ftd_tran_chrg,0)),
                      sum(nvl(ftd_stamp_duty,0))
                FROM  ftd_fo_trd_dtls,FOD_FO_ORDR_DTLS, CNT_CSE_MAST
                WHERE  FOD_ORDR_RFRNC = ftd_ordr_rfrnc
                AND FOD_CSE_ID = CCM_CSE_ID
                AND CCM_LOGIN_NAME = :c_advisor_id
								AND ftd_xchng_cd   LIKE :c_exchange_cd
                /*AND ftd_prdct_typ  = :c_product_typ*/
								AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                AND FOD_TRD_DT  = :c_to_dt
                AND ftd_trd_flw  LIKE :c_trade_flw
                GROUP BY ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc
						ORDER BY 2,7,5,3;
            END;
          END-EXEC;
				 }
       } 
  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();  
   fn_userlog(c_ServiceName,"  - TIME_STATS after  select FTD Advisor case B spl_flg P   :%s:",c_time); 
  }
				 /** End for Ver 3.0 ***/
				}
				else
				{

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before  select FTD Normal User case B spl_flg P   :%s:",c_time); 
  }
  
              EXEC SQL  EXECUTE
                BEGIN
                OPEN  :sys_cursor FOR
                  SELECT
		      						ftd_xchng_cd, /** Added for Ver 2.1 **/
											ftd_clm_mtch_accnt,  /** Ver 2.0  **/ 
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)), /*** Ver 1.1 adds nvl ***/
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),           /* Ver 1.6 */
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),        /* Ver 1.6 */		/** Ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),        /* Ver 1.6 */
                      sum(nvl(ftd_tran_chrg,0)),      /* Ver 1.6 */
                      sum(nvl(ftd_stamp_duty,0))      /* Ver 1.6 */
                FROM  ftd_fo_trd_dtls
             		WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no  
                AND  ftd_xchng_cd       LIKE :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
                /*AND  ftd_prdct_typ      = :c_product_typ*/
								AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                AND  trunc(ftd_trd_dt)  = :c_to_dt
                AND  ftd_trd_flw     LIKE :c_trade_flw
                GROUP BY ftd_xchng_cd,  /** Ver 2.1 **/
		 									ftd_clm_mtch_accnt,    /** Ver 2.0 **/
		       						ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc
             ORDER BY ftd_ordr_rfrnc DESC;                   /**Ver 1.8**/
            END;
          END-EXEC;

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after  select FTD Advisor case B spl_flg P   :%s:",c_time);
  }
				}
         break ;

      default:

      fn_userlog(c_ServiceName," Inside Default for Today ");

      strcpy( c_errmsg, "Invalid Operation Type" );
      fn_errlog ( c_ServiceName, "S31130", DEFMSG, c_errmsg );
      EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
      EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
      break;

    }/***********end of switch case ************/

 }/****end of if for today ********/
 else
 {
 	switch(c_opr_typ)
        {
          case 'A':

						if( DEBUG_MSG_LVL_3)
						{
          		fn_userlog(c_ServiceName," Inside 'A' for History ");
						}


  					if( DEBUG_MSG_LVL_5 )
					  {      
    					fn_userlog(c_ServiceName,"from date is        [%s]",c_frm_dt.arr);
    					fn_userlog(c_ServiceName,"to date is          [%s]",c_to_dt.arr);
    					fn_userlog(c_ServiceName,"operation type is   [%c]",c_opr_typ);
    					fn_userlog(c_ServiceName,"exchange code is    [%s]",c_exchange_cd);
    					fn_userlog(c_ServiceName,"underlying is       [%s]",c_underlying);
    					fn_userlog(c_ServiceName,"product type is     [%c]",c_product_typ);
    					fn_userlog(c_ServiceName,"trade flow is       [%c]",c_trd_flw);
    					fn_userlog(c_ServiceName,"match account no is [%s]",c_mtch_accnt_no);
  					}

						if( strcmp(c_mtch_accnt_no, "*" ) == 0 )
						{
           	 if(strcmp(c_advisor_id, "NA") == 0)    /*** Condition added for Ver 3.0 ***/
						 {
							if( c_user_id[0] == BPID )
							{
  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before  select FTD and FTD HSTRY  BPID case A spl_flg P   :%s:",c_time); 
  }
          			EXEC SQL  EXECUTE
           				BEGIN
            			OPEN  :sys_cursor FOR
              			SELECT
		  							  ftd_xchng_cd, /** Ver 2.1 **/
									    ftd_clm_mtch_accnt,  /** Ver 2.0  **/
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)), /*** Ver 1.1 adds nvl ***/
                      sum(ftd_exctd_rt * ftd_exctd_qty),
											sum(nvl(ftd_stt,0)),           /* Ver 1.6 */
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),        /* Ver 1.6 */			/*** Ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),        /* Ver 1.6 */
                      sum(nvl(ftd_tran_chrg,0)),      /* Ver 1.6 */
                      sum(nvl(ftd_stamp_duty,0))      /* Ver 1.6 */
                FROM  ftd_fo_trd_dtls,CLM_CLNT_MSTR
								WHERE ftd_clm_mtch_accnt	=	CLM_MTCH_ACCNT
                AND CLM_BP_ID	=	:c_user_id
             /**WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no	Commented In Ver	1.9	***/
                 AND  ftd_xchng_cd       LIKE :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
                 AND  ftd_undrlyng       = :c_underlying
                 /*AND  ftd_prdct_typ      = :c_product_typ*/
								 AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                 AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                 AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                 AND  ftd_trd_flw     LIKE :c_trade_flw
             GROUP BY ftd_xchng_cd, /** Ver 2.1 **/
	     								ftd_clm_mtch_accnt,    /** Ver 2.0 **/
	              		  ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
											ftd_strk_prc

              UNION ALL

              SELECT  
		      						ftd_xchng_cd, /** Ver 2.1 **/
		      						ftd_clm_mtch_accnt,  /** Ver 2.0  **/
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)),	/*** Ver 1.1 adds nvl ***/
                      sum(ftd_exctd_rt * ftd_exctd_qty),
											sum(nvl(ftd_stt,0)),           /* Ver 1.6 */
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),        /* Ver 1.6 */	/** ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),        /* Ver 1.6 */
                      sum(nvl(ftd_tran_chrg,0)),      /* Ver 1.6 */
                      sum(nvl(ftd_stamp_duty,0))      /* Ver 1.6 */
                FROM  ftd_fo_trd_dtls_hstry,CLM_CLNT_MSTR
								WHERE		ftd_clm_mtch_accnt	=	CLM_MTCH_ACCNT
                AND		CLM_BP_ID	=	:c_user_id
             /**WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no	Commeted In Ver	1.9	***/
                 AND  ftd_xchng_cd       LIKE :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
                 AND  ftd_undrlyng       = :c_underlying
                 /*AND  ftd_prdct_typ      = :c_product_typ*/
								AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                 AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
								 AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                 AND  ftd_trd_flw     LIKE :c_trade_flw
             		GROUP BY ftd_xchng_cd,  /** Ver 2.1 **/
	              			ftd_clm_mtch_accnt,    /** Ver 2.0 **/
	              			ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
											ftd_strk_prc 
						 ORDER BY ftd_ordr_rfrnc DESC; 									/**Ver 1.8**/
          END;
         END-EXEC;
				}
				else
				{

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before  select FTD and FTD HSTRY NOT BPID case A spl_flg P   :%s:",c_time);
  }

                EXEC SQL  EXECUTE
                  BEGIN
                  OPEN  :sys_cursor FOR
                    SELECT
		      					  ftd_xchng_cd, /** Added for Ver 2.1 **/
							  			ftd_clm_mtch_accnt,  /** Ver 2.0  **/
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)), /*** Ver 1.1 adds nvl ***/
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),           /* Ver 1.6 */
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),        /* Ver 1.6 */	/** ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),        /* Ver 1.6 */
                      sum(nvl(ftd_tran_chrg,0)),      /* Ver 1.6 */
                      sum(nvl(ftd_stamp_duty,0))      /* Ver 1.6 */
                FROM  ftd_fo_trd_dtls,UAC_USR_ACCNTS
                WHERE  ftd_clm_mtch_accnt  = UAC_CLM_MTCH_ACCNT
                AND		UAC_USR_ID	= :c_user_id
             /**WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no  Commented In Ver  1.9 ***/
                 AND  ftd_xchng_cd       LIKE :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
                 AND  ftd_undrlyng       = :c_underlying
                 /*AND  ftd_prdct_typ      = :c_product_typ*/
								 AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/	
                 AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                 AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                 AND  ftd_trd_flw     LIKE :c_trade_flw
             GROUP BY ftd_xchng_cd,  /** Ver 2.1 **/
											ftd_clm_mtch_accnt,    /** Ver 2.0 **/
	              			ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc

              UNION ALL

              SELECT  
	              		  ftd_xchng_cd, /** Added for Ver 2.1 **/
				  						ftd_clm_mtch_accnt,  /** Ver 2.0  **/
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
     									ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)), /*** Ver 1.1 adds nvl ***/
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),           /* Ver 1.6 */
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),        /* Ver 1.6 */		/** Ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),        /* Ver 1.6 */
                      sum(nvl(ftd_tran_chrg,0)),      /* Ver 1.6 */
                      sum(nvl(ftd_stamp_duty,0))      /* Ver 1.6 */
                FROM  ftd_fo_trd_dtls_hstry,UAC_USR_ACCNTS
                WHERE  ftd_clm_mtch_accnt  = UAC_CLM_MTCH_ACCNT
                AND    UAC_USR_ID = :c_user_id
             /**WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no  Commeted In Ver 1.9 ***/
                 AND  ftd_xchng_cd       LIKE :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
                 AND  ftd_undrlyng       = :c_underlying
                 /*AND  ftd_prdct_typ      = :c_product_typ*/
								 AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/	
                 AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                 AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                 AND  ftd_trd_flw     LIKE :c_trade_flw
             GROUP BY ftd_xchng_cd, /** Ver 2.1 **/
	     								ftd_clm_mtch_accnt,    /** Ver 2.0 **/
	              			ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc
             ORDER BY ftd_ordr_rfrnc DESC;                   /**Ver 1.8**/
       			END;
         	END-EXEC;
				}

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after  select FTD and FTD HSTRY NOT  BPID case A spl_flg P   :%s:",c_time); 
	}	
	 }
			 /*** Added for Ver 3.0 ***/
			 else if(strcmp(c_advisor_id, "NA") != 0)
			 {
  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before  select FTD and FTD HSTRY  Advisor case A spl_flg P   :%s:",c_time); 
  }           
   
                /*** Ver 4.5 Starts ***/
                if ( c_sys_order == 'S')                        /*** if-else added in Ver 4.5  ***/
            {
                  EXEC SQL  EXECUTE
                  BEGIN
                  OPEN  :sys_cursor FOR
                    SELECT
                      ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)),
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),
                      sum(nvl(ftd_sebi_tt,0)),
                      sum(nvl(ftd_tran_chrg,0)),
                      sum(nvl(ftd_stamp_duty,0))
                FROM  ftd_fo_trd_dtls,FOD_FO_ORDR_DTLS, ACM_ADV_CLNT_MAP            
                WHERE FOD_ORDR_RFRNC = ftd_ordr_rfrnc
                 AND  FOD_CLM_MTCH_ACCNT = ACM_MTCH_ACCNT                          
                 AND  FOD_CHANNEL        = 'SYS'                                  
                 AND  ACM_ACTV_FLG       = 'A'                                   
                 AND  ACM_ADVISOR_ID     = :c_advisor_id                        
                 AND  ftd_xchng_cd       LIKE :c_exchange_cd                              
                 AND  ftd_undrlyng       = :c_underlying
                 /*AND  ftd_prdct_typ      = :c_product_typ*/
								 AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                 AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                 AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                 AND  ftd_trd_flw     LIKE :c_trade_flw
             GROUP BY ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc
              UNION ALL
              SELECT
                      ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)),
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),   
                      sum(nvl(ftd_sebi_tt,0)),
                      sum(nvl(ftd_tran_chrg,0)),
                      sum(nvl(ftd_stamp_duty,0))
                FROM  ftd_fo_trd_dtls_hstry,FOD_FO_ORDR_DTLS_HSTRY, ACM_ADV_CLNT_MAP      
                WHERE  FOD_ORDR_RFRNC = ftd_ordr_rfrnc
                 AND   FOD_CLM_MTCH_ACCNT = ACM_MTCH_ACCNT                               
                 AND   FOD_CHANNEL        = 'SYS'                                       
                 AND   ACM_ACTV_FLG       = 'A'                                        
                 AND   ACM_ADVISOR_ID     = :c_advisor_id                             
                 AND  ftd_xchng_cd       LIKE :c_exchange_cd
                 AND  ftd_undrlyng        = :c_underlying
                 /*AND  ftd_prdct_typ       = :c_product_typ*/
								 AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                 AND  trunc(ftd_trd_dt)   >= to_date(:c_frm_dt,'dd-mon-yyyy')
                 AND  trunc(ftd_trd_dt)   <= to_date(:c_to_dt,'dd-mon-yyyy')
                 AND  ftd_trd_flw        LIKE :c_trade_flw
             GROUP BY ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc
              ORDER BY 2,7,5,3;
            END;
          END-EXEC;                            
            
             }
                  
            else  /*** Ver 4.5 Ends ***/
                { 
                EXEC SQL  EXECUTE
                  BEGIN
                  OPEN  :sys_cursor FOR
                    SELECT
                      ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)),
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),					/** Ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),
                      sum(nvl(ftd_tran_chrg,0)),
                      sum(nvl(ftd_stamp_duty,0))
                FROM  ftd_fo_trd_dtls,FOD_FO_ORDR_DTLS, CNT_CSE_MAST
                WHERE  FOD_ORDR_RFRNC = ftd_ordr_rfrnc
                 AND FOD_CSE_ID = CCM_CSE_ID
                 AND CCM_LOGIN_NAME = :c_advisor_id
		 AND  ftd_xchng_cd       LIKE :c_exchange_cd
                 AND  ftd_undrlyng       = :c_underlying
                 /*AND  ftd_prdct_typ      = :c_product_typ*/
								 AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                 AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                 AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                 AND  ftd_trd_flw     LIKE :c_trade_flw
             GROUP BY ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc
              UNION ALL
              SELECT
                      ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)),
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),							/** ver  4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),
                      sum(nvl(ftd_tran_chrg,0)),
                      sum(nvl(ftd_stamp_duty,0))
                FROM  ftd_fo_trd_dtls_hstry,FOD_FO_ORDR_DTLS_HSTRY, CNT_CSE_MAST
                WHERE  FOD_ORDR_RFRNC = ftd_ordr_rfrnc
                AND FOD_CSE_ID = CCM_CSE_ID
                AND CCM_LOGIN_NAME = :c_advisor_id
		AND  ftd_xchng_cd       LIKE :c_exchange_cd 
                 AND  ftd_undrlyng       = :c_underlying
                 /*AND  ftd_prdct_typ      = :c_product_typ*/
								 AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/			
                 AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                 AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                 AND  ftd_trd_flw     LIKE :c_trade_flw
             GROUP BY ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc
							ORDER BY 2,7,5,3;
            END;
          END-EXEC;
			 }
      }
  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after  select FTD and FTD HSTRY  Advisor case A spl_flg P   :%s:",c_time);
  }		
   	 /*** Added for Ver 3.0 ***/
			}
			else
			{

  if (DEBUG_MSG_LVL_2)
  { 
   fn_gettime(); 
   fn_userlog(c_ServiceName,"  - TIME_STATS before  select FTD and FTD HSTRY  Normal User case A spl_flg P   :%s:",c_time);
  }

                EXEC SQL  EXECUTE
                  BEGIN
                  OPEN  :sys_cursor FOR
                    SELECT
		   						    ftd_xchng_cd, /** Added for Ver 2.1 **/
								    	ftd_clm_mtch_accnt,  /** Ver 2.0  **/
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)), /*** Ver 1.1 adds nvl ***/
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),           /* Ver 1.6 */
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),        /* Ver 1.6 */			/** Ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),        /* Ver 1.6 */
                      sum(nvl(ftd_tran_chrg,0)),      /* Ver 1.6 */
                      sum(nvl(ftd_stamp_duty,0))      /* Ver 1.6 */
                FROM  ftd_fo_trd_dtls
             		WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no 
                 AND  ftd_xchng_cd       LIKE :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
                 AND  ftd_undrlyng       = :c_underlying
                 /*AND  ftd_prdct_typ      = :c_product_typ*/
								 AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                 AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                 AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                 AND  ftd_trd_flw     LIKE :c_trade_flw
             GROUP BY ftd_xchng_cd, /** Ver 2.1 **/
	              			ftd_clm_mtch_accnt,    /** Ver 2.0 **/
	              			ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc

              UNION ALL

              SELECT  
				              ftd_xchng_cd, /** Added in Ver 2.1 **/
					      			ftd_clm_mtch_accnt,  /** Ver 2.0  **/
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
          						ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)), /*** Ver 1.1 adds nvl ***/
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),           /* Ver 1.6 */
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),        /* Ver 1.6 */		/** Ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),        /* Ver 1.6 */
                      sum(nvl(ftd_tran_chrg,0)),      /* Ver 1.6 */
                      sum(nvl(ftd_stamp_duty,0))      /* Ver 1.6 */
                FROM  ftd_fo_trd_dtls_hstry
             		WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no 
                 AND  ftd_xchng_cd       LIKE :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
                 AND  ftd_undrlyng       = :c_underlying
                 /*AND  ftd_prdct_typ      = :c_product_typ*/
								 AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                 AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                 AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                 AND  ftd_trd_flw     LIKE :c_trade_flw
             GROUP BY ftd_xchng_cd, /** Ver 2.1 **/
	              			ftd_clm_mtch_accnt,    /** Ver 2.0 **/
								      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc
             ORDER BY ftd_ordr_rfrnc DESC;                   /**Ver 1.8**/
            END;
          END-EXEC;
				}

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();  
   fn_userlog(c_ServiceName,"  - TIME_STATS after select FTD and FTD HSTRY  Normal User case A spl_flg P   :%s:",c_time) ; 
	}	
         break ;

         case 'B':
		
					if( DEBUG_MSG_LVL_3)
					{
         	 	fn_userlog(c_ServiceName," Inside 'B' for History ");
					}

  				if( DEBUG_MSG_LVL_5 )
				 	{          /*  Ver 1.4 : Debug level Change  */
    				fn_userlog(c_ServiceName,"from date is         [%s]",c_frm_dt.arr);
    				fn_userlog(c_ServiceName,"to date is           [%s]",c_to_dt.arr);
    				fn_userlog(c_ServiceName,"operation type is    [%c]",c_opr_typ);
    				fn_userlog(c_ServiceName,"exchange code is     [%s]",c_exchange_cd);
    				fn_userlog(c_ServiceName,"underlying is        [%s]",c_underlying);
    				fn_userlog(c_ServiceName,"product type is      [%c]",c_product_typ);
    				fn_userlog(c_ServiceName,"trade flow is        [%c]",c_trd_flw);
    				fn_userlog(c_ServiceName,"match account no is  [%s]",c_mtch_accnt_no);
  				}

  				if( strcmp(c_mtch_accnt_no, "*" ) == 0 )
					{
           if(strcmp(c_advisor_id, "NA") == 0)    /*** Condition added for Ver 3.0 ***/
					 {
    				if( c_user_id[0] == BPID )
						{

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before  select FTD and FTD HSTRY  BPID case B spl_flg P   :%s:",c_time) ;  
  }
          		EXEC SQL  EXECUTE
           			BEGIN
            		OPEN  :sys_cursor FOR
              		SELECT
									    ftd_xchng_cd, /** Ver 2.1 **/
									    ftd_clm_mtch_accnt,  /** Ver 2.0  **/
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)),	/*** Ver 1.1 adds nvl ***/
                      sum(ftd_exctd_rt * ftd_exctd_qty),
											sum(nvl(ftd_stt,0)),           /* Ver 1.6 */
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),        /* Ver 1.6 */	/** ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),        /* Ver 1.6 */
                      sum(nvl(ftd_tran_chrg,0)),      /* Ver 1.6 */
                      sum(nvl(ftd_stamp_duty,0))      /* Ver 1.6 */
                	FROM  ftd_fo_trd_dtls,CLM_CLNT_MSTR
									WHERE	ftd_clm_mtch_accnt	=	CLM_MTCH_ACCNT
                	AND	CLM_BP_ID	=	:c_user_id
                 	AND  ftd_xchng_cd       LIKE :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
                 	/*AND  ftd_prdct_typ      = :c_product_typ*/
								  AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                 	AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                	AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                 AND  ftd_trd_flw     LIKE :c_trade_flw
             		 GROUP BY ftd_xchng_cd, /** Ver 2.1 **/
	              			ftd_clm_mtch_accnt,    /** Ver 2.0 **/
	              			ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
											ftd_strk_prc

              UNION ALL

              SELECT
	  			            ftd_xchng_cd, /** Added in Ver 2.1 **/
					    				ftd_clm_mtch_accnt,  /** Ver 2.0  **/
  	                  ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)),	/*** Ver 1.1 adds nvl ***/
                      sum(ftd_exctd_rt * ftd_exctd_qty),
											sum(nvl(ftd_stt,0)),            /* Ver 1.6 */
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),         /* Ver 1.6 */			/** Ver  4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),        /* Ver 1.6 */
                      sum(nvl(ftd_tran_chrg,0)),      /* Ver 1.6 */
                      sum(nvl(ftd_stamp_duty,0))      /* Ver 1.6 */	  	
                FROM  ftd_fo_trd_dtls_hstry,CLM_CLNT_MSTR
								WHERE	ftd_clm_mtch_accnt	=	CLM_MTCH_ACCNT
                AND	 CLM_BP_ID	 = :c_user_id
                AND  ftd_xchng_cd       LIKE :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
                /*AND  ftd_prdct_typ      = :c_product_typ*/
							  AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
								AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                AND  ftd_trd_flw     LIKE :c_trade_flw
             GROUP BY ftd_xchng_cd,  /** Ver 2.1 **/
											ftd_clm_mtch_accnt,    /** Ver 2.0 **/
	              			ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
											ftd_strk_prc 
						 			ORDER BY ftd_ordr_rfrnc DESC; 									/**Ver 1.8**/
          			END;
         			END-EXEC;
						}
						else
						{

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime(); 
   fn_userlog(c_ServiceName,"  - TIME_STATS before  select FTD and FTD HSTRY NOT BPID case B spl_flg P   :%s:",c_time) ; 
  }
          		EXEC SQL  EXECUTE
                BEGIN
                OPEN  :sys_cursor FOR
                  SELECT
		     						  ftd_xchng_cd, /** Added in Ver 2.1 **/
								   		ftd_clm_mtch_accnt,  /** Ver 2.0  **/
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)), /*** Ver 1.1 adds nvl ***/
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),           /* Ver 1.6 */
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),        /* Ver 1.6 */			/** ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),        /* Ver 1.6 */
                      sum(nvl(ftd_tran_chrg,0)),      /* Ver 1.6 */
                      sum(nvl(ftd_stamp_duty,0))      /* Ver 1.6 */
                  FROM  ftd_fo_trd_dtls,UAC_USR_ACCNTS
                  WHERE  ftd_clm_mtch_accnt  =	UAC_CLM_MTCH_ACCNT
                  AND  UAC_USR_ID = :c_user_id
                  AND  ftd_xchng_cd       LIKE :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
                  /*AND  ftd_prdct_typ      = :c_product_typ*/
									AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/			
                  AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                  AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                 AND  ftd_trd_flw     LIKE :c_trade_flw
             GROUP BY ftd_xchng_cd,  /** Ver 2.1 **/
	              			ftd_clm_mtch_accnt,    /** Ver 2.0 **/
				              ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc

              UNION ALL

              SELECT
	             			  ftd_xchng_cd, /** Added in Ver 2.1 **/
					  					ftd_clm_mtch_accnt,  /** Ver 2.0  **/
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)), /*** Ver 1.1 adds nvl ***/
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),            /* Ver 1.6 */
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),         /* Ver 1.6 */			/** Ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),        /* Ver 1.6 */
                      sum(nvl(ftd_tran_chrg,0)),      /* Ver 1.6 */
                      sum(nvl(ftd_stamp_duty,0))      /* Ver 1.6 */
                FROM  ftd_fo_trd_dtls_hstry,UAC_USR_ACCNTS
                WHERE ftd_clm_mtch_accnt  = UAC_CLM_MTCH_ACCNT
                AND 	UAC_USR_ID = :c_user_id
                AND  ftd_xchng_cd       LIKE :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
                /*AND  ftd_prdct_typ      = :c_product_typ*/
								AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                AND  ftd_trd_flw     LIKE :c_trade_flw
             GROUP BY ftd_xchng_cd, /** Ver 2.1 **/
	     								ftd_clm_mtch_accnt,    /** Ver 2.0 **/
	              			ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc
                  ORDER BY ftd_ordr_rfrnc DESC;                  /**Ver 1.8**/
                END;
              END-EXEC;
						}

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after select FTD and FTD HSTRY NOT BPID case B spl_flg P   :%s:",c_time) ; 
	 }	
			 }
					 /*** Added for Ver 3.0 ***/
					 else if(strcmp(c_advisor_id, "NA") != 0)
					 {
  
  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before  select FTD and FTD HSTRY  Advisor case B spl_flg P   :%s:",c_time) ;
  }        
         /*** Ver 4.5 Starts ***/ 
             if (c_sys_order == 'S')             /*** if-else added in Ver 4.5  ***/
             {
              EXEC SQL  EXECUTE
              BEGIN
              OPEN    :sys_cursor FOR
                      SELECT
                      ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)),
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),
                      sum(nvl(ftd_sebi_tt,0)),
                      sum(nvl(ftd_tran_chrg,0)),
                      sum(nvl(ftd_stamp_duty,0))
                FROM  ftd_fo_trd_dtls,FOD_FO_ORDR_DTLS,ACM_ADV_CLNT_MAP  
                WHERE FOD_ORDR_RFRNC = ftd_ordr_rfrnc
                 AND  FOD_CLM_MTCH_ACCNT = ACM_MTCH_ACCNT               
                 AND  FOD_CHANNEL        = 'SYS'                       
                 AND  ACM_ACTV_FLG       = 'A'                        
                 AND  ACM_ADVISOR_ID     = :c_advisor_id             
                 AND  ftd_xchng_cd       LIKE :c_exchange_cd
                 /*AND  ftd_prdct_typ       = :c_product_typ*/
								 AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                 AND  trunc(ftd_trd_dt)   >= to_date(:c_frm_dt,'dd-mon-yyyy')
                 AND  trunc(ftd_trd_dt)   <= to_date(:c_to_dt,'dd-mon-yyyy')
                 AND  ftd_trd_flw     LIKE :c_trade_flw
                GROUP BY ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc
               UNION ALL
               SELECT
                      ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)),
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),
                      sum(nvl(ftd_sebi_tt,0)),
                      sum(nvl(ftd_tran_chrg,0)),
                      sum(nvl(ftd_stamp_duty,0))
                FROM  ftd_fo_trd_dtls_hstry,FOD_FO_ORDR_DTLS_HSTRY, ACM_ADV_CLNT_MAP   
                WHERE  FOD_ORDR_RFRNC = ftd_ordr_rfrnc
                AND    FOD_CLM_MTCH_ACCNT = ACM_MTCH_ACCNT           
                AND    FOD_CHANNEL        = 'SYS'                   
                AND    ACM_ACTV_FLG       = 'A'                    
                AND    ACM_ADVISOR_ID     = :c_advisor_id         
                AND    ftd_xchng_cd       LIKE :c_exchange_cd
                /*AND    ftd_prdct_typ      = :c_product_typ*/
								AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                AND    trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                AND    trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                AND    ftd_trd_flw     LIKE :c_trade_flw
              GROUP BY ftd_xchng_cd,
                       ftd_clm_mtch_accnt,
                       ftd_ordr_rfrnc,
                       ftd_trd_flw,
                       ftd_undrlyng,
                       ftd_indstk,
                       trunc(ftd_trd_dt),
                       ftd_expry_dt,
                       ftd_prdct_typ,
                       ftd_opt_typ,
                       ftd_exer_typ,
                       ftd_strk_prc
            ORDER BY 2,7,5,3;
            END;
            END-EXEC;
                                
            } 
             else  /*** Ver 4.5 Ends ***/
             {    
             EXEC SQL  EXECUTE
              BEGIN
               OPEN  :sys_cursor FOR
                    SELECT
                      ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)),
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),		/** Ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),
                      sum(nvl(ftd_tran_chrg,0)),
                      sum(nvl(ftd_stamp_duty,0))
                FROM  ftd_fo_trd_dtls,FOD_FO_ORDR_DTLS, CNT_CSE_MAST
                WHERE  FOD_ORDR_RFRNC = ftd_ordr_rfrnc
                 AND FOD_CSE_ID = CCM_CSE_ID
                 AND CCM_LOGIN_NAME = :c_advisor_id
		 						 AND  ftd_xchng_cd       LIKE :c_exchange_cd
                 /*AND  ftd_prdct_typ      = :c_product_typ*/
								 AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/	
                 AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                 AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                 AND  ftd_trd_flw     LIKE :c_trade_flw
             		GROUP BY ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc
               UNION ALL
               SELECT
                      ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)),
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),			/** ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),
                      sum(nvl(ftd_tran_chrg,0)),
                      sum(nvl(ftd_stamp_duty,0))
                FROM  ftd_fo_trd_dtls_hstry,FOD_FO_ORDR_DTLS_HSTRY, CNT_CSE_MAST
                WHERE  FOD_ORDR_RFRNC = ftd_ordr_rfrnc
                AND FOD_CSE_ID = CCM_CSE_ID
                AND CCM_LOGIN_NAME = :c_advisor_id
								AND  ftd_xchng_cd       LIKE :c_exchange_cd 
                /* AND  ftd_prdct_typ      = :c_product_typ*/
								 AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                 AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                 AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                 AND  ftd_trd_flw     LIKE :c_trade_flw
             	GROUP BY ftd_xchng_cd,
                      ftd_clm_mtch_accnt,
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      ftd_expry_dt,
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc
						ORDER BY 2,7,5,3;
            END;
          	END-EXEC;
					 }
         }
  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();  
   fn_userlog(c_ServiceName,"  - TIME_STATS After select FTD and FTD HSTRY  Advisor case B spl_flg P   :%s:",c_time); 
  }
					 /*** End for Ver 3.0 ***/
					}
					else
					{

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS before  select FTD and FTD HSTRY Normal user case B spl_flg P   :%s:",c_time) ;  
  }
              EXEC SQL  EXECUTE
                BEGIN
                OPEN  :sys_cursor FOR
                  SELECT
		     							ftd_xchng_cd, /** Added for Ver 2.1 **/
											ftd_clm_mtch_accnt,  /** Ver 2.0  **/
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)), /*** Ver 1.1 adds nvl ***/
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),           /* Ver 1.6 */
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),        /* Ver 1.6 */			/*** Ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),        /* Ver 1.6 */
                      sum(nvl(ftd_tran_chrg,0)),      /* Ver 1.6 */
                      sum(nvl(ftd_stamp_duty,0))      /* Ver 1.6 */
                  FROM  ftd_fo_trd_dtls
               		WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no    
                  AND  ftd_xchng_cd       LIKE :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
                  /*AND  ftd_prdct_typ      = :c_product_typ*/
									AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                  AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                  AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                 AND  ftd_trd_flw     LIKE :c_trade_flw
             GROUP BY ftd_xchng_cd, /** Ver 2.1 **/
	     								ftd_clm_mtch_accnt,    /** Ver 2.0 **/
	             			  ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc

              UNION ALL

     					SELECT
		      					  ftd_xchng_cd, /** Ver 2.1 **/
							  			ftd_clm_mtch_accnt,  /** Ver 2.0  **/
                      ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ltrim(rtrim(ftd_undrlyng)),
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc,
                      sum(ftd_exctd_qty),
                      sum(nvl(ftd_brkg,0)), /*** Ver 1.1 adds nvl ***/
                      sum(ftd_exctd_rt * ftd_exctd_qty),
                      sum(nvl(ftd_stt,0)),            /* Ver 1.6 */
                      sum(nvl(ftd_src_tx,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),         /* Ver 1.6 */			/*** Ver 4.1 **/
                      sum(nvl(ftd_sebi_tt,0)),        /* Ver 1.6 */
                      sum(nvl(ftd_tran_chrg,0)),      /* Ver 1.6 */
                      sum(nvl(ftd_stamp_duty,0))      /* Ver 1.6 */
                FROM  ftd_fo_trd_dtls_hstry
                WHERE  ftd_clm_mtch_accnt = :c_mtch_accnt_no   
                 AND  ftd_xchng_cd       LIKE :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
                 /*AND  ftd_prdct_typ      = :c_product_typ*/
								 AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
                 AND  trunc(ftd_trd_dt)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                 AND  trunc(ftd_trd_dt)  <= to_date(:c_to_dt,'dd-mon-yyyy')
                 AND  ftd_trd_flw     LIKE :c_trade_flw
             GROUP BY ftd_xchng_cd, /** Ver 2.1 **/
	     								ftd_clm_mtch_accnt,    /** Ver 2.0 **/
	              			ftd_ordr_rfrnc,
                      ftd_trd_flw,
                      ftd_undrlyng,
                      ftd_indstk,
                      trunc(ftd_trd_dt),
                      trunc(ftd_expry_dt),
                      ftd_prdct_typ,
                      ftd_opt_typ,
                      ftd_exer_typ,
                      ftd_strk_prc
                  ORDER BY ftd_ordr_rfrnc DESC;                  /**Ver 1.8**/
                END;
              END-EXEC;
					
					}

  if (DEBUG_MSG_LVL_2)
  { 
   fn_gettime();   
   fn_userlog(c_ServiceName,"  - TIME_STATS after  select FTD and FTD HSTRY Normal user  case B spl_flg P   :%s:",c_time) ;
  }
         break ;

      default:

      fn_userlog(c_ServiceName," Inside default for History ");

      strcpy ( c_errmsg, "Invalid operation type" );
      fn_userlog( c_ServiceName,"Invalid operation type" );
      EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
      EXEC SQL FREE :sys_cursor;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      break;

      }

  }

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31135", SQLMSG, c_errmsg  );
    EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
    EXEC SQL FREE :sys_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpcommit(0);      /***  Ver 1.9 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

 /*** Commented in Ver 4.4 and same moved after calculating buffer length *** 
  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN	*	i_rec_cnt );			***	Ver	1.9	***

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31140", FMLMSG, c_errmsg  );
    EXEC SQL CLOSE :sys_cursor;
    EXEC SQL FREE :sys_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpcommit(0);      ***  Ver 1.9 ***
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
 *********Commented end for Ver 4.4 **/ 

  /*** Ver 4.2 Starts ***/

  i_buffer_len =  sizeof(c_unlying ) +
                  sizeof(c_ordr_rfrnc ) +
                  sizeof(c_prd_typ ) +
                  sizeof(c_exp_date.arr ) +
                  sizeof(c_exrc_typ ) +
                  sizeof(c_opt_typ ) +
                  sizeof(l_strk_prc ) +
                  sizeof(l_exctd_qty ) +
                  sizeof(c_indstk ) +
                  sizeof(c_trd_date.arr ) +
                  sizeof(l_brkg_val ) +
                  sizeof(c_trade_flow ) +
                  sizeof(d_value ) +
                  sizeof(l_stt ) +
                  sizeof(l_srv_tax ) +
                  sizeof(l_stmp_duty ) +
                  sizeof(l_sebi_tt ) +
                  sizeof(l_tran_chrg ) +
                  sizeof(l_incl_all ) +
                  sizeof(c_xchng_cd ) +
                  sizeof(c_mtch_accnt_no ) + 512;

  /*** Ver 4.2 Ends ***/

  /*** Ver 4.4 Starts ***/

  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, i_buffer_len * 5 );      

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31145", FMLMSG, c_errmsg  );
    EXEC SQL CLOSE :sys_cursor;
    EXEC SQL FREE :sys_cursor;
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpcommit(0);      /***  Ver 1.9 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Ver 4.4 Ends ***/

	if( DEBUG_MSG_LVL_5)
	{
  	fn_userlog(c_ServiceName," Before Fetch ");
	}

  counter = 1;

	strcpy(c_prev_trd_date.arr,"NA");			/***	Ver 3.9	***/

  for( ; ; )
  {
		if( DEBUG_MSG_LVL_5)
		{
    	fn_userlog(c_ServiceName," Value of counter is [%d] ",counter);
		}

    SETLEN(c_exp_date);
    SETLEN(c_trd_date);

    if(DEBUG_MSG_LVL_2)
    {
     fn_gettime();  
     fn_userlog(c_ServiceName,"  - TIME_STATS before Fetch FTD and FTD HSTRY  spl_flg P   :%s:",c_time);  
    }

    EXEC SQL FETCH :sys_cursor
             INTO  :c_xchng_cd,    /** Ver 2.1 **/
		   							:c_mtch_accnt_no,   /** Ver 2.0  **/
	           			 :c_ordr_rfrnc,
                   :c_trade_flow,
              		 :c_unlying,
                   :c_indstk,
                   :c_trd_date,
                   :c_exp_date,
                   :c_prd_typ,
                   :c_opt_typ,
                   :c_exrc_typ,
                   :l_strk_prc,
                   :l_exctd_qty,
                   :l_brkg_val,
                   :d_value,    /* 1.2 */
									 :l_stt,	    /**1.6**/
									 :l_srv_tax,	/**1.6**/
							     :l_sebi_tt,	/**1.6**/
									 :l_tran_chrg,/**1.6**/
									 :l_stmp_duty;/**1.6**/ 

    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        fn_userlog(c_ServiceName," Inside NO DATA FOUND ");
        break;
      }
      else
      {
        fn_errlog( c_ServiceName, "S31150", SQLMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpcommit(0);      /***  Ver 1.9 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    if (DEBUG_MSG_LVL_2)
    {
     fn_gettime(); 
     fn_userlog(c_ServiceName,"  - TIME_STATS after Fetch FTD and FTD HSTRY  spl_flg P   :%s:",c_time) ; 
    }

    SETNULL(c_exp_date);
    SETNULL(c_trd_date);

		/** Ver 1.6**/
	 	l_incl_all = l_brkg_val+ l_stt + l_srv_tax  +l_sebi_tt + l_tran_chrg + l_stmp_duty; 

    /***** Ver 4.6 Starts Here ****/

    if(c_apisrc_flg == 'A')
     {
			d_ltp = 0.0;
			l_ltp = 0;
		
     EXEC SQL
        SELECT  FTQ_LST_TRD_PRC
        INTO    :d_ltp
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
        AND                     FTQ_PRDCT_TYP = decode(:c_prd_typ,'P','F','U','F','I','O',:c_prd_typ)
        AND     FTQ_UNDRLYNG  = :c_unlying
        AND     FTQ_EXPRY_DT  = :c_exp_date
        AND     FTQ_EXER_TYP  = :c_exrc_typ
        AND     FTQ_OPT_TYP   = :c_opt_typ
        AND     FTQ_STRK_PRC  = :l_strk_prc ;

      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S31155", SQLMSG, c_errmsg  );
				EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
				tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpcommit(0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }


      d_ltp = d_ltp / 100;
      l_ltp = d_ltp * 100;

    } 
     /*** Ver 4.6 Ends Here ***/

		if( DEBUG_MSG_LVL_5)
		{
     	fn_userlog(c_ServiceName,"Value of c_xchng_cd is     [%s]",c_xchng_cd);  /** Ver 2.1 **/
     	fn_userlog(c_ServiceName,"Value of c_mtch_accnt_no is   [%s]",c_mtch_accnt_no);  /** Ver 2.0 **/
     	fn_userlog(c_ServiceName,"Value of c_ordr_rfrnc is   [%s]",c_ordr_rfrnc);
     	fn_userlog(c_ServiceName,"Value of c_trade_flow is   [%c] ",c_trade_flow);
     	fn_userlog(c_ServiceName,"Value of c_unlying is      [%s] ",c_unlying);
     	fn_userlog(c_ServiceName,"Value of c_indstk is       [%s] ",c_indstk);
     	fn_userlog(c_ServiceName,"Value of c_trd_date is     [%s] ",c_trd_date.arr);
     	fn_userlog(c_ServiceName,"Value of c_exp_date is     [%s] ",c_exp_date.arr);
     	fn_userlog(c_ServiceName,"Value of c_prd_typ is      [%c] ",c_prd_typ);
     	fn_userlog(c_ServiceName,"Value of c_opt_typ is      [%c] ",c_opt_typ);
     	fn_userlog(c_ServiceName,"Value of c_exrc_typ is     [%c] ",c_exrc_typ);
     	fn_userlog(c_ServiceName,"Value of l_strk_prc is     [%ld] ",l_strk_prc);
     	fn_userlog(c_ServiceName,"Value of l_exctd_qty is    [%ld] ",l_exctd_qty);
     	fn_userlog(c_ServiceName,"Value of l_brkg_val is     [%ld] ",l_brkg_val);
     	fn_userlog(c_ServiceName,"Value of d_value is        [%lf] ",d_value); /* 1.2 */
     	fn_userlog(c_ServiceName,"Value of l_stt is        [%ld] ",l_stt); /* 1.2 */
     	fn_userlog(c_ServiceName,"Value of l_srv_tax is        [%ld] ",l_srv_tax); /* 1.2 */
     	fn_userlog(c_ServiceName,"Value of l_stmp_duty is        [%ld] ",l_stmp_duty); /* 1.2 */
     	fn_userlog(c_ServiceName,"Value of l_sebi_tt is        [%ld] ",l_sebi_tt); /* 1.2 */
     	fn_userlog(c_ServiceName,"Value of l_tran_chrg is        [%ld] ",l_tran_chrg); /* 1.2 */
     	fn_userlog(c_ServiceName,"Value of l_incl_all is        [%ld] ",l_incl_all); /* 1.2 */
      fn_userlog(c_ServiceName,"Value of l_ltp                [%ld] ",l_ltp); /** Ver 4.6 **/
		}
			
		 /****************************************************************************************/	
 		    													/*****    Ver 2.0 Starts  ***/
     /*****************************************************************************************/


		if( DEBUG_MSG_LVL_5)
		{
    	fn_userlog(c_ServiceName," Before Fadd32 ");
		}

    i_err[0] = Fadd32(ptr_fml_Obuf,FFO_UNDRLYNG,(char *)c_unlying,0) ;
    i_err[1] = Fadd32(ptr_fml_Obuf,FFO_ORDR_RFRNC,(char *)c_ordr_rfrnc,0) ;
		i_err[2] = Fadd32(ptr_fml_Obuf,FFO_PRDCT_TYP,(char *)&c_prd_typ,0) ;
    i_err[3] = Fadd32(ptr_fml_Obuf,FFO_EXPRY_DT,(char *)c_exp_date.arr,0) ;
    i_err[4] = Fadd32(ptr_fml_Obuf,FFO_EXER_TYP,(char *)&c_exrc_typ,0) ;
    i_err[5] = Fadd32(ptr_fml_Obuf,FFO_OPT_TYP,(char *)&c_opt_typ,0) ;
    i_err[6] = Fadd32(ptr_fml_Obuf,FFO_STRK_PRC,(char *)&l_strk_prc,0) ;
    i_err[7] = Fadd32(ptr_fml_Obuf,FFO_EXEC_QTY,(char *)&l_exctd_qty,0) ;
    /*i_err[8] = Fadd32(ptr_fml_Obuf,FFO_INSTRMNT_TYP,(char *)&c_indstk,0) ;*/				/*1.5*/
    i_err[8] = Fadd32(ptr_fml_Obuf,FFO_INSTRMNT_TYP,(char *)c_indstk,0) ;			      	/*1.5*/
    i_err[9] = Fadd32(ptr_fml_Obuf,FFO_TRD_DT,(char *)c_trd_date.arr,0) ;
    i_err[10] = Fadd32(ptr_fml_Obuf,FFO_BRKRG_VL,(char *)&l_brkg_val,0) ;
    i_err[11] = Fadd32(ptr_fml_Obuf,FFO_TRD_FLW,(char *)&c_trade_flow,0) ;
    i_err[12] = Fadd32(ptr_fml_Obuf,FFO_AMOUNT,(char *)&d_value,0) ; /* 1.2 */
		
		i_err[13] = Fadd32(ptr_fml_Obuf,FFO_RTN_STTS,(char *)&l_stt,0);             /** Ver 1.6**/
    i_err[14] = Fadd32(ptr_fml_Obuf,FFO_LOW_PRC,(char *)&l_srv_tax,0) ;				  /** Ver 1.6 **/
    i_err[15] = Fadd32(ptr_fml_Obuf,FFO_STLMNT_PRC,(char *)&l_stmp_duty,0) ;	  /** Ver 1.6 **/
    i_err[16] = Fadd32(ptr_fml_Obuf,FFO_AVRG_TRD_PRC,(char *)&l_sebi_tt,0) ;		/** Ver 1.6 **/
    i_err[17] = Fadd32(ptr_fml_Obuf,FFO_HGH_INDX_VAL,(char *)&l_tran_chrg,0) ;	/** Ver 1.6 **/
    i_err[18] = Fadd32(ptr_fml_Obuf,FFO_FRS_BRKG,(char *)&l_incl_all,0) ;		  	/** Ver 1.6 **/
    i_err[19] = Fadd32(ptr_fml_Obuf,FFO_XCHNG_CD,(char *)c_xchng_cd,0) ;		  	/** Ver 2.1 **/
    i_err[20] = Fadd32(ptr_fml_Obuf,FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no,0);/** Ver 3.0 **/
    i_err[21] = Fadd32(ptr_fml_Obuf,FFO_LST_TRD_PRC,(char *)&l_ltp,0) ;   /** Ver 4.6 **/

      /*for(i=0;i<=12;i++)*/
    /* for(i=0;i<=18;i++)  */											/** Ver 1.6**/
    for(i=0;i<=21;i++)  /** Ver 2.1 - Increased counter from 18 to 19 **//** Changed from 19 to 20 for ver 3.0 ***//** Changed from 20 to 21 for ver 4.6 **/
    {
        if(i_err[i] == -1)
        {
          fn_userlog(c_ServiceName,"Error in Fadd for i [%d]",i);
          fn_errlog( c_ServiceName, "S31160", FMLMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
          EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      		tpcommit(0);      /***  Ver 1.9 ***/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
    }
     
			/*** Ver 3.3 New FL Addition Ends ***/
   
		if(Fneeded32(1,i_buffer_len) > Funused32(ptr_fml_Obuf))/**Check added in Ver 4.2 as memory was reallocated after every record fetched ***/
		{   
    	counter ++;

      /*** Commented in Ver 4.4 ***
      ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
                                      counter * MIN_FML_BUF_LEN );  
      ***/
      ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf, Fsizeof32(ptr_fml_Obuf) + 
                                                                counter * i_buffer_len * 5 ); /* Ver 4.4 */
     
      if ( ptr_fml_Obuf == NULL )
      {
        fn_errlog( c_ServiceName, "S31165", TPMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpcommit(0);      /***  Ver 1.9 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
  	}

    } /* For loop */

  }/******* End of flag used to display second page ***********/

	/***	Ver	1.9	Strats	***/

	if ( c_spl_flg == 'A' )	
	{
		if( DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Inside 'A' Silver Light Trade Book .");
		}

		if(i_hist_flg == 0)
    {
			if( DEBUG_MSG_LVL_3)
			{
   			fn_userlog(c_ServiceName,"Inside i_hist_flg = 0");
			}

			if( strcmp(c_mtch_accnt_no, "*" ) == 0 )
			{
		  	if( c_user_id[0] == BPID )
				{
		 			EXEC SQL  EXECUTE
  					BEGIN
   					OPEN  	:sys_cursor FOR
     					SELECT	
					  /***    FTD_XCHNG_CD    Added for Ver 2.1 ** Commented in Ver 2.6 **Comma(,) was missing */
								FTD_XCHNG_CD,       /*** Ver 2.6 ***/
					      FTD_CLM_MTCH_ACCNT,     /** Ver 2.0 **/
					      FTD_ORDR_RFRNC,
          	 		FTD_TRD_FLW,
           			LTRIM(RTRIM(FTD_UNDRLYNG)),
           			FTD_INDSTK,
           			TRUNC(FTD_TRD_DT),
   	        		TRUNC(FTD_EXPRY_DT),
            		FTD_PRDCT_TYP,
    	       		FTD_OPT_TYP,
      	     		FTD_EXER_TYP,
        	   		FTD_STRK_PRC,
          	 		SUM(FTD_EXCTD_QTY),
           			SUM(NVL(FTD_BRKG,0)), 
           			SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
           			SUM(NVL(FTD_STT,0)),     
  	         		SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)), 							/** Ver 4.1 **/	
            		SUM(NVL(FTD_SEBI_TT,0)), 
    	       		SUM(NVL(FTD_TRAN_CHRG,0)),
        	   		SUM(NVL(FTD_STAMP_DUTY,0)),
								FTD_CNTRCTNT_NMBR 
     		FROM 		FTD_FO_TRD_DTLS,CLM_CLNT_MSTR
        WHERE 	CLM_BP_ID	=	:c_user_id
				AND			FTD_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
     		AND  		FTD_XCHNG_CD       LIKE :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
      	AND  		TRUNC(FTD_TRD_DT)  = :c_to_dt
  /**     AND     FTD_PRDCT_TYP <> 'U'    Commented in version 2.7 **/ /*** Ver 2.4 ***/
/**        AND     FTD_PRDCT_TYP NOT IN ( 'U','I' )  * ver 2.7 to exclude SLTP F+ and Option+ orders ** Comented in Ver 2.8  **/
				AND     FTD_PRDCT_TYP IN ( 'F','P','O','U','I')     /** Ver 2.8 **/  /*** 'I' Added in Ver 3.1 ***/
    		GROUP BY	FTD_XCHNG_CD,  /** Ver 2.1 **/
		 							FTD_CLM_MTCH_ACCNT,    /** Ver 2.0 **/ 
								  FTD_ORDR_RFRNC,
         	  			FTD_TRD_FLW,
           	 			FTD_UNDRLYNG,
           				FTD_INDSTK,
           				TRUNC(FTD_TRD_DT),
           				TRUNC(FTD_EXPRY_DT),
           				FTD_PRDCT_TYP,
           				FTD_OPT_TYP,
           				FTD_EXER_TYP,
           				FTD_STRK_PRC,
									FTD_CNTRCTNT_NMBR
			 ORDER BY FTD_ORDR_RFRNC DESC; /** Ver 2.5 **/

			END;
   	END-EXEC;
				}
				else
				{
					EXEC SQL  EXECUTE
            BEGIN
            OPEN    :sys_cursor FOR
              SELECT  FTD_XCHNG_CD, /** Added for Ver 2.1 **/
	      				FTD_CLM_MTCH_ACCNT,     /** Ver 2.0 **/
		      			FTD_ORDR_RFRNC,
                FTD_TRD_FLW,
                LTRIM(RTRIM(FTD_UNDRLYNG)),
                FTD_INDSTK,
                TRUNC(FTD_TRD_DT),
                TRUNC(FTD_EXPRY_DT),
                FTD_PRDCT_TYP,
                FTD_OPT_TYP,
                FTD_EXER_TYP,
                FTD_STRK_PRC,
                SUM(FTD_EXCTD_QTY),
                SUM(NVL(FTD_BRKG,0)),
                SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
                SUM(NVL(FTD_STT,0)),
                SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),							/** ver 4.1 **/
                SUM(NVL(FTD_SEBI_TT,0)),
                SUM(NVL(FTD_TRAN_CHRG,0)),
                SUM(NVL(FTD_STAMP_DUTY,0)),
                FTD_CNTRCTNT_NMBR
        FROM    FTD_FO_TRD_DTLS,UAC_USR_ACCNTS
        WHERE   UAC_USR_ID	= :c_user_id
        AND     FTD_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
        AND     FTD_XCHNG_CD       LIKE  :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
        AND     TRUNC(FTD_TRD_DT)  = :c_to_dt
  /**     AND     FTD_PRDCT_TYP <> 'U' Commented in version 2.7 **/   /*** Ver 2.4 ***/
/**        AND     FTD_PRDCT_TYP NOT IN ( 'U','I' )  * ver 2.7 to exclude SLTP F+ and Option+ orders ** Comented in Ver 2.8 **/
				AND     FTD_PRDCT_TYP IN ( 'F','P','O','U','I')     /** Ver 2.8 **/  /*** 'I' Added in Ver 3.1 ***/ 
        GROUP BY  FTD_XCHNG_CD, /** Ver 2.1 **/
	 								FTD_CLM_MTCH_ACCNT,     /** Ver 2.0 **/
		  						FTD_ORDR_RFRNC,
                  FTD_TRD_FLW,
                  FTD_UNDRLYNG,
                  FTD_INDSTK,
                  TRUNC(FTD_TRD_DT),
                  TRUNC(FTD_EXPRY_DT),
                  FTD_PRDCT_TYP,
                  FTD_OPT_TYP,
                  FTD_EXER_TYP,
                  FTD_STRK_PRC,
                  FTD_CNTRCTNT_NMBR
				ORDER BY FTD_ORDR_RFRNC DESC; /** Ver 2.5 **/ 
      END;
    END-EXEC;
				}
			}
			else
			{
     		EXEC SQL  EXECUTE
            BEGIN
            OPEN    :sys_cursor FOR
              SELECT  FTD_XCHNG_CD, /** Added for Ver 2.1 **/
	        			FTD_CLM_MTCH_ACCNT,     /** Ver 2.0 **/
					      FTD_ORDR_RFRNC,
                FTD_TRD_FLW,
                LTRIM(RTRIM(FTD_UNDRLYNG)),
                FTD_INDSTK,
                TRUNC(FTD_TRD_DT),
                TRUNC(FTD_EXPRY_DT),
                FTD_PRDCT_TYP,
                FTD_OPT_TYP,
                FTD_EXER_TYP,
                FTD_STRK_PRC,
                SUM(FTD_EXCTD_QTY),
                SUM(NVL(FTD_BRKG,0)),
                SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
                SUM(NVL(FTD_STT,0)),
                SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),						/** Ver 4.1 **/
                SUM(NVL(FTD_SEBI_TT,0)),
                SUM(NVL(FTD_TRAN_CHRG,0)),
                SUM(NVL(FTD_STAMP_DUTY,0)),
                FTD_CNTRCTNT_NMBR
        FROM    FTD_FO_TRD_DTLS
        WHERE   FTD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
        AND     FTD_XCHNG_CD       LIKE  :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
        AND     TRUNC(FTD_TRD_DT)  = :c_to_dt
 /**     AND     FTD_PRDCT_TYP <> 'U' Commented in version 2.7 **/   /*** Ver 2.4 ***/
/**        AND     FTD_PRDCT_TYP NOT IN ( 'U','I' )  ** ver 2.7 to exclude SLTP F+ and Option+ orders ** Comen
ted in Ver 2.8 **/
				 AND     FTD_PRDCT_TYP IN ( 'F','P','O','U','I')     /** Ver 2.8 **/   /*** 'I' Added in Ver 3.1 ***/
	       GROUP BY  FTD_XCHNG_CD,  /** Ver 2.1 **/
	          			FTD_CLM_MTCH_ACCNT,     /** Ver 2.0 **/
	     				    FTD_ORDR_RFRNC,
                  FTD_TRD_FLW,
                  FTD_UNDRLYNG,
                  FTD_INDSTK,
                  TRUNC(FTD_TRD_DT),
                  TRUNC(FTD_EXPRY_DT),
                  FTD_PRDCT_TYP,
                  FTD_OPT_TYP,
                  FTD_EXER_TYP,
                  FTD_STRK_PRC,
                  FTD_CNTRCTNT_NMBR
				ORDER BY FTD_ORDR_RFRNC DESC; /** Ver 2.5 **/

      END;
    END-EXEC;

			}

		}
		else
		{
			if( DEBUG_MSG_LVL_3)
			{
		 		fn_userlog(c_ServiceName,"Inside i_hist_flg != 0");
			}

  		if( strcmp(c_mtch_accnt_no, "*" ) == 0 )
			{
				if( c_user_id[0] == BPID )
				{
					EXEC SQL  EXECUTE
        		BEGIN
          		OPEN  :sys_cursor FOR
            		SELECT	FTD_XCHNG_CD, /** Added for Ver 2.1 **/
										FTD_CLM_MTCH_ACCNT,     /** Ver 2.0 **/
									  FTD_ORDR_RFRNC,
                    FTD_TRD_FLW,
                    LTRIM(RTRIM(FTD_UNDRLYNG)),
                    FTD_INDSTK,
                    TRUNC(FTD_TRD_DT),
                    TRUNC(FTD_EXPRY_DT),
                    FTD_PRDCT_TYP,
                    FTD_OPT_TYP,
                    FTD_EXER_TYP,
                    FTD_STRK_PRC,
                    SUM(FTD_EXCTD_QTY),
                    SUM(NVL(FTD_BRKG,0)), 
                    SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
                    SUM(NVL(FTD_STT,0)),      
                    SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),  						/** Ver 4.1 ***/
                    SUM(NVL(FTD_SEBI_TT,0)),
                    SUM(NVL(FTD_TRAN_CHRG,0)), 
                    SUM(NVL(FTD_STAMP_DUTY,0)),
										FTD_CNTRCTNT_NMBR 
              FROM  FTD_FO_TRD_DTLS,CLM_CLNT_MSTR
        			WHERE	CLM_BP_ID	=	:c_user_id
							AND	 FTD_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
              AND  FTD_XCHNG_CD       LIKE :c_exchange_cd /** Changed to LIKE for Ver 2.1 **/
              AND  TRUNC(FTD_TRD_DT)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
              AND  TRUNC(FTD_TRD_DT)  <= to_date(:c_to_dt,'dd-mon-yyyy')
 /**     AND     FTD_PRDCT_TYP <> 'U' Commented in version 2.7 **/   /*** Ver 2.4 ***/
/**        AND     FTD_PRDCT_TYP NOT IN ( 'U','I' )  ** ver 2.7 to exclude SLTP F+ and Option+ orders ** Comented in Ver 2.8 **/
							AND     FTD_PRDCT_TYP IN ( 'F','P','O','U','I')     /** Ver 2.8 **/  /*** 'I' Added in Ver 3.1 ***/
           		GROUP BY FTD_XCHNG_CD, /** Ver 2.1 **/
										FTD_CLM_MTCH_ACCNT,     /** Ver 2.0 **/
		    						FTD_ORDR_RFRNC,
                    FTD_TRD_FLW,
                    FTD_UNDRLYNG,
                    FTD_INDSTK,
                    TRUNC(FTD_TRD_DT),
                    TRUNC(FTD_EXPRY_DT),
                    FTD_PRDCT_TYP,
                    FTD_OPT_TYP,
                    FTD_EXER_TYP,
                    FTD_STRK_PRC,
										FTD_CNTRCTNT_NMBR

             UNION ALL
		
						 	SELECT	FTD_XCHNG_CD, /** Added in Ver 2.1 **/
							        FTD_CLM_MTCH_ACCNT,     /** Ver 2.0 **/
		      						FTD_ORDR_RFRNC,
                      FTD_TRD_FLW,
                      LTRIM(RTRIM(FTD_UNDRLYNG)),
                      FTD_INDSTK,
                      TRUNC(FTD_TRD_DT),
                      TRUNC(FTD_EXPRY_DT),
                      FTD_PRDCT_TYP,
                      FTD_OPT_TYP,
                      FTD_EXER_TYP,
                      FTD_STRK_PRC,
                      SUM(FTD_EXCTD_QTY),
                      SUM(NVL(FTD_BRKG,0)),
                      SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
                      SUM(NVL(FTD_STT,0)),    
                      SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)), 							/** Ver 4.1 **/
                      SUM(NVL(FTD_SEBI_TT,0)), 
                      SUM(NVL(FTD_TRAN_CHRG,0)), 
                      SUM(NVL(FTD_STAMP_DUTY,0)),
											FTD_CNTRCTNT_NMBR 
               FROM  	FTD_FO_TRD_DTLS_HSTRY,CLM_CLNT_MSTR
        			 WHERE	CLM_BP_ID	=	:c_user_id
							 AND	  FTD_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
               AND  	FTD_XCHNG_CD       LIKE :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
               AND  	TRUNC(FTD_TRD_DT)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                 AND  TRUNC(FTD_TRD_DT)  <= to_date(:c_to_dt,'dd-mon-yyyy')
 /**     AND     FTD_PRDCT_TYP <> 'U' Commented in version 2.7 **/   /*** Ver 2.4 ***/
/**    		 AND     FTD_PRDCT_TYP NOT IN ( 'U','I' )  ** ver 2.7 to exclude SLTP F+ and Option+ orders ** Comented in Ver 2.8 **/
						 AND     FTD_PRDCT_TYP IN ( 'F','P','O','U','I')     /** Ver 2.8 **/  /*** 'I' Added in Ver 3.1 ***/
             GROUP BY FTD_XCHNG_CD, /** Ver 2.1 **/
											FTD_CLM_MTCH_ACCNT,     /** Ver 2.0 **/	
		      					  FTD_ORDR_RFRNC,
                      FTD_TRD_FLW,
                      FTD_UNDRLYNG,
                      FTD_INDSTK,
                      TRUNC(FTD_TRD_DT),
                      TRUNC(FTD_EXPRY_DT),
                      FTD_PRDCT_TYP,
                      FTD_OPT_TYP,
                      FTD_EXER_TYP,
                      FTD_STRK_PRC,
											FTD_CNTRCTNT_NMBR
						ORDER BY FTD_ORDR_RFRNC DESC; /** Ver 2.5 **/ 
			    END;
   			END-EXEC;
			}
			else
			{
  			EXEC SQL  EXECUTE
            BEGIN
              OPEN  :sys_cursor FOR
                SELECT  FTD_XCHNG_CD, /** Added for Ver 2.1 **/
										FTD_CLM_MTCH_ACCNT,     /** Ver 2.0 **/
		    						FTD_ORDR_RFRNC,
                    FTD_TRD_FLW,
                    LTRIM(RTRIM(FTD_UNDRLYNG)),
                    FTD_INDSTK,
                    TRUNC(FTD_TRD_DT),
                    TRUNC(FTD_EXPRY_DT),
                    FTD_PRDCT_TYP,
                    FTD_OPT_TYP,
                    FTD_EXER_TYP,
                    FTD_STRK_PRC,
                    SUM(FTD_EXCTD_QTY),
                    SUM(NVL(FTD_BRKG,0)),
                    SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
                    SUM(NVL(FTD_STT,0)),
                    SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),							/** ver 4.1 **/
                    SUM(NVL(FTD_SEBI_TT,0)),
                    SUM(NVL(FTD_TRAN_CHRG,0)),
                    SUM(NVL(FTD_STAMP_DUTY,0)),
                    FTD_CNTRCTNT_NMBR
              FROM  FTD_FO_TRD_DTLS,UAC_USR_ACCNTS
              WHERE UAC_USR_ID	= :c_user_id
              AND  FTD_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
              AND  FTD_XCHNG_CD       LIKE :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
              AND  TRUNC(FTD_TRD_DT)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
              AND  TRUNC(FTD_TRD_DT)  <= to_date(:c_to_dt,'dd-mon-yyyy')
 /**     AND     FTD_PRDCT_TYP <> 'U' Commented in version 2.7 **/   /*** Ver 2.4 ***/
/**      	AND     FTD_PRDCT_TYP NOT IN ( 'U','I' )  ** ver 2.7 to exclude SLTP F+ and Option+ orders ** Comented in Ver 2.8 **/
							AND     FTD_PRDCT_TYP IN ( 'F','P','O','U','I')     /** Ver 2.8 **/  /*** 'I' Added in Ver 3.1 ***/
              GROUP BY  FTD_XCHNG_CD, /** Ver 2.1 **/
	     						  FTD_CLM_MTCH_ACCNT,     /** Ver 2.0 **/
	            			FTD_ORDR_RFRNC,
                    FTD_TRD_FLW,
                    FTD_UNDRLYNG,
                    FTD_INDSTK,
                    TRUNC(FTD_TRD_DT),
                    TRUNC(FTD_EXPRY_DT),
                    FTD_PRDCT_TYP,
                    FTD_OPT_TYP,
                    FTD_EXER_TYP,
                    FTD_STRK_PRC,
                    FTD_CNTRCTNT_NMBR

             UNION ALL
    				 SELECT   FTD_XCHNG_CD, /** Added in Ver 2.1 **/
										  FTD_CLM_MTCH_ACCNT,     /** Ver 2.0 **/
								      FTD_ORDR_RFRNC,
                      FTD_TRD_FLW,
                      LTRIM(RTRIM(FTD_UNDRLYNG)),
                      FTD_INDSTK,
                      TRUNC(FTD_TRD_DT),
                      TRUNC(FTD_EXPRY_DT),
                      FTD_PRDCT_TYP,
                      FTD_OPT_TYP,
                      FTD_EXER_TYP,
                      FTD_STRK_PRC,
                      SUM(FTD_EXCTD_QTY),
                      SUM(NVL(FTD_BRKG,0)),
                      SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
                      SUM(NVL(FTD_STT,0)),
                      SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),							/** Ver 4.1 **/
                      SUM(NVL(FTD_SEBI_TT,0)),
                      SUM(NVL(FTD_TRAN_CHRG,0)),
                      SUM(NVL(FTD_STAMP_DUTY,0)),
                      FTD_CNTRCTNT_NMBR
               FROM   FTD_FO_TRD_DTLS_HSTRY,UAC_USR_ACCNTS
               WHERE  UAC_USR_ID	= :c_user_id
               AND    FTD_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
               AND  	FTD_XCHNG_CD       LIKE :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
               AND  	TRUNC(FTD_TRD_DT)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
               AND  	TRUNC(FTD_TRD_DT)  <= to_date(:c_to_dt,'dd-mon-yyyy')
 /**     AND     FTD_PRDCT_TYP <> 'U' Commented in version 2.7 **/   /*** Ver 2.4 ***/
/**    		 AND     FTD_PRDCT_TYP NOT IN ( 'U','I' )  ** ver 2.7 to exclude SLTP F+ and Option+ orders ** Comented in Ver 2.8 **/
						 AND     FTD_PRDCT_TYP IN ( 'F','P','O','U','I')     /** Ver 2.8 **/  /*** 'I' Added in Ver 3.1 ***/
             GROUP BY FTD_XCHNG_CD, /** Ver 2.1 **/
	     								FTD_CLM_MTCH_ACCNT,     /** Ver 2.0 **/
	            			  FTD_ORDR_RFRNC,
                      FTD_TRD_FLW,
                      FTD_UNDRLYNG,
                      FTD_INDSTK,
                      TRUNC(FTD_TRD_DT),
                      TRUNC(FTD_EXPRY_DT),
                      FTD_PRDCT_TYP,
                      FTD_OPT_TYP,
                      FTD_EXER_TYP,
                      FTD_STRK_PRC,
                      FTD_CNTRCTNT_NMBR
					  ORDER BY FTD_ORDR_RFRNC DESC; /** Ver 2.5 **/
 
          END;
        END-EXEC;
			}
		}
		else
		{
			EXEC SQL  EXECUTE
            BEGIN
              OPEN  :sys_cursor FOR
                SELECT  FTD_XCHNG_CD, /** Added in Ver 2.1 **/
										FTD_CLM_MTCH_ACCNT,     /** Ver 2.0 **/
		  						  FTD_ORDR_RFRNC,
                    FTD_TRD_FLW,
                    LTRIM(RTRIM(FTD_UNDRLYNG)),
                    FTD_INDSTK,
                    TRUNC(FTD_TRD_DT),
                    TRUNC(FTD_EXPRY_DT),
                    FTD_PRDCT_TYP,
                    FTD_OPT_TYP,
                    FTD_EXER_TYP,
                    FTD_STRK_PRC,
                    SUM(FTD_EXCTD_QTY),
                    SUM(NVL(FTD_BRKG,0)),
                    SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
                    SUM(NVL(FTD_STT,0)),
                    SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),				/*** Ver 4.1 **/
                    SUM(NVL(FTD_SEBI_TT,0)),
                    SUM(NVL(FTD_TRAN_CHRG,0)),
                    SUM(NVL(FTD_STAMP_DUTY,0)),
                    FTD_CNTRCTNT_NMBR
              FROM  FTD_FO_TRD_DTLS
              WHERE FTD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
              AND  FTD_XCHNG_CD       LIKE  :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
              AND  TRUNC(FTD_TRD_DT)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
              AND  TRUNC(FTD_TRD_DT)  <= to_date(:c_to_dt,'dd-mon-yyyy')
 /**     AND     FTD_PRDCT_TYP <> 'U' Commented in version 2.7 **/   /*** Ver 2.4 ***/
/**    		AND     FTD_PRDCT_TYP NOT IN ( 'U','I' )  ** ver 2.7 to exclude SLTP F+ and Option+ orders ** Comented in Ver 2.8 **/
							AND     FTD_PRDCT_TYP IN ( 'F','P','O','U','I')     /** Ver 2.8 **/  /*** 'I' Added in Ver 3.1 ***/
              GROUP BY FTD_XCHNG_CD, /** Ver 2.1  **/
	      						FTD_CLM_MTCH_ACCNT,     /** Ver 2.0 **/
	      			      FTD_ORDR_RFRNC,
                    FTD_TRD_FLW,
                    FTD_UNDRLYNG,
                    FTD_INDSTK,
                    TRUNC(FTD_TRD_DT),
                    TRUNC(FTD_EXPRY_DT),
                    FTD_PRDCT_TYP,
                    FTD_OPT_TYP,
                    FTD_EXER_TYP,
                    FTD_STRK_PRC,
                    FTD_CNTRCTNT_NMBR

             UNION ALL

    					SELECT  FTD_XCHNG_CD, /** Ver 2.1 **/
											FTD_CLM_MTCH_ACCNT,     /** Ver 2.0 **/
								      FTD_ORDR_RFRNC,
                      FTD_TRD_FLW,
                      LTRIM(RTRIM(FTD_UNDRLYNG)),
                      FTD_INDSTK,
                      TRUNC(FTD_TRD_DT),
                      TRUNC(FTD_EXPRY_DT),
                      FTD_PRDCT_TYP,
                      FTD_OPT_TYP,
  										FTD_EXER_TYP,
                      FTD_STRK_PRC,
                      SUM(FTD_EXCTD_QTY),
                      SUM(NVL(FTD_BRKG,0)),
                      SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
                      SUM(NVL(FTD_STT,0)),
                      SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),			/*** ver 4.1 **/
                      SUM(NVL(FTD_SEBI_TT,0)),
                      SUM(NVL(FTD_TRAN_CHRG,0)),
                      SUM(NVL(FTD_STAMP_DUTY,0)),
                      FTD_CNTRCTNT_NMBR
               FROM   FTD_FO_TRD_DTLS_HSTRY
               WHERE  FTD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
               AND  FTD_XCHNG_CD       LIKE :c_exchange_cd  /** Changed to LIKE for Ver 2.1 **/
               AND  TRUNC(FTD_TRD_DT)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                 AND  TRUNC(FTD_TRD_DT)  <= to_date(:c_to_dt,'dd-mon-yyyy')
 /**     AND     FTD_PRDCT_TYP <> 'U' Commented in version 2.7 **/   /*** Ver 2.4 ***/
/**  			 AND     FTD_PRDCT_TYP NOT IN ( 'U','I' )  ** ver 2.7 to exclude SLTP F+ and Option+ orders ** Comented in Ver 2.8 **/
						 AND     FTD_PRDCT_TYP IN ( 'F','P','O','U','I')     /** Ver 2.8 **/  /*** 'I' Added in Ver 3.1 ***/
             GROUP BY FTD_XCHNG_CD, /** Ver 2.1 **/
	    								FTD_CLM_MTCH_ACCNT,     /** Ver 2.0 **/
	            				FTD_ORDR_RFRNC,
                      FTD_TRD_FLW,
                      FTD_UNDRLYNG,
                      FTD_INDSTK,
                      TRUNC(FTD_TRD_DT),
                      TRUNC(FTD_EXPRY_DT),
                      FTD_PRDCT_TYP,
                      FTD_OPT_TYP,
                      FTD_EXER_TYP,
                      FTD_STRK_PRC,
                      FTD_CNTRCTNT_NMBR
					  ORDER BY FTD_ORDR_RFRNC DESC; /** Ver 2.5 **/
 
          END;
        END-EXEC;
		}

	}

	 if ( SQLCODE != 0 )
 		{
   		fn_errlog( c_ServiceName, "S31170", SQLMSG, c_errmsg  );
      EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
      EXEC SQL FREE :sys_cursor;
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
			tpcommit(0);      /***  Ver 1.9 ***/
   		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 		}

 		ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN	*	i_rec_cnt * 5 );/***	Ver	1.9	***/
 																																												/*** multiplied by 5 in Ver 4.4 ***/ 
 		if ( ptr_fml_Obuf == NULL )
 		{
   		fn_errlog( c_ServiceName, "S31175", FMLMSG, c_errmsg  );
   		EXEC SQL CLOSE :sys_cursor;
   		EXEC SQL FREE :sys_cursor;
   		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);      /***  Ver 1.9 ***/
   		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 		}
	
		if( DEBUG_MSG_LVL_5)
		{
 			fn_userlog(c_ServiceName," Before Fetch ");
		}

		counter = 1;

		for( ; ; )
		{
			if( DEBUG_MSG_LVL_5)
			{
				fn_userlog(c_ServiceName," Value of counter is [%d] ",counter);
			}

			SETLEN(c_exp_date);
			SETLEN(c_trd_date);

			 EXEC SQL FETCH :sys_cursor
          INTO	:c_xchng_cd,    /** Ver 2.1 **/ 
	        			:c_mtch_accnt_no,    /** Ver 2.0 **/
								:c_ordr_rfrnc,
                :c_trade_flow,
                :c_unlying,
                :c_indstk,
                :c_trd_date,
                :c_exp_date,
                :c_prd_typ,
                :c_opt_typ,
                :c_exrc_typ,
                :l_strk_prc,
                :l_exctd_qty,
                :l_brkg_val,
                :d_value,    
                :l_stt,     
                :l_srv_tax,
                :l_sebi_tt, 
                :l_tran_chrg,
                :l_stmp_duty,
								:c_cntrctnt_nmbr;

			if ( SQLCODE != 0 )
 			{
   			if ( SQLCODE == NO_DATA_FOUND )
   			{
     			fn_userlog(c_ServiceName," Inside NO DATA FOUND ");
     			break;
   			}
   			else
   			{
     			fn_errlog( c_ServiceName, "S31180", SQLMSG, c_errmsg  );
     			EXEC SQL CLOSE :sys_cursor;
     			EXEC SQL FREE :sys_cursor;
     			tpfree ( ( char * ) ptr_fml_Obuf );
     			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      		tpcommit(0);      /***  Ver 1.9 ***/
     			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   			}
 			}

 			SETNULL(c_exp_date);
 			SETNULL(c_trd_date);
		
			rtrim(c_unlying);

      /*** Commented in Ver 3.7 ***

      l_incl_all = l_brkg_val + l_stt + l_srv_tax  +l_sebi_tt + l_tran_chrg + l_stmp_duty;

      ***/

      l_incl_all = l_brkg_val;   /*** Ver 3.7 ***/
      l_sum_tax  = l_stt + l_srv_tax  +l_sebi_tt + l_tran_chrg + l_stmp_duty;   /*** Ver 3.7 ***/

			l_exctd_rt  = d_value / l_exctd_qty;

			if( DEBUG_MSG_LVL_5)
			{
				fn_userlog(c_ServiceName,"c_xchng_cd Is :%s:",c_xchng_cd);  /** Ver 2.1 **/ 
				fn_userlog(c_ServiceName,"c_prd_typ Is :%c:",c_prd_typ);
				fn_userlog(c_ServiceName,"c_unlying Is :%s:",c_unlying);
				fn_userlog(c_ServiceName,"c_exp_date Is :%s:",c_exp_date.arr);
				fn_userlog(c_ServiceName,"c_exrc_typ Is :%c:",c_exrc_typ);
				fn_userlog(c_ServiceName,"c_opt_typ Is :%c:",c_opt_typ);
				fn_userlog(c_ServiceName,"l_strk_prc Is :%d:",l_strk_prc);
			}


			EXEC SQL
				SELECT	FTQ_LST_TRD_PRC
				INTO		:d_ltp
				FROM		FTQ_FO_TRD_QT
				WHERE		FTQ_XCHNG_CD  = :c_xchng_cd  /** Added in Ver 2.1 **/ /** Need to check for ALL option **/
				/*** AND                     FTQ_PRDCT_TYP  = decode(:c_prd_typ,'P','F',:c_prd_typ) *** commented in Ver 2.8 ***/
        AND                     FTQ_PRDCT_TYP = decode(:c_prd_typ,'P','F','U','F',:c_prd_typ)   /*** Ver 2.8 ***/
				AND			FTQ_UNDRLYNG	=	:c_unlying
				AND			FTQ_EXPRY_DT	=	:c_exp_date
				AND			FTQ_EXER_TYP	=	:c_exrc_typ
				AND			FTQ_OPT_TYP		=	:c_opt_typ
				AND			FTQ_STRK_PRC	=	:l_strk_prc	;
		
			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    	{
      	fn_errlog( c_ServiceName, "S31185", SQLMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
        EXEC SQL FREE :sys_cursor;
        tpfree ( ( char * ) ptr_fml_Obuf ); /*** Ver 3.9 ***/
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpcommit(0);      /***  Ver 1.9 ***/
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}


			d_ltp = d_ltp / 100;
			l_ltp = d_ltp * 100;

			if( DEBUG_MSG_LVL_5)
			{
		  	fn_userlog(c_ServiceName,"Value of c_xchng_cd Is[%s]",c_xchng_cd);   /** Ver 2.1 **/
		  	fn_userlog(c_ServiceName,"Value of c_mtch_accnt_no Is[%s]",c_mtch_accnt_no);   /** Ver 2.0 **/
  			fn_userlog(c_ServiceName,"Value of c_ordr_rfrnc is   [%s]",c_ordr_rfrnc);
  			fn_userlog(c_ServiceName,"Value of c_trade_flow is   [%c] ",c_trade_flow);
  			fn_userlog(c_ServiceName,"Value of c_unlying is      [%s] ",c_unlying);
  			fn_userlog(c_ServiceName,"Value of c_indstk is       [%s] ",c_indstk);
  			fn_userlog(c_ServiceName,"Value of c_trd_date is     [%s] ",c_trd_date.arr);
  			fn_userlog(c_ServiceName,"Value of c_exp_date is     [%s] ",c_exp_date.arr);
  			fn_userlog(c_ServiceName,"Value of c_prd_typ is      [%c] ",c_prd_typ);
  			fn_userlog(c_ServiceName,"Value of c_opt_typ is      [%c] ",c_opt_typ);
  			fn_userlog(c_ServiceName,"Value of c_exrc_typ is     [%c] ",c_exrc_typ);
  			fn_userlog(c_ServiceName,"Value of l_strk_prc is     [%ld] ",l_strk_prc);
  			fn_userlog(c_ServiceName,"Value of l_exctd_qty is    [%ld] ",l_exctd_qty);
  			fn_userlog(c_ServiceName,"Value of l_brkg_val is     [%ld] ",l_brkg_val);
  			fn_userlog(c_ServiceName,"Value of d_value is        [%lf] ",d_value);
  			fn_userlog(c_ServiceName,"Value of l_stt is        [%ld] ",l_stt);
  			fn_userlog(c_ServiceName,"Value of l_srv_tax is        [%ld] ",l_srv_tax); 
  			fn_userlog(c_ServiceName,"Value of l_stmp_duty is        [%ld] ",l_stmp_duty); 
  			fn_userlog(c_ServiceName,"Value of l_sebi_tt is        [%ld] ",l_sebi_tt);
  			fn_userlog(c_ServiceName,"Value of l_tran_chrg is        [%ld] ",l_tran_chrg); 
 		 		fn_userlog(c_ServiceName,"Value of l_incl_all is        [%ld] ",l_incl_all); 
 		 		fn_userlog(c_ServiceName,"Value of Executed Rate is        [%ld] ",l_exctd_rt); 
 		 		fn_userlog(c_ServiceName,"Value of LTP is        [%ld] ",l_ltp); 							
				fn_userlog(c_ServiceName,"CONTRACT NO. Is :%s:",c_cntrctnt_nmbr);
        fn_userlog(c_ServiceName,"Value of l_sum_tax is [%ld] ",l_sum_tax);    /*** Ver 3.7 ***/
			}


      /*****    Ver 2.0 Starts  ***/

		  MEMSET(c_clm_fno_schm_code);
	   /**** Commented -Nitin Post UAT for old scheme display issue **/
	   /***************************************
		  EXEC SQL 
			  SELECT nvl(clm_brkr_cmpt_flg,'*'),
	 	 		       nvl(clm_opt_schm_cd,'*')
			  INTO   :c_clm_brkr_cmpt_flg,
	 	   	 	     :c_clm_fno_schm_code
  		  FROM   CLM_CLNT_MSTR
  		  WHERE  CLM_MTCH_ACCNT = :c_mtch_accnt_no;

  	  if (SQLCODE != 0 )
  	  {
    	 fn_errlog( c_ServiceName, "S31190", SQLMSG, c_errmsg );
    	 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	  }
	    ******************************************/

			if (c_prd_typ == 'O' || c_prd_typ == 'I' )	/*** oplus added in Ver 2.9 ***/
		  {
 
		   EXEC SQL 
					SELECT distinct 'N',
	  			       nvl(OTD_SCHM_CODE,'*')
					INTO   :c_clm_brkr_cmpt_flg,
	   				     :c_clm_fno_schm_code
  				FROM   OTD_OPTION_TRD_DTLS
  				WHERE  OTD_XCHNG_CD = :c_xchng_cd  /** Added in Ver 2.1 **/ /** Need to check for ALL option **/
					AND    OTD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
	  			AND    OTD_TRD_DT = :c_trd_date;

  	   if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  	   {
    	  fn_errlog( c_ServiceName, "S31195", SQLMSG, c_errmsg );
        EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
        EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
        tpfree ( ( char * ) ptr_fml_Obuf ); /*** Ver 3.9 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    	  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	   }
	     else if (SQLCODE == NO_DATA_FOUND )
 	     {
				if( DEBUG_MSG_LVL_3) /**3.9 debug changed to 3***/
				{
        	fn_userlog(c_ServiceName,"Checking scheme in OTD_HSTRY table");
				}

			  EXEC SQL 
				  SELECT  distinct 'N',
	  	  	        nvl(OTD_SCHM_CODE,'*')
			    INTO   :c_clm_brkr_cmpt_flg,
	   		  		   :c_clm_fno_schm_code
  			  FROM   OTD_OPTION_TRD_DTLS_HSTRY
  			  WHERE  OTD_XCHNG_CD = :c_xchng_cd  /** Added in Ver 2.1 **/  /** Need to check for ALL option **/
			  	AND   OTD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
				  AND    OTD_TRD_DT = :c_trd_date;

 			  if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  		  {
     	   fn_errlog( c_ServiceName, "S31200", SQLMSG, c_errmsg );
         EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
         EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
         tpfree ( ( char * ) ptr_fml_Obuf ); /*** Ver 3.9 ***/
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    	   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	    }
        if (SQLCODE == NO_DATA_FOUND)
        {
	       c_clm_brkr_cmpt_flg = '\0';
        }
	     }

      }
			SETNULL(c_clm_fno_schm_code);

  	  if( DEBUG_MSG_LVL_5 ) 
		  {          
    	 fn_userlog( c_ServiceName, " Value of c_clm_brkr_cmpt_flg ..: [%c] ",c_clm_brkr_cmpt_flg);
    	 fn_userlog( c_ServiceName, " Value of c_clm_fno_schm_code ..: [%s] ",c_clm_fno_schm_code.arr );
  	  }


      /*** if(c_clm_brkr_cmpt_flg == 'N' && c_prd_typ == 'O')  *** Commented in Ver 2.9 ***/
			if(c_clm_brkr_cmpt_flg == 'N' && (c_prd_typ == 'O' || c_prd_typ == 'I') )		/*** Ver 2.9 ***/
      {	

        c_source_flg = 'O';

        if(i_hist_flg == 0)
        {
   					EXEC SQL 
								SELECT  decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) TOTAL_LOTS,
		   								 (decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) - OBC_CARRY_FWD_LOT) INTRA_DAY_LOTS,
											 OBC_INRANGE_QTY INRANGE_LOTS,
		   								 OBC_BELOW_QTY BELOW_RANGE_LOTS,
		   								 OBC_ABOVE_QTY ABOVE_RANGE_LOTS,
		   								 OBC_CARRY_FWD_LOT, 
		   					       OBC_INRANGE_CHARGES INRANGE_CHARGES,
		   								 decode(OBC_BELOW_QTY,'0','0',decode(OBC_BUY_BRKG,'0',OBC_SELL_BRKG,OBC_BUY_BRKG)) BELOW_RANGE_CHARGES,
		   								 OBC_ABOVE_CHARGES ABOVE_RANGE_CHARGES,
		   								 OBC_CARRY_FWD_BRKG CARRY_FWD_CHARGES,
		   								 OBC_TOTAL_BRKG TOTAL_CHARGES
							  INTO   :i_total_lots ,
											 :i_intra_day_lots ,
											 :i_inrange_lots ,
											 :i_below_range_lots ,
											 :i_above_range_lots ,
										   :i_obc_carry_fwd_lot ,
										   :l_inrange_charges ,
										   :l_below_range_charges ,
										   :l_above_range_charges ,
											 :l_carry_fwd_charges ,
										   :l_total_charges 
	    					FROM   OBC_OPTION_BRKR_CMPT_SMRY 
	    					WHERE  OBC_ORDR_RFRNC = :c_ordr_rfrnc ;

						  if ((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
						  {
						    fn_errlog( c_ServiceName, "S31205", SQLMSG, c_errmsg  );
                EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
                EXEC SQL FREE :sys_cursor;
                tpfree ( ( char * ) ptr_fml_Obuf ); /*** Ver 3.9 ***/
        		    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
						    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						  }

					if( DEBUG_MSG_LVL_5)
					{
		    		fn_userlog(c_ServiceName," In Todays table for OPM Client");
					}
        }


        if(i_hist_flg == 1)
        {
           EXEC SQL
		     			SELECT TOTAL_LOTS,INTRA_DAY_LOTS,INRANGE_LOTS,BELOW_RANGE_LOTS,ABOVE_RANGE_LOTS,CARRY_FWD_LOTS,
		     						 INRANGE_CHARGES,BELOW_RANGE_CHARGES,ABOVE_RANGE_CHARGES,CARRY_FWD_CHARGES,TOTAL_CHARGES
              INTO   :i_total_lots ,
                     :i_intra_day_lots ,
                     :i_inrange_lots ,
                     :i_below_range_lots ,
                     :i_above_range_lots ,
                     :i_obc_carry_fwd_lot ,
                     :l_inrange_charges ,
                     :l_below_range_charges ,
                     :l_above_range_charges ,
                     :l_carry_fwd_charges ,
                     :l_total_charges
						   FROM
		     			 (
                SELECT decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) TOTAL_LOTS,
                       (decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) - OBC_CARRY_FWD_LOT) INTRA_DAY_LOTS,
                       OBC_INRANGE_QTY INRANGE_LOTS,
                       OBC_BELOW_QTY BELOW_RANGE_LOTS,
                       OBC_ABOVE_QTY ABOVE_RANGE_LOTS,
                       OBC_CARRY_FWD_LOT CARRY_FWD_LOTS,
                       OBC_INRANGE_CHARGES INRANGE_CHARGES,
                       decode(OBC_BELOW_QTY,'0','0',decode(OBC_BUY_BRKG,'0',OBC_SELL_BRKG,OBC_BUY_BRKG)) BELOW_RANGE_CHARGES,
                       OBC_ABOVE_CHARGES ABOVE_RANGE_CHARGES,
                       OBC_CARRY_FWD_BRKG CARRY_FWD_CHARGES,
                       OBC_TOTAL_BRKG TOTAL_CHARGES
                FROM   OBC_OPTION_BRKR_CMPT_SMRY 
                WHERE  OBC_ORDR_RFRNC = :c_ordr_rfrnc
                UNION ALL
                SELECT decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) TOTAL_LOTS,
                       (decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) - OBC_CARRY_FWD_LOT) INTRA_DAY_LOTS,
                       OBC_INRANGE_QTY INRANGE_LOTS,
                       OBC_BELOW_QTY BELOW_RANGE_LOTS,
                       OBC_ABOVE_QTY ABOVE_RANGE_LOTS,
                       OBC_CARRY_FWD_LOT CARRY_FWD_LOTS,
                       OBC_INRANGE_CHARGES INRANGE_CHARGES,
                       decode(OBC_BELOW_QTY,'0','0',decode(OBC_BUY_BRKG,'0',OBC_SELL_BRKG,OBC_BUY_BRKG)) BELOW_RANGE_CHARGES,
                       OBC_ABOVE_CHARGES ABOVE_RANGE_CHARGES,
                       OBC_CARRY_FWD_BRKG CARRY_FWD_CHARGES,
                       OBC_TOTAL_BRKG TOTAL_CHARGES
                FROM   OBC_OPT_BRKR_SMRY_HSTRY
                WHERE  OBC_ORDR_RFRNC = :c_ordr_rfrnc
	    	       );

				if( DEBUG_MSG_LVL_5)
				{
	     		fn_userlog(c_ServiceName," In History for OPM Client");
				}

		   if ((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
		   {
		    fn_errlog( c_ServiceName, "S31210", SQLMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
        EXEC SQL FREE :sys_cursor; 
        tpfree ( ( char * ) ptr_fml_Obuf ); /*** Ver 3.9 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
		    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		   }

      }
     if( DEBUG_MSG_LVL_5 )
     { 
      fn_userlog(c_ServiceName,"Value of i_hist_flg is   [%d]",i_hist_flg);
      fn_userlog(c_ServiceName,"Value of i_total_lots is   [%d] ",i_total_lots);
      fn_userlog(c_ServiceName,"Value of i_intra_day_lots is   [%d] ",i_intra_day_lots);
      fn_userlog(c_ServiceName,"Value of i_inrange_lots is     [%d] ",i_inrange_lots);
      fn_userlog(c_ServiceName,"Value of i_below_range_lots is      [%d] ",i_below_range_lots);
      fn_userlog(c_ServiceName,"Value of i_above_range_lots is      [%d] ",i_above_range_lots);
      fn_userlog(c_ServiceName,"Value of i_obc_carry_fwd_lot is     [%d] ",i_obc_carry_fwd_lot);
      fn_userlog(c_ServiceName,"Value of l_inrange_charges is       [%ld] ",l_inrange_charges);
      fn_userlog(c_ServiceName,"Value of l_below_range_charges is   [%f] ",l_below_range_charges);
      fn_userlog(c_ServiceName,"Value of l_above_range_charges is   [%ld] ",l_above_range_charges);
      fn_userlog(c_ServiceName,"Value of l_carry_fwd_charges is  [%f] ",l_carry_fwd_charges);
      fn_userlog(c_ServiceName,"Value of l_total_charges is      [%ld] ",l_total_charges);
      fn_userlog(c_ServiceName,"Value of c_source_flg is      [%c] ",c_source_flg);
    	fn_userlog(c_ServiceName," Before Fadd32 of OPM Client");
     }


    i_err[0] = Fadd32(ptr_fml_Obuf,FFO_ORD_TOT_QTY,(char *)&i_total_lots,0) ;
    i_err[1] = Fadd32(ptr_fml_Obuf,FFO_TOT_QTY_TRDD,(char *)&i_intra_day_lots,0) ;
    i_err[2] = Fadd32(ptr_fml_Obuf,FFO_EXCR_EXCTD_QTY,(char *)&i_inrange_lots,0) ;
    i_err[3] = Fadd32(ptr_fml_Obuf,FFO_MIN_LOT_QTY,(char *)&i_below_range_lots,0) ;
    i_err[4] = Fadd32(ptr_fml_Obuf,FFO_FRS_QTY,(char *)&i_above_range_lots,0) ;
    i_err[5] = Fadd32(ptr_fml_Obuf,FFO_EXCR_REQ_QTY,(char *)&i_obc_carry_fwd_lot,0) ;
    i_err[6] = Fadd32(ptr_fml_Obuf,FFO_NET_TRD_VAL,(char *)&l_inrange_charges,0) ;
    i_err[7] = Fadd32(ptr_fml_Obuf,FFO_BASE_ORD_VAL,(char *)&l_below_range_charges,0) ;
    i_err[8] = Fadd32(ptr_fml_Obuf,FFO_INTERVAL,(char *)&l_above_range_charges,0) ;			      
    i_err[9] = Fadd32(ptr_fml_Obuf,FFO_C_ORG_OPN_VAL,(char *)&l_carry_fwd_charges,0) ;
    i_err[10] = Fadd32(ptr_fml_Obuf,FFO_TOT_VAL_TRDD,(char *)&l_total_charges,0) ;
    i_err[11] = Fadd32(ptr_fml_Obuf,FFO_SOURCE_FLG,(char *)&c_source_flg,0) ;

		if( DEBUG_MSG_LVL_5)
		{
    	fn_userlog(c_ServiceName," After Fadd32 of OPM Client");    
		}

      for(i=0;i<=11;i++)											
      {
        if(i_err[i] == -1)
        {
          fn_userlog(c_ServiceName,"Error in Fadd for i for OPM [%d]",i);
          fn_errlog( c_ServiceName, "S31215", FMLMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
          EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
           tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }


     }                     


     /*****    Ver 2.0 Ends  ***/

			if( DEBUG_MSG_LVL_5)
			{
 				fn_userlog(c_ServiceName," Before Fadd32 ");
			}

			/* i_serr[0]		=	Fadd32(ptr_fml_Obuf,FFO_XCHNG_CD,(char *)c_exchange_cd,0) ; */
			/** Commented above for Ver 2.1 **/
			i_serr[0]		=	Fadd32(ptr_fml_Obuf,FFO_XCHNG_CD,(char *)c_xchng_cd,0) ; /** Ver 2.1 **/
			i_serr[1]		=	Fadd32(ptr_fml_Obuf,FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no,0) ;
			i_serr[2]		=	Fadd32(ptr_fml_Obuf,FFO_ORDR_RFRNC,(char *)c_ordr_rfrnc,0) ;
			i_serr[3]		=	Fadd32(ptr_fml_Obuf,FFO_TRD_DT,(char *)c_trd_date.arr,0) ;
			i_serr[4]		=	Fadd32(ptr_fml_Obuf,FFO_TRD_FLW,(char *)&c_trade_flow,0) ;
			i_serr[5]		=	Fadd32(ptr_fml_Obuf,FFO_UNDRLYNG,(char *)c_unlying,0) ;
			i_serr[6]		=	Fadd32(ptr_fml_Obuf,FFO_EXPRY_DT,(char *)c_exp_date.arr,0) ;
			i_serr[7]		=	Fadd32(ptr_fml_Obuf,FFO_OPT_TYP,(char *)&c_opt_typ,0) ;
			i_serr[8]		=	Fadd32(ptr_fml_Obuf,FFO_STRK_PRC,(char *)&l_strk_prc,0) ;
			i_serr[9]		=	Fadd32(ptr_fml_Obuf,FFO_EXER_TYP,(char *)&c_exrc_typ,0) ;
			i_serr[10]	=	Fadd32(ptr_fml_Obuf,FFO_PRDCT_TYP,(char *)&c_prd_typ,0) ;
			i_serr[11]	=	Fadd32(ptr_fml_Obuf,FFO_INSTRMNT_TYP,(char *)c_indstk,0) ;
			i_serr[12]	=	Fadd32(ptr_fml_Obuf,FFO_EXEC_QTY,(char *)&l_exctd_qty,0) ;
			i_serr[13]	=	Fadd32(ptr_fml_Obuf,FFO_EXCTD_RT,(char *)&l_exctd_rt,0) ;
			i_serr[14]	=	Fadd32(ptr_fml_Obuf,FFO_AMOUNT,(char *)&d_value,0) ;
			i_serr[15]	=	Fadd32(ptr_fml_Obuf,FFO_FRS_BRKG,(char *)&l_incl_all,0) ;
			i_serr[16]	=	Fadd32(ptr_fml_Obuf,FFO_AGREE_NO,(char *)c_cntrctnt_nmbr,0) ;	
			i_serr[17]	=	Fadd32(ptr_fml_Obuf,FFO_LST_TRD_PRC,(char *)&l_ltp,0) ;					
      i_serr[18]  = Fadd32(ptr_fml_Obuf,FFO_NMR,(char *)&l_sum_tax,0);        /*** Ver 3.7 ***/

  /***    for(i=0;i<18;i++)  *** counter changed from 18 to 19 in Ver 3.7 ***/
      for(i=0;i<19;i++)      /*** Ver 3.7 ***/
  		{
    		if(i_serr[i] == -1)
    		{
      		fn_userlog(c_ServiceName,"Error in Fadd for i [%d]",i);
      		fn_errlog( c_ServiceName, "S31220", FMLMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
          EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
        	tpfree ( ( char * ) ptr_fml_Obuf );
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      		tpcommit(0);      /***  Ver 1.9 ***/
      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}
  		}

      /*** Commented in Ver 4.4 ***
  		ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,counter * MIN_FML_BUF_LEN );  ***/

      if(Fneeded32(1,MIN_FML_BUF_LEN) > Funused32(ptr_fml_Obuf))/**Check added in Ver 4.4 as memory was reallocated after eve
ry record fetched ***/
    {
			counter ++;
      ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf, Fsizeof32(ptr_fml_Obuf) +
                                                                counter * MIN_FML_BUF_LEN * 5 ); /* Ver 4.4 */

  		if ( ptr_fml_Obuf == NULL )
  		{
    		fn_errlog( c_ServiceName, "S31225", TPMSG, c_errmsg  );
      	EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
      	tpfree ( ( char * ) ptr_fml_Obuf );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpcommit(0);      /***  Ver 1.9 ***/
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}
    }

		}

		MEMSET(c_trdbk_seq);

		EXEC SQL
			SELECT TO_CHAR(SYSDATE,'YYYYMMDD')||LPAD(TO_CHAR(DECODE((LAST_NUMBER - 1),MAX_VALUE,0,(LAST_NUMBER - 1))),8,'0')
      INTO 	:c_trdbk_seq
      FROM 	USER_SEQUENCES
      WHERE SEQUENCE_NAME = 'DFT_DL_FO_TRDBK_SEQ';

		SETNULL(c_trdbk_seq);

		if(DEBUG_MSG_LVL_5)
		{
  		fn_userlog(c_ServiceName,"Trade Book Sequence number is :%s:",c_trdbk_seq.arr);
		}

		if ( Fadd32(ptr_fml_Obuf,FFO_REF_NO,(char *)c_trdbk_seq.arr,0) == -1 ) 
		{
			fn_userlog(c_ServiceName,"Error in Fadd for i [%d]",i);
 			fn_errlog( c_ServiceName, "S31230", FMLMSG, c_errmsg  );
      EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
      EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
    	tpfree ( ( char * ) ptr_fml_Obuf );
 			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);      /***  Ver 1.9 ***/
 			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

	}
	else if ( c_spl_flg == 'B' )
	{
    if( DEBUG_MSG_LVL_3 )
    {
			fn_userlog(c_ServiceName,"Inside 'B' Silver Light Trade Book .");
			fn_userlog(c_ServiceName,"Order Reference Is :%s:",c_ord_rfr);
    }

		EXEC SQL
   		SELECT	
		FTD_CLM_MTCH_ACCNT,
						FTD_XCHNG_CD,
					  FTD_ORDR_RFRNC,
     	      FTD_TRD_FLW,
     		    LTRIM(RTRIM(FTD_UNDRLYNG)),
      		  FTD_INDSTK,
        		TRUNC(FTD_TRD_DT),
        		TRUNC(FTD_EXPRY_DT),
    		 		FTD_PRDCT_TYP,
           	FTD_OPT_TYP,
           	FTD_EXER_TYP,
           	FTD_STRK_PRC,
         		SUM(FTD_EXCTD_QTY),
            SUM(NVL(FTD_BRKG,0)),
           	SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
           	SUM(NVL(FTD_STT,0)),
           	SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),/** Ver 4.1 **/
     	     	SUM(NVL(FTD_SEBI_TT,0)),
      	   	SUM(NVL(FTD_TRAN_CHRG,0)),
        	 	SUM(NVL(FTD_STAMP_DUTY,0))
		INTO		:c_mtch_accnt_no,
						:c_exchange_cd,
						:c_ordr_rfrnc,
						:c_trade_flow,
						:c_unlying,
						:c_indstk,
						:c_trd_date,
						:c_exp_date,
						:c_prd_typ,
						:c_opt_typ,
						:c_exrc_typ,
						:l_strk_prc,
						:l_exctd_qty,
						:l_brkg_val,
						:d_value,
						:l_stt,
						:l_srv_tax,
						:l_sebi_tt,
						:l_tran_chrg,
						:l_stmp_duty

		FROM    FTD_FO_TRD_DTLS
    /* WHERE   FTD_XCHNG_CD       LIKE :c_exchange_cd */ /** Ver 2.1 - Replaced hardcoding of exchange code from 'NFO' **/ 
    WHERE     FTD_ORDR_RFRNC     = :c_ord_rfr    /** Commented Exchange code selection in Ver 2.2 **/
    GROUP BY 	
    FTD_CLM_MTCH_ACCNT,
							FTD_XCHNG_CD,
							FTD_ORDR_RFRNC,
              FTD_TRD_FLW,
              FTD_UNDRLYNG,
              FTD_INDSTK,
              TRUNC(FTD_TRD_DT),
              TRUNC(FTD_EXPRY_DT),
              FTD_PRDCT_TYP,
              FTD_OPT_TYP,
              FTD_EXER_TYP,
              FTD_STRK_PRC;

	 	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
   	{
     	fn_errlog( c_ServiceName, "S31235", SQLMSG, c_errmsg  );
      EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
      EXEC SQL FREE  :sys_cursor; 
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);      /***  Ver 1.9 ***/
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   	}
		else if (  SQLCODE == NO_DATA_FOUND )
		{
			if( DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Inside NO_DATA_FOUND For Brokerage");
			}

			EXEC SQL
			 SELECT	FTD_CLM_MTCH_ACCNT,
							FTD_XCHNG_CD,
							FTD_ORDR_RFRNC,
            	FTD_TRD_FLW,
            	LTRIM(RTRIM(FTD_UNDRLYNG)),
            	FTD_INDSTK,
            	TRUNC(FTD_TRD_DT),
            	TRUNC(FTD_EXPRY_DT),
           	 	FTD_PRDCT_TYP,
            	FTD_OPT_TYP,
            	FTD_EXER_TYP,
            	FTD_STRK_PRC,
            	SUM(FTD_EXCTD_QTY),
            	SUM(NVL(FTD_BRKG,0)),
            	SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
            	SUM(NVL(FTD_STT,0)),
            	SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)), /** Ver 4.1 **/
            	SUM(NVL(FTD_SEBI_TT,0)),
            	SUM(NVL(FTD_TRAN_CHRG,0)),
            	SUM(NVL(FTD_STAMP_DUTY,0))
    	INTO 		:c_mtch_accnt_no,
							:c_exchange_cd,
						 	:c_ordr_rfrnc,
      		    :c_trade_flow,
          		:c_unlying,
          		:c_indstk,
          		:c_trd_date,
          		:c_exp_date,
          		:c_prd_typ,
          		:c_opt_typ,
          		:c_exrc_typ,
          		:l_strk_prc,
          		:l_exctd_qty,
          		:l_brkg_val,
          		:d_value,
          		:l_stt,
          		:l_srv_tax,
          		:l_sebi_tt,
          		:l_tran_chrg,
          		:l_stmp_duty

   		FROM    FTD_FO_TRD_DTLS_HSTRY
    	WHERE   FTD_XCHNG_CD       LIKE :c_exchange_cd  /** Ver 2.1 - Replaced hardcoding of exchange code from 'NFO' **/
    	AND     FTD_ORDR_RFRNC     = :c_ord_rfr
    	GROUP BY	FTD_CLM_MTCH_ACCNT,
								FTD_XCHNG_CD,
							  FTD_ORDR_RFRNC,
      	        FTD_TRD_FLW,
        	      FTD_UNDRLYNG,
          	    FTD_INDSTK,
            	  TRUNC(FTD_TRD_DT),
              	TRUNC(FTD_EXPRY_DT),
              	FTD_PRDCT_TYP,
              	FTD_OPT_TYP,
              	FTD_EXER_TYP,
              	FTD_STRK_PRC;
		
			if ( SQLCODE != 0 )
			{
  			fn_errlog( c_ServiceName, "S31240", SQLMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
        EXEC SQL FREE  :sys_cursor; 
  			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpcommit(0);      /***  Ver 1.9 ***/
  			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

		}

   	ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN	*	i_rec_cnt * 5 );/***	Ver	1.9	***/
																																												/*** multiplied by 5 in Ver 4.4 ***/
    
   	if ( ptr_fml_Obuf == NULL )
   	{
     	fn_errlog( c_ServiceName, "S31245", FMLMSG, c_errmsg  );
     	EXEC SQL CLOSE :sys_cursor;
     	EXEC SQL FREE :sys_cursor;
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);      /***  Ver 1.9 ***/
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   	}

		SETNULL(c_exp_date);
 		SETNULL(c_trd_date);

 		l_incl_all = l_brkg_val+ l_stt + l_srv_tax  +l_sebi_tt + l_tran_chrg + l_stmp_duty;

		/***************
 		d_exctd_rt  = d_value / l_exctd_qty;
		l_exctd_rt		=	d_exctd_rt;
		************************************/

	  l_exctd_rt  = d_value / l_exctd_qty;


		 /****************************************************************************************/	
 		    													/*****    Ver 2.2 Starts  ***/
     /*****************************************************************************************/

     /** Initialize all variables to default values first **/  

     c_clm_brkr_cmpt_flg = '*'; 
     c_source_flg = '*';
     strcpy(c_clm_fno_schm_code.arr, "*");

     strcpy(c_osm_schm_code.arr, "*");
     strcpy(c_period.arr, "*");
     strcpy(c_osd_lwr_rng_lotsz.arr, "*");
     strcpy(c_osd_upr_rng_lotsz.arr, "*");
     strcpy(c_osd_brkr_rng_rate.arr, "*");
     strcpy(c_osd_chrg_base.arr, "*");
     strcpy(c_osm_carry_frwd.arr, "*");

     i_total_lots = 0;
     i_intra_day_lots = 0;
     i_inrange_lots = 0;
     i_below_range_lots = 0;
     i_above_range_lots = 0;
     i_obc_carry_fwd_lot = 0;
     l_inrange_charges = 0;
     l_below_range_charges = 0;
     l_above_range_charges = 0;
     l_carry_fwd_charges = 0;
     l_total_charges = 0;

     if (DEBUG_MSG_LVL_3)
		 {
		  fn_userlog(c_ServiceName,"Value of c_source_flg in -SL is				 [%c] ",c_source_flg);
		  fn_userlog(c_ServiceName,"Value of c_clm_fno_schm_code in -SL is    [%s]",c_clm_fno_schm_code.arr);
		  fn_userlog(c_ServiceName,"Value of c_clm_brkr_cmpt_flg in -SL is      [%c] ",c_clm_brkr_cmpt_flg);

      fn_userlog(c_ServiceName,"Value of c_osm_schm_code in -SL   [%s]",c_osm_schm_code.arr);
      fn_userlog(c_ServiceName,"Value of c_period in -SL   [%s]",c_period.arr);
      fn_userlog(c_ServiceName,"Value of c_osd_lwr_rng_lotsz in -SL   [%s] ",c_osd_lwr_rng_lotsz.arr);
      fn_userlog(c_ServiceName,"Value of c_osd_upr_rng_lotsz in -SL      [%s] ",c_osd_upr_rng_lotsz.arr);
      fn_userlog(c_ServiceName,"Value of c_osd_brkr_rng_rate in -SL       [%s] ",c_osd_brkr_rng_rate.arr);
      fn_userlog(c_ServiceName,"Value of c_osd_chrg_base in -SL     [%s] ",c_osd_chrg_base.arr);
      fn_userlog(c_ServiceName,"Value of c_osm_carry_frwd in -SL     [%s] ",c_osm_carry_frwd.arr);

      fn_userlog(c_ServiceName,"Value of i_total_lots in -SL     [%d] ",i_total_lots);
      fn_userlog(c_ServiceName,"Value of i_intra_day_lots in -SL    [%d] ",i_intra_day_lots);
      fn_userlog(c_ServiceName,"Value of i_inrange_lots in -SL     [%d] ",i_inrange_lots);
      fn_userlog(c_ServiceName,"Value of i_above_range_lots in -SL        [%d] ",i_above_range_lots);
      fn_userlog(c_ServiceName,"Value of i_obc_carry_fwd_lot in -SL        [%d] ",i_obc_carry_fwd_lot); 
      fn_userlog(c_ServiceName,"Value of l_inrange_charges in -SL        [%lf] ",l_inrange_charges); 
      fn_userlog(c_ServiceName,"Value of l_below_range_charges in -SL        [%lf] ",l_below_range_charges); 
      fn_userlog(c_ServiceName,"Value of l_above_range_charges in -SL        [%lf] ",l_above_range_charges); 
      fn_userlog(c_ServiceName,"Value of l_carry_fwd_charges in -SL        [%lf] ",l_carry_fwd_charges); 
      fn_userlog(c_ServiceName,"Value of l_total_charges in -SL         [%lf] ",l_total_charges); 
		 }	

		 MEMSET(c_clm_fno_schm_code);
   
		 if (c_prd_typ == 'O' || c_prd_typ == 'I' )	/*** Oplus added in Ver 2.9 ***/
		 {
		  fn_userlog(c_ServiceName,"For Options trade-Check for scheme in -SL ");	
		  EXEC SQL 
				 SELECT distinct 'N',
	  			      nvl(OTD_SCHM_CODE,'*')
				 INTO   :c_clm_brkr_cmpt_flg,
	   			 	    :c_clm_fno_schm_code
  			 FROM   OTD_OPTION_TRD_DTLS
  			 WHERE  OTD_XCHNG_CD = :c_xchng_cd    /** Added for Ver 2.1 **/
			 	 AND    OTD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
	  		 AND    OTD_TRD_DT = :c_trd_date;

  	  if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  	  {
    	 fn_errlog( c_ServiceName, "S31250", SQLMSG, c_errmsg );
       EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
       EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
       tpfree ( ( char * ) ptr_fml_Obuf ); /*** Ver 3.9 ***/
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	  }
	    else if (SQLCODE == NO_DATA_FOUND )
 	    {
       fn_userlog(c_ServiceName,"Checking scheme in OTD_HSTRY table in -SL ");

			 EXEC SQL 
				 SELECT distinct 'N',
	  	  	      nvl(OTD_SCHM_CODE,'*')
			   INTO   :c_clm_brkr_cmpt_flg,
	   		 		    :c_clm_fno_schm_code
  			 FROM   OTD_OPTION_TRD_DTLS_HSTRY
  			 WHERE  OTD_XCHNG_CD = :c_xchng_cd    /** Added for Ver 2.1 **/  
			 	 AND  OTD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
				 AND    OTD_TRD_DT = :c_trd_date;

 			 if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  		 {
     	  fn_errlog( c_ServiceName, "S31255", SQLMSG, c_errmsg );
        EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
        EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
        tpfree ( ( char * ) ptr_fml_Obuf ); /*** Ver 3.9 ***/
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    	  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	   }
		   if (SQLCODE == NO_DATA_FOUND)
			 {
	      c_clm_brkr_cmpt_flg = '\0';
	      /** c_source_flg = '\0'; ** Ver 2.3 ***/
        c_source_flg = '*';   /** Ver 2.3 **/
       }
	    }
	    SETNULL(c_clm_fno_schm_code);

     }

  	 if( DEBUG_MSG_LVL_3 ) 
		 {          
    	fn_userlog( c_ServiceName, " Value of c_clm_brkr_cmpt_flg in -SL  : [%c] ",c_clm_brkr_cmpt_flg);
    	fn_userlog( c_ServiceName, " Value of c_clm_fno_schm_code in -SL  : [%s] ",c_clm_fno_schm_code.arr );
    	fn_userlog( c_ServiceName, " Value of c_source_flg in -SL : [%c] ",c_source_flg );
  	 }

     /*** if(c_clm_brkr_cmpt_flg == 'N' && c_prd_typ == 'O')	*** Commented in ver 2.9 ***/
		 if(c_clm_brkr_cmpt_flg == 'N' && ( c_prd_typ == 'O' || c_prd_typ == 'I') )	/*** Ver 2.9 ***/
     {	
        c_source_flg = 'O';

        if(i_hist_flg == 0)
        {
   					EXEC SQL 
								SELECT decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) TOTAL_LOTS,
		   								 (decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) - OBC_CARRY_FWD_LOT) INTRA_DAY_LOTS,
											 OBC_INRANGE_QTY INRANGE_LOTS,
		   								 OBC_BELOW_QTY BELOW_RANGE_LOTS,
		   								 OBC_ABOVE_QTY ABOVE_RANGE_LOTS,
		   								 OBC_CARRY_FWD_LOT, 
		   					       OBC_INRANGE_CHARGES INRANGE_CHARGES,
		   								 decode(OBC_BELOW_QTY,'0','0',decode(OBC_BUY_BRKG,'0',OBC_SELL_BRKG,OBC_BUY_BRKG)) BELOW_RANGE_CHARGES,
		   								 OBC_ABOVE_CHARGES ABOVE_RANGE_CHARGES,
		   								 OBC_CARRY_FWD_BRKG CARRY_FWD_CHARGES,
		   								 OBC_TOTAL_BRKG TOTAL_CHARGES
							  INTO   :i_total_lots ,
											 :i_intra_day_lots ,
											 :i_inrange_lots ,
											 :i_below_range_lots ,
											 :i_above_range_lots ,
										   :i_obc_carry_fwd_lot ,
										   :l_inrange_charges ,
										   :l_below_range_charges ,
										   :l_above_range_charges ,
											 :l_carry_fwd_charges ,
										   :l_total_charges 
	    					FROM   OBC_OPTION_BRKR_CMPT_SMRY 
	    					WHERE  OBC_ORDR_RFRNC = :c_ordr_rfrnc ;

						if ((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
						{
						    fn_errlog( c_ServiceName, "S31260", SQLMSG, c_errmsg  );
                EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
                EXEC SQL FREE :sys_cursor; 
                tpfree ( ( char * ) ptr_fml_Obuf ); /*** Ver 3.9 ***/
						    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
						    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}

		        fn_userlog(c_ServiceName," In Todays table for OPM Client--1 in -SL ");
        }

        if(i_hist_flg == 1)
        {
            EXEC SQL
		     			SELECT distinct TOTAL_LOTS,INTRA_DAY_LOTS,INRANGE_LOTS,BELOW_RANGE_LOTS,ABOVE_RANGE_LOTS,CARRY_FWD_LOTS,
		     						 INRANGE_CHARGES,BELOW_RANGE_CHARGES,ABOVE_RANGE_CHARGES,CARRY_FWD_CHARGES,TOTAL_CHARGES
              INTO   :i_total_lots ,
                     :i_intra_day_lots ,
                     :i_inrange_lots ,
                     :i_below_range_lots ,
                     :i_above_range_lots ,
                     :i_obc_carry_fwd_lot ,
                     :l_inrange_charges ,
                     :l_below_range_charges ,
                     :l_above_range_charges ,
                     :l_carry_fwd_charges ,
                     :l_total_charges
						   FROM
		     			 (
                SELECT decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) TOTAL_LOTS,
                       (decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) - OBC_CARRY_FWD_LOT) INTRA_DAY_LOTS,
                       OBC_INRANGE_QTY INRANGE_LOTS,
                       OBC_BELOW_QTY BELOW_RANGE_LOTS,
                       OBC_ABOVE_QTY ABOVE_RANGE_LOTS,
                       OBC_CARRY_FWD_LOT CARRY_FWD_LOTS,
                       OBC_INRANGE_CHARGES INRANGE_CHARGES,
                       decode(OBC_BELOW_QTY,'0','0',decode(OBC_BUY_BRKG,'0',OBC_SELL_BRKG,OBC_BUY_BRKG)) BELOW_RANGE_CHARGES,
                       OBC_ABOVE_CHARGES ABOVE_RANGE_CHARGES,
                       OBC_CARRY_FWD_BRKG CARRY_FWD_CHARGES,
                       OBC_TOTAL_BRKG TOTAL_CHARGES
                FROM   OBC_OPTION_BRKR_CMPT_SMRY 
                WHERE  OBC_ORDR_RFRNC = :c_ordr_rfrnc
                UNION ALL
                SELECT decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) TOTAL_LOTS,
                       (decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) - OBC_CARRY_FWD_LOT) INTRA_DAY_LOTS,
                       OBC_INRANGE_QTY INRANGE_LOTS,
                       OBC_BELOW_QTY BELOW_RANGE_LOTS,
                       OBC_ABOVE_QTY ABOVE_RANGE_LOTS,
                       OBC_CARRY_FWD_LOT CARRY_FWD_LOTS,
                       OBC_INRANGE_CHARGES INRANGE_CHARGES,
                       decode(OBC_BELOW_QTY,'0','0',decode(OBC_BUY_BRKG,'0',OBC_SELL_BRKG,OBC_BUY_BRKG)) BELOW_RANGE_CHARGES,
                       OBC_ABOVE_CHARGES ABOVE_RANGE_CHARGES,
                       OBC_CARRY_FWD_BRKG CARRY_FWD_CHARGES,
                       OBC_TOTAL_BRKG TOTAL_CHARGES
                FROM   OBC_OPT_BRKR_SMRY_HSTRY
                WHERE  OBC_ORDR_RFRNC = :c_ordr_rfrnc
	    	       );

	          fn_userlog(c_ServiceName," In History for OPM Client --1 in -SL ");

		        if ((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
		        {
		       		fn_errlog( c_ServiceName, "S31265", SQLMSG, c_errmsg  );
		       		EXEC SQL FREE :sys_cursor;
		       		EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
              tpfree ( ( char * ) ptr_fml_Obuf ); /*** Ver 3.9 ***/
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
		       		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		      	}

        }

        if( DEBUG_MSG_LVL_5 )
        {
          fn_userlog(c_ServiceName,"Value for OPM of i_hist_flg in -SL [%d]",i_hist_flg);
      		fn_userlog(c_ServiceName,"Value for OPM of i_total_lots in -SL [%d] ",i_total_lots);
      		fn_userlog(c_ServiceName,"Value for OPM of i_intra_day_lots in -SL [%d] ",i_intra_day_lots);
      		fn_userlog(c_ServiceName,"Value for OPM of i_inrange_lots in -SL [%d] ",i_inrange_lots);
      		fn_userlog(c_ServiceName,"Value for OPM of i_below_range_lots in -SL [%d] ",i_below_range_lots);
      		fn_userlog(c_ServiceName,"Value for OPM of i_above_range_lots in -SL [%d] ",i_above_range_lots);
      		fn_userlog(c_ServiceName,"Value for OPM of i_obc_carry_fwd_lot in -SL [%d] ",i_obc_carry_fwd_lot);
      		fn_userlog(c_ServiceName,"Value for OPM of l_inrange_charges in -SL [%ld] ",l_inrange_charges);
     	 		fn_userlog(c_ServiceName,"Value for OPM of l_below_range_charges in -SL [%f] ",l_below_range_charges);
      		fn_userlog(c_ServiceName,"Value for OPM of l_above_range_charges in -SL [%ld] ",l_above_range_charges);
      		fn_userlog(c_ServiceName,"Value for OPM of l_carry_fwd_charges in -SL  [%f] ",l_carry_fwd_charges);
      		fn_userlog(c_ServiceName,"Value for OPM of l_total_charges in -SL [%ld] ",l_total_charges);
     	 		fn_userlog(c_ServiceName,"Value for OPM of c_source_flg in -SL  [%c] ",c_source_flg);
     		}

        /*****************   Scheme Details Main Block Starts   **************************/

        /**************  Ver 2.2 for Scheme Details Start ******************************/

    		fn_userlog(c_ServiceName," val of c_clm_fno_schm_code in -SL  <%s>", c_clm_fno_schm_code.arr);    
    		fn_userlog(c_ServiceName," Val of c_trd_date in -SL  <%s>", c_trd_date.arr);    

			  SETLEN(c_trd_date);
				SETLEN(c_clm_fno_schm_code);

    		fn_userlog(c_ServiceName," val of c_clm_fno_schm_code aftr setlen in -SL  <%s>", c_clm_fno_schm_code.arr);    
    		fn_userlog(c_ServiceName," Val of c_trd_date after setlen in -SL  <%s>", c_trd_date.arr);    

        i_loop_cnt = 0;
	      EXEC SQL DECLARE osm_osd_desc_sil CURSOR for
						SELECT  osm_schm_code,
										osm_schm_start_date || ' to ' || osm_schm_end_date PERIOD,
										osd_lwr_rng_lotsz,
										osd_upr_rng_lotsz,
										osd_brkr_rng_rate,
										osd_chrg_base,
										osm_carry_frwd
							FROM OSD_OPTION_SCHEME_DTLS, OSM_OPTION_SCHEME_MSTR
							WHERE osd_schm_code = osm_schm_code
							AND   osd_schm_code = :c_clm_fno_schm_code
							AND  TRUNC(osm_schm_start_date) <= to_date(:c_trd_date,'DD-MON-YYYY') 
							AND  TRUNC(osm_schm_end_date) >= to_date(:c_trd_date,'DD-MON-YYYY')
							ORDER BY osd_lwr_rng_lotsz; 

	      if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
	      {
	       fn_errlog( c_ServiceName, "S31270", SQLMSG, c_errmsg );
    	   fn_userlog(c_ServiceName," Val of sqlcode in osd <%ld>", SQLCODE);    
	       EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
         EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
         tpfree ( ( char * ) ptr_fml_Obuf ); /*** Ver 3.9 ***/
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
	       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	      }

	      EXEC SQL
							OPEN osm_osd_desc_sil;
	      if (SQLCODE != 0 )
	      {
	    		fn_errlog( c_ServiceName, "S31275", SQLMSG, c_errmsg );
	    	  EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
          EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
          tpfree ( ( char * ) ptr_fml_Obuf ); /*** Ver 3.9 ***/
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
	    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	  		}

	 		  MEMSET(c_osm_schm_code);
	  		MEMSET(c_period);
	  		MEMSET(c_osd_lwr_rng_lotsz);
	  		MEMSET(c_osd_upr_rng_lotsz);
	  		MEMSET(c_osd_brkr_rng_rate);
	  		MEMSET(c_osd_chrg_base);
	  		MEMSET(c_osm_carry_frwd);

	  		MEMSET(c_schm_desc);
	  		MEMSET(c_lot_range);
	  		MEMSET(c_lot_range_charges);
	  		MEMSET(c_below_range);
  	  	MEMSET(c_below_range_charges);
	  		MEMSET(c_above_range_charges);
	  		MEMSET(c_carry_fwd_charges);

  	    MEMSET(c_lot_charges_range);
	  		MEMSET(c_lot_charges_min);
	  		MEMSET(c_lot_charges_max);

 	 		  while(1)
	  		{
	   			 i_loop_cnt = i_loop_cnt + 1;
	    	 
					 EXEC SQL 	
			 				FETCH  osm_osd_desc_sil
			 				INTO   :c_osm_schm_code,
										 :c_period,
										 :c_osd_lwr_rng_lotsz,
										 :c_osd_upr_rng_lotsz,
										 :c_osd_brkr_rng_rate,
										 :c_osd_chrg_base,
										 :c_osm_carry_frwd;

		 			 if(SQLCODE !=0)
		  		 {
							if(SQLCODE == NO_DATA_FOUND)
							{
			 	 			 break;
							}
		 				  else
		 		      {
			  				fn_errlog( c_ServiceName, "S31280", SQLMSG, c_errmsg  );
			  				EXEC SQL CLOSE OSM_OSD_DESC_SIL;
			          EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
                EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
        				tpfree ( ( char * ) ptr_fml_Obuf );
			  				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
			  				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
		  		 }

		  		 SETNULL(c_osm_schm_code);
		  		 SETNULL(c_period);
		  		 SETNULL(c_osd_lwr_rng_lotsz);
		  		 SETNULL(c_osd_upr_rng_lotsz);
		  		 SETNULL(c_osd_brkr_rng_rate);
		  		 SETNULL(c_osd_chrg_base);
		  		 SETNULL(c_osm_carry_frwd);

	    		 if( DEBUG_MSG_LVL_3 )
	    		 {
	     			fn_userlog( c_ServiceName, " Value of i_loop_cnt initially in -SL  : [%d] ",i_loop_cnt);
	     			fn_userlog( c_ServiceName, " Value of c_osm_schm_code initially  in -SL : [%s] ",c_osm_schm_code.arr);
	     			fn_userlog( c_ServiceName, " Value of c_period initially  in -SL : [%s] ",c_period.arr);
	     			fn_userlog( c_ServiceName, " Value of c_osd_lwr_rng_lotsz initially in -SL  : [%s] ",c_osd_lwr_rng_lotsz.arr);
	     			fn_userlog( c_ServiceName, " Value of c_osd_upr_rng_lotsz initially  in -SL : [%s] ",c_osd_upr_rng_lotsz.arr);
	     			fn_userlog( c_ServiceName, " Value of c_osd_brkr_rng_rate initially  in -SL : [%s] ",c_osd_brkr_rng_rate.arr);	     
	    		  fn_userlog( c_ServiceName, " Value of c_osd_chrg_base initially  in -SL : [%s] ",c_osd_chrg_base.arr);	     
	     			fn_userlog( c_ServiceName, " Value of c_osm_carry_frwd initially  in -SL : [%s] ",c_osm_carry_frwd.arr);	     
	         }

	         if(i_loop_cnt == 1)
	         {
	       		strcpy(c_below_range_charges.arr,c_osd_brkr_rng_rate.arr);
	       		strcat(c_below_range_charges.arr, "  ");
	       		strcat(c_below_range_charges.arr, c_osd_chrg_base.arr);
	      		fn_userlog( c_ServiceName, " Value of c_below_range_charges in -SL : [%s] ",c_below_range_charges.arr);	     
	     		 }

	     		 if(i_loop_cnt == 2)
	     		 {
	       		strcpy(c_schm_desc.arr,c_osd_lwr_rng_lotsz.arr);
	       		strcat(c_schm_desc.arr, " to ");
	       		strcat(c_schm_desc.arr,c_osd_upr_rng_lotsz.arr);
	       		strcat(c_schm_desc.arr, " Lots ");
	       		fn_userlog( c_ServiceName, " Value of c_schm_desc in -SL : [%s] ",c_schm_desc.arr);	     


	       		strcpy(c_lot_range.arr,c_osd_lwr_rng_lotsz.arr);
	       		strcat(c_lot_range.arr, " - ");
	       		strcat(c_lot_range.arr,c_osd_upr_rng_lotsz.arr);
	       		strcat(c_lot_range.arr, " Intra Day ");
	       		fn_userlog( c_ServiceName, " Value of c_lot_range in -SL : [%s] ",c_lot_range.arr);	     

	       		strcpy(c_below_range.arr," < ");
	       		strcat(c_below_range.arr,c_osd_lwr_rng_lotsz.arr);
	       		strcat(c_below_range.arr, " Intra Day ");
	       		fn_userlog( c_ServiceName, " Value of c_below_range in -SL : [%s] ",c_below_range.arr);	     

	       		strcpy(c_above_range.arr," > ");
	       		strcat(c_above_range.arr,c_osd_upr_rng_lotsz.arr);
	       		strcat(c_above_range.arr, " Lots Intra Day ");
	       		fn_userlog( c_ServiceName, " Value of c_above_range in -SL : [%s] ",c_above_range.arr);	     

	       		strcpy(c_lot_range_charges.arr,c_osd_brkr_rng_rate.arr);
	       		strcat(c_lot_range_charges.arr, "  ");
	       		strcat(c_lot_range_charges.arr,c_osd_chrg_base.arr);
	       		fn_userlog( c_ServiceName, " Value of c_lot_range_charges in -SL : [%s] ",c_lot_range_charges.arr);	     

	         }

	         if(i_loop_cnt == 3)
	    		 {
	       		strcpy(c_above_range_charges.arr,c_osd_brkr_rng_rate.arr);
	       		strcat(c_above_range_charges.arr, "  ");
	     		  strcat(c_above_range_charges.arr, c_osd_chrg_base.arr);
	 		      fn_userlog( c_ServiceName, " Value of c_above_range_charges in -SL : [%s] ",c_above_range_charges.arr);	     

			      strcpy(c_carry_fwd_charges.arr,c_osm_carry_frwd.arr);
	  		    strcat(c_carry_fwd_charges.arr, "  ");
	    		  strcat(c_carry_fwd_charges.arr, c_osd_chrg_base.arr);
	     		  fn_userlog( c_ServiceName, " Value of c_carry_fwd_charges in -SL : [%s] ",c_carry_fwd_charges.arr);	     

	         }
		       fn_userlog(c_ServiceName,"Completed One Loop for scheme details in -SL ");

	       }
		     if( DEBUG_MSG_LVL_3 )	
		     {
		   		fn_userlog(c_ServiceName,"Value of c_osm_schm_code after loop in -SL     [%s] ",c_osm_schm_code.arr);
		      fn_userlog(c_ServiceName,"Value of c_below_range_charges  after loop in -SL [%s] ",c_below_range_charges.arr);
		      fn_userlog(c_ServiceName,"Value of c_schm_desc at start after loop in -SL [%s] ",c_schm_desc.arr);
		   		fn_userlog(c_ServiceName,"Value of c_below_range at start after loop in -SL [%s] ",c_below_range.arr);
		   		fn_userlog(c_ServiceName,"Value of c_lot_range at start after loop in -SL [%s] ",c_lot_range.arr);
		   		fn_userlog(c_ServiceName,"Value of c_lot_range_charges  after loop in -SL  [%s] ",c_lot_range_charges.arr);
		   		fn_userlog(c_ServiceName,"Value of c_above_range_charges after loop in -SL   [%s] ",c_above_range_charges.arr);
		   		fn_userlog(c_ServiceName,"Value of c_carry_fwd_charges  after loop in -SL  [%s] ",c_carry_fwd_charges.arr);
				 }

	     	 strcpy(c_lot_charges_range.arr,c_lot_range.arr);
	       strcat(c_lot_charges_range.arr, "|*");
	       strcat(c_lot_charges_range.arr, c_lot_range_charges.arr);
	       fn_userlog( c_ServiceName, " Value of c_lot_charges_range : [%s] ",c_lot_charges_range.arr);	     

				 strcpy(c_lot_charges_min.arr,c_below_range.arr);
	       strcat(c_lot_charges_min.arr, "|*");
	       strcat(c_lot_charges_min.arr, c_below_range_charges.arr);
	       fn_userlog( c_ServiceName, " Value of c_lot_charges_min : [%s] ",c_lot_charges_min.arr);	     

		     strcpy(c_lot_charges_max.arr,c_above_range.arr);
	       strcat(c_lot_charges_max.arr, "|*");
	       strcat(c_lot_charges_max.arr, c_above_range_charges.arr);
	       fn_userlog( c_ServiceName, " Value of c_lot_charges_max : [%s] ",c_lot_charges_max.arr);	     


  		/**************  Ver 2.2 for Scheme Details End ******************************/

     	if( DEBUG_MSG_LVL_5 )
     	{
      	fn_userlog(c_ServiceName,"Value for OPM of c_period in -SL     [%s] ",c_period.arr);
	      fn_userlog(c_ServiceName,"Value for OPM of c_osm_schm_code in -SL     [%s] ",c_osm_schm_code.arr);
      	fn_userlog(c_ServiceName,"Value for OPM of c_schm_desc in -SL     [%s] ",c_schm_desc.arr);
      	fn_userlog(c_ServiceName,"Value for OPM of c_lot_charges_range in -SL     [%s] ",c_lot_charges_range.arr);
      	fn_userlog(c_ServiceName,"Value for OPM of c_lot_charges_min in -SL     [%s] ",c_lot_charges_min.arr);
      	fn_userlog(c_ServiceName,"Value for OPM of c_lot_charges_max in -SL     [%s] ",c_lot_charges_max.arr);
      	fn_userlog(c_ServiceName,"Value for OPM of c_carry_fwd_charges in -SL      [%s] ",c_carry_fwd_charges.arr);
     	}

      /*****************   Scheme Details Main Block Ends   **************************/
  
     }                     

     /*****    Ver 2.2 Ends  ***/


	
    i_berr[0]   = Fadd32(ptr_fml_Obuf,FFO_XCHNG_CD,(char *)c_exchange_cd,0) ;
    i_berr[1]   = Fadd32(ptr_fml_Obuf,FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no,0) ;
    i_berr[2]   = Fadd32(ptr_fml_Obuf,FFO_ORDR_RFRNC,(char *)c_ordr_rfrnc,0) ;
    i_berr[3]   = Fadd32(ptr_fml_Obuf,FFO_TRD_DT,(char *)c_trd_date.arr,0) ;
    i_berr[4]   = Fadd32(ptr_fml_Obuf,FFO_TRD_FLW,(char *)&c_trade_flow,0) ;
    i_berr[5]   = Fadd32(ptr_fml_Obuf,FFO_UNDRLYNG,(char *)c_unlying,0) ;
    i_berr[6]   = Fadd32(ptr_fml_Obuf,FFO_EXPRY_DT,(char *)c_exp_date.arr,0) ;
    i_berr[7]   = Fadd32(ptr_fml_Obuf,FFO_OPT_TYP,(char *)&c_opt_typ,0) ;
    i_berr[8]   = Fadd32(ptr_fml_Obuf,FFO_STRK_PRC,(char *)&l_strk_prc,0) ;
    i_berr[9]   = Fadd32(ptr_fml_Obuf,FFO_EXER_TYP,(char *)&c_exrc_typ,0) ;
    i_berr[10]  = Fadd32(ptr_fml_Obuf,FFO_PRDCT_TYP,(char *)&c_prd_typ,0) ;
    i_berr[11]  = Fadd32(ptr_fml_Obuf,FFO_INSTRMNT_TYP,(char *)c_indstk,0) ;
    i_berr[12]  = Fadd32(ptr_fml_Obuf,FFO_EXEC_QTY,(char *)&l_exctd_qty,0) ;
    i_berr[13]  = Fadd32(ptr_fml_Obuf,FFO_EXCTD_RT,(char *)&l_exctd_rt,0) ;
    i_berr[14]  = Fadd32(ptr_fml_Obuf,FFO_AMOUNT,(char *)&d_value,0) ;
    i_berr[15]  = Fadd32(ptr_fml_Obuf,FFO_FRS_BRKG,(char *)&l_incl_all,0) ;
    i_berr[16]  = Fadd32(ptr_fml_Obuf,FFO_RTN_STTS,(char *)&l_stt,0);
    i_berr[17]  = Fadd32(ptr_fml_Obuf,FFO_HGH_INDX_VAL,(char *)&l_tran_chrg,0) ;
    i_berr[18]  = Fadd32(ptr_fml_Obuf,FFO_STLMNT_PRC,(char *)&l_stmp_duty,0) ;
    i_berr[19]  = Fadd32(ptr_fml_Obuf,FFO_AVRG_TRD_PRC,(char *)&l_sebi_tt,0) ;
    i_berr[20]  = Fadd32(ptr_fml_Obuf,FFO_BRKRG_VL,(char *)&l_brkg_val,0) ;
    i_berr[21]  = Fadd32(ptr_fml_Obuf,FFO_LOW_PRC,(char *)&l_srv_tax,0) ;

    for(i=0;i<=18;i++)
    {
      if(i_berr[i] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd for i [%d]",i);
        fn_errlog( c_ServiceName, "S31285", FMLMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
        EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpcommit(0);      /***  Ver 1.9 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }


    /**** Ver 2.2 - Additional FML's Start ***********************/

		i_buf_len = sizeof(c_osm_schm_code) +	
						    sizeof(c_period) +
		    				sizeof(c_schm_desc) +
			    			sizeof(c_lot_charges_range)+
			    			sizeof(c_lot_charges_min)+
			    			sizeof(c_lot_charges_max)+
			    			sizeof(c_carry_fwd_charges.arr)+
								sizeof(i_total_lots)+
								sizeof(i_intra_day_lots)+
								sizeof(i_inrange_lots)+
								sizeof(i_below_range_lots)+
								sizeof(i_above_range_lots)+
								sizeof(i_obc_carry_fwd_lot)+
								sizeof(l_inrange_charges)+
								sizeof(l_below_range_charges)+
								sizeof(l_above_range_charges)+
								sizeof(l_carry_fwd_charges)+
								sizeof(l_total_charges)+
								+ 512;	

    if(Fneeded32(1,i_buf_len) > Funused32(ptr_fml_Obuf))
    {
        ptr_fml_Obuf = (FBFR32 *)tprealloc((char *)ptr_fml_Obuf,
                                        (Fsizeof32(ptr_fml_Obuf) + i_buf_len * 5)); /* Multiplied by 5 in Ver 4.4 */
        if(ptr_fml_Obuf == NULL)
        {
          fn_errlog( c_ServiceName, "S31290", FMLMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
          EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
    }

		i_err[0] = Fadd32(ptr_fml_Obuf,FFO_ORD_TOT_QTY,(char *)&i_total_lots,0) ;
		i_err[1] = Fadd32(ptr_fml_Obuf,FFO_TOT_QTY_TRDD,(char *)&i_intra_day_lots,0) ;
		i_err[2] = Fadd32(ptr_fml_Obuf,FFO_EXCR_EXCTD_QTY,(char *)&i_inrange_lots,0) ;
		i_err[3] = Fadd32(ptr_fml_Obuf,FFO_MIN_LOT_QTY,(char *)&i_below_range_lots,0) ;
		i_err[4] = Fadd32(ptr_fml_Obuf,FFO_FRS_QTY,(char *)&i_above_range_lots,0) ;
		i_err[5] = Fadd32(ptr_fml_Obuf,FFO_EXCR_REQ_QTY,(char *)&i_obc_carry_fwd_lot,0) ;
		i_err[6] = Fadd32(ptr_fml_Obuf,FFO_NET_TRD_VAL,(char *)&l_inrange_charges,0) ;
		i_err[7] = Fadd32(ptr_fml_Obuf,FFO_BASE_ORD_VAL,(char *)&l_below_range_charges,0) ;
		i_err[8] = Fadd32(ptr_fml_Obuf,FFO_INTERVAL,(char *)&l_above_range_charges,0) ;			      
		i_err[9] = Fadd32(ptr_fml_Obuf,FFO_C_ORG_OPN_VAL,(char *)&l_carry_fwd_charges,0) ;
		i_err[10] = Fadd32(ptr_fml_Obuf,FFO_TOT_VAL_TRDD,(char *)&l_total_charges,0) ;

		i_err[11] = Fadd32(ptr_fml_Obuf,FFO_SOURCE_FLG,(char *)&c_source_flg,0) ;
		i_err[12] = Fadd32(ptr_fml_Obuf,FFO_RCRD_DT,(char *)c_period.arr,0) ;
		i_err[13] = Fadd32(ptr_fml_Obuf,FFO_INDX_CD,(char *)c_osm_schm_code.arr,0) ;
		i_err[14] = Fadd32(ptr_fml_Obuf,FFO_PRDCT_DESC,(char *)c_schm_desc.arr,0) ;
		i_err[15] = Fadd32(ptr_fml_Obuf,FFO_TOTAL_COST,(char *)c_lot_charges_range.arr,0) ;
		i_err[16] = Fadd32(ptr_fml_Obuf,FFO_LOW_PT,(char *)c_lot_charges_min.arr,0) ;
		i_err[17] = Fadd32(ptr_fml_Obuf,FFO_HIGH_PT,(char *)c_lot_charges_max.arr,0) ;
		i_err[18] = Fadd32(ptr_fml_Obuf,FFO_CSH_INFLW,(char *)c_carry_fwd_charges.arr,0) ;

    for(i=0;i<=18;i++)											
    {
      if(i_err[i] == -1)
      {
        fn_userlog(c_ServiceName,"Error in Fadd of OPM-scheme details for i [%d]",i);
        fn_errlog( c_ServiceName, "S31295", FMLMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
        EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    		tpcommit(0);      
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }


    /**** Ver 2.2 - Additional FML's End ***********************/



	MEMSET(c_trdbk_seq);

  EXEC SQL
   	SELECT TO_CHAR(EXG_NXT_TRD_DT,'YYYYMMDD')||LPAD(TO_CHAR(DECODE((LAST_NUMBER - 1),MAX_VALUE,0,(LAST_NUMBER - 1))),8,'0')
   	INTO  :c_trdbk_seq
   	FROM  USER_SEQUENCES,EXG_XCHNG_MSTR
   	WHERE SEQUENCE_NAME = 'DFT_DL_FO_TRDBK_SEQ'
		AND		EXG_XCHNG_CD	= :c_exchange_cd;  /** Ver -2.1 -Removed hardcoding of e\xg_cd of 'NFO' **/

  	SETNULL(c_trdbk_seq);

  	if(DEBUG_MSG_LVL_5)
  	{
   		fn_userlog(c_ServiceName,"Trade Book Sequence number is :%s:",c_trdbk_seq.arr);
  	}

  	if ( Fadd32(ptr_fml_Obuf,FFO_REF_NO,(char *)c_trdbk_seq.arr,0) == -1 )
  	{
   		fn_userlog(c_ServiceName,"Error in Fadd for i [%d]",i);
   		fn_errlog( c_ServiceName, "S31300", FMLMSG, c_errmsg  );
   	  EXEC SQL CLOSE :sys_cursor;/*** Ver 3.9 ***/ 
      EXEC SQL FREE  :sys_cursor; /*** Ver 3.9 ***/
    	tpfree ( ( char * ) ptr_fml_Obuf );
   		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);      /***  Ver 1.9 ***/
   		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

	}
  /*** Ver 3.8 Starts ***/

  if ( c_spl_flg == 'M' )
  {
    if( DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Inside 'M' Mobile App Trade Book .");
    }

    if (DEBUG_MSG_LVL_0)
    {
     fn_userlog(c_ServiceName," Product Type Is :%c:",c_product_typ);
    }

    if(i_hist_flg == 0)
    {
      if( DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside i_hist_flg = 0");
      }

      if( strcmp(c_mtch_accnt_no, "*" ) == 0 )
      {
        if( c_user_id[0] == BPID )
        {
          EXEC SQL  EXECUTE
            BEGIN
            OPEN    :sys_cursor FOR
              SELECT
                FTD_XCHNG_CD,
                FTD_CLM_MTCH_ACCNT,
                FTD_ORDR_RFRNC,
                FTD_TRD_FLW,
                LTRIM(RTRIM(FTD_UNDRLYNG)),
                FTD_INDSTK,
                TRUNC(FTD_TRD_DT),
                TRUNC(FTD_EXPRY_DT),
                FTD_PRDCT_TYP,
                FTD_OPT_TYP,
                FTD_EXER_TYP,
                FTD_STRK_PRC,
                SUM(FTD_EXCTD_QTY),
                SUM(NVL(FTD_BRKG,0)),
                SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
                SUM(NVL(FTD_STT,0)),
                SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),		/** Ver 4.1 **/
                SUM(NVL(FTD_SEBI_TT,0)),
                SUM(NVL(FTD_TRAN_CHRG,0)),
                SUM(NVL(FTD_STAMP_DUTY,0)),
                FTD_CNTRCTNT_NMBR
        FROM    FTD_FO_TRD_DTLS,CLM_CLNT_MSTR
        WHERE   CLM_BP_ID = :c_user_id
        AND     FTD_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
        AND     FTD_XCHNG_CD       LIKE :c_exchange_cd
        AND     TRUNC(FTD_TRD_DT)  = :c_to_dt
        /*AND     FTD_PRDCT_TYP =:c_product_typ*/
				AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/	
        GROUP BY  FTD_XCHNG_CD,
                  FTD_CLM_MTCH_ACCNT,
                  FTD_ORDR_RFRNC,
                  FTD_TRD_FLW,
                  FTD_UNDRLYNG,
                  FTD_INDSTK,
                  TRUNC(FTD_TRD_DT),
                  TRUNC(FTD_EXPRY_DT),
                  FTD_PRDCT_TYP,
                  FTD_OPT_TYP,
                  FTD_EXER_TYP,
                  FTD_STRK_PRC,
                  FTD_CNTRCTNT_NMBR
       ORDER BY FTD_ORDR_RFRNC DESC;

      END;
    END-EXEC;
        }
        else
        {
          EXEC SQL  EXECUTE
            BEGIN
            OPEN    :sys_cursor FOR
              SELECT  FTD_XCHNG_CD,
                FTD_CLM_MTCH_ACCNT,
                FTD_ORDR_RFRNC,
                FTD_TRD_FLW,
                LTRIM(RTRIM(FTD_UNDRLYNG)),
                FTD_INDSTK,
                TRUNC(FTD_TRD_DT),
                TRUNC(FTD_EXPRY_DT),
                FTD_PRDCT_TYP,
                FTD_OPT_TYP,
                FTD_EXER_TYP,
                FTD_STRK_PRC,
                SUM(FTD_EXCTD_QTY),
                SUM(NVL(FTD_BRKG,0)),
                SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
                SUM(NVL(FTD_STT,0)),
                SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),			/** Ver 4.1 **/
                SUM(NVL(FTD_SEBI_TT,0)),
                SUM(NVL(FTD_TRAN_CHRG,0)),
                SUM(NVL(FTD_STAMP_DUTY,0)),
                FTD_CNTRCTNT_NMBR
        FROM    FTD_FO_TRD_DTLS,UAC_USR_ACCNTS
        WHERE   UAC_USR_ID  = :c_user_id
        AND     FTD_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
        AND     FTD_XCHNG_CD       LIKE  :c_exchange_cd
        AND     TRUNC(FTD_TRD_DT)  = :c_to_dt
        /*AND     FTD_PRDCT_TYP = :c_product_typ*/
				AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
        GROUP BY  FTD_XCHNG_CD,
                  FTD_CLM_MTCH_ACCNT,
                  FTD_ORDR_RFRNC,
                  FTD_TRD_FLW,
                  FTD_UNDRLYNG,
                  FTD_INDSTK,
                  TRUNC(FTD_TRD_DT),
                  TRUNC(FTD_EXPRY_DT),
                  FTD_PRDCT_TYP,
                  FTD_OPT_TYP,
                  FTD_EXER_TYP,
                  FTD_STRK_PRC,
                  FTD_CNTRCTNT_NMBR
        ORDER BY FTD_ORDR_RFRNC DESC;
      END;
    END-EXEC;
        }
      }
      else
      {
        EXEC SQL  EXECUTE
            BEGIN
            OPEN    :sys_cursor FOR
              SELECT  FTD_XCHNG_CD,
                FTD_CLM_MTCH_ACCNT,
                FTD_ORDR_RFRNC,
                FTD_TRD_FLW,
                LTRIM(RTRIM(FTD_UNDRLYNG)),
                FTD_INDSTK,
                TRUNC(FTD_TRD_DT),
                TRUNC(FTD_EXPRY_DT),
                FTD_PRDCT_TYP,
                FTD_OPT_TYP,
                FTD_EXER_TYP,
                FTD_STRK_PRC,
                SUM(FTD_EXCTD_QTY),
                SUM(NVL(FTD_BRKG,0)),
                SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
                SUM(NVL(FTD_STT,0)),
                SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),			/** Ver 4.1 **/
                SUM(NVL(FTD_SEBI_TT,0)),
                SUM(NVL(FTD_TRAN_CHRG,0)),
                SUM(NVL(FTD_STAMP_DUTY,0)),
                FTD_CNTRCTNT_NMBR
        FROM    FTD_FO_TRD_DTLS
        WHERE   FTD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
        AND     FTD_XCHNG_CD       LIKE  :c_exchange_cd
        AND     TRUNC(FTD_TRD_DT)  = :c_to_dt
        /* AND     FTD_PRDCT_TYP = :c_product_typ*/
				AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
         GROUP BY  FTD_XCHNG_CD,
                  FTD_CLM_MTCH_ACCNT,
                  FTD_ORDR_RFRNC,
                  FTD_TRD_FLW,
                  FTD_UNDRLYNG,
                  FTD_INDSTK,
                  TRUNC(FTD_TRD_DT),
                  TRUNC(FTD_EXPRY_DT),
                  FTD_PRDCT_TYP,
                  FTD_OPT_TYP,
                  FTD_EXER_TYP,
                  FTD_STRK_PRC,
                  FTD_CNTRCTNT_NMBR
        ORDER BY FTD_ORDR_RFRNC DESC;

      END;
    END-EXEC;

      }

    }
    else
    {
      if( DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Inside i_hist_flg != 0");
      }

      if( strcmp(c_mtch_accnt_no, "*" ) == 0 )
      {
        if( c_user_id[0] == BPID )
        {
          EXEC SQL  EXECUTE
            BEGIN
              OPEN  :sys_cursor FOR
                SELECT  FTD_XCHNG_CD,
                    FTD_CLM_MTCH_ACCNT,
                    FTD_ORDR_RFRNC,
                    FTD_TRD_FLW,
                    LTRIM(RTRIM(FTD_UNDRLYNG)),
                    FTD_INDSTK,
                    TRUNC(FTD_TRD_DT),
                    TRUNC(FTD_EXPRY_DT),
                    FTD_PRDCT_TYP,
                    FTD_OPT_TYP,
                    FTD_EXER_TYP,
                    FTD_STRK_PRC,
                    SUM(FTD_EXCTD_QTY),
                    SUM(NVL(FTD_BRKG,0)),
                    SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
                    SUM(NVL(FTD_STT,0)),
                    SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),				/** Ver 4.1 **/
                    SUM(NVL(FTD_SEBI_TT,0)),
                    SUM(NVL(FTD_TRAN_CHRG,0)),
                    SUM(NVL(FTD_STAMP_DUTY,0)),
                    FTD_CNTRCTNT_NMBR
              FROM  FTD_FO_TRD_DTLS,CLM_CLNT_MSTR
              WHERE CLM_BP_ID = :c_user_id
              AND  FTD_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
              AND  FTD_XCHNG_CD       LIKE :c_exchange_cd
              AND  TRUNC(FTD_TRD_DT)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
              AND  TRUNC(FTD_TRD_DT)  <= to_date(:c_to_dt,'dd-mon-yyyy')
              /*AND     FTD_PRDCT_TYP = :c_product_typ*/
							AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
              GROUP BY FTD_XCHNG_CD,
                    FTD_CLM_MTCH_ACCNT,
                    FTD_ORDR_RFRNC,
                    FTD_TRD_FLW,
                    FTD_UNDRLYNG,
                    FTD_INDSTK,
                    TRUNC(FTD_TRD_DT),
                    TRUNC(FTD_EXPRY_DT),
                    FTD_PRDCT_TYP,
                    FTD_OPT_TYP,
                    FTD_EXER_TYP,
                    FTD_STRK_PRC,
                    FTD_CNTRCTNT_NMBR

             UNION ALL

              SELECT  FTD_XCHNG_CD,
                      FTD_CLM_MTCH_ACCNT,
                      FTD_ORDR_RFRNC,
                      FTD_TRD_FLW,
                      LTRIM(RTRIM(FTD_UNDRLYNG)),
                      FTD_INDSTK,
                      TRUNC(FTD_TRD_DT),
                      TRUNC(FTD_EXPRY_DT),
                      FTD_PRDCT_TYP,
                      FTD_OPT_TYP,
                      FTD_EXER_TYP,
                      FTD_STRK_PRC,
                      SUM(FTD_EXCTD_QTY),
                      SUM(NVL(FTD_BRKG,0)),
                      SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
                      SUM(NVL(FTD_STT,0)),
                      SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),			/** ver 4.1 **/
                      SUM(NVL(FTD_SEBI_TT,0)),
                      SUM(NVL(FTD_TRAN_CHRG,0)),
                      SUM(NVL(FTD_STAMP_DUTY,0)),
                      FTD_CNTRCTNT_NMBR
               FROM   FTD_FO_TRD_DTLS_HSTRY,CLM_CLNT_MSTR
               WHERE  CLM_BP_ID = :c_user_id
               AND    FTD_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
               AND    FTD_XCHNG_CD       LIKE :c_exchange_cd
               AND    TRUNC(FTD_TRD_DT)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                 AND  TRUNC(FTD_TRD_DT)  <= to_date(:c_to_dt,'dd-mon-yyyy')
             /*AND     FTD_PRDCT_TYP = :c_product_typ*/
						 AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
             GROUP BY FTD_XCHNG_CD,
                      FTD_CLM_MTCH_ACCNT,
                      FTD_ORDR_RFRNC,
                      FTD_TRD_FLW,
                      FTD_UNDRLYNG,
                      FTD_INDSTK,
                      TRUNC(FTD_TRD_DT),
                      TRUNC(FTD_EXPRY_DT),
                      FTD_PRDCT_TYP,
                      FTD_OPT_TYP,
                      FTD_EXER_TYP,
                      FTD_STRK_PRC,
                      FTD_CNTRCTNT_NMBR
            ORDER BY FTD_ORDR_RFRNC DESC;
          END;
        END-EXEC;
      }
      else
      {
        EXEC SQL  EXECUTE
            BEGIN
              OPEN  :sys_cursor FOR
                SELECT  FTD_XCHNG_CD,
                    FTD_CLM_MTCH_ACCNT,
                    FTD_ORDR_RFRNC,
                    FTD_TRD_FLW,
                    LTRIM(RTRIM(FTD_UNDRLYNG)),
                    FTD_INDSTK,
                    TRUNC(FTD_TRD_DT),
                    TRUNC(FTD_EXPRY_DT),
                    FTD_PRDCT_TYP,
                    FTD_OPT_TYP,
                    FTD_EXER_TYP,
                    FTD_STRK_PRC,
                    SUM(FTD_EXCTD_QTY),
                    SUM(NVL(FTD_BRKG,0)),
                    SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
                    SUM(NVL(FTD_STT,0)),
                    SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),			/*** Ver 4.1 **/
                    SUM(NVL(FTD_SEBI_TT,0)),
                    SUM(NVL(FTD_TRAN_CHRG,0)),
                    SUM(NVL(FTD_STAMP_DUTY,0)),
                    FTD_CNTRCTNT_NMBR
              FROM  FTD_FO_TRD_DTLS,UAC_USR_ACCNTS
              WHERE UAC_USR_ID  = :c_user_id
              AND  FTD_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
              AND  FTD_XCHNG_CD       LIKE :c_exchange_cd
              AND  TRUNC(FTD_TRD_DT)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
              AND  TRUNC(FTD_TRD_DT)  <= to_date(:c_to_dt,'dd-mon-yyyy')
              /*AND     FTD_PRDCT_TYP = :c_product_typ*/
							AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
              GROUP BY  FTD_XCHNG_CD,
                    FTD_CLM_MTCH_ACCNT,
                    FTD_ORDR_RFRNC,
                    FTD_TRD_FLW,
                    FTD_UNDRLYNG,
                    FTD_INDSTK,
                    TRUNC(FTD_TRD_DT),
                    TRUNC(FTD_EXPRY_DT),
                    FTD_PRDCT_TYP,
                    FTD_OPT_TYP,
                    FTD_EXER_TYP,
                    FTD_STRK_PRC,
                    FTD_CNTRCTNT_NMBR

             UNION ALL
             SELECT   FTD_XCHNG_CD,
                      FTD_CLM_MTCH_ACCNT,
                      FTD_ORDR_RFRNC,
                      FTD_TRD_FLW,
                      LTRIM(RTRIM(FTD_UNDRLYNG)),
                      FTD_INDSTK,
                      TRUNC(FTD_TRD_DT),
                      TRUNC(FTD_EXPRY_DT),
                      FTD_PRDCT_TYP,
                      FTD_OPT_TYP,
                      FTD_EXER_TYP,
                      FTD_STRK_PRC,
                      SUM(FTD_EXCTD_QTY),
                      SUM(NVL(FTD_BRKG,0)),
                      SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
                      SUM(NVL(FTD_STT,0)),
                      SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),					/** Ver 4.1 **/
                      SUM(NVL(FTD_SEBI_TT,0)),
                      SUM(NVL(FTD_TRAN_CHRG,0)),
                      SUM(NVL(FTD_STAMP_DUTY,0)),
                      FTD_CNTRCTNT_NMBR
               FROM   FTD_FO_TRD_DTLS_HSTRY,UAC_USR_ACCNTS
               WHERE  UAC_USR_ID  = :c_user_id
               AND    FTD_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
               AND    FTD_XCHNG_CD       LIKE :c_exchange_cd
               AND    TRUNC(FTD_TRD_DT)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
               AND    TRUNC(FTD_TRD_DT)  <= to_date(:c_to_dt,'dd-mon-yyyy')
             /*AND     FTD_PRDCT_TYP =:c_product_typ*/
						AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
             GROUP BY FTD_XCHNG_CD,
                      FTD_CLM_MTCH_ACCNT,
                      FTD_ORDR_RFRNC,
                      FTD_TRD_FLW,
                      FTD_UNDRLYNG,
                      FTD_INDSTK,
                      TRUNC(FTD_TRD_DT),
                      TRUNC(FTD_EXPRY_DT),
                      FTD_PRDCT_TYP,
                      FTD_OPT_TYP,
                      FTD_EXER_TYP,
                      FTD_STRK_PRC,
                      FTD_CNTRCTNT_NMBR
            ORDER BY FTD_ORDR_RFRNC DESC;

          END;
        END-EXEC;
      }
    }
    else
    {
      EXEC SQL  EXECUTE
            BEGIN
              OPEN  :sys_cursor FOR
                SELECT  FTD_XCHNG_CD,
                    FTD_CLM_MTCH_ACCNT,
                    FTD_ORDR_RFRNC,
                    FTD_TRD_FLW,
                    LTRIM(RTRIM(FTD_UNDRLYNG)),
                    FTD_INDSTK,
                    TRUNC(FTD_TRD_DT),
                    TRUNC(FTD_EXPRY_DT),
                    FTD_PRDCT_TYP,
                    FTD_OPT_TYP,
                    FTD_EXER_TYP,
                    FTD_STRK_PRC,
                    SUM(FTD_EXCTD_QTY),
                    SUM(NVL(FTD_BRKG,0)),
                    SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
                    SUM(NVL(FTD_STT,0)),
                    SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),					/***  Ver 4.1 **/
                    SUM(NVL(FTD_SEBI_TT,0)),
                    SUM(NVL(FTD_TRAN_CHRG,0)),
                    SUM(NVL(FTD_STAMP_DUTY,0)),
                    FTD_CNTRCTNT_NMBR
              FROM  FTD_FO_TRD_DTLS
              WHERE FTD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
              AND  FTD_XCHNG_CD       LIKE  :c_exchange_cd
              AND  TRUNC(FTD_TRD_DT)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
              AND  TRUNC(FTD_TRD_DT)  <= to_date(:c_to_dt,'dd-mon-yyyy')
              /*AND     FTD_PRDCT_TYP = :c_product_typ*/
							AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
              GROUP BY FTD_XCHNG_CD,
                    FTD_CLM_MTCH_ACCNT,
                    FTD_ORDR_RFRNC,
                    FTD_TRD_FLW,
                    FTD_UNDRLYNG,
                    FTD_INDSTK,
                    TRUNC(FTD_TRD_DT),
                    TRUNC(FTD_EXPRY_DT),
                    FTD_PRDCT_TYP,
                    FTD_OPT_TYP,
                    FTD_EXER_TYP,
                    FTD_STRK_PRC,
                    FTD_CNTRCTNT_NMBR

             UNION ALL

              SELECT  FTD_XCHNG_CD,
                      FTD_CLM_MTCH_ACCNT,
                      FTD_ORDR_RFRNC,
                      FTD_TRD_FLW,
                      LTRIM(RTRIM(FTD_UNDRLYNG)),
                      FTD_INDSTK,
                      TRUNC(FTD_TRD_DT),
                      TRUNC(FTD_EXPRY_DT),
                      FTD_PRDCT_TYP,
                      FTD_OPT_TYP,
                      FTD_EXER_TYP,
                      FTD_STRK_PRC,
                      SUM(FTD_EXCTD_QTY),
                      SUM(NVL(FTD_BRKG,0)),
                      SUM(FTD_EXCTD_RT * FTD_EXCTD_QTY),
                      SUM(NVL(FTD_STT,0)),
                      SUM(NVL(FTD_SRC_TX,0)+nvl(ftd_brkrg_igst,0)+nvl(ftd_brkrg_cgst,0)+nvl(ftd_brkrg_sgst,0)+nvl(ftd_brkrg_ugst,0)),				/** Ver 4.1 **/
                      SUM(NVL(FTD_SEBI_TT,0)),
                      SUM(NVL(FTD_TRAN_CHRG,0)),
                      SUM(NVL(FTD_STAMP_DUTY,0)),
                      FTD_CNTRCTNT_NMBR
               FROM   FTD_FO_TRD_DTLS_HSTRY
               WHERE  FTD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
               AND  FTD_XCHNG_CD       LIKE :c_exchange_cd
               AND  TRUNC(FTD_TRD_DT)  >= to_date(:c_frm_dt,'dd-mon-yyyy')
                 AND  TRUNC(FTD_TRD_DT)  <= to_date(:c_to_dt,'dd-mon-yyyy')
             /*AND     FTD_PRDCT_TYP = :c_product_typ*/
							AND  ftd_prdct_typ      LIKE :c_product_typ /*** ver 4.7 ***/
             GROUP BY FTD_XCHNG_CD,
                      FTD_CLM_MTCH_ACCNT,
                      FTD_ORDR_RFRNC,
                      FTD_TRD_FLW,
                      FTD_UNDRLYNG,
                      FTD_INDSTK,
                      TRUNC(FTD_TRD_DT),
                      TRUNC(FTD_EXPRY_DT),
                      FTD_PRDCT_TYP,
                      FTD_OPT_TYP,
                      FTD_EXER_TYP,
                      FTD_STRK_PRC,
                      FTD_CNTRCTNT_NMBR
            ORDER BY FTD_ORDR_RFRNC DESC;

          END;
        END-EXEC;
    }

  }

   if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31305", SQLMSG, c_errmsg  );
      EXEC SQL FREE :sys_cursor;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);      /***  Ver 1.9 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN  * i_rec_cnt * 5); /* multiplied by 5 in Ver 4.4 */ 

    if ( ptr_fml_Obuf == NULL )
    {
      fn_errlog( c_ServiceName, "S31310", FMLMSG, c_errmsg  );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if( DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName," Before Fetch ");
    }

    counter = 1;

    for( ; ; )
    {
      if( DEBUG_MSG_LVL_5)
      {
        fn_userlog(c_ServiceName," Value of counter is [%d] ",counter);
      }

      SETLEN(c_exp_date);
      SETLEN(c_trd_date);

       EXEC SQL FETCH :sys_cursor
          INTO  :c_xchng_cd,
                :c_mtch_accnt_no,
                :c_ordr_rfrnc,
                :c_trade_flow,
                :c_unlying,
                :c_indstk,
                :c_trd_date,
                :c_exp_date,
                :c_prd_typ,
                :c_opt_typ,
                :c_exrc_typ,
                :l_strk_prc,
                :l_exctd_qty,
                :l_brkg_val,
                :d_value,
                :l_stt,
                :l_srv_tax,
                :l_sebi_tt,
                :l_tran_chrg,
                :l_stmp_duty,
                :c_cntrctnt_nmbr;

      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          fn_userlog(c_ServiceName," Inside NO DATA FOUND ");
          break;
        }
        else
        {
          fn_errlog( c_ServiceName, "S31315", SQLMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpcommit(0);
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }

      SETNULL(c_exp_date);
      SETNULL(c_trd_date);

      rtrim(c_unlying);

      /*** Commented in Ver 3.7 ***

      l_incl_all = l_brkg_val + l_stt + l_srv_tax  +l_sebi_tt + l_tran_chrg + l_stmp_duty;

      ***/

      l_incl_all = l_brkg_val;   /*** Ver 3.7 ***/
      l_sum_tax  = l_stt + l_srv_tax  +l_sebi_tt + l_tran_chrg + l_stmp_duty;   /*** Ver 3.7 ***/

      l_exctd_rt  = d_value / l_exctd_qty;

      if( DEBUG_MSG_LVL_0)  /*** Testing ***/
      {
       fn_userlog(c_ServiceName,"l_incl_all Is :%ld:",l_incl_all);
       fn_userlog(c_ServiceName,"l_sum_tax Is  :%ls:",l_sum_tax);
      }

      if( DEBUG_MSG_LVL_5)
      {
        fn_userlog(c_ServiceName,"c_xchng_cd Is :%s:",c_xchng_cd);
        fn_userlog(c_ServiceName,"c_prd_typ Is :%c:",c_prd_typ);
        fn_userlog(c_ServiceName,"c_unlying Is :%s:",c_unlying);
        fn_userlog(c_ServiceName,"c_exp_date Is :%s:",c_exp_date.arr);
        fn_userlog(c_ServiceName,"c_exrc_typ Is :%c:",c_exrc_typ);
        fn_userlog(c_ServiceName,"c_opt_typ Is :%c:",c_opt_typ);
        fn_userlog(c_ServiceName,"l_strk_prc Is :%d:",l_strk_prc);
      }


      EXEC SQL
        SELECT  FTQ_LST_TRD_PRC
        INTO    :d_ltp
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
        AND                     FTQ_PRDCT_TYP = decode(:c_prd_typ,'P','F','U','F',:c_prd_typ)
        AND     FTQ_UNDRLYNG  = :c_unlying
        AND     FTQ_EXPRY_DT  = :c_exp_date
        AND     FTQ_EXER_TYP  = :c_exrc_typ
        AND     FTQ_OPT_TYP   = :c_opt_typ
        AND     FTQ_STRK_PRC  = :l_strk_prc ;

      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S31320", SQLMSG, c_errmsg  );
        EXEC SQL FREE :sys_cursor;
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpcommit(0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }


      d_ltp = d_ltp / 100;
      l_ltp = d_ltp * 100;

      if( DEBUG_MSG_LVL_5)
      {
        fn_userlog(c_ServiceName,"Value of c_xchng_cd Is[%s]",c_xchng_cd);
        fn_userlog(c_ServiceName,"Value of c_mtch_accnt_no Is[%s]",c_mtch_accnt_no);
        fn_userlog(c_ServiceName,"Value of c_ordr_rfrnc is   [%s]",c_ordr_rfrnc);
        fn_userlog(c_ServiceName,"Value of c_trade_flow is   [%c] ",c_trade_flow);
        fn_userlog(c_ServiceName,"Value of c_unlying is      [%s] ",c_unlying);
        fn_userlog(c_ServiceName,"Value of c_indstk is       [%s] ",c_indstk);
        fn_userlog(c_ServiceName,"Value of c_trd_date is     [%s] ",c_trd_date.arr);
        fn_userlog(c_ServiceName,"Value of c_exp_date is     [%s] ",c_exp_date.arr);
        fn_userlog(c_ServiceName,"Value of c_prd_typ is      [%c] ",c_prd_typ);
        fn_userlog(c_ServiceName,"Value of c_opt_typ is      [%c] ",c_opt_typ);
        fn_userlog(c_ServiceName,"Value of c_exrc_typ is     [%c] ",c_exrc_typ);
        fn_userlog(c_ServiceName,"Value of l_strk_prc is     [%ld] ",l_strk_prc);
        fn_userlog(c_ServiceName,"Value of l_exctd_qty is    [%ld] ",l_exctd_qty);
        fn_userlog(c_ServiceName,"Value of l_brkg_val is     [%ld] ",l_brkg_val);
        fn_userlog(c_ServiceName,"Value of d_value is        [%lf] ",d_value);
        fn_userlog(c_ServiceName,"Value of l_stt is        [%ld] ",l_stt);
        fn_userlog(c_ServiceName,"Value of l_srv_tax is        [%ld] ",l_srv_tax);
        fn_userlog(c_ServiceName,"Value of l_stmp_duty is        [%ld] ",l_stmp_duty);
        fn_userlog(c_ServiceName,"Value of l_sebi_tt is        [%ld] ",l_sebi_tt);
        fn_userlog(c_ServiceName,"Value of l_tran_chrg is        [%ld] ",l_tran_chrg);
        fn_userlog(c_ServiceName,"Value of l_incl_all is        [%ld] ",l_incl_all);
        fn_userlog(c_ServiceName,"Value of Executed Rate is        [%ld] ",l_exctd_rt);
        fn_userlog(c_ServiceName,"Value of LTP is        [%ld] ",l_ltp);
        fn_userlog(c_ServiceName,"CONTRACT NO. Is :%s:",c_cntrctnt_nmbr);
        fn_userlog(c_ServiceName,"Value of l_sum_tax is [%ld] ",l_sum_tax);    /*** Ver 3.7 ***/
       }


      MEMSET(c_clm_fno_schm_code);

      if (c_prd_typ == 'O' || c_prd_typ == 'I' )
      {

       EXEC SQL
          SELECT distinct 'N',
                 nvl(OTD_SCHM_CODE,'*')
          INTO   :c_clm_brkr_cmpt_flg,
                 :c_clm_fno_schm_code
          FROM   OTD_OPTION_TRD_DTLS
          WHERE  OTD_XCHNG_CD = :c_xchng_cd
          AND    OTD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
          AND    OTD_TRD_DT = :c_trd_date;

       if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
       {
        fn_errlog( c_ServiceName, "S31325", SQLMSG, c_errmsg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }
       else if (SQLCODE == NO_DATA_FOUND )
       {
        if( DEBUG_MSG_LVL_0)
        {
          fn_userlog(c_ServiceName,"Checking scheme in OTD_HSTRY table");
        }

        EXEC SQL
          SELECT  distinct 'N',
                  nvl(OTD_SCHM_CODE,'*')
          INTO   :c_clm_brkr_cmpt_flg,
                 :c_clm_fno_schm_code
          FROM   OTD_OPTION_TRD_DTLS_HSTRY
          WHERE  OTD_XCHNG_CD = :c_xchng_cd
          AND   OTD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
          AND    OTD_TRD_DT = :c_trd_date;

        if (SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
        {
         fn_errlog( c_ServiceName, "S31330", SQLMSG, c_errmsg );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        if (SQLCODE == NO_DATA_FOUND)
        {
         c_clm_brkr_cmpt_flg = '\0';
        }
       }

      }
      SETNULL(c_clm_fno_schm_code);

      if( DEBUG_MSG_LVL_5 )
      {
       fn_userlog( c_ServiceName, " Value of c_clm_brkr_cmpt_flg ..: [%c] ",c_clm_brkr_cmpt_flg);
       fn_userlog( c_ServiceName, " Value of c_clm_fno_schm_code ..: [%s] ",c_clm_fno_schm_code.arr );
      }


      if(c_clm_brkr_cmpt_flg == 'N' && (c_prd_typ == 'O' || c_prd_typ == 'I') )
      {

        c_source_flg = 'O';

        if(i_hist_flg == 0)
        {
            EXEC SQL
                SELECT  decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) TOTAL_LOTS,
                       (decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) - OBC_CARRY_FWD_LOT) INTRA_DAY_LOTS,
                       OBC_INRANGE_QTY INRANGE_LOTS,
                       OBC_BELOW_QTY BELOW_RANGE_LOTS,
                       OBC_ABOVE_QTY ABOVE_RANGE_LOTS,
                       OBC_CARRY_FWD_LOT,
                       OBC_INRANGE_CHARGES INRANGE_CHARGES,
                       decode(OBC_BELOW_QTY,'0','0',decode(OBC_BUY_BRKG,'0',OBC_SELL_BRKG,OBC_BUY_BRKG)) BELOW_RANGE_CHARGES,
                       OBC_ABOVE_CHARGES ABOVE_RANGE_CHARGES,
                       OBC_CARRY_FWD_BRKG CARRY_FWD_CHARGES,
                       OBC_TOTAL_BRKG TOTAL_CHARGES
                INTO   :i_total_lots ,
                       :i_intra_day_lots ,
                       :i_inrange_lots ,
                       :i_below_range_lots ,
                       :i_above_range_lots ,
                       :i_obc_carry_fwd_lot ,
                       :l_inrange_charges ,
                       :l_below_range_charges ,
                       :l_above_range_charges ,
                       :l_carry_fwd_charges ,
                       :l_total_charges
                FROM   OBC_OPTION_BRKR_CMPT_SMRY
                WHERE  OBC_ORDR_RFRNC = :c_ordr_rfrnc ;

              if ((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
              {
                fn_errlog( c_ServiceName, "S31335", SQLMSG, c_errmsg  );
                EXEC SQL FREE :sys_cursor;
                Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              }

          if( DEBUG_MSG_LVL_5)
          {
            fn_userlog(c_ServiceName," In Todays table for OPM Client");
          }
        }


        if(i_hist_flg == 1)
        {
           EXEC SQL
              SELECT TOTAL_LOTS,INTRA_DAY_LOTS,INRANGE_LOTS,BELOW_RANGE_LOTS,ABOVE_RANGE_LOTS,CARRY_FWD_LOTS,
                     INRANGE_CHARGES,BELOW_RANGE_CHARGES,ABOVE_RANGE_CHARGES,CARRY_FWD_CHARGES,TOTAL_CHARGES
              INTO   :i_total_lots ,
                     :i_intra_day_lots ,
                     :i_inrange_lots ,
                     :i_below_range_lots ,
                     :i_above_range_lots ,
                     :i_obc_carry_fwd_lot ,
                     :l_inrange_charges ,
                     :l_below_range_charges ,
                     :l_above_range_charges ,
                     :l_carry_fwd_charges ,
                     :l_total_charges
               FROM
               (
                SELECT decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) TOTAL_LOTS,
                       (decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) - OBC_CARRY_FWD_LOT) INTRA_DAY_LOTS,
                       OBC_INRANGE_QTY INRANGE_LOTS,
                       OBC_BELOW_QTY BELOW_RANGE_LOTS,
                       OBC_ABOVE_QTY ABOVE_RANGE_LOTS,
                       OBC_CARRY_FWD_LOT CARRY_FWD_LOTS,
                       OBC_INRANGE_CHARGES INRANGE_CHARGES,
                       decode(OBC_BELOW_QTY,'0','0',decode(OBC_BUY_BRKG,'0',OBC_SELL_BRKG,OBC_BUY_BRKG)) BELOW_RANGE_CHARGES,
                       OBC_ABOVE_CHARGES ABOVE_RANGE_CHARGES,
                       OBC_CARRY_FWD_BRKG CARRY_FWD_CHARGES,
                       OBC_TOTAL_BRKG TOTAL_CHARGES
                FROM   OBC_OPTION_BRKR_CMPT_SMRY
                WHERE  OBC_ORDR_RFRNC = :c_ordr_rfrnc
                UNION ALL
                SELECT decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) TOTAL_LOTS,
                       (decode(OBC_BUY_LOT,'0',OBC_SELL_LOT,OBC_BUY_LOT) - OBC_CARRY_FWD_LOT) INTRA_DAY_LOTS,
                       OBC_INRANGE_QTY INRANGE_LOTS,
                       OBC_BELOW_QTY BELOW_RANGE_LOTS,
                       OBC_ABOVE_QTY ABOVE_RANGE_LOTS,
                       OBC_CARRY_FWD_LOT CARRY_FWD_LOTS,
                       OBC_INRANGE_CHARGES INRANGE_CHARGES,
                       decode(OBC_BELOW_QTY,'0','0',decode(OBC_BUY_BRKG,'0',OBC_SELL_BRKG,OBC_BUY_BRKG)) BELOW_RANGE_CHARGES,
                       OBC_ABOVE_CHARGES ABOVE_RANGE_CHARGES,
                       OBC_CARRY_FWD_BRKG CARRY_FWD_CHARGES,
                       OBC_TOTAL_BRKG TOTAL_CHARGES
                FROM   OBC_OPT_BRKR_SMRY_HSTRY
                WHERE  OBC_ORDR_RFRNC = :c_ordr_rfrnc
               );

        if( DEBUG_MSG_LVL_5)
        {
          fn_userlog(c_ServiceName," In History for OPM Client");
        }

       if ((SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND))
       {
        fn_errlog( c_ServiceName, "S31340", SQLMSG, c_errmsg  );
        EXEC SQL FREE :sys_cursor;
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }

      }
     if( DEBUG_MSG_LVL_5 )
     {
      fn_userlog(c_ServiceName,"Value of i_hist_flg is   [%d]",i_hist_flg);
      fn_userlog(c_ServiceName,"Value of i_total_lots is   [%d] ",i_total_lots);
      fn_userlog(c_ServiceName,"Value of i_intra_day_lots is   [%d] ",i_intra_day_lots);
      fn_userlog(c_ServiceName,"Value of i_inrange_lots is     [%d] ",i_inrange_lots);
      fn_userlog(c_ServiceName,"Value of i_below_range_lots is      [%d] ",i_below_range_lots);
      fn_userlog(c_ServiceName,"Value of i_above_range_lots is      [%d] ",i_above_range_lots);
      fn_userlog(c_ServiceName,"Value of i_obc_carry_fwd_lot is     [%d] ",i_obc_carry_fwd_lot);
      fn_userlog(c_ServiceName,"Value of l_inrange_charges is       [%ld] ",l_inrange_charges);
      fn_userlog(c_ServiceName,"Value of l_below_range_charges is   [%f] ",l_below_range_charges);
      fn_userlog(c_ServiceName,"Value of l_above_range_charges is   [%ld] ",l_above_range_charges);
      fn_userlog(c_ServiceName,"Value of l_carry_fwd_charges is  [%f] ",l_carry_fwd_charges);
      fn_userlog(c_ServiceName,"Value of l_total_charges is      [%ld] ",l_total_charges);
      fn_userlog(c_ServiceName,"Value of c_source_flg is      [%c] ",c_source_flg);
      fn_userlog(c_ServiceName," Before Fadd32 of OPM Client");
     }


    i_err[0] = Fadd32(ptr_fml_Obuf,FFO_ORD_TOT_QTY,(char *)&i_total_lots,0) ;
    i_err[1] = Fadd32(ptr_fml_Obuf,FFO_TOT_QTY_TRDD,(char *)&i_intra_day_lots,0) ;
    i_err[2] = Fadd32(ptr_fml_Obuf,FFO_EXCR_EXCTD_QTY,(char *)&i_inrange_lots,0) ;
    i_err[3] = Fadd32(ptr_fml_Obuf,FFO_MIN_LOT_QTY,(char *)&i_below_range_lots,0) ;
    i_err[4] = Fadd32(ptr_fml_Obuf,FFO_FRS_QTY,(char *)&i_above_range_lots,0) ;
    i_err[5] = Fadd32(ptr_fml_Obuf,FFO_EXCR_REQ_QTY,(char *)&i_obc_carry_fwd_lot,0) ;
    i_err[6] = Fadd32(ptr_fml_Obuf,FFO_NET_TRD_VAL,(char *)&l_inrange_charges,0) ;
    i_err[7] = Fadd32(ptr_fml_Obuf,FFO_BASE_ORD_VAL,(char *)&l_below_range_charges,0) ;
    i_err[8] = Fadd32(ptr_fml_Obuf,FFO_INTERVAL,(char *)&l_above_range_charges,0) ;
    i_err[9] = Fadd32(ptr_fml_Obuf,FFO_C_ORG_OPN_VAL,(char *)&l_carry_fwd_charges,0) ;
    i_err[10] = Fadd32(ptr_fml_Obuf,FFO_TOT_VAL_TRDD,(char *)&l_total_charges,0) ;
    i_err[11] = Fadd32(ptr_fml_Obuf,FFO_SOURCE_FLG,(char *)&c_source_flg,0) ;

    if( DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName," After Fadd32 of OPM Client");
    }

      for(i=0;i<=11;i++)
      {
        if(i_err[i] == -1)
        {
          fn_userlog(c_ServiceName,"Error in Fadd for i for OPM [%d]",i);
          fn_errlog( c_ServiceName, "S31345", FMLMSG, c_errmsg  );
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }


     }


     /*****    Ver 2.0 Ends  ***/

         if( DEBUG_MSG_LVL_5)
      {
        fn_userlog(c_ServiceName," Before Fadd32 ");
      }

      i_serr[0]   = Fadd32(ptr_fml_Obuf,FFO_XCHNG_CD,(char *)c_xchng_cd,0) ;
      i_serr[1]   = Fadd32(ptr_fml_Obuf,FFO_EBA_MTCH_ACT_NO,(char *)c_mtch_accnt_no,0) ;
      i_serr[2]   = Fadd32(ptr_fml_Obuf,FFO_ORDR_RFRNC,(char *)c_ordr_rfrnc,0) ;
      i_serr[3]   = Fadd32(ptr_fml_Obuf,FFO_TRD_DT,(char *)c_trd_date.arr,0) ;
      i_serr[4]   = Fadd32(ptr_fml_Obuf,FFO_TRD_FLW,(char *)&c_trade_flow,0) ;
      i_serr[5]   = Fadd32(ptr_fml_Obuf,FFO_UNDRLYNG,(char *)c_unlying,0) ;
      i_serr[6]   = Fadd32(ptr_fml_Obuf,FFO_EXPRY_DT,(char *)c_exp_date.arr,0) ;
      i_serr[7]   = Fadd32(ptr_fml_Obuf,FFO_OPT_TYP,(char *)&c_opt_typ,0) ;
      i_serr[8]   = Fadd32(ptr_fml_Obuf,FFO_STRK_PRC,(char *)&l_strk_prc,0) ;
      i_serr[9]   = Fadd32(ptr_fml_Obuf,FFO_EXER_TYP,(char *)&c_exrc_typ,0) ;
      i_serr[10]  = Fadd32(ptr_fml_Obuf,FFO_PRDCT_TYP,(char *)&c_prd_typ,0) ;
      i_serr[11]  = Fadd32(ptr_fml_Obuf,FFO_INSTRMNT_TYP,(char *)c_indstk,0) ;
      i_serr[12]  = Fadd32(ptr_fml_Obuf,FFO_EXEC_QTY,(char *)&l_exctd_qty,0) ;
      i_serr[13]  = Fadd32(ptr_fml_Obuf,FFO_EXCTD_RT,(char *)&l_exctd_rt,0) ;
      i_serr[14]  = Fadd32(ptr_fml_Obuf,FFO_AMOUNT,(char *)&d_value,0) ;
      i_serr[15]  = Fadd32(ptr_fml_Obuf,FFO_FRS_BRKG,(char *)&l_incl_all,0) ;
      i_serr[16]  = Fadd32(ptr_fml_Obuf,FFO_AGREE_NO,(char *)c_cntrctnt_nmbr,0) ;
      i_serr[17]  = Fadd32(ptr_fml_Obuf,FFO_LST_TRD_PRC,(char *)&l_ltp,0) ;
      i_serr[18]  = Fadd32(ptr_fml_Obuf,FFO_NMR,(char *)&l_sum_tax,0);

      for(i=0;i<19;i++)      /*** Ver 3.7 ***/
      {
        if(i_serr[i] == -1)
        {
          fn_userlog(c_ServiceName,"Error in Fadd for i [%d]",i);
          fn_errlog( c_ServiceName, "S31350", FMLMSG, c_errmsg  );
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpcommit(0);      /***  Ver 1.9 ***/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }

     /*** Commented in Ver 4.4 ***
      ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,counter * MIN_FML_BUF_LEN );
     ***/

      if(Fneeded32(1,MIN_FML_BUF_LEN) > Funused32(ptr_fml_Obuf))/**Check added in Ver 4.4 as memory was reallocated after eve
ry record fetched ***/
    {
      counter ++;
      ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf, Fsizeof32(ptr_fml_Obuf) +
                                                                counter * MIN_FML_BUF_LEN * 5 ); /* Ver 4.4 */

      if ( ptr_fml_Obuf == NULL )
      {
        fn_errlog( c_ServiceName, "S31355", TPMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;
        tpfree ( ( char * ) ptr_fml_Obuf );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpcommit(0);      /***  Ver 1.9 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    }

    MEMSET(c_trdbk_seq);

    EXEC SQL
      SELECT TO_CHAR(SYSDATE,'YYYYMMDD')||LPAD(TO_CHAR(DECODE((LAST_NUMBER - 1),MAX_VALUE,0,(LAST_NUMBER - 1))),8,'0')
      INTO  :c_trdbk_seq
      FROM  USER_SEQUENCES
      WHERE SEQUENCE_NAME = 'DFT_DL_FO_TRDBK_SEQ';

    SETNULL(c_trdbk_seq);

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"Trade Book Sequence number is :%s:",c_trdbk_seq.arr);
    }

    if ( Fadd32(ptr_fml_Obuf,FFO_REF_NO,(char *)c_trdbk_seq.arr,0) == -1 )
    {
      fn_userlog(c_ServiceName,"Error in Fadd for i [%d]",i);
      fn_errlog( c_ServiceName, "S31360", FMLMSG, c_errmsg  );
      tpfree ( ( char * ) ptr_fml_Obuf );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

  }

  /*** Ver 3.8 Ends   ***/
	/***	Ver	1.9	Ends	***/

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

  if (DEBUG_MSG_LVL_2)
  {
   fn_gettime();
   fn_userlog(c_ServiceName,"  - TIME_STATS  Service SFO_TRADE_BOOK Ends :%s:",c_time);
  }

	if (DEBUG_MSG_LVL_2)
	{
  	fn_userlog(c_ServiceName,"End Of SFO_TRADE_BOOK");
	}
  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );
}


void fn_gettime()
{
  int i_mili_sec = 0;
  struct timeval tv;
  struct timezone tz;
  struct tm *tm;

  gettimeofday(&tv, &tz);
  tm=localtime(&tv.tv_sec);
  i_mili_sec= tv.tv_usec/1000;
  sprintf(c_time,"%d:%d:%d:%d",tm->tm_hour, tm->tm_min, tm->tm_sec, i_mili_sec);
  return;
}



