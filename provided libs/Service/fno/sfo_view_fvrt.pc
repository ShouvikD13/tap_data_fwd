/*  Program           : SFO_VIEW_FVRT                                         */
/*                                                                            */
/*  Input             : FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_RQST_TYP                                          */
/*                                                                            */
/*  Output            : FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_LST_TRD_PRC                                       */
/*                      FFO_LST_TRD_TM                                        */
/*                      FFO_LST_TRD_QTY                                       */
/*                      FFO_BST_BID_PRC                                       */
/*                      FFO_BST_BID_QTY                                       */
/*                      FFO_BST_OFFR_PRC                                      */
/*                      FFO_BST_OFFR_QTY                                      */
/*                      FFO_CLS_PRC                                           */
/*                      FFO_OPN_PRC                                           */
/*                      FFO_HGH_PRC                                           */
/*                      FFO_LOW_PRC                                           */
/*                      FFO_PRVS_CLS_PRC                                      */
/*                      FFO_CHNG_PRVS_CLS                                     */
/*                      FFO_PRC_INDCTR                                        */
/*                      FFO_HGH_PRC_RNG                                       */
/*                      FFO_LOW_PRC_RNG                                       */
/*                      FFO_AVRG_TRD_PRC                                      */
/*                      FFO_TOT_QTY_TRDD                                      */
/*                      FFO_TOT_VAL_TRDD                                      */
/*                      FFO_BASE_PRC                                          */
/*                      FFO_RQST_TYP                                          */
/*                      FML_QUOTE                                             */
/*                      FML_QUOTE_TIME                                        */
/*                      FFO_CRNT_OI                                           */
/*                      FFO_CHNG_OI                                           */
/*                      FFO_OI_HIGH                                           */
/*                      FFO_OI_LOW                                            */
/*                      FFO_OI_INDCTR                                         */
/*                                                                            */
/*  Description       : This service will get contract details brief quotes   */
/*                      of a contract viz. last traded qty., last traded      */
/*                      price, last traded time, best bid qty and price,      */
/*                      best offer qty and price and price information like   */
/*                      open, high, low, close price, previous close price,   */
/*                      net change from previous close price, high price      */
/*                      and low price range alongwith the last traded price,  */
/*                      base price and last traded time of the Underlying     */
/*                                                                            */
/*  Log               : 																											*/
/*										:	1.1   19-Dec-2007   Sushil Sharma - IBM Migration     */
/*										:	1.2		25-Feb-2011		Sandep	Patil											*/
/*										:	1.3		28-Dec-2011		Sandip Tambe											*/
/*                    : 1.4   12-Feb-2014   Sachin Birje                      */
/*                    : 1.5   28-Feb-2014		Mahesh Shinde											*/
/*                    : 1.6   10-Mar-2014   VIshnu Nair                       */
/*                    : 1.7   01-Sep-2014   Samip M			                      */
/*										:	1.8		11-Dec-2015		Kishor B													*/
/*                    : 1.9   04-Jul-2016   Sachin Birje                      */
/*                    : 2.0   19-Jul-2016   Sachin Birje                      */
/*                    : VQC   22-Apr-2016   VERSION QUALITY CONTROL SWAPNIL   */
/*										:	2.1		04-Jan-2017		Kishor Borkar											*/
/*										:	2.2		22-Apr-2021		Kiran Itkar												*/	
/*										:	2.3		26-May-2022   Naveena R.                        */	
/*										:	2.4		18-Oct-2022   Prajakta Sutar                    */	
/*                    : 2.5   09-Dec-2022   Prajakta Sutar                    */
/*                    : 2.6   21-Apr-2023   Prajakta Sutar                    */
/*                    : 2.7   27-Apr-2023   Ravi Malla & Kunwar Prashant      */
/*                    : 2.8   03-May-2023   Prajakta Sutar                    */
/******************************************************************************/
/* 1.0  -  New release   S.Swaminathan         10-02-2002                     */
/* 1.2	-	 Optimization Changes																								*/
/* 1.3	-	 FNO_BSE_ORS Changes																								*/	
/* 1.4  -  View Changes for for storing total value traded in exchnge         */
/* 1.5  -  India vix changes CR_ISEC14_48665 (Mahesh Shinde)									*/
/* 1.6  -  NVL added while fetching trade date from LTQ_TRD_QT                */
/* 1.7  -  View to FML changes																								*/
/* 1.8	-	 Cloud order for FPSL and OP related changes												*/
/* 1.9  -  debug level changes                                                */
/* 2.0  -  debug level changesII                                              */
/* VQC	-  VERSION QUALITY CONTROL   					    														*/
/* 2.1	-	 Cloud order for core products																			*/
/* 2.2	-	 Basket Orders F&O Segment																					*/	
/* 2.3	-	 Add to My Favourite Box in F&O Home page CR-ISEC14-166852          */ 
/* 2.4  -  IN:349 Increasing Basket Name                                      */ 
/* 2.5  -  CR-ISEC10-178410-CR-Place order through upload excel in basket order */
/* 2.6  -  CR-ISEC10-179095 Add tab of buy order first  in basket order       */
/* 2.7  -  CR-ISEC14-182394 Pop up surveillance changes                       */
/* 2.8  -  CR-ISEC10-182478 Place F&O orders via upload csv in basket order phase 2 */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fml_def.h>
#include <fo.h>
/** #include <fo_view_def.h> **/	/** Commented for Ver 1.7 **/
#include <fo_view_def.h>				/** Added for Ver 1.7 **/
#include <fml_rout.h>							/** Added for Ver 1.7 **/
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>             /*  Ver 1.1 : Added */
#include <fn_session.h>         /*  Ver 1.1 : Added */
#include <fml_rout.h>						/*  Ver 1.1 : Added */
#include <fn_read_debug_lvl.h>  /*  Ver 1.1 : Added */

/* VER TOL : TUX on LINUX -- Changed function name from 'fn_get_qt' to 'fn_get_qt_vf' (Ravindra) */
int	fn_get_qt_vf( char		*c_ServiceName,			/***	Ver	1.2	***/
               struct	vw_contract		*ptr_st_contract,
               struct	vw_cntrct_qt 	*ptr_st_cntrct_qt,
               char		*c_err_msg,
							 char 	c_source_flg			/** Added in VQC ***/
             );

int fn_svc_qt( char	*c_ServiceName,
							 char *c_undrlyng,
							 char *c_xchng_cd,
							 double *d_quote,
							 char *c_quote_tm,
    	         char	*c_err_msg
             );





void SFO_VIEW_FVRT( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

/**	FBFR32 *ptr_fml_Rbuf;	Commented in VQC as it was used in earlier version and not used in latest version **/

		char  c_ServiceName[33];					
  	varchar  c_err_msg[256];					/** Datatype changed from char to varchar in VQC**/	
		char	c_undrlyng[7]="\0";							/***	Ver	1.2	***/	/*** Initialized in Ver 2.2 ***/
  	char  c_xchng_cd[4]="\0";							/***	Ver	1.2	***/ /*** Initialized in Ver 2.2 ***/
		char	c_source_flg= '\0'; 				/*** 	Ver 1.8 ***/
		char	c_lmt_mktsl_flg='\0'; 			/*** 	Ver 1.8 ***/
		char  c_lmt_allwd_flg = '\0'; 		/*** 	Ver 1.8 ***/
		char  c_ffc_ordr_rfrnc[17]="\0"; 	/*** 	Ver 1.8 ***/
 		char  c_usr_id[9]="\0"; 					/*** 	Ver 1.8 ***/
  	char  c_underlying[7]="\0";				/*** 	Ver 1.8 ***/
  	char  c_product_type= '\0';				/*** 	Ver 1.8 ***/
  	char  c_option_type= '\0';				/*** 	Ver 1.8 ***/
  	char  c_expry_dt[ LEN_DATE ]="\0"; 		/*** 	Ver 1.8 ***/
		char	c_bskt_name[21]="\0";				/***  Ver 2.2	***/   /*** Ver 2.4 Changed to 21 from 15 ***/
		char  c_bskt_id[15] ="\0";				/***  Ver 2.2 ***/
		char  c_rqst_type='\0';						/***  Ver 2.2 ***/
		int  i_bskt_count=0;							/***  Ver 2.2 ***/	
		char  c_crtd_dt[ LEN_DATE ]="\0";			/***  Ver 2.2 ***/
		char  c_ordr_flw = '\0';					/***  Ver 2.2 ***/	
    char c_insrt_tm[15] = "\0";           /** Ver 2.6 **/
    char c_ordr_stts_rmrks[256] = "\0";   /** Ver 2.6 **/
    char c_source_flag = '\0';        /***  Ver 2.8 ***/

		long l_cvr_sltp_rt = 0;				/***  Ver 2.2 ***/
		long l_frs_lmt_rt = 0;				/***  Ver 2.2 ***/
		long l_cvr_lmt_rt = 0;				/***  Ver 2.2 ***/
    char c_ord_typ = '\0'; /** ver 2.2 **/

		int i_ch_val=0;											/*** Initialized in Ver 2.2 ***/
		int	i_rtrn_vl=0;										/***	Ver	1.2	***/	/*** Initialized in Ver 2.2 ***/
		int	i_rtrn_cd=0;										/***	Ver	1.2	***/	/*** Initialized in Ver 2.2 ***/
		long l_ordr_qty=0;								/*** Ver 1.8 ***/ /** Initialized in VQC to 0 **/
/**	long int li_recvbuf = 0;  				Commented in VQC as it was used in earlier version and not in use in latest version **/
		long int li_lot_sz=0;  						/** in ver VQC initilized long int li_lot_sz to zero as it was taking junk value **/
/**	int i_err;  											 Commented in VQC as it is unused**/    /*** Ver 1.3 ***/
  	long  l_strike_prc = 0 ;					/*** Ver 1.8 ***/   /** Initialized in VQC to 0 **/

		char c_exchange_cd[4]="\0";						/*** Ver 1.3 ***/ /*** Initialized in Ver 2.2 ***/
/**	int ind_usr_flg;   								Commented in VQC as it is unused**/  		/*** ver 1.7 ***/
/**	int ind_cln_mtch_accnt;  					Commented in VQC as it is unused**/    /*** ver 1.7 ***/

		double d_quote = 0.0;							/** Initialized in VQC to 0.0 **/
		double d_rate = 0.0;							/** Initialized in VQC to 0.0 **/
		char c_quote_tm[23]="\0";					/*** Initialized in Ver 2.2 ***/
		double d_cvr_sltp_diff = 0.0;  		/*** Ver 1.8 ***/ /** Initialized in VQC to 0.0 **/

    	char c_survmsg[500]="\0"; /* Ver 2.7 */
	char c_surv_flg='\0'; /* Ver 2.7 */

 	 EXEC SQL BEGIN DECLARE SECTION;
    struct vw_contract st_contract;
    struct vw_cntrct_qt st_cntrct_qt;
		double d_datediff=0.0;							/*** Initialized in Ver 2.2 ***/
    sql_cursor  sys_cursor;								/*** Ver 1.8 ***/
	EXEC SQL END DECLARE SECTION;

		struct vw_usr_prfl st_usr_prfl;
		struct vw_err_msg st_err_msg;

	MEMSET(st_usr_prfl);									/*** Added in Ver 2.2 ***/
	MEMSET(st_err_msg);										/*** Added in Ver 2.2 ***/
	MEMSET(c_err_msg);										/** Added in VQC **/
	MEMSET(st_contract);									/*** Initialized in Ver 2.2 ***/
	MEMSET(st_cntrct_qt);									/*** Initialized in Ver 2.2 ***/

	
/** char c_exrc_typ;											Commented in VQC as it is unused**/

		ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  	strcpy( c_ServiceName, rqst->name );
		INITDBGLVL(c_ServiceName);            /*  Ver 1.1 : Added   */

	/***** Commented for Ver 1.7 ********
	i_ch_val = Fvftos32( ptr_fml_Ibuf,
                           (char *)&st_usr_prfl,
                           "vw_usr_prfl" );

	************* Ver 1.7 ********/

	/**** Added for Ver 1.7 *******/
  i_ch_val = fn_unpack_fmltovar_dflt ( c_ServiceName,
                                      c_err_msg.arr,	/**Changed from c_err_msg to c_err_msg.arr in VQC **/
                                      ptr_fml_Ibuf,
                                      5,
																			FFO_EBA_MTCH_ACT_NO, (char*)st_usr_prfl.c_cln_mtch_accnt, "*",
																			FFO_ROUT_CRT, (char*)st_usr_prfl.c_rout_crt, "NULL", 
																			FFO_USR_FLG, (char*)&st_usr_prfl.l_usr_flg, "0",
																			FFO_USR_ID, (char*)st_usr_prfl.c_user_id, "NULL", 
																			FFO_SSSN_ID, (char*)&st_usr_prfl.l_session_id, "0");
/** if ( i_ch_val != 1  ) *** Ver 1.7 **/
		if ( i_ch_val != 0  )
  	{
   		fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg.arr  ); /**Changed from c_err_msg to c_err_msg.arr in VQC **/ 
   		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );        /**Changed from c_err_msg to c_err_msg.arr in VQC **/
   		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
	/*** Ver 1.7 *****/

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

	i_ch_val = fn_chk_sssn( c_ServiceName, &st_usr_prfl, &st_err_msg );

	if ( i_ch_val == -1 )
	{
		fn_errlog( c_ServiceName,"S31010", LIBMSG, st_err_msg.c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

/********** Ver VQC Starts************
 	
	ptr_fml_Rbuf = ( FBFR32 * ) tpalloc ( "FML32", 0, MIN_FML_BUF_LEN  );
										  
	if ( ptr_fml_Rbuf == NULL )
	{
		fn_errlog( c_ServiceName, "S31015", TPMSG, c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

   **Commented in VQC as it was used in earlier version and not in use in latest version **
 ********Ver VQC ends ********/


	/************ Ver 1.3 Starts ************************/
	if(Fget32( ptr_fml_Ibuf,FFO_XCHNG_CD,0,(char *)c_exchange_cd,0 ) == -1)
	{
			fn_userlog(c_ServiceName,"Inside error condition.. exchange code not available");
			fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg.arr  ); /**Changed from c_err_msg to c_err_msg.arr in VQC **/
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 ); 				/**Changed from c_err_msg to c_err_msg.arr in VQC **/
/** 	tpfree ((char *) ptr_fml_Rbuf ); Commented in VQC as it was used in earlier version and not in use in latest version */
/** 	tpfree ((char *) ptr_fml_Obuf ); Commented in VQC as we were trying to release memory without allocating**/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

	}

/**	fn_userlog(c_ServiceName,"After FGET xchng_cd from front end :%s:",c_exchange_cd);  Commented in VQC ***/
	
	if(DEBUG_MSG_LVL_5)
	{
			fn_userlog(c_ServiceName,"After FGET xchng_cd from front end :%s:",c_exchange_cd); 
	}

  /******************** Ver 1.3 Ends *********************/
	
	/************* Ver 1.8 Starts ******************/ 
  if(Fget32( ptr_fml_Ibuf,FFO_SOURCE_FLG,0,(char *)&c_source_flg,0 ) == -1)
  {
			if( Ferror32 == FNOTPRES )
			{
				c_source_flg='F';
			}
			else
			{
    		fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg.arr  ); /**Changed from c_err_msg to c_err_msg.arr in VQC **/
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );				/**Changed from c_err_msg to c_err_msg.arr in VQC **/
 /**   	tpfree ( ( char * ) ptr_fml_Rbuf);  Commented in VQC as it was used in earlier version and not in use in latest ver**/
 /**   	tpfree ( ( char * ) ptr_fml_Obuf );	Commented in VQC as we were trying to release memory without allocating**/
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
 			} 
	}

	if(DEBUG_MSG_LVL_5)
	{
		fn_userlog(c_ServiceName,"After FGET source flag from front end :%c:",c_source_flg);
	}

	/**** Added in Ver 2.2 ****/
	if(c_source_flg == 'B')
	{
		if(Fget32( ptr_fml_Ibuf,FFO_RQST_TYP,0,(char *)&c_rqst_type,0 ) == -1)
		{
			fn_errlog( c_ServiceName, "S31030", FMLMSG, c_err_msg.arr  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );			
		}
	}
	if(c_source_flg == 'B' && (c_rqst_type == 'F' || c_rqst_type == 'V')) /** New request type V is added in Ver 2.6 **/
  {
    if(Fget32( ptr_fml_Ibuf,FFO_SERIES,0,(char *)c_bskt_id,0 ) == -1)
    {
      fn_errlog( c_ServiceName, "S31035", FMLMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		/*if(Fget32( ptr_fml_Ibuf,FFO_SYMBOL,0,(char *)c_bskt_name,0 ) == -1)
		{
      fn_errlog( c_ServiceName, "S31040", LIBMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }*/	
  }
	if(c_source_flg == 'B' && c_rqst_type == 'E')
  {
    if(Fget32( ptr_fml_Ibuf,FFO_SYMBOL,0,(char *)c_bskt_name,0 ) == -1)
    {
	    if ( Ferror32 == FNOTPRES || strcmp(c_bskt_name,"")== 0 )
    	{
      	strcpy(c_bskt_name,"%");
    	}
			else
			{
      	fn_errlog( c_ServiceName, "S31045", FMLMSG, c_err_msg.arr  );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
  	}
	}
	/*** Ended Ver 2.2 ****/
	
  if(DEBUG_MSG_LVL_1) /*** Ver 2.0 debug changed from 0 to 1***/
  {
    	fn_userlog(c_ServiceName,"After FGET source_flg from front end :%c:",c_source_flg);
  }

  if(c_source_flg == 'S' || c_source_flg == 'C')  /*** c_source_flg == 'C' Added in Ver 2.1 ***/
  {
    if(Fget32( ptr_fml_Ibuf,FFO_PRDCT_TYP,0,(char *)&c_product_type,0 ) == -1)
    {
      if( Ferror32 == FNOTPRES )   /*** FNOTPRES Handled in Ver 2.1 ***/ 
      {
        c_product_type='L';  /*** This handling done for other front ends ***/
      }
			else
			{
      	fn_errlog( c_ServiceName, "S31050", LIBMSG, c_err_msg.arr  ); /**Changed from c_err_msg to c_err_msg.arr in VQC **/
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );				/**Changed from c_err_msg to c_err_msg.arr in VQC **/
/**   	tpfree ( ( char * ) ptr_fml_Rbuf ); Commented in VQC as it was used in earlier version and not in use in latest ver*/
/**   	tpfree ( ( char * ) ptr_fml_Obuf ); Commented in VQC as we were trying to release memory without allocating  **/
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
    }

  		if(c_source_flg == 'S')  /*** if condition added in Ver 2.1 ***/
  		{
    		if(Fget32( ptr_fml_Ibuf,FFO_UNDRLYNG,0,(char *)c_underlying,0 ) == -1)
    		{
      		fn_errlog( c_ServiceName, "S31055", LIBMSG, c_err_msg.arr  );	/**Changed from c_err_msg to c_err_msg.arr in VQC **/
      		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );				/**Changed from c_err_msg to c_err_msg.arr in VQC **/
/**  		tpfree ( ( char * ) ptr_fml_Rbuf ); Commented in VQC as it was used in earlier version and not in use in latest ver*/
/**     	tpfree ( ( char * ) ptr_fml_Obuf ); Commented in VQC as we were trying to release memory without allocating  **/
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    		}

    	if(Fget32( ptr_fml_Ibuf,FFO_EXPRY_DT,0,(char *)c_expry_dt,0 ) == -1)
    	{
      	fn_errlog( c_ServiceName, "S31060", LIBMSG, c_err_msg.arr  ); /**Changed from c_err_msg to c_err_msg.arr in VQC **/
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );				/**Changed from c_err_msg to c_err_msg.arr in VQC **/
/**   	tpfree ( ( char * ) ptr_fml_Rbuf ); Commented in VQC as it was used in earlier version and not in use in latest ver*/
/**   	tpfree ( ( char * ) ptr_fml_Obuf ); Commented in VQC as we were trying to release memory without allocating  **/
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

    	if(Fget32( ptr_fml_Ibuf,FFO_OPT_TYP,0,(char *)&c_option_type,0 ) == -1)
    	{
      	fn_errlog( c_ServiceName, "S31065", LIBMSG, c_err_msg.arr  );	/**Changed from c_err_msg to c_err_msg.arr in VQC **/
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );				/**Changed from c_err_msg to c_err_msg.arr in VQC **/
/**   	tpfree ( ( char * )ptr_fml_Rbuf );  Commented in VQC as it was used in earlier version and not in use in latest ver*/
/**   	tpfree ( ( char * ) ptr_fml_Obuf ); Commented in VQC as we were trying to release memory without allocating  **/
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

    	if(Fget32( ptr_fml_Ibuf,FFO_STRK_PRC,0,(char *)&l_strike_prc,0 ) == -1)
    	{
      	fn_errlog( c_ServiceName, "S31070", LIBMSG, c_err_msg.arr  );	/**Changed from c_err_msg to c_err_msg.arr in VQC **/
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );				/**Changed from c_err_msg to c_err_msg.arr in VQC **/
/**   	tpfree ( ( char * ) ptr_fml_Rbuf ); Commented in VQC as it was used in earlier version and not in use in latest ver*/
/**   	tpfree ( ( char * ) ptr_fml_Obuf ); Commented in VQC as we were trying to release memory without allocating  **/
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
		}
  }

  /************* Ver 1.8 Ends ******************/

  /** Ver 2.6 Starts **/
  if(c_source_flg == 'B' && c_rqst_type == 'V')
  {
    if(Fget32( ptr_fml_Ibuf,FFO_TM_STMP,0,(char *)c_insrt_tm,0 ) == -1)
    {
      fn_errlog( c_ServiceName, "S31075", FMLMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  /** Ver 2.6 Ends **/
  	
	/***	Commented In Ver	1.2

	i_ch_val = tpcall ( "SFO_GET_CNTRCT",
                          ( char * ) ptr_fml_Ibuf,
                          0,
                          ( char ** ) &ptr_fml_Rbuf,
                          &li_recvbuf,
                          0 );

	if ( i_ch_val == -1 )
	{
		if ( TPCODE != TPESVCFAIL )
		{
			fn_errlog( c_ServiceName, "S31080", TPMSG,c_err_msg );
		}
		else
		{
			Fget32(ptr_fml_Rbuf, FFO_ERR_MSG, 0, c_err_msg,0);
		}
		tpfree ( ( char * ) ptr_fml_Rbuf );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	************************************************************/

		ptr_fml_Obuf = NULL;
/**	fn_rewind_rs ( ptr_fml_Rbuf ); Commented in VQC as it was used in earlier version and not in use in latest version  **/

		 strcpy(c_usr_id,st_usr_prfl.c_user_id); 

  	EXEC SQL ALLOCATE :sys_cursor;									/*** Ver 1.8 ***/

  /***  Ver 1.2 Starts  *** Commented in Ver 1.8

  EXEC SQL
  	DECLARE cur_vw_fvrt CURSOR  FOR
    	SELECT  	FFC_XCHNG_CD,
            		FFC_PRDCT_TYP,
            		FFC_UNDRLYNG,
            		TO_CHAR(FFC_EXPRY_DT,'DD-Mon-YYYY'),
            		FFC_EXER_TYP,
            		FFC_OPT_TYP,
            		FFC_STRK_PRC,
            		FFC_LOT_SZ,
            		FFC_INDSTK
  		FROM     	FFC_FO_FVRT_CNTRCT_LST
  		WHERE    	FFC_USR_ID   = :st_usr_prfl.c_user_id
 * 		AND      	FFC_XCHNG_CD = 'NFO'  *                			** Commented in Ver 1.3 **
    	AND       FFC_XCHNG_CD = :c_exchange_cd           		** Ver 1.3 **
  		ORDER BY 	FFC_PRDCT_TYP,
            		FFC_UNDRLYNG,
            		FFC_EXPRY_DT,
            		FFC_STRK_PRC ASC;

  if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName,"Failed While Selecting Record From FVRT Table.");
    fn_errlog( c_ServiceName, "S31085", LIBMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpfree ( ( char * ) ptr_fml_Rbuf );
    tpfree ( ( char * ) ptr_fml_Obuf );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  EXEC SQL OPEN cur_vw_fvrt;

  ***  Ver 1.2 Ends  *** 1.8 Comment Ends ***/

	/***	Ver	1.8	Starts	***/
	/** if( c_source_flg == 'F' || c_source_flg == 'C' ) ** Commented in VQC in order to seprate both conditions**/
	
	if(c_source_flg == 'F') /** Added if condition and coresponding block in VQC **/
  {
		if(DEBUG_MSG_LVL_5)
		{
    	fn_userlog(c_ServiceName,"Inside condition SOURCE FLAG == F");
		}
    EXEC SQL EXECUTE
      BEGIN
        OPEN  :sys_cursor FOR
          SELECT   FFC_XCHNG_CD,
                   FFC_PRDCT_TYP,
                   FFC_UNDRLYNG,
                   TO_CHAR(FFC_EXPRY_DT,'DD-Mon-YYYY'),
                   FFC_EXER_TYP,
                   FFC_OPT_TYP,
                   FFC_STRK_PRC,
                   FFC_LOT_SZ,
                   FFC_INDSTK,
                   0,
                   0,
                   0,
                  'NA',
                  'N'
          FROM     FFC_FO_FVRT_CNTRCT_LST
          WHERE    FFC_USR_ID   = :c_usr_id
          AND      FFC_XCHNG_CD = :c_exchange_cd
          AND      FFC_RQST_TYP = :c_source_flg
					ORDER BY FFC_INSRT_DT DESC; /*** Ver 2.3 ***/
          /*** ORDER BY FFC_PRDCT_TYP,
                   FFC_UNDRLYNG,
                   FFC_EXPRY_DT,
                   FFC_STRK_PRC ASC; *** Commented in Ver 2.3 ***/

      END;
      END-EXEC;

  }
	else if( c_source_flg == 'C' )     /** Added in VQC **/
	{
	  if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"Inside condition SOURCE FLAG == C"); 
		}
			
		if(c_product_type=='L') /** This handling done for other front end in Ver 2.1 **/
		{

      EXEC SQL EXECUTE
           BEGIN
            OPEN  :sys_cursor FOR
          SELECT  FFC_XCHNG_CD,
                  FFC_PRDCT_TYP,
                  FFC_UNDRLYNG,
                  TO_CHAR(FFC_EXPRY_DT,'DD-Mon-YYYY'),
                  FFC_EXER_TYP,
                  FFC_OPT_TYP,
                  FFC_STRK_PRC,
                  FFC_LOT_SZ,
                  FFC_INDSTK,
                  nvl(FFC_ORDR_QTY,0),
                  nvl(FFC_LMT_MRKT_FLG,0),
                  nvl(FFC_CVR_SLTP_DIFF,0),
                  nvl(FFC_ORDR_RFRNC,'NA'),
                  nvl(FUM_SLTPFP_LMT_ALLWD_FLG,'N')
        FROM      FFC_FO_FVRT_CNTRCT_LST,FUM_FO_UNDRLYNG_MSTR
        WHERE     FFC_USR_ID   = :c_usr_id
          AND     FFC_XCHNG_CD = :c_exchange_cd
          AND     FFC_RQST_TYP= :c_source_flg
          AND     FFC_PRDCT_TYP in ('U','I') 
          AND     FFC_XCHNG_CD=FUM_XCHNG_CD
          AND     FFC_UNDRLYNG=FUM_UNDRLYNG
          AND     decode(FFC_PRDCT_TYP,'I','O','U','F','F','F','O')=FUM_PRDCT_TYP
          ORDER BY  FFC_PRDCT_TYP ASC,
                    FFC_UNDRLYNG ASC,
                    FFC_OPT_TYP ASC,
                    FFC_EXPRY_DT ASC,
                    FFC_STRK_PRC ASC,
                    FFC_ORDR_QTY DESC,
                    FFC_CVR_SLTP_DIFF ASC;
                END;
              END-EXEC;

		}
		else
		{
			EXEC SQL EXECUTE
    		   BEGIN 
						OPEN  :sys_cursor FOR
					SELECT	FFC_XCHNG_CD,
    		  		   	FFC_PRDCT_TYP,
      		   			FFC_UNDRLYNG,
        		 			TO_CHAR(FFC_EXPRY_DT,'DD-Mon-YYYY'),
         					FFC_EXER_TYP,
  	       				FFC_OPT_TYP,
    	     				FFC_STRK_PRC,
      	   				FFC_LOT_SZ,
        	 				FFC_INDSTK,
									nvl(FFC_ORDR_QTY,0),					
									nvl(FFC_LMT_MRKT_FLG,0),				
									nvl(FFC_CVR_SLTP_DIFF,0),
									nvl(FFC_ORDR_RFRNC,'NA'),
									nvl(FUM_SLTPFP_LMT_ALLWD_FLG,'N')
 				FROM    	FFC_FO_FVRT_CNTRCT_LST,FUM_FO_UNDRLYNG_MSTR
 				WHERE   	FFC_USR_ID   = :c_usr_id	
					AND			FFC_XCHNG_CD = :c_exchange_cd					
					AND			FFC_RQST_TYP= :c_source_flg				
					AND     FFC_PRDCT_TYP = :c_product_type   /*** Added in Ver 2.1 ***/
	  			AND			FFC_XCHNG_CD=FUM_XCHNG_CD
	  			AND			FFC_UNDRLYNG=FUM_UNDRLYNG
					AND			decode(FFC_PRDCT_TYP,'I','O','U','F','F','F','O')=FUM_PRDCT_TYP
    			ORDER BY  FFC_PRDCT_TYP ASC,
      	  		    	FFC_UNDRLYNG ASC,
              		  FFC_OPT_TYP ASC,
    		    	    	FFC_EXPRY_DT ASC,
        		    		FFC_STRK_PRC ASC,
										FFC_ORDR_QTY DESC,
										FFC_CVR_SLTP_DIFF ASC;
          			END;
        			END-EXEC;
		}
	}
	else if(c_source_flg == 'S')
	{
		if(DEBUG_MSG_LVL_5)				/*** Ver 1.9 ***/
		{
	   	fn_userlog(c_ServiceName,"Inside c_source_flg.......:S:"); 
		}
    EXEC SQL EXECUTE
         BEGIN
          OPEN  :sys_cursor FOR
      SELECT  FFC_XCHNG_CD,
              FFC_PRDCT_TYP,
              FFC_UNDRLYNG,
              TO_CHAR(FFC_EXPRY_DT,'DD-Mon-YYYY'),
              FFC_EXER_TYP,
              FFC_OPT_TYP,
              FFC_STRK_PRC,
              FFC_LOT_SZ,
              FFC_INDSTK,
              nvl(FFC_ORDR_QTY,0),
              nvl(FFC_LMT_MRKT_FLG,0),
              nvl(FFC_CVR_SLTP_DIFF,0),
              nvl(FFC_ORDR_RFRNC,'NA'),
              nvl(FUM_SLTPFP_LMT_ALLWD_FLG,'N')
    FROM      FFC_FO_FVRT_CNTRCT_LST,FUM_FO_UNDRLYNG_MSTR
    WHERE     FFC_USR_ID   = :c_usr_id	
      AND     FFC_XCHNG_CD = :c_exchange_cd
      AND     FFC_RQST_TYP= 'C' 
			AND			FFC_PRDCT_TYP= :c_product_type
			AND			FFC_UNDRLYNG= :c_underlying
			AND			FFC_EXPRY_DT=	:c_expry_dt
			AND			FFC_OPT_TYP=	:c_option_type
			AND			FFC_STRK_PRC=	:l_strike_prc
      AND     FFC_XCHNG_CD=FUM_XCHNG_CD
      AND     FFC_UNDRLYNG=FUM_UNDRLYNG
      AND     decode(FFC_PRDCT_TYP,'I','O','U','F','F','F','O')=FUM_PRDCT_TYP
      ORDER BY  FFC_PRDCT_TYP ASC,
                FFC_UNDRLYNG ASC,
                FFC_OPT_TYP ASC,					
                FFC_EXPRY_DT ASC,
                FFC_STRK_PRC ASC,
                FFC_ORDR_QTY DESC,
                FFC_CVR_SLTP_DIFF ASC;
            END;
          END-EXEC;
	}

	/**** Added in Ver 2.2 ******/
	if(c_source_flg == 'B') 
  {
		if(c_rqst_type == 'F')
		{
      if(DEBUG_MSG_LVL_5)
			{
				fn_userlog(c_ServiceName,"Inside condition SOURCE FLAG == B REQUEST TYPE == F :%s:%s:%c:",c_usr_id,c_exchange_cd,c_source_flg);
				fn_userlog(c_ServiceName,"Basket id is :%s:",c_bskt_id);
			}
    	EXEC SQL EXECUTE
      BEGIN
        OPEN  :sys_cursor FOR
          SELECT   FBC_XCHNG_CD, 
                   FBC_PRDCT_TYP, 
               		 FBC_UNDRLYNG,     
                   TO_CHAR(FBC_EXPRY_DT,'DD-Mon-YYYY'),
                   FBC_EXER_TYP, 
                   FBC_OPT_TYP, 
                   FBC_STRK_PRC, 
                   FBC_LOT_SZ, 
                   FBC_INDSTK, 
									 nvl(FBC_ORDR_TOT_QTY,0),
								   nvl(FBC_LMT_MRKT_FLG,0),
									 nvl(FBC_CVR_SLTP_RT,0),
									 nvl(FBC_FRS_LMT_RT,0),
									 nvl(FBC_CVR_LMT_RT,0),
									 FBC_ORDR_FLW,	
									 nvl(FBC_ORDR_RFRNC,'NA'),                  
									 nvl(FUM_SLTPFP_LMT_ALLWD_FLG,'N'),	
									 FBC_BSKT_ID ,
                   FBC_ORDR_TYPE,
                   FBC_SOURCE_FLG     /** Added in Ver 2.8 Identifier for upload excel **/ 
          FROM     FBC_FO_BSKT_CNTRCT_LST, FUM_FO_UNDRLYNG_MSTR 
          WHERE    FBC_USR_ID   = :c_usr_id
          AND      FBC_XCHNG_CD = :c_exchange_cd
          AND      FBC_SRC_TYP = :c_source_flg
					AND			 FBC_BSKT_ID = :c_bskt_id
					AND			 FBC_XCHNG_CD = FUM_XCHNG_CD
					AND			 FBC_UNDRLYNG = FUM_UNDRLYNG
					AND     decode(FBC_PRDCT_TYP,'I','O','U','F','F','F','O')=FUM_PRDCT_TYP
          ORDER BY FBC_INSRT_DT DESC, /*** 2.4 ***/ 
                   FBC_PRDCT_TYP,
                   FBC_UNDRLYNG,
                   FBC_EXPRY_DT,
                   FBC_STRK_PRC ASC;
      END;
      END-EXEC;

  	}
		else if(c_rqst_type == 'E')
		{
			if(DEBUG_MSG_LVL_5)
			{
				fn_userlog(c_ServiceName,"Inside condition SOURCE FLAG == B REQUEST TYPE == E");
			}
			EXEC SQL EXECUTE
      BEGIN
        OPEN  :sys_cursor FOR
					SELECT    A.FBL_BSKT_NAME,
                    COUNT(B.FBC_USR_ID),
                    A.FBL_BSKT_ID,
                    A.FBL_CRTD_DT
          FROM      FBL_FO_BSKT_LST A, FBC_FO_BSKT_CNTRCT_LST B
          WHERE     A.FBL_USR_ID   = :c_usr_id
          AND       A.FBL_USR_ID   = B.FBC_USR_ID(+)
          AND       A.FBL_BSKT_ID  = B.FBC_BSKT_ID(+)
          AND       A.FBL_XCHNG_CD = :c_exchange_cd
          AND       A.FBL_XCHNG_CD = B.FBC_XCHNG_CD(+)
					AND				UPPER(A.FBL_BSKT_NAME) like UPPER(:c_bskt_name)
          GROUP BY  A.FBL_BSKT_NAME,
                    A.FBL_CRTD_DT,
                    A.FBL_BSKT_ID
          ORDER BY  A.FBL_CRTD_DT DESC, /*** 2.4  ***/
                    A.FBL_BSKT_NAME,
                    A.FBL_BSKT_ID;                    
      END;
      END-EXEC;	
		}
    /** Ver 2.6 starts **/
    else if(c_rqst_type == 'V')
    {
            
      if(DEBUG_MSG_LVL_5)
			{
			   fn_userlog(c_ServiceName,"Inside condition SOURCE FLAG == B REQUEST TYPE == V :%s:%c:",c_usr_id,c_source_flg);
			   fn_userlog(c_ServiceName,"Basket id is :%s:",c_bskt_id);
			}

      EXEC SQL EXECUTE
      BEGIN
      OPEN  :sys_cursor FOR
      SELECT   FBC_XCHNG_CD,
               FBC_PRDCT_TYP,
               FBC_UNDRLYNG,
               TO_CHAR(FBC_EXPRY_DT,'DD-Mon-YYYY'),
               FBC_EXER_TYP,
               FBC_OPT_TYP,
               FBC_STRK_PRC,
               FBC_INDSTK,
               nvl(FBC_ORDR_TOT_QTY,0),
               nvl(FBC_LMT_MRKT_FLG,0),
               nvl(FBC_CVR_SLTP_RT,0),
               nvl(FBC_FRS_LMT_RT,0),
               nvl(FBC_CVR_LMT_RT,0),
               FBC_ORDR_FLW,
               FBC_ORDR_TYPE,
               nvl(FBC_ORDR_RFRNC,'NA'),
               FBC_ORDR_PLC_RMRKS
      FROM     FBC_FO_BSKT_CNTRCT_MRGN
      WHERE    FBC_ORDR_PLC_STTS = 'C'
      AND      FBC_INSRT_TM = :c_insrt_tm
      AND      FBC_USR_ID   = :c_usr_id
      AND      FBC_SRC_TYP = :c_source_flg
      AND      FBC_BSKT_ID = :c_bskt_id
      ORDER BY FBC_ORDR_FLW ASC,
               FBC_PRDCT_TYP DESC;
      END;
      END-EXEC;

     }
     /** Ver 2.6 ends **/
        
	}
	if(DEBUG_MSG_LVL_5)
	{
 		fn_userlog(c_ServiceName,"Select done...");
	}
	/**** Ende Ver 2.2 *****/

	if ( SQLCODE !=	0	)
	{
			fn_userlog(c_ServiceName,"Failed While Selecting Record From FVRT Table.");
/**	 	fn_errlog( c_ServiceName, "S31090", LIBMSG, c_err_msg ); Commented in VQC   **/
			fn_errlog( c_ServiceName, "S31095",	SQLMSG, c_err_msg.arr );	 /**Added in VQC **/
   	 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );				 /**Changed from c_err_msg to c_err_msg.arr in VQC **/
    	EXEC SQL CLOSE :sys_cursor;
    	EXEC SQL FREE :sys_cursor;
/** 	tpfree ( ( char * ) ptr_fml_Rbuf );	Commented in VQC as it was used in earlier version and not in use in latest ver**/
/** 	tpfree ( ( char * ) ptr_fml_Obuf ); Commented in VQC as we were trying to release memory without allocating  **/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	/***	Ver	1.8	Ends	***/
  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN * 50); /*** Added in Ver 2.5 ***/ 
	while ( 1 )
	{
		/***	Commented In Ver	1.2

		i_ch_val = fn_getnxt_rs ( ptr_fml_Rbuf,
                              c_ServiceName,
                              c_err_msg,
                              10,
                FFO_XCHNG_CD,     st_contract.c_xchng_cd,              NULL,
                FFO_PRDCT_TYP,    (char *)&st_contract.c_prd_typ,      NULL,
                FFO_UNDRLYNG,     st_contract.c_undrlyng,              NULL,
                FFO_EXPRY_DT,     st_contract.c_expry_dt,              NULL,
                FFO_EXER_TYP,     (char *)&st_contract.c_exrc_typ,     NULL,
                FFO_OPT_TYP,      (char *)&st_contract.c_opt_typ,      NULL,
                FFO_STRK_PRC,     (char *)&st_contract.l_strike_prc,   NULL,
                FFO_CTGRY_INDSTK, (char *)&st_contract.c_ctgry_indstk, NULL,
                FFO_CA_LVL,       (char *)&st_contract.l_ca_lvl,       NULL,
                FFO_MIN_LOT_QTY,  (char *)&li_lot_sz ,                 NULL
                            );
		if ( i_ch_val != 0 )
		{
			if ( i_ch_val == NO_DATA_FOUND )
			{
				break;
			}
    	fn_errlog( c_ServiceName, "S31100", LIBMSG, c_err_msg  );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpfree ( ( char * ) ptr_fml_Rbuf );
    	tpfree ( ( char * ) ptr_fml_Obuf );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	
		*************************************************************************/

		/*** Ver 2.2 starts ***/

		if( c_source_flg == 'B' )		/*** if condition added in ver 2.2 ***/
		{
			if( c_rqst_type == 'E' ) 
			{
				EXEC SQL
				FETCH :sys_cursor
				INTO	:c_bskt_name,
							:i_bskt_count,
							:c_bskt_id,
							:c_crtd_dt;	
			
			}
			else if ( c_rqst_type == 'F' )
			{
				if(DEBUG_MSG_LVL_5)
				{
				 	fn_userlog(c_ServiceName,"Before fetch...");
				}
				EXEC SQL
        FETCH :sys_cursor
        INTO  :st_contract.c_xchng_cd,
            	:st_contract.c_prd_typ,
            	:st_contract.c_undrlyng,
            	:st_contract.c_expry_dt,
            	:st_contract.c_exrc_typ,
            	:st_contract.c_opt_typ,
            	:st_contract.l_strike_prc,
            	:li_lot_sz,
            	:st_contract.c_ctgry_indstk,
            	:l_ordr_qty,    
            	:c_lmt_mktsl_flg,
            	:l_cvr_sltp_rt,
							:l_frs_lmt_rt,
							:l_cvr_lmt_rt,
							:c_ordr_flw,
            	:c_ffc_ordr_rfrnc,
            	:c_lmt_allwd_flg,
							:c_bskt_id,
              :c_ord_typ,
							/*:c_bskt_name;*/
              :c_source_flag;  /** Added in Ver 2.8 Identifier for upload excel **/
				if(DEBUG_MSG_LVL_5)
				{
				 	fn_userlog(c_ServiceName,"After fetch... suchita :%ld: :%c:",l_cvr_lmt_rt,c_ord_typ);
				}
			}
      /** Ver 2.6 Starts **/
      else if ( c_rqst_type == 'V' )
			{
				if(DEBUG_MSG_LVL_5)
				{
				 	fn_userlog(c_ServiceName,"Before fetch...");
				}
				EXEC SQL
             FETCH :sys_cursor
             INTO  :st_contract.c_xchng_cd,
           	       :st_contract.c_prd_typ,
            	     :st_contract.c_undrlyng,
            	     :st_contract.c_expry_dt,
            	     :st_contract.c_exrc_typ,
            	     :st_contract.c_opt_typ,
            	     :st_contract.l_strike_prc,
            	     :st_contract.c_ctgry_indstk,
            	     :l_ordr_qty,    
            	     :c_lmt_mktsl_flg,
            	     :l_cvr_sltp_rt,
					         :l_frs_lmt_rt,
					         :l_cvr_lmt_rt,
					         :c_ordr_flw,
                   :c_ord_typ,
            	     :c_ffc_ordr_rfrnc,
            	     :c_ordr_stts_rmrks;

         if(DEBUG_MSG_LVL_5)
         {
           fn_userlog(c_ServiceName,"After fetch...");
         }
      }
      /** Ver 2.6 ends **/
  	}

		/*** Ver 2.2 End ****/
		else
		{
			/***  Ver 1.2 Starts  ***/
			EXEC SQL
      /** FETCH cur_vw_fvrt  Commented in Ver 1.8 ***/
			FETCH :sys_cursor																/*** Ver 1.8 ***/
			INTO	:st_contract.c_xchng_cd,
						:st_contract.c_prd_typ,
						:st_contract.c_undrlyng,
						:st_contract.c_expry_dt,
						:st_contract.c_exrc_typ,
						:st_contract.c_opt_typ,
						:st_contract.l_strike_prc,
						:li_lot_sz,
						:st_contract.c_ctgry_indstk,	
						:l_ordr_qty,									  /** Ver 1.8 **/
						:c_lmt_mktsl_flg,							  /** Ver 1.8 **/	
						:d_cvr_sltp_diff,							  /** Ver 1.8 **/
						:c_ffc_ordr_rfrnc,							/** Ver 1.8 **/
						:c_lmt_allwd_flg;								/** Ver 1.8 **/
		
		}
		if ( SQLCODE != 0 ) 
		{
				if ( SQLCODE == NO_DATA_FOUND )
				{
					break;
				}

	  		fn_errlog( c_ServiceName, "S31105", SQLMSG, c_err_msg.arr  );  /**Changed from c_err_msg to c_err_msg.arr in VQC **/
		/** EXEC SQL CLOSE cur_vw_fvrt; Commented in Ver 1.8 **/
      	EXEC SQL CLOSE :sys_cursor;																	/** Ver 1.8 **/
      	EXEC SQL FREE :sys_cursor;																	/** Ver 1.8 **/
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );			 /**Changed from c_err_msg to c_err_msg.arr in VQC **/
		/**	tpfree ( ( char * ) ptr_fml_Rbuf ); Commented in VQC as it was used in earlier version and not in use in latest ver*/
		/**	tpfree ( ( char * ) ptr_fml_Obuf ); Commented in VQC as we were trying to release memory without allocating  **/
      	tpfree ( ( char * ) ptr_fml_Obuf );  /** Added in Ver 2.5 **/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	
	
	if ( c_source_flg != 'B' && (c_rqst_type != 'E' || c_rqst_type != 'F' || c_rqst_type != 'V'))
                         		/*** If condition added in Ver 2.2 ***/ /** New request type V added in Ver 2.6 **/
	{	
		i_rtrn_vl	=	fn_get_qt_vf (	c_ServiceName,
														&st_contract,											
														&st_cntrct_qt,
														c_err_msg.arr,			 	/**Changed from c_err_msg to c_err_msg.arr in VQC **/
														c_source_flg      	/** Added in VQC ***/
													 );

		if ( i_rtrn_vl != 0	)
    {
     	 	fn_errlog( c_ServiceName, "S31110", LIBMSG, c_err_msg.arr );	 /**Changed from c_err_msg to c_err_msg.arr in VQC **/
		/**	EXEC SQL CLOSE cur_vw_fvrt;  Commented in Ver 1.8 **/
      	EXEC SQL CLOSE :sys_cursor;																/** Ver 1.8 **/
      	EXEC SQL FREE :sys_cursor;																/** Ver 1.8 **/	
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );		 /**Changed from c_err_msg to c_err_msg.arr in VQC **/
		/**	tpfree ( ( char * ) ptr_fml_Rbuf ); Commented in VQC as it was used in earlier version and not in use in latest ver*/
		/**	tpfree ( ( char * ) ptr_fml_Obuf );  Commented in VQC as we were trying to release memory without allocating  **/
      	tpfree ( ( char * ) ptr_fml_Obuf );  /** Added in Ver 2.5 **/
        tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
    }
	}
 
  if( c_source_flg == 'B' && c_rqst_type == 'F' )
  {
    i_rtrn_vl = fn_get_qt_vf ( c_ServiceName,
                            &st_contract,
                            &st_cntrct_qt,
                            c_err_msg.arr,
                            c_source_flg
                           );

    if ( i_rtrn_vl != 0 )
    {
        fn_errlog( c_ServiceName, "S31115", LIBMSG, c_err_msg.arr );   
        EXEC SQL CLOSE :sys_cursor;                               
        EXEC SQL FREE :sys_cursor;                               
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );  
        tpfree ( ( char * ) ptr_fml_Obuf );  /** Added in Ver 2.5 **/   
        tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
    }
  
		if(DEBUG_MSG_LVL_5)
		{ 
    	fn_userlog( c_ServiceName,"st_cntrct_qt.l_lst_trdd_prc is :%ld:",st_cntrct_qt.l_lst_trdd_prc);
		}

     /** Ver 2.7 Start **/
        MEMSET(c_survmsg);
        EXEC SQL SELECT 'P',NVL(SIM_DESC,'')||'['||NVL(SIM_SHORT_CD,'')||']'
                INTO    :c_surv_flg,:c_survmsg
                FROM    XSM_XCHNG_STK_MSTR,SIM_SURV_INDCTR_MSTR
                WHERE   XSM_XCHNG_CD  = 'NSE'
                AND SIM_SURV_IND=NVL(XSM_SURV_IND, 0 )
                AND     XSM_STCK_CD   = :st_contract.c_undrlyng;
        if (SQLCODE!=0 && SQLCODE !=NO_DATA_FOUND)
        {
        fn_errlog( c_ServiceName, "S31120", SQLMSG, c_err_msg.arr );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        tpfree ( ( char * ) ptr_fml_Obuf );
        tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }
        else if(SQLCODE==NO_DATA_FOUND)
        {
          c_surv_flg='N';
        }
      rtrim(c_survmsg);
    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog( c_ServiceName,"c_surv_flg:%c: c_survmsg:%s:",c_surv_flg,c_survmsg);
    }
    /** Ver 2.7 End **/
  } 

    /*** Ver 1.8 Starts Here ***/
    if( c_source_flg == 'C' )
    {
       st_cntrct_qt.c_prd_typ = st_contract.c_prd_typ;
    }
    /*** Ver 1.8 Ends Here ***/

		strcpy(c_xchng_cd,st_contract.c_xchng_cd);
		strcpy(c_undrlyng,st_contract.c_undrlyng);

	if ( c_source_flg != 'B' && (c_rqst_type != 'E' || c_rqst_type != 'F') )    /*** If condition added in Ver 2.2 ***/
	{
		i_rtrn_cd	=	fn_svc_qt( c_ServiceName,
													 c_undrlyng,
													 c_xchng_cd,
													 &d_quote,
													 c_quote_tm,
													 c_err_msg.arr		 /**Changed from c_err_msg to c_err_msg.arr in VQC **/
 												 );

		if ( i_rtrn_cd != 0 )
    {
      	fn_errlog( c_ServiceName, "S31125", LIBMSG, c_err_msg.arr );	 /**Changed from c_err_msg to c_err_msg.arr in VQC **/
		/**	EXEC SQL CLOSE cur_vw_fvrt;        Commented in Ver 1.8 **/
      	EXEC SQL CLOSE :sys_cursor;																/** Ver 1.8 **/
      	EXEC SQL FREE :sys_cursor;																/** Ver 1.8 **/
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );		 /**Changed from c_err_msg to c_err_msg.arr in VQC **/
		/**	tpfree ( ( char * ) ptr_fml_Rbuf ); Commented in VQC as it was used in earlier version and not in use in latest ver*/
		/**	tpfree ( ( char * ) ptr_fml_Obuf ); Commented in VQC as we were trying to release memory without allocating  **/
      	tpfree ( ( char * ) ptr_fml_Obuf );  /** Added in Ver 2.5 **/
        tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
    }
	}

		/***	Ver	1.2	Ends	***/

		
		/***	Commented In Ver 1.2	As Service Call Replaced By Fuctions

		i_ch_val = fn_call_svc_fml( c_ServiceName,
                                    c_err_msg,
                                    "SFO_CMB_QT",
                                    0,
                                    8,
                                    36, 
       FFO_XCHNG_CD,      st_contract.c_xchng_cd,
       FFO_PRDCT_TYP,     (char *)&st_contract.c_prd_typ,
       FFO_UNDRLYNG,      st_contract.c_undrlyng,
       FFO_EXPRY_DT,      st_contract.c_expry_dt,
       FFO_EXER_TYP,      (char *)&st_contract.c_exrc_typ,
       FFO_OPT_TYP,       (char *)&st_contract.c_opt_typ,
       FFO_STRK_PRC,      (char *)&st_contract.l_strike_prc, 
			 FFO_ROUT_CRT,			st_usr_prfl.c_rout_crt,
       FFO_XCHNG_CD,      (char *)st_cntrct_qt.c_xchng_cd,             NULL,
       FFO_PRDCT_TYP,     (char *)&st_cntrct_qt.c_prd_typ,             NULL,
       FFO_UNDRLYNG,      st_cntrct_qt.c_undrlyng,                     NULL,
       FFO_EXPRY_DT,      st_cntrct_qt.c_expry_dt,                     NULL,
       FFO_EXER_TYP,      (char *)&st_cntrct_qt.c_exrc_typ,            NULL,
       FFO_OPT_TYP,       (char *)&st_cntrct_qt.c_opt_typ,             NULL,
       FFO_STRK_PRC,      (char *)&st_cntrct_qt.l_strike_prc,          NULL,
       FFO_CTGRY_INDSTK,  (char *)&st_cntrct_qt.c_ctgry_indstk,        NULL,
       FFO_LST_TRD_PRC,   (char *)&st_cntrct_qt.l_lst_trdd_prc,        NULL,
       FFO_LST_TRD_TM,    st_cntrct_qt.c_lst_trdd_time,                NULL,
       FFO_LST_TRD_QTY,   (char *)&st_cntrct_qt.l_lst_trdd_qty,        NULL,
       FFO_BST_BID_PRC,   (char *)&st_cntrct_qt.l_bst_bid_prc,         NULL,
       FFO_BST_BID_QTY,   (char *)&st_cntrct_qt.l_bst_bid_qty,         NULL,
       FFO_BST_OFFR_PRC,  (char *)&st_cntrct_qt.l_bst_offr_prc,        NULL,
       FFO_BST_OFFR_QTY,  (char *)&st_cntrct_qt.l_bst_offr_qty,        NULL,
       FFO_CLS_PRC,       (char *)&st_cntrct_qt.l_close_prc,           NULL,
       FFO_OPN_PRC,       (char *)&st_cntrct_qt.l_open_prc,            NULL,
       FFO_HGH_PRC,       (char *)&st_cntrct_qt.l_high_prc,            NULL,
       FFO_LOW_PRC,       (char *)&st_cntrct_qt.l_low_prc,             NULL,
       FFO_PRVS_CLS_PRC,  (char *)&st_cntrct_qt.l_prev_close_prc,      NULL,
       FFO_CHNG_PRVS_CLS, (char *)&st_cntrct_qt.l_chng_prvs_close_prc, NULL,
       FFO_PRC_INDCTR,    (char *)&st_cntrct_qt.c_indctr,              NULL,
       FFO_HGH_PRC_RNG,   (char *)&st_cntrct_qt.l_high_prc_rng,        NULL,
       FFO_LOW_PRC_RNG,   (char *)&st_cntrct_qt.l_low_prc_rng,         NULL,
       FFO_AVRG_TRD_PRC,  (char *)&st_cntrct_qt.l_avg_trdd_prc,        NULL,
       FFO_TOT_QTY_TRDD,  (char *)&st_cntrct_qt.l_tot_qty_trdd,        NULL,
       FFO_TOT_VAL_TRDD,  (char *)&st_cntrct_qt.l_tot_val_trdd,        NULL,
       FFO_BASE_PRC,      (char *)&st_cntrct_qt.l_base_prc,            NULL,
			 FFO_CRNT_OI,       ( char * )&st_cntrct_qt.d_crnt_oi,           NULL,
       FFO_CHNG_OI,       ( char * )&st_cntrct_qt.d_chng_oi,           NULL,
       FFO_OI_HIGH,       ( char * )&st_cntrct_qt.d_oi_high,           NULL,
       FFO_OI_LOW,        ( char * )&st_cntrct_qt.d_oi_low,            NULL,
       FFO_OI_INDCTR,     ( char * )&st_cntrct_qt.c_oi_indctr,         NULL,
       FFO_RQST_TYP,      (char *)&st_cntrct_qt.c_rqst_typ,            NULL,
       FML_QUOTE,         (char *)&d_quote,                            NULL,
       FML_QUOTE_TIME,    c_quote_tm,                                  NULL
                                   );
  	if ( i_ch_val != SUCC_BFR )
  	{
    	fn_errlog( c_ServiceName, "S31130", LIBMSG, c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	tpfree ( ( char * ) ptr_fml_Rbuf );
    	tpfree ( ( char * ) ptr_fml_Obuf );
    	tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  	}

		****************************************************************************/

		if ( c_source_flg != 'B' && (c_rqst_type != 'E' || c_rqst_type != 'F') )		/*** If condition added in Ver 2.2 ***/
		{
			EXEC SQL
				SELECT  to_date( :st_cntrct_qt.c_expry_dt , 'DD-Mon-YYYY' ) - 
        	      trunc( SYSDATE )
				INTO		:d_datediff
				FROM		dual;
		
		if ( SQLCODE != 0 )
		{
   /**	fn_errlog( c_ServiceName, "S31135", LIBMSG, c_err_msg ); Commented in VQC **/
				fn_errlog( c_ServiceName, "S31140", SQLMSG, c_err_msg.arr );  /*** Added in VQC **/
    /** EXEC SQL CLOSE cur_vw_fvrt; Commented in Ver 1.8 **/
      	EXEC SQL CLOSE :sys_cursor;																/** Ver 1.8 **/
      	EXEC SQL FREE :sys_cursor;																/** Ver 1.8 **/
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );		/**Changed from c_err_msg to c_err_msg.arr in VQC **/
		/** tpfree ( ( char * ) ptr_fml_Rbuf ); Commented in VQC as it was used in earlier version and not in use in latest ver*/
		/**	tpfree ( ( char * ) ptr_fml_Obuf ); Commented in VQC as we were trying to release memory without allocating  **/
    		tpfree ( ( char * ) ptr_fml_Obuf );  /** Added in Ver 2.5 **/
        tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}
		
		 d_rate = ( ( pow ( ((double)st_cntrct_qt.l_lst_trdd_prc /(d_quote * 100.0)),
                     ( 365.0/d_datediff )) - 1.0 ) ) * 100.0;
		}	

		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog( c_ServiceName,"Before pack data");	
		}

		if ( c_source_flg == 'B' && c_rqst_type == 'E' )    /*** If condition added in Ver 2.2 ***/
		{
			i_ch_val = fn_pack_vartofml ( c_ServiceName,
                                    c_err_msg.arr,
																		&ptr_fml_Obuf,
																		4,
																		FFO_SYMBOL, 			(char *)c_bskt_name,
																		FFO_SERIES, 			(char *)c_bskt_id,
																		FFO_MIN_LOT_QTY,	(char *)&i_bskt_count,
																		FFO_EXECN_DT,			(char *)c_crtd_dt
																	); 	
		}
    else  if ( c_source_flg == 'B' && c_rqst_type == 'F' )    /*** else If loop added in Ver 2.2 ***/
    {



      i_ch_val = fn_pack_vartofml ( c_ServiceName,
                                    c_err_msg.arr,
                                    &ptr_fml_Obuf,
                                    24, /* Changed from 21 to 23 in Ver 2.7 */ /* Changed from 23 to 24 in Ver 2.8 */ 
																		FFO_MIN_LOT_QTY, (char *)&li_lot_sz,
																		FFO_STRK_PRC, (char *)&st_contract.l_strike_prc,
																		FFO_CTGRY_INDSTK,	(char *)&st_contract.c_ctgry_indstk,
																		FFO_EXER_TYP,	(char *)&st_contract.c_exrc_typ,
																		FFO_OPT_TYP,	(char *)&st_contract.c_opt_typ,
																		FFO_PRDCT_TYP,	(char *)&st_contract.c_prd_typ,
																		FFO_EXPRY_DT,	(char *)st_contract.c_expry_dt,
																		FFO_UNDRLYNG,	(char *)st_contract.c_undrlyng,
																		FFO_XCHNG_CD,	(char *)st_contract.c_xchng_cd,
																		FFO_SYMBOL,	(char *)c_bskt_name,
																		FFO_ORDR_RFRNC,	(char *)c_ffc_ordr_rfrnc,
                                    FFO_SERIES,       (char *)c_bskt_id,
																		FFO_BOARD_LOT_QTY, (char *)&l_ordr_qty,
																		FFO_LMT_MKT_SL_FLG, (char *)&c_lmt_mktsl_flg,
																		FFO_CVR_BRKG,				(char *)&l_cvr_sltp_rt,
																		FFO_CURR_RT,				(char *)&l_frs_lmt_rt,
																		FFO_LMT_RT,					(char *)&l_cvr_lmt_rt,
																		FFO_ORDR_FLW,				(char *)&c_ordr_flw,
																		FFO_DLVRY_ALLWD,		(char *)&c_lmt_allwd_flg,
                                    FFO_LST_TRD_PRC,   (char *)&st_cntrct_qt.l_lst_trdd_prc,
                                    FFO_ORD_TYP,(char *)&c_ord_typ,
                                  	FFO_STLMNT_TYP,(char *)&c_surv_flg, /* Ver 2.7 */
                                    FFO_SYS_MSG,(char *)c_survmsg, /* Ver 2.7 */
                                    FFO_RQST_TYP,(char *)&c_source_flag /** Added in Ver 2.8 **/
																		);
	   }
      /** Ver 2.6 Starts **/
     else  if ( c_source_flg == 'B' && c_rqst_type == 'V' ) 
     {
      i_ch_val = fn_pack_vartofml ( c_ServiceName,
                                    c_err_msg.arr,
                                    &ptr_fml_Obuf,
                                    14,
                                    FFO_XCHNG_CD,	     (char *)st_contract.c_xchng_cd,
                                    FFO_PRDCT_TYP,	   (char *)&st_contract.c_prd_typ,
                                    FFO_UNDRLYNG,	     (char *)st_contract.c_undrlyng,
                                    FFO_EXPRY_DT,	     (char *)st_contract.c_expry_dt,
                                    FFO_OPT_TYP,	     (char *)&st_contract.c_opt_typ,
                                    FFO_EXER_TYP,      (char *)&st_contract.c_exrc_typ,
                                    FFO_STRK_PRC,      (char *)&st_contract.l_strike_prc,
                                    FFO_ORDR_FLW,	     (char *)&c_ordr_flw,
                                    FFO_ORD_TOT_QTY,   (char *)&l_ordr_qty,
                                    FFO_LMT_MKT_SL_FLG,(char *)&c_lmt_mktsl_flg,
                                    FFO_STP_LSS_TGR,   (char *)&l_cvr_sltp_rt,
                                    FFO_LMT_RT,	       (char *)&l_cvr_lmt_rt,
                                    FFO_ORDR_RFRNC,	   (char *)c_ffc_ordr_rfrnc,
                                    FFO_REMARKS,       (char *)c_ordr_stts_rmrks,
                                    FFO_SERIES,        (char *)c_bskt_id
                                    );


     }
     /** Ver 2.6 ends **/
		else 
		{

		
			i_ch_val = fn_pack_vartofml ( c_ServiceName,
                                    c_err_msg.arr,	/**Changed from c_err_msg to c_err_msg.arr in VQC **/
                                    &ptr_fml_Obuf,
                                    44,            /** Ver 1.4 ** changed from 38 to 39 **Ver 1.8 Changed from 39 to 44**/
       FFO_XCHNG_CD,      (char *)st_cntrct_qt.c_xchng_cd,
       FFO_PRDCT_TYP,     (char *)&st_cntrct_qt.c_prd_typ,
       FFO_UNDRLYNG,      st_cntrct_qt.c_undrlyng,
       FFO_EXPRY_DT,      st_cntrct_qt.c_expry_dt,
       FFO_EXER_TYP,      (char *)&st_cntrct_qt.c_exrc_typ,
       FFO_OPT_TYP,       (char *)&st_cntrct_qt.c_opt_typ,
       FFO_STRK_PRC,      (char *)&st_cntrct_qt.l_strike_prc,
       FFO_CTGRY_INDSTK,  (char *)&st_cntrct_qt.c_ctgry_indstk,
       FFO_LST_TRD_PRC,   (char *)&st_cntrct_qt.l_lst_trdd_prc,
       FFO_LST_TRD_TM,    st_cntrct_qt.c_lst_trdd_time,
       FFO_LST_TRD_QTY,   (char *)&st_cntrct_qt.l_lst_trdd_qty,
       FFO_BST_BID_PRC,   (char *)&st_cntrct_qt.l_bst_bid_prc,
       FFO_BST_BID_QTY,   (char *)&st_cntrct_qt.l_bst_bid_qty,
       FFO_BST_OFFR_PRC,  (char *)&st_cntrct_qt.l_bst_offr_prc,
       FFO_BST_OFFR_QTY,  (char *)&st_cntrct_qt.l_bst_offr_qty,
       FFO_CLS_PRC,       (char *)&st_cntrct_qt.l_close_prc,
       FFO_OPN_PRC,       (char *)&st_cntrct_qt.l_open_prc,
       FFO_HGH_PRC,       (char *)&st_cntrct_qt.l_high_prc,
       FFO_LOW_PRC,       (char *)&st_cntrct_qt.l_low_prc,
       FFO_PRVS_CLS_PRC,  (char *)&st_cntrct_qt.l_prev_close_prc,
       FFO_CHNG_PRVS_CLS, (char *)&st_cntrct_qt.l_chng_prvs_close_prc,
       FFO_PRC_INDCTR,    (char *)&st_cntrct_qt.c_indctr,
       FFO_HGH_PRC_RNG,   (char *)&st_cntrct_qt.l_high_prc_rng,
       FFO_LOW_PRC_RNG,   (char *)&st_cntrct_qt.l_low_prc_rng,
       FFO_AVRG_TRD_PRC,  (char *)&st_cntrct_qt.l_avg_trdd_prc,
       FFO_TOT_QTY_TRDD,  (char *)&st_cntrct_qt.l_tot_qty_trdd,
       FFO_TOT_VAL_TRDD,  (char *)&st_cntrct_qt.l_tot_val_trdd,
       FFO_BASE_PRC,      (char *)&st_cntrct_qt.l_base_prc,
       FFO_CRNT_OI,       ( char * )&st_cntrct_qt.d_crnt_oi,
       FFO_CHNG_OI,       ( char * )&st_cntrct_qt.d_chng_oi,
       FFO_OI_HIGH,       ( char * )&st_cntrct_qt.d_oi_high,
       FFO_OI_LOW,        ( char * )&st_cntrct_qt.d_oi_low,
       FFO_OI_INDCTR,     ( char * )&st_cntrct_qt.c_oi_indctr,
       FFO_RQST_TYP,      (char *)&st_cntrct_qt.c_rqst_typ,
       FML_QUOTE,         (char *)&d_quote,
       FML_QUOTE_TIME,    (char *)c_quote_tm,
       FFO_MIN_LOT_QTY,   (char *)&li_lot_sz,
       FFO_RATE,          (char *)&d_rate,
       FFO_AMOUNT,        (char *)&st_cntrct_qt.d_tot_val_trdd,        /** Ver 1.4 **/
			 FFO_ORD_TOT_QTY,		(char *)&l_ordr_qty,												 /** Ver 1.8 **/			
			 FFO_LMT_MKT_SL_FLG,(char *)&c_lmt_mktsl_flg,										 /** Ver 1.8 **/
			 FFO_INTRST_RT, 		(char *)&d_cvr_sltp_diff,										 /** Ver 1.8 **/
			 FFO_ORDR_RFRNC,		(char *)c_ffc_ordr_rfrnc,										 /** Ver 1.8 **/
			 FFO_DLVRY_ALLWD,		(char *)&c_lmt_allwd_flg										 /** Ver 1.8 **/
   	  );
		}

  	if ( i_ch_val != 0 )
  	{
    		fn_errlog( c_ServiceName, "S31145", LIBMSG, c_err_msg.arr ); /**Changed from c_err_msg to c_err_msg.arr in VQC **/
    /** EXEC SQL CLOSE cur_vw_fvrt; Commented in Ver 1.8 **/
      	EXEC SQL CLOSE :sys_cursor;																		/** Ver 1.8 **/
      	EXEC SQL FREE :sys_cursor;																		/** Ver 1.8 **/
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );				/**Changed from c_err_msg to c_err_msg.arr in VQC **/
		/** tpfree ( ( char * ) ptr_fml_Rbuf ); Commented in VQC as it was used in earlier version and not in use in latest ver*/
    		tpfree ( ( char * ) ptr_fml_Obuf );  /** Added in Ver 2.5 **/
        tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  	}
	
	}

 	/** EXEC SQL CLOSE cur_vw_fvrt; Commented in Ver 1.8 **/

        EXEC SQL CLOSE :sys_cursor;																	/** Ver 1.8 **/
        EXEC SQL FREE :sys_cursor;																	/** Ver 1.8 **/
		/**	tpfree( ( char *)ptr_fml_Rbuf );  Commented in VQC as it was used in earlier version and not in use in latest ver**/
				if(DEBUG_MSG_LVL_5)
				{
					fn_userlog( c_ServiceName,"Service successfully called");	
				}
				tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
}

/***	Ver	1.2	Starts	***/
int fn_get_qt_vf( char   *c_ServiceName,    
               struct vw_contract   *ptr_st_contract,
               struct vw_cntrct_qt  *ptr_st_cntrct_qt,
               char   *c_err_msg,
							 char   c_source_flg      /** Added in VQC ***/
             )
{

  varchar c_expiry_dt [ LEN_DATE ];
  varchar c_exp_dt [ LEN_DATE ];
  varchar c_lst_trd_dt [ LEN_DATE ];
  short i_trd_tm=0;		/*** Initialized in Ver 2.2 ***/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Inside fn_get_qt_vf Function.");
	}

	MEMSET(c_expiry_dt);	/*** Initialized in Ver 2.2 ***/
	MEMSET(c_exp_dt);			/*** Initialized in Ver 2.2 ***/
	MEMSET(c_lst_trd_dt);	/*** Initialized in Ver 2.2 ***/

  rtrim ( ptr_st_contract->c_expry_dt );
  strcpy ( ( char * )c_expiry_dt.arr, ptr_st_contract->c_expry_dt );
 	SETLEN ( c_expiry_dt );

  if(DEBUG_MSG_LVL_5)
  {
		fn_userlog(c_ServiceName,"expiry date:%s:",ptr_st_contract->c_expry_dt);
		fn_userlog(c_ServiceName,"XCHNG CODE:%s:",ptr_st_contract->c_xchng_cd);
		fn_userlog(c_ServiceName,"product type:%c:",ptr_st_contract->c_prd_typ);
		fn_userlog(c_ServiceName,"Underlyng :%s:",ptr_st_contract->c_undrlyng);
		fn_userlog(c_ServiceName,"Exercise type:%c:",ptr_st_contract->c_exrc_typ);
		fn_userlog(c_ServiceName,"Option type:%c:",ptr_st_contract->c_opt_typ);
		fn_userlog(c_ServiceName,"Strike Price:%ld:",ptr_st_contract->l_strike_prc);
	}

	EXEC SQL
		SELECT	FTQ_XCHNG_CD,
            FTQ_PRDCT_TYP,
            FTQ_UNDRLYNG,
            TO_CHAR ( FTQ_EXPRY_DT, 'dd-Mon-yyyy' ),
            FTQ_EXER_TYP,
            FTQ_OPT_TYP,
            NVL(FTQ_STRK_PRC, 0 ),
            FTQ_INDSTK,
            NVL( FTQ_LST_TRD_PRC, 0 ),
            TO_CHAR ( FTQ_LST_TRD_TM, 'dd-Mon-yyyy hh24:mi:ss' ),
            NVL( FTQ_LST_TRD_QTY, 0 ),
            NVL( FTQ_BST1_BID_PRC, 0 ),
            NVL( FTQ_BST1_BID_QTY, 0 ),
            NVL( FTQ_BST1_OFFR_PRC, 0 ),
            NVL( FTQ_BST1_OFFR_QTY, 0 ),
            NVL( FTQ_CLS_PRC, 0 ),
            NVL( FTQ_OPN_PRC, 0 ),
            NVL( FTQ_HGH_PRC, 0 ),
            NVL( FTQ_LOW_PRC, 0 ),
            NVL( FTQ_PRVS_CLS_PRC, 0 ),
            NVL( FTQ_CHNG_PRVS_CLS, 0 ),
            NVL(FTQ_INDCTR,'+'),
            NVL( FTQ_HGH_PRC_RNG, 0 ),
            NVL( FTQ_LOW_PRC_RNG, 0 ),
            NVL( FTQ_AVRG_TRD_PRC, 0 ),
            NVL( FTQ_TOT_QTY_TRDD, 0 ),
            NVL( FTQ_TOT_VAL_TRDD, 0 ),
            NVL( FTQ_BASE_PRC, 0 ),
            NVL( FTQ_CRNT_OI, 0 ),
            NVL( FTQ_CHNG_OI, 0 ),
            NVL( FTQ_OI_HIGH, 0 ),
            NVL( FTQ_OI_LOW, 0 ),
            NVL( FTQ_OI_INDCTR, '+' ),
            '*',
            NVL( FTQ_MIN_LOT_QTY,'0') 
			INTO	:ptr_st_cntrct_qt->c_xchng_cd,
            :ptr_st_cntrct_qt->c_prd_typ,
            :ptr_st_cntrct_qt->c_undrlyng,
            :c_exp_dt,
            :ptr_st_cntrct_qt->c_exrc_typ,
            :ptr_st_cntrct_qt->c_opt_typ,
            :ptr_st_cntrct_qt->l_strike_prc,
            :ptr_st_cntrct_qt->c_ctgry_indstk,
            :ptr_st_cntrct_qt->l_lst_trdd_prc,
            :c_lst_trd_dt:i_trd_tm,
            :ptr_st_cntrct_qt->l_lst_trdd_qty,
            :ptr_st_cntrct_qt->l_bst_bid_prc,
            :ptr_st_cntrct_qt->l_bst_bid_qty,
            :ptr_st_cntrct_qt->l_bst_offr_prc,
            :ptr_st_cntrct_qt->l_bst_offr_qty,
            :ptr_st_cntrct_qt->l_close_prc,
            :ptr_st_cntrct_qt->l_open_prc,
            :ptr_st_cntrct_qt->l_high_prc,
            :ptr_st_cntrct_qt->l_low_prc,
            :ptr_st_cntrct_qt->l_prev_close_prc,
            :ptr_st_cntrct_qt->l_chng_prvs_close_prc,
            :ptr_st_cntrct_qt->c_indctr,
            :ptr_st_cntrct_qt->l_high_prc_rng,
            :ptr_st_cntrct_qt->l_low_prc_rng,
            :ptr_st_cntrct_qt->l_avg_trdd_prc,
            :ptr_st_cntrct_qt->l_tot_qty_trdd,
           /***  :ptr_st_cntrct_qt->l_tot_val_trdd, ** Ver 1.4 **/
            :ptr_st_cntrct_qt->d_tot_val_trdd,   /*** Ver 1.4 ***/
            :ptr_st_cntrct_qt->l_base_prc,
            :ptr_st_cntrct_qt->d_crnt_oi,
            :ptr_st_cntrct_qt->d_chng_oi,
            :ptr_st_cntrct_qt->d_oi_high,
            :ptr_st_cntrct_qt->d_oi_low,
            :ptr_st_cntrct_qt->c_oi_indctr,
            :ptr_st_cntrct_qt->c_rqst_typ,
            :ptr_st_cntrct_qt->l_min_lot_qty

			FROM	 FTQ_FO_TRD_QT
			WHERE	 FTQ_XCHNG_CD  = :ptr_st_contract->c_xchng_cd
      AND    FTQ_PRDCT_TYP = decode(:ptr_st_contract->c_prd_typ,'P','F','I','O','U','F',:ptr_st_contract->c_prd_typ) /** I * U added *** Ver 1.8 ***/ 
      AND    FTQ_UNDRLYNG  = :ptr_st_contract->c_undrlyng
      AND    FTQ_EXPRY_DT  = to_date ( :c_expiry_dt,'dd-Mon-yyyy' )
      AND    FTQ_EXER_TYP  = :ptr_st_contract->c_exrc_typ
      AND    FTQ_OPT_TYP   = :ptr_st_contract->c_opt_typ
      AND    FTQ_STRK_PRC  = :ptr_st_contract->l_strike_prc;

			if ( SQLCODE != 0 )
			{
				fn_userlog(c_ServiceName,"Failed To Get Trade Quotes."); 
	/**  	fn_errlog( c_ServiceName, "S31150", LIBMSG, c_err_msg  );	commented in VQC	**/
		    fn_errlog( c_ServiceName, "S31155", SQLMSG, c_err_msg  );	 /** Added in VQC **/
				return -1;
			}

	SETNULL ( c_exp_dt );
	SETNULL ( c_lst_trd_dt );

		/** Ver 1.8 Starts **/

	if(c_source_flg != 'F')					/** Added if condition in VQC **/
	{	
		if(ptr_st_contract->c_prd_typ == 'U')
		{
			ptr_st_cntrct_qt->c_prd_typ='U';
		}
		else if(ptr_st_contract->c_prd_typ == 'I')
		{
			ptr_st_cntrct_qt->c_prd_typ='I';
		}
	}

	/** Ver 1.8 Ends **/
  strcpy ( ptr_st_cntrct_qt->c_expry_dt , ( char * ) c_exp_dt.arr );
  strcpy ( ptr_st_cntrct_qt->c_lst_trdd_time , ( char * ) c_lst_trd_dt.arr );

	return 0 ;
}
int fn_svc_qt( char *c_ServiceName,
               char *c_undrlyng,
               char *c_xchng_cd,
               double *d_quote,
               char *c_quote_tm,
               char *c_err_msg
             )
{

	char c_eq_xchng_cd [4]="\0";	/*** Initialized in Ver 2.2 ***/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Inside Function fn_svc_qt.");
	}

	if ( strcmp(c_xchng_cd,"NFO") == 0 )
	{
		strcpy(c_eq_xchng_cd ,"NSE");
	}
	else
	{
		strcpy(c_eq_xchng_cd,"BSE");
	}

	rtrim(c_undrlyng);

	EXEC SQL
   	SELECT
     	LTQ_RT,
			TO_CHAR(NVL(LTQ_DT,SYSDATE), 'DD-Mon-YYYY HH24:MI:SS') /** Ver 1.6 NVL added because exchange stopped sending feeds for global indices in cash market **/
   	INTO
     	:d_quote,
     	:c_quote_tm
  	FROM LTQ_TRD_QT
  	WHERE LTQ_STCK_CD 	= :c_undrlyng
  	AND 	LTQ_XCHNG_CD 	= :c_eq_xchng_cd;

	if ( SQLCODE != 0 )
	{
		fn_userlog(c_ServiceName,"Error In Spot Price Selection.");
		return -1;
	}

	/**** Ver 1.5 ****/

	if ( strcmp(c_undrlyng,"INDVIX") == 0 )
  {
    *d_quote = *d_quote / 100;
  }

	/**** Ver 1.5 ****/

	return 0;

}
