/*********************************************************************************
SERVICE : sfo_payoff_anly.pc

Purpose : To get the interval between strikes for the given underlying and to do 
					checks where ever necessary.

Input Parameters :
FFO_USR_ID
FFO_SSSN_ID

Output Parameters :

FFO_INSTRMNT_TYP		String  Risk profile
FFO_OPT_TYP			Char  Status.

Author  - Vidyayini Krish

Created on  29-Apr-2009
	1.0 	  New
  1.1			on 			07-Feb-2014 : Taking Expiry of NIFTY (Shashi K)
  1.2     on      13-Aug-2015 : Contract Master and Trade Quote Table Merger Changes(Ritesh D.)
	1.3			on			23-Jan-2019	: Handing for NIFTY weekly expiry (Bhushan Harekar)
**********************************************************************************/
/**** C header ****/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h>
#include <fn_log.h>     
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_session.h>
#include <fn_read_debug_lvl.h>  

int Z;
#define INIT(x,y)  for(Z=0; Z< y; Z++) x[Z] =0
#define TOTAL_FML  15
#define MEMSET(A)  memset(&A,'\0',sizeof(A))

void SFO_PAYOFF_ANLY(TPSVCINFO *rqst)
{
	char  	c_ServiceName[33];
	char    c_err_msg[256];
	int   	i_err[TOTAL_FML];
	int   	i_ferr[TOTAL_FML];
	int   	i_loop = 0;
	int     i_count = 0;
	int     i_tot_rec = 0;
	char    c_prd_typ;
	char    c_opt_typ;
	char    c_indstk;
	char    c_prd_typ1;
	char    c_indstk1;
	char    c_prd_typ2;
	char    c_indstk2;
	char    c_user_id[9];
	char    c_expry_dt[3][12];
	char    c_expiry_dt[12];
	char    c_expiry_dt1[12];
	char    c_expiry_dt2[12];
	char    c_action[4];
	char    c_undrlyng[7];
	char    c_action1[12];
	char    c_action2[12];
	char    c_strategy[4];
	char    c_exp_dt[7];
	char    c_mtch_accnt[11];
  long    l_sssn_id = 0;
  int     i_chk_val;
	int     no_of_records = 0;
	long    l_interval = 0;
	long    l_strike = 0;
	long    l_strike1 = 0;
	long    l_strike2 = 0;
	long    l_strike1_intr = 0;
	long    l_strike2_intr = 0;
	long    l_current_rt = 0;
	long    l_current_rt1 = 0;
	long    l_current_rt2 = 0;
	double  d_strike = 0.0;

  struct vw_usr_prfl st_usr_prfl;
  struct vw_err_msg st_err_msg;

  EXEC SQL INCLUDE "table/sps_strtgy_payoff_summary.h";

	FBFR32  *ptr_Obuf;
	FBFR32  *ptr_Ibuf;

  ptr_Ibuf = (FBFR32*)rqst->data; 
  ptr_Obuf    = (FBFR32 *)NULL;

	strcpy(c_ServiceName,"SFO_PAYOFF_ANLY");

	INITDBGLVL(c_ServiceName);
  INIT( i_err, TOTAL_FML );
  INIT( i_ferr, TOTAL_FML );

  MEMSET(c_user_id);
	MEMSET(c_expry_dt);
	MEMSET(c_undrlyng);
	MEMSET(c_action);
	MEMSET(c_strategy);

  i_tot_rec = Foccur32( (FBFR32 *)ptr_Ibuf, FFO_ACTION1 );	

	if(DEBUG_MSG_LVL_5)
  {
    fn_userlog( c_ServiceName,"Payoff Analyzer started" );
	}


	for( i_count = 0; i_count < i_tot_rec; i_count++ ) 
	{
  	i_err[0]  = Fget32( ptr_Ibuf, FFO_USR_ID, 0, (char *)c_user_id, 0 );
  	i_ferr[0] = Ferror32;
  	i_err[1]  = Fget32( ptr_Ibuf, FFO_SSSN_ID, 0, (char *)&l_sssn_id, 0 );
  	i_ferr[1] = Ferror32;
		i_err[2]  = Fget32( ptr_Ibuf, FFO_EXPRY_DT, 0, (char *)c_exp_dt, 0 );
		i_ferr[2] = Ferror32;
		i_err[3]  = Fget32( ptr_Ibuf, FFO_PRDCT_TYP, i_count, (char *)&c_prd_typ, 0 );
		i_ferr[3] = Ferror32;
		i_err[4]  = Fget32( ptr_Ibuf, FFO_CTGRY_INDSTK, i_count, (char *)&c_indstk, 0 );
		i_ferr[4] = Ferror32;
		i_err[5]  = Fget32( ptr_Ibuf, FFO_ACTION1, i_count, (char *)c_action, 0 );
		i_ferr[5] = Ferror32;
		i_err[6]  = Fget32( ptr_Ibuf, FFO_UNDRLYNG, 0, (char *)c_undrlyng, 0 );
 		i_ferr[6] = Ferror32;
		i_err[7]  = Fget32( ptr_Ibuf, FFO_STRIKE_PRC, i_count, (char *)&d_strike, 0 );
		i_ferr[7] = Ferror32;
		i_err[8]  = Fget32( ptr_Ibuf, FFO_CURR_RT, i_count, (char *)&l_current_rt, 0 );
		i_ferr[8] = Ferror32;
		i_err[9] = Fget32( ptr_Ibuf, FFO_EBA_MTCH_ACT_NO, 0, (char *)c_mtch_accnt, 0 );
    i_ferr[9]= Ferror32;
		i_err[10] = Fget32( ptr_Ibuf, FFO_OPT_TYP, i_count, (char *)&c_opt_typ, 0 );
		i_ferr[10]= Ferror32;

		for( i_loop=0; i_loop <= 10; i_loop++ )
  	{
    	if( i_err[i_loop] == -1 )
    	{
      		fn_userlog( c_ServiceName, "i_loop :%ld:", i_loop );
      		fn_errlog( c_ServiceName, "S31005", Fstrerror32( i_ferr[i_loop] ), c_err_msg );
      		Fadd32( ptr_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      		tpreturn( TPFAIL, ERR_BFR, (char *)ptr_Ibuf, 0, 0 );
    	}
  	}
		
		if(DEBUG_MSG_LVL_5)
  	{
    	fn_userlog( c_ServiceName, "User Id :%s:"         , c_user_id );
    	fn_userlog( c_ServiceName, "Session Id :%ld:"     , l_sssn_id );
    	fn_userlog( c_ServiceName, "Expiry in :%s: month" , c_exp_dt );
    	fn_userlog( c_ServiceName, "Product type is :%c:" , c_prd_typ );
			fn_userlog( c_ServiceName, "Option type is :%c:"  , c_opt_typ );
    	fn_userlog( c_ServiceName, "Category ind/stk :%c:", c_indstk );
    	fn_userlog( c_ServiceName, "Action is :%s:"       , c_action );
    	fn_userlog( c_ServiceName, "Underlying is :%s:"   , c_undrlyng );
    	fn_userlog( c_ServiceName, "Strike price is :%lf:", d_strike );
    	fn_userlog( c_ServiceName, "Current rate is :%lf:", l_current_rt );
  	}

		for( i_loop = 0; i_loop < 3; i_loop++ )
		{
			MEMSET(c_expry_dt[i_loop]);
		}
		MEMSET(c_expiry_dt);

		/*** Commented in Ver 1.2  ***

	 	EXEC SQL
       	 SELECT  fcm_expry_dt
       	 INTO   :c_expry_dt
       	 FROM    (
                	SELECT distinct(fcm_expry_dt)
                	FROM   fcm_fo_cntrct_mstr
									where FCM_XCHNG_CD='NFO'          ** Ver 1.1 **
									AND FCM_UNDRLYNG='NIFTY'
									ORDER BY fcm_expry_dt
               	 )
       	 WHERE ROWNUM < 4;

		*** Ver 1.2 comment Ends ***/

		/*** Ver 1.2 Starts ***/

		EXEC SQL
         SELECT  ftq_expry_dt
         INTO   :c_expry_dt
         FROM    (
                  SELECT distinct(ftq_expry_dt)
                  FROM   ftq_fo_trd_qt
                  where FTQ_XCHNG_CD='NFO'       
                  AND FTQ_UNDRLYNG='NIFTY'
									AND	FTQ_PRDCT_TYP = 'F'   /*** ver 1.3 ***/
                  ORDER BY ftq_expry_dt
                 )
         WHERE ROWNUM < 4;

		/*** Ver 1.2 Ends ***/

  	 no_of_records = sqlca.sqlerrd[2];

		 if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
		 {
			 fn_userlog( c_ServiceName,"Cannot get expiry dates for payoff summary" );
			 fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg  );
       Fadd32( ptr_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_Ibuf, 0, 0 );
		 }
		 if( SQLCODE == NO_DATA_FOUND )
		 {
			 fn_userlog( c_ServiceName," No data found for expiry dates in payoff summary" );
			 fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg  );
			 Fadd32( ptr_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_Ibuf, 0, 0 );
		 }

  	 if( strcmp(c_exp_dt,"NEAR") == 0 )
  	 strcpy(c_expiry_dt,c_expry_dt[0]);
  	 if(strcmp(c_exp_dt,"MID") == 0 )
  	 strcpy(c_expiry_dt,c_expry_dt[1]);
  	 if(strcmp(c_exp_dt,"FAR") == 0 )
  	 strcpy(c_expiry_dt,c_expry_dt[2]);

		 if( DEBUG_MSG_LVL_5 )
		 {
			fn_userlog( c_ServiceName,"Expiry date is :%s:",c_expiry_dt );
		 }

	}
	
  strcpy( st_usr_prfl.c_user_id,c_user_id );
  st_usr_prfl.l_session_id = l_sssn_id;
  strcpy( st_usr_prfl.c_cln_mtch_accnt,c_mtch_accnt);

  i_chk_val = fn_chk_sssn( c_ServiceName, &st_usr_prfl, &st_err_msg ) ;
  if( i_chk_val ==  -1 )
  {
    fn_errlog( c_ServiceName, "S31020", LIBMSG, st_err_msg.c_err_msg );
    Fadd32( ptr_Ibuf,FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    tpreturn(TPFAIL,ERR_BFR, (char *)ptr_Ibuf, 0, 0);
  }

	/*** Commented in Ver 1.2  ***

	EXEC SQL
			 SELECT fcm_strk_prc
			 INTO   :l_strike1_intr
			 FROM   (
        			SELECT fcm_strk_prc
        			FROM   fcm_fo_cntrct_mstr
        			WHERE  fcm_xchng_cd = 'NFO'
        			AND    fcm_prdct_typ = 'O'
        			AND    fcm_indstk    = :c_indstk
        			AND    fcm_undrlyng  = :c_undrlyng
        			AND    fcm_expry_dt  = to_date(:c_expiry_dt,'dd-Mon-YYYY')
        			AND    fcm_opt_typ   = :c_opt_typ
        			AND    fcm_strk_prc  < :l_strike1
        			ORDER BY fcm_strk_prc DESC
							)
       				WHERE ROWNUM < 2;
	
	*** Ver 1.2 comment Ends ***/

	/*** Ver 1.2 Starts ***/

	EXEC SQL
       SELECT ftq_strk_prc
       INTO   :l_strike1_intr
       FROM   (
              SELECT ftq_strk_prc
              FROM   ftq_fo_trd_qt
              WHERE  ftq_xchng_cd = 'NFO'
              AND    ftq_prdct_typ = 'O'
              AND    ftq_indstk    = :c_indstk
              AND    ftq_undrlyng  = :c_undrlyng
              AND    ftq_expry_dt  = to_date(:c_expiry_dt,'dd-Mon-YYYY')
              AND    ftq_opt_typ   = :c_opt_typ
              AND    ftq_strk_prc  < :l_strike1
              ORDER BY ftq_strk_prc DESC
              )
              WHERE ROWNUM < 2;

	/*** Ver 1.2 Ends ***/

	if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
  {
    fn_userlog( c_ServiceName,"Cannot get expiry dates for payoff summary" );
    fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg  );
    Fadd32( ptr_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_Ibuf, 0, 0 );
  }
	
	if(DEBUG_MSG_LVL_0)
	{	
		fn_userlog( c_ServiceName," l_strike1_intr :%ld:"    , l_strike1_intr); /*** Added in Ver 1.2 ***/
	}

	if( SQLCODE == NO_DATA_FOUND )
  {

	 if( DEBUG_MSG_LVL_5 )
	 {
		fn_userlog( c_ServiceName,"Inside no data found" );
	 }

	/*** Commented in Ver 1.2  ***

	 EXEC SQL
			  SELECT fcm_strk_prc
        INTO   :l_strike1_intr
        FROM   (
                 SELECT fcm_strk_prc
                 FROM   fcm_fo_cntrct_mstr
                 WHERE  fcm_xchng_cd = 'NFO'
                 AND    fcm_prdct_typ = 'O'
                 AND    fcm_indstk    = :c_indstk
                 AND    fcm_undrlyng  = :c_undrlyng
                 AND    fcm_expry_dt  = to_date(:c_expiry_dt,'dd-Mon-YYYY')
                 AND    fcm_opt_typ   = :c_opt_typ
                 AND    fcm_strk_prc  > :l_strike1
                 ORDER BY fcm_strk_prc 
               )
              WHERE ROWNUM < 2;

	*** Ver 1.2 comment Ends ***/

	/*** Ver 1.2 Starts ***/

	   EXEC SQL
        SELECT ftq_strk_prc
        INTO   :l_strike1_intr
        FROM   (
                 SELECT ftq_strk_prc
                 FROM   ftq_fo_trd_qt
                 WHERE  ftq_xchng_cd = 'NFO'
                 AND    ftq_prdct_typ = 'O'
                 AND    ftq_indstk    = :c_indstk
                 AND    ftq_undrlyng  = :c_undrlyng
                 AND    ftq_expry_dt  = to_date(:c_expiry_dt,'dd-Mon-YYYY')
                 AND    ftq_opt_typ   = :c_opt_typ
                 AND    ftq_strk_prc  > :l_strike1
                 ORDER BY ftq_strk_prc
               )
              WHERE ROWNUM < 2;

	/*** Ver 1.2 Ends ***/

			  if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
  			{
    			fn_userlog( c_ServiceName,"Could not get interval for payoff summary" );
    			fn_errlog( c_ServiceName, "S31030", SQLMSG, c_err_msg  );
    			Fadd32( ptr_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_Ibuf, 0, 0 );
  			}
			  if( SQLCODE == NO_DATA_FOUND )
				{
					fn_userlog( c_ServiceName,"Could not get interval for payoff summary" );
          fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg  );
          Fadd32( ptr_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_Ibuf, 0, 0 );
				}
	
	if(DEBUG_MSG_LVL_0)
	{
  	fn_userlog( c_ServiceName," Inside No Data found l_strike1_intr is :%ld:", l_strike1_intr); /** Ver 1.2 **/	
	}

	/*** Commented in Ver 1.2  ***

				EXEC SQL
       	 		 SELECT fcm_strk_prc
         		 INTO   :l_strike2_intr
         		 FROM   (
            					 SELECT fcm_strk_prc
            					 FROM   fcm_fo_cntrct_mstr
            					 WHERE  fcm_xchng_cd = 'NFO'
            					 AND    fcm_prdct_typ = 'O'
            					 AND    fcm_indstk    = :c_indstk
            					 AND    fcm_undrlyng  = :c_undrlyng
            					 AND    fcm_expry_dt  = to_date(:c_expiry_dt,'dd-Mon-YYYY')
            					 AND    fcm_opt_typ   = :c_opt_typ
           			  		 AND    fcm_strk_prc  > :l_strike1_intr
            		  		 ORDER BY fcm_strk_prc 
					      		 )
          	  WHERE ROWNUM < 2;
	
	*** Ver 1.2 comment Ends ***/

	/*** Ver 1.2 Starts ***/

				EXEC SQL
             SELECT ftq_strk_prc
             INTO   :l_strike2_intr
             FROM   (
                       SELECT ftq_strk_prc
                       FROM   ftq_fo_trd_qt
                       WHERE  ftq_xchng_cd = 'NFO'
                       AND    ftq_prdct_typ = 'O'
                       AND    ftq_indstk    = :c_indstk
                       AND    ftq_undrlyng  = :c_undrlyng
                       AND    ftq_expry_dt  = to_date(:c_expiry_dt,'dd-Mon-YYYY')
                       AND    ftq_opt_typ   = :c_opt_typ
                       AND    ftq_strk_prc  > :l_strike1_intr
                       ORDER BY ftq_strk_prc
                     )
              WHERE ROWNUM < 2;
	
	/*** Ver 1.2 Ends ***/

		    if( SQLCODE != 0 )
				{
					fn_userlog( c_ServiceName,"Could not get interval for payoff summary" );
          fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg  );
          Fadd32( ptr_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_Ibuf, 0, 0 );

				}

	if(DEBUG_MSG_LVL_0)
	{
  	fn_userlog( c_ServiceName," Inside No Data found l_strike2_intr is :%ld:", l_strike2_intr); /** Ver 2.1 **/	
	}

	}

	if( l_strike2_intr == 0 )
	{

		if( DEBUG_MSG_LVL_5 )
		{
			fn_userlog( c_ServiceName,"Strike here is :%ld:",l_strike1 );
		}

	/*** Commented in Ver 1.2  ***

		EXEC SQL
         SELECT fcm_strk_prc
         INTO   :l_strike2_intr
         FROM   (
                  SELECT fcm_strk_prc
                  FROM   fcm_fo_cntrct_mstr
                  WHERE  fcm_xchng_cd = 'NFO'
                  AND    fcm_prdct_typ = 'O'
                  AND    fcm_indstk    = :c_indstk
                  AND    fcm_undrlyng  = :c_undrlyng
                  AND    fcm_expry_dt  = to_date(:c_expiry_dt,'dd-Mon-YYYY')
                  AND    fcm_opt_typ   = :c_opt_typ
                  AND    fcm_strk_prc  >= :l_strike1
                  ORDER BY fcm_strk_prc
                )
                WHERE ROWNUM < 2;
	
	*** Ver 1.2 comment Ends ***/

	/*** Ver 1.2 Starts ***/

  	EXEC SQL
         SELECT ftq_strk_prc
         INTO   :l_strike2_intr
         FROM   (
                  SELECT ftq_strk_prc
                  FROM   ftq_fo_trd_qt
                  WHERE  ftq_xchng_cd = 'NFO'
                  AND    ftq_prdct_typ = 'O'
                  AND    ftq_indstk    = :c_indstk
                  AND    ftq_undrlyng  = :c_undrlyng
                  AND    ftq_expry_dt  = to_date(:c_expiry_dt,'dd-Mon-YYYY')
                  AND    ftq_opt_typ   = :c_opt_typ
                  AND    ftq_strk_prc  >= :l_strike1
                  ORDER BY ftq_strk_prc
                )
                WHERE ROWNUM < 2;	

	/*** Ver 1.2 Ends ***/

	  if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
	  {
  	  fn_userlog( c_ServiceName," Could not get interval value in payoff summary" );
      fn_errlog( c_ServiceName, "S31045", SQLMSG, c_err_msg  );
   	  Fadd32( ptr_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
   	  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_Ibuf, 0, 0 );
	  }
	  if( SQLCODE == NO_DATA_FOUND )
  	{
	    fn_userlog( c_ServiceName," No data found for generating interval in payoff analyzer" );
      fn_errlog( c_ServiceName, "S31050", SQLMSG, c_err_msg  );
      Fadd32( ptr_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_Ibuf, 0, 0 );
	  }

	if(DEBUG_MSG_LVL_0)
	{
  fn_userlog( c_ServiceName," Inside (l_strike2_intr == 0) Condition l_strike2_intr is :%ld:", l_strike2_intr); /** Ver 2.1 **/
	}

	}

	l_interval =abs(l_strike2_intr - l_strike1_intr);

	if(DEBUG_MSG_LVL_5)
	{
		fn_userlog( c_ServiceName,"FIRST STRIKE IS :%ld:", l_strike1_intr );
		fn_userlog( c_ServiceName,"SECOND STRIKE IS :%ld:", l_strike2_intr );
		fn_userlog( c_ServiceName,"Interval is :%ld:",l_interval );
	}

	/* Initializing output buffer */

  ptr_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*10 );

  if ( ptr_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31055", TPMSG, c_err_msg  );
    Fadd32( ptr_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_Ibuf, 0, 0 );
  }

	i_err[0] = Fadd32 ( ptr_Obuf, FFO_INTERVAL, ( char *)&l_interval, 0 );

	tpreturn( TPSUCCESS, 0, (char *)ptr_Obuf, 0, 0 );

}
