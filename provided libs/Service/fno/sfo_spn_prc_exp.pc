/********************************************************************************************************/
/*  Program             : SFO_SPN_PRC_EXP                                                               */  
/*                                                                                                      */
/*                                                                                                      */
/*   Description       : To get the records for running the End-of-day Batch                            */
/*                       Expiry Process and pass it on to the Calling batch                             */
/*                       Program for SPAN Customer.                                                     */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*  Log                 : 1.0     18-jul-2011    																												*/
/*                   		: 1.3     06-jul-2012    																												*/
/*                      : 1.4     27-Feb-2013                                                           */
/*                   		: 1.5     29-Nov-2012    																												*/
/*                      : 1.6     22-May-2013                                                           */
/*                      : 1.7     08-May-2013                                                           */
/*                      : 1.8     18-Jun-2013                                                           */
/*                      : 1.9			23-Sep-2013                                                           */
/*						          : 2.0	   28-Oct-2015															                              */
/*                      : 2.1     11-Oct-2018                                                           */ 
/*                      : 2.2     16-Oct-2019                                                           */ 
/*                      : 2.3     16-Oct-2020                                                           */ 
/*                      : 2.4     16-Oct-2020                                                           */ 
/*                      : 2.5     18-jUN-2022                                                           */ 
/*                      : 2.6     14-Jul-2022                                                           */ 
/********************************************************************************************************/
/*                                                                                                      */
/*  1.0   -   New Release                                                                               */
/*  1.1   -   NVL in FTQ fetch, Balance Amt initialization and MEMSET  29-Mar-2012  (Navina D.)         */
/*        -   Bug Fix For Decimal Strike Prices                                                         */ 
/*  1.2   -   Exchange Code Handling  - 02-Apr-2012 (Navina D.)                                         */
/*  1.3   -   PNL Component commented for avoid obligation missmatch - Mahesh Shinde                    */
/*  1.4   -   Game BackOffice Automation  - Mahesh Shinde																								*/
/*  1.5   -   FNO BSE CHANGES                                        - Sandip Tambe                     */
/*  1.6   -   SLTP F+ handling (Navina D.)                                                              */
/*  1.7   -   Balance amount bug fix (Navina D.)                                                        */
/*  1.8   -   SPAN Output String handling changes - Sandip Tambe.                                       */
/*  1.9   -   OptionPlus handling	(Shailesh Sabale)													                            */
/*  2.0   -   tpreturn handling changed (Aakash C.)							                                        */
/*  2.1   -   Stream No. Handling Changes - Anand D.                                                    */
/*  2.2   -   Input string size change CR-ISEC14-128972 ( Tanmay )                                      */
/*  2.3   -   Oplus margin changes  ( Suchita )                                                         */
/*  2.4   -   Trigger Price changes  ( Suchita )                                                        */
/*  2.5   -   CR-ISEC14-170192 Otions premium for Fresh Option buy                                      */ 
/*  2.6   -   SPAN_BOD_MRGN_CR-ISEC14-172812     (Sachin Birje)                                         */ 
/********************************************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fn_pos.h>
#include <eba_to_ors.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fn_val_ord.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>
#include <fn_span_lib.h>
#include <math.h>

int fn_upd_spn_pos (char *c_ServiceName,
										struct st_pstn_actn *ptr_st_pstn_actn,
										struct st_fus_undrlyng_pstn *ptr_st_undpstn_crrnt,
									  struct st_fus_undrlyng_pstn *ptr_st_undpstn_tobe,
									  char *c_err_msg);

int fn_prcs_exp ( char *c_ServiceName, 
									struct st_pstn_actn *ptr_st_pstn_actn, 
									char *c_err_msg); 

struct st_fus_undrlyng_pstn st_undpstn_crrnt;
struct st_fus_undrlyng_pstn st_undpstn_tobe;
struct st_fcp_cntrct_pstn st_cntrct_pstn;
struct st_xchngbook st_i_xchngbk;
struct st_xchngbook st_o_xchngbk;
struct st_orderbook st_i_ordbk;
struct st_orderbook st_o_ordbk;
struct st_err_msg *ptr_st_err_msg;

char c_msg [ 256 ];
char c_tag [ 256 ];

void SFO_SPN_PRC_EXP( TPSVCINFO *rqst )
{

	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Sbuf;
	FBFR32 *ptr_fml_Rbuf;

	int i_returncode;
	int i_trnsctn;
	int i_err[6];
  int i_ferr[6];
  int i_ip_len;
  int i_op_len;         
  int i_ch_val;   
	int i_xchngbk[11];
  int i_xchngbkerr[11];  
	int j;  
	int i; 

  long l_mdfctn_cntr = 0;
	long l_recvbuf 		 = 0;
  char c_prdct_typ;
	char c_rec_no[ 256];
  char c_ordr_stts;   
  char c_plcd_stts; 
  char c_ordr_rfrnc[19]; 
  char c_svc_name[18]; 
	char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
	char c_pipe_id[3];

	/*** Ver 1.6 starts here ***/
	char c_ordr_flw = '\0';
	char c_narration_id[4];

	double d_fmm_sltp_prcnt = 0.0;	
	double d_frsh_exe_val = 0.0;	
	double d_amt_to_be_blckd = 0.0;		
	double d_lss_amt_to_be_blckd = 0.0; 
	double d_wgt_avrg_price = 0.0;
	double d_diff_amt= 0.0;
	double d_diff_loss= 0.0;
	double  d_balance_amt = 0.0;
	double	d_frm_diffrnc_mrgn = 0.0;			/*** Ver 1.9 ***/
	long	li_tot_exec_qty = 0;
	long int li_lmt_rt = 0;
	long	l_open_qty = 0;	
	long	l_frsh_xtd_qty = 0;	
	/*** Ver 1.6 ends here ***/

  varchar c_systm[LEN_DATE];
  varchar c_sysdt[LEN_DATE];
	  
  struct st_pstn_actn st_pstn_action;

  /*** Ver 1.4 ****/
  char c_program_nm[33];
  char c_xchng_cd_tmp[4];
  char c_match_id[11];
  char c_error_txt[256];

  MEMSET(c_program_nm);
  MEMSET(c_xchng_cd_tmp);
  MEMSET(c_match_id);
  MEMSET(c_error_txt);
  /*** Ver 1.4 ends ***/

  char c_ref_rmrks[133] = "\0"; /*** Ver 2.3 ***/
  char  c_tmp_rmrks [ 133 ] = "\0";  /*** Ver 2.3 ***/

  long l_fsh_ord_lmt_rt = 0; /*** Ver 2.3 ***/
  double d_comp1_mrgn = 0.0;  /*** Ver 2.3 ***/
  double d_comp1_pl = 0.0;    /*** Ver 2.3 ***/
  double d_xchng_amt = 0.0;   /*** Ver 2.3 ***/
  double d_prem_amt = 0.0;    /*** Ver 2.3 ***/
  double d_spn_mrgn = 0.0;    /*** Ver 2.3 ***/
  double d_expr_mrgn = 0.0;   /*** Ver 2.3 ***/
  char  c_fresh_ref[19]="\0";        /*** Ver 2.3 ***/
	
  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, "SFO_SPN_PRC_EXP" );
 
  strcpy(c_program_nm,"bat_fo_exp");  /*** Ver 1.4 ***/
 
	INITDBGLVL(c_ServiceName);       
	ptr_fml_Sbuf  = ( FBFR32 *)NULL;
  ptr_fml_Rbuf  = ( FBFR32 *)NULL;
	ptr_fml_Sbuf  = ( FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);
	ptr_fml_Rbuf  = ( FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

	i_xchngbk     [ 0 ] = Fget32( ptr_fml_Ibuf ,FFO_XCHNG_CD,0,(char *) st_i_ordbk.c_xchng_cd,0);
  i_xchngbkerr  [ 0 ] = Ferror32;
  i_xchngbk     [ 1 ] = Fget32( ptr_fml_Ibuf ,FFO_PIPE_ID,0,(char *) st_i_ordbk.c_pipe_id,0);
  i_xchngbkerr  [ 1 ] = Ferror32;
	i_xchngbk     [ 2 ] = Fget32( ptr_fml_Ibuf ,FFO_PRDCT_TYP,0,(char *)&st_i_ordbk.c_prd_typ,0);
  i_xchngbkerr  [ 2 ] = Ferror32;
  i_xchngbk     [ 3 ] = Fget32( ptr_fml_Ibuf ,FFO_ORDR_RFRNC,0,(char *) st_i_ordbk.c_ordr_rfrnc,0);
  i_xchngbkerr  [ 3 ] = Ferror32;
	i_xchngbk     [ 4 ] = Fget32( ptr_fml_Ibuf ,FFO_MDFCTN_CNTR,0,(char *) &st_i_ordbk.l_mdfctn_cntr,0);
  i_xchngbkerr  [ 4 ] = Ferror32;
  i_xchngbk     [ 5 ] = Fget32( ptr_fml_Ibuf ,FFO_ORD_TOT_QTY,0,(char *) &st_i_ordbk.l_ord_tot_qty,0);
  i_xchngbkerr  [ 5 ] = Ferror32;
	i_xchngbk     [ 6 ] = Fget32( ptr_fml_Ibuf ,FFO_LMT_RT,0,(char *) &st_i_ordbk.l_ord_lmt_rt,0);
  i_xchngbkerr  [ 6 ] = Ferror32;
  i_xchngbk     [ 7 ] = Fget32( ptr_fml_Ibuf ,FFO_BAT_TAG,0,(char *) c_tag,0);
  i_xchngbkerr  [ 7 ] = Ferror32;
	i_xchngbk     [ 8 ] = Fget32( ptr_fml_Ibuf ,FFO_REC_NO,0,(char *) c_rec_no,0);
  i_xchngbkerr  [ 8 ] = Ferror32;
  i_xchngbk     [ 9 ] = Fget32( ptr_fml_Ibuf ,FFO_EBA_MTCH_ACT_NO,0,(char *) st_i_ordbk.c_cln_mtch_accnt,0);
  i_xchngbkerr  [ 9 ] = Ferror32;
	i_xchngbk     [ 10 ] = Fget32( ptr_fml_Ibuf ,FFO_ORDR_STTS,0,(char *)  &st_i_ordbk.c_ordr_stts,0);
  i_xchngbkerr  [ 10 ] = Ferror32;

	for ( j=0 ; j < 11  ; j++ )
  {
    if ( i_xchngbk [ j ] == -1 && i_xchngbkerr [ j ] !=  FNOTPRES )
    {
      fn_userlog( c_ServiceName, "Error in :%d:",j );
      fn_errlog ( c_ServiceName, "S31005", Fstrerror32( i_xchngbkerr[j] ),c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

  strcpy(c_xchng_cd_tmp,st_i_ordbk.c_xchng_cd);
  strcpy(c_match_id,st_i_ordbk.c_cln_mtch_accnt);

	MEMSET(c_sysdt);
	MEMSET(c_systm);	
	EXEC SQL
    SELECT to_char( sysdate, 'DD-Mon-YYYY hh24:mi:ss' ),
           to_char( sysdate, 'DD-Mon-YYYY' )
    INTO   :c_systm,
           :c_sysdt
    FROM   dual;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31010",SQLMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Ver 2.1 Starts ***/

  /*** begin transaction commented below and placed here ***/
  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    strcpy(c_error_txt,"System error. Contact System Support");  
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg); 
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );  
  }

   EXEC SQL
     SELECT FOD_ORDR_RFRNC
       INTO :st_i_ordbk.c_ordr_rfrnc  
       FROM FOD_FO_ORDR_DTLS
      WHERE FOD_ORDR_RFRNC = :st_i_ordbk.c_ordr_rfrnc
        FOR UPDATE OF FOD_ORDR_RFRNC;

   if (SQLCODE != 0)
   {
    fn_errlog( c_ServiceName, "S31015",SQLMSG,c_err_msg);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy(c_error_txt,"System error. Contact System Support");
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

   /*** Ver 2.1 Ends ***/
	
  st_i_ordbk.c_oprn_typ = FOR_VIEW;

	if ( DEBUG_MSG_LVL_0 )
	{
		fn_userlog( c_ServiceName, "c_systm      |%s| ",c_systm.arr);
		fn_userlog( c_ServiceName, "c_sysdt      |%s| ",c_sysdt.arr);
		fn_userlog( c_ServiceName, " ******************* Before span ref to ord *************************");
		fn_userlog( c_ServiceName, "st_i_ordbk.c_xchng_cd      |%s| ",st_i_ordbk.c_xchng_cd);
		fn_userlog( c_ServiceName, "st_i_ordbk.c_prd_typ       |%c| ",st_i_ordbk.c_prd_typ);	
		fn_userlog( c_ServiceName, "st_i_ordbk.c_ordr_rfrnc    |%s| ", st_i_ordbk.c_ordr_rfrnc);	
		fn_userlog( c_ServiceName, "st_i_ordbk.l_mdfctn_cntr   |%d| ",st_i_ordbk.l_mdfctn_cntr);	
		fn_userlog( c_ServiceName, "st_i_ordbk.c_cln_mtch_accnt|%s| ",st_i_ordbk.c_cln_mtch_accnt);	
		fn_userlog( c_ServiceName, "st_i_ordbk.c_ordr_stts     |%c| ",st_i_ordbk.c_ordr_stts);	
  }

	i_returncode = fn_spnref_to_ord ( &st_i_ordbk,
                                    &st_o_ordbk,
                                    c_ServiceName,
                                    c_err_msg
                                  );

  if ( i_returncode != SUCC_BFR )
  {
     fn_errlog( c_ServiceName, "S31020",LIBMSG,c_err_msg);
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/ 
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	strcpy(st_o_ordbk.c_ordr_rfrnc,st_i_ordbk.c_ordr_rfrnc);
	rtrim(st_o_ordbk.c_valid_dt);
	rtrim(st_o_ordbk.c_trd_dt);
	rtrim(st_o_ordbk.c_ack_tm);
	rtrim(st_o_ordbk.c_prev_ack_tm);
	
	if ( DEBUG_MSG_LVL_3 )
	{
		fn_userlog( c_ServiceName, " ******************** After span ref to ord ***************************");
		fn_userlog( c_ServiceName, "st_o_ordbk.c_xchng_cd		    |%s| ",st_o_ordbk.c_xchng_cd);
		fn_userlog( c_ServiceName, "st_o_ordbk.c_prd_typ			  |%c| ",st_o_ordbk.c_prd_typ);	
		fn_userlog( c_ServiceName, "st_o_ordbk.c_ordr_rfrnc			|%s| ", st_o_ordbk.c_ordr_rfrnc);	
		fn_userlog( c_ServiceName, "st_o_ordbk.c_cln_mtch_accnt	|%s| ",st_o_ordbk.c_cln_mtch_accnt);	
		fn_userlog( c_ServiceName, "st_o_ordbk.c_ordr_stts			|%c| ",st_o_ordbk.c_ordr_stts);	
		fn_userlog( c_ServiceName, "st_o_ordbk.c_expry_dt	  		|%s| ",st_o_ordbk.c_expry_dt);
		fn_userlog( c_ServiceName, "st_o_ordbk.c_exrc_typ		   	|%c| ",st_o_ordbk.c_exrc_typ);
		fn_userlog( c_ServiceName, "st_o_ordbk.c_opt_typ		  	|%c| ",st_o_ordbk.c_opt_typ);
		fn_userlog( c_ServiceName, " SLTP ordr Ref Is   :%s:   ", st_o_ordbk.c_sltp_ord_rfrnc);			/*** Ver 1.6 ***/
		fn_userlog( c_ServiceName, " Margin blocked Is  :%lf:  ", st_o_ordbk.d_amt_blkd);						/*** Ver 1.6 ***/
		fn_userlog( c_ServiceName, " Loss blocked Is    :%lf:  ", st_o_ordbk.d_lss_amt_blkd);				/*** Ver 1.6 ***/
		fn_userlog( c_ServiceName, " Fresh Cover flg Is :%c:   ", st_o_ordbk.c_fc_flg);							/*** Ver 1.6 ***/
		fn_userlog( c_ServiceName, " Diff margin blck   :%lf:  ", st_o_ordbk.d_diff_amt_blkd);				/*** Ver 1.6 ***/
		fn_userlog( c_ServiceName, " Diff loss blck     :%lf:  ", st_o_ordbk.d_diff_lss_amt_blkd);		/*** Ver 1.6 ***/
		fn_userlog( c_ServiceName, " Stop loss triggr price :%ld: ", st_o_ordbk.l_stp_lss_tgr);    /*
** Ver 1.9 ***/
	}

	strcpy (st_i_xchngbk.c_ordr_rfrnc , st_i_ordbk.c_ordr_rfrnc );
	st_i_xchngbk.l_mdfctn_cntr = st_o_ordbk.l_mdfctn_cntr;
	st_i_xchngbk.c_oprn_typ = WITH_ORS_MSG_TYP;
	
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, " ********************* Before span ref to omd **************************");
		fn_userlog( c_ServiceName, " st_i_xchngbk.c_ordr_rfrnc     |%s|", st_i_xchngbk.c_ordr_rfrnc );
		fn_userlog( c_ServiceName, " st_i_xchngbk.l_mdfctn_cntr    |%d|", st_i_xchngbk.l_mdfctn_cntr);
	}

	i_returncode  = fn_spnref_to_omd  ( &st_i_xchngbk,
                                      &st_o_xchngbk,
                                      c_ServiceName,
                                      c_err_msg
                                    );

  if ( i_returncode != SUCC_BFR )
  {
    fn_errlog( c_ServiceName, "S31025",LIBMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );    
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	rtrim(st_o_xchngbk.c_mod_trd_dt);
	rtrim(st_o_xchngbk.c_valid_dt);
	rtrim(st_o_xchngbk.c_qt_tm);
	rtrim(st_o_xchngbk.c_rqst_tm);
	rtrim(st_o_xchngbk.c_frwrd_tm);
	rtrim(st_o_xchngbk.c_ack_tm);
	strcpy(st_o_xchngbk.c_ordr_rfrnc,st_i_xchngbk.c_ordr_rfrnc);
	strcpy(c_pipe_id,st_i_ordbk.c_pipe_id);
	st_o_xchngbk.l_mdfctn_cntr = st_i_xchngbk.l_mdfctn_cntr;

	if ( DEBUG_MSG_LVL_3 )
	{
		fn_userlog( c_ServiceName, " ********************* After span ref to omd *******************************");
		fn_userlog( c_ServiceName, " st_o_xchngbk.c_ordr_rfrnc     |%s|", st_o_xchngbk.c_ordr_rfrnc );
		fn_userlog( c_ServiceName, " st_o_xchngbk.c_xchng_cd       |%s|",st_o_xchngbk.c_xchng_cd );
	}

	strcpy(st_o_xchngbk.c_rout_crt,000);

  /*** Commented in Ver 2.1 ***
	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

  if ( i_trnsctn == -1 )
  {
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    strcpy(c_error_txt,"System error. Contact System Support");  *** Ver 1.4 ***
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  *** Ver 1.4 ***
    ** tpreturn ( TPFAIL, ERR_BFR, ( char * )c_err_msg, 0, 0 ); ** ver 2.0 **
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );  ** Ver 2.0 **
  }
  ********************/
 
  if ( st_o_ordbk.c_ordr_stts == 'R' && st_o_xchngbk.c_plcd_stts == 'R' )
  {
		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog( c_ServiceName, "Inside Requested... " );
		}

   
	  st_o_xchngbk.c_plcd_stts = ACCEPT;
    st_o_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;
    st_o_xchngbk.l_ors_msg_typ = ORS_NEW_ORD_ACPT ;
    strcpy( st_o_xchngbk.c_ack_tm, (char *) c_systm.arr);
    strcpy( st_o_xchngbk.c_entry_dt_tm, (char *) c_systm.arr);
    st_o_xchngbk.l_dwnld_flg = NOT_DOWNLOAD;
    st_o_xchngbk.d_jiffy = 0;
    st_o_xchngbk.l_bit_flg  = 0;
    st_o_xchngbk.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;
	
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "Before update Exchange book ... " );
		}

		i_returncode = fn_spnupd_xchngbk (c_ServiceName,
                                      &st_o_xchngbk,
                                      c_err_msg
                                     );


    if (i_returncode  != 0 )
    {
      fn_errlog( c_ServiceName, "S31030",LIBMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/ 
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "After update Exchange book ... " );
			fn_userlog( c_ServiceName, "st_o_xchngbk.l_ors_msg_typ    |%ld|",st_o_xchngbk.l_ors_msg_typ );
		}

		fn_cpy_ddr ( st_o_xchngbk.c_rout_crt );

		i_err [0] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_o_xchngbk.c_rout_crt,0);
    i_ferr[0] = Ferror32;
    i_err [1] = Fadd32(ptr_fml_Sbuf,FFO_ORDR_RFRNC, (char *)st_o_xchngbk.c_ordr_rfrnc,0);
    i_ferr[1] = Ferror32;
    i_err [2] = Fadd32(ptr_fml_Sbuf,FFO_ORS_MSG_TYP, (char *)&st_o_xchngbk.l_ors_msg_typ,0);
    i_ferr[2] = Ferror32;
    i_err [3] = Fadd32(ptr_fml_Sbuf,FFO_MDFCTN_CNTR, (char *)&st_o_xchngbk.l_mdfctn_cntr,0);
    i_ferr[3] = Ferror32;
    i_err [4] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM, (char *)st_o_xchngbk.c_ack_tm,0);
    i_ferr[4] = Ferror32;
    i_err [5] = Fadd32(ptr_fml_Sbuf,FFO_PREV_ACK_TM, (char *)st_o_xchngbk.c_entry_dt_tm,0);
    i_ferr[5] = Ferror32;

    for (i = 0;i < 6 ;i++)  /* VER TOL : TUX on LINUX -- Chnaged iiteration bound to 6 from 7 (Ravindra) */
    {
      if(i_err[i] == -1 )
      {
        fn_userlog( c_ServiceName, "Error in :%d:",i );
        fn_errlog( c_ServiceName, "S31035", Fstrerror32( i_ferr[i]),c_err_msg );
        tpfree((char *)ptr_fml_Sbuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    i_returncode = tpcall ( "SFO_PRCS_RSP",
													( char *)ptr_fml_Sbuf,
														0,
													( char **)&ptr_fml_Rbuf,
														&l_recvbuf,
														0 
													);

    if ( i_returncode != SUCC_BFR )
    {
      fn_errlog( c_ServiceName, "S31040",TPMSG,c_err_msg);
      Fget32(ptr_fml_Rbuf,FFO_ERR_MSG,0,(char*)c_err_msg,0);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      tpfree((char*)ptr_fml_Sbuf);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    tpfree((char*)ptr_fml_Sbuf);

	}

	else if(((st_o_ordbk.c_ordr_stts == ORDERED ) || ( st_o_ordbk.c_ordr_stts == PARTIALLY_EXECUTED )) &&
     			(st_o_xchngbk.c_plcd_stts == 'R')) 
  {

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog( c_ServiceName, "Inside ordered partially executed ... " );
    }

		st_o_xchngbk.c_plcd_stts = REJECT;
    st_o_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;

		if ( st_o_xchngbk.c_req_typ ==  'N' )
  	{
    	st_o_xchngbk.l_ors_msg_typ  = 5304;
  	}
  	else if ( st_o_xchngbk.c_req_typ == 'M' )
  	{
    	st_o_xchngbk.l_ors_msg_typ  = 5307;
  	}
  	else if ( st_o_xchngbk.c_req_typ == 'C')
  	{
    	st_o_xchngbk.l_ors_msg_typ  = 5310;
  	}
	
    strcpy( st_o_xchngbk.c_ack_tm, (char *) c_sysdt.arr);
    strcpy( st_o_xchngbk.c_xchng_rmrks, "..Reject");
    st_o_xchngbk.l_dwnld_flg = NOT_DOWNLOAD;
    st_o_xchngbk.d_jiffy = 0;
    st_o_xchngbk.l_bit_flg  = 0;
    st_o_xchngbk.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;
		
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "Before update Exchange book ... " );
		}

    i_returncode  = fn_spnupd_xchngbk ( c_ServiceName,
                                        &st_o_xchngbk,
                                        c_err_msg
                                      );


    if ( i_returncode != 0 )
    {
      fn_errlog( c_ServiceName, "S31045",LIBMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName, "After update Exchange book ... " );
		}

    fn_cpy_ddr ( st_o_xchngbk.c_rout_crt );

    i_err [0] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_o_xchngbk.c_rout_crt,0);
    i_ferr[0] = Ferror32;
    i_err [1] = Fadd32(ptr_fml_Sbuf,FFO_ORDR_RFRNC, (char *)st_o_xchngbk.c_ordr_rfrnc,0);
    i_ferr[1] = Ferror32;
    i_err [2] = Fadd32(ptr_fml_Sbuf,FFO_ORS_MSG_TYP, (char *)&st_o_xchngbk.l_ors_msg_typ,0);
    i_ferr[2] = Ferror32;
    i_err [3] = Fadd32(ptr_fml_Sbuf,FFO_MDFCTN_CNTR, (char *)&st_o_xchngbk.l_mdfctn_cntr,0);
    i_ferr[3] = Ferror32;
    i_err [4] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM, (char *)st_o_xchngbk.c_ack_tm,0);
    i_ferr[4] = Ferror32;
    i_err [5] = Fadd32(ptr_fml_Sbuf,FFO_PREV_ACK_TM, (char *)st_o_xchngbk.c_entry_dt_tm,0);
    i_ferr[5] = Ferror32;

    for (i = 0;i < 6 ;i++)  /* VER TOL : TUX on LINUX -- Chnaged iiteration bound to 6 from 7 (Ravindra) */
    {
      if(i_err[i] == -1)
      {
        fn_userlog( c_ServiceName, "Error in :%d:",i );
        fn_errlog( c_ServiceName, "S31050", Fstrerror32( i_ferr[i]),c_err_msg );
        tpfree((char *)ptr_fml_Sbuf);
			  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
        fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/
 	      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    i_returncode = tpcall ( "SFO_PRCS_RSP",
												  ( char * ) ptr_fml_Sbuf,
														0,
													( char ** ) &ptr_fml_Rbuf,
														&l_recvbuf,0 
													);

    if ( i_returncode != SUCC_BFR )
    {
      fn_errlog( c_ServiceName, "S31055",LIBMSG,c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
      fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/ 
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		
    tpfree( (char *)ptr_fml_Sbuf);

  }
	

	st_o_xchngbk.l_mdfctn_cntr  = st_o_xchngbk.l_mdfctn_cntr  + 1 ; 
 
	strcpy ( st_o_xchngbk.c_xchng_rmrks, "Expiry ");
  strcpy ( st_o_xchngbk.c_mod_trd_dt, (char *)c_sysdt.arr );
	strcpy ( st_o_xchngbk.c_ack_tm, (char *)c_systm.arr );
  
	st_o_xchngbk.l_ord_seq = 0;
  st_o_xchngbk.c_plcd_stts = 'X';
  st_o_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;
  st_o_xchngbk.l_ors_msg_typ = ORS_ORD_EXP;
  st_o_xchngbk.d_jiffy = 0;
  st_o_xchngbk.l_dwnld_flg = NOT_DOWNLOAD;
  st_o_xchngbk.c_oprn_typ = INSERTION_ON_ORDER_FTE;
	
	fn_cpy_ddr ( st_o_xchngbk.c_rout_crt );

	i_returncode  = fn_spnupd_xchngbk(c_ServiceName,
                                    &st_o_xchngbk,
                                    c_err_msg
                                   );
  if ( i_returncode != SUCC_BFR )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    /*** tpreturn(TPFAIL, ERR_BFR, (char *)c_err_msg, 0, 0 ); ** Ver 2.0 **/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );  /** Ver 2.0 **/
  }

 	strcpy ( st_pstn_action.c_cln_mtch_accnt,st_o_ordbk.c_cln_mtch_accnt );
 	strcpy ( st_pstn_action.c_xchng_cd, st_o_ordbk.c_xchng_cd );
 	strcpy ( st_pstn_action.c_undrlyng, st_o_ordbk.c_undrlyng );
  strcpy ( st_pstn_action.c_expry_dt, st_o_ordbk.c_expry_dt );
	strcpy ( st_pstn_action.c_rout_crt, st_o_xchngbk.c_rout_crt );

	st_pstn_action.c_prd_typ  = st_o_ordbk.c_prd_typ;
 	st_pstn_action.c_exrc_typ = st_o_ordbk.c_exrc_typ;
 	st_pstn_action.c_opt_typ  = st_o_ordbk.c_opt_typ;
 	st_pstn_action.l_strike_prc   = st_o_ordbk.l_strike_prc;
 	st_pstn_action.c_ctgry_indstk = st_o_ordbk.c_ctgry_indstk;
 	st_pstn_action.c_trnsctn_flw  = st_o_ordbk.c_ordr_flw;
 	st_pstn_action.l_orgnl_qty = st_o_ordbk.l_ord_tot_qty;
 	st_pstn_action.l_orgnl_rt  = st_o_ordbk.l_ord_lmt_rt;
 	st_pstn_action.l_exec_qty  = st_o_ordbk.l_exctd_qty;
 	st_pstn_action.l_exec_rt    = 0;
  st_pstn_action.l_fresh_qty  = 0;
 	st_pstn_action.l_cover_qty  = 0;
 	st_pstn_action.d_add_mrgn_amt  = 0;

  sprintf ( st_pstn_action.c_ref_rmrks, "%s-%ld", st_o_ordbk.c_ordr_rfrnc, st_o_ordbk.l_mdfctn_cntr + 1 );
  rtrim ( st_pstn_action.c_ref_rmrks );	
	st_pstn_action.l_actn_typ = ORS_ORD_EXP;
	
		
	if ( st_o_ordbk.c_prd_typ != 'U' && st_o_ordbk.c_prd_typ != 'I' )	/*** If condition added in Ver 1.6 ***/ /** Ver 1.9 Condition added for option plus **/ 
	{
		i_returncode  = fn_prcs_exp ( c_ServiceName,
																	&st_pstn_action,
																	c_err_msg
																);
		
		if ( i_returncode != SUCC_BFR )
		{
				fn_errlog( c_ServiceName, "S31060", LIBMSG, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				strcpy ( c_msg, "System error. Contact system support" );
				fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
				fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/
				tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
		}
	}
	switch ( st_o_xchngbk.l_ors_msg_typ )
	{
		 case ORS_ORD_EXP:

          if ( st_o_ordbk.l_exctd_qty == 0 )
          {
            st_o_ordbk.c_ordr_stts = EXPIRED;
          }
          else
          {
            st_o_ordbk.c_ordr_stts = PARTIALLY_EXECUTED_AND_EXPIRED;
          }

          strcpy( st_o_ordbk.c_trd_dt, st_o_xchngbk.c_mod_trd_dt);
          strcpy( st_o_ordbk.c_ack_tm , st_o_xchngbk.c_ack_tm);
          st_o_ordbk.l_can_qty = 0;
          st_o_ordbk.l_exprd_qty = st_o_ordbk.l_ord_tot_qty - st_o_ordbk.l_exctd_qty;
          st_o_ordbk.c_oprn_typ = UPDATE_XCHNG_RESP_DTLS;
          break;

     default:

          strcpy( ptr_st_err_msg->c_err_msg, "Invalid Operation Type" );
          fn_userlog ( c_ServiceName, "ERROR :%s:", ptr_st_err_msg->c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
          tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
          break;
  }

	i_returncode  = fn_spnupd_ordrbook(c_ServiceName,
                                     &st_o_ordbk,
                                     ptr_st_err_msg
                                     );
	if ( i_returncode != 0 )
  {
     fn_errlog( c_ServiceName, "S31065",LIBMSG,c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


	st_o_xchngbk.c_rms_prcsd_flg = 'P';
	st_o_xchngbk.c_oprn_typ = UPDATE_RMS_PRCSD_FLG;
		
	if (DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "LAST Before update Exchange book ... " );
	}

  i_returncode  = fn_spnupd_xchngbk(c_ServiceName,
									&st_o_xchngbk,
									c_err_msg
								   );
  if ( i_returncode != 0 )
  {
	 fn_errlog( c_ServiceName, "S31070",LIBMSG,c_err_msg);
	 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	 strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
	 fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/
	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if (DEBUG_MSG_LVL_3)
	{
  	fn_userlog( c_ServiceName, "LAST After update Exchange book ... " );
	}

	/*** Ver 1.6 starts ***/

	/*** if( (st_o_ordbk.c_prd_typ == 'U' && st_o_ordbk.c_fc_flg == 'F') || (st_o_ordbk.c_prd_typ == 'I' && st_o_ordbk.c_fc_flg == 'F') ) *Fresh SLTP Order* * Ver 1.9 Condition added for optionplus *  Ver 2.3 ***/

  if( ((st_o_ordbk.c_prd_typ == 'U' || st_o_ordbk.c_prd_typ == 'I') && (st_o_ordbk.c_fc_flg == 'F' || st_o_ordbk.c_fc_flg == 'C'))) /*** Ver 2.3 ***/
	{
		st_o_ordbk.d_amt_blkd = 0.0;
		st_o_ordbk.d_lss_amt_blkd = 0.0;
		c_ordr_stts = '\0';

		EXEC SQL	
			 SELECT			NVL(FOD_AMT_BLCKD,0),
									NVL(FOD_LSS_AMT_BLCKD,0),
									FOD_ORDR_STTS,
									FOD_ORDR_FLW,
                  NVL(FOD_LMT_RT,0), /** ver 2.3 ***/
								  FOD_ORDR_RFRNC     /*** Ver 2.3 ***/
			 INTO				:st_o_ordbk.d_amt_blkd,
									:st_o_ordbk.d_lss_amt_blkd,
									:c_ordr_stts,
									:c_ordr_flw,
                  :l_fsh_ord_lmt_rt, /** ver 2.3 ***/
									:c_fresh_ref       /*** Ver 2.3 ***/
			 FROM				FOD_FO_ORDR_DTLS
			 WHERE			/*** FOD_ORDR_RFRNC = :st_i_ordbk.c_ordr_rfrnc; *** Commented in Ver 2.3 ***/
									FOD_ORDR_RFRNC = DECODE(:st_o_ordbk.c_fc_flg,'F',:st_i_ordbk.c_ordr_rfrnc,:st_o_ordbk.c_sltp_ord_rfrnc); /*** Ver 2.3 ***/

		if(SQLCODE != 0)
		{
		 fn_errlog( c_ServiceName, "S31075",SQLMSG,c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     strcpy(c_error_txt,"System error. Contact System Support");
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Margin Amount of the fresh order :%lf:", st_o_ordbk.d_amt_blkd);
			fn_userlog(c_ServiceName,"Loss Amount of the fresh order :%lf:", st_o_ordbk.d_lss_amt_blkd);
		}

		/*Get the current margin percentage from the database */
		EXEC SQL
		 SELECT     FMM_SLTP_PRCNT
		 INTO       :d_fmm_sltp_prcnt
		 FROM       FMM_FO_MRGN_MSTR
		 WHERE      FMM_XCHNG_CD = :st_o_ordbk.c_xchng_cd
	/**	 AND        FMM_PRDCT_TYP = 'F'      Commented in version 1.9 **/  
		 AND        FMM_PRDCT_TYP =DECODE(:st_o_ordbk.c_prd_typ, 'U', 'F', 'O' ) /** Ver 1.9 Optionplus product handling **/ 
		 AND        FMM_UNDRLYNG = :st_o_ordbk.c_undrlyng
		 AND        FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
																		 FROM    FCB_FO_CLN_BSKT_ALLTD
																		 WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
																													 FROM    CLM_CLNT_MSTR
																													 WHERE   CLM_MTCH_ACCNT =:st_o_ordbk.c_cln_mtch_accnt));

		if(SQLCODE != 0)
		{
		 fn_errlog( c_ServiceName, "S31080",SQLMSG,c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     strcpy(c_error_txt,"System error. Contact System Support");
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		/** Getting the total executed value and quantity of FRESH order. **/
		 EXEC SQL
			SELECT  NVL(SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),0),
							NVL(SUM(FTD_EXCTD_QTY),0)
			INTO    :d_frsh_exe_val,
							:li_tot_exec_qty
			FROM    FTD_FO_TRD_DTLS
			WHERE   FTD_ORDR_RFRNC = :st_i_ordbk.c_ordr_rfrnc;

		if( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
		{
		 fn_errlog( c_ServiceName, "S31085",SQLMSG,c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     strcpy(c_error_txt,"System error. Contact System Support");
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		else if (SQLCODE == NO_DATA_FOUND)
		{
			d_frsh_exe_val = 0;
			li_tot_exec_qty = 0;
		}

		/** Calculating the Weight Average Price for the executed quantity of FRESH Order. **/
		d_wgt_avrg_price = 0;
	
		if (li_tot_exec_qty != 0 )
		{
			d_wgt_avrg_price = (double) (d_frsh_exe_val / li_tot_exec_qty);
		}

		li_lmt_rt = 0;

		EXEC SQL	
		 SELECT			NVL(FOD_LMT_RT,0)
		 INTO				:li_lmt_rt
		 FROM				FOD_FO_ORDR_DTLS
		 WHERE			/*** FOD_ORDR_RFRNC = :st_o_ordbk.c_sltp_ord_rfrnc;  ***Ver 2.3 ***/
								FOD_ORDR_RFRNC = DECODE(:st_o_ordbk.c_fc_flg,'F',:st_o_ordbk.c_sltp_ord_rfrnc,:st_i_ordbk.c_ordr_rfrnc); /*** Ver 2.3 ***/

		if(SQLCODE != 0)
		{
		 fn_errlog( c_ServiceName, "S31090",SQLMSG,c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     strcpy(c_error_txt,"System error. Contact System Support");
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		
		/* Calculate open quantity */
		EXEC SQL
			SELECT  NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FTD_EXCTD_QTY,
																											 FTD_EXCTD_QTY ) ), 0 ),
							NVL( SUM( DECODE( FOD_FC_FLAG, 'F', FTD_EXCTD_QTY, 0 ) ), 0 )
			INTO    :l_open_qty,
							:l_frsh_xtd_qty
			FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
			WHERE   FOD_CLM_MTCH_ACCNT    = :st_o_ordbk.c_cln_mtch_accnt
			AND     FOD_TRD_DT            = :st_o_ordbk.c_trd_dt
			AND     FOD_PRDCT_TYP         = :st_o_ordbk.c_prd_typ
			AND     FTD_ORDR_RFRNC        = FOD_ORDR_RFRNC
			AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :st_i_ordbk.c_ordr_rfrnc;

		if( SQLCODE != 0 )
		{
		 fn_errlog( c_ServiceName, "S31095",SQLMSG,c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     strcpy(c_error_txt,"System error. Contact System Support");
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}


    /**** ver 2.3 starts ****/

    if( st_o_ordbk.c_prd_typ == 'I' ) 
    {
    i_returncode =    fn_cal_mrgn_sltp_op
                      (
                        c_ServiceName,
                        c_fresh_ref, 
                        l_fsh_ord_lmt_rt,
                        li_lmt_rt,
                        &d_amt_to_be_blckd,
                        &d_lss_amt_to_be_blckd,
                        c_ref_rmrks, 
                        &d_comp1_mrgn,
                        &d_comp1_pl, 
                        &d_xchng_amt,
                        &d_prem_amt, 
                        &d_spn_mrgn,
                        &d_expr_mrgn, 
                        'E',
                         c_err_msg
                      );

    if ( i_returncode != 0 )
    {
     fn_errlog( c_ServiceName, "S31100",LIBMSG,c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     strcpy(c_error_txt,"System error. Contact System Support");
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
      d_lss_amt_to_be_blckd = d_lss_amt_to_be_blckd*(-1);
   }
   else 
   {
          i_returncode =    fn_cal_mrgn_sltp
                                        (
                                          c_ServiceName,
                                          c_fresh_ref, 
                                          l_fsh_ord_lmt_rt,
                                          li_lmt_rt,
                                          &d_amt_to_be_blckd,
                                          &d_lss_amt_to_be_blckd,
                                          c_ref_rmrks,  
                                          &d_comp1_mrgn,
                                          &d_comp1_pl, 
                                          &d_xchng_amt, 
                                          c_err_msg                                                                                  );
    if ( i_returncode != 0 )
    {
     fn_errlog( c_ServiceName, "S31105",LIBMSG,c_err_msg);
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     strcpy(c_error_txt,"System error. Contact System Support");
     fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
      d_lss_amt_to_be_blckd = d_lss_amt_to_be_blckd*(-1);
   }
      MEMSET(c_tmp_rmrks);
      strcpy ( c_tmp_rmrks, st_pstn_action.c_ref_rmrks );
      sprintf(st_pstn_action.c_ref_rmrks,"%s%s",c_ref_rmrks,c_tmp_rmrks);
      /*** Ver 2.3 ends ***/

   /**  commented in ver 2.3 ***************
	 	* Calculate Margin amount to be blocked *
		d_amt_to_be_blckd = ((double)(l_open_qty * d_wgt_avrg_price) * d_fmm_sltp_prcnt / 100.0);

   ** commented in ver 2.3 **
	 ** Ver 1.9 starts Here ***
		if( st_o_ordbk.c_prd_typ == 'I' )
		{
		      EXEC SQL
        SELECT nvl(FRM_DIFFRNC_MRGN,0)
        INTO   :d_frm_diffrnc_mrgn
        FROM   FRM_FO_RANGE_MSTR
        WHERE  FRM_XCHNG_CD = :st_o_ordbk.c_xchng_cd
        AND    FRM_UNDRLYNG = :st_o_ordbk.c_undrlyng
        AND    FRM_ORDR_FLOW = :c_ordr_flw
				AND    FRM_FROM_RANGE <= :st_o_ordbk.l_stp_lss_tgr
				AND    :st_o_ordbk.l_stp_lss_tgr   < FRM_TO_RANGE;

      if ( SQLCODE  !=  0  && SQLCODE != NO_DATA_FOUND)
      {
        fn_errlog( c_ServiceName, "S31110",SQLMSG,c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		}
	 ** Ver 1.9 ends Here ***

		* Calculate Loss amount to be blocked *
		if ( c_ordr_flw == BUY )
		{
			*** Ver 1.9 starts  Condition added for OptionPlus handling *** 
			if( st_o_ordbk.c_prd_typ == 'U' )
			{
				d_lss_amt_to_be_blckd = (double) (l_open_qty * ( li_lmt_rt - d_wgt_avrg_price) );
			}
			else if( st_o_ordbk.c_prd_typ == 'I' )
			{
				if( d_frm_diffrnc_mrgn < 100 )
        {
          d_lss_amt_to_be_blckd = l_open_qty * (d_wgt_avrg_price - li_lmt_rt);
        }
        else if ( d_frm_diffrnc_mrgn == 100 )
        {
          d_lss_amt_to_be_blckd = l_open_qty * d_wgt_avrg_price;
        }
			}
			*** Ver 1.9 Condition ends ***
			
		}
		else if ( c_ordr_flw == SELL )
		{
			d_lss_amt_to_be_blckd = (double) (l_open_qty * (d_wgt_avrg_price - li_lmt_rt) );  
		}
   } ***********/

		/* Difference margin & loss */
		d_diff_amt  = st_o_ordbk.d_amt_blkd - d_amt_to_be_blckd;
		d_diff_loss = st_o_ordbk.d_lss_amt_blkd + d_lss_amt_to_be_blckd;

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Cover li_lmt_rt :%ldf",li_lmt_rt);
			fn_userlog(c_ServiceName,"Fresh l_open_qty qty = :%ld",l_open_qty);	
			fn_userlog(c_ServiceName,"d_wgt_avrg_price = :%lf:",d_wgt_avrg_price);
			fn_userlog(c_ServiceName,"st_o_ordbk.d_amt_blkd = :%lf:", st_o_ordbk.d_amt_blkd);
			fn_userlog(c_ServiceName,"st_o_ordbk.d_lss_amt_blkd = :%lf:", st_o_ordbk.d_lss_amt_blkd);
			fn_userlog(c_ServiceName,"d_amt_to_be_blckd = :%lf:", d_amt_to_be_blckd);
			fn_userlog(c_ServiceName,"d_lss_amt_to_be_blckd = :%lf:", d_lss_amt_to_be_blckd);
			fn_userlog(c_ServiceName,"d_diff_amt = :%lf:",d_diff_amt);
			fn_userlog(c_ServiceName,"d_diff_loss = :%lf:",d_diff_loss);
		}

		/* Block Release the margin amount */
		strcpy( c_narration_id , ON_EXPIRY);
		if(d_diff_amt != 0)
		{
				d_balance_amt  = 0.0;

				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"Block the margin amount");
				}

				i_returncode = fn_upd_spnlimits( c_ServiceName,
																					&st_pstn_action,
																					ptr_st_err_msg,
																					c_narration_id,
																					DEBIT_TILL_LIMIT,
																					d_diff_amt,
																					&d_balance_amt);


				if ( i_returncode != 0 )
				{
					 fn_errlog( c_ServiceName, "S31115",LIBMSG,c_err_msg);
					 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					 strcpy(c_error_txt,"System error. Contact System Support");
					 fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
					 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				d_amt_to_be_blckd = d_amt_to_be_blckd + d_balance_amt ;
			}

		/* Block Release the loss amount */
		strcpy( c_narration_id , ON_EXPIRY);
			
		if( d_lss_amt_to_be_blckd <= 0 )
		{
			if(d_diff_loss != 0)
			{
				d_balance_amt  = 0.0;

				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"Block the loss amount");
				}

				i_returncode = fn_upd_spnlimits( c_ServiceName,
																				&st_pstn_action,
																				ptr_st_err_msg,
																				c_narration_id,
																				DEBIT_TILL_LIMIT,
																				d_diff_loss,
																				&d_balance_amt);


				if ( i_returncode != 0 )
				{
					 fn_errlog( c_ServiceName, "S31120",LIBMSG,c_err_msg);
					 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					 strcpy(c_error_txt,"System error. Contact System Support");
					 fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
					 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

				 d_lss_amt_to_be_blckd = d_lss_amt_to_be_blckd - d_balance_amt ;
			}
		}
		else if(d_lss_amt_to_be_blckd > 0)
		{
			if(st_o_ordbk.d_lss_amt_blkd != 0)
			{
				d_balance_amt  = 0.0;

				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"Release old loss amount in case or profit");
				}
			
				i_returncode = fn_upd_spnlimits( c_ServiceName,
																			&st_pstn_action,
																			ptr_st_err_msg,
																			c_narration_id,
																			DEBIT_TILL_LIMIT,
																			st_o_ordbk.d_lss_amt_blkd,
																			&d_balance_amt);


				if ( i_returncode != 0 )
				{
					 fn_errlog( c_ServiceName, "S31125",LIBMSG,c_err_msg);
					 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					 strcpy(c_error_txt,"System error. Contact System Support");
					 fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
					 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			}
			 d_lss_amt_to_be_blckd = 0;
		}

   /** ver 2.3 starts ***/
      strcpy ( st_pstn_action.c_ref_rmrks, c_tmp_rmrks);
      MEMSET(c_tmp_rmrks);

    if( st_o_ordbk.c_prd_typ == 'I' )
    {
	   	EXEC SQL
		  UPDATE     FOD_FO_ORDR_DTLS
			SET        FOD_AMT_BLCKD = :d_amt_to_be_blckd,
			  					FOD_LSS_AMT_BLCKD = abs(:d_lss_amt_to_be_blckd) ,
                  FOD_SLTP_MRGN = :d_comp1_mrgn,
       		        FOD_SLTP_PL   = :d_comp1_pl,  
          		    FOD_SLTP_SEBI_MRGN = :d_xchng_amt,
                	FOD_OPLUS_PREMIUM  = :d_prem_amt, 
                  FOD_SPAN_MRGN = :d_spn_mrgn,   
                  FOD_EXPR_MRGN = :d_expr_mrgn  
			 WHERE      /*** FOD_ORDR_RFRNC = :st_i_ordbk.c_ordr_rfrnc; *** Ver 2.3 ***/
								  FOD_ORDR_RFRNC= :c_fresh_ref; /*** Ver 2.3 ***/
      } /** ver 2.3 ends ***/
      else
      {
       EXEC SQL
       UPDATE     FOD_FO_ORDR_DTLS
       SET        FOD_AMT_BLCKD = :d_amt_to_be_blckd,
                  FOD_LSS_AMT_BLCKD = abs(:d_lss_amt_to_be_blckd) ,
                  FOD_SLTP_MRGN = :d_comp1_mrgn, /*** Ver 2.3 ***/
                  FOD_SLTP_PL   = :d_comp1_pl,   /*** Ver 2.3 ***/
                  FOD_SLTP_SEBI_MRGN = :d_xchng_amt   /*** Ver 2.3 ***/
       WHERE      /*** FOD_ORDR_RFRNC = :st_i_ordbk.c_ordr_rfrnc; *** Ver 2.3 ***/
									FOD_ORDR_RFRNC= :c_fresh_ref; /*** Ver 2.3 ***/
      }
			if(SQLCODE != 0)
			{
				 fn_errlog( c_ServiceName, "S31130",SQLMSG,c_err_msg);
				 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				 strcpy(c_error_txt,"System error. Contact System Support");
				 fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);
				 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
	}
	/*** Ver 1.6 Ends ***/


	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_errlog ( c_ServiceName, "S31135", TPMSG, c_err_msg );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    strcpy(c_error_txt,"System error. Contact System Support");  /*** Ver 1.4 ***/
    fn_log_prcs_err(c_program_nm,c_xchng_cd_tmp,c_match_id,c_error_txt,c_ServiceName,c_err_msg);  /*** Ver 1.4 ***/
    /** tpreturn ( TPFAIL, ERR_BFR, ( char * )c_err_msg, 0, 0 ); ** Ver 2.0 **/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); /** Ver 2.0 **/
  }

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "After process exp fun ... " );	
	}

	tpreturn( TPSUCCESS, SUCC_BFR, NULL, 0, 0 );

}

int fn_prcs_exp ( char *c_ServiceName,
                  struct st_pstn_actn *ptr_st_pstn_actn,
                  char *c_err_msg
                )
{
	varchar c_trade_dt[12];
	int i_returncode;
	int i_trnsctn;
	char c_upos_avl;
	char c_mtm_flag;
	rtrim(ptr_st_pstn_actn->c_cln_mtch_accnt);
  rtrim(ptr_st_pstn_actn->c_undrlyng);
  rtrim(ptr_st_pstn_actn->c_expry_dt);
  char c_extra_update='\0'; /** ver 2.4 ***/

  fn_init_ddr_val ( ptr_st_pstn_actn->c_rout_crt );
	
	c_upos_avl = 'Y';
	
	EXEC SQL
    SELECT  FUS_CLM_MTCH_ACCNT,
            FUS_XCHNG_CD,
            FUS_INDSTK,
            FUS_UNDRLYNG,
            FUS_UIBUY_QTY,
            FUS_UIBUY_VAL,
            FUS_UISELL_QTY,
            FUS_UISELL_VAL,
            FUS_UEXBUY_QTY,
            FUS_UEXBUY_VAL,
            FUS_UEXSELL_QTY,
            FUS_UEXSELL_VAL,
            FUS_UBUY_EXCTD_QTY,
            FUS_USELL_EXCTD_QTY,
            FUS_UOPNPSTN_FLW,
            FUS_UOPNPSTN_QTY,
            FUS_UOPNPSTN_VAL,
            FUS_UMTM_OPN_VAL,
            FUS_INITIAL_MRGN,
            FUS_NET_OPTN_VAL,
            FUS_USPAN_WENOV_MRGN,
            NVL(FUS_MTM_FLG,'O'),
            NVL(FUS_MIN_MRGN,0),
            FUS_BLCKD_PL,
            FUS_REQD_INITIAL_MRGN
    INTO    :st_undpstn_crrnt.c_cln_mtch_accnt,
            :st_undpstn_crrnt.c_xchng_cd,
            :st_undpstn_crrnt.c_indstk,
            :st_undpstn_crrnt.c_undrlyng,
            :st_undpstn_crrnt.l_uibuy_qty,
            :st_undpstn_crrnt.d_uibuy_val,
            :st_undpstn_crrnt.l_uisell_qty,
            :st_undpstn_crrnt.d_uisell_val,
            :st_undpstn_crrnt.l_uexbuy_qty,
            :st_undpstn_crrnt.d_uexbuy_val,
            :st_undpstn_crrnt.l_uexsell_qty,
            :st_undpstn_crrnt.d_uexsell_val,
            :st_undpstn_crrnt.l_ubuy_exctd_qty,
            :st_undpstn_crrnt.l_usell_exctd_qty,
            :st_undpstn_crrnt.c_uopnpstn_flw,
            :st_undpstn_crrnt.l_uopnpstn_qty,
            :st_undpstn_crrnt.d_uopnpstn_val,
            :st_undpstn_crrnt.d_umtm_opn_val,
            :st_undpstn_crrnt.d_initial_mrgn,
            :st_undpstn_crrnt.d_net_optn_val,
            :st_undpstn_crrnt.d_uspan_wenov_mrgn,
            :c_mtm_flag,
            :st_undpstn_crrnt.d_min_mrgn,
            :st_undpstn_crrnt.d_blckd_pl,
            :st_undpstn_crrnt.d_reqd_initial_mrgn
	  FROM    FUS_FO_UNDRLYNG_SPN_PSTN
    WHERE   FUS_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND     FUS_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
    AND     FUS_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng;

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31140", SQLMSG, c_err_msg );
    fn_userlog ( c_ServiceName, "ERROR Getting the current unerlying position SQLCODE = :%ld:",SQLCODE );
		return -1;
  }

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog ( c_ServiceName, "st_undpstn_crrnt.d_uopnpstn_val = %lf",st_undpstn_crrnt.d_uopnpstn_val );
    fn_userlog ( c_ServiceName, "st_undpstn_crrnt.d_umtm_opn_val = %lf",st_undpstn_crrnt.d_umtm_opn_val );
    fn_userlog ( c_ServiceName, "st_undpstn_crrnt.d_initial_mrgn = %lf",st_undpstn_crrnt.d_initial_mrgn );
    fn_userlog ( c_ServiceName, "st_undpstn_crrnt.d_net_optn_val = %lf",st_undpstn_crrnt.d_net_optn_val );
    fn_userlog ( c_ServiceName, "st_undpstn_crrnt.d_uspan_wenov_mrgn = %lf",st_undpstn_crrnt.d_uspan_wenov_mrgn );
    fn_userlog ( c_ServiceName, "c_mtm_flag = %c",c_mtm_flag );
    fn_userlog ( c_ServiceName, "st_undpstn_crrnt.d_min_mrgn = %lf",st_undpstn_crrnt.d_min_mrgn );
    fn_userlog ( c_ServiceName, "st_undpstn_crrnt.d_blckd_pl = %lf",st_undpstn_crrnt.d_blckd_pl );
    fn_userlog ( c_ServiceName, "st_undpstn_crrnt.d_reqd_initial_mrgn = %lf",st_undpstn_crrnt.d_reqd_initial_mrgn );
  }

  if ( SQLCODE == NO_DATA_FOUND )
  {
		fn_errlog( c_ServiceName, "S31145", LIBMSG, c_err_msg );
    fn_userlog ( c_ServiceName, "INSIDE  position doesnot exists");
	  strcpy ( c_msg, "NO DATA FOUND IN FUS." );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return -1;	
	}

	strcpy( st_undpstn_tobe.c_cln_mtch_accnt, ptr_st_pstn_actn->c_cln_mtch_accnt );
  strcpy( st_undpstn_tobe.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
  strcpy( st_undpstn_tobe.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
  st_undpstn_tobe.c_indstk            = ptr_st_pstn_actn->c_ctgry_indstk;
  st_undpstn_tobe.l_uibuy_qty         = 0;
  st_undpstn_tobe.d_uibuy_val         = 0;
  st_undpstn_tobe.l_uisell_qty        = 0;
  st_undpstn_tobe.d_uisell_val        = 0;
  st_undpstn_tobe.l_uexbuy_qty        = 0;
  st_undpstn_tobe.d_uexbuy_val        = 0;
  st_undpstn_tobe.l_uexsell_qty       = 0;
  st_undpstn_tobe.d_uexsell_val       = 0;
  st_undpstn_tobe.l_ubuy_exctd_qty    = 0;
  st_undpstn_tobe.l_usell_exctd_qty   = 0;
  st_undpstn_tobe.c_uopnpstn_flw      = 'N';
  st_undpstn_tobe.l_uopnpstn_qty      = 0;
  st_undpstn_tobe.d_uopnpstn_val      = 0;
  st_undpstn_tobe.d_umtm_opn_val      = 0;
  st_undpstn_tobe.d_initial_mrgn      = st_undpstn_crrnt.d_initial_mrgn ;
  st_undpstn_tobe.d_span_wemult_mrgn  = st_undpstn_crrnt.d_span_wemult_mrgn ;
  st_undpstn_tobe.d_eba_expr_mrgn     = st_undpstn_crrnt.d_eba_expr_mrgn ;
  st_undpstn_tobe.d_uspan_wenov_mrgn  = st_undpstn_crrnt.d_uspan_wenov_mrgn ;
  st_undpstn_tobe.d_multpr            = st_undpstn_crrnt.d_multpr ;
  st_undpstn_tobe.d_uspan_nenov_mrgn  = st_undpstn_crrnt.d_uspan_nenov_mrgn ;
  st_undpstn_tobe.d_net_optn_val      = st_undpstn_crrnt.d_net_optn_val ;
  st_undpstn_tobe.d_min_mrgn          = st_undpstn_crrnt.d_min_mrgn ;
  st_undpstn_tobe.d_blckd_pl          = st_undpstn_crrnt.d_blckd_pl ;
  st_undpstn_tobe.d_reqd_initial_mrgn = st_undpstn_crrnt.d_reqd_initial_mrgn ;
  st_undpstn_tobe.d_umtm_opn_val      = 0;

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog( c_ServiceName, "Before update span position ... " );
  }

	i_returncode  = fn_upd_spn_pos (c_ServiceName,
																  ptr_st_pstn_actn,
                           			  &st_undpstn_crrnt,
																  &st_undpstn_tobe,
                                  c_err_msg
                                 );

  if( i_returncode != SUCC_BFR )
  {
      fn_errlog( c_ServiceName, "S31150", LIBMSG, c_err_msg );
      strcpy ( c_msg, "System error. Contact system support" );
      fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
      return -1 ;
  }

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog( c_ServiceName, "After update span position  ... " );
	}

	if ( st_undpstn_tobe.l_uopnpstn_qty > 0 )
  {
 	  st_undpstn_tobe.c_uopnpstn_flw  = BUY;
  }
  else if ( st_undpstn_tobe.l_uopnpstn_qty < 0 )
  {
    st_undpstn_tobe.c_uopnpstn_flw = SELL;
  }
  else
  {
    st_undpstn_tobe.c_uopnpstn_flw = NEUTRAL;
  }

  if( c_upos_avl == 'N')
  {
    fn_errlog(c_ServiceName, "S31155", SQLMSG, c_err_msg );
		strcpy ( c_msg, " Open Position Flow Should Not be NEUTRAL." );
		fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    return -1;
  }
  else
  {
    EXEC SQL
      UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
      SET     FUS_UIBUY_QTY         = :st_undpstn_tobe.l_uibuy_qty,
              FUS_UIBUY_VAL         = :st_undpstn_tobe.d_uibuy_val,
              FUS_UISELL_QTY        = :st_undpstn_tobe.l_uisell_qty,
              FUS_UISELL_VAL        = :st_undpstn_tobe.d_uisell_val,
              FUS_UEXBUY_QTY        = :st_undpstn_tobe.l_uexbuy_qty,
              FUS_UEXBUY_VAL        = :st_undpstn_tobe.d_uexbuy_val,
              FUS_UEXSELL_QTY       = :st_undpstn_tobe.l_uexsell_qty,
              FUS_UEXSELL_VAL       = :st_undpstn_tobe.d_uexsell_val,
              FUS_UBUY_EXCTD_QTY    = :st_undpstn_tobe.l_ubuy_exctd_qty,
              FUS_USELL_EXCTD_QTY   = :st_undpstn_tobe.l_usell_exctd_qty,
              FUS_UOPNPSTN_FLW      = :st_undpstn_tobe.c_uopnpstn_flw,
              FUS_UOPNPSTN_QTY      = :st_undpstn_tobe.l_uopnpstn_qty,
              FUS_UOPNPSTN_VAL      = :st_undpstn_tobe.d_uopnpstn_val,
              FUS_UMTM_OPN_VAL      = :st_undpstn_tobe.d_umtm_opn_val,
              FUS_INITIAL_MRGN      = :st_undpstn_tobe.d_initial_mrgn,
              FUS_SPAN_WEMULT_MRGN  = :st_undpstn_tobe.d_span_wemult_mrgn,
              FUS_EBA_EXPR_MRGN     = :st_undpstn_tobe.d_eba_expr_mrgn,
              FUS_USPAN_WENOV_MRGN  = :st_undpstn_tobe.d_uspan_wenov_mrgn,
              FUS_MULTIPLIER        = :st_undpstn_tobe.d_multpr,
              FUS_USPAN_NENOV_MRGN  = :st_undpstn_tobe.d_uspan_nenov_mrgn,
              FUS_NET_OPTN_VAL      = :st_undpstn_tobe.d_net_optn_val,
              FUS_MTM_FLG           = :st_undpstn_tobe.c_mtm_flg,
       /***       FUS_NTNL_PL           = :st_undpstn_tobe.d_ntnl_pl,
              FUS_BLCKD_PL          = :st_undpstn_tobe.d_blckd_pl * (-1),  **** Commented in ver 1.3 ***/
              FUS_MIN_MRGN          = :st_undpstn_tobe.d_min_mrgn,
 				      FUS_REQD_INITIAL_MRGN = :st_undpstn_tobe.d_reqd_initial_mrgn
      WHERE   FUS_CLM_MTCH_ACCNT    = :ptr_st_pstn_actn->c_cln_mtch_accnt
      AND     FUS_XCHNG_CD          = :ptr_st_pstn_actn->c_xchng_cd
      AND     FUS_UNDRLYNG          = :ptr_st_pstn_actn->c_undrlyng;

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31160", SQLMSG, c_err_msg );
      return -1;
    }
  }

  /***** trigger price ver 2.4 starts ***/
  c_extra_update = 'N';
  i_returncode  = fn_cal_trg_prc( c_ServiceName ,  ptr_st_pstn_actn ,c_extra_update,
                                      ptr_st_err_msg  );

  if( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "S31165", LIBMSG, c_err_msg );
    fn_userlog ( c_ServiceName, "ERROR in fn_cal_trg_prc");
  }
  /***** ver 2.4 ends ***/

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"After process expiry");
	}
	
	return 0;
}

int fn_upd_spn_pos( char *c_ServiceName,
										struct st_pstn_actn *ptr_st_pstn_actn, 
										struct st_fus_undrlyng_pstn *ptr_st_undpstn_crrnt,
										struct st_fus_undrlyng_pstn *ptr_st_undpstn_tobe,	
										char *c_err_msg)
{
	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;
	
  char c_narration_id[4];
  char c_dr_without_lmt_flg;
  char c_pos_avl;
  char c_tmp_rmrks  [ 133 ] ;
  char c_inp_strng  [ 16000 ]; /*** changed from 4000 to 16000 in Ver 2.2 ***/
  char c_inp_strng1 [ 16000 ]; /*** changed from 4000 to 16000 in Ver 2.2 ***/
  char c_inp_strng2 [ 16000 ];
  char c_inp_strng11[ 16000 ];
  char c_inp_strng22[ 16000 ];
  char c_op_strng   [ 16000 ];
  char c_op_strng1  [ 16000 ];
  char c_op_strng2  [ 16000 ];
  char c_seq_num1   [ 12000 ];
  char c_seq_num2   [ 12000 ];
  char c_mrgn_indctr[3];
  char c_opseq_num1[20];
  char c_opseq_num2[20];
  char c_mtch_accnt1[11];
  char c_mtch_accnt2[11];
  char c_spn_mrgn1[20];
  char c_spn_mrgn2[20];
  char c_nov1[20];
  char c_nov2[20];
  char c_total_mrgn1[20];
  char c_total_mrgn2[20];
  char *null_ptr  = 0;
	char c_pipe_id[3];
	char  c_cln_mtch_accnt[11];
  char  c_prd_typ;
  char  c_undrlyng[7];
  char  c_expry_dt[10];
  char  c_exrc_typ;
  char  c_opt_typ;
  char  c_xchng_cd[4];
  char c_strk_prc[20];  /*** Ver 1.1 ***/ 
	char c_xchng_cd1[3];			/**** Ver 1.5 **/	
	char c_xchng_cd2[3];			/**** Ver 1.5 **/	

  int i_returncode;
  int i_rtrn_cd1;
	int i_cntrct_cnt = 0;   /*** Ver 1.1 ***/

  long  l_max_opn_qty = 0;
  long  l_min_opn_qty = 0;
  long  l_temp_qty    = 0;
  long  l_prtfl_seq1  = 0;
  long  l_prtfl_seq2  = 0;
  long  li_len_tobuf  = 0;
  long  l_length1     = 0;
  long  l_length2     = 0;
  long  l_cntr        = 0;
  long  l_strike_prc  = 0;
  long  l_prmum_qty   = 0;
	long  l_basket_id   = 0;

  double d_diff_mrgn  = 0.0;
  double d_diff_pl    = 0.0;
  double d_balance_amt= 0.0 ;
  double d_bal_to_apply = 0.0;
  double d_ltp         = 0.0;
	double d_spn_mrgn    = 0.0;
  double d_spn_mrgn1	 = 0.0;
	double d_spn_mrgn2	 = 0.0;
	double d_nov				 = 0.0;
  double d_nov1				 = 0.0;
  double d_nov2				 = 0.0;
	double d_total_mrgn	 = 0.0;
  double d_total_mrgn1 = 0.0;
  double d_total_mrgn2 = 0.0;
  double d_cntrct_pl    = 0.0;
  double d_ntnl_pl      = 0.0;
  double d_blckd_amnt   = 0.0;
  double d_opt_prmum    = 0.0;
  double d_blkd_prmum   = 0.0;
  double d_clsng_prc    = 0.0;
  double d_prmum        = 0.0;
	double d_oblckd_amnt  = 0.0;
	double d_total_prmum  = 0.0;
	double d_expsr_mrgn   = 0.0; 
	double d_expsr        = 0.0;
	double  d_min_expsr_mrgn = 0.0;
	double  d_min_expsr      = 0.0;
	double  d_mltplr         = 0.0;
	double  d_intl_mrgn      = 0.0;
	double  d_min_mrgn			 = 0.0;
	double  d_undrlyng_pl 	 = 0.0;
	double d_strike_prc = 0.0;    /*** Ver 1.1 ***/

  /*** Ver 2.6  Starts Here ***/
  int    i_ret_val=0;

  double d_spn_bmrgn1=0;
  double d_bnov1=0;
  double d_total_bmrgn1=0;

  double d_spn_bmrgn2=0;
  double d_bnov2=0;
  double d_total_bmrgn2=0;

  double d_spn_bmrgn=0;
  double d_bnov=0;
  double d_total_bmrgn=0;
  /*** Ver 2.6  Ends here ***/	

	sql_cursor sys_cursor;
  char  sql_cln_mtch_accnt[11];
  char  sql_xchng_cd[4];
  char  sql_prd_typ;
  char  sql_undrlyng[7];
  varchar c_exp_dt[LEN_DATE];
  varchar c_trd_dt[12];
  varchar c_xchng_code [20];
  double d_mrgn_blkd = 0.0;
	char c_exp_dt_temp[12];
  
	/** Current contract level positions of other contracts in the same underlying **/

  struct st_fcp_cntrct_pstn st_cntrct_pstn_crrnt  ;

  /** Copy of contract level position on which action is to be done taken before applying the action **/

  struct st_fcp_cntrct_pstn st_cntrct_pstn_old  ;

  /** Contract level position on which action is to be done **/

  struct st_fcp_cntrct_pstn st_cntrct_pstn_md_rc;

  ptr_fml_Obuf = ( FBFR32* ) tpalloc ( "FML32" , NULL,MIN_FML_BUF_LEN );

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31170", TPMSG, c_err_msg);
    return -1;
  }

	ptr_fml_Ibuf  = ( FBFR32 *)NULL;
  /*** ptr_fml_Ibuf  = ( FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);		 ** commented ver 1.1 ***/

  ptr_fml_Ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN*10); /*** Added in ver 1.1 for increase buffer size ***/

  if ( ptr_fml_Ibuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31175", TPMSG, c_err_msg);
    tpfree((char *)ptr_fml_Obuf);
    return -1;
  }
	
  strcpy( sql_cln_mtch_accnt, ptr_st_pstn_actn->c_cln_mtch_accnt );
  strcpy( sql_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
  strcpy( sql_undrlyng, ptr_st_pstn_actn->c_undrlyng );
  sql_prd_typ = ptr_st_pstn_actn->c_prd_typ;
	
	if ( DEBUG_MSG_LVL_0 )
	{
  	fn_userlog ( c_ServiceName, "sql_cln_mtch_accnt   |%s|",sql_cln_mtch_accnt );
		fn_userlog ( c_ServiceName, "sql_xchng_cd         |%s|",sql_xchng_cd );
  	fn_userlog ( c_ServiceName, "sql_undrlyng         |%s|",sql_undrlyng );
		fn_userlog ( c_ServiceName, "sql_prd_typ          |%c|",sql_prd_typ );
	}

  if ( DEBUG_MSG_LVL_3 )
  {
    fn_userlog ( c_ServiceName, "Building new underlying position" );
  }

  EXEC  SQL
    SELECT  SPN_PRTFL1_SEQ.nextval
    INTO    :l_prtfl_seq1
    FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31180",SQLMSG, c_err_msg);
    return  -1;
  }

  EXEC  SQL
    SELECT  SPN_PRTFL1_SEQ.nextval
    INTO    :l_prtfl_seq2
    FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31185",SQLMSG, c_err_msg);
    return  -1;
  }

	/*** Ver 1.1 starts here ***/
	MEMSET(c_inp_strng);
	MEMSET(c_inp_strng1);
	MEMSET(c_inp_strng2);
	MEMSET(c_inp_strng11);
	MEMSET(c_inp_strng22);
	/*** Ver 1.1 Ends here ***/

  strcpy ( c_inp_strng1, "1^" );
  strcpy ( c_inp_strng2, "|" );
	/*** Ver 1.5 Starts ******/
	if(strcmp(sql_xchng_cd,"NFO") == 0)
	{
  	strcat(c_inp_strng1,"NSE^");
	}
	else if(strcmp(sql_xchng_cd,"BFO") == 0)
	{
  	strcat(c_inp_strng1,"BSE^");
	}
	/*** Ver 1.5 Ends *****/
  sprintf(c_seq_num1,"%ld", l_prtfl_seq1);
  sprintf(c_seq_num2,"%ld", l_prtfl_seq2);
	strcat( c_inp_strng1 , c_seq_num1 );
  strcat( c_inp_strng2 , c_seq_num2 );

  strcat(c_inp_strng1,"^");
  strcat(c_inp_strng2,"^");

	EXEC SQL
    SELECT  FCB_UNDRLYNG_BSKT_ID
    INTO    :l_basket_id
    FROM    FCB_FO_CLN_BSKT_ALLTD
    WHERE   FCB_CLN_LVL = ( SELECT  CLM_CLNT_LVL
                            FROM    CLM_CLNT_MSTR
                            WHERE   CLM_MTCH_ACCNT = :sql_cln_mtch_accnt);
  if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31190",SQLMSG, c_err_msg);
    tpfree((char *)ptr_fml_Obuf);
		return  -1;
  }

	EXEC SQL ALLOCATE :sys_cursor;

  EXEC SQL EXECUTE
    BEGIN
       OPEN :sys_cursor FOR
        SELECT    FCP_CLM_MTCH_ACCNT,
                  FCP_XCHNG_CD,
                  FCP_PRDCT_TYP,
                  FCP_INDSTK,
                  FCP_UNDRLYNG,
                  TO_CHAR (FCP_EXPRY_DT,'DD-Mon-YYYY'),
                  FCP_EXER_TYP,
                  FCP_STRK_PRC,
                  FCP_OPT_TYP,
                  FCP_IBUY_QTY,
                  FCP_IBUY_ORD_VAL,
                  FCP_ISELL_QTY,
                  FCP_ISELL_ORD_VAL,
                  FCP_EXBUY_QTY,
                  FCP_EXBUY_ORD_VAL,
                  FCP_EXSELL_QTY,
                  FCP_EXSELL_ORD_VAL,
                  FCP_BUY_EXCTD_QTY,
                  FCP_SELL_EXCTD_QTY,
                  FCP_OPNPSTN_FLW,
                  FCP_OPNPSTN_QTY,
                  FCP_OPNPSTN_VAL,
                  FCP_MTM_OPN_VAl,
                  FCP_OPT_PREMIUM
        FROM      FCP_FO_SPN_CNTRCT_PSTN
        WHERE     FCP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
        AND       FCP_XCHNG_CD       = :sql_xchng_cd
        AND       FCP_UNDRLYNG       = :sql_undrlyng
				AND			( FCP_IBUY_QTY <> 0 OR FCP_ISELL_QTY <> 0 OR FCP_EXBUY_QTY <> 0 OR FCP_EXSELL_QTY <> 0 OR FCP_OPNPSTN_QTY <> 0 OR FCP_OPT_PREMIUM <> 0 )	/*** Ver 1.1 ***/
        ORDER BY  FCP_EXPRY_DT asc;
    END;
  END-EXEC;

  if ( SQLCODE != 0 )
  {
    EXEC SQL FREE :sys_cursor;
    fn_errlog ( c_ServiceName, "S31195", SQLMSG, c_err_msg );
    return -1;
  }

	c_pos_avl = 'N';

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Before while loop");
	}

	while ( 1 )
  {
		d_expsr_mrgn			=	0.0;
		d_min_expsr_mrgn	=	0.0;
    MEMSET (c_exp_dt);

    EXEC SQL  FETCH  :sys_cursor
               INTO  :st_cntrct_pstn_crrnt.c_cln_mtch_accnt,
                     :st_cntrct_pstn_crrnt.c_xchng_cd,
                     :st_cntrct_pstn_crrnt.c_prd_typ,
                     :st_cntrct_pstn_crrnt.c_ctgry_indstk,
                     :st_cntrct_pstn_crrnt.c_undrlyng,
                     :c_exp_dt,
                     :st_cntrct_pstn_crrnt.c_exer_typ,
                     :st_cntrct_pstn_crrnt.l_strike_prc,
                     :st_cntrct_pstn_crrnt.c_opt_typ,
                     :st_cntrct_pstn_crrnt.l_ibuy_qty,
                     :st_cntrct_pstn_crrnt.d_ibuy_ord_val,
                     :st_cntrct_pstn_crrnt.l_isell_qty,
                     :st_cntrct_pstn_crrnt.d_isell_ord_val,
                     :st_cntrct_pstn_crrnt.l_exbuy_qty,
                     :st_cntrct_pstn_crrnt.d_exbuy_ord_val,
                     :st_cntrct_pstn_crrnt.l_exsell_qty,
                     :st_cntrct_pstn_crrnt.d_exsell_ord_val,
                     :st_cntrct_pstn_crrnt.l_buy_exctd_qty,
                     :st_cntrct_pstn_crrnt.l_sell_exctd_qty,
                     :st_cntrct_pstn_crrnt.c_opnpstn_flw,
                     :st_cntrct_pstn_crrnt.l_opnpstn_qty,
                     :st_cntrct_pstn_crrnt.d_opnpstn_val,
                     :st_cntrct_pstn_crrnt.d_mtm_opn_val,
                     :d_blkd_prmum;

    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        break;
      }

     EXEC SQL CLOSE :sys_cursor;
     EXEC SQL FREE :sys_cursor;
     fn_errlog ( c_ServiceName, "S31200", SQLMSG, c_err_msg );
     return -1;
    }

		i_cntrct_cnt++;             /*** Ver 1.1 ***/

	 	SETNULL( c_exp_dt );
    strcpy ( st_cntrct_pstn_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
    rtrim  ( st_cntrct_pstn_crrnt.c_xchng_cd );
    rtrim  ( st_cntrct_pstn_crrnt.c_undrlyng );
    rtrim  ( st_cntrct_pstn_crrnt.c_expry_dt );


    if( (strcmp ( st_cntrct_pstn_crrnt.c_xchng_cd , ptr_st_pstn_actn->c_xchng_cd ) == 0 ) &&
                ( st_cntrct_pstn_crrnt.c_prd_typ == ptr_st_pstn_actn->c_prd_typ ) &&
        (strcmp ( st_cntrct_pstn_crrnt.c_undrlyng,ptr_st_pstn_actn->c_undrlyng ) == 0 ) &&
        (strcasecmp ( st_cntrct_pstn_crrnt.c_expry_dt, ptr_st_pstn_actn->c_expry_dt ) == 0 ) &&
        (st_cntrct_pstn_crrnt.c_opt_typ == ptr_st_pstn_actn->c_opt_typ) &&
        (st_cntrct_pstn_crrnt.l_strike_prc == ptr_st_pstn_actn->l_strike_prc)  &&
        (st_cntrct_pstn_crrnt.c_exer_typ == ptr_st_pstn_actn->c_exrc_typ) )
    {
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Match Contract Found in FCP ");
			}

			memcpy ( &st_cntrct_pstn_old ,&st_cntrct_pstn_crrnt,sizeof( st_cntrct_pstn_old ));
					
      i_returncode =  fn_apply_spn_actn ( c_ServiceName,
                                          ptr_st_pstn_actn,
                                          &st_cntrct_pstn_crrnt,
                                          ptr_st_err_msg );
      if ( i_returncode == -1 )
      {
        return -1;
      }
		
			memcpy ( &st_cntrct_pstn_md_rc , &st_cntrct_pstn_crrnt , sizeof( st_cntrct_pstn_md_rc ));

      if ( st_cntrct_pstn_crrnt.c_prd_typ ==  'O' )
      {
				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"Inside option product type.");
				}
        if( st_cntrct_pstn_crrnt.l_ibuy_qty  > 0 && ptr_st_pstn_actn->c_trnsctn_flw ==  'B' )
        {
					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"SPAN Inside Option Buy Position.");
          }
					d_opt_prmum = st_cntrct_pstn_crrnt.d_ibuy_ord_val ;
        }

        d_total_prmum = d_blkd_prmum  - d_opt_prmum  ;

				if(DEBUG_MSG_LVL_3)
				{	
        	fn_userlog(c_ServiceName,"SPAN  - d_opt_prmum Is :%lf:",d_opt_prmum);
        	fn_userlog(c_ServiceName,"SPAN  - d_total_prmum Is :%lf:",d_total_prmum);
        	fn_userlog(c_ServiceName,"SPAN  - d_blkd_prmum  Is :%lf:",d_blkd_prmum);
				}
			
			  switch ( ptr_st_pstn_actn->l_actn_typ )
        {
					case  ORS_ORD_EXP: strcpy( c_narration_id , ON_EXPIRY);
                             c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
          									 break;

          default:
            				  strcpy( c_err_msg, "Invalid action type");
              				fn_userlog ( c_ServiceName,"Invalid action type");
              				return -1;
            					break;
        }

        if ( d_total_prmum  !=  0 )
        {
					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"Before call to update limit");
					}

					d_balance_amt  = 0.0;		/*** Ver 1.1 ***/

          i_returncode = fn_upd_spnlimits ( c_ServiceName,
                                         		ptr_st_pstn_actn,
                                         		ptr_st_err_msg,
                                         		c_narration_id,
                                         		c_dr_without_lmt_flg,
                                         		d_total_prmum,
                                         		&d_balance_amt);
         	if ( i_returncode != 0 )
         	{
             switch ( i_returncode )
             {
                case  INSUFFICIENT_LIMITS :

                fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg );
                EXEC SQL CLOSE :sys_cursor;
                tpfree((char *)ptr_fml_Obuf);
                tpfree((char *)ptr_fml_Ibuf);
                return INSUFFICIENT_LIMITS  ;

               default:

                fn_errlog( c_ServiceName, "S31205",LIBMSG , c_err_msg );
                EXEC SQL CLOSE :sys_cursor;
                tpfree((char *)ptr_fml_Obuf);
                tpfree((char *)ptr_fml_Ibuf);
                return -1;
              }
           }
					 d_total_prmum = d_total_prmum - d_balance_amt;		/*** Ver 1.7 ***/
				}

				if(DEBUG_MSG_LVL_3)
				{
			     fn_userlog(c_ServiceName,"After call to update limit");	
				}

		   EXEC SQL
            UPDATE  FCP_FO_SPN_CNTRCT_PSTN
            SET     FCP_OPT_PREMIUM     = :d_total_prmum * (-1) + FCP_OPT_PREMIUM
            WHERE   FCP_CLM_MTCH_ACCNT  = :st_cntrct_pstn_crrnt.c_cln_mtch_accnt
            AND     FCP_XCHNG_CD        = :st_cntrct_pstn_crrnt.c_xchng_cd
            AND     FCP_PRDCT_TYP       = :st_cntrct_pstn_crrnt.c_prd_typ
            AND     FCP_UNDRLYNG        = :st_cntrct_pstn_crrnt.c_undrlyng
            AND     FCP_EXPRY_DT        = :c_exp_dt
            AND     FCP_EXER_TYP        = :st_cntrct_pstn_crrnt.c_exer_typ
            AND     FCP_OPT_TYP         = :st_cntrct_pstn_crrnt.c_opt_typ
            AND     FCP_STRK_PRC        = :st_cntrct_pstn_crrnt.l_strike_prc;

          if ( SQLCODE != 0 )
          {
            fn_errlog(c_ServiceName, "S31210", SQLMSG, c_err_msg );
            EXEC SQL CLOSE :sys_cursor;
            tpfree((char *)ptr_fml_Obuf);
            tpfree((char *)ptr_fml_Ibuf);
            return -1;
          }

        }

        c_pos_avl = 'Y';
      }   /*** End of compare if ***/
			
      fn_sum_spnpos ( st_cntrct_pstn_crrnt , ptr_st_undpstn_tobe );

			if ( DEBUG_MSG_LVL_3 )
      {
				fn_userlog(c_ServiceName,"Qty st_cntrct_pstn.l_ibuy_qty |%ld|",st_cntrct_pstn_crrnt.l_ibuy_qty);
				fn_userlog(c_ServiceName,"Qty st_cntrct_pstn.l_exbuy_qty|%ld|",st_cntrct_pstn_crrnt.l_exbuy_qty);
				fn_userlog(c_ServiceName,"Qty st_cntrct_pstn.l_isell_qty |%ld|",st_cntrct_pstn_crrnt.l_isell_qty);
				fn_userlog(c_ServiceName,"Qty st_cntrct_pstn.l_exsell_qty |%ld|",st_cntrct_pstn_crrnt.l_exsell_qty);
				fn_userlog(c_ServiceName,"Qty st_cntrct_pstn.l_opnpstn_qty |%ld|",st_cntrct_pstn_crrnt.l_opnpstn_qty);
				fn_userlog(c_ServiceName,"Qty st_cntrct_pstn.l_opnpstn_qty |%ld|",st_cntrct_pstn_crrnt.l_opnpstn_qty);
			}
		
			l_max_opn_qty = st_cntrct_pstn_crrnt.l_opnpstn_qty + fn_maxl ( st_cntrct_pstn_crrnt.l_ibuy_qty , st_cntrct_pstn_crrnt.l_exbuy_qty );
			l_min_opn_qty = st_cntrct_pstn_crrnt.l_opnpstn_qty + fn_maxl ( abs ( st_cntrct_pstn_crrnt.l_isell_qty ) , abs ( st_cntrct_pstn_crrnt.l_exsell_qty )) * -1;	
	
      if ( st_cntrct_pstn_crrnt.c_prd_typ  ==  'O' )
      {
        l_temp_qty  = fn_minl ( l_max_opn_qty , l_min_opn_qty );
        l_max_opn_qty = l_temp_qty  ;
        l_min_opn_qty = l_temp_qty  ;
      }
	
			i_returncode  = fn_cal_expsr  ( c_ServiceName,
                                      st_cntrct_pstn_crrnt,
                                      l_basket_id,
                                      &d_expsr_mrgn,
                                      &d_min_expsr_mrgn,
                                      &d_mltplr,
                                      c_err_msg
                                    );

      if ( i_returncode != 0 )
      {
         fn_errlog(c_ServiceName, "S31215", LIBMSG, c_err_msg );
         EXEC SQL CLOSE :sys_cursor;
         tpfree((char *)ptr_fml_Obuf);
         tpfree((char *)ptr_fml_Ibuf);
         return -1;
      }

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName," SPAN  - Exposure  IS :%lf:",d_expsr_mrgn);
    		fn_userlog(c_ServiceName," SPAN  - Min. Margin IS :%lf:",d_min_expsr_mrgn);
			}

      EXEC SQL
        SELECT  NVL(FTQ_LST_TRD_PRC,0),		/*** NVL added in Ver 1.1 ***/
                NVL(FTQ_CLS_PRC,0)				/*** NVL added in Ver 1.1 ***/
        INTO    :d_ltp,
                :d_clsng_prc
        FROM    FTQ_FO_TRD_QT
				WHERE   FTQ_XCHNG_CD  = :st_cntrct_pstn_crrnt.c_xchng_cd    /*** Ver 1.2 ***/
        AND   	FTQ_PRDCT_TYP = :st_cntrct_pstn_crrnt.c_prd_typ
        AND     FTQ_UNDRLYNG  = :st_cntrct_pstn_crrnt.c_undrlyng
        AND     FTQ_EXPRY_DT  = :c_exp_dt
        AND     FTQ_EXER_TYP  = :st_cntrct_pstn_crrnt.c_exer_typ
        AND     FTQ_OPT_TYP   = :st_cntrct_pstn_crrnt.c_opt_typ
        AND     FTQ_STRK_PRC  = :st_cntrct_pstn_crrnt.l_strike_prc;

				
      if(SQLCODE  !=  0 )
      {
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31220", SQLMSG, c_err_msg );
        return -1;
      }

			if ( DEBUG_MSG_LVL_3 )
			{	
				fn_userlog(c_ServiceName,"st_cntrct_pstn_crrnt.c_prd_typ      |%c|",st_cntrct_pstn_crrnt.c_prd_typ);
				fn_userlog(c_ServiceName,"st_cntrct_pstn_crrnt.c_undrlyng     |%s|",st_cntrct_pstn_crrnt.c_undrlyng);
				fn_userlog(c_ServiceName,"c_exp_dt                            |%s|",c_exp_dt.arr);
				fn_userlog(c_ServiceName,"st_cntrct_pstn_crrnt.c_exer_typ     |%c|",st_cntrct_pstn_crrnt.c_exer_typ);
				fn_userlog(c_ServiceName,"st_cntrct_pstn_crrnt.c_opt_typ      |%c|",st_cntrct_pstn_crrnt.c_opt_typ);
				fn_userlog(c_ServiceName,"st_cntrct_pstn_crrnt.l_strike_prc   |%ld|",st_cntrct_pstn_crrnt.l_strike_prc);
				fn_userlog(c_ServiceName,"st_cntrct_pstn_crrnt.l_opnpstn_qty  |%ld|",st_cntrct_pstn_crrnt.l_opnpstn_qty);
	
			}

      if ( st_cntrct_pstn_crrnt.l_opnpstn_qty != 0 )
      {
        if ( st_cntrct_pstn_crrnt.c_prd_typ == 'O' && st_cntrct_pstn_crrnt.l_opnpstn_qty < 0 )
        {
          d_cntrct_pl = (double) st_cntrct_pstn_crrnt.l_opnpstn_qty * ( d_clsng_prc - d_ltp );

        }
        else
        {
          if (  st_cntrct_pstn_crrnt.c_prd_typ  ==  'F' )
          {
            if( st_cntrct_pstn_crrnt.l_opnpstn_qty  > 0 )
            {
              d_cntrct_pl = ( d_ltp * (double) st_cntrct_pstn_crrnt.l_opnpstn_qty ) - st_cntrct_pstn_crrnt.d_opnpstn_val;
            }
            else if ( st_cntrct_pstn_crrnt.l_opnpstn_qty < 0 )
            {
              d_cntrct_pl = fabs(st_cntrct_pstn_crrnt.d_opnpstn_val)  - (d_ltp * (double) abs(st_cntrct_pstn_crrnt.l_opnpstn_qty) )  ;
            }
          }
        }
      }

      d_ltp = d_ltp / 100;

				EXEC SQL
        	SELECT  SEM_MAP_VL
        	INTO    :c_xchng_code
        	FROM    SEM_STCK_MAP
        	WHERE   SEM_STCK_CD = :st_cntrct_pstn_crrnt.c_undrlyng
        	/**AND     SEM_ENTTY   = 3;				*** Ver 1.5 comment ***/
				  AND     SEM_ENTTY   = decode(:sql_xchng_cd,'NFO',3,'BFO',14);	/*** Ver 1.5 **/

      	if ( SQLCODE  !=  0 )
      	{
        	fn_errlog ( c_ServiceName, "S31225", SQLMSG, c_err_msg );
        	EXEC SQL CLOSE :sys_cursor;
        	return -1;
      	}

      SETNULL(c_xchng_code);	
		
      EXEC SQL
        SELECT to_char(to_date(:st_cntrct_pstn_crrnt.c_expry_dt,'DD-Mon-YYYY'),'dd-Mon-YY')
        INTO  :c_expry_dt
        FROM  DUAL;

      if ( SQLCODE  !=  0 )
      {
        fn_errlog ( c_ServiceName, "S31230", SQLMSG, c_err_msg );
        return -1;
      }

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"c_expry_dt                            |%s|",c_expry_dt);
			}
			
      /*** l_strike_prc  = st_cntrct_pstn_crrnt.l_strike_prc /100;  *** Commented in Ver 1.1 ***/

			/*** Ver 1.1 starts here ***/
			d_strike_prc = 0.0;
      d_strike_prc  = (double) st_cntrct_pstn_crrnt.l_strike_prc / 100.00  ;
      sprintf(c_strk_prc,"%lf",d_strike_prc);

      fn_spn_rtrim(c_strk_prc,'0');
      fn_spn_rtrim(c_strk_prc,'.');
      /*** Ver 1.1 ends here ***/

      if  (l_cntr ==  0 )
      {

        if(st_cntrct_pstn_crrnt.c_prd_typ  ==  'F')
        {
          sprintf ( c_inp_strng11,"%s^%s~%c:%s^%ld^%lf", st_cntrct_pstn_crrnt.c_cln_mtch_accnt,
																												 c_xchng_code.arr,
																												 st_cntrct_pstn_crrnt.c_prd_typ,
																												 c_expry_dt,
																												 l_max_opn_qty,
																												 d_ltp );

 		      strcat ( c_inp_strng1, c_inp_strng11 );

          sprintf ( c_inp_strng22,"%s^%s~%c:%s^%ld^%lf", st_cntrct_pstn_crrnt.c_cln_mtch_accnt,
																												 c_xchng_code.arr,
																												 st_cntrct_pstn_crrnt.c_prd_typ,
																											   c_expry_dt,
																												 l_min_opn_qty,
																												 d_ltp );

          strcat(c_inp_strng2,c_inp_strng22);

       }
       else
       {
          sprintf ( c_inp_strng11,"%s^%s~%c:%s:%c%c:%s^%ld^%lf", st_cntrct_pstn_crrnt.c_cln_mtch_accnt,
																																	c_xchng_code.arr,
																																	st_cntrct_pstn_crrnt.c_prd_typ,
																																	c_expry_dt,
																																	st_cntrct_pstn_crrnt.c_opt_typ,
																																	st_cntrct_pstn_crrnt.c_exer_typ,
																																	c_strk_prc,
																																	l_max_opn_qty,
																																	d_ltp );

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf ( c_inp_strng22,"%s^%s~%c:%s:%c%c:%s^%ld^%lf", st_cntrct_pstn_crrnt.c_cln_mtch_accnt,
																																	c_xchng_code.arr,
																																	st_cntrct_pstn_crrnt.c_prd_typ,
																																	c_expry_dt,
																																	st_cntrct_pstn_crrnt.c_opt_typ,
																																	st_cntrct_pstn_crrnt.c_exer_typ,
																																	c_strk_prc,
																																	l_min_opn_qty,
																																	d_ltp );

          strcat(c_inp_strng2,c_inp_strng22);
        }

      }
      else
      {
        if ( st_cntrct_pstn_crrnt.c_prd_typ  ==  'F' )
        {
           sprintf ( c_inp_strng11,"%s~%c:%s^%ld^%lf", c_xchng_code.arr,
																												st_cntrct_pstn_crrnt.c_prd_typ,
																												c_expry_dt,
																												l_max_opn_qty,
																												d_ltp );

 		       strcat ( c_inp_strng1,c_inp_strng11 );

 	         sprintf ( c_inp_strng22,"%s~%c:%s^%ld^%lf", c_xchng_code.arr,
																											 st_cntrct_pstn_crrnt.c_prd_typ,
																										  	c_expry_dt,
																												l_min_opn_qty,d_ltp);

 		       strcat ( c_inp_strng2,c_inp_strng22 );

        }
     		else
      	{
			     sprintf ( c_inp_strng11,"%s~%c:%s:%c%c:%s^%ld^%lf", c_xchng_code.arr,
											 																				  st_cntrct_pstn_crrnt.c_prd_typ,
																																c_expry_dt,
																																st_cntrct_pstn_crrnt.c_opt_typ,
																							  								 st_cntrct_pstn_crrnt.c_exer_typ,
																																c_strk_prc,
																																l_max_opn_qty,
																																d_ltp );
 
  	        strcat ( c_inp_strng1,c_inp_strng11 );

      	    sprintf ( c_inp_strng22,"%s~%c:%s:%c%c:%s^%ld^%lf", c_xchng_code.arr,
																																 st_cntrct_pstn_crrnt.c_prd_typ,
																																 c_expry_dt,
																																 st_cntrct_pstn_crrnt.c_opt_typ,
																																 st_cntrct_pstn_crrnt.c_exer_typ,
																																 c_strk_prc,
																																 l_min_opn_qty,
																																 d_ltp);

 	         strcat(c_inp_strng2,c_inp_strng22);
        }

      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_exp_dt.arr );
        fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntrct_pstn_crrnt.l_ibuy_qty );
        fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntrct_pstn_crrnt.d_ibuy_ord_val );
        fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntrct_pstn_crrnt.l_isell_qty );
        fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntrct_pstn_crrnt.d_isell_ord_val );
        fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntrct_pstn_crrnt.l_exbuy_qty );
        fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntrct_pstn_crrnt.d_exbuy_ord_val );
        fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntrct_pstn_crrnt.l_exsell_qty );
        fn_userlog ( c_ServiceName, "EXCH sell val      :%lf:", st_cntrct_pstn_crrnt.d_exsell_ord_val );
        fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntrct_pstn_crrnt.l_buy_exctd_qty );
        fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntrct_pstn_crrnt.l_sell_exctd_qty );
        fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntrct_pstn_crrnt.l_opnpstn_qty );
        fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntrct_pstn_crrnt.d_opnpstn_val);
        fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntrct_pstn_crrnt.d_mtm_opn_val );
      }

     strcat ( c_inp_strng1, "," );
     strcat ( c_inp_strng2, "," );

		if(DEBUG_MSG_LVL_3)
		{
  		fn_userlog(c_ServiceName," Exposure is Before add        *** |%lf|",d_expsr);
		}

    l_cntr  ++;
    d_undrlyng_pl = d_undrlyng_pl + d_cntrct_pl ;
    d_blkd_prmum  = 0.0 ;
    d_prmum       = d_opt_prmum + d_prmum ;
		d_min_expsr = d_min_expsr_mrgn  + d_min_expsr ;
		d_expsr     = d_expsr_mrgn  + d_expsr ;
		
		if(DEBUG_MSG_LVL_3)
		{		
			fn_userlog(c_ServiceName," Minimum Exposure is*** |%lf| ",d_min_expsr);
  		fn_userlog(c_ServiceName," Exposure is        *** |%lf|",d_expsr);
			fn_userlog(c_ServiceName," Minimum Exposure is*** |%lf| ",d_min_expsr_mrgn);
  		fn_userlog(c_ServiceName," Exposure is        *** |%lf|",d_expsr_mrgn);
		}
  }   /****** End of while ******/

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"After while loop");
  	fn_userlog(c_ServiceName,"Minimum Exposure is |%lf| ",d_min_expsr);
		fn_userlog(c_ServiceName,"Exposure is         |%lf|",d_expsr);
 	}

	EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

	/* Type Casted by Mahesh for 1 paisa */
	d_undrlyng_pl = ( long long )d_undrlyng_pl;

  if ( c_pos_avl == 'N' )
  {
		fn_userlog(c_ServiceName,"INSIDE c_pos_avl == N ");
		fn_errlog ( c_ServiceName, "S31235", LIBMSG, c_err_msg );
    return -1;
  }

  l_length1 = strlen(c_inp_strng1);

  if( c_inp_strng1[l_length1  - 1 ] == ',')
  {
    c_inp_strng1[l_length1 -1]  ='\0';
  }

  l_length2 = strlen(c_inp_strng2);

  if( c_inp_strng2[l_length2  - 1 ] == ',')
  {
    c_inp_strng2[l_length2 -1]  ='\0';

  }


  if ( st_cntrct_pstn_md_rc.l_opnpstn_qty > 0 )
  {
    st_cntrct_pstn_md_rc.c_opnpstn_flw = BUY;
  }
  else if ( st_cntrct_pstn_md_rc.l_opnpstn_qty < 0 )
  {
    st_cntrct_pstn_md_rc.c_opnpstn_flw = SELL;
  }
  else
  {
    st_cntrct_pstn_md_rc.c_opnpstn_flw = NEUTRAL;
  }
	
	MEMSET ( c_cln_mtch_accnt);
  MEMSET ( c_xchng_cd);
  MEMSET ( c_undrlyng);
	strcpy ( c_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
	strcpy ( c_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
	strcpy ( c_undrlyng,ptr_st_pstn_actn->c_undrlyng);
	strcpy ( c_exp_dt_temp,ptr_st_pstn_actn->c_expry_dt);
	c_prd_typ = ptr_st_pstn_actn->c_prd_typ;
	c_opt_typ = ptr_st_pstn_actn->c_opt_typ;
	l_strike_prc = ptr_st_pstn_actn->l_strike_prc;
	c_exrc_typ = ptr_st_pstn_actn->c_exrc_typ;
	
	if ( DEBUG_MSG_LVL_3 )
	{
		fn_userlog(c_ServiceName,"c_cln_mtch_accnt        |%s| ",c_cln_mtch_accnt);
		fn_userlog(c_ServiceName,"c_xchng_cd              |%s| ",c_xchng_cd);
  	fn_userlog(c_ServiceName,"c_undrlyng              |%s| ",c_undrlyng);
  	fn_userlog(c_ServiceName,"c_expry_dt              |%s| ",c_exp_dt_temp);
  	fn_userlog(c_ServiceName,"c_prd_typ               |%c| ",c_prd_typ);
  	fn_userlog(c_ServiceName,"c_opt_typ               |%c| ",c_opt_typ);
  	fn_userlog(c_ServiceName,"l_strike_prc            |%ld|",l_strike_prc);
  	fn_userlog(c_ServiceName,"c_exrc_typ              |%c| ",c_exrc_typ);
  }
	
  EXEC SQL
    UPDATE  FCP_FO_SPN_CNTRCT_PSTN
    SET     FCP_IBUY_QTY       = :st_cntrct_pstn_md_rc.l_ibuy_qty,
            FCP_IBUY_ORD_VAL   = :st_cntrct_pstn_md_rc.d_ibuy_ord_val,
            FCP_ISELL_QTY      = :st_cntrct_pstn_md_rc.l_isell_qty,
            FCP_ISELL_ORD_VAL  = :st_cntrct_pstn_md_rc.d_isell_ord_val,
            FCP_EXBUY_QTY      = :st_cntrct_pstn_md_rc.l_exbuy_qty,
            FCP_EXBUY_ORD_VAL  = :st_cntrct_pstn_md_rc.d_exbuy_ord_val,
            FCP_EXSELL_QTY     = :st_cntrct_pstn_md_rc.l_exsell_qty,
            FCP_EXSELL_ORD_VAL = :st_cntrct_pstn_md_rc.d_exsell_ord_val,
            FCP_BUY_EXCTD_QTY  = :st_cntrct_pstn_md_rc.l_buy_exctd_qty,
            FCP_SELL_EXCTD_QTY = :st_cntrct_pstn_md_rc.l_sell_exctd_qty,
            FCP_OPNPSTN_FLW    = :st_cntrct_pstn_md_rc.c_opnpstn_flw,
            FCP_OPNPSTN_QTY    = :st_cntrct_pstn_md_rc.l_opnpstn_qty,
            FCP_OPNPSTN_VAL    = :st_cntrct_pstn_md_rc.d_opnpstn_val,
            FCP_MTM_OPN_VAL    = :st_cntrct_pstn_md_rc.d_mtm_opn_val
    WHERE   FCP_CLM_MTCH_ACCNT = :c_cln_mtch_accnt
    AND     FCP_XCHNG_CD       = :c_xchng_cd
    AND     FCP_PRDCT_TYP      = :c_prd_typ
    AND     FCP_UNDRLYNG       = :c_undrlyng
    AND     FCP_EXPRY_DT       = :c_exp_dt_temp
    AND     FCP_OPT_TYP        = :c_opt_typ
    AND     FCP_STRK_PRC       = :l_strike_prc
    AND     FCP_EXER_TYP       = :c_exrc_typ;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31240", SQLMSG, c_err_msg );
    return  -1 ;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Calcualted underlying level position" );
    fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", ptr_st_undpstn_tobe->l_uibuy_qty );
    fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", ptr_st_undpstn_tobe->d_uibuy_val);
    fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", ptr_st_undpstn_tobe->l_uisell_qty );
    fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", ptr_st_undpstn_tobe->d_uisell_val);
    fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", ptr_st_undpstn_tobe->l_uexbuy_qty );
    fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", ptr_st_undpstn_tobe->d_uexbuy_val );
    fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", ptr_st_undpstn_tobe->l_uexsell_qty );
    fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", ptr_st_undpstn_tobe->d_uexsell_val );
    fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", ptr_st_undpstn_tobe->l_ubuy_exctd_qty );
    fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", ptr_st_undpstn_tobe->l_usell_exctd_qty );
    fn_userlog ( c_ServiceName, "Open qty          :%ld:", ptr_st_undpstn_tobe->l_uopnpstn_qty );
    fn_userlog ( c_ServiceName, "Original open val :%lf:", ptr_st_undpstn_tobe->d_uopnpstn_val);
    fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", ptr_st_undpstn_tobe->d_umtm_opn_val );
    fn_userlog ( c_ServiceName, "Add Margin val    :%lf:", ptr_st_undpstn_tobe->d_add_mrgn_val );
  }

	/*** Ver 1.1 starts here ***/

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName, "i_cntrct_cnt = :%d:",i_cntrct_cnt);
  }

  if (i_cntrct_cnt > 10)
  {
    if ( Fadd32 (ptr_fml_Ibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31245",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    MEMSET(c_inp_strng);
    strcpy(c_inp_strng,c_inp_strng1);
    strcat(c_inp_strng,"\n");

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"c_inp_strng 1 = :%s:",c_inp_strng);
    }

    if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31250",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
    }

    i_returncode  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

    if( i_returncode != 0 )
    {
      fn_errlog( c_ServiceName, "S31255",TPMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

		if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng1,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31260",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Output String 1 Is :%s:",c_op_strng1);
    }

    /*** Ver 2.6  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31265",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    } 
 
    fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    /*** Ver 2.6  Ends here ***/  

    MEMSET(c_inp_strng);
		/*** Ver 1.5 Bug Fix Starts ******/
		if(strcmp(sql_xchng_cd,"NFO") == 0)
		{
  		strcpy(c_inp_strng,"1^NSE^");
		}
		else if(strcmp(sql_xchng_cd,"BFO") == 0)
		{
  		strcpy(c_inp_strng,"1^BSE^");
		}
		/*** Ver 1.5 Ends *****/

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"Initial c_inp_strng2 = :%s:",c_inp_strng2);
    }

    fn_spn_ltrim(c_inp_strng2,'|');
    /*sprintf(c_inp_strng,"1^%s",c_inp_strng2); ** ver 1.5 comment **/
    /*sprintf(c_inp_strng,"%s",c_inp_strng2);		** ver 1.5 **/
    strcat(c_inp_strng,c_inp_strng2);		/** ver 1.5 **/
    strcat(c_inp_strng,"\n");

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"c_inp_strng 2 = :%s:",c_inp_strng);
    }

    if ( Fchg32 (ptr_fml_Ibuf,FFO_REMARKS,0,(char *)c_inp_strng,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31270",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
    }

    i_returncode  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

    if( i_returncode != 0 )
    {
      fn_errlog( c_ServiceName, "S31275",TPMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

 		if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng2,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31280",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    fn_spn_ltrim(c_op_strng2,'1');
    fn_spn_ltrim(c_op_strng2,'^');

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Output String 2 Is :%s:",c_op_strng2);
    }

    /*** Ver 2.6  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn2,
                                    &d_bnov2,
                                    &d_total_bmrgn2,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31285",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn2 :%lf: d_bnov2:%lf: d_total_bmrgn2:%lf:",d_spn_bmrgn2,d_bnov2,d_total_bmrgn2);
    }
    /*** Ver 2.6  Ends here ***/


  }
  else
  {
    /*** Ver 1.1 Ends here ***/
		strcpy(c_inp_strng,c_inp_strng1);
  	strcat(c_inp_strng,c_inp_strng2);
  	strcat(c_inp_strng,"\n");
	
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before adding FMLs.");
		}

  	if ( Fadd32 (ptr_fml_Ibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)  ==  -1 )
  	{
    	fn_errlog( c_ServiceName, "S31290",FMLMSG , c_err_msg );
    	EXEC SQL CLOSE :sys_cursor;
    	tpfree((char *)ptr_fml_Obuf);
    	tpfree((char *)ptr_fml_Ibuf);
    	return -1;
  	}
	
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"adding string to FMLs.");
		}

		if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
  	{
    	fn_errlog( c_ServiceName, "S31295",FMLMSG , c_err_msg );
    	EXEC SQL CLOSE :sys_cursor;
    	tpfree((char *)ptr_fml_Obuf);
    	tpfree((char *)ptr_fml_Ibuf);
    	return -1;
  	}

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}

  	fn_cpy_ddr ( ptr_st_pstn_actn->c_rout_crt );

  	i_rtrn_cd1  = tpcall ( "SFO_SPAN_MRGN",
												 (char*)ptr_fml_Ibuf,
 														0,
												 (char **)&ptr_fml_Obuf,
												 &li_len_tobuf,0 );

  	if( i_rtrn_cd1 != 0 )
  	{
    	fn_errlog( c_ServiceName, "S31300",TPMSG , c_err_msg );
    	EXEC SQL CLOSE :sys_cursor;
    	tpfree((char *)ptr_fml_Obuf);
    	tpfree((char *)ptr_fml_Ibuf);
    	return -1;
  	}
	
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"After Margin Calculation.");
		}

  	if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng,0)  ==  -1 )
  	{
    	fn_errlog( c_ServiceName, "S31305",FMLMSG , c_err_msg );
    	EXEC SQL CLOSE :sys_cursor;
    	tpfree((char *)ptr_fml_Obuf);
    	tpfree((char *)ptr_fml_Ibuf);
    	return -1;
  	}

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Output String Is :%s:",c_op_strng);
		}

  	strcpy(c_op_strng1,strtok(c_op_strng,"|"));
  	strcpy(c_op_strng2,strtok(null_ptr,"|"));

    /*** Ver 2.6  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31310",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 2.6  Ends here ***/


	} /*** Ver 1.1 ***/

	strcpy(c_mrgn_indctr,strtok(c_op_strng1,"^"));
  strcpy(c_xchng_cd1,strtok(null_ptr,"^"));					/*** Ver 1.5 ***/
  strcpy(c_seq_num1,strtok(null_ptr,"^"));
  strcpy(c_mtch_accnt1,strtok(null_ptr,"^"));
  strcpy(c_spn_mrgn1,strtok(null_ptr,"^"));
  strcpy(c_nov1,strtok(null_ptr,"^"));
  strcpy(c_total_mrgn1,strtok(null_ptr,"^"));

  if (i_cntrct_cnt > 10)														/** Ver 1.8 if condition added **/
	{
  	strcpy(c_xchng_cd2,strtok(c_op_strng2,"^"));					/*** Ver 1.5 ***/
  	/*strcpy(c_seq_num2,strtok(c_op_strng2,"^"));					*** Ver 1.5 comment **/
  	strcpy(c_seq_num2,strtok(null_ptr,"^"));						  /*** Ver 1.5 ***/
	}
	else																						  /** ver 1.8 else condition ***/
	{
  	strcpy(c_seq_num2,strtok(c_op_strng2,"^"));
	}
  strcpy(c_mtch_accnt2,strtok(null_ptr,"^"));
  strcpy(c_spn_mrgn2,strtok(null_ptr,"^"));
  strcpy(c_nov2,strtok(null_ptr,"^"));
  strcpy(c_total_mrgn2,strtok(null_ptr,"^"));

  if(DEBUG_MSG_LVL_3)																/*** ver 1.8 Userlog Added ***/
  {
    fn_userlog(c_ServiceName,"SPAN c_mtch_accnt1 Is :%s:",c_mtch_accnt1);
    fn_userlog(c_ServiceName,"SPAN c_mtch_accnt2 Is :%s:",c_mtch_accnt2);
    fn_userlog(c_ServiceName,"SPAN c_xchng_cd2 Is :%s:",c_xchng_cd2); 
    fn_userlog(c_ServiceName,"SPAN c_seq_num2 Is :%s:",c_seq_num2);  
    fn_userlog(c_ServiceName,"SPAN c_spn_mrgn2 Is :%s:",c_spn_mrgn2);
    fn_userlog(c_ServiceName,"SPAN c_nov2 Is :%s:",c_nov2);           
    fn_userlog(c_ServiceName,"SPAN c_total_mrgn2 Is :%s:",c_total_mrgn2); 
  }


  if ( c_mtch_accnt1[0] == '1' || c_mtch_accnt1[0] == '2' || c_mtch_accnt1[0] == '3' )  /*** Ver 1.1 ***/
  {
    fn_errlog( c_ServiceName, "S31315",LIBMSG , c_err_msg );
    fn_userlog(c_ServiceName,"Service Return Error.");
    EXEC SQL CLOSE :sys_cursor;
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return -1 ;
  }

  /*** Ver 2.6 Starts here ***/
  d_spn_bmrgn = fn_maxd(d_spn_bmrgn1,d_spn_bmrgn2) * 100;
  d_bnov      = fn_maxd(d_bnov1,d_bnov2) * 100;
  d_total_bmrgn = fn_maxd(d_total_bmrgn1,d_total_bmrgn2) * 100;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"d_spn_bmrgn :%lf: d_bnov :%lf: d_total_bmrgn:%lf:",d_spn_bmrgn,d_bnov,d_total_bmrgn);
  }
  /*** Ver 2.6 Ends here ***/

  d_spn_mrgn1   = atof(c_spn_mrgn1);
  d_spn_mrgn2   = atof(c_spn_mrgn2);
  d_nov1        = atof(c_nov1);
  d_nov2        = atof(c_nov2);
  d_total_mrgn1 = atof(c_total_mrgn1);
  d_total_mrgn2 = atof(c_total_mrgn2);

  st_undpstn_tobe.d_uspan_nenov_mrgn  = fn_maxl(d_spn_mrgn1,d_spn_mrgn2)  * 100;
  st_undpstn_tobe.d_net_optn_val      = fn_maxl(d_nov1,d_nov2)  * 100;
  st_undpstn_tobe.d_uspan_wenov_mrgn  = fn_maxl(d_total_mrgn1,d_total_mrgn2)  * 100;

  /*** Ver 2.6  Starts Here ***/
  st_undpstn_tobe.d_uspan_nenov_mrgn  = fn_maxd(st_undpstn_tobe.d_uspan_nenov_mrgn,d_spn_bmrgn);
  st_undpstn_tobe.d_net_optn_val = fn_maxd(st_undpstn_tobe.d_net_optn_val,d_bnov);
  st_undpstn_tobe.d_uspan_wenov_mrgn = fn_maxd(st_undpstn_tobe.d_uspan_wenov_mrgn,d_total_bmrgn);
  /*** Ver 2.6  Ends Here ***/

  d_spn_mrgn    = st_undpstn_tobe.d_uspan_nenov_mrgn  ;
  d_nov         = st_undpstn_tobe.d_net_optn_val      ;
  d_total_mrgn  = st_undpstn_tobe.d_uspan_wenov_mrgn  ;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Before Call Function For Margin Calculation.");
	}

  i_returncode  = fn_cal_mrgn ( c_ServiceName,
                                d_total_mrgn,
                                d_mltplr,
                                d_expsr,
                                d_min_expsr,
                                &d_min_mrgn,
                                &d_intl_mrgn,
 	                              c_err_msg
		                          );

  if ( i_returncode !=  0 )
  {
    fn_errlog( c_ServiceName, "S31320",LIBMSG , c_err_msg );
    fn_userlog(c_ServiceName,"Service Return Error.");
    EXEC SQL CLOSE :sys_cursor;
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return -1 ;
  }

	if ( DEBUG_MSG_LVL_0 )
	{
  	fn_userlog(c_ServiceName,"SPAN  - SPAN MARGIN IS :%lf:",d_spn_mrgn);
  	fn_userlog(c_ServiceName,"SPAN  - NOV IS :%lf:",d_nov);
  	fn_userlog(c_ServiceName,"SPAN  - Total Margin  IS :%lf:",d_total_mrgn);
  	fn_userlog(c_ServiceName,"SPAN  - Exposure  IS :%lf:",d_expsr);
  	fn_userlog(c_ServiceName,"SPAN  - Min. Margin IS :%lf:",d_min_mrgn);
  	fn_userlog(c_ServiceName,"SPAN  - Initial Margin IS :%lf:",d_intl_mrgn);
	}

	/* Type Casted by Mahesh for 1 paisa */

  st_undpstn_tobe.d_multpr            = d_mltplr      ;
  st_undpstn_tobe.d_eba_expr_mrgn     = ( long long )d_expsr;
  st_undpstn_tobe.d_min_mrgn          = d_min_mrgn;
  st_undpstn_tobe.d_reqd_initial_mrgn = ( long long )d_intl_mrgn;
  st_undpstn_tobe.d_ntnl_pl           = d_undrlyng_pl ;
  st_undpstn_tobe.d_span_wemult_mrgn  = ( long long )d_total_mrgn * d_mltplr ;
	
	/*** Need to be delete ***	
  switch ( ptr_st_pstn_actn->l_actn_typ )
  {
	
	 case  ORS_ORD_EXP: strcpy( c_narration_id , ON_EXPIRY);
                              c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
                              break;

   default: strcpy( c_err_msg, "Invalid action type");
             fn_userlog ( c_ServiceName,"Invalid action type");
             return -1;
             break;
  }
	*******/

	if (ptr_st_undpstn_tobe->d_initial_mrgn != 0)
	{
		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog( c_ServiceName, "Before fn_upd_spnlimits :ptr_st_undpstn_tobe->d_initial_mrgn Is :%lf:",ptr_st_undpstn_tobe->d_initial_mrgn);
		}

		c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT ;
    strcpy ( c_narration_id , REL_TRDMRGN_ORDER_EXPIRY );

		d_balance_amt  = 0.0;		/*** Ver 1.1 ***/

		i_returncode = fn_upd_spnlimits ( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      c_narration_id,
                                      c_dr_without_lmt_flg,
                                      ptr_st_undpstn_tobe->d_initial_mrgn,
                                      &d_balance_amt
                                    );
    if ( i_returncode != 0 )
    {
        fn_errlog( c_ServiceName, "S31325",LIBMSG , c_err_msg );
        EXEC SQL CLOSE :sys_cursor;
        tpfree((char *)ptr_fml_Obuf);
        tpfree((char *)ptr_fml_Ibuf);
        return -1;
    }
   }	

	/**** Commented in ver 1.3 There is no blocked PNL for pending orders and blocked PNL for
				Position will release and recalculated in EODMTMT process										********	

  EXEC SQL
      SELECT  NVL(FUS_BLCKD_PL,0)
      INTO    :d_oblckd_amnt
      FROM    FUS_FO_UNDRLYNG_SPN_PSTN
			WHERE   FUS_XCHNG_CD        = :c_xchng_cd           *** Ver 1.2 ***
      AND   	FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
      AND     FUS_UNDRLYNG        = :sql_undrlyng ;

  if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
  {
     fn_errlog( c_ServiceName, "S31330",SQLMSG , c_err_msg );
     EXEC SQL CLOSE :sys_cursor;
     tpfree((char *)ptr_fml_Obuf);
     tpfree((char *)ptr_fml_Ibuf);
     return -1;
  }
	

  if( d_oblckd_amnt != 0 )
  {
		c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT ;
	  strcpy ( c_narration_id, REL_BLKDLOSS_ORDER_EXPIRY );

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Before Call update limit.");
			fn_userlog( c_ServiceName, "Before fn_upd_spnlimits :d_oblckd_amnt Is :%lf:",d_oblckd_amnt);
		}

		d_balance_amt  = 0.0;		*** Ver 1.1 ***

    i_returncode = fn_upd_spnlimits ( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      c_narration_id,
                                      c_dr_without_lmt_flg,
                                      d_oblckd_amnt,
                                      &d_balance_amt
                                    );
    if ( i_returncode != 0 )
    {
       fn_errlog( c_ServiceName, "S31335",LIBMSG , c_err_msg );
       EXEC SQL CLOSE :sys_cursor;
       tpfree((char *)ptr_fml_Obuf);
       tpfree((char *)ptr_fml_Ibuf);
       return -1;
    }
  }
	**************** Ver 1.3 comment ends ****************************************************/

	if ( st_undpstn_tobe.d_span_wemult_mrgn != 0)
	{
		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog( c_ServiceName, "Before fn_upd_spnlimits :st_undpstn_tobe.d_span_wemult_mrgn Is :%lf:",st_undpstn_tobe.d_span_wemult_mrgn);
		}

		c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
		strcpy ( c_narration_id, BLK_SPAN_MRGN_ORDER_EXPIRY );

		d_balance_amt  = 0.0;		/*** Ver 1.1 ***/

		i_returncode = fn_upd_spnlimits ( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      c_narration_id,
                                      c_dr_without_lmt_flg,
                                      st_undpstn_tobe.d_span_wemult_mrgn * (-1),
                                      &d_balance_amt
                                    );
    if ( i_returncode != 0 )
    {
       fn_errlog( c_ServiceName, "S31340",LIBMSG , c_err_msg );
       EXEC SQL CLOSE :sys_cursor;
       tpfree((char *)ptr_fml_Obuf);
       tpfree((char *)ptr_fml_Ibuf);
       return -1;
    }

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog( c_ServiceName, "d_balance_amt is |%lf|",d_balance_amt);
		}
		st_undpstn_tobe.d_span_wemult_mrgn = st_undpstn_tobe.d_span_wemult_mrgn + d_balance_amt;
	 }	
	
	if(st_undpstn_tobe.d_eba_expr_mrgn != 0)
	{
		 strcpy ( c_narration_id, BLK_EXPR_MRGN_ORDER_EXPIRY  );
		 c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;

		 if(DEBUG_MSG_LVL_0)
		 {
			fn_userlog( c_ServiceName ,"Block Margin before fn_upd_spnlimits is |%lf|",st_undpstn_tobe.d_eba_expr_mrgn);
		 }

		 d_balance_amt  = 0.0;		/*** Ver 1.1 ***/

		 i_returncode = fn_upd_spnlimits ( c_ServiceName,
                                      ptr_st_pstn_actn,
                                      ptr_st_err_msg,
                                      c_narration_id,
                                      c_dr_without_lmt_flg,
                                      st_undpstn_tobe.d_eba_expr_mrgn * (-1),
                                      &d_balance_amt
                                    );
    if ( i_returncode != 0 )
    {
              fn_errlog( c_ServiceName, "S31345",LIBMSG , c_err_msg );
              EXEC SQL CLOSE :sys_cursor;
              tpfree((char *)ptr_fml_Obuf);
              tpfree((char *)ptr_fml_Ibuf);
              return -1;
    }
		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog( c_ServiceName, "d_balance_amt is |%lf|",d_balance_amt);	
		}
		st_undpstn_tobe.d_eba_expr_mrgn = st_undpstn_tobe.d_eba_expr_mrgn + d_balance_amt;
   }

	/** DISCUSS ***/
	ptr_st_undpstn_tobe->d_initial_mrgn = st_undpstn_tobe.d_span_wemult_mrgn + st_undpstn_tobe.d_eba_expr_mrgn;

	 /***** Commented in ver 1.3 ************
		
	 if ( d_undrlyng_pl < 0 )
   {
			c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
			strcpy ( c_narration_id, BLK_NOTIONAL_LOSS_ORDER_EXPIRY );
      
			if(DEBUG_MSG_LVL_0)
		  {
				fn_userlog( c_ServiceName ,"Profit Loss before fn_upd_spnlimits is |%lf|",d_undrlyng_pl);
			}

			d_balance_amt  = 0.0;		*** Ver 1.1 ***

			i_returncode = fn_upd_spnlimits( c_ServiceName,
                                       ptr_st_pstn_actn,
                                       ptr_st_err_msg,
                                       c_narration_id,
                                       DEBIT_TILL_LIMIT,
                                       d_undrlyng_pl,
                                       &d_balance_amt);

      if ( i_returncode != 0 )
      {
         fn_errlog( c_ServiceName, "S31350",LIBMSG , c_err_msg );
         EXEC SQL CLOSE :sys_cursor;
         tpfree((char *)ptr_fml_Obuf);
         tpfree((char *)ptr_fml_Ibuf);
         return -1;
      }

      st_undpstn_tobe.d_blckd_pl  = ( d_undrlyng_pl * (-1)) + d_balance_amt  ;

   }
   else
   {
		  if(DEBUG_MSG_LVL_0)
		  {
				fn_userlog(c_ServiceName,"SPAN - In PROFIT COndition" );
      }
			
			st_undpstn_tobe.d_blckd_pl  = 0 ;
      
			if(DEBUG_MSG_LVL_0)
		  {
				fn_userlog(c_ServiceName,"SPAN  - st_undpstn_tobe.d_blckd_pl Is :%lf:", st_undpstn_tobe.d_blckd_pl);
			}
   }
	 ******** ver 1.3 comment end **********************************************************/	

  /*** Ver 2.5 Starts here ***/
  i_returncode=fn_cal_premutilzed( c_ServiceName, ptr_st_pstn_actn);
  if( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31355",LIBMSG , c_err_msg);
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return -1;
  }


  /*** Ver 2.5 Ends Here ***/

		
	tpfree((char *)ptr_fml_Obuf);
	tpfree((char *)ptr_fml_Ibuf);

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"End of update span pos");
	}
	return 0;
}
