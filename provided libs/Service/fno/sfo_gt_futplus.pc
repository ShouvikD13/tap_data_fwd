/*******************************************************************************/
/*    Program             : SFO_GT_FUTPLUS                                     */
/*                                                                             */
/*    Input               : FFO_PRDCT_TYP                                      */
/*                          FFO_UNDRLYNG                                       */
/*                          FFO_CNTRCT_TAG                                     */
/*												  FFO_XCHNG_CD																		   */
/*												  FFO_EBA_MTCH_ACT_NO																 */
/*                                                                             */
/*    Output              :                                                    */
/*                                                                             */
/*    Description         : This service gets the futureplus records from EBA	 */
/*																																						 */
/*												GET_ALL_PSTN                  'A'										 */
/*												GET_UNDRLYNG_PSTN             'B'										 */
/*												GET_MATCH_PSTN                'C'										 */
/*												GET_MATCH_UNDRLYNG_PSTN       'D'										 */
/*												GET_TAG_PSTN                  'E'										 */
/*												GET_TAG_UNDRLYNG_PSTN         'F'										 */
/*												GET_TAG_MATCH_PSTN            'G'										 */
/*												GET_TAG_MATCH_UNDRLYNG_PSTN   'H'										 */
/*                                                                             */
/*    Log                 : 1.0   12-Mar-2008   Shailesh Hinge|Kunal Jadav     */
/*												: 1.1   25-Apr-2008		Sandeep Patil									 */
/*                                                                             */
/*******************************************************************************/
/*    1.0   -   New Release                                                    */
/*    1.1   -   IBM Migration Changes																					 */
/*******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fn_tuxlib.h>			 /*** Ver 1.1 ***/
#include <fn_read_debug_lvl.h>			/*** Ver 1.1 ***/

void print_qry1(char * str, int i_cnt,char * c_ServiceName);

void SFO_GT_FUTPLUS( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

	char c_ServiceName [ 33 ];
	char c_xchng_cd [ 4 ];
  char c_err_msg [ 256 ];
	char c_und_present='Y';
	char c_mtch_present='Y';
	char c_tag_present='Y';
	char c_tag[2];
	char c_rqst_typ;
	char c_prd_typ[2];
	char c_clm_mtch_accnt [11];
	char c_undrlyng [7];

	char sql_mtch_accnt [ 11 ];
  char sql_xchng_cd [ 4 ];
  char sql_prd_typ;
  char sql_indstk;
  char sql_undrlyng [ 7 ];
  char sql_cntrct_tag;

  int i_returncode;	
	int *ind_tag;

	EXEC SQL BEGIN DECLARE SECTION;
		varchar select_stmt[500];	
	EXEC SQL END DECLARE SECTION;

	ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );	

	INITDBGLVL(c_ServiceName);			/*** Ver 1.1 ***/

	i_returncode = fn_unpack_fmltovar( c_ServiceName,
                                     c_err_msg,
                                     ptr_fml_Ibuf,
                                     5,
                                     FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                                     FFO_PRDCT_TYP, ( char * )c_prd_typ, NULL,
                                     FFO_EBA_MTCH_ACT_NO, ( char * )c_clm_mtch_accnt, NULL,
                                     FFO_UNDRLYNG, ( char * )c_undrlyng, NULL,
																		 FFO_CNTRCT_TAG, ( char *)c_tag, NULL);

  if( i_returncode != 0 )
 	{
      fn_errlog( c_ServiceName, "S31005", LIBMSG , c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }
	
	
	if( strcmp(c_clm_mtch_accnt,"NONE") == 0 )
	{
		c_mtch_present = 'N';
	}

	if( strcmp(c_undrlyng,"NONE") == 0 )
	{
		c_und_present = 'N';
	}
	
  c_prd_typ[1]='\0';
	c_tag[1]='\0';
	
	if(strcmp(c_tag,"*") == 0 )
		c_tag_present='N';

	fn_userlog( c_ServiceName, "c_tag_present:%c:", c_tag_present);
	fn_userlog( c_ServiceName, "c_mtch_present:%c:", c_mtch_present);
	fn_userlog( c_ServiceName, "c_und_present:%c:", c_und_present);
	fn_userlog( c_ServiceName, "c_prd_typ:%s:", c_prd_typ);
	fn_userlog( c_ServiceName, "c_tag:%s:", c_tag);

	switch ( c_tag_present )
	{
		case 'N':
							switch ( c_mtch_present )
							{
								case 'N':
													switch ( c_und_present)
													{
														case 'N':
																			c_rqst_typ = GET_ALL_PSTN;
																			break;
														case 'Y':
																			c_rqst_typ = GET_UNDRLYNG_PSTN;
																			break;
														default:
																		  fn_userlog( c_ServiceName, "Error occurred :%s:", c_err_msg );
																			strcpy(c_err_msg,"Invalid reuest type");
																			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
																			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
													}
									break;
								case 'Y':
													switch ( c_und_present)
													{
														case 'N':
																			c_rqst_typ = GET_MATCH_PSTN;
																			break;
														case 'Y':
																			c_rqst_typ = GET_MATCH_UNDRLYNG_PSTN;
																			break;
														default:
																		  fn_userlog( c_ServiceName, "Error occurred :%s:", c_err_msg );
																			strcpy(c_err_msg,"Invalid reuest type");
																			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
																			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
													}
									break;
								default:
													fn_userlog( c_ServiceName, "Error occurred :%s:", c_err_msg );
													strcpy(c_err_msg,"Invalid reuest type");
													Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
													tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
							break;
	case 'Y':
							switch ( c_mtch_present )
							{
								case 'N':
													switch ( c_und_present)
													{
														case 'N':
																			c_rqst_typ = GET_TAG_PSTN;
																			break;
														case 'Y':
																			c_rqst_typ = GET_TAG_UNDRLYNG_PSTN;
																			break;
														default:
																		  fn_userlog( c_ServiceName, "Error occurred :%s:", c_err_msg );
																			strcpy(c_err_msg,"Invalid reuest type");
																			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
																			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
													}
									break;
								case 'Y':
													switch ( c_und_present)
													{
														case 'N':
																			c_rqst_typ = GET_TAG_MATCH_PSTN;
																			break;
														case 'Y':
																			c_rqst_typ = GET_TAG_MATCH_UNDRLYNG_PSTN;
																			break;
														default:
																		  fn_userlog( c_ServiceName, "Error occurred :%s:", c_err_msg );
																			strcpy(c_err_msg,"Invalid reuest type");
																			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
																			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
													}
									break;
								default:
													fn_userlog( c_ServiceName, "Error occurred :%s:", c_err_msg );
													strcpy(c_err_msg,"Invalid reuest type");
													Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
													tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
							break;

	default:
							fn_userlog( c_ServiceName, "Error occurred :%s:", c_err_msg );
							strcpy(c_err_msg,"Invalid reuest type");
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  if( DEBUG_MSG_LVL_3 )
	{
		fn_userlog( c_ServiceName, "c_undrlyng :%s:", c_undrlyng );
		fn_userlog( c_ServiceName, "c_clm_mtch_accnt :%s:", c_clm_mtch_accnt );
    fn_userlog( c_ServiceName, "c_xchng_cd :%s:", c_xchng_cd );
    fn_userlog( c_ServiceName, "c_prd_typ  :%s:", c_prd_typ );
    fn_userlog( c_ServiceName, "c_rqst_typ :%c:", c_rqst_typ );
  }

	if( c_rqst_typ == GET_ALL_PSTN )
  {
    strcpy ((char *)select_stmt.arr,"SELECT FUP_CLM_MTCH_ACCNT,FUP_XCHNG_CD,FUP_PRDCT_TYP,FUP_INDSTK,FUP_UNDRLYNG,FUP_CNTRCT_TAG FROM FUP_FUT_UNDRLYNG_PSTN WHERE FUP_XCHNG_CD = '");
    strcat((char *)select_stmt.arr, c_xchng_cd);
    strcat((char *)select_stmt.arr,"' AND FUP_PRDCT_TYP = '");
    strcat((char *)select_stmt.arr,c_prd_typ);
    strcat((char *)select_stmt.arr,"' AND FUP_UOPNPSTN_QTY != 0 ORDER BY FUP_UNDRLYNG");
  }
  else if( c_rqst_typ == GET_UNDRLYNG_PSTN)
  {
    strcpy ((char *)select_stmt.arr,"SELECT FUP_CLM_MTCH_ACCNT,FUP_XCHNG_CD,FUP_PRDCT_TYP,FUP_INDSTK,FUP_UNDRLYNG,FUP_CNTRCT_TAG FROM FUP_FUT_UNDRLYNG_PSTN WHERE FUP_PRDCT_TYP = '");
    strcat((char *)select_stmt.arr, c_prd_typ);
    strcat((char *)select_stmt.arr,"' AND FUP_XCHNG_CD = '");
    strcat((char *)select_stmt.arr,c_xchng_cd);
    strcat((char *)select_stmt.arr,"' AND FUP_UOPNPSTN_QTY != 0 AND FUP_UNDRLYNG in ('");
    strcat((char *)select_stmt.arr, c_undrlyng);
    strcat((char *)select_stmt.arr, "')");
    strcat((char *)select_stmt.arr, " ORDER BY FUP_UNDRLYNG");
  }
  else if( c_rqst_typ == GET_MATCH_PSTN)
  {
    strcpy ((char *)select_stmt.arr,"SELECT FUP_CLM_MTCH_ACCNT,FUP_XCHNG_CD,FUP_PRDCT_TYP,FUP_INDSTK,FUP_UNDRLYNG,FUP_CNTRCT_TAG FROM FUP_FUT_UNDRLYNG_PSTN WHERE FUP_PRDCT_TYP = '");
    strcat((char *)select_stmt.arr, c_prd_typ);
    strcat((char *)select_stmt.arr,"' AND FUP_XCHNG_CD = '");     
    strcat((char *)select_stmt.arr,c_xchng_cd);
    strcat((char *)select_stmt.arr,"' AND FUP_UOPNPSTN_QTY != 0");
    strcat((char *)select_stmt.arr, " AND FUP_CLM_MTCH_ACCNT in ('");
    strcat((char *)select_stmt.arr, c_clm_mtch_accnt);
    strcat((char *)select_stmt.arr, "')");
    strcat((char *)select_stmt.arr, " ORDER BY FUP_UNDRLYNG");
  }
  else if( c_rqst_typ == GET_MATCH_UNDRLYNG_PSTN)
  {
    strcpy ((char *)select_stmt.arr,"SELECT FUP_CLM_MTCH_ACCNT,FUP_XCHNG_CD,FUP_PRDCT_TYP,FUP_INDSTK,FUP_UNDRLYNG,FUP_CNTRCT_TAG FROM FUP_FUT_UNDRLYNG_PSTN WHERE FUP_PRDCT_TYP = '");
    strcat((char *)select_stmt.arr, c_prd_typ);
    strcat((char *)select_stmt.arr,"' AND FUP_XCHNG_CD = '");     
    strcat((char *)select_stmt.arr,c_xchng_cd);
    strcat((char *)select_stmt.arr,"' AND FUP_UOPNPSTN_QTY != 0 AND FUP_UNDRLYNG in ('");
    strcat((char *)select_stmt.arr, c_undrlyng);
    strcat((char *)select_stmt.arr, "') AND FUP_CLM_MTCH_ACCNT in ('");
    strcat((char *)select_stmt.arr, c_clm_mtch_accnt);
    strcat((char *)select_stmt.arr, "')");
    strcat((char *)select_stmt.arr, " ORDER BY FUP_UNDRLYNG");
  }
  else if( c_rqst_typ == GET_TAG_PSTN)
  {
    strcpy ((char *)select_stmt.arr,"SELECT FUP_CLM_MTCH_ACCNT,FUP_XCHNG_CD,FUP_PRDCT_TYP,FUP_INDSTK,FUP_UNDRLYNG,FUP_CNTRCT_TAG FROM FUP_FUT_UNDRLYNG_PSTN WHERE FUP_PRDCT_TYP = '");
    strcat((char *)select_stmt.arr, c_prd_typ);
    strcat((char *)select_stmt.arr,"' AND FUP_XCHNG_CD = '");
    strcat((char *)select_stmt.arr,c_xchng_cd);
    strcat((char *)select_stmt.arr,"' AND FUP_UOPNPSTN_QTY != 0 ");
		strcat((char *)select_stmt.arr," AND FUP_CNTRCT_TAG = '");
    strcat((char *)select_stmt.arr,c_tag);
    strcat((char *)select_stmt.arr, "' ORDER BY FUP_UNDRLYNG");
  }
  else if( c_rqst_typ == GET_TAG_UNDRLYNG_PSTN)
  {
    strcpy ((char *)select_stmt.arr,"SELECT FUP_CLM_MTCH_ACCNT,FUP_XCHNG_CD,FUP_PRDCT_TYP,FUP_INDSTK,FUP_UNDRLYNG,FUP_CNTRCT_TAG FROM FUP_FUT_UNDRLYNG_PSTN WHERE FUP_PRDCT_TYP = '");
    strcat((char *)select_stmt.arr, c_prd_typ);
    strcat((char *)select_stmt.arr,"' AND FUP_XCHNG_CD = '");
    strcat((char *)select_stmt.arr,c_xchng_cd);
    strcat((char *)select_stmt.arr,"' AND FUP_UOPNPSTN_QTY != 0 AND FUP_UNDRLYNG in ('");
    strcat((char *)select_stmt.arr, c_undrlyng);
    strcat((char *)select_stmt.arr, "')");
		strcat((char *)select_stmt.arr," AND FUP_CNTRCT_TAG = '");
    strcat((char *)select_stmt.arr,c_tag);
    strcat((char *)select_stmt.arr, "' ORDER BY FUP_UNDRLYNG");
  }
  else if( c_rqst_typ == GET_TAG_MATCH_PSTN)
  {
    strcpy ((char *)select_stmt.arr,"SELECT FUP_CLM_MTCH_ACCNT,FUP_XCHNG_CD,FUP_PRDCT_TYP,FUP_INDSTK,FUP_UNDRLYNG,FUP_CNTRCT_TAG FROM FUP_FUT_UNDRLYNG_PSTN WHERE FUP_PRDCT_TYP = '");
    strcat((char *)select_stmt.arr, c_prd_typ);
    strcat((char *)select_stmt.arr,"' AND FUP_XCHNG_CD = '");   
    strcat((char *)select_stmt.arr,c_xchng_cd);
    strcat((char *)select_stmt.arr,"' AND FUP_UOPNPSTN_QTY != 0 ");
    strcat((char *)select_stmt.arr, " AND FUP_CLM_MTCH_ACCNT in ('");
    strcat((char *)select_stmt.arr, c_clm_mtch_accnt);
    strcat((char *)select_stmt.arr, "')");
		strcat((char *)select_stmt.arr," AND FUP_CNTRCT_TAG = '");
    strcat((char *)select_stmt.arr,c_tag);
    strcat((char *)select_stmt.arr, "' ORDER BY FUP_UNDRLYNG");
  }
  else if( c_rqst_typ == GET_TAG_MATCH_UNDRLYNG_PSTN)
  {
    strcpy ((char *)select_stmt.arr,"SELECT FUP_CLM_MTCH_ACCNT,FUP_XCHNG_CD,FUP_PRDCT_TYP,FUP_INDSTK,FUP_UNDRLYNG,FUP_CNTRCT_TAG FROM FUP_FUT_UNDRLYNG_PSTN WHERE FUP_PRDCT_TYP = '");
    strcat((char *)select_stmt.arr, c_prd_typ);
    strcat((char *)select_stmt.arr,"' AND FUP_XCHNG_CD = '");     
    strcat((char *)select_stmt.arr,c_xchng_cd);
    strcat((char *)select_stmt.arr,"' AND FUP_UOPNPSTN_QTY != 0 AND FUP_UNDRLYNG in ('");
    strcat((char *)select_stmt.arr, c_undrlyng);
    strcat((char *)select_stmt.arr, "') AND FUP_CLM_MTCH_ACCNT in ('");
    strcat((char *)select_stmt.arr, c_clm_mtch_accnt);
    strcat((char *)select_stmt.arr, "')");
		strcat((char *)select_stmt.arr,"AND FUP_CNTRCT_TAG = '");
    strcat((char *)select_stmt.arr,c_tag);
    strcat((char *)select_stmt.arr, "' ORDER BY FUP_UNDRLYNG");
  }
	else
	{
		strcpy( c_err_msg, "Invalid request type"); 
		fn_errlog( c_ServiceName, "S31010", DEFMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	select_stmt.len = strlen((char *)select_stmt.arr);	

	print_qry1((char*)select_stmt.arr,select_stmt.len,c_ServiceName);	

	EXEC SQL PREPARE sql_stmt FROM :select_stmt;
  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  ptr_fml_Obuf = NULL;

	EXEC SQL DECLARE cur_dyn CURSOR FOR sql_stmt;

  EXEC SQL OPEN cur_dyn ;
  if(SQLCODE != 0)
  {
    fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg );
    tpfree ( ( char * ) ptr_fml_Obuf );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  for (;;)
  {
    EXEC SQL FETCH cur_dyn
             INTO :sql_mtch_accnt,
                  :sql_xchng_cd,
                  :sql_prd_typ,
                  :sql_indstk,
                  :sql_undrlyng,
                  :sql_cntrct_tag;

    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        break;
      }
      fn_errlog( c_ServiceName, "S31025", SQLMSG, c_err_msg );
      tpfree ( ( char * ) ptr_fml_Obuf );
      EXEC SQL CLOSE cur_dyn;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    i_returncode = fn_pack_vartofml( c_ServiceName,
                                     c_err_msg,
                                     &ptr_fml_Obuf,
                                     6,
                                 		 FFO_EBA_MTCH_ACT_NO, ( char * )sql_mtch_accnt,
                                 		 FFO_XCHNG_CD, ( char * )sql_xchng_cd,
                                 		 FFO_PRDCT_TYP, ( char * )&sql_prd_typ,
                                 		 FFO_CTGRY_INDSTK, ( char * )&sql_indstk,
                                 		 FFO_UNDRLYNG, ( char * )sql_undrlyng,
                                 		 FFO_CNTRCT_TAG, ( char * )&sql_cntrct_tag );

    if( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg );
      EXEC SQL CLOSE cur_dyn;
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  EXEC SQL CLOSE cur_dyn;

  tpreturn(TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );	
	
}
void print_qry1(char * str, int i_cnt,char * c_ServiceName)
{
  int idx;
  char c_tmp_str1[100];

  MEMSET(c_tmp_str1);
	if( DEBUG_MSG_LVL_3 )	
	{
  	fn_userlog(c_ServiceName,"Printing query");
	}

  for (idx = 0;idx < i_cnt; idx += 60)
  {
    strncpy(c_tmp_str1,str + idx,60);
    fn_userlog(c_ServiceName,"%s",c_tmp_str1);
  }

	if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog(c_ServiceName,"Finished printing query");
	}
}

