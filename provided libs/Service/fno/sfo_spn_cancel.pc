/********************************************************************************************************/
/*  Program             : SFO_SPN_CANCEL	                                                              */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*                                                                                                      */
/*  Log                 : 1.0     03-Mar-2011     																											*/
/*                   		: 1.4     18-Jun-2012     																											*/
/*                   		: 1.5     19-Jul-2012     																											*/
/*                      : 1.6     09-Oct-2012                                                           */
/*                      : 1.7     05-Nov-2012                                                           */
/*                      : 1.8     29-Nov-2012                                                           */
/*                      : 1.9     12-Dec-2012                                                           */
/*                      : 2.0     20-Dec-2012                                                           */
/*                      : 2.1     05-Feb-2013                                                           */
/*                      : 2.2     31-May-2013                                                           */
/*                      : 2.3     08-May-2013                                                           */
/*                      : 2.4     18-Jun-2013                                                           */
/*                      : 2.5     11-Jul-2013                                                           */
/*                      : 2.6     16-Sep-2013                                                           */
/*                      : 2.7     03-Apr-2014                                                           */
/*                      : 2.8     23-Dec-2013                                                           */
/*                      : 2.9     12-Mar-2014                                                           */ 
/*                      : 3.0     08-Nov-2013                                                           */
/*                      : 3.1     09-Sep-2014                                                           */
/*                      : 3.2     29-Jun-2015                                                           */
/*                      : 3.3     06-Aug-2015 																													*/
/*                      : 3.4     05-Oct-2015                                                           */
/*                      : 3.7     03-Mar-2016                                                           */
/*                      : 3.8     16-Mar-2016                                                           */
/*                      : 3.9     29-Jun-2016                                                           */
/*                      : 4.0     31-Aug-2016                                                           */
/*                      : 4.3     03-Dec-2016                                                           */
/*                      : 4.4     31-Oct-2017                                                           */
/*                      : 4.5     16-Oct-2017                                                           */
/*                      : 4.6     05-Dec-2017                                                           */
/*											: VQC			06-Dec-2017																													  */
/*                      : 4.7     27-Feb-2018                                                           */
/*                      : 4.8     13-Jun-2018                                                           */
/*                      : 4.9     11-Jul-2018																														*/
/*											: 5.0     10-Apr-2019																														*/    
/*											: 5.1			13-May-2019																														*/
/*                      : 5.2     21-May-2019                                                           */
/*                      : 5.3     30-Jul-2019                                                           */
/*                      : 5.4     09-Aug-2019                                                           */
/*                      : 5.5     16-Oct-2019                                                           */
/*                      : 5.6     13-Nov-2019                                                           */
/*                      : 5.7     24-Oct-2019                                                           */
/*                      : 5.8     19-Jul-2020                                                           */
/*                      : 5.9     09-Oct-2020                                                           */
/*                      : 6.0     19-Sep-2020                                                           */
/*                      : 6.1     21-Dec-2020                                                           */
/*                      : 6.2     02-Feb-2021                                                           */
/*                      : 6.3     03-Oct-2021                                                           */
/*											: 6.4			16-May-2022																														*/
/*											: 6.5			14-Jul-2022																														*/
/*                      : 6.6     26-Sep-2022                                                           */
/*                      : 6.7     07-Mar-2023                                                            */
/*                      : 6.8     21-Sep-2022                                                           */
/*                      : 6.9     13-Apr-2023                                                           */
/********************************************************************************************************/
/*                                                                                                      */
/*  1.0   -   New Release                                                                               */
/*  1.1   -   NVL in FTQ fetch, Balance Amt initialization and MEMSET - 30-Mar-2012  (Navina D.)        */
/*        -   Bug Fix For Decimal Strike Prices                                                         */
/*  1.2   -   Changes for Reports   Mahesh Shinde                                                       */
/*  1.3   -   Exchange Code Handling  - 21-May-2012  (Navina D.)                                        */
/*  1.4   -   MEMSET Global and local structures |Mahesh                                                */
/*  1.5   -   Storing ip address in Exchange book (Navina D.)                                           */
/*  1.6   -   Get exchange remarks for system placed cancellation (Navina D.)                           */
/*  1.7   -   CR- Overnight Orders Changes (Swati A.B )                                                 */
/*  1.8   -   FNO BSE SPAN Changes         (Sandip Tambe)                                               */
/*  1.9   -   SLTP FuturePLUS (Navina D.)                                                               */
/*  2.0   -   Broker closeout changes (Mahesh Shinde)                                                   */
/*  2.1   -   Changes for SPAN in RIA   (Vishnu/ Bhushan)                                               */
/*  2.2   -   Restrict DBC mapped customer to cancel order if CLM_TRD_FLG = 'N' (Bhushan)               */
/*  2.3   -   Balance amount bug fix (Navina D.)                                                        */
/*  2.4   -   SPAN Output String fix (Sandip T.)                                                        */
/*  2.5   -   SPAN NDF handling in case of FTQ (SH)                                                     */
/*  2.6   -   OptionPLUS Changes (Swati A.B )                                                           */
/*  2.7   -   FDR Module Changes (Sachin Birje)                                                         */
/*  2.8   -   FNO VTC Changes  (Sachin Birje)                                                           */
/*  2.9   -   Pre-square off report changes (Swati A.B)                                                 */
/*  3.0   -   FNO Limit Logging Change (Swati A.B )                                                     */
/*  3.1   -   View to FML Changes (Samip M)                                                             */
/*  3.2   -   Contract master & Trade Quote merger Changes (Ritesh Deolekar) 														*/		
/*  3.3   -   Market to Limit future plus sltp (Bhupendra Malik) 																				*/ 
/*  3.4   -   Market to Limit Option Plus (Bhupendra Malik)                                             */
/*  3.7   -   Check to restrict the cancellation of Invalid combination of                              */
/*            Order Reference and Match Account (Ritesh Deolekar)                                       */
/*  3.8   -   Transaction Flag in Check Session IP                                                      */
/*  3.9   -   Check Session ip common function changes (Navina D.)                                      */
/*  4.0   -   My Eos Changes(Bhupendra M)                                                               */
/*  4.3   -   Transaction through IP for SLTP Futureplus and Option plus                                */
/*	4.4		-		Hard Parse Changes	(	Sandeep Patil )																											*/
/*  4.5   -   Stop VTC feature(Tanmay Patel)                                                            */
/*  4.6   -   FML with data type char used instead of long for storing wrapper flag                     */
/*  4.7   -   Rollover with spread changes ( Suchita Dabir )                                            */
/*  VQC   -   VQC changes(Varadraj Gramopadhye)                                                         */  
/*  4.8   -   Removing concatination of earlier remarks for core fix (Navina D.)                        */
/*  4.9   -   Physical Settlement of stock derivative changes ( Suchita Dabir )													*/
/*	5.0		-		CR-ISEC14-121803:Logic to cosider limit for fresh future order,														*/
/*						if existing position in loss (Bhushan Harekar)																						*/
/*	5.1 	-		EOS enhancements for Physical settlement in F&O Changes	( Parag Kanojia )									*/
/*  5.2   -   Updating the executed quantity to 0 ( Suchita Dabir )                                     */
/*  5.3   -   Negative ammount asked for modify allocation page (Mrinal Kishore)                        */
/*  5.4   -   Physical delivery margin changes ( Kiran Itkar )                                          */
/*  5.5   -   Input string size change CR-ISEC14-128972 ( Tanmay )                                      */
/*  5.6   -   CR-ISEC18-127640 Sub-broker dual order placement changes (Anand Dhopte)                   */
/*  5.7   -   Ipv6 Format (Tanmay Patel)                                                                */
/*  5.8   -   VQC for core fix ( Anuj Pancholi )                                                        */ 
/*  5.9   -   core fix (Navina D.)                                                                      */ 
/*  6.0   -   Trigger Price Changes ( Suchita D )                                                       */
/*  6.1   -   Allowing cancellations in case of insufficient limits ( Suchita Dabir )                   */
/*  6.2   -   Separate EOS for Stock and Index Underlyings in FPSL ( Kiran Itkar )                      */
/*  6.3   -   Profit order  in FPSL ( Navina D.)                                                        */
/*  6.4   -   CR-ISEC14-170192 Allowing customers to use Options premium for Fresh Option buy ( Suchita Dabir ) **/
/*  6.5   -   SPAN_BOD_MRGN_CR-ISEC14-172812(Sachin Birje  )                                           **/
/*  6.6   -   CR-ISEC18-175354_ Unique Device Identifiers(Bhavana)                                     ***/
/*  6.7   -   Changes for Client level lock (Samip M)                                                   */
/*  6.8   -   CR-ISEC14-162075 Sam in Currency & Commodity (Tanmay Patel)                               */
/*  6.9   -   Margin reporting regulatory changes: Dipin                                                */
/********************************************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h> 
/* #include <fn_pos.h>  VQC*/ 
#include <eba_to_ors.h> 
/* #include <fml_def.h>  VQC */ 
#include <fo_fml_def.h> 
/** #include <fo_view_def.h> **/  /** Commented for Ver 3.1 **/
#include <fn_session.h> 
#include <fn_tuxlib.h>
#include <fn_ddr.h> 
#include <fn_log.h>             
#include <fn_val_ord.h>        
#include <fml_rout.h>        
#include <fn_read_debug_lvl.h> 
#include <fn_span_lib.h>  
#include <math.h> 
#include <fo_view_def.h> /*** Ver 3.9 ***/
#define PHYDLVRY_MTM -7       /*** Ver 5.4 ***/ 
#define ROLLOVER_WITH_SPREAD 'O'  /* Ver 4.7 ***/

int fn_check_ord_spn( char *c_ServiceName,
                  		struct st_orderbook *ptr_o_st_ordbook,
                  		char *c_fum_mrkt_typ,              
                  		char *c_fcm_mrkt_typ,             
                  		struct st_err_msg *ptr_st_err_msg
				 						);

int fn_cal_can_pos  ( char  *c_ServiceName,
                      char  *c_err_msg,
                      struct st_pstn_actn *ptr_st_pstn_actn
                    );

int fn_call_canspn_actn ( char *c_ServiceName,
                       		char *c_pipe_id,
                          struct st_pstn_actn *ptr_st_pstn_actn,
                          struct st_fus_undrlyng_pstn *ptr_st_undpstn_crrnt,
                          struct st_fus_undrlyng_pstn *ptr_st_undfut_pos_to_be,
                          struct st_err_msg *ptr_st_err_msg
												);



struct st_pstn_actn *ptr_st_pstn_actn;
struct st_fus_undrlyng_pstn st_undpstn_crrnt;
struct st_fus_undrlyng_pstn st_undpstn_tobe;  
/* struct st_fus_undrlyng_pstn st_undrlyng_pstn;  VQC */
struct st_fcp_cntrct_pstn st_cntrct_pstn;
struct st_usr_prfl  st_usrprfl;
struct st_err_msg *ptr_st_err_msg;

char c_pipe_id[3] ="\0"; /*** ver 5.8 VQC ***/
char c_user_id[16] ="\0"; /*** ver 5.8 VQC ***/
char c_mtm_flag ='\0';  /*** ver 5.8 VQC ***/
char c_channel[4] ="\0"; /*** ver 5.8 VQC ***/

long l_ssn_id=0;  /* variable initialised in  VQC */

int i_actn_id= -1;    /** Ver 2.1 **/

char c_g_fc_flg='\0'; /** ver 6.1 **/

double  d_mltplr      = 0.0; 
double  d_spn_mrgn    = 0.0;
double  d_nov         = 0.0;
double  d_total_mrgn  = 0.0;
double  d_intl_mrgn		= 0.0; 
double  d_min_mrgn		= 0.0; 
double  d_blkd_prmum  = 0.0;
double  d_opt_prmum   = 0.0;
double  d_total_prmum	=	0.0;
double  d_expsr				=	0.0;
double  d_undrlyng_pl = 0.0;
double  d_blckd_pnl   = 0.0;
double  d_oblckd_amnt = 0.0;
double  d_required_amount=0.0;  /** Ver 3.0 **/

FILE  *fp ;


void SFO_SPN_CANCEL( TPSVCINFO *rqst )
{

	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Obuf;
	FBFR32 *ptr_fml_Sbuf;
	FBFR32 *ptr_fml_Rbuf;

  char c_ServiceName[33] ="\0";   /*** ver 5.8 VQC ***/ 
  char c_bp_id[9] ="\0";          /*** ver 5.8 VQC ***/
  char c_alias[9] ="\0";          /*** ver 5.8 VQC ***/
  char c_err_msg[256] ="\0";      /*** ver 5.8 VQC ***/   
/*char c_err_msg1[256]; VQC */  
/*char c_can_req;   VQC **/
/*char c_can_sqr_off;   VQC */
  char c_psswd_req_flg='\0';  /* variable initialised in  VQC */
  char c_xchng_remarks[257] ="\0";     /*** ver 5.8 VQC ***/
  char c_fno_dmn_nm [ 16 ] ="\0";      /*** ver 5.8 VQC ***/
  char c_fno_trg_nm [ 16 ] ="\0";      /*** ver 5.8 VQC ***/
  char c_fno_trg_dat [ 256 ] ="\0";    /*** ver 5.8 VQC ***/
/*char c_roll_stts;   VQC */  
  char c_sys_msg[11] = "\0";    /*** ver 4.0 **/
  char c_fum_mrkt_typ='\0';  /* variable initialised in VQC */  
  char c_fcm_mrkt_typ='\0';  /* variable initialised in VQC */ 
	char c_ip_address[45+1]="\0";	/** Changed to 45 from 15 in Ver 5.7 **/ /* Ver 1.5 */
	char c_mtm_eos = '\0';			/* Ver 2.9 */
	char c_request_typ = 'C';			/* Ver 2.0 */
  char c_mtm_op_eos = '\0';     /* Ver 2.6 */
  char c_actn_flg = '\0';       /* Ver 3.0 */
/*char c_ordr_stts='\0';        * Ver 3.3 *   VQC */
  char c_tag_ordr_stts ='\0';   /* Ver 3.3 */
/*char c_tag_ordr_ref[19];      * ver 3.3 *   VQC */
  char c_check_flag='\0';       /* Ver 3.3 */
  char c_txn_flg='Y';             /*** Ver 3.8 ***/
  char c_exg_mkt_typ_d = 'D';     /*** Ver 4.4 ***/
  
	varchar c_usr_usr_psswrd[50];
  varchar c_trd_dt[LEN_DATE];
  varchar c_sys_dt[LEN_DATE];

  int i_returncode=0;    /* variable initialised in  VQC */
  int i_trnsctn=0;       /* variable initialised in  VQC */
  int i_err[7]  ={0};    /*** initialized in ver 5.8 ***  size is changed from 16 to 7 in VQC */
  int i_ferr[7] ={0};    /*** initialized in ver 5.8 ***  size is changed from 16 to 7 in  VQC */
/*int i_counter = 1;    VQC */
  int i_mtm_flg = 0;    
	int	i_rtrn_cd=0;  /* variable initialised in VQC */
	int	i_rtrn_xchngbk=0;  /* variable initialised in  VQC */
  int i_level_exists =0;
	int i_usrprfl[4]     ={0};     /** initialized in ver 5.8 **/
  int i_usrprflerr[4]  ={0};     /** initialized in ver 5.8 **/
 	int i_xchngbk[15]    ={0};		 /** initialized in ver 5.8 **  Changed from 14 to 15 in Ver 1.6 ***/
  int i_xchngbkerr[15] ={0};	   /*** initialized in ver 5.8 ** Changed from 14 to 15 in Ver 1.6 ***/
  int i=0;  /* variable initialised in  VQC */
	int	j=0;  /* variable initialised in  VQC */
  int i_is_dbc_cust = 0;            /***  Ver 2.2 ***/
  char c_nkd_blkd_flg='\0'; /** ver 6.3 **/

  long  l_xchng_seq_num = 0;
/*long	l_ip_len        = 0;   VQC */ 
/*long	l_op_len        = 0;   VQC */	
	long	l_recvbuf				=	0;

  /*** ver 4.9 starts ***/
  char c_dlvry_pos_allwd = 'Y';
  char c_setlmnt_flg = 'C';
  char c_dlvry_eos_flg = 'N';
  /*** ver 4.9 ends ***/
 
  /** ver 5.8 VQC Starts **/ 
  MEMSET(c_usr_usr_psswrd);
  MEMSET(c_trd_dt);
  MEMSET(c_sys_dt);
  /** ver 5.8 VQC Starts **/

	/***** Ver 1.4 MEMSET all global structure ****/
  MEMSET (ptr_st_pstn_actn);
  MEMSET (st_undpstn_crrnt);
  MEMSET (st_undpstn_tobe);
/*MEMSET (st_undrlyng_pstn);  VQC */
  MEMSET (st_cntrct_pstn);
  MEMSET (st_usrprfl);
  MEMSET (ptr_st_err_msg);
  /***** Ver 1.4  ****/

/*MEMSET(c_tag_ordr_ref); ** Ver 3.3 ** VQC */

  struct st_orderbook st_i_ordbk;
  struct st_orderbook st_o_ordbk;
  struct st_xchngbook st_xchngbk;
/*struct st_xchngbook st_s_xchngbk;   VQC */
  struct st_sequence  st_s_sequence;
/*struct st_sequence  st_r_sequence;  VQC */
  struct st_pstn_actn st_pstn_actn;
  struct st_err_msg   st_err_msg;
  struct st_contract st_cntrct;					/*** Ver 2.0 ***/
	struct vw_usr_prfl st_usrprfl_vw; /*** Ver 3.9 ***/
  struct vw_err_msg st_err_msg_vw;		 /*** Ver 3.9 ***/

	/***** Ver 1.4 MEMSET all local structure ****/
  MEMSET (st_i_ordbk);
  MEMSET (st_o_ordbk);
  MEMSET (st_xchngbk); 
/*MEMSET (st_s_xchngbk);	VQC */
  MEMSET (st_s_sequence);
/*MEMSET (st_r_sequence); VQC */
  MEMSET (st_pstn_actn);
  MEMSET (st_err_msg);
  /***** Ver 1.4  ****/
  MEMSET(st_cntrct); /* added in  VQC */
	MEMSET(st_usrprfl_vw);	 /*** Ver 3.9 ***/
	MEMSET(st_err_msg_vw);	  /*** Ver 3.9 ***/
  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
  INITDBGLVL(c_ServiceName);        

	ptr_fml_Sbuf  = ( FBFR32 *)NULL;
  ptr_fml_Rbuf  = ( FBFR32 *)NULL;

	i_usrprfl     [ 0 ] = Fget32( ptr_fml_Ibuf ,FFO_USR_ID,0,(char *) st_usrprfl.c_user_id,0);
  i_usrprflerr  [ 0 ] = Ferror32;
  i_usrprfl     [ 1 ] = Fget32( ptr_fml_Ibuf ,FFO_SSSN_ID,0,(char *) &st_usrprfl.l_session_id,0);
  i_usrprflerr  [ 1 ] = Ferror32;
  i_usrprfl     [ 2 ] = Fget32( ptr_fml_Ibuf ,FFO_EBA_MTCH_ACT_NO,0,(char *) st_usrprfl.c_cln_mtch_accnt,0);
  i_usrprflerr  [ 2 ] = Ferror32;
  i_usrprfl     [ 3 ] = Fget32( ptr_fml_Ibuf ,FFO_CHANNEL,0,(char *) c_channel,0);		/*** Added on 27-Jan-2012 by Navina ***/
  i_usrprflerr  [ 3 ] = Ferror32;

  for ( i=0 ; i < 4  ; i++ )
  {
    if ( i_usrprfl [ i ] == -1 && i_usrprflerr [ i ] !=  FNOTPRES )
    {
      fn_userlog( c_ServiceName, "Error in :%d:",i );
      fn_errlog( c_ServiceName, "S31005", Fstrerror32( i_usrprflerr [i]),c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
  }

    /**** Ver 6.3 Starts Here ****/

    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_MKT_TYP,0,(char *)&c_nkd_blkd_flg,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
        fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    /**** Ver 6.3 Ends here ****/


	MEMSET(st_xchngbk);  
	
  i_xchngbk     [ 0 ] = Fget32( ptr_fml_Ibuf ,FFO_XCHNG_CD,0,(char *) st_xchngbk.c_xchng_cd,0);
  i_xchngbkerr  [ 0 ] = Ferror32;
  i_xchngbk     [ 1 ] = Fget32( ptr_fml_Ibuf ,FFO_PIPE_ID,0,(char *)  st_xchngbk.c_pipe_id,0);
  i_xchngbkerr  [ 1 ] = Ferror32;
  i_xchngbk     [ 2 ] = Fget32( ptr_fml_Ibuf ,FFO_MOD_TRD_DT,0,(char *) st_xchngbk.c_mod_trd_dt,0);
  i_xchngbkerr  [ 2 ] = Ferror32;
  i_xchngbk     [ 3 ] = Fget32( ptr_fml_Ibuf ,FFO_LMT_MKT_SL_FLG,0,(char *) &st_xchngbk.c_slm_flg,0);
  i_xchngbkerr  [ 3 ] = Ferror32;
  i_xchngbk     [ 4 ] = Fget32( ptr_fml_Ibuf ,FFO_DSCLSD_QTY,0,(char *) &st_xchngbk.l_dsclsd_qty,0);
  i_xchngbkerr  [ 4 ] = Ferror32;
  i_xchngbk     [ 5 ] = Fget32( ptr_fml_Ibuf ,FFO_ORD_TOT_QTY,0,(char *) &st_xchngbk.l_ord_tot_qty,0);
  i_xchngbkerr  [ 5 ] = Ferror32;
  i_xchngbk     [ 6 ] = Fget32( ptr_fml_Ibuf ,FFO_LMT_RT,0,(char *)   &st_xchngbk.l_ord_lmt_rt,0);
  i_xchngbkerr  [ 6 ] = Ferror32;
  i_xchngbk     [ 7 ] = Fget32( ptr_fml_Ibuf ,FFO_STP_LSS_TGR,0,(char *) &st_xchngbk.l_stp_lss_tgr,0);
  i_xchngbkerr  [ 7 ] = Ferror32;
  i_xchngbk     [ 8 ] = Fget32( ptr_fml_Ibuf ,FFO_ORD_VALID_DT,0,(char *) st_xchngbk.c_valid_dt,0);
  i_xchngbkerr  [ 8 ] = Ferror32;
  i_xchngbk     [ 9 ] = Fget32( ptr_fml_Ibuf ,FFO_ORD_TYP,0,(char *) &st_xchngbk.c_ord_typ,0);
  i_xchngbkerr  [ 9 ] = Ferror32;
  i_xchngbk     [ 10] = Fget32( ptr_fml_Ibuf ,FFO_ACK_TM,0,(char *) st_xchngbk.c_ack_tm,0);
  i_xchngbkerr  [ 10 ] = Ferror32;
  i_xchngbk     [ 11] = Fget32( ptr_fml_Ibuf ,FFO_SPL_FLG,0,(char *) &st_xchngbk.c_spl_flg,0);
  i_xchngbkerr  [ 11 ] = Ferror32;
  i_xchngbk     [ 12] = Fget32( ptr_fml_Ibuf ,FFO_ORDR_FLW,0,(char *) &st_xchngbk.c_ordr_flw,0);
  i_xchngbkerr  [ 12 ] = Ferror32;
  i_xchngbk     [ 13] = Fget32( ptr_fml_Ibuf ,FFO_ORDR_RFRNC,0,(char *) st_xchngbk.c_ordr_rfrnc ,0);
  i_xchngbkerr  [ 13 ] = Ferror32;
  i_xchngbk     [ 14] = Fget32( ptr_fml_Ibuf ,FFO_XCHNG_RMRKS,0,(char *) st_xchngbk.c_xchng_rmrks,0);		/*** Ver 1.6 ***/
  i_xchngbkerr  [ 14 ] = Ferror32;																																			/*** Ver 1.6 ***/		


  for ( j=0 ; j < 15  ; j++ )		/*** Changed from 14 to 15 in Ver 1.6 ***/
  {
    if ( i_xchngbk [ j ] == -1 && i_xchngbkerr [ j ] !=  FNOTPRES )
    {
      fn_userlog( c_ServiceName, "Error in :%d:",j );
      fn_errlog( c_ServiceName, "S31015", Fstrerror32( i_xchngbkerr[j] ),c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
  }

	/** Ver 3.3 Starts **/
  
  /*** Commented in Ver 4.6 as data-type of FML used is long and variable data-type is char ***
  i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_USR_FLG,0,(char *)&c_check_flag,0);
  ***/
  
  i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_CLSR_TYP,0,(char *)&c_check_flag,0); /*** Ver 4.6 ***/ 
  i_ferr [0] = Ferror32;
  if ( i_err[0] == -1  && Ferror32 != FNOTPRES)
  {
     fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg);
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

   if(DEBUG_MSG_LVL_4)  /** Debug lvl added in ver 5.8 **/
   {
    fn_userlog(c_ServiceName,":c_check_flag ---------------------------------- %c :",c_check_flag);
   }
  /*** Ver 3.3 Ends ***/

  /* Ver 4.3 Starts */
  if(c_check_flag == 'W')
  {
    MEMSET(c_ip_address);

   i_err[1]  = Fget32(ptr_fml_Ibuf,FFO_OI_INDCTR,0,(char *)c_ip_address,0);
   i_ferr [1] = Ferror32;

   if ( i_err[0] == -1  && Ferror32 != FNOTPRES)
   {
      fn_errlog( c_ServiceName, "S31025", FMLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
  }

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName, "c_ip_address is...:%s:",c_ip_address);
  }
  /* Ver 4.3 Ends */

	ptr_fml_Sbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Sbuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31030", TPMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
		/***	Commented In VQC
    tpfree((char *)ptr_fml_Sbuf);  
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );  
		**************************************/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  ptr_fml_Rbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Rbuf == NULL ) 
  {
    fn_errlog( c_ServiceName, "S31035", TPMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
    tpfree((char *)ptr_fml_Sbuf);  
	/*fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   VQC */
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	strcpy(	c_user_id	,	st_usrprfl.c_user_id);
	l_ssn_id	=	st_usrprfl.l_session_id;

  /***  Ver 2.2 Starts  ***/

  if(st_usrprfl.c_user_id[0] != BPID && strcmp(st_usrprfl.c_user_id,"system") != 0)
  {
    i_is_dbc_cust = 0;

    EXEC SQL
        SELECT 1
            INTO :i_is_dbc_cust
        FROM  CLM_CLNT_MSTR
        WHERE CLM_MTCH_ACCNT = :st_usrprfl.c_cln_mtch_accnt
    		AND   CLM_TRD_FLG = 'N'	
        AND   CLM_BP_ID IS NOT NULL;

    if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
    {
      fn_errlog( c_ServiceName, "S31040",SQLMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
			tpfree((char *)ptr_fml_Sbuf);			/***	VQC	***/
			tpfree((char *)ptr_fml_Rbuf);			/***	VQC	***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    if ( i_is_dbc_cust == 1 )
    {
      fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst, this facility has been Disabled");
      fn_errlog( c_ServiceName, "B35018", "", c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
			tpfree((char *)ptr_fml_Sbuf);     /***  VQC ***/
			tpfree((char *)ptr_fml_Rbuf);     /***  VQC ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
   
  }

  /***  Ver 2.2  Ends  ***/

  /*** Ver 5.6 Starts ***/

  if(st_usrprfl.c_user_id[0] ==BPID)
   {
     if( fn_simaltns_ssn_term ( c_ServiceName,st_usrprfl.c_user_id,st_usrprfl.l_session_id,st_usrprfl.c_cln_mtch_accnt,c_err_msg) == -1 )
     {
      fn_errlog(c_ServiceName,"S31045","Error while checking simultaneous active session",c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpfree((char *)ptr_fml_Sbuf); /** ver 5.8 VQC **/
      tpfree((char *)ptr_fml_Rbuf); /** ver 5.8 VQC **/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

  /*** Ver 5.6 Ends ***/

  /** Added in Ver 4.0 ***/
  MEMSET(c_sys_msg);
  if(Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0) == -1)
  {
    if (Ferror32 != FNOTPRES)
    {
      fn_errlog( c_ServiceName, "S31050",FMLMSG,c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
			tpfree((char *)ptr_fml_Sbuf);     /***  VQC ***/
			tpfree((char *)ptr_fml_Rbuf);     /***  VQC ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  /*** Added in Ver 4.0 Ends ***/

  if(st_usrprfl.c_user_id[0] == BPID && strcmp(c_sys_msg,"MY_EOS") != 0 ) /*** MY_EOS added in Ver 4.0 ***/
  {
  	if(Fget32(ptr_fml_Ibuf,FFO_ALIAS,0,(char *)c_alias,0) == -1)
    {
    	fn_errlog( c_ServiceName, "S31055", FMLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
			tpfree((char *)ptr_fml_Sbuf);     /***  VQC ***/
			tpfree((char *)ptr_fml_Rbuf);     /***  VQC ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	
    EXEC SQL
      SELECT 1
      INTO   :i_level_exists
      FROM   CLM_CLNT_MSTR
      WHERE  CLM_MTCH_ACCNT = :st_usrprfl.c_cln_mtch_accnt 
      AND    CLM_BP_ID      = :st_usrprfl.c_user_id 
      AND    CLM_ALIAS_NAME = :c_alias ;

    if(i_level_exists != 1 )
    {
    	fn_errlog( c_ServiceName, "B55006", "", c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
			tpfree((char *)ptr_fml_Sbuf);     /***  VQC ***/
			tpfree((char *)ptr_fml_Rbuf);     /***  VQC ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
      strcpy(c_bp_id,st_usrprfl.c_user_id);
    }
    else
    {
      strcpy(c_bp_id," ");
    }

  	if( DEBUG_MSG_LVL_3 )
	 	{  
    	fn_userlog(c_ServiceName,"The BP id is :%s: ,:%s:", c_bp_id,st_usrprfl.c_user_id);
    	fn_userlog(c_ServiceName,"The Alias is :%s: ", c_alias);
    	fn_userlog(c_ServiceName,"BP channel  is :%s:",c_channel);
    	fn_userlog(c_ServiceName,"st_xchngbk.c_req_typ is :%c:",st_xchngbk.c_req_typ); /*** ver 2.0 ***/
    	fn_userlog(c_ServiceName,"st_xchngbk.c_spl_flg is :%c:",st_xchngbk.c_spl_flg); /*** ver 2.0 ***/
  	}

		strcpy ( c_xchng_remarks, st_xchngbk.c_xchng_rmrks );
  	rtrim ( c_xchng_remarks );

  	c_psswd_req_flg = NO;

  	strcpy(c_pipe_id, st_xchngbk.c_pipe_id );

    /********** Commented in ver 2.0 ***********
  	i_returncode=fn_chk_spncloseout	(	c_ServiceName,
    			                        		&st_xchngbk,
          			                  		&st_err_msg
																		);

  	if( i_returncode == -1 )
  	{
    	fn_errlog( c_ServiceName, "S31060", "Broker Under Closeout", c_err_msg);
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
    ********************************************/

  	fn_init_ddr_pop ( st_xchngbk.c_pipe_id,TRADING_SECTION,F_CS);

		/*** Commented in Ver 1.5 ***
  	i_returncode =  fn_check_spnuser	(	c_ServiceName,
    	                              	 	&st_usrprfl ,
      	                            		c_usr_usr_psswrd.arr,  
        	                          		c_psswd_req_flg,
          	                        		&st_err_msg 
																		 	);
		*****************************/

		/*** Added in Ver 1.5 ***/
    
   if( c_check_flag !='W')     /*** Condition  added in Ver 3.3 ***/
   {
  	/*** i_returncode =  fn_check_spnuser_ip	(	c_ServiceName,
																					&st_usrprfl ,
																					c_usr_usr_psswrd.arr,  
																					c_psswd_req_flg,
																					c_ip_address,
                                          c_txn_flg,                *** Ver 3.8 ***
																					&st_err_msg 
																				);
		************************* Commented in Ver 3.9 ***/
		/*************************/

		/*** Ver 3.9 starts ***/
		memcpy(&st_usrprfl_vw,&st_usrprfl,sizeof(st_usrprfl_vw));
		
		i_returncode =  fn_check_user_ip	(	c_ServiceName,
																					&st_usrprfl_vw ,
																					c_usr_usr_psswrd.arr,  
																					c_psswd_req_flg,
																					c_ip_address,
                                          c_txn_flg,                
																					&st_err_msg_vw 
																			);
		/*** Ver 3.9 ends ***/
	
  	if ( i_returncode == -1 )
  	{
    	fn_errlog( c_ServiceName, "S31065", LIBMSG, c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg_vw.c_err_msg, 0 );	/*** Ver 3.9 changed st_err_msg to st_err_msg_vw ***/
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
			tpfree((char *)ptr_fml_Sbuf);     /***  VQC ***/
			tpfree((char *)ptr_fml_Rbuf);     /***  VQC ***/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
   }
		strcpy(st_xchngbk.c_ip_address, c_ip_address);		/*** Ver 1.5 ***/

		if(DEBUG_MSG_LVL_3)	/*** Ver 1.5 ***/
		{
			fn_userlog(c_ServiceName,"ip address:%s:",c_ip_address);
		}

		i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );

 	 	if ( i_trnsctn == -1 )
  	{
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
			tpfree((char *)ptr_fml_Sbuf);     /***  VQC ***/
			tpfree((char *)ptr_fml_Rbuf);     /***  VQC ***/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

  	strcpy( st_i_ordbk.c_ordr_rfrnc,st_xchngbk.c_ordr_rfrnc);
  	st_i_ordbk.c_oprn_typ = FOR_UPDATE;

		i_returncode = fn_spnref_to_ord	( 	&st_i_ordbk,
																			&st_o_ordbk	,
                                  		c_ServiceName,
                                  		c_err_msg
                                	);

  	if ( i_returncode != SUCC_BFR )
  	{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
      tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
      tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
    /*** ver 4.7 stars ***/
     fn_userlog( c_ServiceName,"INP SPL FLG :%c: ORD BOOK SPL FLG :%c:",st_xchngbk.c_spl_flg,st_o_ordbk.c_spl_flg);
     if(st_xchngbk.c_spl_flg != ROLLOVER_WITH_SPREAD && st_o_ordbk.c_spl_flg == ROLLOVER_WITH_SPREAD)
     { 
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      MEMSET(c_err_msg);
      strcpy(c_err_msg,"This is Spread Rollover Order, pls visit new site for mod/can");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 ); 
      tpfree((char *)ptr_fml_Sbuf); 
      tpfree((char *)ptr_fml_Rbuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
     /*** ver 4.7 ends ***/

		/*** Commented in Ver 5.1 ***
    *** ver 4.9 starts ***

    if( st_o_ordbk.c_prd_typ == 'F' || st_o_ordbk.c_prd_typ == 'O' )
    {
    EXEC SQL
         SELECT NVL( ftq_dlvry_pos_allwd, 'Y' )
         INTO   :c_dlvry_pos_allwd
         FROM   FTQ_FO_TRD_QT
         WHERE  FTQ_XCHNG_CD  = :st_o_ordbk.c_xchng_cd
           AND  FTQ_PRDCT_TYP = :st_o_ordbk.c_prd_typ
           AND  FTQ_UNDRLYNG  = :st_o_ordbk.c_undrlyng
           AND  FTQ_EXPRY_DT  = :st_o_ordbk.c_expry_dt
           AND  FTQ_EXER_TYP  = :st_o_ordbk.c_exrc_typ
           AND  FTQ_OPT_TYP   = :st_o_ordbk.c_opt_typ
           AND  FTQ_STRK_PRC  = :st_o_ordbk.l_strike_prc;
  
   if( SQLCODE != 0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S31070", LIBMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_Rbuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
   
  if (c_dlvry_pos_allwd == 'N')
  {
    if( Fget32(ptr_fml_Ibuf,FFO_BK_UBK_FLG,0,(char *)&c_dlvry_eos_flg,0) == -1 )
    {
      if ( Ferror32 != FNOTPRES )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        tpfree((char *)ptr_fml_Sbuf);
        tpfree((char *)ptr_fml_Rbuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
        c_dlvry_eos_flg='N';
      }
    }
    if (c_dlvry_eos_flg!='E')
    {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); 
        fn_userlog(c_ServiceName,"Currently Trading is not allowed in this contract"); 
        strcpy(c_err_msg,"Currently Trading is not allowed in this contract");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        tpfree((char *)ptr_fml_Sbuf);
        tpfree((char *)ptr_fml_Rbuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
   }
  }
   *** ver 4.9 ends ***		*** Ver 5.1 ***/


/***** Ver 4.5 Start *****/
 
   if (strcmp(c_sys_msg,"V")==0 )
   {
		i_returncode = fn_span_stop_vtc( c_ServiceName,
  																	 st_xchngbk.c_ordr_rfrnc,
																		 &st_o_ordbk,
																		 &st_err_msg );
		if(i_returncode == -1)
    {
		 fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
		 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
     tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
     tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
     
		if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
    {
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); /** ver 5.8 **/
		 fn_errlog( c_ServiceName, "S31075",LIBMSG,c_err_msg);
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
     tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
     tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
		 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
      
		i_actn_id = 0;
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    tpfree((char *)ptr_fml_Sbuf); /** ver 5.8 VQC **/
    tpfree((char *)ptr_fml_Rbuf); /** ver 5.8 VQC **/ 
		tpreturn(TPSUCCESS,0,(char *)ptr_fml_Ibuf,0,0);
   } 

  /***** Ver 4.5 End *****/

    /*** Ver 3.7 Starts ***/

    rtrim(st_o_ordbk.c_cln_mtch_accnt);
    rtrim(st_usrprfl.c_cln_mtch_accnt);

		if( DEBUG_MSG_LVL_0 )
		{
    	fn_userlog( c_ServiceName, "Match Account st_o_ordbk.c_cln_mtch_accnt :%s:", st_o_ordbk.c_cln_mtch_accnt);
    	fn_userlog( c_ServiceName, "Match Account st_usrprfl.c_cln_mtch_accnt :%s:", st_usrprfl.c_cln_mtch_accnt);
		}

    if( strcmp(st_o_ordbk.c_cln_mtch_accnt,st_usrprfl.c_cln_mtch_accnt) != 0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_userlog(c_ServiceName,"Invalid Combination of Order Reference and Match Account.");
      fn_errlog(c_ServiceName, "S31080", "Invalid Combination of Order Reference and Match Account", c_err_msg);
      strcpy(c_err_msg,"Invalid Combination of Order Reference and Match Account.");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      tpfree((char *)ptr_fml_Sbuf);   /* VQC */
      tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    /*** Ver 3.7 Ends ***/
    /*** Ver 2.1 Starts ***/

    if (st_o_ordbk.c_prd_typ == 'P' )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "B23008", DEFMSG, c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
      tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    /*** Ver 2.1 Ends ***/



		/********** Added  in ver 2.0 ***********/

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"The underlying is :%s:", st_o_ordbk.c_undrlyng);
    }
	
		strcpy(st_cntrct.c_undrlyng,st_o_ordbk.c_undrlyng);
  	strcpy(st_cntrct.c_xchng_cd,st_o_ordbk.c_xchng_cd);
  	strcpy(st_cntrct.c_expry_dt,st_o_ordbk.c_expry_dt);
  	st_cntrct.c_prd_typ 		= st_o_ordbk.c_prd_typ;
  	st_cntrct.c_exrc_typ 		= st_o_ordbk.c_exrc_typ;
  	st_cntrct.c_ctgry_indstk =st_o_ordbk.c_ctgry_indstk;
  	st_cntrct.c_opt_typ 		= st_o_ordbk.c_opt_typ;
  	st_cntrct.l_strike_prc  = st_o_ordbk.l_strike_prc;
		
	
    i_returncode=fn_chk_spncloseout ( c_ServiceName,
                                      st_usrprfl.c_cln_mtch_accnt,
																	    c_request_typ,
																		  st_cntrct,	
                                      &st_xchngbk,
                                      &st_err_msg
                                    );

    if( i_returncode == -1 )
    {
      /*fn_errlog( c_ServiceName, "S31085", "Broker Under Closeout", c_err_msg); */
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
      tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
      tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    /********* End of ver 2.0 **************/

    /*** Commented and changed for Ver 6.7 ***
    i_returncode = fn_lock_usr( c_ServiceName,
                                st_usrprfl.c_cln_mtch_accnt
                              );
    ** Ver 6.7 **/
    i_returncode = fn_lock_fno( c_ServiceName,
                                st_usrprfl.c_cln_mtch_accnt
                              );

 	 	if ( i_returncode == -1 )
 		{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
      tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
      tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

  	i_returncode = fn_check_ord_spn( c_ServiceName,
																		 &st_o_ordbk,
      	                             &c_fum_mrkt_typ,
        	                           &c_fcm_mrkt_typ, 
          	                         &st_err_msg );
  	if ( i_returncode == -1 )
  	{
    	fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
      tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
      tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

		st_xchngbk.l_mdfctn_cntr = st_o_ordbk.l_mdfctn_cntr ;

  	st_xchngbk.c_oprn_typ = WITHOUT_ORS_MSG_TYP;
		

		i_returncode	=	fn_spnref_to_omd ( &st_xchngbk,
                    								&st_xchngbk,
                   									c_ServiceName,
                    								c_err_msg
                  								);

  	if ( i_returncode != SUCC_BFR )
  	{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
      tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
      tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

  /** code moved from below line 720 in ver 4.0 ***/

  if ( st_o_ordbk.c_prd_typ == SLTP_FUTUREPLUS  || st_o_ordbk.c_prd_typ == OPTIONPLUS ) /*** Ver 2.6 ***/
  {
    if (st_o_ordbk.c_prd_typ == SLTP_FUTUREPLUS)
    {
      fn_userlog(c_ServiceName,"SLTP FUTUREPLUS Cancellation request");
    }
    else if (st_o_ordbk.c_prd_typ == OPTIONPLUS )
    {
      fn_userlog(c_ServiceName,"OptionPLUS Cancellation request");
    }

    MEMSET(c_sys_msg);
    if(Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0) == -1)
    {
      if (Ferror32 != FNOTPRES)
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31090",FMLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
        tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
        tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
        fn_userlog(c_ServiceName,"Called from ASP");
        i_mtm_flg =2;       /* if called by SLTP FP Customer from ASP */
      }
    }
	  else /* success condition */
    {
      fn_userlog(c_ServiceName,"Called from backoffice");
      fn_userlog(c_ServiceName,"c_sys_msg =:%s:",c_sys_msg); /* if called from backoffice EOS  */
      if (strcmp(c_sys_msg,"EOS") == 0 ||  strcmp(c_sys_msg,"EXCPT_EOS") == 0 ||  strcmp(c_sys_msg,"SYS_EVENT") == 0) /*** EXCPT condition added in ver 4.0 **/ /*** Ver 6.3 added SYS_EVENT ***/
      {
        i_mtm_flg=1;
      }
      else if (strcmp(c_sys_msg,"MY_EOS") == 0 ) /**** Else if loop added in Ver 4.0 ****/
      {
          i_mtm_flg =2;
      }
    }

    if(DEBUG_MSG_LVL_3)
    {
    	fn_userlog( c_ServiceName, "c_sys_msg is :%s:",c_sys_msg);  
		}

    /*** Ver 4.0 Starts ***********/
    if ( strcmp(c_sys_msg,"EOS")==0  )
    {
       st_i_ordbk.c_req_typ='N';
    }
    else if( strcmp(c_sys_msg ,"MY_EOS")==0 )
    {
      st_i_ordbk.c_req_typ='M';
    }
    else if( strcmp(c_sys_msg ,"EXCPT_EOS") == 0 )
    {
      st_i_ordbk.c_req_typ='E';
    }
		else if( strcmp(c_sys_msg ,"SYS_EVENT") == 0 ) /*** Ver 6.3 ***/
    {
      st_i_ordbk.c_req_typ='S';
    }
    /*** Ver 4.0 Ends ********/
    if ( i_mtm_flg == 2 )
    {
		
		 	fn_userlog( c_ServiceName, "CR-ISEC14-144377 Index/Stock :%c:",  st_o_ordbk.c_ctgry_indstk );   /*** Added in Ver 6.2 ***/

      EXEC SQL
      SELECT /*** MTM_SLTP_EOS_FLG,     *** Ver 4.4 ***
             MTM_OP_EOS_FLG   ** Ver 4.0 **     Commented in Ver 6.2 ****/
             /**** DECODE added in Ver 6.2 ****/
             DECODE ( :st_o_ordbk.c_ctgry_indstk,'I',MTM_SLTP_EOS_FLG,'S',MTM_SLTP_EOS_FLG_S,'N' ),
             DECODE ( :st_o_ordbk.c_ctgry_indstk,'I',MTM_OP_EOS_FLG,'S',MTM_OP_EOS_FLG_S,'N' ) 
      INTO   :c_mtm_eos,
						 :c_mtm_op_eos	  /** Ver 4.0 **/
      FROM   MTM_APPLN_STTS
      WHERE  MTM_XCHNG_CD =  :st_xchngbk.c_xchng_cd
      AND    MTM_PIPE_ID  =  :st_xchngbk.c_pipe_id;

      if( SQLCODE != 0 )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31095",SQLMSG,c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
        tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
        tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

		 if( st_o_ordbk.c_prd_typ == SLTP_FUTUREPLUS )    /** Added in Ver 4.0 **/
		 {
      if ( c_mtm_eos == 'Y')
      {
        fn_errlog( c_ServiceName, "B35014",DEFMSG, c_err_msg  );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
        tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
        tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
		 } 
		 /** Ver 4.0 Starts **/	
		 else if( st_o_ordbk.c_prd_typ == OPTIONPLUS )
		 {
			 if( c_mtm_op_eos == 'Y' )
			 {
				 fn_errlog( c_ServiceName, "B35020",DEFMSG, c_err_msg  );
         fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
         tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
         tpfree((char *)ptr_fml_Rbuf);   /*  VQC */   
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
			 }	   
		 }  /** Ver 4.0 Ends **/
    }
  }
    /** code moved from below line 720 in ver 4.0 ***/

    if( DEBUG_MSG_LVL_3 )
    {
    	fn_userlog(c_ServiceName,"User Id is :%s: channel :%s: Order Type :%c:", st_usrprfl.c_user_id,st_o_ordbk.c_channel,st_o_ordbk.c_ord_typ);  /** ver 4.0 **/
		}

    if ((strcmp (st_usrprfl.c_user_id,"system")!= 0 ) && ((strcmp (st_o_ordbk.c_channel,"SYS")==0 && st_o_ordbk.c_ord_typ !='V' && strcmp(c_sys_msg,"MY_EOS")!=0 )||(strcmp(st_o_ordbk.c_channel,"OFF")==0)))   /** Ver 2.8 ** st_o_ordbk.c_ord_typ !='V' added **/ /*** Ver 4.0 ***/
  	{
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    	fn_errlog( c_ServiceName, "B22008",DEFMSG,c_err_msg);
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
      tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
      tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

		if( DEBUG_MSG_LVL_3 )
	 	{  
    	fn_userlog(c_ServiceName, "the value of st_o_ordbk.c_spl_flg is [%c] ", st_o_ordbk.c_spl_flg);
    	fn_userlog(c_ServiceName, "the value of st_o_ordbk.c_req_typ is [%c] ", st_o_ordbk.c_req_typ);
  	}

  	if ((st_o_ordbk.c_spl_flg == 'J') || (st_o_ordbk.c_spl_flg == L2_ORDER ) || (st_o_ordbk.c_spl_flg == L3_ORDER ) || (st_o_ordbk.c_ord_typ == IMMEDIATE_OR_CANCEL))
  	{
     	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     	fn_userlog(c_ServiceName,"In Special flag  Not possible to modify/cancel");
     	fn_errlog( c_ServiceName, "B28533",DEFMSG,c_err_msg);
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
      tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
      tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

  	if((st_o_ordbk.c_ordr_stts == ORDERED )  || (st_o_ordbk.c_ordr_stts==PARTIALLY_EXECUTED))
  	{
    	if((st_xchngbk.c_req_typ == CANCELLED ) && (st_xchngbk.c_plcd_stts !=REJECT ))
    	{
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	fn_userlog(c_ServiceName,"In order status Not possible to modify/cancel");
      	fn_errlog( c_ServiceName, "B28533",DEFMSG,c_err_msg);
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
        tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
        tpfree((char *)ptr_fml_Rbuf);   /* VQC */
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}
  	}

	/*** Commented in Ver 4.8 ***
	rtrim ( st_xchngbk.c_xchng_rmrks );
	strcat ( st_xchngbk.c_xchng_rmrks, c_xchng_remarks ); 
	***/

	/*** Ver 4.8 Starts Here ***/
  MEMSET(st_xchngbk.c_xchng_rmrks);
  if( strcmp (st_usrprfl.c_user_id,"system")!= 0 )
  {
   strcpy ( st_xchngbk.c_xchng_rmrks, c_xchng_remarks );
   strcat ( st_xchngbk.c_xchng_rmrks, "User Placed Cancellation");
  }
  else
  {
   strcpy ( st_xchngbk.c_xchng_rmrks, c_xchng_remarks );
  }
  /*** Ver 4.8 Ends Here ***/

	/*** Ver 1.9 starts here ***/
	/*** if ( st_o_ordbk.c_prd_typ == SLTP_FUTUREPLUS ) Commented In Ver 2.6 ***/
  /** commented in Ver 4.0 and taken above at line ---
	if ( st_o_ordbk.c_prd_typ == SLTP_FUTUREPLUS  || st_o_ordbk.c_prd_typ == OPTIONPLUS ) *** Ver 2.6 ***
	{
		if (st_o_ordbk.c_prd_typ == SLTP_FUTUREPLUS)
    {
      fn_userlog(c_ServiceName,"SLTP FUTUREPLUS Cancellation request");
    }
    else if (st_o_ordbk.c_prd_typ == OPTIONPLUS )
    {
      fn_userlog(c_ServiceName,"OptionPLUS Cancellation request");
    }

  	if(Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0) == -1)
    {
			if (Ferror32 != FNOTPRES)
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	fn_errlog( c_ServiceName, "S31100",FMLMSG,c_err_msg);
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   ** Ver 2.1 **
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
   		else if( Ferror32 == FNOTPRES )
			{
				fn_userlog(c_ServiceName,"Called from ASP");
				i_mtm_flg =2;       * if called by SLTP FP Customer from ASP *
			}
    }
		else * success condition *
		{
			fn_userlog(c_ServiceName,"Called from backoffice");
			fn_userlog(c_ServiceName,"c_sys_msg =:%s:",c_sys_msg); * if called from backoffice EOS  *
			if (strcmp(c_sys_msg,"EOS") == 0)
			{
				i_mtm_flg=1;
			}
		}
	
		if ( i_mtm_flg == 2 )
		{
			EXEC SQL
			SELECT mtm_sltp_eos_flg	
			INTO	 :c_mtm_eos 
			FROM	 mtm_appln_stts
			WHERE  mtm_xchng_cd =  :st_xchngbk.c_xchng_cd
			AND    mtm_pipe_id  =  :st_xchngbk.c_pipe_id;

			if( SQLCODE != 0 )
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog( c_ServiceName, "S31105",SQLMSG,c_err_msg);
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   ** Ver 2.1 **
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			if ( c_mtm_eos == 'Y')
			{
				fn_errlog( c_ServiceName, "B35014",DEFMSG, c_err_msg  );
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   ** Ver 2.1 **
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}
	}
   *** Ver 1.9 ends here *** commented in Ver 4.0 and taken above at line ---  ***/
 
    /*** Ver 3.3 Starts ****/
  if(strcmp(c_sys_msg,"EOS")!=0 && (st_o_ordbk.c_prd_typ=='U' || st_o_ordbk.c_prd_typ=='I' )  && strcmp(c_sys_msg,"MY_EOS")!=0  && strcmp(c_sys_msg,"EXCPT_EOS")!=0 && strcmp(c_sys_msg,"SYS_EVENT")!=0 ) /*** MY_EOS amd EXCPT_EOS Check added in Ver 4.0 ***/ /*** SYS_EVENT added in Ver 6.3 ***/
 /** st_o_ordbk.c_prd_typ=='I' Condition added in Ver 3.4 **/
  {
  	fn_userlog(c_ServiceName,"st_o_ordbk.c_sltp_ord_rfrnc :%s:",st_o_ordbk.c_sltp_ord_rfrnc);
    fn_userlog(c_ServiceName,"st_o_ordbk.c_ordr_stts :%c:",st_o_ordbk.c_ordr_stts);


    EXEC SQL
     SELECT FOD_ORDR_STTS
     INTO   :c_tag_ordr_stts
     FROM   FOD_FO_ORDR_DTLS
     WHERE  FOD_ORDR_RFRNC = :st_o_ordbk.c_sltp_ord_rfrnc;

    if( SQLCODE != 0 && SQLCODE == NO_DATA_FOUND)
    {

      fn_errlog(c_ServiceName, "S31110", SQLMSG, c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
      tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
    }
 	  fn_userlog(c_ServiceName,"c_tag_ordr_stts :%c:",c_tag_ordr_stts);

    if( st_o_ordbk.c_fc_flg != 'T' ) /*** Skip cond in Ver 6.3 ***/
		{
		 if
     (
      (
        (  st_o_ordbk.c_ordr_stts == 'O' && c_tag_ordr_stts == 'O') ||
        (  st_o_ordbk.c_ordr_stts == 'O' && c_tag_ordr_stts == 'J'  )||
        (   st_o_ordbk.c_ordr_stts == 'O' && c_tag_ordr_stts == 'C' ) ||
        (   st_o_ordbk.c_ordr_stts == 'J' && c_tag_ordr_stts == 'O' ) ||
        (   st_o_ordbk.c_ordr_stts == 'C' && c_tag_ordr_stts == 'O')
      ) &&
      ( st_o_ordbk.c_ordr_stts !='C' ) &&
      ( st_o_ordbk.c_ordr_stts !='J')
     )
     {
      fn_userlog(c_ServiceName,"Order is valid for Cancellation..continue...");
     }
     else
		 {
       fn_errlog(c_ServiceName, "S31115", LIBMSG, c_err_msg);
       strcpy(c_err_msg,"Cancellation not allowed, please verify the order status ");
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
       Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0);
       tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
       tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
     }
		} 
  }
 /********** ** Ver 3.3 Ends *******************/
  EXEC SQL
		/*** SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY'), Commented In Ver 1.7 ***/
    SELECT TO_CHAR( GREATEST(EXG_NXT_TRD_DT,EXG_TMP_TRD_DT) ,'DD-Mon-YYYY'),      /*** Ver 1.7 ***/
           TO_CHAR(SYSDATE,'DD-Mon-YYYY hh24:mi:ss')
    INTO   :c_trd_dt,
           :c_sys_dt
    FROM   EXG_XCHNG_MSTR
    WHERE  EXG_XCHNG_CD = :st_xchngbk.c_xchng_cd
 		/*** AND    EXG_MKT_TYP  = 'D';    *** Commented in Ver 4.4 ***/
    AND    EXG_MKT_TYP  = :c_exg_mkt_typ_d ; /*** Ver 4.4 Bind variable used instead of hard coded value ***/	

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31120",SQLMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
    tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  SETNULL ( c_trd_dt );
  SETNULL ( c_sys_dt );
  strcpy( st_xchngbk.c_mod_trd_dt, (char *) c_trd_dt.arr);

	if ( (st_xchngbk.c_plcd_stts == 'R'    )   && /* Request Placed */
       ( st_xchngbk.c_req_typ == 'C'     )   )  /* Request Cancelled */
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog( c_ServiceName, "B28568",DEFMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
    tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
    tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if ( st_o_ordbk.c_ordr_stts == REQUESTED )
  {
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN Inside Order Status REQUESTED.");
		}

    st_xchngbk.c_plcd_stts = ACCEPT;
    st_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;
    st_xchngbk.l_ors_msg_typ = ORS_NEW_ORD_ACPT;
    strcpy( st_xchngbk.c_ack_tm, (char *) c_sys_dt.arr);
    strcpy( st_xchngbk.c_entry_dt_tm, (char *) c_sys_dt.arr);
    /** strcpy( st_xchngbk.c_xchng_rmrks, "CANCELLED BY CLIENT"); commented in ver 4.9 ***/

		if (strcmp(c_xchng_remarks,"BAN") == 0)   /*** Ver 1.7 ***/
    {
      strcpy( st_xchngbk.c_xchng_rmrks ,"System placed Cancellation as stock under BAN period");
    }
    else if ( strstr( st_xchngbk.c_xchng_rmrks,"Physical Settlement EOS") ) /*** ver 4.9 starts **/
    {
      if(DEBUG_MSG_LVL_4)   /** ver 5.8 **/
      {  
       fn_userlog(c_ServiceName,"Existing  remarks  are  :%s:  and  :%s: ", c_xchng_remarks,st_xchngbk.c_xchng_rmrks);
      }
      strcpy( st_xchngbk.c_xchng_rmrks,"Physical Settlement EOS System placed Cancellation");
    }
    else if( strstr( st_xchngbk.c_xchng_rmrks,"SYSPHYLODM") )  /** Ver 5.4 ***/
    {
      MEMSET(st_xchngbk.c_xchng_rmrks);  
      strcpy( st_xchngbk.c_xchng_rmrks, "System placed Cancellation"); 
    }
    else 
    {
      strcpy( st_xchngbk.c_xchng_rmrks, "CANCELLED BY CLIENT");
    }
    /*** ver 4.9 ends ***/    
 
    st_xchngbk.l_dwnld_flg = NOT_DOWNLOAD;
    st_xchngbk.d_jiffy = 0;
    st_xchngbk.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;
		st_xchngbk.l_session_id=st_usrprfl.l_session_id; /**ver 6.6 **/

		i_rtrn_xchngbk  = fn_spnupd_xchngbk (	c_ServiceName,
                                        	&st_xchngbk,
                                        	c_err_msg
                                      	);


    if ( i_rtrn_xchngbk !=  0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
      tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
      tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    fn_cpy_ddr ( st_xchngbk.c_rout_crt );

		i_err [0] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_xchngbk.c_rout_crt,0);
    i_ferr[0] = Ferror32;
    i_err [1] = Fadd32(ptr_fml_Sbuf,FFO_ORDR_RFRNC, (char *)st_xchngbk.c_ordr_rfrnc,0);
    i_ferr[1] = Ferror32;
    i_err [2] = Fadd32(ptr_fml_Sbuf,FFO_ORS_MSG_TYP, (char *)&st_xchngbk.l_ors_msg_typ,0);
    i_ferr[2] = Ferror32;
    i_err [3] = Fadd32(ptr_fml_Sbuf,FFO_MDFCTN_CNTR, (char *)&st_xchngbk.l_mdfctn_cntr,0);
    i_ferr[3] = Ferror32;
    i_err [4] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM, (char *)st_xchngbk.c_ack_tm,0);
    i_ferr[4] = Ferror32;
    i_err [5] = Fadd32(ptr_fml_Sbuf,FFO_PREV_ACK_TM, (char *)st_xchngbk.c_entry_dt_tm,0);
    i_ferr[5] = Ferror32;

    for (i = 0;i < 7 ;i++)
    {
      if(i_err[i] == -1 )
      {
        fn_userlog( c_ServiceName, "Error in :%d:",i );
        fn_errlog( c_ServiceName, "S31125", Fstrerror32( i_ferr[i]),c_err_msg );
        tpfree((char *)ptr_fml_Sbuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

		i_returncode	=	tpcall	( "SFO_PRCS_RSP",( char * ) ptr_fml_Sbuf,0,( char ** ) &ptr_fml_Rbuf,&l_recvbuf,0);

		if ( i_returncode != SUCC_BFR )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
      tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
      tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"AFTER  Call To SFO_PRCS_RSP .");
		}

		tpfree((char*)ptr_fml_Sbuf);
		tpfree((char*)ptr_fml_Rbuf);			/***	VQC	***/
		
  } /* End of order in REQUESTED state */


	if((( st_o_ordbk.c_ordr_stts == ORDERED ) || ( st_o_ordbk.c_ordr_stts == PARTIALLY_EXECUTED ))&&( st_xchngbk.c_plcd_stts == 'R') ) /* Request Placed */
  {
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN Inside Order Status ORDERED Or PARTIALLY_EXECUTED");
		}
    st_xchngbk.c_plcd_stts = REJECT;
    st_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;
    st_xchngbk.l_ors_msg_typ = ORS_MOD_ORD_RJCT;
    strcpy( st_xchngbk.c_ack_tm, (char *) c_sys_dt.arr);
    strcpy( st_xchngbk.c_entry_dt_tm, (char *) c_sys_dt.arr);
    /*** strcpy( st_xchngbk.c_xchng_rmrks, "CANCELLED BY CLIENT"); commented in ver 4.9 ***/
    /*** ver 4.9 starts ***/
    if( strstr ( st_xchngbk.c_xchng_rmrks , "Physical Settlement EOS") )
    {
        if(DEBUG_MSG_LVL_4)  /** ver 5.8 **/
        {
         fn_userlog(c_ServiceName,"Existing  remark is  :%s: ", st_xchngbk.c_xchng_rmrks );
        }
        strcpy( st_xchngbk.c_xchng_rmrks, "Physical Settlement EOS System placed Cancellation");
    }
    else if( strstr( st_xchngbk.c_xchng_rmrks,"SYSPHYLODM") )  /** Ver 5.4 ***/
    {
      MEMSET(st_xchngbk.c_xchng_rmrks);
      strcpy( st_xchngbk.c_xchng_rmrks, "System placed Cancellation");
    }
    else
    {
         strcpy( st_xchngbk.c_xchng_rmrks, "CANCELLED BY CLIENT");
    }
    /*** ver 4.9 ends ***/
     
    st_xchngbk.l_dwnld_flg = NOT_DOWNLOAD;
    st_xchngbk.d_jiffy = 0;
    st_xchngbk.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;
		st_xchngbk.l_session_id=st_usrprfl.l_session_id; /**ver 6.6 **/

	 	i_rtrn_xchngbk  = fn_spnupd_xchngbk ( c_ServiceName,
    	                                  	&st_xchngbk,
        	                              	c_err_msg
          	                          	);


    if ( i_rtrn_xchngbk	!=	0	)
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
      tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
      tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"BEFORE fn_cpy_ddr.");
		}

    fn_cpy_ddr ( st_xchngbk.c_rout_crt );

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before FADD.");
		}

		i_err [0] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_xchngbk.c_rout_crt,0);
    i_ferr[0] = Ferror32;
    i_err [1] = Fadd32(ptr_fml_Sbuf,FFO_ORDR_RFRNC, (char *)st_xchngbk.c_ordr_rfrnc,0);
    i_ferr[1] = Ferror32;
    i_err [2] = Fadd32(ptr_fml_Sbuf,FFO_ORS_MSG_TYP, (char *)&st_xchngbk.l_ors_msg_typ,0);
    i_ferr[2] = Ferror32;
    i_err [3] = Fadd32(ptr_fml_Sbuf,FFO_MDFCTN_CNTR, (char *)&st_xchngbk.l_mdfctn_cntr,0);
    i_ferr[3] = Ferror32;
    i_err [4] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM, (char *)st_xchngbk.c_ack_tm,0);
    i_ferr[4] = Ferror32;
    i_err [5] = Fadd32(ptr_fml_Sbuf,FFO_PREV_ACK_TM, (char *)st_xchngbk.c_entry_dt_tm,0);
    i_ferr[5] = Ferror32;

    for (i = 0;i < 7 ;i++)
    {
      if(i_err[i] == -1 )
      {
        fn_userlog( c_ServiceName, "Error in :%d:",i );
        fn_errlog( c_ServiceName, "S31130", Fstrerror32( i_ferr[i]),c_err_msg );
        tpfree((char *)ptr_fml_Sbuf);   
        tpfree((char *)ptr_fml_Rbuf);   /*  VQC */ 
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }


		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN - Before Call To Process Response For Cancellation.");
		}
		i_returncode  = tpcall  ( "SFO_PRCS_RSP",( char * ) ptr_fml_Sbuf,0,( char ** ) &ptr_fml_Rbuf,&l_recvbuf,0);

		if ( i_returncode != SUCC_BFR )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
      tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
      tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
		
		tpfree((char *)ptr_fml_Sbuf);			/***	VQC	***/
		tpfree((char *)ptr_fml_Rbuf);			/***	VQC	***/
  }

  if( strstr( st_xchngbk.c_xchng_rmrks,"SYSPHYLODM") )  /** Ver 5.4 ***/
  {
    MEMSET(st_xchngbk.c_xchng_rmrks);
    strcpy( st_xchngbk.c_xchng_rmrks, "System placed Cancellation");
  }


	strcpy(st_pstn_actn.c_user_id, st_usrprfl.c_user_id);
  st_pstn_actn.l_session_id  = st_usrprfl.l_session_id;
  strcpy(st_pstn_actn.c_cln_mtch_accnt,st_o_ordbk.c_cln_mtch_accnt);
  st_pstn_actn.l_eba_cntrct_id = st_o_ordbk.l_eba_cntrct_id;
  strcpy(st_pstn_actn.c_xchng_cd,st_o_ordbk.c_xchng_cd);
  st_pstn_actn.c_prd_typ = st_o_ordbk.c_prd_typ;
  strcpy(st_pstn_actn.c_undrlyng,st_o_ordbk.c_undrlyng);
  strcpy(st_pstn_actn.c_expry_dt,st_o_ordbk.c_expry_dt);
  st_pstn_actn.c_exrc_typ = st_o_ordbk.c_exrc_typ;
  st_pstn_actn.c_opt_typ = st_o_ordbk.c_opt_typ;
  st_pstn_actn.l_strike_prc = st_o_ordbk.l_strike_prc;
  st_pstn_actn.c_ctgry_indstk = st_o_ordbk.c_ctgry_indstk;
  st_pstn_actn.l_ca_lvl = st_o_ordbk.l_ca_lvl;

  st_pstn_actn.l_actn_typ 		= ORS_CAN_ORD_REQ;
  st_pstn_actn.c_trnsctn_flw 	= st_o_ordbk.c_ordr_flw;
  st_pstn_actn.l_orgnl_qty 		= st_o_ordbk.l_ord_tot_qty;
  st_pstn_actn.l_orgnl_rt  		= st_o_ordbk.l_ord_lmt_rt;
  st_pstn_actn.l_new_qty 			= 0;
  st_pstn_actn.l_new_rt  			= 0;
  st_pstn_actn.l_exec_qty  		= st_o_ordbk.l_exctd_qty;
  st_pstn_actn.l_exec_rt  		= 0;
  st_pstn_actn.l_fresh_qty  	= 0;
  st_pstn_actn.l_cover_qty  	= 0;
  st_pstn_actn.d_add_mrgn_amt = 0;
  st_pstn_actn.l_curr_rt = 0;

  /** ver 4.7 starts **/
  if(st_o_ordbk.c_spl_flg == ROLLOVER_WITH_SPREAD)
  {
     st_pstn_actn.c_nkd_blkd_flg = ROLLOVER_WITH_SPREAD;
  }
  /** ver 4.7 ends **/

	strcpy(st_o_ordbk.c_ordr_rfrnc,st_xchngbk.c_ordr_rfrnc);
  sprintf(st_pstn_actn.c_ref_rmrks,"%s-%ld",st_o_ordbk.c_ordr_rfrnc, st_o_ordbk.l_mdfctn_cntr + 1);
  rtrim(st_pstn_actn.c_ref_rmrks);

	/*** if ( st_o_ordbk.c_prd_typ != SLTP_FUTUREPLUS ) *** if condition added in Ver 1.9 - Commented In Ver 2.6 ***/
  if ( st_o_ordbk.c_prd_typ != SLTP_FUTUREPLUS && st_o_ordbk.c_prd_typ != OPTIONPLUS && st_o_ordbk.c_spl_flg != ROLLOVER_WITH_SPREAD )  /*** Ver 2.6  ***/ /*** ROLLOVER_WITH_SPREAD condition added in ver 4.7 ***/
	{
	 i_rtrn_cd = fn_cal_can_pos  (
                                  c_ServiceName,
                                  c_err_msg,
                                  &st_pstn_actn
                               );

	 if ( i_rtrn_cd	!= 0 )
   {
      /*** comment starts for ver 6.1 *******
			switch ( i_rtrn_cd )
			{
				case INSUFFICIENT_LIMITS  :

					  fn_userlog(c_ServiceName,"Inside  INSUFFICIENT_LIMITS Case.");
  					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
            *** Ver 3.0 Starts ***
            c_actn_flg = 'C' ;
            i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
            if ( i_trnsctn == -1 )
            {
              fn_errlog( c_ServiceName, "S31135",LIBMSG,c_err_msg);
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

            i_returncode =  fn_spn_ins_ffl_log_tbl  (  c_ServiceName,
                                                       st_o_ordbk,
                                                       c_err_msg,
                                                       d_required_amount ,
                                                       c_actn_flg
                                                     );
            if ( i_returncode != 0 )
            {
              fn_errlog( c_ServiceName, "S31140", LIBMSG, c_err_msg  );
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

            }


            if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
            {
              fn_errlog( c_ServiceName, "S31145",LIBMSG,c_err_msg);
              fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   ** ver 5.8 **
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }

            *** Ver 3.0 Ends ***
  					fn_errlog( c_ServiceName, "S31150", LIBMSG, c_err_msg  );
  					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   ** Ver 2.1 **
 	
				break;
			}
 
      ** fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg ); **  commented in ver 5.8 **
 
      ** ver 5.8 VQC starts ** 
      if ( i_rtrn_cd != INSUFFICIENT_LIMITS ) 
      {
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      }
      ** ver 5.8 Ends **

      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   ** Ver 2.1 **
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      comment ends for ver 6.1 ***/
      /*** ver 6.1 starts ***/
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      /*** ver 6.1 ends ***/
    
   }
	}		/*** Ver 1.9 ***/ 

/*l_ip_len = sizeof ( struct st_sequence );  VQC */
/*l_op_len = sizeof ( struct st_sequence );  VQC */


  strcpy( st_s_sequence.c_pipe_id, st_xchngbk.c_pipe_id );
  strcpy( st_s_sequence.c_trd_dt, st_xchngbk.c_mod_trd_dt );
  st_s_sequence.c_rqst_typ = GET_XCHNG_SEQ;

  fn_cpy_ddr ( st_s_sequence.c_rout_crt );

	i_returncode  = fn_get_fno_seq  ( c_ServiceName,
                                    &st_s_sequence,
                                    c_err_msg
                                  );

  if ( i_returncode != SUCC_BFR )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"st_s_sequence.l_seq_num Is :%ld:",st_s_sequence.l_seq_num);
	}

	l_xchng_seq_num	= st_s_sequence.l_seq_num;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"l_xchng_seq_num Is :%ld:", l_xchng_seq_num);
	}

  st_xchngbk.l_mdfctn_cntr	= st_o_ordbk.l_mdfctn_cntr + 1;
  st_xchngbk.l_ord_seq 			= l_xchng_seq_num;
  st_xchngbk.c_req_typ 			= CANCEL;
  st_xchngbk.c_ex_ordr_typ 	= ORDINARY_ORDER;
  st_xchngbk.l_ord_tot_qty 	= st_o_ordbk.l_ord_tot_qty;
  st_xchngbk.c_slm_flg 			= st_o_ordbk.c_slm_flg;
  st_xchngbk.l_dsclsd_qty 	= st_o_ordbk.l_dsclsd_qty;
  st_xchngbk.l_ord_lmt_rt 	= st_o_ordbk.l_ord_lmt_rt;
  st_xchngbk.l_stp_lss_tgr 	= st_o_ordbk.l_stp_lss_tgr;
  st_xchngbk.c_plcd_stts 		= 'R'; 
  st_xchngbk.c_spl_flg 			= st_o_ordbk.c_spl_flg;
  st_xchngbk.l_quote 				= 0;
  st_xchngbk.c_oprn_typ 		= INSERTION_ON_ORDER_MODIFICATION;

  strcpy	( st_xchngbk.c_valid_dt ,st_o_ordbk.c_valid_dt);
  strcpy 	( st_xchngbk.c_rqst_tm , (char *)c_sys_dt.arr );
  strcpy	( st_xchngbk.c_qt_tm, "\0" );


  /*** ver 6.3 starts ***/

  if( c_nkd_blkd_flg == 'Z' )
  {
    sprintf(st_xchngbk.c_ip_address,"%c",c_nkd_blkd_flg);
  }
  /** ver 6.3 ends **/
  if( c_fum_mrkt_typ == EXTND_MRKT && c_fcm_mrkt_typ == EXTND_MRKT )
  {
    st_xchngbk.c_mkrt_typ = 'X';
  }
  else
  {
    st_xchngbk.c_mkrt_typ = 'N';
  }

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"SPAN FLAG IS :%c:",st_xchngbk.c_spn_flg);
	}
	st_xchngbk.l_session_id=st_usrprfl.l_session_id; /**ver 6.6 **/

	i_rtrn_xchngbk  = fn_spnupd_xchngbk ( c_ServiceName,
                                      	&st_xchngbk,
                                      	c_err_msg
                                    	);


  if ( i_rtrn_xchngbk !=  0 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	st_i_ordbk.c_oprn_typ = UPDATE_MOD_CNTR;

  /*** ver 6.1 starts ***/
  if( c_g_fc_flg == 'I' && (st_o_ordbk.c_prd_typ != SLTP_FUTUREPLUS && st_o_ordbk.c_prd_typ != OPTIONPLUS && st_o_ordbk.c_spl_flg != ROLLOVER_WITH_SPREAD ))
  {
      EXEC SQL
        UPDATE  FOD_FO_ORDR_DTLS
        SET     FOD_FC_FLAG     = :c_g_fc_flg 
        WHERE   FOD_ORDR_RFRNC  = :st_i_ordbk.c_ordr_rfrnc;
       
       if( SQLCODE != 0 )
       {
     		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		   }     
  }
  /*** ver 6.1 ends ***/

	i_returncode  = fn_spnupd_ordrbook ( c_ServiceName,
                                    &st_i_ordbk,
                                    &st_err_msg
                                  );

  if ( i_returncode != SUCC_BFR )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if ( st_o_ordbk.c_ordr_stts == REQUESTED )
  {
    st_xchngbk.c_plcd_stts 			= ACCEPT;
    st_xchngbk.c_rms_prcsd_flg	= NOT_PROCESSED;
    st_xchngbk.l_ors_msg_typ 		= ORS_CAN_ORD_ACPT;
    st_xchngbk.l_dwnld_flg 			= NOT_DOWNLOAD;
    st_xchngbk.d_jiffy 					= 0;
    st_xchngbk.c_oprn_typ 			= UPDATION_ON_EXCHANGE_RESPONSE;
    strcpy( st_xchngbk.c_ack_tm, (char *) c_sys_dt.arr);
    strcpy( st_xchngbk.c_entry_dt_tm, (char *) c_sys_dt.arr);
    strcpy( st_xchngbk.c_xchng_rmrks, "\0");
     
    /*** ver 5.2 starts ***/
    if(DEBUG_MSG_LVL_0)
    {
        fn_userlog(c_ServiceName,"REQUESTED ORS_CAN_ORD_ACPT st_xchngbk.l_xchng_can_qty is :%ld: and st_xchngbk.l_ors_msg_typ is :%ld:",st_xchngbk.l_xchng_can_qty,st_xchngbk.l_ors_msg_typ);
    }
    st_xchngbk.l_xchng_can_qty = 0; 
    /*** ver 5.2 ends ***/
		st_xchngbk.l_session_id=st_usrprfl.l_session_id; /**ver 6.6 **/
 
		i_rtrn_xchngbk  = fn_spnupd_xchngbk	( c_ServiceName,
    	                                  	&st_xchngbk,
        	                              	c_err_msg
          	                          	);

    if ( i_rtrn_xchngbk !=  0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

	ptr_fml_Sbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Sbuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31155", TPMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
    /*tpfree((char *)ptr_fml_Sbuf);	Commented In VQC	***/
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  ptr_fml_Rbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );

  if ( ptr_fml_Rbuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31160", TPMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
    tpfree((char *)ptr_fml_Sbuf);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


    fn_cpy_ddr ( st_xchngbk.c_rout_crt );

		i_err [0] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_xchngbk.c_rout_crt,0);
    i_ferr[0] = Ferror32;
    i_err [1] = Fadd32(ptr_fml_Sbuf,FFO_ORDR_RFRNC, (char *)st_xchngbk.c_ordr_rfrnc,0);
    i_ferr[1] = Ferror32;
    i_err [2] = Fadd32(ptr_fml_Sbuf,FFO_ORS_MSG_TYP, (char *)&st_xchngbk.l_ors_msg_typ,0);
    i_ferr[2] = Ferror32;
    i_err [3] = Fadd32(ptr_fml_Sbuf,FFO_MDFCTN_CNTR, (char *)&st_xchngbk.l_mdfctn_cntr,0);
    i_ferr[3] = Ferror32;
    i_err [4] = Fadd32(ptr_fml_Sbuf,FFO_ACK_TM, (char *)st_xchngbk.c_ack_tm,0);
    i_ferr[4] = Ferror32;
    i_err [5] = Fadd32(ptr_fml_Sbuf,FFO_PREV_ACK_TM, (char *)st_xchngbk.c_entry_dt_tm,0);
    i_ferr[5] = Ferror32;
    /*** ver 5.2 starts ***/
    i_err [6] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CAN_QTY,(char *)&st_xchngbk.l_xchng_can_qty,0);
    i_ferr[6] = Ferror32;
    /*** ver 5.2 ends ***/
    for (i = 0;i < 7 ;i++)
    {
      if(i_err[i] == -1 )
      {
        fn_userlog( c_ServiceName, "Error in :%d:",i );
        fn_errlog( c_ServiceName, "S31165", Fstrerror32( i_ferr[i]),c_err_msg );
        tpfree((char *)ptr_fml_Sbuf);
        tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

		i_returncode  = tpcall  ( "SFO_PRCS_RSP", ( char * ) ptr_fml_Sbuf, 0, ( char ** ) &ptr_fml_Rbuf, &l_recvbuf, 0);

		
    if ( i_returncode != SUCC_BFR )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
      tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
      tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		tpfree((char *)ptr_fml_Sbuf);   /*  VQC */
  	tpfree((char *)ptr_fml_Rbuf);   /*  VQC */
  }

  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );   /** ver 5.8 **/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
   /*** Ver 6.9 Start ***/
  i_returncode = fn_upd_mrgn_reporting(st_pstn_actn.c_cln_mtch_accnt,
                                       st_pstn_actn.c_xchng_cd,
                                       c_ServiceName,
                                       c_err_msg
                                      );
  if( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "S31170", LIBMSG, c_err_msg );
    fn_userlog ( c_ServiceName, "ERROR in fn_upd_mrgn_reporting");
  }
  /*** Ver 6.9 Ends ***/

  /*** Commented in Ver 5.9 for core ***
	if ( i_trnsctn == LOCAL_TRNSCTN )
  {
    * To post the Trigger in Tux3 Domain Call the service SFO_FOS_TRG *

    strcpy ( c_fno_dmn_nm, "FNO" );
    strcpy ( c_fno_trg_nm, "TRG_LOOK_TAB" );
    strcpy ( c_fno_trg_dat, "TRG_LOOK_TAB" );

    i_returncode = fn_call_svc_fml ( c_ServiceName,
                                    c_err_msg,
                                    "SFO_FOS_TRG",
                                    0,
                                    4,
                                    0,
                                    FFO_DMN_NM, (char *)c_fno_dmn_nm,
                                    FFO_TRG_NM, (char *)c_fno_trg_nm,
                                    FFO_ABT_TRG_DATA, (char *)c_fno_trg_dat,
                                    FFO_ABT_FILTER, (char *)st_xchngbk.c_pipe_id);

    if ( i_returncode != SUCC_BFR )
    {
      fn_errlog( c_ServiceName, "S31175", LIBMSG, c_err_msg  );
    }

  }  ***/

  i_actn_id = 0;    /** Ver 2.1 **/
  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /** Ver 2.1 **/
  /***tpreturn( TPSUCCESS, 0, ( char * )NULL, 0 , 0 );  Commented In Ver 2.1  ***/
  tpreturn( TPSUCCESS, 0, ( char * )ptr_fml_Ibuf, 0 , 0 );  		/** Ver 2.1 **/
}


int fn_check_ord_spn( char *c_ServiceName,
                  		struct st_orderbook *ptr_o_st_ordbook,
                  		char *c_fum_mrkt_typ,    
                  		char *c_fcm_mrkt_typ,   
                  		struct st_err_msg *ptr_st_err_msg
		 								)
{

 /* char c_err_msg[256];  VQC */
  char c_exg_crrnt_stts='\0'; /* Variable is initialised in  VQC */
  char c_exg_extnd_stts='\0'; /* Variable is initialised in  VQC */   
  char c_fum_mkt_typ='\0'; /* Variable is initialised in  VQC */     
  char c_fcm_mkt_typ='\0'; /* Variable is initialised in  VQC */   
	char c_exg_ovrnght_stts='\0';         /***  Ver 1.7 *** * Variable is initialised in VQC */
  char c_exg_ovrnght_trd_dt[23] ="\0";     /*** ver 5.8 VQC ***  Ver 1.7 ***/ 

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"SPAN	-	Inside Function fn_check_ord_spn.");
		fn_userlog(c_ServiceName,"SPAN	-	Exchange Code Is :%s:",ptr_o_st_ordbook->c_xchng_cd);
	}

  EXEC SQL
     SELECT EXG_CRRNT_STTS,			/***	Ver 4.4	***/
            EXG_EXTND_MRKT_STTS,
						EXG_TMP_MKT_STTS,                           /*** Ver 1.7  ***/
            TO_CHAR ( EXG_TMP_TRD_DT , 'dd-Mon-yyyy' )  /*** Ver 1.7  ***/  
     INTO   :c_exg_crrnt_stts,
            :c_exg_extnd_stts,
						:c_exg_ovrnght_stts,                        /*** Ver 1.7  ***/
            :c_exg_ovrnght_trd_dt                       /*** Ver 1.7  ***/   
     FROM   EXG_XCHNG_MSTR
     where  EXG_XCHNG_CD = :ptr_o_st_ordbook->c_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31180",SQLMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

	/*** Commented In Ver 3.2 ***

  EXEC SQL
        SELECT fcm_mrkt_typ
        INTO   :c_fcm_mkt_typ
        FROM   fcm_fo_cntrct_mstr
        WHERE  fcm_xchng_cd   =:ptr_o_st_ordbook->c_xchng_cd
        *** AND    fcm_prdct_typ  =decode(:ptr_o_st_ordbook->c_prd_typ,'P','F',:ptr_o_st_ordbook->c_prd_typ)	*** Commented in Ver 1.9 ***
				*** AND    fcm_prdct_typ  =decode(:ptr_o_st_ordbook->c_prd_typ,'P','F','U','F',:ptr_o_st_ordbook->c_prd_typ) *** Ver 1.9 Commented In Ver 2.6 ***
        AND    fcm_prdct_typ  =decode(:ptr_o_st_ordbook->c_prd_typ,'P','F','U','F','I','O',:ptr_o_st_ordbook->c_prd_typ)  *** Ver 2.6  ***
        AND    fcm_undrlyng   =:ptr_o_st_ordbook->c_undrlyng
        AND    fcm_expry_dt   =:ptr_o_st_ordbook->c_expry_dt
        AND    fcm_exer_typ   =:ptr_o_st_ordbook->c_exrc_typ
        AND    fcm_opt_typ    =:ptr_o_st_ordbook->c_opt_typ
        AND    fcm_strk_prc   =:ptr_o_st_ordbook->l_strike_prc;
	
	*** Ver 3.2 Comment Ends ***/
	
	/*** Ver 3.2 Starts ***/
	
  EXEC SQL
        SELECT FTQ_MRKT_TYP			/***	Ver 4.4	***/
        INTO   :c_fcm_mkt_typ
        FROM   FTQ_FO_TRD_QT
        WHERE  FTQ_XCHNG_CD   =:ptr_o_st_ordbook->c_xchng_cd
				AND    FTQ_PRDCT_TYP  =DECODE(:ptr_o_st_ordbook->c_prd_typ,'P','F','U','F','I','O',:ptr_o_st_ordbook->c_prd_typ)
        AND    FTQ_UNDRLYNG   =:ptr_o_st_ordbook->c_undrlyng
        AND    FTQ_EXPRY_DT   =:ptr_o_st_ordbook->c_expry_dt
        AND    FTQ_EXER_TYP   =:ptr_o_st_ordbook->c_exrc_typ
        AND    FTQ_OPT_TYP    =:ptr_o_st_ordbook->c_opt_typ
        AND    FTQ_STRK_PRC   =:ptr_o_st_ordbook->l_strike_prc;	

	/*** Ver 3.2 Ends ***/


  if ( SQLCODE != 0 )
  {
     fn_errlog( c_ServiceName, "S31185",SQLMSG,ptr_st_err_msg->c_err_msg);
     return FAILURE;
  }

  if( DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Span Cancel - Trade Quote Market Type Is :%c:",c_fcm_mkt_typ); /** Added in Ver 3.2 **/
  }

	*c_fcm_mrkt_typ = c_fcm_mkt_typ;

  EXEC SQL
        SELECT FUM_MRKT_TYP			/***	Ver 4.4	***/
        INTO   :c_fum_mkt_typ
        FROM   FUM_FO_UNDRLYNG_MSTR
        WHERE  FUM_XCHNG_CD  =:ptr_o_st_ordbook->c_xchng_cd
        /*** AND    fum_prdct_typ =decode(:ptr_o_st_ordbook->c_prd_typ,'P','F',:ptr_o_st_ordbook->c_prd_typ) *** Commented in Ver 1.9 ***/
				/***  AND    fum_prdct_typ =decode(:ptr_o_st_ordbook->c_prd_typ,'P','F','U','F',:ptr_o_st_ordbook->c_prd_typ) *** Ver
 1.9  -- Commented In Ver 2.6 ***/
        AND    FUM_PRDCT_TYP =DECODE(:ptr_o_st_ordbook->c_prd_typ,'P','F','U','F','I','O',:ptr_o_st_ordbook->c_prd_typ)   /**
* Ver 2.6 ***/
        AND    FUM_UNDRLYNG  =:ptr_o_st_ordbook->c_undrlyng;

  if ( SQLCODE != 0 )
  {
     fn_errlog( c_ServiceName, "S31190",SQLMSG,ptr_st_err_msg->c_err_msg);
     return FAILURE;
  }

  *c_fum_mrkt_typ = c_fum_mkt_typ;

	/** Orders cannnot be cancelled when the Exchange is under Expiry **/

	/*** if ( c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY ) Commented In Ver 1.7 ***/
  if ( c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY && c_exg_ovrnght_stts != EXCHANGE_OPEN ) /*** Ver 1.7 ***/
  {
    if( c_exg_extnd_stts == EXCHANGE_UNDER_EXPIRY )
    {
      fn_errlog( c_ServiceName, "B28518",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
    else
    {

      if (c_fum_mkt_typ == NORMAL_MRKT )     /***  Underlying Level Check  ***/
      {
				if(DEBUG_MSG_LVL_3)
				{
        	fn_userlog( c_ServiceName,"This Underlying Is Disabled For Extended Market Hours");
				}

        fn_errlog( c_ServiceName, "B66066",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }

      if ( c_fcm_mkt_typ == NORMAL_MRKT )    /***  Contract Level Check  ***/
      {
				if(DEBUG_MSG_LVL_3)
				{
        	fn_userlog( c_ServiceName,"This Contract Is Disabled For Extended Market Hours");
				}
        fn_errlog( c_ServiceName, "B66066",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
    }

  }

	if( c_exg_ovrnght_stts == EXCHANGE_OPEN && c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY) /*** Ver 1.7 ***/
  {
    if ( strcmp(c_exg_ovrnght_trd_dt,ptr_o_st_ordbook->c_trd_dt)!=0)
    {
        fn_userlog( c_ServiceName," Cannot Cancel a order placed in Normal Market hour when market is under expiry ");
        fn_errlog( c_ServiceName, "B28518",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
    }

  }

  /** Cancellation of order is possible only in REQUESTED, ORDERED **/
  /** and PARTIALLY_EXECUTED states                                **/
   
   if( DEBUG_MSG_LVL_3 )   /*** Ver 3.3 ***/
    {
      fn_userlog(c_ServiceName, "ptr_o_st_ordbook->c_ordr_stts [%c] ", ptr_o_st_ordbook->c_ordr_stts
);
    }

  if ( ( ptr_o_st_ordbook->c_ordr_stts != REQUESTED ) &&
       ( ptr_o_st_ordbook->c_ordr_stts != ORDERED ) &&
       ( ptr_o_st_ordbook->c_ordr_stts != PARTIALLY_EXECUTED ) )
  {
    fn_errlog( c_ServiceName, "B28533", DEFMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  return SUCCESS;
}

int fn_cal_can_pos  ( char  *c_ServiceName,
                      char  *c_err_msg,
                      struct st_pstn_actn *ptr_st_pstn_actn
                    )
{
  char  c_upos_avl='\0';  /* variable is initialised in  VQC */
	char  c_expry_dt_MTM[22] ="\0";      /*** ver 5.8 VQC ***/
  char  c_bnk_accnt_MTM[13] ="\0";     /*** ver 5.8 VQC ***/
  char  c_time[21] ="\0";              /*** ver 5.8 VQC ***/ 
  char  c_filetime[9] ="\0";           /*** ver 5.8 VQC ***/  
	/***	Commented In VQC
  char  c_filename[100];
  char  c_filedata[1000]; 
	****************************/
  char c_xchng_date[ 11+1 ]   ="\0";     /** Ver 1.2 ** initialzed in ver 5.8 VQC **/
  char c_clm_mtch_accnt[10+1] ="\0";     /** Ver 1.2 ** initialzed in ver 5.8 VQC **/
  char c_xchng_cd[3+1]        ="\0";     /** Ver 1.2 ** initialzed in ver 5.8 VQC  **/
  char c_rqst_type='\0';                 /** Ver 1.2 ** Variable is initialised in  VQC */
/*varchar c_trade_dt[12];  VQC */
  char c_ucc_cd[13] = "\0";  /*** Added in VER 6.9 ***/
  char c_extra_update='\0'; /*** ver 6.0  ***/
  double d_trigger_prc=0.0; /** ver 6.0 **/
  int i_returncode=0; /* variable is initialised in VQC */

	long  l_expsr_MTM  			= 0;
  long  l_min_expsr_MTM		=	0;
  long  l_span_val_MTM		= 0;
  long  l_span_mltplr_MTM	=	0;
 /*long  l_can_qty					= 0;   VQC */
  long  li_grpid          = 0;   /** Ver 1.2 **/

	double d_bft_amt_MTM 		= 0.0;
  double d_alctd_amt_MTM 	= 0.0;
  double d_plg_amt_MTM 		= 0.0;
	double d_tot_shr_plgd_amt_MTM = 0.0;    /** Ver 1.2 **/
  double d_nwb_amt_MTM    = 0.0;          /** Ver 1.2 **/
  double d_eab_amt_MTM    = 0.0;          /** Ver 1.2 **/
  double d_current_limit  = 0.0;          /** Ver 1.2 **/
  double d_available      = 0.0;          /** Ver 1.2 **/
  double d_shortage       = 0.0;          /** Ver 1.2 **/
  double d_fdr_amt_MTM    = 0.0;          /** Ver 2.7 **/
  double d_cdx_plg_amt    = 0.0;          /** Ver 6.8 **/
  double d_mco_plg_amt    = 0.0;          /** Ver 6.8 **/

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName,"Inside Function fn_cal_pos.");
	}

  rtrim(ptr_st_pstn_actn->c_cln_mtch_accnt);
  rtrim(ptr_st_pstn_actn->c_undrlyng);
  rtrim(ptr_st_pstn_actn->c_expry_dt);
  rtrim(ptr_st_pstn_actn->c_ref_rmrks);

  fn_init_ddr_val ( ptr_st_pstn_actn->c_rout_crt );

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog ( c_ServiceName,"c_user_id        :%s:",ptr_st_pstn_actn->c_user_id );
    fn_userlog ( c_ServiceName,"l_session_id      :%ld:",ptr_st_pstn_actn->l_session_id );
    fn_userlog ( c_ServiceName,"c_cln_mtch_accnt :%s:",ptr_st_pstn_actn->c_cln_mtch_accnt );
    fn_userlog ( c_ServiceName,"c_xchng_cd       :%s:",ptr_st_pstn_actn->c_xchng_cd );
    fn_userlog ( c_ServiceName,"c_prd_typ        :%c:",ptr_st_pstn_actn->c_prd_typ );
    fn_userlog ( c_ServiceName,"c_undrlyng       :%s:",ptr_st_pstn_actn->c_undrlyng );
    fn_userlog ( c_ServiceName,"c_expry_dt       :%s:",ptr_st_pstn_actn->c_expry_dt );
    fn_userlog ( c_ServiceName,"c_exrc_typ       :%c:",ptr_st_pstn_actn->c_exrc_typ );
    fn_userlog ( c_ServiceName,"l_actn_typ       :%ld:",ptr_st_pstn_actn->l_actn_typ );
    fn_userlog ( c_ServiceName,"c_trnsctn_flw    :%c:",ptr_st_pstn_actn->c_trnsctn_flw );
    fn_userlog ( c_ServiceName,"l_orgnl_qty      :%ld:",ptr_st_pstn_actn->l_orgnl_qty );
    fn_userlog ( c_ServiceName,"l_orgnl_rt       :%ld:",ptr_st_pstn_actn->l_orgnl_rt );
    fn_userlog ( c_ServiceName,"l_new_qty        :%ld:",ptr_st_pstn_actn->l_new_qty );
    fn_userlog ( c_ServiceName,"l_new_rt         :%ld:",ptr_st_pstn_actn->l_new_rt );
    fn_userlog ( c_ServiceName,"l_exec_qty       :%ld:",ptr_st_pstn_actn->l_exec_qty );
    fn_userlog ( c_ServiceName,"l_exec_rt        :%ld:",ptr_st_pstn_actn->l_exec_rt );
    fn_userlog ( c_ServiceName,"l_fresh_qty      :%ld:",ptr_st_pstn_actn->l_fresh_qty );
    fn_userlog ( c_ServiceName,"l_cover_qty      :%ld:",ptr_st_pstn_actn->l_cover_qty );
    fn_userlog ( c_ServiceName,"d_add_mrgn_amt   :%lf:",ptr_st_pstn_actn->d_add_mrgn_amt );
    fn_userlog ( c_ServiceName,"l_curr_rt        :%ld:",ptr_st_pstn_actn->l_curr_rt );
   /** fn_userlog ( c_ServiceName,"c_ref_rmrks      :%s:",ptr_st_pstn_actn->c_ref_rmrks ); cmmted in ver 5.8 **/
  }
 
  /** ver 5.8 Starts **/

  if(DEBUG_MSG_LVL_4)
  {
   fn_userlog ( c_ServiceName,"c_ref_rmrks      :%s:",ptr_st_pstn_actn->c_ref_rmrks ); 
  }
 
  /** ver 5.8 Ends **/

  c_upos_avl = 'Y';

	EXEC SQL
		SELECT  FUS_CLM_MTCH_ACCNT,
            FUS_XCHNG_CD,
            FUS_INDSTK,
            FUS_UNDRLYNG,
            FUS_UIBUY_QTY,
            FUS_UIBUY_VAL,
            FUS_UISELL_QTY,
            FUS_UISELL_VAL,
            FUS_UEXBUY_QTY,
            FUS_UEXBUY_VAL,
            FUS_UEXSELL_QTY,
            FUS_UEXSELL_VAL,
            FUS_UBUY_EXCTD_QTY,
            FUS_USELL_EXCTD_QTY,
            FUS_UOPNPSTN_FLW,
            FUS_UOPNPSTN_QTY,
            FUS_UOPNPSTN_VAL,
            FUS_UMTM_OPN_VAL,
            FUS_INITIAL_MRGN,
            FUS_SPAN_WEMULT_MRGN,
            FUS_EBA_EXPR_MRGN,
            FUS_USPAN_WENOV_MRGN,
            FUS_MULTIPLIER,
            FUS_USPAN_NENOV_MRGN,
            FUS_NET_OPTN_VAL,
            NVL(FUS_MIN_MRGN,0),
            NVL(FUS_MTM_FLG,'O'),
            FUS_BLCKD_PL,
            FUS_REQD_INITIAL_MRGN
    INTO    :st_undpstn_crrnt.c_cln_mtch_accnt,
            :st_undpstn_crrnt.c_xchng_cd,
            :st_undpstn_crrnt.c_indstk,
            :st_undpstn_crrnt.c_undrlyng,
            :st_undpstn_crrnt.l_uibuy_qty,
            :st_undpstn_crrnt.d_uibuy_val,
            :st_undpstn_crrnt.l_uisell_qty,
            :st_undpstn_crrnt.d_uisell_val,
            :st_undpstn_crrnt.l_uexbuy_qty,
            :st_undpstn_crrnt.d_uexbuy_val,
            :st_undpstn_crrnt.l_uexsell_qty,
            :st_undpstn_crrnt.d_uexsell_val,
            :st_undpstn_crrnt.l_ubuy_exctd_qty,
            :st_undpstn_crrnt.l_usell_exctd_qty,
            :st_undpstn_crrnt.c_uopnpstn_flw,
            :st_undpstn_crrnt.l_uopnpstn_qty,
            :st_undpstn_crrnt.d_uopnpstn_val,
            :st_undpstn_crrnt.d_umtm_opn_val,
						:st_undpstn_crrnt.d_initial_mrgn,
            :st_undpstn_crrnt.d_span_wemult_mrgn,
            :st_undpstn_crrnt.d_eba_expr_mrgn,
            :st_undpstn_crrnt.d_uspan_wenov_mrgn,
            :st_undpstn_crrnt.d_multpr,
            :st_undpstn_crrnt.d_uspan_nenov_mrgn,
            :st_undpstn_crrnt.d_net_optn_val,
            :st_undpstn_crrnt.d_min_mrgn,
            :st_undpstn_crrnt.c_mtm_flg,
            :st_undpstn_crrnt.d_blckd_pl,
            :st_undpstn_crrnt.d_reqd_initial_mrgn

    FROM    FUS_FO_UNDRLYNG_SPN_PSTN
    WHERE   FUS_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND     FUS_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
    AND     FUS_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng;

    if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog ( c_ServiceName, "S31195", SQLMSG, c_err_msg );
      return -1;
    }

  /**** If a position doesnot exists, initialise the position values to default ****/

  if ( SQLCODE == NO_DATA_FOUND )
  {
		strcpy( st_undpstn_crrnt.c_cln_mtch_accnt, ptr_st_pstn_actn->c_cln_mtch_accnt );
    strcpy( st_undpstn_crrnt.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
    strcpy( st_undpstn_crrnt.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
    st_undpstn_crrnt.c_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
    st_undpstn_crrnt.l_uibuy_qty= 0;
    st_undpstn_crrnt.d_uibuy_val= 0;
    st_undpstn_crrnt.l_uisell_qty= 0;
    st_undpstn_crrnt.d_uisell_val= 0;
    st_undpstn_crrnt.l_uexbuy_qty= 0;
    st_undpstn_crrnt.d_uexbuy_val= 0;
    st_undpstn_crrnt.l_uexsell_qty= 0;
    st_undpstn_crrnt.d_uexsell_val= 0;
    st_undpstn_crrnt.l_ubuy_exctd_qty= 0;
    st_undpstn_crrnt.l_usell_exctd_qty = 0;
    st_undpstn_crrnt.c_uopnpstn_flw = 'N';
    st_undpstn_crrnt.l_uopnpstn_qty = 0;
    st_undpstn_crrnt.d_uopnpstn_val = 0;
    st_undpstn_crrnt.d_umtm_opn_val = 0;
    st_undpstn_crrnt.d_initial_mrgn = 0;
    st_undpstn_crrnt.d_span_wemult_mrgn = 0;
    st_undpstn_crrnt.d_eba_expr_mrgn  = 0;
    st_undpstn_crrnt.d_uspan_wenov_mrgn = 0;
    st_undpstn_crrnt.d_multpr = 0;
    st_undpstn_crrnt.d_uspan_nenov_mrgn = 0;
    st_undpstn_crrnt.d_net_optn_val = 0;
    st_undpstn_crrnt.d_min_mrgn = 0;
    st_undpstn_crrnt.d_blckd_pl = 0;
    st_undpstn_crrnt.d_reqd_initial_mrgn  = 0;
    st_undpstn_crrnt.d_umtm_opn_val= 0;
		st_undpstn_crrnt.c_mtm_flg	=	'O';
    c_mtm_flag = 'O';
    c_upos_avl = 'N';
		
  }

  if ( ( c_mtm_flag == UNDER_MTM ) && ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) && ( ptr_st_pstn_actn->l_session_id != 0 ))
  {
    fn_errlog(c_ServiceName, "B28009", DEFMSG, c_err_msg );
    return -1;
  }

	/******** Set UPOS_to_be fields to default ********/
	
  strcpy( st_undpstn_tobe.c_cln_mtch_accnt, ptr_st_pstn_actn->c_cln_mtch_accnt );
  strcpy( st_undpstn_tobe.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
  strcpy( st_undpstn_tobe.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
  st_undpstn_tobe.c_indstk            = ptr_st_pstn_actn->c_ctgry_indstk;
  st_undpstn_tobe.l_uibuy_qty         = 0;
  st_undpstn_tobe.d_uibuy_val         = 0;
  st_undpstn_tobe.l_uisell_qty        = 0;
  st_undpstn_tobe.d_uisell_val        = 0;
  st_undpstn_tobe.l_uexbuy_qty        = 0;
  st_undpstn_tobe.d_uexbuy_val        = 0;
  st_undpstn_tobe.l_uexsell_qty       = 0;
  st_undpstn_tobe.d_uexsell_val       = 0;
  st_undpstn_tobe.l_ubuy_exctd_qty    = 0;
  st_undpstn_tobe.l_usell_exctd_qty   = 0;
  st_undpstn_tobe.c_uopnpstn_flw      = 'N';
  st_undpstn_tobe.l_uopnpstn_qty      = 0;
  st_undpstn_tobe.d_uopnpstn_val      = 0;
  st_undpstn_tobe.d_umtm_opn_val      = 0;
  st_undpstn_tobe.d_initial_mrgn      = st_undpstn_crrnt.d_initial_mrgn ;
  st_undpstn_tobe.d_span_wemult_mrgn  = st_undpstn_crrnt.d_span_wemult_mrgn ;
  st_undpstn_tobe.d_eba_expr_mrgn     = st_undpstn_crrnt.d_eba_expr_mrgn ;
  st_undpstn_tobe.d_uspan_wenov_mrgn  = st_undpstn_crrnt.d_uspan_wenov_mrgn ;
  st_undpstn_tobe.d_multpr            = st_undpstn_crrnt.d_multpr ;
  st_undpstn_tobe.d_uspan_nenov_mrgn  = st_undpstn_crrnt.d_uspan_nenov_mrgn ;
  st_undpstn_tobe.d_net_optn_val      = st_undpstn_crrnt.d_net_optn_val ;
  st_undpstn_tobe.d_min_mrgn          = st_undpstn_crrnt.d_min_mrgn ;
  st_undpstn_tobe.d_blckd_pl          = st_undpstn_crrnt.d_blckd_pl ;
  st_undpstn_tobe.d_reqd_initial_mrgn = st_undpstn_crrnt.d_reqd_initial_mrgn ;
  st_undpstn_tobe.d_umtm_opn_val      = 0;
  st_undpstn_tobe.c_mtm_flg						=	st_undpstn_crrnt.c_mtm_flg;

  d_opt_prmum = 0.0;

	i_returncode  = fn_call_canspn_actn ( c_ServiceName,
																				c_pipe_id,
                                        ptr_st_pstn_actn,
                                        &st_undpstn_crrnt,
                                        &st_undpstn_tobe,
                                        ptr_st_err_msg
                                      );

  if ( i_returncode != 0 )
  {
		switch( i_returncode )
    {
      case INSUFFICIENT_LIMITS  :

        fn_userlog(c_ServiceName,"SPAN - Inside INSUFFICIENT_LIMITS.");
        fn_errlog(c_ServiceName, "B21007", DEFMSG, c_err_msg );

        return  INSUFFICIENT_LIMITS;

      break;

			/**** Ver 5.4 Added ****/
      case PHYDLVRY_MTM :

        fn_errlog(c_ServiceName, "B28009", DEFMSG, c_err_msg );
        return -1;

      break;

    }
    return -1;
  }

	if ( strcmp(st_usrprfl.c_user_id,"system") == 0 && st_usrprfl.l_session_id  ==  0 )
  {
		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"SPAN - Inside Pre-SquareOff Case.");
		}

    EXEC SQL
      SELECT  NVL(FMM_EXPSR,0),
              NVL(FMM_MIN_EXPSR,0),
              NVL(FMM_SPAN_VAL,0),
              NVL(FMM_SPN_MULTPLR,0)
      INTO    :l_expsr_MTM,
              :l_min_expsr_MTM,
              :l_span_val_MTM,
              :l_span_mltplr_MTM
      FROM   FMM_FO_MRGN_MSTR
      WHERE  FMM_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd     /*** Ver 1.3 ***/ 
	 		AND    FMM_PRDCT_TYP = 'F'
      AND    FMM_UNDRLYNG = :ptr_st_pstn_actn->c_undrlyng
      AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
                                   FROM    FCB_FO_CLN_BSKT_ALLTD
                                   WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                   FROM    CLM_CLNT_MSTR
                                   WHERE   CLM_MTCH_ACCNT =:ptr_st_pstn_actn->c_cln_mtch_accnt)) ;
    if ( SQLCODE != 0 )
    {
      fn_userlog(c_ServiceName,"COULDN'T INSERT DATA INTO IMTM REPORT TABLE I");
      fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
    }

    /*** ver 6.0 starts ********/
       EXEC SQL
           SELECT NVL(FCP_TRG_PRC,0)
              INTO :d_trigger_prc
             FROM  FCP_FO_SPN_CNTRCT_PSTN
            WHERE FCP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
              AND      FCP_XCHNG_CD=:ptr_st_pstn_actn->c_xchng_cd
      AND FCP_UNDRLYNG=:ptr_st_pstn_actn->c_undrlyng
      AND FCP_PRDCT_TYP=:ptr_st_pstn_actn->c_prd_typ
      AND FCP_EXPRY_DT=:ptr_st_pstn_actn->c_expry_dt
      AND FCP_STRK_PRC=:ptr_st_pstn_actn->l_strike_prc
      AND FCP_EXER_TYP=:ptr_st_pstn_actn->c_exrc_typ
      AND FCP_OPT_TYP=:ptr_st_pstn_actn->c_opt_typ;

    if ( SQLCODE != 0 )
    {
      fn_userlog(c_ServiceName,"SQLCODE IS TRG PRC|%ld|",SQLCODE);
    }
   /** ver 6.0 ends *********/

    d_fdr_amt_MTM = 0; /*** Ver 2.7 ***/
    EXEC SQL
      SELECT  FAB_BNK_ACCNT,
              FAB_ALCTD_AMT,
              FAB_BFT_AMT,
              FAB_PLG_AMT,
              NVL(FAB_NWB_AMT,0),     /* Ver 1.2 */
              NVL(FAB_FDR_AMT,0)      /* Ver 2.7 */
      INTO    :c_bnk_accnt_MTM,
              :d_alctd_amt_MTM,
              :d_bft_amt_MTM,
              :d_plg_amt_MTM,
              :d_nwb_amt_MTM,          /** Ver 1.2 **/
              :d_fdr_amt_MTM           /** Ver 2.7 **/
      FROM    FAB_FO_ALC_BFT_SMRY
      WHERE   FAB_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

		  if ( SQLCODE != 0 )
    {
      fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
    }

		 /******** Ver 1.2.Starts ********/

    d_tot_shr_plgd_amt_MTM  = 0;
    d_eab_amt_MTM           = 0;

    EXEC SQL
         SELECT  NVL(EAB_PLG_AMT,0) * 100 /* To be inserted in paise */
         INTO    :d_eab_amt_MTM
         FROM    EAB_EQ_ALC_BFT_SMRY
         WHERE   EAB_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

    if ( SQLCODE != 0 )
    {
       fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
    }

    /*** Ver 6.8 Starts   ***/

     EXEC SQL
     SELECT  NVL(CAB_PLG_AMT,0)*100
     INTO    :d_cdx_plg_amt
     FROM    CAB_CDX_ALC_BFT_SMRY
     WHERE   CAB_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

     if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
     {
       fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
     }

     fn_userlog(c_ServiceName,"d_cdx_plg_amt:%lf:",d_cdx_plg_amt);

     EXEC SQL
     SELECT NVL(CAB_PLG_AMT,0)
     INTO   :d_mco_plg_amt
     FROM   CAB_COD_ALC_BFT_SMRY
     WHERE  CAB_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt ;

     if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
     {
       fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
     }

     fn_userlog(c_ServiceName,"d_mco_plg_amt:%lf:",d_mco_plg_amt);

     d_tot_shr_plgd_amt_MTM  = d_nwb_amt_MTM + d_plg_amt_MTM + d_eab_amt_MTM + d_cdx_plg_amt + d_mco_plg_amt ;

   /***  Ver 6.8 Ends     ***/


   /**  d_tot_shr_plgd_amt_MTM  = d_nwb_amt_MTM + d_plg_amt_MTM + d_eab_amt_MTM;  Commented in Ver 6.8  **/

    /*** Get the current Limit For this Match ***/

    MEMSET(c_clm_mtch_accnt);
    MEMSET(c_xchng_cd);
    MEMSET(c_xchng_date);

    strcpy(c_clm_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
    strcpy(c_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);

    EXEC SQL
			/*** SELECT  EXG_NXT_TRD_DT Commented In Ver 1.7 ***/
      SELECT  GREATEST(EXG_NXT_TRD_DT,EXG_TMP_TRD_DT) /*** Ver 1.7 ***/
      INTO    :c_xchng_date
      FROM    EXG_XCHNG_MSTR
      WHERE   EXG_XCHNG_CD = :c_xchng_cd;

    if( SQLCODE != 0 )
    {
       fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
    }

    c_rqst_type = LIMIT_X ;
    li_grpid  = 0 ;

		EXEC SQL
      EXECUTE
        BEGIN
          LIMIT_CAL
               (:c_clm_mtch_accnt,
                :c_xchng_date,
                :c_rqst_type,
                :li_grpid,
                :c_xchng_cd,
                :d_current_limit,
                :i_returncode
                );
           END;
        END-EXEC;

    if ( i_returncode == -1 )
    {
       fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
    }

    fn_userlog ( c_ServiceName, " Limit for Match Account |%s| is |%lf|",c_clm_mtch_accnt,d_current_limit);

    /** Calculating Shortage for Report **/
		/*** Notional loss not blocked so it should  not in available margin      *****/
    /***d_available = st_undpstn_crrnt.d_initial_mrgn + st_undpstn_crrnt.d_blckd_pl - st_undpstn_tobe.d_ntnl_pl;***/
    d_available = st_undpstn_crrnt.d_initial_mrgn + st_undpstn_crrnt.d_blckd_pl + st_undpstn_tobe.d_ntnl_pl;
    d_shortage  = st_undpstn_tobe.d_reqd_initial_mrgn - d_available;

    /***** End of Ver 1.2 ****/

    EXEC SQL
      SELECT  TO_CHAR(SYSDATE,'dd-Mon-yyyy hh24:mi:ss'),TO_CHAR(SYSDATE,'yyyymmdd')	/***	Ver 4.4	***/
      INTO    :c_time,
              :c_filetime 
      FROM    DUAL ;

    if ( SQLCODE != 0 )
    {
      fn_userlog(c_ServiceName,"COULDN'T INSERT DATA INTO IMTM REPORT TABLE II");
      fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
    }
		strcpy(c_expry_dt_MTM,ptr_st_pstn_actn->c_expry_dt);

		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"Expiry Date Before .TXT Is :%s:",c_expry_dt_MTM);

			fn_userlog(c_ServiceName,"st_undpstn_crrnt.d_reqd_initial_ Is :%lf:",st_undpstn_crrnt.d_reqd_initial_mrgn);
			fn_userlog(c_ServiceName,"st_undpstn_tobe.d_reqd_initial_mrgn Is :%lf:",st_undpstn_tobe.d_reqd_initial_mrgn);
		}

		/*** Ver 1.2 d_current_limit,d_plg_amt_MTM, d_shortage and d_tot_shr_plgd_amt_MTM added for Report ***/
    /*** Ver 2.7 d_fdr_amt_MTM added ***/

		/*** Following commented In Ver 2.9 
		sprintf(c_filename,"%s/%s/fno/span_imtm.txt",tuxgetenv("EBALOG_PATH"),c_filetime);
    sprintf(c_filedata,"%s|%s|%s|%s|%c|%ld|%s|%c|%c|%s|%lf|%lf|%c|%ld|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%c|%c|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf|%lf",c_time,ptr_st_pstn_actn->c_cln_mtch_accnt,ptr_st_pstn_actn->c_xchng_cd,ptr_st_pstn_actn->c_undrlyng,ptr_st_pstn_actn->c_prd_typ,ptr_st_pstn_actn->l_strike_prc,c_expry_dt_MTM,ptr_st_pstn_actn->c_exrc_typ,ptr_st_pstn_actn->c_opt_typ,c_bnk_accnt_MTM,d_alctd_amt_MTM,d_bft_amt_MTM,st_undpstn_tobe.c_uopnpstn_flw,st_undpstn_tobe.l_uopnpstn_qty,st_undpstn_tobe.d_uopnpstn_val,st_undpstn_tobe.d_umtm_opn_val,st_undpstn_crrnt.d_initial_mrgn,st_undpstn_tobe.d_initial_mrgn,st_undpstn_crrnt.d_span_wemult_mrgn,st_undpstn_tobe.d_span_wemult_mrgn,st_undpstn_crrnt.d_eba_expr_mrgn,st_undpstn_tobe.d_eba_expr_mrgn,st_undpstn_crrnt.d_uspan_wenov_mrgn,st_undpstn_tobe.d_uspan_wenov_mrgn,st_undpstn_crrnt.d_multpr,st_undpstn_tobe.d_multpr,st_undpstn_crrnt.d_uspan_nenov_mrgn,st_undpstn_tobe.d_uspan_nenov_mrgn,st_undpstn_crrnt.d_net_optn_val,st_undpstn_tobe.d_net_optn_val,st_undpstn_crrnt.d_min_mrgn,st_undpstn_tobe.d_min_mrgn,st_undpstn_crrnt.c_mtm_flg,st_undpstn_tobe.c_mtm_flg,st_undpstn_crrnt.d_blckd_pl,st_undpstn_tobe.d_blckd_pl,st_undpstn_crrnt.d_reqd_initial_mrgn,st_undpstn_tobe.d_reqd_initial_mrgn,d_plg_amt_MTM,d_tot_shr_plgd_amt_MTM,d_current_limit,d_shortage,d_fdr_amt_MTM);


    fp = (FILE *)fopen(c_filename,"a") ;

    if(fp == NULL)
    {
      fn_userlog(c_ServiceName,"UNABLE TO OPEN FILE FOR MTM");
    }

    fprintf(fp,"%s\n",c_filedata);
    fclose(fp);
		
		Commented In Ver 2.9 Ends ***/
			
		if(DEBUG_MSG_LVL_3)
		{
	  	fn_userlog(c_ServiceName,"SPAN - At End Of Pre-SquareOff Case.");
		}

    fn_userlog(c_ServiceName,"d_trigger_prc Is :%lf:",d_trigger_prc); /** ver 6.0 ***/
		/*** Ver 2.9 Starts ***/
		fn_userlog(c_ServiceName,"Inserting into SIS_SPN_IMTM_SQ_SMRY table .. ");

		EXEC SQL
 		INSERT INTO SIS_SPN_IMTM_SQ_SMRY
 		( SIS_CLM_MTCH_ACCNT,
   		SIS_XCHNG_CD,
   		SIS_UNDRLYNG,
   		SIS_PRDCT_TYP,
   		SIS_EXPRY_DT,
   		SIS_STRK_PRC,
   		SIS_EXER_TYP,
   		SIS_OPT_TYP,
   		SIS_BNK_ACCNT,
   		SIS_ALCTD_AMT,
   		SIS_BFT_AMT,
   		SIS_INTL_MRGN_OLD,
   		SIS_INTL_MRGN_NEW,
   		SIS_SPN_WEMLT_MRGN_OLD,
   		SIS_SPN_WEMLT_MRGN_NEW,
   		SIS_EBA_EXPR_MRGN_OLD,
   		SIS_EBA_EXPR_MRGN_NEW,
   		SIS_USPN_WENOV_MRGN_OLD,
   		SIS_USPN_WENOV_MRGN_NEW,
  	  SIS_USPN_NENOV_MRGN_OLD,
   		SIS_USPN_NENOV_MRGN_NEW,
   		SIS_SPN_MLTPLR_OLD,
   		SIS_SPN_MLTPLR_NEW,
   		SIS_NET_OPTN_VAL_OLD,
   		SIS_NET_OPTN_VAL_NEW,
   		SIS_MIN_MRGN_OLD,
   		SIS_MIN_MRGN_NEW,
   		SIS_MTM_FLG_OLD,
   		SIS_MTM_FLG_NEW,
   		SIS_BLCKD_PL_OLD,
   		SIS_BLCKD_PL_NEW,
   		SIS_REQD_INTL_MRGN_OLD,
   		SIS_REQD_INTL_MRGN_NEW,
   		SIS_TIME,
   		SIS_PLG_AMT,                  
   		SIS_TOT_PLG_AMT,              
   		SIS_CURR_LMT,                 
   		SIS_SHORTAGE,
	 		SIS_FDR_AMT,
      SIS_TRG_PRC /** ver 6.0 **/                  
		)
		VALUES
		(
			:ptr_st_pstn_actn->c_cln_mtch_accnt,                       
			:ptr_st_pstn_actn->c_xchng_cd,                     
			:ptr_st_pstn_actn->c_undrlyng,                                  
			:ptr_st_pstn_actn->c_prd_typ,                                 
			:c_expry_dt_MTM,           
			:ptr_st_pstn_actn->l_strike_prc,
			:ptr_st_pstn_actn->c_exrc_typ,                    
			:ptr_st_pstn_actn->c_opt_typ,                     
			:c_bnk_accnt_MTM,           
			:d_alctd_amt_MTM,                        
			:d_bft_amt_MTM,                   
			:st_undpstn_crrnt.d_initial_mrgn,
			:st_undpstn_tobe.d_initial_mrgn,                
			:st_undpstn_crrnt.d_span_wemult_mrgn,                  
			:st_undpstn_tobe.d_span_wemult_mrgn,                
			:st_undpstn_crrnt.d_eba_expr_mrgn,                  
			:st_undpstn_tobe.d_eba_expr_mrgn,                 
			:st_undpstn_crrnt.d_uspan_wenov_mrgn,                           
			:st_undpstn_tobe.d_uspan_wenov_mrgn,                      
			:st_undpstn_crrnt.d_uspan_nenov_mrgn,                          
			:st_undpstn_tobe.d_uspan_nenov_mrgn,                          
			:st_undpstn_crrnt.d_multpr,          
			:st_undpstn_tobe.d_multpr,                     
			:st_undpstn_crrnt.d_net_optn_val,                  
			:st_undpstn_tobe.d_net_optn_val,                 
			:st_undpstn_crrnt.d_min_mrgn,                        
			:st_undpstn_tobe.d_min_mrgn ,                           
			:st_undpstn_crrnt.c_mtm_flg ,                      
			:st_undpstn_tobe.c_mtm_flg ,                      
			:st_undpstn_crrnt.d_blckd_pl,                       
			:st_undpstn_tobe.d_blckd_pl ,                      
			:st_undpstn_crrnt.d_reqd_initial_mrgn,                  
			:st_undpstn_tobe.d_reqd_initial_mrgn ,                 
			to_date(:c_time,'DD-MON-YYYY HH24:MI:SS'),	            
			:d_plg_amt_MTM ,
			:d_tot_shr_plgd_amt_MTM ,    
			:d_current_limit ,   
			:d_shortage ,
			:d_fdr_amt_MTM,
      :d_trigger_prc /** ver 6.0 ***/
		);

		if ( SQLCODE != 0 )
		{
			fn_userlog(c_ServiceName,"Error while inserting into SIS_SPN_IMTM_SQ_SMRY table .. ");
  		fn_errlog(c_ServiceName, "S31200", SQLMSG, c_err_msg );
  		return -1;
		}

		fn_userlog(c_ServiceName,"Inserting  into SIS_SPN_IMTM_SQ_SMRY table ends  .. ");

		/*** Ver 2.9 Ends  ***/	

  }

  if ( st_undpstn_tobe.l_uopnpstn_qty	> 0 )
  {
    st_undpstn_tobe.c_uopnpstn_flw	= BUY;
  }
  else if ( st_undpstn_tobe.l_uopnpstn_qty	< 0 )
  {
    st_undpstn_tobe.c_uopnpstn_flw	= SELL;
  }
  else
  {
    st_undpstn_tobe.c_uopnpstn_flw	= NEUTRAL;
  }

	/** Update the underlying level position on to the table **/


	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"SPAN - Cancellation MTM Flag Is ;%c:",st_undpstn_tobe.c_mtm_flg);
	}

  if( c_upos_avl == 'N')
  {
		/***  Commented In VQC

     EXEC SQL
			*** SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY') Commented In Ver 1.7 ***
      SELECT TO_CHAR(GREATEST(EXG_NXT_TRD_DT,EXG_TMP_TRD_DT),'DD-Mon-YYYY') *** Ver 1.7 ***
      INTO   :c_trade_dt
      FROM   EXG_XCHNG_MSTR
      WHERE  EXG_XCHNG_CD = :ptr_st_pstn_actn->c_xchng_cd
      AND    EXG_MKT_TYP  = 'D';    

    if ( SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31205", SQLMSG, c_err_msg );
      return -1;
    }
		**************************/
	   /*** Added in VER 6.9 Starts here : Fetching UCC code ***/
    MEMSET(c_ucc_cd);
    EXEC SQL
    SELECT  NVL(RTRIM( CLM_CLNT_CD ),CLM_MTCH_ACCNT )
    INTO  :c_ucc_cd
    FROM  CLM_CLNT_MSTR
    WHERE CLM_MTCH_ACCNT = :st_undpstn_tobe.c_cln_mtch_accnt;
		
    if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_userlog(c_ServiceName,"VER 6.9 -- fn_cal_can_pos : Error while fetching UCCcode for :%s:", st_undpstn_tobe.c_cln_mtch_accnt);
      fn_errlog ( c_ServiceName, "S31210", SQLMSG, c_err_msg );
      return -1;
    }

    rtrim(c_ucc_cd);

    if(DEBUG_MSG_LVL_0)
      fn_userlog(c_ServiceName,"fn_cal_can_pos : MAtch ID :%s: have ucc code :%s:", st_undpstn_tobe.c_cln_mtch_accnt, c_ucc_cd);

    /*** VER 6.9 ends here ***/	
     EXEC SQL
      INSERT INTO FUS_FO_UNDRLYNG_SPN_PSTN
      (
				FUS_CLM_MTCH_ACCNT,
        FUS_XCHNG_CD,
        FUS_UNDRLYNG,
        FUS_INDSTK,
        FUS_UIBUY_QTY,
        FUS_UIBUY_VAL,
        FUS_UISELL_QTY,
        FUS_UISELL_VAL,
        FUS_UEXBUY_QTY,
        FUS_UEXBUY_VAL,
        FUS_UEXSELL_QTY,
        FUS_UEXSELL_VAL,
        FUS_UBUY_EXCTD_QTY,
        FUS_USELL_EXCTD_QTY,
        FUS_UOPNPSTN_FLW,
        FUS_UOPNPSTN_QTY,
        FUS_UOPNPSTN_VAL,
        FUS_UMTM_OPN_VAL,
        FUS_INITIAL_MRGN,
        FUS_SPAN_WEMULT_MRGN,
        FUS_EBA_EXPR_MRGN,
        FUS_USPAN_WENOV_MRGN,
        FUS_MULTIPLIER,
        FUS_USPAN_NENOV_MRGN,
        FUS_NET_OPTN_VAL,
        FUS_MTM_FLG,
        FUS_TRD_DT,
        FUS_NTNL_PL,
        FUS_BLCKD_PL,
        FUS_MIN_MRGN,
        FUS_REQD_INITIAL_MRGN,
        FUS_UCC_CD     /**ver 6.9 **/
      )
      VALUES
      (
				:st_undpstn_tobe.c_cln_mtch_accnt,
        :st_undpstn_tobe.c_xchng_cd,
        :st_undpstn_tobe.c_undrlyng,
        :st_undpstn_tobe.c_indstk,
        :st_undpstn_tobe.l_uibuy_qty,
        :st_undpstn_tobe.d_uibuy_val,
        :st_undpstn_tobe.l_uisell_qty,
        :st_undpstn_tobe.d_uisell_val,
        :st_undpstn_tobe.l_uexbuy_qty,
        :st_undpstn_tobe.d_uexbuy_val,
        :st_undpstn_tobe.l_uexsell_qty,
        :st_undpstn_tobe.d_uexsell_val,
        :st_undpstn_tobe.l_ubuy_exctd_qty,
        :st_undpstn_tobe.l_usell_exctd_qty,
        :st_undpstn_tobe.c_uopnpstn_flw,
        :st_undpstn_tobe.l_uopnpstn_qty,
        :st_undpstn_tobe.d_uopnpstn_val,
        :st_undpstn_tobe.d_umtm_opn_val,
        :st_undpstn_tobe.d_initial_mrgn,
        :st_undpstn_tobe.d_span_wemult_mrgn,
        :st_undpstn_tobe.d_eba_expr_mrgn,
        :st_undpstn_tobe.d_uspan_wenov_mrgn,
        :st_undpstn_tobe.d_multpr,
        :st_undpstn_tobe.d_uspan_nenov_mrgn,
        :st_undpstn_tobe.d_net_optn_val,
        :st_undpstn_tobe.c_mtm_flg,
        :st_undpstn_tobe.c_trd_dt,
        :st_undpstn_tobe.d_ntnl_pl,
        :st_undpstn_tobe.d_blckd_pl,
        :st_undpstn_tobe.d_min_mrgn,
        :st_undpstn_tobe.d_reqd_initial_mrgn,
        :c_ucc_cd        /**ver 6.9 **/
      );

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31215", SQLMSG, c_err_msg );
        return -1;
      }
  }
  else
  {
			/*** if ( strcmp(st_usrprfl.c_user_id,"system") != 0 )  {   Commented on 07-Dec-2011 ***/
		
			if(DEBUG_MSG_LVL_0)
			{ 
				fn_userlog(c_ServiceName,"UPDATE FUS WITH : st_undpstn_tobe.d_blckd_pl=:%lf:",st_undpstn_tobe.d_blckd_pl);
				fn_userlog(c_ServiceName,"UPDATE FUS WITH : st_undpstn_tobe.d_ntnl_pl=:%lf:",st_undpstn_tobe.d_ntnl_pl);
			}

			EXEC SQL
				UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
      	SET     FUS_UIBUY_QTY         = :st_undpstn_tobe.l_uibuy_qty,
        	      FUS_UIBUY_VAL         = :st_undpstn_tobe.d_uibuy_val,
          	    FUS_UISELL_QTY        = :st_undpstn_tobe.l_uisell_qty,
            	  FUS_UISELL_VAL        = :st_undpstn_tobe.d_uisell_val,
              	FUS_UEXBUY_QTY        = :st_undpstn_tobe.l_uexbuy_qty,
   	        	  FUS_UEXBUY_VAL        = :st_undpstn_tobe.d_uexbuy_val,
    	          FUS_UEXSELL_QTY       = :st_undpstn_tobe.l_uexsell_qty,
      	        FUS_UEXSELL_VAL       = :st_undpstn_tobe.d_uexsell_val,
        	      FUS_UBUY_EXCTD_QTY    = :st_undpstn_tobe.l_ubuy_exctd_qty,
          	    FUS_USELL_EXCTD_QTY   = :st_undpstn_tobe.l_usell_exctd_qty,
   		          FUS_UOPNPSTN_FLW      = :st_undpstn_tobe.c_uopnpstn_flw,
              	FUS_UOPNPSTN_QTY      = :st_undpstn_tobe.l_uopnpstn_qty,
             	 	FUS_UOPNPSTN_VAL      = :st_undpstn_tobe.d_uopnpstn_val,
              	FUS_UMTM_OPN_VAL      = :st_undpstn_tobe.d_umtm_opn_val,
              	FUS_INITIAL_MRGN      = :st_undpstn_tobe.d_initial_mrgn,
              	FUS_SPAN_WEMULT_MRGN  = :st_undpstn_tobe.d_span_wemult_mrgn,
              	FUS_EBA_EXPR_MRGN     = :st_undpstn_tobe.d_eba_expr_mrgn,
              	FUS_USPAN_WENOV_MRGN  = :st_undpstn_tobe.d_uspan_wenov_mrgn,
              	FUS_MULTIPLIER        = :st_undpstn_tobe.d_multpr,
              	FUS_USPAN_NENOV_MRGN  = :st_undpstn_tobe.d_uspan_nenov_mrgn,
              	FUS_NET_OPTN_VAL      = :st_undpstn_tobe.d_net_optn_val,
             	 	FUS_MTM_FLG           = :st_undpstn_tobe.c_mtm_flg,
              	FUS_NTNL_PL           = :st_undpstn_tobe.d_ntnl_pl,
              	FUS_BLCKD_PL          = :st_undpstn_tobe.d_blckd_pl,
              	FUS_MIN_MRGN          = :st_undpstn_tobe.d_min_mrgn,
              	FUS_REQD_INITIAL_MRGN = :st_undpstn_tobe.d_reqd_initial_mrgn		/*** Added on 07-Dec-2011 ***/
      	WHERE   FUS_CLM_MTCH_ACCNT    = :ptr_st_pstn_actn->c_cln_mtch_accnt
      	AND     FUS_XCHNG_CD          = :ptr_st_pstn_actn->c_xchng_cd
      	AND     FUS_UNDRLYNG          = :ptr_st_pstn_actn->c_undrlyng;

    	if ( SQLCODE != 0 )
    	{
      	fn_errlog(c_ServiceName, "S31220", SQLMSG, c_err_msg );
      	return -1;
    	}
		/*** Commented on 07-Dec-2011 start ***
		}
		else
		{
			EXEC SQL
        UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
        SET     FUS_UIBUY_QTY         = :st_undpstn_tobe.l_uibuy_qty,
                FUS_UIBUY_VAL         = :st_undpstn_tobe.d_uibuy_val,
                FUS_UISELL_QTY        = :st_undpstn_tobe.l_uisell_qty,
                FUS_UISELL_VAL        = :st_undpstn_tobe.d_uisell_val,
                FUS_UEXBUY_QTY        = :st_undpstn_tobe.l_uexbuy_qty,
                FUS_UEXBUY_VAL        = :st_undpstn_tobe.d_uexbuy_val,
                FUS_UEXSELL_QTY       = :st_undpstn_tobe.l_uexsell_qty,
                FUS_UEXSELL_VAL       = :st_undpstn_tobe.d_uexsell_val
				WHERE   FUS_CLM_MTCH_ACCNT    = :ptr_st_pstn_actn->c_cln_mtch_accnt
        AND     FUS_XCHNG_CD          = :ptr_st_pstn_actn->c_xchng_cd
        AND     FUS_UNDRLYNG          = :ptr_st_pstn_actn->c_undrlyng;

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31225", SQLMSG, c_err_msg );
        return -1;
      }
		}
		*** Commented on 07-Dec-2011 End ***/
  }


   /************** ver 6.0 starts **************/
  c_extra_update = 'N';
  i_returncode  = fn_cal_trg_prc( c_ServiceName , ptr_st_pstn_actn ,c_extra_update,
                                      ptr_st_err_msg  );

  if( i_returncode != 0 )
  {
        fn_errlog(c_ServiceName, "S31230", LIBMSG, c_err_msg );
       fn_userlog ( c_ServiceName, "ERROR in fn_cal_trg_prc");
  }
  /************** ver 6.0 ends *********/

  if ( ( c_mtm_flag == UNDER_MTM ) && ( st_undpstn_tobe.l_uibuy_qty	== 0 ) && ( st_undpstn_tobe.l_uexbuy_qty	== 0 )
        && ( st_undpstn_tobe.l_uisell_qty	== 0 )  && ( st_undpstn_tobe.l_uexsell_qty	== 0 ) )
  {
    ptr_st_pstn_actn->c_mtm_flag = NO_OPEN_ORDERS;
  }
  else if ( c_mtm_flag == UNDER_MTM )
  {
    ptr_st_pstn_actn->c_mtm_flag = FOR_REMARKS_ENTRY;
  }

  return 0;

}


int fn_call_canspn_actn ( char *c_ServiceName,
                       		char *c_pipe_id,
                          struct st_pstn_actn *ptr_st_pstn_actn,
                          struct st_fus_undrlyng_pstn	*ptr_st_undpstn_crrnt,
                          struct st_fus_undrlyng_pstn	*ptr_st_undfut_pos_to_be,
                          struct st_err_msg *ptr_st_err_msg)
{

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  char c_narration_id[4] ="\0";     /** initialised in ver 5.8 VQC  **/
  char c_dr_without_lmt_flg='\0';  /* variable is initialised in VQC */
  char c_prmum_dr_without_lmt_flg='\0'; /* variable is initialised in VQC */
  char c_pos_avl='\0'; /* variable is initialised in VQC */
/*char c_tmp_rmrks [ 133 ] ;  VQC */
  char c_tmp_rmrks_ob [ 133 ] ="\0";   /*ver 6.4 **/
  char c_optbuy_prem_flg = 'N'; /** 6.4 **/ 
  char c_inp_strng1[ 16000 ]   ="\0";   /*** initialised in ver 5.8 VQC **  Changed from 4000 to 16000 in Ver 5.5 ***/
  char c_inp_strng11[ 16000 ]  ="\0";   /*** initialised in ver 5.8 VQC **  Changed from 4000 to 16000 in Ver 5.5 ***/
  char c_inp_strng2[ 16000 ]   ="\0";   /*** initialised in ver 5.8 VQC **  Changed from 4000 to 16000 in Ver 5.5 ***/
  char c_inp_strng22[ 16000 ]  ="\0";   /*** initialised in ver 5.8 VQC **  Changed from 4000 to 16000 in Ver 5.5 ***/
 	char c_inp_strng[ 16000 ]    ="\0";   /**  initialised in ver 5.8 VQC  **/
  char c_op_strng[ 16000 ]     ="\0";   /**  initialised in ver 5.8 VQC  **/
  char c_op_strng1[ 16000 ]    ="\0";   /**  initialised in ver 5.8 VQC  **/
  char c_op_strng2[ 16000 ]    ="\0";   /**  initialised in ver 5.8 VQC  **/
  char c_seq_num1[12000]       ="\0";   /**  initialised in ver 5.8 VQC  **/
  char c_seq_num2[12000]       ="\0";   /**  initialised in ver 5.8 VQC  **/

	/***	Commented In VQC
	char c_max_opn_qty[2000];  
  char c_min_opn_qty[2000]; 
  char c_ltp[2000];  
	*************************/

  /*** char c_strk_prc[2000]; -- Ver 1.1 ***/
  char c_strk_prc[20]  ="\0";     /**  initialised in ver 5.8 VQC  * Ver 1.1 ***/
 	char c_mrgn_indctr[3]  ="\0";   /**  initialised in ver 5.8 VQC  **/

	/***  Commented In VQC
  char c_opseq_num1[20]; 
  char c_opseq_num2[20]; 
	*************************/ 
  char c_mtch_accnt1[11] ="\0";  /**  initialised in ver 5.8 VQC  **/
  char c_mtch_accnt2[11] ="\0";  /**  initialised in ver 5.8 VQC  **/
  char c_spn_mrgn1[20]   ="\0";  /**  initialised in ver 5.8 VQC  **/
  char c_spn_mrgn2[20]   ="\0";  /**  initialised in ver 5.8 VQC  **/
  char c_nov1[20]        ="\0";  /**  initialised in ver 5.8 VQC  **/
  char c_nov2[20]        ="\0";  /**  initialised in ver 5.8 VQC  **/
  char c_total_mrgn1[20] ="\0";  /**  initialised in ver 5.8 VQC  **/
  char c_total_mrgn2[20] ="\0";  /**  initialised in ver 5.8 VQC  **/
	char c_expry_dt[10]    ="\0";  /**  initialised in ver 5.8 VQC  **/
	char c_sqr_cancellation_flg = 'N';
	char c_xchng_cd1[3]    ="\0";	 /** initialised in ver 5.8 VQC ** Ver 1.8 **/
	char c_xchng_cd2[3]    ="\0";  /** initialised in ver 5.8 VQC ** Ver 1.8 **/	
	char *null_ptr  = 0;

  int i_returncode=0; /* variable is initialised in VQC */
  int i_rtrn_cd1=0;  /* variable is initialised in VQC */
/*int i_rtrn_cd2;  VQC */
  int i_expsr_rtrn=0;  /* variable is initialised in VQC */
	int i_cntrct_cnt = 0;		/*** Ver 1.1 ***/


  long  l_max_opn_qty  = 0;
  long  l_min_opn_qty  = 0;
  long  l_temp_qty     = 0;
  long  l_prtfl_seq1   = 0;
  long  l_prtfl_seq2   = 0;
  long  li_len_tobuf   = 0;
	long	l_length1      = 0;
	long	l_length2      = 0;
	/***  long	l_strike_prc   = 0;  -- Ver 1.1 ***/
/*long  l_prmum_qty    = 0;  VQC */
	long	l_cntr	       = 0;
	long  l_basket_id    = 0;

	/***	Commented In VQC
  long  l_mrgnbl_qty   = 0; 
  long  l_buy_qty      = 0;
  long  l_sell_qty     = 0; 
	*************************/

  double d_diff_mrgn	=	0.0;
  double d_diff_pl	=	0.0;
  double d_balance_amt	=	0.0;
  double d_balance_amt_tmp = 0.0;       /*** Ver 5.0 ***/
/*double d_bal_to_apply	=	0.0;  VQC */
  double d_ltp	=	0.0;
	double d_spn_mrgn1	=	0.0;
  double d_spn_mrgn2	=	0.0;
  double d_nov1	=	0.0;
  double d_nov2	=	0.0;
  double d_total_mrgn1	=	0.0;
  double d_total_mrgn2	=	0.0;
  double d_cntrct_pl    = 0.0;

  /***  Commented In VQC
  double d_ntnl_pl      = 0.0; 
  double d_blckd_amnt   = 0.0;
 	*****************************/
 
  double d_opt_prmum    = 0.0;
	double d_clsng_prc		=	0.0;

	/***  Commented In VQC
	double d_expsr_prcntg = 0.0; 
  double d_minexpsr_prcntg =0.0; 
	*****************************/

  double d_expsr_mrgn	=	0.0;
  double d_min_expsr_mrgn	=	0.0;
  double d_expsr        = 0.0;
  double d_min_expsr    = 0.0;
  double d_mltplr       = 0.0;

  double  d_upd_amount = 0.0;			
	double d_strike_prc = 0.0;    /*** Ver 1.1 ***/

  /**** Ver 3.0 ****/
  double d_total_amount=0.0;
  double d_premium = 0.0;
  char c_mrgn_insufficient_flg='N';
  char c_prm_insufficient_flg='N';
  /*** Ver 3.0 Ends Here ***/				
	char c_balance_flg = 'N';         /*** Ver 5.0 ****/
	char c_dlvrmtm_flg = 'O';         /*** Ver 5.4 ***/

  double d_diff_mrgn_blocked = 0.0; /***  ver 6.1 ***/

  /** Ver 6.5 Starts Here **/
  int    i_ret_val=0;

  double d_spn_bmrgn1=0;
  double d_bnov1=0;
  double d_total_bmrgn1=0;

  double d_spn_bmrgn2=0;
  double d_bnov2=0;
  double d_total_bmrgn2=0;

  double d_spn_bmrgn=0;
  double d_bnov=0;
  double d_total_bmrgn=0;
  /** Ver 6.5 Ends Here **/

  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;
    char  sql_cln_mtch_accnt[11]  ="\0";  /** initialised in ver 5.8 VQC **/
    char  sql_xchng_cd[4]         ="\0";  /** initialised in ver 5.8 VQC **/
/*  char  sql_prd_typ;  VQC */
    char  sql_undrlyng[7]         ="\0";  /** initialised in ver 5.8 VQC **/
    varchar c_exp_dt[LEN_DATE];
  /*varchar c_trd_dt[12];   VQC */
    varchar c_stock_cd [20];
	

  /*double d_mrgn_blkd = 0.0;  VQC */

    /** Current contract level positions of other contracts in the same underlying **/

	  struct st_fcp_cntrct_pstn st_cntrct_pstn_crrnt;
    /** Copy of contract level position on which action is to be done taken before applying the action **/

 		/*struct st_fcp_cntrct_pstn st_cntrct_pstn_old; Commented IN VQC */

    /** Contract level position on which action is to be done **/

  	struct st_fcp_cntrct_pstn st_cntrct_pstn_md_rc;


  EXEC SQL END DECLARE SECTION;

  MEMSET(st_cntrct_pstn_crrnt); /* added in  VQC */
  MEMSET(st_cntrct_pstn_md_rc); /* added in  VQC */
  MEMSET(c_stock_cd); /** ver 5.8 **/
  MEMSET(c_tmp_rmrks_ob);  /** Ver 6.4 **/

	d_oblckd_amnt	=	0.0;
	d_undrlyng_pl = 0.0;			/*** 07-Dec-2011 ***/

  ptr_fml_Obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31235", TPMSG, c_err_msg);
    return -1;
  }

 /*** ptr_fml_Ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN); *** Commented in ver 1.1 **/

  ptr_fml_Ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN*10); /*** Added in ver 1.1 for increase buffer size ***/ 

  if ( ptr_fml_Ibuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31240", TPMSG, c_err_msg);
    tpfree((char *)ptr_fml_Obuf);  
    return -1;
  }

	strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
  strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);

 /* sql_prd_typ = ptr_st_pstn_actn->c_prd_typ;   VQC */

  /** This bit of code down below will fetch all the contract level **/
  /** positions. Then it will find the contract on which the input  **/
  /** action is to be performed and then perform it. It then summs  **/
  /** up all the contract level postion to arrive at a consolidated **/
  /** underlying level position. It then recalculates the margin.   **/
  /** This bit of code need not be performed for actions which do   **/
  /** not involve a change in postion                               **/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Building new underlying position" );
  }

  EXEC  SQL
    SELECT  SPN_PRTFL1_SEQ.NEXTVAL			/***	Ver 4.4	***/
    INTO    :l_prtfl_seq1
    FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31245",SQLMSG, c_err_msg);
		tpfree((char *)ptr_fml_Ibuf);			/***	VQC	***/
		tpfree((char *)ptr_fml_Obuf);			/***  VQC ***/
    return  -1;
  }

  EXEC  SQL
    SELECT  SPN_PRTFL1_SEQ.NEXTVAL			/***	Ver 4.4	***/
    INTO    :l_prtfl_seq2
    FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31250",SQLMSG, c_err_msg);
		tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/
		tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
    return  -1;
  }

	/*** Ver 1.1 starts here ***/
	MEMSET(c_inp_strng);
	MEMSET(c_inp_strng1);
	MEMSET(c_inp_strng2);
	MEMSET(c_inp_strng11);
	MEMSET(c_inp_strng22);
	/*** Ver 1.1 Ends here ***/

  strcpy(c_inp_strng1,"1^");
  strcpy(c_inp_strng2,"|");
	/** Ver 1.8 Starts ***/
	if(strcmp(sql_xchng_cd,"NFO") == 0)
	{
  	strcat(c_inp_strng1,"NSE^");
	}
	else if (strcmp(sql_xchng_cd,"BFO") == 0)
	{
  	strcat(c_inp_strng1,"BSE^");
	}
	/*** Ver 1.8 Ends ***/
	sprintf(c_seq_num1,"%ld",l_prtfl_seq1);
  sprintf(c_seq_num2,"%ld",l_prtfl_seq2);

  strcat( c_inp_strng1 , c_seq_num1 );
  strcat( c_inp_strng2 , c_seq_num2 );

  strcat(c_inp_strng1,"^");
  strcat(c_inp_strng2,"^");

  EXEC SQL
   	SELECT  FCB_UNDRLYNG_BSKT_ID
   	INTO    :l_basket_id
   	FROM    FCB_FO_CLN_BSKT_ALLTD
  	WHERE   FCB_CLN_LVL = ( SELECT  CLM_CLNT_LVL
                            FROM    CLM_CLNT_MSTR
                            WHERE   CLM_MTCH_ACCNT = :sql_cln_mtch_accnt);
	if ( SQLCODE != 0 )
 	{
   	fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
   	fn_errlog(c_ServiceName,"S31255",SQLMSG, c_err_msg);
		tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/
		tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
   	return  -1;
 	}

 	/** Prepare a list of contracts from contract position table **/

  EXEC SQL ALLOCATE :sys_cursor;

    EXEC SQL EXECUTE
      BEGIN
         OPEN :sys_cursor FOR
					 SELECT FCP_CLM_MTCH_ACCNT,
                  FCP_XCHNG_CD,
                  FCP_PRDCT_TYP,
                  FCP_INDSTK,
                  FCP_UNDRLYNG,
                  TO_CHAR(FCP_EXPRY_DT,'DD-Mon-YYYY'),
                  FCP_EXER_TYP,
                  FCP_STRK_PRC,
                  FCP_OPT_TYP,
                  FCP_IBUY_QTY,
                  FCP_IBUY_ORD_VAL,
                  FCP_ISELL_QTY,
                  FCP_ISELL_ORD_VAL,
                  FCP_EXBUY_QTY,
                  FCP_EXBUY_ORD_VAL,
                  FCP_EXSELL_QTY,
                  FCP_EXSELL_ORD_VAL,
                  FCP_BUY_EXCTD_QTY,
                  FCP_SELL_EXCTD_QTY,
                  FCP_OPNPSTN_FLW,
                  FCP_OPNPSTN_QTY,
                  FCP_OPNPSTN_VAL,
                  FCP_MTM_OPN_VAL,
                  FCP_OPT_PREMIUM,
									NVL(FCP_MTM_FLG,'O')            /*** Ver 5.4 ***/
            FROM  FCP_FO_SPN_CNTRCT_PSTN
            WHERE FCP_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
            AND   FCP_XCHNG_CD        = :sql_xchng_cd
            AND   FCP_UNDRLYNG        = :sql_undrlyng
            ORDER BY FCP_EXPRY_DT ASC;
          END;
        END-EXEC;

    if ( SQLCODE != 0 )
    {
      EXEC SQL CLOSE :sys_cursor;   /* added in  VQC */
      EXEC SQL FREE :sys_cursor;
			fn_errlog ( c_ServiceName, "S31260", SQLMSG, c_err_msg );
			tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/
			tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
      return -1;
    }

    c_pos_avl = 'N';
		c_sqr_cancellation_flg = 'N';

    /** Fetch one contract at a time from the list. If the fetched  **/
    /** contract is the one we need to apply the change apply it.   **/
    /** Else simply add the contract to  underlying level position  **/

    while ( 1 )
    {
      c_optbuy_prem_flg = 'N'; /*** ver 6.4 ***/
			d_opt_prmum 			= 0.0;
			d_expsr_mrgn 			= 0.0;
			d_min_expsr_mrgn	= 0.0;
			d_cntrct_pl				=	0.0;
			c_dlvrmtm_flg = 'O';        /*** Ver 5.4 ***/

			MEMSET (c_exp_dt);
      MEMSET(st_cntrct_pstn_crrnt);  /** ver 5.8 VQC **/

      EXEC SQL  FETCH :sys_cursor
							  INTO  :st_cntrct_pstn_crrnt.c_cln_mtch_accnt,
                      :st_cntrct_pstn_crrnt.c_xchng_cd,
                      :st_cntrct_pstn_crrnt.c_prd_typ,
                      :st_cntrct_pstn_crrnt.c_ctgry_indstk,
                      :st_cntrct_pstn_crrnt.c_undrlyng,
                      :c_exp_dt,
                      :st_cntrct_pstn_crrnt.c_exer_typ,
                      :st_cntrct_pstn_crrnt.l_strike_prc,
                      :st_cntrct_pstn_crrnt.c_opt_typ,
                      :st_cntrct_pstn_crrnt.l_ibuy_qty,
                      :st_cntrct_pstn_crrnt.d_ibuy_ord_val,
                      :st_cntrct_pstn_crrnt.l_isell_qty,
                      :st_cntrct_pstn_crrnt.d_isell_ord_val,
                      :st_cntrct_pstn_crrnt.l_exbuy_qty,
                      :st_cntrct_pstn_crrnt.d_exbuy_ord_val,
                      :st_cntrct_pstn_crrnt.l_exsell_qty,
                      :st_cntrct_pstn_crrnt.d_exsell_ord_val,
                      :st_cntrct_pstn_crrnt.l_buy_exctd_qty,
                      :st_cntrct_pstn_crrnt.l_sell_exctd_qty,
                      :st_cntrct_pstn_crrnt.c_opnpstn_flw,
                      :st_cntrct_pstn_crrnt.l_opnpstn_qty,
                      :st_cntrct_pstn_crrnt.d_opnpstn_val,
                      :st_cntrct_pstn_crrnt.d_mtm_opn_val,
                      :d_blkd_prmum,
											:c_dlvrmtm_flg;               /*** Ver 5.4 ***/

      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }

        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31265", SQLMSG, c_err_msg );
				tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/
				tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
        return -1;
      }
		
			if (DEBUG_MSG_LVL_3)
			{
				fn_userlog ( c_ServiceName, "Kiran fetching MTM flag is :%c:",c_dlvrmtm_flg);
      	fn_userlog (c_ServiceName, "user id is :%s:",ptr_st_pstn_actn->c_user_id);
      	fn_userlog (c_ServiceName, "session id is :%ld:",ptr_st_pstn_actn->l_session_id);
			}

      /**** Ver 5.4 started ****/

       if ( ( c_dlvrmtm_flg== UNDER_PHYDLVRY_MTM ) && ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 )&& ( ptr_st_pstn_actn->l_session_id != 0 ))
       {
					EXEC SQL CLOSE :sys_cursor;
					EXEC SQL FREE :sys_cursor;
          fn_errlog(c_ServiceName, "B28009", DEFMSG, c_err_msg );
					tpfree((char *)ptr_fml_Ibuf);
					tpfree((char *)ptr_fml_Obuf);
          return -7;
       }
      /**** Ver 5.4 ended ****/


			i_cntrct_cnt++;							/*** Ver 1.1 ***/

			SETNULL( c_exp_dt );
      strcpy ( st_cntrct_pstn_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
			strcpy ( c_expry_dt,st_cntrct_pstn_crrnt.c_expry_dt);
      rtrim(st_cntrct_pstn_crrnt.c_xchng_cd);
      rtrim(st_cntrct_pstn_crrnt.c_undrlyng);
      rtrim(st_cntrct_pstn_crrnt.c_expry_dt);

  		if( (strcmp(st_cntrct_pstn_crrnt.c_xchng_cd,ptr_st_pstn_actn->c_xchng_cd) == 0 ) &&
          (st_cntrct_pstn_crrnt.c_prd_typ == ptr_st_pstn_actn->c_prd_typ) &&
          (strcmp(st_cntrct_pstn_crrnt.c_undrlyng,ptr_st_pstn_actn->c_undrlyng) == 0 ) &&
          (strcasecmp(st_cntrct_pstn_crrnt.c_expry_dt,ptr_st_pstn_actn->c_expry_dt) == 0 ) &&
          (st_cntrct_pstn_crrnt.c_opt_typ == ptr_st_pstn_actn->c_opt_typ) &&
          (st_cntrct_pstn_crrnt.l_strike_prc == ptr_st_pstn_actn->l_strike_prc)  &&
          (st_cntrct_pstn_crrnt.c_exer_typ == ptr_st_pstn_actn->c_exrc_typ) )
      {
      /*  memcpy ( &st_cntrct_pstn_old,&st_cntrct_pstn_crrnt,sizeof( st_cntrct_pstn_old));  VQC */

        i_returncode =  fn_apply_spn_actn ( c_ServiceName,
                                            ptr_st_pstn_actn,
                                            &st_cntrct_pstn_crrnt,
                                            ptr_st_err_msg );
        if ( i_returncode == -1 )
        {
          EXEC SQL CLOSE :sys_cursor;       /** ver 5.8 VQC **/
          EXEC SQL FREE :sys_cursor;        /** ver 5.8 VQC **/
          tpfree((char *)ptr_fml_Obuf);     /** ver 5.8 VQC **/
          tpfree((char *)ptr_fml_Ibuf);     /** ver 5.8 VQC **/ 
          return -1;
        }

        memcpy ( &st_cntrct_pstn_md_rc, &st_cntrct_pstn_crrnt, sizeof( st_cntrct_pstn_md_rc ));
        c_optbuy_prem_flg = 'N'; /*** ver 6.4 ***/ 
				if( st_cntrct_pstn_crrnt.c_prd_typ	==	'O')
				{
					if( st_cntrct_pstn_crrnt.l_ibuy_qty  > 0 && ptr_st_pstn_actn->c_trnsctn_flw	==	'B'  )
        	{
						if(DEBUG_MSG_LVL_3)
						{
          		fn_userlog(c_ServiceName,"SPAN Inside Option Buy Position.");
          		fn_userlog(c_ServiceName,"SPAN l_orgnl_qty Is :%ld:",ptr_st_pstn_actn->l_orgnl_qty);
          		fn_userlog(c_ServiceName,"SPAN l_orgnl_rt Is :%ld:",ptr_st_pstn_actn->l_orgnl_rt);
						}
	
            d_opt_prmum =	st_cntrct_pstn_crrnt.d_ibuy_ord_val;

						if(DEBUG_MSG_LVL_3)
						{
							fn_userlog(c_ServiceName,"SPAN  - d_opt_prmum Is :%lf:",d_opt_prmum);
						}

            /*** ver 6.4 starts ***/
            c_optbuy_prem_flg = 'Y';
            MEMSET(c_tmp_rmrks_ob);
            strcpy ( c_tmp_rmrks_ob, ptr_st_pstn_actn->c_ref_rmrks );
            sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"OPTPREMBUYALLWD |%s",c_tmp_rmrks_ob);
            rtrim( ptr_st_pstn_actn->c_ref_rmrks);
            if( DEBUG_MSG_LVL_5 )
            {
              fn_userlog ( c_ServiceName, "CR170192 :%s:",ptr_st_pstn_actn->c_ref_rmrks);
            }
            /*** ver 6.4 ends *****/
        	}

					d_total_prmum	=	d_blkd_prmum	-	d_opt_prmum	;

					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"SPAN  d_total_prmum Is :%lf:",d_total_prmum);
						fn_userlog(c_ServiceName,"SPAN  d_blkd_prmum  Is :%lf:",d_blkd_prmum);
					}
					switch ( ptr_st_pstn_actn->l_actn_typ )
        	{
          	case  ORS_CAN_ORD_REQ:

            	strcpy( c_narration_id , ON_CANCELLATION_PLACEMENT);

              /*** commented in ver 6.1 ***
            	if( strcmp(c_user_id,"system")  ==  0 )
            	{
              	c_prmum_dr_without_lmt_flg	= DEBIT_TILL_LIMIT;
            	}
            	else
            	{
             	 	c_prmum_dr_without_lmt_flg	= DEBIT_WHEN_LIMIT;
            	}
              comment ends for ver 6.1 *****/
              c_prmum_dr_without_lmt_flg  = DEBIT_TILL_LIMIT; /*** ver 6.1 ***/
    	      break;

          	default:

           		strcpy( ptr_st_err_msg->c_err_msg, "Invalid action type");
           		fn_userlog ( c_ServiceName,"Invalid action type");
							tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/
							tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
              EXEC SQL CLOSE :sys_cursor;     /*** ver 5.8 VQC ***/
              EXEC SQL FREE :sys_cursor;      /*** ver 5.8 VQC ***/ 
           		/*** tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );  commntd in ver 5.8  VQC ***/
              return -1;  /** added in ver 5.8 VQC **/ 
           	break;
        	}

					if ( d_total_prmum  <  0 )
        	{
          	strcpy( c_narration_id , PREMIUM_ADJUSTMENTS  );

						d_balance_amt  = 0.0;		/*** Ver 1.1 ***/

  	        i_returncode = fn_upd_spnlimits ( c_ServiceName,
    	                                        ptr_st_pstn_actn,
      	                                      ptr_st_err_msg,
        	                                    c_narration_id,
          	                                  c_prmum_dr_without_lmt_flg,
            	                                d_total_prmum,
              	                              &d_balance_amt
                	                          );
          	if ( i_returncode != 0 )
          	{
              /***************************** comment starts for ver 6.1 **
            	switch ( i_returncode )
            	{
              	case  INSUFFICIENT_LIMITS :

 	              	fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg );
                  *** Commented In Ver 3.0
  	              EXEC SQL CLOSE :sys_cursor;
    	            tpfree((char *)ptr_fml_Obuf);
      	          tpfree((char *)ptr_fml_Ibuf);
        	        return INSUFFICIENT_LIMITS  ;
                  Commented In Ver 3.0 Ends ***
                  **** Ver 3.0 Starts Here ***
                  fn_userlog(c_ServiceName,"Inside INSUFFICIENT_LIMITS Option Premium Block of existing positions");
                  *** Ver 5.0 Starts ***
                  if( c_balance_flg != 'Y' )
                  {
                     d_balance_amt_tmp = d_balance_amt;
                     c_balance_flg = 'Y';
                  }
                  *** Ver 5.0 Ends ***
                  d_premium = d_total_prmum;
                  c_prm_insufficient_flg ='Y';
                  **** Ver 3.0 Ends Here ***

 	           	default:

 	          	   fn_errlog( c_ServiceName, "S31270",LIBMSG , c_err_msg );
  		           EXEC SQL CLOSE :sys_cursor;
                 EXEC SQL FREE :sys_cursor;    * added in  VQC *
      	         tpfree((char *)ptr_fml_Obuf);
        	       tpfree((char *)ptr_fml_Ibuf);
          	     return -1;
          		} ***** comment ends for ver 6.1 **********/

                /*** 6.1 starts ****/
                 fn_errlog( c_ServiceName, "S31275",LIBMSG , c_err_msg );
                 EXEC SQL CLOSE :sys_cursor;
                 EXEC SQL FREE :sys_cursor;    
                 tpfree((char *)ptr_fml_Obuf);
                 tpfree((char *)ptr_fml_Ibuf);
                 return -1;
                 /*** ver 6.1 ends ***/
        		}

            /*** ver 6.1 starts ***/
            if( d_balance_amt < 0 )
            {
                  if( c_balance_flg != 'Y' )
                  {
                     d_balance_amt_tmp = d_balance_amt;
                     c_balance_flg = 'Y';
                  }
                  d_premium = d_total_prmum;
                  c_prm_insufficient_flg ='Y';
            }
            /*** ver 6.1 ends ****/

						d_total_prmum = d_total_prmum - d_balance_amt;		/*** Ver 2.3 ***/

						EXEC SQL
            	UPDATE  FCP_FO_SPN_CNTRCT_PSTN
            	SET     FCP_OPT_PREMIUM     = :d_total_prmum * (-1)  +  FCP_OPT_PREMIUM
            	WHERE   FCP_CLM_MTCH_ACCNT  = :st_cntrct_pstn_crrnt.c_cln_mtch_accnt
            	AND     FCP_XCHNG_CD        = :st_cntrct_pstn_crrnt.c_xchng_cd
            	AND     FCP_PRDCT_TYP       = :st_cntrct_pstn_crrnt.c_prd_typ
            	AND     FCP_UNDRLYNG        = :st_cntrct_pstn_crrnt.c_undrlyng
            	AND     FCP_EXPRY_DT        = :c_exp_dt
            	AND     FCP_EXER_TYP        = :st_cntrct_pstn_crrnt.c_exer_typ
            	AND     FCP_OPT_TYP         = :st_cntrct_pstn_crrnt.c_opt_typ
            	AND     FCP_STRK_PRC        = :st_cntrct_pstn_crrnt.l_strike_prc;

         	 	if ( SQLCODE != 0 )
          	{
            	fn_errlog(c_ServiceName, "S31280", SQLMSG, c_err_msg );
            	EXEC SQL CLOSE :sys_cursor;
              EXEC SQL FREE :sys_cursor;    /* added in  VQC */
            	tpfree((char *)ptr_fml_Obuf);
            	tpfree((char *)ptr_fml_Ibuf);
            	return -1;
          	}

      		}
            /*** ver 6.4 starts ***/
          if( c_optbuy_prem_flg == 'Y' )
          {
            strcpy ( ptr_st_pstn_actn->c_ref_rmrks,c_tmp_rmrks_ob );
            MEMSET(c_tmp_rmrks_ob);
            rtrim( ptr_st_pstn_actn->c_ref_rmrks);
            if( DEBUG_MSG_LVL_5 )
            {
              fn_userlog ( c_ServiceName, "CR170192 :%s:",ptr_st_pstn_actn->c_ref_rmrks);
            }
            c_optbuy_prem_flg = 'N';
          }
            /*** ver 6.4 starts ***/
				}
	
/****Fix added by Shailesh on 16-Feb-2012, the orders where open position does not exists was errorneously identified as Square off cancellation orders **/	
				if ( ((st_cntrct_pstn_crrnt.c_opnpstn_flw !=   ptr_st_pstn_actn->c_trnsctn_flw) 
							&& st_cntrct_pstn_crrnt.c_opnpstn_flw !='N')
             && ( abs(st_cntrct_pstn_crrnt.l_opnpstn_qty) >=  abs(ptr_st_pstn_actn->l_new_qty) )  )
        {
					if(DEBUG_MSG_LVL_0)
					{
         		fn_userlog(c_ServiceName,"SPAN Inside Squre Off Check.");
					}

					c_sqr_cancellation_flg = 'Y';

					if(DEBUG_MSG_LVL_0)
					{
          	fn_userlog(c_ServiceName,"SPAN Action Type Is :%ld:",ptr_st_pstn_actn->l_actn_typ);
					}
        }
        c_pos_avl = 'Y';
      }

      fn_sum_spnpos (st_cntrct_pstn_crrnt ,ptr_st_undfut_pos_to_be );

			i_expsr_rtrn  = fn_cal_expsr  ( c_ServiceName,
                                      st_cntrct_pstn_crrnt,
                                      l_basket_id,
                                      &d_expsr_mrgn,
                                      &d_min_expsr_mrgn,
                                      &d_mltplr,
                                      c_err_msg
                                    );

      if ( i_expsr_rtrn != 0 )
      {
      	fn_errlog(c_ServiceName, "S31285", LIBMSG, c_err_msg );
				EXEC SQL CLOSE :sys_cursor;
 				EXEC SQL FREE :sys_cursor;
				tpfree((char *)ptr_fml_Obuf);			/***	VQC	***/
 				tpfree((char *)ptr_fml_Ibuf);			/***  VQC ***/
        return -1;
      }



      l_max_opn_qty = st_cntrct_pstn_crrnt.l_opnpstn_qty + fn_maxl(st_cntrct_pstn_crrnt.l_ibuy_qty,st_cntrct_pstn_crrnt.l_exbuy_qty) ;
      l_min_opn_qty = st_cntrct_pstn_crrnt.l_opnpstn_qty + fn_maxl(abs(st_cntrct_pstn_crrnt.l_isell_qty),abs(st_cntrct_pstn_crrnt.l_exsell_qty)) * -1 ;

	
      if ( st_cntrct_pstn_crrnt.c_prd_typ  ==  'O' )
      {
        l_temp_qty  = fn_minl ( l_max_opn_qty , l_min_opn_qty );
        l_max_opn_qty = l_temp_qty  ;
        l_min_opn_qty = l_temp_qty  ;
      }

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"l_max_opn_qty = :%ld:", l_max_opn_qty); 
				fn_userlog(c_ServiceName,"l_min_opn_qty = :%ld:", l_min_opn_qty); 
			}

			if(DEBUG_MSG_LVL_5)
			{
				fn_userlog(c_ServiceName, "st_cntrct_pstn_crrnt.c_xchng_cd:%s:",st_cntrct_pstn_crrnt.c_xchng_cd);
				fn_userlog(c_ServiceName, "st_cntrct_pstn_crrnt.c_prd_typ:%c:",st_cntrct_pstn_crrnt.c_prd_typ);
				fn_userlog(c_ServiceName, "st_cntrct_pstn_crrnt.c_undrlyng:%s:",st_cntrct_pstn_crrnt.c_undrlyng);
				fn_userlog(c_ServiceName, "c_exp_dt:%s:",c_exp_dt.arr);
				fn_userlog(c_ServiceName, "st_cntrct_pstn_crrnt.c_exer_typ:%c:",st_cntrct_pstn_crrnt.c_exer_typ);
				fn_userlog(c_ServiceName, "st_cntrct_pstn_crrnt.c_opt_typ:%c:",st_cntrct_pstn_crrnt.c_opt_typ);
				fn_userlog(c_ServiceName, "st_cntrct_pstn_crrnt.l_strike_prc:%ld:",st_cntrct_pstn_crrnt.l_strike_prc);
			}


      EXEC SQL
        SELECT  NVL(FTQ_LST_TRD_PRC,0),			/*** NVL added in Ver 1.1 ***/
								NVL(FTQ_CLS_PRC,0)					/*** NVL added in Ver 1.1 ***/
        INTO    :d_ltp,
								:d_clsng_prc
        FROM    FTQ_FO_TRD_QT
        WHERE	  FTQ_XCHNG_CD  = :st_cntrct_pstn_crrnt.c_xchng_cd    /*** Ver 1.3 ***/	
				AND     FTQ_PRDCT_TYP = :st_cntrct_pstn_crrnt.c_prd_typ
        AND     FTQ_UNDRLYNG  = :st_cntrct_pstn_crrnt.c_undrlyng
        AND     FTQ_EXPRY_DT  = :c_exp_dt
        AND     FTQ_EXER_TYP  = :st_cntrct_pstn_crrnt.c_exer_typ
        AND     FTQ_OPT_TYP   = :st_cntrct_pstn_crrnt.c_opt_typ
        AND     FTQ_STRK_PRC  = :st_cntrct_pstn_crrnt.l_strike_prc;

      if(SQLCODE  !=  0 && SQLCODE != NO_DATA_FOUND)
      {
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31290", SQLMSG, c_err_msg );
				tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
				tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/
        return -1;
      }

      if( SQLCODE == NO_DATA_FOUND )    /*** Ver 2.5 Note : NO_DATA_FOUND handling Added For CorpActn Issue ***/
      {
        d_ltp = 0.0;
        d_clsng_prc = 0.0;
      }


			if ( st_cntrct_pstn_crrnt.l_opnpstn_qty != 0 )
      {
        if ( st_cntrct_pstn_crrnt.c_prd_typ == 'O' && st_cntrct_pstn_crrnt.l_opnpstn_qty < 0 )
        {
					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"SPAN -	Inside Cancellation Option Profit / Loss Calculation."); 
					}
          d_cntrct_pl = (double) abs(st_cntrct_pstn_crrnt.l_opnpstn_qty) * ( d_clsng_prc - d_ltp );

        }
        else
        {
          if (  st_cntrct_pstn_crrnt.c_prd_typ  ==  'F' )
          {
						if(DEBUG_MSG_LVL_3)
						{
							fn_userlog(c_ServiceName,"SPAN -	Inside Cancellation Future Profit / Loss Calculation."); 
						}
            if( st_cntrct_pstn_crrnt.l_opnpstn_qty  > 0 )
            {
              d_cntrct_pl = ( d_ltp * (double) st_cntrct_pstn_crrnt.l_opnpstn_qty ) - st_cntrct_pstn_crrnt.d_opnpstn_val;
            }
            else if ( st_cntrct_pstn_crrnt.l_opnpstn_qty < 0 )
            {
              d_cntrct_pl = fabs(st_cntrct_pstn_crrnt.d_opnpstn_val)  -  ( d_ltp * (double) abs(st_cntrct_pstn_crrnt.l_opnpstn_qty) )  ;
            }

          }

        }
      }

			d_ltp	=	d_ltp	/	100;

				EXEC SQL
   				SELECT  SEM_MAP_VL
   				INTO    :c_stock_cd
   				FROM    SEM_STCK_MAP
   				WHERE   SEM_STCK_CD = :st_cntrct_pstn_crrnt.c_undrlyng
   			/*	AND     SEM_ENTTY   = 3;					** Ver 1.8 comment ***/
   				AND     SEM_ENTTY   =DECODE(:sql_xchng_cd,'NFO',3,'BFO',14);		/** Ver 1.8 **/

				if(SQLCODE  !=  0 )
     		{
     			EXEC SQL CLOSE :sys_cursor;
       		EXEC SQL FREE :sys_cursor;
       		fn_errlog ( c_ServiceName, "S31295", SQLMSG, c_err_msg );
					tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
					tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/
       		return -1;
     		}
			SETNULL(c_stock_cd);
			
  		EXEC SQL
    		SELECT TO_CHAR(TO_DATE(:st_cntrct_pstn_crrnt.c_expry_dt,'DD-Mon-YYYY'),'dd-Mon-YY')			/***	Ver 4.4	***/
    		INTO  :c_expry_dt
    		FROM  DUAL;

  		if ( SQLCODE  !=  0 )
  		{
    		fn_errlog ( c_ServiceName, "S31300", SQLMSG, c_err_msg );
				EXEC SQL CLOSE :sys_cursor;			/***	VQC	***/
				EXEC SQL FREE :sys_cursor;			/***  VQC ***/
				tpfree((char *)ptr_fml_Obuf);     /***  VQC ***/
				tpfree((char *)ptr_fml_Ibuf);     /***  VQC ***/
    		return -1;
  		}

			/*** l_strike_prc  = st_cntrct_pstn_crrnt.l_strike_prc/100  ; *** Commented in Ver 1.1 ***/

			/*** Ver 1.1 starts here ***/
			d_strike_prc = 0.0;
      d_strike_prc  = (double) st_cntrct_pstn_crrnt.l_strike_prc / 100.00  ;
      sprintf(c_strk_prc,"%lf",d_strike_prc);

      fn_spn_rtrim(c_strk_prc,'0');
      fn_spn_rtrim(c_strk_prc,'.');

      /*** Ver 1.1 ends here ***/

			if	(	l_cntr	==	0	)
			{
		
				if(st_cntrct_pstn_crrnt.c_prd_typ  ==  'F')
      	{
		  		sprintf(c_inp_strng11,"%s^%s~%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);

      		strcat(c_inp_strng1,c_inp_strng11);

      		sprintf(c_inp_strng22,"%s^%s~%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);

      		strcat(c_inp_strng2,c_inp_strng22);
      	}
      	else
      	{
        	sprintf(c_inp_strng11,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp);

 	       	strcat(c_inp_strng1,c_inp_strng11);

        	sprintf(c_inp_strng22,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntrct_pstn_crrnt.c_cln_mtch_accnt,c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp);

   		    strcat(c_inp_strng2,c_inp_strng22);
      	}
			}
			else
			{
				if(st_cntrct_pstn_crrnt.c_prd_typ  ==  'F')
        {
          sprintf(c_inp_strng11,"%s~%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s~%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);

          strcat(c_inp_strng2,c_inp_strng22);
        }
        else
        {
          sprintf(c_inp_strng11,"%s~%c:%s:%c%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp);

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s~%c:%s:%c%c:%s^%ld^%lf",c_stock_cd.arr,st_cntrct_pstn_crrnt.c_prd_typ,c_expry_dt,st_cntrct_pstn_crrnt.c_opt_typ,st_cntrct_pstn_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp);

          strcat(c_inp_strng2,c_inp_strng22);
        }
			}

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_exp_dt.arr );
        fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", st_cntrct_pstn_crrnt.l_ibuy_qty );
        fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", st_cntrct_pstn_crrnt.d_ibuy_ord_val );
        fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", st_cntrct_pstn_crrnt.l_isell_qty );
        fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", st_cntrct_pstn_crrnt.d_isell_ord_val );
        fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", st_cntrct_pstn_crrnt.l_exbuy_qty );
        fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", st_cntrct_pstn_crrnt.d_exbuy_ord_val );
        fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", st_cntrct_pstn_crrnt.l_exsell_qty );
        fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", st_cntrct_pstn_crrnt.d_exsell_ord_val );
        fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntrct_pstn_crrnt.l_buy_exctd_qty );
        fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", st_cntrct_pstn_crrnt.l_sell_exctd_qty );
        fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntrct_pstn_crrnt.l_opnpstn_qty );
        fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntrct_pstn_crrnt.d_opnpstn_val);
        fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntrct_pstn_crrnt.d_mtm_opn_val );
     }

     strcat(c_inp_strng1,",");
     strcat(c_inp_strng2,",");

		l_cntr	++;		

	  d_undrlyng_pl = d_undrlyng_pl + d_cntrct_pl ;
		d_expsr     = d_expsr_mrgn  + d_expsr ;
    d_min_expsr = d_min_expsr_mrgn  + d_min_expsr ;

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"SPAN Contract PNL Is :%lf:",d_cntrct_pl);
			fn_userlog(c_ServiceName,"SPAN Underlying PNL Is :%lf:",d_undrlyng_pl);
		}
  }

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;


	if ( c_pos_avl == 'N' )
  {
		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"INSIDE c_pos_avl == N ");
		}
		fn_errlog ( c_ServiceName, "S31305", LIBMSG, c_err_msg );
    return -1;
  }

	l_length1 = strlen(c_inp_strng1);

  if( c_inp_strng1[l_length1  - 1 ] == ',')
  {
    c_inp_strng1[l_length1 -1]  ='\0';
  }

  l_length2 = strlen(c_inp_strng2);

  if( c_inp_strng2[l_length2  - 1 ] == ',')
  {
    c_inp_strng2[l_length2 -1]  ='\0';

  }

	if ( st_cntrct_pstn_md_rc.l_opnpstn_qty > 0 )
  {
    st_cntrct_pstn_md_rc.c_opnpstn_flw = BUY;
  }
  else if ( st_cntrct_pstn_md_rc.l_opnpstn_qty < 0 )
  {
    st_cntrct_pstn_md_rc.c_opnpstn_flw = SELL;
  }
  else
  {
    st_cntrct_pstn_md_rc.c_opnpstn_flw = NEUTRAL;
  }

  /** Update the contract level position on which the action has been applied **/

  EXEC SQL
    UPDATE  FCP_FO_SPN_CNTRCT_PSTN
    SET     FCP_IBUY_QTY       = :st_cntrct_pstn_md_rc.l_ibuy_qty,
            FCP_IBUY_ORD_VAL   = :st_cntrct_pstn_md_rc.d_ibuy_ord_val,
            FCP_ISELL_QTY      = :st_cntrct_pstn_md_rc.l_isell_qty,
            FCP_ISELL_ORD_VAL  = :st_cntrct_pstn_md_rc.d_isell_ord_val,
            FCP_EXBUY_QTY      = :st_cntrct_pstn_md_rc.l_exbuy_qty,
            FCP_EXBUY_ORD_VAL  = :st_cntrct_pstn_md_rc.d_exbuy_ord_val,
            FCP_EXSELL_QTY     = :st_cntrct_pstn_md_rc.l_exsell_qty,
            FCP_EXSELL_ORD_VAL = :st_cntrct_pstn_md_rc.d_exsell_ord_val,
            FCP_BUY_EXCTD_QTY  = :st_cntrct_pstn_md_rc.l_buy_exctd_qty,
            FCP_SELL_EXCTD_QTY = :st_cntrct_pstn_md_rc.l_sell_exctd_qty,
            FCP_OPNPSTN_FLW    = :st_cntrct_pstn_md_rc.c_opnpstn_flw,
            FCP_OPNPSTN_QTY    = :st_cntrct_pstn_md_rc.l_opnpstn_qty,
            FCP_OPNPSTN_VAL    = :st_cntrct_pstn_md_rc.d_opnpstn_val,
            FCP_MTM_OPN_VAL    = :st_cntrct_pstn_md_rc.d_mtm_opn_val
    WHERE   FCP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND     FCP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
    AND     FCP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
		AND     FCP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
    AND     FCP_EXPRY_DT       = TO_DATE(:ptr_st_pstn_actn->c_expry_dt,'DD-Mon-YYYY')
		AND			FCP_OPT_TYP					=	:ptr_st_pstn_actn->c_opt_typ
		AND			FCP_STRK_PRC				=	:ptr_st_pstn_actn->l_strike_prc
    AND     FCP_EXER_TYP       = :ptr_st_pstn_actn->c_exrc_typ;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31310", SQLMSG, c_err_msg );
		tpfree((char *)ptr_fml_Obuf);    /***  VQC ***/
 		tpfree((char *)ptr_fml_Ibuf);    /***  VQC ***/
    return  -1 ;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Calcualted underlying level position" );
    fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_uibuy_qty);
    fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", ptr_st_undfut_pos_to_be->d_uibuy_val);
    fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_uisell_qty );
    fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", ptr_st_undfut_pos_to_be->d_uisell_val );
    fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_uexbuy_qty );
    fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", ptr_st_undfut_pos_to_be->d_uexbuy_val );
    fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_uexsell_qty );
    fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", ptr_st_undfut_pos_to_be->d_uexsell_val );
    fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", ptr_st_undfut_pos_to_be->l_ubuy_exctd_qty );
    fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", ptr_st_undfut_pos_to_be->l_usell_exctd_qty );
    fn_userlog ( c_ServiceName, "Open qty          :%ld:", ptr_st_undfut_pos_to_be->l_uopnpstn_qty );
    fn_userlog ( c_ServiceName, "Original open val :%lf:", ptr_st_undfut_pos_to_be->d_uopnpstn_val);
    fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", ptr_st_undfut_pos_to_be->d_umtm_opn_val );
  }



	/*** Ver 1.1 starts here ***/
	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog( c_ServiceName, "i_cntrct_cnt = :%d:",i_cntrct_cnt);
	}
	
	if (i_cntrct_cnt > 10)
	{
		if ( Fadd32 (ptr_fml_Ibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)	==	-1 )
		{
			fn_errlog( c_ServiceName, "S31315",FMLMSG , c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}
		fn_cpy_ddr ( ptr_st_pstn_actn->c_rout_crt );

		MEMSET(c_inp_strng);
		strcpy(c_inp_strng,c_inp_strng1);
		strcat(c_inp_strng,"\n");
			
		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"c_inp_strng 1 = :%s:",c_inp_strng);
		}

		if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)	==	-1 )
		{
			fn_errlog( c_ServiceName, "S31320",FMLMSG , c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}

		i_rtrn_cd1	=	tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

		if(	i_rtrn_cd1 != 0	)
		{
			fn_errlog( c_ServiceName, "S31325",TPMSG , c_err_msg ); /** ver 5.8 FMLMSG chngd to TPMSG **/
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng1,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31330",FMLMSG , c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Output String 1 Is :%s:",c_op_strng1);
		}

    /*** Ver 6.5 Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                   i_cntrct_cnt, 
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31335",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 6.5  Ends here ***/


		MEMSET(c_inp_strng);
  	/** Ver 1.8  Bug Fix Starts ***/
  	if(strcmp(sql_xchng_cd,"NFO") == 0)
  	{
    	strcpy(c_inp_strng,"1^NSE^");
  	}
  	else if (strcmp(sql_xchng_cd,"BFO") == 0)
  	{
    	strcpy(c_inp_strng,"1^BSE^");
  	}
  	/*** Ver 1.8 Ends ***/

		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"Initial c_inp_strng2 = :%s:",c_inp_strng2);
		}

		fn_spn_ltrim(c_inp_strng2,'|');
		/*sprintf(c_inp_strng,"1^%s",c_inp_strng2);  *** ver 1.8 comment ***/
		/*sprintf(c_inp_strng,"%s",c_inp_strng2);			*** ver 1.8 **/ 
		strcat(c_inp_strng,c_inp_strng2);			/*** ver 1.8 **/ 
		strcat(c_inp_strng,"\n");	

		if(DEBUG_MSG_LVL_5)
		{
			fn_userlog(c_ServiceName,"c_inp_strng 2 = :%s:",c_inp_strng);
		}

		if ( Fchg32 (ptr_fml_Ibuf,FFO_REMARKS,0,(char *)c_inp_strng,0)	==	-1 )
		{
			fn_errlog( c_ServiceName, "S31340",FMLMSG , c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}

		i_rtrn_cd1	=	tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

		if(	i_rtrn_cd1 != 0	)
		{
			fn_errlog( c_ServiceName, "S31345",TPMSG , c_err_msg );  /** ver 5.8 FMLMSG chngd to TPMSG **/
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng2,0)  ==  -1 )
		{
			fn_errlog( c_ServiceName, "S31350",FMLMSG , c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}
		
		fn_spn_ltrim(c_op_strng2,'1');
		fn_spn_ltrim(c_op_strng2,'^');

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Output String 2 Is :%s:",c_op_strng2);
		}

    /*** Ver 6.5  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn2,
                                    &d_bnov2,
                                    &d_total_bmrgn2,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31355",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn2 :%lf: d_bnov2:%lf: d_total_bmrgn2:%lf:",d_spn_bmrgn2,d_bnov2,d_total_bmrgn2);
    }
    /*** Ver 6.5  Ends here ***/
	}
	else
	{
		/*** Ver 1.1 Ends here ***/

		strcpy(c_inp_strng,c_inp_strng1);
  	strcat(c_inp_strng,c_inp_strng2);
  	strcat(c_inp_strng,"\n");


  	if ( Fadd32 (ptr_fml_Ibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)  ==  -1 )
  	{
   		fn_errlog( c_ServiceName, "S31360",FMLMSG , c_err_msg );
   		/***EXEC SQL CLOSE :sys_cursor;			Commented In VQC	***/
   		tpfree((char *)ptr_fml_Obuf);
   		tpfree((char *)ptr_fml_Ibuf);
   		return -1;
  	}

  	if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
  	{
   		fn_errlog( c_ServiceName, "S31365",FMLMSG , c_err_msg );
   		/***EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***/
   		tpfree((char *)ptr_fml_Obuf);
   		tpfree((char *)ptr_fml_Ibuf);
   		return -1;
  	}

  	fn_cpy_ddr ( ptr_st_pstn_actn->c_rout_crt );

		if(DEBUG_MSG_LVL_3)
		{
  		fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}

  	i_rtrn_cd1  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

  	if(i_rtrn_cd1 == -1)
  	{
   		fn_errlog( c_ServiceName, "S31370",TPMSG , c_err_msg );
   		/***EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***/
   		tpfree((char *)ptr_fml_Obuf);
   		tpfree((char *)ptr_fml_Ibuf);
   		return -1;
  	}

		if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng,0)  ==  -1 )
  	{
   		fn_errlog( c_ServiceName, "S31375",FMLMSG , c_err_msg );
   		/***EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***/
   		tpfree((char *)ptr_fml_Obuf);
   		tpfree((char *)ptr_fml_Ibuf);
   		return -1;
  	}

		if(DEBUG_MSG_LVL_0)
		{
  		fn_userlog(c_ServiceName,"Output String Is :%s:",c_op_strng);
		}
		/*** Commented on 07-Dec-2011 ***
		strcpy(c_op_strng1,strtok(c_op_strng,"|"));
  	strcpy(c_op_strng2,strtok(null_ptr,"|"));

 	 	strcpy(c_mrgn_indctr,strtok(c_op_strng,"^"));
  	strcpy(c_seq_num1,strtok(null_ptr,"^"));
  	strcpy(c_mtch_accnt1,strtok(null_ptr,"^"));
  	strcpy(c_spn_mrgn1,strtok(null_ptr,"^"));
  	strcpy(c_nov1,strtok(null_ptr,"^"));
  	strcpy(c_total_mrgn1,strtok(null_ptr,"^"));
  	strcpy(c_seq_num2,strtok(null_ptr,"^"));
  	strcpy(c_mtch_accnt2,strtok(null_ptr,"^"));
  	strcpy(c_spn_mrgn2,strtok(null_ptr,"^"));
  	strcpy(c_nov2,strtok(null_ptr,"^"));
  	strcpy(c_total_mrgn2,strtok(null_ptr,"^"));
  	strcpy(c_total_mrgn1, strtok(c_total_mrgn1,"|"));
		*** Commented on 07-Dec-2011 ***/

		/*** Added on 07-Dec-2011 start ***/
		strcpy(c_op_strng1,strtok(c_op_strng,"|"));
 		strcpy(c_op_strng2,strtok(null_ptr,"|"));

    /*** Ver 6.5  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31380",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 6.5  Ends here ***/

	}	/*** End Of Else ***/ /*** Ver 1.1 ***/

	strcpy(c_mrgn_indctr,strtok(c_op_strng1,"^"));
	strcpy(c_xchng_cd1,strtok(null_ptr,"^"));					/*** Ver 1.8 ***/
	strcpy(c_seq_num1,strtok(null_ptr,"^"));
	strcpy(c_mtch_accnt1,strtok(null_ptr,"^"));
	strcpy(c_spn_mrgn1,strtok(null_ptr,"^"));
	strcpy(c_nov1,strtok(null_ptr,"^"));
	strcpy(c_total_mrgn1,strtok(null_ptr,"^"));

	if(i_cntrct_cnt > 10)													/** Ver 2.4 Condition added **/
	{
		strcpy(c_xchng_cd2,strtok(c_op_strng2,"^"));					/*** Ver 1.8 ***/
		/*strcpy(c_seq_num2,strtok(c_op_strng2,"^"));			*** Ver 1.8 comment **/
		strcpy(c_seq_num2,strtok(null_ptr,"^"));				/*** Ver 1.8 ***/
	}																							/** Ver 2.4 starts ***/
	else
	{
		 strcpy(c_seq_num2,strtok(c_op_strng2,"^"));
	}																							 /** Ver 2.4 Ends ***/
	strcpy(c_mtch_accnt2,strtok(null_ptr,"^"));
	strcpy(c_spn_mrgn2,strtok(null_ptr,"^"));
	strcpy(c_nov2,strtok(null_ptr,"^"));
	strcpy(c_total_mrgn2,strtok(null_ptr,"^"));
	/*** Added on 07-Dec-2011 end ***/


	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"SPAN c_mtch_accnt1 Is :%s:",c_mtch_accnt1);
		fn_userlog(c_ServiceName,"SPAN c_xchng_cd1 Is :%s:",c_xchng_cd1);  /*** Ver 1.8 ***/
		fn_userlog(c_ServiceName,"SPAN c_xchng_cd2 Is :%s:",c_xchng_cd2);  /*** Ver 1.8 ***/
		fn_userlog(c_ServiceName,"SPAN c_mtch_accnt2 Is :%s:",c_mtch_accnt2);
	}

  if ( c_mtch_accnt1[0] == '1' || c_mtch_accnt1[0] == '2' || c_mtch_accnt1[0] == '3' )  /*** Ver 1.1 ***/
  {
   	fn_errlog( c_ServiceName, "S31385",LIBMSG , c_err_msg );
   	fn_userlog(c_ServiceName,"Service Return Error.");
   	/***EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***/
   	tpfree((char *)ptr_fml_Obuf);
   	tpfree((char *)ptr_fml_Ibuf);
   	return -1 ;
  }

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"c_spn_mrgn1 :%s:",c_spn_mrgn1);
		fn_userlog(c_ServiceName,"c_spn_mrgn2 :%s:",c_spn_mrgn2);
	}

  d_spn_mrgn1   = atof(c_spn_mrgn1);
  d_spn_mrgn2   = atof(c_spn_mrgn2);
  d_nov1        = atof(c_nov1);
  d_nov2        = atof(c_nov2);
  d_total_mrgn1 = atof(c_total_mrgn1);
  d_total_mrgn2 = atof(c_total_mrgn2);

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"c_spn_mrgn1 :%lf:",d_spn_mrgn1);
		fn_userlog(c_ServiceName,"c_spn_mrgn2 :%lf:",d_spn_mrgn2);
	}

  /*** Ver 6.5  Starts here ***/
  d_spn_bmrgn = fn_maxd(d_spn_bmrgn1,d_spn_bmrgn2) * 100;
  d_bnov      = fn_maxd(d_bnov1,d_bnov2) * 100;
  d_total_bmrgn = fn_maxd(d_total_bmrgn1,d_total_bmrgn2) * 100;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"d_spn_bmrgn :%lf: d_bnov :%lf: d_total_bmrgn:%lf:",d_spn_bmrgn,d_bnov,d_total_bmrgn);
  }
  /*** Ver 6.5  Ends here ***/

  st_undpstn_tobe.d_uspan_nenov_mrgn	= fn_maxd(d_spn_mrgn1,d_spn_mrgn2)	*	100;
  st_undpstn_tobe.d_net_optn_val			= fn_maxd(d_nov1,d_nov2)	*	100;
  st_undpstn_tobe.d_uspan_wenov_mrgn	= fn_maxd(d_total_mrgn1,d_total_mrgn2)	*	100;

  /*** Ver 6.5  Starts Here ***/
  st_undpstn_tobe.d_uspan_nenov_mrgn  = fn_maxd(st_undpstn_tobe.d_uspan_nenov_mrgn,d_spn_bmrgn);
  st_undpstn_tobe.d_net_optn_val = fn_maxd(st_undpstn_tobe.d_net_optn_val,d_bnov);
  st_undpstn_tobe.d_uspan_wenov_mrgn = fn_maxd(st_undpstn_tobe.d_uspan_wenov_mrgn,d_total_bmrgn);
  /*** Ver 6.5  Ends Here ***/


	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"SPAN	-	c_nov1 Is :%s:",c_nov1);
		fn_userlog(c_ServiceName,"SPAN	-	c_nov2 Is :%s:",c_nov2);
		fn_userlog(c_ServiceName,"SPAN	-	d_nov1 Is :%lf:",d_nov1);
		fn_userlog(c_ServiceName,"SPAN	-	d_nov2 Is :%lf:",d_nov2);
		fn_userlog(c_ServiceName,"SPAN	-	st_undpstn_tobe.d_net_optn_val Is :%lf:",st_undpstn_tobe.d_net_optn_val);
		fn_userlog(c_ServiceName,"SPAN	-	st_undpstn_tobe.d_uspan_nenov_mrgn IS :%lf:",st_undpstn_tobe.d_uspan_nenov_mrgn);
	}

	d_spn_mrgn=st_undpstn_tobe.d_uspan_nenov_mrgn;
	d_nov=st_undpstn_tobe.d_net_optn_val;
	d_total_mrgn=	st_undpstn_tobe.d_uspan_wenov_mrgn;


	i_returncode  = fn_cal_mrgn ( c_ServiceName,
                                d_total_mrgn,
                                d_mltplr,
                                d_expsr,
                                d_min_expsr,
                                &d_min_mrgn,
                                &d_intl_mrgn,
                                c_err_msg
                              );

 	if ( i_returncode !=  0 )
 	{
 	 	fn_errlog( c_ServiceName, "S31390",LIBMSG , c_err_msg );
   	fn_userlog(c_ServiceName,"Service Return Error.");
   	/***EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***/
   	tpfree((char *)ptr_fml_Obuf);
   	tpfree((char *)ptr_fml_Ibuf);
   	return -1 ;
 	}

	if(DEBUG_MSG_LVL_0)
	{
 		fn_userlog(c_ServiceName,"SPAN  - SPAN MARGIN IS :%lf:",d_spn_mrgn);
 		fn_userlog(c_ServiceName,"SPAN  - NOV IS :%lf:",d_nov);
 		fn_userlog(c_ServiceName,"SPAN  - Total Margin  IS :%lf:",d_total_mrgn);
 		fn_userlog(c_ServiceName,"SPAN  - Exposure  IS :%lf:",d_expsr);
 		fn_userlog(c_ServiceName,"SPAN  - Min. Margin IS :%lf:",d_min_mrgn);
 		fn_userlog(c_ServiceName,"SPAN  - Initial Margin IS :%lf:",d_intl_mrgn);
	}

	/* Type Casted by Mahesh for 1 paisa issue */

	st_undpstn_tobe.d_multpr            = d_mltplr      ;
  st_undpstn_tobe.d_eba_expr_mrgn     = (long long)d_expsr       ;
  st_undpstn_tobe.d_min_mrgn          = d_min_mrgn    ;
  st_undpstn_tobe.d_reqd_initial_mrgn = (long long)d_intl_mrgn   ;
  st_undpstn_tobe.d_ntnl_pl           = d_undrlyng_pl ;
  st_undpstn_tobe.d_span_wemult_mrgn  = (long long)d_total_mrgn * d_mltplr  ;

 	/** The code from this point onwards does the following activity   **/
 	/** Based on the type of action compare the current margin with    **/
 	/** required margin and update them. Do the profit loss correction **/

  /** This bit of code down below checks the difference betweend the  **/
 	/** current order level margin with the required order level margin **/
 	/** then take a corrective measure. This code need not be called for**/
 	/** action which do not involve any order level margin change       **/


	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"OPERATION TYPE BEFORE SWITCH IS :%ld:",ptr_st_pstn_actn->l_actn_typ);
	}

 	switch ( ptr_st_pstn_actn->l_actn_typ )
 	{
		case	ORS_CAN_ORD_REQ:

    	strcpy( c_narration_id , ON_CANCELLATION_PLACEMENT);

			if( ( strcmp(c_user_id,"system")	==	0 ) || ( c_sqr_cancellation_flg == 'Y' ) )
			{
      	c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;
			}
			else
			{
				c_dr_without_lmt_flg = DEBIT_WHEN_LIMIT;
			}


    break;

		default:
					fn_userlog ( c_ServiceName,"Invalid action type");
					tpfree((char *)ptr_fml_Obuf);
 					tpfree((char *)ptr_fml_Ibuf);
       		return -1;
    break;
 	}

	/*** Added on 05-Dec-2011 ***/
	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog( c_ServiceName, "Blocked Intial Margin Is :%lf: ",ptr_st_undpstn_crrnt->d_initial_mrgn);
		fn_userlog( c_ServiceName, "New Required Intial Margin Is :%lf: ",st_undpstn_tobe.d_reqd_initial_mrgn);
		fn_userlog(c_ServiceName,"c_channel IS :%s:",c_channel);
	}

	/*if( ptr_st_pstn_actn->l_actn_typ == ORS_CAN_ORD_REQ && strcmp(c_user_id,"system")	==	0 )*/
	if( c_dr_without_lmt_flg == DEBIT_TILL_LIMIT)
	{
		if ( (ptr_st_undpstn_crrnt->d_initial_mrgn	- st_undpstn_tobe.d_reqd_initial_mrgn) < 0 )
		{			
			/*** Releasing Blocked Initial Margin ***/
			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog( c_ServiceName, "Releasing  Blocked Margin :FUS_INITIAL_MRGN");
				fn_userlog( c_ServiceName, "Blocked Intial Margin Is :%lf: ",ptr_st_undpstn_crrnt->d_initial_mrgn);
			}

			if( strcmp(c_channel,"SYS") == 0 )
      {
        strcpy( c_narration_id ,REL_TRDMRGN_ON_SYS_CANCELLATION);
      }
      else
      {
        strcpy( c_narration_id ,REL_TRDMRGN_ON_SQR_ORDR_CANCELLATION);
      }

			c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;

			if ( ptr_st_undpstn_crrnt->d_initial_mrgn != 0 )
			{
					d_balance_amt  = 0.0;		/*** Ver 1.1 ***/

					i_returncode = fn_upd_spnlimits( c_ServiceName,
																			ptr_st_pstn_actn,
																			ptr_st_err_msg,
																			c_narration_id,
																			c_dr_without_lmt_flg,
																			ptr_st_undpstn_crrnt->d_initial_mrgn,
																			&d_balance_amt);

					if ( i_returncode != 0 )
					{
						fn_errlog( c_ServiceName, "S31395",LIBMSG , c_err_msg );
						tpfree((char *)ptr_fml_Obuf);
						tpfree((char *)ptr_fml_Ibuf);
						return -1;
					}
			}

			/*** Releasing Blocked Loss ***/
			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog( c_ServiceName, "Releasing  Blocked Loss :FUS_BLCKD_PL");
				fn_userlog( c_ServiceName, "Blocked LOSS Is :%lf: ",ptr_st_undpstn_crrnt->d_blckd_pl);
			}
			
			if( strcmp(c_channel,"SYS") == 0 )
      {
        strcpy( c_narration_id ,REL_BLKDLOSS_ON_SYS_CANCELLATION);
      }
      else
      {
        strcpy( c_narration_id ,REL_BLKDLOSS_ON_SQR_ORDR_CANCELLATION);
      }

			c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;

			if ( ptr_st_undpstn_crrnt->d_blckd_pl != 0 )
			{
					d_balance_amt  = 0.0;		/*** Ver 1.1 ***/

					i_returncode = fn_upd_spnlimits( c_ServiceName,
																			ptr_st_pstn_actn,
																			ptr_st_err_msg,
																			c_narration_id,
																			c_dr_without_lmt_flg,
																			ptr_st_undpstn_crrnt->d_blckd_pl,
																			&d_balance_amt);

					if ( i_returncode != 0 )
					{
						fn_errlog( c_ServiceName, "S31400",LIBMSG , c_err_msg );
						tpfree((char *)ptr_fml_Obuf);
						tpfree((char *)ptr_fml_Ibuf);
						return -1;
					}
			}
			
			if(DEBUG_MSG_LVL_3)
			{	
				fn_userlog(c_ServiceName,"st_undpstn_tobe.d_span_wemult_mrgn :%lf:",st_undpstn_tobe.d_span_wemult_mrgn);
			}

			d_upd_amount = (-1) * st_undpstn_tobe.d_span_wemult_mrgn; 
	
			if(DEBUG_MSG_LVL_3)
			{	
				fn_userlog(c_ServiceName,"d_upd_amount IS  :%lf:",d_upd_amount);
			}
		
			if( strcmp(c_channel,"SYS") == 0 )
      {
        strcpy( c_narration_id ,BLK_SPAN_MRGN_ON_SYS_CANCELLATION);
      }
      else
      {
        strcpy( c_narration_id ,BLK_SPAN_MRGN_ON_SQR_ORDR_CANCELLATION);
      }

			c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;

			if ( d_upd_amount	<  0 )
			{
					d_balance_amt  = 0.0;		/*** Ver 1.1 ***/

					i_returncode = fn_upd_spnlimits	( c_ServiceName,
																						ptr_st_pstn_actn,
																						ptr_st_err_msg,
																						c_narration_id,
																						c_dr_without_lmt_flg,
																						d_upd_amount,
																						&d_balance_amt
																					);
					if ( i_returncode != 0 )
					{
						fn_errlog( c_ServiceName, "S31405",LIBMSG , c_err_msg );
						/***EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***/
						tpfree((char *)ptr_fml_Obuf);
						tpfree((char *)ptr_fml_Ibuf);
						return -1;
					}

					/*** Added to take care of balance amount in case of ***/
					/*** DEBIT_TILL_LIMIT. d_balance_amt is added        ***/
					/*** since it is always negative or Zero             ***/

					ptr_st_undfut_pos_to_be->d_span_wemult_mrgn	=	ptr_st_undfut_pos_to_be->d_span_wemult_mrgn + d_balance_amt ;
			}
		
			if(DEBUG_MSG_LVL_3)
			{	
				fn_userlog(c_ServiceName,"st_undpstn_tobe.d_eba_expr_mrgn :%lf:",st_undpstn_tobe.d_eba_expr_mrgn);
			}

			d_upd_amount = (-1) * st_undpstn_tobe.d_eba_expr_mrgn; 

			
			if( strcmp(c_channel,"SYS") == 0 )
      {
        strcpy( c_narration_id ,BLK_EXPR_MRGN_ON_SYS_CANCELLATION);
      }
      else
      {
        strcpy( c_narration_id ,BLK_EXPR_MRGN_ON_SQR_ORDR_CANCELLATION);
      }

			c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;

			if ( d_upd_amount	<  0 )
			{
					d_balance_amt  = 0.0;		/*** Ver 1.1 ***/

					i_returncode = fn_upd_spnlimits	( c_ServiceName,
																						ptr_st_pstn_actn,
																						ptr_st_err_msg,
																						c_narration_id,
																						c_dr_without_lmt_flg,
																						d_upd_amount,
																						&d_balance_amt
																					);
					if ( i_returncode != 0 )
					{
						fn_errlog( c_ServiceName, "S31410",LIBMSG , c_err_msg );
						/***EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***/
						tpfree((char *)ptr_fml_Obuf);
						tpfree((char *)ptr_fml_Ibuf);
						return -1;
					}

					/*** Added to take care of balance amount in case of ***/
					/*** DEBIT_TILL_LIMIT. d_balance_amt is added        ***/
					/*** since it is always negative or Zero             ***/

					ptr_st_undfut_pos_to_be->d_eba_expr_mrgn	=	ptr_st_undfut_pos_to_be->d_eba_expr_mrgn + d_balance_amt ;
			}

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName," Calculating Final INITIAL MARGIN ")	;

				fn_userlog(c_ServiceName,"ptr_st_undfut_pos_to_be->d_span_wemult_mrgn Is :%lf:",ptr_st_undfut_pos_to_be->d_span_wemult_mrgn);
				fn_userlog(c_ServiceName,"ptr_st_undfut_pos_to_be->d_eba_expr_mrgn Is  :%lf:",ptr_st_undfut_pos_to_be->d_eba_expr_mrgn);
			}

			ptr_st_undfut_pos_to_be->d_initial_mrgn = ptr_st_undfut_pos_to_be->d_span_wemult_mrgn + ptr_st_undfut_pos_to_be->d_eba_expr_mrgn ;
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Here FINAL INTIAL MARGIN TO BE BLOCKED Is :%lf:",	ptr_st_undfut_pos_to_be->d_initial_mrgn);
			}
					
			if( strcmp(c_channel,"SYS") == 0 )
      {
        strcpy( c_narration_id ,BLK_NOTIONAL_ON_SYS_CANCELLATION);
      }
      else
      {
        strcpy( c_narration_id ,BLK_NOTIONAL_ON_SQR_ORDR_CANCELLATION);
      }

			c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; 

			if ( d_undrlyng_pl < 0 )/*** Net Notional Loss ***/
			{
				d_balance_amt  = 0.0;		/*** Ver 1.1 ***/

				i_returncode = fn_upd_spnlimits(	c_ServiceName,
																			ptr_st_pstn_actn,
																			ptr_st_err_msg,
																			c_narration_id,
																			c_dr_without_lmt_flg,
																			d_undrlyng_pl,
																			&d_balance_amt);
				if ( i_returncode != 0 )
				{
					fn_errlog( c_ServiceName, "S31415",LIBMSG , c_err_msg );
					tpfree((char *)ptr_fml_Obuf);
					tpfree((char *)ptr_fml_Ibuf);
					return -1;
				}

				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"SPAN	-	d_undrlyng_pl :%lf:",d_undrlyng_pl);
					fn_userlog(c_ServiceName,"SPAN	-	d_balance_amt Is :%lf:",d_balance_amt);
				}

				st_undpstn_tobe.d_blckd_pl	= ((-1) * d_undrlyng_pl) + d_balance_amt;		
			}
			else
			{
				st_undpstn_tobe.d_blckd_pl = 0 ;
			}
		}
	}
	/*** End on 05-Oct-2011 Start ***/
	else   /*** For normal order cancellation DEBIT_WHEN_LIMIT  (Only block dont release) ***/
	{
		d_diff_mrgn = ptr_st_undpstn_crrnt->d_initial_mrgn	- st_undpstn_tobe.d_reqd_initial_mrgn ;

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog ( c_ServiceName, "Difference in Mrgn :%lf:", d_diff_mrgn );
		}

    if ( ptr_st_pstn_actn->c_nkd_blkd_flg != ROLLOVER_WITH_SPREAD)  /*** if added in ver 4.7 ***/
    {
		if ( d_diff_mrgn	<  0 )
		{
				d_balance_amt  = 0.0;		/*** Ver 1.1 ***/
        c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; /***** ver 6.1 ********/

				i_returncode = fn_upd_spnlimits	( c_ServiceName,
																					ptr_st_pstn_actn,
																					ptr_st_err_msg,
																					c_narration_id,
																					c_dr_without_lmt_flg,
																					d_diff_mrgn,
																					&d_balance_amt
																				);
				if ( i_returncode != 0 )
				{
         /********** commented in ver 6.1  
					switch ( i_returncode )
					{
						case  INSUFFICIENT_LIMITS :

							fn_errlog( c_ServiceName, "B22003",DEFMSG , c_err_msg );
							*** Commented In Ver 3.0
							EXEC SQL CLOSE :sys_cursor;
							tpfree((char *)ptr_fml_Obuf);
							tpfree((char *)ptr_fml_Ibuf);
							return INSUFFICIENT_LIMITS  ;
							Commented In Ver 3.0 Ends ***

            	*** Ver 5.0 Start ***
            	if( c_balance_flg != 'Y' )
            	{
              	d_balance_amt_tmp = d_balance_amt;
              	c_balance_flg = 'Y';
            	}
            	*** Ver 5.0 Ends ***

              ******** Ver 3.0 Starts Here ****
              fn_userlog(c_ServiceName,"Inside INSUFFICIENT_LIMITS Margin Block After SPAN Server Call");
              c_mrgn_insufficient_flg ='Y' ;
              *** d_total_amount = d_total_amount + d_diff_mrgn; *** Commented in Ver 5.0 ***
              break;
              ******** Ver 3.0 Ends Here ******

						default:

							fn_errlog( c_ServiceName, "S31420",LIBMSG , c_err_msg );
							***EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***
							tpfree((char *)ptr_fml_Obuf);
							tpfree((char *)ptr_fml_Ibuf);
							return -1; 
          }*********** comment ends for 6.1 ****/
           /*** ver 6.1 starts ****/
           fn_errlog( c_ServiceName, "S31425",LIBMSG , c_err_msg );
           tpfree((char *)ptr_fml_Obuf);
           tpfree((char *)ptr_fml_Ibuf);
           return -1;
           /*** ver 6.1 ends ***/
				}
				/** ptr_st_undfut_pos_to_be->d_initial_mrgn	=	ptr_st_undfut_pos_to_be->d_reqd_initial_mrgn;
 commented in ver 6.1 ***/

         /*** ver 6.1 starts ***/
         if( d_balance_amt < 0 )
         {
            if( c_balance_flg != 'Y' )
            {
                d_balance_amt_tmp = d_balance_amt;
                c_balance_flg = 'Y';
            }
         		c_mrgn_insufficient_flg ='Y' ;
          }

         d_diff_mrgn_blocked = (-1) * d_diff_mrgn + d_balance_amt;

         ptr_st_undfut_pos_to_be->d_initial_mrgn =  ptr_st_undpstn_crrnt->d_initial_mrgn + d_diff_mrgn_blocked;

         /*** ver 6.1 ends ***/  

				/*** Ver 5.0 Starts ***/
      	if( c_balance_flg == 'Y' )
      	{
        	d_total_amount = d_total_amount + d_diff_mrgn;
      	}
      	/*** Ver 5.0 Ends ***/
			}
       }
			EXEC SQL
				SELECT  NVL(FUS_BLCKD_PL,0)
				INTO    :d_oblckd_amnt
				FROM    FUS_FO_UNDRLYNG_SPN_PSTN
				WHERE   FUS_CLM_MTCH_ACCNT  = :sql_cln_mtch_accnt
				AND     FUS_UNDRLYNG        = :sql_undrlyng
				AND     FUS_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd;

			if ( SQLCODE != 0 && SQLCODE  !=  NO_DATA_FOUND)
			{
				fn_errlog( c_ServiceName, "S31430",SQLMSG , c_err_msg );
				/***EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***/
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf);
				return -1;
			}
		
			if ( d_undrlyng_pl >= 0 )
			{
				d_diff_pl = d_oblckd_amnt ;
			}
			else 
			{
				d_diff_pl = d_oblckd_amnt + d_undrlyng_pl ;
			}


			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog ( c_ServiceName, "Difference in P&L :%lf:", d_diff_pl );
			}

      /*** Ver 3.0 Starts Here  ***/
      if(  c_mrgn_insufficient_flg == 'Y' ||   c_prm_insufficient_flg == 'Y')
      {
        d_required_amount=0.0;

        fn_userlog(c_ServiceName,"d_balance_amt  :%lf:",d_balance_amt);
				fn_userlog(c_ServiceName,"d_balance_amt_tmp :%lf:",d_balance_amt_tmp); /*** Ver 5.0 ***/

   /*** d_required_amount = d_total_amount + d_premium + d_diff_pl + d_balance_amt ; * Commented in Ver 5.0 **/
        /*** Add starts in Ver 5.3 ***/
        if ( d_diff_pl <  0 )
        {
         fn_userlog(c_ServiceName,"Inside Negative PnL Diff Condition.");
        /*** Add Ends in ver 5.3 ***/
				d_required_amount = d_total_amount + d_premium + d_diff_pl + d_balance_amt_tmp; /** Ver 5.0 **/
        /*** Add starts in Ver 5.3 ***/
        }
        else
        {
          fn_userlog(c_ServiceName,"Inside Non-Negative PnL Diff Condition.");
          d_required_amount = d_total_amount + d_premium + d_balance_amt_tmp;
        }
				if(DEBUG_MSG_LVL_4)
				{
  	      fn_userlog(c_ServiceName,"INSUFF: d_total_amount:%lf: d_premium:%lf: d_diff_pl:%lf: d_balance_amt_tmp:%lf: ",d_total_amount,d_premium,d_diff_pl,d_balance_amt_tmp);   
				} 
        /*** Add Ends in ver 5.3 ***/
        d_required_amount = ( d_required_amount * (-1) ) / 100 ;

        fn_userlog(c_ServiceName," d_required_amount :%lf:",d_required_amount);
        
        if(DEBUG_MSG_LVL_4) /** ver 5.8 **/
        {
         fn_userlog(c_ServiceName," ptr_st_err_msg.c_err_msg :%s:",ptr_st_err_msg->c_err_msg);
        }

        /***EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***/
        /*** commented in ver 6.1 **
        tpfree((char *)ptr_fml_Obuf);
        tpfree((char *)ptr_fml_Ibuf);
        return INSUFFICIENT_LIMITS  ;
        ****/

        c_g_fc_flg = 'I'; /*** ver 6.1 ***/
      }
      /*** Ver 3.0 Ends Here  ends ***/
		

			if ( d_diff_pl <  0 )
			{
				strcpy( c_narration_id , DEFICIT_PROFIT_LOSS );

				c_dr_without_lmt_flg = DEBIT_TILL_LIMIT;

				d_balance_amt  = 0.0;		/*** Ver 1.1 ***/

				i_returncode = fn_upd_spnlimits	( c_ServiceName,
																					ptr_st_pstn_actn,
																					ptr_st_err_msg,
																					c_narration_id,
																					c_dr_without_lmt_flg,
																					d_diff_pl,
																					&d_balance_amt
																				);
				if ( i_returncode != 0 )
				{
					fn_errlog( c_ServiceName, "S31435",LIBMSG , c_err_msg );
					/***EXEC SQL CLOSE :sys_cursor;			Commented In VQC  ***/
					tpfree((char *)ptr_fml_Obuf);
					tpfree((char *)ptr_fml_Ibuf);
					return -1;
				}

				d_diff_pl = d_diff_pl - d_balance_amt;	/*** Ver 2.3 ***/

				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"SPAN  - d_diff_pl :%lf:",d_diff_pl);
					fn_userlog(c_ServiceName,"SPAN  - d_balance_amt Is :%lf:",d_balance_amt);
				}

				st_undpstn_tobe.d_blckd_pl	=	d_oblckd_amnt	-	d_diff_pl;
			}
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"c_user_id:%s:",c_user_id);
	}
	/**The condition of c_user_id is added by Shailesh on 03-jan-2011 since System placed cancellation orders were updating MTM flag from M to O **/

	if(ptr_st_undpstn_crrnt->c_mtm_flg == 'M' && (strcmp(c_user_id,"system")  !=  0) && c_dr_without_lmt_flg == DEBIT_WHEN_LIMIT)
	{
		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"SPAN - Going To Update MTM Flag From M To O.");

			fn_userlog(c_ServiceName,"SPAN - Before MTM Flag Is :%c:",ptr_st_undfut_pos_to_be->c_mtm_flg);
		}

		ptr_st_undfut_pos_to_be->c_mtm_flg = 'O';

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"SPAN - After MTM Flag Is :%c:",ptr_st_undfut_pos_to_be->c_mtm_flg);
		}
	}	

  /*** Ver 6.4 Starts here ***/
  i_returncode=fn_cal_premutilzed( c_ServiceName, ptr_st_pstn_actn);
  if ( i_returncode != 0 )
  {
     fn_errlog( c_ServiceName, "S31440",LIBMSG , c_err_msg );
     tpfree((char *)ptr_fml_Obuf);
     tpfree((char *)ptr_fml_Ibuf);
     return -1;
  }
  /*** ver 6.4 Ends here ***/

	tpfree((char *)ptr_fml_Obuf);
 	tpfree((char *)ptr_fml_Ibuf);

 	return 0;
}
