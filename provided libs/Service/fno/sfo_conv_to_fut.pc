/*******************************************************************************/
/*		Program							:	SFO_CONV_TO_FUT																		 */
/*																																						 */
/*		Input								:	FFO_PRDCT_TYP																			 */
/*                          FFO_UNDRLYNG																			 */
/*                          FFO_CNTRCT_TAG																		 */
/*                          FFO_CTGRY_INDSTK																	 */
/*                          FFO_XCHNG_CD                                       */
/*                          FFO_EBA_MTCH_ACT_NO                                */
/*																																						 */
/*    Output              :																										 */
/*																																						 */
/*    Description         : This service converts futureplus position to       */
/*                          Future.																						 */
/*																																					   */
/*																																						 */
/*    Log                 : 1.0   12-Mar-2008   Shailesh|Kunal 								 */
/*                        : 1.1   16-Apr-2008   Kunal Jadav                    */
/*                        : 1.2   24-Feb-2009   Wipro                          */
/*                        : 1.3   25-Sep-2009   Vidyayini Krish                */
/*												:	1.5		07-May-2010		Sandeep Patil									 */
/*												:	1.6		27-May-2010		Sandeep Patil									 */
/*												: 1.7   27-Sep-2012	  Vishnu	Nair									 */
/*												: 1.8		22-Oct-2012		Vishnu	Nair									 */
/*												: 1.9		07-Jan-2013		Vishnu	Nair									 */
/*												: 2.0		23-Jan-2013		Vishnu	Nair									 */
/*                        : 2.1   06-Feb-2013   Mahesh Shinde                  */
/*											  :	2.2 	31-May-2013		Vishnu Nair										 */
/*											  :	2.3 	17-Sep-2013		Mahesh Shinde									 */
/*												:	2.4		19-Feb-2014   Sandeep Patil									 */
/*												:	2.5		23-Jun-2014		Sandeep Patil									 */
/*												:	2.6		30-Dec-2014	  Ritesh Deolekar   						 */
/*                        : 2.7   01-Aug-2014   Bhushan Sonwane                */
/*                        : 2.8   03-Jul-2015   Anand Dhopte                   */
/*                        : 3.0   20-Jun-2016   Sachin Birje                   */
/*                        : 3.1   01-Jul-2016   Samip M												 */
/*                        : 3.2   25-Apr-2017   Bhupendra Malik                */
/*												:	3.3		03-May-2018		Parag Kanojia									 */
/*												: 3.4		28-Aug-2018		Bhushan Harekar								 */
/*                        : 3.5   23-Oct-2019   Tanmay Patel                   */
/*												: 3.6		02-Feb-2021		Kiran Itkar										 */
/*                        :3.7    14-Dec-2021   Mahesh Regulwar                */
/*                        :3.8    07-Mar-2023   Mahesh Shinde          		     */
/*												:3.9 		30-Mar-2023  ( bhavana ) 										 */
/*                        :TOL    20-Sept-2023  Agam                           */
/*******************************************************************************/  
/*	  1.0		-		New Release																										 */
/*    1.1   -   IBM Migration Changes                                          */
/*    1.2   -   Partial Conversion From FuturePlus To Future                   */
/*    1.3   -   Check of lot size implemented for DL. ASP had this check on    */ 
/*              their end.                                                     */ 
/*    1.4   -   Passing user_id only when DL allowed											     */
/*		1.5		-		NNF DownLoad Changes 																					 */
/*		1.6		-		Lot size check is applied only for call through ASP & DL,			 */
/*							Lot size check is ignored in case of call through batch as		 */
/* 							expiry date is not passed as input.														 */
/* 		1.7		-		Check for open qty added for SilverLight and Windows APP			 */
/*		1.8		-   Disable FuturePlus for BSE																		 */
/*		1.9		-		Qty check skipped when service called through system					 */
/*		2.0		-		Change to append DL Setup No with userid while inserting			 */ 
/*							into FOD_FO_ORDR_DTLS																					 */
/*    2.1   -   SPAN FuturePLUS handling.                                      */
/*		2.2		-		Restrict DBC mapped customer to convert position if trading is */
/*							not allowed 																									 */
/*		2.3		-		CR-ISEC14-41247  Correct order flow on converted positions page*/
/*		2.4	  -   Error Message Changed																					 */
/*		2.5		-   Pending Qty Selection Query Changed														 */
/*    2.6   -   Nick Name Check Commented for DBC Customers                    */
/*    2.7   -   Changes For HTML5                                              */
/*    2.8   -   Contract Master and Trade Quote Table Merger Changes           */
/*    3.0   -   Trade insert and process time changes                          */
/*    3.1   -   Check Session IP Common Function															 */
/*    3.2   -   Optimization                                                   */
/*		3.3		-		NNF_CHANGES_7.21(PAN CHANGES)																	 */
/*		3.4		-		Physicall Settlement of Stock Derivatives phase 2 changes			 */
/*    3.5   -   Ipv6 Format                                                    */
/*		3.6		-		Separate EOS for Stock and Index Underlyings in FPSL					 */
/*    3.7   -   Average Price for PNL                                          */ 
/*    3.8   -   FNO lock user changes																					 */
/*		3.9   -   Real-time margin reporting regulatory changes                  */
/*   TOL    -   Tux on Linux                                                   */
/*******************************************************************************/
#include <stdlib.h> 
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <eba_to_ors.h>
#include <fo_view_def.h>
#include <fn_ddr.h>
#include <fn_session.h>           /*  Ver 1.1 */
#include <fn_log.h>               /*  Ver 1.1 */
#include <fn_tuxlib.h>            /*  Ver 1.1 */
#include <fn_read_debug_lvl.h>    /*  Ver 1.1 */
#include <fn_val_ord.h> 					/* 	Ver 2.0 */

#include <fn_pos.h>               /** Ver 3.2 **/
#include <fn_span_lib.h> /*** Ver 3.7 ***/

int fn_ins_ordbook ( char  *c_ServiceName,                   /*** Ver 2.0  ***/
                      char  *c_user_id,
                      struct vw_orderbook *ptr_st_ordbook,
                      char  c_spn_flg,                        /*** Ver 2.1 ***/
											char *c_pan_no,													/*** Added In Ver 3.3 ***/
											char c_setlment_flag,										/*** Added in Ver 3.4 ***/	
                      struct vw_err_msg *ptr_st_err_msg
                    );  /* Renamed fn_ins_ordrbook to fn_ins_ordbook in Ver TOL */


void SFO_CONV_TO_FUT( TPSVCINFO *rqst )
{
	FBFR32	*ptr_fml_Ibuf;

	char c_ServiceName[33];
	char c_err_msg[256];
	char c_xchng_ack[ LEN_XCHNG_ACK ]; 
	char c_bp_id[9];
	char c_ctcl_id[17];
	char c_alias[9];
	char c_roll_stts;
	char c_user_id[16];           /* Ver 2.0 */
  char c_span_flg = '\0';          /*** Ver 2.1 ***/
	char c_dlvry_pos_allwd ='\0';		 /** Ver 3.4 **/
	char c_setlmnt_flg		 ='\0';		 /** Ver 3.4 **/
  
  double d_prtfl_avgprc = 0.0; /** Ver 3.7 **/
	struct st_pstn_actn st_pstnactn; /*** Ver 3.7 ***/

	int	i_returncode;
	int i_level_exists;
	int i_trnsctn; 
	int i_ip_len;
	int i_op_len;
	int i_count=0;
  int i_is_dbc_cust;            /***  Ver 2.2 ***/	
	
	EXEC SQL BEGIN DECLARE SECTION;
		varchar c_systm[LEN_DATE];
    varchar c_trd_dt[LEN_DATE];
		varchar c_trd_ref [ 10 + 1];
		varchar c_trd_rfrnc [ 10 + 1];	/**Added to avoid duplicate trd_rfrnc in FTD **/
		varchar c_trd_tm [ LEN_DATE];
		varchar v_user_id [ 9 ];         /*1.4  DL*/
		varchar v_user_id_bkup [ 9 ]; /** Ver 1.4 **/

		struct vw_usr_prfl st_usr_prfl;
		struct vw_pstn_actn st_pstn_actn;
    struct vw_xchngbook st_xchngbook;
    struct vw_orderbook st_orderbook;
    struct vw_tradebook st_tradebook;
		struct vw_sequence st_s_sequence;
  	struct vw_sequence st_r_sequence;
		struct vw_err_msg st_err_msg;     /* Ver 2.0 */

	  char c_expry_dt[12];
		char c_spl_flag;
		char c_pipe_id[3];
		char  sql_cln_mtch_accnt[11];
		char  sql_xchng_cd[4];
    char  sql_prd_typ;
    char  sql_undrlyng[7];
    char  sql_cntrct_tag;
    char  sql_exer_typ;
    char  sql_opt_typ;
		char c_seq_num[9];
		char 	c_temp_psswrd1[LEN_USR_TRDNG_PSSWRD];		/** Ver 3.1 **/
		char 	c_trdng_psswrd_flg = 'N';								/** Ver 3.1 **/
		char	c_txn_flg='Y';													/** Ver 3.1 **/
		char 	c_ip_address[45+1];	/** Changed from 15 to 45 in Ver 3.5 **/	/** Ver 3.1 **/

		long 	sql_strike_prc;
		long l_xchng_seq_num;
		long l_ord_seq_num;
		long l_lot_size=0; /* ver 1.3 */
		long l_qty=0;      /* Ver 1.7 */
    long l_seq_num=0; /** Ver 3.2 **/
		short int si_null;
		varchar v_pan_no[30+1];       /*** Added In Ver 3.3 ***/
	EXEC SQL END	DECLARE SECTION;

EXEC SQL INCLUDE "table/usr_user_master.h";                  /***** VER 1.4  ******/
  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );

	INITDBGLVL(c_ServiceName);                /* Ver 1.1 */
	MEMSET(st_err_msg);			/** Ver 3.1 **/
	MEMSET(v_pan_no);								/*** Added In Ver 3.3 ***/
	MEMSET(st_pstnactn); /*** Ver 3.7 ***/

  i_returncode = Fvftos32( ptr_fml_Ibuf,
                         ( char * )&st_pstn_actn,
                         "vw_pstn_actn" );

  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	
	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_usr_prfl,
                           "vw_usr_prfl" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	
	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_xchngbook,
                           "vw_xchngbook" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_orderbook,
                           "vw_orderbook" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }



  i_returncode = Fget32 ( ptr_fml_Ibuf, FFO_SPL_FLG, 0, (char *)&c_spl_flag, 0 );
  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31025", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  i_returncode = Fget32 ( ptr_fml_Ibuf, FFO_CTCL_ID, 0, (char *)c_ctcl_id, 0 );
  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31030", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/*** Added for Ver 3.1 ****/

	i_returncode =  fn_check_user_ip ( c_ServiceName,
																			&st_usr_prfl ,
																			c_temp_psswrd1,
																			c_trdng_psswrd_flg,
																			c_ip_address,
																			c_txn_flg,
																			&st_err_msg );

	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31035", LIBMSG, c_err_msg );
		fn_userlog(c_ServiceName,"error message :%s:",st_err_msg.c_err_msg);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"ip address:%s:",c_ip_address);
	}

	/** Ver 3.1 ***/

	if( strcmp(st_usr_prfl.c_user_id ,"system")!=0 && st_usr_prfl.l_session_id != 0)
	{
		i_returncode = Fget32 ( ptr_fml_Ibuf, FFO_EXPRY_DT, 0, (char *) c_expry_dt, 0 );
		if( i_returncode == -1 && i_returncode != FNOTPRES )
		{
			fn_errlog( c_ServiceName, "S31040", FMLMSG, c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		else if( ( i_returncode == -1 ) && ( i_returncode == FNOTPRES ) )
				 {
						if( c_spl_flag == SINGLE_CONVERSION )
						{
							fn_errlog( c_ServiceName, "S31045", FMLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
				 }
	}


	/*These values were not being pssed from Front End in certain conditions hence hardcoded */
	st_pstn_actn.c_exrc_typ = 'E';
	st_pstn_actn.c_opt_typ = '*';
	st_pstn_actn.l_strike_prc = 0;
	
  fn_init_ddr_val ( st_pstn_actn.c_rout_crt );

  if( DEBUG_MSG_LVL_3 ) 
	{
    fn_userlog( c_ServiceName, "Match Account :%s:",
                                  st_pstn_actn.c_cln_mtch_accnt );
    fn_userlog( c_ServiceName, "Exchange code :%s:",
                                  st_pstn_actn.c_xchng_cd );
    fn_userlog( c_ServiceName, "Product Type  :%c:",
                                  st_pstn_actn.c_prd_typ );
    fn_userlog( c_ServiceName, "Underlyng     :%s:",
                                  st_pstn_actn.c_undrlyng );
    fn_userlog( c_ServiceName, "Expiry date   :%s:",
                                  st_pstn_actn.c_expry_dt );
    fn_userlog( c_ServiceName, "Excercise Type:%c:",
                                  st_pstn_actn.c_exrc_typ );
    fn_userlog( c_ServiceName, "Option Type:%c:",
                                  st_pstn_actn.c_opt_typ );
    fn_userlog( c_ServiceName, "Strike Price:%ld:",
                                  st_pstn_actn.l_strike_prc);
    fn_userlog( c_ServiceName, "Category      :%c:",
                                 st_pstn_actn.c_ctgry_indstk );
    fn_userlog( c_ServiceName, "Contract tag  :%c:",
                                 st_pstn_actn.c_cntrct_tag );
    fn_userlog( c_ServiceName, "Special Flag  :%c:",
                                 							c_spl_flag );
  }
	
	strcpy(sql_cln_mtch_accnt,st_pstn_actn.c_cln_mtch_accnt);
	strcpy(sql_xchng_cd,st_pstn_actn.c_xchng_cd);
	strcpy(sql_undrlyng,st_pstn_actn.c_undrlyng);
	sql_prd_typ = st_pstn_actn.c_prd_typ;
	sql_exer_typ = st_pstn_actn.c_exrc_typ;
	sql_strike_prc = st_pstn_actn.l_strike_prc;	
	sql_opt_typ = st_pstn_actn.c_opt_typ;
	sql_cntrct_tag = st_pstn_actn.c_cntrct_tag;

	 /***  Ver 2.2 Starts  ***/

  if(st_usr_prfl.c_user_id[0] != BPID && strcmp(st_usr_prfl.c_user_id ,"system")!=0)
  {
    i_is_dbc_cust = 0;

    EXEC SQL
        SELECT 1
            INTO :i_is_dbc_cust
        FROM  CLM_CLNT_MSTR
        WHERE CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
        AND   CLM_TRD_FLG = 'N'
        AND   CLM_BP_ID IS NOT NULL;

    if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
    {
 			fn_errlog( c_ServiceName, "S31050", SQLMSG,c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );    
    }

    if ( i_is_dbc_cust == 1 )
    {
      fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst, this facility has been Disabled");
      fn_errlog( c_ServiceName, "B35018", "", c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

  /***  Ver 2.2  Ends  ***/

/******************************* Ver 1.8 Starts ********************/
	
	if( strcmp(st_pstn_actn.c_xchng_cd,"BFO") == 0 && st_pstn_actn.c_prd_typ == 'P' )
	{
		fn_errlog( c_ServiceName, "S31055", "This facility is currently not enabled for BSE", c_err_msg  );
		 strcpy(c_err_msg,"This facility is currently not enabled for BSE.");
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

/****************************** Ver 1.8 Ends **********************/

	fn_userlog( c_ServiceName, "CR-ISEC14-144377 Index/Stock :%c:",  st_pstn_actn.c_ctgry_indstk );   /*** Added in Ver 3.6 ***/	

	EXEC SQL
     SELECT /*** MTM_ROLL_STTS Commented in Ver 3.6 ***/
						/*** DECODE added in Ver 3.6 ***/
						DECODE ( :st_pstn_actn.c_ctgry_indstk,'I',MTM_ROLL_STTS,'S',MTM_ROLL_STTS_S,'N' )
     INTO   :c_roll_stts
     FROM   MTM_APPLN_STTS
     WHERE  MTM_XCHNG_CD =  :st_xchngbook.c_xchng_cd
     AND    MTM_PIPE_ID  =  :st_xchngbook.c_pipe_id;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31060", SQLMSG,c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if (c_roll_stts == 'N' )
    {
      fn_errlog( c_ServiceName, "B31027",DEFMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
	
	if(st_usr_prfl.c_user_id[0] == BPID)
  {
		/************************Commnented in Ver 2.6 *******************
	
      if(Fget32(ptr_fml_Ibuf,FFO_ALIAS,0,(char *)c_alias,0) == -1)
      {
            fn_errlog( c_ServiceName, "S31065", FMLMSG, c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           * tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); *
      }
    	i_level_exists = 0;
      EXEC SQL
        SELECT 1
        INTO   :i_level_exists
        FROM   CLM_CLNT_MSTR
        WHERE  CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
        AND    CLM_BP_ID      = :st_usr_prfl.c_user_id
        AND    CLM_ALIAS_NAME = :c_alias;

			if( DEBUG_MSG_LVL_3 )
  		{
      	fn_userlog(c_ServiceName,"BP alias  is :%s:",c_alias);
			}

      if(i_level_exists != 1 )
      {
            fn_errlog( c_ServiceName, "B55006", "", c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          *  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 ); *
      }
		
		************************ Ver 2.6 COmment Ends ******************/

      strcpy(c_bp_id,st_usr_prfl.c_user_id);
  }
	else
  {
     strcpy(c_bp_id,"*");
  }
	if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog(c_ServiceName,"The BP id is :%s: ,:%s:", c_bp_id,st_usr_prfl.c_user_id);
  	fn_userlog(c_ServiceName,"The Alias is :%s: ", c_alias);
	}

	EXEC SQL
  SELECT TO_CHAR ( EXG_NXT_TRD_DT, 'yyyymmdd' ),
  		   TO_CHAR ( EXG_NXT_TRD_DT, 'mmddyyyy' ),		/**Added to avoid duplicate trd_rfrnc in FTD **/
         TO_CHAR ( EXG_NXT_TRD_DT, 'DD-Mon-yyyy' ),
         TO_CHAR ( sysdate, 'DD-Mon-yyyy hh24:mi:ss' )
  INTO :c_trd_ref,
  	   :c_trd_rfrnc,			
       :c_trd_dt,
			 :c_trd_tm
  FROM EXG_XCHNG_MSTR, OPM_ORD_PIPE_MSTR
  WHERE OPM_PIPE_ID =  :st_usr_prfl.c_pipe_id
  AND EXG_XCHNG_CD = OPM_XCHNG_CD;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31070",SQLMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy ( c_err_msg, "System error. Contact system support" );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  SETNULL ( c_trd_ref );
  SETNULL ( c_trd_rfrnc);
  SETNULL ( c_trd_dt );
  SETNULL ( c_trd_tm );
	SETLEN(c_trd_ref);	
	SETLEN(c_trd_rfrnc);	

	if( DEBUG_MSG_LVL_3 )
  {
  	fn_userlog( c_ServiceName, "c_trd_ref = [%s]",c_trd_ref.arr);
  	fn_userlog( c_ServiceName, "c_trd_dt = [%s]",c_trd_dt.arr);
	}


/*** Ver 1.4 additions ****/


strcpy((char *)v_user_id.arr,st_usr_prfl.c_user_id);

SETLEN(v_user_id);
if(DEBUG_MSG_LVL_3)
{
	fn_userlog(c_ServiceName,"st_usr_prfl.c_user_id IS  :%s:", st_usr_prfl.c_user_id);
	fn_userlog(c_ServiceName,"v_user_id IS  :%s:", v_user_id.arr );
}

if ( strcmp((char *)v_user_id.arr,"system") == 0 )
{
  if(DEBUG_MSG_LVL_3)
  {
  fn_userlog(c_ServiceName,"SYSTEM Convert");
  }
 EXEC SQL  SELECT  DECODE(NVL(CLM_BP_ID,'*'),'*',UAC_USR_ID,CLM_BP_ID)
            INTO    :v_user_id
            FROM    UAC_USR_ACCNTS, CLM_CLNT_MSTR
            WHERE   CLM_MTCH_ACCNT      = :st_usr_prfl.c_cln_mtch_accnt
            AND     UAC_CLM_MTCH_ACCNT  = CLM_MTCH_ACCNT;

  if(( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
  {
    fn_errlog( c_ServiceName, "S31075", SQLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  SETNULL(v_user_id);
  if(DEBUG_MSG_LVL_3)
  {
  fn_userlog(c_ServiceName,"BP ID IS  :%s:", v_user_id.arr);
  }
}

EXEC SQL  SELECT  USR_DT_ALLWD_FLG
          INTO    :sql_usr_dt_allwd_flg
          FROM    USR_USER_MASTER
          WHERE   USR_USR_ID  = :v_user_id;

if( SQLCODE != 0 )
{
  fn_errlog( c_ServiceName, "S31080", SQLMSG, c_err_msg  );
  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
}

if( sql_usr_dt_allwd_flg != 'Y' )
{
  MEMSET(v_user_id);
}
if(DEBUG_MSG_LVL_3)
{
	fn_userlog(c_ServiceName,"DT ALLOWED FLAG IS  :%c:", sql_usr_dt_allwd_flg);
	fn_userlog(c_ServiceName,"USER ID IS  :%s:", v_user_id.arr);
}


/*** Ver 1.4 ends ***/

	/* ver 1.3 */

	if( strcmp(st_usr_prfl.c_user_id ,"system")!=0 && st_usr_prfl.l_session_id != 0)			/***	Ver	1.6	***/
	{
    /*** Commented in Ver 2.8 ***
		EXEC SQL
      SELECT FCM_LOT_SZ
      INTO   :l_lot_size
      FROM   FCM_FO_CNTRCT_MSTR
      WHERE  FCM_PRDCT_TYP = 'F'
      AND    FCM_XCHNG_CD = :st_pstn_actn.c_xchng_cd
      AND    FCM_UNDRLYNG = :st_pstn_actn.c_undrlyng
      AND    FCM_EXPRY_DT = :st_pstn_actn.c_expry_dt;
    ***/

  /*** Ver 2.8 Starts ***/

    EXEC SQL
      SELECT FTQ_MIN_LOT_QTY,
						 NVL(FTQ_DLVRY_POS_ALLWD,'Y'),	/*** added in Ver 3.4 ***/
						 NVL(FTQ_SETLMNT_FLG,'C')				/*** added in Ver 3.4 ***/
      INTO   :l_lot_size,
						 :c_dlvry_pos_allwd,						/*** added in Ver 3.4 ***/
						 :c_setlmnt_flg									/*** added in Ver 3.4 ***/
      FROM   FTQ_FO_TRD_QT
      WHERE  FTQ_PRDCT_TYP = 'F'
      AND    FTQ_XCHNG_CD = :st_pstn_actn.c_xchng_cd
      AND    FTQ_UNDRLYNG = :st_pstn_actn.c_undrlyng
      AND    FTQ_EXPRY_DT = :st_pstn_actn.c_expry_dt;

  /*** Ver 2.8 Ends   ***/

		if ( SQLCODE != 0 )
  	{
    	fn_errlog( c_ServiceName, "S31085",SQLMSG,c_err_msg);
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    	strcpy ( c_err_msg, "System error. Contact system support" );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

		if(DEBUG_MSG_LVL_0)
		{
    	fn_userlog(c_ServiceName,"Trade Quote Lot Size :%ld:",l_lot_size);
			fn_userlog(c_ServiceName,"c_dlvry_pos_allwd :%c:",c_dlvry_pos_allwd);	/** Ver 3.4 **/
			fn_userlog(c_ServiceName,"c_setlmnt_flg :%c:",c_setlmnt_flg);					/** Ver 3.4 **/
		}

		/*** Ver 3.4 Starts ***/

		if( c_dlvry_pos_allwd == 'N' )
		{
			fn_userlog( c_ServiceName,"Currently Trading is not allowed in this contract");
			strcpy(c_err_msg,"Currently Trading is not allowed in this contract");
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		/*** Ver 3.4 Ends ***/

		if( st_pstn_actn.l_new_qty%l_lot_size != 0 )
		{
		 	fn_errlog( c_ServiceName, "B31030",DEFMSG, c_err_msg  );
     	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
		}
	}

	/* ver 1.3 */

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /* i_returncode = fn_lock_usr( c_ServiceName, st_pstn_actn.c_cln_mtch_accnt ); Ver 3.8 ***/
  i_returncode = fn_lock_fno( c_ServiceName, st_pstn_actn.c_cln_mtch_accnt ); 	/* Ver 3.8 ***/
  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/**Following structure variables are initialised as these are not expected from Front End ***/  

/* Ver.1.2 Changes for Part Conversion C.R.*/

  if( strcmp(st_usr_prfl.c_user_id ,"system")==0 && st_usr_prfl.l_session_id == 0)
  {
    fn_userlog(c_ServiceName,"Calling from batch");
    st_pstn_actn.l_actn_typ = CONV_TO_FUT;
    st_pstn_actn.l_new_qty = 0;
  }
  else
  {
    fn_userlog(c_ServiceName,"Calling from Fron End");
    st_pstn_actn.l_actn_typ = CONV_TO_PART_FUT;
  }

	fn_userlog(c_ServiceName,"The new quantity is :%ld:", st_pstn_actn.l_new_qty);	

//  st_pstn_actn.l_actn_typ = CONV_TO_FUT;

/* Ver.1.2 Changes for Part Conversion C.R. Ends */

  st_pstn_actn.c_trnsctn_flw = '*';
  st_pstn_actn.l_orgnl_qty = 0;
  st_pstn_actn.l_orgnl_rt  = 0;
//  st_pstn_actn.l_new_qty = 0;   /* ver 1.2 */
  st_pstn_actn.l_new_rt  = 0;
  st_pstn_actn.l_exec_qty  = 0;
  st_pstn_actn.l_exec_rt  = 0;
  st_pstn_actn.l_fresh_qty  = 0;
  st_pstn_actn.l_cover_qty  = 0;
  st_pstn_actn.d_add_mrgn_amt = 0;

	/**This is added to check whether call from Frontend is for Single conversion OR Joint Conversion **/

	st_pstn_actn.c_nkd_blkd_flg = c_spl_flag ; 

	/*** Ver 2.1 starts ***/
  EXEC SQL
   SELECT NVL(CLM_SPAN_ALLWD,'N')
   INTO   :c_span_flg
   FROM   CLM_CLNT_MSTR
   WHERE  CLM_MTCH_ACCNT = :st_pstn_actn.c_cln_mtch_accnt;

  if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
  {
    fn_userlog ( c_ServiceName, " Error while selecting SPAN flag ");
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog( c_ServiceName, "S31090", SQLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
   /*** Ver 2.1 Ends ***/

	if( strcmp(st_usr_prfl.c_user_id ,"system")!=0 )   /** Ver 1.9 **/
	{
		/******** Ver 1.7 Starts ********/

		if(DEBUG_MSG_LVL_3)
		{	
		fn_userlog(c_ServiceName,"Checking for available position");
		}
		
		EXEC SQL
			/*SELECT ABS(FFP_OPNPSTN_QTY)- DECODE(FFP_OPNPSTN_FLW,'B',ABS(FFP_ISELL_QTY),'S',FFP_IBUY_QTY) Commented In Ver 2.5*/
			SELECT ABS(FFP_OPNPSTN_QTY)- DECODE(FFP_OPNPSTN_FLW,'S',GREATEST(ABS(FFP_IBUY_QTY),ABS(FFP_EXBUY_QTY)),'B',GREATEST( ABS(FFP_ISELL_QTY), ABS(FFP_EXSELL_QTY)),0)	/***	Added In Ver 2.5	***/
			INTO :l_qty	
			FROM FFP_FO_FUTURES_PSTN
			WHERE FFP_CLM_MTCH_ACCNT =:st_pstn_actn.c_cln_mtch_accnt
			AND FFP_XCHNG_CD	=:st_pstn_actn.c_xchng_cd
			AND FFP_PRDCT_TYP =:st_pstn_actn.c_prd_typ
			AND FFP_INDSTK =	:st_pstn_actn.c_ctgry_indstk
			AND FFP_UNDRLYNG = :st_pstn_actn.c_undrlyng
			AND FFP_EXPRY_DT = :st_pstn_actn.c_expry_dt
			AND FFP_EXER_TYP = :st_pstn_actn.c_exrc_typ
			AND FFP_CNTRCT_TAG = :st_pstn_actn.c_cntrct_tag;
	
		if( SQLCODE !=0 )
		{
  		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  		fn_errlog( c_ServiceName, "S31095", SQLMSG, c_err_msg );
  		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
		}
 	
		/***	Ver 2.4 Commented 

		if(l_qty < st_pstn_actn.l_new_qty || l_qty == 0 || st_pstn_actn.l_new_qty == 0)

		****/

		if(l_qty == 0 || st_pstn_actn.l_new_qty == 0)			/***	Ver 2.4	***/
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			fn_userlog(c_ServiceName, "Invalid Quantity");
  		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,"Invalid Quantity",0); 
  		fn_errlog( c_ServiceName, "B24507", "", c_err_msg  );
  		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
		}

		if ( l_qty < st_pstn_actn.l_new_qty )	    /***  Ver 2.4  ***/
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
 			fn_userlog(c_ServiceName, "Quantity Entered Can Not Be Greater Than Open Position Quantity.");
		 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,"Quantity Entered Can Not Be Greater Than Open Position Quantity.",0);
 			fn_errlog( c_ServiceName, "B24507", "", c_err_msg  );
 			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
 			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		/****** Ver 1.7 Ends ***/
	}/*Ver 1.9 */
	
	if( DEBUG_MSG_LVL_3 ) 
	{
  	fn_userlog( c_ServiceName, "Pstn Actn Single/Joint Flag :%c:", st_pstn_actn.c_nkd_blkd_flg);
  	fn_userlog( c_ServiceName, "Pstn Actn Expiry date   		:%s:", st_pstn_actn.c_expry_dt );

 		fn_userlog(c_ServiceName , "Processing match a/c - [%s], Underlying - [%s], Expiry date - [%s], Tag - [%c] ",
        st_pstn_actn.c_cln_mtch_accnt,
        st_pstn_actn.c_undrlyng,
        st_pstn_actn.c_expry_dt,
        st_pstn_actn.c_cntrct_tag );
	}

  fn_cpy_ddr(st_pstn_actn.c_rout_crt);

  i_ip_len = sizeof ( struct vw_pstn_actn );
  i_op_len = sizeof ( struct vw_pstn_actn );

	if ( c_span_flg == 'N' )  /*** Condition Added in ver 2.1 ***/
  {
    if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog( c_ServiceName," Mahesh Before Call To SFO_UPD_FUT_POS");
    }
	
		i_returncode = fn_call_svc( c_ServiceName,
                              	c_err_msg,
                              	&st_pstn_actn,
                              	&st_pstn_actn,
                              	"vw_pstn_actn",
                              	"vw_pstn_actn",
                              	i_ip_len,
                              	i_op_len,
                              	0,
                              	"SFO_UPD_FUT_PLS" );

		if ( i_returncode != SUCC_BFR )
  	{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			fn_errlog( c_ServiceName, "S31100", LIBMSG, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
	}
	else if ( c_span_flg =='Y' || c_span_flg == 'Z')  /*** Condition Added in Ver 2.1 ***/
  {
    if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog( c_ServiceName," Mahesh Before Call To SFO_SPN_CNV_2FT");
    }

    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg,
                                &st_pstn_actn,
                                &st_pstn_actn,
                                "vw_pstn_actn",
                                "vw_pstn_actn",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_SPN_CNV_2FT" );

    if ( i_returncode != SUCC_BFR )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      fn_errlog( c_ServiceName, "S31105", LIBMSG, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  else
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
    fn_errlog( c_ServiceName, "S31110", LIBMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	EXEC SQL
	DECLARE cur_updbk cursor for
	SELECT FFF_CLM_MTCH_ACCNT,
				 FFF_XCHNG_CD,
				 FFF_PRDCT_TYP,
				 FFF_INDSTK,
				 FFF_UNDRLYNG,
				 FFF_EXPRY_DT,
				 FFF_EXER_TYP,
				 FFF_OPT_TYP,
				 FFF_STRK_PRC,
				 FFF_ORDR_FLW,
				 FFF_CLS_QTY,
				 FFF_CLS_RT
	FROM   FFF_FO_FUT_FPLSCNV
	WHERE  FFF_CLM_MTCH_ACCNT = :st_pstn_actn.c_cln_mtch_accnt
	AND    FFF_XCHNG_CD 			= :st_pstn_actn.c_xchng_cd 
	AND    FFF_PRDCT_TYP 			= :st_pstn_actn.c_prd_typ
	AND    FFF_INDSTK    			= :st_pstn_actn.c_ctgry_indstk
	AND    FFF_UNDRLYNG  			= :st_pstn_actn.c_undrlyng
	AND    FFF_EXER_TYP  			= :st_pstn_actn.c_exrc_typ
  AND    FFF_OPT_TYP   			= :st_pstn_actn.c_opt_typ
	AND    FFF_STRK_PRC  			= :st_pstn_actn.l_strike_prc
	AND    FFF_CNTRCT_TAG     = :st_pstn_actn.c_cntrct_tag
	AND    FFF_UPLD_FLG  			= 'N'
	ORDER BY FFF_EXPRY_DT ASC	; 

	EXEC SQL
	OPEN cur_updbk;
	if(SQLCODE != 0)
	{
		EXEC SQL CLOSE cur_updbk;
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		fn_errlog( c_ServiceName, "S31115", LIBMSG, c_err_msg );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

	}
	
	while(1)
	{	
		EXEC SQL
		FETCH cur_updbk
		INTO :st_orderbook.c_cln_mtch_accnt,
				 :st_orderbook.c_xchng_cd,
				 :st_orderbook.c_prd_typ,
				 :st_orderbook.c_ctgry_indstk,
				 :st_orderbook.c_undrlyng,
				 :st_orderbook.c_expry_dt,
				 :st_orderbook.c_exrc_typ,
				 :st_orderbook.c_opt_typ,
				 :st_orderbook.l_strike_prc,
				 :st_orderbook.c_ordr_flw,
				 :st_orderbook.l_ord_tot_qty,
				 :st_orderbook.l_ord_lmt_rt;

		if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND)
		{
			EXEC SQL CLOSE cur_updbk;
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			fn_errlog( c_ServiceName, "S31120", LIBMSG, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if ( SQLCODE == NO_DATA_FOUND )
    {
      break;
    }
		
		rtrim  (st_xchngbook.c_rqst_tm);

		for ( i_count = 0; i_count <= 1; i_count++)
		{ 
			if( i_count == 1)
			{
				st_orderbook.c_prd_typ = FUTURES;

				/************* Commented in Ver 2.3 **********
				if( st_orderbook.c_ordr_flw == BUY )
					  st_orderbook.c_ordr_flw = SELL;
				else
					  st_orderbook.c_ordr_flw = BUY;
				**********************************************/
			}
			
			/******** Added in Ver 2.3 **********/

			if( st_orderbook.c_ordr_flw == BUY )
          st_orderbook.c_ordr_flw = SELL;
      else
          st_orderbook.c_ordr_flw = BUY;

			/******** Ver 2.3 Ends *********/

			strcpy ( st_xchngbook.c_mod_trd_dt,(char *) c_trd_dt.arr);
			strcpy ( st_xchngbook.c_valid_dt, (char *)c_trd_dt.arr );
			strcpy ( st_xchngbook.c_ack_tm, (char *)c_trd_tm.arr);	
			strcpy ( st_xchngbook.c_rqst_tm, (char *)c_trd_tm.arr);	
			strcpy ( st_xchngbook.c_qt_tm, (char *)c_trd_tm.arr);	
			strcpy ( st_xchngbook.c_pipe_id, st_usr_prfl.c_pipe_id );

			i_ip_len = sizeof ( struct vw_sequence );
			i_op_len = sizeof ( struct vw_sequence );

			strcpy( st_s_sequence.c_pipe_id, st_xchngbook.c_pipe_id);
			strcpy( st_s_sequence.c_trd_dt, st_xchngbook.c_mod_trd_dt );
			st_s_sequence.c_rqst_typ = GET_XCHNG_SEQ;


			fn_cpy_ddr ( st_s_sequence.c_rout_crt );
      /**************** Commented in Ver 3.2 ********************
			i_returncode = fn_call_svc( c_ServiceName,
																	c_err_msg,
																	&st_s_sequence,
																	&st_r_sequence,
																	"vw_sequence",
																	"vw_sequence",
																	i_ip_len,
																	i_op_len,
																	0,
																	"SFO_GET_SEQ" );
      ***************** Comment End in Ver 3.2 *****************/
    i_returncode =fn_get_seq(c_ServiceName,c_err_msg,st_s_sequence.c_pipe_id,&l_seq_num,st_s_sequence.c_rqst_typ); /** Ver 3.2 **/
			if ( i_returncode != SUCC_BFR )
			{
				EXEC SQL CLOSE cur_updbk;
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog( c_ServiceName, "S31125", LIBMSG, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
      st_r_sequence.l_seq_num=l_seq_num;  /*** Ver 3.2 ***/
  		if(DEBUG_MSG_LVL_3)
  		{
				fn_userlog(c_ServiceName,"Seq num is *****:%ld:",l_seq_num);  /** Ver 3.2 **/
  		}

			l_xchng_seq_num = st_r_sequence.l_seq_num;

			strcpy( st_s_sequence.c_pipe_id, st_xchngbook.c_pipe_id);
			strcpy( st_s_sequence.c_trd_dt, st_xchngbook.c_mod_trd_dt );
			st_s_sequence.c_rqst_typ = GET_ORDER_SEQ;


			fn_cpy_ddr ( st_s_sequence.c_rout_crt );
      /*** Commented in Ver 3.2 ******************************
			i_returncode = fn_call_svc( c_ServiceName,
																	c_err_msg,
																	&st_s_sequence,
																	&st_r_sequence,
																	"vw_sequence",
																	"vw_sequence",
																	i_ip_len,
																	i_op_len,
																	0,
																	"SFO_GET_SEQ" );
      ********** Comment End in Ver 3.2 ************/
      i_returncode = fn_get_seq(c_ServiceName,c_err_msg,st_s_sequence.c_pipe_id,&l_seq_num,st_s_sequence.c_rqst_typ); /** Ver 3.2 **/
			if ( i_returncode != SUCC_BFR )
			{
				EXEC SQL CLOSE cur_updbk;
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog( c_ServiceName, "S31130", LIBMSG, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
      st_r_sequence.l_seq_num=l_seq_num;  /*** Ver 3.2 ******/
      if(DEBUG_MSG_LVL_3)
      {
      	fn_userlog(c_ServiceName,"l_order_seq **********:%ld:",l_seq_num);  /** Ver 3.2 **/
      }
			
			l_ord_seq_num = st_r_sequence.l_seq_num;

			sprintf( c_seq_num, "%08d", l_ord_seq_num );
			strcpy( st_xchngbook.c_ordr_rfrnc, (char *)c_trd_ref.arr );
			strcat( st_xchngbook.c_ordr_rfrnc, st_xchngbook.c_pipe_id );
			strcat( st_xchngbook.c_ordr_rfrnc, c_seq_num );
			strcpy( st_orderbook.c_ordr_rfrnc, st_xchngbook.c_ordr_rfrnc);

			strcpy( st_xchngbook.c_xchng_cd,st_orderbook.c_xchng_cd );

			st_xchngbook.l_ord_seq = l_xchng_seq_num;	
			
			st_xchngbook.c_slm_flg = LIMIT;

			st_xchngbook.c_rms_prcsd_flg = PROCESSED;

			st_xchngbook.l_dsclsd_qty = 0;
			st_xchngbook.l_ord_tot_qty = st_orderbook.l_ord_tot_qty;
			st_xchngbook.l_ord_lmt_rt = st_orderbook.l_ord_lmt_rt;
			st_xchngbook.l_stp_lss_tgr = 0;
			st_xchngbook.l_mdfctn_cntr = 1;

			st_xchngbook.c_ord_typ = GOOD_TILL_TODAY;
			st_xchngbook.c_sprd_ord_ind = '*';

			st_xchngbook.c_req_typ = NEW;
			st_xchngbook.l_quote = 0;
			
			st_xchngbook.c_plcd_stts = ACCEPT;

			strcpy(st_xchngbook.c_xchng_rmrks, "Converted from FuturePlus to Futures");
			st_xchngbook.d_jiffy = 0;
			st_xchngbook.l_dwnld_flg = NOT_DOWNLOAD;

			st_xchngbook.c_ex_ordr_typ = ORDINARY_ORDER;

			st_xchngbook.c_spl_flg = NORMAL_ORDER;
			
			i_ip_len = sizeof ( struct vw_xchngbook );
			i_op_len = sizeof ( struct vw_xchngbook );

			st_xchngbook.c_oprn_typ = UPDATION_ON_FUT_CONVERSION;

			fn_cpy_ddr ( st_xchngbook.c_rout_crt );
			i_returncode = fn_call_svc( c_ServiceName,
																	c_err_msg,
																	&st_xchngbook,
																	&st_xchngbook,
																	"vw_xchngbook",
																	"vw_xchngbook",
																	i_ip_len,
																	i_op_len,
																	0,
																	"SFO_UPD_XCHNGBK" );
			if ( i_returncode != SUCC_BFR )
			{
				EXEC SQL CLOSE cur_updbk;
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog( c_ServiceName, "S31135", LIBMSG, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		
			
			EXEC SQL
				SELECT  CLM_CLNT_CTGRY_ID
				INTO    :st_orderbook.l_clnt_ctgry
				FROM    CLM_CLNT_MSTR
				WHERE   CLM_MTCH_ACCNT = :st_orderbook.c_cln_mtch_accnt;

			if ( SQLCODE != 0 )
			{
				EXEC SQL CLOSE cur_updbk;
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog( c_ServiceName, "S31140", LIBMSG, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			EXEC SQL
				SELECT  CCG_PRO_CLI_IND
				INTO    :st_orderbook.c_pro_cli_ind
				FROM    CCG_CLNT_CTGRY
				WHERE   CCG_CLNT_CTGRY_ID = :st_orderbook.l_clnt_ctgry;

			if ( SQLCODE != 0 )
			{
				EXEC SQL CLOSE cur_updbk;
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog( c_ServiceName, "S31145", LIBMSG, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			strcpy( st_orderbook.c_pipe_id, st_xchngbook.c_pipe_id );
			st_orderbook.c_slm_flg = LIMIT;
			
			st_orderbook.l_dsclsd_qty = 0;
			st_orderbook.l_stp_lss_tgr = 0;
			st_orderbook.c_ord_typ = GOOD_TILL_TODAY;
			strcpy(st_orderbook.c_valid_dt, (char *) c_trd_dt.arr);
			strcpy( st_orderbook.c_trd_dt, (char *) c_trd_dt.arr);
			st_orderbook.c_ordr_stts = EXECUTED;

			st_orderbook.l_exctd_qty = st_orderbook.l_ord_tot_qty;
			st_orderbook.l_can_qty = 0;
			st_orderbook.l_exprd_qty = 0;
			st_orderbook.l_mdfctn_cntr = 1;
		
			EXEC SQL
				SELECT TO_CHAR(sysdate,'yymmdd')||LPAD(CORP_ACTN_SEQ.NEXTVAL,10,0)        
				INTO   :c_xchng_ack
				FROM   DUAL ;
				if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
				{
					EXEC SQL CLOSE cur_updbk;
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
					fn_errlog( c_ServiceName, "S31150", LIBMSG, c_err_msg );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}	
			
			strcpy( st_orderbook.c_xchng_ack ,c_xchng_ack );	
			st_orderbook.c_spl_flg = NORMAL_ORDER;
			strcpy ( st_orderbook.c_ack_tm, st_xchngbook.c_ack_tm);
			strcpy ( st_orderbook.c_prev_ack_tm, (char *)c_trd_tm.arr);
			st_orderbook.l_exctd_qty_day = st_orderbook.l_exctd_qty;
			strcpy( st_orderbook.c_bp_id, c_bp_id );
		
			strcpy( st_orderbook.c_user_id,st_usr_prfl.c_user_id); 
			strcpy( st_orderbook.c_ctcl_id,c_ctcl_id); 

			fn_userlog(c_ServiceName,"The channel is:%s:",st_orderbook.c_channel);
			fn_userlog(c_ServiceName,"st_orderbook.c_prev_ack_tm is:%s:",st_orderbook.c_prev_ack_tm);
			fn_userlog(c_ServiceName,"st_orderbook.c_ack_tm is:%s:",st_orderbook.c_ack_tm);
			fn_userlog(c_ServiceName,"st_xchngbook.c_ack_tm is:%s:",st_xchngbook.c_ack_tm);

			/* Update Orderbook */
			i_ip_len = sizeof ( struct vw_orderbook );
			i_op_len = sizeof ( struct vw_orderbook );

			st_orderbook.c_oprn_typ = UPDATE_FUT_CONVERSION;


/*** Ver 1.4 Additions **/

strcpy((char*)v_user_id_bkup.arr,st_orderbook.c_user_id);
SETLEN(v_user_id_bkup);
strcpy(st_orderbook.c_user_id,(char *)v_user_id.arr); 

if(DEBUG_MSG_LVL_3)
{
fn_userlog(c_ServiceName,"v_user_id_bkup is   :%s:",v_user_id_bkup.arr);
fn_userlog(c_ServiceName,"st_orderbook.c_user_id is   :%s:",st_orderbook.c_user_id);
fn_userlog(c_ServiceName,"CALLING SFO_UPD_ORDRBK");
}

/** Ver 1.4 add ends ***/

		  /** Ver 2.0 Starts  **/
      i_returncode  = fn_chk_dtallwd  ( c_ServiceName,
                                        &st_usr_prfl,
                                       	c_user_id,	
                                        &st_err_msg
                                      );


      if ( i_returncode != 0 )
      {
        fn_userlog(c_ServiceName,"Error While Selecting DL Set Up No. ");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName," st_orderbook.c_user_id :%s:",st_orderbook.c_user_id);
				fn_userlog(c_ServiceName," c_user_id :%s:",c_user_id);
      }

    /*** Ver 3.3 Starts ***/
        EXEC SQL
        SELECT  NVL(ICD_PAN_NO,'*')
        INTO    :v_pan_no
        FROM    ICD_INFO_CLIENT_DTLS,
                IAI_INFO_ACCOUNT_INFO
        WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
        AND     IAI_MATCH_ACCOUNT_NO  =	:st_orderbook.c_cln_mtch_accnt; 

			if ( SQLCODE != 0 )
   		{
		    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  		  fn_errlog( c_ServiceName, "S31155", LIBMSG, c_err_msg );
  		  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   		}

			SETNULL(v_pan_no);
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"v_pan_no is :%s:",v_pan_no.arr);
			}
      if (v_pan_no.len != 10)
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog( c_ServiceName, "B91176", DEFMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }	
		/*** Ver 3.3 Ends ***/
			i_returncode  = fn_ins_ordbook ( c_ServiceName,
                                      c_user_id,
                                     	&st_orderbook, 
                                      c_span_flg,         /*** Ver 2.1 ***/
																			v_pan_no.arr,				/*** Added In Ver 3.3 ***/
																			c_setlmnt_flg,			/*** Added in Ver 3.4 ***/
                                      &st_err_msg
                                    );

    	if ( i_returncode != 0 )
    	{
      	fn_errlog( c_ServiceName, "S31160", LIBMSG, c_err_msg  );
				fn_userlog(c_ServiceName,"Error while inserting into order book");
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}

      /** Ver 2.0 Ends **/
		
			/** Commented in Ver 2.0 ***

			fn_cpy_ddr ( st_orderbook.c_rout_crt );
			i_returncode = fn_call_svc( c_ServiceName,
																	c_err_msg,
																	&st_orderbook,
																	&st_orderbook,
																	"vw_orderbook",
																	"vw_orderbook",
																	i_ip_len,
																	i_op_len,
																	0,
                                "SFO_UPD_ORDRBK" );

			if ( i_returncode != SUCC_BFR )
			{
				EXEC SQL CLOSE cur_updbk;
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog( c_ServiceName, "S31165", LIBMSG, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    	}	

			******/

			strcpy ( st_s_sequence.c_pipe_id, st_orderbook.c_pipe_id );
			strcpy ( st_s_sequence.c_trd_dt,st_xchngbook.c_mod_trd_dt );
			fn_cpy_ddr(st_s_sequence.c_rout_crt);
			st_s_sequence.c_rqst_typ = GET_TRD_SEQ;
      /*********** Commented in Ver 3.2 ***********************
			i_returncode = fn_call_svc ( c_ServiceName,
															 c_err_msg,
															 &st_s_sequence,
															 &st_s_sequence,
															 "vw_sequence",
															 "vw_sequence",
															 sizeof ( st_s_sequence),
															 sizeof ( st_s_sequence),
															 0,
															 "SFO_GET_SEQ" );
      ************ Comment End in Ver 3.2 *******************/
      i_returncode = fn_get_seq(c_ServiceName,c_err_msg,st_s_sequence.c_pipe_id,&l_seq_num,st_s_sequence.c_rqst_typ); /** Ver 3.2 **/
			if ( i_returncode != SUCC_BFR )
			{
				EXEC SQL CLOSE cur_updbk;
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog( c_ServiceName, "S31170", LIBMSG, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  		}
      if(DEBUG_MSG_LVL_3)
      {
	      fn_userlog(c_ServiceName,"l_trade_seq ************:%ld:",l_seq_num);  /**** Ver 3.2 ***/
      }
      st_s_sequence.l_seq_num=l_seq_num;   /*** Ver 3.2 ***/

			fn_userlog(c_ServiceName,"st_tradebook.c_trd_rfrnc:%s",c_trd_rfrnc.arr);
			fn_userlog(c_ServiceName,"st_usr_prfl.c_pipe_id:%s",st_usr_prfl.c_pipe_id);
			fn_userlog(c_ServiceName,"st_s_sequence.l_seq_num:%ld",st_s_sequence.l_seq_num);
		
			sprintf ( st_tradebook.c_trd_rfrnc, "%s%s%08ld",
								( char * )c_trd_rfrnc.arr, st_usr_prfl.c_pipe_id, st_s_sequence.l_seq_num ); 
												/**Added c_trd_rfrnc to avoid duplicate trd_rfrnc in FTD **/
			strcpy ( st_tradebook.c_cln_mtch_accnt , st_orderbook.c_cln_mtch_accnt );
			strcpy ( st_tradebook.c_xchng_cd , st_orderbook.c_xchng_cd );
			st_tradebook.c_prd_typ = st_orderbook.c_prd_typ;
			strcpy ( st_tradebook.c_undrlyng , st_orderbook.c_undrlyng );
			strcpy ( st_tradebook.c_expry_dt , st_orderbook.c_expry_dt );
			st_tradebook.c_exrc_typ = st_orderbook.c_exrc_typ;
			st_tradebook.c_opt_typ = st_orderbook.c_opt_typ;
			st_tradebook.l_strike_prc = st_orderbook.l_strike_prc;
			st_tradebook.c_ctgry_indstk = st_orderbook.c_ctgry_indstk;
			strcpy ( st_tradebook.c_ordr_rfrnc , st_orderbook.c_ordr_rfrnc );
			strcpy ( st_tradebook.c_xchng_ack , st_orderbook.c_xchng_ack );
			st_tradebook.l_xchng_trd_no = st_s_sequence.l_seq_num;
			strcpy ( st_tradebook.c_trd_dt , st_xchngbook.c_ack_tm);
			st_tradebook.c_trd_flw = st_orderbook.c_ordr_flw;
			st_tradebook.l_exctd_qty = st_orderbook.l_exctd_qty;
			st_tradebook.l_exctd_rt = st_orderbook.l_ord_lmt_rt;
			st_tradebook.d_jiffy = 0;
			st_tradebook.l_dwnld_flg = NOT_DOWNLOAD;
			st_tradebook.l_ca_lvl	=	99;			/***	Ver	1.5	***/

			/*strcpy( st_tradebook.c_user_id,st_usr_prfl.c_user_id); */
			strcpy( st_tradebook.c_user_id,(char *)v_user_id.arr); /**1.4 **/
	
			/*** Ver 2.7 Starts ***/
				
			if( DEBUG_MSG_LVL_3 )
			{
		
    	  fn_userlog(c_ServiceName,"st_tradebook.l_exctd_qty :%ld:",st_tradebook.l_exctd_qty);
      	fn_userlog(c_ServiceName,"st_tradebook.l_exctd_rt :%ld:", st_tradebook.l_exctd_rt);
     	  fn_userlog(c_ServiceName,"st_orderbook.c_ordr_rfrnc :%s:",st_orderbook.c_ordr_rfrnc);
		  }	

      EXEC SQL
           UPDATE  fod_fo_ordr_dtls
           SET     fod_trd_val = NVL(fod_trd_val,0) + (:st_tradebook.l_exctd_qty * :st_tradebook.l_exctd_rt)
           WHERE   fod_ordr_rfrnc      = :st_orderbook.c_ordr_rfrnc;

      if ( SQLCODE != 0 )
      {
        EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog( c_ServiceName, "S31175", LIBMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      /*** Ver 2.7 Ends **/

			fn_cpy_ddr(st_tradebook.c_rout_crt);

			st_tradebook.c_oprn_typ = INSERT_TRADE_CONF;

			i_returncode = fn_call_svc ( c_ServiceName,
															c_err_msg,
															&st_tradebook,
															&st_tradebook,
															"vw_tradebook",
															"vw_tradebook",
															sizeof ( st_tradebook ),
															sizeof ( st_tradebook ),
															0,
															"SFO_UPD_TRDBK" );
			if ( i_returncode != SUCC_BFR ) 
			{
				EXEC SQL CLOSE cur_updbk;
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog( c_ServiceName, "S31180", LIBMSG, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			EXEC SQL
        UPDATE FTD_FO_TRD_DTLS
              SET FTD_UPLD_MTCH_FLG = 'Y',FTD_RMS_PRCSD_FLG = 'P',FTD_FUT_CONV_FLG = 'Y',
                  FTD_PRCS_TM = SYSDATE   /*** Ver 3.0 **/
        WHERE FTD_EBA_TRD_REF = :st_tradebook.c_trd_rfrnc
				AND   FTD_ORDR_RFRNC  = :st_tradebook.c_ordr_rfrnc;

			if ( SQLCODE != 0 )
			{
				EXEC SQL CLOSE cur_updbk;
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				fn_errlog ( c_ServiceName, "S31185", SQLMSG, c_err_msg );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

     }/***For loop ends here  **/

  }/***While loop ends here **/
	
   EXEC SQL
        UPDATE FFF_FO_FUT_FPLSCNV
              SET FFF_UPLD_FLG = 'Y'
        WHERE  FFF_CLM_MTCH_ACCNT = :st_pstn_actn.c_cln_mtch_accnt
        AND    FFF_XCHNG_CD       = :st_pstn_actn.c_xchng_cd
        AND    FFF_PRDCT_TYP      = :st_pstn_actn.c_prd_typ
        AND    FFF_INDSTK         = :st_pstn_actn.c_ctgry_indstk
        AND    FFF_UNDRLYNG       = :st_pstn_actn.c_undrlyng
        AND    FFF_EXER_TYP       = :st_pstn_actn.c_exrc_typ
        AND    FFF_OPT_TYP        = :st_pstn_actn.c_opt_typ
        AND    FFF_STRK_PRC       = :st_pstn_actn.l_strike_prc
        AND    FFF_CNTRCT_TAG     = :st_pstn_actn.c_cntrct_tag
        AND    FFF_UPLD_FLG       = 'N';

      if ( SQLCODE != 0 )
      {
        EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog ( c_ServiceName, "S31190", SQLMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }	

   /*** Ver 3.7 starts  ***/
	 fn_userlog(c_ServiceName,"Avg price calc Prdct typ :%c: st_pstn_actn.c_cntrct_tag=:%c:",st_pstn_actn.c_prd_typ,st_pstn_actn.c_cntrct_tag);

	 st_pstn_actn.c_prd_typ = 'F';

 	fn_userlog(c_ServiceName,"Avg price calc Prdct typ :%c: ",st_pstn_actn.c_prd_typ);
 
  if ( c_span_flg == 'N' )
   { 
		d_prtfl_avgprc =0.0;

  	EXEC SQL
        SELECT  FTQ_CNTRCT_TAG
        INTO    :st_pstn_actn.c_cntrct_tag
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD        = :st_pstn_actn.c_xchng_cd
        AND     FTQ_PRDCT_TYP       = :st_pstn_actn.c_prd_typ
        AND     FTQ_UNDRLYNG        = :st_pstn_actn.c_undrlyng
        AND     FTQ_EXPRY_DT        = to_date( :st_pstn_actn.c_expry_dt,'dd-mon-yyyy' )
        AND     FTQ_EXER_TYP        = :st_pstn_actn.c_exrc_typ;

      if ( SQLCODE != 0 )
      {
        EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog ( c_ServiceName, "S31195", SQLMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

    fn_userlog(c_ServiceName,"st_pstn_actn.c_cntrct_tag=:%c:",st_pstn_actn.c_cntrct_tag);

	  i_returncode =fn_avg_prc_cal(c_ServiceName,
                                   &st_pstn_actn,
                                   &d_prtfl_avgprc);
    if ( i_returncode != 0 )
    {
      fn_userlog(c_ServiceName,"Error in Average Price Calculation ..");
        EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog ( c_ServiceName, "S31200", LIBMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    fn_userlog(c_ServiceName," Average Price  :%lf:",d_prtfl_avgprc);

      EXEC SQL
        UPDATE   FFP_FO_FUTURES_PSTN
        SET   FFP_AVG_PRC = :d_prtfl_avgprc
        WHERE  FFP_CLM_MTCH_ACCNT  = :st_pstn_actn.c_cln_mtch_accnt
        AND    FFP_XCHNG_CD        = :st_pstn_actn.c_xchng_cd
        AND    FFP_PRDCT_TYP       = :st_pstn_actn.c_prd_typ
        AND    FFP_EXER_TYP        = :st_pstn_actn.c_exrc_typ
        AND    FFP_UNDRLYNG        = :st_pstn_actn.c_undrlyng
        AND    FFP_EXPRY_DT        = :st_pstn_actn.c_expry_dt
        AND    FFP_CNTRCT_TAG      = :st_pstn_actn.c_cntrct_tag;

   if ( SQLCODE != 0 )
    {
       EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog ( c_ServiceName, "S31205", SQLMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    }
    else if ( c_span_flg =='Y' || c_span_flg == 'Z')
    {
		d_prtfl_avgprc = 0.0;
		strcpy( st_pstnactn.c_cln_mtch_accnt , st_pstn_actn.c_cln_mtch_accnt);
		strcpy( st_pstnactn.c_xchng_cd ,st_pstn_actn.c_xchng_cd);
		st_pstnactn.c_prd_typ =st_pstn_actn.c_prd_typ;
		strcpy( st_pstnactn.c_undrlyng , st_pstn_actn.c_undrlyng );
 		strcpy( st_pstnactn.c_expry_dt , st_pstn_actn.c_expry_dt );
	  st_pstnactn.c_exrc_typ  = st_pstn_actn.c_exrc_typ;
  	st_pstnactn.c_opt_typ = st_pstn_actn.c_opt_typ;
  	st_pstnactn.l_strike_prc = st_pstn_actn.l_strike_prc;
  	st_pstnactn.c_ctgry_indstk = st_pstn_actn.c_ctgry_indstk;

    i_returncode =fn_spnavg_prc_cal(c_ServiceName,
                                   st_pstnactn,
                                   &d_prtfl_avgprc);
    if ( i_returncode != 0 )
    {
      fn_userlog(c_ServiceName,"Error in Average Price Calculation ..");
       EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog ( c_ServiceName, "S31210", LIBMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    fn_userlog(c_ServiceName," Average Price  :%lf:",d_prtfl_avgprc);

      EXEC SQL
        UPDATE  FCP_FO_SPN_CNTRCT_PSTN
        SET   FCP_AVG_PRC = :d_prtfl_avgprc
        WHERE  FCP_CLM_MTCH_ACCNT  = :st_pstnactn.c_cln_mtch_accnt
        AND    FCP_XCHNG_CD        = :st_pstnactn.c_xchng_cd
        AND    FCP_PRDCT_TYP       = :st_pstnactn.c_prd_typ
        AND    FCP_EXER_TYP        = :st_pstnactn.c_exrc_typ
        AND    FCP_UNDRLYNG        = :st_pstnactn.c_undrlyng
        AND    FCP_EXPRY_DT        = :st_pstnactn.c_expry_dt;

   if ( SQLCODE != 0 )
    {
       EXEC SQL CLOSE cur_updbk;
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        fn_errlog ( c_ServiceName, "S31215", SQLMSG, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    }

 /*** Ver 3.7  *****/
 
	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
		fn_errlog( c_ServiceName, "S31220", LIBMSG, c_err_msg );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /** Ver 3.9 Starts here */
  i_returncode = 0;

  i_returncode = fn_upd_mrgn_reporting( st_pstn_actn.c_cln_mtch_accnt,
                                        st_pstn_actn.c_xchng_cd,
                                        c_ServiceName,
                                        c_err_msg);
  if ( i_returncode != 0 )
  {
    fn_errlog ( c_ServiceName, "S31225", LIBMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  } 
  /** Ver 3.9 Ends Here **/

  tpreturn( TPSUCCESS, 0, (char *)NULL, 0 , 0 );
}

int fn_ins_ordbook ( char  *c_ServiceName,                   /***  Ver 2.0 ***/
                      char  *c_user_id,
                      struct vw_orderbook *ptr_st_ordbook,
                      char c_spn_flg,                       /*** Ver 2.1 ***/
											char *c_pan_no,												/*** Added In Ver 3.3 ***/
											char c_setlment_flag,                 /*** Added in Ver 3.4 ***/
                      struct vw_err_msg *ptr_st_err_msg
                    )
{
	char c_ucc_cd[13]; /***Ver 3.9 ***/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"User ID Inside Function Insert Order book IS :%s:",c_user_id);
    fn_userlog(c_ServiceName,"The SPAN flag IS :%c:",c_spn_flg);      /*** Ver 2.1 ***/
  }

  if( ptr_st_ordbook->c_channel[0] == ' ' || ptr_st_ordbook->c_channel[0]  == '\0' )
  {
    fn_userlog(c_ServiceName,"CHANNEL NOT PRESENT.");
    fn_userlog(c_ServiceName,"Channel Is :%s:",ptr_st_ordbook->c_channel);

    ptr_st_ordbook->c_channel[0] = '$';

    fn_userlog(c_ServiceName,"Channel Is :%s:",ptr_st_ordbook->c_channel);

  }
	/***Ver 3.9 starts ***/
	MEMSET(c_ucc_cd);

   EXEC SQL
     SELECT  NVL(NVL(RTRIM(CLM_CP_CD),RTRIM( CLM_CLNT_CD )),CLM_MTCH_ACCNT )
     INTO  :c_ucc_cd
     FROM  CLM_CLNT_MSTR
     WHERE CLM_MTCH_ACCNT =:ptr_st_ordbook->c_cln_mtch_accnt;

   if(SQLCODE !=0 && SQLCODE != NO_DATA_FOUND )
  {
    fn_userlog(c_ServiceName," Error while fetching UCC code for :%s:", ptr_st_ordbook->c_cln_mtch_accnt);
    fn_errlog( c_ServiceName, "S31230", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  rtrim(c_ucc_cd);
  if(DEBUG_MSG_LVL_3)
    fn_userlog(c_ServiceName," MAtch ID :%s: have ucc code :%s:", ptr_st_ordbook->c_cln_mtch_accnt, c_ucc_cd);

  /***Ver 3.9 ends here ***/

  EXEC SQL
    INSERT INTO FOD_FO_ORDR_DTLS
    (
      FOD_CLM_MTCH_ACCNT,
      FOD_CLNT_CTGRY,
      FOD_ORDR_RFRNC,
      FOD_PIPE_ID,
      FOD_XCHNG_CD,
      FOD_PRDCT_TYP,
      FOD_UNDRLYNG,
      FOD_EXPRY_DT,
			FOD_EXER_TYP,
      FOD_OPT_TYP,
      FOD_STRK_PRC,
      FOD_ORDR_FLW,
      FOD_LMT_MRKT_SL_FLG,
      FOD_DSCLSD_QTY,
      FOD_ORDR_TOT_QTY,
      FOD_LMT_RT,
      FOD_STP_LSS_TGR,
      FOD_ORDR_TYPE,
      FOD_ORDR_VALID_DT,
      FOD_TRD_DT,
      FOD_ORDR_STTS,
      FOD_SPRD_ORDR_REF,
      FOD_MDFCTN_CNTR,
      FOD_SETTLOR,
      FOD_SPL_FLAG,
      FOD_INDSTK,
      FOD_PRO_CLI_IND,
      FOD_CHANNEL,
      FOD_BP_ID,
      FOD_CTCL_ID,
      FOD_USR_ID,
      FOD_MRKT_TYP,
      FOD_CSE_ID,
      FOD_SPN_FLG,                           /*** Added in ver 2.1 ***/
			FOD_PAN_NO,                           /*** Added In Ver 3.3 ***/
			FOD_SETLMNT_FLG, 												/*** Added in Ver 3.4 ***/
			FOD_UCC_CD /**Added in Ver 3.9 **/
    )
    VALUES
    (
      :ptr_st_ordbook->c_cln_mtch_accnt,
      :ptr_st_ordbook->l_clnt_ctgry,
      :ptr_st_ordbook->c_ordr_rfrnc,
      :ptr_st_ordbook->c_pipe_id,
      :ptr_st_ordbook->c_xchng_cd,
      :ptr_st_ordbook->c_prd_typ,
      :ptr_st_ordbook->c_undrlyng,
      to_date( :ptr_st_ordbook->c_expry_dt, 'dd-mon-yyyy' ),
			:ptr_st_ordbook->c_exrc_typ,
      :ptr_st_ordbook->c_opt_typ,
      :ptr_st_ordbook->l_strike_prc,
      :ptr_st_ordbook->c_ordr_flw,
      :ptr_st_ordbook->c_slm_flg,
      :ptr_st_ordbook->l_dsclsd_qty,
      :ptr_st_ordbook->l_ord_tot_qty,
      :ptr_st_ordbook->l_ord_lmt_rt,
      :ptr_st_ordbook->l_stp_lss_tgr,
      :ptr_st_ordbook->c_ord_typ,
      to_date( :ptr_st_ordbook->c_valid_dt,'dd-mon-yyyy' ),
      to_date( :ptr_st_ordbook->c_trd_dt,'dd-mon-yyyy' ),
      :ptr_st_ordbook->c_ordr_stts,
      :ptr_st_ordbook->c_sprd_ord_rfrnc,
      :ptr_st_ordbook->l_mdfctn_cntr,
      :ptr_st_ordbook->c_settlor,
      :ptr_st_ordbook->c_spl_flg,
      :ptr_st_ordbook->c_ctgry_indstk,
      :ptr_st_ordbook->c_pro_cli_ind,
      :ptr_st_ordbook->c_channel,
      :ptr_st_ordbook->c_bp_id,
      :ptr_st_ordbook->c_ctcl_id,
      :c_user_id,
      :ptr_st_ordbook->c_mrkt_typ,
      :ptr_st_ordbook->l_cse_id,
      DECODE(:c_spn_flg,'N',null,'S'),             /*** Added in ver 2.1 ***/
			:c_pan_no,																	 /*** Added In Ver 3.3 ***/
			:c_setlment_flag,														 /*** Added in Ver 3.4 ***/
			:c_ucc_cd /***Added in Ver 3.9 ***/
    );

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31235", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }
	
		return 0;
}
