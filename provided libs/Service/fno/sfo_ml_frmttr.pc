/******************************************************************************/
/*	Program	    			:	SFO_ML_FRMTTR                      	                  */
/*                                                                            */
/*  Input             : vw_tradebook/vw_xchngbook/vw_asgnmt/vw_exrcbook				*/
/*                                                        	                  */
/*  Output            : success or                                            */
/*                      failure                                               */
/*                                                                            */
/*  Description       : To receive the details of trades/orders from master   */
/*                      writing back services on order acceptance or trades   */
/*                                                                            */
/*  Log               : 1.0   02-Jan-2002   |Infotech|Sangeet                 */
/*  Log               : 1.1   09-July-2002  |Infotech|Sangeet  for tuning     */
/*										:	1.2		19-Dec-2007		|Infotech|Sushil	 IBM Migration	*/
/*                                                                            */
/******************************************************************************/
/*  1.0  -  New release                                                       */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <sqlca.h>
#include <fml32.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>             /*  Ver 1.2 : Added */
#include <fn_read_debug_lvl.h>  /*  Ver 1.2 : Added */
int Z ; 
#define INIT(X,Y) for(Z = 0;Z<Y;Z++)X[Z] = 0

void SFO_ML_FRMTTR( TPSVCINFO *rqst )
{
	char c_ServiceName[ 33];
	char c_errmsg[256];
	char c_err_msg[256];
	char type[64];
	char subtype[64];
	char c_xchng_cd[4];
	char c_ordr_rfrnc[20];
	char c_cln_mtch_accnt[11];
	char c_usr_fname[30];
	char c_ml_id[30];
	char c_ml_flg;
	long int  li_returncode;
	int  i_returncode;
	int i_sem_entty=0;
	int i_trnsctn=0;
	int i_seq_no=0;
	long li_recvbuf = 0;
	long l_xchng_trd_no = 0;
	long l_mdfctn_cntr = 0;
	

	EXEC SQL BEGIN DECLARE SECTION;
		struct vw_tradebook *ptr_st_tradebook;
		struct vw_xchngbook *ptr_st_xchngbook;
		struct vw_exrcbook *ptr_st_exrcbook;
		struct vw_asgnmt *ptr_st_asgnmt;
		struct vw_err_msg *ptr_st_err_msg;
 	EXEC SQL END DECLARE SECTION;
		INIT(c_xchng_cd,4);
		INIT(c_ordr_rfrnc,20);
		INIT(c_cln_mtch_accnt,11);

	/****************************************************/	
	/***Check for the subtype of input*******************/	
	/****************************************************/	
	li_returncode = tptypes( rqst->data, type, subtype );
	if ( li_returncode == -1 )
	{
		fn_userlog(c_ServiceName, "Error in Calling tptypes");
		fn_errlog ( c_ServiceName, "S31005", TPMSG, c_errmsg );
		tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
	}
	
	strcpy( c_ServiceName, rqst->name );
  INITDBGLVL(c_ServiceName);            /*  Ver 1.2 : Added   */
	ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
	if ( ptr_st_err_msg ==  NULL )
	{
		fn_errlog ( c_ServiceName, "S31010", TPMSG, c_errmsg );
		tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
	}
	memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );
	fn_userlog(c_ServiceName,"1111");
	/***************************************************************/	
	/***Allocating the Input structures*****************************/	
	/***************************************************************/	
	ptr_st_tradebook = ( struct vw_tradebook *  ) tpalloc ( "VIEW32",
                                                     "vw_tradebook",
                                                sizeof ( struct vw_tradebook ) );
	if ( ptr_st_tradebook ==  NULL )
	{
    fn_errlog ( c_ServiceName, "S31015", TPMSG, ptr_st_err_msg->c_err_msg);
		tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
	}
	memset ( ptr_st_tradebook , 0, sizeof( struct vw_tradebook ) );
	/*****************************************************************/
	ptr_st_xchngbook = ( struct vw_xchngbook *  ) tpalloc ( "VIEW32",
                                                     "vw_xchngbook",
                                                sizeof ( struct vw_xchngbook ) );
	if ( ptr_st_xchngbook ==  NULL )
	{
    fn_errlog ( c_ServiceName, "S31020", TPMSG, ptr_st_err_msg->c_err_msg);
		tpreturn ( TPFAIL, ERR_BFR, NULL, 0, 0 );
	}
	memset ( ptr_st_xchngbook , 0, sizeof( struct vw_xchngbook ) );
	/*****************************************************************/
	ptr_st_exrcbook = ( struct vw_exrcbook *  ) tpalloc ( "VIEW32",
                                                     "vw_exrcbook",
                                                sizeof ( struct vw_exrcbook ) );
	if ( ptr_st_exrcbook ==  NULL )
	{
    fn_errlog ( c_ServiceName, "S31025", TPMSG, ptr_st_err_msg->c_err_msg);
		tpreturn ( TPFAIL, ERR_BFR, NULL, 0, 0 );
	}
	memset ( ptr_st_exrcbook , 0, sizeof( struct vw_exrcbook ) );
	/*****************************************************************/
	ptr_st_asgnmt = ( struct vw_asgnmt *  ) tpalloc ( "VIEW32",
                                                     "vw_asgnmt",
                                                sizeof ( struct vw_asgnmt ) );
	if ( ptr_st_asgnmt ==  NULL )
	{
    fn_errlog ( c_ServiceName, "S31030", TPMSG, ptr_st_err_msg->c_err_msg);
		tpreturn ( TPFAIL, ERR_BFR, NULL, 0, 0 );
	}
	memset ( ptr_st_asgnmt , 0, sizeof( struct vw_asgnmt ) );
	/*****************************************************************/
	/*****************************************************************/

	if ( strcmp( subtype, "vw_xchngbook" ) == 0 )
	{
		fn_userlog(c_ServiceName,"INSIDE vw_xchngbook");
		ptr_st_xchngbook = ( struct vw_xchngbook * )rqst->data;
	
		strcpy(c_xchng_cd,ptr_st_xchngbook->c_xchng_cd );
		strcpy(c_ordr_rfrnc,ptr_st_xchngbook->c_ordr_rfrnc );
		l_mdfctn_cntr = ptr_st_xchngbook->l_mdfctn_cntr;
		c_ml_flg = 'O';

/*************
		EXEC SQL
 		select UAC_CLM_MTCH_ACCNT 
		INTO	:c_cln_mtch_accnt
		FROM FOD_FO_ORDR_DTLS a,
 		UAC_USR_ACCNTS b
 		WHERE 
 		FOD_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT AND
 		FOD_ORDR_RFRNC = :c_ordr_rfrnc ;
************/
		EXEC SQL
 		select FOD_CLM_MTCH_ACCNT 
		INTO	:c_cln_mtch_accnt
		FROM FOD_FO_ORDR_DTLS 
 		WHERE 
 		FOD_ORDR_RFRNC = :c_ordr_rfrnc ;

		if(SQLCODE != 0)
		{
			fn_userlog(c_ServiceName,"3333");
			strcpy( ptr_st_err_msg->c_err_msg, "Failed in sequence select" );
    	fn_errlog ( c_ServiceName, "S31035", SQLMSG, ptr_st_err_msg->c_err_msg);
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
		}

		EXEC SQL
 		select USR_FRST_NM,USR_EMAIL_ADDRSS 
		INTO	:c_usr_fname,
					:c_ml_id
		FROM USR_USER_MASTER a,
 		UAC_USR_ACCNTS b
 		WHERE 
 		UAC_USR_ID = USR_USR_ID AND
		UAC_CLM_MTCH_ACCNT = :c_cln_mtch_accnt ;

		if(SQLCODE != 0)
		{
			fn_userlog(c_ServiceName,"4444");
			strcpy( ptr_st_err_msg->c_err_msg, "Failed in sequence select" );
    	fn_errlog ( c_ServiceName, "S31040", SQLMSG, ptr_st_err_msg->c_err_msg);
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
		}
  	/*** Added for Order Routing ***/
  	fn_init_ddr_val ( ptr_st_xchngbook->c_rout_crt );
	}
	else if( strcmp(subtype ,"vw_tradebook") == 0 )
	{
		fn_userlog(c_ServiceName,"INSIDE vw_tradebook");
		ptr_st_tradebook = ( struct vw_tradebook * )rqst->data;

		strcpy(c_xchng_cd,ptr_st_tradebook->c_xchng_cd );
		strcpy(c_ordr_rfrnc,ptr_st_tradebook->c_ordr_rfrnc );
		strcpy(c_cln_mtch_accnt,ptr_st_tradebook->c_cln_mtch_accnt);
		l_xchng_trd_no = ptr_st_tradebook->l_xchng_trd_no;
		c_ml_flg = ptr_st_tradebook->c_oprn_typ ;

		EXEC SQL
 		select USR_FRST_NM,USR_EMAIL_ADDRSS 
		INTO	:c_usr_fname,
					:c_ml_id
		FROM USR_USER_MASTER a,
 		UAC_USR_ACCNTS b
 		WHERE 
 		UAC_USR_ID = USR_USR_ID AND
		UAC_CLM_MTCH_ACCNT = :c_cln_mtch_accnt ;

		if(SQLCODE != 0)
		{
			fn_userlog(c_ServiceName,"3333");
			strcpy( ptr_st_err_msg->c_err_msg, "Failed in sequence select" );
    	fn_errlog ( c_ServiceName, "S31045", SQLMSG, ptr_st_err_msg->c_err_msg);
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
		}
  	/*** Added for Order Routing ***/
  	fn_init_ddr_val ( ptr_st_tradebook->c_rout_crt );
		fn_userlog(c_ServiceName,"THE MAIL FLAG IS %c",ptr_st_tradebook->c_oprn_typ);
  }
	else if(strcmp(subtype ,"vw_asgnmt") == 0 )
	{
		fn_userlog(c_ServiceName,"INSIDE vw_asgnmt");
		ptr_st_asgnmt = ( struct vw_asgnmt * )rqst->data;
		strcpy(c_xchng_cd,ptr_st_asgnmt->c_xchng_cd );
		strcpy(c_ordr_rfrnc,ptr_st_asgnmt->c_asgn_rfrnc );
		strcpy(c_cln_mtch_accnt,ptr_st_asgnmt->c_cln_mtch_accnt);
		c_ml_flg = 'A' ;

		
		EXEC SQL
 		select USR_FRST_NM,USR_EMAIL_ADDRSS 
		INTO	:c_usr_fname,
					:c_ml_id
		FROM USR_USER_MASTER a,
 		UAC_USR_ACCNTS b
 		WHERE 
 		UAC_USR_ID = USR_USR_ID AND
		UAC_CLM_MTCH_ACCNT = :c_cln_mtch_accnt ;

		if(SQLCODE != 0)
		{
			fn_userlog(c_ServiceName,"3333");
			strcpy( ptr_st_err_msg->c_err_msg, "Failed in sequence select" );
    	fn_errlog ( c_ServiceName, "S31050", SQLMSG, ptr_st_err_msg->c_err_msg);
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
		}
  	/*** Added for Order Routing ***/
  	fn_init_ddr_val ( ptr_st_asgnmt->c_rout_crt );
		fn_userlog(c_ServiceName,"THE MAIL FLAG IS %c",ptr_st_tradebook->c_oprn_typ);
	}
	else if( strcmp(subtype ,"vw_exrcbook") == 0 )
	{
		fn_userlog(c_ServiceName,"INSIDE vw_exrcbook");
		ptr_st_exrcbook = ( struct vw_exrcbook * )rqst->data;

		strcpy(c_xchng_cd,ptr_st_exrcbook->c_xchng_cd );
		strcpy(c_ordr_rfrnc,ptr_st_exrcbook->c_exrc_ordr_rfrnc );
		strcpy(c_cln_mtch_accnt,ptr_st_exrcbook->c_cln_mtch_accnt);
		c_ml_flg = 'E' ;

		EXEC SQL
 		select USR_FRST_NM,USR_EMAIL_ADDRSS 
		INTO	:c_usr_fname,
					:c_ml_id
		FROM USR_USER_MASTER a,
 		UAC_USR_ACCNTS b
 		WHERE 
 		UAC_USR_ID = USR_USR_ID AND
		UAC_CLM_MTCH_ACCNT = :c_cln_mtch_accnt ;

		if(SQLCODE != 0)
		{
			fn_userlog(c_ServiceName,"3333");
			strcpy( ptr_st_err_msg->c_err_msg, "Failed in sequence select" );
    	fn_errlog ( c_ServiceName, "S31055", SQLMSG, ptr_st_err_msg->c_err_msg);
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
		}
  /*** Added for Order Routing ***/
  	fn_init_ddr_val ( ptr_st_tradebook->c_rout_crt );
	}
	else 
	{
    	fn_errlog ( c_ServiceName, "S31060", "Invalid Request Type", ptr_st_err_msg->c_err_msg);
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}
	/*********************/
	/*check for sequence**/
	/*********************/
	EXEC SQL
	SELECT	mail_seq.nextval
	into	:i_seq_no
	from	dual ;
	
	if(SQLCODE != 0) 
	{
		  fn_userlog(c_ServiceName,"111111");
			strcpy( ptr_st_err_msg->c_err_msg, "Failed in sequence select" );
    	fn_errlog ( c_ServiceName, "S31065", SQLMSG, ptr_st_err_msg->c_err_msg);
    	tpreturn ( TPFAIL, 0, ( char * )ptr_st_err_msg, 0, 0 );
	}
	/*******************************/
	/*****Begin the transaction*****/
	/*******************************/
	fn_userlog(c_ServiceName,"Before BEGINTRAN");
	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
	if ( i_trnsctn == -1 )
	{
	fn_userlog(c_ServiceName,"2222");
		strcpy ( ptr_st_err_msg->c_err_msg, c_err_msg );
    fn_errlog ( c_ServiceName, "S31070", LIBMSG, ptr_st_err_msg->c_err_msg);
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}



	EXEC SQL
	INSERT INTO
	FOM_MAIL_DTLS
	(	FOM_XCHNG_CD ,
	 	FOM_ORDR_RFRNC,
 		FOM_TRD_XCHNG_RFRNC,
 		FOM_CLM_MTCH_ACCNT,
 		FOM_MOD_CNTR,
 		FOM_SEQ,
		FOM_ML_FLG,
		FOM_USR_FNAME,
		FOM_ML_ID)
	VALUES
		(:c_xchng_cd,
 		 :c_ordr_rfrnc,
 		 :l_xchng_trd_no,
 		 :c_cln_mtch_accnt,
 		 :l_mdfctn_cntr,
 		 :i_seq_no,
		 :c_ml_flg,
		 :c_usr_fname,
		 :c_ml_id
 		 ) ;
	
	if(SQLCODE != 0)
	{
	fn_userlog(c_ServiceName,"3333");
			strcpy( ptr_st_err_msg->c_err_msg, "Failed in sequence select" );
    	fn_errlog ( c_ServiceName, "S31075", SQLMSG, ptr_st_err_msg->c_err_msg);
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}
															/*Note: Mail_seq is a sequence for mail*/

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
	fn_userlog(c_ServiceName,"4444");
    strcpy ( ptr_st_err_msg->c_err_msg, c_err_msg );
    fn_errlog ( c_ServiceName, "S31080", LIBMSG, ptr_st_err_msg->c_err_msg);
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

	fn_userlog(c_ServiceName,"END");
	tpfree ( ( char * ) ptr_st_err_msg );
  tpreturn ( TPSUCCESS, SUCC_BFR, (char *)NULL, 0L, 0 );
}
