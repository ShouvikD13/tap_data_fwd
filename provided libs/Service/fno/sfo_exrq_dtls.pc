/******************************************************************************/
/*	Program	    			:	SFO_EXRQ_DTLS                                         */
/*                                                                            */
/*  Input             : vw_exrcbook                                           */
/*                                                                            */
/*                                                                            */
/*  Output            : vw_exrcbook                                           */
/*                      vw_err_msg                                            */
/*                                                                            */
/*  Description       : To get the details from the Exercise Book for the     */
/*                      given exercise Reference no.  If there is no record   */
/*                      in the Main exercise Book, fetch the details from     */
/*                      the Exercise Book History                             */
/*                                                                            */
/*  Log               : 1.0   08-Oct-2001   Vinod Banjan                      */
/*										:	1.1		22-Sep-2006		Abhishek | Infotech 							*/
/*                    :	1.2		20-Dec-2007   Ranjit                         		*/
/*  Log               : 1.3   31-Oct-2008   Shailesh | Infotech               */
/*  Log               : 1.4   14-Nov-2008   Shailesh | Infotech               */
/*  Log               : 1.5   01-Jul-2008   Indrajit | Infotech               */
/******************************************************************************/
/*   1.0  -  New release                                                      */
/*	 1.1  -  Changes done for UCC Code and CP Code in Match 									*/
/* 						account and Settlor1 Field respectively 												*/
/*   1.3  -  Changes for CRARE22929-to handle Distri xactn lock error         */
/*   1.4  -  Changes for CRCSN23370-to increase the cp code length            */
/*   1.5  -  Added NOWAIT to handle distributed lock error for ors2 and       */
/*       		 seperated the else if conditions for FOR UPDATE and FOR SNDCLNT  */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>     /* ver 1.2 */
#include <fn_read_debug_lvl.h>	/* ver 1.2 */

void SFO_EXRQ_DTLS( TPSVCINFO *rqst )
{
  char c_ServiceName[ 33];
  char c_errmsg[256];

  EXEC SQL BEGIN DECLARE SECTION;
    struct vw_exrcbook *ptr_st_exrcbook;
    varchar c_expiry_dt [ LEN_DATE ];
    varchar c_trade_dt [ LEN_DATE ];
		varchar c_ucc_cd [11];				/**  Ver 1.1		**/

/**The cp code field length is changed from 10 to 12 in Ver 1.4**/

/** varchar c_cp_code [11];        **  Ver 1.1    **/
    varchar c_cp_code [11 + 2];   /**  Ver 1.4    **/

		short	i_settlor ;
		short	i_xchng_ack ;
		short  i_ack_tm;
  EXEC SQL END DECLARE SECTION;

  struct vw_err_msg *ptr_st_err_msg;

  ptr_st_exrcbook = ( struct vw_exrcbook *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);		/* ver 1.2 */

  ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
  if ( ptr_st_err_msg ==  NULL )
  {
    fn_errlog ( c_ServiceName, "S31005", TPMSG, c_errmsg );
    tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
  }

  memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog ( c_ServiceName,"Exercise Ref. No:%s:", ptr_st_exrcbook->c_exrc_ordr_rfrnc );
	}

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_exrcbook->c_rout_crt );

	if ( ptr_st_exrcbook->c_oprn_typ == FOR_VIEW )
	{
	  EXEC SQL
			SELECT 	feb_clm_mtch_accnt,
							feb_clnt_ctgry,
							feb_pipe_id,
							feb_xchng_cd,
							feb_prdct_typ,
							feb_indstk,
							feb_undrlyng,
	            to_char ( feb_expry_dt, 'dd-Mon-yyyy' ),
							feb_exer_typ,
							feb_opt_typ,
							feb_strk_prc,
							feb_exrc_rqst_typ,
							feb_exrc_qty,
							feb_exrc_stts,
	            to_char ( feb_trd_dt, 'dd-Mon-yyyy' ),
							feb_mdfctn_cntr,
							feb_settlor,
							feb_ack_nmbr,
							to_char ( feb_exer_ack_tm, 'dd-Mon-yyyy hh24:mi:ss' ),
							feb_pro_cli_ind
	    INTO    :ptr_st_exrcbook->c_cln_mtch_accnt,
	            :ptr_st_exrcbook->l_clnt_ctgry,
	            :ptr_st_exrcbook->c_pipe_id,
	            :ptr_st_exrcbook->c_xchng_cd,
	            :ptr_st_exrcbook->c_prd_typ,
	            :ptr_st_exrcbook->c_ctgry_indstk,
	            :ptr_st_exrcbook->c_undrlyng,
	            /*:c_expiry_dt,*/
	            :ptr_st_exrcbook->c_expry_dt,
	            :ptr_st_exrcbook->c_exrc_typ,
	            :ptr_st_exrcbook->c_opt_typ,
	            :ptr_st_exrcbook->l_strike_prc,
	            :ptr_st_exrcbook->c_exrc_rqst_typ,
	            :ptr_st_exrcbook->l_exrc_qty,
	            :ptr_st_exrcbook->c_exrc_stts,
	            :c_trade_dt,
	            :ptr_st_exrcbook->l_mdfctn_cntr,
	            :ptr_st_exrcbook->c_settlor:i_settlor,
	            :ptr_st_exrcbook->c_xchng_ack:i_xchng_ack,
	            :ptr_st_exrcbook->c_ack_tm,
	            :ptr_st_exrcbook->c_pro_cli_ind
	    FROM    feb_fo_exrc_rqst_book
	    WHERE   feb_exrc_rfrnc_no = :ptr_st_exrcbook->c_exrc_ordr_rfrnc;
	}
	else if ( ptr_st_exrcbook->c_oprn_typ == FOR_UPDATE ) /* Ver 1.5 Start */
	{
	  EXEC SQL
			SELECT 	feb_clm_mtch_accnt,
							feb_clnt_ctgry,
							feb_pipe_id,
							feb_xchng_cd,
							feb_prdct_typ,
							feb_indstk,
							feb_undrlyng,
	            to_char ( feb_expry_dt, 'dd-Mon-yyyy' ),
							feb_exer_typ,
							feb_opt_typ,
							feb_strk_prc,
							feb_exrc_rqst_typ,
							feb_exrc_qty,
							feb_exrc_stts,
	            to_char ( feb_trd_dt, 'dd-Mon-yyyy' ),
							feb_mdfctn_cntr,
							feb_settlor,
							feb_ack_nmbr,
							to_char ( feb_exer_ack_tm, 'dd-Mon-yyyy hh24:mi:ss' ),
							feb_pro_cli_ind
	    INTO    :ptr_st_exrcbook->c_cln_mtch_accnt,
	            :ptr_st_exrcbook->l_clnt_ctgry,
	            :ptr_st_exrcbook->c_pipe_id,
	            :ptr_st_exrcbook->c_xchng_cd,
	            :ptr_st_exrcbook->c_prd_typ,
	            :ptr_st_exrcbook->c_ctgry_indstk,
	            :ptr_st_exrcbook->c_undrlyng,
	            :ptr_st_exrcbook->c_expry_dt,
	            :ptr_st_exrcbook->c_exrc_typ,
	            :ptr_st_exrcbook->c_opt_typ,
	            :ptr_st_exrcbook->l_strike_prc,
	            :ptr_st_exrcbook->c_exrc_rqst_typ,
	            :ptr_st_exrcbook->l_exrc_qty,
	            :ptr_st_exrcbook->c_exrc_stts,
	            :c_trade_dt,
	            :ptr_st_exrcbook->l_mdfctn_cntr,
	            :ptr_st_exrcbook->c_settlor:i_settlor,
	            :ptr_st_exrcbook->c_xchng_ack:i_xchng_ack,
	            :ptr_st_exrcbook->c_ack_tm:i_ack_tm,
	            :ptr_st_exrcbook->c_pro_cli_ind
	    FROM    feb_fo_exrc_rqst_book
	    WHERE   feb_exrc_rfrnc_no = :ptr_st_exrcbook->c_exrc_ordr_rfrnc
			FOR	UPDATE OF feb_exrc_rfrnc_no; 
	}
	else if ( ptr_st_exrcbook->c_oprn_typ == FOR_SNDCLNT )
	{
	  EXEC SQL
			SELECT 	feb_clm_mtch_accnt,
							feb_clnt_ctgry,
							feb_pipe_id,
							feb_xchng_cd,
							feb_prdct_typ,
							feb_indstk,
							feb_undrlyng,
	            to_char ( feb_expry_dt, 'dd-Mon-yyyy' ),
							feb_exer_typ,
							feb_opt_typ,
							feb_strk_prc,
							feb_exrc_rqst_typ,
							feb_exrc_qty,
							feb_exrc_stts,
	            to_char ( feb_trd_dt, 'dd-Mon-yyyy' ),
							feb_mdfctn_cntr,
							feb_settlor,
							feb_ack_nmbr,
							to_char ( feb_exer_ack_tm, 'dd-Mon-yyyy hh24:mi:ss' ),
							feb_pro_cli_ind
	    INTO    :ptr_st_exrcbook->c_cln_mtch_accnt,
	            :ptr_st_exrcbook->l_clnt_ctgry,
	            :ptr_st_exrcbook->c_pipe_id,
	            :ptr_st_exrcbook->c_xchng_cd,
	            :ptr_st_exrcbook->c_prd_typ,
	            :ptr_st_exrcbook->c_ctgry_indstk,
	            :ptr_st_exrcbook->c_undrlyng,
	            :ptr_st_exrcbook->c_expry_dt,
	            :ptr_st_exrcbook->c_exrc_typ,
	            :ptr_st_exrcbook->c_opt_typ,
	            :ptr_st_exrcbook->l_strike_prc,
	            :ptr_st_exrcbook->c_exrc_rqst_typ,
	            :ptr_st_exrcbook->l_exrc_qty,
	            :ptr_st_exrcbook->c_exrc_stts,
	            :c_trade_dt,
	            :ptr_st_exrcbook->l_mdfctn_cntr,
	            :ptr_st_exrcbook->c_settlor:i_settlor,
	            :ptr_st_exrcbook->c_xchng_ack:i_xchng_ack,
	            :ptr_st_exrcbook->c_ack_tm:i_ack_tm,
	            :ptr_st_exrcbook->c_pro_cli_ind
	    FROM    feb_fo_exrc_rqst_book
	    WHERE   feb_exrc_rfrnc_no = :ptr_st_exrcbook->c_exrc_ordr_rfrnc
			FOR	UPDATE OF feb_exrc_rfrnc_no NOWAIT; 
	} /* Ver 1.5 end */
	else
	{
  	fn_userlog ( c_ServiceName,"Invalid Operation Type:%c:", 
                                         ptr_st_exrcbook->c_oprn_typ );
		sprintf( ptr_st_err_msg->c_err_msg, "Invalid Operation Type:%c:",
                                         ptr_st_exrcbook->c_oprn_typ );
    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}

  if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
  {
    if( (ptr_st_exrcbook->c_oprn_typ == FOR_SNDCLNT) && (SQLCODE == -54))    /**Ver 1.3 **/ /* ver 1.5 Added new Sqlcode */
    {
      fn_userlog(c_ServiceName,"In DISTRIBUTION_LOCK_ERR ");
      strcpy( ptr_st_err_msg->c_err_msg,"DISTRIBUTION_LOCK_ERR");
    }
    else
    {
    	fn_errlog ( c_ServiceName, "S31010", SQLMSG, ptr_st_err_msg->c_err_msg );
    }

    tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  }

  if ( ( SQLCODE == NO_DATA_FOUND ) &&
			( ptr_st_exrcbook->c_oprn_typ == FOR_VIEW ) )
  {

  	EXEC SQL
			SELECT 	feb_clm_mtch_accnt,
							feb_clnt_ctgry,
							feb_pipe_id,
							feb_xchng_cd,
							feb_prdct_typ,
							feb_indstk,
							feb_undrlyng,
            	to_char ( feb_expry_dt, 'dd-Mon-yyyy' ),
							feb_exer_typ,
							feb_opt_typ,
							feb_strk_prc,
							feb_exrc_rqst_typ,
							feb_exrc_qty,
							feb_exrc_stts,
            	to_char ( feb_trd_dt, 'dd-Mon-yyyy' ),
							feb_mdfctn_cntr,
							feb_settlor,
							feb_ack_nmbr,
							to_char ( feb_exer_ack_tm, 'dd-Mon-yyyy hh24:mi:ss' ),
							feb_pro_cli_ind
    	INTO    :ptr_st_exrcbook->c_cln_mtch_accnt,
            	:ptr_st_exrcbook->l_clnt_ctgry,
            	:ptr_st_exrcbook->c_pipe_id,
            	:ptr_st_exrcbook->c_xchng_cd,
            	:ptr_st_exrcbook->c_prd_typ,
            	:ptr_st_exrcbook->c_ctgry_indstk,
            	:ptr_st_exrcbook->c_undrlyng,
            	:c_expiry_dt,
            	:ptr_st_exrcbook->c_exrc_typ,
            	:ptr_st_exrcbook->c_opt_typ,
            	:ptr_st_exrcbook->l_strike_prc,
            	:ptr_st_exrcbook->c_exrc_rqst_typ,
            	:ptr_st_exrcbook->l_exrc_qty,
            	:ptr_st_exrcbook->c_exrc_stts,
            	:c_trade_dt,
            	:ptr_st_exrcbook->l_mdfctn_cntr,
            	:ptr_st_exrcbook->c_settlor:i_settlor,
	            :ptr_st_exrcbook->c_xchng_ack:i_xchng_ack,
	            :ptr_st_exrcbook->c_ack_tm,
	            :ptr_st_exrcbook->c_pro_cli_ind
    	FROM    feb_fo_exrc_rqst_book_hstry
    	WHERE   feb_exrc_rfrnc_no = :ptr_st_exrcbook->c_exrc_ordr_rfrnc;

     if ( SQLCODE != 0 )
     {
		 		fn_userlog( c_ServiceName, "Exercise REf No. is :%s:", ptr_st_exrcbook->c_exrc_ordr_rfrnc);
       fn_errlog ( c_ServiceName,"S31015", SQLMSG, ptr_st_err_msg->c_err_msg );
       tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
     }

	}

	/* Ver 1.1 starts  */
	if( ptr_st_exrcbook->c_oprn_typ == FOR_SNDCLNT )
	{
	EXEC SQL
	SELECT 	NVL(RTRIM( CLM_CP_CD ), ' '),
					NVL(RTRIM( CLM_CLNT_CD ), CLM_MTCH_ACCNT)
	INTO		:c_cp_code,
					:c_ucc_cd
	FROM 		CLM_CLNT_MSTR 
	WHERE 	CLM_MTCH_ACCNT = :ptr_st_exrcbook->c_cln_mtch_accnt;
	
	if( SQLCODE != 0 ) 
	{
		fn_userlog( c_ServiceName, "match account is :%s:",ptr_st_exrcbook->c_cln_mtch_accnt); 
		fn_errlog( c_ServiceName, "S31020", SQLMSG, ptr_st_err_msg->c_err_msg);
		tpreturn( TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0);
	}

	SETNULL(c_ucc_cd);
	SETNULL(c_cp_code);

	strcpy(ptr_st_exrcbook->c_cln_mtch_accnt, (char *)c_ucc_cd.arr);
	strcpy(ptr_st_exrcbook->c_settlor, (char *)c_cp_code.arr);
	}

	/* Ver 1.1 Ends */

	fn_userlog( c_ServiceName, "match account is :%s:",ptr_st_exrcbook->c_cln_mtch_accnt);

	if( DEBUG_MSG_LVL_3 ) {          /*  Ver 1.4 : Debug level Change  */
		fn_userlog( c_ServiceName, "cp before is :%s:",c_cp_code.arr);
		fn_userlog( c_ServiceName, "match account after is :%s:",ptr_st_exrcbook->c_cln_mtch_accnt);
		fn_userlog( c_ServiceName, "cp after is :%s:",ptr_st_exrcbook->c_settlor);
	}

	SETNULL(c_trade_dt);
	strcpy(ptr_st_exrcbook->c_trd_dt, (char *)c_trade_dt.arr);
	rtrim( ptr_st_exrcbook->c_expry_dt );

  tpfree ( ( char * ) ptr_st_err_msg );
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_exrcbook, sizeof( struct vw_exrcbook ), 0 );
}

