/******************************************************************************/
/*	Program	    			:	SFO_GT_ADMDTLS                									      */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                      FFO_TRD_DT                                            */
/*									      																									  */
/*  Output            : FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_TRD_DT                                            */
/*                                                                            */
/*  Description       : This program fetches the list of match accounts for   */
/*											which ADM processing is to be done		     					  */
/*											against  given run date.                     				  */
/*                                                                            */
/*  Log               :                                                       */
/*                                                                            */
/******************************************************************************/
/*        10-May-2010     Ver 1.0        Nitin Save    Release 1.0            */
/*        02-Feb-2012     Ver 1.1        Swati A.B     												*/
/*        15-May-2012     Ver 1.2        Nitin Save    												*/
/*        12-Aug-2019     Ver 1.3        Anuj Pancholi                        */
/*        01-Oct-2021     Ver 1.4        Sachin Birje                         */
/******************************************************************************/
/*  1.0     -  New Release                                                    */
/*  1.1     -  SPAN Changes																										*/
/*  1.2     -  ADM-BSE Changes																								*/
/*  1.3     -  Block delivery margin on ITM long Call & Put options from      */
/*             Expry-4 days  till  Expiry                                     */
/*  1.4     -  IDFC CR Changes                                                */
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */

#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fn_battmpt.h>
#include <fn_tuxlib.h>
#include <fn_log.h>
#include <fn_read_debug_lvl.h>	

void SFO_GT_ADMDTLS( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Obuf;

	char c_ServiceName [ 33 ];
	char c_err_msg [ 256 ];
	int i_returncode;
	int i_reccount;
	char c_tag [ 256 ];
	char c_msg [ 256 ];
	long int li_rec_no;
	char c_rqst_typ;
  char c_bank_nm[11]; /** Ver 1.4 **/

	EXEC SQL BEGIN DECLARE SECTION;
		char c_cln_mtch_accnt [ 11 ];
		char c_xchng_cd [ 4 ];
		char c_trd_dt [ LEN_DATE ];
	EXEC SQL END DECLARE SECTION;

	ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
	strcpy( c_ServiceName, "SFO_GT_ADMDTLS" );
  MEMSET(c_bank_nm);  /** Ver 1.4 **/
	INITDBGLVL(c_ServiceName);

	i_returncode = fn_unpack_fmltovar ( c_ServiceName,
   	  	                            	c_err_msg,
   	                                	ptr_fml_Ibuf,
                                    	3, /** Ver 1.4**/
													  		    	FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
         			   									   	FFO_TRD_DT, (char * )c_trd_dt, NULL,
                                      FFO_QUEUE_NAME, (char * )c_bank_nm, NULL);  /** Ver 1.4 **/

	if( i_returncode != 0 )
	{
 	  fn_errlog( c_ServiceName, "S31005", LIBMSG , c_err_msg );
  	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
  	tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}	
 
	if (DEBUG_MSG_LVL_3)			
	{
		fn_userlog( c_ServiceName, "c_xchng_cd in ADM :%s:", c_xchng_cd ); 
		fn_userlog( c_ServiceName, "c_trd_dt in ADM  :%s:", c_trd_dt );
		fn_userlog( c_ServiceName, "c_bank_nm :%s:", c_bank_nm);  /** Ver 1.1 **/
	}

  ptr_fml_Obuf = NULL;

  /*** Only unprocessed records for given date from Batch run are to be considered ****/

  EXEC SQL
  		DECLARE cur_adm_pipo CURSOR FOR
				 (
						SELECT distinct FUP_CLM_MTCH_ACCNT 
					  FROM  FUP_FUT_UNDRLYNG_PSTN,CLB_BNK_ACCTS  /** Ver 1.4 ** CLB added **/
						WHERE (FUP_UTRD_MRGN + FUP_ADD_MRGN_VAL) != 0
              AND FUP_CLM_MTCH_ACCNT = CLB_CLM_MTCH_ACCNT /** Ver 1.4 **/
              AND NVL(CLB_BNK_NM,'ICICI') = :c_bank_nm    /** Ver 1.4 **/
            					UNION
						SELECT distinct FOP_CLM_MTCH_ACCNT
						FROM 	 FOP_FO_OPTIONS_PSTN,CLB_BNK_ACCTS  /** Ver 1.4 ** CLB added **/ 
						WHERE  FOP_UEXCTD_MRGN !=0
              AND FOP_CLM_MTCH_ACCNT = CLB_CLM_MTCH_ACCNT /** Ver 1.4 **/
              AND NVL(CLB_BNK_NM,'ICICI') = :c_bank_nm    /** Ver 1.4 **/
          /** ver 1.3 Starts **/     
            UNION 
            SELECT distinct FOP_CLM_MTCH_ACCNT 
            FROM   FOP_FO_OPTIONS_PSTN    ,CLB_BNK_ACCTS  /** Ver 1.4 ** CLB added **/ 
            WHERE  NVL(FOP_UDLVRY_MRGN,0) !=0     
            AND   FOP_OPNPSTN_FLW ='B'      
            AND FOP_CLM_MTCH_ACCNT = CLB_CLM_MTCH_ACCNT /** Ver 1.4 **/
            AND NVL(CLB_BNK_NM,'ICICI') = :c_bank_nm    /** Ver 1.4 **/ 
          /** Ver 1.3 Ends **/
					UNION
            SELECT distinct FUS_CLM_MTCH_ACCNT  /** Ver 1.1 **/ /** As discussed , PL is Add Mrgn In SPAN **/ 
            FROM   FUS_FO_UNDRLYNG_SPN_PSTN,CLB_BNK_ACCTS  /** Ver 1.4 ** CLB added **/ 
	          WHERE  ( FUS_INITIAL_MRGN + FUS_BLCKD_PL ) != 0     
              AND FUS_CLM_MTCH_ACCNT = CLB_CLM_MTCH_ACCNT /** Ver 1.4 **/
              AND NVL(CLB_BNK_NM,'ICICI') = :c_bank_nm    /** Ver 1.4 **/ 
						/* AND		 FUS_XCHNG_CD	= :c_xchng_cd    */ /** Commented in Ver 1.2 **/
         /** Ver 1.3 Starts **/
          UNION
          SELECT distinct FCP_CLM_MTCH_ACCNT 
          FROM FCP_FO_SPN_CNTRCT_PSTN,CLB_BNK_ACCTS  /** Ver 1.4 ** CLB added **/ 
          WHERE NVL(FCP_UDLVRY_MRGN,0) !=0
          AND  FCP_OPNPSTN_FLW ='B'
          AND FCP_CLM_MTCH_ACCNT = CLB_CLM_MTCH_ACCNT /** Ver 1.4 **/
          AND NVL(CLB_BNK_NM,'ICICI') = :c_bank_nm    /** Ver 1.4 **/
         /** Ver 1.3 Ends **/
					UNION
						SELECT distinct FAB_CLM_MTCH_ACCNT
						FROM   FAB_FO_ALC_BFT_SMRY,CLB_BNK_ACCTS  /** Ver 1.4 ** CLB added **/
						/* WHERE  FAB_ISEC_MRGN_AMT != 0  */ /** Commented in Ver 1.2 **/
						WHERE  (FAB_ISEC_MRGN_AMT != 0 OR FAB_ISEC_MRGN_AMT_BSE != 0)              /** Changed in Ver 1.2 **/
              AND  FAB_CLM_MTCH_ACCNT= CLB_CLM_MTCH_ACCNT /** Ver 1.4 **/
              AND NVL(CLB_BNK_NM,'ICICI') = :c_bank_nm    /** Ver 1.4 **/
          )
					MINUS
						SELECT DISTINCT AMC_CLM_MTCH_ACCNT
						FROM  AMC_ADM_MRGN_CALC,CLB_BNK_ACCTS  /** Ver 1.4 ** CLB added **/
						WHERE TRUNC(AMC_TRD_DT) = trim(:c_trd_dt)
            AND AMC_CLM_MTCH_ACCNT = CLB_CLM_MTCH_ACCNT /** Ver 1.4 **/
              AND NVL(CLB_BNK_NM,'ICICI') = :c_bank_nm    /** Ver 1.4 **/
						AND   AMC_BATCH_SITE_IND = 'B'
						AND   AMC_STATUS_FLG = 'Y';
						/** Added in Ver 1.2 **/
						/* The same check of Ver 1.2 is introduced to exclude only success cases from earlier batch pgm run*/
					
  
  	EXEC SQL
  		  OPEN cur_adm_pipo;

    if( SQLCODE != 0 ) 
    {
       fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg );
			 fn_userlog( c_ServiceName, "Error in cur_adm_pipo opening cur_adm_pipo");
       EXEC SQL CLOSE cur_adm_pipo;
	     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    i_reccount = 0; 
  	while(1)
  	{
      
  		EXEC SQL
  			FETCH cur_adm_pipo
  			INTO	:c_cln_mtch_accnt;
  
        if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
        {
          fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg );
          fn_userlog( c_ServiceName, "Error in cur_adm_pipo fetching cur_adm_pipo");
          EXEC SQL CLOSE cur_adm_pipo;
          tpfree ( ( char * ) ptr_fml_Obuf );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
  
        if( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }
        i_reccount = i_reccount ++;

  			i_returncode = fn_pack_vartofml( c_ServiceName,
							 													 c_err_msg,
							 													 &ptr_fml_Obuf,
																				 3,
							 													 FFO_XCHNG_CD, ( char * )c_xchng_cd,
							 													 FFO_TRD_DT, ( char * )c_trd_dt,
							 													 FFO_EBA_MTCH_ACT_NO, ( char * )c_cln_mtch_accnt);

  			if( i_returncode == -1 )
  			{
          fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg );
          EXEC SQL CLOSE cur_adm_pipo;
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  			}
  	 }
  	 
		 EXEC SQL
  		CLOSE cur_adm_pipo;
	tpreturn(TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );		
		

}
