/******************************************************************************/
/*  Program           : SFO_SLTP_MRGN                                         */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_OPT_TYP                                           */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_STRK_PRC                                          */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_LST_TRD_PRC                                       */
/*                      FFO_ERR_MSG                                           */
/*                                                                            */
/*  Output            :                                                       */
/*                                                                            */
/*  Description       : This service Blocks extra margin for oplus            */
/*                                                                            */
/*  Log               :                                                       */
/*                                                                            */
/******************************************************************************/
/*  22-Jul-2021     Ver 1.0       Suchita Dabir      Initial Release          */
/*  22-Jul-2021     Ver 1.1       Suchita Dabir      FPSL and FP changes      */
/*  07-Mar-2023     Ver 1.2       Samip M						 Changes for Client level lock */
/*  22-Jun-2023     ver 1.3       Nikhil Soni     Margin Reporting Regulatory Changes */
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fml_def.h>
#include <fn_log.h>
/* COMMENTED IN VER TOL : TUX on LINUX (Ravindra) * #include <fo_view_def.h> */
#include <fn_span_lib.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fo.h>
#include <fn_pos.h>
#include <fn_ddr.h>
#include <fml_rout.h>
#include <fn_session.h>
#include <fn_read_debug_lvl.h>


/*** ver 1.1 starts ***/


int fn_process_records ( char *c_ServiceName,
                  char *c_err_msg,
                  char *c_cln_mtch_accnt,
                  char *c_xchng_cd,
                  char *c_undrlyng,
                  char c_prd_typ,
                  char c_ctgry_indstk,
                  char c_cntrct_tag,
                  double *ptr_d_ord_mrgn_amt,
                  double *ptr_d_trd_mrgn_amt);


int fn_cal_mrgn_fp ( char *c_ServiceName,
                  char *c_err_msg,
                  char *c_cln_mtch_accnt,
                  char *c_xchng_cd,
                  char *c_undrlyng,
                  char c_prd_typ,
                  char c_ctgry_indstk,
                  char c_cntrct_tag,
                  double *ptr_d_ord_mrgn_amt,
                  double *ptr_d_trd_mrgn_amt );


int fn_upd_mrgn_cal(  char *c_ServiceName,
                      struct vw_pstn_actn *ptr_st_pstn_actn,
                      struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                      struct vw_undfut_pos *ptr_st_undfut_pos,
                      struct vw_err_msg *ptr_st_err_msg );

/*** ver 1.1 ends **/
void SFO_SLTP_MRGN(  TPSVCINFO *rqst )
{
  FBFR32 *ptr_fml_Ibuf = NULL;

  char   c_ServiceName [ 33 ]="\0";
  char   c_err_msg [ 256 ]="\0";
  char   c_svc_nm[33]="\0";
  char   c_xchng_cd [4]="\0";
  char   c_user_id[9]="\0";
  char   c_ordr_rfrnc[18+1]="\0";
  char   c_pipe_id[2+1]="\0";
  char   c_narration_id[4]="\0";

  char   c_span_flag = '\0';
  char   c_cln_mtch_accnt[12] = "\0";
  long int li_sssn_id = 0;
  int    i_returncode = 0;
  int    i_trnsctn = 0;
  char   c_fc_flg='\0';
  FILE  *fp ;
  char c_cover_ordr_ref[25]="\0";
  char c_fresh_ordr_ref[25]="\0";

  /** ver 1.1 starts ***/
  char c_fp_indstk='\0';
  char c_fp_cntrct_tag ='\0';
  char c_fp_underlyng[30]="\0";
  char c_mailer_rmrks[25]="\0";
  int i_record_exists = 0;
  double d_ord_mrgn_amt_old = 0.0;
  double d_trd_mrgn_amt_old = 0.0;
  double d_actual_blocked = 0.0;
  double d_trd_mrgn_amt = 0.0;
  char  c_prd_typ = '\0';
  int i_ch_val = 0;
  double d_ord_mrgn_amt = 0.0;
  double d_diff_trade = 0.0;
  char c_fname[25]="\0";
  char c_prd_name[25]="\0";
  /*** ver 1.1 ends **/
 
  double d_amt_blkd = 0.0 ;
  double d_lss_amt_blkd = 0.0 ;
  double d_prem_amt = 0.0;
  double d_expr_mrgn = 0.0;
  double  d_spn_mrgn    = 0.0;
  char c_sltp_ord_rfrnc[22]="\0";
  double d_comp1_mrgn=0.0;
  double d_comp1_pl =0.0;
  double d_xchng_amt=0.0;
  long l_cvr_ord_lmt_rt = 0;
  long l_fsh_ord_lmt_rt=0; 
  double d_diff_margin = 0.0;
  char c_frsh_ordr_stts = '\0';
  char   c_time[21]= "\0";
  char   c_filedata[1000]="\0";
  double d_diff_lss_mrgn = 0.0;
  double d_diff_lss_mrgn_file = 0.0;
  char   c_filetime[9]="\0";
  char   c_filename[100]="\0"; 

  long int li_cnt = 0;
  long int li_tot_rcrds = 0;
  double d_amt_to_be_blckd = 0.0;
  double d_lss_amt_to_be_blckd = 0.0;
  char c_span_flg ='\0';
  double d_balance_amt = 0.0;
  char  c_bat_name[25]="\0";
  char c_command[100]="\0";
  char c_ref_rmrks[133] = "\0";
  char c_lss_blck='N';
  char c_mrgn_blck = 'N';

  struct vw_pstn_actn st_pstn_actn;
  struct vw_err_msg *ptr_st_err_msg;
  struct st_err_msg st_spn_err_msg;
  struct st_pstn_actn st_pstn_action;

  MEMSET(st_pstn_actn);
  MEMSET(st_pstn_action);
  MEMSET(st_spn_err_msg);
 
  MEMSET(c_ServiceName);
  MEMSET(c_err_msg);
  MEMSET(c_xchng_cd);
  MEMSET(c_user_id);
  MEMSET(c_ordr_rfrnc);
  MEMSET(c_pipe_id);
  MEMSET(c_narration_id);
  MEMSET(c_svc_nm);
  strcpy (c_user_id, "system" );

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName,rqst->name );
  fn_userlog(c_ServiceName," ---------- SFO_SLTP_MRGN started -----------");

  i_returncode = fn_unpack_fmltovar_dflt ( c_ServiceName,
                                      c_err_msg,
                                      ptr_fml_Ibuf,
                                      9, /*** ver 1.1 8 changed to 9 ***/
                                      FFO_EBA_MTCH_ACT_NO,(char*)c_cln_mtch_accnt, "NULL",
                                      FFO_XCHNG_CD,(char*)c_xchng_cd, "NULL",
                                      FFO_ORDR_RFRNC, (char*)c_ordr_rfrnc, "*",
                                      FFO_SPRD_ORD_REF, (char*)c_sltp_ord_rfrnc,"*",
                                      FFO_PRC_INDCTR,(char *)&c_fc_flg,"NULL",
                                      FFO_STATUS_FLG,(char*)&c_span_flag,"*",
                                      FFO_REC_NO, ( char * )&li_cnt,NULL,
                                      FFO_PRDCT_TYP,(char *)&c_prd_typ,"*", /*** ver 1.1 ***/
                                      FFO_INDX_VAL, (char *)&li_tot_rcrds,NULL); 

  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    tpreturn(TPFAIL, ERR_BFR, (char *)NULL, 0, 0 );
  }

  rtrim(c_cln_mtch_accnt);
  rtrim(c_xchng_cd);
  rtrim(c_ordr_rfrnc);
  rtrim(c_sltp_ord_rfrnc);

  /** ver 1.1 starts **/
  strcpy( c_fp_underlyng, c_ordr_rfrnc );
  c_fp_indstk = c_fc_flg;
  c_fp_cntrct_tag = c_span_flag;
  /*** ver 1.1 ends **/

  ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
  if ( ptr_st_err_msg ==  NULL )
  {
   fn_errlog ( c_ServiceName, "S31010", LIBMSG, c_err_msg );
   tpreturn(TPFAIL, ERR_BFR, (char *)NULL, 0, 0 );
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,":%s:%s:%s:%s:%c:%c:%ld:%ld:",c_cln_mtch_accnt,c_xchng_cd,c_ordr_rfrnc,c_sltp_ord_rfrnc,c_fc_flg,c_span_flag,li_cnt,li_tot_rcrds);
  fn_userlog(c_ServiceName,"c_span_flag :%c: c_prd_typ :%c:",c_span_flag,c_prd_typ); /*** ver 1.1 **/
  }

  rtrim(c_ordr_rfrnc);

  /** ver 1.1 starts ***/


        EXEC SQL
             SELECT to_char(sysdate,'dd-Mon-yyyy hh24:mi:ss'),
                    to_char(sysdate,'yyyymmdd')
             INTO   :c_time,
                    :c_filetime
             FROM    dual ;

        if ( SQLCODE != 0 )
        {
          fn_userlog(c_ServiceName,"COULDN'T INSERT DATA INTO IMTM REPORT TABLE II");
          fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
        }

  rtrim(c_time);
  rtrim(c_filetime);
 /*** ver 1.1 ends ***/

  if( c_span_flag == 'S' )
  {

   strcpy(st_pstn_action.c_xchng_cd,c_xchng_cd);
   strcpy(st_pstn_action.c_cln_mtch_accnt,c_cln_mtch_accnt);
   strcpy(st_pstn_action.c_ref_rmrks,"Additional margin: ");
   strcat(st_pstn_action.c_ref_rmrks,c_ordr_rfrnc);  

  }
  else
  {
   strcpy(st_pstn_actn.c_xchng_cd,c_xchng_cd);
   strcpy(st_pstn_actn.c_cln_mtch_accnt,c_cln_mtch_accnt);
   strcpy(st_pstn_actn.c_ref_rmrks,"Additional margin: ");
   strcat(st_pstn_actn.c_ref_rmrks,c_ordr_rfrnc);
  }

 /*** ver 1.1 starts ********/
  if( c_prd_typ == 'I' )
  {
   strcpy( c_fname,"AddMargin_OPlus.csv");
   strcpy( c_prd_name,"OptionPlus");
  }
  else if( c_prd_typ == 'U' )
  {
   strcpy( c_fname,"AddMargin_fpsl.csv");
   strcpy( c_prd_name,"FuturePlusSLTP");
  }
  else if( c_prd_typ == 'P' )
  {
   strcpy( c_fname,"AddMargin_fplus.csv");
   strcpy( c_prd_name,"FuturePlus");
  /*** Check if customer is in IMTM loop ***/
  i_record_exists = 0;

  EXEC SQL
  SELECT 1
  INTO   :i_record_exists
  FROM   FUP_FUT_UNDRLYNG_PSTN
  WHERE  FUP_XCHNG_CD = :c_xchng_cd
  AND    FUP_CLM_MTCH_ACCNT =:c_cln_mtch_accnt
  AND    FUP_PRDCT_TYP = 'P'
        and FUP_UNDRLYNG = :c_fp_underlyng
        and FUP_CNTRCT_TAG = :c_fp_cntrct_tag
  AND    FUP_MTM_FLG = 'M';


  if ( ( SQLCODE != 0 ) && (SQLCODE != NO_DATA_FOUND) && (SQLCODE != TOO_MANY_ROWS_FETCHED) )
  {
    fn_userlog(c_ServiceName,"Error while selecting from FUP");
    fn_errlog(c_ServiceName,"S31015",SQLMSG,c_err_msg);
      tpreturn(TPFAIL, ERR_BFR, (char *)NULL, 0, 0 );
  }

  if (SQLCODE == TOO_MANY_ROWS_FETCHED || i_record_exists == 1)
  {
   rtrim(c_fp_underlyng);
    fn_userlog(c_ServiceName,":%s: Customer in the Intraday MTM loop", c_cln_mtch_accnt);
  EXEC SQL
    SELECT
            FUP_UORDR_MRGN,
            FUP_UTRD_MRGN
      INTO  :d_ord_mrgn_amt_old,
            :d_trd_mrgn_amt_old
       FROM FUP_FUT_UNDRLYNG_PSTN
      where FUP_CLM_MTCH_ACCNT=:c_cln_mtch_accnt
        AND FUP_XCHNG_CD = :c_xchng_cd
        and FUP_PRDCT_TYP = :c_prd_typ
        and FUP_UNDRLYNG = :c_fp_underlyng
        and FUP_CNTRCT_TAG = :c_fp_cntrct_tag;
   if ( SQLCODE != 0 )
    {
          fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg  );
          tpreturn(TPFAIL, ERR_BFR, (char *)NULL, 0, 0 );
   }
       fn_userlog(c_ServiceName,"**:d_ord_mrgn_amt_old :%lf: d_trd_mrgn_amt_old :%lf:",d_ord_mrgn_amt_old,d_trd_mrgn_amt_old);
       sprintf(c_filename,"%s/%s/fno/%s",tuxgetenv("EBALOG_PATH"),c_filetime,c_fname);

        fn_userlog(c_ServiceName,":%s:",c_filename);
        MEMSET(c_mailer_rmrks);
        strcpy(c_mailer_rmrks,"FAILURE");
        rtrim(c_mailer_rmrks);
        fn_userlog(c_ServiceName," suchita c_mailer_rmrks :%s:",c_mailer_rmrks);
        sprintf(c_filedata,"%s,%0.2lf,%0.2lf,%0.2lf,%0.2lf,%s",c_cln_mtch_accnt,d_lss_amt_to_be_blckd/100.0,d_trd_mrgn_amt_old/100.0,d_diff_lss_mrgn_file/100.0,d_diff_lss_mrgn/100.0,c_mailer_rmrks);
        if(DEBUG_MSG_LVL_3)
        {
         fn_userlog(c_ServiceName," suchita c_filedata :%s:",c_filedata);
        }
        fp = (FILE *)fopen(c_filename,"a+") ;
        if(fp == NULL)
        {
            fn_userlog(c_ServiceName,"UNABLE TO OPEN FILE FOR MTM");
        }
        fprintf(fp,"%s\n",c_filedata);
        fclose(fp);
   tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )NULL, 0, 0 );
  }

 }

  rtrim(c_fname);
  fn_userlog(c_ServiceName,"c_fname is :%s:",c_fname);
  rtrim(c_prd_name);
/*** ver 1.1 ends ***/
   i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
   if ( i_trnsctn == -1 )
   {
     fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg  );
     tpreturn(TPFAIL, ERR_BFR, (char *)NULL, 0, 0 );
   }

   /** i_returncode = fn_lock_usr( c_ServiceName,c_cln_mtch_accnt); ** Commented and changed for Ver 1.2 **/
   i_returncode = fn_lock_fno( c_ServiceName,c_cln_mtch_accnt);

   if ( i_returncode == -1 )
   {
     fn_errlog( c_ServiceName, "S31030", LIBMSG, c_err_msg  );
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     tpreturn(TPFAIL, ERR_BFR, (char *)NULL, 0, 0 );
   }

   fn_userlog(c_ServiceName,"BEFORE c_prd_typ :%c:",c_prd_typ); /** ver 1.1 ***/
   if( c_prd_typ == 'U' || c_prd_typ == 'I' ) /*** ver 1.1 ***/
   {
   EXEC SQL
        SELECT  FOD_AMT_BLCKD,
                FOD_LSS_AMT_BLCKD,
                FOD_ORDR_STTS
        INTO    :d_amt_blkd,
                :d_lss_amt_blkd,
                :c_frsh_ordr_stts
        FROM    FOD_FO_ORDR_DTLS
        WHERE   FOD_ORDR_RFRNC =DECODE( :c_fc_flg,'C',:c_sltp_ord_rfrnc,:c_ordr_rfrnc);


  if(SQLCODE != 0)
  {
     fn_errlog( c_ServiceName, "S31035", SQLMSG, c_err_msg  ); /** ver 1.1 LIBMSG  changed to SQLMSG ***/
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     tpreturn(TPFAIL, ERR_BFR, (char *)NULL, 0, 0 );
   }

   if(DEBUG_MSG_LVL_3)
   {
     fn_userlog(c_ServiceName,":%lf:%lf:%c:",d_amt_blkd,d_lss_amt_blkd,c_frsh_ordr_stts);
   }

   if( c_fc_flg == 'C' )
   {
    fn_userlog(c_ServiceName,"COVER ORDER ");
    strcpy( c_fresh_ordr_ref,c_sltp_ord_rfrnc);
    strcpy( c_cover_ordr_ref,c_ordr_rfrnc);
    rtrim(c_fresh_ordr_ref);
    rtrim(c_cover_ordr_ref);
   }
   else
   {
    fn_userlog(c_ServiceName,"FRESH ORDER ");
    strcpy( c_cover_ordr_ref,c_sltp_ord_rfrnc);
    strcpy( c_fresh_ordr_ref,c_ordr_rfrnc);
    rtrim(c_fresh_ordr_ref);
    rtrim(c_cover_ordr_ref);
  } 
    EXEC SQL
              SELECT  FXB_LMT_RT
              INTO    :l_fsh_ord_lmt_rt
              FROM    FXB_FO_XCHNG_BOOK
              WHERE   FXB_ORDR_RFRNC = :c_fresh_ordr_ref
              AND     FXB_MDFCTN_CNTR = (select max(FXB_MDFCTN_CNTR) FROM FXB_FO_XCHNG_BOOK
              WHERE   FXB_ORDR_RFRNC = :c_fresh_ordr_ref
              AND     FXB_PLCD_STTS != 'J');


    if(SQLCODE != 0)
    {
              fn_errlog ( c_ServiceName, "S31040", SQLMSG, ptr_st_err_msg->c_err_msg );
              fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }
   if(DEBUG_MSG_LVL_3)
   {
    fn_userlog(c_ServiceName,"l_fsh_ord_lmt_rt :%ld:",l_fsh_ord_lmt_rt);
   }
    EXEC SQL
              SELECT  FXB_LMT_RT
              INTO    :l_cvr_ord_lmt_rt
              FROM    FXB_FO_XCHNG_BOOK
              WHERE   FXB_ORDR_RFRNC = :c_cover_ordr_ref
              AND     FXB_MDFCTN_CNTR = (select max(FXB_MDFCTN_CNTR) FROM FXB_FO_XCHNG_BOOK
              WHERE   FXB_ORDR_RFRNC = :c_cover_ordr_ref);
    if(SQLCODE != 0)
    {
              fn_errlog ( c_ServiceName, "S31045", SQLMSG, ptr_st_err_msg->c_err_msg );
              fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }
    if(DEBUG_MSG_LVL_3)
    {
     fn_userlog(c_ServiceName,"l_cvr_ord_lmt_rt :%ld:",l_cvr_ord_lmt_rt);
    }

     if( c_prd_typ == 'I' ) /** ver 1.1 if else added ***/
     {
       strcpy( c_narration_id ,BLOCK_ADD_OPLS_MRGN);/** ver 1.1 **/
        /* Calculate Margin amount to be blocked */
         i_returncode =   fn_cal_mrgn_sltp_op
                              (
                                c_ServiceName,
                                c_fresh_ordr_ref,
                                l_fsh_ord_lmt_rt,
                                l_cvr_ord_lmt_rt,
                                &d_amt_to_be_blckd,
                                &d_lss_amt_to_be_blckd,
                                c_ref_rmrks,
                                &d_comp1_mrgn,
                                &d_comp1_pl, 
                                &d_xchng_amt,
                                &d_prem_amt,
                                &d_spn_mrgn,
                                &d_expr_mrgn, 
                                'E',
                                c_err_msg
                              );
    }
    else if( c_prd_typ == 'U' ) /** ver 1.1 starts ***/
    {
     fn_userlog(c_ServiceName,"INSIDE FUTURE PLUS");
     strcpy( c_narration_id ,BLOCK_ADD_FPSL_MRGN);
                      i_returncode =    fn_cal_mrgn_sltp
                                        (
                                          c_ServiceName,
                                          c_fresh_ordr_ref,
                                          l_fsh_ord_lmt_rt,
                                          l_cvr_ord_lmt_rt,
                                          &d_amt_to_be_blckd,
                                          &d_lss_amt_to_be_blckd,
                                          c_ref_rmrks,
                                          &d_comp1_mrgn,
                                          &d_comp1_pl,
                                          &d_xchng_amt,
                                          c_err_msg
                                        );
   }/** ver 1.1 ends ***/
   if ( i_returncode == -1 )
   {
     fn_errlog( c_ServiceName, "S31050", LIBMSG, c_err_msg  );
     fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
     tpreturn(TPFAIL, ERR_BFR, (char *)NULL, 0, 0 );
   }

   d_diff_margin = d_amt_blkd - d_amt_to_be_blckd;
   d_diff_lss_mrgn= d_lss_amt_blkd -  d_lss_amt_to_be_blckd;
   d_diff_lss_mrgn_file = abs(d_diff_lss_mrgn);

   /** strcpy( c_narration_id ,BLOCK_ADD_OPLS_MRGN); commented in ver 1.1 ***/
   if(DEBUG_MSG_LVL_3)
   {
     fn_userlog(c_ServiceName,"d_diff_margin :%lf: d_diff_lss_mrgn :%lf:",d_diff_margin,d_diff_lss_mrgn);
   }
   if( d_diff_margin <  0 )
   {
      if( c_span_flag == 'S' )
      {

        i_returncode = fn_upd_spnlimits( c_ServiceName,
                                       &st_pstn_action,
                                       &st_spn_err_msg, 
                                       c_narration_id,
                                       DEBIT_TILL_LIMIT,
                                       d_diff_margin, 
                                       &d_balance_amt);
        if(DEBUG_MSG_LVL_5)
        {
          fn_userlog( c_ServiceName, "i_returncode Is :%d:",i_returncode);
        }

        if ( i_returncode != 0 )
        {
          fn_errlog( c_ServiceName, "S31055",LIBMSG , c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)c_err_msg, 0, 0 );
        }

      
      }


      if( c_span_flag == 'N' )
      {

        i_returncode = fn_upd_limits( c_ServiceName,
                                   &st_pstn_actn, 
                                  ptr_st_err_msg, 
                                    c_narration_id,
                                   DEBIT_TILL_LIMIT, 
                                  d_diff_margin, 
                                    &d_balance_amt);

        if ( i_returncode != 0 )
        {
          fn_errlog( c_ServiceName, "S31060",LIBMSG , c_err_msg );
              fn_aborttran( c_ServiceName, i_trnsctn,c_err_msg );
              tpreturn(TPFAIL, ERR_BFR, (char *)c_err_msg, 0, 0 );
        } 



      }
      d_diff_margin = ((-1) *d_diff_margin) + d_balance_amt;
      c_mrgn_blck = 'Y';
   }
 

   if( d_diff_lss_mrgn <  0 )
   {
      if( c_span_flag == 'S' )
      {

        i_returncode = fn_upd_spnlimits( c_ServiceName,
                                       &st_pstn_action,
                                       &st_spn_err_msg, 
                                       c_narration_id,
                                       DEBIT_TILL_LIMIT,
                                       d_diff_lss_mrgn, 
                                       &d_balance_amt);
        if(DEBUG_MSG_LVL_5)
        {
          fn_userlog( c_ServiceName, "i_returncode Is :%d:",i_returncode);
        }

        if ( i_returncode != 0 )
        {
          fn_errlog( c_ServiceName, "S31065",LIBMSG , c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)c_err_msg, 0, 0 );
        } 
      }


      if( c_span_flag == 'N' )
      {

        i_returncode = fn_upd_limits( c_ServiceName,
                                    &st_pstn_actn,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    DEBIT_TILL_LIMIT,
                                    d_diff_lss_mrgn, 
                                    &d_balance_amt);

        if ( i_returncode != 0 )
        {
          fn_errlog( c_ServiceName, "S31070",LIBMSG , c_err_msg );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)c_err_msg, 0, 0 );
        }



      }
      d_diff_lss_mrgn = ((-1) * d_diff_lss_mrgn) + d_balance_amt;
      c_lss_blck = 'Y';
   }
    if( c_lss_blck=='Y' || c_mrgn_blck == 'Y' )
    {
    EXEC SQL
         UPDATE     FOD_FO_ORDR_DTLS
                 SET        FOD_AMT_BLCKD     = FOD_AMT_BLCKD + :d_diff_margin,
                            FOD_LSS_AMT_BLCKD = FOD_LSS_AMT_BLCKD + :d_diff_lss_mrgn,
                            FOD_SLTP_MRGN = :d_comp1_mrgn,
                            FOD_SLTP_PL   = :d_comp1_pl,  
                            FOD_SLTP_SEBI_MRGN = :d_xchng_amt,
                            FOD_OPLUS_PREMIUM  = :d_prem_amt,
                            FOD_SPAN_MRGN = :d_spn_mrgn,    
                            FOD_EXPR_MRGN = :d_expr_mrgn   
                 WHERE      FOD_ORDR_RFRNC    = :c_fresh_ordr_ref; 

              if(SQLCODE != 0)
              {
                fn_errlog ( c_ServiceName, "S31075", SQLMSG, c_err_msg );
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)c_err_msg, 0, 0 );
              }

    EXEC SQL
                 UPDATE     FOD_FO_ORDR_DTLS
                 SET        FOD_AMT_BLCKD      =  0,
                            FOD_LSS_AMT_BLCKD  =  0
                 WHERE      FOD_ORDR_RFRNC          =  :c_cover_ordr_ref; 

              if(SQLCODE != 0)
              {
                fn_errlog ( c_ServiceName, "S31080", SQLMSG, c_err_msg );
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)c_err_msg, 0, 0 );
              }

    fn_userlog(c_ServiceName," MARGIN MAILER d_diff_lss_mrgn :%lf:",d_diff_lss_mrgn);
   
  
      /*commented in ver 1.1
            EXEC SQL
             SELECT to_char(sysdate,'dd-Mon-yyyy hh24:mi:ss'),
                    to_char(sysdate,'yyyymmdd')
             INTO   :c_time,
                    :c_filetime
             FROM    dual ;

        if ( SQLCODE != 0 )
        {
          fn_userlog(c_ServiceName,"COULDN'T INSERT DATA INTO IMTM REPORT TABLE II");
          fn_userlog(c_ServiceName,"SQLCODE IS |%ld|",SQLCODE);
        }
 ******/

/**        sprintf(c_filename,"%s/%s/fno/addmrgn.csv",tuxgetenv("EBALOG_PATH"),c_filetime); ver 1.1 ***/
        sprintf(c_filename,"%s/%s/fno/%s",tuxgetenv("EBALOG_PATH"),c_filetime,c_fname); /** ver 1.1 **/

        fn_userlog(c_ServiceName,":%s:",c_filename);
        /** ver 1.1 starts ***/
        MEMSET(c_mailer_rmrks);
        strcpy(c_mailer_rmrks,"SUCCESS");
        rtrim(c_mailer_rmrks);
          fn_userlog(c_ServiceName,"c_mailer_rmrks :%s:",c_mailer_rmrks);
        sprintf(c_filedata,"%s,%0.2lf,%0.2lf,%0.2lf,%0.2lf,%s",c_cln_mtch_accnt,d_lss_amt_to_be_blckd/100.0,d_lss_amt_blkd/100.0,d_diff_lss_mrgn_file/100.0,d_diff_lss_mrgn/100.0,c_mailer_rmrks);
         fn_userlog(c_ServiceName,"suchita c_filedata :%s:",c_filedata);
        /*** ver 1.1 ends ***/
        /** commented in ver 1.1
        sprintf(c_filedata,"%s,%lf,%lf,%lf,%lf",c_cln_mtch_accnt,d_lss_amt_to_be_blckd/100.0,d_lss_amt_blkd/100.0,d_diff_lss_mrgn_file/100.0,d_diff_lss_mrgn/100.0); ***/
        fp = (FILE *)fopen(c_filename,"a+") ;
        if(fp == NULL)
        {
            fn_userlog(c_ServiceName,"UNABLE TO OPEN FILE FOR MTM");
        }
        fprintf(fp,"%s\n",c_filedata);
        fclose(fp);
      }
        if( li_cnt == li_tot_rcrds )
        {
          MEMSET(c_command);
          sprintf(c_command,"ksh %s/bin/opls_data_mail.sh %s %s %s", tuxgetenv("HOME"),c_bat_name,c_prd_name,c_fname );/** ver 1.1 **/
          /** sprintf(c_command,"ksh %s/bin/opls_data_mail.sh %s ", tuxgetenv("HOME"),c_bat_name ); ** commented in ver 1.1 **/
          system(c_command);
        }

   } /** ver 1.1 starts ***/
   else
   {
  rtrim(c_fp_underlyng);

  EXEC SQL
    SELECT
            FUP_UORDR_MRGN,
            FUP_UTRD_MRGN
      INTO  :d_ord_mrgn_amt_old,
            :d_trd_mrgn_amt_old
       FROM FUP_FUT_UNDRLYNG_PSTN
      where FUP_CLM_MTCH_ACCNT=:c_cln_mtch_accnt
        AND FUP_XCHNG_CD = :c_xchng_cd
        and FUP_PRDCT_TYP = :c_prd_typ
        and FUP_UNDRLYNG = :c_fp_underlyng
        and FUP_CNTRCT_TAG = :c_fp_cntrct_tag;
   if ( SQLCODE != 0 )
    {
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          fn_errlog( c_ServiceName, "S31085", LIBMSG, c_err_msg  );
          tpreturn(TPFAIL, ERR_BFR, (char *)NULL, 0, 0 );
   }
  fn_userlog(c_ServiceName,":d_ord_mrgn_amt_old :%lf: d_trd_mrgn_amt_old :%lf:",d_ord_mrgn_amt_old,d_trd_mrgn_amt_old);

   i_ch_val =  fn_process_records ( c_ServiceName,
                  c_err_msg,
                  c_cln_mtch_accnt,
                  c_xchng_cd,
                  c_fp_underlyng,
                  c_prd_typ,
                  c_fp_indstk,
                  c_fp_cntrct_tag,
                  &d_ord_mrgn_amt,
                  &d_trd_mrgn_amt);

   if( i_ch_val != 0 )
   {
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          fn_errlog( c_ServiceName, "S31090", LIBMSG, c_err_msg  );
          tpreturn(TPFAIL, ERR_BFR, (char *)NULL, 0, 0 );
   }
   d_diff_trade = d_trd_mrgn_amt_old - d_trd_mrgn_amt;

   fn_userlog(c_ServiceName,"HELLO :%s:%s:%c: ON :%lf:%lf: T :%lf:%lf",c_cln_mtch_accnt,c_fp_underlyng,c_prd_typ,d_ord_mrgn_amt_old,d_ord_mrgn_amt,d_trd_mrgn_amt_old,d_trd_mrgn_amt);

   fn_userlog(c_ServiceName,"d_trd_mrgn_amt :%lf: d_ord_mrgn_amt :%lf:",d_trd_mrgn_amt,d_ord_mrgn_amt);

   if( d_diff_trade < 0 )
   {
        strcpy( c_narration_id ,BLOCK_ADD_FP_MRGN);

        i_returncode = fn_upd_limits( c_ServiceName,
                                    &st_pstn_actn,
                                    ptr_st_err_msg,
                                    c_narration_id,
                                    DEBIT_TILL_LIMIT,
                                    d_diff_trade,
                                    &d_balance_amt);

        if ( i_returncode != 0 )
        {

          fn_errlog( c_ServiceName, "S31095",LIBMSG , c_err_msg );
                fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)c_err_msg, 0, 0 );
        }

        d_actual_blocked = ( -1 * d_diff_trade ) + d_balance_amt;
  EXEC SQL
      UPDATE FUP_FUT_UNDRLYNG_PSTN
        SET FUP_UTRD_MRGN = FUP_UTRD_MRGN + :d_actual_blocked
      where FUP_CLM_MTCH_ACCNT=:c_cln_mtch_accnt
        AND FUP_XCHNG_CD = :c_xchng_cd
        and FUP_PRDCT_TYP = :c_prd_typ
        and FUP_UNDRLYNG = :c_fp_underlyng
        and FUP_CNTRCT_TAG = :c_fp_cntrct_tag;
   if ( SQLCODE != 0 )
    {
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          fn_errlog( c_ServiceName, "S31100", LIBMSG, c_err_msg  );
          tpreturn(TPFAIL, ERR_BFR, (char *)NULL, 0, 0 );
   }
       d_diff_trade = (-1)*d_diff_trade;

        sprintf(c_filename,"%s/%s/fno/%s",tuxgetenv("EBALOG_PATH"),c_filetime,c_fname);
        fn_userlog(c_ServiceName,":%s:",c_filename);
        MEMSET(c_mailer_rmrks);
        strcpy(c_mailer_rmrks,"SUCCESS");
        rtrim(c_mailer_rmrks);
         fn_userlog(c_ServiceName,"suchita c_mailer_rmrks :%s:",c_mailer_rmrks);

         sprintf(c_filedata,"%s,%0.2lf,%0.2lf,%0.2lf,%0.2lf,%s",c_cln_mtch_accnt,d_trd_mrgn_amt/100.0,d_trd_mrgn_amt_old/100.0,d_diff_trade/100.0,d_actual_blocked/100.0,c_mailer_rmrks);

        if(DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"suchita c_filedata :%s:",c_filedata);
        }

        fp = (FILE *)fopen(c_filename,"a+") ;
        if(fp == NULL)
        {
            fn_userlog(c_ServiceName,"UNABLE TO OPEN FILE FOR MTM");
        }
        fprintf(fp,"%s\n",c_filedata);
        fclose(fp);
   }
        if( li_cnt == li_tot_rcrds )
        {
          MEMSET(c_command);
          sprintf(c_command,"ksh %s/bin/opls_data_mail.sh %s %s %s", tuxgetenv("HOME"),c_bat_name,c_prd_name,c_fname );
          system(c_command);
        }


  } /** ver 1.1 ends **/
 
   if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
   {
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          fn_errlog( c_ServiceName, "S31105", LIBMSG, c_err_msg  );
          tpreturn(TPFAIL, ERR_BFR, (char *)NULL, 0, 0 );
   }

  /*** Ver 1.3 : starts here ***/
  i_returncode = 0;

  i_returncode = fn_upd_mrgn_reporting( c_cln_mtch_accnt ,
                                        c_xchng_cd,
                                        c_ServiceName,
                                        c_err_msg);

  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "S31110", LIBMSG, c_err_msg );
    fn_userlog(c_ServiceName,"Pls check, Nikhil Error while calling function fn_upd_mrgn_reporting..");
  }
  /*** Ver 1.3 : Ends here ***/

  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )NULL, 0, 0 );

}


/** ver 1.1 starts **/


int fn_process_records ( char *c_ServiceName,
                  char *c_err_msg,
                  char *c_cln_mtch_accnt,
                  char *c_xchng_cd,
                  char *c_undrlyng,
                  char c_prd_typ,
                  char c_ctgry_indstk,
                  char c_cntrct_tag,
                  double *ptr_d_ord_mrgn_amt,
                  double *ptr_d_trd_mrgn_amt)
{
  int i_returncode;
  double d_ord_mrgn_amt;
  double d_trd_mrgn_amt;
  double d_ord_amt_blkd;
    double d_pstn_amt_blkd;
    int i_trnsctn;

   EXEC SQL
    DECLARE sql_ut_cur CURSOR FOR
    SELECT DISTINCT ffp_clm_mtch_accnt,
                    ffp_xchng_cd,
                    ffp_undrlyng,
                    ffp_prdct_typ,
                    ffp_indstk,
                    ffp_cntrct_tag
    FROM ffp_fo_futures_pstn
    WHERE FFP_PRDCT_TYP = 'P'
      and  ffp_undrlyng = :c_undrlyng
      and  ffp_clm_mtch_accnt = :c_cln_mtch_accnt;

  EXEC SQL
    OPEN sql_ut_cur;
  if( SQLCODE != 0 )
  {
  fn_errlog ( c_ServiceName, "S31115", SQLMSG, c_err_msg );
  return FAILURE;
  }

  d_ord_mrgn_amt = 0;
  d_trd_mrgn_amt = 0;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "inside fn_process_records c_prd_typ : %c", c_prd_typ );
  }

  while (1)
  {
    EXEC SQL
      FETCH sql_ut_cur
      INTO  :c_cln_mtch_accnt,
            :c_xchng_cd,
            :c_undrlyng,
            :c_prd_typ,
            :c_ctgry_indstk,
            :c_cntrct_tag;


    if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
    fn_errlog ( c_ServiceName, "S31120", SQLMSG, c_err_msg );
    return FAILURE;
    }

    if( SQLCODE == NO_DATA_FOUND )
    {
      break;
    }


    i_returncode =  fn_cal_mrgn_fp ( c_ServiceName,
                                  c_err_msg,
                      c_cln_mtch_accnt ,
                                  c_xchng_cd,
                                  c_undrlyng,
                                  c_prd_typ,
                                  c_ctgry_indstk,
                                  c_cntrct_tag,
                                  &d_ord_amt_blkd,
                                  &d_pstn_amt_blkd );

    if ( i_returncode != 0 )
    {
    /** fn_errlog ( c_ServiceName, "S31125", SQLMSG, c_err_msg );  Commented in VQC **/
        fn_errlog ( c_ServiceName, "S31130", LIBMSG, c_err_msg );   /*** SQLMSG is Replaced with LIBMSG (VQC) ***/
      return FAILURE;
    }

      d_ord_mrgn_amt = d_ord_mrgn_amt + d_ord_amt_blkd;
    d_trd_mrgn_amt = d_trd_mrgn_amt + d_pstn_amt_blkd;

    *ptr_d_ord_mrgn_amt = d_ord_mrgn_amt;
    *ptr_d_trd_mrgn_amt = d_trd_mrgn_amt;
  }

  EXEC SQL
    CLOSE sql_ut_cur;

 return SUCCESS;
}


int fn_cal_mrgn_fp ( char *c_ServiceName,
                  char *c_err_msg,
                  char *c_cln_mtch_accnt,
                  char *c_xchng_cd,
                  char *c_undrlyng,
                  char c_prd_typ,
                  char c_ctgry_indstk,
                  char c_cntrct_tag,
                  double *ptr_d_ord_mrgn_amt,
                  double *ptr_d_trd_mrgn_amt )

{

  int i_returncode;
  struct vw_err_msg st_err_msg;

  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;             /* a cursor variable */
    struct vw_cntfut_pos st_cntpos_crrnt;
    struct vw_undfut_pos st_undfut_pos_to_be;
    struct vw_undfut_pos st_undfut_pos_crrnt;
    struct vw_pstn_actn st_pstn_actn ;
    varchar c_exp_dt [ LEN_DATE ];
  EXEC SQL END DECLARE SECTION;


  strcpy(st_undfut_pos_to_be.c_cln_mtch_accnt, c_cln_mtch_accnt );
  strcpy( st_undfut_pos_to_be.c_xchng_cd, c_xchng_cd );
  strcpy( st_undfut_pos_to_be.c_undrlyng, c_undrlyng );
  st_undfut_pos_to_be.c_prd_typ  = c_prd_typ;
  st_undfut_pos_to_be.c_ctgry_indstk  = c_ctgry_indstk;
  st_undfut_pos_to_be.c_cntrct_tag = c_cntrct_tag;
  st_undfut_pos_to_be.l_ibuy_qty = 0;
  st_undfut_pos_to_be.d_ibuy_ord_vl = 0;
  st_undfut_pos_to_be.l_isell_qty = 0;
  st_undfut_pos_to_be.d_isell_ord_vl = 0;
  st_undfut_pos_to_be.l_exbuy_qty = 0;
  st_undfut_pos_to_be.d_exbuy_ord_vl = 0;
  st_undfut_pos_to_be.l_exsell_qty = 0;
  st_undfut_pos_to_be.d_exsell_ord_vl = 0;
  st_undfut_pos_to_be.l_buy_exctd_qty = 0;
  st_undfut_pos_to_be.l_sell_exctd_qty = 0;
  st_undfut_pos_to_be.c_opnpstn_flw = 'N';
  st_undfut_pos_to_be.l_opnpstn_qty = 0;
  st_undfut_pos_to_be.d_org_opn_val = 0;
  st_undfut_pos_to_be.d_mtm_opn_val = 0;
  st_undfut_pos_to_be.l_opn_buyqty = 0;
  st_undfut_pos_to_be.l_opn_sellqty = 0;
  st_undfut_pos_to_be.d_ibuy_mrgn = 0;
  st_undfut_pos_to_be.d_isell_mrgn = 0;
  st_undfut_pos_to_be.d_exbuy_mrgn = 0;
  st_undfut_pos_to_be.d_exsell_mrgn = 0;
  st_undfut_pos_to_be.d_add_mrgn_val = 0;
  st_undfut_pos_to_be.d_exctd_mrgn = 0;
  st_undfut_pos_to_be.d_sprd_mrgn = 0;
  st_undfut_pos_to_be.d_sprd_pl = 0;
  st_undfut_pos_to_be.d_trd_mrgn = 0;
  st_undfut_pos_to_be.c_oprn_typ = '*';
  st_undfut_pos_to_be.d_ordr_mrgn = 0;
  st_undfut_pos_to_be.d_imtm_opn_val = 0;
  st_undfut_pos_to_be.d_imtm_exctd_mrgn = 0;
  st_undfut_pos_to_be.d_imtm_sprd_mrgn = 0;
  st_undfut_pos_to_be.d_imtm_sprd_pl = 0;
  st_undfut_pos_to_be.d_imtm_trd_mrgn = 0;
  st_undfut_pos_to_be.d_mm_exctd_mrgn = 0;
  st_undfut_pos_to_be.d_mm_sprd_mrgn = 0;
  st_undfut_pos_to_be.d_mm_sprd_pl = 0;
  st_undfut_pos_to_be.d_mm_trd_mrgn = 0;

    fn_userlog ( c_ServiceName, "B4 c_prd_typ : %c", c_prd_typ );

  /** Prepare a list of contracts from contract position table **/
  EXEC SQL ALLOCATE :sys_cursor;


    EXEC SQL EXECUTE
      BEGIN
         OPEN :sys_cursor FOR
          SELECT  ffp_clm_mtch_accnt,
                  ffp_xchng_cd,
                  ffp_prdct_typ,
                  ffp_indstk,
                  ffp_undrlyng,
                  to_char (ffp_expry_dt,'DD-Mon-YYYY'),
                  ffp_exer_typ,
                  ffp_cntrct_tag,
                  ffp_ibuy_qty,
                  ffp_ibuy_ord_val,
                  ffp_isell_qty,
                  ffp_isell_ord_val,
                  ffp_exbuy_qty,
                  ffp_exbuy_ord_val,
                  ffp_exsell_qty,
                  ffp_exsell_ord_val,
                  ffp_buy_exctd_qty,
                  ffp_sell_exctd_qty,
                  ffp_opnpstn_flw,
                  ffp_opnpstn_qty,
                  ffp_opnpstn_val,
                  ffp_mtm_opn_val
          FROM    ffp_fo_futures_pstn
          WHERE   ffp_clm_mtch_accnt = :c_cln_mtch_accnt
          AND     ffp_xchng_cd       = :c_xchng_cd
          AND     ffp_prdct_typ      = :c_prd_typ
          AND     ffp_undrlyng       = :c_undrlyng
          AND     ffp_cntrct_tag     = :c_cntrct_tag
          ORDER BY ffp_expry_dt asc;
        END;
      END-EXEC;

  if ( SQLCODE != 0 )
  {
    EXEC SQL FREE :sys_cursor;
    fn_errlog ( c_ServiceName, "S31135", SQLMSG, c_err_msg );
    return FAILURE;
  }

   while ( 1 )
  {
      EXEC SQL  FETCH   :sys_cursor
                INTO    :st_cntpos_crrnt.c_cln_mtch_accnt,
                        :st_cntpos_crrnt.c_xchng_cd,
                        :st_cntpos_crrnt.c_prd_typ,
                        :st_cntpos_crrnt.c_ctgry_indstk,
                        :st_cntpos_crrnt.c_undrlyng,
                        :c_exp_dt,
                        :st_cntpos_crrnt.c_exrc_typ,
                        :st_cntpos_crrnt.c_cntrct_tag,
                        :st_cntpos_crrnt.l_ibuy_qty,
                        :st_cntpos_crrnt.d_ibuy_ord_vl,
                        :st_cntpos_crrnt.l_isell_qty,
                        :st_cntpos_crrnt.d_isell_ord_vl,
                        :st_cntpos_crrnt.l_exbuy_qty,
                        :st_cntpos_crrnt.d_exbuy_ord_vl,
                        :st_cntpos_crrnt.l_exsell_qty,
                        :st_cntpos_crrnt.d_exsell_ord_vl,
                        :st_cntpos_crrnt.l_buy_exctd_qty,
                        :st_cntpos_crrnt.l_sell_exctd_qty,
                        :st_cntpos_crrnt.c_opnpstn_flw,
                        :st_cntpos_crrnt.l_opnpstn_qty,
                        :st_cntpos_crrnt.d_org_opn_val,
                        :st_cntpos_crrnt.d_mtm_opn_val ;

      if ( SQLCODE != 0 )
      {
        if ( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        fn_errlog ( c_ServiceName, "S31140", SQLMSG,c_err_msg );
        return FAILURE;
     }
     SETNULL( c_exp_dt );
     strcpy ( st_cntpos_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
     rtrim(st_cntpos_crrnt.c_xchng_cd);
     rtrim(st_cntpos_crrnt.c_undrlyng);
     rtrim(st_cntpos_crrnt.c_expry_dt);


    fn_sum_cpos ( st_cntpos_crrnt,
                  &st_undfut_pos_to_be );
  }

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;

  memcpy ( &st_undfut_pos_crrnt,
           &st_undfut_pos_to_be,
           sizeof( st_undfut_pos_crrnt ) );
  strcpy(st_pstn_actn.c_cln_mtch_accnt,c_cln_mtch_accnt);
  strcpy(st_pstn_actn.c_xchng_cd, c_xchng_cd);


  st_pstn_actn.c_prd_typ = c_prd_typ;
  strcpy(st_pstn_actn.c_undrlyng, c_undrlyng);
  st_pstn_actn.l_actn_typ = CALCULATE_MARGIN;

  i_returncode =  fn_upd_mrgn_cal ( c_ServiceName,
                                    &st_pstn_actn,
                                    &st_undfut_pos_crrnt,
                                    &st_undfut_pos_to_be,
                                    &st_err_msg );

  *ptr_d_ord_mrgn_amt = st_undfut_pos_to_be.d_ordr_mrgn;
  *ptr_d_trd_mrgn_amt = st_undfut_pos_to_be.d_trd_mrgn;

  return SUCCESS;
}


int fn_upd_mrgn_cal(  char *c_ServiceName,
                      struct vw_pstn_actn *ptr_st_pstn_actn,
                      struct vw_undfut_pos *ptr_st_undfut_pos_crrnt,
                      struct vw_undfut_pos *ptr_st_undfut_pos,
                      struct vw_err_msg *ptr_st_err_msg )
{
  int   i_returncode=0;

  long int  li_ose_qty = 0;    
  long int  li_ibm_qty = 0;   
  long int  li_ebm_qty = 0;  
  long int  li_obe_qty = 0; 
  long int  li_ism_qty = 0;
  long int  li_esm_qty = 0; 
  long int  li_opn_qty = 0;  
  long int  li_unmtchd_qty = 0;  
  long int  li_sum_CUOQ = 0;     
  long int  li_spd_qty = 0; 

  double d_initial_mrgn = 0.0;
  double d_spread_mrgn = 0.0;
  double d_min_mrgn = 0.0;  
  double d_min_spread_mrgn = 0.0; 
  double d_i_exp = 0.0;
  double d_e_exp = 0.0;
  double d_sum_CUOV = 0.0;

  char  c_pos_opn='\0';
  struct vw_cntfut_pos st_cntfut_pos;

  EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;            
    char  sql_cntrct_tag = '\0';         
    char  sql_cln_mtch_accnt[11] = "\0";
    char  sql_xchng_cd[4] = "\0";      
    char  sql_prd_typ = '\0';         
    char  sql_undrlyng[7] = "\0";    
    double d_far_mtm_opn_val = 0.0; 
    long int  li_far_opnpstn_qty = 0;
    int   i_opn_pos_exists = 0;     
  EXEC SQL END DECLARE SECTION;

  strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
  strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
  strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);
  sql_prd_typ = ptr_st_pstn_actn->c_prd_typ;
  sql_cntrct_tag = ptr_st_undfut_pos->c_cntrct_tag;


  /** Get the margin percentages **/
  i_returncode = fn_get_im_prcntg( c_ServiceName,
                                   ptr_st_pstn_actn,
                                   ptr_st_err_msg,
                                   &d_initial_mrgn,
                                   &d_spread_mrgn,
                                   &d_min_mrgn,
                                   &d_min_spread_mrgn,
                                   ptr_st_undfut_pos->c_cntrct_tag );

  if ( i_returncode == -1 )
  {
    return ( -1 );
  }

  /** Calculation of IWTL buy exposure **/

  if ( ptr_st_undfut_pos->l_ibuy_qty != 0 )
  {
    li_ose_qty = fn_maxl( ( ptr_st_undfut_pos->l_sell_exctd_qty * (-1)) -
                           ptr_st_undfut_pos->l_buy_exctd_qty,
                          0 );

    li_ibm_qty = fn_maxl( (ptr_st_undfut_pos->l_ibuy_qty -
                          li_ose_qty),
                          0 );

    ptr_st_undfut_pos->d_ibuy_mrgn = li_ibm_qty *
                                    (ptr_st_undfut_pos->d_ibuy_ord_vl /
                                     ptr_st_undfut_pos->l_ibuy_qty) *
                                      d_initial_mrgn / 100.0 ;
  }
  else
  {
    ptr_st_undfut_pos->d_ibuy_mrgn = 0;
  }

  /** Calculation of EXCH buy exposure **/
  if ( ptr_st_undfut_pos->l_exbuy_qty != 0 )
  {
    li_ose_qty = fn_maxl( (ptr_st_undfut_pos->l_sell_exctd_qty * (-1)) -
                           ptr_st_undfut_pos->l_buy_exctd_qty,
                          0 );
    li_ebm_qty = fn_maxl( (ptr_st_undfut_pos->l_exbuy_qty -
                          li_ose_qty),
                          0 );
    ptr_st_undfut_pos->d_exbuy_mrgn = li_ebm_qty *
                                    (ptr_st_undfut_pos->d_exbuy_ord_vl /
                                     ptr_st_undfut_pos->l_exbuy_qty) *
                                      d_initial_mrgn / 100.0 ;
  }
  else
  {
    ptr_st_undfut_pos->d_exbuy_mrgn = 0;
  }

  /** Calculation of IWTL sell exposure **/
  if ( ptr_st_undfut_pos->l_isell_qty != 0 )
  {
    li_obe_qty = fn_maxl( ptr_st_undfut_pos->l_buy_exctd_qty -
                          (ptr_st_undfut_pos->l_sell_exctd_qty * (-1) ),
                          0 );

    li_ism_qty = fn_maxl( ( ( ptr_st_undfut_pos->l_isell_qty * (-1)) -
                          li_obe_qty),
                          0 );
    ptr_st_undfut_pos->d_isell_mrgn = li_ism_qty *
                                    (ptr_st_undfut_pos->d_isell_ord_vl /
                                     ptr_st_undfut_pos->l_isell_qty) *
                                    d_initial_mrgn / 100.0 ;
  }
 else
  {
    ptr_st_undfut_pos->d_isell_mrgn = 0;
  }
  /** Calculation of EXCH sell exposure **/
  if ( ptr_st_undfut_pos->l_exsell_qty != 0 )
  {
    li_obe_qty = fn_maxl( ptr_st_undfut_pos->l_buy_exctd_qty -
                         ( ptr_st_undfut_pos->l_sell_exctd_qty * (-1) ),
                          0 );

    li_esm_qty = fn_maxl( ( ( ptr_st_undfut_pos->l_exsell_qty * (-1)) -
                          li_obe_qty),
                          0 );
    ptr_st_undfut_pos->d_exsell_mrgn = li_esm_qty *
                                    (ptr_st_undfut_pos->d_exsell_ord_vl /
                                     ptr_st_undfut_pos->l_exsell_qty) *
                                      d_initial_mrgn / 100.0 ;
  }
  else
  {
    ptr_st_undfut_pos->d_exsell_mrgn = 0;
  }


  d_i_exp = fn_maxd(ptr_st_undfut_pos->d_ibuy_mrgn,
                    ptr_st_undfut_pos->d_isell_mrgn);

  d_e_exp = fn_maxd(ptr_st_undfut_pos->d_exbuy_mrgn,
                    ptr_st_undfut_pos->d_exsell_mrgn);

  ptr_st_undfut_pos->d_ordr_mrgn = fn_maxd( d_i_exp, d_e_exp );

/*** Code added to check whether any open position exists *****/
  i_opn_pos_exists = 0 ;


  EXEC SQL
    SELECT  1
    INTO    :i_opn_pos_exists
    FROM    DUAL
    WHERE   exists
          ( SELECT  1
            FROM ffp_fo_futures_pstn
            WHERE ffp_cntrct_tag  = :sql_cntrct_tag
            AND   ffp_opnpstn_qty != 0 );

  if ( ( SQLCODE != 0 ) &&
        ( SQLCODE != NO_DATA_FOUND ) )
  {
    fn_errlog( c_ServiceName, "S31145", SQLMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "i_opn_pos_exists :%d:", i_opn_pos_exists );
  }

  if ( i_opn_pos_exists == 1 )
  {
    /** Calculation of spread margin **/
    /** Spread qty = min ( sum of open buy qty at contract level,   **/
    /**                    sum of open sell qty at contract level ) **/
    /** Spread margin = Spread qty * Far month contract rate * SM / 100 **/
    li_spd_qty = fn_minl( ptr_st_undfut_pos->l_opn_buyqty,
                    labs(ptr_st_undfut_pos->l_opn_sellqty) );
  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Spread qty :%ld:", li_spd_qty );
  }

    EXEC SQL
      SELECT  ffp_mtm_opn_val,
              ffp_opnpstn_qty
      INTO    :d_far_mtm_opn_val,
              :li_far_opnpstn_qty
      FROM    ffp_fo_futures_pstn
      WHERE   ffp_clm_mtch_accnt = :sql_cln_mtch_accnt
      AND     ffp_xchng_cd       = :sql_xchng_cd
      AND     ffp_prdct_typ      = :sql_prd_typ
      AND     ffp_undrlyng       = :sql_undrlyng
      AND     ffp_cntrct_tag     = :sql_cntrct_tag
      AND     ffp_expry_dt       =
              ( SELECT  MAX(ffp_expry_dt)
              FROM    ffp_fo_futures_pstn
              WHERE   ffp_clm_mtch_accnt = :sql_cln_mtch_accnt
              AND     ffp_xchng_cd       = :sql_xchng_cd
              AND     ffp_prdct_typ      = :sql_prd_typ
              AND     ffp_undrlyng       = :sql_undrlyng
              AND     ffp_cntrct_tag     = :sql_cntrct_tag
              AND     ffp_opnpstn_qty    != 0 );

    if ( ( SQLCODE != 0 ) &&
        ( SQLCODE != NO_DATA_FOUND ) )
   {
      fn_errlog( c_ServiceName, "S31150", SQLMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }

	    if ( SQLCODE == 0 )
    {
      ptr_st_undfut_pos->d_sprd_mrgn = li_spd_qty *
        ( d_far_mtm_opn_val / li_far_opnpstn_qty ) * d_spread_mrgn / 100.0;
    }
    else
    {
      ptr_st_undfut_pos->d_sprd_mrgn = 0;
    }

    c_pos_opn = 'Y';

    EXEC SQL ALLOCATE :sys_cursor;
    if( ptr_st_undfut_pos->l_opnpstn_qty > 0)
    {
      EXEC SQL EXECUTE
        BEGIN
          OPEN :sys_cursor FOR
            SELECT  ffp_mtm_opn_val,
                    ffp_opnpstn_qty
            FROM    ffp_fo_futures_pstn
            WHERE   ffp_clm_mtch_accnt = :sql_cln_mtch_accnt
            AND     ffp_xchng_cd       = :sql_xchng_cd
            AND     ffp_prdct_typ      = :sql_prd_typ
            AND     ffp_undrlyng       = :sql_undrlyng
            AND     ffp_cntrct_tag     = :sql_cntrct_tag
            AND     ffp_opnpstn_qty    > 0
            ORDER BY ffp_expry_dt desc;
          END;
        END-EXEC;
    }
    else if( ptr_st_undfut_pos->l_opnpstn_qty < 0)
    {
      EXEC SQL EXECUTE
        BEGIN
          OPEN :sys_cursor FOR
            SELECT  ffp_mtm_opn_val,
                    ffp_opnpstn_qty
            FROM    ffp_fo_futures_pstn
            WHERE   ffp_clm_mtch_accnt = :sql_cln_mtch_accnt
            AND     ffp_xchng_cd       = :sql_xchng_cd
            AND     ffp_prdct_typ      = :sql_prd_typ
            AND     ffp_undrlyng       = :sql_undrlyng
            AND     ffp_cntrct_tag     = :sql_cntrct_tag
            AND     ffp_opnpstn_qty    < 0
            ORDER BY ffp_expry_dt desc;
          END;
        END-EXEC;
    }
    else
    {
      d_sum_CUOV = 0;
      ptr_st_undfut_pos->d_sprd_pl = (-1) * ptr_st_undfut_pos->d_mtm_opn_val;
      ptr_st_undfut_pos->d_exctd_mrgn = 0;
      c_pos_opn = 'N';

      /*** Set add margin amount to 0 ***/
      ptr_st_undfut_pos->d_add_mrgn_val = 0;

      SQLCODE = 0;
    }


    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31155", SQLMSG, ptr_st_err_msg->c_err_msg  );
      EXEC SQL FREE :sys_cursor;
      return ( -1 );
    }

    if ( c_pos_opn == 'Y' )
    {
      li_opn_qty = ptr_st_undfut_pos->l_opnpstn_qty;
      li_unmtchd_qty = li_opn_qty;
      li_sum_CUOQ = 0;
      d_sum_CUOV = 0;
      {
        EXEC SQL  FETCH :sys_cursor
                  INTO :st_cntfut_pos.d_mtm_opn_val,
                       :st_cntfut_pos.l_opnpstn_qty;

        if ( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S31160", SQLMSG,
                                          ptr_st_err_msg->c_err_msg  );
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
          return ( -1 );
        }
        if ( li_opn_qty > 0 )
        {
          st_cntfut_pos.l_und_opn_qty = fn_minl( st_cntfut_pos.l_opnpstn_qty,
                                        li_unmtchd_qty );
        }
        else
        {
          st_cntfut_pos.l_und_opn_qty = fn_maxl( st_cntfut_pos.l_opnpstn_qty,
                                        li_unmtchd_qty );
        }

        st_cntfut_pos.d_und_opn_val = st_cntfut_pos.l_und_opn_qty *
                  (st_cntfut_pos.d_mtm_opn_val / st_cntfut_pos.l_opnpstn_qty);

        li_sum_CUOQ = li_sum_CUOQ + st_cntfut_pos.l_und_opn_qty;
        d_sum_CUOV = d_sum_CUOV + st_cntfut_pos.d_und_opn_val;
        li_unmtchd_qty = li_unmtchd_qty - st_cntfut_pos.l_und_opn_qty;
      }

      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;

      /** Calculation of Executed margin **/
      /** Executed margin = d_sum_CUOV * IM / 100 **/
      ptr_st_undfut_pos->d_sprd_pl = d_sum_CUOV -
                                    ptr_st_undfut_pos->d_mtm_opn_val;

      if ( li_opn_qty > 0 )
      {
        ptr_st_undfut_pos->d_exctd_mrgn = d_sum_CUOV *
                                          d_initial_mrgn / 100.0;
      }
      else if ( li_opn_qty < 0 )
      {
        ptr_st_undfut_pos->d_exctd_mrgn = ( (-1) * d_sum_CUOV )*
                                            d_initial_mrgn / 100.0;
      }

      if ( ( ptr_st_undfut_pos->l_opnpstn_qty == 0 ) ||
          ( ( ptr_st_undfut_pos->l_opnpstn_qty > 0 ) &&
           ( ptr_st_undfut_pos_crrnt->l_opnpstn_qty < 0 ) ) ||
          ( ( ptr_st_undfut_pos->l_opnpstn_qty < 0 ) &&
           ( ptr_st_undfut_pos_crrnt->l_opnpstn_qty > 0 ) ) )
      {
        ptr_st_undfut_pos->d_add_mrgn_val = 0;
      }
    }
    else
    {
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
    }

    if ( ( ptr_st_undfut_pos->d_exctd_mrgn +
          ptr_st_undfut_pos->d_sprd_mrgn ) <=
          ptr_st_undfut_pos->d_sprd_pl )
    {
      ptr_st_undfut_pos->d_trd_mrgn = 0;
    }
    else
    {
      ptr_st_undfut_pos->d_trd_mrgn = ptr_st_undfut_pos->d_exctd_mrgn +
                                      ptr_st_undfut_pos->d_sprd_mrgn -
                                      ptr_st_undfut_pos->d_sprd_pl;
    }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Actual net open value  :%lf:", d_sum_CUOV );
    fn_userlog ( c_ServiceName, "MTMed open val         :%lf:", ptr_st_undfut_pos->d_mtm_opn_val );
    fn_userlog ( c_ServiceName, "Spread Margin          :%lf:", ptr_st_undfut_pos->d_sprd_mrgn );
    fn_userlog ( c_ServiceName, "Spread PL              :%lf:", ptr_st_undfut_pos->d_sprd_pl );
    fn_userlog ( c_ServiceName, "Executed Margin        :%lf:", ptr_st_undfut_pos->d_exctd_mrgn );
    fn_userlog ( c_ServiceName, "Total Trade Margin     :%lf:", ptr_st_undfut_pos->d_trd_mrgn );
  }
  }
  else
  {
  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "came inside else");
  }
    ptr_st_undfut_pos->d_trd_mrgn = 0;
  }
  return SUCCESS;
}


/*** ver 1.1 ends ***/
