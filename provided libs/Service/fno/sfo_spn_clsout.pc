/********************************************************************************************************/
/*	Program				:	SFO_SPN_CLSOUT																																			*/
/*																																																			*/
/*  Description   :	This service close out the FUTURE & OPTION position of SPAN customers.					    */
/*																																																			*/
/*																																																			*/
/*	Log						:	1.0			26-Aug-2011			Navina D.																										*/
/*	Log						:	1.3			18-Jun-2013			Mahesh Shinde																								*/
/*	Log						:	1.4			28-Aug-2014			Sachin Birje 																								*/
/*  Log           : 1.5     29-Jul-2019     Suchita Dabir                                               */
/*	Log						:	1.6			17-Oct-2019			Navina D.																										*/
/*	Log						:	1.7			15-Jul-2022			Sachin Birje  																							*/
/*																																																			*/
/*																																																			*/	
/********************************************************************************************************/
/*																																																			*/	
/*	1.0		-		New Release																																								*/	
/*	1.1   -   Balance Amt initialization, NVL in FTQ fetch, and MEMSET Input String											*/
/*        -   Bug Fix For Decimal Strike Prices                                                         */
/*					 (30-Mar-2012)  - Navina D.																																	*/	
/*  1.2   -   FNO BSE SPAN Changes | Sachin Birje                                                       */ 
/*  1.3   -   SPAN bug Changes for reading string                                                       */ 
/*  1.4   -   View to FML Changes                                                                       */ 
/*  1.5   -   Delivery Margin Chnages                                                                   */
/*  1.6   -   Input string size change CR-ISEC14-128972                                                 */
/*  1.7   -   SPAN_BOD_MRGN_CR-ISEC14-172812                                           									*/	
/********************************************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <eba_to_ors.h>
/** #include <fo_view_def.h> ** Ver 1.4 **/

#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fn_pos.h>
#include <fn_ddr.h>
#include <fn_log.h> 
#include <fn_session.h>
#include <fml_rout.h> 
#include <fn_read_debug_lvl.h> 
#include <fn_val_ord.h>
#include <fn_span_lib.h> 
#include <math.h>
#define PHYDLVRY_MTM -7       /*** Ver 1.5 ***/

int fn_spnupd_clsoutpos (	char  *c_ServiceName,
                  			char  *c_err_msg,
                  			struct st_pstn_actn *ptr_st_pstn_actn
                			);

int fn_call_spnactn_clsoutgrp1 ( char *c_ServiceName,
	                         char  *c_pipe_id,
											     struct st_pstn_actn *ptr_st_pstn_actn,
                  		     struct st_fus_undrlyng_pstn *ptr_st_undfut_pos_crrnt,
                  				 struct st_fus_undrlyng_pstn *ptr_st_undfut_pos_to_be,
                  	 			 struct st_err_msg *ptr_st_err_msg
												 );

int 	fn_apply_spncnt_clsoutactn ( char *c_ServiceName,
														 struct st_pstn_actn *ptr_st_pstn_actn,
												 		 struct st_fcp_cntrct_pstn *ptr_st_cntopt_pos,
                  					 struct st_err_msg *ptr_st_err_msg
													 );

char	c_ServiceName[33];

double  d_mltplr    = 0.0;
double  d_spn_mrgn  = 0.0;
double  d_nov       = 0.0;
double  d_total_mrgn= 0.0;
double  d_intl_mrgn = 0.0;
double  d_min_mrgn  = 0.0;
double  d_expsr     = 0.0;
char		c_pipe_id[3];
double 	d_undrlyng_pl	= 0.0;

struct st_err_msg *ptr_st_err_msg;

/** Current underlying level position **/
struct st_fus_undrlyng_pstn st_undfut_pos_crrnt; 
	
/** Undelying level position to be **/
struct st_fus_undrlyng_pstn st_undfut_pos_to_be;

void SFO_SPN_CLSOUT( TPSVCINFO *rqst )
{
	int		i_trnsctn;
	int		i_returncode;
	int i_err[19];  
  int i_ferr[19];
	int i = 0;

  char 	c_err_msg[256];	/*** 20-Oct-2011 ***/

	EXEC SQL BEGIN DECLARE SECTION;
		struct st_pstn_actn st_pstnactn;
	EXEC SQL END DECLARE SECTION;
	
	struct st_err_msg st_errmsg;

	FBFR32 *ptr_fml_Ibuf; 

	ptr_fml_Ibuf = (FBFR32 *)rqst->data;

	strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_pstnactn.c_rout_crt );

	if(DEBUG_MSG_LVL_3)
	{
 		fn_userlog ( c_ServiceName,"***********************START SFO_SPN_CLSOUT*************************");
		fn_userlog(c_ServiceName,"START UNPACK Input FML : ptr_fml_Ibuf TO struct st_pstnactn");
	}

	i_err		[	0	]				=	Fget32( ptr_fml_Ibuf ,FFO_USR_ID,0,(char *) st_pstnactn.c_user_id,0);					
	i_ferr	[	0	]				=	Ferror32;																																								
	i_err		[	1	]				=	Fget32( ptr_fml_Ibuf ,FFO_SSSN_ID,0,(char *) &st_pstnactn.l_session_id,0);			
	i_ferr	[	1	]				=	Ferror32;																																								
	i_err		[	2	]				=	Fget32( ptr_fml_Ibuf ,FFO_EBA_MTCH_ACT_NO,0,(char *) st_pstnactn.c_cln_mtch_accnt,0);		
	i_ferr	[	2	]				=	Ferror32;																																								
	i_err		[	3	]				=	Fget32( ptr_fml_Ibuf ,FFO_XCHNG_CD,0,(char *) st_pstnactn.c_xchng_cd,0);								
	i_ferr	[	3	]				=	Ferror32;																																								
	i_err		[	4	]				=	Fget32( ptr_fml_Ibuf ,FFO_PRDCT_TYP,0,(char *) &st_pstnactn.c_prd_typ,0);					
	i_ferr	[	4	]				=	Ferror32;																																								
	i_err		[ 5	]				=	Fget32( ptr_fml_Ibuf ,FFO_UNDRLYNG,0,(char *) st_pstnactn.c_undrlyng,0);					
	i_ferr	[	5	]				=	Ferror32;																																								
	i_err		[	6	]				=	Fget32( ptr_fml_Ibuf ,FFO_EXPRY_DT,0,(char *) st_pstnactn.c_expry_dt,0);					
	i_ferr	[	6	]				=	Ferror32;																																								
	i_err		[	7	]				=	Fget32( ptr_fml_Ibuf ,FFO_STRK_PRC,0,(char *) &st_pstnactn.l_strike_prc,0);			
	i_ferr	[	7	]				=	Ferror32;																																								
	i_err		[	8	]				=	Fget32( ptr_fml_Ibuf ,FFO_EXER_TYP,0,(char *) &st_pstnactn.c_exrc_typ,0);				
	i_ferr	[	8	]				=	Ferror32;																																								
	i_err		[	9	]				=	Fget32( ptr_fml_Ibuf ,FFO_OPT_TYP,0,(char *) &st_pstnactn.c_opt_typ,0);					
	i_ferr	[	9	]				=	Ferror32;																																								
	i_err		[	10 ]			=	Fget32( ptr_fml_Ibuf ,FFO_ACTN_TYP,0,(char *) &st_pstnactn.l_actn_typ,0);
	i_ferr	[	10 ]			=	Ferror32;
	i_err		[	11 ]			=	Fget32( ptr_fml_Ibuf ,FFO_TRD_FLW,0,(char *) &st_pstnactn.c_trnsctn_flw,0);
	i_ferr	[	11 ]			=	Ferror32;
	i_err		[	12	]			=	Fget32( ptr_fml_Ibuf ,FFO_EXEC_QTY,0,(char *) &st_pstnactn.l_exec_qty,0);
	i_ferr	[	12	]			=	Ferror32;
	i_err		[	13	]			=	Fget32( ptr_fml_Ibuf ,FFO_CTGRY_INDSTK,0,(char *) &st_pstnactn.c_ctgry_indstk,0);
	i_ferr	[	13	]			=	Ferror32;
	i_err		[	14	]			=	Fget32( ptr_fml_Ibuf ,FFO_ROUT_CRT,0,(char *) st_pstnactn.c_rout_crt,0);
	i_ferr	[	14	]			=	Ferror32;

	for ( i=0	;	i < 15 ;	i++ )
	{
		if ( (i_err[ i ] == -1 ) && (i_ferr[ i ]	!= FNOTPRES ) )
    {
    	fn_userlog( c_ServiceName, "Error in :%d:",i );
      fn_errlog( c_ServiceName, "S31005", Fstrerror32( i_ferr[i]),ptr_st_err_msg->c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"END UNPACK Input FML : ptr_fml_Ibuf TO struct st_pstnactn");
	}

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"INPUT TO SERVICE");
		fn_userlog(c_ServiceName,"**************************************************");
		fn_userlog ( c_ServiceName,"c_user_id:%s:",	st_pstnactn.c_user_id );
		fn_userlog ( c_ServiceName,"l_session_id:%ld:",	st_pstnactn.l_session_id );
		fn_userlog ( c_ServiceName,"c_cln_mtch_accnt :%s:",	st_pstnactn.c_cln_mtch_accnt );
		fn_userlog ( c_ServiceName,"c_xchng_cd:%s:",	st_pstnactn.c_xchng_cd );
		fn_userlog ( c_ServiceName,"c_prd_typ:%c:", st_pstnactn.c_prd_typ );
		fn_userlog ( c_ServiceName,"c_undrlyng:%s:", st_pstnactn.c_undrlyng );
		fn_userlog ( c_ServiceName,"c_expry_dt:%s:",st_pstnactn.c_expry_dt );
		fn_userlog ( c_ServiceName,"l_strike_prc:%ld:",st_pstnactn.l_strike_prc );
		fn_userlog ( c_ServiceName,"c_exrc_typ:%c:",st_pstnactn.c_exrc_typ );
		fn_userlog ( c_ServiceName,"c_opt_typ:%c:",st_pstnactn.c_opt_typ );
		fn_userlog ( c_ServiceName,"l_actn_typ:%ld:",st_pstnactn.l_actn_typ );
		fn_userlog ( c_ServiceName,"c_trnsctn_flw:%c:",st_pstnactn.c_trnsctn_flw );
		fn_userlog ( c_ServiceName,"l_exec_qty:%ld:",st_pstnactn.l_exec_qty );
		fn_userlog ( c_ServiceName,"c_ctgry_indstk:%c:",st_pstnactn.c_ctgry_indstk );
		fn_userlog ( c_ServiceName,"c_rout_crt:%s:",st_pstnactn.c_rout_crt );
		fn_userlog(c_ServiceName,"**************************************************");
	}

	i_trnsctn = fn_begintran( c_ServiceName, ptr_st_err_msg->c_err_msg );
	if ( i_trnsctn == -1 )
	{
  	fn_errlog ( c_ServiceName, "S31010", LIBMSG, ptr_st_err_msg->c_err_msg );
		strcpy ( st_errmsg.c_err_msg, ptr_st_err_msg->c_err_msg );
		tpfree ( ( char * ) ptr_fml_Ibuf );
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}
	
	i_returncode	=	fn_spnupd_clsoutpos (
                         			   	c_ServiceName,
                              		ptr_st_err_msg->c_err_msg,
                              		&st_pstnactn
                            		);

	if ( i_returncode !=	0 )
  {
    fn_errlog ( c_ServiceName, "S31015", LIBMSG, ptr_st_err_msg->c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  }

	if ( fn_committran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg ) == -1 )
	{
  	fn_errlog ( c_ServiceName, "S31020", LIBMSG, ptr_st_err_msg->c_err_msg );
  	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog( c_ServiceName, " st_pstnactn.c_trnsctn_flw :%c:", st_pstnactn.c_trnsctn_flw );
  	fn_userlog( c_ServiceName, " st_pstnactn.l_orgnl_qty :%ld:", st_pstnactn.l_orgnl_qty );
	}

	if(Fchg32(ptr_fml_Ibuf, FFO_TRD_FLW,0,(char *)&st_pstnactn.c_trnsctn_flw, 0) == -1)
  {
    fn_errlog( c_ServiceName, "S31025", FMLMSG,ptr_st_err_msg->c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if(Fchg32(ptr_fml_Ibuf, FFO_EXEC_QTY,0,(char *)&st_pstnactn.l_orgnl_qty, 0) == -1)
  {
    fn_errlog( c_ServiceName, "S31030", FMLMSG,ptr_st_err_msg->c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if(DEBUG_MSG_LVL_3)
	{
 	fn_userlog ( c_ServiceName,"***********************END SFO_SPN_CLSOUT*************************");
	}

	tpfree ( ( char * ) ptr_st_err_msg );
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
} 

int fn_spnupd_clsoutpos  (
               		   	char  *c_ServiceName,
                  		char  *c_err_msg,
                  		struct st_pstn_actn *ptr_st_pstn_actn
                		)
{
  int i_returncode;

	EXEC SQL BEGIN DECLARE SECTION;
		char	c_mtm_flag;
  EXEC SQL END DECLARE SECTION;

	rtrim(ptr_st_pstn_actn->c_cln_mtch_accnt);
	rtrim(ptr_st_pstn_actn->c_undrlyng);
	rtrim(ptr_st_pstn_actn->c_expry_dt);
	rtrim(ptr_st_pstn_actn->c_ref_rmrks);

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog ( c_ServiceName,"***********************START fn_spnupd_clsoutpos*************************");
  	fn_userlog ( c_ServiceName,"c_user_id 	     :%s:",ptr_st_pstn_actn->c_user_id );
  	fn_userlog ( c_ServiceName,"l_session_id      :%ld:",ptr_st_pstn_actn->l_session_id );
  	fn_userlog ( c_ServiceName,"c_cln_mtch_accnt :%s:",ptr_st_pstn_actn->c_cln_mtch_accnt );
  	fn_userlog ( c_ServiceName,"c_xchng_cd       :%s:",ptr_st_pstn_actn->c_xchng_cd );
  	fn_userlog ( c_ServiceName,"c_undrlyng       :%s:",ptr_st_pstn_actn->c_undrlyng );
  	fn_userlog ( c_ServiceName,"c_expry_dt       :%s:",ptr_st_pstn_actn->c_expry_dt );
  	fn_userlog ( c_ServiceName,"c_exrc_typ       :%c:",ptr_st_pstn_actn->c_exrc_typ );
  	fn_userlog ( c_ServiceName,"l_actn_typ       :%ld:",ptr_st_pstn_actn->l_actn_typ );
  	fn_userlog ( c_ServiceName,"c_trnsctn_flw    :%c:",ptr_st_pstn_actn->c_trnsctn_flw );
  	fn_userlog ( c_ServiceName,"l_exec_qty       :%ld:",ptr_st_pstn_actn->l_exec_qty );
	}	

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Getting the current unerlying position" );
	}

	/*** Get underlying level position for the Exchange, client, underlying, into UPOS_crrnt ***/

  EXEC SQL
     SELECT FUS_CLM_MTCH_ACCNT,
            FUS_XCHNG_CD,
            FUS_INDSTK,
            FUS_UNDRLYNG,
            FUS_UBUY_EXCTD_QTY,
						FUS_USELL_EXCTD_QTY,
            FUS_UOPNPSTN_FLW,
            FUS_UOPNPSTN_QTY,
            FUS_UOPNPSTN_VAL,
            FUS_UMTM_OPN_VAL,
            FUS_INITIAL_MRGN,
            FUS_NET_OPTN_VAL,
						FUS_USPAN_WENOV_MRGN,
            NVL(FUS_MTM_FLG,'O'),
            NVL(FUS_MIN_MRGN,0),
		        FUS_BLCKD_PL,
            FUS_REQD_INITIAL_MRGN,
						FUS_EBA_EXPR_MRGN,
						FUS_SPAN_WEMULT_MRGN
    INTO    :st_undfut_pos_crrnt.c_cln_mtch_accnt,
            :st_undfut_pos_crrnt.c_xchng_cd,
            :st_undfut_pos_crrnt.c_indstk,
            :st_undfut_pos_crrnt.c_undrlyng,
            :st_undfut_pos_crrnt.l_ubuy_exctd_qty,
            :st_undfut_pos_crrnt.l_usell_exctd_qty,
            :st_undfut_pos_crrnt.c_uopnpstn_flw,
            :st_undfut_pos_crrnt.l_uopnpstn_qty,
            :st_undfut_pos_crrnt.d_uopnpstn_val,
            :st_undfut_pos_crrnt.d_umtm_opn_val,
            :st_undfut_pos_crrnt.d_initial_mrgn,
            :st_undfut_pos_crrnt.d_net_optn_val,
						:st_undfut_pos_crrnt.d_uspan_wenov_mrgn,
            :c_mtm_flag,
            :st_undfut_pos_crrnt.d_min_mrgn,
						:st_undfut_pos_crrnt.d_blckd_pl,
            :st_undfut_pos_crrnt.d_reqd_initial_mrgn,
						:st_undfut_pos_crrnt.d_eba_expr_mrgn,
						:st_undfut_pos_crrnt.d_span_wemult_mrgn
    FROM    FUS_FO_UNDRLYNG_SPN_PSTN
    WHERE   FUS_CLM_MTCH_ACCNT  = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND     FUS_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
    AND     FUS_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng;

  if ( ( SQLCODE != 0 ) && ( SQLCODE == NO_DATA_FOUND ) )
  {
    fn_errlog ( c_ServiceName, "S31035", SQLMSG, c_err_msg );
		fn_userlog ( c_ServiceName, "ERROR Getting the current unerlying position SQLCODE = :%ld:",SQLCODE );
		return -1;
  }

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.c_uopnpstn_flw = :%c:",st_undfut_pos_crrnt.c_uopnpstn_flw );
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.l_uopnpstn_qty = :%ld:",st_undfut_pos_crrnt.l_uopnpstn_qty );
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.d_uopnpstn_val = :%lf:",st_undfut_pos_crrnt.d_uopnpstn_val );
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.d_umtm_opn_val = :%lf:",st_undfut_pos_crrnt.d_umtm_opn_val );
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.d_initial_mrgn = :%lf:",st_undfut_pos_crrnt.d_initial_mrgn );
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.d_net_optn_val = :%lf:",st_undfut_pos_crrnt.d_net_optn_val );
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.d_uspan_wenov_mrgn = :%lf:",st_undfut_pos_crrnt.d_uspan_wenov_mrgn );
		fn_userlog ( c_ServiceName, "c_mtm_flag = :%c:",c_mtm_flag );
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.d_min_mrgn = :%lf:",st_undfut_pos_crrnt.d_min_mrgn );
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.d_blckd_pl = :%lf:",st_undfut_pos_crrnt.d_blckd_pl );
		fn_userlog ( c_ServiceName, "st_undfut_pos_crrnt.d_reqd_initial_mrgn = :%lf:",st_undfut_pos_crrnt.d_reqd_initial_mrgn );
	}

	if ( ( c_mtm_flag == UNDER_MTM ) && ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0 ) && ( ptr_st_pstn_actn->l_session_id != 0 ) )
	{
    fn_errlog(c_ServiceName, "B28009", DEFMSG, c_err_msg );
		fn_userlog ( c_ServiceName, "ERROR..." );
		return -1;
	}

	/******** Set UPOS_to_be fields to default ********/
  strcpy( st_undfut_pos_to_be.c_cln_mtch_accnt,	ptr_st_pstn_actn->c_cln_mtch_accnt );
  strcpy( st_undfut_pos_to_be.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd );
  strcpy( st_undfut_pos_to_be.c_undrlyng, ptr_st_pstn_actn->c_undrlyng );
  st_undfut_pos_to_be.c_indstk  = ptr_st_pstn_actn->c_ctgry_indstk;
  st_undfut_pos_to_be.l_ubuy_exctd_qty = 0;
  st_undfut_pos_to_be.l_usell_exctd_qty = 0;
  st_undfut_pos_to_be.c_uopnpstn_flw = 'N';
  st_undfut_pos_to_be.l_uopnpstn_qty = 0;
  st_undfut_pos_to_be.d_uopnpstn_val = 0;
 	st_undfut_pos_to_be.d_umtm_opn_val			=	0 ;
	st_undfut_pos_to_be.d_uspan_wenov_mrgn 	= 0 ;
 	st_undfut_pos_to_be.d_uspan_nenov_mrgn 	=	0	;

 	st_undfut_pos_to_be.d_initial_mrgn			= st_undfut_pos_crrnt.d_initial_mrgn;
	st_undfut_pos_to_be.d_span_wemult_mrgn	= st_undfut_pos_crrnt.d_span_wemult_mrgn ;
 	st_undfut_pos_to_be.d_eba_expr_mrgn  		= st_undfut_pos_crrnt.d_eba_expr_mrgn ;
 	st_undfut_pos_to_be.d_multpr 						=	st_undfut_pos_crrnt.d_multpr ;
 	st_undfut_pos_to_be.d_net_optn_val 			=	st_undfut_pos_crrnt.d_net_optn_val ;
 	st_undfut_pos_to_be.d_min_mrgn 					=	st_undfut_pos_crrnt.d_min_mrgn ;
 	st_undfut_pos_to_be.d_blckd_pl 					=	st_undfut_pos_crrnt.d_blckd_pl ;
 	st_undfut_pos_to_be.d_reqd_initial_mrgn =	st_undfut_pos_crrnt.d_reqd_initial_mrgn ;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"BEFORE st_undfut_pos_to_be.d_initial_mrgn :%lf:",st_undfut_pos_to_be.d_initial_mrgn);
		fn_userlog(c_ServiceName,"BEFORE st_undfut_pos_to_be.d_span_wemult_mrgn :%lf:",st_undfut_pos_to_be.d_span_wemult_mrgn );
		fn_userlog(c_ServiceName,"BEFORE st_undfut_pos_to_be.d_eba_expr_mrgn :%lf:",st_undfut_pos_to_be.d_eba_expr_mrgn);
	}

	i_returncode 	= fn_call_spnactn_clsoutgrp1 ( c_ServiceName, 
																				 c_pipe_id,
		                               			 ptr_st_pstn_actn, 
											         				   &st_undfut_pos_crrnt, 
											         			     &st_undfut_pos_to_be, 
                               			     ptr_st_err_msg 
																			 );

 	if ( i_returncode != 0 )
 	{
		
		switch( i_returncode )
		{
			/**** Ver 1.5 ****/
			case PHYDLVRY_MTM :
			
				fn_errlog(c_ServiceName, "B28009", DEFMSG, c_err_msg );
				return -1;
			/**** Ver 1.5 Ended ***/	

			default :
			
				fn_userlog ( c_ServiceName, "ERROR...in function fn_call_spnactn_clsoutgrp1" );
				return -1;
		}
 	}

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog( c_ServiceName, " st_pstnactn.c_trnsctn_flw :%c:", ptr_st_pstn_actn->c_trnsctn_flw );
  	fn_userlog( c_ServiceName, " st_pstnactn.l_orgnl_qty :%ld:", ptr_st_pstn_actn->l_orgnl_qty );
	}
	if ( st_undfut_pos_to_be.l_uopnpstn_qty > 0 )
  {
		st_undfut_pos_to_be.c_uopnpstn_flw = BUY;
	}
	else if ( st_undfut_pos_to_be.l_uopnpstn_qty < 0 )
	{
		st_undfut_pos_to_be.c_uopnpstn_flw = SELL;
	}
  else
  {
		st_undfut_pos_to_be.c_uopnpstn_flw = NEUTRAL;
  }	


	/** Update the underlying level position on to the table **/
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_initial_mrgn :%lf:",st_undfut_pos_to_be.d_initial_mrgn);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_span_wemult_mrgn :%lf:",st_undfut_pos_to_be.d_span_wemult_mrgn );
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_eba_expr_mrgn :%lf:",st_undfut_pos_to_be.d_eba_expr_mrgn);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_uspan_wenov_mrgn :%lf:",st_undfut_pos_to_be.d_uspan_wenov_mrgn);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_multpr :%lf:",st_undfut_pos_to_be.d_multpr);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_uspan_nenov_mrgn :%lf:",st_undfut_pos_to_be.d_uspan_nenov_mrgn);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.c_mtm_flg :%c:",st_undfut_pos_to_be.c_mtm_flg);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.c_trd_dt :%s:",st_undfut_pos_to_be.c_trd_dt);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_min_mrgn :%lf:",st_undfut_pos_to_be.d_min_mrgn);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_reqd_initial_mrgn :%lf:",st_undfut_pos_to_be.d_reqd_initial_mrgn);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.l_uopnpstn_qty :%ld:",st_undfut_pos_to_be.l_uopnpstn_qty);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.c_uopnpstn_flw :%c:",st_undfut_pos_to_be.c_uopnpstn_flw);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_umtm_opn_val :%lf:",st_undfut_pos_to_be.d_umtm_opn_val);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.l_ubuy_exctd_qty :%lf:",st_undfut_pos_to_be.l_ubuy_exctd_qty);
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.l_usell_exctd_qty :%lf:",st_undfut_pos_to_be.l_usell_exctd_qty);
	}


	EXEC SQL
		UPDATE  FUS_FO_UNDRLYNG_SPN_PSTN
		SET  		FUS_UBUY_EXCTD_QTY  	= :st_undfut_pos_to_be.l_ubuy_exctd_qty,
						FUS_USELL_EXCTD_QTY  	= :st_undfut_pos_to_be.l_usell_exctd_qty,
						FUS_UOPNPSTN_FLW    	= :st_undfut_pos_to_be.c_uopnpstn_flw,
						FUS_UOPNPSTN_QTY    	= :st_undfut_pos_to_be.l_uopnpstn_qty,
						FUS_UOPNPSTN_VAL    	= :st_undfut_pos_to_be.d_uopnpstn_val,
						FUS_UMTM_OPN_VAL    	= :st_undfut_pos_to_be.d_uopnpstn_val,
						FUS_INITIAL_MRGN			=	:st_undfut_pos_to_be.d_initial_mrgn,
						FUS_SPAN_WEMULT_MRGN	=	:st_undfut_pos_to_be.d_span_wemult_mrgn,
						FUS_EBA_EXPR_MRGN			=	:st_undfut_pos_to_be.d_eba_expr_mrgn,
						FUS_USPAN_WENOV_MRGN	=	:st_undfut_pos_to_be.d_uspan_wenov_mrgn,
						FUS_MULTIPLIER				=	:st_undfut_pos_to_be.d_multpr,
						FUS_USPAN_NENOV_MRGN	=	:st_undfut_pos_to_be.d_uspan_nenov_mrgn,
						FUS_NET_OPTN_VAL			=	:st_undfut_pos_to_be.d_net_optn_val,
						FUS_MTM_FLG						=	:c_mtm_flag,
						FUS_NTNL_PL						=	:st_undfut_pos_to_be.d_ntnl_pl,
						FUS_BLCKD_PL					=	:st_undfut_pos_to_be.d_blckd_pl,
						FUS_MIN_MRGN					=	:st_undfut_pos_to_be.d_min_mrgn,
						FUS_REQD_INITIAL_MRGN	=	:st_undfut_pos_to_be.d_reqd_initial_mrgn
		WHERE   FUS_CLM_MTCH_ACCNT  	= :ptr_st_pstn_actn->c_cln_mtch_accnt
		AND     FUS_XCHNG_CD        	= :ptr_st_pstn_actn->c_xchng_cd
		AND     FUS_UNDRLYNG        	= :ptr_st_pstn_actn->c_undrlyng;
		
	if ( SQLCODE != 0 )
	{
		fn_errlog(c_ServiceName, "S31040", SQLMSG, c_err_msg );
		fn_userlog ( c_ServiceName, "ERROR...while updating FUS_FO_UNDRLYNG_SPN_PSTN SQLCODE = :%ld:",SQLCODE );
		return -1;
	}
	
   ptr_st_pstn_actn->c_mtm_flag = 'O'; /* default */

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"c_mtm_flag = :%c:",c_mtm_flag);
	}

	if ( ( c_mtm_flag == UNDER_MTM ) &&	( st_undfut_pos_to_be.l_uibuy_qty == 0 ) && ( st_undfut_pos_to_be.l_uexbuy_qty == 0 )  &&  
		   ( st_undfut_pos_to_be.l_uisell_qty == 0 )  && ( st_undfut_pos_to_be.l_uexsell_qty == 0 ) 
		 )
	{
		ptr_st_pstn_actn->c_mtm_flag = NO_OPEN_ORDERS;
	}
	else if ( c_mtm_flag == UNDER_MTM )
	{
		ptr_st_pstn_actn->c_mtm_flag = FOR_REMARKS_ENTRY;
	}
	
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"ptr_st_pstn_actn->c_mtm_flag = :%c:",ptr_st_pstn_actn->c_mtm_flag);
 		fn_userlog ( c_ServiceName,"*********************** END fn_spnupd_clsoutpos *************************");
	}
  return 0;
}

int fn_call_spnactn_clsoutgrp1( char *c_ServiceName,
													char *c_pipe_id,
											    struct st_pstn_actn *ptr_st_pstn_actn,
                  		    struct st_fus_undrlyng_pstn *ptr_st_undfut_pos_crrnt,
                  				struct st_fus_undrlyng_pstn *ptr_st_undfut_pos_to_be,
                  	 			struct st_err_msg *ptr_st_err_msg)
{
  int i_returncode;
	int i_cntrct_cnt = 0;   /*** Ver 1.1 ***/

	double d_balance_amt = 0.0;
  double d_ltp         = 0.0;
  double d_spn_mrgn1	 = 0.0;
  double d_spn_mrgn2   = 0.0;
  double d_nov1				 = 0.0;
  double d_nov2				 = 0.0;
  double d_total_mrgn1 = 0.0;
  double d_total_mrgn2 = 0.0;
  double d_diff_mrgn	 = 0.0;
  double d_diff_pl		 = 0.0;
	double d_cntrct_pl	=	0.0;
	double d_obli_pl		= 0.0;
	double d_clsng_prc  = 0.0;

	long  l_max_opn_qty	= 0;
  long  l_min_opn_qty	= 0;
	/*** long	l_strike_prc	= 0;  -- Ver 1.1 ***/
	long	l_cntr				=	0;
  long  l_length1			= 0;
  long  l_length2			=	0;
	long  l_prtfl_seq1	= 0;
  long  l_prtfl_seq2	= 0;
  long  li_len_tobuf	= 0;
	long	l_temp_qty		= 0;
	

	char *null_ptr  = 0;
  char c_mrgn_indctr[3];
  char c_mtch_accnt1[11];
  char c_mtch_accnt2[11];
  char c_spn_mrgn1[20];
  char c_spn_mrgn2[20];
  char c_nov1[20];
  char c_nov2[20];
  char c_total_mrgn1[20];
  char c_total_mrgn2[20];
	char c_narration_id[4];
  char c_dr_without_lmt_flg;
	char c_reason_cd [ 2000 ];	
  char c_expry_dt[10];
  char c_inp_strng1[ 16000 ];		/*** changed from 8000 to 16000 in Ver 1.6 ***/
	char c_inp_strng11[ 16000 ];	/*** changed from 8000 to 16000 in Ver 1.6 ***/
  char c_inp_strng2[ 16000 ];		/*** changed from 8000 to 16000 in Ver 1.6 ***/
	char c_inp_strng22[ 16000 ];	/*** changed from 8000 to 16000 in Ver 1.6 ***/
  char c_inp_strng[ 16000 ];
  char c_op_strng[ 16000 ];
  char c_op_strng1[ 16000 ];
  char c_op_strng2[ 16000 ];
  char c_seq_num1[12000];
  char c_seq_num2[12000];
  char c_xchng_cd1[4];    /**** Ver 1.2 ****/
  char c_xchng_cd2[4];    /**** Ver 1.2 ****/

 	double d_mltplr				=	0.0;	/*** 20-Oct-2011 ***/
	int i_expsr_rtrn = 0;	/*** 20-Oct-2011 ***/
	double d_expsr_mrgn = 0.0; /*** 20-Oct-2011 ***/
	double d_min_expsr_mrgn = 0.0;	 /*** 20-Oct-2011 ***/
	double d_expsr				=	0.0; /*** 20-Oct-2011 ***/
	double d_min_expsr		=	0.0; /*** 20-Oct-2011 ***/
	long	l_basket_id = 0;	/*** 20-Oct-2011 ***/
  double  d_upd_amount = 0.0;							/*** 08-Dec-2011 ***/
	double d_strike_prc = 0.0;    /*** Ver 1.1 ***/

/*** Ver 1.5 starts ***/ 
  double d_exist_mrgn = 0.0;
  double d_var_mrgn = 0.0;
  double d_extrm_lss_mrgn = 0.0;
  double d_ISec_buff_mrgn_prcnt = 0.0;
  double d_dlvry_min_mrgn_prcnt = 0.0;
  double d_new_delvry_mrgn_val = 0.0;
  double d_cntrct_val = 0.0;
  char   c_settlement_flag = '\0';
  int    i_cnt = 0;
	char   c_dlvrmtm_flg = 'O';
/*** Ver 1.5 ends ***/

  /*** Ver 1.7  Starts Here ***/
  int    i_ret_val=0;

  double d_spn_bmrgn1=0;
  double d_bnov1=0;
  double d_total_bmrgn1=0;

  double d_spn_bmrgn2=0;
  double d_bnov2=0;
  double d_total_bmrgn2=0;

  double d_spn_bmrgn=0;
  double d_bnov=0;
  double d_total_bmrgn=0;
  /*** Ver 1.7 Ends here ***/
	char  c_temp_ref_rmrks[133] = "\0";			/*** 08-Dec-2011 ***/
	char c_strk_prc[20];       /*** Ver 1.1 ***/


	FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;
	
	EXEC SQL BEGIN DECLARE SECTION;
    sql_cursor     sys_cursor;             
		char	sql_cln_mtch_accnt[11];
		char	sql_xchng_cd[4];
		char	sql_undrlyng[7];
    varchar c_exp_dt[LEN_DATE];
		varchar c_trd_dt[12];								
		long int li_und_close_prc;
		varchar c_semmapval [20];

		/*** Current contract level positions of other contracts in the same  underlying ***/
    struct st_fcp_cntrct_pstn st_cntpos_crrnt;
		
		/*** Copy of contract level position on which action is to be done taken before applying the action ***/
    struct st_fcp_cntrct_pstn st_cntpos_old;

		/*** Contract level position on which action is to be done ***/
    struct st_fcp_cntrct_pstn st_cntpos_md_rc;

  EXEC SQL END DECLARE SECTION;

	d_undrlyng_pl = 0.0;
	d_obli_pl = 0.0;

	/*** ptr_fml_Ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);   Ver 1.1 Commented ***/
	ptr_fml_Ibuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN*10); /*** Added in ver 1.1 for increase buffer size ***/

  if ( ptr_fml_Ibuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31045", TPMSG, ptr_st_err_msg->c_err_msg);
    return -1;
  }

  ptr_fml_Obuf = (FBFR32*)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

	if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog(c_ServiceName, "S31050", TPMSG, ptr_st_err_msg->c_err_msg);
    tpfree((char *)ptr_fml_Ibuf);
    return -1;
  }

	strcpy( sql_cln_mtch_accnt,ptr_st_pstn_actn->c_cln_mtch_accnt);
	strcpy( sql_xchng_cd,ptr_st_pstn_actn->c_xchng_cd);
	strcpy( sql_undrlyng,ptr_st_pstn_actn->c_undrlyng);

	/** This bit of code down below will fetch all the contract level **/
	/** positions. Then it will find the contract on which the input  **/
	/** action is to be performed and then perform it. It then summs  **/
	/** up all the contract level postion to arrive at a consolidated **/
	/** underlying level position. It then recalculates the margin.   **/
	/** This bit of code need not be performed for actions which do   **/
	/** not involve a change in postion                               **/

	if(DEBUG_MSG_LVL_3)
	{
	 	fn_userlog ( c_ServiceName,"***********************START fn_call_spnactn_clsoutgrp1*************************");
		fn_userlog ( c_ServiceName, "Building new underlying position" );
	}

	EXEC  SQL
    SELECT  SPN_PRTFL1_SEQ.nextval
    INTO    :l_prtfl_seq1
    FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31055",SQLMSG, ptr_st_err_msg->c_err_msg);
    tpfree((char *)ptr_fml_Ibuf);
    tpfree((char *)ptr_fml_Obuf);
    return  -1;
  }

  EXEC  SQL
    SELECT  SPN_PRTFL1_SEQ.nextval
    INTO    :l_prtfl_seq2
    FROM    DUAL;

  if ( SQLCODE  !=  0 )
  {
    fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31060",SQLMSG, ptr_st_err_msg->c_err_msg);
    tpfree((char *)ptr_fml_Ibuf);
    tpfree((char *)ptr_fml_Obuf);
		return  -1;
  }

	/*** Ver 1.1 starts here ***/
	MEMSET(c_inp_strng);
	MEMSET(c_inp_strng1);
	MEMSET(c_inp_strng2);
	MEMSET(c_inp_strng11);
	MEMSET(c_inp_strng22);
	/*** Ver 1.1 Ends here ***/

  strcpy(c_inp_strng1,"1^");
  strcpy(c_inp_strng2,"|");
 
  /**** Ver 1.2 Starts Here *****/

  if( strcmp(sql_xchng_cd,"NFO") == 0 )
  {
   strcat( c_inp_strng1 ,"NSE^");
  }
  else
  {
   strcat( c_inp_strng1 ,"BSE^");
  }
  /**** Ver 1.2 Ends Here ******/

  sprintf(c_seq_num1,"%ld",l_prtfl_seq1);
  sprintf(c_seq_num2,"%ld",l_prtfl_seq2);

  strcat( c_inp_strng1 , c_seq_num1 );
  strcat( c_inp_strng2 , c_seq_num2 );

  strcat(c_inp_strng1,"^");
  strcat(c_inp_strng2,"^");

	/*** 20-Oct-2011 ***/
	 EXEC SQL
   	SELECT  FCB_UNDRLYNG_BSKT_ID
   	INTO    :l_basket_id
   	FROM    FCB_FO_CLN_BSKT_ALLTD
   	WHERE   FCB_CLN_LVL = ( SELECT  CLM_CLNT_LVL
                            FROM    CLM_CLNT_MSTR
                            WHERE   CLM_MTCH_ACCNT = :sql_cln_mtch_accnt);
  if ( SQLCODE != 0 )
  {
		fn_userlog(c_ServiceName,"Error While Fetching  Sequence Number 1.");
    fn_errlog(c_ServiceName,"S31065",SQLMSG, c_err_msg);
    tpfree((char *)ptr_fml_Ibuf);
    tpfree((char *)ptr_fml_Obuf);
		return  -1;
  }
	/*** 20-Oct-2011 ***/

	/** Prepare a list of contracts from contract position table **/
	EXEC SQL ALLOCATE :sys_cursor;

	EXEC SQL EXECUTE
		BEGIN
			 OPEN :sys_cursor FOR
				SELECT		FCP_CLM_MTCH_ACCNT,
									FCP_XCHNG_CD,
									FCP_PRDCT_TYP,
									FCP_INDSTK,
									FCP_UNDRLYNG,
									TO_CHAR (FCP_EXPRY_DT,'DD-Mon-YYYY'),
									FCP_EXER_TYP,
									FCP_STRK_PRC,
									FCP_OPT_TYP,
									FCP_IBUY_QTY,
									FCP_IBUY_ORD_VAL,
									FCP_ISELL_QTY,
									FCP_ISELL_ORD_VAL,
									FCP_EXBUY_QTY,
									FCP_EXBUY_ORD_VAL,
									FCP_EXSELL_QTY,
									FCP_EXSELL_ORD_VAL,
									FCP_BUY_EXCTD_QTY,
									FCP_SELL_EXCTD_QTY,
									FCP_OPNPSTN_FLW,
									FCP_OPNPSTN_QTY,
									FCP_OPNPSTN_VAL,
									FCP_MTM_OPN_VAl,
									NVL(FCP_MTM_FLG,'O')	/*** Ver 1.5 ***/
				FROM			FCP_FO_SPN_CNTRCT_PSTN
				WHERE			FCP_CLM_MTCH_ACCNT = :sql_cln_mtch_accnt
				AND				FCP_XCHNG_CD       = :sql_xchng_cd
				AND				FCP_UNDRLYNG       = :sql_undrlyng
				AND       ( FCP_IBUY_QTY 		<> 0     	OR     /*** Ver 1.1 ***/
                    FCP_ISELL_QTY 	<> 0    	OR
                    FCP_EXBUY_QTY 	<> 0    	OR
                    FCP_EXSELL_QTY 	<> 0   		OR
                    FCP_OPNPSTN_QTY <> 0  		OR
                    FCP_OPT_PREMIUM <> 0 
									)
				ORDER BY	FCP_EXPRY_DT asc;
		END;
	END-EXEC;

 	if ( SQLCODE != 0 )
  {
   	EXEC SQL FREE :sys_cursor;
    tpfree((char *)ptr_fml_Ibuf);
    tpfree((char *)ptr_fml_Obuf);
		fn_errlog ( c_ServiceName, "S31070", SQLMSG, ptr_st_err_msg->c_err_msg );
   	return -1;
  }

	/** Fetch one contract at a time from the list. If the fetched  **/
	/** contract is the one we need to apply the change apply it.   **/
	/** Else simply add the contract to  underlying level position  **/

	 while ( 1 )
  {
 		  d_expsr_mrgn = 0.0;	/*** 20-Oct-2011 ***/
		  d_min_expsr_mrgn = 0.0;	/*** 20-Oct-2011 ***/

			EXEC SQL 	FETCH   :sys_cursor
					INTO		:st_cntpos_crrnt.c_cln_mtch_accnt,
									:st_cntpos_crrnt.c_xchng_cd,
									:st_cntpos_crrnt.c_prd_typ,
									:st_cntpos_crrnt.c_ctgry_indstk,
									:st_cntpos_crrnt.c_undrlyng,
									:c_exp_dt,
									:st_cntpos_crrnt.c_exer_typ,
									:st_cntpos_crrnt.l_strike_prc,
									:st_cntpos_crrnt.c_opt_typ,
									:st_cntpos_crrnt.l_ibuy_qty,
									:st_cntpos_crrnt.d_ibuy_ord_val,
									:st_cntpos_crrnt.l_isell_qty,
									:st_cntpos_crrnt.d_isell_ord_val,
									:st_cntpos_crrnt.l_exbuy_qty,
									:st_cntpos_crrnt.d_exbuy_ord_val,
									:st_cntpos_crrnt.l_exsell_qty,
									:st_cntpos_crrnt.d_exsell_ord_val,
									:st_cntpos_crrnt.l_buy_exctd_qty,
									:st_cntpos_crrnt.l_sell_exctd_qty,
									:st_cntpos_crrnt.c_opnpstn_flw,
									:st_cntpos_crrnt.l_opnpstn_qty,
									:st_cntpos_crrnt.d_opnpstn_val,
									:st_cntpos_crrnt.d_mtm_opn_val,
									:c_dlvrmtm_flg;								/*** Ver 1.5 ***/
			
		  if ( SQLCODE != 0 )
		  {
				 if ( SQLCODE == NO_DATA_FOUND )
				 {
					break;
				 }
				
				 EXEC SQL CLOSE :sys_cursor;
				 EXEC SQL FREE :sys_cursor;
				 tpfree((char *)ptr_fml_Ibuf);
				 tpfree((char *)ptr_fml_Obuf);
				 fn_errlog ( c_ServiceName, "S31075", SQLMSG, ptr_st_err_msg->c_err_msg );
				 return -1;
		  }

			d_cntrct_pl = 0.0;

			/**** Ver 1.5 Started ****/
			
			if (DEBUG_MSG_LVL_3)
			{
				fn_userlog ( c_ServiceName, "Kiran fetching MTM flag is :%c:",c_dlvrmtm_flg);
      	fn_userlog (c_ServiceName, "user id is :%s:",ptr_st_pstn_actn->c_user_id);
      	fn_userlog (c_ServiceName, "session id is :%ld:",ptr_st_pstn_actn->l_session_id);
			}
	
			 if ( ( c_dlvrmtm_flg == UNDER_PHYDLVRY_MTM ) && ( strcmp ( ptr_st_pstn_actn->c_user_id,"system" ) != 0  ) && ( ptr_st_pstn_actn->l_session_id != 0 ) )
      {
    		fn_errlog(c_ServiceName, "B28009", DEFMSG, c_err_msg );
    		fn_userlog ( c_ServiceName, "ERROR..." );
    		return -7;
  		}

		 /***** Ver 1.5 ****/		

			i_cntrct_cnt++;             /*** Ver 1.1 ***/

			SETNULL( c_exp_dt );
			strcpy ( st_cntpos_crrnt.c_expry_dt, (char *) c_exp_dt.arr );
			rtrim(st_cntpos_crrnt.c_xchng_cd);
			rtrim(st_cntpos_crrnt.c_undrlyng);
			rtrim(st_cntpos_crrnt.c_expry_dt);

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog ( c_ServiceName, "**************************FETCHED CONTRACT****************");
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.c_cln_mtch_accnt :%s:", st_cntpos_crrnt.c_cln_mtch_accnt );
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.c_xchng_cd :%s:", st_cntpos_crrnt.c_xchng_cd );
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.c_prd_typ :%c:", st_cntpos_crrnt.c_prd_typ );
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.c_ctgry_indstk :%c:", st_cntpos_crrnt.c_ctgry_indstk );
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.c_undrlyng :%s:", st_cntpos_crrnt.c_undrlyng );
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.c_exer_typ :%c:", st_cntpos_crrnt.c_exer_typ );
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.l_strike_prc :%ld:", st_cntpos_crrnt.l_strike_prc );
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.c_opt_typ :%c:", st_cntpos_crrnt.c_opt_typ );
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.c_expry_dt :%s:", st_cntpos_crrnt.c_expry_dt );
				fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_exp_dt.arr );
				fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntpos_crrnt.l_buy_exctd_qty );
				fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntpos_crrnt.l_opnpstn_qty );
				fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntpos_crrnt.d_opnpstn_val );
				fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntpos_crrnt.d_mtm_opn_val );
				fn_userlog ( c_ServiceName, "Exercise qty			 :%ld:", st_cntpos_crrnt.l_exrc_qty );

				fn_userlog ( c_ServiceName, "************************************************************");

				fn_userlog ( c_ServiceName, "**************************** CLOSE OUT RECORD ************************");
				fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->c_cln_mtch_accnt :%s:", ptr_st_pstn_actn->c_cln_mtch_accnt );
				fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->c_xchng_cd :%s:", ptr_st_pstn_actn->c_xchng_cd );
				fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->c_prd_typ :%c:", ptr_st_pstn_actn->c_prd_typ );
				fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->c_undrlyng :%s:", ptr_st_pstn_actn->c_undrlyng );
				fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->c_exrc_typ :%c:", ptr_st_pstn_actn->c_exrc_typ );
				fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->l_strike_prc :%ld:", ptr_st_pstn_actn->l_strike_prc );
				fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->c_opt_typ :%c:", ptr_st_pstn_actn->c_opt_typ );
				fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->c_expry_dt :%s:", ptr_st_pstn_actn->c_expry_dt );
				fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->l_actn_typ  :%ld:",ptr_st_pstn_actn->l_actn_typ );
				fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->l_exec_qty  :%ld:",ptr_st_pstn_actn->l_exec_qty );	
				fn_userlog ( c_ServiceName, "*********************************************************************");
			} 

			if( (strcmp(st_cntpos_crrnt.c_xchng_cd, ptr_st_pstn_actn->c_xchng_cd) == 0 ) &&
					(st_cntpos_crrnt.c_prd_typ == ptr_st_pstn_actn->c_prd_typ) && 
			    (strcmp(st_cntpos_crrnt.c_undrlyng,	ptr_st_pstn_actn->c_undrlyng) == 0 ) &&
					(strcasecmp(st_cntpos_crrnt.c_expry_dt,	ptr_st_pstn_actn->c_expry_dt) == 0 ) &&
					(st_cntpos_crrnt.c_exer_typ == ptr_st_pstn_actn->c_exrc_typ) && 
					(st_cntpos_crrnt.c_opt_typ == ptr_st_pstn_actn->c_opt_typ) && 
					(st_cntpos_crrnt.l_strike_prc == ptr_st_pstn_actn->l_strike_prc) )
			{
				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog ( c_ServiceName, "*************INSIDE MATCH FOUND************");
				}

	 			memcpy ( &st_cntpos_old, &st_cntpos_crrnt, sizeof( st_cntpos_old ) );

				i_returncode =	fn_apply_spncnt_clsoutactn (	c_ServiceName,
																								ptr_st_pstn_actn, 
                            										&st_cntpos_crrnt,
                        												ptr_st_err_msg );
  			if ( i_returncode == -1 )
  			{
					 EXEC SQL CLOSE :sys_cursor;
					 EXEC SQL FREE :sys_cursor;
			     tpfree((char *)ptr_fml_Ibuf);
	 		     tpfree((char *)ptr_fml_Obuf);
					 fn_errlog ( c_ServiceName, "S31080", SQLMSG, ptr_st_err_msg->c_err_msg );
	  			 return -1;
  			}
				
				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog( c_ServiceName, " ptr_st_pstn_actn->c_trnsctn_flw :%c:", ptr_st_pstn_actn->c_trnsctn_flw );
					fn_userlog( c_ServiceName, " ptr_st_pstn_actn->l_orgnl_qty :%ld:", ptr_st_pstn_actn->l_orgnl_qty );
				}

				memcpy ( &st_cntpos_md_rc, &st_cntpos_crrnt, sizeof( st_cntpos_md_rc ) );

				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog ( c_ServiceName, "st_cntpos_crrnt.l_opnpstn_qty  :%ld:",st_cntpos_crrnt.l_opnpstn_qty );
					fn_userlog ( c_ServiceName, "st_cntpos_crrnt.c_opnpstn_flw  :%c:",st_cntpos_crrnt.c_opnpstn_flw );

					fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_opnpstn_qty  :%ld:",st_cntpos_md_rc.l_opnpstn_qty );
					fn_userlog ( c_ServiceName, "st_cntpos_md_rc.c_opnpstn_flw  :%c:",st_cntpos_md_rc.c_opnpstn_flw );
				}
			} 

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog ( c_ServiceName, "************BEFORE fn_sum_spnpos************");
				fn_userlog ( c_ServiceName, "ptr_st_undfut_pos_to_be->l_uopnpstn_qty IS :%ld:",ptr_st_undfut_pos_to_be->l_uopnpstn_qty);
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.l_opnpstn_qty IS :%ld:",st_cntpos_crrnt.l_opnpstn_qty);
				fn_userlog ( c_ServiceName, "********************************************");
			}

			fn_sum_spnpos ( st_cntpos_crrnt, ptr_st_undfut_pos_to_be );

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog ( c_ServiceName, "*****AFTER fn_sum_spnpos********");
				fn_userlog ( c_ServiceName, "ptr_st_undfut_pos_to_be->l_uopnpstn_qty IS :%ld:",ptr_st_undfut_pos_to_be->l_uopnpstn_qty);
				fn_userlog ( c_ServiceName, "st_cntpos_crrnt.l_opnpstn_qty IS :%ld:",st_cntpos_crrnt.l_opnpstn_qty);
				fn_userlog ( c_ServiceName, "********************************************");

				fn_userlog ( c_ServiceName, "AFTER fn_sum_spnpos  st_cntpos_crrnt.d_mtm_opn_val    :%lf:", st_cntpos_crrnt.d_mtm_opn_val );
				fn_userlog ( c_ServiceName, "AFTER fn_sum_spnpos st_cntpos_md_rc.d_mtm_opn_val    :%lf:", st_cntpos_md_rc.d_mtm_opn_val );
				fn_userlog ( c_ServiceName, "AFTER fn_sum_spnpos st_cntpos_crrnt.d_opnpstn_val    :%lf:", st_cntpos_crrnt.d_opnpstn_val );
				fn_userlog ( c_ServiceName, "AFTER fn_sum_spnpos ptr_st_undfut_pos_to_be->d_uopnpstn_val :%lf:", ptr_st_undfut_pos_to_be->d_uopnpstn_val );
  			fn_userlog ( c_ServiceName, "AFTER fn_sum_spnpos ptr_st_undfut_pos_to_be->d_umtm_opn_val :%lf:", ptr_st_undfut_pos_to_be->d_umtm_opn_val );
  			fn_userlog ( c_ServiceName, "AFTER fn_sum_spnpos ptr_st_undfut_pos_to_be->l_ubuy_exctd_qty :%lf:", ptr_st_undfut_pos_to_be->l_ubuy_exctd_qty );
  			fn_userlog ( c_ServiceName, "AFTER fn_sum_spnpos ptr_st_undfut_pos_to_be->l_usell_exctd_qty :%lf:", ptr_st_undfut_pos_to_be->l_usell_exctd_qty );


				fn_userlog(c_ServiceName,"SPAN	-	st_cntpos_crrnt.l_opnpstn_qty Is :%ld:",st_cntpos_crrnt.l_opnpstn_qty);
			}

			/******* Commented By Mahesh 
      l_max_opn_qty = st_cntpos_crrnt.l_opnpstn_qty + st_cntpos_crrnt.l_ibuy_qty ;
      l_min_opn_qty = st_cntpos_crrnt.l_opnpstn_qty + st_cntpos_crrnt.l_isell_qty ;
			************************************/

			l_max_opn_qty = st_cntpos_crrnt.l_opnpstn_qty  +  fn_maxl(st_cntpos_crrnt.l_ibuy_qty,st_cntpos_crrnt.l_exbuy_qty) ;
			l_min_opn_qty = st_cntpos_crrnt.l_opnpstn_qty  +  fn_maxl(abs(st_cntpos_crrnt.l_isell_qty),abs(st_cntpos_crrnt.l_exsell_qty)) * -1  ;


		  if ( ptr_st_pstn_actn -> c_prd_typ ==  'O' )
			{
				l_temp_qty  = fn_minl ( l_max_opn_qty , l_min_opn_qty );
				l_max_opn_qty = l_temp_qty  ;
				l_min_opn_qty = l_temp_qty  ;
			}

			if(DEBUG_MSG_LVL_3)
			{
		  	fn_userlog(c_ServiceName,"l_max_opn_qty	Is :%ld:",l_max_opn_qty);
		  	fn_userlog(c_ServiceName,"l_min_opn_qty	Is :%ld:",l_min_opn_qty);
			}
			/*** 20-Oct-2011 ***/
			i_expsr_rtrn	=	fn_cal_expsr	(	c_ServiceName,
																			st_cntpos_crrnt,
																			l_basket_id,
																			&d_expsr_mrgn,
																			&d_min_expsr_mrgn,
																			&d_mltplr,
																			c_err_msg
																		);

			if ( i_expsr_rtrn != 0 )
			{
				 fn_errlog(c_ServiceName, "S31085", LIBMSG, c_err_msg );
         EXEC SQL CLOSE :sys_cursor;
         tpfree((char *)ptr_fml_Obuf);
         tpfree((char *)ptr_fml_Ibuf);
         return -1;
			}
			/*** 20-Oct-2011 ***/

			EXEC SQL
        SELECT  NVL(FTQ_LST_TRD_PRC,0),			/*** NVL added in Ver 1.1 ***/
								NVL(FTQ_CLS_PRC,0)					/*** NVL added in Ver 1.1 ***/
        INTO    :d_ltp,
								:d_clsng_prc
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD	= :st_cntpos_crrnt.c_xchng_cd
				AND			FTQ_PRDCT_TYP = :st_cntpos_crrnt.c_prd_typ
        AND     FTQ_UNDRLYNG  = :st_cntpos_crrnt.c_undrlyng
        AND     FTQ_EXPRY_DT  = :c_exp_dt
        AND     FTQ_EXER_TYP  = :st_cntpos_crrnt.c_exer_typ
        AND     FTQ_OPT_TYP   = :st_cntpos_crrnt.c_opt_typ
        AND     FTQ_STRK_PRC  = :st_cntpos_crrnt.l_strike_prc;

      if(SQLCODE  !=  0 )
      {
				 EXEC SQL CLOSE :sys_cursor;
				 EXEC SQL FREE :sys_cursor;
		     tpfree((char *)ptr_fml_Ibuf);
		     tpfree((char *)ptr_fml_Obuf);
	       fn_errlog ( c_ServiceName, "S31090", SQLMSG, ptr_st_err_msg->c_err_msg );
		     return -1;
      }

			/***	notional Profit / Loss Calculation	Contractwise	***/
		
			if(DEBUG_MSG_LVL_3)
			{	
				fn_userlog(c_ServiceName,"************NOTIONAL PROFIT LOSS CONTRACTWISE***********");
		  	fn_userlog(c_ServiceName,"st_cntpos_crrnt.l_opnpstn_qty  Is :%ld:",st_cntpos_crrnt.l_opnpstn_qty);
		  	fn_userlog(c_ServiceName,"st_cntpos_crrnt.d_opnpstn_val  Is :%lf:",st_cntpos_crrnt.d_opnpstn_val);
		  	fn_userlog(c_ServiceName,"d_ltp  Is :%lf:",d_ltp);
		  	fn_userlog(c_ServiceName,"d_clsng_prc  Is :%lf:",d_clsng_prc);
			}
	
		  if(st_cntpos_crrnt.c_prd_typ == 'F')
			{
				if ( st_cntpos_crrnt.l_opnpstn_qty != 0 )
				{
					if( st_cntpos_crrnt.l_opnpstn_qty  > 0 )
					{
						d_cntrct_pl = ( d_clsng_prc * (double) st_cntpos_crrnt.l_opnpstn_qty ) - st_cntpos_crrnt.d_opnpstn_val;
					}
					else if ( st_cntpos_crrnt.l_opnpstn_qty < 0 )
					{
						d_cntrct_pl = fabs(st_cntpos_crrnt.d_opnpstn_val) - ( d_clsng_prc * (double)abs( st_cntpos_crrnt.l_opnpstn_qty) );
					}
				}
			}

			if(DEBUG_MSG_LVL_3)
			{
		  	fn_userlog(c_ServiceName,"PROFIT LOSS CONTRACT : d_cntrct_pl  Is :%lf:",d_cntrct_pl);
				fn_userlog(c_ServiceName,"*******************************************************");
			}

			d_ltp	=	d_ltp	/	100;
		
			if(DEBUG_MSG_LVL_3)
			{
		  	fn_userlog(c_ServiceName,"d_ltp  Is :%lf:",d_ltp);
			}

			EXEC SQL
			SELECT	SEM_MAP_VL
			INTO		:c_semmapval
			FROM		SEM_STCK_MAP
			WHERE		SEM_STCK_CD	=	:st_cntpos_crrnt.c_undrlyng
			/*** AND			SEM_ENTTY		=	3; *** Ver 1.2 ***/
      AND   SEM_ENTTY   = DECODE(:st_cntpos_crrnt.c_xchng_cd,'NFO',3,14); /*** Ver 1.2 ***/

		  if ( SQLCODE  !=  0 )
      {
       fn_errlog ( c_ServiceName, "S31095", SQLMSG, ptr_st_err_msg->c_err_msg );
       EXEC SQL CLOSE :sys_cursor;
 		   EXEC SQL FREE :sys_cursor;
       tpfree((char *)ptr_fml_Ibuf);
       tpfree((char *)ptr_fml_Obuf);
       return -1;
      }

			SETNULL(c_semmapval);
			if(DEBUG_MSG_LVL_3)
			{
		  	fn_userlog(c_ServiceName,"c_semmapval  Is :%s:",c_semmapval.arr);
			}
		  EXEC SQL
      	SELECT to_char(to_date(:st_cntpos_crrnt.c_expry_dt,'DD-Mon-YYYY'),'dd-Mon-YY')
      	INTO  :c_expry_dt
      	FROM  DUAL;

    	if ( SQLCODE  !=  0 )
    	{
				 EXEC SQL CLOSE :sys_cursor;
				 EXEC SQL FREE :sys_cursor;
				 tpfree((char *)ptr_fml_Ibuf);
				 tpfree((char *)ptr_fml_Obuf);
				 fn_errlog ( c_ServiceName, "S31100", SQLMSG, ptr_st_err_msg->c_err_msg );
      	 return -1;
    	}

			/*** l_strike_prc	=	st_cntpos_crrnt.l_strike_prc / 100	;   *** Commented in Ver 1.1 ***/
		
			/*** Ver 1.1 starts here ***/
			d_strike_prc = 0.0;
      d_strike_prc  = (double) st_cntpos_crrnt.l_strike_prc / 100.00  ;
      sprintf(c_strk_prc,"%lf",d_strike_prc);

      fn_spn_rtrim(c_strk_prc,'0');
      fn_spn_rtrim(c_strk_prc,'.');

      /*** Ver 1.1 ends here ***/

			if	(	l_cntr	==	0	)
			{
      	if(st_cntpos_crrnt.c_prd_typ  ==  'F')
      	{
        	sprintf(c_inp_strng11,"%s^%s~%c:%s^%ld^%lf",st_cntpos_crrnt.c_cln_mtch_accnt,c_semmapval.arr,st_cntpos_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);
					/*fn_userlog(c_ServiceName,"c_inp_strng11<%s>",c_inp_strng11);*/

     	 		strcat(c_inp_strng1,c_inp_strng11);

      		sprintf(c_inp_strng22,"%s^%s~%c:%s^%ld^%lf",st_cntpos_crrnt.c_cln_mtch_accnt,c_semmapval.arr,st_cntpos_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);
					/*fn_userlog(c_ServiceName,"c_inp_strng22<%s>",c_inp_strng22);*/

      		strcat(c_inp_strng2,c_inp_strng22);

      	}
      	else
      	{
        	sprintf(c_inp_strng11,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntpos_crrnt.c_cln_mtch_accnt,c_semmapval.arr,st_cntpos_crrnt.c_prd_typ,c_expry_dt,st_cntpos_crrnt.c_opt_typ,st_cntpos_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp);
					/*fn_userlog(c_ServiceName,"c_inp_strng11<%s>",c_inp_strng11);*/

        	strcat(c_inp_strng1,c_inp_strng11);

        	sprintf(c_inp_strng22,"%s^%s~%c:%s:%c%c:%s^%ld^%lf",st_cntpos_crrnt.c_cln_mtch_accnt,c_semmapval.arr,st_cntpos_crrnt.c_prd_typ,c_expry_dt,st_cntpos_crrnt.c_opt_typ,st_cntpos_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp);
					/*fn_userlog(c_ServiceName,"c_inp_strng22<%s>",c_inp_strng22);*/

        	strcat(c_inp_strng2,c_inp_strng22);
      	}
			}
			else
			{
				if(st_cntpos_crrnt.c_prd_typ  ==  'F')
        {
          sprintf(c_inp_strng11,"%s~%c:%s^%ld^%lf",c_semmapval.arr,st_cntpos_crrnt.c_prd_typ,c_expry_dt,l_max_opn_qty,d_ltp);
					/*fn_userlog(c_ServiceName,"c_inp_strng11<%s>",c_inp_strng11);*/

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s~%c:%s^%ld^%lf",c_semmapval.arr,st_cntpos_crrnt.c_prd_typ,c_expry_dt,l_min_opn_qty,d_ltp);
					/*fn_userlog(c_ServiceName,"c_inp_strng22<%s>",c_inp_strng22);*/

          strcat(c_inp_strng2,c_inp_strng22);

        }
        else
        {
          sprintf(c_inp_strng11,"%s~%c:%s:%c%c:%s^%ld^%lf",c_semmapval.arr,st_cntpos_crrnt.c_prd_typ,c_expry_dt,st_cntpos_crrnt.c_opt_typ,st_cntpos_crrnt.c_exer_typ,c_strk_prc,l_max_opn_qty,d_ltp);
					/*fn_userlog(c_ServiceName,"c_inp_strng11<%s>",c_inp_strng11);*/

          strcat(c_inp_strng1,c_inp_strng11);

          sprintf(c_inp_strng22,"%s~%c:%s:%c%c:%s^%ld^%lf",c_semmapval.arr,st_cntpos_crrnt.c_prd_typ,c_expry_dt,st_cntpos_crrnt.c_opt_typ,st_cntpos_crrnt.c_exer_typ,c_strk_prc,l_min_opn_qty,d_ltp);
					/*fn_userlog(c_ServiceName,"c_inp_strng22<%s>",c_inp_strng22);*/

          strcat(c_inp_strng2,c_inp_strng22);
        }
			}

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog ( c_ServiceName, "Expiry date       :%s:", c_exp_dt.arr );
        fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", st_cntpos_crrnt.l_buy_exctd_qty );
        fn_userlog ( c_ServiceName, "Open qty          :%ld:", st_cntpos_crrnt.l_opnpstn_qty );
        fn_userlog ( c_ServiceName, "Original open val :%lf:", st_cntpos_crrnt.d_opnpstn_val );
        fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", st_cntpos_crrnt.d_mtm_opn_val );
				fn_userlog ( c_ServiceName, "st_cntpos_md_rc.d_mtm_opn_val    :%lf:", st_cntpos_md_rc.d_mtm_opn_val );
				fn_userlog ( c_ServiceName, "ptr_st_undfut_pos_to_be->d_umtm_opn_val    :%lf:", ptr_st_undfut_pos_to_be->d_umtm_opn_val );
     }

    strcat(c_inp_strng1,",");
		strcat(c_inp_strng2,",");

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog ( c_ServiceName, " IN LOOP BEFORE d_undrlyng_pl :%lf:",d_undrlyng_pl );
			fn_userlog ( c_ServiceName, " IN LOOP d_cntrct_pl :%lf:",d_cntrct_pl );
		}

		l_cntr	++;
		d_undrlyng_pl	=	d_undrlyng_pl	+	d_cntrct_pl	;
		d_expsr			=	d_expsr_mrgn	+	d_expsr	;	/*** 20-Oct-2011 ***/
		d_min_expsr	=	d_min_expsr_mrgn	+	d_min_expsr	; /*** 20-Oct-2011 ***/
   
		if(DEBUG_MSG_LVL_0)
		{ 
			fn_userlog ( c_ServiceName, " IN LOOP AFTER d_undrlyng_pl :%lf:",d_undrlyng_pl );
		}
  }	

  EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;
	/* Type Casted by Mahesh for 1 paisa issue */
	d_undrlyng_pl = ( long long )d_undrlyng_pl;
  l_length1 = strlen(c_inp_strng1);

  if( c_inp_strng1[l_length1  - 1 ] == ',')
  {
    c_inp_strng1[l_length1 -1]  ='\0';
  }

	l_length2 = strlen(c_inp_strng2);

  if( c_inp_strng2[l_length2  - 1 ] == ',')
  {
    c_inp_strng2[l_length2 -1]  ='\0';

  }

	if ( st_cntpos_md_rc.l_opnpstn_qty > 0 )
	{
		st_cntpos_md_rc.c_opnpstn_flw = BUY;
	}
	else if ( st_cntpos_md_rc.l_opnpstn_qty < 0 )
	{
		st_cntpos_md_rc.c_opnpstn_flw = SELL;
	}	
  else 
  {
		st_cntpos_md_rc.c_opnpstn_flw = NEUTRAL;
  }

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_opnpstn_qty  :%ld:",st_cntpos_md_rc.l_opnpstn_qty );
		fn_userlog ( c_ServiceName, "st_cntpos_md_rc.c_opnpstn_flw  :%c:",st_cntpos_md_rc.c_opnpstn_flw );
	}

	/** Update the contract level position on which the action has been applied **/
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"UPDATE FCP");
		fn_userlog ( c_ServiceName, "st_cntpos_md_rc.l_exrc_qty  :%ld:", st_cntpos_md_rc.l_exrc_qty );
	}

	EXEC SQL
		UPDATE  FCP_FO_SPN_CNTRCT_PSTN
		SET    	FCP_BUY_EXCTD_QTY  = :st_cntpos_md_rc.l_buy_exctd_qty,
						FCP_SELL_EXCTD_QTY = :st_cntpos_md_rc.l_sell_exctd_qty,
						FCP_OPNPSTN_FLW    = :st_cntpos_md_rc.c_opnpstn_flw,
						FCP_OPNPSTN_QTY    = :st_cntpos_md_rc.l_opnpstn_qty,
						FCP_OPNPSTN_VAL    = :st_cntpos_md_rc.d_opnpstn_val,
						FCP_MTM_OPN_VAL    = :st_cntpos_md_rc.d_mtm_opn_val
		WHERE   FCP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
		AND     FCP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
		AND     FCP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
		AND     FCP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
		AND     FCP_EXPRY_DT       = to_date(:ptr_st_pstn_actn->c_expry_dt,'DD-Mon-YYYY')
		AND     FCP_EXER_TYP       = :ptr_st_pstn_actn->c_exrc_typ
		AND			FCP_OPT_TYP				 = :ptr_st_pstn_actn->c_opt_typ
		AND			FCP_STRK_PRC			 = :ptr_st_pstn_actn->l_strike_prc
    RETURNING NVL(FCP_UDLVRY_MRGN,0) INTO :d_exist_mrgn; /*** ver 1.5 ***/

	if ( SQLCODE != 0 )
	{
		fn_errlog(c_ServiceName, "S31105", SQLMSG, ptr_st_err_msg->c_err_msg );
		tpfree((char *)ptr_fml_Ibuf);
		tpfree((char *)ptr_fml_Obuf);
		return -1;
	}
	

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Calcualted underlying level position" );
		fn_userlog ( c_ServiceName, "IWTL buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_uibuy_qty );
		fn_userlog ( c_ServiceName, "IWTL buy val      :%lf:", ptr_st_undfut_pos_to_be->d_uibuy_val );
		fn_userlog ( c_ServiceName, "IWTL sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_uisell_qty );
		fn_userlog ( c_ServiceName, "IWTL sell val     :%lf:", ptr_st_undfut_pos_to_be->d_uisell_val );
		fn_userlog ( c_ServiceName, "EXCH buy qty      :%ld:", ptr_st_undfut_pos_to_be->l_uexbuy_qty );
		fn_userlog ( c_ServiceName, "EXCH buy val      :%lf:", ptr_st_undfut_pos_to_be->d_uexbuy_val );
		fn_userlog ( c_ServiceName, "EXCH sell qty     :%ld:", ptr_st_undfut_pos_to_be->l_uexsell_qty );
		fn_userlog ( c_ServiceName, "EXCH sell val     :%lf:", ptr_st_undfut_pos_to_be->d_uexsell_val );
		fn_userlog ( c_ServiceName, "Buy exctd qty     :%ld:", ptr_st_undfut_pos_to_be->l_ubuy_exctd_qty );
		fn_userlog ( c_ServiceName, "Sell exctd qty    :%ld:", ptr_st_undfut_pos_to_be->l_usell_exctd_qty );
		fn_userlog ( c_ServiceName, "Open qty          :%ld:", ptr_st_undfut_pos_to_be->l_uopnpstn_qty );
		fn_userlog ( c_ServiceName, "Original open val :%lf:", ptr_st_undfut_pos_to_be->d_uopnpstn_val );
		fn_userlog ( c_ServiceName, "MTMed open val    :%lf:", ptr_st_undfut_pos_to_be->d_umtm_opn_val );
		fn_userlog ( c_ServiceName, "Add Margin val    :%lf:", ptr_st_undfut_pos_to_be->d_add_mrgn_val );
	}

	/*** Ver 1.1 starts here ***/

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName, "i_cntrct_cnt = :%d:",i_cntrct_cnt);
  }

  if (i_cntrct_cnt > 10)
  {
  	if ( Fadd32 (ptr_fml_Ibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31110",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    MEMSET(c_inp_strng);
    strcpy(c_inp_strng,c_inp_strng1);
    strcat(c_inp_strng,"\n");

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"c_inp_strng 1 = :%s:",c_inp_strng);
    }

    if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31115",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
    }

    i_returncode  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

    if( i_returncode != 0 )
    {
      fn_errlog( c_ServiceName, "S31120",TPMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

 		if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng1,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31125",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Output String 1 Is :%s:",c_op_strng1);
    }

    /*** Ver 1.7  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31130",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 1.7  Ends here ***/

    MEMSET(c_inp_strng);

		/**** Ver 1.2 BUG bix Starts Here *****/

    if( strcmp(sql_xchng_cd,"NFO") == 0 )
    {
      strcpy( c_inp_strng ,"1^NSE^");
    }
    else
    {
        strcpy( c_inp_strng ,"1^BSE^");
    }
    /**** Ver 1.2 Ends Here ******/

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"Initial c_inp_strng2 = :%s:",c_inp_strng2);
    }

    fn_spn_ltrim(c_inp_strng2,'|');
    /*** sprintf(c_inp_strng,"1^%s",c_inp_strng2); ** Ver 1.2 ***/
    /*** sprintf(c_inp_strng,"%s",c_inp_strng2);   ** Ver 1.2 ***/
    strcat(c_inp_strng,c_inp_strng2);              /** Ver 1.2 ***/ 
    strcat(c_inp_strng,"\n");

    if(DEBUG_MSG_LVL_5)
    {
      fn_userlog(c_ServiceName,"c_inp_strng 2 = :%s:",c_inp_strng);
    }

    if ( Fchg32 (ptr_fml_Ibuf,FFO_REMARKS,0,(char *)c_inp_strng,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31135",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
    }

    i_returncode  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

    if( i_returncode != 0 )
    {
      fn_errlog( c_ServiceName, "S31140",TPMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng2,0)  ==  -1 )
    {
      fn_errlog( c_ServiceName, "S31145",FMLMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    fn_spn_ltrim(c_op_strng2,'1');
    fn_spn_ltrim(c_op_strng2,'^');

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Output String 2 Is :%s:",c_op_strng2);
    }
  
    /*** Ver 1.7  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn2,
                                    &d_bnov2,
                                    &d_total_bmrgn2,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31150",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn2 :%lf: d_bnov2:%lf: d_total_bmrgn2:%lf:",d_spn_bmrgn2,d_bnov2,d_total_bmrgn2);
    }
    /*** Ver 1.7  Ends here ***/

  }
  else
  {
  	/*** Ver 1.1 Ends here ***/
	
		strcpy(c_inp_strng,c_inp_strng1);
  	strcat(c_inp_strng,c_inp_strng2);
  	strcat(c_inp_strng,"\n");

  	if ( Fadd32 (ptr_fml_Ibuf,FFO_PIPE_ID,(char *)c_pipe_id,0)  ==  -1 )
  	{
    	fn_errlog( c_ServiceName, "S31155",FMLMSG , ptr_st_err_msg->c_err_msg );
    	tpfree((char *)ptr_fml_Obuf);
    	tpfree((char *)ptr_fml_Ibuf);
			return -1;
  	}

  	if ( Fadd32 (ptr_fml_Ibuf,FFO_REMARKS,(char *)c_inp_strng,0)  ==  -1 )
  	{
    	fn_errlog( c_ServiceName, "S31160",FMLMSG , ptr_st_err_msg->c_err_msg );
    	tpfree((char *)ptr_fml_Obuf);
    	tpfree((char *)ptr_fml_Ibuf);
    	return -1;
  	}

		/*fn_userlog(c_ServiceName,"Input String to SFO_SPAN_MRGN =<%s>",c_inp_strng);*/
		if(DEBUG_MSG_LVL_3)
		{
  		fn_userlog(c_ServiceName,"Before Call To Service For Margin Calculation.");
		}
  	fn_cpy_ddr ( ptr_st_pstn_actn->c_rout_crt );

  	i_returncode  = tpcall("SFO_SPAN_MRGN",(char*)ptr_fml_Ibuf,0,(char **)&ptr_fml_Obuf,&li_len_tobuf,0);

  	if(i_returncode == -1)
  	{
    	fn_errlog( c_ServiceName, "S31165",TPMSG , ptr_st_err_msg->c_err_msg );
    	tpfree((char *)ptr_fml_Obuf);
    	tpfree((char *)ptr_fml_Ibuf);
    	return -1;
  	}

  	if ( Fget32 (ptr_fml_Obuf,FFO_ABT_TRG_DATA,0,(char *)c_op_strng,0)  ==  -1 )
  	{
    	fn_errlog( c_ServiceName, "S31170",FMLMSG , ptr_st_err_msg->c_err_msg );
    	tpfree((char *)ptr_fml_Obuf);
    	tpfree((char *)ptr_fml_Ibuf);
    	return -1;
  	}

		if(DEBUG_MSG_LVL_0)
		{
  		fn_userlog(c_ServiceName,"Output String Is :%s:",c_op_strng);
		}

  	strcpy(c_op_strng1,strtok(c_op_strng,"|"));
  	strcpy(c_op_strng2,strtok(null_ptr,"|"));

    /*** Ver 1.7  Starts Here ***/
    i_ret_val = fn_get_bodspan_mrgn(ptr_fml_Ibuf,
                                    i_cntrct_cnt,
                                    &d_spn_bmrgn1,
                                    &d_bnov1,
                                    &d_total_bmrgn1,
                                    c_ServiceName,
                                    c_err_msg
                                   );
    if( i_ret_val != 0 )
    {
      fn_errlog( c_ServiceName, "S31175",LIBMSG , c_err_msg );
      tpfree((char *)ptr_fml_Obuf);
      tpfree((char *)ptr_fml_Ibuf);
      return -1;
    }

    if(DEBUG_MSG_LVL_4)
    {
      fn_userlog(c_ServiceName,"d_spn_bmrgn1 :%lf: d_bnov1:%lf: d_total_bmrgn1:%lf:",d_spn_bmrgn1,d_bnov1,d_total_bmrgn1);
    }
    /*** Ver 1.7  Ends here ***/

  } /*** Ver 1.1 ***/

  strcpy(c_mrgn_indctr,strtok(c_op_strng1,"^"));
  strcpy(c_xchng_cd1,strtok(null_ptr,"^"));    /** Ver 1.2 ***/
  strcpy(c_seq_num1,strtok(null_ptr,"^"));
  strcpy(c_mtch_accnt1,strtok(null_ptr,"^"));
  strcpy(c_spn_mrgn1,strtok(null_ptr,"^"));
  strcpy(c_nov1,strtok(null_ptr,"^"));
  strcpy(c_total_mrgn1,strtok(null_ptr,"^"));

	if (i_cntrct_cnt > 10)     /*** Condition Added in ver 1.3 ***/
  {
  strcpy(c_xchng_cd2,strtok(c_op_strng2,"^"));    /** Ver 1.2 ***/
  /* strcpy(c_seq_num2,strtok(c_op_strng2,"^"));   ** Ver 1.2 ***/
  strcpy(c_seq_num2,strtok(null_ptr,"^"));        /** Ver 1.2 ***/
	}
	else
	{
		strcpy(c_seq_num2,strtok(c_op_strng2,"^"));   /*** Ver 1.3 ***/
	}
  strcpy(c_mtch_accnt2,strtok(null_ptr,"^"));
  strcpy(c_spn_mrgn2,strtok(null_ptr,"^"));
  strcpy(c_nov2,strtok(null_ptr,"^"));
	strcpy(c_total_mrgn2,strtok(null_ptr,"^"));

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName,"SPAN c_mtch_accnt1 Is :%s:",c_mtch_accnt1);
		fn_userlog(c_ServiceName,"SPAN c_xchng_cd2 Is :%s:",c_xchng_cd2); /** Ver 1.2 ***/
    fn_userlog(c_ServiceName,"SPAN c_seq_num2 Is :%s:",c_seq_num2);  /** Ver 1.2 ***/
    fn_userlog(c_ServiceName,"SPAN c_spn_mrgn2 Is :%s:",c_spn_mrgn2); /** Ver 1.2 ***/
    fn_userlog(c_ServiceName,"SPAN c_nov2 Is :%s:",c_nov2);            /** Ver 1.2 ***/
    fn_userlog(c_ServiceName,"SPAN c_total_mrgn2 Is :%s:",c_total_mrgn2); /** Ver 1.2 ***/
	}

  /*** Ver 1.7  Starts here ***/
  d_spn_bmrgn = fn_maxd(d_spn_bmrgn1,d_spn_bmrgn2) * 100;
  d_bnov      = fn_maxd(d_bnov1,d_bnov2) * 100;
  d_total_bmrgn = fn_maxd(d_total_bmrgn1,d_total_bmrgn2) * 100;
  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"d_spn_bmrgn :%lf: d_bnov :%lf: d_total_bmrgn:%lf:",d_spn_bmrgn,d_bnov,d_total_bmrgn);
  }
  /*** Ver 1.7  Ends here ***/

  d_spn_mrgn1   = atof(c_spn_mrgn1);
  d_spn_mrgn2   = atof(c_spn_mrgn2);
  d_nov1        = atof(c_nov1);
  d_nov2        = atof(c_nov2);
  d_total_mrgn1 = atof(c_total_mrgn1);
  d_total_mrgn2 = atof(c_total_mrgn2);

  st_undfut_pos_to_be.d_uspan_nenov_mrgn    = fn_maxd(d_spn_mrgn1,d_spn_mrgn2)* 100;
  st_undfut_pos_to_be.d_net_optn_val				= fn_maxd(d_nov1,d_nov2)* 100;
  st_undfut_pos_to_be.d_uspan_wenov_mrgn	  = fn_maxd(d_total_mrgn1,d_total_mrgn2)* 100;

  /*** Ver 1.7  Starts Here ***/
  st_undfut_pos_to_be.d_uspan_nenov_mrgn  = fn_maxd(st_undfut_pos_to_be.d_uspan_nenov_mrgn,d_spn_bmrgn);
  st_undfut_pos_to_be.d_net_optn_val = fn_maxd(st_undfut_pos_to_be.d_net_optn_val,d_bnov);
  st_undfut_pos_to_be.d_uspan_wenov_mrgn = fn_maxd(st_undfut_pos_to_be.d_uspan_wenov_mrgn,d_total_bmrgn);
  /*** Ver 1.7  Ends Here ***/

	d_spn_mrgn		=	st_undfut_pos_to_be.d_uspan_nenov_mrgn;
	d_nov					=	st_undfut_pos_to_be.d_net_optn_val;
	d_total_mrgn	=	st_undfut_pos_to_be.d_uspan_wenov_mrgn;
	
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Calculating margin" );
	}
	/** Calculate the margin on the new underlying position **/

	/*** 20-Oct-2011 ***/
	/*i_returncode  = fn_cal_mrgn ( c_ServiceName,
                                ptr_st_pstn_actn,
                                ptr_st_undfut_pos_to_be,
																d_prmum,
                                &d_mltplr,
                                &d_expsr,
                                &d_min_mrgn,
                                &d_intl_mrgn,
                                ptr_st_err_msg->c_err_msg
                              );*/
  
	i_returncode	=	fn_cal_mrgn ( c_ServiceName,
     		           								d_total_mrgn,
       		          							d_mltplr,
         		       								d_expsr,
																	d_min_expsr,
           		      							&d_min_mrgn,
             		    							&d_intl_mrgn,
               		  							c_err_msg
               									);
	/*** 20-Oct-2011 ***/


  if ( i_returncode !=  0 )
  {
    fn_errlog( c_ServiceName, "S31180",LIBMSG , ptr_st_err_msg->c_err_msg );
    fn_userlog(c_ServiceName,"Service Return Error.");
    tpfree((char *)ptr_fml_Obuf);
    tpfree((char *)ptr_fml_Ibuf);
    return -1 ;
  }

	if(DEBUG_MSG_LVL_0)
	{
  	fn_userlog(c_ServiceName,"SPAN  - SPAN MARGIN IS :%lf:",d_spn_mrgn);
  	fn_userlog(c_ServiceName,"SPAN  - NOV IS :%lf:",d_nov);
  	fn_userlog(c_ServiceName,"SPAN  - Total Margin  IS :%lf:",d_total_mrgn);
  	fn_userlog(c_ServiceName,"SPAN  - Exposure  IS :%lf:",d_expsr);
  	fn_userlog(c_ServiceName,"SPAN  - Min. Margin IS :%lf:",d_min_mrgn);
  	fn_userlog(c_ServiceName,"SPAN  - Initial Margin IS :%lf:",d_intl_mrgn);
	}
	/* Type Casted by Mahesh for 1 paisa issue */

	st_undfut_pos_to_be.d_multpr						=	d_mltplr			;
	st_undfut_pos_to_be.d_eba_expr_mrgn			=	( long long )d_expsr				;
	st_undfut_pos_to_be.d_span_wemult_mrgn	= ( long long )d_total_mrgn * d_mltplr  ;	
	st_undfut_pos_to_be.d_min_mrgn					=	d_min_mrgn		;
	st_undfut_pos_to_be.d_reqd_initial_mrgn	=	( long long )d_intl_mrgn		;
	st_undfut_pos_to_be.d_ntnl_pl =	d_undrlyng_pl;

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_ntnl_pl IS :%lf:",st_undfut_pos_to_be.d_ntnl_pl);
	}

	/*** Commented on 08-Dec-2011 Starts ***
  *** BLOCK / RELEASE DEFICIT INITIAL MARGIN ***
	fn_userlog ( c_ServiceName, "*********** BLOCK / RELEASE DEFICIT INITIAL MARGIN***********" );
 	strcpy( c_narration_id , MARGIN_ADJ_ON_CLOSE_OUT);
	c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT; 

	d_diff_mrgn = ptr_st_undfut_pos_crrnt->d_initial_mrgn - st_undfut_pos_to_be.d_reqd_initial_mrgn ; 


	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "ptr_st_undfut_pos_crrnt->d_initial_mrgn :%lf:", ptr_st_undfut_pos_crrnt->d_initial_mrgn );
		fn_userlog ( c_ServiceName, "ptr_st_undfut_pos_crrnt->d_reqd_initial_mrgn :%lf:", ptr_st_undfut_pos_crrnt->d_reqd_initial_mrgn );
		fn_userlog ( c_ServiceName, "st_undfut_pos_to_be.d_reqd_initial_mrgn :%lf:", st_undfut_pos_to_be.d_reqd_initial_mrgn );
		fn_userlog ( c_ServiceName, "Deficit Margin Required <DM> :%lf:", d_diff_mrgn );
	}

	if ( d_diff_mrgn != 0 )
	{
			i_returncode = fn_upd_spnlimits( c_ServiceName,
										 								ptr_st_pstn_actn,
                  	 								ptr_st_err_msg,
										 								c_narration_id,
										 								c_dr_without_lmt_flg,
										 								d_diff_mrgn,
																		&d_balance_amt);
      if ( i_returncode != 0 )
      {
				fn_errlog( c_ServiceName, "S31185",LIBMSG , c_err_msg );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf);
				return -1;
	    }
	}

	st_undfut_pos_to_be.d_initial_mrgn =	st_undfut_pos_to_be.d_reqd_initial_mrgn + d_balance_amt ;

	*** Calculate portfolio Deficit Profit Loss (Notional LOSS) & apply DEBIT_TILL_LIMIT***

	fn_userlog ( c_ServiceName,"st_cntpos_crrnt.l_opnpstn_qty=:%ld:",st_cntpos_crrnt.l_opnpstn_qty );
	fn_userlog ( c_ServiceName,"d_undrlyng_pl=:%lf:",d_undrlyng_pl );
	fn_userlog ( c_ServiceName,"st_undfut_pos_to_be.d_blckd_pl=:%lf:",st_undfut_pos_to_be.d_blckd_pl );
	fn_userlog ( c_ServiceName,"st_cntpos_crrnt.l_opnpstn_qty=:%ld:",st_cntpos_crrnt.l_opnpstn_qty );

	fn_userlog ( c_ServiceName,"Calculate portfolio Deficit Profit Loss (Notional LOSS) & apply DEBIT_TILL_LIMIT" );

	strcpy( c_narration_id , DEFICIT_PROFIT_LOSS);
	c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; 

	if ( d_undrlyng_pl >= 0 ) *** Net Notional Profit  OR   Net No Loss-No profit ***
	{
			d_diff_pl =  st_undfut_pos_to_be.d_blckd_pl ;
			st_undfut_pos_to_be.d_blckd_pl = 0;
	}
	else if ( d_undrlyng_pl < 0 )*** Net Notional Loss ***
	{
		d_diff_pl = st_undfut_pos_to_be.d_blckd_pl + d_undrlyng_pl;
		st_undfut_pos_to_be.d_blckd_pl = d_undrlyng_pl;
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Deficit Notional LOSS :%lf:", d_diff_pl );
		fn_userlog ( c_ServiceName, "NEW BLOCK LOSS st_undfut_pos_to_be.d_blckd_pl :%lf:", st_undfut_pos_to_be.d_blckd_pl );
	}

	if ( d_diff_pl != 0 )
	{
		i_returncode = fn_upd_spnlimits(	c_ServiceName,
																	ptr_st_pstn_actn,
																	ptr_st_err_msg,
																	c_narration_id,
																	c_dr_without_lmt_flg,
																	d_diff_pl,
																	&d_balance_amt);
		if ( i_returncode != 0 )
		{
			fn_errlog( c_ServiceName, "S31190",LIBMSG , c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if(DEBUG_MSG_LVL_3)
  	{
			fn_userlog(c_ServiceName,"SPAN	-	d_diff_pl :%lf:",d_diff_pl);
			fn_userlog(c_ServiceName,"SPAN	-	d_balance_amt Is :%lf:",d_balance_amt);
		}

		if ( d_diff_pl < 0 )
		{
			st_undfut_pos_to_be.d_blckd_pl	= d_undrlyng_pl	-	d_balance_amt	;		
		}
	}
	*** Commented on 08-Dec-2011 Ends ***/


	/*** 08-Dec-2011 Starts ***/
	/*** Releasing Blocked Initial Margin ***/
	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog( c_ServiceName, "Releasing  Blocked Margin :FUS_INITIAL_MRGN");
		fn_userlog( c_ServiceName, "Blocked Intial Margin Is :%lf: ",ptr_st_undfut_pos_crrnt->d_initial_mrgn);
	}

	strcpy(c_temp_ref_rmrks, ptr_st_pstn_actn->c_ref_rmrks);

	sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"SPAN-%s", st_undfut_pos_to_be.c_undrlyng);

	strcpy( c_narration_id , REL_TRDMRGN_ON_CLOSEOUT);
	c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;

	if ( ptr_st_undfut_pos_crrnt->d_initial_mrgn != 0 )
	{
			d_balance_amt  = 0.0;		/*** Ver 1.1 ***/

			i_returncode = fn_upd_spnlimits( c_ServiceName,
																	ptr_st_pstn_actn,
																	ptr_st_err_msg,
																	c_narration_id,
																	c_dr_without_lmt_flg,
																	ptr_st_undfut_pos_crrnt->d_initial_mrgn,
																	&d_balance_amt);

			if ( i_returncode != 0 )
			{
				fn_errlog( c_ServiceName, "S31195",LIBMSG , c_err_msg );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf);
				return -1;
			}
	}

	/*** Releasing Blocked Loss ***/

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog( c_ServiceName, "Releasing  Blocked Loss :FUS_BLCKD_PL");
		fn_userlog( c_ServiceName, "Releasing Blocked LOSS :%lf: ",ptr_st_undfut_pos_crrnt->d_blckd_pl);
	}

	strcpy( c_narration_id , REL_BLKDLOSS_ON_CLOSEOUT);
	c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;

	if ( ptr_st_undfut_pos_crrnt->d_blckd_pl != 0 )
	{
			d_balance_amt  = 0.0;		/*** Ver 1.1 ***/

			i_returncode = fn_upd_spnlimits( c_ServiceName,
																	ptr_st_pstn_actn,
																	ptr_st_err_msg,
																	c_narration_id,
																	c_dr_without_lmt_flg,
																	ptr_st_undfut_pos_crrnt->d_blckd_pl,
																	&d_balance_amt);

			if ( i_returncode != 0 )
			{
				fn_errlog( c_ServiceName, "S31200",LIBMSG , c_err_msg );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf);
				return -1;
			}
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "Blocked SPAN WEMUL Margin");
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_span_wemult_mrgn :%lf:",st_undfut_pos_to_be.d_span_wemult_mrgn);
	}

	d_upd_amount = (-1) * st_undfut_pos_to_be.d_span_wemult_mrgn; 

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"d_upd_amount IS  :%lf:",d_upd_amount);
	}

	sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"SPAN-SPAN-%s", st_undfut_pos_to_be.c_undrlyng);
	strcpy( c_narration_id , BLK_SPAN_MRGN_ON_CLOSEOUT);
	c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; 

	if ( d_upd_amount < 0 )
	{
		d_balance_amt  = 0.0;		/*** Ver 1.1 ***/

		i_returncode = fn_upd_spnlimits( c_ServiceName,
																	ptr_st_pstn_actn,
																	ptr_st_err_msg,
																	c_narration_id,
																	c_dr_without_lmt_flg,
																	d_upd_amount,
																	&d_balance_amt);
		if ( i_returncode != 0 )
		{
			fn_errlog( c_ServiceName, "S31205",LIBMSG , c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}
	
		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"SPAN	-	d_balance_amt Is :%lf:",d_balance_amt);
		}

		/*** Added to take care of balance amount in case of ***/
		/*** DEBIT_TILL_LIMIT. d_balance_amt is added        ***/
		/*** since it is always negative or Zero             ***/
		ptr_st_undfut_pos_to_be->d_span_wemult_mrgn =	ptr_st_undfut_pos_to_be->d_span_wemult_mrgn + d_balance_amt ;
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName, "Blocked SPAN EXPO Margin");
		fn_userlog(c_ServiceName,"st_undfut_pos_to_be.d_eba_expr_mrgn :%lf:",st_undfut_pos_to_be.d_eba_expr_mrgn);
	}

	d_upd_amount = (-1) * st_undfut_pos_to_be.d_eba_expr_mrgn; 

	sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"SPAN-EXPOSURE-%s", st_undfut_pos_to_be.c_undrlyng);
	strcpy( c_narration_id , BLK_EXPR_MRGN_ON_CLOSEOUT);
	c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; 
	if ( d_upd_amount < 0 )
	{
			d_balance_amt  = 0.0;		/*** Ver 1.1 ***/

			i_returncode = fn_upd_spnlimits( c_ServiceName,
																		ptr_st_pstn_actn,
																		ptr_st_err_msg,
																		c_narration_id,
																		c_dr_without_lmt_flg,
																		d_upd_amount,
																		&d_balance_amt);
			if ( i_returncode != 0 )
			{
				fn_errlog( c_ServiceName, "S31210",LIBMSG , c_err_msg );
				tpfree((char *)ptr_fml_Obuf);
				tpfree((char *)ptr_fml_Ibuf);
				return -1;
			}
		
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"SPAN	-	d_balance_amt Is :%lf:",d_balance_amt);
			}

			/*** Added to take care of balance amount in case of ***/
			/*** DEBIT_TILL_LIMIT. d_balance_amt is added        ***/
			/*** since it is always negative or Zero             ***/
			ptr_st_undfut_pos_to_be->d_eba_expr_mrgn =	ptr_st_undfut_pos_to_be->d_eba_expr_mrgn + d_balance_amt ;

	}


	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName," Calculating Final INITIAL MARGIN ")	;

		fn_userlog(c_ServiceName,"ptr_st_undfut_pos_to_be->d_span_wemult_mrgn Is :%lf:",ptr_st_undfut_pos_to_be->d_span_wemult_mrgn);
		fn_userlog(c_ServiceName,"ptr_st_undfut_pos_to_be->d_eba_expr_mrgn Is  :%lf:",ptr_st_undfut_pos_to_be->d_eba_expr_mrgn);
	}

	ptr_st_undfut_pos_to_be->d_initial_mrgn = ptr_st_undfut_pos_to_be->d_span_wemult_mrgn + ptr_st_undfut_pos_to_be->d_eba_expr_mrgn ;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"Here FINAL INTIAL MARGIN TO BE BLOCKED Is :%lf:",	ptr_st_undfut_pos_to_be->d_initial_mrgn);
	}	
	
	sprintf ( ptr_st_pstn_actn->c_ref_rmrks,"SPAN-%s", st_undfut_pos_to_be.c_undrlyng);
	strcpy( c_narration_id , BLK_NOTIONAL_LOSS_ON_CLOSEOUT);
	c_dr_without_lmt_flg = DEBIT_TILL_LIMIT; 

  if ( d_undrlyng_pl < 0 )/*** Net Notional Loss ***/
	{
		d_balance_amt  = 0.0;		/*** Ver 1.1 ***/

		i_returncode = fn_upd_spnlimits(	c_ServiceName,
																	ptr_st_pstn_actn,
																	ptr_st_err_msg,
																	c_narration_id,
																	c_dr_without_lmt_flg,
																	d_undrlyng_pl,
																	&d_balance_amt);
		if ( i_returncode != 0 )
		{
			fn_errlog( c_ServiceName, "S31215",LIBMSG , c_err_msg );
			tpfree((char *)ptr_fml_Obuf);
			tpfree((char *)ptr_fml_Ibuf);
			return -1;
		}

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"SPAN	-	d_undrlyng_pl :%lf:",d_undrlyng_pl);
			fn_userlog(c_ServiceName,"SPAN	-	d_balance_amt Is :%lf:",d_balance_amt);
		}

		st_undfut_pos_to_be.d_blckd_pl	= ((-1) * d_undrlyng_pl) + d_balance_amt;		
	}
	else
	{
		st_undfut_pos_to_be.d_blckd_pl = 0 ;
	}
	/*** 08-Dec-2011 Ends ***/

  /******* ver 1.5 starts *******/
  EXEC SQL
         SELECT NVL(FTQ_SETLMNT_FLG,'C')
          INTO :c_settlement_flag
          FROM  FTQ_FO_TRD_QT
         WHERE  FTQ_XCHNG_CD        = :ptr_st_pstn_actn->c_xchng_cd
          AND   FTQ_PRDCT_TYP       = :ptr_st_pstn_actn->c_prd_typ
          AND   FTQ_UNDRLYNG        = :ptr_st_pstn_actn->c_undrlyng
          AND   FTQ_EXPRY_DT        = to_date( :ptr_st_pstn_actn->c_expry_dt,'dd-mon-yyyy' )
          AND   FTQ_EXER_TYP        = :ptr_st_pstn_actn->c_exrc_typ
          AND   FTQ_STRK_PRC        = :ptr_st_pstn_actn->l_strike_prc
          AND   FTQ_OPT_TYP         = :ptr_st_pstn_actn->c_opt_typ
          AND   FTQ_INDSTK          = :ptr_st_pstn_actn->c_ctgry_indstk;

   if ( SQLCODE != 0 )
   {
            fn_errlog(c_ServiceName, "S31220", SQLMSG, ptr_st_err_msg->c_err_msg );
            tpfree((char *)ptr_fml_Ibuf);
            tpfree((char *)ptr_fml_Obuf);
            return -1;
   }
  fn_userlog(c_ServiceName,"span:clsout c_settlement_flag is :%c:",c_settlement_flag);
  /*********** Find Delivery Margin Percentage *******/
  if( c_settlement_flag == 'P' )
  {
     if( ptr_st_pstn_actn->c_prd_typ == 'F'  )
     {
      sprintf( ptr_st_pstn_actn->c_ref_rmrks,"FUT-%s-%s-%ld-%c%c",ptr_st_pstn_actn->c_undrlyng,ptr_st_pstn_actn->c_expry_dt,ptr_st_pstn_actn->l_strike_prc,ptr_st_pstn_actn->c_opt_typ,ptr_st_pstn_actn->c_exrc_typ);

     rtrim(ptr_st_pstn_actn->c_ref_rmrks);
     fn_userlog(c_ServiceName,"span:clsout Future Clsout Remarks :%s:",ptr_st_pstn_actn->c_ref_rmrks);
    
      i_cnt = 0;
    
      EXEC SQL
         SELECT count(*) 
         INTO :i_cnt 
         FROM DUAL
         WHERE to_date( :ptr_st_pstn_actn->c_expry_dt,'dd-mon-yyyy') = ( SELECT MIN(FTQ_EXPRY_DT) FROM FTQ_FO_TRD_QT WHERE FTQ_XCHNG_CD ='NFO' AND FTQ_PRDCT_TYP='F' and FTQ_UNDRLYNG='NIFTY' );

       if ( SQLCODE != 0 )
       {
            fn_errlog(c_ServiceName, "S31225", SQLMSG, ptr_st_err_msg->c_err_msg );
            tpfree((char *)ptr_fml_Ibuf);
            tpfree((char *)ptr_fml_Obuf);
            return -1;
       }
  
     if( i_cnt == 1 )
     {
         d_new_delvry_mrgn_val = ptr_st_undfut_pos_crrnt->d_initial_mrgn - ptr_st_undfut_pos_to_be->d_initial_mrgn;
         fn_userlog( c_ServiceName,"span:clsout cr diff initl mrgn  is :%lf:",d_new_delvry_mrgn_val);
         if( d_new_delvry_mrgn_val < 0 )
         {
            i_returncode = fn_upd_spnlimits( c_ServiceName,
                                    ptr_st_pstn_actn,
                                    ptr_st_err_msg,
                                    BLK_DLVRY_OBLIGATION,
                                    DEBIT_TILL_LIMIT,
                                    d_new_delvry_mrgn_val,
                                    &d_balance_amt);
            if ( i_returncode != 0 )
            {
                fn_errlog( c_ServiceName, "S31230",LIBMSG , c_err_msg );
                tpfree((char *)ptr_fml_Obuf);
                tpfree((char *)ptr_fml_Ibuf);
                return -1;
            }
         }
      }
      else if ( i_cnt == 0 )
      {
         fn_userlog( c_ServiceName,"span:clsout NOT current month :%s:",ptr_st_pstn_actn->c_expry_dt);
      }
		} 
		else if( ptr_st_pstn_actn->c_prd_typ  == 'O')
		{

      sprintf( ptr_st_pstn_actn->c_ref_rmrks,"OPT-%s-%s-%ld-%cE",ptr_st_pstn_actn->c_undrlyng,ptr_st_pstn_actn->c_expry_dt,ptr_st_pstn_actn->l_strike_prc,ptr_st_pstn_actn->c_opt_typ);

      rtrim(ptr_st_pstn_actn->c_ref_rmrks);
      fn_userlog(c_ServiceName,"span:clsout Option Remarks :%s:",ptr_st_pstn_actn->c_ref_rmrks);

		  fn_userlog ( c_ServiceName, "span:clsout nly release d_exist_mrgn is :%lf:",d_exist_mrgn );

					  if( d_exist_mrgn > 0 )
					  {
					    i_returncode = fn_upd_spnlimits( c_ServiceName,
					                                  ptr_st_pstn_actn,
					                                  ptr_st_err_msg,
					                                  RELEASE_ON_PHYDLVRY_OPT_EOS,
					                                  DEBIT_WITHOUT_LIMIT,
					                                  d_exist_mrgn,
					                                  &d_balance_amt);
					    if ( i_returncode != 0 )
					    {
					      fn_errlog( c_ServiceName, "S31235",LIBMSG , c_err_msg );
					      tpfree((char *)ptr_fml_Obuf);
					      tpfree((char *)ptr_fml_Ibuf);
					      return -1;
					    }
					  }

    EXEC SQL
    UPDATE  FCP_FO_SPN_CNTRCT_PSTN
    SET     FCP_UDLVRY_MRGN = 0 
    WHERE   FCP_CLM_MTCH_ACCNT = :ptr_st_pstn_actn->c_cln_mtch_accnt
    AND     FCP_XCHNG_CD       = :ptr_st_pstn_actn->c_xchng_cd
    AND     FCP_PRDCT_TYP      = :ptr_st_pstn_actn->c_prd_typ
    AND     FCP_UNDRLYNG       = :ptr_st_pstn_actn->c_undrlyng
    AND     FCP_EXPRY_DT       = to_date(:ptr_st_pstn_actn->c_expry_dt,'DD-Mon-YYYY')
    AND     FCP_EXER_TYP       = :ptr_st_pstn_actn->c_exrc_typ
    AND     FCP_OPT_TYP        = :ptr_st_pstn_actn->c_opt_typ
    AND     FCP_STRK_PRC       = :ptr_st_pstn_actn->l_strike_prc;

  if ( SQLCODE != 0 )
  {
    fn_errlog(c_ServiceName, "S31240", SQLMSG, ptr_st_err_msg->c_err_msg );
    tpfree((char *)ptr_fml_Ibuf);
    tpfree((char *)ptr_fml_Obuf);
    return -1;
  }
  }
	}
  /*** Ver 1.5 ends ****/


	strcpy(ptr_st_pstn_actn->c_ref_rmrks, c_temp_ref_rmrks);

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog(c_ServiceName,"SPAN	- st_undfut_pos_to_be.d_blckd_pl Is :%lf:",st_undfut_pos_to_be.d_blckd_pl);
		fn_userlog ( c_ServiceName,"****************************************************************************" );
	
		fn_userlog ( c_ServiceName,"***********************END fn_call_spnactn_clsoutgrp1*************************");
	}

 	tpfree((char *)ptr_fml_Obuf);
  tpfree((char *)ptr_fml_Ibuf);
	return 0;
}


/** Applies an action on an existing position **/
int 	fn_apply_spncnt_clsoutactn ( 	char *c_ServiceName,
																		struct st_pstn_actn *ptr_st_pstn_actn,
															 			struct st_fcp_cntrct_pstn *ptr_st_cnt_pos,
									      						struct st_err_msg *ptr_st_err_msg)
{

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName,"***********************START fn_apply_spncnt_clsoutactn*************************");
	}

	long int li_temp_qty    = 0;
	long int li_flg_tmp_qty = 0;

	/** Increase the OPEN position by the close out qty and  **/
	/** WEP rate.executed rate. Calculate the cover quantity **/
	/** in the transaction. Increase the MTMed position too  **/
	/** by the close out quantity and WEP rate.              **/

	ptr_st_pstn_actn->l_cover_qty = ptr_st_cnt_pos->l_opnpstn_qty;

	li_temp_qty = ptr_st_cnt_pos->l_opnpstn_qty;

	li_flg_tmp_qty = ptr_st_cnt_pos->l_opnpstn_qty;

	ptr_st_pstn_actn->l_orgnl_qty = 	ptr_st_cnt_pos->l_opnpstn_qty * -1;
	ptr_st_pstn_actn->c_trnsctn_flw = ptr_st_cnt_pos->c_opnpstn_flw;

	fn_add_pos_in_val( 	li_temp_qty * (-1),
											ptr_st_cnt_pos->d_org_opn_val,
											li_temp_qty,
											&(ptr_st_cnt_pos->l_opnpstn_qty),
											&(ptr_st_cnt_pos->d_opnpstn_val ) );

	fn_add_pos_in_val( 	li_temp_qty * (-1),
											ptr_st_cnt_pos->d_mtm_opn_val,
											li_temp_qty,
											&li_temp_qty,
											&(ptr_st_cnt_pos->d_mtm_opn_val ) );

	if ( li_flg_tmp_qty > 0 )
	{
		ptr_st_cnt_pos->l_sell_exctd_qty = (-1) * ptr_st_cnt_pos->l_buy_exctd_qty ;
	}
	else if ( li_flg_tmp_qty < 0 )
	{
		ptr_st_cnt_pos->l_buy_exctd_qty = (-1) * ptr_st_cnt_pos->l_sell_exctd_qty ;
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog ( c_ServiceName, "Contract after updation (Action applied) : " );
		fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->l_cover_qty      :%ld:",ptr_st_pstn_actn->l_cover_qty );
		fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->l_orgnl_qty      :%ld:", ptr_st_pstn_actn->l_orgnl_qty );
		fn_userlog ( c_ServiceName, "ptr_st_pstn_actn->c_trnsctn_flw    :%c:", ptr_st_pstn_actn->c_trnsctn_flw );
		fn_userlog ( c_ServiceName, "ptr_st_cnt_pos->l_opnpstn_qty     :%ld:", ptr_st_cnt_pos->l_opnpstn_qty );
		fn_userlog ( c_ServiceName, "ptr_st_cnt_pos->d_opnpstn_val :%lf:", ptr_st_cnt_pos->d_opnpstn_val );
		fn_userlog ( c_ServiceName, "ptr_st_cnt_pos->d_mtm_opn_val :%lf:", ptr_st_cnt_pos->d_mtm_opn_val );
		fn_userlog ( c_ServiceName, "ptr_st_cnt_pos->l_sell_exctd_qty  :%ld:", ptr_st_cnt_pos->l_sell_exctd_qty );
		fn_userlog ( c_ServiceName, "ptr_st_cnt_pos->l_buy_exctd_qty     :%ld:", ptr_st_cnt_pos->l_buy_exctd_qty );
	}
	if(DEBUG_MSG_LVL_3)
	{ 
		fn_userlog ( c_ServiceName,"***********************END fn_apply_spncnt_clsoutactn*************************");
	}
	return 0;
}
