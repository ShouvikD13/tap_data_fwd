/******************************************************************************/
/*  Program           : SFO_FWD_ORD																						*/
/*                                                                            */
/*  Input             : 																											*/
/*                                                                            */
/*  Output            :                                                       */
/*                                                                            */
/*  Description       : This service starts the forwarding for fno pipes.     */
/*																																						*/	
/*	Log								: 30-Mar-2015			Tanmay Warkhade												*/
/*																																						*/
/******************************************************************************/
/*																																						*/
/*	Ver 1.0 					:	New Release																						*/
/*	Ver 1.1 					:	Sandip Tambe SLTP Product AutoEnabling[24-May-2016]	  */
/*  ver 1.2           : Commented Auto Enablement of Intra Product logic(Sachin Birje	*/
/*	Ver 1.3						: Uncomment Auto Enablement for Seperate EOS for Index/Stock */
/*	Ver 1.4						: Minor Change- New Pipe Ids - Sachin Birje             */
/*  Ver TOL           : Tux on Linux - Agam                                   */
/******************************************************************************/

#include <stdio.h>
#include <sqlca.h>
#include <stdlib.h>
#include <atmi.h>
#include <fo_fml_def.h>
#include <string.h>
#include <fo.h>
#include <fn_log.h>
#include <fn_tuxlib.h>


void SFO_FWD_ORD ( TPSVCINFO *rqst ) 
{

	FBFR32 *ptr_fml_ibuf;
	FBFR32 *ptr_fml_obuf;
	char c_err_msg [ 256 ];

	char c_xchng_cd[3+1];
	char exg_stts ; 
  char c_file_nm[100];
	char c_pipe[2];
	char c_command[100];	
  char c_ServiceName [ 33 ];
	/*char c_pipe_id1[12][2+1]; **/
	char c_pipe_id1[20][2+1]; /** Ver 1.4 **/
	char c_fwd_mod[50];
	char* strptr;

	int i_trnsctn;   /** Ver 1.1 **/	
	int i_err[3];
	int i_ferr[3];
	int i = 0;
	int j = 0;
  FILE  *fptr;
	
	strcpy(c_ServiceName,"SFO_FWD_ORD");

  ptr_fml_obuf = (FBFR32 *)tpalloc("FML32", NULL, MIN_FML_BUF_LEN * 5);
  if(ptr_fml_obuf == NULL)
  {
   fn_errlog(c_ServiceName, "S31005", FMLMSG, c_err_msg);
   Fadd32(ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0);
   tpreturn(TPFAIL, 0, (char *)ptr_fml_ibuf, 0, 0);
  }

  ptr_fml_ibuf = (FBFR32 *)rqst->data;

	MEMSET(c_xchng_cd);
	MEMSET(c_fwd_mod);

	i_err[0]= Fget32(ptr_fml_ibuf,FFO_XCHNG_CD ,0, (char *)c_xchng_cd, 0);
	i_ferr [ 0 ] = Ferror32;
	i_err[1]= Fget32(ptr_fml_ibuf,FFO_SYS_MSG, 0, (char *)c_fwd_mod, 0);
	i_ferr [ 1 ] = Ferror32;

	fn_userlog(c_ServiceName ,"c_fwd_mod is :%s: ",c_fwd_mod);

	for(i=0; i<3; i++)
	{
   if ( i_err[ i ] == -1 )
   {
    fn_errlog( c_ServiceName, "S31010", Fstrerror32(i_ferr[i]),c_err_msg);
    tpfree ( ( char * ) ptr_fml_obuf );
    Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
   }
  }

	EXEC SQL
	SELECT EXG_CRRNT_STTS
	INTO   :exg_stts
	FROM   EXG_XCHNG_MSTR
	WHERE	 EXG_XCHNG_CD =:c_xchng_cd; 

	if ( SQLCODE != 0 || exg_stts != 'O')
  {
    fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg );
	   Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		fn_userlog(c_ServiceName,"The Exchange is not open ");
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
  }

  if( exg_stts != 'O' )
  {
    fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg );
    Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    fn_userlog(c_ServiceName,"The Exchange is not open ");
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
  }
	
	MEMSET(c_pipe_id1);
	strptr = strtok(c_fwd_mod, "|");

	i = 0;
  while(strptr != NULL)
  {
    strcpy(c_pipe_id1[i], strptr);
		fn_userlog(c_ServiceName,"c_pipe_id1 is :%s: ",c_pipe_id1[i]);
    strptr = strtok(NULL, "|");
    i++;
  }

	MEMSET(c_file_nm);
		  
	strcpy(c_file_nm, tuxgetenv("HOME"));
	
	if(strcmp(c_xchng_cd,"NFO") == 0)
	{
		strcat(c_file_nm, "/temp/NFOpipe.txt");
 		sprintf(c_command,"ps -eaf -o args | grep cln_pack_clnt | grep -v 'grep' | cut -d \" \" -f 2  > %s", c_file_nm);
		system(c_command);
	}
	else if(strcmp(c_xchng_cd,"BFO") == 0)
	{	
		strcat(c_file_nm, "/temp/BFOpipe.txt");
		sprintf(c_command,"ps -eaf -o args | grep cln_bse_pack_clnt | grep -v 'grep' | cut -d \" \" -f 2  > %s", c_file_nm);
		system(c_command);

	}
	fn_userlog(c_ServiceName,":%s: ",c_command);
	fn_userlog(c_ServiceName,":%s: ",c_file_nm);

	fptr = (FILE *)fopen(c_file_nm, "r");
  if(fptr == NULL)
  {
    fn_errlog(c_ServiceName,"S31025", LIBMSG, c_err_msg);
		tpfree ( ( char * ) ptr_fml_obuf );
    Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		fn_userlog(c_ServiceName,"the file is empty");
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
  }

	if(strcmp(c_xchng_cd,"NFO") == 0)
	{
		while( feof(fptr) == 0)    /* NULL changed to 0 in Ver TOL */
		{
			MEMSET(c_pipe);
			fscanf(fptr, "%s", c_pipe);
			
			if(strcmp(c_pipe,NULL) != 0 )
			{
		
			 for(j=0;j<i;j++)
			 {
				 fn_userlog(c_ServiceName, "the pipes that are frwded from brd clnt are :%s:",c_pipe_id1[j]);
				 if(strcmp(c_pipe, c_pipe_id1[j]) == 0)
				 {
						fn_userlog(c_ServiceName, "the pipes that are now up are %s " , c_pipe);

						fn_pst_trg( "cln_pack_clnt",
    	  	  		         "TRG_STRT_PMP",
      	  	    		     "TRG_STRT_PMP",
        	  	      		  c_pipe);	
					break;
				 }
			 }
			}
		}
	}
	else if(strcmp(c_xchng_cd,"BFO") == 0)
  {
		while( feof(fptr) == 0)   /* NULL changed to 0 in Ver TOL */
    {
      MEMSET(c_pipe);
      fscanf(fptr, "%s", c_pipe);
      
			if(strcmp(c_pipe,NULL) != 0)
      {

			 for(j=0;j<i;j++)
       {
         fn_userlog(c_ServiceName, " the pipes that are frwded from brd clnt are :%s:",c_pipe_id1[j]);
         if(strcmp(c_pipe, c_pipe_id1[j]) == 0)
         {	
    				fn_userlog(c_ServiceName, " the pipes that are now up are %s " , c_pipe);

    				fn_pst_trg( "cln_bse_pack_clnt",
        				        "TRG_STRT_PMP",
      	  		  		    "TRG_STRT_PMP",
            		    		c_pipe);
					break;
				 }
			 }
			}
    }
  }

	fclose(fptr);
	
  fn_userlog(c_ServiceName, "Posting trigger as Market Status is OPEN" );
  /***** Commented in Ver 1.2 *********************
	**** Ver 1.1 starts **		
	****** Uncomment in Ver 1.3 ********/
	
	fn_userlog(c_ServiceName,"Now Enabling SLTP products");
	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
   {
    fn_errlog ( c_ServiceName, "S31030", LIBMSG, c_err_msg );
		tpfree ( ( char * ) ptr_fml_obuf );
    Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		fn_userlog(c_ServiceName,"Auto product Enablement for :%s: Failed pls check",c_xchng_cd);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
   }

	EXEC SQL
		UPDATE MTM_APPLN_STTS
		SET			/*** MTM_SLTP_ALLWD_STTS ='Y', Commented in Ver 1.3 ***/
						MTM_SLTP_ALLWD_STTS_I ='Y',	/*** Ver 1.3 ***/
						MTM_SLTP_ALLWD_STTS_S	='Y',	/*** Ver 1.3 ***/
						MTM_ROLL_STTS       ='Y',
						MTM_ROLL_STTS_S			='Y',		/*** Ver 1.3 ***/
					  MTM_CAN_REQ         ='N',
						MTM_CAN_REQ_S				='N',		/*** Ver 1.3 ***/
						MTM_CAN_SQR_OFF     ='N',
						MTM_CAN_SQR_OFF_S		='N',		/*** Ver 1.3 ***/
						MTM_OP_ALLWD_STTS   ='Y',
						MTM_OP_ALLWD_STTS_S	='Y'		/*** Ver 1.3 ***/
		WHERE   MTM_XCHNG_CD =:c_xchng_cd
		AND EXISTS
					(SELECT 1 
					 FROM PAR_SYSTM_PRMTR
					 WHERE nvl(PAR_INTRADAY_PRDCT,'N')='Y'
					) ;
	if(SQLCODE !=0 )
	{
		fn_errlog(c_ServiceName,"S31035",SQLMSG,c_err_msg);
    fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
		tpfree ( ( char * ) ptr_fml_obuf );
    Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		fn_userlog(c_ServiceName,"Auto product Enablement for :%s: Failed pls check",c_xchng_cd);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
	} 
  if ( fn_committran( c_ServiceName, i_trnsctn,c_err_msg ) == -1 )
  {
     fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
     fn_errlog ( c_ServiceName, "S31040", LIBMSG, c_err_msg );
		 tpfree ( ( char * ) ptr_fml_obuf );
     Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		 fn_userlog(c_ServiceName,"Auto product Enablement for :%s: Failed pls check",c_xchng_cd);
		 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
  }
	/**** Uncomment in Ver 1.3 ****
	**** Ver 1.1 Ends ***
  ******* Ver 1.2 comment ends here ***/
	tpreturn( TPSUCCESS, SUCC_BFR, (char *)ptr_fml_obuf, 0 , 0 );
}
