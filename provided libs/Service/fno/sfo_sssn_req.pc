/**************************************************************************************************
*  Service Name   :  SFO_SSSN_REQ                                                                 * 
*                                                                                                 *
*  Description    :  This Program will insert data from exchange into a table and                 *
*                    the data will be retrieved using batch file.                                 *
*                                                                                                 *
* Input           : 1)FFO_USR_ID                                                                	*
* Output          : 1)FFO_ERR_MSG                                                                 *
*                                                                                                 *
*  Log Release    : 22-02-2023	Ver 1.0		Ravi Malla                                            	*
**************************************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fml_def.h>
#include <fo.h>
#include <fo_view_def.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fml_rout.h>
#include <fn_read_debug_lvl.h>
#include <fo_get_records.h>
#include <fn_session.h>

int Z=0;
#define INIT(x,y)     for(Z=0; Z< y; Z++)     x[Z] =0

void SFO_SSSN_REQ( TPSVCINFO *rqst )
{
  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  ptr_fml_Obuf = NULL;

  char c_ServiceName[33];
  char c_err_msg[256]="\0";
  char c_user_id[9] = "\0";

  char c_sts_flag='\0';

	int i=0;
  int errno=0;
  int i_returncode  = 0;
  int i_trnsctn;
	int i_usercnt=0;

  int i_cnt=0;
  int i_cntrct_cnt=0;
  struct vw_err_msg st_err_msg;


	char c_type ='\0';

	 MEMSET(st_err_msg);

	 EXEC SQL BEGIN DECLARE SECTION;
	 sql_cursor     sys_cursor;
	 EXEC SQL END DECLARE SECTION;

	 ptr_fml_Ibuf = (FBFR32 *)rqst->data;
	 strcpy( c_ServiceName, rqst->name );

	  INITDBGLVL(c_ServiceName);
	  MEMSET(c_err_msg);
	  MEMSET(c_user_id);


    if(Fget32( ptr_fml_Ibuf ,FFO_SUB_BUF_CNT,0,(char *)&i_cnt,0)==-1)  /** User Count **/
		{
			fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

    if(Fget32( ptr_fml_Ibuf ,FFO_REQ_TYP,0,(char *)&c_type,0)==-1)  /** Request type **/
		{
			fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		if(i_cnt>0 )
		{
				for(i=0;i<i_cnt;i++)
				{
						if(Fget32( ptr_fml_Ibuf ,FFO_USR_ID,i,(char *)c_user_id,0)==-1)  /** User **/
						{
							fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}

						
						i_usercnt=0;
						EXEC SQL SELECT count(*) into :i_usercnt from USR_USER_MASTER where USR_USR_ID=:c_user_id;
						if( SQLCODE != 0 )
						{
										fn_errlog ( c_ServiceName, "S31020", SQLMSG, c_err_msg );
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
										tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}

						if(i_usercnt>0)
						{
						i_cntrct_cnt=0;
						EXEC SQL
						select COUNT(*) into :i_cntrct_cnt from IDIRECT_PARTNER_SSN where TRIM(IPS_USERID)=:c_user_id and IPS_USR_STAT='A'; 
						if( SQLCODE != 0 )
						{
										fn_errlog ( c_ServiceName, "S31025", SQLMSG, c_err_msg );
										Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
										tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
						
						if(i_cntrct_cnt==0 && c_type=='A')
						{
							i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
							if(i_trnsctn == -1)
							{
								fn_errlog(c_ServiceName,"S31030",TPMSG,c_err_msg);
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}

							EXEC SQL
							INSERT INTO IDIRECT_PARTNER_SSN(IPS_USERID,IPS_USR_STAT,IPS_INS_DATE)VALUES(:c_user_id,'A',sysdate); 
							if( SQLCODE != 0 )
							{
								fn_errlog ( c_ServiceName, "S31035", SQLMSG, c_err_msg );
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}

							if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
							{
								fn_errlog( c_ServiceName, "S31040", TPMSG, c_err_msg  );
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
							}
    				}
	
						if(i_cntrct_cnt > 0 && c_type=='B')
						{
							i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
							if(i_trnsctn == -1)
							{
								fn_errlog(c_ServiceName,"S31045",TPMSG,c_err_msg);
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}

							EXEC SQL UPDATE IDIRECT_PARTNER_SSN 
							SET IPS_USR_STAT='B',IPS_UPD_DATE=sysdate where TRIM(IPS_USERID)=:c_user_id and IPS_USR_STAT='A';
							if( SQLCODE != 0 )
							{
								fn_errlog ( c_ServiceName, "S31050", SQLMSG, c_err_msg );
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}

							if( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
							{
								fn_errlog( c_ServiceName, "S31055", TPMSG, c_err_msg  );
								Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
								tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
							}



						}
						}	/* User validation condition end */
					}	/* for Loop end */
		}	/* If Condition end */
		i_returncode = fn_pack_vartofml(c_ServiceName,
                                c_err_msg,
                                &ptr_fml_Obuf,
                                1,
                                FFO_ERR_MSG,(char *)&c_err_msg
                                );
		if(i_returncode == -1)
		{
		  fn_errlog( c_ServiceName, "S31060", LIBMSG, c_err_msg );
		  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
		

		tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );

}

