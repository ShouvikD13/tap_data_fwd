/*	Program	    			:	SFO_1CLK_ORDBK                                        */
/*                                                                            */
/*  Input             :	Required				                                      */
/*	                    FFO_USR_ID                                            */
/*											FFO_SSSN_ID																						*/
/*											FFO_EBA_MTCH_ACT_NO																		*/
/*											FFO_XCHNG_CD																					*/
/*											FFO_OPERATION_TYP																			*/
/*											FFO_ROUT_CRT                                          */
/*                                                                            */
/*											Optional																							*/
/*											FFO_PRDCT_TYP																					*/
/*											FFO_UNDRLYNG																					*/
/*											FFO_EXPRY_DT																					*/
/*											FFO_EXER_TYP																					*/
/*											FFO_OPT_TYP																						*/
/*											FFO_STRK_PRC																					*/
/*											FFO_ORDR_STTS																					*/
/*											FFO_FROM_DT																						*/
/*											FFO_TO_DT																							*/
/*											FFO_ACK_NMBR  																				*/
/*											FFO_PIPE_ID                                           */
/*                                                                            */
/*  Output            : FFO_ORDR_RFRNC  																			*/
/*											FFO_PIPE_ID                                           */
/*											FFO_XCHNG_CD                                          */
/*											FFO_PRDCT_TYP																					*/
/*											FFO_UNDRLYNG																					*/
/*											FFO_EXPRY_DT																					*/
/*											FFO_EXER_TYP																					*/
/*											FFO_OPT_TYP																						*/
/*											FFO_STRK_PRC																					*/
/*                      FFO_CTGRY_INDSTK                                      */
/*											FFO_ORDR_FLW																					*/
/*											FFO_LMT_MKT_SL_FLG																		*/
/*											FFO_DSCLSD_QTY																				*/
/*											FFO_ORD_TOT_QTY																				*/
/*											FFO_LMT_RT																						*/
/*											FFO_STP_LSS_TGR																				*/
/*											FFO_ORD_TYP																						*/
/*											FFO_ORD_VALID_DT																			*/
/*											FFO_TRD_DT																						*/
/*											FFO_ORDR_STTS																					*/
/*											FFO_EXEC_QTY																					*/
/*											FFO_CANCL_QTY																					*/
/*											FFO_EXPRD_QTY																					*/
/*											FFO_SETTLOR																						*/
/*											FFO_SPRD_ORD_REF																			*/
/*											FFO_ACK_NMBR																					*/
/*                      FFO_C_OPNPSTN_QTY                                     */
/*                      FFO_SERIES                                            */
/*                                                                            */
/*  Description       : This service retrieves the values of the entire order */
/*											book given different input parameters based on 				*/
/*											different needs. The different needs are described    */
/*											as different operation types.													*/
/*											A	-	Contract as Input																	*/
/*											B	-	Contract and Date as Input												*/
/*											C	-	Underlying as Input																*/
/*											D	-	Underlying and Date as Input											*/
/*											E	-	Status and Product as Input												*/
/*											F	-	Status, Product and Date as Input									*/
/*											G	-	Exchange ack no, Pipe id as Input									*/
/*                                                                            */
/*  Log               :	1.0		18-Aug-2021		Mahesh Regulwar   								*/
/*                    : 1.1   31-Dec-2021   Mahesh Regulwar                   */ 
/******************************************************************************/
/* 1.0		-		New Release    -CR_ISEC14_150651                                */
/* 1.1    -   Minor Changes                                                   */           
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fml_rout.h>				
/* #include <fo_view_def.h>	 ** commented in Ver TOL */
#include <fo_view_def.h>   /* Added in Ver TOL */
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <eba_to_ors.h>			
#include <fn_log.h>       
#include <fn_getref.h>    			
#include <fn_read_debug_lvl.h>  
#include <fn_val_ord.h>         

#define MIN 0
#define MAX 1
#define BUF_MULTIPLY 1

void SFO_1CLK_ORDBK( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_ibuf;
  FBFR32 *ptr_fml_obuf;

	EXEC SQL INCLUDE "table/ifx_usr_mstr.h"; 
  EXEC SQL INCLUDE "table/icd_info_client_dtls.h"; 

	char c_ServiceName[33];
  char c_errmsg[256];
	char c_dbc_channel[7+1];				
	char c_option_type;
	char c_mod_can_flg = 'N';
	char c_rqst_typ ;
	char c_plcd_stts ;
  char c_min_pipe_id[3];			
  char c_max_pipe_id[3];		
	char c_cntrct_num[25];		
	int	 cnt_rec=0;	

  char c_tag_ordr_rfrnce [19];
  char c_tag_ord_typ ='\0';
  char c_tag_ord_stts = '\0';
  char c_tag_frsh_cvr_flg = '\0';
  char c_cancel_can_flg='N';
  char c_chk_new_site_flg='O';
  long l_tag_ord_lmt_rt =0 ;
  long l_tag_sltp_tgr =0;
  long l_tag_exe_qty =0;
  long l_tag_can_qty = 0;
  long l_tag_exprd_qty = 0;
  long l_tag_open_qty = 0;
  long l_tag_ordr_tot_qty = 0;

	char c_stop_vtc_flg = 'N';	

	varchar	c_frm_dt[ LEN_DATE ];
	varchar c_to_dt[ LEN_DATE ];

  int  i_returncode;
  int  i_err[8];                       
  int  i_ferr[8];        
  int  i_cnt;
  int  i_counter = 1;
	int i_rec_count = 0;				
	int k;									
	int  i_catagory_types;  
  int  i_loop_cnt=0;      
  int  i_vtc_cnt=0;       
	int	rec_price_rjct = 0;		


	long li_rec_cnt_status_date = 0 ; 	
	long li_rec_main_exists;
	long l_bufferlength;
	long l_open_qty = 0;		 
  long li_rec_cnt_adv = 0;     

	long l_ltp_prc	=	0.00;	 
	long l_brkg_val = 0;  
	long l_exctd_rt = 0;  
	
	double  d_trd_val = 0; 	
	double d_mrgn_blk = 0.00;		
	double d_trail_amt=0.0;         
  double d_trl_upd_cond_val=0.0;  
  double d_incrmnt_prc=0.0;       

	char c_fc_flg = '\0';				
	char c_frsh_ord_stts  = '\0';       
	char c_spn_flg = '\0';			
  char c_vtc_ord_stts='\0';  
  char c_sqoff_at_mkt = 'N';      
  char c_can_srv_call = '\0';     
  char c_mod_srv_call = '\0';     
	char c_prcimpv_flg = '\0';         
  char c_sltp_trail_flag = '\0';     

  EXEC SQL BEGIN DECLARE SECTION;
	  struct vw_contract st_cntrct;
    struct vw_orderbook *ptr_st_orderbook;
    struct vw_usr_prfl st_usr_prfl;
		sql_cursor	sys_cursor;
		varchar c_expiry_dt[ LEN_DATE ];
		varchar c_exp_date[ LEN_DATE ];
		varchar c_valid_date[ LEN_DATE ];
		varchar c_trd_date[ LEN_DATE ];
		varchar c_ack_time[ LEN_DATE ]; 
		varchar c_rqst_time[ LEN_DATE ]; 
		varchar c_ordbk_seq[25];     
    varchar c_nxt_trd_dt[9];			
	  varchar c_nxt_trade_dt[11];     
		char c_opr_typ;
		char c_is_flg = 'N'; 										
		char c_ordr_stts;
		char c_order_stts;
		char c_date_flag = 'Y';
		char c_mtch_accnt_no[11];
		char c_exchange_cd[4];
		char c_product_typ;
		char c_underlying[7];
		char c_exercise_type;
		char c_min_ref_num[19];
		char c_max_ref_num[19];
		long li_strike_price;
		char c_pipe_id[3];
    char c_xchng_ack[ LEN_XCHNG_ACK ]; 
    char c_remarks[257];
		char c_user_id[ 15 ];				
		varchar c_ordr_ref [ 19 ];	
    char c_advisor_id[20];   
    char c_sys_ordr_flg = 'N' ;                     
		varchar c_ven_id[50+1];  
		char c_ven_nm[15] = "\0";	
  	varchar c_esp_id[50+1];  
		char c_esp_nm[15] = "\0";	
		char c_apisrc_flg = '\0'; 
    char c_1click_flg = '\0';          
    char c_1click_rcmflg = '\0';
    char c_strgy_id[4];
    varchar c_prtfl_name[50+1];
    varchar c_prtfl_id[10+1];

  EXEC SQL END DECLARE SECTION;

	struct vw_err_msg st_err_msg;

	ptr_fml_ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);            


	MEMSET(c_rqst_time);	
	MEMSET(c_ack_time);		
	MEMSET(c_esp_id); 	

	
  i_returncode = fn_unpack_fmltovar_dflt ( c_ServiceName,
                                      c_errmsg,
                                      ptr_fml_ibuf,
                                      16,
                                      FFO_USR_ID,(char *)st_usr_prfl.c_user_id, "NULL",
                                      FFO_SSSN_ID,(char*)&st_usr_prfl.l_session_id, "NULL",
                                      FFO_EBA_MTCH_ACT_NO,(char*)st_usr_prfl.c_cln_mtch_accnt, "NULL",
																			FFO_PIPE_ID, (char*)st_usr_prfl.c_pipe_id, "*",
																			FFO_ROUT_CRT, (char*)st_usr_prfl.c_rout_crt, "NULL",
                                      FFO_EBA_CNTRCT_ID,(char *)&st_cntrct.l_eba_cntrct_id, "-1",
                                      FFO_XCHNG_CD,(char*)st_cntrct.c_xchng_cd, "NULL",
                                      FFO_PRDCT_TYP,(char*)&st_cntrct.c_prd_typ, "*",
                                      FFO_UNDRLYNG, (char*)st_cntrct.c_undrlyng, "*",
                                      FFO_EXPRY_DT, (char*)st_cntrct.c_expry_dt, "*",
				      												FFO_EXER_TYP, (char*)&st_cntrct.c_exrc_typ, "*",
				      												FFO_OPT_TYP, (char*)&st_cntrct.c_opt_typ, "-",
				      												FFO_STRK_PRC, (char*)&st_cntrct.l_strike_prc, "-1",
				      												FFO_CTGRY_INDSTK, (char*)&st_cntrct.c_ctgry_indstk, "*",
				      												FFO_CA_LVL, (char*)&st_cntrct.l_ca_lvl, "-1",
																      FFO_RQST_TYP, (char*)&st_cntrct.c_rqst_typ, "*");

  if( i_returncode != 0 )
  {
   fn_errlog( c_ServiceName, "S31005", FMLMSG, c_errmsg  );
   Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
  }




  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

	strcpy ( ( char * )c_mtch_accnt_no, st_usr_prfl.c_cln_mtch_accnt );

	if( DEBUG_MSG_LVL_0 ) 
	{
		fn_userlog(c_ServiceName, "***START OF SFO_1CLK_ORDBK for :%s: ***",st_usr_prfl.c_cln_mtch_accnt);
	}

if( DEBUG_MSG_LVL_0 )
  {
    fn_userlog(c_ServiceName, "**user id for FFO_USR_ID  :%s: ***",st_usr_prfl.c_user_id);
    fn_userlog(c_ServiceName,"session id FFO_SSSN_ID unpack data :%ld:",st_usr_prfl.l_session_id);
    fn_userlog(c_ServiceName,"pipe id FFO_PIPE_ID :%ld:",st_usr_prfl.c_pipe_id);
    fn_userlog(c_ServiceName,"rout crt FFO_ROUT_CRT :%s:",st_usr_prfl.c_rout_crt);
    fn_userlog(c_ServiceName,"contract id FFO_EBA_CNTRCT_ID :%s:",st_cntrct.l_eba_cntrct_id);
    fn_userlog(c_ServiceName,"exchange id FFO_XCHNG_CD :%s:",st_cntrct.c_xchng_cd);
    fn_userlog(c_ServiceName,"product type FFO_PRDCT_TYP :%c:",st_cntrct.c_prd_typ);
    fn_userlog(c_ServiceName,"stock underlying FFO_UNDRLYNG :%s:",st_cntrct.c_undrlyng);
    fn_userlog(c_ServiceName,"expire date FFO_EXPRY_DT :%s:",st_cntrct.c_expry_dt);
    fn_userlog(c_ServiceName,"exer type FFO_EXER_TYP:%s:",st_cntrct.c_exrc_typ);
    fn_userlog(c_ServiceName,"option type FFO_OPT_TYP :%c:",st_cntrct.c_opt_typ);
    fn_userlog(c_ServiceName,"strike price FFO_STRK_PRC :%ld:",st_cntrct.l_strike_prc); 
    fn_userlog(c_ServiceName,"indstk FFO_CTGRY_INDSTK :%s:",st_cntrct.c_ctgry_indstk);
    fn_userlog(c_ServiceName,"ca lvl FFO_CA_LVL :%c:",st_cntrct.l_ca_lvl);
    fn_userlog(c_ServiceName,"request type FFO_RQST_TYP :%s:",st_cntrct.c_rqst_typ);

  }



	
	
  if (Fget32(ptr_fml_ibuf,FFO_BAT_TAG,0,(char *)sql_ifx_acc_id.arr,0)==-1)
  {
    if( Ferror32 == FNOTPRES )
    {
      strcpy((char *)sql_ifx_acc_id.arr, "0");
    }
    else
    {
      fn_errlog( c_ServiceName, "S31010", SQLMSG, c_errmsg  );
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }
  }

  SETLEN(sql_ifx_acc_id);


	MEMSET(c_ven_id);
	
	i_returncode = Fget32 ( ptr_fml_ibuf, FFO_UPLD_MTCH_FLG, 0, (char *)&c_apisrc_flg, 0 );
	if( i_returncode == -1 && Ferror32 != FNOTPRES )
	{
      fn_errlog( c_ServiceName, "S31015", FMLMSG, c_errmsg  );
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
	}

	if( DEBUG_MSG_LVL_1 ) 
	{
		fn_userlog(c_ServiceName,"API Source Flag :%c:",c_apisrc_flg);
	}

	if (c_apisrc_flg == 'A') /*** API Call ***/
	{
		if (Fget32(ptr_fml_ibuf,FFO_USER_CODE,0,(char *)c_ven_id.arr, 0) == -1 )	/*** Get vendor user id (IAD_USER_ID) from API using Public Key ***/
		{
			if( Ferror32 == FNOTPRES )
			{
				fn_userlog(c_ServiceName,"Normal call");
				strcpy(c_ven_id.arr,"%");
			}
			else
			{
				fn_errlog( c_ServiceName, "S31020", FMLMSG, c_errmsg  );
				Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
			}
		}

    MEMSET(c_user_id);
    strcpy ( c_user_id, st_usr_prfl.c_user_id);

    
   if ( strcmp(c_ven_id.arr,"%") != 0)   
   { 

     i_returncode = fn_chk_vendor( c_ServiceName,
                                    c_user_id,
			                              c_ven_id.arr,
                      							c_ven_nm,
                        			      &st_err_msg
                      			    );    
     if ( i_returncode == -1 )
     {
        fn_errlog( c_ServiceName, "S31025","Error in function fn_chk_vendor",c_errmsg);
        Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
     } 

    } 

		SETLEN(c_ven_id);

		if( DEBUG_MSG_LVL_1 ) 
		{
			fn_userlog(c_ServiceName,"Vendor Id = ESP_ID is :%s: Vendor Name:%s:",c_ven_id.arr,c_ven_nm);
		}
		
		if(strcmp(c_ven_nm,"SENSIBULL") == 0 )
		{

			if( c_user_id[0] == BPID )
			{
				fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst,Sensibull is desabled");
        fn_errlog( c_ServiceName, "B35018", "",c_errmsg );
				strcpy(c_errmsg,"Since you are Attached to a Direct Business Catalyst,Sensibull is desabled");
				Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
			}

			EXEC SQL
        SELECT  ICD_CUST_TYPE
        INTO    :sql_icd_cust_type
        FROM    ICD_INFO_CLIENT_DTLS,
        IAI_INFO_ACCOUNT_INFO
        WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
        AND     IAI_MATCH_ACCOUNT_NO  = :c_mtch_accnt_no;
      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31030",SQLMSG,c_errmsg);
				Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
      }

			SETNULL(sql_icd_cust_type);

      if(strcmp(sql_icd_cust_type.arr,"NRI") == 0)
      {
        fn_userlog( c_ServiceName, "NRI Customer Trying To Place Order from SENSIBULL");
        fn_errlog( c_ServiceName, "S31035", "NRI Customer can not access Orderbook from SENSIBULL",c_errmsg);
        strcpy(c_errmsg," NRI Customer Trying To Place Order from SENSIBULL.");
				Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
      }
		}
		else
		{
      fn_userlog(c_ServiceName,"Call from Vendor with ESP_ID :%s: Vendor Name:%s:",c_ven_id.arr,c_ven_nm);  /** ver 6.6 **/
		}
	}
	else 
	{
		strcpy(c_ven_id.arr,"%");
	}

	SETLEN(c_ven_id);
  
  if( DEBUG_MSG_LVL_0 )   
  {
    fn_userlog(c_ServiceName,"ifx acc id is <%s>",(char *)sql_ifx_acc_id.arr);
  } 

  if (strcmp((char *)sql_ifx_acc_id.arr,"0")!=0)
  {
    EXEC SQL
      SELECT  count(*)
      INTO    :cnt_rec
      FROM    uac_usr_accnts,ifx_usr_mstr
      WHERE   ifx_acc_id          = :sql_ifx_acc_id
      AND     ifx_usr_id          = uac_usr_id
      AND     uac_clm_mtch_accnt  = :c_mtch_accnt_no;

    if (SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31040", SQLMSG, c_errmsg  );
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }
     if (cnt_rec > 0)
    {
      st_usr_prfl.l_session_id=0;
    }
		else if (cnt_rec==0)
    {
      fn_errlog( c_ServiceName, "B31029",DEFMSG, c_errmsg  );
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      /*userlog("Value of SQLCODE after select :%d:",SQLCODE);*/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }
  }

  if( DEBUG_MSG_LVL_0 )  
  {
		fn_userlog(c_ServiceName, "session id for order book <%ld><%s><%c><%s><%s>", st_usr_prfl.l_session_id,c_mtch_accnt_no,c_apisrc_flg,c_ven_nm,c_ven_id.arr); 
  }


	if (st_usr_prfl.l_session_id !=0)	 
	{
		i_returncode = fn_chk_sssn( c_ServiceName, 
																&st_usr_prfl,
   	                           &st_err_msg ) ;

  	if ( i_returncode == -1 )
  	{
     	Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
     	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
  	}
	}
	
	strcpy ( ( char * )c_exchange_cd, st_cntrct.c_xchng_cd );
	strcpy ( ( char * )c_underlying, st_cntrct.c_undrlyng );
	strcpy ( ( char * )c_expiry_dt.arr, st_cntrct.c_expry_dt );
  SETLEN ( c_expiry_dt );
	strcpy ( c_pipe_id, st_usr_prfl.c_pipe_id);
	c_exercise_type  = st_cntrct.c_exrc_typ; 
	c_option_type    = st_cntrct.c_opt_typ; 
	li_strike_price  = st_cntrct.l_strike_prc;

	i_err[0] = Fget32( ptr_fml_ibuf, FFO_OPERATION_TYP, 0, (char *)&c_opr_typ, 0 );
  i_ferr [0] = Ferror32;

	if ( i_err[0] == -1 )
	{
		fn_errlog( c_ServiceName, "S31045", FMLMSG, c_errmsg  );
    Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
	}
 
   i_err[0] = Fget32( ptr_fml_ibuf, FFO_DWL_FLG,0,(char *)&c_chk_new_site_flg,0);
    i_ferr [0] = Ferror32;

  if ( i_err[0] == -1 && i_ferr [0]!= FNOTPRES )
  {
    fn_errlog( c_ServiceName, "S31050", FMLMSG, c_errmsg  );
    Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
   fn_userlog(c_ServiceName," Flag for new Site ---------%c:", c_chk_new_site_flg);
  } 

  
  if( DEBUG_MSG_LVL_0 ) 
  {
  	fn_userlog(c_ServiceName," Flag for new Site ---------%c:", c_chk_new_site_flg);
		fn_userlog(c_ServiceName,"Order Book Operation Type Is :%c:",c_opr_typ);
  }

	if ( c_opr_typ == EXCHNG_ACK_AND_PIPE_ID_IP )
	{
		i_err[0] = 0;
		i_ferr[0] = 0;

		i_err[0] = Fget32( ptr_fml_ibuf, FFO_ACK_NMBR, 0,(char *)c_xchng_ack, 0 );
  	i_ferr [0] = Ferror32;

		if ( i_err[0] == -1 )
		{
			fn_errlog( c_ServiceName, "S31055", FMLMSG, c_errmsg  );
    	Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
		}
	}

	MEMSET(c_ordr_ref);
  MEMSET(c_advisor_id);   
   
	i_err[1] = Fget32( ptr_fml_ibuf, FFO_ORDR_STTS, 0,
                                   (char *)&c_order_stts, 0 );
  i_ferr [1] = Ferror32;

	i_err[2] = Fget32( ptr_fml_ibuf, FFO_FROM_DT, 0,
                                   (char *)c_frm_dt.arr, 0 );
  i_ferr [2] = Ferror32;

	i_err[3] = Fget32( ptr_fml_ibuf, FFO_TO_DT, 0,
                                   (char *)c_to_dt.arr, 0 );
  i_ferr [3] = Ferror32;

	i_err[4] = Fget32( ptr_fml_ibuf, FFO_ORDR_RFRNC, 0,
																	(char *)c_ordr_ref.arr, 0 );   

  i_ferr [4] = Ferror32;									

  i_err[5] = Fget32( ptr_fml_ibuf, FFO_USER_CODE, 0,
                                   (char *)c_advisor_id, 0 );
  i_ferr [5] = Ferror32;
   
   i_err[6] = Fget32( ptr_fml_ibuf, FFO_EX_ORDR_TYP, 0,
                                    (char *)&c_sys_ordr_flg, 0 );
  i_ferr [6] = Ferror32;  
  
  i_err[7] = Fget32( ptr_fml_ibuf, FFO_NKD_BLKD_FLG, 0,
                                    (char *)&c_1click_rcmflg, 0 );
  i_ferr [7] = Ferror32;
  
  for ( i_cnt = 1;  i_cnt <= 7; i_cnt++ )     
	{
		if ( i_err[i_cnt] == -1 && i_ferr[i_cnt] != FNOTPRES )
		{
			fn_errlog( c_ServiceName, "S31060", Fstrerror32( i_ferr[i_cnt] ), 
								 c_errmsg  );
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
		}
		else if ( i_err[i_cnt] == -1 && i_ferr[i_cnt] == FNOTPRES )
		{
			switch ( i_cnt )
			{
				case 1:
					c_order_stts = '%';
					break;
				case 2:
				case 3:
					c_date_flag = 'N';
					break;
        case 5:                       
          strcpy( c_advisor_id, "NA");
          break;
        case 6:
          c_sys_ordr_flg = 'N' ;        
          break;
        case 7:
          c_1click_rcmflg = 'N' ;          
          break;
			}
		}
	}


	SETLEN( c_frm_dt );
	SETLEN( c_to_dt );

	if( DEBUG_MSG_LVL_0 )          
  {
    fn_userlog(c_ServiceName, " The From date is :%s: and To date is :%s:",c_frm_dt.arr,c_to_dt.arr);   /** Ver 4.4 **/
  }


  if( DEBUG_MSG_LVL_0 )          
  {
    fn_userlog(c_ServiceName, " The sys order flag is  :%c:",c_sys_ordr_flg); 
     fn_userlog(c_ServiceName, " Order status flag is :%c:",c_order_stts);
     fn_userlog(c_ServiceName," advisor id is :%s:",c_advisor_id);
  }

 if( c_opr_typ != 'V' ) 
 {
	if ( c_date_flag == 'Y' )
	{
	

		EXEC SQL
       SELECT to_char(to_date(:c_frm_dt,'DD-MM-YYYY'),'DD-MON-YYYY'),
              to_char(to_date(:c_to_dt,'DD-MM-YYYY'),'DD-MON-YYYY')
       INTO   :c_frm_dt,
              :c_to_dt
       FROM   dual;

    if(SQLCODE != 0)
    {
      fn_errlog( c_ServiceName, "S31065", SQLMSG, c_errmsg  );
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }
		SETNULL( c_frm_dt );
  	SETNULL( c_to_dt );



		if ( strcmp(c_exchange_cd,"NFO")	==	0	)
		{
			strcpy(c_min_pipe_id,"00");
			strcpy(c_max_pipe_id,"00");
		}
		else if ( strcmp(c_exchange_cd,"BFO")  ==  0 )
		{
			strcpy(c_min_pipe_id,"A0");
			strcpy(c_max_pipe_id,"A0");
		}
		else if ( strcmp(c_exchange_cd,"ALL")	==	0	)
		{
			 strcpy(c_min_pipe_id,"00");
 			 strcpy(c_max_pipe_id,"A0");
		}

		strcpy ( c_min_ref_num, (char *)fn_getref ( c_ServiceName, 
   		                                          c_frm_dt.arr, 
																								c_min_pipe_id,			
       		                                      MIN,
         		                                    c_errmsg ) );
		strcpy ( c_max_ref_num, (char *)fn_getref ( c_ServiceName, 
   		                                          c_to_dt.arr, 
                                                c_max_pipe_id,    
       		                                      MAX,
         		                                    c_errmsg ) );
  }
  

  if( DEBUG_MSG_LVL_0 )   
  {
    fn_userlog(c_ServiceName," c_exchange_cd  :%s:",c_exchange_cd);
       
  }

  if ( strcmp(c_exchange_cd,"ALL") == 0)
  {
  	memset(c_exchange_cd,'\0',sizeof(c_exchange_cd));
  	strcpy(c_exchange_cd,"%");
   	rtrim(c_exchange_cd);
   	fn_userlog(c_ServiceName," c_exchange_cd  :%s:",c_exchange_cd);
  }

	if ( st_cntrct.c_prd_typ == ALL )
	{
		c_product_typ = '%';
		c_is_flg = '%';							
	}
	else
	{
		c_product_typ = st_cntrct.c_prd_typ;
	}

	if( c_product_typ == 'L' )			
	{
		c_is_flg = 'D';
		c_product_typ = '%';
	}

	if ( c_order_stts == ALL )
	{
		c_ordr_stts = '%';
	}
	else
	{
		c_ordr_stts = c_order_stts;
	}

	if( DEBUG_MSG_LVL_0 ) 
	{
		fn_userlog( c_ServiceName," IS FLG IS :%c:",c_is_flg );
		fn_userlog( c_ServiceName," PRODUCT TYPE IS :%c:", c_product_typ );
	}


	MEMSET(c_cntrct_num); 


	/***	Below Changes carried out for

	1] For days Today(strcmp fail): The record can exist only and only in current table. Hence We compare and ask system to check only in current table.
	2] For days Today + past(Strcmp success) : Record may exist in Current table or in History table. Hence we will query the History table as well.
	3] The Where Exist query on history table was taking much of the time...hence replaced with below logic.
	4] If below query fails then we are setting flag as 1 so that we can fetch data from both current and history table.

	*******************************************/

	MEMSET(c_ordbk_seq);
	MEMSET(c_nxt_trd_dt);
	MEMSET(c_nxt_trade_dt);            

	EXEC SQL
    SELECT TO_CHAR(EXG_NXT_TRD_DT,'YYYYMMDD')||LPAD(TO_CHAR(DECODE((LAST_NUMBER - 1),MAX_VALUE,0,(LAST_NUMBER - 1))),8,'0'),
           to_char(to_date(EXG_NXT_TRD_DT,'DD-Mon-YYYY'),'YYYYMMDD' ),
					 TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY')                             
    INTO  :c_ordbk_seq,
          :c_nxt_trd_dt,
					:c_nxt_trade_dt                                         
    FROM  USER_SEQUENCES,EXG_XCHNG_MSTR
    WHERE SEQUENCE_NAME = 'DFO_DL_FO_ORDBK_SEQ'
    AND   EXG_XCHNG_CD  = 'NFO';

	if ( SQLCODE != 0 )
  {
   	fn_userlog(c_ServiceName,"Failed to fetch Order Book Sequence No and Next Trade Date");
   	li_rec_cnt_status_date = 1;   /*** Fetch records from both main table and history table ***/
  }
  else
  {
  	if( DEBUG_MSG_LVL_0 )  
    {
    	fn_userlog(c_ServiceName,"Exchange Next Trade Date c_nxt_trd_dt Is :%s:.",c_nxt_trd_dt.arr);
      fn_userlog(c_ServiceName,"From Date Min Ref No Is :%s:",c_min_ref_num);
    }

    if (strncmp(c_min_ref_num,c_nxt_trd_dt.arr,8) < 0 )   /*** From Date is less than Next Trade Date ***/
    {
			if( DEBUG_MSG_LVL_0 ) 
      { 
      	fn_userlog(c_ServiceName,"Inside History Fetch Counter Set.");
      }
 
    	li_rec_cnt_status_date = 1;     /*** Fetch records from both main table and history table ***/
    }
    else
    {
			if( DEBUG_MSG_LVL_0 ) 
      {
      	fn_userlog(c_ServiceName,"Inside Current Fetch Counter Set.");
    	}

      li_rec_cnt_status_date = 0;     /*** Fetch records from main table only ***/
    }
  }

	SETNULL(c_ordbk_seq);
	SETNULL(c_nxt_trd_dt);
	SETNULL(c_nxt_trade_dt);           


	EXEC SQL ALLOCATE :sys_cursor;

	if ( c_date_flag == 'N' &&  c_opr_typ != ORDER_REF_IP )   
	{
		fn_userlog( c_ServiceName,"From/To Dates are not Found in the Buffer" );
		Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
	}
  
	if(strcmp( c_mtch_accnt_no,"*")== 0)
  {
		if( DEBUG_MSG_LVL_0 ) 
		{
			fn_userlog(c_ServiceName,"Inside Match account is *   ");
		}

		strcpy ( c_user_id, st_usr_prfl.c_user_id);

  if(strcmp(c_advisor_id, "NA") == 0)        
  {
		if ( (st_usr_prfl.c_user_id[0] == BPID) )
		{
			if( DEBUG_MSG_LVL_0 ) 
			{
				fn_userlog(c_ServiceName,"DBC USER");
			}


     
			if( DEBUG_MSG_LVL_0 )
 			{         
				fn_userlog(c_ServiceName,"li_rec_cnt_status_date [%ld]",li_rec_cnt_status_date);
				fn_userlog(c_ServiceName,"c_min_ref_num [%s]",c_min_ref_num);
				fn_userlog(c_ServiceName,"c_max_ref_num [%s]",c_max_ref_num); 
			}

      if ( li_rec_cnt_status_date != 1 )
			{
				EXEC SQL	EXECUTE
					BEGIN
						OPEN	:sys_cursor	FOR
						SELECT	FOD_CLM_MTCH_ACCNT,  
										FOD_ORDR_RFRNC, 
										FOD_PIPE_ID, 
										FOD_XCHNG_CD, 
										FOD_PRDCT_TYP,
										FOD_INDSTK,
										FOD_UNDRLYNG, 
										to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ), 
										FOD_EXER_TYP, 
										FOD_OPT_TYP, 
										FOD_STRK_PRC,
										FOD_ORDR_FLW, 
										FOD_LMT_MRKT_SL_FLG, 
										NVL( FOD_DSCLSD_QTY, 0 ), 
										FOD_ORDR_TOT_QTY, 
										NVL( FOD_LMT_RT, 0 ), 
										NVL( FOD_STP_LSS_TGR, 0 ), 
										FOD_ORDR_TYPE, 
										to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ), 
										to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ), 
										FOD_ORDR_STTS,
										FOD_EXEC_QTY, 
										FOD_CNCL_QTY, 
										FOD_EXPRD_QTY, 
										NVL( FOD_SPRD_ORDR_REF, ' ' ),
										NVL( FOD_SETTLOR, ' ' ),
										FOD_MDFCTN_CNTR,
										NVL( FOD_ACK_NMBR, ' ' ),
										FOD_SPL_FLAG,
										NVL( FOD_REMARKS, ' ' ),
										NVL( FOD_CHANNEL,'*'),  
										NVL( FOD_BP_ID,' '),
										NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),		
										NVL(FOD_FC_FLAG,' '),																
										NVL(FOD_SPN_FLG,'N'),																
										NVL(FOD_TRD_VAL,0),																	
									  NVL(FOD_TRD_BRKG,0),                              	
                    NVL(FOD_CNTRCTNT_NMBR,'*'),													
                    FOD_SLTP_ORDR_RFRNC,                                
                    FOD_FC_FLAG,                                        
										NVL( FOD_PRCIMPV_FLG, 'N'),													
										NVL(FOD_ESP_ID,'*'),																	
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
						FROM		FOD_FO_ORDR_DTLS,CLM_CLNT_MSTR,FSB_FO1CLICK_STRTGY_BUCKTDTLS	
						WHERE		FOD_CLM_MTCH_ACCNT =		CLM_MTCH_ACCNT	 
            AND   	FOD_XCHNG_CD       LIKE :c_exchange_cd  
						AND			FOD_PRDCT_TYP			 LIKE :c_product_typ
						AND			FOD_ORDR_STTS			 LIKE :c_ordr_stts 
						AND 		FOD_ORDR_STTS			 <>		'Y'	
						AND			FOD_IS_FLG				 LIKE	:c_is_flg 
						AND			CLM_BP_ID					 	=		:c_user_id 			
      			AND		
									 (  
											( FOD_ORDR_RFRNC			  >=  :c_min_ref_num 
												AND	  FOD_ORDR_RFRNC  <   :c_max_ref_num ) OR
											( FOD_ORDR_RFRNC				<		:c_min_ref_num 
												AND	FOD_TRD_DT >=	to_date(:c_frm_dt,'dd-mon-yyyy') )  
									 )
            AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'       
            AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
            AND     NVL(FSB_CUST_RCMEND_FLG,'N') LIKE : c_1click_rcmflg
						ORDER BY	FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT, FOD_ORDR_RFRNC DESC; 
					END;
				END-EXEC;
			}
			
			else if ( li_rec_cnt_status_date == 1 )
			{
				EXEC SQL	EXECUTE
					BEGIN
						OPEN	:sys_cursor	FOR
						SELECT  FOD_CLM_MTCH_ACCNT, 
										FOD_ORDR_RFRNC,
										FOD_PIPE_ID, 
										FOD_XCHNG_CD, 
										FOD_PRDCT_TYP,
										FOD_INDSTK,
										FOD_UNDRLYNG, 
										to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ), 
										FOD_EXER_TYP, 
										FOD_OPT_TYP, 
										FOD_STRK_PRC,
										FOD_ORDR_FLW, 
										FOD_LMT_MRKT_SL_FLG, 
										NVL( FOD_DSCLSD_QTY, 0 ), 
										FOD_ORDR_TOT_QTY, 
										NVL( FOD_LMT_RT, 0 ), 
										NVL( FOD_STP_LSS_TGR, 0 ), 
										FOD_ORDR_TYPE, 
										to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ), 
										to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ), 
										FOD_ORDR_STTS,
										FOD_EXEC_QTY, 
										FOD_CNCL_QTY, 
										FOD_EXPRD_QTY, 
										NVL( FOD_SPRD_ORDR_REF, ' ' ),
										NVL( FOD_SETTLOR, ' ' ),
										FOD_MDFCTN_CNTR,
										NVL( FOD_ACK_NMBR, ' ' ),
										FOD_SPL_FLAG,
										NVL( FOD_REMARKS, ' ' ),
										NVL( FOD_CHANNEL,'*'),
										NVL( FOD_BP_ID,' '),
										NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),	
										NVL(FOD_FC_FLAG,' '),														
										NVL(FOD_SPN_FLG,'N'),															
										NVL(FOD_TRD_VAL,0),                               
                    NVL(FOD_TRD_BRKG,0),                              
                    NVL(FOD_CNTRCTNT_NMBR,'*'),                        
                    FOD_SLTP_ORDR_RFRNC,                                
                    FOD_FC_FLAG,                                         
										NVL( FOD_PRCIMPV_FLG, 'N'),                          
										NVL(FOD_ESP_ID,'*'),
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
						FROM		FOD_FO_ORDR_DTLS,CLM_CLNT_MSTR,FSB_FO1CLICK_STRTGY_BUCKTDTLS
						WHERE		FOD_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
            AND  		FOD_XCHNG_CD       LIKE :c_exchange_cd   
						AND			FOD_PRDCT_TYP			 LIKE :c_product_typ
						AND			FOD_ORDR_STTS			 LIKE :c_ordr_stts 
						AND 		FOD_ORDR_STTS			 <>		'Y'	
						AND			FOD_IS_FLG				 LIKE	:c_is_flg
			  	  AND			CLM_BP_ID					 =		:c_user_id 			
          	AND		
										(
											( FOD_ORDR_RFRNC				>= :c_min_ref_num 
												AND	  FOD_ORDR_RFRNC	<  :c_max_ref_num ) OR
											( FOD_ORDR_RFRNC				<	 :c_min_ref_num 
                        AND FOD_TRD_DT >= to_date(:c_frm_dt,'dd-mon-yyyy') )  
										)
            AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'        
            AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
            AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg
            UNION ALL
						SELECT  FOD_CLM_MTCH_ACCNT, 
										FOD_ORDR_RFRNC,
										FOD_PIPE_ID, 
										FOD_XCHNG_CD, 
										FOD_PRDCT_TYP,
										FOD_INDSTK,
										FOD_UNDRLYNG, 
										to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ), 
										FOD_EXER_TYP, 
										FOD_OPT_TYP, 
										FOD_STRK_PRC,
										FOD_ORDR_FLW, 
										FOD_LMT_MRKT_SL_FLG, 
										NVL( FOD_DSCLSD_QTY, 0 ), 
										FOD_ORDR_TOT_QTY, 
										NVL( FOD_LMT_RT, 0 ), 
										NVL( FOD_STP_LSS_TGR, 0 ), 
										FOD_ORDR_TYPE, 
										to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ), 
										to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ), 
										FOD_ORDR_STTS,
										FOD_EXEC_QTY, 
										FOD_CNCL_QTY, 
										FOD_EXPRD_QTY, 
										NVL( FOD_SPRD_ORDR_REF, ' ' ),
										NVL( FOD_SETTLOR, ' ' ),
										FOD_MDFCTN_CNTR,
										NVL( FOD_ACK_NMBR, ' ' ),
										FOD_SPL_FLAG,
										NVL( FOD_REMARKS, ' ' ),
										NVL( FOD_CHANNEL,'*'),  
										NVL( FOD_BP_ID,' '),
										NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),	
										NVL(FOD_FC_FLAG,' '),															
										NVL(FOD_SPN_FLG,'N'),															
                    NVL(FOD_TRD_VAL,0),                               
                    NVL(FOD_TRD_BRKG,0),                              
                    NVL(FOD_CNTRCTNT_NMBR,'*'),                        
                    FOD_SLTP_ORDR_RFRNC,                               
                    FOD_FC_FLAG,                                         
										NVL( FOD_PRCIMPV_FLG, 'N'),                          
										NVL(FOD_ESP_ID,'*'),                                                
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
						FROM  FOD_FO_ORDR_DTLS_HSTRY,CLM_CLNT_MSTR,FSB_FO1CLICK_STRTGY_BUCKTDTLS
						WHERE FOD_CLM_MTCH_ACCNT = CLM_MTCH_ACCNT
            AND FOD_XCHNG_CD       LIKE :c_exchange_cd 
						AND	  FOD_PRDCT_TYP			 LIKE :c_product_typ
						AND	  FOD_ORDR_STTS			 LIKE :c_ordr_stts 
						AND 	FOD_ORDR_STTS			 <>		'Y'	
						AND   FOD_IS_FLG				 LIKE :c_is_flg 
						AND   CLM_BP_ID					 =		:c_user_id		
        		AND		
									(  
										( FOD_ORDR_RFRNC				>=    :c_min_ref_num 
											AND	  FOD_ORDR_RFRNC	<     :c_max_ref_num ) OR
										(FOD_ORDR_RFRNC					<			:c_min_ref_num 
                      AND FOD_TRD_DT >= to_date(:c_frm_dt,'dd-mon-yyyy') )  
									)
            AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'        
            AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
            AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg;
					END;
				END-EXEC;
			}
		} 
		
		else
		{
			if( DEBUG_MSG_LVL_0 ) 
			{
				fn_userlog(c_ServiceName,"NON DBC USER");
			}



			if( DEBUG_MSG_LVL_0 ) 
			{          
				fn_userlog(c_ServiceName,"li_rec_cnt_status_date [%ld]",li_rec_cnt_status_date);
				fn_userlog(c_ServiceName,"c_min_ref_num [%s]",c_min_ref_num);
				fn_userlog(c_ServiceName,"c_max_ref_num [%s]",c_max_ref_num); 
			}

 	 		if ( li_rec_cnt_status_date != 1 )
			{
				EXEC SQL	EXECUTE
					BEGIN
						OPEN	:sys_cursor	FOR
						SELECT	FOD_CLM_MTCH_ACCNT, 
										FOD_ORDR_RFRNC, 
										FOD_PIPE_ID, 
										FOD_XCHNG_CD, 
										FOD_PRDCT_TYP,
										FOD_INDSTK,
										FOD_UNDRLYNG, 
										to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ), 
										FOD_EXER_TYP, 
										FOD_OPT_TYP, 
										FOD_STRK_PRC,
										FOD_ORDR_FLW, 
										FOD_LMT_MRKT_SL_FLG, 
										NVL( FOD_DSCLSD_QTY, 0 ), 
										FOD_ORDR_TOT_QTY, 
										NVL( FOD_LMT_RT, 0 ), 
										NVL( FOD_STP_LSS_TGR, 0 ), 
										FOD_ORDR_TYPE, 
										to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ), 
										to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ), 
										FOD_ORDR_STTS,
										FOD_EXEC_QTY, 
										FOD_CNCL_QTY, 
										FOD_EXPRD_QTY, 
										NVL( FOD_SPRD_ORDR_REF, ' ' ),
										NVL( FOD_SETTLOR, ' ' ),
										FOD_MDFCTN_CNTR,
										NVL( FOD_ACK_NMBR, ' ' ),
										FOD_SPL_FLAG,
										NVL( FOD_REMARKS, ' ' ),
										NVL( FOD_CHANNEL,'*'),                    
										NVL( FOD_BP_ID,' '),
										NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),	
										NVL(FOD_FC_FLAG,' '),															
										NVL(FOD_SPN_FLG,'N'),															
                    NVL(FOD_TRD_VAL,0),                              
                    NVL(FOD_TRD_BRKG,0),                             
                    NVL(FOD_CNTRCTNT_NMBR,'*'),                        
                     FOD_SLTP_ORDR_RFRNC,                            
                    FOD_FC_FLAG,                                         
										NVL( FOD_PRCIMPV_FLG, 'N'),                         
										NVL(FOD_ESP_ID,'*'),																	
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
						FROM		FOD_FO_ORDR_DTLS,UAC_USR_ACCNTS,FSB_FO1CLICK_STRTGY_BUCKTDTLS		
						WHERE		FOD_CLM_MTCH_ACCNT =		UAC_CLM_MTCH_ACCNT	
            AND      FOD_XCHNG_CD      LIKE :c_exchange_cd  /*** Ver 2.8 ***/
						AND			FOD_PRDCT_TYP			 LIKE :c_product_typ
						AND			FOD_ORDR_STTS			 LIKE :c_ordr_stts 
						AND 		FOD_ORDR_STTS			 <>		'Y'										
						AND			FOD_IS_FLG				 LIKE :c_is_flg             
						AND			UAC_USR_ID				 =		:c_user_id
  					AND		
										(  
											( FOD_ORDR_RFRNC				>=    :c_min_ref_num 
												AND	  FOD_ORDR_RFRNC	<     :c_max_ref_num ) OR
											(FOD_ORDR_RFRNC					< :c_min_ref_num 
                       AND FOD_TRD_DT >= to_date(:c_frm_dt,'dd-mon-yyyy') ) 
										)
            AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'        
            AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
            AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg
          ORDER BY FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT, FOD_ORDR_RFRNC DESC; 
					END;
				END-EXEC;
		   }
		
			 else if ( li_rec_cnt_status_date == 1 ) 
			 {
					EXEC SQL	EXECUTE
						BEGIN
							OPEN	:sys_cursor	FOR
							SELECT  FOD_CLM_MTCH_ACCNT, 
											FOD_ORDR_RFRNC,
											FOD_PIPE_ID, 
											FOD_XCHNG_CD, 
											FOD_PRDCT_TYP,
											FOD_INDSTK,
											FOD_UNDRLYNG, 
											to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ), 
											FOD_EXER_TYP, 
											FOD_OPT_TYP, 
											FOD_STRK_PRC,
											FOD_ORDR_FLW, 
											FOD_LMT_MRKT_SL_FLG, 
											NVL( FOD_DSCLSD_QTY, 0 ), 
											FOD_ORDR_TOT_QTY, 
											NVL( FOD_LMT_RT, 0 ), 
											NVL( FOD_STP_LSS_TGR, 0 ), 
											FOD_ORDR_TYPE, 
											to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ), 
											to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ), 
											FOD_ORDR_STTS,
											FOD_EXEC_QTY, 
											FOD_CNCL_QTY, 
											FOD_EXPRD_QTY, 
											NVL( FOD_SPRD_ORDR_REF, ' ' ),
											NVL( FOD_SETTLOR, ' ' ),
											FOD_MDFCTN_CNTR,
											NVL( FOD_ACK_NMBR, ' ' ),
											FOD_SPL_FLAG,
											NVL( FOD_REMARKS, ' ' ),
											NVL( FOD_CHANNEL,'*'),                    
											NVL( FOD_BP_ID,' '),
											NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),	
											NVL(FOD_FC_FLAG,' '),															
											NVL(FOD_SPN_FLG,'N'),															
                    	NVL(FOD_TRD_VAL,0),                               
                    	NVL(FOD_TRD_BRKG,0),                              
                    	NVL(FOD_CNTRCTNT_NMBR,'*'),                        
                      FOD_SLTP_ORDR_RFRNC,                                
                      FOD_FC_FLAG,                                         
										  NVL( FOD_PRCIMPV_FLG, 'N'),                          
											NVL(FOD_ESP_ID,'*'),																	
                      NVL(FSB_STRGY_ID,0),
                      NVL(FSB_PRTFL_NAME,' '),
                      FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
							FROM		FOD_FO_ORDR_DTLS,UAC_USR_ACCNTS,FSB_FO1CLICK_STRTGY_BUCKTDTLS
							WHERE		FOD_CLM_MTCH_ACCNT =		UAC_CLM_MTCH_ACCNT
              AND      FOD_XCHNG_CD      LIKE :c_exchange_cd   
							AND			FOD_PRDCT_TYP			 LIKE :c_product_typ
							AND			FOD_ORDR_STTS      LIKE :c_ordr_stts 
							AND 		FOD_ORDR_STTS		   <>		'Y'										
							AND			FOD_IS_FLG         LIKE :c_is_flg              
							AND			UAC_USR_ID				 =    :c_user_id
  						AND		
										(
											( FOD_ORDR_RFRNC				>=    :c_min_ref_num 
												AND	  FOD_ORDR_RFRNC	<     :c_max_ref_num ) OR
											( FOD_ORDR_RFRNC				<			:c_min_ref_num 
                        AND FOD_TRD_DT >= to_date(:c_frm_dt,'dd-mon-yyyy') )  
										)
              AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'       
              AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
              AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg
							UNION ALL
							SELECT	FOD_CLM_MTCH_ACCNT,
											FOD_ORDR_RFRNC,
											FOD_PIPE_ID, 
											FOD_XCHNG_CD, 
											FOD_PRDCT_TYP,
											FOD_INDSTK,
											FOD_UNDRLYNG, 
											to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ), 
											FOD_EXER_TYP, 
											FOD_OPT_TYP, 
											FOD_STRK_PRC,
											FOD_ORDR_FLW, 
											FOD_LMT_MRKT_SL_FLG, 
											NVL( FOD_DSCLSD_QTY, 0 ), 
											FOD_ORDR_TOT_QTY, 
											NVL( FOD_LMT_RT, 0 ), 
											NVL( FOD_STP_LSS_TGR, 0 ), 
											FOD_ORDR_TYPE, 
											to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ), 
											to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ), 
											FOD_ORDR_STTS,
											FOD_EXEC_QTY, 
											FOD_CNCL_QTY, 
											FOD_EXPRD_QTY, 
											NVL( FOD_SPRD_ORDR_REF, ' ' ),
											NVL( FOD_SETTLOR, ' ' ),
											FOD_MDFCTN_CNTR,
											NVL( FOD_ACK_NMBR, ' ' ),
											FOD_SPL_FLAG,
											NVL( FOD_REMARKS, ' ' ),
											NVL( FOD_CHANNEL,'*'),                    
											NVL( FOD_BP_ID,' '),
											NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),
											NVL(FOD_FC_FLAG,' '),															
											NVL(FOD_SPN_FLG,'N'),															
                    	NVL(FOD_TRD_VAL,0),                             
                    	NVL(FOD_TRD_BRKG,0),                             
                    	NVL(FOD_CNTRCTNT_NMBR,'*'),                       
                      FOD_SLTP_ORDR_RFRNC,                               
                      FOD_FC_FLAG,                                         
											NVL( FOD_PRCIMPV_FLG, 'N'),                          
											NVL(FOD_ESP_ID,'*'),															
                      NVL(FSB_STRGY_ID,0),
                      NVL(FSB_PRTFL_NAME,' '),
                      FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
						 FROM			FOD_FO_ORDR_DTLS_HSTRY,UAC_USR_ACCNTS,FSB_FO1CLICK_STRTGY_BUCKTDTLS
						 WHERE		FOD_CLM_MTCH_ACCNT = UAC_CLM_MTCH_ACCNT
             AND      FOD_XCHNG_CD    LIKE :c_exchange_cd  
						 AND			FOD_PRDCT_TYP   LIKE :c_product_typ
						 AND			FOD_ORDR_STTS   LIKE :c_ordr_stts 
						 AND			FOD_ORDR_STTS		<> 'Y'											
						 AND			FOD_IS_FLG      LIKE :c_is_flg             
						 AND			UAC_USR_ID = :c_user_id
      			 AND				
										 (  
											( FOD_ORDR_RFRNC				>=    :c_min_ref_num 
												AND	  FOD_ORDR_RFRNC	<     :c_max_ref_num ) OR
											( FOD_ORDR_RFRNC				<			:c_min_ref_num 
                        AND FOD_TRD_DT >= to_date(:c_frm_dt,'dd-mon-yyyy') )  
										 )
             AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'       
             AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
             AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg
            /** ORDER BY FOD_1CLICK_PRTFL_ID,1,2 DESC;						***Ver 1.1 **/
             ORDER BY  FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT, FOD_ORDR_RFRNC DESC; /** Ver 1.1 **/
						END;
					END-EXEC;
			 }
		}
	 }

   else if(strcmp(c_advisor_id, "NA") != 0)
   {



    EXEC SQL
      SELECT 1
      INTO :li_rec_cnt_adv
      FROM DUAL
      WHERE
        trunc(SYSDATE) <> to_date(:c_frm_dt,'DD-MON-YYYY');

   if(( SQLCODE != 0) && ( SQLCODE != NO_DATA_FOUND ))
   {
      fn_errlog( c_ServiceName, "S31070", SQLMSG, c_errmsg  );
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpcommit(0);      
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
   }


    if( DEBUG_MSG_LVL_0 )
    {
   		fn_userlog(c_ServiceName,"li_rec_cnt_adv [%ld]",li_rec_cnt_adv);
    }

    if(c_opr_typ == STATUS_PRODUCT_AND_DATE_IP)
    {
			if( DEBUG_MSG_LVL_0 )
      {
        fn_userlog(c_ServiceName,"Inside Advisor without Underlying");
      }

      if( DEBUG_MSG_LVL_0 )
      {
        fn_userlog(c_ServiceName,"li_rec_cnt_status_date [%ld]",li_rec_cnt_adv);
        fn_userlog(c_ServiceName,"c_min_ref_num [%s]",c_min_ref_num);
        fn_userlog(c_ServiceName,"c_max_ref_num [%s]",c_max_ref_num);
        fn_userlog(c_ServiceName, " The sys order flag is  :%c:",c_sys_ordr_flg); 
      }

      if ( li_rec_cnt_adv != 1 ) 
      {
  

       if ( c_sys_ordr_flg == 'S' )          
         { 
          EXEC SQL  EXECUTE
          BEGIN
            OPEN  :sys_cursor FOR
            SELECT  FOD_CLM_MTCH_ACCNT,
                    FOD_ORDR_RFRNC,
                    FOD_PIPE_ID,
                    FOD_XCHNG_CD,
                    FOD_PRDCT_TYP,
                    FOD_INDSTK,
                    FOD_UNDRLYNG,
                    to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ),
                    FOD_EXER_TYP,
                    FOD_OPT_TYP,
                    FOD_STRK_PRC,
                    FOD_ORDR_FLW,
                    FOD_LMT_MRKT_SL_FLG,
                    NVL( FOD_DSCLSD_QTY, 0 ),
                    FOD_ORDR_TOT_QTY,
                    NVL( FOD_LMT_RT, 0 ),
                    NVL( FOD_STP_LSS_TGR, 0 ),
                    FOD_ORDR_TYPE,
                    to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
                    to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ),
                    FOD_ORDR_STTS,
                    FOD_EXEC_QTY,
                    FOD_CNCL_QTY,
                    FOD_EXPRD_QTY,
                    NVL( FOD_SPRD_ORDR_REF, ' ' ),
                    NVL( FOD_SETTLOR, ' ' ),
                    FOD_MDFCTN_CNTR,
                    NVL( FOD_ACK_NMBR, ' ' ),
                    FOD_SPL_FLAG,
                    NVL( FOD_REMARKS, ' ' ),
                    NVL( FOD_CHANNEL,'*'),
                    NVL( FOD_BP_ID,' '),
                    NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),
                    NVL(FOD_FC_FLAG,' '),
                    NVL(FOD_SPN_FLG,'N'),                               
                    NVL(FOD_TRD_VAL,0),                                 
                    NVL(FOD_TRD_BRKG,0),                        
                    NVL(FOD_CNTRCTNT_NMBR,'*'),                         
                    FOD_SLTP_ORDR_RFRNC,                            
                    FOD_FC_FLAG,                                        
                    NVL( FOD_PRCIMPV_FLG, 'N'),                         
                    NVL(FOD_ESP_ID,'*'),
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/                            
            FROM    FOD_FO_ORDR_DTLS,ACM_ADV_CLNT_MAP,FSB_FO1CLICK_STRTGY_BUCKTDTLS     
            WHERE   FOD_CLM_MTCH_ACCNT = ACM_MTCH_ACCNT
            AND     FOD_XCHNG_CD      LIKE :c_exchange_cd  
            AND     FOD_PRDCT_TYP     LIKE :c_product_typ
            AND     FOD_ORDR_STTS      LIKE :c_ordr_stts
            AND     FOD_ORDR_STTS      <>   'Y'
            AND     FOD_IS_FLG         LIKE :c_is_flg
            AND     ACM_ACTV_FLG       = 'A'             
            AND     ACM_ADVISOR_ID     = :c_advisor_id   
            AND     FOD_CHANNEL        = 'SYS'           
            AND
                    (
                      ( FOD_ORDR_RFRNC        >=    :c_min_ref_num
                        AND   FOD_ORDR_RFRNC  <     :c_max_ref_num ) OR
                      (FOD_ORDR_RFRNC         < :c_min_ref_num
                       AND FOD_TRD_DT >= to_date(:c_frm_dt,'dd-mon-yyyy') )  
                    )
            AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'        
            AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
            AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg
          ORDER BY FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT, FOD_ORDR_RFRNC DESC;
          END;
        END-EXEC;
       } 
       else    
       {
            EXEC SQL  EXECUTE
            BEGIN
            OPEN  :sys_cursor FOR
            SELECT  FOD_CLM_MTCH_ACCNT,
                    FOD_ORDR_RFRNC,
                    FOD_PIPE_ID,
                    FOD_XCHNG_CD,
                    FOD_PRDCT_TYP,
                    FOD_INDSTK,
                    FOD_UNDRLYNG,
                    to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ),
                    FOD_EXER_TYP,
                    FOD_OPT_TYP,
                    FOD_STRK_PRC,
                    FOD_ORDR_FLW,
                    FOD_LMT_MRKT_SL_FLG,
                    NVL( FOD_DSCLSD_QTY, 0 ),
                    FOD_ORDR_TOT_QTY,
                    NVL( FOD_LMT_RT, 0 ),
                    NVL( FOD_STP_LSS_TGR, 0 ),
                    FOD_ORDR_TYPE,
                    to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
                    to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ),
                    FOD_ORDR_STTS,
                    FOD_EXEC_QTY,
                    FOD_CNCL_QTY,
                    FOD_EXPRD_QTY,
                    NVL( FOD_SPRD_ORDR_REF, ' ' ),
                    NVL( FOD_SETTLOR, ' ' ),
                    FOD_MDFCTN_CNTR,
                    NVL( FOD_ACK_NMBR, ' ' ),
                    FOD_SPL_FLAG,
                    NVL( FOD_REMARKS, ' ' ),
                    NVL( FOD_CHANNEL,'*'),
                    NVL( FOD_BP_ID,' '),
                    NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),
                    NVL(FOD_FC_FLAG,' '),
                    NVL(FOD_SPN_FLG,'N'),
                    NVL(FOD_TRD_VAL,0),                          
                    NVL(FOD_TRD_BRKG,0),                                				
                    NVL(FOD_CNTRCTNT_NMBR,'*'),                         
                    FOD_SLTP_ORDR_RFRNC,                         
                    FOD_FC_FLAG,                           
										NVL( FOD_PRCIMPV_FLG, 'N'),          
										NVL(FOD_ESP_ID,'*'),								
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
            FROM    FOD_FO_ORDR_DTLS,CNT_CSE_MAST,FSB_FO1CLICK_STRTGY_BUCKTDTLS
            WHERE   FOD_XCHNG_CD      LIKE :c_exchange_cd  
            AND     FOD_PRDCT_TYP      LIKE :c_product_typ
            AND     FOD_ORDR_STTS      LIKE :c_ordr_stts
            AND     FOD_ORDR_STTS      <>   'Y'
            AND     FOD_IS_FLG         LIKE :c_is_flg
      			AND 		FOD_CSE_ID = CCM_CSE_ID
            AND 		CCM_LOGIN_NAME = :c_advisor_id
            AND
                    (
                      ( FOD_ORDR_RFRNC        >=    :c_min_ref_num
                        AND   FOD_ORDR_RFRNC  <     :c_max_ref_num ) OR
                      (FOD_ORDR_RFRNC         < :c_min_ref_num
                       AND FOD_TRD_DT >= to_date(:c_frm_dt,'dd-mon-yyyy') ) 
                    )
            AND     NVL(FOD_1CLICK_FLG,'N') = 'Y' 
            AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
            AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg
          ORDER BY FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT, FOD_ORDR_RFRNC DESC;
          END;
        END-EXEC;
       }
     }
   
       else if ( li_rec_cnt_adv == 1 )
 
       {
          if ( c_sys_ordr_flg == 'S' )                       
            {   

            fn_userlog(c_ServiceName, " inside query for fod history"); 

                     
            EXEC SQL  EXECUTE
            BEGIN
            OPEN      :sys_cursor FOR
            SELECT    FOD_CLM_MTCH_ACCNT,
                      FOD_ORDR_RFRNC,
                      FOD_PIPE_ID,
                      FOD_XCHNG_CD,
                      FOD_PRDCT_TYP,
                      FOD_INDSTK,
                      FOD_UNDRLYNG,
                      to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ),
                      FOD_EXER_TYP,
                      FOD_OPT_TYP,
                      FOD_STRK_PRC,
                      FOD_ORDR_FLW,
                      FOD_LMT_MRKT_SL_FLG,
                      NVL( FOD_DSCLSD_QTY, 0 ),
                      FOD_ORDR_TOT_QTY,
                      NVL( FOD_LMT_RT, 0 ),
                      NVL( FOD_STP_LSS_TGR, 0 ),
                      FOD_ORDR_TYPE,
                      to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
                      to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ),
                      FOD_ORDR_STTS,
                      FOD_EXEC_QTY,
                      FOD_CNCL_QTY,
                      FOD_EXPRD_QTY,
                      NVL( FOD_SPRD_ORDR_REF, ' ' ),
                      NVL( FOD_SETTLOR, ' ' ),
                      FOD_MDFCTN_CNTR,
                      NVL( FOD_ACK_NMBR, ' ' ),
                      FOD_SPL_FLAG,
                      NVL( FOD_REMARKS, ' ' ),
                      NVL( FOD_CHANNEL,'*'),
                      NVL( FOD_BP_ID,' '),
                      NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),  
                      NVL(FOD_FC_FLAG,' '),                             
                      NVL(FOD_SPN_FLG,'N'),                            
                      NVL(FOD_TRD_VAL,0),                             
                      NVL(FOD_TRD_BRKG,0),                           
                      NVL(FOD_CNTRCTNT_NMBR,'*'),                   
                      FOD_SLTP_ORDR_RFRNC,                         
                      FOD_FC_FLAG,                                
                      NVL( FOD_PRCIMPV_FLG, 'N'),                
                      NVL(FOD_ESP_ID,'*'),
                      NVL(FSB_STRGY_ID,0),
                      NVL(FSB_PRTFL_NAME,' '),
                      FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/                       
             FROM     FOD_FO_ORDR_DTLS_HSTRY,ACM_ADV_CLNT_MAP,FSB_FO1CLICK_STRTGY_BUCKTDTLS  
             WHERE    FOD_CLM_MTCH_ACCNT = ACM_MTCH_ACCNT 
             AND      FOD_XCHNG_CD    LIKE :c_exchange_cd
             AND      FOD_PRDCT_TYP   LIKE :c_product_typ
             AND      FOD_ORDR_STTS   LIKE :c_ordr_stts
             AND      FOD_ORDR_STTS   <> 'Y'
             AND      FOD_IS_FLG      LIKE :c_is_flg
             AND      FOD_CHANNEL     = 'SYS'                     
             AND      ACM_ACTV_FLG    = 'A'                      
             AND      FOD_TRD_DT      =  to_date(:c_frm_dt,'dd-mon-yyyy') 
             AND      ACM_ADVISOR_ID  = :c_advisor_id               
             AND
                     (
                      ( FOD_ORDR_RFRNC        >=    :c_min_ref_num
                        AND   FOD_ORDR_RFRNC  <     :c_max_ref_num ) OR
                      ( FOD_ORDR_RFRNC        <     :c_min_ref_num
                        AND FOD_TRD_DT >= to_date(:c_frm_dt,'dd-mon-yyyy') )  
                     )
             AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'        
             AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
             AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg 
            /**ORDER BY FOD_1CLICK_PRTFL_ID,1,2 DESC; ** Ver 1.1 **/
             ORDER BY  FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT, FOD_ORDR_RFRNC DESC; /** Ver 1.1 **/
            END;
          END-EXEC;
           }
       else    
           {
            EXEC SQL  EXECUTE
            BEGIN
            OPEN      :sys_cursor FOR
             
              SELECT  FOD_CLM_MTCH_ACCNT,
                      FOD_ORDR_RFRNC,
                      FOD_PIPE_ID,
                      FOD_XCHNG_CD,
                      FOD_PRDCT_TYP,
                      FOD_INDSTK,
                      FOD_UNDRLYNG,
                      to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ),
                      FOD_EXER_TYP,
                      FOD_OPT_TYP,
                      FOD_STRK_PRC,
                      FOD_ORDR_FLW,
                      FOD_LMT_MRKT_SL_FLG,
                      NVL( FOD_DSCLSD_QTY, 0 ),
                      FOD_ORDR_TOT_QTY,
                      NVL( FOD_LMT_RT, 0 ),
                      NVL( FOD_STP_LSS_TGR, 0 ),
                      FOD_ORDR_TYPE,
                      to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
                      to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ),
                      FOD_ORDR_STTS,
                      FOD_EXEC_QTY,
                      FOD_CNCL_QTY,
                      FOD_EXPRD_QTY,
                      NVL( FOD_SPRD_ORDR_REF, ' ' ),
                      NVL( FOD_SETTLOR, ' ' ),
                      FOD_MDFCTN_CNTR,
                      NVL( FOD_ACK_NMBR, ' ' ),
                      FOD_SPL_FLAG,
                      NVL( FOD_REMARKS, ' ' ),
                      NVL( FOD_CHANNEL,'*'),
                      NVL( FOD_BP_ID,' '),
                      NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),  
                      NVL(FOD_FC_FLAG,' '),                             
                      NVL(FOD_SPN_FLG,'N'),                             
                    	NVL(FOD_TRD_VAL,0),                               
                    	NVL(FOD_TRD_BRKG,0),                              
                    	NVL(FOD_CNTRCTNT_NMBR,'*'),                       
                      FOD_SLTP_ORDR_RFRNC,                                
                      FOD_FC_FLAG,                                        
											NVL( FOD_PRCIMPV_FLG, 'N'),                          
											NVL(FOD_ESP_ID,'*'),																	
                      NVL(FSB_STRGY_ID,0),
                      NVL(FSB_PRTFL_NAME,' '),
                      FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
             FROM     FOD_FO_ORDR_DTLS_HSTRY,CNT_CSE_MAST,FSB_FO1CLICK_STRTGY_BUCKTDTLS
             WHERE    FOD_XCHNG_CD    LIKE :c_exchange_cd
             AND      FOD_PRDCT_TYP   LIKE :c_product_typ
             AND      FOD_ORDR_STTS   LIKE :c_ordr_stts
             AND      FOD_ORDR_STTS   <> 'Y'
             AND      FOD_IS_FLG      LIKE :c_is_flg
       			 AND FOD_CSE_ID = CCM_CSE_ID
						 AND FOD_TRD_DT = to_date(:c_frm_dt,'dd-mon-yyyy') 
             AND CCM_LOGIN_NAME = :c_advisor_id
						 AND
                     (
                      ( FOD_ORDR_RFRNC        >=    :c_min_ref_num
                        AND   FOD_ORDR_RFRNC  <     :c_max_ref_num ) OR
                      ( FOD_ORDR_RFRNC        <     :c_min_ref_num
                        AND FOD_TRD_DT >= to_date(:c_frm_dt,'dd-mon-yyyy') )  
                     )
             AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'        
             AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
             AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg  
            /*** ORDER BY FOD_1CLICK_PRTFL_ID,1,2 DESC; *** Ver 1.1 ***/
            ORDER BY  FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT, FOD_ORDR_RFRNC DESC; /** Ver 1.1 **/
            END;
          END-EXEC;
       }
            fn_userlog(c_ServiceName,"after query execution"); 
     }
		}
    if(c_opr_typ == UNDERLYING_AND_DATE_IP)
    {
      if( DEBUG_MSG_LVL_0 )
      {
        fn_userlog(c_ServiceName,"Inside Advisor with Underlying");
      }

      if( DEBUG_MSG_LVL_0 )
      {
        fn_userlog(c_ServiceName,"li_rec_cnt_status_date [%ld]",li_rec_cnt_adv);
        fn_userlog(c_ServiceName,"c_min_ref_num [%s]",c_min_ref_num);
        fn_userlog(c_ServiceName,"c_max_ref_num [%s]",c_max_ref_num); 
      }
      if ( li_rec_cnt_adv != 1 ) 
      {

       if ( c_sys_ordr_flg == 'S' )                  
            {    
         EXEC SQL  EXECUTE
         BEGIN
         OPEN       :sys_cursor FOR
         SELECT     FOD_CLM_MTCH_ACCNT,
                    FOD_ORDR_RFRNC,
                    FOD_PIPE_ID,
                    FOD_XCHNG_CD,
                    FOD_PRDCT_TYP,
                    FOD_INDSTK,
                    FOD_UNDRLYNG,
                    to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ),
                    FOD_EXER_TYP,
                    FOD_OPT_TYP,
                    FOD_STRK_PRC,
                    FOD_ORDR_FLW,
                    FOD_LMT_MRKT_SL_FLG,
                    NVL( FOD_DSCLSD_QTY, 0 ),
                    FOD_ORDR_TOT_QTY,
                    NVL( FOD_LMT_RT, 0 ),
                    NVL( FOD_STP_LSS_TGR, 0 ),
                    FOD_ORDR_TYPE,
                    to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
                    to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ),
                    FOD_ORDR_STTS,
                    FOD_EXEC_QTY,
                    FOD_CNCL_QTY,
                    FOD_EXPRD_QTY,
                    NVL( FOD_SPRD_ORDR_REF, ' ' ),
                    NVL( FOD_SETTLOR, ' ' ),
                    FOD_MDFCTN_CNTR,
                    NVL( FOD_ACK_NMBR, ' ' ),
                    FOD_SPL_FLAG,
                    NVL( FOD_REMARKS, ' ' ),
                    NVL( FOD_CHANNEL,'*'),
                    NVL( FOD_BP_ID,' '),
                    NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),
                    NVL(FOD_FC_FLAG,' '),
                    NVL(FOD_SPN_FLG,'N'),
                    NVL(FOD_TRD_VAL,0),                                 
                    NVL(FOD_CNTRCTNT_NMBR,'*'),                         
                    FOD_SLTP_ORDR_RFRNC,                                
                    FOD_FC_FLAG,                                        
                    NVL( FOD_PRCIMPV_FLG, 'N'),                         
                    NVL(FOD_ESP_ID,'*'),
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/                                
            FROM    FOD_FO_ORDR_DTLS,ACM_ADV_CLNT_MAP,FSB_FO1CLICK_STRTGY_BUCKTDTLS      
            WHERE   FOD_CLM_MTCH_ACCNT = ACM_MTCH_ACCNT 
            AND     FOD_XCHNG_CD      LIKE :c_exchange_cd  
            AND     FOD_PRDCT_TYP      LIKE :c_product_typ
            AND     FOD_UNDRLYNG  =    :c_underlying
            AND     FOD_PRDCT_TYP NOT IN ( CASE WHEN :c_product_typ = '%' THEN 'I' ELSE 'Z' END )
            AND     FOD_ORDR_STTS      LIKE :c_ordr_stts
            AND     FOD_ORDR_STTS      <>   'Y'
            AND     FOD_IS_FLG         LIKE :c_is_flg
            AND     FOD_CHANNEL        = 'SYS'            
            AND     ACM_ACTV_FLG       = 'A'             
            AND     ACM_ADVISOR_ID     = :c_advisor_id  
             AND
                     (
                      ( FOD_ORDR_RFRNC        >=    :c_min_ref_num
                        AND   FOD_ORDR_RFRNC  <     :c_max_ref_num ) OR
                      ( FOD_ORDR_RFRNC        <     :c_min_ref_num
                        AND FOD_TRD_DT >= to_date(:c_frm_dt,'dd-mon-yyyy') ) 
                     )
            AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'        
            AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
            AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg
         ORDER BY FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT, FOD_ORDR_RFRNC DESC;
          END;
        END-EXEC;
       }
       else  
       {
          EXEC SQL  EXECUTE
          BEGIN
            OPEN  :sys_cursor FOR
            SELECT  FOD_CLM_MTCH_ACCNT,
                    FOD_ORDR_RFRNC,
                    FOD_PIPE_ID,
                    FOD_XCHNG_CD,
                    FOD_PRDCT_TYP,
                    FOD_INDSTK,
                    FOD_UNDRLYNG,
                    to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ),
                    FOD_EXER_TYP,
                    FOD_OPT_TYP,
                    FOD_STRK_PRC,
                    FOD_ORDR_FLW,
                    FOD_LMT_MRKT_SL_FLG,
                    NVL( FOD_DSCLSD_QTY, 0 ),
                    FOD_ORDR_TOT_QTY,
                    NVL( FOD_LMT_RT, 0 ),
                    NVL( FOD_STP_LSS_TGR, 0 ),
                    FOD_ORDR_TYPE,
                    to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
                    to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ),
                    FOD_ORDR_STTS,
                    FOD_EXEC_QTY,
                    FOD_CNCL_QTY,
                    FOD_EXPRD_QTY,
                    NVL( FOD_SPRD_ORDR_REF, ' ' ),
                    NVL( FOD_SETTLOR, ' ' ),
                    FOD_MDFCTN_CNTR,
                    NVL( FOD_ACK_NMBR, ' ' ),
                    FOD_SPL_FLAG,
                    NVL( FOD_REMARKS, ' ' ),
                    NVL( FOD_CHANNEL,'*'),
                    NVL( FOD_BP_ID,' '),
                    NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),
                    NVL(FOD_FC_FLAG,' '),
                    NVL(FOD_SPN_FLG,'N'),
                    NVL(FOD_TRD_VAL,0),                                
                    NVL(FOD_CNTRCTNT_NMBR,'*'),                         
                    FOD_SLTP_ORDR_RFRNC,                               
                    FOD_FC_FLAG,                                         
										NVL( FOD_PRCIMPV_FLG, 'N'),                         
										NVL(FOD_ESP_ID,'*'),																
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
            FROM    FOD_FO_ORDR_DTLS,CNT_CSE_MAST,FSB_FO1CLICK_STRTGY_BUCKTDTLS
            WHERE   FOD_XCHNG_CD      LIKE :c_exchange_cd  
            AND     FOD_PRDCT_TYP      LIKE :c_product_typ
            AND     FOD_UNDRLYNG  =    :c_underlying
            AND     FOD_PRDCT_TYP NOT IN ( CASE WHEN :c_product_typ = '%' THEN 'I' ELSE 'Z' END )
            AND     FOD_ORDR_STTS      LIKE :c_ordr_stts
            AND     FOD_ORDR_STTS      <>   'Y'
            AND     FOD_IS_FLG         LIKE :c_is_flg
      			AND 		FOD_CSE_ID = CCM_CSE_ID
            AND 		CCM_LOGIN_NAME = :c_advisor_id
             AND
                     (
                      ( FOD_ORDR_RFRNC        >=    :c_min_ref_num
                        AND   FOD_ORDR_RFRNC  <     :c_max_ref_num ) OR
                      ( FOD_ORDR_RFRNC        <     :c_min_ref_num
                        AND FOD_TRD_DT >= to_date(:c_frm_dt,'dd-mon-yyyy') )  
                     )
            AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'        
            AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
            AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg
         ORDER BY FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT, FOD_ORDR_RFRNC DESC;
          END;
        END-EXEC;
       }
      
      }
       else if ( li_rec_cnt_adv == 1 ) 
       {
   
        if ( c_sys_ordr_flg == 'S' )                 
            {
              EXEC SQL  EXECUTE
              BEGIN
              OPEN  :sys_cursor FOR  
              SELECT  FOD_CLM_MTCH_ACCNT,
                      FOD_ORDR_RFRNC,
                      FOD_PIPE_ID,
                      FOD_XCHNG_CD,
                      FOD_PRDCT_TYP,
                      FOD_INDSTK,
                      FOD_UNDRLYNG,
                      to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ),
                      FOD_EXER_TYP,
                      FOD_OPT_TYP,
                      FOD_STRK_PRC,
                      FOD_ORDR_FLW,
                      FOD_LMT_MRKT_SL_FLG,
                      NVL( FOD_DSCLSD_QTY, 0 ),
                      FOD_ORDR_TOT_QTY,
                      NVL( FOD_LMT_RT, 0 ),
                      NVL( FOD_STP_LSS_TGR, 0 ),
                      FOD_ORDR_TYPE,
                      to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
                      to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ),
                      FOD_ORDR_STTS,
                      FOD_EXEC_QTY,
                      FOD_CNCL_QTY,
                      FOD_EXPRD_QTY,
                      NVL( FOD_SPRD_ORDR_REF, ' ' ),
                      NVL( FOD_SETTLOR, ' ' ),
                      FOD_MDFCTN_CNTR,
                      NVL( FOD_ACK_NMBR, ' ' ),
                      FOD_SPL_FLAG,
                      NVL( FOD_REMARKS, ' ' ),
                      NVL( FOD_CHANNEL,'*'),
                      NVL( FOD_BP_ID,' '),
                      NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),  
                      NVL(FOD_FC_FLAG,' '),                             
                      NVL(FOD_SPN_FLG,'N'),                             
                      NVL(FOD_TRD_VAL,0),                               
                      NVL(FOD_TRD_BRKG,0),                             
                      NVL(FOD_CNTRCTNT_NMBR,'*'),                     
                      FOD_SLTP_ORDR_RFRNC,                           
                      FOD_FC_FLAG,                                  
                      NVL( FOD_PRCIMPV_FLG, 'N'),                  
                      NVL(FOD_ESP_ID,'*'),
                      NVL(FSB_STRGY_ID,0),
                      NVL(FSB_PRTFL_NAME,' '),
                      FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/                         
             FROM     FOD_FO_ORDR_DTLS_HSTRY,ACM_ADV_CLNT_MAP,FSB_FO1CLICK_STRTGY_BUCKTDTLS    
             WHERE    FOD_CLM_MTCH_ACCNT = ACM_MTCH_ACCNT 
             AND      FOD_XCHNG_CD    LIKE :c_exchange_cd
             AND      FOD_PRDCT_TYP   LIKE :c_product_typ
             AND      FOD_UNDRLYNG  =    :c_underlying
             AND      FOD_PRDCT_TYP NOT IN ( CASE WHEN :c_product_typ = '%' THEN 'I' ELSE 'Z' END )
             AND      FOD_ORDR_STTS   LIKE :c_ordr_stts
             AND      FOD_ORDR_STTS   <> 'Y'
             AND      FOD_IS_FLG      LIKE :c_is_flg
             AND      ACM_ACTV_FLG       = 'A'                   
             AND      FOD_CHANNEL        = 'SYS'                 
             AND      ACM_ADVISOR_ID     = :c_advisor_id         
             AND      FOD_TRD_DT        = to_date(:c_frm_dt,'dd-mon-yyyy') 
             AND
                     (
                      ( FOD_ORDR_RFRNC        >=    :c_min_ref_num
                        AND   FOD_ORDR_RFRNC  <     :c_max_ref_num ) OR
                      ( FOD_ORDR_RFRNC        <     :c_min_ref_num
                        AND FOD_TRD_DT >= to_date(:c_frm_dt,'dd-mon-yyyy') )  
                        
                      )
             AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'        
             AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
             AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg
             /** ORDER BY FOD_1CLICK_PRTFL_ID,1,2 DESC; *** Ver 1.1 **/
             ORDER BY  FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT, FOD_ORDR_RFRNC DESC;
             END;
             END-EXEC;
            } 
        else   
            {  
        EXEC SQL  EXECUTE
            BEGIN
              OPEN  :sys_cursor FOR
              SELECT  FOD_CLM_MTCH_ACCNT,
                      FOD_ORDR_RFRNC,
                      FOD_PIPE_ID,
                      FOD_XCHNG_CD,
                      FOD_PRDCT_TYP,
                      FOD_INDSTK,
                      FOD_UNDRLYNG,
                      to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ),
                      FOD_EXER_TYP,
                      FOD_OPT_TYP,
                      FOD_STRK_PRC,
                      FOD_ORDR_FLW,
                      FOD_LMT_MRKT_SL_FLG,
                      NVL( FOD_DSCLSD_QTY, 0 ),
                      FOD_ORDR_TOT_QTY,
                      NVL( FOD_LMT_RT, 0 ),
                      NVL( FOD_STP_LSS_TGR, 0 ),
                      FOD_ORDR_TYPE,
                      to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ),
                      to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ),
                      FOD_ORDR_STTS,
                      FOD_EXEC_QTY,
                      FOD_CNCL_QTY,
                      FOD_EXPRD_QTY,
                      NVL( FOD_SPRD_ORDR_REF, ' ' ),
                      NVL( FOD_SETTLOR, ' ' ),
                      FOD_MDFCTN_CNTR,
                      NVL( FOD_ACK_NMBR, ' ' ),
                      FOD_SPL_FLAG,
                      NVL( FOD_REMARKS, ' ' ),
                      NVL( FOD_CHANNEL,'*'),
                      NVL( FOD_BP_ID,' '),
                      NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),  
                      NVL(FOD_FC_FLAG,' '),                             
                      NVL(FOD_SPN_FLG,'N'),                             
                    	NVL(FOD_TRD_VAL,0),                               
                    	NVL(FOD_TRD_BRKG,0),                              
                    	NVL(FOD_CNTRCTNT_NMBR,'*'),                       
                      FOD_SLTP_ORDR_RFRNC,                               
                      FOD_FC_FLAG,                                         
											NVL( FOD_PRCIMPV_FLG, 'N'),                          
											NVL(FOD_ESP_ID,'*'),																	
                      NVL(FSB_STRGY_ID,0),
                      NVL(FSB_PRTFL_NAME,' '),
                      FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
             FROM     FOD_FO_ORDR_DTLS_HSTRY,CNT_CSE_MAST,FSB_FO1CLICK_STRTGY_BUCKTDTLS
             WHERE    FOD_XCHNG_CD    LIKE :c_exchange_cd
             AND      FOD_PRDCT_TYP   LIKE :c_product_typ
             AND      FOD_UNDRLYNG  =    :c_underlying
             AND      FOD_PRDCT_TYP NOT IN ( CASE WHEN :c_product_typ = '%' THEN 'I' ELSE 'Z' END )
             AND      FOD_ORDR_STTS   LIKE :c_ordr_stts
             AND      FOD_ORDR_STTS   <> 'Y'
             AND      FOD_IS_FLG      LIKE :c_is_flg
             AND      FOD_CSE_ID = CCM_CSE_ID
						 AND      FOD_TRD_DT = to_date(:c_frm_dt,'dd-mon-yyyy') 
             AND      CCM_LOGIN_NAME = :c_advisor_id
             AND
                     (
                      ( FOD_ORDR_RFRNC        >=    :c_min_ref_num
                        AND   FOD_ORDR_RFRNC  <     :c_max_ref_num ) OR
                      ( FOD_ORDR_RFRNC        <     :c_min_ref_num
                        AND FOD_TRD_DT >= to_date(:c_frm_dt,'dd-mon-yyyy') )  
                     )
             AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'        
             AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
             AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg
           /*** ORDER BY FOD_1CLICK_PRTFL_ID,1,2 DESC; ** Ver 1.1 **/
             ORDER BY  FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT, FOD_ORDR_RFRNC DESC; /** Ver 1.1 **/
            END;
          END-EXEC;
       }
     }
   } 

      if ( ( SQLCODE !=0 ) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog( c_ServiceName, "S31075", SQLMSG, c_errmsg  );
        Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
      }

   }
	}

	else
	{
		if( DEBUG_MSG_LVL_0 ) 
		{
			fn_userlog(c_ServiceName,"--inside Single match account--");
		}

		if ( c_opr_typ == CONTRACT_IP )
		{
      if( DEBUG_MSG_LVL_0 )  
      {
				fn_userlog(c_ServiceName,"Order Book Inside CONTRACT_IP.");
			}



		  EXEC SQL	EXECUTE
				BEGIN
					OPEN	:sys_cursor	FOR
					SELECT  	FOD_CLM_MTCH_ACCNT, 
										FOD_ORDR_RFRNC,
										FOD_PIPE_ID, 
										FOD_XCHNG_CD, 
										FOD_PRDCT_TYP, 
										FOD_INDSTK,
										FOD_UNDRLYNG, 
										to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ), 
										FOD_EXER_TYP,
										FOD_OPT_TYP, 
										FOD_STRK_PRC, 
										FOD_ORDR_FLW, 
										FOD_LMT_MRKT_SL_FLG, 
										NVL( FOD_DSCLSD_QTY, 0 ),
										FOD_ORDR_TOT_QTY, 
										NVL( FOD_LMT_RT, 0 ), 
										NVL( FOD_STP_LSS_TGR, 0 ), 
										FOD_ORDR_TYPE, 
										to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ), 
										to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ), 
										FOD_ORDR_STTS, 
										FOD_EXEC_QTY, 
										FOD_CNCL_QTY, 
										FOD_EXPRD_QTY,
										NVL( FOD_SPRD_ORDR_REF, ' ' ), 
										NVL( FOD_SETTLOR, ' ' ),
										FOD_MDFCTN_CNTR,
										NVL( FOD_ACK_NMBR, ' ' ),
										FOD_SPL_FLAG,
										NVL( FOD_REMARKS, ' ' ),
										NVL( FOD_CHANNEL,'*'),
										NVL( FOD_BP_ID,' '),
										NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),	
										NVL(FOD_FC_FLAG,' '),															
										NVL(FOD_SPN_FLG,'N'),															
                    NVL(FOD_TRD_VAL,0),                              
                    NVL(FOD_TRD_BRKG,0),                             
                    NVL(FOD_CNTRCTNT_NMBR,'*'),                        
                    FOD_SLTP_ORDR_RFRNC,                              
                    FOD_FC_FLAG,                                         
										NVL( FOD_PRCIMPV_FLG, 'N'),                          
										NVL(FOD_ESP_ID,'*'),																	
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
					FROM			FOD_FO_ORDR_DTLS,FSB_FO1CLICK_STRTGY_BUCKTDTLS
					WHERE			FOD_CLM_MTCH_ACCNT =		:c_mtch_accnt_no
          AND       FOD_XCHNG_CD      LIKE :c_exchange_cd   
					AND				FOD_PRDCT_TYP      =		:c_product_typ
					AND				FOD_UNDRLYNG       =		:c_underlying
					AND				FOD_EXPRY_DT       =		to_date(:c_expiry_dt,'dd-mon-yyyy')
					AND				FOD_EXER_TYP       =		:c_exercise_type
					AND				FOD_OPT_TYP        =		:c_option_type
					AND				FOD_STRK_PRC       =		:li_strike_price
					AND				FOD_ORDR_STTS			 LIKE :c_ordr_stts
					AND				FOD_ORDR_STTS			 <>		'Y'										
					AND				FOD_IS_FLG				 LIKE :c_is_flg     
					AND       NVL(FOD_ESP_ID,'*')	 LIKE :c_ven_id     
          AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'        
          AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
          AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg
					/** ORDER BY FOD_1CLICK_PRTFL_ID,1,2 DESC; 		** Ver 1.1 **/
          ORDER BY  FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT, FOD_ORDR_RFRNC DESC; /** Ver 1.1 **/
				END;
			END-EXEC;

		}
		else if ( c_opr_typ == CONTRACT_AND_DATE_IP )
		{
		  if( DEBUG_MSG_LVL_0 )  /*** Ver 5.2 ***/
      {	
      	fn_userlog(c_ServiceName,"Order Book Inside CONTRACT_AND_DATE_IP");
      }

			if ( c_date_flag == 'N' )
			{
				fn_userlog( c_ServiceName,"From/To Dates are not Found in the Buffer" );
				Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
			}

      if ( DEBUG_MSG_LVL_0)
      {
		 	 fn_userlog(c_ServiceName,"Data Fetch Counter Is :%ld:",li_rec_cnt_status_date);
			}
     
			if ( li_rec_cnt_status_date != 1 )		
			{
				EXEC SQL	EXECUTE
					BEGIN
						OPEN	:sys_cursor	FOR
						SELECT  FOD_CLM_MTCH_ACCNT, 
										FOD_ORDR_RFRNC,
										FOD_PIPE_ID, 
										FOD_XCHNG_CD, 
										FOD_PRDCT_TYP,
										FOD_INDSTK,
										FOD_UNDRLYNG, 
										to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ), 
										FOD_EXER_TYP, 
										FOD_OPT_TYP, 
										FOD_STRK_PRC,
										FOD_ORDR_FLW, 
										FOD_LMT_MRKT_SL_FLG, 
										NVL( FOD_DSCLSD_QTY, 0 ), 
										FOD_ORDR_TOT_QTY, 
										NVL( FOD_LMT_RT, 0 ),
										NVL( FOD_STP_LSS_TGR, 0 ), 
										FOD_ORDR_TYPE, 
										to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ), 
										to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ), 
										FOD_ORDR_STTS,
										FOD_EXEC_QTY, 
										FOD_CNCL_QTY, 
										FOD_EXPRD_QTY, 
										NVL( FOD_SPRD_ORDR_REF, ' ' ), 
										NVL( FOD_SETTLOR, ' ' ),
										FOD_MDFCTN_CNTR,
										NVL( FOD_ACK_NMBR, ' ' ),
										FOD_SPL_FLAG,
										NVL( FOD_REMARKS, ' ' ),
										NVL( FOD_CHANNEL,'*'),
										NVL( FOD_BP_ID,' '),
										NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),	
										NVL(FOD_FC_FLAG,' '),														
										NVL(FOD_SPN_FLG,'N'),															
                    NVL(FOD_TRD_VAL,0),                              
                    NVL(FOD_TRD_BRKG,0),                              
                    NVL(FOD_CNTRCTNT_NMBR,'*'),                       
                    FOD_SLTP_ORDR_RFRNC,                                
                    FOD_FC_FLAG,                                        
										NVL( FOD_PRCIMPV_FLG, 'N'),                          
										NVL(FOD_ESP_ID,'*'),																	
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
						FROM  FOD_FO_ORDR_DTLS,FSB_FO1CLICK_STRTGY_BUCKTDTLS		
						WHERE	FOD_CLM_MTCH_ACCNT =		:c_mtch_accnt_no
            AND    FOD_XCHNG_CD      LIKE :c_exchange_cd  
						AND		FOD_PRDCT_TYP			 =		:c_product_typ
						AND		FOD_UNDRLYNG			 =		:c_underlying
						AND		FOD_EXPRY_DT			 =		to_date( :c_expiry_dt,'dd-mon-yyyy')
						AND		FOD_EXER_TYP			 =		:c_exercise_type
						AND		FOD_OPT_TYP				 =		:c_option_type
						AND		FOD_STRK_PRC			 =		:li_strike_price
						AND		FOD_ORDR_STTS			 LIKE :c_ordr_stts 
						AND		FOD_ORDR_STTS			 <>		'Y'											
						AND   FOD_IS_FLG         LIKE :c_is_flg      
						AND   NVL(FOD_ESP_ID,'*')	 LIKE :c_ven_id     
            AND   FOD_TRD_DT between :c_frm_dt and :c_to_dt  
            AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'        
            AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
            AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg

         /**ORDER BY FOD_1CLICK_PRTFL_ID,1,2 DESC; 		*** Ver 1.1 ** Ver 1.1 **/
            ORDER BY  FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT, FOD_ORDR_RFRNC DESC; /** Ver 1.1 **/	
					END;
				END-EXEC;
			}
			else if ( li_rec_cnt_status_date == 1 )		
			{
				EXEC SQL	EXECUTE
					BEGIN
						OPEN	:sys_cursor	FOR
						SELECT  FOD_CLM_MTCH_ACCNT,
										FOD_ORDR_RFRNC,
										FOD_PIPE_ID, 
										FOD_XCHNG_CD, 
										FOD_PRDCT_TYP,
										FOD_INDSTK,
										FOD_UNDRLYNG, 
										to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ), 
										FOD_EXER_TYP, 
										FOD_OPT_TYP, 
										FOD_STRK_PRC,
										FOD_ORDR_FLW, 
										FOD_LMT_MRKT_SL_FLG, 
										NVL( FOD_DSCLSD_QTY, 0 ), 
										FOD_ORDR_TOT_QTY, 
										NVL( FOD_LMT_RT, 0 ),
										NVL( FOD_STP_LSS_TGR, 0 ),
										FOD_ORDR_TYPE, 
										to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ), 
										to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ), 
										FOD_ORDR_STTS,
										FOD_EXEC_QTY, 
										FOD_CNCL_QTY, 
										FOD_EXPRD_QTY, 
										NVL( FOD_SPRD_ORDR_REF, ' ' ),
										NVL( FOD_SETTLOR, ' ' ),
										FOD_MDFCTN_CNTR,
										NVL( FOD_ACK_NMBR, ' ' ),
										FOD_SPL_FLAG,
										NVL( FOD_REMARKS, ' ' ),
										NVL( FOD_CHANNEL,'*'),
										NVL( FOD_BP_ID,' '),
										NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),
										NVL(FOD_FC_FLAG,' '),															
										NVL(FOD_SPN_FLG,'N'),												
                    NVL(FOD_TRD_VAL,0),                              
                    NVL(FOD_TRD_BRKG,0),                              
                    NVL(FOD_CNTRCTNT_NMBR,'*'),                        
                    FOD_SLTP_ORDR_RFRNC,                               
                    FOD_FC_FLAG,                                       
										NVL( FOD_PRCIMPV_FLG, 'N'),                          
										NVL(FOD_ESP_ID,'*'),																	
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
						FROM  FOD_FO_ORDR_DTLS,FSB_FO1CLICK_STRTGY_BUCKTDTLS		
						WHERE	FOD_CLM_MTCH_ACCNT	=			:c_mtch_accnt_no
            AND  FOD_XCHNG_CD         LIKE :c_exchange_cd     
						AND	FOD_PRDCT_TYP					=			:c_product_typ
						AND	FOD_UNDRLYNG					=			:c_underlying
						AND	FOD_EXPRY_DT					=			to_date( :c_expiry_dt,'dd-mon-yyyy')
						AND	FOD_EXER_TYP					=			:c_exercise_type
						AND	FOD_OPT_TYP						=			:c_option_type
						AND	FOD_STRK_PRC					=			:li_strike_price
						AND	FOD_ORDR_STTS					LIKE	:c_ordr_stts 
						AND 	FOD_ORDR_STTS				<>		'Y'										
						AND  FOD_IS_FLG						LIKE	:c_is_flg   
						AND NVL(FOD_ESP_ID,'*') 	LIKE :c_ven_id     
            AND
                     (
                      ( FOD_ORDR_RFRNC        >=    :c_min_ref_num
                        AND   FOD_ORDR_RFRNC  <     :c_max_ref_num ) OR
                      ( FOD_ORDR_RFRNC        <     :c_min_ref_num
                        AND FOD_TRD_DT >= to_date(:c_frm_dt,'dd-mon-yyyy') ) 
                     )
            AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'        
            AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
            AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg
					  UNION ALL  		
						SELECT  FOD_CLM_MTCH_ACCNT, 
										FOD_ORDR_RFRNC,
										FOD_PIPE_ID, 
										FOD_XCHNG_CD, 
										FOD_PRDCT_TYP,
										FOD_INDSTK,
										FOD_UNDRLYNG, 
										to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ), 
										FOD_EXER_TYP, 
										FOD_OPT_TYP, 
										FOD_STRK_PRC,
										FOD_ORDR_FLW, 
										FOD_LMT_MRKT_SL_FLG, 
										NVL( FOD_DSCLSD_QTY, 0 ), 
										FOD_ORDR_TOT_QTY, 
										NVL( FOD_LMT_RT, 0 ), 
										NVL( FOD_STP_LSS_TGR, 0 ), 
										FOD_ORDR_TYPE, 
										to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ), 
										to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ), 
										FOD_ORDR_STTS,
										FOD_EXEC_QTY, 
										FOD_CNCL_QTY, 
										FOD_EXPRD_QTY, 
										NVL( FOD_SPRD_ORDR_REF, ' ' ),
										NVL( FOD_SETTLOR, ' ' ),
										FOD_MDFCTN_CNTR,
										NVL( FOD_ACK_NMBR, ' ' ),
										FOD_SPL_FLAG,
										NVL( FOD_REMARKS, ' ' ),
										NVL( FOD_CHANNEL,'*'), 											
										NVL( FOD_BP_ID,' '),
										NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),	
										NVL(FOD_FC_FLAG,' '),															
										NVL(FOD_SPN_FLG,'N'),															
                    NVL(FOD_TRD_VAL,0),   	                          
                    NVL(FOD_TRD_BRKG,0),                              
                    NVL(FOD_CNTRCTNT_NMBR,'*'),                       
                    FOD_SLTP_ORDR_RFRNC,                                
                    FOD_FC_FLAG,                                      
										NVL( FOD_PRCIMPV_FLG, 'N'),                         	
										NVL(FOD_ESP_ID,'*'),																	
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
						FROM  FOD_FO_ORDR_DTLS_HSTRY,FSB_FO1CLICK_STRTGY_BUCKTDTLS		
						WHERE	FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
            AND FOD_XCHNG_CD       LIKE :c_exchange_cd   
						AND	FOD_PRDCT_TYP      = :c_product_typ
						AND	FOD_UNDRLYNG       = :c_underlying
						AND	FOD_EXPRY_DT       = to_date( :c_expiry_dt,'dd-mon-yyyy')
						AND	FOD_EXER_TYP       = :c_exercise_type
						AND	FOD_OPT_TYP        = :c_option_type
						AND	FOD_STRK_PRC       = :li_strike_price
						AND	FOD_ORDR_STTS   LIKE :c_ordr_stts 
						AND 	FOD_ORDR_STTS		<> 'Y'											
						AND  FOD_IS_FLG      LIKE :c_is_flg   
						AND NVL(FOD_ESP_ID,'*')	 LIKE :c_ven_id     
            AND
                     (
                      ( FOD_ORDR_RFRNC        >=    :c_min_ref_num
                        AND   FOD_ORDR_RFRNC  <     :c_max_ref_num ) OR
                      ( FOD_ORDR_RFRNC        <     :c_min_ref_num
                        AND FOD_TRD_DT >= to_date(:c_frm_dt,'dd-mon-yyyy') )  
                     )
            AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'        
            AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
            AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg
         /***ORDER BY FOD_1CLICK_PRTFL_ID,1,2 DESC;			*** Ver 1.1 **/
            ORDER BY  FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT, FOD_ORDR_RFRNC DESC; /** Ver 1.1 **/
					END;
				END-EXEC;
			}
		}
		
		else if ( c_opr_typ == UNDERLYING_IP )
		{
     
     if( DEBUG_MSG_LVL_0 )  
     {
     	 fn_userlog(c_ServiceName,"Order Book Inside UNDERLYING_IP.");
     }


			EXEC SQL	EXECUTE
				BEGIN
					OPEN	:sys_cursor	FOR
					SELECT    FOD_CLM_MTCH_ACCNT,  
										FOD_ORDR_RFRNC,
										FOD_PIPE_ID, 
										FOD_XCHNG_CD, 
										FOD_PRDCT_TYP, 
										FOD_INDSTK,
										FOD_UNDRLYNG, 
										to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ), 
										FOD_EXER_TYP,
										FOD_OPT_TYP, 
										FOD_STRK_PRC, 
										FOD_ORDR_FLW, 
										FOD_LMT_MRKT_SL_FLG, 
										NVL( FOD_DSCLSD_QTY, 0 ),
										FOD_ORDR_TOT_QTY, 
										NVL( FOD_LMT_RT, 0 ),
										NVL( FOD_STP_LSS_TGR, 0 ),
										FOD_ORDR_TYPE, 
										to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ), 
										to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ), 
										FOD_ORDR_STTS, 
										FOD_EXEC_QTY, 
										FOD_CNCL_QTY, 
										FOD_EXPRD_QTY,
										NVL( FOD_SPRD_ORDR_REF, ' ' ),
										NVL( FOD_SETTLOR, ' ' ),
										FOD_MDFCTN_CNTR,
										NVL( FOD_ACK_NMBR, ' ' ),
										FOD_SPL_FLAG,
										NVL( FOD_REMARKS, ' ' ),
										NVL( FOD_CHANNEL,'*'),                     
										NVL( FOD_BP_ID,' '),
										NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),	
										NVL(FOD_FC_FLAG,' '),														
										NVL(FOD_SPN_FLG,'N'),															
                    NVL(FOD_TRD_VAL,0),                              
                    NVL(FOD_TRD_BRKG,0),                              
                    NVL(FOD_CNTRCTNT_NMBR,'*'),                      
                    FOD_SLTP_ORDR_RFRNC,                                
                    FOD_FC_FLAG,                                        
										NVL( FOD_PRCIMPV_FLG, 'N'),                         
										NVL(FOD_ESP_ID,'*'),																	
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
					FROM			FOD_FO_ORDR_DTLS,FSB_FO1CLICK_STRTGY_BUCKTDTLS
					WHERE			FOD_CLM_MTCH_ACCNT =		:c_mtch_accnt_no
          AND       FOD_XCHNG_CD        LIKE :c_exchange_cd  
					AND				FOD_UNDRLYNG       =		:c_underlying
					AND				FOD_PRDCT_TYP			 LIKE :c_product_typ
					AND				FOD_ORDR_STTS			 LIKE :c_ordr_stts 
					AND				FOD_ORDR_STTS			 <>		'Y'											
					AND				FOD_IS_FLG				 LIKE :c_is_flg   
					AND       NVL(FOD_ESP_ID,'*')	 LIKE :c_ven_id     
          AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'       
          AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
          AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg
					/** ORDER BY FOD_1CLICK_PRTFL_ID,1,2 DESC; 	** Ver 1.1 **/
          ORDER BY  FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT, FOD_ORDR_RFRNC DESC; /** Ver 1.1 **/	
				END;
			END-EXEC;

		}

		else if ( c_opr_typ == UNDERLYING_AND_DATE_IP )
		{
      if( DEBUG_MSG_LVL_0 ) 
      { 
      	fn_userlog(c_ServiceName,"Order Book Inside UNDERLYING_AND_DATE_IP.");
		  }
    
    	if ( c_date_flag == 'N' )
			{
				fn_userlog( c_ServiceName,"From/To Dates are not Found in the Buffer" );
				Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
			}


      if ( DEBUG_MSG_LVL_0)
      {
       fn_userlog(c_ServiceName,"li_rec_cnt_status_date :%ld:",li_rec_cnt_status_date);
      }

			if ( li_rec_cnt_status_date != 1 )			
			{
				EXEC SQL	EXECUTE
					BEGIN
						OPEN	:sys_cursor	FOR
						SELECT  FOD_CLM_MTCH_ACCNT,  
										FOD_ORDR_RFRNC,  
										FOD_PIPE_ID,     
										FOD_XCHNG_CD,    
										FOD_PRDCT_TYP,   
										FOD_INDSTK,      
										FOD_UNDRLYNG,    
										to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ), 
										FOD_EXER_TYP, 
										FOD_OPT_TYP, 
										FOD_STRK_PRC,
										FOD_ORDR_FLW, 
										FOD_LMT_MRKT_SL_FLG, 
										NVL( FOD_DSCLSD_QTY, 0 ), 
										FOD_ORDR_TOT_QTY, 
										NVL( FOD_LMT_RT, 0 ), 
										NVL( FOD_STP_LSS_TGR, 0 ), 
										FOD_ORDR_TYPE, 
										to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ), 
										to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ), 
										FOD_ORDR_STTS,
										FOD_EXEC_QTY, 
										FOD_CNCL_QTY, 
										FOD_EXPRD_QTY, 
										NVL( FOD_SPRD_ORDR_REF, ' ' ),
										NVL( FOD_SETTLOR, ' ' ),
										FOD_MDFCTN_CNTR,
										NVL( FOD_ACK_NMBR, ' ' ),
										FOD_SPL_FLAG,
										NVL( FOD_REMARKS, ' ' ),
										NVL( FOD_CHANNEL,'*'),                     
										NVL( FOD_BP_ID,' '),
										NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),		
										NVL(FOD_FC_FLAG,' '),																
										NVL(FOD_SPN_FLG,'N'),															 
                    NVL(FOD_TRD_VAL,0),                                
                    NVL(FOD_TRD_BRKG,0),                               
                    NVL(FOD_CNTRCTNT_NMBR,'*'),                         
                    FOD_SLTP_ORDR_RFRNC,                                
                    FOD_FC_FLAG,                                         
										NVL( FOD_PRCIMPV_FLG, 'N'),                          
										NVL(FOD_ESP_ID,'*'),														
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/ 
						FROM		FOD_FO_ORDR_DTLS,FSB_FO1CLICK_STRTGY_BUCKTDTLS		
						WHERE		FOD_CLM_MTCH_ACCNT =		:c_mtch_accnt_no
            AND      FOD_XCHNG_CD      LIKE :c_exchange_cd   
						AND			FOD_UNDRLYNG       =		:c_underlying
						AND			FOD_PRDCT_TYP			 LIKE :c_product_typ
						AND			FOD_ORDR_STTS			 LIKE :c_ordr_stts 
						AND 		FOD_ORDR_STTS			 <>		'Y'											
						AND			FOD_IS_FLG				 LIKE :c_is_flg              
						AND     NVL(FOD_ESP_ID,'*')	 LIKE :c_ven_id     
            AND     FOD_TRD_DT between :c_frm_dt and :c_to_dt     
            AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'        
            AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
            AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg

         ORDER BY FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT,FOD_ORDR_RFRNC DESC; 
					END;
				END-EXEC;
			}
			else if ( li_rec_cnt_status_date == 1 )			
			{
				EXEC SQL	EXECUTE
					BEGIN
						OPEN	:sys_cursor	FOR
						SELECT  FOD_CLM_MTCH_ACCNT, 
										FOD_ORDR_RFRNC,
										FOD_PIPE_ID, 
										FOD_XCHNG_CD, 
										FOD_PRDCT_TYP,
										FOD_INDSTK,
										FOD_UNDRLYNG, 
										to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ), 
										FOD_EXER_TYP, 
										FOD_OPT_TYP, 
										FOD_STRK_PRC,
										FOD_ORDR_FLW, 
										FOD_LMT_MRKT_SL_FLG, 
										NVL( FOD_DSCLSD_QTY, 0 ), 
										FOD_ORDR_TOT_QTY, 
										NVL( FOD_LMT_RT, 0 ), 
										NVL( FOD_STP_LSS_TGR, 0 ), 
										FOD_ORDR_TYPE, 
										to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ), 
										to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ), 
										FOD_ORDR_STTS,
										FOD_EXEC_QTY, 
										FOD_CNCL_QTY, 
										FOD_EXPRD_QTY, 
										NVL( FOD_SPRD_ORDR_REF, ' ' ),
										NVL( FOD_SETTLOR, ' ' ),
										FOD_MDFCTN_CNTR,
										NVL( FOD_ACK_NMBR, ' ' ),
										FOD_SPL_FLAG,
										NVL( FOD_REMARKS, ' ' ),
										NVL( FOD_CHANNEL,'*'),                      
										NVL( FOD_BP_ID,' '),
										NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),	
										NVL(FOD_FC_FLAG,' '),															
										NVL(FOD_SPN_FLG,'N'),															
                    NVL(FOD_TRD_VAL,0),                               
                    NVL(FOD_TRD_BRKG,0),                              
                    NVL(FOD_CNTRCTNT_NMBR,'*'),                        
                    FOD_SLTP_ORDR_RFRNC,                                
                    FOD_FC_FLAG,                                        
										NVL( FOD_PRCIMPV_FLG, 'N'),                          	
										NVL(FOD_ESP_ID,'*'),
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID  /** Ver 1.1 **/
						FROM		FOD_FO_ORDR_DTLS,FSB_FO1CLICK_STRTGY_BUCKTDTLS		
						WHERE		FOD_CLM_MTCH_ACCNT =		:c_mtch_accnt_no
            AND     FOD_XCHNG_CD       LIKE :c_exchange_cd  
						AND			FOD_UNDRLYNG       =		:c_underlying
						AND			FOD_PRDCT_TYP			 LIKE :c_product_typ
						AND			FOD_ORDR_STTS			 LIKE :c_ordr_stts 
						AND 		FOD_ORDR_STTS			 <>		'Y'											
						AND			FOD_IS_FLG				 LIKE :c_is_flg  
						AND     NVL(FOD_ESP_ID,'*') LIKE :c_ven_id     
            AND
                     (
                      ( FOD_ORDR_RFRNC        >=    :c_min_ref_num
                        AND   FOD_ORDR_RFRNC  <     :c_max_ref_num ) OR
                      ( FOD_ORDR_RFRNC        <     :c_min_ref_num
                        AND FOD_TRD_DT >= to_date(:c_frm_dt,'dd-mon-yyyy') )  
                     )
            AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'       
            AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
            AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg
						UNION ALL
						SELECT  FOD_CLM_MTCH_ACCNT, 
										FOD_ORDR_RFRNC,
										FOD_PIPE_ID, 
										FOD_XCHNG_CD, 
										FOD_PRDCT_TYP,
										FOD_INDSTK,
										FOD_UNDRLYNG, 
										to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ), 
										FOD_EXER_TYP, 
										FOD_OPT_TYP, 
										FOD_STRK_PRC,
										FOD_ORDR_FLW, 
										FOD_LMT_MRKT_SL_FLG, 
										NVL( FOD_DSCLSD_QTY, 0 ), 
										FOD_ORDR_TOT_QTY, 
										NVL( FOD_LMT_RT, 0 ), 
										NVL( FOD_STP_LSS_TGR, 0 ), 
										FOD_ORDR_TYPE, 
										to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ), 
										to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ), 
										FOD_ORDR_STTS,
										FOD_EXEC_QTY, 
										FOD_CNCL_QTY, 
										FOD_EXPRD_QTY, 
										NVL( FOD_SPRD_ORDR_REF, ' ' ),
										NVL( FOD_SETTLOR, ' ' ),
										FOD_MDFCTN_CNTR,
										NVL( FOD_ACK_NMBR, ' ' ),
										FOD_SPL_FLAG,
										NVL( FOD_REMARKS, ' ' ),
										NVL( FOD_CHANNEL,'*'),                     
										NVL( FOD_BP_ID,' '),
										NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),	
										NVL(FOD_FC_FLAG,' '),															
										NVL(FOD_SPN_FLG,'N'),															
                    NVL(FOD_TRD_VAL,0),                              
                    NVL(FOD_TRD_BRKG,0),                            
                    NVL(FOD_CNTRCTNT_NMBR,'*'),                        
                    FOD_SLTP_ORDR_RFRNC,                                
                    FOD_FC_FLAG,                                       
										NVL( FOD_PRCIMPV_FLG, 'N'),                          
										NVL(FOD_ESP_ID,'*'),																
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID  /** Ver 1.1 **/
						FROM		FOD_FO_ORDR_DTLS_HSTRY,FSB_FO1CLICK_STRTGY_BUCKTDTLS
						WHERE		FOD_CLM_MTCH_ACCNT = :c_mtch_accnt_no
            AND      FOD_XCHNG_CD   LIKE :c_exchange_cd  
						AND			FOD_UNDRLYNG       = :c_underlying
						AND			FOD_PRDCT_TYP   LIKE :c_product_typ
						AND			FOD_ORDR_STTS   LIKE :c_ordr_stts 
						AND			FOD_ORDR_STTS		<> 'Y'											
						AND			FOD_IS_FLG      LIKE :c_is_flg   
						AND     NVL(FOD_ESP_ID,'*')	 LIKE :c_ven_id     
            AND
                     (
                      ( FOD_ORDR_RFRNC        >=    :c_min_ref_num
                        AND   FOD_ORDR_RFRNC  <     :c_max_ref_num ) OR
                      ( FOD_ORDR_RFRNC        <     :c_min_ref_num
                        AND FOD_TRD_DT >= to_date(:c_frm_dt,'dd-mon-yyyy') ) 
                     )
            AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'       
            AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
            AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg 
          /*** ORDER BY FOD_1CLICK_PRTFL_ID,1,2 DESC;			** Ver 1.1 **/
            ORDER BY  FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT, FOD_ORDR_RFRNC DESC; /** Ver 1.1 **/
					END;
				END-EXEC;
			}
		}

		else if ( c_opr_typ == STATUS_PRODUCT_IP )
		{


			EXEC SQL	EXECUTE
				BEGIN
					OPEN	:sys_cursor	FOR
					SELECT    FOD_CLM_MTCH_ACCNT, 
										FOD_ORDR_RFRNC,
										FOD_PIPE_ID, 
										FOD_XCHNG_CD, 
										FOD_PRDCT_TYP, 
										FOD_INDSTK,
										FOD_UNDRLYNG, 
										to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ), 
										FOD_EXER_TYP,
										FOD_OPT_TYP, 
										FOD_STRK_PRC, 
										FOD_ORDR_FLW, 
										FOD_LMT_MRKT_SL_FLG, 
										NVL( FOD_DSCLSD_QTY, 0 ),
										FOD_ORDR_TOT_QTY, 
										NVL( FOD_LMT_RT, 0 ),
										NVL( FOD_STP_LSS_TGR, 0 ),
										FOD_ORDR_TYPE, 
										to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ), 
										to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ), 
										FOD_ORDR_STTS, 
										FOD_EXEC_QTY, 
										FOD_CNCL_QTY, 
										FOD_EXPRD_QTY,
										NVL( FOD_SPRD_ORDR_REF, ' ' ),
										NVL( FOD_SETTLOR, ' ' ),
										FOD_MDFCTN_CNTR,
										NVL( FOD_ACK_NMBR, ' ' ),
										FOD_SPL_FLAG,
										NVL( FOD_REMARKS, ' ' ),
										NVL( FOD_CHANNEL,'*'),                      
										NVL( FOD_BP_ID,' '),
										NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),
										NVL(FOD_FC_FLAG,' '),														
										NVL(FOD_SPN_FLG,'N'),															
                    NVL(FOD_TRD_VAL,0),                            
                    NVL(FOD_TRD_BRKG,0),                              
                    NVL(FOD_CNTRCTNT_NMBR,'*'),                       
                    FOD_SLTP_ORDR_RFRNC,                                
                    FOD_FC_FLAG,                                        
										NVL( FOD_PRCIMPV_FLG, 'N'),                          
										NVL(FOD_ESP_ID,'*'),																	
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
					FROM			FOD_FO_ORDR_DTLS,FSB_FO1CLICK_STRTGY_BUCKTDTLS
					WHERE			FOD_CLM_MTCH_ACCNT =		:c_mtch_accnt_no
          AND       FOD_XCHNG_CD       LIKE :c_exchange_cd  
					AND				FOD_PRDCT_TYP			 LIKE :c_product_typ
					AND				FOD_ORDR_STTS			 LIKE :c_ordr_stts 
					AND 			FOD_ORDR_STTS			 <>		'Y'											
					AND				FOD_IS_FLG				 LIKE :c_is_flg 
					AND       NVL(FOD_ESP_ID,'*')	 LIKE :c_ven_id     
          AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'        
          AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
          AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg
					/** ORDER BY FOD_1CLICK_PRTFL_ID,1,2 DESC; 		*** Ver 1.1 **/
          ORDER BY  FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT, FOD_ORDR_RFRNC DESC; /** Ver 1.1 **/	
				END;
			END-EXEC;
		}
		
		else if ( c_opr_typ == STATUS_PRODUCT_AND_DATE_IP )
		{
			
      if( DEBUG_MSG_LVL_0 )  
      {
      	fn_userlog(c_ServiceName,"Order Book STATUS_PRODUCT_AND_DATE_IP.");
      	fn_userlog(c_ServiceName,"Order Book c_min_ref_num Is :%s:.",c_min_ref_num);
				fn_userlog(c_ServiceName,"Order Book c_max_ref_num Is :%s:.",c_max_ref_num); 
      }

			if ( c_date_flag == 'N' )
			{
				fn_userlog( c_ServiceName,"From/To Dates are not Found in the Buffer" );
				Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
			}

   
      if ( DEBUG_MSG_LVL_0)
      { 
	  		fn_userlog(c_ServiceName,"Order Book li_rec_cnt_status_date Is :%ld:",li_rec_cnt_status_date);
      }

			

			if ( li_rec_cnt_status_date != 1 )
			{
				EXEC SQL	EXECUTE
					BEGIN
						OPEN	:sys_cursor	FOR
						SELECT  FOD_CLM_MTCH_ACCNT, 
										FOD_ORDR_RFRNC,
										FOD_PIPE_ID, 
										FOD_XCHNG_CD, 
										FOD_PRDCT_TYP,
										FOD_INDSTK,
										FOD_UNDRLYNG, 
										to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ), 
										FOD_EXER_TYP, 
										FOD_OPT_TYP, 
										FOD_STRK_PRC,
										FOD_ORDR_FLW, 
										FOD_LMT_MRKT_SL_FLG, 
										NVL( FOD_DSCLSD_QTY, 0 ), 
										FOD_ORDR_TOT_QTY, 
										NVL( FOD_LMT_RT, 0 ), 
										NVL( FOD_STP_LSS_TGR, 0 ), 
										FOD_ORDR_TYPE, 
										to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ), 
										to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ), 
										FOD_ORDR_STTS,
										FOD_EXEC_QTY, 
										FOD_CNCL_QTY, 
										FOD_EXPRD_QTY, 
										NVL( FOD_SPRD_ORDR_REF, ' ' ),
										NVL( FOD_SETTLOR, ' ' ),
										FOD_MDFCTN_CNTR,
										NVL( FOD_ACK_NMBR, ' ' ),
										FOD_SPL_FLAG,
										NVL( FOD_REMARKS, ' ' ),
										NVL( FOD_CHANNEL,'*'),                      
										NVL( FOD_BP_ID,' '),
										NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),	
										NVL(FOD_FC_FLAG,' '),														
										NVL(FOD_SPN_FLG,'N'),															
                    NVL(FOD_TRD_VAL,0),                               
                    NVL(FOD_TRD_BRKG,0),                             
                    NVL(FOD_CNTRCTNT_NMBR,'*'),                        
                    FOD_SLTP_ORDR_RFRNC,                               
                    FOD_FC_FLAG,                                         
										NVL( FOD_PRCIMPV_FLG, 'N'),                          
										NVL(FOD_ESP_ID,'*'),																	
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
						FROM		FOD_FO_ORDR_DTLS,FSB_FO1CLICK_STRTGY_BUCKTDTLS		
						WHERE		FOD_CLM_MTCH_ACCNT =		:c_mtch_accnt_no
            AND      FOD_XCHNG_CD      LIKE :c_exchange_cd 
						AND			FOD_PRDCT_TYP			 LIKE :c_product_typ
						AND			FOD_ORDR_STTS			 LIKE :c_ordr_stts 
						AND			FOD_ORDR_STTS			 <>		'Y'							
						AND			FOD_IS_FLG				 LIKE :c_is_flg 
						AND     NVL(FOD_ESP_ID,'*')		 LIKE :c_ven_id    
            AND     FOD_TRD_DT between :c_frm_dt and :c_to_dt             
            AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'        
            AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
            AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg

          ORDER BY FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT,FOD_ORDR_RFRNC DESC; 
					END;
				END-EXEC;
			}
			
			else if ( li_rec_cnt_status_date == 1 ) 
			{
				EXEC SQL	EXECUTE
					BEGIN
						OPEN	:sys_cursor	FOR
						SELECT  FOD_CLM_MTCH_ACCNT, 
										FOD_ORDR_RFRNC,
										FOD_PIPE_ID, 
										FOD_XCHNG_CD, 
										FOD_PRDCT_TYP,
										FOD_INDSTK,
										FOD_UNDRLYNG, 
										to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ), 
										FOD_EXER_TYP, 
										FOD_OPT_TYP, 
										FOD_STRK_PRC,
										FOD_ORDR_FLW, 
										FOD_LMT_MRKT_SL_FLG, 
										NVL( FOD_DSCLSD_QTY, 0 ), 
										FOD_ORDR_TOT_QTY, 
										NVL( FOD_LMT_RT, 0 ), 
										NVL( FOD_STP_LSS_TGR, 0 ), 
										FOD_ORDR_TYPE, 
										to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ), 
										to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ), 
										FOD_ORDR_STTS,
										FOD_EXEC_QTY, 
										FOD_CNCL_QTY, 
										FOD_EXPRD_QTY, 
										NVL( FOD_SPRD_ORDR_REF, ' ' ),
										NVL( FOD_SETTLOR, ' ' ),
										FOD_MDFCTN_CNTR,
										NVL( FOD_ACK_NMBR, ' ' ),
										FOD_SPL_FLAG,
										NVL( FOD_REMARKS, ' ' ),
										NVL( FOD_CHANNEL,'*'),                      
										NVL( FOD_BP_ID,' '),
										NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),	
										NVL(FOD_FC_FLAG,' '),															
										NVL(FOD_SPN_FLG,'N'),															
                    NVL(FOD_TRD_VAL,0),                               
                    NVL(FOD_TRD_BRKG,0),                              
                    NVL(FOD_CNTRCTNT_NMBR,'*'),                      
                    FOD_SLTP_ORDR_RFRNC,                               
                    FOD_FC_FLAG,                                         
										NVL( FOD_PRCIMPV_FLG, 'N'),                          
										NVL(FOD_ESP_ID,'*'),																	
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
						FROM		FOD_FO_ORDR_DTLS,FSB_FO1CLICK_STRTGY_BUCKTDTLS		
						WHERE		FOD_CLM_MTCH_ACCNT =		:c_mtch_accnt_no
            AND     FOD_XCHNG_CD       LIKE :c_exchange_cd  
						AND			FOD_PRDCT_TYP			 LIKE :c_product_typ
						AND			FOD_ORDR_STTS			 LIKE :c_ordr_stts 
						AND			FOD_ORDR_STTS			 <>		'Y'											
						AND			FOD_IS_FLG				 LIKE :c_is_flg
						AND     NVL(FOD_ESP_ID,'*')		 LIKE :c_ven_id    
            AND
                     (
                      ( FOD_ORDR_RFRNC        >=    :c_min_ref_num
                        AND   FOD_ORDR_RFRNC  <     :c_max_ref_num ) OR
                      ( FOD_ORDR_RFRNC        <     :c_min_ref_num
                        AND FOD_TRD_DT >=    to_date(:c_frm_dt,'dd-mon-yyyy') ) 
                     )
            AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'        
            AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
            AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg
						UNION ALL
						SELECT  FOD_CLM_MTCH_ACCNT, 
										FOD_ORDR_RFRNC,
										FOD_PIPE_ID, 
										FOD_XCHNG_CD, 
										FOD_PRDCT_TYP,
										FOD_INDSTK,
										FOD_UNDRLYNG, 
										to_char ( FOD_EXPRY_DT, 'dd-Mon-yyyy' ), 
										FOD_EXER_TYP, 
										FOD_OPT_TYP, 
										FOD_STRK_PRC,
										FOD_ORDR_FLW, 
										FOD_LMT_MRKT_SL_FLG, 
										NVL( FOD_DSCLSD_QTY, 0 ), 
										FOD_ORDR_TOT_QTY, 
										NVL( FOD_LMT_RT, 0 ), 
										NVL( FOD_STP_LSS_TGR, 0 ), 
										FOD_ORDR_TYPE, 
										to_char ( FOD_ORDR_VALID_DT, 'dd-Mon-yyyy' ), 
										to_char ( FOD_TRD_DT, 'dd-Mon-yyyy' ), 
										FOD_ORDR_STTS,
										FOD_EXEC_QTY, 
										FOD_CNCL_QTY, 
										FOD_EXPRD_QTY, 
										NVL( FOD_SPRD_ORDR_REF, ' ' ),
										NVL( FOD_SETTLOR, ' ' ),
										FOD_MDFCTN_CNTR,
										NVL( FOD_ACK_NMBR, ' ' ),
										FOD_SPL_FLAG,
										NVL( FOD_REMARKS, ' ' ),
										NVL( FOD_CHANNEL,'*'),                    
										NVL( FOD_BP_ID,' '),
										NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),
										NVL(FOD_FC_FLAG,' '),															
										NVL(FOD_SPN_FLG,'N'),														
                    NVL(FOD_TRD_VAL,0),                               
                    NVL(FOD_TRD_BRKG,0),                              
                    NVL(FOD_CNTRCTNT_NMBR,'*'),                      
                    FOD_SLTP_ORDR_RFRNC,                                
                    FOD_FC_FLAG,                                       
										NVL( FOD_PRCIMPV_FLG, 'N'),                          
										NVL(FOD_ESP_ID,'*'),																	
                    NVL(FSB_STRGY_ID,0),
                    NVL(FSB_PRTFL_NAME,' '),
                    FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
						FROM		FOD_FO_ORDR_DTLS_HSTRY,FSB_FO1CLICK_STRTGY_BUCKTDTLS		
						WHERE		FOD_CLM_MTCH_ACCNT =		:c_mtch_accnt_no
            AND      FOD_XCHNG_CD      LIKE :c_exchange_cd  
						AND			FOD_PRDCT_TYP			 LIKE :c_product_typ
						AND			FOD_ORDR_STTS			 LIKE :c_ordr_stts 
						AND			FOD_ORDR_STTS			 <>		'Y'											
						AND			FOD_IS_FLG				 LIKE :c_is_flg     
						AND     NVL(FOD_ESP_ID,'*')	 LIKE :c_ven_id    
            AND
                     (
                      ( FOD_ORDR_RFRNC        >=    :c_min_ref_num
                        AND   FOD_ORDR_RFRNC  <     :c_max_ref_num ) OR
                      ( FOD_ORDR_RFRNC        <     :c_min_ref_num
                        AND FOD_TRD_DT >=    to_date(:c_frm_dt,'dd-mon-yyyy') )  
                     )
            AND     NVL(FOD_1CLICK_FLG,'N') = 'Y'        
            AND     FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID
            AND     NVL(FSB_CUST_RCMEND_FLG,'N') Like : c_1click_rcmflg
            ORDER BY FOD_1CLICK_PRTFL_ID,FOD_CLM_MTCH_ACCNT,FOD_ORDR_RFRNC DESC;	
					END;
				END-EXEC;
			}
    }
		else if ( c_opr_typ == EXCHNG_ACK_AND_PIPE_ID_IP )
		{  
        if ( DEBUG_MSG_LVL_5 )  
        {
					fn_userlog(c_ServiceName, "EXCHNG_ACK_AND_PIPE_ID_IP Commented by Sangeet");
		    }
    } 
		


		else if ( c_opr_typ == ORDER_REF_IP )
		{
					SETLEN( c_ordr_ref );
          
          if ( DEBUG_MSG_LVL_1 )  
          {				
	        	fn_userlog(c_ServiceName, "INSIDE ORDER_REF_IP" );
						fn_userlog(c_ServiceName, "c_ordr_ref = :%s:", c_ordr_ref.arr);
          }

					li_rec_main_exists = 0;

    		  EXEC SQL
        	SELECT    1
          INTO    :li_rec_main_exists
        	FROM      dual
        	WHERE     EXISTS
        	(
        		SELECT    1
          	FROM    fod_fo_ordr_dtls
         		WHERE   fod_ordr_rfrnc     = :c_ordr_ref
        );

	 		  if ( DEBUG_MSG_LVL_5 )  
        {
        	fn_userlog(c_ServiceName, "li_rec_main_exists = :%ld:", li_rec_main_exists);
        }

    	 if ( ( SQLCODE !=0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    	 {
							fn_errlog( c_ServiceName, "S31080", SQLMSG, c_errmsg  );
							Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
							tpcommit(0);
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
       }
	

			if ( li_rec_main_exists == 1 )
      {
      		EXEC SQL  EXECUTE
          BEGIN
          OPEN  :sys_cursor FOR
          SELECT  fod_clm_mtch_accnt,
                      fod_ordr_rfrnc,
                      fod_pipe_id,
                      fod_xchng_cd,
                      fod_prdct_typ,
                      fod_indstk,
                      fod_undrlyng,
                      to_char ( fod_expry_dt, 'dd-Mon-yyyy' ),
                      fod_exer_typ,
                      fod_opt_typ,
                      fod_strk_prc,
                      fod_ordr_flw,
                      fod_lmt_mrkt_sl_flg,
                      NVL( fod_dsclsd_qty, 0 ),
                      fod_ordr_tot_qty,
                      NVL( fod_lmt_rt, 0 ),
                      NVL( fod_stp_lss_tgr, 0 ),
                      fod_ordr_type,
                      to_char ( fod_ordr_valid_dt, 'dd-Mon-yyyy' ),
                      to_char ( fod_trd_dt, 'dd-Mon-yyyy' ),
                      fod_ordr_stts,
                      fod_exec_qty,
                      fod_cncl_qty,
                      fod_exprd_qty,
                      NVL( fod_sprd_ordr_ref, ' ' ),
                      NVL( fod_settlor, ' ' ),
                      fod_mdfctn_cntr,
											NVL( fod_ack_nmbr, ' ' ),
                      fod_spl_flag,
                      NVL(fod_remarks,' '),
                      NVL( fod_channel,'*'),
                      NVL( fod_bp_id,' '),
											NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),	
											NVL(FOD_FC_FLAG,' '),															
											NVL(FOD_SPN_FLG,'N'),														
                    	NVL(FOD_TRD_VAL,0),                             
                    	NVL(FOD_TRD_BRKG,0),                             
                    	NVL(FOD_CNTRCTNT_NMBR,'*'),                       
                      FOD_SLTP_ORDR_RFRNC,                                
                      FOD_FC_FLAG,                                         
											NVL( FOD_PRCIMPV_FLG, 'N'),                          
											NVL(FOD_ESP_ID,'*'),																	
                      NVL(FSB_STRGY_ID,0),
                      NVL(FSB_PRTFL_NAME,' '),
                      FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
                FROM  fod_fo_ordr_dtls,FSB_FO1CLICK_STRTGY_BUCKTDTLS
                WHERE fod_ordr_rfrnc = :c_ordr_ref
                AND   FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID;


								END;
							END-EXEC;

				}
				else
    		{
							EXEC SQL  EXECUTE
							BEGIN
              OPEN  :sys_cursor FOR
              SELECT  fod_clm_mtch_accnt,
                      fod_ordr_rfrnc,
                      fod_pipe_id,
                      fod_xchng_cd,
                      fod_prdct_typ,
                      fod_indstk,
                      fod_undrlyng,
                      to_char ( fod_expry_dt, 'dd-Mon-yyyy' ),
                      fod_exer_typ,
                      fod_opt_typ,
                      fod_strk_prc,
                      fod_ordr_flw,
                      fod_lmt_mrkt_sl_flg,
                      NVL( fod_dsclsd_qty, 0 ),
                      fod_ordr_tot_qty,
                      NVL( fod_lmt_rt, 0 ),
                      NVL( fod_stp_lss_tgr, 0 ),
                      fod_ordr_type,
                      to_char ( fod_ordr_valid_dt, 'dd-Mon-yyyy' ),
                      to_char ( fod_trd_dt, 'dd-Mon-yyyy' ),
                      fod_ordr_stts,
                      fod_exec_qty,
                      fod_cncl_qty,
                      fod_exprd_qty,
                      NVL( fod_sprd_ordr_ref, ' ' ),
                      NVL( fod_settlor, ' ' ),
                      fod_mdfctn_cntr,
											NVL( fod_ack_nmbr, ' ' ),
                      fod_spl_flag,
                      NVL(fod_remarks,' '),
                      NVL( fod_channel,'*'),
                      NVL( fod_bp_id,' '),
											NVL(FOD_AMT_BLCKD,0) + NVL(FOD_LSS_AMT_BLCKD,0),
											NVL(FOD_FC_FLAG,' '),															
											NVL(FOD_SPN_FLG,'N'),														
                    	NVL(FOD_TRD_VAL,0),                          
                    	NVL(FOD_TRD_BRKG,0),                              
                    	NVL(FOD_CNTRCTNT_NMBR,'*'),                        
                      FOD_SLTP_ORDR_RFRNC,                               
                      FOD_FC_FLAG,                                         
											NVL( FOD_PRCIMPV_FLG, 'N'),                          
											NVL(FOD_ESP_ID,'*'),																
                      NVL(FSB_STRGY_ID,0),
                      NVL(FSB_PRTFL_NAME,' '),
                      FOD_1CLICK_PRTFL_ID           /** Ver 1.1 **/
                FROM  fod_fo_ordr_dtls_hstry,FSB_FO1CLICK_STRTGY_BUCKTDTLS
                WHERE fod_ordr_rfrnc = :c_ordr_ref
                AND   FOD_1CLICK_PRTFL_ID = FSB_PRTFL_ID;
            END;
        END-EXEC;
      }
		} /**end if **/
		else
		{
			strcpy ( c_errmsg, "Invalid operation type" );
			fn_userlog( c_ServiceName,"Invalid operation type" );
			EXEC SQL FREE :sys_cursor;
			Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
		}
	} 

	if ( SQLCODE != 0 )
	{
		fn_errlog( c_ServiceName, "S31085", SQLMSG, c_errmsg  );
    EXEC SQL FREE :sys_cursor;
    Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
	}
	ptr_fml_obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN * BUF_MULTIPLY );

  if ( ptr_fml_obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31090", TPMSG, c_errmsg  );
    EXEC SQL CLOSE :sys_cursor;
    EXEC SQL FREE :sys_cursor;
    Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
  }


	ptr_st_orderbook = malloc(sizeof(struct vw_orderbook));

  if ( ptr_st_orderbook == NULL )
  {
    fn_errlog( c_ServiceName, "S31095", TPMSG, c_errmsg  );
		EXEC SQL CLOSE :sys_cursor;
    EXEC SQL FREE :sys_cursor;
		tpfree ( ( char * )ptr_fml_obuf);
    Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
  }

  memset ( ptr_st_orderbook, 0, sizeof ( struct vw_orderbook ) );

	strcpy ( ptr_st_orderbook->c_user_id, st_usr_prfl.c_user_id );
	ptr_st_orderbook->c_oprn_typ = c_opr_typ; 
	strcpy ( ptr_st_orderbook->c_cln_mtch_accnt, c_mtch_accnt_no );

  i_counter = 1 ;

	for ( ; ; )
	{
		fn_userlog(c_ServiceName,"Inside for loop 3577 <%d>",i_counter);
		MEMSET(c_esp_id);	
		MEMSET(c_esp_nm);	
    MEMSET(c_strgy_id);
    MEMSET(c_prtfl_name);

		EXEC SQL FETCH :sys_cursor
							INTO :ptr_st_orderbook->c_cln_mtch_accnt, 
									 :ptr_st_orderbook->c_ordr_rfrnc,
									 :ptr_st_orderbook->c_pipe_id,
									 :ptr_st_orderbook->c_xchng_cd,  
									 :ptr_st_orderbook->c_prd_typ,  
									 :ptr_st_orderbook->c_ctgry_indstk,  
									 :ptr_st_orderbook->c_undrlyng,  
									 :c_exp_date,  
									 :ptr_st_orderbook->c_exrc_typ,  
									 :ptr_st_orderbook->c_opt_typ,  
									 :ptr_st_orderbook->l_strike_prc,  
									 :ptr_st_orderbook->c_ordr_flw,  
									 :ptr_st_orderbook->c_slm_flg,  
									 :ptr_st_orderbook->l_dsclsd_qty,  
									 :ptr_st_orderbook->l_ord_tot_qty,  
									 :ptr_st_orderbook->l_ord_lmt_rt,  
									 :ptr_st_orderbook->l_stp_lss_tgr,  
									 :ptr_st_orderbook->c_ord_typ,  
									 :c_valid_date,  
									 :c_trd_date,  
									 :ptr_st_orderbook->c_ordr_stts,  
									 :ptr_st_orderbook->l_exctd_qty,  
									 :ptr_st_orderbook->l_can_qty,  
									 :ptr_st_orderbook->l_exprd_qty,  
									 :ptr_st_orderbook->c_sprd_ord_rfrnc,  
									 :ptr_st_orderbook->c_settlor,
									 :ptr_st_orderbook->l_mdfctn_cntr,
									 :ptr_st_orderbook->c_xchng_ack,
                   :ptr_st_orderbook->c_spl_flg,
                   :c_remarks,
									 :ptr_st_orderbook->c_channel,
									 :ptr_st_orderbook->c_bp_id,
									 :d_mrgn_blk,												
									 :c_fc_flg, 										
									 :c_spn_flg,												
									 :d_trd_val,												
									 :l_brkg_val,													
									 :c_cntrct_num,											
                   :c_tag_ordr_rfrnce,                  
                   :c_fc_flg,                          
									 :c_prcimpv_flg,                    	
									 :c_esp_id,													
                   :c_strgy_id,
                   :c_prtfl_name,
                   :c_prtfl_id; 
		if ( SQLCODE != 0 )
		{
			if ( SQLCODE == NO_DATA_FOUND )
			{
				fn_userlog(c_ServiceName,"Inside No Data Found OR All data fetched");
				break;
			}
			else
			{
				fn_errlog( c_ServiceName, "S31100", SQLMSG, c_errmsg  );
      	EXEC SQL CLOSE :sys_cursor;
      	EXEC SQL FREE :sys_cursor;
      	tpfree ( ( char * ) ptr_fml_obuf );
				free((char *)ptr_st_orderbook);		/** Ver 4.8 **/
      	Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
			}
		}
		rtrim(c_cntrct_num);
		SETLEN(c_esp_id); 
		SETNULL(c_esp_id); 
   

    if ( DEBUG_MSG_LVL_0 ) 
    {
			fn_userlog(c_ServiceName,"SPAN FLAG :%c:",c_spn_flg);																							
			fn_userlog(c_ServiceName,"ptr_st_orderbook->c_ordr_rfrnc :%s:",ptr_st_orderbook->c_ordr_rfrnc);		
    }
 
	  
    if ( DEBUG_MSG_LVL_0 ) 
    {
  		fn_userlog(c_ServiceName,"Contract Note Number Is :%s:",c_cntrct_num);
    }


    if( (ptr_st_orderbook->c_spl_flg == IMTM_SYS_SQUAREOFF ) || (ptr_st_orderbook->c_spl_flg == LMTNEG_SYS_SQUAREOFF ) )
    {
      ptr_st_orderbook->c_spl_flg = 'S';
    }


	 c_sltp_trail_flag = '\0';    

	 if ( strcmp(ptr_st_orderbook->c_channel,"WE4") == 0 || strcmp(ptr_st_orderbook->c_channel,"WE6") == 0 ||
 				strcmp(ptr_st_orderbook->c_channel,"WE7") == 0 || strcmp(ptr_st_orderbook->c_channel,"WE8") == 0 || 
        strcmp(ptr_st_orderbook->c_channel,"WE9") == 0 || strcmp(ptr_st_orderbook->c_channel,"WEH") == 0 ||
				st_usr_prfl.l_session_id != 0 ) 
    {
    	EXEC SQL
      	SELECT  NVL(FTQ_LST_TRD_PRC,0),
								NVL(FTQ_TRAIL_FLG,'N')          
      	INTO    :l_ltp_prc,
								:c_sltp_trail_flag              	
      	FROM    FTQ_FO_TRD_QT
      	WHERE   FTQ_XCHNG_CD  = :ptr_st_orderbook->c_xchng_cd                             
				AND     FTQ_PRDCT_TYP = decode(:ptr_st_orderbook->c_prd_typ,'P','F','U','F','I','O',:ptr_st_orderbook->c_prd_typ) 
      	AND     FTQ_UNDRLYNG  = :ptr_st_orderbook->c_undrlyng
      	AND     FTQ_EXPRY_DT  = :c_exp_date
      	AND     FTQ_EXER_TYP  = :ptr_st_orderbook->c_exrc_typ
      	AND     FTQ_OPT_TYP   = :ptr_st_orderbook->c_opt_typ
      	AND     FTQ_STRK_PRC  = :ptr_st_orderbook->l_strike_prc;

    	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    	{
      	fn_errlog( c_ServiceName, "S31105", SQLMSG, c_errmsg  );
      	EXEC SQL CLOSE :sys_cursor;
      	EXEC SQL FREE :sys_cursor;
      	tpfree ( ( char * ) ptr_fml_obuf );
				free((char *)ptr_st_orderbook);		/** Ver 4.8 **/
      	Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    	}

    	if( DEBUG_MSG_LVL_0 )
    	{
      	fn_userlog(c_ServiceName,"l_ltp_prc:%ld:",l_ltp_prc);
    	}

    	if ( Fadd32 ( ptr_fml_obuf,FFO_LST_TRD_PRC ,( char *)&l_ltp_prc, 0 ) == -1 )
    	{
      	fn_errlog( c_ServiceName, "S31110",FMLMSG,c_errmsg);
      	EXEC SQL CLOSE :sys_cursor;
      	EXEC SQL FREE :sys_cursor;
      	tpfree ( ( char * ) ptr_fml_obuf );
				free((char *)ptr_st_orderbook);		/** Ver 4.8 **/
      	strcpy(c_errmsg,"Problem in adding Open Quantity");
      	Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
     	}
  	}	


 
		if(ptr_st_orderbook->c_channel[0] == '*'|| strcmp(ptr_st_orderbook->c_channel,"WE1") == 0 ||
       strcmp(ptr_st_orderbook->c_channel,"WE4") == 0 || strcmp(ptr_st_orderbook->c_channel,"WE6") == 0 ||
       strcmp(ptr_st_orderbook->c_channel,"WE7") == 0 || strcmp(ptr_st_orderbook->c_channel,"WE8") == 0 ||
       strcmp(ptr_st_orderbook->c_channel,"WE9") == 0 || strcmp(ptr_st_orderbook->c_channel,"WEH") == 0 ||
       strcmp(ptr_st_orderbook->c_channel,"WEN") == 0 || strcmp(ptr_st_orderbook->c_channel,"WEO") == 0 ||
       strcmp(ptr_st_orderbook->c_channel,"WEP") == 0 || strcmp(ptr_st_orderbook->c_channel,"WED") == 0 ) 
		{
				strcpy(ptr_st_orderbook->c_channel,"WEB");
		}


		if((strcmp(ptr_st_orderbook->c_channel,"CN1")== 0)||(strcmp(ptr_st_orderbook->c_channel,"CN2")== 0))  
		{
				strcpy(ptr_st_orderbook->c_channel,"CNT");
		}

		SETNULL(c_exp_date);
		SETNULL(c_valid_date);
		SETNULL(c_trd_date);

		strcpy ( ptr_st_orderbook->c_expry_dt, ( char * ) c_exp_date.arr );
		strcpy ( ptr_st_orderbook->c_valid_dt, ( char * ) c_valid_date.arr );
		strcpy ( ptr_st_orderbook->c_trd_dt,   ( char * ) c_trd_date.arr );

    l_bufferlength = 	sizeof( struct vw_orderbook ) 
                   +  sizeof( c_remarks ) 
                   +  (sizeof( c_mod_can_flg ) * 2)
									 +	sizeof(c_dbc_channel)												
									 +	sizeof(l_open_qty)												
									 +	sizeof(d_mrgn_blk)													
									 +	256;

    if ( Fneeded32( 1, l_bufferlength ) > Funused32( ptr_fml_obuf ) )
    {
      i_counter++;
				ptr_fml_obuf = ( FBFR32 *)tprealloc( (char *)ptr_fml_obuf,
											 (Fsizeof32(ptr_fml_obuf) + (i_counter *l_bufferlength )));

      if ( ptr_fml_obuf == NULL )
      {
        fn_errlog( c_ServiceName, "S31115", TPMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
				free((char *)ptr_st_orderbook);		/** Ver 4.8 **/
        Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
      }
    }

		if (c_apisrc_flg == 'A') 
		{
    EXEC SQL
       SELECT 1
       INTO   :i_rec_count
       FROM  dual
       WHERE exists
                  (
                   SELECT 1
                   FROM   fxb_fo_xchng_book
                   WHERE  fxb_ordr_rfrnc = :ptr_st_orderbook->c_ordr_rfrnc
                  );

    if ( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    {
      fn_errlog( c_ServiceName, "S31120", SQLMSG, c_errmsg  );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
			tpfree ( ( char * )ptr_fml_obuf);
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }

      if ( i_rec_count != 1 )
      {
				EXEC SQL
            SELECT    nvl(to_char(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-'),
											nvl(to_char(FXB_RQST_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-')	/*** Ver 6.4 **/
            INTO      :c_ack_time,
											:c_rqst_time	
            FROM      fxb_fo_xchng_book_hstry
            WHERE     fxb_ordr_rfrnc = :ptr_st_orderbook->c_ordr_rfrnc AND
                      fxb_mdfctn_cntr = ( SELECT  nvl(MAX(FXB_MDFCTN_CNTR),1)
                                          FROM    fxb_fo_xchng_book_hstry
                                          WHERE   fxb_ordr_rfrnc = :ptr_st_orderbook->c_ordr_rfrnc AND
                                                  fxb_plcd_stts = 'A'
                                        );
      }
      else
      {

        EXEC SQL
            SELECT    nvl(to_char(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-'),
											nvl(to_char(FXB_RQST_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-')	
            INTO      :c_ack_time,
											:c_rqst_time
            FROM      fxb_fo_xchng_book
            WHERE     fxb_ordr_rfrnc = :ptr_st_orderbook->c_ordr_rfrnc AND
                      fxb_mdfctn_cntr = ( SELECT  nvl(MAX(FXB_MDFCTN_CNTR),1)
                                          FROM    fxb_fo_xchng_book
                                          WHERE   fxb_ordr_rfrnc = :ptr_st_orderbook->c_ordr_rfrnc AND
                                                  fxb_plcd_stts = 'A'
                                        );

      }

      if ( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
      {
        fn_errlog( c_ServiceName, "S31125", SQLMSG, c_errmsg );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
				tpfree ( ( char * )ptr_fml_obuf);
        Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, (char*)c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_ibuf, 0, 0 );
      }

      if ( (SQLCODE == NO_DATA_FOUND) )
      {
        strcpy((char*)c_ack_time.arr,"*");
				strcpy((char*)c_rqst_time.arr,"*");	
      }
      else
      {
        SETNULL( c_ack_time );
				SETNULL( c_rqst_time );
      } 
			
		 } 

			if( DEBUG_MSG_LVL_0 ) 
			{ /*  Ver 1.8 : Debug level Change  */
      	fn_userlog( c_ServiceName, "C_ORDER_RFRNC before packing is :%s",ptr_st_orderbook->c_ordr_rfrnc );
      	fn_userlog( c_ServiceName, "C_ACK_TIME before packing is :%s",c_ack_time.arr );
				fn_userlog( c_ServiceName, "C_RQST_TIME before packing is :%s",c_rqst_time.arr );
			}
			strcpy ( ptr_st_orderbook->c_ack_tm,   ( char * ) c_ack_time.arr ); 


		
		if (c_apisrc_flg != 'A') /*** Site call ***/
		{

			  EXEC SQL
				SELECT NVL(IAD_INDV_COMP_NAME,'*')
				INTO   :c_esp_nm
				FROM   IAD_IDIRECT_API_DTLS
				WHERE  IAD_ECO_SYS_PRTNR_CD = :c_esp_id;

				if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
				{
					fn_errlog( c_ServiceName, "S31130","Error in fetching ESP NAME",c_errmsg);
					Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
				}
			 if (SQLCODE == NO_DATA_FOUND)
			 {
					strcpy(c_esp_nm ,"*");
			 }
		  rtrim(c_esp_nm);
			
			if( DEBUG_MSG_LVL_5 )
			{
				fn_userlog(c_ServiceName,"Order Ref :%s: ESP_ID :%s: ESP_NM :%s:",ptr_st_orderbook->c_ordr_rfrnc,c_esp_id.arr,c_esp_nm);
			}
		}

		/***Added by SANGEET to recover from NOSPACE ERROR **/
    if ( Fneeded32( 1, l_bufferlength ) > Funused32( ptr_fml_obuf ) )
    {
      i_counter++;


				ptr_fml_obuf = ( FBFR32 *)tprealloc( (char *)ptr_fml_obuf,
                       (Fsizeof32(ptr_fml_obuf) + (i_counter *l_bufferlength )));		

      if ( ptr_fml_obuf == NULL )
      {
        fn_errlog( c_ServiceName, "S31135", TPMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
				free((char *)ptr_st_orderbook);		
        Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
      }
    }


    i_returncode = fn_pack_vartofml(c_ServiceName,
                                    c_errmsg,
                                    &ptr_fml_obuf,
                                    34,           
																		FFO_EBA_MTCH_ACT_NO, (char*)ptr_st_orderbook->c_cln_mtch_accnt,
																		FFO_ORDR_RFRNC, (char*)ptr_st_orderbook->c_ordr_rfrnc,
																		FFO_PIPE_ID, (char*)ptr_st_orderbook->c_pipe_id,
																		FFO_XCHNG_CD, (char*)ptr_st_orderbook->c_xchng_cd,
																		FFO_PRDCT_TYP, (char*)&ptr_st_orderbook->c_prd_typ,
																		FFO_CTGRY_INDSTK, (char*)&ptr_st_orderbook->c_ctgry_indstk,
																		FFO_UNDRLYNG, (char*)ptr_st_orderbook->c_undrlyng,
																		FFO_EXER_TYP, (char*)&ptr_st_orderbook->c_exrc_typ,
																		FFO_OPT_TYP, (char*)&ptr_st_orderbook->c_opt_typ,
																		FFO_STRK_PRC, (char*)&ptr_st_orderbook->l_strike_prc,
																		FFO_ORDR_FLW, (char*)&ptr_st_orderbook->c_ordr_flw,
																		FFO_LMT_MKT_SL_FLG, (char*)&ptr_st_orderbook->c_slm_flg,
																		FFO_DSCLSD_QTY, (char*)&ptr_st_orderbook->l_dsclsd_qty,
																		FFO_ORD_TOT_QTY, (char*)&ptr_st_orderbook->l_ord_tot_qty,
																		FFO_LMT_RT, (char*)&ptr_st_orderbook->l_ord_lmt_rt,
																		FFO_STP_LSS_TGR, (char*)&ptr_st_orderbook->l_stp_lss_tgr,
																		FFO_ORD_TYP, (char*)&ptr_st_orderbook->c_ord_typ,
																		FFO_ORDR_STTS, (char*)&ptr_st_orderbook->c_ordr_stts,
																		FFO_EXEC_QTY, (char*)&ptr_st_orderbook->l_exctd_qty,
																		FFO_CANCL_QTY, (char*)&ptr_st_orderbook->l_can_qty,
																		FFO_EXPRD_QTY, (char*)&ptr_st_orderbook->l_exprd_qty,
																		FFO_ACK_NMBR, (char*)ptr_st_orderbook->c_xchng_ack,
																		FFO_SPL_FLG, (char*)&ptr_st_orderbook->c_spl_flg,
																		FFO_CHANNEL, (char*)ptr_st_orderbook->c_channel,
   																	FFO_ACK_TM, (char*)ptr_st_orderbook->c_ack_tm,
																		FFO_EXPRY_DT, (char*)ptr_st_orderbook->c_expry_dt,
																		FFO_ORD_VALID_DT, (char*)ptr_st_orderbook->c_valid_dt,
																		FFO_TRD_DT, (char*)ptr_st_orderbook->c_trd_dt,
																		FFO_NXT_TRD_DT, (char*)c_nxt_trade_dt.arr,             	
																		FFO_PRC_INDCTR, (char*)&c_prcimpv_flg,                 		
																		FFO_RQST_TM,(char*)c_rqst_time.arr,								  	
																		FFO_QSPACE_NAME,(char*)c_esp_nm,
                                    FFO_BILL_NO,(char*)c_strgy_id,
                                    FFO_IP_VIEW_NM, (char*)&c_prtfl_name.arr);											
																		
    if ( i_returncode == -1 )
    {
      if( Ferror32 == FNOSPACE )
      {
        i_counter++;


				ptr_fml_obuf = ( FBFR32 *)tprealloc( (char *)ptr_fml_obuf,
                       (Fsizeof32(ptr_fml_obuf) + (i_counter *l_bufferlength )));

        if ( ptr_fml_obuf == NULL )
        {
          fn_errlog( c_ServiceName, "S31140", TPMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
					free((char *)ptr_st_orderbook);		
          Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
        }
				

    i_returncode = fn_pack_vartofml(c_ServiceName,
                                    c_errmsg,
                                    &ptr_fml_obuf,
                                    34,  
																		FFO_EBA_MTCH_ACT_NO, (char*)ptr_st_orderbook->c_cln_mtch_accnt,
																		FFO_ORDR_RFRNC, (char*)ptr_st_orderbook->c_ordr_rfrnc,
																		FFO_PIPE_ID, (char*)ptr_st_orderbook->c_pipe_id,
																		FFO_XCHNG_CD, (char*)ptr_st_orderbook->c_xchng_cd,
																		FFO_PRDCT_TYP, (char*)&ptr_st_orderbook->c_prd_typ,
																		FFO_CTGRY_INDSTK, (char*)&ptr_st_orderbook->c_ctgry_indstk,
																		FFO_UNDRLYNG, (char*)ptr_st_orderbook->c_undrlyng,
																		FFO_EXER_TYP, (char*)&ptr_st_orderbook->c_exrc_typ,
																		FFO_OPT_TYP, (char*)&ptr_st_orderbook->c_opt_typ,
																		FFO_STRK_PRC, (char*)&ptr_st_orderbook->l_strike_prc,
																		FFO_ORDR_FLW, (char*)&ptr_st_orderbook->c_ordr_flw,
																		FFO_LMT_MKT_SL_FLG, (char*)&ptr_st_orderbook->c_slm_flg,
																		FFO_DSCLSD_QTY, (char*)&ptr_st_orderbook->l_dsclsd_qty,
																		FFO_ORD_TOT_QTY, (char*)&ptr_st_orderbook->l_ord_tot_qty,
																		FFO_LMT_RT, (char*)&ptr_st_orderbook->l_ord_lmt_rt,
																		FFO_STP_LSS_TGR, (char*)&ptr_st_orderbook->l_stp_lss_tgr,
																		FFO_ORD_TYP, (char*)&ptr_st_orderbook->c_ord_typ,
																		FFO_ORDR_STTS, (char*)&ptr_st_orderbook->c_ordr_stts,
																		FFO_EXEC_QTY, (char*)&ptr_st_orderbook->l_exctd_qty,
																		FFO_CANCL_QTY, (char*)&ptr_st_orderbook->l_can_qty,
																		FFO_EXPRD_QTY, (char*)&ptr_st_orderbook->l_exprd_qty,
																		FFO_ACK_NMBR, (char*)ptr_st_orderbook->c_xchng_ack,
																		FFO_SPL_FLG, (char*)&ptr_st_orderbook->c_spl_flg,
																		FFO_CHANNEL, (char*)ptr_st_orderbook->c_channel,
																		FFO_ACK_TM, (char*)ptr_st_orderbook->c_ack_tm,
																		FFO_EXPRY_DT, (char*)ptr_st_orderbook->c_expry_dt,
																		FFO_ORD_VALID_DT, (char*)ptr_st_orderbook->c_valid_dt,
																		FFO_TRD_DT, (char*)ptr_st_orderbook->c_trd_dt,
																		FFO_NXT_TRD_DT, (char*)c_nxt_trade_dt.arr,          
																		FFO_PRC_INDCTR, (char*)&c_prcimpv_flg,              
																		FFO_RQST_TM,(char*)c_rqst_time.arr ,								
																		FFO_QSPACE_NAME,(char*)c_esp_nm,
                                    FFO_BILL_NO,(char*)c_strgy_id,
                                    FFO_IP_VIEW_NM,(char*)&c_prtfl_name.arr);									


        if ( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31145", FMLMSG, c_errmsg  );
          EXEC SQL CLOSE :sys_cursor;
          EXEC SQL FREE :sys_cursor;
          tpfree ( ( char * ) ptr_fml_obuf );
					free((char *)ptr_st_orderbook);		/** Ver 4.8 **/
          Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
        }
		
				if( ptr_st_orderbook->c_prd_typ == 'F' )
				{
					if ( Fadd32 ( ptr_fml_obuf,FFO_SPRD_ORD_REF ,( char *)c_tag_ordr_rfrnce,0) == -1)
					{
						fn_errlog( c_ServiceName, "S31150",FMLMSG,c_errmsg);
						EXEC SQL CLOSE :sys_cursor;
						EXEC SQL FREE :sys_cursor;
						tpfree ( ( char * ) ptr_fml_obuf );
						free((char *)ptr_st_orderbook);
						strcpy(c_errmsg,"Problem in adding Tagged order order type");
						Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
					}
				}
      }
      else
      {
        fn_errlog( c_ServiceName, "S31155", FMLMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        tpfree ( ( char * ) ptr_fml_obuf );
				free((char *)ptr_st_orderbook);		/** Ver 4.8 **/
        Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
      }
    }
		if( ptr_st_orderbook->c_prd_typ == 'F' )
		{
			if ( Fadd32 ( ptr_fml_obuf,FFO_SPRD_ORD_REF ,( char *)c_tag_ordr_rfrnce,0) == -1)
			{
				fn_errlog( c_ServiceName, "S31160",FMLMSG,c_errmsg);
				EXEC SQL CLOSE :sys_cursor;
				EXEC SQL FREE :sys_cursor;
				tpfree ( ( char * ) ptr_fml_obuf );
				free((char *)ptr_st_orderbook);
				strcpy(c_errmsg,"Problem in adding Tagged order order type");
				Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
			}
		}
	
    if ( Fadd32 ( ptr_fml_obuf, FFO_XCHNG_RMRKS,
                                (char *)c_remarks, 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31165", FMLMSG, c_errmsg  );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
			free((char *)ptr_st_orderbook);		/** Ver 4.8 **/
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }
	
		c_mod_can_flg = 'N';
     c_cancel_can_flg='N';   
     c_sqoff_at_mkt  = 'N';  

    /***************************************************************************************************

      If condition added to skip Action Link logic for below cases ,

      1]  Trading Screen : When request comes through Trading Screen we can skip below logic as we use trading
          screen only for display purpose.
      2]  History Records : For history records we never display links,so we can skip below action link logic.
      3]  Intraday Records : We can skip below logic for records having order status other than Requested,Ordered,
          and Part Executed as we display action link against these three order status only.

    **************************************************************************************************************/


   if( st_usr_prfl.l_session_id != 0 && ( ( ptr_st_orderbook->c_ordr_stts == REQUESTED ) ||
                                          ( ptr_st_orderbook->c_ordr_stts == ORDERED ) ||
                                          ( ptr_st_orderbook->c_ordr_stts == PARTIALLY_EXECUTED ) ) )
   {

		/** Added for Temporary order book  ***/

		if ( strncmp ( ptr_st_orderbook->c_ordr_rfrnc,"TP",2) == 0 )
		{
			if ( ptr_st_orderbook->c_ordr_stts == CANCELLED )
			{
				c_mod_can_flg = 'N';
        c_cancel_can_flg='N';   
			}
			else
			{
				c_mod_can_flg = 'Y';
        c_cancel_can_flg='Y';  
			}
		}
		else
		{
			if ( ( ptr_st_orderbook->c_ordr_stts == REQUESTED ) || 
					 ( ptr_st_orderbook->c_ordr_stts == ORDERED ) ||
					 ( ptr_st_orderbook->c_ordr_stts == PARTIALLY_EXECUTED ) )
			{
				c_mod_can_flg = 'Y';

			}

			d_trail_amt = 0.0;           
      d_trl_upd_cond_val = 0.0; 
      d_incrmnt_prc = 0.0;          

			if ( ( ptr_st_orderbook->c_ordr_stts == ORDERED ) ||
					 ( ptr_st_orderbook->c_ordr_stts == PARTIALLY_EXECUTED ) )
	    {
        if( DEBUG_MSG_LVL_4 ) 
        {
         fn_userlog(c_ServiceName,"ptr_st_orderbook->c_xchng_cd :%s:",ptr_st_orderbook->c_xchng_cd);
         fn_userlog(c_ServiceName,"ptr_st_orderbook->c_ordr_rfrnc :%s:",ptr_st_orderbook->c_ordr_rfrnc);
         fn_userlog(c_ServiceName,"ptr_st_orderbook->l_mdfctn_cntr :%ld:",ptr_st_orderbook->l_mdfctn_cntr);
        }
	       EXEC SQL
							SELECT fxb_rqst_typ,
										 fxb_plcd_stts,
										 NVL(fxb_trail_amt,0),            
                     NVL(fxb_trl_upd_cond_val,0),     
                     NVL(fxb_incrmnt_prc,0)           
							INTO 	 :c_rqst_typ,
										 :c_plcd_stts,
										 :d_trail_amt,             
                     :d_trl_upd_cond_val,       
                     :d_incrmnt_prc             				
							FROM fxb_fo_xchng_book
							WHERE	fxb_xchng_cd 		= :ptr_st_orderbook->c_xchng_cd
							AND		fxb_ordr_rfrnc 	=	:ptr_st_orderbook->c_ordr_rfrnc
							AND		fxb_mdfctn_cntr = :ptr_st_orderbook->l_mdfctn_cntr;
	      if ( SQLCODE != 0 )
	  		{
						fn_errlog( c_ServiceName, "S31170", SQLMSG, c_errmsg  );
	      		EXEC SQL CLOSE :sys_cursor;
	      		EXEC SQL FREE :sys_cursor;
	      		tpfree ( ( char * ) ptr_fml_obuf );
						free((char *)ptr_st_orderbook);		
	      		Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
	      		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
	  		}
	      if (( c_rqst_typ == CANCELLED ) && ( c_plcd_stts != REJECT ))
	      {
						c_mod_can_flg = 'N';
             c_cancel_can_flg='N';        
	      }
	    }
	    if ( (ptr_st_orderbook->c_spl_flg == SYSTEM_SQUAREOFF    ) ||
					 (ptr_st_orderbook->c_spl_flg == L2_ORDER            ) ||
					 (ptr_st_orderbook->c_spl_flg == L3_ORDER            ) ||
           (ptr_st_orderbook->c_spl_flg == IMTM_SYS_SQUAREOFF ) ||                  
           (ptr_st_orderbook->c_spl_flg == LMTNEG_SYS_SQUAREOFF ) ||                  
	         (ptr_st_orderbook->c_ord_typ == IMMEDIATE_OR_CANCEL )  
	       )
	    {
						c_mod_can_flg = 'N';
            c_cancel_can_flg='N';         
	    }

      if( (ptr_st_orderbook->c_spl_flg == SYSTEM_SQUAREOFF    ) &&
          ( ptr_st_orderbook->c_ord_typ == 'V' ) &&
          ( ( ptr_st_orderbook->c_ordr_stts == REQUESTED ) ||
           ( ptr_st_orderbook->c_ordr_stts == ORDERED ) ||
           ( ptr_st_orderbook->c_ordr_stts == PARTIALLY_EXECUTED )
          )
        )
      {
         c_mod_can_flg = 'Y';
      }
      if( (ptr_st_orderbook->c_spl_flg == 'O') &&
          (( ptr_st_orderbook->c_ordr_stts == ORDERED ) ||
           ( ptr_st_orderbook->c_ordr_stts == PARTIALLY_EXECUTED )))
      {
         c_mod_can_flg = 'Y';
      }
 
		}

 
    if(ptr_st_orderbook->c_prd_typ == 'U' || ptr_st_orderbook->c_prd_typ == 'I')   /*** Ver 5.0 ***/
    {
      EXEC SQL
      SELECT FOD_LMT_MRKT_SL_FLG,
             FOD_LMT_RT,
             FOD_STP_LSS_TGR,
             FOD_ORDR_STTS,
             FOD_EXEC_QTY,
             FOD_FC_FLAG,
             FOD_CNCL_QTY,
             FOD_EXPRD_QTY,
             FOD_ORDR_TOT_QTY
      INTO   :c_tag_ord_typ,
             :l_tag_ord_lmt_rt,
             :l_tag_sltp_tgr,
             :c_tag_ord_stts,
             :l_tag_exe_qty,
             :c_tag_frsh_cvr_flg,
             :l_tag_can_qty,
             :l_tag_exprd_qty,
             :l_tag_ordr_tot_qty
      FROM   FOD_FO_ORDR_DTLS
      WHERE  FOD_ORDR_RFRNC=:c_tag_ordr_rfrnce
      AND    FOD_CLM_MTCH_ACCNT= :ptr_st_orderbook->c_cln_mtch_accnt
			AND    FOD_PRDCT_TYP IN ('U','I');  
   
     if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
     {
      fn_errlog( c_ServiceName, "S31175", SQLMSG, c_errmsg  );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
			free((char *)ptr_st_orderbook);		/** Ver 4.8 **/
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
     }


     l_tag_open_qty=l_tag_ordr_tot_qty-(l_tag_exe_qty+l_tag_can_qty+l_tag_exprd_qty);

     if ( DEBUG_MSG_LVL_0 ) 
     {
   	 	fn_userlog(c_ServiceName,"Tag Unexcuted qty: %ld",l_tag_open_qty);
     }
      
      c_mod_can_flg ='N';


      if( c_chk_new_site_flg != 'N' && c_opr_typ == ORDER_REF_IP )
      {

       if (DEBUG_MSG_LVL_0)
       {
        fn_userlog(c_ServiceName ," Fresh Cover Flag :%c:",c_fc_flg);
       }

       if( ptr_st_orderbook->c_ordr_stts == 'O' && c_tag_ord_stts == 'O' )
       {
        c_can_srv_call = 'P';
        c_mod_srv_call = 'P';
       }
       else if( ptr_st_orderbook->c_ordr_stts == 'O' && ( c_tag_ord_stts == 'J' || c_tag_ord_stts == 'C' ))
       {
        c_can_srv_call  = 'C';
       }

       if ( c_tag_ord_stts == 'O' && ( ptr_st_orderbook->c_ordr_stts == 'J' || ptr_st_orderbook->c_ordr_stts == 'C'))
       {
        c_can_srv_call  = 'C';
       }
       if(( c_fc_flg == 'F' && ptr_st_orderbook->c_ordr_stts == 'E' && (c_tag_ord_stts == 'O' || c_tag_ord_stts == 'P')) ||
          ( c_fc_flg == 'C' && (ptr_st_orderbook->c_ordr_stts == 'O' || ptr_st_orderbook->c_ordr_stts == 'P') &&
            c_tag_ord_stts == 'E'))
       {
        c_mod_srv_call  = 'M';
       }
       else if((c_fc_flg == 'F' && ptr_st_orderbook->c_ordr_stts == 'P' && c_tag_ord_stts == 'O') ||
               (c_fc_flg == 'C' && ptr_st_orderbook->c_ordr_stts == 'O' && c_tag_ord_stts == 'P'))
       {
        c_mod_srv_call  = 'P';
       }
      }

      if (DEBUG_MSG_LVL_0)
      {
       fn_userlog(c_ServiceName," Call modify service flag Is :%c:",c_mod_srv_call);
       fn_userlog(c_ServiceName," Call cancel service flag Is :%c:",c_can_srv_call);
      }


     if(( ptr_st_orderbook->c_ordr_stts == 'O' && c_tag_ord_stts == 'O')||
         (ptr_st_orderbook->c_ordr_stts == 'O' && c_tag_ord_stts == 'E' && c_fc_flg=='C' )||
         (ptr_st_orderbook->c_ordr_stts == 'P' && c_tag_ord_stts == 'E' && c_fc_flg=='C') ||
         (ptr_st_orderbook->c_ordr_stts == 'P' && c_tag_ord_stts == 'O' && c_fc_flg=='F') ||
         (ptr_st_orderbook->c_ordr_stts == 'O' && c_tag_ord_stts == 'P' && c_fc_flg=='C'))
      {
         c_mod_can_flg = 'Y';
       }


      if(( ptr_st_orderbook->c_ordr_stts == 'O' && c_tag_ord_stts == 'E' && c_fc_flg=='C' ) ||
         ( ptr_st_orderbook->c_ordr_stts == 'P' && c_tag_ord_stts == 'E' && c_fc_flg=='C' ))
      {
        c_sqoff_at_mkt = 'Y';
      }
      else
      {
        c_sqoff_at_mkt = 'N';
      }

      if ( DEBUG_MSG_LVL_0 ) /*** Ver 5.2 ***/
      {
      	fn_userlog(c_ServiceName,"Modfy flag :%c",c_mod_can_flg);
        fn_userlog(c_ServiceName,"Order Status %c",ptr_st_orderbook->c_ordr_stts);
        fn_userlog(c_ServiceName,"Tagged Order Status %c",c_tag_ord_stts);
        fn_userlog(c_ServiceName,"SquareOff at Market Flag :%c:", c_sqoff_at_mkt); /*** Ver 6.0 ***/
      }

       if(((  ptr_st_orderbook->c_ordr_stts == 'O' && c_tag_ord_stts == 'O')||
       (  ptr_st_orderbook->c_ordr_stts == 'O' && c_tag_ord_stts == 'J'  )||
      (   ptr_st_orderbook->c_ordr_stts == 'O' && c_tag_ord_stts == 'C' ) ||
        (   ptr_st_orderbook->c_ordr_stts == 'J' && c_tag_ord_stts == 'O' ) ||
          (   ptr_st_orderbook->c_ordr_stts == 'C' && c_tag_ord_stts == 'O')) &&
           (ptr_st_orderbook->c_ordr_stts !='C' ) && ( ptr_st_orderbook->c_ordr_stts !='J'))
     {
       c_cancel_can_flg='Y';
     }

     if ( DEBUG_MSG_LVL_2 ) 
     {
     	 fn_userlog(c_ServiceName,"Cancel Flag -----------------------------%c",c_cancel_can_flg);
     	 fn_userlog(c_ServiceName,"c_tag_ordr_rfrnce  :%s",c_tag_ordr_rfrnce);
     	 fn_userlog(c_ServiceName,"c_tag_ord_typ  :%c",c_tag_ord_typ);
     	 fn_userlog(c_ServiceName,"l_tag_ord_lmt_rt  :%ld",l_tag_ord_lmt_rt);
     	 fn_userlog(c_ServiceName,"l_tag_sltp_tgr  :%ld",l_tag_sltp_tgr);
     	 fn_userlog(c_ServiceName,"c_tag_ord_stts  :%c",c_tag_ord_stts);
     	 fn_userlog(c_ServiceName,"l_tag_exe_qty  :%ld",l_tag_exe_qty);
       fn_userlog(c_ServiceName,"c_tag_frsh_cvr_flg  :%c",c_tag_frsh_cvr_flg);
     }   

    }

   } 
 

   if(ptr_st_orderbook->c_prd_typ == 'U' || ptr_st_orderbook->c_prd_typ == 'I' || st_cntrct.c_prd_typ == ALL )
   {

    if(DEBUG_MSG_LVL_0)
    {
     fn_userlog(c_ServiceName,"Inside ALL condition for adding FMLs.");
    }

		if (ptr_st_orderbook->c_prd_typ != 'F') 
		{
    if ( Fadd32 ( ptr_fml_obuf,FFO_SPRD_ORD_REF ,( char *)c_tag_ordr_rfrnce,0) == -1)
    {
      fn_errlog( c_ServiceName, "S31180",FMLMSG,c_errmsg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
      free((char *)ptr_st_orderbook);
      strcpy(c_errmsg,"Problem in adding Tagged order order type");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }
		}
    if ( Fadd32 ( ptr_fml_obuf,FFO_CLSR_TYP  ,( char *)&c_tag_ord_typ, 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31185",FMLMSG,c_errmsg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
      free((char *)ptr_st_orderbook);
      strcpy(c_errmsg,"Problem in adding Tagged order order type");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }

    if ( Fadd32 ( ptr_fml_obuf,FFO_CURR_RT  ,( char *)&l_tag_ord_lmt_rt, 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31190",FMLMSG,c_errmsg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
      free((char *)ptr_st_orderbook);
      strcpy(c_errmsg,"Problem in adding Tagged order limit rate");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }

    if ( Fadd32 ( ptr_fml_obuf,FFO_CVR_BRKG  ,( char *)&l_tag_sltp_tgr, 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31195",FMLMSG,c_errmsg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
      free((char *)ptr_st_orderbook);
      strcpy(c_errmsg,"Problem in adding tag order sltp");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }

    if ( Fadd32 ( ptr_fml_obuf,FFO_EXER_INIT  ,( char *)&c_tag_ord_stts, 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31200",FMLMSG,c_errmsg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
      free((char *)ptr_st_orderbook);
      strcpy(c_errmsg,"Problem in adding tag order ord status");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }

    if ( Fadd32 ( ptr_fml_obuf,FFO_IEXCTD_QTY  ,( char *)&l_tag_exe_qty, 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31205",FMLMSG,c_errmsg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
      free((char *)ptr_st_orderbook);
      strcpy(c_errmsg,"Problem in adding tag order exexuted quantity");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }

    if ( Fadd32 ( ptr_fml_obuf,FFO_IS_FLG  ,( char *)&c_fc_flg, 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31210",FMLMSG,c_errmsg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
      free((char *)ptr_st_orderbook);
      strcpy(c_errmsg,"Problem in adding tag order fresh cover flag");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }

    if ( Fadd32 ( ptr_fml_obuf,FFO_SALE_MRGN ,( char *)&l_tag_open_qty,0) ==-1)
    {
      fn_errlog( c_ServiceName, "S31215",FMLMSG,c_errmsg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
      free((char *)ptr_st_orderbook);
      strcpy(c_errmsg,"Problem in adding tag order fresh cover flag");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }
   }


    if(strcmp(ptr_st_orderbook->c_channel,"SYS")==0 && (ptr_st_orderbook->c_prd_typ == 'U' || ptr_st_orderbook->c_prd_typ == 'I' ))
    { 
			  c_cancel_can_flg='N';
 				c_mod_can_flg='N';				
    }
   
    if ( Fadd32 ( ptr_fml_obuf,FFO_MTM_FLG  ,( char *)&c_cancel_can_flg, 0 ) == -1 )
     {
      fn_errlog( c_ServiceName, "S31220",FMLMSG,c_errmsg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
			free((char *)ptr_st_orderbook);		
      strcpy(c_errmsg,"Problem in adding cancel link flag");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
     }


    if ( Fadd32 ( ptr_fml_obuf, FFO_BAL_AMT,( char *)&d_trail_amt, 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31225",FMLMSG,c_errmsg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
      free((char *)ptr_st_orderbook);
      strcpy(c_errmsg,"Problem in adding Trail Amount");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }

    if ( Fadd32 ( ptr_fml_obuf, FFO_BASE_ORD_VAL,( char *)&d_trl_upd_cond_val, 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31230",FMLMSG,c_errmsg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
      free((char *)ptr_st_orderbook);
      strcpy(c_errmsg,"Problem in adding Trail Update Condition");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }

    if ( Fadd32 ( ptr_fml_obuf, FFO_EFF_CLS_PRC,( char *)&d_incrmnt_prc, 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31235",FMLMSG,c_errmsg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
      free((char *)ptr_st_orderbook);
      strcpy(c_errmsg,"Problem in adding Incremental Price");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }

    if ( Fadd32 ( ptr_fml_obuf, FFO_BNK_TRN_TYP,( char *)&c_sltp_trail_flag, 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31240",FMLMSG,c_errmsg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
      free((char *)ptr_st_orderbook);
      strcpy(c_errmsg,"Problem in adding Trail Flag");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }


    if ( Fadd32 ( ptr_fml_obuf, FFO_EBA_STTS,(char *)&c_sqoff_at_mkt,0) == -1)   
    {
      fn_errlog( c_ServiceName, "S31245", FMLMSG, c_errmsg  );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }

    if ( Fadd32 ( ptr_fml_obuf, FML_PLG_FLG,(char *)&c_mod_srv_call,0) == -1)   
    {
      fn_errlog( c_ServiceName, "S31250", FMLMSG, c_errmsg  );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }

    if ( Fadd32 ( ptr_fml_obuf, FFO_PLG_REV_TYP,(char *)&c_can_srv_call,0) == -1)  
    {
      fn_errlog( c_ServiceName, "S31255", FMLMSG, c_errmsg  );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }
    
  
    if ( Fadd32 ( ptr_fml_obuf, FFO_MOD_CAN_FLG, 
																(char *)&c_mod_can_flg, 0 ) == -1 )
  	{
			fn_errlog( c_ServiceName, "S31260", FMLMSG, c_errmsg  );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
			free((char *)ptr_st_orderbook);		
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
  	}

    strcpy( c_dbc_channel, "");
    if( ptr_st_orderbook->c_bp_id[0] == BPID && ptr_st_orderbook->c_user_id[0] == BPID  )			/***	Ver	2.3	***/
    {

      i_catagory_types =0 ;

      EXEC SQL
        SELECT  nvl(ID_CATEGORY_TYPES,0)
        INTO  :i_catagory_types
        FROM BP_BRKR_MSTR , BPA_INWARD_DETAILS
        WHERE BBM_GRP_ID  = ID_SUB_BROKER_CODE
        AND   BBM_BP_ID   = :ptr_st_orderbook->c_bp_id;

      if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
      	fn_errlog( c_ServiceName, "S31265", SQLMSG, c_errmsg  );
      	EXEC SQL CLOSE :sys_cursor;
      	EXEC SQL FREE :sys_cursor;
      	tpfree ( ( char * ) ptr_fml_obuf );
				free((char *)ptr_st_orderbook);		
      	Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
      }

      if(i_catagory_types != 3)   /** 3 is for ERS */
      {
				strcpy( c_dbc_channel, strcat( strcpy( c_dbc_channel, ptr_st_orderbook->c_channel ), " DBC" ));
      }
      else
      {
				strcpy( c_dbc_channel, strcat( strcpy( c_dbc_channel, ptr_st_orderbook->c_channel ), " ERS" ));
      }


      if ( Fadd32 ( ptr_fml_obuf, FFO_SERIES, (char *)c_dbc_channel, 0 ) == -1)
      {
        fn_errlog( c_ServiceName, "S31270", FMLMSG, c_errmsg  );
			  EXEC SQL CLOSE :sys_cursor;
			  EXEC SQL FREE :sys_cursor;
			  tpfree ( ( char * ) ptr_fml_obuf );
				free((char *)ptr_st_orderbook);		
        strcpy(c_errmsg,"Problem in adding DBC channel");
        Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
      }
    }
    else
    {
      if ( Fadd32 ( ptr_fml_obuf, FFO_SERIES, (char *) ptr_st_orderbook->c_channel, 0 ) == -1)
      {
        fn_errlog( c_ServiceName, "S31275", FMLMSG, c_errmsg  );
			  EXEC SQL CLOSE :sys_cursor;
			  EXEC SQL FREE :sys_cursor;
			  tpfree ( ( char * ) ptr_fml_obuf );
				free((char *)ptr_st_orderbook);		
        strcpy(c_errmsg,"Problem in adding DBC channel");
        Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
      }
    }

		if( ptr_st_orderbook->c_ordr_stts != REJECT )
		{
      l_open_qty = ptr_st_orderbook->l_ord_tot_qty - ( ptr_st_orderbook->l_exctd_qty   +
                                                       ptr_st_orderbook->l_can_qty     +
                                                       ptr_st_orderbook->l_exprd_qty     );
		}

		if( DEBUG_MSG_LVL_0 ) 
    	{
      fn_userlog(c_ServiceName,"c_bp_id[0] is :%c:", ptr_st_orderbook->c_bp_id[0]);
    	fn_userlog(c_ServiceName,"c_channel is :%s:", ptr_st_orderbook->c_channel);
    	fn_userlog(c_ServiceName,"c_dbc_channel is :%s:", c_dbc_channel);
    	fn_userlog(c_ServiceName,"l_open_qty is :%ld:", l_open_qty);
		}


    if ( Fadd32 ( ptr_fml_obuf, FFO_C_OPNPSTN_QTY,( char *)&l_open_qty, 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31280",FMLMSG,c_errmsg);
			EXEC SQL CLOSE :sys_cursor;
			EXEC SQL FREE :sys_cursor;
			tpfree ( ( char * ) ptr_fml_obuf );
			free((char *)ptr_st_orderbook);		
      strcpy(c_errmsg,"Problem in adding Open Quantity");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }

	
		
		if ( Fadd32 ( ptr_fml_obuf,FFO_ORD_AMT_BLKD ,( char *)&d_mrgn_blk, 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31285",FMLMSG,c_errmsg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
			free((char *)ptr_st_orderbook);		
      strcpy(c_errmsg,"Problem in adding Margin+loss amount blocked");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }


		if ( Fadd32 ( ptr_fml_obuf,FFO_SOURCE_FLG ,( char *)&c_spn_flg, 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31290",FMLMSG,c_errmsg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
			free((char *)ptr_st_orderbook);		/** Ver 4.8 **/
      strcpy(c_errmsg,"Problem in adding span flag");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }

	  l_exctd_rt = 0;
	
		if( d_trd_val != 0 || ptr_st_orderbook->l_exctd_qty != 0)
		{	
			l_exctd_rt  = (long)(d_trd_val/ptr_st_orderbook->l_exctd_qty);
		}

    if ( DEBUG_MSG_LVL_0 ) 
    {
			fn_userlog(c_ServiceName,"Brokerage :%ld:",l_brkg_val);
			fn_userlog(c_ServiceName,"Trade Value :%lf:",d_trd_val);
			fn_userlog(c_ServiceName,"Executed Rate :%ld:",l_exctd_rt);
	  }

		if ( Fadd32 ( ptr_fml_obuf,FFO_BRKRG_VL ,( char *)&l_brkg_val, 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31295",FMLMSG,c_errmsg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
			free((char *)ptr_st_orderbook);	
      strcpy(c_errmsg,"Problem in adding span flag");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }

		if ( Fadd32 ( ptr_fml_obuf,FFO_OPNPSTN_VAL,( char *)&d_trd_val, 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31300",FMLMSG,c_errmsg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
			free((char *)ptr_st_orderbook);	
      strcpy(c_errmsg,"Problem in adding span flag");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }
		
	
		if ( Fadd32 ( ptr_fml_obuf,FFO_EXCTD_RT,( char *)&l_exctd_rt, 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31305",FMLMSG,c_errmsg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
			free((char *)ptr_st_orderbook);		
      strcpy(c_errmsg,"Problem in adding span flag");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }

		if ( Fadd32 ( ptr_fml_obuf,FFO_AGREE_NO,( char *)c_cntrct_num, 0 ) == -1 )
    {
      fn_errlog( c_ServiceName, "S31310",FMLMSG,c_errmsg);
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      tpfree ( ( char * ) ptr_fml_obuf );
			free((char *)ptr_st_orderbook);	
      strcpy(c_errmsg,"Problem in adding span flag");
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }

			MEMSET(c_stop_vtc_flg);		
			c_stop_vtc_flg = 'N';		


		 if (ptr_st_orderbook->c_ord_typ == 'V' && ptr_st_orderbook->c_ordr_stts == REJECT && strcmp(ptr_st_orderbook->c_channel,"SYS")==0)
		{

			EXEC SQL
			SELECT COUNT(1) 
			 INTO  :li_rec_main_exists
			 FROM  FXB_FO_XCHNG_BOOK
			 WHERE FXB_ORDR_RFRNC = :ptr_st_orderbook->c_ordr_rfrnc;

      fn_userlog(c_ServiceName,"li_rec_main_exists :%ld:",li_rec_main_exists);

			if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
			{
			 fn_errlog( c_ServiceName, "S31315", SQLMSG, c_errmsg  );
			 EXEC SQL CLOSE :sys_cursor;
			 EXEC SQL FREE :sys_cursor;
			 tpfree ( ( char * ) ptr_fml_obuf );
			 Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
			 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
			}

			if (li_rec_main_exists == 0)
			{
				c_stop_vtc_flg = 'N';
			}
			else
			{
        rec_price_rjct = 0;

				EXEC SQL
					SELECT 1
					INTO :rec_price_rjct
					FROM  FXB_FO_XCHNG_BOOK
					WHERE FXB_ORDR_RFRNC = :ptr_st_orderbook->c_ordr_rfrnc
					AND   (FXB_XCHNG_RMRKS like '%Your order is outside the price range%'
					OR     FXB_XCHNG_RMRKS like '%Your order is outside the specified price range%'
					OR     FXB_XCHNG_RMRKS like '%Price entered by you  is beyond the price range permitted by exchange%'
					OR     FXB_XCHNG_RMRKS like '%The order price is out of the days price range%')
					AND   ROWNUM < 2;
  
        fn_userlog(c_ServiceName,"rec_price_rjct :%d",rec_price_rjct);
       
				if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
				{
					fn_errlog( c_ServiceName, "S31320", SQLMSG, c_errmsg  );
					EXEC SQL CLOSE :sys_cursor;
					EXEC SQL FREE :sys_cursor;
					tpfree ( ( char * ) ptr_fml_obuf );
					Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
				}
				if (SQLCODE == NO_DATA_FOUND)
				{
					c_stop_vtc_flg = 'N';
				}

				if (c_fc_flg != 'Y' && rec_price_rjct == 1)
				{
					c_stop_vtc_flg = 'Y';
				}
				else
				{
					c_stop_vtc_flg = 'N';
				}
			}

		}

    fn_userlog(c_ServiceName,"c_stop_vtc_flg :%c:",c_stop_vtc_flg);

		if ( Fadd32 ( ptr_fml_obuf,FFO_DR_CR_FLG,( char *)&c_stop_vtc_flg, 0 ) == -1 )
		{
			fn_errlog( c_ServiceName, "S31325",FMLMSG,c_errmsg);
			EXEC SQL CLOSE :sys_cursor;
			EXEC SQL FREE :sys_cursor;
			tpfree ( ( char * ) ptr_fml_obuf );
			free((char *)ptr_st_orderbook);	
			strcpy(c_errmsg,"Problem in adding span flag");
			Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
		}

	}	

	i_counter --;


  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Order Book Sequence number is :%s:",c_ordbk_seq.arr);
  }

  if ( Fadd32(ptr_fml_obuf,FFO_REF_NO,(char *)c_ordbk_seq.arr,0) == -1 )
  {
		fn_errlog( c_ServiceName, "S31330", FMLMSG, c_errmsg  );
		free((char *)ptr_st_orderbook);		
		tpfree ( ( char * ) ptr_fml_obuf );	
 		Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
 		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
  }


	EXEC SQL CLOSE :sys_cursor;
  EXEC SQL FREE :sys_cursor;
 
 }
 else  
 {
    ptr_fml_obuf = NULL;  

    SETLEN( c_ordr_ref );
   
   if ( DEBUG_MSG_LVL_0 ) 
   {
 	   fn_userlog(c_ServiceName, "VTC Order Log" );
  	 fn_userlog(c_ServiceName, "c_ordr_ref = :%s:", c_ordr_ref.arr);
   }
 
   i_loop_cnt=1;

   EXEC SQL ALLOCATE :sys_cursor;

   EXEC SQL  EXECUTE
          BEGIN
            OPEN  :sys_cursor FOR
     SELECT
            FOD_CLM_MTCH_ACCNT,
            FOD_ORDR_RFRNC,
            FOD_PIPE_ID,
            FOD_XCHNG_CD,
            FOD_PRDCT_TYP,
            FOD_INDSTK,
            FOD_UNDRLYNG,
            to_date(FOD_EXPRY_DT,'DD-Mon-YYYY'),
            FOD_EXER_TYP,
            FOD_OPT_TYP,
            FOD_STRK_PRC,
            FOD_ORDR_FLW,
            FOD_LMT_MRKT_SL_FLG,
            FOD_DSCLSD_QTY,
            FOD_ORDR_TOT_QTY,
            FOD_LMT_RT,
            FOD_STP_LSS_TGR,
            FOD_ORDR_TYPE,
            to_date(FOD_ORDR_VALID_DT,'DD-Mon-YYYY'),
            FOD_TRD_DT,
            FOD_ORDR_STTS,
            FOD_EXEC_QTY,
            FOD_CNCL_QTY,
            FOD_EXPRD_QTY,
            nvl(FOD_SPRD_ORDR_REF,' '),
            FOD_CHANNEL ,
            NVL( fod_ack_nmbr, ' ' )
       FROM FOD_FO_ORDR_DTLS
      WHERE FOD_CLM_MTCH_ACCNT =:c_mtch_accnt_no
        AND FOD_SLTP_ORDR_RFRNC = ( SELECT FOD_SLTP_ORDR_RFRNC
                                      FROM FOD_FO_ORDR_DTLS
                                     WHERE FOD_ORDR_RFRNC =:c_ordr_ref
                                       AND FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
                                  )
     UNION ALL
          SELECT
            FOD_CLM_MTCH_ACCNT,
            FOD_ORDR_RFRNC,
            FOD_PIPE_ID,
            FOD_XCHNG_CD,
            FOD_PRDCT_TYP,
            FOD_INDSTK,
            FOD_UNDRLYNG,
            to_date(FOD_EXPRY_DT,'DD-Mon-YYYY'),
            FOD_EXER_TYP,
            FOD_OPT_TYP,
            FOD_STRK_PRC,
            FOD_ORDR_FLW,
            FOD_LMT_MRKT_SL_FLG,
            FOD_DSCLSD_QTY,
            FOD_ORDR_TOT_QTY,
            FOD_LMT_RT,
            FOD_STP_LSS_TGR,
            FOD_ORDR_TYPE,
            to_date(FOD_ORDR_VALID_DT,'DD-Mon-YYYY'),
            FOD_TRD_DT,
            FOD_ORDR_STTS,
            FOD_EXEC_QTY,
            FOD_CNCL_QTY,
            FOD_EXPRD_QTY,
            nvl(FOD_SPRD_ORDR_REF,' '),
            FOD_CHANNEL,
            NVL( fod_ack_nmbr, ' ' )
       FROM FOD_FO_ORDR_DTLS_HSTRY
      WHERE FOD_CLM_MTCH_ACCNT =:c_mtch_accnt_no
        AND FOD_SLTP_ORDR_RFRNC = ( SELECT FOD_SLTP_ORDR_RFRNC
                                      FROM FOD_FO_ORDR_DTLS_HSTRY
                                     WHERE FOD_ORDR_RFRNC =:c_ordr_ref
                                       AND FOD_CLM_MTCH_ACCNT=:c_mtch_accnt_no
                                  )
        ORDER BY 1,2 DESC;
          END;
        END-EXEC;

     if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31335", SQLMSG, c_errmsg  );
      EXEC SQL FREE :sys_cursor;
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }
   
    ptr_st_orderbook = malloc(sizeof(struct vw_orderbook));

    if ( ptr_st_orderbook == NULL )
    {
      fn_errlog( c_ServiceName, "S31340", TPMSG, c_errmsg  );
      EXEC SQL CLOSE :sys_cursor;
      EXEC SQL FREE :sys_cursor;
      /*** tpfree ( ( char * )ptr_fml_obuf); ** Ver 5.3 **/
      Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
    }

    l_bufferlength =  sizeof( struct vw_orderbook )
                   +  1024;

    memset ( ptr_st_orderbook, 0, sizeof ( struct vw_orderbook ) );

    strcpy ( ptr_st_orderbook->c_user_id, st_usr_prfl.c_user_id );
    ptr_st_orderbook->c_oprn_typ = c_opr_typ;
    strcpy ( ptr_st_orderbook->c_cln_mtch_accnt, c_mtch_accnt_no );

    i_counter = 1 ;

    for ( ; ; )
    {
		fn_userlog(c_ServiceName,"Inside for loop ");

     EXEC SQL FETCH :sys_cursor
              INTO :ptr_st_orderbook->c_cln_mtch_accnt,
                   :ptr_st_orderbook->c_ordr_rfrnc,
                   :ptr_st_orderbook->c_pipe_id,
                   :ptr_st_orderbook->c_xchng_cd,
                   :ptr_st_orderbook->c_prd_typ,
                   :ptr_st_orderbook->c_ctgry_indstk,
                   :ptr_st_orderbook->c_undrlyng,
                   :c_exp_date,
                   :ptr_st_orderbook->c_exrc_typ,
                   :ptr_st_orderbook->c_opt_typ,
                   :ptr_st_orderbook->l_strike_prc,
                   :ptr_st_orderbook->c_ordr_flw,
                   :ptr_st_orderbook->c_slm_flg,
                   :ptr_st_orderbook->l_dsclsd_qty,
                   :ptr_st_orderbook->l_ord_tot_qty,
                   :ptr_st_orderbook->l_ord_lmt_rt,
                   :ptr_st_orderbook->l_stp_lss_tgr,
                   :ptr_st_orderbook->c_ord_typ,
                   :c_valid_date,
                   :c_trd_date,
                   :ptr_st_orderbook->c_ordr_stts,
                   :ptr_st_orderbook->l_exctd_qty,
                   :ptr_st_orderbook->l_can_qty,
                   :ptr_st_orderbook->l_exprd_qty,
                   :ptr_st_orderbook->c_sprd_ord_rfrnc,
                   :ptr_st_orderbook->c_channel,
                   :ptr_st_orderbook->c_xchng_ack;

    if ( SQLCODE != 0 )
    {
      if ( SQLCODE == NO_DATA_FOUND )
      {
        break;
      }
      else
      {
        fn_errlog( c_ServiceName, "S31345", SQLMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        tpfree ( ( char * ) ptr_fml_obuf );
        free((char*)ptr_st_orderbook);  /** Ver 5.3 **/
        Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
      }
    }
    
    if ( DEBUG_MSG_LVL_1 ) 
    {
    	fn_userlog(c_ServiceName,"SPAN FLAG :%c:",c_spn_flg);                                            
    	fn_userlog(c_ServiceName,"ptr_st_orderbook->c_ordr_rfrnc :%s:",ptr_st_orderbook->c_ordr_rfrnc);   
    }
   
    strcpy ( ptr_st_orderbook->c_expry_dt, ( char * ) c_exp_date.arr );
    strcpy ( ptr_st_orderbook->c_valid_dt, ( char * ) c_valid_date.arr );
    strcpy ( ptr_st_orderbook->c_trd_dt,   ( char * ) c_trd_date.arr );
    
    c_vtc_ord_stts='N';
    i_vtc_cnt=0;

    if( i_loop_cnt == 1 && ( ptr_st_orderbook->c_ordr_stts=='X' || ptr_st_orderbook->c_ordr_stts=='B') )
    {
      i_loop_cnt =0;
      i_vtc_cnt =0;

      EXEC SQL
        SELECT count(1)
          INTO :i_vtc_cnt
          FROM exg_xchng_mstr
         WHERE to_date(exg_nxt_trd_dt,'dd-Mon-yyyy') > to_date(:c_valid_date,'dd-Mon-yyyy')
          AND  EXG_XCHNG_CD =:ptr_st_orderbook->c_xchng_cd;
      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog( c_ServiceName, "S31350", SQLMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        tpfree ( ( char * ) ptr_fml_obuf );
        free((char*)ptr_st_orderbook);  
        Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
      }

      if(  i_vtc_cnt > 0 )
      {
        if ( DEBUG_MSG_LVL_0 ) 
        {
        	fn_userlog(c_ServiceName," VTC Closed Order :%s:",ptr_st_orderbook->c_ordr_rfrnc);
        }

         c_vtc_ord_stts='C';
      }
    }

    if ( ptr_st_orderbook->c_ordr_stts=='J' )
    {
      c_vtc_ord_stts='C';
    }


    if( ptr_st_orderbook->c_ordr_stts != REJECT )
    {
      l_open_qty = ptr_st_orderbook->l_ord_tot_qty -
                 ( ptr_st_orderbook->l_exctd_qty + ptr_st_orderbook->l_can_qty + ptr_st_orderbook->l_exprd_qty );
    }

    if ( DEBUG_MSG_LVL_0 )
    fn_userlog(c_ServiceName,"Open Quantity Is :%ld:",l_open_qty);


    i_returncode = fn_pack_vartofml(c_ServiceName,
                                    c_errmsg,
                                    &ptr_fml_obuf,
                                    33,                   
                                    FFO_OPERATION_TYP, (char*)&ptr_st_orderbook->c_oprn_typ,
                                    FFO_EBA_MTCH_ACT_NO, (char*)ptr_st_orderbook->c_cln_mtch_accnt,
                                    FFO_ORDR_RFRNC, (char*)ptr_st_orderbook->c_ordr_rfrnc,
                                    FFO_PIPE_ID, (char*)ptr_st_orderbook->c_pipe_id,
                                    FFO_XCHNG_CD, (char*)ptr_st_orderbook->c_xchng_cd,
                                    FFO_PRDCT_TYP, (char*)&ptr_st_orderbook->c_prd_typ,
                                    FFO_CTGRY_INDSTK, (char*)&ptr_st_orderbook->c_ctgry_indstk,
                                    FFO_UNDRLYNG, (char*)ptr_st_orderbook->c_undrlyng,
                                    FFO_EXER_TYP, (char*)&ptr_st_orderbook->c_exrc_typ,
                                    FFO_OPT_TYP, (char*)&ptr_st_orderbook->c_opt_typ,
                                    FFO_STRK_PRC, (char*)&ptr_st_orderbook->l_strike_prc,
                                    FFO_ORDR_FLW, (char*)&ptr_st_orderbook->c_ordr_flw,
                                    FFO_LMT_MKT_SL_FLG, (char*)&ptr_st_orderbook->c_slm_flg,
                                    FFO_DSCLSD_QTY, (char*)&ptr_st_orderbook->l_dsclsd_qty,
                                    FFO_ORD_TOT_QTY, (char*)&ptr_st_orderbook->l_ord_tot_qty,
                                    FFO_LMT_RT, (char*)&ptr_st_orderbook->l_ord_lmt_rt,
                                    FFO_STP_LSS_TGR, (char*)&ptr_st_orderbook->l_stp_lss_tgr,
                                    FFO_ORD_TYP, (char*)&ptr_st_orderbook->c_ord_typ,
                                    FFO_ORDR_STTS, (char*)&ptr_st_orderbook->c_ordr_stts,
                                    FFO_EXEC_QTY, (char*)&ptr_st_orderbook->l_exctd_qty,
                                    FFO_CANCL_QTY, (char*)&ptr_st_orderbook->l_can_qty,
                                    FFO_EXPRD_QTY, (char*)&ptr_st_orderbook->l_exprd_qty,
                                    FFO_SPRD_ORD_REF, (char*)ptr_st_orderbook->c_sprd_ord_rfrnc,
                                    FFO_CHANNEL, (char*)ptr_st_orderbook->c_channel,
                                    FFO_EXPRY_DT, (char*)ptr_st_orderbook->c_expry_dt,
                                    FFO_ORD_VALID_DT, (char*)ptr_st_orderbook->c_valid_dt,
                                    FFO_TRD_DT, (char*)ptr_st_orderbook->c_trd_dt,
                                    FFO_EXEC_QTY_DAY, (char*)&ptr_st_orderbook->l_exctd_qty_day,
                                    FFO_REQ_TYP, (char*)&ptr_st_orderbook->c_req_typ,
                                    FFO_ACK_NMBR, (char*)ptr_st_orderbook->c_xchng_ack,
                                    FFO_SOURCE_FLG,(char*)&c_vtc_ord_stts,
																		FFO_NXT_TRD_DT, (char*)c_nxt_trade_dt.arr,            
                                    FFO_C_OPNPSTN_QTY, (char*)&l_open_qty                
                                   );

       if ( i_returncode == -100 )
     {
        fn_errlog( c_ServiceName, "S31355", FMLMSG, c_errmsg  );
        EXEC SQL CLOSE :sys_cursor;
        EXEC SQL FREE :sys_cursor;
        tpfree ( ( char * ) ptr_fml_obuf );
        free((char *)ptr_st_orderbook);
        Fadd32( ptr_fml_ibuf, FFO_ERR_MSG, c_errmsg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_ibuf, 0, 0 );
     
    }
   }

   EXEC SQL CLOSE :sys_cursor;
   EXEC SQL FREE :sys_cursor;
  
   

 } 

 

	if( DEBUG_MSG_LVL_0 ) 
	{          
		fn_userlog(c_ServiceName, "END OF SFO_1CLK_ORDBK for :%s:",ptr_st_orderbook->c_cln_mtch_accnt);
	}

	free((char *)ptr_st_orderbook);	
	tpreturn( TPSUCCESS, 0, (char *)ptr_fml_obuf, 0 , 0 );
}

