/******************************************************************************/
/*	Program	    			:	SFO_OPT_EODADJ                                        */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                      FFO_TRD_DT                                            */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_DR_CR_FLG                                         */
/*                      FFO_AMOUNT                                            */
/*                                                                            */
/*  Output            : Success / Failure                                     */
/*                                                                            */
/*  Description       : To process the option records in End of Day (EOD)     */
/*                      adjustment of Uncrystalized margins called by the     */
/*                      batch program                                         */
/*                                                                            */
/*  Log               :                                                       */
/*                                                                            */
/******************************************************************************/
/*  23-May-2002     Ver 1.0      Vinod Banjan      Release 1.0                */
/*  01-Feb-2008			Ver 1.1      Sandeep|Shailesh  Shift Margin Optimization  */
/*	25-Jul-2008     Ver 1.2 		 Sandeep					 IBM Changes								*/
/*	08-Dec-2014     Ver 1.3 		 Sachin Birje      View to FML Changes        */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */
#include <fml_def.h>
/** #include <fo_view_def.h> ** Ver 1.3 **/
#include <fo_view_def.h>    /** Ver 1.3 **/
#include <fml_rout.h>         /** Ver 1.3 */
#include <fn_battmpt.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fo.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fn_read_debug_lvl.h>			/*** Ver 1.2 ***/

void SFO_OPT_EODADJ( TPSVCINFO *rqst )
{
  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Sbuf;   /** Ver 1.3 **/
  FBFR32 *ptr_fml_Rbuf;   /** Ver 1.3 **/

  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
  int i_returncode;
  int i_ip_len;
  int i_op_len;
  int i_trnsctn;

  int i;              /* Ver 1.3 */
  int i_err[10];      /* Ver 1.3 */
  int i_ferr[10];     /* Ver 1.3 */
  long l_recvbuf=0;   /* Ver 1.3 */

  char c_tag [ 256 ];
  char c_msg [ 256 ];

  EXEC SQL BEGIN DECLARE SECTION;
    varchar c_nxt_trd_dt [ LEN_DATE ];
 		struct vw_upd_limits st_upd_limits;
  EXEC SQL END DECLARE SECTION;

 	struct vw_upd_limits st_upd_limits_del;
 	struct vw_upd_limits st_upd_limits_add;

  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );

	INITDBGLVL(c_ServiceName);      /*** Ver 1.2 ***/
  /*** Commented in Ver 1.3 *********************
  i_returncode = Fvftos32( ptr_fml_Ibuf,
                         ( char * )&st_upd_limits,
                         "vw_upd_limits" );

  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  ******** Ver 1.3 Ends here *******************/

  /******* Ver 1.3 Starts here *****************/
  i_returncode = fn_unpack_fmltovar_dflt ( c_ServiceName,
                                      c_err_msg,
                                      ptr_fml_Ibuf,
                                      10,
                                      FFO_XCHNG_CD,(char *)st_upd_limits.c_xchng_cd, "NULL",
                                      FFO_EBA_MTCH_ACT_NO,(char *)st_upd_limits.c_cln_mtch_accnt, "NULL",
                                      FFO_TRD_DT,(char *)st_upd_limits.c_trd_dt, "NULL",
                                      FFO_NARRATION_ID,(char *)st_upd_limits.c_narration_id, "**",
                                      FFO_REMARKS,(char *)st_upd_limits.c_remarks, "-",
                                      FFO_DR_CR_FLG,(char *)&st_upd_limits.c_dr_cr_flg, "-",
                                      FFO_AMOUNT,(char *)&st_upd_limits.d_amount, "0",
                                      FFO_BAL_AMT,(char *)&st_upd_limits.d_bal_amt, "0",
                                      FFO_DWL_FLG,(char *)&st_upd_limits.c_dr_without_lmt_flg, "-",
                                      FFO_ROUT_CRT,(char *)st_upd_limits.c_rout_crt, "***"
                                      );
  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /******* Ver 1.3 Ends here   *****************/
  /*** Added for Order Routing ***/
  fn_init_ddr_val ( st_upd_limits.c_rout_crt );

  i_returncode = Fget32( ptr_fml_Ibuf, FFO_BAT_TAG, 0,
                                   (char *)c_tag, 0 );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if(DEBUG_MSG_LVL_3)      /*** Ver 1.2 ***/
  {
    fn_userlog( c_ServiceName, "Exchange code :%s:",
                                  st_upd_limits.c_xchng_cd );
    fn_userlog( c_ServiceName, "Trade date    :%s:",
                                  st_upd_limits.c_trd_dt );
    fn_userlog( c_ServiceName, "Match Account :%s:",
                                  st_upd_limits.c_cln_mtch_accnt );
    fn_userlog( c_ServiceName, "Debit Credit Amount :%lf:",
                                  st_upd_limits.d_amount );
  }

  sprintf ( c_msg, "Processing OPT - match a/c - [%s], Trade date - [%s]",
        st_upd_limits.c_cln_mtch_accnt,
        st_upd_limits.c_trd_dt );
  /*fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );*/

	if ( st_upd_limits.d_amount < 0 )
	{
		strcpy( c_err_msg, " Invalid amount passed");
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy ( c_msg, "Amount cannot be less than 0" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  EXEC SQL
    SELECT  to_char ( exg_nxt_trd_dt, 'dd-Mon-yyyy')
    INTO    :c_nxt_trd_dt
    FROM    exg_xchng_mstr
    WHERE   exg_xchng_cd = :st_upd_limits.c_xchng_cd
		AND			exg_mkt_typ  = 'D';

  if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg );
   	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	SETNULL ( c_nxt_trd_dt );

	if ( st_upd_limits.d_amount > 0 )
	{
		memcpy ( &st_upd_limits_del,
	           &st_upd_limits,
	           sizeof( st_upd_limits_del ) );
	
		st_upd_limits_del.c_dr_cr_flg = CREDIT;
		strcpy(st_upd_limits_del.c_narration_id,
														CLOSING_OF_UNCRYSTALIZED_BAL);
		st_upd_limits_del.c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;
		fn_cpy_ddr(st_upd_limits_del.c_rout_crt);
    /***** Commented in Ver 1.3 **************	
	  i_ip_len = sizeof ( struct vw_upd_limits );
	  i_op_len = sizeof ( struct vw_upd_limits );
	
	  i_returncode = fn_call_svc( c_ServiceName,
	                             	c_err_msg,
	                             	&st_upd_limits_del,
	                             	&st_upd_limits_del,
	                             	"vw_upd_limits",
	                             	"vw_upd_limits",
	                             	i_ip_len,
	                             	i_op_len,
	                             	0,
	                             	"SFO_UPD_LIMITS" );
	
	  if ( i_returncode != 0 )
	  {
	   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	   	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	    strcpy ( c_msg, "System error. Contact system support" );
	    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
	   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	  }
	  *************** Ver 1.3 Ends here **********/

    /***** Ver 1.3 Starts Here *********/
    ptr_fml_Sbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );
    if ( ptr_fml_Sbuf == NULL )
    {
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_errlog( c_ServiceName, "S31025", TPMSG, c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      strcpy(c_msg,"System error, Contact system Support");
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    ptr_fml_Rbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );
    if ( ptr_fml_Rbuf == NULL )
    {
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_errlog( c_ServiceName, "S31030", TPMSG, c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      strcpy(c_msg,"System error, Contact system Support");
      tpfree ((char *)ptr_fml_Sbuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    i_err [0] = Fadd32(ptr_fml_Sbuf,FFO_XCHNG_CD, (char *)st_upd_limits_del.c_xchng_cd,0);
    i_ferr[0] = Ferror32;
    i_err [1] = Fadd32(ptr_fml_Sbuf,FFO_EBA_MTCH_ACT_NO, (char *)st_upd_limits_del.c_cln_mtch_accnt,0);
    i_ferr[1] = Ferror32;
    i_err [2] = Fadd32(ptr_fml_Sbuf,FFO_TRD_DT, (char *)st_upd_limits_del.c_trd_dt,0);
    i_ferr[2] = Ferror32;
    i_err [3] = Fadd32(ptr_fml_Sbuf,FFO_NARRATION_ID, (char *)st_upd_limits_del.c_narration_id,0);
    i_ferr[3] = Ferror32;
    i_err [4] = Fadd32(ptr_fml_Sbuf,FFO_REMARKS, (char *)st_upd_limits_del.c_remarks,0);
    i_ferr[4] = Ferror32;
    i_err [5] = Fadd32(ptr_fml_Sbuf,FFO_DR_CR_FLG, (char *)&st_upd_limits_del.c_dr_cr_flg,0);
    i_ferr[5] = Ferror32;
    i_err [6] = Fadd32(ptr_fml_Sbuf,FFO_AMOUNT, (char *)&st_upd_limits_del.d_amount,0);
    i_ferr[6] = Ferror32;
    i_err [7] = Fadd32(ptr_fml_Sbuf,FFO_BAL_AMT, (char *)&st_upd_limits_del.d_bal_amt,0);
    i_ferr[7] = Ferror32;
    i_err [8] = Fadd32(ptr_fml_Sbuf,FFO_DWL_FLG, (char *)&st_upd_limits_del.c_dr_without_lmt_flg,0);
    i_ferr[8] = Ferror32;
    i_err [9] = Fadd32(ptr_fml_Sbuf,FFO_ROUT_CRT, (char *)st_upd_limits_del.c_rout_crt,0);
    i_ferr[9] = Ferror32;
    for (i = 0;i < 10 ;i++)
    {
      if(i_err[i] == -1 )
      {
        fn_userlog( c_ServiceName, "Error in :%d:",i );
        fn_errlog( c_ServiceName, "S31035", Fstrerror32( i_ferr[i]),c_err_msg);
        fn_errlog( c_ServiceName, "S31040", TPMSG, c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        strcpy(c_msg,"System error, Contact system Support");
        tpfree ((char *)ptr_fml_Sbuf);
        tpfree ((char *)ptr_fml_Rbuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    i_returncode  = tpcall  ( "SFO_UPD_LIMITS",( char * ) ptr_fml_Sbuf,0,( char ** ) &ptr_fml_Rbuf,&l_recvbuf,0);
    if ( i_returncode == -1 )
    {
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_errlog( c_ServiceName, "S31045", TPMSG, c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      strcpy(c_msg,"System error, Contact system Support");
      tpfree ((char *)ptr_fml_Sbuf);
      tpfree ((char *)ptr_fml_Rbuf); 
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    /***** Ver 1.3 Ends Here ***********/

		memcpy ( &st_upd_limits_add,
	           &st_upd_limits,
	           sizeof( st_upd_limits_add ) );
	
		st_upd_limits_add.c_dr_cr_flg = DEBIT;
		st_upd_limits_add.d_amount = (-1) * st_upd_limits.d_amount;
	
		strcpy(st_upd_limits_add.c_trd_dt, (char *)c_nxt_trd_dt.arr);
		strcpy(st_upd_limits_add.c_narration_id,
														UNCRYSTALIZED_BAL_BROUGHT_FORWARD);
		st_upd_limits_add.c_dr_without_lmt_flg = DEBIT_WITHOUT_LIMIT;
		fn_cpy_ddr(st_upd_limits_add.c_rout_crt);

    /**** Commented in Ver 1.3 **************************	
	  i_ip_len = sizeof ( struct vw_upd_limits );
	  i_op_len = sizeof ( struct vw_upd_limits );
	
	  i_returncode = fn_call_svc( c_ServiceName,
	                             	c_err_msg,
	                             	&st_upd_limits_add,
	                             	&st_upd_limits_add,
	                             	"vw_upd_limits",
	                             	"vw_upd_limits",
	                             	i_ip_len,
	                             	i_op_len,
	                             	0,
	                             	"SFO_UPD_LIMITS" );
	
	  if ( i_returncode != 0 )
	  {
	   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
	   	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
	    strcpy ( c_msg, "System error. Contact system support" );
	    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
	   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	  }
    *********** Ver 1.3 Ends here ***********************/

    /********** Ver 1.3 Starts Here *********************/
    i_err [0]= Fchg32(ptr_fml_Sbuf,FFO_XCHNG_CD,0,(char *)st_upd_limits_add.c_xchng_cd,0);
    i_err [1]= Fchg32(ptr_fml_Sbuf,FFO_EBA_MTCH_ACT_NO,0,(char *)st_upd_limits_add.c_cln_mtch_accnt,0);
    i_err [2]= Fchg32(ptr_fml_Sbuf,FFO_TRD_DT,0,(char *)st_upd_limits_add.c_trd_dt,0);
    i_err [3]= Fchg32(ptr_fml_Sbuf,FFO_NARRATION_ID,0,(char *)st_upd_limits_add.c_narration_id,0);
    i_err [4]= Fchg32(ptr_fml_Sbuf,FFO_REMARKS,0,(char *)st_upd_limits_add.c_remarks,0);
    i_err [5]= Fchg32(ptr_fml_Sbuf,FFO_DR_CR_FLG,0,(char *)&st_upd_limits_add.c_dr_cr_flg,0);
    i_err [6]= Fchg32(ptr_fml_Sbuf,FFO_AMOUNT,0,(char *)&st_upd_limits_add.d_amount,0);
    i_err [7]= Fchg32(ptr_fml_Sbuf,FFO_BAL_AMT,0,(char *)&st_upd_limits_add.d_bal_amt,0);
    i_err [8]= Fchg32(ptr_fml_Sbuf,FFO_DWL_FLG,0,(char *)&st_upd_limits_add.c_dr_without_lmt_flg,0);
    i_err [9]= Fchg32(ptr_fml_Sbuf,FFO_ROUT_CRT,0,(char *)st_upd_limits_add.c_rout_crt,0);

    for (i = 0;i < 10;i++)
    {
      if(i_err[i] == -1 )
      {
        fn_userlog( c_ServiceName, "Error in :%d:",i );
        fn_errlog( c_ServiceName, "S31050", Fstrerror32( i_ferr[i]),c_err_msg);
        fn_errlog( c_ServiceName, "S31055", TPMSG, c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        strcpy(c_msg,"System error, Contact system Support");
        tpfree ((char *)ptr_fml_Sbuf);
        tpfree ((char *)ptr_fml_Rbuf);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    i_returncode  = tpcall  ( "SFO_UPD_LIMITS",( char * ) ptr_fml_Sbuf,0,( char ** ) &ptr_fml_Rbuf,&l_recvbuf,0);
    if ( i_returncode == -1 )
    {
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      fn_errlog( c_ServiceName, "S31060", TPMSG, c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      strcpy(c_msg,"System error, Contact system Support");
      tpfree ((char *)ptr_fml_Sbuf);
      tpfree ((char *)ptr_fml_Rbuf);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    tpfree ((char *)ptr_fml_Sbuf);
    tpfree ((char *)ptr_fml_Rbuf);
   /********** Ver 1.3 Ends Here ***********************/

	}


	EXEC SQL
		UPDATE  fop_fo_options_pstn
		SET 		fop_trd_dt = to_date(:c_nxt_trd_dt,'dd-Mon-yyyy')
		WHERE 	fop_xchng_cd = :st_upd_limits.c_xchng_cd
		AND			fop_clm_mtch_accnt = :st_upd_limits.c_cln_mtch_accnt
		AND			fop_trd_dt = to_date(:st_upd_limits.c_trd_dt,'dd-Mon-yyyy')
		AND			(fop_uexctd_mrgn + fop_uordr_mrgn)!=0;				/*** Ver 1.1 ***/

  if( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND)
  {
    fn_errlog( c_ServiceName, "S31065", SQLMSG, c_err_msg );
   	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}


  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    strcpy ( c_msg, "System error. Contact system support" );
    fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  sprintf ( c_msg, "Successfully Processed OPT - match a/c - [%s], Trade date - [%s]",
        st_upd_limits.c_cln_mtch_accnt,
        st_upd_limits.c_trd_dt );
  /*fn_bat_pst_msg_fno ( c_ServiceName, c_msg, c_tag );*/

  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Ibuf, 0 , 0 );

}
