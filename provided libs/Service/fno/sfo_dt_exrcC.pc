/******************************************************************************/
/*  Program           : SFO_DT_EXRCC               	                          */
/*                                                                            */
/*  Input             : FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_ORDR_RFRNC                                        */
/*											FFO_EX_ORDR_TYP																				*/
/*											FFO_CANCL_QTY																			  	*/
/*											FFO_ALIAS																							*/
/*                                                                            */
/*  Output            : FFO_ERR_MSG                 			                    */
/*                      FFO_ACTN_ID                                           */
/*																																						*/
/*  Description       : This Service is to get the input from Applet and in   */
/*											turn call SFO_CAN_EXREQ to cancel the oder.						*/
/*                                                                            */
/*  Log               : 26-Aug-2002  1.0  Mohit Mehrotra                      */
/*  Log               : 09-Apr-2007  1.1  Vikash Kumar|Sushil Kumar           */
/*	Log               : 21-Dec-2007	 1.2	Ranjit 															*/
/******************************************************************************/
/*  Release 1.0       :	DT																										*/
/*	Release 1.1				: Commenting FFO_EX_ORDR_TYP for DL Revamp							*/
/*                    : Commenting rout_crt, Now Fget FFO_PIPE_ID             */
/*                      Comment pipe_id fetch from FEB_FO_EXRC_RQST_BOOK      */
/*	Release 1.2				: IBM Migration																					*/
/******************************************************************************/

#include <stdio.h>      /* C Header File                */
#include <stdlib.h>     /* C Header File                */
#include <string.h>     /* C Header File                */
#include <sqlca.h>      /* Oracle header file           */
#include <atmi.h>       /* TUXEDO Header File           */
#include <userlog.h>    /* TUXEDO Header File           */
#include <fml32.h>      /* TUXEDO Header File           */
#include <Usysflds.h>   /* TUXEDO Field Definitions     */
#include <fo_fml_def.h> /* created for FML handling     */
#include <fo_view_def.h>/* created for FML to/from VIEW conversion */
#include <fml_def.h>   	/* created for FML handling     */
#include <fo.h>
#include <fn_tuxlib.h>
#include <fn_log.h>			/* ver 1.2 */
#include <fml_rout.h>	/* ver 1.2 */
#include <fn_read_debug_lvl.h>	/* ver 1.2 */

char c_ServiceName[33];

void SFO_DT_EXRCC( TPSVCINFO *rqst )
{

	EXEC SQL INCLUDE "table/pcm_pipe_clm_map.h";

  /* Tuxedo specific variables                        */
  FBFR32  *ptr_fml_Ibuf;     /* Pointer to FML Input buffer    */
  FBFR32  *ptr_fml_Obuf;     /* Pointer to FML Output buffer    */

  EXEC SQL BEGIN DECLARE SECTION;
  	struct vw_usr_prfl st_usr_prfl;
  EXEC SQL END DECLARE SECTION;



  /* Application specific variables                   */
  int i_returncode;

  char c_ServiceName [ 30 ];
  char c_usr_id [ 9 ];
  char c_mtch_accnt [ 11 ];
  char c_err_msg [ 256 ];
  char c_succes_msg [ 256 ];

  char c_fno_xchng_cd [ 4 ];
	char c_fno_ordr_rfrnc[ 19 ];
	char c_fno_ex_ordr_typ;
	char c_alias[ 9 ];
	char c_dam_trnsctn[ 2 ];
	/**char c_rout_crt[ 4 ];  ver 1.1 **/
  char c_pipe_id[3];  /** ver 1.1 **/

	char c_exrc_stts;
	char c_exrc_mkt_stts;	

  long l_sssn_id;
  long l_usr_flg;

	long l_fno_cancel_qty;
  long l_acnt_id;

  struct vw_err_msg st_err_msg;

  /* Initialisation of Variables */

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy(c_ServiceName, rqst->name);

	INITDBGLVL(c_ServiceName);		/* ver 1.2 */
  ptr_fml_Obuf=(FBFR32 *)NULL;

  ptr_fml_Obuf=(FBFR32 *)tpalloc("FML32",NULL,MIN_FML_BUF_LEN);

  if (ptr_fml_Obuf == NULL)
  {
    fn_errlog(c_ServiceName, "S31005", TPMSG, c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    l_acnt_id = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn( TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }
	
	i_returncode  = fn_unpack_fmltovar (
                          c_ServiceName,
                          c_err_msg,
                          ptr_fml_Ibuf,
                          6,
                          FFO_USR_ID, ( char * )c_usr_id, NULL,
                          FFO_SSSN_ID, ( char * )&l_sssn_id, NULL,
                          FFO_EBA_MTCH_ACT_NO,
                                    ( char * )c_mtch_accnt, NULL,
                          FFO_XCHNG_CD, ( char * )c_fno_xchng_cd, NULL,
                          FFO_ORDR_RFRNC, ( char * )c_fno_ordr_rfrnc, NULL,
                          FFO_PIPE_ID, ( char * )c_pipe_id, NULL);  /** Added in ver 1.1 **/
/*													FFO_EX_ORDR_TYP, ( char * )&c_fno_ex_ordr_typ, NULL);  */  /* Ver 1.1 */
/*													FFO_CANCL_QTY, ( char * )&l_fno_cancel_qty,NULL); */

  if (i_returncode == SYSTEM_ERROR )
  {
    fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if (c_usr_id[0] == BPID)
  {
     if(Fget32(ptr_fml_Ibuf,FFO_ALIAS,0,(char *)c_alias,0) == -1)
      {
      	fn_errlog( c_ServiceName, "S31015", FMLMSG, c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        l_acnt_id = -1;
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
  }

	if(DEBUG_MSG_LVL_3)
	{
  	fn_userlog(c_ServiceName, "c_usr_id <%s>", c_usr_id);
  	fn_userlog(c_ServiceName, "l_sssn_id <%ld>", l_sssn_id);
  	fn_userlog(c_ServiceName, "c_mtch_accnt <%s>", c_mtch_accnt);
  	fn_userlog(c_ServiceName, "c_fno_xchng_cd <%s>", c_fno_xchng_cd);
  	fn_userlog(c_ServiceName, "c_fno_ordr_rfrnc <%s>", c_fno_ordr_rfrnc);
/*  fn_userlog(c_ServiceName, "c_fno_ex_ordr_typ <%c>", c_fno_ex_ordr_typ); ver 1.1 */
/*  fn_userlog(c_ServiceName, "l_fno_cancel_qty <%ld>", l_fno_cancel_qty);*/
  	fn_userlog(c_ServiceName, "c_alias <%s>", c_alias);
	}

  /****************************************************************/
  /* Validate the User and Trading Password                       */
  /****************************************************************/

  strcpy( st_usr_prfl.c_user_id, c_usr_id );
  st_usr_prfl.l_session_id = l_sssn_id;
  strcpy( st_usr_prfl.c_cln_mtch_accnt, c_mtch_accnt );
  st_usr_prfl.l_usr_flg = 0; /* to be validated */

  /*** Commented in ver 1.1 
  i_returncode = fn_chk_sssn(c_ServiceName,
                             &st_usr_prfl ,
                             &st_err_msg );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31020", LIBMSG, c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    l_acnt_id = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  ****/

	/********************************************************/
	/* Geting the status of the exercise Order							*/
  /********************************************************/
  
	EXEC SQL
  	SELECT FEB_EXRC_STTS /** comment in ver 1.1 ,FEB_PIPE_ID **/
  		INTO   :c_exrc_stts  /** comment in ver 1.1 ,
						 :sql_pcm_crnt_pipe_id						******/
  		FROM   FEB_FO_EXRC_RQST_BOOK
  		WHERE  FEB_EXRC_RFRNC_NO = :c_fno_ordr_rfrnc AND
  		       FEB_CLM_MTCH_ACCNT  = :c_mtch_accnt AND
						 FEB_XCHNG_CD = :c_fno_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31025",SQLMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    l_acnt_id = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


	/********************************************************/
	/* Geting the status of the Derivative Exchange					*/
  /********************************************************/

	EXEC SQL
		SELECT EXG_EXRC_MKT_STTS
			INTO :c_exrc_mkt_stts
  		FROM EXG_XCHNG_MSTR
      WHERE EXG_MKT_TYP = 'D' AND
						EXG_XCHNG_CD = :c_fno_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31030",SQLMSG,c_err_msg);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    l_acnt_id = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


  /********************************************************/
  /* Calling the service to cancel the FNO Exercise Order */
  /********************************************************/

	/*strcpy(sql_pcm_crnt_pipe_id,"11"); */    /*1.1*/
	strcpy(c_dam_trnsctn,"C");
  /** Commented in ver 1.1 **
	strcpy(c_rout_crt,"000");
  ** End of Comment in ver 1.1 **/

  i_returncode = fn_call_svc_fml ( c_ServiceName,
                                    c_err_msg,
                                    "SFO_CAN_EXRQ",
                                    0,
                                    8,  
                                    0,
					                          FFO_USR_ID, ( char * )c_usr_id,
					                          FFO_SSSN_ID, ( char * )&l_sssn_id,
        					                  FFO_EBA_MTCH_ACT_NO,
                 				                   ( char * )c_mtch_accnt,
                       					    FFO_XCHNG_CD, ( char * )c_fno_xchng_cd,
					                          FFO_ORDR_RFRNC, ( char * )c_fno_ordr_rfrnc,
         						            /*    FFO_EX_ORDR_TYP, ( char * )&c_fno_ex_ordr_typ, */		/* Ver 1.1 */
                   						  /*    FFO_CANCL_QTY, ( char * )&l_fno_cancel_qty, */
   						                      FFO_ALIAS, ( char * )c_alias,
	/** Commented in ver 1.1					FFO_PIPE_ID, ( char * )sql_pcm_crnt_pipe_id,  **/
                                    FFO_PIPE_ID, ( char * )c_pipe_id,  /** Added in ver 1.1 **/
																		FFO_DAM_TRNSCTN, ( char * )c_dam_trnsctn);
 /**  Commented in ver 1.1					FFO_ROUT_CRT, ( char * )c_rout_crt);   **/

  if ( i_returncode != SUCC_BFR )
  {
    fn_errlog( c_ServiceName, "S31035", LIBMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    l_acnt_id = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if (c_exrc_stts == 'R')   												/* exercise status is REQUESTED */
	{
		strcpy(c_succes_msg,"Your order has been cancelled.");
	}
	else if (c_exrc_stts == 'O')  											/* exercise status is ODERED */
	{
		if(c_exrc_mkt_stts == 'O')  										/* market is OPEN */
		{
			strcpy(c_succes_msg,"Your request for Exercise cancellation has been sent to the exchange.");
		}
		else																						/* market is ClOSED */
		{
			strcpy(c_succes_msg,"Your request for Exercise Cancellation will be sent to the exchange when the exchange opens.");
		}
	}

  if(DEBUG_MSG_LVL_3)
	{
    fn_userlog(c_ServiceName,"c_succes_msg <%s>",c_succes_msg);
  }


  if(Fadd32( ptr_fml_Obuf, FFO_ERR_MSG, (char *)c_succes_msg, 0 ) == -1)
  {
    fn_errlog( c_ServiceName, "S31040", TPMSG, c_err_msg  );
    tpfree ( ( char * ) ptr_fml_Obuf );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    l_acnt_id = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  l_acnt_id = 0;
  if(Fadd32( ptr_fml_Obuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 ) == -1)
  {
    fn_errlog( c_ServiceName, "S31045", TPMSG, c_err_msg  );
    tpfree ( ( char * ) ptr_fml_Obuf );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    l_acnt_id = -1;
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&l_acnt_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }


/*  ptr_fml_Obuf = (FBFR32 *)tprealloc( (char *)ptr_fml_Obuf,
                               i_counter * MIN_FML_BUF_LEN );

  if ( ptr_fml_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31050", TPMSG, c_err_msg  );
    EXEC SQL
      CLOSE cur_clnt_payio_dtls;
    tpfree ( ( char * ) ptr_fml_Obuf );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
*/

  tpreturn(TPSUCCESS, 0L, (char *)ptr_fml_Obuf, 0, 0);
}

