/******************************************************************************/
/*	Program	    			:	SFO_FUT_TCONF                                         */
/*                                                                            */
/*  Input             : vw_tradebook                                          */
/*                                                                            */
/*  Output            : vw_tradebook                                          */
/*                                                                            */
/*  Description       : This service updates the order book, trade book,      */
/*                      positions and the limits on getting Trade confirmation*/
/*                      Response from the Exchange for Futures orders         */
/*                                                                            */
/*  Log               : 1.0  12-Nov-2001  S. Swaminathan                      */
/*                    : 1.1  14-Dec-2007  Vidyayini Krish                     */
/*                    : 1.2  10-Mar-2008  Shailesh 														*/
/*                    : 1.3  17-Jul-2009  Shailesh                            */
/*                    : 1.4  12-Aug-2009  Shailesh                            */
/*										:	1.5	 09-Sep-2009  Sandeep															*/
/*										:	1.6	 09-Jun-2010	Sandeep															*/
/*										:	1.7	 16-Feb-2012	Shailesh														*/
/*										:	1.8	 24-Feb-2012	Sandip  														*/
/*                    : 1.9  02-Jul-2012  Navina                              */
/*                    : 2.0  20-Nov-2012  Mahesh                              */
/*										: 2.1  06-Nov-2012	Vishnu                              */
/*                    : 2.2  15-Jan-2013  Navina D.                           */
/*                    : 2.3  10-Jun-2013  Navina D.                           */
/*                    : 2.4  02-Jul-2013  Navina D.                           */
/*                    : 2.5  25-Nov-2013  Samip M.                            */
/*                    : 2.6  06-Jun-2014  Navina D.                           */
/*                    : 2.7  10-Jun-2014  Navina D.                           */
/*                    : 2.8  08-Jul-2014  Vishnu N.                           */
/*                    : 2.9  13-Feb-2014  Navina D.                           */
/*                    : 3.0  05-Aug-2014  Navina D.                           */
/*                    : 3.1  25-Jul-2015  Sachin Birje.                       */
/*                    : 3.2  31-Jul-2015  Navina D.                           */
/*                    : 3.4  26-Oct-2015  Aakash C.                           */
/*                    : 3.5  18-Nov-2015  Kishor/Aakash                       */
/*                    : 3.6  17-Dec-2015  Aakash							  							*/
/*                    : 3.7  02-Feb-2016  Tanmay W                            */
/*                    : 3.8  25-Feb-2016  Kishor B.                           */
/*										: 3.9  04-May-2016	Tanmay W/Kishor B.									*/
/*										: 4.0	 29-Aug-2016	Kishor B.														*/
/*                    : 4.1  13-Sep-2016  Bhupendra Malik                     */
/*                    : 4.2  08-Nov-2016  Kishor Borkar/Tanmay W.           	*/
/*                    : 4.4  09-Dec-2016  Bhupendra Malik                     */
/*  Log               : 4.5  25-Jul-2017  Mrinal Kishore                      */
/*                    : 4.6  27-Sep-2017  Bhushan Harekar                     */
/*										:	4.7	 07-Nov-2017  Sandeep Patil												*/
/*                    : 4.8  08-Mar-2018  Suchita D.                          */
/*                    : 4.9  04-Apr-2018  Mrinal Kishore                      */
/*                    : 5.0  25-Sep-2018  Suchita Dabir                       */
/*                    : 5.2  01-Apr-2019  Parag Kanojia                       */
/*                    : 5.3  30-Aug-2019  Suchita Dabir                       */
/*										: 5.4  02-Mar-2020  Navina D.                           */
/*                    : 5.5  15-Jul-2021  Suchita Dabir                       */
/*										:	5.6	 25-Nov-2021	Shlok Ghan													*/
/*                    : 5.7  21-Oct-2021  Mahesh Regulwar                     */
/*                    : 5.8  07-Mar-2023  Vipul Sharma												*/
/*									  : 5.9  31-Mar-203  ( bhavana ) 													*/
/******************************************************************************/
/* 1.0  -  New Release                                                        */
/* 1.1  - IBM Changes                                                         */
/* 1.2  - FP Changes 	                                                        */
/* 1.3  - Distri Lock Fix 	                                                  */
/* 1.4  - Commented Distri Lock fix(Ver 1.3) & added default routing for call	*/
/*				sfo_ref_to_ord																											*/
/* 1.5  - Partial Execution & Cancellation Case Handeling											*/
/* 1.6	- Addhoc Margin Changes While Call To sfo_prcs_fimtm.									*/
/* 1.7	- Avoid SPAN Trades to get Processed in this service if ack not 			*/
/*				processed																														*/
/* 1.8	- BSE Changes 																												*/
/* 1.9  - SPAN TNC flag handling																							*/
/* 2.0  - ROLLOVER changes																										*/
/* 2.1  - Changes for SLTP FuturePlus																					*/
/* 2.2  - SPAN FuturePLUS changes                                             */
/* 2.3  - Fix							                                                    */
/* 2.4  - CR-ISEC14-40339 FP SLTP Excess qty offline upload                   */ 
/* 2.5  - Real time SMS for Executed orders of CNT & Limit										*/
/* 2.6  - Unsolicated cancellation resp for SLTP futureplus         					*/
/* 2.7  - Execption EOS for Sltp Futureplus                                   */
/* 2.8  - Changes for HTML 5                                                  */
/* 2.9	-	Enabling SLTP FP for NRI clients (Navina D. )      					        */
/* 3.0  - Fresh qty update on squareoff of cover excess position. (Navina D.) */
/* 3.1  - Fo Auto MTM Changes (Sachin Birje)                                  */
/* 3.2  - CR_ISEC14_64402 Limit Order Type in FPSLTP (Navina D.)              */
/* 3.4  - Fix for ACK & Trade remaining in QUEUED Status											*/
/* 3.5  - Fix for Modify rej & self cancellation and trade received at same time*/
/* 3.6  - Patch for deadlock condition                                        */
/* 3.7  - Migration of RI to NRI                                              */
/* 3.8  - Changes for core products                                           */
/* 3.9  - Changes for part executed trade on calling Ack processing and log 	*/
/*				removal and provision for spread ack and Log maintenance  					*/
/* 4.0	-	fn_ors_rms  include																									*/
/* 4.1  - fix ors issues                                                      */
/* 4.2  - Processing trades on functional exit & Fill Qty Fetch               */
/* 4.4  - Cash Projection changes                                             */
/* 4.5  - Service call with TPNOTRAN & TPNOREPLY option introduced            */
/* 4.6  - Ack Time handling                                                   */
/* 4.7  - Hard Parse Changes.																									*/
/* 4.8  - Rollover with spread changes                                        */
/* 4.9  - ORDER REJECTION STATUS CLASH with My EOS                            */
/* 5.0  - Calculate Obligation for new fresh placed with 'E' flag for SLTP    */ 
/*        products                                                            */
/* 5.2  - FO TAP Last Activity Ref Changes ( Parag K.)                        */
/* 5.3  - Changes For Updating The Recent Last Activity Ref In Table ( Suchita Dabir ) */
/* 5.4  - FPSL margin change CR-ISEC14-133200   - Navina D. (02-Mar-2020)     */
/* 5.5  - CR_ISEC04_132410 changes - Suchita Dabir ( 15-Jul-2021 )            */
/* 5.6  - CR-ISEC14-150750_Introduction of Profit Order in FPSL (Kalpesh P)   */
/* 5.7  - CR-ISEC14-158350 Revamping of Open Positions Page in F&O Segment    */
/* 5.8  - Changing fn_lock_usr to fn_lock_fno (Vipul Sharma)									*/
/* 5.9  - Real-time Margin reporting regulatory changes 										  */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <eba_to_ors.h>
#include <fo_view_def.h>
#include <fo_fml_def.h>
#include <fn_tuxlib.h>
#include <fn_val_ord.h> /** ver 5.5 **/
#include <fn_pos.h>
#include <fn_ddr.h>
#include <fn_log.h> /* Ver 1.1 */
#include <fn_session.h> /* Ver 1.1 */
#include <fml_rout.h> /* Ver 1.1 */
#include <fn_read_debug_lvl.h> /* Ver 1.1 */
#include <fml_def.h>/** Ver 2.5 **/
#include <fn_ors_rms.h> /* Ver 4.0 */


/*Sleep func added in  ver 5.6 */
int fn_fno_sleep( char     *c_ServiceName,
                      FBFR32   **ptr_fml_Ibuffer,
                      double   d_sleep_tm_msec,
                      int      i_max_call_allwd,
                      char     *c_caller_rfrnc,
                      char     *c_fwd_to_srvc,
                      char     *c_errmsg);

void SFO_FUT_TCONF( TPSVCINFO *rqst )
{
	char	c_ServiceName[33];
	char	c_err_msg[256];
	int		i_trnsctn;
	int		i_returncode;
	int		i_ip_len;
	int		i_op_len;
	char	c_imtm_remarks[256];
  char  c_tag [ 256 ];
  char  c_svc_name [ 15+1 ];      /*Ver 1.2 */
  char  c_prc_flg	=	'N';       /***  Ver 1.6 ***/
	char  c_span_flg = 'N';
	char  c_bse_span_flg = 'N';		/** Ver 1.8 **/
  char  c_spl_flg = '\0';       /** Ver 2.0 **/
 	char  c_ipord_ref[19] ="\0";   /*** Ver 3.9 ***/

	/*** Ver 2.1 Starts ***/
	struct vw_pstn_actn *ptr_st_pstn_actn;

	char c_sltp_ord_rfrnc[19];
	char c_frsh_ordr_rfrnc[19]; /*** Ver 3.2 ***/
	char c_cvr_ordr_rfrnc[19]; /*** Ver 3.2 ***/
	char c_trgt_ord_rfrnc[19] = "\0";	/*** Ver 3.4 ***/
  char c_nkd_blkd_flg='\0'; /** ver 5.6 **/
	char c_fc_flg;
  char c_ord_stts = '\0' ;
	char c_narration_id[4];
	char c_ord_flw = '\0';
  char c_ordr_rfrnc_lck[2][19]; /**** Ver 3.6 ****/
  char c_sltp_ord_rfrnc_lck[2][19]; /*** Ver 3.6 ***/
  char c_ordr_rfrnc_core[19];   /*** Ver 3.8 ***/
	char c_ref_rmrks[100] = "\0"; /*** Ver 5.4 ***/
	double d_comp1_mrgn = 0.0;  /*** Ver 5.4 ***/
  double d_comp1_pl = 0.0;    /*** Ver 5.4 ***/
  double d_xchng_amt = 0.0;   /*** Ver 5.4 ***/
	char c_can_ordr_ref[19] = "\0" ; /*** Ver 5.6 ***/
  char c_remarks[50] = "\0"; /*** Ver 5.6 ***/
  char c_sys_msg[20] = "\0"; /*** Ver 5.6 ***/
  int i_sleep_msec = 0; /*** Ver 5.6 ***/
/** ver 5.5 starts **/
  double d_existing_dlvry_mrgn_val =0.0;
  double d_ltp = 0.0;
  long l_blocked_qty = 0;
  int i_return_cd = 0;
  long l_opnpos_qty = 0;
  char c_ordr_flw = '\0';
  double d_opn_pos_val = 0.0;
  double d_funds_to_be_rqrd =0.0;
  double l_open_pos_qty = 0;
  double d_wght_price = 0.0;
  double d_val = 0.0;
  double d_funds_to_release = 0.0;
  char c_setllmnt_flg = '\0';
  long l_qty_to_unblock = 0;
/** ver 5.5 ends **/
	double d_amt_blkd = 0.0;
	double d_lss_amt_blkd = 0.0;
	double d_ord_lmt_rt = 0.0;
	double d_fmm_sltp_prcnt = 0.0;
	double d_cvr_lmt_rt = 0.0;
	double d_new_mrgn_amt = 0.0;
	double d_new_lss_amt = 0.0;
	double d_exe_mrgn_amt = 0.0;
	double d_exe_lss_amt = 0.0;
	double d_diff_mrgn_amt = 0.0;
	double d_diff_lss_amt = 0.0;
	double d_exe_val = 0.0;
	double d_avg_prc = 0.0;
	double d_balance_amt = 0.0;
	double d_obli_pl = 0.0;

	long l_tot_ord_qty = 0;
	long l_ord_exe_qty = 0;
	long l_rmn_qty = 0;
	long l_exe_qty = 0;
	long l_cv_exe_qty = 0;
  long l_mdfctn_cntr = 0;		/**** Ver 3.5 ****/
	long l_ftd_ord_exe_qty = 0;	/**** Ver 3.5 ****/
	long l_ors_msg_typ=0; /*** Ver 3.9 ***/
	/*** Ver 2.1 Ends ***/

	long l_net_open = 0; /*** Ver 3.2 ***/
	long l_open_qty = 0; /*** Ver 2.7 ***/

	int   i_exec_rng = 0; /*** Ver 2.6 ***/
  int   i_ack_tm = 0;     /**** Ver 3.5 ****/
  short int si_null;			/********* Ver 3.6 *******/

	FBFR32   *ptr_fml_Ibuf;				/*** ver 3.4 ***/
	FBFR32   *ptr_fml_Obuf;				/*** ver 3.4 ***/
	 FBFR32   *ptr_fml_Rbuf=NULL;    /* ver 5.6 */

	struct vw_xchngbook st_cvr_xchngbk;	/*** ver 3.4 ***/	

	char  c_reason_cd [ 2000 ] = "\0";			/*** Ver 2.9 ***/
	char	c_tmp_rmrks [ 133 ] = "\0";			  /*** Ver 2.9 ***/
	MEMSET(c_reason_cd);										/*** Ver 2.9 ***/
	MEMSET(c_tmp_rmrks);										/*** Ver 2.9 ***/

	/**Commented under Ver 1.4	
	char  c_rowid[ 18+1 ];          *Ver 1.3 *
	**/
	char c_rms_prcs_flg = 'N';			/***	Ver 4.7	***/
	char c_cvr_flg ='C';						/***  Ver 4.7 ***/
	char c_cvr_ordr_stts = 'Q';			/*** Ver 3.2 ***/
	char c_frsh_ordr_stts = 'Q';			/*** Ver 3.2 ***/
	char frsh_rms_prcsd_flg = '\0';			/*** Ver 3.4 ***/
	char cvr_rms_prcsd_flg = '\0';			/*** Ver 3.4 ***/
  char c_lst_act_ref [22];                  /*** Ver 5.2 ***/
  int  i_recent_act_ref = 0;  /*** Ver 5.3 ***/
  long long ll_fod_last_act_no = 0; /*** Ver 5.3 ***/
  long long ll_lst_act_ref  = 0; /*** Ver 5.3 ***/
  char c_fod_last_act_no[22]; /*** Ver 5.3 ***/
  MEMSET(c_lst_act_ref);                    /*** Ver 5.2 ***/
  MEMSET(c_fod_last_act_no); /*** Ver 5.3 ***/

	/*** Ver 5.7 starts ***/
  double d_prtfl_avgprc = 0.0;
  /*** Ver 5.7 ends ***/

  /**** version 4.8 started ****/
 
  char c_other_ordr_ref[19];
  char c_another_ordr_ref[19];

  MEMSET(c_other_ordr_ref); 
  MEMSET(c_another_ordr_ref);

  char c_expry_date_nxt_ordr[23];
  MEMSET(c_expry_date_nxt_ordr);

  long l_sroll_diff_amt = 0;
  long l_sroll_lss_amt = 0;

  long l_actual_ordr_tot_qty = 0;
  int i_allow_trd_prcsing = 0;

  long l_executed_qty = 0; 
  int i_source_dest_flg = 0; 

  long l_diff_mrgn = 0;
  long l_diff_lss = 0;

  long l_exec_qty_rws = 0;

  /**** version 4.8 ended ********/
 
  EXEC SQL INCLUDE "table/iai_info_account_info.h"; /* Ver 3.7 */
	EXEC SQL BEGIN DECLARE SECTION;
		struct vw_orderbook st_orderbook;
		struct vw_tradebook st_tradebook;			/********* Ver 3.6 *******/
		struct vw_tradebook *ptr_st_tradebook;
		struct vw_pstn_actn st_pstn_actn;
		struct vw_xchngbook st_xchngbook;
	EXEC SQL END DECLARE SECTION;
	
	struct vw_err_msg *ptr_st_err_msg;

	MEMSET(st_pstn_actn); /***  Ver 2.3 ***/

	ptr_st_tradebook = ( struct vw_tradebook *)rqst->data;
	strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);

	/*** ver 3.4 Starts***/	
	MEMSET(c_cvr_ordr_rfrnc);
	MEMSET(c_trgt_ord_rfrnc);
	MEMSET(st_cvr_xchngbk);	
	/*** ver 3.4 Ends***/	

	MEMSET(c_ordr_rfrnc_lck);    /********* Ver 3.6 *******/
  MEMSET(c_sltp_ord_rfrnc_lck); /********* Ver 3.6 *******/

	ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
                                                     "vw_err_msg",
                                                sizeof ( struct vw_err_msg ) );
	if ( ptr_st_err_msg ==  NULL )
	{
		fn_errlog ( c_ServiceName, "S31005", TPMSG, c_err_msg );
		tpreturn ( TPFAIL, NO_BFR, NULL, 0, 0 );
	}
	memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );

  /*** Added for Order Routing ***/
  fn_init_ddr_val ( ptr_st_tradebook->c_rout_crt );


	/**Commented under Ver 1.4 
	***************************************************************************************
	*Ver 1.3 starts *
	fn_userlog ( c_ServiceName, "SH1-c_ordr_rfrnc:%s:", ptr_st_tradebook->c_ordr_rfrnc);

	EXEC SQL
	SELECT ROWID
	INTO	 :c_rowid 
	FROM  FOD_FO_ORDR_DTLS
	WHERE FOD_ORDR_RFRNC=:ptr_st_tradebook->c_ordr_rfrnc;

	if(SQLCODE != 0)	
	{
  	fn_errlog ( c_ServiceName, "S31010", SQLMSG, ptr_st_err_msg->c_err_msg );
		strcpy ( ptr_st_err_msg->c_err_msg, c_err_msg );
		tpfree ( ( char * ) ptr_st_tradebook );
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}

	fn_userlog ( c_ServiceName, "SH2-c_row_id:%s:",c_rowid);

	i_returncode = fn_check_lock(c_ServiceName,
													 c_rowid,
													 "FOD_FO_ORDR_DTLS",
													 c_err_msg);
	if( i_returncode != NOT_LOCKED )
	{
		strcpy ( ptr_st_err_msg->c_err_msg, c_err_msg );
		tpfree ( ( char * ) ptr_st_tradebook );
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}

	fn_userlog ( c_ServiceName, "SH7-After function check");

	*Ver 1.3 ends *
	***************************************************************************************
	**Comment Ends under Ver 1.4 **/
	
	/*** Ver 3.2 start ***/
	if(ptr_st_tradebook->c_prd_typ == SLTP_FUTUREPLUS)
	{
  	if(DEBUG_MSG_LVL_3)   /*** Ver 3.9 ***/
  	{
			fn_userlog(c_ServiceName,"Trade processing started for Input Order:%s: | :%s: ",ptr_st_tradebook->c_ordr_rfrnc, ptr_st_tradebook->c_trd_rfrnc);
		}

		EXEC SQL
		  SELECT		
				 FOD_ORDR_STTS			/***	Ver 4.7	***/
		  INTO
			  :c_cvr_ordr_stts
		  FROM FOD_FO_ORDR_DTLS
		  WHERE FOD_ORDR_RFRNC = (SELECT FOD_SLTP_ORDR_RFRNC FROM FOD_FO_ORDR_DTLS WHERE FOD_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc);
		if(SQLCODE != 0)
		{
			fn_errlog(c_ServiceName, "S31015", SQLMSG,  ptr_st_err_msg->c_err_msg );
			tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
		}

		EXEC SQL					/***	Ver 4.7	***/
		  SELECT
			 FOD_ORDR_STTS,
			 FOD_SLTP_ORDR_RFRNC				/*** Ver 3.4 ***/
		  INTO
			  :c_frsh_ordr_stts,
			  :c_cvr_ordr_rfrnc				/*** Ver 3.4 ***/
		  FROM FOD_FO_ORDR_DTLS
		  WHERE FOD_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc;

		if(DEBUG_MSG_LVL_0)   /*** Ver 3.9 ***/
    {
			fn_userlog(c_ServiceName,"c_cvr_ordr_stts :%c c_frsh_ordr_stts : %c",c_cvr_ordr_stts, c_frsh_ordr_stts);
			fn_userlog ( c_ServiceName, " ~~~~~~~~~~~~~~~~~~ptr_st_tradebook->c_ordr_rfrnc:%s  c_cvr_ordr_rfrnc: %s ~~~~~~~~~~~~~~~~~~", ptr_st_tradebook->c_ordr_rfrnc, c_cvr_ordr_rfrnc);
		}
		/*** Ver 3.4 start ***/
		/**commented in Ver 3.4***/
		/*if ((c_cvr_ordr_stts == QUEUED) || (c_frsh_ordr_stts == QUEUED))
		{
		  fn_errlog(c_ServiceName, "S31020", LIBMSG,  ptr_st_err_msg->c_err_msg);
		  tpreturn(TPSUCCESS, SUCC_BFR, NULL ,0, 0 );
		}*/

		if ((c_cvr_ordr_stts == QUEUED) || (c_frsh_ordr_stts == QUEUED))	
		{
			MEMSET(st_cvr_xchngbk);
      /**** Commented in Ver 4.1 
			EXEC SQL
			 SELECT
				 fxb_rms_prcsd_flg
			INTO
				:frsh_rms_prcsd_flg
			FROM FXB_FO_XCHNG_BOOK
			WHERE FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc
			AND    FXB_MDFCTN_CNTR = (select max(FXB_MDFCTN_CNTR)
				from   FXB_FO_XCHNG_BOOK
			where  FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc); **Comment in Ver 4.1 ***/
			/*** Ver 4.1 Starts ******/
			EXEC SQL
			SELECT  FXB_RMS_PRCSD_FLG			/***	Ver 4.7	***/
			INTO		:frsh_rms_prcsd_flg
			FROM    FXB_FO_XCHNG_BOOK
			WHERE		FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc
			AND    FXB_MDFCTN_CNTR = (SELECT MIN(FXB_MDFCTN_CNTR)
																FROM	 FXB_FO_XCHNG_BOOK
																WHERE	 FXB_ORDR_RFRNC= :ptr_st_tradebook->c_ordr_rfrnc
																AND		 FXB_JIFFY     = (SELECT MIN(FXB_JIFFY)
																												FROM	 FXB_FO_XCHNG_BOOK
																												WHERE	 FXB_ORDR_RFRNC= :ptr_st_tradebook->c_ordr_rfrnc
												 																AND		 FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg) /*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/
																AND			FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg)/*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/
			AND		FXB_RMS_PRCSD_FLG=:c_rms_prcs_flg;/*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/
			/*** Ver 4.1 Ends ****/
			if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)	/**** SQLCODE != NO_DATA_FOUND added in Ver 4.1 ***/
			{
				fn_errlog(c_ServiceName, "S31025", SQLMSG,  ptr_st_err_msg->c_err_msg);
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
			}
      /***** Commented in Ver 4.1 starts
			EXEC SQL
			SELECT
			    fxb_rms_prcsd_flg
			INTO
				:cvr_rms_prcsd_flg 
			FROM FXB_FO_XCHNG_BOOK
			WHERE FXB_ORDR_RFRNC = :c_cvr_ordr_rfrnc
			AND    FXB_MDFCTN_CNTR = (select max(FXB_MDFCTN_CNTR)
				from   FXB_FO_XCHNG_BOOK
			where  FXB_ORDR_RFRNC = :c_cvr_ordr_rfrnc); Ver 4.1 Ends ***/
			/*** Ver 4.1 Starts ****/
			EXEC SQL		
			SELECT  FXB_RMS_PRCSD_FLG			/***	Ver 4.7	***/
			INTO		:cvr_rms_prcsd_flg
			FROM    FXB_FO_XCHNG_BOOK
			WHERE		FXB_ORDR_RFRNC = :c_cvr_ordr_rfrnc
			AND    FXB_MDFCTN_CNTR = (SELECT MIN(FXB_MDFCTN_CNTR)
																FROM	 FXB_FO_XCHNG_BOOK
																WHERE	 FXB_ORDR_RFRNC= :c_cvr_ordr_rfrnc
																AND		 FXB_JIFFY     = (SELECT MIN(FXB_JIFFY)
																												FROM	 FXB_FO_XCHNG_BOOK
																												WHERE	 FXB_ORDR_RFRNC= :c_cvr_ordr_rfrnc
												 																AND		 FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg)/*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/
																AND		 FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg)/*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/
			AND		FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg;/*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/
			/****** Ver 4.1 Ends ****/
			if(SQLCODE != 0  &&  SQLCODE != NO_DATA_FOUND) /*** SQLCODE != NO_DATA_FOUND Added in Ver 4.1 ***/
			{
				fn_errlog(c_ServiceName, "S31030", SQLMSG,  ptr_st_err_msg->c_err_msg);
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
			}

			if(frsh_rms_prcsd_flg == 'N' && cvr_rms_prcsd_flg == 'N')
				strcpy( c_trgt_ord_rfrnc, ptr_st_tradebook->c_ordr_rfrnc);
			else if (frsh_rms_prcsd_flg == 'N' && cvr_rms_prcsd_flg != 'N')
				strcpy( c_trgt_ord_rfrnc, ptr_st_tradebook->c_ordr_rfrnc);
			else if (frsh_rms_prcsd_flg != 'N' && cvr_rms_prcsd_flg == 'N')
				strcpy( c_trgt_ord_rfrnc, c_cvr_ordr_rfrnc);
      /****** Commented in Ver 4.1 starts
			EXEC SQL
			SELECT FXB_ORS_MSG_TYP,
				   FXB_MDFCTN_CNTR,
					nvl(to_char(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-')
			INTO   :st_cvr_xchngbk.l_ors_msg_typ,
					:st_cvr_xchngbk.l_mdfctn_cntr,
					:st_cvr_xchngbk.c_ack_tm
			FROM   FXB_FO_XCHNG_BOOK
			WHERE  FXB_ORDR_RFRNC = :c_trgt_ord_rfrnc
			AND    FXB_MDFCTN_CNTR = (select max(FXB_MDFCTN_CNTR)
				from   FXB_FO_XCHNG_BOOK
				where  FXB_ORDR_RFRNC = :c_trgt_ord_rfrnc)
			AND    FXB_RMS_PRCSD_FLG = 'N';  Ver 4.1 Ends ***/
			/*** Ver 4.1 Starts ****/
			EXEC SQL	
			SELECT FXB_ORS_MSG_TYP,			/***	Ver 4.7	***/
						 FXB_MDFCTN_CNTR,
						 NVL(TO_CHAR(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-'),
  					 NVL(FXB_XCHNG_CNCLD_QTY,0)    																/**** Ver 4.2 *****/
			INTO   :st_cvr_xchngbk.l_ors_msg_typ,
						 :st_cvr_xchngbk.l_mdfctn_cntr,
						 :st_cvr_xchngbk.c_ack_tm,
             :st_cvr_xchngbk.l_xchng_can_qty                              /***** Ver 4.2 ***/
			FROM   FXB_FO_XCHNG_BOOK
			WHERE  FXB_ORDR_RFRNC = :c_trgt_ord_rfrnc
			AND    FXB_MDFCTN_CNTR =(SELECT MIN(FXB_MDFCTN_CNTR)
																FROM	 FXB_FO_XCHNG_BOOK
																WHERE	 FXB_ORDR_RFRNC= :c_trgt_ord_rfrnc
																AND		 FXB_JIFFY     = (SELECT MIN(FXB_JIFFY)
																												FROM	 FXB_FO_XCHNG_BOOK
																												WHERE	 FXB_ORDR_RFRNC= :c_trgt_ord_rfrnc
												 																AND		 FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg)			/***	Ver 4.7	***/
																AND			FXB_RMS_PRCSD_FLG=:c_rms_prcs_flg)/*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/
			AND		FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg;/*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/
			/**** Ver 4.1 Ends *****/

			if(SQLCODE !=0)
			{
				fn_errlog(c_ServiceName, "S31035", SQLMSG,  ptr_st_err_msg->c_err_msg);
				tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
			}

			strcpy(st_cvr_xchngbk.c_entry_dt_tm , st_cvr_xchngbk.c_ack_tm);

			st_cvr_xchngbk.d_jiffy       = 0;
			st_cvr_xchngbk.l_dwnld_flg   = 0;
			fn_cpy_ddr ( st_cvr_xchngbk.c_rout_crt );
			strcpy(st_cvr_xchngbk.c_xchng_rmrks,"*");
			strcpy(st_cvr_xchngbk.c_ordr_rfrnc, c_trgt_ord_rfrnc); 

	/*** Ver 3.9 starts *** **** Commented in Ver 4.2 ******
			l_ftd_ord_exe_qty = 0 ; 
			EXEC SQL
				SELECT  NVL(SUM(ftd_exctd_qty),0) 
				INTO		:l_ftd_ord_exe_qty
				FROM		ftd_fo_trd_dtls
				WHERE		ftd_ordr_rfrnc = :st_cvr_xchngbk.c_ordr_rfrnc;

			if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
			{
				fn_errlog(c_ServiceName, "S31040", SQLMSG,  ptr_st_err_msg->c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
        free((char*) ptr_st_err_msg);
        tpfree((char*)ptr_fml_Obuf);
        free((char *) ptr_st_tradebook);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

    	if(DEBUG_MSG_LVL_3) *** Ver 3.9 *** 
    	{
				fn_userlog( c_ServiceName, "l_ftd_ord_exe_qty: %ld",l_ftd_ord_exe_qty);
			}


			st_cvr_xchngbk.l_xchng_can_qty = l_ftd_ord_exe_qty;
			*** Ver 3.9 ends ***
			********** Commented ver 4.2 Ends ************/

			i_returncode = fn_acall_svc ( c_ServiceName,
											c_err_msg,
											&st_cvr_xchngbk,
											"vw_xchngbook",
											sizeof ( st_cvr_xchngbk ),
											TPNOREPLY,
											"SFO_FUT_ACK" );
			if ( i_returncode != 0 )
			{
				fn_errlog ( c_ServiceName, "S31045", LIBMSG, ptr_st_err_msg->c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
			}

			fn_errlog(c_ServiceName, "S31050", LIBMSG,  ptr_st_err_msg->c_err_msg);
			tpreturn(TPSUCCESS, SUCC_BFR, NULL ,0, 0 );
		}
		/*** Ver 3.4 Ends ***/
	}
	/*** Ver 3.2 End ***/
  /*** Ver 3.8 Starts ***/
  else if(ptr_st_tradebook->c_prd_typ == FUTURES || ptr_st_tradebook->c_prd_typ == FUTURE_PLUS )
  {
    if(DEBUG_MSG_LVL_3) /*** Ver 3.9 ***/ 
    {
			fn_userlog(c_ServiceName,"Trade processing started for Input Order:%s: | :%s: ",ptr_st_tradebook->c_ordr_rfrnc, ptr_st_tradebook->c_trd_rfrnc);
		}

    EXEC SQL			/***	Ver 4.7	***/
        SELECT
           FOD_ORDR_STTS,
           NVL(FOD_SROLL_DIFF_AMT,0), /** version 4.8 **/
           NVL(FOD_SROLL_LSS_AMT,0), /** version 4.8 **/
           FOD_SPL_FLAG, /** version 4.8 **/
           FOD_EXEC_QTY /** version 4.8 **/
        INTO
          :c_frsh_ordr_stts,
          :l_sroll_diff_amt, /** version 4.8 **/
          :l_sroll_lss_amt, /** version 4.8 **/
          :c_spl_flg, /** version 4.8 **/
          :l_executed_qty /** version 4.8 **/
        FROM FOD_FO_ORDR_DTLS
        WHERE FOD_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc;

    if(SQLCODE != 0)
    {
      fn_errlog(c_ServiceName, "S31055", SQLMSG,  ptr_st_err_msg->c_err_msg );
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
    }

    /** version 4.8 starts **/
    fn_userlog(c_ServiceName,"ROLLOVER_WITH_SPREAD l_sroll_diff_amt :%ld:",l_sroll_diff_amt);
    fn_userlog(c_ServiceName,"ROLLOVER_WITH_SPREAD l_sroll_lss_amt :%ld:",l_sroll_lss_amt); 
    /** version 4.8 ends **/

    if(DEBUG_MSG_LVL_3)   /*** Ver 3.9 ***/ 
    {
			fn_userlog(c_ServiceName,"c_frsh_ordr_stts : %c~~~~~~~~~~ptr_st_tradebook->c_ordr_rfrnc:%s",c_frsh_ordr_stts,ptr_st_tradebook->c_ordr_rfrnc);
		}

    if(c_frsh_ordr_stts == QUEUED)
    {
    	if(DEBUG_MSG_LVL_3)   /*** Ver 3.9 ***/ 
    	{
    		fn_userlog(c_ServiceName,"Inside Order status QUEUED");
      }

			MEMSET(st_cvr_xchngbk);

      EXEC SQL
      SELECT FXB_ORS_MSG_TYP,			/***	Ver 4.7	***/
           FXB_MDFCTN_CNTR,
           NVL(TO_CHAR(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-'),
           NVL(FXB_XCHNG_CNCLD_QTY,0)                                   /**** Ver 4.2 *****/
      INTO   :st_cvr_xchngbk.l_ors_msg_typ,
           	 :st_cvr_xchngbk.l_mdfctn_cntr,
          	 :st_cvr_xchngbk.c_ack_tm,
             :st_cvr_xchngbk.l_xchng_can_qty                              /***** Ver 4.2 ***/
      FROM   FXB_FO_XCHNG_BOOK
      WHERE  FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc
      AND    FXB_JIFFY =
												(SELECT MIN(FXB_JIFFY) 
													 FROM   FXB_FO_XCHNG_BOOK 
													WHERE  FXB_ORDR_RFRNC =:ptr_st_tradebook->c_ordr_rfrnc 
													  AND  FXB_RMS_PRCSD_FLG = :c_rms_prcs_flg)/*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/        	  AND    FXB_RMS_PRCSD_FLG = :c_rms_prcs_flg; /*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/

      if(SQLCODE !=0)
      {
        fn_errlog(c_ServiceName, "S31060", SQLMSG,  ptr_st_err_msg->c_err_msg);
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 ); 
      }
			
			/** Ver 3.9 starts **/

	if((st_cvr_xchngbk.l_ors_msg_typ == ORS_2LN_ORD_ACPT ) || (st_cvr_xchngbk.l_ors_msg_typ == ORS_3LN_ORD_ACPT) || (
    ( c_spl_flg == ROLLOVER_WITH_SPREAD ) &&
     (
        (st_cvr_xchngbk.l_ors_msg_typ == ORS_SPRD_MOD_ACPT) || (st_cvr_xchngbk.l_ors_msg_typ == ORS_CAN_ORD_ACPT ) || ( st_cvr_xchngbk.l_ors_msg_typ == ORS_SPN_ORD_ACPT) || (st_cvr_xchngbk.l_ors_msg_typ == ORS_SPN_ORD_RJCT) ||   ( st_cvr_xchngbk.l_ors_msg_typ == ORS_SPRD_CAN_RJCT) || (st_cvr_xchngbk.l_ors_msg_typ == ORS_SPRD_MOD_RJCT )
     )
    )
  ) /*** new ors msg types added in ver 4.8 ***/
  		{
				l_ors_msg_typ = st_cvr_xchngbk.l_ors_msg_typ;
				strcpy(c_ipord_ref,ptr_st_tradebook->c_ordr_rfrnc);
	
				i_returncode = fn_spd_acpt(c_ServiceName,c_ipord_ref,l_ors_msg_typ);
				if( i_returncode == -1)
				{
        	fn_errlog(c_ServiceName, "S31065", SQLMSG,  ptr_st_err_msg->c_err_msg);
        	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
        	free((char*) ptr_st_err_msg);
        	tpfree((char*)ptr_fml_Obuf);
        	free((char *) ptr_st_tradebook);
        	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );					
				}
	
    		tpreturn(TPSUCCESS, SUCC_BFR, NULL ,0, 0 );
			}
			
			/** Ver 3.9 ends **/


      strcpy(st_cvr_xchngbk.c_entry_dt_tm , st_cvr_xchngbk.c_ack_tm);

      st_cvr_xchngbk.d_jiffy       = 0;
      st_cvr_xchngbk.l_dwnld_flg   = 0;
      fn_cpy_ddr ( st_cvr_xchngbk.c_rout_crt );
      strcpy(st_cvr_xchngbk.c_xchng_rmrks,"*");
      strcpy(st_cvr_xchngbk.c_ordr_rfrnc, ptr_st_tradebook->c_ordr_rfrnc);

			/*** Ver 3.9 starts *** ****Commented in ver 4.2 ********
			l_ftd_ord_exe_qty = 0 ; 

			EXEC SQL
				SELECT  NVL(SUM(ftd_exctd_qty),0)
				INTO		:l_ftd_ord_exe_qty
				FROM		ftd_fo_trd_dtls
				WHERE		ftd_ordr_rfrnc = :st_cvr_xchngbk.c_ordr_rfrnc;

			if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
			{
				fn_errlog(c_ServiceName, "S31070", SQLMSG,  ptr_st_err_msg->c_err_msg);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
        free((char*) ptr_st_err_msg);
        tpfree((char*)ptr_fml_Obuf);
        free((char *) ptr_st_tradebook);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

    	if(DEBUG_MSG_LVL_0)
    	{
				fn_userlog( c_ServiceName, "l_ftd_ord_exe_qty: %ld",l_ftd_ord_exe_qty);
			}
			st_cvr_xchngbk.l_xchng_can_qty = l_ftd_ord_exe_qty;

			********* Commented in ver 4.2 Ends **********/

      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog( c_ServiceName, "Before Calling  SFO_OPT_ACK for Order Ref:%s:", ptr_st_tradebook->c_ordr_rfrnc);
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_entry_dt_tm:%s:", st_cvr_xchngbk.c_entry_dt_tm);
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.c_ack_tm:%s:", st_cvr_xchngbk.c_ack_tm);
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_mdfctn_cntrm:%ld:", st_cvr_xchngbk.l_mdfctn_cntr);
        fn_userlog( c_ServiceName, "st_cvr_xchngbk.l_ors_msg_typ:%ld:", st_cvr_xchngbk.l_ors_msg_typ);
      }
			/*** Ver 3.9 ends ***/

      i_returncode = fn_acall_svc ( c_ServiceName,
                      c_err_msg,
                      &st_cvr_xchngbk,
                      "vw_xchngbook",
                      sizeof ( st_cvr_xchngbk ),
                      TPNOREPLY,
                      "SFO_FUT_ACK" );

      if ( i_returncode != 0 )
      {
        fn_errlog ( c_ServiceName, "S31075", LIBMSG, ptr_st_err_msg->c_err_msg );
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
      }
      tpreturn(TPSUCCESS, SUCC_BFR, NULL ,0, 0 );
    }
  }
  /*** Ver 3.8 Ends ***/
	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
	if ( i_trnsctn == -1 )
	{
  	fn_errlog ( c_ServiceName, "S31080", LIBMSG, ptr_st_err_msg->c_err_msg );
		strcpy ( ptr_st_err_msg->c_err_msg, c_err_msg );
		tpfree ( ( char * ) ptr_st_tradebook );
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}

	   /*************** Ver 3.6 starts ***********************/
    if(DEBUG_MSG_LVL_3)   /*** Ver 3.9 ***/ 
    {
			fn_userlog( c_ServiceName, "ptr_st_tradebook->c_prd_typ : %c", ptr_st_tradebook->c_prd_typ);
		}
	
	if(ptr_st_tradebook->c_prd_typ == SLTP_FUTUREPLUS)
	{
		MEMSET(c_sltp_ord_rfrnc);

		EXEC SQL			/***	Ver 4.7	***/
		  SELECT
			  FOD_SLTP_ORDR_RFRNC
		  INTO
			  :c_sltp_ord_rfrnc
		  FROM  FOD_FO_ORDR_DTLS
		  WHERE FOD_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc;
		if(SQLCODE !=0)
		{
		  fn_errlog ( c_ServiceName, "S31085", SQLMSG, ptr_st_err_msg->c_err_msg );
		  fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
		  tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
		}

    if(DEBUG_MSG_LVL_3)   /*** Ver 3.9 ***/ 
    {
			fn_userlog( c_ServiceName, "ptr_st_tradebook->c_ordr_rfrnc :%s:,c_sltp_ord_rfrnc = :%s:",ptr_st_tradebook->c_ordr_rfrnc , c_sltp_ord_rfrnc);
		}

		EXEC  SQL
		SELECT  FOD_ORDR_RFRNC,
			FOD_SLTP_ORDR_RFRNC
		INTO    :c_ordr_rfrnc_lck,
			:c_sltp_ord_rfrnc_lck
		FROM    FOD_FO_ORDR_DTLS
		WHERE   FOD_ORDR_RFRNC in (:ptr_st_tradebook->c_ordr_rfrnc ,:c_sltp_ord_rfrnc)
		FOR   UPDATE OF FOD_ORDR_RFRNC NOWAIT;
		if ( SQLCODE != 0)
		{
		  if (SQLCODE == -54)
		  {
			fn_userlog( c_ServiceName, "Resource busy and acquire with NOWAIT specified or timeout expired");
		  }
		  fn_errlog ( c_ServiceName, "S31090", SQLMSG, ptr_st_err_msg->c_err_msg );
		  fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}
		else
		{
    	if(DEBUG_MSG_LVL_3)  /*** Ver 3.9 ***/ 
    	{
		  	fn_userlog( c_ServiceName, "Sucessfully acquired FOR UPDATE NOWAIT on :%s: and :%s:",ptr_st_tradebook->c_ordr_rfrnc ,c_sltp_ord_rfrnc);
			}
		}
    if(DEBUG_MSG_LVL_3)    /*** Ver 3.9 ***/ 
    {
			fn_userlog( c_ServiceName, "After NOWAIT on :%s: and :%s:",ptr_st_tradebook->c_ordr_rfrnc ,c_sltp_ord_rfrnc);
		}
	}
  /*************** Ver 3.6 Ends ***********************/
  else /*** Else condition added in Ver 3.8 ***/
  {
    if(DEBUG_MSG_LVL_3)    /*** Ver 3.9 ***/ 
    {
        fn_userlog( c_ServiceName, "ptr_st_tradebook->c_ordr_rfrnc :%s:",ptr_st_tradebook->c_ordr_rfrnc);
		}
    /**** version 4.8 started ****/

   fn_userlog( c_ServiceName, "ptr_st_tradebook->c_ordr_rfrnc :%s:",ptr_st_tradebook->c_ordr_rfrnc ); 
   /**** Applying lock on the both orders of rollover with spread by finding the order reference of the other order than that of the current for which the service has been called, along with its expiry. Also by comparing the expires decide whether the current order has the minimum expiry ****/
  
    if( c_spl_flg == ROLLOVER_WITH_SPREAD )
    {   
         /** The order reference other than that of the current order reference of rollover with spread order is selected along with its expiry **/   
         EXEC SQL
         SELECT FSD_ORDR_RFRNC,FOD_EXPRY_DT
         INTO   :c_other_ordr_ref,:c_expry_date_nxt_ordr
         FROM   FSD_FO_SPRD_DTLS,FOD_FO_ORDR_DTLS
         WHERE  FSD_SPRD_RFRNC = ( SELECT FSD_SPRD_RFRNC
                                   FROM   FSD_FO_SPRD_DTLS
                                   WHERE  FSD_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc )
         AND    FSD_ORDR_RFRNC = FOD_ORDR_RFRNC
         AND    FSD_ORDR_RFRNC != :ptr_st_tradebook->c_ordr_rfrnc;

        if( SQLCODE != 0 )
        {
             fn_errlog ( c_ServiceName, "S31095", SQLMSG, ptr_st_err_msg->c_err_msg );
             fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
             tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
        }
        rtrim ( c_expry_date_nxt_ordr );
        rtrim (  ptr_st_tradebook->c_expry_dt );
 
        fn_userlog(c_ServiceName," 1. The another order ref is :%s: and expiry is :%s:",c_other_ordr_ref,c_expry_date_nxt_ordr);      
        fn_userlog(c_ServiceName," ptr_st_tradebook->c_expry_dt is :%s: ", ptr_st_tradebook->c_expry_dt); 
        /** The flag is set to 1 if the order for which the service is called has the source month  expiry **/
  
        EXEC SQL
        SELECT COUNT(1)
        INTO   :i_source_dest_flg
        FROM   DUAL
        WHERE  TO_DATE(:ptr_st_tradebook->c_expry_dt,'dd-Mon-yyyy') < TO_DATE(:c_expry_date_nxt_ordr,'dd-Mon-yyyy');

        if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
        {
            fn_errlog ( c_ServiceName, "S31100", SQLMSG, ptr_st_err_msg->c_err_msg );
            fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
        }

        fn_userlog(c_ServiceName," 2. i_source_dest_flg is :%d:",i_source_dest_flg);
     /** Lock is applied on both the orders of rollover with spread **/
        EXEC SQL
             SELECT FOD_ORDR_RFRNC,
                    FOD_ORDR_RFRNC
             INTO   :c_ordr_rfrnc_lck,
                    :c_ordr_rfrnc_lck
             FROM   FOD_FO_ORDR_DTLS
             WHERE  FOD_ORDR_RFRNC IN(:ptr_st_tradebook->c_ordr_rfrnc,:c_other_ordr_ref)
             FOR UPDATE OF FOD_ORDR_RFRNC NOWAIT;
        
        if( SQLCODE != 0 )
        {
            if (SQLCODE == -54)
            {
               fn_userlog( c_ServiceName, "Resource busy and acquire with NOWAIT specified or timeout expired");
               fn_errlog ( c_ServiceName, "S31105", SQLMSG, ptr_st_err_msg->c_err_msg );
               fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
               tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
            }
        }
        else
        {
             fn_userlog( c_ServiceName, "Sucessfully acquired FOR UPDATE NOWAIT on :%s: and :%s:",ptr_st_tradebook->c_ordr_rfrnc,c_other_ordr_ref);
        }
    } /**** version 4.8 ended ****/
    else
    {
            EXEC  SQL
            SELECT  FOD_ORDR_RFRNC
            INTO    :c_ordr_rfrnc_core
            FROM    FOD_FO_ORDR_DTLS
            WHERE   FOD_ORDR_RFRNC =  :ptr_st_tradebook->c_ordr_rfrnc
            FOR     UPDATE OF FOD_ORDR_RFRNC NOWAIT;

    if ( SQLCODE != 0)
    {
      if (SQLCODE == -54)
      {
      fn_userlog( c_ServiceName, "Resource busy and acquire with NOWAIT specified or timeout expired");
      }
      fn_errlog ( c_ServiceName, "S31110", SQLMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 ); 
    }
    else
    {
    	if(DEBUG_MSG_LVL_0)   /**** Ver 3.9 ****/ 
    	{
      	fn_userlog( c_ServiceName, "Sucessfully acquired FOR UPDATE NOWAIT on :%s:",ptr_st_tradebook->c_ordr_rfrnc);
        }
    	}
		}
  }
  


	strcpy( st_orderbook.c_ordr_rfrnc, ptr_st_tradebook->c_ordr_rfrnc );
	st_orderbook.c_oprn_typ = FOR_UPDATE;
	
	i_ip_len = sizeof ( struct vw_orderbook );
	i_op_len = sizeof ( struct vw_orderbook );

  /*** Added for Order Routing ***/

	/**Commented under Ver 1.4	
	fn_cpy_ddr ( st_orderbook.c_rout_crt );
	**/

	strcpy( st_orderbook.c_rout_crt,"000" );	/**Ver 1.4 Default routing to get different grp than pack client **/
	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_orderbook,
                              &st_orderbook,
                              "vw_orderbook",
                              "vw_orderbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_REF_TO_ORD" );

	if ( i_returncode != SUCC_BFR )
	{
  	fn_errlog ( c_ServiceName, "S31115", LIBMSG, ptr_st_err_msg->c_err_msg );
  	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
	}

	/****Ver 1.7 starts ****/

	EXEC SQL
	SELECT NVL(CLM_SPAN_ALLWD,'N'),
				 NVL(CLM_BSESPAN_ALLWD,'N')			/*** Ver 1.8 ***/
	INTO   :c_span_flg,
				 :c_bse_span_flg								/*** Ver 1.8 ***/
	FROM   CLM_CLNT_MSTR
	WHERE  CLM_MTCH_ACCNT = :st_orderbook.c_cln_mtch_accnt;
	if( (SQLCODE != 0) && (SQLCODE != NO_DATA_FOUND) )
	{
  	fn_errlog ( c_ServiceName, "S31120", SQLMSG, ptr_st_err_msg->c_err_msg );
  	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
	}

    if(DEBUG_MSG_LVL_3)   /*** Ver 3.9 ***/ 
    {
			fn_userlog(c_ServiceName,"CLM_SPAN_ALLWD Is :%c:",c_span_flg);
			fn_userlog(c_ServiceName,"CLM_BSESPAN_ALLWD Is :%c:",c_bse_span_flg);
			fn_userlog(c_ServiceName,"Exchange Code Is :%s:",st_orderbook.c_xchng_cd);
		}	


	/**if(c_span_flg == 'Y') ******** Ver 1.8 comment **/
	if( ( c_span_flg == 'Y' 		&& strcmp(st_orderbook.c_xchng_cd,"NFO") == 0 ) ||
			( c_span_flg == 'Z' 		&& strcmp(st_xchngbook.c_xchng_cd,"NFO")== 0 ) ||			/*** Ver 1.9 ***/
			( c_bse_span_flg == 'Y' && strcmp(st_orderbook.c_xchng_cd,"BFO")== 0 )
		)		/*** Ver 1.8 ***/
	{
		if (st_orderbook.c_prd_typ != 'P')	/*** Ver 2.2 if condition added ***/
		{
			fn_userlog(c_ServiceName,"CANNOT PROCESS SPAN TRADE IN NORMAL SERVICE");
			strcpy(ptr_st_err_msg->c_err_msg,"CANNOT PROCESS SPAN TRADE IN NORMAL SERVICE");
			fn_errlog ( c_ServiceName, "S31125", LIBMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}
	}

	/****Ver 1.7 ends ****/

	if(ptr_st_tradebook->c_prd_typ != SLTP_FUTUREPLUS)		/****Added in Ver 3.6 ****/
	{
		/*i_returncode = fn_lock_usr( c_ServiceName,  st_orderbook.c_cln_mtch_accnt ); Commneted in Ver 5.8*/
		i_returncode = fn_lock_fno( c_ServiceName,  st_orderbook.c_cln_mtch_accnt ); /* Added in Ver 5.8 */
		if ( i_returncode != 0 )
		{
			fn_errlog ( c_ServiceName, "S31130", LIBMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}
	}

	EXEC SQL
		SELECT	FTD_RMS_PRCSD_FLG,			/***	Ver 4.7	***/
            NVL(FTD_LST_ACT_REF,'0')          /*** Ver 5.2 ***/ /*** '*' changed to '0' in ver 5.3 ***/
		INTO		:ptr_st_tradebook->c_rms_prcsd_flg,
            :c_lst_act_ref          /*** Ver 5.2 ***/
		FROM		FTD_FO_TRD_DTLS
		WHERE		FTD_ORDR_RFRNC	=	:ptr_st_tradebook->c_ordr_rfrnc
		AND 		FTD_EBA_TRD_REF	=	:ptr_st_tradebook->c_trd_rfrnc;

	if ( SQLCODE != 0 )
	{
  	fn_errlog ( c_ServiceName, "S31135", SQLMSG, ptr_st_err_msg->c_err_msg );
  	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
	}

  rtrim(c_lst_act_ref);             /*** Ver 5.2 ***/

	if (( st_orderbook.c_ordr_stts  == QUEUED ) || ( ptr_st_tradebook->c_rms_prcsd_flg == 'P' ))
	{
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );

    /*** Ver 4.8 Starts Here ***/
    if( c_spl_flg == ROLLOVER_WITH_SPREAD )
    {
     
      fn_userlog(c_ServiceName," INside QUEUED ROLLOVER_WITH_SPREAD for :%s:",ptr_st_tradebook->c_ordr_rfrnc);
 
      i_returncode= fn_prcs_ack_spdrl(c_ServiceName,c_err_msg, ptr_st_tradebook->c_prd_typ,ptr_st_tradebook->c_ordr_rfrnc);

      if(i_returncode != 0)
      {
        fn_errlog ( c_ServiceName, "S31140", LIBMSG, ptr_st_err_msg->c_err_msg );
      }

      i_returncode= fn_prcs_trd_rollover(c_ServiceName,c_err_msg,ptr_st_tradebook->c_prd_typ,ptr_st_tradebook->c_ordr_rfrnc);

      if(i_returncode != 0)
      {
        fn_errlog ( c_ServiceName, "S31145", LIBMSG, ptr_st_err_msg->c_err_msg );
      }       


    } /*** Ver 4.8 Ends Here ***/
    else
    {
    /*** Ver 4.2 Starts Here ***/
      i_returncode= fn_prcs_ack(c_ServiceName,c_err_msg, ptr_st_tradebook->c_prd_typ,ptr_st_tradebook->c_ordr_rfrnc);

      if(i_returncode != 0)
      {
        fn_errlog ( c_ServiceName, "S31150", LIBMSG, ptr_st_err_msg->c_err_msg );
      }

      i_returncode= fn_prcs_trd(c_ServiceName,c_err_msg,ptr_st_tradebook->c_prd_typ,ptr_st_tradebook->c_ordr_rfrnc);

      if(i_returncode != 0)
      {
        fn_errlog ( c_ServiceName, "S31155", LIBMSG, ptr_st_err_msg->c_err_msg );
      }

    }
    /*** Ver 4.2 Ends Here ***/
		tpreturn(TPSUCCESS, SUCC_BFR, (char *)ptr_st_tradebook, 0, 0 );
	}

	/*** The trade confirmation should not be updated, if any ***/
	/*** outstanding mod/cancel order is pending							***/
	EXEC SQL
		SELECT FXB_RQST_TYP,			/***	Ver 4.7	***/
					 FXB_PLCD_STTS
		INTO	:st_xchngbook.c_req_typ,
					:st_xchngbook.c_plcd_stts
		FROM FXB_FO_XCHNG_BOOK
		WHERE FXB_ORDR_RFRNC = :st_orderbook.c_ordr_rfrnc
		AND FXB_MDFCTN_CNTR = :st_orderbook.l_mdfctn_cntr;

	if ( SQLCODE != 0 )
	{
  	fn_errlog ( c_ServiceName, "S31160", SQLMSG, ptr_st_err_msg->c_err_msg );
  	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
	}

	/*** Ver 2.0 starts ***/

  EXEC SQL
    SELECT FOD_SPL_FLAG,
           NVL(FOD_LST_ACT_REF,'0') /*** ver 5.3 ***/
    INTO  :c_spl_flg,
          :c_fod_last_act_no /*** ver 5.3  ***/
    FROM FOD_FO_ORDR_DTLS
    WHERE FOD_ORDR_RFRNC = :st_orderbook.c_ordr_rfrnc;

  if ( SQLCODE != 0 )
  {
		fn_errlog ( c_ServiceName, "S31165", SQLMSG, ptr_st_err_msg->c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  }

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Special flag is 1 :%c:", c_spl_flg );
  }

	st_pstn_actn.c_nkd_blkd_flg = 'N';      /***  Ver 2.3 ***/

  if (c_spl_flg ==  'R')
  {
    st_pstn_actn.c_nkd_blkd_flg = 'R';
  }
  else if ( c_spl_flg == ROLLOVER_WITH_SPREAD ) /** version 4.8 **/
  {
    st_pstn_actn.c_nkd_blkd_flg = ROLLOVER_WITH_SPREAD;
  } 
  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog ( c_ServiceName, "Special flag is :%c:", st_pstn_actn.c_nkd_blkd_flg );
  }

  /*** Ver 2.0 ends ***/

	if ( ( st_xchngbook.c_plcd_stts  == QUEUED ) || 
			 ( st_xchngbook.c_plcd_stts  == REQUESTED ) )
	{
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    /*** Ver 4.2 Starts Here ***/ 
    /**** Ver 4.8 Starts here ****/
    if( c_spl_flg == ROLLOVER_WITH_SPREAD )
    {
       i_returncode= fn_prcs_ack_spdrl(c_ServiceName,c_err_msg, ptr_st_tradebook->c_prd_typ,ptr_st_tradebook->c_ordr_rfrnc);

      if(i_returncode != 0)
      {
        fn_errlog ( c_ServiceName, "S31170", LIBMSG, ptr_st_err_msg->c_err_msg );
      }

    }  /*** Ver 4.8 Ends Here ***/
    else
    {
       i_returncode= fn_prcs_ack(c_ServiceName,c_err_msg, ptr_st_tradebook->c_prd_typ,ptr_st_tradebook->c_ordr_rfrnc);

      if(i_returncode != 0)
      {
        fn_errlog ( c_ServiceName, "S31175", LIBMSG, ptr_st_err_msg->c_err_msg );
      }
  
    }
    /*** Ver 4.2 Ends Here ***/
  	tpreturn(TPSUCCESS, SUCC_BFR, (char *)ptr_st_tradebook, 0, 0 );
	}

  strcpy(st_pstn_actn.c_user_id,"system");
  st_pstn_actn.l_session_id  = 0;
	strcpy( st_pstn_actn.c_cln_mtch_accnt , ptr_st_tradebook->c_cln_mtch_accnt );
	st_pstn_actn.l_eba_cntrct_id = ptr_st_tradebook->l_eba_cntrct_id;
	strcpy( st_pstn_actn.c_xchng_cd , ptr_st_tradebook->c_xchng_cd );
	st_pstn_actn.c_prd_typ = ptr_st_tradebook->c_prd_typ;
	strcpy( st_pstn_actn.c_undrlyng , ptr_st_tradebook->c_undrlyng );
	strcpy( st_pstn_actn.c_expry_dt , ptr_st_tradebook->c_expry_dt );
	st_pstn_actn.c_exrc_typ  = ptr_st_tradebook->c_exrc_typ;
	st_pstn_actn.c_opt_typ = ptr_st_tradebook->c_opt_typ;
	st_pstn_actn.l_strike_prc = ptr_st_tradebook->l_strike_prc;
	st_pstn_actn.c_ctgry_indstk = ptr_st_tradebook->c_ctgry_indstk;
	st_pstn_actn.l_ca_lvl  = ptr_st_tradebook->l_ca_lvl;
	st_pstn_actn.c_cntrct_tag  = '*';

	st_pstn_actn.l_actn_typ = ORS_TRD_CONF;
	st_pstn_actn.c_trnsctn_flw = ptr_st_tradebook->c_trd_flw;
	st_pstn_actn.l_orgnl_qty = st_orderbook.l_ord_tot_qty;
	st_pstn_actn.l_orgnl_rt = st_orderbook.l_ord_lmt_rt;
	st_pstn_actn.l_new_qty = 0;
	st_pstn_actn.l_new_rt = 0;
	st_pstn_actn.l_exec_qty = ptr_st_tradebook->l_exctd_qty;
	st_pstn_actn.l_exec_rt = ptr_st_tradebook->l_exctd_rt;
	st_pstn_actn.l_fresh_qty  = 0;
	st_pstn_actn.l_cover_qty  = 0;
	st_pstn_actn.d_add_mrgn_amt  = 0;
  st_pstn_actn.l_curr_rt = 0;

  sprintf(st_pstn_actn.c_ref_rmrks,"%s-T",ptr_st_tradebook->c_trd_rfrnc);
  rtrim(st_pstn_actn.c_ref_rmrks);

	/*** Ver 4.8 Starts Here ***/

	if(st_orderbook.c_spl_flg == ROLLOVER_WITH_SPREAD )
	{
		i_returncode = fn_upd_pos_rollover (c_ServiceName,st_pstn_actn,ptr_st_err_msg);

		if( i_returncode == -1 )
		{
			fn_errlog(c_ServiceName, "S31180", LIBMSG,  ptr_st_err_msg->c_err_msg);
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}	
	}
	/*** Ver 4.8 Ends Here ***/ 

	i_ip_len = sizeof ( struct vw_pstn_actn );
	i_op_len = sizeof ( struct vw_pstn_actn );

  /*** Added for Order Routing ***/
	fn_cpy_ddr ( st_pstn_actn.c_rout_crt );

	/*Ver 1.2 starts */

	if(DEBUG_MSG_LVL_3){
		fn_userlog ( c_ServiceName, "Prdct Typ recd:%c:", st_pstn_actn.c_prd_typ );
	}

	if(ptr_st_tradebook->c_prd_typ != SLTP_FUTUREPLUS )  /** ver 2.1 **/
	{
	if( st_pstn_actn.c_prd_typ == FUTURES )
  	strcpy(c_svc_name,"SFO_UPD_FUT_POS");
	else
	{
  	if ( st_pstn_actn.c_prd_typ == FUTURE_PLUS )
  		strcpy(c_svc_name,"SFO_UPD_FUT_PLS");
  	else
  	{
      strcpy( ptr_st_err_msg->c_err_msg, "Invalid Prdct Type" );
      fn_userlog ( c_ServiceName, "ERROR :%s:", ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
  	}
	}

	if(DEBUG_MSG_LVL_3){
		fn_userlog ( c_ServiceName, "calling service :%s:", c_svc_name );
	}

	/*Ver 1.2 ends */

	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_pstn_actn,
                              &st_pstn_actn,
                              "vw_pstn_actn",
                              "vw_pstn_actn",
                              i_ip_len,
                              i_op_len,
                              0,
                              c_svc_name );			/* Ver 1.2*/

	if ( i_returncode != SUCC_BFR )
	{
  	fn_errlog ( c_ServiceName, "S31185", LIBMSG, ptr_st_err_msg->c_err_msg );
  	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
	}


  if ( st_pstn_actn.c_mtm_flag == FOR_REMARKS_ENTRY )
  {
  	sprintf(c_imtm_remarks,
            "SQUAREOFF ORDER [%s] EXECUTED ,TRADE REF - [%s], QTY - [%ld]", 
		        ptr_st_tradebook->c_ordr_rfrnc, 
		        ptr_st_tradebook->c_trd_rfrnc,
		        ptr_st_tradebook->l_exctd_qty );

    i_returncode = fn_ins_rep_tbl ( c_ServiceName,
                                    c_err_msg,
                                    &st_pstn_actn,
                                    c_imtm_remarks );
    if ( i_returncode != 0 )
    {
      fn_errlog ( c_ServiceName, "S31190", LIBMSG, c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }
	}
	}/*ver 2.1 */


  /*************** DELIVERY MARGIN **********************************************/
 /** ver 5.5 starts ***/
  if( st_pstn_actn.c_prd_typ == FUTURES )
  {
      EXEC SQL
      SELECT  NVL(FTQ_SETLMNT_FLG,'C'),
              NVL(FTQ_LST_TRD_PRC,0)
      INTO    :c_setllmnt_flg,
              :d_ltp
      FROM    FTQ_FO_TRD_QT
      WHERE   FTQ_XCHNG_CD        = :st_pstn_actn.c_xchng_cd
      AND     FTQ_PRDCT_TYP       = :st_pstn_actn.c_prd_typ
      AND     FTQ_UNDRLYNG        = :st_pstn_actn.c_undrlyng
      AND     FTQ_INDSTK          = :st_pstn_actn.c_ctgry_indstk
      AND     FTQ_EXPRY_DT        = to_date( :st_pstn_actn.c_expry_dt,'dd-mon-yyyy' )
      AND     FTQ_EXER_TYP        = :st_pstn_actn.c_exrc_typ;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31195", LIBMSG, c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }

    if(DEBUG_MSG_LVL_3){
    fn_userlog ( c_ServiceName, "SUCHITAAA :%c:%lf:",c_setllmnt_flg,d_ltp );
    }
    if( c_setllmnt_flg == 'P' )
    {
        EXEC SQL
        SELECT ABS(FFP_OPNPSTN_QTY),
               NVL(FFP_DLVRY_OBLGAMT_BLCKD,0.0),
               FFP_OPNPSTN_FLW,
               abs(NVL(FFP_MTM_OPN_VAL,0)),
               NVL(FFP_DLVRY_QTY_BLCKD,0)
        INTO   :l_opnpos_qty,
               :d_existing_dlvry_mrgn_val,
               :c_ordr_flw,
               :d_opn_pos_val,
               :l_blocked_qty
        FROM   FFP_FO_FUTURES_PSTN
        WHERE  FFP_CLM_MTCH_ACCNT  = :st_pstn_actn.c_cln_mtch_accnt
        AND    FFP_XCHNG_CD        = :st_pstn_actn.c_xchng_cd
        AND    FFP_PRDCT_TYP       = :st_pstn_actn.c_prd_typ
        AND    FFP_EXER_TYP        = :st_pstn_actn.c_exrc_typ
        AND    FFP_UNDRLYNG        = :st_pstn_actn.c_undrlyng
        AND    FFP_EXPRY_DT        = :st_pstn_actn.c_expry_dt; 

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31200", LIBMSG, c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }
    if(DEBUG_MSG_LVL_3){
     fn_userlog ( c_ServiceName, "A :%ld:%lf:%c:%lf:%c: ",l_opnpos_qty,d_existing_dlvry_mrgn_val,c_ordr_flw,d_opn_pos_val,st_pstn_actn.c_trnsctn_flw );
    }
     if( st_pstn_actn.c_trnsctn_flw != c_ordr_flw ) /** square off order ***/
     {
     if( d_existing_dlvry_mrgn_val > 0)
     {
     d_wght_price = (double) (d_opn_pos_val / l_opnpos_qty);
     if(DEBUG_MSG_LVL_3){
     fn_userlog ( c_ServiceName, "SUCHITAAA :%lf: ltp :%lf:",d_wght_price,d_ltp);
     }
     if( d_wght_price > d_ltp  )
     {
         d_val = ( d_wght_price - d_ltp) * l_opnpos_qty;
     }
     else
     {
         d_val = 0.0;
     }
     if(DEBUG_MSG_LVL_3){
     fn_userlog ( c_ServiceName, "SUCHITAAA :%lf: d_val",d_val);
     }
     d_funds_to_be_rqrd = ( l_opnpos_qty * d_ltp )  + d_val;

     d_funds_to_release =d_existing_dlvry_mrgn_val - d_funds_to_be_rqrd;
     if(DEBUG_MSG_LVL_3){
     fn_userlog ( c_ServiceName, "d_funds_to_release :%lf d_funds_to_be_rqrd :%lf d_existing_dlvry_mrgn_val :%lf",d_funds_to_release,d_funds_to_be_rqrd,d_existing_dlvry_mrgn_val);
     }


    if( d_funds_to_release > 0 )
    {
      i_returncode = fn_upd_limits( c_ServiceName,
                                    &st_pstn_actn,
                                    ptr_st_err_msg,
                                    REL_PHYSICAL_DELIVERY_MARGIN,
                                    DEBIT_WITHOUT_LIMIT,
                                    d_funds_to_release,
                                    &d_balance_amt);
      if ( i_returncode != 0 )
      {
      fn_errlog ( c_ServiceName, "S31205", LIBMSG, c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
      }
   
        EXEC SQL
        UPDATE   FFP_FO_FUTURES_PSTN
         SET   FFP_DLVRY_OBLGAMT_BLCKD = NVL(FFP_DLVRY_OBLGAMT_BLCKD,0) - :d_funds_to_release
        WHERE  FFP_CLM_MTCH_ACCNT  = :st_pstn_actn.c_cln_mtch_accnt
        AND    FFP_XCHNG_CD        = :st_pstn_actn.c_xchng_cd
        AND    FFP_PRDCT_TYP       = :st_pstn_actn.c_prd_typ
        AND    FFP_EXER_TYP        = :st_pstn_actn.c_exrc_typ
        AND    FFP_UNDRLYNG        = :st_pstn_actn.c_undrlyng
        AND    FFP_EXPRY_DT        = :st_pstn_actn.c_expry_dt;

    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31210", LIBMSG, c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }
    }
   }
   else if( l_blocked_qty > 0 )
   {
      if(DEBUG_MSG_LVL_3){
      fn_userlog ( c_ServiceName, "Suchita :%ld: %ld: l_blocked_qty l_opnpos_qty",l_blocked_qty,l_opnpos_qty);
      }

      l_qty_to_unblock = l_blocked_qty - l_opnpos_qty;

      if(DEBUG_MSG_LVL_3){
      fn_userlog ( c_ServiceName, "Suchita :%ld: l_qty_to_unblock ",l_qty_to_unblock);
      }

      if( l_qty_to_unblock > 0 )
      {
      i_return_cd =  fn_call_dp_dealloc(c_ServiceName,st_pstn_actn.c_cln_mtch_accnt,st_pstn_actn.c_undrlyng,l_qty_to_unblock);
      if(i_return_cd != 0)
      {   
      fn_errlog ( c_ServiceName, "S31215", LIBMSG, c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
      }

       EXEC SQL
       UPDATE   FFP_FO_FUTURES_PSTN
        SET    FFP_DLVRY_QTY_BLCKD = NVL(FFP_DLVRY_QTY_BLCKD,0) - :l_qty_to_unblock 
        WHERE  FFP_CLM_MTCH_ACCNT  = :st_pstn_actn.c_cln_mtch_accnt
        AND    FFP_XCHNG_CD        = :st_pstn_actn.c_xchng_cd
        AND    FFP_PRDCT_TYP       = :st_pstn_actn.c_prd_typ
        AND    FFP_EXER_TYP        = :st_pstn_actn.c_exrc_typ
        AND    FFP_UNDRLYNG        = :st_pstn_actn.c_undrlyng
        AND    FFP_EXPRY_DT        = :st_pstn_actn.c_expry_dt;

      if ( SQLCODE != 0 )
      {
       fn_errlog ( c_ServiceName, "S31220", SQLMSG, c_err_msg );
       fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
      }
     }
   }


  if( l_qty_to_unblock > 0  || d_funds_to_release > 0 )
  {
  EXEC SQL
       UPDATE FDD_FO_DLVRYMODE_DTLS
          SET FDD_SHARES_BLCKD = NVL(FDD_SHARES_BLCKD,0) - :l_qty_to_unblock,
              FDD_DLVERY_AMT = NVL(FDD_DLVERY_AMT,0) - :d_funds_to_release
        WHERE  FDD_CLM_MTCH_ACCNT  = :st_pstn_actn.c_cln_mtch_accnt
        AND    FDD_XCHNG_CD        = :st_pstn_actn.c_xchng_cd
        AND    FDD_PRDCT_TYP       = :st_pstn_actn.c_prd_typ
        AND    FDD_OPT_TYP         = :st_pstn_actn.c_opt_typ
        AND    FDD_EXER_TYP        = :st_pstn_actn.c_exrc_typ
        AND    FDD_UNDRLYNG        = :st_pstn_actn.c_undrlyng
        AND    FDD_EXPRY_DT        = :st_pstn_actn.c_expry_dt
        AND    FDD_STRK_PRC        = :st_pstn_actn.l_strike_prc;
    if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31225", SQLMSG, c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }
   }
   }
  }
 }
 /*** ver 5.5 ends ***/
  /**** version 4.8 started ****/ 
  fn_userlog( c_ServiceName," 3. st_orderbook.c_prd_typ :%c: and st_orderbook.c_spl_flg :%c:",st_orderbook.c_prd_typ,st_orderbook.c_spl_flg );

  if ( st_orderbook.c_prd_typ == 'F' && st_orderbook.c_spl_flg == ROLLOVER_WITH_SPREAD )
  {

   EXEC SQL
        SELECT FOD_ORDR_TOT_QTY-FOD_EXEC_QTY-FOD_CNCL_QTY
        INTO   :l_actual_ordr_tot_qty
        FROM   FOD_FO_ORDR_DTLS
        WHERE  FOD_ORDR_RFRNC = :st_orderbook.c_ordr_rfrnc;

     if( SQLCODE != 0 )
     {
           fn_errlog ( c_ServiceName, "S31230", LIBMSG, c_err_msg );
           fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
     }
 
     fn_userlog( c_ServiceName," 4. l_actual_ordr_tot_qty is :%ld: ",l_actual_ordr_tot_qty); 

     fn_userlog( c_ServiceName," 5. ptr_st_tradebook->l_exctd_qty is :%ld:",ptr_st_tradebook->l_exctd_qty );

     fn_userlog( c_ServiceName," 6. l_sroll_diff_amt is  :%ld:",l_sroll_diff_amt );

     fn_userlog( c_ServiceName," *** l_sroll_lss_amt is :%ld: *** ", l_sroll_lss_amt );
    
     l_exec_qty_rws = ptr_st_tradebook->l_exctd_qty;

     fn_userlog( c_ServiceName,"RWS l_exec_qty_rws :%ld:",l_exec_qty_rws);
 
     if( i_source_dest_flg == 1 )
     {
           strcpy( c_narration_id , REL_ROMARG_ORDTRD_ACCPT);
           
           d_diff_mrgn_amt =  ((double)l_sroll_diff_amt * l_exec_qty_rws) / l_actual_ordr_tot_qty;
           /***
           d_diff_mrgn_amt = (double)l_diff_mrgn;
           ***/
           l_diff_mrgn = (long)d_diff_mrgn_amt;
           fn_userlog( c_ServiceName,"RWS MARGIN LOGIC l_diff_mrgn :%ld:",l_diff_mrgn);
 
           fn_userlog( c_ServiceName," 7. d_diff_mrgn_amt :%lf:",d_diff_mrgn_amt);

           fn_userlog( c_ServiceName,"l_exec_qty_rws :%ld:",l_exec_qty_rws);

           d_diff_lss_amt = ((double)l_sroll_lss_amt * l_exec_qty_rws) / l_actual_ordr_tot_qty; 
           /***
           d_diff_lss_amt = (double)l_diff_lss;
           ***/ 
           l_diff_lss = (long)d_diff_lss_amt; 
           fn_userlog( c_ServiceName,"RWS MARGIN LOGIC l_diff_lss :%ld:",l_diff_lss);

           fn_userlog( c_ServiceName," d_diff_lss_amt :%lf: ",d_diff_lss_amt );                       

           if( d_diff_mrgn_amt > 0 )
           {
               d_balance_amt = 0.0;
               i_returncode = fn_upd_limits( c_ServiceName,
                                             &st_pstn_actn,
                                             ptr_st_err_msg,
                                             c_narration_id,
                                             DEBIT_WITHOUT_LIMIT,
                                             d_diff_mrgn_amt,
                                             &d_balance_amt );
               if ( i_returncode != 0 )
               {
                    fn_errlog ( c_ServiceName, "S31235", LIBMSG, c_err_msg );
                    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
                    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
               }

               if (DEBUG_MSG_LVL_3)
               {
                  fn_userlog(c_ServiceName,"Actual d_diff_mrgn_amt is  :%lf:",d_diff_mrgn_amt);
               }

               l_sroll_diff_amt = l_sroll_diff_amt - l_diff_mrgn;
            }

            strcpy( c_narration_id , REL_ROPNL_ORDTRD_ACCPT);

            if( d_diff_lss_amt > 0 )
            {
               d_balance_amt = 0.0;
               i_returncode = fn_upd_limits( c_ServiceName,
                                             &st_pstn_actn,
                                             ptr_st_err_msg,
                                             c_narration_id,
                                             DEBIT_WITHOUT_LIMIT,
                                             d_diff_lss_amt,
                                             &d_balance_amt );
               if ( i_returncode != 0 )
               {
                    fn_errlog ( c_ServiceName, "S31240", LIBMSG, c_err_msg );
                    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
                    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
               }

               if (DEBUG_MSG_LVL_3)
               {
                  fn_userlog(c_ServiceName,"Actual d_diff_lss_amt is  :%lf:",d_diff_lss_amt);
               }
              
               l_sroll_lss_amt  = l_sroll_lss_amt  - l_diff_lss;
            }
     }
     else
     {
           /*** The executed quantity of the order with near month expiry should greater than ( the executed quantity of the order with next month expiry plus already executed quantity of the order with next month expiry ) ***/ 
           fn_userlog( c_ServiceName,"RWS MARGIN LOGIC ELSE CONDITION ptr_st_tradebook->l_exctd_qty :%ld: and l_executed_qty is :%ld:",ptr_st_tradebook->l_exctd_qty,l_executed_qty ); 

           EXEC SQL
                SELECT COUNT(1) 
                INTO   :i_allow_trd_prcsing
                FROM   FOD_FO_ORDR_DTLS
                WHERE  FOD_ORDR_RFRNC = :c_other_ordr_ref
                AND    FOD_EXEC_QTY >= :l_exec_qty_rws + :l_executed_qty;

            if( SQLCODE != 0)
            {
                fn_errlog ( c_ServiceName, "S31245", SQLMSG, ptr_st_err_msg->c_err_msg );
                fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
                tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
            }

           fn_userlog( c_ServiceName," 8. i_allow_trd_prcsing :%ld:",i_allow_trd_prcsing);

           if( i_allow_trd_prcsing == 1 )
           {
                         fn_userlog(c_ServiceName,"DESTINATION MONTH TRADE PROCESSING ALLOWED");
           }
           else
           {
                         fn_userlog(c_ServiceName,"Trade processing not allowed for rollover with spread order");
                         fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
                         fn_errlog(c_ServiceName, "S31250", LIBMSG,  ptr_st_err_msg->c_err_msg);
                         tpreturn(TPSUCCESS, SUCC_BFR, NULL ,0, 0 );
           }
       }

       /**** 
       l_sroll_diff_amt = l_sroll_diff_amt - l_diff_mrgn;
       l_sroll_lss_amt  = l_sroll_lss_amt  - l_diff_lss;
       *****/

 
       fn_userlog(c_ServiceName," 9.MRGN LOGIC UPDATION VALS l_sroll_diff_amt :%ld: l_sroll_lss_amt :%ld:",l_sroll_diff_amt,l_sroll_lss_amt);  
           
       EXEC SQL 
            UPDATE FOD_FO_ORDR_DTLS
            SET    FOD_SROLL_DIFF_AMT = :l_sroll_diff_amt,FOD_SROLL_LSS_AMT = :l_sroll_lss_amt
            WHERE  FOD_ORDR_RFRNC = :st_orderbook.c_ordr_rfrnc; 

       if( SQLCODE != 0 )
       {
            fn_errlog ( c_ServiceName, "S31255", SQLMSG, ptr_st_err_msg->c_err_msg );
            fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
       } 
  } 

  /**** version 4.8 ended ****/

	/*********** Ver 2.1 Starts ********************/

	
	if(ptr_st_tradebook->c_prd_typ == SLTP_FUTUREPLUS )	
	{	
		/*** Commented in Ver 3.2  ***
		EXEC SQL
			SELECT
						fod_sltp_ordr_rfrnc,
						nvl(fod_amt_blckd,0),
						nvl(fod_lss_amt_blckd,0),
						nvl(fod_fc_flag,'*'),
						nvl(FOD_LMT_RT,0),
						nvl(FOD_ORDR_TOT_QTY,0),
						nvl(FOD_EXEC_QTY,0),
						FOD_ORDR_FLW
			INTO
						:c_sltp_ord_rfrnc,
						:d_amt_blkd,
						:d_lss_amt_blkd,
						:c_fc_flg,
						:d_ord_lmt_rt,
						:l_tot_ord_qty,
						:l_ord_exe_qty,
						:c_ord_flw
			FROM  fod_fo_ordr_dtls
			WHERE fod_ordr_rfrnc = :st_orderbook.c_ordr_rfrnc; 

		if ( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "S31260", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}
		*Get the current margin percentage from the database *
    EXEC SQL
     SELECT     FMM_SLTP_PRCNT
     INTO       :d_fmm_sltp_prcnt
     FROM       FMM_FO_MRGN_MSTR
     WHERE      FMM_XCHNG_CD = :st_orderbook.c_xchng_cd
     AND        FMM_PRDCT_TYP = 'F'
     AND        FMM_UNDRLYNG = :st_orderbook.c_undrlyng
		 AND				FMM_UNDRLYNG_BSKT_ID =(	SELECT  FCB_UNDRLYNG_BSKT_ID
																				FROM    FCB_FO_CLN_BSKT_ALLTD
																				WHERE   FCB_CLN_LVL =	(	SELECT CLM_CLNT_LVL
																																FROM    CLM_CLNT_MSTR
													                                      WHERE   CLM_MTCH_ACCNT =:ptr_st_tradebook->c_cln_mtch_accnt)
																			);	

	
	if ( SQLCODE != 0 )
  {
    fn_errlog ( c_ServiceName, "S31265", SQLMSG, ptr_st_err_msg->c_err_msg );
    fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  }

	if (DEBUG_MSG_LVL_3)
  {
    fn_userlog(c_ServiceName,"SLTP order Ref :%s:",c_sltp_ord_rfrnc);
    fn_userlog(c_ServiceName,"Amount blocked  :%lf:",d_amt_blkd);
    fn_userlog(c_ServiceName,"Loss amount :%lf:",d_lss_amt_blkd);
    fn_userlog(c_ServiceName," Fresh/Cover flag :%c:",c_fc_flg);
    fn_userlog(c_ServiceName,"Limit Rate :%lf:",d_ord_lmt_rt);
    fn_userlog(c_ServiceName,"Order qty :%ld:",l_tot_ord_qty);
    fn_userlog(c_ServiceName,"Executed Qty :%ld:",l_ord_exe_qty);
    fn_userlog(c_ServiceName,"Order flow :%c:",c_ord_flw);
  }
		
	if(c_fc_flg == 'F')
	{

		*** Calculate margin n loss on total executed qty ***
		
		EXEC SQL
				 SELECT FOD_LMT_RT
				 INTO	  :d_cvr_lmt_rt
				 FROM 	FOD_FO_ORDR_DTLS
				 WHERE	FOD_ORDR_RFRNC =	:c_sltp_ord_rfrnc;
	
		 if ( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "S31270", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}
		
		EXEC SQL
				 SELECT SUM( (FTD_EXCTD_QTY * FTD_EXCTD_RT) * (:d_fmm_sltp_prcnt/100.0) ),
								decode( :c_ord_flw, 'B',SUM( FTD_EXCTD_QTY * (FTD_EXCTD_RT - :d_cvr_lmt_rt)),
																		'S', SUM( FTD_EXCTD_QTY * (:d_cvr_lmt_rt - FTD_EXCTD_RT)) ),
								SUM(FTD_EXCTD_QTY) 
					INTO 	:d_exe_mrgn_amt,
								:d_exe_lss_amt,
								:l_exe_qty
					FROM  FTD_FO_TRD_DTLS
					WHERE	FTD_ORDR_RFRNC = :st_orderbook.c_ordr_rfrnc; 

		if ( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "S31275", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}

		l_rmn_qty = l_tot_ord_qty - l_exe_qty;

		if (DEBUG_MSG_LVL_3)	*** Ver 2.4 ***
		{
			fn_userlog ( c_ServiceName, "l_rmn_qty = :%ld:", l_rmn_qty);
		}

		if (l_rmn_qty >= 0)		*** if loop added in Ver 2.4 to skip margin calculation in case of excess qty ***
		{
	
		d_new_mrgn_amt = (double) d_exe_mrgn_amt + ( (l_rmn_qty * d_ord_lmt_rt) * (d_fmm_sltp_prcnt /100.0) );

		if (c_ord_flw == 'B')
		{
			d_new_lss_amt = (double)  d_exe_lss_amt + ( l_rmn_qty * (d_ord_lmt_rt - d_cvr_lmt_rt) );
		}
		else if (c_ord_flw == 'S')
		{
			d_new_lss_amt = (double) d_exe_lss_amt + ( l_rmn_qty * (d_ord_lmt_rt - d_cvr_lmt_rt) * -1 );
		}
		
		d_diff_mrgn_amt = d_amt_blkd - d_new_mrgn_amt;
		
		d_diff_lss_amt 	= d_lss_amt_blkd - d_new_lss_amt;
	
		d_diff_mrgn_amt = (long long)d_diff_mrgn_amt;

		d_diff_lss_amt	= (long long)d_diff_lss_amt;
	
		if (DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName," l_rmn_qty :%ld:",l_rmn_qty);
      fn_userlog(c_ServiceName,"d_exe_mrgn_amt :%lf:",d_exe_mrgn_amt);
      fn_userlog(c_ServiceName,"d_exe_lss_amt :%lf:",d_exe_lss_amt);
      fn_userlog(c_ServiceName,"d_cvr_lmt_rt :%lf:",d_cvr_lmt_rt);
      fn_userlog(c_ServiceName,"d_new_mrgn_amt :%lf:",d_new_mrgn_amt);
      fn_userlog(c_ServiceName,"d_new_lss_amt:%lf:",d_new_lss_amt);
      fn_userlog(c_ServiceName,"d_diff_mrgn_amt :%lf:",d_diff_mrgn_amt);
      fn_userlog(c_ServiceName,"d_diff_lss_amt :%lf:",d_diff_lss_amt);
    }

		if (DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Block or Release diff margin :%lf:",d_diff_mrgn_amt);
		}

		strcpy( c_narration_id , ON_TRADE_EXECUTION);

		if( d_diff_mrgn_amt != 0 )
		{
			d_balance_amt = 0.0;

			i_returncode = fn_upd_limits( c_ServiceName,
																			&st_pstn_actn,
																			ptr_st_err_msg,
																			c_narration_id, 
																			DEBIT_WITHOUT_LIMIT,
																			d_diff_mrgn_amt,
																			&d_balance_amt);
			if ( i_returncode != 0 )
			{
				fn_errlog ( c_ServiceName, "S31280", LIBMSG, c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
			}
			d_diff_mrgn_amt = d_diff_mrgn_amt - d_balance_amt;

			if (DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Actual d_diff_mrgn_amt is  :%lf:",d_diff_mrgn_amt);
			}
		}

		if (DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Block or release diff loss :%lf:",d_diff_lss_amt);
		}

		strcpy( c_narration_id , ON_TRADE_EXECUTION);
		if( d_diff_lss_amt != 0)
		{
			d_balance_amt = 0.0;

			i_returncode = fn_upd_limits( c_ServiceName,
																			&st_pstn_actn,
																			ptr_st_err_msg,
																			c_narration_id,
																			DEBIT_WITHOUT_LIMIT,
																			d_diff_lss_amt,
																			&d_balance_amt);
		
			if ( i_returncode != 0 )
			{
				fn_errlog ( c_ServiceName, "S31285", LIBMSG, c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
			}	
			d_diff_lss_amt = d_diff_lss_amt - d_balance_amt;

			if (DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Actual d_diff_lss_amt is  :%lf:",d_diff_lss_amt);
			}
		}
		
		if (DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"Update new margin & loss");
		}

		EXEC SQL
				 UPDATE FOD_FO_ORDR_DTLS
				 SET    FOD_AMT_BLCKD = :d_amt_blkd - :d_diff_mrgn_amt,
								FOD_LSS_AMT_BLCKD = :d_lss_amt_blkd - :d_diff_lss_amt
				 WHERE  FOD_ORDR_RFRNC = :st_orderbook.c_ordr_rfrnc; 
		
		if ( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "S31290", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}
	 }	*** Ver 2.4 ***
	}
	else if(c_fc_flg == 'C')
	{
		l_tot_ord_qty = 0;
		l_rmn_qty = 0;

		EXEC SQL
			SELECT
						fod_ordr_stts,
						nvl(fod_amt_blckd,0),
						nvl(fod_lss_amt_blckd,0),
						fod_ordr_flw,
						nvl(FOD_ORDR_TOT_QTY - (FOD_EXEC_QTY + FOD_CNCL_QTY + FOD_EXPRD_QTY),0)		*** Changed on 07Jun2013 ***
			INTO
						:c_ord_stts,
						:d_amt_blkd,
						:d_lss_amt_blkd,
						:c_ord_flw,
						:l_tot_ord_qty
			FROM  fod_fo_ordr_dtls
			WHERE fod_ordr_rfrnc = :c_sltp_ord_rfrnc; 

		if ( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "S31295", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}

		*** Ver 2.6 starts *** Commented in Ver 2.7 ***
		i_exec_rng = 0;

		if ( c_ord_stts == 'C' )
		{
			EXEC SQL
				SELECT 1
				INTO   :i_exec_rng
				FROM   FXB_FO_XCHNG_BOOK
				WHERE  FXB_ORDR_RFRNC		= :c_sltp_ord_rfrnc
				AND		 FXB_XCHNG_RMRKS  like '%The Price is out of the current execution range%'
				AND    FXB_MDFCTN_CNTR = '99';

			if ( SQLCODE != 0  && SQLCODE != NO_DATA_FOUND )
			{
				fn_errlog ( c_ServiceName, "S31300", SQLMSG, ptr_st_err_msg->c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
			}
		}
		if (i_exec_rng != 1)
		{
		*** Ver 2.6 ends ***

		*** start in Ver 2.7 ***
		if ( c_ord_stts != 'C' && c_ord_stts != 'J' && c_ord_stts != 'X' )
		{
		*** end in Ver 2.7 ***

		if ( c_ord_stts != 'E' && c_ord_stts !='P' && c_ord_stts !='B' &&  c_ord_stts != 'D')
		{
			fn_errlog ( c_ServiceName, "S31305","Fresh order is not executed", ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}
		
	 EXEC SQL
		 SELECT NVL(SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),0) ,
						NVL(SUM(FTD_EXCTD_QTY),0)
		 INTO   :d_exe_val,
						:l_exe_qty
		 FROM   FTD_FO_TRD_DTLS
		 WHERE  FTD_ORDR_RFRNC = :c_sltp_ord_rfrnc;

	 if ( SQLCODE != 0 )
	 {
		fn_errlog ( c_ServiceName, "S31310", SQLMSG, ptr_st_err_msg->c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
	 }

	EXEC SQL
		SELECT nvl(FOD_LMT_RT,0)
		INTO   :d_ord_lmt_rt
		FROM   FOD_FO_ORDR_DTLS
		WHERE  FOD_ORDR_RFRNC = (
															SELECT min(FOD_ORDR_RFRNC)
															FROM	 FOD_FO_ORDR_DTLS 
															WHERE  FOD_SLTP_ORDR_RFRNC  = :c_sltp_ord_rfrnc
															AND    FOD_FC_FLAG = 'C'
														);
  
	 if ( SQLCODE != 0 )
  {
		fn_errlog ( c_ServiceName, "S31315", SQLMSG, ptr_st_err_msg->c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  }

	 if (DEBUG_MSG_LVL_3)
	 {
		fn_userlog ( c_ServiceName, "Limit Rate during Order placement of ", d_ord_lmt_rt);
	 }

	 EXEC SQL
		SELECT NVL(SUM(FTD_EXCTD_QTY),0)
     INTO   :l_cv_exe_qty
     FROM   FTD_FO_TRD_DTLS
     WHERE  FTD_ORDR_RFRNC in ( select FOD_ORDR_RFRNC 
																from FOD_FO_ORDR_DTLS 
																where FOD_SLTP_ORDR_RFRNC = :c_sltp_ord_rfrnc);

   if ( SQLCODE != 0 )
   {
		fn_errlog ( c_ServiceName, "S31320", SQLMSG, ptr_st_err_msg->c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
   }

	 d_avg_prc = 0;
	
	 if (l_exe_qty != 0)
	 {
			d_avg_prc =  (double)  d_exe_val / l_exe_qty;
	 }

   l_rmn_qty = (l_exe_qty + l_tot_ord_qty) - l_cv_exe_qty ;			*** Changed on 07Jun2013 ***

	 if (DEBUG_MSG_LVL_3)	*** Ver 2.4 ***
	 {
		fn_userlog ( c_ServiceName, "l_rmn_qty = :%ld:", l_rmn_qty);
	 }

	 if (l_rmn_qty >= 0)		*** Ver 2.4 .. skip margin calculation in case of excess qty***
	 {
	 d_new_mrgn_amt = (double) ( (l_rmn_qty * d_avg_prc) *  (d_fmm_sltp_prcnt / 100.0) );
	 
	 if (c_ord_flw == 'B')
	 {
	 	 d_new_lss_amt	= (double)  l_rmn_qty *(d_avg_prc - d_ord_lmt_rt);	
	 }
	 else if (c_ord_flw == 'S')
	 {
		d_new_lss_amt	= (double) l_rmn_qty *(d_avg_prc - d_ord_lmt_rt) * -1;	
	 }

   d_diff_mrgn_amt = d_amt_blkd - d_new_mrgn_amt;

	 d_diff_lss_amt = d_lss_amt_blkd - d_new_lss_amt;

	 d_diff_mrgn_amt = (long long)d_diff_mrgn_amt;

	 d_diff_lss_amt = (long long)d_diff_lss_amt;

		*** 1.5.7. Calculate the  Profit / Loss on current executed quantity ***
		if (c_ord_flw == 'B')
		{
			d_obli_pl = (double)  ptr_st_tradebook->l_exctd_qty * ( d_avg_prc - ptr_st_tradebook->l_exctd_rt );
		}
	  else if (c_ord_flw == 'S')
		{
			d_obli_pl = (double)  ptr_st_tradebook->l_exctd_qty * ( d_avg_prc - ptr_st_tradebook->l_exctd_rt ) * -1;
		}
		
		d_obli_pl = (long long)d_obli_pl;

		if( DEBUG_MSG_LVL_3 )
    {
      fn_userlog(c_ServiceName,"d_avg_prc :%lf:",d_avg_prc);
      fn_userlog(c_ServiceName," l_rmn_qty :%ld:",l_rmn_qty);
      fn_userlog(c_ServiceName,"d_new_mrgn_amt :%lf:",d_new_mrgn_amt);
      fn_userlog(c_ServiceName,"d_new_lss_amt:%lf:",d_new_lss_amt);
      fn_userlog(c_ServiceName,"d_diff_mrgn_amt :%lf:",d_diff_mrgn_amt);
      fn_userlog(c_ServiceName,"d_diff_lss_amt :%lf:",d_diff_lss_amt);
      fn_userlog(c_ServiceName,"d_amt_blkd :%lf:",d_amt_blkd);
      fn_userlog(c_ServiceName,"d_lss_amt_blkd :%lf:",d_lss_amt_blkd);
      fn_userlog(c_ServiceName,"Obligation profit loss :%lf:",d_obli_pl);
   		fn_userlog(c_ServiceName,"Fresh order Qty l_tot_ord_qty :%ld:",l_tot_ord_qty);
      fn_userlog(c_ServiceName,"Cover Order executed qty :%ld:",l_cv_exe_qty);
			fn_userlog(c_ServiceName,"Fresh Executed Qty :%ld:",l_exe_qty); 
    }	
		strcpy( c_narration_id , PROFIT_LOSS_ON_COVER_LEG);

		if( d_obli_pl != 0)
		{
			 ***** NRI - TDS Starts under Ver 2.9 *****
       if(strncmp(st_pstn_actn.c_cln_mtch_accnt, "751", 3) == 0)
       {
					strcpy(c_reason_cd,"Profit Loss on Cover Leg");

					if(DEBUG_MSG_LVL_0)
					{
        		fn_userlog( c_ServiceName, "Calling fn_tds for COVER_LEG :%s:",c_reason_cd );
					}

					strcpy ( c_tmp_rmrks, st_pstn_actn.c_ref_rmrks );

					sprintf ( st_pstn_actn.c_ref_rmrks,"FUT-%s-%s",
		                st_pstn_actn.c_undrlyng,
	                  st_pstn_actn.c_expry_dt);

					i_returncode = fn_tds( c_ServiceName,
                                   &st_pstn_actn,
                                   ptr_st_err_msg,
                                   TDS_NRI,
                                   c_reason_cd,
                                   DEBIT_WITHOUT_LIMIT,
                                   d_obli_pl * -1,
                                   &d_balance_amt);

					if ( i_returncode != 0 )
					{
						fn_errlog ( c_ServiceName, "S31325", LIBMSG, c_err_msg );
						fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
					}
					strcpy ( st_pstn_actn.c_ref_rmrks , c_tmp_rmrks );
        }
			 ***** NRI - TDS ends under Ver 2.9 *****

			i_returncode = fn_upd_limits( c_ServiceName,
																			&st_pstn_actn,
																			ptr_st_err_msg,
																			c_narration_id,
																			DEBIT_WITHOUT_LIMIT,
																			d_obli_pl * -1,
																			&d_balance_amt);
			if ( i_returncode != 0 )
			{
				fn_errlog ( c_ServiceName, "S31330", LIBMSG, c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
			}	
		}

		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName,"Block or Release diff margin :%lf:",d_diff_mrgn_amt);
		}

		strcpy( c_narration_id , ON_TRADE_EXECUTION);
		if( d_diff_mrgn_amt != 0 )
		{
			d_balance_amt = 0.0;

			i_returncode = fn_upd_limits( c_ServiceName,
																			&st_pstn_actn,
																			ptr_st_err_msg,
																			c_narration_id, 
																			DEBIT_TILL_LIMIT,
																			d_diff_mrgn_amt,
																			&d_balance_amt);

			if ( i_returncode != 0 )
			{
				fn_errlog ( c_ServiceName, "S31335", LIBMSG, c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
			}
			d_diff_mrgn_amt = d_diff_mrgn_amt - d_balance_amt;

			if( DEBUG_MSG_LVL_3 )
			{
				fn_userlog(c_ServiceName,"Actual diff margin :%lf:",d_diff_mrgn_amt);
			}
		}

		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName,"Block or release diff loss :%lf:",d_diff_lss_amt);
		}

		strcpy( c_narration_id , ON_TRADE_EXECUTION);
		if( d_diff_lss_amt != 0)
		{
			d_balance_amt = 0.0;

			i_returncode = fn_upd_limits( c_ServiceName,
																			&st_pstn_actn,
																			ptr_st_err_msg,
																			c_narration_id,
																			DEBIT_TILL_LIMIT,
																			d_diff_lss_amt,
																			&d_balance_amt);
				
			if ( i_returncode != 0 )
			{
				fn_errlog ( c_ServiceName, "S31340", LIBMSG, c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
			}	
			d_diff_lss_amt = d_diff_lss_amt - d_balance_amt;

			if( DEBUG_MSG_LVL_3 )
			{
				fn_userlog(c_ServiceName,"Actual diff profit loss :%lf:",d_diff_lss_amt);
			}
		}

		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName,"Update new margin & loss");
		}

		EXEC SQL
				 UPDATE FOD_FO_ORDR_DTLS
				 SET    FOD_AMT_BLCKD			= :d_amt_blkd - :d_diff_mrgn_amt,
								FOD_LSS_AMT_BLCKD = :d_lss_amt_blkd - :d_diff_lss_amt
				 WHERE  FOD_ORDR_RFRNC		= :c_sltp_ord_rfrnc; 
		
		if ( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "S31345", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}
	 }	*** Ver 2.4 ***
  } *** End of if condition Ver 2.6 ***
	}
	*** Commented in Ver 3.2 ends ***/

	/*** Ver 3.2 starts here ***/
	EXEC SQL
		SELECT
					FOD_SLTP_ORDR_RFRNC,			/*** Ver 4.7	***/
					NVL(FOD_FC_FLAG,'*')
		INTO
					:c_sltp_ord_rfrnc,
					:c_fc_flg
		FROM  FOD_FO_ORDR_DTLS
		WHERE FOD_ORDR_RFRNC = :st_orderbook.c_ordr_rfrnc;

	if ( SQLCODE != 0 )
	{
		fn_errlog ( c_ServiceName, "S31350", SQLMSG, ptr_st_err_msg->c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
	}
	
	/*** Getting Fresh order Details ***/
	EXEC SQL
		SELECT	
					FOD_ORDR_RFRNC,					/***	Ver 4.7	***/
					FOD_SLTP_ORDR_RFRNC,
					NVL(FOD_AMT_BLCKD,0),
					NVL(FOD_LSS_AMT_BLCKD,0),
					NVL(FOD_LMT_RT,0),
					FOD_ORDR_FLW
		INTO
					:c_frsh_ordr_rfrnc,
					:c_cvr_ordr_rfrnc,
					:d_amt_blkd,
					:d_lss_amt_blkd,
					:d_ord_lmt_rt,
					:c_ord_flw
		FROM  FOD_FO_ORDR_DTLS
		WHERE FOD_ORDR_RFRNC = DECODE(:c_fc_flg,'F',:st_orderbook.c_ordr_rfrnc,:c_sltp_ord_rfrnc);

	if ( SQLCODE != 0 )
	{
		fn_errlog ( c_ServiceName, "S31355", SQLMSG, ptr_st_err_msg->c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
	}

	/**Added in Ver 3.6 starts **/
	/*i_returncode = fn_lock_usr( c_ServiceName,  st_orderbook.c_cln_mtch_accnt ); Commented in Ver 5.8*/
  i_returncode = fn_lock_fno( c_ServiceName,  st_orderbook.c_cln_mtch_accnt ); /* Added in Ver 5.8 */
	if ( i_returncode != 0 )
	{
		fn_errlog ( c_ServiceName, "S31360", LIBMSG, ptr_st_err_msg->c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
	}
	/**Ver 3.6 ends**/


	if (c_fc_flg == 'F' || c_fc_flg == 'C' || c_fc_flg == 'T')	 /*** Ver 5.6 profit ordr  added ***/
	{
			/*** Getting Cover order Details ***/
			if (c_fc_flg == 'F')
			{
				EXEC SQL
					SELECT
								NVL(FOD_LMT_RT,0)			/***	Ver 4.7	***/
					INTO
								:d_cvr_lmt_rt
					FROM  FOD_FO_ORDR_DTLS
					WHERE FOD_ORDR_RFRNC = :c_cvr_ordr_rfrnc;
			}
			else if (c_fc_flg == 'C' || c_fc_flg == 'T')	/*** Ver 5.6 profit ordr  added ***/
			{
				EXEC SQL
					SELECT NVL(FOD_LMT_RT,0)			/***	Ver 4.7	***/
					INTO   :d_cvr_lmt_rt
					FROM   FOD_FO_ORDR_DTLS
					WHERE  FOD_ORDR_RFRNC = (
																		SELECT MIN(FOD_ORDR_RFRNC)
																		FROM	 FOD_FO_ORDR_DTLS 
																		WHERE  FOD_SLTP_ORDR_RFRNC  = :c_frsh_ordr_rfrnc
																		AND    FOD_FC_FLAG = :c_cvr_flg			/*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/
																	);
			
			}
			if ( SQLCODE != 0 )
			{
				fn_errlog ( c_ServiceName, "S31365", SQLMSG, ptr_st_err_msg->c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
			}

			
		/*** Margin calcluation ***/
		i_returncode =  fn_cal_mrgn_sltp(c_ServiceName,
																	c_frsh_ordr_rfrnc,
																	d_ord_lmt_rt,
																	d_cvr_lmt_rt,
																	&d_new_mrgn_amt,
																	&d_new_lss_amt,
			                            c_ref_rmrks,  /*** Ver 5.4 ***/
                                  &d_comp1_mrgn,/*** Ver 5.4 ***/
                                  &d_comp1_pl,  /*** Ver 5.4 ***/
                                  &d_xchng_amt, /*** Ver 5.4 ***/
																	c_err_msg);
		if ( i_returncode == -1 )
		{
			fn_errlog ( c_ServiceName, "S31370", LIBMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}

			d_diff_mrgn_amt = d_amt_blkd - d_new_mrgn_amt;
			
			d_diff_lss_amt 	= d_lss_amt_blkd - d_new_lss_amt;
		
			d_diff_mrgn_amt = (long long)d_diff_mrgn_amt;

			d_diff_lss_amt	= (long long)d_diff_lss_amt;
		
			if (DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Block or Release diff margin :%lf:",d_diff_mrgn_amt);
			}

			strcpy( c_narration_id , ON_TRADE_EXECUTION);

			if( d_diff_mrgn_amt != 0 )
			{
				d_balance_amt = 0.0;

				i_returncode = fn_upd_limits( c_ServiceName,
																				&st_pstn_actn,
																				ptr_st_err_msg,
																				c_narration_id, 
																				DEBIT_WITHOUT_LIMIT,
																				d_diff_mrgn_amt,
																				&d_balance_amt);
				if ( i_returncode != 0 )
				{
					fn_errlog ( c_ServiceName, "S31375", LIBMSG, c_err_msg );
					fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
				}
				d_diff_mrgn_amt = d_diff_mrgn_amt - d_balance_amt;

				if (DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"Actual d_diff_mrgn_amt is  :%lf:",d_diff_mrgn_amt);
				}
			}

			if (DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Block or release diff loss :%lf:",d_diff_lss_amt);
			}

			strcpy( c_narration_id , ON_TRADE_EXECUTION);
			if( d_diff_lss_amt != 0)
			{
				d_balance_amt = 0.0;

				/*** Ver 5.4 started ***/
        MEMSET(c_tmp_rmrks);    
        strcpy ( c_tmp_rmrks, st_pstn_actn.c_ref_rmrks ); 
        sprintf(st_pstn_actn.c_ref_rmrks,"%s%s",c_ref_rmrks,c_tmp_rmrks);  
				/*** Ver 5.4 ends ***/

				i_returncode = fn_upd_limits( c_ServiceName,
																				&st_pstn_actn,
																				ptr_st_err_msg,
																				c_narration_id,
																				DEBIT_WITHOUT_LIMIT,
																				d_diff_lss_amt,
																				&d_balance_amt);
			
				if ( i_returncode != 0 )
				{
					fn_errlog ( c_ServiceName, "S31380", LIBMSG, c_err_msg );
					fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
				}	
				d_diff_lss_amt = d_diff_lss_amt - d_balance_amt;

        strcpy ( st_pstn_actn.c_ref_rmrks, c_tmp_rmrks);    /**** Ver 5.4 ***/
        MEMSET(c_tmp_rmrks);																/**** Ver 5.4 ***/

				if (DEBUG_MSG_LVL_3)
				{
					fn_userlog(c_ServiceName,"Actual d_diff_lss_amt is  :%lf:",d_diff_lss_amt);
				}
			}
			
			if (DEBUG_MSG_LVL_3)
			{
				fn_userlog(c_ServiceName,"Update new margin & loss");
			}

			EXEC SQL
					 UPDATE FOD_FO_ORDR_DTLS
					 SET    FOD_AMT_BLCKD = :d_amt_blkd - :d_diff_mrgn_amt,
									FOD_LSS_AMT_BLCKD = :d_lss_amt_blkd - :d_diff_lss_amt,
									FOD_SLTP_MRGN = :d_comp1_mrgn,			/*** Ver 5.4 ***/	
                  FOD_SLTP_PL   = :d_comp1_pl,				/*** Ver 5.4 ***/	 
                  FOD_SLTP_SEBI_MRGN = :d_xchng_amt		/*** Ver 5.4 ***/
					 WHERE  FOD_ORDR_RFRNC = :c_frsh_ordr_rfrnc; 
			
			if ( SQLCODE != 0 )
			{
				fn_errlog ( c_ServiceName, "S31385", SQLMSG, ptr_st_err_msg->c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
			}
	}
	/*** Ver 3.2 ends  here ***/

	/*** if loop added in Ver 2.7 ***/
	else if(c_fc_flg == 'E')	
	{
		/* Calculate open quantity */
    EXEC SQL
      SELECT  NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FTD_EXCTD_QTY,
																				     'T', -1 * FTD_EXCTD_QTY,	
                                                       FTD_EXCTD_QTY ) ), 0 )	/***'T', -1 * FTD_EXCTD_QTY added in Ver 5.6 ***/
      INTO    :l_open_qty
      FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
      WHERE   FTD_ORDR_RFRNC  = FOD_ORDR_RFRNC
      AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_sltp_ord_rfrnc;

    if( SQLCODE != 0 )
    {
			fn_errlog ( c_ServiceName, "S31390", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }

		if (l_open_qty == 0)
		{
			/*** Release the margin and loss amount blocked ***/
			EXEC SQL
				SELECT
							NVL(FOD_AMT_BLCKD,0),
							NVL(FOD_LSS_AMT_BLCKD,0)
				INTO  :d_amt_blkd,
							:d_lss_amt_blkd
				FROM  FOD_FO_ORDR_DTLS
				WHERE FOD_ORDR_RFRNC = :c_sltp_ord_rfrnc;

				if( SQLCODE != 0 )
				{
					fn_errlog ( c_ServiceName, "S31395", SQLMSG, ptr_st_err_msg->c_err_msg );
					fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
				}
				
				strcpy( c_narration_id , ON_TRADE_EXECUTION);
				
				if(d_amt_blkd > 0)
				{
					d_balance_amt  = 0.0;

					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"Release old margin amount blocked");
					}
					
					i_returncode = fn_upd_limits( c_ServiceName,
																			&st_pstn_actn,
																			ptr_st_err_msg,
																			c_narration_id, 
																			DEBIT_WITHOUT_LIMIT,
																			d_amt_blkd,
																			&d_balance_amt);


					if ( i_returncode != 0 )
					{
						fn_errlog ( c_ServiceName, "S31400", SQLMSG, ptr_st_err_msg->c_err_msg );
						fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
					}
				}
								
				if(d_lss_amt_blkd > 0)
				{
					d_balance_amt  = 0.0;

					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog(c_ServiceName,"Release old loss amount");
					}
					i_returncode = fn_upd_limits( c_ServiceName,
																			&st_pstn_actn,
																			ptr_st_err_msg,
																			c_narration_id, 
																			DEBIT_WITHOUT_LIMIT,
																			d_lss_amt_blkd,
																			&d_balance_amt);


					if ( i_returncode != 0 )
					{
						fn_errlog ( c_ServiceName, "S31405", SQLMSG, ptr_st_err_msg->c_err_msg );
						fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
					}
				}

				if( DEBUG_MSG_LVL_3 )
				{
					fn_userlog(c_ServiceName,"Update margin & loss released");
				}

				EXEC SQL
						 UPDATE FOD_FO_ORDR_DTLS
						 SET    FOD_AMT_BLCKD			= 0,
										FOD_LSS_AMT_BLCKD = 0,
									  FOD_SLTP_MRGN			= 0,				/*** Ver 5.4 ***/	
                    FOD_SLTP_PL				= 0,				/*** Ver 5.4 ***/	 
                    FOD_SLTP_SEBI_MRGN= 0					/*** Ver 5.4 ***/
						 WHERE  FOD_ORDR_RFRNC		= :c_sltp_ord_rfrnc; 
				
				if ( SQLCODE != 0 )
				{
					fn_errlog ( c_ServiceName, "S31410", SQLMSG, ptr_st_err_msg->c_err_msg );
					fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
				}
		}
	}	
	/*** Ver 2.7 if loop ended ***/

	/*** Ver 3.2 starts here ***/
	/*** Calculate the  Profit / Loss on current executed quantity ***/

	EXEC SQL
		 SELECT  NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FOD_EXEC_QTY,'T', -1 * FOD_EXEC_QTY, FOD_EXEC_QTY ) ), 0 )/*** 'T', -1 * FOD_EXEC_QTY,Added in ver 5.6 ***/
		 INTO   :l_net_open
		 FROM   FOD_FO_ORDR_DTLS
		 WHERE  DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_frsh_ordr_rfrnc;

	if ( SQLCODE != 0 )
	{
		fn_errlog ( c_ServiceName, "S31415", SQLMSG, ptr_st_err_msg->c_err_msg );
		fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
	}

	/*** Obligation to be calculated only when Incoming Fresh Trade and net open position is in Cover OR Incoming Cover Trade and net open position is in Fresh ***/
	if ( ((c_fc_flg == 'F' || c_fc_flg == 'E') && l_net_open < 0) || ((c_fc_flg == 'C' || c_fc_flg == 'T') && l_net_open > 0) ) /*** handling for E is added in ver 5.0 ***//*** handling for 'T' id Added in Ver 5.6 ***/
	{

   /*** ver 5.0 started ***/
   if( c_fc_flg == 'E' )
   {

	 /*** Ver 5.6 starts ***/
      EXEC SQL
       SELECT NVL(SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),0) ,
              NVL(SUM(FTD_EXCTD_QTY),0)
       INTO   :d_exe_val,
              :l_exe_qty
       FROM   FTD_FO_TRD_DTLS,FOD_FO_ORDR_DTLS
       WHERE  FOD_ORDR_RFRNC = FTD_ORDR_RFRNC
       AND    FOD_FC_FLAG in ('C','T')
       AND    DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_frsh_ordr_rfrnc;
      /*** Ver 5.6 ends ***/

	/*** commented in ver 5.6 ***
     EXEC SQL
          SELECT FOD_ORDR_RFRNC
          INTO   :c_sltp_ord_rfrnc
          FROM   FOD_FO_ORDR_DTLS
          WHERE  FOD_SLTP_ORDR_RFRNC  = :c_frsh_ordr_rfrnc
          AND    FOD_FC_FLAG = :c_cvr_flg
          AND    FOD_ORDR_STTS IN ('E','D','B');
 *************/    
     if ( SQLCODE != 0 )
     {
       fn_errlog ( c_ServiceName, "S31420", SQLMSG, ptr_st_err_msg->c_err_msg );
       fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
     }

     if( DEBUG_MSG_LVL_3 )
     {
         fn_userlog(c_ServiceName,"******** c_fc_flg is :%c: c_frsh_ordr_rfrnc is :%s: c_sltp_ord_rfrnc is :%s: ***********",c_fc_flg,c_frsh_ordr_rfrnc,c_sltp_ord_rfrnc );
     }

   } 
   /*** ver 5.0 ended ***/
	 else  /*** Else condition Ver 5.6 ***/
   {
		EXEC SQL
			 SELECT NVL(SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),0) ,
							NVL(SUM(FTD_EXCTD_QTY),0)
			 INTO   :d_exe_val,
							:l_exe_qty
			 FROM   FTD_FO_TRD_DTLS
			 WHERE  FTD_ORDR_RFRNC = :c_sltp_ord_rfrnc;

		if ( SQLCODE != 0 )
		{
			fn_errlog ( c_ServiceName, "S31425", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}
	}

		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName,"*****************OBLIGATION*****************");
			fn_userlog(c_ServiceName,"Stored OLD l_net_open = :%ld:",l_net_open);
			fn_userlog(c_ServiceName,"Opposite order Execution Val = :%lf:",d_exe_val);
			fn_userlog(c_ServiceName,"Opposite order Execution Qty = :%ld:",l_exe_qty);
		}

		d_avg_prc = 0;
		
		if (l_exe_qty != 0)
		{
			d_avg_prc =  (double)  d_exe_val / l_exe_qty;
		}


		
		if (c_ord_flw == 'B')	/*** Fresh Buy ***/
		{
			if (c_fc_flg == 'F' || c_fc_flg == 'E' ) /*** Trade Flow ***/ /*** handling for E is added in ver 5.0 ***/
			{
				d_obli_pl = (double) fn_minl( ptr_st_tradebook->l_exctd_qty, abs(l_net_open) ) * ( d_avg_prc - (double)  ptr_st_tradebook->l_exctd_rt );
			}
			else 
			{
				d_obli_pl = (double) fn_minl( ptr_st_tradebook->l_exctd_qty, abs(l_net_open) ) * ( d_avg_prc - (double)  ptr_st_tradebook->l_exctd_rt ) * -1;
			}
		}
		else if (c_ord_flw == 'S') /*** Fresh Sell ***/
		{
			if (c_fc_flg == 'F' || c_fc_flg == 'E' ) /*** Trade Flow ***/ /*** handling for E is added in ver 5.0 ***/
			{
				d_obli_pl = (double) fn_minl( ptr_st_tradebook->l_exctd_qty, abs(l_net_open) ) * ( d_avg_prc - (double)  ptr_st_tradebook->l_exctd_rt ) * -1;
			}
			else
			{
				d_obli_pl = (double) fn_minl( ptr_st_tradebook->l_exctd_qty, abs(l_net_open) ) * ( d_avg_prc - (double)  ptr_st_tradebook->l_exctd_rt );
			}
		}
		
		if( DEBUG_MSG_LVL_3 )
		{
			fn_userlog(c_ServiceName,"c_ord_flw :%c: c_fc_flg :%c:",c_ord_flw, c_fc_flg);
			fn_userlog(c_ServiceName,"d_avg_prc :%lf: Executed Rate :%ld: Executed Qty :%ld:",d_avg_prc, ptr_st_tradebook->l_exctd_rt, ptr_st_tradebook->l_exctd_qty);
			fn_userlog(c_ServiceName," fn_minl( ptr_st_tradebook->l_exctd_qty, l_net_open ) :%ld:", fn_minl( ptr_st_tradebook->l_exctd_qty, l_net_open ) );
			fn_userlog(c_ServiceName,"Obligation profit loss :%lf:",d_obli_pl);
			fn_userlog(c_ServiceName,"*****************************************");
		}	
		strcpy( c_narration_id , PROFIT_LOSS_ON_COVER_LEG);

		if( d_obli_pl != 0)
		{

		 /*** if(strncmp(st_pstn_actn.c_cln_mtch_accnt, "751", 3) == 0) ** Commented in Ver 3.7 ****/  
     /****** Added in Ver 3.7 *******/

	  MEMSET(sql_iai_type.arr);

      EXEC SQL
      SELECT  IAI_TYPE
      INTO    :sql_iai_type
      FROM    IAI_INFO_ACCOUNT_INFO
      WHERE   IAI_MATCH_ACCOUNT_NO  = :st_pstn_actn.c_cln_mtch_accnt ;

      if ( SQLCODE != 0 )
      {
        fn_errlog ( c_ServiceName, "S31430", SQLMSG, ptr_st_err_msg->c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
        free((char*) ptr_st_err_msg);
        tpfree((char*)ptr_fml_Obuf);
        free((char *) ptr_st_tradebook);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

    	if(DEBUG_MSG_LVL_3)    /*** Ver 3.9 ***/ 
    	{
				fn_userlog( c_ServiceName, "CUST TYPE IS :%s:",sql_iai_type.arr);  /**********  Added in Ver 3.7 ********/
			}
		
     if(strcmp(sql_iai_type.arr,"NRO_NON_PINS") == 0)   /****** check Added in Ver 3.7 *****/
		 {
				strcpy(c_reason_cd,"Profit Loss on Cover Leg");

				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog( c_ServiceName, "Calling fn_tds for COVER_LEG :%s:",c_reason_cd );
				}

				strcpy ( c_tmp_rmrks, st_pstn_actn.c_ref_rmrks );

				sprintf ( st_pstn_actn.c_ref_rmrks,"FUT-%s-%s",
									st_pstn_actn.c_undrlyng,
									st_pstn_actn.c_expry_dt);

				i_returncode = fn_tds( c_ServiceName,
																 &st_pstn_actn,
																 ptr_st_err_msg,
																 TDS_NRI,
																 c_reason_cd,
																 DEBIT_WITHOUT_LIMIT,
																 d_obli_pl,
																 &d_balance_amt);

				if ( i_returncode != 0 )
				{
					fn_errlog ( c_ServiceName, "S31435", LIBMSG, c_err_msg );
					fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
				}
				strcpy ( st_pstn_actn.c_ref_rmrks , c_tmp_rmrks );
			}
      /****** Ver 4.4 Starts *****/
      MEMSET(c_tmp_rmrks);
      strcpy ( c_tmp_rmrks, st_pstn_actn.c_ref_rmrks );
      sprintf ( st_pstn_actn.c_ref_rmrks,"FUT-%s-%s-",
                st_pstn_actn.c_undrlyng,
                st_pstn_actn.c_expry_dt);
      strcat(st_pstn_actn.c_ref_rmrks,c_tmp_rmrks);
      /****** Ver 4.4 Ends ******/

			i_returncode = fn_upd_limits( c_ServiceName,
																			&st_pstn_actn,
																			ptr_st_err_msg,
																			c_narration_id,
																			DEBIT_WITHOUT_LIMIT,
																			d_obli_pl,
																			&d_balance_amt);
			if ( i_returncode != 0 )
			{
				fn_errlog ( c_ServiceName, "S31440", LIBMSG, c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
			}	
      strcpy ( st_pstn_actn.c_ref_rmrks , c_tmp_rmrks );  /** Ver 4.4 **/
		}
	}
	/*** Ver 3.2 ends here ***/
 }	
	
	/******************** Ver 2.1 Ends ********************/

	strcpy ( st_orderbook.c_ack_tm, ptr_st_tradebook->c_trd_dt );
	st_orderbook.l_exctd_qty += ptr_st_tradebook->l_exctd_qty;
	st_orderbook.l_exctd_qty_day += ptr_st_tradebook->l_exctd_qty;

    if(DEBUG_MSG_LVL_3) /*** Ver 3.9 ***/ 
    {
			fn_userlog(c_ServiceName,"Total Order Qty Is :%ld:",st_orderbook.l_ord_tot_qty);  /* Ver 1.5 */
			fn_userlog(c_ServiceName,"Executed Qty Is :%ld:",st_orderbook.l_exctd_qty);       /* Ver 1.5 */
			fn_userlog(c_ServiceName,"Order Status Is :%c:",st_orderbook.c_ordr_stts);        /* Ver 1.5 */
		}

	if ( st_orderbook.c_ordr_stts == CANCELLED || st_orderbook.c_ordr_stts == PARTIALLY_EXECUTED_AND_CANCELLED )  /* Ver 1.5 */
	{
		st_orderbook.c_ordr_stts = PARTIALLY_EXECUTED_AND_CANCELLED;
	}
	else
	{
		if ( st_orderbook.l_exctd_qty < st_orderbook.l_ord_tot_qty )
		{
			/* Ver 4.9 Starts */
			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog(c_ServiceName, "st_orderbook.l_can_qty:%ld:", st_orderbook.l_can_qty);
			}
			if ( (st_orderbook.l_exctd_qty + st_orderbook.l_can_qty) == st_orderbook.l_ord_tot_qty )
			{
				st_orderbook.c_ordr_stts = PARTIALLY_EXECUTED_AND_CANCELLED;
			}
			else
			/* Ver 4.9 Ends */
				st_orderbook.c_ordr_stts = PARTIALLY_EXECUTED;
		}
		else
		{
			st_orderbook.c_ordr_stts = EXECUTED;
		}
	}

  /**** Commented in Ver 2.8 ******************

	st_orderbook.c_oprn_typ = UPDATE_TRADE_CONFIRMATION;

	i_ip_len = sizeof ( struct vw_orderbook );
	i_op_len = sizeof ( struct vw_orderbook );
				
  *** Added for Order Routing ***
	fn_cpy_ddr ( st_orderbook.c_rout_crt );

	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              &st_orderbook,
                              &st_orderbook,
                              "vw_orderbook",
                              "vw_orderbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_ORDRBK" );
				
	if ( i_returncode != SUCC_BFR )
	{
  	fn_errlog ( c_ServiceName, "S31445", LIBMSG, ptr_st_err_msg->c_err_msg );
  	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
	}

	***********/

    /*** ver 5.3 starts ***/
    rtrim(c_fod_last_act_no);
    sscanf(c_fod_last_act_no,"%lld",&ll_fod_last_act_no);
    sscanf(c_lst_act_ref,"%lld",&ll_lst_act_ref);

    /** Input Last Act Ref is greater than the existing in FOD table ***
        Then, input Last Act Ref is recent, set flag to 1 ************/

    i_recent_act_ref = ( ll_fod_last_act_no < ll_lst_act_ref ) ? 1 : 0;

    if(DEBUG_MSG_LVL_0)
    {
      fn_userlog(c_ServiceName,"Last act no flag.:%d: c_ordr_rfrnc :%s: ll_fod_last_act_no :%lld: ll_lst_act_ref :%lld:",i_recent_act_ref,st_orderbook.c_ordr_rfrnc,ll_fod_last_act_no,ll_lst_act_ref);
    }
    /*** ver 5.3 ends ***/

	/**** Ver 3.5 starts ****/
	if (ptr_st_tradebook->c_prd_typ == 'U' )  
  {
		EXEC SQL
					SELECT 1			/***	Ver 4.7	***/
					INTO :i_ack_tm
					FROM FOD_FO_ORDR_DTLS
					WHERE FOD_LST_RQST_ACK_TM < TO_DATE (:st_orderbook.c_ack_tm,'dd-mon-yyyy hh24:mi:ss' )
					AND FOD_ORDR_RFRNC      = :st_orderbook.c_ordr_rfrnc;

		if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
		{
			fn_errlog ( c_ServiceName, "S31450", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
		}

    if(DEBUG_MSG_LVL_3) /*** Ver 3.9 ***/ 
    {
			fn_userlog(c_ServiceName,"Ack Time.....................:%d:",i_ack_tm);
			fn_userlog(c_ServiceName,"st_orderbook.c_ack_tm...................:%s:",st_orderbook.c_ack_tm);
		}

		EXEC SQL
    	    UPDATE  FOD_FO_ORDR_DTLS			/***	Ver 4.7	***/
      	  SET     FOD_EXEC_QTY        = :st_orderbook.l_exctd_qty,
        	        FOD_EXEC_QTY_DAY    = :st_orderbook.l_exctd_qty_day,
          	      FOD_ORDR_STTS       = :st_orderbook.c_ordr_stts,
            	    FOD_LST_RQST_ACK_TM = DECODE(:i_ack_tm,1,TO_DATE (:st_orderbook.c_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),FOD_LST_RQST_ACK_TM),    /**** DECODE added in Ver 3.5 ****/
              	  FOD_TRD_VAL = NVL(FOD_TRD_VAL,0) + (:ptr_st_tradebook->l_exctd_qty * :ptr_st_tradebook->l_exctd_rt),
                  FOD_LST_ACT_REF     = DECODE(:i_recent_act_ref,1,:c_lst_act_ref,FOD_LST_ACT_REF)    /*** Ver 5.2 ***/ /*** Decode added in ver 5.3 **/
        	WHERE   FOD_ORDR_RFRNC      = :st_orderbook.c_ordr_rfrnc;

  	if ( SQLCODE != 0 )
  	{
    	fn_errlog ( c_ServiceName, "S31455", SQLMSG, ptr_st_err_msg->c_err_msg );
    	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  	}
	}
	else
	{
	/**** Ver 3.5 Ends ****/
  /*** Ver 4.6 Starts ***/

    EXEC SQL
         SELECT 1
         INTO :i_ack_tm
         FROM fod_fo_ordr_dtls
         WHERE fod_lst_rqst_ack_tm < to_date (:st_orderbook.c_ack_tm,'dd-mon-yyyy hh24:mi:ss' )
         AND fod_ordr_rfrnc      = :st_orderbook.c_ordr_rfrnc;

    if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
      fn_errlog ( c_ServiceName, "S31460", SQLMSG, ptr_st_err_msg->c_err_msg );
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"Ack Time.....................:%d:",i_ack_tm);
      fn_userlog(c_ServiceName,"st_orderbook.c_ordr_rfrnc....:%s:",st_orderbook.c_ordr_rfrnc);
      fn_userlog(c_ServiceName,"st_orderbook.c_ack_tm........:%s:",st_orderbook.c_ack_tm);
    }

  /*** Ver 4.6 Ends ***/
	/*** Ver 2.8 Starts ***/

  	EXEC SQL			/***	Ver 4.7	***/
    	    UPDATE  FOD_FO_ORDR_DTLS
      	  SET     FOD_EXEC_QTY        = :st_orderbook.l_exctd_qty,
        	        FOD_EXEC_QTY_DAY    = :st_orderbook.l_exctd_qty_day,
          	      FOD_ORDR_STTS       = :st_orderbook.c_ordr_stts,
          /***    FOD_LST_RQST_ACK_TM = TO_DATE (:st_orderbook.c_ack_tm,'dd-mon-yyyy hh24:mi:ss' ), *** Commented in Ver 4.6 ***/
                  FOD_LST_RQST_ACK_TM = DECODE(:i_ack_tm,1,to_date (:st_orderbook.c_ack_tm,'dd-mon-yyyy hh24:mi:ss' ),fod_lst_rqst_ack_tm),    /**** Ver 4.6***/
              	  FOD_TRD_VAL = NVL(FOD_TRD_VAL,0) + (:ptr_st_tradebook->l_exctd_qty * :ptr_st_tradebook->l_exctd_rt),
                  FOD_LST_ACT_REF     =  DECODE(:i_recent_act_ref,1,:c_lst_act_ref,FOD_LST_ACT_REF)    /*** Ver 5.2 ***/ /** decode added in ver 5.3 **/
        	WHERE   FOD_ORDR_RFRNC      = :st_orderbook.c_ordr_rfrnc;

  	if ( SQLCODE != 0 )
  	{
    	fn_errlog ( c_ServiceName, "S31465", SQLMSG, ptr_st_err_msg->c_err_msg );
    	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  	}
	}
  /*** Ver 2.8 Ends **/

	ptr_st_tradebook->c_rms_prcsd_flg	= PROCESSED;

	ptr_st_tradebook->l_fresh_qty			= st_pstn_actn.l_fresh_qty;
	ptr_st_tradebook->l_cover_qty			= st_pstn_actn.l_cover_qty;

	ptr_st_tradebook->c_oprn_typ = UPDATE_TRADE_CONF;

	if (ptr_st_tradebook->c_prd_typ == 'U')		/*** Ver 2.1 ***/
  {
		if (c_fc_flg == 'F' || c_fc_flg == 'E' ) /*** 'E' flag added in Ver 3.0 ***/
		{
			if( DEBUG_MSG_LVL_3 )
			{
				fn_userlog(c_ServiceName,"Inside Fresh");
			}
			ptr_st_tradebook->l_fresh_qty = ptr_st_tradebook->l_exctd_qty;
			ptr_st_tradebook->l_cover_qty = 0;
		}
		else 
		if (c_fc_flg == 'C' || c_fc_flg == 'T')	 /*** Added handling for 'T' in Ver 5.6 ***/
		{
			if( DEBUG_MSG_LVL_3 )
			{
				fn_userlog(c_ServiceName,"Inside Cover");
			}
			ptr_st_tradebook->l_fresh_qty = 0;
			ptr_st_tradebook->l_cover_qty = ptr_st_tradebook->l_exctd_qty;
		}
  }

    if(DEBUG_MSG_LVL_3)     /*** Ver 3.9 ***/ 
    {
			fn_userlog(c_ServiceName,"ptr_st_tradebook->l_fresh_qty = :%ld:",ptr_st_tradebook->l_fresh_qty);
  		fn_userlog(c_ServiceName,"ptr_st_tradebook->l_cover_qty = :%ld:",ptr_st_tradebook->l_cover_qty);
		}

      /*** Ver 5.7 ***/
 if (ptr_st_tradebook->c_prd_typ == 'F' || ptr_st_tradebook->c_prd_typ == 'P'   )
 {
  i_returncode =fn_avg_prc_cal(c_ServiceName,
                                   &st_pstn_actn,
                                   &d_prtfl_avgprc);
    if ( i_returncode != 0 )
    {
      fn_userlog(c_ServiceName,"Error in Average Price Calculation ..");
      fn_errlog ( c_ServiceName, "S31470", LIBMSG, ptr_st_err_msg->c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }
    fn_userlog(c_ServiceName," Average Price  :%lf:",d_prtfl_avgprc);
    fn_userlog(c_ServiceName,"st_pstn_actn.c_cntrct_tag=:%c:",st_pstn_actn.c_cntrct_tag);

      EXEC SQL
        UPDATE   FFP_FO_FUTURES_PSTN
        SET   FFP_AVG_PRC = :d_prtfl_avgprc
        WHERE  FFP_CLM_MTCH_ACCNT  = :st_pstn_actn.c_cln_mtch_accnt
        AND    FFP_XCHNG_CD        = :st_pstn_actn.c_xchng_cd
        AND    FFP_PRDCT_TYP       = :st_pstn_actn.c_prd_typ
        AND    FFP_EXER_TYP        = :st_pstn_actn.c_exrc_typ
        AND    FFP_UNDRLYNG        = :st_pstn_actn.c_undrlyng
        AND    FFP_EXPRY_DT        = :st_pstn_actn.c_expry_dt
        AND    FFP_CNTRCT_TAG      = :st_pstn_actn.c_cntrct_tag;

   if ( SQLCODE != 0 )
    {
      fn_errlog ( c_ServiceName, "S31475", SQLMSG, ptr_st_err_msg->c_err_msg);
      fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }
 }
 /*** Ver 5.7 *****/

	i_ip_len = sizeof ( struct vw_tradebook );
	i_op_len = sizeof ( struct vw_tradebook );
				
  /*** Added for Order Routing ***/
	fn_cpy_ddr ( ptr_st_tradebook->c_rout_crt );

	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg,
                              ptr_st_tradebook,
                              ptr_st_tradebook,
                              "vw_tradebook",
                              "vw_tradebook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_TRDBK" );
				
	if ( i_returncode != SUCC_BFR )
	{
  	fn_errlog ( c_ServiceName, "S31480", LIBMSG, ptr_st_err_msg->c_err_msg );
  	fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
	}

	if ( fn_committran( c_ServiceName, i_trnsctn, 
                                     ptr_st_err_msg->c_err_msg ) == -1 )
	{
  	fn_errlog ( c_ServiceName, "S31485", LIBMSG, ptr_st_err_msg->c_err_msg );
  	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
	}
	
	/** Ver 5.9 starts ***/
  i_returncode = fn_upd_nrmlmrgn_reporting(st_pstn_actn.c_cln_mtch_accnt,
                                       st_pstn_actn.c_xchng_cd,
                                       c_ServiceName,
                                       ptr_st_err_msg->c_err_msg
                                      );
  if( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "S31490", LIBMSG, ptr_st_err_msg->c_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
  }
 /** Ver 5.9 ends **/
	/** Ver 3.6 Starts**/ 
	if(ptr_st_tradebook->c_prd_typ == SLTP_FUTUREPLUS)
	{
    /*** Ver 4.2 Starts Here ***/
		if(DEBUG_MSG_LVL_3)
		{
    	fn_userlog(c_ServiceName,"Calling fn_prcs_trd fut_tconf for Ordr Ref:%s:",ptr_st_tradebook->c_ordr_rfrnc);
		}
    i_returncode= fn_prcs_trd(c_ServiceName,c_err_msg,ptr_st_tradebook->c_prd_typ,ptr_st_tradebook->c_ordr_rfrnc);

    if(i_returncode != 0)
    {
      fn_errlog ( c_ServiceName, "S31495", LIBMSG, ptr_st_err_msg->c_err_msg );
    }
    /*** Ver 4.2 Ends Here ***/

    /*** Commented in Ver 4.2
		MEMSET(st_tradebook);

    if(DEBUG_MSG_LVL_3)    *** Ver 3.9 *** 
    {
			fn_userlog( c_ServiceName, "Fetching starts");
		}

		EXEC SQL
		  SELECT
			  fod_sltp_ordr_rfrnc
		  INTO
			  :c_sltp_ord_rfrnc
		  FROM  FOD_FO_ORDR_DTLS
		  WHERE fod_ordr_rfrnc = :ptr_st_tradebook->c_ordr_rfrnc; 
		if(SQLCODE !=0)
		{
		  fn_errlog ( c_ServiceName, "S31500", SQLMSG, ptr_st_err_msg->c_err_msg );
		  fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
		  tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_st_err_msg, 0, 0 );
		}
    
		if(DEBUG_MSG_LVL_3)   *** Ver 3.9 *** 
    {
			fn_userlog( c_ServiceName, "ptr_st_tradebook->c_ordr_rfrnc is :%s:",ptr_st_tradebook->c_ordr_rfrnc);
			fn_userlog( c_ServiceName, "c_sltp_ord_rfrnc is :%s:",c_sltp_ord_rfrnc);
		}

			EXEC SQL
			SELECT	ftd_clm_mtch_accnt,
							ftd_xchng_cd,
							ftd_prdct_typ,
							ftd_indstk,
							ftd_undrlyng,
							to_char(ftd_expry_dt,'DD-Mon-YYYY'),
							ftd_exer_typ,
							ftd_opt_typ,
							ftd_strk_prc,
							ftd_ordr_rfrnc,
							ftd_eba_trd_ref,
							ftd_ord_ack_nmbr,
							ftd_xchng_trd_no,
							to_char(ftd_trd_dt,'DD-Mon-YYYY hh24:mi:ss'),
							ftd_trnsctn_typ,
							ftd_trd_flw,
							ftd_exctd_qty,
							ftd_exctd_rt
					INTO	:st_tradebook.c_cln_mtch_accnt,
							:st_tradebook.c_xchng_cd,
							:st_tradebook.c_prd_typ,
							:st_tradebook.c_ctgry_indstk,
							:st_tradebook.c_undrlyng,
							:st_tradebook.c_expry_dt,
							:st_tradebook.c_exrc_typ,
							:st_tradebook.c_opt_typ,
							:st_tradebook.l_strike_prc,
							:st_tradebook.c_ordr_rfrnc,
							:st_tradebook.c_trd_rfrnc,
							:st_tradebook.c_xchng_ack,
							:st_tradebook.l_xchng_trd_no,
							:st_tradebook.c_trd_dt,
							:st_tradebook.c_trnsctn_typ:si_null,
							:st_tradebook.c_trd_flw,
							:st_tradebook.l_exctd_qty,
							:st_tradebook.l_exctd_rt
			FROM		ftd_fo_trd_dtls
			WHERE		ftd_ordr_rfrnc IN(:ptr_st_tradebook->c_ordr_rfrnc,:c_sltp_ord_rfrnc)
			AND			ftd_rms_prcsd_flg = 'N'
			AND			ROWNUM < 2
			ORDER		BY FTD_TRD_DT;

		  if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
		  {
				fn_errlog ( c_ServiceName, "S31505", SQLMSG, ptr_st_err_msg->c_err_msg );
				fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)&ptr_st_err_msg, 0, 0 );
		  } 

		if( SQLCODE != NO_DATA_FOUND )
		{
			rtrim(st_tradebook.c_trd_dt);

			fn_cpy_ddr ( st_tradebook.c_rout_crt );

    if(DEBUG_MSG_LVL_3)   *** Ver 3.9 *** 
    {
			fn_userlog( c_ServiceName, "Calling SFO_FT_CVRTCONF");
    }
			i_returncode = fn_acall_svc( c_ServiceName,
										ptr_st_err_msg->c_err_msg,
										&st_tradebook,
										"vw_tradebook",
										sizeof( struct vw_tradebook),
										TPNOREPLY,
										"SFO_FT_CVRTCONF" );
			if ( i_returncode != SUCC_BFR )
			{
				fn_errlog ( c_ServiceName, "S31510", LIBMSG, c_err_msg );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
			}
		}
		else
			fn_userlog( c_ServiceName, "NO_DATA_FOUND");
      ***** Comment ends for Ver 4.2 ***/
	}
	/** Ver 3.6 Ends**/
   /*** Ver 4.8 Starts Here ****/
  else if( ptr_st_tradebook->c_prd_typ == FUTURES && st_orderbook.c_spl_flg == ROLLOVER_WITH_SPREAD )
  {
    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"ROLLOVER_WITH_SPREAD Calling fn_prcs_trd fut_tconf for Ordr Ref:%s:",ptr_st_tradebook->c_ordr_rfrnc);
    }
    i_returncode= fn_prcs_trd_rollover(c_ServiceName,c_err_msg,ptr_st_tradebook->c_prd_typ,ptr_st_tradebook->c_ordr_rfrnc);

    if(i_returncode != 0)
    {
      fn_errlog ( c_ServiceName, "S31515", LIBMSG, ptr_st_err_msg->c_err_msg );
    }


  }  /*** Ver 4.8 Ends here ****/ 
  /** Ver 3.8 Starts **/
  else if( ptr_st_tradebook->c_prd_typ == FUTURES || ptr_st_tradebook->c_prd_typ == FUTURE_PLUS )
  {
    /*** Ver 4.2 Starts Here ***/
    i_returncode= fn_prcs_trd(c_ServiceName,c_err_msg,ptr_st_tradebook->c_prd_typ,ptr_st_tradebook->c_ordr_rfrnc);

    if(i_returncode != 0)
    {
      fn_errlog ( c_ServiceName, "S31520", LIBMSG, ptr_st_err_msg->c_err_msg );
    }
    /*** Ver 4.2 Ends Here ***/

    /*** Commented in Ver 4.2
    if(DEBUG_MSG_LVL_3) *** Ver 3.9 *** 
    {
    	fn_userlog( c_ServiceName, "ptr_st_tradebook->c_ordr_rfrnc is :%s:",ptr_st_tradebook->c_ordr_rfrnc);
    }
	
		MEMSET(st_tradebook);

      EXEC SQL
      SELECT  ftd_clm_mtch_accnt,
              ftd_xchng_cd,
              ftd_prdct_typ,
              ftd_indstk,
              ftd_undrlyng,
              to_char(ftd_expry_dt,'DD-Mon-YYYY'),
              ftd_exer_typ,
              ftd_opt_typ,
              ftd_strk_prc,
              ftd_ordr_rfrnc,
              ftd_eba_trd_ref,
              ftd_ord_ack_nmbr,
              ftd_xchng_trd_no,
              to_char(ftd_trd_dt,'DD-Mon-YYYY hh24:mi:ss'),
              ftd_trnsctn_typ,
              ftd_trd_flw,
              ftd_exctd_qty,
              ftd_exctd_rt
          INTO  :st_tradebook.c_cln_mtch_accnt,
              :st_tradebook.c_xchng_cd,
              :st_tradebook.c_prd_typ,
              :st_tradebook.c_ctgry_indstk,
              :st_tradebook.c_undrlyng,
              :st_tradebook.c_expry_dt,
              :st_tradebook.c_exrc_typ,
              :st_tradebook.c_opt_typ,
              :st_tradebook.l_strike_prc,
              :st_tradebook.c_ordr_rfrnc,
              :st_tradebook.c_trd_rfrnc,
              :st_tradebook.c_xchng_ack,
              :st_tradebook.l_xchng_trd_no,
              :st_tradebook.c_trd_dt,
              :st_tradebook.c_trnsctn_typ:si_null,
              :st_tradebook.c_trd_flw,
              :st_tradebook.l_exctd_qty,
              :st_tradebook.l_exctd_rt
      FROM    ftd_fo_trd_dtls
      WHERE   ftd_ordr_rfrnc = :ptr_st_tradebook->c_ordr_rfrnc
      AND     ftd_rms_prcsd_flg = 'N'
      AND     ROWNUM < 2
      ORDER   BY FTD_TRD_DT;

      if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
      {
        fn_errlog ( c_ServiceName, "S31525", SQLMSG, ptr_st_err_msg->c_err_msg );
        fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 ); 
      }

    if( SQLCODE != NO_DATA_FOUND )
    {
      rtrim(st_tradebook.c_trd_dt);

      fn_cpy_ddr ( st_tradebook.c_rout_crt );

    if(DEBUG_MSG_LVL_3)   *** Ver 3.9 *** 
    {
      fn_userlog( c_ServiceName, "Calling SFO_FT_CVRTCONF");
		}
      i_returncode = fn_acall_svc( c_ServiceName,
                    ptr_st_err_msg->c_err_msg,
                    &st_tradebook,
                    "vw_tradebook",
                    sizeof( struct vw_tradebook),
                    TPNOREPLY,
                    "SFO_FT_CVRTCONF" );

      if ( i_returncode != SUCC_BFR )
      {
        fn_errlog ( c_ServiceName, "S31530", LIBMSG, c_err_msg );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
      }
    }
    else
      fn_userlog( c_ServiceName, "NO_DATA_FOUND");
    **** Comment Ends for Ver 4.2 ****/
  }
  /** Ver 3.8 Ends **/
	/** Ver 3.5 Starts**/ 	
	  /*** if(ptr_st_tradebook->c_prd_typ == SLTP_FUTUREPLUS) Commented in Ver 3.8 ***/
	if(ptr_st_tradebook->c_prd_typ == SLTP_FUTUREPLUS || ptr_st_tradebook->c_prd_typ == FUTURES || ptr_st_tradebook->c_prd_typ == FUTURE_PLUS ) /** FUTURES and FUTURE_PLUS added in Ver 3.8 **/
	{
	   MEMSET(st_cvr_xchngbk);
		 /****** Commented in Ver 4.1 **
	   EXEC SQL
			 SELECT	 fxb_rms_prcsd_flg,
							 fxb_mdfctn_cntr
			 INTO		 :frsh_rms_prcsd_flg,
							 :l_mdfctn_cntr
			 FROM		 FXB_FO_XCHNG_BOOK
			 WHERE	 FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc
			 AND		 FXB_MDFCTN_CNTR = (select max(FXB_MDFCTN_CNTR)
			 FROM    FXB_FO_XCHNG_BOOK
			 WHERE   FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc); Ver 4.1 Ends ***/
			 /**** Ver 4.1 starts *****/
			EXEC SQL
			SELECT  FXB_RMS_PRCSD_FLG,			/***	Ver 4.7	***/
							FXB_MDFCTN_CNTR
			INTO		:frsh_rms_prcsd_flg,
							:l_mdfctn_cntr
			FROM    FXB_FO_XCHNG_BOOK
			WHERE		FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc
			AND    FXB_MDFCTN_CNTR = (SELECT MIN(FXB_MDFCTN_CNTR)
																FROM	 FXB_FO_XCHNG_BOOK
																WHERE	 FXB_ORDR_RFRNC= :ptr_st_tradebook->c_ordr_rfrnc
																AND		 FXB_JIFFY     = (SELECT MIN(FXB_JIFFY)
																												FROM	 FXB_FO_XCHNG_BOOK
																												WHERE	 FXB_ORDR_RFRNC= :ptr_st_tradebook->c_ordr_rfrnc
												 																AND		 FXB_RMS_PRCSD_FLG=:c_rms_prcs_flg)/*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/
																AND		FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg)/*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/
			AND		FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg; /*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/
     /***** Ver 4.1 Ends *******/

    if(DEBUG_MSG_LVL_3)   /*** Ver 3.9 ***/ 
    {
			fn_userlog( c_ServiceName, "ptr_st_tradebook->c_ordr_rfrnc is :%s:",ptr_st_tradebook->c_ordr_rfrnc);
			fn_userlog( c_ServiceName, "frsh_rms_prcsd_flg is :%c: l_mdfctn_cntr: %ld",frsh_rms_prcsd_flg, l_mdfctn_cntr);
		}
	
	  if(SQLCODE != 0)
	  {
			/*** Ver 4.1 Starts *********/
	
			if( SQLCODE == NO_DATA_FOUND && ptr_st_tradebook->c_prd_typ == SLTP_FUTUREPLUS)
			{
					EXEC SQL							/***	Ver 4.7	***/
					SELECT  FXB_RMS_PRCSD_FLG,
									FXB_MDFCTN_CNTR
					INTO		:cvr_rms_prcsd_flg,
									:l_mdfctn_cntr
					FROM    FXB_FO_XCHNG_BOOK
					WHERE		FXB_ORDR_RFRNC = :c_cvr_ordr_rfrnc
					AND    FXB_MDFCTN_CNTR = (SELECT MIN(FXB_MDFCTN_CNTR)
																		FROM	 FXB_FO_XCHNG_BOOK
																		WHERE	 FXB_ORDR_RFRNC= :c_cvr_ordr_rfrnc
																		AND		 FXB_JIFFY     = (SELECT MIN(FXB_JIFFY)
																														FROM	 FXB_FO_XCHNG_BOOK
																														WHERE	 FXB_ORDR_RFRNC= :c_cvr_ordr_rfrnc
												 																		AND		 FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg)/*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/
																		AND			FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg) /*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/
					AND		FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg; /*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/
					if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
					{
						fn_errlog ( c_ServiceName, "S31535", SQLMSG, ptr_st_err_msg->c_err_msg );
						fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
						tpreturn(TPFAIL, ERR_BFR, (char *)&ptr_st_err_msg, 0, 0 ); 
					}
					/***** Ver 4.1 Ends ******/
      /**** Commented in Ver 4.1
			fn_errlog ( c_ServiceName, "S31540", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)&ptr_st_err_msg, 0, 0 ); *** Ver 4.1 Ends ***/
	   } 
		}

	  if( frsh_rms_prcsd_flg != 'N' && cvr_rms_prcsd_flg != 'N' ) /***** cvr_rms_prcsd_flg check added in Ver 4.1 **/
	  {
		 fn_userlog( c_ServiceName, "No unprocessed record");
	  }
    /** else if( frsh_rms_prcsd_flg == 'N' && l_mdfctn_cntr == 99) Commented in Ver 3.8 **/
    else if( frsh_rms_prcsd_flg == 'N' || cvr_rms_prcsd_flg =='N')  /***  cvr_rms_prcsd_flg =='N' added in Ver 4.1 ***/
	  {
    	if(DEBUG_MSG_LVL_0)   /*** Ver 3.9 ***/ 
    	{
				fn_userlog( c_ServiceName, "unprocessed record exist so process it...");
			}
			/**** Ver 4.1 Starts ******/
		  if( frsh_rms_prcsd_flg == 'N' )
			{
				 strcpy(c_ordr_rfrnc_core,ptr_st_tradebook->c_ordr_rfrnc);
			}
			else if(cvr_rms_prcsd_flg == 'N')
			{
				strcpy(c_ordr_rfrnc_core,c_cvr_ordr_rfrnc);
			}
			fn_userlog(c_ServiceName,"c_ordr_rfrnc_core  :%s:",c_ordr_rfrnc_core);
			/****** Ver 4.1 ends ******/
			/*** Commented in Ver 4.1 
		  EXEC SQL
		  SELECT	FXB_ORS_MSG_TYP,
							FXB_MDFCTN_CNTR,
							nvl(to_char(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-')
			INTO    :st_cvr_xchngbk.l_ors_msg_typ,
							:st_cvr_xchngbk.l_mdfctn_cntr,
							:st_cvr_xchngbk.c_ack_tm
			FROM    FXB_FO_XCHNG_BOOK
			WHERE   FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc
			AND     FXB_MDFCTN_CNTR = (select max(FXB_MDFCTN_CNTR)
			FROM    FXB_FO_XCHNG_BOOK
			WHERE   FXB_ORDR_RFRNC = :ptr_st_tradebook->c_ordr_rfrnc)
			AND     FXB_RMS_PRCSD_FLG = 'N'; *** Ver 4.1 Ends ***/
				/****** Ver 4.1 Starts **********/
			EXEC SQL
			SELECT  FXB_ORS_MSG_TYP,			/***	Ver 4.7	***/
							FXB_MDFCTN_CNTR,
							NVL(TO_CHAR(FXB_ACK_TM, 'dd-Mon-yyyy hh24:mi:ss'),'-'),
             	NVL(FXB_XCHNG_CNCLD_QTY,0)                                   /**** Ver 4.2 *****/
			INTO		:st_cvr_xchngbk.l_ors_msg_typ,
							:st_cvr_xchngbk.l_mdfctn_cntr,
							:st_cvr_xchngbk.c_ack_tm,
              :st_cvr_xchngbk.l_xchng_can_qty                              /***** Ver 4.2 ***/
			FROM    FXB_FO_XCHNG_BOOK
			WHERE		FXB_ORDR_RFRNC = :c_ordr_rfrnc_core
			AND    FXB_MDFCTN_CNTR = (SELECT MIN(FXB_MDFCTN_CNTR)
																FROM	 FXB_FO_XCHNG_BOOK
																WHERE	 FXB_ORDR_RFRNC= :c_ordr_rfrnc_core
																AND		 FXB_JIFFY     = (SELECT MIN(FXB_JIFFY)
																												FROM	 FXB_FO_XCHNG_BOOK
																												WHERE	 FXB_ORDR_RFRNC= :c_ordr_rfrnc_core
												 																AND		 FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg)/*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/
																AND		 FXB_RMS_PRCSD_FLG= :c_rms_prcs_flg)/*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/
			AND		FXB_RMS_PRCSD_FLG = :c_rms_prcs_flg; /*** Ver 4.7 Hard Code Value Replaced by Bind Variable ***/
      /******** Ver 4.1 ***** Ends **********/
		if(SQLCODE !=0)
		{
			fn_errlog ( c_ServiceName, "S31545", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)&ptr_st_err_msg, 0, 0 );
		}	

		strcpy(st_cvr_xchngbk.c_entry_dt_tm , st_cvr_xchngbk.c_ack_tm);
		st_cvr_xchngbk.d_jiffy       = 0;
		st_cvr_xchngbk.l_dwnld_flg   = 0;
		fn_cpy_ddr ( st_cvr_xchngbk.c_rout_crt );
		strcpy(st_cvr_xchngbk.c_xchng_rmrks,"*");
		/** strcpy(st_cvr_xchngbk.c_ordr_rfrnc, ptr_st_tradebook->c_ordr_rfrnc); Commented in Ver 4.1 ***/
		strcpy(st_cvr_xchngbk.c_ordr_rfrnc,c_ordr_rfrnc_core);  /*** Ver 4.1 ***/
	
		/*********** Commented starts for Ver 4.2 **********

		l_ftd_ord_exe_qty = 0 ; *** Ver 3.9 ***
		EXEC SQL
			SELECT  NVL(SUM(ftd_exctd_qty),0)	 *** NVL added in Ver 3.9 ***
			INTO		:l_ftd_ord_exe_qty
			FROM		ftd_fo_trd_dtls
			** WHERE		ftd_ordr_rfrnc = :ptr_st_tradebook->c_ordr_rfrnc; commented in Ver 4.1 ***
			WHERE    ftd_ordr_rfrnc=:c_ordr_rfrnc_core; *** Ver 4.1 ***

		if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
		{
			fn_errlog ( c_ServiceName, "S31550", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)&ptr_st_err_msg, 0, 0 );
		}

    if(DEBUG_MSG_LVL_0)   *** Ver 3.9 *** 
    {
			fn_userlog( c_ServiceName, "l_ftd_ord_exe_qty: %ld",l_ftd_ord_exe_qty);
		}

		st_cvr_xchngbk.l_xchng_can_qty = l_ftd_ord_exe_qty;

		********** Commented ver 4.2 Ends ************/

		i_returncode = fn_acall_svc ( c_ServiceName,
								  c_err_msg,
								  &st_cvr_xchngbk,
								  "vw_xchngbook",
								  sizeof ( st_cvr_xchngbk),
								  TPNOREPLY,
								  "SFO_FUT_ACK" );
		if ( i_returncode != 0 )
		{
			fn_userlog( c_ServiceName, "Error while calling SFO_FUT_ACK");
			fn_errlog ( c_ServiceName, "S31555", SQLMSG, ptr_st_err_msg->c_err_msg );
			fn_aborttran( c_ServiceName, i_trnsctn, ptr_st_err_msg->c_err_msg );
			tpreturn(TPFAIL, ERR_BFR, (char *)&ptr_st_err_msg, 0, 0 );
		}
	 }
	}
	/** Ver 3.5 Ends**/ 

  /*** Ver 5.6 starts ***/
  if(ptr_st_tradebook->c_prd_typ == SLTP_FUTUREPLUS && (c_fc_flg == 'C' || c_fc_flg == 'T') )
  {
    fn_userlog( c_ServiceName, "Cancel Cover/Profit for fresh ref:%s:",c_frsh_ordr_rfrnc);
    if (c_fc_flg == 'C')
    {
      EXEC SQL
        select FOD_ORDR_RFRNC
        INTO
        :c_can_ordr_ref
        from FOD_FO_ORDR_DTLS
        where
        FOD_FC_FLAG= 'T'
        and FOD_ORDR_STTS in ('R','Q','P','O')
        and DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_frsh_ordr_rfrnc;
    }
    else if (c_fc_flg == 'T')
    {
      EXEC SQL
        select FOD_ORDR_RFRNC
        INTO
        :c_can_ordr_ref
        from FOD_FO_ORDR_DTLS
        where
        FOD_FC_FLAG= 'C'
        and FOD_ORDR_STTS in ('R','Q','P','O')
        and DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_frsh_ordr_rfrnc;
    }

    if(SQLCODE !=0 && SQLCODE !=NO_DATA_FOUND)
    {
      fn_errlog ( c_ServiceName, "S31560", SQLMSG, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }

    if( c_fc_flg == 'T' && st_orderbook.c_ordr_stts == 'P' && SQLCODE == NO_DATA_FOUND)
    {
      strcpy(c_can_ordr_ref, ptr_st_tradebook->c_ordr_rfrnc);
    }

    if (SQLCODE != NO_DATA_FOUND || (c_fc_flg == 'T' && st_orderbook.c_ordr_stts == 'P') )
    {
      if( c_fc_flg == 'T' && st_orderbook.c_ordr_stts == 'P' )
      {
        EXEC SQL
        SELECT  ( PAR_FO_PRFT_ORD_COOLIN_SEC - ( ( SYSDATE - MIN(FTD_TRD_DT) ) * 86400 ) ) * 1000
        INTO    :i_sleep_msec
        FROM    FTD_FO_TRD_DTLS, PAR_SYSTM_PRMTR
        WHERE   FTD_ORDR_RFRNC  = :ptr_st_tradebook->c_ordr_rfrnc
        GROUP BY PAR_FO_PRFT_ORD_COOLIN_SEC;

        if(SQLCODE !=0 && SQLCODE !=NO_DATA_FOUND)
        {
          fn_errlog ( c_ServiceName, "S31565", SQLMSG, ptr_st_err_msg->c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
        }

        if( i_sleep_msec > 0 )
        {

          fn_userlog( c_ServiceName, "Sleep in profit partExec - Place Cancellation of :%s:",c_can_ordr_ref);
          fn_userlog( c_ServiceName,"Sleep time |%ld|",i_sleep_msec);

          ptr_fml_Rbuf = ( FBFR32 * ) tpalloc( "FML32", NULL, MIN_FML_BUF_LEN );
          if ( ptr_fml_Rbuf == NULL )
          {
            fn_errlog ( c_ServiceName, "S31570", TPMSG, ptr_st_err_msg->c_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
          }

          strcpy(c_sys_msg,"SYS_EVENT");
          strcpy(c_remarks,"System placed Cancellation");
          c_nkd_blkd_flg = 'Z';
          i_returncode = fn_pack_vartofml ( c_ServiceName,
                                            c_err_msg,
                                            &ptr_fml_Rbuf,
                                            11,
                                            FFO_USR_ID, (char *)st_pstn_actn.c_user_id,
                                            FFO_SSSN_ID, (char *)&st_pstn_actn.l_session_id,
                                            FFO_XCHNG_CD,(char *)st_pstn_actn.c_xchng_cd,
                                            FFO_EBA_MTCH_ACT_NO,(char *)st_pstn_actn.c_cln_mtch_accnt,
                                            FFO_ORDR_RFRNC, (char *)c_can_ordr_ref,
                                            FFO_XCHNG_RMRKS, (char *)c_remarks,
                                            FFO_CHANNEL,(char *)st_pstn_actn.c_channel,
                                            FFO_ALIAS,(char *)st_pstn_actn.c_alias,
                                            FFO_MKT_TYP,(char *)&c_nkd_blkd_flg,
                                            FFO_PIPE_ID, (char *)st_orderbook.c_pipe_id,
                                            FFO_SYS_MSG, (char *)c_sys_msg);

          if(i_returncode == -1)
          {
            fn_userlog( c_ServiceName,"Error while calling fn_pack_vartofml  function..... for :%s:",c_can_ordr_ref);
            fn_errlog ( c_ServiceName, "S31575", LIBMSG, ptr_st_err_msg->c_err_msg );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
          }

          fn_userlog( c_ServiceName,"Calling fn_fno_sleep....");

          i_returncode =  fn_fno_sleep( c_ServiceName,
                                       &ptr_fml_Rbuf,
                                       (double)i_sleep_msec,
                                       1,
                                       ptr_st_tradebook->c_ordr_rfrnc,
                                       "SFO_CANCEL_FUT",
                                       c_err_msg);
          if(i_returncode == -1)
          {
            fn_userlog( c_ServiceName,"Error in calling sleep function..... for :%s:",c_can_ordr_ref);
            fn_errlog ( c_ServiceName, "S31580", LIBMSG, ptr_st_err_msg->c_err_msg );
           tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
          }
          fn_userlog( c_ServiceName,"After Calling fn_fno_sleep....");
          tpfree(( char *)ptr_fml_Rbuf);
       }
       else
       {

        fn_userlog( c_ServiceName, "Place Cancellation directly without sleeping for :%s:",c_can_ordr_ref);
        strcpy(c_remarks,"System placed Cancellation");
        strcpy(c_sys_msg,"SYS_EVENT");
        c_nkd_blkd_flg='Z';
        i_returncode = fn_acall_svc_fml ( c_ServiceName,
                                       ptr_st_err_msg->c_err_msg,
                                       "SFO_CANCEL_FUT",
                                       0,
                                       11,
                                       FFO_USR_ID, (char *)st_pstn_actn.c_user_id,
                                       FFO_SSSN_ID, (char *)&st_pstn_actn.l_session_id,
                                       FFO_XCHNG_CD,(char *)st_pstn_actn.c_xchng_cd,
                                       FFO_EBA_MTCH_ACT_NO,(char *)st_pstn_actn.c_cln_mtch_accnt,
                                       FFO_ORDR_RFRNC, (char *)c_can_ordr_ref,
                                       FFO_XCHNG_RMRKS, (char *)c_remarks,
                                       FFO_MKT_TYP,(char *)&c_nkd_blkd_flg,
                                       FFO_CHANNEL,(char *)st_pstn_actn.c_channel,
                                       FFO_ALIAS,(char *)st_pstn_actn.c_alias,
                                       FFO_PIPE_ID, (char *)st_orderbook.c_pipe_id,
                                       FFO_SYS_MSG, (char *)c_sys_msg);
        if ( i_returncode != SUCC_BFR )
        {
          fn_errlog ( c_ServiceName, "S31585", LIBMSG, ptr_st_err_msg->c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
        }
       }
      }
      else
      {
        fn_userlog( c_ServiceName, "Place Cancellation of :%s:",c_can_ordr_ref);
        strcpy(c_remarks,"System placed Cancellation");
        strcpy(c_sys_msg,"SYS_EVENT");
        c_nkd_blkd_flg = 'Z';

        i_returncode = fn_acall_svc_fml ( c_ServiceName,
                                       ptr_st_err_msg->c_err_msg,
                                       "SFO_CANCEL_FUT",
                                       0,
                                       11,
                                       FFO_USR_ID, (char *)st_pstn_actn.c_user_id,
                                       FFO_SSSN_ID, (char *)&st_pstn_actn.l_session_id,
                                       FFO_XCHNG_CD,(char *)st_pstn_actn.c_xchng_cd,
                                       FFO_MKT_TYP,(char *)&c_nkd_blkd_flg,
                                       FFO_EBA_MTCH_ACT_NO,(char *)st_pstn_actn.c_cln_mtch_accnt,
                                       FFO_ORDR_RFRNC, (char *)c_can_ordr_ref,
                                       FFO_XCHNG_RMRKS, (char *)c_remarks,
                                       FFO_CHANNEL,(char *)st_pstn_actn.c_channel,
                                       FFO_ALIAS,(char *)st_pstn_actn.c_alias,
                                       FFO_PIPE_ID, (char *)st_orderbook.c_pipe_id,
                                       FFO_SYS_MSG, (char *)c_sys_msg);
        if ( i_returncode != SUCC_BFR )
        {
          fn_errlog ( c_ServiceName, "S31590", LIBMSG, ptr_st_err_msg->c_err_msg );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
        }
      }
    }
  }
  /*** Ver 5.6 ends ***/

	if( st_orderbook.c_ordr_stts == EXECUTED )
	{
		ptr_st_tradebook->c_oprn_typ = 'T';
	}
	else
	{
		ptr_st_tradebook->c_oprn_typ = 'P';
	}

  /*** Added for Order Routing ***/
	fn_cpy_ddr ( ptr_st_tradebook->c_rout_crt );

/****
	i_returncode = fn_acall_svc( c_ServiceName,
                               ptr_st_err_msg->c_err_msg,
  	                           ptr_st_tradebook,
   	                           "vw_tradebook",
   	                           sizeof( struct vw_tradebook),
   	                           (TPNOREPLY|TPNOTRAN),
   	                           "SFO_ML_FRMTTR" );****/
 	if ( i_returncode != SUCC_BFR )
 	{
   	fn_errlog ( c_ServiceName, "S31595", LIBMSG, c_err_msg );
/*****************
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
************/
 	}

  if ( st_pstn_actn.c_mtm_flag == NO_OPEN_ORDERS )
  {
  	sprintf(st_pstn_actn.c_imtm_rmrks,
		"SQUAREOFF ORDER [%s] EXECUTED ,TRADE REF - [%s], QTY - [%ld]", 
		ptr_st_tradebook->c_ordr_rfrnc, 
		ptr_st_tradebook->c_trd_rfrnc,
		ptr_st_tradebook->l_exctd_qty );

		sprintf( c_tag,"bat_intra_mtm_%s",st_pstn_actn.c_xchng_cd);

  	/************************************* 
		fn_cpy_ddr ( st_pstn_actn.c_rout_crt );
  	**************************************/

    i_returncode = fn_acall_svc_fml ( c_ServiceName,
                                      ptr_st_err_msg->c_err_msg,
                                      "SFO_PRCS_FIMTM",
                                      /***0, *** Ver 4.5 ***/
                                      TPNOTRAN|TPNOREPLY, /*** Ver 4.5 ***/
                                      10,			/***	Converted From 9 To 10 For Ver 1.6	***/
                   FFO_XCHNG_CD, ( char * )st_pstn_actn.c_xchng_cd,
                   FFO_EBA_MTCH_ACT_NO, ( char *)st_pstn_actn.c_cln_mtch_accnt,
                   FFO_PRDCT_TYP, ( char * )&st_pstn_actn.c_prd_typ,
                   FFO_UNDRLYNG, ( char * )st_pstn_actn.c_undrlyng,
                   FFO_CTGRY_INDSTK, ( char * )&st_pstn_actn.c_ctgry_indstk,
                   FFO_CNTRCT_TAG, ( char * )&st_pstn_actn.c_cntrct_tag,
                   FFO_IMTM_RMRKS, ( char * )st_pstn_actn.c_imtm_rmrks,
                   FFO_PIPE_ID, ( char * )st_orderbook.c_pipe_id,
                   FFO_SPL_FLG,(char *)&c_prc_flg,     /***  Ver 1.6 ***/
                   FFO_BAT_TAG, ( char * )c_tag);
    if ( i_returncode != SUCC_BFR )
    {
  		fn_errlog ( c_ServiceName, "S31600", LIBMSG, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }
  }

  /***** Ver 3.1 Starts here ****/
  if( 
      ( strcmp(st_orderbook.c_channel, "SYS") == 0 )      &&
        st_orderbook.c_spl_flg == 'M'
    )
  {
    fo_ins_sqofford(c_ServiceName,c_err_msg,&st_orderbook,'D',st_pstn_actn.c_cntrct_tag);
  }
  /***** Ver 3.1 Ends here ****/

/*** Start for Ver 2.5 ***/

	if (st_orderbook.c_ordr_stts == EXECUTED && !(strcmp(st_orderbook.c_channel,"SYS") == 0 || strcmp(st_orderbook.c_ctcl_id,"111111111111") == 0 || strcmp(st_orderbook.c_ctcl_id,"1111111111111") == 0 || strcmp(st_orderbook.c_ctcl_id,"333333333333") == 0))
	{

    if(DEBUG_MSG_LVL_3)   /*** Ver 3.9 ***/ 
    {
	  	fn_userlog(c_ServiceName,"Inside SMS Condition");
		}

		d_ord_lmt_rt = (double) st_orderbook.l_ord_lmt_rt;		

    i_returncode = fn_acall_svc_fml ( c_ServiceName,
                                      ptr_st_err_msg->c_err_msg,
                                      "SVC_SET_SMSALRT",
                                      0,
                                      17,
                   	FML_ORD_CLM_MTCH_ACCNT, (char *)st_orderbook.c_cln_mtch_accnt,
                   	FML_PRDCT_TYP, ( char * )&st_orderbook.c_prd_typ,
                   	FML_ORD_STCK_CD, ( char * )st_orderbook.c_undrlyng,
										FML_EXPIRY_DATE, (char *)st_orderbook.c_expry_dt,
										FML_ORD_PRDCT_TYP, (char *)&st_orderbook.c_exrc_typ,
										FML_TRN_PRDT_TYP, (char *)&st_orderbook.c_opt_typ,
										FML_TRADE_PRICE, (char *)&st_orderbook.l_strike_prc,
										FML_ORD_ORDR_RFRNC, (char *)st_orderbook.c_ordr_rfrnc,
										FML_TOTAL_QTY, (char *)&st_orderbook.l_ord_tot_qty,
										FML_ORD_TRD_DT, (char *)st_orderbook.c_trd_dt,
										FML_ORD_ORDR_STTS, (char *)&st_orderbook.c_ordr_stts,
										FML_EXEC_QTY, (char *)&st_orderbook.l_exctd_qty,
										FML_CANC_QTY, (char *)&st_orderbook.l_can_qty,
										FML_EXPR_QTY, (char *)&st_orderbook.l_exprd_qty,
										FML_ORD_ORDR_FLW,(char *)&st_orderbook.c_ordr_flw,
										FML_ORD_LMT_RT,(char *)&d_ord_lmt_rt,
										FML_ORD_LMT_MRKT_FLG,(char *)&st_orderbook.c_slm_flg);

    if ( i_returncode != SUCC_BFR )
    {
      fn_errlog ( c_ServiceName, "S31605", LIBMSG, ptr_st_err_msg->c_err_msg );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_st_err_msg, 0, 0 );
    }

	}

    if(DEBUG_MSG_LVL_0)  /*** Ver 3.9 ***/ 
    {
  		fn_userlog(c_ServiceName,"Successfully Completed");
		}
/*** End for Ver 2.5 ***/
	tpfree ( ( char * ) ptr_st_err_msg );
  tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_st_tradebook, 0, 0 );
} 
