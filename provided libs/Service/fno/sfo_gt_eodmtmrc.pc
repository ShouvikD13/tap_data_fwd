/******************************************************************************/
/*	Program	    			:	SFO_GT_EODMTMRC                                       */
/*                                                                            */
/*  Input             : FFO_XCHNG_CD                                          */
/*                                                                            */
/*  Output            : FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_EXPRY_DT                                          */
/*                      FFO_EXER_TYP                                          */
/*                      FFO_CNTRCT_TAG                                        */
/*                      FFO_CTGRY_INDSTK                                      */
/*                                                                            */
/*  Description       : To get the records for running the End-of-day MTM     */
/*                      and pass it on to the Calling batch program           */
/*                                                                            */
/*  Log               :                                                       */
/*                                                                            */
/******************************************************************************/
/* 18-Dec-2001     Ver 1.0        Vinod Banjan      Release 1.0               */
/* 20-Dec-2007		 Ver 1.1				Ranjit 						IBM Migration							*/
/* 25-Jul-2018		 Ver 1.2				Mrinal Kishore		EOD MTM AND SPLIT merger	*/
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
/*Add header files here */

#include <fo.h>
#include <fo_fml_def.h>
#include <fml_def.h>
#include <fn_battmpt.h>
#include <fn_tuxlib.h>
#include <fn_log.h>     /* ver 1.1 */
#include <fn_read_debug_lvl.h>	/* ver 1.1 */

void SFO_GT_EODMTMRC( TPSVCINFO *rqst )
{

  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;

  char c_ServiceName [ 33 ];
  char c_err_msg [ 256 ];
	varchar c_trade_dt[12];         /** Ver 1.2 **/
	MEMSET(c_trade_dt);							/** Ver 1.2 **/

  int i_returncode;

  EXEC SQL BEGIN DECLARE SECTION;
    char c_xchng_cd [ 4 ];
    char sql_clm_mtch_accnt [ 11 ];
    char sql_xchng_cd [ 4 ];
    char sql_prdct_typ;
    char sql_undrlyng [ 7 ];
    varchar sql_expry_dt [ LEN_DATE ];
    char sql_exer_typ;
    char sql_indstk;
    char sql_cntrct_tag;

  EXEC SQL END DECLARE SECTION;

  ptr_fml_Ibuf = ( FBFR32 * )rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);		/* ver 1.1 */

  i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                    c_err_msg,
                                    ptr_fml_Ibuf,
                                    1,
                                    FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL);

  if( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31005", LIBMSG , c_err_msg );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }

 	if(DEBUG_MSG_LVL_3)
	{ 
    fn_userlog( c_ServiceName, "c_xchng_cd :%s:", c_xchng_cd );
 	} 

	ptr_fml_Obuf = NULL;
	/***  Ver 1.2 starts ***/
  EXEC SQL
    SELECT TO_CHAR(EXG_NXT_TRD_DT,'DD-Mon-YYYY')
    INTO   :c_trade_dt
    FROM   EXG_XCHNG_MSTR
    WHERE  EXG_XCHNG_CD = :c_xchng_cd
    AND    EXG_MKT_TYP = 'D';

  if ( SQLCODE != 0 )
  {
      fn_errlog( c_ServiceName, "S31010", SQLMSG, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  SETNULL(c_trade_dt);
  /***  Ver 1.2 end ***/

    EXEC SQL
      DECLARE cur_eodmtm_rec CURSOR FOR
      SELECT  ffp_clm_mtch_accnt,
							ffp_xchng_cd,
							ffp_prdct_typ,
							ffp_undrlyng,
							to_char(ffp_expry_dt,'DD-Mon-YYYY'),
							ffp_exer_typ,
							ffp_cntrct_tag,
							ffp_indstk
			FROM		ffp_fo_futures_pstn,FTQ_FO_TRD_QT			/*** FTQ_FO_TRD_QT added in Ver 1.2 ***/
			WHERE		ffp_xchng_cd = :c_xchng_cd
			AND			ffp_opnpstn_qty != 0
			AND			(NVL(FFP_EODMTM_DT,(SYSDATE+1)) != to_date(:c_trade_dt,'DD-Mon-yyyy')	/*** Ver 1.2 ***/
			OR    	FTQ_CLS_PRC != (FFP_MTM_OPN_VAL / FFP_OPNPSTN_QTY))		/*** Ver 1.2 ***/
			AND    	FFP_XCHNG_CD    = FTQ_XCHNG_CD												/*** Ver 1.2 ***/
			AND    	FFP_PRDCT_TYP   = FTQ_PRDCT_TYP												/*** Ver 1.2 ***/
			AND    	FFP_INDSTK    	= FTQ_INDSTK													/*** Ver 1.2 ***/
			AND    	FFP_UNDRLYNG    = FTQ_UNDRLYNG												/*** Ver 1.2 ***/
			AND    	FFP_EXPRY_DT    = FTQ_EXPRY_DT												/*** Ver 1.2 ***/
			AND     FFP_EXER_TYP    = FTQ_EXER_TYP												/*** Ver 1.2 ***/
			ORDER BY ffp_expry_dt asc;

    EXEC SQL
      OPEN cur_eodmtm_rec;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    while(1)
    {
      EXEC SQL
        FETCH cur_eodmtm_rec
        INTO  :sql_clm_mtch_accnt,
              :sql_xchng_cd,
              :sql_prdct_typ,
              :sql_undrlyng,
              :sql_expry_dt,
              :sql_exer_typ,
              :sql_cntrct_tag,
              :sql_indstk;

        if( ( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
        {
          fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg );
          EXEC SQL
            CLOSE cur_eodmtm_rec;
          tpfree ( ( char * ) ptr_fml_Obuf );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
        if( SQLCODE == NO_DATA_FOUND )
        {
          break;
        }

				SETNULL ( sql_expry_dt );
				rtrim(sql_undrlyng);
				rtrim(sql_clm_mtch_accnt);
				rtrim(sql_xchng_cd);

        i_returncode = fn_pack_vartofml( c_ServiceName,
                                         c_err_msg,
                                         &ptr_fml_Obuf,
                                         8,
                             FFO_EBA_MTCH_ACT_NO, ( char * )sql_clm_mtch_accnt,
                             FFO_XCHNG_CD, ( char * )sql_xchng_cd,
                             FFO_PRDCT_TYP, ( char * )&sql_prdct_typ,
                             FFO_UNDRLYNG, ( char * )sql_undrlyng,
                             FFO_EXPRY_DT, ( char * )sql_expry_dt.arr,
                             FFO_EXER_TYP, ( char * )&sql_exer_typ,
                             FFO_CNTRCT_TAG, ( char * )&sql_cntrct_tag,
                             FFO_CTGRY_INDSTK, ( char * )&sql_indstk );

        if( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31025", LIBMSG, c_err_msg );
          EXEC SQL
            CLOSE cur_eodmtm_rec;
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }
     }

    EXEC SQL
      CLOSE cur_eodmtm_rec;
  tpreturn(TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
}

