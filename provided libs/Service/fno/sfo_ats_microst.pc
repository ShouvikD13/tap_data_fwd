/******************************************************************************/
/*  Program           : SFO_ATS_MICROST                                       */
/*                                                                            */
/*  Input             : FFO_USR_ID                                            */
/*                                                                            */
/*  Output            : FFO_COUNT                                             */
/*                                                                            */
/*  Description       : To collect the values to be shown on ATS microsite for*/
/*                      faster order placement                                */
/*                                                                            */
/*  Log               : 1.0  07-Jan-2010   Vidyayini Krish|Shailesh H.        */
/*                    : 1.1  24-Jun-2010   Shailesh H.  		      						*/
/*                    : 1.2  24-Jun-2010   Shailesh H.  		      						*/
/*                    : 1.3  21-Jul-2010   Shailesh H.  		      						*/
/*                    : 1.4  26-Jul-2010   Shailesh H.  		      						*/
/*                    : 1.5  06-Aug-2010   Shailesh H.  		      						*/
/*                    : 1.6  16-Sep-2010   Shailesh H.  		      						*/
/*										:	1.7	 03-Feb-2011	 Sandeep	P.												*/
/*										:	1.8	 22-Sep-2011	 Navina D.													*/
/*										: 1.9	 28-Sep-2011   Navina D.                          */
/*										:	2.0	 29-Feb-2012	 Sandeep P.													*/
/*										: 2.1  26-Nov-2012	 Vishnu  N.													*/
/*										: 2.2  30-Dec-2014	 Samip M  													*/
/*                    : 2.3  07-Aug-2015   Anand Dhopte                       */
/******************************************************************************/
/*  1.0  -  New release                                                       */
/*  1.1  -  Rectification in Implied Volatility cal'n													*/
/*  1.2  -  Enabling Indices in display of RollOver                           */
/*  1.3  -  Changes in Implied Vol cal'n																	  	*/
/*  1.4  -  Reverse the diff of implied vol difference cal'n & closing price  */
/*					column introduction																						  	*/
/*  1.5  -  Queries Optimization																					  	*/
/*  1.6  -  Get 3 Expiry dates of Enabled Contratcts only											*/
/*	1.7	 -	NO DATA FOUND Case Handeled In Case Service Fails To Get					*/
/*					3 Expiry Dates Of Enabled Contracts.															*/
/*  1.8  -  Excluding Global indices from ATS microsite												*/
/*  1.9  -  Change for decimal point error - SR22880518										    */
/*	2.0	 -	BSE Changes ( Exchange Code Handling )														*/
/*  2.1  -  Process optimization																							*/				
/*  2.2  -  View to FML changes																								*/
/*  2.3  -  Contract Master and Trade Quote Table Merger Changes              */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlca.h>
#include <atmi.h>
#include <fml32.h>
#include <fo.h> 
#include <fo_fml_def.h>
/** #include <fo_view_def.h> *** Commented for Ver 2.2 ***/
#include <fo_view_def.h>	/** Ver 2.2 **/
#include <fml_rout.h>				/** Ver 2.2 **/
#include <fn_log.h>
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_session.h>
#include <fn_read_debug_lvl.h>

/*#define SIZE_OF_ARRAY 100*/
#define MEMSET(A)  memset(&A,'\0',sizeof(A))
#define TOTAL_FML 30

struct st_ats_output
{
	char c_prdct_typ;
  char c_xchng_cd[4];  
  char c_ats_undrlyng[7];
  long l_ats_mkt_lot;
  char c_ats_actn_dt[23];
  char c_ats_tablename[5];
  double d_ats_price;
  double d_ats_prc_prcnt_chng;
  double d_ats_oi_chng;
  double d_ats_oi_prcnt_chng;
  double d_ats_vol_prcnt_chng;
  double d_ats_imp_vltly;
  double d_ats_imp_vltly_prcnt;
	char   c_exrc_typ;
	char   c_opt_typ;
	char   c_ind_stk;
	long   l_strk_prc;
};

/*******Function Declaration************/

void  trim(char *str);

int fn_get_TAF_values( char *c_ServiceName,
                       struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf,
											 FBFR32 * ptr_fml_Ibuf,
											 long   l_indicator
                     );

int fn_get_TNS_values( char *c_ServiceName,
                       struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf,
											 FBFR32 * ptr_fml_Ibuf,
											 long   l_indicator
                     );

int fn_get_LVNO_values( char *c_ServiceName,
                        struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf,
											  FBFR32 * ptr_fml_Ibuf,
											  long   l_indicator
                      );

int fn_get_ASO_values( char *c_ServiceName,
                       struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf,
											 FBFR32 * ptr_fml_Ibuf,
											 long   l_indicator
                     );

int fn_get_HRS_values( char *c_ServiceName,
                       struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf,
											 FBFR32 * ptr_fml_Ibuf,
											 long   l_indicator
                     );

int fn_get_filter_stocks( char *c_ServiceName,
                          struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf,	
											    FBFR32 * ptr_fml_Ibuf,
													long   l_indicator
                        );

int fn_get_ftq_val( char  *c_ServiceName,
                    struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf,
                    struct st_ats_output *ptr_output,
                    char   c_ftq_gt_ls_flg
                  );

int fn_calc_implied_volatility( char  *c_ServiceName,
                                struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf,
                                struct st_ats_output *ptr_output
                              );


long l_lvn_high_strk[5];
long l_lvn_low_strk[5];

void SFO_ATS_MICROST(TPSVCINFO *rqst)
{

	FBFR32 *ptr_fml_Ibuffer;
	FBFR32 *ptr_fml_Obuffer;
	
  char    c_ServiceName[33];
  char    c_err_msg[256];
	char    c_expiry_dt[12];
	char    c_qexpry_dt[12];
	char    c_expry_dt[3][12];

  int     i_err[TOTAL_FML];
  int     i_ferr[TOTAL_FML];
  int     i_loop = 0;
  int     i_count = 0;
  int     i_tot_rec = 0;
	int     i_returncode = 0;
	int     i_cnt = 0;

	long    l_call_no = 0;
	long    no_of_records = 0;
	long    l_obuflen = 0;

	char    c_table_name[5];
	char    c_table;
	char    c_ad_flag;

  struct vw_err_msg  st_err_msg;

	struct st_ats_output st_output;
	struct vw_cntrt_gen_inf st_cntrct_gen_inf;

	EXEC SQL INCLUDE "table/ftq_fo_trd_qt.h";
	EXEC SQL INCLUDE "table/mcm_mail_cat_mstr.h";

	EXEC SQL BEGIN DECLARE SECTION;
    struct  vw_usr_prfl st_usr_prfl;
		varchar sql_mcm_ordr_dtls[500+1];
  	short   ind_mcm_ordr_dtls;
  EXEC SQL END DECLARE SECTION;

  strcpy(c_ServiceName,"SFO_ATS_MICROST");

	/* Getting data from input buffer */

  ptr_fml_Ibuffer = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );

  /* Debug level is being read */
  INITDBGLVL(c_ServiceName);

/**To be removed after testing **/
/**Fprint32( ptr_fml_Ibuffer );**/

	/* Getting from FMLS into user profile structure */

	/*** Commented for Ver 2.2 *********
  i_returncode = Fvftos32( ptr_fml_Ibuffer, (char *) &st_usr_prfl, "vw_usr_prfl" );
	
	******* Ver 2.2 ******/

	/*** Added for Ver 2.2 ***/

	i_returncode = fn_unpack_fmltovar_dflt(c_ServiceName,
                                      c_err_msg,
                                      ptr_fml_Ibuffer,
                                      10,
                                      FFO_USR_ID,(char *)st_usr_prfl.c_user_id, "*",
                                      FFO_SSSN_ID,(char *)&st_usr_prfl.l_session_id, "NULL",
                                      FFO_PIPE_ID,(char *)st_usr_prfl.c_pipe_id, "*",
                                      FFO_EBA_MTCH_ACT_NO,(char *)st_usr_prfl.c_cln_mtch_accnt, "*",
                                      FFO_DPID,(char *)st_usr_prfl.c_dp_id, "*",
                                      FFO_CLNT_DPID,(char *)st_usr_prfl.c_dp_clnt_id, "*",
                                      FFO_BNK_ACT_NO,(char *)st_usr_prfl.c_bnk_accnt_nmbr, "*",
                                      FFO_CLNT_CTGRY,(char *)&st_usr_prfl.l_clnt_ctgry, "-1",
                                      FFO_USR_FLG,(char *)&st_usr_prfl.l_usr_flg, "0",
                                      FFO_ROUT_CRT,(char *)st_usr_prfl.c_rout_crt, "*"
                                      );

	/*** Ver 2.2 ***/

  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
  }


  if (st_usr_prfl.l_session_id !=0)  
  {
    i_returncode = fn_chk_sssn( c_ServiceName,
                                &st_usr_prfl,
                                &st_err_msg ) ;

    if ( i_returncode == -1 )
    {
      Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
    }
  }

	/* Initialising the variables used */

	MEMSET(c_table_name);

	for( i_loop = 0; i_loop < 3; i_loop++ )
  {
    MEMSET(c_expry_dt[i_loop]);
  }


  /* Reading data in FMLs obtained from ASP */

  if(Fget32(ptr_fml_Ibuffer,FFO_PRDCT_DESC,0,(char *)c_table_name,0) == -1)
  {
		if(Ferror32 != FNOTPRES)
    {
      fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );

    }

    if(Ferror32 == FNOTPRES)
    {
			/* The service is called normally and not for any search criteria */
      l_call_no = 0;                           
    }
  }
	else
	{
			/* The service is called for a particualr table data i.e for a search criteria */
			l_call_no = 1; 
	}
		fn_userlog(c_ServiceName,"ATS_MICROSITE STARTS");

/**Ver 1.5 xchng code and prdct type in Quries Optimization **/
  /*** Commented in Ver 2.3 ***
	EXEC SQL
       SELECT  FCM_EXPRY_DT
       INTO   :c_expry_dt
       FROM    (
                 SELECT DISTINCT(FCM_EXPRY_DT)
                 FROM   FCM_FO_CNTRCT_MSTR
								 WHERE  FCM_XCHNG_CD = 'NFO'
								 AND    FCM_PRDCT_TYP = 'F'
								 AND		FCM_UNDRLYNG  = 'NIFTY'   *** Ver 1.8 ***
								 AND    FCM_QT_TRDNG_FLG= 'T'			**Ver 1.6 **
                 ORDER BY FCM_EXPRY_DT
               )
       WHERE ROWNUM < 4;
    ***/
    /*** Ver 2.3 Starts ***/

    EXEC SQL
       SELECT  FTQ_EXPRY_DT
       INTO   :c_expry_dt
       FROM    (
                 SELECT DISTINCT(FTQ_EXPRY_DT)
                 FROM   FTQ_FO_TRD_QT     
                 WHERE  FTQ_XCHNG_CD = 'NFO'
                 AND    FTQ_PRDCT_TYP = 'F'
                 AND    FTQ_UNDRLYNG  = 'NIFTY'   
                 AND    FTQ_QT_TRDNG_FLG= 'T'   
                 ORDER BY FTQ_EXPRY_DT
               )
       WHERE ROWNUM < 4;   

    /*** Ver 2.3 Ends   ***/

  no_of_records = sqlca.sqlerrd[2];

  if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
  {
    fn_userlog( c_ServiceName,"Minimum three expiry dates are not present in system" );
    fn_errlog( c_ServiceName, "S31015", SQLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
  }
	else if ( SQLCODE == NO_DATA_FOUND )			/***	Ver	1.7	***/
	{
		fn_userlog( c_ServiceName,"INSIDE NO_DATA_FOUND CASE");
	
    /*** Commented in Ver 2.3 ***
	
		EXEC SQL
			SELECT	MAX(FCM_EXPRY_DT)
			INTO	  :c_qexpry_dt
			FROM		FCM_FO_CNTRCT_MSTR
			WHERE		FCM_XCHNG_CD = 'NFO'
      AND    	FCM_PRDCT_TYP = 'F'
			AND			FCM_UNDRLYNG  = 'NIFTY'   *** Ver 1.8 ***
			AND			FCM_QT_TRDNG_FLG	=	'Q'
			AND			FCM_EXPRY_DT	NOT IN (	SELECT DISTINCT (FCM_EXPRY_DT) 
																			FROM	FCM_FO_CNTRCT_MSTR
																			WHERE	FCM_XCHNG_CD = 'NFO'
																			AND		FCM_PRDCT_TYP = 'F'
																			AND		FCM_UNDRLYNG  = 'NIFTY'   *** Ver 1.8 ***
																			AND		FCM_QT_TRDNG_FLG= 'T'
	  																	);
	  ***/
    /*** Ver 2.3 Starts ***/

     EXEC SQL
      SELECT  MAX(FTQ_EXPRY_DT)
      INTO    :c_qexpry_dt
      FROM    FTQ_FO_TRD_QT     
      WHERE   FTQ_XCHNG_CD = 'NFO'
      AND     FTQ_PRDCT_TYP = 'F'
      AND     FTQ_UNDRLYNG  = 'NIFTY'   
      AND     FTQ_QT_TRDNG_FLG  = 'Q'
      AND     FTQ_EXPRY_DT  NOT IN (  SELECT DISTINCT (FTQ_EXPRY_DT)
                                      FROM  FTQ_FO_TRD_QT     
                                      WHERE FTQ_XCHNG_CD = 'NFO'
                                      AND   FTQ_PRDCT_TYP = 'F'
                                      AND   FTQ_UNDRLYNG  = 'NIFTY'  
                                      AND   FTQ_QT_TRDNG_FLG= 'T'
                                      );

    /*** Ver 2.3 Ends   ***/ 
  	if(SQLCODE != 0 )
		{
  		fn_userlog( c_ServiceName,"Minimum three expiry dates are not present in system" );
  		fn_errlog( c_ServiceName, "S31020", SQLMSG, c_err_msg  );
  		Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
  		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		}

		fn_userlog(c_ServiceName,"c_qexpry_dt IS :%s:",c_qexpry_dt);

		strcpy(c_expry_dt[2],c_qexpry_dt);

		fn_userlog(c_ServiceName,"c_expry_dt[2] IS :%s:",c_expry_dt[2]);
	}

	if(DEBUG_MSG_LVL_0) 
	{
		fn_userlog( c_ServiceName,"First expiry date is :%s:", c_expry_dt[0] );
		fn_userlog( c_ServiceName,"Second expiry date is :%s:", c_expry_dt[1] );
		fn_userlog( c_ServiceName,"Third expiry date is :%s:", c_expry_dt[2] );
	}

	/* Getting from FMLS into structure for contract general information */

	memset ( &st_cntrct_gen_inf, 0, sizeof ( struct vw_cntrt_gen_inf ) );
		fn_userlog( c_ServiceName,"Third expiry date is :%s:", c_expry_dt[2] );

	/*** Commented for Ver 2.2 ****
	i_returncode = Fvftos32( ptr_fml_Ibuffer, (char *) &st_cntrct_gen_inf, "vw_cntrt_gen_inf" );
	
	***** Ver 2.2 ***/

	/*** Added for Ver 2.2 ***/

  i_returncode = fn_unpack_fmltovar_dflt(c_ServiceName,
                                      c_err_msg,
                                      ptr_fml_Ibuffer,
																      26,
																  FFO_EBA_CNTRCT_ID,(char *)&st_cntrct_gen_inf.l_eba_cntrct_id,"-1",
																  FFO_XCHNG_CD,(char *)st_cntrct_gen_inf.c_xchng_cd,"*",
																  FFO_PRDCT_TYP,(char *)&st_cntrct_gen_inf.c_prd_typ,"*",
																  FFO_UNDRLYNG,(char *)st_cntrct_gen_inf.c_undrlyng,"*",
																  FFO_EXPRY_DT,(char *)st_cntrct_gen_inf.c_expry_dt,"*",
																  FFO_EXER_TYP,(char *)&st_cntrct_gen_inf.c_exrc_typ,"*",
																  FFO_OPT_TYP,(char *)&st_cntrct_gen_inf.c_opt_typ,"-",
																  FFO_STRK_PRC,(char *)&st_cntrct_gen_inf.l_strike_prc,"-1",
																  FFO_CTGRY_INDSTK,(char *)&st_cntrct_gen_inf.c_ctgry_indstk,"*",
																  FFO_CA_LVL,(char *)&st_cntrct_gen_inf.l_ca_lvl,"-1",
																  FFO_PRMTD_TO_TRD,(char *)&st_cntrct_gen_inf.l_prmtd_to_trd,"-1",
																  FFO_CNTRCT_STTS,(char *)&st_cntrct_gen_inf.l_stts,"-1",
																  FFO_MIN_LOT_QTY,(char *)&st_cntrct_gen_inf.l_min_lot_qty,"-1",
																  FFO_BOARD_LOT_QTY,(char *)&st_cntrct_gen_inf.l_board_lot_qty,"-1",
																  FFO_TCK_SZ,(char *)&st_cntrct_gen_inf.l_tick_sz,"-1",
																  FFO_RCRD_DT,(char *)st_cntrct_gen_inf.c_record_dt,"*",
																  FFO_ND_STRT_DT,(char *)st_cntrct_gen_inf.c_nd_strt_dt,"*",
																  FFO_ND_END_DT,(char *)st_cntrct_gen_inf.c_nd_end_dt,"*",
																  FFO_BK_CLS_STRT_DT,(char *)st_cntrct_gen_inf.c_bk_cls_strt_dt,"*",
																  FFO_BK_CLS_END_DT,(char *)st_cntrct_gen_inf.c_bk_cls_end_dt,"*",
																  FFO_SETLMNT_NO,(char *)&st_cntrct_gen_inf.l_setl_stlmnt_no,"-1",
																  FFO_MULTPLR,(char *)&st_cntrct_gen_inf.l_multplr,"-1",
																  FFO_RQST_TYP,(char *)&st_cntrct_gen_inf.c_rqst_typ,"*",
																  FFO_HGH_PRC_RNG,(char *)&st_cntrct_gen_inf.l_hgh_prc_rng,"-1",
																  FFO_LOW_PRC_RNG,(char *)&st_cntrct_gen_inf.l_low_prc_rng,"-1",
																  FFO_ROUT_CRT,(char *)st_cntrct_gen_inf.c_rout_crt,"*"
																  );

	/**** Ver 2.2 ***/

	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31025", FMLMSG, c_err_msg  );
		Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
	}


	if( l_call_no == 1 )
	{

		/* Initializing output buffer */

  	ptr_fml_Obuffer = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*5 );

  	if ( ptr_fml_Obuffer == NULL )
  	{
    	fn_errlog( c_ServiceName, "S31030", TPMSG, c_err_msg  );
    	Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
  	}

		/*st_cntrct_gen_inf.l_strike_prc = st_cntrct_gen_inf.l_strike_prc * 100;*/  /*** Ver 1.9 ***/

		if(DEBUG_MSG_LVL_0)
    {
			fn_userlog(c_ServiceName,"c_xchng_cd:%s:",st_cntrct_gen_inf.c_xchng_cd);
			fn_userlog(c_ServiceName,"c_prd_typ:%c:",st_cntrct_gen_inf.c_prd_typ);
			fn_userlog(c_ServiceName,"c_undrlyng:%s:",st_cntrct_gen_inf.c_undrlyng);
			fn_userlog(c_ServiceName,"c_expry_dt:%s:",st_cntrct_gen_inf.c_expry_dt);
			fn_userlog(c_ServiceName,"c_exrc_typ:%c:",st_cntrct_gen_inf.c_exrc_typ);
			fn_userlog(c_ServiceName,"c_opt_typ:%c:",st_cntrct_gen_inf.c_opt_typ);
			fn_userlog(c_ServiceName,"l_strike_prc:%ld:",st_cntrct_gen_inf.l_strike_prc);
			fn_userlog(c_ServiceName,"c_ctgry_indstk:%c:",st_cntrct_gen_inf.c_ctgry_indstk);
		}

		if( strcmp(c_table_name,"TAF") == 0)
		{
		 c_table = 'T';
		}
		else if( strcmp(c_table_name,"LVNO") == 0)
		{
		 c_table = 'L';
		}
		else if( strcmp(c_table_name,"ASO") == 0)
		{
		 c_table = 'A';
		}
		else if ( strcmp(c_table_name,"HRS") == 0)
		{
     strcpy(st_cntrct_gen_inf.c_expry_dt,c_expry_dt[0]);			/**Ver 1.2 **/
		 c_table = 'H';
		}
		else if ( strcmp(c_table_name,"FS") == 0)
    {
     strcpy(st_cntrct_gen_inf.c_expry_dt,c_expry_dt[0]);
     c_table = 'F';
		 l_call_no = 0;

		 if(DEBUG_MSG_LVL_0)
		 {
		   fn_userlog(c_ServiceName,"FS: Current c_expry_dt:%s:",st_cntrct_gen_inf.c_expry_dt);
		 }

		 if(Fget32(ptr_fml_Ibuffer,FFO_COUNTER,0,(char *)&l_call_no,0) == -1)
  	 {
       fn_errlog( c_ServiceName, "S31035", FMLMSG, c_err_msg  );
       Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
  	 }
    }
		else
		{
		  fn_userlog( c_ServiceName,"Invalid table name in Input buffer" );
      fn_errlog( c_ServiceName, "S31040", SQLMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
		}

		switch( c_table )
		{

			case 'T':

						i_returncode = fn_get_TAF_values( c_ServiceName,&st_cntrct_gen_inf,ptr_fml_Obuffer,l_call_no );

    				if ( i_returncode == -1 )
    				{
      				fn_errlog( c_ServiceName, "S31045", DEFMSG, c_err_msg  );
      				Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
      				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
    				}

						tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuffer, 0, 0 );	

						break;			

			case 'L':

					  i_returncode = fn_get_LVNO_values( c_ServiceName,&st_cntrct_gen_inf,ptr_fml_Obuffer,l_call_no );

    				if ( i_returncode == -1 )
    				{
     					fn_errlog( c_ServiceName, "S31050", DEFMSG, c_err_msg  );
     					Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
     					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
    				}

					  tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuffer, 0, 0 );	
						break;	

			case 'A':

						i_returncode = fn_get_ASO_values( c_ServiceName,&st_cntrct_gen_inf,ptr_fml_Obuffer,l_call_no );

    				if ( i_returncode == -1 )
    				{
     					fn_errlog( c_ServiceName, "S31055", DEFMSG, c_err_msg  );
     					Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
     					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
    				}

						tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuffer, 0, 0 );	
						break;

			case 'H':
						
						i_returncode = fn_get_HRS_values( c_ServiceName,&st_cntrct_gen_inf,ptr_fml_Obuffer,l_call_no );

    				if ( i_returncode == -1 )
    				{
     					fn_errlog( c_ServiceName, "S31060", DEFMSG, c_err_msg  );
     					Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
     					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
    				}

						tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuffer, 0, 0 );	
						break;

			case 'F':

						ptr_fml_Obuffer = (FBFR32 *)tprealloc((char *)ptr_fml_Obuffer, 
															 Fsizeof32(ptr_fml_Obuffer) + (10 * MIN_FML_BUF_LEN) );

						i_returncode = fn_get_filter_stocks( c_ServiceName,&st_cntrct_gen_inf,ptr_fml_Obuffer,l_call_no );

    				if ( i_returncode == -1 )
    				{
      				fn_errlog( c_ServiceName, "S31065", DEFMSG, c_err_msg  );
      				Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
      				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
    				}

						tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuffer, 0, 0 );
						break;

			default:

							fn_userlog( c_ServiceName,"Inside Invalid Case" );
       				fn_errlog( c_ServiceName, "S31070", SQLMSG, c_err_msg  );
       				Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
       			  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
							break;
		 }

	}
	else if( l_call_no == 0 ) /* General call ; not for a particular search */
	{
		/* Initializing output buffer */

    ptr_fml_Obuffer = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*20 );
    if ( ptr_fml_Obuffer == NULL )
    {
      fn_errlog( c_ServiceName, "S31075", TPMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
    }

		memset(&st_cntrct_gen_inf,0,sizeof(struct vw_cntrt_gen_inf));
		strcpy(st_cntrct_gen_inf.c_expry_dt,c_expry_dt[0]);

		/********************************Get Values for Top Active Futures**********************************************/

		i_returncode = fn_get_TAF_values( c_ServiceName,&st_cntrct_gen_inf,ptr_fml_Obuffer,l_call_no );
		if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31080", DEFMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
    }

		/********************************Get Values for Top Nifty Strikes***********************************************/
		
		memset(&st_cntrct_gen_inf,0,sizeof(struct vw_cntrt_gen_inf));
		strcpy(st_cntrct_gen_inf.c_expry_dt,c_expry_dt[0]);

		i_returncode = fn_get_TNS_values( c_ServiceName,&st_cntrct_gen_inf,ptr_fml_Obuffer,l_call_no );
		if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31085", DEFMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
    }

		/********************************Get Values for Low Value Nifty Options*****************************************/
		memset(&st_cntrct_gen_inf,0,sizeof(struct vw_cntrt_gen_inf));

		/*****************Low Value Nifty CALL Options********************/
		strcpy( st_cntrct_gen_inf.c_undrlyng,"NIFTY" );
    st_cntrct_gen_inf.c_ctgry_indstk = 'I';
		st_cntrct_gen_inf.c_prd_typ = 'O';
		strcpy( c_table_name,"LVNO" );
   	strcpy(st_cntrct_gen_inf.c_expry_dt,c_expry_dt[0]);

		if(DEBUG_MSG_LVL_0)
		{
   		fn_userlog( c_ServiceName,"LVNO:START" );
		}

		for( i_count = 0; i_count < 5; i_count++ )
		{
			/*****Initialise contract information ******************/

			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog(c_ServiceName,"SHAILESH:l_lvn_high_strk[%d]:%ld",i_count,l_lvn_high_strk[i_count]);
			}
			st_cntrct_gen_inf.l_strike_prc = l_lvn_high_strk[i_count];
      st_cntrct_gen_inf.c_opt_typ = 'C';

			if( st_cntrct_gen_inf.l_strike_prc != 0 )
			{
				i_returncode = fn_get_LVNO_values( c_ServiceName,&st_cntrct_gen_inf,ptr_fml_Obuffer,l_call_no );

				if ( i_returncode == -1 )
				{
					fn_errlog( c_ServiceName, "S31090", DEFMSG, c_err_msg  );
					Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
				}
			}

		}

		/************Low Value Nifty PUT Options******************/

		for( i_count = 0; i_count < 5; i_count++ )
		{
			/*****Initialise contract information ******/
			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog(c_ServiceName,"SHAILESH:l_lvn_low_strk[%d]:%ld",i_count,l_lvn_low_strk[i_count]);
			}

			st_cntrct_gen_inf.l_strike_prc = l_lvn_low_strk[i_count];
			st_cntrct_gen_inf.c_opt_typ = 'P';
			if( st_cntrct_gen_inf.l_strike_prc != 0 )
			{
				i_returncode = fn_get_LVNO_values( c_ServiceName,&st_cntrct_gen_inf,ptr_fml_Obuffer,l_call_no );
				if ( i_returncode == -1 )
				{
					fn_errlog( c_ServiceName, "S31095", DEFMSG, c_err_msg  );
					Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
				}
			}
		}

		if(DEBUG_MSG_LVL_0)
		{
    	fn_userlog( c_ServiceName,"LVNO:END" );
	  }	
	
		/****************************Get Values for Active Stock Options*********************************/
		memset(&st_cntrct_gen_inf,0,sizeof(struct vw_cntrt_gen_inf));
   	strcpy(st_cntrct_gen_inf.c_expry_dt,c_expry_dt[0]);

		i_returncode = fn_get_ASO_values( c_ServiceName,&st_cntrct_gen_inf,ptr_fml_Obuffer,l_call_no );

		if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31100", DEFMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
    }

		/****************************Get Values for High RollOver Stocks*******************************/
		memset(&st_cntrct_gen_inf,0,sizeof(struct vw_cntrt_gen_inf));
   	strcpy(st_cntrct_gen_inf.c_expry_dt,c_expry_dt[0]);

		i_returncode = fn_get_HRS_values( c_ServiceName,&st_cntrct_gen_inf,ptr_fml_Obuffer,l_call_no );

		if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31105", DEFMSG, c_err_msg  );
      Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
    }

	}
	else
	{
		fn_userlog( c_ServiceName,"Invalid Value of i_call" );
		fn_errlog( c_ServiceName, "S31110", SQLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
	}

	/*-------------------Get data for Derivatives Recommendations--------------------------------------------------*/

	strcpy(c_table_name,"ATS");
	c_ad_flag = 'A';

	EXEC SQL
			DECLARE cur_ats_recomm CURSOR FOR
			SELECT  TO_CHAR(MCM_DISPLAY_DATE,'DD-MON-YYYY HH24:MI'),
							MCM_MAIL_CAT_MSG,
							MCM_ORDER_DETAILS
			FROM 		MCM_MAIL_CAT_MSTR
			WHERE		MCM_MAIL_CAT_ID = :c_table_name                      
			AND			MCM_MAIL_ENABLE_DISABLE_FLG = :c_ad_flag
			ORDER BY  MCM_DISPLAY_DATE DESC;

	EXEC SQL OPEN cur_ats_recomm;
	if(SQLCODE != 0)
  {
    fn_errlog(c_ServiceName, "S31115", SQLMSG,c_err_msg);
    EXEC SQL CLOSE cur_ats_recomm;
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuffer, 0, 0 );
  }
			
	while( 1 )
	{
		MEMSET( sql_mcm_display_date );
		MEMSET( sql_mcm_mail_cat_msg );
		MEMSET( sql_mcm_ordr_dtls );

		EXEC SQL
			FETCH cur_ats_recomm
			INTO  :sql_mcm_display_date :ind_mcm_display_date,
						:sql_mcm_mail_cat_msg :ind_mcm_mail_cat_msg,
						:sql_mcm_ordr_dtls :ind_mcm_ordr_dtls;

		if(SQLCODE != 0)
    {
      if(SQLCODE == NO_DATA_FOUND)
      {
        break;
      }
		  fn_errlog( c_ServiceName, "S31120", SQLMSG, c_err_msg  );
      EXEC SQL CLOSE cur_ats_recomm;
    	Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, 0L, (char *)ptr_fml_Ibuffer, 0L, 0);
    }

		if(DEBUG_MSG_LVL_3)
  	{	
    	fn_userlog( c_ServiceName, "mssg is  |%s|", sql_mcm_mail_cat_msg.arr );
    	fn_userlog( c_ServiceName, "date is |%s|", sql_mcm_display_date.arr );
    	fn_userlog( c_ServiceName, "order is |%s|", sql_mcm_ordr_dtls.arr );
  	}

		i_err[0]  = Fadd32(ptr_fml_Obuffer, FFO_IMTM_RMRKS, (char *)sql_mcm_mail_cat_msg.arr,0);
  	i_err[1]  = Fadd32(ptr_fml_Obuffer, FFO_CLOSURE_DT,(char *)sql_mcm_display_date.arr,0);
  	i_err[2]  = Fadd32(ptr_fml_Obuffer, FFO_REFACK_DTLS,(char *)sql_mcm_ordr_dtls.arr,0);

  	for(i_loop=0;i_loop<3;i_loop++)
  	{
    	if(i_err[i_loop]==-1)
    	{
      	fn_userlog( c_ServiceName, "Error in Fget for i_loop=%d", i_loop);
		    fn_errlog( c_ServiceName, "S31125", SQLMSG, c_err_msg  );
      	EXEC SQL CLOSE cur_ats_recomm;
    		Fadd32( ptr_fml_Ibuffer, FFO_ERR_MSG, c_err_msg, 0 );
       	tpreturn(TPFAIL,0L,(char *)ptr_fml_Ibuffer,0L,0) ;
    	}	
  	}
	}

/**To be removed after testing **/
/**Fprint32( ptr_fml_Obuffer );**/

	tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuffer, 0L, 0 );
}


int fn_get_TAF_values( char   *c_ServiceName, 
											 struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf,
											 FBFR32 * ptr_fml_Ibuf,
											 long   l_indicator
										 )
{
	int i = 0;
	int i_err[TOTAL_FML];
	int i_count = 0;
	int i_cnt = 0;
		
	long l_bufferlength = 0;
	long l_strike_prc = 0;

	long l_temp_vol = 0;

	char   c_err_msg[256];
	char   c_tablename[4];

	/***Following Variables are used to ease work at ASP end, no value is being used from it **/	
	char   c_opt_typ = '*';
	char   c_prd_typ = 'F';
	char   c_exercise_type = 'E';
	char   c_qt_trdng_flg;
	double d_implied_volatility_per = 0.0;
	double d_implied_volatility     = 0.0;


	struct st_ats_output st_output;

	memset( c_tablename,'\0',sizeof(c_tablename) );
	memset( &st_output,0,sizeof( struct st_ats_output ) );

	strcpy( c_tablename,"TAF" );


	if( l_indicator == 0 )
	{
		ptr_st_cntrct_gen_inf->c_prd_typ = c_prd_typ;	

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog( c_ServiceName,"TAF:Cntrct call:%ld: Expiry Date:%s:  Prdct Type:%c:",l_indicator,ptr_st_cntrct_gen_inf->c_expry_dt,ptr_st_cntrct_gen_inf->c_prd_typ );
		}

		/** All contracts are sorted on "Number of shares" basis ie "(total qty traded)/lot size" **/
		EXEC SQL
			 	 DECLARE cur_ats_taf CURSOR FOR 
			   SELECT  FTQ_UNDRLYNG,
							   FTQ_MIN_LOT_QTY,
                 FTQ_EXPRY_DT,
							   :c_tablename,
                 NVL(FTQ_LST_TRD_PRC/100,0),
                 CASE WHEN NVL(FTQ_ATS_CLS_PRC,0) = 0 THEN 0 ELSE (((NVL(FTQ_LST_TRD_PRC,0)-FTQ_ATS_CLS_PRC)*100)/FTQ_ATS_CLS_PRC) END,	/*Ver 1.4 */
                 NVL(FTQ_CRNT_OI,0),
                 CASE WHEN NVL(FTQ_CLS_OI,0) = 0 THEN 0 ELSE ((NVL(FTQ_CRNT_OI,0)-FTQ_CLS_OI)*100)/FTQ_CLS_OI END,
                 CASE WHEN NVL(FTQ_CLS_TRD_QTY,0) = 0 THEN 0 ELSE ((NVL(FTQ_TOT_QTY_TRDD,0)-NVL(FTQ_CLS_TRD_QTY,0))*100/FTQ_CLS_TRD_QTY) END,
								 FTQ_INDSTK,
								 CASE WHEN NVL(FTQ_MIN_LOT_QTY,0) = 0 THEN 0 ELSE NVL(FTQ_TOT_QTY_TRDD,0)/FTQ_MIN_LOT_QTY END,
                 FTQ_QT_TRDNG_FLG             /*** Ver 2.3 ***/
         FROM    FTQ_FO_TRD_QT
				 WHERE   FTQ_XCHNG_CD = 'NFO'     /**Ver 1.5, Optimization of Queries **/
         AND     FTQ_PRDCT_TYP = :ptr_st_cntrct_gen_inf->c_prd_typ 
         /*AND     FTQ_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt */
         ORDER BY 11 DESC;

    EXEC SQL
         OPEN cur_ats_taf;		

	  if(SQLCODE != 0)
    {
      fn_errlog(c_ServiceName, "S31130", SQLMSG,c_err_msg);
			EXEC SQL CLOSE cur_ats_taf;
		  return -1;
    }

	  for( i_count = 0; i_count < 10; i_count++ )
	  {
			memset( &st_output,0,sizeof( struct st_ats_output ) );

		  EXEC SQL
           FETCH cur_ats_taf
           INTO  :st_output.c_ats_undrlyng,
                 :st_output.l_ats_mkt_lot,
                 :st_output.c_ats_actn_dt,
                 :st_output.c_ats_tablename,
                 :st_output.d_ats_price,
                 :st_output.d_ats_prc_prcnt_chng,
                 :st_output.d_ats_oi_chng,
                 :st_output.d_ats_oi_prcnt_chng,
                 :st_output.d_ats_vol_prcnt_chng,
                 :st_output.c_ind_stk,
								 :l_temp_vol,
                 :c_qt_trdng_flg ;                             /*** Ver 2.3 ***/

			if( SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND ) /* 1405 :Null data error , we will proceed */
  		{
       fn_errlog(c_ServiceName, "S31135", SQLMSG, c_err_msg);
			 EXEC SQL CLOSE cur_ats_taf;
       return (-1);
  		}
			if( SQLCODE == -1405 )
			{
				fn_userlog( c_ServiceName,"Inside NULL data for:%s:%s:%d:",st_output.c_ats_undrlyng,st_output.c_ats_actn_dt,i_count);
				i_count = i_count - 1;
				continue;
			}
			if( SQLCODE == NO_DATA_FOUND )
      {
				fn_userlog( c_ServiceName,"No data found" );
				EXEC SQL CLOSE cur_ats_taf;
				return (0);
      }

			trim( st_output.c_ats_actn_dt );

			
			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName,"TAF:Underlying:%d:%s:",i_count,st_output.c_ats_undrlyng );
				fn_userlog( c_ServiceName,"TAF:Lot size:%d:%ld:",i_count,st_output.l_ats_mkt_lot );
				fn_userlog( c_ServiceName,"TAF:Expiry date:%d:%s:",i_count,st_output.c_ats_actn_dt );
				fn_userlog( c_ServiceName,"TAF:Table:%d:%s:",i_count,st_output.c_ats_tablename );
				fn_userlog( c_ServiceName,"TAF:Price:%d:%lf:",i_count,st_output.d_ats_price );
				fn_userlog( c_ServiceName,"TAF:Price Percentage:%d:%lf:",i_count,st_output.d_ats_prc_prcnt_chng );
				fn_userlog( c_ServiceName,"TAF:Current OI:%d:%lf:",i_count,st_output.d_ats_oi_chng );
				fn_userlog( c_ServiceName,"TAF:OI Percentage:%d:%lf:",i_count,st_output.d_ats_oi_prcnt_chng );
				fn_userlog( c_ServiceName,"TAF:Volume Percentage:%d:%lf:",i_count,st_output.d_ats_vol_prcnt_chng );
				fn_userlog( c_ServiceName,"TAF:Sort by Volume :%d:%ld:",i_count,l_temp_vol );
			}

      if(DEBUG_MSG_LVL_0)
      {
       fn_userlog( c_ServiceName," FTQ Trading Enable/Disable Flag1 Is :%c:",c_qt_trdng_flg); 
      }

      /*** Commented in Ver 2.3 and below column selected in select of cursor above *** 
			EXEC SQL
			SELECT FCM_QT_TRDNG_FLG
			INTO	 :c_qt_trdng_flg
			FROM   FCM_FO_CNTRCT_MSTR
			WHERE  FCM_XCHNG_CD ='NFO'											**Ver 1.5 Exchnage Code added in Quries Optimization **
			AND		 FCM_PRDCT_TYP = :c_prd_typ
			AND    FCM_UNDRLYNG  = :st_output.c_ats_undrlyng
			AND    FCM_EXPRY_DT  = :st_output.c_ats_actn_dt;
			if(SQLCODE !=0)
			{
			 fn_errlog(c_ServiceName, "S31140", SQLMSG, c_err_msg);
			 EXEC SQL CLOSE cur_ats_taf;
			 return (-1);
			}
      ***/

			if(c_qt_trdng_flg != 'T')
			{
				fn_userlog( c_ServiceName,"Skipping:contract is not enabled for trading:F::%s:%s:",st_output.c_ats_undrlyng,st_output.c_ats_actn_dt );
				i_count = i_count - 1;
				continue;
			}

		  i_err[0]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_DESC,( char *)st_output.c_ats_tablename, 0 );
      i_err[1]  = Fadd32 ( ptr_fml_Ibuf, FFO_AMOUNT,( char *)&st_output.d_ats_price, 0 );
   	  i_err[2]  = Fadd32 ( ptr_fml_Ibuf, FFO_MKT_CPTLTN,( char *)&st_output.d_ats_prc_prcnt_chng, 0 );
      i_err[3]  = Fadd32 ( ptr_fml_Ibuf, FFO_CRNT_OI,(char *)&st_output.d_ats_oi_chng, 0 );
      i_err[4]  = Fadd32 ( ptr_fml_Ibuf, FFO_CHNG_OI,(char *)&st_output.d_ats_oi_prcnt_chng, 0 );
      i_err[5]  = Fadd32 ( ptr_fml_Ibuf, FFO_CSHSTTL_FRCTN,(char *)&st_output.d_ats_vol_prcnt_chng, 0 );
      i_err[6]  = Fadd32 ( ptr_fml_Ibuf, FFO_UNDRLYNG,(char *)st_output.c_ats_undrlyng, 0 );
      i_err[7]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXPRY_DT,(char *)st_output.c_ats_actn_dt, 0 );
      i_err[8]  = Fadd32 ( ptr_fml_Ibuf, FFO_MIN_LOT_QTY,(char *)&st_output.l_ats_mkt_lot, 0 );

			/* The below FML's are added to ease ASP work */
      i_err[9]  = Fadd32 ( ptr_fml_Ibuf, FFO_CTGRY_INDSTK,(char *)&st_output.c_ind_stk, 0 );
      i_err[10]  = Fadd32 ( ptr_fml_Ibuf, FFO_OPT_TYP,(char *)&c_opt_typ, 0 );
			i_err[11]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXER_TYP,(char *)&c_exercise_type, 0 );
    	i_err[12]  = Fadd32 ( ptr_fml_Ibuf, FFO_STRK_PRC,(char *)&l_strike_prc, 0 );
    	i_err[13]  = Fadd32 ( ptr_fml_Ibuf, FFO_AVM_PRCNT,(char *)&d_implied_volatility_per, 0 );
    	i_err[14]  = Fadd32 ( ptr_fml_Ibuf, FFO_EFF_LMT_RT,(char *)&d_implied_volatility, 0 );
    	i_err[15]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_TYP,(char *)&c_prd_typ, 0 );

    	for( i_cnt = 0; i_cnt < 16; i_cnt++ )
    	{
       if( i_err[i_cnt] == -1 )
       {
      	 fn_errlog( c_ServiceName, "S31145",FMLMSG,c_err_msg);
				 EXEC SQL CLOSE cur_ats_taf;
				 return -1;
       }
    	}   
		}  /* Loops 10 times */
		EXEC SQL CLOSE cur_ats_taf;
	}
	else if ( l_indicator == 1 )
	{
		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog( c_ServiceName,"TAF:Cntrct call:%ld:Exchange Code:%s:Expiry Date:%s:Prdct Type:%c:Underlyng:%s:Index Stock:%c:",l_indicator,ptr_st_cntrct_gen_inf->c_xchng_cd,ptr_st_cntrct_gen_inf->c_expry_dt,ptr_st_cntrct_gen_inf->c_prd_typ,ptr_st_cntrct_gen_inf->c_undrlyng,ptr_st_cntrct_gen_inf->c_ctgry_indstk );
		}

    EXEC SQL
         SELECT  FTQ_UNDRLYNG,
                 FTQ_MIN_LOT_QTY,
                 FTQ_EXPRY_DT,
                 :c_tablename,
                 NVL(FTQ_LST_TRD_PRC/100,0),
                 CASE WHEN NVL(FTQ_ATS_CLS_PRC,0) = 0 THEN 0 ELSE (((NVL(FTQ_LST_TRD_PRC,0)-FTQ_ATS_CLS_PRC)*100)/FTQ_ATS_CLS_PRC) END, /*Ver 1.4 */
                 NVL(FTQ_CRNT_OI,0),
                 CASE WHEN NVL(FTQ_CLS_OI,0) = 0 THEN 0 ELSE ((NVL(FTQ_CRNT_OI,0)-FTQ_CLS_OI)*100)/FTQ_CLS_OI END,
                 CASE WHEN NVL(FTQ_CLS_TRD_QTY,0) = 0 THEN 0 ELSE ((NVL(FTQ_TOT_QTY_TRDD,0)-FTQ_CLS_TRD_QTY)*100/FTQ_CLS_TRD_QTY) END,
                 FTQ_INDSTK
				 INTO    :st_output.c_ats_undrlyng,
                 :st_output.l_ats_mkt_lot,
                 :st_output.c_ats_actn_dt,
                 :st_output.c_ats_tablename,
                 :st_output.d_ats_price,
                 :st_output.d_ats_prc_prcnt_chng,
                 :st_output.d_ats_oi_chng,
                 :st_output.d_ats_oi_prcnt_chng,
                 :st_output.d_ats_vol_prcnt_chng,
								 :st_output.c_ind_stk
         FROM    FTQ_FO_TRD_QT
         WHERE   FTQ_XCHNG_CD  = :ptr_st_cntrct_gen_inf->c_xchng_cd 
         AND     FTQ_PRDCT_TYP = :ptr_st_cntrct_gen_inf->c_prd_typ 
         AND     FTQ_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt
				 AND     FTQ_UNDRLYNG = :ptr_st_cntrct_gen_inf->c_undrlyng
				 AND     FTQ_INDSTK   = :ptr_st_cntrct_gen_inf->c_ctgry_indstk;
				/**Strike Price, Excercise Type and option type are not added since these are common for all Futures ***/ 

    if(SQLCODE != 0 ) 
    {
      fn_errlog(c_ServiceName, "S31150", SQLMSG,c_err_msg);
      return -1;
    }

		trim( st_output.c_ats_actn_dt );

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName,"Underlying :%d: is :%s:",i_count,st_output.c_ats_undrlyng );
			fn_userlog( c_ServiceName,"Lot size :%d: is :%ld:",i_count,st_output.l_ats_mkt_lot );
			fn_userlog( c_ServiceName,"Expiry date :%d: is :%s:",i_count,st_output.c_ats_actn_dt );
			fn_userlog( c_ServiceName,"Table is :%d: is :%s:",i_count,st_output.c_ats_tablename );
			fn_userlog( c_ServiceName,"Price :%d: is :%lf:",i_count,st_output.d_ats_price );
			fn_userlog( c_ServiceName,"Price Percentage :%d: is :%lf:",i_count,st_output.d_ats_prc_prcnt_chng );
			fn_userlog( c_ServiceName,"Current OI :%d: is :%lf:",i_count,st_output.d_ats_oi_chng );
			fn_userlog( c_ServiceName,"OI Percentage :%d: is :%lf:",i_count,st_output.d_ats_oi_prcnt_chng );
			fn_userlog( c_ServiceName,"Volume Percentage :%d: is :%lf:",i_count,st_output.d_ats_vol_prcnt_chng );
		}

    i_err[0]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_DESC,( char *)st_output.c_ats_tablename, 0 );
    i_err[1]  = Fadd32 ( ptr_fml_Ibuf, FFO_AMOUNT,( char *)&st_output.d_ats_price, 0 );
    i_err[2]  = Fadd32 ( ptr_fml_Ibuf, FFO_MKT_CPTLTN,( char *)&st_output.d_ats_prc_prcnt_chng, 0 );
    i_err[3]  = Fadd32 ( ptr_fml_Ibuf, FFO_CRNT_OI,(char *)&st_output.d_ats_oi_chng, 0 );
    i_err[4]  = Fadd32 ( ptr_fml_Ibuf, FFO_CHNG_OI,(char *)&st_output.d_ats_oi_prcnt_chng, 0 );
    i_err[5]  = Fadd32 ( ptr_fml_Ibuf, FFO_CSHSTTL_FRCTN,(char *)&st_output.d_ats_vol_prcnt_chng, 0 );
    i_err[6]  = Fadd32 ( ptr_fml_Ibuf, FFO_UNDRLYNG,(char *)st_output.c_ats_undrlyng, 0 );
    i_err[7]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXPRY_DT,(char *)st_output.c_ats_actn_dt, 0 );
    i_err[8]  = Fadd32 ( ptr_fml_Ibuf, FFO_MIN_LOT_QTY,(char *)&st_output.l_ats_mkt_lot, 0 );

		/* the below are added for easing ASP work */
		i_err[9]  = Fadd32 ( ptr_fml_Ibuf, FFO_OPT_TYP,(char *)&c_opt_typ, 0 );
    i_err[10]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXER_TYP,(char *)&c_exercise_type, 0 );
    i_err[11]  = Fadd32 ( ptr_fml_Ibuf, FFO_STRK_PRC,(char *)&l_strike_prc, 0 );
    i_err[12]  = Fadd32 ( ptr_fml_Ibuf, FFO_AVM_PRCNT,(char *)&d_implied_volatility_per, 0 );
    i_err[13]  = Fadd32 ( ptr_fml_Ibuf, FFO_EFF_LMT_RT,(char *)&d_implied_volatility, 0 );
    i_err[14]  = Fadd32 ( ptr_fml_Ibuf, FFO_CTGRY_INDSTK,(char *)&st_output.c_ind_stk, 0 ); 
		i_err[15]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_TYP,(char *)&c_prd_typ, 0 );

    for( i_cnt = 0; i_cnt < 16; i_cnt++ )
    {
     if( i_err[i_cnt] == -1 )
     {
       fn_errlog( c_ServiceName, "S31155",FMLMSG,c_err_msg);
       return -1;
     }
    }
	} 
	else
	{
		fn_userlog( c_ServiceName,"Invalid Normal or Contract Flag :%ld:",l_indicator);
		return -1;
	}
	return (0);
}

int fn_get_TNS_values( char   *c_ServiceName,
                       struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf,
										   FBFR32 * ptr_fml_Ibuf,
											 long   l_indicator
                     )
{

		int i = 0;
		int z = 0;
  	int i_err[TOTAL_FML];
  	int i_count = 0;
  	int i_cnt = 0;
		int i_opt_typ_cnt = 0;
		int i_returncode = 0;

  	long l_bufferlength = 0;
		long l_spot_prc = 0;
		long l_strk_prc_1 = 0;
		long l_strk_prc_2 = 0;
		long l_strk_prc_g = 0;
		long l_strk_prc_l = 0;

		double d_cls_iv_1 = 0.0;
		double d_cls_iv_2 = 0.0;
		double d_cls_iv_3 = 0.0;

  	char c_err_msg[256];
  	char c_ats_tablename[4];
		char c_ftq_gt_ls_flg;
		char c_prd_typ = 'O';

		struct vw_cntrt_gen_inf st_cntrct_gen_inf;
		struct st_ats_output st_output;

    memset( &st_output,0,sizeof( struct st_ats_output ) );
    memset( &st_cntrct_gen_inf,0,sizeof( struct vw_cntrt_gen_inf) );

		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog( c_ServiceName,"TNS:START" );
		}

  	strcpy( st_output.c_ats_tablename,"TNS" );
  	st_output.c_prdct_typ = 'O';

		/**The input structure ptr_st_cntrct_gen_inf only contains expiry date, other parameters are decided further **/

  	fn_userlog( c_ServiceName,"TNS:Expiry Date:%s:",ptr_st_cntrct_gen_inf->c_expry_dt );
		strcpy(st_cntrct_gen_inf.c_expry_dt,ptr_st_cntrct_gen_inf->c_expry_dt);
		strcpy(st_cntrct_gen_inf.c_xchng_cd,"NFO");
		st_cntrct_gen_inf.c_prd_typ = 'O';
		strcpy(st_cntrct_gen_inf.c_undrlyng,"NIFTY");

		strcpy(st_output.c_ats_actn_dt,ptr_st_cntrct_gen_inf->c_expry_dt);

		EXEC SQL
			 	 SELECT NVL(LTQ_RT*100,0)
			   INTO   :l_spot_prc 
			   FROM   LTQ_TRD_QT 
			   WHERE  LTQ_XCHNG_CD = 'NSE' 
			   AND 	  LTQ_STCK_CD  = 'NIFTY';  
	
		if(SQLCODE != 0)
  	{
   		fn_errlog(c_ServiceName, "S31160", SQLMSG,c_err_msg);
   		return -1;
  	}

		if(DEBUG_MSG_LVL_0)
		{
  		fn_userlog( c_ServiceName,"TNS:Nifty Spot Rate in paise:%ld:",l_spot_prc);
		}

		/**********************Logic in selecting Top Nifty Strikes is as below **********************************

		If spot lies between (4900-4950) or, is equal to 4950, assume spot as 4900. 
	 		In this case three strikes will be the following:
			1.4700
			2.4800
			3.4900
			4.5000
			5.5100
		If spot lies between (4950-5000) or, is equal to 5000, assume spot as 5000. 
			In this case three strikes will be the following:
			1.4800
			2.4900
			3.5000
			4.5100
			5.5200
		Hence, we are selecting one strike near spot, two below spot and two above spot.
		Two sets of values for call and put option each will be computed.

		*********************************************************************************************************/

		for( i_opt_typ_cnt = 0; i_opt_typ_cnt < 2; i_opt_typ_cnt++ )
		{

			d_cls_iv_1 = 0.0;
			d_cls_iv_2 = 0.0;

	  	if ( i_opt_typ_cnt == 0 )
			{
					st_cntrct_gen_inf.c_opt_typ = 'C';
					st_output.c_opt_typ = 'C';
			}
			else 
			{
	  			st_cntrct_gen_inf.c_opt_typ = 'P';
	  			st_output.c_opt_typ = 'P';
			}

			/**** Commented in Ver 2.1 *****
	
			EXEC SQL
			 	 	 SELECT FTQ_STRK_PRC 
			     INTO   :l_strk_prc_1 
				   FROM   (
				            SELECT FTQ_STRK_PRC
			   						FROM   FTQ_FO_TRD_QT 
			   						WHERE  FTQ_XCHNG_CD  = :st_cntrct_gen_inf.c_xchng_cd 
			   						AND    FTQ_PRDCT_TYP = :st_cntrct_gen_inf.c_prd_typ 
			   						AND    FTQ_UNDRLYNG  = :st_cntrct_gen_inf.c_undrlyng 
			   						AND    FTQ_EXPRY_DT  = :st_cntrct_gen_inf.c_expry_dt
			   						AND    FTQ_OPT_TYP   = :st_cntrct_gen_inf.c_opt_typ
			   						AND    FTQ_STRK_PRC >= :l_spot_prc
			   						AND    MOD(FTQ_STRK_PRC,10000) = 0 ORDER BY FTQ_STRK_PRC ) *To take strike price in multiples of 100 *
				   WHERE    ROWNUM = 1 ;  

		  if(SQLCODE != 0 )
   	  {
     	  fn_errlog(c_ServiceName, "S31165", SQLMSG,c_err_msg);
     	  return -1;
   	  }

		  EXEC SQL
	         SELECT FTQ_STRK_PRC 
			     INTO   :l_strk_prc_2 
				   FROM   (
				            SELECT FTQ_STRK_PRC
			   					  FROM   FTQ_FO_TRD_QT 
			   					  WHERE  FTQ_XCHNG_CD  = :st_cntrct_gen_inf.c_xchng_cd
			   					  AND    FTQ_PRDCT_TYP = :st_cntrct_gen_inf.c_prd_typ
			   					  AND    FTQ_UNDRLYNG  = :st_cntrct_gen_inf.c_undrlyng
			   					  AND    FTQ_EXPRY_DT  = :st_cntrct_gen_inf.c_expry_dt
			   					  AND    FTQ_OPT_TYP   = :st_cntrct_gen_inf.c_opt_typ
			   					  AND    FTQ_STRK_PRC <= :l_spot_prc
			   					  AND    MOD(FTQ_STRK_PRC,10000) = 0 ORDER BY FTQ_STRK_PRC DESC ) *To take strike price in multiples of 100 *
				 	 WHERE    ROWNUM = 1;
	
	  	if(SQLCODE != 0 )
     	{
       	fn_errlog(c_ServiceName, "S31170", SQLMSG,c_err_msg);
       	return -1;
     	}

			***************/	

		  /*** Ver 2.1 Starts ***/

			     EXEC SQL
           SELECT FTQ_FO_TRD_QT1.FTQ_STRK_PRC,
									FTQ_FO_TRD_QT2.FTQ_STRK_PRC 
           INTO   :l_strk_prc_1,	
									:l_strk_prc_2		
           FROM   (
                    SELECT * 
                    FROM   FTQ_FO_TRD_QT
										WHERE  FTQ_XCHNG_CD  = :st_cntrct_gen_inf.c_xchng_cd
                    AND    FTQ_PRDCT_TYP = :st_cntrct_gen_inf.c_prd_typ
                    AND    FTQ_UNDRLYNG  = :st_cntrct_gen_inf.c_undrlyng
                    AND    FTQ_EXPRY_DT  = :st_cntrct_gen_inf.c_expry_dt
                    AND    FTQ_OPT_TYP   = :st_cntrct_gen_inf.c_opt_typ
                    AND    FTQ_STRK_PRC >= :l_spot_prc
                    AND    MOD(FTQ_STRK_PRC,10000) = 0 
										ORDER BY FTQ_STRK_PRC  
									) FTQ_FO_TRD_QT1,
								 (
									SELECT	 * 
                    FROM   FTQ_FO_TRD_QT
                    WHERE  FTQ_XCHNG_CD  = :st_cntrct_gen_inf.c_xchng_cd
                    AND    FTQ_PRDCT_TYP = :st_cntrct_gen_inf.c_prd_typ
                    AND    FTQ_UNDRLYNG  = :st_cntrct_gen_inf.c_undrlyng
                    AND    FTQ_EXPRY_DT  = :st_cntrct_gen_inf.c_expry_dt
                    AND    FTQ_OPT_TYP   = :st_cntrct_gen_inf.c_opt_typ
                    AND    FTQ_STRK_PRC <= :l_spot_prc
                    AND    MOD(FTQ_STRK_PRC,10000) = 0
										ORDER BY FTQ_STRK_PRC DESC
								) FTQ_FO_TRD_QT2 
					WHERE ROWNUM = 1;
	
				if(SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31175", SQLMSG,c_err_msg);
        return -1;
      }
				
			/** Ver 2.1 Ends **/

	  	/* Case: Spot is nearer to the lower strike than upper strike */

	   	if( ( l_strk_prc_1 - l_spot_prc  ) > ( l_spot_prc  - l_strk_prc_2 ) )
	  	l_strk_prc_1 = l_strk_prc_2 ; 

			l_strk_prc_g = l_strk_prc_1;
			l_strk_prc_l = l_strk_prc_1;

	  	st_cntrct_gen_inf.c_prd_typ = 'O';
     	strcpy(st_cntrct_gen_inf.c_undrlyng,"NIFTY");
     	st_cntrct_gen_inf.l_strike_prc = l_strk_prc_1;
     	st_cntrct_gen_inf.c_ctgry_indstk = 'I';
     	c_ftq_gt_ls_flg = 'N';

			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog(c_ServiceName,"TNS:The contract info:%c:%c:%s:%s:%ld:%s:",st_cntrct_gen_inf.c_prd_typ,st_cntrct_gen_inf.c_ctgry_indstk,st_cntrct_gen_inf.c_undrlyng,st_cntrct_gen_inf.c_expry_dt,st_cntrct_gen_inf.l_strike_prc,st_cntrct_gen_inf.c_opt_typ); 
			}

     	i_returncode = fn_get_ftq_val( c_ServiceName,
                                   	 &st_cntrct_gen_inf,
                                     &st_output,
                                     c_ftq_gt_ls_flg
                                   );
     	if( i_returncode == -1 )
     	{
       	fn_errlog(c_ServiceName, "S31180", SQLMSG,c_err_msg);
       	return -1;
     	}
 			/** Ver 1.1 starts **/
			st_cntrct_gen_inf.l_strike_prc = st_output.l_strk_prc;
			strcpy(st_cntrct_gen_inf.c_expry_dt,st_output.c_ats_actn_dt);
 			/** Ver 1.1 ends **/

			EXEC SQL
					 SELECT NVL(FTQ_CLS_IV,0)
					 INTO   :d_cls_iv_1
					 FROM   FTQ_FO_TRD_QT
					 WHERE  FTQ_XCHNG_CD  = :st_cntrct_gen_inf.c_xchng_cd
           AND    FTQ_PRDCT_TYP = :st_cntrct_gen_inf.c_prd_typ
           AND    FTQ_UNDRLYNG  = :st_cntrct_gen_inf.c_undrlyng
           AND    FTQ_EXPRY_DT  = :st_cntrct_gen_inf.c_expry_dt
           AND    FTQ_OPT_TYP   = :st_cntrct_gen_inf.c_opt_typ
           AND    FTQ_STRK_PRC  = :st_cntrct_gen_inf.l_strike_prc;
			
				/**strike price is taken from st_output, effective only in flg G and L, in N it will be same as in input **/

					if(SQLCODE != 0)
					{
						fn_errlog(c_ServiceName, "S31185", SQLMSG,c_err_msg);
						return -1;
					}

	  	/* Call service to calculate Implied Volatility */

	  	i_returncode = fn_calc_implied_volatility( c_ServiceName,
																						   	 &st_cntrct_gen_inf,
																						     &st_output
																						   );	

	  	if( i_returncode == -1 )
     	{
       	fn_errlog(c_ServiceName, "S31190", SQLMSG,c_err_msg);
       	return -1;
     	}

		 /* Commented in Ver 2.1 ***
			EXEC SQL
           *Comented in Ver 1.4 
				   SELECT (:d_cls_iv_1 -:st_output.d_ats_imp_vltly) *
	
           SELECT (:st_output.d_ats_imp_vltly - :d_cls_iv_1 )			**Ver 1.4 **
           INTO   :st_output.d_ats_imp_vltly_prcnt
           FROM   DUAL; */

 
			 st_output.d_ats_imp_vltly_prcnt = (st_output.d_ats_imp_vltly - d_cls_iv_1); /* Ver 2.1 */


			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName,"TNS:Closing IV:%lf:Current IV:%lf:Percentage change IV:%lf:", d_cls_iv_1,st_output.d_ats_imp_vltly,st_output.d_ats_imp_vltly_prcnt );
			}

			st_output.d_ats_imp_vltly = st_output.d_ats_imp_vltly ;
			st_output.d_ats_imp_vltly_prcnt = st_output.d_ats_imp_vltly_prcnt ;

	  	i_err[0]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_DESC,( char *)st_output.c_ats_tablename, 0 );
     	i_err[1]  = Fadd32 ( ptr_fml_Ibuf, FFO_AMOUNT,( char *)&st_output.d_ats_price, 0 );
     	i_err[2]  = Fadd32 ( ptr_fml_Ibuf, FFO_MKT_CPTLTN,( char *)&st_output.d_ats_prc_prcnt_chng, 0 );
     	i_err[3]  = Fadd32 ( ptr_fml_Ibuf, FFO_CRNT_OI,(char *)&st_output.d_ats_oi_chng, 0 );
     	i_err[4]  = Fadd32 ( ptr_fml_Ibuf, FFO_CHNG_OI,(char *)&st_output.d_ats_oi_prcnt_chng, 0 );
     	i_err[5]  = Fadd32 ( ptr_fml_Ibuf, FFO_CSHSTTL_FRCTN,(char *)&st_output.d_ats_vol_prcnt_chng, 0 );
     	i_err[6]  = Fadd32 ( ptr_fml_Ibuf, FFO_UNDRLYNG,(char *)st_output.c_ats_undrlyng, 0 );
     	i_err[7]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXPRY_DT,(char *)st_output.c_ats_actn_dt, 0 );
     	i_err[8]  = Fadd32 ( ptr_fml_Ibuf, FFO_MIN_LOT_QTY,(char *)&st_output.l_ats_mkt_lot, 0 );
     	i_err[9]  = Fadd32 ( ptr_fml_Ibuf, FFO_STRK_PRC,(char *)&st_output.l_strk_prc, 0 );
     	i_err[10]  = Fadd32 ( ptr_fml_Ibuf, FFO_OPT_TYP,(char *)&st_output.c_opt_typ, 0 );
     	i_err[11]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXER_TYP,(char *)&st_output.c_exrc_typ, 0 );
     	i_err[12]  = Fadd32 ( ptr_fml_Ibuf, FFO_EFF_LMT_RT,(char *)&st_output.d_ats_imp_vltly, 0 );
     	i_err[13]  = Fadd32 ( ptr_fml_Ibuf, FFO_AVM_PRCNT,(char *)&st_output.d_ats_imp_vltly_prcnt, 0 );
			i_err[14]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_TYP,(char *)&st_output.c_prdct_typ, 0 );

     	for( i_cnt = 0; i_cnt < 15; i_cnt++ )
     	{
       	if( i_err[i_cnt] == -1 )
       	{
         	fn_errlog( c_ServiceName, "S31195",FMLMSG,c_err_msg);
         	return -1;
       	}
     	}

			for( z = 0; z < 2; z++ )
			{

				memset( &st_output,0,sizeof( struct st_ats_output ) );

				strcpy( st_output.c_ats_tablename,"TNS" );

				/**Only strike price is changed in the contract structure here, rest all is same as decided in flag N above**/
	  		st_cntrct_gen_inf.l_strike_prc = l_strk_prc_g;
	  		c_ftq_gt_ls_flg = 'G';


	  		i_returncode = fn_get_ftq_val( c_ServiceName,
                                   	 	 &st_cntrct_gen_inf,
                                     	 &st_output,
                                     	 c_ftq_gt_ls_flg
                                   	 );

		  	if( i_returncode == -1 )
		  	{
			  	fn_errlog(c_ServiceName, "S31200", SQLMSG,c_err_msg);
        	return -1;
		  	}

				/**The greater strike price is changed here so that in next loop, one greater than this will be made available **/
				l_strk_prc_g = st_output.l_strk_prc;
				st_cntrct_gen_inf.l_strike_prc = st_output.l_strk_prc;
				strcpy(st_cntrct_gen_inf.c_expry_dt,st_output.c_ats_actn_dt);			/**Ver 1.4 Added by Shailesh **/

				if(DEBUG_MSG_LVL_0)
				{			
					fn_userlog(c_ServiceName,"TNS:The contract info:%c:%c:%s:%s:%ld:%s:",st_cntrct_gen_inf.c_prd_typ,st_cntrct_gen_inf.c_ctgry_indstk,st_cntrct_gen_inf.c_undrlyng,st_cntrct_gen_inf.c_expry_dt,st_cntrct_gen_inf.l_strike_prc,st_cntrct_gen_inf.c_opt_typ); 
				}

				EXEC SQL
           	 SELECT NVL(FTQ_CLS_IV,0)
           	 INTO   :d_cls_iv_2
           	 FROM   FTQ_FO_TRD_QT
             WHERE  FTQ_XCHNG_CD  = :st_cntrct_gen_inf.c_xchng_cd
           	 AND    FTQ_PRDCT_TYP = :st_cntrct_gen_inf.c_prd_typ
           	 AND    FTQ_UNDRLYNG  = :st_cntrct_gen_inf.c_undrlyng
           	 AND    FTQ_EXPRY_DT  = :st_cntrct_gen_inf.c_expry_dt
           	 AND    FTQ_OPT_TYP   = :st_cntrct_gen_inf.c_opt_typ
           	 AND    FTQ_STRK_PRC  = :st_cntrct_gen_inf.l_strike_prc;

      	if(SQLCODE != 0)
      	{
          fn_errlog(c_ServiceName, "S31205", SQLMSG,c_err_msg);
        	return -1;
      	}

		  	/* Call service to calculate Implied Volatility */

      	i_returncode = fn_calc_implied_volatility( c_ServiceName,
                                                 	 &st_cntrct_gen_inf,
                                                 	 &st_output
                                               	 );

      	 if( i_returncode == -1 )
      	 {
        	 fn_errlog(c_ServiceName, "S31210", SQLMSG,c_err_msg);
        	 return -1;
      	 }

				/** Commented in Ver 2.1 **
				 EXEC SQL
							*Comented in Ver 1.4 
							SELECT (:d_cls_iv_2 -:st_output.d_ats_imp_vltly) *

							SELECT (:st_output.d_ats_imp_vltly - :d_cls_iv_2 )			**Ver 1.4 **
					 		INTO   :st_output.d_ats_imp_vltly_prcnt
					 		FROM   DUAL; */

				st_output.d_ats_imp_vltly_prcnt = st_output.d_ats_imp_vltly - d_cls_iv_2; /* Ver 2.1 */
				st_output.d_ats_imp_vltly = st_output.d_ats_imp_vltly ;
				st_output.d_ats_imp_vltly_prcnt = st_output.d_ats_imp_vltly_prcnt ;

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName,"TNS:Closing IV:%lf:Current IV:%lf:Percentage change IV:%lf:", d_cls_iv_2,st_output.d_ats_imp_vltly,st_output.d_ats_imp_vltly_prcnt );
			}


		  	 i_err[0]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_DESC,( char *)st_output.c_ats_tablename, 0 );
      	 i_err[1]  = Fadd32 ( ptr_fml_Ibuf, FFO_AMOUNT,( char *)&st_output.d_ats_price, 0 );
      	 i_err[2]  = Fadd32 ( ptr_fml_Ibuf, FFO_MKT_CPTLTN,( char *)&st_output.d_ats_prc_prcnt_chng, 0 );
      	 i_err[3]  = Fadd32 ( ptr_fml_Ibuf, FFO_CRNT_OI,(char *)&st_output.d_ats_oi_chng, 0 );
      	 i_err[4]  = Fadd32 ( ptr_fml_Ibuf, FFO_CHNG_OI,(char *)&st_output.d_ats_oi_prcnt_chng, 0 );
      	 i_err[5]  = Fadd32 ( ptr_fml_Ibuf, FFO_CSHSTTL_FRCTN,(char *)&st_output.d_ats_vol_prcnt_chng, 0 );
      	 i_err[6]  = Fadd32 ( ptr_fml_Ibuf, FFO_UNDRLYNG,(char *)st_output.c_ats_undrlyng, 0 );
      	 i_err[7]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXPRY_DT,(char *)st_output.c_ats_actn_dt, 0 );
      	 i_err[8]  = Fadd32 ( ptr_fml_Ibuf, FFO_MIN_LOT_QTY,(char *)&st_output.l_ats_mkt_lot, 0 );
      	 i_err[9]  = Fadd32 ( ptr_fml_Ibuf, FFO_STRK_PRC,(char *)&st_output.l_strk_prc, 0 );
      	 i_err[10]  = Fadd32 ( ptr_fml_Ibuf, FFO_OPT_TYP,(char *)&st_output.c_opt_typ, 0 );
      	 i_err[11]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXER_TYP,(char *)&st_output.c_exrc_typ, 0 );
      	 i_err[12]  = Fadd32 ( ptr_fml_Ibuf, FFO_EFF_LMT_RT,(char *)&st_output.d_ats_imp_vltly, 0 );
      	 i_err[13]  = Fadd32 ( ptr_fml_Ibuf, FFO_AVM_PRCNT,(char *)&st_output.d_ats_imp_vltly_prcnt, 0 );
				 i_err[14]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_TYP,(char *)&st_output.c_prdct_typ, 0 );

      	 for( i_cnt = 0; i_cnt < 15; i_cnt++ )
      	 {
        	 if( i_err[i_cnt] == -1 )
        	 {
          	 fn_errlog( c_ServiceName, "S31215",FMLMSG,c_err_msg);
          	 return -1;
       	   }
      	 }
	
				 memset( &st_output,0,sizeof( struct st_ats_output ) );

				 /**Only strike price is changed in the contract structure here, rest all is same as decided in flag N above**/

				 st_cntrct_gen_inf.l_strike_prc = l_strk_prc_l;
				 c_ftq_gt_ls_flg = 'L';

  			 strcpy( st_output.c_ats_tablename,"TNS" );	

		  	 i_returncode = fn_get_ftq_val( c_ServiceName,
                                     	  &st_cntrct_gen_inf,
                                     	  &st_output,
                                     	  c_ftq_gt_ls_flg
                                   	  );

      	 if( i_returncode == -1 )
      	 {
        	 fn_errlog(c_ServiceName, "S31220", SQLMSG,c_err_msg);
        	 return -1;
      	 }

				st_cntrct_gen_inf.l_strike_prc = st_output.l_strk_prc;
				strcpy(st_cntrct_gen_inf.c_expry_dt,st_output.c_ats_actn_dt);			/**Ver 1.4 Added by Shailesh **/

				if(DEBUG_MSG_LVL_0)
				{
					fn_userlog(c_ServiceName,"TNS:The contract info:%c:%c:%s:%s:%ld:%s:",st_cntrct_gen_inf.c_prd_typ,st_cntrct_gen_inf.c_ctgry_indstk,st_cntrct_gen_inf.c_undrlyng,st_cntrct_gen_inf.c_expry_dt,st_cntrct_gen_inf.l_strike_prc,st_cntrct_gen_inf.c_opt_typ); 	
				}

				 EXEC SQL
           		SELECT NVL(FTQ_CLS_IV,0)
           		INTO   :d_cls_iv_3
           		FROM   FTQ_FO_TRD_QT
           		WHERE  FTQ_XCHNG_CD  = :st_cntrct_gen_inf.c_xchng_cd
           		AND    FTQ_PRDCT_TYP = :st_cntrct_gen_inf.c_prd_typ
           		AND    FTQ_UNDRLYNG  = :st_cntrct_gen_inf.c_undrlyng
           		AND    FTQ_EXPRY_DT  = :st_cntrct_gen_inf.c_expry_dt
           		AND    FTQ_OPT_TYP   = :st_cntrct_gen_inf.c_opt_typ
           		AND    FTQ_STRK_PRC  = :st_cntrct_gen_inf.l_strike_prc;

      	if(SQLCODE != 0)
      	{
        	fn_errlog(c_ServiceName, "S31225", SQLMSG,c_err_msg);
        	return -1;
      	}

				l_strk_prc_l = st_output.l_strk_prc;

		  	/* Call service to calculate Implied Volatility */

      	i_returncode = fn_calc_implied_volatility( c_ServiceName,
                                                 	 &st_cntrct_gen_inf,
                                                	 &st_output
                                               	 );

      	if( i_returncode == -1 )
      	{
        	fn_errlog(c_ServiceName, "S31230", SQLMSG,c_err_msg);
        	return -1;
      	}

			 /** Commented in Ver 2.1 **
				EXEC SQL
						 *Comented in Ver 1.4 
						 SELECT (:d_cls_iv_3 -:st_output.d_ats_imp_vltly) *

						 SELECT (:st_output.d_ats_imp_vltly - :d_cls_iv_3 )			**Ver 1.4 **
           	 INTO   :st_output.d_ats_imp_vltly_prcnt
           	 FROM   DUAL; */
				
				st_output.d_ats_imp_vltly_prcnt = st_output.d_ats_imp_vltly - d_cls_iv_3; /** ver 2.1 **/
				st_output.d_ats_imp_vltly = st_output.d_ats_imp_vltly ;
				st_output.d_ats_imp_vltly_prcnt = st_output.d_ats_imp_vltly_prcnt ;

				if(DEBUG_MSG_LVL_3)
				{
  				fn_userlog( c_ServiceName,"TNS:Closing IV:%lf:Current IV:%lf:Percentage change IV:%lf:", d_cls_iv_2,st_output.d_ats_imp_vltly,st_output.d_ats_imp_vltly_prcnt );
				}

		  	i_err[0]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_DESC,( char *)st_output.c_ats_tablename, 0 );
      	i_err[1]  = Fadd32 ( ptr_fml_Ibuf, FFO_AMOUNT,( char *)&st_output.d_ats_price, 0 );
      	i_err[2]  = Fadd32 ( ptr_fml_Ibuf, FFO_MKT_CPTLTN,( char *)&st_output.d_ats_prc_prcnt_chng, 0 );
      	i_err[3]  = Fadd32 ( ptr_fml_Ibuf, FFO_CRNT_OI,(char *)&st_output.d_ats_oi_chng, 0 );
      	i_err[4]  = Fadd32 ( ptr_fml_Ibuf, FFO_CHNG_OI,(char *)&st_output.d_ats_oi_prcnt_chng, 0 );
      	i_err[5]  = Fadd32 ( ptr_fml_Ibuf, FFO_CSHSTTL_FRCTN,(char *)&st_output.d_ats_vol_prcnt_chng, 0 );
      	i_err[6]  = Fadd32 ( ptr_fml_Ibuf, FFO_UNDRLYNG,(char *)st_output.c_ats_undrlyng, 0 );
      	i_err[7]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXPRY_DT,(char *)st_output.c_ats_actn_dt, 0 );
      	i_err[8]  = Fadd32 ( ptr_fml_Ibuf, FFO_MIN_LOT_QTY,(char *)&st_output.l_ats_mkt_lot, 0 );
      	i_err[9]  = Fadd32 ( ptr_fml_Ibuf, FFO_STRK_PRC,(char *)&st_output.l_strk_prc, 0 );
      	i_err[10]  = Fadd32 ( ptr_fml_Ibuf, FFO_OPT_TYP,(char *)&st_output.c_opt_typ, 0 );
      	i_err[11]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXER_TYP,(char *)&st_output.c_exrc_typ, 0 );
      	i_err[12]  = Fadd32 ( ptr_fml_Ibuf, FFO_EFF_LMT_RT,(char *)&st_output.d_ats_imp_vltly, 0 );
      	i_err[13]  = Fadd32 ( ptr_fml_Ibuf, FFO_AVM_PRCNT,(char *)&st_output.d_ats_imp_vltly_prcnt, 0 );
				i_err[14]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_TYP,(char *)&st_output.c_prdct_typ, 0 );
	
     	 	for( i_cnt = 0; i_cnt < 15; i_cnt++ )
      	{
        	if( i_err[i_cnt] == -1 )
        	{
          	fn_errlog( c_ServiceName, "S31235",FMLMSG,c_err_msg);
				  	return -1;
        	}
      	} 

		  }

		} /* Once for Call and once for Put */

		fn_userlog( c_ServiceName,"TNS:END" );

		return (0);
}

int fn_get_LVNO_values( char   *c_ServiceName,
                        struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf,
												FBFR32 * ptr_fml_Ibuf,
												long   l_indicator
                      ) 
{

		int i = 0;
    int i_err[TOTAL_FML];
    int i_count = 0;
    int i_cnt = 0;
    int i_opt_typ_cnt = 0;
    int i_returncode = 0;

    long l_bufferlength = 0;
    long l_spot_prc = 0;
    long l_strk_prc_1 = 0;
    long l_strk_prc_2 = 0;

	  double d_cls_iv_1 = 0.0;

    char   c_err_msg[256];
    char   c_ats_tablename[4];
    char   c_ftq_gt_ls_flg;
		char   c_prd_typ = 'O';

    struct vw_cntrt_gen_inf st_cntrct_gen_inf;
		struct st_ats_output st_output; 

		memset( &st_output,0,sizeof( struct st_ats_output ) );
		memset( &st_cntrct_gen_inf,0,sizeof( struct vw_cntrt_gen_inf) );

    strcpy( st_output.c_ats_tablename,"LVNO" );
		st_output.c_prdct_typ ='O';

    c_ftq_gt_ls_flg = 'N';

	  memcpy(&st_cntrct_gen_inf,ptr_st_cntrct_gen_inf,sizeof( struct vw_cntrt_gen_inf));

   	i_returncode = fn_get_ftq_val( c_ServiceName,
                                   &st_cntrct_gen_inf,
                                   &st_output,
                                   c_ftq_gt_ls_flg
                                 );
    if( i_returncode == -1 )
    {
      fn_errlog(c_ServiceName, "S31240", SQLMSG,c_err_msg);
      return -1;
    }

		/** Ver 1.1 starts **/
    st_cntrct_gen_inf.l_strike_prc = st_output.l_strk_prc;
    strcpy(st_cntrct_gen_inf.c_expry_dt,st_output.c_ats_actn_dt);
    /** Ver 1.1 ends **/


		if(DEBUG_MSG_LVL_0)
		{
			fn_userlog(c_ServiceName,"Expry:%s:",st_cntrct_gen_inf.c_expry_dt);
			fn_userlog(c_ServiceName,"Opt typ:%c:",st_cntrct_gen_inf.c_opt_typ);
			fn_userlog(c_ServiceName,"Strike prc:%ld:",st_cntrct_gen_inf.l_strike_prc);
		}

		EXEC SQL
           SELECT NVL(FTQ_CLS_IV,0)
           INTO   :d_cls_iv_1
           FROM   FTQ_FO_TRD_QT
           WHERE  FTQ_XCHNG_CD  = :st_cntrct_gen_inf.c_xchng_cd
           AND    FTQ_PRDCT_TYP = :st_cntrct_gen_inf.c_prd_typ
           AND    FTQ_UNDRLYNG  = :st_cntrct_gen_inf.c_undrlyng
           AND    FTQ_EXPRY_DT  = :st_cntrct_gen_inf.c_expry_dt
           AND    FTQ_OPT_TYP   = :st_cntrct_gen_inf.c_opt_typ
           AND    FTQ_STRK_PRC  = :st_cntrct_gen_inf.l_strike_prc;

    if(SQLCODE != 0 )
    {
      fn_errlog(c_ServiceName, "S31245", SQLMSG,c_err_msg);
      return -1;
    }

    /* Call service to calculate Implied Volatility */

    i_returncode = fn_calc_implied_volatility( c_ServiceName,
                                               &st_cntrct_gen_inf,
                                               &st_output
                                             );

    if( i_returncode == -1 )
    {
      fn_errlog(c_ServiceName, "S31250", SQLMSG,c_err_msg);
      return -1;
    }

	 /** Commented in ver 2.1 **
		EXEC SQL
				 *Comented in Ver 1.4 
				 SELECT (:d_cls_iv_1 -:st_output.d_ats_imp_vltly) *

				 SELECT (:st_output.d_ats_imp_vltly - :d_cls_iv_1 )			**Ver 1.4 **
         INTO   :st_output.d_ats_imp_vltly_prcnt
         FROM   DUAL;i */

			st_output.d_ats_imp_vltly_prcnt = st_output.d_ats_imp_vltly - d_cls_iv_1; /* Ver 2.1 */
			st_output.d_ats_imp_vltly = st_output.d_ats_imp_vltly ;
			st_output.d_ats_imp_vltly_prcnt = st_output.d_ats_imp_vltly_prcnt ;

			if(DEBUG_MSG_LVL_3)
			{
  			fn_userlog( c_ServiceName,"LVNO:Closing IV:%lf:Current IV:%lf:Percentage change IV:%lf:", d_cls_iv_1,st_output.d_ats_imp_vltly,st_output.d_ats_imp_vltly_prcnt );
			}

		i_err[0]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_DESC,( char *)st_output.c_ats_tablename, 0 );
    i_err[1]  = Fadd32 ( ptr_fml_Ibuf, FFO_AMOUNT,( char *)&st_output.d_ats_price, 0 );
    i_err[2]  = Fadd32 ( ptr_fml_Ibuf, FFO_MKT_CPTLTN,( char *)&st_output.d_ats_prc_prcnt_chng, 0 );
    i_err[3]  = Fadd32 ( ptr_fml_Ibuf, FFO_CRNT_OI,(char *)&st_output.d_ats_oi_chng, 0 );
    i_err[4]  = Fadd32 ( ptr_fml_Ibuf, FFO_CHNG_OI,(char *)&st_output.d_ats_oi_prcnt_chng, 0 );
    i_err[5]  = Fadd32 ( ptr_fml_Ibuf, FFO_CSHSTTL_FRCTN,(char *)&st_output.d_ats_vol_prcnt_chng, 0 );
    i_err[6]  = Fadd32 ( ptr_fml_Ibuf, FFO_UNDRLYNG,(char *)st_output.c_ats_undrlyng, 0 );
    i_err[7]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXPRY_DT,(char *)st_output.c_ats_actn_dt, 0 );
    i_err[8]  = Fadd32 ( ptr_fml_Ibuf, FFO_MIN_LOT_QTY,(char *)&st_output.l_ats_mkt_lot, 0 );
    i_err[9]  = Fadd32 ( ptr_fml_Ibuf, FFO_STRK_PRC,(char *)&st_output.l_strk_prc, 0 );
    i_err[10]  = Fadd32 ( ptr_fml_Ibuf, FFO_OPT_TYP,(char *)&st_output.c_opt_typ, 0 );
    i_err[11]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXER_TYP,(char *)&st_output.c_exrc_typ, 0 );
    i_err[12]  = Fadd32 ( ptr_fml_Ibuf, FFO_EFF_LMT_RT,(char *)&st_output.d_ats_imp_vltly, 0 );
    i_err[13]  = Fadd32 ( ptr_fml_Ibuf, FFO_AVM_PRCNT,(char *)&st_output.d_ats_imp_vltly_prcnt, 0 );
		i_err[14]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_TYP,(char *)&st_output.c_prdct_typ, 0 );

    for( i_cnt = 0; i_cnt < 15; i_cnt++ )
    {
      if( i_err[i_cnt] == -1 )
      {
        fn_errlog( c_ServiceName, "S31255",FMLMSG,c_err_msg);
        return -1;
      }
    }

		return (0);
}


int fn_get_ASO_values( char   *c_ServiceName,
                       struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf,
											 FBFR32 * ptr_fml_Ibuf,
											 long   l_indicator
                     ) 
{
		int i = 0;
		int z = 0;
    int i_err[TOTAL_FML];
    int i_count = 0;
    int i_cnt = 0;
    int i_opt_typ_cnt = 0;
    int i_returncode = 0;

    long l_bufferlength = 0;
    long l_spot_prc = 0;
    long l_strk_prc_1 = 0;
    long l_strk_prc_2 = 0;
		long l_temp_qty_traded=0; 

		double d_cls_iv_1 = 0.0;

    char   c_err_msg[256];
    char   c_ats_tablename[4];
    char   c_ftq_gt_ls_flg;
		char   c_prd_typ = 'O';
		char   c_qt_trdng_flg;

		struct st_ats_output st_output;
		struct vw_cntrt_gen_inf st_cntrct_gen_inf;

		memset( &st_output,0,sizeof( struct st_ats_output ) );
		memset( &st_cntrct_gen_inf,0,sizeof( struct vw_cntrt_gen_inf) );

		memcpy(&st_cntrct_gen_inf,ptr_st_cntrct_gen_inf,sizeof(struct vw_cntrt_gen_inf));

    strcpy( st_output.c_ats_tablename,"ASO" );

    ptr_st_cntrct_gen_inf->c_prd_typ = 'O';
    st_cntrct_gen_inf.c_prd_typ = 'O';
    c_ftq_gt_ls_flg = 'N';

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName,"Inside function at ASO " );
		}

		if( l_indicator == 0 )
		{
		
			for( i_opt_typ_cnt = 0; i_opt_typ_cnt < 2; i_opt_typ_cnt++ )
    	{

      	if ( i_opt_typ_cnt == 0 )
      	st_cntrct_gen_inf.c_opt_typ = 'C';
      	else
      	st_cntrct_gen_inf.c_opt_typ = 'P';

				EXEC SQL
           	 DECLARE cur_ats_aso CURSOR FOR
             SELECT  FTQ_PRDCT_TYP,
                     FTQ_XCHNG_CD,
                     FTQ_UNDRLYNG,
                     FTQ_MIN_LOT_QTY,
                     FTQ_EXPRY_DT,
                   	 NVL(FTQ_LST_TRD_PRC,0),
                   	 CASE WHEN NVL(FTQ_ATS_CLS_PRC,0) = 0 THEN 0 ELSE ROUND(((NVL(FTQ_LST_TRD_PRC,0)-FTQ_ATS_CLS_PRC)*100)/FTQ_ATS_CLS_PRC,2) END, /*Ver 1.4 */
                   	 NVL(FTQ_CRNT_OI,0),
                   	 CASE WHEN NVL(FTQ_CLS_OI,0) = 0 THEN 0 ELSE ROUND(((NVL(FTQ_CRNT_OI,0)-FTQ_CLS_OI)*100)/FTQ_CLS_OI,2) END,
                   	 CASE WHEN NVL(FTQ_CLS_TRD_QTY,0) = 0 THEN 0 WHEN NVL(FTQ_MIN_LOT_QTY,0) = 0 THEN 0 ELSE (((NVL(FTQ_TOT_QTY_TRDD,0)/FTQ_MIN_LOT_QTY)- (FTQ_CLS_TRD_QTY/FTQ_MIN_LOT_QTY))/(FTQ_CLS_TRD_QTY/FTQ_MIN_LOT_QTY)*100) END,
										 FTQ_TOT_QTY_TRDD/FTQ_MIN_LOT_QTY,
                   	 FTQ_EXER_TYP,
                   	 FTQ_OPT_TYP,
                   	 FTQ_STRK_PRC,
                   	 NVL(FTQ_CLS_IV,0),
                     FTQ_QT_TRDNG_FLG             /*** Ver 2.3 ***/
           	 FROM    FTQ_FO_TRD_QT
           	 WHERE   FTQ_XCHNG_CD  = 'NFO'
           	 AND     FTQ_PRDCT_TYP = :st_cntrct_gen_inf.c_prd_typ
           	 AND     FTQ_OPT_TYP   = :st_cntrct_gen_inf.c_opt_typ
				   	 /**AND     (((FTQ_TOT_QTY_TRDD/FTQ_MIN_LOT_QTY)-
                   	 (FTQ_CLS_TRD_QTY/FTQ_MIN_LOT_QTY))/(FTQ_CLS_TRD_QTY/FTQ_MIN_LOT_QTY))*100 IS NOT NULL
						 AND     FTQ_CLS_TRD_QTY != 0**/
						 AND     FTQ_INDSTK = 'S'			/**Only Stock Options **/
             AND     FTQ_TOT_QTY_TRDD IS NOT NULL			/**ver 1.5, Added for Query Optimization **/
           	 ORDER BY 11 DESC;

      	EXEC SQL
             OPEN cur_ats_aso;

				if(DEBUG_MSG_LVL_3)
				{
					fn_userlog( c_ServiceName,"Before fetching data from ASO cursor " );
				}

        for( i_count = 0; i_count < 5; i_count++ )
        {
		
				  memset( &st_output,0,sizeof( struct st_ats_output ) );
    			strcpy( st_output.c_ats_tablename,"ASO" );

          EXEC SQL
               FETCH cur_ats_aso
               INTO  :st_output.c_prdct_typ,
                     :st_output.c_xchng_cd,
                     :st_output.c_ats_undrlyng,
                     :st_output.l_ats_mkt_lot,
                     :st_output.c_ats_actn_dt,
                     :st_output.d_ats_price,
                     :st_output.d_ats_prc_prcnt_chng,
                     :st_output.d_ats_oi_chng,
                     :st_output.d_ats_oi_prcnt_chng,
                     :st_output.d_ats_vol_prcnt_chng,
										 :l_temp_qty_traded,
                     :st_output.c_exrc_typ,
                     :st_output.c_opt_typ,
                     :st_output.l_strk_prc,
                     :st_output.d_ats_imp_vltly,
                     :c_qt_trdng_flg;                  /*** Ver 2.3 ***/


			    if(SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND ) /* 1405 :Null data error , we will proceed */
          {
        	  fn_errlog(c_ServiceName, "S31260", SQLMSG,c_err_msg);
						EXEC SQL CLOSE cur_ats_aso;
        	  return -1;
      	  }
					if( SQLCODE == -1405 )
    			{
      			i_count = i_count - 1;
      			continue;
    			}
    			if( SQLCODE == NO_DATA_FOUND )
    			{
      			EXEC SQL CLOSE cur_ats_aso;
						if( i_opt_typ_cnt >=2)
						{
      				return (0);
						}
						else 		
						{
							break;
						}
    			}
					trim(st_output.c_ats_actn_dt);
					d_cls_iv_1 = st_output.d_ats_imp_vltly;
					strcpy(st_cntrct_gen_inf.c_undrlyng,st_output.c_ats_undrlyng);
				  strcpy(st_cntrct_gen_inf.c_expry_dt,st_output.c_ats_actn_dt);			/**Ver 1.4 Added by Shailesh **/

    			/* Call service to calculate Implied Volatility */

    			i_returncode = fn_calc_implied_volatility( c_ServiceName,
                                               			 &st_cntrct_gen_inf,
                                               			 &st_output
                                             			 );

    			if( i_returncode == -1 )
    			{
      			fn_errlog(c_ServiceName, "S31265", SQLMSG,c_err_msg);
      			return -1;
    			}

				 /** Commented in ver 2.1 **
    			EXEC SQL
							 *Comented in Ver 1.4 
							 SELECT (:d_cls_iv_1 -:st_output.d_ats_imp_vltly) *

							 SELECT (:st_output.d_ats_imp_vltly - :d_cls_iv_1 )			**Ver 1.4 **
         		   INTO   :st_output.d_ats_imp_vltly_prcnt
         			 FROM   DUAL; */

					st_output.d_ats_imp_vltly_prcnt = st_output.d_ats_imp_vltly - d_cls_iv_1; /* Ver 2.1 */
					st_output.d_ats_imp_vltly = st_output.d_ats_imp_vltly ;
					st_output.d_ats_imp_vltly_prcnt = st_output.d_ats_imp_vltly_prcnt ;

					if(DEBUG_MSG_LVL_3)
					{
						fn_userlog( c_ServiceName,"ASO:Closing IV:%lf:Current IV:%lf:Percentage change IV:%lf:", d_cls_iv_1,st_output.d_ats_imp_vltly,st_output.d_ats_imp_vltly_prcnt );
						fn_userlog( c_ServiceName, "1 Product Type is :%c:", st_output.c_prdct_typ );
						fn_userlog( c_ServiceName, "2 Exchange Code is :%s:", st_output.c_xchng_cd );
						fn_userlog( c_ServiceName, "3 Underlying is :%s:", st_output.c_ats_undrlyng );
						fn_userlog( c_ServiceName, "4 Lot size is :%ld:  ", st_output.l_ats_mkt_lot);
						fn_userlog( c_ServiceName, "5 Expiry Date is :%s: ", st_output.c_ats_actn_dt );
						fn_userlog( c_ServiceName, "6 Last traded price is :%lf:", st_output.d_ats_price );
						fn_userlog( c_ServiceName, "7 Price change is :%lf: ", st_output.d_ats_prc_prcnt_chng );
						fn_userlog( c_ServiceName, "8 OI change is :%lf:", st_output.d_ats_oi_chng );
						fn_userlog( c_ServiceName, "9 OI & change is :%lf:", st_output.d_ats_oi_prcnt_chng );
						fn_userlog( c_ServiceName, "10 Volume change is :%lf:", st_output.d_ats_vol_prcnt_chng );
						fn_userlog( c_ServiceName, "11 Exercise type is :%c:", st_output.c_exrc_typ );
						fn_userlog( c_ServiceName, "12 Option Type is :%c:", st_output.c_opt_typ );
						fn_userlog( c_ServiceName, "13 Strike price is :%ld:", st_output.l_strk_prc );
						fn_userlog( c_ServiceName, "14 Implied volatility is :%lf:", st_output.d_ats_imp_vltly );
					}
   
          if(DEBUG_MSG_LVL_0)
          {
           fn_userlog( c_ServiceName," FTQ Trading Enable/Disable Flag2 Is :%c:",c_qt_trdng_flg);
          }

          /*** Commented in Ver 2.3 and below column selected in above select from Trade Quote Table ***

					EXEC SQL
					SELECT FCM_QT_TRDNG_FLG
					INTO	 :c_qt_trdng_flg
					FROM   FCM_FO_CNTRCT_MSTR
					WHERE  FCM_XCHNG_CD	 =	'NFO'			***	Ver 2.0	***
					AND		 FCM_PRDCT_TYP = :c_prd_typ
					AND    FCM_UNDRLYNG  = :st_output.c_ats_undrlyng
					AND    FCM_EXPRY_DT  = :st_output.c_ats_actn_dt
					AND    FCM_STRK_PRC  = :st_output.l_strk_prc
					AND    FCM_OPT_TYP   = :st_output.c_opt_typ;
					if(SQLCODE !=0)
					{
					 fn_errlog(c_ServiceName, "S31270", SQLMSG, c_err_msg);
					 EXEC SQL CLOSE cur_ats_taf;
					 return (-1);
					}
          ***/

					if(c_qt_trdng_flg != 'T')
					{
						fn_userlog( c_ServiceName,"Skipping ASO:contract is not enabled for trading:O:%s:%s:",st_output.c_ats_undrlyng,st_output.c_ats_actn_dt );
						i_count = i_count - 1;
						continue;
					}

				  i_err[0]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_DESC,( char *)st_output.c_ats_tablename, 0 );
    		  i_err[1]  = Fadd32 ( ptr_fml_Ibuf, FFO_AMOUNT,( char *)&st_output.d_ats_price, 0 );
    		  i_err[2]  = Fadd32 ( ptr_fml_Ibuf, FFO_MKT_CPTLTN,( char *)&st_output.d_ats_prc_prcnt_chng, 0 );
    		  i_err[3]  = Fadd32 ( ptr_fml_Ibuf, FFO_CRNT_OI,(char *)&st_output.d_ats_oi_chng, 0 );
    		  i_err[4]  = Fadd32 ( ptr_fml_Ibuf, FFO_CHNG_OI,(char *)&st_output.d_ats_oi_prcnt_chng, 0 );
    		  i_err[5]  = Fadd32 ( ptr_fml_Ibuf, FFO_CSHSTTL_FRCTN,(char *)&st_output.d_ats_vol_prcnt_chng, 0 );
    		  i_err[6]  = Fadd32 ( ptr_fml_Ibuf, FFO_UNDRLYNG,(char *)st_output.c_ats_undrlyng, 0 );
    		  i_err[7]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXPRY_DT,(char *)st_output.c_ats_actn_dt, 0 );
    		  i_err[8]  = Fadd32 ( ptr_fml_Ibuf, FFO_MIN_LOT_QTY,(char *)&st_output.l_ats_mkt_lot, 0 );
    		  i_err[9]  = Fadd32 ( ptr_fml_Ibuf, FFO_STRK_PRC,(char *)&st_output.l_strk_prc, 0 );
    		  i_err[10]  = Fadd32 ( ptr_fml_Ibuf, FFO_OPT_TYP,(char *)&st_output.c_opt_typ, 0 );
    			i_err[11]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXER_TYP,(char *)&st_output.c_exrc_typ, 0 );
    			i_err[12]  = Fadd32 ( ptr_fml_Ibuf, FFO_EFF_LMT_RT,(char *)&st_output.d_ats_imp_vltly, 0 );
    			i_err[13]  = Fadd32 ( ptr_fml_Ibuf, FFO_AVM_PRCNT,(char *)&st_output.d_ats_imp_vltly_prcnt, 0 );
					i_err[14]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_TYP,(char *)&st_output.c_prdct_typ, 0 );

    			for( i_cnt = 0; i_cnt < 15; i_cnt++ )
    			{
      			if( i_err[i_cnt] == -1 )
      			{
        			fn_errlog( c_ServiceName, "S31275",FMLMSG,c_err_msg);
							EXEC SQL CLOSE cur_ats_aso;
        			return -1;
      			}
    			}
				} /* End of inner For loop */

			} /* End of For loop */
			EXEC SQL CLOSE cur_ats_aso;
		} 
		else if (l_indicator == 1 )
		{
			EXEC SQL
					 SELECT  FTQ_PRDCT_TYP,
                   FTQ_XCHNG_CD,
                   FTQ_UNDRLYNG,
                   FTQ_MIN_LOT_QTY,
                   FTQ_EXPRY_DT,
                   NVL(FTQ_LST_TRD_PRC,0),
                   CASE WHEN NVL(FTQ_ATS_CLS_PRC,0) = 0 THEN 0 ELSE ROUND(((NVL(FTQ_LST_TRD_PRC,0)-FTQ_ATS_CLS_PRC)*100)/FTQ_ATS_CLS_PRC,2) END, /*Ver 1.4 */
                   NVL(FTQ_CRNT_OI,0),
                   CASE WHEN NVL(FTQ_CLS_OI,0) = 0 THEN 0 ELSE ROUND(((NVL(FTQ_CRNT_OI,0)-FTQ_CLS_OI)*100)/FTQ_CLS_OI,2) END,
                   CASE WHEN NVL(FTQ_MIN_LOT_QTY,0) = 0 THEN 0 WHEN NVL(FTQ_CLS_TRD_QTY,0) = 0 THEN 0 ELSE (((NVL(FTQ_TOT_QTY_TRDD,0)/FTQ_MIN_LOT_QTY)- (FTQ_CLS_TRD_QTY/FTQ_MIN_LOT_QTY))/(FTQ_CLS_TRD_QTY/FTQ_MIN_LOT_QTY))*100 END,
                   FTQ_EXER_TYP,
                   FTQ_OPT_TYP,
                   FTQ_STRK_PRC,
                   NVL(FTQ_CLS_IV,0)
						 INTO  :ptr_st_cntrct_gen_inf->c_prd_typ,
                   :ptr_st_cntrct_gen_inf->c_xchng_cd,
                   :st_output.c_ats_undrlyng,
                   :st_output.l_ats_mkt_lot,
                   :st_output.c_ats_actn_dt,
                   :st_output.d_ats_price,
                   :st_output.d_ats_prc_prcnt_chng,
                   :st_output.d_ats_oi_chng,
                   :st_output.d_ats_oi_prcnt_chng,
                   :st_output.d_ats_vol_prcnt_chng,
                   :st_output.c_exrc_typ,
                   :st_output.c_opt_typ,
                   :st_output.l_strk_prc,
                   :st_output.d_ats_imp_vltly
             FROM  FTQ_FO_TRD_QT
             WHERE FTQ_XCHNG_CD  = 'NFO'
             AND   FTQ_PRDCT_TYP = :ptr_st_cntrct_gen_inf->c_prd_typ
             AND   FTQ_OPT_TYP   = :ptr_st_cntrct_gen_inf->c_opt_typ
						 AND   FTQ_UNDRLYNG  = :ptr_st_cntrct_gen_inf->c_undrlyng
						 AND   FTQ_EXPRY_DT  = :ptr_st_cntrct_gen_inf->c_expry_dt
					   AND   FTQ_STRK_PRC  = :ptr_st_cntrct_gen_inf->l_strike_prc;

			if(SQLCODE != 0 ) 
      {
        fn_errlog(c_ServiceName, "S31280", SQLMSG,c_err_msg);
        return -1;
      }

			d_cls_iv_1 = st_output.d_ats_imp_vltly;

      /* Call service to calculate Implied Volatility */

      i_returncode = fn_calc_implied_volatility( c_ServiceName,
                                                 &st_cntrct_gen_inf,
                                                 &st_output
                                               );

      if( i_returncode == -1 )
      {
        fn_errlog(c_ServiceName, "S31285", SQLMSG,c_err_msg);
        return -1;
      }

		 /* Commented in Ver 2.1 **
      EXEC SQL
					 *Comented in Ver 1.4 
					 SELECT (:d_cls_iv_1 -:st_output.d_ats_imp_vltly) *

					 SELECT (:st_output.d_ats_imp_vltly - :d_cls_iv_1 )			**Ver 1.4 **
           INTO   :st_output.d_ats_imp_vltly_prcnt
           FROM   DUAL; */

					st_output.d_ats_imp_vltly_prcnt = st_output.d_ats_imp_vltly - d_cls_iv_1; /* Ver 2.1 */
					st_output.d_ats_imp_vltly = st_output.d_ats_imp_vltly ;
					st_output.d_ats_imp_vltly_prcnt = st_output.d_ats_imp_vltly_prcnt ;

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName,"Percentage change of IV-2 in ASO is :%lf:", st_output.d_ats_imp_vltly_prcnt );
				fn_userlog( c_ServiceName, "1 Product Type is :%c:", ptr_st_cntrct_gen_inf->c_prd_typ );
				fn_userlog( c_ServiceName, "2 Exchange Code is :%s:", ptr_st_cntrct_gen_inf->c_xchng_cd );
				fn_userlog( c_ServiceName, "3 Underlying is :%s:", st_output.c_ats_undrlyng );
				fn_userlog( c_ServiceName, "4 Lot size is :%ld:  ", st_output.l_ats_mkt_lot );
				fn_userlog( c_ServiceName, "5 Expiry Date is :%s: ", st_output.c_ats_actn_dt );
				fn_userlog( c_ServiceName, "6 Last traded price is :%lf:", st_output.d_ats_price );
				fn_userlog( c_ServiceName, "7 Price change is :%lf: ", st_output.d_ats_prc_prcnt_chng );
				fn_userlog( c_ServiceName, "8 OI change is :%lf:", st_output.d_ats_oi_chng );
				fn_userlog( c_ServiceName, "9 OI & change is :%lf:", st_output.d_ats_oi_prcnt_chng );
				fn_userlog( c_ServiceName, "10 Volume change is :%lf:", st_output.d_ats_vol_prcnt_chng );
				fn_userlog( c_ServiceName, "11 Exercise type is :%c:", st_output.c_exrc_typ );
				fn_userlog( c_ServiceName, "12 Option Type is :%c:", st_output.c_opt_typ );
				fn_userlog( c_ServiceName, "13 Strike price is :%ld:", st_output.l_strk_prc );
				fn_userlog( c_ServiceName, "14 Implied volatility is :%lf:", st_output.d_ats_imp_vltly );
			}

      i_err[0]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_DESC,( char *)st_output.c_ats_tablename, 0 );
      i_err[1]  = Fadd32 ( ptr_fml_Ibuf, FFO_AMOUNT,( char *)&st_output.d_ats_price, 0 );
      i_err[2]  = Fadd32 ( ptr_fml_Ibuf, FFO_MKT_CPTLTN,( char *)&st_output.d_ats_prc_prcnt_chng, 0 );
      i_err[3]  = Fadd32 ( ptr_fml_Ibuf, FFO_CRNT_OI,(char *)&st_output.d_ats_oi_chng, 0 );
      i_err[4]  = Fadd32 ( ptr_fml_Ibuf, FFO_CHNG_OI,(char *)&st_output.d_ats_oi_prcnt_chng, 0 );
      i_err[5]  = Fadd32 ( ptr_fml_Ibuf, FFO_CSHSTTL_FRCTN,(char *)&st_output.d_ats_vol_prcnt_chng, 0 );
      i_err[6]  = Fadd32 ( ptr_fml_Ibuf, FFO_UNDRLYNG,(char *)st_output.c_ats_undrlyng, 0 );
      i_err[7]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXPRY_DT,(char *)st_output.c_ats_actn_dt, 0 );
      i_err[8]  = Fadd32 ( ptr_fml_Ibuf, FFO_MIN_LOT_QTY,(char *)&st_output.l_ats_mkt_lot, 0 );
      i_err[9]  = Fadd32 ( ptr_fml_Ibuf, FFO_STRK_PRC,(char *)&st_output.l_strk_prc, 0 );
      i_err[10]  = Fadd32 ( ptr_fml_Ibuf, FFO_OPT_TYP,(char *)&st_output.c_opt_typ, 0 );
      i_err[11]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXER_TYP,(char *)&st_output.c_exrc_typ, 0 );
      i_err[12]  = Fadd32 ( ptr_fml_Ibuf, FFO_EFF_LMT_RT,(char *)&st_output.d_ats_imp_vltly, 0 );
      i_err[13]  = Fadd32 ( ptr_fml_Ibuf, FFO_AVM_PRCNT,(char *)&st_output.d_ats_imp_vltly_prcnt, 0 );
			i_err[14]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_TYP,(char *)&st_output.c_prdct_typ, 0 );

      for( i_cnt = 0; i_cnt < 15; i_cnt++ )
      {
        if( i_err[i_cnt] == -1 )
        {
          fn_errlog( c_ServiceName, "S31290",FMLMSG,c_err_msg);
          return -1;
        }
      }

		}
		else
		{
			fn_userlog( c_ServiceName,"Please check " );
			return -1;
		}

		fn_userlog( c_ServiceName,"I AM HAPPY" );
		return (0);
}

int fn_get_HRS_values( char   *c_ServiceName,
                       struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf,
											 FBFR32 * ptr_fml_Ibuf,
											 long   l_indicator
                     ) 
{

	int i = 0;
  int i_err[TOTAL_FML];
  int i_count = 0;
  int i_cnt = 0;

  long l_bufferlength = 0;
	long l_strike_prc = 0;

  char   c_err_msg[256];
  char   c_tablename[4];

	char   c_opt_typ = '*';
	char   c_exercise_type = 'E';
	char   c_prd_typ = 'F';
	char   c_indstk = 'S';

	struct st_ats_output st_output;
	memset( &st_output,0,sizeof( struct st_ats_output ) );

	strcpy( st_output.c_ats_tablename,"HRS" );
	strcpy( c_tablename,"HRS" );

	if(DEBUG_MSG_LVL_3)
	{
 		 fn_userlog( c_ServiceName,"HRS:START" );
	}

	if( l_indicator == 0 )
	{

		 EXEC SQL
          DECLARE cur_ats_hrs CURSOR FOR
          SELECT  FTQ_UNDRLYNG,
                  NVL(FTQ_MIN_LOT_QTY,0),
                  FTQ_EXPRY_DT ,
                  :c_tablename,
                  NVL(FTQ_LST_TRD_PRC/100,0),
                  CASE WHEN NVL(FTQ_ATS_CLS_PRC,0) = 0 THEN 0 ELSE ((NVL(FTQ_LST_TRD_PRC,0)-FTQ_ATS_CLS_PRC)*100)/FTQ_ATS_CLS_PRC END, /*Ver 1.4 */
							    NVL(FTQ_ROLL_OVER,0),
							    NVL(FTQ_RLVR_PER,0)
          FROM    FTQ_FO_TRD_QT
					WHERE   FTQ_XCHNG_CD = 'NFO' 		/** Ver 1.5 **/
          AND     FTQ_PRDCT_TYP = :c_prd_typ 

				  /*Commented in Ver 1.2 
					AND     FTQ_INDSTK = :c_indstk 
					*******/

					AND     FTQ_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt
					AND     FTQ_RLVR_OPN_CNTRCTS >=5000
          ORDER BY 7 DESC;  

     EXEC SQL
          OPEN cur_ats_hrs;

     for( i_count = 0; i_count < 10; i_count++ )
     {
				
			 memset( &st_output,0,sizeof( struct st_ats_output ) );

			 strcpy( st_output.c_ats_tablename,"HRS" );

       EXEC SQL
            FETCH cur_ats_hrs
            INTO  :st_output.c_ats_undrlyng,
                  :st_output.l_ats_mkt_lot,
                  :st_output.c_ats_actn_dt,
                  :st_output.c_ats_tablename,
                  :st_output.d_ats_price,
                  :st_output.d_ats_prc_prcnt_chng,
                  :st_output.d_ats_oi_chng,
                  :st_output.d_ats_oi_prcnt_chng;

       if( SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND ) /* 1405 :Null data error , we will proceed */
       {
         fn_errlog(c_ServiceName, "S31295", SQLMSG, c_err_msg);
				 EXEC SQL CLOSE cur_ats_hrs;
         return (-1);
       }
			 if( SQLCODE == -1405 )
       {
				 fn_userlog( c_ServiceName,"Inside Null data in HRS" );
         i_count = i_count - 1;
         continue;
       }
       if( SQLCODE == NO_DATA_FOUND )
       {
				 fn_userlog( c_ServiceName,"Inside No data in HRS" );
         EXEC SQL CLOSE cur_ats_hrs;
         return (0);
       }

			 trim( st_output.c_ats_actn_dt );

			 if(DEBUG_MSG_LVL_3)
			 {
				 fn_userlog( c_ServiceName,"Underlying :%d: is :%s:",i_count,st_output.c_ats_undrlyng );
				 fn_userlog( c_ServiceName,"Lot size :%d: is :%ld:",i_count,st_output.l_ats_mkt_lot );
				 fn_userlog( c_ServiceName,"Expiry date :%d: is :%s:",i_count,st_output.c_ats_actn_dt );
				 fn_userlog( c_ServiceName,"Table is :%d: is :%s:",i_count,st_output.c_ats_tablename );
				 fn_userlog( c_ServiceName,"Price :%d: is :%lf:",i_count,st_output.d_ats_price );
				 fn_userlog( c_ServiceName,"Price Percentage :%d: is :%lf:",i_count,st_output.d_ats_prc_prcnt_chng );
				 fn_userlog( c_ServiceName,"Current OI :%d: is :%lf:",i_count,st_output.d_ats_oi_chng );
				 fn_userlog( c_ServiceName,"OI Percentage :%d: is :%lf:",i_count,st_output.d_ats_oi_prcnt_chng );
			 }
	 
   		 i_err[0]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_DESC,( char *)st_output.c_ats_tablename, 0 );
       i_err[1]  = Fadd32 ( ptr_fml_Ibuf, FFO_AMOUNT,( char *)&st_output.d_ats_price, 0 );
       i_err[2]  = Fadd32 ( ptr_fml_Ibuf, FFO_MKT_CPTLTN,( char *)&st_output.d_ats_prc_prcnt_chng, 0 );
       i_err[3]  = Fadd32 ( ptr_fml_Ibuf, FFO_CRNT_OI,(char *)&st_output.d_ats_oi_chng, 0 );
       i_err[4]  = Fadd32 ( ptr_fml_Ibuf, FFO_CHNG_OI,(char *)&st_output.d_ats_oi_prcnt_chng, 0 );
       i_err[5]  = Fadd32 ( ptr_fml_Ibuf, FFO_CSHSTTL_FRCTN,(char *)&st_output.d_ats_vol_prcnt_chng, 0 );
       i_err[6]  = Fadd32 ( ptr_fml_Ibuf, FFO_UNDRLYNG,(char *)st_output.c_ats_undrlyng, 0 );
       i_err[7]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXPRY_DT,(char *)st_output.c_ats_actn_dt, 0 );
       i_err[8]  = Fadd32 ( ptr_fml_Ibuf, FFO_MIN_LOT_QTY,(char *)&st_output.l_ats_mkt_lot, 0 );
       i_err[9]  = Fadd32 ( ptr_fml_Ibuf, FFO_OPT_TYP,(char *)&c_opt_typ, 0 );
			 i_err[10]  = Fadd32 ( ptr_fml_Ibuf, FFO_STRK_PRC,(char *)&l_strike_prc, 0 );
			 i_err[11]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXER_TYP,(char *)&c_exercise_type, 0 );
			 i_err[12]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_TYP,(char *)&c_prd_typ, 0 );
  
       for( i_cnt = 0; i_cnt < 13; i_cnt++ )
       {
        if( i_err[i_cnt] == -1 )
        {
          fn_errlog( c_ServiceName, "S31300",FMLMSG,c_err_msg);
					EXEC SQL CLOSE cur_ats_hrs;
          return -1;
        }
       }
  
 	   } /* End of For loop */
		 EXEC SQL CLOSE cur_ats_hrs;

	}
	else if (l_indicator == 1)
	{
		EXEC SQL
				 SELECT  FTQ_UNDRLYNG,
                 FTQ_MIN_LOT_QTY LOT,
                 FTQ_EXPRY_DT EXPIRY_DT,
                 :c_tablename,
                 NVL(FTQ_LST_TRD_PRC/100,0),
                 CASE WHEN NVL(FTQ_ATS_CLS_PRC,0) = 0 THEN 0 ELSE (((NVL(FTQ_LST_TRD_PRC,0)-FTQ_ATS_CLS_PRC)*100)/FTQ_ATS_CLS_PRC) END, /*Ver 1.4 */
                 NVL(FTQ_ROLL_OVER,0),
                 NVL(FTQ_RLVR_PER,0)
				 INTO    :st_output.c_ats_undrlyng,
                 :st_output.l_ats_mkt_lot,
                 :st_output.c_ats_actn_dt,
                 :st_output.c_ats_tablename,
                 :st_output.d_ats_price,
                 :st_output.d_ats_prc_prcnt_chng,
                 :st_output.d_ats_oi_chng,
                 :st_output.d_ats_oi_prcnt_chng
         FROM    FTQ_FO_TRD_QT
				 WHERE   FTQ_XCHNG_CD = 'NFO'			/**Ver 1.5 **/
         AND     FTQ_PRDCT_TYP = :c_prd_typ 

				/*Commented in Ver 1.2 
         AND     FTQ_INDSTK = :c_indstk 
				*******/

				 AND     FTQ_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt
         AND     FTQ_UNDRLYNG = :ptr_st_cntrct_gen_inf->c_undrlyng;

		 if( SQLCODE != 0 ) 
     {
       fn_errlog(c_ServiceName, "S31305", SQLMSG, c_err_msg);
       return (-1);
     }
		 
		 trim( st_output.c_ats_actn_dt );

		 if(DEBUG_MSG_LVL_3)
		 {	
			 fn_userlog( c_ServiceName,"Underlying :%d: is :%s:",i_count,st_output.c_ats_undrlyng );
			 fn_userlog( c_ServiceName,"Lot size :%d: is :%ld:",i_count,st_output.l_ats_mkt_lot );
			 fn_userlog( c_ServiceName,"Expiry date :%d: is :%s:",i_count,st_output.c_ats_actn_dt );
			 fn_userlog( c_ServiceName,"Table is :%d: is :%s:",i_count,st_output.c_ats_tablename );
			 fn_userlog( c_ServiceName,"Price :%d: is :%lf:",i_count,st_output.d_ats_price );
			 fn_userlog( c_ServiceName,"Price Percentage :%d: is :%lf:",i_count,st_output.d_ats_prc_prcnt_chng );
			 fn_userlog( c_ServiceName,"Current OI :%d: is :%lf:",i_count,st_output.d_ats_oi_chng );
			 fn_userlog( c_ServiceName,"OI Percentage :%d: is :%lf:",i_count,st_output.d_ats_oi_prcnt_chng );
		 }

     i_err[0]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_DESC,( char *)st_output.c_ats_tablename, 0 );
     i_err[1]  = Fadd32 ( ptr_fml_Ibuf, FFO_AMOUNT,( char *)&st_output.d_ats_price, 0 );
     i_err[2]  = Fadd32 ( ptr_fml_Ibuf, FFO_MKT_CPTLTN,( char *)&st_output.d_ats_prc_prcnt_chng, 0 );
     i_err[3]  = Fadd32 ( ptr_fml_Ibuf, FFO_CRNT_OI,(char *)&st_output.d_ats_oi_chng, 0 );
     i_err[4]  = Fadd32 ( ptr_fml_Ibuf, FFO_CHNG_OI,(char *)&st_output.d_ats_oi_prcnt_chng, 0 );
     i_err[5]  = Fadd32 ( ptr_fml_Ibuf, FFO_CSHSTTL_FRCTN,(char *)&st_output.d_ats_vol_prcnt_chng, 0 );
     i_err[6]  = Fadd32 ( ptr_fml_Ibuf, FFO_UNDRLYNG,(char *)st_output.c_ats_undrlyng, 0 );
     i_err[7]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXPRY_DT,(char *)st_output.c_ats_actn_dt, 0 );
     i_err[8]  = Fadd32 ( ptr_fml_Ibuf, FFO_MIN_LOT_QTY,(char *)&st_output.l_ats_mkt_lot, 0 );
		 i_err[9]  = Fadd32 ( ptr_fml_Ibuf, FFO_OPT_TYP,(char *)&c_opt_typ, 0 );
		 i_err[10]  = Fadd32 ( ptr_fml_Ibuf, FFO_STRK_PRC,(char *)&l_strike_prc, 0 );
		 i_err[11]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXER_TYP,(char *)&c_exercise_type, 0 );
		 i_err[12]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_TYP,(char *)&c_prd_typ, 0 );

     for( i_cnt = 0; i_cnt < 13; i_cnt++ )
     {
      if( i_err[i_cnt] == -1 )
      {
        fn_errlog( c_ServiceName, "S31310",FMLMSG,c_err_msg);
        return -1;
      }
     }

	}
	else
	{
		fn_userlog( c_ServiceName,"Error, please check" );
		return -1;
	}

	return (0);
}

int fn_get_filter_stocks( char   *c_ServiceName,
                          struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf,
													FBFR32 * ptr_fml_Ibuf,
													long   l_indicator
                        ) 
{

	int i = 0;
  int i_err[TOTAL_FML];
  int i_count = 0;
  int i_cnt = 0;

  long l_bufferlength = 0;
	long l_strike_prc = 0;

	double d_ltq_rt = 0.0;
	double d_prev_high = 0.0;
	double d_prev_low = 0.0;
	double d_per_chng = 0.0;

  char   c_err_msg[256];
  char   c_tablename[4];
	char   c_qt_flg = 'N';

  char   c_opt_typ = '*';
  char   c_exercise_type = 'E';
  char   c_prd_typ = 'F';
	char   c_qt_trdng_flg = 'T';
	char   c_ltq_xchng_cd[4];

	struct st_ats_output st_output;
  memset( &st_output,0,sizeof( struct st_ats_output ) );

  strcpy( c_tablename,"FS" );
  strcpy( c_ltq_xchng_cd,"NSE" );

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog( c_ServiceName,"FS Expiry date is :%s:", ptr_st_cntrct_gen_inf->c_expry_dt );
	}

	if( l_indicator == 1 )
	{
/**Ver 1.5, Join on FCM taken **/

    /*** Commented in Ver 2.3 ***
		EXEC SQL
			 	 DECLARE cur_ats_fs1 CURSOR FOR
       	 SELECT  LTQ_STCK_CD,
								 NVL(LTQ_RT,0),
								 NVL(LTQ_PRV_HGH,0),
								 CASE WHEN NVL(LTQ_PRV_HGH,0) = 0 THEN 0 ELSE ROUND((((NVL(LTQ_RT,0)-LTQ_PRV_HGH)/LTQ_PRV_HGH)*100) ,2) END
				 FROM    LTQ_TRD_QT, FCM_FO_CNTRCT_MSTR  **Ver 1.5 **
				 WHERE   LTQ_XCHNG_CD = :c_ltq_xchng_cd
       	 AND     FCM_XCHNG_CD = 'NFO'     **Ver 1.5 **
         AND     FCM_PRDCT_TYP='F'        **Ver 1.5 **
         AND     FCM_UNDRLYNG = LTQ_STCK_CD **Ver 1.5 **
         AND     FCM_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt  **Ver 1.5 **
         AND     FCM_QT_TRDNG_FLG='T' **Ver 1.5 **
				 AND     (LTQ_RT-ltq_PRV_HGH) > 0 
				 ORDER BY 4 DESC; 
    ***/
    /*** Ver 2.3 Starts -- Join on FCM replaced with join on FTQ***/
    
    EXEC SQL
         DECLARE cur_ats_fs1 CURSOR FOR
         SELECT  LTQ_STCK_CD,
                 NVL(LTQ_RT,0),
                 NVL(LTQ_PRV_HGH,0),
                 CASE WHEN NVL(LTQ_PRV_HGH,0) = 0 THEN 0 ELSE ROUND((((NVL(LTQ_RT,0)-LTQ_PRV_HGH)/LTQ_PRV_HGH)*100) ,2) END
         FROM    LTQ_TRD_QT, FTQ_FO_TRD_QT      
         WHERE   LTQ_XCHNG_CD = :c_ltq_xchng_cd
         AND     FTQ_XCHNG_CD = 'NFO'    
         AND     FTQ_PRDCT_TYP='F'      
         AND     FTQ_UNDRLYNG = LTQ_STCK_CD 
         AND     FTQ_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt 
         AND     FTQ_QT_TRDNG_FLG='T' 
         AND     (LTQ_RT-ltq_PRV_HGH) > 0
         ORDER BY 4 DESC;

    /*** Ver 2.3 Ends   ***/
		EXEC SQL
          OPEN cur_ats_fs1;

		for( i_count =0; i_count < 10; i_count++ )
		{

			memset( &st_output,0,sizeof( struct st_ats_output ) );

      strcpy( st_output.c_ats_tablename,"FS" );

			EXEC SQL
           FETCH cur_ats_fs1
           INTO  :ptr_st_cntrct_gen_inf->c_undrlyng,
								 :d_ltq_rt,
								 :d_prev_high,
								 :d_per_chng;

			if( SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND ) /* 1405 :Null data error , we will proceed */
      {
        fn_errlog(c_ServiceName, "S31315", SQLMSG, c_err_msg);
        EXEC SQL CLOSE cur_ats_fs1;
        return (-1);
      }
      if( SQLCODE == -1405 )
      {
        i_count = i_count - 1;
        continue;
      }
      if( SQLCODE == NO_DATA_FOUND )
      {
				fn_userlog( c_ServiceName,"In No data found if FS-1" );
        EXEC SQL CLOSE cur_ats_fs1;
        return (0);
      }
	
			if(DEBUG_MSG_LVL_0)
			{
					fn_userlog( c_ServiceName,"Underlying is :%s:", ptr_st_cntrct_gen_inf->c_undrlyng );
					fn_userlog( c_ServiceName,"LTQ rate is :%lf:", d_ltq_rt );
					fn_userlog( c_ServiceName,"Previous high is :%lf:", d_prev_high );
					fn_userlog( c_ServiceName,"change is :%lf:", d_per_chng );
					fn_userlog( c_ServiceName,"Expiry date is :%s:", ptr_st_cntrct_gen_inf->c_expry_dt );
			}
          /***Commented in Ver 1.5
					EXEC SQL
					 SELECT FCM_QT_TRDNG_FLG 
					 INTO   :c_qt_flg
					 FROM   FCM_FO_CNTRCT_MSTR
					 WHERE  FCM_PRDCT_TYP = :c_prd_typ 
	         AND    FCM_UNDRLYNG = :ptr_st_cntrct_gen_inf->c_undrlyng
					 AND    FCM_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt
				   AND    FCM_QT_TRDNG_FLG = :c_qt_trdng_flg ;

			if( SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName, "S31320", SQLMSG, c_err_msg);
				EXEC SQL CLOSE cur_ats_fs1;
      }
			if( SQLCODE == -1405 )
      {
        i_count = i_count - 1;
        continue;
      }
      if( SQLCODE == NO_DATA_FOUND )
      {
				i_count = i_count - 1;
				continue;
      }
***************/

			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog( c_ServiceName,"Underlying is :%s:", ptr_st_cntrct_gen_inf->c_undrlyng );
				fn_userlog( c_ServiceName,"Expiry date is :%s:", ptr_st_cntrct_gen_inf->c_expry_dt );
			}

		  EXEC SQL
           SELECT  FTQ_UNDRLYNG,
                 	 FTQ_MIN_LOT_QTY,
                 	 FTQ_EXPRY_DT, 
                 	 :c_tablename,
                 	 CASE WHEN NVL(FTQ_ATS_CLS_PRC,0) = 0 THEN 0 ELSE ((NVL(FTQ_LST_TRD_PRC,0)-FTQ_ATS_CLS_PRC)*100)/FTQ_ATS_CLS_PRC END, /*Ver 1.4 */
                 	 CASE WHEN NVL(FTQ_CLS_OI,0)  = 0 THEN 0 ELSE ((NVL(FTQ_CRNT_OI,0)-FTQ_CLS_OI)*100)/FTQ_CLS_OI END,
                 	 CASE WHEN NVL(FTQ_MIN_LOT_QTY,0) = 0 THEN 0 WHEN NVL(FTQ_CLS_TRD_QTY,0) = 0 THEN 0 ELSE (((NVL(FTQ_TOT_QTY_TRDD,0)/FTQ_MIN_LOT_QTY)- (FTQ_CLS_TRD_QTY/FTQ_MIN_LOT_QTY))/(FTQ_CLS_TRD_QTY/FTQ_MIN_LOT_QTY))*100 END,
									 NVL(FTQ_RLVR_PER,0),
									 NVL(FTQ_LST_TRD_PRC,0)/100
					 INTO    :st_output.c_ats_undrlyng,
                   :st_output.l_ats_mkt_lot,
                   :st_output.c_ats_actn_dt,
                   :st_output.c_ats_tablename,
                   :st_output.d_ats_prc_prcnt_chng,
                   :st_output.d_ats_oi_prcnt_chng,
                   :st_output.d_ats_vol_prcnt_chng,
									 :st_output.d_ats_oi_chng,
									 :st_output.d_ats_price
           FROM    FTQ_FO_TRD_QT
           WHERE   FTQ_XCHNG_CD = 'NFO'     /**Ver 1.5 **/
           AND     FTQ_PRDCT_TYP = :c_prd_typ 
           AND     FTQ_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt
           AND     FTQ_UNDRLYNG = :ptr_st_cntrct_gen_inf->c_undrlyng;

      if( SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName, "S31325", SQLMSG, c_err_msg);
				EXEC SQL CLOSE cur_ats_fs1;
        return (-1);
      }
			if( SQLCODE == -1405 )
      {
        i_count = i_count - 1;
        continue;
      }
      if( SQLCODE == NO_DATA_FOUND )
      {
				fn_userlog( c_ServiceName,"In no data found of FS-1 b" );
				i_count = i_count - 1;
        continue;
      }

			trim( st_output.c_ats_actn_dt );

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName,"Underlying :%d: is :%s:",i_count,st_output.c_ats_undrlyng );
				fn_userlog( c_ServiceName,"Lot size :%d: is :%ld:",i_count,st_output.l_ats_mkt_lot );
				fn_userlog( c_ServiceName,"Expiry date :%d: is :%s:",i_count,st_output.c_ats_actn_dt );
				fn_userlog( c_ServiceName,"Table is :%d: is :%s:",i_count,st_output.c_ats_tablename );
				fn_userlog( c_ServiceName,"Price Percentage :%d: is :%lf:",i_count,st_output.d_ats_prc_prcnt_chng );
				fn_userlog( c_ServiceName,"Rollover % :%d: is :%lf:",i_count,st_output.d_ats_oi_chng );
				fn_userlog( c_ServiceName,"OI Percentage :%d: is :%lf:",i_count,st_output.d_ats_oi_prcnt_chng );
			}

			i_err[0]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_DESC,( char *)st_output.c_ats_tablename, 0 );
			i_err[1]  = Fadd32 ( ptr_fml_Ibuf, FFO_AMOUNT,( char *)&st_output.d_ats_price, 0 );
    	i_err[2]  = Fadd32 ( ptr_fml_Ibuf, FFO_MKT_CPTLTN,( char *)&st_output.d_ats_prc_prcnt_chng, 0 );
    	i_err[3]  = Fadd32 ( ptr_fml_Ibuf, FFO_CRNT_OI,(char *)&st_output.d_ats_oi_chng, 0 );
    	i_err[4]  = Fadd32 ( ptr_fml_Ibuf, FFO_CHNG_OI,(char *)&st_output.d_ats_oi_prcnt_chng, 0 );
    	i_err[5]  = Fadd32 ( ptr_fml_Ibuf, FFO_CSHSTTL_FRCTN,(char *)&st_output.d_ats_vol_prcnt_chng, 0 );
    	i_err[6]  = Fadd32 ( ptr_fml_Ibuf, FFO_UNDRLYNG,(char *)st_output.c_ats_undrlyng, 0 );
    	i_err[7]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXPRY_DT,(char *)st_output.c_ats_actn_dt, 0 );
    	i_err[8]  = Fadd32 ( ptr_fml_Ibuf, FFO_MIN_LOT_QTY,(char *)&st_output.l_ats_mkt_lot, 0 );
			i_err[9]  = Fadd32 ( ptr_fml_Ibuf, FFO_OPT_TYP,(char *)&c_opt_typ, 0 );
			i_err[10]  = Fadd32 ( ptr_fml_Ibuf, FFO_STRK_PRC,(char *)&l_strike_prc, 0 );
			i_err[11]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXER_TYP,(char *)&c_exercise_type, 0 );
			i_err[12]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_TYP,(char *)&c_prd_typ, 0 );
	
			for( i_cnt = 0; i_cnt < 13; i_cnt++ )
   	 	{
     		if( i_err[i_cnt] == -1 )
     		{
     		  fn_errlog( c_ServiceName, "S31330",FMLMSG,c_err_msg);
					EXEC SQL CLOSE cur_ats_fs1;
     		  return -1;
     		}
    	}

		} /* Loop for Top 10 */

		EXEC SQL CLOSE cur_ats_fs1;

	}/* End of l_indicatore = 1 */

	if( l_indicator == 2 )
  {
		fn_userlog( c_ServiceName,"In FS-2" );

/**Ver 1.5, Join on FCM taken **/

    /*** Commented in Ver 2.3 join on FCM replaced with join on FTQ ***
    EXEC SQL
         DECLARE cur_ats_fs2 CURSOR FOR
         SELECT  LTQ_STCK_CD,
                 NVL(LTQ_RT,0),
                 NVL(LTQ_PRV_LOW,0),
                 CASE WHEN NVL(LTQ_PRV_LOW,0) = 0 THEN 0 ELSE (((LTQ_PRV_LOW-NVL(LTQ_RT,0))/LTQ_PRV_LOW)*100) END
         FROM    LTQ_TRD_QT,FCM_FO_CNTRCT_MSTR  **Ver 1.5 **
         WHERE   LTQ_XCHNG_CD = :c_ltq_xchng_cd
         AND     FCM_XCHNG_CD = 'NFO'     **Ver 1.5 **
         AND     FCM_PRDCT_TYP='F'        **Ver 1.5 **
         AND     FCM_UNDRLYNG = LTQ_STCK_CD **Ver 1.5 **
         AND     FCM_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt  **Ver 1.5 **
         AND     FCM_QT_TRDNG_FLG='T' **Ver 1.5 **
         AND     (LTQ_PRV_LOW-LTQ_RT) > 0
         ORDER BY 4 DESC;
     ***/
     /*** Ver 2.3 Starts ***/

     EXEC SQL
         DECLARE cur_ats_fs2 CURSOR FOR
         SELECT  LTQ_STCK_CD,
                 NVL(LTQ_RT,0),
                 NVL(LTQ_PRV_LOW,0),
                 CASE WHEN NVL(LTQ_PRV_LOW,0) = 0 THEN 0 ELSE (((LTQ_PRV_LOW-NVL(LTQ_RT,0))/LTQ_PRV_LOW)*100) END
         FROM    LTQ_TRD_QT,FTQ_FO_TRD_QT    
         WHERE   LTQ_XCHNG_CD = :c_ltq_xchng_cd
         AND     FTQ_XCHNG_CD = 'NFO'     
         AND     FTQ_PRDCT_TYP='F'       
         AND     FTQ_UNDRLYNG = LTQ_STCK_CD 
         AND     FTQ_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt  
         AND     FTQ_QT_TRDNG_FLG='T' 
         AND     (LTQ_PRV_LOW-LTQ_RT) > 0
         ORDER BY 4 DESC; 
    
     /*** Ver 2.3 Ends  ***/

    EXEC SQL
          OPEN cur_ats_fs2;

    for( i_count =0; i_count < 10; i_count++ )
    {

			fn_userlog( c_ServiceName,"Count is :%d:", i_count );

			memset( &st_output,0,sizeof( struct st_ats_output ) );
      strcpy( st_output.c_ats_tablename,"FS" );

      EXEC SQL
           FETCH cur_ats_fs2
           INTO  :ptr_st_cntrct_gen_inf->c_undrlyng,
                 :d_ltq_rt,
                 :d_prev_low,
                 :d_per_chng;

			if( SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName, "S31335", SQLMSG, c_err_msg);
        EXEC SQL CLOSE cur_ats_fs2;
        return (-1);
      }
      if( SQLCODE == -1405 )
      {
        i_count = i_count - 1;
        continue;
      }
      if( SQLCODE == NO_DATA_FOUND )
      {
				fn_userlog( c_ServiceName,"In No data found of FS-2" );
				EXEC SQL CLOSE cur_ats_fs2;
        return (0);
      }

/**Commented in Ver 1.5
      EXEC SQL
           SELECT FCM_QT_TRDNG_FLG
           INTO   :c_qt_flg
           FROM   FCM_FO_CNTRCT_MSTR
           WHERE  FCM_PRDCT_TYP = :c_prd_typ 
           AND    FCM_UNDRLYNG = :ptr_st_cntrct_gen_inf->c_undrlyng
           AND    FCM_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt
           AND    FCM_QT_TRDNG_FLG = :c_qt_trdng_flg;

			if( SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName, "S31340", SQLMSG, c_err_msg);
        EXEC SQL CLOSE cur_ats_fs2;
        return (-1);
      }
      if( SQLCODE == -1405 )
      {
        i_count = i_count - 1;
        continue;
      }
      if( SQLCODE == NO_DATA_FOUND )
      {
				i_count = i_count - 1;
        continue;
      }
************/

			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog( c_ServiceName,"FS - 2 Underlying is :%s:", ptr_st_cntrct_gen_inf->c_undrlyng );
				fn_userlog( c_ServiceName,"FS - 2 Expiry date is :%s:", ptr_st_cntrct_gen_inf->c_expry_dt );
			}
	
			EXEC SQL
           SELECT  FTQ_UNDRLYNG,
                   FTQ_MIN_LOT_QTY,
                   FTQ_EXPRY_DT,
                   :c_tablename,
                   CASE WHEN NVL(FTQ_ATS_CLS_PRC,0) = 0 THEN 0 ELSE ((NVL(FTQ_LST_TRD_PRC,0)-FTQ_ATS_CLS_PRC)*100)/FTQ_ATS_CLS_PRC END, /*Ver 1.4 */
                   CASE WHEN NVL(FTQ_CLS_OI,0) = 0 THEN 0 ELSE ((NVL(FTQ_CRNT_OI,0)-FTQ_CLS_OI)*100)/FTQ_CLS_OI END,
                   CASE WHEN NVL(FTQ_MIN_LOT_QTY,0) = 0 THEN 0 WHEN NVL(FTQ_CLS_TRD_QTY,0) = 0 THEN 0 ELSE (((NVL(FTQ_TOT_QTY_TRDD,0)/FTQ_MIN_LOT_QTY)- (FTQ_CLS_TRD_QTY/FTQ_MIN_LOT_QTY))/(FTQ_CLS_TRD_QTY/FTQ_MIN_LOT_QTY))*100 END,
                   NVL(FTQ_RLVR_PER,0),
                   NVL(FTQ_LST_TRD_PRC,0)/100
           INTO    :st_output.c_ats_undrlyng,
                   :st_output.l_ats_mkt_lot,
                   :st_output.c_ats_actn_dt,
                   :st_output.c_ats_tablename,
                   :st_output.d_ats_prc_prcnt_chng,
                   :st_output.d_ats_oi_prcnt_chng,
                   :st_output.d_ats_vol_prcnt_chng,
                   :st_output.d_ats_oi_chng,
                   :st_output.d_ats_price
           FROM    FTQ_FO_TRD_QT
           WHERE   FTQ_XCHNG_CD = 'NFO'     /**Ver 1.5 **/
           AND		 FTQ_PRDCT_TYP = :c_prd_typ
           AND     FTQ_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt
           AND     FTQ_UNDRLYNG = :ptr_st_cntrct_gen_inf->c_undrlyng;

			if( SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName, "S31345", SQLMSG, c_err_msg);
        EXEC SQL CLOSE cur_ats_fs2;
        return (-1);
      }
      if( SQLCODE == -1405 )
      {
        i_count = i_count - 1;
        continue;
      }
      if( SQLCODE == NO_DATA_FOUND )
      {
				i_count = i_count - 1;
        continue;
      }
	
			trim( st_output.c_ats_actn_dt );

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName,"Underlying :%d: is :%s:",i_count,st_output.c_ats_undrlyng );
				fn_userlog( c_ServiceName,"Lot size :%d: is :%ld:",i_count,st_output.l_ats_mkt_lot );
				fn_userlog( c_ServiceName,"Expiry date :%d: is :%s:",i_count,st_output.c_ats_actn_dt );
				fn_userlog( c_ServiceName,"Table is :%d: is :%s:",i_count,st_output.c_ats_tablename );
				fn_userlog( c_ServiceName,"Price Percentage :%d: is :%lf:",i_count,st_output.d_ats_prc_prcnt_chng );
				fn_userlog( c_ServiceName,"Rollover % :%d: is :%lf:",i_count,st_output.d_ats_oi_chng );
				fn_userlog( c_ServiceName,"OI Percentage :%d: is :%lf:",i_count,st_output.d_ats_oi_prcnt_chng );
			}

			i_err[0]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_DESC,( char *)st_output.c_ats_tablename, 0 );
      i_err[1]  = Fadd32 ( ptr_fml_Ibuf, FFO_AMOUNT,( char *)&st_output.d_ats_price, 0 );
      i_err[2]  = Fadd32 ( ptr_fml_Ibuf, FFO_MKT_CPTLTN,( char *)&st_output.d_ats_prc_prcnt_chng, 0 );
      i_err[3]  = Fadd32 ( ptr_fml_Ibuf, FFO_CRNT_OI,(char *)&st_output.d_ats_oi_chng, 0 );
      i_err[4]  = Fadd32 ( ptr_fml_Ibuf, FFO_CHNG_OI,(char *)&st_output.d_ats_oi_prcnt_chng, 0 );
      i_err[5]  = Fadd32 ( ptr_fml_Ibuf, FFO_CSHSTTL_FRCTN,(char *)&st_output.d_ats_vol_prcnt_chng, 0 );
      i_err[6]  = Fadd32 ( ptr_fml_Ibuf, FFO_UNDRLYNG,(char *)st_output.c_ats_undrlyng, 0 );
      i_err[7]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXPRY_DT,(char *)st_output.c_ats_actn_dt, 0 );
      i_err[8]  = Fadd32 ( ptr_fml_Ibuf, FFO_MIN_LOT_QTY,(char *)&st_output.l_ats_mkt_lot, 0 );
      i_err[9]  = Fadd32 ( ptr_fml_Ibuf, FFO_OPT_TYP,(char *)&c_opt_typ, 0 );
      i_err[10]  = Fadd32 ( ptr_fml_Ibuf, FFO_STRK_PRC,(char *)&l_strike_prc, 0 );
      i_err[11]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXER_TYP,(char *)&c_exercise_type, 0 );
      i_err[12]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_TYP,(char *)&c_prd_typ, 0 );


			for( i_cnt = 0; i_cnt < 13; i_cnt++ )
      {
        if( i_err[i_cnt] == -1 )
        {
          fn_errlog( c_ServiceName, "S31350",FMLMSG,c_err_msg);
          EXEC SQL CLOSE cur_ats_fs2;
          return -1;
        }
      }

    } /* Loop for Top 10 */

		EXEC SQL CLOSE cur_ats_fs2;

  }/* End of l_indicatore = 2 */

	if( l_indicator == 3 )
  {
/**Ver 1.5, Join with FCM taken **/
    
    /*** Commented in Ver 2.3 join of FCM replaced with join of FTQ ***
    EXEC SQL
         DECLARE cur_ats_fs3 CURSOR FOR
         SELECT  LTQ_STCK_CD,
                 NVL(LTQ_RT,0),
                 NVL(LTQ_52_WK_HGH,0),
                 CASE WHEN NVL(LTQ_52_WK_HGH,0) = 0 THEN 0 ELSE (((NVL(LTQ_RT,0)-LTQ_52_WK_HGH)/LTQ_52_WK_HGH)*100) END
         FROM    LTQ_TRD_QT,FCM_FO_CNTRCT_MSTR  **Ver 1.5 **
         WHERE   LTQ_XCHNG_CD = :c_ltq_xchng_cd 
         AND     FCM_XCHNG_CD = 'NFO'     **Ver 1.5 **
         AND     FCM_PRDCT_TYP='F'        **Ver 1.5 **
         AND     FCM_UNDRLYNG = LTQ_STCK_CD **Ver 1.5 **
         AND     FCM_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt  **Ver 1.5 **
         AND     FCM_QT_TRDNG_FLG='T' **Ver 1.5 **
         AND     (LTQ_RT-LTQ_52_WK_HGH) > 0
         ORDER BY 4 DESC;
     ***/
     /*** Ver 2.3 Starts ***/

     EXEC SQL
         DECLARE cur_ats_fs3 CURSOR FOR
         SELECT  LTQ_STCK_CD,
                 NVL(LTQ_RT,0),
                 NVL(LTQ_52_WK_HGH,0),
                 CASE WHEN NVL(LTQ_52_WK_HGH,0) = 0 THEN 0 ELSE (((NVL(LTQ_RT,0)-LTQ_52_WK_HGH)/LTQ_52_WK_HGH)*100) END
         FROM    LTQ_TRD_QT,FTQ_FO_TRD_QT      
         WHERE   LTQ_XCHNG_CD = :c_ltq_xchng_cd
         AND     FTQ_XCHNG_CD = 'NFO'   
         AND     FTQ_PRDCT_TYP='F'       
         AND     FTQ_UNDRLYNG = LTQ_STCK_CD 
         AND     FTQ_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt 
         AND     FTQ_QT_TRDNG_FLG='T' 
         AND     (LTQ_RT-LTQ_52_WK_HGH) > 0
         ORDER BY 4 DESC;

     /*** Ver 2.3 Ends   ***/
 
    EXEC SQL
          OPEN cur_ats_fs3;

    for( i_count =0; i_count < 10; i_count++ )
    {

			memset( &st_output,0,sizeof( struct st_ats_output ) );
      strcpy( st_output.c_ats_tablename,"FS" );

			fn_userlog( c_ServiceName,"In FS-3" );

      EXEC SQL
           FETCH cur_ats_fs3
           INTO  :ptr_st_cntrct_gen_inf->c_undrlyng,
                 :d_ltq_rt,
                 :d_prev_high,
                 :d_per_chng;
			
			if( SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName, "S31355", SQLMSG, c_err_msg);
        EXEC SQL CLOSE cur_ats_fs3;
        return (-1);
      }
      if( SQLCODE == -1405 )
      {
        i_count = i_count - 1;
        continue;
      }
      if( SQLCODE == NO_DATA_FOUND )
      {
				fn_userlog( c_ServiceName,"In No data found for FS-3" );
        EXEC SQL CLOSE cur_ats_fs3;
        return (0);
      }

/**Commented in Ver 1.5
      EXEC SQL
           SELECT FCM_QT_TRDNG_FLG
           INTO   :c_qt_flg
           FROM   FCM_FO_CNTRCT_MSTR
           WHERE  FCM_PRDCT_TYP = :c_prd_typ 
           AND    FCM_UNDRLYNG = :ptr_st_cntrct_gen_inf->c_undrlyng
           AND    FCM_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt
           AND    FCM_QT_TRDNG_FLG = :c_qt_trdng_flg;

			if( SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName, "S31360", SQLMSG, c_err_msg);
        EXEC SQL CLOSE cur_ats_fs3;
        return (-1);
      }
      if( SQLCODE == -1405 )
      {
        i_count = i_count - 1;
        continue;
      }
      if( SQLCODE == NO_DATA_FOUND )
      {
				i_count = i_count - 1;
        continue;
      }
*******/

			if(DEBUG_MSG_LVL_0)
			{
				fn_userlog( c_ServiceName,"Expiry date is :%s:", ptr_st_cntrct_gen_inf->c_expry_dt );
				fn_userlog( c_ServiceName,"Underlying is :%s:", ptr_st_cntrct_gen_inf->c_undrlyng );
			}

			EXEC SQL
           SELECT  FTQ_UNDRLYNG,
                   FTQ_MIN_LOT_QTY,
                   FTQ_EXPRY_DT ,
                   :c_tablename,
                   CASE WHEN NVL(FTQ_ATS_CLS_PRC,0) = 0 THEN 0 ELSE ROUND(((NVL(FTQ_LST_TRD_PRC,0)-FTQ_ATS_CLS_PRC)*100)/FTQ_ATS_CLS_PRC,2) END, /*Ver 1.4 */
                   CASE WHEN NVL(FTQ_CLS_OI,0) = 0 THEN 0 ELSE ROUND(((NVL(FTQ_CRNT_OI,0)-FTQ_CLS_OI)*100)/FTQ_CLS_OI,2) END,
                   CASE WHEN NVL(FTQ_MIN_LOT_QTY,0) = 0 THEN 0 WHEN NVL(FTQ_CLS_TRD_QTY,0) = 0 THEN 0 ELSE (((NVL(FTQ_TOT_QTY_TRDD,0)/FTQ_MIN_LOT_QTY)- (FTQ_CLS_TRD_QTY/FTQ_MIN_LOT_QTY))/(FTQ_CLS_TRD_QTY/FTQ_MIN_LOT_QTY))*100 END,
                   NVL(FTQ_RLVR_PER,0),
                   NVL(FTQ_LST_TRD_PRC,0)/100
           INTO    :st_output.c_ats_undrlyng,
                   :st_output.l_ats_mkt_lot,
                   :st_output.c_ats_actn_dt,
                   :st_output.c_ats_tablename,
                   :st_output.d_ats_prc_prcnt_chng,
                   :st_output.d_ats_oi_prcnt_chng,
                   :st_output.d_ats_vol_prcnt_chng,
                   :st_output.d_ats_oi_chng,
                   :st_output.d_ats_price
           FROM    FTQ_FO_TRD_QT
           WHERE   FTQ_XCHNG_CD = 'NFO'     /**Ver 1.5 **/
           AND		 FTQ_PRDCT_TYP = :c_prd_typ
           AND     FTQ_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt
           AND     FTQ_UNDRLYNG = :ptr_st_cntrct_gen_inf->c_undrlyng;

      if( SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND ) /* 1405 :Null data error , we will proceed */
      {
        fn_errlog(c_ServiceName, "S31365", SQLMSG, c_err_msg);
        EXEC SQL CLOSE cur_ats_fs3;
        return (-1);
      }
      if( SQLCODE == -1405 )
      {
        i_count = i_count - 1;
        continue;
      }
      if( SQLCODE == NO_DATA_FOUND )
      {
				i_count = i_count - 1;
        continue;
      }
		
			trim( st_output.c_ats_actn_dt );

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName,"Underlying :%d: is :%s:",i_count,st_output.c_ats_undrlyng );
				fn_userlog( c_ServiceName,"Lot size :%d: is :%ld:",i_count,st_output.l_ats_mkt_lot );
				fn_userlog( c_ServiceName,"Expiry date :%d: is :%s:",i_count,st_output.c_ats_actn_dt );
				fn_userlog( c_ServiceName,"Table is :%d: is :%s:",i_count,st_output.c_ats_tablename );
				fn_userlog( c_ServiceName,"Price Percentage :%d: is :%lf:",i_count,st_output.d_ats_prc_prcnt_chng );
				fn_userlog( c_ServiceName,"Rollover % :%d: is :%lf:",i_count,st_output.d_ats_oi_chng );
				fn_userlog( c_ServiceName,"OI Percentage :%d: is :%lf:",i_count,st_output.d_ats_oi_prcnt_chng );
			}

			i_err[0]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_DESC,( char *)st_output.c_ats_tablename, 0 );
      i_err[1]  = Fadd32 ( ptr_fml_Ibuf, FFO_AMOUNT,( char *)&st_output.d_ats_price, 0 );
      i_err[2]  = Fadd32 ( ptr_fml_Ibuf, FFO_MKT_CPTLTN,( char *)&st_output.d_ats_prc_prcnt_chng, 0 );
      i_err[3]  = Fadd32 ( ptr_fml_Ibuf, FFO_CRNT_OI,(char *)&st_output.d_ats_oi_chng, 0 );
      i_err[4]  = Fadd32 ( ptr_fml_Ibuf, FFO_CHNG_OI,(char *)&st_output.d_ats_oi_prcnt_chng, 0 );
      i_err[5]  = Fadd32 ( ptr_fml_Ibuf, FFO_CSHSTTL_FRCTN,(char *)&st_output.d_ats_vol_prcnt_chng, 0 );
      i_err[6]  = Fadd32 ( ptr_fml_Ibuf, FFO_UNDRLYNG,(char *)st_output.c_ats_undrlyng, 0 );
      i_err[7]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXPRY_DT,(char *)st_output.c_ats_actn_dt, 0 );
      i_err[8]  = Fadd32 ( ptr_fml_Ibuf, FFO_MIN_LOT_QTY,(char *)&st_output.l_ats_mkt_lot, 0 );
      i_err[9]  = Fadd32 ( ptr_fml_Ibuf, FFO_OPT_TYP,(char *)&c_opt_typ, 0 );
      i_err[10]  = Fadd32 ( ptr_fml_Ibuf, FFO_STRK_PRC,(char *)&l_strike_prc, 0 );
      i_err[11]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXER_TYP,(char *)&c_exercise_type, 0 );
      i_err[12]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_TYP,(char *)&c_prd_typ, 0 );

			for( i_cnt = 0; i_cnt < 13; i_cnt++ )
      {
        if( i_err[i_cnt] == -1 )
        {
          fn_errlog( c_ServiceName, "S31370",FMLMSG,c_err_msg);
          EXEC SQL CLOSE cur_ats_fs3;
          return -1;
        }
      }

    } /* Loop for Top 10 */

		EXEC SQL CLOSE cur_ats_fs3;

  }/* End of l_indicatore = 3 */

	if( l_indicator == 4 )
  {

/**Ver 1.5, Join on FCM taken **/
   
    /***  Commented in Ver 2.3 and join of FCM replaced with FTQ ***
    EXEC SQL
         DECLARE cur_ats_fs4 CURSOR FOR
         SELECT  LTQ_STCK_CD,
                 NVL(Ltq_RT,0),
                 NVL(LTQ_52_WK_LW,0),
                 CASE WHEN NVL(LTQ_52_WK_LW,0) = 0 THEN 0 ELSE (((LTQ_52_WK_LW-NVL(LTQ_RT,0))/LTQ_52_WK_LW)*100) END
         FROM    LTQ_TRD_QT,FCM_FO_CNTRCT_MSTR  *Ver 1.5 **
         WHERE   LTQ_XCHNG_CD = :c_ltq_xchng_cd 
       	 AND     FCM_XCHNG_CD = 'NFO'     **Ver 1.5 **
         AND     FCM_PRDCT_TYP='F'        **Ver 1.5 **
         AND     FCM_UNDRLYNG = LTQ_STCK_CD **Ver 1.5 **
         AND     FCM_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt  **Ver 1.5 **
         AND     FCM_QT_TRDNG_FLG='T' **Ver 1.5 **
         AND     (LTQ_52_WK_LW-LTQ_RT) > 0
         ORDER BY 4 DESC;
     ***/
     /*** Ver 2.3 Starts ***/

     EXEC SQL
         DECLARE cur_ats_fs4 CURSOR FOR
         SELECT  LTQ_STCK_CD,
                 NVL(Ltq_RT,0),
                 NVL(LTQ_52_WK_LW,0),
                 CASE WHEN NVL(LTQ_52_WK_LW,0) = 0 THEN 0 ELSE (((LTQ_52_WK_LW-NVL(LTQ_RT,0))/LTQ_52_WK_LW)*100) END
         FROM    LTQ_TRD_QT,FTQ_FO_TRD_QT       
         WHERE   LTQ_XCHNG_CD = :c_ltq_xchng_cd
         AND     FTQ_XCHNG_CD = 'NFO'    
         AND     FTQ_PRDCT_TYP='F'      
         AND     FTQ_UNDRLYNG = LTQ_STCK_CD
         AND     FTQ_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt 
         AND     FTQ_QT_TRDNG_FLG='T' 
         AND     (LTQ_52_WK_LW-LTQ_RT) > 0
         ORDER BY 4 DESC;

     /*** Ver 2.3 Ends   ***/

    EXEC SQL
          OPEN cur_ats_fs4;

    for( i_count =0; i_count < 10; i_count++ )
    {

			memset( &st_output,0,sizeof( struct st_ats_output ) );
      strcpy( st_output.c_ats_tablename,"FS" );

      EXEC SQL
           FETCH cur_ats_fs4
           INTO  :ptr_st_cntrct_gen_inf->c_undrlyng,
                 :d_ltq_rt,
                 :d_prev_low,
                 :d_per_chng;
		
			if( SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName, "S31375", SQLMSG, c_err_msg);
        EXEC SQL CLOSE cur_ats_fs4;
        return (-1);
      }
      if( SQLCODE == -1405 )
      {
        i_count = i_count - 1;
        continue;
      }
      if( SQLCODE == NO_DATA_FOUND )
      {
        EXEC SQL CLOSE cur_ats_fs4;
        return (0);
      }

/**Commented in Ver 1.5
      EXEC SQL
           SELECT FCM_QT_TRDNG_FLG
           INTO   :c_qt_flg
           FROM   FCM_FO_CNTRCT_MSTR
           WHERE  FCM_PRDCT_TYP = :c_prd_typ
           AND    FCM_UNDRLYNG = :ptr_st_cntrct_gen_inf->c_undrlyng
           AND    FCM_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt
           AND    FCM_QT_TRDNG_FLG = :c_qt_trdng_flg;

			if( SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName, "S31380", SQLMSG, c_err_msg);
        EXEC SQL CLOSE cur_ats_fs4;
        return (-1);
      }
      if( SQLCODE == -1405 )
      {
        i_count = i_count - 1;
        continue;
      }
      if( SQLCODE == NO_DATA_FOUND )
      {
				i_count = i_count - 1;
        continue;
      }
*********/

			EXEC SQL
           SELECT  FTQ_UNDRLYNG,
                   FTQ_MIN_LOT_QTY ,
                   FTQ_EXPRY_DT ,
                   :c_tablename,
                   CASE WHEN NVL(FTQ_ATS_CLS_PRC,0) = 0 THEN 0 ELSE((NVL(FTQ_LST_TRD_PRC,0)-FTQ_ATS_CLS_PRC)*100)/FTQ_ATS_CLS_PRC END, /*Ver 1.4 */
                   CASE WHEN NVL(FTQ_CLS_OI,0) = 0 THEN 0 ELSE ((NVL(FTQ_CRNT_OI,0)-FTQ_CLS_OI)*100)/FTQ_CLS_OI END,
                   CASE WHEN NVL(FTQ_MIN_LOT_QTY,0) = 0 THEN 0 WHEN NVL(FTQ_CLS_TRD_QTY,0) = 0 THEN 0 ELSE (((NVL(FTQ_TOT_QTY_TRDD,0)/FTQ_MIN_LOT_QTY)- (FTQ_CLS_TRD_QTY/FTQ_MIN_LOT_QTY))/(FTQ_CLS_TRD_QTY/FTQ_MIN_LOT_QTY))*100 END,
                   NVL(FTQ_RLVR_PER,0),
                   NVL(FTQ_LST_TRD_PRC,0)/100
           INTO    :st_output.c_ats_undrlyng,
                   :st_output.l_ats_mkt_lot,
                   :st_output.c_ats_actn_dt,
                   :st_output.c_ats_tablename,
                   :st_output.d_ats_prc_prcnt_chng,
                   :st_output.d_ats_oi_prcnt_chng,
                   :st_output.d_ats_vol_prcnt_chng,
                   :st_output.d_ats_oi_chng,
                   :st_output.d_ats_price
           FROM    FTQ_FO_TRD_QT
           WHERE   FTQ_XCHNG_CD  = 'NFO'        /**Ver 1.5 **/
           AND     FTQ_PRDCT_TYP = :c_prd_typ 
           AND     FTQ_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt
           AND     FTQ_UNDRLYNG = :ptr_st_cntrct_gen_inf->c_undrlyng;

      if( SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND ) /* 1405 :Null data error , we will proceed */
      {
        fn_errlog(c_ServiceName, "S31385", SQLMSG, c_err_msg);
        EXEC SQL CLOSE cur_ats_fs4;
        return (-1);
      }
      if( SQLCODE == -1405 )
      {
        i_count = i_count - 1;
        continue;
      }
      if( SQLCODE == NO_DATA_FOUND )
      {
				i_count = i_count - 1;
        continue;
      }
	
			trim( st_output.c_ats_actn_dt );

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName,"Underlying :%d: is :%s:",i_count,st_output.c_ats_undrlyng );
				fn_userlog( c_ServiceName,"Lot size :%d: is :%ld:",i_count,st_output.l_ats_mkt_lot );
				fn_userlog( c_ServiceName,"Expiry date :%d: is :%s:",i_count,st_output.c_ats_actn_dt );
				fn_userlog( c_ServiceName,"Table is :%d: is :%s:",i_count,st_output.c_ats_tablename );
				fn_userlog( c_ServiceName,"Price Percentage :%d: is :%lf:",i_count,st_output.d_ats_prc_prcnt_chng );
				fn_userlog( c_ServiceName,"Rollover % :%d: is :%lf:",i_count,st_output.d_ats_oi_chng );
				fn_userlog( c_ServiceName,"OI Percentage :%d: is :%lf:",i_count,st_output.d_ats_oi_prcnt_chng );
			}

			i_err[0]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_DESC,( char *)st_output.c_ats_tablename, 0 );
      i_err[1]  = Fadd32 ( ptr_fml_Ibuf, FFO_AMOUNT,( char *)&st_output.d_ats_price, 0 );
      i_err[2]  = Fadd32 ( ptr_fml_Ibuf, FFO_MKT_CPTLTN,( char *)&st_output.d_ats_prc_prcnt_chng, 0 );
      i_err[3]  = Fadd32 ( ptr_fml_Ibuf, FFO_CRNT_OI,(char *)&st_output.d_ats_oi_chng, 0 );
      i_err[4]  = Fadd32 ( ptr_fml_Ibuf, FFO_CHNG_OI,(char *)&st_output.d_ats_oi_prcnt_chng, 0 );
      i_err[5]  = Fadd32 ( ptr_fml_Ibuf, FFO_CSHSTTL_FRCTN,(char *)&st_output.d_ats_vol_prcnt_chng, 0 );
      i_err[6]  = Fadd32 ( ptr_fml_Ibuf, FFO_UNDRLYNG,(char *)st_output.c_ats_undrlyng, 0 );
      i_err[7]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXPRY_DT,(char *)st_output.c_ats_actn_dt, 0 );
      i_err[8]  = Fadd32 ( ptr_fml_Ibuf, FFO_MIN_LOT_QTY,(char *)&st_output.l_ats_mkt_lot, 0 );
      i_err[9]  = Fadd32 ( ptr_fml_Ibuf, FFO_OPT_TYP,(char *)&c_opt_typ, 0 );
      i_err[10]  = Fadd32 ( ptr_fml_Ibuf, FFO_STRK_PRC,(char *)&l_strike_prc, 0 );
      i_err[11]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXER_TYP,(char *)&c_exercise_type, 0 );
      i_err[12]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_TYP,(char *)&c_prd_typ, 0 );

      for( i_cnt = 0; i_cnt < 13; i_cnt++ )
      {
        if( i_err[i_cnt] == -1 )
        {
          fn_errlog( c_ServiceName, "S31390",FMLMSG,c_err_msg);
          EXEC SQL CLOSE cur_ats_fs4;
          return -1;
        }
      }

    } /* Loop for Top 10 */

		EXEC SQL CLOSE cur_ats_fs4;

  }/* End of l_indicatore = 4 */

	if( l_indicator == 5 )
  {

    EXEC SQL
         DECLARE cur_ats_fs5 CURSOR FOR
         SELECT  FTQ_UNDRLYNG,
                 CASE WHEN NVL(FTQ_CLS_TRD_QTY,0) = 0 THEN 0 WHEN NVL(FTQ_MIN_LOT_QTY,0) = 0 THEN 0 ELSE (((NVL(FTQ_TOT_QTY_TRDD,0)/FTQ_MIN_LOT_QTY)- (FTQ_CLS_TRD_QTY/FTQ_MIN_LOT_QTY))/(FTQ_CLS_TRD_QTY/FTQ_MIN_LOT_QTY))*100 END,
                 FTQ_QT_TRDNG_FLG         /*** Ver 2.3 ***/
         FROM    FTQ_FO_TRD_QT
				 WHERE   FTQ_XCHNG_CD  = 'NFO'		/**Ver 1.5 **/
         AND 		 FTQ_PRDCT_TYP = :c_prd_typ
         AND     FTQ_EXPRY_DT  = :ptr_st_cntrct_gen_inf->c_expry_dt
				 ORDER BY 2 DESC;

    EXEC SQL
          OPEN cur_ats_fs5;

    for( i_count =0; i_count < 10; i_count++ )
    {
			memset( &st_output,0,sizeof( struct st_ats_output ) );
      strcpy( st_output.c_ats_tablename,"FS" );

      EXEC SQL
           FETCH cur_ats_fs5
           INTO  :ptr_st_cntrct_gen_inf->c_undrlyng,
                 :d_per_chng,
                 :c_qt_flg ;          /*** Ver 2.3 ***/

			if( SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND ) /* 1405 :Null data error , we will proceed */
      {
        fn_errlog(c_ServiceName, "S31395", SQLMSG, c_err_msg);
        EXEC SQL CLOSE cur_ats_fs5;
        return (-1);
      }
      if( SQLCODE == -1405 )
      {
        i_count = i_count - 1;
        continue;
      }
      if( SQLCODE == NO_DATA_FOUND )
      {
        EXEC SQL CLOSE cur_ats_fs5;
        return (0);
      }

      if(DEBUG_MSG_LVL_0)
      {
       fn_userlog( c_ServiceName," FTQ Trading Enable/Disable Flag3 Is :%c:", c_qt_flg); 
      } 

      /*** Commented in Ver 2.3 and below column selected in above select from FTQ ***

      EXEC SQL
           SELECT FCM_QT_TRDNG_FLG
           INTO   :c_qt_flg
           FROM   FCM_FO_CNTRCT_MSTR
           WHERE	FCM_XCHNG_CD 	=	'NFO'			***	Ver	2.0	***
					 AND		FCM_PRDCT_TYP = :c_prd_typ 
           AND    FCM_UNDRLYNG 	= :ptr_st_cntrct_gen_inf->c_undrlyng
           AND    FCM_EXPRY_DT 	= :ptr_st_cntrct_gen_inf->c_expry_dt
           AND    FCM_QT_TRDNG_FLG = :c_qt_trdng_flg;
      ***/

			if( SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND ) /* 1405 :Null data error , we will proceed */
      {
        fn_errlog(c_ServiceName, "S31400", SQLMSG, c_err_msg);
        EXEC SQL CLOSE cur_ats_fs5;
        return (-1);
      }
      if( SQLCODE == -1405 )
      {
        i_count = i_count - 1;
        continue;
      }
      if( SQLCODE == NO_DATA_FOUND )
      {
        i_count = i_count - 1;
        continue;
      }

			EXEC SQL
           SELECT  FTQ_UNDRLYNG,
                   FTQ_MIN_LOT_QTY,
                   FTQ_EXPRY_DT,
                   :c_tablename,
                   CASE WHEN NVL(FTQ_ATS_CLS_PRC,0) = 0 THEN 0 ELSE ((NVL(FTQ_LST_TRD_PRC,0)-FTQ_ATS_CLS_PRC)*100)/FTQ_ATS_CLS_PRC END, /*Ver 1.4 */
                   CASE WHEN NVL(FTQ_CLS_OI,0) = 0 THEN 0 ELSE ((NVL(FTQ_CRNT_OI,0)-FTQ_CLS_OI)*100)/FTQ_CLS_OI END,
                   CASE WHEN NVL(FTQ_MIN_LOT_QTY,0) = 0 THEN 0 WHEN NVL(FTQ_ClS_TRD_QTY,0) = 0 THEN 0 ELSE (((NVL(FTQ_TOT_QTY_TRDD,0)/FTQ_MIN_LOT_QTY)- (FTQ_CLS_TRD_QTY/FTQ_MIN_LOT_QTY))/(FTQ_CLS_TRD_QTY/FTQ_MIN_LOT_QTY))*100 END,
                   NVL(FTQ_RLVR_PER,0),
                   NVL(FTQ_LST_TRD_PRC,0)/100
           INTO    :st_output.c_ats_undrlyng,
                   :st_output.l_ats_mkt_lot,
                   :st_output.c_ats_actn_dt,
                   :st_output.c_ats_tablename,
                   :st_output.d_ats_prc_prcnt_chng,
                   :st_output.d_ats_oi_prcnt_chng,
                   :st_output.d_ats_vol_prcnt_chng,
                   :st_output.d_ats_oi_chng,
                   :st_output.d_ats_price
           FROM    FTQ_FO_TRD_QT
           WHERE   FTQ_XCHNG_CD = 'NFO'		/**Ver 1.5 **/
           AND     FTQ_PRDCT_TYP = :c_prd_typ 
           AND     FTQ_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt
           AND     FTQ_UNDRLYNG = :ptr_st_cntrct_gen_inf->c_undrlyng;

			if( SQLCODE != 0 && SQLCODE != -1405 && SQLCODE != NO_DATA_FOUND ) /* 1405 :Null data error , we will proceed */
      {
        fn_errlog(c_ServiceName, "S31405", SQLMSG, c_err_msg);
        EXEC SQL CLOSE cur_ats_fs5;
        return (-1);
      }
      if( SQLCODE == -1405 )
      {
        i_count = i_count - 1;
        continue;
      }
      if( SQLCODE == NO_DATA_FOUND )
      {
				i_count = i_count - 1;
        continue;
      }
	
			trim( st_output.c_ats_actn_dt );

			if(DEBUG_MSG_LVL_3)
			{
				fn_userlog( c_ServiceName,"Underlying :%d: is :%s:",i_count,st_output.c_ats_undrlyng );
				fn_userlog( c_ServiceName,"Lot size :%d: is :%ld:",i_count,st_output.l_ats_mkt_lot );
				fn_userlog( c_ServiceName,"Expiry date :%d: is :%s:",i_count,st_output.c_ats_actn_dt );
				fn_userlog( c_ServiceName,"Table is :%d: is :%s:",i_count,st_output.c_ats_tablename );
				fn_userlog( c_ServiceName,"Price Percentage :%d: is :%lf:",i_count,st_output.d_ats_prc_prcnt_chng );
				fn_userlog( c_ServiceName,"Rollover % :%d: is :%lf:",i_count,st_output.d_ats_oi_chng );
				fn_userlog( c_ServiceName,"OI Percentage :%d: is :%lf:",i_count,st_output.d_ats_oi_prcnt_chng );
			}

			i_err[0]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_DESC,( char *)st_output.c_ats_tablename, 0 );
      i_err[1]  = Fadd32 ( ptr_fml_Ibuf, FFO_AMOUNT,( char *)&st_output.d_ats_price, 0 );
      i_err[2]  = Fadd32 ( ptr_fml_Ibuf, FFO_MKT_CPTLTN,( char *)&st_output.d_ats_prc_prcnt_chng, 0 );
      i_err[3]  = Fadd32 ( ptr_fml_Ibuf, FFO_CRNT_OI,(char *)&st_output.d_ats_oi_chng, 0 );
      i_err[4]  = Fadd32 ( ptr_fml_Ibuf, FFO_CHNG_OI,(char *)&st_output.d_ats_oi_prcnt_chng, 0 );
      i_err[5]  = Fadd32 ( ptr_fml_Ibuf, FFO_CSHSTTL_FRCTN,(char *)&st_output.d_ats_vol_prcnt_chng, 0 );
      i_err[6]  = Fadd32 ( ptr_fml_Ibuf, FFO_UNDRLYNG,(char *)st_output.c_ats_undrlyng, 0 );
      i_err[7]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXPRY_DT,(char *)st_output.c_ats_actn_dt, 0 );
      i_err[8]  = Fadd32 ( ptr_fml_Ibuf, FFO_MIN_LOT_QTY,(char *)&st_output.l_ats_mkt_lot, 0 );
      i_err[9]  = Fadd32 ( ptr_fml_Ibuf, FFO_OPT_TYP,(char *)&c_opt_typ, 0 );
      i_err[10]  = Fadd32 ( ptr_fml_Ibuf, FFO_STRK_PRC,(char *)&l_strike_prc, 0 );
      i_err[11]  = Fadd32 ( ptr_fml_Ibuf, FFO_EXER_TYP,(char *)&c_exercise_type, 0 );
      i_err[12]  = Fadd32 ( ptr_fml_Ibuf, FFO_PRDCT_TYP,(char *)&c_prd_typ, 0 );

			for( i_cnt = 0; i_cnt < 13; i_cnt++ )
      {
        if( i_err[i_cnt] == -1 )
        {
          fn_errlog( c_ServiceName, "S31410",FMLMSG,c_err_msg);
          EXEC SQL CLOSE cur_ats_fs5;
          return -1;
        }
      }

    } /* Loop for Top 10 */

    EXEC SQL CLOSE cur_ats_fs5;

  }/* End of l_indicatore = 5 */


	fn_userlog( c_ServiceName,"I AM HAPPY" );
	return (0);
} 

int fn_get_ftq_val( char   *c_ServiceName,
                    struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf,
                    struct st_ats_output *ptr_output,
                    char   c_ftq_gt_ls_flg
                  )
{

	char c_err_msg[256];

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName,"Prd Type:%c:",ptr_st_cntrct_gen_inf->c_prd_typ );
		fn_userlog( c_ServiceName,"Underlyng:%s:",ptr_st_cntrct_gen_inf->c_undrlyng );
		fn_userlog( c_ServiceName,"Expiry Date:%s:",ptr_st_cntrct_gen_inf->c_expry_dt );
		fn_userlog( c_ServiceName,"Option Type:%c:",ptr_st_cntrct_gen_inf->c_opt_typ );
		fn_userlog( c_ServiceName,"Strike Price:%ld:",ptr_st_cntrct_gen_inf->l_strike_prc );
		fn_userlog( c_ServiceName,"Get FTQ VAL FLAG:%c:",c_ftq_gt_ls_flg);
		fn_userlog( c_ServiceName,"TABLE NAME:%s:",ptr_output->c_ats_tablename );
	}
		

  if ( c_ftq_gt_ls_flg == 'G' )
	{

		EXEC SQL
			 SELECT FTQ_PRDCT_TYP,
							FTQ_XCHNG_CD,
							FTQ_UNDRLYNG,
							FTQ_MIN_LOT_QTY,
							FTQ_EXPRY_DT,
							FTQ_LST_TRD_PRC,
							PRICE_CHANGE,
							CURRENT_OI,
							OI_CHANGE,
							VOLUME_CHANGE,
							FTQ_EXER_TYP,
							FTQ_OPT_TYP,
							FTQ_STRK_PRC,
							CLOSE_IV
			 INTO   :ptr_st_cntrct_gen_inf->c_prd_typ,
							:ptr_st_cntrct_gen_inf->c_xchng_cd,
							:ptr_output->c_ats_undrlyng,
							:ptr_output->l_ats_mkt_lot,
							:ptr_output->c_ats_actn_dt,
							:ptr_output->d_ats_price,
							:ptr_output->d_ats_prc_prcnt_chng,
							:ptr_output->d_ats_oi_chng,
							:ptr_output->d_ats_oi_prcnt_chng,
							:ptr_output->d_ats_vol_prcnt_chng,
							:ptr_output->c_exrc_typ,
							:ptr_output->c_opt_typ,
							:ptr_output->l_strk_prc,
							:ptr_output->d_ats_imp_vltly
			 FROM   ( 
			 SELECT FTQ_PRDCT_TYP,
							FTQ_XCHNG_CD,
							FTQ_UNDRLYNG,
							FTQ_MIN_LOT_QTy,
							FTQ_EXPRY_DT,
							NVL(FTQ_LST_TRD_PRC,0) FTQ_LST_TRD_PRC,
							CASE WHEN NVL(FTQ_ATS_CLS_PRC,0) = 0 THEN 0 ELSE ROUND(((NVL(FTQ_LST_TRD_PRC,0)-FTQ_ATS_CLS_PRC)*100)/FTQ_ATS_CLS_PRC,2) END PRICE_CHANGE, /*Ver 1.4 */
							NVL(FTQ_CRNT_OI,0) CURRENT_OI,
							CASE WHEN NVL(FTQ_CLS_OI,0) = 0 THEN 0 ELSE ROUND(((NVL(FTQ_CRNT_OI,0)-FTQ_CLS_OI)*100)/FTQ_CLS_OI,2) END OI_CHANGE,
							CASE WHEN NVL(FTQ_CLS_TRD_QTY,0) = 0 THEN 0 ELSE ROUND(((NVL(FTQ_TOT_QTY_TRDD,0)-FTQ_CLS_TRD_QTY)*100)/FTQ_CLS_TRD_QTY,2) END VOLUME_CHANGE,
							FTQ_EXER_TYP,
							FTQ_OPT_TYP,
							FTQ_STRK_PRC,
							NVL(FTQ_CLS_IV,0) CLOSE_IV
			 FROM   FTQ_FO_TRD_QT
			 WHERE  FTQ_XCHNG_CD  = 'NFO'
			 AND    FTQ_PRDCT_TYP = :ptr_st_cntrct_gen_inf->c_prd_typ 
			 AND    FTQ_UNDRLYNG  = :ptr_st_cntrct_gen_inf->c_undrlyng 
			 AND    FTQ_EXPRY_DT  = :ptr_st_cntrct_gen_inf->c_expry_dt
			 AND    FTQ_OPT_TYP   = :ptr_st_cntrct_gen_inf->c_opt_typ
			 AND    FTQ_STRK_PRC  > :ptr_st_cntrct_gen_inf->l_strike_prc ORDER BY ftq_strk_prc )
			 WHERE    ROWNUM = 1;
		if( SQLCODE != 0 )
		{
			fn_errlog( c_ServiceName, "S31415", SQLMSG, c_err_msg  );
			return -1;
		}

	if( strcmp(ptr_output->c_ats_tablename,"TNS") == 0 )
	{
			EXEC SQL
			SELECT 	FTQ_PRDCT_TYP,
							FTQ_XCHNG_CD,
							FTQ_UNDRLYNG,
							FTQ_MIN_LOT_QTY,
							FTQ_EXPRY_DT,
							FTQ_LST_TRD_PRC,
							PRICE_CHANGE,
							CURRENT_OI,
							OI_CHANGE,
							VOLUME_CHANGE,
							FTQ_EXER_TYP,
							FTQ_OPT_TYP,
							FTQ_STRK_PRC,
							CLOSE_IV
			 INTO   :ptr_st_cntrct_gen_inf->c_prd_typ,
							:ptr_st_cntrct_gen_inf->c_xchng_cd,
							:ptr_output->c_ats_undrlyng,
							:ptr_output->l_ats_mkt_lot,
							:ptr_output->c_ats_actn_dt,
							:ptr_output->d_ats_price,
							:ptr_output->d_ats_prc_prcnt_chng,
							:ptr_output->d_ats_oi_chng,
							:ptr_output->d_ats_oi_prcnt_chng,
							:ptr_output->d_ats_vol_prcnt_chng,
							:ptr_output->c_exrc_typ,
							:ptr_output->c_opt_typ,
							:ptr_output->l_strk_prc,
							:ptr_output->d_ats_imp_vltly
			FROM   (
						 SELECT FTQ_PRDCT_TYP,
										FTQ_XCHNG_CD,
										FTQ_UNDRLYNG,
										FTQ_MIN_LOT_QTy,
										FTQ_EXPRY_DT,
										NVL(FTQ_LST_TRD_PRC,0) FTQ_LST_TRD_PRC,
										CASE WHEN NVL(FTQ_ATS_CLS_PRC,0) = 0 THEN 0 ELSE 
													ROUND(((NVL(FTQ_LST_TRD_PRC,0)-FTQ_ATS_CLS_PRC)*100)/FTQ_ATS_CLS_PRC,2) END PRICE_CHANGE, 
									/*Ver 1.4 */
										NVL(FTQ_CRNT_OI,0) CURRENT_OI,
										CASE WHEN NVL(FTQ_CLS_OI,0) = 0 THEN 0 ELSE 
												ROUND(((NVL(FTQ_CRNT_OI,0)-FTQ_CLS_OI)*100)/FTQ_CLS_OI,2) END OI_CHANGE,
										CASE WHEN NVL(FTQ_CLS_TRD_QTY,0) = 0 THEN 0 ELSE 
												ROUND(((NVL(FTQ_TOT_QTY_TRDD,0)-FTQ_CLS_TRD_QTY)*100)/ FTQ_CLS_TRD_QTY,2) END VOLUME_CHANGE,
										FTQ_EXER_TYP,
										FTQ_OPT_TYP,
										FTQ_STRK_PRC,
										NVL(FTQ_CLS_IV,0) CLOSE_IV
						 FROM   FTQ_FO_TRD_QT
						 WHERE  FTQ_XCHNG_CD  = 'NFO'
						 AND    FTQ_PRDCT_TYP = :ptr_st_cntrct_gen_inf->c_prd_typ
						 AND    FTQ_UNDRLYNG  = :ptr_st_cntrct_gen_inf->c_undrlyng
						 AND    FTQ_OPT_TYP   = :ptr_st_cntrct_gen_inf->c_opt_typ
						 AND    FTQ_STRK_PRC  = :ptr_output->l_strk_prc
						 AND    FTQ_EXPRY_DT  = ( SELECT MIN(FTQ_EXPRY_DT) from FTQ_FO_TRD_QT
																				 WHERE  FTQ_XCHNG_CD     = 'NFO'
																				 AND    FTQ_PRDCT_TYP    = :ptr_st_cntrct_gen_inf->c_prd_typ
																				 AND    FTQ_UNDRLYNG     = :ptr_st_cntrct_gen_inf->c_undrlyng
																				 AND    FTQ_OPT_TYP   	 = :ptr_st_cntrct_gen_inf->c_opt_typ
																				 AND    FTQ_STRK_PRC   	 = :ptr_output->l_strk_prc
																				 AND    FTQ_TOT_QTY_TRDD = ( SELECT MAX(FTQ_TOT_QTY_TRDD)
																																		 FROM FTQ_FO_TRD_QT
																																		 WHERE FTQ_XCHNG_CD  = 'NFO'
																																		 AND  FTQ_PRDCT_TYP = :ptr_st_cntrct_gen_inf->c_prd_typ
																																		 AND  FTQ_UNDRLYNG  = :ptr_st_cntrct_gen_inf->c_undrlyng
																																		 AND  FTQ_OPT_TYP   = :ptr_st_cntrct_gen_inf->c_opt_typ
																																		 AND  FTQ_STRK_PRC  = :ptr_output->l_strk_prc)));
					if(SQLCODE != 0 )
					{
						fn_errlog( c_ServiceName, "S31420", SQLMSG, c_err_msg  );
						return -1;
					}

				 MEMSET(l_lvn_high_strk);
			/**In every call of TNS-G the strikes will be copied in this array, 
				but since we require 5 strikes which are greater than highest Top Nifty Strike, hence the array is applied MEMSET**/

				 EXEC SQL
						 SELECT FTQ_STRK_PRC
						 INTO   :l_lvn_high_strk
						 FROM   (
						 SELECT FTQ_STRK_PRC
						 FROM   FTQ_FO_TRD_QT
						 WHERE  FTQ_XCHNG_CD  = 'NFO'
						 AND    FTQ_PRDCT_TYP = :ptr_st_cntrct_gen_inf->c_prd_typ
						 AND    FTQ_UNDRLYNG  = :ptr_st_cntrct_gen_inf->c_undrlyng
						 AND    FTQ_EXPRY_DT  = :ptr_st_cntrct_gen_inf->c_expry_dt
						 AND    FTQ_OPT_TYP   = :ptr_st_cntrct_gen_inf->c_opt_typ
						 AND    FTQ_STRK_PRC  > :ptr_output->l_strk_prc ORDER BY ftq_strk_prc )
						 WHERE    ROWNUM < 6;

					if( SQLCODE != 0 )
					{
						if( SQLCODE == NO_DATA_FOUND && sqlca.sqlerrd[2]!= 0 )    /* always gives NDF even some rows selected into struct */
						{
							;
						}	
						else
						{
							fn_errlog( c_ServiceName, "S31425", SQLMSG, c_err_msg  );
							return -1;
						}
					} 
	}
	
}
else if( c_ftq_gt_ls_flg == 'L' )
{
	EXEC SQL
			 SELECT FTQ_PRDCT_TYP,
							FTQ_XCHNG_CD,
							FTQ_UNDRLYNG,
							FTQ_MIN_LOT_QTY,
							FTQ_EXPRY_DT,
							FTQ_LST_TRD_PRC,
							PRICE_CHANGE,
							CURRENT_OI,
							OI_CHANGE,
							VOLUME_CHANGE,
							FTQ_EXER_TYP,
							FTQ_OPT_TYP,
							FTQ_STRK_PRC,
							CLOSE_IV
         INTO   :ptr_st_cntrct_gen_inf->c_prd_typ,
                :ptr_st_cntrct_gen_inf->c_xchng_cd,
                :ptr_output->c_ats_undrlyng,
                :ptr_output->l_ats_mkt_lot,
                :ptr_output->c_ats_actn_dt,
                :ptr_output->d_ats_price,
                :ptr_output->d_ats_prc_prcnt_chng,
                :ptr_output->d_ats_oi_chng,
                :ptr_output->d_ats_oi_prcnt_chng,
                :ptr_output->d_ats_vol_prcnt_chng,
                :ptr_output->c_exrc_typ,
                :ptr_output->c_opt_typ,
                :ptr_output->l_strk_prc,
                :ptr_output->d_ats_imp_vltly
         FROM   (
         SELECT FTQ_PRDCT_TYP,
                FTQ_XCHNG_CD,
                FTQ_UNDRLYNG,
                FTQ_MIN_LOT_QTY,
                FTQ_EXPRY_DT,
                NVL(FTQ_LST_TRD_PRC,0) FTQ_LST_TRD_PRC,
                CASE WHEN NVL(FTQ_ATS_CLS_PRC,0) = 0 THEN 0 ELSE ROUND(((NVL(FTQ_LST_TRD_PRC,0)-FTQ_ATS_CLS_PRC)*100)/FTQ_ATS_CLS_PRC,2) END PRICE_CHANGE, /*Ver 1.4 */
                NVL(FTQ_CRNT_OI,0) CURRENT_OI,
                CASE WHEN NVL(FTQ_CLS_OI,0) = 0 THEN 0 ELSE ROUND(((NVL(FTQ_CRNT_OI,0)-FTQ_CLS_OI)*100)/FTQ_CLS_OI,2) END OI_CHANGE,
                CASE WHEN NVL(FTQ_CLS_TRD_QTY,0) = 0 THEN 0 ELSE ROUND(((NVL(FTQ_TOT_QTY_TRDD,0)-FTQ_CLS_TRD_QTY)*100)/FTQ_CLS_TRD_QTY,2) END  VOLUME_CHANGE,
                FTQ_EXER_TYP,
                FTQ_OPT_TYP,
                FTQ_STRK_PRC,
                NVL(FTQ_CLS_IV,0) CLOSE_IV
         FROM   FTQ_FO_TRD_QT
         WHERE  FTQ_XCHNG_CD  = 'NFO'
         AND    FTQ_PRDCT_TYP = :ptr_st_cntrct_gen_inf->c_prd_typ
         AND    FTQ_UNDRLYNG  = :ptr_st_cntrct_gen_inf->c_undrlyng
         AND    FTQ_EXPRY_DT  = :ptr_st_cntrct_gen_inf->c_expry_dt
         AND    FTQ_OPT_TYP   = :ptr_st_cntrct_gen_inf->c_opt_typ
         AND    FTQ_STRK_PRC  < :ptr_st_cntrct_gen_inf->l_strike_prc ORDER BY ftq_strk_prc DESC)
         WHERE    ROWNUM = 1;

		if( SQLCODE != 0 )
		{
			fn_errlog( c_ServiceName, "S31430", SQLMSG, c_err_msg  );
			return -1;	
		}

		if( strcmp(ptr_output->c_ats_tablename,"TNS") == 0 )
		{
			EXEC SQL
			SELECT 	FTQ_PRDCT_TYP,
							FTQ_XCHNG_CD,
							FTQ_UNDRLYNG,
							FTQ_MIN_LOT_QTY,
							FTQ_EXPRY_DT,
							FTQ_LST_TRD_PRC,
							PRICE_CHANGE,
							CURRENT_OI,
							OI_CHANGE,
							VOLUME_CHANGE,
							FTQ_EXER_TYP,
							FTQ_OPT_TYP,
							FTQ_STRK_PRC,
							CLOSE_IV
			 INTO   :ptr_st_cntrct_gen_inf->c_prd_typ,
							:ptr_st_cntrct_gen_inf->c_xchng_cd,
							:ptr_output->c_ats_undrlyng,
							:ptr_output->l_ats_mkt_lot,
							:ptr_output->c_ats_actn_dt,
							:ptr_output->d_ats_price,
							:ptr_output->d_ats_prc_prcnt_chng,
							:ptr_output->d_ats_oi_chng,
							:ptr_output->d_ats_oi_prcnt_chng,
							:ptr_output->d_ats_vol_prcnt_chng,
							:ptr_output->c_exrc_typ,
							:ptr_output->c_opt_typ,
							:ptr_output->l_strk_prc,
							:ptr_output->d_ats_imp_vltly
			FROM   (
						 SELECT FTQ_PRDCT_TYP,
										FTQ_XCHNG_CD,
										FTQ_UNDRLYNG,
										FTQ_MIN_LOT_QTy,
										FTQ_EXPRY_DT,
										NVL(FTQ_LST_TRD_PRC,0) FTQ_LST_TRD_PRC,
										CASE WHEN NVL(FTQ_ATS_CLS_PRC,0) = 0 THEN 0 ELSE 
													ROUND(((NVL(FTQ_LST_TRD_PRC,0)-FTQ_ATS_CLS_PRC)*100)/FTQ_ATS_CLS_PRC,2) END PRICE_CHANGE, /*Ver 1.4 */
										NVL(FTQ_CRNT_OI,0) CURRENT_OI,
										CASE WHEN NVL(FTQ_CLS_OI,0) = 0 THEN 0 ELSE 
												ROUND(((NVL(FTQ_CRNT_OI,0)-FTQ_CLS_OI)*100)/FTQ_CLS_OI,2) END OI_CHANGE,
										CASE WHEN NVL(FTQ_CLS_TRD_QTY,0) = 0 THEN 0 ELSE 
												ROUND(((NVL(FTQ_TOT_QTY_TRDD,0)-FTQ_CLS_TRD_QTY)*100)/ FTQ_CLS_TRD_QTY,2) END VOLUME_CHANGE,
										FTQ_EXER_TYP,
										FTQ_OPT_TYP,
										FTQ_STRK_PRC,
										NVL(FTQ_CLS_IV,0) CLOSE_IV
						 FROM   FTQ_FO_TRD_QT
						 WHERE  FTQ_XCHNG_CD  = 'NFO'
						 AND    FTQ_PRDCT_TYP = :ptr_st_cntrct_gen_inf->c_prd_typ
						 AND    FTQ_UNDRLYNG  = :ptr_st_cntrct_gen_inf->c_undrlyng
						 AND    FTQ_OPT_TYP   = :ptr_st_cntrct_gen_inf->c_opt_typ
						 AND    FTQ_STRK_PRC  = :ptr_output->l_strk_prc
						 AND    FTQ_EXPRY_DT  = ( SELECT MIN(FTQ_EXPRY_DT) from FTQ_FO_TRD_QT
																				 WHERE  FTQ_XCHNG_CD     = 'NFO'
																				 AND    FTQ_PRDCT_TYP    = :ptr_st_cntrct_gen_inf->c_prd_typ
																				 AND    FTQ_UNDRLYNG     = :ptr_st_cntrct_gen_inf->c_undrlyng
																				 AND    FTQ_OPT_TYP   	 = :ptr_st_cntrct_gen_inf->c_opt_typ
																				 AND    FTQ_STRK_PRC   	 = :ptr_output->l_strk_prc
																				 AND    FTQ_TOT_QTY_TRDD = ( SELECT MAX(FTQ_TOT_QTY_TRDD)
																																		 FROM FTQ_FO_TRD_QT
																																		 WHERE FTQ_XCHNG_CD  = 'NFO'
																																		 AND  FTQ_PRDCT_TYP = :ptr_st_cntrct_gen_inf->c_prd_typ
																																		 AND  FTQ_UNDRLYNG  = :ptr_st_cntrct_gen_inf->c_undrlyng
																																		 AND  FTQ_OPT_TYP   = :ptr_st_cntrct_gen_inf->c_opt_typ
																																		 AND  FTQ_STRK_PRC  = :ptr_output->l_strk_prc)));
					if(SQLCODE != 0 )
					{
						fn_errlog( c_ServiceName, "S31435", SQLMSG, c_err_msg  );
						return -1;
					}


		  MEMSET(l_lvn_low_strk);
			/**In every call of TNS-L the strikes will be copied in this array, 
				but since we require 5 strikes which are lower than Lowest Top Nifty Strike, hence the array is applied MEMSET **/

			EXEC SQL
					 SELECT FTQ_STRK_PRC
					 INTO   :l_lvn_low_strk
					 FROM   (
					 SELECT FTQ_STRK_PRC
					 FROM   FTQ_FO_TRD_QT
					 WHERE  FTQ_XCHNG_CD  = 'NFO'
					 AND    FTQ_PRDCT_TYP = :ptr_st_cntrct_gen_inf->c_prd_typ
					 AND    FTQ_UNDRLYNG  = :ptr_st_cntrct_gen_inf->c_undrlyng
					 AND    FTQ_EXPRY_DT  = :ptr_st_cntrct_gen_inf->c_expry_dt
					 AND    FTQ_OPT_TYP   = :ptr_st_cntrct_gen_inf->c_opt_typ
					 AND    FTQ_STRK_PRC  < :ptr_output->l_strk_prc ORDER BY ftq_strk_prc DESC )
					 WHERE    ROWNUM < 6;

			if( SQLCODE != 0 )
			{
				fn_errlog( c_ServiceName, "S31440", SQLMSG, c_err_msg  );
				return -1;
			}
		}

	}
	else if ( c_ftq_gt_ls_flg == 'N' )
	{
		EXEC SQL
         SELECT FTQ_PRDCT_TYP,
                FTQ_XCHNG_CD,
                FTQ_UNDRLYNG,
                FTQ_MIN_LOT_QTY,
                FTQ_EXPRY_DT,
                NVL(FTQ_LST_TRD_PRC,0),
                CASE WHEN NVL(FTQ_ATS_CLS_PRC,0) = 0 THEN 0 ELSE ROUND(((NVL(FTQ_LST_TRD_PRC,0)-FTQ_ATS_CLS_PRC)*100)/FTQ_ATS_CLS_PRC,2) END , /*Ver 1.4 */
                NVL(FTQ_CRNT_OI,0),
                CASE WHEN NVL(FTQ_CLS_OI,0) = 0 THEN 0 ELSE ROUND(((NVL(FTQ_CRNT_OI,0)-FTQ_CLS_OI)*100)/FTQ_CLS_OI,2) END ,
                CASE WHEN NVL(FTQ_CLS_TRD_QTY,0) = 0 THEN 0 ELSE ROUND(((NVL(FTQ_TOT_QTY_TRDD,0)-FTQ_CLS_TRD_QTY)*100)/FTQ_CLS_TRD_QTY,2) END,
                FTQ_EXER_TYP,
                FTQ_OPT_TYP,
                FTQ_STRK_PRC,
                NVL(FTQ_CLS_IV,0)
         INTO   :ptr_st_cntrct_gen_inf->c_prd_typ,
                :ptr_st_cntrct_gen_inf->c_xchng_cd,
                :ptr_output->c_ats_undrlyng,
                :ptr_output->l_ats_mkt_lot,
                :ptr_output->c_ats_actn_dt,
                :ptr_output->d_ats_price,
                :ptr_output->d_ats_prc_prcnt_chng,
                :ptr_output->d_ats_oi_chng,
                :ptr_output->d_ats_oi_prcnt_chng,
                :ptr_output->d_ats_vol_prcnt_chng,
                :ptr_output->c_exrc_typ,
                :ptr_output->c_opt_typ,
                :ptr_output->l_strk_prc,
								:ptr_output->d_ats_imp_vltly
         FROM   FTQ_FO_TRD_QT
         WHERE  FTQ_XCHNG_CD  = 'NFO'
         AND    FTQ_PRDCT_TYP = :ptr_st_cntrct_gen_inf->c_prd_typ
         AND    FTQ_UNDRLYNG  = :ptr_st_cntrct_gen_inf->c_undrlyng
         AND    FTQ_EXPRY_DT  = :ptr_st_cntrct_gen_inf->c_expry_dt
         AND    FTQ_OPT_TYP   = :ptr_st_cntrct_gen_inf->c_opt_typ
         AND    FTQ_STRK_PRC  = :ptr_st_cntrct_gen_inf->l_strike_prc;

		if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
		{
			fn_errlog( c_ServiceName, "S31445", SQLMSG, c_err_msg  );
			return -1;
		}
		
 		if( strcmp(ptr_output->c_ats_tablename,"TNS") == 0 )
		{
			EXEC SQL
			SELECT 	FTQ_PRDCT_TYP,
							FTQ_XCHNG_CD,
							FTQ_UNDRLYNG,
							FTQ_MIN_LOT_QTY,
							FTQ_EXPRY_DT,
							FTQ_LST_TRD_PRC,
							PRICE_CHANGE,
							CURRENT_OI,
							OI_CHANGE,
							VOLUME_CHANGE,
							FTQ_EXER_TYP,
							FTQ_OPT_TYP,
							FTQ_STRK_PRC,
							CLOSE_IV
			 INTO   :ptr_st_cntrct_gen_inf->c_prd_typ,
							:ptr_st_cntrct_gen_inf->c_xchng_cd,
							:ptr_output->c_ats_undrlyng,
							:ptr_output->l_ats_mkt_lot,
							:ptr_output->c_ats_actn_dt,
							:ptr_output->d_ats_price,
							:ptr_output->d_ats_prc_prcnt_chng,
							:ptr_output->d_ats_oi_chng,
							:ptr_output->d_ats_oi_prcnt_chng,
							:ptr_output->d_ats_vol_prcnt_chng,
							:ptr_output->c_exrc_typ,
							:ptr_output->c_opt_typ,
							:ptr_output->l_strk_prc,
							:ptr_output->d_ats_imp_vltly
			FROM   (
						 SELECT FTQ_PRDCT_TYP,
										FTQ_XCHNG_CD,
										FTQ_UNDRLYNG,
										FTQ_MIN_LOT_QTy,
										FTQ_EXPRY_DT,
										NVL(FTQ_LST_TRD_PRC,0) FTQ_LST_TRD_PRC,
										CASE WHEN NVL(FTQ_ATS_CLS_PRC,0) = 0 THEN 0 ELSE 
													ROUND(((NVL(FTQ_LST_TRD_PRC,0)-FTQ_ATS_CLS_PRC)*100)/FTQ_ATS_CLS_PRC,2) END PRICE_CHANGE, /*Ver 1.4 */
										NVL(FTQ_CRNT_OI,0) CURRENT_OI,
										CASE WHEN NVL(FTQ_CLS_OI,0) = 0 THEN 0 ELSE 
												ROUND(((NVL(FTQ_CRNT_OI,0)-FTQ_CLS_OI)*100)/FTQ_CLS_OI,2) END OI_CHANGE,
										CASE WHEN NVL(FTQ_CLS_TRD_QTY,0) = 0 THEN 0 ELSE 
												ROUND(((NVL(FTQ_TOT_QTY_TRDD,0)-FTQ_CLS_TRD_QTY)*100)/ FTQ_CLS_TRD_QTY,2) END VOLUME_CHANGE,
										FTQ_EXER_TYP,
										FTQ_OPT_TYP,
										FTQ_STRK_PRC,
										NVL(FTQ_CLS_IV,0) CLOSE_IV
						 FROM   FTQ_FO_TRD_QT
						 WHERE  FTQ_XCHNG_CD  = 'NFO'
						 AND    FTQ_PRDCT_TYP = :ptr_st_cntrct_gen_inf->c_prd_typ
						 AND    FTQ_UNDRLYNG  = :ptr_st_cntrct_gen_inf->c_undrlyng
						 AND    FTQ_OPT_TYP   = :ptr_st_cntrct_gen_inf->c_opt_typ
						 AND    FTQ_STRK_PRC  = :ptr_st_cntrct_gen_inf->l_strike_prc
						 AND    FTQ_EXPRY_DT  = ( SELECT MIN(FTQ_EXPRY_DT) from FTQ_FO_TRD_QT
																				 WHERE  FTQ_XCHNG_CD     = 'NFO'
																				 AND    FTQ_PRDCT_TYP    = :ptr_st_cntrct_gen_inf->c_prd_typ
																				 AND    FTQ_UNDRLYNG     = :ptr_st_cntrct_gen_inf->c_undrlyng
																				 AND    FTQ_OPT_TYP   	 = :ptr_st_cntrct_gen_inf->c_opt_typ
																				 AND    FTQ_STRK_PRC   	 = :ptr_st_cntrct_gen_inf->l_strike_prc
																				 AND    FTQ_TOT_QTY_TRDD = ( SELECT MAX(FTQ_TOT_QTY_TRDD)
																																		 FROM FTQ_FO_TRD_QT
																																		 WHERE FTQ_XCHNG_CD  = 'NFO'
																																		 AND  FTQ_PRDCT_TYP = :ptr_st_cntrct_gen_inf->c_prd_typ
																																		 AND  FTQ_UNDRLYNG  = :ptr_st_cntrct_gen_inf->c_undrlyng
																																		 AND  FTQ_OPT_TYP   = :ptr_st_cntrct_gen_inf->c_opt_typ
																																		 AND  FTQ_STRK_PRC  = :ptr_st_cntrct_gen_inf->l_strike_prc)));
					if(SQLCODE != 0 )
					{
						fn_errlog( c_ServiceName, "S31450", SQLMSG, c_err_msg  );
						return -1;
					}
	 }
	}
	else
	{
		fn_userlog( c_ServiceName,"Invalid greater / lesser flag " );
    return -1;
	}

	fn_userlog(c_ServiceName,"Shailesh:Tbl name:%s:new exp date:%s:strke prc:%ld:Opt typ:%c:",ptr_output->c_ats_tablename,ptr_output->c_ats_actn_dt,ptr_output->l_strk_prc,ptr_output->c_opt_typ);
	
	return 0;
}

int fn_calc_implied_volatility ( char   *c_ServiceName,
                    						 struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf,
                    						 struct st_ats_output *ptr_output
                    					 )
{
	int i = 0;
  int i_err[TOTAL_FML];
  int i_ferr[TOTAL_FML];
  int i_count = 0;
  int i_cnt = 0;
	int i_ret_val = 0;
	int i_date_diff = 0;		/**Ver 1.3 **/

  long l_bufferlength = 0;
	long l_risk_free_interest = 0;
	long l_dividend = 1;
	long l_user_index = 0;
	long l_spot_level = 10;
	long l_interval = 100;

	double d_ltq_stck = 0.0;
  double d_ltq_nifty = 0.0;
  double d_ltp_prc = 0.0;
  double d_days_to_exp = 0.0;
  double d_days_to_exp_temp = 0.0;		/**Ver 1.3 **/
  double d_strk_price = 0.0;
	double d_beta = 1.0;

  char c_err_msg[256];
  char c_tablename[4];
	char c_system_user_flg = 'S';  
  char c_ltq_xchng_cd [4]; 
  char c_temp_exgcd [4]; /** Ver 1.1 ***/


  struct st_ats_output st_output;

	FBFR32 *ptr_Ibuf;
	FBFR32 *ptr_Obuf;

  /* Initializing input buffer */

  ptr_Ibuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*10 );

  if ( ptr_Ibuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31455", TPMSG, c_err_msg  );
		return -1;
  }

	/* Initializing output buffer */

  ptr_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*10 );

  if ( ptr_Obuf == NULL )
  {
    fn_errlog( c_ServiceName, "S31460", TPMSG, c_err_msg  );
		return -1;
  }	

	
	memset(c_temp_exgcd,0,sizeof(c_temp_exgcd)); /** Ver 1.1 ***/
	strcpy(c_ltq_xchng_cd,"NSE");

	EXEC SQL
			 SELECT NVL(LTQ_RT,0)
			 INTO   :d_ltq_stck
			 FROM   LTQ_TRD_QT
			 WHERE  LTQ_XCHNG_CD = :c_ltq_xchng_cd 
			 AND    LTQ_STCK_CD = :ptr_st_cntrct_gen_inf->c_undrlyng;  

	if( SQLCODE != 0 )
	{
		fn_errlog( c_ServiceName, "S31465", SQLMSG, c_err_msg  ); 
		return -1;
	}

/** Ver 1.3 New logic of Calculation of Days to expiry given by Strategy Team **/	
	EXEC SQL
			 SELECT (to_date(:ptr_st_cntrct_gen_inf->c_expry_dt,'dd-Mon-YYYY') - to_date(sysdate,'dd-Mon-YYYY') + 1 )/365,
			 				(to_date(:ptr_st_cntrct_gen_inf->c_expry_dt,'dd-Mon-YYYY') - to_date(sysdate,'dd-Mon-YYYY') )/365,
							to_date(:ptr_st_cntrct_gen_inf->c_expry_dt,'dd-Mon-YYYY') - to_date(sysdate,'dd-Mon-YYYY')
			 INTO   :d_days_to_exp ,
			 				:d_days_to_exp_temp ,
							:i_date_diff
			 FROM   DUAL; 

	if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31470", SQLMSG, c_err_msg  );
    return -1;
  }

	fn_userlog(c_ServiceName,"SHAILESH:date_diff:%d:",i_date_diff);
	if(i_date_diff != 0 )
	{
		d_days_to_exp = d_days_to_exp_temp;
	}

/**Ver 1.3 ends **/

	/*commented in Ver 1.3
		EXEC SQL
			 SELECT NVL(LTQ_RT,0)
			 INTO   :d_ltq_nifty
			 FROM   LTQ_TRD_QT
       WHERE  LTQ_XCHNG_CD = :c_ltq_xchng_cd 
       AND    LTQ_STCK_CD = 'NIFTY';

	if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31475", SQLMSG, c_err_msg  );
    return -1;
  }*/

	EXEC SQL
		 SELECT NVL(FTQ_LST_TRD_PRC/100,0)
		 INTO   :d_ltq_nifty
		 FROM   FTQ_FO_TRD_QT
		 WHERE	FTQ_XCHNG_CD = 'NFO' 
		 AND    FTQ_PRDCT_TYP= 'F'
		 AND    FTQ_UNDRLYNG = 'NIFTY'
		 AND    FTQ_EXPRY_DT = :ptr_st_cntrct_gen_inf->c_expry_dt;

	if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31480", SQLMSG, c_err_msg  );
    return -1;
  }

	/*** Ver 1.1 starts ***/
	if(strcmp(c_ltq_xchng_cd,"NSE")== 0)
	{
		strcpy(c_temp_exgcd,"NFO");
	}

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName,"c_ltq_xchng_cd :%s:", c_ltq_xchng_cd );
		fn_userlog( c_ServiceName,"c_temp_exgcd :%s:", c_temp_exgcd );
		fn_userlog( c_ServiceName,"c_prd_typ :%c:", ptr_st_cntrct_gen_inf->c_prd_typ );
		fn_userlog( c_ServiceName,"c_undrlyng :%s:", ptr_st_cntrct_gen_inf->c_undrlyng );
	}


/******
	EXEC SQL
		SELECT FUM_BETA
		INTO :d_beta
		FROM FUM_FO_UNDRLYNG_MSTR
		WHERE FUM_XCHNG_CD =:c_temp_exgcd
		AND FUM_PRDCT_TYP = :ptr_st_cntrct_gen_inf->c_prd_typ
		AND FUM_UNDRLYNG = :ptr_st_cntrct_gen_inf->c_undrlyng;

	if( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31485", SQLMSG, c_err_msg  );
    return -1;
  }***/

	
	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName,"Beta value from FUM is :%lf:", d_beta );
	}
	
	/**** Ver 1.1 ends ***/
	
	ptr_st_cntrct_gen_inf->c_prd_typ = 'O';
  d_strk_price = ptr_output->l_strk_prc/100;
	d_ltp_prc = ptr_output->d_ats_price/100;
	ptr_output->d_ats_price = ptr_output->d_ats_price/100;

	if(DEBUG_MSG_LVL_3)
	{
		fn_userlog( c_ServiceName,"Days to expiry is :%lf:", d_days_to_exp );
		fn_userlog( c_ServiceName,"Product type :%c:", ptr_st_cntrct_gen_inf->c_prd_typ );
		fn_userlog( c_ServiceName,"Option type :%c:", ptr_st_cntrct_gen_inf->c_opt_typ );
		fn_userlog( c_ServiceName,"Strike Price :%ld:", ptr_st_cntrct_gen_inf->l_strike_prc );
		fn_userlog( c_ServiceName,"NIFTY LTQ Price :%lf:", d_ltq_nifty ); 
		fn_userlog( c_ServiceName," ATS Price :%lf:", ptr_output->d_ats_price );
		fn_userlog( c_ServiceName," Beta :%lf:", d_beta );
		fn_userlog( c_ServiceName," Risk free interest :%ld:", l_risk_free_interest );
		fn_userlog( c_ServiceName," Dividend :%ld:", l_dividend );
		fn_userlog( c_ServiceName," Days to expiry :%lf:", d_days_to_exp );
		fn_userlog( c_ServiceName," System/user :%c:", c_system_user_flg );
		fn_userlog( c_ServiceName," ATS Price :%lf:", ptr_output->d_ats_price );
		fn_userlog( c_ServiceName," User Index :%ld:", l_user_index );
		fn_userlog( c_ServiceName," Interval :%ld:", l_interval );
		fn_userlog( c_ServiceName," Spot level :%ld:", l_spot_level );
		fn_userlog( c_ServiceName," Open Position qty :%ld:", ptr_st_cntrct_gen_inf->l_board_lot_qty );
		fn_userlog( c_ServiceName," Open Position flow :%c:", ptr_st_cntrct_gen_inf->c_rqst_typ );
		fn_userlog( c_ServiceName," Implied volatility input :%lf:", ptr_output->d_ats_imp_vltly );
		fn_userlog( c_ServiceName," Category Index/Stock :%c:", ptr_st_cntrct_gen_inf->c_ctgry_indstk );
		fn_userlog( c_ServiceName," LTQ Spot price :%lf:", d_ltq_stck );
  	fn_userlog( c_ServiceName," Profit/Loss :%lf:", d_ltp_prc ); 	
	}

	/* Adding Values to FMLs to call service for calculating Implied Volatility */

	/* Product type */
	i_err[0]  = Fadd32 ( ptr_Ibuf, FFO_PRDCT_TYP,( char *)&ptr_st_cntrct_gen_inf->c_prd_typ, 0 );

	/* Option type */
  i_err[1]  = Fadd32 ( ptr_Ibuf, FFO_OPT_TYP,( char *)&ptr_st_cntrct_gen_inf->c_opt_typ, 0 );

	/* Strike price */
  i_err[2]  = Fadd32 ( ptr_Ibuf, FFO_STRIKE_PRC,( char *)&d_strk_price, 0 );

	/* Spot price of NIFTY */
  i_err[3]  = Fadd32 ( ptr_Ibuf, FFO_INDEX,(char *)&d_ltq_nifty, 0 ); 

	/* Base price i.e ftq_lst_trd_prc */
  i_err[4]  = Fadd32 ( ptr_Ibuf, FFO_BASE_ORD_VAL,(char *)&ptr_output->d_ats_price, 0 );

	/* Beta as 1 */
  i_err[5]  = Fadd32 ( ptr_Ibuf, FFO_AVM_PRCNT,(char *)&d_beta, 0 ); 

	/* Risk free interest. Hardcoded as 0 */
  i_err[6]  = Fadd32 ( ptr_Ibuf, FFO_INTRST_RT,(char *)&l_risk_free_interest, 0 ); 

	/* Dividend. Hardcoded as 1 */
  i_err[7]  = Fadd32 ( ptr_Ibuf, FFO_PLG_RT,(char *)&l_dividend, 0 ); 

	/* Time to expiry */
  i_err[8]  = Fadd32 ( ptr_Ibuf, FFO_DAY_TO_EXP,(char *)&d_days_to_exp, 0 );  

	/* S - system */
  i_err[9]  = Fadd32 ( ptr_Ibuf, FFO_RQST_TYP,(char *)&c_system_user_flg, 0 );  

	/* Last traded price i.e ftq_lst_trd_prc */ 
  i_err[10]  = Fadd32 ( ptr_Ibuf, FFO_EFF_LTP,(char *)&ptr_output->d_ats_price, 0 ); 

	/* Not required .Hardcoded but called service looks for it */
  i_err[11]  = Fadd32 ( ptr_Ibuf, FFO_USER_INDEX,(char *)&l_user_index, 0 ); 

	/* Interval between 2 spots of NIFTY. Hardcoded as 100 */ 
  i_err[12]  = Fadd32 ( ptr_Ibuf, FFO_INTERVAL,(char *)&l_interval, 0 );

	/* Not required. No of spot levels to calculate P&L. Hardcoded to 10 */
  i_err[13]  = Fadd32 ( ptr_Ibuf, FFO_COUNT,(char *)&l_spot_level, 0 );

	/* Not required. Open position qty */
  i_err[14]  = Fadd32 ( ptr_Ibuf, FFO_OPNPSTN_QTY,(char *)&ptr_st_cntrct_gen_inf->l_board_lot_qty, 0 );

	/* Not required. Open position flow */
  i_err[15]  = Fadd32 ( ptr_Ibuf, FFO_OPNPSTN_FLW,(char *)&ptr_st_cntrct_gen_inf->c_rqst_typ, 0 );

	/* Result obtained in this is Implied volatility */
  i_err[16]  = Fadd32 ( ptr_Ibuf, FFO_EFF_LMT_RT,(char *)&ptr_output->d_ats_imp_vltly, 0 ); 

	/* Category Index/Stock */
  i_err[17]  = Fadd32 ( ptr_Ibuf, FFO_CTGRY_INDSTK,(char *)&ptr_st_cntrct_gen_inf->c_ctgry_indstk, 0 ); 

	/* Stock spot price in LTQ 
  i_err[18]  = Fadd32 ( ptr_Ibuf, FFO_STCK_PRICE,(char *)&ptr_st_cntrct_gen_inf->l_ca_lvl, 0 );  */

	/* Stock spot price in LTQ */
  i_err[18]  = Fadd32 ( ptr_Ibuf, FFO_STCK_PRICE,(char *)&d_ltq_stck, 0 );

  /* Profit / Loss Not required for this batch */
  i_err[19]  = Fadd32 ( ptr_Ibuf, FFO_OPT_PREMIUM,(char *)&d_ltp_prc, 0 );

  for( i_cnt = 0; i_cnt < 20; i_cnt++ )
  {
    if( i_err[i_cnt] == -1 )
    {
      fn_errlog( c_ServiceName, "S31490",FMLMSG,c_err_msg);
      return -1;
    }
  }

	l_bufferlength  = Fneeded32(1, sizeof(struct vw_cntrt_gen_inf)*2);

	i_ret_val = tpcall("SFO_CALC_RSK",(char*)ptr_Ibuf,0,(char **)&ptr_Obuf,&l_bufferlength,0);

	if( i_ret_val == -1 )
	{
		fn_userlog( c_ServiceName," Call to service for fetching implied volatility failed " );
		return -1;
	}
	
	i_err  [0] = Fget32( ptr_Obuf,FFO_FUT_PRC,0,(char *)&ptr_output->d_ats_imp_vltly, 0 );  /***  Run Time Volatility ***/
  i_ferr [0] = Ferror32;
	if( i_ferr[0] == -1 )
	{
		fn_userlog( c_ServiceName,"Cannot get Implied volatility values " );
		return -1;
	}

	ptr_output->d_ats_imp_vltly = ptr_output->d_ats_imp_vltly * 100;

	if(DEBUG_MSG_LVL_0)
	{
		fn_userlog( c_ServiceName,"Implied volatility in function is :%lf:", ptr_output->d_ats_imp_vltly );
	}

	tpfree((char *)ptr_Ibuf);
	tpfree((char *)ptr_Obuf);

	return 0;
}

void trim(char *str)
{
  int i=0;
  char *ptr;
  ptr = str;
  while ( *str != '\0' )
  {
    if (*str != ' ' && *str != '\t')
    {
      i=i+1;
      *ptr++=*str;
    }
    str++;
  }
  *ptr='\0';
  while( i != 0 )
  {
    ptr--;
    i=i-1;
  }
  str = ptr;
}
