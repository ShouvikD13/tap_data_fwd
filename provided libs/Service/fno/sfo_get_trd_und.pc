/******************************************************************************/
/*	Program	    			:	SFO_GET_TRD_UND                                       */
/*                                                                            */
/*  Input             :                                                       */
/*                      FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_ROUT_CRT                                          */
/*                                                                            */
/*  Output            : FFO_XCHNG_CD                                          */
/*                      FFO_PLG_AMT   	                                      */
/*                      FFO_HAIRCUT     	                                    */
/*                      FFO_PRDCT_TYP                                         */
/*                      FFO_UNDRLYNG                                          */
/*                      FFO_INIT_MRGN_PRCNT                                   */
/*                      FFO_MIN_MRGN_PRCNT                                    */
/*                      FFO_SOMC_PRCNT                                        */
/*                      FFO_AVM_PRCNT                                         */
/*                      FFO_SPREAD_MRGN                                       */
/*                      FFO_MIN_SPREAD_MRGN                                   */
/*                      FFO_CTGRY_INDSTK                                      */
/*                      FFO_STLMNT_TYP                                        */
/*                      FFO_DLVRY_ALLWD                                       */
/*                      FFO_QT_TRDNG_FLG                                      */
/*                      FFO_CLS_PRC                                           */
/*                      FFO_BK_CLS_END_DT (cls_prc_dt)                        */
/*                      FFO_BOARD_LOT_QTY (lot_size)                        	*/
/*                                                                            */
/*  Description       : To get the details of the underlying, enabled for     */
/*                      trading for F&O                                       */
/*                                                                            */
/*  Log               : 1.0   18-Sep-2001   S. Swaminathan                    */
/*  Log               : 1.1   17-Jul-2002   Infotec|Sangeet                   */
/*  Log               : 1.2   17-Jul-2002   Infotec|Himanshu 	                */
/*	Log								: 1.3		03-Mar-2008		Infotec|Sandeep										*/
/*  Log								: 1.4   11-Feb-2008   Infotech|Sandeep                  */
/*  Log								: 1.5   01-Aug-2008   Infotech|Shailesh									*/
/*	Log								:	1.6		18-Apr-2009		Infotech|Sandeep									*/
/*	Log								:	1.7		24-Nov-2009		Infotech|Sandeep									*/
/*	Log								:	1.8		15-Mar-2011		Infotech|Sandeep			            */	
/*  Log               : 1.9   27-jul-2011   Infotech|Shamili									*/
/*  Log               : 2.0   14-Dec-2011   Infotech|Shamili									*/
/*  Log               : 2.1   14-Sep-2011   Infotech:Mahesh                   */
/*  Log               : 2.2   13-Jan-2012   Infotech|Sandip                   */
/*  Log               : 2.3   29-Nov-2012   Infotech|Vishnu                   */
/*  Log               : 2.4   01-Jan-2013   Infotech|Bhushan                  */
/*  Log               : 2.5   11-Dec-2012   Infotech|Navina D.                */
/*	Log								: 2.6		19-Sep-2013		Infotech|Shailesh S.							*/
/*  Log               : 2.7		26-Sep-2013   Infotech|Bhushan									*/
/*  Log               : 2.8		13-Feb-2014   Infotech|Navina D.								*/
/*  Log               : 2.9   10-Feb-2015   Infotech|Sandeep Patil            */
/*  Log               : 3.0   15-Feb-2015   Infotech|Anand Dhopte             */
/*  Log               : 3.3   30-Jun-2014   Infotech|Vishnu/Shailesh S        */
/*	Log               : 3.4   02-Jul-2015   Infotech|Ritesh D.								*/
/*  Log               : 3.5   27-Jul-2015   Infotech|Bhupendra Malik          */
/*  Log               : 3.6   06-Oct-2015   Infotech|Bhupendra Malik          */
/*  Log               : 3.7   05-Nov-2015   Infotech|Ritesh Deoelekar         */
/*  Log               : 3.8   11-Dec-2015   Infotech|Sandip Tambe             */
/*  Log               : 3.9   28-Jan-2016   Infotech|Tanmay Warkhade					*/
/*  Log               : 4.0   18-Aug-2016   Infotech|Vishal Borhade           */
/*  Log               : 4.1   26-Oct-2016   Infotech|MRINAL KISHORE           */
/*	Log								:	4.2		13-Jul-2018		Infotech|Parag Kanojia						*/
/*	Log								:	4.3		23-Aug-2018		Infotech|Parag Kanojia						*/
/*	Log								:	4.4		03-Oct-2018		Infotech|Parag Kanojia						*/
/*  Log               : 4.5   08-Aug-2018   Infotech|Parag Kanojia            */
/*	Log								:	4.6		23-Jan-2019		Infotech|MRINAL KISHORE 					*/
/*	Log								:	4.7		15-Mar-2019		Infotech|Navina D.      					*/
/*	Log								:	4.8		05-Mar-2020		Infotech|Navina D.      					*/
/*	Log								:	4.9		14-Sep-2020		Infotech|Navina D.      					*/
/*  Log               : 5.0   12-Dec-2020   Infotech|Anuj Pancholi            */
/*  Log               : 5.1   14-Oct-2020   Infotech|Suchita Dabir						*/
/*	Log								: 5.2 	22-sep-2021		ISEC|Ravindra Panda		            */
/*	Log								: 5.3 	23-Jun-2023		ISEC|Edwin Thomas			            */
/******************************************************************************/
/*  1.0  -  New release                                                       */
/*  1.1  -  Changes with BP Module                                            */
/*  1.2  -  Changes for collateral                                            */
/*  1.3  -  IBM MIGRATION CHANGES																							*/ 
/*	1.4  -  Changes for FP																										*/	
/*	1.5  -  CRSCM20573 for Lot size display 																	*/
/*	1.6	 -  Derivatives Strategy Changes																			*/
/*	1.7	 -	Debug Level Changes																								*/
/*	1.8	 -	CRCSN44510	Derivative Restructuring					                    */
/*  1.9  -  Changes for MOBILE Application																		*/
/*  2.0  -  Display of Stock name on stock list 															*/
/*  2.1  -  Changes for SPAN                                                  */
/*  2.2  -  Changes for BSE                                                   */
/*  2.3  -  Restricting futplus order placement for  NRI customers            */
/*  2.4  -  Process Optimization                                              */
/*  2.5  -  SLTP FuturePLUS handling.                                         */
/*	2.6	 -  OptionPlus Handling																								*/
/*	2.7	 -	RIA - SLTP FuturePLUS	(Added Exchage code into Output)						*/
/*  2.8  -  Enabling FP for NRI clients  (Navina D. )						              */
/*  2.9  -  Result Cache Hint Used                                            */
/*  3.0  -  FCM_FO_CNTRCT_MSTR AND FTQ_FO_TRD_QT MERGER CHANGES               */
/*  3.3  -  CR-ISEC04-51629 Option_Contract_Enablement                        */
/*  3.4  -  Introduce Product Type 'M' for Mobile Handling                    */
/*  3.5  -  Market to Limit futur plus sltp                                   */
/*  3.6  -  Market to Limit Option Plus                                       */
/*  3.7  -  Trim intoduce in query for Mobile in case of COLLATERAL           */
/*  3.8  -  Order By Clause added in select of range master                   */
/*  3.9  -  Migration of RI to NRI																						*/
/*  4.0  -  Future Trails                                                     */
/*  4.1  -  Pledge % display on Shares as Margin page                         */
/*	4.2	 -  Physical Settlement of Stock Derivative Changes										*/
/*	4.3	 -  Physical Settlement of Stock Derivative Phase 2 Changes						*/
/*	4.4	 -	CR-ISEC14-114802_FNO_LIVE_ISSUES Changes													*/
/*  4.5  -  Rollover with Spread Changes                                      */
/*	4.6	 -	Automation of contract split process    													*/
/*	4.7	 -	Freeze qty , OI update                   													*/
/*  4.8  -  FPSL margin change CR-ISEC14-133200                               */
/*  4.9  -  Squareoff all and reorder                                         */
/*  5.0  -  ELM% for Deep OTM Option for SPAN and Non SPAN CR-ISEC14-141383   */
/*  5.1  -  CR-ISEC14-139243 Margin computation logic change in OptionPLUS		*/ 
/*	5.2	 -	Additional coloumns returned for FuturePlus-StopLoss						  */
/*	5.3	 -	RQ:3117 FNO GTT changes																					  */
/******************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fn_session.h>
#include <fn_read_debug_lvl.h>			/*** Ver1.3 ***/

#define COLLATERAL 'C' 		/*** 1.2 ***/
#define HOST_ARR_LEN 1000 /*** 1.2 ***/
#define SPAN 'S'          /*** 2.1 ***/ 
#define SPREAD_BFT_DTLS 'T' /*** Ver 4.6 ***/
void SFO_GET_TRD_UND( TPSVCINFO *rqst )
{
	FBFR32 *ptr_fml_Ibuf;
	FBFR32 *ptr_fml_Obuf;

	char c_ServiceName[ 33];
	char c_err_msg[256];
	char c_msg[256];
	char c_fum_fp_trd;    /*Ver 1.4*/
	int  i_returncode;

	EXEC SQL BEGIN DECLARE SECTION;
		struct vw_undrlyng *ptr_i_st_undrlyng;
		struct vw_undrlyng *ptr_o_st_undrlyng;
		struct vw_usr_prfl st_usr_prfl;
		varchar c_close_prc_tm[ LEN_DATE ];
		char c_xchng_cd [ 4 ];
		char c_prdct_typ;
		char c_cln_mtch_accnt [ 11 ];
		char c_stck_cd[7];
		char c_stck_nm[31];									/*** Ver 2.0 ***/
		char c_ctgry_indstk;
    char c_stlmnt_typ;
    char c_dlvry_allwd;
    char c_qt_trdng_flg;
		char c_fum_ds_flg;		/* Ver 1.6 */
		char c_ordr_flw = '\0';			/* Ver 2.6 */
    char c_prd_typ = '\0';      /* Ver 3.3 */
    char c_sltp_lmt_allwd_flg= '\0';  /* Ver 3.5 */
		char c_fum_sltp_trail_flg = '\0';  /** Ver 4.0 **/
		char c_sprd_allwd_flg = '\0';					/** Ver 4.6 **/
		char c_sprd_chg_dt[ LEN_DATE ] = "\0";		/** Ver 4.6 **/
    char c_otm_oth[4] = "\0";  /** ver 5.0 **/
		char c_prft_allwd_flg ='\0';		/** ver 5.2 **/

		char c_gtt_allwd_flg='\0';        /** Ver 5.3 **/

    /*** ver 5.1 starts ***/
    double d_oplus_flt_rate = 0.0;
    double d_sebi_b_prcnt = 0.0;
    double d_sebi_s_prcnt = 0.0;
    /*** ver 5.1 ends ***/   

		long l_fum_trail_amt = 0;       /** Ver 4.0 **/
    long l_fmm_sltp_upd_cnd = 0;    /** Ver 4.0 **/
    long l_cls_prc;
		long l_basket_id;
		long l_shrtfll_mrgn=0;
		long l_lot_sz;		/**Ver 1.5**/
		long l_frm_rng = 0;		/** Ver 2.6 **/
		long l_to_rng = 0;		/** Ver 2.6 **/
    double d_fum_open_interest; /* Ver 3.3 */
    double d_fum_volume;        /* Ver 3.3 */
		long 	l_fum_freeze_qty = 0;				/*** Ver 4.7 ***/
		double d_fum_clnt_oi = 0;							  /*** Ver 4.7 ***/

    double d_deep_otm_im_prcnt      = 0.0;      /** Ver 5.0 **/
    double d_deep_otm_mm_prcnt      = 0.0;      /** Ver 5.0 **/
    double d_nrml_elm_prcnt         = 0.0;      /** Ver 5.0 **/
    double d_additnl_elm_mrgn_prcnt = 0.0;      /** Ver 5.0 **/
    double d_total_elm_mrgn_prcnt   = 0.0;      /** Ver 5.0 **/
		double d_sltp_prft_diff_prcnt   = 0.0;			/** ver 5.2 **/ 

 		double d_init_mrgn_prcnt ;
 		double d_min_mrgn_prcnt; 
 		double d_somc_prcnt; 
 		double d_avm_prcnt;
 		double d_spread_mrgn;
 		double d_min_spread_mrgn;
		double d_thrshd_mrgn_prcnt;           /* 1.4 */
		double d_span_mrgn_prcnt;           /* 1.4 */
		int i =0;  /*** 1.2 ***/

		double d_span_mltplr	= 0.0;       /*** Ver 2.1 ***/
    double d_span_expsr		= 0.0;        /*** Ver 2.1 ***/
    double d_span_min_expsr = 0.0;    /*** Ver 2.1 ***/
    double d_span_val				= 0.0;          /*** Ver 2.1 ***/
    
    double d_spn_deep_otm_ini_expsr = 0.0;       /** ver 5.0 **/
    double d_spn_deep_otm_min_expsr = 0.0;       /** ver 5.0 **/

    double d_spltp_per = 0.0;         /*** Ver 2.5 ***/
    double d_spltp_diff_per = 0.0;    /*** Ver 2.5 ***/
		double d_diff_mrgn = 0.0;				 /*** Ver 2.6 ***/
		double d_min_sltp  = 0.0;				 /*** Ver 2.6 ***/
		double d_cutoff_prm = 0.0;         /*** Ver 2.6 ***/	
		
		double d_sebi_per = 0.0;         /*** Ver 4.8 ***/

		int i_count = 1;  /*** Ver 2.6 ***/

		/*** Commented in Ver 4.3 ***
		char c_setlemnt_flg_tmp = 'C';			*** Ver 4.2 ***
		char c_setlemnt_flg = 'N';					*** Ver 4.2 ***
		*** Ver 4.3 ***/

		char c_rollover_sprd_allwd_flg = 'N';   /*** Ver 4.5 ***/
		
	EXEC SQL END DECLARE SECTION;
  EXEC SQL INCLUDE "table/icd_info_client_dtls.h"; /*** Ver 3.9 ***/
	struct vw_err_msg *ptr_st_err_msg;

	ptr_fml_Ibuf = ( FBFR32 *)rqst->data;
	strcpy( c_ServiceName, rqst->name );

	INITDBGLVL(c_ServiceName);			 /*** Ver1.3 ***/


	ptr_st_err_msg = ( struct vw_err_msg * ) tpalloc ( "VIEW32",
	                                                   "vw_err_msg",
	                                               sizeof ( struct vw_err_msg ) );
	if ( ptr_st_err_msg ==  NULL )
	{
		fn_errlog ( c_ServiceName, "S31005", TPMSG, c_err_msg );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
		tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
	}

	memset ( ptr_st_err_msg, 0, sizeof ( struct vw_err_msg ) );
	memset(c_stck_cd,0,sizeof(c_stck_cd));				/** 1.9 **/

	i_returncode = fn_unpack_fmltovar ( c_ServiceName,
                                    	c_err_msg,
                                   	 	ptr_fml_Ibuf,
                                    	2,	
                                    	FFO_XCHNG_CD, ( char * )c_xchng_cd, NULL,
                                    	FFO_PRDCT_TYP, (char *)&c_prdct_typ, NULL
																		);

  if( i_returncode != 0 )
  {
    fn_errlog( c_ServiceName, "S31010", LIBMSG , c_err_msg );
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  }


	/****** Ver 1.9 **************/

	if (Fget32( ptr_fml_Ibuf,FFO_UNDRLYNG,0,c_stck_cd,0) == -1)
	{


			if(Ferror32 == FNOTPRES)
			{

						strcpy(c_stck_cd,"%");

			}
			else
			{


					fn_errlog( c_ServiceName, "S31015", LIBMSG , c_err_msg );
					Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					tpreturn( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );


			}


	}


	/****** Ver 1.9 Ends **************/

	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_usr_prfl,
                           "vw_usr_prfl" );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31020", FMLMSG, c_err_msg  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Added for Order Routing ***/

  fn_init_ddr_val ( st_usr_prfl.c_rout_crt );

	i_returncode = fn_chk_sssn( c_ServiceName, &st_usr_prfl,
                                             ptr_st_err_msg ) ;

  if ( i_returncode == -1 )
  {
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/***1.1 Start***/
	/*
	EXEC SQL
		SELECT 	UAC_CLM_MTCH_ACCNT
		INTO		:c_cln_mtch_accnt
		FROM		UAC_USR_ACCNTS
		WHERE		UAC_USR_ID = :st_usr_prfl.c_user_id;
	
	if ( ( SQLCODE != 0 )  && ( SQLCODE != NO_DATA_FOUND ))
	{
		fn_errlog( c_ServiceName, "S31025", SQLMSG, ptr_st_err_msg->c_err_msg  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	*/
	/***1.1 End ***/

if( c_prdct_typ != 'E' && c_prdct_typ != 'S' )  /** Ver 3.3 **/
{
	if (DEBUG_MSG_LVL_3)       /*** Ver1.3 ***/
  {
		fn_userlog( c_ServiceName, "MTCH NO. 		:%s:", st_usr_prfl.c_cln_mtch_accnt );
		fn_userlog( c_ServiceName, "prd.type    :%c:", c_prdct_typ );
	}
	
	EXEC SQL
		SELECT  FCB_UNDRLYNG_BSKT_ID
    INTO    :l_basket_id
    FROM    FCB_FO_CLN_BSKT_ALLTD
    WHERE   FCB_CLN_LVL = ( SELECT 	CLM_CLNT_LVL
                          	FROM 		CLM_CLNT_MSTR
                          	WHERE 	CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt );
  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31030", SQLMSG, ptr_st_err_msg->c_err_msg );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
}
	if (DEBUG_MSG_LVL_3)			 /*** Ver1.3 ***/
	{
		fn_userlog( c_ServiceName, "basket 			:%ld:", l_basket_id );
		fn_userlog( c_ServiceName, "xchng_cd 		:%s:", c_xchng_cd );
		fn_userlog( c_ServiceName, "prd.type 		:%c:", c_prdct_typ );
	}

	rtrim(c_stck_cd);												/**1.9 **/

	/******* Ver 2.3 Starts **********/

	/********* Commented in Ver 3.9 ************

  if ( (strncmp(st_usr_prfl.c_cln_mtch_accnt, "750", 3)  == 0 ) ||
       (strncmp(st_usr_prfl.c_cln_mtch_accnt, "751", 3)  == 0 ) ||
       (strncmp(st_usr_prfl.c_cln_mtch_accnt, "650", 3)  == 0 ) ||
       (strncmp(st_usr_prfl.c_cln_mtch_accnt, "651", 3)  == 0 )
     )
	********* Commented Ver 3.9 Ends ************/

	/****** Added in Ver 3.9 *******/

	MEMSET( sql_icd_cust_type );
  EXEC SQL
  SELECT  ICD_CUST_TYPE
  INTO    :sql_icd_cust_type
  FROM    ICD_INFO_CLIENT_DTLS,
          IAI_INFO_ACCOUNT_INFO
  WHERE   ICD_SERIAL_NO = IAI_SERIAL_NO
  AND     IAI_MATCH_ACCOUNT_NO  = :st_usr_prfl.c_cln_mtch_accnt;		

	if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31035", SQLMSG, ptr_st_err_msg->c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
	
	 SETNULL(sql_icd_cust_type);

	 /********* Added in Ver 3.9 Ends ************/

	fn_userlog(c_ServiceName,"CUST TYPE IS :%s:",sql_icd_cust_type.arr ) ; 

	if(strcmp(sql_icd_cust_type.arr,"NRI") == 0)    /****** Check added in Ver 3.9 *******/
  {
  	if( strcmp(c_xchng_cd,"BFO") == 0)
    {
      fn_errlog( c_ServiceName, "S31040", "Currently BSE Derivative is not allowed for NRI customers", c_err_msg  );
    	strcpy( c_err_msg ,"Currently BSE Derivative is not allowed for NRI customers");
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      /*** else if(c_prdct_typ == 'P')		Commented in Ver 2.8 ***
      {
        fn_errlog( c_ServiceName, "S31045", "This facility is currently not enabled for NRI customers", c_err_msg  );
        strcpy(c_err_msg,"This facility is not enabled for NRI customers");
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
			***/
    }


  /******* Ver 2.3 Ends   **********/

	/*if(c_prdct_typ == 'F' || c_prdct_typ == 'O') *** 1.2 ***/
	/*if(c_prdct_typ == 'F' || c_prdct_typ == 'O' || c_prdct_typ == 'P') *** 1.4 ***/ 

	if(c_prdct_typ == 'F' || c_prdct_typ == 'O' || c_prdct_typ == 'P' || c_prdct_typ == 'L')	/* Ver 1.6 */
	{
		EXEC SQL
			DECLARE	get_undrlyng CURSOR FOR
      SELECT  /*+result_cache*/FUM.FUM_XCHNG_CD,    /***  Ver 2.9 RESULT_CACHE Hint Added ***/
							/*fum.fum_prdct_typ, Ver 1.4*/
							FUM.FUM_UNDRLYNG,
							STK.STK_STCK_NM,											/*** Ver 2.0 ***/
							NVL(FUM.FUM_CTGRY_INDSTK,'*'),
							NVL(FUM.FUM_STLMNT_TYP,'*'),
							NVL(FUM.FUM_DLVRY_ALLWD,0),
							NVL(FUM.FUM_QT_TRDNG_FLG,'*'),
							NVL(FUM.FUM_CLS_PRC,0),
							NVL(TO_CHAR(FUM.FUM_CLS_PRC_DT,'DD-Mon-YYYY'),'*'),
							NVL(FMM_INIT_MRGN_PRCNT,0),
							NVL(FMM_MIN_MRGN_PRCNT,0),
							NVL(FMM_SOMC_PRCNT,0),
							NVL(FMM_AVM_PRCNT,0),
							NVL(FMM_SPREAD_MRGN,0),
							NVL(FMM_MIN_SPREAD_MRGN,0),
							NVL(FMM_THRSHD_MRGN_PRCNT,0),            /*1.4*/
							NVL(FMM_SPAN_MRGN_PRCNT,0),								/*1.4*/
              NVL(FUM_FP_TRDNG_FLG,'N'),               /* 1.4 */
							NVL(FUM_DS_TRDNG_FLG,'N'),		/* Ver 1.6 */				
							NVL(LOT_SIZE.LOT_SZ,0),           /*** Ver 2.4 ***/	
							NVL(FUM.FUM_SLTP_TRAIL_FLG,'N'),    /** Ver 4.0 **/
              NVL(FUM.FUM_TRAIL_AMT,0)*100,           /** Ver 4.0 **/
              NVL(FMM.FMM_SLTP_UPD_CND,0)*100,         /** Ver 4.0 **/
							NVL(FUM.FUM_FREEZE_QTY,0),	/*** Ver 4.7 ***/
							NVL(FUM.FUM_CLNT_OPN_INTRST,0),				    /*** Ver 4.7 ***/
		/***			NVL(FUM.FUM_SETLMNT_FLG,'C')				** Ver 4.2 **	** Commented in Ver 4.3 ***/
							NVL(FUM.FUM_ROLLOVER_SPRD_ALLWD_FLG,'N'), /** Ver 4.5 **/
              NVL(FMM.FMM_DEEP_OTM_IM_PRCNT,0), /** Ver 5.0 **/
              NVL(FMM.FMM_DEEP_OTM_MM_PRCNT,0)  /** ver 5.0 **/
			/** FROM    FUM_FO_UNDRLYNG_MSTR FUM, FMM_FO_MRGN_MSTR FMM,STK_STK_MSTR STK *** Ver 2.0 ***  Commented in Ver 2.4 **/
    /***  FROM    FUM_FO_UNDRLYNG_MSTR FUM, FMM_FO_MRGN_MSTR FMM,STK_STK_MSTR STK,(select *+result_cache* FCM_UNDRLYNG,min(FCM_LOT_SZ) LOT_SZ FROM FCM_FO_CNTRCT_MSTR WHERE FCM_XCHNG_CD=:c_xchng_cd AND FCM_PRDCT_TYP = 'F' group by FCM_UNDRLYNG ) LOT_SIZE  *** Ver 2.4 *** 2.9 added resultcache **  Commented in Ver 3.0 ***/
         FROM FUM_FO_UNDRLYNG_MSTR FUM, FMM_FO_MRGN_MSTR FMM,STK_STK_MSTR STK,(select FTQ_UNDRLYNG,
              min(FTQ_MIN_LOT_QTY) LOT_SZ FROM FTQ_FO_TRD_QT WHERE FTQ_XCHNG_CD = :c_xchng_cd AND FTQ_PRDCT_TYP = 'F'
              group by FTQ_UNDRLYNG) LOT_SIZE /*** Ver 3.0 ***/
			WHERE		FUM.FUM_XCHNG_CD			=	:c_xchng_cd
			AND     FUM.FUM_UNDRLYNG = FMM.FMM_UNDRLYNG
			AND			FUM.FUM_XCHNG_CD = FMM.FMM_XCHNG_CD			/***	Ver 2.2	***/
     /*** AND     FUM.FUM_UNDRLYNG = LOT_SIZE.FCM_UNDRLYNG(+)     *** Ver 2.4 *** commented in Ver 3.0***/
     /*** AND     FUM.FUM_UNDRLYNG = LOT_SIZE.FTQ_UNDRLYNG(+)     *** Ver 3.0 ***	Commnented in Ver 4.4 ***/
			AND			FUM.FUM_UNDRLYNG = LOT_SIZE.FTQ_UNDRLYNG		/*** Added in Ver 4.4 ***/
      AND     FUM.FUM_UNDRLYNG = STK.STK_STCK_CD                              /*** Ver 2.0 ***/
		 /***			AND			FUM.FUM_QT_TRDNG_FLG	= 'T'		*** Commented in Ver 4.4 ***/
			AND			FUM.FUM_QT_TRDNG_FLG	in ('T','Q')		/*** Added in Ver 4.4 ***/
			AND			FUM.FUM_PRDCT_TYP LIKE  DECODE(:c_prdct_typ,'O','O','F') 	/*Ver 1.4*/
			AND			FMM.FMM_PRDCT_TYP LIKE  DECODE(:c_prdct_typ,'O','O','F')  /*Ver 1.4 */
			AND			FMM.FMM_UNDRLYNG_BSKT_ID = :l_basket_id
			AND     trim(FUM.FUM_UNDRLYNG) like :c_stck_cd											/*Ver 1.9*/
			ORDER BY 	FUM.FUM_UNDRLYNG, FUM.FUM_CLS_PRC_DT,
								FUM.FUM_CLS_PRC ASC;	

		EXEC SQL OPEN get_undrlyng;

		if ( SQLCODE != 0 )
		{
			fn_errlog( c_ServiceName, "S31050", SQLMSG, ptr_st_err_msg->c_err_msg  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

		ptr_fml_Obuf = NULL;

		while (1)
		{
	
				EXEC SQL
					FETCH	get_undrlyng
					INTO	:c_xchng_cd,
								/*:c_prdct_typ,   Ver 1.4*/
								:c_stck_cd,
								:c_stck_nm,   							/*** Ver 2.0 ***/
								:c_ctgry_indstk,
								:c_stlmnt_typ,
								:c_dlvry_allwd,
								:c_qt_trdng_flg,
								:l_cls_prc,
								:c_close_prc_tm,
								:d_init_mrgn_prcnt,
								:d_min_mrgn_prcnt,
								:d_somc_prcnt,
								:d_avm_prcnt,
								:d_spread_mrgn,
								:d_min_spread_mrgn,
								:d_thrshd_mrgn_prcnt,   /*1.4*/
								:d_span_mrgn_prcnt,			/*1.4*/
                :c_fum_fp_trd,          /*1.4*/
			    			:c_fum_ds_flg,					/* Ver 1.6 */
								:l_lot_sz,						/*** Ver 2.4 ***/
								:c_fum_sltp_trail_flg,    /** Ver 4.0 **/
                :l_fum_trail_amt,         /** Ver 4.0 **/
                :l_fmm_sltp_upd_cnd,      /** Ver 4.0 **/
								:l_fum_freeze_qty,				/*** Ver 4.7 ***/
								:d_fum_clnt_oi,							  /*** Ver 4.7 ***/
			/***			:c_setlemnt_flg_tmp;					** Ver 4.2 **	** Commented in Ver 4.3 ***/
								:c_rollover_sprd_allwd_flg, /** Ver 4.5 **/
                :d_deep_otm_im_prcnt, /** Ver 5.0 **/
                :d_deep_otm_mm_prcnt; /** Ver 5.0 **/

				if ( SQLCODE != 0 )
				{
					if ( SQLCODE == NO_DATA_FOUND )
					{
						break;
					}
					fn_errlog( c_ServiceName, "S31055", SQLMSG, ptr_st_err_msg->c_err_msg  );
					EXEC SQL
						CLOSE get_undrlyng;
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
					tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
			
				SETNULL ( c_close_prc_tm );

				if(strcmp((char *)c_close_prc_tm.arr,"*")== 0)
				{
					strcpy ( (char *)c_close_prc_tm.arr ," ");
				}

				/******* Ver 1.4 add product type 'P' and threshold margin in init FML for display only*/
			
				if (DEBUG_MSG_LVL_3)			/***	Ver 1.7	***/
				{
					fn_userlog( c_ServiceName, "c_stck_cd			 :%s:",c_stck_cd);
					fn_userlog( c_ServiceName, "c_stck_nm			 :%s:",c_stck_nm);			/*** Ver 2.0 ***/
					fn_userlog( c_ServiceName, "c_prdct_typ    :%c:",c_prdct_typ  );
          fn_userlog( c_ServiceName, "c_fum_fp_trd   :%c:", c_fum_fp_trd );
          fn_userlog( c_ServiceName, "d_deep_otm_im_prcnt   :%lf:", d_deep_otm_im_prcnt);  /* ver 5.0 */
          fn_userlog( c_ServiceName, "d_deep_otm_mm_prcnt   :%lf:", d_deep_otm_mm_prcnt ); /* ver 5.0 */
				}

			/**Ver 1.5 starts **/
		/*** Commented in Ver 2.4	
			EXEC SQL
				SELECT 	FCM_LOT_SZ
				INTO 	 	:l_lot_sz
				FROM 	 	FCM_FO_CNTRCT_MSTR
	**			WHERE		FCM_XCHNG_CD	=	'NFO'			***	Ver	1.8	***    Commented In Ver 2.2	***
				WHERE		FCM_XCHNG_CD	= :c_xchng_cd			***	Ver	2.2	***
				AND			FCM_UNDRLYNG	=	:c_stck_cd
				AND 		FCM_PRDCT_TYP = 'F'
				AND 		ROWNUM < 2;

			if ( SQLCODE != 0 && SQLCODE !=NO_DATA_FOUND )
			{
				fn_errlog( c_ServiceName, "S31060", SQLMSG, ptr_st_err_msg->c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		***** Ver 2.4 Ends ***/

			if (DEBUG_MSG_LVL_3)			/***	Ver 1.7	***/
			{
				fn_userlog(c_ServiceName,"Lot Size:%ld:",l_lot_sz);
			}

			/**Ver 1.5 ends **/
						
			if( c_prdct_typ == 'P')
     	{
          if(c_fum_fp_trd == 'T')
          {

						if (DEBUG_MSG_LVL_3)			/***	Ver 1.7	***/
						{
            	fn_userlog( c_ServiceName, "c_prdct_typ I   :%c:",c_prdct_typ  );
             	fn_userlog( c_ServiceName, "c_prdct_typ I   :%c:", c_fum_fp_trd );
             	fn_userlog( c_ServiceName, "d_span_mrgn_prcnt I   :%ld:", d_span_mrgn_prcnt );
             	fn_userlog( c_ServiceName, "d_thrshd_mrgn_prcnt I   :%ld:", d_thrshd_mrgn_prcnt );
						}

             i_returncode = fn_pack_vartofml( c_ServiceName,
                                           c_err_msg,
                                           &ptr_fml_Obuf,
                                           17,		/**Ver 1.5 changed from 15 to 16 **/
                                  FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                  FFO_PRDCT_TYP, (char *)&c_prdct_typ,
                                  FFO_UNDRLYNG, ( char * )c_stck_cd,
                                  FFO_STCK_CD, ( char * )c_stck_nm,				/*** Ver 2.0 ***/
                                  FFO_INIT_MRGN_PRCNT, ( char * )&d_span_mrgn_prcnt,
                                  FFO_MIN_MRGN_PRCNT, ( char * )&d_thrshd_mrgn_prcnt,
                                  FFO_SOMC_PRCNT, ( char * )&d_somc_prcnt,
                                  FFO_AVM_PRCNT, ( char * )&d_avm_prcnt,
                                  FFO_SPREAD_MRGN, ( char * )&d_spread_mrgn,
                                  FFO_MIN_SPREAD_MRGN, ( char * )&d_min_spread_mrgn,
                                  FFO_CTGRY_INDSTK, ( char * )&c_ctgry_indstk,
                                  FFO_STLMNT_TYP, ( char * )&c_stlmnt_typ,
                                  FFO_DLVRY_ALLWD, ( char * )&c_dlvry_allwd,
                                  FFO_QT_TRDNG_FLG, ( char * )&c_qt_trdng_flg,
                                  FFO_CLS_PRC, ( char * )&l_cls_prc,
                                  FFO_BK_CLS_END_DT, ( char * )c_close_prc_tm.arr,
																	FFO_BOARD_LOT_QTY, (char *) &l_lot_sz);	/**Ver 1.5 **/

					if( i_returncode == -1 )
          {
            fn_errlog( c_ServiceName, "S31065", LIBMSG, c_err_msg );
            tpfree ( ( char * ) ptr_fml_Obuf );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
          }
        }
      }
			/************  Ver 1.4 Ends ***********/

			/***	Ver 1.6 Starts	***/
			else if ( c_prdct_typ == 'L')
			{

				if(c_fum_ds_flg == 'T')
				{
					i_returncode = fn_pack_vartofml( c_ServiceName,
                                           c_err_msg,
                                           &ptr_fml_Obuf,
                                           17,    /**Ver 1.5 changed from 15 to 16 **/
                                  FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                  FFO_PRDCT_TYP, (char *)&c_prdct_typ,
                                  FFO_UNDRLYNG, ( char * )c_stck_cd,
																	FFO_STCK_CD, ( char * )c_stck_nm,       /*** Ver 2.0 ***/
                                  FFO_INIT_MRGN_PRCNT, ( char * )&d_init_mrgn_prcnt,
                                  FFO_MIN_MRGN_PRCNT, ( char * )&d_min_mrgn_prcnt,
                                  FFO_SOMC_PRCNT, ( char * )&d_somc_prcnt,
                                  FFO_AVM_PRCNT, ( char * )&d_avm_prcnt,
                                  FFO_SPREAD_MRGN, ( char * )&d_spread_mrgn,
                                  FFO_MIN_SPREAD_MRGN, ( char * )&d_min_spread_mrgn,
                                  FFO_CTGRY_INDSTK, ( char * )&c_ctgry_indstk,
                                  FFO_STLMNT_TYP, ( char * )&c_stlmnt_typ,
                                  FFO_DLVRY_ALLWD, ( char * )&c_dlvry_allwd,
                                  FFO_QT_TRDNG_FLG, ( char * )&c_qt_trdng_flg,
                                  FFO_CLS_PRC, ( char * )&l_cls_prc,
                                  FFO_BK_CLS_END_DT, ( char * )c_close_prc_tm.arr,
                                  FFO_BOARD_LOT_QTY, (char *) &l_lot_sz); /**Ver 1.5 **/

          if( i_returncode == -1 )
          {
            fn_errlog( c_ServiceName, "S31070", LIBMSG, c_err_msg );
            tpfree ( ( char * ) ptr_fml_Obuf );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
          }
				}
			}
			/***	Ver 1.6	Ends	***/
			else
      {
					/*** Commented in Ver 4.3 ***
					*** Ver 4.2 Starts ***

					if ( c_setlemnt_flg_tmp == 'P' )
					{
						c_setlemnt_flg = 'Y';
					}
					else
					{
						c_setlemnt_flg = 'N';
					}

					*** Ver 4.2 Ends ***
					*** Commented in Ver 4.3 ***/

					i_returncode = fn_pack_vartofml( c_ServiceName,
																					 c_err_msg,
																					 &ptr_fml_Obuf,
                                           25,		/**Ver 1.5 changed from 15 to 16 **/  /** Changed 17 to 20 in Ver 4.0 **/	/** Ver 4.2 Changed from 20 to 21 **/	/** Ver 4.3 Changed from 21 to 20 **/ /*** Ver 4.7 changed from 20 to 22 ***/		/** Ver 4.5 Changed from 22 to 23 **/ /** ver 5.0 chnged from 23 to 25  **/
																	FFO_XCHNG_CD, ( char * )c_xchng_cd,
																	FFO_PRDCT_TYP, (char *)&c_prdct_typ,
																	FFO_UNDRLYNG, ( char * )c_stck_cd,
																	FFO_STCK_CD, ( char * )c_stck_nm,       /*** Ver 2.0 ***/
																	FFO_INIT_MRGN_PRCNT, ( char * )&d_init_mrgn_prcnt, 
																	FFO_MIN_MRGN_PRCNT, ( char * )&d_min_mrgn_prcnt, 
																	FFO_SOMC_PRCNT, ( char * )&d_somc_prcnt, 
																	FFO_AVM_PRCNT, ( char * )&d_avm_prcnt, 
																	FFO_SPREAD_MRGN, ( char * )&d_spread_mrgn, 
																	FFO_MIN_SPREAD_MRGN, ( char * )&d_min_spread_mrgn, 
																	FFO_CTGRY_INDSTK, ( char * )&c_ctgry_indstk, 
																	FFO_STLMNT_TYP, ( char * )&c_stlmnt_typ, 
																	FFO_DLVRY_ALLWD, ( char * )&c_dlvry_allwd, 
																	FFO_QT_TRDNG_FLG, ( char * )&c_qt_trdng_flg, 
																	FFO_CLS_PRC, ( char * )&l_cls_prc, 
																	FFO_BK_CLS_END_DT, ( char * )c_close_prc_tm.arr, 
																	FFO_BOARD_LOT_QTY, (char *) &l_lot_sz,	/**Ver 1.5 **/
																	FFO_PRC_INDCTR, (char *) &c_fum_sltp_trail_flg,     /** Ver 4.0 **/
                                  FFO_INTERVAL, (char *) &l_fum_trail_amt,            /** Ver 4.0 **/
                                  FFO_NET_TRD_VAL, (char *) &l_fmm_sltp_upd_cnd,     /** Ver 4.0 **/
																	FFO_ASSIGN_QTY , (char *) &l_fum_freeze_qty, /*** Ver 4.7 ***/
																	FFO_OI_HIGH, (char *) &d_fum_clnt_oi, /*** Ver 4.7 ***/

		/***													FFO_BK_UBK_FLG, (char *) &c_setlemnt_flg);				** Ver 4.2 **	  ** Commented in Ver 4.3 ***/
																	FFO_SPL_FLG, (char *) &c_rollover_sprd_allwd_flg,    /** Ver 4.5 **/
                                  FFO_OPNPSTN_VAL,( char * )&d_deep_otm_im_prcnt,       /** ver 5.0 **/
                                  FFO_PLG_RT,( char * )&d_deep_otm_mm_prcnt);          /** ver 5.0 **/

					if( i_returncode == -1 )
					{
						fn_errlog( c_ServiceName, "S31075", LIBMSG, c_err_msg );
						tpfree ( ( char * ) ptr_fml_Obuf );
						Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
						tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
					}
			}
		}
	
		EXEC SQL CLOSE get_undrlyng;
				
	}  /*** F/O ends ***/

	/*** 1.2 Start Here ***/

	else if ( c_prdct_typ == COLLATERAL)
	{

			char c_fetch_flag; 			
			char c_undrlyng[HOST_ARR_LEN][7];
			char c_undrlyng_nm[HOST_ARR_LEN][31];		/*** Ver 2.0 ***/
      double d_plg_prcntg[HOST_ARR_LEN];      /*** ver 4.1 ***/ 
			long l_plg_clnt_conc[HOST_ARR_LEN];
			long l_plg_haircut[HOST_ARR_LEN];
			long l_min_qty[HOST_ARR_LEN];
			long l_lot_size[HOST_ARR_LEN];			/**Ver 1.5**/
			long l_old_cnt;						
			long l_curr_cnt;					
		
			EXEC SQL
			SELECT	PPP_SHRTFLL_MRGN
			INTO		:l_shrtfll_mrgn
			FROM		PPP_PAR_PLG_PRMTR;

			if(SQLCODE != 0)
			{
				fn_errlog( c_ServiceName, "S31080", SQLMSG, ptr_st_err_msg->c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
			if (DEBUG_MSG_LVL_3)			 /*** Ver1.3 ***/
			{			
				fn_userlog(c_ServiceName,"l_shrtfll_mrgn :%ld:",l_shrtfll_mrgn);	
		  }

			EXEC SQL
			DECLARE get_col_undrlyng CURSOR FOR
			SELECT		STK_STCK_CD,
								STK_STCK_NM,													/*** Ver 2.0 ***/
						 		NVL(STK_PLG_CLNT_CONC,0),
								NVL(STK_PLG_HAIRCUT,0), 
								NVL(STK_PLG_MIN_DPST,0),
								NVL(LOT_SIZE.LOT_SZ,0),           /*** Ver 2.4 ***/
                NVL(XSM_PLG_PERCENTAGE,0)         /*** ver 4.1 ***/
    /***  FROM      STK_STK_MSTR,(select  FCM_UNDRLYNG,min(FCM_LOT_SZ) LOT_SZ FROM FCM_FO_CNTRCT_MSTR WHERE FCM_XCHNG_CD=:c_x
chng_cd AND FCM_PRDCT_TYP = 'F' group by FCM_UNDRLYNG ) LOT_SIZE   *** Ver 2.4 *** commented in Ver 3.0 ***/
      FROM      STK_STK_MSTR,(select FTQ_UNDRLYNG, min(FTQ_MIN_LOT_QTY) LOT_SZ FROM FTQ_FO_TRD_QT
                WHERE FTQ_XCHNG_CD = :c_xchng_cd AND FTQ_PRDCT_TYP = 'F' group by FTQ_UNDRLYNG ) LOT_SIZE, /*** Ver 3.0 ***/
                xsm_xchng_stk_mstr                    /*** ver 4.1 ***/ 
			where 		STK_PLG_ALLWD = 'Y'
			and 			trim(STK_STCK_CD) like :c_stck_cd     /** 1.9 **/  /*** Trim intoduce in Ver 3.7 ***/ 
    /***  and       STK_STCK_CD = LOT_SIZE.FCM_UNDRLYNG(+)  *** Ver 2.4 *** commented in Ver 3.0 ***/
      and       STK_STCK_CD = LOT_SIZE.FTQ_UNDRLYNG(+)      /*** Ver 3.0 ***/
      and    STK_STCK_CD= XSM_STCK_CD(+)                    /*** ver 4.1 ***/
      and    XSM_XCHNG_CD(+) = DECODE(:c_xchng_cd , 'NFO' , 'NSE', 'BFO','BSE')   /*** :c_xchng_cd is replaced by DECODE(:c_xchng_cd , 'NFO' , 'NSE', 'BFO','BSE') **in ver 4.1*********/
			ORDER BY	STK_STCK_CD;
		 
			EXEC SQL OPEN get_col_undrlyng;

    	if ( SQLCODE != 0 )
			{
				fn_errlog( c_ServiceName, "S31085", SQLMSG, ptr_st_err_msg->c_err_msg  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

      ptr_fml_Obuf = NULL;
			l_old_cnt = 0;
      l_curr_cnt = 0;


      while (1)
      {
					c_fetch_flag = 'N'; 
					
					memset(c_undrlyng,0,sizeof(c_undrlyng));
					memset(c_undrlyng_nm,0,sizeof(c_undrlyng_nm));   /*** Ver 2.0 ***/
					memset(l_plg_clnt_conc,0,sizeof(l_plg_clnt_conc));
					memset(l_plg_haircut,0,sizeof(l_plg_haircut));
					memset(l_min_qty,0,sizeof(l_min_qty));
					memset(l_lot_size,0,sizeof(l_lot_size));   /*** Ver 2.4 ***/
          memset(d_plg_prcntg,0,sizeof(d_plg_prcntg));   /*** Ver 4.1 ***/
	
          EXEC SQL
          FETCH 	get_col_undrlyng
          INTO  	:c_undrlyng,
									:c_undrlyng_nm,								/*** Ver 2.0 ***/
									:l_plg_clnt_conc,
 									:l_plg_haircut,
									:l_min_qty,
									:l_lot_size,							/*** Ver 2.4 ***/
                  :d_plg_prcntg;              /*** ver 4.1 ***/

					if ( SQLCODE != 0 &&  SQLCODE != NO_DATA_FOUND)
          {

            fn_errlog( c_ServiceName, "S31090", SQLMSG, ptr_st_err_msg->c_err_msg  );
            EXEC SQL CLOSE get_col_undrlyng;
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
						tpfree ( ( char * ) ptr_st_err_msg );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

          if ( SQLCODE == NO_DATA_FOUND )
					{
						c_fetch_flag = 'Y';
						sqlca.sqlcode = 0;
					}

					if (DEBUG_MSG_LVL_3)      
  				{
						fn_userlog(c_ServiceName,"The fetched count is [%ld]",sqlca.sqlerrd[2]);
					}

					if(sqlca.sqlerrd[2] == 0)
					{
						c_fetch_flag = 'Y';
						fn_userlog(c_ServiceName,"No records to fetched ...");
						EXEC SQL CLOSE get_col_undrlyng;
						break;
					}
	
        	l_curr_cnt = sqlca.sqlerrd[2] - l_old_cnt;
        	l_old_cnt = sqlca.sqlerrd[2];


					for(i=0; i < l_curr_cnt	; i++) /*** Get records from host array ***/
					{	
						/**Ver 1.5 starts *** Commented in Ver 2.4 ****
						memset(l_lot_size,0,sizeof(l_lot_size));		**Ver 1.5**
						memset(c_stck_cd,0,sizeof(c_stck_cd));			**Ver 1.5**

						strcpy(c_stck_cd,c_undrlyng[i]);	

				
						EXEC SQL
							SELECT	FCM_LOT_SZ
							INTO 		:l_lot_sz
							FROM 		FCM_FO_CNTRCT_MSTR
					**	WHERE		FCM_XCHNG_CD	=	'NFO'			***	Ver	1.8 ***
        			WHERE   FCM_XCHNG_CD  = :c_xchng_cd			***	Ver	2.1	***
							AND			FCM_UNDRLYNG=:c_stck_cd
							AND 		FCM_PRDCT_TYP = 'F'
							AND		 	ROWNUM < 2;

						if ( SQLCODE != 0 && SQLCODE !=NO_DATA_FOUND )
						{
							fn_errlog( c_ServiceName, "S31095", SQLMSG, ptr_st_err_msg->c_err_msg  );
							Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
							tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
						}
						if(SQLCODE == NO_DATA_FOUND)
						{
								l_lot_sz=0;
						}

						fn_userlog(c_ServiceName,"Lot Size:%ld:",l_lot_sz);
						**Ver 1.5 ends ** Ver 2.4 Comment Ends ***/

					 if (DEBUG_MSG_LVL_3)       /*** Ver1.3 ***/
  				 {
						fn_userlog(c_ServiceName,"Lot Size:%ld:",l_lot_size[i]);     /*** Ver 2.4 ***/
	         }
							i_returncode = fn_pack_vartofml( c_ServiceName,
																								 c_err_msg,
																								 &ptr_fml_Obuf,
																								 8,/**Ver 1.5 changed from 5 to 6 ***** Ver 4.1 changes 7 to 8 ***/ 
																				FFO_PLG_QTY,( char * )&l_plg_clnt_conc[i],
																				FFO_HAIRCUT,( char * )&l_plg_haircut[i],
																				FFO_UNDRLYNG, ( char * )c_undrlyng[i],
																				FFO_STCK_CD, ( char * )c_undrlyng_nm[i],  /** Ver 2.0 **/
																				FFO_MIN_LOT_QTY, (char*)&l_min_qty[i],
																				FFO_SALE_MRGN,( char * )&l_shrtfll_mrgn,
																			/***	FFO_BOARD_LOT_QTY, (char *) &l_lot_sz);	**Ver 1.5 **Commented in Ver 2.4 ***/
																				FFO_BOARD_LOT_QTY, (char *) &l_lot_size[i],   /*** Ver 2.4 ***/
                                        FFO_NEW_EFF_RT,(char *) &d_plg_prcntg[i]);   /*** Ver 4.1 ***/ 

								if( i_returncode == -1 )
								{
									fn_errlog( c_ServiceName, "S31100", LIBMSG, c_err_msg );
									tpfree ( ( char * ) ptr_fml_Obuf );
									Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
									EXEC SQL CLOSE get_col_undrlyng;																		
									tpfree ( ( char * ) ptr_st_err_msg );
									tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
								}
					}	
					
					if(c_fetch_flag == 'Y')
					{
						fn_userlog(c_ServiceName,"The last record has been processed");
						EXEC SQL CLOSE get_col_undrlyng;
						break;
					}

			} /** WHILE FETCH LOOP ***/


			EXEC SQL CLOSE get_col_undrlyng;

	}

	  /************** Ver 2.1 started ****************/
  else if ( c_prdct_typ == 'X' || c_prdct_typ == 'Y' )
  {
    EXEC SQL
      DECLARE get_undrlyng_for_spn CURSOR FOR
      SELECT FMM_UNDRLYNG,
						 STK.STK_STCK_NM,   
             NVL(FMM_SPAN_VAL,0),
             NVL(FMM_EXPSR,0),
             NVL(FMM_SPN_MULTPLR,0),
             NVL(FMM_MIN_EXPSR,0),
						 NVL(LOT_SIZE.LOT_SZ,0),      /*** Ver 2.4 ***/
             NVL(FUM_SLTP_TRAIL_FLG,'N'),    /** Ver 4.0 **/
             NVL(FUM_TRAIL_AMT,0)*100,           /** Ver 4.0 **/
             NVL(FMM_SLTP_UPD_CND,0)*100,         /** Ver 4.0 **/
						 NVL(FUM_FREEZE_QTY,0),			/*** Ver 4.7 ***/
						 NVL(FUM_CLNT_OPN_INTRST,0),							/*** Ver 4.7 ***/
      /**    NVL(FUM_SETLMNT_FLG,'C')            ** Ver 4.2 **	** Commented in Ver 4.3 ***/
						 NVL(FUM_ROLLOVER_SPRD_ALLWD_FLG,'N'),  /** Ver 4.5 **/
             NVL(FUM_GTT_ALLWD_FLG, 'N')  /** Ver 5.3 **/
			/** FROM   FMM_FO_MRGN_MSTR, STK_STK_MSTR STK    ** Commented in Ver 2.4 **/
     /*** FROM   FMM_FO_MRGN_MSTR, STK_STK_MSTR STK, (select  FCM_UNDRLYNG,min(FCM_LOT_SZ) LOT_SZ FROM FCM_FO_CNTRCT_MSTR WHE
RE FCM_XCHNG_CD=:c_xchng_cd group by FCM_UNDRLYNG ) LOT_SIZE   *** Ver 2.4 ***  commented in Ver 3.0 ***/
      FROM   FMM_FO_MRGN_MSTR, STK_STK_MSTR STK, (select FTQ_UNDRLYNG, min(FTQ_MIN_LOT_QTY) LOT_SZ FROM FTQ_FO_TRD_QT
             where FTQ_XCHNG_CD = :c_xchng_cd group by FTQ_UNDRLYNG ) LOT_SIZE /*** Ver 3.0 ***/,
             FUM_FO_UNDRLYNG_MSTR   /*** Ver 4.0 FMM Added ***/ 
      WHERE  FMM_PRDCT_TYP LIKE DECODE(:c_prdct_typ,'X','F','O')
			AND		 FMM_XCHNG_CD = :c_xchng_cd								/*** Ver 2.2 ****/
    /***  AND    FMM_UNDRLYNG  = LOT_SIZE.FCM_UNDRLYNG(+)     *** Ver 2.4 *** commented in Ver 3.0 ***/
    /***  AND    FMM_UNDRLYNG  = LOT_SIZE.FTQ_UNDRLYNG(+) *** Ver 3.0 ***	Commented in Ver 4.4 ***/
			AND    FMM_UNDRLYNG  = LOT_SIZE.FTQ_UNDRLYNG		/*** Added in Ver 4.4 ***/
			AND    FMM_UNDRLYNG  =  STK.STK_STCK_CD
      AND    FUM_UNDRLYNG  = STK.STK_STCK_CD   /*** Ver 4.0 ***/   
      AND    FUM_PRDCT_TYP = FMM_PRDCT_TYP     /*** Ver 4.0 ***/
      AND    FMM_XCHNG_CD  = FUM_XCHNG_CD      /*** Ver 4.0 ***/
			AND    FUM_QT_TRDNG_FLG  in ('T','Q')    /*** Added in Ver 4.4 ***/
      AND    FMM_UNDRLYNG_BSKT_ID = :l_basket_id
      ORDER BY FMM_UNDRLYNG;

      EXEC SQL OPEN get_undrlyng_for_spn;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31105", SQLMSG, ptr_st_err_msg->c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      ptr_fml_Obuf = NULL;

      while (1)
      {
          EXEC SQL
            FETCH get_undrlyng_for_spn
            INTO  :c_stck_cd,
									:c_stck_nm,
                  :d_span_val,
                  :d_span_expsr,
                  :d_span_mltplr,
                  :d_span_min_expsr,
									:l_lot_sz, 
                  :c_fum_sltp_trail_flg,    /** Ver 4.0 **/
                  :l_fum_trail_amt,         /** Ver 4.0 **/
                  :l_fmm_sltp_upd_cnd,      /** Ver 4.0 **/
								  :l_fum_freeze_qty,				/*** Ver 4.7 ***/
								  :d_fum_clnt_oi,							  /*** Ver 4.7 ***/
   /***           :c_setlemnt_flg_tmp;       ** Ver 4.2 **	** Commentred in Ver 4.3 ***/
									:c_rollover_sprd_allwd_flg, /** Ver 4.5 **/
									:c_gtt_allwd_flg; /** Ver 5.3 **/

          if(DEBUG_MSG_LVL_3)
          {
              fn_userlog(c_ServiceName,"stock code is     :%s",c_stck_cd);
							fn_userlog( c_ServiceName, "c_stck_nm      :%s:",c_stck_nm);     
              fn_userlog(c_ServiceName,"span value is:    :%lf",d_span_val);
              fn_userlog(c_ServiceName,"span exposer is   :%lf",d_span_expsr);
              fn_userlog(c_ServiceName,"span multiplier is:%lf",d_span_mltplr);
              fn_userlog(c_ServiceName,"span min expo is  :%lf",d_span_min_expsr);
          }

          if ( SQLCODE != 0 )
          {
            if ( SQLCODE == NO_DATA_FOUND )
            {
              break;
            }
            fn_errlog( c_ServiceName, "S31110", SQLMSG, ptr_st_err_msg->c_err_msg  );

            EXEC SQL
              CLOSE get_undrlyng_for_spn;

            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
			/**** Commented in Ver 2.4
        EXEC SQL
          SELECT  FCM_LOT_SZ
          INTO    :l_lot_sz
          FROM    FCM_FO_CNTRCT_MSTR
        *WHERE   FCM_XCHNG_CD  = 'NFO' Commented In Ver 2.2	***
					WHERE FCM_XCHNG_CD    = :c_xchng_cd			***	Ver	2.2	***
          AND     FCM_UNDRLYNG  = :c_stck_cd
          AND     ROWNUM < 2;

        if ( SQLCODE != 0 && SQLCODE !=NO_DATA_FOUND )
        {
          fn_errlog( c_ServiceName, "S31115", SQLMSG, ptr_st_err_msg->c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
			****Ver 2.4 Ends ***/

        if (DEBUG_MSG_LVL_3)
        {
          fn_userlog(c_ServiceName,"Lot Size:%d:",l_lot_sz);
        }

				/*** Commented in Ver 4.3 ***
        *** Ver 4.2 Starts ***

          if ( c_setlemnt_flg_tmp == 'P' )
          {
            c_setlemnt_flg = 'Y';
          }
          else
          {
            c_setlemnt_flg = 'N';
          }

          *** Ver 4.2 Ends ***
					*** Ver 4.3 ***/

        i_returncode = fn_pack_vartofml( c_ServiceName,
                                         c_err_msg,
                                         &ptr_fml_Obuf,
                                         14,   /*** Ver 4.0 ... increased from 7 to 10 ***/ /** Ver 4.2 increased from 10 to 11*/	/** Ver 4.3 decreased from 11 to 10 **/ /*** 10 to 12 in Ver 4.7 ***/		/** Ver 4.5 Changed from 12 to 13 ***//** Ver 5.3 changed from 13 to 14*/
                                    FFO_UNDRLYNG, ( char * )c_stck_cd,
																		FFO_STCK_CD, ( char * )c_stck_nm,                    /** Stock Name **/
                                    FFO_INIT_MRGN_PRCNT, ( char * )&d_span_val,          /** Span value **/
                                    FFO_SPREAD_MRGN, ( char * )&d_span_expsr,           /**  Exposer **/
                                    FFO_MIN_MRGN_PRCNT, (char * )&d_span_min_expsr,     /** Span min Exposer **/
                                    FFO_BOARD_LOT_QTY, ( char *) &l_lot_sz,
                                    FFO_INTRST_RT,  (char *) &d_span_mltplr,       /** span multiplier **/
                                    FFO_PRC_INDCTR, (char *) &c_fum_sltp_trail_flg,     /** Ver 4.0 **/
                                    FFO_INTERVAL, (char *) &l_fum_trail_amt,            /** Ver 4.0 **/
                                    FFO_NET_TRD_VAL, (char *) &l_fmm_sltp_upd_cnd,     /** Ver 4.0 **/
																	  FFO_ASSIGN_QTY , (char *) &l_fum_freeze_qty,			 /*** Ver 4.7 ***/
																	  FFO_OI_HIGH, (char *) &d_fum_clnt_oi,									/*** Ver 4.7 ***/

    /***                            FFO_BK_UBK_FLG, (char *) &c_setlemnt_flg);          * Ver 4.2 ** ** Commented in Ver 4.3 ***/
																		FFO_SPL_FLG, (char *) &c_rollover_sprd_allwd_flg, /** Ver 4.5 **/
																		FFO_EX_ORDR_TYP,(char *)&c_gtt_allwd_flg);          /** Ver 5.3 **/
        if( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31120", LIBMSG, c_err_msg );
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }
    }
      EXEC SQL
        CLOSE get_undrlyng_for_spn;
  }
  /****************** Ver 2.1 ended *****************/

  /*** Ver 2.5 starts here ***/
  else if ( c_prdct_typ == 'U' )
  {
    EXEC SQL
      DECLARE get_undrlyng_for_sltpfp CURSOR FOR
      SELECT  FMM_UNDRLYNG,
              STK.STK_STCK_NM,
							FMM.FMM_XCHNG_CD,													/*** Ver 2.7 ***/
              NVL(FMM_SLTP_PRCNT,0),
              NVL(FMM_SLTP_DIFF_PRCNT,0),
							NVL(FMM_SLTP_SEBI_PRCNT,0),              /*** Ver 4.8 ***/
							NVL(LOT_SIZE.LOT_SZ,0),
              NVL(FUM.FUM_SLTPFP_LMT_ALLWD_FLG,'N'),          /**** Ver 3.5 ***/
							NVL(FUM_PRFT_ALLWD_FLG,'N'),															/*** ver 5.2 ***/
							NVL(FMM_SLTP_PRFT_DIFF_PRCNT,0)								/*** ver 5.2 ***/
   /***   FROM    FUM_FO_UNDRLYNG_MSTR FUM, FMM_FO_MRGN_MSTR FMM, STK_STK_MSTR STK,(select  FCM_UNDRLYNG,min(FCM_LOT_SZ) LOT_
SZ FROM FCM_FO_CNTRCT_MSTR WHERE FCM_XCHNG_CD=:c_xchng_cd  AND FCM_PRDCT_TYP = 'F' group by FCM_UNDRLYNG ) LOT_SIZE
   *** Commented in Ver 3.0 ***/
    FROM    FUM_FO_UNDRLYNG_MSTR FUM, FMM_FO_MRGN_MSTR FMM, STK_STK_MSTR STK,(select FTQ_UNDRLYNG,
            min(FTQ_MIN_LOT_QTY) LOT_SZ FROM FTQ_FO_TRD_QT WHERE FTQ_XCHNG_CD = :c_xchng_cd and FTQ_PRDCT_TYP = 'F'
            group by FTQ_UNDRLYNG ) LOT_SIZE   /*** Ver 3.0 ***/
      WHERE   FUM.FUM_XCHNG_CD      = :c_xchng_cd
      AND     FUM.FUM_UNDRLYNG = FMM.FMM_UNDRLYNG
      AND     FUM.FUM_XCHNG_CD = FMM.FMM_XCHNG_CD
      AND     FUM.FUM_UNDRLYNG = STK.STK_STCK_CD
    /***  AND     FUM.FUM_UNDRLYNG = LOT_SIZE.FCM_UNDRLYNG(+) *** Commented in Ver 3.0 ***/
    /***  AND     FUM.FUM_UNDRLYNG = LOT_SIZE.FTQ_UNDRLYNG(+)  *** Ver 3.0 ***	Commented in Ver 4.4 ***/
		AND     FUM.FUM_UNDRLYNG = LOT_SIZE.FTQ_UNDRLYNG		/*** Added in Ver 4.4 ***/
    /***  AND     FUM.FUM_QT_TRDNG_FLG  = 'T'		*** Commented in Ver 4.4 ***/
			AND			FUM.FUM_QT_TRDNG_FLG in ('T','Q')    /*** Added in Ver 4.4 ***/
		/***	AND     FUM.FUM_FP_TRDNG_FLG = 'T'		*** Commented in Ver 4.4 ***/
			AND     FUM.FUM_FP_TRDNG_FLG in ('T','Q')    /*** Added in Ver 4.4 ***/
		/***  AND     FUM.FUM_SLTP_FP_TRDNG_FLG = 'T'		*** Commented in Ver 4.4 ***/
			AND     FUM.FUM_SLTP_FP_TRDNG_FLG in ('T','Q')    /*** Added in Ver 4.4 ***/
      AND     FUM.FUM_PRDCT_TYP = 'F'
      AND     FMM.FMM_PRDCT_TYP = 'F'
      AND     FMM.FMM_UNDRLYNG_BSKT_ID = :l_basket_id
      AND     trim(FUM.FUM_UNDRLYNG) like :c_stck_cd
      ORDER BY  FUM.FUM_UNDRLYNG;

      EXEC SQL OPEN get_undrlyng_for_sltpfp;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31125", SQLMSG, ptr_st_err_msg->c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      ptr_fml_Obuf = NULL;

      while (1)
      {
          EXEC SQL
            FETCH get_undrlyng_for_sltpfp
            INTO  :c_stck_cd,
                  :c_stck_nm,
									:c_xchng_cd,													/*** Ver 2.7 ***/								
                  :d_spltp_per,
                  :d_spltp_diff_per,
						      :d_sebi_per,               /*** 4.8 ***/
									:l_lot_sz,
                  :c_sltp_lmt_allwd_flg,     /***** Ver 3.5 *****/     
									:c_prft_allwd_flg,				 /*** ver 5.2 ***/
									:d_sltp_prft_diff_prcnt;	 /*** ver 5.2 ***/	


          if(DEBUG_MSG_LVL_3)
          {
              fn_userlog(c_ServiceName,"stock code is     :%s",c_stck_cd);
              fn_userlog( c_ServiceName, "c_stck_nm      :%s:",c_stck_nm);
							fn_userlog( c_ServiceName,"Exchange Code 		:%s:",c_xchng_cd);							/*** Ver 2.7 ***/
              fn_userlog(c_ServiceName,"SLTP Percent is:    :%lf",d_spltp_per);
              fn_userlog(c_ServiceName,"SLTP diff Percent is   :%lf",d_spltp_diff_per);
							fn_userlog(c_ServiceName,"FPSL SEBI Percent is   :%lf",d_sebi_per);		/*** Ver 4.8 ***/
							fn_userlog(c_ServiceName,"Lot Size:%d:",l_lot_sz);
              fn_userlog(c_ServiceName,"Limit allowed flag :%c",c_sltp_lmt_allwd_flg);
							fn_userlog(c_ServiceName,"Profit order allowed flag is c_prft_allwd_flg :%c:",c_prft_allwd_flg);
              fn_userlog(c_ServiceName,"sltp-profit sebi percentage difference is d_sltp_prft_diff_prcnt :%lf:",d_sltp_prft_diff_prcnt);
          }

          if ( SQLCODE != 0 )
          {
            if ( SQLCODE == NO_DATA_FOUND )
            {
              break;
            }
            fn_errlog( c_ServiceName, "S31130", SQLMSG, ptr_st_err_msg->c_err_msg  );

            EXEC SQL
              CLOSE get_undrlyng_for_sltpfp;

            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

        i_returncode = fn_pack_vartofml( c_ServiceName,
                                         c_err_msg,
                                         &ptr_fml_Obuf,
                                         10,															/*** increased to 6 from 5 ** Ver 2.7 ***/  /** Increased 6 to 7 in Ver 3.5 **/ /*** 7 to 8 in Ver 4.8 ***/	/*** Increased from 8 to 110 in ver 5.2 ****/ 	
                                    FFO_UNDRLYNG, ( char * )c_stck_cd,
                                    FFO_STCK_CD, ( char * )c_stck_nm,                    /** Stock Name **/
																		FFO_XCHNG_CD, ( char * )c_xchng_cd,								/*** Ver 2.7 ***/
                                    FFO_INIT_MRGN_PRCNT, ( char * )&d_spltp_per,         /** SLTP% **/
                                    FFO_SOMC_PRCNT, ( char * )&d_spltp_diff_per,         /**  SLTP Diff % **/
																		FFO_AVM_PRCNT, ( char * )&d_sebi_per,									/*** Ver 4.8 ***/
                                    FFO_BOARD_LOT_QTY, ( char *) &l_lot_sz,
                                    FFO_DLVRY_ALLWD,  ( char *)&c_sltp_lmt_allwd_flg,			 /** ver 3.5 **/	
																		FFO_LMT_MKT_SL_FLG, (char*)&c_prft_allwd_flg,					 /** ver 5.2 **/
																		FFO_CSHSTTL_FRCTN, (char*)&d_sltp_prft_diff_prcnt)  ;  /** Ver 5.2 **/

        if( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31135", LIBMSG, c_err_msg );
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }
    }
      EXEC SQL
        CLOSE get_undrlyng_for_sltpfp;
  }
  /*** Ver 2.5 ends here ***/

	/*** Ver 2.6 starts here ***/
  else if ( ( c_prdct_typ == 'I' && strcmp( c_stck_cd , "%" ) == 0 ) || c_prdct_typ == 'M' ) /*** Ver 3.4 Product Type M Introduce ***/
  {
    EXEC SQL
      DECLARE get_undrlyng_for_opls CURSOR FOR
      SELECT  FMM_UNDRLYNG,
              STK.STK_STCK_NM,
              NVL(FMM_SLTP_PRCNT,0),
              NVL(FMM_SLTP_DIFF_PRCNT,0),
              NVL(LOT_SIZE.LOT_SZ,0),
              NVL(FUM.FUM_SLTPFP_LMT_ALLWD_FLG,'N'), /**** Ver 3.6 ****/
              NVL(FMM_OPLUS_FLAT_RT,0.0)*100, /*** ver 5.1 ***/
              NVL(FMM_OPLUS_SEBI_PRCNT_B,0.0),/*** ver 5.1 ***/
              NVL(FMM_OPLUS_SEBI_PRCNT_S,0.0)/*** ver 5.1 ***/
     /*** Commented in Ver 3.0 *** FROM    FUM_FO_UNDRLYNG_MSTR FUM, FMM_FO_MRGN_MSTR FMM, STK_STK_MSTR STK,(select  FCM_UNDR
LYNG,min(FCM_LOT_SZ) LOT_SZ FROM FCM_FO_CNTRCT_MSTR WHERE FCM_XCHNG_CD=:c_xchng_cd  AND FCM_PRDCT_TYP ='F' group by FCM_UNDRL
YNG ) LOT_SIZE  ***/
      FROM    FUM_FO_UNDRLYNG_MSTR FUM, FMM_FO_MRGN_MSTR FMM, STK_STK_MSTR STK,(select FTQ_UNDRLYNG,
              min(FTQ_MIN_LOT_QTY) LOT_SZ FROM FTQ_FO_TRD_QT WHERE FTQ_XCHNG_CD=:c_xchng_cd AND FTQ_PRDCT_TYP ='F'
              group by FTQ_UNDRLYNG ) LOT_SIZE   /*** Ver 3.0 ***/
      WHERE   FUM.FUM_XCHNG_CD      = :c_xchng_cd
      AND     FUM.FUM_UNDRLYNG = FMM.FMM_UNDRLYNG
      AND     FUM.FUM_XCHNG_CD = FMM.FMM_XCHNG_CD
      AND     FUM.FUM_UNDRLYNG = STK.STK_STCK_CD
    /***  AND     FUM.FUM_UNDRLYNG = LOT_SIZE.FCM_UNDRLYNG(+) *** Commented in Ver 3.0 ***/
    /***  AND     FUM.FUM_UNDRLYNG = LOT_SIZE.FTQ_UNDRLYNG(+)     *** Ver 3.0 ***	Commented in Ver 4.4 ***/
		AND     FUM.FUM_UNDRLYNG = LOT_SIZE.FTQ_UNDRLYNG		/*** Added in Ver 4.4 ***/
    /***  AND     FUM.FUM_QT_TRDNG_FLG  = 'T'		*** Commented in Ver 4.4 ***/
			AND     FUM.FUM_QT_TRDNG_FLG in ('T','Q')    /*** Added in Ver 4.4 ***/
    /***  AND     FUM.FUM_SLTP_FP_TRDNG_FLG = 'T'		*** Commented in Ver 4.4 ***/
			AND     FUM.FUM_SLTP_FP_TRDNG_FLG in ('T','Q')    /*** Added in Ver 4.4 ***/
      AND     FUM.FUM_PRDCT_TYP = 'O'
      AND     FMM.FMM_PRDCT_TYP = 'O'
      AND     FMM.FMM_UNDRLYNG_BSKT_ID = :l_basket_id
      AND     trim(FUM.FUM_UNDRLYNG) like :c_stck_cd
      ORDER BY  FUM.FUM_UNDRLYNG;

      EXEC SQL OPEN get_undrlyng_for_opls;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31140", SQLMSG, ptr_st_err_msg->c_err_msg  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      ptr_fml_Obuf = NULL;

      while (1)
      {
          EXEC SQL
            FETCH get_undrlyng_for_opls
            INTO  :c_stck_cd,
                  :c_stck_nm,
                  :d_spltp_per,
                  :d_spltp_diff_per,
                  :l_lot_sz,
                  :c_sltp_lmt_allwd_flg,     /***** Ver 3.6 *****/
                  :d_oplus_flt_rate, /*** ver 5.1 ***/
                  :d_sebi_b_prcnt,  /*** ver 5.1 ***/
                  :d_sebi_s_prcnt;  /*** ver 5.1 ***/

          if(DEBUG_MSG_LVL_3)
          {
              fn_userlog(c_ServiceName,"stock code is     :%s",c_stck_cd);
              fn_userlog( c_ServiceName, "c_stck_nm      :%s:",c_stck_nm);
              fn_userlog(c_ServiceName,"SLTP Percent is:    :%lf",d_spltp_per);
              fn_userlog(c_ServiceName,"SLTP diff Percent is   :%lf",d_spltp_diff_per);
              fn_userlog(c_ServiceName,"Lot Size:%d:",l_lot_sz);
          }

      fn_userlog(c_ServiceName,"SUCHITA :%lf: :%lf: :%lf:",d_oplus_flt_rate,d_sebi_b_prcnt,d_sebi_s_prcnt); /*** ver 5.1 ***/
          if ( SQLCODE != 0 )
          {
            if ( SQLCODE == NO_DATA_FOUND )
            {
              break;
            }
            fn_errlog( c_ServiceName, "S31145", SQLMSG, ptr_st_err_msg->c_err_msg  );

            EXEC SQL
              CLOSE get_undrlyng_for_opls;

            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
  
         i_returncode = fn_pack_vartofml( c_ServiceName,
                                         c_err_msg,
                                         &ptr_fml_Obuf,
                                        10,  /*** increase 6 to 7 in Ver 3.6 ***//* 7 to10 ver 5.1*/
                                    FFO_UNDRLYNG, ( char * )c_stck_cd,
                                    FFO_STCK_CD, ( char * )c_stck_nm,                    /** Stock Name **/
																		FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                    FFO_INIT_MRGN_PRCNT, ( char * )&d_spltp_per,         /** SLTP% **/
                                    FFO_SOMC_PRCNT, ( char * )&d_spltp_diff_per,         /**  SLTP Diff % **/
                                    FFO_BOARD_LOT_QTY, ( char *) &l_lot_sz,
                                    FFO_DLVRY_ALLWD,  ( char *)&c_sltp_lmt_allwd_flg,  /** Ver 3.6 **/
                 FFO_C_UND_OPN_VAL ,(char *)&d_oplus_flt_rate, /** ver 5.1 **/
                  FFO_UI_BUY_MRGN,(char *)&d_sebi_b_prcnt,/** ver 5.1 **/
                 FFO_UI_SELL_MRGN ,(char *)&d_sebi_s_prcnt);/** ver 5.1 **/


         if( i_returncode == -1 )
         {
           fn_errlog( c_ServiceName, "S31150", LIBMSG, c_err_msg );
           tpfree ( ( char * ) ptr_fml_Obuf );
           Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
           tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
         }
				
    	}
    	EXEC SQL
      	CLOSE get_undrlyng_for_opls;
  }
	else if ( c_prdct_typ == 'I' && strcmp( c_stck_cd , "%" ) != 0 )
	{

		
		 EXEC SQL
          DECLARE get_rng_for_opls CURSOR FOR
          SELECT FRM_ORDR_FLOW,
                 FRM_FROM_RANGE,
                 FRM_TO_RANGE,
                 NVL( FRM_DIFFRNC_MRGN, 0),
                 NVL( FRM_MINIMUM_SLTP, 0)
          FROM   FRM_FO_RANGE_MSTR
          WHERE  FRM_XCHNG_CD     =:c_xchng_cd
          AND    FRM_UNDRLYNG     =:c_stck_cd Order By FRM_ORDR_FLOW,FRM_FROM_RANGE asc; /** Ver 3.8 order by added **/

        EXEC SQL OPEN get_rng_for_opls;

        if ( SQLCODE != 0 )
        {
          fn_errlog( c_ServiceName, "S31155", SQLMSG, ptr_st_err_msg->c_err_msg  );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
				
				ptr_fml_Obuf = NULL;

        while (1)
        {

          EXEC SQL
            FETCH get_rng_for_opls
            INTO :c_ordr_flw,
                 :l_frm_rng,
                 :l_to_rng,
                 :d_diff_mrgn,
                 :d_min_sltp;

          if(DEBUG_MSG_LVL_3)
          {
							fn_userlog(c_ServiceName, "stock code is     :%s" ,c_stck_cd);
              fn_userlog(c_ServiceName, "Order flow is     :%c" ,c_ordr_flw);
              fn_userlog(c_ServiceName, "From range is     :%ld",l_frm_rng);
              fn_userlog(c_ServiceName, "To range is:      :%ld",l_to_rng);
              fn_userlog(c_ServiceName, "Diff margin is    :%lf",d_diff_mrgn);
              fn_userlog(c_ServiceName, "Min sltp is       :%lf",d_min_sltp);
          }

					/*****
          if ( SQLCODE != 0 )
          {
						fn_errlog( c_ServiceName, "S31160", SQLMSG, ptr_st_err_msg->c_err_msg  );

            if ( SQLCODE == NO_DATA_FOUND )
          	{
							if (i_count == 1)
							{
            		fn_errlog( c_ServiceName, "S31165", "No Data Found", ptr_st_err_msg->c_err_msg  );
            		strcpy( ptr_st_err_msg->c_err_msg,"No Data Found" );
							}
							else
							{
								break;
							}
          	}

            EXEC SQL
              CLOSE get_rng_for_opls;

            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }

					***********************/

					if ( SQLCODE != 0 )
					{
            if ( SQLCODE == NO_DATA_FOUND )
          	{
							if (i_count == 1)
							{
            		fn_errlog( c_ServiceName, "S31170", "No Data Found", ptr_st_err_msg->c_err_msg  );
            		strcpy( ptr_st_err_msg->c_err_msg,"No Data Found" );
							}
							else
							{
								break;
							}
          	}

            fn_errlog( c_ServiceName, "S31175", SQLMSG, ptr_st_err_msg->c_err_msg  );
		
						EXEC SQL
              CLOSE get_rng_for_opls;

            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
          }
						
					if( c_ordr_flw == 'B' )
					{
            i_returncode = fn_pack_vartofml( c_ServiceName,
                                         c_err_msg,
                                         &ptr_fml_Obuf,
                                         4,
           	  		                       FFO_ORDR_FLW, ( char * )&c_ordr_flw,
            	    	                    FFO_LOW_PRC_RNG, ( char * )&l_frm_rng,
                    		                FFO_HGH_PRC_RNG, ( char * )&l_to_rng,
                        		            FFO_THRS_VAR_PRCNT, ( char * )&d_diff_mrgn);

          	if( i_returncode == -1 )
          	{
            	fn_errlog( c_ServiceName, "S31180", LIBMSG, c_err_msg );
            	tpfree ( ( char * ) ptr_fml_Obuf );
            	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            	tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
          	}
					}
					else if( c_ordr_flw == 'S' )
					{
						i_returncode = fn_pack_vartofml( c_ServiceName,
                                         c_err_msg,
                                         &ptr_fml_Obuf,
                                         5,
                                         FFO_ORDR_FLW, ( char * )&c_ordr_flw,
                                        FFO_LOW_INDX_VAL, ( char * )&l_frm_rng,
                                        FFO_HGH_INDX_VAL, ( char * )&l_to_rng,
                                        FFO_UE_SELL_MRGN, ( char * )&d_diff_mrgn,
                                        FFO_BASE_ORD_VAL, ( char *) &d_min_sltp);

            if( i_returncode == -1 )
            {
              fn_errlog( c_ServiceName, "S31185", LIBMSG, c_err_msg );
              tpfree ( ( char * ) ptr_fml_Obuf );
              Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
              tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
            }
					}
					i_count++;
         }

				 d_cutoff_prm = 0.0 ;

				 EXEC SQL
          SELECT DISTINCT(NVL(FRM_CUTOFF_PREMIUM,0))
          INTO   :d_cutoff_prm
          FROM   FRM_FO_RANGE_MSTR
          WHERE  FRM_XCHNG_CD     =:c_xchng_cd
          AND    FRM_UNDRLYNG     =:c_stck_cd
					AND    FRM_CUTOFF_PREMIUM IS NOT NULL;

         if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
         {
            fn_errlog( c_ServiceName, "S31190", SQLMSG, ptr_st_err_msg->c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
            EXEC SQL
            CLOSE get_rng_for_opls;
            tpfree ( ( char * ) ptr_fml_Obuf );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }

				 if(DEBUG_MSG_LVL_3)
          {
              fn_userlog(c_ServiceName, "Cut-off premimum is :%lf",d_cutoff_prm);
          }

         if ( Fadd32( ptr_fml_Obuf, FFO_EFF_LMT_RT, ( char *)&d_cutoff_prm, 0 ) == -1 )
         {
            fn_errlog( c_ServiceName, "S31195", FMLMSG, c_err_msg );
            tpfree ( ( char * ) ptr_fml_Obuf );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            EXEC SQL
            CLOSE get_rng_for_opls;
            tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
         } 	

         EXEC SQL
          CLOSE get_rng_for_opls;

				 /*** Ver 4.9 starts ***/
         EXEC SQL
         SELECT NVL(FUM_SLTPFP_LMT_ALLWD_FLG,'N')
         INTO  :c_sltp_lmt_allwd_flg
         FROM  FUM_FO_UNDRLYNG_MSTR
         WHERE FUM_XCHNG_CD    = :c_xchng_cd
         AND   FUM_UNDRLYNG    = :c_stck_cd
         AND   FUM_PRDCT_TYP   = 'O';

         if ( SQLCODE != 0 )
         {
            fn_errlog( c_ServiceName, "S31200", SQLMSG, c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpfree ( ( char * ) ptr_fml_Obuf );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }

	       EXEC SQL
		     select	min(FTQ_MIN_LOT_QTY) 
	       INTO	:l_lot_sz
	       FROM	FTQ_FO_TRD_QT 
	       WHERE	FTQ_XCHNG_CD= :c_xchng_cd 
	       AND	FTQ_UNDRLYNG = :c_stck_cd 
	       AND	FTQ_PRDCT_TYP ='O';

   		   if ( SQLCODE != 0 )
         {
            fn_errlog( c_ServiceName, "S31205", SQLMSG, c_err_msg  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpfree ( ( char * ) ptr_fml_Obuf );
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
         }

				 fn_userlog(c_ServiceName, "Limit allowed flag:%c: LotSize=:%ld:",c_sltp_lmt_allwd_flg,l_lot_sz);

	       if ( Fadd32( ptr_fml_Obuf, FFO_BOARD_LOT_QTY, ( char *)&l_lot_sz, 0 ) == -1 )
         {
            fn_errlog( c_ServiceName, "S31210", FMLMSG, c_err_msg );
            tpfree ( ( char * ) ptr_fml_Obuf );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
         }

         if ( Fadd32( ptr_fml_Obuf, FFO_DLVRY_ALLWD, ( char *)&c_sltp_lmt_allwd_flg, 0 ) == -1 )
         {
            fn_errlog( c_ServiceName, "S31215", FMLMSG, c_err_msg );
            tpfree ( ( char * ) ptr_fml_Obuf );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
            tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
         }

				 /*** Ver 4.9 ends ***/
	}
  /*** Ver 2.6 ends here ***/

  /** Ver 3.3 Starts **/
  else if( c_prdct_typ == 'E')
  {
    EXEC SQL
      DECLARE cur_fum_oi_vlm CURSOR FOR
      SELECT FUM_PRDCT_TYP,
             FUM_UNDRLYNG,
             STK_STCK_NM,
             NVL(FUM_OPEN_INTEREST,0),
             NVL(FUM_VOLUME,0)
      FROM   FUM_FO_UNDRLYNG_MSTR,
             STK_STK_MSTR,
						 (select FTQ_UNDRLYNG, min(FTQ_MIN_LOT_QTY) LOT_SZ FROM FTQ_FO_TRD_QT WHERE FTQ_XCHNG_CD = :c_xchng_cd AND FTQ_PRDCT_TYP = 'F' group by FTQ_UNDRLYNG) LOT_SIZE	/*** Added in Ver 4.4 ***/
      WHERE  FUM_UNDRLYNG = STK_STCK_CD
			AND		 FUM_UNDRLYNG = LOT_SIZE.FTQ_UNDRLYNG		/*** Added in Ver 4.4 ***/
    /***  AND    FUM_QT_TRDNG_FLG = 'T'		*** Commented in Ver 4.4 ***/
			AND    FUM_QT_TRDNG_FLG in ('T','Q')	/*** Added in Ver 4.4 ***/
      AND    FUM_XCHNG_CD     = :c_xchng_cd
      AND    FUM_UNDRLYNG LIKE :c_stck_cd
      ORDER BY FUM_UNDRLYNG;
     EXEC SQL OPEN cur_fum_oi_vlm;

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31220", SQLMSG, ptr_st_err_msg->c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    ptr_fml_Obuf = NULL;

    while(1)
    {
      c_prd_typ = '\0';
      d_fum_open_interest = 0.0;
      d_fum_volume = 0.0;

      MEMSET(c_stck_cd);
      MEMSET(c_stck_nm);


      EXEC SQL
        FETCH cur_fum_oi_vlm
        INTO  :c_prd_typ,
              :c_stck_cd,
              :c_stck_nm,
              :d_fum_open_interest,
              :d_fum_volume;
       if ( SQLCODE != 0 )
       {
         if ( SQLCODE == NO_DATA_FOUND )
         {
           break;
         }
         fn_errlog( c_ServiceName, "S31225", SQLMSG, ptr_st_err_msg->c_err_msg  );
         EXEC SQL CLOSE cur_fum_oi_vlm ;
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
         tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
       }
       rtrim(c_stck_cd);
       rtrim(c_stck_nm);

       i_returncode = fn_pack_vartofml( c_ServiceName,
                                        c_err_msg,
                                        &ptr_fml_Obuf,
                                        6,
                                        FFO_XCHNG_CD, ( char * )c_xchng_cd,
                                        FFO_PRDCT_TYP, (char *)&c_prd_typ,
                                        FFO_UNDRLYNG, ( char * )c_stck_cd,
                                        FFO_STCK_CD, ( char * )c_stck_nm,
                                        FFO_INIT_MRGN_PRCNT, ( char * )&d_fum_open_interest,
                                        FFO_MIN_MRGN_PRCNT, ( char * )&d_fum_volume
                                      );
   
          if( i_returncode == -1 )
       {
         fn_errlog( c_ServiceName, "S31230", LIBMSG, c_err_msg );
         tpfree ( ( char * ) ptr_fml_Obuf );
         Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
         tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }
    }
  }
  else if( c_prdct_typ == 'S')
  {

    EXEC SQL
    DECLARE cur_exp_mexp CURSOR FOR
    SELECT FMM_UNDRLYNG,
           STK_STCK_NM,
           FMM_PRDCT_TYP,
           NVL(FMM_EXPSR,0),
           NVL(FMM_MIN_EXPSR,0),
           NVL(FMM_DEEP_OTM_EXPSR,0),       /** ver 5.0 **/
           NVL(FMM_DEEP_OTM_MIN_EXPSR,0)    /** ver 5.0 **/
    FROM   FMM_FO_MRGN_MSTR,STK_STK_MSTR
    WHERE  FMM_UNDRLYNG = STK_STCK_CD
    AND    FMM_XCHNG_CD = :c_xchng_cd
    AND    FMM_UNDRLYNG LIKE :c_stck_cd
    AND    FMM_UNDRLYNG_BSKT_ID = '1'
    ORDER BY FMM_UNDRLYNG;

    EXEC SQL OPEN cur_exp_mexp;

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31235", SQLMSG, ptr_st_err_msg->c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    ptr_fml_Obuf = NULL;

    while (1)
    {
       EXEC SQL
         FETCH cur_exp_mexp
         INTO  :c_stck_cd,
               :c_stck_nm,
               :c_prd_typ,
               :d_span_expsr,
               :d_span_min_expsr,
               :d_spn_deep_otm_ini_expsr,  /** Ver 5.0 **/
               :d_spn_deep_otm_min_expsr;    /** Ver 5.0 **/

           if(DEBUG_MSG_LVL_3)
        {
           fn_userlog(c_ServiceName,"stock code is     :%s",c_stck_cd);
           fn_userlog( c_ServiceName, "c_stck_nm      :%s:",c_stck_nm);
           fn_userlog(c_ServiceName,"span exposer is   :%lf",d_span_expsr);
           fn_userlog(c_ServiceName,"span min expo is  :%lf",d_span_min_expsr);
           fn_userlog(c_ServiceName,"Deep OTM Expo is      :%lf",d_spn_deep_otm_ini_expsr);   /** Ver 5.0 **/
           fn_userlog(c_ServiceName,"Deep OTM Min Expo is  :%lf",d_spn_deep_otm_min_expsr);   /** Ver 5.0 **/
        }

        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
            break;
          }
          fn_errlog( c_ServiceName, "S31240", SQLMSG, ptr_st_err_msg->c_err_msg  );

          EXEC SQL
            CLOSE cur_exp_mexp;

          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        rtrim(c_stck_cd);
        rtrim(c_stck_nm);
      i_returncode = fn_pack_vartofml( c_ServiceName,
                                         c_err_msg,
                                         &ptr_fml_Obuf,
                                         7,    /** ver ver 5.0 chngd from 5 to 7 **/ 
                                         FFO_UNDRLYNG, ( char * )c_stck_cd,
                                         FFO_STCK_CD, ( char * )c_stck_nm,
                                         FFO_PRDCT_TYP, (char *)&c_prd_typ,
                                         FFO_SPREAD_MRGN, ( char * )&d_span_expsr,
                                         FFO_MIN_MRGN_PRCNT, (char * )&d_span_min_expsr,
                                         FFO_U_IMTM_TRD_MRGN , (char * )&d_spn_deep_otm_ini_expsr, /** ver 5.0 **/
                                         FFO_U_MM_TRD_MRGN, (char * )&d_spn_deep_otm_min_expsr);   /** ver 5.0 **/

        if( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31245", LIBMSG, c_err_msg );
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }

      }
  }
  /*** Ver 3.3 Ends **/	
	/*** Ver 4.6 Starts ***/
	else if( c_prdct_typ == 'T')
  {
		if (DEBUG_MSG_LVL_3)
		{
			fn_userlog( c_ServiceName,"Inside Spread Benifit details");
		}
    EXEC SQL
    DECLARE cur_sprd_bft_dtls CURSOR FOR
    SELECT FUM_UNDRLYNG,
           STK_STCK_NM,
           NVL(TO_CHAR(FUM_SPRD_CHNG_DT,'DD-Mon-YYYY'),'NA'),
           NVL(FUM_SPRD_ALLWD_FLG,'_')
    FROM   FUM_FO_UNDRLYNG_MSTR,STK_STK_MSTR
    WHERE  FUM_XCHNG_CD = :c_xchng_cd
    AND    FUM_PRDCT_TYP = 'F'
    AND    FUM_UNDRLYNG = STK_STCK_CD
		AND    FUM_UNDRLYNG in (SELECT DISTINCT(FTQ_UNDRLYNG) 
														FROM FTQ_FO_TRD_QT 
														WHERE FTQ_XCHNG_CD = :c_xchng_cd 
														AND FTQ_PRDCT_TYP = 'F')
    ORDER BY FUM_UNDRLYNG;

    EXEC SQL OPEN cur_sprd_bft_dtls;

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31250", SQLMSG, ptr_st_err_msg->c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
			EXEC SQL CLOSE cur_sprd_bft_dtls;
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    ptr_fml_Obuf = NULL;

    while (1)
    {
       EXEC SQL
         FETCH cur_sprd_bft_dtls
         INTO  :c_stck_cd,
               :c_stck_nm,
               :c_sprd_chg_dt,
               :c_sprd_allwd_flg;

        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
            break;
          }
          fn_errlog( c_ServiceName, "S31255", SQLMSG, ptr_st_err_msg->c_err_msg  );
          EXEC SQL
            CLOSE cur_sprd_bft_dtls;

          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

        rtrim(c_stck_cd);
        rtrim(c_stck_nm);
        rtrim(c_sprd_chg_dt);
				fn_userlog( c_ServiceName,"For Spread Benifit details");
      	i_returncode = fn_pack_vartofml( c_ServiceName,
                                         c_err_msg,
                                         &ptr_fml_Obuf,
                                         5,
                                         FFO_UNDRLYNG, ( char * )c_stck_cd,
                                         FFO_STCK_CD, ( char * )c_stck_nm,
                                         FFO_BK_CLS_END_DT, (char * )c_sprd_chg_dt,
                                         FFO_QT_TRDNG_FLG, (char * )&c_sprd_allwd_flg);

        if( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31260", LIBMSG, c_err_msg );
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
					EXEC SQL CLOSE cur_sprd_bft_dtls;
          tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }

      }
			EXEC SQL
  		CLOSE cur_sprd_bft_dtls;
  }
	/*** Ver 4.6 Ends ***/

  /*** ver 5.0 Starts ***/ 
  else if( c_prdct_typ == 'B') /** Call from TS for Extreme Loss Margin **/
  {
   if (DEBUG_MSG_LVL_3)
   {
    fn_userlog( c_ServiceName,"Inside call from TS for ELM");
   }

    EXEC SQL
    DECLARE cur_elm_dtls CURSOR FOR
    SELECT NVL(SEM_STCK_CD,''),
           NVL(rtrim(STK_STCK_NM),''),
           NVL(FEU_INTRUMENT,''),
           NVL(FEU_NRML_ELM_MRGN_PRCNT,0),
           NVL(FEU_ADDL_ELM_MRGN_PRCNT,0),
           NVL(FEU_TOTAL_ELM_MRGN_PRCNT,0)
    FROM   FEU_FO_ELM_UPLD,SEM_STCK_MAP,STK_STK_MSTR
    WHERE  rtrim(FEU_STCK_NM) = rtrim(SEM_MAP_VL)
    AND    STK_STCK_CD =  SEM_STCK_CD
    AND    FEU_ACTV_FLG = 'Y'
    AND    SEM_ENTTY = 3
    ORDER BY SEM_STCK_CD,FEU_INTRUMENT;

    EXEC SQL OPEN cur_elm_dtls;

    if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31265", SQLMSG, ptr_st_err_msg->c_err_msg  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
      EXEC SQL CLOSE cur_elm_dtls;
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }   
    ptr_fml_Obuf = NULL;
    
    while (1)
    { 
     
      EXEC SQL
         FETCH cur_elm_dtls
         INTO  :c_stck_cd,
               :c_stck_nm,
               :c_otm_oth,
               :d_nrml_elm_prcnt,
               :d_additnl_elm_mrgn_prcnt,
               :d_total_elm_mrgn_prcnt;

        if ( SQLCODE != 0 )
        {
          if ( SQLCODE == NO_DATA_FOUND )
          {
            break;
          }
          fn_errlog( c_ServiceName, "S31270", SQLMSG, ptr_st_err_msg->c_err_msg  );
          EXEC SQL
            CLOSE cur_elm_dtls;

          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, ptr_st_err_msg->c_err_msg, 0 );
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        } 
          
        rtrim(c_stck_cd);
        rtrim(c_stck_nm);

        if (DEBUG_MSG_LVL_3)
        {
         fn_userlog( c_ServiceName,"c_stck_cd is :%s:" ,c_stck_cd);
         fn_userlog( c_ServiceName,"c_stck_nm is :%s:" ,c_stck_nm);
         fn_userlog( c_ServiceName,"c_otm_oth is :%s:" ,c_otm_oth);
         fn_userlog( c_ServiceName,"d_nrml_elm_prcnt is :%lf:" ,d_nrml_elm_prcnt);
         fn_userlog( c_ServiceName,"d_additnl_elm_mrgn_prcnt is :%lf:" ,d_additnl_elm_mrgn_prcnt);
         fn_userlog( c_ServiceName,"d_total_elm_mrgn_prcnt is :%lf:" ,d_total_elm_mrgn_prcnt);
        }
        
        i_returncode = fn_pack_vartofml( c_ServiceName,
                                         c_err_msg,
                                         &ptr_fml_Obuf,
                                         6,
                                         FFO_UNDRLYNG,      ( char * )c_stck_cd,
                                         FFO_STCK_CD,       ( char * )c_stck_nm,
                                         FFO_PLEDGE_TYP ,   ( char * )c_otm_oth,
                                         FFO_PSTN_AMT_BLKD, ( char * )&d_nrml_elm_prcnt,
                                         FFO_ADDL_AMT_BLKD, ( char * )&d_additnl_elm_mrgn_prcnt,
                                         FFO_TOTAL_PL,      ( char * )&d_total_elm_mrgn_prcnt);

        if( i_returncode == -1 )
        {
          fn_errlog( c_ServiceName, "S31275", LIBMSG, c_err_msg );
          tpfree ( ( char * ) ptr_fml_Obuf );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
          EXEC SQL CLOSE cur_elm_dtls;
          tpreturn(TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
        }
   
   
    }    /** while ends **/
 
     EXEC SQL
     CLOSE cur_elm_dtls;
  }  
  /*** ver 5.0  Ends  ***/
   
	else
	{
		strcpy(c_err_msg , "Invalid Product Type Please Enter Valid Product Type.");
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,c_err_msg,0 );
		tpfree ( ( char * ) ptr_st_err_msg );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	
	/*** 1.2 ENDS ***/

	tpfree ( ( char * ) ptr_st_err_msg );

	tpreturn ( TPSUCCESS, SUCC_BFR, ( char * )ptr_fml_Obuf, 0, 0 );
}
