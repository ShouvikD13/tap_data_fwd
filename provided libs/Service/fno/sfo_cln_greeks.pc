/*  Program           : SFO_CLN_GREEKS                                        */
/*                                                                            */
/*  Input             : FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_RUN_NUM                                           */
/*                      FFO_RUN_MODE                                          */
/*                                                                            */
/*  Output            :                                                       */
/*                                                                            */
/*  Description       : This program fetches all open position if present     */
/*											along with the hedge positions  & pass  them to       */
/*                      'sfo_cal_greeks.pc' to calculate Greeks   .           */
/*                                                                            */
/*  Log               :                                                       */
/*                                                                            */
/******************************************************************************/
/*  01-Jun-2012     Ver 1.0        Swati A.B          Release 1.0             */
/*  11-Aug-2015     Ver 1.2        Anand Dhopte       FCM-FTQ Merger Changes  */
/*  12-Aug-2016     Ver 1.3        Bhupendra Malik    Hard Parsing Optimize   */
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <atmi.h>
#include <fml32.h>
#include <Usysflds.h>
#include <sqlca.h>
#include <fo_fml_def.h>
#include <fo_view_def.h>
#include <fo.h>
#include <fn_env.h>
#include <fn_tuxlib.h>
#include <fn_fil_log.h>
#include <fn_ddr.h>
#include <fn_log.h>
#include <fml_rout.h>
#include <fml_def.h>
#include <userlog.h>
#include <fn_session.h>
#include <fn_read_debug_lvl.h>

#define TOTAL_FML 50
#define PORTFOLIO_IP  'P' 
#define HEDGE_IP   'H' 

int fn_ins_fhgrec( char *c_ServiceName,
                   char *c_err_msg,
                   char *c_mtch_act_no,
                   char *c_xchng_cd,       
                   char *c_nxt_trd_dt
                  );

void SFO_CLN_GREEKS( TPSVCINFO *rqst )
{
  FBFR32 *ptr_fml_Ibuf;
  FBFR32 *ptr_fml_Obuf;
  FBFR32 *ptr_fml_Sbuf;
  FBFR32 *ptr_fml_Rbuf;

	/*** Variable Declaration  Starts ***/

	char 		c_ServiceName [ 33 ];	
	char 		c_cln_mtch_accnt[ 11 ];
	char    c_err_msg[256];
	char		c_undrlyng[6+1];
	char		c_def_undrlyng [6+1];
	char		c_prv_undrlyng[6+1];
	char		c_user_id[7];
	char    c_qty_greeks[1024]; 
	char    c_und_greeks[1024]; 
	char    c_prtf_greeks[1024]; 
	char    c_xchng_cd[ 4 ]; 
	char    c_ltq_xchng_cd[ 4 ]; 
	char		c_indstk ; 
	char		c_ctgry_indstk; 
	char    c_prd_typ ;
	char    c_exer_typ = 'E' ;
	char 		c_opt_typ ;
	char    c_spl_flg;
	char    c_def_prd_typ = '-' ;
	char    c_def_opt_typ = '-';
	char    c_def_exer_typ = '-';
	char    c_ordr_flw = 'N';
	char    c_clsltp_flg ;
	char    c_hdg_flg = 'O';                 /*** To identify if hedge position  or open position ***/

	int     i_err[TOTAL_FML];
	int     i_ferr[TOTAL_FML];
	int   	i_cnt = 0;
	int 	  i_ret_val = 0;
	int     i_rec_cntr=0; 
	int     i_tot_rec =0; 
	int     i_count =0; 
	int     i =0; 
	int     i_trnsctn  =0; 
	int     i_rtrn_val =0;
	int     i_clsprc_chk = 0; 
	int     i_cls_chk = 0; 

	long 		l_strk_prc = 0 ;
	long 		l_opnpstn_qty =  0;
	long 		li_session_id = 0;
	long  	l_bufferlength = 0;
	long  	l_def_opnpstn_qty = 0;
	long  	l_lot_sz = 0;

	double 	d_lst_trd_prc = 0.0 ; 
	double 	d_undrlyng_val1 = 0.0 ; 
	double 	d_strk_price = 0.0 ;
	double 	d_days_to_exp = 0.0 ;
	double  d_imp_vol = 0.00;
  double  d_delta= 0.00;
  double  d_theta= 0.00;
  double  d_vega= 0.00;
  double  d_beta= 0.00;
  double  d_gamma= 0.00;
  double  d_ltp  = 0.00;
  double  d_qty_delta = 0.00;
  double  d_qty_theta = 0.00;
  double  d_qty_vega = 0.00;
  double  d_qty_gamma = 0.00;
  double  d_und_delta = 0.00;
  double  d_und_theta = 0.00;
  double  d_und_vega  = 0.00;
  double  d_und_gamma = 0.00;
  double  d_prtf_delta = 0.00;
  double  d_prtf_theta = 0.00;
  double  d_prtf_vega = 0.00;
  double  d_prtf_gamma = 0.00;
  double  d_def_strk_price  = 0.00;
  double  d_def_imp_vol = 0.00;
  double  d_def_delta  = 0.00;
  double  d_def_beta  = 0.00;
  double  d_def_ltp  = 0.00;
	
	double 	d_interest_rt = 00.00;  
	double 	d_dividend = 00.00;    

	varchar	c_expiry_dt[22+1];
	varchar	c_expry_dt[22+1];
	varchar	c_def_expiry_dt[22+1];
	varchar c_nxt_trd_dt [ 23 ];

	sql_cursor opn_pos_cursor ;

		
	/*** Variable Declaration  Ends   ***/


	ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  ptr_fml_Obuf = (FBFR32 *)NULL;	

	strcpy( c_ServiceName, "SFO_CLN_GREEKS");

  INITDBGLVL(c_ServiceName);

	/*** Get the Inputs ***/
	
	fn_userlog(c_ServiceName," SFO_CLN_GREEKS STARTED ");

	if(Fget32(ptr_fml_Ibuf,FFO_EBA_MTCH_ACT_NO,0,(char *)c_cln_mtch_accnt,0) == -1)
  {
    fn_errlog(c_ServiceName,  "S31005", FMLMSG, c_err_msg);
    Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
  }

	if(Fget32(ptr_fml_Ibuf,FFO_TRD_DT,0,(char *)c_nxt_trd_dt.arr,0) == -1)
  {
    fn_errlog(c_ServiceName,  "S31010", FMLMSG, c_err_msg);
    Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
  }	

	SETLEN(c_nxt_trd_dt);
	strcpy(c_xchng_cd,"NFO");

	/*** Begin the transcation ***/
	
	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg );
  if ( i_trnsctn == -1 )
  {
    fn_errlog( c_ServiceName, "S31015", LIBMSG , c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/*** Getting Hedge Positions and inserting in Temporary table  ***/

	i_tot_rec = 0;
	i_tot_rec = Foccur32( (FBFR32 *)ptr_fml_Ibuf, FFO_UNDRLYNG );

	for( i_count = 0; i_count < i_tot_rec; i_count++ )
  {
    i_err[0] = Fget32(ptr_fml_Ibuf,FFO_UNDRLYNG,i_count,(char *)&c_undrlyng,0);
		i_ferr [ 0 ] = Ferror32;

		i_err[1] = Fget32(ptr_fml_Ibuf,FFO_XCHNG_CD,i_count,(char *)&c_xchng_cd,0);
		i_ferr [ 1 ] = Ferror32;

		i_err[2] = Fget32(ptr_fml_Ibuf,FFO_CTGRY_INDSTK,i_count,(char *)&c_ctgry_indstk,0);
    i_ferr [ 2 ] = Ferror32;
		
		i_err[3] = Fget32(ptr_fml_Ibuf,FFO_PRDCT_TYP,i_count,(char *)&c_prd_typ,0);
    i_ferr [ 3 ] = Ferror32;

		i_err[4] = Fget32(ptr_fml_Ibuf,FFO_EXER_TYP,i_count,(char *)&c_exer_typ,0);
    i_ferr [ 4 ] = Ferror32;

		i_err[5] = Fget32(ptr_fml_Ibuf,FFO_EXPRY_DT,i_count,(char *)&c_expiry_dt.arr,0);
    i_ferr [ 5 ] = Ferror32;

		i_err[6] = Fget32(ptr_fml_Ibuf,FFO_OPNPSTN_QTY,i_count,(char *)&l_opnpstn_qty,0);
    i_ferr [ 6 ] = Ferror32;

		i_err[7] = Fget32(ptr_fml_Ibuf,FFO_OPNPSTN_FLW,i_count,(char *)&c_ordr_flw,0);
    i_ferr [ 7 ] = Ferror32;

		for(i= 0; i < 8; i++)
      {
        if ( i_err[ i ] == -1 )
        {
					if ( i_err [ 1 ] == -1  && i_ferr[1] == FNOTPRES )
					{
						 strcpy(c_xchng_cd,"NFO");
					}
					else if( i_err [ 4 ] == -1  && i_ferr[4] == FNOTPRES )
					{
          	fn_userlog(c_ServiceName," Exercise Type Not Present ");
						c_exer_typ = 'E';
					}
					else
					{
						fn_errlog(c_ServiceName,  "S31020", FMLMSG, c_err_msg);
          	fn_userlog(c_ServiceName,"Error in Getting Option Type and Strike Price for Option Contract ");
          	fn_userlog(c_ServiceName,"Error in field %d in record no %d",i,i_count);
          	Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
						fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          	tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
					}
        }
      }


		if( c_prd_typ == 'O')
		{
			i_err[8] = Fget32(ptr_fml_Ibuf,FFO_OPT_TYP,i_count,(char *)&c_opt_typ,0);
    	i_ferr [ 8 ] = Ferror32;
	
			i_err[9] = Fget32(ptr_fml_Ibuf,FFO_STRK_PRC,i_count,(char *)&l_strk_prc,0);
    	i_ferr [ 9 ] = Ferror32;
		
			for(i= 8; i < 10; i++)
      {
        if ( i_err[ i ] == -1 )
        {
					fn_errlog(c_ServiceName,  "S31025", FMLMSG, c_err_msg);
					fn_userlog(c_ServiceName,"Error in Getting Option Type and Strike Price for Option Contract ");
					fn_userlog(c_ServiceName,"Error in field %d in record no %d",i,i_count);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
   				Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
    			tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
        }
      }

			fn_userlog(c_ServiceName,"---- 1--- ");
			fn_userlog(c_ServiceName," i_count Is :%d:",i_count);
			fn_userlog(c_ServiceName,"c_opt_typ Is :%c:",c_opt_typ);
      fn_userlog(c_ServiceName,"l_strk_prc Is :%ld:",l_strk_prc);
		}
		else
		{
			c_opt_typ = '*';
			l_strk_prc = 0;
		}

		/*** Checking If Stock/Index is proper ***/
    /*** Commented in Ver 1.2 ***
		EXEC SQL
      SELECT  FCM_INDSTK
      INTO    :c_indstk
      FROM    FCM_FO_CNTRCT_MSTR
      WHERE   FCM_XCHNG_CD  = :c_xchng_cd    
      AND     FCM_PRDCT_TYP = :c_prd_typ
      AND     FCM_UNDRLYNG  = :c_undrlyng
      AND     FCM_INDSTK    = :c_ctgry_indstk
      AND     rownum < 2  ;
    ***/
    /*** Ver 1.2 Starts ***/

    EXEC SQL
      SELECT  FTQ_INDSTK
      INTO    :c_indstk
      FROM    FTQ_FO_TRD_QT     
      WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
      AND     FTQ_PRDCT_TYP = :c_prd_typ
      AND     FTQ_UNDRLYNG  = :c_undrlyng
      AND     FTQ_INDSTK    = :c_ctgry_indstk
      AND     rownum < 2  ;
  
    /*** Ver 1.2 Ends   ***/    

		if ( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31030",SQLMSG,c_err_msg);
			fn_userlog(c_ServiceName,"Error in Getting Index ");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if(DEBUG_MSG_LVL_0)
    {
     fn_userlog(c_ServiceName,"FTQ Index/Stock indicator is :%c:",c_indstk);
    }

		/*** Getting the Expiry Date and Lot Size for the contract ***/
	
		if(strcmp(c_expiry_dt.arr,"NEAR") == 0)
    {
      /*** Commented in Ver 1.2 ***
      EXEC SQL
        SELECT  MIN(FCM_EXPRY_DT)
        INTO    :c_expry_dt
        FROM    FCM_FO_CNTRCT_MSTR
        WHERE   FCM_XCHNG_CD  = :c_xchng_cd 
        AND     FCM_PRDCT_TYP ='F'
        AND     FCM_UNDRLYNG = :c_undrlyng
        AND     FCM_QT_TRDNG_FLG ='T';
      ***/
      /*** Ver 1.2 Starts ***/

       EXEC SQL
        SELECT  MIN(FTQ_EXPRY_DT)
        INTO    :c_expry_dt
        FROM    FTQ_FO_TRD_QT     
        WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
        AND     FTQ_PRDCT_TYP ='F'
        AND     FTQ_UNDRLYNG = :c_undrlyng
        AND     FTQ_QT_TRDNG_FLG ='T';
    
      /*** Ver 1.2 Ends   ***/   
    
      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31035",SQLMSG,c_err_msg);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      /*** Commented in Ver 1.2 ***
			EXEC SQL                   
        SELECT  FCM_LOT_SZ
        INTO    :l_lot_sz
        FROM    FCM_FO_CNTRCT_MSTR
        WHERE   FCM_XCHNG_CD     = :c_xchng_cd
        AND     FCM_PRDCT_TYP    = 'F'
        AND     FCM_UNDRLYNG     = :c_undrlyng
        AND     FCM_QT_TRDNG_FLG = 'T'
        AND     FCM_EXPRY_DT     = :c_expry_dt ;
      ***/
      /*** Ver 1.2 Starts ***/
     
      EXEC SQL
        SELECT  FTQ_MIN_LOT_QTY
        INTO    :l_lot_sz
        FROM    FTQ_FO_TRD_QT     
        WHERE   FTQ_XCHNG_CD     = :c_xchng_cd
        AND     FTQ_PRDCT_TYP    = 'F'
        AND     FTQ_UNDRLYNG     = :c_undrlyng
        AND     FTQ_QT_TRDNG_FLG = 'T'
        AND     FTQ_EXPRY_DT     = :c_expry_dt ;
     
      /*** Ver 1.2 Ends   ***/

			if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31040",SQLMSG,c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
			

      fn_userlog(c_ServiceName,"NEAR MONTH EXPIRY FOR :%s: is :%s:",c_undrlyng,c_expry_dt.arr);
			fn_userlog(c_ServiceName,"NEAR MONTH EXPIRY LOT SIZE  is :%ld:" ,l_lot_sz);

    }
		else if(strcmp(c_expiry_dt.arr,"MID") == 0)
    {
      /*** Commented in Ver 1.2 ***
      EXEC SQL
        SELECT  MIN(FCM_EXPRY_DT)
        INTO    :c_expry_dt
        FROM    FCM_FO_CNTRCT_MSTR
        WHERE   FCM_XCHNG_CD  = :c_xchng_cd    
        AND     FCM_PRDCT_TYP ='F'
        AND     FCM_UNDRLYNG = :c_undrlyng
        AND     FCM_QT_TRDNG_FLG ='T'
        AND     FCM_EXPRY_DT != ( SELECT  MIN(FCM_EXPRY_DT)
                                  FROM    FCM_FO_CNTRCT_MSTR
                                  WHERE   FCM_XCHNG_CD  = :c_xchng_cd    
                                  AND     FCM_PRDCT_TYP ='F'
                                  AND     FCM_UNDRLYNG = :c_undrlyng
                                  AND     FCM_QT_TRDNG_FLG ='T');
      ***/
      /*** Ver 1.2 Starts ***/

       EXEC SQL
        SELECT  MIN(FTQ_EXPRY_DT)
        INTO    :c_expry_dt
        FROM    FTQ_FO_TRD_QT     
        WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
        AND     FTQ_PRDCT_TYP ='F'
        AND     FTQ_UNDRLYNG = :c_undrlyng
        AND     FTQ_QT_TRDNG_FLG ='T'
        AND     FTQ_EXPRY_DT != ( SELECT  MIN(FTQ_EXPRY_DT)
                                  FROM    FTQ_FO_TRD_QT     
                                  WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
                                  AND     FTQ_PRDCT_TYP ='F'
                                  AND     FTQ_UNDRLYNG = :c_undrlyng
                                  AND     FTQ_QT_TRDNG_FLG ='T');

      /*** Ver 1.2 Ends   ***/

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31045",SQLMSG,c_err_msg);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      /*** Commented in Ver 1.2 ***
			EXEC SQL
        SELECT  FCM_LOT_SZ
        INTO    :l_lot_sz
        FROM    FCM_FO_CNTRCT_MSTR
        WHERE   FCM_XCHNG_CD     = :c_xchng_cd
        AND     FCM_PRDCT_TYP    = 'F'
        AND     FCM_UNDRLYNG     = :c_undrlyng
        AND     FCM_QT_TRDNG_FLG = 'T'
        AND     FCM_EXPRY_DT     = :c_expry_dt ;
      ***/
      /*** Ver 1.2 Starts ***/

       EXEC SQL
        SELECT  FTQ_MIN_LOT_QTY
        INTO    :l_lot_sz
        FROM    FTQ_FO_TRD_QT     
        WHERE   FTQ_XCHNG_CD     = :c_xchng_cd
        AND     FTQ_PRDCT_TYP    = 'F'
        AND     FTQ_UNDRLYNG     = :c_undrlyng
        AND     FTQ_QT_TRDNG_FLG = 'T'
        AND     FTQ_EXPRY_DT     = :c_expry_dt ;

      /*** Ver 1.2 Ends   ***/ 

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31050",SQLMSG,c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      fn_userlog(c_ServiceName,"MID MONTH EXPIRY FOR :%s: is :%s:",c_undrlyng,c_expry_dt.arr);
      fn_userlog(c_ServiceName,"MID MONTH EXPIRY LOT SIZE  is :%ld:" ,l_lot_sz);
    }
		else if(strcmp(c_expiry_dt.arr,"FAR") == 0)
    {
      /*** Commented in Ver 1.2 ***
      EXEC SQL
        SELECT  MAX(FCM_EXPRY_DT)
        INTO    :c_expry_dt
        FROM    FCM_FO_CNTRCT_MSTR
        WHERE   FCM_XCHNG_CD  = :c_xchng_cd 
        AND     FCM_PRDCT_TYP ='F'
        AND     FCM_UNDRLYNG =:c_undrlyng
        AND     FCM_QT_TRDNG_FLG ='T' ;
      ***/
      /*** Ver 1.2 Starts ***/

      EXEC SQL
        SELECT  MAX(FTQ_EXPRY_DT)
        INTO    :c_expry_dt
        FROM    FTQ_FO_TRD_QT     
        WHERE   FTQ_XCHNG_CD  = :c_xchng_cd
        AND     FTQ_PRDCT_TYP ='F'
        AND     FTQ_UNDRLYNG =:c_undrlyng
        AND     FTQ_QT_TRDNG_FLG ='T' ;

      /*** Ver 1.2 Ends   ***/ 
      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31055",SQLMSG,c_err_msg);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      /*** Commented in Ver 1.2 ***
			EXEC SQL
        SELECT  FCM_LOT_SZ
        INTO    :l_lot_sz
        FROM    FCM_FO_CNTRCT_MSTR
        WHERE   FCM_XCHNG_CD     = :c_xchng_cd
        AND     FCM_PRDCT_TYP    = 'F'
        AND     FCM_UNDRLYNG     = :c_undrlyng
        AND     FCM_QT_TRDNG_FLG = 'T'
        AND     FCM_EXPRY_DT     = :c_expry_dt ;
      ***/
      /*** Ver 1.2 Starts ***/

      EXEC SQL
        SELECT  FTQ_MIN_LOT_QTY
        INTO    :l_lot_sz
        FROM    FTQ_FO_TRD_QT      
        WHERE   FTQ_XCHNG_CD     = :c_xchng_cd
        AND     FTQ_PRDCT_TYP    = 'F'
        AND     FTQ_UNDRLYNG     = :c_undrlyng
        AND     FTQ_QT_TRDNG_FLG = 'T'
        AND     FTQ_EXPRY_DT     = :c_expry_dt ;

      /*** Ver 1.2 Ends   ***/

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31060",SQLMSG,c_err_msg);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      fn_userlog(c_ServiceName,"FAR MONTH EXPIRY FOR :%s: is :%s:",c_undrlyng,c_expry_dt.arr);
			fn_userlog(c_ServiceName,"FAR MONTH EXPIRY LOT SIZE  is :%ld:" ,l_lot_sz);
    }	
		SETLEN(c_expry_dt);
    SETNULL(c_expry_dt);

		/*** Computing the Open Position Quantity ***/

		/*** Order flw  check is removed as front-ens sending -ve value for sell qty ***/

			l_opnpstn_qty = l_opnpstn_qty * l_lot_sz;

		/*** Inserting the Hedge Contracts in FHG table ***/
		
		if (DEBUG_MSG_LVL_0)
 	  {
    	fn_userlog(c_ServiceName,"--- Inserting the Hedge Contracts in FHG table ---");
    	fn_userlog(c_ServiceName,"Match Account Is :%s:",c_cln_mtch_accnt);
    	fn_userlog(c_ServiceName,"c_xchng_cd  Is :%s:",c_xchng_cd);
    	fn_userlog(c_ServiceName,"c_prd_typ Is :%c:",c_prd_typ);
    	fn_userlog(c_ServiceName,"c_indstk Is :%c:",c_indstk);
    	fn_userlog(c_ServiceName,"c_undrlyng Is :%s:",c_undrlyng);
    	fn_userlog(c_ServiceName," c_expry_dt Is :%s:",c_expry_dt.arr);
    	fn_userlog(c_ServiceName,"c_exer_typ Is :%c:",c_exer_typ);
    	fn_userlog(c_ServiceName,"c_opt_typ Is :%c:",c_opt_typ);
    	fn_userlog(c_ServiceName,"l_strk_prc Is :%ld:",l_strk_prc);
    	fn_userlog(c_ServiceName,"l_opnpstn_qty Is :%ld:",l_opnpstn_qty);
    	fn_userlog(c_ServiceName,"c_ordr_flw Is :%c:",c_ordr_flw);
  	}


	
		EXEC SQL
            INSERT INTO FHG_HDG_GREEK 
                  (
                    FHG_MTCH_ACC    ,
                    FHG_XCHNG_CD    ,
                    FHG_PRDCT_TYP   ,
                    FHG_INDSTK      ,
                    FHG_UNDRLYNG    ,
                    FHG_EXPRY_DT    ,
                    FHG_EXER_TYP    ,
                    FHG_OPT_TYP     ,
                    FHG_STRK_PRC    ,
                    FHG_OPNPSTN_QTY ,
										FHG_SPL_FLG
                  )
              VALUES
                  (
                    :c_cln_mtch_accnt,
                    :c_xchng_cd,
                    :c_prd_typ,
                    :c_indstk,
                    :c_undrlyng,
                    :c_expry_dt,
                    :c_exer_typ,
                    :c_opt_typ,
                    :l_strk_prc,
                    :l_opnpstn_qty ,
									  'H'	
                  );

    if( SQLCODE != 0 )
    {
				fn_errlog( c_ServiceName, "S31065",SQLMSG,c_err_msg);
      	fn_userlog(c_ServiceName," Error While Inserting in FHG Table ");
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }		

	
	}

	/*** Getting Hedge Positions Ends ***/
	/*** Function Call To Insert Open Positions of the client ***/

	i_rtrn_val = fn_ins_fhgrec( c_ServiceName,
                              c_err_msg,
                              c_cln_mtch_accnt,
                              c_xchng_cd,               
                              c_nxt_trd_dt.arr
                            );	


	if( i_rtrn_val  !=  0 )
  {
		if ( i_rtrn_val == -2 && i_tot_rec == 0)
		{
			fn_errlog( c_ServiceName, "S31070", DEFMSG, c_err_msg );
      strcpy(c_err_msg,"NO RECORDS TO BE DISPLAYED...Please Add In Hedge Position");
			fn_userlog(c_ServiceName," NO OPEN POSITION AND NO HEDGE POSITION");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
		}
		else if ( i_rtrn_val == -2  && i_tot_rec != 0 )
    {
      	fn_userlog(c_ServiceName," NO OPEN POSITION EXITS ...CALLING ONLY FOR HEDGE POSITIONS ");
		}
		else
		{
				fn_errlog( c_ServiceName, "S31075",SQLMSG,c_err_msg);
        fn_userlog(c_ServiceName," Error While Inserting in FHG Table ");
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
	
	/*** Inserting Open Positions of the client  Ends ***/



	if (DEBUG_MSG_LVL_0)
  {
    fn_userlog(c_ServiceName,"Match Account Is :%s:",c_cln_mtch_accnt);
    fn_userlog(c_ServiceName,"Trade Date Is :%s:",c_nxt_trd_dt.arr);
  }

	/* Initializing input buffer */

  ptr_fml_Obuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*100 );

  if ( ptr_fml_Obuf == NULL )
  {
  	fn_errlog( c_ServiceName, "S31080", TPMSG, c_err_msg  );
  	Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
  	tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0);
  }
	
	

	/*** Open Cursor to Fetch the Open Position ***/

	EXEC SQL ALLOCATE :opn_pos_cursor;

  EXEC SQL  EXECUTE
      BEGIN
        OPEN  :opn_pos_cursor FOR
					SELECT        FHG_MTCH_ACC,
												FHG_UNDRLYNG,
												FHG_XCHNG_CD,
												FHG_INDSTK,
												FHG_PRDCT_TYP,
												FHG_EXER_TYP,
												FHG_OPT_TYP,
												FHG_STRK_PRC,
												FHG_EXPRY_DT,
											  FHG_OPNPSTN_QTY,
												FHG_SPL_FLG,
                        (FHG_EXPRY_DT - trunc(sysdate) + 1 ) /*** Ver 1.3 ***/
					FROM          FHG_HDG_GREEK	
					ORDER BY FHG_UNDRLYNG,FHG_EXPRY_DT,FHG_PRDCT_TYP,FHG_STRK_PRC,FHG_OPT_TYP; 

        END;
      END-EXEC;

    if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31085", SQLMSG, c_err_msg  );
      EXEC SQL FREE  :opn_pos_cursor;
      EXEC SQL CLOSE :opn_pos_cursor;
			tpfree((char *)ptr_fml_Obuf);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
			Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
    	tpreturn(TPFAIL,0L, (char *)ptr_fml_Ibuf, 0L, 0);
    }

		MEMSET(c_prv_undrlyng);
		MEMSET(c_qty_greeks);
		MEMSET(c_und_greeks);
		MEMSET(c_prtf_greeks);

		d_und_delta = 0.0 ;
    d_und_gamma = 0.0 ;
    d_und_theta = 0.0 ;
    d_und_vega  = 0.0 ;

	  while (1)
		{

			d_lst_trd_prc = 0.0 ;     
			d_days_to_exp = 0.0;      
			d_strk_price = 0.0;       
			

			EXEC SQL
      FETCH :opn_pos_cursor
      INTO  :c_cln_mtch_accnt,
            :c_undrlyng,
            :c_xchng_cd,
            :c_indstk,
            :c_prd_typ,
            :c_exer_typ,
            :c_opt_typ,
            :l_strk_prc,
            :c_expiry_dt,
            :l_opnpstn_qty ,
						:c_hdg_flg,
            :d_days_to_exp;   /*** Ver 1.3 **/


    	if ( (SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ) )
    	{
      	fn_errlog(c_ServiceName,"S31090",SQLMSG,c_err_msg);
      	EXEC SQL
        CLOSE :opn_pos_cursor;
				tpfree((char *)ptr_fml_Sbuf);
        tpfree((char *)ptr_fml_Rbuf);
        tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0);
    	}
			else if( SQLCODE == NO_DATA_FOUND && i_rec_cntr == 0)
			{
				break;
			}	
			

			rtrim(c_undrlyng);
			rtrim(c_xchng_cd);
			rtrim(c_cln_mtch_accnt);


			if ( SQLCODE == NO_DATA_FOUND && i_rec_cntr != 0)
			{

				fn_userlog(c_ServiceName," --- 1 -- ");
	
				MEMSET (c_und_greeks);
				sprintf(c_und_greeks,"%0.2lf^%0.4lf^%0.2lf^%0.2lf",d_und_delta,d_und_gamma,d_und_theta,d_und_vega);
				fn_userlog(c_ServiceName," c_und_greeks Is :%s:",c_und_greeks);

				c_spl_flg     = UNDERLYING_IP;
		
				/**** Setting default values at Underlying level ***/
			
				strcpy( c_undrlyng ,"-" );	
				strcpy( c_expiry_dt.arr,"-" );
	
				/**** Setting default values at Underlying level  Ends ***/
	
				i_err[0] = Fadd32(ptr_fml_Obuf, FFO_UNDRLYNG ,        (char *)&c_def_undrlyng , 0 );
        i_err[1] = Fadd32(ptr_fml_Obuf, FFO_PRDCT_TYP,        (char *)&c_def_prd_typ  , 0 );
        i_err[2] = Fadd32(ptr_fml_Obuf, FFO_EXPRY_DT ,        (char *)&c_def_expiry_dt.arr  , 0 );
        i_err[3] = Fadd32(ptr_fml_Obuf, FFO_OPT_TYP ,        (char *)&c_def_opt_typ, 0 );
        i_err[4] = Fadd32(ptr_fml_Obuf, FFO_EXER_TYP ,        (char *)&c_def_exer_typ , 0 );
        i_err[5] = Fadd32(ptr_fml_Obuf, FFO_STRIKE_PRC ,        (char *)&d_def_strk_price , 0 );
        i_err[6] = Fadd32(ptr_fml_Obuf, FFO_OPNPSTN_QTY ,        (char *)&l_def_opnpstn_qty, 0 );
        i_err[7] = Fadd32(ptr_fml_Obuf, FFO_SPL_FLG  ,        (char *)&c_spl_flg, 0 );
        i_err[8] = Fadd32(ptr_fml_Obuf, FFO_AMOUNT ,        (char *)&d_def_imp_vol, 0 );
        i_err[9] = Fadd32(ptr_fml_Obuf, FFO_BAL_AMT ,    (char *)&d_def_delta, 0 );
        i_err[10] = Fadd32(ptr_fml_Obuf, FFO_RLZD_PL ,    (char *)&d_def_beta , 0 );
        i_err[11] = Fadd32(ptr_fml_Obuf, FFO_OI_INDCTR ,    (char *)&c_und_greeks, 0 );
        i_err[12] = Fadd32(ptr_fml_Obuf, FFO_EFF_CLS_PRC ,    (char *)&d_def_ltp , 0 );	

      	for( i_cnt = 0; i_cnt < 13 ; i_cnt++ )
      	{
              if( i_err[i_cnt] == -1 )
              {
                fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
                fn_errlog( c_ServiceName, "S31095",FMLMSG,c_err_msg);
                EXEC SQL
                CLOSE :opn_pos_cursor;
                tpfree((char *)ptr_fml_Sbuf);
                tpfree((char *)ptr_fml_Rbuf);
                tpfree((char *)ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
                tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0);
              }

      	}	

	
				MEMSET(c_prtf_greeks);
	
				sprintf(c_prtf_greeks,"%0.2lf^%0.4lf^%0.2lf^%0.2lf",d_prtf_delta,d_prtf_gamma,d_prtf_theta,
								d_prtf_vega);

				fn_userlog(c_ServiceName,"c_prtf_greeks  Is :%s:",c_prtf_greeks);

				c_spl_flg     = PORTFOLIO_IP;

				/**** Setting default values at Underlying level ***/

        strcpy( c_undrlyng ,"-" );
        strcpy( c_expiry_dt.arr,"-" );

        /**** Setting default values at Underlying level  Ends ***/
			
				i_err[0] = Fadd32(ptr_fml_Obuf, FFO_UNDRLYNG ,        (char *)&c_def_undrlyng , 0 );
        i_err[1] = Fadd32(ptr_fml_Obuf, FFO_PRDCT_TYP,        (char *)&c_def_prd_typ  , 0 );
        i_err[2] = Fadd32(ptr_fml_Obuf, FFO_EXPRY_DT ,        (char *)&c_def_expiry_dt.arr  , 0 );
        i_err[3] = Fadd32(ptr_fml_Obuf, FFO_OPT_TYP ,        (char *)&c_def_opt_typ, 0 );
        i_err[4] = Fadd32(ptr_fml_Obuf, FFO_EXER_TYP ,        (char *)&c_def_exer_typ , 0 );
        i_err[5] = Fadd32(ptr_fml_Obuf, FFO_STRIKE_PRC ,        (char *)&d_def_strk_price , 0 );
        i_err[6] = Fadd32(ptr_fml_Obuf, FFO_OPNPSTN_QTY ,        (char *)&l_def_opnpstn_qty, 0 );
        i_err[7] = Fadd32(ptr_fml_Obuf, FFO_SPL_FLG  ,        (char *)&c_spl_flg, 0 );
        i_err[8] = Fadd32(ptr_fml_Obuf, FFO_AMOUNT ,        (char *)&d_def_imp_vol, 0 );
        i_err[9] = Fadd32(ptr_fml_Obuf, FFO_BAL_AMT ,    (char *)&d_def_delta, 0 );
        i_err[10] = Fadd32(ptr_fml_Obuf, FFO_RLZD_PL ,    (char *)&d_def_beta , 0 );
        i_err[11] = Fadd32(ptr_fml_Obuf, FFO_OI_INDCTR ,    (char *)&c_prtf_greeks, 0 );
        i_err[12] = Fadd32(ptr_fml_Obuf, FFO_EFF_CLS_PRC ,    (char *)&d_def_ltp , 0 );

      	for( i_cnt = 0; i_cnt < 13 ; i_cnt++ )
      	{
              if( i_err[i_cnt] == -1 )
              {
                fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
                fn_errlog( c_ServiceName, "S31100",FMLMSG,c_err_msg);
                EXEC SQL
                CLOSE :opn_pos_cursor;
                tpfree((char *)ptr_fml_Sbuf);
                tpfree((char *)ptr_fml_Rbuf);
                tpfree((char *)ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
                tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0);
              }

      	}

					
				break;
			}

			if (DEBUG_MSG_LVL_3)
    	{
      	fn_userlog(c_ServiceName,"After Fetch Match Account Is :%s:",c_cln_mtch_accnt);
      	fn_userlog(c_ServiceName,"After Fetch Underlying Is :%s:",c_undrlyng);
      	fn_userlog(c_ServiceName,"After Fetch Product Type Is :%c:",c_prd_typ);
      	fn_userlog(c_ServiceName,"After Fetch IND/STK Is :%c:",c_indstk);
      	fn_userlog(c_ServiceName,"After Fetch Exercise Type Is :%c:",c_exer_typ);
      	fn_userlog(c_ServiceName,"After Fetch Option Type Is :%c:",c_opt_typ);
      	fn_userlog(c_ServiceName,"After Fetch Expiry Date Is :%s:",c_expiry_dt.arr);
      	fn_userlog(c_ServiceName,"After Fetch Open Pstn Qty Is :%ld:",l_opnpstn_qty);
      	fn_userlog(c_ServiceName,"After Fetch Strike Price Is :%ld:",l_strk_prc);
        fn_userlog(c_ServiceName,"After fetch days to exp is :%lf:",d_days_to_exp); /** Ver 1.3 **/
    	}

			if((strcmp(c_prv_undrlyng,c_undrlyng) != 0) && i_rec_cntr != 0 )
			{


				MEMSET(c_und_greeks);

				sprintf(c_und_greeks,"%0.2lf^%0.4lf^%0.2lf^%0.2lf",d_und_delta,d_und_gamma,d_und_theta,d_und_vega);
				
				fn_userlog(c_ServiceName," ---- 2 ------");
				fn_userlog(c_ServiceName," c_und_greeks Is :%s:",c_und_greeks);
		
				c_spl_flg     = UNDERLYING_IP;
		
				/**** Setting default values at Underlying level ***/

        strcpy( c_def_undrlyng ,"-" );
        strcpy( c_def_expiry_dt.arr,"-" );

        /**** Setting default values at Underlying level  Ends ***/
	
				i_err[0] = Fadd32(ptr_fml_Obuf, FFO_UNDRLYNG ,        (char *)&c_def_undrlyng , 0 );
      	i_err[1] = Fadd32(ptr_fml_Obuf, FFO_PRDCT_TYP,        (char *)&c_def_prd_typ  , 0 );
      	i_err[2] = Fadd32(ptr_fml_Obuf, FFO_EXPRY_DT ,        (char *)&c_def_expiry_dt.arr  , 0 );
      	i_err[3] = Fadd32(ptr_fml_Obuf, FFO_OPT_TYP ,        (char *)&c_def_opt_typ, 0 );
      	i_err[4] = Fadd32(ptr_fml_Obuf, FFO_EXER_TYP ,        (char *)&c_def_exer_typ , 0 );
      	i_err[5] = Fadd32(ptr_fml_Obuf, FFO_STRIKE_PRC ,        (char *)&d_def_strk_price , 0 );
      	i_err[6] = Fadd32(ptr_fml_Obuf, FFO_OPNPSTN_QTY ,        (char *)&l_def_opnpstn_qty, 0 );
      	i_err[7] = Fadd32(ptr_fml_Obuf, FFO_SPL_FLG  ,        (char *)&c_spl_flg, 0 );
      	i_err[8] = Fadd32(ptr_fml_Obuf, FFO_AMOUNT ,        (char *)&d_def_imp_vol, 0 );
      	i_err[9] = Fadd32(ptr_fml_Obuf, FFO_BAL_AMT ,    (char *)&d_def_delta, 0 );
      	i_err[10] = Fadd32(ptr_fml_Obuf, FFO_RLZD_PL ,    (char *)&d_def_beta , 0 );
      	i_err[11] = Fadd32(ptr_fml_Obuf, FFO_OI_INDCTR ,    (char *)&c_und_greeks, 0 );
      	i_err[12] = Fadd32(ptr_fml_Obuf, FFO_EFF_CLS_PRC ,    (char *)&d_def_ltp , 0 );

      	for( i_cnt = 0; i_cnt < 13 ; i_cnt++ )
      	{
              if( i_err[i_cnt] == -1 )
              {
                fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
                fn_errlog( c_ServiceName, "S31105",FMLMSG,c_err_msg);
                EXEC SQL
                CLOSE :opn_pos_cursor;
                tpfree((char *)ptr_fml_Sbuf);
                tpfree((char *)ptr_fml_Rbuf);
                tpfree((char *)ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
                tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0);
              }

      	}

				d_und_delta = 0.0 ;	
				d_und_gamma = 0.0 ;	
				d_und_theta = 0.0 ;	
				d_und_vega  = 0.0 ;	
			}

	
			/*** Set the Values To be sent to SFO_CAL_GREEKS ***/ 
			
			strcpy( c_user_id,"system" );
		
			d_lst_trd_prc = 0.0; 

			/*** Checking if closing Price to be taken or ltp ***/


			i_clsprc_chk = 0;
    
    	EXEC SQL
      	SELECT  1
      	INTO  :i_clsprc_chk
      	FROM  FTQ_FO_TRD_QT/*** Commented in Ver 1.2 ,FCM_FO_CNTRCT_MSTR ***/
      	WHERE FTQ_XCHNG_CD  = :c_xchng_cd
      	AND   FTQ_PRDCT_TYP = :c_prd_typ
      	AND   FTQ_UNDRLYNG  = :c_undrlyng
      	AND   FTQ_EXPRY_DT  = :c_expiry_dt
      	AND   FTQ_EXER_TYP  = :c_exer_typ
      	AND   FTQ_OPT_TYP   = decode(:c_prd_typ,'O',:c_opt_typ,'*')
      	AND   FTQ_STRK_PRC  = decode(:c_prd_typ,'O',:l_strk_prc,0)
     /*** Commented in Ver 1.2 *** 	AND   FCM_XCHNG_CD  = :c_xchng_cd
      	AND   FCM_UNDRLYNG  = FTQ_UNDRLYNG
      	AND   FCM_PRDCT_TYP = FTQ_PRDCT_TYP
      	AND   TRUNC(FTQ_LST_TRD_TM) = TRUNC(FCM_CLS_PRC_DT) ***/
        AND   TRUNC(FTQ_LST_TRD_TM) = TRUNC(FTQ_CLS_PRC_DT)  /*** Ver 1.2 ***/
      	AND   ROWNUM < 2;

    	if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    	{
      	fn_errlog(c_ServiceName, "S31110", SQLMSG,c_err_msg);
      	EXEC SQL
      	CLOSE :opn_pos_cursor;
      	tpfree((char *)ptr_fml_Sbuf);
      	tpfree((char *)ptr_fml_Rbuf);
      	tpfree((char *)ptr_fml_Obuf);
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0);
    	}

			if ( i_clsprc_chk  ==  1 )
    	{
      	c_clsltp_flg  ='C';
    	}
			else
    	{
      	if ( c_prd_typ ==  'F' )
      	{

        	i_cls_chk = 0;
        	EXEC SQL
          	SELECT  1
          	INTO    :i_cls_chk
          	FROM    FTQ_FO_TRD_QT/*** Commented in Ver 1.2 *** ,FCM_FO_CNTRCT_MSTR ***/
          	WHERE   FTQ_XCHNG_CD  = :c_xchng_cd                                
          	AND     FTQ_PRDCT_TYP = :c_prd_typ                                 
          	AND     FTQ_UNDRLYNG  = :c_undrlyng                                
          	AND     FTQ_EXPRY_DT  = :c_expiry_dt                               
          	AND     FTQ_EXER_TYP  = :c_exer_typ                                
          	AND     FTQ_OPT_TYP   = decode(:c_prd_typ,'O',:c_opt_typ,'*')      
          	AND     FTQ_STRK_PRC  = decode(:c_prd_typ,'O',:l_strk_prc,0)      
            /*** Commented in Ver 1.2 *** 
          	AND     FCM_XCHNG_CD  = :c_xchng_cd                                
          	AND     FCM_UNDRLYNG  = FTQ_UNDRLYNG
          	AND     FCM_PRDCT_TYP = FTQ_PRDCT_TYP
          	AND     TRUNC(FTQ_LST_TRD_TM) < TRUNC(FCM_CLS_PRC_DT) ***/
            AND     TRUNC(FTQ_LST_TRD_TM) < TRUNC(FTQ_CLS_PRC_DT) /*** Ver 1.2 ***/
          	AND     ROWNUM < 2;
      	}
      	else if (c_prd_typ == 'O' )
      	{

        	i_cls_chk = 0;
        	 EXEC SQL
          	SELECT  1
          	INTO    :i_cls_chk
          	FROM    FTQ_FO_TRD_QT,FUM_FO_UNDRLYNG_MSTR
          	WHERE   FTQ_XCHNG_CD  = :c_xchng_cd                                
          	AND     FTQ_PRDCT_TYP = :c_prd_typ                                 
          	AND     FTQ_UNDRLYNG  = :c_undrlyng                                
          	AND     FTQ_EXPRY_DT  = :c_expiry_dt                               
          	AND     FTQ_EXER_TYP  = :c_exer_typ                                
          	AND     FTQ_OPT_TYP   = decode(:c_prd_typ,'O',:c_opt_typ,'*')      
          	AND     FTQ_STRK_PRC  = decode(:c_prd_typ,'O',:l_strk_prc,0)       
          	AND     FUM_XCHNG_CD  = :c_xchng_cd                                
          	AND     FUM_UNDRLYNG  = FTQ_UNDRLYNG
          	AND     FUM_PRDCT_TYP = FTQ_PRDCT_TYP
          	AND     TRUNC(FTQ_LST_TRD_TM) <= TRUNC(FUM_CLS_PRC_DT)
          	AND     ROWNUM < 2;
     	 	}

      if ( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
      {
        fn_errlog(c_ServiceName, "S31115", SQLMSG,c_err_msg);
				EXEC SQL
				CLOSE :opn_pos_cursor;
				tpfree((char *)ptr_fml_Sbuf);
				tpfree((char *)ptr_fml_Rbuf);
				tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0);
      }

      if ( i_cls_chk == 1 )
      {
        c_clsltp_flg  ='C';
      }
      else
			{
        c_clsltp_flg  ='L';
      }
    }

		fn_userlog(c_ServiceName,"FLAG IS :%c:",c_clsltp_flg);
    if( c_clsltp_flg  == 'C' )    
    {

      EXEC SQL
        SELECT  FTQ_CLS_PRC
        INTO    :d_lst_trd_prc
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  = :c_xchng_cd					            
        AND     FTQ_PRDCT_TYP = :c_prd_typ					    
        AND     FTQ_UNDRLYNG  = :c_undrlyng					  
        AND     FTQ_INDSTK    = :c_indstk						  
        AND     FTQ_EXPRY_DT  = :c_expiry_dt				    
        AND     FTQ_EXER_TYP  = :c_exer_typ					  
        AND     FTQ_OPT_TYP   = decode(:c_prd_typ,'O',:c_opt_typ,'*')   			
        AND     FTQ_STRK_PRC  = decode(:c_prd_typ,'O',:l_strk_prc,0) ;				                              

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31120", SQLMSG,c_err_msg);
				EXEC SQL
				CLOSE :opn_pos_cursor;
				tpfree((char *)ptr_fml_Sbuf);
				tpfree((char *)ptr_fml_Rbuf);
				tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0);
      }

      
    }
    else
    {
      EXEC SQL
        SELECT  FTQ_LST_TRD_PRC
        INTO    :d_lst_trd_prc
        FROM    FTQ_FO_TRD_QT
        WHERE   FTQ_XCHNG_CD  =  :c_xchng_cd					                          
        AND     FTQ_PRDCT_TYP =  :c_prd_typ					                          
        AND     FTQ_UNDRLYNG  =  :c_undrlyng					                          
        AND     FTQ_INDSTK    =  :c_indstk						                          
        AND     FTQ_EXPRY_DT  =  :c_expiry_dt				                          
        AND     FTQ_EXER_TYP  =  :c_exer_typ					                          
        AND     FTQ_OPT_TYP   =  decode(:c_prd_typ,'O',:c_opt_typ,'*')   			
        AND     FTQ_STRK_PRC  =  decode(:c_prd_typ,'O',:l_strk_prc,0) ;				

      if ( SQLCODE != 0 )
      {
        fn_errlog(c_ServiceName, "S31125", SQLMSG,c_err_msg);
				EXEC SQL
				CLOSE :opn_pos_cursor;
				tpfree((char *)ptr_fml_Sbuf);
				tpfree((char *)ptr_fml_Rbuf);
				tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
				Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
				tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0);
      }

     
    }	


	
			d_lst_trd_prc = (double)d_lst_trd_prc/100;

			if ( strcmp(c_xchng_cd,"NFO")== 0)
			{
				strcpy(c_ltq_xchng_cd,"NSE");
			}
			else if ( strcmp(c_xchng_cd,"BFO")== 0)
			{
				strcpy(c_ltq_xchng_cd,"BSE");
			}
	
			d_undrlyng_val1 = 0.0 ;

			EXEC SQL
       SELECT nvl(ltq_rt,0)
       INTO   :d_undrlyng_val1
       FROM   ltq_trd_qt
       WHERE  ltq_xchng_cd = :c_ltq_xchng_cd 
       AND    ltq_stck_cd  = :c_undrlyng ;

      if(SQLCODE != 0)
      {
      	fn_errlog(c_ServiceName, "S31130", SQLMSG,c_err_msg);
				EXEC SQL
      	CLOSE :opn_pos_cursor;
				tpfree((char *)ptr_fml_Sbuf);
        tpfree((char *)ptr_fml_Rbuf);
        tpfree((char *)ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0);
      }

			d_strk_price = (double)l_strk_prc/100;

			
     	/*****  Commented in Ver 1.3 ****
			EXEC SQL
       SELECT (to_date(:c_expiry_dt,'dd-Mon-YYYY') - trunc(sysdate) + 1 )
       INTO   :d_days_to_exp 
       FROM   DUAL;

      if( SQLCODE != 0 )
      {
      	fn_errlog( c_ServiceName, "S31135", SQLMSG, c_err_msg  );
				EXEC SQL
      	CLOSE :opn_pos_cursor;
				tpfree((char *)ptr_fml_Sbuf);
        tpfree((char *)ptr_fml_Rbuf);
        tpfree((char *)ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
      	Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
      	tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0);
      }
      *** Ver 1.3 ***/

			
			/* Initializing input buffer */	
		
			ptr_fml_Sbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*10 );

  		if ( ptr_fml_Sbuf == NULL )
  		{
    		fn_errlog( c_ServiceName, "S31140", TPMSG, c_err_msg  );
    		EXEC SQL
        CLOSE :opn_pos_cursor;
				tpfree((char *)ptr_fml_Sbuf);
        tpfree((char *)ptr_fml_Rbuf);
        tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0);	
  		}

			/* Initializing output buffer */

 			ptr_fml_Rbuf = (FBFR32 *)tpalloc( "FML32", NULL, MIN_FML_BUF_LEN*10 );

  		if ( ptr_fml_Rbuf == NULL )
  		{
    		fn_errlog( c_ServiceName, "S31145", TPMSG, c_err_msg  );
    	  EXEC SQL
        CLOSE :opn_pos_cursor;
				tpfree((char *)ptr_fml_Sbuf);
        tpfree((char *)ptr_fml_Rbuf);
        tpfree((char *)ptr_fml_Obuf);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0);	
  		}
	
			i_err[0] = Fadd32(ptr_fml_Sbuf, FFO_USR_ID,        (char *)c_user_id, 0 );
      i_err[1] = Fadd32(ptr_fml_Sbuf, FFO_SSSN_ID,       (char *)&li_session_id, 0 );
      i_err[2] = Fadd32(ptr_fml_Sbuf, FFO_EFF_LTP,       (char *)&d_lst_trd_prc, 0);
      i_err[3] = Fadd32(ptr_fml_Sbuf, FFO_STCK_PRICE,    (char *)&d_undrlyng_val1, 0);
      i_err[4] = Fadd32(ptr_fml_Sbuf, FFO_STRIKE_PRC,    (char *)&d_strk_price, 0);
      i_err[5] = Fadd32(ptr_fml_Sbuf, FFO_OPT_TYP,       (char *)&c_opt_typ, 0);
      i_err[6] = Fadd32(ptr_fml_Sbuf, FFO_EXER_TYP,      (char *)&c_exer_typ, 0);
      i_err[7] = Fadd32(ptr_fml_Sbuf, FFO_INTRST_RT,     (char *)&d_interest_rt, 0 );
      i_err[8] = Fadd32(ptr_fml_Sbuf, FFO_PLG_RT,        (char *)&d_dividend, 0 );
      i_err[9] = Fadd32(ptr_fml_Sbuf, FFO_DAY_TO_EXP,    (char *)&d_days_to_exp, 0 );

      for( i_cnt = 0; i_cnt < 10; i_cnt++ )
      {
              if( i_err[i_cnt] == -1 )
              {
                fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
                fn_errlog( c_ServiceName, "S31150",FMLMSG,c_err_msg);
               	EXEC SQL
        				CLOSE :opn_pos_cursor;
								tpfree((char *)ptr_fml_Sbuf);
        				tpfree((char *)ptr_fml_Rbuf);
        				tpfree((char *)ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        				Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
        				tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0); 
              }

      }

			l_bufferlength = Fsizeof32(ptr_fml_Rbuf) + MIN_FML_BUF_LEN * 10;

      if(DEBUG_MSG_LVL_3)
			{
        fn_userlog( c_ServiceName,"Calling SFO_CAL_GREEKS");
			}

      i_ret_val=tpcall("SFO_CAL_GREEKS",(char*)ptr_fml_Sbuf,0,(char **)&ptr_fml_Rbuf,&l_bufferlength,0);

      if( i_ret_val == -1 )
      {

          fn_userlog( c_ServiceName," Call to service for fetching implied volatility failed " );
          fn_errlog( c_ServiceName, "S31155",FMLMSG,c_err_msg);
          EXEC SQL
          CLOSE :opn_pos_cursor;
          tpfree((char *)ptr_fml_Sbuf);
          tpfree((char *)ptr_fml_Rbuf);
          tpfree((char *)ptr_fml_Obuf);
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
          tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0); 

      }

      i_err[0] = Fget32( ptr_fml_Rbuf, FFO_EFF_LMT_RT,0,          (char *)&d_imp_vol,0) ;
      i_err[1] = Fget32( ptr_fml_Rbuf, FFO_EFF_LTP,0,             (char *)&d_ltp, 0);
      i_err[2] = Fget32( ptr_fml_Rbuf, FFO_INIT_MRGN_PRCNT,0,     (char *)&d_delta, 0);
      i_err[3] = Fget32( ptr_fml_Rbuf, FFO_MIN_MRGN_PRCNT,0,      (char *)&d_theta, 0);
      i_err[4] = Fget32( ptr_fml_Rbuf, FFO_SOMC_PRCNT,0,          (char *)&d_vega, 0);
      i_err[5] = Fget32( ptr_fml_Rbuf, FFO_AVM_PRCNT,0,           (char *)&d_gamma, 0);

      for(i_cnt=0;i_cnt<5;i_cnt++)
      {
          if(i_err[i_cnt]==-1)
          {
              fn_userlog( c_ServiceName, "Error in Fadd for i_cnt=%d", i_cnt);
              fn_errlog( c_ServiceName, "S31160", FMLMSG, c_err_msg  );
							EXEC SQL
          		CLOSE :opn_pos_cursor;
          		tpfree((char *)ptr_fml_Sbuf);
          		tpfree((char *)ptr_fml_Rbuf);
          		tpfree((char *)ptr_fml_Obuf);
							fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
          		Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
          		tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0);
          }
      }		
	

			
	
			/*** Computing Quantitywise Delta , theta , gamma, vega ***/

      fn_userlog( c_ServiceName, "c_prd_typ Is :%c:", c_prd_typ);
      fn_userlog( c_ServiceName, "c_undrlyng Is :%s:", c_undrlyng);
      fn_userlog( c_ServiceName, "c_prd_typ Is :%s:", c_xchng_cd);
      fn_userlog( c_ServiceName, "c_indstk Is :%c:", c_indstk);

			rtrim(c_undrlyng);

			EXEC SQL
        SELECT  NVL(FUM_BETA,1)
        INTO    :d_beta
        FROM    FUM_FO_UNDRLYNG_MSTR
   		 	WHERE   FUM_PRDCT_TYP      = :c_prd_typ
   		 	AND     trim(FUM_UNDRLYNG) = :c_undrlyng
    		AND     trim(FUM_XCHNG_CD) = :c_xchng_cd
    		AND     FUM_CTGRY_INDSTK   = :c_indstk;

      if(SQLCODE != 0)
      {
        fn_errlog(c_ServiceName, "S31165", SQLMSG,c_err_msg);
        EXEC SQL
        CLOSE :opn_pos_cursor;
        tpfree((char *)ptr_fml_Sbuf);
        tpfree((char *)ptr_fml_Rbuf);
        tpfree((char *)ptr_fml_Obuf);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
        Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
        tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0);

      }


			fn_userlog(c_ServiceName," d_beta Is :%lf:",d_beta);	
			if ( c_prd_typ == 'F' )
			{
				d_delta = 1.0;
				d_qty_delta = 1.0 * l_opnpstn_qty ;
				d_qty_theta = 0.0 ;
				d_qty_vega  = 0.0 ;
				d_qty_gamma = 0.0 ;
			}
			else
			{
				d_qty_delta =  d_delta * l_opnpstn_qty ;
        d_qty_theta =  d_theta * l_opnpstn_qty ;
        d_qty_vega  =  d_vega  * l_opnpstn_qty ;
        d_qty_gamma =  d_gamma * l_opnpstn_qty ;
			}	



			MEMSET(c_qty_greeks);
	
			sprintf(c_qty_greeks,"%0.2lf^%0.4lf^%0.2lf^%0.2lf",d_qty_delta,d_qty_gamma,d_qty_theta,d_qty_vega);
			fn_userlog(c_ServiceName," ---- 3 -----" );	
			fn_userlog(c_ServiceName," c_qty_greeks Is :%s:",c_qty_greeks);	
	
			/*** Computing Underlyingwise  Delta , theta , gamma, vega ***/

			d_und_delta = d_und_delta + d_qty_delta ;
			d_und_theta = d_und_theta + d_qty_theta ;
			d_und_vega  = d_und_vega  + d_qty_vega ;   
			d_und_gamma = d_und_gamma + d_qty_gamma ;

			fn_userlog(c_ServiceName," Testing:d_qty_delta Is :%lf:",d_qty_delta);	
			fn_userlog(c_ServiceName," Testing :d_und_delta Is :%lf:",d_und_delta);	
			/*** Computing Portfoliowise  Delta , theta , gamma, vega ***/

      d_prtf_delta = d_prtf_delta + d_qty_delta ;
      d_prtf_theta = d_prtf_theta + d_qty_theta ;
      d_prtf_vega  = d_prtf_vega  + d_qty_vega ;
      d_prtf_gamma = d_prtf_gamma + d_qty_gamma ;

			/*** Copy Current Underlying to Previous Underlying ***/
			strcpy(c_prv_undrlyng,c_undrlyng);

			if(c_hdg_flg == 'O')
			{
				c_spl_flg = CONTRACT_IP; 
			}
			else if (c_hdg_flg == 'H')
			{
				c_spl_flg = HEDGE_IP ; 
			}

			fn_userlog(c_ServiceName," ---- 4 -----" );	
			 
			i_err[0] = Fadd32(ptr_fml_Obuf, FFO_UNDRLYNG ,        (char *)&c_undrlyng, 0 );
			i_err[1] = Fadd32(ptr_fml_Obuf, FFO_PRDCT_TYP,        (char *)&c_prd_typ , 0 );
			i_err[2] = Fadd32(ptr_fml_Obuf, FFO_EXPRY_DT ,        (char *)&c_expiry_dt.arr , 0 );
			i_err[3] = Fadd32(ptr_fml_Obuf, FFO_OPT_TYP ,        (char *)&c_opt_typ , 0 );
			i_err[4] = Fadd32(ptr_fml_Obuf, FFO_EXER_TYP ,        (char *)&c_exer_typ , 0 );
			i_err[5] = Fadd32(ptr_fml_Obuf, FFO_STRIKE_PRC ,        (char *)&d_strk_price , 0 );
			i_err[6] = Fadd32(ptr_fml_Obuf, FFO_OPNPSTN_QTY ,        (char *)&l_opnpstn_qty , 0 );
			i_err[7] = Fadd32(ptr_fml_Obuf, FFO_SPL_FLG  ,        (char *)&c_spl_flg, 0 );
			i_err[8] = Fadd32(ptr_fml_Obuf, FFO_AMOUNT ,        (char *)&d_imp_vol, 0 );
      i_err[9] = Fadd32(ptr_fml_Obuf, FFO_BAL_AMT ,    (char *)&d_delta, 0 );
      i_err[10] = Fadd32(ptr_fml_Obuf, FFO_RLZD_PL ,    (char *)&d_beta, 0 );
      i_err[11] = Fadd32(ptr_fml_Obuf, FFO_OI_INDCTR ,    (char *)&c_qty_greeks, 0 );	
      i_err[12] = Fadd32(ptr_fml_Obuf, FFO_EFF_CLS_PRC ,    (char *)&d_ltp , 0 );	

      for( i_cnt = 0; i_cnt < 13 ; i_cnt++ )
      {
              if( i_err[i_cnt] == -1 )
              {
                fn_userlog(c_ServiceName,"i_cnt :%d:",i_cnt);
                fn_errlog( c_ServiceName, "S31170",FMLMSG,c_err_msg);
                EXEC SQL
                CLOSE :opn_pos_cursor;
                tpfree((char *)ptr_fml_Sbuf);
                tpfree((char *)ptr_fml_Rbuf);
                tpfree((char *)ptr_fml_Obuf);
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg );
                Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
                tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0);
              }

      }

			fn_userlog(c_ServiceName," ---- 5 -----" );	

			i_rec_cntr ++ ;	

		} /*** End Of While Loop ***/	

	
		EXEC SQL CLOSE :opn_pos_cursor ;

		EXEC SQL
    DELETE  FROM  FHG_HDG_GREEK;

  	if(SQLCODE != 0)
  	{
			fn_errlog( c_ServiceName, "S31175",SQLMSG,c_err_msg);
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_Rbuf);
      tpfree((char *)ptr_fml_Obuf);
			fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0);
  	}
	
 		if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg ) == -1 )
 		{
			fn_errlog( c_ServiceName, "S31180",SQLMSG,c_err_msg);
      tpfree((char *)ptr_fml_Sbuf);
      tpfree((char *)ptr_fml_Rbuf);
      tpfree((char *)ptr_fml_Obuf);
      fn_aborttran(c_ServiceName, i_trnsctn, c_err_msg);
      Fadd32( ptr_fml_Ibuf,FFO_ERR_MSG, c_err_msg, 0 );
      tpreturn(TPFAIL,0,(char*)ptr_fml_Ibuf,0,0);
  	}

    fn_userlog(c_ServiceName," Service Completed Successfully ");

		tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Obuf, 0 , 0 );		

} /*** End Of the Service ***/

int fn_ins_fhgrec( char *c_ServiceName,
                   char *c_err_msg,
                   char *c_cln_mtch_accnt,
                   char *c_xchng_cd,    
                   char *c_nxt_trd_dt
                 )
{

  sql_cursor insrec_cursor;

  long   l_rec_cnt ;

  double d_blckd_mrgn = 0.0;

	EXEC SQL INCLUDE "table/fhg_hdg_greek.h";

  EXEC SQL ALLOCATE :insrec_cursor;

      	fn_userlog(c_ServiceName,"Match Account Is :%s:",c_cln_mtch_accnt);
      	fn_userlog(c_ServiceName,"Exchange Code Is :%s:",c_xchng_cd);
      	fn_userlog(c_ServiceName,"c_nxt_trd_dt Is :%s:",c_nxt_trd_dt);

	EXEC SQL  EXECUTE
      BEGIN
        OPEN  :insrec_cursor  FOR
								SELECT   FFP_CLM_MTCH_ACCNT  ,
                         FFP_UNDRLYNG        ,
                         FFP_XCHNG_CD        ,
                         FFP_INDSTK          ,
                         FFP_PRDCT_TYP       ,
                         FFP_EXER_TYP        ,
                         '*'                 ,
                         0                   ,
                         FFP_EXPRY_DT        ,
                         FFP_OPNPSTN_QTY     ,
												 'O' 
                FROM     FFP_FO_FUTURES_PSTN
                WHERE    FFP_CLM_MTCH_ACCNT  = :c_cln_mtch_accnt
                AND      FFP_OPNPSTN_QTY     <> 0
                AND      FFP_PRDCT_TYP       = 'F'
                AND      FFP_EXPRY_DT        >= :c_nxt_trd_dt
								AND      FFP_XCHNG_CD  = :c_xchng_cd

                UNION ALL

                SELECT   FOP_CLM_MTCH_ACCNT  ,
                         FOP_UNDRLYNG        ,
                         FOP_XCHNG_CD        ,
                         FOP_INDSTK          ,
                         FOP_PRDCT_TYP       ,
                         FOP_EXER_TYP        ,
                         FOP_OPT_TYP         ,
                         FOP_STRK_PRC        ,
                         FOP_EXPRY_DT        ,
                         FOP_OPNPSTN_QTY     ,
												 'O'    
                FROM     FOP_FO_OPTIONS_PSTN
                WHERE    FOP_CLM_MTCH_ACCNT   = :c_cln_mtch_accnt
                AND      FOP_OPNPSTN_QTY      <> 0
                AND      FOP_EXPRY_DT         >= :c_nxt_trd_dt
								AND      FOP_XCHNG_CD  = :c_xchng_cd ;
		END;
     	 END-EXEC;

		if( SQLCODE != 0 )
    {
      fn_errlog( c_ServiceName, "S31185", SQLMSG, c_err_msg  );
      EXEC SQL FREE  :insrec_cursor;
      EXEC SQL CLOSE :insrec_cursor;
      return -1;
    }


		l_rec_cnt = 0; 
    for ( ; ; )
    {
				EXEC SQL  FETCH :insrec_cursor
                INTO  :sql_fhg_mtch_acc,
                    	:sql_fhg_undrlyng,
                    	:sql_fhg_xchng_cd,
                    	:sql_fhg_indstk,
                    	:sql_fhg_prdct_typ,
                    	:sql_fhg_exer_typ,
                    	:sql_fhg_opt_typ,
                    	:sql_fhg_strk_prc,
                    	:sql_fhg_expry_dt,
                    	:sql_fhg_opnpstn_qty,
											:sql_fhg_spl_flg;

				if ( SQLCODE != 0 && l_rec_cnt != 0 )
      	{
        	if( SQLCODE == NO_DATA_FOUND )
        	{
          	break;
        	}
        	fn_errlog( c_ServiceName, "S31190", SQLMSG, c_err_msg );
        	EXEC SQL FREE   :insrec_cursor;
        	EXEC SQL CLOSE  :insrec_cursor;
        	return -1;
      	}	

				l_rec_cnt = sqlca.sqlerrd[2];

      	fn_userlog(c_ServiceName,"Total No. Of Records :%ld:",l_rec_cnt);

      	if ( l_rec_cnt  ==  0)
      	{
        	fn_errlog( c_ServiceName, "S31195", SQLMSG, c_err_msg );
        	EXEC SQL FREE   :insrec_cursor;
        	EXEC SQL CLOSE  :insrec_cursor;
        	return -2;
      	}

				 EXEC SQL
            INSERT INTO FHG_HDG_GREEK
                  (
                    FHG_MTCH_ACC    ,
                    FHG_XCHNG_CD    ,
                    FHG_PRDCT_TYP   ,
                    FHG_INDSTK      ,
                    FHG_UNDRLYNG    ,
                    FHG_EXPRY_DT    ,
                    FHG_EXER_TYP    ,
                    FHG_OPT_TYP     ,
                    FHG_STRK_PRC    ,
                    FHG_OPNPSTN_QTY ,
										FHG_SPL_FLG
                  )
              VALUES
                  (
										:sql_fhg_mtch_acc,
                    :sql_fhg_xchng_cd,
                    :sql_fhg_prdct_typ,
                    :sql_fhg_indstk,
                    :sql_fhg_undrlyng,
                    :sql_fhg_expry_dt,
                    :sql_fhg_exer_typ,
                    :sql_fhg_opt_typ,
                    :sql_fhg_strk_prc,
                    :sql_fhg_opnpstn_qty,
										:sql_fhg_spl_flg
                  );

    			if( SQLCODE != 0 )
    			{
						fn_errlog( c_ServiceName, "S31200", SQLMSG, c_err_msg );
     				EXEC SQL FREE   :insrec_cursor;
      			EXEC SQL CLOSE  :insrec_cursor;
      			return -1;
    			}

		} /*** End Of For Loop ***/

		EXEC SQL FREE  :insrec_cursor;
  	EXEC SQL CLOSE :insrec_cursor;
  	return 0;
} /*** End Of Function ***/	
