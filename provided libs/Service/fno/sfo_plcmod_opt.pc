/******************************************************************************/
/*	Program	    			:	SFO_PLCMOD_OPT                                        */
/*                                                                            */
/*  Input             : FFO_USR_ID                                            */
/*                      FFO_SSSN_ID                                           */
/*                      FFO_EBA_MTCH_ACT_NO                                   */
/*                      FFO_XCHNG_CD                                          */
/*                      FFO_ORDR_FLW                                          */
/*                      FFO_LMT_MKT_SL_FLG                                    */
/*                      FFO_DSCLSD_QTY                                        */
/*                      FFO_ORD_TOT_QTY                                       */
/*                      FFO_LMT_RT                                            */
/*                      FFO_STP_LSS_TGR                                       */
/*                      FFO_ORD_TYP                                           */
/*                      FFO_ORDR_RFRNC                                        */
/*                      FFO_PIPE_ID                                           */
/*                                                                            */
/*  Optional          : FFO_ORD_VALID_DT                                      */
/*                                                                            */
/*  Output            : FFO_ERR_MSG                                           */
/*                                                                            */
/*  Description       : To place a modify options order                       */
/*                                                                            */
/*  Log               : 1.0   16-Oct-2001   S. Swaminathan                    */
/*  Log               : 1.1   17-Jul-2002   Infotec|Sangeet                   */
/*  Log               : 1.2   17-Sep-2002   Infotec|Sangeet                   */
/*  Log               : 1.3   04-Apr-2003   Infotec|Mohit                     */
/*  Log               : 1.4   03-Nov-2003   Zubin for remarks coming wrong    */
/*                                          when order is modified (CR 1240)  */
/*	Log								: 1.5		03-Mar-2004		Kaushik | GTD Orders 							*/
/*	Log								: 1.6		29-Jul-2004		Sangeet | GTD Orders 							*/
/*  Log               : 1.7   17-Apr-2007   Vikash                            */
/*  Log               : 1.8   24-Jan-2008   Shailesh                          */
/*  log               : 1.9   08-Jan-2007   Vikash  | Infotech                */
/*  log               : 2.0   07-Feb-2008   Vidyayini| Infotech               */
/*  Log               : 2.1   07-Nov-2008   Infotech|Shailesh                 */
/*  Log								: 2.2   02-Jan-2009		Infotech|Sandeep                  */					
/*	Log								: 2.3   27-Mar-2009   Infotech|Vidyayini Krish					*/
/*  Log               : 2.4   12-Jun-2009   Infotech|Vidyayini Krish          */
/*  Log               : 2.5   16-Dec-2009   Infotech|Shamili Dalvi						*/
/*	Log								:	2.6		10-May-2010		Infotech|Sandeep Patil						*/ 
/*  Log               : 2.7   23-Nov-2010   Shailesh Hinge| Infotech          */
/*  Log               : 2.8   07-Jul-2011   Infotech|Mahesh                   */
/*  Log               : 2.9   24-Feb-2012   Infotech|Sandip                   */
/*  Log               : 3.0   28-Jun-2012   Infotech|Sachin                   */
/*  Log               : 3.1   02-Jul-2012   Infotech|Navina                   */
/*  Log               : 3.2   03-Jul-2012   Infotech|Navina 									*/
/*  Log               : 3.3   05-Nov-2012   Infotech|Swati A.B                */
/*  Log               : 3.4   26-Nov-2012   Infotech|Sandip Tambe             */
/*  Log               : 3.5   20-Dec-2012   Infotech|Mahesh                   */
/*  Log               : 3.6   28-Jan-2013   Infotech|Swati A.B                */
/*  Log               : 3.7   18-Feb-2013   Infotech|Sandip                   */
/*	Log								:	3.8		04-Feb-2013		Infotech|Navina D.								*/
/*  Log               : 4.0   20-May-2013   Infotech|Samip M                  */
/*  Log               : 4.1   31-May-2013   Infotech|Swati A.B                */
/*  Log               : 4.2   28-Jun-2013   Infotech|Swati A.B                */
/*  Log               : 4.3   01-Oct-2013   Infotech|Shashi K                 */
/*  Log               : 4.4   13-Aug-2013   Infotech|Swati A.B                */
/*  Log               : 4.5   03-Feb-2014   Infotech|Navina D.                */
/*  Log               : 4.6   04-Feb-2014   Infotech|Bhushan S                */
/*  Log               : 4.7   13-Feb-2014   Infotech|Shailesh S.              */
/*  Log               : 4.8   26-Dec-2013   Infotech|Sandip Tambe             */
/*  Log               : 4.9   21-Jan-2014		Infotech|Bhushan Sonwane					*/
/*  Log               : 5.0   06-Nov-2013   Infotech|Swati A.B                */
/*  Log               : 5.1   24-Mar-2014   Infotech|Bhushan Sonwane          */
/*  Log               : 5.3   22-Apr-2014   Infotech|RItesh Deolekar          */
/*  Log               : 5.4   16-Jun-2014   Infotech|Anand Dhopte             */
/*  Log               : 5.6   01-Dec-2014   Infotech|(Navina/Bhushan)         */
/*  Log               : 5.7   09-Feb-2015   Infotech|Anand Dhopte             */ 
/*  Log               : 5.8   20-Mar-2015   Infotech|(Navina)                 */
/*	Log								:	5.9		07-Aug-2015		Infotech|Kishor Borkar						*/
/*	Log								:	6.0		13-Aug-2015		Infotech|Ritesh Deolekar			  	*/
/*	Log								:	6.1		06-Oct-2015		Infotech|Aakash			  	          */
/*  Log               : 6.4   01-Mar-2016   Infotech|Anand Dhopte             */
/*  Log               : 6.5   10-Mar-2016   Infotech|Kishor Borkar            */
/*  Log               : 6.6   05-Jul-2016   Infotech|Kishor Borkar            */
/*  Log               : 6.7   24-Oct-2016   Infotech|Bhupendra Malik/Kishor B.*/
/*	Log								:	6.8		19-Jul-2016		Infotech|Kishor Borkar						*/
/*  Log               : 6.9   05-Dec-2016   Infotech|Kishor Borkar            */
/*  Log               : 7.0   14-Feb-2017   Infotech|Tanmay W. 							  */
/*  Log               : 7.1   12-Dec-2017   Infotech|Anand Dhopte             */   
/*  Log               : 7.2   13-Dec-2017   Infotech|Anand Dhopte             */
/*  Log               : VQC   13-Dec-2017   Infotech|Anand Dhopte             */
/*  Log               : 7.3   28-Feb-2018   Infotech|Mrinal Kishore           */
/*  Log               : 7.4   21-May-2018   Infotech|Navina D.                */
/*  Log               : 7.5   19-Jun-2018   Infotech|Anand Dhopte             */
/*  Log               : 7.6   11-Jul-2018   Infotech|Bhushan Harekar          */
/*  Log               : 7.7   13-May-2019   Infotech|Parag Kanojia	          */
/*  Log               : 7.8   24-Jul-2019   Infotech|Kiran Itkar              */
/*  Log               : 7.9   24-Oct-2019   Infotech|Tanmay Patel             */
/*  Log               : 8.0   13-Nov-2019   Infotech|Anand Dhopte             */
/*  Log               : 8.1   20-Oct-2020   Infotech|Suchita Dabir            */
/*	Log								:	8.2		02-Feb-2021		Infotech|Kiran Itkar							*/
/*	Log								:	8.3		18-May-2021		Infotech|Sandip Tambe 						*/
/*	Log								: 8.4		14-Feb-2022		ISEC|Ravindra Panda								*/
/*  Log               : 8.5   07-Mar-2022   Infotech|Roshni Pawar             */
/*  Log               : 8.6   24-Jun-2022   ISEC|Naveena R.                   */
/*  Log               : 8.7   30-Sep-2022   ISEC|Dipin                        */ 
/*  Log               : 8.8   06-Mar-2023   ISEC|Ravi Malla                   */ 
/******************************************************************************/
/*  1.0  -  New release                                                       */
/*  1.1  -  For the implementation of BP                                      */
/*  1.2  -  To Restrict Market Ordres by ops IT																*/
/*  1.3  -  CR1041 Change in logic for calcutating the limit to be blocked    */
/*                 for Market Option Buy order.                               */

/*	1.6	 -  Blocking GTD Orders																								*/
/*  1.7  -  Broker status check for NNF 803                                   */
/*  1.8  -  Handling of mod rejection in case of partial execution            */
/*  1.9  -  DLrevamp for SLTP check and exchange status check                 */
/*					Modification allowed checks																				*/
/*  2.0  -  IBM Changes                                                       */
/*  2.1  -  Trading Limit Password check introduced                           */
/*	2.2  -  NNF Changes For Extended Market Hours															*/
/*  2.3  -  New View variables Implemented																		*/
/*  2.4  -  CRCON31530 changes to avoid freeze                                */
/*  2.5  -  Order Type and SLM Flag Null Fix                                  */
/*	2.6	 -	NNF DownLoad Changes																							*/
/*  2.7  -  SilverLight                                                       */
/*  2.8  -  SPAN Changes                                                      */
/*  2.9  -  BSE Changes                                                       */
/*  3.0  -  BSE SLTP changes as per modified structure                        */
/*  3.1  -  SPAN TNC flag handling                                            */ 
/*	3.2	 -	Storing ip address in Exchange book															  */
/*	3.3	 -	CR-Overnight Orders Changes																				*/
/*  3.4  -  Restricting customers from modifying Normal order to SLTP in BSE  */
/*  3.5  -  Broker closeout changes                                           */
/*  3.6  -  Consolidated Order Validation changes                             */
/*	3.7	 -  BSE SLTP To Limit Conversion Changes                              */
/*	3.8  -  SPAN FuturePLUS handling               														*/
/*  4.0  -  Modify Allocation changes                                         */
/*  4.1  -  Restrict DBC mapped customer to convert position                  */
/*          if trading is not allowed                                         */
/*  4.2 -  	Changes to allow modification of order for scrip under ban period */
/*  4.3 -  	Handling of Option Market Max sell quantity                       */
/*  4.4 -  	OptionPLUS Changes 																								*/
/*  4.5 -  	Pipe id bug Fix                                                   */
/*  4.6 -  	For OptionPlus Modifition Skip Best/Offer Qty check               */
/*  4.7 -  	Price band check added for OptionPLUS cover orders                */
/*  4.8 -   Common TNC check changes(Sandip T)                                */
/*  4.9 -		Contract Note Changes																							*/ 
/*  5.0 -   FNO limit Logging (Swati A.B)                                     */
/*  5.1 - 	OptionPLUS changes in  DL .net Changes      				              */
/*            (Changes to set SLTP flag and part-executed fresh order         */
/*              check added )                                                 */
/*  5.3 -  	Service call to SFO_GET_QT commented and function introduced      */
/*  5.4 -   DBHITS REDUCTION CHANGES                                          */                  
/*  5.6 -   CR-ISEC14-55799 OptionPLUS Stop Loss Modification Error when LTP  */
/*          less than cut off Premium                                         */                  
/*  5.7 -   Insufficient Limits - Modify Allocation changes for DL .Net       */
/*  5.8 -   FNO limit Logging for OptionPlus modification                     */
/*	5.9	-		Include changes for Insider trading check													*/
/*  6.0 -   Contract Master and Trade Quote Table Merger Changes              */
/*  6.1 -   CR-ISEC14-67417 Market to Limit in OptionPLUS					            */
/*  6.4 -   Check to restrict modification of Invalid combination             */
/*          of Order Reference and Match Account.                             */
/*  6.5 -   Transaction Flag in Check Session IP                              */
/*  6.6 -   Log Maintenance                                                   */
/*  6.7 -   parameters changed of fn_upd_xchngbk              */
/*	6.8 -		Log_Maintenance debug level changed from 0 to 1										*/
/*  6.9 -   Transaction through IP for Option plus                            */
/*  7.0 -   Insider check bug fix																							*/
/*  7.1 -   FML with data type char used instead of long for storing wrapper flag */ 
/*  7.2 -   Changes to reduce hard parsing of sql queries                     */
/*  VQC -   Version Quality Control Changes                                   */        
/*  7.3 -   Optimization Changes                                              */
/*  7.4   -   Position Mismatch                                               */
/*  7.5 -   Changes to disallow clients with outstanding from taking          */
/*          fresh exposure                                                    */
/*  7.6 -   Physical Settlement of Stock Derivative Changes                   */
/*  7.7 -  	EOS enhancements for Physical settlement in F&O Changes          	*/
/*  7.8 -   Physical delivery margin changes                                  */
/*  7.9 -   Ipv6 Format                                                       */
/*  8.0 -   CR-ISEC18-127640 Sub-broker dual order placement changes          */
/*  8.1 -   CR_ISEC14_139243 Opls margin changes  ( Suchita )                 */
/*	8.2 -		Separate EOS for Stock and Index Underlyings in OptionPlus				*/ 
/*	8.3 -		Derivative_trd_restrict_CR_ISEC04_152948                      		*/
/*	8.4 -		CR-ISEC14-165712 Enhancements to Physical settlement Stocks       */
/*  8.5 -   CR-ISEC14-163069 Disable market order placement for illiquid options contracts under F&O segment */ 
/*  8.6 -   Validation for API live issue (Naveena R)                         */
/*  8.7 -   CR-ISEC18-175354_ Unique Device Identifiers - Dipin               */
/*  8.8 -   changing fn_lock_usr to fn_lock_fno				                        */
/*  8.9 -   Margin Reporting Regulatory Changes (Nikhil Soni)                        */
/******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <atmi.h>
#include <fml32.h>
#include <sqlca.h>
#include <fo.h>
#include <eba_to_ors.h>
#include <fo_fml_def.h> 

/*** Commented in VQC ***
#include <fml_def.h>
***/

/* COMMENTED IN VER TOL : TUX on LINUX (Ravindra) * #include <fo_view_def.h> */
#include <fn_session.h>
#include <fn_tuxlib.h>
#include <fn_ddr.h>
#include <fn_log.h> /* Ver 2.0 */

/*** Commented in VQC *** 
#include <fml_rout.h> * Ver 2.0 *
***/

#include <fn_val_ord.h> /* Ver 2.0 */
#include <fn_read_debug_lvl.h> /* Ver 2.0 */
#include <fn_pos.h>		/* Ver 3.2 */
#include <fo_get_records.h>  /* Ver 5.3 */


EXEC SQL INCLUDE "table/fum_fo_undrlyng_mstr.h"; /* Ver 2.4 */

int fn_check_inp_opt( char *c_ServiceName,
                  struct vw_xchngbook *ptr_st_xchngbook, 
                  struct vw_cntrct_qt *ptr_st_cntrct_qt,
									char c_fum_mrkt_typ,                 /* Ver 2.2 */
                  char c_fcm_mrkt_typ,                 /* Ver 2.2 */ 
                  struct vw_err_msg *ptr_st_err_msg );

int fn_check_ord_opt( char *c_ServiceName,
                  struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf, 
                  struct vw_xchngbook *ptr_st_xchngbook, 
                  struct vw_orderbook *ptr_o_st_ordbook, 
                  struct vw_err_msg *ptr_st_err_msg );

int fn_5paisa(long); /*** Added in Ver 4.4 ****/

int fn_get_quote_zero ( char *c_ServiceName, char c_ord_flw, long l_best_bid_price, long l_best_offer_price, long l_previous_close_price, long *l_quote_zero);   /*** Added in Ver 7.7 ***/

void SFO_PLCMOD_OPT( TPSVCINFO *rqst )
{

  FBFR32 *ptr_fml_Ibuf;

	char c_ServiceName[33];
	varchar c_err_msg[256];   /*** Datatype changed from char to varchar in VQC ***/
  char  c_trdng_psswrd_flg = YES;
	/*** char  c_pipe_id[3];  Commented in VQC as variable is not used ***/
  char  c_temp_psswrd[LEN_USR_TRDNG_PSSWRD];
  /*** char c_usm_sup_usr_typ; *1.1 BP* 
  char c_channel[4];*1.1 BP*  Commented in VQC as variable is not used ***/
  char c_alias[9];/*1.1 BP*/
  char c_bp_id[9];/*1.1 BP*/
	char c_fum_mrkt_typ = '\0';          /* Ver 2.2 */ /* initialized in VQC */
  char c_fcm_mrkt_typ = '\0';          /* Ver 2.2 */ /* initialized in VQC */
  char c_spn_flg = 'N';         /* Ver 2.8  Initialized in Ver 3.1 */
  char c_bse_spn_flg = 'N' ;               /* Ver 2.9 */  /* initialized in VQC */
	char c_ip_address[45+1]="\0";	/** Changed to 45 from 15 in Ver 7.9 **/ /* Ver 3.2 */
	char c_lmt_mrkt_flg  = '\0';          /*** Ver 3.4 ***/ /* initialized in VQC */
	char c_request_typ = 'M';          /*** Ver 3.5 ***/
  char c_ord_val_flg = 'N';     /* Ver 3.6 */
	char c_cumopn_val_flg = 'N';     /* Ver 3.6 */
	char c_serv_call_flg = '\0';     /* Ver 3.6 */
	char c_mtm_flg='\0';    /* Ver 7.3 */
	char c_prcimp_flg_fxb='\0';  /*** Ver 7.3 ***/
  char c_dlvry_pos_allwd = 'Y'; /*** 7.6 ***/
  char  c_setlmnt_flg = 'C';    /*** 7.6 ***/

	int i_returncode = 0 ; /*** initialized in VQC */
	/*** int i_level_exists;  Commented in VQC as variable use is commented ***/
	int i_trnsctn = 0 ;    /*** initialized in VQC */
	int i_err[5];    /*** Array size reduced to 5 from 16 ***/
	int i_ferr[5];   /*** Array size reduced to 5 from 16 ***/
	int i_ip_len = 0; /* initialized in VQC */
	int i_op_len = 0; /* initialized in VQC */
	int i_actn_id=-1 ; /** ver 2.7 **/
  /*** int i_is_dbc_cust = 0 ; *** Ver 4.1 ***  Commented in VQC as variable use is commented ***/
	int insider_exist = 0;    /*** Ver 5.9 ***/

	/*** long l_xchng_seq_num;  Commented in VQC ***/
  long  l_ord_lmt_rt=0;  /* Ver 2.1 */
  long l_fsh_ord_lmt_rt=0;  /* Ver 5.6*/
  long l_tmp_ord_tot_qty = 0;   /** Ver 4.2 **/
  long l_tot_ord_qty = 0;   /** Ver 5.1 **/
	long l_init_sltp_rt=0;	/*** Ver 6.7 ***/
  long l_init_lmt_rt=0;	/*** Ver 6.7 ***/
  long l_lTP=0;		/*** Ver 6.7 ***/
  long l_trail_amt=0;	/*** Ver 6.7 ***/
  long l_lmt_offset=0;	/*** Ver 6.7 ***/
  char c_prcimpv_flg='\0';	/*** Ver 6.7 ***/
	

	/*** Ver 3.6 Starts ***/
  double d_old_ord_val = 0.0 ;
  double d_new_ord_val = 0.0 ;
  double d_netadj_ord_val = 0.0 ;
  /*** double d_frm_diffrnc_mrgn = 0.0 ; *** Ver 4.4 ***  Commented in VQC as variable use is commented  ***/
  /*** Ver 3.6 Ends ***/
	
	
  /*** Commented in VQC ***
  char c_fno_dmn_nm [ 16 ];
  char c_fno_trg_nm [ 16 ];
  char c_fno_trg_dat [ 256 ];
  ***/

  char c_fresh_ord_flg = '\0';   /*** Ver 4.2 ***/
  char c_actn_flg = '\0';   /*** Ver 5.0 ***/
  char c_sltpfp_lmt_allwd_flg = '\0';       /*** Ver 6.1 ***/
  char c_usr_flg = '\0';					/*** Ver 6.1 ***/
  char c_fc_flag = '\0';					/*** Ver 6.1 ***/
  char c_txn_flg='Y';             /*** Ver 6.5 ***/

  /* Ver 1.3 */
  long int li_aval_ordqty = 0 ; /* initialized in VQC */
  int      i_condition = 1;
  double   d_totordrval = 0.0000;
  /* Ver 1.3 end */
  long int li_max_sell_ordqty=0;  /*** Ver 4.3 ***/
  /*** long  l_stp_loss_trgr;  *** Ver 2.9 *** Commented in VQC as variable use is commented ***/
  long  l_old_rt = 0 ;  /*** Ver 3.6 ***/

  /* Ver 4.0 Starts */
  double d_required_amt = 0.0;
  char c_insuff_flg = 'N';
  /* Ver 4.0 Ends */

  /*** TPTRANID tranid  ; *** Ver 5.0 ***  Commented in VQC ***/

	/*** ver 8.4 start ***/
  char c_buy_allwd = '\0';
  char c_sell_allwd = '\0';
  /*** ver 8.4 end ***/

  char c_mrkt_ordr_flg = '\0'; /** ver 8.5 ***/

	/*** Ver 4.4 Starts ***/

  char c_fc_flg = '\0' ;
  char c_rqst_typ  = '\0' ;
  char c_cover_flw = '\0' ;
  char c_optpls_allwd_stts = '\0' ;
  char c_optpls_eos_flg = '\0';
  char c_frsh_ordr_stts = '\0';
  char c_cvr_ordr_stts = '\0';			 /*** Ver 6.1 ***/
  char c_sltp_ordr_refrnc[19];
  char c_narration_id[4];
  char c_ord_flw = '\0';
  char c_temp_slm_flg = '\0';
  /*** long  l_exctd_qty = 0;  
  long  l_frsh_xtd_qty = 0;  Commented in VQC as variable is not used ***/
  long  li_tot_exec_qty = 0;
  /*** long  l_open_qty = 0;
  long li_dsclsd_qty = 0; 
  long li_stp_lss_tgr_prc = 0;  
  long l_amt = 0;   
  long int li_lmt_rt = 0; 
  long l_temp_stp_lss_tgr = 0;   *** Ver 4.4 ***  Commented in VQC ***/
  long  l_ret_limit_rt = 0; 
  double d_amt_to_be_blckd = 0.0;
  double d_lss_amt_to_be_blckd = 0.0;
  double d_balance_amt = 0.0;
  double d_diff_amt= 0.0;
  double d_diff_loss= 0.0;
  double d_amt_blkd = 0.0;
  double d_lss_amt_blkd  = 0.0;
  /*** double d_diff_amt_blckd = 0.0;  
  double d_diff_lss_amt_blckd = 0.0; 
  double d_wgt_avrg_price = 0.0;
  double d_fmm_sltp_prcnt= 0.0;  Commented in VQC ***/
  double d_frsh_exe_val = 0.0;
  /*** double d_fmm_sltp_diff_prcnt = 0.0;  Commented in VQC ***/
  char c_sys_msg[4];
  int i_mtm_flg = 0;
  /*** Ver 4.4 Ends ***/


  char c_ref_rmrks[133] = "\0"; /*** Ver 8.1 ***/
  char  c_tmp_rmrks [ 133 ] = "\0";  /*** Ver 8.1 ***/

  double d_comp1_mrgn = 0.0;  /*** Ver 8.1 ***/
  double d_comp1_pl = 0.0;    /*** Ver 8.1 ***/
  double d_xchng_amt = 0.0;   /*** Ver 8.1 ***/
  double d_prem_amt = 0.0;    /*** Ver 8.1 ***/
  double d_spn_mrgn = 0.0;    /*** Ver 8.1 ***/
  double d_expr_mrgn = 0.0;   /*** Ver 8.1 ***/


  char c_trd_flg = '\0'; /** Ver 5.4 **/ /* initialized in VQC */
  char c_alias_nm[9]; /** Ver 5.4 **/
	char c_source_flg = '\0'; /*** Ver 5.6 ***/

  /*** Ver 7.2 Starts ***/

  char c_xchng_bfo[4] = "BFO";
  char c_exg_d_mkt_typ = 'D';
  char c_opt_prd_typ = 'O';
  
  /*** Ver 7.2 Ends ***/ 

	/*** Ver 7.7 Starts ***/
  int  i_phy_sqroff_check = 0;
  long l_quote_zero = 0;
  long l_best_bid_price = 0;
  long l_best_offer_price = 0;
  long l_previous_close_price = 0;
  /*** Ver 7.7 Ends ***/

	EXEC SQL BEGIN DECLARE SECTION;
    struct vw_cntrctlong_qt st_cntrctlong_qt; /* Ver 1.3 */
		struct vw_contract st_cntrct;
		struct vw_contract st_cntrct_ins;			/** Ver 8.3 **/
		struct vw_usr_prfl st_usr_prfl;
		/* struct vw_orderbook st_i_ordbook;		** st_i_ordbook is replaced with st_o_ordbook Ver 7.3 */
		struct vw_orderbook st_o_ordbook;
    struct vw_xchngbook st_xchngbook;
		varchar c_trd_dt[LEN_DATE];
		varchar c_sysdate[LEN_DATE];
    varchar c_usr_trd_psswrd[ 50 + 1 ];
	EXEC SQL END DECLARE SECTION;

	struct vw_err_msg st_err_msg;
  struct vw_sequence st_r_sequence;
  struct vw_sequence st_s_sequence;
  struct vw_pstn_actn st_pstn_actn;
	struct vw_cntrt_gen_inf st_cntrct_gen_inf;
	struct vw_cntrct_qt st_cntrct_qt;
  /*** struct vw_xchngbook st_s_xchngbk;  Commented in VQC as strucutre variable is not used ***/
  struct vw_xchngbook st_d_xchngbk;
	MEMSET (st_err_msg);								/**** Ver 3.6 ****/
	MEMSET(c_temp_psswrd);              /**** Ver 4.0 ****/
  MEMSET(c_usr_trd_psswrd);           /**** Ver 4.0 ****/
	/* MEMSET(st_i_ordbook);  ** Ver 6.7 ** commented in Ver 7.3 ***/
	MEMSET(st_o_ordbook);  /** Ver 6.7 **/

  /*** VQC Starts ***/

  MEMSET(c_sysdate);
  MEMSET(c_trd_dt);
  MEMSET(st_r_sequence);
  MEMSET(st_s_sequence);
  MEMSET(st_pstn_actn);
  MEMSET(st_cntrct_gen_inf);
  MEMSET(st_cntrct_qt);
  MEMSET(st_d_xchngbk);
  MEMSET(st_xchngbook);
  MEMSET(st_cntrctlong_qt);
  MEMSET(st_cntrct); 
  MEMSET(st_usr_prfl);
  MEMSET(st_cntrct_ins);  /** ver 8.3 **/ 
 
  /*** VQC Ends ***/

  ptr_fml_Ibuf = (FBFR32 *)rqst->data;
  strcpy( c_ServiceName, rqst->name );
	INITDBGLVL(c_ServiceName);

  c_xchng_bfo[3] = '\0'; /*** Ver 7.2 ***/

	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_usr_prfl,
                           "vw_usr_prfl" );
	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31005", FMLMSG, c_err_msg.arr  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);   /*** Ver 5.7 ***/ 
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);    /*** Ver 5.7 ***/
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	i_returncode = Fvftos32( ptr_fml_Ibuf,
                           (char *) &st_xchngbook,
                           "vw_xchngbook" );
	if ( i_returncode == -1 )
	{
		fn_errlog( c_ServiceName, "S31010", FMLMSG, c_err_msg.arr  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
		Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
  
  fn_init_ddr_pop ( st_xchngbook.c_pipe_id,TRADING_SECTION,O_CS);

	/** if( DEBUG_MSG_LVL_0) Commented in Ver 6.8 ** Ver 6.6 **/
	if( DEBUG_MSG_LVL_1) /** Ver 6.8 **/
  {
    fn_userlog(c_ServiceName,"Match Account :%s:,Order Reference no :%s:",st_usr_prfl.c_cln_mtch_accnt,st_xchngbook.c_ordr_rfrnc );
	}

	if(DEBUG_MSG_LVL_3){
    fn_userlog( c_ServiceName, "User id       :%s:",
                                  st_usr_prfl.c_user_id );
    fn_userlog( c_ServiceName, "Session id    :%ld:",
                                  st_usr_prfl.l_session_id );
    fn_userlog( c_ServiceName, "Match Account :%s:",
                                  st_usr_prfl.c_cln_mtch_accnt );
    fn_userlog( c_ServiceName, "Order Reference no  :%s:",
                                  st_xchngbook.c_ordr_rfrnc );
    fn_userlog( c_ServiceName, "Lmt/Mkt/StpLss:%c:",
                                 st_xchngbook.c_slm_flg );
    fn_userlog( c_ServiceName, "GTT/GTD Order :%c:",
                                 st_xchngbook.c_ord_typ );
    fn_userlog( c_ServiceName, "Disclosed Qty :%ld:",
                                 st_xchngbook.l_dsclsd_qty );
    fn_userlog( c_ServiceName, "Stop Loss Trgg:%ld:",
                                 st_xchngbook.l_stp_lss_tgr );
    fn_userlog( c_ServiceName, "Order Qty     :%ld:",
                                 st_xchngbook.l_ord_tot_qty );
    fn_userlog( c_ServiceName, "Limit Rate    :%ld:",
                                 st_xchngbook.l_ord_lmt_rt );
    fn_userlog( c_ServiceName, "Pipe id      :%s:",
                                 st_xchngbook.c_pipe_id );
  }

  /** Ver 4.5 Starts **/
  MEMSET(st_xchngbook.c_pipe_id);
  st_xchngbook.c_pipe_id[0]=st_xchngbook.c_ordr_rfrnc[8];
  st_xchngbook.c_pipe_id[1]=st_xchngbook.c_ordr_rfrnc[9];
  st_xchngbook.c_pipe_id[2]='\0';

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, " After change Pipe id :%s:", st_xchngbook.c_pipe_id );
  }
  /** Ver 4.5 Ends **/

	/*** l_temp_stp_lss_tgr = st_xchngbook.l_stp_lss_tgr ; *** Ver 4.4 ***  Commented in VQC ***/

  /***  Ver 4.1 Starts  ***/
  /***  Ver 5.4 Starts  ***/

	/*  Ver 6.1 Starts  */

  /*** Commented in Ver 7.1 as data-type of FML used is long and variable data-type is char ***
	i_err[0] = Fget32( ptr_fml_Ibuf, FFO_USR_FLG , 0,(char *)&c_usr_flg,0);
  ***/

  i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_CLSR_TYP,0,(char *)&c_usr_flg,0); /*** Ver 7.1 ***/
	i_ferr [0] = Ferror32;
	if (( i_err[0] == -1 ) && ( Ferror32 != FNOTPRES ))
	{
	 fn_errlog( c_ServiceName, "S31015", Fstrerror32(i_ferr[0]),c_err_msg.arr);
	 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
	 Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		
   Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);   
   Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   
	 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}
	/*  Ver 6.1 Ends  */

  /* Ver 6.9 Starts */
  if(c_usr_flg== 'W')
  {
    MEMSET(c_ip_address);

    i_err[1] = Fget32( ptr_fml_Ibuf, FFO_OI_INDCTR, 0,(char *)c_ip_address,0);
    i_ferr [1] = Ferror32;

    if (( i_err[0] == -1 ) && ( Ferror32 != FNOTPRES ))
    {
      fn_errlog( c_ServiceName, "S31020", Fstrerror32(i_ferr[0]),c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }

  if(DEBUG_MSG_LVL_0)
  {
    fn_userlog( c_ServiceName, "c_ip_address is...:%s:",c_ip_address);
  }
  /* Ver 6.9 Ends */

    MEMSET(c_bp_id);
    MEMSET(c_alias_nm);
    c_trd_flg ='\0';
    c_spn_flg='\0';
    c_bse_spn_flg='\0';  

    /*** Below query changed to capital case in Ver 7.2 ***/
 
    EXEC SQL 
    SELECT CLM_TRD_FLG,
           NVL(CLM_BP_ID,'*'),
           NVL(CLM_SPAN_ALLWD,'N'),
           NVL(CLM_BSESPAN_ALLWD,'N'),
           NVL(CLM_ALIAS_NAME,'*')
    into   :c_trd_flg,
           :c_bp_id,
           :c_spn_flg,
           :c_bse_spn_flg,
           :c_alias_nm
    FROM   CLM_CLNT_MSTR
    WHERE  CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt;
 
   if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName, "Failed To Get SPAN Flag.");
    fn_errlog(c_ServiceName, "S31025", SQLMSG, c_err_msg.arr);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

	 rtrim(c_bp_id);
   rtrim(c_alias_nm);

  if( DEBUG_MSG_LVL_3) /*** Ver 6.6 ***/
  {
    fn_userlog(c_ServiceName,"Trade flag :%c:",c_trd_flg);
    fn_userlog(c_ServiceName,"BP id :%s:",c_bp_id);
    fn_userlog(c_ServiceName," NSE span flag :%c:,Bse Span Flag :%c:",c_spn_flg,c_bse_spn_flg);
    fn_userlog(c_ServiceName,"Nick Name :%s:",c_alias_nm);
	}

   /** Ver 5.4 Ends **/

  /*** Ver 8.6 starts ***/
  fn_userlog( c_ServiceName, "before st_xchngbook.c_ordr_flw:%c:",st_xchngbook.c_ordr_flw);

  if(st_xchngbook.c_ordr_flw !='B' && st_xchngbook.c_ordr_flw != 'S')
  {
    EXEC SQL
    SELECT FOD_ORDR_FLW
    INTO :st_xchngbook.c_ordr_flw
    FROM FOD_FO_ORDR_DTLS
    WHERE FOD_ORDR_RFRNC = :st_xchngbook.c_ordr_rfrnc;

    if(SQLCODE != 0)
    {
      fn_userlog( c_ServiceName, "failed in geting order flow");
      fn_errlog( c_ServiceName, "S31030", "Invalid Order Flow", c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
  }
  fn_userlog( c_ServiceName, "after st_xchngbook.c_ordr_flw:%c:",st_xchngbook.c_ordr_flw);
  /*** Ver 8.6 ends ***/

 if(st_usr_prfl.c_user_id[0] != BPID )
 {

   /*** Ver 5.4 comment starts ***
   i_is_dbc_cust = 0;

   EXEC SQL
       SELECT 1
           INTO :i_is_dbc_cust
       FROM  CLM_CLNT_MSTR
       WHERE CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt
       AND   CLM_TRD_FLG = 'N'  
       AND   CLM_BP_ID IS NOT NULL;



   if( (SQLCODE != NO_DATA_FOUND) && (SQLCODE != 0))
   {
        fn_userlog(c_ServiceName, "Failed To Get SPAN Flag.");
        fn_errlog(c_ServiceName, "S31035", SQLMSG, c_err_msg.arr);
        Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
   }
  
    if( i_is_dbc_cust == 1 ) 
  *** Ver 5.4 comment ends ***/ 

    if(c_trd_flg=='N' && strcmp(c_bp_id,"*")!=0)   /** Ver 5.4 **/
   {
       fn_userlog(c_ServiceName,"Since you are Attached to a Direct Business Catalyst, this facility has been Disabled");
       fn_errlog( c_ServiceName, "B35018", "", c_err_msg.arr  );
       Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
       Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
   }
   /** Ver 4.8 starts ** following commented as it is on hold
   if(fn_check_tnc(c_ServiceName,st_usr_prfl.c_user_id,c_err_msg.arr) != 1 )
   {
      fn_errlog( c_ServiceName, "B31017",DEFMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
   ** Ver 4.8 ends **/
 }

  /***  Ver 4.1  Ends  ***/

   /*** Ver 8.0 Starts ***/

  if(st_usr_prfl.c_user_id[0] ==BPID)
   {
     if( fn_simaltns_ssn_term ( c_ServiceName,st_usr_prfl.c_user_id,st_usr_prfl.l_session_id,st_usr_prfl.c_cln_mtch_accnt,c_err_msg.arr) == -1 )
     {
      fn_errlog(c_ServiceName,"S31040","Error while checking simultaneous active session",c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

  /*** Ver 8.0 Ends ***/

	/***  Ver 2.8 SPAN Flag Check ***/

  /*** Ver 5.4 comment starts *** 

  EXEC SQL
    SELECT  NVL(CLM_SPAN_ALLWD,'N'),
						NVL(CLM_BSESPAN_ALLWD,'N')						*** Ver 2.9 ***
    INTO    :c_spn_flg,
						:c_bse_spn_flg												*** Ver 2.9 ***
    FROM    CLM_CLNT_MSTR
    WHERE   CLM_MTCH_ACCNT  = :st_usr_prfl.c_cln_mtch_accnt;

  if ( SQLCODE != 0 )
  {
    fn_userlog(c_ServiceName, "Failed To Get SPAN Flag.");
    fn_errlog(c_ServiceName, "S31045", SQLMSG, c_err_msg.arr);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }

   *** Ver 5.4 comment ends ***/

  if( DEBUG_MSG_LVL_3) /*** Ver 6.6 ***/
  {
  	fn_userlog(c_ServiceName,"SPAN Allowed Flag Is :%c:",c_spn_flg);
  	fn_userlog(c_ServiceName,"BSE SPAN Allowed Flag Is :%c:",c_bse_spn_flg);		/** Ver 2.9 **/
	}

 /* if ( c_spn_flg == 'Y' )			** Ver 2.9 comment **/
  if ( ( c_spn_flg == 'Y' 	 && strcmp(st_xchngbook.c_xchng_cd,"NFO") == 0 ) ||
			 ( c_spn_flg == 'Z' 	 && strcmp(st_xchngbook.c_xchng_cd,"NFO")== 0 ) ||			/*** Ver 3.1 ***/
			 ( c_bse_spn_flg =='Y' && strcmp(st_xchngbook.c_xchng_cd,"BFO") == 0 )
		 )		/** Ver 2.8 **/
  {
    fn_userlog(c_ServiceName, "SPAN Customer Trying To Place Order Under Normal Margining System.");
    strcpy(c_err_msg.arr,"You Are Marked Under SPAN.Can Modify Order Only Through New Site.");
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }
	/**** END Ver 2.8 ***/

  /**********1.6 Starts *********************/
  if(st_xchngbook.c_ord_typ == GOOD_TILL_DATE)
  {
    fn_userlog( c_ServiceName, "GTD Orders are not allowed for FNO from 30-07-2004");
    fn_errlog( c_ServiceName, "B28572", "", c_err_msg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /********** 1.6 Ends  *********************/

  /***	c_temp_slm_flg = st_xchngbook.c_slm_flg;  *** Ver 4.4  *** Commented In Ver 5.1 & moved down  ***/

	/***	Ver	2.7	Starts	***/

	if(st_xchngbook.l_stp_lss_tgr > 0 )
  {
    /*** Ver 3.4 Starts ****/
    if(strcmp(st_xchngbook.c_xchng_cd,"BFO") == 0 )
    {
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Checking Limit Market Flag before modification to SLTP for BFO");
      }
     
      /*** Below query changed to capital case in Ver 7.2 ***/

      EXEC SQL
          SELECT FOD_LMT_MRKT_SL_FLG
          INTO   :c_lmt_mrkt_flg
          FROM   FOD_FO_ORDR_DTLS
         /***  WHERE  FOD_XCHNG_CD='BFO'   *** Commented in Ver 7.2 ***/
          WHERE  FOD_XCHNG_CD = :c_xchng_bfo  /*** variable used instead of hard coded value in Ver 7.2 ***/
          AND    FOD_ORDR_RFRNC = :st_xchngbook.c_ordr_rfrnc
          AND    FOD_MDFCTN_CNTR = (SELECT MAX(FXB_MDFCTN_CNTR)
                                    FROM  FXB_FO_XCHNG_BOOK
                                    WHERE  FXB_ORDR_RFRNC = :st_xchngbook.c_ordr_rfrnc
                                   ) ;
      if(SQLCODE != 0)
      {
        fn_userlog( c_ServiceName, "failed in geting Limit Market flag for BSE ordr");
        fn_errlog( c_ServiceName, "S31050", "Invalid SLM Flag", c_err_msg.arr  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"Limit Market flag from FOD is :%c:",c_lmt_mrkt_flg);
      }
      if(c_lmt_mrkt_flg !='S')
      {
        sprintf(st_err_msg.c_err_msg,"Please note orders cannot be modified from Limit to SLTP");
        fn_errlog(c_ServiceName,"S31055","Please note orders cannot be modified from Limit to SLTP",c_err_msg.arr);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
    else
    {       /*** Ver 3.4 Ends ***/
  		if( DEBUG_MSG_LVL_3) /*** Ver 6.6 ***/
  		{
    		fn_userlog(c_ServiceName,"Inside Stop Loss Trigger Price Check.");
    	}
			st_xchngbook.c_slm_flg  = 'S' ;
  		if( DEBUG_MSG_LVL_3) /*** Ver 6.6 ***/
  		{    	
				fn_userlog(c_ServiceName," SLM Flag Is :%c:",st_xchngbook.c_slm_flg);
			}
		}      /*** Ver 3.4 ***/
	}

	/***	Ver	2.7	Ends	***/


	  /*** Ver 5.9 Starts ******/

  /*** Ver 7.5 Starts ***/

   if( st_o_ordbook.c_prd_typ !=  OPTIONPLUS )
   {
    i_returncode = fn_disallow_frsh_expsre(c_ServiceName,
                             st_usr_prfl.c_cln_mtch_accnt,
                             c_spn_flg,
                             st_xchngbook.c_ordr_flw,
                             st_xchngbook.l_ord_tot_qty,
                             st_o_ordbook.l_ord_tot_qty,
                             &st_cntrct,
                             &st_err_msg );

    if (i_returncode == -1 || i_returncode == -2)
    {
     fn_errlog( c_ServiceName, "S31060", "Error in Function fn_disallow_frsh_expsre", c_err_msg.arr);
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
     Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
     Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
     Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
   }
  /*** Ver 7.5 Ends ***/

	/****** Commented in Ver 7.0 *******

  i_returncode = fn_chk_und_insider(c_ServiceName,
                                    st_usr_prfl,
                                    st_cntrct.c_undrlyng,
                                    &insider_exist);
  if (i_returncode == -1)
  {
      fn_errlog( c_ServiceName, "S31065", "Error in Function fn_chk_und_insider", c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if (insider_exist == 1)
  {
      fn_errlog( c_ServiceName, "B21042", DEFMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	******* ver 7.0 *************/

  /*** End of Ver 5.9 ***/	



	c_temp_slm_flg = st_xchngbook.c_slm_flg;  /*** Ver 5.1 ***/

	/**********2.5 Starts *********************/

  if(st_xchngbook.c_slm_flg !='L' && st_xchngbook.c_slm_flg  != 'S' && st_xchngbook.c_slm_flg !='M' )
  {
    fn_userlog( c_ServiceName, "c_slm_flg is NULL");
    fn_errlog( c_ServiceName, "S31070", "Invalid SLM Flag", c_err_msg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  if(st_xchngbook.c_ord_typ !='T' && st_xchngbook.c_ord_typ  != 'I')
  {
    fn_userlog( c_ServiceName, "ORDER TYPE is NULL");
    fn_errlog( c_ServiceName, "S31075", "Invalid Order Type", c_err_msg.arr  );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /********** 2.5 Ends  *********************/
  /******* Commented in ver 3.5
  i_returncode=fn_chk_closeout(c_ServiceName,
                               &st_xchngbook,
                               &st_err_msg);

  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31080", "Broker Under Closeout", c_err_msg.arr);
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   **Ver 2.7**
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  **************************/

  /**********1.7 Ends*********************/
	

  i_err[0] = Fget32( ptr_fml_Ibuf, FFO_TRD_PSSWD, 0,
                         (char *)c_usr_trd_psswrd.arr,0);
  i_ferr [0] = Ferror32;
  if (( i_err[0] == -1 ) && ( Ferror32 != FNOTPRES ))
  {
     fn_errlog( c_ServiceName, "S31085", Fstrerror32(i_ferr[0]),c_err_msg.arr);
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
     Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
     Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
     Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
/**Commented for Ver 2.1
  else if (( i_err[0] == -1 ) && ( Ferror32 == FNOTPRES ))
  {
      c_trdng_psswrd_flg = NO;
  }
  else
  {
      c_trdng_psswrd_flg = YES;
  }
***/

/**Ver 2.1 starts **/
	strcpy ( st_o_ordbook.c_ordr_rfrnc,st_xchngbook.c_ordr_rfrnc); /* st_i_ordbook is replaced with st_o_ordbook in Ver 7.3 */
	fn_cpy_ddr ( st_o_ordbook.c_rout_crt );	/* st_i_ordbook is replaced with st_o_ordbook in Ver 7.3 */
	st_o_ordbook.c_oprn_typ = FOR_VIEW;	/* st_i_ordbook is replaced with st_o_ordbook in Ver 7.3 */

	i_ip_len = sizeof ( struct vw_orderbook );
	i_op_len = sizeof ( struct vw_orderbook );

	/***** Comment starts in Ver 7.3 ******
	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg.arr,
                              &st_i_ordbook,
                              &st_o_ordbook,
                              "vw_orderbook",
                              "vw_orderbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_REF_TO_ORD" );

	if ( i_returncode != SUCC_BFR )
	***** Comment Ends in Ver 7.3 *****/
	i_returncode = fn_get_ordrdtls (&st_o_ordbook,c_ServiceName,c_err_msg.arr); /*** Ver 7.3 ***/
	if( i_returncode != 0 )		/*** Ver 7.3 ***/
	{
    fn_errlog( c_ServiceName, "S31090",LIBMSG,c_err_msg.arr);
	 	/*fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );   Commented In VQC	***/
	 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
 		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

  /****** Added  in Ver 7.0 *******/
	/** Ver 8.3 starts **/
	st_cntrct_ins.l_eba_cntrct_id = st_o_ordbook.l_eba_cntrct_id;
	strcpy( st_cntrct_ins.c_xchng_cd, st_o_ordbook.c_xchng_cd );
	st_cntrct_ins.c_prd_typ = st_o_ordbook.c_prd_typ;
	strcpy( st_cntrct_ins.c_undrlyng , st_o_ordbook.c_undrlyng  );
	strcpy( st_cntrct_ins.c_expry_dt,  st_o_ordbook.c_expry_dt );
	st_cntrct_ins.c_exrc_typ = st_o_ordbook.c_exrc_typ;
 	st_cntrct_ins.c_opt_typ = st_o_ordbook.c_opt_typ;
	st_cntrct_ins.l_strike_prc =  st_o_ordbook.l_strike_prc;
	st_cntrct_ins.c_ctgry_indstk = st_o_ordbook.c_ctgry_indstk;
  /** Ver 8.3 Ends **/
  i_returncode = fn_chk_und_insider(c_ServiceName,
                                    st_usr_prfl,
                                    /*st_o_ordbook.c_undrlyng,  ** Ver 8.3 comment **/
                                    st_cntrct_ins,					/** Ver 8.3 **/
                                    &insider_exist);
  if (i_returncode == -1)
  {
      fn_errlog( c_ServiceName, "S31095", "Error in Function fn_chk_und_insider", c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if (insider_exist == 1)
  {
      fn_errlog( c_ServiceName, "B91164", DEFMSG, c_err_msg.arr  ); /** Ver 8.3 B21042 changed to B91164 **/
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf, FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /******* Ver 7.0 Ends  *************/

    /*** Ver 6.4 Starts ***/

   rtrim(st_usr_prfl.c_cln_mtch_accnt);
   rtrim(st_o_ordbook.c_cln_mtch_accnt);


   /** if(DEBUG_MSG_LVL_0) Commented in Ver 6.8 **/
	 if(DEBUG_MSG_LVL_3) /** Ver 6.8 **/
   {
    fn_userlog(c_ServiceName,"Input Match Account Is :%s:",st_usr_prfl.c_cln_mtch_accnt);
    fn_userlog(c_ServiceName,"Order Book Match Account Is :%s:",st_o_ordbook.c_cln_mtch_accnt);
   }


   if( strcmp(st_o_ordbook.c_cln_mtch_accnt,st_usr_prfl.c_cln_mtch_accnt) != 0 )
     {
      fn_userlog(c_ServiceName,"Invalid Combination of Order Reference And Match Account.");
      fn_errlog(c_ServiceName, "S31100", "Invalid Combination of Order Reference And Match Account.", c_err_msg.arr);
      strcpy(c_err_msg.arr,"Invalid Combination of Order Reference And Match Account.");
      Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
     }

   /*** Ver 6.4 Ends   ***/

    l_ord_lmt_rt = st_o_ordbook.l_strike_prc;

    /*** Ver 4.4 Starts ***/

    if (st_o_ordbook.c_prd_typ ==  OPTIONPLUS )
    {
      if ( st_xchngbook.l_ord_tot_qty != st_o_ordbook.l_ord_tot_qty )
      {
        fn_userlog( c_ServiceName, "User is not allowed to modify FP SLTP order qty : Input Total ordered qty :%ld: and Order Book qty :%ld: ",st_xchngbook.l_ord_tot_qty,st_o_ordbook.l_ord_tot_qty);
        fn_errlog( c_ServiceName, "B22008",DEFMSG,c_err_msg.arr);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    /*** Ver 4.4 Ends   ***/

    /*** Ver 4.7 Starts ***/

    if((st_o_ordbook.c_prd_typ == 'I') && (st_xchngbook.c_slm_flg != MARKET))
    {
  		if( DEBUG_MSG_LVL_3) /*** Ver 6.6 ***/
  		{
      	fn_userlog( c_ServiceName, " Calling function fn_opls_vrfy_prc_band ...");
			}

      i_returncode = fn_opls_vrfy_prc_band  ( c_ServiceName,
                                              st_xchngbook.l_ord_lmt_rt,
                                              &st_o_ordbook,
                                              &st_err_msg );
      if ( i_returncode == -1 )
      {
        fn_errlog( c_ServiceName, "S31105", LIBMSG, c_err_msg.arr );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }

    /*** Ver 4.7 Ends ***/

    /**Call function for trading limit check **/
    i_returncode = fn_chk_trdng_limit(c_ServiceName,
                                      st_xchngbook.l_ord_tot_qty,
                                      l_ord_lmt_rt,
                                      &c_trdng_psswrd_flg,
                                      &st_usr_prfl,
                                      &st_err_msg );
    if ( i_returncode == -1 )
    {
      fn_errlog( c_ServiceName, "S31110", LIBMSG, c_err_msg.arr );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
/**Ver 2.1 ends **/

	if ( c_trdng_psswrd_flg == YES )
	{
  	SETLEN( c_usr_trd_psswrd ) ;
    strcpy( c_temp_psswrd, (char *)c_usr_trd_psswrd.arr );
	}

	/*** Commented in Ver 3.2 ***
  i_returncode =  fn_check_user ( c_ServiceName,
                                  &st_usr_prfl ,
                                  c_temp_psswrd,
                                  c_trdng_psswrd_flg,
                                  &st_err_msg );
	*****************************/
	/*** Added in Ver 3.2 ***/

	/*  If condiftion added in Ver 6.1 Starts  */
	if(c_usr_flg != 'W')
	{
		i_returncode =  fn_check_user_ip ( c_ServiceName,
											 &st_usr_prfl ,
											 c_temp_psswrd,
											 c_trdng_psswrd_flg,
											 c_ip_address,
                       c_txn_flg,                   /*** Ver 6.5 ***/
											 &st_err_msg );
		/*************************/

	  if ( i_returncode == -1 )
	  {
		 fn_errlog( c_ServiceName, "S31115", LIBMSG, c_err_msg.arr );
		 Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );

			/**Ver 2.7 starts**/
			if(c_trdng_psswrd_flg == 'Y')
			{
				i_actn_id = 1;
			}
			else
			{
				i_actn_id = -1;
		}

		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );  
		  /**Ver 2.7 ends**/
		Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
		Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
		 tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	  }
	}
	/*  Ver 6.1 Ends  */

	if(DEBUG_MSG_LVL_3)	/*** Ver 3.2 ***/
	{
		fn_userlog(c_ServiceName,"ip address:%s:",c_ip_address);
	}

  /*** Below query changed to capital case in Ver 7.2 ***/

	EXEC SQL
    /*** SELECT	to_char( exg_nxt_trd_dt, 'DD-Mon-YYYY' ), Commented In Ver 3.3 ***/
    SELECT	TO_CHAR( GREATEST(EXG_NXT_TRD_DT,EXG_TMP_TRD_DT), 'DD-Mon-YYYY' ),     /*** Ver 3.3 ***/
    				TO_CHAR( SYSDATE, 'DD-Mon-YYYY hh24:mi:ss' )
    INTO   	:c_trd_dt,
					  :c_sysdate	
    FROM		EXG_XCHNG_MSTR
    WHERE		EXG_XCHNG_CD = :st_xchngbook.c_xchng_cd
    /*** AND			EXG_MKT_TYP  = 'D';  Commented in Ver 7.2 ***/
    AND      EXG_MKT_TYP  = :c_exg_d_mkt_typ ; /*** variable used instead of hard coded value in Ver 7.2 ***/

  	if ( SQLCODE != 0 )
  	{
      fn_errlog( c_ServiceName, "S31120",SQLMSG,c_err_msg.arr);
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

 		SETNULL ( c_trd_dt );
 		SETNULL ( c_sysdate );
  	strcpy( st_xchngbook.c_mod_trd_dt, (char *) c_trd_dt.arr);

    /***1.1 start ***/

    if(st_usr_prfl.c_user_id[0] == BPID)
    {
      if(Fget32(ptr_fml_Ibuf,FFO_ALIAS,0,(char *)c_alias,0) == -1)
      {
            fn_errlog( c_ServiceName, "S31125", FMLMSG, c_err_msg.arr  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
            Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
            Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    /*** i_level_exists = 0;  Commented in VQC ***/
     
    /*** Ver 5.4 comment starts **

     EXEC SQL
        SELECT 1
        INTO   :i_level_exists
        FROM   clm_clnt_mstr
        WHERE  clm_mtch_accnt = :st_usr_prfl.c_cln_mtch_accnt
        AND    clm_bp_id      = :st_usr_prfl.c_user_id
        AND    clm_alias_name = :c_alias;

      	fn_userlog(c_ServiceName,"BP alias  is :%s:",c_alias);
      	fn_userlog(c_ServiceName,"BP channel  is :%s:",c_channel);

      if(i_level_exists != 1 )
 
      ** Ver 5.4 comment ends ***/

     if(strcmp(c_alias_nm,c_alias)!=0 )  /*** Ver 5.4 ***/ 
      {
            fn_errlog( c_ServiceName, "B55006", "", c_err_msg.arr  );
            Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
            Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
            Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
            tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      strcpy(c_bp_id,st_usr_prfl.c_user_id);
    }
    else
    {
      strcpy(c_bp_id," ");
    }
		
		/***1.1 ends ***/

	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr );
	if ( i_trnsctn == -1 )
	{
    fn_errlog( c_ServiceName, "S31130",LIBMSG,c_err_msg.arr);
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
	  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	strcpy ( st_o_ordbook.c_ordr_rfrnc,st_xchngbook.c_ordr_rfrnc);	/* st_i_ordbook is replaced with st_o_ordbook in Ver 7.3 */
	fn_cpy_ddr ( st_o_ordbook.c_rout_crt );	/* st_i_ordbook is replaced with st_o_ordbook in Ver 7.3 */
	st_o_ordbook.c_oprn_typ = FOR_UPDATE;	/* st_i_ordbook is replaced with st_o_ordbook in Ver 7.3 */

	i_ip_len = sizeof ( struct vw_orderbook );
	i_op_len = sizeof ( struct vw_orderbook );

	/***** Comment starts in Ver 7.3 ******
	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg.arr,
                              &st_i_ordbook,
                              &st_o_ordbook,
                              "vw_orderbook",
                              "vw_orderbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_REF_TO_ORD" );

	if ( i_returncode != SUCC_BFR )
	***** Comment Ends in Ver 7.3 *****/
	i_returncode = fn_get_ordrdtls (&st_o_ordbook,c_ServiceName,c_err_msg.arr); /*** Ver 7.3 ***/
  if( i_returncode != 0 )   /*** Ver 7.3 ***/
	{
    fn_errlog( c_ServiceName, "S31135",LIBMSG,c_err_msg.arr);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
	 	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
	  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	rtrim( st_o_ordbook.c_expry_dt );
	st_cntrct.l_eba_cntrct_id = st_o_ordbook.l_eba_cntrct_id;
	strcpy( st_cntrct.c_xchng_cd, st_o_ordbook.c_xchng_cd );
	st_cntrct.c_prd_typ = st_o_ordbook.c_prd_typ;
	strcpy( st_cntrct.c_undrlyng , st_o_ordbook.c_undrlyng  );
	strcpy( st_cntrct.c_expry_dt,  st_o_ordbook.c_expry_dt );
	st_cntrct.c_exrc_typ = st_o_ordbook.c_exrc_typ;
 	st_cntrct.c_opt_typ = st_o_ordbook.c_opt_typ;
	st_cntrct.l_strike_prc =  st_o_ordbook.l_strike_prc;
	st_cntrct.c_ctgry_indstk = st_o_ordbook.c_ctgry_indstk;
	st_cntrct.l_ca_lvl = st_o_ordbook.l_ca_lvl;

	/******* added in ver 3.5 ************/

  if( DEBUG_MSG_LVL_5 )
  {
    fn_userlog(c_ServiceName, "Underlying is [%s] ", st_o_ordbook.c_undrlyng);
  }

  i_returncode=fn_chk_closeout(c_ServiceName,
                               st_usr_prfl.c_cln_mtch_accnt,
															 c_request_typ,
                               st_cntrct,
                               &st_xchngbook,
                               &st_err_msg);

  if( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31140", "Broker Under Closeout", c_err_msg.arr);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );    /*** Added in VQC ***/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG,st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /******** Ver 3.5 Ended **********/
 	i_returncode = fn_chk_cntrct(	c_ServiceName,
	                              &st_cntrct,
																&c_fum_mrkt_typ,     /*  Ver 2.2 */
																&c_fcm_mrkt_typ,     /*  Ver 2.2 */
 		                            &st_err_msg );

  if ( i_returncode == -1 )
  {
		 fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
     Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
     Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
     Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
     Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
     tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if ( i_returncode == -2 )   /*** Ver 4.2 ***/
  {

    l_tmp_ord_tot_qty = st_o_ordbook.l_ord_tot_qty ;
    st_o_ordbook.l_ord_tot_qty =  st_xchngbook.l_ord_tot_qty - st_o_ordbook.l_ord_tot_qty ; /** Getting the deficit ***/

  	if( DEBUG_MSG_LVL_3) /*** Ver 6.6 ***/
  	{
    	fn_userlog( c_ServiceName," st_o_ordbook.l_ord_tot_qty Is :%ld:" ,st_o_ordbook.l_ord_tot_qty);
		}
	
    c_fresh_ord_flg = '\0';

    i_returncode = fn_chk_frsh_cover_ord  ( c_ServiceName,
                                         &st_o_ordbook,
                                         &c_fresh_ord_flg,
                                         &st_err_msg
                                       );

    if ( i_returncode == -1 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );    /**Ver 2.7**/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }


  	if( DEBUG_MSG_LVL_3) /*** Ver 6.6 ***/
  	{
      fn_userlog( c_ServiceName,"--- c_fresh_ord_flg Is :%c:" ,c_fresh_ord_flg);
		}
	
    if ( c_fresh_ord_flg == 'Y' )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr);
      fn_errlog( c_ServiceName, "B29030", DEFMSG, c_err_msg.arr );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

    }
    else if (c_fresh_ord_flg == 'N' )
    {
      if( DEBUG_MSG_LVL_3 )
      {
        fn_userlog( c_ServiceName," This is not fresh order ...allow order modification" );
      }
    }

    st_o_ordbook.l_ord_tot_qty = l_tmp_ord_tot_qty ;

  }

	/*** Commented Ver 5.3 ****
	
	i_ip_len = sizeof ( struct vw_contract );
	i_op_len = sizeof ( struct vw_cntrct_qt );

	fn_cpy_ddr ( st_cntrct.c_rout_crt );
	i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg.arr,
                              &st_cntrct,
                              &st_cntrct_qt,
                              "vw_contract",
                              "vw_cntrct_qt",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_GET_QT" );
	***** ver 5.3 comment ends ******/

  /*** Commented in Ver 7.6 ***
	**** ver 5.3 Start ****

	i_returncode = fn_get_qt( c_ServiceName,
											  		&st_cntrct,
                            &st_cntrct_qt,
                            c_err_msg.arr );
	**** Ver 5.3 Ends ****
  *** Ver 7.6 Comment Ends ***/

  /*** Ver 7.6 Starts ***/

  i_returncode = fn_get_quote(c_ServiceName,
                              &st_cntrct,
                              &st_cntrct_qt,
                              &c_setlmnt_flg,
                              &c_dlvry_pos_allwd,
															&c_buy_allwd,   /*** ver 8.4 ***/
                              &c_sell_allwd,  /*** ver 8.4 ***/
                              &c_mrkt_ordr_flg, /**** ver 8.5 ***/
                              c_err_msg.arr);

  /*** Ver 7.6 Ends ***/

	if ( i_returncode != SUCC_BFR )
	{
    fn_errlog( c_ServiceName, "S31145",LIBMSG,c_err_msg.arr);
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
	  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

    /**** ver 8.5 starts *******/
  if(DEBUG_MSG_LVL_3)
  { 
    fn_userlog( c_ServiceName, "c_mrkt_ordr_flg :%c:, c_user_id :%s:, c_slm_flg :%c:",c_mrkt_ordr_flg, st_usr_prfl.c_user_id, st_xchngbook.c_slm_flg);
  }

  if(st_cntrct.c_prd_typ == 'O')
  { 
    if( c_mrkt_ordr_flg == 'N' && ( strcmp(st_usr_prfl.c_user_id,"system") != 0) && (st_xchngbook.c_slm_flg == MARKET))
    {
    fn_errlog( c_ServiceName, "B20090", "", c_err_msg.arr  );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
 }
  /**** ver 8.5 ends*******/


	/*** Commented in Ver 7.7	***
  *** Ver 7.6 Starts ***

	if ( st_cntrct.c_prd_typ != 'P' && st_cntrct.c_prd_typ != 'U' && st_cntrct.c_prd_typ != 'I')
	{
  	if ( c_dlvry_pos_allwd == 'N' )
  	{
    	fn_userlog( c_ServiceName,"Currently trading is not allowed in this contract.");
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    	strcpy(c_err_msg.arr,"Currently trading is not allowed in this contract.");
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
    	Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
	}
  *** Ver 7.6 Ends ***	*** Ver 7.7 ***/

	/*** Ver 7.7 Starts ***/

	fn_userlog(c_ServiceName,"st_xchngbook.c_ordr_flw :%c:  c_sell_allwd :%c: >>>>>>>>>>>>>>>>",st_xchngbook.c_ordr_flw,c_sell_allwd);
  /** if ( c_dlvry_pos_allwd == 'N' )  COMMENTED IN Ver 8.4 ***/
	if((c_dlvry_pos_allwd == 'N' && st_xchngbook.c_ordr_flw == 'B' &&  c_buy_allwd == 'N') || (c_dlvry_pos_allwd == 'N' && st_xchngbook.c_ordr_flw == 'S' && c_sell_allwd == 'N')) /** Added in Ver 8.4 **/ 
  {

		fn_userlog(c_ServiceName,"TESTING : Inside loop ---- st_xchngbook.c_ordr_flw :%c:  c_sell_allwd :%c: c_buy_allwd :%c:>>>>>>>>>>>>>>>>",st_xchngbook.c_ordr_flw,c_sell_allwd, c_buy_allwd);
    i_phy_sqroff_check = 1;
  }

	/*** Ver 7.7 Ends ***/

	if ( (st_xchngbook.c_slm_flg == MARKET) && (st_xchngbook.c_ordr_flw == SELL)  )
	{

  /****** Ver 4.3 Start ******/

  /*** Below query changed to capital case in Ver 7.2 ***/ 

  EXEC SQL
      SELECT NVL(FTQ_BST1_BID_QTY,0),
             NVL(FTQ_BST2_BID_QTY,0),
             NVL(FTQ_BST3_BID_QTY,0),
             NVL(FTQ_BST4_BID_QTY,0),
             NVL(FTQ_BST5_BID_QTY,0),
						 NVL(FTQ_BST1_BID_PRC,0),   /*** Ver 7.7 ***/
           	 NVL(FTQ_BST1_OFFR_PRC,0),  /*** Ver 7.7 ***/
           	 NVL(FTQ_CLS_PRC,0)    			/*** Ver 7.7 ***/
      INTO   :st_cntrctlong_qt.l_bst_bid_qty[0],
             :st_cntrctlong_qt.l_bst_bid_qty[1],
             :st_cntrctlong_qt.l_bst_bid_qty[2],
             :st_cntrctlong_qt.l_bst_bid_qty[3],
             :st_cntrctlong_qt.l_bst_bid_qty[4],
						 :l_best_bid_price,         /*** Ver 7.7 ***/
           	 :l_best_offer_price,       /*** Ver 7.7 ***/
           	 :l_previous_close_price    /*** Ver 7.7 ***/
      FROM   FTQ_FO_TRD_QT
      WHERE  FTQ_XCHNG_CD  = :st_cntrct.c_xchng_cd
      AND   FTQ_PRDCT_TYP = DECODE(:st_cntrct.c_prd_typ,'I','O',:st_cntrct.c_prd_typ)		/*** decode added in Ver 4.4 ***/
      AND   FTQ_UNDRLYNG  = :st_cntrct.c_undrlyng
      AND   FTQ_EXPRY_DT  = TO_DATE ( :st_cntrct.c_expry_dt,'dd-Mon-yyyy' )
      AND   FTQ_EXER_TYP  = :st_cntrct.c_exrc_typ
      AND   FTQ_OPT_TYP   = :st_cntrct.c_opt_typ
      AND   FTQ_STRK_PRC  = :st_cntrct.l_strike_prc;

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
			if(st_o_ordbook.c_prd_typ != OPTIONPLUS )     /*** Check Added in Ver 4.6 ***/
      {
      	fn_errlog( c_ServiceName, "S31150", SQLMSG, c_err_msg.arr  );
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
    }
    else if (SQLCODE == NO_DATA_FOUND)
    {
			if(st_o_ordbook.c_prd_typ != OPTIONPLUS )     /*** Check Added in Ver 4.6 ***/
      {
      	fn_errlog ( c_ServiceName, "B28510", DEFMSG, c_err_msg.arr );
      	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
      	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
			}
    }

      li_max_sell_ordqty = (st_cntrctlong_qt.l_bst_bid_qty[0] + st_cntrctlong_qt.l_bst_bid_qty[1] + st_cntrctlong_qt.l_bst_bid_qty[2] + st_cntrctlong_qt.l_bst_bid_qty[3] + st_cntrctlong_qt.l_bst_bid_qty[4]) ;

  	if( DEBUG_MSG_LVL_3) /*** Ver 6.6 ***/
  	{
      fn_userlog(c_ServiceName,"st_xchngbook.l_ord_tot_qty is :%ld:",st_xchngbook.l_ord_tot_qty);
      fn_userlog(c_ServiceName,"Total best 5 bid qty is :%ld:",li_max_sell_ordqty);
		}

/***     if (st_xchngbook.l_ord_tot_qty>li_max_sell_ordqty)		*** Commented in Ver 7.7 ***/
			if (st_xchngbook.l_ord_tot_qty>li_max_sell_ordqty && i_phy_sqroff_check !=1)	/*** Modified in Ver 7.7 ***/
      {
				if(st_o_ordbook.c_prd_typ != OPTIONPLUS )     /*** Check Added in Ver 4.6 ***/
        {
          fn_errlog( c_ServiceName, "B91116", DEFMSG, c_err_msg.arr  );
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
          Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
      }

/*** Ver 4.3 End ***/


		st_xchngbook.l_quote = st_cntrct_qt.l_lst_trdd_prc;
		/*** Ver 7.7 Starts ***/
    if ( st_xchngbook.l_quote == 0 && i_phy_sqroff_check == 1 )
    {
      i_returncode = fn_get_quote_zero(c_ServiceName,st_xchngbook.c_ordr_flw,l_best_bid_price,l_best_offer_price,l_previous_close_price,&l_quote_zero);

      if( i_returncode != 1 )
      {
				fn_userlog( c_ServiceName,"function fn_get_quote_zero failure");
				strcpy( c_err_msg.arr,"System Error.Contact Customer Support");
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
        tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
			}
		st_xchngbook.l_quote = l_quote_zero;
		if(DEBUG_MSG_LVL_5)
    {
        fn_userlog( c_ServiceName,"After fn_get_quote_zero st_xchngbook.l_quote is :%ld:",st_xchngbook.l_quote);
    }
    }
		/*** Ver 7.7 Ends ***/
		strcpy ( st_xchngbook.c_qt_tm,st_cntrct_qt.c_lst_trdd_time );
/****************************************************
   	st_o_ordbook.l_ord_lmt_rt = st_xchngbook.l_quote;
****************************************************/
	}


	/********** Ver 4.4 Starts ***************/

  if(st_o_ordbook.c_prd_typ == OPTIONPLUS )
  {
    MEMSET(c_sys_msg);
    i_err[0]  = Fget32(ptr_fml_Ibuf,FFO_SYS_MSG,0,(char *)c_sys_msg,0);
    i_ferr [0] = Ferror32;

    if ( i_err[0] == -1 )
    {
      if (Ferror32 != FNOTPRES)
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
        fn_errlog( c_ServiceName, "S31155", FMLMSG, c_err_msg.arr  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
      else if( Ferror32 == FNOTPRES )
      {
  			if( DEBUG_MSG_LVL_3) /*** Ver 6.6 ***/
  			{
        	fn_userlog(c_ServiceName," 666");
				}

        i_mtm_flg =2;       /* if called by OptionPLUS Customer from ASP */
      }
    }
    else /* success condition */
    {
  		if( DEBUG_MSG_LVL_3) /*** Ver 6.6 ***/
  		{
      	fn_userlog(c_ServiceName," 777");
      	fn_userlog(c_ServiceName,"c_sys_msg =:%s:",c_sys_msg); /* if called from backoffice EOS  */
			}

      if (strcmp(c_sys_msg,"EOS") == 0)
      {
        i_mtm_flg=1;
      }
    }

		i_err[0]= 0;
		i_ferr [0] = 0;

    /********Check whether trading on OptionPLUS is allowed******/
    if (i_mtm_flg == 2)
    {
			fn_userlog( c_ServiceName, "CR-ISEC14-144377 Index/Stock :%c:",  st_o_ordbook.c_ctgry_indstk );   /*** Added in Ver 8.2 ***/

     /*** Below query changed to capital case in Ver 7.2 ***/

     EXEC SQL
       SELECT /*** MTM_OP_ALLWD_STTS,
              MTM_OP_EOS_FLG Commented in Ver 8.2 ***/
							DECODE( :st_o_ordbook.c_ctgry_indstk,'I',MTM_OP_ALLWD_STTS,'S',MTM_OP_ALLWD_STTS_S,'N' ),		/*** Ver 8.2 ***/
							DECODE( :st_o_ordbook.c_ctgry_indstk,'I',MTM_OP_EOS_FLG,'S',MTM_OP_EOS_FLG_S,'N' )					/*** Ver 8.2 ***/ 
       INTO   :c_optpls_allwd_stts ,
              :c_optpls_eos_flg
       FROM   MTM_APPLN_STTS
       WHERE  MTM_XCHNG_CD =  :st_o_ordbook.c_xchng_cd
       AND    MTM_PIPE_ID  =  :st_o_ordbook.c_pipe_id;

      if( SQLCODE != 0 )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
        fn_errlog( c_ServiceName, "S31160", SQLMSG, c_err_msg.arr  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

  		if( DEBUG_MSG_LVL_3) /*** Ver 6.6 ***/
  		{
      	fn_userlog( c_ServiceName,"c_optpls_allwd_stts  =%c ",c_optpls_allwd_stts);
      	fn_userlog( c_ServiceName,"c_optpls_eos_flg =%c ",c_optpls_eos_flg);
			}

      if (c_optpls_allwd_stts  == 'N' || c_optpls_eos_flg =='Y' )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
        fn_errlog( c_ServiceName, "B35019",DEFMSG,c_err_msg.arr);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if (  c_optpls_eos_flg =='Y' )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
        fn_errlog( c_ServiceName, "B35020",DEFMSG,c_err_msg.arr);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
  }
   /********** Ver 4.4 Ends ***************/



  /****** Ver 1.3  ******/
  if ( (st_xchngbook.c_slm_flg == MARKET) && (st_xchngbook.c_ordr_flw == BUY) )
  {

   /*** Below query changed to capital case in Ver 7.2 ***/

    EXEC SQL
      SELECT NVL(FTQ_BST1_OFFR_QTY,0),
             NVL(FTQ_BST2_OFFR_QTY,0),
             NVL(FTQ_BST3_OFFR_QTY,0),
             NVL(FTQ_BST4_OFFR_QTY,0),
             NVL(FTQ_BST5_OFFR_QTY,0),
             NVL(FTQ_BST1_OFFR_PRC,0),
             NVL(FTQ_BST2_OFFR_PRC,0),
             NVL(FTQ_BST3_OFFR_PRC,0),
             NVL(FTQ_BST4_OFFR_PRC,0),
             NVL(FTQ_BST5_OFFR_PRC,0),
						 NVL(FTQ_BST1_BID_PRC,0),   /*** Ver 7.7 ***/
             NVL(FTQ_BST1_OFFR_PRC,0),  /*** Ver 7.7 ***/
             NVL(FTQ_CLS_PRC,0)    			/*** Ver 7.7 ***/
      INTO   :st_cntrctlong_qt.l_bst_offr_qty[0],
             :st_cntrctlong_qt.l_bst_offr_qty[1],
             :st_cntrctlong_qt.l_bst_offr_qty[2],
             :st_cntrctlong_qt.l_bst_offr_qty[3],
             :st_cntrctlong_qt.l_bst_offr_qty[4],
             :st_cntrctlong_qt.l_bst_offr_prc[0],
             :st_cntrctlong_qt.l_bst_offr_prc[1],
             :st_cntrctlong_qt.l_bst_offr_prc[2],
             :st_cntrctlong_qt.l_bst_offr_prc[3],
             :st_cntrctlong_qt.l_bst_offr_prc[4],
						 :l_best_bid_price,         /*** Ver 7.7 ***/
             :l_best_offer_price,       /*** Ver 7.7 ***/
             :l_previous_close_price    /*** Ver 7.7 ***/
      FROM   FTQ_FO_TRD_QT
      WHERE  FTQ_XCHNG_CD  = :st_cntrct.c_xchng_cd
       AND   FTQ_PRDCT_TYP = DECODE(:st_cntrct.c_prd_typ,'I','O',:st_cntrct.c_prd_typ)		/*** decode added in Ver 4.4 ***/
       AND   FTQ_UNDRLYNG  = :st_cntrct.c_undrlyng
       AND   FTQ_EXPRY_DT  = TO_DATE ( :st_cntrct.c_expry_dt,'dd-Mon-yyyy' )
       AND   FTQ_EXER_TYP  = :st_cntrct.c_exrc_typ
       AND   FTQ_OPT_TYP   = :st_cntrct.c_opt_typ
       AND   FTQ_STRK_PRC  = :st_cntrct.l_strike_prc;

    if(SQLCODE != 0 && SQLCODE != NO_DATA_FOUND)
    {
			if(st_o_ordbook.c_prd_typ != OPTIONPLUS )       /*** Check Added in Ver 4.6 ***/
      {
      	fn_errlog( c_ServiceName, "S31165", SQLMSG, c_err_msg.arr  );
    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
      	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
    }
    else if (SQLCODE == NO_DATA_FOUND)
    {
			if(st_o_ordbook.c_prd_typ != OPTIONPLUS )           /*** Check Added in Ver 4.6 ***/
      {
      	fn_errlog ( c_ServiceName, "B28510", DEFMSG, c_err_msg.arr );
    		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
      	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
      	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
			}
    }

    li_aval_ordqty = st_xchngbook.l_ord_tot_qty;

    if ( (li_aval_ordqty - st_cntrctlong_qt.l_bst_offr_qty[0]) > 0)
    {
      d_totordrval += st_cntrctlong_qt.l_bst_offr_qty[0] * st_cntrctlong_qt.l_bst_offr_prc[0];
      li_aval_ordqty -= st_cntrctlong_qt.l_bst_offr_qty[0];
      if ( (li_aval_ordqty - st_cntrctlong_qt.l_bst_offr_qty[1]) > 0)
      {
        d_totordrval += st_cntrctlong_qt.l_bst_offr_qty[1] * st_cntrctlong_qt.l_bst_offr_prc[1];
        li_aval_ordqty -= st_cntrctlong_qt.l_bst_offr_qty[1];
        if ( (li_aval_ordqty - st_cntrctlong_qt.l_bst_offr_qty[2]) > 0)
        {
          d_totordrval += st_cntrctlong_qt.l_bst_offr_qty[2] * st_cntrctlong_qt.l_bst_offr_prc[2];
          li_aval_ordqty -= st_cntrctlong_qt.l_bst_offr_qty[2];
          if ( (li_aval_ordqty - st_cntrctlong_qt.l_bst_offr_qty[3]) > 0)
          {
            d_totordrval += st_cntrctlong_qt.l_bst_offr_qty[3] * st_cntrctlong_qt.l_bst_offr_prc[3];
            li_aval_ordqty -= st_cntrctlong_qt.l_bst_offr_qty[3];
            if ( (li_aval_ordqty - st_cntrctlong_qt.l_bst_offr_qty[4]) > 0)
            {
							if(i_phy_sqroff_check!=1)   /*** Ver 7.7 ***/
              {
							if(st_o_ordbook.c_prd_typ != OPTIONPLUS )    /*** Check Added in Ver 4.6 ***/
              {
              	fn_errlog( c_ServiceName, "B56015", DEFMSG, c_err_msg.arr  );
								fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
              	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    						Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
                Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
                Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
              	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
							}
							}       /*** Ver 7.7 ***/
            }
            else /* for Offer qty 4 */
            {
              d_totordrval += li_aval_ordqty * st_cntrctlong_qt.l_bst_offr_prc[4];
            }
          }
          else /* for Offer qty 3 */
          {
            d_totordrval += li_aval_ordqty * st_cntrctlong_qt.l_bst_offr_prc[3];
          }
        }
        else /* for Offer qty 2 */
        {
          d_totordrval += li_aval_ordqty * st_cntrctlong_qt.l_bst_offr_prc[2];
        }
      }
      else /* for Offer qty 1 */
      {
        d_totordrval += li_aval_ordqty * st_cntrctlong_qt.l_bst_offr_prc[1];
      }
    }
    else /* for Offer qty 0 */
    {
      st_xchngbook.l_quote = st_cntrctlong_qt.l_bst_offr_prc[0];
      i_condition = 0;
    }

    if ( i_condition == 1)
    {
      st_xchngbook.l_quote = d_totordrval / st_xchngbook.l_ord_tot_qty;
    }

		/*** Ver 7.7 Starts ***/
    if ( i_phy_sqroff_check == 1 )
    {
			st_xchngbook.l_quote = st_cntrct_qt.l_lst_trdd_prc;
			if ( st_xchngbook.l_quote == 0 )
			{
      i_returncode = fn_get_quote_zero(c_ServiceName,st_xchngbook.c_ordr_flw,l_best_bid_price,l_best_offer_price,l_previous_close_price,&l_quote_zero);

      if( i_returncode != 1 )
      {
				fn_userlog( c_ServiceName,"function fn_get_quote_zero failure");
        strcpy( c_err_msg.arr,"System Error.Contact Customer Support");
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      st_xchngbook.l_quote = l_quote_zero;
			}
    }
    /*** Ver 7.7 Ends ***/

    strcpy ( st_xchngbook.c_qt_tm,
             (char *)st_cntrct_qt.c_lst_trdd_time );

  } /* end of "If MARKET & BUY order" */
  /****** Ver 1.3 end ******/

	i_returncode = fn_check_inp_opt( c_ServiceName,
                               		 &st_xchngbook, 
                               		 &st_cntrct_qt,
																	 c_fum_mrkt_typ,      /* Ver 2.2 */
                                   c_fcm_mrkt_typ,      /* Ver 2.2 */ 
                               		 &st_err_msg );
  if ( i_returncode == -1 )
  {
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
 		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	/* i_returncode = fn_lock_usr( c_ServiceName,
															st_usr_prfl.c_cln_mtch_accnt ); commented in 8.8 */
	i_returncode = fn_lock_fno( c_ServiceName, st_usr_prfl.c_cln_mtch_accnt ); /* Added in 8.8 */
	if ( i_returncode == -1 )
	{
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
	  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
  	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	/** Commented in Ver 5.4 ****
 
	i_ip_len = sizeof ( struct vw_contract );
  i_op_len = sizeof ( struct vw_cntrt_gen_inf );

	fn_cpy_ddr ( st_cntrct.c_rout_crt );
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg.arr,
                              &st_cntrct,
                              &st_cntrct_gen_inf,
                              "vw_contract",
                              "vw_cntrt_gen_inf",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_GETCNT_GEN" );

	if ( i_returncode != SUCC_BFR )
  {
    fn_errlog( c_ServiceName, "S31170",LIBMSG,c_err_msg.arr);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   **Ver 2.7**
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }	
	**** Ver 5.4 Comment Ends ***********/

	/*** Ver 5.4 Starts ***/

	/*** Commented in Ver 6.0  ***

	EXEC SQL
		SELECT FCM_LOT_SZ,
					 FCM_TCK_SZ
		INTO	 :st_cntrct_gen_inf.l_min_lot_qty, 
           :st_cntrct_gen_inf.l_tick_sz
		FROM	 FCM_FO_CNTRCT_MSTR
		WHERE	 FCM_XCHNG_CD  =:st_cntrct.c_xchng_cd
		AND   FCM_PRDCT_TYP ='O'
		 AND   FCM_UNDRLYNG  =:st_cntrct.c_undrlyng
    AND   FCM_EXPRY_DT  =:st_cntrct.c_expry_dt
    AND   FCM_EXER_TYP  = :st_cntrct.c_exrc_typ   
    AND   FCM_OPT_TYP   = :st_cntrct.c_opt_typ   
    AND   FCM_STRK_PRC  = :st_cntrct.l_strike_prc;

	*** Ver 6.0 commnet Ends ***/	

	/*** Ver 6.0 Starts ***/

	EXEC SQL
		SELECT FTQ_MIN_LOT_QTY,
           FTQ_TCK_SZ 
    INTO   :st_cntrct_gen_inf.l_min_lot_qty,
           :st_cntrct_gen_inf.l_tick_sz
    FROM   FTQ_FO_TRD_QT
    WHERE  FTQ_XCHNG_CD  =:st_cntrct.c_xchng_cd
    /*** AND    FTQ_PRDCT_TYP ='O'  Commented in Ver 7.2 ***/
    AND    FTQ_PRDCT_TYP = :c_opt_prd_typ  /*** variable used instead of hard coded value in Ver 7.2 ***/
    AND    FTQ_UNDRLYNG  =:st_cntrct.c_undrlyng
    AND    FTQ_EXPRY_DT  =:st_cntrct.c_expry_dt
    AND    FTQ_EXER_TYP  = :st_cntrct.c_exrc_typ
    AND    FTQ_OPT_TYP   = :st_cntrct.c_opt_typ
    AND    FTQ_STRK_PRC  = :st_cntrct.l_strike_prc;
	
	/*** Ver 6.0 Ends ***/

	if(SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31175", SQLMSG, c_err_msg.arr  );
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );    /*** Added in VQC ***/
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );    
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }
	
  /** if( DEBUG_MSG_LVL_0 ) Commented in Ver 6.8 **/
	if( DEBUG_MSG_LVL_3) /** Ver 6.8 **/
  {
    fn_userlog(c_ServiceName, " Trade Quote Lot Size Is  :%ld: ", st_cntrct_gen_inf.l_min_lot_qty);
    fn_userlog(c_ServiceName, " Trade Quote Tick Size Is :%ld: " , st_cntrct_gen_inf.l_tick_sz);
  }
	
	/** Ver 5.4 Ends **/

	i_returncode = fn_check_ord_opt( c_ServiceName,
                               		 &st_cntrct_gen_inf,
                               		 &st_xchngbook,
                               		 &st_o_ordbook, 
                               		 &st_err_msg );
  if ( i_returncode == -1 )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if ( st_xchngbook.c_slm_flg == MARKET )
	{
   	st_xchngbook.l_ord_lmt_rt = st_xchngbook.l_quote;
	}

	if ( st_xchngbook.c_slm_flg == MARKET  && st_o_ordbook.c_prd_typ == OPTIONPLUS ) /*** Addded in Ver 6.1 ***/
	{
		   	st_xchngbook.l_ord_lmt_rt = st_cntrct_qt.l_lst_trdd_prc;
	}

	/*** Ver 3.6 Starts ***/

  c_ord_val_flg = 'N';
  c_cumopn_val_flg = 'N';
  c_serv_call_flg = 'M';    /*** set to 'M' in case of modification ***/

  /**** Calculating Net modification value                                                        ****/
  /**** Here we are subtracting the old open val of the order calulated further in the function , ****/
  /**** while adding the new open val of the same  .Thus , the net value is the  total of the old ****/
  /**** open val and  the new open val  .                                                         ****/
  /**** Net Qty = [(New qty - Executed qty - cancelled qty)*new rate ]                            ****/
  /****         - [(Old qty - Executed qty - cancelled qty)*old rate ]                            ****/
  /**** Executed qty ,cancelled qty and old rate are from fod table                               ****/

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, " st_o_ordbook.l_ord_tot_qty :%ld:",st_o_ordbook.l_ord_tot_qty);
    fn_userlog( c_ServiceName, " st_o_ordbook.l_exctd_qty   :%ld:",st_o_ordbook.l_exctd_qty);
    fn_userlog( c_ServiceName, " st_o_ordbook.l_can_qty :%ld:",st_o_ordbook.l_can_qty);
    fn_userlog( c_ServiceName, " st_o_ordbook.l_ord_lmt_rt :%ld:",st_o_ordbook.l_ord_lmt_rt);
    fn_userlog( c_ServiceName, " l_ord_lmt_rt :%ld:",l_ord_lmt_rt);
  	fn_userlog(c_ServiceName,"Swati-----st_xchngbook.l_ord_lmt_rt is :%ld:",st_xchngbook.l_ord_lmt_rt);
  	fn_userlog(c_ServiceName,"Swati-----l_ord_lmt_rt is :%ld:",l_ord_lmt_rt);
  }

	l_old_rt		 = st_o_ordbook.l_ord_lmt_rt ;
  l_old_rt 		 = l_old_rt + l_ord_lmt_rt;          /*** Adding strike price to the old rate ***/
  l_ord_lmt_rt = l_ord_lmt_rt + st_xchngbook.l_ord_lmt_rt ;

	if(DEBUG_MSG_LVL_3)
  {
  	fn_userlog(c_ServiceName,"Swati--old -----l_old_rt is :%ld:",l_old_rt);
  	fn_userlog(c_ServiceName,"Swati--New -----l_ord_lmt_rt is :%ld:",l_ord_lmt_rt);
	}


  d_old_ord_val = ((double)st_o_ordbook.l_ord_tot_qty - (double)st_o_ordbook.l_exctd_qty - (double)st_o_ordbook.l_can_qty) *
                            (double)l_old_rt ;
  d_new_ord_val = ((double)st_xchngbook.l_ord_tot_qty - (double)st_o_ordbook.l_exctd_qty - (double)st_o_ordbook.l_can_qty) *
                            (double)l_ord_lmt_rt ;
  d_netadj_ord_val = d_new_ord_val - d_old_ord_val ;

  if(DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName, " d_new_ord_val :%lf:",d_new_ord_val);
    fn_userlog( c_ServiceName, " d_old_ord_val :%lf:",d_old_ord_val);
    fn_userlog( c_ServiceName, " d_netadj_ord_val :%lf:",d_netadj_ord_val);

  }
  /**Call function for Order Max limit check **/

  i_returncode = fn_chk_ord_max_limit(c_ServiceName,
                                      st_usr_prfl.c_cln_mtch_accnt ,
                                      st_xchngbook.l_ord_tot_qty,
                                      l_ord_lmt_rt,
                                      d_netadj_ord_val,
                                      c_serv_call_flg,
                                      st_xchngbook.c_slm_flg,
                                      st_xchngbook.c_xchng_cd,
                                      &c_ord_val_flg,
                                      &c_cumopn_val_flg,
                                      &st_err_msg );
  if ( i_returncode == -1 )
  {
    fn_errlog( c_ServiceName, "S31180", LIBMSG, c_err_msg.arr );
		fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	if(DEBUG_MSG_LVL_3)
  {
  	fn_userlog( c_ServiceName, "c_ord_val_flg     :%c:", c_ord_val_flg );
  	fn_userlog( c_ServiceName, "c_cumopn_val_flg :%c:", c_ord_val_flg );
	}

  if(c_cumopn_val_flg == 'Y')
  {
    fn_userlog( c_ServiceName, "Order Value exceeding max Cumulative open order value.");
    fn_errlog( c_ServiceName, "B21077", "DEFMSG", c_err_msg.arr  );
		fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
    strcat(c_err_msg.arr,st_err_msg.c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }
  if(c_ord_val_flg == 'Y')
  {
    fn_userlog( c_ServiceName, "Order value Exceeding Max Market/Limit value allowed.");
    fn_errlog( c_ServiceName, "B23035", "DEFMSG", c_err_msg.arr  );
		fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
    strcat(c_err_msg.arr,st_err_msg.c_err_msg);
    Fadd32(ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0);
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0);
  }


  /*** Ver 3.6 Ends   ***/

	/***	Commented In Ver 3.7
 	***  Ver 3.0 Starts  ***

  if ( strcmp(st_xchngbook.c_xchng_cd,"BFO") == 0 )
  {
    fn_userlog(c_ServiceName,"Inside BSE SLTP To Normal Conversion Check.");
    fn_userlog(c_ServiceName,"Order Reference Is :%s:",st_xchngbook.c_ordr_rfrnc);

    if ( st_xchngbook.c_slm_flg  != 'S' )
    {
      EXEC SQL
        SELECT  NVL(FOD_STP_LSS_TGR,0)
        INTO    :l_stp_loss_trgr
        FROM    FOD_FO_ORDR_DTLS
        WHERE   FOD_ORDR_RFRNC  = :st_xchngbook.c_ordr_rfrnc ;

      if ( SQLCODE != 0 )
      {
        fn_errlog( c_ServiceName, "S31185",SQLMSG,c_err_msg.arr);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if ( l_stp_loss_trgr != 0 )
      {
        fn_userlog(c_ServiceName,"Stop Loss Trigger Price Is :%ld:",l_stp_loss_trgr);
        fn_userlog(c_ServiceName,"Before Limit/Market/Stop Loss Flag Is :%c:",st_xchngbook.c_slm_flg);

        st_xchngbook.c_slm_flg  = 'S' ;

        fn_userlog(c_ServiceName,"After Limit/Market/Stop Loss Flag Is :%c:",st_xchngbook.c_slm_flg);

      }

    }

  }

  ***  Ver 3.0 Ends  ***
	
	Ver	3.7	Comment Ends	***/

	strcpy(st_d_xchngbk.c_ordr_rfrnc,st_xchngbook.c_ordr_rfrnc);
  st_d_xchngbk.l_mdfctn_cntr = st_o_ordbook.l_mdfctn_cntr ;
  st_d_xchngbk.c_oprn_typ = WITHOUT_ORS_MSG_TYP;

  i_ip_len = sizeof ( struct vw_xchngbook );
  i_op_len = sizeof ( struct vw_xchngbook );

	fn_cpy_ddr ( st_d_xchngbk.c_rout_crt );
	/*** Commented in Ver 7.3
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg.arr,
                              &st_d_xchngbk,
                              &st_d_xchngbk,
                              "vw_xchngbook",
                              "vw_xchngbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_REF_TO_OMD" );
	*** Comment End Ver 7.3 ***/
	i_returncode=fn_fo_ref_to_omd(&st_d_xchngbk,&st_d_xchngbk,&c_mtm_flg,&l_init_sltp_rt,&l_init_lmt_rt,&c_prcimp_flg_fxb,c_ServiceName,c_err_msg.arr);          /* SFO_REF_TO_OMD replaced with fn_fo_ref_to_omd in Ver 7.3 */
/* Ver 1.9  changes added for validation */

  if( strcmp( st_usr_prfl.c_user_id, "system" )  != 0)
  {
		
		if( ( strcmp ( st_o_ordbook.c_channel ,"SYS" ) == 0 ) || ( strcmp ( st_o_ordbook.c_channel ,"OFF" )  == 0
) )
		{
			fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
			fn_errlog( c_ServiceName, "B22008", DEFMSG, c_err_msg.arr );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
	    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
  		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );	
		}
		
    if ( st_o_ordbook.c_ordr_stts == ORDERED ) 
    {
      if( ( st_xchngbook.c_req_typ == CANCELLED ) && ( st_xchngbook.c_plcd_stts != REJECT ) )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, st_err_msg.c_err_msg );
        fn_errlog( c_ServiceName, "B28533", DEFMSG, c_err_msg.arr );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
    		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }
    }
  }

/* Ver 1.9 complete */

  /* if ( i_returncode != SUCC_BFR )	*** Commented in Ver 7.3 ***/
	if ( i_returncode == -1)      /*** Ver 7.3 ***/
  {
    fn_errlog( c_ServiceName, "S31190",LIBMSG,c_err_msg.arr);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	

  if ( st_o_ordbook.c_ordr_stts == REQUESTED )
  {
  	if( DEBUG_MSG_LVL_3) /*** Ver 6.6 ***/
  	{
			fn_userlog(c_ServiceName,"Inside Check For REQUESTED Status");
		}

    st_d_xchngbk.c_plcd_stts = ACCEPT;
    st_d_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;
    st_d_xchngbk.l_ors_msg_typ = ORS_NEW_ORD_RJCT;
    strcpy( st_d_xchngbk.c_ack_tm, (char *) c_sysdate.arr);
		
  	if( DEBUG_MSG_LVL_3) /*** Ver 6.6 ***/
  	{
			fn_userlog(c_ServiceName,"Entering Suspect Place: Sangeet"); /* 1.4*/
		}

    strcpy( st_d_xchngbk.c_entry_dt_tm, (char *) c_sysdate.arr); /* 1.4*/
    strcpy( st_d_xchngbk.c_xchng_rmrks, "MODIFIED BY CLIENT");/*1.4*/
		st_d_xchngbk.l_dwnld_flg = NOT_DOWNLOAD;
		st_d_xchngbk.d_jiffy = 0;
		st_d_xchngbk.l_bit_flg	=	0;			/***	Ver	2.6	***/
    st_d_xchngbk.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;

    i_ip_len = sizeof ( struct vw_xchngbook );
    i_op_len = sizeof ( struct vw_xchngbook );

		fn_cpy_ddr ( st_d_xchngbk.c_rout_crt );
		/*** Commented in Ver 7.3 ***
    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg.arr,
                                &st_d_xchngbk,
                                &st_d_xchngbk,
                                "vw_xchngbook",
                                "vw_xchngbook",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_UPD_XCHNGBK" );
		*************************/
		/*** Added in Ver 7.3 ***/
    i_returncode = fn_upd_xchngbk  ( c_ServiceName,
                                   &st_d_xchngbk,
                                   c_ip_address,
                                   st_usr_prfl.c_cln_mtch_accnt,
                                   c_err_msg.arr,
                                   l_init_sltp_rt,
                                   l_init_lmt_rt,
                                   l_lTP,
                                   l_lmt_offset,
                                   l_trail_amt,
                                   c_prcimpv_flg,
                                   st_usr_prfl.l_session_id    /***ver 8.7 ***/ 
                                   );
		/*** Add ends in Ver 7.3 ***/
		if ( i_returncode != SUCC_BFR )
  	{
    	fn_errlog( c_ServiceName, "S31195",LIBMSG,c_err_msg.arr);
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

		fn_cpy_ddr ( st_d_xchngbk.c_rout_crt );
    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg.arr,
                                &st_d_xchngbk,
                                &st_d_xchngbk,
                                "vw_xchngbook",
                                "vw_xchngbook",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_OPT_ACK" );

  	if ( i_returncode != SUCC_BFR )
  	{
    	fn_errlog( c_ServiceName, "S31200",LIBMSG,c_err_msg.arr);
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}

	}   /* End of order in REQUESTED state */

  /** Ver 1.8 added to handle modification rejection in case of partial execution  **/

  if ( ( ( st_o_ordbook.c_ordr_stts == ORDERED ) || ( st_o_ordbook.c_ordr_stts == PARTIALLY_EXECUTED )) &&
     ( st_d_xchngbk.c_plcd_stts == 'R'     )   )  /* Request Placed */
  {
    st_d_xchngbk.c_plcd_stts = REJECT;
    st_d_xchngbk.c_rms_prcsd_flg = NOT_PROCESSED;
    /*** st_d_xchngbk.l_ors_msg_typ = ORS_MOD_ORD_RJCT; 	*** Commented in Ver 7.4 ***/
		/*** Ver 7.4 starts ***/
	  fn_userlog(c_ServiceName,"st_d_xchngbk.c_req_typ =:%c:",st_d_xchngbk.c_req_typ); 
		if (st_d_xchngbk.c_req_typ == CANCELLED )
		{
			   st_d_xchngbk.l_ors_msg_typ = ORS_CAN_ORD_RJCT;
		}
		else
		{
		    st_d_xchngbk.l_ors_msg_typ = ORS_MOD_ORD_RJCT;
		}
		/*** Ver 7.4 ends ***/
    strcpy( st_d_xchngbk.c_ack_tm, (char *) c_sysdate.arr);
		/*** Ver 7.4 starts ***/
		if (st_d_xchngbk.c_req_typ == CANCELLED )
		{
			strcpy( st_d_xchngbk.c_xchng_rmrks, "CANCELLED BY CLIENT");
		}
		else
		{
		/*** Ver 7.4 ends ***/
    strcpy( st_d_xchngbk.c_xchng_rmrks, "MODIFIED BY CLIENT");/*1.4*/
		} /*** Ver 7.4 ***/
		st_d_xchngbk.l_dwnld_flg = NOT_DOWNLOAD;
		st_d_xchngbk.d_jiffy = 0;
    st_d_xchngbk.l_bit_flg  = 0;      /***  Ver 2.6 ***/
    st_d_xchngbk.c_oprn_typ = UPDATION_ON_EXCHANGE_RESPONSE;
		fn_cpy_ddr ( st_d_xchngbk.c_rout_crt );

    i_ip_len = sizeof ( struct vw_xchngbook );
    i_op_len = sizeof ( struct vw_xchngbook );

		/***************** Commented in Ver 7.3 ************
    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg.arr,
                                &st_d_xchngbk,
                                &st_d_xchngbk,
                                "vw_xchngbook",
                                "vw_xchngbook",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_UPD_XCHNGBK" );
		************* Comment ends in Ver 7.3 ***********************/
		/*** Added in Ver 7.3 ***/
    i_returncode = fn_upd_xchngbk  ( c_ServiceName,
                                   &st_d_xchngbk,
                                   c_ip_address,
                                   st_usr_prfl.c_cln_mtch_accnt,
                                   c_err_msg.arr,
                                   l_init_sltp_rt,
                                   l_init_lmt_rt,
                                   l_lTP,
                                   l_lmt_offset,
                                   l_trail_amt,
                                   c_prcimpv_flg,
                                   st_usr_prfl.l_session_id    /***ver 8.7 ***/
                                   );
    /*** Add Ends for Ver 7.3 ***/

    if ( i_returncode != SUCC_BFR )
    {
    	fn_errlog( c_ServiceName, "S31205",LIBMSG,c_err_msg.arr);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

		fn_cpy_ddr ( st_d_xchngbk.c_rout_crt );
    i_returncode = fn_call_svc( c_ServiceName,
                                c_err_msg.arr,
                                &st_d_xchngbk,
                                &st_d_xchngbk,
                                "vw_xchngbook",
                                "vw_xchngbook",
                                i_ip_len,
                                i_op_len,
                                0,
                                "SFO_OPT_ACK" );

    if ( i_returncode != SUCC_BFR )
    {
    	fn_errlog( c_ServiceName, "S31210",LIBMSG,c_err_msg.arr);
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

	}

  strcpy(st_pstn_actn.c_user_id, st_usr_prfl.c_user_id);
  st_pstn_actn.l_session_id  = st_usr_prfl.l_session_id;
  strcpy(st_pstn_actn.c_cln_mtch_accnt,st_o_ordbook.c_cln_mtch_accnt);
  st_pstn_actn.l_eba_cntrct_id = st_cntrct.l_eba_cntrct_id;
  strcpy(st_pstn_actn.c_xchng_cd,st_cntrct.c_xchng_cd);
  st_pstn_actn.c_prd_typ = st_cntrct.c_prd_typ;
  strcpy(st_pstn_actn.c_undrlyng,st_cntrct.c_undrlyng);
  strcpy(st_pstn_actn.c_expry_dt,st_cntrct.c_expry_dt);
  st_pstn_actn.c_exrc_typ = st_cntrct.c_exrc_typ;
  st_pstn_actn.c_opt_typ = st_cntrct.c_opt_typ;
  st_pstn_actn.l_strike_prc = st_cntrct.l_strike_prc;
  st_pstn_actn.c_ctgry_indstk = st_cntrct.c_ctgry_indstk;
  st_pstn_actn.l_ca_lvl = st_cntrct.l_ca_lvl;
  st_pstn_actn.c_cntrct_tag = '*';

  st_pstn_actn.c_trnsctn_flw = st_o_ordbook.c_ordr_flw;
  st_pstn_actn.l_orgnl_qty = st_o_ordbook.l_ord_tot_qty;
  st_pstn_actn.l_orgnl_rt  = st_o_ordbook.l_ord_lmt_rt;
  st_pstn_actn.l_new_qty = st_xchngbook.l_ord_tot_qty;
  st_pstn_actn.l_new_rt  = st_xchngbook.l_ord_lmt_rt;
  st_pstn_actn.l_exec_qty  = st_o_ordbook.l_exctd_qty;
  st_pstn_actn.l_exec_rt  = 0;
  st_pstn_actn.l_fresh_qty  = 0;
  st_pstn_actn.l_cover_qty  = 0;
  st_pstn_actn.d_add_mrgn_amt  = 0;

  st_pstn_actn.l_curr_rt = st_cntrct_qt.l_lst_trdd_prc;

  sprintf(st_pstn_actn.c_ref_rmrks,"%s-%ld",st_o_ordbook.c_ordr_rfrnc,
                               st_o_ordbook.l_mdfctn_cntr + 1);
  rtrim(st_pstn_actn.c_ref_rmrks);

  if ( st_o_ordbook.c_ordr_stts == REQUESTED )
	{
  	st_pstn_actn.l_actn_typ = ORS_NEW_ORD_REQ;
	}
	else
	{
  	st_pstn_actn.l_actn_typ = ORS_MOD_ORD_REQ;
	}

  i_ip_len = sizeof ( struct vw_pstn_actn );
  i_op_len = sizeof ( struct vw_pstn_actn );

	fn_cpy_ddr ( st_pstn_actn.c_rout_crt );

	if ( st_pstn_actn.c_prd_typ != 'I')  /*** Ver 4.4 --If condition Added ***/
	{	
  	i_returncode = fn_call_svc( c_ServiceName,
    	                          c_err_msg.arr,
      	                        &st_pstn_actn,
        	                      &st_pstn_actn,
          	                    "vw_pstn_actn",
            	                  "vw_pstn_actn",
              	                i_ip_len,
                	              i_op_len,
                  	            0,
                    	          "SFO_UPD_OPT_POS" );
  	if ( i_returncode !=  SUCC_BFR )
  	{
    	 /* 4.0 Starts */
    	if(i_returncode == INSUFFICIENT_LIMITS)
    	{
      	c_insuff_flg = 'Y';
      	strcpy(c_err_msg.arr,strtok(c_err_msg.arr,"|"));
      	d_required_amt = atof(strtok(NULL,"|"));
  			if( DEBUG_MSG_LVL_3) /*** Ver 6.6 ***/
  			{
      		fn_userlog(c_ServiceName,"c_err_msg.arr :%s:",c_err_msg.arr);
      		fn_userlog(c_ServiceName,"d_required_amt :%lf:",d_required_amt);
				}
    	}
      	Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
      	Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
    	/* 4.0 Ends */

    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
			/*** Ver 5.0  Starts ***/
     	c_actn_flg = 'M' ;
     	i_returncode = 0 ;
     	i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr );
     	if ( i_trnsctn == -1 )
     	{
        fn_errlog( c_ServiceName, "S31215",LIBMSG,c_err_msg.arr);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     	}
     	i_returncode =  fn_ins_ffl_log_tbl  (    c_ServiceName,
      	                                       st_o_ordbook,
        	                                     c_err_msg.arr,
          	                                   d_required_amt ,
            	                                 c_actn_flg
              	                            );
     	if ( i_returncode != 0 )
     	{
        fn_errlog( c_ServiceName, "S31220", LIBMSG, c_err_msg.arr  );
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

     	}

      if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )
     	{
        fn_errlog( c_ServiceName, "S31225",LIBMSG,c_err_msg.arr);
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/  
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     	}

     	/*** Ver 5.0  Ends   ***/
    	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
   		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
    	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
	}
	else if ( st_pstn_actn.c_prd_typ == OPTIONPLUS ) /*** Ver 4.4 Starts ***/
	{
		/*** Ver 6.1 starts here ***/
		EXEC SQL
		  SELECT
				FOD_FC_FLAG
		 INTO
			  :c_fc_flag
		  FROM FOD_FO_ORDR_DTLS
		  WHERE FOD_ORDR_RFRNC = :st_o_ordbook.c_ordr_rfrnc;
		if(SQLCODE != 0)
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
			fn_errlog( c_ServiceName, "S31230", SQLMSG, c_err_msg.arr  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);    
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}

  		if( DEBUG_MSG_LVL_3) /*** Ver 6.6 ***/
  		{
				fn_userlog(c_ServiceName,"st_xchngbook.c_slm_flg : %c", st_xchngbook.c_slm_flg);
			}

		if((st_xchngbook.c_slm_flg != MARKET) && (c_fc_flag == 'F'))	
		{
			EXEC SQL
			SELECT	NVL(FUM_SLTPFP_LMT_ALLWD_FLG ,'N') 
			INTO	 :c_sltpfp_lmt_allwd_flg 
			FROM	  FUM_FO_UNDRLYNG_MSTR 
			WHERE	  FUM_UNDRLYNG = :st_cntrct.c_undrlyng 
			/*** AND FUM_PRDCT_TYP = 'O';  Commented in Ver 7.2 ***/
      AND FUM_PRDCT_TYP = :c_opt_prd_typ ; /*** variable used instead of hard coded value in Ver 7.2 ***/

			if(SQLCODE != 0)
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
				fn_errlog( c_ServiceName, "S31235", SQLMSG, c_err_msg.arr  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

  		if( DEBUG_MSG_LVL_3) /*** Ver 6.6 ***/
  		{
				fn_userlog(c_ServiceName,"c_sltpfp_lmt_allwd_flg : %c", c_sltpfp_lmt_allwd_flg);
			}

			if(c_sltpfp_lmt_allwd_flg == 'N')
			{
				fn_userlog(c_ServiceName, "******Only modification to market is allowed for the stock. Please select market as order type to modify your order.*********");
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
				fn_errlog( c_ServiceName, "B23104", DEFMSG, c_err_msg.arr  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
			  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);	
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );		
			}
		}
	  
		if(c_fc_flag == 'F')
		{
  
     /*** Below query changed to capital case in Ver 7.2 ***/
	
			EXEC SQL
			  SELECT
					FOD_SLTP_ORDR_RFRNC,
					FOD_ORDR_STTS
			  INTO
				  :c_sltp_ordr_refrnc,
				  :c_frsh_ordr_stts
			  FROM FOD_FO_ORDR_DTLS
			  WHERE FOD_ORDR_RFRNC = :st_o_ordbook.c_ordr_rfrnc;

			if(SQLCODE != 0)
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
				fn_errlog( c_ServiceName, "S31240", SQLMSG, c_err_msg.arr  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

      /*** Below query changed to capital case in Ver 7.2 ***/

			 EXEC SQL
			  SELECT
							FOD_ORDR_STTS
			  INTO
							:c_cvr_ordr_stts
			  FROM	FOD_FO_ORDR_DTLS
			  WHERE FOD_ORDR_RFRNC    = :c_sltp_ordr_refrnc;

			if(SQLCODE != 0)
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
				fn_errlog( c_ServiceName, "S31245", SQLMSG, c_err_msg.arr  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}
		else if(c_fc_flag == 'C')
		{

      /*** Below query changed to capital case in Ver 7.2 ***/

			EXEC SQL
			  SELECT
					FOD_SLTP_ORDR_RFRNC,
					FOD_ORDR_STTS
			  INTO
				  :c_sltp_ordr_refrnc,
				  :c_cvr_ordr_stts
			  FROM FOD_FO_ORDR_DTLS
			  WHERE FOD_ORDR_RFRNC = :st_o_ordbook.c_ordr_rfrnc;
			if(SQLCODE != 0)
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
				fn_errlog( c_ServiceName, "S31250", SQLMSG, c_err_msg.arr  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

			EXEC SQL
			  SELECT
					FOD_ORDR_STTS
			  INTO
				  :c_frsh_ordr_stts
			  FROM FOD_FO_ORDR_DTLS
			  WHERE      FOD_ORDR_RFRNC    = :c_sltp_ordr_refrnc;

			if(SQLCODE != 0)
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
				fn_errlog( c_ServiceName, "S31255", SQLMSG, c_err_msg.arr  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"c_fc_flag : %c ~ c_lmt_mrkt_flg : %c ~  c_frsh_ordr_stts : %c ",c_fc_flag, st_xchngbook.c_slm_flg, c_frsh_ordr_stts);
		}

		if(c_fc_flag == 'C' && st_xchngbook.c_slm_flg == 'M' && !(c_frsh_ordr_stts == EXECUTED))
		{
			fn_userlog(c_ServiceName, "******Modification of cover limit order to market is not allowed. Please check order status.*********");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
			fn_errlog( c_ServiceName, "B23103", DEFMSG, c_err_msg.arr  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0); 
			Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0); 
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );		
		}

		if(DEBUG_MSG_LVL_3)
		{
			fn_userlog(c_ServiceName,"c_fc_flag : %c ~ c_sltpfp_lmt_allwd_flg : %c ~ c_frsh_ordr_stts : %c ~ c_cvr_ordr_stts : %c ~ c_lmt_mrkt_flg : %c ",c_fc_flag, c_sltpfp_lmt_allwd_flg, c_frsh_ordr_stts, c_cvr_ordr_stts, st_xchngbook.c_slm_flg);
		}

		if(	!((c_frsh_ordr_stts == ORDERED && c_cvr_ordr_stts == ORDERED) ||
		   (c_frsh_ordr_stts == EXECUTED && c_cvr_ordr_stts == ORDERED) ||
		   (c_frsh_ordr_stts == EXECUTED && c_cvr_ordr_stts == PARTIALLY_EXECUTED)||
		   (c_frsh_ordr_stts == PARTIALLY_EXECUTED && c_cvr_ordr_stts == ORDERED)) )
		{
			fn_userlog(c_ServiceName, "******Modification of order is not allowed. Please check order status.*********");
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
			fn_errlog( c_ServiceName, "B23103", DEFMSG, c_err_msg.arr  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  
			Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);  
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );		
		}
		/*** Ver 6.1  Ends   ***/

  /** Get Cover order reference & fresh order status from FRESH order. **/

  /*** Below query changed to capital case in Ver 7.2 ***/

   EXEC SQL
     SELECT
           	FOD_SLTP_ORDR_RFRNC,
           	FOD_ORDR_STTS,
						FOD_ORDR_FLW ,
           	NVL(FOD_AMT_BLCKD,0),
           	NVL(FOD_LSS_AMT_BLCKD,0),
           	NVL(FOD_FC_FLAG,'*')
           /*** 	NVL(FOD_DIFF_AMT_BLCKD,0), 
           	NVL(FOD_DIFF_LSS_AMT_BLCKD,0)   Commented in VQC ***/
     INTO
         		:c_sltp_ordr_refrnc,
         		:c_frsh_ordr_stts,
						:c_cover_flw,
         		:d_amt_blkd,
         		:d_lss_amt_blkd,
         		:c_fc_flg
         		/*** :d_diff_amt_blckd, 
         		:d_diff_lss_amt_blckd   Commented in VQC ***/
     FROM 	FOD_FO_ORDR_DTLS
     WHERE 	FOD_ORDR_RFRNC = :st_o_ordbook.c_ordr_rfrnc;

   if( SQLCODE != 0 )
   {
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
       fn_errlog( c_ServiceName, "S31260", SQLMSG, c_err_msg.arr  );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
       Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
   }

	 if(DEBUG_MSG_LVL_3)
   {
     fn_userlog(c_ServiceName,"Match Account :%s:",st_o_ordbook.c_cln_mtch_accnt);
     fn_userlog(c_ServiceName,"Fresh order reference :%s:",c_sltp_ordr_refrnc);
     fn_userlog(c_ServiceName,"order status  :%c:", c_frsh_ordr_stts);
     fn_userlog(c_ServiceName,"Modification Counter :%ld:",st_o_ordbook.l_mdfctn_cntr);
     fn_userlog(c_ServiceName,"amt_blckd   :%lf:",d_amt_blkd);
     fn_userlog(c_ServiceName,"lss_amt_blckd :%lf:",d_lss_amt_blkd);
     /*** fn_userlog(c_ServiceName,"diff_amt_blckd :%lf:",d_diff_amt_blckd); 
     fn_userlog(c_ServiceName,"diff_lss_amt_blckd :%lf:",d_diff_lss_amt_blckd);  
     fn_userlog(c_ServiceName,"l_temp_stp_lss_tgr :%ld:",l_temp_stp_lss_tgr);  Commented in VQC ***/
	 }	


		if (c_temp_slm_flg == 'S')
		{
		 /*** check if the input limit rate is valid ***/

		 c_rqst_typ = 'S';

		 if(DEBUG_MSG_LVL_3)
		 {
			 fn_userlog(c_ServiceName,"st_usr_prfl.c_user_id :%s:",st_usr_prfl.c_user_id);
			 fn_userlog(c_ServiceName,"st_usr_prfl.l_session_id :%ld:",st_usr_prfl.l_session_id);
			 fn_userlog(c_ServiceName,"st_xchngbook.c_xchng_cd :%s:",st_xchngbook.c_xchng_cd);
			 fn_userlog(c_ServiceName,"c_cover_flw :%c:",c_cover_flw);
			 fn_userlog(c_ServiceName,"st_o_ordbook.c_undrlyng :%s:",st_o_ordbook.c_undrlyng);
			 fn_userlog(c_ServiceName,"st_usr_prfl.c_cln_mtch_accnt :%s:",st_usr_prfl.c_cln_mtch_accnt);
			 fn_userlog(c_ServiceName,"c_rqst_typ :%c:",c_rqst_typ);
			 fn_userlog(c_ServiceName,"st_pstn_actn.c_prd_typ :%c:",st_pstn_actn.c_prd_typ);
			 fn_userlog(c_ServiceName,"st_o_ordbook.c_opt_typ :%c:",st_o_ordbook.c_opt_typ);
			 fn_userlog(c_ServiceName,"st_o_ordbook.l_strike_prc :%ld:",st_o_ordbook.l_strike_prc);
			 fn_userlog(c_ServiceName,"st_xchngbook.l_stp_lss_tgr :%ld:",st_xchngbook.l_stp_lss_tgr);
			 fn_userlog(c_ServiceName,"st_pstn_actn.c_expry_dt :%s:",st_pstn_actn.c_expry_dt);
			 fn_userlog(c_ServiceName,"st_xchngbook.l_ord_lmt_rt :%ld:",st_xchngbook.l_ord_lmt_rt);
			 fn_userlog( c_ServiceName,"Cover Order ref:%s:",st_xchngbook.c_ordr_rfrnc);	
		 }

		 c_source_flg = 'M'; /*** Ver 5.6 Call from Modification ***/

		 i_returncode  = fn_call_svc_fml ( c_ServiceName,
																				 c_err_msg.arr,
																				 "SFO_LMT_PRC_CAL",
																				 0,
																				 14,			/*** Ver 5.6 changed from 12 to 13 ***changed from 13 to 14 in Ver 6.1***/
																				 1,
																				 FFO_USR_ID           			, (char *)st_usr_prfl.c_user_id ,
																				 FFO_SSSN_ID          			, (char *)&st_usr_prfl.l_session_id,
																				 FFO_XCHNG_CD         			, (char *)st_xchngbook.c_xchng_cd,
																				 FFO_ORDR_FLW         			, (char *)&c_cover_flw,
																				 FFO_UNDRLYNG         			, (char *)st_o_ordbook.c_undrlyng,
																				 FFO_EBA_MTCH_ACT_NO  			, (char *)st_usr_prfl.c_cln_mtch_accnt ,
																				 FFO_RQST_TYP								, (char *)&c_rqst_typ ,
																				 FFO_PRDCT_TYP							, (char *)&st_pstn_actn.c_prd_typ,        
																				 FFO_OPT_TYP								, (char *)&st_o_ordbook.c_opt_typ ,  
																				 FFO_STRK_PRC								, (char *)&st_o_ordbook.l_strike_prc ,                   
																				 FFO_STP_LSS_TGR						, (char *)&st_xchngbook.l_stp_lss_tgr,                   
																				 FFO_EXPRY_DT 							, (char *)st_pstn_actn.c_expry_dt ,
 																				 FFO_SOURCE_FLG             , (char *)&c_source_flg	,		/*** Ver 5.6 ***/
																				 FFO_ORDR_RFRNC             , (char *)&st_xchngbook.c_ordr_rfrnc,   /*** Ver 6.1 ***/
																				 FFO_LMT_RT									, (char *)&l_ret_limit_rt ,NULL
																			);

		 if ( i_returncode != 0 )
		 {
			  fn_userlog( c_ServiceName," Order ref:%s:",c_sltp_ordr_refrnc);
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
				fn_errlog( c_ServiceName, "S31265", LIBMSG, c_err_msg.arr );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
	      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
  			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		 }

		 if(DEBUG_MSG_LVL_3)
		 {
				fn_userlog(c_ServiceName,"l_ret_limit_rt :%ld:",l_ret_limit_rt);
		 }	

		 if( c_cover_flw == 'S' )
		 {
				if ( st_xchngbook.l_ord_lmt_rt > l_ret_limit_rt )
				{
					fn_errlog( c_ServiceName, "S31270","Limit and trigger price difference of cover order is less than the defined value" ,c_err_msg.arr);
					strcpy(c_err_msg.arr,"Limit and trigger price difference of cover order is less than the defined value");
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
	        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
          Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
  				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

		 }
		 else if ( c_cover_flw == 'B' )
		 {
				if ( st_xchngbook.l_ord_lmt_rt < l_ret_limit_rt )
				{
					fn_errlog( c_ServiceName, "S31275","Limit and trigger price difference of cover order is less than the defined value",c_err_msg.arr);
					strcpy(c_err_msg.arr,"Limit and trigger price difference of cover order is less than the defined value");
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
	        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
          Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
  				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}
		 }	
	 }

   if(c_fc_flg == 'C') /*Cover*/
   {
     d_amt_blkd = 0;
     d_lss_amt_blkd = 0;

     EXEC SQL
        SELECT     FOD_AMT_BLCKD,
                   FOD_LSS_AMT_BLCKD,
                   FOD_ORDR_FLW
        INTO       :d_amt_blkd,
                   :d_lss_amt_blkd,
                   :c_ord_flw
        FROM       FOD_FO_ORDR_DTLS
        WHERE      FOD_ORDR_RFRNC = :c_sltp_ordr_refrnc;

     if(SQLCODE != 0)
     {
       fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
       fn_errlog( c_ServiceName, "S31280", SQLMSG, c_err_msg.arr  );
       Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
       Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
       Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
       tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
     }

     if(DEBUG_MSG_LVL_3)
     {
       fn_userlog(c_ServiceName,"Margin Amount of the fresh order :%lf:", d_amt_blkd);
       fn_userlog(c_ServiceName,"Loss Amount of the fresh order :%lf:", d_lss_amt_blkd);
     }
   }

 	 /*Get the current margin percentage and sltp % diff. from the database */

   /*** Commented in VQC as host variables into which values are selected are not used *** 

    EXEC SQL
      SELECT NVL(FMM_SLTP_DIFF_PRCNT,0),
             NVL(FMM_SLTP_PRCNT,0) ,
              abs(:st_xchngbook.l_stp_lss_tgr - :st_xchngbook.l_ord_lmt_rt) 
      INTO   :d_fmm_sltp_diff_prcnt,
             :d_fmm_sltp_prcnt   ,
             :l_amt  
      FROM   FMM_FO_MRGN_MSTR
      *** WHERE  FMM_PRDCT_TYP= 'O'  Commented in Ver 7.2 ***
      WHERE  FMM_PRDCT_TYP = :c_opt_prd_typ  *** variable used instead of hard coded value in Ver 7.2 ***
      AND    FMM_UNDRLYNG = :st_o_ordbook.c_undrlyng
      AND    FMM_XCHNG_CD = :st_o_ordbook.c_xchng_cd
      AND    FMM_UNDRLYNG_BSKT_ID =(SELECT  FCB_UNDRLYNG_BSKT_ID
                             FROM    FCB_FO_CLN_BSKT_ALLTD
                             WHERE   FCB_CLN_LVL =(SELECT CLM_CLNT_LVL
                                                   FROM CLM_CLNT_MSTR
                                                   WHERE CLM_MTCH_ACCNT = :st_usr_prfl.c_cln_mtch_accnt));

    if( SQLCODE != 0 && SQLCODE != NO_DATA_FOUND )
    {
      fn_userlog(c_ServiceName,"******Invalid Stock Code*******");
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
      fn_errlog( c_ServiceName, "S31285", SQLMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    *** Ver 5.7 ***
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     *** Ver 5.7 ***
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }
    else if(SQLCODE != 0)
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
      fn_errlog( c_ServiceName, "S31290", SQLMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    *** Ver 5.7 ***
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     *** Ver 5.7 ***
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    *** VQC Comment Ends ***/

    if(DEBUG_MSG_LVL_3)
    {
     /*** fn_userlog(c_ServiceName,"SLTP Percentage   :%lf:", d_fmm_sltp_prcnt);
      fn_userlog(c_ServiceName,"SLTP diff. Percentage   :%lf:", d_fmm_sltp_diff_prcnt);  Commented in VQC ***/
      fn_userlog(c_ServiceName,"st_xchngbook.l_stp_lss_tgr  :%ld:", st_xchngbook.l_stp_lss_tgr);
      fn_userlog(c_ServiceName,"st_xchngbook.l_ord_lmt_rt   :%ld:", st_xchngbook.l_ord_lmt_rt);
      /*** fn_userlog(c_ServiceName,"l_amt   :%ld:", l_amt);  Commented in VQC ***/
    }


    /** Getting the total executed value and quantity of FRESH order. **/
    EXEC SQL
      SELECT  NVL(SUM(FTD_EXCTD_QTY * FTD_EXCTD_RT),0),
              NVL(SUM(FTD_EXCTD_QTY),0)
      INTO    :d_frsh_exe_val,
              :li_tot_exec_qty
      FROM    FTD_FO_TRD_DTLS
      WHERE   FTD_ORDR_RFRNC = :c_sltp_ordr_refrnc;

    if( SQLCODE != 0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
      fn_errlog( c_ServiceName, "S31295", SQLMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/  
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    /*** Ver 5.1 Starts ***/
    EXEC SQL
      SELECT  NVL((FOD_ORDR_TOT_QTY - (FOD_CNCL_QTY + FOD_EXPRD_QTY)),0)
      INTO    :l_tot_ord_qty
      FROM    FOD_FO_ORDR_DTLS
      WHERE   FOD_ORDR_RFRNC = :c_sltp_ordr_refrnc;


    if( SQLCODE != 0 )
    {
      fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
      fn_errlog( c_ServiceName, "S31300", SQLMSG, c_err_msg.arr  );
      Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
      tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
    }

    if(DEBUG_MSG_LVL_3)
    {
      fn_userlog(c_ServiceName,"li_tot_exec_qty = :%ld:", li_tot_exec_qty);
      fn_userlog(c_ServiceName,"l_tot_ord_qty   = :%ld:", l_tot_ord_qty );
    }

    /*** Ver 5.1 Ends ***/

    /** Checking if Fresh order value & quantity is equals to zero. */
	 /*** Ver 6.1 starts ***/
	if(c_usr_flg != 'W')
	{
		if (d_frsh_exe_val == 0 || li_tot_exec_qty == 0 || (l_tot_ord_qty != li_tot_exec_qty))
																													/*** Ver 5.1 check added for Part-excuted fresh order ***/
		{
		  fn_userlog(c_ServiceName, "******Fresh order is not yet executed.*********");
		  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
		  fn_errlog( c_ServiceName, "B23007", DEFMSG, c_err_msg.arr  );
		  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
		  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
		  Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
		  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}
	}
	/*** Ver 6.1 ends ***/

    if (c_fc_flg == 'C')
    {
      /*Check if the limit price and the trigger price of the cover order are in multiples of 5 paise*/

      if( (fn_5paisa(st_xchngbook.l_ord_lmt_rt)!= 0) &&
          (fn_5paisa(st_xchngbook.l_stp_lss_tgr)!= 0))
        {
          fn_errlog( c_ServiceName, "S31305","limit price and the trigger price of the cover order must be in multiples of paise ",c_err_msg.arr);
          strcpy(c_err_msg.arr,"limit price and the trigger price of the cover order must be in multiples of paise ");
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
          Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
          tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }

      /** Calculating the Weight Average Price for the executed quantity of FRESH Order. **/

			 if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"d_frsh_exe_val = :%lf:", d_frsh_exe_val );
        fn_userlog(c_ServiceName,"li_tot_exec_qty = :%ld:", li_tot_exec_qty );

      }


      /*** d_wgt_avrg_price = (double) (d_frsh_exe_val / li_tot_exec_qty);  Commented in VQC ***/


      /* Calculate open quantity */

     /*** Commented in VQC ***

      EXEC SQL
        SELECT  NVL( SUM( DECODE( FOD_FC_FLAG, 'C', -1 * FTD_EXCTD_QTY,FTD_EXCTD_QTY ) ), 0 )  ,
                NVL( SUM( DECODE( FOD_FC_FLAG, 'F', FTD_EXCTD_QTY, 0 ) ), 0 ) 
        INTO    :l_open_qty    ,
                :l_frsh_xtd_qty 
        FROM    FOD_FO_ORDR_DTLS, FTD_FO_TRD_DTLS
        WHERE   FOD_CLM_MTCH_ACCNT    = :st_o_ordbook.c_cln_mtch_accnt
        AND     FOD_TRD_DT            = :st_o_ordbook.c_trd_dt
        AND     FOD_PRDCT_TYP         = :st_o_ordbook.c_prd_typ
        AND     FTD_ORDR_RFRNC        = FOD_ORDR_RFRNC
        AND     DECODE( FOD_FC_FLAG, 'F', FOD_ORDR_RFRNC, FOD_SLTP_ORDR_RFRNC ) = :c_sltp_ordr_refrnc;

      if( SQLCODE != 0 )
      {
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
        fn_errlog( c_ServiceName, "S31310", SQLMSG, c_err_msg.arr  );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    *** Ver 5.7 ***
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     *** Ver 5.7 ***
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }

      if(l_open_qty <0 )
      {
        l_open_qty=0;
      }

			 if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName," st_o_ordbook.c_xchng_cd = :%s:", st_o_ordbook.c_xchng_cd);
        fn_userlog(c_ServiceName," st_o_ordbook.c_undrlyng = :%s:", st_o_ordbook.c_undrlyng);
        fn_userlog(c_ServiceName," c_ord_flw = :%c:", c_ord_flw );
        fn_userlog(c_ServiceName," l_temp_stp_lss_tgr = :%ld:", l_temp_stp_lss_tgr ); 
      }

			EXEC SQL
        SELECT NVL(FRM_DIFFRNC_MRGN,0)
        INTO   :d_frm_diffrnc_mrgn
        FROM   FRM_FO_RANGE_MSTR
        WHERE  FRM_XCHNG_CD  = TRIM(:st_o_ordbook.c_xchng_cd)
        AND    TRIM(FRM_UNDRLYNG ) = TRIM(:st_o_ordbook.c_undrlyng)
        AND    FRM_ORDR_FLOW = :c_ord_flw                  *** This is fresh order flw ***
				AND    FRM_FROM_RANGE <= :l_temp_stp_lss_tgr
				AND    :l_temp_stp_lss_tgr   < FRM_TO_RANGE
				*** AND 	 (:l_temp_stp_lss_tgr > 0 ) ;  *** Modified sltp trggr price is used *** 
	
      if ( SQLCODE  !=  0  && SQLCODE != NO_DATA_FOUND)
      {
        fn_errlog( c_ServiceName, "S31315",SQLMSG,c_err_msg.arr);
        fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
        Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    *** Ver 5.7 ***
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     *** Ver 5.7 ***
        tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
      }


	  if(DEBUG_MSG_LVL_3)
      {
        fn_userlog(c_ServiceName,"d_frm_diffrnc_mrgn = :%lf:", d_frm_diffrnc_mrgn);  
        fn_userlog(c_ServiceName,"l_open_qty = :%ld:", l_open_qty );
        fn_userlog(c_ServiceName,"d_wgt_avrg_price = :%lf:", d_wgt_avrg_price );
        fn_userlog(c_ServiceName,"d_fmm_sltp_prcnt = :%lf:", d_fmm_sltp_prcnt );
        fn_userlog(c_ServiceName,"st_xchngbook.l_ord_lmt_rt = :%ld:", st_xchngbook.l_ord_lmt_rt );
				
      }

     ****************** VQC Comment Ends *****************************/

	 /*** Ver 6.1 Starts ***/
      /* Calculate Margin amount to be blocked */
      /**d_amt_to_be_blckd = ((double)(l_open_qty * d_wgt_avrg_price) * d_fmm_sltp_prcnt / 100.0);**/

      /* Calculate Loss amount to be blocked */
      /*if ( c_ord_flw == BUY )
      {
				if( d_frm_diffrnc_mrgn < 100 && d_frm_diffrnc_mrgn != -1 )
        {
        	d_lss_amt_to_be_blckd =(l_open_qty * (d_wgt_avrg_price - st_xchngbook.l_ord_lmt_rt ) );
				}
				else if ( d_frm_diffrnc_mrgn == 100 )
        {
        	d_lss_amt_to_be_blckd =(l_open_qty * (d_wgt_avrg_price ) );
        }
        else if( d_frm_diffrnc_mrgn == -1 )
        {
          fn_userlog(c_ServiceName,"Entered SLTP is OutOff Range");
          fn_errlog( c_ServiceName, "S31320","Please Enter SLTP in Proper Range",c_err_msg.arr);
          fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
          Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
          Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);*/    /*** Ver 5.7 ***/
          /*Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);*/     /*** Ver 5.7 ***/
          /*tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
        }
      }
      else if ( c_ord_flw == SELL )
      {
         d_lss_amt_to_be_blckd =(l_open_qty * (d_wgt_avrg_price - st_xchngbook.l_ord_lmt_rt ) * -1 );
      }*/

    /*** Below query changed to capital case in Ver 7.2 ***/

		 EXEC SQL
	  SELECT
			FOD_FC_FLAG
	 INTO
		  :c_fc_flag
	  FROM FOD_FO_ORDR_DTLS
	  WHERE FOD_ORDR_RFRNC = :st_o_ordbook.c_ordr_rfrnc;
	if(SQLCODE != 0)
	{
		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
		fn_errlog( c_ServiceName, "S31325", SQLMSG, c_err_msg.arr  );
		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
	}

	if(c_fc_flag == 'C')
	{
		  EXEC SQL
		  SELECT
				FXB_LMT_RT
		  INTO
			  :l_fsh_ord_lmt_rt
		  FROM FXB_FO_XCHNG_BOOK
		  WHERE FXB_ORDR_RFRNC = :c_sltp_ordr_refrnc
		  AND FXB_MDFCTN_CNTR = (SELECT MAX(FXB_MDFCTN_CNTR) FROM FXB_FO_XCHNG_BOOK
		  WHERE FXB_ORDR_RFRNC = :c_sltp_ordr_refrnc);

			if(SQLCODE != 0)
			{
				fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
				fn_errlog( c_ServiceName, "S31330", SQLMSG, c_err_msg.arr  );
				Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
				Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
        Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
			}

		  i_returncode =  fn_cal_mrgn_sltp_op (c_ServiceName,
											c_sltp_ordr_refrnc,
											l_fsh_ord_lmt_rt, 
											st_xchngbook.l_ord_lmt_rt,
											&d_amt_to_be_blckd,
											&d_lss_amt_to_be_blckd,
                      c_ref_rmrks,  /*** Ver 8.1***/
                      &d_comp1_mrgn,/*** Ver 8.1***/
                      &d_comp1_pl,  /*** Ver 8.1***/
                      &d_xchng_amt, /*** Ver 8.1***/
                      &d_prem_amt,  /*** Ver 8.1***/
                      &d_spn_mrgn,  /*** Ver 8.1***/
                      &d_expr_mrgn, /*** Ver 8.1***/
											'U',
											c_err_msg.arr);
		  if ( i_returncode == -1 )
		  {
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );		/**Ver 2.7**/
			Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);  /***  Ver 5.5  ***/
			Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);   /***  Ver 5.5  ***/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		  }
		  else if( i_returncode == -2 )
		  {
			fn_userlog(c_ServiceName,"Entered SLTP is OutOff Range");
			fn_errlog( c_ServiceName, "S31335","Please Enter SLTP in Proper Range",c_err_msg.arr);
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID,(char *)&i_actn_id, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
			Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
			tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		  }
	  }
	  /*** Ver 6.1 ends here ***/

      /* Difference margin & loss */
      d_diff_amt = (double) d_amt_blkd - d_amt_to_be_blckd;
      d_diff_loss = (double) d_lss_amt_blkd - d_lss_amt_to_be_blckd;

      d_diff_amt = (long) (long) d_diff_amt;
      d_diff_loss = (long) (long) d_diff_loss;

       if(DEBUG_MSG_LVL_3)
      {
        /*** fn_userlog(c_ServiceName,"d_frm_diffrnc_mrgn = :%lf:", d_frm_diffrnc_mrgn);  Commented in VQC ***/
        fn_userlog(c_ServiceName,"d_amt_blkd = :%lf:", d_amt_blkd);
        fn_userlog(c_ServiceName,"d_amt_to_be_blckd = :%lf:", d_amt_to_be_blckd);
        fn_userlog(c_ServiceName,"d_diff_amt = :%lf:", d_diff_amt);

        fn_userlog(c_ServiceName,"d_lss_amt_blkd = :%lf:", d_lss_amt_blkd);
        fn_userlog(c_ServiceName,"d_lss_amt_to_be_blckd = :%lf:", d_lss_amt_to_be_blckd);
        fn_userlog(c_ServiceName,"d_diff_loss = :%lf:", d_diff_loss);
      }

        /* Not releasing the profit */
        /* Block difference in the margin amount */
				/***	Debit margin loss/profit when limit .																						***/              
				/***	DO NOT Release loss amount blocked  in case of  PROFIT .												***/              
				/***	In case of LOSS , deficit  loss amount is NOT released but  blocking is done .	***/ 
 
        strcpy( c_narration_id , ON_MODIFICATION_PLACEMENT);
        if(d_diff_amt < 0)	/***Ver 6.1 changed from != to < ***/
        {
          d_balance_amt = 0.0;

          if(DEBUG_MSG_LVL_3)
          {
            fn_userlog(c_ServiceName,"Block diff in margin amount");
          }
          i_returncode = fn_upd_limits( c_ServiceName,
                            &st_pstn_actn,
                            &st_err_msg,
                            c_narration_id,
                            DEBIT_WHEN_LIMIT,
                            d_diff_amt,
                            &d_balance_amt);

  			if( DEBUG_MSG_LVL_3) /*** Ver 6.6 ***/
  			{
        	fn_userlog(c_ServiceName,"st_err_msg = :%s:", st_err_msg);
				}


          if ( i_returncode != 0 )
          {
						switch (i_returncode)
            {
             case INSUFFICIENT_LIMITS :

                  c_insuff_flg = 'Y';
                  strcpy(c_err_msg.arr,strtok(st_err_msg.c_err_msg,"|"));
                  d_required_amt = atof(strtok(NULL,"|"));
                  if( d_lss_amt_to_be_blckd < 0 )
                  {
                    if( d_lss_amt_blkd < 0 )
                    {
                     d_required_amt = d_required_amt + ( ( (-1) * d_lss_amt_blkd ) / 100) ;
                    }
                  }
                  else if( d_diff_loss < 0 )
                  {
                    d_required_amt = d_required_amt + ( ( (-1) * d_diff_loss) / 100 );
                  }
                  fn_userlog(c_ServiceName,"c_err_msg.arr :%s:",c_err_msg.arr);
                  fn_userlog(c_ServiceName,"d_required_amt :%lf:",d_required_amt);
                  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
                  fn_errlog( c_ServiceName, "S31340", LIBMSG, c_err_msg.arr );
                  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
                  Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);

                  sprintf(st_err_msg.c_err_msg,"%s<%lf>",c_err_msg.arr,d_required_amt);

                  /*** Ver 5.8  Starts ***/
                  c_actn_flg = 'M' ;
                  i_returncode = 0 ;
                  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr );
                  if ( i_trnsctn == -1 )
                  {
                    fn_errlog( c_ServiceName, "S31345",LIBMSG,c_err_msg.arr);
                    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
                    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
                    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
                    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/ 
                    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                  }
                  i_returncode =  fn_ins_ffl_log_tbl  (    c_ServiceName,
                                                           st_o_ordbook,
                                                           c_err_msg.arr,
                                                           d_required_amt ,
                                                           c_actn_flg
                                                        );
                  if ( i_returncode != 0 )
                  {
                    fn_errlog( c_ServiceName, "S31350", LIBMSG, c_err_msg.arr  );
                    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
                    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
                    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
                    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
                    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
                    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

                  }

                  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )
                  {
                    fn_errlog( c_ServiceName, "S31355",LIBMSG,c_err_msg.arr);
                    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );  /*** Added in VQC ***/
                    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
                    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
                    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
                    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/ 
                    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                  }
                  /*** Ver 5.8  Ends   ***/

                  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
                  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
             default :
                  /**** Ver 4.2 Ends ***/
                  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
                  fn_errlog( c_ServiceName, "S31360", LIBMSG, c_err_msg.arr );
                  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
                  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
                  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
                  Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
            }
          }

          d_diff_amt = d_diff_amt - d_balance_amt ;
        }
		else /*** Ver 6.1 else loop added ***/
		{
			d_diff_amt = 0.0;	
		}

        /* Block difference in the loss amount */
        strcpy( c_narration_id , ON_MODIFICATION_PLACEMENT);
    
     /*** Ver 8.1 started ***/
      MEMSET(c_tmp_rmrks);
      strcpy ( c_tmp_rmrks,st_pstn_actn.c_ref_rmrks );
      sprintf(st_pstn_actn.c_ref_rmrks,"%s%s",c_ref_rmrks,c_tmp_rmrks);
      /*** Ver 8.1 ends ***/
 
		if( d_lss_amt_to_be_blckd < 0)
       {
			 d_diff_loss = 0.0;
  			if( DEBUG_MSG_LVL_3) /*** Ver 6.6 ***/
  			{
			 		fn_userlog(c_ServiceName,"Not releasing Profit.....");
				}
       } 
		else if(d_diff_loss < 0)
        {
          d_balance_amt = 0.0;

           if(DEBUG_MSG_LVL_3)
           {
             fn_userlog(c_ServiceName,"Block diff in loss amount");
          }

          i_returncode = fn_upd_limits( c_ServiceName,
                            &st_pstn_actn,
                            &st_err_msg,
                            c_narration_id,
                            DEBIT_WHEN_LIMIT,
                            d_diff_loss,
                            &d_balance_amt);


          if ( i_returncode != 0 )
          {
							switch (i_returncode)
              {
               case INSUFFICIENT_LIMITS:
                  c_insuff_flg = 'Y';
                  strcpy(c_err_msg.arr,strtok(st_err_msg.c_err_msg,"|"));
                  d_required_amt = atof(strtok(NULL,"|"));

  								/** if( DEBUG_MSG_LVL_0) Commented in Ver 6.8  *** Ver 6.6 ***/
									if( DEBUG_MSG_LVL_3) /** Ver 6.8 **/
  								{
                  	fn_userlog(c_ServiceName,"c_err_msg.arr :%s:",c_err_msg.arr);
                  	fn_userlog(c_ServiceName,"d_required_amt :%lf:",d_required_amt);
									}

                  fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
                  fn_errlog( c_ServiceName, "S31365", LIBMSG, c_err_msg.arr );
                  Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
                  Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);

                  sprintf(st_err_msg.c_err_msg,"%s<%lf>",c_err_msg.arr,d_required_amt);
                  
                   /*** Ver 5.8  Starts ***/
                  c_actn_flg = 'M' ;
                  i_returncode = 0 ;
                  i_trnsctn = fn_begintran( c_ServiceName, c_err_msg.arr );
                  if ( i_trnsctn == -1 )
                  {
                    fn_errlog( c_ServiceName, "S31370",LIBMSG,c_err_msg.arr);
                    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
                    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
                    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
                    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
                    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                  }
                  i_returncode =  fn_ins_ffl_log_tbl  (    c_ServiceName,
                                                           st_o_ordbook,
                                                           c_err_msg.arr,
                                                           d_required_amt ,
                                                           c_actn_flg
                                                        );
                  if ( i_returncode != 0 )
                  {
                    fn_errlog( c_ServiceName, "S31375", LIBMSG, c_err_msg.arr  );
                    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
                    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
                    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID , (char *)&i_actn_id , 0 );
                    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
                    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
                    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );

                  }

                  if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )
                  {
                    fn_errlog( c_ServiceName, "S31380",LIBMSG,c_err_msg.arr);
                    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );   /*** Added in VQC ***/
                    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
                    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
                    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
                    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
                    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
                  }
                  /*** Ver 5.8  Ends   ***/
                 

                  Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
                  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
                  tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
               default :
                  /**** Ver 4.2 Ends Here ****/
                   fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
                   fn_errlog( c_ServiceName, "S31385", LIBMSG, c_err_msg.arr );
                   Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, st_err_msg.c_err_msg, 0 );
                   Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
                   Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
                   Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
                   tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
              }
          }
          d_diff_loss = d_diff_loss  - d_balance_amt ;
				}
				else if(d_diff_loss >= 0)
				{
					d_diff_loss = 0.0;
				}

      strcpy ( st_pstn_actn.c_ref_rmrks, c_tmp_rmrks);    /**** Ver 8.1 ***/
      MEMSET(c_tmp_rmrks);                                    /**** Ver 8.1 ***/
				EXEC SQL
					UPDATE     FOD_FO_ORDR_DTLS
					SET        FOD_AMT_BLCKD     = :d_amt_blkd - :d_diff_amt,
										 FOD_LSS_AMT_BLCKD = :d_lss_amt_blkd - :d_diff_loss,
              			 FOD_SLTP_MRGN = :d_comp1_mrgn,/*** Ver 8.1 ***/
              			 FOD_SLTP_PL   = :d_comp1_pl,  /*** Ver 8.1 ***/
              			 FOD_SLTP_SEBI_MRGN = :d_xchng_amt, /*** Ver 8.1 ***/
              			 FOD_OPLUS_PREMIUM  = :d_prem_amt,  /*** Ver 8.1 ***/
              			 FOD_SPAN_MRGN = :d_spn_mrgn,       /*** Ver 8.1 ***/
              			 FOD_EXPR_MRGN = :d_expr_mrgn       /*** Ver 8.1 ***/
					WHERE      FOD_ORDR_RFRNC    = :c_sltp_ordr_refrnc;

				if(SQLCODE != 0)
				{
					fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
					fn_errlog( c_ServiceName, "S31390", SQLMSG, c_err_msg.arr  );
					Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
					Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
	        Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
          Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
  				tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
				}

	/*** Commented in Ver 6.1 ***/
	/*	d_diff_amt = 0.0;	

		EXEC SQL
			UPDATE     FOD_FO_ORDR_DTLS
			SET        FOD_DIFF_AMT_BLCKD      =  :d_diff_amt,
								 FOD_DIFF_LSS_AMT_BLCKD  =  :d_diff_loss
			WHERE      FOD_ORDR_RFRNC          = :st_o_ordbook.c_ordr_rfrnc;

		if(SQLCODE != 0)
		{
			fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
			fn_errlog( c_ServiceName, "S31395", SQLMSG, c_err_msg.arr  );
			Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
			Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);*/    /*** Ver 5.7 ***/
			/*Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);*/     /*** Ver 5.7 ***/
			/*tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
		}*/

    }
  } /*** Ver 4.4 ends here ***/	

	i_ip_len = sizeof ( struct vw_sequence );
  i_op_len = sizeof ( struct vw_sequence );

  strcpy( st_s_sequence.c_pipe_id, st_xchngbook.c_pipe_id );
  strcpy( st_s_sequence.c_trd_dt, st_xchngbook.c_mod_trd_dt );
  st_s_sequence.c_rqst_typ = GET_XCHNG_SEQ;

	fn_cpy_ddr ( st_s_sequence.c_rout_crt );
	/***************** Commented in Ver 7.3 ***
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg.arr,
                              &st_s_sequence,
                              &st_r_sequence,
                              "vw_sequence",
                              "vw_sequence",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_GET_SEQ" );
	************* Comment ends in Ver 7.3 ******/

	/*** Added in ver 7.3 ***/
  fn_userlog(c_ServiceName,"Before Calling function fn_get_seq ********** Test");
  i_returncode = fn_get_seq(c_ServiceName,c_err_msg.arr,st_s_sequence.c_pipe_id,&st_r_sequence.l_seq_num,st_s_sequence.c_rqst_typ);
  /*** Add ends in Ver 7.3 ***/
	if ( i_returncode != SUCC_BFR )
  {
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
   	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** l_xchng_seq_num = st_r_sequence.l_seq_num;  Commented in VQC ***/

	if ( ( st_xchngbook.c_ord_typ == GOOD_TILL_TODAY ) ||
       ( st_xchngbook.c_ord_typ == IMMEDIATE_OR_CANCEL ) )
	{
		strcpy ( st_xchngbook.c_valid_dt, (char *)c_trd_dt.arr ); 
	}

	st_xchngbook.l_mdfctn_cntr = st_o_ordbook.l_mdfctn_cntr + 1;

/*****************************************************************
	st_xchngbook.c_spl_flg = NORMAL_ORDER;
*****************************************************************/
	st_xchngbook.c_spl_flg = st_o_ordbook.c_spl_flg;

 /***	st_xchngbook.l_ord_seq = l_xchng_seq_num;  Commented in VQC ***/
  st_xchngbook.l_ord_seq = st_r_sequence.l_seq_num;  /*** Added in VQC ***/

 	if ( st_o_ordbook.c_ordr_stts == REQUESTED )
	{
		st_xchngbook.c_req_typ = NEW;
	}
	else
	{
		st_xchngbook.c_req_typ = MODIFY;
	}
	st_xchngbook.c_ex_ordr_typ = ORDINARY_ORDER;
	strcpy ( st_xchngbook.c_rqst_tm , (char *)c_sysdate.arr );
  st_xchngbook.c_plcd_stts = 'R'; /* Request Placed */
 	st_xchngbook.c_oprn_typ = INSERTION_ON_ORDER_MODIFICATION;

	/* Ver 2.3 Begins */
	if(c_fcm_mrkt_typ == EXTND_MRKT && c_fum_mrkt_typ == EXTND_MRKT )
	{
		 st_xchngbook.c_mkrt_typ = 'X';
	}
	else
	{
		st_xchngbook.c_mkrt_typ = 'N';
	}
	/* Ver 2.3 Ends */

	i_ip_len = sizeof ( struct vw_xchngbook );
 	i_op_len = sizeof ( struct vw_xchngbook );

	fn_cpy_ddr ( st_xchngbook.c_rout_crt );

	/*** Commented in Ver 3.2 ***
  i_returncode = fn_call_svc( c_ServiceName,
  	                          c_err_msg.arr,
                              &st_xchngbook,
                              &st_xchngbook,
                              "vw_xchngbook",
                              "vw_xchngbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_XCHNGBK" );
	*************************/

	/*** Added in Ver 3.2 ***/
	i_returncode = fn_upd_xchngbk  ( c_ServiceName,
																	 &st_xchngbook,
																	 c_ip_address,
																	 st_usr_prfl.c_cln_mtch_accnt,		/*** Ver 3.8 ***/
																	 c_err_msg.arr,
																	 l_init_sltp_rt,  /*** Ver 6.7 ****/       
																	 l_init_lmt_rt,   /*** Ver 6.7 ****/       
																	 l_lTP,           /*** Ver 6.7 ****/       
																	 l_lmt_offset,    /*** Ver 6.7 ****/       
																	 l_trail_amt,     /*** Ver 6.7 ****/       
																	 c_prcimpv_flg,   /*** Ver 6.7 ****/
                                   st_usr_prfl.l_session_id    /***ver 8.7 ***/         
																 );
	/************************/

	if ( i_returncode != SUCC_BFR )
  {
   	fn_errlog( c_ServiceName, "S31400",LIBMSG,c_err_msg.arr);
   	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
   	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

	/* Ver 2.3 Comment Begins

	*********************            Ver 2.2 Starts               ************************
  **** Code for temporary usage of immediate compliance release for extended market  ***
  **** Shall be aligned with order book and exchange book views in next view release ***

	if(c_fcm_mrkt_typ == EXTND_MRKT && c_fum_mrkt_typ == EXTND_MRKT )
	{
		EXEC SQL
  		UPDATE  fxb_fo_xchng_book
    	SET     fxb_mrkt_typ = 'X'
    	WHERE   fxb_ordr_rfrnc = :st_xchngbook.c_ordr_rfrnc
    	AND     fxb_mdfctn_cntr = :st_xchngbook.l_mdfctn_cntr ;

  	if(SQLCODE != 0)
  	{
  		fn_errlog ( c_ServiceName, "S31405", SQLMSG, c_err_msg.arr);
    	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
    	tpreturn ( TPFAIL, ERR_BFR, ( char * )ptr_fml_Ibuf, 0, 0 );
  	}
	}
	** Ver 2.2 Ends **

	Ver 2.3 Comment Ends */

  st_o_ordbook.c_oprn_typ = UPDATE_MOD_CNTR;

	i_ip_len = sizeof ( struct vw_orderbook );
  i_op_len = sizeof ( struct vw_orderbook );

	fn_cpy_ddr ( st_o_ordbook.c_rout_crt );
	/***** Comment starts in Ver 7.3 ******
  i_returncode = fn_call_svc( c_ServiceName,
                              c_err_msg.arr,
                              &st_o_ordbook,
                              &st_o_ordbook,
                              "vw_orderbook",
                              "vw_orderbook",
                              i_ip_len,
                              i_op_len,
                              0,
                              "SFO_UPD_ORDRBK" );

	if ( i_returncode != SUCC_BFR )
	***** Comment Ends in Ver 7.3 *****/
	i_returncode = fn_upd_ordrbook (c_ServiceName,c_err_msg.arr,&st_o_ordbook); /*** Ver 7.3 ***/
	if( i_returncode != 0 )	/*** Ver 7.3 ***/
  {
   	fn_errlog( c_ServiceName, "S31410",LIBMSG,c_err_msg.arr);
   	fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
   	Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  if ( st_o_ordbook.c_ordr_stts == REQUESTED )
	{
		st_o_ordbook.c_slm_flg = st_xchngbook. c_slm_flg;
		st_o_ordbook.l_dsclsd_qty = st_xchngbook.l_dsclsd_qty;
		st_o_ordbook.l_ord_tot_qty = st_xchngbook.l_ord_tot_qty;
		st_o_ordbook.l_ord_lmt_rt = st_xchngbook.l_ord_lmt_rt;
		st_o_ordbook.l_stp_lss_tgr = st_xchngbook.l_stp_lss_tgr;
		st_o_ordbook.c_ord_typ = st_xchngbook.c_ord_typ;
		strcpy( st_o_ordbook.c_valid_dt , st_xchngbook.c_valid_dt);
		strcpy( st_o_ordbook.c_trd_dt , st_xchngbook.c_mod_trd_dt);
		strcpy( st_o_ordbook.c_ack_tm , "\0");
		st_o_ordbook.c_oprn_typ = UPDATE_ORDER_MODIFICATION;
		fn_cpy_ddr ( st_o_ordbook.c_rout_crt );

		i_ip_len = sizeof ( struct vw_orderbook );
  	i_op_len = sizeof ( struct vw_orderbook );

		/***** Comment starts in Ver 7.3 ******
  	i_returncode = fn_call_svc( c_ServiceName,
                              	c_err_msg.arr,
                              	&st_o_ordbook,
                              	&st_o_ordbook,
                              	"vw_orderbook",
                              	"vw_orderbook",
                              	i_ip_len,
                              	i_op_len,
                              	0,
                              	"SFO_UPD_ORDRBK" );

		if ( i_returncode != SUCC_BFR )
		***** Comment Ends in Ver 7.3 *****/
		i_returncode = fn_upd_ordrbook (c_ServiceName,c_err_msg.arr,&st_o_ordbook); /*** Ver 7.3 ***/
    if( i_returncode != 0 )		/*** Ver 7.3 ***/
  	{
   		fn_errlog( c_ServiceName, "S31415",LIBMSG,c_err_msg.arr);
   		fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );
   		Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
   		Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
      Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
      Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/ 
  		tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  	}
	}

	if ( fn_committran( c_ServiceName, i_trnsctn, c_err_msg.arr ) == -1 )
  {
    fn_errlog( c_ServiceName, "S31420",LIBMSG,c_err_msg.arr);
    fn_aborttran( c_ServiceName, i_trnsctn, c_err_msg.arr );    /*** Added in VQC ***/ 
   	Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);    /*** Ver 5.7 ***/
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);     /*** Ver 5.7 ***/
   	tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }

  /*** Ver 8.9 : starts here ***/
  i_returncode = 0;

  i_returncode = fn_upd_nrmlmrgn_reporting( st_usr_prfl.c_cln_mtch_accnt ,
                                        st_xchngbook.c_xchng_cd,
                                        c_ServiceName,
                                        c_err_msg.arr);

  if ( i_returncode != 0 )
  {
    fn_errlog(c_ServiceName, "S31425", LIBMSG, c_err_msg.arr );
    fn_userlog(c_ServiceName,"Pls check, Nikhil Error while calling function fn_upd_mrgn_reporting..");
    Fadd32( ptr_fml_Ibuf, FFO_ERR_MSG, c_err_msg.arr, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );
    Fadd32( ptr_fml_Ibuf, FFO_BAL_AMT, (char *)&d_required_amt, 0);
    Fadd32( ptr_fml_Ibuf,FFO_MOD_CAN_FLG,(char *)&c_insuff_flg,0);
    tpreturn(TPFAIL, ERR_BFR, (char *)ptr_fml_Ibuf, 0, 0 );
  }
  /*** Ver 8.9 : Ends here ***/

	/********************************************************/
    /****Changes for Tux4 Triggers***************************/
    /********************************************************/
	/*
  fn_pst_trg( c_ServiceName, "TRG_LOOK_TAB", "TRG_LOOK_TAB",
                                st_xchngbook.c_pipe_id );
	*/

	/* To post the Trigger in Tux3 Domain Call the service SFO_FOS_TRG */
    /*** Commented in Ver 6.1 ***
	strcpy ( c_fno_dmn_nm, "FNO" );
    strcpy ( c_fno_trg_nm, "TRG_LOOK_TAB" );
    strcpy ( c_fno_trg_dat, "TRG_LOOK_TAB" );

    i_returncode = fn_call_svc_fml ( c_ServiceName,
                                    c_err_msg.arr,
                                    "SFO_FOS_TRG",
                                    0,
                                    4,
																		0,
                                    FFO_DMN_NM, (char *)c_fno_dmn_nm,
                                    FFO_TRG_NM, (char *)c_fno_trg_nm,
                                    FFO_ABT_TRG_DATA, (char *)c_fno_trg_dat,
                                    FFO_ABT_FILTER, (char *)st_xchngbook.c_pipe_id);

    if ( i_returncode != SUCC_BFR )
    {

      fn_errlog( c_ServiceName, "S31430", LIBMSG, c_err_msg.arr  );
    }***/

    /********************************************************/
    /****Changes for Tux4 Triggers***************************/
    /********************************************************/

 	i_actn_id = 0;    /**Ver 2.7**/
  Fadd32( ptr_fml_Ibuf, FFO_ACTN_ID, (char *)&i_actn_id, 0 );   /**Ver 2.7**/


	tpreturn( TPSUCCESS, 0, (char *)ptr_fml_Ibuf, 0 , 0 );		/**Ver 2.7 **/
}

int fn_check_inp_opt( char *c_ServiceName,
                  		struct vw_xchngbook *ptr_st_xchngbook, 
                  		struct vw_cntrct_qt *ptr_st_cntrct_qt,
											char c_fum_mrkt_typ,                 /* Ver 2.2 */
                  		char c_fcm_mrkt_typ,                 /* Ver 2.2 */ 
                  		struct vw_err_msg *ptr_st_err_msg )
{
	/*** int i_dategreater=0;
  int i_returncode;   Commented in VQC ***/
	char c_exg_crrnt_stts;
	char c_exg_extnd_stts;      /* Ver 2.2 */
	char c_exg_ovrnght_stts ;   /* Ver 3.3 */
	/*** double d_min_ordr_val=0.0;  Commented in VQC ***/
	double d_dsclsd_prcntg=0.0;
	/*** char c_err_msg[256];   
	long long	ll_ordr_val;
	long long ll_min_ordr_val; Commented in VQC ***/  


  /*** Below query changed to capital case in Ver 7.2 ***/

	EXEC SQL
     SELECT EXG_CRRNT_STTS,
						EXG_EXTND_MRKT_STTS,      /* Ver 2.2 */
						EXG_TMP_MKT_STTS,         /* Ver 3.3 */
						EXG_DSCLSD_PRCNTG
     INTO   :c_exg_crrnt_stts,
						:c_exg_extnd_stts,        /* Ver 2.2 */
						:c_exg_ovrnght_stts,      /* Ver 3.3 */
						:d_dsclsd_prcntg
     FROM   EXG_XCHNG_MSTR
     WHERE  EXG_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd;

	if ( SQLCODE != 0 )
	{
 		fn_errlog( c_ServiceName, "S31435",SQLMSG,ptr_st_err_msg->c_err_msg);
		return FAILURE;
	}

  /** Orders cannnot be modified when the Exchange is under Expiry **/
	/*** if ( c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY ) Commented In Ver 3.3 ***/
	if ( c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY   &&  ( c_exg_ovrnght_stts !=  EXCHANGE_OPEN ) ) /*** Ver 3.3 ***/
	{
		 /** Ver 2.2 Starts **/

		if( c_exg_extnd_stts == EXCHANGE_UNDER_EXPIRY ) 
		{
			fn_errlog( c_ServiceName, "B28518",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
		else if (c_fum_mrkt_typ == NORMAL_MRKT && ((ptr_st_xchngbook->c_slm_flg != MARKET) && (ptr_st_xchngbook->c_ord_typ != IMMEDIATE_OR_CANCEL )) )      /***  Underlying Level Check  ***/
		{
			fn_userlog( c_ServiceName,"This Underlying Is Disabled For Extended Market Hours");
      fn_errlog( c_ServiceName, "B66066",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
		else if ( c_fcm_mrkt_typ == NORMAL_MRKT && ((ptr_st_xchngbook->c_slm_flg != MARKET) && (ptr_st_xchngbook->c_ord_typ != IMMEDIATE_OR_CANCEL )) )     /***  Contract Level Check  ***/
		{
			fn_userlog( c_ServiceName,"This Contract Is Disabled For Extended Market Hours");
      fn_errlog( c_ServiceName, "B66066",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
		/*** Commented In Ver 2.2

 		fn_errlog( c_ServiceName, "B28518",DEFMSG,ptr_st_err_msg->c_err_msg);
		return FAILURE;

    ***/

		/** Ver 2.2 Ends **/
	} 

	if ( ( ptr_st_xchngbook->c_slm_flg == LIMIT ) ||
       ( ptr_st_xchngbook->c_slm_flg == STOP_LOSS ) )
	{
    /** Limit rate cannot be less than or equal to Zero for Limit orders **/
		if ( ptr_st_xchngbook->l_ord_lmt_rt <= 0 ) 
		{
 			fn_errlog( c_ServiceName, "B28519",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE;
		}

    /***  1.9 Added SL trigger price cannot be Zero for Stop Loss Order.  ***/
    if ( ( ptr_st_xchngbook->c_slm_flg == STOP_LOSS )	&& ( ptr_st_xchngbook->l_stp_lss_tgr == 0 ) 
			 )
    {
      fn_errlog( c_ServiceName,"S31440","Stop Loss trigger price cannot be Zero for Stop Loss Order.",ptr_st_err_msg->c_err_msg  );
      return FAILURE;
    }
	}
	else if ( ptr_st_xchngbook->c_slm_flg == MARKET )
	{
    /** Market orders can be placed only when the Exchange is open **/
		if ( c_exg_crrnt_stts != EXCHANGE_OPEN )
		{
			/*** Ver 2.2 Starts ***/

			if( c_exg_extnd_stts != EXCHANGE_OPEN )
			{
				fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
			else if (c_fum_mrkt_typ == NORMAL_MRKT )      /***  Underlying Level Check  ***/
      {
        fn_userlog( c_ServiceName,"This Underlying Is Disabled For Extended Market Hours");
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
      else if ( c_fcm_mrkt_typ == NORMAL_MRKT )     /***  Contract Level Check  ***/
      {
        fn_userlog( c_ServiceName,"This Contract Is Disabled For Extended Market Hours");
        fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
      }
      /*** Commented In Ver 2.2

 			fn_errlog( c_ServiceName, "B28520",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE;

			***/

			/*** Ver 2.2 Ends ***/
		} 

    /** Limit rate should be Zero for Market orders **/
		if ( ptr_st_xchngbook->l_ord_lmt_rt != 0 )
		{
 			fn_errlog( c_ServiceName, "B28521",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE;
		}

    if ( ptr_st_xchngbook->l_quote == 0 )
    {

      fn_errlog( c_ServiceName, "B28540",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
	}
  
  /*** 1.9 Added Cannot modify to Immediate or Cancel Order if Exchange is Not Open.***/
  if ( ( c_exg_crrnt_stts != EXCHANGE_OPEN ) &&  ( ptr_st_xchngbook->c_ord_typ == IMMEDIATE_OR_CANCEL ) )
  {
		/*** Ver 2.2 Starts ***/

		if( c_exg_extnd_stts != EXCHANGE_OPEN )
		{
			fn_errlog( c_ServiceName, "B28011",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
		else if (c_fum_mrkt_typ == NORMAL_MRKT)      /***  Underlying Level Check  ***/
    {
    	fn_userlog( c_ServiceName,"This Underlying Is Disabled For Extended Market Hours");
      fn_errlog( c_ServiceName, "B28011",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
    else if ( c_fcm_mrkt_typ == NORMAL_MRKT )     /***  Contract Level Check  ***/
    {
    	fn_userlog( c_ServiceName,"This Contract Is Disabled For Extended Market Hours");
      fn_errlog( c_ServiceName, "B28011",DEFMSG,ptr_st_err_msg->c_err_msg);
      return FAILURE;
    }
    /*** Commented In Ver 2.2

    fn_errlog( c_ServiceName, "B28011",DEFMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;

		***/

		/*** Ver 2.2 Ends ***/
  } 

  /*** 1.9 Added SLTP prc must not be present for Market or Limit Orders. ***/
  if((ptr_st_xchngbook->c_slm_flg == MARKET  || ptr_st_xchngbook->c_slm_flg == LIMIT) && ptr_st_xchngbook->l_stp_lss_tgr !=0)
  {
    fn_errlog( c_ServiceName,"S31445","Cannot enter Stop Loss trigger price for Market and Limit Ordres.",ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }

  /** Disclosed Quantity cannot be greater than the order qty **/
	if ( ptr_st_xchngbook->l_dsclsd_qty > ptr_st_xchngbook->l_ord_tot_qty )
	{
 			fn_errlog( c_ServiceName, "B28522",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE;
	}

	if ( ptr_st_xchngbook->l_stp_lss_tgr != 0 )
	{	
		if ( ptr_st_xchngbook->c_ordr_flw == BUY )
		{
      /** Stop loss trigger price cannot be greater than limit rate **/
      /** for Buy order                                             **/
			if ( ptr_st_xchngbook->l_stp_lss_tgr > ptr_st_xchngbook->l_ord_lmt_rt )
			{
 				fn_errlog( c_ServiceName, "B28524",DEFMSG,ptr_st_err_msg->c_err_msg);
				return FAILURE;
			}

      /** Stop loss trigger price cannot be less than last traded   **/
      /** price for Buy order                                       **/
			if ( ptr_st_xchngbook->l_stp_lss_tgr < ptr_st_cntrct_qt->l_lst_trdd_prc )
			{
 				fn_errlog( c_ServiceName, "B22009",DEFMSG,ptr_st_err_msg->c_err_msg);
				return FAILURE;
			}
		}

		if ( ptr_st_xchngbook->c_ordr_flw == SELL )
		{
      /** Stop loss trigger price cannot be less  than limit rate   **/
      /** for Sell order                                            **/
			if ( ptr_st_xchngbook->l_stp_lss_tgr < ptr_st_xchngbook->l_ord_lmt_rt )
			{
 				fn_errlog( c_ServiceName, "B28525",DEFMSG,ptr_st_err_msg->c_err_msg);
				return FAILURE;
			}

      /** Stop loss trigger price cannot be greater than last traded **/
      /** price for Sell order                                       **/
			if ( ptr_st_xchngbook->l_stp_lss_tgr > ptr_st_cntrct_qt->l_lst_trdd_prc )
			{
 				fn_errlog( c_ServiceName, "B22010",DEFMSG,ptr_st_err_msg->c_err_msg);
				return FAILURE;
			}
		}
	}
  
  if( ptr_st_xchngbook->l_dsclsd_qty > 0 )
  {
  	/** Disclosed Quantity cannot be less than  Minimum disclosed      **/
  	/** percentage ratio of the order qty                              **/
	  if ( ptr_st_xchngbook->l_dsclsd_qty < 
              ( ( d_dsclsd_prcntg / 100 ) * ptr_st_xchngbook->l_ord_tot_qty ) )
	  {
 			fn_errlog( c_ServiceName, "B28526",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE;
	  }
  }

	/************************1.6 Starts*********************************
	if ( ptr_st_xchngbook->c_ord_typ == GOOD_TILL_DATE )
	{
		if ( strcmp( ptr_st_xchngbook->c_valid_dt, "*" ) == 0 )
		{
 			fn_errlog( c_ServiceName, "B28527",DEFMSG,ptr_st_err_msg->c_err_msg);
			return FAILURE;
		}
		else
		{
      i_dategreater = 0;

      EXEC SQL
        SELECT  1
        INTO    :i_dategreater
        FROM    EXG_XCHNG_MSTR
        WHERE   EXG_NXT_TRD_DT < TO_DATE( :ptr_st_xchngbook->c_valid_dt,
																		 'DD-Mon-YYYY' )
				AND			EXG_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd;

			if (( SQLCODE != 0 )  && ( SQLCODE != NO_DATA_FOUND ))
			{
 				fn_errlog( c_ServiceName, "S31450", SQLMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}	

			if ( i_dategreater != 1 )
			{
 				fn_errlog( c_ServiceName, "B28528", DEFMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}

			i_dategreater = 0;

			EXEC SQL
				SELECT  1
				INTO    :i_dategreater
				FROM    DUAL
				WHERE   TO_DATE( :ptr_st_cntrct_qt->c_expry_dt, 'DD-Mon-YYYY' )
								< TO_DATE( :ptr_st_xchngbook->c_valid_dt, 'DD-Mon-YYYY' );

			if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
			{
  			fn_errlog( c_ServiceName, "S31455", SQLMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}

			if ( i_dategreater == 1 )
			{
				fn_errlog( c_ServiceName, "B28539", DEFMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}

			i_dategreater = 0;

      EXEC SQL
        SELECT  TO_DATE(:ptr_st_cntrct_qt->c_expry_dt, 'DD-Mon-YYYY' ) -
                TO_DATE( :ptr_st_xchngbook->c_valid_dt, 'DD-Mon-YYYY' ) -
                EXG_GTD_VALID_DAYS
        INTO    :i_dategreater
        FROM    EXG_XCHNG_MSTR
        WHERE   EXG_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd
        AND     EXG_NXT_TRD_DT < TO_DATE( :ptr_st_cntrct_qt->c_expry_dt,
                               'DD-Mon-YYYY' ) - EXG_GTD_VALID_DAYS ;

			if (( SQLCODE != 0 ) && ( SQLCODE != NO_DATA_FOUND ))
			{
  			fn_errlog( c_ServiceName, "S31460", SQLMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}
		
     	if ( i_dategreater < 0 )
			{
				fn_errlog( c_ServiceName, "B28547", DEFMSG, ptr_st_err_msg->c_err_msg );
				return FAILURE;
			}

		}
	}
	************************1.6 Starts*********************************/
	return SUCCESS;
}


int fn_check_ord_opt( char *c_ServiceName,
                  		struct vw_cntrt_gen_inf *ptr_st_cntrct_gen_inf, 
                  		struct vw_xchngbook *ptr_st_xchngbook, 
                  		struct vw_orderbook *ptr_o_st_ordbook ,
                  		struct vw_err_msg *ptr_st_err_msg )
{

	char c_mkt_allwd_flg;
 /***	char c_err_msg[256]; 
	char c_gtd_msg[256];	* 1.5 *  
	char c_orig_ord_dt[9]; * 1.5 *  
	int  i_gtd_dt_greater = 0; * 1.5 *  Commented in VQC ***/
	/*** Ver 3.3 Starts ***/
	char c_exg_ovrnght_stts ;   
  char c_exg_crrnt_stts;      
  char c_exg_ovrnght_trd_dt[23];   
	/*** Ver 3.3 Ends ***/


  /** Order quantity should be in Multiples of Contract Lot size.   **/
	if ( ptr_st_xchngbook->l_ord_tot_qty % ptr_st_cntrct_gen_inf->l_min_lot_qty
                                                                != 0 )
	{
 		fn_errlog( c_ServiceName, "B28529", DEFMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

  /** Disclosed quantity should be in Multiples of Contract Lot size **/
	if ( ptr_st_xchngbook->l_dsclsd_qty % ptr_st_cntrct_gen_inf->l_min_lot_qty
                                                                != 0 )
	{
 		fn_errlog( c_ServiceName, "B28530", DEFMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

  /** Limit rate should be in Multiples of Contract Tick size        **/
	if ( ptr_st_xchngbook->l_ord_lmt_rt % ptr_st_cntrct_gen_inf->l_tick_sz != 0 )
	{
 		fn_errlog( c_ServiceName, "B28531", DEFMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

  /** Stop loss Trigger Price should be in Multiples of Contract Tick size **/
	if ( ptr_st_xchngbook->l_stp_lss_tgr % ptr_st_cntrct_gen_inf->l_tick_sz != 0 )
	{
 		fn_errlog( c_ServiceName, "B28532", DEFMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

  if ( ptr_st_xchngbook->c_ord_typ == IMMEDIATE_OR_CANCEL  )
  {
    if ( ptr_st_xchngbook->l_stp_lss_tgr != 0 )
    {
      fn_errlog( c_ServiceName, "B28012", DEFMSG, ptr_st_err_msg->c_err_msg );
      return FAILURE;
    }
  }

	/*** Ver 3.3 Starts ***/

  /*** Below query changed to capital case in Ver 7.2 ***/

  EXEC SQL
    SELECT EXG_CRRNT_STTS,
           EXG_TMP_MKT_STTS,
           TO_CHAR ( EXG_TMP_TRD_DT , 'dd-Mon-yyyy' )
    INTO   :c_exg_crrnt_stts,
           :c_exg_ovrnght_stts,
           :c_exg_ovrnght_trd_dt
    FROM   EXG_XCHNG_MSTR
    WHERE  EXG_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd;

  if ( SQLCODE != 0 )
  {
    fn_errlog( c_ServiceName, "S31465",SQLMSG,ptr_st_err_msg->c_err_msg);
    return FAILURE;
  }


  if( c_exg_ovrnght_stts == EXCHANGE_OPEN && c_exg_crrnt_stts == EXCHANGE_UNDER_EXPIRY)
  {
    if ( strcmp(c_exg_ovrnght_trd_dt,ptr_o_st_ordbook->c_trd_dt)!=0)
    {
        fn_userlog( c_ServiceName," Cannot Cancel a order placed in Normal Market hour when market is under expiry ");
        fn_errlog( c_ServiceName, "B28518",DEFMSG,ptr_st_err_msg->c_err_msg);
        return FAILURE;
    }

  }
  /*** Ver 3.3 Ends ***/	

	if ( ptr_st_xchngbook->c_slm_flg == MARKET )
	{
 
   /*** Below query changed to capital case in Ver 7.2 ***/

		EXEC SQL
			SELECT	OPM_MKT_ALLWD
			INTO		:c_mkt_allwd_flg
			FROM		OPM_ORD_PIPE_MSTR
			WHERE		OPM_PIPE_ID	=	:ptr_st_xchngbook->c_pipe_id;

		if ( SQLCODE != 0 )
		{
 			fn_errlog( c_ServiceName, "S31470", SQLMSG, ptr_st_err_msg->c_err_msg );
			return FAILURE;
		}

		if ( c_mkt_allwd_flg == NO )
		{
      if(ptr_st_xchngbook->c_spl_flg != SYSTEM_SQUAREOFF || ptr_st_xchngbook->c_spl_flg != IMTM_SYS_SQUAREOFF || ptr_st_xchngbook->c_spl_flg != LMTNEG_SYS_SQUAREOFF || ptr_st_xchngbook->c_spl_flg != PHYSICAL_DLVRY_SQOFF)						/*  1.2 */      /** Check added for PHYSICAL_DLVRY_SQOFF in ver 7.8 **/ 
      {
        fn_errlog( c_ServiceName, "B28001", DEFMSG, ptr_st_err_msg->c_err_msg );
        return FAILURE;
      }
		}
	}

	/** Modification of order is possible only in REQUESTED, ORDERED **/
  /** and PARTIALLY_EXECUTED states                                **/
	if ( ( ptr_o_st_ordbook->c_ordr_stts != REQUESTED ) && 
	     ( ptr_o_st_ordbook->c_ordr_stts != ORDERED ) && 
	     ( ptr_o_st_ordbook->c_ordr_stts != PARTIALLY_EXECUTED ) ) 
	{
 		fn_errlog( c_ServiceName, "B28533", DEFMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

	/** check if any modifiable parameter has been modified        **/
	if ( (ptr_st_xchngbook->c_slm_flg == ptr_o_st_ordbook->c_slm_flg)
		&& (ptr_st_xchngbook->l_ord_lmt_rt == ptr_o_st_ordbook->l_ord_lmt_rt)
		&& (ptr_st_xchngbook->l_ord_tot_qty == ptr_o_st_ordbook->l_ord_tot_qty)
		&& (ptr_st_xchngbook->l_dsclsd_qty == ptr_o_st_ordbook->l_dsclsd_qty)
		&& (ptr_st_xchngbook->l_stp_lss_tgr == ptr_o_st_ordbook->l_stp_lss_tgr)
		&& (ptr_st_xchngbook->c_ord_typ == ptr_o_st_ordbook->c_ord_typ)
		&& (strcmp(ptr_st_xchngbook->c_valid_dt,ptr_o_st_ordbook->c_valid_dt)==0) )
	{
 		fn_errlog( c_ServiceName, "B28534", DEFMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

	/** The Modified qty cannot be less than or equal to the Executed qty **/
	if( ptr_st_xchngbook->l_ord_tot_qty <= ptr_o_st_ordbook->l_exctd_qty)
	{
 		fn_errlog( c_ServiceName, "B28535", DEFMSG, ptr_st_err_msg->c_err_msg );
		return FAILURE;
	}

if(DEBUG_MSG_LVL_3){
fn_userlog(c_ServiceName, "|%c|%c|%s|%s|",ptr_st_xchngbook->c_ord_typ,
													ptr_o_st_ordbook->c_ord_typ,
													ptr_st_xchngbook->c_valid_dt,
													ptr_o_st_ordbook->c_valid_dt);
}
  /*** The order valid date cannot be modified for the GTD orders ***/
	rtrim(ptr_o_st_ordbook->c_valid_dt);
  if ( ( ptr_st_xchngbook->c_ord_typ == 'D' ) &&
       ( ptr_o_st_ordbook->c_ord_typ == 'D' ) &&
       ( strcmp(ptr_st_xchngbook->c_valid_dt ,
         ptr_o_st_ordbook->c_valid_dt) != 0 ) )
  {
    fn_errlog( c_ServiceName, "B28571", DEFMSG, ptr_st_err_msg->c_err_msg );
    return FAILURE;
  }
	
	/* 1.5  commented by sangeet on 25-11-2009 as not required and printing junk***/
	
	/*
	strncpy(c_orig_ord_dt, ptr_o_st_ordbook->c_ordr_rfrnc, 8);
  fn_userlog( c_ServiceName, "Original order date: %s:", c_orig_ord_dt);
	fn_userlog( c_ServiceName, "Valid date of exchgbk: %s" , ptr_st_xchngbook->c_valid_dt);
  EXEC SQL
    SELECT  1
      INTO  :i_gtd_dt_greater
      FROM  dual
      WHERE (to_date(:c_orig_ord_dt, 'YYYYMMDD')+ 6)
            < to_date( :ptr_st_xchngbook->c_valid_dt, 'DD-Mon-YYYY');

    if(i_gtd_dt_greater == 1 )
    {
			strcpy(c_gtd_msg, "Please enter a valid date for GTD orders");
			fn_errlog( c_ServiceName,"S31475",c_gtd_msg,ptr_st_err_msg->c_err_msg );
			strcpy(ptr_st_err_msg->c_err_msg, "Please enter a valid date for GTD orders");
      return FAILURE;
    }
	*/

	  /* Ver 2.4 Additional check */

  if( DEBUG_MSG_LVL_3)
  {
    fn_userlog( c_ServiceName,"Exchange code is :%s:", ptr_st_xchngbook->c_xchng_cd );
    fn_userlog( c_ServiceName,"Product type is :%c:", ptr_o_st_ordbook->c_prd_typ );
    fn_userlog( c_ServiceName,"Underlying is :%s:", ptr_o_st_ordbook->c_undrlyng );
  }

  /*** Below query changed to capital case in Ver 7.2 ***/

  EXEC SQL
       SELECT FUM_FREEZE_QTY
       INTO   :sql_fum_freeze_qty
       FROM   FUM_FO_UNDRLYNG_MSTR
       WHERE  FUM_XCHNG_CD = :ptr_st_xchngbook->c_xchng_cd
       /*** AND    fum_prdct_typ = :ptr_o_st_ordbook->c_prd_typ Commented In Ver 4.4 ***/
       AND    FUM_PRDCT_TYP =  DECODE (:ptr_o_st_ordbook->c_prd_typ ,'I','O',:ptr_o_st_ordbook->c_prd_typ) /*** Ver 4.4 ***/
       AND    FUM_UNDRLYNG = :ptr_o_st_ordbook->c_undrlyng;

  if ( SQLCODE != 0 )
  {
     fn_errlog( c_ServiceName, "S31480", SQLMSG, ptr_st_err_msg->c_err_msg );
     return FAILURE;
  }

  if( ptr_st_xchngbook->l_ord_tot_qty > sql_fum_freeze_qty && sql_fum_freeze_qty != 0 )
  {
    fn_errlog( c_ServiceName, "B66071", DEFMSG, ptr_st_err_msg->c_err_msg );
    sprintf(ptr_st_err_msg->c_err_msg,"%s:%ld",ptr_st_err_msg->c_err_msg,sql_fum_freeze_qty);
    return FAILURE;
  }

  /* Ver 2.4 Ends */
	
	return SUCCESS;
}
/*** Ver 4.4 Function for 5 paisa check ***/
int fn_5paisa(long l_temp)
{
  if((l_temp%5) != 0)
  {
    return -1;
  }
  return 0;
}
/*** Ver 4.4 Ends **/

/*** Ver 7.7 Starts ***/
int fn_get_quote_zero ( char *c_ServiceName,char c_ord_flw, long l_best_bid_price, long l_best_offer_price, long l_previous_close_price, long *l_quote_zero)
{
	if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"Inside function fn_get_quote_zero");
    fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_best_bid_price is :%ld:",l_best_bid_price);
    fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_best_offer_price is :%ld:",l_best_offer_price);
    fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_previous_close_price is :%ld:",l_previous_close_price);
  }
  if(c_ord_flw == 'B')
  {
    if(l_best_offer_price == 0)
    {
      *l_quote_zero = l_previous_close_price;
    }
    else
    {
      *l_quote_zero = l_best_offer_price;
    }
  }
  else if (c_ord_flw == 'S')
  {
    if(l_best_bid_price == 0)
    {
      *l_quote_zero = l_previous_close_price;
    }
    else
    {
      *l_quote_zero = l_best_bid_price;
    }
  }
  else
  {
    return -1;
  }
	if(DEBUG_MSG_LVL_5)
  {
    fn_userlog(c_ServiceName,"Inside fn_get_quote_zero l_quote_zero is :%ld:",*l_quote_zero);
  }
  return 1;
}
/*** Ver 7.7 Ends ***/
